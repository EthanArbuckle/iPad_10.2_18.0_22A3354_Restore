uint64_t AUECMicRef::Cleanup(AUECMicRef *this)
{
  NSObject *v2;
  uint64_t result;
  int v4;
  const char *v5;
  __int16 v6;
  int v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  if (AUECMicRefLogScope(void)::once != -1)
    dispatch_once(&AUECMicRefLogScope(void)::once, &__block_literal_global_8594);
  if (AUECMicRefLogScope(void)::scope)
  {
    v2 = *(NSObject **)AUECMicRefLogScope(void)::scope;
    if (!*(_QWORD *)AUECMicRefLogScope(void)::scope)
      goto LABEL_9;
  }
  else
  {
    v2 = MEMORY[0x1E0C81028];
  }
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    v4 = 136315394;
    v5 = "AUECMicRef.cpp";
    v6 = 1024;
    v7 = 334;
    _os_log_impl(&dword_1B5ED0000, v2, OS_LOG_TYPE_DEFAULT, "%25s:%-5d AUECMicRef: Cleanup.\n", (uint8_t *)&v4, 0x12u);
  }
LABEL_9:
  result = *((_QWORD *)this + 91);
  *((_QWORD *)this + 91) = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t AUECMicRef::Reset(AUECMicRef *this)
{
  NSObject *v2;
  int v4;
  const char *v5;
  __int16 v6;
  int v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  if (AUECMicRefLogScope(void)::once != -1)
    dispatch_once(&AUECMicRefLogScope(void)::once, &__block_literal_global_8594);
  if (AUECMicRefLogScope(void)::scope)
  {
    v2 = *(NSObject **)AUECMicRefLogScope(void)::scope;
    if (!*(_QWORD *)AUECMicRefLogScope(void)::scope)
      goto LABEL_9;
  }
  else
  {
    v2 = MEMORY[0x1E0C81028];
  }
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    v4 = 136315394;
    v5 = "AUECMicRef.cpp";
    v6 = 1024;
    v7 = 382;
    _os_log_impl(&dword_1B5ED0000, v2, OS_LOG_TYPE_DEFAULT, "%25s:%-5d AUECMicRef: Reset.\n", (uint8_t *)&v4, 0x12u);
  }
LABEL_9:
  if (*((_BYTE *)this + 17))
    AUECMicRef::DoCoreECInit(this);
  return 0;
}

uint64_t AUECMicRef::GetPropertyInfo(AUECMicRef *this, int a2, int a3, unsigned int a4, unsigned int *a5, BOOL *a6)
{
  uint64_t result;
  int v8;
  int v9;

  if (a3)
    return 4294956417;
  result = 4294956417;
  if (a2 <= 7698)
  {
    if (a2 <= 4698)
    {
      if (a2 == 21)
      {
        *a6 = 1;
        goto LABEL_21;
      }
      if (a2 != 3700)
      {
        if (a2 != 3800)
          return result;
        *a6 = 0;
        v9 = 4 * *((_DWORD *)this + 138) * *((_DWORD *)this + 139) * *((_DWORD *)this + 142);
        goto LABEL_22;
      }
      goto LABEL_20;
    }
    if (a2 == 4699 || a2 == 5699)
      goto LABEL_20;
    v8 = 6699;
    goto LABEL_19;
  }
  if (a2 <= 303799)
  {
    if (a2 == 7699)
      goto LABEL_20;
    if (a2 == 103800)
    {
      *a6 = *((_BYTE *)this + 17) ^ 1;
      goto LABEL_29;
    }
    v8 = 203800;
LABEL_19:
    if (a2 != v8)
      return result;
    goto LABEL_20;
  }
  if (a2 <= 503799)
  {
    if (a2 != 303800)
    {
      v8 = 403800;
      goto LABEL_19;
    }
LABEL_20:
    *a6 = 0;
LABEL_21:
    v9 = 4;
LABEL_22:
    result = 0;
    *a5 = v9;
    return result;
  }
  if (a2 == 503800)
  {
    *a6 = 0;
    v9 = 8 * *((_DWORD *)this + 138) * *((_DWORD *)this + 139) * *((_DWORD *)this + 146) * *((_DWORD *)this + 137);
    goto LABEL_22;
  }
  if (a2 == 603800)
  {
    *a6 = 0;
LABEL_29:
    v9 = 8;
    goto LABEL_22;
  }
  return result;
}

uint64_t AUECMicRef::GetProperty(AUECMicRef *this, int a2, int a3, unsigned int a4, unsigned int *a5)
{
  uint64_t result;
  unsigned int v9;
  uint64_t v10;
  ausdk::AUElement *v11;
  std::mutex *v12;
  CFArrayRef CFArray;
  uint64_t v14;
  ausdk::AUElement *v15;
  uint64_t v16;
  ausdk::AUElement *v17;
  uint64_t v18;
  const void *v19;
  unsigned int v20;
  ausdk::AUElement **v21;
  ausdk::AUElement **v22;
  ausdk::AUElement **v23;
  ausdk::AUElement **v24;
  float v25;
  BOOL v26;
  float v27;
  unsigned int v28;
  float Parameter;

  if (a3)
    return 4294956417;
  result = 4294956417;
  if (a2 <= 7698)
  {
    if (a2 <= 4698)
    {
      switch(a2)
      {
        case 21:
          result = 0;
          v9 = *((unsigned __int8 *)this + 528);
          break;
        case 3700:
          result = 0;
          v9 = *((unsigned __int8 *)this + 376);
          break;
        case 3800:
LABEL_27:
          v12 = (std::mutex *)((char *)this + 616);
          std::mutex::lock((std::mutex *)((char *)this + 616));
          (*(void (**)(_QWORD, char *))(**((_QWORD **)this + 91) + 48))(*((_QWORD *)this + 91), (char *)this + 736);
          if (a2 == 103800)
          {
            CFArray = applesauce::CF::details::make_CFArrayRef<float>((_QWORD *)this + 92);
            goto LABEL_29;
          }
          v19 = (const void *)*((_QWORD *)this + 92);
          v20 = *((_DWORD *)this + 139) * *((_DWORD *)this + 138) * *((_DWORD *)this + 142);
LABEL_41:
          memcpy(a5, v19, 4 * v20);
          goto LABEL_42;
        default:
          return result;
      }
LABEL_63:
      *a5 = v9;
      return result;
    }
    if (a2 != 4699)
    {
      if (a2 == 5699)
      {
        v18 = *((_QWORD *)this + 9);
        if (v18)
        {
          v11 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v18 + 32))(v18, 0);
        }
        else
        {
          v23 = (ausdk::AUElement **)*((_QWORD *)this + 6);
          if (*((ausdk::AUElement ***)this + 7) == v23)
            v11 = 0;
          else
            v11 = *v23;
        }
        v28 = 22;
      }
      else
      {
        if (a2 != 6699)
          return result;
        v10 = *((_QWORD *)this + 9);
        if (v10)
        {
          v11 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v10 + 32))(v10, 0);
        }
        else
        {
          v24 = (ausdk::AUElement **)*((_QWORD *)this + 6);
          if (*((ausdk::AUElement ***)this + 7) == v24)
            v11 = 0;
          else
            v11 = *v24;
        }
        v28 = 16;
      }
      Parameter = ausdk::AUElement::GetParameter(v11, v28);
      result = 0;
      v9 = Parameter;
      goto LABEL_63;
    }
    v16 = *((_QWORD *)this + 9);
    if (v16)
    {
      v17 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v16 + 32))(v16, 0);
    }
    else
    {
      v22 = (ausdk::AUElement **)*((_QWORD *)this + 6);
      if (*((ausdk::AUElement ***)this + 7) == v22)
        v17 = 0;
      else
        v17 = *v22;
    }
    v27 = ausdk::AUElement::GetParameter(v17, 0x11u);
    result = 0;
    v26 = v27 == 1.0;
LABEL_55:
    v9 = v26;
    goto LABEL_63;
  }
  if (a2 <= 303799)
  {
    if (a2 != 7699)
    {
      if (a2 != 103800)
      {
        if (a2 != 203800)
          return result;
        result = 0;
        v9 = *((_DWORD *)this + 138);
        goto LABEL_63;
      }
      goto LABEL_27;
    }
    v14 = *((_QWORD *)this + 9);
    if (v14)
    {
      v15 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v14 + 32))(v14, 0);
    }
    else
    {
      v21 = (ausdk::AUElement **)*((_QWORD *)this + 6);
      if (*((ausdk::AUElement ***)this + 7) == v21)
        v15 = 0;
      else
        v15 = *v21;
    }
    v25 = ausdk::AUElement::GetParameter(v15, 0x11u);
    result = 0;
    v26 = v25 == 0.0;
    goto LABEL_55;
  }
  if (a2 <= 503799)
  {
    if (a2 == 303800)
    {
      result = 0;
      v9 = *((_DWORD *)this + 139);
    }
    else
    {
      if (a2 != 403800)
        return result;
      result = 0;
      v9 = *((_DWORD *)this + 142);
    }
    goto LABEL_63;
  }
  if (a2 == 503800 || a2 == 603800)
  {
    v12 = (std::mutex *)((char *)this + 616);
    std::mutex::lock((std::mutex *)((char *)this + 616));
    (*(void (**)(_QWORD, char *))(**((_QWORD **)this + 91) + 64))(*((_QWORD *)this + 91), (char *)this + 760);
    if (a2 == 603800)
    {
      CFArray = applesauce::CF::details::make_CFArrayRef<float>((_QWORD *)this + 95);
LABEL_29:
      *(_QWORD *)a5 = CFArray;
LABEL_42:
      std::mutex::unlock(v12);
      return 0;
    }
    v19 = (const void *)*((_QWORD *)this + 95);
    v20 = 2 * *((_DWORD *)this + 138) * *((_DWORD *)this + 139) * *((_DWORD *)this + 146) * *((_DWORD *)this + 137);
    goto LABEL_41;
  }
  return result;
}

void sub_1B6339C54(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t AUECMicRef::SetProperty(AUECMicRef *this, int a2, int a3, unsigned int a4, const __CFArray **a5, int a6)
{
  uint64_t result;
  char *v8;
  char *v9;
  uint64_t v10;
  char v11;

  if (a3)
    return 4294956417;
  if (a2 != 103800)
  {
    if (a2 == 21)
    {
      result = 0;
      *((_BYTE *)this + 528) = *(_DWORD *)a5 != 0;
      return result;
    }
    return 4294956417;
  }
  if (*((_BYTE *)this + 17))
    return 4294956447;
  if (a6 != 8)
    return 4294956445;
  applesauce::CF::convert_as<std::vector<float>,0>((uint64_t)&v9, *a5);
  if (!v11)
    return 4294956445;
  v8 = v9;
  std::vector<float>::__assign_with_size[abi:ne180100]<std::__wrap_iter<float *>,std::__wrap_iter<float *>>((char *)this + 736, v9, v10, (v10 - (uint64_t)v9) >> 2);
  *((_BYTE *)this + 784) = 1;
  if (v8)
    operator delete(v8);
  return 0;
}

void sub_1B6339D38(_Unwind_Exception *exception_object)
{
  void *v1;

  if (v1)
    operator delete(v1);
  _Unwind_Resume(exception_object);
}

uint64_t AUECMicRef::SetParameter(AUECMicRef *this, unsigned int a2, int a3, float a4)
{
  uint64_t v7;
  ausdk::AUElement *v8;
  ausdk::AUElement **v9;

  if (a3)
    return 4294956418;
  ++*((_DWORD *)this + 133);
  v7 = *((_QWORD *)this + 9);
  if (v7)
  {
    v8 = (ausdk::AUElement *)(*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)v7 + 32))(*((_QWORD *)this + 9), 0);
  }
  else
  {
    v9 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v9)
      v8 = 0;
    else
      v8 = *v9;
  }
  ausdk::AUElement::SetParameter(v8, a2, a4, 0);
  return 0;
}

uint64_t AUECMicRef::CanScheduleParameters(AUECMicRef *this)
{
  return 0;
}

uint64_t AUECMicRef::ProcessMultipleBufferLists(AUECMicRef *this, unsigned int *a2, int a3, int a4, const AudioBufferList **a5, int a6, AudioBufferList **a7, double a8, double a9)
{
  uint64_t result;
  _DWORD *v11;
  uint64_t v12;
  unint64_t v13;
  const void **v14;
  void **v15;
  void *v16;
  void *v17;
  const void *v18;
  NSObject *v20;
  int v21;
  const AudioBufferList *v22;
  const AudioBufferList *v23;
  AudioBufferList *v24;
  AudioBufferList *v25;
  int v26;
  uint64_t v27;
  ausdk::AUElement *v28;
  ausdk::AUElement **v29;
  uint64_t v30;
  ausdk::AUElement *v31;
  ausdk::AUElement **v32;
  float Parameter;
  uint64_t v34;
  ausdk::AUElement *v35;
  ausdk::AUElement **v36;
  _BOOL8 v37;
  uint64_t v38;
  ausdk::AUElement *v39;
  ausdk::AUElement **v40;
  float v41;
  unsigned int v42;
  uint64_t v43;
  ausdk::AUElement *v44;
  _QWORD *v45;
  uint64_t v46;
  ausdk::AUElement *v47;
  _QWORD *v48;
  unint64_t v49;
  unsigned int v50;
  float v51;
  uint64_t v52;
  float v53;
  float v54;
  unint64_t v55;
  caulk::concurrent::messenger *v56;
  uint64_t v57;
  int v58;
  int v59;
  int v60;
  int v61;
  float v62;
  float v63;
  uint64_t v64;
  ausdk::AUElement *v65;
  ausdk::AUElement **v66;
  uint64_t v67;
  ausdk::AUElement *v68;
  ausdk::AUElement **v69;
  uint64_t v70;
  ausdk::AUElement *v71;
  ausdk::AUElement **v72;
  int v73;
  int v74;
  int v75;
  int v76;
  AudioBufferList *v77;
  NSObject *v78;
  AudioBufferList *v79;
  unint64_t v80;
  const void **v81;
  float **p_mData;
  void **v83;
  float *v84;
  unint64_t v85;
  float **v86;
  NSObject *v87;
  uint64_t v88;
  ausdk::AUElement *v89;
  ausdk::AUElement **v90;
  float v91;
  unint64_t v92;
  unint64_t v93;
  double v94;
  caulk::concurrent::messenger *v95;
  char v96;
  char v97;
  char v98;
  _QWORD *v99;
  uint64_t v100;
  uint64_t v101;
  caulk::concurrent::messenger *v102;
  float v103;
  float v104;
  uint64_t v105;
  uint64_t v106;
  caulk::concurrent::messenger *v107;
  float v108;
  uint64_t v109;
  caulk::concurrent::messenger *v110;
  uint64_t v111;
  float v112;
  const char *v113;
  __int16 v114;
  int v115;
  __int16 v116;
  int v117;
  __int16 v118;
  int v119;
  __int16 v120;
  int v121;
  uint64_t v122;

  v122 = *MEMORY[0x1E0C80C00];
  LODWORD(a8) = *((_DWORD *)this + 137);
  LODWORD(a9) = *((_DWORD *)this + 136);
  *((double *)this + 76) = *((double *)this + 76) + (double)*(unint64_t *)&a8 / (double)*(unint64_t *)&a9;
  if (*((_DWORD *)this + 84) != a3)
  {
    if (AUECMicRefLogScope(void)::once != -1)
      dispatch_once(&AUECMicRefLogScope(void)::once, &__block_literal_global_8594);
    if (AUECMicRefLogScope(void)::scope)
    {
      v20 = *(NSObject **)AUECMicRefLogScope(void)::scope;
      if (!*(_QWORD *)AUECMicRefLogScope(void)::scope)
        return 4294956422;
    }
    else
    {
      v20 = MEMORY[0x1E0C81028];
    }
    if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
    {
      v21 = *((_DWORD *)this + 84);
      v112 = 4.8153e-34;
      v113 = "AUECMicRef.cpp";
      v114 = 1024;
      v115 = 936;
      v116 = 1024;
      v117 = a3;
      v118 = 1024;
      v119 = v21;
      _os_log_impl(&dword_1B5ED0000, v20, OS_LOG_TYPE_ERROR, "%25s:%-5d AUECMicRef::ProcessMultipleBufferLists error - wrong (%u) block size expected (%u)\n", (uint8_t *)&v112, 0x1Eu);
    }
    return 4294956422;
  }
  result = 4294956428;
  if (a4 != 3 || a6 != 3)
    return result;
  v11 = *a5;
  v12 = (uint64_t)*a7;
  if (*((_BYTE *)this + 528))
  {
    if ((_DWORD *)v12 != v11 && *((_DWORD *)this + 138))
    {
      v13 = 0;
      v14 = (const void **)(v11 + 4);
      v15 = (void **)(v12 + 16);
      do
      {
        v17 = *v15;
        v15 += 2;
        v16 = v17;
        v18 = *v14;
        v14 += 2;
        memcpy(v16, v18, 4 * *((unsigned int *)this + 137));
        ++v13;
      }
      while (v13 < *((unsigned int *)this + 138));
    }
LABEL_136:
    result = 0;
    *((_QWORD *)this + 75) = 0;
    return result;
  }
  v22 = a5[1];
  v23 = a5[2];
  v25 = a7[1];
  v24 = a7[2];
  v26 = *((_DWORD *)this + 133);
  if (v26 != *((_DWORD *)this + 134))
  {
    v27 = *((_QWORD *)this + 9);
    if (v27)
    {
      v28 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v27 + 32))(v27, 0);
    }
    else
    {
      v29 = (ausdk::AUElement **)*((_QWORD *)this + 6);
      if (*((ausdk::AUElement ***)this + 7) == v29)
        v28 = 0;
      else
        v28 = *v29;
    }
    *((float *)this + 170) = ausdk::AUElement::GetParameter(v28, 1u);
    v30 = *((_QWORD *)this + 9);
    if (v30)
    {
      v31 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v30 + 32))(v30, 0);
    }
    else
    {
      v32 = (ausdk::AUElement **)*((_QWORD *)this + 6);
      if (*((ausdk::AUElement ***)this + 7) == v32)
        v31 = 0;
      else
        v31 = *v32;
    }
    Parameter = ausdk::AUElement::GetParameter(v31, 2u);
    *((float *)this + 171) = Parameter;
    (*(void (**)(_QWORD, float, float))(**((_QWORD **)this + 91) + 136))(*((_QWORD *)this + 91), *((float *)this + 170), Parameter);
    *((_DWORD *)this + 134) = v26;
  }
  v34 = *((_QWORD *)this + 9);
  if (v34)
  {
    v35 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v34 + 32))(v34, 0);
  }
  else
  {
    v36 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v36)
      v35 = 0;
    else
      v35 = *v36;
  }
  v37 = ausdk::AUElement::GetParameter(v35, 0x12u) != 0.0;
  (*(void (**)(_QWORD, _DWORD *, const AudioBufferList *, const AudioBufferList *, uint64_t, AudioBufferList *, AudioBufferList *, _BOOL8))(**((_QWORD **)this + 91) + 40))(*((_QWORD *)this + 91), v11, v22, v23, v12, v25, v24, v37);
  v38 = *((_QWORD *)this + 9);
  if (v38)
  {
    v39 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v38 + 32))(v38, 0);
  }
  else
  {
    v40 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v40)
      v39 = 0;
    else
      v39 = *v40;
  }
  v41 = ausdk::AUElement::GetParameter(v39, 0xFu);
  v42 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 91) + 144))(*((_QWORD *)this + 91));
  if ((v42 & 1) != 0)
    goto LABEL_66;
  v43 = *((_QWORD *)this + 9);
  if (v43)
  {
    v44 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v43 + 32))(v43, 0);
  }
  else
  {
    v45 = (_QWORD *)*((_QWORD *)this + 6);
    v44 = *((_QWORD **)this + 7) == v45 ? 0 : (ausdk::AUElement *)*v45;
  }
  *((float *)this + 148) = ausdk::AUElement::GetParameter(v44, 0x14u);
  v46 = *((_QWORD *)this + 9);
  if (v46)
  {
    v47 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v46 + 32))(v46, 0);
  }
  else
  {
    v48 = (_QWORD *)*((_QWORD *)this + 6);
    v47 = *((_QWORD **)this + 7) == v48 ? 0 : (ausdk::AUElement *)*v48;
  }
  *((float *)this + 149) = ausdk::AUElement::GetParameter(v47, 0x15u);
  if (*v11)
  {
    v49 = 0;
    v50 = *((_DWORD *)this + 137);
    v51 = 0.0;
    v52 = 4;
    v53 = 0.0;
    do
    {
      v112 = 0.0;
      vDSP_svesq(*(const float **)&v11[v52], 1, &v112, v50);
      v50 = *((_DWORD *)this + 137);
      v54 = log10f((float)(v112 / (float)v50) + 1.0e-20) * 10.0;
      if (!v49)
      {
        v53 = v54;
        v54 = -0.0;
      }
      v51 = v51 + v54;
      ++v49;
      v55 = *v11;
      v52 += 4;
    }
    while (v49 < v55);
    if (v55 > 2)
      v51 = v51 / (float)(v55 - 1);
  }
  else
  {
    v53 = 0.0;
    v51 = 0.0;
  }
  if (v51 >= *((float *)this + 148) || (float)(v53 - v51) <= *((float *)this + 149))
  {
LABEL_66:
    v58 = 0;
  }
  else
  {
    if (*((double *)this + 72) > 0.0)
    {
      v56 = (caulk::concurrent::messenger *)*((_QWORD *)this + 99);
      if (v56)
      {
        v57 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)*MEMORY[0x1E0DDB688] + 16))(*MEMORY[0x1E0DDB688], 24, 8);
        *(_DWORD *)(v57 + 16) = 0;
        *(_QWORD *)v57 = &off_1E69D31B8;
        *(_QWORD *)(v57 + 8) = 0;
        caulk::concurrent::messenger::enqueue(v56, (caulk::concurrent::message *)v57);
      }
    }
    v58 = 1;
  }
  if (v41 == 0.0)
    v59 = 1;
  else
    v59 = v42;
  v60 = v59 | v58;
  if (v41 == 0.0)
    v61 = v42;
  else
    v61 = 1;
  if (v60)
    v62 = 1.0;
  else
    v62 = 0.0;
  if (v61 | v58)
    v63 = 1.0;
  else
    v63 = 0.0;
  v64 = *((_QWORD *)this + 9);
  if (v64)
  {
    v65 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v64 + 32))(v64, 0);
  }
  else
  {
    v66 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v66)
      v65 = 0;
    else
      v65 = *v66;
  }
  ausdk::AUElement::SetParameter(v65, 0x10u, (float)v42, 0);
  v67 = *((_QWORD *)this + 9);
  if (v67)
  {
    v68 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v67 + 32))(v67, 0);
  }
  else
  {
    v69 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v69)
      v68 = 0;
    else
      v68 = *v69;
  }
  ausdk::AUElement::SetParameter(v68, 0x11u, v62, 0);
  v70 = *((_QWORD *)this + 9);
  if (v70)
  {
    v71 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v70 + 32))(v70, 0);
  }
  else
  {
    v72 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v72)
      v71 = 0;
    else
      v71 = *v72;
  }
  ausdk::AUElement::SetParameter(v71, 0x16u, v63, 0);
  v73 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 91) + 72))(*((_QWORD *)this + 91));
  v74 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 91) + 88))(*((_QWORD *)this + 91));
  v75 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 91) + 80))(*((_QWORD *)this + 91));
  v76 = v75;
  if (v73 && v74 && (v75 & 1) != 0)
    goto LABEL_119;
  if (AUECMicRefLogScope(void)::once != -1)
    dispatch_once(&AUECMicRefLogScope(void)::once, &__block_literal_global_8594);
  v77 = v24;
  if (!AUECMicRefLogScope(void)::scope)
  {
    v78 = MEMORY[0x1E0C81028];
LABEL_103:
    if (os_log_type_enabled(v78, OS_LOG_TYPE_ERROR))
    {
      v112 = 4.8154e-34;
      v113 = "AUECMicRef.cpp";
      v114 = 1024;
      v115 = 1046;
      v116 = 1024;
      v117 = v73;
      v118 = 1024;
      v119 = v74;
      v120 = 1024;
      v121 = v76;
      _os_log_impl(&dword_1B5ED0000, v78, OS_LOG_TYPE_ERROR, "%25s:%-5d AUECMicRef: ********* Reset begins *********\nAUECMicRef: state variables have finite values (1 if True): %u\nAUECMicRef: ref-signal buffers have finite values (1 if True): %u\nAUECMicRef: EC output buffers have valid values (1 if True): %u\n", (uint8_t *)&v112, 0x24u);
    }
    goto LABEL_105;
  }
  v78 = *(NSObject **)AUECMicRefLogScope(void)::scope;
  if (*(_QWORD *)AUECMicRefLogScope(void)::scope)
    goto LABEL_103;
LABEL_105:
  std::mutex::lock((std::mutex *)((char *)this + 616));
  v79 = v77;
  AUECMicRef::DoCoreECInit(this);
  std::mutex::unlock((std::mutex *)((char *)this + 616));
  if (*((_DWORD *)this + 138))
  {
    v80 = 0;
    v81 = (const void **)(v11 + 4);
    p_mData = (float **)&v25->mBuffers[0].mData;
    v83 = (void **)(v12 + 16);
    do
    {
      v84 = *p_mData;
      memcpy(*v83, *v81, 4 * *((unsigned int *)this + 137));
      vDSP_vclr(v84, 1, *((unsigned int *)this + 137));
      ++v80;
      v81 += 2;
      p_mData += 2;
      v83 += 2;
    }
    while (v80 < *((unsigned int *)this + 138));
  }
  if (*((_DWORD *)this + 139))
  {
    v85 = 0;
    v86 = (float **)&v79->mBuffers[0].mData;
    do
    {
      vDSP_vclr(*v86, 1, *((unsigned int *)this + 137));
      ++v85;
      v86 += 2;
    }
    while (v85 < *((unsigned int *)this + 139));
  }
  if (AUECMicRefLogScope(void)::once != -1)
    dispatch_once(&AUECMicRefLogScope(void)::once, &__block_literal_global_8594);
  if (AUECMicRefLogScope(void)::scope)
  {
    v87 = *(NSObject **)AUECMicRefLogScope(void)::scope;
    if (!*(_QWORD *)AUECMicRefLogScope(void)::scope)
      goto LABEL_119;
  }
  else
  {
    v87 = MEMORY[0x1E0C81028];
  }
  if (os_log_type_enabled(v87, OS_LOG_TYPE_ERROR))
  {
    v112 = 4.8151e-34;
    v113 = "AUECMicRef.cpp";
    v114 = 1024;
    v115 = 1070;
    _os_log_impl(&dword_1B5ED0000, v87, OS_LOG_TYPE_ERROR, "%25s:%-5d AUECMicRef: ********* Reset ends *********\n", (uint8_t *)&v112, 0x12u);
  }
LABEL_119:
  v88 = *((_QWORD *)this + 9);
  if (v88)
  {
    v89 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v88 + 32))(v88, 0);
  }
  else
  {
    v90 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v90)
      v89 = 0;
    else
      v89 = *v90;
  }
  v91 = ausdk::AUElement::GetParameter(v89, 0xEu);
  result = 0;
  *((double *)this + 72) = v91;
  LODWORD(v92) = *((_DWORD *)this + 137);
  LODWORD(v93) = *((_DWORD *)this + 136);
  v94 = *((double *)this + 75) + (double)v92 / (double)v93;
  if (v94 < 0.0)
    v94 = 0.0;
  *((double *)this + 75) = v94;
  if (v91 > 0.0 && v94 > v91)
  {
    v95 = (caulk::concurrent::messenger *)*((_QWORD *)this + 99);
    if (!v95)
      return 0;
    v96 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 91) + 72))(*((_QWORD *)this + 91));
    v97 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 91) + 88))(*((_QWORD *)this + 91));
    v98 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 91) + 80))(*((_QWORD *)this + 91));
    v99 = (_QWORD *)MEMORY[0x1E0DDB688];
    v100 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)*MEMORY[0x1E0DDB688] + 16))(*MEMORY[0x1E0DDB688], 48, 8);
    *(_QWORD *)(v100 + 8) = 0;
    *(_DWORD *)(v100 + 16) = 0;
    *(_OWORD *)(v100 + 24) = *(_OWORD *)((char *)this + 600);
    *(_BYTE *)(v100 + 40) = v96;
    *(_BYTE *)(v100 + 41) = v97;
    *(_BYTE *)(v100 + 42) = v98;
    *(_QWORD *)v100 = &off_1E69D3118;
    caulk::concurrent::messenger::enqueue(v95, (caulk::concurrent::message *)v100);
    if (*((_DWORD *)this + 138))
    {
      v101 = 0;
      do
      {
        v102 = (caulk::concurrent::messenger *)*((_QWORD *)this + 99);
        v103 = (*(float (**)(_QWORD, uint64_t))(**((_QWORD **)this + 91) + 96))(*((_QWORD *)this + 91), v101);
        v104 = (*(float (**)(_QWORD, uint64_t))(**((_QWORD **)this + 91) + 104))(*((_QWORD *)this + 91), v101);
        v105 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)*v99 + 16))(*v99, 40, 8);
        *(_DWORD *)(v105 + 16) = 0;
        *(_DWORD *)(v105 + 24) = v101;
        *(float *)(v105 + 28) = v103;
        *(float *)(v105 + 32) = v104;
        *(_QWORD *)v105 = &off_1E69D3140;
        *(_QWORD *)(v105 + 8) = 0;
        caulk::concurrent::messenger::enqueue(v102, (caulk::concurrent::message *)v105);
        v101 = (v101 + 1);
      }
      while (v101 < *((_DWORD *)this + 138));
    }
    if (*((_DWORD *)this + 139))
    {
      v106 = 0;
      do
      {
        v107 = (caulk::concurrent::messenger *)*((_QWORD *)this + 99);
        v108 = (*(float (**)(_QWORD, uint64_t))(**((_QWORD **)this + 91) + 112))(*((_QWORD *)this + 91), v106);
        v109 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)*v99 + 16))(*v99, 32, 8);
        *(_DWORD *)(v109 + 16) = 0;
        *(_DWORD *)(v109 + 24) = v106;
        *(float *)(v109 + 28) = v108;
        *(_QWORD *)v109 = &off_1E69D3168;
        *(_QWORD *)(v109 + 8) = 0;
        caulk::concurrent::messenger::enqueue(v107, (caulk::concurrent::message *)v109);
        v106 = (v106 + 1);
      }
      while (v106 < *((_DWORD *)this + 139));
    }
    v110 = (caulk::concurrent::messenger *)*((_QWORD *)this + 99);
    v111 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)*v99 + 16))(*v99, 24, 8);
    *(_DWORD *)(v111 + 16) = 0;
    *(_QWORD *)v111 = &off_1E69D3190;
    *(_QWORD *)(v111 + 8) = 0;
    caulk::concurrent::messenger::enqueue(v110, (caulk::concurrent::message *)v111);
    goto LABEL_136;
  }
  return result;
}

void sub_1B633A890(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t AUECMicRef::Render(AUECMicRef *this, unsigned int *a2, const AudioTimeStamp *a3, uint64_t a4)
{
  ausdk::AUScope *v8;
  uint64_t Element;
  uint64_t v10;
  ausdk::AUInputElement *v11;
  uint64_t result;
  AudioBufferList *BufferList;

  if (*((_DWORD *)this + 84) != (_DWORD)a4)
    return 4294956422;
  v8 = (AUECMicRef *)((char *)this + 80);
  Element = ausdk::AUScope::SafeGetElement((AUECMicRef *)((char *)this + 80), 0);
  v10 = ausdk::AUScope::SafeGetElement((AUECMicRef *)((char *)this + 128), 0);
  if (!ausdk::AUBase::HasInput(this, 0))
    return 4294956420;
  v11 = (ausdk::AUInputElement *)ausdk::AUScope::SafeGetElement(v8, 0);
  result = ausdk::AUInputElement::PullInput(v11, a2, a3, 0, a4);
  if (!(_DWORD)result)
  {
    BufferList = (AudioBufferList *)ausdk::AUBufferList::GetBufferList((ausdk::AUBufferList *)(v10 + 144));
    ausdk::AUBufferList::CopyBufferContentsTo((_QWORD *)(Element + 144), BufferList);
    return 0;
  }
  return result;
}

BOOL AUECMicRef::BusCountWritable(AUECMicRef *this, int a2)
{
  return (a2 - 1) < 2;
}

uint64_t AUECMicRef::GetParameterList(AUECMicRef *this, int a2, unsigned int *a3, unsigned int *a4)
{
  uint64_t result;

  if (a2)
    return 4294956430;
  if (a3)
  {
    *(_OWORD *)a3 = xmmword_1B6626920;
    *((_OWORD *)a3 + 1) = xmmword_1B66A0770;
    *((_OWORD *)a3 + 2) = xmmword_1B66A07D0;
    *((_OWORD *)a3 + 3) = xmmword_1B66A07E0;
    *((_OWORD *)a3 + 4) = xmmword_1B66A07F0;
    *((_QWORD *)a3 + 10) = 0x1500000014;
    a3[22] = 22;
  }
  result = 0;
  *a4 = 23;
  return result;
}

uint64_t AUECMicRef::GetParameterInfo(AUECMicRef *this, int a2, unsigned int a3, AudioUnitParameterInfo *buffer)
{
  uint64_t result;
  const __CFString *v6;
  AudioUnitParameterUnit v7;
  AudioUnitParameterValue v8;
  AudioUnitParameterValue v9;
  AudioUnitParameterValue v10;
  int v11;

  buffer->flags = 0x40000000;
  buffer->unitName = 0;
  result = 4294956418;
  if (!a2 && a3 <= 0x16)
  {
    v6 = off_1E69D31D0[a3];
    v7 = dword_1B665C9FC[a3];
    v8 = flt_1B665CA58[a3];
    v9 = flt_1B665CAB4[a3];
    v10 = flt_1B665CB10[a3];
    v11 = dword_1B665CB6C[a3];
    buffer->cfNameString = v6;
    buffer->flags = 1207959552;
    CFStringGetCString(v6, buffer->name, 52, 0x8000100u);
    result = 0;
    buffer->unit = v7;
    buffer->minValue = v8;
    buffer->maxValue = v9;
    buffer->defaultValue = v10;
    buffer->flags |= v11;
  }
  return result;
}

uint64_t AUECMicRef::RestoreState(OpaqueAudioComponentInstance **this, const void *a2)
{
  uint64_t result;

  result = ausdk::AUBase::RestoreState(this, a2);
  if (!(_DWORD)result)
    ++*((_DWORD *)this + 133);
  return result;
}

double AUECMicRef::GetLatency(AUECMicRef *this)
{
  return 0.0;
}

double AUECMicRef::GetTailTime(AUECMicRef *this)
{
  return 0.0;
}

uint64_t AUECMicRef::SupportsTail(AUECMicRef *this)
{
  return 1;
}

BOOL AUECMicRef::StreamFormatWritable(AUECMicRef *this)
{
  return *((_BYTE *)this + 17) == 0;
}

uint64_t AUECMicRef::SupportedNumChannels(AUECMicRef *this, const AUChannelInfo **a2)
{
  if (a2)
    *a2 = (const AUChannelInfo *)&AUECMicRef::SupportedNumChannels(AUChannelInfo const**)::sSupportedChannelConfigs;
  return 8;
}

uint64_t AUECMicRef::ValidFormat(AUECMicRef *this, unsigned int a2, unsigned int a3, const AudioStreamBasicDescription *a4)
{
  if (a4->mBitsPerChannel != 32 || a4->mFormatID != 1819304813 || a4->mChannelsPerFrame >= 9)
    return 0;
  else
    return (LOBYTE(a4->mFormatFlags) >> 5) & 1;
}

void caulk::concurrent::details::rt_message_call<AUECMicRef::LogMaster(void)::$_2,int &,float>::~rt_message_call(caulk::concurrent::message *a1)
{
  caulk::concurrent::message::~message(a1);
  JUMPOUT(0x1BCC95CECLL);
}

caulk::concurrent::message **caulk::concurrent::details::rt_message_call<AUECMicRef::LogMaster(void)::$_2,int &,float>::perform(uint64_t a1)
{
  int v1;
  float v2;
  NSObject *v3;
  caulk::concurrent::message *v5;
  uint8_t buf[4];
  const char *v7;
  __int16 v8;
  int v9;
  __int16 v10;
  int v11;
  __int16 v12;
  double v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v5 = (caulk::concurrent::message *)a1;
  v1 = *(_DWORD *)(a1 + 24);
  v2 = *(float *)(a1 + 28);
  if (AUECMicRefLogScope(void)::once != -1)
    dispatch_once(&AUECMicRefLogScope(void)::once, &__block_literal_global_8594);
  if (AUECMicRefLogScope(void)::scope)
  {
    v3 = *(NSObject **)AUECMicRefLogScope(void)::scope;
    if (!*(_QWORD *)AUECMicRefLogScope(void)::scope)
      return caulk::concurrent::details::rt_message_call<AUECMicRef::LogMaster(void)::$_2,int &,float>::rt_cleanup::~rt_cleanup(&v5);
  }
  else
  {
    v3 = MEMORY[0x1E0C81028];
  }
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 136315906;
    v7 = "AUECMicRef.cpp";
    v8 = 1024;
    v9 = 1112;
    v10 = 1024;
    v11 = v1;
    v12 = 2048;
    v13 = v2;
    _os_log_impl(&dword_1B5ED0000, v3, OS_LOG_TYPE_DEFAULT, "%25s:%-5d AUECMicRef: energy measure in [dB] for ref-channel %u : %f\n", buf, 0x22u);
  }
  return caulk::concurrent::details::rt_message_call<AUECMicRef::LogMaster(void)::$_2,int &,float>::rt_cleanup::~rt_cleanup(&v5);
}

caulk::concurrent::message **caulk::concurrent::details::rt_message_call<AUECMicRef::LogMaster(void)::$_2,int &,float>::rt_cleanup::~rt_cleanup(caulk::concurrent::message **a1)
{
  caulk::concurrent::message *v2;

  v2 = *a1;
  caulk::concurrent::message::~message(*a1);
  (*(void (**)(_QWORD, caulk::concurrent::message *, uint64_t, uint64_t))(*(_QWORD *)*MEMORY[0x1E0DDB688] + 24))(*MEMORY[0x1E0DDB688], v2, 32, 8);
  return a1;
}

void caulk::concurrent::details::rt_message_call<AUECMicRef::LogMaster(void)::$_3>::~rt_message_call(caulk::concurrent::message *a1)
{
  caulk::concurrent::message::~message(a1);
  JUMPOUT(0x1BCC95CECLL);
}

caulk::concurrent::message **caulk::concurrent::details::rt_message_call<AUECMicRef::LogMaster(void)::$_3>::perform(caulk::concurrent::message *a1)
{
  NSObject *v1;
  caulk::concurrent::message *v3;
  uint8_t buf[4];
  const char *v5;
  __int16 v6;
  int v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  if (AUECMicRefLogScope(void)::once != -1)
    dispatch_once(&AUECMicRefLogScope(void)::once, &__block_literal_global_8594);
  if (AUECMicRefLogScope(void)::scope)
  {
    v1 = *(NSObject **)AUECMicRefLogScope(void)::scope;
    if (!*(_QWORD *)AUECMicRefLogScope(void)::scope)
      return caulk::concurrent::details::rt_message_call<AUECMicRef::LogMaster(void)::$_3>::rt_cleanup::~rt_cleanup(&v3);
  }
  else
  {
    v1 = MEMORY[0x1E0C81028];
  }
  if (os_log_type_enabled(v1, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 136315394;
    v5 = "AUECMicRef.cpp";
    v6 = 1024;
    v7 = 1117;
    _os_log_impl(&dword_1B5ED0000, v1, OS_LOG_TYPE_DEFAULT, "%25s:%-5d AUECMicRef: ********* Logging ends *********\n", buf, 0x12u);
  }
  return caulk::concurrent::details::rt_message_call<AUECMicRef::LogMaster(void)::$_3>::rt_cleanup::~rt_cleanup(&v3);
}

caulk::concurrent::message **caulk::concurrent::details::rt_message_call<AUECMicRef::LogMaster(void)::$_3>::rt_cleanup::~rt_cleanup(caulk::concurrent::message **a1)
{
  caulk::concurrent::message *v2;

  v2 = *a1;
  caulk::concurrent::message::~message(*a1);
  (*(void (**)(_QWORD, caulk::concurrent::message *, uint64_t, uint64_t))(*(_QWORD *)*MEMORY[0x1E0DDB688] + 24))(*MEMORY[0x1E0DDB688], v2, 24, 8);
  return a1;
}

void caulk::concurrent::details::rt_message_call<AUECMicRef::LogMaster(void)::$_1,int &,float,float>::~rt_message_call(caulk::concurrent::message *a1)
{
  caulk::concurrent::message::~message(a1);
  JUMPOUT(0x1BCC95CECLL);
}

caulk::concurrent::message **caulk::concurrent::details::rt_message_call<AUECMicRef::LogMaster(void)::$_1,int &,float,float>::perform(uint64_t a1)
{
  int v1;
  float v2;
  float v3;
  NSObject *v4;
  caulk::concurrent::message *v6;
  uint8_t buf[4];
  const char *v8;
  __int16 v9;
  int v10;
  __int16 v11;
  int v12;
  __int16 v13;
  double v14;
  __int16 v15;
  double v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v6 = (caulk::concurrent::message *)a1;
  v1 = *(_DWORD *)(a1 + 24);
  v2 = *(float *)(a1 + 28);
  v3 = *(float *)(a1 + 32);
  if (AUECMicRefLogScope(void)::once != -1)
    dispatch_once(&AUECMicRefLogScope(void)::once, &__block_literal_global_8594);
  if (AUECMicRefLogScope(void)::scope)
  {
    v4 = *(NSObject **)AUECMicRefLogScope(void)::scope;
    if (!*(_QWORD *)AUECMicRefLogScope(void)::scope)
      return caulk::concurrent::details::rt_message_call<AUECMicRef::LogMaster(void)::$_1,int &,float,float>::rt_cleanup::~rt_cleanup(&v6);
  }
  else
  {
    v4 = MEMORY[0x1E0C81028];
  }
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 136316162;
    v8 = "AUECMicRef.cpp";
    v9 = 1024;
    v10 = 1104;
    v11 = 1024;
    v12 = v1;
    v13 = 2048;
    v14 = v2;
    v15 = 2048;
    v16 = v3;
    _os_log_impl(&dword_1B5ED0000, v4, OS_LOG_TYPE_DEFAULT, "%25s:%-5d AUECMicRef: ERLE measure in [dB] for mic-channel %u , internal: %f (dB), external: %f (dB)\n", buf, 0x2Cu);
  }
  return caulk::concurrent::details::rt_message_call<AUECMicRef::LogMaster(void)::$_1,int &,float,float>::rt_cleanup::~rt_cleanup(&v6);
}

caulk::concurrent::message **caulk::concurrent::details::rt_message_call<AUECMicRef::LogMaster(void)::$_1,int &,float,float>::rt_cleanup::~rt_cleanup(caulk::concurrent::message **a1)
{
  caulk::concurrent::message *v2;

  v2 = *a1;
  caulk::concurrent::message::~message(*a1);
  (*(void (**)(_QWORD, caulk::concurrent::message *, uint64_t, uint64_t))(*(_QWORD *)*MEMORY[0x1E0DDB688] + 24))(*MEMORY[0x1E0DDB688], v2, 40, 8);
  return a1;
}

void caulk::concurrent::details::rt_message_call<AUECMicRef::LogMaster(void)::$_0,double &,double &,BOOL,BOOL,BOOL>::~rt_message_call(caulk::concurrent::message *a1)
{
  caulk::concurrent::message::~message(a1);
  JUMPOUT(0x1BCC95CECLL);
}

caulk::concurrent::message **caulk::concurrent::details::rt_message_call<AUECMicRef::LogMaster(void)::$_0,double &,double &,BOOL,BOOL,BOOL>::perform(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  int v3;
  int v4;
  int v5;
  NSObject *v6;
  caulk::concurrent::message *v8;
  uint8_t buf[4];
  const char *v10;
  __int16 v11;
  int v12;
  __int16 v13;
  uint64_t v14;
  __int16 v15;
  uint64_t v16;
  __int16 v17;
  int v18;
  __int16 v19;
  int v20;
  __int16 v21;
  int v22;
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  v8 = (caulk::concurrent::message *)a1;
  v2 = *(_QWORD *)(a1 + 24);
  v1 = *(_QWORD *)(a1 + 32);
  v3 = *(unsigned __int8 *)(a1 + 40);
  v4 = *(unsigned __int8 *)(a1 + 41);
  v5 = *(unsigned __int8 *)(a1 + 42);
  if (AUECMicRefLogScope(void)::once != -1)
    dispatch_once(&AUECMicRefLogScope(void)::once, &__block_literal_global_8594);
  if (AUECMicRefLogScope(void)::scope)
  {
    v6 = *(NSObject **)AUECMicRefLogScope(void)::scope;
    if (!*(_QWORD *)AUECMicRefLogScope(void)::scope)
      return caulk::concurrent::details::rt_message_call<AUECMicRef::LogMaster(void)::$_0,double &,double &,BOOL,BOOL,BOOL>::rt_cleanup::~rt_cleanup(&v8);
  }
  else
  {
    v6 = MEMORY[0x1E0C81028];
  }
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 136316674;
    v10 = "AUECMicRef.cpp";
    v11 = 1024;
    v12 = 1096;
    v13 = 2048;
    v14 = v2;
    v15 = 2048;
    v16 = v1;
    v17 = 1024;
    v18 = v3;
    v19 = 1024;
    v20 = v4;
    v21 = 1024;
    v22 = v5;
    _os_log_impl(&dword_1B5ED0000, v6, OS_LOG_TYPE_DEFAULT, "%25s:%-5d AUECMicRef: ********* Logging begins *********\nAUECMicRef: logging (period, timestamp): (%f, %f) (s)\nAUECMicRef: state variables have finite values (1 if True): %u\nAUECMicRef: ref-signal buffers have finite values (1 if True): %u\nAUECMicRef: EC output buffers have valid values (1 if True): %u\n", buf, 0x38u);
  }
  return caulk::concurrent::details::rt_message_call<AUECMicRef::LogMaster(void)::$_0,double &,double &,BOOL,BOOL,BOOL>::rt_cleanup::~rt_cleanup(&v8);
}

caulk::concurrent::message **caulk::concurrent::details::rt_message_call<AUECMicRef::LogMaster(void)::$_0,double &,double &,BOOL,BOOL,BOOL>::rt_cleanup::~rt_cleanup(caulk::concurrent::message **a1)
{
  caulk::concurrent::message *v2;

  v2 = *a1;
  caulk::concurrent::message::~message(*a1);
  (*(void (**)(_QWORD, caulk::concurrent::message *, uint64_t, uint64_t))(*(_QWORD *)*MEMORY[0x1E0DDB688] + 24))(*MEMORY[0x1E0DDB688], v2, 48, 8);
  return a1;
}

double AUECMicRef::DoCoreECInit(AUECMicRef *this)
{
  uint64_t v2;
  uint64_t v3;
  void (**v4)(ecMIMO *__hidden);
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  double result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  int v13;

  v2 = *((_QWORD *)this + 91);
  if (v2)
  {
    *((_QWORD *)this + 91) = 0;
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  }
  v3 = operator new();
  v4 = &off_1E69D5210;
  *(_QWORD *)v3 = &off_1E69D5210;
  *(_BYTE *)(v3 + 8) = 0;
  *(_OWORD *)(v3 + 12) = xmmword_1B66A1380;
  *(_OWORD *)(v3 + 28) = xmmword_1B66A1390;
  *(_QWORD *)(v3 + 44) = 0x10000000200;
  *(_DWORD *)(v3 + 52) = 0;
  *(_OWORD *)(v3 + 56) = xmmword_1B66A13A0;
  *(_QWORD *)(v3 + 80) = 0x3F0000003F4CCCCDLL;
  *(_QWORD *)(v3 + 92) = 0x40E000002B8CBCCCLL;
  *(_QWORD *)(v3 + 100) = 0x240000000;
  *(_QWORD *)(v3 + 108) = 0x3A0000003A800000;
  *(_DWORD *)(v3 + 116) = 1065353216;
  *(_DWORD *)(v3 + 124) = 1056964608;
  *(_DWORD *)(v3 + 148) = -1024458752;
  *(_QWORD *)(v3 + 152) = 0x600000000;
  *(_BYTE *)(v3 + 164) = 0;
  *(_QWORD *)(v3 + 168) = 1;
  *(_DWORD *)(v3 + 176) = 0;
  bzero((void *)(v3 + 184), 0x320uLL);
  v5 = *((_QWORD *)this + 91);
  *((_QWORD *)this + 91) = v3;
  if (v5)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
    v3 = *((_QWORD *)this + 91);
    v4 = *(void (***)(ecMIMO *__hidden))v3;
  }
  HIDWORD(v11) = *((_DWORD *)this + 147);
  LODWORD(v11) = *((_DWORD *)this + 142);
  LODWORD(v10) = *((_DWORD *)this + 175);
  HIDWORD(v10) = *((_DWORD *)this + 181);
  HIDWORD(v9) = *((float *)this + 176);
  LODWORD(v9) = *((_DWORD *)this + 174);
  ((void (*)(uint64_t, uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, float, float, float, float, float, float, float, float, uint64_t, uint64_t, uint64_t, int))v4[3])(v3, 1, *((unsigned int *)this + 138), *((unsigned int *)this + 139), *((unsigned int *)this + 140), *((unsigned int *)this + 136), *((unsigned int *)this + 141), *((unsigned int *)this + 137), *((float *)this + 170), *((float *)this + 171), *((float *)this + 180), *((float *)this + 177), *((float *)this + 179), *((float *)this + 178), *((float *)this + 173), *((float *)this + 172), v9, v10, v11,
    1);
  if (*((_BYTE *)this + 784))
    (*(void (**)(_QWORD, char *))(**((_QWORD **)this + 91) + 56))(*((_QWORD *)this + 91), (char *)this + 736);
  v6 = (*((_DWORD *)this + 139) * *((_DWORD *)this + 138) * *((_DWORD *)this + 142));
  v13 = 0;
  std::vector<float>::assign((char **)this + 92, v6, &v13);
  v7 = (2
                    * *((_DWORD *)this + 138)
                    * *((_DWORD *)this + 139)
                    * *((_DWORD *)this + 146)
                    * *((_DWORD *)this + 137));
  v12 = 0;
  std::vector<float>::assign((char **)this + 95, v7, &v12);
  result = 0.0;
  *(_OWORD *)((char *)this + 600) = 0u;
  return result;
}

void caulk::concurrent::details::rt_message_call<AUECMicRef::CheckForAOPMode(BOOL,AudioBufferList const*)::$_0>::~rt_message_call(caulk::concurrent::message *a1)
{
  caulk::concurrent::message::~message(a1);
  JUMPOUT(0x1BCC95CECLL);
}

caulk::concurrent::message **caulk::concurrent::details::rt_message_call<AUECMicRef::CheckForAOPMode(BOOL,AudioBufferList const*)::$_0>::perform(caulk::concurrent::message *a1)
{
  NSObject *v1;
  caulk::concurrent::message *v3;
  uint8_t buf[4];
  const char *v5;
  __int16 v6;
  int v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  if (AUECMicRefLogScope(void)::once != -1)
    dispatch_once(&AUECMicRefLogScope(void)::once, &__block_literal_global_8594);
  if (AUECMicRefLogScope(void)::scope)
  {
    v1 = *(NSObject **)AUECMicRefLogScope(void)::scope;
    if (!*(_QWORD *)AUECMicRefLogScope(void)::scope)
      return caulk::concurrent::details::rt_message_call<AUECMicRef::CheckForAOPMode(BOOL,AudioBufferList const*)::$_0>::rt_cleanup::~rt_cleanup(&v3);
  }
  else
  {
    v1 = MEMORY[0x1E0C81028];
  }
  if (os_log_type_enabled(v1, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 136315394;
    v5 = "AUECMicRef.cpp";
    v6 = 1024;
    v7 = 1185;
    _os_log_impl(&dword_1B5ED0000, v1, OS_LOG_TYPE_DEFAULT, "%25s:%-5d AUECMicRef: AOPMode detected (non-realtime logging).\n", buf, 0x12u);
  }
  return caulk::concurrent::details::rt_message_call<AUECMicRef::CheckForAOPMode(BOOL,AudioBufferList const*)::$_0>::rt_cleanup::~rt_cleanup(&v3);
}

caulk::concurrent::message **caulk::concurrent::details::rt_message_call<AUECMicRef::CheckForAOPMode(BOOL,AudioBufferList const*)::$_0>::rt_cleanup::~rt_cleanup(caulk::concurrent::message **a1)
{
  caulk::concurrent::message *v2;

  v2 = *a1;
  caulk::concurrent::message::~message(*a1);
  (*(void (**)(_QWORD, caulk::concurrent::message *, uint64_t, uint64_t))(*(_QWORD *)*MEMORY[0x1E0DDB688] + 24))(*MEMORY[0x1E0DDB688], v2, 24, 8);
  return a1;
}

os_log_t ___ZL18AUECMicRefLogScopev_block_invoke()
{
  _QWORD *v0;
  os_log_t result;

  v0 = (_QWORD *)operator new();
  v0[1] = 0;
  result = os_log_create("com.apple.coreaudio", "auecmr");
  *v0 = result;
  AUECMicRefLogScope(void)::scope = (uint64_t)v0;
  return result;
}

uint64_t ABHelperIsABTestModeOn()
{
  unsigned __int8 v0;

  {
    isABTestModeOn(void)::sIsABTestModeOn = CFPreferencesGetAppBooleanValue(CFSTR("abtest_mode"), CFSTR("com.apple.coreaudio"), 0) != 0;
  }
  return isABTestModeOn(void)::sIsABTestModeOn;
}

void sub_1B633B6DC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t ABHelperCreateDescriptionFromAudioUnit(OpaqueAudioComponentInstance *a1)
{
  createNSDescriptionFromAudioUnit(a1);
  return objc_claimAutoreleasedReturnValue();
}

uint64_t ABHelperCreateDescriptionFromDSPGraphBox(DSPGraph::Box *a1)
{
  createNSDescriptionFromDSPGraphBox(a1);
  return objc_claimAutoreleasedReturnValue();
}

void ABHelperWriteJSONFileFromDescription(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  id v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  id v10;

  v3 = a2;
  v10 = 0;
  objc_msgSend(MEMORY[0x1E0CB36D8], "dataWithJSONObject:options:error:", a1, 1, &v10);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = v10;
  v6 = v5;
  if (v4)
  {
    objc_msgSend(MEMORY[0x1E0CB37A0], "stringWithFormat:", CFSTR("/tmp/"));
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "appendString:", v3);
    objc_msgSend(v7, "appendString:", CFSTR(".json"));
    v8 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3940]), "initWithData:encoding:", v4, 4);
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithString:", v7);
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v8, "writeToFile:atomically:encoding:error:", v9, 1, 4, 0);

  }
  else
  {
    objc_msgSend(v5, "debugDescription");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    NSLog(CFSTR("Error: %@"), v7);
  }

}

void sub_1B633B84C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

id ABHelperCreateDescriptionFromDSPGraph(uint64_t a1)
{
  void *v2;
  uint64_t **i;
  void *v4;
  uint64_t *v5;
  _QWORD *v6;
  void *v7;

  objc_msgSend(MEMORY[0x1E0C99E08], "dictionary");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  for (i = *(uint64_t ***)(a1 + 24); i; i = (uint64_t **)*i)
  {
    createNSDescriptionFromDSPGraphBox((DSPGraph::Box *)i[2]);
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    v5 = i[2];
    v6 = v5 + 4;
    if (*((char *)v5 + 55) < 0)
      v6 = (_QWORD *)*v6;
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%s"), v6);
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "setObject:forKey:", v4, v7);

  }
  return v2;
}

void sub_1B633B960(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void AUSoundIsolation::~AUSoundIsolation(void **this)
{
  AUSoundIsolation::~AUSoundIsolation(this);
  JUMPOUT(0x1BCC95CECLL);
}

{
  std::__shared_weak_count *v2;
  __int128 v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  void *v6;
  std::__shared_weak_count *v7;
  NSObject *v8;
  NSObject *v9;
  unint64_t *v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  _QWORD *v17;
  void *v18;
  void *v19;
  void *v20;
  _QWORD v21[5];
  std::__shared_weak_count *v22;

  *this = &off_1E69D3298;
  AUSoundIsolation::TearDownInternalReporterID((AUSoundIsolation *)this);
  v2 = (std::__shared_weak_count *)this[93];
  v3 = 0uLL;
  *((_OWORD *)this + 46) = 0u;
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      v3 = 0uLL;
    }
  }
  v6 = this[90];
  v7 = (std::__shared_weak_count *)this[91];
  *((_OWORD *)this + 45) = v3;
  dispatch_get_global_queue(21, 0);
  v8 = objc_claimAutoreleasedReturnValue();
  v9 = v8;
  v21[0] = MEMORY[0x1E0C809B0];
  v21[1] = 3321888768;
  v21[2] = ___ZN16AUSoundIsolation17TearDownMessengerEv_block_invoke;
  v21[3] = &__block_descriptor_48_ea8_32c56_ZTSNSt3__110shared_ptrIN5caulk10concurrent9messengerEEE_e5_v8__0l;
  v21[4] = v6;
  v22 = v7;
  if (v7)
  {
    v10 = (unint64_t *)&v7->__shared_owners_;
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
  }
  dispatch_async(v8, v21);

  v12 = v22;
  if (v22)
  {
    v13 = (unint64_t *)&v22->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (v7)
  {
    v15 = (unint64_t *)&v7->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  std::shared_ptr<vp::services::Telephony_Utility>::~shared_ptr[abi:ne180100]((uint64_t)(this + 92));
  std::shared_ptr<vp::services::Telephony_Utility>::~shared_ptr[abi:ne180100]((uint64_t)(this + 90));
  std::__tree<std::__value_type<AUSoundIsolation::BoxTuningType,applesauce::CF::StringRef>,std::__map_value_compare<AUSoundIsolation::BoxTuningType,std::__value_type<AUSoundIsolation::BoxTuningType,applesauce::CF::StringRef>,std::less<AUSoundIsolation::BoxTuningType>,true>,std::allocator<std::__value_type<AUSoundIsolation::BoxTuningType,applesauce::CF::StringRef>>>::destroy(this[86]);
  v17 = this[83];
  if (v17)
  {
    ((void (*)(int, _QWORD *))ausdk::BufferAllocator::instance(void)::global[3])((int)&ausdk::BufferAllocator::instance(void)::global, v17);
    this[83] = 0;
  }
  this[84] = 0;
  *((_DWORD *)this + 164) = 0;
  v18 = this[81];
  this[81] = 0;
  if (v18)
    (*(void (**)(void *))(*(_QWORD *)v18 + 8))(v18);
  if (*((char *)this + 647) < 0)
    operator delete(this[78]);
  v19 = this[77];
  this[77] = 0;
  if (v19)
    (*(void (**)(void *))(*(_QWORD *)v19 + 8))(v19);
  v20 = this[76];
  this[76] = 0;
  if (v20)
    (*(void (**)(void *))(*(_QWORD *)v20 + 8))(v20);
  ausdk::AUBase::~AUBase((ausdk::AUBase *)this);
}

uint64_t AUSoundIsolation::Initialize(AUSoundIsolation *this)
{
  std::chrono::steady_clock::time_point v2;
  NSObject *v3;
  NSObject *v4;
  uint64_t Element;
  __int128 v6;
  uint64_t v7;
  __int128 v8;
  NSObject *v9;
  NSObject *v10;
  NSObject *v11;
  uint64_t ProcessingGraphs;
  NSObject *v13;
  uint64_t *v14;
  NSObject *v15;
  uint64_t *v16;
  NSObject *v18;
  NSObject *v19;
  NSObject *v20;
  NSObject *v21;
  uint64_t v22;
  uint64_t v23;
  NSObject *v24;
  uint64_t *v25;
  __int128 v26;
  _BYTE v27[24];
  int v28;
  char v29;
  AudioStreamBasicDescription v30;
  char v31;
  __int128 v32;
  __int128 v33;
  uint64_t v34;
  char v35;
  uint64_t v36;
  char v37;
  char v38;
  char v39;
  char v40;
  char v41;
  __int16 v42;
  char v43;
  char v44;
  char v45;
  char v46;
  uint8_t v47[4];
  const char *v48;
  __int16 v49;
  int v50;
  __int16 v51;
  uint64_t v52;
  AudioStreamBasicDescription buf;
  uint64_t v54;

  v54 = *MEMORY[0x1E0C80C00];
  LOBYTE(v28) = 0;
  v29 = 0;
  LOBYTE(v30.mSampleRate) = 0;
  v31 = 0;
  LOBYTE(v32) = 0;
  v35 = 0;
  LOBYTE(v36) = 0;
  v37 = 0;
  v38 = 0;
  v39 = 0;
  v40 = 0;
  v41 = 0;
  v42 = 0;
  v43 = 0;
  v44 = 0;
  v45 = 0;
  v46 = 0;
  v2.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  if (getAUSoundIsolationLog(void)::onceToken != -1)
    dispatch_once(&getAUSoundIsolationLog(void)::onceToken, &__block_literal_global_40);
  v3 = getAUSoundIsolationLog(void)::gLog;
  if (os_log_type_enabled((os_log_t)getAUSoundIsolationLog(void)::gLog, OS_LOG_TYPE_DEFAULT))
  {
    LODWORD(buf.mSampleRate) = 136315394;
    *(_QWORD *)((char *)&buf.mSampleRate + 4) = "AUSoundIsolation.mm";
    LOWORD(buf.mFormatFlags) = 1024;
    *(AudioFormatFlags *)((char *)&buf.mFormatFlags + 2) = 312;
    _os_log_impl(&dword_1B5ED0000, v3, OS_LOG_TYPE_DEFAULT, "%s:%i will try to initialize", (uint8_t *)&buf, 0x12u);
    if (getAUSoundIsolationLog(void)::onceToken != -1)
      dispatch_once(&getAUSoundIsolationLog(void)::onceToken, &__block_literal_global_40);
  }
  v4 = getAUSoundIsolationLog(void)::gLog;
  if (os_log_type_enabled((os_log_t)getAUSoundIsolationLog(void)::gLog, OS_LOG_TYPE_DEBUG))
  {
    LODWORD(buf.mSampleRate) = 136315394;
    *(_QWORD *)((char *)&buf.mSampleRate + 4) = "AUSoundIsolation.mm";
    LOWORD(buf.mFormatFlags) = 1024;
    *(AudioFormatFlags *)((char *)&buf.mFormatFlags + 2) = 315;
    _os_log_debug_impl(&dword_1B5ED0000, v4, OS_LOG_TYPE_DEBUG, "%s:%i check input and output formats", (uint8_t *)&buf, 0x12u);
  }
  Element = ausdk::AUScope::SafeGetElement((AUSoundIsolation *)((char *)this + 80), 0);
  v6 = *(_OWORD *)(Element + 96);
  *(_OWORD *)&buf.mSampleRate = *(_OWORD *)(Element + 80);
  *(_OWORD *)&buf.mBytesPerPacket = v6;
  *(_QWORD *)&buf.mBitsPerChannel = *(_QWORD *)(Element + 112);
  v7 = ausdk::AUScope::SafeGetElement((AUSoundIsolation *)((char *)this + 128), 0);
  v8 = *(_OWORD *)(v7 + 96);
  v26 = *(_OWORD *)(v7 + 80);
  *(_OWORD *)v27 = v8;
  *(_QWORD *)&v27[16] = *(_QWORD *)(v7 + 112);
  v30 = buf;
  v31 = 1;
  v32 = v26;
  v33 = v8;
  v34 = *(_QWORD *)&v27[16];
  v35 = 1;
  if (*(double *)&v26 == buf.mSampleRate
    && DWORD2(v26) == buf.mFormatID
    && *(_QWORD *)v27 == *(_QWORD *)&buf.mBytesPerPacket
    && *(_QWORD *)&v27[12] == *(_QWORD *)&buf.mChannelsPerFrame
    && CA::Implementation::EquivalentFormatFlags((CA::Implementation *)&v26, &buf, 0, 0))
  {
    if (getAUSoundIsolationLog(void)::onceToken != -1)
      dispatch_once(&getAUSoundIsolationLog(void)::onceToken, &__block_literal_global_40);
    v9 = getAUSoundIsolationLog(void)::gLog;
    if (os_log_type_enabled((os_log_t)getAUSoundIsolationLog(void)::gLog, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)v47 = 136315394;
      v48 = "AUSoundIsolation.mm";
      v49 = 1024;
      v50 = 334;
      _os_log_debug_impl(&dword_1B5ED0000, v9, OS_LOG_TYPE_DEBUG, "%s:%i initialize base", v47, 0x12u);
      if (getAUSoundIsolationLog(void)::onceToken != -1)
        dispatch_once(&getAUSoundIsolationLog(void)::onceToken, &__block_literal_global_40);
    }
    v10 = getAUSoundIsolationLog(void)::gLog;
    if (os_log_type_enabled((os_log_t)getAUSoundIsolationLog(void)::gLog, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)v47 = 136315394;
      v48 = "AUSoundIsolation.mm";
      v49 = 1024;
      v50 = 348;
      _os_log_debug_impl(&dword_1B5ED0000, v10, OS_LOG_TYPE_DEBUG, "%s:%i update local parameter state before creating the processing graph", v47, 0x12u);
    }
    AUSoundIsolation::UpdateLocalParamState(this);
    *((_QWORD *)this + 75) = *((_QWORD *)this + 74);
    if (getAUSoundIsolationLog(void)::onceToken != -1)
      dispatch_once(&getAUSoundIsolationLog(void)::onceToken, &__block_literal_global_40);
    v11 = getAUSoundIsolationLog(void)::gLog;
    if (os_log_type_enabled((os_log_t)getAUSoundIsolationLog(void)::gLog, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)v47 = 136315394;
      v48 = "AUSoundIsolation.mm";
      v49 = 1024;
      v50 = 352;
      _os_log_debug_impl(&dword_1B5ED0000, v11, OS_LOG_TYPE_DEBUG, "%s:%i initialize processing graphs", v47, 0x12u);
    }
    ProcessingGraphs = AUSoundIsolation::CreateProcessingGraphs(this);
    if ((_DWORD)ProcessingGraphs)
    {
      if (getAUSoundIsolationLog(void)::onceToken != -1)
        dispatch_once(&getAUSoundIsolationLog(void)::onceToken, &__block_literal_global_40);
      v13 = getAUSoundIsolationLog(void)::gLog;
      if (os_log_type_enabled((os_log_t)getAUSoundIsolationLog(void)::gLog, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)v47 = 136315394;
        v48 = "AUSoundIsolation.mm";
        v49 = 1024;
        v50 = 355;
        _os_log_error_impl(&dword_1B5ED0000, v13, OS_LOG_TYPE_ERROR, "%s:%i InitializeProcessingGraphs failed", v47, 0x12u);
      }
      v28 = ProcessingGraphs;
      v29 = 1;
      v14 = (uint64_t *)*((_QWORD *)this + 92);
      *(_DWORD *)v47 = 2;
      AU::SoundIsolation::MetricsReporter::reportAsync(v14, &v28, (int *)v47);
    }
    else
    {
      if (getAUSoundIsolationLog(void)::onceToken != -1)
        dispatch_once(&getAUSoundIsolationLog(void)::onceToken, &__block_literal_global_40);
      v18 = getAUSoundIsolationLog(void)::gLog;
      if (os_log_type_enabled((os_log_t)getAUSoundIsolationLog(void)::gLog, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)v47 = 136315394;
        v48 = "AUSoundIsolation.mm";
        v49 = 1024;
        v50 = 366;
        _os_log_debug_impl(&dword_1B5ED0000, v18, OS_LOG_TYPE_DEBUG, "%s:%i allocate temporary ABL", v47, 0x12u);
      }
      ausdk::AUBufferList::Allocate((AUSoundIsolation *)((char *)this + 656), &buf, *((_DWORD *)this + 84));
      if (getAUSoundIsolationLog(void)::onceToken != -1)
        dispatch_once(&getAUSoundIsolationLog(void)::onceToken, &__block_literal_global_40);
      v19 = getAUSoundIsolationLog(void)::gLog;
      if (os_log_type_enabled((os_log_t)getAUSoundIsolationLog(void)::gLog, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)v47 = 136315394;
        v48 = "AUSoundIsolation.mm";
        v49 = 1024;
        v50 = 371;
        _os_log_debug_impl(&dword_1B5ED0000, v19, OS_LOG_TYPE_DEBUG, "%s:%i update local parameter state after initializing the processing graph", v47, 0x12u);
      }
      AUSoundIsolation::UpdateLocalParamState(this);
      *((_QWORD *)this + 75) = *((_QWORD *)this + 74);
      *((_DWORD *)this + 140) = *((float *)this + 143);
      if (*((_DWORD *)this + 138) && *((float *)this + 135) > 0.0 && !*((_BYTE *)this + 529) && !*((_BYTE *)this + 528))
      {
        getAUSoundIsolationLog();
        v20 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)v47 = 136315394;
          v48 = "AUSoundIsolation.mm";
          v49 = 1024;
          v50 = 377;
          _os_log_impl(&dword_1B5ED0000, v20, OS_LOG_TYPE_DEFAULT, "%s:%i Not bypassed at initialization - activate smooth transition", v47, 0x12u);
        }

        *((_DWORD *)this + 139) = *((_DWORD *)this + 138);
        *((_DWORD *)this + 136) = 0;
      }
      if (getAUSoundIsolationLog(void)::onceToken != -1)
        dispatch_once(&getAUSoundIsolationLog(void)::onceToken, &__block_literal_global_40);
      v21 = getAUSoundIsolationLog(void)::gLog;
      if (os_log_type_enabled((os_log_t)getAUSoundIsolationLog(void)::gLog, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)v47 = 136315394;
        v48 = "AUSoundIsolation.mm";
        v49 = 1024;
        v50 = 382;
        _os_log_impl(&dword_1B5ED0000, v21, OS_LOG_TYPE_DEFAULT, "%s:%i initialized", v47, 0x12u);
      }
      v22 = (unsigned __int128)((std::chrono::steady_clock::now().__d_.__rep_ - v2.__d_.__rep_)
                              * (__int128)0x431BDE82D7B634DBLL) >> 64;
      if (getAUSoundIsolationLog(void)::onceToken != -1)
        dispatch_once(&getAUSoundIsolationLog(void)::onceToken, &__block_literal_global_40);
      v23 = (v22 >> 18) + ((unint64_t)v22 >> 63);
      v24 = getAUSoundIsolationLog(void)::gLog;
      if (os_log_type_enabled((os_log_t)getAUSoundIsolationLog(void)::gLog, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)v47 = 136315650;
        v48 = "AUSoundIsolation.mm";
        v49 = 1024;
        v50 = 387;
        v51 = 2048;
        v52 = v23;
        _os_log_impl(&dword_1B5ED0000, v24, OS_LOG_TYPE_INFO, "%s:%i initialization duration %lld ms", v47, 0x1Cu);
      }
      v28 = 0;
      v29 = 1;
      v37 = 1;
      v36 = v23;
      v25 = (uint64_t *)*((_QWORD *)this + 92);
      *(_DWORD *)v47 = 3;
      AU::SoundIsolation::MetricsReporter::reportAsync(v25, &v28, (int *)v47);
      return 0;
    }
  }
  else
  {
    if (getAUSoundIsolationLog(void)::onceToken != -1)
      dispatch_once(&getAUSoundIsolationLog(void)::onceToken, &__block_literal_global_40);
    v15 = getAUSoundIsolationLog(void)::gLog;
    if (os_log_type_enabled((os_log_t)getAUSoundIsolationLog(void)::gLog, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)v47 = 136315394;
      v48 = "AUSoundIsolation.mm";
      v49 = 1024;
      v50 = 323;
      _os_log_error_impl(&dword_1B5ED0000, v15, OS_LOG_TYPE_ERROR, "%s:%i input and output formats must match", v47, 0x12u);
    }
    v28 = -10868;
    v29 = 1;
    v16 = (uint64_t *)*((_QWORD *)this + 92);
    *(_DWORD *)v47 = 0;
    AU::SoundIsolation::MetricsReporter::reportAsync(v16, &v28, (int *)v47);
    return 4294956428;
  }
  return ProcessingGraphs;
}

void AUSoundIsolation::Cleanup(AUSoundIsolation *this)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  int v7;
  const char *v8;
  __int16 v9;
  int v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  if (getAUSoundIsolationLog(void)::onceToken != -1)
    dispatch_once(&getAUSoundIsolationLog(void)::onceToken, &__block_literal_global_40);
  v2 = getAUSoundIsolationLog(void)::gLog;
  if (os_log_type_enabled((os_log_t)getAUSoundIsolationLog(void)::gLog, OS_LOG_TYPE_DEBUG))
  {
    v7 = 136315394;
    v8 = "AUSoundIsolation.mm";
    v9 = 1024;
    v10 = 295;
    _os_log_debug_impl(&dword_1B5ED0000, v2, OS_LOG_TYPE_DEBUG, "%s:%i cleanup", (uint8_t *)&v7, 0x12u);
  }
  v3 = *((_QWORD *)this + 76);
  *((_QWORD *)this + 76) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = *((_QWORD *)this + 77);
  *((_QWORD *)this + 77) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  v5 = *((_QWORD *)this + 81);
  *((_QWORD *)this + 81) = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  if (*((_DWORD *)this + 169))
  {
    v6 = (_QWORD *)*((_QWORD *)this + 83);
    if (v6)
    {
      ((void (*)(int, _QWORD *))ausdk::BufferAllocator::instance(void)::global[3])((int)&ausdk::BufferAllocator::instance(void)::global, v6);
      *((_QWORD *)this + 83) = 0;
    }
    *((_QWORD *)this + 84) = 0;
    *((_DWORD *)this + 164) = 0;
  }
}

uint64_t AUSoundIsolation::Reset(AUSoundIsolation *this)
{
  DSPGraph::Graph *v2;
  DSPGraph::Graph *v3;
  DSPGraph::Graph *v4;
  const AudioStreamBasicDescription *Element;
  _DWORD *BufferList;
  unsigned int *v7;
  unsigned int v8;
  void **v9;

  v2 = (DSPGraph::Graph *)*((_QWORD *)this + 76);
  if (v2 && *((_BYTE *)v2 + 762))
    DSPGraph::Graph::reset(v2);
  v3 = (DSPGraph::Graph *)*((_QWORD *)this + 77);
  if (v3 && *((_BYTE *)v3 + 762))
    DSPGraph::Graph::reset(v3);
  v4 = (DSPGraph::Graph *)*((_QWORD *)this + 81);
  if (v4 && *((_BYTE *)v4 + 762))
    DSPGraph::Graph::reset(v4);
  if (*((_DWORD *)this + 169))
  {
    Element = (const AudioStreamBasicDescription *)ausdk::AUScope::SafeGetElement((AUSoundIsolation *)((char *)this + 80), 0);
    ausdk::AUBufferList::PrepareBuffer((AUSoundIsolation *)((char *)this + 656), Element + 2, *((_DWORD *)this + 84));
    BufferList = (_DWORD *)ausdk::AUBufferList::GetBufferList((AUSoundIsolation *)((char *)this + 656));
    if (*BufferList)
    {
      v7 = BufferList;
      v8 = 0;
      v9 = (void **)(BufferList + 4);
      do
      {
        bzero(*v9, *((unsigned int *)v9 - 1));
        ++v8;
        v9 += 2;
      }
      while (v8 < *v7);
    }
  }
  return 0;
}

uint64_t AUSoundIsolation::GetPropertyInfo(AUSoundIsolation *this, int a2, int a3, unsigned int a4, unsigned int *a5, BOOL *a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  int v12;
  void *v13;
  unsigned __int16 v14;
  unsigned int v15;
  void *__p;
  void *v17;
  uint64_t v18;
  uint64_t v19;

  if (a3)
    return 4294956417;
  v18 = v6;
  v19 = v7;
  result = 4294956417;
  if (a2 > 30000)
  {
    if (a2 <= 69999)
    {
      if (a2 <= 49999)
      {
        if (a2 != 30001)
        {
          v12 = 40000;
          goto LABEL_25;
        }
LABEL_26:
        v15 = 8;
LABEL_31:
        *a5 = v15;
LABEL_32:
        result = 0;
        *a6 = 1;
        return result;
      }
      if (a2 == 50000)
        goto LABEL_26;
      v12 = 60000;
LABEL_25:
      if (a2 != v12)
        return result;
      goto LABEL_26;
    }
    if (a2 > 89999)
    {
      if (a2 != 90000)
      {
        v14 = 24465;
LABEL_29:
        if (a2 != (v14 | 0x10000))
          return result;
      }
    }
    else if (a2 != 70000)
    {
      v14 = 14464;
      goto LABEL_29;
    }
LABEL_30:
    v15 = 4;
    goto LABEL_31;
  }
  if (a2 > 3699)
  {
    if (a2 > 6999)
    {
      if (a2 != 7000)
      {
        v12 = 30000;
        goto LABEL_25;
      }
    }
    else if (a2 != 3700)
    {
      if (a2 != 6000)
        return result;
      AU::SoundIsolation::MetricsReporter::getCAReporterIDs((AU::SoundIsolation::MetricsReporter *)&__p, *((_QWORD *)this + 92));
      v13 = __p;
      *a5 = ((_DWORD)v17 - (_DWORD)__p) & 0xFFFFFFF8;
      if (v13)
      {
        v17 = v13;
        operator delete(v13);
      }
      goto LABEL_32;
    }
    goto LABEL_30;
  }
  switch(a2)
  {
    case 21:
      goto LABEL_30;
    case 56:
      goto LABEL_26;
    case 2121:
      goto LABEL_30;
  }
  return result;
}

uint64_t AUSoundIsolation::GetProperty(AUSoundIsolation *this, int a2, int a3, unsigned int a4, uint64_t **a5)
{
  uint64_t result;
  int v8;
  uint64_t **v9;
  uint64_t *v10;
  _BYTE *v11;
  uint64_t v12;
  float v13;
  _BYTE *v14;
  _BYTE *v15;

  if (a3)
    return 4294956417;
  result = 4294956417;
  if (a2 > 30000)
  {
    if (a2 <= 59999)
    {
      switch(a2)
      {
        case 30001:
          LODWORD(v14) = 1;
          v9 = std::__tree<std::__value_type<AUSoundIsolation::BoxTuningType,applesauce::CF::StringRef>,std::__map_value_compare<AUSoundIsolation::BoxTuningType,std::__value_type<AUSoundIsolation::BoxTuningType,applesauce::CF::StringRef>,std::less<AUSoundIsolation::BoxTuningType>,true>,std::allocator<std::__value_type<AUSoundIsolation::BoxTuningType,applesauce::CF::StringRef>>>::__emplace_unique_key_args<AUSoundIsolation::BoxTuningType,std::piecewise_construct_t const&,std::tuple<AUSoundIsolation::BoxTuningType&&>,std::tuple<>>((uint64_t **)this + 85, 1, &v14);
          v10 = v9[5];
          if (v10)
            goto LABEL_36;
          break;
        case 40000:
          LODWORD(v14) = 2;
          v9 = std::__tree<std::__value_type<AUSoundIsolation::BoxTuningType,applesauce::CF::StringRef>,std::__map_value_compare<AUSoundIsolation::BoxTuningType,std::__value_type<AUSoundIsolation::BoxTuningType,applesauce::CF::StringRef>,std::less<AUSoundIsolation::BoxTuningType>,true>,std::allocator<std::__value_type<AUSoundIsolation::BoxTuningType,applesauce::CF::StringRef>>>::__emplace_unique_key_args<AUSoundIsolation::BoxTuningType,std::piecewise_construct_t const&,std::tuple<AUSoundIsolation::BoxTuningType&&>,std::tuple<>>((uint64_t **)this + 85, 2, &v14);
          v10 = v9[5];
          if (v10)
            goto LABEL_36;
          break;
        case 50000:
          LODWORD(v14) = 3;
          v9 = std::__tree<std::__value_type<AUSoundIsolation::BoxTuningType,applesauce::CF::StringRef>,std::__map_value_compare<AUSoundIsolation::BoxTuningType,std::__value_type<AUSoundIsolation::BoxTuningType,applesauce::CF::StringRef>,std::less<AUSoundIsolation::BoxTuningType>,true>,std::allocator<std::__value_type<AUSoundIsolation::BoxTuningType,applesauce::CF::StringRef>>>::__emplace_unique_key_args<AUSoundIsolation::BoxTuningType,std::piecewise_construct_t const&,std::tuple<AUSoundIsolation::BoxTuningType&&>,std::tuple<>>((uint64_t **)this + 85, 3, &v14);
          v10 = v9[5];
          if (v10)
            goto LABEL_36;
          break;
        default:
          return result;
      }
      goto LABEL_37;
    }
    switch(a2)
    {
      case 60000:
        LODWORD(v14) = 4;
        v9 = std::__tree<std::__value_type<AUSoundIsolation::BoxTuningType,applesauce::CF::StringRef>,std::__map_value_compare<AUSoundIsolation::BoxTuningType,std::__value_type<AUSoundIsolation::BoxTuningType,applesauce::CF::StringRef>,std::less<AUSoundIsolation::BoxTuningType>,true>,std::allocator<std::__value_type<AUSoundIsolation::BoxTuningType,applesauce::CF::StringRef>>>::__emplace_unique_key_args<AUSoundIsolation::BoxTuningType,std::piecewise_construct_t const&,std::tuple<AUSoundIsolation::BoxTuningType&&>,std::tuple<>>((uint64_t **)this + 85, 4, &v14);
        v10 = v9[5];
        if (v10)
LABEL_36:
          CFRetain(v9[5]);
LABEL_37:
        result = 0;
        *a5 = v10;
        return result;
      case 70000:
        result = 0;
        v8 = *((_DWORD *)this + 133);
        goto LABEL_39;
      case 80000:
        result = 0;
        v8 = *((_DWORD *)this + 134);
        goto LABEL_39;
    }
  }
  else
  {
    if (a2 <= 5999)
    {
      switch(a2)
      {
        case 21:
          result = 0;
          v8 = *((unsigned __int8 *)this + 528);
          goto LABEL_39;
        case 2121:
          result = 0;
          v8 = *((unsigned __int8 *)this + 529);
          goto LABEL_39;
        case 3700:
          result = 0;
          v8 = *((unsigned __int8 *)this + 376);
LABEL_39:
          *(_DWORD *)a5 = v8;
          return result;
      }
      return result;
    }
    switch(a2)
    {
      case 6000:
        AU::SoundIsolation::MetricsReporter::getCAReporterIDs((AU::SoundIsolation::MetricsReporter *)&v14, *((_QWORD *)this + 92));
        v11 = v14;
        memcpy(a5, v14, v15 - v14);
        if (v11)
        {
          v15 = v11;
          operator delete(v11);
        }
        return 0;
      case 7000:
        v12 = *((_QWORD *)this + 92);
        std::mutex::lock((std::mutex *)(v12 + 64));
        v13 = (float)*(uint64_t *)(v12 + 152);
        std::mutex::unlock((std::mutex *)(v12 + 64));
        result = 0;
        *(float *)a5 = v13;
        return result;
      case 30000:
        LODWORD(v14) = 0;
        v9 = std::__tree<std::__value_type<AUSoundIsolation::BoxTuningType,applesauce::CF::StringRef>,std::__map_value_compare<AUSoundIsolation::BoxTuningType,std::__value_type<AUSoundIsolation::BoxTuningType,applesauce::CF::StringRef>,std::less<AUSoundIsolation::BoxTuningType>,true>,std::allocator<std::__value_type<AUSoundIsolation::BoxTuningType,applesauce::CF::StringRef>>>::__emplace_unique_key_args<AUSoundIsolation::BoxTuningType,std::piecewise_construct_t const&,std::tuple<AUSoundIsolation::BoxTuningType&&>,std::tuple<>>((uint64_t **)this + 85, 0, &v14);
        v10 = v9[5];
        if (v10)
          goto LABEL_36;
        goto LABEL_37;
    }
  }
  return result;
}

uint64_t AUSoundIsolation::SetProperty(uint64_t **this, int a2, int a3, unsigned int a4, CFTypeRef *a5, unsigned int a6)
{
  uint64_t result;
  uint64_t **v9;
  uint64_t **v10;
  uint64_t *v11;
  NSObject *v12;
  uint64_t **v13;
  void **v14;
  uint64_t v15;
  NSObject *v16;
  void **v17;
  void *v18;
  NSObject *v19;
  int v20;
  float v21;
  int v22;
  NSObject *v23;
  uint64_t **v24;
  uint64_t **v25;
  uint64_t *v26;
  uint64_t **v27;
  void **v28;
  uint64_t **v29;
  uint64_t **v30;
  uint64_t *v31;
  uint64_t **v32;
  void *v33;
  NSObject *v34;
  _BOOL4 v35;
  void **v36;
  const char *v37;
  NSObject *v38;
  uint32_t v39;
  float v40;
  int v41;
  float v42;
  uint64_t *v43;
  NSObject *v44;
  uint64_t (*v45)(uint64_t **, CFTypeRef *);
  uint64_t **v46;
  uint64_t **v47;
  uint64_t *v48;
  uint64_t **v49;
  void **v50;
  int v51;
  uint64_t **v52;
  uint64_t **v53;
  uint64_t *v54;
  uint64_t **v55;
  void *v56;
  _BOOL4 v57;
  void **v58;
  const char *v59;
  NSObject *v60;
  uint32_t v61;
  int v62;
  float v63;
  float v64;
  float v65;
  float v66;
  float v67;
  double v68;
  int v69;
  int v71;
  uint64_t **v72;
  uint64_t *v73;
  NSObject *v74;
  uint64_t **v75;
  uint64_t *v76;
  uint64_t **v77;
  uint64_t *v78;
  uint64_t **v79;
  uint64_t *v80;
  uint64_t **v81;
  uint64_t *v82;
  void *v83[2];
  char v84;
  void *v85[2];
  uint64_t v86;
  unsigned __int8 v87[8];
  uint64_t *v88;
  void *__p[2];
  uint64_t v90;
  void *v91;
  _BYTE buf[32];
  void **v93;
  uint64_t v94;

  v94 = *MEMORY[0x1E0C80C00];
  if (a3)
    return 4294956417;
  result = 4294956417;
  if (a2 <= 30000)
  {
    if (a2 > 3699)
    {
      if (a2 > 6999)
      {
        if (a2 != 7000)
        {
          if (a2 == 30000)
          {
            if (a6 == 8)
            {
              if (!*((_BYTE *)this + 17))
              {
                if (a5)
                {
                  applesauce::CF::StringRef::from_get((applesauce::CF::StringRef *)buf, *a5);
                  v24 = this + 85;
                  LODWORD(__p[0]) = 0;
                  v25 = std::__tree<std::__value_type<AUSoundIsolation::BoxTuningType,applesauce::CF::StringRef>,std::__map_value_compare<AUSoundIsolation::BoxTuningType,std::__value_type<AUSoundIsolation::BoxTuningType,applesauce::CF::StringRef>,std::less<AUSoundIsolation::BoxTuningType>,true>,std::allocator<std::__value_type<AUSoundIsolation::BoxTuningType,applesauce::CF::StringRef>>>::__emplace_unique_key_args<AUSoundIsolation::BoxTuningType,std::piecewise_construct_t const&,std::tuple<AUSoundIsolation::BoxTuningType&&>,std::tuple<>>(v24, 0, __p);
                  v26 = v25[5];
                  v25[5] = *(uint64_t **)buf;
                  *(_QWORD *)buf = v26;
                  applesauce::CF::StringRef::~StringRef((const void **)buf);
                  getAUSoundIsolationLog();
                  v12 = objc_claimAutoreleasedReturnValue();
                  if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
                  {
                    LODWORD(v83[0]) = 0;
                    v27 = std::__tree<std::__value_type<AUSoundIsolation::BoxTuningType,applesauce::CF::StringRef>,std::__map_value_compare<AUSoundIsolation::BoxTuningType,std::__value_type<AUSoundIsolation::BoxTuningType,applesauce::CF::StringRef>,std::less<AUSoundIsolation::BoxTuningType>,true>,std::allocator<std::__value_type<AUSoundIsolation::BoxTuningType,applesauce::CF::StringRef>>>::__emplace_unique_key_args<AUSoundIsolation::BoxTuningType,std::piecewise_construct_t const&,std::tuple<AUSoundIsolation::BoxTuningType&&>,std::tuple<>>(v24, 0, v83);
                    applesauce::CF::convert_to<std::string,0>((const __CFString *)v27[5], (uint64_t)__p);
                    v28 = v90 >= 0 ? __p : (void **)__p[0];
                    *(_DWORD *)buf = 136315650;
                    *(_QWORD *)&buf[4] = "AUSoundIsolation.mm";
                    *(_WORD *)&buf[12] = 1024;
                    *(_DWORD *)&buf[14] = 731;
                    *(_WORD *)&buf[18] = 2080;
                    *(_QWORD *)&buf[20] = v28;
                    _os_log_impl(&dword_1B5ED0000, v12, OS_LOG_TYPE_INFO, "%s:%i NeuralNetPlistPath is overriden to %s", buf, 0x1Cu);
                    if (SHIBYTE(v90) < 0)
                      operator delete(__p[0]);
                  }
                  goto LABEL_100;
                }
                *(_QWORD *)buf = 0;
                LODWORD(__p[0]) = 0;
                v72 = std::__tree<std::__value_type<AUSoundIsolation::BoxTuningType,applesauce::CF::StringRef>,std::__map_value_compare<AUSoundIsolation::BoxTuningType,std::__value_type<AUSoundIsolation::BoxTuningType,applesauce::CF::StringRef>,std::less<AUSoundIsolation::BoxTuningType>,true>,std::allocator<std::__value_type<AUSoundIsolation::BoxTuningType,applesauce::CF::StringRef>>>::__emplace_unique_key_args<AUSoundIsolation::BoxTuningType,std::piecewise_construct_t const&,std::tuple<AUSoundIsolation::BoxTuningType&&>,std::tuple<>>(this + 85, 0, __p);
                v73 = v72[5];
                v72[5] = *(uint64_t **)buf;
                *(_QWORD *)buf = v73;
                applesauce::CF::StringRef::~StringRef((const void **)buf);
                getAUSoundIsolationLog();
                v74 = objc_claimAutoreleasedReturnValue();
                if (os_log_type_enabled(v74, OS_LOG_TYPE_INFO))
                {
                  *(_DWORD *)buf = 136315394;
                  *(_QWORD *)&buf[4] = "AUSoundIsolation.mm";
                  *(_WORD *)&buf[12] = 1024;
                  *(_DWORD *)&buf[14] = 734;
                  _os_log_impl(&dword_1B5ED0000, v74, OS_LOG_TYPE_INFO, "%s:%i NeuralNetPlistPathOverride is set to null and thus removed", buf, 0x12u);
                }
                goto LABEL_158;
              }
              return 4294956447;
            }
            return 4294956445;
          }
          return result;
        }
        v42 = *(float *)a5;
        v43 = this[92];
        std::mutex::lock((std::mutex *)v43 + 1);
        v43[19] = (uint64_t)v42;
        std::mutex::unlock((std::mutex *)v43 + 1);
        if (getAUSoundIsolationLog(void)::onceToken != -1)
          dispatch_once(&getAUSoundIsolationLog(void)::onceToken, &__block_literal_global_40);
        v44 = getAUSoundIsolationLog(void)::gLog;
        result = os_log_type_enabled((os_log_t)getAUSoundIsolationLog(void)::gLog, OS_LOG_TYPE_INFO);
        if (!(_DWORD)result)
          return result;
        *(_DWORD *)buf = 136315650;
        *(_QWORD *)&buf[4] = "AUSoundIsolation.mm";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 710;
        *(_WORD *)&buf[18] = 2048;
        *(double *)&buf[20] = v42;
        _os_log_impl(&dword_1B5ED0000, v44, OS_LOG_TYPE_INFO, "%s:%i set CoreAudio reporter time period - %f", buf, 0x1Cu);
        return 0;
      }
      if (a2 == 3700)
      {
        if (a6 == 4)
        {
          if (!*((_BYTE *)this + 17))
          {
            result = 0;
            *((_BYTE *)this + 376) = *(_DWORD *)a5 != 0;
            return result;
          }
          return 4294956447;
        }
        return 4294956445;
      }
      if (a2 != 6000)
        return result;
      __p[0] = 0;
      __p[1] = 0;
      v90 = 0;
      std::vector<long long>::__init_with_size[abi:ne180100]<long long const*,long long const*>(__p, a5, (uint64_t)&a5[a6 >> 3], a6 >> 3);
      v87[0] = 2;
      *(void **)buf = __p[0];
      v83[0] = __p[1];
      v88 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::create<std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__wrap_iter<long long const*>,std::__wrap_iter<long long const*>>((uint64_t **)buf, (uint64_t **)v83);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v87);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v87);
      v15 = (uint64_t)this[92];
      *(_OWORD *)v85 = *(_OWORD *)__p;
      v86 = v90;
      __p[1] = 0;
      v90 = 0;
      __p[0] = 0;
      AU::SoundIsolation::MetricsReporter::setCAReporterIDs(v15, (uint64_t)v85);
      if (v85[0])
        operator delete(v85[0]);
      if (getAUSoundIsolationLog(void)::onceToken == -1)
        goto LABEL_26;
      goto LABEL_170;
    }
    switch(a2)
    {
      case 21:
        v62 = *(_DWORD *)a5 != 0;
        if (*((unsigned __int8 *)this + 528) != v62)
        {
          *((_BYTE *)this + 528) = v62;
          *((_DWORD *)this + 137) = *((_DWORD *)this + 135);
          *((_DWORD *)this + 139) = *((_DWORD *)this + 138);
          v65 = *((float *)this + 143);
          if (*((_BYTE *)this + 529))
          {
            *((_DWORD *)this + 140) = v65;
            v66 = 0.0;
          }
          else
          {
            v66 = (float)*((unsigned int *)this + 140);
            if (v65 != 0.0 && v65 != v66)
            {
              *((_DWORD *)this + 140) = v65;
              v66 = (float)v65;
            }
          }
          *((float *)this + 143) = v66;
          getAUSoundIsolationLog();
          v19 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v19, OS_LOG_TYPE_INFO))
          {
            v71 = *((unsigned __int8 *)this + 528);
            *(_DWORD *)buf = 136315650;
            *(_QWORD *)&buf[4] = "AUSoundIsolation.mm";
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = 663;
            *(_WORD *)&buf[18] = 1024;
            *(_DWORD *)&buf[20] = v71;
            _os_log_impl(&dword_1B5ED0000, v19, OS_LOG_TYPE_INFO, "%s:%i BypassEffect state changed to: %d", buf, 0x18u);
          }
          goto LABEL_143;
        }
        getAUSoundIsolationLog();
        v23 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v23, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)buf = 136315650;
          *(_QWORD *)&buf[4] = "AUSoundIsolation.mm";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = 665;
          *(_WORD *)&buf[18] = 1024;
          *(_DWORD *)&buf[20] = v62;
          _os_log_impl(&dword_1B5ED0000, v23, OS_LOG_TYPE_INFO, "%s:%i BypassEffect state unchanged: %d", buf, 0x18u);
        }
        break;
      case 56:
        this = (uint64_t **)this[1];
        __p[0] = 0;
        __p[1] = __p;
        v90 = 0x2020000000;
        v45 = (uint64_t (*)(uint64_t **, CFTypeRef *))getCAUI_createCustomViewForAudioUnitSymbolLoc(void)::ptr;
        v91 = getCAUI_createCustomViewForAudioUnitSymbolLoc(void)::ptr;
        if (!getCAUI_createCustomViewForAudioUnitSymbolLoc(void)::ptr)
        {
          *(_QWORD *)buf = MEMORY[0x1E0C809B0];
          *(_QWORD *)&buf[8] = 3221225472;
          *(_QWORD *)&buf[16] = ___ZL45getCAUI_createCustomViewForAudioUnitSymbolLocv_block_invoke;
          *(_QWORD *)&buf[24] = &unk_1E69D3590;
          v93 = __p;
          ___ZL45getCAUI_createCustomViewForAudioUnitSymbolLocv_block_invoke((uint64_t)buf);
          v45 = (uint64_t (*)(uint64_t **, CFTypeRef *))*((_QWORD *)__p[1] + 3);
        }
        _Block_object_dispose(__p, 8);
        if (v45)
          return v45(this, a5);
        dlerror();
        abort_report_np();
        __break(1u);
LABEL_170:
        dispatch_once(&getAUSoundIsolationLog(void)::onceToken, &__block_literal_global_40);
LABEL_26:
        v16 = (id)getAUSoundIsolationLog(void)::gLog;
        if (os_log_type_enabled(v16, OS_LOG_TYPE_INFO))
        {
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::dump((uint64_t)v87, -1, 0x20u, 0, 0, v83);
          v17 = v84 >= 0 ? v83 : (void **)v83[0];
          *(_DWORD *)buf = 136315650;
          *(_QWORD *)&buf[4] = "AUSoundIsolation.mm";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = 701;
          *(_WORD *)&buf[18] = 2080;
          *(_QWORD *)&buf[20] = v17;
          _os_log_impl(&dword_1B5ED0000, v16, OS_LOG_TYPE_INFO, "%s:%i set CoreAudio reporter IDs - %s", buf, 0x1Cu);
          if (v84 < 0)
            operator delete(v83[0]);
        }

        AUSoundIsolation::TearDownInternalReporterID((AUSoundIsolation *)this);
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v87);
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v88, v87[0]);
        v18 = __p[0];
        if (!__p[0])
          return 0;
        __p[1] = __p[0];
LABEL_34:
        operator delete(v18);
        return 0;
      case 2121:
        v21 = *(float *)a5;
        v22 = *(_DWORD *)a5 != 0;
        if (*((unsigned __int8 *)this + 529) != v22)
        {
          *((_BYTE *)this + 529) = v22;
          *((_DWORD *)this + 137) = *((_DWORD *)this + 135);
          *((_DWORD *)this + 139) = *((_DWORD *)this + 138);
          v63 = *((float *)this + 143);
          if (v21 == 0.0)
          {
            v64 = (float)*((unsigned int *)this + 140);
            if (v63 != 0.0 && v63 != v64)
            {
              *((_DWORD *)this + 140) = v63;
              v64 = (float)v63;
            }
          }
          else
          {
            *((_DWORD *)this + 140) = v63;
            v64 = 0.0;
          }
          *((float *)this + 143) = v64;
          getAUSoundIsolationLog();
          v19 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v19, OS_LOG_TYPE_INFO))
          {
            v69 = *((unsigned __int8 *)this + 529);
            *(_DWORD *)buf = 136315650;
            *(_QWORD *)&buf[4] = "AUSoundIsolation.mm";
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = 688;
            *(_WORD *)&buf[18] = 1024;
            *(_DWORD *)&buf[20] = v69;
            _os_log_impl(&dword_1B5ED0000, v19, OS_LOG_TYPE_INFO, "%s:%i BypassEffectWithLatency state changed to: %d", buf, 0x18u);
          }
          goto LABEL_143;
        }
        getAUSoundIsolationLog();
        v23 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v23, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)buf = 136315650;
          *(_QWORD *)&buf[4] = "AUSoundIsolation.mm";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = 690;
          *(_WORD *)&buf[18] = 1024;
          *(_DWORD *)&buf[20] = v22;
          _os_log_impl(&dword_1B5ED0000, v23, OS_LOG_TYPE_INFO, "%s:%i BypassEffectWithLatency state unchanged: %d", buf, 0x18u);
        }
        break;
      default:
        return result;
    }

    return 0;
  }
  if (a2 > 69999)
  {
    if (a2 > 89999)
    {
      if (a2 == 90000)
      {
        if (*((_BYTE *)this + 17))
          return 4294956447;
        v67 = *(float *)a5;
        *((_DWORD *)this + 135) = *(_DWORD *)a5;
        *((float *)this + 137) = v67;
        getAUSoundIsolationLog();
        v19 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v19, OS_LOG_TYPE_INFO))
        {
          v68 = *((float *)this + 135);
          *(_DWORD *)buf = 136315650;
          *(_QWORD *)&buf[4] = "AUSoundIsolation.mm";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = 856;
          *(_WORD *)&buf[18] = 2048;
          *(double *)&buf[20] = v68;
          _os_log_impl(&dword_1B5ED0000, v19, OS_LOG_TYPE_INFO, "%s:%i Time Constant (seconds) set to: %f", buf, 0x1Cu);
        }
      }
      else
      {
        if (a2 != 90001)
          return result;
        if (*((_BYTE *)this + 17))
          return 4294956447;
        v40 = *(float *)a5;
        *((_DWORD *)this + 139) = *(_DWORD *)a5;
        *((float *)this + 138) = v40;
        getAUSoundIsolationLog();
        v19 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v19, OS_LOG_TYPE_INFO))
        {
          v41 = *((_DWORD *)this + 138);
          *(_DWORD *)buf = 136315650;
          *(_QWORD *)&buf[4] = "AUSoundIsolation.mm";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = 868;
          *(_WORD *)&buf[18] = 1024;
          *(_DWORD *)&buf[20] = v41;
          _os_log_impl(&dword_1B5ED0000, v19, OS_LOG_TYPE_INFO, "%s:%i Transition Wait Time (frames) set to: %u", buf, 0x18u);
        }
      }
    }
    else if (a2 == 70000)
    {
      if (*((_BYTE *)this + 17))
        return 4294956447;
      *((_DWORD *)this + 133) = *(_DWORD *)a5;
      getAUSoundIsolationLog();
      v19 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v19, OS_LOG_TYPE_INFO))
      {
        v51 = *((_DWORD *)this + 133);
        *(_DWORD *)buf = 136315650;
        *(_QWORD *)&buf[4] = "AUSoundIsolation.mm";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 844;
        *(_WORD *)&buf[18] = 1024;
        *(_DWORD *)&buf[20] = v51;
        _os_log_impl(&dword_1B5ED0000, v19, OS_LOG_TYPE_INFO, "%s:%i DereverbEnable set to: %u", buf, 0x18u);
      }
    }
    else
    {
      if (a2 != 80000)
        return result;
      if (*((_BYTE *)this + 17))
        return 4294956447;
      *((_DWORD *)this + 134) = *(_DWORD *)a5;
      getAUSoundIsolationLog();
      v19 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v19, OS_LOG_TYPE_INFO))
      {
        v20 = *((_DWORD *)this + 134);
        *(_DWORD *)buf = 136315650;
        *(_QWORD *)&buf[4] = "AUSoundIsolation.mm";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 834;
        *(_WORD *)&buf[18] = 1024;
        *(_DWORD *)&buf[20] = v20;
        _os_log_impl(&dword_1B5ED0000, v19, OS_LOG_TYPE_INFO, "%s:%i DenoiseEnable set to: %u", buf, 0x18u);
      }
    }
LABEL_143:

    return 0;
  }
  if (a2 > 49999)
  {
    if (a2 != 50000)
    {
      if (a2 != 60000)
        return result;
      if (a6 != 8)
        return 4294956445;
      if (*((_BYTE *)this + 17))
        return 4294956447;
      if (!a5)
      {
        *(_QWORD *)buf = 0;
        LODWORD(__p[0]) = 4;
        v77 = std::__tree<std::__value_type<AUSoundIsolation::BoxTuningType,applesauce::CF::StringRef>,std::__map_value_compare<AUSoundIsolation::BoxTuningType,std::__value_type<AUSoundIsolation::BoxTuningType,applesauce::CF::StringRef>,std::less<AUSoundIsolation::BoxTuningType>,true>,std::allocator<std::__value_type<AUSoundIsolation::BoxTuningType,applesauce::CF::StringRef>>>::__emplace_unique_key_args<AUSoundIsolation::BoxTuningType,std::piecewise_construct_t const&,std::tuple<AUSoundIsolation::BoxTuningType&&>,std::tuple<>>(this + 85, 4, __p);
        v78 = v77[5];
        v77[5] = *(uint64_t **)buf;
        *(_QWORD *)buf = v78;
        applesauce::CF::StringRef::~StringRef((const void **)buf);
        getAUSoundIsolationLog();
        v74 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v74, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)buf = 136315394;
          *(_QWORD *)&buf[4] = "AUSoundIsolation.mm";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = 824;
          _os_log_impl(&dword_1B5ED0000, v74, OS_LOG_TYPE_INFO, "%s:%i DenoisePresetPathOverride is set to null and thus removed", buf, 0x12u);
        }
        goto LABEL_158;
      }
      applesauce::CF::StringRef::from_get((applesauce::CF::StringRef *)buf, *a5);
      v29 = this + 85;
      LODWORD(__p[0]) = 4;
      v30 = std::__tree<std::__value_type<AUSoundIsolation::BoxTuningType,applesauce::CF::StringRef>,std::__map_value_compare<AUSoundIsolation::BoxTuningType,std::__value_type<AUSoundIsolation::BoxTuningType,applesauce::CF::StringRef>,std::less<AUSoundIsolation::BoxTuningType>,true>,std::allocator<std::__value_type<AUSoundIsolation::BoxTuningType,applesauce::CF::StringRef>>>::__emplace_unique_key_args<AUSoundIsolation::BoxTuningType,std::piecewise_construct_t const&,std::tuple<AUSoundIsolation::BoxTuningType&&>,std::tuple<>>(v29, 4, __p);
      v31 = v30[5];
      v30[5] = *(uint64_t **)buf;
      *(_QWORD *)buf = v31;
      applesauce::CF::StringRef::~StringRef((const void **)buf);
      *(_DWORD *)buf = 4;
      v32 = std::__tree<std::__value_type<AUSoundIsolation::BoxTuningType,applesauce::CF::StringRef>,std::__map_value_compare<AUSoundIsolation::BoxTuningType,std::__value_type<AUSoundIsolation::BoxTuningType,applesauce::CF::StringRef>,std::less<AUSoundIsolation::BoxTuningType>,true>,std::allocator<std::__value_type<AUSoundIsolation::BoxTuningType,applesauce::CF::StringRef>>>::__emplace_unique_key_args<AUSoundIsolation::BoxTuningType,std::piecewise_construct_t const&,std::tuple<AUSoundIsolation::BoxTuningType&&>,std::tuple<>>(v29, 4, buf);
      applesauce::CF::convert_to<std::string,0>((const __CFString *)v32[5], (uint64_t)__p);
      if (v90 >= 0)
        v33 = (void *)HIBYTE(v90);
      else
        v33 = __p[1];
      getAUSoundIsolationLog();
      v34 = objc_claimAutoreleasedReturnValue();
      v35 = os_log_type_enabled(v34, OS_LOG_TYPE_INFO);
      if (v33)
      {
        if (v35)
        {
          v36 = __p;
          if (v90 < 0)
            v36 = (void **)__p[0];
          *(_DWORD *)buf = 136315650;
          *(_QWORD *)&buf[4] = "AUSoundIsolation.mm";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = 820;
          *(_WORD *)&buf[18] = 2080;
          *(_QWORD *)&buf[20] = v36;
          v37 = "%s:%i DenoisePresetPath is overridden to %s";
          v38 = v34;
          v39 = 28;
          goto LABEL_161;
        }
      }
      else if (v35)
      {
        *(_DWORD *)buf = 136315394;
        *(_QWORD *)&buf[4] = "AUSoundIsolation.mm";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 818;
        v37 = "%s:%i DenoisePresetPath is overridden with an empty string.";
        v38 = v34;
        v39 = 18;
LABEL_161:
        _os_log_impl(&dword_1B5ED0000, v38, OS_LOG_TYPE_INFO, v37, buf, v39);
      }
LABEL_166:

      if ((SHIBYTE(v90) & 0x80000000) == 0)
        return 0;
      v18 = __p[0];
      goto LABEL_34;
    }
    if (a6 != 8)
      return 4294956445;
    if (*((_BYTE *)this + 17))
      return 4294956447;
    if (!a5)
    {
      *(_QWORD *)buf = 0;
      LODWORD(__p[0]) = 3;
      v81 = std::__tree<std::__value_type<AUSoundIsolation::BoxTuningType,applesauce::CF::StringRef>,std::__map_value_compare<AUSoundIsolation::BoxTuningType,std::__value_type<AUSoundIsolation::BoxTuningType,applesauce::CF::StringRef>,std::less<AUSoundIsolation::BoxTuningType>,true>,std::allocator<std::__value_type<AUSoundIsolation::BoxTuningType,applesauce::CF::StringRef>>>::__emplace_unique_key_args<AUSoundIsolation::BoxTuningType,std::piecewise_construct_t const&,std::tuple<AUSoundIsolation::BoxTuningType&&>,std::tuple<>>(this + 85, 3, __p);
      v82 = v81[5];
      v81[5] = *(uint64_t **)buf;
      *(_QWORD *)buf = v82;
      applesauce::CF::StringRef::~StringRef((const void **)buf);
      getAUSoundIsolationLog();
      v74 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v74, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 136315394;
        *(_QWORD *)&buf[4] = "AUSoundIsolation.mm";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 799;
        _os_log_impl(&dword_1B5ED0000, v74, OS_LOG_TYPE_INFO, "%s:%i DereverbPresetPathOverride is set to null and thus removed", buf, 0x12u);
      }
      goto LABEL_158;
    }
    applesauce::CF::StringRef::from_get((applesauce::CF::StringRef *)buf, *a5);
    v52 = this + 85;
    LODWORD(__p[0]) = 3;
    v53 = std::__tree<std::__value_type<AUSoundIsolation::BoxTuningType,applesauce::CF::StringRef>,std::__map_value_compare<AUSoundIsolation::BoxTuningType,std::__value_type<AUSoundIsolation::BoxTuningType,applesauce::CF::StringRef>,std::less<AUSoundIsolation::BoxTuningType>,true>,std::allocator<std::__value_type<AUSoundIsolation::BoxTuningType,applesauce::CF::StringRef>>>::__emplace_unique_key_args<AUSoundIsolation::BoxTuningType,std::piecewise_construct_t const&,std::tuple<AUSoundIsolation::BoxTuningType&&>,std::tuple<>>(v52, 3, __p);
    v54 = v53[5];
    v53[5] = *(uint64_t **)buf;
    *(_QWORD *)buf = v54;
    applesauce::CF::StringRef::~StringRef((const void **)buf);
    *(_DWORD *)buf = 3;
    v55 = std::__tree<std::__value_type<AUSoundIsolation::BoxTuningType,applesauce::CF::StringRef>,std::__map_value_compare<AUSoundIsolation::BoxTuningType,std::__value_type<AUSoundIsolation::BoxTuningType,applesauce::CF::StringRef>,std::less<AUSoundIsolation::BoxTuningType>,true>,std::allocator<std::__value_type<AUSoundIsolation::BoxTuningType,applesauce::CF::StringRef>>>::__emplace_unique_key_args<AUSoundIsolation::BoxTuningType,std::piecewise_construct_t const&,std::tuple<AUSoundIsolation::BoxTuningType&&>,std::tuple<>>(v52, 3, buf);
    applesauce::CF::convert_to<std::string,0>((const __CFString *)v55[5], (uint64_t)__p);
    if (v90 >= 0)
      v56 = (void *)HIBYTE(v90);
    else
      v56 = __p[1];
    getAUSoundIsolationLog();
    v34 = objc_claimAutoreleasedReturnValue();
    v57 = os_log_type_enabled(v34, OS_LOG_TYPE_INFO);
    if (v56)
    {
      if (!v57)
        goto LABEL_166;
      v58 = __p;
      if (v90 < 0)
        v58 = (void **)__p[0];
      *(_DWORD *)buf = 136315650;
      *(_QWORD *)&buf[4] = "AUSoundIsolation.mm";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 795;
      *(_WORD *)&buf[18] = 2080;
      *(_QWORD *)&buf[20] = v58;
      v59 = "%s:%i DereverbPresetPath is overriden to %s";
      v60 = v34;
      v61 = 28;
    }
    else
    {
      if (!v57)
        goto LABEL_166;
      *(_DWORD *)buf = 136315394;
      *(_QWORD *)&buf[4] = "AUSoundIsolation.mm";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 793;
      v59 = "%s:%i DereverbPresetPath is overriden with an empty string.";
      v60 = v34;
      v61 = 18;
    }
    _os_log_impl(&dword_1B5ED0000, v60, OS_LOG_TYPE_INFO, v59, buf, v61);
    goto LABEL_166;
  }
  if (a2 == 30001)
  {
    if (a6 == 8)
    {
      if (!*((_BYTE *)this + 17))
      {
        if (a5)
        {
          applesauce::CF::StringRef::from_get((applesauce::CF::StringRef *)buf, *a5);
          v46 = this + 85;
          LODWORD(__p[0]) = 1;
          v47 = std::__tree<std::__value_type<AUSoundIsolation::BoxTuningType,applesauce::CF::StringRef>,std::__map_value_compare<AUSoundIsolation::BoxTuningType,std::__value_type<AUSoundIsolation::BoxTuningType,applesauce::CF::StringRef>,std::less<AUSoundIsolation::BoxTuningType>,true>,std::allocator<std::__value_type<AUSoundIsolation::BoxTuningType,applesauce::CF::StringRef>>>::__emplace_unique_key_args<AUSoundIsolation::BoxTuningType,std::piecewise_construct_t const&,std::tuple<AUSoundIsolation::BoxTuningType&&>,std::tuple<>>(v46, 1, __p);
          v48 = v47[5];
          v47[5] = *(uint64_t **)buf;
          *(_QWORD *)buf = v48;
          applesauce::CF::StringRef::~StringRef((const void **)buf);
          getAUSoundIsolationLog();
          v12 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
          {
            LODWORD(v83[0]) = 1;
            v49 = std::__tree<std::__value_type<AUSoundIsolation::BoxTuningType,applesauce::CF::StringRef>,std::__map_value_compare<AUSoundIsolation::BoxTuningType,std::__value_type<AUSoundIsolation::BoxTuningType,applesauce::CF::StringRef>,std::less<AUSoundIsolation::BoxTuningType>,true>,std::allocator<std::__value_type<AUSoundIsolation::BoxTuningType,applesauce::CF::StringRef>>>::__emplace_unique_key_args<AUSoundIsolation::BoxTuningType,std::piecewise_construct_t const&,std::tuple<AUSoundIsolation::BoxTuningType&&>,std::tuple<>>(v46, 1, v83);
            applesauce::CF::convert_to<std::string,0>((const __CFString *)v49[5], (uint64_t)__p);
            v50 = v90 >= 0 ? __p : (void **)__p[0];
            *(_DWORD *)buf = 136315650;
            *(_QWORD *)&buf[4] = "AUSoundIsolation.mm";
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = 751;
            *(_WORD *)&buf[18] = 2080;
            *(_QWORD *)&buf[20] = v50;
            _os_log_impl(&dword_1B5ED0000, v12, OS_LOG_TYPE_INFO, "%s:%i NeuralNetPresetPath is overriden to %s", buf, 0x1Cu);
            if (SHIBYTE(v90) < 0)
              operator delete(__p[0]);
          }
          goto LABEL_100;
        }
        *(_QWORD *)buf = 0;
        LODWORD(__p[0]) = 1;
        v79 = std::__tree<std::__value_type<AUSoundIsolation::BoxTuningType,applesauce::CF::StringRef>,std::__map_value_compare<AUSoundIsolation::BoxTuningType,std::__value_type<AUSoundIsolation::BoxTuningType,applesauce::CF::StringRef>,std::less<AUSoundIsolation::BoxTuningType>,true>,std::allocator<std::__value_type<AUSoundIsolation::BoxTuningType,applesauce::CF::StringRef>>>::__emplace_unique_key_args<AUSoundIsolation::BoxTuningType,std::piecewise_construct_t const&,std::tuple<AUSoundIsolation::BoxTuningType&&>,std::tuple<>>(this + 85, 1, __p);
        v80 = v79[5];
        v79[5] = *(uint64_t **)buf;
        *(_QWORD *)buf = v80;
        applesauce::CF::StringRef::~StringRef((const void **)buf);
        getAUSoundIsolationLog();
        v74 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v74, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)buf = 136315394;
          *(_QWORD *)&buf[4] = "AUSoundIsolation.mm";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = 754;
          _os_log_impl(&dword_1B5ED0000, v74, OS_LOG_TYPE_INFO, "%s:%i NeuralNetPresetPathOverride is set to null and thus removed", buf, 0x12u);
        }
LABEL_158:

        return 0;
      }
      return 4294956447;
    }
    return 4294956445;
  }
  if (a2 == 40000)
  {
    if (a6 == 8)
    {
      if (!*((_BYTE *)this + 17))
      {
        if (a5)
        {
          applesauce::CF::StringRef::from_get((applesauce::CF::StringRef *)buf, *a5);
          v9 = this + 85;
          LODWORD(__p[0]) = 2;
          v10 = std::__tree<std::__value_type<AUSoundIsolation::BoxTuningType,applesauce::CF::StringRef>,std::__map_value_compare<AUSoundIsolation::BoxTuningType,std::__value_type<AUSoundIsolation::BoxTuningType,applesauce::CF::StringRef>,std::less<AUSoundIsolation::BoxTuningType>,true>,std::allocator<std::__value_type<AUSoundIsolation::BoxTuningType,applesauce::CF::StringRef>>>::__emplace_unique_key_args<AUSoundIsolation::BoxTuningType,std::piecewise_construct_t const&,std::tuple<AUSoundIsolation::BoxTuningType&&>,std::tuple<>>(v9, 2, __p);
          v11 = v10[5];
          v10[5] = *(uint64_t **)buf;
          *(_QWORD *)buf = v11;
          applesauce::CF::StringRef::~StringRef((const void **)buf);
          getAUSoundIsolationLog();
          v12 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
          {
            LODWORD(v83[0]) = 2;
            v13 = std::__tree<std::__value_type<AUSoundIsolation::BoxTuningType,applesauce::CF::StringRef>,std::__map_value_compare<AUSoundIsolation::BoxTuningType,std::__value_type<AUSoundIsolation::BoxTuningType,applesauce::CF::StringRef>,std::less<AUSoundIsolation::BoxTuningType>,true>,std::allocator<std::__value_type<AUSoundIsolation::BoxTuningType,applesauce::CF::StringRef>>>::__emplace_unique_key_args<AUSoundIsolation::BoxTuningType,std::piecewise_construct_t const&,std::tuple<AUSoundIsolation::BoxTuningType&&>,std::tuple<>>(v9, 2, v83);
            applesauce::CF::convert_to<std::string,0>((const __CFString *)v13[5], (uint64_t)__p);
            if (v90 >= 0)
              v14 = __p;
            else
              v14 = (void **)__p[0];
            *(_DWORD *)buf = 136315650;
            *(_QWORD *)&buf[4] = "AUSoundIsolation.mm";
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = 771;
            *(_WORD *)&buf[18] = 2080;
            *(_QWORD *)&buf[20] = v14;
            _os_log_impl(&dword_1B5ED0000, v12, OS_LOG_TYPE_INFO, "%s:%i NeuralNetModelNetPathBase is overriden to %s", buf, 0x1Cu);
            if (SHIBYTE(v90) < 0)
              operator delete(__p[0]);
          }
LABEL_100:

          return 0;
        }
        *(_QWORD *)buf = 0;
        LODWORD(__p[0]) = 2;
        v75 = std::__tree<std::__value_type<AUSoundIsolation::BoxTuningType,applesauce::CF::StringRef>,std::__map_value_compare<AUSoundIsolation::BoxTuningType,std::__value_type<AUSoundIsolation::BoxTuningType,applesauce::CF::StringRef>,std::less<AUSoundIsolation::BoxTuningType>,true>,std::allocator<std::__value_type<AUSoundIsolation::BoxTuningType,applesauce::CF::StringRef>>>::__emplace_unique_key_args<AUSoundIsolation::BoxTuningType,std::piecewise_construct_t const&,std::tuple<AUSoundIsolation::BoxTuningType&&>,std::tuple<>>(this + 85, 2, __p);
        v76 = v75[5];
        v75[5] = *(uint64_t **)buf;
        *(_QWORD *)buf = v76;
        applesauce::CF::StringRef::~StringRef((const void **)buf);
        getAUSoundIsolationLog();
        v74 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v74, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)buf = 136315394;
          *(_QWORD *)&buf[4] = "AUSoundIsolation.mm";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = 774;
          _os_log_impl(&dword_1B5ED0000, v74, OS_LOG_TYPE_INFO, "%s:%i NeuralNetModelNetPathBaseOverride is set to null and thus removed", buf, 0x12u);
        }
        goto LABEL_158;
      }
      return 4294956447;
    }
    return 4294956445;
  }
  return result;
}

void sub_1B633DB9C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, void *__p, uint64_t a20)
{
  uint64_t v20;

  applesauce::CF::StringRef::~StringRef((const void **)(v20 - 96));
  _Unwind_Resume(a1);
}

uint64_t AUSoundIsolation::GetParameter(ausdk::AUElement ***this, unsigned int a2, unsigned int a3, unsigned int a4, float *a5)
{
  ausdk::AUScope *Scope;
  ausdk::AUElement *Element;
  ausdk::AUElement **v12;
  ausdk::AUElement *v13;
  ausdk::AUElement **v14;

  Scope = (ausdk::AUScope *)ausdk::AUBase::GetScope((ausdk::AUBase *)this, a3);
  Element = (ausdk::AUElement *)ausdk::AUScope::SafeGetElement(Scope, a4);
  *a5 = ausdk::AUElement::GetParameter(Element, a2);
  if (!a3)
  {
    v12 = this[9];
    if (v12)
    {
      v13 = (ausdk::AUElement *)(*((uint64_t (**)(ausdk::AUElement **, _QWORD))*v12 + 4))(v12, 0);
    }
    else
    {
      v14 = this[6];
      if (this[7] == v14)
        v13 = 0;
      else
        v13 = *v14;
    }
    *a5 = ausdk::AUElement::GetParameter(v13, a2);
  }
  return 0;
}

uint64_t AUSoundIsolation::SetParameter(AUSoundIsolation *this, unsigned int a2, int a3, float a4)
{
  uint64_t result;
  uint64_t v8;
  ausdk::AUElement *v9;
  ausdk::AUElement **v10;

  if (a3)
    return 4294956430;
  v8 = *((_QWORD *)this + 9);
  if (v8)
  {
    v9 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v8 + 32))(v8, 0);
  }
  else
  {
    v10 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v10)
      v9 = 0;
    else
      v9 = *v10;
  }
  ausdk::AUElement::SetParameter(v9, a2, a4, 0);
  result = 0;
  ++*((_QWORD *)this + 74);
  return result;
}

uint64_t AUSoundIsolation::CanScheduleParameters(AUSoundIsolation *this)
{
  return 0;
}

uint64_t AUSoundIsolation::ProcessMultipleBufferLists(AUSoundIsolation *this, unsigned int *a2, unsigned int a3, int a4, const AudioBufferList **a5, int a6, AudioBufferList **a7)
{
  uint64_t v13;
  uint64_t BypassWithLatencyGraphOutput;
  uint64_t v15;
  uint64_t v16;
  float v17;
  float32_t v18;
  float v19;
  float32_t v20;
  float32x2_t v21;
  int8x8_t v22;
  int8x8_t v23;
  float v24;
  float v25;
  float v26;
  uint64_t v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  uint64_t v32;
  uint64_t v33;
  NSObject *v34;
  uint64_t v35;
  unsigned int *v36;
  uint64_t v37;
  unint64_t mNumberBuffers;
  uint64_t v40;
  unint64_t v41;
  size_t v42;
  const void *v43;
  void *v44;
  __int128 v45;
  __int128 v46;
  uint64_t Element;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  uint64_t BufferList;
  __int128 v52;
  __int128 v53;
  uint64_t ProcessingGraphOutput;
  uint64_t v55;
  NSObject *v56;
  const char *v57;
  NSObject *v58;
  const char *v59;
  uint8_t *v60;
  int v61;
  uint64_t result;
  const char *v63;
  _QWORD *v64;
  const char *v65;
  _QWORD *v66;
  const char *v67;
  _QWORD *v68;
  uint64_t v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  uint64_t v74;
  AudioStreamBasicDescription v75;
  _BYTE v76[80];
  _BYTE buf[80];
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  _BYTE v83[80];
  uint8_t v84[12];
  uint64_t v85;

  v85 = *MEMORY[0x1E0C80C00];
  if (a4 != 1 || a6 != 1)
  {
    if (getAUSoundIsolationLog(void)::onceToken != -1)
      dispatch_once(&getAUSoundIsolationLog(void)::onceToken, &__block_literal_global_40);
    v34 = getAUSoundIsolationLog(void)::gLog;
    if (os_log_type_enabled((os_log_t)getAUSoundIsolationLog(void)::gLog, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315906;
      *(_QWORD *)&buf[4] = "AUSoundIsolation.mm";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 1183;
      *(_WORD *)&buf[18] = 1024;
      *(_DWORD *)&buf[20] = a4;
      *(_WORD *)&buf[24] = 1024;
      *(_DWORD *)&buf[26] = a6;
      _os_log_error_impl(&dword_1B5ED0000, v34, OS_LOG_TYPE_ERROR, "%s:%i a single input ABL and a single output ABL is expected, receiver (%u, %u)!", buf, 0x1Eu);
    }
    return 4294956428;
  }
  v13 = *((_QWORD *)this + 74);
  if (*((_QWORD *)this + 75) != v13)
  {
    AUSoundIsolation::UpdateLocalParamState(this);
    *((_QWORD *)this + 75) = v13;
  }
  if (*((float *)this + 136) != *((float *)this + 143) && !*((_DWORD *)this + 139))
  {
    BypassWithLatencyGraphOutput = AUSoundIsolation::GetBypassWithLatencyGraphOutput(this);
    v15 = *(_QWORD *)(BypassWithLatencyGraphOutput + 64);
    if (*(_QWORD *)(BypassWithLatencyGraphOutput + 72) == v15)
    {
      std::string::basic_string[abi:ne180100]<0>(buf, "/AppleInternal/Library/BuildRoots/c7268dd4-5656-11ef-b8ac-76625042721f/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS18.0.Internal.sdk/System/Library/PrivateFrameworks/AudioToolboxCore.framework/PrivateHeaders/DSPGraph_Box.h");
      std::string::basic_string[abi:ne180100]<0>(v76, "in");
      v66 = (_QWORD *)(BypassWithLatencyGraphOutput + 32);
      if (*(char *)(BypassWithLatencyGraphOutput + 55) < 0)
        v66 = (_QWORD *)*v66;
      DSPGraph::strprintf((DSPGraph *)"Box::in inIndex out of range! box %s has %zu inputs but input %u was requested", v65, v66, (uint64_t)(*(_QWORD *)(BypassWithLatencyGraphOutput + 72) - *(_QWORD *)(BypassWithLatencyGraphOutput + 64)) >> 5, 0);
      result = DSPGraph::ThrowException();
      goto LABEL_81;
    }
    v16 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v15 + 40))(v15);
    v17 = expf(-1.0 / (float)((float)(*((float *)this + 135) * (float)**(double **)(v16 + 120)) / (float)a3));
    v18 = *((float *)this + 137) * v17;
    v19 = *((float *)this + 143);
    v20 = (float)(v19 * (float)(1.0 - v17)) + (float)(v17 * *((float *)this + 136));
    v21.f32[0] = v20 - v19;
    v21.f32[1] = v18;
    v22 = (int8x8_t)vcgt_f32((float32x2_t)vdup_n_s32(0x3DCCCCCDu), vabs_f32(v21));
    v21.f32[0] = v20;
    v23 = vbsl_s8(v22, (int8x8_t)LODWORD(v19), (int8x8_t)v21);
    *((int8x8_t *)this + 68) = v23;
    if (*((_QWORD *)this + 77))
    {
      v24 = *(float *)v23.i32 / 100.0;
      v25 = 1.0 - (float)(*(float *)v23.i32 / 100.0);
      if (v24 <= 0.0)
        v26 = 1.0;
      else
        v26 = v25;
      v27 = DSPGraph::Graph::box();
      (*(void (**)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, float))(*(_QWORD *)v27 + 80))(v27, 0, 0, 0, 0, v26);
      (*(void (**)(uint64_t, _QWORD, _QWORD, uint64_t, _QWORD, float))(*(_QWORD *)v27 + 80))(v27, 0, 0, 1, 0, v24);
    }
  }
  if (*((_BYTE *)this + 528) && *((float *)this + 137) <= 0.0)
  {
    v36 = (unsigned int *)*a5;
    v37 = (uint64_t)*a7;
    mNumberBuffers = (*a5)->mNumberBuffers;
    if (mNumberBuffers == (*a7)->mNumberBuffers && mNumberBuffers != 0)
    {
      v40 = 0;
      v41 = 0;
      do
      {
        v42 = v36[v40 + 3];
        if ((_DWORD)v42 == *(_DWORD *)(v37 + v40 * 4 + 12))
        {
          v43 = *(const void **)&v36[v40 + 4];
          v44 = *(void **)(v37 + v40 * 4 + 16);
          if (v43 != v44)
          {
            memcpy(v44, v43, v42);
            mNumberBuffers = *v36;
          }
        }
        ++v41;
        v40 += 4;
      }
      while (v41 < mNumberBuffers);
    }
  }
  else if (*((_BYTE *)this + 529) || *((_DWORD *)this + 139))
  {
    if (!*((_QWORD *)this + 81))
    {
      if (getAUSoundIsolationLog(void)::onceToken != -1)
        dispatch_once(&getAUSoundIsolationLog(void)::onceToken, &__block_literal_global_40);
      v56 = getAUSoundIsolationLog(void)::gLog;
      if (!os_log_type_enabled((os_log_t)getAUSoundIsolationLog(void)::gLog, OS_LOG_TYPE_ERROR))
        return 4294956429;
      *(_DWORD *)buf = 136315394;
      *(_QWORD *)&buf[4] = "AUSoundIsolation.mm";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 1227;
      v57 = "%s:%i bypass graph not initialized";
      goto LABEL_60;
    }
    v28 = *((_OWORD *)this + 18);
    *(_OWORD *)&buf[8] = *((_OWORD *)this + 17);
    *(_OWORD *)&buf[24] = v28;
    v29 = *((_OWORD *)this + 20);
    v31 = *((_OWORD *)this + 17);
    v30 = *((_OWORD *)this + 18);
    *(_OWORD *)&buf[40] = *((_OWORD *)this + 19);
    *(_OWORD *)&buf[56] = v29;
    *(_OWORD *)&v76[8] = v31;
    *(_OWORD *)&v76[24] = v30;
    *(_DWORD *)buf = a3;
    *(_DWORD *)&buf[4] = 0;
    *(_QWORD *)&buf[72] = *a5;
    *(_QWORD *)v76 = a3;
    *(_OWORD *)&v76[40] = *(_OWORD *)&buf[40];
    *(_OWORD *)&v76[56] = *((_OWORD *)this + 20);
    *(_QWORD *)&v76[72] = *a7;
    v32 = AUSoundIsolation::GetBypassWithLatencyGraphOutput(this);
    v33 = *(_QWORD *)(v32 + 64);
    if (*(_QWORD *)(v32 + 72) == v33)
    {
      std::string::basic_string[abi:ne180100]<0>(v83, "/AppleInternal/Library/BuildRoots/c7268dd4-5656-11ef-b8ac-76625042721f/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS18.0.Internal.sdk/System/Library/PrivateFrameworks/AudioToolboxCore.framework/PrivateHeaders/DSPGraph_Box.h");
      std::string::basic_string[abi:ne180100]<0>(&v69, "in");
      v64 = (_QWORD *)(v32 + 32);
      if (*(char *)(v32 + 55) < 0)
        v64 = (_QWORD *)*v64;
      DSPGraph::strprintf((DSPGraph *)"Box::in inIndex out of range! box %s has %zu inputs but input %u was requested", v63, v64, (uint64_t)(*(_QWORD *)(v32 + 72) - *(_QWORD *)(v32 + 64)) >> 5, 0);
      result = DSPGraph::ThrowException();
      goto LABEL_81;
    }
    (*(void (**)(uint64_t))(*(_QWORD *)v33 + 40))(v33);
    DSPGraph::Graph::preflight();
    if (*(_DWORD *)v76 != a3)
    {
      if (getAUSoundIsolationLog(void)::onceToken != -1)
        dispatch_once(&getAUSoundIsolationLog(void)::onceToken, &__block_literal_global_40);
      v58 = getAUSoundIsolationLog(void)::gLog;
      if (!os_log_type_enabled((os_log_t)getAUSoundIsolationLog(void)::gLog, OS_LOG_TYPE_ERROR))
        return 4294956422;
      *(_DWORD *)v83 = 136315394;
      *(_QWORD *)&v83[4] = "AUSoundIsolation.mm";
      *(_WORD *)&v83[12] = 1024;
      *(_DWORD *)&v83[14] = 1252;
      v59 = "%s:%i bypass preflight gave invalid number of frames to process!";
      v60 = v83;
LABEL_66:
      _os_log_error_impl(&dword_1B5ED0000, v58, OS_LOG_TYPE_ERROR, v59, v60, 0x12u);
      return 4294956422;
    }
    DSPGraph::Graph::processMultiple();
  }
  if ((*((_BYTE *)this + 528) || *((_BYTE *)this + 529)) && *((float *)this + 137) <= 0.0 && !*((_DWORD *)this + 139))
    return 0;
  if (!*((_QWORD *)this + 76))
  {
    if (getAUSoundIsolationLog(void)::onceToken != -1)
      dispatch_once(&getAUSoundIsolationLog(void)::onceToken, &__block_literal_global_40);
    v56 = getAUSoundIsolationLog(void)::gLog;
    if (!os_log_type_enabled((os_log_t)getAUSoundIsolationLog(void)::gLog, OS_LOG_TYPE_ERROR))
      return 4294956429;
    *(_DWORD *)buf = 136315394;
    *(_QWORD *)&buf[4] = "AUSoundIsolation.mm";
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = 1278;
    v57 = "%s:%i processing graph not initialized";
    goto LABEL_60;
  }
  if (!*((_QWORD *)this + 77))
  {
    if (getAUSoundIsolationLog(void)::onceToken != -1)
      dispatch_once(&getAUSoundIsolationLog(void)::onceToken, &__block_literal_global_40);
    v56 = getAUSoundIsolationLog(void)::gLog;
    if (!os_log_type_enabled((os_log_t)getAUSoundIsolationLog(void)::gLog, OS_LOG_TYPE_ERROR))
      return 4294956429;
    *(_DWORD *)buf = 136315394;
    *(_QWORD *)&buf[4] = "AUSoundIsolation.mm";
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = 1283;
    v57 = "%s:%i blending graph not initialized";
LABEL_60:
    _os_log_error_impl(&dword_1B5ED0000, v56, OS_LOG_TYPE_ERROR, v57, buf, 0x12u);
    return 4294956429;
  }
  *(_QWORD *)v76 = a3;
  v45 = *((_OWORD *)this + 18);
  *(_OWORD *)&v76[8] = *((_OWORD *)this + 17);
  *(_OWORD *)&v76[24] = v45;
  v46 = *((_OWORD *)this + 20);
  *(_OWORD *)&v76[40] = *((_OWORD *)this + 19);
  *(_OWORD *)&v76[56] = v46;
  *(_QWORD *)&v76[72] = *a5;
  Element = ausdk::AUScope::SafeGetElement((AUSoundIsolation *)((char *)this + 80), 0);
  v48 = *(_OWORD *)(Element + 96);
  *(_OWORD *)&v75.mSampleRate = *(_OWORD *)(Element + 80);
  *(_OWORD *)&v75.mBytesPerPacket = v48;
  *(_QWORD *)&v75.mBitsPerChannel = *(_QWORD *)(Element + 112);
  ausdk::AUBufferList::PrepareBuffer((AUSoundIsolation *)((char *)this + 656), &v75, a3);
  *(_QWORD *)&v83[72] = 0;
  *(_QWORD *)v83 = a3;
  v49 = *((_OWORD *)this + 18);
  *(_OWORD *)&v83[8] = *((_OWORD *)this + 17);
  *(_OWORD *)&v83[24] = v49;
  v50 = *((_OWORD *)this + 20);
  *(_OWORD *)&v83[40] = *((_OWORD *)this + 19);
  *(_OWORD *)&v83[56] = v50;
  BufferList = ausdk::AUBufferList::GetBufferList((AUSoundIsolation *)((char *)this + 656));
  v52 = *((_OWORD *)this + 18);
  v70 = *((_OWORD *)this + 17);
  v71 = v52;
  v53 = *((_OWORD *)this + 20);
  v72 = *((_OWORD *)this + 19);
  *(_QWORD *)&v83[72] = BufferList;
  v69 = a3;
  v73 = v53;
  v74 = (uint64_t)*a7;
  ProcessingGraphOutput = AUSoundIsolation::GetProcessingGraphOutput(this);
  v55 = *(_QWORD *)(ProcessingGraphOutput + 64);
  if (*(_QWORD *)(ProcessingGraphOutput + 72) != v55)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v55 + 40))(v55);
    DSPGraph::Graph::preflight();
    if ((_DWORD)v69 == a3)
    {
      DSPGraph::Graph::processMultiple();
      *(_OWORD *)&buf[32] = *(_OWORD *)&v76[32];
      *(_OWORD *)&buf[48] = *(_OWORD *)&v76[48];
      *(_OWORD *)buf = *(_OWORD *)v76;
      *(_OWORD *)&buf[16] = *(_OWORD *)&v76[16];
      v79 = *(_OWORD *)&v83[16];
      v80 = *(_OWORD *)&v83[32];
      v81 = *(_OWORD *)&v83[48];
      v82 = *(_OWORD *)&v83[64];
      *(_OWORD *)&buf[64] = *(_OWORD *)&v76[64];
      v78 = *(_OWORD *)v83;
      DSPGraph::Graph::preflight();
      DSPGraph::Graph::processMultiple();
      v61 = *((_DWORD *)this + 139);
      if (v61)
      {
        v35 = 0;
        *((_DWORD *)this + 139) = v61 - 1;
        return v35;
      }
      return 0;
    }
    if (getAUSoundIsolationLog(void)::onceToken != -1)
      dispatch_once(&getAUSoundIsolationLog(void)::onceToken, &__block_literal_global_40);
    v58 = getAUSoundIsolationLog(void)::gLog;
    if (!os_log_type_enabled((os_log_t)getAUSoundIsolationLog(void)::gLog, OS_LOG_TYPE_ERROR))
      return 4294956422;
    *(_DWORD *)buf = 136315394;
    *(_QWORD *)&buf[4] = "AUSoundIsolation.mm";
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = 1319;
    v59 = "%s:%i processing preflight gave invalid number of frames to process!";
    v60 = buf;
    goto LABEL_66;
  }
  std::string::basic_string[abi:ne180100]<0>(buf, "/AppleInternal/Library/BuildRoots/c7268dd4-5656-11ef-b8ac-76625042721f/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS18.0.Internal.sdk/System/Library/PrivateFrameworks/AudioToolboxCore.framework/PrivateHeaders/DSPGraph_Box.h");
  std::string::basic_string[abi:ne180100]<0>(v84, "in");
  v68 = (_QWORD *)(ProcessingGraphOutput + 32);
  if (*(char *)(ProcessingGraphOutput + 55) < 0)
    v68 = (_QWORD *)*v68;
  DSPGraph::strprintf((DSPGraph *)"Box::in inIndex out of range! box %s has %zu inputs but input %u was requested", v67, v68, (uint64_t)(*(_QWORD *)(ProcessingGraphOutput + 72) - *(_QWORD *)(ProcessingGraphOutput + 64)) >> 5, 0);
  result = DSPGraph::ThrowException();
LABEL_81:
  __break(1u);
  return result;
}

void sub_1B633E808(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,void *__p,uint64_t a48,int a49,__int16 a50,char a51,char a52,void *buf,int a54,__int16 a55,__int16 a56,__int16 a57,__int16 a58,__int16 a59,char a60,char a61)
{
  uint64_t v61;

  if (a52 < 0)
    operator delete(__p);
  if (*(char *)(v61 - 121) < 0)
    operator delete(*(void **)(v61 - 144));
  if (a61 < 0)
    operator delete(buf);
  _Unwind_Resume(exception_object);
}

uint64_t AUSoundIsolation::Render(AUSoundIsolation *this, unsigned int *a2, const AudioTimeStamp *a3, uint64_t a4)
{
  ausdk::AUScope *v8;
  ausdk::AUInputElement *Element;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t BufferList;

  v8 = (AUSoundIsolation *)((char *)this + 80);
  Element = (ausdk::AUInputElement *)ausdk::AUScope::SafeGetElement((AUSoundIsolation *)((char *)this + 80), 0);
  result = ausdk::AUInputElement::PullInput(Element, a2, a3, 0, a4);
  if (!(_DWORD)result)
  {
    v11 = ausdk::AUScope::SafeGetElement((AUSoundIsolation *)((char *)this + 128), 0);
    BufferList = ausdk::AUBufferList::GetBufferList((ausdk::AUBufferList *)(v11 + 144));
    v12 = ausdk::AUScope::SafeGetElement(v8, 0);
    v13 = ausdk::AUBufferList::GetBufferList((ausdk::AUBufferList *)(v12 + 144));
    return (*(uint64_t (**)(AUSoundIsolation *, unsigned int *, uint64_t, uint64_t, uint64_t *, uint64_t, uint64_t *))(*(_QWORD *)this + 184))(this, a2, a4, 1, &v13, 1, &BufferList);
  }
  return result;
}

uint64_t AUSoundIsolation::GetParameterList(AUSoundIsolation *this, int a2, unsigned int *a3, unsigned int *a4)
{
  uint64_t result;
  unsigned int v8;

  if (a2)
    return 4294956430;
  if (a3)
    *(_QWORD *)a3 = 0x100000000;
  v8 = 2;
  {
    if (*((_BYTE *)this + 752))
      v8 = 4;
    else
      v8 = 2;
    if (a3)
    {
      if (*((_BYTE *)this + 752))
      {
        *((_QWORD *)a3 + 1) = 0x1762700017626;
        v8 = 4;
      }
    }
  }
  result = 0;
  *a4 = v8;
  return result;
}

uint64_t AUSoundIsolation::GetParameterInfo(AUSoundIsolation *this, int a2, int a3, AudioUnitParameterInfo *buffer)
{
  uint64_t result;
  _anonymous_namespace_ *CString;
  AudioUnitParameterUnit v13;
  int v14;
  AudioUnitParameterOptions v15;
  char IsInternalBuild;

  buffer->flags = 0;
  buffer->unitName = 0;
  if (a2)
    return 4294956430;
  result = 4294956418;
  if (a3 <= 95781)
  {
    if (a3)
    {
      if (a3 != 1)
        return result;
      buffer->cfNameString = CFSTR("Sound to Isolate");
      buffer->flags = 0x8000000;
      CFStringGetCString(CFSTR("Sound to Isolate"), buffer->name, 52, 0x8000100u);
      buffer->unit = kAudioUnitParameterUnit_Indexed;
      __asm { FMOV            V0.2S, #1.0 }
      *(_QWORD *)&buffer->maxValue = _D0;
      if (!_os_feature_enabled_impl() || !*((_BYTE *)this + 564))
      {
        v14 = -1056964608;
        buffer->minValue = 1.0;
        goto LABEL_18;
      }
      buffer->minValue = 0.0;
    }
    else
    {
      buffer->cfNameString = CFSTR("Wet/Dry Mix");
      buffer->flags = 0x8000000;
      CFStringGetCString(CFSTR("Wet/Dry Mix"), buffer->name, 52, 0x8000100u);
      buffer->unit = kAudioUnitParameterUnit_Percent;
      *(_QWORD *)&buffer->minValue = 0x42C80000C2C80000;
      buffer->defaultValue = 100.0;
    }
    v14 = -1073741824;
LABEL_18:
    result = 0;
    buffer->flags |= v14;
    return result;
  }
  if (a3 == 95782)
  {
    buffer->cfNameString = CFSTR("Use Tuning Mode");
    buffer->flags = 0x8000000;
    CString = (_anonymous_namespace_ *)CFStringGetCString(CFSTR("Use Tuning Mode"), buffer->name, 52, 0x8000100u);
    v13 = kAudioUnitParameterUnit_Boolean;
  }
  else
  {
    if (a3 != 95783)
      return result;
    buffer->cfNameString = CFSTR("Tuning Mode");
    buffer->flags = 0x8000000;
    CString = (_anonymous_namespace_ *)CFStringGetCString(CFSTR("Tuning Mode"), buffer->name, 52, 0x8000100u);
    v13 = kAudioUnitParameterUnit_Indexed;
  }
  buffer->unit = v13;
  *(_QWORD *)&buffer->minValue = 0x3F80000000000000;
  v15 = buffer->flags | 0xC1000000;
  buffer->defaultValue = 0.0;
  buffer->flags = v15;
  result = 0;
  if ((IsInternalBuild & 1) == 0)
  {
    v14 = 0x2000;
    goto LABEL_18;
  }
  return result;
}

uint64_t AUSoundIsolation::SaveState(AUSoundIsolation *this, ausdk **a2)
{
  ausdk::AUBase::SaveState(this, a2);
  return 0;
}

uint64_t AUSoundIsolation::RestoreState(OpaqueAudioComponentInstance **this, CFTypeRef cf)
{
  CFTypeID v4;
  uint64_t v5;
  NSObject *v6;
  int v8;
  const char *v9;
  __int16 v10;
  int v11;
  __int16 v12;
  int v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  if (!cf)
    return 4294956445;
  v4 = CFGetTypeID(cf);
  if (v4 != CFDictionaryGetTypeID())
    return 4294956445;
  v5 = ausdk::AUBase::RestoreState(this, cf);
  if ((_DWORD)v5)
  {
    if (getAUSoundIsolationLog(void)::onceToken != -1)
      dispatch_once(&getAUSoundIsolationLog(void)::onceToken, &__block_literal_global_40);
    v6 = getAUSoundIsolationLog(void)::gLog;
    if (os_log_type_enabled((os_log_t)getAUSoundIsolationLog(void)::gLog, OS_LOG_TYPE_ERROR))
    {
      v8 = 136315650;
      v9 = "AUSoundIsolation.mm";
      v10 = 1024;
      v11 = 889;
      v12 = 1024;
      v13 = v5;
      _os_log_error_impl(&dword_1B5ED0000, v6, OS_LOG_TYPE_ERROR, "%s:%i error %i while restoring state", (uint8_t *)&v8, 0x18u);
    }
  }
  this[74] = (OpaqueAudioComponentInstance *)((char *)this[74] + 1);
  return v5;
}

uint64_t AUSoundIsolation::GetParameterValueStrings(AUSoundIsolation *this, int a2, int a3, const __CFArray **a4)
{
  uint64_t result;
  __int128 *v7;
  CFIndex v8;
  const __CFArray *v9;
  __int128 v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  if (!a4)
    return 0;
  if (a2)
    return 4294956430;
  if (a3 == 95783)
  {
    v7 = &xmmword_1E69D34E8;
    goto LABEL_11;
  }
  if (a3 != 1)
    return 0;
  if (!_os_feature_enabled_impl() || !*((_BYTE *)this + 564))
  {
    *(_QWORD *)&v10 = CFSTR("Voice");
    v8 = 1;
    goto LABEL_13;
  }
  v7 = &xmmword_1E69D34D8;
LABEL_11:
  v10 = *v7;
  v8 = 2;
LABEL_13:
  v9 = CFArrayCreate(0, (const void **)&v10, v8, 0);
  result = 0;
  *a4 = v9;
  return result;
}

void AUSoundIsolation::GetLatency(AUSoundIsolation *this)
{
  NSObject *v2;
  int v3;
  const char *v4;
  __int16 v5;
  int v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  if (getAUSoundIsolationLog(void)::onceToken != -1)
    dispatch_once(&getAUSoundIsolationLog(void)::onceToken, &__block_literal_global_40);
  v2 = getAUSoundIsolationLog(void)::gLog;
  if (os_log_type_enabled((os_log_t)getAUSoundIsolationLog(void)::gLog, OS_LOG_TYPE_DEBUG))
  {
    v3 = 136315394;
    v4 = "AUSoundIsolation.mm";
    v5 = 1024;
    v6 = 447;
    _os_log_debug_impl(&dword_1B5ED0000, v2, OS_LOG_TYPE_DEBUG, "%s:%i AU latency is equal to the processing graph latency", (uint8_t *)&v3, 0x12u);
  }
  AUSoundIsolation::GetProcessingLatency(this);
}

void AUSoundIsolation::GetTailTime(AUSoundIsolation *this)
{
  NSObject *v2;
  int v3;
  const char *v4;
  __int16 v5;
  int v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  if (getAUSoundIsolationLog(void)::onceToken != -1)
    dispatch_once(&getAUSoundIsolationLog(void)::onceToken, &__block_literal_global_40);
  v2 = getAUSoundIsolationLog(void)::gLog;
  if (os_log_type_enabled((os_log_t)getAUSoundIsolationLog(void)::gLog, OS_LOG_TYPE_DEBUG))
  {
    v3 = 136315394;
    v4 = "AUSoundIsolation.mm";
    v5 = 1024;
    v6 = 456;
    _os_log_debug_impl(&dword_1B5ED0000, v2, OS_LOG_TYPE_DEBUG, "%s:%i Use processing graph latency as an estimate of the tail time", (uint8_t *)&v3, 0x12u);
  }
  AUSoundIsolation::GetProcessingLatency(this);
}

uint64_t AUSoundIsolation::SupportsTail(AUSoundIsolation *this)
{
  return 1;
}

BOOL AUSoundIsolation::StreamFormatWritable(AUSoundIsolation *this)
{
  return *((_BYTE *)this + 17) == 0;
}

uint64_t AUSoundIsolation::SupportedNumChannels(AUSoundIsolation *this, const AUChannelInfo **a2)
{
  if (a2)
    *a2 = (const AUChannelInfo *)&AUSoundIsolation::SupportedNumChannels(AUChannelInfo const**)::sSupportedChannelConfigs;
  return 1;
}

uint64_t AUSoundIsolation::ValidFormat(AUSoundIsolation *this, int a2, int a3, const AudioStreamBasicDescription *a4)
{
  __int128 v4;
  uint64_t result;
  _OWORD v6[2];
  uint64_t v7;
  int v8;

  if (a2 != 2 && a2 != 1)
    return 0;
  if (a3)
    return 0;
  v4 = *(_OWORD *)&a4->mBytesPerPacket;
  v6[0] = *(_OWORD *)&a4->mSampleRate;
  v6[1] = v4;
  v7 = *(_QWORD *)&a4->mBitsPerChannel;
  if (DWORD2(v6[0]) != 1819304813)
    return 0;
  v8 = 0;
  LODWORD(result) = CAStreamBasicDescription::IdentifyCommonPCMFormat(v6, &v8, 0);
  if (v8 == 1)
    return result;
  else
    return 0;
}

void AUSoundIsolation::GetProcessingLatency(AUSoundIsolation *this)
{
  DSPGraph::Box *ProcessingGraphOutput;
  DSPGraph::Box *v2;
  unsigned int v3;
  uint64_t v4;
  double v5;
  double v6;
  double v7;
  NSObject *v8;
  NSObject *v9;
  NSObject *v10;
  const char *v11;
  _QWORD *v12;
  _QWORD v13[3];
  uint8_t buf[4];
  const char *v15;
  __int16 v16;
  int v17;
  __int16 v18;
  double v19;
  __int16 v20;
  int v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  ProcessingGraphOutput = (DSPGraph::Box *)AUSoundIsolation::GetProcessingGraphOutput(this);
  if (ProcessingGraphOutput)
  {
    v2 = ProcessingGraphOutput;
    v3 = DSPGraph::Box::totalLatencyInSamples(ProcessingGraphOutput);
    v4 = *((_QWORD *)v2 + 8);
    if (*((_QWORD *)v2 + 9) == v4)
    {
      std::string::basic_string[abi:ne180100]<0>(buf, "/AppleInternal/Library/BuildRoots/c7268dd4-5656-11ef-b8ac-76625042721f/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS18.0.Internal.sdk/System/Library/PrivateFrameworks/AudioToolboxCore.framework/PrivateHeaders/DSPGraph_Box.h");
      std::string::basic_string[abi:ne180100]<0>(v13, "in");
      v12 = (_QWORD *)((char *)v2 + 32);
      if (*((char *)v2 + 55) < 0)
        v12 = (_QWORD *)*v12;
      DSPGraph::strprintf((DSPGraph *)"Box::in inIndex out of range! box %s has %zu inputs but input %u was requested", v11, v12, (uint64_t)(*((_QWORD *)v2 + 9) - *((_QWORD *)v2 + 8)) >> 5, 0);
      DSPGraph::ThrowException();
      __break(1u);
    }
    else
    {
      v5 = (double)v3;
      v6 = (double)**(double **)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 40))(v4) + 120);
      if (getAUSoundIsolationLog(void)::onceToken != -1)
        dispatch_once(&getAUSoundIsolationLog(void)::onceToken, &__block_literal_global_40);
      v7 = v5 / v6;
      v8 = (id)getAUSoundIsolationLog(void)::gLog;
      if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 136315906;
        v15 = "AUSoundIsolation.mm";
        v16 = 1024;
        v17 = 429;
        v18 = 2048;
        v19 = v7;
        v20 = 1024;
        v21 = DSPGraph::Box::totalLatencyInSamples(v2);
        _os_log_debug_impl(&dword_1B5ED0000, v8, OS_LOG_TYPE_DEBUG, "%s:%i processing latency is %f seconds (%u samples)", buf, 0x22u);
      }

      if (getAUSoundIsolationLog(void)::onceToken != -1)
        dispatch_once(&getAUSoundIsolationLog(void)::onceToken, &__block_literal_global_40);
      v9 = getAUSoundIsolationLog(void)::gLog;
      if (os_log_type_enabled((os_log_t)getAUSoundIsolationLog(void)::gLog, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 136315650;
        v15 = "AUSoundIsolation.mm";
        v16 = 1024;
        v17 = 430;
        v18 = 2048;
        v19 = v7;
        _os_log_impl(&dword_1B5ED0000, v9, OS_LOG_TYPE_INFO, "%s:%i total latency is %f seconds", buf, 0x1Cu);
      }
    }
  }
  else
  {
    if (getAUSoundIsolationLog(void)::onceToken != -1)
      dispatch_once(&getAUSoundIsolationLog(void)::onceToken, &__block_literal_global_40);
    v10 = getAUSoundIsolationLog(void)::gLog;
    if (os_log_type_enabled((os_log_t)getAUSoundIsolationLog(void)::gLog, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      v15 = "AUSoundIsolation.mm";
      v16 = 1024;
      v17 = 434;
      _os_log_error_impl(&dword_1B5ED0000, v10, OS_LOG_TYPE_ERROR, "%s:%i The host requested latency before the real value is available!", buf, 0x12u);
    }
  }
}

void sub_1B633FA30(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  if (a18 < 0)
    operator delete(__p);
  if (a24 < 0)
    operator delete(a19);
  if (a30 < 0)
    operator delete(a25);
  _Unwind_Resume(exception_object);
}

uint64_t AUSoundIsolation::GetProcessingGraphOutput(AUSoundIsolation *this)
{
  DSPGraph::Graph *v2;

  v2 = (DSPGraph::Graph *)*((_QWORD *)this + 76);
  if (v2 && DSPGraph::Graph::out(v2))
    return DSPGraph::Graph::out(*((DSPGraph::Graph **)this + 76));
  else
    return 0;
}

void ___Z22getAUSoundIsolationLogv_block_invoke()
{
  os_log_t v0;
  void *v1;

  v0 = os_log_create("com.apple.coreaudio", "AUSoundIsolation");
  v1 = (void *)getAUSoundIsolationLog(void)::gLog;
  getAUSoundIsolationLog(void)::gLog = (uint64_t)v0;

}

uint64_t `anonymous namespace'::IsInternalBuild(_anonymous_namespace_ *this)
{
  unsigned __int8 v1;

  if ((v1 & 1) == 0
  {
  }
}

void sub_1B633FB60(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void AUSoundIsolation::UpdateLocalParamState(AUSoundIsolation *this)
{
  uint64_t v2;
  ausdk::AUElement *v3;
  ausdk::AUElement **v4;
  uint64_t v5;
  ausdk::AUElement *v6;
  ausdk::AUElement **v7;
  uint64_t v8;
  ausdk::AUElement *v9;
  ausdk::AUElement **v10;
  uint64_t v11;
  ausdk::AUElement *v12;
  ausdk::AUElement **v13;
  int Parameter;
  int v15;
  NSObject *v16;
  NSObject *v17;
  int v18;
  int v19;
  int v20;
  NSObject *v21;
  NSObject *v22;
  uint64_t *v23;
  int v24;
  int v25;
  uint8_t buf[4];
  const char *v27;
  __int16 v28;
  int v29;
  __int16 v30;
  int v31;
  __int16 v32;
  int v33;
  __int16 v34;
  int v35;
  __int16 v36;
  int v37;
  char v38;
  char v39;
  char v40;
  char v41;
  char v42;
  int v43;
  char v44;
  int v45;
  char v46;
  __int16 v47;
  int v48;
  char v49;
  int v50;
  char v51;
  uint64_t v52;

  v52 = *MEMORY[0x1E0C80C00];
  v2 = *((_QWORD *)this + 9);
  if (v2)
  {
    v3 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v2 + 32))(v2, 0);
  }
  else
  {
    v4 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v4)
      v3 = 0;
    else
      v3 = *v4;
  }
  *((float *)this + 143) = ausdk::AUElement::GetParameter(v3, 0);
  v5 = *((_QWORD *)this + 9);
  if (v5)
  {
    v6 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v5 + 32))(v5, 0);
  }
  else
  {
    v7 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v7)
      v6 = 0;
    else
      v6 = *v7;
  }
  *((_DWORD *)this + 144) = ausdk::AUElement::GetParameter(v6, 1u);
  v8 = *((_QWORD *)this + 9);
  if (v8)
  {
    v9 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v8 + 32))(v8, 0);
  }
  else
  {
    v10 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v10)
      v9 = 0;
    else
      v9 = *v10;
  }
  *((_BYTE *)this + 580) = ausdk::AUElement::GetParameter(v9, 0x17626u) != 0.0;
  v11 = *((_QWORD *)this + 9);
  if (v11)
  {
    v12 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v11 + 32))(v11, 0);
  }
  else
  {
    v13 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v13)
      v12 = 0;
    else
      v12 = *v13;
  }
  Parameter = (int)ausdk::AUElement::GetParameter(v12, 0x17627u);
  if (*((_DWORD *)this + 134))
  {
    if (*((_BYTE *)this + 580))
      v15 = Parameter;
    else
      v15 = 1;
  }
  else
  {
    if (getAUSoundIsolationLog(void)::onceToken != -1)
      dispatch_once(&getAUSoundIsolationLog(void)::onceToken, &__block_literal_global_40);
    v16 = getAUSoundIsolationLog(void)::gLog;
    if (os_log_type_enabled((os_log_t)getAUSoundIsolationLog(void)::gLog, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 136315394;
      v27 = "AUSoundIsolation.mm";
      v28 = 1024;
      v29 = 1110;
      _os_log_debug_impl(&dword_1B5ED0000, v16, OS_LOG_TYPE_DEBUG, "%s:%i Denoise is Disabled - tuning mode reverts to Single Channel", buf, 0x12u);
    }
    v15 = 0;
  }
  if (*((_QWORD *)this + 76))
  {
    if (v15 != *((_DWORD *)this + 146) || *((_DWORD *)this + 144) != *((_DWORD *)this + 142))
    {
      if (getAUSoundIsolationLog(void)::onceToken != -1)
        dispatch_once(&getAUSoundIsolationLog(void)::onceToken, &__block_literal_global_40);
      v17 = getAUSoundIsolationLog(void)::gLog;
      if (os_log_type_enabled((os_log_t)getAUSoundIsolationLog(void)::gLog, OS_LOG_TYPE_INFO))
      {
        v18 = *((_DWORD *)this + 146);
        v19 = *((_DWORD *)this + 142);
        v20 = *((_DWORD *)this + 144);
        *(_DWORD *)buf = 136316418;
        v27 = "AUSoundIsolation.mm";
        v28 = 1024;
        v29 = 1123;
        v30 = 1024;
        v31 = v18;
        v32 = 1024;
        v33 = v15;
        v34 = 1024;
        v35 = v19;
        v36 = 1024;
        v37 = v20;
        _os_log_impl(&dword_1B5ED0000, v17, OS_LOG_TYPE_INFO, "%s:%i processing graphs already created and tuning mode/Sound to Isolate mode changed from %u/%u to %u/%u ", buf, 0x2Au);
        if (getAUSoundIsolationLog(void)::onceToken != -1)
          dispatch_once(&getAUSoundIsolationLog(void)::onceToken, &__block_literal_global_40);
      }
      v21 = getAUSoundIsolationLog(void)::gLog;
      if (os_log_type_enabled((os_log_t)getAUSoundIsolationLog(void)::gLog, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 136315394;
        v27 = "AUSoundIsolation.mm";
        v28 = 1024;
        v29 = 1124;
        _os_log_impl(&dword_1B5ED0000, v21, OS_LOG_TYPE_INFO, "%s:%i processing graphs need to be re-created", buf, 0x12u);
      }
      *((_DWORD *)this + 146) = v15;
      *((_DWORD *)this + 142) = *((_DWORD *)this + 144);
      AUSoundIsolation::CreateProcessingGraphs(this);
    }
  }
  else
  {
    *((_DWORD *)this + 146) = v15;
    if (getAUSoundIsolationLog(void)::onceToken != -1)
      dispatch_once(&getAUSoundIsolationLog(void)::onceToken, &__block_literal_global_40);
    v22 = getAUSoundIsolationLog(void)::gLog;
    if (os_log_type_enabled((os_log_t)getAUSoundIsolationLog(void)::gLog, OS_LOG_TYPE_DEBUG))
    {
      v24 = *((_DWORD *)this + 146);
      *(_DWORD *)buf = 136315650;
      v27 = "AUSoundIsolation.mm";
      v28 = 1024;
      v29 = 1119;
      v30 = 1024;
      v31 = v24;
      _os_log_debug_impl(&dword_1B5ED0000, v22, OS_LOG_TYPE_DEBUG, "%s:%i tuning mode set to %u", buf, 0x18u);
    }
  }
  buf[0] = 0;
  LOBYTE(v27) = 0;
  BYTE4(v27) = 0;
  v38 = 0;
  v39 = 0;
  v40 = 0;
  v41 = 0;
  v42 = 0;
  v43 = *((_DWORD *)this + 143);
  v44 = 1;
  v45 = *((_DWORD *)this + 144);
  v46 = 1;
  v47 = *((unsigned __int8 *)this + 580) | 0x100;
  v48 = Parameter;
  v49 = 1;
  v50 = v15;
  v51 = 1;
  v23 = (uint64_t *)*((_QWORD *)this + 92);
  v25 = 4;
  AU::SoundIsolation::MetricsReporter::reportAsync(v23, buf, &v25);
}

uint64_t AUSoundIsolation::GetBypassWithLatencyGraphOutput(AUSoundIsolation *this)
{
  DSPGraph::Graph *v2;

  v2 = (DSPGraph::Graph *)*((_QWORD *)this + 81);
  if (v2 && DSPGraph::Graph::out(v2))
    return DSPGraph::Graph::out(*((DSPGraph::Graph **)this + 81));
  else
    return 0;
}

id getAUSoundIsolationLog(void)
{
  if (getAUSoundIsolationLog(void)::onceToken != -1)
    dispatch_once(&getAUSoundIsolationLog(void)::onceToken, &__block_literal_global_40);
  return (id)getAUSoundIsolationLog(void)::gLog;
}

void `anonymous namespace'::convertExceptionToString(_QWORD *a1, const std::error_code *a2)
{
  uint64_t *v4;
  char v5;
  uint64_t *v6;
  uint64_t *val;
  const std::error_code *v8;
  uint64_t *v9;
  uint64_t *v10;
  unsigned __int8 v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t *v14;
  char v15;
  uint64_t *v16;
  uint64_t *v17;
  uint64_t *v18;
  char v19;
  uint64_t *v20;
  std::string v21;
  _BYTE v22[8];
  uint64_t *v23;
  _BYTE v24[8];
  uint64_t *v25;
  unsigned __int8 v26[8];
  uint64_t *v27;
  _BYTE v28[8];
  uint64_t *v29;
  unsigned __int8 v30[8];
  uint64_t *v31;

  v30[0] = 0;
  v31 = 0;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v30);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v30);
  v21.__r_.__value_.__r.__words[0] = (*(uint64_t (**)(const std::error_code *))(*(_QWORD *)&a2->__val_ + 16))(a2);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const*,char const*,0>((uint64_t)v28, &v21.__r_.__value_.__l.__data_);
  v4 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v30, "what");
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v28);
  v5 = *(_BYTE *)v4;
  *(_BYTE *)v4 = v28[0];
  v28[0] = v5;
  v6 = (uint64_t *)v4[1];
  v4[1] = (uint64_t)v29;
  v29 = v6;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v4);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v28);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v29, v28[0]);
  v8 = a2 + 1;
  val = (uint64_t *)a2[1].__val_;
  v26[0] = 5;
  v27 = val;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v26);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v26);
  v9 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v30, "code");
  v10 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>((unsigned __int8 *)v9, "value");
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v26);
  v11 = *(_BYTE *)v10;
  *(_BYTE *)v10 = v26[0];
  v26[0] = v11;
  v12 = (uint64_t *)v10[1];
  v10[1] = (uint64_t)v27;
  v27 = v12;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v10);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v26);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v27, v26[0]);
  v21.__r_.__value_.__r.__words[0] = ((uint64_t (*)(const std::error_category *))a2[1].__cat_->name)(a2[1].__cat_);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const*,char const*,0>((uint64_t)v24, &v21.__r_.__value_.__l.__data_);
  v13 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v30, "code");
  v14 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>((unsigned __int8 *)v13, "category");
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v24);
  v15 = *(_BYTE *)v14;
  *(_BYTE *)v14 = v24[0];
  v24[0] = v15;
  v16 = (uint64_t *)v14[1];
  v14[1] = (uint64_t)v25;
  v25 = v16;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v14);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v24);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v25, v24[0]);
  std::error_code::message(&v21, v8);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<std::string,std::string,0>((uint64_t)v22, (uint64_t)&v21);
  v17 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v30, "code");
  v18 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>((unsigned __int8 *)v17, "message");
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v22);
  v19 = *(_BYTE *)v18;
  *(_BYTE *)v18 = v22[0];
  v22[0] = v19;
  v20 = (uint64_t *)v18[1];
  v18[1] = (uint64_t)v23;
  v23 = v20;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v18);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v22);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v23, v22[0]);
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v21.__r_.__value_.__l.__data_);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::dump((uint64_t)v30, 4, 0x20u, 0, 0, a1);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v30);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v31, v30[0]);
}

uint64_t AUSoundIsolation::CreateProcessingGraphs(AUSoundIsolation *this)
{
  uint64_t Element;
  double v3;
  unsigned int v4;
  unsigned int v5;
  const __CFNumber *v6;
  int v7;
  const __CFNumber *v8;
  int v9;
  const __CFNumber *v10;
  int v11;
  const __CFNumber *v12;
  int v13;
  void *v14;
  NSObject *v15;
  const __CFBoolean *v16;
  int v17;
  NSObject *v18;
  uint64_t v19;
  unsigned int v20;
  CFNumberRef v21;
  NSObject *v22;
  int v23;
  const __CFNumber *v24;
  NSObject *v25;
  NSObject *v26;
  BOOL v27;
  int v28;
  NSObject *v29;
  const char *v30;
  NSObject *v31;
  NSObject *v32;
  int v33;
  uint64_t v34;
  const char *v35;
  NSObject *v36;
  uint32_t v37;
  uint64_t v38;
  NSObject *v39;
  uint64_t v40;
  _QWORD *v41;
  NSObject *v42;
  NSObject *v43;
  unsigned int v44;
  int v45;
  int v46;
  unsigned int v47;
  double v48;
  void **v49;
  void **v50;
  std::string::size_type *p_size;
  std::string *p_str;
  char *v53;
  std::string *v54;
  uint64_t v55;
  std::string::size_type size;
  std::string::size_type v57;
  std::string *v58;
  std::string *v59;
  NSObject *v60;
  NSObject *v61;
  uint64_t v62;
  size_t v63;
  std::string *v64;
  __int128 *p_s;
  char *v66;
  size_t v67;
  void **v68;
  __int128 *v69;
  size_t v70;
  void **v71;
  __int128 *v72;
  size_t v73;
  void **v74;
  __int128 *v75;
  NSObject *v76;
  size_t v77;
  void **v78;
  std::string *v79;
  uint64_t v80;
  size_t v81;
  void **v82;
  std::string *v83;
  size_t v84;
  void **v85;
  std::string *v86;
  size_t v87;
  std::string *v88;
  std::string *v89;
  NSObject *v90;
  __int128 v91;
  int v92;
  NSObject *v93;
  std::string *v94;
  std::string *v95;
  std::string::value_type *v96;
  unsigned int v97;
  char v98;
  std::string::size_type v99;
  uint64_t v100;
  std::string *v101;
  std::string *v102;
  unsigned int v103;
  char *v104;
  std::string *v105;
  NSObject *v106;
  uint64_t v107;
  NSObject *v108;
  uint64_t v109;
  NSObject *v110;
  uint64_t ProcessingGraphOutput;
  uint64_t v112;
  double v113;
  _BOOL4 v114;
  NSObject *v115;
  NSObject *v116;
  NSObject *v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  NSObject *v121;
  NSObject *v122;
  uint64_t *v123;
  uint64_t *v124;
  uint64_t v125;
  uint64_t v126;
  int v127;
  std::string::size_type v128;
  const std::string::value_type *v129;
  std::string *v130;
  __int128 v131;
  NSObject *v132;
  std::string *v133;
  CFIndex v134;
  NSObject *v135;
  uint64_t *v136;
  std::string *v137;
  uint64_t *v138;
  const __CFString *v139;
  std::string *v140;
  NSObject *v141;
  NSObject *v142;
  const __CFDictionary **v143;
  unsigned int v144;
  NSObject *v145;
  int v146;
  NSObject *v147;
  std::string *v148;
  DSPGraph::Box *v149;
  DSPGraph::Box *v150;
  uint64_t v151;
  char v152;
  NSObject *v153;
  NSObject *v154;
  NSObject *v155;
  uint64_t v156;
  NSObject *v157;
  int v158;
  NSObject *v159;
  uint64_t v160;
  uint64_t v161;
  NSObject *v162;
  NSObject *v163;
  NSObject *v164;
  uint64_t v165;
  _QWORD *v166;
  NSObject *v167;
  char v168;
  uint64_t v169;
  char v170;
  std::string *v171;
  std::string::size_type v172;
  char v173;
  uint64_t v174;
  std::string *v175;
  std::string::size_type v176;
  char v177;
  std::string *v178;
  int v179;
  unsigned int v180;
  char v181;
  char v182;
  char v183;
  unsigned int v184;
  char v185;
  std::string *v186;
  __int128 v187;
  NSObject *v188;
  uint64_t v189;
  uint64_t v190;
  NSObject *v191;
  NSObject *v192;
  DSPGraph::Graph *v193;
  uint64_t v194;
  double v195;
  _BOOL4 v196;
  NSObject *v197;
  NSObject *v198;
  DSPGraph::Box *v199;
  unsigned int v200;
  NSObject *v201;
  __int128 v202;
  uint64_t v203;
  uint64_t v204;
  NSObject *v205;
  NSObject *v206;
  float v207;
  uint64_t v208;
  uint64_t v209;
  float v210;
  __n128 v211;
  NSObject *v212;
  NSObject *v213;
  NSObject *v214;
  uint64_t v215;
  _QWORD *v216;
  NSObject *v217;
  char *v218;
  char *v219;
  NSObject *v220;
  uint64_t v221;
  NSObject *v222;
  NSObject *v223;
  uint64_t v224;
  unsigned int v225;
  _BOOL4 v226;
  NSObject *v227;
  NSObject *v228;
  DSPGraph::Box *v229;
  unsigned int v230;
  NSObject *v231;
  uint64_t v232;
  NSObject *v233;
  uint64_t result;
  _BYTE *v235;
  _BYTE *v236;
  _BYTE *v237;
  std::string *v238;
  std::string *v239;
  int v240;
  uint64_t v241;
  std::string *v242;
  std::string *v243;
  int v244;
  _QWORD *v245;
  _BYTE *v246;
  std::string *v247;
  std::runtime_error *exception;
  std::runtime_error *v249;
  std::runtime_error *v250;
  std::runtime_error *v251;
  std::runtime_error *v252;
  std::runtime_error *v253;
  std::runtime_error *v254;
  std::runtime_error *v255;
  std::runtime_error *v256;
  std::runtime_error *v257;
  std::runtime_error *v258;
  const char *v259;
  _QWORD *v260;
  int v261;
  int v262;
  AUSoundIsolation *v263;
  __CFDictionary *v264;
  unsigned int v265;
  DSPGraph *v266;
  unsigned int v267;
  int v268;
  unsigned int v269;
  uint64_t v270;
  int v271;
  uint64_t v272;
  CFTypeRef cf;
  CFMutableDictionaryRef theDict;
  CFTypeRef v275;
  std::string v276;
  _DWORD v277[2];
  std::string v278;
  void *v279;
  char v280;
  std::string v281;
  std::string v282;
  __int128 v283;
  int v284;
  std::string __str;
  int v286;
  int v287;
  uint64_t v288;
  __int128 v289;
  int v290;
  void *v291[2];
  char v292;
  void *v293[2];
  char v294;
  void *v295[2];
  char v296;
  std::string v297;
  std::vector<std::string> buf;
  __int128 v299;
  _QWORD v300[4];
  std::vector<std::string> v301;
  std::string v302;
  std::string v303;
  __int128 __s;
  uint64_t v305;
  __int128 v306;
  uint64_t v307;
  _QWORD v308[2];
  char v309;
  void *__p[4];
  _BYTE v311[40];
  int v312;
  _BYTE v313[30];
  std::string *v314;
  __int16 v315;
  int v316;
  _BYTE v317[40];
  _QWORD v318[7];

  v318[4] = *MEMORY[0x1E0C80C00];
  Element = ausdk::AUScope::SafeGetElement((AUSoundIsolation *)((char *)this + 80), 0);
  v3 = *(double *)(Element + 80);
  v266 = *(DSPGraph **)(Element + 96);
  v267 = *(_DWORD *)(Element + 104);
  v268 = *(_DWORD *)(Element + 88);
  v270 = *(_QWORD *)(Element + 112);
  v271 = *(_DWORD *)(Element + 92);
  if ((v271 & 0x20) != 0)
    v4 = *(_DWORD *)(Element + 108);
  else
    v4 = 1;
  v269 = *(_DWORD *)(Element + 108);
  if ((v271 & 0x20) != 0)
    v5 = 1;
  else
    v5 = *(_DWORD *)(Element + 108);
  if (v4 <= v5)
    v4 = v5;
  v265 = v4;
  AUSoundIsolation::GetTuningDictionaryRef((applesauce::CF::DictionaryRef *)&v275, (uint64_t)this, 0);
  if (!v275)
  {
    if (getAUSoundIsolationLog(void)::onceToken != -1)
      dispatch_once(&getAUSoundIsolationLog(void)::onceToken, &__block_literal_global_40);
    v18 = getAUSoundIsolationLog(void)::gLog;
    if (os_log_type_enabled((os_log_t)getAUSoundIsolationLog(void)::gLog, OS_LOG_TYPE_ERROR))
    {
      LODWORD(buf.__begin_) = 136315394;
      *(std::vector<std::string>::pointer *)((char *)&buf.__begin_ + 4) = (std::vector<std::string>::pointer)"AUSoundIsolation.mm";
      WORD2(buf.__end_) = 1024;
      *(_DWORD *)((char *)&buf.__end_ + 6) = 1377;
      _os_log_error_impl(&dword_1B5ED0000, v18, OS_LOG_TYPE_ERROR, "%s:%i failed to load nnet plist", (uint8_t *)&buf, 0x12u);
    }
    v19 = 4294956421;
    goto LABEL_671;
  }
  v6 = (const __CFNumber *)applesauce::CF::details::at_key<char const(&)[11]>((const __CFDictionary *)v275, "SampleRate");
  if (!v6)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not find item");
  }
  v7 = applesauce::CF::convert_to<int,0>(v6);
  if (!v275)
  {
    v249 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v249, "Could not construct");
    goto LABEL_712;
  }
  v8 = (const __CFNumber *)applesauce::CF::details::at_key<char const(&)[10]>((const __CFDictionary *)v275, "BlockSize");
  if (!v8)
  {
    v249 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v249, "Could not find item");
LABEL_712:
  }
  v9 = applesauce::CF::convert_to<int,0>(v8);
  if (!v275)
  {
    v250 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v250, "Could not construct");
    goto LABEL_715;
  }
  v10 = (const __CFNumber *)applesauce::CF::details::at_key<char const(&)[22]>((const __CFDictionary *)v275, "NumberOfInputChannels");
  if (!v10)
  {
    v250 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v250, "Could not find item");
LABEL_715:
  }
  v11 = applesauce::CF::convert_to<int,0>(v10);
  if (!v275)
  {
    v251 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v251, "Could not construct");
    goto LABEL_718;
  }
  v12 = (const __CFNumber *)applesauce::CF::details::at_key<char const(&)[23]>((const __CFDictionary *)v275, "NumberOfOutputChannels");
  if (!v12)
  {
    v251 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v251, "Could not find item");
LABEL_718:
  }
  v13 = applesauce::CF::convert_to<int,0>(v12);
  v14 = (id)v275;
  v264 = (__CFDictionary *)objc_msgSend(v14, "mutableCopy");

  theDict = v264;
  if (getAUSoundIsolationLog(void)::onceToken != -1)
    dispatch_once(&getAUSoundIsolationLog(void)::onceToken, &__block_literal_global_40);
  v15 = (id)getAUSoundIsolationLog(void)::gLog;
  if (os_log_type_enabled(v15, OS_LOG_TYPE_INFO))
  {
    LODWORD(buf.__begin_) = 136315394;
    *(std::vector<std::string>::pointer *)((char *)&buf.__begin_ + 4) = (std::vector<std::string>::pointer)"AUSoundIsolation.mm";
    WORD2(buf.__end_) = 1024;
    *(_DWORD *)((char *)&buf.__end_ + 6) = 1393;
    _os_log_impl(&dword_1B5ED0000, v15, OS_LOG_TYPE_INFO, "%s:%i Loading batch size from plist.", (uint8_t *)&buf, 0x12u);
  }

  if (!v275)
  {
    v252 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v252, "Could not construct");
  }
  if (applesauce::CF::details::has_key<char const(&)[17]>((_BOOL8)v275, "DynamicBatchSize"))
  {
    if (!v275)
    {
      v256 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v256, "Could not construct");
    }
    v16 = (const __CFBoolean *)applesauce::CF::details::at_key<char const(&)[17]>((const __CFDictionary *)v275, "DynamicBatchSize");
    if (v16)
    {
      LOWORD(v16) = applesauce::CF::convert_as<BOOL,0>(v16);
      v17 = BYTE1(v16);
    }
    else
    {
      v17 = 0;
    }
    v20 = v16 | (v17 << 8);
    if (v20 <= 0x100)
      LOBYTE(v20) = 0;
    if ((_BYTE)v20)
    {
      LODWORD(buf.__begin_) = v265;
      v21 = CFNumberCreate(0, kCFNumberIntType, &buf);
      *(_QWORD *)v313 = v21;
      if (!v21)
      {
        v258 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v258, "Could not construct");
      }
      CFDictionarySetValue(theDict, CFSTR("BatchSize"), v21);
      if (getAUSoundIsolationLog(void)::onceToken != -1)
        dispatch_once(&getAUSoundIsolationLog(void)::onceToken, &__block_literal_global_40);
      v22 = (id)getAUSoundIsolationLog(void)::gLog;
      if (os_log_type_enabled(v22, OS_LOG_TYPE_INFO))
      {
        LODWORD(buf.__begin_) = 136315650;
        *(std::vector<std::string>::pointer *)((char *)&buf.__begin_ + 4) = (std::vector<std::string>::pointer)"AUSoundIsolation.mm";
        WORD2(buf.__end_) = 1024;
        *(_DWORD *)((char *)&buf.__end_ + 6) = 1410;
        WORD1(buf.__end_cap_.__value_) = 1024;
        HIDWORD(buf.__end_cap_.__value_) = v265;
        _os_log_impl(&dword_1B5ED0000, v22, OS_LOG_TYPE_INFO, "%s:%i Set up Dynamic Batch Size (batch size = %u)", (uint8_t *)&buf, 0x18u);
      }

      CFRelease(v21);
      v23 = v265;
      goto LABEL_55;
    }
  }
  if (!v275)
  {
    v255 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v255, "Could not construct");
  }
  if (applesauce::CF::details::has_key<char const(&)[10]>((const __CFDictionary *)v275, "BatchSize"))
  {
    if (v275)
    {
      v24 = (const __CFNumber *)applesauce::CF::details::at_key<char const(&)[10]>((const __CFDictionary *)v275, "BatchSize");
      if (v24)
      {
        v23 = applesauce::CF::convert_to<unsigned int,0>(v24);
        if (getAUSoundIsolationLog(void)::onceToken != -1)
          dispatch_once(&getAUSoundIsolationLog(void)::onceToken, &__block_literal_global_40);
        v25 = (id)getAUSoundIsolationLog(void)::gLog;
        if (os_log_type_enabled(v25, OS_LOG_TYPE_INFO))
        {
          LODWORD(buf.__begin_) = 136315650;
          *(std::vector<std::string>::pointer *)((char *)&buf.__begin_ + 4) = (std::vector<std::string>::pointer)"AUSoundIsolation.mm";
          WORD2(buf.__end_) = 1024;
          *(_DWORD *)((char *)&buf.__end_ + 6) = 1401;
          WORD1(buf.__end_cap_.__value_) = 1024;
          HIDWORD(buf.__end_cap_.__value_) = v23;
          _os_log_impl(&dword_1B5ED0000, v25, OS_LOG_TYPE_INFO, "%s:%i Successfully retrieved batch size (%u).", (uint8_t *)&buf, 0x18u);
        }

        goto LABEL_55;
      }
      v257 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v257, "Could not find item");
    }
    else
    {
      v257 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v257, "Could not construct");
    }
  }
  if (getAUSoundIsolationLog(void)::onceToken != -1)
    dispatch_once(&getAUSoundIsolationLog(void)::onceToken, &__block_literal_global_40);
  v26 = (id)getAUSoundIsolationLog(void)::gLog;
  if (os_log_type_enabled(v26, OS_LOG_TYPE_INFO))
  {
    LODWORD(buf.__begin_) = 136315394;
    *(std::vector<std::string>::pointer *)((char *)&buf.__begin_ + 4) = (std::vector<std::string>::pointer)"AUSoundIsolation.mm";
    WORD2(buf.__end_) = 1024;
    *(_DWORD *)((char *)&buf.__end_ + 6) = 1403;
    _os_log_impl(&dword_1B5ED0000, v26, OS_LOG_TYPE_INFO, "%s:%i Failed to retrieve batch size, default to 1.", (uint8_t *)&buf, 0x12u);
  }

  v23 = 1;
LABEL_55:
  if (v11 != v13)
  {
    if (getAUSoundIsolationLog(void)::onceToken != -1)
      dispatch_once(&getAUSoundIsolationLog(void)::onceToken, &__block_literal_global_40);
    v31 = getAUSoundIsolationLog(void)::gLog;
    if (os_log_type_enabled((os_log_t)getAUSoundIsolationLog(void)::gLog, OS_LOG_TYPE_ERROR))
    {
      LODWORD(buf.__begin_) = 136315906;
      *(std::vector<std::string>::pointer *)((char *)&buf.__begin_ + 4) = (std::vector<std::string>::pointer)"AUSoundIsolation.mm";
      WORD2(buf.__end_) = 1024;
      *(_DWORD *)((char *)&buf.__end_ + 6) = 1414;
      WORD1(buf.__end_cap_.__value_) = 1024;
      HIDWORD(buf.__end_cap_.__value_) = v11;
      LOWORD(v299) = 1024;
      *(_DWORD *)((char *)&v299 + 2) = v13;
      _os_log_error_impl(&dword_1B5ED0000, v31, OS_LOG_TYPE_ERROR, "%s:%i Number of input channels in the plist (%u) is different from the number of output channels in the plist (%u)", (uint8_t *)&buf, 0x1Eu);
    }
    v19 = 4294956421;
    goto LABEL_670;
  }
  AUSoundIsolation::GetTuningDictionaryRef((applesauce::CF::DictionaryRef *)&cf, (uint64_t)this, 3);
  v27 = *((_DWORD *)this + 133) != 1 || cf == 0;
  v28 = !v27;
  v262 = v28;
  if (v27)
  {
    if (getAUSoundIsolationLog(void)::onceToken != -1)
      dispatch_once(&getAUSoundIsolationLog(void)::onceToken, &__block_literal_global_40);
    v29 = (id)getAUSoundIsolationLog(void)::gLog;
    if (os_log_type_enabled(v29, OS_LOG_TYPE_DEBUG))
    {
      LODWORD(buf.__begin_) = 136315394;
      *(std::vector<std::string>::pointer *)((char *)&buf.__begin_ + 4) = (std::vector<std::string>::pointer)"AUSoundIsolation.mm";
      WORD2(buf.__end_) = 1024;
      *(_DWORD *)((char *)&buf.__end_ + 6) = 1434;
      v30 = "%s:%i drev preset is empty and/or dereverb disabled, derverberation disabled";
      goto LABEL_485;
    }
  }
  else
  {
    if (getAUSoundIsolationLog(void)::onceToken != -1)
      dispatch_once(&getAUSoundIsolationLog(void)::onceToken, &__block_literal_global_40);
    v29 = (id)getAUSoundIsolationLog(void)::gLog;
    if (os_log_type_enabled(v29, OS_LOG_TYPE_DEBUG))
    {
      LODWORD(buf.__begin_) = 136315394;
      *(std::vector<std::string>::pointer *)((char *)&buf.__begin_ + 4) = (std::vector<std::string>::pointer)"AUSoundIsolation.mm";
      WORD2(buf.__end_) = 1024;
      *(_DWORD *)((char *)&buf.__end_ + 6) = 1431;
      v30 = "%s:%i drev preset exists and dereverb enabled, derverberation enabled";
LABEL_485:
      _os_log_debug_impl(&dword_1B5ED0000, v29, OS_LOG_TYPE_DEBUG, v30, (uint8_t *)&buf, 0x12u);
    }
  }

  if (getAUSoundIsolationLog(void)::onceToken != -1)
    dispatch_once(&getAUSoundIsolationLog(void)::onceToken, &__block_literal_global_40);
  v32 = (id)getAUSoundIsolationLog(void)::gLog;
  if (os_log_type_enabled(v32, OS_LOG_TYPE_DEBUG))
  {
    LODWORD(buf.__begin_) = 136315394;
    *(std::vector<std::string>::pointer *)((char *)&buf.__begin_ + 4) = (std::vector<std::string>::pointer)"AUSoundIsolation.mm";
    WORD2(buf.__end_) = 1024;
    *(_DWORD *)((char *)&buf.__end_ + 6) = 1437;
    _os_log_debug_impl(&dword_1B5ED0000, v32, OS_LOG_TYPE_DEBUG, "%s:%i create processing graph", (uint8_t *)&buf, 0x12u);
  }

  buf.__end_ = 0;
  buf.__begin_ = (std::vector<std::string>::pointer)&buf.__end_;
  v299 = 0u;
  memset(v300, 0, sizeof(v300));
  memset(&v301, 0, sizeof(v301));
  buf.__end_cap_.__value_ = 0;
  std::string::basic_string[abi:ne180100]<0>(&v302, "mixer");
  v263 = this;
  std::string::basic_string[abi:ne180100]<0>(&v303, "MWF");
  std::string::basic_string[abi:ne180100]<0>(&__s, "DREV");
  std::string::basic_string[abi:ne180100]<0>(&v306, "inputDelayForMWF");
  std::string::basic_string[abi:ne180100]<0>(v308, "bypassDelay");
  v33 = *((_DWORD *)this + 146);
  if (v11 == 1)
  {
    if (getAUSoundIsolationLog(void)::onceToken != -1)
      dispatch_once(&getAUSoundIsolationLog(void)::onceToken, &__block_literal_global_23570);
    v34 = getAUSoundIsolationLog(void)::gLog;
    if (os_log_type_enabled((os_log_t)getAUSoundIsolationLog(void)::gLog, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)v313 = 136315394;
      *(_QWORD *)&v313[4] = "SoundIsolationGraphAdapter.cpp";
      *(_WORD *)&v313[12] = 1024;
      *(_DWORD *)&v313[14] = 337;
      v35 = "%s:%i single channel input & output model will be used";
      v36 = v34;
      v37 = 18;
      goto LABEL_90;
    }
  }
  else
  {
    if (v23 != 1 || v11 != v265)
      __assert_rtn("CreateProcessingGraph", "SoundIsolationGraphAdapter.cpp", 335, "(numInternalIOChannels == 1 || (numInternalIOChannels == numIOChannels && internalBatchSize == 1)) && \"internal format must be one channel or the same number of IO channels (when internal batch size = 1)\"");
    if (getAUSoundIsolationLog(void)::onceToken != -1)
      dispatch_once(&getAUSoundIsolationLog(void)::onceToken, &__block_literal_global_23570);
    v38 = getAUSoundIsolationLog(void)::gLog;
    if (os_log_type_enabled((os_log_t)getAUSoundIsolationLog(void)::gLog, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)v313 = 136315906;
      *(_QWORD *)&v313[4] = "SoundIsolationGraphAdapter.cpp";
      *(_WORD *)&v313[12] = 1024;
      *(_DWORD *)&v313[14] = 340;
      *(_WORD *)&v313[18] = 1024;
      *(_DWORD *)&v313[20] = v265;
      *(_WORD *)&v313[24] = 1024;
      *(_DWORD *)&v313[26] = v265;
      v35 = "%s:%i multi channel input (%u) & output (%u) model will be used";
      v36 = v38;
      v37 = 30;
LABEL_90:
      _os_log_impl(&dword_1B5ED0000, v36, OS_LOG_TYPE_DEFAULT, v35, v313, v37);
      if (getAUSoundIsolationLog(void)::onceToken != -1)
        dispatch_once(&getAUSoundIsolationLog(void)::onceToken, &__block_literal_global_23570);
    }
  }
  v39 = getAUSoundIsolationLog(void)::gLog;
  if (os_log_type_enabled((os_log_t)getAUSoundIsolationLog(void)::gLog, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)v313 = 136315394;
    *(_QWORD *)&v313[4] = "SoundIsolationGraphAdapter.cpp";
    *(_WORD *)&v313[12] = 1024;
    *(_DWORD *)&v313[14] = 347;
    _os_log_debug_impl(&dword_1B5ED0000, v39, OS_LOG_TYPE_DEBUG, "%s:%i create graph", v313, 0x12u);
  }
  v40 = operator new();
  MEMORY[0x1BCC95308]();
  v272 = v40;
  v41 = (_QWORD *)(v40 + 408);
  std::string::__assign_external((std::string *)(v40 + 408), "AUSoundIsolation_processing", 0x1BuLL);
  if (getAUSoundIsolationLog(void)::onceToken != -1)
    dispatch_once(&getAUSoundIsolationLog(void)::onceToken, &__block_literal_global_23570);
  v42 = getAUSoundIsolationLog(void)::gLog;
  if (os_log_type_enabled((os_log_t)getAUSoundIsolationLog(void)::gLog, OS_LOG_TYPE_DEBUG))
  {
    if (*(char *)(v40 + 431) < 0)
      v41 = (_QWORD *)*v41;
    *(_DWORD *)v313 = 136315650;
    *(_QWORD *)&v313[4] = "SoundIsolationGraphAdapter.cpp";
    *(_WORD *)&v313[12] = 1024;
    *(_DWORD *)&v313[14] = 351;
    *(_WORD *)&v313[18] = 2080;
    *(_QWORD *)&v313[20] = v41;
    _os_log_debug_impl(&dword_1B5ED0000, v42, OS_LOG_TYPE_DEBUG, "%s:%i graph name set to (%s)", v313, 0x1Cu);
  }
  std::string::basic_string[abi:ne180100]<0>(&v281, "input");
  std::string::basic_string[abi:ne180100]<0>(&v279, "output");
  DSPGraph::Graph::addInput();
  DSPGraph::Graph::addOutput();
  MEMORY[0x1BCC95170](v313);
  if (getAUSoundIsolationLog(void)::onceToken != -1)
    dispatch_once(&getAUSoundIsolationLog(void)::onceToken, &__block_literal_global_23570);
  v43 = getAUSoundIsolationLog(void)::gLog;
  if (os_log_type_enabled((os_log_t)getAUSoundIsolationLog(void)::gLog, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)v311 = 136315394;
    *(_QWORD *)&v311[4] = "SoundIsolationGraphAdapter.cpp";
    *(_WORD *)&v311[12] = 1024;
    *(_DWORD *)&v311[14] = 363;
    _os_log_debug_impl(&dword_1B5ED0000, v43, OS_LOG_TYPE_DEBUG, "%s:%i prepare input section", v311, 0x12u);
  }
  if (SHIBYTE(v281.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v278, v281.__r_.__value_.__l.__data_, v281.__r_.__value_.__l.__size_);
  else
    v278 = v281;
  memset(&__str, 0, sizeof(__str));
  memset(__p, 0, 24);
  if ((v271 & 0x20) != 0)
  {
    v46 = v33;
    if (v269 <= 1)
      v45 = 1;
    else
      v45 = v269;
    v44 = 1;
  }
  else
  {
    HIBYTE(__p[2]) = 12;
    qmemcpy(__p, "srlconverter", 12);
    *((_BYTE *)&__str.__r_.__value_.__s + 23) = 18;
    strcpy((char *)&__str, "inputDeinterleaver");
    DSPGraph::NewBoxRegistry::newBox();
    DSPGraph::Graph::add();
    *(double *)v311 = v3;
    *(_DWORD *)&v311[8] = v268;
    *(_DWORD *)&v311[12] = v271;
    *(_QWORD *)&v311[16] = v266;
    *(_DWORD *)&v311[24] = v267;
    *(_DWORD *)&v311[28] = v269;
    *(_QWORD *)&v311[32] = v270;
    v312 = 1;
    DSPGraph::Graph::connect();
    std::string::operator=(&v278, &__str);
    v44 = v269;
    if (v269 <= 1)
      v45 = 1;
    else
      v45 = v269;
    v46 = v33;
    if (!v269)
    {
      v47 = (v270 + 7) >> 3;
      goto LABEL_115;
    }
  }
  v47 = v267 / v44;
LABEL_115:
  v48 = (float)v7;
  if (v3 != v48)
  {
    if (SHIBYTE(__p[2]) < 0)
    {
      __p[1] = (void *)3;
      v49 = (void **)__p[0];
    }
    else
    {
      HIBYTE(__p[2]) = 3;
      v49 = __p;
    }
    *(_DWORD *)v49 = 6517363;
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    {
      __str.__r_.__value_.__l.__size_ = 8;
      p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
      p_size = (std::string::size_type *)(__str.__r_.__value_.__r.__words[0] + 8);
    }
    else
    {
      p_size = &__str.__r_.__value_.__l.__size_;
      *((_BYTE *)&__str.__r_.__value_.__s + 23) = 8;
      p_str = &__str;
    }
    p_str->__r_.__value_.__r.__words[0] = 0x4352537475706E69;
LABEL_135:
    *(_BYTE *)p_size = 0;
    goto LABEL_136;
  }
  if (v9 != 1)
  {
    if (SHIBYTE(__p[2]) < 0)
    {
      __p[1] = (void *)9;
      v53 = (char *)__p[0];
    }
    else
    {
      HIBYTE(__p[2]) = 9;
      v53 = (char *)__p;
    }
    strcpy(v53, "reblocker");
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    {
      __str.__r_.__value_.__l.__size_ = 14;
      v54 = (std::string *)__str.__r_.__value_.__r.__words[0];
      p_size = (std::string::size_type *)(__str.__r_.__value_.__r.__words[0] + 14);
    }
    else
    {
      p_size = (std::string::size_type *)((char *)&__str.__r_.__value_.__r.__words[1] + 6);
      *((_BYTE *)&__str.__r_.__value_.__s + 23) = 14;
      v54 = &__str;
    }
    qmemcpy(v54, "inputReblocker", 14);
    goto LABEL_135;
  }
  if (SHIBYTE(__p[2]) < 0)
  {
    __p[1] = 0;
    v50 = (void **)__p[0];
  }
  else
  {
    HIBYTE(__p[2]) = 0;
    v50 = __p;
  }
  *(_BYTE *)v50 = 0;
  std::string::operator=(&__str, &v278);
LABEL_136:
  v55 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
  if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(__str.__r_.__value_.__r.__words[2]);
  else
    size = __str.__r_.__value_.__l.__size_;
  v57 = HIBYTE(v278.__r_.__value_.__r.__words[2]);
  if ((v278.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v57 = v278.__r_.__value_.__l.__size_;
  if (size == v57)
  {
    if ((v278.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v58 = &v278;
    else
      v58 = (std::string *)v278.__r_.__value_.__r.__words[0];
    if ((*((_BYTE *)&__str.__r_.__value_.__s + 23) & 0x80) != 0)
    {
      if (!memcmp(__str.__r_.__value_.__l.__data_, v58, __str.__r_.__value_.__l.__size_))
        goto LABEL_153;
    }
    else
    {
      if (!*((_BYTE *)&__str.__r_.__value_.__s + 23))
        goto LABEL_153;
      v59 = &__str;
      while (v59->__r_.__value_.__s.__data_[0] == v58->__r_.__value_.__s.__data_[0])
      {
        v59 = (std::string *)((char *)v59 + 1);
        v58 = (std::string *)((char *)v58 + 1);
        if (!--v55)
          goto LABEL_153;
      }
    }
  }
  DSPGraph::NewBoxRegistry::newBox();
  DSPGraph::Graph::add();
  *(double *)v311 = v3;
  *(_DWORD *)&v311[8] = v268;
  *(_DWORD *)&v311[12] = v271 | 0x20;
  *(_DWORD *)&v311[16] = v47;
  *(_DWORD *)&v311[20] = 1;
  *(_DWORD *)&v311[24] = v47;
  *(_DWORD *)&v311[28] = v45;
  *(_QWORD *)&v311[32] = v270;
  v312 = 1;
  DSPGraph::Graph::connect();
  std::string::operator=(&v278, &__str);
LABEL_153:
  if (getAUSoundIsolationLog(void)::onceToken != -1)
    dispatch_once(&getAUSoundIsolationLog(void)::onceToken, &__block_literal_global_23570);
  v60 = getAUSoundIsolationLog(void)::gLog;
  if (os_log_type_enabled((os_log_t)getAUSoundIsolationLog(void)::gLog, OS_LOG_TYPE_DEBUG))
  {
    v94 = &v278;
    if ((v278.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v94 = (std::string *)v278.__r_.__value_.__r.__words[0];
    *(_DWORD *)v311 = 136315650;
    *(_QWORD *)&v311[4] = "SoundIsolationGraphAdapter.cpp";
    *(_WORD *)&v311[12] = 1024;
    *(_DWORD *)&v311[14] = 65;
    *(_WORD *)&v311[18] = 2080;
    *(_QWORD *)&v311[20] = v94;
    _os_log_debug_impl(&dword_1B5ED0000, v60, OS_LOG_TYPE_DEBUG, "%s:%i input section output: %s", v311, 0x1Cu);
  }
  if (SHIBYTE(__p[2]) < 0)
    operator delete(__p[0]);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  if (getAUSoundIsolationLog(void)::onceToken != -1)
    dispatch_once(&getAUSoundIsolationLog(void)::onceToken, &__block_literal_global_23570);
  v61 = getAUSoundIsolationLog(void)::gLog;
  if (os_log_type_enabled((os_log_t)getAUSoundIsolationLog(void)::gLog, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)v311 = 136315394;
    *(_QWORD *)&v311[4] = "SoundIsolationGraphAdapter.cpp";
    *(_WORD *)&v311[12] = 1024;
    *(_DWORD *)&v311[14] = 367;
    _os_log_debug_impl(&dword_1B5ED0000, v61, OS_LOG_TYPE_DEBUG, "%s:%i prepare processing section", v311, 0x12u);
  }
  if (v9 == 1)
    __assert_rtn("AddProcessingSection", "SoundIsolationGraphAdapter.cpp", 134, "internalBlockSize != 1 && \"block size must be set for freq format\"");
  DSPGraph::MakeFloatNoninterleavedFormat((DSPGraph *)v265, v48);
  v62 = *(_QWORD *)v311;
  *(_OWORD *)__p = *(_OWORD *)&v311[12];
  *(_OWORD *)((char *)&__p[1] + 4) = *(_OWORD *)&v311[24];
  std::string::basic_string[abi:ne180100]<0>(&v276, "");
  if (v305 >= 0)
    v63 = HIBYTE(v305);
  else
    v63 = *((_QWORD *)&__s + 1);
  std::string::basic_string[abi:ne180100]((uint64_t)&v297, v63 + 20);
  if ((v297.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v64 = &v297;
  else
    v64 = (std::string *)v297.__r_.__value_.__r.__words[0];
  if (v63)
  {
    if (v305 >= 0)
      p_s = &__s;
    else
      p_s = (__int128 *)__s;
    memmove(v64, p_s, v63);
  }
  strcpy((char *)v64 + v63, "_processed_synthesis");
  v66 = "onE";
  if (v262)
  {
    LODWORD(v282.__r_.__value_.__r.__words[2]) = 0;
    *(_OWORD *)&v282.__r_.__value_.__l.__data_ = *(_OWORD *)"xfuaverdlppa";
    if (v305 >= 0)
      v67 = HIBYTE(v305);
    else
      v67 = *((_QWORD *)&__s + 1);
    std::string::basic_string[abi:ne180100]((uint64_t)v295, v67 + 15);
    if (v296 >= 0)
      v68 = v295;
    else
      v68 = (void **)v295[0];
    if (v67)
    {
      if (v305 >= 0)
        v69 = &__s;
      else
        v69 = (__int128 *)__s;
      memmove(v68, v69, v67);
    }
    strcpy((char *)v68 + v67, "_input_ANALYSIS");
    std::string::basic_string[abi:ne180100]<0>(v311, "fft");
    DSPGraph::NewBoxRegistry::newBox();
    DSPGraph::Graph::add();
    if ((v311[23] & 0x80000000) != 0)
      operator delete(*(void **)v311);
    *(double *)v311 = v48;
    *(_OWORD *)&v311[8] = xmmword_1B6626900;
    *(_DWORD *)&v311[24] = 4;
    *(_DWORD *)&v311[28] = v265;
    *(_QWORD *)&v311[32] = 32;
    v312 = v9;
    DSPGraph::Graph::connect();
    DSPGraph::Graph::add();
    *(_QWORD *)v311 = v62;
    *(_OWORD *)&v311[12] = *(_OWORD *)__p;
    *(_OWORD *)&v311[24] = *(_OWORD *)((char *)&__p[1] + 4);
    *(_DWORD *)&v311[8] = 1718773105;
    v312 = v9;
    DSPGraph::Graph::connect();
    if (v305 >= 0)
      v70 = HIBYTE(v305);
    else
      v70 = *((_QWORD *)&__s + 1);
    std::string::basic_string[abi:ne180100]((uint64_t)v293, v70 + 11);
    if (v294 >= 0)
      v71 = v293;
    else
      v71 = (void **)v293[0];
    if (v70)
    {
      if (v305 >= 0)
        v72 = &__s;
      else
        v72 = (__int128 *)__s;
      memmove(v71, v72, v70);
    }
    strcpy((char *)v71 + v70, "_eclee_ZERO");
    std::string::basic_string[abi:ne180100]<0>(v311, "constant");
    DSPGraph::NewBoxRegistry::newBox();
    DSPGraph::Graph::add();
    if ((v311[23] & 0x80000000) != 0)
      operator delete(*(void **)v311);
    *(_QWORD *)v311 = v62;
    *(_OWORD *)&v311[12] = *(_OWORD *)__p;
    *(_OWORD *)&v311[24] = *(_OWORD *)((char *)&__p[1] + 4);
    *(_DWORD *)&v311[8] = 1718773105;
    v312 = v9;
    DSPGraph::Graph::connect();
    if (v305 >= 0)
      v73 = HIBYTE(v305);
    else
      v73 = *((_QWORD *)&__s + 1);
    std::string::basic_string[abi:ne180100]((uint64_t)v291, v73 + 10);
    if (v292 >= 0)
      v74 = v291;
    else
      v74 = (void **)v291[0];
    if (v73)
    {
      if (v305 >= 0)
        v75 = &__s;
      else
        v75 = (__int128 *)__s;
      memmove(v74, v75, v73);
    }
    strcpy((char *)v74 + v73, "_1_deadEnd");
    std::string::basic_string[abi:ne180100]<0>(v311, "dead");
    DSPGraph::NewBoxRegistry::newBox();
    DSPGraph::Graph::add();
    if ((v311[23] & 0x80000000) != 0)
      operator delete(*(void **)v311);
    *(_QWORD *)v311 = v62;
    *(_OWORD *)&v311[12] = *(_OWORD *)__p;
    *(_OWORD *)&v311[24] = *(_OWORD *)((char *)&__p[1] + 4);
    *(_DWORD *)&v311[8] = 1718773105;
    v312 = v9;
    DSPGraph::Graph::connect();
    std::string::basic_string[abi:ne180100]<0>(v311, "fft");
    DSPGraph::NewBoxRegistry::newBox();
    DSPGraph::Graph::add();
    if ((v311[23] & 0x80000000) != 0)
      operator delete(*(void **)v311);
    *(_QWORD *)v311 = v62;
    *(_OWORD *)&v311[12] = *(_OWORD *)__p;
    *(_OWORD *)&v311[24] = *(_OWORD *)((char *)&__p[1] + 4);
    *(_DWORD *)&v311[8] = 1718773105;
    v312 = v9;
    DSPGraph::Graph::connect();
    v290 = 0;
    v289 = *(_OWORD *)"xfuatennlppa";
    *(double *)&__str.__r_.__value_.__l.__data_ = v48;
    *(_OWORD *)&__str.__r_.__value_.__r.__words[1] = xmmword_1B6626900;
    v286 = 4;
    v287 = v11;
    v288 = 32;
    SoundIsolationGraphAdapter::CreateProcessingAUs((std::string *)v311, &buf, (int)&v272, (uint64_t)&v297, (int)v313, v265, (int)&v289, (uint64_t)&__str, v9, v23);
    v66 = "N2vp3sim9ExceptionE" + 16;
    if (SHIBYTE(v276.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v276.__r_.__value_.__l.__data_);
    v276 = *(std::string *)v311;
    if (v292 < 0)
      operator delete(v291[0]);
    if (v294 < 0)
      operator delete(v293[0]);
    if (v296 < 0)
      operator delete(v295[0]);
  }
  else
  {
    v290 = 0;
    v289 = *(_OWORD *)"xfuatennlppa";
    *(double *)&__str.__r_.__value_.__l.__data_ = v48;
    *(_OWORD *)&__str.__r_.__value_.__r.__words[1] = xmmword_1B6626900;
    v286 = 4;
    v287 = v11;
    v288 = 32;
    SoundIsolationGraphAdapter::CreateProcessingAUs((std::string *)v311, &buf, (int)&v272, (uint64_t)&v278, (int)v313, v265, (int)&v289, (uint64_t)&__str, v9, v23);
    if (SHIBYTE(v276.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v276.__r_.__value_.__l.__data_);
    v276 = *(std::string *)v311;
  }
  if (v265 >= 2 && v46 == 1)
  {
    if (getAUSoundIsolationLog(void)::onceToken != -1)
      dispatch_once(&getAUSoundIsolationLog(void)::onceToken, &__block_literal_global_23570);
    v76 = getAUSoundIsolationLog(void)::gLog;
    if (os_log_type_enabled((os_log_t)getAUSoundIsolationLog(void)::gLog, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)v311 = 136315394;
      *(_QWORD *)&v311[4] = "SoundIsolationGraphAdapter.cpp";
      *(_WORD *)&v311[12] = 1024;
      *(_DWORD *)&v311[14] = 187;
      _os_log_debug_impl(&dword_1B5ED0000, v76, OS_LOG_TYPE_DEBUG, "%s:%i set up GuidedMWF", v311, 0x12u);
    }
    v284 = 0;
    v283 = *(_OWORD *)"xfuasondlppa";
    std::string::basic_string[abi:ne180100]<0>(v311, "delay");
    DSPGraph::NewBoxRegistry::newBox();
    DSPGraph::Graph::add();
    if ((v311[23] & 0x80000000) != 0)
      operator delete(*(void **)v311);
    *(double *)v311 = v48;
    *(_OWORD *)&v311[8] = xmmword_1B6626900;
    *(_DWORD *)&v311[24] = 4;
    *(_DWORD *)&v311[28] = v265;
    *(_QWORD *)&v311[32] = *((_QWORD *)v66 + 300);
    v312 = v9;
    DSPGraph::Graph::connect();
    if ((v303.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v77 = HIBYTE(v303.__r_.__value_.__r.__words[2]);
    else
      v77 = v303.__r_.__value_.__l.__size_;
    std::string::basic_string[abi:ne180100]((uint64_t)v295, v77 + 15);
    if (v296 >= 0)
      v78 = v295;
    else
      v78 = (void **)v295[0];
    if (v77)
    {
      if ((v303.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v79 = &v303;
      else
        v79 = (std::string *)v303.__r_.__value_.__r.__words[0];
      memmove(v78, v79, v77);
    }
    strcpy((char *)v78 + v77, "_input_ANALYSIS");
    std::string::basic_string[abi:ne180100]<0>(v311, "fft");
    DSPGraph::NewBoxRegistry::newBox();
    DSPGraph::Graph::add();
    if ((v311[23] & 0x80000000) != 0)
      operator delete(*(void **)v311);
    *(double *)v311 = v48;
    *(_OWORD *)&v311[8] = xmmword_1B6626900;
    *(_DWORD *)&v311[24] = 4;
    *(_DWORD *)&v311[28] = v265;
    v80 = *((_QWORD *)v66 + 300);
    *(_QWORD *)&v311[32] = v80;
    v312 = v9;
    DSPGraph::Graph::connect();
    if ((v303.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v81 = HIBYTE(v303.__r_.__value_.__r.__words[2]);
    else
      v81 = v303.__r_.__value_.__l.__size_;
    std::string::basic_string[abi:ne180100]((uint64_t)v293, v81 + 18);
    if (v294 >= 0)
      v82 = v293;
    else
      v82 = (void **)v293[0];
    if (v81)
    {
      if ((v303.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v83 = &v303;
      else
        v83 = (std::string *)v303.__r_.__value_.__r.__words[0];
      memmove(v82, v83, v81);
    }
    strcpy((char *)v82 + v81, "_guidance_ANALYSIS");
    std::string::basic_string[abi:ne180100]<0>(v311, "fft");
    DSPGraph::NewBoxRegistry::newBox();
    DSPGraph::Graph::add();
    if ((v311[23] & 0x80000000) != 0)
      operator delete(*(void **)v311);
    *(double *)v311 = v48;
    *(_OWORD *)&v311[8] = xmmword_1B6626900;
    *(_DWORD *)&v311[24] = 4;
    *(_DWORD *)&v311[28] = v265;
    *(_QWORD *)&v311[32] = v80;
    v312 = v9;
    DSPGraph::Graph::connect();
    DSPGraph::Graph::add();
    *(_QWORD *)v311 = v62;
    *(_OWORD *)&v311[12] = *(_OWORD *)__p;
    *(_OWORD *)&v311[24] = *(_OWORD *)((char *)&__p[1] + 4);
    *(_DWORD *)&v311[8] = 1718773105;
    v312 = v9;
    DSPGraph::Graph::connect();
    *(_QWORD *)v311 = v62;
    *(_OWORD *)&v311[12] = *(_OWORD *)__p;
    *(_OWORD *)&v311[24] = *(_OWORD *)((char *)&__p[1] + 4);
    *(_DWORD *)&v311[8] = 1718773105;
    v312 = v9;
    DSPGraph::Graph::connect();
    if ((v303.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v84 = HIBYTE(v303.__r_.__value_.__r.__words[2]);
    else
      v84 = v303.__r_.__value_.__l.__size_;
    std::string::basic_string[abi:ne180100]((uint64_t)v291, v84 + 10);
    if (v292 >= 0)
      v85 = v291;
    else
      v85 = (void **)v291[0];
    if (v84)
    {
      if ((v303.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v86 = &v303;
      else
        v86 = (std::string *)v303.__r_.__value_.__r.__words[0];
      memmove(v85, v86, v84);
    }
    strcpy((char *)v85 + v84, "_1_deadEnd");
    std::string::basic_string[abi:ne180100]<0>(v311, "dead");
    DSPGraph::NewBoxRegistry::newBox();
    DSPGraph::Graph::add();
    if ((v311[23] & 0x80000000) != 0)
      operator delete(*(void **)v311);
    *(_QWORD *)v311 = v62;
    *(_OWORD *)&v311[12] = *(_OWORD *)__p;
    *(_OWORD *)&v311[24] = *(_OWORD *)((char *)&__p[1] + 4);
    *(_DWORD *)&v311[8] = 1718773105;
    v312 = v9;
    DSPGraph::Graph::connect();
    if ((v303.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v87 = HIBYTE(v303.__r_.__value_.__r.__words[2]);
    else
      v87 = v303.__r_.__value_.__l.__size_;
    std::string::basic_string[abi:ne180100]((uint64_t)&v282, v87 + 20);
    if ((v282.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v88 = &v282;
    else
      v88 = (std::string *)v282.__r_.__value_.__r.__words[0];
    if (v87)
    {
      if ((v303.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v89 = &v303;
      else
        v89 = (std::string *)v303.__r_.__value_.__r.__words[0];
      memmove(v88, v89, v87);
    }
    strcpy((char *)v88 + v87, "_processed_synthesis");
    std::string::basic_string[abi:ne180100]<0>(v311, "fft");
    DSPGraph::NewBoxRegistry::newBox();
    DSPGraph::Graph::add();
    if ((v311[23] & 0x80000000) != 0)
      operator delete(*(void **)v311);
    *(_QWORD *)v311 = v62;
    *(_OWORD *)&v311[12] = *(_OWORD *)__p;
    *(_OWORD *)&v311[24] = *(_OWORD *)((char *)&__p[1] + 4);
    *(_DWORD *)&v311[8] = 1718773105;
    v312 = v9;
    DSPGraph::Graph::connect();
    std::string::operator=(&v276, &v282);
    if (SHIBYTE(v282.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v282.__r_.__value_.__l.__data_);
    if (v292 < 0)
      operator delete(v291[0]);
    if (v294 < 0)
      operator delete(v293[0]);
    if (v296 < 0)
      operator delete(v295[0]);
  }
  if (getAUSoundIsolationLog(void)::onceToken != -1)
    dispatch_once(&getAUSoundIsolationLog(void)::onceToken, &__block_literal_global_23570);
  v90 = getAUSoundIsolationLog(void)::gLog;
  if (os_log_type_enabled((os_log_t)getAUSoundIsolationLog(void)::gLog, OS_LOG_TYPE_DEBUG))
  {
    v95 = &v276;
    if ((v276.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v95 = (std::string *)v276.__r_.__value_.__r.__words[0];
    *(_DWORD *)v311 = 136315650;
    *(_QWORD *)&v311[4] = "SoundIsolationGraphAdapter.cpp";
    *(_WORD *)&v311[12] = 1024;
    *(_DWORD *)&v311[14] = 250;
    *(_WORD *)&v311[18] = 2080;
    *(_QWORD *)&v311[20] = v95;
    _os_log_debug_impl(&dword_1B5ED0000, v90, OS_LOG_TYPE_DEBUG, "%s:%i processing section output: %s", v311, 0x1Cu);
  }
  if (SHIBYTE(v297.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v297.__r_.__value_.__l.__data_);
  v91 = *(_OWORD *)&v276.__r_.__value_.__l.__data_;
  v277[0] = v276.__r_.__value_.__r.__words[2];
  *(_DWORD *)((char *)v277 + 3) = *(_DWORD *)((char *)&v276.__r_.__value_.__r.__words[2] + 3);
  v92 = SHIBYTE(v276.__r_.__value_.__r.__words[2]);
  if (getAUSoundIsolationLog(void)::onceToken != -1)
    dispatch_once(&getAUSoundIsolationLog(void)::onceToken, &__block_literal_global_23570);
  v93 = getAUSoundIsolationLog(void)::gLog;
  if (os_log_type_enabled((os_log_t)getAUSoundIsolationLog(void)::gLog, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)v311 = 136315394;
    *(_QWORD *)&v311[4] = "SoundIsolationGraphAdapter.cpp";
    *(_WORD *)&v311[12] = 1024;
    *(_DWORD *)&v311[14] = 372;
    _os_log_debug_impl(&dword_1B5ED0000, v93, OS_LOG_TYPE_DEBUG, "%s:%i prepare output section", v311, 0x12u);
    if ((v92 & 0x80000000) == 0)
      goto LABEL_306;
  }
  else if ((v92 & 0x80000000) == 0)
  {
LABEL_306:
    *(_OWORD *)&v297.__r_.__value_.__l.__data_ = v91;
    LODWORD(v297.__r_.__value_.__r.__words[2]) = v277[0];
    *(_DWORD *)((char *)&v297.__r_.__value_.__r.__words[2] + 3) = *(_DWORD *)((char *)v277 + 3);
    *((_BYTE *)&v297.__r_.__value_.__s + 23) = v92;
    goto LABEL_318;
  }
  std::string::__init_copy_ctor_external(&v297, (const std::string::value_type *)v91, *((std::string::size_type *)&v91 + 1));
LABEL_318:
  memset(&__str, 0, sizeof(__str));
  memset(__p, 0, 24);
  if (v3 == v48)
  {
    v96 = &__str.__r_.__value_.__s.__data_[15];
    qmemcpy(__p, "reblocker", 9);
    qmemcpy(&__str, "outputReblocker", 15);
    v97 = 15;
    v98 = 9;
  }
  else
  {
    v96 = &__str.__r_.__value_.__s.__data_[9];
    qmemcpy(__p, "src", 3);
    __str.__r_.__value_.__s.__data_[8] = 67;
    __str.__r_.__value_.__r.__words[0] = *(_QWORD *)"outputSRC";
    v97 = 9;
    v98 = 3;
  }
  *v96 = 0;
  HIBYTE(__p[2]) = v98;
  *((_BYTE *)&__str.__r_.__value_.__s + 23) = v97;
  v99 = HIBYTE(v297.__r_.__value_.__r.__words[2]);
  if ((v297.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v99 = v297.__r_.__value_.__l.__size_;
  if (v99 == v97)
  {
    v100 = v97;
    v101 = (std::string *)v297.__r_.__value_.__r.__words[0];
    if ((v297.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v101 = &v297;
    v102 = &__str;
    while (v102->__r_.__value_.__s.__data_[0] == v101->__r_.__value_.__s.__data_[0])
    {
      v102 = (std::string *)((char *)v102 + 1);
      v101 = (std::string *)((char *)v101 + 1);
      if (!--v100)
        goto LABEL_331;
    }
  }
  DSPGraph::NewBoxRegistry::newBox();
  DSPGraph::Graph::add();
  *(double *)v311 = v48;
  *(_OWORD *)&v311[8] = xmmword_1B6626900;
  *(_DWORD *)&v311[24] = 4;
  *(_DWORD *)&v311[28] = v265;
  *(_QWORD *)&v311[32] = *((_QWORD *)v66 + 300);
  v312 = v9;
  DSPGraph::Graph::connect();
  std::string::operator=(&v297, &__str);
LABEL_331:
  if ((v271 & 0x20) == 0)
  {
    if (v269)
      v103 = v267 / v269;
    else
      v103 = (v270 + 7) >> 3;
    if (SHIBYTE(__p[2]) < 0)
    {
      __p[1] = (void *)12;
      v104 = (char *)__p[0];
    }
    else
    {
      HIBYTE(__p[2]) = 12;
      v104 = (char *)__p;
    }
    strcpy(v104, "srlconverter");
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    {
      __str.__r_.__value_.__l.__size_ = 17;
      v105 = (std::string *)__str.__r_.__value_.__r.__words[0];
    }
    else
    {
      *((_BYTE *)&__str.__r_.__value_.__s + 23) = 17;
      v105 = &__str;
    }
    strcpy((char *)v105, "outputInterleaver");
    DSPGraph::NewBoxRegistry::newBox();
    DSPGraph::Graph::add();
    *(double *)v311 = v3;
    *(_DWORD *)&v311[8] = v268;
    *(_DWORD *)&v311[12] = v271 | 0x20;
    *(_DWORD *)&v311[16] = v103;
    *(_DWORD *)&v311[20] = 1;
    *(_DWORD *)&v311[24] = v103;
    *(_DWORD *)&v311[28] = v265;
    *(_QWORD *)&v311[32] = v270;
    v312 = 1;
    DSPGraph::Graph::connect();
    std::string::operator=(&v297, &__str);
  }
  if (getAUSoundIsolationLog(void)::onceToken != -1)
    dispatch_once(&getAUSoundIsolationLog(void)::onceToken, &__block_literal_global_23570);
  v106 = getAUSoundIsolationLog(void)::gLog;
  if (os_log_type_enabled((os_log_t)getAUSoundIsolationLog(void)::gLog, OS_LOG_TYPE_DEBUG))
  {
    v148 = &v297;
    if ((v297.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v148 = (std::string *)v297.__r_.__value_.__r.__words[0];
    *(_DWORD *)v311 = 136315650;
    *(_QWORD *)&v311[4] = "SoundIsolationGraphAdapter.cpp";
    *(_WORD *)&v311[12] = 1024;
    *(_DWORD *)&v311[14] = 119;
    *(_WORD *)&v311[18] = 2080;
    *(_QWORD *)&v311[20] = v148;
    _os_log_debug_impl(&dword_1B5ED0000, v106, OS_LOG_TYPE_DEBUG, "%s:%i output section output: %s", v311, 0x1Cu);
  }
  if (SHIBYTE(__p[2]) < 0)
    operator delete(__p[0]);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  v107 = v272;
  *(double *)v311 = v3;
  *(_DWORD *)&v311[8] = v268;
  *(_DWORD *)&v311[12] = v271;
  *(_QWORD *)&v311[16] = v266;
  *(_DWORD *)&v311[24] = v267;
  *(_DWORD *)&v311[28] = v269;
  *(_QWORD *)&v311[32] = v270;
  v312 = 1;
  DSPGraph::Graph::connect();
  if (getAUSoundIsolationLog(void)::onceToken != -1)
    dispatch_once(&getAUSoundIsolationLog(void)::onceToken, &__block_literal_global_23570);
  v108 = getAUSoundIsolationLog(void)::gLog;
  if (os_log_type_enabled((os_log_t)getAUSoundIsolationLog(void)::gLog, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)v311 = 136315394;
    *(_QWORD *)&v311[4] = "SoundIsolationGraphAdapter.cpp";
    *(_WORD *)&v311[12] = 1024;
    *(_DWORD *)&v311[14] = 376;
    _os_log_debug_impl(&dword_1B5ED0000, v108, OS_LOG_TYPE_DEBUG, "%s:%i graph created", v311, 0x12u);
  }
  if (SHIBYTE(v297.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v297.__r_.__value_.__l.__data_);
    if ((v92 & 0x80000000) == 0)
      goto LABEL_355;
  }
  else if ((v92 & 0x80000000) == 0)
  {
    goto LABEL_355;
  }
  operator delete((void *)v91);
LABEL_355:
  if (SHIBYTE(v278.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v278.__r_.__value_.__l.__data_);
  *(_QWORD *)v313 = MEMORY[0x1E0CFFC40] + 16;
  *(_QWORD *)v311 = v318;
  std::vector<std::pair<std::string,AudioComponentDescription>>::__destroy_vector::operator()[abi:ne180100]((void ***)v311);
  std::__hash_table<std::__hash_value_type<AudioComponentDescription,std::function<DSPGraph::Box * ()(unsigned int,unsigned int)>>,std::__unordered_map_hasher<AudioComponentDescription,std::__hash_value_type<AudioComponentDescription,std::function<DSPGraph::Box * ()(unsigned int,unsigned int)>>,std::hash<AudioComponentDescription>,DSPGraph::NewBoxRegistry::AudioComponentDescriptionEquality,true>,std::__unordered_map_equal<AudioComponentDescription,std::__hash_value_type<AudioComponentDescription,std::function<DSPGraph::Box * ()(unsigned int,unsigned int)>>,DSPGraph::NewBoxRegistry::AudioComponentDescriptionEquality,std::hash<AudioComponentDescription>,true>,std::allocator<std::__hash_value_type<AudioComponentDescription,std::function<DSPGraph::Box * ()(unsigned int,unsigned int)>>>>::~__hash_table((uint64_t)v317);
  std::__hash_table<std::__hash_value_type<std::string,std::function<DSPGraph::Box * ()(unsigned int,unsigned int)>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::function<DSPGraph::Box * ()(unsigned int,unsigned int)>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::function<DSPGraph::Box * ()(unsigned int,unsigned int)>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::function<DSPGraph::Box * ()(unsigned int,unsigned int)>>>>::~__hash_table((uint64_t)&v313[8]);
  if (v280 < 0)
    operator delete(v279);
  if (SHIBYTE(v281.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v281.__r_.__value_.__l.__data_);
  v109 = *((_QWORD *)this + 76);
  *((_QWORD *)this + 76) = v107;
  if (v109)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v109 + 8))(v109);
    v107 = *((_QWORD *)this + 76);
  }
  if (!v107)
  {
    if (getAUSoundIsolationLog(void)::onceToken != -1)
      dispatch_once(&getAUSoundIsolationLog(void)::onceToken, &__block_literal_global_40);
    v117 = getAUSoundIsolationLog(void)::gLog;
    if (os_log_type_enabled((os_log_t)getAUSoundIsolationLog(void)::gLog, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)v313 = 136315394;
      *(_QWORD *)&v313[4] = "AUSoundIsolation.mm";
      *(_WORD *)&v313[12] = 1024;
      *(_DWORD *)&v313[14] = 1442;
      _os_log_error_impl(&dword_1B5ED0000, v117, OS_LOG_TYPE_ERROR, "%s:%i processing graph was not created", v313, 0x12u);
    }
    goto LABEL_667;
  }
  v261 = *((_DWORD *)this + 84);
  if (getAUSoundIsolationLog(void)::onceToken != -1)
    dispatch_once(&getAUSoundIsolationLog(void)::onceToken, &__block_literal_global_40);
  v110 = (id)getAUSoundIsolationLog(void)::gLog;
  if (os_log_type_enabled(v110, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)v313 = 136315394;
    *(_QWORD *)&v313[4] = "AUSoundIsolation.mm";
    *(_WORD *)&v313[12] = 1024;
    *(_DWORD *)&v313[14] = 1449;
    _os_log_debug_impl(&dword_1B5ED0000, v110, OS_LOG_TYPE_DEBUG, "%s:%i setup processing graph", v313, 0x12u);
  }

  ProcessingGraphOutput = AUSoundIsolation::GetProcessingGraphOutput(this);
  v112 = *(_QWORD *)(ProcessingGraphOutput + 64);
  if (*(_QWORD *)(ProcessingGraphOutput + 72) == v112)
  {
    std::string::basic_string[abi:ne180100]<0>(v311, "/AppleInternal/Library/BuildRoots/c7268dd4-5656-11ef-b8ac-76625042721f/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS18.0.Internal.sdk/System/Library/PrivateFrameworks/AudioToolboxCore.framework/PrivateHeaders/DSPGraph_Box.h");
    std::string::basic_string[abi:ne180100]<0>(v313, "in");
    v260 = (_QWORD *)(ProcessingGraphOutput + 32);
    if (*(char *)(ProcessingGraphOutput + 55) < 0)
      v260 = (_QWORD *)*v260;
    goto LABEL_736;
  }
  v113 = **(double **)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v112 + 40))(v112) + 120);
  v114 = *((_BYTE *)this + 376) == 0;
  if (getAUSoundIsolationLog(void)::onceToken != -1)
    dispatch_once(&getAUSoundIsolationLog(void)::onceToken, &__block_literal_global_40);
  v115 = (id)getAUSoundIsolationLog(void)::gLog;
  if (os_log_type_enabled(v115, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)v313 = 136316162;
    *(_QWORD *)&v313[4] = "AUSoundIsolation.mm";
    *(_WORD *)&v313[12] = 1024;
    *(_DWORD *)&v313[14] = 1454;
    *(_WORD *)&v313[18] = 1024;
    *(_DWORD *)&v313[20] = v261;
    *(_WORD *)&v313[24] = 1024;
    *(_DWORD *)&v313[26] = v113;
    LOWORD(v314) = 1024;
    *(_DWORD *)((char *)&v314 + 2) = v114;
    _os_log_debug_impl(&dword_1B5ED0000, v115, OS_LOG_TYPE_DEBUG, "%s:%i setting graph slice timing with max slice duration (%u), sample rate (%u), slice policy (%u)", v313, 0x24u);
  }

  DSPGraph::Graph::setSliceDuration();
  *(_BYTE *)(*((_QWORD *)this + 76) + 765) = 1;
  if (v262)
  {
    if (getAUSoundIsolationLog(void)::onceToken != -1)
      dispatch_once(&getAUSoundIsolationLog(void)::onceToken, &__block_literal_global_40);
    v116 = (id)getAUSoundIsolationLog(void)::gLog;
    if (os_log_type_enabled(v116, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)v313 = 136315394;
      *(_QWORD *)&v313[4] = "AUSoundIsolation.mm";
      *(_WORD *)&v313[12] = 1024;
      *(_DWORD *)&v313[14] = 1461;
      _os_log_debug_impl(&dword_1B5ED0000, v116, OS_LOG_TYPE_DEBUG, "%s:%i setup dereverb box", v313, 0x12u);
    }

    if (SHIBYTE(v305) < 0)
    {
      std::string::__init_copy_ctor_external((std::string *)v311, (const std::string::value_type *)__s, *((std::string::size_type *)&__s + 1));
    }
    else
    {
      *(_OWORD *)v311 = __s;
      *(_QWORD *)&v311[16] = v305;
    }
    v118 = DSPGraph::Graph::box();
    v119 = v118;
    if (v118)
    {
      v120 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v118 + 216))(v118);
      (*(void (**)(uint64_t, CFTypeRef))(*(_QWORD *)v120 + 352))(v120, cf);
    }
    else
    {
      if (getAUSoundIsolationLog(void)::onceToken != -1)
        dispatch_once(&getAUSoundIsolationLog(void)::onceToken, &__block_literal_global_40);
      v121 = (id)getAUSoundIsolationLog(void)::gLog;
      if (os_log_type_enabled(v121, OS_LOG_TYPE_ERROR))
      {
        v235 = v311;
        if (v311[23] < 0)
          v235 = *(_BYTE **)v311;
        *(_DWORD *)v313 = 136315650;
        *(_QWORD *)&v313[4] = "AUSoundIsolation.mm";
        *(_WORD *)&v313[12] = 1024;
        *(_DWORD *)&v313[14] = 1465;
        *(_WORD *)&v313[18] = 2080;
        *(_QWORD *)&v313[20] = v235;
        _os_log_error_impl(&dword_1B5ED0000, v121, OS_LOG_TYPE_ERROR, "%s:%i couldn't find box (%s)", v313, 0x1Cu);
      }

    }
    if ((v311[23] & 0x80000000) != 0)
      operator delete(*(void **)v311);
    if (!v119)
      goto LABEL_667;
  }
  AUSoundIsolation::GetTuningDictionaryRef((applesauce::CF::DictionaryRef *)__p, (uint64_t)this, 1);
  if (!__p[0])
  {
    if (getAUSoundIsolationLog(void)::onceToken != -1)
      dispatch_once(&getAUSoundIsolationLog(void)::onceToken, &__block_literal_global_40);
    v145 = (id)getAUSoundIsolationLog(void)::gLog;
    if (os_log_type_enabled(v145, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)v313 = 136315394;
      *(_QWORD *)&v313[4] = "AUSoundIsolation.mm";
      *(_WORD *)&v313[12] = 1024;
      *(_DWORD *)&v313[14] = 1478;
      _os_log_error_impl(&dword_1B5ED0000, v145, OS_LOG_TYPE_ERROR, "%s:%i failed to load nnet preset", v313, 0x12u);
    }

    goto LABEL_507;
  }
  if (getAUSoundIsolationLog(void)::onceToken != -1)
    dispatch_once(&getAUSoundIsolationLog(void)::onceToken, &__block_literal_global_40);
  v122 = (id)getAUSoundIsolationLog(void)::gLog;
  if (os_log_type_enabled(v122, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)v313 = 136315394;
    *(_QWORD *)&v313[4] = "AUSoundIsolation.mm";
    *(_WORD *)&v313[12] = 1024;
    *(_DWORD *)&v313[14] = 1482;
    _os_log_debug_impl(&dword_1B5ED0000, v122, OS_LOG_TYPE_DEBUG, "%s:%i setup processing boxes", v313, 0x12u);
  }

  v124 = (uint64_t *)*((_QWORD *)&v299 + 1);
  v123 = (uint64_t *)v299;
  if ((_QWORD)v299 != *((_QWORD *)&v299 + 1))
  {
    while (1)
    {
      v125 = DSPGraph::Graph::box();
      if (!v125)
        break;
      v126 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v125 + 216))(v125);
      (*(void (**)(uint64_t, uint64_t, _QWORD, _QWORD, uint64_t, CFMutableDictionaryRef *))(*(_QWORD *)v126
                                                                                                  + 312))(v126, 3697, 0, 0, 8, &theDict);
      v127 = v311[23];
      if (v311[23] >= 0)
        v128 = v311[23];
      else
        v128 = *(_QWORD *)&v311[8];
      if (v128)
      {
        *(_QWORD *)v313 = operator new(0x20uLL);
        *(_OWORD *)&v313[8] = xmmword_1B66A1FF0;
        strcpy(*(char **)v313, "/System/Library/Audio/Tunings");
        if (v127 >= 0)
          v129 = v311;
        else
          v129 = *(const std::string::value_type **)v311;
        v130 = std::string::insert((std::string *)v313, 0, v129, v128);
        v131 = *(_OWORD *)&v130->__r_.__value_.__l.__data_;
        __str.__r_.__value_.__r.__words[2] = v130->__r_.__value_.__r.__words[2];
        *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v131;
        v130->__r_.__value_.__l.__size_ = 0;
        v130->__r_.__value_.__r.__words[2] = 0;
        v130->__r_.__value_.__r.__words[0] = 0;
        if ((v313[23] & 0x80000000) != 0)
          operator delete(*(void **)v313);
        if (getAUSoundIsolationLog(void)::onceToken != -1)
          dispatch_once(&getAUSoundIsolationLog(void)::onceToken, &__block_literal_global_40);
        v132 = (id)getAUSoundIsolationLog(void)::gLog;
        if (os_log_type_enabled(v132, OS_LOG_TYPE_DEBUG))
        {
          v136 = v123;
          if (*((char *)v123 + 23) < 0)
            v136 = (uint64_t *)*v123;
          v137 = &__str;
          if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
            v137 = (std::string *)__str.__r_.__value_.__r.__words[0];
          *(_DWORD *)v313 = 136315906;
          *(_QWORD *)&v313[4] = "AUSoundIsolation.mm";
          *(_WORD *)&v313[12] = 1024;
          *(_DWORD *)&v313[14] = 1497;
          *(_WORD *)&v313[18] = 2080;
          *(_QWORD *)&v313[20] = v136;
          *(_WORD *)&v313[28] = 2080;
          v314 = v137;
          _os_log_debug_impl(&dword_1B5ED0000, v132, OS_LOG_TYPE_DEBUG, "%s:%i set modelNetPathBase override on box (%s) to (%s)", v313, 0x26u);
        }

        if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v133 = &__str;
        else
          v133 = (std::string *)__str.__r_.__value_.__r.__words[0];
        if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v134 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
        else
          v134 = __str.__r_.__value_.__l.__size_;
        *(_QWORD *)v313 = CFStringCreateWithBytes(0, (const UInt8 *)v133, v134, 0x8000100u, 0);
        if (!*(_QWORD *)v313)
        {
          v253 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(v253, "Could not construct");
        }
        (*(void (**)(uint64_t, uint64_t, _QWORD, _QWORD, uint64_t, _BYTE *))(*(_QWORD *)v126 + 312))(v126, 40000, 0, 0, 8, v313);
        if (*(_QWORD *)v313)
          CFRelease(*(CFTypeRef *)v313);
        if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__str.__r_.__value_.__l.__data_);
      }
      *(_DWORD *)v313 = 2;
      if (std::__tree<std::__value_type<AUSoundIsolation::BoxTuningType,applesauce::CF::StringRef>,std::__map_value_compare<AUSoundIsolation::BoxTuningType,std::__value_type<AUSoundIsolation::BoxTuningType,applesauce::CF::StringRef>,std::less<AUSoundIsolation::BoxTuningType>,true>,std::allocator<std::__value_type<AUSoundIsolation::BoxTuningType,applesauce::CF::StringRef>>>::__emplace_unique_key_args<AUSoundIsolation::BoxTuningType,std::piecewise_construct_t const&,std::tuple<AUSoundIsolation::BoxTuningType&&>,std::tuple<>>((uint64_t **)this + 85, 2, v313)[5])
      {
        if (getAUSoundIsolationLog(void)::onceToken != -1)
          dispatch_once(&getAUSoundIsolationLog(void)::onceToken, &__block_literal_global_40);
        v135 = (id)getAUSoundIsolationLog(void)::gLog;
        if (os_log_type_enabled(v135, OS_LOG_TYPE_DEBUG))
        {
          v138 = v123;
          if (*((char *)v123 + 23) < 0)
            v138 = (uint64_t *)*v123;
          LODWORD(v297.__r_.__value_.__l.__data_) = 2;
          v139 = (const __CFString *)std::__tree<std::__value_type<AUSoundIsolation::BoxTuningType,applesauce::CF::StringRef>,std::__map_value_compare<AUSoundIsolation::BoxTuningType,std::__value_type<AUSoundIsolation::BoxTuningType,applesauce::CF::StringRef>,std::less<AUSoundIsolation::BoxTuningType>,true>,std::allocator<std::__value_type<AUSoundIsolation::BoxTuningType,applesauce::CF::StringRef>>>::__emplace_unique_key_args<AUSoundIsolation::BoxTuningType,std::piecewise_construct_t const&,std::tuple<AUSoundIsolation::BoxTuningType&&>,std::tuple<>>((uint64_t **)this + 85, 2, &v297)[5];
          if (!v139)
          {
            v254 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
            std::runtime_error::runtime_error(v254, "Could not construct");
          }
          applesauce::CF::convert_to<std::string,0>(v139, (uint64_t)&__str);
          v140 = &__str;
          if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
            v140 = (std::string *)__str.__r_.__value_.__r.__words[0];
          *(_DWORD *)v313 = 136315906;
          *(_QWORD *)&v313[4] = "AUSoundIsolation.mm";
          *(_WORD *)&v313[12] = 1024;
          *(_DWORD *)&v313[14] = 1504;
          *(_WORD *)&v313[18] = 2080;
          *(_QWORD *)&v313[20] = v138;
          *(_WORD *)&v313[28] = 2080;
          v314 = v140;
          _os_log_debug_impl(&dword_1B5ED0000, v135, OS_LOG_TYPE_DEBUG, "%s:%i set modelNetPathBase override on box (%s) to (%s)", v313, 0x26u);
          if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__str.__r_.__value_.__l.__data_);
        }

        *(_QWORD *)v313 = 0;
        LODWORD(__str.__r_.__value_.__l.__data_) = 2;
        *(_QWORD *)v313 = std::__tree<std::__value_type<AUSoundIsolation::BoxTuningType,applesauce::CF::StringRef>,std::__map_value_compare<AUSoundIsolation::BoxTuningType,std::__value_type<AUSoundIsolation::BoxTuningType,applesauce::CF::StringRef>,std::less<AUSoundIsolation::BoxTuningType>,true>,std::allocator<std::__value_type<AUSoundIsolation::BoxTuningType,applesauce::CF::StringRef>>>::__emplace_unique_key_args<AUSoundIsolation::BoxTuningType,std::piecewise_construct_t const&,std::tuple<AUSoundIsolation::BoxTuningType&&>,std::tuple<>>((uint64_t **)this + 85, 2, &__str)[5];
        (*(void (**)(uint64_t, uint64_t, _QWORD, _QWORD, uint64_t, _BYTE *))(*(_QWORD *)v126 + 312))(v126, 40000, 0, 0, 8, v313);
      }
      (*(void (**)(uint64_t, void *))(*(_QWORD *)v126 + 352))(v126, __p[0]);
      if ((v311[23] & 0x80000000) != 0)
        operator delete(*(void **)v311);
      v123 += 3;
      if (v123 == v124)
        goto LABEL_447;
    }
    if (getAUSoundIsolationLog(void)::onceToken != -1)
      dispatch_once(&getAUSoundIsolationLog(void)::onceToken, &__block_literal_global_40);
    v147 = (id)getAUSoundIsolationLog(void)::gLog;
    if (os_log_type_enabled(v147, OS_LOG_TYPE_ERROR))
    {
      if (*((char *)v123 + 23) < 0)
        v123 = (uint64_t *)*v123;
      *(_DWORD *)v313 = 136315650;
      *(_QWORD *)&v313[4] = "AUSoundIsolation.mm";
      *(_WORD *)&v313[12] = 1024;
      *(_DWORD *)&v313[14] = 1512;
      *(_WORD *)&v313[18] = 2080;
      *(_QWORD *)&v313[20] = v123;
      _os_log_error_impl(&dword_1B5ED0000, v147, OS_LOG_TYPE_ERROR, "%s:%i couldn't find processing box (%s)", v313, 0x1Cu);
    }

    goto LABEL_507;
  }
LABEL_447:
  if (getAUSoundIsolationLog(void)::onceToken != -1)
    dispatch_once(&getAUSoundIsolationLog(void)::onceToken, &__block_literal_global_40);
  v141 = (id)getAUSoundIsolationLog(void)::gLog;
  if (os_log_type_enabled(v141, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)v313 = 136315394;
    *(_QWORD *)&v313[4] = "AUSoundIsolation.mm";
    *(_WORD *)&v313[12] = 1024;
    *(_DWORD *)&v313[14] = 1517;
    _os_log_debug_impl(&dword_1B5ED0000, v141, OS_LOG_TYPE_DEBUG, "%s:%i configure & initialize processing graph", v313, 0x12u);
  }

  DSPGraph::Graph::configure(*((DSPGraph::Graph **)this + 76));
  if (v265 >= 2 && *((_DWORD *)this + 146) == 1)
  {
    getAUSoundIsolationLog();
    v142 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v142, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)v313 = 136315394;
      *(_QWORD *)&v313[4] = "AUSoundIsolation.mm";
      *(_WORD *)&v313[12] = 1024;
      *(_DWORD *)&v313[14] = 1525;
      _os_log_debug_impl(&dword_1B5ED0000, v142, OS_LOG_TYPE_DEBUG, "%s:%i setup MWF box", v313, 0x12u);
    }

    v143 = (const __CFDictionary **)applesauce::CF::DictionaryRef::operator->(&v275);
    v144 = applesauce::CF::details::find_at_key<int,char const(&)[14]>(*v143);
    if (SHIBYTE(v307) < 0)
    {
      std::string::__init_copy_ctor_external((std::string *)v311, (const std::string::value_type *)v306, *((std::string::size_type *)&v306 + 1));
    }
    else
    {
      *(_OWORD *)v311 = v306;
      *(_QWORD *)&v311[16] = v307;
    }
    v156 = DSPGraph::Graph::box();
    if (v156)
    {
      (*(void (**)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, float))(*(_QWORD *)v156 + 80))(v156, 0, 0, 0, 0, (float)v144);
      AUSoundIsolation::GetTuningDictionaryRef((applesauce::CF::DictionaryRef *)&v297, (uint64_t)this, 4);
      if (v297.__r_.__value_.__r.__words[0])
      {
        if (SHIBYTE(v303.__r_.__value_.__r.__words[2]) < 0)
          std::string::__init_copy_ctor_external(&__str, v303.__r_.__value_.__l.__data_, v303.__r_.__value_.__l.__size_);
        else
          __str = v303;
        v160 = DSPGraph::Graph::box();
        if (v160)
        {
          v161 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v160 + 216))(v160);
          (*(void (**)(uint64_t, std::string::size_type))(*(_QWORD *)v161 + 352))(v161, v297.__r_.__value_.__r.__words[0]);
          v158 = 0;
        }
        else
        {
          getAUSoundIsolationLog();
          v162 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v162, OS_LOG_TYPE_ERROR))
          {
            v247 = &__str;
            if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
              v247 = (std::string *)__str.__r_.__value_.__r.__words[0];
            *(_DWORD *)v313 = 136315650;
            *(_QWORD *)&v313[4] = "AUSoundIsolation.mm";
            *(_WORD *)&v313[12] = 1024;
            *(_DWORD *)&v313[14] = 1549;
            *(_WORD *)&v313[18] = 2080;
            *(_QWORD *)&v313[20] = v247;
            _os_log_error_impl(&dword_1B5ED0000, v162, OS_LOG_TYPE_ERROR, "%s:%i couldn't find box (%s)", v313, 0x1Cu);
          }

          v158 = 1;
        }
        if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__str.__r_.__value_.__l.__data_);
      }
      else
      {
        getAUSoundIsolationLog();
        v159 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v159, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)v313 = 136315394;
          *(_QWORD *)&v313[4] = "AUSoundIsolation.mm";
          *(_WORD *)&v313[12] = 1024;
          *(_DWORD *)&v313[14] = 1542;
          _os_log_error_impl(&dword_1B5ED0000, v159, OS_LOG_TYPE_ERROR, "%s:%i failed to load dnos preset", v313, 0x12u);
        }

        v158 = 1;
      }
      applesauce::CF::DictionaryRef::~DictionaryRef((const void **)&v297.__r_.__value_.__l.__data_);
    }
    else
    {
      getAUSoundIsolationLog();
      v157 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v157, OS_LOG_TYPE_ERROR))
      {
        v246 = v311;
        if (v311[23] < 0)
          v246 = *(_BYTE **)v311;
        *(_DWORD *)v313 = 136315650;
        *(_QWORD *)&v313[4] = "AUSoundIsolation.mm";
        *(_WORD *)&v313[12] = 1024;
        *(_DWORD *)&v313[14] = 1534;
        *(_WORD *)&v313[18] = 2080;
        *(_QWORD *)&v313[20] = v246;
        _os_log_error_impl(&dword_1B5ED0000, v157, OS_LOG_TYPE_ERROR, "%s:%i couldn't find delay box %s", v313, 0x1Cu);
      }

      v158 = 1;
    }
    if ((v311[23] & 0x80000000) != 0)
      operator delete(*(void **)v311);
    if (v158)
      goto LABEL_507;
    v146 = 1;
  }
  else
  {
    v146 = 0;
  }
  DSPGraph::Graph::initialize(*((DSPGraph::Graph **)this + 76));
  if (!v146)
  {
LABEL_477:
    v152 = 1;
    goto LABEL_508;
  }
  if (SHIBYTE(v307) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)v311, (const std::string::value_type *)v306, *((std::string::size_type *)&v306 + 1));
  }
  else
  {
    *(_OWORD *)v311 = v306;
    *(_QWORD *)&v311[16] = v307;
  }
  v149 = (DSPGraph::Box *)DSPGraph::Graph::box();
  v150 = (DSPGraph::Box *)DSPGraph::Graph::box();
  v151 = (*(uint64_t (**)(DSPGraph::Box *))(*(_QWORD *)v149 + 72))(v149);
  if (v151 == (*(uint64_t (**)(DSPGraph::Box *))(*(_QWORD *)v150 + 72))(v150))
  {
    if ((v311[23] & 0x80000000) != 0)
      operator delete(*(void **)v311);
    goto LABEL_477;
  }
  getAUSoundIsolationLog();
  v153 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v153, OS_LOG_TYPE_ERROR))
  {
    if (v311[23] >= 0)
      v237 = v311;
    else
      v237 = *(_BYTE **)v311;
    DSPGraph::Box::selfLatencyInSeconds(v149);
    v239 = v238;
    v240 = (*(uint64_t (**)(DSPGraph::Box *))(*(_QWORD *)v149 + 72))(v149);
    *(_DWORD *)v313 = 136316162;
    *(_QWORD *)&v313[4] = "AUSoundIsolation.mm";
    *(_WORD *)&v313[12] = 1024;
    *(_DWORD *)&v313[14] = 1573;
    *(_WORD *)&v313[18] = 2080;
    *(_QWORD *)&v313[20] = v237;
    *(_WORD *)&v313[28] = 2048;
    v314 = v239;
    v315 = 1024;
    v316 = v240;
    _os_log_error_impl(&dword_1B5ED0000, v153, OS_LOG_TYPE_ERROR, "%s:%i Delay box %s latency: %f seconds (%u ticks)", v313, 0x2Cu);
  }

  getAUSoundIsolationLog();
  v154 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v154, OS_LOG_TYPE_ERROR))
  {
    v241 = v299;
    if (*(char *)(v299 + 23) < 0)
      v241 = *(_QWORD *)v299;
    DSPGraph::Box::selfLatencyInSeconds(v150);
    v243 = v242;
    v244 = (*(uint64_t (**)(DSPGraph::Box *))(*(_QWORD *)v150 + 72))(v150);
    *(_DWORD *)v313 = 136316162;
    *(_QWORD *)&v313[4] = "AUSoundIsolation.mm";
    *(_WORD *)&v313[12] = 1024;
    *(_DWORD *)&v313[14] = 1574;
    *(_WORD *)&v313[18] = 2080;
    *(_QWORD *)&v313[20] = v241;
    *(_WORD *)&v313[28] = 2048;
    v314 = v243;
    v315 = 1024;
    v316 = v244;
    _os_log_error_impl(&dword_1B5ED0000, v154, OS_LOG_TYPE_ERROR, "%s:%i Processing box %s latency: %f seconds (%u ticks)", v313, 0x2Cu);
  }

  getAUSoundIsolationLog();
  v155 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v155, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)v313 = 136315394;
    *(_QWORD *)&v313[4] = "AUSoundIsolation.mm";
    *(_WORD *)&v313[12] = 1024;
    *(_DWORD *)&v313[14] = 1575;
    _os_log_error_impl(&dword_1B5ED0000, v155, OS_LOG_TYPE_ERROR, "%s:%i Delay is not matching processing box latency!", v313, 0x12u);
  }

  if ((v311[23] & 0x80000000) != 0)
    operator delete(*(void **)v311);
LABEL_507:
  v152 = 0;
LABEL_508:
  if (__p[0])
    CFRelease(__p[0]);
  if ((v152 & 1) == 0)
    goto LABEL_667;
  if (getAUSoundIsolationLog(void)::onceToken != -1)
    dispatch_once(&getAUSoundIsolationLog(void)::onceToken, &__block_literal_global_40);
  v163 = (id)getAUSoundIsolationLog(void)::gLog;
  if (os_log_type_enabled(v163, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)v313 = 136315394;
    *(_QWORD *)&v313[4] = "AUSoundIsolation.mm";
    *(_WORD *)&v313[12] = 1024;
    *(_DWORD *)&v313[14] = 1607;
    _os_log_debug_impl(&dword_1B5ED0000, v163, OS_LOG_TYPE_DEBUG, "%s:%i create blending graph for input/processed mix", v313, 0x12u);
  }

  if (getAUSoundIsolationLog(void)::onceToken != -1)
    dispatch_once(&getAUSoundIsolationLog(void)::onceToken, &__block_literal_global_23570);
  v164 = getAUSoundIsolationLog(void)::gLog;
  if (os_log_type_enabled((os_log_t)getAUSoundIsolationLog(void)::gLog, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)v313 = 136315394;
    *(_QWORD *)&v313[4] = "SoundIsolationGraphAdapter.cpp";
    *(_WORD *)&v313[12] = 1024;
    *(_DWORD *)&v313[14] = 382;
    _os_log_debug_impl(&dword_1B5ED0000, v164, OS_LOG_TYPE_DEBUG, "%s:%i create blending graph", v313, 0x12u);
  }
  v165 = operator new();
  MEMORY[0x1BCC95308]();
  v166 = (_QWORD *)(v165 + 408);
  std::string::__assign_external((std::string *)(v165 + 408), "AUSoundIsolation_blending", 0x19uLL);
  if (getAUSoundIsolationLog(void)::onceToken != -1)
    dispatch_once(&getAUSoundIsolationLog(void)::onceToken, &__block_literal_global_23570);
  v167 = getAUSoundIsolationLog(void)::gLog;
  if (os_log_type_enabled((os_log_t)getAUSoundIsolationLog(void)::gLog, OS_LOG_TYPE_DEBUG))
  {
    if (*(char *)(v165 + 431) < 0)
      v166 = (_QWORD *)*v166;
    *(_DWORD *)v313 = 136315650;
    *(_QWORD *)&v313[4] = "SoundIsolationGraphAdapter.cpp";
    *(_WORD *)&v313[12] = 1024;
    *(_DWORD *)&v313[14] = 386;
    *(_WORD *)&v313[18] = 2080;
    *(_QWORD *)&v313[20] = v166;
    _os_log_debug_impl(&dword_1B5ED0000, v167, OS_LOG_TYPE_DEBUG, "%s:%i graph name set to (%s)", v313, 0x1Cu);
  }
  MEMORY[0x1BCC95170](v313);
  std::string::basic_string[abi:ne180100]<0>(&__str, "output");
  DSPGraph::Graph::addOutput();
  std::vector<std::string>::resize((std::vector<std::string> *)&v300[1], 2uLL);
  std::vector<std::string>::resize(&v301, 2uLL);
  v168 = 0;
  v169 = 0;
  do
  {
    v170 = v168;
    std::to_string((std::string *)v311, v169);
    v171 = std::string::insert((std::string *)v311, 0, "input_", 6uLL);
    v172 = v171->__r_.__value_.__r.__words[0];
    __p[0] = (void *)v171->__r_.__value_.__l.__size_;
    *(void **)((char *)__p + 7) = *(void **)((char *)&v171->__r_.__value_.__r.__words[1] + 7);
    v173 = HIBYTE(v171->__r_.__value_.__r.__words[2]);
    v171->__r_.__value_.__l.__size_ = 0;
    v171->__r_.__value_.__r.__words[2] = 0;
    v171->__r_.__value_.__r.__words[0] = 0;
    v174 = v300[1] + 24 * v169;
    if (*(char *)(v174 + 23) < 0)
      operator delete(*(void **)v174);
    *(_QWORD *)v174 = v172;
    *(void **)(v174 + 8) = __p[0];
    *(void **)(v174 + 15) = *(void **)((char *)__p + 7);
    *(_BYTE *)(v174 + 23) = v173;
    if ((v311[23] & 0x80000000) != 0)
      operator delete(*(void **)v311);
    std::to_string((std::string *)v311, v169);
    v175 = std::string::insert((std::string *)v311, 0, "delay_", 6uLL);
    v176 = v175->__r_.__value_.__r.__words[0];
    __p[0] = (void *)v175->__r_.__value_.__l.__size_;
    *(void **)((char *)__p + 7) = *(void **)((char *)&v175->__r_.__value_.__r.__words[1] + 7);
    v177 = HIBYTE(v175->__r_.__value_.__r.__words[2]);
    v175->__r_.__value_.__l.__size_ = 0;
    v175->__r_.__value_.__r.__words[2] = 0;
    v175->__r_.__value_.__r.__words[0] = 0;
    v178 = &v301.__begin_[v169];
    if (SHIBYTE(v178->__r_.__value_.__r.__words[2]) < 0)
      operator delete(v178->__r_.__value_.__l.__data_);
    v178->__r_.__value_.__r.__words[0] = v176;
    v178->__r_.__value_.__l.__size_ = (std::string::size_type)__p[0];
    *(std::string::size_type *)((char *)&v178->__r_.__value_.__r.__words[1] + 7) = *(std::string::size_type *)((char *)__p + 7);
    *((_BYTE *)&v178->__r_.__value_.__s + 23) = v177;
    if ((v311[23] & 0x80000000) != 0)
      operator delete(*(void **)v311);
    DSPGraph::Graph::addInput();
    std::string::basic_string[abi:ne180100]<0>(v311, "delay");
    DSPGraph::NewBoxRegistry::newBox();
    DSPGraph::Graph::add();
    if ((v311[23] & 0x80000000) != 0)
      operator delete(*(void **)v311);
    *(double *)v311 = v3;
    *(_DWORD *)&v311[8] = v268;
    *(_DWORD *)&v311[12] = v271;
    *(_QWORD *)&v311[16] = v266;
    *(_DWORD *)&v311[24] = v267;
    *(_DWORD *)&v311[28] = v269;
    *(_QWORD *)&v311[32] = v270;
    v312 = 1;
    DSPGraph::Graph::connect();
    v168 = 1;
    v169 = 1;
  }
  while ((v170 & 1) == 0);
  std::string::basic_string[abi:ne180100]<0>(v311, "mix");
  DSPGraph::NewBoxRegistry::newBox();
  DSPGraph::Graph::add();
  if ((v311[23] & 0x80000000) != 0)
    operator delete(*(void **)v311);
  if ((v271 & 0x20) != 0)
  {
    v181 = 0;
    do
    {
      v182 = v181;
      *(double *)v311 = v3;
      *(_DWORD *)&v311[8] = v268;
      *(_DWORD *)&v311[12] = v271;
      *(_QWORD *)&v311[16] = v266;
      *(_DWORD *)&v311[24] = v267;
      *(_DWORD *)&v311[28] = v269;
      *(_QWORD *)&v311[32] = v270;
      v312 = 1;
      DSPGraph::Graph::connect();
      v181 = 1;
    }
    while ((v182 & 1) == 0);
    *(double *)v311 = v3;
    *(_DWORD *)&v311[8] = v268;
    *(_DWORD *)&v311[12] = v271;
    *(_QWORD *)&v311[16] = v266;
    *(_DWORD *)&v311[24] = v267;
    *(_DWORD *)&v311[28] = v269;
    *(_QWORD *)&v311[32] = v270;
    v312 = 1;
    DSPGraph::Graph::connect();
  }
  else
  {
    if (v269 <= 1)
      v179 = 1;
    else
      v179 = v269;
    if (v269)
      v180 = v267 / v269;
    else
      v180 = (v270 + 7) >> 3;
    v183 = 0;
    v184 = 0;
    do
    {
      v185 = v183;
      std::to_string((std::string *)v311, v184);
      v186 = std::string::insert((std::string *)v311, 0, "inputInterleaver_", 0x11uLL);
      v187 = *(_OWORD *)&v186->__r_.__value_.__l.__data_;
      __p[2] = (void *)v186->__r_.__value_.__r.__words[2];
      *(_OWORD *)__p = v187;
      v186->__r_.__value_.__l.__size_ = 0;
      v186->__r_.__value_.__r.__words[2] = 0;
      v186->__r_.__value_.__r.__words[0] = 0;
      if ((v311[23] & 0x80000000) != 0)
        operator delete(*(void **)v311);
      std::string::basic_string[abi:ne180100]<0>(v311, "srlconverter");
      DSPGraph::NewBoxRegistry::newBox();
      DSPGraph::Graph::add();
      if ((v311[23] & 0x80000000) != 0)
        operator delete(*(void **)v311);
      *(double *)v311 = v3;
      *(_DWORD *)&v311[8] = v268;
      *(_DWORD *)&v311[12] = v271;
      *(_QWORD *)&v311[16] = v266;
      *(_DWORD *)&v311[24] = v267;
      *(_DWORD *)&v311[28] = v269;
      *(_QWORD *)&v311[32] = v270;
      v312 = 1;
      DSPGraph::Graph::connect();
      *(double *)v311 = v3;
      *(_DWORD *)&v311[8] = v268;
      *(_DWORD *)&v311[12] = v271 | 0x20;
      *(_DWORD *)&v311[16] = v180;
      *(_DWORD *)&v311[20] = 1;
      *(_DWORD *)&v311[24] = v180;
      *(_DWORD *)&v311[28] = v179;
      *(_QWORD *)&v311[32] = v270;
      v312 = 1;
      DSPGraph::Graph::connect();
      if (SHIBYTE(__p[2]) < 0)
        operator delete(__p[0]);
      v183 = 1;
      v184 = 1;
    }
    while ((v185 & 1) == 0);
    std::string::basic_string[abi:ne180100]<0>(__p, "outputInterleaver");
    std::string::basic_string[abi:ne180100]<0>(v311, "srlconverter");
    DSPGraph::NewBoxRegistry::newBox();
    DSPGraph::Graph::add();
    if ((v311[23] & 0x80000000) != 0)
      operator delete(*(void **)v311);
    *(double *)v311 = v3;
    *(_DWORD *)&v311[8] = v268;
    *(_DWORD *)&v311[12] = v271 | 0x20;
    *(_DWORD *)&v311[16] = v180;
    *(_DWORD *)&v311[20] = 1;
    *(_DWORD *)&v311[24] = v180;
    *(_DWORD *)&v311[28] = v179;
    *(_QWORD *)&v311[32] = v270;
    v312 = 1;
    DSPGraph::Graph::connect();
    *(double *)v311 = v3;
    *(_DWORD *)&v311[8] = v268;
    *(_DWORD *)&v311[12] = v271;
    *(_QWORD *)&v311[16] = v266;
    *(_DWORD *)&v311[24] = v267;
    *(_DWORD *)&v311[28] = v269;
    *(_QWORD *)&v311[32] = v270;
    v312 = 1;
    DSPGraph::Graph::connect();
    if (SHIBYTE(__p[2]) < 0)
      operator delete(__p[0]);
  }
  if (getAUSoundIsolationLog(void)::onceToken != -1)
    dispatch_once(&getAUSoundIsolationLog(void)::onceToken, &__block_literal_global_23570);
  v188 = getAUSoundIsolationLog(void)::gLog;
  if (os_log_type_enabled((os_log_t)getAUSoundIsolationLog(void)::gLog, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)v311 = 136315394;
    *(_QWORD *)&v311[4] = "SoundIsolationGraphAdapter.cpp";
    *(_WORD *)&v311[12] = 1024;
    *(_DWORD *)&v311[14] = 440;
    _os_log_debug_impl(&dword_1B5ED0000, v188, OS_LOG_TYPE_DEBUG, "%s:%i blending graph created", v311, 0x12u);
  }
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  *(_QWORD *)v313 = MEMORY[0x1E0CFFC40] + 16;
  *(_QWORD *)v311 = v318;
  std::vector<std::pair<std::string,AudioComponentDescription>>::__destroy_vector::operator()[abi:ne180100]((void ***)v311);
  std::__hash_table<std::__hash_value_type<AudioComponentDescription,std::function<DSPGraph::Box * ()(unsigned int,unsigned int)>>,std::__unordered_map_hasher<AudioComponentDescription,std::__hash_value_type<AudioComponentDescription,std::function<DSPGraph::Box * ()(unsigned int,unsigned int)>>,std::hash<AudioComponentDescription>,DSPGraph::NewBoxRegistry::AudioComponentDescriptionEquality,true>,std::__unordered_map_equal<AudioComponentDescription,std::__hash_value_type<AudioComponentDescription,std::function<DSPGraph::Box * ()(unsigned int,unsigned int)>>,DSPGraph::NewBoxRegistry::AudioComponentDescriptionEquality,std::hash<AudioComponentDescription>,true>,std::allocator<std::__hash_value_type<AudioComponentDescription,std::function<DSPGraph::Box * ()(unsigned int,unsigned int)>>>>::~__hash_table((uint64_t)v317);
  std::__hash_table<std::__hash_value_type<std::string,std::function<DSPGraph::Box * ()(unsigned int,unsigned int)>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::function<DSPGraph::Box * ()(unsigned int,unsigned int)>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::function<DSPGraph::Box * ()(unsigned int,unsigned int)>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::function<DSPGraph::Box * ()(unsigned int,unsigned int)>>>>::~__hash_table((uint64_t)&v313[8]);
  v189 = *((_QWORD *)v263 + 77);
  *((_QWORD *)v263 + 77) = v165;
  if (!v189)
  {
    v190 = getAUSoundIsolationLog(void)::onceToken;
LABEL_572:
    if (v190 != -1)
      dispatch_once(&getAUSoundIsolationLog(void)::onceToken, &__block_literal_global_40);
    v192 = (id)getAUSoundIsolationLog(void)::gLog;
    if (os_log_type_enabled(v192, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)v313 = 136315394;
      *(_QWORD *)&v313[4] = "AUSoundIsolation.mm";
      *(_WORD *)&v313[12] = 1024;
      *(_DWORD *)&v313[14] = 1615;
      _os_log_debug_impl(&dword_1B5ED0000, v192, OS_LOG_TYPE_DEBUG, "%s:%i setup blending graph", v313, 0x12u);
    }

    v193 = (DSPGraph::Graph *)*((_QWORD *)v263 + 77);
    if (v193 && DSPGraph::Graph::out(v193))
      ProcessingGraphOutput = DSPGraph::Graph::out(*((DSPGraph::Graph **)v263 + 77));
    else
      ProcessingGraphOutput = 0;
    v194 = *(_QWORD *)(ProcessingGraphOutput + 64);
    if (*(_QWORD *)(ProcessingGraphOutput + 72) == v194)
    {
      std::string::basic_string[abi:ne180100]<0>(v311, "/AppleInternal/Library/BuildRoots/c7268dd4-5656-11ef-b8ac-76625042721f/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS18.0.Internal.sdk/System/Library/PrivateFrameworks/AudioToolboxCore.framework/PrivateHeaders/DSPGraph_Box.h");
      std::string::basic_string[abi:ne180100]<0>(v313, "in");
      v260 = (_QWORD *)(ProcessingGraphOutput + 32);
      if (*(char *)(ProcessingGraphOutput + 55) < 0)
        v260 = (_QWORD *)*v260;
    }
    else
    {
      v195 = **(double **)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v194 + 40))(v194) + 120);
      v196 = *((_BYTE *)v263 + 376) == 0;
      if (getAUSoundIsolationLog(void)::onceToken != -1)
        dispatch_once(&getAUSoundIsolationLog(void)::onceToken, &__block_literal_global_40);
      v197 = (id)getAUSoundIsolationLog(void)::gLog;
      if (os_log_type_enabled(v197, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)v313 = 136316162;
        *(_QWORD *)&v313[4] = "AUSoundIsolation.mm";
        *(_WORD *)&v313[12] = 1024;
        *(_DWORD *)&v313[14] = 1620;
        *(_WORD *)&v313[18] = 1024;
        *(_DWORD *)&v313[20] = v261;
        *(_WORD *)&v313[24] = 1024;
        *(_DWORD *)&v313[26] = v195;
        LOWORD(v314) = 1024;
        *(_DWORD *)((char *)&v314 + 2) = v196;
        _os_log_debug_impl(&dword_1B5ED0000, v197, OS_LOG_TYPE_DEBUG, "%s:%i setting blending graph slice timing with max slice duration (%u), sample rate (%u), slice policy (%u)", v313, 0x24u);
      }

      DSPGraph::Graph::setSliceDuration();
      *(_BYTE *)(*((_QWORD *)v263 + 77) + 765) = 1;
      if (getAUSoundIsolationLog(void)::onceToken != -1)
        dispatch_once(&getAUSoundIsolationLog(void)::onceToken, &__block_literal_global_40);
      v198 = (id)getAUSoundIsolationLog(void)::gLog;
      if (os_log_type_enabled(v198, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)v313 = 136315394;
        *(_QWORD *)&v313[4] = "AUSoundIsolation.mm";
        *(_WORD *)&v313[12] = 1024;
        *(_DWORD *)&v313[14] = 1625;
        _os_log_debug_impl(&dword_1B5ED0000, v198, OS_LOG_TYPE_DEBUG, "%s:%i configure blending graph", v313, 0x12u);
      }

      DSPGraph::Graph::configure(*((DSPGraph::Graph **)v263 + 77));
      std::string::operator=((std::string *)v263 + 26, &v302);
      v199 = (DSPGraph::Box *)AUSoundIsolation::GetProcessingGraphOutput(v263);
      v200 = DSPGraph::Box::totalLatencyInSamples(v199);
      if (getAUSoundIsolationLog(void)::onceToken != -1)
        dispatch_once(&getAUSoundIsolationLog(void)::onceToken, &__block_literal_global_40);
      v201 = (id)getAUSoundIsolationLog(void)::gLog;
      if (os_log_type_enabled(v201, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)v313 = 136315650;
        *(_QWORD *)&v313[4] = "AUSoundIsolation.mm";
        *(_WORD *)&v313[12] = 1024;
        *(_DWORD *)&v313[14] = 1636;
        *(_WORD *)&v313[18] = 1024;
        *(_DWORD *)&v313[20] = v200;
        _os_log_debug_impl(&dword_1B5ED0000, v201, OS_LOG_TYPE_DEBUG, "%s:%i processing graph latency is %u samples", v313, 0x18u);
      }

      if (SHIBYTE(v301.__begin_->__r_.__value_.__r.__words[2]) < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)v311, v301.__begin_->__r_.__value_.__l.__data_, v301.__begin_->__r_.__value_.__l.__size_);
      }
      else
      {
        v202 = *(_OWORD *)&v301.__begin_->__r_.__value_.__l.__data_;
        *(_QWORD *)&v311[16] = *((_QWORD *)&v301.__begin_->__r_.__value_.__l + 2);
        *(_OWORD *)v311 = v202;
      }
      v203 = DSPGraph::Graph::box();
      v204 = v203;
      if (v203)
      {
        (*(void (**)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, float))(*(_QWORD *)v203 + 80))(v203, 0, 0, 0, 0, (float)v200);
        if (getAUSoundIsolationLog(void)::onceToken != -1)
          dispatch_once(&getAUSoundIsolationLog(void)::onceToken, &__block_literal_global_40);
        v205 = (id)getAUSoundIsolationLog(void)::gLog;
        if (os_log_type_enabled(v205, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)v313 = 136315394;
          *(_QWORD *)&v313[4] = "AUSoundIsolation.mm";
          *(_WORD *)&v313[12] = 1024;
          *(_DWORD *)&v313[14] = 1650;
          _os_log_debug_impl(&dword_1B5ED0000, v205, OS_LOG_TYPE_DEBUG, "%s:%i initialize blending graph", v313, 0x12u);
        }

        DSPGraph::Graph::initialize(*((DSPGraph::Graph **)v263 + 77));
        if (getAUSoundIsolationLog(void)::onceToken != -1)
          dispatch_once(&getAUSoundIsolationLog(void)::onceToken, &__block_literal_global_40);
        v206 = (id)getAUSoundIsolationLog(void)::gLog;
        if (os_log_type_enabled(v206, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)v313 = 136315394;
          *(_QWORD *)&v313[4] = "AUSoundIsolation.mm";
          *(_WORD *)&v313[12] = 1024;
          *(_DWORD *)&v313[14] = 1654;
          _os_log_debug_impl(&dword_1B5ED0000, v206, OS_LOG_TYPE_DEBUG, "%s:%i set the blending parameter", v313, 0x12u);
        }

        v207 = *((float *)v263 + 143);
        v208 = DSPGraph::Graph::box();
        v209 = v208;
        v210 = v207 / 100.0;
        v211.n128_u32[0] = 1.0;
        if (v210 > 0.0)
          v211.n128_f32[0] = 1.0 - v210;
        (*(void (**)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, __n128))(*(_QWORD *)v208 + 80))(v208, 0, 0, 0, 0, v211);
        (*(void (**)(uint64_t, _QWORD, _QWORD, uint64_t, _QWORD, float))(*(_QWORD *)v209 + 80))(v209, 0, 0, 1, 0, v210);
      }
      else
      {
        getAUSoundIsolationLog();
        v212 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v212, OS_LOG_TYPE_ERROR))
        {
          v236 = v311;
          if (v311[23] < 0)
            v236 = *(_BYTE **)v311;
          *(_DWORD *)v313 = 136315650;
          *(_QWORD *)&v313[4] = "AUSoundIsolation.mm";
          *(_WORD *)&v313[12] = 1024;
          *(_DWORD *)&v313[14] = 1646;
          *(_WORD *)&v313[18] = 2080;
          *(_QWORD *)&v313[20] = v236;
          _os_log_error_impl(&dword_1B5ED0000, v212, OS_LOG_TYPE_ERROR, "%s:%i couldn't find delay box %s", v313, 0x1Cu);
        }

      }
      if ((v311[23] & 0x80000000) != 0)
        operator delete(*(void **)v311);
      if (!v204)
        goto LABEL_667;
      if (getAUSoundIsolationLog(void)::onceToken != -1)
        dispatch_once(&getAUSoundIsolationLog(void)::onceToken, &__block_literal_global_40);
      v213 = (id)getAUSoundIsolationLog(void)::gLog;
      if (os_log_type_enabled(v213, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)v313 = 136315394;
        *(_QWORD *)&v313[4] = "AUSoundIsolation.mm";
        *(_WORD *)&v313[12] = 1024;
        *(_DWORD *)&v313[14] = 1682;
        _os_log_debug_impl(&dword_1B5ED0000, v213, OS_LOG_TYPE_DEBUG, "%s:%i create bypass with latency graph for input/processed mix", v313, 0x12u);
      }

      if (getAUSoundIsolationLog(void)::onceToken != -1)
        dispatch_once(&getAUSoundIsolationLog(void)::onceToken, &__block_literal_global_23570);
      v214 = getAUSoundIsolationLog(void)::gLog;
      if (os_log_type_enabled((os_log_t)getAUSoundIsolationLog(void)::gLog, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)v313 = 136315394;
        *(_QWORD *)&v313[4] = "SoundIsolationGraphAdapter.cpp";
        *(_WORD *)&v313[12] = 1024;
        *(_DWORD *)&v313[14] = 446;
        _os_log_debug_impl(&dword_1B5ED0000, v214, OS_LOG_TYPE_DEBUG, "%s:%i create bypass graph", v313, 0x12u);
      }
      v215 = operator new();
      MEMORY[0x1BCC95308]();
      v216 = (_QWORD *)(v215 + 408);
      std::string::__assign_external((std::string *)(v215 + 408), "AUSoundIsolation_bypass", 0x17uLL);
      if (getAUSoundIsolationLog(void)::onceToken != -1)
        dispatch_once(&getAUSoundIsolationLog(void)::onceToken, &__block_literal_global_23570);
      v217 = getAUSoundIsolationLog(void)::gLog;
      if (os_log_type_enabled((os_log_t)getAUSoundIsolationLog(void)::gLog, OS_LOG_TYPE_DEBUG))
      {
        if (*(char *)(v215 + 431) < 0)
          v216 = (_QWORD *)*v216;
        *(_DWORD *)v313 = 136315650;
        *(_QWORD *)&v313[4] = "SoundIsolationGraphAdapter.cpp";
        *(_WORD *)&v313[12] = 1024;
        *(_DWORD *)&v313[14] = 450;
        *(_WORD *)&v313[18] = 2080;
        *(_QWORD *)&v313[20] = v216;
        _os_log_debug_impl(&dword_1B5ED0000, v217, OS_LOG_TYPE_DEBUG, "%s:%i graph name set to (%s)", v313, 0x1Cu);
      }
      MEMORY[0x1BCC95170](v313);
      std::string::basic_string[abi:ne180100]<0>(&__str, "input");
      DSPGraph::Graph::addInput();
      std::string::basic_string[abi:ne180100]<0>(__p, "output");
      DSPGraph::Graph::addOutput();
      std::string::basic_string[abi:ne180100]<0>(v311, "delay");
      DSPGraph::NewBoxRegistry::newBox();
      DSPGraph::Graph::add();
      if ((v311[23] & 0x80000000) != 0)
        operator delete(*(void **)v311);
      *(double *)v311 = v3;
      *(_DWORD *)&v311[8] = v268;
      *(_DWORD *)&v311[12] = v271;
      *(_QWORD *)&v311[16] = v266;
      *(_DWORD *)&v311[24] = v267;
      *(_DWORD *)&v311[28] = v269;
      *(_QWORD *)&v311[32] = v270;
      v312 = 1;
      DSPGraph::Graph::connect();
      if (v309 >= 0)
        v218 = (char *)v308;
      else
        v218 = (char *)v308[0];
      std::string::basic_string[abi:ne180100]<0>(&v297, v218);
      if (SHIBYTE(__p[2]) >= 0)
        v219 = (char *)__p;
      else
        v219 = (char *)__p[0];
      std::string::basic_string[abi:ne180100]<0>(v295, v219);
      *(double *)v311 = v3;
      *(_DWORD *)&v311[8] = v268;
      *(_DWORD *)&v311[12] = v271;
      *(_QWORD *)&v311[16] = v266;
      *(_DWORD *)&v311[24] = v267;
      *(_DWORD *)&v311[28] = v269;
      *(_QWORD *)&v311[32] = v270;
      v312 = 1;
      DSPGraph::Graph::connect();
      if (v296 < 0)
        operator delete(v295[0]);
      if (SHIBYTE(v297.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v297.__r_.__value_.__l.__data_);
      if (getAUSoundIsolationLog(void)::onceToken != -1)
        dispatch_once(&getAUSoundIsolationLog(void)::onceToken, &__block_literal_global_23570);
      v220 = getAUSoundIsolationLog(void)::gLog;
      if (os_log_type_enabled((os_log_t)getAUSoundIsolationLog(void)::gLog, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)v311 = 136315394;
        *(_QWORD *)&v311[4] = "SoundIsolationGraphAdapter.cpp";
        *(_WORD *)&v311[12] = 1024;
        *(_DWORD *)&v311[14] = 475;
        _os_log_debug_impl(&dword_1B5ED0000, v220, OS_LOG_TYPE_DEBUG, "%s:%i bypass graph created", v311, 0x12u);
      }
      if (SHIBYTE(__p[2]) < 0)
        operator delete(__p[0]);
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__str.__r_.__value_.__l.__data_);
      *(_QWORD *)v313 = MEMORY[0x1E0CFFC40] + 16;
      *(_QWORD *)v311 = v318;
      std::vector<std::pair<std::string,AudioComponentDescription>>::__destroy_vector::operator()[abi:ne180100]((void ***)v311);
      std::__hash_table<std::__hash_value_type<AudioComponentDescription,std::function<DSPGraph::Box * ()(unsigned int,unsigned int)>>,std::__unordered_map_hasher<AudioComponentDescription,std::__hash_value_type<AudioComponentDescription,std::function<DSPGraph::Box * ()(unsigned int,unsigned int)>>,std::hash<AudioComponentDescription>,DSPGraph::NewBoxRegistry::AudioComponentDescriptionEquality,true>,std::__unordered_map_equal<AudioComponentDescription,std::__hash_value_type<AudioComponentDescription,std::function<DSPGraph::Box * ()(unsigned int,unsigned int)>>,DSPGraph::NewBoxRegistry::AudioComponentDescriptionEquality,std::hash<AudioComponentDescription>,true>,std::allocator<std::__hash_value_type<AudioComponentDescription,std::function<DSPGraph::Box * ()(unsigned int,unsigned int)>>>>::~__hash_table((uint64_t)v317);
      std::__hash_table<std::__hash_value_type<std::string,std::function<DSPGraph::Box * ()(unsigned int,unsigned int)>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::function<DSPGraph::Box * ()(unsigned int,unsigned int)>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::function<DSPGraph::Box * ()(unsigned int,unsigned int)>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::function<DSPGraph::Box * ()(unsigned int,unsigned int)>>>>::~__hash_table((uint64_t)&v313[8]);
      v221 = *((_QWORD *)v263 + 81);
      *((_QWORD *)v263 + 81) = v215;
      if (v221)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v221 + 8))(v221);
        v215 = *((_QWORD *)v263 + 81);
      }
      if (getAUSoundIsolationLog(void)::onceToken != -1)
        dispatch_once(&getAUSoundIsolationLog(void)::onceToken, &__block_literal_global_40);
      v222 = (id)getAUSoundIsolationLog(void)::gLog;
      v223 = v222;
      if (!v215)
      {
        if (os_log_type_enabled(v222, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)v313 = 136315394;
          *(_QWORD *)&v313[4] = "AUSoundIsolation.mm";
          *(_WORD *)&v313[12] = 1024;
          *(_DWORD *)&v313[14] = 1686;
          _os_log_error_impl(&dword_1B5ED0000, v223, OS_LOG_TYPE_ERROR, "%s:%i bypass with latency graph was not created", v313, 0x12u);
        }

        goto LABEL_667;
      }
      if (os_log_type_enabled(v222, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)v313 = 136315394;
        *(_QWORD *)&v313[4] = "AUSoundIsolation.mm";
        *(_WORD *)&v313[12] = 1024;
        *(_DWORD *)&v313[14] = 1690;
        _os_log_debug_impl(&dword_1B5ED0000, v223, OS_LOG_TYPE_DEBUG, "%s:%i setup bypass with latency graph", v313, 0x12u);
      }

      ProcessingGraphOutput = AUSoundIsolation::GetBypassWithLatencyGraphOutput(v263);
      v224 = *(_QWORD *)(ProcessingGraphOutput + 64);
      if (*(_QWORD *)(ProcessingGraphOutput + 72) != v224)
      {
        v225 = **(double **)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v224 + 40))(v224) + 120);
        v226 = *((_BYTE *)v263 + 376) == 0;
        getAUSoundIsolationLog();
        v227 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v227, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)v313 = 136316162;
          *(_QWORD *)&v313[4] = "AUSoundIsolation.mm";
          *(_WORD *)&v313[12] = 1024;
          *(_DWORD *)&v313[14] = 1695;
          *(_WORD *)&v313[18] = 1024;
          *(_DWORD *)&v313[20] = v261;
          *(_WORD *)&v313[24] = 1024;
          *(_DWORD *)&v313[26] = v225;
          LOWORD(v314) = 1024;
          *(_DWORD *)((char *)&v314 + 2) = v226;
          _os_log_debug_impl(&dword_1B5ED0000, v227, OS_LOG_TYPE_DEBUG, "%s:%i setting bypass with latency graph slice timing with max slice duration (%u), sample rate (%u), slice policy (%u)", v313, 0x24u);
        }

        DSPGraph::Graph::setSliceDuration();
        *(_BYTE *)(*((_QWORD *)v263 + 81) + 765) = 1;
        getAUSoundIsolationLog();
        v228 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v228, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)v313 = 136315394;
          *(_QWORD *)&v313[4] = "AUSoundIsolation.mm";
          *(_WORD *)&v313[12] = 1024;
          *(_DWORD *)&v313[14] = 1700;
          _os_log_debug_impl(&dword_1B5ED0000, v228, OS_LOG_TYPE_DEBUG, "%s:%i configure bypass graph", v313, 0x12u);
        }

        DSPGraph::Graph::configure(*((DSPGraph::Graph **)v263 + 81));
        v229 = (DSPGraph::Box *)AUSoundIsolation::GetProcessingGraphOutput(v263);
        v230 = DSPGraph::Box::totalLatencyInSamples(v229);
        getAUSoundIsolationLog();
        v231 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v231, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)v313 = 136315650;
          *(_QWORD *)&v313[4] = "AUSoundIsolation.mm";
          *(_WORD *)&v313[12] = 1024;
          *(_DWORD *)&v313[14] = 1706;
          *(_WORD *)&v313[18] = 1024;
          *(_DWORD *)&v313[20] = v230;
          _os_log_debug_impl(&dword_1B5ED0000, v231, OS_LOG_TYPE_DEBUG, "%s:%i processing graph latency is %u samples", v313, 0x18u);
        }

        v232 = DSPGraph::Graph::box();
        if (v232)
        {
          (*(void (**)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, float))(*(_QWORD *)v232 + 80))(v232, 0, 0, 0, 0, (float)v230);
          getAUSoundIsolationLog();
          v233 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v233, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)v313 = 136315394;
            *(_QWORD *)&v313[4] = "AUSoundIsolation.mm";
            *(_WORD *)&v313[12] = 1024;
            *(_DWORD *)&v313[14] = 1719;
            _os_log_debug_impl(&dword_1B5ED0000, v233, OS_LOG_TYPE_DEBUG, "%s:%i initialize bypass with latency graph", v313, 0x12u);
          }

          DSPGraph::Graph::initialize(*((DSPGraph::Graph **)v263 + 81));
          v19 = 0;
          goto LABEL_668;
        }
        getAUSoundIsolationLog();
        v191 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v191, OS_LOG_TYPE_ERROR))
        {
          if (v309 >= 0)
            v245 = v308;
          else
            v245 = (_QWORD *)v308[0];
          *(_DWORD *)v313 = 136315650;
          *(_QWORD *)&v313[4] = "AUSoundIsolation.mm";
          *(_WORD *)&v313[12] = 1024;
          *(_DWORD *)&v313[14] = 1715;
          *(_WORD *)&v313[18] = 2080;
          *(_QWORD *)&v313[20] = v245;
          _os_log_error_impl(&dword_1B5ED0000, v191, OS_LOG_TYPE_ERROR, "%s:%i couldn't find delay box %s", v313, 0x1Cu);
        }
        goto LABEL_666;
      }
      std::string::basic_string[abi:ne180100]<0>(v311, "/AppleInternal/Library/BuildRoots/c7268dd4-5656-11ef-b8ac-76625042721f/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS18.0.Internal.sdk/System/Library/PrivateFrameworks/AudioToolboxCore.framework/PrivateHeaders/DSPGraph_Box.h");
      std::string::basic_string[abi:ne180100]<0>(v313, "in");
      v260 = (_QWORD *)(ProcessingGraphOutput + 32);
      if (*(char *)(ProcessingGraphOutput + 55) < 0)
        v260 = (_QWORD *)*v260;
    }
LABEL_736:
    DSPGraph::strprintf((DSPGraph *)"Box::in inIndex out of range! box %s has %zu inputs but input %u was requested", v259, v260, (uint64_t)(*(_QWORD *)(ProcessingGraphOutput + 72) - *(_QWORD *)(ProcessingGraphOutput + 64)) >> 5, 0);
    result = DSPGraph::ThrowException();
    __break(1u);
    return result;
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v189 + 8))(v189);
  v190 = getAUSoundIsolationLog(void)::onceToken;
  if (*((_QWORD *)v263 + 77))
    goto LABEL_572;
  if (getAUSoundIsolationLog(void)::onceToken != -1)
    dispatch_once(&getAUSoundIsolationLog(void)::onceToken, &__block_literal_global_40);
  v191 = (id)getAUSoundIsolationLog(void)::gLog;
  if (os_log_type_enabled(v191, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)v313 = 136315394;
    *(_QWORD *)&v313[4] = "AUSoundIsolation.mm";
    *(_WORD *)&v313[12] = 1024;
    *(_DWORD *)&v313[14] = 1611;
    _os_log_error_impl(&dword_1B5ED0000, v191, OS_LOG_TYPE_ERROR, "%s:%i blending graph was not created", v313, 0x12u);
  }
LABEL_666:

LABEL_667:
  v19 = 4294956421;
LABEL_668:
  SoundIsolationGraphAdapter::~SoundIsolationGraphAdapter((SoundIsolationGraphAdapter *)&buf);
  if (cf)
    CFRelease(cf);
LABEL_670:

LABEL_671:
  if (v275)
    CFRelease(v275);
  return v19;
}

void sub_1B63459A0(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,void *a41,uint64_t a42,uint64_t a43,uint64_t a44,void *a45,uint64_t a46,uint64_t a47,uint64_t a48,void *a49,uint64_t a50,uint64_t a51,void *a52,uint64_t a53,uint64_t a54,void *a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,void *a63)
{
  char a68;
  uint64_t v68;
  int v71;
  void *v72;
  NSObject *v73;
  const std::error_code *v74;
  void *v75;
  NSObject *v76;
  _BOOL4 v77;
  void **v78;
  void **v79;
  void **v80;

  if (!a2)
    _Unwind_Resume(a1);
  applesauce::CF::DictionaryRef::~DictionaryRef((const void **)&STACK[0x248]);
  if (SLOBYTE(STACK[0x377]) < 0)
    operator delete((void *)STACK[0x360]);
  applesauce::CF::DictionaryRef::~DictionaryRef((const void **)&STACK[0x340]);
  v71 = a2;
  switch(a2)
  {
    case 5:
      v72 = __cxa_begin_catch(a1);
      getAUSoundIsolationLog();
      v73 = objc_claimAutoreleasedReturnValue();
      if (!os_log_type_enabled(v73, OS_LOG_TYPE_ERROR))
        goto LABEL_13;
      v78 = a68 >= 0 ? &a63 : (void **)a63;
      *(_DWORD *)(v68 - 256) = 136315650;
      STACK[0x394] = (unint64_t)"AUSoundIsolation.mm";
      *(_WORD *)(v68 - 244) = 1024;
      LODWORD(STACK[0x39E]) = 1584;
      *(_WORD *)(v68 - 238) = 2080;
      STACK[0x3A4] = (unint64_t)v78;
      _os_log_error_impl(&dword_1B5ED0000, v73, OS_LOG_TYPE_ERROR, "%s:%i processing graph setup failed, caught DSPGraph::Exception: %s", (uint8_t *)(v68 - 256), 0x1Cu);
      if ((a68 & 0x80000000) == 0)
        goto LABEL_13;
      break;
    case 4:
      __cxa_begin_catch(a1);
      getAUSoundIsolationLog();
      v73 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v73, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)(v68 - 256) = 136315394;
        STACK[0x394] = (unint64_t)"AUSoundIsolation.mm";
        *(_WORD *)(v68 - 244) = 1024;
        LODWORD(STACK[0x39E]) = 1587;
        _os_log_error_impl(&dword_1B5ED0000, v73, OS_LOG_TYPE_ERROR, "%s:%i processing graph setup failed, caught CAXException", (uint8_t *)(v68 - 256), 0x12u);
      }
      goto LABEL_13;
    case 3:
      v74 = (const std::error_code *)__cxa_begin_catch(a1);
      getAUSoundIsolationLog();
      v73 = objc_claimAutoreleasedReturnValue();
      if (!os_log_type_enabled(v73, OS_LOG_TYPE_ERROR))
        goto LABEL_13;
      v79 = a68 >= 0 ? &a63 : (void **)a63;
      *(_DWORD *)(v68 - 256) = 136315650;
      STACK[0x394] = (unint64_t)"AUSoundIsolation.mm";
      *(_WORD *)(v68 - 244) = 1024;
      LODWORD(STACK[0x39E]) = 1590;
      *(_WORD *)(v68 - 238) = 2080;
      STACK[0x3A4] = (unint64_t)v79;
      _os_log_error_impl(&dword_1B5ED0000, v73, OS_LOG_TYPE_ERROR, "%s:%i processing graph setup failed, caught std::system_error: %s", (uint8_t *)(v68 - 256), 0x1Cu);
      if ((a68 & 0x80000000) == 0)
      {
LABEL_13:

        __cxa_end_catch();
        goto LABEL_36;
      }
      break;
    default:
      v75 = __cxa_begin_catch(a1);
      getAUSoundIsolationLog();
      v76 = objc_claimAutoreleasedReturnValue();
      v77 = os_log_type_enabled(v76, OS_LOG_TYPE_ERROR);
      if (v71 == 2)
      {
        if (v77)
        {
          v80 = a68 >= 0 ? &a63 : (void **)a63;
          *(_DWORD *)(v68 - 256) = 136315650;
          STACK[0x394] = (unint64_t)"AUSoundIsolation.mm";
          *(_WORD *)(v68 - 244) = 1024;
          LODWORD(STACK[0x39E]) = 1593;
          *(_WORD *)(v68 - 238) = 2080;
          STACK[0x3A4] = (unint64_t)v80;
          _os_log_error_impl(&dword_1B5ED0000, v76, OS_LOG_TYPE_ERROR, "%s:%i processing graph setup failed, caught std::exception: %s", (uint8_t *)(v68 - 256), 0x1Cu);
          if (a68 < 0)
            operator delete(a63);
        }
      }
      else if (v77)
      {
        *(_DWORD *)(v68 - 256) = 136315394;
        STACK[0x394] = (unint64_t)"AUSoundIsolation.mm";
        *(_WORD *)(v68 - 244) = 1024;
        LODWORD(STACK[0x39E]) = 1596;
        _os_log_error_impl(&dword_1B5ED0000, v76, OS_LOG_TYPE_ERROR, "%s:%i processing graph setup failed, caught unknown exception", (uint8_t *)(v68 - 256), 0x12u);
      }

      __cxa_end_catch();
LABEL_36:
      JUMPOUT(0x1B6344440);
  }
  operator delete(a63);
  goto LABEL_13;
}

void AUSoundIsolation::GetTuningDictionaryRef(applesauce::CF::DictionaryRef *a1, uint64_t a2, int a3)
{
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  BOOL v10;
  uint64_t *v11;
  int v12;
  int v13;
  int v14;
  char *v15;
  size_t v16;
  std::string *v17;
  void **v18;
  _BYTE *v19;
  NSObject *v20;
  const __CFString *v21;
  size_t v22;
  uint8_t *v23;
  std::string *v24;
  size_t v25;
  uint8_t *v26;
  std::string *v27;
  std::string *v28;
  std::string *v29;
  size_t v30;
  uint8_t *v31;
  std::string *v32;
  std::string *v33;
  char *v34;
  size_t size;
  uint8_t *v36;
  std::string *v37;
  std::string *v38;
  std::runtime_error *exception;
  std::string __p;
  std::string v41;
  void *v42[2];
  unsigned __int8 v43;
  uint8_t buf[40];
  uint64_t v45;

  v45 = *MEMORY[0x1E0C80C00];
  if (a3 != 4)
  {
    if (a3 != 3 || *(_DWORD *)(a2 + 532))
      goto LABEL_4;
LABEL_32:
    *(_QWORD *)a1 = 0;
    return;
  }
  if (!*(_DWORD *)(a2 + 536))
    goto LABEL_32;
LABEL_4:
  v6 = *(uint64_t **)(a2 + 688);
  if (!v6)
    goto LABEL_21;
  v7 = a2 + 688;
  v8 = *(_QWORD *)(a2 + 688);
  do
  {
    v9 = *(_DWORD *)(v8 + 32);
    v10 = v9 < a3;
    if (v9 >= a3)
      v11 = (uint64_t *)v8;
    else
      v11 = (uint64_t *)(v8 + 8);
    if (!v10)
      v7 = v8;
    v8 = *v11;
  }
  while (*v11);
  if (v7 == a2 + 688 || *(_DWORD *)(v7 + 32) > a3 || !*(_QWORD *)(v7 + 40))
  {
LABEL_21:
    v13 = *(_DWORD *)(a2 + 584);
    v14 = *(_DWORD *)(a2 + 576);
    v15 = (char *)operator new(0x38uLL);
    strcpy(v15, "/System/Library/Audio/Tunings/Generic/AU/SoundIsolation");
    if ((v43 & 0x80u) == 0)
      v16 = v43;
    else
      v16 = (size_t)v42[1];
    if (v16)
    {
      v17 = &v41;
      std::string::basic_string[abi:ne180100]((uint64_t)&v41, v16 + 55);
      if ((v41.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v17 = (std::string *)v41.__r_.__value_.__r.__words[0];
      if ((v43 & 0x80u) == 0)
        v18 = v42;
      else
        v18 = (void **)v42[0];
      memmove(v17, v18, v16);
      v19 = (char *)v17 + v16;
      memmove(v19, v15, 0x37uLL);
      v19[55] = 0;
    }
    else
    {
      std::string::__init_copy_ctor_external(&v41, v15, 0x37uLL);
    }
    if (getAUSoundIsolationLog(void)::onceToken != -1)
      dispatch_once(&getAUSoundIsolationLog(void)::onceToken, &__block_literal_global_40);
    v20 = getAUSoundIsolationLog(void)::gLog;
    if (os_log_type_enabled((os_log_t)getAUSoundIsolationLog(void)::gLog, OS_LOG_TYPE_DEBUG))
    {
      v33 = &v41;
      if ((v41.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v33 = (std::string *)v41.__r_.__value_.__r.__words[0];
      *(_DWORD *)buf = 136315650;
      *(_QWORD *)&buf[4] = "AUSoundIsolation.mm";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 1769;
      *(_WORD *)&buf[18] = 2080;
      *(_QWORD *)&buf[20] = v33;
      _os_log_debug_impl(&dword_1B5ED0000, v20, OS_LOG_TYPE_DEBUG, "%s:%i tuning dir path: %s", buf, 0x1Cu);
    }
    if (v13 == 1)
    {
      switch(a3)
      {
        case 0:
          if (!_os_feature_enabled_impl())
          {
            if ((v41.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              size = HIBYTE(v41.__r_.__value_.__r.__words[2]);
            else
              size = v41.__r_.__value_.__l.__size_;
            v36 = buf;
            std::string::basic_string[abi:ne180100]((uint64_t)buf, size + 32);
            if ((buf[23] & 0x80u) != 0)
              v36 = *(uint8_t **)buf;
            if (size)
            {
              if ((v41.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                v38 = &v41;
              else
                v38 = (std::string *)v41.__r_.__value_.__r.__words[0];
              memmove(v36, v38, size);
            }
            goto LABEL_133;
          }
          if (!*(_BYTE *)(a2 + 564))
            break;
          if (!v14)
            goto LABEL_147;
          if (v14 != 1)
            goto LABEL_53;
          break;
        case 1:
          if ((v41.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v25 = HIBYTE(v41.__r_.__value_.__r.__words[2]);
          else
            v25 = v41.__r_.__value_.__l.__size_;
          v26 = buf;
          std::string::basic_string[abi:ne180100]((uint64_t)buf, v25 + 29);
          if ((buf[23] & 0x80u) != 0)
            v26 = *(uint8_t **)buf;
          if (v25)
          {
            if ((v41.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v28 = &v41;
            else
              v28 = (std::string *)v41.__r_.__value_.__r.__words[0];
            memmove(v26, v28, v25);
          }
          goto LABEL_79;
        case 3:
          if ((v41.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v22 = HIBYTE(v41.__r_.__value_.__r.__words[2]);
          else
            v22 = v41.__r_.__value_.__l.__size_;
          v23 = buf;
          std::string::basic_string[abi:ne180100]((uint64_t)buf, v22 + 29);
          if ((buf[23] & 0x80u) != 0)
            v23 = *(uint8_t **)buf;
          if (v22)
          {
            if ((v41.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v29 = &v41;
            else
              v29 = (std::string *)v41.__r_.__value_.__r.__words[0];
            memmove(v23, v29, v22);
          }
          goto LABEL_68;
        case 4:
          if ((v41.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v30 = HIBYTE(v41.__r_.__value_.__r.__words[2]);
          else
            v30 = v41.__r_.__value_.__l.__size_;
          v31 = buf;
          std::string::basic_string[abi:ne180100]((uint64_t)buf, v30 + 29);
          if ((buf[23] & 0x80u) != 0)
            v31 = *(uint8_t **)buf;
          if (v30)
          {
            if ((v41.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v32 = &v41;
            else
              v32 = (std::string *)v41.__r_.__value_.__r.__words[0];
            memmove(v31, v32, v30);
          }
          strcpy((char *)&v31[v30], "/aufx-vois-appl-dnos.aupreset");
          goto LABEL_148;
        default:
          goto LABEL_53;
      }
    }
    else
    {
      if (v13)
        goto LABEL_53;
      if (a3 == 3)
      {
        if ((v41.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v22 = HIBYTE(v41.__r_.__value_.__r.__words[2]);
        else
          v22 = v41.__r_.__value_.__l.__size_;
        v23 = buf;
        std::string::basic_string[abi:ne180100]((uint64_t)buf, v22 + 29);
        if ((buf[23] & 0x80u) != 0)
          v23 = *(uint8_t **)buf;
        if (v22)
        {
          if ((v41.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v24 = &v41;
          else
            v24 = (std::string *)v41.__r_.__value_.__r.__words[0];
          memmove(v23, v24, v22);
        }
LABEL_68:
        strcpy((char *)&v23[v22], "/aufx-vois-appl-drev.aupreset");
        goto LABEL_148;
      }
      if (a3 == 1)
      {
        if ((v41.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v25 = HIBYTE(v41.__r_.__value_.__r.__words[2]);
        else
          v25 = v41.__r_.__value_.__l.__size_;
        v26 = buf;
        std::string::basic_string[abi:ne180100]((uint64_t)buf, v25 + 29);
        if ((buf[23] & 0x80u) != 0)
          v26 = *(uint8_t **)buf;
        if (v25)
        {
          if ((v41.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v27 = &v41;
          else
            v27 = (std::string *)v41.__r_.__value_.__r.__words[0];
          memmove(v26, v27, v25);
        }
LABEL_79:
        strcpy((char *)&v26[v25], "/aufx-vois-appl-nnet.aupreset");
        goto LABEL_148;
      }
      if (a3)
        goto LABEL_53;
      if (!_os_feature_enabled_impl())
      {
        if ((v41.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          size = HIBYTE(v41.__r_.__value_.__r.__words[2]);
        else
          size = v41.__r_.__value_.__l.__size_;
        v36 = buf;
        std::string::basic_string[abi:ne180100]((uint64_t)buf, size + 32);
        if ((buf[23] & 0x80u) != 0)
          v36 = *(uint8_t **)buf;
        if (size)
        {
          if ((v41.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v37 = &v41;
          else
            v37 = (std::string *)v41.__r_.__value_.__r.__words[0];
          memmove(v36, v37, size);
        }
LABEL_133:
        strcpy((char *)&v36[size], "/aufx-vois-appl-nnet-vi-v0.plist");
        goto LABEL_148;
      }
      if (*(_BYTE *)(a2 + 564))
      {
        if (!v14)
        {
LABEL_147:
          std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((void **)buf, (const void **)&v41.__r_.__value_.__l.__data_, "/aufx-vois-appl-nnet-vi-high-quality-voice.plist");
LABEL_148:
          if ((char)buf[23] < 0)
            operator delete(*(void **)buf);
          goto LABEL_150;
        }
        if (v14 != 1)
        {
LABEL_53:
          *(_QWORD *)a1 = 0;
LABEL_150:
          if (SHIBYTE(v41.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v41.__r_.__value_.__l.__data_);
          if ((char)v43 < 0)
            operator delete(v42[0]);
          v34 = v15;
          goto LABEL_155;
        }
      }
    }
    std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((void **)buf, (const void **)&v41.__r_.__value_.__l.__data_, "/aufx-vois-appl-nnet-vi-voice.plist");
    goto LABEL_148;
  }
  while (1)
  {
    while (1)
    {
      v12 = *((_DWORD *)v6 + 8);
      if (v12 <= a3)
        break;
      v6 = (uint64_t *)*v6;
      if (!v6)
        goto LABEL_20;
    }
    if (v12 >= a3)
      break;
    v6 = (uint64_t *)v6[1];
    if (!v6)
LABEL_20:
      std::__throw_out_of_range[abi:ne180100]("map::at:  key not found");
  }
  v21 = (const __CFString *)v6[5];
  if (!v21)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    applesauce::CF::construct_error(exception);
  }
  applesauce::CF::convert_to<std::string,0>(v21, (uint64_t)buf);
  if ((char)buf[23] < 0)
  {
    if (*(_QWORD *)&buf[8])
    {
      std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)buf, *(std::string::size_type *)&buf[8]);
LABEL_118:
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      goto LABEL_121;
    }
  }
  else if (buf[23])
  {
    __p = *(std::string *)buf;
    goto LABEL_118;
  }
  *(_QWORD *)a1 = 0;
LABEL_121:
  if (((char)buf[23] & 0x80000000) == 0)
    return;
  v34 = *(char **)buf;
LABEL_155:
  operator delete(v34);
}

void sub_1B6347564(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,void *__p,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  void *v33;

  if (a33 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  if (a26 < 0)
    operator delete(a21);
  operator delete(v33);
  _Unwind_Resume(a1);
}

void `anonymous namespace'::getSimulatorRoot(_anonymous_namespace_ *this)
{
  char *v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  _anonymous_namespace_ *v6;
  const char *v7;
  NSObject *v8;
  uint32_t v9;
  uint64_t v10;
  int v11;
  const char *v12;
  __int16 v13;
  int v14;
  __int16 v15;
  _anonymous_namespace_ *v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v2 = getenv("SIMULATOR_ROOT");
  if (v2)
    v3 = v2;
  else
    v3 = "";
  std::string::basic_string[abi:ne180100]<0>(this, v3);
  if (*((char *)this + 23) >= 0)
    v4 = *((unsigned __int8 *)this + 23);
  else
    v4 = *((_QWORD *)this + 1);
  if (v4)
  {
    if (getAUSoundIsolationLog(void)::onceToken != -1)
      dispatch_once(&getAUSoundIsolationLog(void)::onceToken, &__block_literal_global_40);
    v5 = getAUSoundIsolationLog(void)::gLog;
    if (os_log_type_enabled((os_log_t)getAUSoundIsolationLog(void)::gLog, OS_LOG_TYPE_DEBUG))
    {
      if (*((char *)this + 23) >= 0)
        v6 = this;
      else
        v6 = *(_anonymous_namespace_ **)this;
      v11 = 136315650;
      v12 = "AUSoundIsolation.mm";
      v13 = 1024;
      v14 = 228;
      v15 = 2080;
      v16 = v6;
      v7 = "%s:%i SIMULATOR_ROOT: %s";
      v8 = v5;
      v9 = 28;
      goto LABEL_20;
    }
  }
  else
  {
    if (getAUSoundIsolationLog(void)::onceToken != -1)
      dispatch_once(&getAUSoundIsolationLog(void)::onceToken, &__block_literal_global_40);
    v10 = getAUSoundIsolationLog(void)::gLog;
    if (os_log_type_enabled((os_log_t)getAUSoundIsolationLog(void)::gLog, OS_LOG_TYPE_DEBUG))
    {
      v11 = 136315394;
      v12 = "AUSoundIsolation.mm";
      v13 = 1024;
      v14 = 226;
      v7 = "%s:%i SIMULATOR_ROOT is empty";
      v8 = v10;
      v9 = 18;
LABEL_20:
      _os_log_debug_impl(&dword_1B5ED0000, v8, OS_LOG_TYPE_DEBUG, v7, (uint8_t *)&v11, v9);
    }
  }
}

uint64_t **std::__tree<std::__value_type<AUSoundIsolation::BoxTuningType,applesauce::CF::StringRef>,std::__map_value_compare<AUSoundIsolation::BoxTuningType,std::__value_type<AUSoundIsolation::BoxTuningType,applesauce::CF::StringRef>,std::less<AUSoundIsolation::BoxTuningType>,true>,std::allocator<std::__value_type<AUSoundIsolation::BoxTuningType,applesauce::CF::StringRef>>>::__emplace_unique_key_args<AUSoundIsolation::BoxTuningType,std::piecewise_construct_t const&,std::tuple<AUSoundIsolation::BoxTuningType&&>,std::tuple<>>(uint64_t **a1, int a2, _DWORD *a3)
{
  uint64_t *v5;
  uint64_t **v6;
  uint64_t **v7;
  uint64_t **v8;
  int v9;
  _DWORD *v10;
  _QWORD v12[2];
  char v13;

  v6 = a1 + 1;
  v5 = a1[1];
  v7 = a1 + 1;
  v8 = a1 + 1;
  if (v5)
  {
    while (1)
    {
      while (1)
      {
        v8 = (uint64_t **)v5;
        v9 = *((_DWORD *)v5 + 8);
        if (v9 <= a2)
          break;
        v5 = *v8;
        v7 = v8;
        if (!*v8)
          goto LABEL_8;
      }
      if (v9 >= a2)
        break;
      v5 = v8[1];
      if (!v5)
      {
        v7 = v8 + 1;
        goto LABEL_8;
      }
    }
  }
  else
  {
LABEL_8:
    v10 = operator new(0x30uLL);
    v12[1] = v6;
    v10[8] = *a3;
    *((_QWORD *)v10 + 5) = 0;
    v13 = 1;
    std::__tree<std::__value_type<double,int>,std::__map_value_compare<double,std::__value_type<double,int>,std::less<double>,true>,std::allocator<std::__value_type<double,int>>>::__insert_node_at(a1, (uint64_t)v8, v7, (uint64_t *)v10);
    v12[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<AUSoundIsolation::BoxTuningType,applesauce::CF::StringRef>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<AUSoundIsolation::BoxTuningType,applesauce::CF::StringRef>,void *>>>>::reset[abi:ne180100]((uint64_t)v12);
    return (uint64_t **)v10;
  }
  return v8;
}

uint64_t applesauce::CF::details::find_at_key<int,char const(&)[14]>(const __CFDictionary *a1)
{
  const __CFNumber *v1;
  std::runtime_error *exception;

  v1 = (const __CFNumber *)applesauce::CF::details::at_key<char const(&)[14]>(a1, "LookaheadSize");
  if (!v1)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    applesauce::CF::not_found(exception);
  }
  return applesauce::CF::convert_to<int,0>(v1);
}

void sub_1B634791C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void SoundIsolationGraphAdapter::~SoundIsolationGraphAdapter(SoundIsolationGraphAdapter *this)
{
  void **v2;

  if (*((char *)this + 215) < 0)
    operator delete(*((void **)this + 24));
  if (*((char *)this + 191) < 0)
    operator delete(*((void **)this + 21));
  if (*((char *)this + 167) < 0)
    operator delete(*((void **)this + 18));
  if (*((char *)this + 143) < 0)
    operator delete(*((void **)this + 15));
  if (*((char *)this + 119) < 0)
    operator delete(*((void **)this + 12));
  v2 = (void **)((char *)this + 72);
  std::vector<std::__fs::filesystem::path>::__destroy_vector::operator()[abi:ne180100](&v2);
  v2 = (void **)((char *)this + 48);
  std::vector<std::__fs::filesystem::path>::__destroy_vector::operator()[abi:ne180100](&v2);
  v2 = (void **)((char *)this + 24);
  std::vector<std::__fs::filesystem::path>::__destroy_vector::operator()[abi:ne180100](&v2);
  std::__tree<std::__value_type<std::string,unsigned int>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned int>>>::destroy(*((char **)this + 1));
}

void std::unique_ptr<std::__tree_node<std::__value_type<AUSoundIsolation::BoxTuningType,applesauce::CF::StringRef>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<AUSoundIsolation::BoxTuningType,applesauce::CF::StringRef>,void *>>>>::reset[abi:ne180100](uint64_t a1)
{
  const void **v1;

  v1 = *(const void ***)a1;
  *(_QWORD *)a1 = 0;
  if (v1)
  {
    if (*(_BYTE *)(a1 + 16))
      std::__destroy_at[abi:ne180100]<std::pair<AUSoundIsolation::BoxTuningType const,applesauce::CF::StringRef>,0>(v1[5]);
    operator delete(v1);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<AUSoundIsolation::BoxTuningType const,applesauce::CF::StringRef>,0>(const void *a1)
{
  if (a1)
    CFRelease(a1);
}

const void *applesauce::CF::details::at_key<char const(&)[22]>(const __CFDictionary *a1, char *a2)
{
  const void *Value;
  void *key;

  applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&key, a2);
  if (a1)
    Value = CFDictionaryGetValue(a1, key);
  if (key)
    CFRelease(key);
  if (!a1)
    return 0;
  return Value;
}

void sub_1B6347AA0(void *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  applesauce::CF::StringRef::~StringRef((const void **)va);
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1B6347A84);
}

void `anonymous namespace'::loadDictionaryRef(applesauce::CF::DictionaryRef *a1, const char *a2)
{
  NSObject *v4;
  NSObject *v5;
  const char *v6;
  CFTypeRef cf;
  uint8_t buf[4];
  const char *v9;
  __int16 v10;
  int v11;
  __int16 v12;
  const char *v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  if (getAUSoundIsolationLog(void)::onceToken != -1)
    dispatch_once(&getAUSoundIsolationLog(void)::onceToken, &__block_literal_global_40);
  v4 = getAUSoundIsolationLog(void)::gLog;
  if (os_log_type_enabled((os_log_t)getAUSoundIsolationLog(void)::gLog, OS_LOG_TYPE_DEBUG))
  {
    v6 = a2;
    if (a2[23] < 0)
      v6 = *(const char **)a2;
    *(_DWORD *)buf = 136315650;
    v9 = "AUSoundIsolation.mm";
    v10 = 1024;
    v11 = 185;
    v12 = 2080;
    v13 = v6;
    _os_log_debug_impl(&dword_1B5ED0000, v4, OS_LOG_TYPE_DEBUG, "%s:%i load dictionary from %s", buf, 0x1Cu);
  }
  cf = applesauce::CF::details::make_CFTypeRef(a2);
  if (!cf)
  {
    if (getAUSoundIsolationLog(void)::onceToken != -1)
      dispatch_once(&getAUSoundIsolationLog(void)::onceToken, &__block_literal_global_40);
    v5 = getAUSoundIsolationLog(void)::gLog;
    if (os_log_type_enabled((os_log_t)getAUSoundIsolationLog(void)::gLog, OS_LOG_TYPE_ERROR))
    {
      if (a2[23] < 0)
        a2 = *(const char **)a2;
      *(_DWORD *)buf = 136315650;
      v9 = "AUSoundIsolation.mm";
      v10 = 1024;
      v11 = 198;
      v12 = 2080;
      v13 = a2;
      _os_log_error_impl(&dword_1B5ED0000, v5, OS_LOG_TYPE_ERROR, "%s:%i loading from %s failed", buf, 0x1Cu);
    }
  }
  applesauce::CF::TypeRef::operator applesauce::CF::DictionaryRef(&cf, a1);
  if (cf)
    CFRelease(cf);
}

void sub_1B6347CC0(_Unwind_Exception *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  _Unwind_Resume(a1);
}

_QWORD *std::vector<long long>::__init_with_size[abi:ne180100]<long long const*,long long const*>(_QWORD *result, const void *a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;
  size_t v8;

  if (a4)
  {
    v6 = result;
    result = std::vector<std::tuple<unsigned int,float>>::__vallocate[abi:ne180100](result, a4);
    v7 = v6[1];
    v8 = a3 - (_QWORD)a2;
    if (v8)
      result = memmove((void *)v6[1], a2, v8);
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_1B6347FB4(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void AUSoundIsolation::TearDownInternalReporterID(AUSoundIsolation *this)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  int v6;
  const char *v7;
  __int16 v8;
  int v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  if (*((_BYTE *)this + 712))
  {
    if (getAUSoundIsolationLog(void)::onceToken != -1)
      dispatch_once(&getAUSoundIsolationLog(void)::onceToken, &__block_literal_global_40);
    v2 = getAUSoundIsolationLog(void)::gLog;
    if (os_log_type_enabled((os_log_t)getAUSoundIsolationLog(void)::gLog, OS_LOG_TYPE_DEBUG))
    {
      v6 = 136315394;
      v7 = "AUSoundIsolation.mm";
      v8 = 1024;
      v9 = 1925;
      _os_log_debug_impl(&dword_1B5ED0000, v2, OS_LOG_TYPE_DEBUG, "%s:%i will teardown the internal CAReporterID", (uint8_t *)&v6, 0x12u);
    }
    v3 = *((_QWORD *)this + 88);
    if (AudioStatisticsLibraryLoader(void)::once != -1)
      dispatch_once(&AudioStatisticsLibraryLoader(void)::once, &__block_literal_global_105);
    if (AudioStatisticsLibraryLoader(void)::libSym)
    {
      AudioStatisticsLibraryLoader(void)::libSym(v3);
      v4 = *((_QWORD *)this + 88);
      if (AudioStatisticsLibraryLoader(void)::once != -1)
        dispatch_once(&AudioStatisticsLibraryLoader(void)::once, &__block_literal_global_105);
    }
    else
    {
      v4 = *((_QWORD *)this + 88);
    }
    if (AudioStatisticsLibraryLoader(void)::libSym)
      AudioStatisticsLibraryLoader(void)::libSym(v4);
    if (getAUSoundIsolationLog(void)::onceToken != -1)
      dispatch_once(&getAUSoundIsolationLog(void)::onceToken, &__block_literal_global_40);
    v5 = getAUSoundIsolationLog(void)::gLog;
    if (os_log_type_enabled((os_log_t)getAUSoundIsolationLog(void)::gLog, OS_LOG_TYPE_DEBUG))
    {
      v6 = 136315394;
      v7 = "AUSoundIsolation.mm";
      v8 = 1024;
      v9 = 1928;
      _os_log_debug_impl(&dword_1B5ED0000, v5, OS_LOG_TYPE_DEBUG, "%s:%i internal CAReporterID destroyed", (uint8_t *)&v6, 0x12u);
    }
  }
}

void std::__tree<std::__value_type<AUSoundIsolation::BoxTuningType,applesauce::CF::StringRef>,std::__map_value_compare<AUSoundIsolation::BoxTuningType,std::__value_type<AUSoundIsolation::BoxTuningType,applesauce::CF::StringRef>,std::less<AUSoundIsolation::BoxTuningType>,true>,std::allocator<std::__value_type<AUSoundIsolation::BoxTuningType,applesauce::CF::StringRef>>>::destroy(_QWORD *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<AUSoundIsolation::BoxTuningType,applesauce::CF::StringRef>,std::__map_value_compare<AUSoundIsolation::BoxTuningType,std::__value_type<AUSoundIsolation::BoxTuningType,applesauce::CF::StringRef>,std::less<AUSoundIsolation::BoxTuningType>,true>,std::allocator<std::__value_type<AUSoundIsolation::BoxTuningType,applesauce::CF::StringRef>>>::destroy(*a1);
    std::__tree<std::__value_type<AUSoundIsolation::BoxTuningType,applesauce::CF::StringRef>,std::__map_value_compare<AUSoundIsolation::BoxTuningType,std::__value_type<AUSoundIsolation::BoxTuningType,applesauce::CF::StringRef>,std::less<AUSoundIsolation::BoxTuningType>,true>,std::allocator<std::__value_type<AUSoundIsolation::BoxTuningType,applesauce::CF::StringRef>>>::destroy(a1[1]);
    std::__destroy_at[abi:ne180100]<std::pair<AUSoundIsolation::BoxTuningType const,applesauce::CF::StringRef>,0>((const void *)a1[5]);
    operator delete(a1);
  }
}

uint64_t ___ZN16AUSoundIsolation17TearDownMessengerEv_block_invoke(uint64_t a1)
{
  return caulk::concurrent::messenger::drain(*(caulk::concurrent::messenger **)(a1 + 32));
}

void sub_1B63486F0(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, __int128 a9)
{
  NSObject *v9;

  if (a2)
  {
    __cxa_begin_catch(a1);
    getAUSoundIsolationLog();
    v9 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      LODWORD(a9) = 136315394;
      *(_QWORD *)((char *)&a9 + 4) = "AUSoundIsolation.mm";
      WORD6(a9) = 1024;
      *(_DWORD *)((char *)&a9 + 14) = 1884;
      _os_log_error_impl(&dword_1B5ED0000, v9, OS_LOG_TYPE_ERROR, "%s:%i failed to flush logs due to exception", (uint8_t *)&a9, 0x12u);
    }

    __cxa_end_catch();
    JUMPOUT(0x1B63486C4);
  }
  _Unwind_Resume(a1);
}

uint64_t __copy_helper_block_ea8_32c56_ZTSNSt3__110shared_ptrIN5caulk10concurrent9messengerEEE(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(result + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(result + 40) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

uint64_t __destroy_helper_block_ea8_32c56_ZTSNSt3__110shared_ptrIN5caulk10concurrent9messengerEEE(uint64_t a1)
{
  return std::shared_ptr<vp::services::Telephony_Utility>::~shared_ptr[abi:ne180100](a1 + 32);
}

void std::__function::__func<AUSoundIsolation::SetUpMetricsReporter(void)::$_0,std::allocator<AUSoundIsolation::SetUpMetricsReporter(void)::$_0>,void ()(long long,applesauce::CF::DictionaryRef)>::~__func()
{
  JUMPOUT(0x1BCC95CECLL);
}

_QWORD *std::__function::__func<AUSoundIsolation::SetUpMetricsReporter(void)::$_0,std::allocator<AUSoundIsolation::SetUpMetricsReporter(void)::$_0>,void ()(long long,applesauce::CF::DictionaryRef)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E69D35F8;
  return result;
}

void std::__function::__func<AUSoundIsolation::SetUpMetricsReporter(void)::$_0,std::allocator<AUSoundIsolation::SetUpMetricsReporter(void)::$_0>,void ()(long long,applesauce::CF::DictionaryRef)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E69D35F8;
}

void std::__function::__func<AUSoundIsolation::SetUpMetricsReporter(void)::$_0,std::allocator<AUSoundIsolation::SetUpMetricsReporter(void)::$_0>,void ()(long long,applesauce::CF::DictionaryRef)>::operator()(uint64_t a1, uint64_t *a2, const void **a3)
{
  uint64_t v3;
  const void *v4;

  v3 = *a2;
  v4 = *a3;
  *a3 = 0;
  if (AudioStatisticsLibraryLoader(void)::once != -1)
    dispatch_once(&AudioStatisticsLibraryLoader(void)::once, &__block_literal_global_105);
  if (AudioStatisticsLibraryLoader(void)::libSym)
    AudioStatisticsLibraryLoader(void)::libSym(v3, v4, 1, 0);
  if (v4)
    CFRelease(v4);
}

void sub_1B6348870(_Unwind_Exception *exception_object)
{
  const void *v1;

  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

void ___ZN12_GLOBAL__N_119registerInternalAUsEv_block_invoke()
{
  NSObject *v0;
  NSObject *v1;
  NSObject *v2;
  NSObject *v3;
  NSObject *v4;
  AudioComponentDescription v5;
  uint64_t v6;

  v6 = *MEMORY[0x1E0C80C00];
  if (getAUSoundIsolationLog(void)::onceToken != -1)
    dispatch_once(&getAUSoundIsolationLog(void)::onceToken, &__block_literal_global_40);
  v0 = getAUSoundIsolationLog(void)::gLog;
  if (os_log_type_enabled((os_log_t)getAUSoundIsolationLog(void)::gLog, OS_LOG_TYPE_DEBUG))
  {
    v5.componentType = 136315394;
    *(_QWORD *)&v5.componentSubType = "AUSoundIsolation.mm";
    LOWORD(v5.componentFlags) = 1024;
    *(UInt32 *)((char *)&v5.componentFlags + 2) = 136;
    _os_log_debug_impl(&dword_1B5ED0000, v0, OS_LOG_TYPE_DEBUG, "%s:%i will try to register internal AUs", (uint8_t *)&v5, 0x12u);
  }
  *(_OWORD *)&v5.componentType = xmmword_1B66A2000;
  v5.componentFlagsMask = 0;
  if (AudioComponentRegister(&v5, &stru_1E69EEE40, 0x10600u, (AudioComponentFactoryFunction)ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AUNeuralNet>::Factory))
  {
    if (getAUSoundIsolationLog(void)::onceToken != -1)
      dispatch_once(&getAUSoundIsolationLog(void)::onceToken, &__block_literal_global_40);
    v1 = getAUSoundIsolationLog(void)::gLog;
    if (os_log_type_enabled((os_log_t)getAUSoundIsolationLog(void)::gLog, OS_LOG_TYPE_DEBUG))
    {
      v5.componentType = 136315394;
      *(_QWORD *)&v5.componentSubType = "AUSoundIsolation.mm";
      LOWORD(v5.componentFlags) = 1024;
      *(UInt32 *)((char *)&v5.componentFlags + 2) = 158;
      _os_log_debug_impl(&dword_1B5ED0000, v1, OS_LOG_TYPE_DEBUG, "%s:%i registration successful", (uint8_t *)&v5, 0x12u);
    }
  }
  else
  {
    if (getAUSoundIsolationLog(void)::onceToken != -1)
      dispatch_once(&getAUSoundIsolationLog(void)::onceToken, &__block_literal_global_40);
    v2 = getAUSoundIsolationLog(void)::gLog;
    if (os_log_type_enabled((os_log_t)getAUSoundIsolationLog(void)::gLog, OS_LOG_TYPE_ERROR))
    {
      v5.componentType = 136315394;
      *(_QWORD *)&v5.componentSubType = "AUSoundIsolation.mm";
      LOWORD(v5.componentFlags) = 1024;
      *(UInt32 *)((char *)&v5.componentFlags + 2) = 160;
      _os_log_error_impl(&dword_1B5ED0000, v2, OS_LOG_TYPE_ERROR, "%s:%i AUNeuralNet registration failed", (uint8_t *)&v5, 0x12u);
    }
  }
  *(_OWORD *)&v5.componentType = xmmword_1B66A2010;
  v5.componentFlagsMask = 0;
  if (!AudioComponentRegister(&v5, &stru_1E69EEE40, 0x10600u, (AudioComponentFactoryFunction)ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AUDenoise>::Factory))
  {
    if (getAUSoundIsolationLog(void)::onceToken != -1)
      dispatch_once(&getAUSoundIsolationLog(void)::onceToken, &__block_literal_global_40);
    v3 = getAUSoundIsolationLog(void)::gLog;
    if (os_log_type_enabled((os_log_t)getAUSoundIsolationLog(void)::gLog, OS_LOG_TYPE_ERROR))
    {
      v5.componentType = 136315394;
      *(_QWORD *)&v5.componentSubType = "AUSoundIsolation.mm";
      LOWORD(v5.componentFlags) = 1024;
      *(UInt32 *)((char *)&v5.componentFlags + 2) = 169;
      _os_log_error_impl(&dword_1B5ED0000, v3, OS_LOG_TYPE_ERROR, "%s:%i AUDenoise registration failed", (uint8_t *)&v5, 0x12u);
    }
  }
  *(_OWORD *)&v5.componentType = xmmword_1B66A2020;
  v5.componentFlagsMask = 0;
  if (!AudioComponentRegister(&v5, &stru_1E69EEE40, 0x10600u, (AudioComponentFactoryFunction)ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AUDereverb>::Factory))
  {
    if (getAUSoundIsolationLog(void)::onceToken != -1)
      dispatch_once(&getAUSoundIsolationLog(void)::onceToken, &__block_literal_global_40);
    v4 = getAUSoundIsolationLog(void)::gLog;
    if (os_log_type_enabled((os_log_t)getAUSoundIsolationLog(void)::gLog, OS_LOG_TYPE_ERROR))
    {
      v5.componentType = 136315394;
      *(_QWORD *)&v5.componentSubType = "AUSoundIsolation.mm";
      LOWORD(v5.componentFlags) = 1024;
      *(UInt32 *)((char *)&v5.componentFlags + 2) = 178;
      _os_log_error_impl(&dword_1B5ED0000, v4, OS_LOG_TYPE_ERROR, "%s:%i AUDereverb registration failed", (uint8_t *)&v5, 0x12u);
    }
  }
}

void ___ZN8DSPGraph6getLogEv_block_invoke()
{
  os_log_t v0;
  void *v1;

  v0 = os_log_create("com.apple.coreaudio", "DSPGraph");
  v1 = (void *)DSPGraph::getLog(void)::gLog;
  DSPGraph::getLog(void)::gLog = (uint64_t)v0;

}

void std::__tree<std::__value_type<unsigned int,ProcessingChainInfo>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,ProcessingChainInfo>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,ProcessingChainInfo>>>::__emplace_unique_impl<int,ProcessingChainInfo>(uint64_t **a1, unsigned int a2, uint64_t a3)
{
  _DWORD *v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  uint64_t **v11;
  uint64_t *v12;
  uint64_t **v13;
  unsigned int v14;

  v6 = operator new(0xB8uLL);
  v6[7] = a2;
  v7 = *(_OWORD *)(a3 + 112);
  *((_OWORD *)v6 + 8) = *(_OWORD *)(a3 + 96);
  *((_OWORD *)v6 + 9) = v7;
  *((_OWORD *)v6 + 10) = *(_OWORD *)(a3 + 128);
  v6[44] = *(_DWORD *)(a3 + 144);
  v8 = *(_OWORD *)(a3 + 48);
  *((_OWORD *)v6 + 4) = *(_OWORD *)(a3 + 32);
  *((_OWORD *)v6 + 5) = v8;
  v9 = *(_OWORD *)(a3 + 80);
  *((_OWORD *)v6 + 6) = *(_OWORD *)(a3 + 64);
  *((_OWORD *)v6 + 7) = v9;
  v10 = *(_OWORD *)(a3 + 16);
  *((_OWORD *)v6 + 2) = *(_OWORD *)a3;
  *((_OWORD *)v6 + 3) = v10;
  v11 = a1 + 1;
  v12 = a1[1];
  if (v12)
  {
    while (1)
    {
      while (1)
      {
        v13 = (uint64_t **)v12;
        v14 = *((_DWORD *)v12 + 7);
        if (v14 <= a2)
          break;
        v12 = *v13;
        v11 = v13;
        if (!*v13)
          goto LABEL_9;
      }
      if (v14 >= a2)
        break;
      v12 = v13[1];
      if (!v12)
      {
        v11 = v13 + 1;
        goto LABEL_9;
      }
    }
    operator delete(v6);
  }
  else
  {
    v13 = a1 + 1;
LABEL_9:
    std::__tree<std::__value_type<double,int>,std::__map_value_compare<double,std::__value_type<double,int>,std::less<double>,true>,std::allocator<std::__value_type<double,int>>>::__insert_node_at(a1, (uint64_t)v13, v11, (uint64_t *)v6);
  }
}

uint64_t MetadataDNNVAD::Uninitialize(DSPGraph::Graph **this)
{
  DSPGraph::Graph *v2;
  std::__shared_weak_count *v3;
  unint64_t *v4;
  unint64_t v5;
  DSPGraph::Graph *v6;
  __int128 v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  v2 = *this;
  if (v2)
  {
    DSPGraph::Graph::uninitialize(v2);
    DSPGraph::Graph::unconfigure(*this);
    v8 = 0uLL;
    std::shared_ptr<vp::xml::_xmlNode const>::operator=[abi:ne180100]((uint64_t)this, &v8);
    v3 = (std::__shared_weak_count *)*((_QWORD *)&v8 + 1);
    if (*((_QWORD *)&v8 + 1))
    {
      v4 = (unint64_t *)(*((_QWORD *)&v8 + 1) + 8);
      do
        v5 = __ldaxr(v4);
      while (__stlxr(v5 - 1, v4));
      if (!v5)
      {
        ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
        std::__shared_weak_count::__release_weak(v3);
      }
    }
    v6 = this[2];
    this[2] = 0;
    if (v6)
      (*(void (**)(DSPGraph::Graph *))(*(_QWORD *)v6 + 8))(v6);
  }
  return 0;
}

void sub_1B6348DF8(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, __int128 buf, __int128 a17)
{
  unsigned int *v18;
  void *v19;
  _BOOL4 v20;
  uint64_t v21;
  NSObject *v22;
  const char *v23;
  uint32_t v24;
  void **p_p;
  uint64_t v26;

  if (!a2)
    _Unwind_Resume(a1);
  if (a2 == 3)
  {
    v18 = (unsigned int *)__cxa_begin_catch(a1);
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      p_p = (void **)&__p;
      caulk::string_from_4cc((caulk *)v18[2], 1, (std::string *)&__p);
      if (a15 < 0)
        p_p = __p;
      v26 = (*(uint64_t (**)(unsigned int *))(*(_QWORD *)v18 + 16))(v18);
      LODWORD(buf) = 136315906;
      *(_QWORD *)((char *)&buf + 4) = "Uninitialize";
      WORD6(buf) = 1024;
      *(_DWORD *)((char *)&buf + 14) = 97;
      WORD1(a17) = 2080;
      *(_QWORD *)((char *)&a17 + 4) = p_p;
      WORD6(a17) = 2080;
      *(_QWORD *)((char *)&a17 + 14) = v26;
      _os_log_error_impl(&dword_1B5ED0000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "MetadataDNNVAD:%s:%d: couldn't uninitialize due to DSPG exception %s: %s", (uint8_t *)&buf, 0x26u);
      if (a15 < 0)
        operator delete(__p);
    }
LABEL_9:
    __cxa_end_catch();
    JUMPOUT(0x1B6348D5CLL);
  }
  v19 = __cxa_begin_catch(a1);
  v20 = os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR);
  if (a2 == 2)
  {
    if (!v20)
      goto LABEL_9;
    v21 = (*(uint64_t (**)(void *))(*(_QWORD *)v19 + 16))(v19);
    LODWORD(buf) = 136315650;
    *(_QWORD *)((char *)&buf + 4) = "Uninitialize";
    WORD6(buf) = 1024;
    *(_DWORD *)((char *)&buf + 14) = 100;
    WORD1(a17) = 2080;
    *(_QWORD *)((char *)&a17 + 4) = v21;
    v22 = MEMORY[0x1E0C81028];
    v23 = "MetadataDNNVAD:%s:%d: couldn't uninitialize due to exception: %s";
    v24 = 28;
  }
  else
  {
    if (!v20)
      goto LABEL_9;
    LODWORD(buf) = 136315394;
    *(_QWORD *)((char *)&buf + 4) = "Uninitialize";
    WORD6(buf) = 1024;
    *(_DWORD *)((char *)&buf + 14) = 103;
    v22 = MEMORY[0x1E0C81028];
    v23 = "MetadataDNNVAD:%s:%d: unknown exception";
    v24 = 18;
  }
  _os_log_error_impl(&dword_1B5ED0000, v22, OS_LOG_TYPE_ERROR, v23, (uint8_t *)&buf, v24);
  goto LABEL_9;
}

uint64_t std::unordered_map<std::string,std::string>::unordered_map(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t v5;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = 1065353216;
  if (a3)
  {
    v5 = 48 * a3;
    do
    {
      std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,std::string> const&>(a1, a2, (__int128 *)a2);
      a2 += 48;
      v5 -= 48;
    }
    while (v5);
  }
  return a1;
}

void sub_1B6349034(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

uint64_t MetadataDNNVAD_LoadPropertyList(NSString *a1)
{
  void *v1;
  uint64_t v2;
  uint64_t v4;

  objc_msgSend(MEMORY[0x1E0C99D50], "dataWithContentsOfFile:", a1);
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = 100;
  objc_msgSend(MEMORY[0x1E0CB38B0], "propertyListWithData:options:format:error:", v1, 0, &v4, 0);
  v2 = objc_claimAutoreleasedReturnValue();

  return v2;
}

void sub_1B63490B4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

float CFilterBank::filterbank_compute_bank32(uint64_t a1, const float *a2, float *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  float *v9;
  uint64_t v10;
  vDSP_Length v11;
  uint64_t v12;
  float *v13;
  float result;
  uint64_t v15;
  float *v16;
  uint64_t v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v7 = *(_QWORD *)(a1 + 48);
  v6 = *(_QWORD *)(a1 + 56);
  MEMORY[0x1E0C80A78](a1);
  v9 = (float *)((char *)&v17 - ((v8 + 15) & 0x7FFFFFFF0));
  HIDWORD(v17) = 0;
  vDSP_vmul(*(const float **)(v10 + 16), 1, a2, 1, v9, 1, v11);
  if (*(int *)(a1 + 40) >= 1)
  {
    v12 = 0;
    v13 = a3;
    do
    {
      vDSP_sve(&v9[*(int *)(v7 + 4 * v12)], 1, v13, *(int *)(v6 + 4 * v12));
      ++v12;
      ++v13;
    }
    while (v12 < *(int *)(a1 + 40));
  }
  vDSP_vmul(*(const float **)(a1 + 24), 1, a2, 1, v9, 1, *(int *)(a1 + 44));
  if (*(int *)(a1 + 40) > 1)
  {
    v15 = 0;
    v16 = a3 + 1;
    do
    {
      vDSP_sve(&v9[*(int *)(v7 + 4 * v15)], 1, (float *)&v17 + 1, *(int *)(v6 + 4 * v15));
      result = *((float *)&v17 + 1) + v16[v15];
      v16[v15++] = result;
    }
    while (v15 < *(int *)(a1 + 40) - 1);
  }
  return result;
}

float CFilterBank::filterbank_compute_psd16(int **a1, uint64_t a2, float *a3)
{
  uint64_t v3;
  int *v4;
  int *v5;
  int *v6;
  int *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  float v12;
  float result;

  v3 = *((unsigned int *)a1 + 11);
  if ((int)v3 >= 1)
  {
    v4 = *a1;
    v5 = a1[1];
    v6 = a1[2];
    v7 = a1[3];
    do
    {
      v9 = *v4++;
      v8 = v9;
      v11 = *v5++;
      v10 = v11;
      LODWORD(v11) = *v6++;
      v12 = *(float *)(a2 + 4 * v8) * *(float *)&v11;
      LODWORD(v11) = *v7++;
      result = v12 + (float)(*(float *)(a2 + 4 * v10) * *(float *)&v11);
      *a3++ = result;
      --v3;
    }
    while (v3);
  }
  return result;
}

void CFilterBank::filterbank_destroy(void **a1)
{
  free(*a1);
  free(a1[1]);
  free(a1[2]);
  free(a1[3]);
  free(a1[6]);
  free(a1[7]);
  free(a1[4]);
  free(a1);
}

_OWORD *CFilterBank::filterbank_new(CFilterBank *this, int a2, float a3)
{
  int v5;
  float v6;
  float v7;
  float v8;
  _OWORD *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  float *v16;
  uint64_t v17;
  float v18;
  float v19;
  float v20;
  int v21;
  float v22;
  float v23;
  float v24;
  int v25;
  float v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int *v32;
  int *v33;
  _DWORD *v34;
  _DWORD *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _DWORD *v40;
  _DWORD *v41;
  uint64_t v42;
  uint64_t v43;
  int v44;
  uint64_t v45;

  v5 = (int)this;
  v6 = a3 * 0.5;
  v7 = atanf((float)(a3 * 0.5) * 0.00074);
  v8 = atanf((float)(v6 * v6) * 0.0000000185);
  v9 = malloc_type_malloc(0x40uLL, 0x90BE0547uLL);
  *v9 = 0u;
  v9[1] = 0u;
  v9[2] = 0u;
  v9[3] = 0u;
  *((_DWORD *)v9 + 10) = v5;
  *((_DWORD *)v9 + 11) = a2;
  v10 = malloc_type_malloc(4 * a2, 0x90BE0547uLL);
  bzero(v10, 4 * a2);
  *(_QWORD *)v9 = v10;
  v11 = malloc_type_malloc(4 * a2, 0x90BE0547uLL);
  bzero(v11, 4 * a2);
  *((_QWORD *)v9 + 1) = v11;
  v12 = malloc_type_malloc(4 * a2, 0x90BE0547uLL);
  bzero(v12, 4 * a2);
  *((_QWORD *)v9 + 2) = v12;
  v13 = malloc_type_malloc(4 * a2, 0x90BE0547uLL);
  bzero(v13, 4 * a2);
  *((_QWORD *)v9 + 3) = v13;
  v14 = malloc_type_malloc(4 * v5, 0x90BE0547uLL);
  bzero(v14, 4 * v5);
  *((_QWORD *)v9 + 6) = v14;
  v15 = malloc_type_malloc(4 * v5, 0x90BE0547uLL);
  bzero(v15, 4 * v5);
  *((_QWORD *)v9 + 7) = v15;
  v16 = (float *)malloc_type_malloc(4 * v5, 0x90BE0547uLL);
  bzero(v16, 4 * v5);
  *((_QWORD *)v9 + 4) = v16;
  if (a2 >= 1)
  {
    v17 = 0;
    v18 = a3 / (float)(2 * a2);
    v19 = (float)((float)(v8 * 2.24) + (float)(v7 * 13.1)) + (float)(v6 * 0.0001);
    v20 = v19 / (float)(v5 - 1);
    v21 = v5 - 2;
    do
    {
      v22 = v18 * (float)(int)v17;
      v23 = atanf(v22 * 0.00074);
      v24 = (float)((float)(atanf((float)(v22 * v22) * 0.0000000185) * 2.24) + (float)(v23 * 13.1))
          + (float)(v22 * 0.0001);
      if (v24 > v19)
        break;
      v25 = vcvtms_s32_f32(v24 / v20);
      v26 = 1.0;
      v27 = v21;
      if (v21 >= v25)
      {
        v26 = (float)(v24 - (float)((float)v25 * v20)) / v20;
        v27 = v25;
      }
      v28 = *((_QWORD *)v9 + 1);
      *(_DWORD *)(*(_QWORD *)v9 + 4 * v17) = v27;
      v29 = *((_QWORD *)v9 + 3);
      *(float *)(*((_QWORD *)v9 + 2) + 4 * v17) = 1.0 - v26;
      *(_DWORD *)(v28 + 4 * v17) = v27 + 1;
      *(float *)(v29 + 4 * v17++) = v26;
    }
    while (a2 != v17);
  }
  v30 = *((unsigned int *)v9 + 10);
  if ((int)v30 >= 1)
    bzero(v16, 4 * v30);
  v31 = *((unsigned int *)v9 + 11);
  if ((int)v31 >= 1)
  {
    v32 = *(int **)v9;
    v33 = (int *)*((_QWORD *)v9 + 1);
    v34 = (_DWORD *)*((_QWORD *)v9 + 2);
    v35 = (_DWORD *)*((_QWORD *)v9 + 3);
    do
    {
      v37 = *v32++;
      v36 = v37;
      LODWORD(v37) = *v34++;
      v16[v36] = *(float *)&v37 + v16[v36];
      v39 = *v33++;
      v38 = v39;
      LODWORD(v39) = *v35++;
      v16[v38] = *(float *)&v39 + v16[v38];
      --v31;
    }
    while (v31);
  }
  if ((int)v30 >= 1)
  {
    do
    {
      *v16 = 1.0 / *v16;
      ++v16;
      --v30;
    }
    while (v30);
  }
  v40 = (_DWORD *)*((_QWORD *)v9 + 6);
  v41 = (_DWORD *)*((_QWORD *)v9 + 7);
  *v40 = 0;
  *v41 = 0;
  if (a2 >= 1)
  {
    v42 = 0;
    LODWORD(v43) = 0;
    v44 = 0;
    v45 = *(_QWORD *)v9;
    do
    {
      if (*(_DWORD *)(v45 + 4 * v42) == v44)
      {
        ++v41[(int)v43];
      }
      else
      {
        v43 = (int)v43 + 1;
        ++v44;
        v40[v43] = v42;
        v41[v43] = 1;
      }
      ++v42;
    }
    while (a2 != v42);
  }
  return v9;
}

void AUMultiChannelAGC::~AUMultiChannelAGC(AUMultiChannelAGC *this)
{
  AUMultiChannelAGC::~AUMultiChannelAGC(this);
  JUMPOUT(0x1BCC95CECLL);
}

{
  OpaqueAudioComponentInstance *v2;
  OpaqueAudioComponentInstance *v3;
  void *v4;
  _QWORD *v5;
  void **v6;

  *(_QWORD *)this = &off_1E69D3640;
  v2 = (OpaqueAudioComponentInstance *)*((_QWORD *)this + 74);
  if (v2)
  {
    AudioUnitUninitialize(v2);
    v3 = (OpaqueAudioComponentInstance *)*((_QWORD *)this + 74);
    if (v3)
    {
      if (!AudioComponentInstanceDispose(v3))
        *((_QWORD *)this + 74) = 0;
    }
  }
  v4 = (void *)*((_QWORD *)this + 87);
  if (v4)
  {
    *((_QWORD *)this + 88) = v4;
    operator delete(v4);
  }
  v5 = (_QWORD *)*((_QWORD *)this + 84);
  if (v5)
  {
    ((void (*)(int, _QWORD *))ausdk::BufferAllocator::instance(void)::global[3])((int)&ausdk::BufferAllocator::instance(void)::global, v5);
    *((_QWORD *)this + 84) = 0;
  }
  *((_QWORD *)this + 85) = 0;
  *((_DWORD *)this + 166) = 0;
  *(_QWORD *)this = &off_1E69ED840;
  v6 = (void **)((char *)this + 528);
  std::vector<std::unique_ptr<DspLib::AlgorithmBaseNewParameters>>::__destroy_vector::operator()[abi:ne180100](&v6);
  ausdk::AUBase::~AUBase(this);
}

double AUMultiChannelAGC::Initialize(AUMultiChannelAGC *this)
{
  double result;
  uint64_t Element;
  uint64_t v4;
  unint64_t v5;
  OpaqueAudioComponentInstance *v6;
  AudioStreamBasicDescription v7;
  int v8;
  uint64_t inData;
  __int128 v10;
  __int128 v11;

  if (!ausdk::AUEffectBase::Initialize((int64x2_t *)this))
  {
    Element = ausdk::AUScope::SafeGetElement((AUMultiChannelAGC *)((char *)this + 80), 0);
    v4 = ausdk::AUScope::SafeGetElement((AUMultiChannelAGC *)((char *)this + 128), 0);
    if (*(_DWORD *)(Element + 88) == 1819304813)
    {
      result = *(double *)(Element + 80);
      if (result == *(double *)(v4 + 80))
      {
        v5 = *((unsigned int *)this + 84);
        LODWORD(inData) = 0;
        std::vector<float>::assign((char **)this + 87, v5, &inData);
        v7.mSampleRate = *(Float64 *)(Element + 80);
        *(_OWORD *)&v7.mFormatID = xmmword_1B6626900;
        *(_OWORD *)&v7.mBytesPerFrame = xmmword_1B6626910;
        ausdk::AUBufferList::Allocate((AUMultiChannelAGC *)((char *)this + 664), &v7, v5);
        v6 = (OpaqueAudioComponentInstance *)*((_QWORD *)this + 74);
        if (!v6 || !AudioUnitUninitialize(v6))
        {
          inData = *(_QWORD *)(ausdk::AUScope::SafeGetElement((AUMultiChannelAGC *)((char *)this + 128), 0) + 80);
          v10 = xmmword_1B6626900;
          v11 = xmmword_1B6626910;
          if (!AudioUnitSetProperty(*((AudioUnit *)this + 74), 8u, 1u, 0, &inData, 0x28u)
            && !AudioUnitSetProperty(*((AudioUnit *)this + 74), 8u, 2u, 0, &inData, 0x28u))
          {
            v8 = *((_DWORD *)this + 84);
            if (!AudioUnitSetProperty(*((AudioUnit *)this + 74), 0xEu, 0, 0, &v8, 4u)
              && !AudioUnitInitialize(*((AudioUnit *)this + 74)))
            {
              result = 0.0;
              *(_OWORD *)((char *)this + 632) = 0u;
              *(_OWORD *)((char *)this + 648) = 0u;
              *(_OWORD *)((char *)this + 600) = 0u;
              *(_OWORD *)((char *)this + 616) = 0u;
              *((_DWORD *)this + 164) = 1;
            }
          }
        }
      }
    }
  }
  return result;
}

OpaqueAudioComponentInstance *AUMultiChannelAGC::Cleanup(AUMultiChannelAGC *this)
{
  OpaqueAudioComponentInstance *result;

  result = (OpaqueAudioComponentInstance *)*((_QWORD *)this + 74);
  if (result)
    return (OpaqueAudioComponentInstance *)AudioUnitUninitialize(result);
  return result;
}

uint64_t AUMultiChannelAGC::Reset(AudioUnit *this, AudioUnitScope a2, AudioUnitElement a3)
{
  uint64_t result;
  _QWORD *v5;
  AudioUnit v6;

  result = AudioUnitReset(this[74], a2, a3);
  if (!(_DWORD)result)
  {
    this[75] = 0;
    *((_DWORD *)this + 180) = 0;
    v5 = this[66];
    v6 = this[67];
    while (v5 != (_QWORD *)v6)
    {
      if (*v5)
        (*(void (**)(_QWORD))(*(_QWORD *)*v5 + 16))(*v5);
      ++v5;
    }
    return 0;
  }
  return result;
}

uint64_t AUMultiChannelAGC::GetPropertyInfo(AUMultiChannelAGC *this, int a2, int a3, unsigned int a4, unsigned int *a5, BOOL *a6)
{
  BOOL v6;
  uint64_t result;

  if (a2 != 3700 || a3)
  {
    if (a3 || (a2 | 8) != 0x1D)
      return 4294956417;
    v6 = 1;
  }
  else
  {
    v6 = 0;
  }
  result = 0;
  *a6 = v6;
  *a5 = 4;
  return result;
}

uint64_t AUMultiChannelAGC::GetProperty(AUMultiChannelAGC *this, int a2, int a3, unsigned int a4, _DWORD *a5)
{
  uint64_t result;
  int v7;

  if (a2 == 3700 && !a3)
  {
    result = 0;
    v7 = *((unsigned __int8 *)this + 376);
LABEL_4:
    *a5 = v7;
    return result;
  }
  if (!a3)
  {
    if (a2 == 29)
    {
      result = 0;
      v7 = *((unsigned __int8 *)this + 554);
      goto LABEL_4;
    }
    if (a2 == 21)
    {
      result = 0;
      v7 = *((unsigned __int8 *)this + 552);
      goto LABEL_4;
    }
  }
  return 4294956417;
}

uint64_t AUMultiChannelAGC::SetParameter(AudioUnit *this, unsigned int a2, unsigned int a3, unsigned int a4, float a5, UInt32 a6)
{
  float v12;
  ausdk::AUScope *Scope;
  ausdk::AUElement *Element;
  uint64_t result;

  if (a5 > 49.0 && a2 == 50)
    v12 = 49.0;
  else
    v12 = a5;
  Scope = (ausdk::AUScope *)ausdk::AUBase::GetScope((ausdk::AUBase *)this, a3);
  Element = (ausdk::AUElement *)ausdk::AUScope::SafeGetElement(Scope, a4);
  ausdk::AUElement::SetParameter(Element, a2, v12, 0);
  if (a2 > 0x40)
    return 0;
  result = AudioUnitSetParameter(this[74], a2, a3, a4, v12, a6);
  if (!(_DWORD)result)
    return 0;
  return result;
}

uint64_t AUMultiChannelAGC::ProcessBufferLists(AUMultiChannelAGC *this, unsigned int *a2, const AudioBufferList *a3, AudioBufferList *a4, float *a5)
{
  uint64_t mNumberBuffers;
  void **p_mData;
  void **v12;
  uint64_t result;
  int v14;
  unsigned int v15;
  uint64_t v16;
  ausdk::AUElement *v17;
  ausdk::AUElement **v18;
  float v19;
  uint64_t v21;
  ausdk::AUElement *v22;
  ausdk::AUElement **v23;
  float Parameter;
  unsigned int v25;
  uint64_t v26;
  const float **mBuffers;
  const float *v28;
  uint64_t BufferList;
  AudioBufferList *v30;
  float v31;
  uint64_t i;
  float *mData;
  float v34;
  double v35;
  float v36;
  float v37;
  uint64_t v38;
  AudioBufferList *v39;
  float v40;
  AudioUnitParameterValue v41;
  AudioUnitParameterValue v42[2];
  AudioUnitParameterValue outValue[2];
  AudioStreamBasicDescription __B;

  mNumberBuffers = a3->mNumberBuffers;
  if ((*(unsigned int (**)(AUMultiChannelAGC *))(*(_QWORD *)this + 592))(this))
  {
    if ((_DWORD)mNumberBuffers)
    {
      p_mData = &a4->mBuffers[0].mData;
      v12 = &a3->mBuffers[0].mData;
      do
      {
        if ((_DWORD)a5)
          memmove(*p_mData, *v12, 4 * a5);
        p_mData += 2;
        v12 += 2;
        --mNumberBuffers;
      }
      while (mNumberBuffers);
    }
    return 0;
  }
  else
  {
    v39 = a4;
    v14 = *((_DWORD *)this + 172);
    if (v14 == *((_DWORD *)this + 173))
    {
LABEL_22:
      v21 = *((_QWORD *)this + 9);
      if (v21)
      {
        v22 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v21 + 32))(v21, 0);
      }
      else
      {
        v23 = (ausdk::AUElement **)*((_QWORD *)this + 6);
        if (*((ausdk::AUElement ***)this + 7) == v23)
          v22 = 0;
        else
          v22 = *v23;
      }
      Parameter = ausdk::AUElement::GetParameter(v22, 0x41u);
      if ((_DWORD)a5)
        memmove(*((void **)this + 87), a3->mBuffers[0].mData, 4 * a5);
      v25 = Parameter;
      if (mNumberBuffers >= 2)
      {
        v26 = mNumberBuffers - 1;
        mBuffers = (const float **)a3[1].mBuffers;
        do
        {
          v28 = *mBuffers;
          if (v25 == 1)
          {
            vDSP_vadd(*((const float **)this + 87), 1, v28, 1, *((float **)this + 87), 1, a5);
          }
          else if (!v25)
          {
            vDSP_vmax(*((const float **)this + 87), 1, v28, 1, *((float **)this + 87), 1, a5);
          }
          mBuffers += 2;
          --v26;
        }
        while (v26);
      }
      if (v25 == 1)
      {
        *(float *)&__B.mSampleRate = 1.0 / (float)mNumberBuffers;
        vDSP_vsmul(*((const float **)this + 87), 1, (const float *)&__B, *((float **)this + 87), 1, a5);
      }
      __B.mSampleRate = *(Float64 *)(ausdk::AUScope::SafeGetElement((AUMultiChannelAGC *)((char *)this + 128), 0) + 80);
      *(_OWORD *)&__B.mFormatID = xmmword_1B6626900;
      *(_OWORD *)&__B.mBytesPerFrame = xmmword_1B6626910;
      ausdk::AUBufferList::PrepareBuffer((AUMultiChannelAGC *)((char *)this + 664), &__B, a5);
      BufferList = ausdk::AUBufferList::GetBufferList((AUMultiChannelAGC *)((char *)this + 664));
      v30 = (AudioBufferList *)BufferList;
      if ((_DWORD)a5)
        memmove(*(void **)(BufferList + 16), *((const void **)this + 87), 4 * a5);
      result = AudioUnitProcess(*((AudioUnit *)this + 74), a2, (const AudioTimeStamp *)((char *)this + 600), (UInt32)a5, v30);
      if (!(_DWORD)result)
      {
        *((double *)this + 75) = *((double *)this + 75) + (double)a5;
        *(_QWORD *)v42 = 0;
        *(_QWORD *)outValue = 0;
        v41 = 0.0;
        result = AudioUnitGetParameter(*((AudioUnit *)this + 74), 0x3Eu, 0, 0, &outValue[1]);
        if (!(_DWORD)result)
        {
          result = AudioUnitGetParameter(*((AudioUnit *)this + 74), 1u, 0, 0, outValue);
          if (!(_DWORD)result)
          {
            result = AudioUnitGetParameter(*((AudioUnit *)this + 74), 0x1Bu, 0, 0, &v42[1]);
            if (!(_DWORD)result)
            {
              result = AudioUnitGetParameter(*((AudioUnit *)this + 74), 0x28u, 0, 0, v42);
              if (!(_DWORD)result)
              {
                result = AudioUnitGetParameter(*((AudioUnit *)this + 74), 0x29u, 0, 0, &v41);
                if (!(_DWORD)result)
                {
                  v31 = exp(outValue[1] * 0.115129255);
                  v40 = v31;
                  if ((_DWORD)mNumberBuffers)
                  {
                    for (i = 0; i != mNumberBuffers; ++i)
                    {
                      mData = (float *)v39->mBuffers[i].mData;
                      vDSP_vsmul((const float *)a3->mBuffers[i].mData, 1, &v40, mData, 1, a5);
                      v34 = v42[1];
                      if (v41 == 0.0)
                      {
                        AUMultiChannelAGC::ApplyRampedGain((AUMultiChannelAGC *)mData, mData, a5, v42[1] + *((float *)this + 180), v42[1] + outValue[0]);
                        if (v42[0] != 0.0)
                          AUMultiChannelAGC::SoftClip(mData, a5);
                      }
                      else
                      {
                        v35 = exp((float)((float)(v42[1] - v42[1]) / (float)a5) * 0.115129255);
                        if ((_DWORD)a5)
                        {
                          v36 = v35;
                          v37 = exp(v34 * 0.115129255);
                          v38 = a5;
                          do
                          {
                            v37 = v37 * v36;
                            *mData = v37 * *mData;
                            ++mData;
                            --v38;
                          }
                          while (v38);
                        }
                      }
                    }
                  }
                  *((AudioUnitParameterValue *)this + 180) = outValue[0];
                  return AUMultiChannelAGC::displayAGCV2Status((AudioUnit *)this);
                }
              }
            }
          }
        }
      }
    }
    else
    {
      v15 = 0;
      *((_DWORD *)this + 173) = v14;
      while (1)
      {
        v16 = *((_QWORD *)this + 9);
        if (v16)
        {
          v17 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v16 + 32))(v16, 0);
        }
        else
        {
          v18 = (ausdk::AUElement **)*((_QWORD *)this + 6);
          if (*((ausdk::AUElement ***)this + 7) == v18)
            v17 = 0;
          else
            v17 = *v18;
        }
        v19 = ausdk::AUElement::GetParameter(v17, v15);
        if (v19 > 49.0 && v15 == 50)
          v19 = 49.0;
        result = AudioUnitSetParameter(*((AudioUnit *)this + 74), v15, 0, 0, v19, 0);
        if ((_DWORD)result)
          break;
        if (++v15 == 65)
          goto LABEL_22;
      }
    }
  }
  return result;
}

double AUMultiChannelAGC::GetParameterInfo(AudioUnit *this, int a2, AudioUnitElement inElement, AudioUnitParameterInfo *buffer)
{
  double result;
  AudioUnitParameterOptions v7;
  UInt32 ioDataSize;

  buffer->flags = 0;
  buffer->unitName = 0;
  if (!a2)
  {
    if (inElement > 0x40)
    {
      if (inElement == 65)
      {
        buffer->cfNameString = CFSTR("Channel Combination Mode");
        buffer->flags = 0x8000000;
        CFStringGetCString(CFSTR("Channel Combination Mode"), buffer->name, 52, 0x8000100u);
        buffer->unit = kAudioUnitParameterUnit_Indexed;
        result = 0.0078125;
        *(_QWORD *)&buffer->minValue = 0x3F80000000000000;
        v7 = buffer->flags | 0xC0000000;
        buffer->defaultValue = 0.0;
        buffer->flags = v7;
      }
    }
    else
    {
      ioDataSize = 104;
      if (!AudioUnitGetProperty(this[74], 4u, 0, inElement, buffer, &ioDataSize) && inElement == 50)
        buffer->maxValue = 49.0;
    }
  }
  return result;
}

uint64_t AUMultiChannelAGC::RestoreState(OpaqueAudioComponentInstance **this, const void *a2)
{
  uint64_t result;

  result = ausdk::AUBase::RestoreState(this, a2);
  if (!(_DWORD)result)
    ++*((_DWORD *)this + 172);
  return result;
}

uint64_t AUMultiChannelAGC::GetParameterValueStrings(AudioUnit *this, int a2, AudioUnitElement inElement, const __CFArray **outData)
{
  uint64_t result;
  const __CFArray *v6;
  __int128 v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  if (a2)
    return 4294956417;
  if (!outData)
    return 0;
  if (inElement <= 0x40)
  {
    LODWORD(v7) = 8;
    return AudioUnitGetProperty(this[74], 0x10u, 0, inElement, outData, (UInt32 *)&v7);
  }
  if (inElement != 65)
    return 4294956417;
  v7 = xmmword_1E69D3898;
  v6 = CFArrayCreate(0, (const void **)&v7, 2, 0);
  result = 0;
  *outData = v6;
  return result;
}

double AUMultiChannelAGC::GetLatency(AUMultiChannelAGC *this)
{
  return 0.0;
}

double AUMultiChannelAGC::GetTailTime(AUMultiChannelAGC *this)
{
  return 0.0;
}

uint64_t AUMultiChannelAGC::SupportsTail(AUMultiChannelAGC *this)
{
  return 1;
}

uint64_t AUMultiChannelAGC::SupportedNumChannels(AUMultiChannelAGC *this, const AUChannelInfo **a2)
{
  if (a2)
    *a2 = (const AUChannelInfo *)&AUMultiChannelAGC::SupportedNumChannels(AUChannelInfo const**)::sChannels;
  return 1;
}

uint64_t AUMultiChannelAGC::ValidFormat(AUMultiChannelAGC *this, const AudioStreamBasicDescription *a2, unsigned int a3, AudioStreamBasicDescription *a4)
{
  uint64_t result;

  LODWORD(result) = ausdk::ASBD::IsCommonFloat32((ausdk::ASBD *)a4, a2);
  if (a4->mChannelsPerFrame)
    return result;
  else
    return 0;
}

uint64_t AUMultiChannelAGC::displayAGCV2Status(AudioUnit *this)
{
  OSStatus Parameter;
  OSStatus v3;
  OSStatus v4;
  OSStatus v5;
  OSStatus v6;
  OSStatus v7;
  OSStatus v8;
  OSStatus v9;
  OSStatus v10;
  OSStatus v11;
  OSStatus v12;
  OSStatus v13;
  OSStatus v15;
  OSStatus v16;
  AudioUnitParameterValue outValue;

  outValue = 0.0;
  Parameter = AudioUnitGetParameter(this[74], 0, 0, 0, &outValue);
  if (!Parameter)
    Parameter = (*((uint64_t (**)(AudioUnit *, _QWORD, _QWORD, _QWORD, _QWORD, AudioUnitParameterValue))*this
                 + 19))(this, 0, 0, 0, 0, outValue);
  v16 = Parameter;
  outValue = 0.0;
  v3 = AudioUnitGetParameter(this[74], 1u, 0, 0, &outValue);
  if (!v3)
    v3 = (*((uint64_t (**)(AudioUnit *, uint64_t, _QWORD, _QWORD, _QWORD, AudioUnitParameterValue))*this + 19))(this, 1, 0, 0, 0, outValue);
  v15 = v3;
  outValue = 0.0;
  v4 = AudioUnitGetParameter(this[74], 0xEu, 0, 0, &outValue);
  if (!v4)
    v4 = (*((uint64_t (**)(AudioUnit *, uint64_t, _QWORD, _QWORD, _QWORD, AudioUnitParameterValue))*this + 19))(this, 14, 0, 0, 0, outValue);
  outValue = 0.0;
  v5 = AudioUnitGetParameter(this[74], 0x12u, 0, 0, &outValue);
  if (!v5)
    v5 = (*((uint64_t (**)(AudioUnit *, uint64_t, _QWORD, _QWORD, _QWORD, AudioUnitParameterValue))*this + 19))(this, 18, 0, 0, 0, outValue);
  outValue = 0.0;
  v6 = AudioUnitGetParameter(this[74], 0x13u, 0, 0, &outValue);
  if (!v6)
    v6 = (*((uint64_t (**)(AudioUnit *, uint64_t, _QWORD, _QWORD, _QWORD, AudioUnitParameterValue))*this + 19))(this, 19, 0, 0, 0, outValue);
  outValue = 0.0;
  v7 = AudioUnitGetParameter(this[74], 0x23u, 0, 0, &outValue);
  if (!v7)
    v7 = (*((uint64_t (**)(AudioUnit *, uint64_t, _QWORD, _QWORD, _QWORD, AudioUnitParameterValue))*this + 19))(this, 35, 0, 0, 0, outValue);
  outValue = 0.0;
  v8 = AudioUnitGetParameter(this[74], 0x25u, 0, 0, &outValue);
  if (!v8)
    v8 = (*((uint64_t (**)(AudioUnit *, uint64_t, _QWORD, _QWORD, _QWORD, AudioUnitParameterValue))*this + 19))(this, 37, 0, 0, 0, outValue);
  outValue = 0.0;
  v9 = AudioUnitGetParameter(this[74], 0x2Au, 0, 0, &outValue);
  if (!v9)
    v9 = (*((uint64_t (**)(AudioUnit *, uint64_t, _QWORD, _QWORD, _QWORD, AudioUnitParameterValue))*this + 19))(this, 42, 0, 0, 0, outValue);
  outValue = 0.0;
  v10 = AudioUnitGetParameter(this[74], 0x2Du, 0, 0, &outValue);
  if (!v10)
    v10 = (*((uint64_t (**)(AudioUnit *, uint64_t, _QWORD, _QWORD, _QWORD, AudioUnitParameterValue))*this + 19))(this, 45, 0, 0, 0, outValue);
  outValue = 0.0;
  v11 = AudioUnitGetParameter(this[74], 0x3Cu, 0, 0, &outValue);
  if (!v11)
    v11 = (*((uint64_t (**)(AudioUnit *, uint64_t, _QWORD, _QWORD, _QWORD, AudioUnitParameterValue))*this + 19))(this, 60, 0, 0, 0, outValue);
  outValue = 0.0;
  v12 = AudioUnitGetParameter(this[74], 0x3Du, 0, 0, &outValue);
  if (!v12)
    v12 = (*((uint64_t (**)(AudioUnit *, uint64_t, _QWORD, _QWORD, _QWORD, AudioUnitParameterValue))*this + 19))(this, 61, 0, 0, 0, outValue);
  outValue = 0.0;
  v13 = AudioUnitGetParameter(this[74], 0x40u, 0, 0, &outValue);
  if (!v13)
    v13 = (*((uint64_t (**)(AudioUnit *, uint64_t, _QWORD, _QWORD, _QWORD, AudioUnitParameterValue))*this + 19))(this, 64, 0, 0, 0, outValue);
  return v15 | v16 | v4 | v5 | v6 | v7 | v8 | v9 | v10 | v11 | v12 | v13;
}

void AUMultiChannelAGC::ApplyRampedGain(AUMultiChannelAGC *this, float *a2, float *a3, float a4, float a5)
{
  unsigned int v5;
  double v9;
  float v10;
  float v11;
  uint64_t v12;
  float v13;

  v5 = a3;
  v9 = exp((float)((float)(a5 - a4) / (float)a3) * 0.115129255);
  if (v5)
  {
    v10 = v9;
    v11 = exp(a4 * 0.115129255);
    v12 = v5;
    do
    {
      v11 = v11 * v10;
      v13 = *(float *)this;
      this = (AUMultiChannelAGC *)((char *)this + 4);
      *a2++ = v11 * v13;
      --v12;
    }
    while (v12);
  }
}

float *AUMultiChannelAGC::SoftClip(float *this, float *a2)
{
  uint64_t i;
  float v3;
  float v5;

  if ((_DWORD)a2)
  {
    for (i = a2; i; --i)
    {
      v3 = *this;
      if (fabsf(*this) > 0.95)
      {
        if (v3 > 0.95 && v3 < 5.0)
        {
          v5 = (float)((float)(v3 + -0.95) * 0.0123) + 0.95;
        }
        else if (v3 <= -5.0 || v3 >= -0.95)
        {
          v5 = 0.9999;
          if (v3 < 5.0)
          {
            v5 = -0.9999;
            if (v3 > -5.0)
              goto LABEL_15;
          }
        }
        else
        {
          v5 = (float)((float)(v3 + 0.95) * 0.0123) + -0.95;
        }
        *this = v5;
      }
LABEL_15:
      ++this;
    }
  }
  return this;
}

void AUBiquad::~AUBiquad(AUBiquad *this)
{
  void **v2;

  *(_QWORD *)this = &off_1E69ED840;
  v2 = (void **)((char *)this + 528);
  std::vector<std::unique_ptr<DspLib::AlgorithmBaseNewParameters>>::__destroy_vector::operator()[abi:ne180100](&v2);
  ausdk::AUBase::~AUBase(this);
}

{
  void **v2;

  *(_QWORD *)this = &off_1E69ED840;
  v2 = (void **)((char *)this + 528);
  std::vector<std::unique_ptr<DspLib::AlgorithmBaseNewParameters>>::__destroy_vector::operator()[abi:ne180100](&v2);
  ausdk::AUBase::~AUBase(this);
  JUMPOUT(0x1BCC95CECLL);
}

uint64_t AUBiquad::Initialize(AUBiquad *this)
{
  uint64_t result;
  uint64_t Element;
  __int128 v4;
  uint64_t v5;
  __int128 v6;
  const AudioStreamBasicDescription *v7;
  const CAStreamBasicDescription *v8;
  uint64_t ProcessProcForFormats;
  uint64_t v10;
  AudioStreamBasicDescription v11;
  _OWORD v12[2];
  uint64_t v13;

  result = ausdk::AUEffectBase::Initialize((int64x2_t *)this);
  if (!(_DWORD)result)
  {
    Element = ausdk::AUScope::SafeGetElement((AUBiquad *)((char *)this + 80), 0);
    v4 = *(_OWORD *)(Element + 96);
    v12[0] = *(_OWORD *)(Element + 80);
    v12[1] = v4;
    v13 = *(_QWORD *)(Element + 112);
    v5 = ausdk::AUScope::SafeGetElement((AUBiquad *)((char *)this + 128), 0);
    v6 = *(_OWORD *)(v5 + 96);
    *(_OWORD *)&v11.mSampleRate = *(_OWORD *)(v5 + 80);
    *(_OWORD *)&v11.mBytesPerPacket = v6;
    *(_QWORD *)&v11.mBitsPerChannel = *(_QWORD *)(v5 + 112);
    if (CAStreamBasicDescription::IsEquivalent((CAStreamBasicDescription *)v12, &v11, v7)
      && (ProcessProcForFormats = Biquad_8dot24::CreateProcessProcForFormats((Biquad_8dot24 *)v12, (const CAStreamBasicDescription *)&v11, v8), *((_QWORD *)this + 81) = ProcessProcForFormats, *((_QWORD *)this + 82) = v10, (_DWORD)ProcessProcForFormats == 1))
    {
      result = 0;
      *(_OWORD *)((char *)this + 628) = 0u;
      *(_OWORD *)((char *)this + 612) = 0u;
    }
    else
    {
      return 4294956428;
    }
  }
  return result;
}

uint64_t AUBiquad::Reset(AUBiquad *this)
{
  _QWORD *v1;
  _QWORD *v2;

  *(_OWORD *)((char *)this + 628) = 0u;
  *(_OWORD *)((char *)this + 612) = 0u;
  v1 = (_QWORD *)*((_QWORD *)this + 66);
  v2 = (_QWORD *)*((_QWORD *)this + 67);
  while (v1 != v2)
  {
    if (*v1)
      (*(void (**)(_QWORD))(*(_QWORD *)*v1 + 16))(*v1);
    ++v1;
  }
  return 0;
}

uint64_t AUBiquad::SetParameter(AUBiquad *this, unsigned int a2, unsigned int a3, unsigned int a4, float a5)
{
  ausdk::AUScope *Scope;
  ausdk::AUElement *Element;

  Scope = (ausdk::AUScope *)ausdk::AUBase::GetScope(this, a3);
  Element = (ausdk::AUElement *)ausdk::AUScope::SafeGetElement(Scope, a4);
  ausdk::AUElement::SetParameter(Element, a2, a5, 0);
  *((_BYTE *)this + 664) = 1;
  return 0;
}

uint64_t AUBiquad::ProcessBufferLists(int32x4_t *this, unsigned int *a2, const AudioBufferList *a3, AudioBufferList *a4, uint64_t a5)
{
  float v9;
  float Parameter;
  float v11;
  unsigned int v13;
  void *mData;
  void *v15;
  uint64_t Element;
  unsigned int v18;
  double v19;
  long double v20;
  long double v21;
  long double v22;
  double v23;
  float64x2_t v24;
  float v25;
  float v26;
  __double2 v27;
  double v28;
  long double v29;
  long double v30;
  float64x2_t v31;
  float64x2_t v32;
  long double v33;
  long double v34;
  long double v35;
  float64x2_t v36;
  int32x2_t v37;

  if (this[41].i8[8])
  {
    this[41].i8[8] = 0;
    v9 = *(double *)(ausdk::AUScope::SafeGetElement((ausdk::AUScope *)&this[8], 0) + 80);
    Parameter = ausdk::AUEffectBase::GetParameter((ausdk::AUEffectBase *)this, 0x66726571u);
    v11 = ausdk::AUEffectBase::GetParameter((ausdk::AUEffectBase *)this, 0x62717470u);
    if (v9 <= 0.0)
      goto LABEL_7;
    if (Parameter <= 0.0 || Parameter > (float)(v9 * 0.49))
      goto LABEL_7;
    v18 = v11;
    v19 = Parameter * 6.28318531 / v9;
    if (v11 == 2)
    {
      v25 = ausdk::AUEffectBase::GetParameter((ausdk::AUEffectBase *)this, 0x6761696Eu);
      v26 = ausdk::AUEffectBase::GetParameter((ausdk::AUEffectBase *)this, 0x62647774u);
      v27 = __sincos_stret(v19);
      v28 = sqrt(__exp10(v25 / 20.0));
      v29 = v27.__sinval * sinh(v19 * (v26 * 0.34657359) / v27.__sinval);
      v30 = 1.0 / (v29 / v28 + 1.0);
      v31.f64[0] = (v29 * v28 + 1.0) * v30;
      v32.f64[0] = v27.__cosval * -2.0 * v30;
      v31.f64[1] = v32.f64[0];
      v32.f64[1] = (1.0 - v29 / v28) * v30;
      this[37] = vuzp1q_s32((int32x4_t)vcvtq_s64_f64(vmulq_f64(v32, (float64x2_t)vdupq_n_s64(0xC170000000000000))), (int32x4_t)vcvtq_n_s64_f64(v31, 0x18uLL));
      v13 = vcvtd_n_s64_f64((1.0 - v29 * v28) * v30, 0x18uLL);
      goto LABEL_8;
    }
    if (v18 == 1)
    {
      v33 = tan(v19 * 0.5);
      v34 = v33 * v33;
      v35 = v33 * 1.41421356;
      v23 = 1.0 / (v34 + v35 + 1.0);
      v36.f64[0] = v34 + -1.0 + v34 + -1.0;
      v36.f64[1] = v34 + 1.0 - v35;
      *(int32x2_t *)this[37].i8 = vmovn_s64(vcvtq_s64_f64(vmulq_f64(vmulq_n_f64(v36, v23), (float64x2_t)vdupq_n_s64(0xC170000000000000))));
      v24 = (float64x2_t)xmmword_1B66A2040;
    }
    else
    {
      if (v18)
      {
LABEL_7:
        v13 = 0;
        this[37] = (int32x4_t)xmmword_1B66A2030;
LABEL_8:
        this[38].i32[0] = v13;
        goto LABEL_9;
      }
      v20 = 1.0 / tan(v19 * 0.5);
      v21 = v20 * v20;
      v22 = v20 * 1.41421356;
      v23 = 1.0 / (v21 + v22 + 1.0);
      this[37].i32[0] = (int)((1.0 - v21 + 1.0 - v21) * v23 * -16777216.0);
      this[37].i32[1] = (int)((v21 + 1.0 - v22) * v23 * -16777216.0);
      v24 = (float64x2_t)xmmword_1B66A2050;
    }
    v37 = vmovn_s64(vcvtq_s64_f64(vmulq_n_f64(v24, v23)));
    this[37].u64[1] = (unint64_t)v37;
    v13 = v37.i32[0];
    goto LABEL_8;
  }
LABEL_9:
  mData = a3->mBuffers[0].mData;
  v15 = a4->mBuffers[0].mData;
  if (((*(uint64_t (**)(int32x4_t *, unsigned int *))(this->i64[0] + 592))(this, a2) & 1) != 0)
  {
    if (v15 != mData)
    {
      Element = ausdk::AUScope::SafeGetElement((ausdk::AUScope *)&this[5], 0);
      memcpy(v15, mData, (*(_DWORD *)(Element + 104) * a5));
    }
  }
  else
  {
    ((void (*)(void *, void *, uint64_t, int32x4_t *))this[41].i64[0])(mData, v15, a5, (int32x4_t *)this[37].i8);
  }
  return 0;
}

uint64_t AUBiquad::GetParameterInfo(AUBiquad *this, int a2, int a3, AudioUnitParameterInfo *buffer)
{
  uint64_t result;
  int32x2_t v7;
  int32x2_t v8;
  float v9;

  buffer->flags = 0;
  buffer->unitName = 0;
  if (a2)
    return 4294956418;
  result = 4294956418;
  if (a3 > 1718773104)
  {
    if (a3 == 1718773105)
    {
      buffer->cfNameString = CFSTR("frequency");
      buffer->flags = 0x8000000;
      CFStringGetCString(CFSTR("frequency"), buffer->name, 52, 0x8000100u);
      *(_QWORD *)&buffer->unit = 0x40A0000000000008;
      *(double *)&v8 = *(double *)(ausdk::AUScope::SafeGetElement((AUBiquad *)((char *)this + 128), 0) + 80)
                     * 0.49000001;
      v9 = *(double *)v8.i32;
      v8.i32[0] = 1148846080;
      v7 = vdup_lane_s32(v8, 0);
      *(float *)v7.i32 = v9;
    }
    else
    {
      if (a3 != 1734437230)
        return result;
      buffer->cfNameString = CFSTR("gain");
      buffer->flags = 0x8000000;
      CFStringGetCString(CFSTR("gain"), buffer->name, 52, 0x8000100u);
      *(_QWORD *)&buffer->unit = 0xC2C000000000000DLL;
      v7 = (int32x2_t)1103101952;
    }
  }
  else if (a3 == 1650751348)
  {
    buffer->cfNameString = CFSTR("bandwidth");
    buffer->flags = 0x8000000;
    CFStringGetCString(CFSTR("bandwidth"), buffer->name, 52, 0x8000100u);
    *(_QWORD *)&buffer->unit = 0x3A83126F00000015;
    v7 = (int32x2_t)0x3F80000040E00000;
  }
  else
  {
    if (a3 != 1651602544)
      return result;
    buffer->cfNameString = CFSTR("type");
    buffer->flags = 0x8000000;
    CFStringGetCString(CFSTR("type"), buffer->name, 52, 0x8000100u);
    *(_QWORD *)&buffer->unit = 1;
    v7 = (int32x2_t)0x4000000040000000;
  }
  result = 0;
  *(int32x2_t *)&buffer->maxValue = v7;
  buffer->flags |= 0xC0000000;
  return result;
}

uint64_t AUBiquad::RestoreState(OpaqueAudioComponentInstance **this, const void *a2)
{
  uint64_t result;

  result = ausdk::AUBase::RestoreState(this, a2);
  *((_BYTE *)this + 664) = 1;
  return result;
}

uint64_t AUBiquad::GetParameterValueStrings(AUBiquad *this, int a2, int a3, const __CFArray **a4)
{
  uint64_t result;
  const __CFArray *v6;
  __int128 v7;
  const __CFString *v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  result = 4294956417;
  if (!a2 && a3 == 1651602544)
  {
    if (a4)
    {
      v7 = xmmword_1E69D3B10;
      v8 = CFSTR("Parametric");
      v6 = CFArrayCreate(0, (const void **)&v7, 3, 0);
      result = 0;
      *a4 = v6;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

double AUBiquad::GetLatency(AUBiquad *this)
{
  return 0.0;
}

double AUBiquad::GetTailTime(AUBiquad *this)
{
  return 0.02;
}

uint64_t AUBiquad::SupportsTail(AUBiquad *this)
{
  return 1;
}

uint64_t AUBiquad::SupportedNumChannels(AUBiquad *this, const AUChannelInfo **a2)
{
  if (a2)
    *a2 = (const AUChannelInfo *)&AUBiquad::SupportedNumChannels(AUChannelInfo const**)::sSupportedChannelConfigs;
  return 2;
}

uint64_t AUBiquad::ValidFormat(AUBiquad *this, unsigned int a2, unsigned int a3, const AudioStreamBasicDescription *a4)
{
  __int128 v5;
  UInt32 mChannelsPerFrame;
  uint64_t result;
  _OWORD v8[2];
  uint64_t v9;
  BOOL v10;
  int v11;

  v10 = 0;
  v5 = *(_OWORD *)&a4->mBytesPerPacket;
  v8[0] = *(_OWORD *)&a4->mSampleRate;
  v8[1] = v5;
  v9 = *(_QWORD *)&a4->mBitsPerChannel;
  v11 = 0;
  if (CAStreamBasicDescription::IdentifyCommonPCMFormat(v8, &v11, &v10) && v11 == 3
    || (v11 = 0, CAStreamBasicDescription::IdentifyCommonPCMFormat(v8, &v11, &v10)) && v11 == 2)
  {
    mChannelsPerFrame = a4->mChannelsPerFrame;
    result = mChannelsPerFrame - 1 < 2;
  }
  else
  {
    result = 0;
    mChannelsPerFrame = a4->mChannelsPerFrame;
  }
  if (mChannelsPerFrame == 2)
  {
    if (v10)
      return result;
    else
      return 0;
  }
  return result;
}

uint64_t AUBiquad::ChangeStreamFormat(AUBiquad *this, uint64_t a2, uint64_t a3, const AudioStreamBasicDescription *a4, const AudioStreamBasicDescription *a5)
{
  ausdk::AUEffectBase::ChangeStreamFormat(this, a2, a3, a4, a5);
  if (a4->mSampleRate != a5->mSampleRate)
    *((_BYTE *)this + 664) = 1;
  return 0;
}

void AUClipDetector::~AUClipDetector(AUClipDetector *this)
{
  AUClipDetector::~AUClipDetector(this);
  JUMPOUT(0x1BCC95CECLL);
}

{
  NSObject *v2;
  _BYTE v3[24];
  uint64_t v4;

  v4 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)this = &off_1E69D3B38;
  if (getAUClipDetectorLog(void)::onceToken != -1)
    dispatch_once(&getAUClipDetectorLog(void)::onceToken, &__block_literal_global_8933);
  v2 = getAUClipDetectorLog(void)::gLog;
  if (os_log_type_enabled((os_log_t)getAUClipDetectorLog(void)::gLog, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)v3 = 134217984;
    *(_QWORD *)&v3[4] = this;
    _os_log_impl(&dword_1B5ED0000, v2, OS_LOG_TYPE_INFO, "[%p] destroyed", v3, 0xCu);
  }
  *(_QWORD *)v3 = (char *)this + 544;
  std::vector<std::unique_ptr<DspLib::AlgorithmBaseNewParameters>>::__destroy_vector::operator()[abi:ne180100]((void ***)v3);
  ausdk::AUBase::~AUBase(this);
}

uint64_t AUClipDetector::CreateExtendedElements(int64x2_t *this)
{
  return ausdk::AUScope::Initialize(this + 33, (ausdk::AUBase *)this, 4, 1);
}

uint64_t AUClipDetector::Initialize(AUClipDetector *this)
{
  NSObject *v2;
  double v3;
  int v4;
  NSObject *v5;
  const char *v6;
  _BYTE v8[24];
  int v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  if (getAUClipDetectorLog(void)::onceToken != -1)
    dispatch_once(&getAUClipDetectorLog(void)::onceToken, &__block_literal_global_8933);
  v2 = getAUClipDetectorLog(void)::gLog;
  if (os_log_type_enabled((os_log_t)getAUClipDetectorLog(void)::gLog, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)v8 = 134217984;
    *(_QWORD *)&v8[4] = this;
    _os_log_impl(&dword_1B5ED0000, v2, OS_LOG_TYPE_INFO, "[%p] initialize", v8, 0xCu);
  }
  (*(void (**)(_BYTE *__return_ptr, AUClipDetector *, uint64_t, _QWORD))(*(_QWORD *)this + 392))(v8, this, 1, 0);
  v3 = *(double *)v8;
  v4 = v9;
  (*(void (**)(_BYTE *__return_ptr, AUClipDetector *, uint64_t, _QWORD))(*(_QWORD *)this + 392))(v8, this, 2, 0);
  if (v3 != *(double *)v8)
  {
    if (getAUClipDetectorLog(void)::onceToken != -1)
      dispatch_once(&getAUClipDetectorLog(void)::onceToken, &__block_literal_global_8933);
    v5 = getAUClipDetectorLog(void)::gLog;
    if (!os_log_type_enabled((os_log_t)getAUClipDetectorLog(void)::gLog, OS_LOG_TYPE_ERROR))
      return 4294956421;
    *(_DWORD *)v8 = 134217984;
    *(_QWORD *)&v8[4] = this;
    v6 = "[%p] failed to initialize - I/O sample rates must be equal";
    goto LABEL_16;
  }
  if (v4 == v9)
  {
    (*(void (**)(AUClipDetector *, _QWORD, _QWORD))(*(_QWORD *)this + 72))(this, 0, 0);
    return 0;
  }
  if (getAUClipDetectorLog(void)::onceToken != -1)
    dispatch_once(&getAUClipDetectorLog(void)::onceToken, &__block_literal_global_8933);
  v5 = getAUClipDetectorLog(void)::gLog;
  if (os_log_type_enabled((os_log_t)getAUClipDetectorLog(void)::gLog, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)v8 = 134217984;
    *(_QWORD *)&v8[4] = this;
    v6 = "[%p] failed to initialize - I/O channel counts must be equal";
LABEL_16:
    _os_log_error_impl(&dword_1B5ED0000, v5, OS_LOG_TYPE_ERROR, v6, v8, 0xCu);
  }
  return 4294956421;
}

uint64_t AUClipDetector::GetPropertyInfo(AUClipDetector *this, int a2, int a3, unsigned int a4, unsigned int *a5, BOOL *a6)
{
  uint64_t result;
  char v7;

  if (a3)
    return 4294956417;
  if (a2 == 21)
  {
    v7 = 1;
  }
  else
  {
    if (a2 != 3700)
      return 4294956417;
    v7 = *((_BYTE *)this + 17) ^ 1;
  }
  result = 0;
  *a6 = v7;
  *a5 = 4;
  return result;
}

uint64_t AUClipDetector::GetProperty(AUClipDetector *this, int a2, int a3, unsigned int a4, _DWORD *a5)
{
  uint64_t result;
  unsigned __int8 *v6;

  if (a3)
    return 4294956417;
  if (a2 == 3700)
  {
    v6 = (unsigned __int8 *)this + 376;
  }
  else
  {
    if (a2 != 21)
      return 4294956417;
    v6 = (unsigned __int8 *)this + 576;
  }
  result = 0;
  *a5 = *v6;
  return result;
}

uint64_t AUClipDetector::SetProperty(AUClipDetector *this, int a2, int a3, unsigned int a4, _DWORD *a5)
{
  uint64_t result;

  if (a3)
    return 4294956417;
  if (a2 == 3700)
  {
    result = 0;
    *((_BYTE *)this + 376) = *a5 != 0;
  }
  else
  {
    if (a2 != 21)
      return 4294956417;
    result = 0;
    *((_BYTE *)this + 576) = *a5 != 0;
  }
  return result;
}

uint64_t AUClipDetector::CanScheduleParameters(AUClipDetector *this)
{
  return 0;
}

uint64_t AUClipDetector::ProcessMultipleBufferLists(AUClipDetector *this, unsigned int *a2, unsigned int a3, int a4, const AudioBufferList **a5, int a6, AudioBufferList **a7)
{
  int *v11;
  int v12;
  unsigned int *v13;
  int v14;
  int v15;
  unint64_t v16;
  void **v17;
  unint64_t v18;
  uint64_t v19;
  const float *v20;
  void *v21;
  uint64_t v22;
  ausdk::AUElement *v23;
  uint64_t v24;
  float Parameter;
  float v26;
  float v27;
  NSObject *v29;
  uint64_t v30;
  const char *v31;
  NSObject *v32;
  uint64_t v33;
  int v34;
  int v35;
  int v36;
  float v37;
  AUClipDetector *v38;
  _WORD v39[3];
  __int16 v40;
  int v41;
  int v42;
  uint64_t v43;

  v43 = *MEMORY[0x1E0C80C00];
  if (*((_DWORD *)this + 84) >= a3)
  {
    if (a4 == 1)
    {
      if (a6 == 1)
      {
        v11 = (int *)*a5;
        (*(void (**)(float *__return_ptr, AUClipDetector *, uint64_t, _QWORD))(*(_QWORD *)this + 392))(&v37, this, 1, 0);
        if ((v39[0] & 0x20) != 0)
          v12 = v42;
        else
          v12 = 1;
        if (*v11 == v12)
        {
          v13 = (unsigned int *)*a7;
          (*(void (**)(float *__return_ptr, AUClipDetector *, uint64_t, _QWORD))(*(_QWORD *)this + 392))(&v37, this, 2, 0);
          v14 = *v13;
          if ((v39[0] & 0x20) != 0)
            v15 = v42;
          else
            v15 = 1;
          if (v14 == v15)
          {
            if (*((_BYTE *)this + 576))
            {
              if (v14)
              {
                v16 = 0;
                v17 = (void **)(v13 + 4);
                do
                {
                  bzero(*v17, *((unsigned int *)v17 - 1));
                  AUClipDetector::SetParameter(this, 1u, v16, 0.0);
                  AUClipDetector::SetParameter(this, 2u, v16++, -96.0);
                  v17 += 2;
                }
                while (v16 < *v13);
              }
            }
            else if (v14)
            {
              v18 = 0;
              v19 = 4;
              do
              {
                v20 = *(const float **)&v11[v19];
                v21 = *(void **)&v13[v19];
                v22 = *((_QWORD *)this + 71);
                if (v22)
                {
                  v23 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)v22 + 32))(v22, v18);
                }
                else
                {
                  v24 = *((_QWORD *)this + 68);
                  if (v18 >= (*((_QWORD *)this + 69) - v24) >> 3)
                    v23 = 0;
                  else
                    v23 = *(ausdk::AUElement **)(v24 + 8 * v18);
                }
                Parameter = ausdk::AUElement::GetParameter(v23, 0);
                v37 = 0.0;
                vDSP_maxmgv(v20, 1, &v37, a3);
                if (v37 <= Parameter)
                  bzero(v21, 4 * a3);
                else
                  memcpy(v21, v20, 4 * a3);
                if (v37 <= Parameter)
                  v26 = 0.0;
                else
                  v26 = 1.0;
                AUClipDetector::SetParameter(this, 1u, v18, v26);
                v27 = log10f(v37 / Parameter);
                AUClipDetector::SetParameter(this, 2u, v18++, v27 * 20.0);
                v19 += 4;
              }
              while (v18 < *v13);
            }
            return 0;
          }
          if (getAUClipDetectorLog(void)::onceToken != -1)
            dispatch_once(&getAUClipDetectorLog(void)::onceToken, &__block_literal_global_8933);
          v33 = getAUClipDetectorLog(void)::gLog;
          if (!os_log_type_enabled((os_log_t)getAUClipDetectorLog(void)::gLog, OS_LOG_TYPE_ERROR))
            return 4294956428;
          v35 = *v13;
          v37 = 3.8522e-34;
          v38 = this;
          v39[0] = 1024;
          *(_DWORD *)&v39[1] = v35;
          v40 = 1024;
          v41 = v15;
          v31 = "[%p] cannot process %u output channel streams (expected channel stream count is %u)";
        }
        else
        {
          if (getAUClipDetectorLog(void)::onceToken != -1)
            dispatch_once(&getAUClipDetectorLog(void)::onceToken, &__block_literal_global_8933);
          v33 = getAUClipDetectorLog(void)::gLog;
          if (!os_log_type_enabled((os_log_t)getAUClipDetectorLog(void)::gLog, OS_LOG_TYPE_ERROR))
            return 4294956428;
          v34 = *v11;
          v37 = 3.8522e-34;
          v38 = this;
          v39[0] = 1024;
          *(_DWORD *)&v39[1] = v34;
          v40 = 1024;
          v41 = v12;
          v31 = "[%p] cannot process %u input channel streams (expected channel stream count is %u)";
        }
      }
      else
      {
        if (getAUClipDetectorLog(void)::onceToken != -1)
          dispatch_once(&getAUClipDetectorLog(void)::onceToken, &__block_literal_global_8933);
        v33 = getAUClipDetectorLog(void)::gLog;
        if (!os_log_type_enabled((os_log_t)getAUClipDetectorLog(void)::gLog, OS_LOG_TYPE_ERROR))
          return 4294956428;
        v37 = 3.8522e-34;
        v38 = this;
        v39[0] = 1024;
        *(_DWORD *)&v39[1] = a6;
        v40 = 1024;
        v41 = 1;
        v31 = "[%p] cannot process %u output busses (expected output bus count is %u)";
      }
      v32 = v33;
    }
    else
    {
      if (getAUClipDetectorLog(void)::onceToken != -1)
        dispatch_once(&getAUClipDetectorLog(void)::onceToken, &__block_literal_global_8933);
      v30 = getAUClipDetectorLog(void)::gLog;
      if (!os_log_type_enabled((os_log_t)getAUClipDetectorLog(void)::gLog, OS_LOG_TYPE_ERROR))
        return 4294956428;
      v37 = 3.8522e-34;
      v38 = this;
      v39[0] = 1024;
      *(_DWORD *)&v39[1] = a3;
      v40 = 1024;
      v41 = 1;
      v31 = "[%p] cannot process %u input busses (expected input bus count is %u)";
      v32 = v30;
    }
    _os_log_error_impl(&dword_1B5ED0000, v32, OS_LOG_TYPE_ERROR, v31, (uint8_t *)&v37, 0x18u);
    return 4294956428;
  }
  if (getAUClipDetectorLog(void)::onceToken != -1)
    dispatch_once(&getAUClipDetectorLog(void)::onceToken, &__block_literal_global_8933);
  v29 = getAUClipDetectorLog(void)::gLog;
  if (os_log_type_enabled((os_log_t)getAUClipDetectorLog(void)::gLog, OS_LOG_TYPE_ERROR))
  {
    v36 = *((_DWORD *)this + 84);
    v37 = 3.8522e-34;
    v38 = this;
    v39[0] = 1024;
    *(_DWORD *)&v39[1] = a3;
    v40 = 1024;
    v41 = v36;
    _os_log_error_impl(&dword_1B5ED0000, v29, OS_LOG_TYPE_ERROR, "[%p] cannot process %u frames (maximum frame size is %u)", (uint8_t *)&v37, 0x18u);
  }
  return 4294956422;
}

void sub_1B634B754(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

uint64_t AUClipDetector::GetParameterList(AUClipDetector *this, int a2, unsigned int *a3, unsigned int *a4)
{
  uint64_t result;

  if (a2 == 4)
  {
    *a4 = 3;
    result = 0;
    if (a3)
    {
      *(_QWORD *)a3 = 0x100000000;
      a3[2] = 2;
    }
  }
  else
  {
    *a4 = 0;
    return 4294956430;
  }
  return result;
}

uint64_t AUClipDetector::GetParameterInfo(AUClipDetector *this, int a2, unsigned int a3, AudioUnitParameterInfo *buffer)
{
  const __CFString *v5;
  AudioUnitParameterUnit v6;
  AudioUnitParameterValue v7;
  AudioUnitParameterValue v8;
  AudioUnitParameterValue v9;
  int v10;
  uint64_t result;

  if (a2 != 4)
    return 4294956430;
  buffer->flags = 0;
  buffer->unitName = 0;
  if (a3 > 2)
    return 4294956418;
  v5 = off_1E69D3DB8[a3];
  v6 = dword_1B665CBF0[a3];
  v7 = flt_1B665CBFC[a3];
  v8 = flt_1B665CC08[a3];
  v9 = flt_1B665CC14[a3];
  v10 = dword_1B665CC20[a3];
  buffer->cfNameString = v5;
  buffer->flags = 0x8000000;
  CFStringGetCString(v5, buffer->name, 52, 0x8000100u);
  result = 0;
  buffer->unit = v6;
  buffer->minValue = v7;
  buffer->maxValue = v8;
  buffer->defaultValue = v9;
  buffer->flags |= v10;
  return result;
}

double AUClipDetector::GetLatency(AUClipDetector *this)
{
  return 0.0;
}

double AUClipDetector::GetTailTime(AUClipDetector *this)
{
  return 0.0;
}

uint64_t AUClipDetector::SupportsTail(AUClipDetector *this)
{
  return 1;
}

BOOL AUClipDetector::StreamFormatWritable(AUClipDetector *this, unsigned int a2, int a3)
{
  return (a3 | *((unsigned __int8 *)this + 17)) == 0;
}

uint64_t AUClipDetector::SupportedNumChannels(AUClipDetector *this, const AUChannelInfo **a2)
{
  if (a2)
    *a2 = (const AUChannelInfo *)&AUClipDetector::SupportedNumChannels(AUChannelInfo const**)::sSupportedChannelConfigs;
  return 1;
}

uint64_t AUClipDetector::ValidFormat(AUClipDetector *this, unsigned int a2, unsigned int a3, const AudioStreamBasicDescription *a4)
{
  AudioFormatFlags mFormatFlags;
  UInt32 mBytesPerPacket;
  UInt32 mChannelsPerFrame;
  UInt32 mBytesPerFrame;
  UInt32 mBitsPerChannel;
  int v9;
  BOOL v10;
  int v14;
  _BOOL4 v15;
  _BOOL4 v17;
  BOOL v18;
  _BOOL4 v19;
  int v20;
  unsigned int v21;

  mFormatFlags = a4->mFormatFlags;
  mBytesPerPacket = a4->mBytesPerPacket;
  mBytesPerFrame = a4->mBytesPerFrame;
  mChannelsPerFrame = a4->mChannelsPerFrame;
  mBitsPerChannel = a4->mBitsPerChannel;
  v9 = mFormatFlags & 0x20;
  v10 = a4->mFormatID == 1819304813 && a4->mFramesPerPacket == 1;
  if (!v10 || mBytesPerFrame != mBytesPerPacket || mBitsPerChannel >> 3 > mBytesPerFrame || mChannelsPerFrame == 0)
    goto LABEL_32;
  if ((mFormatFlags & 0x20) == 0)
  {
    v10 = mBytesPerPacket == mBytesPerPacket / mChannelsPerFrame * mChannelsPerFrame;
    mBytesPerPacket /= mChannelsPerFrame;
    if (!v10)
    {
      v9 = 0;
LABEL_32:
      v19 = 0;
      v20 = 0;
      goto LABEL_33;
    }
  }
  v14 = 8 * mBytesPerPacket;
  v15 = mBytesPerPacket == 4 && (mFormatFlags & 0x1F84) == 0;
  if (v14 != mBitsPerChannel || (mFormatFlags & 1) == 0)
  {
    v15 = 0;
    v17 = 1;
  }
  else
  {
    v17 = (mFormatFlags & 0x1F84) == 0;
  }
  v18 = (mFormatFlags & 2) == 0;
  v19 = (mFormatFlags & 2) == 0 && v15;
  v20 = !v18 || v17;
LABEL_33:
  v21 = v19 & v20;
  if (v9)
    return v21;
  else
    return 0;
}

uint64_t AUClipDetector::GetScopeExtended(AUClipDetector *this, int a2)
{
  if (a2 == 4)
    return (uint64_t)this + 528;
  else
    return 0;
}

void AUClipDetector::SetParameter(_QWORD *a1, unsigned int a2, uint64_t a3, float a4)
{
  uint64_t v7;
  ausdk::AUElement *v8;
  uint64_t v9;
  uint64_t v10;

  v7 = a1[71];
  if (v7)
  {
    v8 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v7 + 32))(v7, a3);
  }
  else
  {
    v9 = a1[69];
    v10 = a1[68];
    if (a3 >= (unint64_t)((v9 - v10) >> 3))
      v8 = 0;
    else
      v8 = *(ausdk::AUElement **)(v10 + 8 * a3);
  }
  ausdk::AUElement::SetParameter(v8, a2, a4, 0);
}

os_log_t ___Z20getAUClipDetectorLogv_block_invoke()
{
  os_log_t result;

  result = os_log_create("com.apple.coreaudio", "AUClipDetector");
  getAUClipDetectorLog(void)::gLog = (uint64_t)result;
  return result;
}

uint64_t AUClipDetector::SetDefaultParameters(AUClipDetector *this)
{
  uint64_t i;
  uint64_t v3;
  uint64_t result;

  for (i = 0; ; i = (i + 1))
  {
    v3 = *((_QWORD *)this + 71);
    result = v3
           ? (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 24))(v3)
           : (*((_QWORD *)this + 69) - *((_QWORD *)this + 68)) >> 3;
    if (i >= result)
      break;
    AUClipDetector::SetParameter(this, 0, i, 1.0);
    AUClipDetector::SetParameter(this, 1u, i, 0.0);
    AUClipDetector::SetParameter(this, 2u, i, -96.0);
  }
  return result;
}

uint64_t AUClipDetector::AUClipDetector(OpaqueAudioComponentInstance *)::$_0::__invoke<OpaqueAudioComponentInstance *,unsigned int,unsigned int,unsigned int>(uint64_t result, uint64_t a2, int a3)
{
  int64x2_t *v3;
  ausdk::AUScope *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t i;
  std::string *v8;
  __int128 v9;
  void **v10;
  CFIndex v11;
  CFStringRef v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  std::runtime_error *exception;
  std::string v19;
  void *__p[2];
  int64_t v21;

  if (a3 == 8)
  {
    v3 = (int64x2_t *)result;
    v4 = (ausdk::AUScope *)(result + 80);
    v5 = *(unsigned int *)(ausdk::AUScope::SafeGetElement((ausdk::AUScope *)(result + 80), 0) + 108);
    result = ausdk::AUScope::SafeGetElement(v4, 0);
    if ((_DWORD)v5 == *(_DWORD *)(result + 108))
    {
      v6 = v3[35].i64[1];
      result = v6
             ? (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 24))(v6)
             : (unint64_t)(v3[34].i64[1] - v3[34].i64[0]) >> 3;
      if ((_DWORD)v5 != (_DWORD)result)
      {
        ausdk::AUScope::SetNumberOfElements(v3 + 33, v5);
        if ((_DWORD)v5)
        {
          for (i = 0; i != v5; ++i)
          {
            std::to_string(&v19, i);
            v8 = std::string::insert(&v19, 0, "Ch ", 3uLL);
            v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
            v21 = v8->__r_.__value_.__r.__words[2];
            *(_OWORD *)__p = v9;
            v8->__r_.__value_.__l.__size_ = 0;
            v8->__r_.__value_.__r.__words[2] = 0;
            v8->__r_.__value_.__r.__words[0] = 0;
            if (v21 >= 0)
              v10 = __p;
            else
              v10 = (void **)__p[0];
            if (v21 >= 0)
              v11 = HIBYTE(v21);
            else
              v11 = (CFIndex)__p[1];
            v12 = CFStringCreateWithBytes(0, (const UInt8 *)v10, v11, 0x8000100u, 0);
            if (!v12)
            {
              exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
              std::runtime_error::runtime_error(exception, "Could not construct");
            }
            if (SHIBYTE(v21) < 0)
              operator delete(__p[0]);
            if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v19.__r_.__value_.__l.__data_);
            v13 = v3[35].i64[1];
            if (v13)
            {
              v14 = (*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)v13 + 32))(v13, i);
            }
            else
            {
              v15 = v3[34].i64[0];
              if (i >= (v3[34].i64[1] - v15) >> 3)
                v14 = 0;
              else
                v14 = *(_QWORD *)(v15 + 8 * i);
            }
            ausdk::Owned<__CFString const*>::operator=((const void **)(v14 + 72), v12);
            v16 = v3[35].i64[1];
            if (v16)
              v17 = (*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)v16 + 32))(v16, i);
            else
              v17 = *(_QWORD *)(v3[34].i64[0] + 8 * i);
            (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v17 + 40))(v17, 3);
            CFRelease(v12);
          }
        }
        return AUClipDetector::SetDefaultParameters((AUClipDetector *)v3);
      }
    }
  }
  return result;
}

void sub_1B634BDC8(void *a1)
{
  __clang_call_terminate(a1);
}

void AUSM::TuningManager::PopulateReservedGlobalAPACPropertyList(AUSM::TuningManager *this)
{
  char *v1;

  v1 = (char *)this + 40;
  std::__hash_table<std::__hash_value_type<unsigned int,std::tuple<__CFString const*,float,float,float,AudioUnitParameterUnit,unsigned int>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::tuple<__CFString const*,float,float,float,AudioUnitParameterUnit,unsigned int>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::tuple<__CFString const*,float,float,float,AudioUnitParameterUnit,unsigned int>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::tuple<__CFString const*,float,float,float,AudioUnitParameterUnit,unsigned int>>>>::__rehash<true>((uint64_t)this + 40, vcvtps_u32_f32(6.0 / *((float *)this + 18)));
  std::__hash_table<std::__hash_value_type<unsigned int,BOOL>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,BOOL>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,BOOL>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,BOOL>>>::__emplace_unique_key_args<unsigned int,std::pair<unsigned int const,BOOL>>((uint64_t)v1, 0xAu, 10);
  std::__hash_table<std::__hash_value_type<unsigned int,BOOL>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,BOOL>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,BOOL>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,BOOL>>>::__emplace_unique_key_args<unsigned int,std::pair<unsigned int const,BOOL>>((uint64_t)v1, 0x1Au, 26);
  std::__hash_table<std::__hash_value_type<unsigned int,BOOL>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,BOOL>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,BOOL>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,BOOL>>>::__emplace_unique_key_args<unsigned int,std::pair<unsigned int const,BOOL>>((uint64_t)v1, 0x3EDu, 1005);
  std::__hash_table<std::__hash_value_type<unsigned int,BOOL>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,BOOL>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,BOOL>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,BOOL>>>::__emplace_unique_key_args<unsigned int,std::pair<unsigned int const,BOOL>>((uint64_t)v1, 0xCC3u, 3267);
  std::__hash_table<std::__hash_value_type<unsigned int,BOOL>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,BOOL>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,BOOL>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,BOOL>>>::__emplace_unique_key_args<unsigned int,std::pair<unsigned int const,BOOL>>((uint64_t)v1, 0xC1Cu, 3100);
  std::__hash_table<std::__hash_value_type<unsigned int,BOOL>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,BOOL>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,BOOL>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,BOOL>>>::__emplace_unique_key_args<unsigned int,std::pair<unsigned int const,BOOL>>((uint64_t)v1, 0xC24u, 3108);
}

void AUSM::TuningManager::ResizeBuffers(AUSM::TuningManager *this, unsigned int a2)
{
  unint64_t v2;
  uint64_t *v5;
  uint64_t v6;
  _QWORD *v7;
  unint64_t v8;
  uint64_t v9;
  uint8x8_t v10;
  uint64_t **v11;
  uint64_t *i;
  unint64_t v13;
  _QWORD *v14;
  float v15;
  float v16;
  _BOOL8 v17;
  unint64_t v18;
  unint64_t v19;
  size_t v20;
  uint64_t v21;
  _QWORD *v22;
  unint64_t v23;
  char *v24;
  uint64_t v25;
  unint64_t v26;
  int8x8_t v27;
  uint8x8_t v28;
  unint64_t v29;
  uint64_t v30;
  char **v31;
  char *v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  char *v36;
  char *v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t v40;
  unint64_t v41;

  v5 = (uint64_t *)((char *)this + 120);
  v6 = *((_QWORD *)this + 18);
  if (v6 < a2)
  {
    v7 = (_QWORD *)((char *)this + 136);
    v8 = *((_QWORD *)this + 16);
    v9 = *((_QWORD *)this + 18);
    while (1)
    {
      if (v8)
      {
        v10 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
        v10.i16[0] = vaddlv_u8(v10);
        if (v10.u32[0] > 1uLL)
        {
          v2 = v6;
          if (v8 <= v6)
            v2 = v6 % v8;
        }
        else
        {
          v2 = ((_DWORD)v8 - 1) & v6;
        }
        v11 = *(uint64_t ***)(*v5 + 8 * v2);
        if (v11)
        {
          for (i = *v11; i; i = (uint64_t *)*i)
          {
            v13 = i[1];
            if (v13 == v6)
            {
              if (*((_DWORD *)i + 4) == (_DWORD)v6)
                goto LABEL_41;
            }
            else
            {
              if (v10.u32[0] > 1uLL)
              {
                if (v13 >= v8)
                  v13 %= v8;
              }
              else
              {
                v13 &= v8 - 1;
              }
              if (v13 != v2)
                break;
            }
          }
        }
      }
      v14 = operator new(0x18uLL);
      *v14 = 0;
      v14[1] = v6;
      *((_DWORD *)v14 + 4) = v6;
      *((_DWORD *)v14 + 5) = 1112014848;
      v15 = (float)(unint64_t)(v9 + 1);
      v16 = *((float *)this + 38);
      if (!v8 || (float)(v16 * (float)v8) < v15)
      {
        v17 = (v8 & (v8 - 1)) != 0;
        if (v8 < 3)
          v17 = 1;
        v18 = v17 | (2 * v8);
        v19 = vcvtps_u32_f32(v15 / v16);
        if (v18 <= v19)
          v20 = v19;
        else
          v20 = v18;
        std::__hash_table<std::__hash_value_type<unsigned int,std::tuple<__CFString const*,float,float,float,AudioUnitParameterUnit,unsigned int>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::tuple<__CFString const*,float,float,float,AudioUnitParameterUnit,unsigned int>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::tuple<__CFString const*,float,float,float,AudioUnitParameterUnit,unsigned int>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::tuple<__CFString const*,float,float,float,AudioUnitParameterUnit,unsigned int>>>>::__rehash<true>((uint64_t)v5, v20);
        v8 = *((_QWORD *)this + 16);
        if ((v8 & (v8 - 1)) != 0)
        {
          if (v8 <= v6)
            v2 = v6 % v8;
          else
            v2 = v6;
        }
        else
        {
          v2 = ((_DWORD)v8 - 1) & v6;
        }
      }
      v21 = *v5;
      v22 = *(_QWORD **)(*v5 + 8 * v2);
      if (v22)
      {
        *v14 = *v22;
      }
      else
      {
        *v14 = *v7;
        *v7 = v14;
        *(_QWORD *)(v21 + 8 * v2) = v7;
        if (!*v14)
          goto LABEL_40;
        v23 = *(_QWORD *)(*v14 + 8);
        if ((v8 & (v8 - 1)) != 0)
        {
          if (v23 >= v8)
            v23 %= v8;
        }
        else
        {
          v23 &= v8 - 1;
        }
        v22 = (_QWORD *)(*v5 + 8 * v23);
      }
      *v22 = v14;
LABEL_40:
      v9 = *((_QWORD *)this + 18) + 1;
      *((_QWORD *)this + 18) = v9;
LABEL_41:
      LODWORD(v6) = v6 + 1;
      if ((_DWORD)v6 == a2)
        return;
    }
  }
  if (v6 > a2)
  {
    v24 = (char *)this + 136;
    v25 = *((_QWORD *)this + 18);
    v26 = a2;
    do
    {
      v27 = *(int8x8_t *)((char *)this + 128);
      if (v27)
      {
        v28 = (uint8x8_t)vcnt_s8(v27);
        v28.i16[0] = vaddlv_u8(v28);
        if (v28.u32[0] > 1uLL)
        {
          v29 = v26;
          if (*(_QWORD *)&v27 <= v26)
            v29 = v26 % *(_QWORD *)&v27;
        }
        else
        {
          v29 = (*(_QWORD *)&v27 + 0xFFFFFFFFLL) & v26;
        }
        v30 = *v5;
        v31 = *(char ***)(*v5 + 8 * v29);
        if (v31)
        {
          v32 = *v31;
          if (*v31)
          {
            v33 = *(_QWORD *)&v27 - 1;
            do
            {
              v34 = *((_QWORD *)v32 + 1);
              if (v34 == v26)
              {
                if (v26 == *((_DWORD *)v32 + 4))
                {
                  if (v28.u32[0] > 1uLL)
                  {
                    v35 = v26;
                    if (v26 >= *(_QWORD *)&v27)
                      v35 = v26 % *(_QWORD *)&v27;
                  }
                  else
                  {
                    v35 = v33 & v26;
                  }
                  v36 = *(char **)(v30 + 8 * v35);
                  do
                  {
                    v37 = v36;
                    v36 = *(char **)v36;
                  }
                  while (v36 != v32);
                  if (v37 == v24)
                    goto LABEL_80;
                  v38 = *((_QWORD *)v37 + 1);
                  if (v28.u32[0] > 1uLL)
                  {
                    if (v38 >= *(_QWORD *)&v27)
                      v38 %= *(_QWORD *)&v27;
                  }
                  else
                  {
                    v38 &= v33;
                  }
                  if (v38 != v35)
                  {
LABEL_80:
                    if (!*(_QWORD *)v32)
                      goto LABEL_81;
                    v39 = *(_QWORD *)(*(_QWORD *)v32 + 8);
                    if (v28.u32[0] > 1uLL)
                    {
                      if (v39 >= *(_QWORD *)&v27)
                        v39 %= *(_QWORD *)&v27;
                    }
                    else
                    {
                      v39 &= v33;
                    }
                    if (v39 != v35)
LABEL_81:
                      *(_QWORD *)(v30 + 8 * v35) = 0;
                  }
                  v40 = *(_QWORD *)v32;
                  if (*(_QWORD *)v32)
                  {
                    v41 = *(_QWORD *)(v40 + 8);
                    if (v28.u32[0] > 1uLL)
                    {
                      if (v41 >= *(_QWORD *)&v27)
                        v41 %= *(_QWORD *)&v27;
                    }
                    else
                    {
                      v41 &= v33;
                    }
                    if (v41 != v35)
                    {
                      *(_QWORD *)(*v5 + 8 * v41) = v37;
                      v40 = *(_QWORD *)v32;
                    }
                  }
                  *(_QWORD *)v37 = v40;
                  --*((_QWORD *)this + 18);
                  operator delete(v32);
                  break;
                }
              }
              else
              {
                if (v28.u32[0] > 1uLL)
                {
                  if (v34 >= *(_QWORD *)&v27)
                    v34 %= *(_QWORD *)&v27;
                }
                else
                {
                  v34 &= v33;
                }
                if (v34 != v29)
                  break;
              }
              v32 = *(char **)v32;
            }
            while (v32);
          }
        }
      }
      ++v26;
    }
    while (v26 != v25);
  }
}

void sub_1B634C264(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__hash_table<std::__hash_value_type<unsigned int,BOOL>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,BOOL>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,BOOL>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,BOOL>>>::__emplace_unique_key_args<unsigned int,std::pair<unsigned int const,BOOL>>(uint64_t a1, unsigned int a2, uint64_t a3)
{
  unint64_t v3;
  unint64_t v6;
  unint64_t v7;
  uint8x8_t v8;
  uint64_t **v9;
  uint64_t *i;
  unint64_t v11;
  _QWORD *v12;
  float v13;
  float v14;
  _BOOL8 v15;
  unint64_t v16;
  unint64_t v17;
  size_t v18;
  uint64_t v19;
  _QWORD *v20;
  unint64_t v21;

  v6 = a2;
  v7 = *(_QWORD *)(a1 + 8);
  if (v7)
  {
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v3 = a2;
      if (v7 <= a2)
        v3 = a2 % v7;
    }
    else
    {
      v3 = ((_DWORD)v7 - 1) & a2;
    }
    v9 = *(uint64_t ***)(*(_QWORD *)a1 + 8 * v3);
    if (v9)
    {
      for (i = *v9; i; i = (uint64_t *)*i)
      {
        v11 = i[1];
        if (v11 == a2)
        {
          if (*((_DWORD *)i + 4) == a2)
            return;
        }
        else
        {
          if (v8.u32[0] > 1uLL)
          {
            if (v11 >= v7)
              v11 %= v7;
          }
          else
          {
            v11 &= v7 - 1;
          }
          if (v11 != v3)
            break;
        }
      }
    }
  }
  v12 = operator new(0x18uLL);
  *v12 = 0;
  v12[1] = v6;
  v12[2] = a3;
  v13 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v14 = *(float *)(a1 + 32);
  if (!v7 || (float)(v14 * (float)v7) < v13)
  {
    v15 = 1;
    if (v7 >= 3)
      v15 = (v7 & (v7 - 1)) != 0;
    v16 = v15 | (2 * v7);
    v17 = vcvtps_u32_f32(v13 / v14);
    if (v16 <= v17)
      v18 = v17;
    else
      v18 = v16;
    std::__hash_table<std::__hash_value_type<unsigned int,std::tuple<__CFString const*,float,float,float,AudioUnitParameterUnit,unsigned int>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::tuple<__CFString const*,float,float,float,AudioUnitParameterUnit,unsigned int>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::tuple<__CFString const*,float,float,float,AudioUnitParameterUnit,unsigned int>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::tuple<__CFString const*,float,float,float,AudioUnitParameterUnit,unsigned int>>>>::__rehash<true>(a1, v18);
    v7 = *(_QWORD *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v7 <= v6)
        v3 = v6 % v7;
      else
        v3 = v6;
    }
    else
    {
      v3 = ((_DWORD)v7 - 1) & v6;
    }
  }
  v19 = *(_QWORD *)a1;
  v20 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v20)
  {
    *v12 = *v20;
LABEL_38:
    *v20 = v12;
    goto LABEL_39;
  }
  *v12 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v12;
  *(_QWORD *)(v19 + 8 * v3) = a1 + 16;
  if (*v12)
  {
    v21 = *(_QWORD *)(*v12 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v21 >= v7)
        v21 %= v7;
    }
    else
    {
      v21 &= v7 - 1;
    }
    v20 = (_QWORD *)(*(_QWORD *)a1 + 8 * v21);
    goto LABEL_38;
  }
LABEL_39:
  ++*(_QWORD *)(a1 + 24);
}

void sub_1B634C46C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void AUSM::TuningManager::SetPostProceReverbBlend(AUSM::TuningManager *this, int a2, uint64_t a3)
{
  uint64_t v3;
  unsigned __int8 v5;
  uint64_t v6;
  float v7;
  unsigned __int8 v8;
  unsigned __int8 v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  int v16;
  NSObject *v17;
  char *v18;
  NSObject *v19;
  const char *v20;
  char *v21;
  NSObject *v22;
  float v23;
  int v24;
  uint8_t buf[4];
  char *v26;
  __int16 v27;
  const char *v28;
  __int16 v29;
  int v30;
  uint64_t v31;

  v3 = a3;
  v31 = *MEMORY[0x1E0C80C00];
  if ((a2 - 2) < 2)
  {
LABEL_4:
    if (!*((_DWORD *)this + 40) && (v5 = atomic_load((unsigned __int8 *)(*(_QWORD *)this + 3670)), (v5 & 1) != 0))
    {
      v10 = 0;
      v7 = 0.0;
    }
    else
    {
      v6 = *(_QWORD *)(*(_QWORD *)this + 768);
      v7 = -1.0;
      if (v6)
      {
        v8 = atomic_load((unsigned __int8 *)(v6 + 97));
        if ((v8 & 1) != 0)
        {
          v10 = 1;
        }
        else
        {
          v9 = atomic_load((unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)this + 768) + 96));
          v10 = v9 & 1;
        }
      }
      else
      {
        v10 = 0;
      }
    }
    goto LABEL_14;
  }
  if (a2 == 1)
  {
    v10 = 0;
    v7 = 50.0;
  }
  else
  {
    if (!a2)
      goto LABEL_4;
    v10 = 0;
    v7 = -1.0;
  }
LABEL_14:
  if ((_DWORD)a3 == -1)
  {
    v12 = *(_QWORD *)this;
    v13 = *(_QWORD *)(*(_QWORD *)this + 120);
    if (v13)
    {
      LODWORD(v11) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v13 + 24))(v13);
      if (!(_DWORD)v11)
        return;
    }
    else
    {
      v11 = (*(_QWORD *)(v12 + 104) - *(_QWORD *)(v12 + 96)) >> 3;
      if (!(_DWORD)v11)
        return;
    }
    v3 = 0;
  }
  else
  {
    LODWORD(v11) = a3 + 1;
  }
  v14 = *((_QWORD *)this + 18);
  v15 = (char *)this + 8;
  while (1)
  {
    v24 = v3;
    if (v14 <= v3)
      break;
    if (v7 < 0.0)
      v16 = 1;
    else
      v16 = v10;
    if (v16 == 1)
      v7 = *((float *)std::__hash_table<std::__hash_value_type<unsigned int,float>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,float>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,float>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,float>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>((uint64_t)this + 120, v3, &v24)+ 5);
    v23 = 0.0;
    if ((*(unsigned int (**)(_QWORD, uint64_t, uint64_t, uint64_t, float *))(**(_QWORD **)this + 144))(*(_QWORD *)this, 35, 1, v3, &v23))
    {
      if (getAUSMV2Log(void)::onceToken != -1)
        dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_5474);
      v17 = (id)getAUSMV2Log(void)::gLog;
      if (!os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
        goto LABEL_32;
      v21 = (char *)this + 8;
      if (*((char *)this + 31) < 0)
        v21 = *(char **)v15;
      *(_DWORD *)buf = 136315650;
      v26 = v21;
      v27 = 2080;
      v28 = "SetPostProceReverbBlend";
      v29 = 1024;
      v30 = v3;
      v19 = v17;
      v20 = "[%s|%s] Could not get current post-processing reverb blend for input bus %u";
      goto LABEL_46;
    }
    if (vabds_f32(v23, v7) <= 0.00000011921
      || !(*(unsigned int (**)(_QWORD, uint64_t, uint64_t, uint64_t, _QWORD, float))(**(_QWORD **)this + 152))(*(_QWORD *)this, 35, 2001, v3, 0, v7))
    {
      goto LABEL_41;
    }
    if (getAUSMV2Log(void)::onceToken != -1)
      dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_5474);
    v17 = (id)getAUSMV2Log(void)::gLog;
    if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
    {
      v18 = (char *)this + 8;
      if (*((char *)this + 31) < 0)
        v18 = *(char **)v15;
      *(_DWORD *)buf = 136315650;
      v26 = v18;
      v27 = 2080;
      v28 = "SetPostProceReverbBlend";
      v29 = 1024;
      v30 = v3;
      v19 = v17;
      v20 = "[%s|%s] Could not set reverb blend for input bus %u";
LABEL_46:
      _os_log_error_impl(&dword_1B5ED0000, v19, OS_LOG_TYPE_ERROR, v20, buf, 0x1Cu);
    }
LABEL_32:

LABEL_41:
    v3 = (v3 + 1);
    if ((_DWORD)v11 == (_DWORD)v3)
      return;
  }
  if (getAUSMV2Log(void)::onceToken != -1)
    dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_5474);
  v22 = (id)getAUSMV2Log(void)::gLog;
  if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
  {
    if (*((char *)this + 31) < 0)
      v15 = *(char **)v15;
    *(_DWORD *)buf = 136315650;
    v26 = v15;
    v27 = 2080;
    v28 = "SetPostProceReverbBlend";
    v29 = 1024;
    v30 = v14;
    _os_log_error_impl(&dword_1B5ED0000, v22, OS_LOG_TYPE_ERROR, "[%s|%s] Buffer size = %u is not large enough.", buf, 0x1Cu);
  }

}

uint64_t AUSM::TuningManager::SetPropertyFromNSObject(AUSM::TuningManager *this, uint64_t a2, uint64_t a3, uint64_t a4, objc_object *a5)
{
  objc_object *v9;
  objc_object *v10;
  CFNumberType Type;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  int v17;
  CFNumberRef number;
  objc_object *v19;

  v9 = a5;
  v19 = v9;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0)
  {
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) != 0)
    {
      v12 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, uint64_t, objc_object **, uint64_t))(**(_QWORD **)this
                                                                                                  + 96))(*(_QWORD *)this, a4, a2, a3, &v19, 8);
      v9 = v19;
    }
    else
    {
      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) != 0)
      {
        v15 = *(_QWORD *)this;
        v9 = objc_retainAutorelease(v9);
        v12 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v15 + 96))(v15, a4, a2, a3, -[objc_object bytes](v9, "bytes"), -[objc_object length](v9, "length"));
      }
      else
      {
        v12 = 0xFFFFFFFFLL;
      }
    }
    goto LABEL_17;
  }
  v10 = v9;
  v9 = v10;
  if (v10)
    CFRetain(v10);
  applesauce::CF::NumberRef::NumberRef((applesauce::CF::NumberRef *)&number, v9);

  Type = CFNumberGetType(number);
  v12 = 0xFFFFFFFFLL;
  if ((unint64_t)Type <= kCFNumberFloatType)
  {
    if (((1 << Type) & 0x218) != 0)
    {
      v17 = -[objc_object intValue](v9, "intValue");
      v14 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, uint64_t, int *, uint64_t))(**(_QWORD **)this + 96))(*(_QWORD *)this, a4, a2, a3, &v17, 4);
    }
    else
    {
      if (((1 << Type) & 0x1060) == 0)
        goto LABEL_14;
      -[objc_object floatValue](v9, "floatValue");
      v17 = v13;
      v14 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, uint64_t, int *, uint64_t))(**(_QWORD **)this + 96))(*(_QWORD *)this, a4, a2, a3, &v17, 4);
    }
    v12 = v14;
  }
LABEL_14:
  if (number)
    CFRelease(number);
LABEL_17:

  return v12;
}

void sub_1B634CA88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  void *v3;
  va_list va;

  va_start(va, a3);
  applesauce::CF::NumberRef::~NumberRef((const void **)va);

  _Unwind_Resume(a1);
}

_QWORD *std::__hash_table<std::__hash_value_type<unsigned int,float>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,float>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,float>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,float>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>(uint64_t a1, unsigned int a2, _DWORD *a3)
{
  unint64_t v3;
  unint64_t v6;
  unint64_t v7;
  uint8x8_t v8;
  void **v9;
  _QWORD *v10;
  unint64_t v11;
  float v12;
  float v13;
  _BOOL8 v14;
  unint64_t v15;
  unint64_t v16;
  size_t v17;
  uint64_t v18;
  _QWORD *v19;
  unint64_t v20;

  v6 = a2;
  v7 = *(_QWORD *)(a1 + 8);
  if (v7)
  {
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v3 = a2;
      if (v7 <= a2)
        v3 = a2 % v7;
    }
    else
    {
      v3 = ((_DWORD)v7 - 1) & a2;
    }
    v9 = *(void ***)(*(_QWORD *)a1 + 8 * v3);
    if (v9)
    {
      v10 = *v9;
      if (*v9)
      {
        do
        {
          v11 = v10[1];
          if (v11 == a2)
          {
            if (*((_DWORD *)v10 + 4) == a2)
              return v10;
          }
          else
          {
            if (v8.u32[0] > 1uLL)
            {
              if (v11 >= v7)
                v11 %= v7;
            }
            else
            {
              v11 &= v7 - 1;
            }
            if (v11 != v3)
              break;
          }
          v10 = (_QWORD *)*v10;
        }
        while (v10);
      }
    }
  }
  v10 = operator new(0x18uLL);
  *v10 = 0;
  v10[1] = v6;
  *((_DWORD *)v10 + 4) = *a3;
  *((_DWORD *)v10 + 5) = 0;
  v12 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v13 = *(float *)(a1 + 32);
  if (!v7 || (float)(v13 * (float)v7) < v12)
  {
    v14 = 1;
    if (v7 >= 3)
      v14 = (v7 & (v7 - 1)) != 0;
    v15 = v14 | (2 * v7);
    v16 = vcvtps_u32_f32(v12 / v13);
    if (v15 <= v16)
      v17 = v16;
    else
      v17 = v15;
    std::__hash_table<std::__hash_value_type<unsigned int,std::tuple<__CFString const*,float,float,float,AudioUnitParameterUnit,unsigned int>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::tuple<__CFString const*,float,float,float,AudioUnitParameterUnit,unsigned int>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::tuple<__CFString const*,float,float,float,AudioUnitParameterUnit,unsigned int>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::tuple<__CFString const*,float,float,float,AudioUnitParameterUnit,unsigned int>>>>::__rehash<true>(a1, v17);
    v7 = *(_QWORD *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v7 <= v6)
        v3 = v6 % v7;
      else
        v3 = v6;
    }
    else
    {
      v3 = ((_DWORD)v7 - 1) & v6;
    }
  }
  v18 = *(_QWORD *)a1;
  v19 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v19)
  {
    *v10 = *v19;
LABEL_38:
    *v19 = v10;
    goto LABEL_39;
  }
  *v10 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v10;
  *(_QWORD *)(v18 + 8 * v3) = a1 + 16;
  if (*v10)
  {
    v20 = *(_QWORD *)(*v10 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v20 >= v7)
        v20 %= v7;
    }
    else
    {
      v20 &= v7 - 1;
    }
    v19 = (_QWORD *)(*(_QWORD *)a1 + 8 * v20);
    goto LABEL_38;
  }
LABEL_39:
  ++*(_QWORD *)(a1 + 24);
  return v10;
}

void sub_1B634CCBC(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void AUSM::TuningManager::ResetReservedGlobalAPACPropertyList(AUSM::TuningManager *this)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t i;

  if (*((_BYTE *)this + 32))
  {
    if (*((_QWORD *)this + 8))
    {
      v2 = (_QWORD *)*((_QWORD *)this + 7);
      if (v2)
      {
        do
        {
          v3 = (_QWORD *)*v2;
          operator delete(v2);
          v2 = v3;
        }
        while (v3);
      }
      *((_QWORD *)this + 7) = 0;
      v4 = *((_QWORD *)this + 6);
      if (v4)
      {
        for (i = 0; i != v4; ++i)
          *(_QWORD *)(*((_QWORD *)this + 5) + 8 * i) = 0;
      }
      *((_QWORD *)this + 8) = 0;
    }
    AUSM::TuningManager::PopulateReservedGlobalAPACPropertyList(this);
  }
}

void AUEndpointVAD::~AUEndpointVAD(AUEndpointVAD *this)
{
  AUEndpointVAD::~AUEndpointVAD(this);
  JUMPOUT(0x1BCC95CECLL);
}

{
  *(_QWORD *)this = &off_1E69D3DE0;
  AUEndpointVAD::Cleanup(this);
  std::unique_ptr<EndpointVADSegmentHeuristics>::reset[abi:ne180100]((_QWORD *)this + 67, 0);
  std::unique_ptr<EndpointVAD>::reset[abi:ne180100]((uint64_t *)this + 66, 0);
  ausdk::AUBase::~AUBase(this);
}

uint64_t AUEndpointVAD::Initialize(AUEndpointVAD *this)
{
  ausdk::AUScope *v2;
  double v3;
  uint64_t v5;
  uint64_t Element;
  __int128 v7;
  int v8;
  const __CFDictionary *v9;
  const __CFDictionary *v10;
  float v11;
  float v12;
  EndpointVAD *v13;
  double mSampleRate;
  float v15;
  float v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  OpaqueAudioComponent *Next;
  AudioUnit *v22;
  OpaqueAudioComponent *v23;
  ausdk::AUScope *v24;
  double v25;
  uint64_t v26;
  float v27;
  double v28;
  BiquadCoefficients *v29;
  uint64_t v30;
  char *v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  std::vector<unsigned int> *v35;
  EndpointVADObservationFeatures *v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  int v42;
  NSObject *v43;
  const __CFNumber *v44;
  const __CFNumber *v45;
  double v46;
  double v47;
  uint64_t v48;
  unint64_t v49;
  float v50;
  float v51;
  float v52;
  float v53;
  float v54;
  float v55;
  float v56;
  uint64_t v57;
  uint64_t v58;
  double v59;
  float *v60;
  unint64_t v61;
  float v62;
  float v63;
  float v64;
  float *v65;
  unint64_t v66;
  const __CFData *v67;
  unsigned int *v68;
  unsigned int v69;
  unsigned int v70;
  unsigned int *v71;
  char *v72;
  unsigned int *v73;
  char *v74;
  uint64_t v75;
  unint64_t v76;
  uint64_t v77;
  unint64_t v78;
  char *v79;
  unsigned int *v80;
  unsigned int v81;
  unsigned int v82;
  char *v83;
  unsigned int *v84;
  uint64_t v85;
  unint64_t v86;
  uint64_t v87;
  unint64_t v88;
  char *v89;
  unsigned int *v90;
  char *v91;
  unsigned int v92;
  char *v93;
  char *v94;
  unsigned int *v95;
  char *v96;
  uint64_t v97;
  unint64_t v98;
  uint64_t v99;
  unint64_t v100;
  char *v101;
  unsigned int *v102;
  unsigned int v103;
  unsigned int *v104;
  unsigned int *v105;
  uint64_t v106;
  unint64_t v107;
  uint64_t v108;
  unint64_t v109;
  char *v110;
  unsigned int *v111;
  unsigned int v112;
  char *v113;
  unsigned int *v114;
  uint64_t v115;
  unint64_t v116;
  uint64_t v117;
  unint64_t v118;
  char *v119;
  unsigned int *v120;
  char *v121;
  unsigned int v122;
  uint64_t v123;
  _QWORD *v124;
  uint64_t v125;
  float v126;
  unsigned int v127;
  uint64_t v128;
  char **v129;
  uint64_t v130;
  uint64_t v131;
  char *v132;
  char *v133;
  uint64_t v134;
  char *v135;
  char *v136;
  char *v137;
  char *v138;
  uint64_t v139;
  unint64_t v140;
  uint64_t v141;
  uint64_t v142;
  unsigned int v143;
  _OWORD *v144;
  char *v145;
  unint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  unint64_t v150;
  uint64_t v151;
  _OWORD *v152;
  char *v153;
  char *v154;
  _OWORD *v155;
  NSObject *v156;
  unsigned int v157;
  float v158;
  unsigned int *v159;
  uint64_t v160;
  uint64_t v161;
  char *v162;
  char *v163;
  void *v164;
  _DWORD *v165;
  unsigned int v166;
  unsigned int *v167;
  const __CFNumber *Value;
  const __CFNumber *v169;
  const __CFNumber *v170;
  const __CFData *v171;
  unsigned int *BytePtr;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  OSStatus v176;
  const __CFNumber *v177;
  AudioUnitParameterValue v178;
  ausdk::AUScope *v179;
  const __CFNumber *number;
  const __CFDictionary *theDict;
  EndpointVAD *v182;
  AudioStreamBasicDescription v183;
  unsigned int v184;
  _QWORD inData[2];
  __int128 v186;
  uint64_t v187;
  double v188;
  double valuePtr;
  unsigned int *v190;
  void *v191;
  char *v192;
  unint64_t v193;
  void *__p;
  char *v195;
  unint64_t v196;
  void **v197[3];
  void **v198[3];
  AudioUnitParameterValue inValue[2];
  uint64_t *v200;
  uint64_t v201;
  _BYTE v202[24];
  _BYTE inDesc[32];
  __int128 v204;
  __int128 v205;
  __int128 v206;
  __int128 v207;
  uint64_t v208;

  v208 = *MEMORY[0x1E0C80C00];
  v2 = (AUEndpointVAD *)((char *)this + 80);
  (*(void (**)(AUEndpointVAD *))(*(_QWORD *)this + 64))(this);
  v3 = *(double *)(ausdk::AUScope::SafeGetElement(v2, 0) + 80);
  if (v3 != *(double *)(ausdk::AUScope::SafeGetElement((AUEndpointVAD *)((char *)this + 128), 0) + 80))
    return 4294956421;
  if (!*((_QWORD *)this + 70))
  {
    if (EndpointVADLogScope(void)::once != -1)
      dispatch_once(&EndpointVADLogScope(void)::once, &__block_literal_global_17314);
    if (EndpointVADLogScope(void)::scope)
    {
      v43 = *(NSObject **)EndpointVADLogScope(void)::scope;
      if (!*(_QWORD *)EndpointVADLogScope(void)::scope)
        goto LABEL_4;
    }
    else
    {
      v43 = MEMORY[0x1E0C81028];
    }
    if (os_log_type_enabled(v43, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)inDesc = 136315394;
      *(_QWORD *)&inDesc[4] = "AUEndpointVAD.cpp";
      *(_WORD *)&inDesc[12] = 1024;
      *(_DWORD *)&inDesc[14] = 96;
      _os_log_impl(&dword_1B5ED0000, v43, OS_LOG_TYPE_DEFAULT, "%25s:%-5d AUEndpointVAD: The model dictionary property is unset (required).", inDesc, 0x12u);
    }
  }
LABEL_4:
  v5 = operator new();
  *(_BYTE *)v5 = 0;
  *(_QWORD *)(v5 + 8) = operator new();
  *(_DWORD *)(v5 + 16) = 10;
  *(_QWORD *)(v5 + 24) = 0;
  *(_DWORD *)(v5 + 36) = 1065353216;
  *(_QWORD *)(v5 + 40) = 0x6000000200;
  *(_QWORD *)(v5 + 48) = 0;
  *(_BYTE *)(v5 + 56) = 0;
  *(_BYTE *)(v5 + 120) = 0;
  *(_OWORD *)(v5 + 192) = 0u;
  *(_OWORD *)(v5 + 208) = 0u;
  *(_QWORD *)(v5 + 224) = 0;
  std::unique_ptr<EndpointVAD>::reset[abi:ne180100]((uint64_t *)this + 66, v5);
  v182 = (EndpointVAD *)*((_QWORD *)this + 66);
  Element = ausdk::AUScope::SafeGetElement(v2, 0);
  v7 = *(_OWORD *)(Element + 96);
  *(_OWORD *)&v183.mSampleRate = *(_OWORD *)(Element + 80);
  *(_OWORD *)&v183.mBytesPerPacket = v7;
  *(_QWORD *)&v183.mBitsPerChannel = *(_QWORD *)(Element + 112);
  v8 = *((_DWORD *)this + 84);
  v9 = (const __CFDictionary *)*((_QWORD *)this + 68);
  v10 = (const __CFDictionary *)*((_QWORD *)this + 69);
  theDict = (const __CFDictionary *)*((_QWORD *)this + 70);
  v11 = *((float *)this + 142);
  v12 = *((float *)this + 143);
  v13 = v182;
  if (*(_BYTE *)v182)
  {
    EndpointVAD::Uninitialize(v182);
    v13 = v182;
  }
  inData[1] = *(_QWORD *)&v183.mFormatID;
  v186 = *(_OWORD *)&v183.mBytesPerPacket;
  v187 = *(_QWORD *)&v183.mBitsPerChannel;
  inData[0] = 0x40BF400000000000;
  mSampleRate = v183.mSampleRate;
  v15 = 8000.0 / v183.mSampleRate;
  *((float *)v13 + 9) = v15;
  *((_DWORD *)v13 + 11) = 96;
  v16 = mSampleRate;
  AT::Resampler::create((AT::Resampler *)0x6E6F726D, v16, 8000.0, 0.0);
  v17 = *(_QWORD *)inDesc;
  *(_QWORD *)inDesc = 0;
  v18 = *((_QWORD *)v182 + 6);
  *((_QWORD *)v182 + 6) = v17;
  if (v18)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
    v19 = *(_QWORD *)inDesc;
    *(_QWORD *)inDesc = 0;
    if (v19)
      (*(void (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
  }
  v184 = 1;
  std::__optional_destruct_base<BlockProcessor,false>::reset[abi:ne180100]((_BYTE *)v182 + 56);
  BlockProcessor::BlockProcessor((EndpointVAD *)((char *)v182 + 56), 1, &v184, 1, &v184, 96, (int (*)(void *, unsigned int, const AudioBufferList **, AudioBufferList **))EndpointVAD::BlockProcessFunc, v182);
  *((_BYTE *)v182 + 120) = 1;
  v20 = operator new();
  *(_BYTE *)v20 = 0;
  *(_OWORD *)(v20 + 4) = 0u;
  *(_OWORD *)(v20 + 20) = 0u;
  *(_OWORD *)(v20 + 36) = 0u;
  *(_DWORD *)(v20 + 52) = 0;
  *((_QWORD *)v182 + 24) = v20;
  inDesc[13] = 0;
  *(_WORD *)&inDesc[14] = 0;
  *(_DWORD *)&inDesc[16] = 0;
  strcpy(inDesc, "xfuasncolppa");
  Next = AudioComponentFindNext(0, (const AudioComponentDescription *)inDesc);
  v22 = (AudioUnit *)(v20 + 56);
  if (AudioComponentInstanceNew(Next, (AudioComponentInstance *)(v20 + 56))
    || (*(_DWORD *)&v202[16] = 0,
        v202[9] = 0,
        *(_WORD *)&v202[10] = 0,
        *(_DWORD *)&v202[12] = 0,
        strcpy(v202, "xfua2cga"),
        v23 = AudioComponentFindNext(0, (const AudioComponentDescription *)v202),
        AudioComponentInstanceNew(v23, (AudioComponentInstance *)(v20 + 64))))
  {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x1E0DE4A60], (uint64_t)"\nFailed to Instantiate AU's\n\n", 29);
  }
  if (AudioUnitSetProperty(*v22, 8u, 1u, 0, inData, 0x28u))
    goto LABEL_26;
  if (AudioUnitSetProperty(*v22, 8u, 2u, 0, inData, 0x28u))
    goto LABEL_26;
  LODWORD(v191) = 1;
  if (AudioUnitSetProperty(*v22, 0xE74u, 0, 0, &v191, 4u)
    || AudioUnitSetProperty(*v22, 0xEu, 0, 0, &EndpointVADDSPChain::mSamplesPerBuffer, 4u)
    || AudioUnitSetParameter(*v22, 0, 0, 0, -18.0, 0)
    || AudioUnitSetParameter(*v22, 1u, 0, 0, 0.0, 0)
    || AudioUnitSetParameter(*v22, 2u, 0, 0, 40.0, 0)
    || AudioUnitSetParameter(*v22, 3u, 0, 0, 0.0, 0)
    || AudioUnitSetParameter(*v22, 4u, 0, 0, 4.0, 0)
    || AudioUnitSetParameter(*v22, 5u, 0, 0, 40.0, 0)
    || AudioUnitSetParameter(*v22, 6u, 0, 0, 70.0, 0)
    || AudioUnitSetParameter(*v22, 7u, 0, 0, 4.0, 0))
  {
    goto LABEL_26;
  }
  *(_DWORD *)v202 = 1;
  v24 = v2;
  if (AudioUnitSetProperty(*v22, 0x11ABu, 0, 0, v202, 4u))
    goto LABEL_25;
  inValue[0] = -18.0;
  LODWORD(v198[0]) = 0;
  LODWORD(v197[0]) = 1065353216;
  LODWORD(__p) = 0;
  if (!v9)
    goto LABEL_216;
  Value = (const __CFNumber *)CFDictionaryGetValue(v9, CFSTR("NoiseSuppress"));
  number = (const __CFNumber *)CFDictionaryGetValue(v9, CFSTR("V1Mode"));
  v169 = (const __CFNumber *)CFDictionaryGetValue(v9, CFSTR("ThresholdMultiplier"));
  v170 = (const __CFNumber *)CFDictionaryGetValue(v9, CFSTR("ThresholdPower"));
  if (!CFNumberGetValue(Value, kCFNumberFloat32Type, inValue)
    || !CFNumberGetValue(number, kCFNumberSInt32Type, v198)
    || !CFNumberGetValue(v169, kCFNumberFloat32Type, v197)
    || !CFNumberGetValue(v170, kCFNumberFloat32Type, &__p))
  {
    goto LABEL_25;
  }
  v171 = (const __CFData *)CFDictionaryGetValue(v9, CFSTR("ThresholdMultiplierLUT"));
  BytePtr = (unsigned int *)CFDataGetBytePtr(v171);
  if (*BytePtr)
  {
    v173 = bswap32(*BytePtr);
    v174 = operator new[]();
    v9 = (const __CFDictionary *)v174;
    v175 = 0;
    do
    {
      *(int8x8_t *)(v174 + 8 * v175) = vrev32_s8(*(int8x8_t *)&BytePtr[2 * v175 + 1]);
      ++v175;
    }
    while (v173 != v175);
    goto LABEL_217;
  }
  if (EndpointVADLogScope(void)::once != -1)
    dispatch_once(&EndpointVADLogScope(void)::once, &__block_literal_global_17314);
  if (!EndpointVADLogScope(void)::scope)
  {
    v9 = (const __CFDictionary *)MEMORY[0x1E0C81028];
    goto LABEL_228;
  }
  v9 = *(const __CFDictionary **)EndpointVADLogScope(void)::scope;
  if (*(_QWORD *)EndpointVADLogScope(void)::scope)
  {
LABEL_228:
    if (os_log_type_enabled((os_log_t)v9, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)inDesc = 136315394;
      *(_QWORD *)&inDesc[4] = "EndpointVADDSPChain.cpp";
      *(_WORD *)&inDesc[12] = 1024;
      *(_DWORD *)&inDesc[14] = 232;
      _os_log_impl(&dword_1B5ED0000, (os_log_t)v9, OS_LOG_TYPE_DEFAULT, "%25s:%-5d EndpointVADDSPChain: Incorrect threshold multiplier LUT format in the Plist.", inDesc, 0x12u);
    }
    LODWORD(v173) = 0;
    v9 = 0;
    goto LABEL_217;
  }
LABEL_216:
  LODWORD(v173) = 0;
LABEL_217:
  AudioUnitSetParameter(*v22, 0, 0, 0, inValue[0], 0);
  AudioUnitSetProperty(*v22, 0x11ACu, 0, 0, v198, 4u);
  *(_DWORD *)inDesc = v197[0];
  *(_DWORD *)&inDesc[4] = (_DWORD)__p;
  *(_DWORD *)&inDesc[8] = v173;
  *(_QWORD *)&inDesc[16] = v9;
  v176 = AudioUnitSetProperty(*v22, 0x11ADu, 0, 0, inDesc, 0x18u);
  if (v9)
    MEMORY[0x1BCC95CC8](v9, 0x1000C8000313F17);
  v2 = v24;
  if (v176
    || AudioUnitSetProperty(*(AudioUnit *)(v20 + 64), 8u, 1u, 0, inData, 0x28u)
    || AudioUnitSetProperty(*(AudioUnit *)(v20 + 64), 8u, 2u, 0, inData, 0x28u)
    || AudioUnitSetProperty(*(AudioUnit *)(v20 + 64), 0xEu, 0, 0, &EndpointVADDSPChain::mSamplesPerBuffer, 4u)
    || AudioUnitSetParameter(*(AudioUnit *)(v20 + 64), 0x20u, 0, 0, 0.0, 0))
  {
    goto LABEL_26;
  }
  AudioUnitSetParameter(*(AudioUnit *)(v20 + 64), 0x1Bu, 0, 0, 4.0, 0);
  *(_DWORD *)inDesc = -1035993088;
  if (!v10)
  {
    v178 = -48.0;
LABEL_232:
    v2 = v24;
    if (!AudioUnitSetParameter(*(AudioUnit *)(v20 + 64), 0x22u, 0, 0, v178, 0))
      goto LABEL_27;
    goto LABEL_26;
  }
  v177 = (const __CFNumber *)CFDictionaryGetValue(v10, CFSTR("AbsoluteSilenceThdDb"));
  if (CFNumberGetValue(v177, kCFNumberFloat32Type, inDesc))
  {
    v178 = *(float *)inDesc;
    goto LABEL_232;
  }
LABEL_25:
  v2 = v24;
LABEL_26:
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x1E0DE4A60], (uint64_t)"\nFailed to Set Up AU's\n\n", 24);
LABEL_27:
  if (AudioUnitInitialize(*v22) || AudioUnitInitialize(*(AudioUnit *)(v20 + 64)))
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x1E0DE4A60], (uint64_t)"\nFailed to Initialize AU's\n\n", 28);
  v25 = *(double *)inData;
  v26 = operator new();
  *(_QWORD *)v26 = 0;
  *(_QWORD *)(v26 + 8) = 0;
  *(_QWORD *)(v26 + 24) = 0;
  *(_QWORD *)(v26 + 32) = 0;
  *(_QWORD *)(v26 + 16) = 0x3FF0000000000000;
  *(_OWORD *)(v26 + 40) = 0u;
  *(_OWORD *)(v26 + 56) = 0u;
  v27 = v25;
  *(_QWORD *)(v20 + 48) = v26;
  *(_QWORD *)inDesc = 0;
  *(_QWORD *)&inDesc[8] = 0;
  *(_QWORD *)&inDesc[24] = 0;
  *(_QWORD *)&v204 = 0;
  *(_QWORD *)&inDesc[16] = 0x3FF0000000000000;
  LODWORD(v28) = 1126170624;
  Biquad::GetHipassParams((Biquad *)inDesc, (float)((float)(160.0 / v27) + (float)(160.0 / v27)), v28, v29);
  v30 = *(_QWORD *)(v20 + 48);
  *(_OWORD *)v30 = *(_OWORD *)inDesc;
  *(_OWORD *)(v30 + 16) = *(_OWORD *)&inDesc[16];
  *(_QWORD *)(v30 + 32) = v204;
  *(_BYTE *)v20 = 1;
  *(_DWORD *)(v20 + 4) = 0;
  *((_DWORD *)v182 + 10) = v8;
  myAllocABLDynamic(&v183, v8, (AudioBufferList **)v182 + 25);
  *((_QWORD *)v182 + 3) = operator new[]();
  *((_DWORD *)v182 + 8) = 0;
  v31 = (char *)operator new();
  *((_OWORD *)v31 + 1) = 0u;
  *((_OWORD *)v31 + 2) = 0u;
  v32 = v31 + 24;
  *(_OWORD *)v31 = 0u;
  EndpointVADObservationFeatures::GetFeatureDimensions((EndpointVADObservationFeatures *)v31);
  if ((char *)v33 != v31)
    std::vector<float>::__assign_with_size[abi:ne180100]<float const*,float const*>(v31, *(char **)v33, *(_QWORD *)(v33 + 8), (uint64_t)(*(_QWORD *)(v33 + 8) - *(_QWORD *)v33) >> 2);
  v34 = EndpointVADObservationFeatures::getFeatureDimensionsCumulativeProduct(void)::featureDimensionsCumulativeProduct;
  if (!EndpointVADObservationFeatures::getFeatureDimensionsCumulativeProduct(void)::featureDimensionsCumulativeProduct)
  {
    v35 = (std::vector<unsigned int> *)operator new();
    v35->__begin_ = 0;
    v35->__end_ = 0;
    v35->__end_cap_.__value_ = 0;
    EndpointVADObservationFeatures::getFeatureDimensionsCumulativeProduct(void)::featureDimensionsCumulativeProduct = (uint64_t)v35;
    std::vector<unsigned int>::resize(v35, 4uLL);
    EndpointVADObservationFeatures::GetFeatureDimensions(v36);
    v34 = EndpointVADObservationFeatures::getFeatureDimensionsCumulativeProduct(void)::featureDimensionsCumulativeProduct;
    v37 = *(_QWORD *)(EndpointVADObservationFeatures::getFeatureDimensionsCumulativeProduct(void)::featureDimensionsCumulativeProduct
                    + 8);
    v40 = *v38;
    v39 = v38[1];
    v41 = 1;
    while (v39 != v40)
    {
      *(_DWORD *)(v37 - 4) = v41;
      v37 -= 4;
      v42 = *(_DWORD *)(v39 - 4);
      v39 -= 4;
      v41 *= v42;
    }
    *(_DWORD *)(v37 - 4) = v41;
  }
  if (v32 != (char *)v34)
    std::vector<float>::__assign_with_size[abi:ne180100]<float const*,float const*>(v32, *(char **)v34, *(_QWORD *)(v34 + 8), (uint64_t)(*(_QWORD *)(v34 + 8) - *(_QWORD *)v34) >> 2);
  *((_QWORD *)v182 + 27) = v31;
  v206 = 0u;
  v207 = 0u;
  v204 = 0u;
  v205 = 0u;
  memset(inDesc, 0, sizeof(inDesc));
  if (theDict)
  {
    v188 = 0.0;
    valuePtr = 0.0;
    v44 = (const __CFNumber *)CFDictionaryGetValue(theDict, CFSTR("MeanNonspeechRegionSec"));
    v45 = (const __CFNumber *)CFDictionaryGetValue(theDict, CFSTR("MeanSpeechRegionSec"));
    if (CFNumberGetValue(v44, kCFNumberFloat64Type, &valuePtr))
      CFNumberGetValue(v45, kCFNumberFloat64Type, &v188);
    v47 = v188;
    v46 = valuePtr;
    std::vector<float>::resize((uint64_t)inDesc, 2uLL);
    v48 = *(_QWORD *)inDesc;
    v49 = *(_QWORD *)&inDesc[8] - *(_QWORD *)inDesc;
    if (*(_QWORD *)&inDesc[8] != *(_QWORD *)inDesc)
    {
      v50 = v46;
      v51 = v47;
      v52 = (float)(v11 * v51) * 83.333;
      v53 = 1.0 / (float)((float)((float)(1.0 / v11) * v50) * 83.333);
      v54 = 1.0 / v52;
      v55 = v53 + (float)(1.0 / v52);
      v56 = 1.0 / v55;
      **(float **)inDesc = (float)(1.0 / v52) * (float)(1.0 / v55);
      if (v49 >= 5)
      {
        *(float *)(v48 + 4) = v53 * v56;
        std::vector<std::vector<float>>::resize((uint64_t *)&inDesc[24], 2uLL);
        v57 = *(_QWORD *)&inDesc[24];
        if (*(_QWORD *)&inDesc[24] == (_QWORD)v204)
        {
          v58 = *(_QWORD *)&inDesc[24];
        }
        else
        {
          do
          {
            std::vector<float>::resize(v57, 2uLL);
            v57 += 24;
          }
          while (v57 != (_QWORD)v204);
          v58 = *(_QWORD *)&inDesc[24];
        }
        v59 = exp(-v55);
        if (v57 == v58)
          goto LABEL_210;
        v60 = *(float **)v58;
        v61 = *(_QWORD *)(v58 + 8) - *(_QWORD *)v58;
        if (!v61)
          goto LABEL_209;
        v62 = v59;
        v63 = v53 * v62;
        *v60 = v56 * (float)(v54 + (float)(v53 * v62));
        if (v61 < 5)
          goto LABEL_209;
        v64 = v54 * v62;
        v60[1] = v56 * (float)(v54 - v64);
        if (0xAAAAAAAAAAAAAAABLL * ((v57 - v58) >> 3) < 2)
LABEL_210:
          std::vector<std::vector<float>>::__throw_out_of_range[abi:ne180100]();
        v65 = *(float **)(v58 + 24);
        v66 = *(_QWORD *)(v58 + 32) - (_QWORD)v65;
        if (v66)
        {
          *v65 = v56 * (float)(v53 - v63);
          if (v66 > 4)
          {
            v65[1] = v56 * (float)(v53 + v64);
            memset(v202, 0, sizeof(v202));
            *(_QWORD *)inValue = 0;
            v200 = 0;
            v201 = 0;
            memset(v198, 0, sizeof(v198));
            memset(v197, 0, sizeof(v197));
            __p = 0;
            v195 = 0;
            v196 = 0;
            v191 = 0;
            v192 = 0;
            v193 = 0;
            v67 = (const __CFData *)CFDictionaryGetValue(theDict, CFSTR("ObservationModelParams"));
            v68 = (unsigned int *)CFDataGetBytePtr(v67);
            v69 = *v68;
            v70 = bswap32(v68[1]);
            v190 = v68 + 2;
            v72 = v195;
            v71 = (unsigned int *)v196;
            if ((unint64_t)v195 >= v196)
            {
              v74 = (char *)__p;
              v75 = (v195 - (_BYTE *)__p) >> 2;
              v76 = v75 + 1;
              if ((unint64_t)(v75 + 1) >> 62)
                goto LABEL_211;
              v77 = v196 - (_QWORD)__p;
              if ((uint64_t)(v196 - (_QWORD)__p) >> 1 > v76)
                v76 = v77 >> 1;
              if ((unint64_t)v77 >= 0x7FFFFFFFFFFFFFFCLL)
                v78 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v78 = v76;
              if (v78)
              {
                v79 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>((uint64_t)&v196, v78);
                v74 = (char *)__p;
                v72 = v195;
              }
              else
              {
                v79 = 0;
              }
              v80 = (unsigned int *)&v79[4 * v75];
              v71 = (unsigned int *)&v79[4 * v78];
              *v80 = v70;
              v73 = v80 + 1;
              while (v72 != v74)
              {
                v81 = *((_DWORD *)v72 - 1);
                v72 -= 4;
                *--v80 = v81;
              }
              __p = v80;
              v195 = (char *)v73;
              v196 = (unint64_t)v71;
              if (v74)
              {
                operator delete(v74);
                v71 = (unsigned int *)v196;
              }
            }
            else
            {
              *(_DWORD *)v195 = v70;
              v73 = (unsigned int *)(v72 + 4);
            }
            v82 = bswap32(v69);
            v195 = (char *)v73;
            if (v73 >= v71)
            {
              v84 = (unsigned int *)__p;
              v85 = ((char *)v73 - (_BYTE *)__p) >> 2;
              v86 = v85 + 1;
              if ((unint64_t)(v85 + 1) >> 62)
                goto LABEL_211;
              v87 = (char *)v71 - (_BYTE *)__p;
              if (v87 >> 1 > v86)
                v86 = v87 >> 1;
              if ((unint64_t)v87 >= 0x7FFFFFFFFFFFFFFCLL)
                v88 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v88 = v86;
              if (v88)
              {
                v89 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>((uint64_t)&v196, v88);
                v84 = (unsigned int *)__p;
                v73 = (unsigned int *)v195;
              }
              else
              {
                v89 = 0;
              }
              v90 = (unsigned int *)&v89[4 * v85];
              v91 = &v89[4 * v88];
              *v90 = v82;
              v83 = (char *)(v90 + 1);
              while (v73 != v84)
              {
                v92 = *--v73;
                *--v90 = v92;
              }
              __p = v90;
              v195 = v83;
              v196 = (unint64_t)v91;
              if (v84)
                operator delete(v84);
            }
            else
            {
              *v73 = v82;
              v83 = (char *)(v73 + 1);
            }
            v195 = v83;
            v94 = v192;
            v93 = (char *)v193;
            if ((unint64_t)v192 >= v193)
            {
              v96 = (char *)v191;
              v97 = (v192 - (_BYTE *)v191) >> 2;
              v98 = v97 + 1;
              if ((unint64_t)(v97 + 1) >> 62)
                goto LABEL_211;
              v99 = v193 - (_QWORD)v191;
              if ((uint64_t)(v193 - (_QWORD)v191) >> 1 > v98)
                v98 = v99 >> 1;
              if ((unint64_t)v99 >= 0x7FFFFFFFFFFFFFFCLL)
                v100 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v100 = v98;
              if (v100)
              {
                v101 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>((uint64_t)&v193, v100);
                v96 = (char *)v191;
                v94 = v192;
              }
              else
              {
                v101 = 0;
              }
              v102 = (unsigned int *)&v101[4 * v97];
              v93 = &v101[4 * v100];
              *v102 = v70;
              v95 = v102 + 1;
              while (v94 != v96)
              {
                v103 = *((_DWORD *)v94 - 1);
                v94 -= 4;
                *--v102 = v103;
              }
              v191 = v102;
              v192 = (char *)v95;
              v193 = (unint64_t)v93;
              if (v96)
              {
                operator delete(v96);
                v93 = (char *)v193;
              }
            }
            else
            {
              *(_DWORD *)v192 = v70;
              v95 = (unsigned int *)(v94 + 4);
            }
            v192 = (char *)v95;
            if (v95 >= (unsigned int *)v93)
            {
              v105 = (unsigned int *)v191;
              v106 = ((char *)v95 - (_BYTE *)v191) >> 2;
              v107 = v106 + 1;
              if ((unint64_t)(v106 + 1) >> 62)
                goto LABEL_211;
              v108 = v93 - (_BYTE *)v191;
              if (v108 >> 1 > v107)
                v107 = v108 >> 1;
              if ((unint64_t)v108 >= 0x7FFFFFFFFFFFFFFCLL)
                v109 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v109 = v107;
              if (v109)
              {
                v110 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>((uint64_t)&v193, v109);
                v105 = (unsigned int *)v191;
                v95 = (unsigned int *)v192;
              }
              else
              {
                v110 = 0;
              }
              v111 = (unsigned int *)&v110[4 * v106];
              v93 = &v110[4 * v109];
              *v111 = v70;
              v104 = v111 + 1;
              while (v95 != v105)
              {
                v112 = *--v95;
                *--v111 = v112;
              }
              v191 = v111;
              v192 = (char *)v104;
              v193 = (unint64_t)v93;
              if (v105)
              {
                operator delete(v105);
                v93 = (char *)v193;
              }
            }
            else
            {
              *v95 = v70;
              v104 = v95 + 1;
            }
            v192 = (char *)v104;
            if (v104 < (unsigned int *)v93)
            {
              *v104 = v82;
              v113 = (char *)(v104 + 1);
LABEL_142:
              v192 = v113;
              EndpointVADViterbiModel::parseObservationPriorFloat32(&v190, (uint64_t *)v202, (unsigned int **)&__p);
              EndpointVADViterbiModel::parseObservationTransitionFloat32(&v190, (uint64_t *)inValue, (char **)&v191);
              EndpointVADViterbiModel::parseObservationPriorFloat32(&v190, (uint64_t *)v198, (unsigned int **)&__p);
              EndpointVADViterbiModel::parseObservationTransitionFloat32(&v190, (uint64_t *)v197, (char **)&v191);
              std::vector<std::vector<float>>::__assign_with_size[abi:ne180100]<std::vector<float>*,std::vector<float>*>((uint64_t)&v205, *(uint64_t *)v202, *(uint64_t *)&v202[8], 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)&v202[8] - *(_QWORD *)v202) >> 3));
              std::vector<std::vector<std::vector<float>>>::__assign_with_size[abi:ne180100]<std::vector<std::vector<float>>*,std::vector<std::vector<float>>*>((uint64_t)&v206 + 8, *(uint64_t **)inValue, v200, 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v200 - *(_QWORD *)inValue) >> 3));
              if (v191)
              {
                v192 = (char *)v191;
                operator delete(v191);
              }
              if (__p)
              {
                v195 = (char *)__p;
                operator delete(__p);
              }
              __p = v197;
              std::vector<std::vector<std::vector<DspLib::Biquad::Section>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
              v197[0] = (void **)v198;
              std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](v197);
              v198[0] = (void **)inValue;
              std::vector<std::vector<std::vector<DspLib::Biquad::Section>>>::__destroy_vector::operator()[abi:ne180100](v198);
              *(_QWORD *)inValue = v202;
              std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)inValue);
              goto LABEL_147;
            }
            v114 = (unsigned int *)v191;
            v115 = ((char *)v104 - (_BYTE *)v191) >> 2;
            v116 = v115 + 1;
            if (!((unint64_t)(v115 + 1) >> 62))
            {
              v117 = v93 - (_BYTE *)v191;
              if (v117 >> 1 > v116)
                v116 = v117 >> 1;
              if ((unint64_t)v117 >= 0x7FFFFFFFFFFFFFFCLL)
                v118 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v118 = v116;
              if (v118)
              {
                v119 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>((uint64_t)&v193, v118);
                v114 = (unsigned int *)v191;
                v104 = (unsigned int *)v192;
              }
              else
              {
                v119 = 0;
              }
              v120 = (unsigned int *)&v119[4 * v115];
              v121 = &v119[4 * v118];
              *v120 = v82;
              v113 = (char *)(v120 + 1);
              while (v104 != v114)
              {
                v122 = *--v104;
                *--v120 = v122;
              }
              v191 = v120;
              v192 = v113;
              v193 = (unint64_t)v121;
              if (v114)
                operator delete(v114);
              goto LABEL_142;
            }
LABEL_211:
            std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
          }
        }
      }
    }
LABEL_209:
    std::vector<std::vector<float>>::__throw_out_of_range[abi:ne180100]();
  }
LABEL_147:
  v123 = operator new();
  v124 = (_QWORD *)operator new();
  *v124 = 0;
  v124[1] = 0;
  v124[2] = 0;
  std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(v124, *(const void **)inDesc, *(uint64_t *)&inDesc[8], (uint64_t)(*(_QWORD *)&inDesc[8] - *(_QWORD *)inDesc) >> 2);
  v124[3] = 0;
  v124[4] = 0;
  v124[5] = 0;
  std::vector<std::vector<float>>::__init_with_size[abi:ne180100]<std::vector<float>*,std::vector<float>*>(v124 + 3, *(uint64_t *)&inDesc[24], v204, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v204 - *(_QWORD *)&inDesc[24]) >> 3));
  v124[6] = 0;
  v124[7] = 0;
  v124[8] = 0;
  std::vector<std::vector<float>>::__init_with_size[abi:ne180100]<std::vector<float>*,std::vector<float>*>(v124 + 6, v205, *((uint64_t *)&v205 + 1), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)&v205 + 1) - v205) >> 3));
  v124[9] = 0;
  v124[10] = 0;
  v124[11] = 0;
  std::vector<std::vector<std::vector<float>>>::__init_with_size[abi:ne180100]<std::vector<std::vector<float>>*,std::vector<std::vector<float>>*>(v124 + 9, *((uint64_t **)&v206 + 1), (uint64_t *)v207, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v207 - *((_QWORD *)&v206 + 1)) >> 3));
  *(_QWORD *)v123 = v124;
  v125 = operator new();
  v179 = v2;
  v126 = fmaxf(v12, 0.0);
  v127 = vcvtps_u32_f32(v126 / 0.012);
  *(_DWORD *)v125 = 1;
  *(float *)(v125 + 4) = v126;
  *(_DWORD *)(v125 + 8) = v127;
  *(_DWORD *)(v125 + 12) = 50000;
  *(_OWORD *)(v123 + 24) = 0u;
  *(_QWORD *)(v123 + 8) = v125;
  v128 = (*(_QWORD *)&inDesc[8] - *(_QWORD *)inDesc) >> 2;
  *(_DWORD *)(v123 + 16) = -1431655765 * ((*((_QWORD *)&v205 + 1) - (_QWORD)v205) >> 3);
  *(_DWORD *)(v123 + 20) = v128;
  *(_OWORD *)(v123 + 72) = 0u;
  *(_OWORD *)(v123 + 40) = 0u;
  *(_OWORD *)(v123 + 56) = 0u;
  v129 = (char **)(v123 + 96);
  *(_OWORD *)(v123 + 88) = 0u;
  *(_OWORD *)(v123 + 104) = 0u;
  *(_OWORD *)(v123 + 120) = 0u;
  *(_OWORD *)(v123 + 132) = 0u;
  *(_DWORD *)(v123 + 148) = -1;
  *(_DWORD *)(v123 + 152) = ~v127;
  *(_QWORD *)(v123 + 156) = 0xFFFFFFFFLL;
  std::vector<unsigned int>::reserve((std::vector<unsigned int> *)(v123 + 24), 0xC350uLL);
  std::vector<unsigned int>::reserve((std::vector<unsigned int> *)(v123 + 48), 0xC350uLL);
  std::vector<DataTimeStamp>::reserve((void **)(v123 + 72), 0xC350uLL);
  v130 = *(_QWORD *)(v123 + 120);
  if ((unint64_t)(*(_QWORD *)(v123 + 136) - v130) >> 7 <= 0xC34)
  {
    v131 = *(_QWORD *)(v123 + 128);
    v132 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<SlidingWindowDTFT<float> *>>(0xC350uLL);
    v133 = &v132[(v131 - v130) & 0xFFFFFFFFFFFFFFF8];
    v135 = &v132[8 * v134];
    v137 = *(char **)(v123 + 120);
    v136 = *(char **)(v123 + 128);
    v138 = v133;
    if (v136 != v137)
    {
      do
      {
        v139 = *((_QWORD *)v136 - 1);
        v136 -= 8;
        *((_QWORD *)v138 - 1) = v139;
        v138 -= 8;
      }
      while (v136 != v137);
      v136 = *(char **)(v123 + 120);
    }
    *(_QWORD *)(v123 + 120) = v138;
    *(_QWORD *)(v123 + 128) = v133;
    *(_QWORD *)(v123 + 136) = v135;
    if (v136)
      operator delete(v136);
  }
  v140 = *(unsigned int *)(v123 + 20);
  if ((_DWORD)v140)
  {
    v141 = 0;
    v142 = v123 + 168;
    do
    {
      *(_QWORD *)(v142 + 8 * v141) = 0;
      *(_DWORD *)(v142 + 4 * v141++ + 16) = 0;
    }
    while (v140 != v141);
  }
  std::vector<DataTimeStamp>::reserve((void **)(v123 + 96), v140);
  if (*(_DWORD *)(v123 + 20))
  {
    v143 = 0;
    v144 = (_OWORD *)(v123 + 168);
    v145 = *(char **)(v123 + 104);
    do
    {
      v146 = *(_QWORD *)(v123 + 112);
      if ((unint64_t)v145 >= v146)
      {
        v147 = (v145 - *v129) >> 4;
        if ((unint64_t)(v147 + 1) >> 60)
          std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
        v148 = v146 - (_QWORD)*v129;
        v149 = v148 >> 3;
        if (v148 >> 3 <= (unint64_t)(v147 + 1))
          v149 = v147 + 1;
        if ((unint64_t)v148 >= 0x7FFFFFFFFFFFFFF0)
          v150 = 0xFFFFFFFFFFFFFFFLL;
        else
          v150 = v149;
        if (v150)
          v150 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<float (ASAFeatures::*)(ASAFrontEndInputState const*)>>(v150);
        else
          v151 = 0;
        v152 = (_OWORD *)(v150 + 16 * v147);
        *v152 = *v144;
        v154 = *(char **)(v123 + 96);
        v153 = *(char **)(v123 + 104);
        v155 = v152;
        if (v153 != v154)
        {
          do
          {
            *--v155 = *((_OWORD *)v153 - 1);
            v153 -= 16;
          }
          while (v153 != v154);
          v153 = *v129;
        }
        v145 = (char *)(v152 + 1);
        *(_QWORD *)(v123 + 96) = v155;
        *(_QWORD *)(v123 + 104) = v152 + 1;
        *(_QWORD *)(v123 + 112) = v150 + 16 * v151;
        if (v153)
          operator delete(v153);
      }
      else
      {
        *(_OWORD *)v145 = *v144;
        v145 += 16;
      }
      *(_QWORD *)(v123 + 104) = v145;
      ++v143;
    }
    while (v143 < *(_DWORD *)(v123 + 20));
  }
  *((_QWORD *)v182 + 28) = v123;
  *((_DWORD *)v182 + 53) = 0;
  if (theDict)
    *(_BYTE *)v182 = 1;
  *(_QWORD *)v202 = (char *)&v206 + 8;
  std::vector<std::vector<std::vector<DspLib::Biquad::Section>>>::__destroy_vector::operator()[abi:ne180100]((void ***)v202);
  *(_QWORD *)v202 = &v205;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)v202);
  *(_QWORD *)v202 = &inDesc[24];
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)v202);
  if (*(_QWORD *)inDesc)
  {
    *(_QWORD *)&inDesc[8] = *(_QWORD *)inDesc;
    operator delete(*(void **)inDesc);
  }
  if (theDict)
    goto LABEL_189;
  if (EndpointVADLogScope(void)::once != -1)
    dispatch_once(&EndpointVADLogScope(void)::once, &__block_literal_global_17314);
  if (!EndpointVADLogScope(void)::scope)
  {
    v156 = MEMORY[0x1E0C81028];
LABEL_186:
    if (os_log_type_enabled(v156, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)inDesc = 136315394;
      *(_QWORD *)&inDesc[4] = "AUEndpointVAD.cpp";
      *(_WORD *)&inDesc[12] = 1024;
      *(_DWORD *)&inDesc[14] = 110;
      _os_log_impl(&dword_1B5ED0000, v156, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Initialization failed. Setting the AU to bypass mode.", inDesc, 0x12u);
    }
    goto LABEL_188;
  }
  v156 = *(NSObject **)EndpointVADLogScope(void)::scope;
  if (*(_QWORD *)EndpointVADLogScope(void)::scope)
    goto LABEL_186;
LABEL_188:
  (*(void (**)(AUEndpointVAD *, uint64_t))(*(_QWORD *)this + 584))(this, 1);
LABEL_189:
  ausdk::AUScope::SafeGetElement(v179, 0);
  *((_QWORD *)this + 74) = operator new[]();
  *((_DWORD *)this + 146) = 0;
  if ((*((float *)this + 144) * 83.3333326))
    v157 = (*((float *)this + 144) * 83.3333326);
  else
    v157 = 1;
  v158 = *((float *)this + 145);
  v159 = (unsigned int *)operator new();
  *v159 = 2;
  v159[1] = v157;
  v159[2] = 0;
  *((_QWORD *)v159 + 3) = 0;
  v159[12] = 0;
  *((_QWORD *)v159 + 7) = 0;
  *((_BYTE *)v159 + 64) = 0;
  v160 = operator new();
  v161 = v159[1];
  v162 = (char *)operator new[]();
  if ((_DWORD)v161)
  {
    v163 = v162;
    do
    {
      *(_DWORD *)v163 = -1;
      *((_QWORD *)v163 + 1) = 0;
      v163 += 16;
    }
    while (v163 != &v162[16 * v161]);
  }
  *(_QWORD *)v160 = v162;
  *(_DWORD *)(v160 + 8) = v161;
  *(_DWORD *)(v160 + 12) = 0;
  bzero(v162, 16 * (int)v161);
  *((_QWORD *)v159 + 2) = v160;
  *((_QWORD *)v159 + 4) = operator new[]();
  v164 = (void *)operator new[]();
  *((_QWORD *)v159 + 5) = v164;
  v165 = (_DWORD *)*((_QWORD *)v159 + 4);
  *v165 = v159[1];
  v165[1] = v159[1];
  bzero(v164, 4 * *v159);
  if ((float)(v158 * (float)v157))
    v166 = (float)(v158 * (float)v157);
  else
    v166 = 1;
  std::unique_ptr<EndpointVADSegmentHeuristics>::reset[abi:ne180100]((_QWORD *)this + 67, (uint64_t)v159);
  v167 = *(unsigned int **)(*((_QWORD *)this + 67) + 32);
  *v167 = v166;
  v167[1] = v166;
  *((_DWORD *)this + 150) = 0;
  *((_QWORD *)this + 76) = 0;
  *((_DWORD *)this + 154) = 0;
  AUEndpointVAD::UpdateParameters(this);
  return 0;
}

void sub_1B634E500(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,uint64_t a33,uint64_t ****__p,uint64_t ****a35,uint64_t a36,uint64_t ***a37,uint64_t a38,uint64_t a39,uint64_t **a40,uint64_t a41,uint64_t a42,uint64_t *a43,uint64_t a44,uint64_t a45,uint64_t a46)
{
  uint64_t v46;
  void *v48;

  if (__p)
  {
    a35 = __p;
    operator delete(__p);
  }
  __p = &a37;
  std::vector<std::vector<std::vector<DspLib::Biquad::Section>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  a37 = &a40;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a37);
  a40 = &a43;
  std::vector<std::vector<std::vector<DspLib::Biquad::Section>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a40);
  a43 = &a46;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a43);
  std::vector<std::vector<std::vector<DspLib::Biquad::Section>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a46);
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a46);
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a46);
  v48 = *(void **)(v46 - 256);
  if (v48)
  {
    *(_QWORD *)(v46 - 248) = v48;
    operator delete(v48);
  }
  _Unwind_Resume(a1);
}

EndpointVAD *AUEndpointVAD::Cleanup(AUEndpointVAD *this)
{
  EndpointVAD *result;
  const void *v3;
  const void *v4;
  const void *v5;

  result = (EndpointVAD *)*((_QWORD *)this + 66);
  if (result)
    result = (EndpointVAD *)EndpointVAD::Uninitialize(result);
  if (*((_BYTE *)this + 17))
  {
    std::unique_ptr<EndpointVAD>::reset[abi:ne180100]((uint64_t *)this + 66, 0);
    std::unique_ptr<EndpointVADSegmentHeuristics>::reset[abi:ne180100]((_QWORD *)this + 67, 0);
    v3 = (const void *)*((_QWORD *)this + 70);
    if (v3)
    {
      CFRelease(v3);
      *((_QWORD *)this + 70) = 0;
    }
    v4 = (const void *)*((_QWORD *)this + 68);
    if (v4)
    {
      CFRelease(v4);
      *((_QWORD *)this + 68) = 0;
    }
    v5 = (const void *)*((_QWORD *)this + 69);
    if (v5)
    {
      CFRelease(v5);
      *((_QWORD *)this + 69) = 0;
    }
    result = (EndpointVAD *)*((_QWORD *)this + 74);
    if (result)
    {
      result = (EndpointVAD *)MEMORY[0x1BCC95CEC](result, 0x1000C4052888210);
      *((_QWORD *)this + 74) = 0;
    }
  }
  return result;
}

uint64_t AUEndpointVAD::GetPropertyInfo(AUEndpointVAD *this, int a2, int a3, unsigned int a4, unsigned int *a5, BOOL *a6)
{
  uint64_t result;
  char v7;
  int v8;

  if (a3)
    return 4294956417;
  switch(a2)
  {
    case 64001:
    case 64008:
    case 64009:
      *a6 = *((_BYTE *)this + 17) ^ 1;
      v8 = 8;
      goto LABEL_12;
    case 64002:
    case 64003:
    case 64004:
    case 64005:
      goto LABEL_4;
    case 64006:
      *a6 = *((_BYTE *)this + 17) ^ 1;
      v8 = 40;
      goto LABEL_12;
    case 64007:
      *a6 = 0;
      v8 = 4 * *((_DWORD *)this + 146);
      goto LABEL_12;
    default:
      if (a2 == 3700)
      {
LABEL_4:
        v7 = *((_BYTE *)this + 17) ^ 1;
      }
      else
      {
        if (a2 != 21)
          return 4294956417;
        v7 = 1;
      }
      *a6 = v7;
      v8 = 4;
LABEL_12:
      result = 0;
      *a5 = v8;
      break;
  }
  return result;
}

uint64_t AUEndpointVAD::GetProperty(AUEndpointVAD *this, int a2, int a3, unsigned int a4, char *__dst)
{
  uint64_t result;
  const __CFAllocator *v8;
  const __CFDictionary *v9;
  int v10;
  int v11;
  CFDictionaryRef Copy;

  if (a3)
    return 4294956417;
  switch(a2)
  {
    case 64001:
      v8 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
      v9 = (const __CFDictionary *)*((_QWORD *)this + 70);
      goto LABEL_17;
    case 64002:
      result = 0;
      v11 = *((_DWORD *)this + 142);
      goto LABEL_12;
    case 64003:
      result = 0;
      v11 = *((_DWORD *)this + 143);
      goto LABEL_12;
    case 64004:
      result = 0;
      v11 = *((_DWORD *)this + 144);
      goto LABEL_12;
    case 64005:
      result = 0;
      v11 = *((_DWORD *)this + 145);
LABEL_12:
      *(_DWORD *)__dst = v11;
      return result;
    case 64006:
      result = 0;
      *(_QWORD *)__dst = 0x4054D555524B8E39;
      *(_OWORD *)(__dst + 8) = xmmword_1B6626900;
      *(_OWORD *)(__dst + 24) = xmmword_1B6626910;
      return result;
    case 64007:
      memcpy(__dst, *((const void **)this + 74), 4 * *((unsigned int *)this + 146));
      return 0;
    case 64008:
      v8 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
      v9 = (const __CFDictionary *)*((_QWORD *)this + 68);
      goto LABEL_17;
    case 64009:
      v8 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
      v9 = (const __CFDictionary *)*((_QWORD *)this + 69);
LABEL_17:
      Copy = CFDictionaryCreateCopy(v8, v9);
      result = 0;
      *(_QWORD *)__dst = Copy;
      return result;
    default:
      if (a2 == 3700)
      {
        result = 0;
        v10 = *((unsigned __int8 *)this + 376);
        goto LABEL_19;
      }
      if (a2 == 21)
      {
        v10 = (*(uint64_t (**)(AUEndpointVAD *))(*(_QWORD *)this + 576))(this);
        result = 0;
LABEL_19:
        *(_DWORD *)__dst = v10;
        return result;
      }
      return 4294956417;
  }
}

uint64_t AUEndpointVAD::SetProperty(AUEndpointVAD *this, int a2, int a3, unsigned int a4, CFDictionaryRef theDict, unsigned int a6)
{
  uint64_t result;
  const void *v9;
  CFDictionaryRef Copy;
  int v11;
  int v12;
  float v13;
  float v14;
  float v15;
  const void *v17;
  CFDictionaryRef v18;
  const void *v19;
  CFDictionaryRef v20;

  if (a3)
    return 4294956417;
  result = 4294956431;
  switch(a2)
  {
    case 64001:
      if (*((_BYTE *)this + 17))
        return 4294956447;
      if (!a6)
        return 4294956445;
      v9 = (const void *)*((_QWORD *)this + 70);
      if (v9)
      {
        CFRelease(v9);
        *((_QWORD *)this + 70) = 0;
      }
      Copy = CFDictionaryCreateCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE00], theDict);
      result = 0;
      *((_QWORD *)this + 70) = Copy;
      return result;
    case 64002:
      if (*((_BYTE *)this + 17))
        return 4294956447;
      if (!a6)
        return 4294956445;
      result = 0;
      *((_DWORD *)this + 142) = *(_DWORD *)theDict;
      return result;
    case 64003:
      if (*((_BYTE *)this + 17))
        return 4294956447;
      result = 4294956445;
      if (a6)
      {
        v13 = *(float *)theDict;
        *((_DWORD *)this + 143) = *(_DWORD *)theDict;
        if (v13 >= 0.0)
          return 0;
        else
          return 4294956445;
      }
      return result;
    case 64004:
      if (*((_BYTE *)this + 17))
        return 4294956447;
      result = 4294956445;
      if (a6)
      {
        v14 = *(float *)theDict;
        *((_DWORD *)this + 144) = *(_DWORD *)theDict;
        if (v14 <= 0.0)
          return 4294956445;
        else
          return 0;
      }
      return result;
    case 64005:
      if (*((_BYTE *)this + 17))
        return 4294956447;
      result = 4294956445;
      if (a6)
      {
        v15 = *(float *)theDict;
        *((_DWORD *)this + 145) = *(_DWORD *)theDict;
        if (v15 <= 1.0 && v15 > 0.0)
          return 0;
        else
          return 4294956445;
      }
      return result;
    case 64006:
    case 64007:
      return result;
    case 64008:
      if (*((_BYTE *)this + 17))
        return 4294956447;
      if (!a6)
        return 4294956445;
      v17 = (const void *)*((_QWORD *)this + 68);
      if (v17)
      {
        CFRelease(v17);
        *((_QWORD *)this + 68) = 0;
      }
      v18 = CFDictionaryCreateCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE00], theDict);
      result = 0;
      *((_QWORD *)this + 68) = v18;
      return result;
    case 64009:
      if (*((_BYTE *)this + 17))
        return 4294956447;
      if (!a6)
        return 4294956445;
      v19 = (const void *)*((_QWORD *)this + 69);
      if (v19)
      {
        CFRelease(v19);
        *((_QWORD *)this + 69) = 0;
      }
      v20 = CFDictionaryCreateCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE00], theDict);
      result = 0;
      *((_QWORD *)this + 69) = v20;
      return result;
    default:
      if (a2 == 3700)
      {
        if (a6 >= 4)
        {
          result = 0;
          *((_BYTE *)this + 376) = *(_BYTE *)theDict;
          return result;
        }
        return 4294956445;
      }
      if (a2 != 21)
        return 4294956417;
      if (a6 < 4)
        return 4294956445;
      v11 = *(_DWORD *)theDict;
      v12 = *(_DWORD *)theDict != 0;
      if (v12 != (*(unsigned int (**)(AUEndpointVAD *))(*(_QWORD *)this + 576))(this))
        (*(void (**)(AUEndpointVAD *, BOOL))(*(_QWORD *)this + 584))(this, v11 != 0);
      return 0;
  }
}

uint64_t AUEndpointVAD::CanScheduleParameters(AUEndpointVAD *this)
{
  return 0;
}

uint64_t AUEndpointVAD::ProcessMultipleBufferLists(AUEndpointVAD *this, unsigned int *a2, uint64_t a3, unsigned int a4, const AudioBufferList **a5, unsigned int a6, AudioBufferList **a7)
{
  uint64_t v7;
  uint64_t v12;
  uint64_t v13;
  float v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  __int128 v18;
  uint64_t v19;
  _DWORD *v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  int v24;
  uint64_t v25;
  unsigned int *v26;
  int *v27;
  NSObject *v28;
  _BYTE *v29;
  uint64_t v30;
  double v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unsigned int v37;
  uint64_t v38;
  uint64_t v39;
  unsigned int v40;
  int v41;
  unsigned int v42;
  unsigned int v43;
  unsigned int v44;
  uint64_t v45;
  int v46;
  uint64_t v47;
  NSObject *v49;
  uint64_t v50;
  int *v51;
  int v52;
  uint64_t v53;
  int v54;
  int v55;
  uint64_t v56;
  void *mData;
  void *v58;
  unsigned int v60;
  int v61;
  AudioBufferList *v62;
  _BYTE buf[12];
  __int16 v64;
  int v65;
  uint64_t v66;

  v66 = *MEMORY[0x1E0C80C00];
  if (*((_DWORD *)this + 84) < a3)
    return 4294956422;
  if (((*(uint64_t (**)(AUEndpointVAD *, unsigned int *))(*(_QWORD *)this + 576))(this, a2) & 1) == 0)
  {
    v12 = *((_QWORD *)this + 66);
    v13 = (uint64_t)*a5;
    v61 = a3;
    v14 = *((double *)this + 34);
    *(double *)(v12 + 128) = (double)vcvtms_u32_f32(*(float *)(v12 + 36) * v14);
    v15 = *(_QWORD *)(v13 + 16);
    v16 = *(_QWORD *)(*(_QWORD *)(v12 + 200) + 16);
    v60 = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v12 + 48) + 144))(*(_QWORD *)(v12 + 48), a3);
    (*(void (**)(_QWORD, uint64_t, _QWORD, uint64_t, _QWORD, int *, unsigned int *, uint64_t, uint64_t))(**(_QWORD **)(v12 + 48) + 32))(*(_QWORD *)(v12 + 48), v15, 0, v16, 0, &v61, &v60, 1, 1);
    v17 = v60;
    *(_DWORD *)(v12 + 208) = v60;
    v62 = *(AudioBufferList **)(v12 + 200);
    *(_QWORD *)buf = v62;
    *(_DWORD *)(v12 + 32) = 0;
    v7 = BlockProcessor::Process((BlockProcessor *)(v12 + 56), v17, (const AudioBufferList **)buf, &v62);
    v19 = *((_QWORD *)this + 66);
    v20 = (_DWORD *)*((_QWORD *)this + 74);
    v21 = *(_QWORD *)(v19 + 224);
    v22 = *(unsigned int *)(v19 + 212);
    v23 = *(_DWORD *)(v21 + 152);
    *((_DWORD *)this + 146) = 0;
    if (v23 < 0
      || *(_DWORD *)(v21 + 152) < v22
      || (EndpointVADRTViterbi::decodeStateSequence((EndpointVADRTViterbi *)v21, *(_DWORD *)(v21 + 148), v22),
          v24 = *(_DWORD *)(v21 + 152) - v22,
          *((_DWORD *)this + 146) = v24 + 1,
          v24 == -1))
    {
      LODWORD(v25) = 0;
    }
    else
    {
      v50 = *(_QWORD *)(v21 + 24) + 4 * v22;
      v51 = (int *)v50;
      do
      {
        v52 = *v51++;
        *v20++ = v52;
        v25 = *((unsigned int *)this + 146);
      }
      while (v51 != (int *)(v50 + 4 * v25));
    }
    *(_DWORD *)(v19 + 212) += v25;
    v26 = (unsigned int *)*((_QWORD *)this + 67);
    v27 = (int *)*((_QWORD *)this + 74);
    if (v26[1] >= v25)
    {
      *((_BYTE *)v26 + 64) = 0;
      v29 = v26 + 16;
      if (!(_DWORD)v25)
        goto LABEL_27;
      goto LABEL_22;
    }
    if (EndpointVADLogScope(void)::once != -1)
      dispatch_once(&EndpointVADLogScope(void)::once, &__block_literal_global_17314);
    if (EndpointVADLogScope(void)::scope)
    {
      v28 = *(NSObject **)EndpointVADLogScope(void)::scope;
      if (!*(_QWORD *)EndpointVADLogScope(void)::scope)
      {
LABEL_21:
        *((_BYTE *)v26 + 64) = 0;
        v29 = v26 + 16;
LABEL_22:
        v30 = v25;
        v31 = *((double *)v26 + 3);
        do
        {
          v32 = *v27++;
          LODWORD(v18) = v32;
          *((double *)&v18 + 1) = v31;
          v33 = *((_QWORD *)v26 + 2);
          v34 = *(int *)(v33 + 12);
          v35 = *(_QWORD *)(*(_QWORD *)v33 + 16 * ((int)v34 % *(_DWORD *)(v33 + 8)));
          *(_OWORD *)(*(_QWORD *)v33 + 16 * v34) = v18;
          *(_DWORD *)(v33 + 12) = (*(_DWORD *)(v33 + 12) + 1) % *(_DWORD *)(v33 + 8);
          v36 = *((_QWORD *)v26 + 5);
          ++*(_DWORD *)(v36 + 4 * v32);
          v37 = v26[2];
          if (v37 == v26[1])
            --*(_DWORD *)(v36 + 4 * (int)v35);
          else
            v26[2] = v37 + 1;
          v31 = *((double *)v26 + 3) + 1.0;
          *((double *)v26 + 3) = v31;
          --v30;
        }
        while (v30);
LABEL_27:
        v38 = *v26;
        if (!(_DWORD)v38)
        {
LABEL_52:
          *v29 = v38;
          v53 = *((_QWORD *)this + 67);
          v54 = *(unsigned __int8 *)(v53 + 64);
          v55 = *(_DWORD *)(v53 + 48);
          v56 = *(_QWORD *)(v53 + 56);
          *((_DWORD *)this + 154) = v54;
          if (v54)
          {
            *((_DWORD *)this + 150) = v55;
            *((_QWORD *)this + 76) = v56;
          }
          AUEndpointVAD::UpdateParameters(this);
          goto LABEL_55;
        }
        v39 = 0;
        v40 = 0;
        v41 = -1;
        do
        {
          v42 = *(_DWORD *)(*((_QWORD *)v26 + 5) + 4 * v39);
          if (v42 >= *(_DWORD *)(*((_QWORD *)v26 + 4) + 4 * v39) && v42 > v40)
          {
            v41 = v39;
            v40 = *(_DWORD *)(*((_QWORD *)v26 + 5) + 4 * v39);
          }
          ++v39;
        }
        while (v38 != v39);
        if (v41 < 0 || v41 == v26[12])
        {
          LOBYTE(v38) = 0;
          goto LABEL_52;
        }
        v26[12] = v41;
        v44 = v26[1];
        v43 = v26[2];
        if (v44 - v43 < v44)
        {
          v45 = *((_QWORD *)v26 + 2);
          v46 = -v43;
          while (v41 != MRRingBuffer<StateEvent>::GetSample(v45, v44 + v46))
          {
            if (__CFADD__(v46++, 1))
              goto LABEL_40;
          }
          *((_QWORD *)v26 + 7) = v47;
          goto LABEL_51;
        }
LABEL_40:
        if (EndpointVADLogScope(void)::once != -1)
          dispatch_once(&EndpointVADLogScope(void)::once, &__block_literal_global_17314);
        if (EndpointVADLogScope(void)::scope)
        {
          v49 = *(NSObject **)EndpointVADLogScope(void)::scope;
          if (!*(_QWORD *)EndpointVADLogScope(void)::scope)
          {
LABEL_51:
            v26[2] = 0;
            bzero(*((void **)v26 + 5), 4 * *v26);
            LOBYTE(v38) = 1;
            goto LABEL_52;
          }
        }
        else
        {
          v49 = MEMORY[0x1E0C81028];
        }
        if (os_log_type_enabled(v49, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136315394;
          *(_QWORD *)&buf[4] = "EndpointVADSegmentHeuristics.cpp";
          v64 = 1024;
          v65 = 163;
          _os_log_impl(&dword_1B5ED0000, v49, OS_LOG_TYPE_ERROR, "%25s:%-5d EndpointVADSegmentHeuristics: Transition state value not found in the history buffer!", buf, 0x12u);
        }
        goto LABEL_51;
      }
    }
    else
    {
      v28 = MEMORY[0x1E0C81028];
    }
    if (os_log_type_enabled(v28, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136315394;
      *(_QWORD *)&buf[4] = "EndpointVADSegmentHeuristics.cpp";
      v64 = 1024;
      v65 = 75;
      _os_log_impl(&dword_1B5ED0000, v28, OS_LOG_TYPE_DEFAULT, "%25s:%-5d EndpointVADSegmentHeuristics: Input VAD sequence exceeded the internal history size.", buf, 0x12u);
    }
    goto LABEL_21;
  }
  v7 = 0;
LABEL_55:
  mData = (*a5)->mBuffers[0].mData;
  v58 = (*a7)->mBuffers[0].mData;
  if (mData != v58)
    memcpy(v58, mData, (*a5)->mBuffers[0].mDataByteSize);
  return v7;
}

uint64_t AUEndpointVAD::Render(AUEndpointVAD *this, unsigned int *a2, const AudioTimeStamp *a3, uint64_t a4)
{
  uint64_t result;
  uint64_t Element;
  ausdk::AUInputElement *v10;
  uint64_t v11;
  uint64_t BufferList;
  _QWORD v13[2];

  v13[1] = *MEMORY[0x1E0C80C00];
  if (*((_DWORD *)this + 84) < a4)
    return 4294956422;
  if (!ausdk::AUBase::HasInput(this, 0))
    return 4294956420;
  Element = ausdk::AUScope::SafeGetElement((AUEndpointVAD *)((char *)this + 128), 0);
  v10 = (ausdk::AUInputElement *)ausdk::AUScope::SafeGetElement((AUEndpointVAD *)((char *)this + 80), 0);
  result = ausdk::AUInputElement::PullInput(v10, a2, a3, 0, a4);
  if (!(_DWORD)result)
  {
    v11 = ausdk::AUScope::SafeGetElement((AUEndpointVAD *)((char *)this + 80), 0);
    v13[0] = ausdk::AUBufferList::GetBufferList((ausdk::AUBufferList *)(v11 + 144));
    BufferList = ausdk::AUBufferList::GetBufferList((ausdk::AUBufferList *)(Element + 144));
    return (*(uint64_t (**)(AUEndpointVAD *, unsigned int *, uint64_t, uint64_t, _QWORD *, uint64_t, uint64_t *))(*(_QWORD *)this + 184))(this, a2, a4, 1, v13, 1, &BufferList);
  }
  return result;
}

uint64_t AUEndpointVAD::GetParameterInfo(AUEndpointVAD *this, int a2, int a3, AudioUnitParameterInfo *buffer)
{
  uint64_t result;
  const __CFString *v7;
  AudioUnitParameterOptions v8;

  buffer->flags = 0x40000000;
  buffer->unitName = 0;
  if (a2)
    return 4294956418;
  switch(a3)
  {
    case 0:
      buffer->cfNameString = CFSTR("number of VAD results");
      buffer->flags = 1207959552;
      CFStringGetCString(CFSTR("number of VAD results"), buffer->name, 52, 0x8000100u);
      *(_QWORD *)&buffer->unit = 0;
      buffer->maxValue = (float)*((unsigned int *)this + 84);
      goto LABEL_9;
    case 1:
      v7 = CFSTR("latest VAD status");
      goto LABEL_8;
    case 2:
      buffer->cfNameString = CFSTR("latest VAD sample time");
      buffer->flags = 1207959552;
      CFStringGetCString(CFSTR("latest VAD sample time"), buffer->name, 52, 0x8000100u);
      buffer->unit = kAudioUnitParameterUnit_Generic;
      goto LABEL_9;
    case 3:
      v7 = CFSTR("VAD status changed");
LABEL_8:
      buffer->cfNameString = v7;
      buffer->flags = 1207959552;
      CFStringGetCString(v7, buffer->name, 52, 0x8000100u);
      buffer->unit = kAudioUnitParameterUnit_Generic;
      *(_QWORD *)&buffer->minValue = 0x3F80000000000000;
LABEL_9:
      result = 0;
      v8 = buffer->flags | 0x8000;
      buffer->defaultValue = 0.0;
      buffer->flags = v8;
      break;
    default:
      return 4294956418;
  }
  return result;
}

double AUEndpointVAD::GetLatency(AUEndpointVAD *this)
{
  return 0.0;
}

double AUEndpointVAD::GetTailTime(AUEndpointVAD *this)
{
  return 0.0;
}

uint64_t AUEndpointVAD::SupportsTail(AUEndpointVAD *this)
{
  return 1;
}

BOOL AUEndpointVAD::StreamFormatWritable(AUEndpointVAD *this)
{
  return *((_BYTE *)this + 17) == 0;
}

uint64_t AUEndpointVAD::SupportedNumChannels(AUEndpointVAD *this, const AUChannelInfo **a2)
{
  if (a2)
    *a2 = (const AUChannelInfo *)&AUEndpointVAD::SupportedNumChannels(AUChannelInfo const**)::sSupportedChannelConfigs;
  return 1;
}

BOOL AUEndpointVAD::ValidFormat(AUEndpointVAD *this, const AudioStreamBasicDescription *a2, unsigned int a3, AudioStreamBasicDescription *a4)
{
  _BOOL4 v5;

  if (ausdk::ASBD::IsCommonFloat32((ausdk::ASBD *)a4, a2))
    v5 = (a4->mFormatFlags & 0x20) != 0 || a4->mChannelsPerFrame == 1;
  else
    v5 = 0;
  return a4->mChannelsPerFrame == 1 && v5;
}

uint64_t AUEndpointVAD::ShouldBypassEffect(AUEndpointVAD *this)
{
  return *((unsigned __int8 *)this + 620);
}

uint64_t AUEndpointVAD::SetBypassEffect(uint64_t this, char a2)
{
  *(_BYTE *)(this + 620) = a2;
  return this;
}

float AUEndpointVAD::UpdateParameters(AUEndpointVAD *this)
{
  uint64_t v2;
  ausdk::AUElement *v3;
  ausdk::AUElement **v4;
  uint64_t v5;
  ausdk::AUElement *v6;
  ausdk::AUElement **v7;
  uint64_t v8;
  ausdk::AUElement *v9;
  ausdk::AUElement **v10;
  float v11;
  uint64_t v12;
  ausdk::AUElement *v13;
  ausdk::AUElement **v14;
  float result;

  v2 = *((_QWORD *)this + 9);
  if (v2)
  {
    v3 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v2 + 32))(v2, 0);
  }
  else
  {
    v4 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v4)
      v3 = 0;
    else
      v3 = *v4;
  }
  ausdk::AUElement::SetParameter(v3, 0, (float)*((unsigned int *)this + 146), 0);
  v5 = *((_QWORD *)this + 9);
  if (v5)
  {
    v6 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v5 + 32))(v5, 0);
  }
  else
  {
    v7 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v7)
      v6 = 0;
    else
      v6 = *v7;
  }
  ausdk::AUElement::SetParameter(v6, 1u, (float)*((unsigned int *)this + 150), 0);
  v8 = *((_QWORD *)this + 9);
  if (v8)
  {
    v9 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v8 + 32))(v8, 0);
  }
  else
  {
    v10 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v10)
      v9 = 0;
    else
      v9 = *v10;
  }
  v11 = *((double *)this + 76);
  ausdk::AUElement::SetParameter(v9, 2u, v11, 0);
  v12 = *((_QWORD *)this + 9);
  if (v12)
  {
    v13 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v12 + 32))(v12, 0);
  }
  else
  {
    v14 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v14)
      v13 = 0;
    else
      v13 = *v14;
  }
  ausdk::AUElement::SetParameter(v13, 3u, (float)*((unsigned int *)this + 154), 0);
  return result;
}

uint64_t *std::unique_ptr<EndpointVAD>::reset[abi:ne180100](uint64_t *result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *result;
  *result = a2;
  if (v2)
  {
    EndpointVAD::Uninitialize((EndpointVAD *)v2);
    std::__optional_destruct_base<BlockProcessor,false>::~__optional_destruct_base[abi:ne180100]((_BYTE *)(v2 + 56));
    v3 = *(_QWORD *)(v2 + 48);
    *(_QWORD *)(v2 + 48) = 0;
    if (v3)
      (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
    JUMPOUT(0x1BCC95CECLL);
  }
  return result;
}

_QWORD *std::unique_ptr<EndpointVADSegmentHeuristics>::reset[abi:ne180100](_QWORD *result, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;

  v2 = (_QWORD *)*result;
  *result = a2;
  if (v2)
  {
    v3 = (_QWORD *)v2[2];
    if (v3)
    {
      if (*v3)
        MEMORY[0x1BCC95CC8](*v3, 0x1000C80F7F8B94BLL);
      MEMORY[0x1BCC95CEC](v3, 0x1020C40EDED9539);
    }
    v4 = v2[4];
    if (v4)
      MEMORY[0x1BCC95CEC](v4, 0x1000C4052888210);
    v5 = v2[5];
    if (v5)
      MEMORY[0x1BCC95CEC](v5, 0x1000C4052888210);
    JUMPOUT(0x1BCC95CECLL);
  }
  return result;
}

void AUMeisterStueck::~AUMeisterStueck(AUMeisterStueck *this)
{
  AUMeisterStueck::~AUMeisterStueck(this);
  JUMPOUT(0x1BCC95CECLL);
}

{
  uint64_t i;
  uint64_t v3;

  *(_QWORD *)this = &off_1E69D40E0;
  AUMeisterStueck::deletePhaseCompensators(this);
  AUDspLib::Cleanup(this);
  for (i = 4608; i != 2160; i -= 8)
  {
    v3 = *(_QWORD *)((char *)this + i);
    *(_QWORD *)((char *)this + i) = 0;
    if (v3)
      (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  }
  AUDspLib::~AUDspLib(this);
}

void AUMeisterStueck::Cleanup(AUMeisterStueck *this)
{
  AUMeisterStueck::deletePhaseCompensators(this);
  AUDspLib::Cleanup(this);
}

uint64_t AUMeisterStueck::Reset(AUMeisterStueck *this)
{
  uint64_t i;
  uint64_t v3;

  if (*((_BYTE *)this + 17))
  {
    for (i = 0; i != 2448; i += 8)
    {
      caulk::pooled_semaphore_mutex::_lock((AUMeisterStueck *)((char *)this + 1824));
      v3 = *(_QWORD *)((char *)this + i + 2168);
      if (v3)
        (*(void (**)(uint64_t))(*(_QWORD *)v3 + 152))(v3);
      caulk::pooled_semaphore_mutex::_unlock((AUMeisterStueck *)((char *)this + 1824));
    }
  }
  AUDspLib::Reset(this);
  return 0;
}

void sub_1B634F754(_Unwind_Exception *a1)
{
  caulk::pooled_semaphore_mutex *v1;

  caulk::pooled_semaphore_mutex::_unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t AUMeisterStueck::ProcessBufferLists(AUMeisterStueck *this, unsigned int *a2, const AudioBufferList *a3, AudioBufferList *a4, uint64_t a5)
{
  unint64_t v8;
  void **p_mData;
  void **i;
  unsigned int *v11;
  unint64_t v12;
  int v13;
  unint64_t v14;
  char v15;
  _DWORD *j;
  unsigned int *v17;
  unint64_t v18;
  _BOOL4 v19;
  unint64_t v20;
  int v21;
  char *v22;
  _DWORD *v23;
  _DWORD *v24;
  unint64_t v25;
  unsigned int k;
  int v27;
  uint64_t v28;
  AudioBufferList *v31;
  char v32;
  _QWORD v33[12];

  if (a3 != a4)
  {
    v8 = 0;
    p_mData = &a3->mBuffers[0].mData;
    for (i = &a4->mBuffers[0].mData; ; i += 2)
    {
      v11 = (unsigned int *)*((_QWORD *)this + 268);
      v12 = v11 == *((unsigned int **)this + 269) ? 0 : *v11;
      if (v8 >= v12)
        break;
      if (*p_mData != *i)
        memcpy(*i, *p_mData, 4 * a5);
      ++v8;
      p_mData += 2;
    }
  }
  if (!*((_BYTE *)this + 2113) && *((_DWORD *)this + 397) == 1)
  {
    v31 = (AudioBufferList *)((char *)this + 1824);
    v13 = caulk::pooled_semaphore_mutex::try_lock((AUMeisterStueck *)((char *)this + 1824));
    v32 = v13;
    if (v13)
    {
      v14 = 0;
      v15 = 0;
      for (j = (_DWORD *)((char *)this + 572); ; j += 14)
      {
        v17 = (unsigned int *)*((_QWORD *)this + 268);
        v18 = v17 == *((unsigned int **)this + 269) ? 0 : *v17;
        if (v14 >= v18)
          break;
        if (*(j - 1) != *j)
        {
          AUMeisterStueck::setPhaseCompensatorParameters((char *)this, v14, *(float **)(j - 7));
          v15 = 1;
        }
        ++v14;
      }
      if ((v15 & 1) != 0)
      {
        v19 = AUMeisterStueck::needPhaseCompensator(this);
        *((_BYTE *)this + 4616) = v19;
        if (!v19)
          goto LABEL_39;
LABEL_25:
        v20 = 0;
        v21 = 0;
        v22 = (char *)this + 2168;
        v23 = (_DWORD *)*((_QWORD *)this + 268);
        v24 = (_DWORD *)*((_QWORD *)this + 269);
        while (1)
        {
          v25 = v23 == v24 ? 0 : *v23;
          if (v20 >= v25)
            break;
          for (k = 0; ; ++k)
          {
            v27 = v23 == v24 ? 0 : *v23;
            v28 = v21 + k;
            if (k >= v27 - 1)
              break;
            if (*(_QWORD *)&v22[8 * v28])
            {
              DspLibBuffer::DspLibBuffer((DspLibBuffer *)v33, (float *)a4->mBuffers[v20].mData, a5, 1u, 0);
              (*(void (**)(_QWORD, _QWORD *))(**(_QWORD **)&v22[8 * v28] + 168))(*(_QWORD *)&v22[8 * v28], v33);
              DspLibBuffer::~DspLibBuffer((DspLibBuffer *)v33);
              v23 = (_DWORD *)*((_QWORD *)this + 268);
              v24 = (_DWORD *)*((_QWORD *)this + 269);
            }
          }
          ++v20;
          v21 += k;
        }
        goto LABEL_39;
      }
      if (*((_BYTE *)this + 4616))
        goto LABEL_25;
    }
LABEL_39:
    std::unique_lock<caulk::pooled_semaphore_mutex>::~unique_lock[abi:ne180100]((uint64_t)&v31);
  }
  v33[0] = a4;
  v31 = a4;
  return (*(uint64_t (**)(AUMeisterStueck *, unsigned int *, uint64_t, uint64_t, _QWORD *, uint64_t, AudioBufferList **))(*(_QWORD *)this + 184))(this, a2, a5, 1, v33, 1, &v31);
}

void sub_1B634F9C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  std::unique_lock<caulk::pooled_semaphore_mutex>::~unique_lock[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t AUMeisterStueck::Version(AUMeisterStueck *this)
{
  return 131328;
}

uint64_t AUMeisterStueck::createAlgorithms(AUMeisterStueck *this)
{
  unsigned int v2;
  _DWORD *v3;
  _DWORD *v4;
  unsigned int v5;
  unsigned int i;
  unsigned int v7;
  char *PhaseCompensatorRef;
  uint64_t *v9;
  DspLib::MeisterStueck::Algorithm *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t j;
  unint64_t v14;

  if (*((_DWORD *)this + 397) == 1)
  {
    v2 = 0;
    v3 = (_DWORD *)*((_QWORD *)this + 268);
    v4 = (_DWORD *)*((_QWORD *)this + 269);
    while (1)
    {
      v5 = v3 == v4 ? 0 : *v3;
      if (v2 >= v5)
        break;
      for (i = 0; ; ++i)
      {
        v7 = v3 == v4 ? 0 : *v3;
        if (i >= v7)
          break;
        PhaseCompensatorRef = AUMeisterStueck::getPhaseCompensatorRef(this, i, v2);
        if (PhaseCompensatorRef)
        {
          v9 = (uint64_t *)PhaseCompensatorRef;
          if (!*(_QWORD *)PhaseCompensatorRef)
          {
            v10 = (DspLib::MeisterStueck::Algorithm *)operator new();
            DspLib::MeisterStueck::Algorithm::Algorithm(v10, 1);
            v11 = *v9;
            *v9 = (uint64_t)v10;
            if (v11)
              (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
          }
        }
        v3 = (_DWORD *)*((_QWORD *)this + 268);
        v4 = (_DWORD *)*((_QWORD *)this + 269);
      }
      ++v2;
    }
    v12 = 0;
    for (j = 544; ; j += 56)
    {
      v14 = v3 == v4 ? 0 : *v3;
      if (v12 >= v14)
        break;
      AUMeisterStueck::setPhaseCompensatorParameters((char *)this, v12++, *(float **)((char *)this + j));
      v3 = (_DWORD *)*((_QWORD *)this + 268);
      v4 = (_DWORD *)*((_QWORD *)this + 269);
    }
    *((_BYTE *)this + 4616) = AUMeisterStueck::needPhaseCompensator(this);
  }
  AUDspLib::createAlgorithms(this);
  return 0;
}

void sub_1B634FB54(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1BCC95CEC](v1, 0x10E1C40E95DFBA8);
  _Unwind_Resume(a1);
}

uint64_t AUMeisterStueck::deleteAlgorithms(AUMeisterStueck *this)
{
  AUMeisterStueck::deletePhaseCompensators(this);
  AUDspLib::deleteAlgorithms(this);
  return 0;
}

DspLib::MeisterStueck::Algorithm *AUMeisterStueck::newDspLibAlgorithm(AUMeisterStueck *this)
{
  DspLib::MeisterStueck::Algorithm *v1;

  v1 = (DspLib::MeisterStueck::Algorithm *)operator new();
  DspLib::MeisterStueck::Algorithm::Algorithm(v1, 0);
  return v1;
}

void sub_1B634FBE4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1BCC95CEC](v1, 0x10E1C40E95DFBA8);
  _Unwind_Resume(a1);
}

uint64_t AUMeisterStueck::deletePhaseCompensators(AUMeisterStueck *this)
{
  caulk::pooled_semaphore_mutex *v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;

  v2 = (AUMeisterStueck *)((char *)this + 1824);
  caulk::pooled_semaphore_mutex::_lock((AUMeisterStueck *)((char *)this + 1824));
  v3 = 0;
  v4 = (char *)this + 2168;
  do
  {
    v5 = *(_QWORD *)&v4[v3];
    if (v5)
    {
      *(_QWORD *)&v4[v3] = 0;
      (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
    }
    v3 += 8;
  }
  while (v3 != 2448);
  return caulk::pooled_semaphore_mutex::_unlock(v2);
}

BOOL AUMeisterStueck::needPhaseCompensator(AUMeisterStueck *this)
{
  AUMeisterStueck *v1;
  char *v2;
  unint64_t v3;
  unsigned int *v4;
  unint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v10;
  int v11;
  uint64_t v12;

  v1 = this;
  v12 = *MEMORY[0x1E0C80C00];
  v10 = 0x6800000066;
  v11 = 106;
  v2 = (char *)this + 528;
  v3 = 1;
LABEL_2:
  v4 = (unsigned int *)*((_QWORD *)v1 + 268);
  if (v4 == *((unsigned int **)v1 + 269))
    v5 = 0;
  else
    v5 = *v4;
  if (v3 < v5)
  {
    v6 = 0;
    v7 = &v2[56 * v3 + 16];
    while (1)
    {
      LOBYTE(this) = DspLib::isEqual(this, *(float *)(*((_QWORD *)v1 + 68) + 4 * dword_1B665CC30[v6]), *(float *)(*(_QWORD *)v7 + 4 * dword_1B665CC30[v6]), 0.5);
      if ((this & 1) == 0)
        break;
      if (++v6 == 7)
      {
        v8 = 0;
        while (vcvtas_u32_f32(*(float *)(*((_QWORD *)v1 + 68) + 4 * *(unsigned int *)((char *)&v10 + v8)) * 0.5) == vcvtas_u32_f32(*(float *)(*(_QWORD *)v7 + 4 * *(unsigned int *)((char *)&v10 + v8)) * 0.5))
        {
          v8 += 4;
          if (v8 == 12)
          {
            ++v3;
            goto LABEL_2;
          }
        }
        return v3 < v5;
      }
    }
  }
  return v3 < v5;
}

char *AUMeisterStueck::setPhaseCompensatorParameters(char *this, unsigned int a2, float *a3)
{
  uint64_t v5;
  unsigned int i;
  _DWORD *v7;
  unsigned int v8;
  unint64_t v9;
  char *v10;

  v5 = (uint64_t)this;
  for (i = 0; ; ++i)
  {
    v7 = *(_DWORD **)(v5 + 2144);
    v8 = v7 == *(_DWORD **)(v5 + 2152) ? 0 : *v7;
    if (i >= v8)
      break;
    this = AUMeisterStueck::getPhaseCompensatorRef((AUMeisterStueck *)v5, i, a2);
    if (this)
    {
      v10 = this;
      this = *(char **)this;
      if (this)
      {
        LODWORD(v9) = *(_DWORD *)(v5 + 1812);
        (*(void (**)(char *, uint64_t, double))(*(_QWORD *)this + 16))(this, 1, (double)v9);
        this = (char *)(*(uint64_t (**)(_QWORD, float *, uint64_t))(**(_QWORD **)v10 + 144))(*(_QWORD *)v10, a3, 135);
      }
    }
  }
  return this;
}

char *AUMeisterStueck::getPhaseCompensatorRef(AUMeisterStueck *this, unsigned int a2, unsigned int a3)
{
  char *v3;
  _DWORD *v4;
  int v5;
  _DWORD *v6;
  int v7;
  unsigned int v9;

  if (a2 >= a3)
  {
    if (a2 <= a3)
      return 0;
    v3 = (char *)this + 2168;
    v6 = (_DWORD *)*((_QWORD *)this + 268);
    if (v6 == *((_DWORD **)this + 269))
      v7 = -1;
    else
      v7 = *v6 - 1;
    v9 = a3 + v7 * a2;
  }
  else
  {
    v3 = (char *)this + 2168;
    v4 = (_DWORD *)*((_QWORD *)this + 268);
    if (v4 == *((_DWORD **)this + 269))
      v5 = -1;
    else
      v5 = *v4 - 1;
    v9 = a3 + v5 * a2 - 1;
  }
  return &v3[8 * v9];
}

void AULoudnessWarrior::~AULoudnessWarrior(AULoudnessWarrior *this)
{
  AULoudnessWarrior::~AULoudnessWarrior(this);
  JUMPOUT(0x1BCC95CE0);
}

{
  void *v2;
  void *v3;
  void *v4;

  *(_QWORD *)this = &off_1E69D4838;
  CACFDictionary::~CACFDictionary((AULoudnessWarrior *)((char *)this + 2760));
  std::unique_ptr<AULoudnessWarriorKernel>::reset[abi:ne180100]((AULoudnessWarriorKernel **)this + 344, 0);
  *((_QWORD *)this + 80) = &off_1E69D4B38;
  ca::concurrent::deferred_deletion_queue<AULoudnessWarriorKernel,10ul,std::default_delete<AULoudnessWarriorKernel>>::~deferred_deletion_queue((uint64_t)this + 704);
  *(_QWORD *)this = off_1E69E6E50;
  v2 = (void *)*((_QWORD *)this + 76);
  if (v2)
  {
    *((_QWORD *)this + 77) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 73);
  if (v3)
  {
    *((_QWORD *)this + 74) = v3;
    operator delete(v3);
  }
  v4 = (void *)*((_QWORD *)this + 70);
  if (v4)
  {
    *((_QWORD *)this + 71) = v4;
    operator delete(v4);
  }
  if (*((char *)this + 551) < 0)
    operator delete(*((void **)this + 66));
  ausdk::AUBase::~AUBase(this);
}

uint64_t AULoudnessWarrior::Initialize(AULoudnessWarrior *this)
{
  NSObject *v2;
  int v3;
  int v4;
  uint64_t v5;
  unint64_t *v7;
  NSObject *v8;
  NSObject *v9;
  _BYTE v10[12];
  __int16 v11;
  int v12;
  __int16 v13;
  int v14;
  __int16 v15;
  int v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  if (AULoudnessWarriorLogScope(void)::once != -1)
    dispatch_once(&AULoudnessWarriorLogScope(void)::once, &__block_literal_global_9424);
  if (AULoudnessWarriorLogScope(void)::scope)
  {
    v2 = *(NSObject **)AULoudnessWarriorLogScope(void)::scope;
    if (!*(_QWORD *)AULoudnessWarriorLogScope(void)::scope)
      goto LABEL_9;
  }
  else
  {
    v2 = MEMORY[0x1E0C81028];
  }
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEBUG))
  {
    v3 = *(_DWORD *)(ausdk::AUScope::SafeGetElement((AULoudnessWarrior *)((char *)this + 80), 0) + 108);
    v4 = *(_DWORD *)(ausdk::AUScope::SafeGetElement((AULoudnessWarrior *)((char *)this + 128), 0) + 108);
    *(_DWORD *)v10 = 136315906;
    *(_QWORD *)&v10[4] = "AULoudnessWarrior.cpp";
    v11 = 1024;
    v12 = 233;
    v13 = 1024;
    v14 = v3;
    v15 = 1024;
    v16 = v4;
    _os_log_impl(&dword_1B5ED0000, v2, OS_LOG_TYPE_DEBUG, "%25s:%-5d Starting Initializing with %d ins, %d outs\n", v10, 0x1Eu);
  }
LABEL_9:
  v5 = AUJBase::Initialize(this);
  if ((_DWORD)v5)
    return v5;
  AULoudnessWarrior::CreateKernel((AULoudnessWarrior *)v10, this, (CFDictionaryRef *)this + 345);
  std::unique_ptr<AULoudnessWarriorKernel>::reset[abi:ne180100]((AULoudnessWarriorKernel **)this + 344, *(AULoudnessWarriorKernel **)v10);
  v7 = (unint64_t *)*((_QWORD *)this + 344);
  if (!v7)
  {
    if (AULoudnessWarriorLogScope(void)::once != -1)
      dispatch_once(&AULoudnessWarriorLogScope(void)::once, &__block_literal_global_9424);
    if (AULoudnessWarriorLogScope(void)::scope)
    {
      v8 = *(NSObject **)AULoudnessWarriorLogScope(void)::scope;
      if (!*(_QWORD *)AULoudnessWarriorLogScope(void)::scope)
      {
LABEL_21:
        v5 = 4294956421;
        goto LABEL_22;
      }
    }
    else
    {
      v8 = MEMORY[0x1E0C81028];
    }
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)v10 = 136315394;
      *(_QWORD *)&v10[4] = "AULoudnessWarrior.cpp";
      v11 = 1024;
      v12 = 245;
      _os_log_impl(&dword_1B5ED0000, v8, OS_LOG_TYPE_ERROR, "%25s:%-5d Could not initilize kernel\n", v10, 0x12u);
    }
    goto LABEL_21;
  }
  v5 = 0;
  atomic_store(*v7, (unint64_t *)this + 348);
LABEL_22:
  ausdk::AUBase::SetAFactoryPresetAsCurrent((char *)this, &kAuPresets);
  (*(void (**)(AULoudnessWarrior *, _QWORD, _QWORD))(*(_QWORD *)this + 72))(this, 0, 0);
  if (AULoudnessWarriorLogScope(void)::once != -1)
    dispatch_once(&AULoudnessWarriorLogScope(void)::once, &__block_literal_global_9424);
  if (AULoudnessWarriorLogScope(void)::scope)
  {
    v9 = *(NSObject **)AULoudnessWarriorLogScope(void)::scope;
    if (!*(_QWORD *)AULoudnessWarriorLogScope(void)::scope)
      return v5;
  }
  else
  {
    v9 = MEMORY[0x1E0C81028];
  }
  if (os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)v10 = 136315394;
    *(_QWORD *)&v10[4] = "AULoudnessWarrior.cpp";
    v11 = 1024;
    v12 = 268;
    _os_log_impl(&dword_1B5ED0000, v9, OS_LOG_TYPE_DEBUG, "%25s:%-5d End Initialize()", v10, 0x12u);
  }
  return v5;
}

uint64_t AULoudnessWarrior::Reset(AULoudnessWarrior *this)
{
  _QWORD *v1;
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v4;

  v1 = (_QWORD *)*((_QWORD *)this + 344);
  if (v1)
  {
    v2 = (uint64_t *)v1[1];
    v3 = (uint64_t *)v1[2];
    while (v2 != v3)
    {
      v4 = *v2++;
      *(_DWORD *)(*(_QWORD *)(v4 + 72) + 28) = 0;
      DspLib::Biquad::SetupWrapper::reset((DspLib::Biquad::SetupWrapper *)(v4 + 48));
    }
    DspLib::Biquad::SetupWrapper::reset((DspLib::Biquad::SetupWrapper *)(v1 + 47));
  }
  return 0;
}

uint64_t AULoudnessWarrior::GetPropertyInfo(AULoudnessWarrior *this, int a2, int a3, int a4, unsigned int *a5, BOOL *a6)
{
  NSObject *v12;
  unsigned int v13;
  uint64_t result;
  int v15;
  const char *v16;
  __int16 v17;
  int v18;
  __int16 v19;
  int v20;
  __int16 v21;
  int v22;
  __int16 v23;
  int v24;
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  if (AULoudnessWarriorLogScope(void)::once != -1)
    dispatch_once(&AULoudnessWarriorLogScope(void)::once, &__block_literal_global_9424);
  if (AULoudnessWarriorLogScope(void)::scope)
  {
    v12 = *(NSObject **)AULoudnessWarriorLogScope(void)::scope;
    if (!*(_QWORD *)AULoudnessWarriorLogScope(void)::scope)
      goto LABEL_9;
  }
  else
  {
    v12 = MEMORY[0x1E0C81028];
  }
  if (os_log_type_enabled(v12, OS_LOG_TYPE_DEBUG))
  {
    v15 = 136316162;
    v16 = "AULoudnessWarrior.cpp";
    v17 = 1024;
    v18 = 376;
    v19 = 1024;
    v20 = a2;
    v21 = 1024;
    v22 = a3;
    v23 = 1024;
    v24 = a4;
    _os_log_impl(&dword_1B5ED0000, v12, OS_LOG_TYPE_DEBUG, "%25s:%-5d GetPropertyInfo ID=%d scope=%d bus=%d\n", (uint8_t *)&v15, 0x24u);
  }
LABEL_9:
  if (a2 == 8900 && !a3)
  {
    v13 = 8;
LABEL_16:
    result = 0;
    *a6 = 1;
    *a5 = v13;
    return result;
  }
  result = 4294956417;
  if (a2 == 21 && !a3)
  {
    if (!(*(unsigned int (**)(AULoudnessWarrior *))(*(_QWORD *)this + 600))(this))
      return 4294956417;
    v13 = 4;
    goto LABEL_16;
  }
  return result;
}

uint64_t AULoudnessWarrior::GetProperty(AULoudnessWarrior *this, int a2, int a3, int a4, _DWORD *a5)
{
  NSObject *v10;
  const void *v11;
  uint64_t v12;
  uint64_t result;
  int v14;
  const char *v15;
  __int16 v16;
  int v17;
  __int16 v18;
  int v19;
  __int16 v20;
  int v21;
  __int16 v22;
  int v23;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  if (AULoudnessWarriorLogScope(void)::once != -1)
    dispatch_once(&AULoudnessWarriorLogScope(void)::once, &__block_literal_global_9424);
  if (AULoudnessWarriorLogScope(void)::scope)
  {
    v10 = *(NSObject **)AULoudnessWarriorLogScope(void)::scope;
    if (!*(_QWORD *)AULoudnessWarriorLogScope(void)::scope)
      goto LABEL_9;
  }
  else
  {
    v10 = MEMORY[0x1E0C81028];
  }
  if (os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG))
  {
    v14 = 136316162;
    v15 = "AULoudnessWarrior.cpp";
    v16 = 1024;
    v17 = 403;
    v18 = 1024;
    v19 = a2;
    v20 = 1024;
    v21 = a3;
    v22 = 1024;
    v23 = a4;
    _os_log_impl(&dword_1B5ED0000, v10, OS_LOG_TYPE_DEBUG, "%25s:%-5d GetProperty ID=%d scope=%d bus=%d\n", (uint8_t *)&v14, 0x24u);
  }
LABEL_9:
  if (a2 != 8900 || a3)
  {
    result = 4294956417;
    if (a2 == 21 && !a3)
    {
      if ((*(unsigned int (**)(AULoudnessWarrior *))(*(_QWORD *)this + 600))(this))
      {
        result = 0;
        *a5 = *((unsigned __int8 *)this + 552);
      }
      else
      {
        return 4294956417;
      }
    }
  }
  else
  {
    v11 = (const void *)*((_QWORD *)this + 345);
    if (v11)
    {
      CFRetain(v11);
      v12 = *((_QWORD *)this + 345);
    }
    else
    {
      v12 = 0;
    }
    result = 0;
    *(_QWORD *)a5 = v12;
  }
  return result;
}

uint64_t AULoudnessWarrior::SetProperty(AULoudnessWarrior *this, int a2, int a3, uint64_t a4, const void **a5, int a6)
{
  NSObject *v12;
  int v14;
  unsigned __int8 v15;
  unsigned __int8 *v16;
  AULoudnessWarriorKernel *v17;
  _BOOL4 v18;
  uint64_t v19;
  NSObject *v20;
  NSObject *v21;
  NSObject *v22;
  uint64_t v23;
  AULoudnessWarriorKernel *v24;
  AULoudnessWarriorKernel *v25;
  _BYTE buf[12];
  __int16 v27;
  int v28;
  __int16 v29;
  int v30;
  __int16 v31;
  int v32;
  __int16 v33;
  int v34;
  uint64_t v35;

  v35 = *MEMORY[0x1E0C80C00];
  if (AULoudnessWarriorLogScope(void)::once != -1)
    dispatch_once(&AULoudnessWarriorLogScope(void)::once, &__block_literal_global_9424);
  if (AULoudnessWarriorLogScope(void)::scope)
  {
    v12 = *(NSObject **)AULoudnessWarriorLogScope(void)::scope;
    if (!*(_QWORD *)AULoudnessWarriorLogScope(void)::scope)
      goto LABEL_9;
  }
  else
  {
    v12 = MEMORY[0x1E0C81028];
  }
  if (os_log_type_enabled(v12, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 136316162;
    *(_QWORD *)&buf[4] = "AULoudnessWarrior.cpp";
    v27 = 1024;
    v28 = 428;
    v29 = 1024;
    v30 = a2;
    v31 = 1024;
    v32 = a3;
    v33 = 1024;
    v34 = a4;
    _os_log_impl(&dword_1B5ED0000, v12, OS_LOG_TYPE_DEBUG, "%25s:%-5d SetProperty ID=%d scope=%d bus=%d\n", buf, 0x24u);
  }
LABEL_9:
  if (a3)
    return 4294956417;
  if (a2 != 8900)
  {
    if (a2 != 21)
      return 4294956417;
    if (a6 == 4)
    {
      v14 = *(_DWORD *)a5;
      if ((*(_DWORD *)a5 != 0) != (*((_BYTE *)this + 552) != 0))
      {
        v15 = atomic_load((unsigned __int8 *)this + 2792);
        if ((v15 & 1) == 0)
        {
          if (!v14 && *((_BYTE *)this + 552))
          {
            if (*((_BYTE *)this + 17))
              (*(void (**)(AULoudnessWarrior *, _QWORD, _QWORD))(*(_QWORD *)this + 72))(this, 0, 0);
          }
          (*(void (**)(AULoudnessWarrior *, BOOL))(*(_QWORD *)this + 608))(this, v14 != 0);
        }
      }
      return 0;
    }
    return 4294956445;
  }
  if (!*((_BYTE *)this + 17))
  {
    CACFDictionary::operator=((uint64_t)this + 2760, *a5);
    return 0;
  }
  *(_QWORD *)buf = *a5;
  *(_WORD *)&buf[8] = 0;
  AULoudnessWarrior::CreateKernel((AULoudnessWarrior *)&v24, this, (CFDictionaryRef *)buf);
  CACFDictionary::~CACFDictionary((CACFDictionary *)buf);
  if (!v24)
  {
    if (AULoudnessWarriorLogScope(void)::once != -1)
      dispatch_once(&AULoudnessWarriorLogScope(void)::once, &__block_literal_global_9424);
    if (AULoudnessWarriorLogScope(void)::scope)
    {
      v21 = *(NSObject **)AULoudnessWarriorLogScope(void)::scope;
      if (!*(_QWORD *)AULoudnessWarriorLogScope(void)::scope)
        return 4294956445;
    }
    else
    {
      v21 = MEMORY[0x1E0C81028];
    }
    if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      *(_QWORD *)&buf[4] = "AULoudnessWarrior.cpp";
      v27 = 1024;
      v28 = 469;
      _os_log_impl(&dword_1B5ED0000, v21, OS_LOG_TYPE_ERROR, "%25s:%-5d Could not create staged kernel!\n", buf, 0x12u);
    }
    return 4294956445;
  }
  v25 = 0;
  while (ca::concurrent::deferred_deletion_queue<AULoudnessWarriorKernel,10ul,std::default_delete<AULoudnessWarriorKernel>>::pop((uint64_t)this + 704, &v25));
  v16 = (unsigned __int8 *)this + 2689;
  do
    __ldaxr(v16);
  while (__stlxr(1u, v16));
  v17 = v24;
  *(_QWORD *)buf = v24;
  v18 = boost::lockfree::queue<std::vector<std::vector<float>> *,boost::lockfree::capacity<10ul>>::do_push<false>((uint64_t)this + 768, buf);
  if (v18)
  {
    v17 = 0;
    v24 = 0;
  }
  ca::concurrent::deferred_deletion_queue<AULoudnessWarriorKernel,10ul,std::default_delete<AULoudnessWarriorKernel>>::drain_trash((uint64_t)this + 704);
  if (v25)
  {
    AULoudnessWarriorKernel::~AULoudnessWarriorKernel(v25);
    MEMORY[0x1BCC95CEC](v19);
  }
  if (v18)
  {
    CACFDictionary::operator=((uint64_t)this + 2760, *a5);
    (*(void (**)(AULoudnessWarrior *, uint64_t, _QWORD, uint64_t))(*(_QWORD *)this + 432))(this, 8900, 0, a4);
    if (AULoudnessWarriorLogScope(void)::once != -1)
      dispatch_once(&AULoudnessWarriorLogScope(void)::once, &__block_literal_global_9424);
    if (AULoudnessWarriorLogScope(void)::scope)
    {
      v20 = *(NSObject **)AULoudnessWarriorLogScope(void)::scope;
      if (!*(_QWORD *)AULoudnessWarriorLogScope(void)::scope)
      {
LABEL_56:
        LOBYTE(v22) = 1;
        goto LABEL_57;
      }
    }
    else
    {
      v20 = MEMORY[0x1E0C81028];
    }
    if (os_log_type_enabled(v20, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 136315394;
      *(_QWORD *)&buf[4] = "AULoudnessWarrior.cpp";
      v27 = 1024;
      v28 = 461;
      _os_log_impl(&dword_1B5ED0000, v20, OS_LOG_TYPE_DEBUG, "%25s:%-5d Changed config plist successfully\n", buf, 0x12u);
    }
    goto LABEL_56;
  }
  if (AULoudnessWarriorLogScope(void)::once != -1)
    dispatch_once(&AULoudnessWarriorLogScope(void)::once, &__block_literal_global_9424);
  if (AULoudnessWarriorLogScope(void)::scope)
  {
    v22 = *(NSObject **)AULoudnessWarriorLogScope(void)::scope;
    if (!*(_QWORD *)AULoudnessWarriorLogScope(void)::scope)
      goto LABEL_57;
  }
  else
  {
    v22 = MEMORY[0x1E0C81028];
  }
  if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 136315394;
    *(_QWORD *)&buf[4] = "AULoudnessWarrior.cpp";
    v27 = 1024;
    v28 = 464;
    _os_log_impl(&dword_1B5ED0000, v22, OS_LOG_TYPE_ERROR, "%25s:%-5d Could not queue staged kernel!\n", buf, 0x12u);
  }
  LOBYTE(v22) = 0;
LABEL_57:
  v24 = 0;
  if (v17)
  {
    AULoudnessWarriorKernel::~AULoudnessWarriorKernel(v17);
    MEMORY[0x1BCC95CEC](v23);
    if ((v22 & 1) != 0)
      return 0;
  }
  else if ((v22 & 1) != 0)
  {
    return 0;
  }
  return 4294956433;
}

void sub_1B6350AC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, AULoudnessWarriorKernel *a9)
{
  std::unique_ptr<AULoudnessWarriorKernel>::reset[abi:ne180100](&a9, 0);
  _Unwind_Resume(a1);
}

uint64_t AULoudnessWarrior::SetParameter(AULoudnessWarrior *this, uint64_t a2, uint64_t a3, uint64_t a4, float a5)
{
  atomic_store(1u, (unsigned __int8 *)this + 2776);
  AUJBase::SetParameter(this, a2, a3, a4, a5);
  return 0;
}

uint64_t AULoudnessWarrior::CanScheduleParameters(AULoudnessWarrior *this)
{
  return 0;
}

uint64_t AULoudnessWarrior::ProcessBufferLists(AULoudnessWarrior *this, unsigned int *a2, const AudioBufferList *a3, AudioBufferList *a4, uint64_t a5)
{
  AULoudnessWarriorKernel **v8;
  char *v9;
  _BOOL8 v10;
  uint64_t mNumberBuffers;
  uint64_t v12;
  const void **v13;
  size_t v14;
  uint64_t v15;
  void **v16;
  void **p_mData;
  void **v18;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t v21;
  void *v22;
  void *v23;
  size_t v24;
  void *v25;
  void *v26;
  const void *v27;
  unsigned __int8 *v28;
  unsigned __int8 v29;
  _QWORD *v30;
  uint64_t v31;
  float v32;
  float v33;
  AULoudnessWarriorKernel *v34;
  uint64_t v35;
  unint64_t v36;
  vDSP_Length v37;
  uint64_t v38;
  float *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  int v45;
  float *v46;
  vDSP_Length v47;
  float v48;
  uint64_t v49;
  float v50;
  float v51;
  float *v52;
  vDSP_Length v53;
  uint64_t v54;
  float v55;
  uint64_t v56;
  uint64_t v57;
  float v58;
  unsigned int v59;
  uint64_t v60;
  uint64_t v61;
  float v62;
  float v63;
  uint64_t v64;
  unint64_t v65;
  uint64_t v66;
  __int128 v67;
  float v68;
  uint64_t v69;
  unint64_t v70;
  uint64_t v71;
  __int128 v72;
  uint64_t v73;
  AULoudnessWarriorKernel *v74;
  AULoudnessWarrior *v75;
  uint64_t v76;
  ausdk::AUElement *v77;
  ausdk::AUElement **v78;
  uint64_t v79;
  ausdk::AUElement *v80;
  ausdk::AUElement **v81;
  uint64_t v82;
  ausdk::AUElement *v83;
  ausdk::AUElement **v84;
  uint64_t v85;
  ausdk::AUElement *v86;
  ausdk::AUElement **v87;
  uint64_t v88;
  ausdk::AUElement *v89;
  ausdk::AUElement **v90;
  uint64_t v91;
  ausdk::AUElement *v92;
  ausdk::AUElement **v93;
  uint64_t v94;
  ausdk::AUElement *v95;
  ausdk::AUElement **v96;
  uint64_t v97;
  ausdk::AUElement *v98;
  ausdk::AUElement **v99;
  uint64_t v101;
  AULoudnessWarriorKernel **v102;
  float **v103;
  AULoudnessWarrior *v104;
  uint64_t v105;
  uint64_t v106;
  __int128 v107;
  vDSP_Length v108;
  float v109;
  float v110;
  float __B;
  float **v112;
  uint64_t v113;
  vDSP_Length v114;
  float __A;
  uint64_t v116;

  v106 = a5;
  v116 = *MEMORY[0x1E0C80C00];
  v8 = (AULoudnessWarriorKernel **)((char *)this + 2752);
  v9 = (char *)this + 704;
  do
    v10 = ca::concurrent::deferred_deletion_queue<AULoudnessWarriorKernel,10ul,std::default_delete<AULoudnessWarriorKernel>>::pop((uint64_t)v9, v8);
  while (v10);
  atomic_store(**((_QWORD **)this + 344), (unint64_t *)this + 348);
  mNumberBuffers = a4->mNumberBuffers;
  if (a3->mNumberBuffers != (_DWORD)mNumberBuffers)
    __assert_rtn("ProcessBufferLists", "AULoudnessWarrior.cpp", 571, "inBuffer.mNumberBuffers == outBuffer.mNumberBuffers");
  MEMORY[0x1E0C80A78](v10);
  v12 = (8 * mNumberBuffers + 15) & 0xFFFFFFFF0;
  v13 = (const void **)((char *)&v101 - v12);
  if ((unint64_t)(8 * mNumberBuffers) >= 0x200)
    v14 = 512;
  else
    v14 = 8 * mNumberBuffers;
  bzero((char *)&v101 - v12, v14);
  MEMORY[0x1E0C80A78](v15);
  v16 = (void **)((char *)&v101 - v12);
  bzero((char *)&v101 - v12, v14);
  if ((_DWORD)mNumberBuffers)
  {
    p_mData = &a4->mBuffers[0].mData;
    v18 = &a3->mBuffers[0].mData;
    v19 = (uint64_t *)((char *)&v101 - v12);
    v20 = (uint64_t *)((char *)&v101 - v12);
    v21 = mNumberBuffers;
    do
    {
      v22 = *v18;
      v18 += 2;
      *v19++ = v22;
      v23 = *p_mData;
      p_mData += 2;
      *v20++ = v23;
      --v21;
    }
    while (v21);
    if (*((_BYTE *)this + 552))
    {
      v24 = 4 * v106;
      do
      {
        v26 = *v16++;
        v25 = v26;
        v27 = *v13++;
        memcpy(v25, v27, v24);
        --mNumberBuffers;
      }
      while (mNumberBuffers);
      return 0;
    }
  }
  else if (*((_BYTE *)this + 552))
  {
    return 0;
  }
  v28 = (unsigned __int8 *)this + 2776;
  do
    v29 = __ldaxr(v28);
  while (__stlxr(0, v28));
  v103 = (float **)((char *)&v101 - v12);
  if ((v29 & 1) != 0)
  {
    v30 = (_QWORD *)*((_QWORD *)this + 344);
    AULoudnessWarrior::GetParameterBlock((AULoudnessWarrior *)&v107, (uint64_t)this);
    AULoudnessWarriorKernel::SetMeterValues(v30, (uint64_t)&v107);
    v31 = *((_QWORD *)this + 344);
    LODWORD(v107) = 0;
    (*(void (**)(AULoudnessWarrior *, _QWORD, _QWORD, _QWORD, __int128 *))(*(_QWORD *)this + 144))(this, 0, 0, 0, &v107);
    v32 = *(float *)&v107;
    LODWORD(v107) = 0;
    (*(void (**)(AULoudnessWarrior *, uint64_t, _QWORD, _QWORD, __int128 *))(*(_QWORD *)this + 144))(this, 1, 0, 0, &v107);
    v33 = *(float *)&v107;
    LODWORD(v107) = 0;
    (*(void (**)(AULoudnessWarrior *, uint64_t, _QWORD, _QWORD, __int128 *))(*(_QWORD *)this + 144))(this, 2, 0, 0, &v107);
    *(float *)(v31 + 400) = (float)(v32 + v33) - *(float *)&v107;
  }
  v104 = this;
  v34 = *v8;
  *((_DWORD *)v34 + 103) = 0;
  *((_DWORD *)v34 + 101) = 0;
  v35 = *((_QWORD *)v34 + 1);
  if (*((_QWORD *)v34 + 2) != v35)
  {
    v102 = v8;
    v36 = 0;
    v105 = (v106 - 1);
    v37 = v106;
    while (((*(_QWORD *)(*((_QWORD *)v34 + 7) + ((v36 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v36) & 1) == 0)
    {
LABEL_49:
      ++v36;
      v35 = *((_QWORD *)v34 + 1);
      if (v36 >= (*((_QWORD *)v34 + 2) - v35) >> 3)
      {
        v62 = *((float *)v34 + 103);
        v8 = v102;
        goto LABEL_52;
      }
    }
    v38 = *((_QWORD *)v34 + 4) + 24 * v36;
    v39 = *(float **)v38;
    if (v37 > (uint64_t)(*(_QWORD *)(v38 + 8) - *(_QWORD *)v38) >> 2)
      __assert_rtn("ProcessMeters", "AULoudnessWarrior.cpp", 899, "numFrames <= mMeterOutputBuffers[i].size()");
    v40 = *(_QWORD *)(v35 + 8 * v36);
    if (v37 > (uint64_t)(*(_QWORD *)(*(_QWORD *)(v40 + 80) + 8) - **(_QWORD **)(v40 + 80)) >> 2)
      __assert_rtn("Process", "Meter.cpp", 66, "numFrames <= mWeightingFilterOutputBuffers[0].size()");
    __A = 0.0;
    vDSP_vfill(&__A, v39, 1, v37);
    v41 = *(unsigned int *)(v40 + 232);
    *(_QWORD *)&v107 = v13;
    *((_QWORD *)&v107 + 1) = v41;
    v108 = v37;
    v112 = *(float ***)(v40 + 104);
    v113 = v41;
    v114 = v37;
    DspLib::Biquad::Filter::process((_QWORD *)v40, (uint64_t)&v107, &v112);
    if (*(_DWORD *)(v40 + 232))
    {
      v42 = 0;
      v43 = 0;
      do
      {
        vDSP_vsq(*(const float **)(*(_QWORD *)(v40 + 104) + 8 * v43), 1, *(float **)(v40 + 176), 1, v37);
        vDSP_vsmul(*(const float **)(v40 + 176), 1, (const float *)(*(_QWORD *)(v40 + 200) + v42), *(float **)(v40 + 176), 1, v37);
        vDSP_vadd(*(const float **)(v40 + 176), 1, v39, 1, v39, 1, v37);
        ++v43;
        v42 += 4;
      }
      while (v43 < *(unsigned int *)(v40 + 232));
    }
    v44 = *(_QWORD *)(v40 + 72);
    v45 = *(_DWORD *)(v44 + 20);
    if (v45)
    {
      if (v45 == 1)
      {
        vDSP_vsq(v39, 1, v39, 1, v37);
      }
      else if (v45 == 3)
      {
        if ((_DWORD)v106)
        {
          v46 = v39;
          v47 = v37;
          do
          {
            v48 = *(float *)(v44 + 28);
            if (*v46 <= v48)
              v49 = 8;
            else
              v49 = 4;
            v50 = v48 + (float)(*(float *)(v44 + v49) * (float)(*v46 - v48));
            *(float *)(v44 + 28) = v50;
            *v46++ = v50;
            --v47;
          }
          while (v47);
        }
LABEL_45:
        __B = 1.0e-10;
        vDSP_vsadd(v39, 1, &__B, v39, 1, v37);
        v110 = 1.0;
        vDSP_vdbcon(v39, 1, &v110, v39, 1, v37, 0);
        if (!*(_DWORD *)(v40 + 224))
        {
          v109 = -0.691;
          vDSP_vsadd(v39, 1, &v109, v39, 1, v37);
        }
        v55 = *(float *)(*(_QWORD *)(*((_QWORD *)v34 + 4) + 24 * v36) + 4 * v105);
        v56 = *((_QWORD *)v34 + 19);
        *(float *)(v56 + 4 * v36) = v55;
        v57 = *((_QWORD *)v34 + 10);
        v58 = *(float *)(v57 + 4 * v36);
        if (v55 >= v58)
        {
          v59 = *(_DWORD *)(*((_QWORD *)v34 + 22) + 4 * v36);
          v60 = *((_QWORD *)v34 + 13);
          v61 = *((_QWORD *)v34 + 16);
          *((float *)v34 + 103) = *((float *)v34 + 103)
                                + (float)((float)(v59 & 1)
                                        * (float)(*(float *)(v61 + 4 * v36)
                                                + (float)(*(float *)(v60 + 4 * v36) * (float)(v55 - v58))));
          *((float *)v34 + 101) = *((float *)v34 + 101)
                                + (float)((float)((v59 >> 1) & 1)
                                        * (float)(*(float *)(v61 + 4 * v36)
                                                + (float)(*(float *)(v60 + 4 * v36)
                                                        * (float)(*(float *)(v56 + 4 * v36) - *(float *)(v57 + 4 * v36)))));
        }
        goto LABEL_49;
      }
    }
    else
    {
      vDSP_vabs(v39, 1, v39, 1, v37);
    }
    if ((_DWORD)v106)
    {
      v51 = *(float *)(v44 + 28);
      v52 = v39;
      v53 = v37;
      do
      {
        if (*v52 <= v51)
          v54 = 8;
        else
          v54 = 4;
        v51 = *v52 + (float)(*(float *)(v44 + v54) * (float)(v51 - *v52));
        *v52++ = v51;
        *(float *)(v44 + 28) = v51;
        --v53;
      }
      while (v53);
    }
    goto LABEL_45;
  }
  v62 = 0.0;
LABEL_52:
  v63 = *((float *)v34 + 100) + v62;
  *((float *)v34 + 104) = v63;
  BiquadInterpolator::GetCoefficientsAtPosition(*((_QWORD *)v34 + 32), *((float **)v34 + 29), *((_QWORD *)v34 + 30), v63);
  if (*((_DWORD *)v34 + 50))
  {
    v64 = 0;
    v65 = 0;
    do
    {
      DspLib::Biquad::read(v64 + *((_QWORD *)v34 + 29), (uint64_t)&v107);
      v66 = *((_QWORD *)v34 + 26) + v64;
      v67 = v107;
      *(_DWORD *)(v66 + 16) = v108;
      *(_OWORD *)v66 = v67;
      ++v65;
      v64 += 20;
    }
    while (v65 < *((unsigned int *)v34 + 50));
  }
  DspLib::Biquad::Filter::setCoefficients((uint64_t)v34 + 328, *((_QWORD *)v34 + 26), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*((_QWORD *)v34 + 27) - *((_QWORD *)v34 + 26)) >> 2), 0, 0x41uLL);
  v68 = *((float *)v34 + 100) + *((float *)v34 + 101);
  *((float *)v34 + 102) = v68;
  BiquadInterpolator::GetCoefficientsAtPosition(*((_QWORD *)v34 + 40), *((float **)v34 + 37), *((_QWORD *)v34 + 38), v68);
  if (*((_DWORD *)v34 + 66))
  {
    v69 = 0;
    v70 = 0;
    do
    {
      DspLib::Biquad::read(v69 + *((_QWORD *)v34 + 37), (uint64_t)&v107);
      v71 = *((_QWORD *)v34 + 34) + v69;
      v72 = v107;
      *(_DWORD *)(v71 + 16) = v108;
      *(_OWORD *)v71 = v72;
      ++v70;
      v69 += 20;
    }
    while (v70 < *((unsigned int *)v34 + 66));
  }
  DspLib::Biquad::Filter::setCoefficients((uint64_t)v34 + 328, *((_QWORD *)v34 + 34), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*((_QWORD *)v34 + 35) - *((_QWORD *)v34 + 34)) >> 2), *((unsigned int *)v34 + 50), 0x41uLL);
  v73 = *((_QWORD *)v34 + 47);
  *(_QWORD *)&v107 = v13;
  *((_QWORD *)&v107 + 1) = v73;
  v108 = v106;
  v112 = v103;
  v113 = v73;
  v114 = v106;
  DspLib::Biquad::Filter::process((_QWORD *)v34 + 41, (uint64_t)&v107, &v112);
  v74 = *v8;
  v75 = v104;
  if (*v8)
  {
    v76 = *((_QWORD *)v104 + 9);
    if (v76)
    {
      v77 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v76 + 32))(v76, 0);
      v74 = *v8;
    }
    else
    {
      v78 = (ausdk::AUElement **)*((_QWORD *)v104 + 6);
      if (*((ausdk::AUElement ***)v104 + 7) == v78)
        v77 = 0;
      else
        v77 = *v78;
    }
    ausdk::AUElement::SetParameter(v77, 4u, *((float *)v74 + 103), 0);
    v79 = *((_QWORD *)v75 + 9);
    if (v79)
    {
      v80 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v79 + 32))(v79, 0);
    }
    else
    {
      v81 = (ausdk::AUElement **)*((_QWORD *)v75 + 6);
      if (*((ausdk::AUElement ***)v75 + 7) == v81)
        v80 = 0;
      else
        v80 = *v81;
    }
    ausdk::AUElement::SetParameter(v80, 6u, *(float *)(*((_QWORD *)v75 + 344) + 404), 0);
    v82 = *((_QWORD *)v75 + 9);
    if (v82)
    {
      v83 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v82 + 32))(v82, 0);
    }
    else
    {
      v84 = (ausdk::AUElement **)*((_QWORD *)v75 + 6);
      if (*((ausdk::AUElement ***)v75 + 7) == v84)
        v83 = 0;
      else
        v83 = *v84;
    }
    ausdk::AUElement::SetParameter(v83, 0xEu, **(float **)(*((_QWORD *)v75 + 344) + 152), 0);
    v85 = *((_QWORD *)v75 + 9);
    if (v85)
    {
      v86 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v85 + 32))(v85, 0);
    }
    else
    {
      v87 = (ausdk::AUElement **)*((_QWORD *)v75 + 6);
      if (*((ausdk::AUElement ***)v75 + 7) == v87)
        v86 = 0;
      else
        v86 = *v87;
    }
    ausdk::AUElement::SetParameter(v86, 0x19u, *(float *)(*(_QWORD *)(*((_QWORD *)v75 + 344) + 152) + 4), 0);
    v88 = *((_QWORD *)v75 + 9);
    if (v88)
    {
      v89 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v88 + 32))(v88, 0);
    }
    else
    {
      v90 = (ausdk::AUElement **)*((_QWORD *)v75 + 6);
      if (*((ausdk::AUElement ***)v75 + 7) == v90)
        v89 = 0;
      else
        v89 = *v90;
    }
    ausdk::AUElement::SetParameter(v89, 0x24u, *(float *)(*(_QWORD *)(*((_QWORD *)v75 + 344) + 152) + 8), 0);
    v91 = *((_QWORD *)v75 + 9);
    if (v91)
    {
      v92 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v91 + 32))(v91, 0);
    }
    else
    {
      v93 = (ausdk::AUElement **)*((_QWORD *)v75 + 6);
      if (*((ausdk::AUElement ***)v75 + 7) == v93)
        v92 = 0;
      else
        v92 = *v93;
    }
    ausdk::AUElement::SetParameter(v92, 5u, *(float *)(*((_QWORD *)v75 + 344) + 416), 0);
    v94 = *((_QWORD *)v75 + 9);
    if (v94)
    {
      v95 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v94 + 32))(v94, 0);
    }
    else
    {
      v96 = (ausdk::AUElement **)*((_QWORD *)v75 + 6);
      if (*((ausdk::AUElement ***)v75 + 7) == v96)
        v95 = 0;
      else
        v95 = *v96;
    }
    ausdk::AUElement::SetParameter(v95, 7u, *(float *)(*((_QWORD *)v75 + 344) + 408), 0);
    v97 = *((_QWORD *)v75 + 9);
    if (v97)
    {
      v98 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v97 + 32))(v97, 0);
    }
    else
    {
      v99 = (ausdk::AUElement **)*((_QWORD *)v75 + 6);
      if (*((ausdk::AUElement ***)v75 + 7) == v99)
        v98 = 0;
      else
        v98 = *v99;
    }
    ausdk::AUElement::SetParameter(v98, 3u, *((float *)*v8 + 100), 0);
  }
  return 0;
}

uint64_t AULoudnessWarrior::ProcessMultipleBufferLists(AULoudnessWarrior *this, unsigned int *a2, uint64_t a3, int a4, const AudioBufferList **a5, int a6, AudioBufferList **a7)
{
  if (a4 == 1 && a6 == 1)
    return (*(uint64_t (**)(AULoudnessWarrior *, unsigned int *, _QWORD, _QWORD, uint64_t))(*(_QWORD *)this + 176))(this, a2, *a5, *a7, a3);
  else
    return 4294956428;
}

__n128 AULoudnessWarrior::GetParameterInfo(AULoudnessWarrior *this, int a2, int a3, AudioUnitParameterInfo *a4)
{
  int *v4;
  uint64_t v5;
  __int128 v6;
  __int128 v7;
  __n128 result;
  __int128 v9;
  __int128 v10;

  if (!a2)
  {
    v4 = &gLWParams;
    v5 = 4592;
    while (*v4 != a3)
    {
      v4 += 28;
      v5 -= 112;
      if (!v5)
        return result;
    }
    v6 = *(_OWORD *)(v4 + 2);
    v7 = *(_OWORD *)(v4 + 10);
    *(_OWORD *)&a4->name[16] = *(_OWORD *)(v4 + 6);
    *(_OWORD *)&a4->name[32] = v7;
    *(_OWORD *)a4->name = v6;
    result = *(__n128 *)(v4 + 14);
    v9 = *(_OWORD *)(v4 + 18);
    v10 = *(_OWORD *)(v4 + 22);
    *(_QWORD *)&a4->flags = *((_QWORD *)v4 + 13);
    *(_OWORD *)&a4->clumpID = v9;
    *(_OWORD *)&a4->unit = v10;
    *(__n128 *)&a4->name[48] = result;
  }
  return result;
}

uint64_t AULoudnessWarrior::GetParameterValueStrings(AULoudnessWarrior *this, int a2, unsigned int a3, const __CFArray **a4)
{
  uint64_t result;
  CFIndex v6;
  const __CFArray *v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  const __CFString *v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  result = 4294956418;
  if (!a2 && a3 <= 0x28)
  {
    if (((1 << a3) & 0x80100200) != 0)
    {
      if (a4)
      {
        v8 = xmmword_1E69D4AD8;
        v9 = *(_OWORD *)&off_1E69D4AE8;
        v10 = xmmword_1E69D4AF8;
        v11 = CFSTR("High-pass RMS");
        v6 = 7;
        goto LABEL_9;
      }
    }
    else
    {
      if (((1 << a3) & 0x10020040000) == 0)
        return result;
      if (a4)
      {
        v8 = xmmword_1E69D4B10;
        *(_QWORD *)&v9 = CFSTR("Correct Both");
        v6 = 3;
LABEL_9:
        v7 = CFArrayCreate(0, (const void **)&v8, v6, 0);
        result = 0;
        *a4 = v7;
        return result;
      }
    }
    return 0;
  }
  return result;
}

uint64_t AULoudnessWarrior::CopyClumpName(AULoudnessWarrior *this, int a2, unsigned int a3, unsigned int a4, const __CFString **a5)
{
  uint64_t result;
  const __CFString *v7;

  if (a2)
    return 4294956430;
  if (a3 > 3)
    return 4294956418;
  v7 = CFStringCreateWithCString(0, off_1E69D4B68[a3], 0x8000100u);
  result = 0;
  *a5 = v7;
  return result;
}

uint64_t AULoudnessWarrior::GetPresets(AULoudnessWarrior *this, const __CFArray **a2)
{
  __CFArray *Mutable;

  if (a2)
  {
    Mutable = CFArrayCreateMutable(0, 1, 0);
    CFArrayAppendValue(Mutable, &kAuPresets);
    *a2 = Mutable;
  }
  return 0;
}

uint64_t AULoudnessWarrior::NewFactoryPresetSet(AULoudnessWarrior *this, const AUPreset *a2)
{
  uint64_t i;

  if (a2->presetNumber)
    return 4294956445;
  for (i = 0; i != 41; ++i)
    (*(void (**)(AULoudnessWarrior *, uint64_t, _QWORD, _QWORD, _QWORD, float))(*(_QWORD *)this + 152))(this, i, 0, 0, 0, kPresetParamVals[i]);
  ausdk::AUBase::SetAFactoryPresetAsCurrent((char *)this, &kAuPresets);
  return 0;
}

double AULoudnessWarrior::GetLatency(AULoudnessWarrior *this)
{
  return COERCE_DOUBLE(atomic_load((unint64_t *)this + 348));
}

double AULoudnessWarrior::GetTailTime(AULoudnessWarrior *this)
{
  return 0.2;
}

uint64_t AULoudnessWarrior::SupportsTail(AULoudnessWarrior *this)
{
  return 1;
}

BOOL AULoudnessWarrior::StreamFormatWritable(AULoudnessWarrior *this)
{
  return *((_BYTE *)this + 17) == 0;
}

BOOL AULoudnessWarrior::ValidFormat(AULoudnessWarrior *this, const AudioStreamBasicDescription *a2, unsigned int a3, AudioStreamBasicDescription *a4)
{
  _BOOL8 result;

  if (a4->mSampleRate < 8000.0)
    return 0;
  result = ausdk::ASBD::IsCommonFloat32((ausdk::ASBD *)a4, a2);
  if (result)
    return (a4->mFormatFlags & 0x20) != 0 || a4->mChannelsPerFrame == 1;
  return result;
}

uint64_t AULoudnessWarrior::Version(AULoudnessWarrior *this)
{
  return 0x10000;
}

_OWORD *AULoudnessWarrior::GetValidChannelCounts@<X0>(_QWORD *a1@<X8>)
{
  _OWORD *v3;
  _OWORD *result;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  v3 = operator new(0x10uLL);
  *a1 = v3;
  *v3 = xmmword_1B66A2060;
  result = v3 + 1;
  a1[1] = result;
  a1[2] = result;
  return result;
}

uint64_t AULoudnessWarrior::CanBypass(AULoudnessWarrior *this)
{
  return 1;
}

uint64_t AUJBase::SetBypass(AUJBase *this, char a2)
{
  uint64_t result;

  result = (*(uint64_t (**)(AUJBase *))(*(_QWORD *)this + 600))(this);
  if ((_DWORD)result)
    *((_BYTE *)this + 552) = a2;
  return result;
}

uint64_t AULoudnessWarrior::PresetWasSet(uint64_t this)
{
  atomic_store(1u, (unsigned __int8 *)(this + 2776));
  return this;
}

uint64_t AUJBase::HasCustomViewInDSPAUBundle(AUJBase *this)
{
  return 0;
}

uint64_t AUJBase::WantsToHandlePresetSetsExplicitly(AUJBase *this)
{
  return 0;
}

BOOL ca::concurrent::deferred_deletion_queue<AULoudnessWarriorKernel,10ul,std::default_delete<AULoudnessWarriorKernel>>::pop(uint64_t a1, AULoudnessWarriorKernel **a2)
{
  _BOOL8 v4;
  AULoudnessWarriorKernel *v5;
  AULoudnessWarriorKernel *v6;
  std::runtime_error *exception;
  AULoudnessWarriorKernel *v9;
  AULoudnessWarriorKernel *v10;

  v10 = 0;
  v4 = boost::lockfree::queue<std::vector<std::vector<float>> *,boost::lockfree::capacity<10ul>>::pop<std::vector<std::vector<float>> *>((unsigned int *)(a1 + 64), &v10);
  if (v4)
  {
    v5 = v10;
    if (!v10)
      __assert_rtn("pop", "deferred_deletion_queue.h", 113, "pendingObject");
    v6 = *a2;
    if (*a2)
    {
      *a2 = 0;
      v9 = v6;
      if (!boost::lockfree::queue<std::vector<std::vector<float>> *,boost::lockfree::capacity<10ul>>::do_push<false>(a1 + 1024, &v9))
      {
        exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(exception, "trash queue exceeded capacity, object memory leaked");
      }
    }
    std::unique_ptr<AULoudnessWarriorKernel>::reset[abi:ne180100](a2, v5);
  }
  return v4;
}

void sub_1B6351A30(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

float AULoudnessWarrior::GetParameterBlock(AULoudnessWarrior *this, uint64_t a2)
{
  float result;
  float v5;

  v5 = 0.0;
  (*(void (**)(uint64_t, uint64_t, _QWORD, _QWORD, float *))(*(_QWORD *)a2 + 144))(a2, 8, 0, 0, &v5);
  *(float *)this = v5;
  v5 = 0.0;
  (*(void (**)(uint64_t, uint64_t, _QWORD, _QWORD, float *))(*(_QWORD *)a2 + 144))(a2, 9, 0, 0, &v5);
  *((float *)this + 1) = v5;
  v5 = 0.0;
  (*(void (**)(uint64_t, uint64_t, _QWORD, _QWORD, float *))(*(_QWORD *)a2 + 144))(a2, 10, 0, 0, &v5);
  *((float *)this + 2) = v5;
  v5 = 0.0;
  (*(void (**)(uint64_t, uint64_t, _QWORD, _QWORD, float *))(*(_QWORD *)a2 + 144))(a2, 11, 0, 0, &v5);
  *((float *)this + 3) = v5;
  v5 = 0.0;
  (*(void (**)(uint64_t, uint64_t, _QWORD, _QWORD, float *))(*(_QWORD *)a2 + 144))(a2, 12, 0, 0, &v5);
  *((float *)this + 4) = v5;
  v5 = 0.0;
  (*(void (**)(uint64_t, uint64_t, _QWORD, _QWORD, float *))(*(_QWORD *)a2 + 144))(a2, 13, 0, 0, &v5);
  *((float *)this + 5) = v5;
  v5 = 0.0;
  (*(void (**)(uint64_t, uint64_t, _QWORD, _QWORD, float *))(*(_QWORD *)a2 + 144))(a2, 14, 0, 0, &v5);
  *((float *)this + 6) = v5;
  v5 = 0.0;
  (*(void (**)(uint64_t, uint64_t, _QWORD, _QWORD, float *))(*(_QWORD *)a2 + 144))(a2, 15, 0, 0, &v5);
  *((float *)this + 7) = v5;
  v5 = 0.0;
  (*(void (**)(uint64_t, uint64_t, _QWORD, _QWORD, float *))(*(_QWORD *)a2 + 144))(a2, 16, 0, 0, &v5);
  *((float *)this + 8) = v5;
  v5 = 0.0;
  (*(void (**)(uint64_t, uint64_t, _QWORD, _QWORD, float *))(*(_QWORD *)a2 + 144))(a2, 17, 0, 0, &v5);
  *((float *)this + 9) = v5;
  v5 = 0.0;
  (*(void (**)(uint64_t, uint64_t, _QWORD, _QWORD, float *))(*(_QWORD *)a2 + 144))(a2, 18, 0, 0, &v5);
  *((float *)this + 10) = v5;
  v5 = 0.0;
  (*(void (**)(uint64_t, uint64_t, _QWORD, _QWORD, float *))(*(_QWORD *)a2 + 144))(a2, 19, 0, 0, &v5);
  *((float *)this + 11) = v5;
  v5 = 0.0;
  (*(void (**)(uint64_t, uint64_t, _QWORD, _QWORD, float *))(*(_QWORD *)a2 + 144))(a2, 20, 0, 0, &v5);
  *((float *)this + 12) = v5;
  v5 = 0.0;
  (*(void (**)(uint64_t, uint64_t, _QWORD, _QWORD, float *))(*(_QWORD *)a2 + 144))(a2, 21, 0, 0, &v5);
  *((float *)this + 13) = v5;
  v5 = 0.0;
  (*(void (**)(uint64_t, uint64_t, _QWORD, _QWORD, float *))(*(_QWORD *)a2 + 144))(a2, 22, 0, 0, &v5);
  *((float *)this + 14) = v5;
  v5 = 0.0;
  (*(void (**)(uint64_t, uint64_t, _QWORD, _QWORD, float *))(*(_QWORD *)a2 + 144))(a2, 23, 0, 0, &v5);
  *((float *)this + 15) = v5;
  v5 = 0.0;
  (*(void (**)(uint64_t, uint64_t, _QWORD, _QWORD, float *))(*(_QWORD *)a2 + 144))(a2, 24, 0, 0, &v5);
  *((float *)this + 16) = v5;
  v5 = 0.0;
  (*(void (**)(uint64_t, uint64_t, _QWORD, _QWORD, float *))(*(_QWORD *)a2 + 144))(a2, 25, 0, 0, &v5);
  *((float *)this + 17) = v5;
  v5 = 0.0;
  (*(void (**)(uint64_t, uint64_t, _QWORD, _QWORD, float *))(*(_QWORD *)a2 + 144))(a2, 26, 0, 0, &v5);
  *((float *)this + 18) = v5;
  v5 = 0.0;
  (*(void (**)(uint64_t, uint64_t, _QWORD, _QWORD, float *))(*(_QWORD *)a2 + 144))(a2, 27, 0, 0, &v5);
  *((float *)this + 19) = v5;
  v5 = 0.0;
  (*(void (**)(uint64_t, uint64_t, _QWORD, _QWORD, float *))(*(_QWORD *)a2 + 144))(a2, 28, 0, 0, &v5);
  *((float *)this + 20) = v5;
  v5 = 0.0;
  (*(void (**)(uint64_t, uint64_t, _QWORD, _QWORD, float *))(*(_QWORD *)a2 + 144))(a2, 29, 0, 0, &v5);
  *((float *)this + 21) = v5;
  v5 = 0.0;
  (*(void (**)(uint64_t, uint64_t, _QWORD, _QWORD, float *))(*(_QWORD *)a2 + 144))(a2, 30, 0, 0, &v5);
  *((float *)this + 22) = v5;
  v5 = 0.0;
  (*(void (**)(uint64_t, uint64_t, _QWORD, _QWORD, float *))(*(_QWORD *)a2 + 144))(a2, 31, 0, 0, &v5);
  *((float *)this + 23) = v5;
  v5 = 0.0;
  (*(void (**)(uint64_t, uint64_t, _QWORD, _QWORD, float *))(*(_QWORD *)a2 + 144))(a2, 32, 0, 0, &v5);
  *((float *)this + 24) = v5;
  v5 = 0.0;
  (*(void (**)(uint64_t, uint64_t, _QWORD, _QWORD, float *))(*(_QWORD *)a2 + 144))(a2, 33, 0, 0, &v5);
  *((float *)this + 25) = v5;
  v5 = 0.0;
  (*(void (**)(uint64_t, uint64_t, _QWORD, _QWORD, float *))(*(_QWORD *)a2 + 144))(a2, 34, 0, 0, &v5);
  *((float *)this + 26) = v5;
  v5 = 0.0;
  (*(void (**)(uint64_t, uint64_t, _QWORD, _QWORD, float *))(*(_QWORD *)a2 + 144))(a2, 35, 0, 0, &v5);
  *((float *)this + 27) = v5;
  v5 = 0.0;
  (*(void (**)(uint64_t, uint64_t, _QWORD, _QWORD, float *))(*(_QWORD *)a2 + 144))(a2, 36, 0, 0, &v5);
  *((float *)this + 28) = v5;
  v5 = 0.0;
  (*(void (**)(uint64_t, uint64_t, _QWORD, _QWORD, float *))(*(_QWORD *)a2 + 144))(a2, 37, 0, 0, &v5);
  *((float *)this + 29) = v5;
  v5 = 0.0;
  (*(void (**)(uint64_t, uint64_t, _QWORD, _QWORD, float *))(*(_QWORD *)a2 + 144))(a2, 38, 0, 0, &v5);
  *((float *)this + 30) = v5;
  v5 = 0.0;
  (*(void (**)(uint64_t, uint64_t, _QWORD, _QWORD, float *))(*(_QWORD *)a2 + 144))(a2, 39, 0, 0, &v5);
  *((float *)this + 31) = v5;
  v5 = 0.0;
  (*(void (**)(uint64_t, uint64_t, _QWORD, _QWORD, float *))(*(_QWORD *)a2 + 144))(a2, 40, 0, 0, &v5);
  result = v5;
  *((float *)this + 32) = v5;
  return result;
}

void AULoudnessWarriorKernel::SetMeterValues(_QWORD *a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  float v12;
  uint64_t v13;
  double v14;
  double v15;
  double v16;
  double v17;
  int v19;
  float v20;
  double v21;
  double v22;
  double v23;
  int v25;
  int v26;
  float v27;
  float *v28;
  float v29;
  float v30;
  float v31;
  float v33;
  float v34;
  float v35;
  float v36;

  v2 = a1[1];
  if (a1[2] != v2)
  {
    v4 = 0;
    v5 = a2 + 20;
    do
    {
      *(_DWORD *)(a1[10] + 4 * v4) = *(_DWORD *)(v5 + 8);
      *(_DWORD *)(a1[13] + 4 * v4) = *(_DWORD *)(v5 + 12);
      *(_DWORD *)(a1[16] + 4 * v4) = *(_DWORD *)(v5 + 16);
      v6 = a1[7];
      v7 = v4 >> 6;
      v8 = 1 << v4;
      if (*(float *)(v5 - 20) == 0.0)
      {
        v11 = *(_QWORD *)(v6 + 8 * v7) & ~v8;
      }
      else
      {
        v9 = *(_QWORD *)(v6 + 8 * v7);
        if ((v9 & v8) == 0)
        {
          v10 = *(_QWORD *)(v2 + 8 * v4);
          *(_DWORD *)(*(_QWORD *)(v10 + 72) + 28) = 0;
          DspLib::Biquad::SetupWrapper::reset((DspLib::Biquad::SetupWrapper *)(v10 + 48));
          v6 = a1[7];
          v9 = *(_QWORD *)(v6 + 8 * v7);
          v2 = a1[1];
        }
        v11 = v9 | v8;
      }
      *(_QWORD *)(v6 + 8 * v7) = v11;
      if ((v11 & v8) != 0)
      {
        v12 = *(float *)v5;
        v13 = *(_QWORD *)(v2 + 8 * v4);
        v14 = *(float *)v5;
        v15 = *(float *)(v13 + 240);
        v16 = v15 + -0.001;
        v17 = v15 + 0.001;
        if (v16 >= v14 || v17 <= v14)
        {
          *(float *)(v13 + 240) = v12;
          v19 = *(_DWORD *)(v13 + 224);
          if ((v19 - 4) <= 2)
          {
            Meter::SetMeterType(v13, v19, *(float *)(v13 + 244), v12);
            v2 = a1[1];
          }
          v13 = *(_QWORD *)(v2 + 8 * v4);
        }
        v20 = *(float *)(v5 - 4);
        v21 = *(float *)(v13 + 244);
        v22 = v21 + -0.5;
        v23 = v21 + 0.5;
        if (v22 >= v20 || v23 <= v20)
        {
          *(float *)(v13 + 244) = v20;
          v25 = *(_DWORD *)(v13 + 224);
          if ((v25 - 4) <= 2)
          {
            Meter::SetMeterType(v13, v25, v20, *(float *)(v13 + 240));
            v2 = a1[1];
          }
          v13 = *(_QWORD *)(v2 + 8 * v4);
        }
        v26 = *(float *)(v5 - 16);
        if (*(_DWORD *)(v13 + 224) != v26)
        {
          Meter::SetMeterType(v13, v26, *(float *)(v13 + 244), *(float *)(v13 + 240));
          v2 = a1[1];
          v13 = *(_QWORD *)(v2 + 8 * v4);
        }
        v27 = *(float *)(v5 - 12);
        v28 = *(float **)(v13 + 72);
        v29 = v28[3];
        v30 = v29 + -1.0;
        v31 = v29 + 1.0;
        if (v27 <= v30 || v27 >= v31)
        {
          EnvelopeDetector::SetAttackTime((EnvelopeDetector *)v28, v27);
          *(_DWORD *)(*(_QWORD *)(v13 + 72) + 28) = 0;
          DspLib::Biquad::SetupWrapper::reset((DspLib::Biquad::SetupWrapper *)(v13 + 48));
          v2 = a1[1];
          v13 = *(_QWORD *)(v2 + 8 * v4);
          v28 = *(float **)(v13 + 72);
        }
        v33 = *(float *)(v5 - 8);
        v34 = v28[4];
        v35 = v34 + -1.0;
        v36 = v34 + 1.0;
        if (v33 <= v35 || v33 >= v36)
        {
          EnvelopeDetector::SetReleaseTime((EnvelopeDetector *)v28, v33);
          *(_DWORD *)(*(_QWORD *)(v13 + 72) + 28) = 0;
          DspLib::Biquad::SetupWrapper::reset((DspLib::Biquad::SetupWrapper *)(v13 + 48));
          v2 = a1[1];
        }
        *(_DWORD *)(a1[22] + 4 * v4) = *(float *)(v5 + 20);
      }
      ++v4;
      v5 += 44;
    }
    while (v4 < (a1[2] - v2) >> 3);
  }
}

AULoudnessWarriorKernel *std::unique_ptr<AULoudnessWarriorKernel>::reset[abi:ne180100](AULoudnessWarriorKernel **a1, AULoudnessWarriorKernel *a2)
{
  AULoudnessWarriorKernel *result;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    AULoudnessWarriorKernel::~AULoudnessWarriorKernel(result);
    JUMPOUT(0x1BCC95CECLL);
  }
  return result;
}

void AULoudnessWarriorKernel::~AULoudnessWarriorKernel(AULoudnessWarriorKernel *this)
{
  void *v2;
  uint64_t v3;
  void *v4;
  void *v5;
  uint64_t v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void **v15;

  DspLib::Biquad::SetupWrapper::destroyvDSPSetup((AULoudnessWarriorKernel *)((char *)this + 376));
  v2 = (void *)*((_QWORD *)this + 44);
  if (v2)
  {
    *((_QWORD *)this + 45) = v2;
    operator delete(v2);
  }
  v3 = *((_QWORD *)this + 40);
  *((_QWORD *)this + 40) = 0;
  if (v3)
    std::default_delete<BiquadInterpolator>::operator()[abi:ne180100](v3);
  v4 = (void *)*((_QWORD *)this + 37);
  if (v4)
  {
    *((_QWORD *)this + 38) = v4;
    operator delete(v4);
  }
  v5 = (void *)*((_QWORD *)this + 34);
  if (v5)
  {
    *((_QWORD *)this + 35) = v5;
    operator delete(v5);
  }
  v6 = *((_QWORD *)this + 32);
  *((_QWORD *)this + 32) = 0;
  if (v6)
    std::default_delete<BiquadInterpolator>::operator()[abi:ne180100](v6);
  v7 = (void *)*((_QWORD *)this + 29);
  if (v7)
  {
    *((_QWORD *)this + 30) = v7;
    operator delete(v7);
  }
  v8 = (void *)*((_QWORD *)this + 26);
  if (v8)
  {
    *((_QWORD *)this + 27) = v8;
    operator delete(v8);
  }
  v9 = (void *)*((_QWORD *)this + 22);
  if (v9)
  {
    *((_QWORD *)this + 23) = v9;
    operator delete(v9);
  }
  v10 = (void *)*((_QWORD *)this + 19);
  if (v10)
  {
    *((_QWORD *)this + 20) = v10;
    operator delete(v10);
  }
  v11 = (void *)*((_QWORD *)this + 16);
  if (v11)
  {
    *((_QWORD *)this + 17) = v11;
    operator delete(v11);
  }
  v12 = (void *)*((_QWORD *)this + 13);
  if (v12)
  {
    *((_QWORD *)this + 14) = v12;
    operator delete(v12);
  }
  v13 = (void *)*((_QWORD *)this + 10);
  if (v13)
  {
    *((_QWORD *)this + 11) = v13;
    operator delete(v13);
  }
  v14 = (void *)*((_QWORD *)this + 7);
  if (v14)
    operator delete(v14);
  v15 = (void **)((char *)this + 32);
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v15);
  v15 = (void **)((char *)this + 8);
  std::vector<std::unique_ptr<Meter>>::__destroy_vector::operator()[abi:ne180100](&v15);
}

void std::vector<std::unique_ptr<Meter>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  Meter **v2;
  Meter **v4;
  void *v5;

  v1 = *a1;
  v2 = (Meter **)**a1;
  if (v2)
  {
    v4 = (Meter **)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
        std::unique_ptr<Meter>::reset[abi:ne180100](--v4);
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

Meter *std::unique_ptr<Meter>::reset[abi:ne180100](Meter **a1)
{
  Meter *result;

  result = *a1;
  *a1 = 0;
  if (result)
  {
    Meter::~Meter(result);
    JUMPOUT(0x1BCC95CECLL);
  }
  return result;
}

void Meter::~Meter(Meter *this)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  uint64_t v6;
  void *v7;
  void **v8;

  v2 = (void *)*((_QWORD *)this + 25);
  if (v2)
  {
    *((_QWORD *)this + 26) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 22);
  if (v3)
  {
    *((_QWORD *)this + 23) = v3;
    operator delete(v3);
  }
  v4 = (void *)*((_QWORD *)this + 19);
  if (v4)
  {
    *((_QWORD *)this + 20) = v4;
    operator delete(v4);
  }
  v8 = (void **)((char *)this + 128);
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v8);
  v5 = (void *)*((_QWORD *)this + 13);
  if (v5)
  {
    *((_QWORD *)this + 14) = v5;
    operator delete(v5);
  }
  v8 = (void **)((char *)this + 80);
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v8);
  v6 = *((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v6)
    MEMORY[0x1BCC95CEC](v6, 0x1000C407BE137D4);
  DspLib::Biquad::SetupWrapper::destroyvDSPSetup((Meter *)((char *)this + 48));
  v7 = (void *)*((_QWORD *)this + 3);
  if (v7)
  {
    *((_QWORD *)this + 4) = v7;
    operator delete(v7);
  }
}

void AULoudnessWarrior::CreateKernel(AULoudnessWarrior *this, const CACFDictionary *a2, CFDictionaryRef *a3)
{
  uint64_t Element;
  uint64_t v7;
  double *v8;
  unsigned int v9;
  unsigned int *v10;
  unsigned int v11;
  BOOL v12;
  BOOL v13;
  int v14;
  BOOL v15;
  const CFArrayCallBacks *v16;
  unint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v29;
  float v30;
  float v31;
  NSObject *v32;
  NSObject *v33;
  const char *v34;
  NSObject *v35;
  uint32_t v36;
  const __CFString *v37;
  NSObject *v38;
  NSObject *v39;
  NSObject *v40;
  double v41;
  unsigned __int8 v42;
  NSObject *v43;
  double v44;
  uint64_t v45;
  uint64_t v46;
  CFMutableDictionaryRef v47;
  const __CFDictionary *v48;
  CFArrayRef theArray;
  const __CFArray *v50;
  CFMutableArrayRef v51;
  __int16 v52;
  CFArrayRef v53;
  __int16 v54;
  CFArrayRef v55;
  __int16 v56;
  CFArrayRef v57;
  __int16 v58;
  CFArrayRef Mutable;
  __int16 v60;
  double v61;
  _BYTE buf[12];
  __int16 v63;
  int v64;
  __int16 v65;
  uint64_t v66;
  __int16 v67;
  unint64_t v68;
  _BYTE v69[18];
  __int16 v70;
  double v71;
  uint64_t v72;

  v72 = *MEMORY[0x1E0C80C00];
  Element = ausdk::AUScope::SafeGetElement((const CACFDictionary *)((char *)a2 + 80), 0);
  v7 = ausdk::AUScope::SafeGetElement((const CACFDictionary *)((char *)a2 + 128), 0);
  v8 = (double *)(Element + 80);
  if (*(double *)(v7 + 80) != *(double *)(Element + 80)
    || ((v11 = *(_DWORD *)(Element + 108), v10 = (unsigned int *)(Element + 108), v9 = v11, v11 == *(_DWORD *)(v7 + 108))
      ? (v12 = *(_DWORD *)(v7 + 88) == 1819304813)
      : (v12 = 0),
        !v12
     || (*(_DWORD *)(v7 + 92) & 1) == 0
     || ((v13 = v9 > 7, v14 = (1 << v9) & 0xB0, !v13) ? (v15 = v14 == 0) : (v15 = 1), !v15)))
  {
    *(_QWORD *)this = 0;
    return;
  }
  v61 = 0.0;
  v16 = (const CFArrayCallBacks *)MEMORY[0x1E0C9B378];
  Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x1E0C9B378]);
  v60 = 257;
  v57 = CFArrayCreateMutable(0, 0, v16);
  v58 = 257;
  v55 = CFArrayCreateMutable(0, 0, MEMORY[0x1E0C9B378]);
  v56 = 257;
  if (!*a3 || !CFDictionaryGetCount(*a3))
  {
    AULoudnessWarrior::SetPassthroughModeAndBypass(a2, &v61, &Mutable, &v57, &v55);
    goto LABEL_20;
  }
  theArray = CFArrayCreateMutable(0, 0, MEMORY[0x1E0C9B378]);
  LOWORD(v50) = 257;
  CACFDictionary::GetCACFArray(a3, CFSTR("Anchors"), (CACFArray *)&theArray);
  if (theArray && CFArrayGetCount(theArray))
  {
    CACFArray::operator=((uint64_t)&Mutable, (uint64_t)&theArray);
    if (CFDictionaryContainsKey(*a3, CFSTR("Latency")))
      CACFDictionary::GetFloat64((uint64_t)*a3, CFSTR("Latency"), &v61);
    else
      v61 = 0.0;
    snprintf(buf, 0x40uLL, "biquads_%.0f", *v8);
    v37 = CFStringCreateWithCString(0, buf, 0x600u);
    if (CFDictionaryContainsKey(*a3, v37))
    {
LABEL_100:
      v47 = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
      LOWORD(v48) = 257;
      CACFDictionary::GetCACFDictionary(a3, v37, (CACFDictionary *)&v47);
      CFRelease(v37);
      v53 = CFArrayCreateMutable(0, 0, MEMORY[0x1E0C9B378]);
      v54 = 257;
      v51 = CFArrayCreateMutable(0, 0, MEMORY[0x1E0C9B378]);
      v52 = 257;
      CACFDictionary::GetCACFArray(&v47, CFSTR("BassBiquads"), (CACFArray *)&v53);
      CACFDictionary::GetCACFArray(&v47, CFSTR("TrebleBiquads"), (CACFArray *)&v51);
      if (v53 && CFArrayGetCount(v53) && v53 && CFArrayGetCount(v53))
      {
        CACFArray::operator=((uint64_t)&v57, (uint64_t)&v53);
        CACFArray::operator=((uint64_t)&v55, (uint64_t)&v51);
LABEL_111:
        CACFArray::~CACFArray((CACFArray *)&v51);
        CACFArray::~CACFArray((CACFArray *)&v53);
        CACFDictionary::~CACFDictionary((CACFDictionary *)&v47);
        CACFArray::~CACFArray((CACFArray *)&theArray);
LABEL_20:
        CFHelper::extractVector<float>((uint64_t)v69, &Mutable);
        CFHelper::extractVectorOfVectors<float>((uint64_t *)&theArray, &v57);
        CFHelper::extractVectorOfVectors<float>((uint64_t *)&v47, &v55);
        v17 = (uint64_t)(*(_QWORD *)&v69[8] - *(_QWORD *)v69) >> 2;
        if (v17 == 0xAAAAAAAAAAAAAAABLL * ((v50 - theArray) >> 3))
        {
          if (v17 == (v48 - v47) / 24)
          {
            if (v50 == theArray)
            {
LABEL_33:
              if (v48 == v47)
              {
LABEL_43:
                AULoudnessWarrior::GetParameterBlock((AULoudnessWarrior *)buf, (uint64_t)a2);
                LODWORD(v53) = *((_DWORD *)a2 + 84);
                std::make_unique[abi:ne180100]<AULoudnessWarriorKernel,std::vector<float> &,std::vector<std::vector<float>> &,std::vector<std::vector<float>> &,std::array<std::array<float,11ul>,3ul>,double const&,unsigned int const&,unsigned int>(this, (uint64_t)v69, (uint64_t *)&theArray, (uint64_t *)&v47, (uint64_t)buf, v8, v10, (unsigned int *)&v53);
                v29 = *(_QWORD *)this;
                AULoudnessWarrior::GetParameterBlock((AULoudnessWarrior *)buf, (uint64_t)a2);
                AULoudnessWarriorKernel::SetMeterValues((_QWORD *)v29, (uint64_t)buf);
                LODWORD(v53) = 0;
                (*(void (**)(const CACFDictionary *, _QWORD, _QWORD, _QWORD, CFArrayRef *))(*(_QWORD *)a2 + 144))(a2, 0, 0, 0, &v53);
                v30 = *(float *)&v53;
                LODWORD(v53) = 0;
                (*(void (**)(const CACFDictionary *, uint64_t, _QWORD, _QWORD, CFArrayRef *))(*(_QWORD *)a2 + 144))(a2, 1, 0, 0, &v53);
                v31 = *(float *)&v53;
                LODWORD(v53) = 0;
                (*(void (**)(const CACFDictionary *, uint64_t, _QWORD, _QWORD, CFArrayRef *))(*(_QWORD *)a2 + 144))(a2, 2, 0, 0, &v53);
                *(float *)(v29 + 400) = (float)(v30 + v31) - *(float *)&v53;
                goto LABEL_72;
              }
              v24 = 0;
              v25 = (_QWORD *)((char *)v47 + 8);
              if (v17 <= 1)
                v17 = 1;
              while (1)
              {
                v26 = *(v25 - 1);
                v27 = (*v25 - v26) >> 2;
                if (*v25 == v26 || v27 % 5 != 0)
                {
                  if (AULoudnessWarriorLogScope(void)::once != -1)
                    dispatch_once(&AULoudnessWarriorLogScope(void)::once, &__block_literal_global_9424);
                  if (AULoudnessWarriorLogScope(void)::scope)
                  {
                    v39 = *(NSObject **)AULoudnessWarriorLogScope(void)::scope;
                    if (!*(_QWORD *)AULoudnessWarriorLogScope(void)::scope)
                      goto LABEL_71;
                  }
                  else
                  {
                    v39 = MEMORY[0x1E0C81028];
                  }
                  if (os_log_type_enabled(v39, OS_LOG_TYPE_ERROR))
                  {
                    v46 = (uint64_t)(*((_QWORD *)v47 + 3 * v24 + 1) - *((_QWORD *)v47 + 3 * v24)) >> 2;
                    *(_DWORD *)buf = 136315650;
                    *(_QWORD *)&buf[4] = "AULoudnessWarrior.cpp";
                    v63 = 1024;
                    v64 = 742;
                    v65 = 2048;
                    v66 = v46;
                    v34 = "%25s:%-5d Invalid treble EQ sizes: BQ vector has %lu coefficients\n";
                    goto LABEL_132;
                  }
                  goto LABEL_71;
                }
                if (v27 != (uint64_t)(*((_QWORD *)v47 + 1) - *(_QWORD *)v47) >> 2)
                  break;
                ++v24;
                v25 += 3;
                if (v17 == v24)
                  goto LABEL_43;
              }
              if (AULoudnessWarriorLogScope(void)::once != -1)
                dispatch_once(&AULoudnessWarriorLogScope(void)::once, &__block_literal_global_9424);
              if (AULoudnessWarriorLogScope(void)::scope)
              {
                v40 = *(NSObject **)AULoudnessWarriorLogScope(void)::scope;
                if (!*(_QWORD *)AULoudnessWarriorLogScope(void)::scope)
                  goto LABEL_71;
              }
              else
              {
                v40 = MEMORY[0x1E0C81028];
              }
              if (os_log_type_enabled(v40, OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)buf = 136315394;
                *(_QWORD *)&buf[4] = "AULoudnessWarrior.cpp";
                v63 = 1024;
                v64 = 747;
                v34 = "%25s:%-5d Invalid treble EQ sizes: BQ vectors must be same length\n";
                goto LABEL_136;
              }
            }
            else
            {
              v18 = 0;
              v19 = (_QWORD *)((char *)theArray + 8);
              if (v17 <= 1)
                v20 = 1;
              else
                v20 = (uint64_t)(*(_QWORD *)&v69[8] - *(_QWORD *)v69) >> 2;
              while (1)
              {
                v21 = *(v19 - 1);
                v22 = (*v19 - v21) >> 2;
                if (*v19 == v21 || v22 % 5 != 0)
                {
                  if (AULoudnessWarriorLogScope(void)::once != -1)
                    dispatch_once(&AULoudnessWarriorLogScope(void)::once, &__block_literal_global_9424);
                  if (AULoudnessWarriorLogScope(void)::scope)
                  {
                    v39 = *(NSObject **)AULoudnessWarriorLogScope(void)::scope;
                    if (!*(_QWORD *)AULoudnessWarriorLogScope(void)::scope)
                      goto LABEL_71;
                  }
                  else
                  {
                    v39 = MEMORY[0x1E0C81028];
                  }
                  if (os_log_type_enabled(v39, OS_LOG_TYPE_ERROR))
                  {
                    v45 = (uint64_t)(*((_QWORD *)theArray + 3 * v18 + 1) - *((_QWORD *)theArray + 3 * v18)) >> 2;
                    *(_DWORD *)buf = 136315650;
                    *(_QWORD *)&buf[4] = "AULoudnessWarrior.cpp";
                    v63 = 1024;
                    v64 = 728;
                    v65 = 2048;
                    v66 = v45;
                    v34 = "%25s:%-5d Invalid bass EQ sizes: BQ vector has %lu coefficients\n";
LABEL_132:
                    v35 = v39;
                    v36 = 28;
                    goto LABEL_70;
                  }
                  goto LABEL_71;
                }
                if (v22 != (uint64_t)(*((_QWORD *)theArray + 1) - *(_QWORD *)theArray) >> 2)
                  break;
                ++v18;
                v19 += 3;
                if (v20 == v18)
                  goto LABEL_33;
              }
              if (AULoudnessWarriorLogScope(void)::once != -1)
                dispatch_once(&AULoudnessWarriorLogScope(void)::once, &__block_literal_global_9424);
              if (AULoudnessWarriorLogScope(void)::scope)
              {
                v40 = *(NSObject **)AULoudnessWarriorLogScope(void)::scope;
                if (!*(_QWORD *)AULoudnessWarriorLogScope(void)::scope)
                  goto LABEL_71;
              }
              else
              {
                v40 = MEMORY[0x1E0C81028];
              }
              if (os_log_type_enabled(v40, OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)buf = 136315394;
                *(_QWORD *)&buf[4] = "AULoudnessWarrior.cpp";
                v63 = 1024;
                v64 = 733;
                v34 = "%25s:%-5d Invalid bass EQ sizes: BQ vectors must be same length\n";
LABEL_136:
                v35 = v40;
                v36 = 18;
                goto LABEL_70;
              }
            }
            goto LABEL_71;
          }
          if (AULoudnessWarriorLogScope(void)::once != -1)
            dispatch_once(&AULoudnessWarriorLogScope(void)::once, &__block_literal_global_9424);
          if (AULoudnessWarriorLogScope(void)::scope)
          {
            v32 = *(NSObject **)AULoudnessWarriorLogScope(void)::scope;
            if (!*(_QWORD *)AULoudnessWarriorLogScope(void)::scope)
              goto LABEL_71;
          }
          else
          {
            v32 = MEMORY[0x1E0C81028];
          }
          if (os_log_type_enabled(v32, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 136315906;
            *(_QWORD *)&buf[4] = "AULoudnessWarrior.cpp";
            v63 = 1024;
            v64 = 721;
            v65 = 2048;
            v66 = (uint64_t)(*(_QWORD *)&v69[8] - *(_QWORD *)v69) >> 2;
            v67 = 2048;
            v68 = 0xAAAAAAAAAAAAAAABLL * ((v50 - theArray) >> 3);
            v34 = "%25s:%-5d Invalid treble EQ sizes: Anchor gains size = %lu, # BQs = %lu\n";
LABEL_69:
            v35 = v32;
            v36 = 38;
LABEL_70:
            _os_log_impl(&dword_1B5ED0000, v35, OS_LOG_TYPE_ERROR, v34, buf, v36);
          }
        }
        else
        {
          if (AULoudnessWarriorLogScope(void)::once != -1)
            dispatch_once(&AULoudnessWarriorLogScope(void)::once, &__block_literal_global_9424);
          if (AULoudnessWarriorLogScope(void)::scope)
          {
            v32 = *(NSObject **)AULoudnessWarriorLogScope(void)::scope;
            if (!*(_QWORD *)AULoudnessWarriorLogScope(void)::scope)
              goto LABEL_71;
          }
          else
          {
            v32 = MEMORY[0x1E0C81028];
          }
          if (os_log_type_enabled(v32, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 136315906;
            *(_QWORD *)&buf[4] = "AULoudnessWarrior.cpp";
            v63 = 1024;
            v64 = 717;
            v65 = 2048;
            v66 = (uint64_t)(*(_QWORD *)&v69[8] - *(_QWORD *)v69) >> 2;
            v67 = 2048;
            v68 = 0xAAAAAAAAAAAAAAABLL * ((v50 - theArray) >> 3);
            v34 = "%25s:%-5d Invalid bass EQ sizes: Anchor gains size = %lu, # BQs = %lu\n";
            goto LABEL_69;
          }
        }
LABEL_71:
        *(_QWORD *)this = 0;
LABEL_72:
        *(_QWORD *)buf = &v47;
        std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
        *(_QWORD *)buf = &theArray;
        std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
        if (*(_QWORD *)v69)
        {
          *(_QWORD *)&v69[8] = *(_QWORD *)v69;
          operator delete(*(void **)v69);
        }
        goto LABEL_117;
      }
      v42 = atomic_load((unsigned __int8 *)a2 + 2792);
      if ((v42 & 1) != 0)
        goto LABEL_111;
      if (AULoudnessWarriorLogScope(void)::once != -1)
        dispatch_once(&AULoudnessWarriorLogScope(void)::once, &__block_literal_global_9424);
      if (AULoudnessWarriorLogScope(void)::scope)
      {
        v43 = *(NSObject **)AULoudnessWarriorLogScope(void)::scope;
        if (!*(_QWORD *)AULoudnessWarriorLogScope(void)::scope)
        {
LABEL_115:
          *(_QWORD *)this = 0;
          CACFArray::~CACFArray((CACFArray *)&v51);
          CACFArray::~CACFArray((CACFArray *)&v53);
          CACFDictionary::~CACFDictionary((CACFDictionary *)&v47);
          goto LABEL_116;
        }
      }
      else
      {
        v43 = MEMORY[0x1E0C81028];
      }
      if (os_log_type_enabled(v43, OS_LOG_TYPE_ERROR))
      {
        v44 = *v8;
        *(_DWORD *)v69 = 136315650;
        *(_QWORD *)&v69[4] = "AULoudnessWarrior.cpp";
        *(_WORD *)&v69[12] = 1024;
        *(_DWORD *)&v69[14] = 706;
        v70 = 2048;
        v71 = v44;
        _os_log_impl(&dword_1B5ED0000, v43, OS_LOG_TYPE_ERROR, "%25s:%-5d Bass or treble BQs not defined correctly for sample rate of %.0f!\n", v69, 0x1Cu);
      }
      goto LABEL_115;
    }
    if (AULoudnessWarriorLogScope(void)::once != -1)
      dispatch_once(&AULoudnessWarriorLogScope(void)::once, &__block_literal_global_9424);
    if (AULoudnessWarriorLogScope(void)::scope)
    {
      v38 = *(NSObject **)AULoudnessWarriorLogScope(void)::scope;
      if (!*(_QWORD *)AULoudnessWarriorLogScope(void)::scope)
      {
LABEL_99:
        AULoudnessWarrior::SetPassthroughModeAndBypass(a2, &v61, &Mutable, &v57, &v55);
        goto LABEL_100;
      }
    }
    else
    {
      v38 = MEMORY[0x1E0C81028];
    }
    if (os_log_type_enabled(v38, OS_LOG_TYPE_DEFAULT))
    {
      v41 = *v8;
      *(_DWORD *)v69 = 136315650;
      *(_QWORD *)&v69[4] = "AULoudnessWarrior.cpp";
      *(_WORD *)&v69[12] = 1024;
      *(_DWORD *)&v69[14] = 691;
      v70 = 2048;
      v71 = v41;
      _os_log_impl(&dword_1B5ED0000, v38, OS_LOG_TYPE_DEFAULT, "%25s:%-5d No entry in biquad .plist for sample rate of %.0f!\n", v69, 0x1Cu);
    }
    goto LABEL_99;
  }
  if (AULoudnessWarriorLogScope(void)::once != -1)
    dispatch_once(&AULoudnessWarriorLogScope(void)::once, &__block_literal_global_9424);
  if (!AULoudnessWarriorLogScope(void)::scope)
  {
    v33 = MEMORY[0x1E0C81028];
LABEL_63:
    if (os_log_type_enabled(v33, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      *(_QWORD *)&buf[4] = "AULoudnessWarrior.cpp";
      v63 = 1024;
      v64 = 676;
      _os_log_impl(&dword_1B5ED0000, v33, OS_LOG_TYPE_ERROR, "%25s:%-5d No anchor gains defined!\n", buf, 0x12u);
    }
    goto LABEL_65;
  }
  v33 = *(NSObject **)AULoudnessWarriorLogScope(void)::scope;
  if (*(_QWORD *)AULoudnessWarriorLogScope(void)::scope)
    goto LABEL_63;
LABEL_65:
  *(_QWORD *)this = 0;
LABEL_116:
  CACFArray::~CACFArray((CACFArray *)&theArray);
LABEL_117:
  CACFArray::~CACFArray((CACFArray *)&v55);
  CACFArray::~CACFArray((CACFArray *)&v57);
  CACFArray::~CACFArray((CACFArray *)&Mutable);
}

void sub_1B63531D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,char a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,void **a27)
{
  uint64_t v27;
  void *v29;

  a27 = (void **)&a10;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&a27);
  a27 = (void **)&a13;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&a27);
  v29 = *(void **)(v27 - 144);
  if (v29)
  {
    *(_QWORD *)(v27 - 136) = v29;
    operator delete(v29);
  }
  CACFArray::~CACFArray((CACFArray *)&a20);
  CACFArray::~CACFArray((CACFArray *)&a22);
  CACFArray::~CACFArray((CACFArray *)&a24);
  _Unwind_Resume(a1);
}

BOOL ca::concurrent::deferred_deletion_queue<AULoudnessWarriorKernel,10ul,std::default_delete<AULoudnessWarriorKernel>>::drain_trash(uint64_t a1)
{
  unsigned int *v1;
  _BOOL8 result;
  AULoudnessWarriorKernel *v3;

  v3 = 0;
  v1 = (unsigned int *)(a1 + 1024);
  while (1)
  {
    result = boost::lockfree::queue<std::vector<std::vector<float>> *,boost::lockfree::capacity<10ul>>::pop<std::vector<std::vector<float>> *>(v1, &v3);
    if (!result)
      break;
    if (!v3)
      __assert_rtn("drain_trash", "deferred_deletion_queue.h", 146, "trashObject");
    AULoudnessWarriorKernel::~AULoudnessWarriorKernel(v3);
    MEMORY[0x1BCC95CEC]();
  }
  return result;
}

void AULoudnessWarrior::SetPassthroughModeAndBypass(AULoudnessWarrior *this, double *a2, CFMutableArrayRef *a3, CFMutableArrayRef *a4, CFMutableArrayRef *a5)
{
  NSObject *v10;
  int v11;
  _BYTE buf[12];
  __int16 v13;
  int v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  if (AULoudnessWarriorLogScope(void)::once != -1)
    dispatch_once(&AULoudnessWarriorLogScope(void)::once, &__block_literal_global_9424);
  if (AULoudnessWarriorLogScope(void)::scope)
  {
    v10 = *(NSObject **)AULoudnessWarriorLogScope(void)::scope;
    if (!*(_QWORD *)AULoudnessWarriorLogScope(void)::scope)
      goto LABEL_9;
  }
  else
  {
    v10 = MEMORY[0x1E0C81028];
  }
  if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 136315394;
    *(_QWORD *)&buf[4] = "AULoudnessWarrior.cpp";
    v13 = 1024;
    v14 = 619;
    _os_log_impl(&dword_1B5ED0000, v10, OS_LOG_TYPE_DEFAULT, "%25s:%-5d No valid .plist file set, going to passthrough mode and bypassing LoudnessWarrior\n", buf, 0x12u);
  }
LABEL_9:
  if (a2)
    *a2 = 0.0;
  if (*((_BYTE *)a3 + 9) && *a3)
    CFArrayRemoveAllValues(*a3);
  CACFArray::AppendFloat32(a3, 0.0);
  *(_QWORD *)buf = CFArrayCreateMutable(0, 0, MEMORY[0x1E0C9B378]);
  *(_WORD *)&buf[8] = 257;
  CACFArray::AppendFloat32((CFMutableArrayRef *)buf, 1.0);
  CACFArray::AppendFloat32((CFMutableArrayRef *)buf, 0.0);
  CACFArray::AppendFloat32((CFMutableArrayRef *)buf, 0.0);
  CACFArray::AppendFloat32((CFMutableArrayRef *)buf, 0.0);
  CACFArray::AppendFloat32((CFMutableArrayRef *)buf, 0.0);
  if (*((_BYTE *)a4 + 9))
  {
    if (!*a4)
      goto LABEL_20;
    CFArrayRemoveAllValues(*a4);
  }
  if (*a4 && *((_BYTE *)a4 + 9))
    CFArrayAppendValue(*a4, *(const void **)buf);
LABEL_20:
  if (*((_BYTE *)a5 + 9))
  {
    if (!*a5)
      goto LABEL_26;
    CFArrayRemoveAllValues(*a5);
  }
  if (*a5 && *((_BYTE *)a5 + 9))
    CFArrayAppendValue(*a5, *(const void **)buf);
LABEL_26:
  v11 = 1;
  (*(void (**)(AULoudnessWarrior *, uint64_t, _QWORD, _QWORD, int *, uint64_t))(*(_QWORD *)this + 96))(this, 21, 0, 0, &v11, 4);
  atomic_store(1u, (unsigned __int8 *)this + 2792);
  CACFArray::~CACFArray((CACFArray *)buf);
}

void sub_1B635356C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  CACFArray::~CACFArray((CACFArray *)va);
  _Unwind_Resume(a1);
}

uint64_t CACFArray::operator=(uint64_t a1, uint64_t a2)
{
  const void *v4;
  const void *v5;
  int v6;
  BOOL v7;

  if (*(_BYTE *)(a1 + 8))
  {
    v4 = *(const void **)a1;
    if (*(_QWORD *)a1)
      CFRelease(v4);
  }
  v5 = *(const void **)a2;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  v6 = *(unsigned __int8 *)(a2 + 8);
  *(_BYTE *)(a1 + 8) = v6;
  *(_BYTE *)(a1 + 9) = *(_BYTE *)(a2 + 9);
  if (v6)
    v7 = v5 == 0;
  else
    v7 = 1;
  if (!v7)
    CFRetain(v5);
  return a1;
}

void std::make_unique[abi:ne180100]<AULoudnessWarriorKernel,std::vector<float> &,std::vector<std::vector<float>> &,std::vector<std::vector<float>> &,std::array<std::array<float,11ul>,3ul>,double const&,unsigned int const&,unsigned int>(_QWORD *a1, uint64_t a2, uint64_t *a3, uint64_t *a4, uint64_t a5, double *a6, unsigned int *a7, unsigned int *a8)
{
  uint64_t v15;
  double v16;
  vDSP_Length v17;
  unint64_t v18;
  _DWORD *v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t *v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t *v25;
  Meter **i;
  Meter **v27;
  uint64_t v28;
  uint64_t v29;
  float v30;
  uint64_t v31;
  float v32;
  float v33;
  int32x2_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  unint64_t v42;
  uint64_t *v43;
  uint64_t *v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  unint64_t v48;
  char *v49;
  uint64_t *v50;
  _QWORD *v51;
  uint64_t v52;
  int64x2_t v53;
  Meter *v54;
  Meter **v55;
  Meter **v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  _QWORD *v69;
  uint64_t *v70;
  uint64_t **v71;
  unsigned int v72;
  _QWORD *v74;
  Meter *v75;
  int v76;
  void *v77;
  void *v78;

  v15 = operator new();
  v16 = *a6;
  v17 = *a7;
  v18 = *a8;
  *(_OWORD *)(v15 + 32) = 0u;
  v70 = (uint64_t *)(v15 + 32);
  v71 = (uint64_t **)(v15 + 8);
  *(_OWORD *)v15 = 0u;
  *(_OWORD *)(v15 + 16) = 0u;
  *(_QWORD *)(v15 + 48) = 0;
  LOBYTE(v77) = 0;
  std::vector<BOOL>::vector((_QWORD *)(v15 + 56), 3uLL, (unsigned __int8 *)&v77);
  LODWORD(v77) = -1048576000;
  std::vector<float>::vector((_QWORD *)(v15 + 80), 3uLL, &v77);
  LODWORD(v77) = 1065353216;
  std::vector<float>::vector((_QWORD *)(v15 + 104), 3uLL, &v77);
  LODWORD(v77) = 0;
  std::vector<float>::vector((_QWORD *)(v15 + 128), 3uLL, &v77);
  LODWORD(v77) = 0;
  std::vector<float>::vector((_QWORD *)(v15 + 152), 3uLL, &v77);
  *(_QWORD *)(v15 + 176) = 0;
  *(_QWORD *)(v15 + 184) = 0;
  *(_QWORD *)(v15 + 192) = 0;
  v19 = operator new(0xCuLL);
  *(_QWORD *)(v15 + 184) = v19 + 3;
  *(_QWORD *)(v15 + 192) = v19 + 3;
  *(_QWORD *)v19 = 0x300000003;
  v19[2] = 3;
  *(_QWORD *)(v15 + 176) = v19;
  v20 = (uint64_t)(*(_QWORD *)(*a3 + 8) - *(_QWORD *)*a3) >> 2;
  *(_DWORD *)(v15 + 200) = v20 / 5;
  std::vector<DspLib::Biquad::Section>::vector((_QWORD *)(v15 + 208), (v20 / 5));
  v21 = (uint64_t)(*(_QWORD *)(*a3 + 8) - *(_QWORD *)*a3) >> 2;
  LODWORD(v77) = 0;
  std::vector<float>::vector((_QWORD *)(v15 + 232), v21, &v77);
  v22 = (uint64_t *)operator new();
  BiquadInterpolator::BiquadInterpolator(v22, a2, a3);
  *(_QWORD *)(v15 + 256) = v22;
  v23 = (uint64_t)(*(_QWORD *)(*a4 + 8) - *(_QWORD *)*a4) >> 2;
  *(_DWORD *)(v15 + 264) = v23 / 5;
  v68 = v15 + 272;
  std::vector<DspLib::Biquad::Section>::vector((_QWORD *)(v15 + 272), (v23 / 5));
  v24 = (uint64_t)(*(_QWORD *)(*a4 + 8) - *(_QWORD *)*a4) >> 2;
  LODWORD(v77) = 0;
  v67 = v15 + 296;
  std::vector<float>::vector((_QWORD *)(v15 + 296), v24, &v77);
  v25 = (uint64_t *)operator new();
  BiquadInterpolator::BiquadInterpolator(v25, a2, a4);
  *(_QWORD *)(v15 + 320) = v25;
  *(_BYTE *)(v15 + 328) = 0;
  *(_OWORD *)(v15 + 336) = 0u;
  *(_OWORD *)(v15 + 352) = 0u;
  *(_OWORD *)(v15 + 368) = 0u;
  *(_OWORD *)(v15 + 384) = 0u;
  *(_OWORD *)(v15 + 400) = 0u;
  *(_DWORD *)(v15 + 416) = 0;
  v66 = v15 + 328;
  v74 = (_QWORD *)v15;
  DspLib::Biquad::Filter::initialize((DspLib::Biquad::Filter *)(v15 + 328), v17, (*(_DWORD *)(v15 + 264) + *(_DWORD *)(v15 + 200)));
  DspLib::Biquad::SetupWrapper::reset((DspLib::Biquad::SetupWrapper *)(v15 + 376));
  v69 = a1;
  v27 = *(Meter ***)(v15 + 8);
  for (i = *(Meter ***)(v15 + 16); i != v27; std::unique_ptr<Meter>::reset[abi:ne180100](i))
    --i;
  v28 = 0;
  v72 = v16;
  *(_QWORD *)(v15 + 16) = v27;
  v29 = a5;
  do
  {
    v30 = *(float *)(v29 + 4);
    v31 = operator new();
    v33 = *(float *)(v29 + 8);
    v32 = *(float *)(v29 + 12);
    v34 = *(int32x2_t *)(v29 + 16);
    *(_BYTE *)v31 = 0;
    *(_OWORD *)(v31 + 8) = 0u;
    *(_OWORD *)(v31 + 24) = 0u;
    *(_OWORD *)(v31 + 40) = 0u;
    *(_OWORD *)(v31 + 56) = 0u;
    *(_QWORD *)(v31 + 72) = 0;
    v76 = 0;
    std::vector<float>::vector(&v77, v18, &v76);
    std::vector<std::vector<float>>::vector((_QWORD *)(v31 + 80), v17, (uint64_t)&v77);
    if (v77)
    {
      v78 = v77;
      operator delete(v77);
    }
    v77 = 0;
    std::vector<float *>::vector((_QWORD *)(v31 + 104), v17, &v77);
    v76 = 0;
    std::vector<float>::vector(&v77, v18, &v76);
    std::vector<std::vector<float>>::vector((_QWORD *)(v31 + 128), v17, (uint64_t)&v77);
    if (v77)
    {
      v78 = v77;
      operator delete(v77);
    }
    v77 = 0;
    std::vector<float *>::vector((_QWORD *)(v31 + 152), v17, &v77);
    LODWORD(v77) = 0;
    std::vector<float>::vector((_QWORD *)(v31 + 176), v18, &v77);
    LODWORD(v77) = 1065353216;
    std::vector<float>::vector((_QWORD *)(v31 + 200), 8uLL, &v77);
    *(_DWORD *)(v31 + 224) = v30;
    *(_DWORD *)(v31 + 228) = v72;
    *(_DWORD *)(v31 + 232) = v17;
    *(_DWORD *)(v31 + 236) = v18;
    *(int32x2_t *)(v31 + 240) = vrev64_s32(v34);
    DspLib::Biquad::Filter::initialize((DspLib::Biquad::Filter *)v31, v17, 3uLL);
    v35 = operator new();
    *(float *)v35 = (float)*(unsigned int *)(v31 + 228);
    *(_DWORD *)(v35 + 20) = 2;
    *(_BYTE *)(v35 + 24) = 0;
    *(_DWORD *)(v35 + 28) = 0;
    *(_BYTE *)(v35 + 32) = 0;
    EnvelopeDetector::SetAttackTime((EnvelopeDetector *)v35, 0.0);
    EnvelopeDetector::SetReleaseTime((EnvelopeDetector *)v35, 0.0);
    v36 = *(_QWORD *)(v31 + 72);
    *(_QWORD *)(v31 + 72) = v35;
    if (v36)
    {
      MEMORY[0x1BCC95CEC](v36, 0x1000C407BE137D4);
      v35 = *(_QWORD *)(v31 + 72);
    }
    *(_DWORD *)(v35 + 20) = 3;
    EnvelopeDetector::SetAttackTime((EnvelopeDetector *)v35, v33);
    EnvelopeDetector::SetReleaseTime(*(EnvelopeDetector **)(v31 + 72), v32);
    v37 = *(unsigned int *)(v31 + 232);
    if ((_DWORD)v37)
    {
      v38 = 0;
      v39 = 0;
      v40 = 24 * v37;
      do
      {
        *(_QWORD *)(*(_QWORD *)(v31 + 104) + v38) = *(_QWORD *)(*(_QWORD *)(v31 + 80) + v39);
        *(_QWORD *)(*(_QWORD *)(v31 + 152) + v38) = *(_QWORD *)(*(_QWORD *)(v31 + 128) + v39);
        v39 += 24;
        v38 += 8;
      }
      while (v40 != v39);
    }
    Meter::SetMeterType(v31, *(_DWORD *)(v31 + 224), *(float *)(v31 + 244), *(float *)(v31 + 240));
    v75 = (Meter *)v31;
    v41 = v74;
    v43 = (uint64_t *)v74[2];
    v42 = v74[3];
    if ((unint64_t)v43 >= v42)
    {
      v44 = *v71;
      v45 = v43 - *v71;
      v46 = v45 + 1;
      if ((unint64_t)(v45 + 1) >> 61)
        std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
      v47 = v42 - (_QWORD)v44;
      if (v47 >> 2 > v46)
        v46 = v47 >> 2;
      if ((unint64_t)v47 >= 0x7FFFFFFFFFFFFFF8)
        v48 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v48 = v46;
      if (v48)
      {
        if (v48 >> 61)
          std::__throw_bad_array_new_length[abi:ne180100]();
        v49 = (char *)operator new(8 * v48);
      }
      else
      {
        v49 = 0;
      }
      v50 = (uint64_t *)&v49[8 * v45];
      v75 = 0;
      *v50 = v31;
      v51 = v50 + 1;
      if (v43 == v44)
      {
        v54 = 0;
        v53 = vdupq_n_s64((unint64_t)v43);
        v41 = v74;
      }
      else
      {
        v41 = v74;
        do
        {
          v52 = *--v43;
          *v43 = 0;
          *--v50 = v52;
        }
        while (v43 != v44);
        v53 = *(int64x2_t *)v71;
        v54 = v75;
      }
      v41[1] = v50;
      v41[2] = v51;
      v41[3] = &v49[8 * v48];
      v56 = (Meter **)v53.i64[1];
      v55 = (Meter **)v53.i64[0];
      while (v56 != v55)
        std::unique_ptr<Meter>::reset[abi:ne180100](--v56);
      if (v55)
        operator delete(v55);
      v41[2] = v51;
      if (v54)
      {
        Meter::~Meter(v54);
        MEMORY[0x1BCC95CEC](v57, 0x10A0C40C65DD443, v58, v59, v60, v61, v62, v63, v66, v67, v68);
      }
    }
    else
    {
      *v43 = v31;
      v74[2] = v43 + 1;
    }
    ++v28;
    v29 = a5 + 44 * v28;
  }
  while (v28 != 3);
  std::vector<std::vector<float>>::__clear[abi:ne180100](v70);
  v65 = v41[1];
  v64 = v41[2];
  LODWORD(v75) = 0;
  std::vector<float>::vector(&v77, v18, &v75);
  std::vector<std::vector<float>>::resize(v70, (v64 - v65) >> 3, (uint64_t)&v77);
  if (v77)
  {
    v78 = v77;
    operator delete(v77);
  }
  *v69 = v41;
}

void sub_1B6353CC0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, DspLib::Biquad::Filter *a9, void **a10, void **a11, void **a12, void **a13, void **a14, void **a15, void **a16, void **a17, void **a18, void **a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,_QWORD *a25,uint64_t a26,char a27)
{
  uint64_t v27;
  void *v29;
  uint64_t v30;
  void *v31;
  void *v32;
  uint64_t v33;
  void *v34;
  void *v35;
  void *v36;
  void *v37;
  void *v38;
  void *v39;
  void *v40;

  v29 = *(void **)(v27 - 144);
  if (v29)
  {
    *(_QWORD *)(v27 - 136) = v29;
    operator delete(v29);
  }
  DspLib::Biquad::Filter::~Filter(a9);
  v30 = a25[40];
  a25[40] = 0;
  if (v30)
    std::default_delete<BiquadInterpolator>::operator()[abi:ne180100](v30);
  v31 = *a10;
  if (*a10)
  {
    a25[38] = v31;
    operator delete(v31);
  }
  v32 = *a11;
  if (*a11)
  {
    a25[35] = v32;
    operator delete(v32);
  }
  v33 = a25[32];
  a25[32] = 0;
  if (v33)
    std::default_delete<BiquadInterpolator>::operator()[abi:ne180100](v33);
  v34 = *a12;
  if (*a12)
  {
    a25[30] = v34;
    operator delete(v34);
  }
  v35 = *a13;
  if (*a13)
  {
    a25[27] = v35;
    operator delete(v35);
  }
  v36 = *a14;
  if (*a14)
  {
    a25[23] = v36;
    operator delete(v36);
  }
  v37 = *a15;
  if (*a15)
  {
    a25[20] = v37;
    operator delete(v37);
  }
  v38 = *a16;
  if (*a16)
  {
    a25[17] = v38;
    operator delete(v38);
  }
  v39 = *a17;
  if (*a17)
  {
    a25[14] = v39;
    operator delete(v39);
  }
  v40 = *a18;
  if (*a18)
  {
    a25[11] = v40;
    operator delete(v40);
  }
  if (*a19)
    operator delete(*a19);
  *(_QWORD *)(v27 - 144) = a21;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v27 - 144));
  *(_QWORD *)(v27 - 144) = a22;
  std::vector<std::unique_ptr<Meter>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v27 - 144));
  MEMORY[0x1BCC95CEC](a25, 0x10B0C4052777E08);
  _Unwind_Resume(a1);
}

os_log_t ___Z25AULoudnessWarriorLogScopev_block_invoke()
{
  _QWORD *v0;
  os_log_t result;

  v0 = (_QWORD *)operator new();
  v0[1] = 0;
  result = os_log_create("com.apple.coreaudio", "auloud");
  *v0 = result;
  AULoudnessWarriorLogScope(void)::scope = (uint64_t)v0;
  return result;
}

uint64_t ca::concurrent::deferred_deletion_queue<AULoudnessWarriorKernel,10ul,std::default_delete<AULoudnessWarriorKernel>>::~deferred_deletion_queue(uint64_t a1)
{
  AULoudnessWarriorKernel *v3;

  *(_QWORD *)a1 = &off_1E69D4B58;
  ca::concurrent::deferred_deletion_queue<AULoudnessWarriorKernel,10ul,std::default_delete<AULoudnessWarriorKernel>>::drain_trash(a1);
  v3 = 0;
  while (boost::lockfree::queue<std::vector<std::vector<float>> *,boost::lockfree::capacity<10ul>>::pop<std::vector<std::vector<float>> *>((unsigned int *)(a1 + 64), &v3))
  {
    if (v3)
    {
      AULoudnessWarriorKernel::~AULoudnessWarriorKernel(v3);
      MEMORY[0x1BCC95CEC]();
    }
  }
  boost::lockfree::queue<std::vector<std::vector<float>> *,boost::lockfree::capacity<10ul>>::~queue((unsigned int *)(a1 + 1024));
  boost::lockfree::queue<std::vector<std::vector<float>> *,boost::lockfree::capacity<10ul>>::~queue((unsigned int *)(a1 + 64));
  return a1;
}

void ca::concurrent::deferred_deletion_queue<AULoudnessWarriorKernel,10ul,std::default_delete<AULoudnessWarriorKernel>>::~deferred_deletion_queue(uint64_t a1)
{
  ca::concurrent::deferred_deletion_queue<AULoudnessWarriorKernel,10ul,std::default_delete<AULoudnessWarriorKernel>>::~deferred_deletion_queue(a1);
  JUMPOUT(0x1BCC95CE0);
}

_QWORD *ca::concurrent::deferred_deletion_stash<AULoudnessWarriorKernel,10ul,std::default_delete<AULoudnessWarriorKernel>>::~deferred_deletion_stash(_QWORD *a1)
{
  *a1 = &off_1E69D4B38;
  ca::concurrent::deferred_deletion_queue<AULoudnessWarriorKernel,10ul,std::default_delete<AULoudnessWarriorKernel>>::~deferred_deletion_queue((uint64_t)(a1 + 8));
  return a1;
}

void ca::concurrent::deferred_deletion_stash<AULoudnessWarriorKernel,10ul,std::default_delete<AULoudnessWarriorKernel>>::~deferred_deletion_stash(_QWORD *a1)
{
  *a1 = &off_1E69D4B38;
  ca::concurrent::deferred_deletion_queue<AULoudnessWarriorKernel,10ul,std::default_delete<AULoudnessWarriorKernel>>::~deferred_deletion_queue((uint64_t)(a1 + 8));
  JUMPOUT(0x1BCC95CE0);
}

void clsp::ConvoyDisplacementController::~ConvoyDisplacementController(clsp::ConvoyDisplacementController *this)
{
  clsp::ConvoyDisplacementController::~ConvoyDisplacementController(this);
  JUMPOUT(0x1BCC95CECLL);
}

{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  *(_QWORD *)this = &off_1E69D4B98;
  std::shared_ptr<vp::services::Telephony_Utility>::~shared_ptr[abi:ne180100]((uint64_t)this + 896);
  std::shared_ptr<vp::services::Telephony_Utility>::~shared_ptr[abi:ne180100]((uint64_t)this + 816);
  v2 = (void *)*((_QWORD *)this + 41);
  if (v2)
  {
    *((_QWORD *)this + 42) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 38);
  if (v3)
  {
    *((_QWORD *)this + 39) = v3;
    operator delete(v3);
  }
  v4 = (void *)*((_QWORD *)this + 35);
  if (v4)
  {
    *((_QWORD *)this + 36) = v4;
    operator delete(v4);
  }
  v5 = (void *)*((_QWORD *)this + 32);
  if (v5)
  {
    *((_QWORD *)this + 33) = v5;
    operator delete(v5);
  }
  v6 = (void *)*((_QWORD *)this + 29);
  if (v6)
  {
    *((_QWORD *)this + 30) = v6;
    operator delete(v6);
  }
  v7 = (void *)*((_QWORD *)this + 26);
  if (v7)
  {
    *((_QWORD *)this + 27) = v7;
    operator delete(v7);
  }
  v8 = (void *)*((_QWORD *)this + 23);
  if (v8)
  {
    *((_QWORD *)this + 24) = v8;
    operator delete(v8);
  }
  v9 = *((_QWORD *)this + 19);
  *((_QWORD *)this + 19) = 0;
  if (v9)
    MEMORY[0x1BCC95CEC](v9, 0x1000C40FF89C88ELL);
  v10 = *((_QWORD *)this + 18);
  *((_QWORD *)this + 18) = 0;
  if (v10)
    MEMORY[0x1BCC95CEC](v10, 0x1000C40FF89C88ELL);
  v11 = *((_QWORD *)this + 17);
  *((_QWORD *)this + 17) = 0;
  if (v11)
    MEMORY[0x1BCC95CEC](v11, 0x1000C40FF89C88ELL);
}

_QWORD *clsp::ConvoyDisplacementController::dump(uint64_t a1, _QWORD *a2)
{
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *v18;
  _QWORD *v19;
  _QWORD *v20;
  _QWORD *v21;
  _QWORD *v22;
  _QWORD *v23;
  _QWORD *v24;
  _QWORD *v25;
  _QWORD *v26;
  _QWORD *v27;
  _QWORD *v28;
  _QWORD *v29;
  _QWORD *v30;
  _QWORD *v31;
  _QWORD *v32;
  _QWORD *v33;
  _QWORD *v34;
  _QWORD *v35;
  _QWORD *v36;
  _QWORD *v37;
  _QWORD *v38;
  _QWORD *v39;
  _QWORD *v40;
  _QWORD *v41;
  _QWORD *v42;
  char v44;

  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"g_bw = ", 7);
  v4 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"\nx_lim = ", 9);
  v5 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"\nQ_d = ", 7);
  v6 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"\npeakAttackTime = ", 18);
  v7 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"\npeakDecayTime = ", 17);
  v8 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"\nflvSmoothingTime = ", 20);
  v9 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"\npeakFinderWindowTime_ms = ", 27);
  v10 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"\nms_x_lim = ", 12);
  v11 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"\ninvxlim = ", 11);
  v12 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)"\nptp_x_flv = ", 13);
  v13 = (_QWORD *)std::ostream::operator<<();
  v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"\n\nptp:\n", 7);
  clsp::IIRTwoPole<float>::dump(a1 + 88, v14);
  v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)"\nflv:\n", 6);
  clsp::IIRTwoPole<float>::dump(a1 + 108, v15);
  v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"\nconvoyModel:\n", 14);
  clsp::IIRTwoPole<float>::dump(a1 + 160, v16);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"\nrelative posPeakFinderThreshold = ", 35);
  v17 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)"\nrelative negPeakFinderThreshold = ", 35);
  v18 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)"\npeakFinderWindowSize = ", 24);
  v19 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)"\nposPeakFinderthreshold = ", 26);
  v20 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)"\nnegPeakFinderThreshold = ", 26);
  v21 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)"\nxLimInc = ", 11);
  v22 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)"\nxMin = ", 8);
  v23 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)"\nxMax = ", 8);
  v24 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)"\nxLimUpper = ", 13);
  v25 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)"\nxLimUpperReal = ", 17);
  v26 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, (uint64_t)"\nxLimLower = ", 13);
  v27 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)"\nxLimInit = ", 12);
  v28 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, (uint64_t)"\ninvxLimInit = ", 15);
  v29 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, (uint64_t)"\nMaxNormFactor = ", 17);
  v30 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30, (uint64_t)"\nMinNormFactor = ", 17);
  v31 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v31, (uint64_t)"\nPeakRatioPosBlockThreshold = ", 30);
  v32 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)"\nPeakRationNegBlockThreshold = ", 31);
  v33 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v33, (uint64_t)"\nPeakRatiosInWindowCountThreshold = ", 36);
  v34 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v34, (uint64_t)"\nnormFactorThreshold = ", 23);
  v35 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v35, (uint64_t)"\nmp_ConvoyBufferDirtyCountThreshold = ", 38);
  v36 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v36, (uint64_t)"\nmc_ConvoyBufferDirtyCountThreshold = ", 38);
  v37 = (_QWORD *)std::ostream::operator<<();
  v38 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v37, (uint64_t)"\nptpAtkRel:\n", 12);
  clsp::AttackRelease<float,double>::dump(a1 + 528, v38);
  v39 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v38, (uint64_t)"\nflvTime:\n", 10);
  clsp::AttackRelease<float,double>::dump(a1 + 568, v39);
  v40 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v39, (uint64_t)"\nflvSmoother:\n", 14);
  clsp::ExponentialSmoother<float,double>::dump(a1 + 608, v40);
  v41 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v40, (uint64_t)"\nlfsn:\n", 7);
  clsp::LFSN::dump(a1 + 784, v41);
  v42 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v41, (uint64_t)"\nmodelNormFactor:\n", 18);
  clsp::AttackRelease<float,double>::dump(a1 + 704, v42);
  v44 = 10;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v42, (uint64_t)&v44, 1);
  return a2;
}

void clsp::ConvoyDisplacementController::logCoeffs(uint64_t a1, clsp::CLSP_Log **a2)
{
  clsp::CLSP_Log *v4;
  float v5;
  clsp::CLSP_Log *v6;
  float v7;
  clsp::CLSP_Log *v8;
  float v9;
  clsp::CLSP_Log *v10;
  float v11;
  clsp::CLSP_Log *v12;
  float v13;
  clsp::CLSP_Log *v14;
  float v15;
  clsp::CLSP_Log *v16;
  float v17;
  clsp::CLSP_Log *v18;
  clsp::CLSP_Log *v19;
  clsp::CLSP_Log *v20;
  clsp::CLSP_Log *v21;
  clsp::CLSP_Log *v22;
  clsp::CLSP_Log *v23;
  clsp::CLSP_Log *v24;
  clsp::CLSP_Log *v25;
  clsp::CLSP_Log *v26;
  clsp::CLSP_Log *v27;
  clsp::CLSP_Log *v28;
  clsp::CLSP_Log *v29;
  clsp::CLSP_Log *v30;
  clsp::CLSP_Log *v31;
  clsp::CLSP_Log *v32;
  clsp::CLSP_Log *v33;
  clsp::CLSP_Log *v34;
  clsp::CLSP_Log *v35;
  clsp::CLSP_Log *v36;
  clsp::CLSP_Log *v37;
  clsp::CLSP_Log *v38;
  clsp::CLSP_Log *v39;
  clsp::CLSP_Log *v40;
  clsp::CLSP_Log *v41;
  float *v42;
  clsp::CLSP_Log *v43;
  unint64_t *v44;
  unint64_t v45;
  unint64_t v46;
  float *v47;
  clsp::CLSP_Log *v48;
  unint64_t *v49;
  unint64_t v50;
  unint64_t v51;
  float *v52;
  clsp::CLSP_Log *v53;
  unint64_t *v54;
  unint64_t v55;
  unint64_t v56;
  uint64_t v57;
  clsp::CLSP_Log *v58;
  unint64_t *v59;
  unint64_t v60;
  __n128 v61;
  unint64_t v62;
  uint64_t v63;
  clsp::CLSP_Log *v64;
  unint64_t *v65;
  unint64_t v66;
  __n128 v67;
  unint64_t v68;
  uint64_t v69;
  clsp::CLSP_Log *v70;
  unint64_t *v71;
  unint64_t v72;
  unint64_t v73;
  uint64_t v74;
  clsp::CLSP_Log *v75;
  unint64_t *v76;
  unint64_t v77;
  unint64_t v78;
  uint64_t v79;
  clsp::CLSP_Log *v80;
  unint64_t *v81;
  unint64_t v82;
  unint64_t v83;
  uint64_t v84;
  clsp::CLSP_Log *v85;
  unint64_t *v86;
  unint64_t v87;
  __n128 v88;
  unint64_t v89;
  uint64_t v90;
  clsp::CLSP_Log *v91;
  unint64_t *v92;
  unint64_t v93;
  __n128 v94;
  unint64_t v95;
  clsp::CLSP_Log *v96;
  std::__shared_weak_count *v97;
  unint64_t *p_shared_owners;
  unint64_t v99;
  unint64_t *v100;
  unint64_t v101;
  _QWORD v102[2];
  clsp::CLSP_Log *v103[2];
  clsp::CLSP_Log *v104[2];
  clsp::CLSP_Log *v105[2];
  clsp::CLSP_Log *v106[2];
  clsp::CLSP_Log *v107[2];
  clsp::CLSP_Log *v108[2];
  clsp::CLSP_Log *v109[2];
  clsp::CLSP_Log *v110[2];
  clsp::CLSP_Log *v111[2];
  clsp::CLSP_Log *v112[2];
  float __src;

  v4 = *a2;
  if (!*a2)
    goto LABEL_32;
  v5 = *(double *)(a1 + 16);
  __src = v5;
  clsp::CLSP_Log::LogCLSPData(v4, &__src, 1);
  v6 = *a2;
  if (!*a2)
    goto LABEL_32;
  v7 = *(double *)(a1 + 24);
  __src = v7;
  clsp::CLSP_Log::LogCLSPData(v6, &__src, 1);
  v8 = *a2;
  if (!*a2)
    goto LABEL_32;
  v9 = *(double *)(a1 + 32);
  __src = v9;
  clsp::CLSP_Log::LogCLSPData(v8, &__src, 1);
  v10 = *a2;
  if (!*a2)
    goto LABEL_32;
  v11 = *(double *)(a1 + 40);
  __src = v11;
  clsp::CLSP_Log::LogCLSPData(v10, &__src, 1);
  v12 = *a2;
  if (!*a2)
    goto LABEL_32;
  v13 = *(double *)(a1 + 48);
  __src = v13;
  clsp::CLSP_Log::LogCLSPData(v12, &__src, 1);
  v14 = *a2;
  if (!*a2)
    goto LABEL_32;
  v15 = *(double *)(a1 + 56);
  __src = v15;
  clsp::CLSP_Log::LogCLSPData(v14, &__src, 1);
  v16 = *a2;
  if (!*a2)
    goto LABEL_32;
  v17 = *(double *)(a1 + 64);
  __src = v17;
  clsp::CLSP_Log::LogCLSPData(v16, &__src, 1);
  v18 = *a2;
  if (!*a2)
    goto LABEL_32;
  __src = *(float *)(a1 + 76);
  clsp::CLSP_Log::LogCLSPData(v18, &__src, 1);
  v19 = *a2;
  if (!*a2)
    goto LABEL_32;
  __src = *(float *)(a1 + 80);
  clsp::CLSP_Log::LogCLSPData(v19, &__src, 1);
  v20 = *a2;
  if (!*a2)
    goto LABEL_32;
  __src = *(float *)(a1 + 352);
  clsp::CLSP_Log::LogCLSPData(v20, &__src, 1);
  v21 = *a2;
  if (!*a2)
    goto LABEL_32;
  __src = *(float *)(a1 + 356);
  clsp::CLSP_Log::LogCLSPData(v21, &__src, 1);
  v22 = *a2;
  if (!*a2)
    goto LABEL_32;
  __src = (float)*(unint64_t *)(a1 + 360);
  clsp::CLSP_Log::LogCLSPData(v22, &__src, 1);
  v23 = *a2;
  if (!*a2)
    goto LABEL_32;
  __src = *(float *)(a1 + 368);
  clsp::CLSP_Log::LogCLSPData(v23, &__src, 1);
  v24 = *a2;
  if (!*a2)
    goto LABEL_32;
  __src = *(float *)(a1 + 372);
  clsp::CLSP_Log::LogCLSPData(v24, &__src, 1);
  v25 = *a2;
  if (!*a2)
    goto LABEL_32;
  __src = *(float *)(a1 + 376);
  clsp::CLSP_Log::LogCLSPData(v25, &__src, 1);
  v26 = *a2;
  if (!*a2)
    goto LABEL_32;
  __src = *(float *)(a1 + 380);
  clsp::CLSP_Log::LogCLSPData(v26, &__src, 1);
  v27 = *a2;
  if (!*a2)
    goto LABEL_32;
  __src = *(float *)(a1 + 384);
  clsp::CLSP_Log::LogCLSPData(v27, &__src, 1);
  v28 = *a2;
  if (!*a2)
    goto LABEL_32;
  __src = *(float *)(a1 + 388);
  clsp::CLSP_Log::LogCLSPData(v28, &__src, 1);
  v29 = *a2;
  if (!*a2)
    goto LABEL_32;
  __src = *(float *)(a1 + 392);
  clsp::CLSP_Log::LogCLSPData(v29, &__src, 1);
  v30 = *a2;
  if (!*a2)
    goto LABEL_32;
  __src = *(float *)(a1 + 396);
  clsp::CLSP_Log::LogCLSPData(v30, &__src, 1);
  v31 = *a2;
  if (!*a2)
    goto LABEL_32;
  __src = *(float *)(a1 + 400);
  clsp::CLSP_Log::LogCLSPData(v31, &__src, 1);
  v32 = *a2;
  if (!*a2)
    goto LABEL_32;
  __src = *(float *)(a1 + 404);
  clsp::CLSP_Log::LogCLSPData(v32, &__src, 1);
  v33 = *a2;
  if (!*a2)
    goto LABEL_32;
  __src = *(float *)(a1 + 460);
  clsp::CLSP_Log::LogCLSPData(v33, &__src, 1);
  v34 = *a2;
  if (!*a2)
    goto LABEL_32;
  __src = *(float *)(a1 + 464);
  clsp::CLSP_Log::LogCLSPData(v34, &__src, 1);
  v35 = *a2;
  if (!*a2)
    goto LABEL_32;
  __src = *(float *)(a1 + 468);
  clsp::CLSP_Log::LogCLSPData(v35, &__src, 1);
  v36 = *a2;
  if (!*a2)
    goto LABEL_32;
  __src = *(float *)(a1 + 472);
  clsp::CLSP_Log::LogCLSPData(v36, &__src, 1);
  v37 = *a2;
  if (!*a2)
    goto LABEL_32;
  __src = *(float *)(a1 + 480);
  clsp::CLSP_Log::LogCLSPData(v37, &__src, 1);
  v38 = *a2;
  if (!*a2)
    goto LABEL_32;
  __src = *(float *)(a1 + 488);
  clsp::CLSP_Log::LogCLSPData(v38, &__src, 1);
  v39 = *a2;
  if (*a2 && (__src = *(float *)(a1 + 492), clsp::CLSP_Log::LogCLSPData(v39, &__src, 1), (v40 = *a2) != 0))
  {
    __src = *(float *)(a1 + 496);
    clsp::CLSP_Log::LogCLSPData(v40, &__src, 1);
    v41 = *a2;
  }
  else
  {
LABEL_32:
    v41 = 0;
  }
  v42 = (float *)(a1 + 88);
  v43 = a2[1];
  v112[0] = v41;
  v112[1] = v43;
  if (v43)
  {
    v44 = (unint64_t *)((char *)v43 + 8);
    do
      v45 = __ldxr(v44);
    while (__stxr(v45 + 1, v44));
    clsp::IIRTwoPole<float>::logCoeffs(v42, v112);
    do
      v46 = __ldaxr(v44);
    while (__stlxr(v46 - 1, v44));
    if (!v46)
    {
      (*(void (**)(clsp::CLSP_Log *))(*(_QWORD *)v43 + 16))(v43);
      std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v43);
    }
  }
  else
  {
    clsp::IIRTwoPole<float>::logCoeffs(v42, v112);
  }
  v47 = (float *)(a1 + 108);
  v48 = a2[1];
  v111[0] = *a2;
  v111[1] = v48;
  if (v48)
  {
    v49 = (unint64_t *)((char *)v48 + 8);
    do
      v50 = __ldxr(v49);
    while (__stxr(v50 + 1, v49));
    clsp::IIRTwoPole<float>::logCoeffs(v47, v111);
    do
      v51 = __ldaxr(v49);
    while (__stlxr(v51 - 1, v49));
    if (!v51)
    {
      (*(void (**)(clsp::CLSP_Log *))(*(_QWORD *)v48 + 16))(v48);
      std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v48);
    }
  }
  else
  {
    clsp::IIRTwoPole<float>::logCoeffs(v47, v111);
  }
  v52 = (float *)(a1 + 160);
  v53 = a2[1];
  v110[0] = *a2;
  v110[1] = v53;
  if (v53)
  {
    v54 = (unint64_t *)((char *)v53 + 8);
    do
      v55 = __ldxr(v54);
    while (__stxr(v55 + 1, v54));
    clsp::IIRTwoPole<float>::logCoeffs(v52, v110);
    do
      v56 = __ldaxr(v54);
    while (__stlxr(v56 - 1, v54));
    if (!v56)
    {
      (*(void (**)(clsp::CLSP_Log *))(*(_QWORD *)v53 + 16))(v53);
      std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v53);
    }
  }
  else
  {
    clsp::IIRTwoPole<float>::logCoeffs(v52, v110);
  }
  v57 = a1 + 528;
  v58 = a2[1];
  v109[0] = *a2;
  v109[1] = v58;
  if (v58)
  {
    v59 = (unint64_t *)((char *)v58 + 8);
    do
      v60 = __ldxr(v59);
    while (__stxr(v60 + 1, v59));
    v61.n128_f32[0] = clsp::AttackRelease<float,double>::logCoeffs(v57, v109);
    do
      v62 = __ldaxr(v59);
    while (__stlxr(v62 - 1, v59));
    if (!v62)
    {
      (*(void (**)(clsp::CLSP_Log *, __n128))(*(_QWORD *)v58 + 16))(v58, v61);
      std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v58);
    }
  }
  else
  {
    clsp::AttackRelease<float,double>::logCoeffs(v57, v109);
  }
  v63 = a1 + 568;
  v64 = a2[1];
  v108[0] = *a2;
  v108[1] = v64;
  if (v64)
  {
    v65 = (unint64_t *)((char *)v64 + 8);
    do
      v66 = __ldxr(v65);
    while (__stxr(v66 + 1, v65));
    v67.n128_f32[0] = clsp::AttackRelease<float,double>::logCoeffs(v63, v108);
    do
      v68 = __ldaxr(v65);
    while (__stlxr(v68 - 1, v65));
    if (!v68)
    {
      (*(void (**)(clsp::CLSP_Log *, __n128))(*(_QWORD *)v64 + 16))(v64, v67);
      std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v64);
    }
  }
  else
  {
    clsp::AttackRelease<float,double>::logCoeffs(v63, v108);
  }
  v69 = a1 + 608;
  v70 = a2[1];
  v107[0] = *a2;
  v107[1] = v70;
  if (v70)
  {
    v71 = (unint64_t *)((char *)v70 + 8);
    do
      v72 = __ldxr(v71);
    while (__stxr(v72 + 1, v71));
    clsp::ExponentialSmoother<float,double>::logCoeffs(v69, v107);
    do
      v73 = __ldaxr(v71);
    while (__stlxr(v73 - 1, v71));
    if (!v73)
    {
      (*(void (**)(clsp::CLSP_Log *))(*(_QWORD *)v70 + 16))(v70);
      std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v70);
    }
  }
  else
  {
    clsp::ExponentialSmoother<float,double>::logCoeffs(v69, v107);
  }
  v74 = a1 + 624;
  v75 = a2[1];
  v106[0] = *a2;
  v106[1] = v75;
  if (v75)
  {
    v76 = (unint64_t *)((char *)v75 + 8);
    do
      v77 = __ldxr(v76);
    while (__stxr(v77 + 1, v76));
    clsp::AttackReleaseTo<float,double>::logCoeffs(v74, v106);
    do
      v78 = __ldaxr(v76);
    while (__stlxr(v78 - 1, v76));
    if (!v78)
    {
      (*(void (**)(clsp::CLSP_Log *))(*(_QWORD *)v75 + 16))(v75);
      std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v75);
    }
  }
  else
  {
    clsp::AttackReleaseTo<float,double>::logCoeffs(v74, v106);
  }
  v79 = a1 + 664;
  v80 = a2[1];
  v105[0] = *a2;
  v105[1] = v80;
  if (v80)
  {
    v81 = (unint64_t *)((char *)v80 + 8);
    do
      v82 = __ldxr(v81);
    while (__stxr(v82 + 1, v81));
    clsp::AttackReleaseTo<float,double>::logCoeffs(v79, v105);
    do
      v83 = __ldaxr(v81);
    while (__stlxr(v83 - 1, v81));
    if (!v83)
    {
      (*(void (**)(clsp::CLSP_Log *))(*(_QWORD *)v80 + 16))(v80);
      std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v80);
    }
  }
  else
  {
    clsp::AttackReleaseTo<float,double>::logCoeffs(v79, v105);
  }
  v84 = a1 + 704;
  v85 = a2[1];
  v104[0] = *a2;
  v104[1] = v85;
  if (v85)
  {
    v86 = (unint64_t *)((char *)v85 + 8);
    do
      v87 = __ldxr(v86);
    while (__stxr(v87 + 1, v86));
    v88.n128_f32[0] = clsp::AttackRelease<float,double>::logCoeffs(v84, v104);
    do
      v89 = __ldaxr(v86);
    while (__stlxr(v89 - 1, v86));
    if (!v89)
    {
      (*(void (**)(clsp::CLSP_Log *, __n128))(*(_QWORD *)v85 + 16))(v85, v88);
      std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v85);
    }
  }
  else
  {
    clsp::AttackRelease<float,double>::logCoeffs(v84, v104);
  }
  v90 = a1 + 744;
  v91 = a2[1];
  v103[0] = *a2;
  v103[1] = v91;
  if (v91)
  {
    v92 = (unint64_t *)((char *)v91 + 8);
    do
      v93 = __ldxr(v92);
    while (__stxr(v93 + 1, v92));
    v94.n128_f32[0] = clsp::AttackRelease<float,double>::logCoeffs(v90, v103);
    do
      v95 = __ldaxr(v92);
    while (__stlxr(v95 - 1, v92));
    if (!v95)
    {
      (*(void (**)(clsp::CLSP_Log *, __n128))(*(_QWORD *)v91 + 16))(v91, v94);
      std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v91);
    }
  }
  else
  {
    clsp::AttackRelease<float,double>::logCoeffs(v90, v103);
  }
  v96 = *a2;
  v97 = (std::__shared_weak_count *)a2[1];
  v102[0] = v96;
  v102[1] = v97;
  if (v97)
  {
    p_shared_owners = (unint64_t *)&v97->__shared_owners_;
    do
      v99 = __ldxr(p_shared_owners);
    while (__stxr(v99 + 1, p_shared_owners));
  }
  clsp::LFSN::logCoeffs((float *)(a1 + 784), (uint64_t)v102);
  if (v97)
  {
    v100 = (unint64_t *)&v97->__shared_owners_;
    do
      v101 = __ldaxr(v100);
    while (__stlxr(v101 - 1, v100));
    if (!v101)
    {
      ((void (*)(std::__shared_weak_count *))v97->__on_zero_shared)(v97);
      std::__shared_weak_count::__release_weak(v97);
    }
  }
}

void sub_1B6354E5C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::shared_ptr<vp::services::Telephony_Utility>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t clsp::ConvoyDisplacementController::setG_bw(uint64_t this, double a2)
{
  *(double *)(this + 16) = a2;
  return this;
}

double clsp::ConvoyDisplacementController::getG_bw(clsp::ConvoyDisplacementController *this)
{
  return *((double *)this + 2);
}

uint64_t clsp::ConvoyDisplacementController::setX_lim(uint64_t this, double a2)
{
  *(double *)(this + 24) = a2;
  return this;
}

double clsp::ConvoyDisplacementController::getX_lim(clsp::ConvoyDisplacementController *this)
{
  return *((double *)this + 3);
}

uint64_t clsp::ConvoyDisplacementController::setQ_d(uint64_t this, double a2)
{
  *(double *)(this + 32) = a2;
  return this;
}

double clsp::ConvoyDisplacementController::getQ_d(clsp::ConvoyDisplacementController *this)
{
  return *((double *)this + 4);
}

double *clsp::ConvoyDisplacementController::setPeakAttackTime(double *this, double a2)
{
  this[5] = a2;
  this[66] = a2;
  this[71] = a2;
  return this;
}

double clsp::ConvoyDisplacementController::getPeakAttackTime(clsp::ConvoyDisplacementController *this)
{
  return *((double *)this + 5);
}

double *clsp::ConvoyDisplacementController::setPeakDecayTime(double *this, double a2)
{
  this[6] = a2;
  this[67] = a2;
  this[72] = a2;
  return this;
}

double clsp::ConvoyDisplacementController::getPeakDecayTime(clsp::ConvoyDisplacementController *this)
{
  return *((double *)this + 6);
}

uint64_t clsp::ConvoyDisplacementController::setFlvSmoothingTime(uint64_t this, double a2)
{
  *(double *)(this + 56) = a2;
  return this;
}

double clsp::ConvoyDisplacementController::getFlvSmoothingTime(clsp::ConvoyDisplacementController *this)
{
  return *((double *)this + 7);
}

uint64_t clsp::ConvoyDisplacementController::getLFSN(clsp::ConvoyDisplacementController *this)
{
  return (uint64_t)this + 784;
}

uint64_t clsp::ConvoyDisplacementController::setDispEnabled(uint64_t this, char a2)
{
  *(_BYTE *)(this + 72) = a2;
  return this;
}

uint64_t clsp::ConvoyDisplacementController::getDispEnabled(clsp::ConvoyDisplacementController *this)
{
  return *((unsigned __int8 *)this + 72);
}

uint64_t clsp::ConvoyDisplacementController::setAttenuationFactor(uint64_t this, float a2)
{
  *(float *)(this + 84) = a2;
  return this;
}

float clsp::ConvoyDisplacementController::getAttenuationFactor(clsp::ConvoyDisplacementController *this)
{
  return *((float *)this + 21);
}

float clsp::ConvoyDisplacementController::calcCoeffs(clsp::ConvoyDisplacementController *this, double a2, double a3)
{
  double *v4;
  float v7;
  float v8;
  float v9;
  float v10;
  float v11;
  double *v12;
  double v13;
  double v14;
  float v15;
  double *v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  float v22;
  float result;

  v4 = (double *)*((_QWORD *)this + 16);
  if (!v4)
    __assert_rtn("calcCoeffs", "ConvoyDispController.cpp", 202, "mr_dispModel");
  v7 = *((float *)this + 99);
  v8 = v7 * *((float *)this + 95);
  v9 = v7 * *((float *)this + 96);
  if (v8 > 0.0)
    v8 = 0.0;
  if (v9 < 0.0)
    v9 = 0.0;
  v10 = -v8;
  if (v9 > v10)
    v9 = v10;
  *((float *)this + 103) = v9;
  *((float *)this + 19) = v9;
  *((float *)this + 20) = 1.0 / v9;
  *((float *)this + 100) = v9;
  *((float *)this + 101) = 1.0 / v9;
  clsp::DisplacementModelSealed::calcCoeffsFLV(v4, (float *)this + 27, a2, a3);
  v11 = clsp::DisplacementModelSealed::calcCoeffsFLV(*((double **)this + 16), (float *)this + 40, a2, 1.0);
  v12 = (double *)*((_QWORD *)this + 16);
  v13 = (*(double (**)(clsp::ConvoyDisplacementController *, float))(*(_QWORD *)this + 72))(this, v11);
  v14 = (*(double (**)(clsp::ConvoyDisplacementController *))(*(_QWORD *)this + 40))(this);
  v15 = clsp::DisplacementModelSealed::calcCoeffsPTP(v12, (float *)this + 22, a2, v13, v14, a3);
  v16 = (double *)*((_QWORD *)this + 16);
  v17 = (*(double (**)(clsp::ConvoyDisplacementController *, float))(*(_QWORD *)this + 72))(this, v15);
  v18 = (*(double (**)(clsp::ConvoyDisplacementController *))(*(_QWORD *)this + 40))(this);
  clsp::LFSN::calcCoeffs((uint64_t)this + 784, v16, a2, *((double *)this + 11), *((float *)this + 27), *((float *)this + 28), v17, v18, *((float *)this + 100), a3);
  clsp::AttackRelease<float,double>::calcCoeffs((uint64_t)this + 528, a2);
  clsp::AttackRelease<float,double>::calcCoeffs((uint64_t)this + 568, a2);
  v19 = *((double *)this + 7);
  *((double *)this + 76) = v19;
  v20 = v19 * a2;
  v21 = 0.0;
  if (v20 >= 0.00001)
    v21 = exp(-4.60517019 / v20);
  v22 = 1.0 - v21;
  *((float *)this + 154) = v22;
  clsp::ConvoyDisplacementController::designBQCoeffs(9, *((double **)this + 17), a2, 1.0);
  clsp::ConvoyDisplacementController::designBQCoeffs(9, *((double **)this + 18), a2, 1.0);
  clsp::ConvoyDisplacementController::designBQCoeffs(8, *((double **)this + 19), a2, 1.0);
  *((_QWORD *)this + 45) = vcvtad_u64_f64(*((double *)this + 8) * 0.001 * a2);
  *((float32x2_t *)this + 46) = vmul_f32(*(float32x2_t *)((char *)this + 352), (float32x2_t)vrev64_s32(*(int32x2_t *)((char *)this + 380)));
  clsp::AttackReleaseTo<float,double>::calcCoeffs((uint64_t)this + 624, a2);
  clsp::AttackReleaseTo<float,double>::calcCoeffs((uint64_t)this + 664, a2);
  clsp::AttackRelease<float,double>::calcCoeffs((uint64_t)this + 704, a2);
  clsp::AttackRelease<float,double>::calcCoeffs((uint64_t)this + 744, a2);
  result = round(*((float *)this + 123) * 0.001 * a2);
  *((float *)this + 124) = result;
  return result;
}

uint64_t clsp::ConvoyDisplacementController::calcCoeffsSyncDisp(clsp::ConvoyDisplacementController *this, double a2, double a3, double a4, double a5, double a6, double a7)
{
  double *v7;
  double v13;
  double v14;
  long double v15;
  long double v16;
  long double v17;
  float v18;
  float v19;
  float v20;
  uint64_t v21;

  v7 = (double *)*((_QWORD *)this + 16);
  if (!v7)
    __assert_rtn("calcCoeffsSyncDisp", "ConvoyDispController.cpp", 272, "mr_dispModel");
  v13 = 1.0 / a2;
  v14 = -(1.0 / a2 * a3);
  v15 = exp(v14 / (a4 + a4)) * -2.0;
  v16 = v15 * cos(v13 * a3 * sqrt(1.0 / (a4 * -4.0 * a4) + 1.0));
  v17 = exp(v14 / a4);
  v18 = (v17 + v16 + 1.0) * (a7 * 1000.0 * v7[1] / (*v7 * v7[4]));
  v19 = v16;
  *(float *)&v17 = v17;
  *((float *)this + 22) = v19;
  *((_DWORD *)this + 23) = LODWORD(v17);
  *((float *)this + 24) = v18;
  LODWORD(v17) = *((_DWORD *)this + 27);
  v20 = *((float *)this + 28);
  v21 = *((_QWORD *)this + 11);
  *((_DWORD *)this + 210) = 1065353216;
  *((_DWORD *)this + 211) = LODWORD(v17);
  *((float *)this + 212) = v20;
  *((_QWORD *)this + 104) = v21;
  *(float *)&v17 = 1.0 / (1.0 - *(float *)&v17 + v20);
  *((_DWORD *)this + 217) = LODWORD(v17);
  return clsp::LFSNFeedbackCoeffCalc::calcCoeffs((clsp::ConvoyDisplacementController *)((char *)this + 784), a2, a3, a4, a5, 1.0, a6);
}

void clsp::ConvoyDisplacementController::processSample(clsp::ConvoyDisplacementController *this, float a2, float a3)
{
  float v5;
  float v6;
  float v7;
  clsp::CLSP_Log *v8;
  clsp::CLSP_Log *v9;
  float v10;
  float v11;
  float v12;
  float __src;
  float v14;

  if (*((_BYTE *)this + 72))
  {
    v5 = *((float *)this + 21);
    if (v5 >= *((float *)this + 202))
      v5 = *((float *)this + 202);
    v6 = (float)(*((float *)this + 196) + (float)(*((float *)this + 197) * v5))
       + (float)(*((float *)this + 198) * (float)(v5 * v5));
    v7 = (float)(*((float *)this + 199) + (float)(*((float *)this + 200) * v5))
       + (float)(*((float *)this + 201) * (float)(v5 * v5));
    *((float *)this + 208) = v6;
    *((float *)this + 209) = v7;
    v8 = *(clsp::CLSP_Log **)(*((_QWORD *)this + 102) + 16);
    if (v8)
    {
      __src = v6;
      clsp::CLSP_Log::LogCLSPData(v8, &__src, 1);
      v9 = *(clsp::CLSP_Log **)(*((_QWORD *)this + 102) + 16);
      if (v9)
      {
        v14 = v7;
        clsp::CLSP_Log::LogCLSPData(v9, &v14, 1);
      }
    }
    v10 = *((float *)this + 213);
    v11 = *((float *)this + 215);
    v12 = (float)((float)((float)((float)(*((float *)this + 211) * v10) + (float)(a3 * *((float *)this + 210)))
                        + (float)(*((float *)this + 214) * *((float *)this + 212)))
                - (float)(v11 * *((float *)this + 208)))
        - (float)(*((float *)this + 216) * *((float *)this + 209));
    *((float *)this + 213) = a3;
    *((float *)this + 214) = v10;
    *((float *)this + 215) = v12;
    *((float *)this + 216) = v11;
  }
}

float32_t clsp::ConvoyDisplacementController::analyzeDisp(float32x2_t *this, float a2, float a3)
{
  float v4;
  float v5;
  uint64_t v6;
  float v7;
  float v8;
  float v9;
  uint64_t v10;
  float v11;
  float v12;
  float v13;
  float v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float v19;
  float v20;
  uint64_t v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float v29;
  float v30;
  float v31;
  float v32;
  uint64_t v33;
  float v34;
  float v35;
  float v36;
  float v37;
  float32x2_t v38;
  float32_t v39;
  clsp::CLSP_Log **v40;
  clsp::CLSP_Log *v41;
  clsp::CLSP_Log *v42;
  clsp::CLSP_Log *v43;
  clsp::CLSP_Log *v44;
  clsp::CLSP_Log *v45;
  clsp::CLSP_Log *v46;
  clsp::CLSP_Log *v47;
  clsp::CLSP_Log *v48;
  clsp::CLSP_Log *v49;
  float *v50;
  float __src;

  v4 = this[57].f32[0];
  v5 = this[92].f32[0];
  v6 = 181;
  if (v5 < v4)
    v6 = 180;
  v7 = v5 + (float)(this->f32[v6] * (float)(v4 - v5));
  this[92].f32[0] = v7;
  v8 = this[51].f32[1];
  v9 = this[97].f32[0];
  v10 = 191;
  if (v9 < v8)
    v10 = 190;
  v11 = v9 + (float)(this->f32[v10] * (float)(v8 - v9));
  this[97].f32[0] = v11;
  v12 = 1.0 / v11;
  this[9].f32[1] = v11;
  this[10].f32[0] = 1.0 / v11;
  v13 = this[11].f32[1];
  v14 = this[12].f32[1];
  v15 = (float)((float)(v7 * a2) * this[12].f32[0]) - (float)(v14 * this[11].f32[0]);
  v16 = this[13].f32[0];
  v17 = this[13].f32[1];
  v18 = v15 - (float)(v16 * v13);
  this[12].f32[1] = v18;
  this[13].f32[0] = v14;
  v19 = -(float)(v15 + (float)((float)-v16 * v13));
  if (v18 >= 0.0)
    v19 = v18;
  v20 = this[70].f32[0];
  v21 = 137;
  if (v20 < v19)
    v21 = 136;
  v22 = this->f32[v21];
  v23 = v19 - v20;
  v24 = v20 + (float)(v22 * v23);
  this[70].f32[0] = v24;
  if (v11 >= v24)
    v25 = v11;
  else
    v25 = v20 + (float)(v22 * v23);
  v26 = this[14].f32[0];
  v27 = this[15].f32[0];
  v28 = this[15].f32[1];
  v29 = (float)((float)(v7 * a3) * this[14].f32[1]) - (float)(v27 * v17);
  v30 = v29 - (float)(v28 * v26);
  this[15].f32[0] = v30;
  this[15].f32[1] = v27;
  v31 = -(float)(v29 + (float)((float)-v28 * v26));
  if (v30 >= 0.0)
    v31 = v30;
  v32 = this[75].f32[0];
  v33 = 147;
  if (v32 < v31)
    v33 = 146;
  v34 = this->f32[v33];
  v35 = v32 + (float)(v34 * (float)(v31 - v32));
  this[75].f32[0] = v35;
  if (v11 >= v35)
    v36 = v11;
  else
    v36 = v32 + (float)(v34 * (float)(v31 - v32));
  v37 = this[77].f32[1] + (float)(this[77].f32[0] * (float)((float)(v12 * v36) - this[77].f32[1]));
  this[77].f32[1] = v37;
  v38.f32[0] = v12 * (float)(v25 * v37);
  v39 = v38.f32[0] * this[50].f32[0];
  v38.f32[1] = v31;
  this[65] = (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(v38, this[65]), (int8x8_t)v38, (int8x8_t)this[65]);
  this[10].f32[1] = v39;
  v40 = (clsp::CLSP_Log **)this[112];
  v41 = *v40;
  if (*v40)
  {
    __src = a3;
    clsp::CLSP_Log::LogCLSPData(v41, &__src, 1);
    v40 = (clsp::CLSP_Log **)this[112];
  }
  v42 = v40[2];
  if (v42)
  {
    __src = v18;
    clsp::CLSP_Log::LogCLSPData(v42, &__src, 1);
    v40 = (clsp::CLSP_Log **)this[112];
    v43 = v40[2];
    if (v43)
    {
      __src = v24;
      clsp::CLSP_Log::LogCLSPData(v43, &__src, 1);
      v40 = (clsp::CLSP_Log **)this[112];
      v44 = v40[2];
      if (v44)
      {
        __src = v25;
        clsp::CLSP_Log::LogCLSPData(v44, &__src, 1);
        v40 = (clsp::CLSP_Log **)this[112];
        v45 = v40[2];
        if (v45)
        {
          __src = v37;
          clsp::CLSP_Log::LogCLSPData(v45, &__src, 1);
          v40 = (clsp::CLSP_Log **)this[112];
        }
      }
    }
  }
  v46 = *v40;
  if (*v40)
  {
    __src = v30;
    clsp::CLSP_Log::LogCLSPData(v46, &__src, 1);
    v47 = **(clsp::CLSP_Log ***)&this[112];
    if (v47)
    {
      __src = v35;
      clsp::CLSP_Log::LogCLSPData(v47, &__src, 1);
      v48 = **(clsp::CLSP_Log ***)&this[112];
      if (v48)
      {
        __src = this[10].f32[1];
        clsp::CLSP_Log::LogCLSPData(v48, &__src, 1);
        v49 = **(clsp::CLSP_Log ***)&this[112];
        if (v49)
        {
          v50 = (float *)(*(uint64_t (**)(float32x2_t *))(*(_QWORD *)this + 128))(this);
          __src = log10f(v50[21]* (float)((float)((float)((float)(1.0 - v50[12]) + v50[13])* (float)((float)(v50[14] + v50[15]) + v50[16]))/ (float)((float)(v50[12] + 1.0) + v50[13])))* 20.0;
          clsp::CLSP_Log::LogCLSPData(v49, &__src, 1);
        }
      }
    }
  }
  return this[10].f32[1];
}

float clsp::ConvoyDisplacementController::getNormAttenFactor(clsp::ConvoyDisplacementController *this)
{
  return *((float *)this + 21) * *((float *)this + 101);
}

uint64_t clsp::ConvoyDisplacementController::setSkipTelemetryBuffer(uint64_t this, char a2)
{
  *(_BYTE *)(this + 508) = a2;
  return this;
}

double clsp::ConvoyDisplacementController::reset(clsp::ConvoyDisplacementController *this)
{
  float v1;
  float v2;
  float v3;
  float v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  double result;

  *((_QWORD *)this + 52) = 0;
  *((_QWORD *)this + 53) = 0;
  *((_DWORD *)this + 114) = 1065353216;
  *((_DWORD *)this + 184) = 1065353216;
  v1 = *((float *)this + 99);
  v2 = fabsf(*((float *)this + 95));
  v3 = fabsf(*((float *)this + 96));
  if (v3 < v2)
    v2 = v3;
  v4 = v1 * v2;
  *((float *)this + 19) = v4;
  *((float *)this + 20) = 1.0 / v4;
  *((float *)this + 103) = v4;
  *((float *)this + 194) = v4;
  *((float *)this + 102) = v1;
  *(_QWORD *)((char *)this + 860) = 0;
  *(_QWORD *)((char *)this + 852) = 0;
  *(_QWORD *)((char *)this + 100) = 0;
  *((_DWORD *)this + 140) = 0;
  *((_QWORD *)this + 15) = 0;
  *((_DWORD *)this + 150) = 0;
  *((_DWORD *)this + 155) = 0;
  *((float *)this + 21) = v4;
  v5 = *((_QWORD *)this + 17);
  *(_OWORD *)(v5 + 56) = 0u;
  *(_OWORD *)(v5 + 40) = 0u;
  v6 = *((_QWORD *)this + 18);
  *(_OWORD *)(v6 + 56) = 0u;
  *(_OWORD *)(v6 + 40) = 0u;
  v7 = *((_QWORD *)this + 19);
  *(_OWORD *)(v7 + 56) = 0u;
  *(_OWORD *)(v7 + 40) = 0u;
  *(_QWORD *)((char *)this + 172) = 0;
  *((_QWORD *)this + 64) = 0;
  *((_QWORD *)this + 54) = 0;
  *((_QWORD *)this + 55) = 0;
  *((_DWORD *)this + 165) = *((_DWORD *)this + 164);
  *((_DWORD *)this + 175) = *((_DWORD *)this + 174);
  *((_DWORD *)this + 121) = *((_DWORD *)this + 120);
  *(_QWORD *)((char *)this + 500) = 0;
  *((_BYTE *)this + 508) = 0;
  *(_QWORD *)&result = 1065353216;
  *((_QWORD *)this + 65) = 1065353216;
  return result;
}

uint64_t clsp::ConvoyDisplacementController::zapBadValues(uint64_t this)
{
  float64x2_t v1;
  float64x2_t v2;
  float32x4_t v3;
  float32x4_t v4;
  float64x2_t v5;
  float64x2_t v6;
  float v7;
  uint64_t v8;
  uint64_t v9;
  float64x2_t v10;
  float64x2_t v11;
  float64x2_t v12;
  float64x2_t v13;
  float64x2_t v14;
  float v15;
  double v16;
  float32x2_t v18;
  float64x2_t v19;
  float v20;
  double v21;
  float v23;
  double v24;
  float v26;
  double v27;
  float64x2_t v29;
  float64x2_t v30;
  float64x2_t v31;
  float64x2_t v32;
  uint64_t v33;
  float64x2_t v34;
  float64x2_t v35;
  float64x2_t v36;
  float64x2_t v37;
  float64x2_t v38;
  float v39;
  double v40;
  float v42;
  double v43;
  float v45;
  double v46;
  double v48;
  float v50;

  v1 = (float64x2_t)vdupq_n_s64(0x3CD203AF9EE75616uLL);
  v2 = (float64x2_t)vdupq_n_s64(0x430C6BF526340000uLL);
  v3 = *(float32x4_t *)(this + 852);
  v4 = vabsq_f32(v3);
  v5 = vcvt_hight_f64_f32(v4);
  v6 = vcvtq_f64_f32(*(float32x2_t *)v4.f32);
  *(int8x16_t *)(this + 852) = vandq_s8((int8x16_t)v3, (int8x16_t)vuzp1q_s32((int32x4_t)vandq_s8((int8x16_t)vcgtq_f64(v6, v1), (int8x16_t)vcgtq_f64(v2, v6)), (int32x4_t)vandq_s8((int8x16_t)vcgtq_f64(v5, v1), (int8x16_t)vcgtq_f64(v2, v5))));
  v7 = *(float *)(this + 400);
  v8 = *(_QWORD *)(this + 136);
  v9 = *(_QWORD *)(this + 144);
  v10 = *(float64x2_t *)(v8 + 40);
  v11 = vabsq_f64(v10);
  *(int8x16_t *)(v8 + 40) = vandq_s8((int8x16_t)v10, vandq_s8((int8x16_t)vcgtq_f64(v11, v1), (int8x16_t)vcgtq_f64(v2, v11)));
  v12 = *(float64x2_t *)(v8 + 56);
  v13 = vabsq_f64(v12);
  *(int8x16_t *)(v8 + 56) = vandq_s8((int8x16_t)v12, vandq_s8((int8x16_t)vcgtq_f64(v13, v1), (int8x16_t)vcgtq_f64(v2, v13)));
  v12.f64[0] = *(float64_t *)(this + 100);
  v14 = vcvtq_f64_f32(vabs_f32(*(float32x2_t *)&v12.f64[0]));
  *(int8x8_t *)(this + 100) = vand_s8(*(int8x8_t *)&v12.f64[0], (int8x8_t)vmovn_s64((int64x2_t)vandq_s8((int8x16_t)vcgtq_f64(v14, v1), (int8x16_t)vcgtq_f64(v2, v14))));
  v15 = *(float *)(this + 560);
  v16 = fabsf(v15);
  if (v16 >= 1.0e15 || v16 <= 1.0e-15)
    v15 = 0.0;
  *(float *)(this + 560) = v15;
  v18 = *(float32x2_t *)(this + 120);
  v19 = vcvtq_f64_f32(vabs_f32(v18));
  *(int8x8_t *)(this + 120) = vand_s8((int8x8_t)v18, (int8x8_t)vmovn_s64((int64x2_t)vandq_s8((int8x16_t)vcgtq_f64(v19, v1), (int8x16_t)vcgtq_f64(v2, v19))));
  v20 = *(float *)(this + 600);
  v21 = fabsf(v20);
  if (v21 >= 1.0e15 || v21 <= 1.0e-15)
    v20 = 0.0;
  *(float *)(this + 600) = v20;
  v23 = *(float *)(this + 620);
  v24 = fabsf(v23);
  if (v24 >= 1.0e15 || v24 <= 1.0e-15)
    v23 = 0.0;
  *(float *)(this + 620) = v23;
  v26 = *(float *)(this + 84);
  v27 = fabsf(v26);
  if (v27 >= 1.0e15 || v27 <= 1.0e-15)
    v26 = 0.0;
  if (v26 >= v7)
    v7 = v26;
  *(float *)(this + 84) = v7;
  v29 = *(float64x2_t *)(v9 + 40);
  v30 = vabsq_f64(v29);
  *(int8x16_t *)(v9 + 40) = vandq_s8((int8x16_t)v29, vandq_s8((int8x16_t)vcgtq_f64(v30, v1), (int8x16_t)vcgtq_f64(v2, v30)));
  v31 = *(float64x2_t *)(v9 + 56);
  v32 = vabsq_f64(v31);
  *(int8x16_t *)(v9 + 56) = vandq_s8((int8x16_t)v31, vandq_s8((int8x16_t)vcgtq_f64(v32, v1), (int8x16_t)vcgtq_f64(v2, v32)));
  v33 = *(_QWORD *)(this + 152);
  v34 = *(float64x2_t *)(v33 + 40);
  v35 = vabsq_f64(v34);
  *(int8x16_t *)(v33 + 40) = vandq_s8((int8x16_t)v34, vandq_s8((int8x16_t)vcgtq_f64(v35, v1), (int8x16_t)vcgtq_f64(v2, v35)));
  v36 = *(float64x2_t *)(v33 + 56);
  v37 = vabsq_f64(v36);
  *(int8x16_t *)(v33 + 56) = vandq_s8((int8x16_t)v36, vandq_s8((int8x16_t)vcgtq_f64(v37, v1), (int8x16_t)vcgtq_f64(v2, v37)));
  v36.f64[0] = *(float64_t *)(this + 172);
  v38 = vcvtq_f64_f32(vabs_f32(*(float32x2_t *)&v36.f64[0]));
  *(int8x8_t *)(this + 172) = vand_s8(*(int8x8_t *)&v36.f64[0], (int8x8_t)vmovn_s64((int64x2_t)vandq_s8((int8x16_t)vcgtq_f64(v38, v1), (int8x16_t)vcgtq_f64(v2, v38))));
  v39 = *(float *)(this + 660);
  v40 = fabsf(v39);
  if (v40 >= 1.0e15 || v40 <= 1.0e-15)
    v39 = 0.0;
  *(float *)(this + 660) = v39;
  if (v39 == 0.0)
    *(_DWORD *)(this + 660) = *(_DWORD *)(this + 656);
  v42 = *(float *)(this + 700);
  v43 = fabsf(v42);
  if (v43 >= 1.0e15 || v43 <= 1.0e-15)
    v42 = 0.0;
  *(float *)(this + 700) = v42;
  if (v42 == 0.0)
    *(_DWORD *)(this + 700) = *(_DWORD *)(this + 696);
  v45 = *(float *)(this + 736);
  v46 = fabsf(v45);
  if (v46 >= 1.0e15 || v46 <= 1.0e-15)
    v45 = 0.0;
  *(float *)(this + 736) = v45;
  v48 = fabsf(*(float *)(this + 776));
  if (v48 >= 1.0e15 || v48 <= 1.0e-15)
    v50 = 0.0;
  else
    v50 = *(float *)(this + 776);
  *(float *)(this + 776) = v50;
  return this;
}

double clsp::ConvoyDisplacementController::postProcess(clsp::ConvoyDisplacementController *this)
{
  double result;

  *(_QWORD *)&result = 1065353216;
  *((_QWORD *)this + 65) = 1065353216;
  return result;
}

float clsp::ConvoyDisplacementController::getflvMax(clsp::ConvoyDisplacementController *this)
{
  return *((float *)this + 131);
}

float clsp::ConvoyDisplacementController::getAttenuationMax(clsp::ConvoyDisplacementController *this)
{
  return *((float *)this + 130);
}

_QWORD *clsp::ConvoyDisplacementController::setLogs(uint64_t a1, uint64_t *a2)
{
  std::shared_ptr<clsp::CLSPKernel_Logs>::operator=[abi:ne180100]((_QWORD *)(a1 + 896), *a2, a2[1]);
  return std::shared_ptr<clsp::CLSPKernel_Logs>::operator=[abi:ne180100]((_QWORD *)(a1 + 816), *a2, a2[1]);
}

void clsp::ConvoyDisplacementController::designBQCoeffs(int a1, double *a2, double a3, float a4)
{
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  long double v10;
  double v11;
  double v12;
  double v13;

  v5 = a4 * 6.28318531 / a3;
  if (a1 == 9)
  {
    v12 = tan(v5 * 0.5);
    v11 = 1.0;
    v7 = 1.0 / (v12 * 1.41421356 + v12 * v12 + 1.0);
    v6 = v7 * -2.0;
    v13 = v12 * v12 + -1.0;
    goto LABEL_5;
  }
  v6 = 0.0;
  v7 = 0.0;
  v8 = 0.0;
  v9 = 0.0;
  if (a1 == 8)
  {
    v10 = tan(v5 * 0.5);
    v11 = 1.0;
    v12 = 1.0 / v10;
    v7 = 1.0 / (v12 * 1.41421356 + v12 * v12 + 1.0);
    v6 = v7 + v7;
    v13 = 1.0 - v12 * v12;
LABEL_5:
    v8 = (v13 + v13) * v7;
    v9 = (v11 + v12 * -1.41421356 + v12 * v12) * v7;
  }
  a2[2] = v7;
  a2[3] = v6;
  a2[4] = v7;
  *a2 = v8;
  a2[1] = v9;
}

float clsp::AttackReleaseTo<float,double>::calcCoeffs(uint64_t a1, double a2)
{
  double v4;
  double v5;
  double v6;
  float v7;
  double v8;
  float result;

  *(double *)(a1 + 16) = a2;
  v4 = *(double *)(a1 + 8) * a2;
  v5 = 0.0;
  v6 = 0.0;
  if (v4 >= 0.00001)
    v6 = exp(-4.60517019 / v4);
  v7 = 1.0 - v6;
  *(float *)(a1 + 28) = v7;
  v8 = *(double *)a1 * a2;
  if (v8 >= 0.00001)
    v5 = exp(-4.60517019 / v8);
  result = 1.0 - v5;
  *(float *)(a1 + 24) = result;
  return result;
}

void clsp::AttackReleaseTo<float,double>::logCoeffs(uint64_t a1, clsp::CLSP_Log **a2)
{
  clsp::CLSP_Log *v3;
  float v5;
  clsp::CLSP_Log *v6;
  float v7;
  clsp::CLSP_Log *v8;
  float v9;
  clsp::CLSP_Log *v10;
  clsp::CLSP_Log *v11;
  clsp::CLSP_Log *v12;
  float __src;

  v3 = *a2;
  if (*a2)
  {
    v5 = *(double *)a1;
    __src = v5;
    clsp::CLSP_Log::LogCLSPData(v3, &__src, 1);
    v6 = *a2;
    if (*a2)
    {
      v7 = *(double *)(a1 + 8);
      __src = v7;
      clsp::CLSP_Log::LogCLSPData(v6, &__src, 1);
      v8 = *a2;
      if (*a2)
      {
        v9 = *(double *)(a1 + 16);
        __src = v9;
        clsp::CLSP_Log::LogCLSPData(v8, &__src, 1);
        v10 = *a2;
        if (*a2)
        {
          __src = *(float *)(a1 + 24);
          clsp::CLSP_Log::LogCLSPData(v10, &__src, 1);
          v11 = *a2;
          if (*a2)
          {
            __src = *(float *)(a1 + 28);
            clsp::CLSP_Log::LogCLSPData(v11, &__src, 1);
            v12 = *a2;
            if (*a2)
            {
              __src = *(float *)(a1 + 32);
              clsp::CLSP_Log::LogCLSPData(v12, &__src, 1);
            }
          }
        }
      }
    }
  }
}

uint64_t clsp::ConvoyDisplacementController::ConvoyDisplacementController(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t *a4, double a5, double a6, double a7, double a8, double a9, double a10, double a11)
{
  float v18;
  float v19;
  uint64_t *v20;
  uint64_t v21;
  float32x2_t v22;
  uint64_t v23;
  int32x4_t v24;
  __int128 v25;
  int v26;
  int32x4_t v27;
  int32x4_t v28;
  uint64_t v29;
  double v30;
  double v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  const char *v39;
  int v40;

  *(_DWORD *)(a1 + 8) = 1;
  *(_QWORD *)a1 = &off_1E69D4B98;
  *(double *)(a1 + 16) = a6;
  *(double *)(a1 + 24) = a7;
  *(double *)(a1 + 32) = a8;
  *(double *)(a1 + 40) = a9;
  *(double *)(a1 + 48) = a10;
  *(double *)(a1 + 56) = a11;
  *(double *)(a1 + 64) = *(float *)(*a4 + 16);
  *(_BYTE *)(a1 + 72) = 1;
  v18 = a7;
  v19 = 1.0 / a7;
  *(float *)(a1 + 76) = v18;
  *(float *)(a1 + 80) = v19;
  *(float *)(a1 + 84) = v18;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_QWORD *)(a1 + 120) = 0;
  *(_QWORD *)(a1 + 128) = a3;
  *(_OWORD *)(a1 + 136) = 0u;
  v20 = (uint64_t *)(a1 + 136);
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 164) = 0u;
  std::vector<float>::vector((_QWORD *)(a1 + 184), a2);
  std::vector<float>::vector((_QWORD *)(a1 + 208), a2);
  std::vector<float>::vector((_QWORD *)(a1 + 232), a2);
  std::vector<float>::vector((_QWORD *)(a1 + 256), a2);
  std::vector<float>::vector((_QWORD *)(a1 + 280), vcvtad_u64_f64(*(double *)(a1 + 64) * 0.001 * a5));
  std::vector<float>::vector((_QWORD *)(a1 + 304), vcvtad_u64_f64(*(double *)(a1 + 64) * 0.001 * a5));
  std::vector<float>::vector((_QWORD *)(a1 + 328), a2);
  v21 = *a4;
  *(_QWORD *)(a1 + 360) = vcvtad_u64_f64(*(double *)(a1 + 64) * 0.001 * a5);
  v22 = *(float32x2_t *)(v21 + 20);
  *(float32x2_t *)(a1 + 352) = v22;
  *(float32x2_t *)(a1 + 368) = vmul_f32(v22, (float32x2_t)vrev64_s32(*(int32x2_t *)(v21 + 4)));
  *(float *)v24.i32 = __exp10(*(float *)(v21 + 40) / -20.0);
  *(_DWORD *)(a1 + 376) = v24.i32[0];
  v23 = *a4;
  v24.i64[0] = *(_QWORD *)(*a4 + 4);
  *(_QWORD *)&v25 = v24.i64[0];
  DWORD2(v25) = *(_DWORD *)(*a4 + 28);
  HIDWORD(v25) = DWORD2(v25);
  *(_OWORD *)(a1 + 380) = v25;
  v26 = *(_DWORD *)(v23 + 36);
  *(_DWORD *)(a1 + 396) = v26;
  *(float *)(a1 + 400) = v18;
  *(float *)(a1 + 404) = v19;
  *(_DWORD *)(a1 + 408) = v26;
  *(_DWORD *)(a1 + 412) = *(_DWORD *)(a1 + 76);
  *(_QWORD *)(a1 + 448) = 0;
  *(_OWORD *)(a1 + 416) = 0u;
  *(_OWORD *)(a1 + 432) = 0u;
  *(_DWORD *)(a1 + 456) = 1065353216;
  v27 = *(int32x4_t *)(v23 + 52);
  *(int32x4_t *)(a1 + 460) = v27;
  *(_DWORD *)(a1 + 476) = 0;
  v27.i64[0] = *(_QWORD *)(v23 + 84);
  v28 = vzip1q_s32(v27, v24);
  v28.i32[1] = v28.i32[0];
  v28.i32[3] = *(_DWORD *)(v23 + 92);
  *(int32x4_t *)(a1 + 480) = v28;
  *(float *)v28.i32 = round(*(float *)&v28.i32[3] * 0.001 * a5);
  *(_DWORD *)(a1 + 496) = v28.i32[0];
  *(_QWORD *)(a1 + 512) = 0;
  *(_BYTE *)(a1 + 508) = 0;
  *(_QWORD *)(a1 + 500) = 0;
  *(_QWORD *)(a1 + 520) = 1065353216;
  *(double *)(a1 + 528) = a9;
  *(double *)(a1 + 536) = a10;
  *(_QWORD *)(a1 + 544) = 0;
  *(_DWORD *)(a1 + 560) = 0;
  *(double *)(a1 + 568) = a9;
  *(double *)(a1 + 576) = a10;
  *(_QWORD *)(a1 + 584) = 0;
  *(_DWORD *)(a1 + 600) = 0;
  *(_OWORD *)(a1 + 608) = 0u;
  v29 = *a4;
  v30 = *(float *)(*a4 + 76);
  v31 = *(float *)(*a4 + 80);
  *(double *)(a1 + 624) = v30;
  *(double *)(a1 + 632) = v31;
  *(_OWORD *)(a1 + 648) = xmmword_1B6629CB0;
  *(double *)(a1 + 664) = v30;
  *(double *)(a1 + 672) = v31;
  *(_OWORD *)(a1 + 688) = xmmword_1B6629CB0;
  *(float64x2_t *)(a1 + 704) = vcvtq_f64_f32(*(float32x2_t *)(v29 + 44));
  *(_QWORD *)(a1 + 720) = 0;
  *(_DWORD *)(a1 + 736) = 0;
  *(float64x2_t *)(a1 + 744) = vcvtq_f64_f32(*(float32x2_t *)(v29 + 68));
  *(_QWORD *)(a1 + 760) = 0;
  *(_DWORD *)(a1 + 776) = 0;
  *(_DWORD *)(a1 + 808) = 0;
  *(_OWORD *)(a1 + 792) = 0u;
  *(_QWORD *)(a1 + 784) = 0;
  *(_QWORD *)(a1 + 864) = 0;
  *(_OWORD *)(a1 + 832) = 0u;
  *(_OWORD *)(a1 + 848) = 0u;
  *(_OWORD *)(a1 + 816) = 0u;
  *(_DWORD *)(a1 + 872) = 1065353216;
  *(_OWORD *)(a1 + 896) = 0u;
  *(_QWORD *)(a1 + 881) = 0;
  *(_QWORD *)(a1 + 876) = 0;
  if (!a3)
  {
    v39 = "inDispModel";
    v40 = 91;
    goto LABEL_18;
  }
  if (*(float *)&v24.i32[1] <= 0.0)
  {
    v39 = "mc_xMax > 0.";
    v40 = 93;
    goto LABEL_18;
  }
  if (*(float *)v24.i32 >= 0.0)
  {
    v39 = "mc_xMin < 0.";
    v40 = 94;
    goto LABEL_18;
  }
  if (*(float *)(a1 + 368) <= 0.0)
  {
    v39 = "mc_posPeakFinderThreshold > 0.";
    v40 = 95;
    goto LABEL_18;
  }
  if (*(float *)(a1 + 372) >= 0.0)
  {
    v39 = "mc_negPeakFinderThreshold < 0.";
    v40 = 96;
LABEL_18:
    __assert_rtn("ConvoyDisplacementController", "ConvoyDispController.cpp", v40, v39);
  }
  v32 = operator new();
  *(_QWORD *)(v32 + 64) = 0;
  *(_OWORD *)(v32 + 32) = 0u;
  *(_OWORD *)(v32 + 48) = 0u;
  *(_OWORD *)v32 = 0u;
  *(_OWORD *)(v32 + 16) = 0u;
  v33 = *v20;
  *v20 = v32;
  if (v33)
    MEMORY[0x1BCC95CEC](v33, 0x1000C40FF89C88ELL);
  v34 = operator new();
  *(_QWORD *)(v34 + 64) = 0;
  *(_OWORD *)(v34 + 32) = 0u;
  *(_OWORD *)(v34 + 48) = 0u;
  *(_OWORD *)v34 = 0u;
  *(_OWORD *)(v34 + 16) = 0u;
  v35 = *(_QWORD *)(a1 + 144);
  *(_QWORD *)(a1 + 144) = v34;
  if (v35)
    MEMORY[0x1BCC95CEC](v35, 0x1000C40FF89C88ELL);
  v36 = operator new();
  *(_QWORD *)(v36 + 64) = 0;
  *(_OWORD *)(v36 + 32) = 0u;
  *(_OWORD *)(v36 + 48) = 0u;
  *(_OWORD *)v36 = 0u;
  *(_OWORD *)(v36 + 16) = 0u;
  v37 = *(_QWORD *)(a1 + 152);
  *(_QWORD *)(a1 + 152) = v36;
  if (v37)
    MEMORY[0x1BCC95CEC](v37, 0x1000C40FF89C88ELL);
  return a1;
}

void sub_1B63562E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10, void **a11, void **a12)
{
  _QWORD *v12;
  uint64_t *v13;
  void **v14;
  void **v15;
  void **v16;
  void **v17;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  std::shared_ptr<vp::services::Telephony_Utility>::~shared_ptr[abi:ne180100]((uint64_t)(v12 + 112));
  std::shared_ptr<vp::services::Telephony_Utility>::~shared_ptr[abi:ne180100]((uint64_t)(v12 + 102));
  v19 = *v17;
  if (*v17)
  {
    v12[42] = v19;
    operator delete(v19);
  }
  v20 = *v16;
  if (*v16)
  {
    v12[39] = v20;
    operator delete(v20);
  }
  v21 = *v15;
  if (*v15)
  {
    v12[36] = v21;
    operator delete(v21);
  }
  v22 = *v14;
  if (*v14)
  {
    v12[33] = v22;
    operator delete(v22);
  }
  v23 = *a12;
  if (*a12)
  {
    v12[30] = v23;
    operator delete(v23);
  }
  v24 = *a10;
  if (*a10)
  {
    v12[27] = v24;
    operator delete(v24);
  }
  v25 = *a11;
  if (*a11)
  {
    v12[24] = v25;
    operator delete(v25);
  }
  v26 = v12[19];
  v12[19] = 0;
  if (v26)
    MEMORY[0x1BCC95CEC](v26, 0x1000C40FF89C88ELL);
  v27 = v12[18];
  v12[18] = 0;
  if (v27)
    MEMORY[0x1BCC95CEC](v27, 0x1000C40FF89C88ELL);
  v28 = *v13;
  *v13 = 0;
  if (v28)
    MEMORY[0x1BCC95CEC](v28, 0x1000C40FF89C88ELL);
  _Unwind_Resume(a1);
}

uint64_t DspLib::BubbleParameterConverters::parameterID(uint64_t a1, uint64_t a2, int a3)
{
  if (HIDWORD(a2) > 0x3FF || ((a3 | a2) & 0xFFFFFC00) != 0)
    abort();
  return (a3 + ((_DWORD)a2 << 20) + (HIDWORD(a2) << 10));
}

unint64_t DspLib::BubbleParameterConverters::address(DspLib::BubbleParameterConverters *this, unsigned int a2)
{
  return (a2 >> 20) | ((unint64_t)((a2 >> 10) & 0x3FF) << 32);
}

uint64_t DspLib::BubbleParameterConverters::clumpNumber(DspLib::BubbleParameterConverters *this, unsigned int a2)
{
  return a2 >> 10;
}

uint64_t DspLib::BubbleParameterConverters::algorithmNumberWithClumpNumber(DspLib::BubbleParameterConverters *this, unsigned int a2)
{
  return a2 >> 10;
}

uint64_t DspLib::BubbleParameterConverters::groupNumberWithClumpNumber(DspLib::BubbleParameterConverters *this, __int16 a2)
{
  return a2 & 0x3FF;
}

void DOAConditioner::LogDOA(uint64_t a1, _QWORD *a2)
{
  unint64_t v4;
  _QWORD *v5;
  unint64_t v6;
  unint64_t v7;
  _QWORD *v8;
  const std::locale::facet *v9;
  uint64_t v10;
  void **v11;
  uint64_t v12;
  void *v13[2];
  unsigned __int8 v14;
  _QWORD v15[2];
  uint64_t v16;
  _QWORD v17[10];
  char v18;
  uint64_t v19;
  std::locale v20;

  if (a2)
  {
    std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v15);
    if (*(_DWORD *)a1 != -1)
    {
      v4 = 0;
      do
      {
        if (v4 >= (uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)(a1 + 8)) >> 2)
          std::vector<std::vector<float>>::__throw_out_of_range[abi:ne180100]();
        v5 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)" ", 1);
        ++v4;
        v6 = (*(_DWORD *)a1 + 1);
      }
      while (v4 < v6);
      if (*(_DWORD *)a1 != -1)
      {
        v7 = 0;
        do
        {
          if (v7 + v6 >= (uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)(a1 + 8)) >> 2)
            std::vector<std::vector<float>>::__throw_out_of_range[abi:ne180100]();
          v8 = (_QWORD *)std::ostream::operator<<();
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)" ", 1);
          ++v7;
          v6 = (*(_DWORD *)a1 + 1);
        }
        while (v7 < v6);
      }
    }
    std::ios_base::getloc((const std::ios_base *)((char *)&v17[-1] + *(_QWORD *)(v16 - 24)));
    v9 = std::locale::use_facet(&v20, MEMORY[0x1E0DE4A90]);
    ((void (*)(const std::locale::facet *, uint64_t))v9->__vftable[2].~facet_0)(v9, 10);
    std::locale::~locale(&v20);
    std::ostream::put();
    std::ostream::flush();
    std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)v17, v13);
    v15[0] = *MEMORY[0x1E0DE4F50];
    v10 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 72);
    *(_QWORD *)((char *)v15 + *(_QWORD *)(v15[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 64);
    v16 = v10;
    v17[0] = MEMORY[0x1E0DE4FB8] + 16;
    if (v18 < 0)
      operator delete((void *)v17[8]);
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    MEMORY[0x1BCC95BE4](&v19);
    if ((v14 & 0x80u) == 0)
      v11 = v13;
    else
      v11 = (void **)v13[0];
    if ((v14 & 0x80u) == 0)
      v12 = v14;
    else
      v12 = (uint64_t)v13[1];
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)v11, v12);
    if ((char)v14 < 0)
      operator delete(v13[0]);
  }
}

void sub_1B6356698(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void AUDynamicDuckerV2::~AUDynamicDuckerV2(OpaqueAudioConverter **this)
{
  AUDynamicDuckerV2::~AUDynamicDuckerV2(this);
  JUMPOUT(0x1BCC95CECLL);
}

{
  OpaqueAudioConverter *v2;
  OpaqueAudioConverter *v3;
  OpaqueAudioConverter *v4;
  OpaqueAudioConverter *v5;
  OpaqueAudioConverter *v6;
  OpaqueAudioConverter *v7;
  OpaqueAudioConverter *v8;

  AUDynamicDuckerV2::DisposeAudioConverters(this);
  AUDynamicDuckerV2::DisposePowerHistoryWindows((AUDynamicDuckerV2 *)this);
  if (*((_BYTE *)this + 1384))
  {
    v2 = this[170];
    if (v2)
    {
      this[171] = v2;
      operator delete(v2);
    }
  }
  if (*((_BYTE *)this + 1352))
  {
    v3 = this[166];
    if (v3)
    {
      this[167] = v3;
      operator delete(v3);
    }
  }
  std::__optional_destruct_base<CA::AudioBuffers,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)(this + 164));
  if (*((_BYTE *)this + 1304))
  {
    v4 = this[160];
    if (v4)
    {
      this[161] = v4;
      operator delete(v4);
    }
  }
  std::unique_ptr<OpaqueAudioConverter,applesauce::raii::v1::detail::opaque_deletion_functor<OpaqueAudioConverter*,&(AudioConverterDispose)>>::reset[abi:ne180100](this + 159, 0);
  if (*((_BYTE *)this + 1264))
  {
    v5 = this[155];
    if (v5)
    {
      this[156] = v5;
      operator delete(v5);
    }
  }
  std::unique_ptr<OpaqueAudioConverter,applesauce::raii::v1::detail::opaque_deletion_functor<OpaqueAudioConverter*,&(AudioConverterDispose)>>::reset[abi:ne180100](this + 154, 0);
  if (*((_BYTE *)this + 1224))
  {
    v6 = this[150];
    if (v6)
    {
      this[151] = v6;
      operator delete(v6);
    }
  }
  std::unique_ptr<OpaqueAudioConverter,applesauce::raii::v1::detail::opaque_deletion_functor<OpaqueAudioConverter*,&(AudioConverterDispose)>>::reset[abi:ne180100](this + 149, 0);
  if (*((_BYTE *)this + 1184))
  {
    v7 = this[145];
    if (v7)
    {
      this[146] = v7;
      operator delete(v7);
    }
  }
  std::unique_ptr<OpaqueAudioConverter,applesauce::raii::v1::detail::opaque_deletion_functor<OpaqueAudioConverter*,&(AudioConverterDispose)>>::reset[abi:ne180100](this + 144, 0);
  if (*((_BYTE *)this + 1144))
  {
    v8 = this[140];
    if (v8)
    {
      this[141] = v8;
      operator delete(v8);
    }
  }
  std::unique_ptr<OpaqueAudioConverter,applesauce::raii::v1::detail::opaque_deletion_functor<OpaqueAudioConverter*,&(AudioConverterDispose)>>::reset[abi:ne180100](this + 139, 0);
  std::__optional_destruct_base<AUDynamicDuckerV2::PowerHistoryWindow,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)(this + 110));
  std::__optional_destruct_base<AUDynamicDuckerV2::PowerHistoryWindow,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)(this + 96));
  std::__optional_destruct_base<AUDynamicDuckerV2::PowerHistoryWindow,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)(this + 82));
  std::__optional_destruct_base<AUDynamicDuckerV2::PowerHistoryWindow,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)(this + 68));
  ausdk::AUBase::~AUBase((ausdk::AUBase *)this);
}

uint64_t AUDynamicDuckerV2::Initialize(AUDynamicDuckerV2 *this)
{
  ausdk::AUScope *v2;
  double v3;
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t Element;
  double v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _DWORD *v13;
  uint64_t v14;
  __int128 v15;
  unsigned int v16;
  uint64_t v17;
  __n128 v18;
  __int128 v19;
  int v20;
  uint64_t v21;
  UInt32 mChannelsPerFrame;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  __int128 v27;
  UInt32 v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  __int128 v32;
  UInt32 v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  __int128 v37;
  unsigned int v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  __int128 v42;
  UInt32 v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  __int128 v47;
  UInt32 v48;
  char v49;
  uint64_t v50;
  Float64 v51;
  Float64 mSampleRate;
  uint64_t v53;
  unsigned int v54;
  __int128 v55;
  uint64_t v56;
  unsigned int v57;
  __int128 v58;
  uint64_t v59;
  unsigned int v60;
  __int128 v61;
  uint64_t v62;
  __int128 v63;
  void *v64;
  void *v65;
  std::vector<char> v66;
  AudioConverterRef inAudioConverter;
  AudioStreamBasicDescription __p;
  AudioConverterRef outAudioConverter;
  AudioConverterRef v70;
  std::vector<char> inPropertyData;
  AudioStreamBasicDescription inSourceFormat;
  void *v73;
  void *v74;
  std::vector<char> v75;
  void *v76[3];
  AudioStreamBasicDescription inDestinationFormat;

  v2 = (AUDynamicDuckerV2 *)((char *)this + 80);
  v3 = *(double *)(ausdk::AUScope::SafeGetElement((AUDynamicDuckerV2 *)((char *)this + 80), 0) + 80);
  v4 = 1;
  while (1)
  {
    v5 = *((_QWORD *)this + 15);
    if (v5)
      LODWORD(v6) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 24))(v5);
    else
      v6 = (*((_QWORD *)this + 13) - *((_QWORD *)this + 12)) >> 3;
    if (v4 >= v6)
      break;
    Element = ausdk::AUScope::SafeGetElement(v2, v4++);
    if (*(double *)(Element + 80) != v3)
      return 4294956428;
  }
  v8 = *(double *)(ausdk::AUScope::SafeGetElement((AUDynamicDuckerV2 *)((char *)this + 128), 0) + 80);
  v9 = 1;
  while (1)
  {
    v10 = *((_QWORD *)this + 21);
    if (v10)
      LODWORD(v11) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 24))(v10);
    else
      v11 = (*((_QWORD *)this + 19) - *((_QWORD *)this + 18)) >> 3;
    if (v9 >= v11)
      break;
    v12 = ausdk::AUScope::SafeGetElement((AUDynamicDuckerV2 *)((char *)this + 128), v9++);
    if (*(double *)(v12 + 80) != v8)
      return 4294956428;
  }
  if (v3 != v8)
    return 4294956428;
  std::vector<AudioChannelLayout>::vector(v76, 1uLL);
  v13 = v76[0];
  *(_QWORD *)v76[0] = 0;
  v13[2] = 0;
  v14 = ausdk::AUScope::SafeGetElement((AUDynamicDuckerV2 *)((char *)this + 128), 0);
  v15 = *(_OWORD *)(v14 + 96);
  *(_OWORD *)&inDestinationFormat.mSampleRate = *(_OWORD *)(v14 + 80);
  *(_OWORD *)&inDestinationFormat.mBytesPerPacket = v15;
  *(_QWORD *)&inDestinationFormat.mBitsPerChannel = *(_QWORD *)(v14 + 112);
  if ((inDestinationFormat.mFormatFlags & 0x20) != 0)
    v16 = HIDWORD(v15);
  else
    v16 = 1;
  AU::ReferenceSignalMixer::MakeDefaultChannelLayout(&v75, SHIDWORD(v15));
  std::optional<CA::ChannelLayout>::value_or[abi:ne180100]<CA::ChannelLayout const&>(&v73, (uint64_t)this + 1328, v75.__begin_, (uint64_t)v75.__end_);
  v17 = ausdk::AUScope::SafeGetElement(v2, 0);
  v18 = *(__n128 *)(v17 + 80);
  v19 = *(_OWORD *)(v17 + 96);
  *(__n128 *)&inSourceFormat.mSampleRate = v18;
  *(_OWORD *)&inSourceFormat.mBytesPerPacket = v19;
  *(_QWORD *)&inSourceFormat.mBitsPerChannel = *(_QWORD *)(v17 + 112);
  if (v18.n128_f64[0] == inDestinationFormat.mSampleRate
    && inSourceFormat.mFormatID == inDestinationFormat.mFormatID
    && inSourceFormat.mFormatFlags == inDestinationFormat.mFormatFlags
    && inSourceFormat.mBytesPerPacket == inDestinationFormat.mBytesPerPacket
    && inSourceFormat.mFramesPerPacket == inDestinationFormat.mFramesPerPacket
    && inSourceFormat.mBytesPerFrame == inDestinationFormat.mBytesPerFrame
    && inSourceFormat.mChannelsPerFrame == inDestinationFormat.mChannelsPerFrame
    && inSourceFormat.mBitsPerChannel == inDestinationFormat.mBitsPerChannel)
  {
    v20 = 0;
    goto LABEL_45;
  }
  outAudioConverter = 0;
  v21 = AudioConverterNew(&inSourceFormat, &inDestinationFormat, &outAudioConverter);
  if ((_DWORD)v21)
    goto LABEL_165;
  std::unique_ptr<OpaqueAudioConverter,applesauce::raii::v1::detail::opaque_deletion_functor<OpaqueAudioConverter*,&(AudioConverterDispose)>>::reset[abi:ne180100]((OpaqueAudioConverter **)this + 139, outAudioConverter);
  if (*((_BYTE *)this + 1144))
  {
    mChannelsPerFrame = inSourceFormat.mChannelsPerFrame;
    goto LABEL_33;
  }
  mChannelsPerFrame = inSourceFormat.mChannelsPerFrame;
  if ((inSourceFormat.mFormatFlags & 0x20) == 0 || inSourceFormat.mChannelsPerFrame <= 2)
  {
LABEL_33:
    AU::ReferenceSignalMixer::MakeDefaultChannelLayout((std::vector<char> *)&__p, mChannelsPerFrame);
    std::optional<CA::ChannelLayout>::value_or[abi:ne180100]<CA::ChannelLayout const&>(&inPropertyData, (uint64_t)this + 1120, *(const void **)&__p.mSampleRate, *(uint64_t *)&__p.mFormatID);
    v21 = AudioConverterSetProperty(outAudioConverter, 0x69636C20u, LODWORD(inPropertyData.__end_) - LODWORD(inPropertyData.__begin_), inPropertyData.__begin_);
    if (inPropertyData.__begin_)
    {
      inPropertyData.__end_ = inPropertyData.__begin_;
      operator delete(inPropertyData.__begin_);
    }
    if (*(_QWORD *)&__p.mSampleRate)
    {
      *(Float64 *)&__p.mFormatID = __p.mSampleRate;
      operator delete(*(void **)&__p.mSampleRate);
    }
    if ((_DWORD)v21)
      goto LABEL_165;
  }
  if (*((_BYTE *)this + 1352) || v16 <= 2)
  {
    v21 = AudioConverterSetProperty(outAudioConverter, 0x6F636C20u, (_DWORD)v74 - (_DWORD)v73, v73);
    if ((_DWORD)v21)
      goto LABEL_165;
  }
  v20 = 1;
LABEL_45:
  v24 = *((_QWORD *)this + 15);
  if (v24)
    LODWORD(v25) = (*(uint64_t (**)(uint64_t, __n128))(*(_QWORD *)v24 + 24))(v24, v18);
  else
    v25 = (*((_QWORD *)this + 13) - *((_QWORD *)this + 12)) >> 3;
  if (v25 < 2)
    goto LABEL_72;
  v26 = ausdk::AUScope::SafeGetElement(v2, 1u);
  v27 = *(_OWORD *)(v26 + 96);
  *(_OWORD *)&inSourceFormat.mSampleRate = *(_OWORD *)(v26 + 80);
  *(_OWORD *)&inSourceFormat.mBytesPerPacket = v27;
  *(_QWORD *)&inSourceFormat.mBitsPerChannel = *(_QWORD *)(v26 + 112);
  if (inSourceFormat.mSampleRate == inDestinationFormat.mSampleRate
    && inSourceFormat.mFormatID == inDestinationFormat.mFormatID
    && inSourceFormat.mFormatFlags == inDestinationFormat.mFormatFlags
    && inSourceFormat.mBytesPerPacket == inDestinationFormat.mBytesPerPacket
    && inSourceFormat.mFramesPerPacket == inDestinationFormat.mFramesPerPacket
    && inSourceFormat.mBytesPerFrame == inDestinationFormat.mBytesPerFrame
    && inSourceFormat.mChannelsPerFrame == inDestinationFormat.mChannelsPerFrame
    && inSourceFormat.mBitsPerChannel == inDestinationFormat.mBitsPerChannel)
  {
    goto LABEL_72;
  }
  outAudioConverter = 0;
  v21 = AudioConverterNew(&inSourceFormat, &inDestinationFormat, &outAudioConverter);
  if ((_DWORD)v21)
    goto LABEL_165;
  std::unique_ptr<OpaqueAudioConverter,applesauce::raii::v1::detail::opaque_deletion_functor<OpaqueAudioConverter*,&(AudioConverterDispose)>>::reset[abi:ne180100]((OpaqueAudioConverter **)this + 144, outAudioConverter);
  if (*((_BYTE *)this + 1184))
  {
    v28 = inSourceFormat.mChannelsPerFrame;
    goto LABEL_60;
  }
  v28 = inSourceFormat.mChannelsPerFrame;
  if ((inSourceFormat.mFormatFlags & 0x20) == 0 || inSourceFormat.mChannelsPerFrame <= 2)
  {
LABEL_60:
    AU::ReferenceSignalMixer::MakeDefaultChannelLayout((std::vector<char> *)&__p, v28);
    std::optional<CA::ChannelLayout>::value_or[abi:ne180100]<CA::ChannelLayout const&>(&inPropertyData, (uint64_t)this + 1160, *(const void **)&__p.mSampleRate, *(uint64_t *)&__p.mFormatID);
    v21 = AudioConverterSetProperty(outAudioConverter, 0x69636C20u, LODWORD(inPropertyData.__end_) - LODWORD(inPropertyData.__begin_), inPropertyData.__begin_);
    if (inPropertyData.__begin_)
    {
      inPropertyData.__end_ = inPropertyData.__begin_;
      operator delete(inPropertyData.__begin_);
    }
    if (*(_QWORD *)&__p.mSampleRate)
    {
      *(Float64 *)&__p.mFormatID = __p.mSampleRate;
      operator delete(*(void **)&__p.mSampleRate);
    }
    if ((_DWORD)v21)
      goto LABEL_165;
  }
  if (*((_BYTE *)this + 1352) || v16 <= 2)
  {
    v21 = AudioConverterSetProperty(outAudioConverter, 0x6F636C20u, (_DWORD)v74 - (_DWORD)v73, v73);
    if ((_DWORD)v21)
      goto LABEL_165;
  }
  v20 = 1;
LABEL_72:
  v29 = *((_QWORD *)this + 15);
  if (v29)
    LODWORD(v30) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v29 + 24))(v29);
  else
    v30 = (*((_QWORD *)this + 13) - *((_QWORD *)this + 12)) >> 3;
  if (v30 < 3
    || (v31 = ausdk::AUScope::SafeGetElement(v2, 2u),
        v32 = *(_OWORD *)(v31 + 96),
        *(_OWORD *)&inSourceFormat.mSampleRate = *(_OWORD *)(v31 + 80),
        *(_OWORD *)&inSourceFormat.mBytesPerPacket = v32,
        *(_QWORD *)&inSourceFormat.mBitsPerChannel = *(_QWORD *)(v31 + 112),
        inSourceFormat.mSampleRate == inDestinationFormat.mSampleRate)
    && inSourceFormat.mFormatID == inDestinationFormat.mFormatID
    && inSourceFormat.mFormatFlags == inDestinationFormat.mFormatFlags
    && inSourceFormat.mBytesPerPacket == inDestinationFormat.mBytesPerPacket
    && inSourceFormat.mFramesPerPacket == inDestinationFormat.mFramesPerPacket
    && inSourceFormat.mBytesPerFrame == inDestinationFormat.mBytesPerFrame
    && inSourceFormat.mChannelsPerFrame == inDestinationFormat.mChannelsPerFrame
    && inSourceFormat.mBitsPerChannel == inDestinationFormat.mBitsPerChannel)
  {
LABEL_99:
    v34 = *((_QWORD *)this + 21);
    if (v34)
      LODWORD(v35) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v34 + 24))(v34);
    else
      v35 = (*((_QWORD *)this + 19) - *((_QWORD *)this + 18)) >> 3;
    if (v35 < 2)
    {
LABEL_159:
      if (v20)
      {
        v50 = ExtendedAudioBufferList_Create();
        CA::AudioBuffers::AudioBuffers(&inSourceFormat, v50);
        if (*((_BYTE *)this + 1320))
        {
          v51 = *((double *)this + 164);
          mSampleRate = inSourceFormat.mSampleRate;
        }
        else
        {
          v51 = 0.0;
          mSampleRate = inSourceFormat.mSampleRate;
          *((_BYTE *)this + 1320) = 1;
        }
        inSourceFormat.mSampleRate = v51;
        *((Float64 *)this + 164) = mSampleRate;
        ExtendedAudioBufferList_Destroy();
      }
      v21 = 0;
      goto LABEL_165;
    }
    v36 = ausdk::AUScope::SafeGetElement((AUDynamicDuckerV2 *)((char *)this + 128), 1u);
    v37 = *(_OWORD *)(v36 + 96);
    *(_OWORD *)&inSourceFormat.mSampleRate = *(_OWORD *)(v36 + 80);
    *(_OWORD *)&inSourceFormat.mBytesPerPacket = v37;
    *(_QWORD *)&inSourceFormat.mBitsPerChannel = *(_QWORD *)(v36 + 112);
    if ((inSourceFormat.mFormatFlags & 0x20) != 0)
      v38 = HIDWORD(v37);
    else
      v38 = 1;
    AU::ReferenceSignalMixer::MakeDefaultChannelLayout(&inPropertyData, SHIDWORD(v37));
    std::optional<CA::ChannelLayout>::value_or[abi:ne180100]<CA::ChannelLayout const&>(&outAudioConverter, (uint64_t)this + 1360, inPropertyData.__begin_, (uint64_t)inPropertyData.__end_);
    v39 = *((_QWORD *)this + 15);
    if (v39)
      LODWORD(v40) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v39 + 24))(v39);
    else
      v40 = (*((_QWORD *)this + 13) - *((_QWORD *)this + 12)) >> 3;
    if (v40 < 4)
      goto LABEL_129;
    v41 = ausdk::AUScope::SafeGetElement(v2, 3u);
    v42 = *(_OWORD *)(v41 + 96);
    *(_OWORD *)&__p.mSampleRate = *(_OWORD *)(v41 + 80);
    *(_OWORD *)&__p.mBytesPerPacket = v42;
    *(_QWORD *)&__p.mBitsPerChannel = *(_QWORD *)(v41 + 112);
    if (__p.mSampleRate == inSourceFormat.mSampleRate
      && __p.mFormatID == inSourceFormat.mFormatID
      && *(_OWORD *)&__p.mFormatFlags == *(_OWORD *)&inSourceFormat.mFormatFlags
      && *(_QWORD *)&__p.mChannelsPerFrame == *(_QWORD *)&inSourceFormat.mChannelsPerFrame)
    {
      goto LABEL_129;
    }
    inAudioConverter = 0;
    v21 = AudioConverterNew(&__p, &inSourceFormat, &inAudioConverter);
    if ((_DWORD)v21)
      goto LABEL_151;
    std::unique_ptr<OpaqueAudioConverter,applesauce::raii::v1::detail::opaque_deletion_functor<OpaqueAudioConverter*,&(AudioConverterDispose)>>::reset[abi:ne180100]((OpaqueAudioConverter **)this + 154, inAudioConverter);
    if (*((_BYTE *)this + 1264))
    {
      v43 = __p.mChannelsPerFrame;
    }
    else
    {
      v43 = __p.mChannelsPerFrame;
      if ((__p.mFormatFlags & 0x20) != 0 && __p.mChannelsPerFrame > 2)
      {
LABEL_125:
        if (*((_BYTE *)this + 1384) || v38 <= 2)
        {
          v21 = AudioConverterSetProperty(inAudioConverter, 0x6F636C20u, (_DWORD)v70 - (_DWORD)outAudioConverter, outAudioConverter);
          if ((_DWORD)v21)
            goto LABEL_151;
        }
        v20 = 1;
LABEL_129:
        v44 = *((_QWORD *)this + 15);
        if (v44)
          LODWORD(v45) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v44 + 24))(v44);
        else
          v45 = (*((_QWORD *)this + 13) - *((_QWORD *)this + 12)) >> 3;
        if (v45 < 5)
          goto LABEL_153;
        v46 = ausdk::AUScope::SafeGetElement(v2, 4u);
        v47 = *(_OWORD *)(v46 + 96);
        *(_OWORD *)&__p.mSampleRate = *(_OWORD *)(v46 + 80);
        *(_OWORD *)&__p.mBytesPerPacket = v47;
        *(_QWORD *)&__p.mBitsPerChannel = *(_QWORD *)(v46 + 112);
        if (__p.mSampleRate == inSourceFormat.mSampleRate
          && __p.mFormatID == inSourceFormat.mFormatID
          && *(_OWORD *)&__p.mFormatFlags == *(_OWORD *)&inSourceFormat.mFormatFlags
          && *(_QWORD *)&__p.mChannelsPerFrame == *(_QWORD *)&inSourceFormat.mChannelsPerFrame)
        {
          goto LABEL_153;
        }
        inAudioConverter = 0;
        v21 = AudioConverterNew(&__p, &inSourceFormat, &inAudioConverter);
        if (!(_DWORD)v21)
        {
          std::unique_ptr<OpaqueAudioConverter,applesauce::raii::v1::detail::opaque_deletion_functor<OpaqueAudioConverter*,&(AudioConverterDispose)>>::reset[abi:ne180100]((OpaqueAudioConverter **)this + 159, inAudioConverter);
          if (*((_BYTE *)this + 1304))
          {
            v48 = __p.mChannelsPerFrame;
          }
          else
          {
            v48 = __p.mChannelsPerFrame;
            if ((__p.mFormatFlags & 0x20) != 0 && __p.mChannelsPerFrame > 2)
            {
LABEL_148:
              if (*((_BYTE *)this + 1384) || v38 <= 2)
              {
                v21 = AudioConverterSetProperty(inAudioConverter, 0x6F636C20u, (_DWORD)v70 - (_DWORD)outAudioConverter, outAudioConverter);
                if ((_DWORD)v21)
                  goto LABEL_151;
              }
              v20 = 1;
LABEL_153:
              v21 = 0;
              v49 = 1;
LABEL_154:
              if (outAudioConverter)
              {
                v70 = outAudioConverter;
                operator delete(outAudioConverter);
              }
              if (inPropertyData.__begin_)
              {
                inPropertyData.__end_ = inPropertyData.__begin_;
                operator delete(inPropertyData.__begin_);
              }
              if ((v49 & 1) == 0)
                goto LABEL_165;
              goto LABEL_159;
            }
          }
          AU::ReferenceSignalMixer::MakeDefaultChannelLayout(&v66, v48);
          std::optional<CA::ChannelLayout>::value_or[abi:ne180100]<CA::ChannelLayout const&>(&v64, (uint64_t)this + 1280, v66.__begin_, (uint64_t)v66.__end_);
          v21 = AudioConverterSetProperty(inAudioConverter, 0x69636C20u, (_DWORD)v65 - (_DWORD)v64, v64);
          if (v64)
          {
            v65 = v64;
            operator delete(v64);
          }
          if (v66.__begin_)
          {
            v66.__end_ = v66.__begin_;
            operator delete(v66.__begin_);
          }
          if ((_DWORD)v21)
            goto LABEL_151;
          goto LABEL_148;
        }
LABEL_151:
        v49 = 0;
        goto LABEL_154;
      }
    }
    AU::ReferenceSignalMixer::MakeDefaultChannelLayout(&v66, v43);
    std::optional<CA::ChannelLayout>::value_or[abi:ne180100]<CA::ChannelLayout const&>(&v64, (uint64_t)this + 1240, v66.__begin_, (uint64_t)v66.__end_);
    v21 = AudioConverterSetProperty(inAudioConverter, 0x69636C20u, (_DWORD)v65 - (_DWORD)v64, v64);
    if (v64)
    {
      v65 = v64;
      operator delete(v64);
    }
    if (v66.__begin_)
    {
      v66.__end_ = v66.__begin_;
      operator delete(v66.__begin_);
    }
    if ((_DWORD)v21)
      goto LABEL_151;
    goto LABEL_125;
  }
  outAudioConverter = 0;
  v21 = AudioConverterNew(&inSourceFormat, &inDestinationFormat, &outAudioConverter);
  if (!(_DWORD)v21)
  {
    std::unique_ptr<OpaqueAudioConverter,applesauce::raii::v1::detail::opaque_deletion_functor<OpaqueAudioConverter*,&(AudioConverterDispose)>>::reset[abi:ne180100]((OpaqueAudioConverter **)this + 149, outAudioConverter);
    if (*((_BYTE *)this + 1224))
    {
      v33 = inSourceFormat.mChannelsPerFrame;
    }
    else
    {
      v33 = inSourceFormat.mChannelsPerFrame;
      if ((inSourceFormat.mFormatFlags & 0x20) != 0 && inSourceFormat.mChannelsPerFrame > 2)
        goto LABEL_95;
    }
    AU::ReferenceSignalMixer::MakeDefaultChannelLayout((std::vector<char> *)&__p, v33);
    std::optional<CA::ChannelLayout>::value_or[abi:ne180100]<CA::ChannelLayout const&>(&inPropertyData, (uint64_t)this + 1200, *(const void **)&__p.mSampleRate, *(uint64_t *)&__p.mFormatID);
    v21 = AudioConverterSetProperty(outAudioConverter, 0x69636C20u, LODWORD(inPropertyData.__end_) - LODWORD(inPropertyData.__begin_), inPropertyData.__begin_);
    if (inPropertyData.__begin_)
    {
      inPropertyData.__end_ = inPropertyData.__begin_;
      operator delete(inPropertyData.__begin_);
    }
    if (*(_QWORD *)&__p.mSampleRate)
    {
      *(Float64 *)&__p.mFormatID = __p.mSampleRate;
      operator delete(*(void **)&__p.mSampleRate);
    }
    if ((_DWORD)v21)
      goto LABEL_165;
LABEL_95:
    if (!*((_BYTE *)this + 1352) && v16 > 2
      || (v21 = AudioConverterSetProperty(outAudioConverter, 0x6F636C20u, (_DWORD)v74 - (_DWORD)v73, v73), !(_DWORD)v21))
    {
      v20 = 1;
      goto LABEL_99;
    }
  }
LABEL_165:
  if (v73)
  {
    v74 = v73;
    operator delete(v73);
  }
  if (v75.__begin_)
  {
    v75.__end_ = v75.__begin_;
    operator delete(v75.__begin_);
  }
  if (v76[0])
  {
    v76[1] = v76[0];
    operator delete(v76[0]);
  }
  if (!(_DWORD)v21)
  {
    v53 = ausdk::AUScope::SafeGetElement(v2, 0);
    v54 = *((_DWORD *)this + 84);
    std::__optional_destruct_base<AUDynamicDuckerV2::PowerHistoryWindow,false>::reset[abi:ne180100]((uint64_t)this + 544);
    v55 = *(_OWORD *)(v53 + 96);
    *(_OWORD *)&inDestinationFormat.mSampleRate = *(_OWORD *)(v53 + 80);
    *(_OWORD *)&inDestinationFormat.mBytesPerPacket = v55;
    *(_QWORD *)&inDestinationFormat.mBitsPerChannel = *(_QWORD *)(v53 + 112);
    AUDynamicDuckerV2::PowerHistoryWindow::PowerHistoryWindow((AUDynamicDuckerV2 *)((char *)this + 544), (const CA::StreamDescription *)&inDestinationFormat, v54);
    *((_BYTE *)this + 648) = 1;
    v56 = ausdk::AUScope::SafeGetElement(v2, 1u);
    v57 = *((_DWORD *)this + 84);
    std::__optional_destruct_base<AUDynamicDuckerV2::PowerHistoryWindow,false>::reset[abi:ne180100]((uint64_t)this + 656);
    v58 = *(_OWORD *)(v56 + 96);
    *(_OWORD *)&inDestinationFormat.mSampleRate = *(_OWORD *)(v56 + 80);
    *(_OWORD *)&inDestinationFormat.mBytesPerPacket = v58;
    *(_QWORD *)&inDestinationFormat.mBitsPerChannel = *(_QWORD *)(v56 + 112);
    AUDynamicDuckerV2::PowerHistoryWindow::PowerHistoryWindow((AUDynamicDuckerV2 *)((char *)this + 656), (const CA::StreamDescription *)&inDestinationFormat, v57);
    *((_BYTE *)this + 760) = 1;
    v59 = ausdk::AUScope::SafeGetElement(v2, 2u);
    v60 = *((_DWORD *)this + 84);
    std::__optional_destruct_base<AUDynamicDuckerV2::PowerHistoryWindow,false>::reset[abi:ne180100]((uint64_t)this + 768);
    v61 = *(_OWORD *)(v59 + 96);
    *(_OWORD *)&inDestinationFormat.mSampleRate = *(_OWORD *)(v59 + 80);
    *(_OWORD *)&inDestinationFormat.mBytesPerPacket = v61;
    *(_QWORD *)&inDestinationFormat.mBitsPerChannel = *(_QWORD *)(v59 + 112);
    AUDynamicDuckerV2::PowerHistoryWindow::PowerHistoryWindow((AUDynamicDuckerV2 *)((char *)this + 768), (const CA::StreamDescription *)&inDestinationFormat, v60);
    *((_BYTE *)this + 872) = 1;
    v62 = ausdk::AUScope::SafeGetElement(v2, 3u);
    LODWORD(v59) = *((_DWORD *)this + 84);
    std::__optional_destruct_base<AUDynamicDuckerV2::PowerHistoryWindow,false>::reset[abi:ne180100]((uint64_t)this + 880);
    v63 = *(_OWORD *)(v62 + 96);
    *(_OWORD *)&inDestinationFormat.mSampleRate = *(_OWORD *)(v62 + 80);
    *(_OWORD *)&inDestinationFormat.mBytesPerPacket = v63;
    *(_QWORD *)&inDestinationFormat.mBitsPerChannel = *(_QWORD *)(v62 + 112);
    AUDynamicDuckerV2::PowerHistoryWindow::PowerHistoryWindow((AUDynamicDuckerV2 *)((char *)this + 880), (const CA::StreamDescription *)&inDestinationFormat, v59);
    *((_BYTE *)this + 984) = 1;
    atomic_store(0, (unsigned int *)this + 134);
    AUDynamicDuckerV2::Reset(this);
    AUDynamicDuckerV2::UpdateState(this);
    return 0;
  }
  return v21;
}

void sub_1B6357358(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,void *a34,uint64_t a35)
{
  uint64_t v35;
  void *v37;
  void *v38;

  if (__p)
    operator delete(__p);
  if (a26)
    operator delete(a26);
  if (a34)
    operator delete(a34);
  v37 = *(void **)(v35 - 192);
  if (v37)
  {
    *(_QWORD *)(v35 - 184) = v37;
    operator delete(v37);
  }
  v38 = *(void **)(v35 - 168);
  if (v38)
  {
    *(_QWORD *)(v35 - 160) = v38;
    operator delete(v38);
  }
  _Unwind_Resume(exception_object);
}

void AUDynamicDuckerV2::Cleanup(OpaqueAudioConverter **this)
{
  AUDynamicDuckerV2::DisposeAudioConverters(this);
  AUDynamicDuckerV2::DisposePowerHistoryWindows((AUDynamicDuckerV2 *)this);
}

uint64_t AUDynamicDuckerV2::Reset(AUDynamicDuckerV2 *this)
{
  OpaqueAudioConverter *v2;
  uint64_t result;
  OpaqueAudioConverter *v4;
  OpaqueAudioConverter *v5;
  OpaqueAudioConverter *v6;
  OpaqueAudioConverter *v7;
  OpaqueAudioConverter *v8;

  v2 = (OpaqueAudioConverter *)*((_QWORD *)this + 139);
  if (!v2 || (result = AudioConverterReset(v2), !(_DWORD)result))
  {
    v4 = (OpaqueAudioConverter *)*((_QWORD *)this + 144);
    if (!v4 || (result = AudioConverterReset(v4), !(_DWORD)result))
    {
      v5 = (OpaqueAudioConverter *)*((_QWORD *)this + 149);
      if (!v5 || (result = AudioConverterReset(v5), !(_DWORD)result))
      {
        v6 = (OpaqueAudioConverter *)*((_QWORD *)this + 154);
        if (!v6 || (result = AudioConverterReset(v6), !(_DWORD)result))
        {
          v7 = (OpaqueAudioConverter *)*((_QWORD *)this + 159);
          if (!v7
            || (result = AudioConverterReset(v7), !(_DWORD)result)
            && ((v8 = (OpaqueAudioConverter *)*((_QWORD *)this + 159)) == 0
             || (result = AudioConverterReset(v8), !(_DWORD)result)))
          {
            if (*((_BYTE *)this + 648))
              AUDynamicDuckerV2::PowerHistoryWindow::Reset((uint64_t)this + 544);
            if (*((_BYTE *)this + 760))
              AUDynamicDuckerV2::PowerHistoryWindow::Reset((uint64_t)this + 656);
            if (*((_BYTE *)this + 872))
              AUDynamicDuckerV2::PowerHistoryWindow::Reset((uint64_t)this + 768);
            if (*((_BYTE *)this + 984))
              AUDynamicDuckerV2::PowerHistoryWindow::Reset((uint64_t)this + 880);
            result = 0;
            *((_DWORD *)this + 272) = 0;
          }
        }
      }
    }
  }
  return result;
}

uint64_t AUDynamicDuckerV2::GetPropertyInfo(AUDynamicDuckerV2 *this, int a2, int a3, unsigned int a4, unsigned int *a5, BOOL *a6)
{
  uint64_t result;
  int v7;

  result = 4294956417;
  if (!a3)
  {
    if (a2 > 1852141668)
    {
      if (a2 == 1852141676)
        goto LABEL_9;
      v7 = 1852141669;
    }
    else
    {
      if (a2 == 21)
        goto LABEL_9;
      v7 = 1633973611;
    }
    if (a2 != v7)
      return result;
LABEL_9:
    result = 0;
    *a6 = 1;
    *a5 = 4;
  }
  return result;
}

uint64_t AUDynamicDuckerV2::GetProperty(AUDynamicDuckerV2 *this, int a2, int a3, unsigned int a4, _DWORD *a5)
{
  uint64_t result;
  int v7;

  if (a3)
    return 4294956417;
  result = 4294956417;
  if (a2 > 1852141668)
  {
    if (a2 == 1852141669)
    {
      v7 = *((unsigned __int8 *)this + 530);
    }
    else
    {
      if (a2 != 1852141676)
        return result;
      v7 = *((_DWORD *)this + 133) != 0;
    }
  }
  else if (a2 == 21)
  {
    v7 = *((unsigned __int8 *)this + 528);
  }
  else
  {
    if (a2 != 1633973611)
      return result;
    v7 = *((unsigned __int8 *)this + 529);
  }
  result = 0;
  *a5 = v7;
  return result;
}

uint64_t AUDynamicDuckerV2::SetProperty(AUDynamicDuckerV2 *this, int a2, int a3, unsigned int a4, _DWORD *a5, int a6)
{
  uint64_t v6;
  BOOL v8;
  unsigned int *v9;
  unsigned int v10;
  ausdk::AUException *exception;

  v6 = 4294956417;
  if (a3)
    return v6;
  if (a2 > 1852141668)
  {
    if (a2 == 1852141669)
    {
      if (a6 == 4)
      {
        v6 = 0;
        *((_BYTE *)this + 530) = *a5 != 0;
        return v6;
      }
    }
    else
    {
      if (a2 != 1852141676)
        return v6;
      if (a6 == 4)
      {
        v6 = 0;
        *((_DWORD *)this + 133) = *a5;
        return v6;
      }
    }
    return 4294956445;
  }
  if (a2 != 21)
  {
    if (a2 != 1633973611)
      return v6;
    if (a6 == 4)
    {
      v6 = 0;
      *((_BYTE *)this + 529) = *a5 != 0;
      return v6;
    }
    return 4294956445;
  }
  if (a6 != 4)
  {
    exception = (ausdk::AUException *)__cxa_allocate_exception(0x18uLL);
    ausdk::AUException::AUException(exception, -10851);
  }
  v8 = *a5 != 0;
  if (*((_BYTE *)this + 528) && !*a5)
  {
    v9 = (unsigned int *)((char *)this + 536);
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 + 1, v9));
  }
  v6 = 0;
  *((_BYTE *)this + 528) = v8;
  return v6;
}

void sub_1B63577C0(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t AUDynamicDuckerV2::SetParameter(AUDynamicDuckerV2 *this, unsigned int a2, unsigned int a3, unsigned int a4, float a5)
{
  ausdk::AUScope *Scope;
  ausdk::AUElement *Element;
  ausdk::AUScope *v12;
  ausdk::AUElement *v13;
  BOOL v14;
  unsigned int *v15;
  unsigned int v16;

  Scope = (ausdk::AUScope *)ausdk::AUBase::GetScope(this, a3);
  Element = (ausdk::AUElement *)ausdk::AUScope::SafeGetElement(Scope, a4);
  if (ausdk::AUElement::GetParameter(Element, a2) != a5)
  {
    v12 = (ausdk::AUScope *)ausdk::AUBase::GetScope(this, a3);
    v13 = (ausdk::AUElement *)ausdk::AUScope::SafeGetElement(v12, a4);
    ausdk::AUElement::SetParameter(v13, a2, a5, 0);
    if (a2 == 18)
    {
      *((float *)this + 266) = a5;
      v14 = *((float *)this + 267) < a5 && *((_BYTE *)this + 1072) != 0;
      *((_BYTE *)this + 1076) = v14;
    }
    else
    {
      v15 = (unsigned int *)((char *)this + 540);
      do
        v16 = __ldaxr(v15);
      while (__stlxr(v16 + 1, v15));
    }
  }
  return 0;
}

uint64_t AUDynamicDuckerV2::CanScheduleParameters(AUDynamicDuckerV2 *this)
{
  return 0;
}

uint64_t AUDynamicDuckerV2::ProcessMultipleBufferLists(AUDynamicDuckerV2 *this, unsigned int *a2, vDSP_Length a3, unsigned int a4, const AudioBufferList **a5, int a6, AudioBufferList **a7)
{
  const AudioBufferList *v14;
  int v15;
  BOOL v16;
  BOOL v17;
  BOOL v18;
  AudioBufferList *v19;
  AudioBufferList *v20;
  int v21;
  float v22;
  double v23;
  float v24;
  double v25;
  int v26;
  double v27;
  int v28;
  int v29;
  float v30;
  float v31;
  const AudioBufferList *v32;
  float v34;
  unsigned __int8 v35;
  BOOL v36;
  double v37;
  unint64_t v38;
  float v39;
  unsigned __int8 v40;
  unint64_t v41;
  float v42;
  unsigned __int8 v43;
  unint64_t v44;
  float v45;
  unsigned __int8 v46;
  float v47;
  float v48;
  float v49;
  float v50;
  float v51;
  float v52;
  _BOOL4 v53;
  float v54;
  char v55;
  float v56;
  BOOL v57;
  char v58;
  float v59;
  int v60;
  float v61;
  float v62;
  float v63;
  float v64;
  float v65;
  int v66;
  float v67;
  float v68;
  float v69;
  float v70;
  float v71;
  float v72;
  float v73;
  float v74;
  float v75;
  float v76;
  float v77;
  float v78;
  uint64_t v79;
  ausdk::AUElement *v80;
  ausdk::AUElement **v81;
  float v82;
  float v83;
  double v85;
  double v86;
  const AudioBufferList *v87;
  float v88;
  AudioBufferList *v89;
  const AudioBufferList *v90;
  AudioBufferList *v91;
  AudioBufferList *v92;
  AudioBufferList *v93;

  if (atomic_load((unsigned int *)this + 135))
    AUDynamicDuckerV2::UpdateState(this);
  if (!a4)
  {
    v91 = 0;
    v92 = 0;
    v93 = 0;
    v14 = 0;
    v87 = 0;
    v15 = *((unsigned __int8 *)this + 528);
    goto LABEL_7;
  }
  v14 = *a5;
  v15 = *((unsigned __int8 *)this + 528);
  if (a4 == 1)
  {
    v91 = 0;
    v92 = 0;
    v93 = 0;
    v87 = 0;
LABEL_7:
    v16 = 1;
    v17 = 1;
LABEL_8:
    v18 = 1;
    goto LABEL_9;
  }
  v93 = (AudioBufferList *)a5[1];
  v17 = v93 == 0;
  if (a4 < 3)
  {
    v91 = 0;
    v92 = 0;
    v87 = 0;
    v16 = 1;
    goto LABEL_8;
  }
  v92 = (AudioBufferList *)a5[2];
  v18 = v92 == 0;
  if (a4 == 3)
  {
    v91 = 0;
    v87 = 0;
    v16 = 1;
  }
  else
  {
    v91 = (AudioBufferList *)a5[3];
    v16 = v91 == 0;
    if (a4 < 5)
      v87 = 0;
    else
      v87 = a5[4];
  }
LABEL_9:
  if (a6)
  {
    v19 = *a7;
    if (a6 != 1)
    {
      v20 = a7[1];
      goto LABEL_14;
    }
  }
  else
  {
    v19 = 0;
  }
  v20 = 0;
LABEL_14:
  v89 = v19;
  v90 = v14;
  if (v15)
  {
    v21 = v15 ^ 1;
    v22 = 0.0;
    v23 = 1.0;
    v24 = -200.0;
    v25 = 1.0;
    v26 = v15 ^ 1;
    v27 = 1.0;
    v28 = v15 ^ 1;
    v88 = -200.0;
    v29 = v15 ^ 1;
    v30 = 0.0;
    v31 = 0.0;
    v32 = v87;
  }
  else
  {
    if (atomic_load((unsigned int *)this + 134))
    {
      atomic_store(0, (unsigned int *)this + 134);
      AUDynamicDuckerV2::Reset(this);
    }
    if (v14 && *((_BYTE *)this + 648))
    {
      LODWORD(v34) = AUDynamicDuckerV2::PowerHistoryWindow::Compute((AUDynamicDuckerV2 *)((char *)this + 544), v14, 0.0, a3);
      v29 = v35;
    }
    else
    {
      v29 = 1;
      v34 = -200.0;
    }
    v36 = v34 > *((float *)this + 275) || *((_BYTE *)this + 1076) != 0;
    *((_BYTE *)this + 1074) = v36;
    v37 = 1.0;
    if (v17 || !*((_BYTE *)this + 760))
    {
      v28 = 1;
      v39 = -200.0;
      v27 = 1.0;
    }
    else
    {
      v38 = AUDynamicDuckerV2::PowerHistoryWindow::Compute((AUDynamicDuckerV2 *)((char *)this + 656), v93, *((float *)this + 260), a3);
      v39 = *(float *)&v38;
      v27 = *((float *)&v38 + 1);
      v28 = v40;
    }
    *((_BYTE *)this + 1075) = v39 > *((float *)this + 254);
    if (v18 || !*((_BYTE *)this + 872))
    {
      v26 = 1;
      v42 = -200.0;
    }
    else
    {
      v41 = AUDynamicDuckerV2::PowerHistoryWindow::Compute((AUDynamicDuckerV2 *)((char *)this + 768), v92, *((float *)this + 261), a3);
      v42 = *(float *)&v41;
      v37 = *((float *)&v41 + 1);
      v26 = v43;
    }
    v86 = v37;
    if (v16 || !*((_BYTE *)this + 984))
    {
      v85 = 1.0;
      v21 = 1;
      v45 = -200.0;
    }
    else
    {
      v44 = AUDynamicDuckerV2::PowerHistoryWindow::Compute((AUDynamicDuckerV2 *)((char *)this + 880), v91, *((float *)this + 262), a3);
      v45 = *(float *)&v44;
      v85 = *((float *)&v44 + 1);
      v21 = v46;
    }
    v47 = (float)(v45 * 0.005) + (float)(*((float *)this + 272) * 0.995);
    *((float *)this + 272) = v47;
    v48 = *((float *)this + 254);
    if (v39 >= v48)
    {
      v49 = v48 - v34;
      v50 = v48 - v42;
      v51 = v48 - v45;
    }
    else
    {
      v49 = 0.0;
      v50 = 0.0;
      v51 = 0.0;
      if (v39 >= (float)(v48 + -18.0))
      {
        v52 = (float)(v39 - (float)(v48 + -18.0)) / 18.0;
        v49 = (float)(v48 - v34) * v52;
        v50 = (float)(v48 - v42) * v52;
        v51 = (float)(v48 - v45) * v52;
      }
    }
    if (*((_BYTE *)this + 529))
      v53 = 1;
    else
      v53 = *((_BYTE *)this + 1073) != 0;
    v54 = *((float *)this + 275);
    if (v53 && v34 >= v54 || *((_BYTE *)this + 1076))
    {
      v55 = 0;
      *((_BYTE *)this + 1073) = 1;
      v50 = v50 + (float)(v54 - v42);
      v51 = v51 + (float)(v54 - v45);
    }
    else
    {
      v58 = !v53;
      if (v34 < (float)(v54 + -18.0))
        v58 = 1;
      if ((v58 & 1) != 0)
      {
        *((_BYTE *)this + 1073) = 0;
        v55 = 1;
      }
      else
      {
        v55 = 0;
        *((_BYTE *)this + 1073) = 1;
        v59 = (float)(v34 - (float)(v54 + -18.0)) / 18.0;
        v50 = v50 + (float)(v59 * (float)(v54 - v42));
        v51 = v51 + (float)(v59 * (float)(v54 - v45));
      }
    }
    if (v49 != 0.0)
    {
      if ((float)(*((float *)this + 256) - v34) > v49)
        v49 = *((float *)this + 256) - v34;
      if (v49 > 0.0)
        v49 = 0.0;
    }
    if (v50 != 0.0)
    {
      if ((float)(*((float *)this + 257) - v42) > v50)
        v50 = *((float *)this + 257) - v42;
      if (v50 > 0.0)
        v50 = 0.0;
    }
    v56 = *((float *)this + 276);
    if (v51 != 0.0)
    {
      if ((float)(v56 - v45) > v51)
        v51 = v56 - v45;
      if (v51 > 0.0)
        v51 = 0.0;
    }
    v57 = v47 > (float)(v56 + -12.0) && v45 < (float)(v56 + 4.0);
    if (v57 && *((_BYTE *)this + 1074))
    {
      if (v47 <= (float)(v56 + -6.0))
        v51 = v51 + (float)((float)((float)(v47 - (float)(v56 + -12.0)) / -6.0) * 8.0);
      else
        v51 = v51 + -8.0;
    }
    v60 = *((_DWORD *)this + 133);
    switch(v60)
    {
      case 10:
        v61 = 0.33333;
        break;
      case 30:
        v61 = 1.3333;
        break;
      case 20:
        v61 = 0.66667;
        break;
      default:
        v61 = 1.0;
        break;
    }
    v62 = *((float *)this + 259) * v61;
    if ((float)(v45 + v51) <= v62)
      v63 = v51;
    else
      v63 = v62 - v45;
    v64 = *((float *)this + 249);
    if (v64 < 1.1755e-38)
      v64 = 1.1755e-38;
    v65 = log10f(v64) * 20.0;
    if (v63 >= v65)
    {
      v66 = *((_DWORD *)this + 270);
      if (v66)
      {
        *((_DWORD *)this + 270) = v66 - 1;
        v63 = v65;
      }
    }
    else
    {
      *((_DWORD *)this + 270) = *((_DWORD *)this + 271);
    }
    v88 = v45;
    v24 = v34;
    if (*((_BYTE *)this + 530))
    {
      v67 = v50 + -6.0;
      v68 = v63 + -6.0;
      if ((v55 & 1) == 0)
      {
        v67 = v50 + -9.0;
        v68 = v63 + -9.0;
      }
      v69 = v50 + 0.0;
      v70 = v63 + 0.0;
      if (v60 != 10)
      {
        v69 = v50;
        v70 = v63;
      }
      if (v60 == 30)
        v50 = v67;
      else
        v50 = v69;
      if (v60 == 30)
        v63 = v68;
      else
        v63 = v70;
    }
    v32 = v87;
    v31 = (float)(v49 + 0.0) * 0.05;
    v30 = (float)(v50 + 0.0) * 0.05;
    v22 = (float)(v63 + 0.0) * 0.05;
    v23 = v85;
    v25 = v86;
  }
  v71 = __exp10f(v31);
  v72 = __exp10f(0.0);
  v73 = v27;
  v74 = __exp10f(v30);
  v75 = v25;
  AUDynamicDuckerV2::GenerateOutputToCompress((OpaqueAudioConverter **)this, v89, v90, v29 != 0, v71, v93, v28 != 0, v72, v73, v92, v26 != 0, v74, v75, a3);
  v76 = __exp10f(v22);
  __exp10f(0.0);
  v77 = v23;
  AUDynamicDuckerV2::GenerateOutputToMix((OpaqueAudioConverter **)this, v20, v91, v21 != 0, v76, v77, v32, v78, a3);
  v79 = *((_QWORD *)this + 9);
  if (v79)
  {
    v80 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v79 + 32))(v79, 0);
  }
  else
  {
    v81 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v81)
      v80 = 0;
    else
      v80 = *v81;
  }
  ausdk::AUElement::SetParameter(v80, 0xCu, v24, 0);
  ausdk::AUElement::SetParameter(v80, 0x14u, v88, 0);
  v82 = *((float *)this + 249);
  if (v82 < 1.1755e-38)
    v82 = 1.1755e-38;
  v83 = log10f(v82);
  ausdk::AUElement::SetParameter(v80, 0x15u, v83 * 20.0, 0);
  ausdk::AUElement::SetParameter(v80, 0x16u, *((float *)this + 272), 0);
  return 0;
}

uint64_t AUDynamicDuckerV2::Render(AUDynamicDuckerV2 *this, unsigned int *a2, const AudioTimeStamp *a3, vDSP_Length a4)
{
  uint64_t v8;
  ausdk::AUScope *v9;
  ausdk::AUInputElement *Element;
  uint64_t result;
  uint64_t v12;
  AudioBufferList *BufferList;
  uint64_t v14;
  unsigned int *v15;
  AudioBufferList *v16[2];
  AudioBufferList *v17[2];
  __int128 v18;
  uint64_t v19;
  uint64_t v20;

  v8 = 0;
  v20 = *MEMORY[0x1E0C80C00];
  v19 = 0;
  *(_OWORD *)v17 = 0u;
  v18 = 0u;
  v9 = (AUDynamicDuckerV2 *)((char *)this + 80);
  do
  {
    if (ausdk::AUBase::HasInput(this, v8))
    {
      Element = (ausdk::AUInputElement *)ausdk::AUScope::SafeGetElement(v9, v8);
      result = ausdk::AUInputElement::PullInput(Element, a2, a3, v8, a4);
      if ((_DWORD)result)
        return result;
      v12 = ausdk::AUScope::SafeGetElement(v9, v8);
      BufferList = (AudioBufferList *)ausdk::AUBufferList::GetBufferList((ausdk::AUBufferList *)(v12 + 144));
    }
    else
    {
      BufferList = 0;
    }
    v17[v8++] = BufferList;
  }
  while (v8 != 5);
  v14 = ausdk::AUScope::SafeGetElement((AUDynamicDuckerV2 *)((char *)this + 128), 0);
  v16[0] = (AudioBufferList *)ausdk::AUBufferList::GetBufferList((ausdk::AUBufferList *)(v14 + 144));
  v16[1] = 0;
  AUDynamicDuckerV2::ProcessMultipleBufferLists(this, v15, a4, 5u, (const AudioBufferList **)v17, 2, v16);
  return 0;
}

BOOL AUDynamicDuckerV2::BusCountWritable(AUDynamicDuckerV2 *this, int a2)
{
  return (a2 - 1) < 2;
}

uint64_t AUDynamicDuckerV2::SetBusCount(AUDynamicDuckerV2 *this, unsigned int a2, unsigned int a3)
{
  if (a2 == 2)
  {
    if (a3 - 1 > 1)
      return 4294956445;
  }
  else if (a2 == 1 && a3 - 1 >= 5)
  {
    return 4294956445;
  }
  return ausdk::AUBase::SetBusCount(this, a2, a3);
}

uint64_t AUDynamicDuckerV2::GetParameterList(AUDynamicDuckerV2 *this, int a2, unsigned int *a3, unsigned int *a4)
{
  uint64_t result;
  uint64_t i;

  if (a2)
    return 4294956430;
  for (i = 0; i != 26; ++i)
  {
    if (a3)
      a3[i] = i;
  }
  result = 0;
  *a4 = 26;
  return result;
}

uint64_t AUDynamicDuckerV2::GetParameterInfo(AUDynamicDuckerV2 *this, int a2, int a3, AudioUnitParameterInfo *buffer)
{
  uint64_t result;
  const __CFString *v6;
  uint64_t v7;
  const __CFString *v8;
  uint64_t v9;
  AudioUnitParameterValue v10;
  const __CFString *v11;
  uint64_t v12;
  AudioUnitParameterValue v13;
  const __CFString *v14;
  const __CFString *v15;
  AudioUnitParameterOptions v16;
  const __CFString *v17;

  buffer->flags = -1073741824;
  buffer->unitName = 0;
  if (a2)
    return 4294956418;
  switch(a3)
  {
    case 0:
      v6 = CFSTR("Primary Ducking Level (dB)");
      goto LABEL_8;
    case 1:
      v6 = CFSTR("Game Audio Ducking Level (dB)");
      goto LABEL_8;
    case 2:
      v6 = CFSTR("Other Audio Ducking Level (dB)");
LABEL_8:
      buffer->cfNameString = v6;
      buffer->flags = -939524096;
      CFStringGetCString(v6, buffer->name, 52, 0x8000100u);
      buffer->unit = kAudioUnitParameterUnit_Generic;
      v7 = 3267362816;
      goto LABEL_17;
    case 3:
      v8 = CFSTR("System Sound Ducking Threshold (dB)");
      goto LABEL_11;
    case 4:
      v8 = CFSTR("Primary Ducking Threshold (dB)");
LABEL_11:
      buffer->cfNameString = v8;
      buffer->flags = -939524096;
      CFStringGetCString(v8, buffer->name, 52, 0x8000100u);
      buffer->unit = kAudioUnitParameterUnit_Generic;
      v9 = 3259498496;
      goto LABEL_13;
    case 5:
      buffer->cfNameString = CFSTR("Primary Ducking Min Level (dB)");
      buffer->flags = -939524096;
      CFStringGetCString(CFSTR("Primary Ducking Min Level (dB)"), buffer->name, 52, 0x8000100u);
      buffer->unit = kAudioUnitParameterUnit_Generic;
      v9 = 3267362816;
LABEL_13:
      *(_QWORD *)&buffer->minValue = v9;
      v10 = -40.0;
      goto LABEL_30;
    case 6:
      buffer->cfNameString = CFSTR("Game Audio Ducking Min Level (dB)");
      buffer->flags = -939524096;
      CFStringGetCString(CFSTR("Game Audio Ducking Min Level (dB)"), buffer->name, 52, 0x8000100u);
      buffer->unit = kAudioUnitParameterUnit_Generic;
      *(_QWORD *)&buffer->minValue = 3267362816;
      v10 = -45.0;
      goto LABEL_30;
    case 7:
      buffer->cfNameString = CFSTR("Other Audio Ducking Min Level (dB)");
      buffer->flags = -939524096;
      CFStringGetCString(CFSTR("Other Audio Ducking Min Level (dB)"), buffer->name, 52, 0x8000100u);
      buffer->unit = kAudioUnitParameterUnit_Generic;
      *(_QWORD *)&buffer->minValue = 3267362816;
      v10 = -50.0;
      goto LABEL_30;
    case 8:
      buffer->cfNameString = CFSTR("Other Audio RMS Limit (dB)");
      buffer->flags = -939524096;
      CFStringGetCString(CFSTR("Other Audio RMS Limit (dB)"), buffer->name, 52, 0x8000100u);
      buffer->unit = kAudioUnitParameterUnit_Generic;
      v7 = 3276275712;
LABEL_17:
      *(_QWORD *)&buffer->minValue = v7;
      v10 = -18.0;
      goto LABEL_30;
    case 9:
      v11 = CFSTR("System Sound Gain (dB)");
      goto LABEL_21;
    case 10:
      v11 = CFSTR("Game Audio Gain (dB)");
      goto LABEL_21;
    case 11:
      v11 = CFSTR("Other Audio Gain (dB)");
LABEL_21:
      buffer->cfNameString = v11;
      buffer->flags = -939524096;
      CFStringGetCString(v11, buffer->name, 52, 0x8000100u);
      buffer->unit = kAudioUnitParameterUnit_Generic;
      v12 = 0x41400000C1C00000;
      goto LABEL_42;
    case 12:
      buffer->cfNameString = CFSTR("FEV Audio RMS");
      buffer->flags = -939524096;
      CFStringGetCString(CFSTR("FEV Audio RMS"), buffer->name, 52, 0x8000100u);
      buffer->unit = kAudioUnitParameterUnit_Generic;
      *(_QWORD *)&buffer->minValue = 0x41400000C2C80000;
      v13 = -96.0;
      goto LABEL_35;
    case 13:
      buffer->cfNameString = CFSTR("Ducking Ramp Time (s)");
      buffer->flags = -939524096;
      CFStringGetCString(CFSTR("Ducking Ramp Time (s)"), buffer->name, 52, 0x8000100u);
      buffer->unit = kAudioUnitParameterUnit_Generic;
      *(_QWORD *)&buffer->minValue = 0x400000003C23D70ALL;
      v10 = 0.25;
      goto LABEL_30;
    case 14:
      buffer->cfNameString = CFSTR("History Accumulation Time (s)");
      buffer->flags = -939524096;
      CFStringGetCString(CFSTR("History Accumulation Time (s)"), buffer->name, 52, 0x8000100u);
      buffer->unit = kAudioUnitParameterUnit_Generic;
      *(_QWORD *)&buffer->minValue = 0x3F8000003DCCCCCDLL;
      v10 = 0.1;
      goto LABEL_30;
    case 15:
      buffer->cfNameString = CFSTR("UnDucking Ramp Time (s)");
      buffer->flags = -939524096;
      CFStringGetCString(CFSTR("UnDucking Ramp Time (s)"), buffer->name, 52, 0x8000100u);
      buffer->unit = kAudioUnitParameterUnit_Generic;
      v12 = 0x4000000000000000;
      goto LABEL_42;
    case 16:
      buffer->cfNameString = CFSTR("Release Hold Time (s)");
      buffer->flags = -939524096;
      CFStringGetCString(CFSTR("Release Hold Time (s)"), buffer->name, 52, 0x8000100u);
      buffer->unit = kAudioUnitParameterUnit_Generic;
      v12 = 0x4120000000000000;
      goto LABEL_42;
    case 17:
      buffer->cfNameString = CFSTR("0 --> Off, 1 --> ON");
      buffer->flags = -939524096;
      CFStringGetCString(CFSTR("0 --> Off, 1 --> ON"), buffer->name, 52, 0x8000100u);
      buffer->unit = kAudioUnitParameterUnit_Boolean;
      v12 = 0x3F80000000000000;
      goto LABEL_42;
    case 18:
      v14 = CFSTR("Local voice probability");
      goto LABEL_38;
    case 19:
      buffer->cfNameString = CFSTR("Threshold for ducking for local voice");
      buffer->flags = -939524096;
      CFStringGetCString(CFSTR("Threshold for ducking for local voice"), buffer->name, 52, 0x8000100u);
      buffer->unit = kAudioUnitParameterUnit_Generic;
      *(_QWORD *)&buffer->minValue = 0x3F80000000000000;
      v10 = 0.5;
LABEL_30:
      buffer->defaultValue = v10;
      goto LABEL_43;
    case 20:
      v15 = CFSTR("Other Audio RMS");
      goto LABEL_34;
    case 21:
      buffer->cfNameString = CFSTR("Other Audio Ducking Gain");
      buffer->flags = -939524096;
      CFStringGetCString(CFSTR("Other Audio Ducking Gain"), buffer->name, 52, 0x8000100u);
      buffer->unit = kAudioUnitParameterUnit_Generic;
      *(_QWORD *)&buffer->minValue = 3262119936;
      buffer->defaultValue = 0.0;
      goto LABEL_36;
    case 22:
      v15 = CFSTR("Other Audio LongTerm RMS");
LABEL_34:
      buffer->cfNameString = v15;
      buffer->flags = -939524096;
      CFStringGetCString(v15, buffer->name, 52, 0x8000100u);
      buffer->unit = kAudioUnitParameterUnit_Generic;
      *(_QWORD *)&buffer->minValue = 0x41A00000C3480000;
      v13 = -200.0;
LABEL_35:
      buffer->defaultValue = v13;
LABEL_36:
      v16 = buffer->flags & 0x3FFF7FFF | 0x40008000;
      goto LABEL_44;
    case 23:
      v14 = CFSTR("Voice Presence on Other Audio Channel");
LABEL_38:
      buffer->cfNameString = v14;
      buffer->flags = -939524096;
      CFStringGetCString(v14, buffer->name, 52, 0x8000100u);
      buffer->unit = kAudioUnitParameterUnit_Generic;
      *(_QWORD *)&buffer->minValue = 0x3F80000000000000;
      buffer->defaultValue = 0.0;
      v16 = buffer->flags & 0x7FFF7FFF | 0x8000;
      goto LABEL_44;
    case 24:
      v17 = CFSTR("Primary Ducking Threshold in presence of voice (dB)");
      goto LABEL_41;
    case 25:
      v17 = CFSTR("Other Audio Ducking Min Level in presence of voice (dB)");
LABEL_41:
      buffer->cfNameString = v17;
      buffer->flags = -939524096;
      CFStringGetCString(v17, buffer->name, 52, 0x8000100u);
      buffer->unit = kAudioUnitParameterUnit_Generic;
      v12 = 3259498496;
LABEL_42:
      *(_QWORD *)&buffer->minValue = v12;
      buffer->defaultValue = 0.0;
LABEL_43:
      v16 = buffer->flags | 0xC0000000;
LABEL_44:
      result = 0;
      buffer->flags = v16;
      break;
    default:
      result = 0;
      break;
  }
  return result;
}

uint64_t AUDynamicDuckerV2::RestoreState(OpaqueAudioComponentInstance **this, const void *a2)
{
  uint64_t result;
  unsigned int *v4;
  unsigned int v5;

  result = ausdk::AUBase::RestoreState(this, a2);
  if (!(_DWORD)result)
  {
    v4 = (unsigned int *)this + 135;
    do
      v5 = __ldaxr(v4);
    while (__stlxr(v5 + 1, v4));
  }
  return result;
}

uint64_t AUDynamicDuckerV2::SupportsTail(AUDynamicDuckerV2 *this)
{
  return 1;
}

BOOL AUDynamicDuckerV2::StreamFormatWritable(AUDynamicDuckerV2 *this)
{
  return *((_BYTE *)this + 17) == 0;
}

uint64_t AUDynamicDuckerV2::SupportedNumChannels(AUDynamicDuckerV2 *this, const AUChannelInfo **a2)
{
  if (a2)
    *a2 = (const AUChannelInfo *)&AUDynamicDuckerV2::SupportedNumChannels(AUChannelInfo const**)::chans;
  return 1;
}

uint64_t AUDynamicDuckerV2::GetAudioChannelLayout(AUDynamicDuckerV2 *this, int a2, unsigned int a3, AudioChannelLayout *a4, BOOL *a5)
{
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  void *__p;
  _BYTE *v16;
  uint64_t v17;
  char v18;

  *a5 = *((_BYTE *)this + 17) ^ 1;
  LOBYTE(__p) = 0;
  v18 = 0;
  if (a2 == 2)
  {
    v11 = *((_QWORD *)this + 21);
    if (v11)
      LODWORD(v12) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 24))(v11);
    else
      v12 = (*((_QWORD *)this + 19) - *((_QWORD *)this + 18)) >> 3;
    if (v12 <= a3)
      return 4294956419;
    if (a3 == 1)
    {
      v13 = (char *)this + 1360;
    }
    else
    {
      if (a3)
        return 0;
      v13 = (char *)this + 1328;
    }
LABEL_22:
    if (v13[24])
    {
      __p = 0;
      v16 = 0;
      v17 = 0;
      std::vector<char>::__init_with_size[abi:ne180100]<char *,char *>(&__p, *(const void **)v13, *((_QWORD *)v13 + 1), *((_QWORD *)v13 + 1) - *(_QWORD *)v13);
      v18 = 1;
      v8 = v16 - (_BYTE *)__p;
      if (a4 && v16 != __p)
        memcpy(a4, __p, v16 - (_BYTE *)__p);
      if (__p)
      {
        v16 = __p;
        operator delete(__p);
      }
      return v8;
    }
    return 0;
  }
  v8 = 0;
  if (a2 == 1)
  {
    v9 = *((_QWORD *)this + 15);
    if (v9)
      LODWORD(v10) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 24))(v9);
    else
      v10 = (*((_QWORD *)this + 13) - *((_QWORD *)this + 12)) >> 3;
    if (v10 > a3)
    {
      switch(a3)
      {
        case 0u:
          v13 = (char *)this + 1120;
          goto LABEL_22;
        case 1u:
          v13 = (char *)this + 1160;
          goto LABEL_22;
        case 2u:
          v13 = (char *)this + 1200;
          goto LABEL_22;
        case 3u:
          v13 = (char *)this + 1240;
          goto LABEL_22;
        case 4u:
          v13 = (char *)this + 1280;
          goto LABEL_22;
        default:
          return 0;
      }
    }
    return 4294956419;
  }
  return v8;
}

void sub_1B63588E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, char a12)
{
  if (a12)
  {
    if (__p)
      operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t AUDynamicDuckerV2::SetAudioChannelLayout(AUDynamicDuckerV2 *this, int a2, unsigned int a3, const AudioChannelLayout *a4)
{
  uint64_t v4;
  UInt32 mNumberChannelDescriptions;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t Element;
  int v15;
  __int32 v16;
  uint64_t v17;
  int v18;
  __int32 v19;
  uint8x8_t v20;
  char *v21;
  uint8x8_t v22;
  std::vector<char> v24;

  if (*((_BYTE *)this + 17))
    return 4294956447;
  mNumberChannelDescriptions = a4->mNumberChannelDescriptions;
  if (mNumberChannelDescriptions <= 1)
    mNumberChannelDescriptions = 1;
  std::vector<char>::vector(&v24, 20 * mNumberChannelDescriptions + 12);
  memcpy(v24.__begin_, a4, 20 * a4->mNumberChannelDescriptions + 12);
  if (a2 != 2)
  {
    if (a2 != 1)
    {
      v4 = 4294956430;
      goto LABEL_46;
    }
    v10 = *((_QWORD *)this + 15);
    if (v10)
      LODWORD(v11) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 24))(v10);
    else
      v11 = (*((_QWORD *)this + 13) - *((_QWORD *)this + 12)) >> 3;
    if (v11 > a3)
    {
      Element = ausdk::AUScope::SafeGetElement((AUDynamicDuckerV2 *)((char *)this + 80), a3);
      v15 = *(_DWORD *)(Element + 108);
      if ((*(_BYTE *)(Element + 92) & 0x20) == 0)
        v15 = 1;
      if (*(_DWORD *)v24.__begin_ == 0x10000)
      {
        v20 = (uint8x8_t)vcnt_s8((int8x8_t)*((unsigned int *)v24.__begin_ + 1));
        v20.i16[0] = vaddlv_u8(v20);
        v16 = v20.i32[0];
      }
      else if (*(_DWORD *)v24.__begin_)
      {
        v16 = (unsigned __int16)*(_DWORD *)v24.__begin_;
      }
      else
      {
        v16 = *((_DWORD *)v24.__begin_ + 2);
      }
      if (v15 == v16)
      {
        switch(a3)
        {
          case 0u:
            v21 = (char *)this + 1120;
            goto LABEL_44;
          case 1u:
            v21 = (char *)this + 1160;
            goto LABEL_44;
          case 2u:
            v21 = (char *)this + 1200;
            goto LABEL_44;
          case 3u:
            v21 = (char *)this + 1240;
            goto LABEL_44;
          case 4u:
            v21 = (char *)this + 1280;
            goto LABEL_44;
          default:
            goto LABEL_45;
        }
        goto LABEL_45;
      }
LABEL_38:
      v4 = 4294956445;
      goto LABEL_46;
    }
LABEL_26:
    v4 = 4294956419;
    goto LABEL_46;
  }
  v12 = *((_QWORD *)this + 21);
  if (v12)
    LODWORD(v13) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v12 + 24))(v12);
  else
    v13 = (*((_QWORD *)this + 19) - *((_QWORD *)this + 18)) >> 3;
  if (v13 <= a3)
    goto LABEL_26;
  v17 = ausdk::AUScope::SafeGetElement((AUDynamicDuckerV2 *)((char *)this + 128), a3);
  v18 = *(_DWORD *)(v17 + 108);
  if ((*(_BYTE *)(v17 + 92) & 0x20) == 0)
    v18 = 1;
  if (*(_DWORD *)v24.__begin_ == 0x10000)
  {
    v22 = (uint8x8_t)vcnt_s8((int8x8_t)*((unsigned int *)v24.__begin_ + 1));
    v22.i16[0] = vaddlv_u8(v22);
    v19 = v22.i32[0];
  }
  else if (*(_DWORD *)v24.__begin_)
  {
    v19 = (unsigned __int16)*(_DWORD *)v24.__begin_;
  }
  else
  {
    v19 = *((_DWORD *)v24.__begin_ + 2);
  }
  if (v18 != v19)
    goto LABEL_38;
  if (a3 == 1)
  {
    v21 = (char *)this + 1360;
    goto LABEL_44;
  }
  if (!a3)
  {
    v21 = (char *)this + 1328;
LABEL_44:
    std::optional<CA::ChannelLayout>::operator=[abi:ne180100]<CA::ChannelLayout const,void>((uint64_t)v21, &v24.__begin_);
  }
LABEL_45:
  v4 = 0;
LABEL_46:
  if (v24.__begin_)
  {
    v24.__end_ = v24.__begin_;
    operator delete(v24.__begin_);
  }
  return v4;
}

void sub_1B6358B58(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t AUDynamicDuckerV2::RemoveAudioChannelLayout(AUDynamicDuckerV2 *this, int a2, unsigned int a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  _BYTE *v10;
  void *v11;

  if (a2 != 2)
  {
    if (a2 != 1)
      return 4294956430;
    v5 = *((_QWORD *)this + 15);
    if (v5)
      LODWORD(v6) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 24))(v5);
    else
      v6 = (*((_QWORD *)this + 13) - *((_QWORD *)this + 12)) >> 3;
    if (v6 > a3)
    {
      switch(a3)
      {
        case 0u:
          if (!*((_BYTE *)this + 1144))
            return 0;
          v10 = (char *)this + 1144;
          v11 = (void *)*((_QWORD *)this + 140);
          if (!v11)
            goto LABEL_38;
          *((_QWORD *)this + 141) = v11;
          break;
        case 1u:
          if (!*((_BYTE *)this + 1184))
            return 0;
          v10 = (char *)this + 1184;
          v11 = (void *)*((_QWORD *)this + 145);
          if (!v11)
            goto LABEL_38;
          *((_QWORD *)this + 146) = v11;
          break;
        case 2u:
          if (!*((_BYTE *)this + 1224))
            return 0;
          v10 = (char *)this + 1224;
          v11 = (void *)*((_QWORD *)this + 150);
          if (!v11)
            goto LABEL_38;
          *((_QWORD *)this + 151) = v11;
          break;
        case 3u:
          if (!*((_BYTE *)this + 1264))
            return 0;
          v10 = (char *)this + 1264;
          v11 = (void *)*((_QWORD *)this + 155);
          if (!v11)
            goto LABEL_38;
          *((_QWORD *)this + 156) = v11;
          break;
        case 4u:
          if (!*((_BYTE *)this + 1304))
            return 0;
          v10 = (char *)this + 1304;
          v11 = (void *)*((_QWORD *)this + 160);
          if (!v11)
            goto LABEL_38;
          *((_QWORD *)this + 161) = v11;
          break;
        default:
          return 0;
      }
      goto LABEL_37;
    }
    return 4294956419;
  }
  v7 = *((_QWORD *)this + 15);
  if (v7)
    LODWORD(v8) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 24))(v7);
  else
    v8 = (*((_QWORD *)this + 13) - *((_QWORD *)this + 12)) >> 3;
  if (v8 <= a3)
    return 4294956419;
  if (a3 == 1)
  {
    if (*((_BYTE *)this + 1384))
    {
      v10 = (char *)this + 1384;
      v11 = (void *)*((_QWORD *)this + 170);
      if (v11)
      {
        *((_QWORD *)this + 171) = v11;
        goto LABEL_37;
      }
LABEL_38:
      result = 0;
      *v10 = 0;
      return result;
    }
  }
  else if (!a3 && *((_BYTE *)this + 1352))
  {
    v10 = (char *)this + 1352;
    v11 = (void *)*((_QWORD *)this + 166);
    if (v11)
    {
      *((_QWORD *)this + 167) = v11;
LABEL_37:
      operator delete(v11);
      goto LABEL_38;
    }
    goto LABEL_38;
  }
  return 0;
}

void AUDynamicDuckerV2::UpdateState(AUDynamicDuckerV2 *this)
{
  uint64_t v2;
  ausdk::AUElement *v3;
  ausdk::AUElement **v4;
  unsigned int v5;
  uint64_t Element;
  uint64_t v7;
  double v8;
  float Parameter;
  float v10;
  float v11;
  float v12;
  float v13;
  BOOL v14;
  float v15;
  float v16;
  float v17;
  uint64_t v18;
  unint64_t v19;
  float v20;
  float v21;
  float v22;
  uint64_t v23;
  unint64_t v24;
  float v25;
  float v26;
  float v27;
  uint64_t v28;
  unint64_t v29;
  float v30;
  float v31;
  float v32;
  uint64_t v33;
  unint64_t v34;
  float v35;
  float v36;
  float v37;

  atomic_store(0, (unsigned int *)this + 135);
  v2 = *((_QWORD *)this + 9);
  if (v2)
  {
    v3 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v2 + 32))(v2, 0);
  }
  else
  {
    v4 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v4)
      v3 = 0;
    else
      v3 = *v4;
  }
  v5 = *((_DWORD *)this + 84);
  Element = ausdk::AUScope::SafeGetElement((AUDynamicDuckerV2 *)((char *)this + 80), 0);
  v7 = ausdk::AUScope::SafeGetElement((AUDynamicDuckerV2 *)((char *)this + 128), 0);
  if (*(double *)(v7 + 80) >= *(double *)(Element + 80))
    v8 = *(double *)(Element + 80);
  else
    v8 = *(double *)(v7 + 80);
  Parameter = ausdk::AUElement::GetParameter(v3, 0);
  *((float *)this + 251) = __exp10f(Parameter * 0.05);
  v10 = ausdk::AUElement::GetParameter(v3, 1u);
  *((float *)this + 252) = __exp10f(v10 * 0.05);
  v11 = ausdk::AUElement::GetParameter(v3, 2u);
  *((float *)this + 253) = __exp10f(v11 * 0.05);
  *((float *)this + 254) = ausdk::AUElement::GetParameter(v3, 3u);
  *((float *)this + 255) = ausdk::AUElement::GetParameter(v3, 4u);
  *((float *)this + 256) = ausdk::AUElement::GetParameter(v3, 5u);
  *((float *)this + 257) = ausdk::AUElement::GetParameter(v3, 6u);
  *((float *)this + 258) = ausdk::AUElement::GetParameter(v3, 7u);
  *((float *)this + 259) = ausdk::AUElement::GetParameter(v3, 8u);
  *((float *)this + 260) = ausdk::AUElement::GetParameter(v3, 9u);
  *((float *)this + 261) = ausdk::AUElement::GetParameter(v3, 0xAu);
  *((float *)this + 262) = ausdk::AUElement::GetParameter(v3, 0xBu);
  *((float *)this + 263) = ausdk::AUElement::GetParameter(v3, 0xDu);
  v12 = ausdk::AUElement::GetParameter(v3, 0xFu);
  *((float *)this + 264) = v12;
  if (v12 == 0.0)
    *((_DWORD *)this + 264) = *((_DWORD *)this + 263);
  *((float *)this + 265) = ausdk::AUElement::GetParameter(v3, 0xEu);
  *((_DWORD *)this + 271) = (v8 * ausdk::AUElement::GetParameter(v3, 0x10u) / (double)v5);
  *((float *)this + 266) = ausdk::AUElement::GetParameter(v3, 0x12u);
  *((float *)this + 267) = ausdk::AUElement::GetParameter(v3, 0x13u);
  v13 = ausdk::AUElement::GetParameter(v3, 0x11u);
  v14 = *((float *)this + 266) > *((float *)this + 267);
  *((_BYTE *)this + 1072) = v13 == 1.0;
  if (v13 != 1.0)
    v14 = 0;
  *((_BYTE *)this + 1076) = v14;
  *((float *)this + 273) = ausdk::AUElement::GetParameter(v3, 0x18u);
  *((float *)this + 274) = ausdk::AUElement::GetParameter(v3, 0x19u);
  v15 = ausdk::AUElement::GetParameter(v3, 0x17u);
  *((_BYTE *)this + 1108) = v15 == 1.0;
  if (v15 == 1.0)
  {
    v16 = *((float *)this + 273);
    if (v16 >= *((float *)this + 255))
      v16 = *((float *)this + 255);
    v17 = *((float *)this + 274);
    if (v17 >= *((float *)this + 258))
      v17 = *((float *)this + 258);
  }
  else
  {
    v16 = *((float *)this + 255);
    v17 = *((float *)this + 258);
  }
  *((float *)this + 275) = v16;
  *((float *)this + 276) = v17;
  if (*((_BYTE *)this + 648))
  {
    v18 = ausdk::AUScope::SafeGetElement((AUDynamicDuckerV2 *)((char *)this + 80), 0);
    v20 = *((float *)this + 265);
    v21 = 1.0;
    if (v20 <= 1.0)
      v21 = *((float *)this + 265);
    if (v20 >= 0.1)
      v22 = v21;
    else
      v22 = 0.1;
    if (v22 != *((float *)this + 150))
    {
      LODWORD(v19) = *((_DWORD *)this + 145);
      *((_DWORD *)this + 149) = fmax(v22 / ((double)v19 / *(double *)(v18 + 80)), 1.0);
      *((float *)this + 150) = v22;
    }
  }
  if (*((_BYTE *)this + 760))
  {
    v23 = ausdk::AUScope::SafeGetElement((AUDynamicDuckerV2 *)((char *)this + 80), 1u);
    v25 = *((float *)this + 265);
    v26 = 1.0;
    if (v25 <= 1.0)
      v26 = *((float *)this + 265);
    if (v25 >= 0.1)
      v27 = v26;
    else
      v27 = 0.1;
    if (v27 != *((float *)this + 178))
    {
      LODWORD(v24) = *((_DWORD *)this + 173);
      *((_DWORD *)this + 177) = fmax(v27 / ((double)v24 / *(double *)(v23 + 80)), 1.0);
      *((float *)this + 178) = v27;
    }
  }
  if (*((_BYTE *)this + 872))
  {
    v28 = ausdk::AUScope::SafeGetElement((AUDynamicDuckerV2 *)((char *)this + 80), 2u);
    v30 = *((float *)this + 265);
    v31 = 1.0;
    if (v30 <= 1.0)
      v31 = *((float *)this + 265);
    if (v30 >= 0.1)
      v32 = v31;
    else
      v32 = 0.1;
    if (v32 != *((float *)this + 206))
    {
      LODWORD(v29) = *((_DWORD *)this + 201);
      *((_DWORD *)this + 205) = fmax(v32 / ((double)v29 / *(double *)(v28 + 80)), 1.0);
      *((float *)this + 206) = v32;
    }
  }
  if (*((_BYTE *)this + 984))
  {
    v33 = ausdk::AUScope::SafeGetElement((AUDynamicDuckerV2 *)((char *)this + 80), 3u);
    v35 = *((float *)this + 265);
    v36 = 1.0;
    if (v35 <= 1.0)
      v36 = *((float *)this + 265);
    if (v35 >= 0.1)
      v37 = v36;
    else
      v37 = 0.1;
    if (v37 != *((float *)this + 234))
    {
      LODWORD(v34) = *((_DWORD *)this + 229);
      *((_DWORD *)this + 233) = fmax(v37 / ((double)v34 / *(double *)(v33 + 80)), 1.0);
      *((float *)this + 234) = v37;
    }
  }
}

unint64_t AUDynamicDuckerV2::PowerHistoryWindow::Compute(AUDynamicDuckerV2::PowerHistoryWindow *this, const AudioBufferList *a2, float a3, unsigned int a4)
{
  double v7;
  float v8;
  float v9;
  uint64_t mNumberBuffers;
  float v11;
  float v12;
  uint64_t v13;
  BOOL v14;
  unint64_t v15;
  float v16;
  void **p_mData;
  float v18;
  float v19;
  unsigned int v20;
  unsigned int v21;
  uint64_t v22;
  double v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int v26;
  float v27;
  unsigned int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  void **v34;
  float v35;
  float v36;
  unint64_t v37;
  double v38;
  double v39;
  unsigned int v40;
  float v42;
  float __C;

  v8 = __exp10f(a3 * 0.05);
  v9 = v8 * v8;
  mNumberBuffers = a2->mNumberBuffers;
  v11 = (float)a4;
  v12 = *((float *)this + 8);
  if (v12 <= (float)a4)
  {
    LODWORD(v13) = 0;
    v14 = 1;
    do
    {
      if ((_DWORD)mNumberBuffers)
      {
        v15 = 0;
        v16 = 0.0;
        p_mData = &a2->mBuffers[0].mData;
        do
        {
          __C = 0.0;
          vDSP_svesq((const float *)*p_mData + v13, 1, &__C, (unint64_t)*((float *)this + 8));
          __C = v9 * __C;
          if (*((_QWORD *)this + 1) <= v15)
            __assert_rtn("operator[]", "vector.hpp", 1655, "this->m_holder.m_size > n");
          v18 = *(float *)(*(_QWORD *)this + 4 * v15);
          *(_DWORD *)(*(_QWORD *)this + 4 * v15) = 0;
          v19 = v18 + __C;
          if (v16 < v19)
            v16 = v19;
          ++v15;
          p_mData += 2;
        }
        while (mNumberBuffers != v15);
        v12 = *((float *)this + 8);
      }
      else
      {
        v16 = 0.0;
      }
      v14 = v16 == 0.0 && v14;
      *((float *)this + 8) = (float)*((unsigned int *)this + 9);
      v20 = *((_DWORD *)this + 12);
      v21 = *((_DWORD *)this + 13);
      v22 = *((_QWORD *)this + 12);
      if (v20 >= v21)
      {
        v24 = *((_QWORD *)this + 8);
        v25 = *((_QWORD *)this + 11);
        v26 = *((_DWORD *)this + 12);
        v23 = *((double *)this + 5);
        do
        {
          if (v25 == v24)
            v25 = *((_QWORD *)this + 9);
          v27 = *(float *)(v25 - 4);
          v25 -= 4;
          v23 = v23 - v27;
          --v22;
          --v26;
        }
        while (v26 >= v21);
        v28 = v21 - 1;
        if (--v20 >= v28)
          v20 = v28;
        *((_QWORD *)this + 11) = v25;
        *((_QWORD *)this + 12) = v22;
      }
      else
      {
        v23 = *((double *)this + 5);
        v24 = *((_QWORD *)this + 8);
      }
      v7 = v23 + v16;
      *((double *)this + 5) = v7;
      v29 = *((_QWORD *)this + 9);
      if (v22 == (v29 - v24) >> 2)
      {
        if (v29 != v24)
        {
          v30 = *((_QWORD *)this + 10);
          if (v30 == v24)
            v30 = *((_QWORD *)this + 9);
          *(float *)(v30 - 4) = v16;
          v31 = v30 - 4;
          *((_QWORD *)this + 10) = v31;
          *((_QWORD *)this + 11) = v31;
        }
      }
      else
      {
        if (*((_QWORD *)this + 10) == v24)
          v32 = *((_QWORD *)this + 9);
        else
          v32 = *((_QWORD *)this + 10);
        *(float *)(v32 - 4) = v16;
        *((_QWORD *)this + 10) = v32 - 4;
        *((_QWORD *)this + 12) = v22 + 1;
      }
      v13 = (float)(v12 + (float)v13);
      a4 = (float)(v11 - v12);
      *((_DWORD *)this + 12) = v20 + 1;
      v11 = (float)a4;
      v12 = *((float *)this + 8);
    }
    while (v12 <= (float)a4);
  }
  else
  {
    v13 = 0;
  }
  if (a4)
  {
    if ((_DWORD)mNumberBuffers)
    {
      v33 = 0;
      v34 = &a2->mBuffers[0].mData;
      v35 = 0.0;
      do
      {
        v42 = 0.0;
        vDSP_svesq((const float *)*v34 + v13, 1, &v42, a4);
        v36 = v9 * v42;
        v42 = v9 * v42;
        if (*((_QWORD *)this + 1) <= v33)
          __assert_rtn("operator[]", "vector.hpp", 1655, "this->m_holder.m_size > n");
        *(float *)(*(_QWORD *)this + 4 * v33) = v36 + *(float *)(*(_QWORD *)this + 4 * v33);
        if (v35 < v42)
          v35 = v42;
        ++v33;
        v34 += 2;
      }
      while (mNumberBuffers != v33);
      v12 = *((float *)this + 8);
    }
    *((float *)this + 8) = v12 - v11;
  }
  LODWORD(v7) = *((_DWORD *)this + 12);
  *(double *)&v37 = (double)*(unint64_t *)&v7;
  v38 = *((double *)this + 5) / *(double *)&v37;
  LODWORD(v37) = *((_DWORD *)this + 9);
  v39 = v38 / (double)v37;
  if (v39 < 2.22507386e-308)
    v39 = 2.22507386e-308;
  *(float *)&v40 = log10(v39) * 20.0 * 0.5;
  return v40 | ((unint64_t)LODWORD(v8) << 32);
}

void AUDynamicDuckerV2::GenerateOutputToCompress(OpaqueAudioConverter **this, AudioBufferList *a2, const AudioBufferList *a3, char a4, float a5, const AudioBufferList *a6, char a7, float a8, float a9, const AudioBufferList *a10, int a11, float a12, float a13, unsigned int a14)
{
  char v14;
  const AudioBufferList *v17;
  AUDynamicDuckerV2 *v22;
  OpaqueAudioConverter *v24;
  AudioBufferList *v25;
  AudioBufferList *v26;
  UInt32 v27;
  void **p_mData;
  OpaqueAudioConverter *v29;
  char v30;
  const AudioBufferList *v31;
  const AudioBufferList *v32;
  UInt32 v33;
  void **v34;
  OpaqueAudioConverter *v35;
  AudioBufferList *v36;
  const AudioBufferList *v37;
  UInt32 v38;
  void **v39;
  uint64_t v40;
  float *v41;
  uint64_t v42;
  float v43;
  float v44;
  float v45;
  float v46;
  float v47;
  float v48;
  uint64_t v49;
  float *v50;
  uint64_t v51;
  float v52;
  float v53;
  float v54;
  float v55;
  float v56;
  float v57;
  float v58;
  float v59;
  float *v60;
  float v61;
  float v62;
  AudioBufferList *v63;
  UInt32 v64;
  void **v65;
  uint64_t v66;
  uint64_t v67;
  const AudioBufferList *v68;
  AudioBufferList *v69;
  uint64_t v70;
  float v71;
  float v72;
  float v73;
  float v74;
  uint64_t v75;

  v68 = a10;
  v75 = *MEMORY[0x1E0C80C00];
  if (!a2)
    return;
  v14 = a11;
  v17 = a3;
  v22 = (AUDynamicDuckerV2 *)this;
  v69 = a2;
  LOBYTE(v70) = 0;
  if (a3 && (a4 & 1) == 0)
  {
    v24 = this[139];
    if (v24)
    {
      HIDWORD(v67) = a11;
      CA::AudioBuffers::PrepareWithNumberOfBuffers(this[164]);
      v25 = (AudioBufferList *)*((_QWORD *)v22 + 164);
      v26 = v25 + 2;
      this = (OpaqueAudioConverter **)AudioConverterConvertComplexBuffer(v24, a14, v17, v25 + 2);
      if ((_DWORD)this && v26->mNumberBuffers)
      {
        v27 = 0;
        p_mData = &v25[2].mBuffers[0].mData;
        do
        {
          bzero(*p_mData, *((unsigned int *)p_mData - 1));
          ++v27;
          p_mData += 2;
        }
        while (v27 < v26->mNumberBuffers);
      }
      v17 = v25 + 2;
      v14 = BYTE4(v67);
    }
    if (!*((_BYTE *)v22 + 528) && *((float *)v22 + 248) != a5)
    {
      MEMORY[0x1E0C80A78](this);
      v41 = (float *)(((unint64_t)&v66 - v40) & 0xFFFFFFFFFFFFFFC0);
      v42 = 1052;
      if (*((float *)v22 + 248) < a5)
        v42 = 1056;
      v43 = *(float *)((char *)v22 + v42);
      v44 = *((float *)v22 + 251);
      v45 = (float)(1.0 - v44)
          / (*(double *)(ausdk::AUScope::SafeGetElement((AUDynamicDuckerV2 *)((char *)v22 + 128), 0) + 80)
           * v43);
      v74 = v45;
      v73 = 1.0;
      v46 = *((float *)v22 + 251);
      v72 = v46;
      v47 = *((float *)v22 + 248);
      if (v47 <= a5)
      {
        v73 = fminf(a5, 1.0);
      }
      else
      {
        v74 = -v45;
        if (v46 >= a5)
          v48 = v46;
        else
          v48 = a5;
        v72 = v48;
      }
      v71 = v47;
      vDSP_vramp(&v71, &v74, v41, 1, a14);
      vDSP_vclip(v41, 1, &v72, &v73, v41, 1, a14);
      v58 = v74;
      v59 = *((float *)v22 + 248) + (float)(v74 * (float)a14);
      *((float *)v22 + 248) = v59;
      if (v59 < a5 && v58 < 0.0 || v59 > a5 && v58 > 0.0)
        *((float *)v22 + 248) = a5;
      AUDynamicDuckerV2::GenerateOutput::Mix((AUDynamicDuckerV2::GenerateOutput *)&v69, v17, v41, a14);
      if (!a6)
        goto LABEL_21;
      goto LABEL_13;
    }
    AUDynamicDuckerV2::GenerateOutput::Mix((AUDynamicDuckerV2::GenerateOutput *)&v69, v17, a5, a14);
  }
  if (a6)
  {
LABEL_13:
    if ((a7 & 1) == 0)
    {
      v29 = (OpaqueAudioConverter *)*((_QWORD *)v22 + 144);
      if (v29)
      {
        v30 = v14;
        CA::AudioBuffers::PrepareWithNumberOfBuffers(*((CA::AudioBuffers **)v22 + 164));
        v31 = (const AudioBufferList *)*((_QWORD *)v22 + 164);
        v32 = v31 + 2;
        if (AudioConverterConvertComplexBuffer(v29, a14, a6, (AudioBufferList *)&v31[2]) && v32->mNumberBuffers)
        {
          v33 = 0;
          v34 = &v31[2].mBuffers[0].mData;
          do
          {
            bzero(*v34, *((unsigned int *)v34 - 1));
            ++v33;
            v34 += 2;
          }
          while (v33 < v32->mNumberBuffers);
        }
        a6 = v31 + 2;
        v14 = v30;
      }
      AUDynamicDuckerV2::GenerateOutput::Mix((AUDynamicDuckerV2::GenerateOutput *)&v69, a6, a8 * a9, a14);
    }
  }
LABEL_21:
  if (v68 && (v14 & 1) == 0)
  {
    v35 = (OpaqueAudioConverter *)*((_QWORD *)v22 + 149);
    if (v35)
    {
      CA::AudioBuffers::PrepareWithNumberOfBuffers(*((CA::AudioBuffers **)v22 + 164));
      v36 = (AudioBufferList *)*((_QWORD *)v22 + 164);
      v37 = v36 + 2;
      this = (OpaqueAudioConverter **)AudioConverterConvertComplexBuffer(v35, a14, v68, v36 + 2);
      if ((_DWORD)this && v37->mNumberBuffers)
      {
        v38 = 0;
        v39 = &v36[2].mBuffers[0].mData;
        do
        {
          bzero(*v39, *((unsigned int *)v39 - 1));
          ++v38;
          v39 += 2;
        }
        while (v38 < v37->mNumberBuffers);
      }
      v68 = v37;
    }
    if (*((_BYTE *)v22 + 528) || *((float *)v22 + 250) == a12)
    {
      AUDynamicDuckerV2::GenerateOutput::Mix((AUDynamicDuckerV2::GenerateOutput *)&v69, v68, a12 * a13, a14);
    }
    else
    {
      MEMORY[0x1E0C80A78](this);
      v50 = (float *)(((unint64_t)&v66 - v49) & 0xFFFFFFFFFFFFFFC0);
      v74 = a13;
      v51 = 1052;
      if (*((float *)v22 + 250) < a12)
        v51 = 1056;
      v52 = *(float *)((char *)v22 + v51);
      v53 = *((float *)v22 + 252);
      v54 = (float)(1.0 - v53)
          / (*(double *)(ausdk::AUScope::SafeGetElement((AUDynamicDuckerV2 *)((char *)v22 + 128), 0) + 80)
           * v52);
      v73 = v54;
      v72 = 1.0;
      v55 = *((float *)v22 + 252);
      v56 = v55 * v55;
      v71 = v55 * v55;
      v57 = *((float *)v22 + 250);
      if (v57 > a12)
      {
        v54 = -v54;
        v73 = v54;
      }
      if (v54 < 0.0)
      {
        if (v57 < v55 || *((_BYTE *)v22 + 1075) && *((_BYTE *)v22 + 1074))
        {
          if (v56 < a12)
            v56 = a12;
        }
        else if (v55 >= a12)
        {
          v56 = v55;
        }
        else
        {
          v56 = a12;
        }
        v71 = v56;
      }
      v60 = (float *)((char *)v22 + 1000);
      if (v54 > 0.0)
      {
        if (v57 <= v55 && (*((_BYTE *)v22 + 1075) || *((_BYTE *)v22 + 1074)))
        {
          if (v55 > a12)
            v55 = a12;
        }
        else
        {
          v55 = fminf(a12, 1.0);
        }
        v72 = v55;
      }
      vDSP_vramp((const float *)v22 + 250, &v73, v50, 1, a14);
      vDSP_vclip(v50, 1, &v71, &v72, v50, 1, a14);
      vDSP_vsmul(v50, 1, &v74, v50, 1, a14);
      v61 = v73;
      v62 = *v60 + (float)(v73 * (float)a14);
      *v60 = v62;
      if (v62 < a12 && v61 < 0.0 || v62 > a12 && v61 > 0.0)
        *v60 = a12;
      AUDynamicDuckerV2::GenerateOutput::Mix((AUDynamicDuckerV2::GenerateOutput *)&v69, v68, v50, a14);
    }
  }
  if (!(_BYTE)v70)
  {
    v63 = v69;
    if (v69->mNumberBuffers)
    {
      v64 = 0;
      v65 = &v69->mBuffers[0].mData;
      do
      {
        bzero(*v65, *((unsigned int *)v65 - 1));
        ++v64;
        v65 += 2;
      }
      while (v64 < v63->mNumberBuffers);
    }
  }
}

void sub_1B6359AC4(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  unsigned int *v3;
  unsigned int v4;
  void **v5;

  if (!*(_BYTE *)(v1 + 40))
  {
    v3 = *(unsigned int **)(v1 + 32);
    if (*v3)
    {
      v4 = 0;
      v5 = (void **)(v3 + 4);
      do
      {
        bzero(*v5, *((unsigned int *)v5 - 1));
        ++v4;
        v5 += 2;
      }
      while (v4 < *v3);
    }
  }
  _Unwind_Resume(exception_object);
}

void AUDynamicDuckerV2::GenerateOutputToMix(OpaqueAudioConverter **this, AudioBufferList *a2, const AudioBufferList *a3, char a4, float a5, float a6, const AudioBufferList *a7, float a8, vDSP_Length a9)
{
  const AudioBufferList *v11;
  AUDynamicDuckerV2 *v12;
  OpaqueAudioConverter *v15;
  AudioBufferList *v16;
  AudioBufferList *v17;
  UInt32 v18;
  void **p_mData;
  OpaqueAudioConverter *v20;
  AudioBufferList *v21;
  const AudioBufferList *v22;
  UInt32 v23;
  void **v24;
  AudioBufferList *v25;
  UInt32 v26;
  void **v27;
  uint64_t v28;
  float *v29;
  uint64_t v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float v35;
  float v36;
  float *v37;
  float v38;
  float v39;
  uint64_t v40;
  AudioBufferList *v41;
  uint64_t v42;
  float v43;
  float v44;
  float v45;
  float v46;
  uint64_t vars8;

  vars8 = *MEMORY[0x1E0C80C00];
  if (!a2)
    return;
  v11 = a3;
  v12 = (AUDynamicDuckerV2 *)this;
  v41 = a2;
  LOBYTE(v42) = 0;
  if (a3 && (a4 & 1) == 0)
  {
    v15 = this[154];
    if (v15)
    {
      CA::AudioBuffers::PrepareWithNumberOfBuffers(this[164]);
      v16 = (AudioBufferList *)*((_QWORD *)v12 + 164);
      v17 = v16 + 2;
      this = (OpaqueAudioConverter **)AudioConverterConvertComplexBuffer(v15, a9, v11, v16 + 2);
      if ((_DWORD)this && v17->mNumberBuffers)
      {
        v18 = 0;
        p_mData = &v16[2].mBuffers[0].mData;
        do
        {
          bzero(*p_mData, *((unsigned int *)p_mData - 1));
          ++v18;
          p_mData += 2;
        }
        while (v18 < v17->mNumberBuffers);
      }
      v11 = v16 + 2;
    }
    if (!*((_BYTE *)v12 + 528) && *((float *)v12 + 249) != a5)
    {
      MEMORY[0x1E0C80A78](this);
      v29 = (float *)(((unint64_t)&v40 - v28) & 0xFFFFFFFFFFFFFFC0);
      v46 = a6;
      v30 = 1052;
      if (*((float *)v12 + 249) < a5)
        v30 = 1056;
      v31 = *(float *)((char *)v12 + v30);
      v32 = *((float *)v12 + 253);
      v33 = (float)(1.0 - v32)
          / (*(double *)(ausdk::AUScope::SafeGetElement((AUDynamicDuckerV2 *)((char *)v12 + 128), 0) + 80)
           * v31);
      v45 = v33;
      v44 = 1.0;
      v34 = *((float *)v12 + 253);
      v35 = v34 * v34;
      v43 = v34 * v34;
      v36 = *((float *)v12 + 249);
      if (v36 > a5)
      {
        v33 = -v33;
        v45 = v33;
      }
      if (v33 < 0.0)
      {
        if (v36 < v34 || *((_BYTE *)v12 + 1075) && *((_BYTE *)v12 + 1074))
        {
          if (v35 < a5)
            v35 = a5;
        }
        else if (v34 >= a5)
        {
          v35 = v34;
        }
        else
        {
          v35 = a5;
        }
        v43 = v35;
      }
      v37 = (float *)((char *)v12 + 996);
      if (v33 > 0.0)
      {
        if (v36 <= v34 && (*((_BYTE *)v12 + 1075) || *((_BYTE *)v12 + 1074)))
        {
          if (v34 > a5)
            v34 = a5;
        }
        else
        {
          v34 = fminf(a5, 1.0);
        }
        v44 = v34;
      }
      vDSP_vramp((const float *)v12 + 249, &v45, v29, 1, a9);
      vDSP_vclip(v29, 1, &v43, &v44, v29, 1, a9);
      vDSP_vsmul(v29, 1, &v46, v29, 1, a9);
      v38 = v45;
      v39 = *v37 + (float)(v45 * (float)a9);
      *v37 = v39;
      if (v39 < a5 && v38 < 0.0 || v39 > a5 && v38 > 0.0)
        *v37 = a5;
      AUDynamicDuckerV2::GenerateOutput::Mix((AUDynamicDuckerV2::GenerateOutput *)&v41, v11, v29, a9);
      if (!a7)
        goto LABEL_20;
      goto LABEL_13;
    }
    AUDynamicDuckerV2::GenerateOutput::Mix((AUDynamicDuckerV2::GenerateOutput *)&v41, v11, a5 * a6, a9);
  }
  if (a7)
  {
LABEL_13:
    v20 = (OpaqueAudioConverter *)*((_QWORD *)v12 + 159);
    if (v20)
    {
      CA::AudioBuffers::PrepareWithNumberOfBuffers(*((CA::AudioBuffers **)v12 + 164));
      v21 = (AudioBufferList *)*((_QWORD *)v12 + 164);
      v22 = v21 + 2;
      if (AudioConverterConvertComplexBuffer(v20, a9, a7, v21 + 2) && v22->mNumberBuffers)
      {
        v23 = 0;
        v24 = &v21[2].mBuffers[0].mData;
        do
        {
          bzero(*v24, *((unsigned int *)v24 - 1));
          ++v23;
          v24 += 2;
        }
        while (v23 < v22->mNumberBuffers);
      }
      a7 = v22;
    }
    AUDynamicDuckerV2::GenerateOutput::Mix((AUDynamicDuckerV2::GenerateOutput *)&v41, a7, 1.0, a9);
  }
LABEL_20:
  if (!(_BYTE)v42)
  {
    v25 = v41;
    if (v41->mNumberBuffers)
    {
      v26 = 0;
      v27 = &v41->mBuffers[0].mData;
      do
      {
        bzero(*v27, *((unsigned int *)v27 - 1));
        ++v26;
        v27 += 2;
      }
      while (v26 < v25->mNumberBuffers);
    }
  }
}

void sub_1B6359EF4(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  unsigned int *v3;
  unsigned int v4;
  void **v5;

  if (!*(_BYTE *)(v1 + 40))
  {
    v3 = *(unsigned int **)(v1 + 32);
    if (*v3)
    {
      v4 = 0;
      v5 = (void **)(v3 + 4);
      do
      {
        bzero(*v5, *((unsigned int *)v5 - 1));
        ++v4;
        v5 += 2;
      }
      while (v4 < *v3);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t CA::AudioBuffers::PrepareWithNumberOfBuffers(CA::AudioBuffers *this)
{
  uint64_t result;
  std::logic_error *exception;

  result = ExtendedAudioBufferList_PrepareWithNumberOfBuffers();
  if (!result)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "ExtendedAudioBufferList_PrepareWithNumberOfBuffers failed");
  }
  return result;
}

void sub_1B6359FA4(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void AUDynamicDuckerV2::GenerateOutput::Mix(AUDynamicDuckerV2::GenerateOutput *this, const AudioBufferList *a2, const float *__B, vDSP_Length __N)
{
  unsigned int *v6;
  AudioBuffer *mBuffers;
  uint64_t v8;
  uint64_t v9;
  UInt32 v10;
  vDSP_Length v11;
  float **v12;
  UInt32 v13;
  float *v14;
  uint64_t v15;
  UInt32 v16;
  vDSP_Length v17;
  float **v18;
  UInt32 v19;
  float *v20;

  v6 = *(unsigned int **)this;
  mBuffers = a2->mBuffers;
  v8 = **(unsigned int **)this;
  if (*((_BYTE *)this + 8))
  {
    if ((_DWORD)v8)
    {
      v9 = 0;
      v10 = a2->mNumberBuffers - 1;
      v11 = __N;
      v12 = (float **)(v6 + 4);
      do
      {
        if (v10 >= v9)
          v13 = v9;
        else
          v13 = v10;
        v14 = *v12;
        v12 += 2;
        vDSP_vma((const float *)mBuffers[v13].mData, 1, __B, 1, v14, 1, v14, 1, v11);
        ++v9;
      }
      while (v8 != v9);
    }
  }
  else if ((_DWORD)v8)
  {
    v15 = 0;
    v16 = a2->mNumberBuffers - 1;
    v17 = __N;
    v18 = (float **)(v6 + 4);
    do
    {
      if (v16 >= v15)
        v19 = v15;
      else
        v19 = v16;
      v20 = *v18;
      v18 += 2;
      vDSP_vmul((const float *)mBuffers[v19].mData, 1, __B, 1, v20, 1, v17);
      ++v15;
    }
    while (v8 != v15);
  }
  *((_BYTE *)this + 8) = 1;
}

void AUDynamicDuckerV2::GenerateOutput::Mix(AUDynamicDuckerV2::GenerateOutput *this, const AudioBufferList *a2, float a3, unsigned int a4)
{
  unsigned int *v5;
  AudioBuffer *mBuffers;
  uint64_t v7;
  uint64_t v8;
  UInt32 v9;
  vDSP_Length v10;
  float **v11;
  UInt32 v12;
  float *v13;
  uint64_t v14;
  UInt32 v15;
  size_t v16;
  void **v17;
  UInt32 v18;
  void *mData;
  uint64_t v20;
  UInt32 v21;
  vDSP_Length v22;
  float **v23;
  UInt32 v24;
  float *v25;
  uint64_t v26;
  UInt32 v27;
  vDSP_Length v28;
  float **v29;
  UInt32 v30;
  const float *v31;
  float __B;

  __B = a3;
  v5 = *(unsigned int **)this;
  mBuffers = a2->mBuffers;
  v7 = **(unsigned int **)this;
  if (*((_BYTE *)this + 8))
  {
    if (a3 == 1.0)
    {
      if ((_DWORD)v7)
      {
        v8 = 0;
        v9 = a2->mNumberBuffers - 1;
        v10 = a4;
        v11 = (float **)(v5 + 4);
        do
        {
          if (v9 >= v8)
            v12 = v8;
          else
            v12 = v9;
          v13 = *v11;
          v11 += 2;
          vDSP_vadd((const float *)mBuffers[v12].mData, 1, v13, 1, v13, 1, v10);
          ++v8;
        }
        while (v7 != v8);
      }
    }
    else if ((_DWORD)v7)
    {
      v20 = 0;
      v21 = a2->mNumberBuffers - 1;
      v22 = a4;
      v23 = (float **)(v5 + 4);
      do
      {
        if (v21 >= v20)
          v24 = v20;
        else
          v24 = v21;
        v25 = *v23;
        v23 += 2;
        vDSP_vsma((const float *)mBuffers[v24].mData, 1, &__B, v25, 1, v25, 1, v22);
        ++v20;
      }
      while (v7 != v20);
    }
  }
  else if (a3 == 1.0)
  {
    if ((_DWORD)v7)
    {
      v14 = 0;
      v15 = a2->mNumberBuffers - 1;
      v16 = 4 * a4;
      v17 = (void **)(v5 + 4);
      do
      {
        if (v15 >= v14)
          v18 = v14;
        else
          v18 = v15;
        mData = mBuffers[v18].mData;
        if (mData != *v17)
          memcpy(*v17, mData, v16);
        ++v14;
        v17 += 2;
      }
      while (v7 != v14);
    }
  }
  else if ((_DWORD)v7)
  {
    v26 = 0;
    v27 = a2->mNumberBuffers - 1;
    v28 = a4;
    v29 = (float **)(v5 + 4);
    do
    {
      if (v27 >= v26)
        v30 = v26;
      else
        v30 = v27;
      v31 = (const float *)mBuffers[v30].mData;
      if (v31 != *v29)
        vDSP_vsmul(v31, 1, &__B, *v29, 1, v28);
      ++v26;
      v29 += 2;
    }
    while (v7 != v26);
  }
  *((_BYTE *)this + 8) = 1;
}

uint64_t AUDynamicDuckerV2::PowerHistoryWindow::Reset(uint64_t this)
{
  _DWORD *v1;
  uint64_t v2;
  BOOL v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v1 = *(_DWORD **)this;
  v2 = *(_QWORD *)(this + 8);
  if (*(_QWORD *)this)
    v3 = 1;
  else
    v3 = v2 == 0;
  if (!v3)
    __assert_rtn("operator+=", "vector.hpp", 181, "m_ptr || !off");
  if (v2)
  {
    v4 = 4 * v2;
    do
    {
      if (!v1)
        __assert_rtn("operator*", "vector.hpp", 156, "!!m_ptr");
      *v1++ = 0;
      v4 -= 4;
    }
    while (v4);
  }
  *(float *)(this + 32) = (float)*(unsigned int *)(this + 36);
  *(_QWORD *)(this + 40) = 0;
  *(_DWORD *)(this + 48) = 0;
  v5 = *(_QWORD *)(this + 96);
  v7 = *(_QWORD *)(this + 72);
  v6 = *(_QWORD *)(this + 80);
  if (v5 >= (v7 - v6) >> 2)
    v5 -= (v7 - *(_QWORD *)(this + 64)) >> 2;
  *(_QWORD *)(this + 80) = v6 + 4 * v5;
  *(_QWORD *)(this + 96) = 0;
  return this;
}

uint64_t AUDynamicDuckerV2::DisposeAudioConverters(OpaqueAudioConverter **this)
{
  uint64_t result;

  std::unique_ptr<OpaqueAudioConverter,applesauce::raii::v1::detail::opaque_deletion_functor<OpaqueAudioConverter*,&(AudioConverterDispose)>>::reset[abi:ne180100](this + 139, 0);
  std::unique_ptr<OpaqueAudioConverter,applesauce::raii::v1::detail::opaque_deletion_functor<OpaqueAudioConverter*,&(AudioConverterDispose)>>::reset[abi:ne180100](this + 144, 0);
  std::unique_ptr<OpaqueAudioConverter,applesauce::raii::v1::detail::opaque_deletion_functor<OpaqueAudioConverter*,&(AudioConverterDispose)>>::reset[abi:ne180100](this + 149, 0);
  std::unique_ptr<OpaqueAudioConverter,applesauce::raii::v1::detail::opaque_deletion_functor<OpaqueAudioConverter*,&(AudioConverterDispose)>>::reset[abi:ne180100](this + 154, 0);
  result = (uint64_t)std::unique_ptr<OpaqueAudioConverter,applesauce::raii::v1::detail::opaque_deletion_functor<OpaqueAudioConverter*,&(AudioConverterDispose)>>::reset[abi:ne180100](this + 159, 0);
  if (*((_BYTE *)this + 1320))
  {
    result = ExtendedAudioBufferList_Destroy();
    *((_BYTE *)this + 1320) = 0;
  }
  return result;
}

void AUDynamicDuckerV2::DisposePowerHistoryWindows(AUDynamicDuckerV2 *this)
{
  std::__optional_destruct_base<AUDynamicDuckerV2::PowerHistoryWindow,false>::reset[abi:ne180100]((uint64_t)this + 544);
  std::__optional_destruct_base<AUDynamicDuckerV2::PowerHistoryWindow,false>::reset[abi:ne180100]((uint64_t)this + 656);
  std::__optional_destruct_base<AUDynamicDuckerV2::PowerHistoryWindow,false>::reset[abi:ne180100]((uint64_t)this + 768);
  std::__optional_destruct_base<AUDynamicDuckerV2::PowerHistoryWindow,false>::reset[abi:ne180100]((uint64_t)this + 880);
}

void std::__optional_destruct_base<AUDynamicDuckerV2::PowerHistoryWindow,false>::reset[abi:ne180100](uint64_t a1)
{
  if (*(_BYTE *)(a1 + 104))
  {
    boost::circular_buffer<float,std::allocator<float>>::destroy(a1 + 64);
    if (*(_QWORD *)(a1 + 16))
    {
      if (a1 + 24 != *(_QWORD *)a1)
        operator delete(*(void **)a1);
    }
    *(_BYTE *)(a1 + 104) = 0;
  }
}

void boost::circular_buffer<float,std::allocator<float>>::destroy(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  unint64_t v7;

  v3 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 16);
  v4 = *(_QWORD *)(a1 + 32);
  v5 = *(void **)a1;
  v6 = v3 - v2;
  v7 = (unint64_t)(v3 - (_QWORD)v5) >> 2;
  if (v4 < v6 >> 2)
    v7 = 0;
  *(_QWORD *)(a1 + 16) = v2 + 4 * (v4 - v7);
  if (v5)
    operator delete(v5);
}

OpaqueAudioConverter *std::unique_ptr<OpaqueAudioConverter,applesauce::raii::v1::detail::opaque_deletion_functor<OpaqueAudioConverter*,&(AudioConverterDispose)>>::reset[abi:ne180100](OpaqueAudioConverter **a1, OpaqueAudioConverter *a2)
{
  OpaqueAudioConverter *result;

  result = *a1;
  *a1 = a2;
  if (result)
    return (OpaqueAudioConverter *)AudioConverterDispose(result);
  return result;
}

AUDynamicDuckerV2::PowerHistoryWindow *AUDynamicDuckerV2::PowerHistoryWindow::PowerHistoryWindow(AUDynamicDuckerV2::PowerHistoryWindow *this, const CA::StreamDescription *a2, unsigned int a3)
{
  char *v6;
  unint64_t v7;
  unint64_t v8;
  int *v9;
  int *v10;
  char *v11;
  unint64_t v12;
  int *v13;
  uint64_t v14;
  int *v15;
  uint64_t v16;
  char *v17;
  int *v18;
  int v19;
  char *v20;
  char *v21;
  int v23;

  *(_QWORD *)this = (char *)this + 24;
  *(_OWORD *)((char *)this + 8) = xmmword_1B6624BA0;
  *((_OWORD *)this + 4) = 0u;
  v6 = (char *)this + 64;
  *((_OWORD *)this + 5) = 0u;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 5) = 0;
  *((_QWORD *)this + 6) = 0;
  *((_QWORD *)this + 4) = 0x48400000000;
  *((_DWORD *)this + 14) = 0;
  if ((*((_DWORD *)a2 + 3) & 0x20) != 0)
    v7 = *((unsigned int *)a2 + 7);
  else
    v7 = 1;
  v23 = 0;
  boost::container::vector<float,boost::container::small_vector_allocator<float,boost::container::new_allocator<void>,void>,void>::priv_resize<float,boost::move_detail::integral_constant<unsigned int,1u>>((uint64_t)this, v7, &v23);
  *((float *)this + 8) = (float)a3;
  *((_DWORD *)this + 9) = a3;
  *((_QWORD *)this + 5) = 0;
  v8 = fmax(ceil(1.0 / ((double)a3 / *(double *)a2)), 1.0);
  *((_DWORD *)this + 12) = 0;
  *((_DWORD *)this + 13) = v8;
  *((_DWORD *)this + 14) = 1065353216;
  v10 = (int *)*((_QWORD *)this + 8);
  v9 = (int *)*((_QWORD *)this + 9);
  if (v9 - v10 != v8)
  {
    if ((_DWORD)v8)
      v11 = (char *)operator new(4 * v8);
    else
      v11 = 0;
    v12 = *((_QWORD *)this + 12);
    if (v12)
      v13 = (int *)*((_QWORD *)this + 10);
    else
      v13 = 0;
    if (v12 >= v8)
      v14 = v8;
    else
      v14 = *((_QWORD *)this + 12);
    v15 = v13;
    if (v14)
    {
      v16 = v14 >= v9 - v13 ? v9 - v10 : 0;
      v15 = &v13[v14 - v16];
      if (v15 == *((int **)this + 11))
        v15 = 0;
    }
    v17 = v11;
    if (v13 != v15)
    {
      v18 = (int *)*((_QWORD *)this + 11);
      v17 = v11;
      do
      {
        v19 = *v13++;
        *(_DWORD *)v17 = v19;
        v17 += 4;
        if (v13 == v9)
          v13 = v10;
        if (v13 == v18)
          v13 = 0;
      }
      while (v13 != v15);
    }
    boost::circular_buffer<float,std::allocator<float>>::destroy((uint64_t)v6);
    v20 = &v11[4 * v8];
    *((_QWORD *)this + 8) = v11;
    *((_QWORD *)this + 9) = v20;
    if (v20 == v17)
      v21 = v11;
    else
      v21 = v17;
    *((_QWORD *)this + 10) = v11;
    *((_QWORD *)this + 11) = v21;
    *((_QWORD *)this + 12) = (v17 - v11) >> 2;
  }
  return this;
}

void sub_1B635A644(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  boost::circular_buffer<float,std::allocator<float>>::destroy(v2);
  if (*(_QWORD *)(v1 + 16))
  {
    if (v3 != *(_QWORD *)v1)
      operator delete(*(void **)v1);
  }
  _Unwind_Resume(a1);
}

void boost::container::vector<float,boost::container::small_vector_allocator<float,boost::container::new_allocator<void>,void>,void>::priv_resize<float,boost::move_detail::integral_constant<unsigned int,1u>>(uint64_t a1, unint64_t a2, int *a3)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  BOOL v6;
  unint64_t v7;
  char *v9;
  unint64_t v10;
  uint64_t v11;

  v3 = *(_QWORD *)(a1 + 8);
  v4 = v3 - a2;
  if (v3 <= a2)
  {
    v5 = *(_QWORD *)(a1 + 16);
    v6 = v5 >= v3;
    v7 = v5 - v3;
    if (!v6)
      __assert_rtn("priv_insert_forward_range", "vector.hpp", 2821, "this->m_holder.capacity() >= this->m_holder.m_size");
    v9 = (char *)(*(_QWORD *)a1 + 4 * v3);
    v10 = a2 - v3;
    if (v7 < a2 - v3)
    {
      boost::container::vector<float,boost::container::small_vector_allocator<float,boost::container::new_allocator<void>,void>,void>::priv_insert_forward_range_no_capacity<boost::container::dtl::insert_n_copies_proxy<boost::container::small_vector_allocator<float,boost::container::new_allocator<void>,void>,float *>>(&v11, (char *)a1, v9, v10, a3);
      return;
    }
    if (v10)
    {
      do
      {
        *(_DWORD *)v9 = *a3;
        v9 += 4;
        v6 = __CFADD__(v4++, 1);
      }
      while (!v6);
    }
  }
  *(_QWORD *)(a1 + 8) = a2;
}

void boost::container::vector<float,boost::container::small_vector_allocator<float,boost::container::new_allocator<void>,void>,void>::priv_insert_forward_range_no_capacity<boost::container::dtl::insert_n_copies_proxy<boost::container::small_vector_allocator<float,boost::container::new_allocator<void>,void>,float *>>(_QWORD *a1, char *a2, char *a3, unint64_t a4, int *a5)
{
  char *v5;
  unint64_t v6;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  char *v19;
  char *v20;
  char *v21;
  char *v22;
  char *v23;
  char *v24;
  char *v25;
  int v26;
  unint64_t v27;
  char *v28;

  v5 = (char *)*((_QWORD *)a2 + 1);
  v6 = *((_QWORD *)a2 + 2);
  if (v6 - (unint64_t)v5 >= a4)
    __assert_rtn("next_capacity", "vector.hpp", 473, "additional_objects > size_type(this->m_capacity - this->m_size)");
  v8 = 0x1FFFFFFFFFFFFFFFLL;
  if (0x1FFFFFFFFFFFFFFFLL - v6 < (unint64_t)&v5[a4 - v6])
    goto LABEL_27;
  v9 = v6 >> 61;
  v10 = 8 * v6;
  if (v9 > 4)
    v11 = -1;
  else
    v11 = v10;
  v12 = v10 / 5;
  if (v9)
    v12 = v11;
  v13 = (unint64_t)&v5[a4];
  if (v12 < 0x1FFFFFFFFFFFFFFFLL)
    v8 = v12;
  v14 = v13 <= v8 ? v8 : v13;
  if (v14 >> 61)
LABEL_27:
    boost::container::throw_length_error((boost::container *)"get_next_capacity, allocator's max size reached", a2);
  v19 = *(char **)a2;
  v20 = (char *)operator new(4 * v14);
  v21 = v20;
  v23 = *(char **)a2;
  v22 = (char *)*((_QWORD *)a2 + 1);
  v24 = v20;
  if (*(_QWORD *)a2)
  {
    v24 = v20;
    if (v23 != a3)
    {
      memmove(v20, v23, a3 - v23);
      v24 = &v21[a3 - v23];
    }
  }
  v25 = &v23[4 * (_QWORD)v22];
  v26 = *a5;
  v27 = a4;
  v28 = v24;
  do
  {
    *(_DWORD *)v28 = v26;
    v28 += 4;
    --v27;
  }
  while (v27);
  if (a3 && v25 != a3)
    memmove(&v24[4 * a4], a3, v25 - a3);
  if (v23 && a2 + 24 != v23)
  {
    operator delete(v23);
    v22 = (char *)*((_QWORD *)a2 + 1);
  }
  *(_QWORD *)a2 = v21;
  *((_QWORD *)a2 + 1) = &v22[a4];
  *((_QWORD *)a2 + 2) = v14;
  *a1 = &v21[a3 - v19];
}

_QWORD *std::optional<CA::ChannelLayout>::value_or[abi:ne180100]<CA::ChannelLayout const&>(_QWORD *a1, uint64_t a2, const void *a3, uint64_t a4)
{
  int v4;
  uint64_t v5;
  size_t v6;
  const void *v7;
  size_t v8;

  v4 = *(unsigned __int8 *)(a2 + 24);
  a1[1] = 0;
  a1[2] = 0;
  *a1 = 0;
  if (v4)
  {
    v5 = *(_QWORD *)(a2 + 8);
    v6 = v5 - *(_QWORD *)a2;
    v7 = *(const void **)a2;
  }
  else
  {
    v8 = a4 - (_QWORD)a3;
    v7 = a3;
    v5 = a4;
    v6 = v8;
  }
  return std::vector<char>::__init_with_size[abi:ne180100]<char *,char *>(a1, v7, v5, v6);
}

uint64_t std::__optional_destruct_base<CA::AudioBuffers,false>::~__optional_destruct_base[abi:ne180100](uint64_t a1)
{
  if (*(_BYTE *)(a1 + 8))
    ExtendedAudioBufferList_Destroy();
  return a1;
}

uint64_t std::__optional_destruct_base<AUDynamicDuckerV2::PowerHistoryWindow,false>::~__optional_destruct_base[abi:ne180100](uint64_t a1)
{
  if (*(_BYTE *)(a1 + 104))
  {
    boost::circular_buffer<float,std::allocator<float>>::destroy(a1 + 64);
    if (*(_QWORD *)(a1 + 16))
    {
      if (a1 + 24 != *(_QWORD *)a1)
        operator delete(*(void **)a1);
    }
  }
  return a1;
}

void AUMicSense::~AUMicSense(AUMicSense *this)
{
  AUMicSense::~AUMicSense(this);
  JUMPOUT(0x1BCC95CECLL);
}

{
  void **v2;

  *(_QWORD *)this = &off_1E69D4F88;
  v2 = (void **)((char *)this + 672);
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v2);
  v2 = (void **)((char *)this + 648);
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v2);
  std::unique_ptr<BlockProcessor>::reset[abi:ne180100]((uint64_t *)this + 78, 0);
  v2 = (void **)((char *)this + 576);
  std::vector<std::unique_ptr<DspLib::AlgorithmBaseNewParameters>>::__destroy_vector::operator()[abi:ne180100](&v2);
  v2 = (void **)((char *)this + 536);
  std::vector<AUMicSense::MicSenseInfo>::__destroy_vector::operator()[abi:ne180100](&v2);
  ausdk::AUBase::~AUBase(this);
}

unint64_t AUMicSense::CreateExtendedElements(int64x2_t *this)
{
  unint64_t i;
  uint64_t v3;
  unint64_t result;
  std::string *v5;
  __int128 v6;
  void **v7;
  CFStringRef v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  std::string v14;
  void *__p[2];
  int64_t v16;

  ausdk::AUScope::Initialize(this + 35, (ausdk::AUBase *)this, 4, 8);
  for (i = 0; ; ++i)
  {
    v3 = this[37].i64[1];
    result = v3
           ? (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 24))(v3)
           : (unint64_t)(this[36].i64[1] - this[36].i64[0]) >> 3;
    if (i >= result)
      break;
    std::to_string(&v14, i);
    v5 = std::string::insert(&v14, 0, "Channel", 7uLL);
    v6 = *(_OWORD *)&v5->__r_.__value_.__l.__data_;
    v16 = v5->__r_.__value_.__r.__words[2];
    *(_OWORD *)__p = v6;
    v5->__r_.__value_.__l.__size_ = 0;
    v5->__r_.__value_.__r.__words[2] = 0;
    v5->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v14.__r_.__value_.__l.__data_);
    if (v16 >= 0)
      v7 = __p;
    else
      v7 = (void **)__p[0];
    v8 = CFStringCreateWithCString(0, (const char *)v7, 0x8000100u);
    v9 = this[37].i64[1];
    if (v9)
    {
      v10 = (*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)v9 + 32))(v9, i);
    }
    else
    {
      v11 = this[36].i64[0];
      if (i >= (this[36].i64[1] - v11) >> 3)
        v10 = 0;
      else
        v10 = *(_QWORD *)(v11 + 8 * i);
    }
    ausdk::Owned<__CFString const*>::operator=((const void **)(v10 + 72), v8);
    CFRelease(v8);
    v12 = this[37].i64[1];
    if (v12)
      v13 = (*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)v12 + 32))(v12, i);
    else
      v13 = *(_QWORD *)(this[36].i64[0] + 8 * i);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v13 + 40))(v13, 14);
    if (SHIBYTE(v16) < 0)
      operator delete(__p[0]);
  }
  return result;
}

void sub_1B635AC70(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t AUMicSense::Initialize(AUMicSense *this)
{
  uint64_t Element;
  uint64_t v3;
  int v4;
  uint64_t v6;
  int v7;
  int v8;
  unsigned int v9;
  uint64_t v10;
  __int16 *i;
  unint64_t v13;
  unint64_t v14;
  int PreferredBlockSize;
  int v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  char *v26;
  char *v27;
  char *v28;
  char *v29;
  char *v30;
  char *v31;
  char *v32;
  uint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  char *v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t *v45;
  MicSense_Core *v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t *v49;
  uint64_t v50;
  unint64_t v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  int v57;
  uint64_t v58;
  _QWORD *v59;
  uint64_t v60;
  void *v61;
  const unsigned int *v62;
  int v63;
  const unsigned int *v64;
  int v65;
  uint64_t v66;

  Element = ausdk::AUScope::SafeGetElement((AUMicSense *)((char *)this + 80), 0);
  v3 = ausdk::AUScope::SafeGetElement((AUMicSense *)((char *)this + 128), 0);
  v4 = *(_DWORD *)(Element + 88);
  *((_BYTE *)this + 721) = v4 == 1718773105;
  if (v4 != 1819304813 && v4 != 1718773105)
    return 4294956428;
  v6 = v3;
  v7 = *(_DWORD *)(Element + 108);
  v8 = *(_DWORD *)(v3 + 108);
  v66 = 0;
  v9 = (*(uint64_t (**)(AUMicSense *, uint64_t *))(*(_QWORD *)this + 376))(this, &v66);
  if (!v9)
    return 4294956428;
  v10 = v9;
  for (i = (__int16 *)(v66 + 2); v7 != *(i - 1) || v8 != *i; i += 2)
  {
    if (!--v10)
      return 4294956428;
  }
  if (*(double *)(Element + 80) != *(double *)(v6 + 80))
    return 4294956428;
  *((_DWORD *)this + 176) = v7;
  *((_DWORD *)this + 177) = v8;
  v13 = (unint64_t)(*(double *)(ausdk::AUScope::SafeGetElement((AUMicSense *)((char *)this + 128), 0) + 80) + 0.5);
  *((_DWORD *)this + 175) = v13;
  v14 = *((unsigned int *)this + 84);
  *((_DWORD *)this + 179) = v14;
  if (*((_BYTE *)this + 721))
  {
    *((_BYTE *)this + 612) = 0;
    *((_DWORD *)this + 154) = v14;
  }
  else if (*((_BYTE *)this + 376)
         && (PreferredBlockSize = MicSense_Core::getPreferredBlockSize((MicSense_Core *)v13, v14)) != 0)
  {
    *((_DWORD *)this + 154) = PreferredBlockSize;
    *((_BYTE *)this + 612) = 0;
  }
  else
  {
    *((_BYTE *)this + 612) = 1;
    *((_DWORD *)this + 154) = MicSense_Core::getPreferredBlockProcessorSize((MicSense_Core *)v13);
    v65 = 1;
    v64 = (const unsigned int *)((char *)this + 704);
    v63 = 1;
    v61 = this;
    v62 = (const unsigned int *)((char *)this + 708);
    MicSenseUtils::create<BlockProcessor,std::unique_ptr<BlockProcessor>,int,unsigned int *,int,unsigned int *,unsigned int &,int (&)(void *,unsigned int,AudioBufferList const**,AudioBufferList**),AUMicSense *>((uint64_t *)this + 78, &v65, &v64, &v63, &v62, (int *)this + 154, &v61);
  }
  v16 = *((_DWORD *)this + 152);
  if (v16 == 1)
  {
    v17 = *((unsigned int *)this + 176);
    *((_DWORD *)this + 132) = v17;
  }
  else
  {
    if (v16)
      return 4294956445;
    v17 = 1;
    *((_DWORD *)this + 132) = 1;
    v16 = *((_DWORD *)this + 176);
  }
  *((_DWORD *)this + 178) = v16;
  v18 = *((_QWORD *)this + 68);
  v19 = *((_QWORD *)this + 67);
  v20 = 0x2E8BA2E8BA2E8BA3 * ((v18 - v19) >> 4);
  v21 = v17 - v20;
  if (v17 <= v20)
  {
    if (v17 < v20)
    {
      v42 = v19 + 176 * v17;
      while (v18 != v42)
      {
        v18 -= 176;
        std::__destroy_at[abi:ne180100]<AUMicSense::MicSenseInfo,0>(v18);
      }
      *((_QWORD *)this + 68) = v42;
    }
  }
  else
  {
    v22 = *((_QWORD *)this + 69);
    if (0x2E8BA2E8BA2E8BA3 * ((v22 - v18) >> 4) >= v21)
    {
      v43 = v18 + 176 * v21;
      do
      {
        *(_QWORD *)(v18 + 48) = 0;
        *(_OWORD *)(v18 + 16) = 0uLL;
        *(_OWORD *)(v18 + 32) = 0uLL;
        *(_OWORD *)v18 = 0uLL;
        *(_DWORD *)(v18 + 56) = 1;
        *(_OWORD *)(v18 + 60) = 0uLL;
        *(_OWORD *)(v18 + 76) = 0uLL;
        *(_OWORD *)(v18 + 92) = 0uLL;
        *(_OWORD *)(v18 + 108) = 0uLL;
        *(_OWORD *)(v18 + 124) = 0uLL;
        *(_OWORD *)(v18 + 140) = 0uLL;
        *(_OWORD *)(v18 + 156) = 0uLL;
        *(_DWORD *)(v18 + 172) = 0;
        v18 += 176;
      }
      while (v18 != v43);
      *((_QWORD *)this + 68) = v43;
    }
    else
    {
      v23 = 0x2E8BA2E8BA2E8BA3 * ((v22 - v19) >> 4);
      v24 = 2 * v23;
      if (2 * v23 <= v17)
        v24 = v17;
      if (v23 >= 0xBA2E8BA2E8BA2ELL)
        v25 = 0x1745D1745D1745DLL;
      else
        v25 = v24;
      if (v25 > 0x1745D1745D1745DLL)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v26 = (char *)operator new(176 * v25);
      v27 = &v26[176 * v20];
      v28 = &v26[176 * v17];
      v29 = v27;
      do
      {
        *((_QWORD *)v29 + 6) = 0;
        *((_OWORD *)v29 + 1) = 0uLL;
        *((_OWORD *)v29 + 2) = 0uLL;
        *(_OWORD *)v29 = 0uLL;
        *((_DWORD *)v29 + 14) = 1;
        *(_OWORD *)(v29 + 60) = 0uLL;
        *(_OWORD *)(v29 + 76) = 0uLL;
        *(_OWORD *)(v29 + 92) = 0uLL;
        *(_OWORD *)(v29 + 108) = 0uLL;
        *(_OWORD *)(v29 + 124) = 0uLL;
        *(_OWORD *)(v29 + 140) = 0uLL;
        *(_OWORD *)(v29 + 156) = 0uLL;
        *((_DWORD *)v29 + 43) = 0;
        v29 += 176;
      }
      while (v29 != v28);
      v30 = &v26[176 * v25];
      v31 = (char *)*((_QWORD *)this + 68);
      v32 = (char *)*((_QWORD *)this + 67);
      if (v31 == v32)
      {
        *((_QWORD *)this + 67) = v27;
        *((_QWORD *)this + 68) = v28;
        *((_QWORD *)this + 69) = v30;
      }
      else
      {
        v33 = 0;
        do
        {
          v34 = &v27[v33];
          v35 = &v31[v33];
          v36 = *(_QWORD *)&v31[v33 - 176];
          *((_QWORD *)v35 - 22) = 0;
          *((_QWORD *)v34 - 22) = v36;
          *((_QWORD *)v34 - 21) = 0;
          *((_QWORD *)v34 - 20) = 0;
          *((_QWORD *)v34 - 19) = 0;
          *(_OWORD *)(v34 - 168) = *(_OWORD *)&v31[v33 - 168];
          *((_QWORD *)v34 - 19) = *(_QWORD *)&v31[v33 - 152];
          *((_QWORD *)v35 - 21) = 0;
          *((_QWORD *)v35 - 20) = 0;
          *((_QWORD *)v35 - 19) = 0;
          *((_QWORD *)v34 - 18) = 0;
          *((_QWORD *)v34 - 17) = 0;
          *((_QWORD *)v34 - 16) = 0;
          *((_OWORD *)v34 - 9) = *(_OWORD *)&v31[v33 - 144];
          *((_QWORD *)v34 - 16) = *(_QWORD *)&v31[v33 - 128];
          *((_QWORD *)v35 - 17) = 0;
          *((_QWORD *)v35 - 16) = 0;
          *((_QWORD *)v35 - 18) = 0;
          v37 = *(_QWORD *)&v31[v33 - 120];
          *((_QWORD *)v34 - 13) = 0;
          *((_QWORD *)v34 - 12) = 0;
          *((_QWORD *)v34 - 15) = v37;
          *((_QWORD *)v34 - 14) = 0;
          *((_OWORD *)v34 - 7) = *(_OWORD *)&v31[v33 - 112];
          *((_QWORD *)v34 - 12) = *(_QWORD *)&v31[v33 - 96];
          *((_QWORD *)v35 - 14) = 0;
          *((_QWORD *)v35 - 13) = 0;
          *((_QWORD *)v35 - 12) = 0;
          v38 = *(_OWORD *)&v31[v33 - 88];
          v39 = *(_OWORD *)&v31[v33 - 72];
          v40 = *(_OWORD *)&v31[v33 - 56];
          *(_OWORD *)(v34 - 40) = *(_OWORD *)&v31[v33 - 40];
          *(_OWORD *)(v34 - 56) = v40;
          *(_OWORD *)(v34 - 72) = v39;
          *((_QWORD *)v34 - 2) = 0;
          *((_QWORD *)v34 - 1) = 0;
          *(_OWORD *)(v34 - 88) = v38;
          *((_QWORD *)v34 - 3) = 0;
          *(_OWORD *)(v34 - 24) = *(_OWORD *)&v31[v33 - 24];
          *((_QWORD *)v34 - 1) = *(_QWORD *)&v31[v33 - 8];
          *((_QWORD *)v35 - 3) = 0;
          *((_QWORD *)v35 - 2) = 0;
          *((_QWORD *)v35 - 1) = 0;
          v33 -= 176;
        }
        while (&v31[v33] != v32);
        v41 = (char *)*((_QWORD *)this + 67);
        v31 = (char *)*((_QWORD *)this + 68);
        *((_QWORD *)this + 67) = &v27[v33];
        *((_QWORD *)this + 68) = v28;
        *((_QWORD *)this + 69) = v30;
        if (v31 != v41)
        {
          do
          {
            v31 -= 176;
            std::__destroy_at[abi:ne180100]<AUMicSense::MicSenseInfo,0>((uint64_t)v31);
          }
          while (v31 != v41);
          v31 = v41;
        }
      }
      if (v31)
        operator delete(v31);
    }
  }
  if (*((_DWORD *)this + 132))
  {
    v44 = 0;
    do
    {
      v45 = (uint64_t *)(*((_QWORD *)this + 67) + 176 * v44);
      v46 = (MicSense_Core *)operator new();
      MicSense_Core::MicSense_Core(v46, *((unsigned int *)this + 178), *((unsigned int *)this + 154), *((_BYTE *)this + 721) != 0);
      std::unique_ptr<MicSense_Core>::reset[abi:ne180100](v45, (uint64_t)v46);
      MicSense_Core::setSampleRate(*(MicSense_Core **)(*((_QWORD *)this + 67) + 176 * v44), (float)*((unsigned int *)this + 175));
      AUMicSense::syncParametersWithCore(this, v44);
      v47 = *((unsigned int *)this + 178);
      v48 = *((_QWORD *)this + 67) + 176 * v44;
      v49 = (uint64_t *)(v48 + 32);
      std::vector<std::vector<float>>::resize((uint64_t *)(v48 + 8), v47);
      std::vector<std::vector<float>>::resize(v49, v47);
      if (*((_DWORD *)this + 178))
      {
        v50 = 0;
        v51 = 0;
        do
        {
          v52 = (*((_DWORD *)this + 154) << *((_BYTE *)this + 721));
          v53 = *((_QWORD *)this + 67) + 176 * v44;
          v54 = *(_QWORD *)(v53 + 32) + v50;
          std::vector<float>::resize(*(_QWORD *)(v53 + 8) + v50, v52);
          std::vector<float>::resize(v54, v52);
          ++v51;
          v50 += 24;
        }
        while (v51 < *((unsigned int *)this + 178));
      }
      ++v44;
    }
    while (v44 < *((unsigned int *)this + 132));
  }
  std::vector<std::vector<float>>::resize((uint64_t *)this + 84, *((unsigned int *)this + 176));
  AUMicSense::syncPropertiesWithCore(this);
  if (*((_DWORD *)this + 132))
  {
    v55 = 0;
    v56 = 0;
    v57 = *((_DWORD *)this + 154);
    v58 = *((_QWORD *)this + 67);
    do
    {
      LODWORD(v64) = 0;
      std::vector<float>::assign((char **)(v58 + v55 + 152), (5 * v57 + 9), &v64);
      v58 = *((_QWORD *)this + 67);
      v59 = (_QWORD *)(v58 + v55);
      v60 = *(_QWORD *)(v58 + v55 + 152) + 16;
      v59[14] = v60;
      v57 = *((_DWORD *)this + 154);
      v59[15] = v60 + 4 * (v57 + 1);
      v59[16] = v60 + 4 * (2 * v57 + 2);
      v59[17] = v60 + 4 * (3 * v57 + 3);
      v59[18] = v60 + 4 * (4 * v57 + 4);
      ++v56;
      v55 += 176;
    }
    while (v56 < *((unsigned int *)this + 132));
  }
  return 0;
}

void sub_1B635B304(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1BCC95CEC](v1, 0x10B0C409FD0397FLL);
  _Unwind_Resume(a1);
}

uint64_t AUMicSense::Reset(AUMicSense *this)
{
  unint64_t v2;
  unint64_t i;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  unint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  char *v13;
  unint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  char *v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  float *v23;
  uint64_t v24;
  unint64_t v25;
  char **v26;
  char **v27;
  unint64_t v28;
  char **v29;
  BlockProcessor *v30;
  DSPSplitComplex v32;
  int v33;

  v2 = *((unsigned int *)this + 132);
  if ((_DWORD)v2)
  {
    for (i = 0; i < v2; ++i)
    {
      v4 = *(_QWORD *)(*((_QWORD *)this + 67) + 176 * i);
      if (v4)
      {
        v5 = *(_QWORD *)(v4 + 64);
        v6 = *(_QWORD *)(v4 + 568);
        v7 = *(_BYTE **)(v4 + 552);
        if (v5 <= (v6 - (uint64_t)v7) >> 3)
        {
          v13 = *(char **)(v4 + 560);
          v14 = (v13 - v7) >> 3;
          if (v14 >= v5)
            v15 = *(_QWORD *)(v4 + 64);
          else
            v15 = (v13 - v7) >> 3;
          if (v15)
          {
            v16 = *(_QWORD **)(v4 + 552);
            do
            {
              *v16++ = 0;
              --v15;
            }
            while (v15);
          }
          if (v5 <= v14)
          {
            *(_QWORD *)(v4 + 560) = &v7[8 * v5];
          }
          else
          {
            v17 = &v13[8 * (v5 - v14)];
            v18 = 8 * v5 - 8 * v14;
            do
            {
              *(_QWORD *)v13 = 0;
              v13 += 8;
              v18 -= 8;
            }
            while (v18);
            *(_QWORD *)(v4 + 560) = v17;
          }
        }
        else
        {
          if (v7)
          {
            *(_QWORD *)(v4 + 560) = v7;
            operator delete(v7);
            v6 = 0;
            *(_QWORD *)(v4 + 552) = 0;
            *(_QWORD *)(v4 + 560) = 0;
            *(_QWORD *)(v4 + 568) = 0;
          }
          if (v5 >> 61)
            std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
          v8 = v6 >> 2;
          if (v6 >> 2 <= v5)
            v8 = v5;
          if ((unint64_t)v6 >= 0x7FFFFFFFFFFFFFF8)
            v9 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v9 = v8;
          std::vector<std::tuple<unsigned int,float>>::__vallocate[abi:ne180100]((_QWORD *)(v4 + 552), v9);
          v10 = *(_QWORD **)(v4 + 560);
          v11 = &v10[v5];
          v12 = 8 * v5;
          do
          {
            *v10++ = 0;
            v12 -= 8;
          }
          while (v12);
          *(_QWORD *)(v4 + 560) = v11;
        }
        v19 = *(_QWORD *)(v4 + 32);
        LODWORD(v32.realp) = 0;
        std::vector<float>::assign((char **)(v4 + 312), v19, &v32);
        if (*(_QWORD *)(v4 + 64))
        {
          v20 = 0;
          v21 = 0;
          do
          {
            v22 = *(_QWORD *)(*(_QWORD *)(v4 + 616) + 8 * v21);
            if (v22)
            {
              v23 = *(float **)(v22 + 104);
              v24 = *(_QWORD *)(v22 + 128);
              *(_QWORD *)(v22 + 152) = v23;
              *(_QWORD *)(v22 + 160) = v24;
              *(_BYTE *)(v22 + 48) = 1;
              *(_QWORD *)(v22 + 32) = 0;
              vDSP_vfill(&MicSenseUtils::DynamicFIR<float>::reset(void)::val, v23, 1, *(_QWORD *)(v22 + 16));
              vDSP_vfill(&MicSenseUtils::DynamicFIR<float>::reset(void)::val, *(float **)(v22 + 128), 1, *(_QWORD *)(v22 + 16));
              vDSP_vfill(&MicSenseUtils::DynamicFIR<float>::reset(void)::val, *(float **)(v22 + 80), 1, *(_QWORD *)(v22 + 16) + *(_QWORD *)(v22 + 8) - 1);
            }
            v32.realp = *(float **)(v4 + 312);
            v32.imagp = v32.realp;
            VPTimeFreqConverter::Synthesize(*(VPTimeFreqConverter **)(*(_QWORD *)(v4 + 576) + 8 * v21), &v32, *(float **)(v4 + 144));
            v25 = *(_QWORD *)(v4 + 40);
            v26 = (char **)(*(_QWORD *)(v4 + 456) + v20);
            v27 = (char **)(*(_QWORD *)(v4 + 480) + v20);
            v33 = 0;
            std::vector<float>::assign(v26, v25, &v33);
            v33 = 0;
            std::vector<float>::assign(v27, v25, &v33);
            v28 = *(_QWORD *)(v4 + 32);
            v29 = (char **)(*(_QWORD *)(v4 + 432) + v20);
            v33 = 0;
            std::vector<float>::assign(v29, v28, &v33);
            ++v21;
            v20 += 24;
          }
          while (*(_QWORD *)(v4 + 64) > v21);
        }
        v2 = *((unsigned int *)this + 132);
      }
    }
  }
  v30 = (BlockProcessor *)*((_QWORD *)this + 78);
  if (v30)
    BlockProcessor::Reset(v30);
  return 0;
}

uint64_t AUMicSense::GetPropertyInfo(AUMicSense *this, int a2, int a3, unsigned int a4, unsigned int *a5, BOOL *a6)
{
  uint64_t result;
  int v8;

  if (a3)
  {
    result = 4294956430;
    switch(a2)
    {
      case 1000:
      case 1001:
      case 1003:
        return result;
      case 1002:
        if ((a3 & 0xFFFFFFFB) == 0)
          goto LABEL_12;
        break;
      case 1004:
        goto LABEL_6;
      default:
        goto LABEL_10;
    }
  }
  else
  {
    switch(a2)
    {
      case 1000:
        result = 0;
        *a6 = 1;
        goto LABEL_14;
      case 1001:
        result = 0;
        *a6 = 0;
LABEL_14:
        v8 = 8;
        goto LABEL_15;
      case 1002:
LABEL_12:
        result = 0;
        *a5 = 8;
        *a6 = 0;
        return result;
      case 1003:
        goto LABEL_9;
      case 1004:
LABEL_6:
        result = 0;
        *a6 = 1;
        v8 = 4 * *((_DWORD *)this + 84);
        goto LABEL_15;
      default:
        if (a2 == 3700 || a2 == 21)
        {
LABEL_9:
          result = 0;
          *a6 = 1;
          v8 = 4;
LABEL_15:
          *a5 = v8;
        }
        else
        {
LABEL_10:
          result = 4294956417;
        }
        break;
    }
  }
  return result;
}

uint64_t AUMicSense::GetProperty(AUMicSense *this, int a2, int a3, unsigned int a4, CFDataRef *__b)
{
  uint64_t result;
  CFDataRef v9;
  int v10;
  uint64_t v11;
  int v12;
  int v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  CFDataRef v17;
  uint64_t v18;
  UInt8 bytes[4];
  char v20[12];
  _DWORD v21[4];
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  if (!a3)
  {
    switch(a2)
    {
      case 1001:
        *(_DWORD *)bytes = 65792;
        strcpy(v20, "Aug  9 2024");
        strcpy((char *)v21, "18:35:20");
        v21[3] = *((_DWORD *)this + 152);
        v9 = CFDataCreate(0, bytes, 44);
        goto LABEL_40;
      case 1002:
LABEL_5:
        if (!*((_BYTE *)this + 17))
          return 4294956429;
        v10 = *((_DWORD *)this + 152);
        if (a3 && !v10 || a3 != 4 && v10 == 1)
          return 4294956430;
        if (a4 > 7)
          return 4294956419;
        AUMicSense::updateStatus(this, a4);
        if (*((_DWORD *)this + 152))
          v11 = *((_QWORD *)this + 67) + 176 * a4;
        else
          v11 = *((_QWORD *)this + 67);
        v9 = CFDataCreate(0, *(const UInt8 **)(v11 + 152), *(_QWORD *)(v11 + 160) - *(_QWORD *)(v11 + 152));
LABEL_40:
        v17 = v9;
        result = 0;
        *__b = v17;
        return result;
      case 1003:
        result = 0;
        v13 = *((_DWORD *)this + 152);
        goto LABEL_26;
      case 1004:
LABEL_13:
        if (!*((_BYTE *)this + 17))
          return 4294956429;
        v12 = *((_DWORD *)this + 152);
        if (a3 && !v12 || a3 != 4 && v12 == 1)
          return 4294956430;
        if (a4 > 7)
          return 4294956419;
        if (v12)
          v14 = a4;
        else
          v14 = 0;
        if (v12)
          v15 = 0;
        else
          v15 = a4;
        if (*((_BYTE *)this + 720))
        {
          v16 = *((unsigned int *)this + 84);
          if ((_DWORD)v16)
            memset_pattern16(__b, &unk_1B6627B80, 4 * v16);
        }
        else
        {
          v18 = *((unsigned int *)this + 154);
          if ((_DWORD)v18 != *((_DWORD *)this + 84))
            return 4294956446;
          if ((_DWORD)v18)
            memmove(__b, *(const void **)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 67) + 176 * v14) + 480) + 24 * v15), 4 * v18);
        }
        return 0;
      default:
        if (a2 == 3700)
        {
          result = 0;
          v13 = *((unsigned __int8 *)this + 376);
        }
        else
        {
          if (a2 != 21)
            return 4294956417;
          result = 0;
          v13 = *((unsigned __int8 *)this + 720);
        }
LABEL_26:
        *(_DWORD *)__b = v13;
        return result;
    }
  }
  result = 4294956430;
  switch(a2)
  {
    case 1001:
    case 1003:
      return result;
    case 1002:
      goto LABEL_5;
    case 1004:
      goto LABEL_13;
    default:
      return 4294956417;
  }
  return result;
}

uint64_t AUMicSense::SetProperty(AUMicSense *this, int a2, int a3, unsigned int a4, const __CFNumber **a5, unsigned int a6)
{
  uint64_t v7;
  const __CFDictionary *v8;
  const __CFNumber *Value;
  const __CFNumber *v10;
  const __CFNumber *v11;
  unint64_t v12;
  _QWORD *v13;
  unsigned int v14;
  unint64_t v15;
  void **v16;
  std::string::size_type v17;
  std::string *v18;
  __int128 v19;
  void **v20;
  CFStringRef v21;
  const __CFData *v22;
  unsigned int Length;
  unsigned int v24;
  const UInt8 *BytePtr;
  _DWORD *v26;
  uint64_t v27;
  unsigned int v28;
  int v29;
  const __CFNumber *v30;
  CAXException *v32;
  CAXException *exception;
  std::string v34;
  void *__p[2];
  int64_t v36;
  void *v37[2];
  unsigned __int8 v38;
  unsigned int v39;
  int v40;
  int valuePtr;

  if (a3)
  {
    if (a2 == 1000)
      return 4294956430;
    if (a2 == 1003)
    {
      if (*((_BYTE *)this + 17))
        return 4294956447;
      else
        return 4294956430;
    }
    return 4294956417;
  }
  if (a2 > 1002)
  {
    if (a2 == 1003)
    {
      if (*((_BYTE *)this + 17))
        return 4294956447;
      v30 = *a5;
      v37[0] = 0;
      CFNumberGetValue(v30, kCFNumberSInt64Type, v37);
      v7 = 0;
      *((_DWORD *)this + 152) = v37[0];
      return v7;
    }
    if (a2 != 3700)
      return 4294956417;
    if (a6 >= 4)
    {
      v7 = 0;
      *((_BYTE *)this + 376) = *(_BYTE *)a5;
      return v7;
    }
    return 4294956445;
  }
  if (a2 == 21)
  {
    v7 = 0;
    *((_BYTE *)this + 720) = *(_DWORD *)a5 != 0;
    return v7;
  }
  if (a2 != 1000)
    return 4294956417;
  if (!a5)
    return 4294956445;
  v8 = *a5;
  if (!*a5)
    return 4294956445;
  valuePtr = 0;
  Value = (const __CFNumber *)CFDictionaryGetValue(v8, CFSTR("SampleRate"));
  if (!CFNumberGetValue(Value, kCFNumberIntType, &valuePtr))
  {
    exception = (CAXException *)__cxa_allocate_exception(0x110uLL);
    CAXException::CAXException(exception, "Failed to retrieve sample rate from input dictionary.", -1);
    goto LABEL_65;
  }
  *((_DWORD *)this + 159) = valuePtr;
  v40 = 0;
  v10 = (const __CFNumber *)CFDictionaryGetValue(v8, CFSTR("BlockSize"));
  if (!CFNumberGetValue(v10, kCFNumberIntType, &v40))
  {
    exception = (CAXException *)__cxa_allocate_exception(0x110uLL);
    CAXException::CAXException(exception, "Failed to retrieve block size used from input dictionary.", -1);
    goto LABEL_65;
  }
  *((_DWORD *)this + 158) = v40;
  v39 = 0;
  v11 = (const __CFNumber *)CFDictionaryGetValue(v8, CFSTR("NumberOfChannels"));
  if (!CFNumberGetValue(v11, kCFNumberIntType, &v39))
  {
    exception = (CAXException *)__cxa_allocate_exception(0x110uLL);
    CAXException::CAXException(exception, "Failed to retrieve number of channels from input dictionary.", -1);
LABEL_65:
  }
  v12 = v39;
  *((_DWORD *)this + 160) = v39;
  v13 = (_QWORD *)((char *)this + 648);
  std::vector<std::vector<float>>::resize((uint64_t *)this + 81, v12);
  std::string::basic_string[abi:ne180100]<0>(v37, "NoiseProfile");
  v14 = v39;
  if (v39)
  {
    v15 = 0;
    while (1)
    {
      std::to_string(&v34, v15);
      if ((v38 & 0x80u) == 0)
        v16 = v37;
      else
        v16 = (void **)v37[0];
      if ((v38 & 0x80u) == 0)
        v17 = v38;
      else
        v17 = (std::string::size_type)v37[1];
      v18 = std::string::insert(&v34, 0, (const std::string::value_type *)v16, v17);
      v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
      v36 = v18->__r_.__value_.__r.__words[2];
      *(_OWORD *)__p = v19;
      v18->__r_.__value_.__l.__size_ = 0;
      v18->__r_.__value_.__r.__words[2] = 0;
      v18->__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(v34.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v34.__r_.__value_.__l.__data_);
      if (v36 >= 0)
        v20 = __p;
      else
        v20 = (void **)__p[0];
      v21 = CFStringCreateWithCString(0, (const char *)v20, 0x8000100u);
      v22 = (const __CFData *)CFDictionaryGetValue(v8, v21);
      CFRelease(v21);
      if (!v22)
      {
        v32 = (CAXException *)__cxa_allocate_exception(0x110uLL);
        CAXException::CAXException(v32, "Failed to retrieve noise profile from input dictionary.", -1);
      }
      Length = CFDataGetLength(v22);
      v24 = Length >> 2;
      if (Length >> 2 != v40 + 1)
        break;
      std::vector<float>::resize(*v13 + 24 * v15, v24);
      BytePtr = CFDataGetBytePtr(v22);
      if (Length >= 4)
      {
        v26 = *(_DWORD **)(*v13 + 24 * v15);
        if (v24 <= 1)
          v27 = 1;
        else
          v27 = v24;
        do
        {
          v28 = *(_DWORD *)BytePtr;
          BytePtr += 4;
          *v26++ = bswap32(v28);
          --v27;
        }
        while (v27);
      }
      if (SHIBYTE(v36) < 0)
        operator delete(__p[0]);
      ++v15;
      v14 = v39;
      if (v15 >= v39)
        goto LABEL_38;
    }
    if (SHIBYTE(v36) < 0)
      operator delete(__p[0]);
    goto LABEL_55;
  }
LABEL_38:
  if (*((_BYTE *)this + 17))
  {
    if (*((_DWORD *)this + 176) != v14)
    {
LABEL_55:
      v29 = 0;
      v7 = 4294956445;
      goto LABEL_56;
    }
    AUMicSense::syncPropertiesWithCore(this);
  }
  v7 = 0;
  v29 = 1;
LABEL_56:
  if ((char)v38 < 0)
    operator delete(v37[0]);
  if (v29)
  {
    v7 = 0;
    *((_BYTE *)this + 696) = 1;
  }
  return v7;
}

void sub_1B635BD14(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a27 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t AUMicSense::SetParameter(AUMicSense *this, unsigned int a2, unsigned int a3, uint64_t a4, float a5)
{
  unsigned int v8;
  unsigned int v11;
  uint64_t v12;
  ausdk::AUElement *v13;
  uint64_t v14;
  uint64_t v15;
  ausdk::AUScope *Scope;
  ausdk::AUElement *Element;

  if (a4 > 8)
    return 4294956419;
  if (a2 > 0xE)
    return 4294956418;
  v8 = a4;
  if (a3 == 4)
  {
    if (*((_DWORD *)this + 152) != 1)
      goto LABEL_19;
    v11 = a4;
    v12 = *((_QWORD *)this + 75);
    if (v12)
    {
      v13 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v12 + 32))(v12, a4);
    }
    else
    {
      v14 = *((_QWORD *)this + 72);
      v13 = a4 >= (unint64_t)((*((_QWORD *)this + 73) - v14) >> 3)
          ? 0
          : *(ausdk::AUElement **)(v14 + 8 * a4);
    }
    ausdk::AUElement::SetParameter(v13, a2, a5, 0);
    if (!*((_BYTE *)this + 17) || *((_DWORD *)this + 132) <= v8)
      goto LABEL_19;
  }
  else
  {
    if (a3 || *((_DWORD *)this + 152) || !*((_BYTE *)this + 17))
      goto LABEL_19;
    v11 = 0;
  }
  v15 = *((_QWORD *)this + 67) + 176 * v11;
  ++*(_DWORD *)(v15 + 56);
LABEL_19:
  Scope = (ausdk::AUScope *)ausdk::AUBase::GetScope(this, a3);
  Element = (ausdk::AUElement *)ausdk::AUScope::SafeGetElement(Scope, v8);
  ausdk::AUElement::SetParameter(Element, a2, a5, 0);
  return 0;
}

uint64_t AUMicSense::CanScheduleParameters(AUMicSense *this)
{
  return 0;
}

uint64_t AUMicSense::ProcessMultipleBufferLists(AUMicSense *this, unsigned int *a2, unsigned int a3, unsigned int a4, const AudioBufferList **a5, unsigned int a6, AudioBufferList **a7)
{
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  const void *v14;
  void *v15;
  unsigned int v16;
  unsigned int v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t i;
  uint64_t v24;
  int v25;
  unsigned int v26;
  unsigned int v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t result;
  unint64_t v31;
  unsigned int v32;
  size_t v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  void **v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  const void **v48;
  int v49;
  unsigned int v51;

  if (*((_BYTE *)this + 720))
  {
    v11 = *((unsigned int *)this + 176);
    if ((_DWORD)v11)
    {
      v12 = 0;
      v13 = 16;
      do
      {
        v14 = *(const void **)((char *)&(*a5)->mNumberBuffers + v13);
        v15 = *(void **)((char *)&(*a7)->mNumberBuffers + v13);
        if (v14 != v15)
        {
          memcpy(v15, v14, 4 * (a3 << *((_BYTE *)this + 721)));
          v11 = *((unsigned int *)this + 176);
        }
        ++v12;
        v13 += 16;
      }
      while (v12 < v11);
    }
    if (a6 > 1 && a7[1])
    {
      v16 = *(_DWORD *)(ausdk::AUScope::SafeGetElement((AUMicSense *)((char *)this + 128), 1u) + 108);
      v17 = *((_DWORD *)this + 176);
      if (v17 >= v16)
        v17 = v16;
      if (v17)
      {
        v18 = 0;
        v19 = 0;
        do
        {
          vDSP_vfill(&AUMicSense::ProcessMultipleBufferLists(unsigned int &,unsigned int,unsigned int,AudioBufferList const**,unsigned int,AudioBufferList**)::kOnef, (float *)a7[1]->mBuffers[v18].mData, 1, (unint64_t)a7[1]->mBuffers[v18].mDataByteSize >> 2);
          ++v19;
          LODWORD(v20) = *((_DWORD *)this + 176);
          if (v20 >= v16)
            v20 = v16;
          else
            v20 = v20;
          ++v18;
        }
        while (v19 < v20);
      }
    }
    return 0;
  }
  v21 = *((unsigned int *)this + 132);
  if ((_DWORD)v21)
  {
    v22 = 0;
    for (i = 0; i < v21; ++i)
    {
      v24 = *((_QWORD *)this + 67) + v22;
      v25 = *(_DWORD *)(v24 + 56);
      if (v25 != *(_DWORD *)(v24 + 60))
      {
        *(_DWORD *)(v24 + 60) = v25;
        AUMicSense::syncParametersWithCore(this, i);
        v21 = *((unsigned int *)this + 132);
      }
      v22 += 176;
    }
  }
  if (*((_BYTE *)this + 612))
  {
    BlockProcessor::Process(*((BlockProcessor **)this + 78), a3, a5, a7);
  }
  else
  {
    if (*((_DWORD *)this + 179) != a3)
      return 4294956428;
    v32 = *((_DWORD *)this + 154);
    if (a3 % v32)
      __assert_rtn("ProcessMultipleBufferLists", "AUMicSense.cpp", 780, "inFramesToProcess % mBlockSize == 0");
    if (a3)
    {
      v51 = 0;
      v33 = 4 * (v32 << *((_BYTE *)this + 721));
      LODWORD(v34) = *((_DWORD *)this + 176);
      do
      {
        if ((_DWORD)v34)
        {
          v35 = 0;
          v36 = 0;
          v37 = 8;
          v38 = 16;
          do
          {
            v39 = *((_QWORD *)this + 67);
            if (*((_DWORD *)this + 152))
              v40 = *(void ***)(v39 + v37);
            else
              v40 = (void **)(*(_QWORD *)(v39 + 8) + v35);
            memcpy(*v40, (const void *)(*(_QWORD *)((char *)&(*a5)->mNumberBuffers + v38) + 4 * v51), v33);
            ++v36;
            v34 = *((unsigned int *)this + 176);
            v38 += 16;
            v37 += 176;
            v35 += 24;
          }
          while (v36 < v34);
        }
        if (*((_DWORD *)this + 132))
        {
          v41 = 0;
          v42 = 0;
          do
          {
            MicSense_Core::process(*(MicSense_Core **)(*((_QWORD *)this + 67) + v41), *((_QWORD *)this + 67) + v41 + 8, (uint64_t *)(*((_QWORD *)this + 67) + v41 + 32), *((unsigned int *)this + 154));
            ++v42;
            v41 += 176;
          }
          while (v42 < *((unsigned int *)this + 132));
          LODWORD(v34) = *((_DWORD *)this + 176);
        }
        if ((_DWORD)v34)
        {
          v43 = 0;
          v44 = 0;
          v45 = 16;
          v46 = 32;
          do
          {
            v47 = *((_QWORD *)this + 67);
            if (*((_DWORD *)this + 152))
              v48 = *(const void ***)(v47 + v46);
            else
              v48 = (const void **)(*(_QWORD *)(v47 + 32) + v43);
            memcpy((void *)(*(_QWORD *)((char *)&(*a7)->mNumberBuffers + v45) + 4 * v51), *v48, v33);
            ++v44;
            v34 = *((unsigned int *)this + 176);
            v46 += 176;
            v43 += 24;
            v45 += 16;
          }
          while (v44 < v34);
        }
        v49 = *((_DWORD *)this + 154);
        v51 += v49;
        a3 -= v49;
      }
      while (a3);
    }
  }
  if (a6 < 2 || !a7[1])
    return 0;
  v26 = *(_DWORD *)(ausdk::AUScope::SafeGetElement((AUMicSense *)((char *)this + 128), 1u) + 108);
  v27 = *((_DWORD *)this + 176);
  if (v27 >= v26)
    v27 = v26;
  if (!v27)
    return 0;
  v28 = 0;
  v29 = 16;
  do
  {
    result = (*(uint64_t (**)(AUMicSense *, uint64_t, _QWORD, unint64_t, _QWORD))(*(_QWORD *)this + 88))(this, 1004, 4 * (*((_DWORD *)this + 152) == 1), v28, *(_QWORD *)((char *)&a7[1]->mNumberBuffers + v29));
    if ((_DWORD)result)
      break;
    ++v28;
    LODWORD(v31) = *((_DWORD *)this + 176);
    v31 = v31 >= v26 ? v26 : v31;
    v29 += 16;
  }
  while (v28 < v31);
  return result;
}

uint64_t AUMicSense::Render(AUMicSense *this, unsigned int *a2, const AudioTimeStamp *a3, uint64_t a4)
{
  ausdk::AUScope *v8;
  ausdk::AUInputElement *Element;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  _BYTE *v17;
  size_t v18;
  uint64_t v19;
  ausdk::AUIOElement *v20;
  _BYTE v21[12];
  unsigned int v22;
  _QWORD v23[2];

  v23[1] = *MEMORY[0x1E0C80C00];
  v22 = 0;
  v8 = (AUMicSense *)((char *)this + 80);
  Element = (ausdk::AUInputElement *)ausdk::AUScope::SafeGetElement((AUMicSense *)((char *)this + 80), 0);
  result = ausdk::AUInputElement::PullInput(Element, &v22, a3, 0, a4);
  if (!(_DWORD)result)
  {
    v11 = ausdk::AUScope::SafeGetElement(v8, 0);
    v23[0] = ausdk::AUBufferList::GetBufferList((ausdk::AUBufferList *)(v11 + 144));
    v12 = *((_QWORD *)this + 21);
    if (v12)
    {
      v12 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v12 + 24))(v12);
      LODWORD(v13) = v12;
    }
    else
    {
      v13 = (*((_QWORD *)this + 19) - *((_QWORD *)this + 18)) >> 3;
    }
    v14 = v13;
    MEMORY[0x1E0C80A78](v12);
    v17 = &v21[-v16];
    if (v15 >= 0x200)
      v18 = 512;
    else
      v18 = v15;
    bzero(&v21[-v16], v18);
    if ((_DWORD)v13)
    {
      v19 = 0;
      do
      {
        v20 = (ausdk::AUIOElement *)ausdk::AUScope::SafeGetElement((AUMicSense *)((char *)this + 128), v19);
        *(_QWORD *)&v17[8 * v19++] = ausdk::AUIOElement::PrepareBuffer(v20, a4);
      }
      while (v14 != v19);
    }
    return (*(uint64_t (**)(AUMicSense *, unsigned int *, uint64_t, uint64_t, _QWORD *, uint64_t, _BYTE *))(*(_QWORD *)this + 184))(this, a2, a4, 1, v23, v14, v17);
  }
  return result;
}

BOOL AUMicSense::BusCountWritable(AUMicSense *this, int a2)
{
  return (a2 - 1) <= 1 && *((_BYTE *)this + 17) == 0;
}

uint64_t AUMicSense::SetBusCount(AUMicSense *this, int a2, unsigned int a3)
{
  int64x2_t *v4;
  unsigned int v5;
  NSObject *v7;
  const char *v8;
  int v9;
  const char *v10;
  __int16 v11;
  int v12;
  __int16 v13;
  unsigned int v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  if (a2 == 2)
  {
    if (a3 - 1 <= 1)
    {
      v4 = (int64x2_t *)((char *)this + 128);
      v5 = a3;
      goto LABEL_7;
    }
    if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      return 4294956445;
    v9 = 136315650;
    v10 = "AUMicSense.cpp";
    v11 = 1024;
    v12 = 323;
    v13 = 1024;
    v14 = a3;
    v7 = MEMORY[0x1E0C81028];
    v8 = "%25s:%-5d Invalid number (%u) of output buses requested. We only support 1–2 buses.";
    goto LABEL_13;
  }
  if (a2 != 1)
    return 4294956430;
  if (a3 == 1)
  {
    v4 = (int64x2_t *)((char *)this + 80);
    v5 = 1;
LABEL_7:
    ausdk::AUScope::SetNumberOfElements(v4, v5);
    return 0;
  }
  if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
  {
    v9 = 136315650;
    v10 = "AUMicSense.cpp";
    v11 = 1024;
    v12 = 314;
    v13 = 1024;
    v14 = a3;
    v7 = MEMORY[0x1E0C81028];
    v8 = "%25s:%-5d Invalid number (%u) of input buses requested. We only support 1 bus.";
LABEL_13:
    _os_log_impl(&dword_1B5ED0000, v7, OS_LOG_TYPE_ERROR, v8, (uint8_t *)&v9, 0x18u);
  }
  return 4294956445;
}

uint64_t AUMicSense::GetParameterInfo(AUMicSense *this, int a2, unsigned int a3, AudioUnitParameterInfo *buffer)
{
  uint64_t result;
  uint64_t v5;
  AudioUnitParameterValue v6;
  const __CFString *v7;

  result = 4294956418;
  if ((a2 & 0xFFFFFFFB) == 0 && a3 <= 0xD)
  {
    v5 = AUMicSense::kUserParameter[a3];
    buffer->unit = AUMicSense::kParameterUnit[v5];
    v6 = MicSense_Core::kMaxValue[v5];
    buffer->minValue = MicSense_Core::kMinValue[v5];
    buffer->maxValue = v6;
    buffer->defaultValue = AUMicSense::kUserParameterDefault[a3];
    v7 = AUMicSense::kParameterName[v5];
    buffer->cfNameString = v7;
    buffer->flags = -914358272;
    CFStringGetCString(v7, buffer->name, 52, 0x8000100u);
    return 0;
  }
  return result;
}

UInt8 *AUMicSense::SaveExtendedScopes(AUMicSense *this, __CFData *a2)
{
  ausdk::AUScope *Scope;

  Scope = (ausdk::AUScope *)ausdk::AUBase::GetScope(this, 4u);
  return ausdk::AUScope::SaveState(Scope, a2);
}

uint64_t AUMicSense::RestoreState(OpaqueAudioComponentInstance **this, const void *a2)
{
  uint64_t result;
  uint64_t v4;
  _DWORD *v5;

  result = ausdk::AUBase::RestoreState(this, a2);
  if (!(_DWORD)result)
  {
    v4 = *((unsigned int *)this + 132);
    if ((_DWORD)v4)
    {
      v5 = (_DWORD *)((char *)this[67] + 56);
      do
      {
        ++*v5;
        v5 += 44;
        --v4;
      }
      while (v4);
    }
    return 0;
  }
  return result;
}

uint64_t AUMicSense::GetParameterValueStrings(AUMicSense *this, int a2, int a3, const __CFArray **a4)
{
  uint64_t result;
  CFIndex v6;
  const __CFArray *v7;
  _OWORD v8[3];
  const __CFString *v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  if ((a2 & 0xFFFFFFFB) != 0)
    return 4294956418;
  if (!a4)
    return 0;
  if (a3 == 1)
  {
    v8[0] = xmmword_1E69D51C8;
    v8[1] = *(_OWORD *)&off_1E69D51D8;
    v8[2] = xmmword_1E69D51E8;
    v9 = CFSTR("Frequency Domain 10.00ms");
    v6 = 7;
    goto LABEL_10;
  }
  if (a3 == 2)
  {
    *(_QWORD *)&v8[0] = CFSTR("FFT");
    v6 = 1;
LABEL_10:
    v7 = CFArrayCreate(0, (const void **)v8, v6, 0);
    result = 0;
    *a4 = v7;
    return result;
  }
  return 4294956418;
}

double AUMicSense::GetLatency(AUMicSense *this)
{
  uint64_t v1;
  unsigned int v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = *((unsigned int *)this + 132);
  if ((_DWORD)v1)
  {
    v2 = 0;
    v3 = (uint64_t *)*((_QWORD *)this + 67);
    while (1)
    {
      LODWORD(v4) = 0;
      v5 = *v3;
      *(_QWORD *)(v5 + 48) = 0;
      if (!*(_BYTE *)(v5 + 142))
      {
        v6 = *(_QWORD *)(v5 + 56);
        if ((unint64_t)(v6 - 1) < 3)
        {
          v4 = (*(_QWORD *)(v5 + 96) >> 1) - *(_QWORD *)(v5 + 104);
        }
        else if ((unint64_t)(v6 - 4) >= 2)
        {
          if (v6 != 6)
          {
            LODWORD(v4) = 0;
            goto LABEL_11;
          }
          v4 = *(_QWORD *)(v5 + 24);
        }
        else
        {
          v4 = *(_QWORD *)(v5 + 96) >> 1;
        }
        *(_QWORD *)(v5 + 48) = v4;
      }
LABEL_11:
      if (v2 <= v4)
        v2 = v4;
      v3 += 22;
      if (!--v1)
        goto LABEL_17;
    }
  }
  v2 = 0;
LABEL_17:
  if (*((_BYTE *)this + 612))
    v2 += *((_DWORD *)this + 154);
  return (double)v2 / *(double *)(ausdk::AUScope::SafeGetElement((AUMicSense *)((char *)this + 128), 0) + 80);
}

double AUMicSense::GetTailTime(AUMicSense *this)
{
  return 0.0;
}

uint64_t AUMicSense::SupportsTail(AUMicSense *this)
{
  return 1;
}

BOOL AUMicSense::StreamFormatWritable(AUMicSense *this)
{
  return *((_BYTE *)this + 17) == 0;
}

uint64_t AUMicSense::SupportedNumChannels(AUMicSense *this, const AUChannelInfo **a2)
{
  if (a2)
    *a2 = (const AUChannelInfo *)&AUMicSense::SupportedNumChannels(AUChannelInfo const**)::sChannels;
  return 8;
}

uint64_t AUMicSense::ValidFormat(AUMicSense *this, const AudioStreamBasicDescription *a2, int a3, AudioStreamBasicDescription *a4)
{
  _BOOL4 v5;
  UInt32 mBitsPerChannel;
  BOOL v8;
  AudioFormatID mFormatID;

  if ((_DWORD)a2 == 2 && a3 == 1)
  {
    if (ausdk::ASBD::IsCommonFloat32((ausdk::ASBD *)a4, a2))
      v5 = (a4->mFormatFlags & 0x20) != 0 || a4->mChannelsPerFrame == 1;
    else
      v5 = 0;
    return a4->mChannelsPerFrame < 9 && v5;
  }
  else
  {
    mBitsPerChannel = a4->mBitsPerChannel;
    v8 = mBitsPerChannel == 32 || mBitsPerChannel == 64;
    mFormatID = a4->mFormatID;
    if (mFormatID != 1819304813 && mFormatID != 1718773105)
      v8 = 0;
    if (a4->mChannelsPerFrame - 1 >= 8)
      v8 = 0;
    return *(_DWORD *)&v8 & (LOBYTE(a4->mFormatFlags) >> 5);
  }
}

uint64_t AUMicSense::GetScopeExtended(AUMicSense *this, int a2)
{
  if (a2 == 4)
    return (uint64_t)this + 560;
  else
    return 0;
}

void AUMicSense::syncParametersWithCore(AUMicSense *this, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t (*v10)(void);
  uint64_t v11;
  ausdk::AUElement *v12;
  uint64_t v13;
  ausdk::AUElement **v14;
  const float *v15;
  float Parameter;

  v4 = 0;
  v5 = a2;
  v6 = 176 * a2;
  do
  {
    v7 = *(_QWORD **)(*((_QWORD *)this + 67) + v6);
    v8 = AUMicSense::kUserParameter[v4];
    if (*((_DWORD *)this + 152))
    {
      v9 = *((_QWORD *)this + 75);
      if (v9)
      {
        v10 = *(uint64_t (**)(void))(*(_QWORD *)v9 + 32);
LABEL_7:
        v12 = (ausdk::AUElement *)v10();
        goto LABEL_13;
      }
      v13 = *((_QWORD *)this + 72);
      if (v5 < (*((_QWORD *)this + 73) - v13) >> 3)
      {
        v12 = *(ausdk::AUElement **)(v13 + 8 * v5);
        goto LABEL_13;
      }
    }
    else
    {
      v11 = *((_QWORD *)this + 9);
      if (v11)
      {
        v10 = *(uint64_t (**)(void))(*(_QWORD *)v11 + 32);
        goto LABEL_7;
      }
      v14 = (ausdk::AUElement **)*((_QWORD *)this + 6);
      if (*((ausdk::AUElement ***)this + 7) != v14)
      {
        v12 = *v14;
        goto LABEL_13;
      }
    }
    v12 = 0;
LABEL_13:
    Parameter = ausdk::AUElement::GetParameter(v12, v4);
    if (MicSense_Core::kMaxValue[v8] < Parameter)
      Parameter = MicSense_Core::kMaxValue[v8];
    if (Parameter < MicSense_Core::kMinValue[v8])
      Parameter = MicSense_Core::kMinValue[v8];
    *(float *)(*v7 + 4 * v8) = Parameter;
    ++v4;
  }
  while (v4 != 14);
  MicSense_Core::setParameters(*(MicSense_Core **)(*((_QWORD *)this + 67) + 176 * a2), v15);
}

void AUMicSense::syncPropertiesWithCore(AUMicSense *this)
{
  unint64_t v1;
  unint64_t v2;
  uint64_t v3;
  _QWORD *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  int v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  void *v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t i;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t j;
  uint64_t v23;
  __int128 v24;
  uint64_t v25;
  void *__p[2];
  __int128 v27;
  int v28;

  v2 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)this + 82) - *((_QWORD *)this + 81)) >> 3);
  v3 = *((unsigned int *)this + 176);
  if (v2 == v3
    && 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)this + 85) - *((_QWORD *)this + 84)) >> 3) == v2
    && *((_DWORD *)this + 159)
    && *((_DWORD *)this + 158))
  {
    v5 = (_QWORD *)((char *)this + 672);
    if ((_DWORD)v3)
    {
      v6 = 0;
      v7 = 0;
      do
      {
        v28 = 0;
        *(_OWORD *)__p = 0u;
        v27 = 0u;
        LODWORD(v1) = *((_DWORD *)this + 159);
        v8 = *((_QWORD *)this + 81) + v6;
        v9 = *((_DWORD *)this + 158);
        if ((void **)v8 != __p)
          std::vector<float>::__assign_with_size[abi:ne180100]<float const*,float const*>((char *)__p, *(char **)v8, *(_QWORD *)(v8 + 8), (uint64_t)(*(_QWORD *)(v8 + 8) - *(_QWORD *)v8) >> 2);
        *(double *)&v10 = (double)v1;
        *((double *)&v27 + 1) = (double)v1;
        v28 = 2 * v9;
        LODWORD(v10) = *((_DWORD *)this + 175);
        SpectralProfile::GetProfile((SpectralProfile *)&v24, (double)v10, (uint64_t)__p, *((_DWORD *)this + 154) + 1, 0.0, 2 * *((_DWORD *)this + 154));
        v12 = *v5 + v6;
        v13 = *(void **)v12;
        if (*(_QWORD *)v12)
        {
          *(_QWORD *)(v12 + 8) = v13;
          operator delete(v13);
          *(_QWORD *)v12 = 0;
          *(_QWORD *)(v12 + 8) = 0;
          *(_QWORD *)(v12 + 16) = 0;
        }
        HIDWORD(v14) = DWORD1(v24);
        *(_OWORD *)v12 = v24;
        *(_QWORD *)(v12 + 16) = v25;
        LODWORD(v14) = *((_DWORD *)this + 159);
        LODWORD(v11) = *((_DWORD *)this + 175);
        *(float *)&v14 = (double)v11 / fmax((double)v14, 1.0);
        LODWORD(v24) = v14;
        vDSP_vsmul(*(const float **)(*((_QWORD *)this + 84) + v6), 1, (const float *)&v24, *(float **)(*((_QWORD *)this + 84) + v6), 1, (uint64_t)(*(_QWORD *)(*((_QWORD *)this + 84) + v6 + 8) - *(_QWORD *)(*((_QWORD *)this + 84) + v6)) >> 2);
        if (__p[0])
        {
          __p[1] = __p[0];
          operator delete(__p[0]);
        }
        ++v7;
        v6 += 24;
      }
      while (v7 < *((unsigned int *)this + 176));
    }
    if (*((_DWORD *)this + 152))
    {
      v15 = *((unsigned int *)this + 132);
      if ((_DWORD)v15)
      {
        for (i = 0; i < v15; ++i)
        {
          v17 = *((_QWORD *)this + 84) + 24 * i;
          v18 = *(_QWORD *)(v17 + 8);
          if (*((_DWORD *)this + 154) + 1 == (v18 - *(_QWORD *)v17) >> 2 && v18 != *(_QWORD *)v17)
          {
            v19 = *(_QWORD **)(*((_QWORD *)this + 67) + 176 * i);
            v20 = v19[8];
            if (v20)
            {
              v21 = 0;
              for (j = 0; j < v20; ++j)
              {
                v23 = v19[5];
                if (v23)
                {
                  memmove(*(void **)(v19[63] + v21), *(const void **)v17, 4 * v23);
                  v20 = v19[8];
                }
                v21 += 24;
              }
              v15 = *((unsigned int *)this + 132);
            }
          }
        }
      }
    }
    else if (*((_DWORD *)this + 154) + 1 == (uint64_t)(*(_QWORD *)(*((_QWORD *)this + 84) + 8)
                                                     - **((_QWORD **)this + 84)) >> 2)
    {
      MicSense_Core::setNoiseProfile(**((_QWORD ***)this + 67), (_QWORD *)this + 84);
    }
  }
}

void sub_1B635CD00(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

float32x2_t AUMicSense::updateStatus(AUMicSense *this, unsigned int a2)
{
  int v3;
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  double v9;
  uint64_t v10;
  BOOL v11;
  vDSP_Length v12;
  char v13;
  uint64_t v14;
  void **v15;
  void **v16;
  uint64_t v17;
  vDSP_Length v18;
  uint64_t v19;
  float32x2_t *v20;
  float32x2_t result;
  float32x2_t v22;
  float __A;
  float __B;

  v3 = *((_DWORD *)this + 152);
  if (v3)
    v4 = 0;
  else
    v4 = a2;
  if (v3)
    v5 = a2;
  else
    v5 = 0;
  v6 = *(_QWORD *)(*((_QWORD *)this + 67) + 176 * v5);
  v7 = *(_DWORD *)(v6 + 24);
  v8 = *(_QWORD *)(v6 + 96);
  *(_QWORD *)(*((_QWORD *)this + 67) + 176 * v5 + 88) = *(_QWORD *)(ausdk::AUScope::SafeGetElement((AUMicSense *)((char *)this + 128), 0)+ 80);
  v9 = (*(double (**)(AUMicSense *))(*(_QWORD *)this + 344))(this);
  v10 = *((_QWORD *)this + 67) + 176 * v5;
  *(double *)(v10 + 96) = v9;
  *(_DWORD *)(v10 + 104) = v7;
  *(_DWORD *)(v10 + 108) = v8;
  __B = (float)*((unsigned int *)this + 175) / (float)(unint64_t)(2 * *(_QWORD *)(*(_QWORD *)v10 + 24));
  v11 = __CFADD__(v7, 1);
  v12 = (v7 + 1);
  v13 = v11;
  vDSP_vramp(&AUMicSense::updateStatus::kStart, &__B, *(float **)(v10 + 112), 1, v12);
  v14 = *((_QWORD *)this + 67);
  **(_DWORD **)(v14 + 176 * v5 + 112) = 1101004800;
  if ((v13 & 1) == 0)
  {
    memmove(*(void **)(v14 + 176 * v5 + 120), *(const void **)(*(_QWORD *)(*(_QWORD *)(v14 + 176 * v5) + 456) + 24 * v4), 4 * v12);
    v15 = (void **)(*((_QWORD *)this + 67) + 176 * v5);
    memmove(v15[16], *(const void **)(*((_QWORD *)*v15 + 63) + 24 * v4), 4 * v12);
    v16 = (void **)(*((_QWORD *)this + 67) + 176 * v5);
    memmove(v16[17], *(const void **)(*((_QWORD *)*v16 + 60) + 24 * v4), 4 * v12);
    v14 = *((_QWORD *)this + 67);
  }
  v17 = *(_QWORD *)(v14 + 176 * v5);
  if (*(_QWORD *)(v17 + 96) >= v12)
    v18 = v12;
  else
    v18 = *(_QWORD *)(v17 + 96);
  if (v18)
  {
    memmove(*(void **)(v14 + 176 * v5 + 144), *(const void **)(*(_QWORD *)(v17 + 528) + 24 * v4), 4 * v18);
    v14 = *((_QWORD *)this + 67);
  }
  if ((_DWORD)v12 != (_DWORD)v18)
  {
    __A = -1.0;
    vDSP_vfill(&__A, (float *)(*(_QWORD *)(v14 + 176 * v5 + 144) + 4 * v18), 1, (v12 - v18));
    v14 = *((_QWORD *)this + 67);
  }
  v19 = v14 + 176 * v5;
  v20 = *(float32x2_t **)(v19 + 152);
  result = vcvt_f32_f64(*(float64x2_t *)(v19 + 88));
  v22 = vcvt_f32_u32(*(uint32x2_t *)(v19 + 104));
  *v20 = result;
  v20[1] = v22;
  return result;
}

uint64_t *MicSenseUtils::create<BlockProcessor,std::unique_ptr<BlockProcessor>,int,unsigned int *,int,unsigned int *,unsigned int &,int (&)(void *,unsigned int,AudioBufferList const**,AudioBufferList**),AUMicSense *>(uint64_t *a1, int *a2, const unsigned int **a3, int *a4, const unsigned int **a5, int *a6, void **a7)
{
  BlockProcessor *v14;
  BlockProcessor *v16;
  uint64_t v17;

  if (*a1)
  {
    v14 = (BlockProcessor *)operator new();
    BlockProcessor::BlockProcessor(v14, *a2, *a3, *a4, *a5, *a6, (int (*)(void *, unsigned int, const AudioBufferList **, AudioBufferList **))AUMicSense::BlockProcessClassFunc, *a7);
    return std::unique_ptr<BlockProcessor>::reset[abi:ne180100](a1, (uint64_t)v14);
  }
  else
  {
    v16 = (BlockProcessor *)operator new();
    BlockProcessor::BlockProcessor(v16, *a2, *a3, *a4, *a5, *a6, (int (*)(void *, unsigned int, const AudioBufferList **, AudioBufferList **))AUMicSense::BlockProcessClassFunc, *a7);
    v17 = 0;
    std::unique_ptr<BlockProcessor>::reset[abi:ne180100](a1, (uint64_t)v16);
    return std::unique_ptr<BlockProcessor>::reset[abi:ne180100](&v17, 0);
  }
}

void sub_1B635D044(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1BCC95CEC](v1, 0x1080C40622722D2);
  _Unwind_Resume(a1);
}

uint64_t *std::unique_ptr<MicSense_Core>::reset[abi:ne180100](uint64_t *result, uint64_t a2)
{
  uint64_t v2;
  void **v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void **v21;

  v2 = *result;
  *result = a2;
  if (v2)
  {
    v3 = *(void ***)(v2 + 640);
    if (v3)
    {
      CFilterBank::filterbank_destroy(v3);
      *(_QWORD *)(v2 + 640) = 0;
    }
    v4 = *(void **)(v2 + 704);
    if (v4)
    {
      *(_QWORD *)(v2 + 712) = v4;
      operator delete(v4);
    }
    v5 = *(void **)(v2 + 680);
    if (v5)
    {
      *(_QWORD *)(v2 + 688) = v5;
      operator delete(v5);
    }
    v6 = *(void **)(v2 + 656);
    if (v6)
    {
      *(_QWORD *)(v2 + 664) = v6;
      operator delete(v6);
    }
    v21 = (void **)(v2 + 616);
    std::vector<std::unique_ptr<MicSenseUtils::DynamicFIR<float>>>::__destroy_vector::operator()[abi:ne180100](&v21);
    std::unique_ptr<MicSenseUtils::GainsToFIR>::reset[abi:ne180100]((_QWORD *)(v2 + 608), 0);
    std::unique_ptr<vp::vx::Control_Center_Manager>::reset[abi:ne180100]((uint64_t *)(v2 + 600), 0);
    v21 = (void **)(v2 + 576);
    std::vector<std::unique_ptr<VPTimeFreqConverter>>::__destroy_vector::operator()[abi:ne180100](&v21);
    v7 = *(void **)(v2 + 552);
    if (v7)
    {
      *(_QWORD *)(v2 + 560) = v7;
      operator delete(v7);
    }
    v21 = (void **)(v2 + 528);
    std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v21);
    v21 = (void **)(v2 + 504);
    std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v21);
    v21 = (void **)(v2 + 480);
    std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v21);
    v21 = (void **)(v2 + 456);
    std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v21);
    v21 = (void **)(v2 + 432);
    std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v21);
    v8 = *(void **)(v2 + 408);
    if (v8)
    {
      *(_QWORD *)(v2 + 416) = v8;
      operator delete(v8);
    }
    v9 = *(void **)(v2 + 384);
    if (v9)
    {
      *(_QWORD *)(v2 + 392) = v9;
      operator delete(v9);
    }
    v10 = *(void **)(v2 + 360);
    if (v10)
    {
      *(_QWORD *)(v2 + 368) = v10;
      operator delete(v10);
    }
    v11 = *(void **)(v2 + 336);
    if (v11)
    {
      *(_QWORD *)(v2 + 344) = v11;
      operator delete(v11);
    }
    v12 = *(void **)(v2 + 312);
    if (v12)
    {
      *(_QWORD *)(v2 + 320) = v12;
      operator delete(v12);
    }
    v13 = *(void **)(v2 + 288);
    if (v13)
    {
      *(_QWORD *)(v2 + 296) = v13;
      operator delete(v13);
    }
    v14 = *(void **)(v2 + 264);
    if (v14)
    {
      *(_QWORD *)(v2 + 272) = v14;
      operator delete(v14);
    }
    v15 = *(void **)(v2 + 240);
    if (v15)
    {
      *(_QWORD *)(v2 + 248) = v15;
      operator delete(v15);
    }
    v16 = *(void **)(v2 + 216);
    if (v16)
    {
      *(_QWORD *)(v2 + 224) = v16;
      operator delete(v16);
    }
    v17 = *(void **)(v2 + 192);
    if (v17)
    {
      *(_QWORD *)(v2 + 200) = v17;
      operator delete(v17);
    }
    v18 = *(void **)(v2 + 168);
    if (v18)
    {
      *(_QWORD *)(v2 + 176) = v18;
      operator delete(v18);
    }
    v19 = *(void **)(v2 + 144);
    if (v19)
    {
      *(_QWORD *)(v2 + 152) = v19;
      operator delete(v19);
    }
    v20 = *(void **)v2;
    if (*(_QWORD *)v2)
    {
      *(_QWORD *)(v2 + 8) = v20;
      operator delete(v20);
    }
    JUMPOUT(0x1BCC95CECLL);
  }
  return result;
}

uint64_t *std::__destroy_at[abi:ne180100]<AUMicSense::MicSenseInfo,0>(uint64_t a1)
{
  void *v2;
  void *v3;
  void **v5;

  v2 = *(void **)(a1 + 152);
  if (v2)
  {
    *(_QWORD *)(a1 + 160) = v2;
    operator delete(v2);
  }
  v3 = *(void **)(a1 + 64);
  if (v3)
  {
    *(_QWORD *)(a1 + 72) = v3;
    operator delete(v3);
  }
  v5 = (void **)(a1 + 32);
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v5);
  v5 = (void **)(a1 + 8);
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v5);
  return std::unique_ptr<MicSense_Core>::reset[abi:ne180100]((uint64_t *)a1, 0);
}

uint64_t AUMicSense::BlockProcessClassFunc(AUMicSense *this, void *a2, _QWORD *a3, const AudioBufferList **a4, AudioBufferList **a5)
{
  unsigned int v6;
  unint64_t v8;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void **v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  size_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  const void **v24;

  v6 = a2;
  LODWORD(v8) = *((_DWORD *)this + 176);
  if ((_DWORD)v8)
  {
    v10 = 0;
    v11 = 0;
    v12 = 16;
    v13 = 8;
    do
    {
      v14 = *((_QWORD *)this + 67);
      if (*((_DWORD *)this + 152))
        v15 = *(void ***)(v14 + v13);
      else
        v15 = (void **)(*(_QWORD *)(v14 + 8) + v10);
      memcpy(*v15, *(const void **)(*a3 + v12), 4 * v6);
      ++v11;
      v8 = *((unsigned int *)this + 176);
      v10 += 24;
      v12 += 16;
      v13 += 176;
    }
    while (v11 < v8);
  }
  if (*((_DWORD *)this + 132))
  {
    v16 = 0;
    v17 = 0;
    do
    {
      MicSense_Core::process(*(MicSense_Core **)(*((_QWORD *)this + 67) + v16), *((_QWORD *)this + 67) + v16 + 8, (uint64_t *)(*((_QWORD *)this + 67) + v16 + 32), v6);
      ++v17;
      v16 += 176;
    }
    while (v17 < *((unsigned int *)this + 132));
    LODWORD(v8) = *((_DWORD *)this + 176);
  }
  if ((_DWORD)v8)
  {
    v18 = 0;
    v19 = 0;
    v20 = 4 * v6;
    v21 = 32;
    v22 = 16;
    do
    {
      v23 = *((_QWORD *)this + 67);
      if (*((_DWORD *)this + 152))
        v24 = *(const void ***)(v23 + v21);
      else
        v24 = (const void **)(*(_QWORD *)(v23 + 32) + v18);
      memcpy(*(void **)((char *)&(*a4)->mNumberBuffers + v22), *v24, v20);
      ++v19;
      v18 += 24;
      v21 += 176;
      v22 += 16;
    }
    while (v19 < *((unsigned int *)this + 176));
  }
  return 0;
}

void std::vector<AUMicSense::MicSenseInfo>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  void *v2;
  uint64_t v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = (uint64_t)v1[1];
    v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 176;
        std::__destroy_at[abi:ne180100]<AUMicSense::MicSenseInfo,0>(v4);
      }
      while ((void *)v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t NeuralNetVAD::NeuralNetVAD(uint64_t a1, const __CFDictionary *a2, uint64_t a3)
{
  uint64_t v5;
  NeuralNet **v6;
  int *v7;
  NeuralNet *v8;
  uint64_t *v9;
  NSObject *v10;
  NSObject *v11;
  int v12;
  NSObject **v13;
  NSObject *v14;
  uint64_t v15;
  NSObject *v16;
  int ScalarFrom;
  NSObject **v18;
  NSObject *v19;
  double v20;
  NSObject *v21;
  int v22;
  NSObject **v23;
  NSObject *v24;
  double v25;
  NSObject *v26;
  int v27;
  NSObject **v28;
  NSObject *v29;
  double v30;
  NSObject *v31;
  int v32;
  NSObject **v33;
  NSObject *v34;
  int v35;
  NSObject *v36;
  int v37;
  NSObject **v38;
  NSObject *v39;
  int v40;
  NSObject *v41;
  int v42;
  NSObject **v43;
  NSObject *v44;
  int v45;
  NSObject *v46;
  int v47;
  NSObject **v48;
  NSObject *v49;
  int v50;
  NSObject *v51;
  NSObject **v52;
  NSObject *v53;
  NSObject **v54;
  NSObject *v55;
  const char *v56;
  NSObject *v57;
  os_log_type_t v58;
  int v59;
  NSObject **v60;
  NSObject *v61;
  int v62;
  NSObject **v63;
  NSObject *v64;
  double v65;
  NSObject *v66;
  float *v67;
  NSObject **v68;
  NSObject *v69;
  NSObject **v70;
  const char *v71;
  double v72;
  NSObject **v73;
  NSObject *v74;
  unsigned int *v75;
  NSObject **v76;
  NSObject *v77;
  NSObject **v78;
  const char *v79;
  double v80;
  NSObject **v81;
  NSObject *v82;
  NSObject **v83;
  NSObject *v84;
  NSObject **v85;
  NSObject *v86;
  const char *v87;
  NSObject *v88;
  double v89;
  NSObject **v90;
  NSObject *v91;
  NSObject **v92;
  NSObject *v93;
  NSObject **v94;
  NSObject *v95;
  const char *v96;
  NSObject *v97;
  double v98;
  NSObject **v99;
  NSObject *v100;
  const __CFNumber *Value;
  int *v102;
  NSObject *v103;
  NSObject *v104;
  const char *CStringPtr;
  double v106;
  NSObject **v107;
  NSObject *v108;
  int v109;
  const char *v110;
  NSObject *v111;
  const char *v112;
  NSObject **v113;
  NSObject *v114;
  NSObject **v115;
  NSObject *v116;
  NSObject **v117;
  NSObject *v118;
  NSObject **v119;
  NSObject *v120;
  const char *v121;
  NSObject *v122;
  double v123;
  NSObject **v124;
  NSObject *v125;
  NSObject **v126;
  NSObject *v127;
  NSObject **v128;
  NSObject *v129;
  const char *v130;
  NSObject *v131;
  double v132;
  NSObject **v133;
  NSObject *v134;
  const __CFNumber *v135;
  int *v136;
  NSObject *v137;
  NSObject *v138;
  const char *v139;
  double v140;
  NSObject **v141;
  NSObject *v142;
  double v143;
  const char *v144;
  NSObject *v145;
  const char *v146;
  NSObject **v147;
  NSObject *v148;
  NSObject **v149;
  NSObject *v150;
  NSObject **v151;
  NSObject *v152;
  NSObject **v153;
  NSObject *v154;
  const char *v155;
  NSObject *v156;
  double v157;
  NSObject **v158;
  NSObject *v159;
  NSObject **v160;
  NSObject *v161;
  NSObject **v162;
  const char *v163;
  int v164;
  NSObject **v165;
  NSObject *v166;
  NSObject **v167;
  NSObject *v168;
  NSObject **v169;
  NSObject *v170;
  const char *v171;
  NSObject *v172;
  int v173;
  float v174;
  float v175;
  NSObject **v176;
  NSObject *v177;
  NSObject *v178;
  int v179;
  int v180;
  unint64_t v181;
  int v182;
  NSObject **v183;
  NSObject *v184;
  unint64_t v185;
  unint64_t v186;
  unint64_t v187;
  NSObject **v188;
  NSObject *v189;
  int v190;
  double v191;
  int v192;
  int v193;
  int v194;
  int v195;
  int v196;
  NSObject **v198;
  int v199;
  const char *v200;
  NSObject **v201;
  _DWORD *exception;
  char **v203;
  char **v204;
  int *v205;
  char **v206;
  NSObject **v207;
  uint8_t buf[4];
  const char *v209;
  __int16 v210;
  int v211;
  __int16 v212;
  _BYTE v213[20];
  __int16 v214;
  int v215;
  __int16 v216;
  int v217;
  __int16 v218;
  int v219;
  __int16 v220;
  int v221;
  uint64_t v222;

  v222 = *MEMORY[0x1E0C80C00];
  *(_OWORD *)(a1 + 80) = 0u;
  v5 = a1 + 80;
  *(_DWORD *)(a1 + 56) = 629145600;
  *(_OWORD *)(a1 + 128) = 0u;
  v203 = (char **)(a1 + 128);
  *(_QWORD *)(a1 + 176) = 0;
  v6 = (NeuralNet **)(a1 + 176);
  v204 = (char **)(a1 + 104);
  *(_QWORD *)(a1 + 192) = 0;
  v206 = (char **)(a1 + 192);
  *(_QWORD *)(a1 + 200) = 0;
  *(_QWORD *)(a1 + 208) = 0;
  *(_QWORD *)(a1 + 248) = 0x100000000;
  v7 = (int *)(a1 + 248);
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_QWORD *)(a1 + 144) = 0;
  *(_QWORD *)(a1 + 256) = a3;
  *(_QWORD *)(a1 + 264) = 0x3F80000000000000;
  v8 = (NeuralNet *)operator new();
  NeuralNet::NeuralNet((uint64_t)v8, a2, *(uint64_t **)(a1 + 256));
  std::unique_ptr<NeuralNet>::reset[abi:ne180100](v6, v8);
  v9 = *(uint64_t **)(a1 + 256);
  if (v9)
  {
    v10 = *v9;
    if (!*v9)
    {
      v207 = *(NSObject ***)(a1 + 256);
      goto LABEL_13;
    }
  }
  else
  {
    v10 = MEMORY[0x1E0C81028];
  }
  if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 136315394;
    v209 = "NeuralNetVAD.cpp";
    v210 = 1024;
    v211 = 57;
    _os_log_impl(&dword_1B5ED0000, v10, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Start reading NeuralNetVAD parameters.", buf, 0x12u);
    v9 = *(uint64_t **)(a1 + 256);
  }
  v207 = (NSObject **)v9;
  if (v9)
  {
    v11 = *v9;
    if (!*v9)
      goto LABEL_13;
  }
  else
  {
    v11 = MEMORY[0x1E0C81028];
  }
  if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 136315394;
    v209 = "NeuralNetVAD.cpp";
    v210 = 1024;
    v211 = 68;
    _os_log_impl(&dword_1B5ED0000, v11, OS_LOG_TYPE_INFO, "%25s:%-5d NeuralNetVAD: Loading SampleRate from topLevelDict.", buf, 0x12u);
  }
LABEL_13:
  v12 = DictionaryBlobReader::ReadScalarFromDictionary<double>(&v207, a2, CFSTR("SampleRate"), (uint64_t *)a1);
  v13 = *(NSObject ***)(a1 + 256);
  if (v12)
  {
    if (v13)
      v184 = *v13;
    else
      v184 = 0;
    v199 = -66741;
    if (!os_log_type_enabled(v184, OS_LOG_TYPE_ERROR))
      goto LABEL_479;
    *(_DWORD *)buf = 136315650;
    v209 = "NeuralNetVAD.cpp";
    v210 = 1024;
    v211 = 70;
    v212 = 1024;
    *(_DWORD *)v213 = -66741;
    v200 = "%25s:%-5d EXCEPTION (%d) [err != noErr is false]: \"Failed to retrieve sample rate.\"";
LABEL_478:
    _os_log_impl(&dword_1B5ED0000, v184, OS_LOG_TYPE_ERROR, v200, buf, 0x18u);
    goto LABEL_479;
  }
  if (v13)
  {
    v14 = *v13;
    if (!*v13)
      goto LABEL_26;
  }
  else
  {
    v14 = MEMORY[0x1E0C81028];
  }
  if (os_log_type_enabled(v14, OS_LOG_TYPE_INFO))
  {
    v15 = *(_QWORD *)a1;
    *(_DWORD *)buf = 136315650;
    v209 = "NeuralNetVAD.cpp";
    v210 = 1024;
    v211 = 71;
    v212 = 2048;
    *(_QWORD *)v213 = v15;
    _os_log_impl(&dword_1B5ED0000, v14, OS_LOG_TYPE_INFO, "%25s:%-5d Successfully retrieved sample rate (%g Hz).\n", buf, 0x1Cu);
    v13 = *(NSObject ***)(a1 + 256);
  }
  if (v13)
  {
    v16 = *v13;
    if (!*v13)
      goto LABEL_26;
  }
  else
  {
    v16 = MEMORY[0x1E0C81028];
  }
  if (os_log_type_enabled(v16, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 136315394;
    v209 = "NeuralNetVAD.cpp";
    v210 = 1024;
    v211 = 74;
    _os_log_impl(&dword_1B5ED0000, v16, OS_LOG_TYPE_INFO, "%25s:%-5d NeuralNetVAD: Loading threshold from topLevelDict.", buf, 0x12u);
  }
LABEL_26:
  ScalarFrom = DictionaryBlobReader::ReadScalarFromDictionary<float>((uint64_t **)&v207, a2, CFSTR("threshold"), kCFNumberFloat32Type, (float *)(a1 + 8));
  v18 = *(NSObject ***)(a1 + 256);
  if (ScalarFrom)
  {
    if (v18)
      v184 = *v18;
    else
      v184 = 0;
    v199 = -66741;
    if (!os_log_type_enabled(v184, OS_LOG_TYPE_ERROR))
      goto LABEL_479;
    *(_DWORD *)buf = 136315650;
    v209 = "NeuralNetVAD.cpp";
    v210 = 1024;
    v211 = 76;
    v212 = 1024;
    *(_DWORD *)v213 = -66741;
    v200 = "%25s:%-5d EXCEPTION (%d) [err != noErr is false]: \"Failed to retrieve threshold.\"";
    goto LABEL_478;
  }
  if (v18)
  {
    v19 = *v18;
    if (!*v18)
      goto LABEL_39;
  }
  else
  {
    v19 = MEMORY[0x1E0C81028];
  }
  if (os_log_type_enabled(v19, OS_LOG_TYPE_INFO))
  {
    v20 = *(float *)(a1 + 8);
    *(_DWORD *)buf = 136315650;
    v209 = "NeuralNetVAD.cpp";
    v210 = 1024;
    v211 = 77;
    v212 = 2048;
    *(double *)v213 = v20;
    _os_log_impl(&dword_1B5ED0000, v19, OS_LOG_TYPE_INFO, "%25s:%-5d Successfully retrieved threshold (%g).\n", buf, 0x1Cu);
    v18 = *(NSObject ***)(a1 + 256);
  }
  if (v18)
  {
    v21 = *v18;
    if (!*v18)
      goto LABEL_39;
  }
  else
  {
    v21 = MEMORY[0x1E0C81028];
  }
  if (os_log_type_enabled(v21, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 136315394;
    v209 = "NeuralNetVAD.cpp";
    v210 = 1024;
    v211 = 80;
    _os_log_impl(&dword_1B5ED0000, v21, OS_LOG_TYPE_INFO, "%25s:%-5d NeuralNetVAD: Loading HangA01 from topLevelDict.", buf, 0x12u);
  }
LABEL_39:
  v22 = DictionaryBlobReader::ReadScalarFromDictionary<float>((uint64_t **)&v207, a2, CFSTR("HangA01"), kCFNumberFloat32Type, (float *)(a1 + 12));
  v23 = *(NSObject ***)(a1 + 256);
  if (v22)
  {
    if (v23)
      v184 = *v23;
    else
      v184 = 0;
    v199 = -66741;
    if (!os_log_type_enabled(v184, OS_LOG_TYPE_ERROR))
      goto LABEL_479;
    *(_DWORD *)buf = 136315650;
    v209 = "NeuralNetVAD.cpp";
    v210 = 1024;
    v211 = 82;
    v212 = 1024;
    *(_DWORD *)v213 = -66741;
    v200 = "%25s:%-5d EXCEPTION (%d) [err != noErr is false]: \"Failed to retrieve HangA01.\"";
    goto LABEL_478;
  }
  if (v23)
  {
    v24 = *v23;
    if (!*v23)
      goto LABEL_52;
  }
  else
  {
    v24 = MEMORY[0x1E0C81028];
  }
  if (os_log_type_enabled(v24, OS_LOG_TYPE_INFO))
  {
    v25 = *(float *)(a1 + 12);
    *(_DWORD *)buf = 136315650;
    v209 = "NeuralNetVAD.cpp";
    v210 = 1024;
    v211 = 83;
    v212 = 2048;
    *(double *)v213 = v25;
    _os_log_impl(&dword_1B5ED0000, v24, OS_LOG_TYPE_INFO, "%25s:%-5d Successfully retrieved mHangA01 (%g).\n", buf, 0x1Cu);
    v23 = *(NSObject ***)(a1 + 256);
  }
  if (v23)
  {
    v26 = *v23;
    if (!*v23)
      goto LABEL_52;
  }
  else
  {
    v26 = MEMORY[0x1E0C81028];
  }
  if (os_log_type_enabled(v26, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 136315394;
    v209 = "NeuralNetVAD.cpp";
    v210 = 1024;
    v211 = 86;
    _os_log_impl(&dword_1B5ED0000, v26, OS_LOG_TYPE_INFO, "%25s:%-5d NeuralNetVAD: Loading HangA10 from topLevelDict.", buf, 0x12u);
  }
LABEL_52:
  v27 = DictionaryBlobReader::ReadScalarFromDictionary<float>((uint64_t **)&v207, a2, CFSTR("HangA10"), kCFNumberFloat32Type, (float *)(a1 + 16));
  v28 = *(NSObject ***)(a1 + 256);
  if (v27)
  {
    if (v28)
      v184 = *v28;
    else
      v184 = 0;
    v199 = -66741;
    if (!os_log_type_enabled(v184, OS_LOG_TYPE_ERROR))
      goto LABEL_479;
    *(_DWORD *)buf = 136315650;
    v209 = "NeuralNetVAD.cpp";
    v210 = 1024;
    v211 = 88;
    v212 = 1024;
    *(_DWORD *)v213 = -66741;
    v200 = "%25s:%-5d EXCEPTION (%d) [err != noErr is false]: \"Failed to retrieve HangA10.\"";
    goto LABEL_478;
  }
  if (v28)
  {
    v29 = *v28;
    if (!*v28)
      goto LABEL_65;
  }
  else
  {
    v29 = MEMORY[0x1E0C81028];
  }
  if (os_log_type_enabled(v29, OS_LOG_TYPE_INFO))
  {
    v30 = *(float *)(a1 + 16);
    *(_DWORD *)buf = 136315650;
    v209 = "NeuralNetVAD.cpp";
    v210 = 1024;
    v211 = 89;
    v212 = 2048;
    *(double *)v213 = v30;
    _os_log_impl(&dword_1B5ED0000, v29, OS_LOG_TYPE_INFO, "%25s:%-5d Successfully retrieved HangA10 (%g).\n", buf, 0x1Cu);
    v28 = *(NSObject ***)(a1 + 256);
  }
  if (v28)
  {
    v31 = *v28;
    if (!*v28)
      goto LABEL_65;
  }
  else
  {
    v31 = MEMORY[0x1E0C81028];
  }
  if (os_log_type_enabled(v31, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 136315394;
    v209 = "NeuralNetVAD.cpp";
    v210 = 1024;
    v211 = 92;
    _os_log_impl(&dword_1B5ED0000, v31, OS_LOG_TYPE_INFO, "%25s:%-5d NeuralNetVAD: Loading WaitFrames from topLevelDict.", buf, 0x12u);
  }
LABEL_65:
  v32 = DictionaryBlobReader::ReadScalarFromDictionary<unsigned int>((uint64_t **)&v207, a2, CFSTR("WaitFrames"), (_DWORD *)(a1 + 20));
  v33 = *(NSObject ***)(a1 + 256);
  if (v32)
  {
    if (v33)
      v184 = *v33;
    else
      v184 = 0;
    v199 = -66741;
    if (!os_log_type_enabled(v184, OS_LOG_TYPE_ERROR))
      goto LABEL_479;
    *(_DWORD *)buf = 136315650;
    v209 = "NeuralNetVAD.cpp";
    v210 = 1024;
    v211 = 94;
    v212 = 1024;
    *(_DWORD *)v213 = -66741;
    v200 = "%25s:%-5d EXCEPTION (%d) [err != noErr is false]: \"Failed to retrieve WaitFrames.\"";
    goto LABEL_478;
  }
  if (v33)
  {
    v34 = *v33;
    if (!*v33)
      goto LABEL_78;
  }
  else
  {
    v34 = MEMORY[0x1E0C81028];
  }
  if (os_log_type_enabled(v34, OS_LOG_TYPE_INFO))
  {
    v35 = *(_DWORD *)(a1 + 20);
    *(_DWORD *)buf = 136315650;
    v209 = "NeuralNetVAD.cpp";
    v210 = 1024;
    v211 = 95;
    v212 = 1024;
    *(_DWORD *)v213 = v35;
    _os_log_impl(&dword_1B5ED0000, v34, OS_LOG_TYPE_INFO, "%25s:%-5d Successfully retrieved WaitFrames (%u).\n", buf, 0x18u);
    v33 = *(NSObject ***)(a1 + 256);
  }
  if (v33)
  {
    v36 = *v33;
    if (!*v33)
      goto LABEL_78;
  }
  else
  {
    v36 = MEMORY[0x1E0C81028];
  }
  if (os_log_type_enabled(v36, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 136315394;
    v209 = "NeuralNetVAD.cpp";
    v210 = 1024;
    v211 = 98;
    _os_log_impl(&dword_1B5ED0000, v36, OS_LOG_TYPE_INFO, "%25s:%-5d NeuralNetVAD: Loading NumLayers from topLevelDict.", buf, 0x12u);
  }
LABEL_78:
  v37 = DictionaryBlobReader::ReadScalarFromDictionary<unsigned int>((uint64_t **)&v207, a2, CFSTR("NumLayers"), (_DWORD *)(a1 + 32));
  v38 = *(NSObject ***)(a1 + 256);
  if (v37)
  {
    if (v38)
      v184 = *v38;
    else
      v184 = 0;
    v199 = -66741;
    if (!os_log_type_enabled(v184, OS_LOG_TYPE_ERROR))
      goto LABEL_479;
    *(_DWORD *)buf = 136315650;
    v209 = "NeuralNetVAD.cpp";
    v210 = 1024;
    v211 = 100;
    v212 = 1024;
    *(_DWORD *)v213 = -66741;
    v200 = "%25s:%-5d EXCEPTION (%d) [err != noErr is false]: \"Failed to retrieve NumLayers.\"";
    goto LABEL_478;
  }
  if (v38)
  {
    v39 = *v38;
    if (!*v38)
      goto LABEL_91;
  }
  else
  {
    v39 = MEMORY[0x1E0C81028];
  }
  if (os_log_type_enabled(v39, OS_LOG_TYPE_INFO))
  {
    v40 = *(_DWORD *)(a1 + 32);
    *(_DWORD *)buf = 136315650;
    v209 = "NeuralNetVAD.cpp";
    v210 = 1024;
    v211 = 101;
    v212 = 1024;
    *(_DWORD *)v213 = v40;
    _os_log_impl(&dword_1B5ED0000, v39, OS_LOG_TYPE_INFO, "%25s:%-5d Successfully retrieved NumLayers (%u).\n", buf, 0x18u);
    v38 = *(NSObject ***)(a1 + 256);
  }
  if (v38)
  {
    v41 = *v38;
    if (!*v38)
      goto LABEL_91;
  }
  else
  {
    v41 = MEMORY[0x1E0C81028];
  }
  if (os_log_type_enabled(v41, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 136315394;
    v209 = "NeuralNetVAD.cpp";
    v210 = 1024;
    v211 = 104;
    _os_log_impl(&dword_1B5ED0000, v41, OS_LOG_TYPE_INFO, "%25s:%-5d NeuralNetVAD: Loading BlockSize from topLevelDict.", buf, 0x12u);
  }
LABEL_91:
  v42 = DictionaryBlobReader::ReadScalarFromDictionary<unsigned int>((uint64_t **)&v207, a2, CFSTR("BlockSize"), (_DWORD *)(a1 + 28));
  v43 = *(NSObject ***)(a1 + 256);
  if (v42)
  {
    if (v43)
      v184 = *v43;
    else
      v184 = 0;
    v199 = -66741;
    if (!os_log_type_enabled(v184, OS_LOG_TYPE_ERROR))
      goto LABEL_479;
    *(_DWORD *)buf = 136315650;
    v209 = "NeuralNetVAD.cpp";
    v210 = 1024;
    v211 = 106;
    v212 = 1024;
    *(_DWORD *)v213 = -66741;
    v200 = "%25s:%-5d EXCEPTION (%d) [err != noErr is false]: \"Failed to retrieve BlockSize.\"";
    goto LABEL_478;
  }
  if (v43)
  {
    v44 = *v43;
    if (!*v43)
      goto LABEL_104;
  }
  else
  {
    v44 = MEMORY[0x1E0C81028];
  }
  if (os_log_type_enabled(v44, OS_LOG_TYPE_INFO))
  {
    v45 = *(_DWORD *)(a1 + 28);
    *(_DWORD *)buf = 136315650;
    v209 = "NeuralNetVAD.cpp";
    v210 = 1024;
    v211 = 107;
    v212 = 1024;
    *(_DWORD *)v213 = v45;
    _os_log_impl(&dword_1B5ED0000, v44, OS_LOG_TYPE_INFO, "%25s:%-5d Successfully retrieved BlockSize (%u).\n", buf, 0x18u);
    v43 = *(NSObject ***)(a1 + 256);
  }
  if (v43)
  {
    v46 = *v43;
    if (!*v43)
      goto LABEL_104;
  }
  else
  {
    v46 = MEMORY[0x1E0C81028];
  }
  if (os_log_type_enabled(v46, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 136315394;
    v209 = "NeuralNetVAD.cpp";
    v210 = 1024;
    v211 = 110;
    _os_log_impl(&dword_1B5ED0000, v46, OS_LOG_TYPE_INFO, "%25s:%-5d NeuralNetVAD: Loading NumContextFrames from topLevelDict.", buf, 0x12u);
  }
LABEL_104:
  v47 = DictionaryBlobReader::ReadScalarFromDictionary<unsigned int>((uint64_t **)&v207, a2, CFSTR("NumContextFrames"), (_DWORD *)(a1 + 40));
  v48 = *(NSObject ***)(a1 + 256);
  if (v47)
  {
    if (v48)
      v184 = *v48;
    else
      v184 = 0;
    v199 = -66741;
    if (!os_log_type_enabled(v184, OS_LOG_TYPE_ERROR))
      goto LABEL_479;
    *(_DWORD *)buf = 136315650;
    v209 = "NeuralNetVAD.cpp";
    v210 = 1024;
    v211 = 112;
    v212 = 1024;
    *(_DWORD *)v213 = -66741;
    v200 = "%25s:%-5d EXCEPTION (%d) [err != noErr is false]: \"Failed to retrieve NumContextFrames.\"";
    goto LABEL_478;
  }
  if (v48)
  {
    v49 = *v48;
    if (!*v48)
      goto LABEL_117;
  }
  else
  {
    v49 = MEMORY[0x1E0C81028];
  }
  if (os_log_type_enabled(v49, OS_LOG_TYPE_INFO))
  {
    v50 = *(_DWORD *)(a1 + 40);
    *(_DWORD *)buf = 136315650;
    v209 = "NeuralNetVAD.cpp";
    v210 = 1024;
    v211 = 113;
    v212 = 1024;
    *(_DWORD *)v213 = v50;
    _os_log_impl(&dword_1B5ED0000, v49, OS_LOG_TYPE_INFO, "%25s:%-5d Successfully retrieved NumContextFrames (%u).\n", buf, 0x18u);
    v48 = *(NSObject ***)(a1 + 256);
  }
  if (v48)
  {
    v51 = *v48;
    if (!*v48)
      goto LABEL_117;
  }
  else
  {
    v51 = MEMORY[0x1E0C81028];
  }
  if (os_log_type_enabled(v51, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 136315394;
    v209 = "NeuralNetVAD.cpp";
    v210 = 1024;
    v211 = 116;
    _os_log_impl(&dword_1B5ED0000, v51, OS_LOG_TYPE_INFO, "%25s:%-5d NeuralNetVAD: Loading DeltaFeature from topLevelDict.", buf, 0x12u);
  }
LABEL_117:
  v205 = (int *)(a1 + 36);
  if (DictionaryBlobReader::ReadScalarFromDictionary<unsigned int>((uint64_t **)&v207, a2, CFSTR("DeltaFeature"), (_DWORD *)(a1 + 36)))
  {
    *(_DWORD *)(a1 + 36) = 0;
    v52 = *(NSObject ***)(a1 + 256);
    if (v52)
    {
      v53 = *v52;
      if (!*v52)
        goto LABEL_137;
    }
    else
    {
      v53 = MEMORY[0x1E0C81028];
    }
    if (os_log_type_enabled(v53, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136315650;
      v209 = "NeuralNetVAD.cpp";
      v210 = 1024;
      v211 = 120;
      v212 = 1024;
      *(_DWORD *)v213 = 0;
      v56 = "%25s:%-5d DeltaFeature not found, being set to (%u).\n";
      v57 = v53;
      v58 = OS_LOG_TYPE_DEFAULT;
LABEL_130:
      _os_log_impl(&dword_1B5ED0000, v57, v58, v56, buf, 0x18u);
    }
  }
  else
  {
    v54 = *(NSObject ***)(a1 + 256);
    if (v54)
    {
      v55 = *v54;
      if (!*v54)
        goto LABEL_137;
    }
    else
    {
      v55 = MEMORY[0x1E0C81028];
    }
    if (os_log_type_enabled(v55, OS_LOG_TYPE_INFO))
    {
      v59 = *v205;
      *(_DWORD *)buf = 136315650;
      v209 = "NeuralNetVAD.cpp";
      v210 = 1024;
      v211 = 122;
      v212 = 1024;
      *(_DWORD *)v213 = v59;
      v56 = "%25s:%-5d Successfully retrieved DeltaFeature (%u).\n";
      v57 = v55;
      v58 = OS_LOG_TYPE_INFO;
      goto LABEL_130;
    }
  }
  v60 = *(NSObject ***)(a1 + 256);
  if (v60)
  {
    v61 = *v60;
    if (!*v60)
      goto LABEL_137;
  }
  else
  {
    v61 = MEMORY[0x1E0C81028];
  }
  if (os_log_type_enabled(v61, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 136315394;
    v209 = "NeuralNetVAD.cpp";
    v210 = 1024;
    v211 = 126;
    _os_log_impl(&dword_1B5ED0000, v61, OS_LOG_TYPE_INFO, "%25s:%-5d NeuralNetVAD: Loading InputScale from topLevelDict.", buf, 0x12u);
  }
LABEL_137:
  v62 = DictionaryBlobReader::ReadScalarFromDictionary<float>((uint64_t **)&v207, a2, CFSTR("InputScale"), kCFNumberFloat32Type, (float *)(a1 + 60));
  v63 = *(NSObject ***)(a1 + 256);
  if (v62)
  {
    if (v63)
      v184 = *v63;
    else
      v184 = 0;
    v199 = -66741;
    if (!os_log_type_enabled(v184, OS_LOG_TYPE_ERROR))
      goto LABEL_479;
    *(_DWORD *)buf = 136315650;
    v209 = "NeuralNetVAD.cpp";
    v210 = 1024;
    v211 = 128;
    v212 = 1024;
    *(_DWORD *)v213 = -66741;
    v200 = "%25s:%-5d EXCEPTION (%d) [err != noErr is false]: \"Failed to retrieve InputScale.\"";
    goto LABEL_478;
  }
  if (v63)
  {
    v64 = *v63;
    if (!*v63)
      goto LABEL_150;
  }
  else
  {
    v64 = MEMORY[0x1E0C81028];
  }
  if (os_log_type_enabled(v64, OS_LOG_TYPE_INFO))
  {
    v65 = *(float *)(a1 + 60);
    *(_DWORD *)buf = 136315650;
    v209 = "NeuralNetVAD.cpp";
    v210 = 1024;
    v211 = 129;
    v212 = 2048;
    *(double *)v213 = v65;
    _os_log_impl(&dword_1B5ED0000, v64, OS_LOG_TYPE_INFO, "%25s:%-5d Successfully retrieved InputScale (%g).\n", buf, 0x1Cu);
    v63 = *(NSObject ***)(a1 + 256);
  }
  if (v63)
  {
    v66 = *v63;
    if (!*v63)
      goto LABEL_150;
  }
  else
  {
    v66 = MEMORY[0x1E0C81028];
  }
  if (os_log_type_enabled(v66, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 136315394;
    v209 = "NeuralNetVAD.cpp";
    v210 = 1024;
    v211 = 132;
    _os_log_impl(&dword_1B5ED0000, v66, OS_LOG_TYPE_INFO, "%25s:%-5d NeuralNetVAD: Loading forgetting factor Lambda_TC from topLevelDict.", buf, 0x12u);
  }
LABEL_150:
  v67 = (float *)(a1 + 44);
  if (DictionaryBlobReader::ReadScalarFromDictionary<float>((uint64_t **)&v207, a2, CFSTR("Lambda_TC"), kCFNumberFloat32Type, (float *)(a1 + 44)))
  {
    *(_DWORD *)(a1 + 44) = 0;
    v68 = *(NSObject ***)(a1 + 256);
    if (v68)
    {
      v69 = *v68;
      if (!*v68)
        goto LABEL_170;
    }
    else
    {
      v69 = MEMORY[0x1E0C81028];
    }
    if (os_log_type_enabled(v69, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136315650;
      v209 = "NeuralNetVAD.cpp";
      v210 = 1024;
      v211 = 136;
      v212 = 2048;
      *(_QWORD *)v213 = 0;
      v71 = "%25s:%-5d forgetting factor Lambda_TC not found, being set to (%g).\n";
LABEL_163:
      _os_log_impl(&dword_1B5ED0000, v69, OS_LOG_TYPE_INFO, v71, buf, 0x1Cu);
    }
  }
  else
  {
    v70 = *(NSObject ***)(a1 + 256);
    if (v70)
    {
      v69 = *v70;
      if (!*v70)
        goto LABEL_170;
    }
    else
    {
      v69 = MEMORY[0x1E0C81028];
    }
    if (os_log_type_enabled(v69, OS_LOG_TYPE_INFO))
    {
      v72 = *v67;
      *(_DWORD *)buf = 136315650;
      v209 = "NeuralNetVAD.cpp";
      v210 = 1024;
      v211 = 138;
      v212 = 2048;
      *(double *)v213 = v72;
      v71 = "%25s:%-5d Successfully retrieved forgetting factor Lambda_TC (%g sec.).\n";
      goto LABEL_163;
    }
  }
  v73 = *(NSObject ***)(a1 + 256);
  if (v73)
  {
    v74 = *v73;
    if (!*v73)
      goto LABEL_170;
  }
  else
  {
    v74 = MEMORY[0x1E0C81028];
  }
  if (os_log_type_enabled(v74, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 136315394;
    v209 = "NeuralNetVAD.cpp";
    v210 = 1024;
    v211 = 142;
    _os_log_impl(&dword_1B5ED0000, v74, OS_LOG_TYPE_INFO, "%25s:%-5d NeuralNetVAD: Loading UseDirectionalMode from topLevelDict.", buf, 0x12u);
  }
LABEL_170:
  v75 = (unsigned int *)(a1 + 216);
  if (DictionaryBlobReader::ReadScalarFromDictionary<unsigned int>((uint64_t **)&v207, a2, CFSTR("UseDirectionalMode"), (_DWORD *)(a1 + 216)))
  {
    *(_DWORD *)(a1 + 216) = 0;
    v76 = *(NSObject ***)(a1 + 256);
    if (v76)
    {
      v77 = *v76;
      if (!*v76)
        goto LABEL_184;
    }
    else
    {
      v77 = MEMORY[0x1E0C81028];
    }
    if (!os_log_type_enabled(v77, OS_LOG_TYPE_INFO))
      goto LABEL_184;
    *(_DWORD *)buf = 136315650;
    v209 = "NeuralNetVAD.cpp";
    v210 = 1024;
    v211 = 146;
    v212 = 2048;
    *(_QWORD *)v213 = 0;
    v79 = "%25s:%-5d UseDirectionalMode not found, being set to (%g).\n";
LABEL_183:
    _os_log_impl(&dword_1B5ED0000, v77, OS_LOG_TYPE_INFO, v79, buf, 0x1Cu);
    goto LABEL_184;
  }
  v78 = *(NSObject ***)(a1 + 256);
  if (!v78)
  {
    v77 = MEMORY[0x1E0C81028];
    goto LABEL_181;
  }
  v77 = *v78;
  if (*v78)
  {
LABEL_181:
    if (!os_log_type_enabled(v77, OS_LOG_TYPE_INFO))
      goto LABEL_184;
    v80 = (float)*v75;
    *(_DWORD *)buf = 136315650;
    v209 = "NeuralNetVAD.cpp";
    v210 = 1024;
    v211 = 148;
    v212 = 2048;
    *(double *)v213 = v80;
    v79 = "%25s:%-5d Successfully retrieved UseDirectionalMode (%g sec.).\n";
    goto LABEL_183;
  }
LABEL_184:
  if (!*v75)
    goto LABEL_349;
  v81 = *(NSObject ***)(a1 + 256);
  if (v81)
  {
    v82 = *v81;
    if (!*v81)
      goto LABEL_191;
  }
  else
  {
    v82 = MEMORY[0x1E0C81028];
  }
  if (os_log_type_enabled(v82, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 136315394;
    v209 = "NeuralNetVAD.cpp";
    v210 = 1024;
    v211 = 152;
    _os_log_impl(&dword_1B5ED0000, v82, OS_LOG_TYPE_INFO, "%25s:%-5d NeuralNetVAD: Loading DirectionalTargetElevation from topLevelDict.", buf, 0x12u);
  }
LABEL_191:
  if (DictionaryBlobReader::ReadScalarFromDictionary<float>((uint64_t **)&v207, a2, CFSTR("DirectionalTargetElevation"), kCFNumberFloat32Type, (float *)(a1 + 224)))
  {
    *(_DWORD *)(a1 + 224) = 0;
    v83 = *(NSObject ***)(a1 + 256);
    if (v83)
    {
      v84 = *v83;
      if (!*v83)
        goto LABEL_211;
    }
    else
    {
      v84 = MEMORY[0x1E0C81028];
    }
    if (os_log_type_enabled(v84, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136315650;
      v209 = "NeuralNetVAD.cpp";
      v210 = 1024;
      v211 = 156;
      v212 = 2048;
      *(_QWORD *)v213 = 0;
      v87 = "%25s:%-5d DirectionalTargetElevation not found, being set to (%g).\n";
      v88 = v84;
LABEL_204:
      _os_log_impl(&dword_1B5ED0000, v88, OS_LOG_TYPE_INFO, v87, buf, 0x1Cu);
    }
  }
  else
  {
    v85 = *(NSObject ***)(a1 + 256);
    if (v85)
    {
      v86 = *v85;
      if (!*v85)
        goto LABEL_211;
    }
    else
    {
      v86 = MEMORY[0x1E0C81028];
    }
    if (os_log_type_enabled(v86, OS_LOG_TYPE_INFO))
    {
      v89 = *(float *)(a1 + 224);
      *(_DWORD *)buf = 136315650;
      v209 = "NeuralNetVAD.cpp";
      v210 = 1024;
      v211 = 158;
      v212 = 2048;
      *(double *)v213 = v89;
      v87 = "%25s:%-5d Successfully retrieved DirectionalTargetElevation (%g).\n";
      v88 = v86;
      goto LABEL_204;
    }
  }
  v90 = *(NSObject ***)(a1 + 256);
  if (v90)
  {
    v91 = *v90;
    if (!*v90)
      goto LABEL_211;
  }
  else
  {
    v91 = MEMORY[0x1E0C81028];
  }
  if (os_log_type_enabled(v91, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 136315394;
    v209 = "NeuralNetVAD.cpp";
    v210 = 1024;
    v211 = 162;
    _os_log_impl(&dword_1B5ED0000, v91, OS_LOG_TYPE_INFO, "%25s:%-5d NeuralNetVAD: Loading DirectionalTargetAzimuth from topLevelDict.", buf, 0x12u);
  }
LABEL_211:
  if (DictionaryBlobReader::ReadScalarFromDictionary<float>((uint64_t **)&v207, a2, CFSTR("DirectionalTargetAzimuth"), kCFNumberFloat32Type, (float *)(a1 + 220)))
  {
    *(_DWORD *)(a1 + 220) = 0;
    v92 = *(NSObject ***)(a1 + 256);
    if (v92)
    {
      v93 = *v92;
      if (!*v92)
        goto LABEL_231;
    }
    else
    {
      v93 = MEMORY[0x1E0C81028];
    }
    if (os_log_type_enabled(v93, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136315650;
      v209 = "NeuralNetVAD.cpp";
      v210 = 1024;
      v211 = 166;
      v212 = 2048;
      *(_QWORD *)v213 = 0;
      v96 = "%25s:%-5d DirectionalTargetAzimuth not found, being set to (%g).\n";
      v97 = v93;
LABEL_224:
      _os_log_impl(&dword_1B5ED0000, v97, OS_LOG_TYPE_INFO, v96, buf, 0x1Cu);
    }
  }
  else
  {
    v94 = *(NSObject ***)(a1 + 256);
    if (v94)
    {
      v95 = *v94;
      if (!*v94)
        goto LABEL_231;
    }
    else
    {
      v95 = MEMORY[0x1E0C81028];
    }
    if (os_log_type_enabled(v95, OS_LOG_TYPE_INFO))
    {
      v98 = *(float *)(a1 + 220);
      *(_DWORD *)buf = 136315650;
      v209 = "NeuralNetVAD.cpp";
      v210 = 1024;
      v211 = 168;
      v212 = 2048;
      *(double *)v213 = v98;
      v96 = "%25s:%-5d Successfully retrieved DirectionalTargetAzimuth (%g).\n";
      v97 = v95;
      goto LABEL_224;
    }
  }
  v99 = *(NSObject ***)(a1 + 256);
  if (v99)
  {
    v100 = *v99;
    if (!*v99)
      goto LABEL_231;
  }
  else
  {
    v100 = MEMORY[0x1E0C81028];
  }
  if (os_log_type_enabled(v100, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 136315394;
    v209 = "NeuralNetVAD.cpp";
    v210 = 1024;
    v211 = 172;
    _os_log_impl(&dword_1B5ED0000, v100, OS_LOG_TYPE_INFO, "%25s:%-5d NeuralNetVAD: Loading DirectionalModelType from topLevelDict.", buf, 0x12u);
  }
LABEL_231:
  Value = (const __CFNumber *)CFDictionaryGetValue(a2, CFSTR("DirectionalModelType"));
  if (Value)
  {
    v102 = (int *)(a1 + 240);
    CFNumberGetValue(Value, kCFNumberIntType, (void *)(a1 + 240));
    if (v9)
    {
      v103 = *v9;
      if (!*v9)
        goto LABEL_241;
    }
    else
    {
      v103 = MEMORY[0x1E0C81028];
    }
    if (os_log_type_enabled(v103, OS_LOG_TYPE_DEBUG))
    {
      CStringPtr = CFStringGetCStringPtr(CFSTR("DirectionalModelType"), 0x8000100u);
      v106 = (double)*v102;
      *(_DWORD *)buf = 136315906;
      v209 = "DictionaryBlobReader.hpp";
      v210 = 1024;
      v211 = 71;
      v212 = 2080;
      *(_QWORD *)v213 = CStringPtr;
      *(_WORD *)&v213[8] = 2048;
      *(double *)&v213[10] = v106;
      _os_log_impl(&dword_1B5ED0000, v103, OS_LOG_TYPE_DEBUG, "%25s:%-5d Successfully retrieved %s (%g).", buf, 0x26u);
    }
LABEL_241:
    v107 = *(NSObject ***)(a1 + 256);
    if (v107)
    {
      v108 = *v107;
      if (!*v107)
        goto LABEL_263;
    }
    else
    {
      v108 = MEMORY[0x1E0C81028];
    }
    if (os_log_type_enabled(v108, OS_LOG_TYPE_INFO))
    {
      v109 = *v102;
      *(_DWORD *)buf = 136315650;
      v209 = "NeuralNetVAD.cpp";
      v210 = 1024;
      v211 = 178;
      v212 = 1024;
      *(_DWORD *)v213 = v109;
      v110 = "%25s:%-5d Successfully retrieved DirectionalModelType (%d).\n";
      v111 = v108;
LABEL_256:
      _os_log_impl(&dword_1B5ED0000, v111, OS_LOG_TYPE_INFO, v110, buf, 0x18u);
      goto LABEL_257;
    }
    goto LABEL_257;
  }
  if (v9)
  {
    v104 = *v9;
    if (!*v9)
      goto LABEL_250;
  }
  else
  {
    v104 = MEMORY[0x1E0C81028];
  }
  if (os_log_type_enabled(v104, OS_LOG_TYPE_DEFAULT))
  {
    v112 = CFStringGetCStringPtr(CFSTR("DirectionalModelType"), 0x8000100u);
    *(_DWORD *)buf = 136315650;
    v209 = "DictionaryBlobReader.hpp";
    v210 = 1024;
    v211 = 65;
    v212 = 2080;
    *(_QWORD *)v213 = v112;
    _os_log_impl(&dword_1B5ED0000, v104, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Failed to retrieve %s.", buf, 0x1Cu);
  }
LABEL_250:
  *(_DWORD *)(a1 + 240) = 0;
  v113 = *(NSObject ***)(a1 + 256);
  if (v113)
  {
    v114 = *v113;
    if (!*v113)
      goto LABEL_263;
  }
  else
  {
    v114 = MEMORY[0x1E0C81028];
  }
  if (os_log_type_enabled(v114, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 136315650;
    v209 = "NeuralNetVAD.cpp";
    v210 = 1024;
    v211 = 176;
    v212 = 1024;
    *(_DWORD *)v213 = 0;
    v110 = "%25s:%-5d DirectionalModelType not found, being set to (%d).\n";
    v111 = v114;
    goto LABEL_256;
  }
LABEL_257:
  v115 = *(NSObject ***)(a1 + 256);
  if (v115)
  {
    v116 = *v115;
    if (!*v115)
      goto LABEL_263;
  }
  else
  {
    v116 = MEMORY[0x1E0C81028];
  }
  if (os_log_type_enabled(v116, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 136315394;
    v209 = "NeuralNetVAD.cpp";
    v210 = 1024;
    v211 = 182;
    _os_log_impl(&dword_1B5ED0000, v116, OS_LOG_TYPE_INFO, "%25s:%-5d NeuralNetVAD: Loading Directional Model Shape Parameter from topLevelDict.", buf, 0x12u);
  }
LABEL_263:
  if (DictionaryBlobReader::ReadScalarFromDictionary<float>((uint64_t **)&v207, a2, CFSTR("DirectionalModelShapeParamer"), kCFNumberFloat32Type, (float *)(a1 + 228)))
  {
    *(_DWORD *)(a1 + 228) = 0;
    v117 = *(NSObject ***)(a1 + 256);
    if (v117)
    {
      v118 = *v117;
      if (!*v117)
        goto LABEL_283;
    }
    else
    {
      v118 = MEMORY[0x1E0C81028];
    }
    if (os_log_type_enabled(v118, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136315650;
      v209 = "NeuralNetVAD.cpp";
      v210 = 1024;
      v211 = 186;
      v212 = 2048;
      *(_QWORD *)v213 = 0;
      v121 = "%25s:%-5d DirectionalModelShapeParamer not found, being set to (%g).\n";
      v122 = v118;
LABEL_276:
      _os_log_impl(&dword_1B5ED0000, v122, OS_LOG_TYPE_INFO, v121, buf, 0x1Cu);
    }
  }
  else
  {
    v119 = *(NSObject ***)(a1 + 256);
    if (v119)
    {
      v120 = *v119;
      if (!*v119)
        goto LABEL_283;
    }
    else
    {
      v120 = MEMORY[0x1E0C81028];
    }
    if (os_log_type_enabled(v120, OS_LOG_TYPE_INFO))
    {
      v123 = *(float *)(a1 + 228);
      *(_DWORD *)buf = 136315650;
      v209 = "NeuralNetVAD.cpp";
      v210 = 1024;
      v211 = 188;
      v212 = 2048;
      *(double *)v213 = v123;
      v121 = "%25s:%-5d Successfully retrieved DirectionalModelShapeParamer (%g).\n";
      v122 = v120;
      goto LABEL_276;
    }
  }
  v124 = *(NSObject ***)(a1 + 256);
  if (v124)
  {
    v125 = *v124;
    if (!*v124)
      goto LABEL_283;
  }
  else
  {
    v125 = MEMORY[0x1E0C81028];
  }
  if (os_log_type_enabled(v125, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 136315394;
    v209 = "NeuralNetVAD.cpp";
    v210 = 1024;
    v211 = 193;
    _os_log_impl(&dword_1B5ED0000, v125, OS_LOG_TYPE_INFO, "%25s:%-5d NeuralNetVAD: Loading DirectionalModelConditionalTargetPrior from topLevelDict.", buf, 0x12u);
  }
LABEL_283:
  if (DictionaryBlobReader::ReadScalarFromDictionary<float>((uint64_t **)&v207, a2, CFSTR("DirectionalModelConditionalTargetPrior"), kCFNumberFloat32Type, (float *)(a1 + 232)))
  {
    *(_DWORD *)(a1 + 232) = 0;
    v126 = *(NSObject ***)(a1 + 256);
    if (v126)
    {
      v127 = *v126;
      if (!*v126)
        goto LABEL_303;
    }
    else
    {
      v127 = MEMORY[0x1E0C81028];
    }
    if (os_log_type_enabled(v127, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136315650;
      v209 = "NeuralNetVAD.cpp";
      v210 = 1024;
      v211 = 197;
      v212 = 2048;
      *(_QWORD *)v213 = 0;
      v130 = "%25s:%-5d DirectionalModelConditionalTargetPrior not found, being set to (%g).\n";
      v131 = v127;
LABEL_296:
      _os_log_impl(&dword_1B5ED0000, v131, OS_LOG_TYPE_INFO, v130, buf, 0x1Cu);
    }
  }
  else
  {
    v128 = *(NSObject ***)(a1 + 256);
    if (v128)
    {
      v129 = *v128;
      if (!*v128)
        goto LABEL_303;
    }
    else
    {
      v129 = MEMORY[0x1E0C81028];
    }
    if (os_log_type_enabled(v129, OS_LOG_TYPE_INFO))
    {
      v132 = *(float *)(a1 + 232);
      *(_DWORD *)buf = 136315650;
      v209 = "NeuralNetVAD.cpp";
      v210 = 1024;
      v211 = 199;
      v212 = 2048;
      *(double *)v213 = v132;
      v130 = "%25s:%-5d Successfully retrieved DirectionalModelConditionalTargetPrior (%g).\n";
      v131 = v129;
      goto LABEL_296;
    }
  }
  v133 = *(NSObject ***)(a1 + 256);
  if (v133)
  {
    v134 = *v133;
    if (!*v133)
      goto LABEL_303;
  }
  else
  {
    v134 = MEMORY[0x1E0C81028];
  }
  if (os_log_type_enabled(v134, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 136315394;
    v209 = "NeuralNetVAD.cpp";
    v210 = 1024;
    v211 = 203;
    _os_log_impl(&dword_1B5ED0000, v134, OS_LOG_TYPE_INFO, "%25s:%-5d NeuralNetVAD: Loading CombinedProbabilityMode from topLevelDict.", buf, 0x12u);
  }
LABEL_303:
  v135 = (const __CFNumber *)CFDictionaryGetValue(a2, CFSTR("CombinedProbabilityMode"));
  if (v135)
  {
    v136 = (int *)(a1 + 236);
    CFNumberGetValue(v135, kCFNumberIntType, (void *)(a1 + 236));
    if (v207)
    {
      v137 = *v207;
      if (!*v207)
        goto LABEL_313;
    }
    else
    {
      v137 = MEMORY[0x1E0C81028];
    }
    if (os_log_type_enabled(v137, OS_LOG_TYPE_DEBUG))
    {
      v139 = CFStringGetCStringPtr(CFSTR("CombinedProbabilityMode"), 0x8000100u);
      v140 = (double)*v136;
      *(_DWORD *)buf = 136315906;
      v209 = "DictionaryBlobReader.hpp";
      v210 = 1024;
      v211 = 71;
      v212 = 2080;
      *(_QWORD *)v213 = v139;
      *(_WORD *)&v213[8] = 2048;
      *(double *)&v213[10] = v140;
      _os_log_impl(&dword_1B5ED0000, v137, OS_LOG_TYPE_DEBUG, "%25s:%-5d Successfully retrieved %s (%g).", buf, 0x26u);
    }
LABEL_313:
    v141 = *(NSObject ***)(a1 + 256);
    if (v141)
    {
      v142 = *v141;
      if (!*v141)
        goto LABEL_335;
    }
    else
    {
      v142 = MEMORY[0x1E0C81028];
    }
    if (os_log_type_enabled(v142, OS_LOG_TYPE_INFO))
    {
      v143 = (float)*v136;
      *(_DWORD *)buf = 136315650;
      v209 = "NeuralNetVAD.cpp";
      v210 = 1024;
      v211 = 209;
      v212 = 2048;
      *(double *)v213 = v143;
      v144 = "%25s:%-5d Successfully retrieved CombinedProbabilityMode (%g sec.).\n";
      v145 = v142;
LABEL_328:
      _os_log_impl(&dword_1B5ED0000, v145, OS_LOG_TYPE_INFO, v144, buf, 0x1Cu);
      goto LABEL_329;
    }
    goto LABEL_329;
  }
  if (v207)
  {
    v138 = *v207;
    if (!*v207)
      goto LABEL_322;
  }
  else
  {
    v138 = MEMORY[0x1E0C81028];
  }
  if (os_log_type_enabled(v138, OS_LOG_TYPE_DEFAULT))
  {
    v146 = CFStringGetCStringPtr(CFSTR("CombinedProbabilityMode"), 0x8000100u);
    *(_DWORD *)buf = 136315650;
    v209 = "DictionaryBlobReader.hpp";
    v210 = 1024;
    v211 = 65;
    v212 = 2080;
    *(_QWORD *)v213 = v146;
    _os_log_impl(&dword_1B5ED0000, v138, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Failed to retrieve %s.", buf, 0x1Cu);
  }
LABEL_322:
  *(_DWORD *)(a1 + 236) = 0;
  v147 = *(NSObject ***)(a1 + 256);
  if (v147)
  {
    v148 = *v147;
    if (!*v147)
      goto LABEL_335;
  }
  else
  {
    v148 = MEMORY[0x1E0C81028];
  }
  if (os_log_type_enabled(v148, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 136315650;
    v209 = "NeuralNetVAD.cpp";
    v210 = 1024;
    v211 = 207;
    v212 = 2048;
    *(_QWORD *)v213 = 0;
    v144 = "%25s:%-5d CombinedProbabilityMode not found, being set to (%g).\n";
    v145 = v148;
    goto LABEL_328;
  }
LABEL_329:
  v149 = *(NSObject ***)(a1 + 256);
  if (v149)
  {
    v150 = *v149;
    if (!*v149)
      goto LABEL_335;
  }
  else
  {
    v150 = MEMORY[0x1E0C81028];
  }
  if (os_log_type_enabled(v150, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 136315394;
    v209 = "NeuralNetVAD.cpp";
    v210 = 1024;
    v211 = 213;
    _os_log_impl(&dword_1B5ED0000, v150, OS_LOG_TYPE_INFO, "%25s:%-5d NeuralNetVAD: Loading SpatialSPPCutOff from topLevelDict.", buf, 0x12u);
  }
LABEL_335:
  if (DictionaryBlobReader::ReadScalarFromDictionary<float>((uint64_t **)&v207, a2, CFSTR("SpatialSPPCutOff"), kCFNumberFloat32Type, (float *)(a1 + 244)))
  {
    *(_DWORD *)(a1 + 244) = 0;
    v151 = *(NSObject ***)(a1 + 256);
    if (v151)
    {
      v152 = *v151;
      if (!*v151)
        goto LABEL_355;
    }
    else
    {
      v152 = MEMORY[0x1E0C81028];
    }
    if (os_log_type_enabled(v152, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136315650;
      v209 = "NeuralNetVAD.cpp";
      v210 = 1024;
      v211 = 217;
      v212 = 2048;
      *(_QWORD *)v213 = 0;
      v155 = "%25s:%-5d SpatialSPPCutOff not found, being set to (%g).\n";
      v156 = v152;
LABEL_348:
      _os_log_impl(&dword_1B5ED0000, v156, OS_LOG_TYPE_INFO, v155, buf, 0x1Cu);
    }
  }
  else
  {
    v153 = *(NSObject ***)(a1 + 256);
    if (v153)
    {
      v154 = *v153;
      if (!*v153)
        goto LABEL_355;
    }
    else
    {
      v154 = MEMORY[0x1E0C81028];
    }
    if (os_log_type_enabled(v154, OS_LOG_TYPE_INFO))
    {
      v157 = *(float *)(a1 + 244);
      *(_DWORD *)buf = 136315650;
      v209 = "NeuralNetVAD.cpp";
      v210 = 1024;
      v211 = 219;
      v212 = 2048;
      *(double *)v213 = v157;
      v155 = "%25s:%-5d Successfully retrieved SpatialSPPCutOff (%g).\n";
      v156 = v154;
      goto LABEL_348;
    }
  }
LABEL_349:
  v158 = *(NSObject ***)(a1 + 256);
  if (v158)
  {
    v159 = *v158;
    if (!*v158)
      goto LABEL_355;
  }
  else
  {
    v159 = MEMORY[0x1E0C81028];
  }
  if (os_log_type_enabled(v159, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 136315394;
    v209 = "NeuralNetVAD.cpp";
    v210 = 1024;
    v211 = 224;
    _os_log_impl(&dword_1B5ED0000, v159, OS_LOG_TYPE_INFO, "%25s:%-5d NeuralNetVAD: Loading VADinAudioOutputMode from topLevelDict.", buf, 0x12u);
  }
LABEL_355:
  if (DictionaryBlobReader::ReadScalarFromDictionary<unsigned int>((uint64_t **)&v207, a2, CFSTR("VADinAudioOutputMode"), v7))
  {
    *(_DWORD *)(a1 + 248) = 0;
    v160 = *(NSObject ***)(a1 + 256);
    if (v160)
    {
      v161 = *v160;
      if (!*v160)
        goto LABEL_369;
    }
    else
    {
      v161 = MEMORY[0x1E0C81028];
    }
    if (!os_log_type_enabled(v161, OS_LOG_TYPE_INFO))
      goto LABEL_369;
    *(_DWORD *)buf = 136315650;
    v209 = "NeuralNetVAD.cpp";
    v210 = 1024;
    v211 = 228;
    v212 = 1024;
    *(_DWORD *)v213 = 0;
    v163 = "%25s:%-5d mVADinAudioOutputMode not found, being set to (%u).\n";
LABEL_368:
    _os_log_impl(&dword_1B5ED0000, v161, OS_LOG_TYPE_INFO, v163, buf, 0x18u);
    goto LABEL_369;
  }
  v162 = *(NSObject ***)(a1 + 256);
  if (!v162)
  {
    v161 = MEMORY[0x1E0C81028];
    goto LABEL_366;
  }
  v161 = *v162;
  if (*v162)
  {
LABEL_366:
    if (!os_log_type_enabled(v161, OS_LOG_TYPE_INFO))
      goto LABEL_369;
    v164 = *v7;
    *(_DWORD *)buf = 136315650;
    v209 = "NeuralNetVAD.cpp";
    v210 = 1024;
    v211 = 230;
    v212 = 1024;
    *(_DWORD *)v213 = v164;
    v163 = "%25s:%-5d Successfully retrieved mVADinAudioOutputMode (%u).\n";
    goto LABEL_368;
  }
LABEL_369:
  if (*v7 != 1)
    goto LABEL_390;
  v165 = *(NSObject ***)(a1 + 256);
  if (v165)
  {
    v166 = *v165;
    if (!*v165)
      goto LABEL_376;
  }
  else
  {
    v166 = MEMORY[0x1E0C81028];
  }
  if (os_log_type_enabled(v166, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 136315394;
    v209 = "NeuralNetVAD.cpp";
    v210 = 1024;
    v211 = 235;
    _os_log_impl(&dword_1B5ED0000, v166, OS_LOG_TYPE_INFO, "%25s:%-5d NeuralNetVAD: Loading OutputMaskMode from topLevelDict.", buf, 0x12u);
  }
LABEL_376:
  if (DictionaryBlobReader::ReadScalarFromDictionary<unsigned int>((uint64_t **)&v207, a2, CFSTR("OutputMaskMode"), (_DWORD *)(v5 + 172)))
  {
    *(_DWORD *)(a1 + 252) = 1;
    v167 = *(NSObject ***)(a1 + 256);
    if (v167)
    {
      v168 = *v167;
      if (!*v167)
        goto LABEL_390;
    }
    else
    {
      v168 = MEMORY[0x1E0C81028];
    }
    if (!os_log_type_enabled(v168, OS_LOG_TYPE_INFO))
      goto LABEL_390;
    *(_DWORD *)buf = 136315650;
    v209 = "NeuralNetVAD.cpp";
    v210 = 1024;
    v211 = 239;
    v212 = 1024;
    *(_DWORD *)v213 = 1;
    v171 = "%25s:%-5d mOutputMaskMode not found, being set to (%u).\n";
    v172 = v168;
LABEL_389:
    _os_log_impl(&dword_1B5ED0000, v172, OS_LOG_TYPE_INFO, v171, buf, 0x18u);
    goto LABEL_390;
  }
  v169 = *(NSObject ***)(a1 + 256);
  if (!v169)
  {
    v170 = MEMORY[0x1E0C81028];
    goto LABEL_387;
  }
  v170 = *v169;
  if (*v169)
  {
LABEL_387:
    if (!os_log_type_enabled(v170, OS_LOG_TYPE_INFO))
      goto LABEL_390;
    v173 = *(_DWORD *)(v5 + 172);
    *(_DWORD *)buf = 136315650;
    v209 = "NeuralNetVAD.cpp";
    v210 = 1024;
    v211 = 241;
    v212 = 1024;
    *(_DWORD *)v213 = v173;
    v171 = "%25s:%-5d Successfully retrieved mOutputMaskMode (%u).\n";
    v172 = v170;
    goto LABEL_389;
  }
LABEL_390:
  v174 = 0.0;
  if (*v67 != 0.0)
  {
    v175 = *(double *)a1;
    v174 = expf((float)((float)-(float)*(unsigned int *)(a1 + 28) / v175) / *v67);
  }
  *(float *)(a1 + 48) = v174;
  *(float *)(a1 + 52) = 1.0 - v174;
  v176 = *(NSObject ***)(a1 + 256);
  if (v176)
  {
    v177 = *v176;
    if (!*v176)
      goto LABEL_404;
  }
  else
  {
    v177 = MEMORY[0x1E0C81028];
  }
  if (os_log_type_enabled(v177, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 136315650;
    v209 = "NeuralNetVAD.cpp";
    v210 = 1024;
    v211 = 248;
    v212 = 2048;
    *(double *)v213 = v174;
    _os_log_impl(&dword_1B5ED0000, v177, OS_LOG_TYPE_INFO, "%25s:%-5d Internally set the forgetting factor as (%g).\n", buf, 0x1Cu);
    v176 = *(NSObject ***)(a1 + 256);
  }
  if (v176)
  {
    v178 = *v176;
    if (!*v176)
      goto LABEL_404;
  }
  else
  {
    v178 = MEMORY[0x1E0C81028];
  }
  if (os_log_type_enabled(v178, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 136315394;
    v209 = "NeuralNetVAD.cpp";
    v210 = 1024;
    v211 = 251;
    _os_log_impl(&dword_1B5ED0000, v178, OS_LOG_TYPE_INFO, "%25s:%-5d NeuralNetVAD: Loading FFT2Mel matrix from topLevelDict.", buf, 0x12u);
  }
LABEL_404:
  v179 = *(_DWORD *)(a1 + 28) + 1;
  *(_DWORD *)(a1 + 64) = v179;
  if (DictionaryBlobReader::ReadSparseMatrix((uint64_t **)&v207, a2, CFSTR("FFT2Mel"), (unsigned int *)(a1 + 68), CFSTR("NumMelBands"), v179, CFSTR("NumFFTBins"), (sparse_m_float **)(a1 + 72)))
  {
    v198 = *(NSObject ***)(a1 + 256);
    if (v198)
      v184 = *v198;
    else
      v184 = 0;
    v199 = -66741;
    if (!os_log_type_enabled(v184, OS_LOG_TYPE_ERROR))
      goto LABEL_479;
    *(_DWORD *)buf = 136315650;
    v209 = "NeuralNetVAD.cpp";
    v210 = 1024;
    v211 = 254;
    v212 = 1024;
    *(_DWORD *)v213 = -66741;
    v200 = "%25s:%-5d EXCEPTION (%d) [err != noErr is false]: \"FFT2Mel matrix not loaded.\"";
    goto LABEL_478;
  }
  *(_DWORD *)(a1 + 184) = (*(uint64_t (**)(_QWORD))(**(_QWORD **)*v6 + 24))(*(_QWORD *)*v6);
  *(_DWORD *)(a1 + 188) = (*(uint64_t (**)(_QWORD))(***(_QWORD ***)(a1 + 176) + 32))(**(_QWORD **)(a1 + 176));
  v180 = *(_DWORD *)(a1 + 40);
  v181 = *(unsigned int *)(a1 + 184);
  v182 = *(_DWORD *)(a1 + 68);
  if (v180 == 1)
  {
    if ((_DWORD)v181 != 2 * v182)
    {
      v183 = *(NSObject ***)(a1 + 256);
      if (v183)
        v184 = *v183;
      else
        v184 = 0;
      v199 = -10878;
      if (os_log_type_enabled(v184, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315650;
        v209 = "NeuralNetVAD.cpp";
        v210 = 1024;
        v211 = 262;
        v212 = 1024;
        *(_DWORD *)v213 = -10878;
        v200 = "%25s:%-5d EXCEPTION (%d) [(mInputSize != mNumMelBands*2) is false]: \"mInputSize is wrong.\"";
        goto LABEL_478;
      }
LABEL_479:
      exception = __cxa_allocate_exception(0x10uLL);
      *(_QWORD *)exception = &off_1E69EE218;
      exception[2] = v199;
    }
  }
  else if ((_DWORD)v181 != v182 * v180 + v182 * v180 * *v205)
  {
    v201 = *(NSObject ***)(a1 + 256);
    if (v201)
      v184 = *v201;
    else
      v184 = 0;
    v199 = -10878;
    if (os_log_type_enabled(v184, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315650;
      v209 = "NeuralNetVAD.cpp";
      v210 = 1024;
      v211 = 265;
      v212 = 1024;
      *(_DWORD *)v213 = -10878;
      v200 = "%25s:%-5d EXCEPTION (%d) [(mInputSize != mNumMelBands*mNumContextFrames*(1+mDeltaFeature)) is false]: \"mIn"
             "putSize is wrong.\"";
      goto LABEL_478;
    }
    goto LABEL_479;
  }
  *(_DWORD *)buf = 0;
  std::vector<float>::assign(v206, v181, buf);
  v185 = *(unsigned int *)(a1 + 64);
  *(_DWORD *)buf = 0;
  std::vector<float>::assign((char **)v5, v185, buf);
  if (*(_DWORD *)(a1 + 40) == 1)
  {
    v186 = *(unsigned int *)(a1 + 64);
    *(_DWORD *)buf = 0;
    std::vector<float>::assign(v204, v186, buf);
  }
  else
  {
    v187 = *(unsigned int *)(a1 + 68);
    *(_DWORD *)buf = 0;
    std::vector<float>::assign(v203, v187, buf);
  }
  *(_BYTE *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 160) = 0;
  *(_QWORD *)(a1 + 168) = 0;
  *(_QWORD *)(a1 + 152) = 0;
  v188 = *(NSObject ***)(a1 + 256);
  if (v188)
  {
    v189 = *v188;
    if (!*v188)
      return a1;
  }
  else
  {
    v189 = MEMORY[0x1E0C81028];
  }
  if (os_log_type_enabled(v189, OS_LOG_TYPE_DEFAULT))
  {
    v190 = (int)*(double *)a1;
    v191 = *(float *)(a1 + 8);
    v192 = *(_DWORD *)(a1 + 20);
    v194 = *(_DWORD *)(a1 + 28);
    v193 = *(_DWORD *)(a1 + 32);
    v195 = *(_DWORD *)(a1 + 40);
    v196 = *(_DWORD *)(a1 + 184);
    *(_DWORD *)buf = 136317186;
    v209 = "NeuralNetVAD.cpp";
    v210 = 1024;
    v211 = 289;
    v212 = 1024;
    *(_DWORD *)v213 = v190;
    *(_WORD *)&v213[4] = 2048;
    *(double *)&v213[6] = v191;
    *(_WORD *)&v213[14] = 1024;
    *(_DWORD *)&v213[16] = v193;
    v214 = 1024;
    v215 = v192;
    v216 = 1024;
    v217 = v194;
    v218 = 1024;
    v219 = v195;
    v220 = 1024;
    v221 = v196;
    _os_log_impl(&dword_1B5ED0000, v189, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Finish reading NeuralNetVAD parameters: SampleRate=(%d); Threshold=(%4.2f); NumLayers=(%d); WaitFrames=("
      "%d); BlockSize=(%d); Context=(%d); FeatSize=(%d)",
      buf,
      0x40u);
  }
  return a1;
}

void sub_1B635FF74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10, void **a11, uint64_t a12, void **a13)
{
  _QWORD *v13;
  void **v14;
  NeuralNet **v15;
  void *v17;
  void *v18;
  void *v19;
  void *v20;

  v17 = *a13;
  if (*a13)
  {
    v13[25] = v17;
    operator delete(v17);
  }
  std::unique_ptr<NeuralNet>::reset[abi:ne180100](v15, 0);
  v18 = *a10;
  if (*a10)
  {
    v13[17] = v18;
    operator delete(v18);
  }
  v19 = *a11;
  if (*a11)
  {
    v13[14] = v19;
    operator delete(v19);
  }
  v20 = *v14;
  if (*v14)
  {
    v13[11] = v20;
    operator delete(v20);
  }
  _Unwind_Resume(a1);
}

void ecMIMO::~ecMIMO(ecMIMO *this)
{
  ecMIMO::~ecMIMO(this);
  JUMPOUT(0x1BCC95CECLL);
}

{
  uint64_t v2;
  uint64_t v3;
  vDSP_DFT_SetupStruct *v4;
  vDSP_DFT_SetupStruct *v5;
  void **v6;
  void **v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void **v18;

  *(_QWORD *)this = &off_1E69D5210;
  v2 = *((_QWORD *)this + 119);
  if (v2)
    MultiRadixFFT_Dispose(v2);
  v3 = *((_QWORD *)this + 120);
  if (v3)
    MultiRadixFFT_Dispose(v3);
  v4 = (vDSP_DFT_SetupStruct *)*((_QWORD *)this + 121);
  if (v4)
    vDSP_DFT_DestroySetup(v4);
  v5 = (vDSP_DFT_SetupStruct *)*((_QWORD *)this + 122);
  if (v5)
    vDSP_DFT_DestroySetup(v5);
  v18 = (void **)((char *)this + 928);
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v18);
  v6 = (void **)*((_QWORD *)this + 113);
  if (v6)
  {
    v7 = (void **)*((_QWORD *)this + 114);
    v8 = (void *)*((_QWORD *)this + 113);
    if (v7 != v6)
    {
      do
      {
        v7 -= 3;
        v18 = v7;
        std::vector<std::vector<BOOL>>::__destroy_vector::operator()[abi:ne180100](&v18);
      }
      while (v7 != v6);
      v8 = (void *)*((_QWORD *)this + 113);
    }
    *((_QWORD *)this + 114) = v6;
    operator delete(v8);
  }
  v18 = (void **)((char *)this + 880);
  std::vector<std::vector<std::vector<std::vector<float>>>>::__destroy_vector::operator()[abi:ne180100](&v18);
  v18 = (void **)((char *)this + 856);
  std::vector<std::vector<std::vector<std::vector<float>>>>::__destroy_vector::operator()[abi:ne180100](&v18);
  v18 = (void **)((char *)this + 832);
  std::vector<std::vector<std::vector<std::vector<float>>>>::__destroy_vector::operator()[abi:ne180100](&v18);
  v18 = (void **)((char *)this + 808);
  std::vector<std::vector<std::vector<std::vector<float>>>>::__destroy_vector::operator()[abi:ne180100](&v18);
  v18 = (void **)((char *)this + 784);
  std::vector<std::vector<std::vector<std::vector<float>>>>::__destroy_vector::operator()[abi:ne180100](&v18);
  v18 = (void **)((char *)this + 760);
  std::vector<std::vector<std::vector<std::vector<float>>>>::__destroy_vector::operator()[abi:ne180100](&v18);
  v18 = (void **)((char *)this + 736);
  std::vector<std::vector<std::vector<std::vector<float>>>>::__destroy_vector::operator()[abi:ne180100](&v18);
  v18 = (void **)((char *)this + 712);
  std::vector<std::vector<std::vector<DspLib::Biquad::Section>>>::__destroy_vector::operator()[abi:ne180100](&v18);
  v18 = (void **)((char *)this + 688);
  std::vector<std::vector<std::vector<DspLib::Biquad::Section>>>::__destroy_vector::operator()[abi:ne180100](&v18);
  v18 = (void **)((char *)this + 664);
  std::vector<std::vector<std::vector<DspLib::Biquad::Section>>>::__destroy_vector::operator()[abi:ne180100](&v18);
  v18 = (void **)((char *)this + 640);
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v18);
  v18 = (void **)((char *)this + 616);
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v18);
  v18 = (void **)((char *)this + 592);
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v18);
  v18 = (void **)((char *)this + 568);
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v18);
  v18 = (void **)((char *)this + 544);
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v18);
  v18 = (void **)((char *)this + 520);
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v18);
  v18 = (void **)((char *)this + 496);
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v18);
  v18 = (void **)((char *)this + 472);
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v18);
  v18 = (void **)((char *)this + 448);
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v18);
  v18 = (void **)((char *)this + 424);
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v18);
  v18 = (void **)((char *)this + 400);
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v18);
  v9 = (void *)*((_QWORD *)this + 47);
  if (v9)
  {
    *((_QWORD *)this + 48) = v9;
    operator delete(v9);
  }
  v10 = (void *)*((_QWORD *)this + 44);
  if (v10)
  {
    *((_QWORD *)this + 45) = v10;
    operator delete(v10);
  }
  v11 = (void *)*((_QWORD *)this + 41);
  if (v11)
  {
    *((_QWORD *)this + 42) = v11;
    operator delete(v11);
  }
  v12 = (void *)*((_QWORD *)this + 38);
  if (v12)
  {
    *((_QWORD *)this + 39) = v12;
    operator delete(v12);
  }
  v13 = (void *)*((_QWORD *)this + 35);
  if (v13)
  {
    *((_QWORD *)this + 36) = v13;
    operator delete(v13);
  }
  v14 = (void *)*((_QWORD *)this + 32);
  if (v14)
  {
    *((_QWORD *)this + 33) = v14;
    operator delete(v14);
  }
  v15 = (void *)*((_QWORD *)this + 29);
  if (v15)
  {
    *((_QWORD *)this + 30) = v15;
    operator delete(v15);
  }
  v16 = (void *)*((_QWORD *)this + 26);
  if (v16)
  {
    *((_QWORD *)this + 27) = v16;
    operator delete(v16);
  }
  v17 = (void *)*((_QWORD *)this + 23);
  if (v17)
  {
    *((_QWORD *)this + 24) = v17;
    operator delete(v17);
  }
}

void ecMIMO::ec_state_reset(ecMIMO *this)
{
  std::vector<unsigned int>::size_type v2;
  unint64_t v3;
  std::vector<unsigned int>::size_type v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  unint64_t v12;
  void **v13;
  void **v14;
  void *v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  void **v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  void **v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void *v35;
  void *v36;
  _QWORD *v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  void **v45;
  unint64_t v46;
  unint64_t v47;
  void *__p[3];
  std::vector<unsigned int>::value_type __u[2];
  uint64_t v50;
  unsigned __int8 v51;
  std::vector<unsigned int>::value_type *v52;

  v2 = *((unsigned int *)this + 4);
  __u[0] = 0;
  std::vector<unsigned int>::assign((std::vector<unsigned int> *)((char *)this + 184), v2, __u);
  v3 = *((unsigned int *)this + 3);
  __u[0] = 0;
  std::vector<float>::assign((char **)this + 29, v3, __u);
  v4 = *((unsigned int *)this + 6);
  __u[0] = 0;
  std::vector<unsigned int>::assign((std::vector<unsigned int> *)((char *)this + 208), v4, __u);
  v5 = *((unsigned int *)this + 4);
  __u[0] = 0;
  std::vector<float>::assign((char **)this + 32, v5, __u);
  v6 = *((unsigned int *)this + 9);
  __u[0] = 0;
  std::vector<float>::assign((char **)this + 47, v6, __u);
  ecutils::fcn_vector_init<float>((uint64_t *)this + 50, *((_DWORD *)this + 4), *((_DWORD *)this + 9), 0.0);
  ecutils::fcn_vector_init<float>((uint64_t *)this + 53, *((_DWORD *)this + 3), *((_DWORD *)this + 9), 0.0);
  ecutils::fcn_vector_init<float>((uint64_t *)this + 62, *((_DWORD *)this + 3), *((_DWORD *)this + 9), 0.0);
  ecutils::fcn_vector_init<float>((uint64_t *)this + 65, *((_DWORD *)this + 3), *((_DWORD *)this + 9), 0.0);
  ecutils::fcn_vector_init<float>((uint64_t *)this + 68, *((_DWORD *)this + 3), *((_DWORD *)this + 9), 0.0);
  ecutils::fcn_vector_init<float>((uint64_t *)this + 71, *((_DWORD *)this + 3), *((_DWORD *)this + 9), 0.0);
  ecutils::fcn_vector_init<float>((uint64_t *)this + 74, *((_DWORD *)this + 3), 2 * *((_DWORD *)this + 9), 0.0);
  ecutils::fcn_vector_init<float>((uint64_t *)this + 77, *((_DWORD *)this + 3), *((_DWORD *)this + 10), 0.0);
  ecutils::fcn_vector_init<float>((uint64_t *)this + 116, *((_DWORD *)this + 3), *((_DWORD *)this + 10), 0.0);
  ecutils::fcn_vector_init<float>((uint64_t)this + 664, *((_DWORD *)this + 4), *((_DWORD *)this + 6), *((_DWORD *)this + 9), 0.0);
  ecutils::fcn_vector_init<float>((uint64_t)this + 688, *((_DWORD *)this + 4), *((_DWORD *)this + 6), *((_DWORD *)this + 10), 0.0);
  ecutils::fcn_vector_init<float>((uint64_t)this + 736, *((_DWORD *)this + 3), *((_DWORD *)this + 4), *((_DWORD *)this + 6), *((_DWORD *)this + 9), 0.0);
  ecutils::fcn_vector_init<float>((uint64_t)this + 760, *((_DWORD *)this + 3), *((_DWORD *)this + 4), *((_DWORD *)this + 6), *((_DWORD *)this + 10), *((float *)this + 30));
  ecutils::fcn_vector_init<float>((uint64_t)this + 784, *((_DWORD *)this + 3), *((_DWORD *)this + 4), *((_DWORD *)this + 6), *((_DWORD *)this + 9), 0.0);
  ecutils::fcn_vector_init<float>((uint64_t)this + 808, *((_DWORD *)this + 3), *((_DWORD *)this + 4), *((_DWORD *)this + 6), *((_DWORD *)this + 10), *((float *)this + 30));
  ecutils::fcn_vector_init<float>((uint64_t)this + 832, *((_DWORD *)this + 3), *((_DWORD *)this + 4), *((_DWORD *)this + 6), *((_DWORD *)this + 9), 0.0);
  ecutils::fcn_vector_init<float>((uint64_t)this + 856, *((_DWORD *)this + 3), *((_DWORD *)this + 4), *((_DWORD *)this + 6), *((_DWORD *)this + 10), 0.0);
  ecutils::fcn_vector_init<float>((uint64_t)this + 880, *((_DWORD *)this + 3), *((_DWORD *)this + 4), *((_DWORD *)this + 6), *((_DWORD *)this + 10), 0.0);
  v7 = *((unsigned int *)this + 3);
  v8 = *((unsigned int *)this + 4);
  v9 = *((unsigned int *)this + 6);
  v51 = 0;
  std::vector<BOOL>::vector(__p, v9, &v51);
  std::vector<std::vector<BOOL>>::vector(__u, v8, (uint64_t)__p);
  v10 = *((_QWORD *)this + 115);
  v11 = (uint64_t *)*((_QWORD *)this + 113);
  if (0xAAAAAAAAAAAAAAABLL * ((v10 - (uint64_t)v11) >> 3) >= v7)
  {
    v46 = (*((_QWORD *)this + 114) - (_QWORD)v11) / 24;
    v47 = v7;
    if (v46 < v7)
      v7 = (*((_QWORD *)this + 114) - (_QWORD)v11) / 24;
    for (; v7; --v7)
    {
      if (v11 != (uint64_t *)__u)
      {
        v24 = *(_QWORD *)__u;
        v23 = v50;
        v25 = v11[2];
        v26 = 0xAAAAAAAAAAAAAAABLL * ((v50 - *(_QWORD *)__u) >> 3);
        v27 = (void **)*v11;
        if (0xAAAAAAAAAAAAAAABLL * ((v25 - *v11) >> 3) >= v26)
        {
          v31 = (void **)v11[1];
          v32 = 0xAAAAAAAAAAAAAAABLL * (v31 - v27);
          if (v32 >= v26)
          {
            if (*(_QWORD *)__u != v50)
            {
              do
              {
                std::vector<BOOL>::operator=(v27, v24);
                v24 += 24;
                v27 += 3;
              }
              while (v24 != v23);
              v31 = (void **)v11[1];
            }
            while (v31 != v27)
            {
              v36 = *(v31 - 3);
              v31 -= 3;
              v35 = v36;
              if (v36)
                operator delete(v35);
            }
            v11[1] = (uint64_t)v27;
          }
          else
          {
            if (v31 != v27)
            {
              v33 = 8 * (v31 - v27);
              v34 = *(_QWORD *)__u;
              do
              {
                std::vector<BOOL>::operator=(v27, v34);
                v34 += 24;
                v27 += 3;
                v33 -= 24;
              }
              while (v33);
              v27 = (void **)v11[1];
            }
            v11[1] = (uint64_t)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::vector<BOOL>>,std::vector<BOOL>*,std::vector<BOOL>*,std::vector<BOOL>*>((uint64_t)(v11 + 2), v24 + 24 * v32, v23, v27);
          }
        }
        else
        {
          if (v27)
          {
            std::vector<std::vector<BOOL>>::__clear[abi:ne180100](v11);
            operator delete((void *)*v11);
            v25 = 0;
            *v11 = 0;
            v11[1] = 0;
            v11[2] = 0;
          }
          if (v26 > 0xAAAAAAAAAAAAAAALL)
            std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
          v28 = 0xAAAAAAAAAAAAAAABLL * (v25 >> 3);
          v29 = 2 * v28;
          if (2 * v28 <= v26)
            v29 = v26;
          if (v28 >= 0x555555555555555)
            v30 = 0xAAAAAAAAAAAAAAALL;
          else
            v30 = v29;
          std::vector<std::vector<BOOL>>::__vallocate[abi:ne180100](v11, v30);
          v11[1] = (uint64_t)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::vector<BOOL>>,std::vector<BOOL>*,std::vector<BOOL>*,std::vector<BOOL>*>((uint64_t)(v11 + 2), v24, v23, (_QWORD *)v11[1]);
        }
      }
      v11 += 3;
    }
    if (v47 <= v46)
    {
      v21 = *((_QWORD *)this + 113) + 24 * v47;
      v45 = (void **)*((_QWORD *)this + 114);
      while (v45 != (void **)v21)
      {
        v45 -= 3;
        v52 = (std::vector<unsigned int>::value_type *)v45;
        std::vector<std::vector<BOOL>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v52);
      }
    }
    else
    {
      v37 = (_QWORD *)*((_QWORD *)this + 114);
      v21 = (uint64_t)&v37[3 * (v47 - v46)];
      v38 = 24 * v47 - 24 * v46;
      do
      {
        *v37 = 0;
        v37[1] = 0;
        v37[2] = 0;
        std::vector<std::vector<BOOL>>::__init_with_size[abi:ne180100]<std::vector<BOOL>*,std::vector<BOOL>*>(v37, *(uint64_t *)__u, v50, 0xAAAAAAAAAAAAAAABLL * ((v50 - *(_QWORD *)__u) >> 3));
        v37 += 3;
        v38 -= 24;
      }
      while (v38);
    }
  }
  else
  {
    if (v11)
    {
      v12 = v7;
      v13 = (void **)((char *)this + 904);
      v14 = (void **)*((_QWORD *)this + 114);
      v15 = (void *)*((_QWORD *)this + 113);
      if (v14 != (void **)v11)
      {
        do
        {
          v14 -= 3;
          v52 = (std::vector<unsigned int>::value_type *)v14;
          std::vector<std::vector<BOOL>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v52);
        }
        while (v14 != (void **)v11);
        v15 = *v13;
      }
      *((_QWORD *)this + 114) = v11;
      operator delete(v15);
      v10 = 0;
      *v13 = 0;
      *((_QWORD *)this + 114) = 0;
      *((_QWORD *)this + 115) = 0;
      v7 = v12;
    }
    v16 = 0xAAAAAAAAAAAAAAABLL * (v10 >> 3);
    v17 = 2 * v16;
    v18 = v7;
    if (2 * v16 <= v7)
      v17 = v7;
    if (v16 >= 0x555555555555555)
      v19 = 0xAAAAAAAAAAAAAAALL;
    else
      v19 = v17;
    if (v19 > 0xAAAAAAAAAAAAAAALL)
      std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
    v20 = operator new(24 * v19);
    *((_QWORD *)this + 113) = v20;
    *((_QWORD *)this + 114) = v20;
    *((_QWORD *)this + 115) = &v20[3 * v19];
    v21 = (uint64_t)&v20[3 * v18];
    v22 = 24 * v18;
    do
    {
      *v20 = 0;
      v20[1] = 0;
      v20[2] = 0;
      std::vector<std::vector<BOOL>>::__init_with_size[abi:ne180100]<std::vector<BOOL>*,std::vector<BOOL>*>(v20, *(uint64_t *)__u, v50, 0xAAAAAAAAAAAAAAABLL * ((v50 - *(_QWORD *)__u) >> 3));
      v20 += 3;
      v22 -= 24;
    }
    while (v22);
  }
  *((_QWORD *)this + 114) = v21;
  v52 = __u;
  std::vector<std::vector<BOOL>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v52);
  if (__p[0])
    operator delete(__p[0]);
  *((_DWORD *)this + 43) = 0;
  *((_DWORD *)this + 44) = 0;
  ecMIMO::fcn_update_filter_fwd((uint64_t)this);
  if (*((_BYTE *)this + 8))
  {
    v39 = *((unsigned int *)this + 9);
    __u[0] = 0;
    std::vector<float>::assign((char **)this + 35, v39, __u);
    v40 = *((unsigned int *)this + 9);
    __u[0] = 0;
    std::vector<float>::assign((char **)this + 38, v40, __u);
    v41 = *((unsigned int *)this + 10);
    __u[0] = 0;
    std::vector<float>::assign((char **)this + 41, v41, __u);
    v42 = *((unsigned int *)this + 10);
    __u[0] = 0;
    std::vector<float>::assign((char **)this + 44, v42, __u);
    ecutils::fcn_vector_init<float>((uint64_t *)this + 56, *((_DWORD *)this + 3), *((_DWORD *)this + 9), 0.0);
    ecutils::fcn_vector_init<float>((uint64_t *)this + 59, *((_DWORD *)this + 3), *((_DWORD *)this + 9), 0.0);
    ecutils::fcn_vector_init<float>((uint64_t *)this + 80, *((_DWORD *)this + 4), *((_DWORD *)this + 10), 0.0);
    ecutils::fcn_vector_init<float>((uint64_t)this + 712, *((_DWORD *)this + 4), *((_DWORD *)this + 6), *((_DWORD *)this + 10), 0.0);
  }
  if (*((_DWORD *)this + 6) != 1)
  {
    v43 = 0;
    v44 = *((_QWORD *)this + 26);
    do
    {
      *(_DWORD *)(v44 + 4 * v43) = v43 + 1;
      ++v43;
    }
    while (v43 < (*((_DWORD *)this + 6) - 1));
  }
}

void sub_1B636071C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t ecMIMO::ec_init(ecMIMO *this, char a2, int a3, int a4, int a5, int a6, int a7, unsigned int a8, float a9, float a10, float a11, float a12, float a13, float a14, float a15, float a16, float a17, unsigned int a18, float a19, float a20,unsigned int a21,unsigned int a22,unsigned int a23)
{
  float v29;
  double v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float v35;
  float v36;
  float v37;
  float v38;
  float v39;
  float v40;
  unsigned int v41;
  unsigned int v42;
  unsigned int v43;
  unsigned int v44;
  vDSP_Length v45;
  float v46;

  *((_BYTE *)this + 8) = a2;
  *((_DWORD *)this + 3) = a3;
  *((_DWORD *)this + 4) = a4;
  *((_DWORD *)this + 5) = a5;
  *((_DWORD *)this + 7) = a6;
  *((_DWORD *)this + 8) = a7;
  *((_DWORD *)this + 11) = a8;
  *((_DWORD *)this + 12) = a8 >> 1;
  *((float *)this + 14) = __exp10f(a9 / 10.0);
  *((float *)this + 15) = __exp10f(a10 / 10.0);
  *((float *)this + 16) = a11;
  *((float *)this + 37) = a20;
  v29 = 0.0;
  v30 = (float)((float)*((unsigned int *)this + 11) / (float)*((unsigned int *)this + 7));
  v31 = 0.0;
  if (a12 > 0.0)
  {
    v32 = -v30 / a12;
    v31 = expf(v32);
  }
  *((float *)this + 17) = v31;
  if (a14 > 0.0)
  {
    v33 = -v30 / a14;
    v29 = expf(v33);
  }
  *((float *)this + 21) = v29;
  v34 = 0.0;
  if (a13 > 0.0)
  {
    v35 = -v30 / a13;
    v34 = expf(v35);
  }
  *((float *)this + 20) = v34;
  *((float *)this + 23) = __exp10f(a15 / 10.0);
  *((float *)this + 34) = a17;
  *((float *)this + 35) = a16;
  *((_DWORD *)this + 26) = a18;
  *((float *)this + 30) = __exp10f(a19 / 10.0);
  *(_QWORD *)((char *)this + 124) = 1056964608;
  *((_DWORD *)this + 33) = 507307272;
  v36 = *((float *)this + 16);
  v37 = 1.0 - *((float *)this + 17);
  v38 = 1.0 - (float)(v37 * v36);
  *((float *)this + 17) = v38;
  *((float *)this + 18) = -(float)(v37 * v36);
  v39 = sqrtf(v38);
  if (v38 <= 0.0)
    v39 = 0.0;
  *((float *)this + 19) = v39;
  v40 = *((float *)this + 20);
  *((float *)this + 22) = 1.0 - *((float *)this + 21);
  *((float *)this + 36) = 1.0 - v40;
  *((_DWORD *)this + 24) = *((_DWORD *)this + 23);
  *((_DWORD *)this + 25) = 1056964608;
  v41 = *((_DWORD *)this + 11);
  v42 = vcvtps_u32_f32((float)*((unsigned int *)this + 8) / (float)v41);
  *((_DWORD *)this + 6) = v42;
  v43 = vcvtps_u32_f32((float)a21 / (float)v41);
  *((_DWORD *)this + 8) = v41 * v42;
  *((_DWORD *)this + 38) = v41 * v43;
  *((_DWORD *)this + 39) = v43;
  v44 = *((_DWORD *)this + 3);
  if (*((_BYTE *)this + 8))
  {
    v44 -= *((_DWORD *)this + 5) >> 1;
    if (v44 >= a22)
      v44 = a22;
  }
  *((_DWORD *)this + 40) = v44;
  *((_DWORD *)this + 42) = a23;
  *((_DWORD *)this + 9) = 2 * v41;
  *((_DWORD *)this + 10) = v41 + 1;
  MultiRadixRealFFT_Create(2 * v41, (MultiRadixRealFFT **)this + 119);
  MultiRadixFFT_Create(*((_DWORD *)this + 9), (_QWORD *)this + 120);
  v45 = *((unsigned int *)this + 9);
  v46 = 1.0 / (float)v45;
  *((float *)this + 27) = v46;
  *((float *)this + 28) = v46 * 0.5;
  *((_DWORD *)this + 29) = 1065353216;
  *((_QWORD *)this + 121) = vDSP_DFT_zrop_CreateSetup(*((vDSP_DFT_Setup *)this + 121), v45, vDSP_DFT_FORWARD);
  *((_QWORD *)this + 122) = vDSP_DFT_zrop_CreateSetup(*((vDSP_DFT_Setup *)this + 122), *((unsigned int *)this + 9), vDSP_DFT_INVERSE);
  return (*(uint64_t (**)(ecMIMO *))(*(_QWORD *)this + 16))(this);
}

uint64_t ecMIMO::ec_proc(ecMIMO *this, const AudioBufferList *a2, const AudioBufferList *a3, const AudioBufferList *a4, AudioBufferList *a5, AudioBufferList *a6, AudioBufferList *a7, int a8)
{
  unint64_t v10;
  unint64_t v11;
  void *mData;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  MultiRadixRealFFT *v17;
  uint64_t v18;
  float *v19;
  uint64_t v20;
  float *v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  float v26;
  uint64_t v27;
  unint64_t v28;
  void **p_mData;
  void *v30;
  float *v31;
  MultiRadixRealFFT *v32;
  uint64_t v33;
  unint64_t v34;
  int v35;
  unint64_t v36;
  uint64_t v37;
  float *v38;
  float *v39;
  uint64_t v40;
  uint64_t v41;
  vDSP_Length v42;
  float *v43;
  float *v44;
  float *v45;
  uint64_t v46;
  float *v47;
  float *v48;
  uint64_t v49;
  float *v50;
  float *v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  void **v55;
  void *v56;
  float32x2_t v57;
  float32x2_t v58;
  unint64_t v59;
  unint64_t v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  float *v65;
  uint64_t v66;
  unint64_t v67;
  float v68;
  uint64_t v69;
  float *v70;
  uint64_t v71;
  int v72;
  uint64_t v73;
  uint64_t v74;
  float *v75;
  float *v76;
  float *v77;
  float *v78;
  vDSP_Length v79;
  vDSP_Length v80;
  float *v81;
  MultiRadixRealFFT *v82;
  float *v83;
  unsigned int v84;
  uint64_t v85;
  int v86;
  unint64_t v87;
  float *v88;
  unint64_t v89;
  uint64_t v90;
  float *v91;
  float *v92;
  uint64_t v93;
  uint64_t v94;
  unint64_t v95;
  uint64_t v96;
  unsigned int v97;
  uint64_t v98;
  int v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  float *v104;
  float *v105;
  float *v106;
  uint64_t v107;
  float *v108;
  uint64_t v109;
  _QWORD *v110;
  uint64_t v111;
  _QWORD *v112;
  uint64_t v113;
  float *v114;
  float *v115;
  float *v116;
  float *v117;
  float *v118;
  float *v119;
  float *v120;
  float *v121;
  vDSP_Length v122;
  vDSP_Length v123;
  float *v124;
  MultiRadixRealFFT *v125;
  float *v126;
  unint64_t v127;
  uint64_t v128;
  float *v129;
  unint64_t v130;
  uint64_t v131;
  uint64_t v132;
  unint64_t v133;
  unsigned int v134;
  float *v135;
  float *v136;
  uint64_t v137;
  uint64_t v138;
  float *v139;
  float *v140;
  float *v141;
  float *v142;
  unint64_t v143;
  uint64_t v144;
  unint64_t v145;
  void **v146;
  const float **v147;
  void **v148;
  unsigned int v149;
  uint64_t v150;
  vDSP_Length v151;
  void *v152;
  const float *v153;
  void *v154;
  size_t v155;
  void *v156;
  const float *v157;
  uint64_t v158;
  unsigned int v159;
  uint64_t v160;
  float **v161;
  float **v162;
  float *v163;
  float *v164;
  float *v165;
  unint64_t v166;
  void **v167;
  void **v168;
  void **v169;
  void *v170;
  void *v171;
  const void *v172;
  void *v173;
  float *v174;
  unsigned int v180;
  float *v181;
  float *v182;
  float *v183;
  float *v185;
  float *v186;
  float *v187;
  float *v189;
  unsigned int v190;
  float *v191;
  float __C;
  uint64_t v193;
  DSPSplitComplex v194;
  DSPSplitComplex v195;
  DSPSplitComplex __B;
  DSPSplitComplex v197;
  DSPSplitComplex v198;
  DSPSplitComplex v199;
  DSPSplitComplex v200;
  DSPSplitComplex __D;
  DSPSplitComplex v202;
  DSPSplitComplex v203;
  DSPSplitComplex __A;

  v193 = 0;
  __C = 0.0;
  bzero(*((void **)this + 23), 4 * *((unsigned int *)this + 4));
  LODWORD(v10) = *((_DWORD *)this + 4);
  if ((_DWORD)v10)
  {
    v11 = 0;
    v180 = 0;
    do
    {
      mData = a3->mBuffers[v11].mData;
      v13 = *(char **)(*((_QWORD *)this + 50) + 24 * v11);
      memcpy(v13, &v13[4 * *((unsigned int *)this + 11)], 4 * *((unsigned int *)this + 11));
      memcpy((void *)(*(_QWORD *)(*((_QWORD *)this + 50) + 24 * v11) + 4 * *((unsigned int *)this + 11)), mData, 4 * *((unsigned int *)this + 11));
      v14 = *((_QWORD *)this + 83);
      v15 = *((unsigned int *)this + 13);
      v16 = *((unsigned int *)this + 11);
      v203.realp = *(float **)(*(_QWORD *)(v14 + 24 * v11) + 24 * v15);
      v203.imagp = &v203.realp[v16];
      v17 = (MultiRadixRealFFT *)*((_QWORD *)this + 119);
      if (v17)
      {
        MultiRadixRealFFT::RealOutOfPlaceForwardTransform(v17, *(DSPComplex **)(*((_QWORD *)this + 50) + 24 * v11), &v203, 1.0);
        v14 = *((_QWORD *)this + 83);
        v15 = *((unsigned int *)this + 13);
        v16 = *((unsigned int *)this + 11);
      }
      v18 = 3 * v15;
      v19 = *(float **)(*(_QWORD *)(v14 + 24 * v11) + 8 * v18);
      if (*((_BYTE *)this + 8))
        v20 = 712;
      else
        v20 = 688;
      v21 = *(float **)(*(_QWORD *)(*(_QWORD *)((char *)this + v20) + 24 * v11) + 8 * v18);
      __A.realp = v19 + 1;
      __A.imagp = &v19[(v16 + 1)];
      vDSP_zvmags(&__A, 1, v21 + 1, 1, (v16 - 1));
      *v21 = *v19 * *v19;
      v21[v16] = v19[v16] * v19[v16];
      *(_DWORD *)(*((_QWORD *)this + 32) + 4 * v11) = 0;
      if (*((_DWORD *)this + 6))
      {
        v22 = 0;
        v23 = 0;
        do
        {
          if (*((_BYTE *)this + 8))
            v24 = 712;
          else
            v24 = 688;
          vDSP_meanv(*(const float **)(*(_QWORD *)(*(_QWORD *)((char *)this + v24) + 24 * v11) + v22), 1, &__C, *((unsigned int *)this + 10));
          *(float *)(*((_QWORD *)this + 32) + 4 * v11) = *(float *)(*((_QWORD *)this + 32) + 4 * v11) + __C;
          ++v23;
          v22 += 24;
        }
        while (v23 < *((unsigned int *)this + 6));
      }
      memcpy(a7->mBuffers[v11].mData, mData, 4 * *((unsigned int *)this + 11));
      v25 = *((_QWORD *)this + 32);
      v26 = *((float *)this + 33)
          + (float)(*(float *)(v25 + 4 * v11) / (float)(*((_DWORD *)this + 6) * *((_DWORD *)this + 9)));
      *(float *)(v25 + 4 * v11) = v26;
      if ((float)(log10f(v26) * 10.0) > *((float *)this + 37))
        *(_DWORD *)(*((_QWORD *)this + 23) + 4 * v180++) = v11;
      ++v11;
      v10 = *((unsigned int *)this + 4);
    }
    while (v11 < v10);
  }
  else
  {
    v180 = 0;
  }
  if (*((_BYTE *)this + 8))
  {
    if (*((_DWORD *)this + 5))
    {
      v27 = 0;
      v28 = 0;
      p_mData = &a4->mBuffers[0].mData;
      do
      {
        v30 = *p_mData;
        memcpy(*(void **)(*((_QWORD *)this + 56) + v27), (const void *)(*(_QWORD *)(*((_QWORD *)this + 56) + v27) + 4 * *((unsigned int *)this + 11)), 4 * *((unsigned int *)this + 11));
        memcpy((void *)(*(_QWORD *)(*((_QWORD *)this + 56) + v27) + 4 * *((unsigned int *)this + 11)), v30, 4 * *((unsigned int *)this + 11));
        v31 = (float *)(*(_QWORD *)(*((_QWORD *)this + 59) + v27) + 4 * *((unsigned int *)this + 11));
        v198.realp = *(float **)(*((_QWORD *)this + 59) + v27);
        v198.imagp = v31;
        v32 = (MultiRadixRealFFT *)*((_QWORD *)this + 119);
        if (v32)
          MultiRadixRealFFT::RealOutOfPlaceForwardTransform(v32, *(DSPComplex **)(*((_QWORD *)this + 56) + v27), &v198, 1.0);
        ++v28;
        v27 += 24;
        p_mData += 2;
      }
      while (v28 < *((unsigned int *)this + 5));
      LODWORD(v10) = *((_DWORD *)this + 4);
    }
    if ((_DWORD)v10)
    {
      v33 = 0;
      v34 = 0;
      v35 = -1;
      do
      {
        v36 = *((unsigned int *)this + 5);
        if (v34 >= v36 >> 1)
        {
          v50 = *(float **)(*(_QWORD *)(*((_QWORD *)this + 83) + v33) + 24 * *((unsigned int *)this + 13));
          v51 = *(float **)(*(_QWORD *)(*((_QWORD *)this + 86) + v33) + 24 * *((unsigned int *)this + 13));
          v52 = *((unsigned int *)this + 11);
          __A.realp = v50 + 1;
          __A.imagp = &v50[(v52 + 1)];
          vDSP_zvmags(&__A, 1, v51 + 1, 1, (v52 - 1));
          *v51 = *v50 * *v50;
          v51[v52] = v50[v52] * v50[v52];
          LODWORD(__A.realp) = 1065353216;
          vDSP_vfill((const float *)&__A, *(float **)(*((_QWORD *)this + 80) + v33), 1, *((unsigned int *)this + 10));
        }
        else
        {
          v37 = 24 * (v35 + (int)v36);
          memcpy(*(void **)(*(_QWORD *)(*((_QWORD *)this + 83) + v33) + 24 * *((unsigned int *)this + 13)), *(const void **)(*((_QWORD *)this + 59) + v37), 4 * *((unsigned int *)this + 9));
          v38 = *(float **)(*(_QWORD *)(*((_QWORD *)this + 83) + v33) + 24 * *((unsigned int *)this + 13));
          v39 = *(float **)(*(_QWORD *)(*((_QWORD *)this + 86) + v33) + 24 * *((unsigned int *)this + 13));
          v40 = *((unsigned int *)this + 11);
          __A.realp = v38 + 1;
          __A.imagp = &v38[(v40 + 1)];
          vDSP_zvmags(&__A, 1, v39 + 1, 1, (v40 - 1));
          *v39 = *v38 * *v38;
          v39[v40] = v38[v40] * v38[v40];
          v41 = *((_QWORD *)this + 59);
          v42 = *((unsigned int *)this + 11);
          v43 = (float *)(*(_QWORD *)(v41 + v37) + 4 * v42);
          v197.realp = *(float **)(v41 + v37);
          v197.imagp = v43;
          __B.realp = *(float **)(v41 + v33);
          __B.imagp = &__B.realp[v42];
          v195.realp = (float *)*((_QWORD *)this + 35);
          v195.imagp = &v195.realp[v42];
          v194.realp = (float *)*((_QWORD *)this + 38);
          v194.imagp = &v194.realp[v42];
          vDSP_zvadd(&v197, 1, &__B, 1, &v195, 1, v42);
          vDSP_zvsub(&v197, 1, &__B, 1, &v194, 1, *((unsigned int *)this + 11));
          v44 = (float *)*((_QWORD *)this + 35);
          v45 = (float *)*((_QWORD *)this + 41);
          v46 = *((unsigned int *)this + 11);
          __A.realp = v44 + 1;
          __A.imagp = &v44[(v46 + 1)];
          vDSP_zvmags(&__A, 1, v45 + 1, 1, (v46 - 1));
          *v45 = *v44 * *v44;
          v45[v46] = v44[v46] * v44[v46];
          v47 = (float *)*((_QWORD *)this + 38);
          v48 = (float *)*((_QWORD *)this + 44);
          v49 = *((unsigned int *)this + 11);
          __A.realp = v47 + 1;
          __A.imagp = &v47[(v49 + 1)];
          vDSP_zvmags(&__A, 1, v48 + 1, 1, (v49 - 1));
          *v48 = *v47 * *v47;
          v48[v49] = v47[v49] * v47[v49];
          vDSP_vthr(*((const float **)this + 41), 1, (const float *)this + 33, *((float **)this + 41), 1, *((unsigned int *)this + 10));
          vDSP_vthr(*((const float **)this + 44), 1, (const float *)this + 33, *((float **)this + 44), 1, *((unsigned int *)this + 10));
          vDSP_vdiv(*((const float **)this + 41), 1, *((const float **)this + 44), 1, *(float **)(*((_QWORD *)this + 80) + v33), 1, *((unsigned int *)this + 10));
          vDSP_vclip(*(const float **)(*((_QWORD *)this + 80) + v33), 1, (const float *)this + 33, (const float *)this + 29, *(float **)(*((_QWORD *)this + 80) + v33), 1, *((unsigned int *)this + 10));
          LODWORD(__A.realp) = *((_DWORD *)this + 10);
          vvsqrtf(*(float **)(*((_QWORD *)this + 80) + v33), *(const float **)(*((_QWORD *)this + 80) + v33), (const int *)&__A);
        }
        ++v34;
        v33 += 24;
        --v35;
      }
      while (v34 < *((unsigned int *)this + 4));
    }
  }
  if (!v180)
  {
    if (*((_DWORD *)this + 3))
    {
      v166 = 0;
      v167 = &a6->mBuffers[0].mData;
      v168 = &a2->mBuffers[0].mData;
      v169 = &a5->mBuffers[0].mData;
      do
      {
        v171 = *v169;
        v169 += 2;
        v170 = v171;
        v173 = *v168;
        v168 += 2;
        v172 = v173;
        v174 = (float *)*v167;
        v167 += 2;
        memcpy(v170, v172, 4 * *((unsigned int *)this + 11));
        vDSP_vclr(v174, 1, *((unsigned int *)this + 11));
        ++v166;
      }
      while (v166 < *((unsigned int *)this + 3));
    }
    ecMIMO::fcn_ring_buffer_fwd((uint64_t)this, (uint64_t *)this + 26);
    *((_BYTE *)this + 164) = 0;
    return 0;
  }
  *((_BYTE *)this + 164) = 1;
  if (*((_DWORD *)this + 3))
  {
    v53 = 0;
    v54 = 0;
    v55 = &a2->mBuffers[0].mData;
    do
    {
      v56 = *v55;
      v55 += 2;
      memcpy((void *)(*(_QWORD *)(*((_QWORD *)this + 53) + v53) + 4 * *((unsigned int *)this + 11)), v56, 4 * *((unsigned int *)this + 11));
      ++v54;
      v53 += 24;
    }
    while (v54 < *((unsigned int *)this + 3));
  }
  v57 = *(float32x2_t *)((char *)this + 140);
  v58.i32[0] = vdup_lane_s32((int32x2_t)v57, 1).u32[0];
  v58.i32[1] = *((_DWORD *)this + 34);
  *((float32x2_t *)this + 12) = vmla_n_f32(vmul_f32(v57, v58), *(float32x2_t *)((char *)this + 96), *((float *)this + 20));
  LODWORD(v59) = *((_DWORD *)this + 40);
  if ((_DWORD)v59)
  {
    v60 = 0;
    if (v180 <= 1)
      v61 = 1;
    else
      v61 = v180;
    v185 = (float *)v61;
    do
    {
      vDSP_vclr(*(float **)(*((_QWORD *)this + 77) + 24 * v60), 1, *((unsigned int *)this + 10));
      vDSP_vclr(*(float **)(*((_QWORD *)this + 62) + 24 * v60), 1, *((unsigned int *)this + 9));
      v62 = 0;
      do
      {
        v63 = *((_QWORD *)this + 23);
        if (v62 >= (*((_QWORD *)this + 24) - v63) >> 2)
LABEL_116:
          std::vector<std::vector<float>>::__throw_out_of_range[abi:ne180100]();
        v189 = (float *)v62;
        v64 = *(unsigned int *)(v63 + 4 * v62);
        if (!(_DWORD)v64 || (v65 = (float *)((char *)this + 60), v64 >= *((_DWORD *)this + 4) - 1))
          v65 = (float *)((char *)this + 56);
        if (*((_DWORD *)this + 6))
        {
          v66 = 0;
          v67 = 0;
          v68 = *v65;
          do
          {
            v69 = *(unsigned int *)(*((_QWORD *)this + 26) + 4 * v67);
            v70 = *(float **)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 92) + 24 * v60) + 24 * v64) + v66);
            vDSP_vsmul(v70, 1, (const float *)this + 19, v70, 1, *((unsigned int *)this + 9));
            v69 *= 3;
            v71 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 83) + 24 * v64) + 8 * v69);
            v72 = *((_DWORD *)this + 11);
            v203.realp = (float *)(v71 + 4);
            v203.imagp = (float *)(v71 + 4 * (v72 + 1));
            v73 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 92) + 24 * v60) + 24 * v64) + v66);
            __D.realp = (float *)(v73 + 4);
            __D.imagp = (float *)(v73 + 4 * (v72 + 1));
            v74 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 104) + 24 * v60) + 24 * v64) + v66);
            v202.realp = (float *)(v74 + 4);
            v202.imagp = (float *)(v74 + 4 * (v72 + 1));
            vDSP_zvmul(&v203, 1, &__D, 1, &v202, 1, (v72 - 1), 1);
            v75 = *(float **)(*(_QWORD *)(*((_QWORD *)this + 83) + 24 * v64) + 8 * v69);
            v76 = *(float **)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 92) + 24 * v60) + 24 * v64) + v66);
            v77 = *(float **)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 104) + 24 * v60) + 24 * v64) + v66);
            *v77 = *v75 * *v76;
            v77[*((unsigned int *)this + 11)] = v75[*((unsigned int *)this + 11)] * v76[*((unsigned int *)this + 11)];
            v78 = *(float **)(*((_QWORD *)this + 62) + 24 * v60);
            vDSP_vadd(v77, 1, v78, 1, v78, 1, *((unsigned int *)this + 9));
            ecutils::fcn_smooth_psd(*(ecutils **)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 95) + 24 * v60) + 24 * v64) + v66), *(const float **)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 101) + 24 * v60) + 24 * v64) + v66), *((float *)this + 17), *((float *)this + 18), (float *)1, v68, *((_DWORD *)this + 10));
            vDSP_vmul(*(const float **)(*(_QWORD *)(*((_QWORD *)this + 86) + 24 * v64) + 8 * v69), 1, *(const float **)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 95) + 24 * v60) + 24 * v64) + v66), 1, *(float **)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 110) + 24 * v60) + 24 * v64) + v66), 1, *((unsigned int *)this + 10));
            vDSP_vadd(*(const float **)(*((_QWORD *)this + 77) + 24 * v60), 1, *(const float **)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 110) + 24 * v60) + 24 * v64) + v66), 1, *(float **)(*((_QWORD *)this + 77) + 24 * v60), 1, *((unsigned int *)this + 10));
            ecutils::fcn_complex_mult_by_psd(*(ecutils **)(*(_QWORD *)(*((_QWORD *)this + 83) + 24 * v64) + 8 * v69), *(const float **)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 95) + 24 * v60) + 24 * v64) + v66), *(float **)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 98) + 24 * v60) + 24 * v64) + v66), *((unsigned int *)this + 11));
            if (*((_BYTE *)this + 8))
              ecutils::fcn_complex_mult_by_psd(*(ecutils **)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 98) + 24 * v60) + 24 * v64) + v66), *(const float **)(*((_QWORD *)this + 80) + 24 * v64), *(float **)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 98) + 24 * v60) + 24 * v64) + v66), *((unsigned int *)this + 11));
            ++v67;
            v66 += 24;
          }
          while (v67 < *((unsigned int *)this + 6));
        }
        v62 = (unint64_t)v189 + 1;
      }
      while ((float *)((char *)v189 + 1) != v185);
      v79 = *((unsigned int *)this + 11);
      __A.realp = *(float **)(*((_QWORD *)this + 62) + 24 * v60);
      __A.imagp = &__A.realp[v79];
      ecutils::fcn_otplace_fftReal_inverse(*((const vDSP_DFT_SetupStruct ****)this + 119), &__A, *(DSPComplex **)(*((_QWORD *)this + 68) + 24 * v60), v79, *((float *)this + 27));
      v80 = *((unsigned int *)this + 11);
      vDSP_vsub((const float *)(*(_QWORD *)(*((_QWORD *)this + 68) + 24 * v60) + 4 * v80), 1, (const float *)(*(_QWORD *)(*((_QWORD *)this + 53) + 24 * v60) + 4 * v80), 1, (float *)(*(_QWORD *)(*((_QWORD *)this + 65) + 24 * v60) + 4 * v80), 1, v80);
      v81 = (float *)(*(_QWORD *)(*((_QWORD *)this + 71) + 24 * v60) + 4 * *((unsigned int *)this + 11));
      v200.realp = *(float **)(*((_QWORD *)this + 71) + 24 * v60);
      v200.imagp = v81;
      v82 = (MultiRadixRealFFT *)*((_QWORD *)this + 119);
      if (v82)
        MultiRadixRealFFT::RealOutOfPlaceForwardTransform(v82, *(DSPComplex **)(*((_QWORD *)this + 65) + 24 * v60), &v200, 1.0);
      v83 = (float *)(*(_QWORD *)(*((_QWORD *)this + 74) + 24 * v60) + 4 * *((unsigned int *)this + 9));
      v199.realp = *(float **)(*((_QWORD *)this + 74) + 24 * v60);
      v199.imagp = v83;
      ecMIMO::fcn_hilbert_transform(this, (int64x2_t *)&v200, (float *)(*((_QWORD *)this + 29) + 4 * v60++), *((_QWORD **)this + 120), &v199);
      v59 = *((unsigned int *)this + 40);
    }
    while (v60 < v59);
  }
  v84 = *((_DWORD *)this + 26);
  if (!v84)
    goto LABEL_81;
  v190 = 0;
  v186 = (float *)((char *)this + 112);
  if (v180 <= 1)
    v85 = 1;
  else
    v85 = v180;
  v181 = (float *)v85;
  v86 = v59;
  do
  {
    if (!v86)
      goto LABEL_80;
    v87 = 0;
    do
    {
      vDSP_vsadd(*(const float **)(*((_QWORD *)this + 77) + 24 * v87), 1, (const float *)(*((_QWORD *)this + 29) + 4 * v87), *(float **)(*((_QWORD *)this + 116) + 24 * v87), 1, *((unsigned int *)this + 10));
      v88 = *(float **)(*((_QWORD *)this + 116) + 24 * v87);
      vDSP_svdiv((const float *)this + 25, v88, 1, v88, 1, *((unsigned int *)this + 10));
      ecutils::fcn_complex_mult_by_psd(*(ecutils **)(*((_QWORD *)this + 71) + 24 * v87), *(const float **)(*((_QWORD *)this + 116) + 24 * v87), *(float **)(*((_QWORD *)this + 71) + 24 * v87), *((unsigned int *)this + 11));
      vDSP_vclr(*(float **)(*((_QWORD *)this + 62) + 24 * v87), 1, *((unsigned int *)this + 9));
      v89 = 0;
      v90 = *(_QWORD *)(*((_QWORD *)this + 62) + 24 * v87);
      v91 = (float *)(v90 + 4);
      v92 = (float *)(v90 + 4 * (*((_DWORD *)this + 11) + 1));
      __A.realp = v91;
      __A.imagp = v92;
      do
      {
        v93 = *((_QWORD *)this + 23);
        if (v89 >= (*((_QWORD *)this + 24) - v93) >> 2)
          goto LABEL_116;
        v182 = (float *)v89;
        if (*((_DWORD *)this + 6))
        {
          v94 = 0;
          v95 = 0;
          v96 = *(unsigned int *)(v93 + 4 * v89);
          do
          {
            v97 = *(_DWORD *)(*((_QWORD *)this + 26) + 4 * v95);
            v98 = *((_QWORD *)this + 113);
            v99 = *((_DWORD *)this + 11);
            v100 = *((_QWORD *)this + 92);
            if ((*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v98 + 24 * v87) + 24 * v96) + 8 * (v95 >> 6)) & (1 << v95)) != 0)
            {
              v101 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 98) + 24 * v87) + 24 * v96) + v94);
              v203.realp = (float *)(v101 + 4);
              v203.imagp = (float *)(v101 + 4 * (v99 + 1));
              v102 = *(_QWORD *)(*((_QWORD *)this + 71) + 24 * v87);
              v200.realp = (float *)(v102 + 4);
              v200.imagp = (float *)(v102 + 4 * (v99 + 1));
              v103 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v100 + 24 * v87) + 24 * v96) + v94);
              __D.realp = (float *)(v103 + 4);
              __D.imagp = (float *)(v103 + 4 * (v99 + 1));
              vDSP_zvcma(&v203, 1, &v200, 1, &__D, 1, &__D, 1, (v99 - 1));
              v104 = *(float **)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 98) + 24 * v87) + 24 * v96) + v94);
              v105 = *(float **)(*((_QWORD *)this + 71) + 24 * v87);
              v106 = *(float **)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 92) + 24 * v87) + 24 * v96) + v94);
              *v106 = *v106 + (float)(*v104 * *v105);
              v107 = *((unsigned int *)this + 11);
              v108 = &v106[v107];
              *v108 = *v108 + (float)(v104[v107] * v105[v107]);
              __D.realp = v106;
              __D.imagp = v108;
              vDSP_DFT_Execute(*((const vDSP_DFT_SetupStruct **)this + 122), v106, v108, v106, v108);
              vDSP_vclr(&__D.realp[*((unsigned int *)this + 12)], 1, *((unsigned int *)this + 12));
              vDSP_vclr(&__D.imagp[*((unsigned int *)this + 12)], 1, *((unsigned int *)this + 12));
              vDSP_vsmul(__D.realp, 1, v186, __D.realp, 1, *((unsigned int *)this + 12));
              vDSP_vsmul(__D.imagp, 1, v186, __D.imagp, 1, *((unsigned int *)this + 12));
              vDSP_DFT_Execute(*((const vDSP_DFT_SetupStruct **)this + 121), __D.realp, __D.imagp, __D.realp, __D.imagp);
              v99 = *((_DWORD *)this + 11);
              v100 = *((_QWORD *)this + 92);
              v98 = *((_QWORD *)this + 113);
            }
            v109 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 83) + 24 * v96) + 24 * v97);
            v203.realp = (float *)(v109 + 4);
            v203.imagp = (float *)(v109 + 4 * (v99 + 1));
            v110 = (_QWORD *)(v100 + 24 * v87);
            v111 = *(_QWORD *)(*(_QWORD *)(*v110 + 24 * v96) + v94);
            __D.realp = (float *)(v111 + 4);
            __D.imagp = (float *)(v111 + 4 * (v99 + 1));
            v112 = (_QWORD *)(*((_QWORD *)this + 104) + 24 * v87);
            v113 = *(_QWORD *)(*(_QWORD *)(*v112 + 24 * v96) + v94);
            v202.realp = (float *)(v113 + 4);
            v202.imagp = (float *)(v113 + 4 * (v99 + 1));
            if ((*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v98 + 24 * v87) + 24 * v96) + 8 * (v95 >> 6)) & (1 << v95)) != 0)
            {
              if (v190 != *((_DWORD *)this + 26) - 1)
              {
                v118 = *(float **)(*(_QWORD *)(*v110 + 24 * v96) + v94);
                vDSP_vsmul(v118, 1, (const float *)this + 19, v118, 1, *((unsigned int *)this + 9));
                vDSP_zvma(&v203, 1, &__D, 1, &__A, 1, &__A, 1, (*((_DWORD *)this + 11) - 1));
                v119 = *(float **)(*(_QWORD *)(*((_QWORD *)this + 83) + 24 * v96) + 24 * v97);
                v120 = *(float **)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 92) + 24 * v87) + 24 * v96) + v94);
                v121 = *(float **)(*((_QWORD *)this + 62) + 24 * v87);
                *v121 = *v121 + (float)(*v119 * *v120);
                v121[*((unsigned int *)this + 11)] = v121[*((unsigned int *)this + 11)]
                                                   + (float)(v119[*((unsigned int *)this + 11)]
                                                           * v120[*((unsigned int *)this + 11)]);
                goto LABEL_74;
              }
              vDSP_zvmul(&v203, 1, &__D, 1, &v202, 1, (v99 - 1), 1);
              v114 = *(float **)(*(_QWORD *)(*((_QWORD *)this + 83) + 24 * v96) + 24 * v97);
              v115 = *(float **)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 92) + 24 * v87) + 24 * v96) + v94);
              v116 = *(float **)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 104) + 24 * v87) + 24 * v96) + v94);
              *v116 = *v114 * *v115;
              v116[*((unsigned int *)this + 11)] = v114[*((unsigned int *)this + 11)]
                                                 * v115[*((unsigned int *)this + 11)];
              v117 = *(float **)(*((_QWORD *)this + 62) + 24 * v87);
            }
            else
            {
              v116 = *(float **)(*(_QWORD *)(*v112 + 24 * v96) + v94);
              v117 = *(float **)(*((_QWORD *)this + 62) + 24 * v87);
            }
            vDSP_vadd(v116, 1, v117, 1, v117, 1, *((unsigned int *)this + 9));
LABEL_74:
            ++v95;
            v94 += 24;
          }
          while (v95 < *((unsigned int *)this + 6));
        }
        v89 = (unint64_t)v182 + 1;
      }
      while ((float *)((char *)v182 + 1) != v181);
      v122 = *((unsigned int *)this + 11);
      __A.realp = *(float **)(*((_QWORD *)this + 62) + 24 * v87);
      __A.imagp = &__A.realp[v122];
      ecutils::fcn_otplace_fftReal_inverse(*((const vDSP_DFT_SetupStruct ****)this + 119), &__A, *(DSPComplex **)(*((_QWORD *)this + 68) + 24 * v87), v122, *((float *)this + 27));
      v123 = *((unsigned int *)this + 11);
      vDSP_vsub((const float *)(*(_QWORD *)(*((_QWORD *)this + 68) + 24 * v87) + 4 * v123), 1, (const float *)(*(_QWORD *)(*((_QWORD *)this + 53) + 24 * v87) + 4 * v123), 1, (float *)(*(_QWORD *)(*((_QWORD *)this + 65) + 24 * v87) + 4 * v123), 1, v123);
      v124 = (float *)(*(_QWORD *)(*((_QWORD *)this + 71) + 24 * v87) + 4 * *((unsigned int *)this + 11));
      v200.realp = *(float **)(*((_QWORD *)this + 71) + 24 * v87);
      v200.imagp = v124;
      v125 = (MultiRadixRealFFT *)*((_QWORD *)this + 119);
      if (v125)
        MultiRadixRealFFT::RealOutOfPlaceForwardTransform(v125, *(DSPComplex **)(*((_QWORD *)this + 65) + 24 * v87), &v200, 1.0);
      v126 = (float *)(*(_QWORD *)(*((_QWORD *)this + 74) + 24 * v87) + 4 * *((unsigned int *)this + 9));
      v199.realp = *(float **)(*((_QWORD *)this + 74) + 24 * v87);
      v199.imagp = v126;
      ecMIMO::fcn_hilbert_transform(this, (int64x2_t *)&v200, (float *)(*((_QWORD *)this + 29) + 4 * v87++), *((_QWORD **)this + 120), &v199);
      v59 = *((unsigned int *)this + 40);
    }
    while (v87 < v59);
    v84 = *((_DWORD *)this + 26);
    v86 = *((_DWORD *)this + 40);
LABEL_80:
    ++v190;
  }
  while (v190 < v84);
  if (!(_DWORD)v59)
    goto LABEL_105;
LABEL_81:
  v127 = 0;
  v128 = v180 <= 1 ? 1 : v180;
  v183 = (float *)v128;
  do
  {
    v129 = *(float **)(*((_QWORD *)this + 116) + 24 * v127);
    vDSP_vsmul(v129, 1, (const float *)this + 31, v129, 1, *((unsigned int *)this + 10));
    v130 = 0;
    do
    {
      v131 = *((_QWORD *)this + 23);
      if (v130 >= (*((_QWORD *)this + 24) - v131) >> 2)
        goto LABEL_116;
      v187 = (float *)v130;
      if (*((_DWORD *)this + 6))
      {
        v132 = 0;
        v133 = 0;
        v191 = (float *)*(unsigned int *)(v131 + 4 * v130);
        do
        {
          v134 = *(_DWORD *)(*((_QWORD *)this + 26) + 4 * v133);
          vDSP_vmul(*(const float **)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 110) + 24 * v127) + 24 * (_QWORD)v191) + v132), 1, *(const float **)(*((_QWORD *)this + 116) + 24 * v127), 1, *(float **)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 110) + 24 * v127) + 24 * (_QWORD)v191) + v132), 1, *((unsigned int *)this + 10));
          vDSP_vmul(*(const float **)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 110) + 24 * v127) + 24 * (_QWORD)v191) + v132), 1, *(const float **)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 95) + 24 * v127) + 24 * (_QWORD)v191) + v132), 1, *(float **)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 110) + 24 * v127) + 24 * (_QWORD)v191) + v132), 1, *((unsigned int *)this + 10));
          v135 = *(float **)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 95) + 24 * v127) + 24 * (_QWORD)v191) + v132);
          vDSP_vsub(*(const float **)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 110) + 24 * v127) + 24 * (_QWORD)v191) + v132), 1, v135, 1, v135, 1, *((unsigned int *)this + 10));
          v136 = *(float **)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 95) + 24 * v127) + 24 * (_QWORD)v191) + v132);
          vDSP_vabs(v136, 1, v136, 1, *((unsigned int *)this + 10));
          v137 = *(_QWORD *)(*((_QWORD *)this + 71) + 24 * v127);
          v138 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 104) + 24 * v127) + 24 * (_QWORD)v191) + v132);
          vDSP_vmma((const float *)(v137 + 4), 1, (const float *)(v138 + 4), 1, (const float *)(v137 + 4 * (*((_DWORD *)this + 11) + 1)), 1, (const float *)(v138 + 4 * (*((_DWORD *)this + 11) + 1)), 1, (float *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 107) + 24 * v127) + 24 * (_QWORD)v191)+ v132)+ 4), 1, (*((_DWORD *)this + 11) - 1));
          v139 = *(float **)(*((_QWORD *)this + 71) + 24 * v127);
          v140 = *(float **)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 104) + 24 * v127) + 24 * (_QWORD)v191) + v132);
          v141 = *(float **)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 107) + 24 * v127) + 24 * (_QWORD)v191) + v132);
          *v141 = *v139 * *v140;
          v141[*((unsigned int *)this + 11)] = v139[*((unsigned int *)this + 11)] * v140[*((unsigned int *)this + 11)];
          vDSP_vsadd(*(const float **)(*(_QWORD *)(*((_QWORD *)this + 86) + 24 * (_QWORD)v191) + 24 * v134), 1, (const float *)this + 23, *(float **)(*((_QWORD *)this + 74) + 24 * v127), 1, *((unsigned int *)this + 10));
          v142 = *(float **)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 107) + 24 * v127) + 24 * (_QWORD)v191) + v132);
          vDSP_vdiv(*(const float **)(*((_QWORD *)this + 74) + 24 * v127), 1, v142, 1, v142, 1, *((unsigned int *)this + 10));
          ecutils::fcn_smooth_psd(*(ecutils **)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 101) + 24 * v127) + 24 * (_QWORD)v191) + v132), *(const float **)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 107) + 24 * v127) + 24 * (_QWORD)v191) + v132), *((float *)this + 21), *((float *)this + 22), 0, *((float *)this + 32), *((_DWORD *)this + 10));
          ++v133;
          v132 += 24;
        }
        while (v133 < *((unsigned int *)this + 6));
      }
      v130 = (unint64_t)v187 + 1;
    }
    while ((float *)((char *)v187 + 1) != v183);
    ++v127;
    v143 = *((unsigned int *)this + 40);
  }
  while (v127 < v143);
  if ((_DWORD)v143)
  {
    v144 = 0;
    v145 = 0;
    v146 = &a6->mBuffers[0].mData;
    v147 = (const float **)&a2->mBuffers[0].mData;
    v148 = &a5->mBuffers[0].mData;
    do
    {
      if (a8 && *((_BYTE *)this + 8))
      {
        v149 = (*((_DWORD *)this + 5) >> 1) - 1;
        if (v149 >= v145)
          v149 = v145;
        v150 = *((_QWORD *)this + 62);
        v151 = *((unsigned int *)this + 11);
        __A.realp = *(float **)(v150 + v144);
        __A.imagp = &__A.realp[v151];
        ecutils::fcn_complex_mult_by_psd(*(ecutils **)(v150 + v144), *(const float **)(*((_QWORD *)this + 80) + 24 * v149), *(float **)(v150 + v144), v151);
        ecutils::fcn_otplace_fftReal_inverse(*((const vDSP_DFT_SetupStruct ****)this + 119), &__A, *(DSPComplex **)(*((_QWORD *)this + 68) + v144), *((unsigned int *)this + 11), *((float *)this + 27));
      }
      v152 = *v148;
      v153 = *v147;
      v154 = *v146;
      vDSP_svesq(*v147, 1, (float *)&v193 + 1, *((unsigned int *)this + 11));
      vDSP_svesq((const float *)(*(_QWORD *)(*((_QWORD *)this + 65) + v144) + 4 * *((unsigned int *)this + 11)), 1, (float *)&v193, *((unsigned int *)this + 11));
      if (*(float *)&v193 <= (float)(*((float *)&v193 + 1) * 3.0))
      {
        v158 = *((unsigned int *)this + 11);
        v157 = (const float *)(*(_QWORD *)(*((_QWORD *)this + 65) + v144) + 4 * v158);
        v155 = 4 * v158;
        v156 = v152;
      }
      else
      {
        v155 = 4 * *((unsigned int *)this + 11);
        v156 = v152;
        v157 = v153;
      }
      memcpy(v156, v157, v155);
      memcpy(v154, (const void *)(*(_QWORD *)(*((_QWORD *)this + 68) + v144) + 4 * *((unsigned int *)this + 11)), 4 * *((unsigned int *)this + 11));
      ++v145;
      v144 += 24;
      v146 += 2;
      v147 += 2;
      v148 += 2;
    }
    while (v145 < *((unsigned int *)this + 40));
    v159 = *((_DWORD *)this + 40);
  }
  else
  {
LABEL_105:
    v159 = 0;
  }
  if (*((_BYTE *)this + 8) && v159 < *((_DWORD *)this + 3))
  {
    v160 = 16 * (int)v159 + 16;
    v161 = (float **)((char *)a6 + v160);
    v162 = (float **)((char *)a5 + v160);
    do
    {
      v164 = *v162;
      v162 += 2;
      v163 = v164;
      v165 = *v161;
      v161 += 2;
      vDSP_vclr(v163, 1, *((unsigned int *)this + 11));
      vDSP_vclr(v165, 1, *((unsigned int *)this + 11));
      ++v159;
    }
    while (*((_DWORD *)this + 3) > v159);
  }
  ecMIMO::fcn_ring_buffer_fwd((uint64_t)this, (uint64_t *)this + 26);
  ecMIMO::fcn_update_filter_fwd((uint64_t)this);
  return 0;
}

void ecMIMO::fcn_ir_output(uint64_t a1, _QWORD *a2)
{
  unint64_t v2;
  unint64_t v5;
  const float *v6;
  unsigned int v7;
  unsigned int v8;
  unint64_t v9;
  unsigned int v10;
  unsigned int v11;
  int v12;
  int v13;
  vDSP_Length v14;
  float *v15;
  const vDSP_DFT_SetupStruct ***v16;
  vDSP_Length v17;
  int v18;
  DSPSplitComplex v19;

  v2 = *(unsigned int *)(a1 + 12);
  if ((_DWORD)v2)
  {
    v5 = 0;
    v6 = (const float *)(a1 + 108);
    v7 = *(_DWORD *)(a1 + 16);
    v8 = v7;
    do
    {
      if (v8)
      {
        v9 = 0;
        v10 = *(_DWORD *)(a1 + 156);
        v18 = v8 * v5 * *(_DWORD *)(a1 + 152);
        do
        {
          if (v10)
          {
            v11 = 0;
            v12 = v18 + *(_DWORD *)(a1 + 152) * v9;
            v13 = -1;
            do
            {
              v14 = *(unsigned int *)(a1 + 44);
              v15 = (float *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 736) + 24 * v5) + 24 * v9)
                                        + 24 * (v13 + *(_DWORD *)(a1 + 24)))
                            + 4 * v14);
              v19.realp = *(float **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 736) + 24 * v5) + 24 * v9)
                                    + 24 * (v13 + *(_DWORD *)(a1 + 24)));
              v19.imagp = v15;
              v16 = *(const vDSP_DFT_SetupStruct ****)(a1 + 952);
              v17 = v14;
              if (v16)
              {
                MultiRadixRealFFT::RealOutOfPlaceInverseTransform(v16, &v19, *(DSPComplex **)(a1 + 376));
                v17 = *(unsigned int *)(a1 + 44);
              }
              vDSP_vsmul(*(const float **)(a1 + 376), 1, v6, (float *)(*a2 + 4 * (v12 + v14 * v11++)), 1, v17);
              v10 = *(_DWORD *)(a1 + 156);
              --v13;
            }
            while (v11 < v10);
            v7 = *(_DWORD *)(a1 + 16);
          }
          ++v9;
        }
        while (v9 < v7);
        v2 = *(unsigned int *)(a1 + 12);
        v8 = v7;
      }
      ++v5;
    }
    while (v5 < v2);
  }
}

void ecMIMO::fcn_ir_input(uint64_t a1, uint64_t *a2)
{
  unint64_t v4;
  unint64_t v5;
  unsigned int v6;
  unsigned int v7;
  unint64_t v8;
  unsigned int v9;
  int v10;
  unsigned int v11;
  unsigned int v12;
  int v13;
  int v14;
  uint64_t v15;
  unsigned int v16;
  uint64_t v17;
  unsigned int v18;
  MultiRadixRealFFT *v19;
  DSPSplitComplex v20;

  vDSP_vclr(*(float **)(a1 + 376), 1, *(unsigned int *)(a1 + 36));
  v4 = *(unsigned int *)(a1 + 12);
  if ((_DWORD)v4)
  {
    v5 = 0;
    v6 = *(_DWORD *)(a1 + 16);
    v7 = v6;
    do
    {
      if (v7)
      {
        v8 = 0;
        v9 = *(_DWORD *)(a1 + 156);
        v10 = v7 * v5 * *(_DWORD *)(a1 + 152);
        v11 = v9;
        do
        {
          if (v11)
          {
            v12 = 0;
            v13 = v10 + *(_DWORD *)(a1 + 152) * v8;
            v14 = -1;
            do
            {
              v15 = *(unsigned int *)(a1 + 44);
              v16 = v13 + v15 * v12;
              v17 = *a2;
              if (v16 + v15 <= (unint64_t)((a2[1] - *a2) >> 2))
              {
                v18 = v14 + *(_DWORD *)(a1 + 24);
                v20.realp = 0;
                v20.imagp = 0;
                v20.realp = *(float **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 736) + 24 * v5) + 24 * v8) + 24 * v18);
                v20.imagp = &v20.realp[v15];
                memcpy(*(void **)(a1 + 376), (const void *)(v17 + 4 * v16), 4 * v15);
                v19 = *(MultiRadixRealFFT **)(a1 + 952);
                if (v19)
                  MultiRadixRealFFT::RealOutOfPlaceForwardTransform(v19, *(DSPComplex **)(a1 + 376), &v20, 1.0);
                v9 = *(_DWORD *)(a1 + 156);
              }
              ++v12;
              --v14;
            }
            while (v12 < v9);
            v6 = *(_DWORD *)(a1 + 16);
            v11 = v9;
          }
          ++v8;
        }
        while (v8 < v6);
        v4 = *(unsigned int *)(a1 + 12);
        v7 = v6;
      }
      ++v5;
    }
    while (v5 < v4);
  }
}

unsigned int *ecMIMO::fcn_tf_output(unsigned int *result, _QWORD *a2)
{
  unint64_t v2;
  unsigned int *v4;
  unint64_t v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  unint64_t v10;
  int v11;
  unsigned int v12;
  int v13;
  int v14;

  v2 = result[3];
  if ((_DWORD)v2)
  {
    v4 = result;
    v5 = 0;
    v6 = result[4];
    v7 = result[6];
    v8 = v7;
    v9 = v6;
    do
    {
      if (v9)
      {
        v10 = 0;
        v11 = v9 * v5 * v8 * v4[9];
        do
        {
          if (v8)
          {
            v12 = 0;
            v13 = v11 + v7 * v10 * v4[9];
            v14 = -1;
            do
            {
              result = (unsigned int *)memcpy((void *)(*a2 + 4 * (v13 + v4[9] * v12++)), *(const void **)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v4 + 92) + 24 * v5)+ 24 * v10)+ 24 * (v8 + v14)), 4 * v4[9]);
              v8 = v4[6];
              --v14;
            }
            while (v12 < v8);
            v6 = v4[4];
            v7 = v4[6];
          }
          ++v10;
        }
        while (v10 < v6);
        v2 = v4[3];
        v9 = v6;
      }
      ++v5;
    }
    while (v5 < v2);
  }
  return result;
}

BOOL ecMIMO::fcn_isfinite_state(ecMIMO *this)
{
  uint64_t v2;
  unint64_t v3;
  _BOOL8 result;
  float __C;

  __C = 0.0;
  if (!*((_DWORD *)this + 3))
    return 1;
  v2 = 0;
  v3 = 0;
  while (1)
  {
    vDSP_sve((const float *)(*(_QWORD *)(*((_QWORD *)this + 68) + v2) + 4 * *((unsigned int *)this + 11)), 1, &__C, *((unsigned int *)this + 11));
    result = (LODWORD(__C) & 0x7FFFFFFFu) < 0x7F800000;
    if ((LODWORD(__C) & 0x7FFFFFFFu) >= 0x7F800000)
      break;
    ++v3;
    v2 += 24;
    if (v3 >= *((unsigned int *)this + 3))
      return 1;
  }
  return result;
}

BOOL ecMIMO::fcn_isfinite_output(ecMIMO *this)
{
  uint64_t v2;
  unint64_t v3;
  _BOOL8 result;
  float __C;

  __C = 0.0;
  if (!*((_DWORD *)this + 3))
    return 1;
  v2 = 0;
  v3 = 0;
  while (1)
  {
    vDSP_sve((const float *)(*(_QWORD *)(*((_QWORD *)this + 65) + v2) + 4 * *((unsigned int *)this + 11)), 1, &__C, *((unsigned int *)this + 11));
    result = (LODWORD(__C) & 0x7FFFFFFFu) < 0x7F800000;
    if ((LODWORD(__C) & 0x7FFFFFFFu) >= 0x7F800000)
      break;
    ++v3;
    v2 += 24;
    if (v3 >= *((unsigned int *)this + 3))
      return 1;
  }
  return result;
}

BOOL ecMIMO::fcn_isfinite_ref(ecMIMO *this)
{
  unint64_t v1;
  _DWORD *v2;
  unint64_t v3;
  _DWORD *v4;
  int v5;

  v1 = *((unsigned int *)this + 4);
  if (!(_DWORD)v1)
    return 1;
  v2 = (_DWORD *)*((_QWORD *)this + 32);
  if ((*v2 & 0x7FFFFFFFu) > 0x7F7FFFFF)
    return 0;
  v3 = 0;
  v4 = v2 + 1;
  while (v1 - 1 != v3)
  {
    v5 = v4[v3++] & 0x7FFFFFFF;
    if (v5 >= 2139095040)
      return v3 >= v1;
  }
  v3 = *((unsigned int *)this + 4);
  return v3 >= v1;
}

float ecMIMO::fcn_get_erle_internal_db(ecMIMO *this, unsigned int a2)
{
  uint64_t v3;
  uint64_t __C;

  __C = 0;
  v3 = 24 * a2;
  vDSP_svesq((const float *)(*(_QWORD *)(*((_QWORD *)this + 65) + v3) + 4 * *((unsigned int *)this + 11)), 1, (float *)&__C + 1, *((unsigned int *)this + 11));
  vDSP_svesq((const float *)(*(_QWORD *)(*((_QWORD *)this + 68) + v3) + 4 * *((unsigned int *)this + 11)), 1, (float *)&__C, *((unsigned int *)this + 11));
  return log10f((float)(*((float *)&__C + 1) + *((float *)this + 33)) / (float)(*((float *)this + 33) + *(float *)&__C))
       * 10.0;
}

float ecMIMO::fcn_get_erle_external_db(ecMIMO *this, unsigned int a2)
{
  uint64_t v3;
  uint64_t __C;

  __C = 0;
  v3 = 24 * a2;
  vDSP_svesq((const float *)(*(_QWORD *)(*((_QWORD *)this + 65) + v3) + 4 * *((unsigned int *)this + 11)), 1, (float *)&__C + 1, *((unsigned int *)this + 11));
  vDSP_svesq((const float *)(*(_QWORD *)(*((_QWORD *)this + 53) + v3) + 4 * *((unsigned int *)this + 11)), 1, (float *)&__C, *((unsigned int *)this + 11));
  return log10f((float)(*((float *)&__C + 1) + *((float *)this + 33)) / (float)(*((float *)this + 33) + *(float *)&__C))
       * 10.0;
}

float ecMIMO::fcn_get_ref_power_in_db(ecMIMO *this, unsigned int a2)
{
  return log10f(*(float *)(*((_QWORD *)this + 32) + 4 * a2)) * 10.0;
}

float ecMIMO::fcn_get_sxx(ecMIMO *this)
{
  unsigned int v1;
  float *v2;
  float v3;
  uint64_t v4;
  float v5;

  v1 = *((_DWORD *)this + 4);
  if (v1)
  {
    v2 = (float *)*((_QWORD *)this + 32);
    v3 = 0.0;
    v4 = *((unsigned int *)this + 4);
    do
    {
      v5 = *v2++;
      v3 = v3 + v5;
      --v4;
    }
    while (v4);
  }
  else
  {
    v3 = 0.0;
  }
  return v3 / (float)v1;
}

float ecMIMO::fcn_get_mic_eclee_xcorr(ecMIMO *this)
{
  return 0.0;
}

void ecMIMO::fcn_set_tHold(ecMIMO *this, float a2, float a3)
{
  *((float *)this + 14) = __exp10f(a2 / 10.0);
  *((float *)this + 15) = __exp10f(a3 / 10.0);
}

uint64_t ecMIMO::fcn_isAdapting(ecMIMO *this)
{
  return *((unsigned __int8 *)this + 164);
}

uint64_t ecMIMO::fcn_ring_buffer_fwd(uint64_t result, uint64_t *a2)
{
  int v2;
  int v3;
  int v4;
  unint64_t v5;
  uint64_t v6;
  int v7;
  int v8;

  v2 = *(_DWORD *)(result + 52);
  v3 = *(_DWORD *)(result + 24);
  if (v2 + 1 == v3)
    v4 = 0;
  else
    v4 = v2 + 1;
  *(_DWORD *)(result + 52) = v4;
  if (v3)
  {
    v5 = 0;
    do
    {
      v6 = *a2;
      v7 = *(_DWORD *)(*a2 + 4 * v5);
      *(_DWORD *)(*a2 + 4 * v5) = v7 + 1;
      if (v7 + 1 == *(_DWORD *)(result + 24))
        v8 = 0;
      else
        v8 = v7 + 1;
      *(_DWORD *)(v6 + 4 * v5++) = v8;
    }
    while (v5 < *(unsigned int *)(result + 24));
  }
  return result;
}

float ecMIMO::fcn_hilbert_transform(ecMIMO *this, int64x2_t *a2, float *a3, _QWORD *a4, DSPSplitComplex *a5)
{
  uint64_t v9;
  int v10;
  float v11;
  float v12;
  float *__E;
  float *imagp;
  float result;
  vDSP_Length __N;
  float __B;
  DSPSplitComplex __A;
  int v20;

  v9 = *((unsigned int *)this + 11);
  __N = *((unsigned int *)this + 10);
  v20 = *((_DWORD *)this + 9);
  v10 = v20;
  v11 = *((float *)this + 23);
  v12 = *((float *)this + 24);
  __E = a5->realp;
  imagp = a5->imagp;
  *a3 = 0.0;
  vDSP_vclr(__E, 1, (2 * v10));
  __A = (DSPSplitComplex)vaddq_s64(*a2, vdupq_n_s64(4uLL));
  vDSP_zvmags(&__A, 1, __E + 1, 1, (v9 - 1));
  memcpy(&__E[(v9 + 1)], __E + 1, 4 * (v9 - 1));
  vDSP_vrvrs(&__E[(v9 + 1)], 1, (v9 - 1));
  *__E = *(float *)a2->i64[0] * *(float *)a2->i64[0];
  __E[v9] = *(float *)a2->i64[1] * *(float *)a2->i64[1];
  vDSP_meanv(__E, 1, a3, *((unsigned int *)this + 9));
  *a3 = -*a3;
  vDSP_vsadd(__E, 1, a3, __E, 1, *((unsigned int *)this + 9));
  *a3 = -*a3;
  MultiRadixFFT_CplxInPlaceTransform(a4, (const float **)&a5->realp, 1);
  __B = 2.0;
  vDSP_vsmul(__E, 1, &__B, __E, 1, __N);
  vDSP_vsmul(imagp, 1, &__B, imagp, 1, __N);
  *__E = *__E * 0.5;
  __E[v9] = __E[v9] * 0.5;
  *imagp = *imagp * 0.5;
  imagp[v9] = imagp[v9] * 0.5;
  vDSP_vclr(&__E[__N], 1, (v9 - 1));
  vDSP_vclr(&imagp[__N], 1, (v9 - 1));
  MultiRadixFFT_CplxInPlaceTransform(a4, (const float **)&a5->realp, -1);
  vDSP_vmma(__E, 1, __E, 1, imagp, 1, imagp, 1, __E, 1, *((unsigned int *)this + 9));
  vvsqrtf(__E, __E, &v20);
  vDSP_vsmsa(__E, 1, (const float *)this + 27, a3, __E, 1, *((unsigned int *)this + 9));
  vDSP_meanv(__E, 1, a3, __N);
  result = v11 + (float)(*a3 * v12);
  *a3 = result;
  return result;
}

uint64_t ecMIMO::fcn_update_filter_fwd(uint64_t this)
{
  unsigned int v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unsigned int v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v1 = *(_DWORD *)(this + 172);
  *(_DWORD *)(this + 176) = v1;
  v2 = *(unsigned int *)(this + 160);
  if ((_DWORD)v2)
  {
    v3 = 0;
    v4 = *(unsigned int *)(this + 16);
    v5 = v1;
    do
    {
      if ((_DWORD)v4)
      {
        v6 = 0;
        v7 = *(unsigned int *)(this + 24);
        do
        {
          if ((_DWORD)v7)
          {
            v8 = 0;
            v9 = *(_DWORD *)(this + 168);
            v10 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(this + 904) + 24 * v3) + 24 * v6);
            do
            {
              v11 = v8 >> 6;
              v12 = 1 << v8;
              if (v5)
                v13 = *(_QWORD *)(v10 + 8 * v11) & ~v12;
              else
                v13 = *(_QWORD *)(v10 + 8 * v11) | v12;
              *(_QWORD *)(v10 + 8 * v11) = v13;
              v5 = (v5 + 1) % v9;
              ++v8;
            }
            while (v7 != v8);
            *(_DWORD *)(this + 176) = v5;
          }
          ++v6;
        }
        while (v6 != v4);
      }
      ++v3;
    }
    while (v3 != v2);
  }
  *(_DWORD *)(this + 172) = (v1 + 1) % *(_DWORD *)(this + 168);
  return this;
}

_QWORD *std::vector<std::vector<BOOL>>::__init_with_size[abi:ne180100]<std::vector<BOOL>*,std::vector<BOOL>*>(_QWORD *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;

  if (a4)
  {
    v6 = result;
    std::vector<std::vector<BOOL>>::__vallocate[abi:ne180100](result, a4);
    result = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::vector<BOOL>>,std::vector<BOOL>*,std::vector<BOOL>*,std::vector<BOOL>*>((uint64_t)(v6 + 2), a2, a3, (_QWORD *)v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_1B6362AA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(v9 + 8) = v10;
  std::vector<std::vector<BOOL>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

_QWORD *std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::vector<BOOL>>,std::vector<BOOL>*,std::vector<BOOL>*,std::vector<BOOL>*>(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  _QWORD *v4;
  uint64_t v6;
  _QWORD v8[3];
  char v9;
  _QWORD *v10;
  _QWORD *v11;

  v4 = a4;
  v10 = a4;
  v11 = a4;
  v8[0] = a1;
  v8[1] = &v10;
  v8[2] = &v11;
  v9 = 0;
  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      std::vector<BOOL>::vector(v4, v6);
      v6 += 24;
      v4 = v11 + 3;
      v11 += 3;
    }
    while (v6 != a3);
  }
  v9 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<BOOL>>,std::vector<BOOL>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v8);
  return v4;
}

void sub_1B6362B50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<BOOL>>,std::vector<BOOL>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<BOOL>>,std::vector<BOOL>*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  uint64_t v3;
  uint64_t v4;
  void *v5;
  void *v6;

  if (!*(_BYTE *)(a1 + 24))
  {
    v3 = **(_QWORD **)(a1 + 16);
    v4 = **(_QWORD **)(a1 + 8);
    while (v3 != v4)
    {
      v6 = *(void **)(v3 - 24);
      v3 -= 24;
      v5 = v6;
      if (v6)
        operator delete(v5);
    }
  }
  return a1;
}

void **std::vector<BOOL>::operator=(void **a1, uint64_t a2)
{
  unint64_t v4;
  void *v5;
  void *v6;

  if (a1 != (void **)a2)
  {
    v4 = *(_QWORD *)(a2 + 8);
    if (v4)
    {
      if (v4 > (_QWORD)a1[2] << 6)
      {
        v5 = *a1;
        if (*a1)
        {
          operator delete(v5);
          *a1 = 0;
          a1[1] = 0;
          a1[2] = 0;
          v4 = *(_QWORD *)(a2 + 8);
        }
        std::vector<BOOL>::__vallocate[abi:ne180100](a1, v4);
        v4 = *(_QWORD *)(a2 + 8);
      }
      memmove(*a1, *(const void **)a2, (((v4 - 1) >> 3) & 0x1FFFFFFFFFFFFFF8) + 8);
      v6 = *(void **)(a2 + 8);
    }
    else
    {
      v6 = 0;
    }
    a1[1] = v6;
  }
  return a1;
}

void AUMagnitudeDifferenceNoiseSuppressorV4::~AUMagnitudeDifferenceNoiseSuppressorV4(AUMagnitudeDifferenceNoiseSuppressorV4 *this)
{
  AUMagnitudeDifferenceNoiseSuppressorV4::~AUMagnitudeDifferenceNoiseSuppressorV4(this);
  JUMPOUT(0x1BCC95CECLL);
}

{
  uint64_t v2;

  *(_QWORD *)this = &off_1E69D52B8;
  v2 = *((_QWORD *)this + 68);
  if (v2)
  {
    CNoiseSuppressorV4::speex_preprocess_state_destroy(v2);
    *((_QWORD *)this + 68) = 0;
  }
  ausdk::AUBase::~AUBase(this);
}

uint64_t AUMagnitudeDifferenceNoiseSuppressorV4::Initialize(AUMagnitudeDifferenceNoiseSuppressorV4 *this)
{
  uint64_t Element;
  uint64_t v3;

  (*(void (**)(AUMagnitudeDifferenceNoiseSuppressorV4 *))(*(_QWORD *)this + 64))(this);
  *((_BYTE *)this + 540) = *(_DWORD *)(ausdk::AUScope::SafeGetElement((AUMagnitudeDifferenceNoiseSuppressorV4 *)((char *)this + 80), 0)+ 88) == 1718773105;
  *((_BYTE *)this + 541) = *(_DWORD *)(ausdk::AUScope::SafeGetElement((AUMagnitudeDifferenceNoiseSuppressorV4 *)((char *)this + 128), 0)+ 88) == 1718773105;
  Element = ausdk::AUScope::SafeGetElement((AUMagnitudeDifferenceNoiseSuppressorV4 *)((char *)this + 128), 0);
  v3 = CNoiseSuppressorV4::speex_preprocess_state_init(*((_DWORD *)this + 84), *(double *)(Element + 80), 2, 0, 0, 0, 0);
  *((_QWORD *)this + 68) = v3;
  if (!v3)
    return 4294956421;
  *((_DWORD *)this + 134) = *((_DWORD *)this + 133);
  AUMagnitudeDifferenceNoiseSuppressorV4::UpdateParameters(this);
  return 0;
}

void AUMagnitudeDifferenceNoiseSuppressorV4::Cleanup(AUMagnitudeDifferenceNoiseSuppressorV4 *this)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 68);
  if (v2)
  {
    CNoiseSuppressorV4::speex_preprocess_state_destroy(v2);
    *((_QWORD *)this + 68) = 0;
  }
}

uint64_t AUMagnitudeDifferenceNoiseSuppressorV4::GetPropertyInfo(AUMagnitudeDifferenceNoiseSuppressorV4 *this, int a2, int a3, unsigned int a4, unsigned int *a5, BOOL *a6)
{
  uint64_t result;
  BOOL v7;

  if (a3)
    return 4294956417;
  if (a2 == 21)
  {
    v7 = 1;
  }
  else
  {
    if (a2 != 3700)
      return 4294956417;
    v7 = 0;
  }
  result = 0;
  *a6 = v7;
  *a5 = 4;
  return result;
}

uint64_t AUMagnitudeDifferenceNoiseSuppressorV4::GetProperty(AUMagnitudeDifferenceNoiseSuppressorV4 *this, int a2, int a3, unsigned int a4, _DWORD *a5)
{
  uint64_t result;
  int v7;

  if (a3)
    return 4294956417;
  if (a2 == 3700)
  {
    v7 = *((unsigned __int8 *)this + 376);
    goto LABEL_7;
  }
  if (a2 == 21)
  {
    v7 = (*(uint64_t (**)(AUMagnitudeDifferenceNoiseSuppressorV4 *))(*(_QWORD *)this + 576))(this);
LABEL_7:
    result = 0;
    *a5 = v7;
    return result;
  }
  return 4294956417;
}

uint64_t AUMagnitudeDifferenceNoiseSuppressorV4::SetProperty(AUMagnitudeDifferenceNoiseSuppressorV4 *this, int a2, int a3, unsigned int a4, int *a5, unsigned int a6)
{
  uint64_t result;
  int v8;
  int v9;

  result = 4294956417;
  if (a2 == 21 && !a3)
  {
    if (a6 >= 4)
    {
      v8 = *a5;
      v9 = *a5 != 0;
      if (v9 != (*(unsigned int (**)(AUMagnitudeDifferenceNoiseSuppressorV4 *))(*(_QWORD *)this + 576))(this))
        (*(void (**)(AUMagnitudeDifferenceNoiseSuppressorV4 *, BOOL))(*(_QWORD *)this + 584))(this, v8 != 0);
      return 0;
    }
    else
    {
      return 4294956445;
    }
  }
  return result;
}

uint64_t AUMagnitudeDifferenceNoiseSuppressorV4::SetParameter(AUMagnitudeDifferenceNoiseSuppressorV4 *this, unsigned int a2, int a3, unsigned int a4, float a5)
{
  uint64_t result;
  uint64_t v9;
  ausdk::AUElement *v10;
  ausdk::AUElement **v11;
  uint64_t v12;
  ausdk::AUElement *Element;
  unsigned int v14;
  ausdk::AUElement **v15;

  if (a3)
    return 4294956430;
  if (a2 > 0x14)
    goto LABEL_13;
  if (((1 << a2) & 0x18801A) != 0)
  {
    v9 = *((_QWORD *)this + 9);
    if (v9)
    {
      v10 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v9 + 32))(v9, 0);
    }
    else
    {
      v11 = (ausdk::AUElement **)*((_QWORD *)this + 6);
      if (*((ausdk::AUElement ***)this + 7) == v11)
        v10 = 0;
      else
        v10 = *v11;
    }
    v14 = a2;
LABEL_16:
    ausdk::AUElement::SetParameter(v10, v14, a5, 0);
    result = 0;
    ++*((_DWORD *)this + 133);
    return result;
  }
  if (a2)
  {
LABEL_13:
    Element = (ausdk::AUElement *)ausdk::AUScope::SafeGetElement((AUMagnitudeDifferenceNoiseSuppressorV4 *)((char *)this + 32), a4);
    ausdk::AUElement::SetParameter(Element, a2, a5, 0);
    return 0;
  }
  if ((int)a5 <= 2)
  {
    v12 = *((_QWORD *)this + 9);
    if (v12)
    {
      v10 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v12 + 32))(v12, 0);
    }
    else
    {
      v15 = (ausdk::AUElement **)*((_QWORD *)this + 6);
      if (*((ausdk::AUElement ***)this + 7) == v15)
        v10 = 0;
      else
        v10 = *v15;
    }
    v14 = 0;
    goto LABEL_16;
  }
  return 4294956418;
}

uint64_t AUMagnitudeDifferenceNoiseSuppressorV4::CanScheduleParameters(AUMagnitudeDifferenceNoiseSuppressorV4 *this)
{
  return 0;
}

uint64_t AUMagnitudeDifferenceNoiseSuppressorV4::ProcessMultipleBufferLists(AUMagnitudeDifferenceNoiseSuppressorV4 *this, unsigned int *a2, int a3, unsigned int a4, const AudioBufferList **a5, unsigned int a6, AudioBufferList **a7)
{
  uint64_t result;
  AudioBufferList *v11;
  unsigned int mDataByteSize;
  void *mData;
  void *v14;
  size_t v15;
  int v16;
  float *v17;
  float *v18;
  uint64_t v19;
  uint64_t v20;
  __n128 v21;
  uint64_t v22;
  float v23;
  uint64_t v24;
  ausdk::AUElement *v25;
  ausdk::AUElement **v26;
  uint64_t v27;
  ausdk::AUElement *v28;
  ausdk::AUElement **v29;
  uint64_t v30;
  ausdk::AUElement *v31;
  ausdk::AUElement **v32;
  uint64_t v33;
  ausdk::AUElement *v34;
  ausdk::AUElement **v35;
  uint64_t v36;
  ausdk::AUElement *v37;
  ausdk::AUElement **v38;
  uint64_t v39;
  ausdk::AUElement *v40;
  ausdk::AUElement **v41;
  uint64_t v42;
  ausdk::AUElement *v43;
  ausdk::AUElement **v44;
  uint64_t v45;
  ausdk::AUElement *v46;
  ausdk::AUElement **v47;
  uint64_t v48;
  ausdk::AUElement *v49;
  ausdk::AUElement **v50;
  uint64_t v51;
  ausdk::AUElement *v52;
  ausdk::AUElement **v53;
  uint64_t v54;
  ausdk::AUElement *v55;
  ausdk::AUElement **v56;
  uint64_t v57;
  ausdk::AUElement *v58;
  ausdk::AUElement **v59;
  uint64_t v60;
  ausdk::AUElement *v61;
  ausdk::AUElement **v62;
  uint64_t v63;
  ausdk::AUElement *v64;
  ausdk::AUElement **v65;
  uint64_t v66;
  ausdk::AUElement *v67;
  ausdk::AUElement **v68;
  char *v69;
  void *v70;
  uint64_t v71;
  char *v72;
  uint64_t v73;
  const void *v74;
  float *v75;
  size_t v76;
  float *v77;
  AudioBufferList *v78;
  void *v79;
  uint64_t v80;
  const float *v81[2];
  const float *v82[2];

  if (*((_DWORD *)this + 84) != a3)
    return 4294956422;
  result = 4294956419;
  if (a4 >= 4 && a6 >= 4)
  {
    if ((*(unsigned int (**)(AUMagnitudeDifferenceNoiseSuppressorV4 *, unsigned int *))(*(_QWORD *)this
                                                                                                  + 576))(this, a2))
    {
      v11 = a7[2];
      mDataByteSize = v11->mBuffers[0].mDataByteSize;
      if (mDataByteSize >= 4)
        memset_pattern16(v11->mBuffers[0].mData, &unk_1B6627B80, mDataByteSize & 0xFFFFFFFC);
      if (*((unsigned __int8 *)this + 540) == *((unsigned __int8 *)this + 541))
      {
        mData = (*a5)->mBuffers[0].mData;
        v14 = (*a7)->mBuffers[0].mData;
        v15 = (*a7)->mBuffers[0].mDataByteSize;
LABEL_105:
        memcpy(v14, mData, v15);
        return 0;
      }
      bzero((*a7)->mBuffers[0].mData, (*a7)->mBuffers[0].mDataByteSize);
      return 0;
    }
    v16 = *((_DWORD *)this + 133);
    if (v16 != *((_DWORD *)this + 134))
    {
      AUMagnitudeDifferenceNoiseSuppressorV4::UpdateParameters(this);
      *((_DWORD *)this + 134) = v16;
    }
    v17 = (float *)(*a5)->mBuffers[0].mData;
    v18 = (float *)a5[1]->mBuffers[0].mData;
    v19 = *((_QWORD *)this + 68);
    *(_QWORD *)(v19 + 600) = a5[2]->mBuffers[0].mData;
    if (*((_BYTE *)this + 540))
    {
      v20 = *((unsigned int *)this + 84);
      v82[0] = v17;
      v82[1] = &v17[v20];
      v81[0] = v18;
      v81[1] = &v18[v20];
      CNoiseSuppressorV4::speex_preprocess_run_freq(v19, v82, v81, 0);
    }
    else
    {
      v21.n128_f32[0] = CNoiseSuppressorV4::speex_preprocess_run((int *)v19, (char *)v17, (char *)v18, 0);
    }
    v22 = *((_QWORD *)this + 68);
    if (v22)
      v23 = *(float *)(v22 + 332);
    else
      v23 = 0.0;
    v24 = *((_QWORD *)this + 9);
    if (v24)
    {
      v25 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD, __n128))(*(_QWORD *)v24 + 32))(v24, 0, v21);
    }
    else
    {
      v26 = (ausdk::AUElement **)*((_QWORD *)this + 6);
      if (*((ausdk::AUElement ***)this + 7) == v26)
        v25 = 0;
      else
        v25 = *v26;
    }
    ausdk::AUElement::SetParameter(v25, 2u, v23, 0);
    v27 = *((_QWORD *)this + 9);
    if (v27)
    {
      v28 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v27 + 32))(v27, 0);
    }
    else
    {
      v29 = (ausdk::AUElement **)*((_QWORD *)this + 6);
      if (*((ausdk::AUElement ***)this + 7) == v29)
        v28 = 0;
      else
        v28 = *v29;
    }
    ausdk::AUElement::SetParameter(v28, 5u, (float)*(int *)(*((_QWORD *)this + 68) + 480), 0);
    v30 = *((_QWORD *)this + 9);
    if (v30)
    {
      v31 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v30 + 32))(v30, 0);
    }
    else
    {
      v32 = (ausdk::AUElement **)*((_QWORD *)this + 6);
      if (*((ausdk::AUElement ***)this + 7) == v32)
        v31 = 0;
      else
        v31 = *v32;
    }
    ausdk::AUElement::SetParameter(v31, 6u, *(float *)(*((_QWORD *)this + 68) + 476), 0);
    v33 = *((_QWORD *)this + 9);
    if (v33)
    {
      v34 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v33 + 32))(v33, 0);
    }
    else
    {
      v35 = (ausdk::AUElement **)*((_QWORD *)this + 6);
      if (*((ausdk::AUElement ***)this + 7) == v35)
        v34 = 0;
      else
        v34 = *v35;
    }
    ausdk::AUElement::SetParameter(v34, 7u, (float)*(int *)(*((_QWORD *)this + 68) + 432), 0);
    v36 = *((_QWORD *)this + 9);
    if (v36)
    {
      v37 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v36 + 32))(v36, 0);
    }
    else
    {
      v38 = (ausdk::AUElement **)*((_QWORD *)this + 6);
      if (*((ausdk::AUElement ***)this + 7) == v38)
        v37 = 0;
      else
        v37 = *v38;
    }
    ausdk::AUElement::SetParameter(v37, 8u, *(float *)(*((_QWORD *)this + 68) + 436), 0);
    v39 = *((_QWORD *)this + 9);
    if (v39)
    {
      v40 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v39 + 32))(v39, 0);
    }
    else
    {
      v41 = (ausdk::AUElement **)*((_QWORD *)this + 6);
      if (*((ausdk::AUElement ***)this + 7) == v41)
        v40 = 0;
      else
        v40 = *v41;
    }
    ausdk::AUElement::SetParameter(v40, 9u, *(float *)(*((_QWORD *)this + 68) + 336), 0);
    v42 = *((_QWORD *)this + 9);
    if (v42)
    {
      v43 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v42 + 32))(v42, 0);
    }
    else
    {
      v44 = (ausdk::AUElement **)*((_QWORD *)this + 6);
      if (*((ausdk::AUElement ***)this + 7) == v44)
        v43 = 0;
      else
        v43 = *v44;
    }
    ausdk::AUElement::SetParameter(v43, 0xAu, *(float *)(*((_QWORD *)this + 68) + 340), 0);
    v45 = *((_QWORD *)this + 9);
    if (v45)
    {
      v46 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v45 + 32))(v45, 0);
    }
    else
    {
      v47 = (ausdk::AUElement **)*((_QWORD *)this + 6);
      if (*((ausdk::AUElement ***)this + 7) == v47)
        v46 = 0;
      else
        v46 = *v47;
    }
    ausdk::AUElement::SetParameter(v46, 0xBu, *(float *)(*((_QWORD *)this + 68) + 504), 0);
    v48 = *((_QWORD *)this + 9);
    if (v48)
    {
      v49 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v48 + 32))(v48, 0);
    }
    else
    {
      v50 = (ausdk::AUElement **)*((_QWORD *)this + 6);
      if (*((ausdk::AUElement ***)this + 7) == v50)
        v49 = 0;
      else
        v49 = *v50;
    }
    ausdk::AUElement::SetParameter(v49, 0xCu, *(float *)(*((_QWORD *)this + 68) + 508), 0);
    v51 = *((_QWORD *)this + 9);
    if (v51)
    {
      v52 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v51 + 32))(v51, 0);
    }
    else
    {
      v53 = (ausdk::AUElement **)*((_QWORD *)this + 6);
      if (*((ausdk::AUElement ***)this + 7) == v53)
        v52 = 0;
      else
        v52 = *v53;
    }
    ausdk::AUElement::SetParameter(v52, 0xDu, (float)*(int *)(*((_QWORD *)this + 68) + 52), 0);
    v54 = *((_QWORD *)this + 9);
    if (v54)
    {
      v55 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v54 + 32))(v54, 0);
    }
    else
    {
      v56 = (ausdk::AUElement **)*((_QWORD *)this + 6);
      if (*((ausdk::AUElement ***)this + 7) == v56)
        v55 = 0;
      else
        v55 = *v56;
    }
    ausdk::AUElement::SetParameter(v55, 0x10u, *(float *)(*((_QWORD *)this + 68) + 616) - *(float *)(*((_QWORD *)this + 68) + 612), 0);
    v57 = *((_QWORD *)this + 9);
    if (v57)
    {
      v58 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v57 + 32))(v57, 0);
    }
    else
    {
      v59 = (ausdk::AUElement **)*((_QWORD *)this + 6);
      if (*((ausdk::AUElement ***)this + 7) == v59)
        v58 = 0;
      else
        v58 = *v59;
    }
    ausdk::AUElement::SetParameter(v58, 0x11u, *(float *)(*((_QWORD *)this + 68) + 524), 0);
    v60 = *((_QWORD *)this + 9);
    if (v60)
    {
      v61 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v60 + 32))(v60, 0);
    }
    else
    {
      v62 = (ausdk::AUElement **)*((_QWORD *)this + 6);
      if (*((ausdk::AUElement ***)this + 7) == v62)
        v61 = 0;
      else
        v61 = *v62;
    }
    ausdk::AUElement::SetParameter(v61, 0x12u, *(float *)(*((_QWORD *)this + 68) + 612), 0);
    v63 = *((_QWORD *)this + 9);
    if (v63)
    {
      v64 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v63 + 32))(v63, 0);
    }
    else
    {
      v65 = (ausdk::AUElement **)*((_QWORD *)this + 6);
      if (*((ausdk::AUElement ***)this + 7) == v65)
        v64 = 0;
      else
        v64 = *v65;
    }
    ausdk::AUElement::SetParameter(v64, 0x15u, *(float *)(*((_QWORD *)this + 68) + 512), 0);
    v66 = *((_QWORD *)this + 9);
    if (v66)
    {
      v67 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v66 + 32))(v66, 0);
    }
    else
    {
      v68 = (ausdk::AUElement **)*((_QWORD *)this + 6);
      if (*((ausdk::AUElement ***)this + 7) == v68)
        v67 = 0;
      else
        v67 = *v68;
    }
    ausdk::AUElement::SetParameter(v67, 0x16u, *(float *)(*((_QWORD *)this + 68) + 516), 0);
    memcpy(a7[2]->mBuffers[0].mData, *(const void **)(*((_QWORD *)this + 68) + 168), 4 * *(int *)(*((_QWORD *)this + 68) + 4));
    v69 = (char *)(*a7)->mBuffers[0].mData;
    v70 = a7[1]->mBuffers[0].mData;
    v71 = *((unsigned int *)this + 84);
    if (*((_BYTE *)this + 541))
    {
      v72 = &v69[4 * v71];
      v73 = *((_QWORD *)this + 68);
      if (v73)
      {
        v74 = *(const void **)(v73 + 584);
        v75 = *(float **)(v73 + 592);
      }
      else
      {
        v74 = 0;
        v75 = 0;
      }
      memcpy(v69, v74, 4 * v71);
      v76 = 4 * *((unsigned int *)this + 84);
      v69 = v72;
      v77 = v75;
    }
    else
    {
      v76 = 4 * v71;
      v77 = v17;
    }
    memcpy(v69, v77, v76);
    memcpy(v70, *(const void **)(*((_QWORD *)this + 68) + 384), 4 * *((unsigned int *)this + 84));
    v78 = a7[3];
    if (!v78)
      return 0;
    result = 0;
    v79 = v78->mBuffers[0].mData;
    if (v79 && v79 != (*a7)->mBuffers[0].mData)
    {
      v80 = *((_QWORD *)this + 68);
      if (v80)
      {
        mData = *(void **)(v80 + 192);
        v15 = 4 * *(int *)(v80 + 4);
        v14 = v79;
        goto LABEL_105;
      }
      return 0;
    }
  }
  return result;
}

uint64_t AUMagnitudeDifferenceNoiseSuppressorV4::Render(AUMagnitudeDifferenceNoiseSuppressorV4 *this, unsigned int *a2, const AudioTimeStamp *a3, uint64_t a4)
{
  uint64_t Element;
  ausdk::AUInputElement *v9;
  uint64_t result;
  unsigned int v11;
  ausdk::AUInputElement *v12;
  uint64_t v13;
  uint64_t BufferList;
  uint64_t v15;
  uint64_t v16;
  ausdk::AUBufferList *v17;
  _QWORD v18[4];
  _QWORD v19[5];

  v19[4] = *MEMORY[0x1E0C80C00];
  if (*((_DWORD *)this + 84) != (_DWORD)a4)
    return 4294956422;
  if (!ausdk::AUBase::HasInput(this, 0))
    return 4294956420;
  Element = ausdk::AUScope::SafeGetElement((AUMagnitudeDifferenceNoiseSuppressorV4 *)((char *)this + 128), 0);
  v9 = (ausdk::AUInputElement *)ausdk::AUScope::SafeGetElement((AUMagnitudeDifferenceNoiseSuppressorV4 *)((char *)this + 80), 0);
  result = ausdk::AUInputElement::PullInput(v9, a2, a3, 0, a4);
  if ((_DWORD)result)
    return result;
  if (ausdk::AUBase::HasInput(this, 1u))
  {
    v11 = 1;
    v12 = (ausdk::AUInputElement *)ausdk::AUScope::SafeGetElement((AUMagnitudeDifferenceNoiseSuppressorV4 *)((char *)this + 80), 1u);
    result = ausdk::AUInputElement::PullInput(v12, a2, a3, 1, a4);
    if ((_DWORD)result)
      return result;
  }
  else
  {
    v11 = 0;
  }
  v13 = ausdk::AUScope::SafeGetElement((AUMagnitudeDifferenceNoiseSuppressorV4 *)((char *)this + 80), v11);
  BufferList = ausdk::AUBufferList::GetBufferList((ausdk::AUBufferList *)(v13 + 144));
  v15 = ausdk::AUScope::SafeGetElement((AUMagnitudeDifferenceNoiseSuppressorV4 *)((char *)this + 80), 0);
  v19[0] = ausdk::AUBufferList::GetBufferList((ausdk::AUBufferList *)(v15 + 144));
  v19[1] = BufferList;
  v19[2] = BufferList;
  v16 = ausdk::AUScope::SafeGetElement((AUMagnitudeDifferenceNoiseSuppressorV4 *)((char *)this + 80), 0);
  v19[3] = ausdk::AUBufferList::GetBufferList((ausdk::AUBufferList *)(v16 + 144));
  v17 = (ausdk::AUBufferList *)(Element + 144);
  v18[0] = ausdk::AUBufferList::GetBufferList(v17);
  v18[1] = ausdk::AUBufferList::GetBufferList(v17);
  v18[2] = ausdk::AUBufferList::GetBufferList(v17);
  v18[3] = ausdk::AUBufferList::GetBufferList(v17);
  return (*(uint64_t (**)(AUMagnitudeDifferenceNoiseSuppressorV4 *, unsigned int *, uint64_t, uint64_t, _QWORD *, uint64_t, _QWORD *))(*(_QWORD *)this + 184))(this, a2, a4, 4, v19, 4, v18);
}

uint64_t AUMagnitudeDifferenceNoiseSuppressorV4::GetParameterList(AUMagnitudeDifferenceNoiseSuppressorV4 *this, int a2, unsigned int *a3, unsigned int *a4)
{
  unsigned int v4;

  if (a2)
  {
    v4 = 0;
  }
  else
  {
    if (a3)
    {
      *(_OWORD *)a3 = xmmword_1B66A2070;
      *((_OWORD *)a3 + 1) = xmmword_1B66A2080;
      *((_OWORD *)a3 + 2) = xmmword_1B66A2090;
      *((_OWORD *)a3 + 3) = xmmword_1B66A20A0;
      *((_QWORD *)a3 + 8) = 0x1600000015;
    }
    v4 = 18;
  }
  *a4 = v4;
  return 0;
}

uint64_t AUMagnitudeDifferenceNoiseSuppressorV4::GetParameterInfo(AUMagnitudeDifferenceNoiseSuppressorV4 *this, int a2, int a3, AudioUnitParameterInfo *buffer)
{
  uint64_t result;
  uint64_t v6;
  AudioUnitParameterValue v7;
  const __CFString *v8;
  AudioUnitParameterOptions v9;
  const __CFString *v10;
  const __CFString *v17;
  AudioUnitParameterOptions v18;

  buffer->flags = 0x40000000;
  buffer->unitName = 0;
  if (a2)
    return 4294956418;
  switch(a3)
  {
    case 0:
      buffer->cfNameString = CFSTR("noise supp mode");
      buffer->flags = 1207959552;
      CFStringGetCString(CFSTR("noise supp mode"), buffer->name, 52, 0x8000100u);
      result = 0;
      buffer->unit = kAudioUnitParameterUnit_Indexed;
      v6 = 0x4000000000000000;
      goto LABEL_9;
    case 1:
      buffer->cfNameString = CFSTR("noise supp level");
      buffer->flags = 1207959552;
      CFStringGetCString(CFSTR("noise supp level"), buffer->name, 52, 0x8000100u);
      result = 0;
      buffer->unit = kAudioUnitParameterUnit_Decibels;
      *(_QWORD *)&buffer->minValue = 3256877056;
      v7 = -24.0;
      goto LABEL_10;
    case 2:
      v8 = CFSTR("(I) speech probability");
      goto LABEL_32;
    case 3:
      buffer->cfNameString = CFSTR("SPL Meter Calibration");
      buffer->flags = 1207959552;
      CFStringGetCString(CFSTR("SPL Meter Calibration"), buffer->name, 52, 0x8000100u);
      result = 0;
      buffer->unit = kAudioUnitParameterUnit_Decibels;
      *(_QWORD *)&buffer->minValue = 0x42C80000C1C80000;
      v7 = 80.0;
      goto LABEL_10;
    case 4:
      buffer->cfNameString = CFSTR("SPL Time Constant");
      buffer->flags = 1207959552;
      CFStringGetCString(CFSTR("SPL Time Constant"), buffer->name, 52, 0x8000100u);
      result = 0;
      buffer->unit = kAudioUnitParameterUnit_Generic;
      v6 = 0x4120000000000000;
LABEL_9:
      *(_QWORD *)&buffer->minValue = v6;
      v7 = 2.0;
LABEL_10:
      v9 = buffer->flags | 0x80000000;
      goto LABEL_22;
    case 5:
      v8 = CFSTR("occlusion mode");
      goto LABEL_32;
    case 6:
      v8 = CFSTR("(I) occ_2ndMic confd");
      goto LABEL_32;
    case 7:
      v8 = CFSTR("(I) ns_auto_mode");
      goto LABEL_32;
    case 8:
      v8 = CFSTR("auto_blend_alpha");
      goto LABEL_32;
    case 9:
      v10 = CFSTR("(I) noise SPL (gated PS)");
      goto LABEL_17;
    case 10:
      v10 = CFSTR("(I) noise SPL (one mic)");
LABEL_17:
      buffer->cfNameString = v10;
      buffer->flags = 1207959552;
      CFStringGetCString(v10, buffer->name, 52, 0x8000100u);
      result = 0;
      buffer->unit = kAudioUnitParameterUnit_Generic;
      *(_QWORD *)&buffer->minValue = 0x42C8000041A00000;
      v7 = 40.0;
      goto LABEL_21;
    case 11:
      v8 = CFSTR("(I) 1mic vad");
      goto LABEL_32;
    case 12:
      v8 = CFSTR("(I) 2mic vad");
      goto LABEL_32;
    case 13:
      buffer->cfNameString = CFSTR("auto NS level");
      buffer->flags = 1207959552;
      CFStringGetCString(CFSTR("auto NS level"), buffer->name, 52, 0x8000100u);
      result = 0;
      buffer->unit = kAudioUnitParameterUnit_Generic;
      *(_QWORD *)&buffer->minValue = 0xC0A00000C1C80000;
      v7 = -24.0;
LABEL_21:
      v9 = buffer->flags | 0x8000;
LABEL_22:
      buffer->defaultValue = v7;
      buffer->flags = v9;
      return result;
    case 14:
      buffer->cfNameString = CFSTR("AGC dynamic gain");
      buffer->flags = 1207959552;
      CFStringGetCString(CFSTR("AGC dynamic gain"), buffer->name, 52, 0x8000100u);
      result = 0;
      buffer->unit = kAudioUnitParameterUnit_Decibels;
      __asm { FMOV            V0.2S, #-20.0 }
      break;
    case 15:
      buffer->cfNameString = CFSTR("AGC post gain");
      buffer->flags = 1207959552;
      CFStringGetCString(CFSTR("AGC post gain"), buffer->name, 52, 0x8000100u);
      result = 0;
      buffer->unit = kAudioUnitParameterUnit_Decibels;
      __asm { FMOV            V0.2S, #-20.0 }
      *(_QWORD *)&buffer->minValue = _D0;
      buffer->defaultValue = 0.0;
      return result;
    case 16:
      v17 = CFSTR("hb minus lb_sep");
      goto LABEL_28;
    case 17:
      v8 = CFSTR("P_OCCL_based_alpha");
      goto LABEL_32;
    case 18:
      v17 = CFSTR("lb_sep");
LABEL_28:
      buffer->cfNameString = v17;
      buffer->flags = 1207959552;
      CFStringGetCString(v17, buffer->name, 52, 0x8000100u);
      result = 0;
      buffer->unit = kAudioUnitParameterUnit_Generic;
      _D0 = 0x41A00000C0A00000;
      break;
    case 19:
      buffer->cfNameString = CFSTR("Test_Switch");
      buffer->flags = 1207959552;
      CFStringGetCString(CFSTR("Test_Switch"), buffer->name, 52, 0x8000100u);
      result = 0;
      buffer->unit = kAudioUnitParameterUnit_Generic;
      *(_QWORD *)&buffer->minValue = 0x3F80000000000000;
      v18 = buffer->flags | 0x80000000;
      goto LABEL_34;
    case 20:
      v8 = CFSTR("DL Speech Prob");
      goto LABEL_32;
    case 21:
      v8 = CFSTR("Inv 2mic vad");
LABEL_32:
      buffer->cfNameString = v8;
      buffer->flags = 1207959552;
      CFStringGetCString(v8, buffer->name, 52, 0x8000100u);
      result = 0;
      buffer->unit = kAudioUnitParameterUnit_Generic;
      _D0 = 0x3F80000000000000;
      break;
    case 22:
      buffer->cfNameString = CFSTR("tmv - itmv");
      buffer->flags = 1207959552;
      CFStringGetCString(CFSTR("tmv - itmv"), buffer->name, 52, 0x8000100u);
      result = 0;
      buffer->unit = kAudioUnitParameterUnit_Generic;
      _D0 = 0x3FC00000BF000000;
      break;
    default:
      return 4294956418;
  }
  *(_QWORD *)&buffer->minValue = _D0;
  v18 = buffer->flags | 0x8000;
LABEL_34:
  buffer->defaultValue = 0.0;
  buffer->flags = v18;
  return result;
}

uint64_t AUMagnitudeDifferenceNoiseSuppressorV4::RestoreState(OpaqueAudioComponentInstance **this, const void *a2)
{
  uint64_t result;

  result = ausdk::AUBase::RestoreState(this, a2);
  if (!(_DWORD)result)
    ++*((_DWORD *)this + 133);
  return result;
}

uint64_t AUMagnitudeDifferenceNoiseSuppressorV4::GetParameterValueStrings(AUMagnitudeDifferenceNoiseSuppressorV4 *this, int a2, int a3, const __CFArray **a4)
{
  uint64_t result;
  const __CFArray *v6;
  __int128 v7;
  const __CFString *v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  if (a2)
    return 4294956430;
  result = 0;
  if (!a3)
  {
    if (a4)
    {
      v7 = xmmword_1E69D5508;
      v8 = CFSTR("TwoMic");
      v6 = CFArrayCreate(0, (const void **)&v7, 3, 0);
      result = 0;
      *a4 = v6;
    }
  }
  return result;
}

double AUMagnitudeDifferenceNoiseSuppressorV4::GetLatency(AUMagnitudeDifferenceNoiseSuppressorV4 *this)
{
  return 0.0;
}

double AUMagnitudeDifferenceNoiseSuppressorV4::GetTailTime(AUMagnitudeDifferenceNoiseSuppressorV4 *this)
{
  return 0.0;
}

uint64_t AUMagnitudeDifferenceNoiseSuppressorV4::SupportsTail(AUMagnitudeDifferenceNoiseSuppressorV4 *this)
{
  return 1;
}

BOOL AUMagnitudeDifferenceNoiseSuppressorV4::StreamFormatWritable(AUMagnitudeDifferenceNoiseSuppressorV4 *this)
{
  return *((_BYTE *)this + 17) == 0;
}

uint64_t AUMagnitudeDifferenceNoiseSuppressorV4::SupportedNumChannels(AUMagnitudeDifferenceNoiseSuppressorV4 *this, const AUChannelInfo **a2)
{
  if (a2)
    *a2 = (const AUChannelInfo *)&AUMagnitudeDifferenceNoiseSuppressorV4::SupportedNumChannels(AUChannelInfo const**)::sSupportedChannelConfigs;
  return 1;
}

uint64_t AUMagnitudeDifferenceNoiseSuppressorV4::ValidFormat(AUMagnitudeDifferenceNoiseSuppressorV4 *this, const AudioStreamBasicDescription *a2, unsigned int a3, AudioStreamBasicDescription *a4)
{
  int v5;
  uint64_t result;
  char v7;
  __int128 v8;
  _OWORD v9[2];
  uint64_t v10;
  int v11;

  v5 = (int)a2;
  result = ausdk::ASBD::IsCommonFloat32((ausdk::ASBD *)a4, a2);
  if ((v5 - 1) <= 1)
  {
    if (a4->mFormatID == 1718773105)
      v7 = result;
    else
      v7 = 1;
    if ((v7 & 1) == 0)
    {
      v8 = *(_OWORD *)&a4->mBytesPerPacket;
      v9[0] = *(_OWORD *)&a4->mSampleRate;
      v9[1] = v8;
      v10 = *(_QWORD *)&a4->mBitsPerChannel;
      DWORD2(v9[0]) = 1819304813;
      v11 = 0;
      LODWORD(result) = CAStreamBasicDescription::IdentifyCommonPCMFormat(v9, &v11, 0);
      if (v11 != 4)
        LODWORD(result) = 0;
    }
    if (a4->mChannelsPerFrame == 1)
      return result;
    else
      return 0;
  }
  return result;
}

uint64_t AUMagnitudeDifferenceNoiseSuppressorV4::ShouldBypassEffect(AUMagnitudeDifferenceNoiseSuppressorV4 *this)
{
  return *((unsigned __int8 *)this + 528);
}

uint64_t AUMagnitudeDifferenceNoiseSuppressorV4::SetBypassEffect(uint64_t this, char a2)
{
  *(_BYTE *)(this + 528) = a2;
  return this;
}

void AUMagnitudeDifferenceNoiseSuppressorV4::UpdateParameters(AUMagnitudeDifferenceNoiseSuppressorV4 *this)
{
  uint64_t v2;
  ausdk::AUElement *v3;
  ausdk::AUElement **v4;
  __n128 v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  ausdk::AUElement *v9;
  ausdk::AUElement **v10;
  __n128 v11;
  uint64_t v12;
  uint64_t v13;
  ausdk::AUElement *v14;
  ausdk::AUElement **v15;
  uint64_t v16;
  ausdk::AUElement *v17;
  ausdk::AUElement **v18;
  float Parameter;
  uint64_t v20;
  uint64_t v21;
  ausdk::AUElement *v22;
  ausdk::AUElement **v23;
  uint64_t v24;
  ausdk::AUElement *v25;
  ausdk::AUElement **v26;

  v2 = *((_QWORD *)this + 9);
  if (v2)
  {
    v3 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v2 + 32))(v2, 0);
  }
  else
  {
    v4 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v4)
      v3 = 0;
    else
      v3 = *v4;
  }
  v5.n128_f32[0] = ausdk::AUElement::GetParameter(v3, 1u);
  v6 = *((_QWORD *)this + 68);
  if (v6)
  {
    v7 = (int)v5.n128_f32[0];
    if ((int)v5.n128_f32[0] >= 0)
      v7 = -v7;
    *(_DWORD *)(v6 + 52) = v7;
    *(_DWORD *)(v6 + 472) = 1;
  }
  v8 = *((_QWORD *)this + 9);
  if (v8)
  {
    v9 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD, __n128))(*(_QWORD *)v8 + 32))(v8, 0, v5);
  }
  else
  {
    v10 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v10)
      v9 = 0;
    else
      v9 = *v10;
  }
  v11.n128_f32[0] = ausdk::AUElement::GetParameter(v9, 0);
  v12 = *((_QWORD *)this + 68);
  if (v12)
    *(_DWORD *)(v12 + 428) = (int)v11.n128_f32[0];
  v13 = *((_QWORD *)this + 9);
  if (v13)
  {
    v14 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD, __n128))(*(_QWORD *)v13 + 32))(v13, 0, v11);
  }
  else
  {
    v15 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v15)
      v14 = 0;
    else
      v14 = *v15;
  }
  *(float *)(*((_QWORD *)this + 68) + 356) = ausdk::AUElement::GetParameter(v14, 3u);
  v16 = *((_QWORD *)this + 9);
  if (v16)
  {
    v17 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v16 + 32))(v16, 0);
  }
  else
  {
    v18 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v18)
      v17 = 0;
    else
      v17 = *v18;
  }
  Parameter = ausdk::AUElement::GetParameter(v17, 4u);
  v20 = *((_QWORD *)this + 68);
  *(float *)(v20 + 360) = 1.0
                        - expf(-1.0 / (float)(Parameter * (float)((float)*(int *)(v20 + 8) / (float)*(int *)(v20 + 4))));
  v21 = *((_QWORD *)this + 9);
  if (v21)
  {
    v22 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v21 + 32))(v21, 0);
  }
  else
  {
    v23 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v23)
      v22 = 0;
    else
      v22 = *v23;
  }
  *(float *)(*((_QWORD *)this + 68) + 624) = ausdk::AUElement::GetParameter(v22, 0x13u);
  v24 = *((_QWORD *)this + 9);
  if (v24)
  {
    v25 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v24 + 32))(v24, 0);
  }
  else
  {
    v26 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v26)
      v25 = 0;
    else
      v25 = *v26;
  }
  *(float *)(*((_QWORD *)this + 68) + 628) = ausdk::AUElement::GetParameter(v25, 0x14u);
}

std::string *std::__fs::filesystem::path::path[abi:ne180100]<char [6],void>(std::string *this, char *a2)
{
  char *v3;

  *(_OWORD *)&this->__r_.__value_.__l.__data_ = 0uLL;
  this->__r_.__value_.__r.__words[2] = 0;
  v3 = a2 - 1;
  while (*++v3)
    ;
  std::string::append[abi:ne180100]<char const*,0>(this, a2, v3);
  return this;
}

void sub_1B636432C(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

std::string *std::__fs::filesystem::path::path[abi:ne180100]<char [2],void>(std::string *this, char *a2)
{
  char *v3;

  *(_OWORD *)&this->__r_.__value_.__l.__data_ = 0uLL;
  this->__r_.__value_.__r.__words[2] = 0;
  v3 = a2 - 1;
  while (*++v3)
    ;
  std::string::append[abi:ne180100]<char const*,0>(this, a2, v3);
  return this;
}

void sub_1B6364384(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

uint64_t applesauce::raii::v1::detail::ScopeGuard<MigrateAudioUnitAssets::$_0,applesauce::raii::v1::detail::StackExitPolicy>::~ScopeGuard(uint64_t a1)
{
  BNNSGraphCompileOptionsDestroy();
  return a1;
}

uint64_t boost::uuids::detail::random_provider_base::destroy(uint64_t this)
{
  if ((this & 0x80000000) == 0)
    return close(this);
  return this;
}

void boost::throw_exception<boost::uuids::entropy_error>(const std::runtime_error *a1, int8x16_t *a2)
{
  char *exception;
  std::runtime_error_vtbl *v5;

  exception = (char *)__cxa_allocate_exception(0x48uLL);
  *(_QWORD *)exception = &unk_1E69B5620;
  std::runtime_error::runtime_error((std::runtime_error *)(exception + 8), a1);
  *(_QWORD *)exception = &off_1E69D55A0;
  *((_QWORD *)exception + 1) = &unk_1E69D55D0;
  v5 = a1[1].__vftable;
  *((_QWORD *)exception + 6) = 0;
  *((_QWORD *)exception + 7) = 0;
  *((_QWORD *)exception + 3) = v5;
  *((_QWORD *)exception + 4) = &unk_1E69D5600;
  *((_QWORD *)exception + 5) = 0;
  *((_DWORD *)exception + 16) = a2[1].i32[0];
  *((int8x16_t *)exception + 3) = vextq_s8(*a2, *a2, 8uLL);
}

uint64_t boost::wrapexcept<boost::uuids::entropy_error>::~wrapexcept(uint64_t a1)
{
  *(_QWORD *)(a1 + 32) = &unk_1E69B5678;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr((uint64_t *)(a1 + 40));
  std::runtime_error::~runtime_error((std::runtime_error *)(a1 + 8));
  return a1;
}

uint64_t boost::wrapexcept<boost::uuids::entropy_error>::clone(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = operator new();
  *(_QWORD *)v2 = &unk_1E69B5620;
  std::runtime_error::runtime_error((std::runtime_error *)(v2 + 8), (const std::runtime_error *)(a1 + 8));
  *(_QWORD *)(v2 + 8) = &off_1E69D5620;
  *(_QWORD *)(v2 + 24) = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(v2 + 32) = &unk_1E69B5678;
  v3 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(v2 + 40) = v3;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 24))(v3);
  *(_OWORD *)(v2 + 48) = *(_OWORD *)(a1 + 48);
  *(_DWORD *)(v2 + 64) = *(_DWORD *)(a1 + 64);
  *(_QWORD *)v2 = &off_1E69D55A0;
  *(_QWORD *)(v2 + 8) = &unk_1E69D55D0;
  *(_QWORD *)(v2 + 32) = &unk_1E69D5600;
  boost::exception_detail::copy_boost_exception(v2 + 32, a1 + 32);
  return v2;
}

void sub_1B6364590(_Unwind_Exception *a1)
{
  uint64_t v1;
  std::runtime_error *v2;

  std::runtime_error::~runtime_error(v2);
  MEMORY[0x1BCC95CEC](v1, 0x10F1C40261F87E4);
  _Unwind_Resume(a1);
}

void boost::wrapexcept<boost::uuids::entropy_error>::rethrow(uint64_t a1)
{
  void *exception;

  exception = __cxa_allocate_exception(0x48uLL);
  boost::wrapexcept<boost::uuids::entropy_error>::wrapexcept((uint64_t)exception, a1);
}

void sub_1B6364610(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void boost::wrapexcept<boost::uuids::entropy_error>::~wrapexcept(uint64_t a1)
{
  *(_QWORD *)(a1 + 32) = &unk_1E69B5678;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr((uint64_t *)(a1 + 40));
  std::runtime_error::~runtime_error((std::runtime_error *)(a1 + 8));
  JUMPOUT(0x1BCC95CECLL);
}

void `non-virtual thunk to'boost::wrapexcept<boost::uuids::entropy_error>::~wrapexcept(uint64_t a1)
{
  *(_QWORD *)(a1 + 24) = &unk_1E69B5678;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr((uint64_t *)(a1 + 32));
  std::runtime_error::~runtime_error((std::runtime_error *)a1);
}

{
  *(_QWORD *)(a1 + 24) = &unk_1E69B5678;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr((uint64_t *)(a1 + 32));
  std::runtime_error::~runtime_error((std::runtime_error *)a1);
  JUMPOUT(0x1BCC95CECLL);
}

uint64_t boost::uuids::entropy_error::errcode(boost::uuids::entropy_error *this)
{
  return *((_QWORD *)this + 2);
}

void `non-virtual thunk to'boost::wrapexcept<boost::uuids::entropy_error>::~wrapexcept(_QWORD *a1)
{
  *a1 = &unk_1E69B5678;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr(a1 + 1);
  std::runtime_error::~runtime_error((std::runtime_error *)(a1 - 3));
}

{
  *a1 = &unk_1E69B5678;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr(a1 + 1);
  std::runtime_error::~runtime_error((std::runtime_error *)(a1 - 3));
  JUMPOUT(0x1BCC95CECLL);
}

uint64_t boost::wrapexcept<boost::uuids::entropy_error>::wrapexcept(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  __int128 v5;

  *(_QWORD *)a1 = &unk_1E69B5620;
  std::runtime_error::runtime_error((std::runtime_error *)(a1 + 8), (const std::runtime_error *)(a2 + 8));
  *(_QWORD *)(a1 + 8) = &off_1E69D5620;
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = &unk_1E69B5678;
  v4 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 40) = v4;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 24))(v4);
  v5 = *(_OWORD *)(a2 + 48);
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = v5;
  *(_QWORD *)a1 = &off_1E69D55A0;
  *(_QWORD *)(a1 + 8) = &unk_1E69D55D0;
  *(_QWORD *)(a1 + 32) = &unk_1E69D5600;
  return a1;
}

void sub_1B6364840(_Unwind_Exception *a1)
{
  std::runtime_error *v1;

  std::runtime_error::~runtime_error(v1);
  _Unwind_Resume(a1);
}

void boost::uuids::entropy_error::~entropy_error(std::runtime_error *this)
{
  std::runtime_error::~runtime_error(this);
  JUMPOUT(0x1BCC95CECLL);
}

uint64_t AUSM::GlobalProperties::setProperty(AUSM::GlobalProperties *this, uint64_t a2, CFTypeRef *a3, uint64_t a4, uint64_t a5)
{
  _BOOL8 v6;
  uint64_t **v7;
  uint64_t result;
  int v9;
  unsigned int v10;
  uint64_t **v11;
  uint64_t **v12;
  uint64_t **v13;
  int v14;
  int v15;
  int v16;

  if ((_DWORD)a2 == 5685)
  {
    v6 = *(_DWORD *)a3 != 0;
    v16 = 3235;
    v7 = std::__tree<std::__value_type<unsigned int,std::unique_ptr<AUSM::PropertyDescriptor>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::unique_ptr<AUSM::PropertyDescriptor>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::unique_ptr<AUSM::PropertyDescriptor>>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int &&>,std::tuple<>>((uint64_t **)this + 5, 0xCA3u, &v16);
    (*(void (**)(uint64_t *, _BOOL8))(*v7[5] + 64))(v7[5], v6);
    return 0;
  }
  else
  {
    v9 = a2;
    result = AUSM::Properties::setProperty(this, a2, a3, a4, a5);
    if (v9 == 3110 && !(_DWORD)result)
    {
      v10 = atomic_load((unsigned int *)this + 380);
      v11 = (uint64_t **)((char *)this + 40);
      if (v10 == 3)
      {
        v15 = 3101;
        v12 = std::__tree<std::__value_type<unsigned int,std::unique_ptr<AUSM::PropertyDescriptor>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::unique_ptr<AUSM::PropertyDescriptor>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::unique_ptr<AUSM::PropertyDescriptor>>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int &&>,std::tuple<>>(v11, 0xC1Du, &v15);
        result = 0;
        *((_DWORD *)v12[5] + 3) = 3;
      }
      else
      {
        v14 = 3101;
        v13 = std::__tree<std::__value_type<unsigned int,std::unique_ptr<AUSM::PropertyDescriptor>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::unique_ptr<AUSM::PropertyDescriptor>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::unique_ptr<AUSM::PropertyDescriptor>>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int &&>,std::tuple<>>(v11, 0xC1Du, &v14);
        result = 0;
        *((_DWORD *)v13[5] + 3) = 0;
      }
    }
  }
  return result;
}

uint64_t **std::__tree<std::__value_type<unsigned int,std::unique_ptr<AUSM::PropertyDescriptor>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::unique_ptr<AUSM::PropertyDescriptor>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::unique_ptr<AUSM::PropertyDescriptor>>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int &&>,std::tuple<>>(uint64_t **a1, unsigned int a2, _DWORD *a3)
{
  uint64_t *v5;
  uint64_t **v6;
  uint64_t **v7;
  unsigned int v8;
  _DWORD *v9;

  v6 = a1 + 1;
  v5 = a1[1];
  if (v5)
  {
    while (1)
    {
      while (1)
      {
        v7 = (uint64_t **)v5;
        v8 = *((_DWORD *)v5 + 8);
        if (v8 <= a2)
          break;
        v5 = *v7;
        v6 = v7;
        if (!*v7)
          goto LABEL_9;
      }
      if (v8 >= a2)
        break;
      v5 = v7[1];
      if (!v5)
      {
        v6 = v7 + 1;
        goto LABEL_9;
      }
    }
  }
  else
  {
    v7 = a1 + 1;
LABEL_9:
    v9 = operator new(0x30uLL);
    v9[8] = *a3;
    *((_QWORD *)v9 + 5) = 0;
    std::__tree<std::__value_type<double,int>,std::__map_value_compare<double,std::__value_type<double,int>,std::less<double>,true>,std::allocator<std::__value_type<double,int>>>::__insert_node_at(a1, (uint64_t)v7, v6, (uint64_t *)v9);
    return (uint64_t **)v9;
  }
  return v7;
}

uint64_t AUSM::GlobalProperties::GlobalProperties(uint64_t a1, uint64_t a2, __int128 *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  std::string::size_type v11;
  CFArrayRef CFArray;
  CFArrayRef v13;
  uint64_t v19;
  std::string *v20;
  uint64_t *v21;
  uint64_t **v22;
  uint64_t **v23;
  uint64_t **v24;
  unsigned int v25;
  _DWORD *v26;
  uint64_t v27;
  std::string *v28;
  uint64_t *v29;
  uint64_t **v30;
  uint64_t **v31;
  unsigned int v32;
  _DWORD *v33;
  uint64_t v34;
  std::string *v35;
  uint64_t *v36;
  uint64_t **v37;
  uint64_t **v38;
  unsigned int v39;
  _DWORD *v40;
  uint64_t v41;
  std::string *v42;
  uint64_t *v43;
  uint64_t **v44;
  uint64_t **v45;
  unsigned int v46;
  _DWORD *v47;
  uint64_t v48;
  std::string *v49;
  uint64_t v50;
  std::string *v51;
  uint64_t *v52;
  uint64_t **v53;
  unsigned int v54;
  _DWORD *v55;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  __int128 v89;
  uint64_t v90;
  CFArrayRef v91;
  CFArrayRef v92;
  __int128 v93;
  uint64_t v94;

  v94 = *MEMORY[0x1E0C80C00];
  v4 = a1 + 1508;
  v5 = AUSM::Properties::Properties(a1, a2, 0, 0, a3);
  *(_QWORD *)(v5 + 72) = 0x300000003;
  v6 = v5 + 72;
  *(_DWORD *)(v5 + 80) = 64;
  v7 = v5 + 80;
  *(_WORD *)(v5 + 84) = 0;
  v8 = v5 + 84;
  *(_BYTE *)(v5 + 86) = 0;
  v9 = v5 + 86;
  *(_DWORD *)(v5 + 88) = 3;
  v10 = v5 + 88;
  *(_BYTE *)(v5 + 92) = 0;
  v62 = v5 + 92;
  *(_DWORD *)(v5 + 96) = 1;
  v61 = v5 + 96;
  *(_OWORD *)(v5 + 112) = xmmword_1B6629CC0;
  v60 = v5 + 112;
  *(_OWORD *)(v5 + 128) = xmmword_1B6629CC0;
  v59 = v5 + 128;
  *(_QWORD *)(v5 + 144) = 0;
  v58 = v5 + 144;
  *(_QWORD *)v5 = &off_1E69D5650;
  *(_BYTE *)(v5 + 163) = 1;
  v57 = v5 + 163;
  *(_QWORD *)(v5 + 152) = 0;
  *(_DWORD *)(v5 + 159) = 0;
  *(_QWORD *)(v5 + 164) = 0x461C400043160000;
  v11 = v5 + 164;
  *(_QWORD *)(v5 + 176) = 0;
  *(_QWORD *)(v5 + 184) = 850045863;
  *(_OWORD *)(v5 + 192) = 0u;
  *(_OWORD *)(v5 + 208) = 0u;
  *(_OWORD *)(v5 + 224) = 0u;
  *(_OWORD *)(v5 + 240) = 0u;
  *(_QWORD *)(v5 + 256) = 850045863;
  *(_OWORD *)(v5 + 264) = 0u;
  *(_OWORD *)(v5 + 280) = 0u;
  *(_OWORD *)(v5 + 296) = 0u;
  *(_OWORD *)(v5 + 312) = 0u;
  v86 = v5 + 248;
  *(_OWORD *)(v5 + 336) = 0u;
  *(_OWORD *)(v5 + 352) = 0u;
  *(_OWORD *)(v5 + 368) = 0u;
  *(_OWORD *)(v5 + 384) = 0u;
  *(_OWORD *)(v5 + 408) = 0u;
  *(_OWORD *)(v5 + 424) = 0u;
  *(_OWORD *)(v5 + 440) = 0u;
  *(_OWORD *)(v5 + 456) = 0u;
  v84 = v5 + 392;
  *(_OWORD *)(v5 + 480) = 0u;
  *(_OWORD *)(v5 + 496) = 0u;
  *(_OWORD *)(v5 + 512) = 0u;
  *(_OWORD *)(v5 + 528) = 0u;
  *(_OWORD *)(v5 + 584) = 0u;
  *(_OWORD *)(v5 + 600) = 0u;
  *(_OWORD *)(v5 + 552) = 0u;
  *(_OWORD *)(v5 + 568) = 0u;
  v82 = v5 + 536;
  *(_OWORD *)(v5 + 656) = 0u;
  *(_OWORD *)(v5 + 672) = 0u;
  *(_OWORD *)(v5 + 624) = 0u;
  *(_OWORD *)(v5 + 640) = 0u;
  *(_OWORD *)(v5 + 728) = 0u;
  *(_OWORD *)(v5 + 744) = 0u;
  *(_OWORD *)(v5 + 696) = 0u;
  *(_OWORD *)(v5 + 712) = 0u;
  v88 = v5 + 680;
  *(_OWORD *)(v5 + 800) = 0u;
  *(_OWORD *)(v5 + 816) = 0u;
  *(_OWORD *)(v5 + 768) = 0u;
  *(_OWORD *)(v5 + 784) = 0u;
  *(_OWORD *)(v5 + 872) = 0u;
  *(_OWORD *)(v5 + 888) = 0u;
  *(_OWORD *)(v5 + 840) = 0u;
  *(_OWORD *)(v5 + 856) = 0u;
  v76 = v5 + 824;
  *(_OWORD *)(v5 + 944) = 0u;
  *(_OWORD *)(v5 + 960) = 0u;
  *(_OWORD *)(v5 + 912) = 0u;
  *(_OWORD *)(v5 + 928) = 0u;
  *(_OWORD *)(v5 + 1016) = 0u;
  *(_OWORD *)(v5 + 1032) = 0u;
  *(_OWORD *)(v5 + 984) = 0u;
  *(_OWORD *)(v5 + 1000) = 0u;
  v80 = v5 + 968;
  *(_OWORD *)(v5 + 1104) = 0u;
  *(_OWORD *)(v5 + 1088) = 0u;
  *(_OWORD *)(v5 + 1072) = 0u;
  *(_OWORD *)(v5 + 1056) = 0u;
  *(_OWORD *)(v5 + 1172) = 0u;
  *(_OWORD *)(v5 + 1144) = 0u;
  *(_OWORD *)(v5 + 1160) = 0u;
  v65 = v5 + 1112;
  *(_OWORD *)(v5 + 1128) = 0u;
  *(_OWORD *)(v5 + 1240) = 0u;
  *(_OWORD *)(v5 + 1256) = 0u;
  *(_OWORD *)(v5 + 1208) = 0u;
  *(_OWORD *)(v5 + 1224) = 0u;
  v73 = v5 + 1192;
  *(_OWORD *)(v5 + 1329) = 0u;
  *(_OWORD *)(v5 + 1304) = 0u;
  *(_OWORD *)(v5 + 1320) = 0u;
  v79 = v5 + 1272;
  *(_OWORD *)(v5 + 1288) = 0u;
  *(_DWORD *)(v5 + 1348) = 3;
  *(_OWORD *)(v5 + 1400) = 0u;
  *(_OWORD *)(v5 + 1416) = 0u;
  *(_OWORD *)(v5 + 1368) = 0u;
  *(_OWORD *)(v5 + 1384) = 0u;
  v77 = v5 + 1424;
  v78 = v5 + 1352;
  *(_OWORD *)(v5 + 1481) = 0u;
  *(_OWORD *)(v5 + 1472) = 0u;
  *(_OWORD *)(v5 + 1456) = 0u;
  *(_OWORD *)(v5 + 1440) = 0u;
  *(_DWORD *)(v5 + 1500) = 1;
  *(_OWORD *)(v5 + 1592) = 0u;
  *(_OWORD *)(v5 + 1608) = 0u;
  *(_OWORD *)(v5 + 1560) = 0u;
  *(_OWORD *)(v5 + 1576) = 0u;
  v72 = v5 + 1528;
  *(_OWORD *)(v5 + 1544) = 0u;
  *(_OWORD *)(v5 + 1672) = 0u;
  *(_OWORD *)(v5 + 1688) = 0u;
  *(_OWORD *)(v5 + 1640) = 0u;
  *(_OWORD *)(v5 + 1656) = 0u;
  *(_OWORD *)(v5 + 1760) = 0u;
  *(_OWORD *)(v5 + 1744) = 0u;
  *(_OWORD *)(v5 + 1728) = 0u;
  *(_OWORD *)(v5 + 1712) = 0u;
  *(_OWORD *)(v5 + 1816) = 0u;
  *(_OWORD *)(v5 + 1832) = 0u;
  *(_OWORD *)(v5 + 1784) = 0u;
  *(_OWORD *)(v5 + 1800) = 0u;
  v69 = v5 + 1768;
  v70 = v5 + 1624;
  *(_OWORD *)(v5 + 1904) = 0u;
  *(_OWORD *)(v5 + 1888) = 0u;
  *(_OWORD *)(v5 + 1872) = 0u;
  *(_OWORD *)(v5 + 1856) = 0u;
  *(_OWORD *)(v5 + 1960) = 0u;
  *(_OWORD *)(v5 + 1976) = 0u;
  *(_OWORD *)(v5 + 1928) = 0u;
  *(_OWORD *)(v5 + 1944) = 0u;
  v67 = v5 + 1912;
  *(_OWORD *)(v5 + 2048) = 0u;
  *(_OWORD *)(v5 + 2032) = 0u;
  *(_OWORD *)(v5 + 2016) = 0u;
  *(_OWORD *)(v5 + 2000) = 0u;
  *(_OWORD *)(v5 + 2104) = 0u;
  *(_OWORD *)(v5 + 2120) = 0u;
  *(_OWORD *)(v5 + 2072) = 0u;
  *(_OWORD *)(v5 + 2088) = 0u;
  v64 = v5 + 2056;
  *(_OWORD *)(v5 + 2176) = 0u;
  *(_OWORD *)(v5 + 2160) = 0u;
  *(_OWORD *)(v5 + 2144) = 0u;
  *(_QWORD *)&v89 = &v93;
  *((_QWORD *)&v89 + 1) = 4;
  v85 = v5 + 320;
  *(_QWORD *)(v5 + 328) = 850045863;
  *(_QWORD *)(v5 + 400) = 850045863;
  v83 = v5 + 464;
  *(_QWORD *)(v5 + 472) = 850045863;
  *(_QWORD *)(v5 + 544) = 850045863;
  *(_QWORD *)(v5 + 616) = 850045863;
  *(_QWORD *)(v5 + 688) = 850045863;
  *(_QWORD *)(v5 + 760) = 850045863;
  *(_QWORD *)(v5 + 832) = 850045863;
  *(_QWORD *)(v5 + 904) = 850045863;
  *(_QWORD *)(v5 + 976) = 850045863;
  *(_QWORD *)(v5 + 1048) = 850045863;
  *(_QWORD *)(v5 + 1120) = 850045863;
  *(_QWORD *)(v5 + 1192) = 0;
  *(_QWORD *)(v5 + 1200) = 850045863;
  *(_QWORD *)(v5 + 1272) = 0;
  *(_QWORD *)(v5 + 1280) = 850045863;
  *(_QWORD *)(v5 + 1352) = 0;
  *(_QWORD *)(v5 + 1360) = 850045863;
  *(_QWORD *)(v5 + 1432) = 850045863;
  *(_WORD *)(v5 + 1504) = 0;
  *(_BYTE *)(v5 + 1506) = 0;
  *(_QWORD *)v4 = 2;
  *(_BYTE *)(v5 + 1516) = 0;
  *(_DWORD *)(v5 + 1520) = 0;
  *(_QWORD *)(v5 + 1528) = 0;
  *(_QWORD *)(v5 + 1536) = 850045863;
  *(_QWORD *)(v5 + 1624) = 0;
  *(_QWORD *)(v5 + 1632) = 850045863;
  *(_QWORD *)(v5 + 1704) = 850045863;
  *(_QWORD *)(v5 + 1776) = 850045863;
  *(_QWORD *)(v5 + 1848) = 850045863;
  *(_QWORD *)(v5 + 1920) = 850045863;
  *(_QWORD *)(v5 + 1992) = 850045863;
  *(_QWORD *)(v5 + 2064) = 850045863;
  *(_QWORD *)(v5 + 2136) = 850045863;
  *(_QWORD *)(v5 + 2192) = 0;
  v93 = xmmword_1B66A20B0;
  v81 = v5 + 608;
  v74 = v5 + 1040;
  v75 = v5 + 896;
  v71 = v5 + 1600;
  v87 = v5 + 1696;
  v68 = v5 + 1840;
  v66 = v5 + 1984;
  v63 = v5 + 2128;
  CFArray = applesauce::CF::details::make_CFArrayRef<float>((uint64_t)&v89);
  v92 = CFArray;
  AUSM::AppleSauceCFWithMutex<__CFArray const*>::AppleSauceCFWithMutex(a1 + 2200, (CFTypeRef *)&v92);
  if (CFArray)
    CFRelease(CFArray);
  v93 = xmmword_1B66A20C0;
  *(_QWORD *)&v89 = &v93;
  *((_QWORD *)&v89 + 1) = 4;
  v13 = applesauce::CF::details::make_CFArrayRef<unsigned int>((uint64_t)&v89);
  v91 = v13;
  AUSM::AppleSauceCFWithMutex<__CFArray const*>::AppleSauceCFWithMutex(a1 + 2272, (CFTypeRef *)&v91);
  if (v13)
    CFRelease(v13);
  *(_QWORD *)(a1 + 2344) = 0;
  *(_QWORD *)(a1 + 2352) = 850045863;
  *(_OWORD *)(a1 + 2360) = 0u;
  *(_OWORD *)(a1 + 2376) = 0u;
  *(_OWORD *)(a1 + 2392) = 0u;
  *(_OWORD *)(a1 + 2408) = 0u;
  *(_DWORD *)(a1 + 2424) = 1056964608;
  *(_OWORD *)(a1 + 2432) = xmmword_1B66282F0;
  *(_OWORD *)(a1 + 2448) = xmmword_1B66A08A0;
  *(_QWORD *)(a1 + 2464) = 0x3F428F5C00000002;
  *(_QWORD *)(a1 + 2472) = 1;
  *(_DWORD *)(a1 + 2480) = 1;
  *(_BYTE *)(a1 + 2484) = 0;
  *(_DWORD *)(a1 + 2488) = 0;
  __asm { FMOV            V0.4S, #1.0 }
  *(_OWORD *)(v4 + 984) = _Q0;
  *(_BYTE *)(a1 + 2508) = 1;
  *(_DWORD *)(a1 + 2512) = 0;
  *(_QWORD *)(a1 + 2520) = 0;
  *(_QWORD *)(a1 + 2536) = 0;
  *(_QWORD *)(a1 + 2528) = 0;
  *(_BYTE *)(a1 + 2544) = 0;
  *(_DWORD *)(a1 + 2548) = 1;
  *(_DWORD *)(a1 + 2568) = 0;
  *(_QWORD *)(a1 + 2552) = 0;
  *(_QWORD *)(a1 + 2557) = 0;
  std::string::basic_string[abi:ne180100]<0>(&v89, "reverb room type");
  AUSM::Properties::addPropertyMapEntry<unsigned int>(a1, 0xAu, v6, &v89, 1, 1, 1, 0x100000000, 0x10000000CLL);
  if (SHIBYTE(v90) < 0)
    operator delete((void *)v89);
  std::string::basic_string[abi:ne180100]<0>(&v89, "post-processing reverb room type");
  AUSM::Properties::addPropertyMapEntry<unsigned int>(a1, 0xCC2u, a1 + 76, &v89, 1, 1, 1, 0x100000000, 0x10000000CLL);
  if (SHIBYTE(v90) < 0)
    operator delete((void *)v89);
  std::string::basic_string[abi:ne180100]<0>(&v89, "render quality");
  AUSM::Properties::addPropertyMapEntry<unsigned int>(a1, 0x1Au, v7, &v89, 1, 3, 0);
  if (SHIBYTE(v90) < 0)
    operator delete((void *)v89);
  std::string::basic_string[abi:ne180100]<0>(&v89, "offline rendering mode");
  AUSM::Properties::addPropertyMapEntry<unsigned int>(a1, 0x25u, v8, &v89, 2, 0, 0);
  if (SHIBYTE(v90) < 0)
    operator delete((void *)v89);
  std::string::basic_string[abi:ne180100]<0>(&v89, "uses internal reverb");
  AUSM::Properties::addPropertyMapEntry<unsigned int>(a1, 0x3EDu, a1 + 85, &v89, 1, 1, 1);
  if (SHIBYTE(v90) < 0)
    operator delete((void *)v89);
  std::string::basic_string[abi:ne180100]<0>(&v89, "uses headphone post-processing reverb");
  AUSM::Properties::addPropertyMapEntry<unsigned int>(a1, 0xCC3u, v9, &v89, 1, 1, 1);
  if (SHIBYTE(v90) < 0)
    operator delete((void *)v89);
  std::string::basic_string[abi:ne180100]<0>(&v89, "output type");
  AUSM::Properties::addPropertyMapEntry<unsigned int>(a1, 0xC1Cu, v10, &v89, 1, 1, 1, 0x100000001, 0x100000003);
  if (SHIBYTE(v90) < 0)
    operator delete((void *)v89);
  std::string::basic_string[abi:ne180100]<0>(&v89, "LFE lowpass frequency");
  AUSM::Properties::addPropertyMapEntry<float>(a1, 0xC24u, v11, &v89, 1, 0x141A00000uLL, 0);
  if (SHIBYTE(v90) < 0)
    operator delete((void *)v89);
  std::string::basic_string[abi:ne180100]<0>(&v89, "personalized HRTF mode");
  AUSM::Properties::addPropertyMapEntry<unsigned int>(a1, 0xC29u, v4, &v89, 1, 0, 0, 0x100000000, 0x100000002);
  if (SHIBYTE(v90) < 0)
    operator delete((void *)v89);
  std::string::basic_string[abi:ne180100]<0>(&v89, "HRTF type");
  AUSM::Properties::addPropertyMapEntry<unsigned int>(a1, 0xC2Au, a1 + 1512, &v89, 1, 0, 0, 0x100000000, 0x100000002);
  if (SHIBYTE(v90) < 0)
    operator delete((void *)v89);
  std::string::basic_string[abi:ne180100]<0>(&v89, "listen to personalized HRTF change");
  AUSM::Properties::addPropertyMapEntry<unsigned int>(a1, 0xCADu, a1 + 1516, &v89, 1, 0, 0);
  if (SHIBYTE(v90) < 0)
    operator delete((void *)v89);
  std::string::basic_string[abi:ne180100]<0>(&v89, "personalized HRTF dictionary");
  AUSM::Properties::addPropertyMapEntry<__CFDictionary const*,(decltype(nullptr))0>(a1, 0xCACu, v87, (uint64_t)&v89, 1, 0, 0);
  if (SHIBYTE(v90) < 0)
    operator delete((void *)v89);
  std::string::basic_string[abi:ne180100]<0>(&v89, "enable old reverb behavior");
  AUSM::Properties::addPropertyMapEntry<unsigned int>(a1, 0x11F8u, v62, &v89, 1, 0, 0);
  if (SHIBYTE(v90) < 0)
    operator delete((void *)v89);
  std::string::basic_string[abi:ne180100]<0>(&v89, "spatializer orientation");
  v19 = operator new();
  *(_QWORD *)v19 = off_1E69E0820;
  *(_QWORD *)(v19 + 8) = 1;
  *(_BYTE *)(v19 + 16) = 0;
  v20 = (std::string *)(v19 + 24);
  if (SHIBYTE(v90) < 0)
  {
    std::string::__init_copy_ctor_external(v20, (const std::string::value_type *)v89, *((std::string::size_type *)&v89 + 1));
  }
  else
  {
    *(_OWORD *)&v20->__r_.__value_.__l.__data_ = v89;
    *(_QWORD *)(v19 + 40) = v90;
  }
  *(_QWORD *)(v19 + 48) = v61;
  v22 = (uint64_t **)(a1 + 48);
  v21 = *(uint64_t **)(a1 + 48);
  *(_QWORD *)v19 = off_1E69D59D8;
  *(_OWORD *)(v19 + 56) = xmmword_1B66A20D0;
  v23 = (uint64_t **)(a1 + 48);
  v24 = (uint64_t **)(a1 + 48);
  if (v21)
  {
    while (1)
    {
      while (1)
      {
        v24 = (uint64_t **)v21;
        v25 = *((_DWORD *)v21 + 8);
        if (v25 < 0xC1E)
          break;
        v21 = *v24;
        v23 = v24;
        if (!*v24)
          goto LABEL_41;
      }
      if (v25 == 3101)
        break;
      v21 = v24[1];
      if (!v21)
      {
        v23 = v24 + 1;
        goto LABEL_41;
      }
    }
    (*(void (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
  }
  else
  {
LABEL_41:
    v26 = operator new(0x30uLL);
    v26[8] = 3101;
    *((_QWORD *)v26 + 5) = v19;
    std::__tree<std::__value_type<double,int>,std::__map_value_compare<double,std::__value_type<double,int>,std::less<double>,true>,std::allocator<std::__value_type<double,int>>>::__insert_node_at((uint64_t **)(a1 + 40), (uint64_t)v24, v23, (uint64_t *)v26);
  }
  if (SHIBYTE(v90) < 0)
    operator delete((void *)v89);
  std::string::basic_string[abi:ne180100]<0>(&v89, "AUSM UI version");
  AUSM::Properties::addPropertyMapEntry<unsigned int>(a1, 0xCD8u, a1 + 2472, &v89, 2, 0, 0);
  if (SHIBYTE(v90) < 0)
    operator delete((void *)v89);
  std::string::basic_string[abi:ne180100]<0>(&v89, "head orientation quaternion");
  AUSM::Properties::addPropertyMapEntry<simd_quatf>(a1, 0xC1Eu, v60, (uint64_t)&v89, 1);
  if (SHIBYTE(v90) < 0)
    operator delete((void *)v89);
  std::string::basic_string[abi:ne180100]<0>(&v89, "RM head orientation quaternion");
  AUSM::Properties::addPropertyMapEntry<simd_quatf>(a1, 0xCA3u, v59, (uint64_t)&v89, 0);
  if (SHIBYTE(v90) < 0)
    operator delete((void *)v89);
  std::string::basic_string[abi:ne180100]<0>(&v89, "listener position");
  _ZN4AUSM10Properties19addPropertyMapEntryIDv3_fEEvjRNSt3__16atomicIT_EERKNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEENS_18PropertyDescriptor8WritableENSG_7LoggingENSG_13SaveInPresetsE(a1, 0xCA5u, v58, (uint64_t)&v89);
  if (SHIBYTE(v90) < 0)
    operator delete((void *)v89);
  std::string::basic_string[abi:ne180100]<0>(&v89, "global presentation position");
  _ZN4AUSM10Properties19addPropertyMapEntryIDv3_fEEvjRNSt3__16atomicIT_EERKNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEENS_18PropertyDescriptor8WritableENSG_7LoggingENSG_13SaveInPresetsE(a1, 0xC2Bu, a1 + 2432, (uint64_t)&v89);
  if (SHIBYTE(v90) < 0)
    operator delete((void *)v89);
  std::string::basic_string[abi:ne180100]<0>(&v89, "distance parameters");
  AUSM::Properties::addPropertyMapEntry<AUSM::DistanceParameters>(a1, a1 + 2448, (uint64_t)&v89, 0);
  if (SHIBYTE(v90) < 0)
    operator delete((void *)v89);
  std::string::basic_string[abi:ne180100]<0>(&v89, "attenuation curve");
  AUSM::Properties::addPropertyMapEntry<unsigned int>(a1, 0xBC5u, a1 + 2464, &v89, 1, 0, 0, 0x100000000, 0x100000005);
  if (SHIBYTE(v90) < 0)
    operator delete((void *)v89);
  std::string::basic_string[abi:ne180100]<0>(&v89, "Listener Position Radius Limit");
  AUSM::Properties::addPropertyMapEntry<float>(a1, 0xCA6u, a1 + 168, &v89, 1, 0x100000000uLL, 0x1461C4000uLL);
  if (SHIBYTE(v90) < 0)
    operator delete((void *)v89);
  std::string::basic_string[abi:ne180100]<0>(&v89, "only frequency domain filtering");
  AUSM::Properties::addPropertyMapEntry<unsigned int>(a1, 0xC22u, a1 + 160, &v89, 2, 0, 0);
  if (SHIBYTE(v90) < 0)
    operator delete((void *)v89);
  std::string::basic_string[abi:ne180100]<0>(&v89, "use frequency domain crossfade");
  AUSM::Properties::addPropertyMapEntry<unsigned int>(a1, 0xCB2u, a1 + 161, &v89, 2, 0, 0);
  if (SHIBYTE(v90) < 0)
    operator delete((void *)v89);
  std::string::basic_string[abi:ne180100]<0>(&v89, "use transpose FIR");
  AUSM::Properties::addPropertyMapEntry<unsigned int>(a1, 0xCB3u, a1 + 162, &v89, 2, 0, 0);
  if (SHIBYTE(v90) < 0)
    operator delete((void *)v89);
  std::string::basic_string[abi:ne180100]<0>(&v89, "use spatial tuning");
  AUSM::Properties::addPropertyMapEntry<unsigned int>(a1, 0xCCEu, v57, &v89, 1, 0, 0);
  if (SHIBYTE(v90) < 0)
    operator delete((void *)v89);
  std::string::basic_string[abi:ne180100]<0>(&v89, "orientation listener mode");
  AUSM::Properties::addPropertyMapEntry<unsigned int>(a1, 0xC26u, a1 + 1520, &v89, 2, 0, 0, 0x100000000, 0x100000003);
  if (SHIBYTE(v90) < 0)
    operator delete((void *)v89);
  std::string::basic_string[abi:ne180100]<0>(&v89, "custom HRIR");
  AUSM::Properties::addCFURLAndCStringPropertyMapEntry(a1, 0xC80u, 0xC81u, v86, (const void **)&v89, 1);
  if (SHIBYTE(v90) < 0)
    operator delete((void *)v89);
  std::string::basic_string[abi:ne180100]<0>(&v89, "custom XTCIR");
  AUSM::Properties::addCFURLAndCStringPropertyMapEntry(a1, 0xC82u, 0xC83u, v85, (const void **)&v89, 1);
  if (SHIBYTE(v90) < 0)
    operator delete((void *)v89);
  std::string::basic_string[abi:ne180100]<0>(&v89, "custom room IR");
  AUSM::Properties::addCFURLAndCStringPropertyMapEntry(a1, 0xCAEu, 0xCAFu, v88, (const void **)&v89, 0);
  if (SHIBYTE(v90) < 0)
    operator delete((void *)v89);
  std::string::basic_string[abi:ne180100]<0>(&v89, "custom post-processing room IR");
  AUSM::Properties::addCFURLAndCStringPropertyMapEntry(a1, 0xCBFu, 0xCC0u, v88, (const void **)&v89, 0);
  if (SHIBYTE(v90) < 0)
    operator delete((void *)v89);
  std::string::basic_string[abi:ne180100]<0>(&v89, "custom early reflection IR");
  AUSM::Properties::addCFURLAndCStringPropertyMapEntry(a1, 0xC86u, 0xC87u, v84, (const void **)&v89, 0);
  if (SHIBYTE(v90) < 0)
    operator delete((void *)v89);
  std::string::basic_string[abi:ne180100]<0>(&v89, "custom post-processing early reflection IR");
  AUSM::Properties::addCFURLAndCStringPropertyMapEntry(a1, 0xCBBu, 0xCBCu, v83, (const void **)&v89, 1);
  if (SHIBYTE(v90) < 0)
    operator delete((void *)v89);
  std::string::basic_string[abi:ne180100]<0>(&v89, "custom late reverb IR");
  AUSM::Properties::addCFURLAndCStringPropertyMapEntry(a1, 0xC88u, 0xC89u, v82, (const void **)&v89, 0);
  if (SHIBYTE(v90) < 0)
    operator delete((void *)v89);
  std::string::basic_string[abi:ne180100]<0>(&v89, "custom post-processing late reverb IR");
  AUSM::Properties::addCFURLAndCStringPropertyMapEntry(a1, 0xCBDu, 0xCBEu, v81, (const void **)&v89, 1);
  if (SHIBYTE(v90) < 0)
    operator delete((void *)v89);
  std::string::basic_string[abi:ne180100]<0>(&v89, "custom near-field IR");
  AUSM::Properties::addCFURLAndCStringPropertyMapEntry(a1, 0xC8Cu, 0xC8Du, v80, (const void **)&v89, 1);
  if (SHIBYTE(v90) < 0)
    operator delete((void *)v89);
  std::string::basic_string[abi:ne180100]<0>(&v89, "parameter smoothing");
  v27 = operator new();
  *(_QWORD *)v27 = off_1E69E0820;
  *(_QWORD *)(v27 + 8) = 1;
  *(_BYTE *)(v27 + 16) = 0;
  v28 = (std::string *)(v27 + 24);
  if (SHIBYTE(v90) < 0)
  {
    std::string::__init_copy_ctor_external(v28, (const std::string::value_type *)v89, *((std::string::size_type *)&v89 + 1));
  }
  else
  {
    *(_OWORD *)&v28->__r_.__value_.__l.__data_ = v89;
    *(_QWORD *)(v27 + 40) = v90;
  }
  *(_QWORD *)(v27 + 48) = a1 + 1184;
  *(_QWORD *)v27 = off_1E69D5BB8;
  *(_OWORD *)(v27 + 56) = xmmword_1B66A20E0;
  v29 = *v22;
  v30 = (uint64_t **)(a1 + 48);
  v31 = (uint64_t **)(a1 + 48);
  if (*v22)
  {
    while (1)
    {
      while (1)
      {
        v31 = (uint64_t **)v29;
        v32 = *((_DWORD *)v29 + 8);
        if (v32 < 0xC94)
          break;
        v29 = *v31;
        v30 = v31;
        if (!*v31)
          goto LABEL_99;
      }
      if (v32 == 3219)
        break;
      v29 = v31[1];
      if (!v29)
      {
        v30 = v31 + 1;
        goto LABEL_99;
      }
    }
    (*(void (**)(uint64_t))(*(_QWORD *)v27 + 8))(v27);
  }
  else
  {
LABEL_99:
    v33 = operator new(0x30uLL);
    v33[8] = 3219;
    *((_QWORD *)v33 + 5) = v27;
    std::__tree<std::__value_type<double,int>,std::__map_value_compare<double,std::__value_type<double,int>,std::less<double>,true>,std::allocator<std::__value_type<double,int>>>::__insert_node_at((uint64_t **)(a1 + 40), (uint64_t)v31, v30, (uint64_t *)v33);
  }
  if (SHIBYTE(v90) < 0)
    operator delete((void *)v89);
  std::string::basic_string[abi:ne180100]<0>(&v89, "global DRR");
  AUSM::Properties::addPropertyMapEntry<float>(a1, 0xC97u, a1 + 1264, &v89, 0);
  if (SHIBYTE(v90) < 0)
    operator delete((void *)v89);
  std::string::basic_string[abi:ne180100]<0>(&v89, "post-processing global DRR");
  AUSM::Properties::addPropertyMapEntry<float>(a1, 0xCC1u, a1 + 1268, &v89, 1);
  if (SHIBYTE(v90) < 0)
    operator delete((void *)v89);
  std::string::basic_string[abi:ne180100]<0>(&v89, "spatializer property dictionary");
  AUSM::Properties::addPropertyMapEntry<__CFDictionary const*,(decltype(nullptr))0>(a1, 0x138Bu, v79, (uint64_t)&v89, 1, 0, 0);
  if (SHIBYTE(v90) < 0)
    operator delete((void *)v89);
  std::string::basic_string[abi:ne180100]<0>(&v89, "enable dynamics processing");
  AUSM::Properties::addPropertyMapEntry<unsigned int>(a1, 0xC28u, a1 + 1344, &v89, 1, 0, 1);
  if (SHIBYTE(v90) < 0)
    operator delete((void *)v89);
  std::string::basic_string[abi:ne180100]<0>(&v89, "output dynamics processing flags");
  AUSM::Properties::addPropertyMapEntry<unsigned int>(a1, 0x1630u, a1 + 1348, &v89, 2, 0, 1);
  if (SHIBYTE(v90) < 0)
    operator delete((void *)v89);
  std::string::basic_string[abi:ne180100]<0>(&v89, "ControlFreak preset CString");
  AUSM::Properties::addPropertyMapEntry<char [],(decltype(nullptr))0>(a1, 0x1631u, v78, (uint64_t)&v89, 1);
  if (SHIBYTE(v90) < 0)
    operator delete((void *)v89);
  std::string::basic_string[abi:ne180100]<0>(&v89, "LoudnessNormalizer preset CString");
  AUSM::Properties::addPropertyMapEntry<char [],(decltype(nullptr))0>(a1, 0x1632u, v77, (uint64_t)&v89, 1);
  if (SHIBYTE(v90) < 0)
    operator delete((void *)v89);
  std::string::basic_string[abi:ne180100]<0>(&v89, "enable head tracking");
  AUSM::Properties::addPropertyMapEntry<unsigned int>(a1, 0xC27u, a1 + 1496, &v89, 1, 0, 0);
  if (SHIBYTE(v90) < 0)
    operator delete((void *)v89);
  std::string::basic_string[abi:ne180100]<0>(&v89, "head tracking mode");
  v34 = operator new();
  *(_QWORD *)v34 = off_1E69E0820;
  *(_QWORD *)(v34 + 8) = 1;
  *(_BYTE *)(v34 + 16) = 0;
  v35 = (std::string *)(v34 + 24);
  if (SHIBYTE(v90) < 0)
  {
    std::string::__init_copy_ctor_external(v35, (const std::string::value_type *)v89, *((std::string::size_type *)&v89 + 1));
  }
  else
  {
    *(_OWORD *)&v35->__r_.__value_.__l.__data_ = v89;
    *(_QWORD *)(v34 + 40) = v90;
  }
  *(_QWORD *)(v34 + 48) = a1 + 1500;
  *(_QWORD *)v34 = off_1E69D5C30;
  *(_OWORD *)(v34 + 56) = xmmword_1B66A20F0;
  v36 = *v22;
  v37 = (uint64_t **)(a1 + 48);
  v38 = (uint64_t **)(a1 + 48);
  if (*v22)
  {
    while (1)
    {
      while (1)
      {
        v38 = (uint64_t **)v36;
        v39 = *((_DWORD *)v36 + 8);
        if (v39 < 0xCA2)
          break;
        v36 = *v38;
        v37 = v38;
        if (!*v38)
          goto LABEL_129;
      }
      if (v39 == 3233)
        break;
      v36 = v38[1];
      if (!v36)
      {
        v37 = v38 + 1;
        goto LABEL_129;
      }
    }
    (*(void (**)(uint64_t))(*(_QWORD *)v34 + 8))(v34);
  }
  else
  {
LABEL_129:
    v40 = operator new(0x30uLL);
    v40[8] = 3233;
    *((_QWORD *)v40 + 5) = v34;
    std::__tree<std::__value_type<double,int>,std::__map_value_compare<double,std::__value_type<double,int>,std::less<double>,true>,std::allocator<std::__value_type<double,int>>>::__insert_node_at((uint64_t **)(a1 + 40), (uint64_t)v38, v37, (uint64_t *)v40);
  }
  if (SHIBYTE(v90) < 0)
    operator delete((void *)v89);
  std::string::basic_string[abi:ne180100]<0>(&v89, "listen to head tracking user choice");
  AUSM::Properties::addPropertyMapEntry<unsigned int>(a1, 0xCA2u, a1 + 1504, &v89, 1, 0, 0);
  if (SHIBYTE(v90) < 0)
    operator delete((void *)v89);
  std::string::basic_string[abi:ne180100]<0>(&v89, "disallow HAL API access");
  AUSM::Properties::addPropertyMapEntry<unsigned int>(a1, 0xCABu, a1 + 1505, &v89, 2, 0, 0);
  if (SHIBYTE(v90) < 0)
    operator delete((void *)v89);
  std::string::basic_string[abi:ne180100]<0>(&v89, "enable OBHD");
  AUSM::Properties::addPropertyMapEntry<unsigned int>(a1, 0xCD9u, a1 + 1506, &v89, 2, 0, 0);
  if (SHIBYTE(v90) < 0)
    operator delete((void *)v89);
  std::string::basic_string[abi:ne180100]<0>(&v89, "custom HOA source extent IR");
  AUSM::Properties::addCFURLAndCStringPropertyMapEntry(a1, 0xC8Au, 0xC8Bu, v76, (const void **)&v89, 1);
  if (SHIBYTE(v90) < 0)
    operator delete((void *)v89);
  std::string::basic_string[abi:ne180100]<0>(&v89, "custom HOA NFC IR");
  AUSM::Properties::addCFURLAndCStringPropertyMapEntry(a1, 0xCCAu, 0xCCBu, v75, (const void **)&v89, 1);
  if (SHIBYTE(v90) < 0)
    operator delete((void *)v89);
  std::string::basic_string[abi:ne180100]<0>(&v89, "custom binaural source extent IR");
  AUSM::Properties::addCFURLAndCStringPropertyMapEntry(a1, 0xC91u, 0xC92u, v74, (const void **)&v89, 1);
  if (SHIBYTE(v90) < 0)
    operator delete((void *)v89);
  std::string::basic_string[abi:ne180100]<0>(&v89, "custom XTC source extent IR");
  AUSM::Properties::addCFURLAndCStringPropertyMapEntry(a1, 0xC9Cu, 0xC9Du, v73, (const void **)&v89, 1);
  if (SHIBYTE(v90) < 0)
    operator delete((void *)v89);
  std::string::basic_string[abi:ne180100]<0>(&v89, "parametric processor dictionary");
  AUSM::Properties::addPropertyMapEntry<__CFDictionary const*,(decltype(nullptr))0>(a1, 0xC95u, v72, (uint64_t)&v89, 1, 0, 1);
  if (SHIBYTE(v90) < 0)
    operator delete((void *)v89);
  std::string::basic_string[abi:ne180100]<0>(&v89, "immersive renderer data");
  v41 = operator new();
  *(_QWORD *)v41 = off_1E69E0820;
  *(_QWORD *)(v41 + 8) = 2;
  *(_BYTE *)(v41 + 16) = 0;
  v42 = (std::string *)(v41 + 24);
  if (SHIBYTE(v90) < 0)
  {
    std::string::__init_copy_ctor_external(v42, (const std::string::value_type *)v89, *((std::string::size_type *)&v89 + 1));
  }
  else
  {
    *(_OWORD *)&v42->__r_.__value_.__l.__data_ = v89;
    *(_QWORD *)(v41 + 40) = v90;
  }
  *(_QWORD *)v41 = off_1E69D5CA8;
  *(_QWORD *)(v41 + 48) = v71;
  v43 = *v22;
  v44 = (uint64_t **)(a1 + 48);
  v45 = (uint64_t **)(a1 + 48);
  if (*v22)
  {
    while (1)
    {
      while (1)
      {
        v45 = (uint64_t **)v43;
        v46 = *((_DWORD *)v43 + 8);
        if (v46 < 0xCA0)
          break;
        v43 = *v45;
        v44 = v45;
        if (!*v45)
          goto LABEL_159;
      }
      if (v46 == 3231)
        break;
      v43 = v45[1];
      if (!v43)
      {
        v44 = v45 + 1;
        goto LABEL_159;
      }
    }
    (*(void (**)(uint64_t))(*(_QWORD *)v41 + 8))(v41);
  }
  else
  {
LABEL_159:
    v47 = operator new(0x30uLL);
    v47[8] = 3231;
    *((_QWORD *)v47 + 5) = v41;
    std::__tree<std::__value_type<double,int>,std::__map_value_compare<double,std::__value_type<double,int>,std::less<double>,true>,std::allocator<std::__value_type<double,int>>>::__insert_node_at((uint64_t **)(a1 + 40), (uint64_t)v45, v44, (uint64_t *)v47);
  }
  if (SHIBYTE(v90) < 0)
    operator delete((void *)v89);
  std::string::basic_string[abi:ne180100]<0>(&v89, "room configuration dictionary");
  AUSM::Properties::addPropertyMapEntry<__CFDictionary const*,(decltype(nullptr))0>(a1, 0xCA7u, v70, (uint64_t)&v89, 1, 1, 0);
  if (SHIBYTE(v90) < 0)
    operator delete((void *)v89);
  std::string::basic_string[abi:ne180100]<0>(&v89, "early reflection biquad dictionary");
  AUSM::Properties::addPropertyMapEntry<__CFDictionary const*,(decltype(nullptr))0>(a1, 0xCB0u, v69, (uint64_t)&v89, 1, 3, 0);
  if (SHIBYTE(v90) < 0)
    operator delete((void *)v89);
  std::string::basic_string[abi:ne180100]<0>(&v89, "late reverb biquad dictionary");
  AUSM::Properties::addPropertyMapEntry<__CFDictionary const*,(decltype(nullptr))0>(a1, 0xCB1u, v68, (uint64_t)&v89, 1, 3, 0);
  if (SHIBYTE(v90) < 0)
    operator delete((void *)v89);
  std::string::basic_string[abi:ne180100]<0>(&v89, "convolution optimization parameters");
  AUSM::Properties::addPropertyMapEntry<__CFDictionary const*,(decltype(nullptr))0>(a1, 0xCB4u, v67, (uint64_t)&v89, 1, 0, 0);
  if (SHIBYTE(v90) < 0)
    operator delete((void *)v89);
  std::string::basic_string[abi:ne180100]<0>(&v89, "room congruence tuning dictionary");
  AUSM::Properties::addPropertyMapEntry<__CFDictionary const*,(decltype(nullptr))0>(a1, 0xCB6u, v66, (uint64_t)&v89, 1, 1, 1);
  if (SHIBYTE(v90) < 0)
    operator delete((void *)v89);
  std::string::basic_string[abi:ne180100]<0>(&v89, "dynamic size values");
  AUSM::Properties::addPropertyMapEntry<__CFArray const*,(decltype(nullptr))0>(a1, 0xCDAu, a1 + 2200, (uint64_t)&v89);
  if (SHIBYTE(v90) < 0)
    operator delete((void *)v89);
  std::string::basic_string[abi:ne180100]<0>(&v89, "dynamic size tGrid orders");
  AUSM::Properties::addPropertyMapEntry<__CFArray const*,(decltype(nullptr))0>(a1, 0xCDBu, a1 + 2272, (uint64_t)&v89);
  if (SHIBYTE(v90) < 0)
    operator delete((void *)v89);
  std::string::basic_string[abi:ne180100]<0>(&v89, "dynamic size sampling factors");
  AUSM::Properties::addPropertyMapEntry<__CFArray const*,(decltype(nullptr))0>(a1, 0xCDCu, a1 + 2344, (uint64_t)&v89);
  if (SHIBYTE(v90) < 0)
    operator delete((void *)v89);
  std::string::basic_string[abi:ne180100]<0>(&v89, "sound stage size");
  AUSM::Properties::addPropertyMapEntry<unsigned int>(a1, 0xCA8u, a1 + 2420, &v89, 1, 0, 0, 0x100000000, 0x100000003);
  if (SHIBYTE(v90) < 0)
    operator delete((void *)v89);
  std::string::basic_string[abi:ne180100]<0>(&v89, "sound stage transition time (secs)");
  AUSM::Properties::addPropertyMapEntry<float>(a1, 0xCA9u, a1 + 2424, &v89, 1, 0x13A83126FuLL, 0x140A00000uLL);
  if (SHIBYTE(v90) < 0)
    operator delete((void *)v89);
  std::string::basic_string[abi:ne180100]<0>(&v89, "mid side rotation max index");
  AUSM::Properties::addPropertyMapEntry<float>(a1, 0xCD0u, a1 + 2468, &v89, 0, 0x100000000uLL, 0x13F800000uLL);
  if (SHIBYTE(v90) < 0)
    operator delete((void *)v89);
  std::string::basic_string[abi:ne180100]<0>(&v89, "HOA Decoder Algorithm");
  AUSM::Properties::addPropertyMapEntry<unsigned int>(a1, 0xCCCu, a1 + 2548, &v89, 1, 0, 0);
  if (SHIBYTE(v90) < 0)
    operator delete((void *)v89);
  std::string::basic_string[abi:ne180100]<0>(&v89, "select ambisonics rendering algorithm");
  AUSM::Properties::addPropertyMapEntry<unsigned int>(a1, 0xC9Eu, a1 + 2480, &v89, 2, 0, 1, 0x100000000, 0x100000002);
  if (SHIBYTE(v90) < 0)
    operator delete((void *)v89);
  std::string::basic_string[abi:ne180100]<0>(&v89, "neural transcoder plist");
  AUSM::Properties::addCFURLAndCStringPropertyMapEntry(a1, 0xCB8u, 0xCB9u, v65, (const void **)&v89, 1);
  if (SHIBYTE(v90) < 0)
    operator delete((void *)v89);
  std::string::basic_string[abi:ne180100]<0>(&v89, "optional feature support dictionary");
  AUSM::Properties::addPropertyMapEntry<__CFDictionary const*,(decltype(nullptr))0>(a1, 0xCCFu, v64, (uint64_t)&v89, 2, 0, 0);
  if (SHIBYTE(v90) < 0)
    operator delete((void *)v89);
  std::string::basic_string[abi:ne180100]<0>(&v89, "in-head parameter dictionary");
  AUSM::Properties::addPropertyMapEntry<__CFDictionary const*,(decltype(nullptr))0>(a1, 0xCE1u, v63, (uint64_t)&v89, 2, 0, 0);
  if (SHIBYTE(v90) < 0)
    operator delete((void *)v89);
  std::string::basic_string[abi:ne180100]<0>(&v89, "HOA reverb order");
  AUSM::Properties::addPropertyMapEntry<unsigned int>(a1, 0xCD1u, a1 + 2552, &v89, 1, 0, 0);
  if (SHIBYTE(v90) < 0)
    operator delete((void *)v89);
  std::string::basic_string[abi:ne180100]<0>(&v89, "spherical grid");
  AUSM::Properties::addPropertyMapEntry<unsigned int>(a1, 0xCD2u, a1 + 2556, &v89, 1, 0, 0, 0x100000000, 0x100000002);
  if (SHIBYTE(v90) < 0)
    operator delete((void *)v89);
  std::string::basic_string[abi:ne180100]<0>(&v89, "HOA power saving mode order");
  AUSM::Properties::addPropertyMapEntry<unsigned int>(a1, 0xCD5u, a1 + 2560, &v89, 2, 0, 0);
  if (SHIBYTE(v90) < 0)
    operator delete((void *)v89);
  std::string::basic_string[abi:ne180100]<0>(&v89, "HOA power saving mode toggle");
  v48 = operator new();
  *(_QWORD *)v48 = off_1E69E0820;
  *(_QWORD *)(v48 + 8) = 1;
  *(_BYTE *)(v48 + 16) = 0;
  v49 = (std::string *)(v48 + 24);
  if (SHIBYTE(v90) < 0)
  {
    std::string::__init_copy_ctor_external(v49, (const std::string::value_type *)v89, *((std::string::size_type *)&v89 + 1));
  }
  else
  {
    *(_OWORD *)&v49->__r_.__value_.__l.__data_ = v89;
    *(_QWORD *)(v48 + 40) = v90;
  }
  *(_QWORD *)v48 = off_1E69D57F8;
  *(_QWORD *)(v48 + 48) = a1 + 2564;
  LODWORD(v93) = 3286;
  *((_QWORD *)&v93 + 1) = v48;
  std::__tree<std::__value_type<unsigned int,std::unique_ptr<AUSM::PropertyDescriptor>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::unique_ptr<AUSM::PropertyDescriptor>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::unique_ptr<AUSM::PropertyDescriptor>>>>::__emplace_unique_key_args<unsigned int,std::pair<unsigned int,std::unique_ptr<AUSM::AtomicProperty<BOOL>>>>((uint64_t *)(a1 + 40), 0xCD6u, (uint64_t)&v93);
  if (*((_QWORD *)&v93 + 1))
    (*(void (**)(_QWORD))(**((_QWORD **)&v93 + 1) + 8))(*((_QWORD *)&v93 + 1));
  if (SHIBYTE(v90) < 0)
    operator delete((void *)v89);
  std::string::basic_string[abi:ne180100]<0>(&v89, "HOA power saving mode transition samples");
  AUSM::Properties::addPropertyMapEntry<unsigned int>(a1, 0xCD7u, a1 + 2568, &v89, 2, 0, 0);
  if (SHIBYTE(v90) < 0)
    operator delete((void *)v89);
  std::string::basic_string[abi:ne180100]<0>(&v89, "Global Surround Gain dB");
  AUSM::Properties::addPropertyMapEntry<float>(a1, 0xCE0u, a1 + 2416, &v89, 0);
  if (SHIBYTE(v90) < 0)
    operator delete((void *)v89);
  std::string::basic_string[abi:ne180100]<0>(&v89, "display geometry choice");
  v50 = operator new();
  *(_QWORD *)v50 = off_1E69E0820;
  *(_QWORD *)(v50 + 8) = 0x300000001;
  *(_BYTE *)(v50 + 16) = 0;
  v51 = (std::string *)(v50 + 24);
  if (SHIBYTE(v90) < 0)
  {
    std::string::__init_copy_ctor_external(v51, (const std::string::value_type *)v89, *((std::string::size_type *)&v89 + 1));
  }
  else
  {
    *(_OWORD *)&v51->__r_.__value_.__l.__data_ = v89;
    *(_QWORD *)(v50 + 40) = v90;
  }
  *(_QWORD *)(v50 + 48) = a1 + 2476;
  *(_QWORD *)v50 = off_1E69D5D98;
  *(_OWORD *)(v50 + 56) = xmmword_1B66A20F0;
  v52 = *v22;
  v53 = (uint64_t **)(a1 + 48);
  if (*v22)
  {
    while (1)
    {
      while (1)
      {
        v53 = (uint64_t **)v52;
        v54 = *((_DWORD *)v52 + 8);
        if (v54 < 0x1635)
          break;
        v52 = *v53;
        v22 = v53;
        if (!*v53)
          goto LABEL_222;
      }
      if (v54 == 5684)
        break;
      v52 = v53[1];
      if (!v52)
      {
        v22 = v53 + 1;
        goto LABEL_222;
      }
    }
    (*(void (**)(uint64_t))(*(_QWORD *)v50 + 8))(v50);
  }
  else
  {
LABEL_222:
    v55 = operator new(0x30uLL);
    v55[8] = 5684;
    *((_QWORD *)v55 + 5) = v50;
    std::__tree<std::__value_type<double,int>,std::__map_value_compare<double,std::__value_type<double,int>,std::less<double>,true>,std::allocator<std::__value_type<double,int>>>::__insert_node_at((uint64_t **)(a1 + 40), (uint64_t)v53, v22, (uint64_t *)v55);
  }
  if (SHIBYTE(v90) < 0)
    operator delete((void *)v89);
  return a1;
}

void sub_1B6366724(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void **a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39)
{
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  void *v44;

  MEMORY[0x1BCC95CEC](v40, 0x10B3C40DB818C1DLL);
  if (*(char *)(v42 - 145) < 0)
    operator delete(*(void **)(v42 - 168));
  if (*(char *)(v39 + 2543) < 0)
    operator delete(*(void **)(v39 + 2520));
  AUSM::AppleSauceCFWithMutex<__CFArray const*>::~AppleSauceCFWithMutex(v41);
  AUSM::AppleSauceCFWithMutex<__CFArray const*>::~AppleSauceCFWithMutex(a23);
  AUSM::AppleSauceCFWithMutex<__CFArray const*>::~AppleSauceCFWithMutex(a24);
  AUSM::AppleSauceCFWithMutex<__CFDictionary const*>::~AppleSauceCFWithMutex(a20);
  AUSM::AppleSauceCFWithMutex<__CFDictionary const*>::~AppleSauceCFWithMutex(a21);
  AUSM::AppleSauceCFWithMutex<__CFDictionary const*>::~AppleSauceCFWithMutex(a25);
  AUSM::AppleSauceCFWithMutex<__CFDictionary const*>::~AppleSauceCFWithMutex(a26);
  AUSM::AppleSauceCFWithMutex<__CFDictionary const*>::~AppleSauceCFWithMutex(a27);
  AUSM::AppleSauceCFWithMutex<__CFDictionary const*>::~AppleSauceCFWithMutex(a28);
  AUSM::AppleSauceCFWithMutex<__CFDictionary const*>::~AppleSauceCFWithMutex(*(_QWORD *)(v42 - 184));
  AUSM::AppleSauceCFWithMutex<__CFDictionary const*>::~AppleSauceCFWithMutex(a29);
  v44 = *a30;
  if (*a30)
  {
    *(_QWORD *)(v39 + 1608) = v44;
    operator delete(v44);
  }
  AUSM::AppleSauceCFWithMutex<__CFDictionary const*>::~AppleSauceCFWithMutex(a31);
  AUSM::AppleSauceCFWithMutex<__CFURL const*>::~AppleSauceCFWithMutex(a36);
  AUSM::AppleSauceCFWithMutex<__CFURL const*>::~AppleSauceCFWithMutex(a37);
  AUSM::AppleSauceCFWithMutex<__CFDictionary const*>::~AppleSauceCFWithMutex(a38);
  AUSM::AppleSauceCFWithMutex<__CFURL const*>::~AppleSauceCFWithMutex(a32);
  AUSM::AppleSauceCFWithMutex<__CFURL const*>::~AppleSauceCFWithMutex(a22);
  AUSM::AppleSauceCFWithMutex<__CFURL const*>::~AppleSauceCFWithMutex(a33);
  AUSM::AppleSauceCFWithMutex<__CFURL const*>::~AppleSauceCFWithMutex(a39);
  AUSM::AppleSauceCFWithMutex<__CFURL const*>::~AppleSauceCFWithMutex(a34);
  AUSM::AppleSauceCFWithMutex<__CFURL const*>::~AppleSauceCFWithMutex(a35);
  AUSM::AppleSauceCFWithMutex<__CFURL const*>::~AppleSauceCFWithMutex(v39 + 752);
  AUSM::AppleSauceCFWithMutex<__CFURL const*>::~AppleSauceCFWithMutex(*(_QWORD *)(v42 - 176));
  AUSM::AppleSauceCFWithMutex<__CFURL const*>::~AppleSauceCFWithMutex(*(_QWORD *)(v42 - 232));
  AUSM::AppleSauceCFWithMutex<__CFURL const*>::~AppleSauceCFWithMutex(*(_QWORD *)(v42 - 224));
  AUSM::AppleSauceCFWithMutex<__CFURL const*>::~AppleSauceCFWithMutex(*(_QWORD *)(v42 - 216));
  AUSM::AppleSauceCFWithMutex<__CFURL const*>::~AppleSauceCFWithMutex(*(_QWORD *)(v42 - 208));
  AUSM::AppleSauceCFWithMutex<__CFURL const*>::~AppleSauceCFWithMutex(*(_QWORD *)(v42 - 200));
  AUSM::AppleSauceCFWithMutex<__CFURL const*>::~AppleSauceCFWithMutex(*(_QWORD *)(v42 - 192));
  AUSM::AppleSauceCFWithMutex<__CFURL const*>::~AppleSauceCFWithMutex(a11);
  AUSM::Properties::~Properties((AUSM::Properties *)v39);
  _Unwind_Resume(a1);
}

void sub_1B6366B9C()
{
  uint64_t v0;

  applesauce::CF::ArrayRef::~ArrayRef((const void **)(v0 - 144));
  JUMPOUT(0x1B6366A94);
}

void sub_1B6366BB8()
{
  uint64_t v0;

  applesauce::CF::ArrayRef::~ArrayRef((const void **)(v0 - 136));
  JUMPOUT(0x1B6366A9CLL);
}

uint64_t AUSM::AppleSauceCFWithMutex<__CFArray const*>::AppleSauceCFWithMutex(uint64_t a1, CFTypeRef *a2)
{
  CFTypeRef v3;
  const void *v5;

  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 850045863;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_QWORD *)(a1 + 64) = 0;
  v3 = *a2;
  if (*a2)
    CFRetain(*a2);
  v5 = v3;
  AUSM::AppleSauceCFWithMutex<__CFArray const*>::store(a1, &v5);
  if (v3)
    CFRelease(v3);
  return a1;
}

void sub_1B6366C5C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  const void **v2;
  std::mutex *v3;
  va_list va;

  va_start(va, a2);
  applesauce::CF::ArrayRef::~ArrayRef((const void **)va);
  std::mutex::~mutex(v3);
  applesauce::CF::ArrayRef::~ArrayRef(v2);
  _Unwind_Resume(a1);
}

uint64_t *AUSM::Properties::addPropertyMapEntry<float>(uint64_t a1, unsigned int a2, std::string::size_type a3, __int128 *a4, std::string::value_type a5, std::string::size_type a6, std::string::size_type a7)
{
  std::string *v14;
  uint64_t *v15;
  uint64_t **v16;
  uint64_t *v17;
  uint64_t **v18;
  unsigned int v19;
  uint64_t **v20;
  _DWORD *v21;

  v14 = (std::string *)operator new();
  AUSM::AtomicProperty<float>::AtomicProperty(v14, a3, a5, a4);
  v17 = *(uint64_t **)(a1 + 48);
  v16 = (uint64_t **)(a1 + 48);
  v15 = v17;
  v14->__r_.__value_.__r.__words[0] = (std::string::size_type)off_1E69D5870;
  v14[2].__r_.__value_.__l.__size_ = a6;
  v14[2].__r_.__value_.__r.__words[2] = a7;
  if (v17)
  {
    while (1)
    {
      while (1)
      {
        v18 = (uint64_t **)v15;
        v19 = *((_DWORD *)v15 + 8);
        if (v19 <= a2)
          break;
        v15 = *v18;
        v20 = v18;
        if (!*v18)
          goto LABEL_9;
      }
      if (v19 >= a2)
        return (uint64_t *)(*(uint64_t (**)(std::string *))(v14->__r_.__value_.__r.__words[0] + 8))(v14);
      v15 = v18[1];
      if (!v15)
      {
        v20 = v18 + 1;
        goto LABEL_9;
      }
    }
  }
  else
  {
    v20 = v16;
    v18 = v16;
LABEL_9:
    v21 = operator new(0x30uLL);
    v21[8] = a2;
    *((_QWORD *)v21 + 5) = v14;
    return std::__tree<std::__value_type<double,int>,std::__map_value_compare<double,std::__value_type<double,int>,std::less<double>,true>,std::allocator<std::__value_type<double,int>>>::__insert_node_at(v16 - 1, (uint64_t)v18, v20, (uint64_t *)v21);
  }
}

void sub_1B6366D90(_Unwind_Exception *a1)
{
  uint64_t v1;

  AUSM::AtomicPropertyWithRange<float>::~AtomicPropertyWithRange(v1);
  _Unwind_Resume(a1);
}

uint64_t *AUSM::Properties::addPropertyMapEntry<__CFDictionary const*,(decltype(nullptr))0>(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, int a5, int a6, char a7)
{
  uint64_t v14;
  std::string *v15;
  uint64_t *v16;
  uint64_t **v17;
  uint64_t *v18;
  uint64_t **v19;
  unsigned int v20;
  uint64_t **v21;
  _DWORD *v22;

  v14 = operator new();
  *(_QWORD *)v14 = off_1E69E0820;
  *(_DWORD *)(v14 + 8) = a5;
  *(_DWORD *)(v14 + 12) = a6;
  *(_BYTE *)(v14 + 16) = a7;
  v15 = (std::string *)(v14 + 24);
  if (*(char *)(a4 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v15, *(const std::string::value_type **)a4, *(_QWORD *)(a4 + 8));
  }
  else
  {
    *(_OWORD *)&v15->__r_.__value_.__l.__data_ = *(_OWORD *)a4;
    *(_QWORD *)(v14 + 40) = *(_QWORD *)(a4 + 16);
  }
  *(_QWORD *)v14 = off_1E69D5960;
  *(_QWORD *)(v14 + 48) = a3;
  v18 = *(uint64_t **)(a1 + 48);
  v17 = (uint64_t **)(a1 + 48);
  v16 = v18;
  if (v18)
  {
    while (1)
    {
      while (1)
      {
        v19 = (uint64_t **)v16;
        v20 = *((_DWORD *)v16 + 8);
        if (v20 <= a2)
          break;
        v16 = *v19;
        v21 = v19;
        if (!*v19)
          goto LABEL_12;
      }
      if (v20 >= a2)
        return (uint64_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
      v16 = v19[1];
      if (!v16)
      {
        v21 = v19 + 1;
        goto LABEL_12;
      }
    }
  }
  else
  {
    v21 = v17;
    v19 = v17;
LABEL_12:
    v22 = operator new(0x30uLL);
    v22[8] = a2;
    *((_QWORD *)v22 + 5) = v14;
    return std::__tree<std::__value_type<double,int>,std::__map_value_compare<double,std::__value_type<double,int>,std::less<double>,true>,std::allocator<std::__value_type<double,int>>>::__insert_node_at(v17 - 1, (uint64_t)v19, v21, (uint64_t *)v22);
  }
}

void sub_1B6366F00(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1BCC95CEC](v1, 0x10B3C403C7774E2);
  _Unwind_Resume(a1);
}

uint64_t *AUSM::Properties::addPropertyMapEntry<simd_quatf>(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, int a5)
{
  uint64_t v10;
  std::string *v11;
  uint64_t *v12;
  uint64_t **v13;
  uint64_t *v14;
  uint64_t **v15;
  unsigned int v16;
  uint64_t **v17;
  _DWORD *v18;

  v10 = operator new();
  *(_QWORD *)v10 = off_1E69E0820;
  *(_DWORD *)(v10 + 8) = a5;
  *(_DWORD *)(v10 + 12) = 3;
  *(_BYTE *)(v10 + 16) = 0;
  v11 = (std::string *)(v10 + 24);
  if (*(char *)(a4 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v11, *(const std::string::value_type **)a4, *(_QWORD *)(a4 + 8));
  }
  else
  {
    *(_OWORD *)&v11->__r_.__value_.__l.__data_ = *(_OWORD *)a4;
    *(_QWORD *)(v10 + 40) = *(_QWORD *)(a4 + 16);
  }
  *(_QWORD *)v10 = off_1E69D5A50;
  *(_QWORD *)(v10 + 48) = a3;
  v14 = *(uint64_t **)(a1 + 48);
  v13 = (uint64_t **)(a1 + 48);
  v12 = v14;
  if (v14)
  {
    while (1)
    {
      while (1)
      {
        v15 = (uint64_t **)v12;
        v16 = *((_DWORD *)v12 + 8);
        if (v16 <= a2)
          break;
        v12 = *v15;
        v17 = v15;
        if (!*v15)
          goto LABEL_12;
      }
      if (v16 >= a2)
        return (uint64_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
      v12 = v15[1];
      if (!v12)
      {
        v17 = v15 + 1;
        goto LABEL_12;
      }
    }
  }
  else
  {
    v17 = v13;
    v15 = v13;
LABEL_12:
    v18 = operator new(0x30uLL);
    v18[8] = a2;
    *((_QWORD *)v18 + 5) = v10;
    return std::__tree<std::__value_type<double,int>,std::__map_value_compare<double,std::__value_type<double,int>,std::less<double>,true>,std::allocator<std::__value_type<double,int>>>::__insert_node_at(v13 - 1, (uint64_t)v15, v17, (uint64_t *)v18);
  }
}

void sub_1B6367060(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1BCC95CEC](v1, 0x10B3C403C7774E2);
  _Unwind_Resume(a1);
}

uint64_t *_ZN4AUSM10Properties19addPropertyMapEntryIDv3_fEEvjRNSt3__16atomicIT_EERKNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEENS_18PropertyDescriptor8WritableENSG_7LoggingENSG_13SaveInPresetsE(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  std::string *v9;
  uint64_t *v10;
  uint64_t **v11;
  uint64_t *v12;
  uint64_t **v13;
  unsigned int v14;
  uint64_t **v15;
  _DWORD *v16;

  v8 = operator new();
  *(_QWORD *)v8 = off_1E69E0820;
  *(_QWORD *)(v8 + 8) = 0x300000001;
  *(_BYTE *)(v8 + 16) = 0;
  v9 = (std::string *)(v8 + 24);
  if (*(char *)(a4 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v9, *(const std::string::value_type **)a4, *(_QWORD *)(a4 + 8));
  }
  else
  {
    *(_OWORD *)&v9->__r_.__value_.__l.__data_ = *(_OWORD *)a4;
    *(_QWORD *)(v8 + 40) = *(_QWORD *)(a4 + 16);
  }
  *(_QWORD *)v8 = off_1E69D5AC8;
  *(_QWORD *)(v8 + 48) = a3;
  v12 = *(uint64_t **)(a1 + 48);
  v11 = (uint64_t **)(a1 + 48);
  v10 = v12;
  if (v12)
  {
    while (1)
    {
      while (1)
      {
        v13 = (uint64_t **)v10;
        v14 = *((_DWORD *)v10 + 8);
        if (v14 <= a2)
          break;
        v10 = *v13;
        v15 = v13;
        if (!*v13)
          goto LABEL_12;
      }
      if (v14 >= a2)
        return (uint64_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
      v10 = v13[1];
      if (!v10)
      {
        v15 = v13 + 1;
        goto LABEL_12;
      }
    }
  }
  else
  {
    v15 = v11;
    v13 = v11;
LABEL_12:
    v16 = operator new(0x30uLL);
    v16[8] = a2;
    *((_QWORD *)v16 + 5) = v8;
    return std::__tree<std::__value_type<double,int>,std::__map_value_compare<double,std::__value_type<double,int>,std::less<double>,true>,std::allocator<std::__value_type<double,int>>>::__insert_node_at(v11 - 1, (uint64_t)v13, v15, (uint64_t *)v16);
  }
}

void sub_1B63671C0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1BCC95CEC](v1, 0x10B3C403C7774E2);
  _Unwind_Resume(a1);
}

uint64_t *AUSM::Properties::addPropertyMapEntry<float>(uint64_t a1, unsigned int a2, std::string::size_type a3, __int128 *a4, std::string::value_type a5)
{
  std::string *v10;
  uint64_t *v11;
  uint64_t **v12;
  uint64_t *v13;
  uint64_t **v14;
  unsigned int v15;
  uint64_t **v16;
  _DWORD *v17;

  v10 = (std::string *)operator new();
  AUSM::AtomicProperty<float>::AtomicProperty(v10, a3, a5, a4);
  v13 = *(uint64_t **)(a1 + 48);
  v12 = (uint64_t **)(a1 + 48);
  v11 = v13;
  if (v13)
  {
    while (1)
    {
      while (1)
      {
        v14 = (uint64_t **)v11;
        v15 = *((_DWORD *)v11 + 8);
        if (v15 <= a2)
          break;
        v11 = *v14;
        v16 = v14;
        if (!*v14)
          goto LABEL_9;
      }
      if (v15 >= a2)
        return (uint64_t *)(*(uint64_t (**)(std::string *))(v10->__r_.__value_.__r.__words[0] + 8))(v10);
      v11 = v14[1];
      if (!v11)
      {
        v16 = v14 + 1;
        goto LABEL_9;
      }
    }
  }
  else
  {
    v16 = v12;
    v14 = v12;
LABEL_9:
    v17 = operator new(0x30uLL);
    v17[8] = a2;
    *((_QWORD *)v17 + 5) = v10;
    return std::__tree<std::__value_type<double,int>,std::__map_value_compare<double,std::__value_type<double,int>,std::less<double>,true>,std::allocator<std::__value_type<double,int>>>::__insert_node_at(v12 - 1, (uint64_t)v14, v16, (uint64_t *)v17);
  }
}

void sub_1B63672E0(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t *AUSM::Properties::addPropertyMapEntry<__CFArray const*,(decltype(nullptr))0>(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  std::string *v9;
  uint64_t *v10;
  uint64_t **v11;
  uint64_t *v12;
  uint64_t **v13;
  unsigned int v14;
  uint64_t **v15;
  _DWORD *v16;

  v8 = operator new();
  *(_QWORD *)v8 = off_1E69E0820;
  *(_QWORD *)(v8 + 8) = 0x100000002;
  *(_BYTE *)(v8 + 16) = 0;
  v9 = (std::string *)(v8 + 24);
  if (*(char *)(a4 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v9, *(const std::string::value_type **)a4, *(_QWORD *)(a4 + 8));
  }
  else
  {
    *(_OWORD *)&v9->__r_.__value_.__l.__data_ = *(_OWORD *)a4;
    *(_QWORD *)(v8 + 40) = *(_QWORD *)(a4 + 16);
  }
  *(_QWORD *)v8 = off_1E69D5D20;
  *(_QWORD *)(v8 + 48) = a3;
  v12 = *(uint64_t **)(a1 + 48);
  v11 = (uint64_t **)(a1 + 48);
  v10 = v12;
  if (v12)
  {
    while (1)
    {
      while (1)
      {
        v13 = (uint64_t **)v10;
        v14 = *((_DWORD *)v10 + 8);
        if (v14 <= a2)
          break;
        v10 = *v13;
        v15 = v13;
        if (!*v13)
          goto LABEL_12;
      }
      if (v14 >= a2)
        return (uint64_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
      v10 = v13[1];
      if (!v10)
      {
        v15 = v13 + 1;
        goto LABEL_12;
      }
    }
  }
  else
  {
    v15 = v11;
    v13 = v11;
LABEL_12:
    v16 = operator new(0x30uLL);
    v16[8] = a2;
    *((_QWORD *)v16 + 5) = v8;
    return std::__tree<std::__value_type<double,int>,std::__map_value_compare<double,std::__value_type<double,int>,std::less<double>,true>,std::allocator<std::__value_type<double,int>>>::__insert_node_at(v11 - 1, (uint64_t)v13, v15, (uint64_t *)v16);
  }
}

void sub_1B6367448(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1BCC95CEC](v1, 0x10B3C403C7774E2);
  _Unwind_Resume(a1);
}

uint64_t AUSM::AppleSauceCFWithMutex<__CFArray const*>::~AppleSauceCFWithMutex(uint64_t a1)
{
  std::mutex::~mutex((std::mutex *)(a1 + 8));
  if (*(_QWORD *)a1)
    CFRelease(*(CFTypeRef *)a1);
  return a1;
}

uint64_t AUSM::AppleSauceCFWithMutex<__CFDictionary const*>::~AppleSauceCFWithMutex(uint64_t a1)
{
  std::mutex::~mutex((std::mutex *)(a1 + 8));
  if (*(_QWORD *)a1)
    CFRelease(*(CFTypeRef *)a1);
  return a1;
}

uint64_t AUSM::AtomicPropertyWithRange<AUSM::eDisplayGeometry>::~AtomicPropertyWithRange(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E69E0820;
  if (*(char *)(a1 + 47) < 0)
    operator delete(*(void **)(a1 + 24));
  return a1;
}

void AUSM::AtomicPropertyWithRange<AUSM::eDisplayGeometry>::~AtomicPropertyWithRange(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E69E0820;
  if (*(char *)(a1 + 47) < 0)
    operator delete(*(void **)(a1 + 24));
  JUMPOUT(0x1BCC95CECLL);
}

uint64_t AUSM::AtomicPropertyWithRange<AUSM::eDisplayGeometry>::getDataSizeBytes()
{
  return 4;
}

uint64_t AUSM::AtomicProperty<AUSM::eDisplayGeometry>::getData(uint64_t a1, unsigned int *a2)
{
  unsigned int v2;

  v2 = atomic_load(*(unsigned int **)(a1 + 48));
  *a2 = v2;
  return 0;
}

uint64_t AUSM::AtomicPropertyWithRange<AUSM::eDisplayGeometry>::setData(uint64_t a1, unsigned int *a2, int a3, char a4)
{
  int v4;
  unsigned int v8;
  unsigned int v9;

  v4 = *(_DWORD *)(a1 + 8);
  if (!v4)
    return 5;
  if (v4 == 2 && (a4 & 1) != 0)
    return 6;
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1) != a3)
    return 4;
  v8 = *a2;
  if (*(_BYTE *)(a1 + 60) && v8 < *(_DWORD *)(a1 + 56) || *(_BYTE *)(a1 + 68) && v8 > *(_DWORD *)(a1 + 64))
    return 3;
  v9 = atomic_load(*(unsigned int **)(a1 + 48));
  if (v8 == v9)
    return 2;
  atomic_store(v8, *(unsigned int **)(a1 + 48));
  return 1;
}

uint64_t AUSM::AtomicPropertyWithRange<AUSM::eDisplayGeometry>::setMinValue(uint64_t result, _DWORD *a2)
{
  *(_DWORD *)(result + 56) = *a2;
  *(_BYTE *)(result + 60) = 1;
  return result;
}

uint64_t AUSM::AtomicPropertyWithRange<AUSM::eDisplayGeometry>::setMaxValue(uint64_t result, _DWORD *a2)
{
  *(_DWORD *)(result + 64) = *a2;
  *(_BYTE *)(result + 68) = 1;
  return result;
}

uint64_t AUSM::AtomicPropertyWithRange<AUSM::eDisplayGeometry>::hasValueRange()
{
  return 1;
}

void AUSM::AtomicProperty<AUSM::eDisplayGeometry>::createCF(uint64_t a1@<X0>, CFNumberRef *a2@<X8>)
{
  unsigned int v3;
  CFNumberRef v4;
  CFNumberRef v5;
  std::runtime_error *exception;
  unsigned int valuePtr;

  v3 = atomic_load(*(unsigned int **)(a1 + 48));
  valuePtr = v3;
  v4 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
  if (!v4)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
  }
  v5 = v4;
  CFRetain(v4);
  *a2 = v5;
  CFRelease(v5);
}

void sub_1B6367710(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

std::string *AUSM::AtomicProperty<AUSM::eDisplayGeometry>::printValue@<X0>(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  unsigned int v2;

  v2 = atomic_load(*(unsigned int **)(a1 + 48));
  return std::to_string(a2, v2);
}

uint64_t AUSM::CFProperty<__CFArray const*>::~CFProperty(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E69E0820;
  if (*(char *)(a1 + 47) < 0)
    operator delete(*(void **)(a1 + 24));
  return a1;
}

void AUSM::CFProperty<__CFArray const*>::~CFProperty(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E69E0820;
  if (*(char *)(a1 + 47) < 0)
    operator delete(*(void **)(a1 + 24));
  JUMPOUT(0x1BCC95CECLL);
}

uint64_t AUSM::CFProperty<__CFArray const*>::getDataSizeBytes()
{
  return 8;
}

uint64_t AUSM::CFProperty<__CFArray const*>::getData(uint64_t a1, CFTypeRef *a2)
{
  CFTypeRef v3;
  CFTypeRef cf;

  AUSM::AppleSauceCFWithMutex<__CFArray const*>::load(&cf, *(_QWORD *)(a1 + 48));
  v3 = cf;
  if (cf)
  {
    *a2 = CFRetain(cf);
    CFRelease(v3);
  }
  else
  {
    *a2 = 0;
  }
  return 0;
}

void sub_1B6367824(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  applesauce::CF::ArrayRef::~ArrayRef((const void **)va);
  _Unwind_Resume(a1);
}

uint64_t AUSM::CFProperty<__CFArray const*>::setData(uint64_t a1, const void **a2, int a3, char a4)
{
  int v4;
  uint64_t v7;
  const void *v8;
  CFTypeID v9;
  const void *v10;
  CFTypeRef v11;
  uint64_t v12;
  uint64_t v13;
  const void *v15;
  uint64_t v16;
  const void *v17;
  CFTypeRef cf1;

  v4 = *(_DWORD *)(a1 + 8);
  if (!v4)
    return 5;
  if (v4 != 2 || (a4 & 1) == 0)
  {
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1) != a3)
      return 4;
    AUSM::AppleSauceCFWithMutex<__CFArray const*>::load(&cf1, *(_QWORD *)(a1 + 48));
    if (!a2)
    {
      v11 = cf1;
      if (!cf1)
        return 2;
      v12 = *(_QWORD *)(a1 + 48);
      v17 = 0;
      AUSM::AppleSauceCFWithMutex<__CFArray const*>::store(v12, &v17);
      v7 = 1;
LABEL_26:
      CFRelease(v11);
      return v7;
    }
    v8 = *a2;
    if (v8)
    {
      CFRetain(v8);
      v9 = CFGetTypeID(v8);
      if (v9 == CFArrayGetTypeID())
      {
        if (cf1)
          v10 = 0;
        else
          v10 = v8;
        if (cf1)
        {
          if (CFEqual(cf1, v8))
          {
            CFRelease(v8);
            v7 = 2;
            goto LABEL_25;
          }
        }
        else
        {
          v8 = v10;
        }
      }
      else
      {
        v16 = 0;
        CFRelease(v8);
        v8 = 0;
      }
    }
    v13 = *(_QWORD *)(a1 + 48);
    v15 = v8;
    v16 = 0;
    AUSM::AppleSauceCFWithMutex<__CFArray const*>::store(v13, &v15);
    if (v8)
      CFRelease(v8);
    v7 = 1;
LABEL_25:
    v11 = cf1;
    if (!cf1)
      return v7;
    goto LABEL_26;
  }
  return 6;
}

void sub_1B6367994(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  const void *v4;
  va_list va;
  va_list va1;

  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, const void *);
  applesauce::CF::ArrayRef::~ArrayRef((const void **)va);
  applesauce::CF::ArrayRef::~ArrayRef((const void **)va1);
  _Unwind_Resume(a1);
}

void AUSM::CFProperty<__CFArray const*>::createCF(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  CFTypeRef v3;
  CFTypeRef cf;

  AUSM::AppleSauceCFWithMutex<__CFArray const*>::load(&cf, *(_QWORD *)(a1 + 48));
  v3 = cf;
  if (cf)
  {
    CFRetain(cf);
    *a2 = v3;
    CFRelease(v3);
  }
  else
  {
    *a2 = 0;
  }
}

void AUSM::CFProperty<__CFArray const*>::printValue(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  CFTypeRef v3;
  const __CFString *v4;
  std::runtime_error *exception;
  CFTypeRef cf;

  AUSM::AppleSauceCFWithMutex<__CFArray const*>::load(&cf, *(_QWORD *)(a1 + 48));
  v3 = cf;
  if (!cf)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
  }
  v4 = CFCopyDescription(cf);
  applesauce::CF::details::CFString_get_value<true>(v4, a2);
  if (v4)
    CFRelease(v4);
  CFRelease(v3);
}

void sub_1B6367AD0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, const void *a10)
{
  void *v10;

  __cxa_free_exception(v10);
  applesauce::CF::ArrayRef::~ArrayRef(&a10);
  _Unwind_Resume(a1);
}

void AUSM::AppleSauceCFWithMutex<__CFArray const*>::store(uint64_t a1, const void **a2)
{
  std::mutex *v4;
  const void *v5;
  const void *v6;

  v4 = (std::mutex *)(a1 + 8);
  std::mutex::lock((std::mutex *)(a1 + 8));
  v5 = *(const void **)a1;
  v6 = *a2;
  *(_QWORD *)a1 = *a2;
  if (v6)
    CFRetain(v6);
  if (v5)
    CFRelease(v5);
  std::mutex::unlock(v4);
}

void AUSM::ByteArray::~ByteArray(void **this)
{
  *this = off_1E69E0820;
  if (*((char *)this + 47) < 0)
    operator delete(this[3]);
}

{
  *this = off_1E69E0820;
  if (*((char *)this + 47) < 0)
    operator delete(this[3]);
  JUMPOUT(0x1BCC95CECLL);
}

uint64_t AUSM::ByteArray::getDataSizeBytes(AUSM::ByteArray *this)
{
  return (*(_DWORD *)(*((_QWORD *)this + 6) + 8) - **((_DWORD **)this + 6));
}

uint64_t AUSM::ByteArray::getData(const void ***this, void *__dst)
{
  if (!__dst)
    return 4;
  memcpy(__dst, *this[6], (_BYTE *)this[6][1] - (_BYTE *)*this[6]);
  return 0;
}

uint64_t AUSM::ByteArray::setData(AUSM::ByteArray *this, const void *a2, unsigned int a3, char a4)
{
  int v4;
  char **v8;
  size_t v9;
  char *v10;
  unint64_t v11;

  v4 = *((_DWORD *)this + 2);
  if (!v4)
    return 5;
  if (v4 == 2 && (a4 & 1) != 0)
    return 6;
  if (!a2 && a3)
    return 3;
  v8 = (char **)*((_QWORD *)this + 6);
  v9 = a3;
  v10 = *v8;
  v11 = v8[1] - *v8;
  if (a3 <= v11)
  {
    if (a3 < v11)
      v8[1] = &v10[a3];
  }
  else
  {
    std::vector<std::byte>::__append(*((unint64_t **)this + 6), a3 - v11);
    v10 = (char *)**((_QWORD **)this + 6);
  }
  memcpy(v10, a2, v9);
  return 1;
}

void AUSM::ByteArray::createCF(_QWORD *a1@<X8>)
{
  *a1 = 0;
}

void AUSM::ByteArray::printValue(AUSM::ByteArray *this@<X0>, std::string *a2@<X8>)
{
  std::string *p_p;
  std::string::size_type size;
  std::string *v6;
  std::string __p;
  std::string v8;

  std::string::basic_string[abi:ne180100]<0>(&v8, "ByteArray, size: ");
  std::to_string(&__p, *(_QWORD *)(*((_QWORD *)this + 6) + 8) - **((_QWORD **)this + 6));
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_p = &__p;
  else
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    size = __p.__r_.__value_.__l.__size_;
  v6 = std::string::append(&v8, (const std::string::value_type *)p_p, size);
  *a2 = *v6;
  v6->__r_.__value_.__l.__size_ = 0;
  v6->__r_.__value_.__r.__words[2] = 0;
  v6->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v8.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v8.__r_.__value_.__l.__data_);
}

void sub_1B6367D9C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  _Unwind_Resume(exception_object);
}

void std::vector<std::byte>::__append(unint64_t *a1, size_t a2)
{
  char *v4;
  char *v5;
  unint64_t v6;
  char *v7;
  unint64_t v8;
  unint64_t v9;
  size_t v10;
  unint64_t v11;
  char *v12;
  char *v13;
  char *v14;
  char v15;

  v5 = (char *)a1[1];
  v4 = (char *)a1[2];
  if (v4 - v5 >= a2)
  {
    if (a2)
    {
      bzero((void *)a1[1], a2);
      v5 += a2;
    }
    a1[1] = (unint64_t)v5;
  }
  else
  {
    v6 = *a1;
    v7 = &v5[-*a1];
    v8 = (unint64_t)&v7[a2];
    if ((uint64_t)&v7[a2] < 0)
      std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
    v9 = (unint64_t)&v4[-v6];
    if (2 * v9 > v8)
      v8 = 2 * v9;
    if (v9 >= 0x3FFFFFFFFFFFFFFFLL)
      v10 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v10 = v8;
    if (v10)
      v11 = (unint64_t)operator new(v10);
    else
      v11 = 0;
    v12 = &v7[v11];
    v13 = (char *)(v11 + v10);
    bzero(v12, a2);
    if (v5 == (char *)v6)
    {
      v11 = (unint64_t)v12;
    }
    else
    {
      v14 = &v5[~v6];
      do
      {
        v15 = *--v5;
        (v14--)[v11] = v15;
      }
      while (v5 != (char *)v6);
      v5 = (char *)*a1;
    }
    *a1 = v11;
    a1[1] = (unint64_t)&v12[a2];
    a1[2] = (unint64_t)v13;
    if (v5)
      operator delete(v5);
  }
}

uint64_t AUSM::AtomicPropertyWithRange<HeadTrackingMode>::~AtomicPropertyWithRange(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E69E0820;
  if (*(char *)(a1 + 47) < 0)
    operator delete(*(void **)(a1 + 24));
  return a1;
}

void AUSM::AtomicPropertyWithRange<HeadTrackingMode>::~AtomicPropertyWithRange(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E69E0820;
  if (*(char *)(a1 + 47) < 0)
    operator delete(*(void **)(a1 + 24));
  JUMPOUT(0x1BCC95CECLL);
}

uint64_t AUSM::AtomicPropertyWithRange<HeadTrackingMode>::getDataSizeBytes()
{
  return 4;
}

uint64_t AUSM::AtomicProperty<HeadTrackingMode>::getData(uint64_t a1, unsigned int *a2)
{
  unsigned int v2;

  v2 = atomic_load(*(unsigned int **)(a1 + 48));
  *a2 = v2;
  return 0;
}

uint64_t AUSM::AtomicPropertyWithRange<HeadTrackingMode>::setData(uint64_t a1, unsigned int *a2, int a3, char a4)
{
  int v4;
  unsigned int v8;
  unsigned int v9;

  v4 = *(_DWORD *)(a1 + 8);
  if (!v4)
    return 5;
  if (v4 == 2 && (a4 & 1) != 0)
    return 6;
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1) != a3)
    return 4;
  v8 = *a2;
  if (*(_BYTE *)(a1 + 60) && v8 < *(_DWORD *)(a1 + 56) || *(_BYTE *)(a1 + 68) && v8 > *(_DWORD *)(a1 + 64))
    return 3;
  v9 = atomic_load(*(unsigned int **)(a1 + 48));
  if (v8 == v9)
    return 2;
  atomic_store(v8, *(unsigned int **)(a1 + 48));
  return 1;
}

uint64_t AUSM::AtomicPropertyWithRange<HeadTrackingMode>::setMinValue(uint64_t result, _DWORD *a2)
{
  *(_DWORD *)(result + 56) = *a2;
  *(_BYTE *)(result + 60) = 1;
  return result;
}

uint64_t AUSM::AtomicPropertyWithRange<HeadTrackingMode>::setMaxValue(uint64_t result, _DWORD *a2)
{
  *(_DWORD *)(result + 64) = *a2;
  *(_BYTE *)(result + 68) = 1;
  return result;
}

uint64_t AUSM::AtomicPropertyWithRange<HeadTrackingMode>::hasValueRange()
{
  return 1;
}

void AUSM::AtomicProperty<HeadTrackingMode>::createCF(uint64_t a1@<X0>, CFNumberRef *a2@<X8>)
{
  unsigned int v3;
  CFNumberRef v4;
  CFNumberRef v5;
  std::runtime_error *exception;
  unsigned int valuePtr;

  v3 = atomic_load(*(unsigned int **)(a1 + 48));
  valuePtr = v3;
  v4 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
  if (!v4)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
  }
  v5 = v4;
  CFRetain(v4);
  *a2 = v5;
  CFRelease(v5);
}

void sub_1B6368118(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

std::string *AUSM::AtomicProperty<HeadTrackingMode>::printValue@<X0>(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  unsigned int v2;

  v2 = atomic_load(*(unsigned int **)(a1 + 48));
  return std::to_string(a2, v2);
}

std::string *AUSM::AtomicProperty<float>::AtomicProperty(std::string *a1, std::string::size_type a2, std::string::value_type a3, __int128 *a4)
{
  std::string *v6;
  __int128 v7;

  a1->__r_.__value_.__r.__words[0] = (std::string::size_type)off_1E69E0820;
  a1->__r_.__value_.__l.__size_ = 1;
  a1->__r_.__value_.__s.__data_[16] = a3;
  v6 = a1 + 1;
  if (*((char *)a4 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v6, *(const std::string::value_type **)a4, *((_QWORD *)a4 + 1));
  }
  else
  {
    v7 = *a4;
    v6->__r_.__value_.__r.__words[2] = *((_QWORD *)a4 + 2);
    *(_OWORD *)&v6->__r_.__value_.__l.__data_ = v7;
  }
  a1->__r_.__value_.__r.__words[0] = (std::string::size_type)off_1E69D58E8;
  a1[2].__r_.__value_.__r.__words[0] = a2;
  return a1;
}

uint64_t AUSM::AtomicProperty<float>::~AtomicProperty(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E69E0820;
  if (*(char *)(a1 + 47) < 0)
    operator delete(*(void **)(a1 + 24));
  return a1;
}

void AUSM::AtomicProperty<float>::~AtomicProperty(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E69E0820;
  if (*(char *)(a1 + 47) < 0)
    operator delete(*(void **)(a1 + 24));
  JUMPOUT(0x1BCC95CECLL);
}

uint64_t AUSM::AtomicProperty<float>::getDataSizeBytes()
{
  return 4;
}

uint64_t AUSM::AtomicProperty<float>::getData(uint64_t a1, unsigned int *a2)
{
  unsigned int v2;

  v2 = atomic_load(*(unsigned int **)(a1 + 48));
  *a2 = v2;
  return 0;
}

uint64_t AUSM::AtomicProperty<float>::setData(uint64_t a1, float *a2, int a3, char a4)
{
  int v4;
  float v8;
  float v9;

  v4 = *(_DWORD *)(a1 + 8);
  if (!v4)
    return 5;
  if (v4 == 2 && (a4 & 1) != 0)
    return 6;
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1) != a3)
    return 4;
  v8 = *a2;
  v9 = COERCE_FLOAT(atomic_load(*(unsigned int **)(a1 + 48)));
  if (v8 == v9)
    return 2;
  atomic_store(LODWORD(v8), *(unsigned int **)(a1 + 48));
  return 1;
}

void AUSM::AtomicProperty<float>::createCF(uint64_t a1@<X0>, CFNumberRef *a2@<X8>)
{
  unsigned int v3;
  CFNumberRef v4;
  CFNumberRef v5;
  std::runtime_error *exception;
  unsigned int valuePtr;

  v3 = atomic_load(*(unsigned int **)(a1 + 48));
  valuePtr = v3;
  v4 = CFNumberCreate(0, kCFNumberFloatType, &valuePtr);
  if (!v4)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
  }
  v5 = v4;
  CFRetain(v4);
  *a2 = v5;
  CFRelease(v5);
}

void sub_1B6368384(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

std::string *AUSM::AtomicProperty<float>::printValue@<X0>(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  float v2;

  v2 = COERCE_FLOAT(atomic_load(*(unsigned int **)(a1 + 48)));
  return std::to_string(a2, v2);
}

uint64_t AUSM::AtomicPropertyWithRange<AUSM::eParameterSmoothing>::~AtomicPropertyWithRange(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E69E0820;
  if (*(char *)(a1 + 47) < 0)
    operator delete(*(void **)(a1 + 24));
  return a1;
}

void AUSM::AtomicPropertyWithRange<AUSM::eParameterSmoothing>::~AtomicPropertyWithRange(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E69E0820;
  if (*(char *)(a1 + 47) < 0)
    operator delete(*(void **)(a1 + 24));
  JUMPOUT(0x1BCC95CECLL);
}

uint64_t AUSM::AtomicPropertyWithRange<AUSM::eParameterSmoothing>::getDataSizeBytes()
{
  return 4;
}

uint64_t AUSM::AtomicProperty<AUSM::eParameterSmoothing>::getData(uint64_t a1, unsigned int *a2)
{
  unsigned int v2;

  v2 = atomic_load(*(unsigned int **)(a1 + 48));
  *a2 = v2;
  return 0;
}

uint64_t AUSM::AtomicPropertyWithRange<AUSM::eParameterSmoothing>::setData(uint64_t a1, unsigned int *a2, int a3, char a4)
{
  int v4;
  unsigned int v8;
  unsigned int v9;

  v4 = *(_DWORD *)(a1 + 8);
  if (!v4)
    return 5;
  if (v4 == 2 && (a4 & 1) != 0)
    return 6;
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1) != a3)
    return 4;
  v8 = *a2;
  if (*(_BYTE *)(a1 + 60) && v8 < *(_DWORD *)(a1 + 56) || *(_BYTE *)(a1 + 68) && v8 > *(_DWORD *)(a1 + 64))
    return 3;
  v9 = atomic_load(*(unsigned int **)(a1 + 48));
  if (v8 == v9)
    return 2;
  atomic_store(v8, *(unsigned int **)(a1 + 48));
  return 1;
}

uint64_t AUSM::AtomicPropertyWithRange<AUSM::eParameterSmoothing>::setMinValue(uint64_t result, _DWORD *a2)
{
  *(_DWORD *)(result + 56) = *a2;
  *(_BYTE *)(result + 60) = 1;
  return result;
}

uint64_t AUSM::AtomicPropertyWithRange<AUSM::eParameterSmoothing>::setMaxValue(uint64_t result, _DWORD *a2)
{
  *(_DWORD *)(result + 64) = *a2;
  *(_BYTE *)(result + 68) = 1;
  return result;
}

uint64_t AUSM::AtomicPropertyWithRange<AUSM::eParameterSmoothing>::hasValueRange()
{
  return 1;
}

void AUSM::AtomicProperty<AUSM::eParameterSmoothing>::createCF(uint64_t a1@<X0>, CFNumberRef *a2@<X8>)
{
  unsigned int v3;
  CFNumberRef v4;
  CFNumberRef v5;
  std::runtime_error *exception;
  unsigned int valuePtr;

  v3 = atomic_load(*(unsigned int **)(a1 + 48));
  valuePtr = v3;
  v4 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
  if (!v4)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
  }
  v5 = v4;
  CFRetain(v4);
  *a2 = v5;
  CFRelease(v5);
}

void sub_1B63685D4(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

std::string *AUSM::AtomicProperty<AUSM::eParameterSmoothing>::printValue@<X0>(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  unsigned int v2;

  v2 = atomic_load(*(unsigned int **)(a1 + 48));
  return std::to_string(a2, v2);
}

uint64_t _ZN4AUSM14AtomicPropertyIDv3_fED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E69E0820;
  if (*(char *)(a1 + 47) < 0)
    operator delete(*(void **)(a1 + 24));
  return a1;
}

void _ZN4AUSM14AtomicPropertyIDv3_fED0Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E69E0820;
  if (*(char *)(a1 + 47) < 0)
    operator delete(*(void **)(a1 + 24));
  JUMPOUT(0x1BCC95CECLL);
}

uint64_t _ZNK4AUSM14AtomicPropertyIDv3_fE16getDataSizeBytesEv()
{
  return 12;
}

uint64_t _ZNK4AUSM14AtomicPropertyIDv3_fE7getDataEPv(uint64_t a1, uint64_t a2)
{
  unsigned __int128 *v2;
  unsigned __int128 v3;

  v2 = *(unsigned __int128 **)(a1 + 48);
  do
    v3 = __ldaxp(v2);
  while (__stlxp(v3, v2));
  *(_DWORD *)a2 = v3;
  *(int8x8_t *)(a2 + 4) = vext_s8(*(int8x8_t *)&v3, *(int8x8_t *)((char *)&v3 + 8), 4uLL);
  return 0;
}

uint64_t _ZN4AUSM14AtomicPropertyIDv3_fE7setDataEPKvjb(uint64_t a1, float32x2_t *a2, int a3, char a4)
{
  int v4;
  float32x2_t v8;
  float v9;
  unsigned __int128 *v10;
  unsigned __int128 v11;
  int8x8_t v12;
  unsigned __int128 *v13;

  v4 = *(_DWORD *)(a1 + 8);
  if (!v4)
    return 5;
  if (v4 == 2 && (a4 & 1) != 0)
    return 6;
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1) != a3)
    return 4;
  v8 = *a2;
  v9 = a2[1].f32[0];
  v10 = *(unsigned __int128 **)(a1 + 48);
  do
    v11 = __ldaxp(v10);
  while (__stlxp(v11, v10));
  v12 = vmvn_s8((int8x8_t)vceq_f32(v8, *(float32x2_t *)&v11));
  if ((v12.i8[0] & 1) == 0
    && (v12.i8[4] & 1) == 0
    && v9 == COERCE_FLOAT(vdupq_n_s64(*(unint64_t *)(&v11 + 8)).i32[2]))
  {
    return 2;
  }
  v13 = *(unsigned __int128 **)(a1 + 48);
  do
    __ldaxp(v13);
  while (__stlxp(__PAIR128__(LODWORD(v9), *(_QWORD *)&v8), v13));
  return 1;
}

void _ZNK4AUSM14AtomicPropertyIDv3_fE8createCFEv(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  unsigned __int128 *v3;
  unsigned __int128 v4;
  CFDataRef v5;
  CFTypeRef v6;
  CFTypeRef v7;
  CFTypeRef cf;
  unsigned __int128 bytes;

  DWORD2(bytes) = 0;
  *(_QWORD *)&bytes = 0;
  v3 = *(unsigned __int128 **)(a1 + 48);
  do
    v4 = __ldaxp(v3);
  while (__stlxp(v4, v3));
  bytes = v4;
  v5 = CFDataCreate(0, (const UInt8 *)&bytes, 12);
  applesauce::CF::DataRef::DataRef((applesauce::CF::DataRef *)&cf, v5);
  v6 = cf;
  if (cf)
  {
    CFRetain(cf);
    v7 = cf;
    *a2 = v6;
    if (v7)
      CFRelease(v7);
  }
  else
  {
    *a2 = 0;
  }
}

void _ZNK4AUSM14AtomicPropertyIDv3_fE10printValueEv(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  unsigned __int128 *v3;
  unsigned __int128 v4;
  std::string *v5;
  __int128 v6;
  std::string *v7;
  __int128 v8;
  std::string *v9;
  std::string::size_type size;
  std::string *v11;
  __int128 v12;
  std::string *v13;
  __int128 v14;
  std::string *v15;
  std::string::size_type v16;
  std::string *v17;
  std::string v18;
  std::string v19;
  std::string v20;
  std::string v21;
  std::string v22;
  std::string v23;
  std::string v24;

  v3 = *(unsigned __int128 **)(a1 + 48);
  do
    v4 = __ldaxp(v3);
  while (__stlxp(v4, v3));
  std::to_string(&v20, *(float *)&v4);
  v5 = std::string::insert(&v20, 0, "X = ", 4uLL);
  v6 = *(_OWORD *)&v5->__r_.__value_.__l.__data_;
  v21.__r_.__value_.__r.__words[2] = v5->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v21.__r_.__value_.__l.__data_ = v6;
  v5->__r_.__value_.__l.__size_ = 0;
  v5->__r_.__value_.__r.__words[2] = 0;
  v5->__r_.__value_.__r.__words[0] = 0;
  v7 = std::string::append(&v21, ", Y = ", 6uLL);
  v8 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
  v22.__r_.__value_.__r.__words[2] = v7->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v22.__r_.__value_.__l.__data_ = v8;
  v7->__r_.__value_.__l.__size_ = 0;
  v7->__r_.__value_.__r.__words[2] = 0;
  v7->__r_.__value_.__r.__words[0] = 0;
  std::to_string(&v19, *((float *)&v4 + 1));
  if ((v19.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v9 = &v19;
  else
    v9 = (std::string *)v19.__r_.__value_.__r.__words[0];
  if ((v19.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(v19.__r_.__value_.__r.__words[2]);
  else
    size = v19.__r_.__value_.__l.__size_;
  v11 = std::string::append(&v22, (const std::string::value_type *)v9, size);
  v12 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
  v23.__r_.__value_.__r.__words[2] = v11->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v23.__r_.__value_.__l.__data_ = v12;
  v11->__r_.__value_.__l.__size_ = 0;
  v11->__r_.__value_.__r.__words[2] = 0;
  v11->__r_.__value_.__r.__words[0] = 0;
  v13 = std::string::append(&v23, ", Z = ", 6uLL);
  v14 = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
  v24.__r_.__value_.__r.__words[2] = v13->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v24.__r_.__value_.__l.__data_ = v14;
  v13->__r_.__value_.__l.__size_ = 0;
  v13->__r_.__value_.__r.__words[2] = 0;
  v13->__r_.__value_.__r.__words[0] = 0;
  std::to_string(&v18, *((float *)&v4 + 2));
  if ((v18.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v15 = &v18;
  else
    v15 = (std::string *)v18.__r_.__value_.__r.__words[0];
  if ((v18.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v16 = HIBYTE(v18.__r_.__value_.__r.__words[2]);
  else
    v16 = v18.__r_.__value_.__l.__size_;
  v17 = std::string::append(&v24, (const std::string::value_type *)v15, v16);
  *a2 = *v17;
  v17->__r_.__value_.__l.__size_ = 0;
  v17->__r_.__value_.__r.__words[2] = 0;
  v17->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v18.__r_.__value_.__l.__data_);
  if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v24.__r_.__value_.__l.__data_);
  if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v23.__r_.__value_.__l.__data_);
  if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v19.__r_.__value_.__l.__data_);
  if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v22.__r_.__value_.__l.__data_);
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v21.__r_.__value_.__l.__data_);
  if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v20.__r_.__value_.__l.__data_);
}

void sub_1B6368A18(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,uint64_t a36,void *a37,uint64_t a38,int a39,__int16 a40,char a41,char a42)
{
  uint64_t v42;

  if (a17 < 0)
    operator delete(__p);
  if (*(char *)(v42 - 57) < 0)
    operator delete(*(void **)(v42 - 80));
  if (*(char *)(v42 - 89) < 0)
    operator delete(*(void **)(v42 - 112));
  if (a23 < 0)
    operator delete(a18);
  if (a42 < 0)
    operator delete(a37);
  if (a35 < 0)
    operator delete(a30);
  if (a29 < 0)
    operator delete(a24);
  _Unwind_Resume(exception_object);
}

uint64_t AUSM::AtomicProperty<simd_quatf>::~AtomicProperty(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E69E0820;
  if (*(char *)(a1 + 47) < 0)
    operator delete(*(void **)(a1 + 24));
  return a1;
}

void AUSM::AtomicProperty<simd_quatf>::~AtomicProperty(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E69E0820;
  if (*(char *)(a1 + 47) < 0)
    operator delete(*(void **)(a1 + 24));
  JUMPOUT(0x1BCC95CECLL);
}

uint64_t AUSM::AtomicProperty<simd_quatf>::getDataSizeBytes()
{
  return 16;
}

uint64_t AUSM::AtomicProperty<simd_quatf>::getData(uint64_t a1, uint64_t a2)
{
  unsigned __int128 *v2;
  unsigned __int128 v3;

  v2 = *(unsigned __int128 **)(a1 + 48);
  do
    v3 = __ldaxp(v2);
  while (__stlxp(v3, v2));
  *(_DWORD *)a2 = v3;
  *(int8x8_t *)(a2 + 4) = vext_s8(*(int8x8_t *)&v3, *(int8x8_t *)((char *)&v3 + 8), 4uLL);
  *(_DWORD *)(a2 + 12) = vdupq_n_s64(*(unint64_t *)(&v3 + 8)).i32[3];
  return 0;
}

uint64_t AUSM::AtomicProperty<simd_quatf>::setData(uint64_t a1, unsigned __int128 *a2, int a3, char a4)
{
  int v4;
  unsigned __int128 v8;
  int8x16_t v9;
  unsigned __int128 *v10;
  unsigned __int128 v11;
  unsigned __int128 *v12;

  v4 = *(_DWORD *)(a1 + 8);
  if (!v4)
    return 5;
  if (v4 == 2 && (a4 & 1) != 0)
    return 6;
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1) != a3)
    return 4;
  v8 = *a2;
  v9 = (int8x16_t)vmulq_f32((float32x4_t)v8, (float32x4_t)v8);
  if (sqrtf(vaddv_f32(vadd_f32(*(float32x2_t *)v9.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v9, v9, 8uLL)))) < 0.001)
    return 3;
  v10 = *(unsigned __int128 **)(a1 + 48);
  do
    v11 = __ldaxp(v10);
  while (__stlxp(v11, v10));
  if ((vmaxv_u16((uint16x4_t)vcltz_s16(vshl_n_s16(vmovn_s32((int32x4_t)vmvnq_s8((int8x16_t)vceqq_f32((float32x4_t)v8, (float32x4_t)v11))), 0xFuLL))) & 1) == 0)return 2;
  v12 = *(unsigned __int128 **)(a1 + 48);
  do
    __ldaxp(v12);
  while (__stlxp(v8, v12));
  return 1;
}

void AUSM::AtomicProperty<simd_quatf>::createCF(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  unsigned __int128 *v3;
  unsigned __int128 v4;
  CFDataRef v5;
  CFTypeRef v6;
  CFTypeRef v7;
  CFTypeRef cf;
  unsigned __int128 bytes;

  bytes = 0uLL;
  v3 = *(unsigned __int128 **)(a1 + 48);
  do
    v4 = __ldaxp(v3);
  while (__stlxp(v4, v3));
  bytes = v4;
  v5 = CFDataCreate(0, (const UInt8 *)&bytes, 16);
  applesauce::CF::DataRef::DataRef((applesauce::CF::DataRef *)&cf, v5);
  v6 = cf;
  if (cf)
  {
    CFRetain(cf);
    v7 = cf;
    *a2 = v6;
    if (v7)
      CFRelease(v7);
  }
  else
  {
    *a2 = 0;
  }
}

void AUSM::AtomicProperty<simd_quatf>::printValue(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  unsigned __int128 *v3;
  unsigned __int128 v4;
  std::string *v5;
  __int128 v6;
  std::string *v7;
  __int128 v8;
  std::string *v9;
  std::string::size_type size;
  std::string *v11;
  __int128 v12;
  std::string *v13;
  __int128 v14;
  std::string *v15;
  std::string::size_type v16;
  std::string *v17;
  __int128 v18;
  std::string *v19;
  __int128 v20;
  std::string *v21;
  std::string::size_type v22;
  std::string *v23;
  std::string v24;
  std::string v25;
  std::string v26;
  std::string v27;
  std::string v28;
  std::string v29;
  std::string v30;
  std::string v31;
  std::string v32;
  std::string v33;

  v3 = *(unsigned __int128 **)(a1 + 48);
  do
    v4 = __ldaxp(v3);
  while (__stlxp(v4, v3));
  std::to_string(&v27, *(float *)&v4);
  v5 = std::string::insert(&v27, 0, "X = ", 4uLL);
  v6 = *(_OWORD *)&v5->__r_.__value_.__l.__data_;
  v28.__r_.__value_.__r.__words[2] = v5->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v28.__r_.__value_.__l.__data_ = v6;
  v5->__r_.__value_.__l.__size_ = 0;
  v5->__r_.__value_.__r.__words[2] = 0;
  v5->__r_.__value_.__r.__words[0] = 0;
  v7 = std::string::append(&v28, ", Y = ", 6uLL);
  v8 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
  v29.__r_.__value_.__r.__words[2] = v7->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v29.__r_.__value_.__l.__data_ = v8;
  v7->__r_.__value_.__l.__size_ = 0;
  v7->__r_.__value_.__r.__words[2] = 0;
  v7->__r_.__value_.__r.__words[0] = 0;
  std::to_string(&v26, *((float *)&v4 + 1));
  if ((v26.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v9 = &v26;
  else
    v9 = (std::string *)v26.__r_.__value_.__r.__words[0];
  if ((v26.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(v26.__r_.__value_.__r.__words[2]);
  else
    size = v26.__r_.__value_.__l.__size_;
  v11 = std::string::append(&v29, (const std::string::value_type *)v9, size);
  v12 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
  v30.__r_.__value_.__r.__words[2] = v11->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v30.__r_.__value_.__l.__data_ = v12;
  v11->__r_.__value_.__l.__size_ = 0;
  v11->__r_.__value_.__r.__words[2] = 0;
  v11->__r_.__value_.__r.__words[0] = 0;
  v13 = std::string::append(&v30, ", Z = ", 6uLL);
  v14 = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
  v31.__r_.__value_.__r.__words[2] = v13->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v31.__r_.__value_.__l.__data_ = v14;
  v13->__r_.__value_.__l.__size_ = 0;
  v13->__r_.__value_.__r.__words[2] = 0;
  v13->__r_.__value_.__r.__words[0] = 0;
  std::to_string(&v25, *((float *)&v4 + 2));
  if ((v25.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v15 = &v25;
  else
    v15 = (std::string *)v25.__r_.__value_.__r.__words[0];
  if ((v25.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v16 = HIBYTE(v25.__r_.__value_.__r.__words[2]);
  else
    v16 = v25.__r_.__value_.__l.__size_;
  v17 = std::string::append(&v31, (const std::string::value_type *)v15, v16);
  v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
  v32.__r_.__value_.__r.__words[2] = v17->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v32.__r_.__value_.__l.__data_ = v18;
  v17->__r_.__value_.__l.__size_ = 0;
  v17->__r_.__value_.__r.__words[2] = 0;
  v17->__r_.__value_.__r.__words[0] = 0;
  v19 = std::string::append(&v32, ", W = ", 6uLL);
  v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
  v33.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v33.__r_.__value_.__l.__data_ = v20;
  v19->__r_.__value_.__l.__size_ = 0;
  v19->__r_.__value_.__r.__words[2] = 0;
  v19->__r_.__value_.__r.__words[0] = 0;
  std::to_string(&v24, *((float *)&v4 + 3));
  if ((v24.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v21 = &v24;
  else
    v21 = (std::string *)v24.__r_.__value_.__r.__words[0];
  if ((v24.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v22 = HIBYTE(v24.__r_.__value_.__r.__words[2]);
  else
    v22 = v24.__r_.__value_.__l.__size_;
  v23 = std::string::append(&v33, (const std::string::value_type *)v21, v22);
  *a2 = *v23;
  v23->__r_.__value_.__l.__size_ = 0;
  v23->__r_.__value_.__r.__words[2] = 0;
  v23->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v24.__r_.__value_.__l.__data_);
  if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v33.__r_.__value_.__l.__data_);
  if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v32.__r_.__value_.__l.__data_);
  if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v25.__r_.__value_.__l.__data_);
  if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v31.__r_.__value_.__l.__data_);
  if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v30.__r_.__value_.__l.__data_);
  if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v26.__r_.__value_.__l.__data_);
  if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v29.__r_.__value_.__l.__data_);
  if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v28.__r_.__value_.__l.__data_);
  if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v27.__r_.__value_.__l.__data_);
}

void sub_1B6368FA0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,uint64_t a41,void *a42,uint64_t a43,int a44,__int16 a45,char a46,char a47)
{
  uint64_t v47;

  if (a16 < 0)
    operator delete(__p);
  if (*(char *)(v47 - 41) < 0)
    operator delete(*(void **)(v47 - 64));
  if (*(char *)(v47 - 73) < 0)
    operator delete(*(void **)(v47 - 96));
  if (a22 < 0)
    operator delete(a17);
  if (*(char *)(v47 - 105) < 0)
    operator delete(*(void **)(v47 - 128));
  if (*(char *)(v47 - 137) < 0)
    operator delete(*(void **)(v47 - 160));
  if (a28 < 0)
    operator delete(a23);
  if (a47 < 0)
    operator delete(a42);
  if (a40 < 0)
    operator delete(a35);
  if (a34 < 0)
    operator delete(a29);
  _Unwind_Resume(exception_object);
}

void sub_1B636908C()
{
  JUMPOUT(0x1B6369074);
}

uint64_t AUSM::AtomicPropertyWithRange<SpatializerOrientation>::~AtomicPropertyWithRange(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E69E0820;
  if (*(char *)(a1 + 47) < 0)
    operator delete(*(void **)(a1 + 24));
  return a1;
}

void AUSM::AtomicPropertyWithRange<SpatializerOrientation>::~AtomicPropertyWithRange(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E69E0820;
  if (*(char *)(a1 + 47) < 0)
    operator delete(*(void **)(a1 + 24));
  JUMPOUT(0x1BCC95CECLL);
}

uint64_t AUSM::AtomicPropertyWithRange<SpatializerOrientation>::getDataSizeBytes()
{
  return 4;
}

uint64_t AUSM::AtomicProperty<SpatializerOrientation>::getData(uint64_t a1, unsigned int *a2)
{
  unsigned int v2;

  v2 = atomic_load(*(unsigned int **)(a1 + 48));
  *a2 = v2;
  return 0;
}

uint64_t AUSM::AtomicPropertyWithRange<SpatializerOrientation>::setData(uint64_t a1, unsigned int *a2, int a3, char a4)
{
  int v4;
  unsigned int v8;
  unsigned int v9;

  v4 = *(_DWORD *)(a1 + 8);
  if (!v4)
    return 5;
  if (v4 == 2 && (a4 & 1) != 0)
    return 6;
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1) != a3)
    return 4;
  v8 = *a2;
  if (*(_BYTE *)(a1 + 60) && v8 < *(_DWORD *)(a1 + 56) || *(_BYTE *)(a1 + 68) && v8 > *(_DWORD *)(a1 + 64))
    return 3;
  v9 = atomic_load(*(unsigned int **)(a1 + 48));
  if (v8 == v9)
    return 2;
  atomic_store(v8, *(unsigned int **)(a1 + 48));
  return 1;
}

uint64_t AUSM::AtomicPropertyWithRange<SpatializerOrientation>::setMinValue(uint64_t result, _DWORD *a2)
{
  *(_DWORD *)(result + 56) = *a2;
  *(_BYTE *)(result + 60) = 1;
  return result;
}

uint64_t AUSM::AtomicPropertyWithRange<SpatializerOrientation>::setMaxValue(uint64_t result, _DWORD *a2)
{
  *(_DWORD *)(result + 64) = *a2;
  *(_BYTE *)(result + 68) = 1;
  return result;
}

uint64_t AUSM::AtomicPropertyWithRange<SpatializerOrientation>::hasValueRange()
{
  return 1;
}

void AUSM::AtomicProperty<SpatializerOrientation>::createCF(uint64_t a1@<X0>, CFNumberRef *a2@<X8>)
{
  unsigned int v3;
  CFNumberRef v4;
  CFNumberRef v5;
  std::runtime_error *exception;
  unsigned int valuePtr;

  v3 = atomic_load(*(unsigned int **)(a1 + 48));
  valuePtr = v3;
  v4 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
  if (!v4)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
  }
  v5 = v4;
  CFRetain(v4);
  *a2 = v5;
  CFRelease(v5);
}

void sub_1B63692B8(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

_QWORD *AUSM::AtomicProperty<SpatializerOrientation>::printValue@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  signed int v2;

  v2 = atomic_load(*(unsigned int **)(a1 + 48));
  return std::string::basic_string[abi:ne180100]<0>(a2, *((char **)&xmmword_1E69DAD48 + v2));
}

uint64_t AUSM::CFProperty<__CFDictionary const*>::~CFProperty(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E69E0820;
  if (*(char *)(a1 + 47) < 0)
    operator delete(*(void **)(a1 + 24));
  return a1;
}

void AUSM::CFProperty<__CFDictionary const*>::~CFProperty(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E69E0820;
  if (*(char *)(a1 + 47) < 0)
    operator delete(*(void **)(a1 + 24));
  JUMPOUT(0x1BCC95CECLL);
}

uint64_t AUSM::CFProperty<__CFDictionary const*>::getDataSizeBytes()
{
  return 8;
}

uint64_t AUSM::CFProperty<__CFDictionary const*>::getData(uint64_t a1, CFTypeRef *a2)
{
  CFTypeRef v3;
  CFTypeRef cf;

  AUSM::AppleSauceCFWithMutex<__CFDictionary const*>::load(&cf, *(_QWORD *)(a1 + 48));
  v3 = cf;
  if (cf)
  {
    *a2 = CFRetain(cf);
    CFRelease(v3);
  }
  else
  {
    *a2 = 0;
  }
  return 0;
}

void sub_1B63693DC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  applesauce::CF::DictionaryRef::~DictionaryRef((const void **)va);
  _Unwind_Resume(a1);
}

uint64_t AUSM::CFProperty<__CFDictionary const*>::setData(uint64_t a1, const void **a2, int a3, char a4)
{
  int v4;
  uint64_t v7;
  const void *v8;
  CFTypeID v9;
  const void *v10;
  CFTypeRef v11;
  uint64_t v12;
  uint64_t v13;
  const void *v15;
  uint64_t v16;
  const void *v17;
  CFTypeRef cf1;

  v4 = *(_DWORD *)(a1 + 8);
  if (!v4)
    return 5;
  if (v4 != 2 || (a4 & 1) == 0)
  {
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1) != a3)
      return 4;
    AUSM::AppleSauceCFWithMutex<__CFDictionary const*>::load(&cf1, *(_QWORD *)(a1 + 48));
    if (!a2)
    {
      v11 = cf1;
      if (!cf1)
        return 2;
      v12 = *(_QWORD *)(a1 + 48);
      v17 = 0;
      AUSM::AppleSauceCFWithMutex<__CFDictionary const*>::store(v12, &v17);
      v7 = 1;
LABEL_26:
      CFRelease(v11);
      return v7;
    }
    v8 = *a2;
    if (v8)
    {
      CFRetain(v8);
      v9 = CFGetTypeID(v8);
      if (v9 == CFDictionaryGetTypeID())
      {
        if (cf1)
          v10 = 0;
        else
          v10 = v8;
        if (cf1)
        {
          if (CFEqual(cf1, v8))
          {
            CFRelease(v8);
            v7 = 2;
            goto LABEL_25;
          }
        }
        else
        {
          v8 = v10;
        }
      }
      else
      {
        v16 = 0;
        CFRelease(v8);
        v8 = 0;
      }
    }
    v13 = *(_QWORD *)(a1 + 48);
    v15 = v8;
    v16 = 0;
    AUSM::AppleSauceCFWithMutex<__CFDictionary const*>::store(v13, &v15);
    if (v8)
      CFRelease(v8);
    v7 = 1;
LABEL_25:
    v11 = cf1;
    if (!cf1)
      return v7;
    goto LABEL_26;
  }
  return 6;
}

void sub_1B636954C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  const void *v4;
  va_list va;
  va_list va1;

  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, const void *);
  applesauce::CF::DictionaryRef::~DictionaryRef((const void **)va);
  applesauce::CF::DictionaryRef::~DictionaryRef((const void **)va1);
  _Unwind_Resume(a1);
}

void AUSM::CFProperty<__CFDictionary const*>::createCF(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  CFTypeRef v3;
  CFTypeRef cf;

  AUSM::AppleSauceCFWithMutex<__CFDictionary const*>::load(&cf, *(_QWORD *)(a1 + 48));
  v3 = cf;
  if (cf)
  {
    CFRetain(cf);
    *a2 = v3;
    CFRelease(v3);
  }
  else
  {
    *a2 = 0;
  }
}

void AUSM::CFProperty<__CFDictionary const*>::printValue(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  CFTypeRef v3;
  const __CFString *v4;
  std::runtime_error *exception;
  CFTypeRef cf;

  AUSM::AppleSauceCFWithMutex<__CFDictionary const*>::load(&cf, *(_QWORD *)(a1 + 48));
  v3 = cf;
  if (!cf)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
  }
  v4 = CFCopyDescription(cf);
  applesauce::CF::details::CFString_get_value<true>(v4, a2);
  if (v4)
    CFRelease(v4);
  CFRelease(v3);
}

void sub_1B6369688(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, const void *a10)
{
  void *v10;

  __cxa_free_exception(v10);
  applesauce::CF::DictionaryRef::~DictionaryRef(&a10);
  _Unwind_Resume(a1);
}

uint64_t AUSM::AtomicPropertyWithRange<float>::~AtomicPropertyWithRange(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E69E0820;
  if (*(char *)(a1 + 47) < 0)
    operator delete(*(void **)(a1 + 24));
  return a1;
}

void AUSM::AtomicPropertyWithRange<float>::~AtomicPropertyWithRange(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E69E0820;
  if (*(char *)(a1 + 47) < 0)
    operator delete(*(void **)(a1 + 24));
  JUMPOUT(0x1BCC95CECLL);
}

uint64_t AUSM::AtomicPropertyWithRange<float>::getDataSizeBytes()
{
  return 4;
}

uint64_t AUSM::AtomicPropertyWithRange<float>::setData(uint64_t a1, float *a2, int a3, char a4)
{
  int v4;
  float v8;
  float v9;

  v4 = *(_DWORD *)(a1 + 8);
  if (!v4)
    return 5;
  if (v4 == 2 && (a4 & 1) != 0)
    return 6;
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1) != a3)
    return 4;
  v8 = *a2;
  if (*(_BYTE *)(a1 + 60) && v8 < *(float *)(a1 + 56) || *(_BYTE *)(a1 + 68) && v8 > *(float *)(a1 + 64))
    return 3;
  v9 = COERCE_FLOAT(atomic_load(*(unsigned int **)(a1 + 48)));
  if (v8 == v9)
    return 2;
  atomic_store(LODWORD(v8), *(unsigned int **)(a1 + 48));
  return 1;
}

float AUSM::AtomicPropertyWithRange<float>::setMinValue(uint64_t a1, float *a2)
{
  float result;

  result = *a2;
  *(float *)(a1 + 56) = *a2;
  *(_BYTE *)(a1 + 60) = 1;
  return result;
}

float AUSM::AtomicPropertyWithRange<float>::setMaxValue(uint64_t a1, float *a2)
{
  float result;

  result = *a2;
  *(float *)(a1 + 64) = *a2;
  *(_BYTE *)(a1 + 68) = 1;
  return result;
}

uint64_t AUSM::AtomicPropertyWithRange<float>::hasValueRange()
{
  return 1;
}

BOOL AUSM::GlobalProperties::isEnabledFeature(AUSM::GlobalProperties *this, CFTypeRef cf1)
{
  Boolean v4;
  const __CFDictionary *v5;
  __int16 v6;
  const __CFDictionary *v8;

  v4 = CFEqual(cf1, CFSTR("NearFieldHRTF"));
  AUSM::AppleSauceCFWithMutex<__CFDictionary const*>::load(&v8, (uint64_t)this + 2056);
  v5 = v8;
  if (v8)
  {
    v6 = applesauce::CF::details::find_at_key_or_optional<BOOL,__CFString const*&>(v8, cf1);
    if ((v6 & 0xFF00) != 0)
      v4 = v6;
    CFRelease(v5);
  }
  return v4 != 0;
}

void AUDecorrelator::~AUDecorrelator(AUDecorrelator *this)
{
  AUDecorrelator::~AUDecorrelator(this);
  JUMPOUT(0x1BCC95CECLL);
}

{
  void *v2;

  *(_QWORD *)this = &off_1E69D5E10;
  v2 = (void *)*((_QWORD *)this + 76);
  if (v2)
  {
    *((_QWORD *)this + 77) = v2;
    operator delete(v2);
  }
  ausdk::AUBase::~AUBase(this);
}

uint64_t AUDecorrelator::Initialize(AUDecorrelator *this)
{
  ausdk::AUScope *v2;
  double v3;
  uint64_t v4;

  v2 = (AUDecorrelator *)((char *)this + 80);
  v3 = *(double *)(ausdk::AUScope::SafeGetElement((AUDecorrelator *)((char *)this + 80), 0) + 80);
  if (v3 != *(double *)(ausdk::AUScope::SafeGetElement((AUDecorrelator *)((char *)this + 128), 0) + 80)
    || *(_DWORD *)(ausdk::AUScope::SafeGetElement(v2, 0) + 88) != 1819304813
    || *(_DWORD *)(ausdk::AUScope::SafeGetElement((AUDecorrelator *)((char *)this + 128), 0) + 88) != 1819304813)
  {
    return 4294956428;
  }
  v4 = (*(uint64_t (**)(AUDecorrelator *, _QWORD, _QWORD))(*(_QWORD *)this + 72))(this, 0, 0);
  if ((_DWORD)v4)
    (*(void (**)(AUDecorrelator *))(*(_QWORD *)this + 64))(this);
  return v4;
}

uint64_t AUDecorrelator::Reset(float **this)
{
  AUDecorrelator::ApplyParameters((AUDecorrelator *)this);
  std::vector<float>::resize((uint64_t)(this + 76), *((unsigned int *)this + 84));
  vDSP_vclr(this[76], 1, this[77] - this[76]);
  return 0;
}

uint64_t AUDecorrelator::GetPropertyInfo(AUDecorrelator *this, int a2, int a3, unsigned int a4, unsigned int *a5, BOOL *a6)
{
  uint64_t result;
  BOOL v7;

  if (a3)
    return 4294956417;
  if (a2 == 21)
  {
    v7 = 1;
  }
  else
  {
    if (a2 != 3700)
      return 4294956417;
    v7 = 0;
  }
  result = 0;
  *a6 = v7;
  *a5 = 4;
  return result;
}

uint64_t AUDecorrelator::GetProperty(AUDecorrelator *this, int a2, int a3, unsigned int a4, _DWORD *a5)
{
  uint64_t result;
  unsigned __int8 *v6;

  if (a3)
    return 4294956417;
  if (a2 == 3700)
  {
    v6 = (unsigned __int8 *)this + 376;
  }
  else
  {
    if (a2 != 21)
      return 4294956417;
    v6 = (unsigned __int8 *)this + 528;
  }
  result = 0;
  *a5 = *v6;
  return result;
}

uint64_t AUDecorrelator::SetProperty(AUDecorrelator *this, int a2, int a3, unsigned int a4, _DWORD *a5, unsigned int a6)
{
  uint64_t result;

  result = 4294956417;
  if (a2 == 21 && !a3)
  {
    if (a6 >= 4)
    {
      result = 0;
      if ((*a5 != 0) != (*((_BYTE *)this + 528) != 0))
        *((_BYTE *)this + 528) = *a5 != 0;
    }
    else
    {
      return 4294956445;
    }
  }
  return result;
}

uint64_t AUDecorrelator::SetParameter(AUDecorrelator *this, unsigned int a2, unsigned int a3, unsigned int a4, float a5)
{
  ausdk::AUScope *Scope;
  ausdk::AUElement *Element;

  Scope = (ausdk::AUScope *)ausdk::AUBase::GetScope(this, a3);
  Element = (ausdk::AUElement *)ausdk::AUScope::SafeGetElement(Scope, a4);
  ausdk::AUElement::SetParameter(Element, a2, a5, 0);
  if (a2 <= 2)
    ++*((_DWORD *)this + 133);
  return 0;
}

uint64_t AUDecorrelator::CanScheduleParameters(AUDecorrelator *this)
{
  return 0;
}

uint64_t AUDecorrelator::ProcessMultipleBufferLists(AUDecorrelator *this, unsigned int *a2, vDSP_Length __N, unsigned int a4, const AudioBufferList **a5, unsigned int a6, AudioBufferList **a7)
{
  int v11;
  uint64_t v12;
  unint64_t v13;
  unsigned int v14;
  int v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  void **v19;
  unint64_t v20;
  size_t v21;
  char *v22;
  vDSP_Length v23;
  char *v24;
  const void *v25;
  void *v26;
  float *v27;
  uint64_t v28;
  unint64_t v29;
  float __B;

  if (*((_DWORD *)this + 84) < __N)
    return 4294956422;
  if (*((_BYTE *)this + 528))
  {
    v11 = *((_DWORD *)this + 137);
    if (*((unsigned __int8 *)this + 540) == *((unsigned __int8 *)this + 541))
    {
      if (v11)
      {
        v12 = 0;
        v13 = 0;
        do
        {
          memcpy((*a7)->mBuffers[v12].mData, (*a5)->mBuffers[v12].mData, (*a7)->mBuffers[v12].mDataByteSize);
          ++v13;
          ++v12;
        }
        while (v13 < *((unsigned int *)this + 137));
      }
    }
    else if (v11)
    {
      v28 = 0;
      v29 = 0;
      do
      {
        bzero((*a7)->mBuffers[v28].mData, (*a7)->mBuffers[v28].mDataByteSize);
        ++v29;
        ++v28;
      }
      while (v29 < *((unsigned int *)this + 137));
    }
  }
  else
  {
    v14 = __N;
    v15 = *((_DWORD *)this + 133);
    if (v15 != *((_DWORD *)this + 134))
    {
      AUDecorrelator::ApplyParameters(this);
      *((_DWORD *)this + 134) = v15;
    }
    if (!*((_BYTE *)this + 540) && !*((_BYTE *)this + 541))
    {
      v16 = *((unsigned int *)this + 137);
      if ((_DWORD)v16)
      {
        v17 = 0;
        v18 = 16 * v16;
        v19 = (void **)((char *)this + 576);
        do
        {
          *(v19 - 2) = (*a5)->mBuffers[v17 / 0x10].mData;
          *v19++ = (*a7)->mBuffers[v17 / 0x10].mData;
          v17 += 16;
        }
        while (v18 != v17);
      }
      __B = *((float *)this + 151) * 0.5;
      if (*((_DWORD *)this + 150))
      {
        v20 = 0;
        v21 = 4 * v14;
        v22 = (char *)this + 632;
        v23 = v14;
        do
        {
          v24 = &v22[8 * v20];
          v25 = (const void *)*((_QWORD *)v24 - 9);
          v26 = (void *)*((_QWORD *)v24 - 7);
          if (!*(_DWORD *)&v22[4 * v20] || __B == 0.0)
          {
            memcpy(v26, v25, v21);
          }
          else
          {
            vDSP_vabs((const float *)v25, 1, *((float **)this + 76), 1, v23);
            v27 = (float *)*((_QWORD *)this + 76);
            if (*(_DWORD *)&v22[4 * v20] == 1)
              vDSP_vadd((const float *)v25, 1, *((const float **)this + 76), 1, v27, 1, v23);
            else
              vDSP_vsub(*((const float **)this + 76), 1, (const float *)v25, 1, v27, 1, v23);
            vDSP_vsmul(*((const float **)this + 76), 1, &__B, *((float **)this + 76), 1, v23);
            vDSP_vadd((const float *)v25, 1, *((const float **)this + 76), 1, (float *)v26, 1, v23);
          }
          ++v20;
        }
        while (v20 < *((unsigned int *)this + 150));
      }
    }
  }
  return 0;
}

uint64_t AUDecorrelator::Render(AUDecorrelator *this, unsigned int *a2, const AudioTimeStamp *a3, uint64_t a4)
{
  uint64_t result;
  uint64_t Element;
  ausdk::AUInputElement *v10;
  uint64_t v11;
  uint64_t BufferList;
  _QWORD v13[2];

  v13[1] = *MEMORY[0x1E0C80C00];
  if (*((_DWORD *)this + 84) < a4)
    return 4294956422;
  if (!ausdk::AUBase::HasInput(this, 0))
    return 4294956420;
  Element = ausdk::AUScope::SafeGetElement((AUDecorrelator *)((char *)this + 128), 0);
  v10 = (ausdk::AUInputElement *)ausdk::AUScope::SafeGetElement((AUDecorrelator *)((char *)this + 80), 0);
  result = ausdk::AUInputElement::PullInput(v10, a2, a3, 0, a4);
  if (!(_DWORD)result)
  {
    v11 = ausdk::AUScope::SafeGetElement((AUDecorrelator *)((char *)this + 80), 0);
    v13[0] = ausdk::AUBufferList::GetBufferList((ausdk::AUBufferList *)(v11 + 144));
    BufferList = ausdk::AUBufferList::GetBufferList((ausdk::AUBufferList *)(Element + 144));
    return (*(uint64_t (**)(AUDecorrelator *, unsigned int *, uint64_t, uint64_t, _QWORD *, uint64_t, uint64_t *))(*(_QWORD *)this + 184))(this, a2, a4, 1, v13, 1, &BufferList);
  }
  return result;
}

BOOL AUDecorrelator::BusCountWritable(AUDecorrelator *this, int a2)
{
  return (a2 - 1) < 2;
}

uint64_t AUDecorrelator::GetParameterInfo(AUDecorrelator *this, int a2, unsigned int a3, AudioUnitParameterInfo *buffer)
{
  uint64_t result;
  const __CFString *v6;
  AudioUnitParameterValue v7;
  AudioUnitParameterValue v8;
  int v9;

  buffer->unitName = 0;
  buffer->flags = 0x40000000;
  result = 4294956418;
  if (!a2 && a3 <= 2)
  {
    v6 = off_1E69D6050[a3];
    v7 = flt_1B665D874[a3];
    v8 = flt_1B665D880[a3];
    v9 = dword_1B665D88C[a3];
    buffer->cfNameString = v6;
    buffer->flags = 1207959552;
    CFStringGetCString(v6, buffer->name, 52, 0x8000100u);
    result = 0;
    *(_QWORD *)&buffer->unit = 0;
    buffer->maxValue = v7;
    buffer->defaultValue = v8;
    buffer->flags |= v9;
  }
  return result;
}

uint64_t AUDecorrelator::RestoreState(OpaqueAudioComponentInstance **this, const void *a2)
{
  uint64_t v3;

  v3 = ausdk::AUBase::RestoreState(this, a2);
  if (!(_DWORD)v3)
  {
    AUDecorrelator::ApplyParameters((AUDecorrelator *)this);
    ++*((_DWORD *)this + 133);
  }
  return v3;
}

double AUDecorrelator::GetLatency(AUDecorrelator *this)
{
  return 0.0;
}

double AUDecorrelator::GetTailTime(AUDecorrelator *this)
{
  return 0.0;
}

uint64_t AUDecorrelator::SupportsTail(AUDecorrelator *this)
{
  return 1;
}

BOOL AUDecorrelator::StreamFormatWritable(AUDecorrelator *this)
{
  return *((_BYTE *)this + 17) == 0;
}

uint64_t AUDecorrelator::SupportedNumChannels(AUDecorrelator *this, const AUChannelInfo **a2)
{
  if (a2)
    *a2 = (const AUChannelInfo *)&AUDecorrelator::SupportedNumChannels(AUChannelInfo const**)::sSupportedChannelConfigs;
  return 1;
}

BOOL AUDecorrelator::ValidFormat(AUDecorrelator *this, const AudioStreamBasicDescription *a2, unsigned int a3, AudioStreamBasicDescription *a4)
{
  _BOOL8 result;

  if (a4->mChannelsPerFrame != 2)
    return 0;
  result = ausdk::ASBD::IsCommonFloat32((ausdk::ASBD *)a4, a2);
  if (result)
    return (LOBYTE(a4->mFormatFlags) >> 5) & 1;
  return result;
}

void AUDecorrelator::ApplyParameters(AUDecorrelator *this)
{
  uint64_t v2;
  ausdk::AUElement *v3;
  ausdk::AUElement **v4;
  uint64_t v5;
  ausdk::AUElement *v6;
  ausdk::AUElement **v7;
  float Parameter;
  uint64_t v9;
  ausdk::AUElement *v10;
  ausdk::AUElement **v11;
  float v12;

  v2 = *((_QWORD *)this + 9);
  if (v2)
  {
    v3 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v2 + 32))(v2, 0);
  }
  else
  {
    v4 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v4)
      v3 = 0;
    else
      v3 = *v4;
  }
  *((float *)this + 151) = ausdk::AUElement::GetParameter(v3, 0);
  v5 = *((_QWORD *)this + 9);
  if (v5)
  {
    v6 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v5 + 32))(v5, 0);
  }
  else
  {
    v7 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v7)
      v6 = 0;
    else
      v6 = *v7;
  }
  Parameter = ausdk::AUElement::GetParameter(v6, 1u);
  *((_DWORD *)this + 148) = Parameter;
  *((_DWORD *)this + 158) = Parameter;
  v9 = *((_QWORD *)this + 9);
  if (v9)
  {
    v10 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v9 + 32))(v9, 0);
  }
  else
  {
    v11 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v11)
      v10 = 0;
    else
      v10 = *v11;
  }
  v12 = ausdk::AUElement::GetParameter(v10, 2u);
  *((_DWORD *)this + 149) = v12;
  *((_DWORD *)this + 159) = v12;
}

void AUDenoise::~AUDenoise(AUDenoise *this)
{
  AUDenoise::~AUDenoise(this);
  JUMPOUT(0x1BCC95CECLL);
}

{
  uint64_t *v2;
  void *v3;
  void *v4;
  void *v5;
  uint64_t v6;
  void **v7;

  *(_QWORD *)this = &off_1E69D6078;
  v2 = (uint64_t *)((char *)this + 1144);
  std::unique_ptr<PMWF_FAST_GS_vDSP>::reset[abi:ne180100]((uint64_t *)this + 143, 0);
  std::unique_ptr<iPMWF_HRLS_vDSP>::reset[abi:ne180100]((_QWORD *)this + 144, 0);
  std::unique_ptr<GuidedMWF>::reset[abi:ne180100]((_QWORD *)this + 145, 0);
  std::unique_ptr<caulk::concurrent::messenger>::reset[abi:ne180100]((uint64_t *)this + 156, 0);
  v3 = (void *)*((_QWORD *)this + 153);
  if (v3)
  {
    *((_QWORD *)this + 154) = v3;
    operator delete(v3);
  }
  v4 = (void *)*((_QWORD *)this + 150);
  if (v4)
  {
    *((_QWORD *)this + 151) = v4;
    operator delete(v4);
  }
  v5 = (void *)*((_QWORD *)this + 147);
  if (v5)
  {
    *((_QWORD *)this + 148) = v5;
    operator delete(v5);
  }
  v6 = *((_QWORD *)this + 146);
  *((_QWORD *)this + 146) = 0;
  if (v6)
    std::default_delete<PMWFStvPlistHolder>::operator()[abi:ne180100](v6);
  std::unique_ptr<GuidedMWF>::reset[abi:ne180100]((_QWORD *)this + 145, 0);
  std::unique_ptr<iPMWF_HRLS_vDSP>::reset[abi:ne180100]((_QWORD *)this + 144, 0);
  std::unique_ptr<PMWF_FAST_GS_vDSP>::reset[abi:ne180100](v2, 0);
  v7 = (void **)((char *)this + 584);
  std::vector<std::unique_ptr<DspLib::AlgorithmBaseNewParameters>>::__destroy_vector::operator()[abi:ne180100](&v7);
  ausdk::AUBase::~AUBase(this);
}

void AUDenoise::CreateExtendedElements(AUDenoise *this)
{
  unint64_t i;
  std::string *v3;
  __int128 v4;
  void **v5;
  CFStringRef v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  std::string v10;
  void *__p[2];
  int64_t v12;

  ausdk::AUScope::Initialize((int64x2_t *)((char *)this + 568), this, 4, 16);
  for (i = 0; i != 16; ++i)
  {
    std::to_string(&v10, i);
    v3 = std::string::insert(&v10, 0, "Mic", 3uLL);
    v4 = *(_OWORD *)&v3->__r_.__value_.__l.__data_;
    v12 = v3->__r_.__value_.__r.__words[2];
    *(_OWORD *)__p = v4;
    v3->__r_.__value_.__l.__size_ = 0;
    v3->__r_.__value_.__r.__words[2] = 0;
    v3->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v10.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v10.__r_.__value_.__l.__data_);
    if (v12 >= 0)
      v5 = __p;
    else
      v5 = (void **)__p[0];
    v6 = CFStringCreateWithCString(0, (const char *)v5, 0x8000100u);
    v7 = *((_QWORD *)this + 76);
    if (v7)
    {
      v8 = (*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)v7 + 32))(v7, i);
    }
    else
    {
      v9 = *((_QWORD *)this + 73);
      if (i >= (*((_QWORD *)this + 74) - v9) >> 3)
        v8 = 0;
      else
        v8 = *(_QWORD *)(v9 + 8 * i);
    }
    ausdk::Owned<__CFString const*>::operator=((const void **)(v8 + 72), v6);
    CFRelease(v6);
    if (SHIBYTE(v12) < 0)
      operator delete(__p[0]);
  }
}

void sub_1B636A2EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t AUDenoise::Initialize(AUDenoise *this)
{
  NSObject *v2;
  uint64_t Element;
  unsigned int v4;
  char v5;
  char v6;
  int v7;
  unsigned int v8;
  char v9;
  char v10;
  int v11;
  int64x2_t *Scope;
  double AppFloatValue;
  float v14;
  uint64_t v15;
  ausdk::AUElement *v16;
  NSObject *v17;
  int v18;
  const char *v19;
  int v20;
  ausdk::AUElement **v22;
  NSObject *v23;
  NSObject *v24;
  BOOL v25;
  uint8_t buf[4];
  const char *v27;
  __int16 v28;
  int v29;
  __int16 v30;
  _DWORD v31[7];

  *(_QWORD *)&v31[5] = *MEMORY[0x1E0C80C00];
  if (AUDenoiseLogScope(void)::once != -1)
    dispatch_once(&AUDenoiseLogScope(void)::once, &__block_literal_global_10126);
  if (!AUDenoiseLogScope(void)::scope)
  {
    v2 = MEMORY[0x1E0C81028];
LABEL_7:
    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136315394;
      v27 = "AUDenoise.cpp";
      v28 = 1024;
      v29 = 161;
      _os_log_impl(&dword_1B5ED0000, v2, OS_LOG_TYPE_DEFAULT, "%25s:%-5d AUDenoise: Initialize.\n", buf, 0x12u);
    }
    goto LABEL_9;
  }
  v2 = *(NSObject **)AUDenoiseLogScope(void)::scope;
  if (*(_QWORD *)AUDenoiseLogScope(void)::scope)
    goto LABEL_7;
LABEL_9:
  Element = ausdk::AUScope::SafeGetElement((AUDenoise *)((char *)this + 80), 0);
  v4 = 0;
  *((_DWORD *)this + 158) = *(_DWORD *)(Element + 108);
  v5 = 1;
  while (1)
  {
    v6 = v5;
    v7 = *(_DWORD *)(ausdk::AUScope::SafeGetElement((AUDenoise *)((char *)this + 80), v4) + 108);
    if (v7 != *((_DWORD *)this + 158))
      break;
    v5 = 0;
    v4 = 1;
    if ((v6 & 1) == 0)
    {
      v8 = 0;
      v9 = 1;
      while (1)
      {
        v10 = v9;
        v11 = *(_DWORD *)(ausdk::AUScope::SafeGetElement((AUDenoise *)((char *)this + 128), v8) + 108);
        if (v11 != *((_DWORD *)this + 158))
          break;
        v9 = 0;
        v8 = 1;
        if ((v10 & 1) == 0)
        {
          Scope = (int64x2_t *)ausdk::AUBase::GetScope(this, 4u);
          ausdk::AUScope::SetNumberOfElements(Scope, 0x10u);
          v25 = 0;
          AppFloatValue = CACFPreferencesGetAppFloatValue(CFSTR("pmwf_log_period_in_seconds"), CFSTR("com.apple.coreaudio"), &v25);
          if (v25)
          {
            v14 = AppFloatValue;
            if (v14 > 0.0)
            {
              *((float *)this + 185) = v14;
              v15 = *((_QWORD *)this + 9);
              if (v15)
              {
                v16 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v15 + 32))(v15, 0);
              }
              else
              {
                v22 = (ausdk::AUElement **)*((_QWORD *)this + 6);
                if (*((ausdk::AUElement ***)this + 7) == v22)
                  v16 = 0;
                else
                  v16 = *v22;
              }
              ausdk::AUElement::SetParameter(v16, 0x1Du, v14, 0);
              if (AUDenoiseLogScope(void)::once != -1)
                dispatch_once(&AUDenoiseLogScope(void)::once, &__block_literal_global_10126);
              if (AUDenoiseLogScope(void)::scope)
              {
                v23 = *(NSObject **)AUDenoiseLogScope(void)::scope;
                if (!*(_QWORD *)AUDenoiseLogScope(void)::scope)
                  goto LABEL_48;
              }
              else
              {
                v23 = MEMORY[0x1E0C81028];
              }
              if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
              {
                *(_DWORD *)buf = 136315650;
                v27 = "AUDenoise.cpp";
                v28 = 1024;
                v29 = 196;
                v30 = 2048;
                *(double *)v31 = v14;
                _os_log_impl(&dword_1B5ED0000, v23, OS_LOG_TYPE_DEFAULT, "%25s:%-5d AUDenoise: Using logPeriod of (%g)s as specified in defaults write pmwf_log_period_in_seconds.\n", buf, 0x1Cu);
              }
            }
          }
LABEL_48:
          AUDenoise::UpdateState(this);
          *((_QWORD *)this + 67) = *((_QWORD *)this + 66);
          AUDenoise::InitializePMWFClasses(this);
          (*(void (**)(AUDenoise *, _QWORD, _QWORD))(*(_QWORD *)this + 72))(this, 0, 0);
          if (AUDenoiseLogScope(void)::once != -1)
            dispatch_once(&AUDenoiseLogScope(void)::once, &__block_literal_global_10126);
          if (AUDenoiseLogScope(void)::scope)
          {
            v24 = *(NSObject **)AUDenoiseLogScope(void)::scope;
            if (!*(_QWORD *)AUDenoiseLogScope(void)::scope)
              return 0;
          }
          else
          {
            v24 = MEMORY[0x1E0C81028];
          }
          if (os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 136315394;
            v27 = "AUDenoise.cpp";
            v28 = 1024;
            v29 = 211;
            _os_log_impl(&dword_1B5ED0000, v24, OS_LOG_TYPE_DEFAULT, "%25s:%-5d AUDenoise: Successfully initialized.\n", buf, 0x12u);
          }
          return 0;
        }
      }
      if (AUDenoiseLogScope(void)::once != -1)
        dispatch_once(&AUDenoiseLogScope(void)::once, &__block_literal_global_10126);
      if (AUDenoiseLogScope(void)::scope)
      {
        v17 = *(NSObject **)AUDenoiseLogScope(void)::scope;
        if (!*(_QWORD *)AUDenoiseLogScope(void)::scope)
          return 4294956421;
      }
      else
      {
        v17 = MEMORY[0x1E0C81028];
      }
      if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
      {
        v20 = *((_DWORD *)this + 158);
        *(_DWORD *)buf = 136315906;
        v27 = "AUDenoise.cpp";
        v28 = 1024;
        v29 = 178;
        v30 = 1024;
        v31[0] = v11;
        LOWORD(v31[1]) = 1024;
        *(_DWORD *)((char *)&v31[1] + 2) = v20;
        v19 = "%25s:%-5d Number of channel in the output stream (%u) not equal to the expected number of channels (%u).\n";
        goto LABEL_35;
      }
      return 4294956421;
    }
  }
  if (AUDenoiseLogScope(void)::once != -1)
    dispatch_once(&AUDenoiseLogScope(void)::once, &__block_literal_global_10126);
  if (AUDenoiseLogScope(void)::scope)
  {
    v17 = *(NSObject **)AUDenoiseLogScope(void)::scope;
    if (!*(_QWORD *)AUDenoiseLogScope(void)::scope)
      return 4294956421;
  }
  else
  {
    v17 = MEMORY[0x1E0C81028];
  }
  if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
  {
    v18 = *((_DWORD *)this + 158);
    *(_DWORD *)buf = 136315906;
    v27 = "AUDenoise.cpp";
    v28 = 1024;
    v29 = 171;
    v30 = 1024;
    v31[0] = v7;
    LOWORD(v31[1]) = 1024;
    *(_DWORD *)((char *)&v31[1] + 2) = v18;
    v19 = "%25s:%-5d Number of channel in the input stream (%u) not equal to the expected number of channels (%u).\n";
LABEL_35:
    _os_log_impl(&dword_1B5ED0000, v17, OS_LOG_TYPE_ERROR, v19, buf, 0x1Eu);
  }
  return 4294956421;
}

void AUDenoise::Cleanup(AUDenoise *this)
{
  NSObject *v2;
  uint64_t v3;
  unsigned int v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  _DWORD *v8;
  uint64_t v9;
  unint64_t v10;
  void *v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  _DWORD *v20;
  uint64_t v21;
  unint64_t v22;
  void *v23;
  uint64_t v24;
  void *v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  void *v29;
  uint64_t v30;
  void *v31;
  uint64_t v32;
  void *v33;
  uint64_t v34;
  unsigned int v35;
  unsigned int v36;
  float v37;
  NSObject *v38;
  uint64_t v39;
  void *v40;
  uint64_t v41;
  void *v42;
  uint64_t v43;
  NSObject *v44;
  float v45;
  float __A;
  uint8_t buf[4];
  const char *v48;
  __int16 v49;
  int v50;
  uint64_t v51;

  v51 = *MEMORY[0x1E0C80C00];
  if (AUDenoiseLogScope(void)::once != -1)
    dispatch_once(&AUDenoiseLogScope(void)::once, &__block_literal_global_10126);
  if (AUDenoiseLogScope(void)::scope)
  {
    v2 = *(NSObject **)AUDenoiseLogScope(void)::scope;
    if (!*(_QWORD *)AUDenoiseLogScope(void)::scope)
      goto LABEL_9;
  }
  else
  {
    v2 = MEMORY[0x1E0C81028];
  }
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 136315394;
    v48 = "AUDenoise.cpp";
    v49 = 1024;
    v50 = 222;
    _os_log_impl(&dword_1B5ED0000, v2, OS_LOG_TYPE_DEFAULT, "%25s:%-5d AUDenoise: Cleanup.\n", buf, 0x12u);
  }
LABEL_9:
  v3 = *((_QWORD *)this + 143);
  if (v3)
  {
    v4 = *(_DWORD *)(v3 + 48);
    *(float *)(v3 + 84) = (float)v4;
    *(float *)(v3 + 88) = -(float)v4;
    *(_DWORD *)(v3 + 168) = v4;
    vec::fill<BOOL>(*(_QWORD *)(v3 + 176), *(_QWORD *)(v3 + 184), 0);
    vec::fill<float>(*(_QWORD *)(v3 + 200), *(_QWORD *)(v3 + 208), (_DWORD *)(v3 + 24));
    vec::fill<float>(*(_QWORD *)(v3 + 224), *(_QWORD *)(v3 + 232), (_DWORD *)(v3 + 24));
    vec::cleanup<float>((uint64_t *)(v3 + 248));
    vec::cleanup<float>((uint64_t *)(v3 + 272));
    vec::cleanup<float>((uint64_t *)(v3 + 320));
    vec::cleanup<float>((uint64_t *)(v3 + 344));
    LODWORD(v5) = *(_DWORD *)(v3 + 48);
    if ((_DWORD)v5)
    {
      v6 = 0;
      v7 = 0;
      do
      {
        vDSP_vfill((const float *)(v3 + 80), *(float **)(*(_QWORD *)(*(_QWORD *)(v3 + 296) + v6) + 16 * (v7 + v5)), 1, *(unsigned int *)(v3 + 52));
        vDSP_vfill((const float *)(v3 + 80), *(float **)(*(_QWORD *)(*(_QWORD *)(v3 + 368) + v6) + 16 * (v7++ + *(_DWORD *)(v3 + 48))), 1, *(unsigned int *)(v3 + 52));
        v5 = *(unsigned int *)(v3 + 48);
        v6 += 24;
      }
      while (v7 < v5);
    }
    v8 = *(_DWORD **)(v3 + 392);
    v9 = *(_QWORD *)(v3 + 400) - (_QWORD)v8;
    if (v9 >= 1)
    {
      v10 = ((unint64_t)v9 >> 2) + 1;
      do
      {
        *v8++ = *(_DWORD *)(v3 + 84);
        --v10;
      }
      while (v10 > 1);
    }
    v11 = *(void **)(v3 + 416);
    v12 = *(_QWORD *)(v3 + 424) - (_QWORD)v11;
    if (v12 >= 1)
      memset_pattern16(v11, &unk_1B66A2B30, 4 * (((unint64_t)v12 >> 2) - ((unint64_t)v12 > 3)) + 4);
    bzero(*(void **)(v3 + 448), *(_QWORD *)(v3 + 456) - *(_QWORD *)(v3 + 448));
    bzero(*(void **)(v3 + 472), *(_QWORD *)(v3 + 480) - *(_QWORD *)(v3 + 472));
    bzero(*(void **)(v3 + 496), *(_QWORD *)(v3 + 504) - *(_QWORD *)(v3 + 496));
    bzero(*(void **)(v3 + 544), *(_QWORD *)(v3 + 552) - *(_QWORD *)(v3 + 544));
    bzero(*(void **)(v3 + 568), *(_QWORD *)(v3 + 576) - *(_QWORD *)(v3 + 568));
    bzero(*(void **)(v3 + 592), *(_QWORD *)(v3 + 600) - *(_QWORD *)(v3 + 592));
    bzero(*(void **)(v3 + 616), *(_QWORD *)(v3 + 624) - *(_QWORD *)(v3 + 616));
    bzero(*(void **)(v3 + 640), *(_QWORD *)(v3 + 648) - *(_QWORD *)(v3 + 640));
    bzero(*(void **)(v3 + 664), *(_QWORD *)(v3 + 672) - *(_QWORD *)(v3 + 664));
    bzero(*(void **)(v3 + 688), *(_QWORD *)(v3 + 696) - *(_QWORD *)(v3 + 688));
    bzero(*(void **)(v3 + 712), *(_QWORD *)(v3 + 720) - *(_QWORD *)(v3 + 712));
    bzero(*(void **)(v3 + 736), *(_QWORD *)(v3 + 744) - *(_QWORD *)(v3 + 736));
    bzero(*(void **)(v3 + 760), *(_QWORD *)(v3 + 768) - *(_QWORD *)(v3 + 760));
    bzero(*(void **)(v3 + 784), *(_QWORD *)(v3 + 792) - *(_QWORD *)(v3 + 784));
    bzero(*(void **)(v3 + 808), *(_QWORD *)(v3 + 816) - *(_QWORD *)(v3 + 808));
    bzero(*(void **)(v3 + 832), *(_QWORD *)(v3 + 840) - *(_QWORD *)(v3 + 832));
    bzero(*(void **)(v3 + 856), *(_QWORD *)(v3 + 864) - *(_QWORD *)(v3 + 856));
    bzero(*(void **)(v3 + 880), *(_QWORD *)(v3 + 888) - *(_QWORD *)(v3 + 880));
    bzero(*(void **)(v3 + 904), *(_QWORD *)(v3 + 912) - *(_QWORD *)(v3 + 904));
    bzero(*(void **)(v3 + 928), *(_QWORD *)(v3 + 936) - *(_QWORD *)(v3 + 928));
    bzero(*(void **)(v3 + 968), *(_QWORD *)(v3 + 976) - *(_QWORD *)(v3 + 968));
    bzero(*(void **)(v3 + 992), *(_QWORD *)(v3 + 1000) - *(_QWORD *)(v3 + 992));
    bzero(*(void **)(v3 + 1016), *(_QWORD *)(v3 + 1024) - *(_QWORD *)(v3 + 1016));
    bzero(*(void **)(v3 + 1040), *(_QWORD *)(v3 + 1048) - *(_QWORD *)(v3 + 1040));
    bzero(*(void **)(v3 + 1064), *(_QWORD *)(v3 + 1072) - *(_QWORD *)(v3 + 1064));
    bzero(*(void **)(v3 + 1088), *(_QWORD *)(v3 + 1096) - *(_QWORD *)(v3 + 1088));
    bzero(*(void **)(v3 + 1112), *(_QWORD *)(v3 + 1120) - *(_QWORD *)(v3 + 1112));
    bzero(*(void **)(v3 + 1136), *(_QWORD *)(v3 + 1144) - *(_QWORD *)(v3 + 1136));
    bzero(*(void **)(v3 + 1160), *(_QWORD *)(v3 + 1168) - *(_QWORD *)(v3 + 1160));
    bzero(*(void **)(v3 + 1184), *(_QWORD *)(v3 + 1192) - *(_QWORD *)(v3 + 1184));
    bzero(*(void **)(v3 + 1256), *(_QWORD *)(v3 + 1264) - *(_QWORD *)(v3 + 1256));
    bzero(*(void **)(v3 + 1304), *(_QWORD *)(v3 + 1312) - *(_QWORD *)(v3 + 1304));
    bzero(*(void **)(v3 + 1280), *(_QWORD *)(v3 + 1288) - *(_QWORD *)(v3 + 1280));
    v13 = *(void **)(v3 + 1328);
    v14 = *(_QWORD *)(v3 + 1336) - (_QWORD)v13;
    if (v14 >= 1)
      memset_pattern16(v13, &unk_1B66A2B30, 4 * (((unint64_t)v14 >> 2) - ((unint64_t)v14 > 3)) + 4);
    *(_DWORD *)(v3 + 440) = 0;
    bzero(*(void **)(v3 + 1352), *(_QWORD *)(v3 + 1360) - *(_QWORD *)(v3 + 1352));
    bzero(*(void **)(v3 + 1376), *(_QWORD *)(v3 + 1384) - *(_QWORD *)(v3 + 1376));
    bzero(*(void **)(v3 + 1400), *(_QWORD *)(v3 + 1408) - *(_QWORD *)(v3 + 1400));
    bzero(*(void **)(v3 + 1424), *(_QWORD *)(v3 + 1432) - *(_QWORD *)(v3 + 1424));
    bzero(*(void **)(v3 + 1448), *(_QWORD *)(v3 + 1456) - *(_QWORD *)(v3 + 1448));
    bzero(*(void **)(v3 + 1472), *(_QWORD *)(v3 + 1480) - *(_QWORD *)(v3 + 1472));
    bzero(*(void **)(v3 + 1496), *(_QWORD *)(v3 + 1504) - *(_QWORD *)(v3 + 1496));
    *(_DWORD *)(v3 + 148) = 0;
    *(_DWORD *)(v3 + 1520) = 0;
    v15 = *(void **)(v3 + 1208);
    v16 = *(_QWORD *)(v3 + 1216) - (_QWORD)v15;
    if (v16 >= 1)
      memset_pattern16(v15, &unk_1B6627B80, 4 * (((unint64_t)v16 >> 2) - ((unint64_t)v16 > 3)) + 4);
    v17 = *(void **)(v3 + 1232);
    v18 = *(_QWORD *)(v3 + 1240) - (_QWORD)v17;
    if (v18 >= 1)
      memset_pattern16(v17, &unk_1B6627B80, 4 * (((unint64_t)v18 >> 2) - ((unint64_t)v18 > 3)) + 4);
  }
  v19 = *((_QWORD *)this + 144);
  if (v19)
  {
    bzero(*(void **)(v19 + 144), *(_QWORD *)(v19 + 152) - *(_QWORD *)(v19 + 144));
    bzero(*(void **)(v19 + 168), *(_QWORD *)(v19 + 176) - *(_QWORD *)(v19 + 168));
    v20 = *(_DWORD **)(v19 + 192);
    v21 = *(_QWORD *)(v19 + 200) - (_QWORD)v20;
    if (v21 >= 1)
    {
      v22 = ((unint64_t)v21 >> 2) + 1;
      do
      {
        *v20++ = *(_DWORD *)(v19 + 92);
        --v22;
      }
      while (v22 > 1);
    }
    bzero(*(void **)(v19 + 360), *(_QWORD *)(v19 + 368) - *(_QWORD *)(v19 + 360));
    bzero(*(void **)(v19 + 384), *(_QWORD *)(v19 + 392) - *(_QWORD *)(v19 + 384));
    bzero(*(void **)(v19 + 408), *(_QWORD *)(v19 + 416) - *(_QWORD *)(v19 + 408));
    bzero(*(void **)(v19 + 432), *(_QWORD *)(v19 + 440) - *(_QWORD *)(v19 + 432));
    bzero(*(void **)(v19 + 456), *(_QWORD *)(v19 + 464) - *(_QWORD *)(v19 + 456));
    bzero(*(void **)(v19 + 480), *(_QWORD *)(v19 + 488) - *(_QWORD *)(v19 + 480));
    bzero(*(void **)(v19 + 504), *(_QWORD *)(v19 + 512) - *(_QWORD *)(v19 + 504));
    bzero(*(void **)(v19 + 528), *(_QWORD *)(v19 + 536) - *(_QWORD *)(v19 + 528));
    bzero(*(void **)(v19 + 240), *(_QWORD *)(v19 + 248) - *(_QWORD *)(v19 + 240));
    bzero(*(void **)(v19 + 264), *(_QWORD *)(v19 + 272) - *(_QWORD *)(v19 + 264));
    bzero(*(void **)(v19 + 288), *(_QWORD *)(v19 + 296) - *(_QWORD *)(v19 + 288));
    bzero(*(void **)(v19 + 312), *(_QWORD *)(v19 + 320) - *(_QWORD *)(v19 + 312));
    bzero(*(void **)(v19 + 336), *(_QWORD *)(v19 + 344) - *(_QWORD *)(v19 + 336));
    bzero(*(void **)(v19 + 216), *(_QWORD *)(v19 + 224) - *(_QWORD *)(v19 + 216));
    v23 = *(void **)(v19 + 576);
    v24 = *(_QWORD *)(v19 + 584) - (_QWORD)v23;
    if (v24 >= 1)
      memset_pattern16(v23, &unk_1B6627B80, 4 * (((unint64_t)v24 >> 2) - ((unint64_t)v24 > 3)) + 4);
    v25 = *(void **)(v19 + 600);
    v26 = *(_QWORD *)(v19 + 608) - (_QWORD)v25;
    if (v26 >= 1)
      memset_pattern16(v25, &unk_1B6627B80, 4 * (((unint64_t)v26 >> 2) - ((unint64_t)v26 > 3)) + 4);
    v27 = *(void **)(v19 + 768);
    v28 = *(_QWORD *)(v19 + 776) - (_QWORD)v27;
    if (v28 >= 1)
      memset_pattern16(v27, &unk_1B6627B80, 4 * (((unint64_t)v28 >> 2) - ((unint64_t)v28 > 3)) + 4);
    v29 = *(void **)(v19 + 792);
    v30 = *(_QWORD *)(v19 + 800) - (_QWORD)v29;
    if (v30 >= 1)
      memset_pattern16(v29, &unk_1B6627B80, 4 * (((unint64_t)v30 >> 2) - ((unint64_t)v30 > 3)) + 4);
    v31 = *(void **)(v19 + 816);
    v32 = *(_QWORD *)(v19 + 824) - (_QWORD)v31;
    if (v32 >= 1)
      bzero(v31, 4 * (((unint64_t)v32 >> 2) - ((unint64_t)v32 > 3)) + 4);
    bzero(*(void **)(v19 + 624), *(_QWORD *)(v19 + 632) - *(_QWORD *)(v19 + 624));
    bzero(*(void **)(v19 + 744), *(_QWORD *)(v19 + 752) - *(_QWORD *)(v19 + 744));
    bzero(*(void **)(v19 + 696), *(_QWORD *)(v19 + 704) - *(_QWORD *)(v19 + 696));
    bzero(*(void **)(v19 + 672), *(_QWORD *)(v19 + 680) - *(_QWORD *)(v19 + 672));
    bzero(*(void **)(v19 + 720), *(_QWORD *)(v19 + 728) - *(_QWORD *)(v19 + 720));
    bzero(*(void **)(v19 + 648), *(_QWORD *)(v19 + 656) - *(_QWORD *)(v19 + 648));
    v33 = *(void **)(v19 + 552);
    v34 = *(_QWORD *)(v19 + 560) - (_QWORD)v33;
    if (v34 >= 1)
      memset_pattern16(v33, &unk_1B6627B80, 4 * (((unint64_t)v34 >> 2) - ((unint64_t)v34 > 3)) + 4);
    __A = 1.0 / sqrtf(*(float *)(v19 + 24));
    if (*(_DWORD *)(v19 + 32))
    {
      v35 = 0;
      do
      {
        vDSP_vfill(&__A, (float *)(*(_QWORD *)(v19 + 168) + 4 * (*(_DWORD *)(v19 + 36) + *(_DWORD *)(v19 + 40)) * v35), 1, *(unsigned int *)(v19 + 36));
        vDSP_vfill((const float *)(v19 + 24), (float *)(*(_QWORD *)(v19 + 696) + 4 * (*(_DWORD *)(v19 + 36) + *(_DWORD *)(v19 + 40)) * v35), 1, *(unsigned int *)(v19 + 36));
        vDSP_vfill((const float *)(v19 + 24), (float *)(*(_QWORD *)(v19 + 744) + 4 * (*(_DWORD *)(v19 + 36) + *(_DWORD *)(v19 + 40)) * v35++), 1, *(unsigned int *)(v19 + 36));
        v36 = *(_DWORD *)(v19 + 32);
      }
      while (v35 < v36);
      v37 = (float)v36;
    }
    else
    {
      v37 = 0.0;
    }
    v45 = 1.0 / sqrtf(v37);
    vDSP_vfill(&v45, *(float **)(v19 + 792), 1, *(unsigned int *)(v19 + 40));
    vDSP_vfill((const float *)(v19 + 68), (float *)(*(_QWORD *)(v19 + 792) + 4 * *(unsigned int *)(v19 + 40)), 1, *(unsigned int *)(v19 + 40));
    vDSP_vfill((const float *)(v19 + 68), (float *)(*(_QWORD *)(v19 + 768) + 4 * *(unsigned int *)(v19 + 40)), 1, *(unsigned int *)(v19 + 40));
    iPMWF_HRLS_vDSP::InitializeFilter((iPMWF_HRLS_vDSP *)v19);
    if (AUDenoiseLogScope(void)::once != -1)
      dispatch_once(&AUDenoiseLogScope(void)::once, &__block_literal_global_19324);
    if (AUDenoiseLogScope(void)::scope)
    {
      v38 = *(NSObject **)AUDenoiseLogScope(void)::scope;
      if (!*(_QWORD *)AUDenoiseLogScope(void)::scope)
        goto LABEL_53;
    }
    else
    {
      v38 = MEMORY[0x1E0C81028];
    }
    if (os_log_type_enabled(v38, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 136315394;
      v48 = "iPMWF_HRLS_vDSP.cpp";
      v49 = 1024;
      v50 = 213;
      _os_log_impl(&dword_1B5ED0000, v38, OS_LOG_TYPE_DEBUG, "%25s:%-5d iPMWF: successful clean-up.\n", buf, 0x12u);
    }
  }
LABEL_53:
  v39 = *((_QWORD *)this + 145);
  if (!v39)
    return;
  bzero(*(void **)(v39 + 136), *(_QWORD *)(v39 + 144) - *(_QWORD *)(v39 + 136));
  bzero(*(void **)(v39 + 160), *(_QWORD *)(v39 + 168) - *(_QWORD *)(v39 + 160));
  bzero(*(void **)(v39 + 232), *(_QWORD *)(v39 + 240) - *(_QWORD *)(v39 + 232));
  bzero(*(void **)(v39 + 256), *(_QWORD *)(v39 + 264) - *(_QWORD *)(v39 + 256));
  v40 = *(void **)(v39 + 304);
  v41 = *(_QWORD *)(v39 + 312) - (_QWORD)v40;
  if (v41 >= 1)
    memset_pattern16(v40, &unk_1B6627B80, 4 * (((unint64_t)v41 >> 2) - ((unint64_t)v41 > 3)) + 4);
  v42 = *(void **)(v39 + 328);
  v43 = *(_QWORD *)(v39 + 336) - (_QWORD)v42;
  if (v43 >= 1)
    memset_pattern16(v42, &unk_1B6627B80, 4 * (((unint64_t)v43 >> 2) - ((unint64_t)v43 > 3)) + 4);
  bzero(*(void **)(v39 + 400), *(_QWORD *)(v39 + 408) - *(_QWORD *)(v39 + 400));
  bzero(*(void **)(v39 + 424), *(_QWORD *)(v39 + 432) - *(_QWORD *)(v39 + 424));
  GuidedMWF::Reset((GuidedMWF *)v39);
  if (AUDenoiseLogScope(void)::once != -1)
    dispatch_once(&AUDenoiseLogScope(void)::once, &__block_literal_global_21398);
  if (AUDenoiseLogScope(void)::scope)
  {
    v44 = *(NSObject **)AUDenoiseLogScope(void)::scope;
    if (!*(_QWORD *)AUDenoiseLogScope(void)::scope)
      return;
  }
  else
  {
    v44 = MEMORY[0x1E0C81028];
  }
  if (os_log_type_enabled(v44, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 136315394;
    v48 = "GuidedMWF.cpp";
    v49 = 1024;
    v50 = 154;
    _os_log_impl(&dword_1B5ED0000, v44, OS_LOG_TYPE_DEBUG, "%25s:%-5d successful clean-up.\n", buf, 0x12u);
  }
}

uint64_t AUDenoise::Reset(AUDenoise *this)
{
  unsigned int v1;
  uint64_t v2;
  unsigned int v3;
  unsigned int i;
  unsigned int v5;
  NSObject *v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  int v13;
  const char *v14;
  __int16 v15;
  int v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v1 = *((_DWORD *)this + 165);
  if (v1 < 2)
  {
    v7 = *((_QWORD *)this + 143);
    *(_DWORD *)(v7 + 148) = 0;
    vDSP_vfill((const float *)(v7 + 84), *(float **)(v7 + 392), 1, *(unsigned int *)(v7 + 52));
    LODWORD(v8) = *(_DWORD *)(v7 + 48);
    if ((_DWORD)v8)
    {
      v9 = 0;
      do
      {
        if (*(_DWORD *)(v7 + 56))
        {
          v10 = 0;
          v11 = 0;
          do
          {
            vDSP_vclr(*(float **)(*(_QWORD *)(*(_QWORD *)(v7 + 296) + 24 * v9) + v10), 1, *(unsigned int *)(v7 + 52));
            vDSP_vclr(*(float **)(*(_QWORD *)(*(_QWORD *)(v7 + 296) + 24 * v9) + v10 + 8), 1, *(unsigned int *)(v7 + 52));
            vDSP_vclr(*(float **)(*(_QWORD *)(*(_QWORD *)(v7 + 368) + 24 * v9) + v10), 1, *(unsigned int *)(v7 + 52));
            vDSP_vclr(*(float **)(*(_QWORD *)(*(_QWORD *)(v7 + 368) + 24 * v9) + v10 + 8), 1, *(unsigned int *)(v7 + 52));
            ++v11;
            v10 += 16;
          }
          while (v11 < *(unsigned int *)(v7 + 56));
          LODWORD(v8) = *(_DWORD *)(v7 + 48);
        }
        vDSP_vfill((const float *)(v7 + 80), *(float **)(*(_QWORD *)(*(_QWORD *)(v7 + 296) + 24 * v9) + 16 * (v8 + v9)), 1, *(unsigned int *)(v7 + 52));
        vDSP_vfill((const float *)(v7 + 80), *(float **)(*(_QWORD *)(*(_QWORD *)(v7 + 368) + 24 * v9) + 16 * (*(_DWORD *)(v7 + 48) + v9)), 1, *(unsigned int *)(v7 + 52));
        ++v9;
        v8 = *(unsigned int *)(v7 + 48);
      }
      while (v9 < v8);
    }
  }
  else if (v1 == 3)
  {
    GuidedMWF::Reset(*((GuidedMWF **)this + 145));
  }
  else if (v1 == 2)
  {
    v2 = *((_QWORD *)this + 144);
    *(_DWORD *)(v2 + 84) = 0;
    vDSP_vfill((const float *)(v2 + 92), *(float **)(v2 + 192), 1, *(unsigned int *)(v2 + 36));
    vDSP_vclr(*(float **)(v2 + 144), 1, (2 * *(_DWORD *)(v2 + 44)));
    iPMWF_HRLS_vDSP::InitializeFilter((iPMWF_HRLS_vDSP *)v2);
    v3 = *(_DWORD *)(v2 + 32);
    if (v3)
    {
      for (i = 0; i < v3; ++i)
      {
        v5 = 0;
        do
        {
          if (i != v5)
          {
            vDSP_vclr((float *)(*(_QWORD *)(v2 + 168) + 4 * (*(_DWORD *)(v2 + 40) * i + *(_DWORD *)(v2 + 36) * v5)), 1, *(unsigned int *)(v2 + 36));
            vDSP_vclr((float *)(*(_QWORD *)(v2 + 168)+ 4 * (*(_DWORD *)(v2 + 40) * i + *(_DWORD *)(v2 + 36) * v5 + *(_DWORD *)(v2 + 44))), 1, *(unsigned int *)(v2 + 36));
            vDSP_vclr((float *)(*(_QWORD *)(v2 + 696) + 4 * (*(_DWORD *)(v2 + 40) * i + *(_DWORD *)(v2 + 36) * v5)), 1, *(unsigned int *)(v2 + 36));
            vDSP_vclr((float *)(*(_QWORD *)(v2 + 696)+ 4 * (*(_DWORD *)(v2 + 40) * i + *(_DWORD *)(v2 + 36) * v5 + *(_DWORD *)(v2 + 44))), 1, *(unsigned int *)(v2 + 36));
            vDSP_vclr((float *)(*(_QWORD *)(v2 + 744) + 4 * (*(_DWORD *)(v2 + 40) * i + *(_DWORD *)(v2 + 36) * v5)), 1, *(unsigned int *)(v2 + 36));
            vDSP_vclr((float *)(*(_QWORD *)(v2 + 744)+ 4 * (*(_DWORD *)(v2 + 40) * i + *(_DWORD *)(v2 + 36) * v5 + *(_DWORD *)(v2 + 44))), 1, *(unsigned int *)(v2 + 36));
            v3 = *(_DWORD *)(v2 + 32);
          }
          ++v5;
        }
        while (v5 < v3);
      }
    }
    if (AUDenoiseLogScope(void)::once != -1)
      dispatch_once(&AUDenoiseLogScope(void)::once, &__block_literal_global_19324);
    if (AUDenoiseLogScope(void)::scope)
    {
      v6 = *(NSObject **)AUDenoiseLogScope(void)::scope;
      if (!*(_QWORD *)AUDenoiseLogScope(void)::scope)
        return 0;
    }
    else
    {
      v6 = MEMORY[0x1E0C81028];
    }
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
    {
      v13 = 136315394;
      v14 = "iPMWF_HRLS_vDSP.cpp";
      v15 = 1024;
      v16 = 245;
      _os_log_impl(&dword_1B5ED0000, v6, OS_LOG_TYPE_DEBUG, "%25s:%-5d iPMWF: successful reset.\n", (uint8_t *)&v13, 0x12u);
    }
  }
  return 0;
}

uint64_t AUDenoise::GetPropertyInfo(AUDenoise *this, int a2, int a3, unsigned int a4, unsigned int *a5, BOOL *a6)
{
  uint64_t result;

  if (a3 || a2 != 3700 && a2 != 21)
    return 4294956417;
  result = 0;
  *a6 = 1;
  *a5 = 4;
  return result;
}

uint64_t AUDenoise::GetProperty(AUDenoise *this, int a2, int a3, unsigned int a4, _DWORD *a5)
{
  uint64_t result;
  unsigned __int8 *v6;

  if (a3)
    return 4294956417;
  if (a2 == 3700)
  {
    v6 = (unsigned __int8 *)this + 376;
  }
  else
  {
    if (a2 != 21)
      return 4294956417;
    v6 = (unsigned __int8 *)this + 560;
  }
  result = 0;
  *a5 = *v6;
  return result;
}

uint64_t AUDenoise::SetProperty(AUDenoise *this, int a2, int a3, unsigned int a4, CFArrayRef *__src, size_t __n)
{
  uint64_t result;
  size_t v9;
  int v10;
  void *v11;
  uint64_t v12;
  CFArrayRef *v13;
  uint64_t v14;
  unint64_t v15;
  const __CFNumber *v16;
  const __CFDictionary *v17;
  uint64_t v18;
  unsigned int v19;
  NSObject *v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  const __CFNumber *ValueAtIndex;
  int v25;
  NSObject *v26;
  NSObject *v27;
  const char *v28;
  NSObject *v29;
  NSObject *v30;
  NSObject *v31;
  uint32_t v32;
  const char *v33;
  int v34;
  int v35;
  NSObject *v36;
  unint64_t v37;
  int v38;
  int v39;
  std::string *v40;
  __int128 v41;
  void **v42;
  CFStringRef v43;
  const __CFDictionary *Value;
  NSObject *v45;
  NSObject *v46;
  void **v47;
  const __CFDictionary *v48;
  NSObject *v49;
  NSObject *v50;
  uint64_t v51;
  unint64_t v52;
  std::string *v53;
  __int128 v54;
  const char *v55;
  const __CFString *v56;
  int VectorFromDictionary;
  const __CFDictionary *v58;
  NSObject *v59;
  void **v60;
  NSObject *v61;
  const char *v62;
  uint64_t v63;
  unint64_t v64;
  std::string *v65;
  __int128 v66;
  const char *v67;
  const __CFString *v68;
  int v69;
  int v70;
  const char *v71;
  void *__p[2];
  int64_t v73;
  int v74;
  unsigned int v75;
  int v76;
  std::string v77;
  _BYTE buf[28];
  uint64_t v79;

  v79 = *MEMORY[0x1E0C80C00];
  if (a3)
    return 4294956417;
  result = 4294956417;
  if (a2 > 7303)
  {
    if (a2 > 103698)
    {
      if (a2 == 103699)
      {
        if ((_DWORD)__n == 8)
        {
          v21 = *((_QWORD *)this + 148) - *((_QWORD *)this + 147);
          if (CFArrayGetCount(*__src) == v21 >> 2)
          {
            v13 = (CFArrayRef *)*((_QWORD *)this + 148);
            if (v13 == *((CFArrayRef **)this + 147))
            {
              v9 = 0;
            }
            else
            {
              v22 = 0;
              v23 = 0;
              do
              {
                ValueAtIndex = (const __CFNumber *)CFArrayGetValueAtIndex(*__src, v23);
                CFNumberGetValue(ValueAtIndex, kCFNumberFloat32Type, (void *)(*((_QWORD *)this + 147) + v22));
                ++v23;
                v13 = (CFArrayRef *)*((_QWORD *)this + 147);
                v22 += 4;
              }
              while (v23 < (uint64_t)(*((_QWORD *)this + 148) - (_QWORD)v13) >> 2);
              v9 = (*((_DWORD *)this + 296) - (_DWORD)v13);
            }
            v35 = *((_DWORD *)this + 165);
            if (v35 == 2)
            {
              v11 = *(void **)(*((_QWORD *)this + 144) + 576);
            }
            else if (v35 == 3)
            {
              v11 = *(void **)(*((_QWORD *)this + 145) + 304);
            }
            else
            {
              v11 = *(void **)(*((_QWORD *)this + 143) + 1208);
            }
            goto LABEL_100;
          }
        }
        if (AUDenoiseLogScope(void)::once != -1)
          dispatch_once(&AUDenoiseLogScope(void)::once, &__block_literal_global_10126);
        if (AUDenoiseLogScope(void)::scope)
        {
          v26 = *(NSObject **)AUDenoiseLogScope(void)::scope;
          if (!*(_QWORD *)AUDenoiseLogScope(void)::scope)
            return 4294956445;
        }
        else
        {
          v26 = MEMORY[0x1E0C81028];
        }
        if (!os_log_type_enabled(v26, OS_LOG_TYPE_ERROR))
          return 4294956445;
        *(_DWORD *)buf = 136315650;
        *(_QWORD *)&buf[4] = "AUDenoise.cpp";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 430;
        *(_WORD *)&buf[18] = 1024;
        *(_DWORD *)&buf[20] = 103699;
        v28 = "%25s:%-5d Input size of DenoiseInputMaskEstimate_CF is not equal to the the expected size (prop id: %u).\n";
      }
      else
      {
        if (a2 != 1036999)
          return result;
        if ((_DWORD)__n == 8)
        {
          v12 = *((_QWORD *)this + 151) - *((_QWORD *)this + 150);
          if (CFArrayGetCount(*__src) == v12 >> 2)
          {
            v13 = (CFArrayRef *)*((_QWORD *)this + 151);
            if (v13 == *((CFArrayRef **)this + 150))
            {
              v9 = 0;
            }
            else
            {
              v14 = 0;
              v15 = 0;
              do
              {
                v16 = (const __CFNumber *)CFArrayGetValueAtIndex(*__src, v15);
                CFNumberGetValue(v16, kCFNumberFloat32Type, (void *)(*((_QWORD *)this + 150) + v14));
                ++v15;
                v13 = (CFArrayRef *)*((_QWORD *)this + 150);
                v14 += 4;
              }
              while (v15 < (uint64_t)(*((_QWORD *)this + 151) - (_QWORD)v13) >> 2);
              v9 = (*((_DWORD *)this + 302) - (_DWORD)v13);
            }
            v34 = *((_DWORD *)this + 165);
            if (v34 == 2)
            {
              v11 = *(void **)(*((_QWORD *)this + 144) + 600);
            }
            else if (v34 == 3)
            {
              v11 = *(void **)(*((_QWORD *)this + 145) + 328);
            }
            else
            {
              v11 = *(void **)(*((_QWORD *)this + 143) + 1232);
            }
            goto LABEL_100;
          }
        }
        if (AUDenoiseLogScope(void)::once != -1)
          dispatch_once(&AUDenoiseLogScope(void)::once, &__block_literal_global_10126);
        if (AUDenoiseLogScope(void)::scope)
        {
          v26 = *(NSObject **)AUDenoiseLogScope(void)::scope;
          if (!*(_QWORD *)AUDenoiseLogScope(void)::scope)
            return 4294956445;
        }
        else
        {
          v26 = MEMORY[0x1E0C81028];
        }
        if (!os_log_type_enabled(v26, OS_LOG_TYPE_ERROR))
          return 4294956445;
        *(_DWORD *)buf = 136315650;
        *(_QWORD *)&buf[4] = "AUDenoise.cpp";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 465;
        *(_WORD *)&buf[18] = 1024;
        *(_DWORD *)&buf[20] = 1036999;
        v28 = "%25s:%-5d Input size of DenoisePostMaskEstimate_CF is not equal to the the expected size (prop id: %u).\n";
      }
LABEL_94:
      v31 = v26;
      v32 = 24;
LABEL_169:
      _os_log_impl(&dword_1B5ED0000, v31, OS_LOG_TYPE_ERROR, v28, buf, v32);
      return 4294956445;
    }
    if (a2 != 7304)
    {
      if (a2 != 36999)
        return result;
      v9 = __n;
      if (__n == 4 * (*((_DWORD *)this + 154) + 1))
      {
        v10 = *((_DWORD *)this + 165);
        if (v10 == 3)
        {
          v11 = *(void **)(*((_QWORD *)this + 145) + 328);
        }
        else if (v10 == 2)
        {
          v11 = *(void **)(*((_QWORD *)this + 144) + 600);
        }
        else
        {
          v11 = *(void **)(*((_QWORD *)this + 143) + 1232);
        }
LABEL_99:
        v13 = __src;
LABEL_100:
        memcpy(v11, v13, v9);
        return 0;
      }
      if (AUDenoiseLogScope(void)::once != -1)
        dispatch_once(&AUDenoiseLogScope(void)::once, &__block_literal_global_10126);
      if (AUDenoiseLogScope(void)::scope)
      {
        v26 = *(NSObject **)AUDenoiseLogScope(void)::scope;
        if (!*(_QWORD *)AUDenoiseLogScope(void)::scope)
          return 4294956445;
      }
      else
      {
        v26 = MEMORY[0x1E0C81028];
      }
      if (os_log_type_enabled(v26, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315650;
        *(_QWORD *)&buf[4] = "AUDenoise.cpp";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 449;
        *(_WORD *)&buf[18] = 1024;
        *(_DWORD *)&buf[20] = 36999;
        v28 = "%25s:%-5d Input size of DenoisePostMaskEstimate is not equal to the the expected size (prop id: %u).\n";
        goto LABEL_94;
      }
      return 4294956445;
    }
    if (!__src)
    {
      if (AUDenoiseLogScope(void)::once != -1)
        dispatch_once(&AUDenoiseLogScope(void)::once, &__block_literal_global_10126);
      if (AUDenoiseLogScope(void)::scope)
      {
        v27 = *(NSObject **)AUDenoiseLogScope(void)::scope;
        if (!*(_QWORD *)AUDenoiseLogScope(void)::scope)
          return 4294956445;
      }
      else
      {
        v27 = MEMORY[0x1E0C81028];
      }
      if (!os_log_type_enabled(v27, OS_LOG_TYPE_ERROR))
        return 4294956445;
      *(_DWORD *)buf = 136315394;
      *(_QWORD *)&buf[4] = "AUDenoise.cpp";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 484;
      v28 = "%25s:%-5d The CFDictionaryRef passed to SetProperty is null.\n";
LABEL_168:
      v31 = v27;
      v32 = 18;
      goto LABEL_169;
    }
    v17 = *__src;
    v18 = *((_QWORD *)this + 146);
    v19 = *((_DWORD *)this + 198);
    *(_BYTE *)(v18 + 60) = 0;
    if (AUDenoiseLogScope(void)::once != -1)
      dispatch_once(&AUDenoiseLogScope(void)::once, &__block_literal_global_19324);
    v76 = 0;
    if (AUDenoiseLogScope(void)::scope)
    {
      v20 = *(NSObject **)AUDenoiseLogScope(void)::scope;
      if (!*(_QWORD *)AUDenoiseLogScope(void)::scope)
        goto LABEL_77;
    }
    else
    {
      v20 = MEMORY[0x1E0C81028];
    }
    if (os_log_type_enabled(v20, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136315394;
      *(_QWORD *)&buf[4] = "iPMWF_HRLS_vDSP.cpp";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 975;
      _os_log_impl(&dword_1B5ED0000, v20, OS_LOG_TYPE_INFO, "%25s:%-5d Loading sampleRate from topLevelDict.\n", buf, 0x12u);
    }
LABEL_77:
    if (DictionaryBlobReader::ReadScalarFromDictionary<unsigned int>(*(uint64_t ***)(v18 + 64), v17, CFSTR("SampleRate"), &v76))
    {
      if (AUDenoiseLogScope(void)::once != -1)
        dispatch_once(&AUDenoiseLogScope(void)::once, &__block_literal_global_19324);
      if (AUDenoiseLogScope(void)::scope)
      {
        v29 = *(NSObject **)AUDenoiseLogScope(void)::scope;
        if (!*(_QWORD *)AUDenoiseLogScope(void)::scope)
          goto LABEL_160;
      }
      else
      {
        v29 = MEMORY[0x1E0C81028];
      }
      if (os_log_type_enabled(v29, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315394;
        *(_QWORD *)&buf[4] = "iPMWF_HRLS_vDSP.cpp";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 980;
        v33 = "%25s:%-5d Failed to load the sampling rate from the plist.\n";
LABEL_159:
        _os_log_impl(&dword_1B5ED0000, v29, OS_LOG_TYPE_ERROR, v33, buf, 0x12u);
        goto LABEL_160;
      }
      goto LABEL_160;
    }
    v75 = 0;
    if (AUDenoiseLogScope(void)::once != -1)
      dispatch_once(&AUDenoiseLogScope(void)::once, &__block_literal_global_19324);
    if (AUDenoiseLogScope(void)::scope)
    {
      v30 = *(NSObject **)AUDenoiseLogScope(void)::scope;
      if (!*(_QWORD *)AUDenoiseLogScope(void)::scope)
        goto LABEL_118;
    }
    else
    {
      v30 = MEMORY[0x1E0C81028];
    }
    if (os_log_type_enabled(v30, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136315394;
      *(_QWORD *)&buf[4] = "iPMWF_HRLS_vDSP.cpp";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 986;
      _os_log_impl(&dword_1B5ED0000, v30, OS_LOG_TYPE_INFO, "%25s:%-5d Loading nMicsUsed from topLevelDict.\n", buf, 0x12u);
    }
LABEL_118:
    if (DictionaryBlobReader::ReadScalarFromDictionary<unsigned int>(*(uint64_t ***)(v18 + 64), v17, CFSTR("nMicsUsed"), &v75))
    {
      if (AUDenoiseLogScope(void)::once != -1)
        dispatch_once(&AUDenoiseLogScope(void)::once, &__block_literal_global_19324);
      if (AUDenoiseLogScope(void)::scope)
      {
        v29 = *(NSObject **)AUDenoiseLogScope(void)::scope;
        if (!*(_QWORD *)AUDenoiseLogScope(void)::scope)
          goto LABEL_160;
      }
      else
      {
        v29 = MEMORY[0x1E0C81028];
      }
      if (os_log_type_enabled(v29, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315394;
        *(_QWORD *)&buf[4] = "iPMWF_HRLS_vDSP.cpp";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 991;
        v33 = "%25s:%-5d Failed to load the number of mics from the plist.\n";
        goto LABEL_159;
      }
LABEL_160:
      if (AUDenoiseLogScope(void)::once != -1)
        dispatch_once(&AUDenoiseLogScope(void)::once, &__block_literal_global_10126);
      if (AUDenoiseLogScope(void)::scope)
      {
        v27 = *(NSObject **)AUDenoiseLogScope(void)::scope;
        if (!*(_QWORD *)AUDenoiseLogScope(void)::scope)
          return 4294956445;
      }
      else
      {
        v27 = MEMORY[0x1E0C81028];
      }
      if (!os_log_type_enabled(v27, OS_LOG_TYPE_ERROR))
        return 4294956445;
      *(_DWORD *)buf = 136315394;
      *(_QWORD *)&buf[4] = "AUDenoise.cpp";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 494;
      v28 = "%25s:%-5d Loading SteeringVectorDictionary was not successful.\n";
      goto LABEL_168;
    }
    v74 = 0;
    if (AUDenoiseLogScope(void)::once != -1)
      dispatch_once(&AUDenoiseLogScope(void)::once, &__block_literal_global_19324);
    if (AUDenoiseLogScope(void)::scope)
    {
      v36 = *(NSObject **)AUDenoiseLogScope(void)::scope;
      if (!*(_QWORD *)AUDenoiseLogScope(void)::scope)
        goto LABEL_139;
    }
    else
    {
      v36 = MEMORY[0x1E0C81028];
    }
    if (os_log_type_enabled(v36, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136315394;
      *(_QWORD *)&buf[4] = "iPMWF_HRLS_vDSP.cpp";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 997;
      _os_log_impl(&dword_1B5ED0000, v36, OS_LOG_TYPE_INFO, "%25s:%-5d Loading nCoefficients from topLevelDict.\n", buf, 0x12u);
    }
LABEL_139:
    if (DictionaryBlobReader::ReadScalarFromDictionary<unsigned int>(*(uint64_t ***)(v18 + 64), v17, CFSTR("nCoefficients"), &v74))
    {
      if (AUDenoiseLogScope(void)::once != -1)
        dispatch_once(&AUDenoiseLogScope(void)::once, &__block_literal_global_19324);
      if (AUDenoiseLogScope(void)::scope)
      {
        v29 = *(NSObject **)AUDenoiseLogScope(void)::scope;
        if (!*(_QWORD *)AUDenoiseLogScope(void)::scope)
          goto LABEL_160;
      }
      else
      {
        v29 = MEMORY[0x1E0C81028];
      }
      if (os_log_type_enabled(v29, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315394;
        *(_QWORD *)&buf[4] = "iPMWF_HRLS_vDSP.cpp";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 1002;
        v33 = "%25s:%-5d Failed to load the number of filter coefficients from the plist.\n";
        goto LABEL_159;
      }
      goto LABEL_160;
    }
    v38 = v74;
    v37 = v75;
    *(_DWORD *)(v18 + 48) = v75;
    v39 = v76;
    *(_DWORD *)(v18 + 52) = v38;
    *(_DWORD *)(v18 + 56) = v39;
    std::vector<std::vector<float>>::resize((uint64_t *)v18, v37);
    std::vector<std::vector<float>>::resize((uint64_t *)(v18 + 24), *(unsigned int *)(v18 + 48));
    std::to_string((std::string *)buf, v19);
    v40 = std::string::insert((std::string *)buf, 0, "Beam", 4uLL);
    v41 = *(_OWORD *)&v40->__r_.__value_.__l.__data_;
    v73 = v40->__r_.__value_.__r.__words[2];
    *(_OWORD *)__p = v41;
    v40->__r_.__value_.__l.__size_ = 0;
    v40->__r_.__value_.__r.__words[2] = 0;
    v40->__r_.__value_.__r.__words[0] = 0;
    if ((buf[23] & 0x80000000) != 0)
      operator delete(*(void **)buf);
    if (v73 >= 0)
      v42 = __p;
    else
      v42 = (void **)__p[0];
    v43 = CFStringCreateWithCString(0, (const char *)v42, 0x8000100u);
    Value = (const __CFDictionary *)CFDictionaryGetValue(v17, v43);
    if (Value)
    {
      if (AUDenoiseLogScope(void)::once != -1)
        dispatch_once(&AUDenoiseLogScope(void)::once, &__block_literal_global_19324);
      if (AUDenoiseLogScope(void)::scope)
      {
        v45 = *(NSObject **)AUDenoiseLogScope(void)::scope;
        if (!*(_QWORD *)AUDenoiseLogScope(void)::scope)
          goto LABEL_182;
      }
      else
      {
        v45 = MEMORY[0x1E0C81028];
      }
      if (os_log_type_enabled(v45, OS_LOG_TYPE_INFO))
      {
        v47 = __p;
        if (v73 < 0)
          v47 = (void **)__p[0];
        *(_DWORD *)buf = 136315650;
        *(_QWORD *)&buf[4] = "iPMWF_HRLS_vDSP.cpp";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 1030;
        *(_WORD *)&buf[18] = 2080;
        *(_QWORD *)&buf[20] = v47;
        _os_log_impl(&dword_1B5ED0000, v45, OS_LOG_TYPE_INFO, "%25s:%-5d Found the dictionary: %s\n", buf, 0x1Cu);
      }
LABEL_182:
      CFRelease(v43);
      v48 = (const __CFDictionary *)CFDictionaryGetValue(Value, CFSTR("RealCoefficients"));
      if (!v48)
      {
        if (AUDenoiseLogScope(void)::once != -1)
          dispatch_once(&AUDenoiseLogScope(void)::once, &__block_literal_global_19324);
        if (AUDenoiseLogScope(void)::scope)
        {
          v50 = *(NSObject **)AUDenoiseLogScope(void)::scope;
          if (!*(_QWORD *)AUDenoiseLogScope(void)::scope)
            goto LABEL_265;
        }
        else
        {
          v50 = MEMORY[0x1E0C81028];
        }
        if (os_log_type_enabled(v50, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136315394;
          *(_QWORD *)&buf[4] = "iPMWF_HRLS_vDSP.cpp";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = 1039;
          v62 = "%25s:%-5d Missing dictionary RealCoefficients.\n";
LABEL_258:
          _os_log_impl(&dword_1B5ED0000, v50, OS_LOG_TYPE_ERROR, v62, buf, 0x12u);
        }
LABEL_265:
        v70 = 0;
LABEL_266:
        if (SHIBYTE(v73) < 0)
          operator delete(__p[0]);
        if (v70)
        {
          result = 0;
          *((_BYTE *)this + 657) = 1;
          return result;
        }
        goto LABEL_160;
      }
      if (AUDenoiseLogScope(void)::once != -1)
        dispatch_once(&AUDenoiseLogScope(void)::once, &__block_literal_global_19324);
      if (AUDenoiseLogScope(void)::scope)
      {
        v49 = *(NSObject **)AUDenoiseLogScope(void)::scope;
        if (!*(_QWORD *)AUDenoiseLogScope(void)::scope)
          goto LABEL_196;
      }
      else
      {
        v49 = MEMORY[0x1E0C81028];
      }
      if (os_log_type_enabled(v49, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 136315394;
        *(_QWORD *)&buf[4] = "iPMWF_HRLS_vDSP.cpp";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 1044;
        _os_log_impl(&dword_1B5ED0000, v49, OS_LOG_TYPE_INFO, "%25s:%-5d Found the dictionary RealCoefficients.\n", buf, 0x12u);
      }
LABEL_196:
      if (v75)
      {
        v51 = 0;
        v52 = 0;
        while (1)
        {
          std::to_string(&v77, v52);
          v53 = std::string::insert(&v77, 0, "Mic", 3uLL);
          v54 = *(_OWORD *)&v53->__r_.__value_.__l.__data_;
          *(_QWORD *)&buf[16] = *((_QWORD *)&v53->__r_.__value_.__l + 2);
          *(_OWORD *)buf = v54;
          v53->__r_.__value_.__l.__size_ = 0;
          v53->__r_.__value_.__r.__words[2] = 0;
          v53->__r_.__value_.__r.__words[0] = 0;
          if (SHIBYTE(v77.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v77.__r_.__value_.__l.__data_);
          v55 = buf[23] >= 0 ? buf : *(const char **)buf;
          v56 = CFStringCreateWithCString(0, v55, 0x8000100u);
          VectorFromDictionary = DictionaryBlobReader::ReadVectorFromDictionary(*(NSObject ****)(v18 + 64), v48, v56, (char **)(*(_QWORD *)v18 + v51));
          CFRelease(v56);
          if (VectorFromDictionary)
            break;
          if ((buf[23] & 0x80000000) != 0)
            operator delete(*(void **)buf);
          ++v52;
          v51 += 24;
          if (v52 >= v75)
            goto LABEL_207;
        }
        if (AUDenoiseLogScope(void)::once != -1)
          dispatch_once(&AUDenoiseLogScope(void)::once, &__block_literal_global_19324);
        if (AUDenoiseLogScope(void)::scope)
        {
          v61 = *(NSObject **)AUDenoiseLogScope(void)::scope;
          if (!*(_QWORD *)AUDenoiseLogScope(void)::scope)
            goto LABEL_263;
        }
        else
        {
          v61 = MEMORY[0x1E0C81028];
        }
        if (!os_log_type_enabled(v61, OS_LOG_TYPE_ERROR))
          goto LABEL_263;
        LODWORD(v77.__r_.__value_.__l.__data_) = 136315394;
        *(std::string::size_type *)((char *)v77.__r_.__value_.__r.__words + 4) = (std::string::size_type)"iPMWF_HRLS_vDSP.cpp";
        WORD2(v77.__r_.__value_.__r.__words[1]) = 1024;
        *(_DWORD *)((char *)&v77.__r_.__value_.__r.__words[1] + 6) = 1056;
        v71 = "%25s:%-5d Error loading RealCoefficients.\n";
        goto LABEL_262;
      }
LABEL_207:
      v58 = (const __CFDictionary *)CFDictionaryGetValue(Value, CFSTR("ImagCoefficients"));
      if (v58)
      {
        if (AUDenoiseLogScope(void)::once != -1)
          dispatch_once(&AUDenoiseLogScope(void)::once, &__block_literal_global_19324);
        if (AUDenoiseLogScope(void)::scope)
        {
          v59 = *(NSObject **)AUDenoiseLogScope(void)::scope;
          if (!*(_QWORD *)AUDenoiseLogScope(void)::scope)
          {
LABEL_235:
            if (!v75)
            {
LABEL_246:
              v70 = 1;
              *(_BYTE *)(v18 + 60) = 1;
              goto LABEL_266;
            }
            v63 = 0;
            v64 = 0;
            while (1)
            {
              std::to_string(&v77, v64);
              v65 = std::string::insert(&v77, 0, "Mic", 3uLL);
              v66 = *(_OWORD *)&v65->__r_.__value_.__l.__data_;
              *(_QWORD *)&buf[16] = *((_QWORD *)&v65->__r_.__value_.__l + 2);
              *(_OWORD *)buf = v66;
              v65->__r_.__value_.__l.__size_ = 0;
              v65->__r_.__value_.__r.__words[2] = 0;
              v65->__r_.__value_.__r.__words[0] = 0;
              if (SHIBYTE(v77.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v77.__r_.__value_.__l.__data_);
              v67 = buf[23] >= 0 ? buf : *(const char **)buf;
              v68 = CFStringCreateWithCString(0, v67, 0x8000100u);
              v69 = DictionaryBlobReader::ReadVectorFromDictionary(*(NSObject ****)(v18 + 64), v58, v68, (char **)(*(_QWORD *)(v18 + 24) + v63));
              CFRelease(v68);
              if (v69)
                break;
              if ((buf[23] & 0x80000000) != 0)
                operator delete(*(void **)buf);
              ++v64;
              v63 += 24;
              if (v64 >= v75)
                goto LABEL_246;
            }
            if (AUDenoiseLogScope(void)::once != -1)
              dispatch_once(&AUDenoiseLogScope(void)::once, &__block_literal_global_19324);
            if (AUDenoiseLogScope(void)::scope)
            {
              v61 = *(NSObject **)AUDenoiseLogScope(void)::scope;
              if (!*(_QWORD *)AUDenoiseLogScope(void)::scope)
              {
LABEL_263:
                if ((buf[23] & 0x80000000) != 0)
                  operator delete(*(void **)buf);
                goto LABEL_265;
              }
            }
            else
            {
              v61 = MEMORY[0x1E0C81028];
            }
            if (!os_log_type_enabled(v61, OS_LOG_TYPE_ERROR))
              goto LABEL_263;
            LODWORD(v77.__r_.__value_.__l.__data_) = 136315394;
            *(std::string::size_type *)((char *)v77.__r_.__value_.__r.__words + 4) = (std::string::size_type)"iPMWF_HRLS_vDSP.cpp";
            WORD2(v77.__r_.__value_.__r.__words[1]) = 1024;
            *(_DWORD *)((char *)&v77.__r_.__value_.__r.__words[1] + 6) = 1084;
            v71 = "%25s:%-5d Error loading ImagCoefficients.\n";
LABEL_262:
            _os_log_impl(&dword_1B5ED0000, v61, OS_LOG_TYPE_ERROR, v71, (uint8_t *)&v77, 0x12u);
            goto LABEL_263;
          }
        }
        else
        {
          v59 = MEMORY[0x1E0C81028];
        }
        if (os_log_type_enabled(v59, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)buf = 136315394;
          *(_QWORD *)&buf[4] = "iPMWF_HRLS_vDSP.cpp";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = 1072;
          _os_log_impl(&dword_1B5ED0000, v59, OS_LOG_TYPE_INFO, "%25s:%-5d Found the dictionary ImagCoefficients.\n", buf, 0x12u);
        }
        goto LABEL_235;
      }
      if (AUDenoiseLogScope(void)::once != -1)
        dispatch_once(&AUDenoiseLogScope(void)::once, &__block_literal_global_19324);
      if (AUDenoiseLogScope(void)::scope)
      {
        v50 = *(NSObject **)AUDenoiseLogScope(void)::scope;
        if (!*(_QWORD *)AUDenoiseLogScope(void)::scope)
          goto LABEL_265;
      }
      else
      {
        v50 = MEMORY[0x1E0C81028];
      }
      if (os_log_type_enabled(v50, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315394;
        *(_QWORD *)&buf[4] = "iPMWF_HRLS_vDSP.cpp";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 1067;
        v62 = "%25s:%-5d Missing dictionary ImagCoefficients.\n";
        goto LABEL_258;
      }
      goto LABEL_265;
    }
    if (AUDenoiseLogScope(void)::once != -1)
      dispatch_once(&AUDenoiseLogScope(void)::once, &__block_literal_global_19324);
    if (AUDenoiseLogScope(void)::scope)
    {
      v46 = *(NSObject **)AUDenoiseLogScope(void)::scope;
      if (!*(_QWORD *)AUDenoiseLogScope(void)::scope)
      {
LABEL_218:
        CFRelease(v43);
        goto LABEL_265;
      }
    }
    else
    {
      v46 = MEMORY[0x1E0C81028];
    }
    if (os_log_type_enabled(v46, OS_LOG_TYPE_ERROR))
    {
      v60 = __p;
      if (v73 < 0)
        v60 = (void **)__p[0];
      *(_DWORD *)buf = 136315650;
      *(_QWORD *)&buf[4] = "iPMWF_HRLS_vDSP.cpp";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 1023;
      *(_WORD *)&buf[18] = 2080;
      *(_QWORD *)&buf[20] = v60;
      _os_log_impl(&dword_1B5ED0000, v46, OS_LOG_TYPE_ERROR, "%25s:%-5d Missing dictionary: %s\n", buf, 0x1Cu);
    }
    goto LABEL_218;
  }
  switch(a2)
  {
    case 21:
      result = 0;
      *((_BYTE *)this + 560) = *(_DWORD *)__src != 0;
      return result;
    case 3699:
      v9 = __n;
      if (__n == 4 * (*((_DWORD *)this + 154) + 1))
      {
        v25 = *((_DWORD *)this + 165);
        if (v25 == 3)
        {
          v11 = *(void **)(*((_QWORD *)this + 145) + 304);
        }
        else if (v25 == 2)
        {
          v11 = *(void **)(*((_QWORD *)this + 144) + 576);
        }
        else
        {
          v11 = *(void **)(*((_QWORD *)this + 143) + 1208);
        }
        goto LABEL_99;
      }
      if (AUDenoiseLogScope(void)::once != -1)
        dispatch_once(&AUDenoiseLogScope(void)::once, &__block_literal_global_10126);
      if (AUDenoiseLogScope(void)::scope)
      {
        v26 = *(NSObject **)AUDenoiseLogScope(void)::scope;
        if (!*(_QWORD *)AUDenoiseLogScope(void)::scope)
          return 4294956445;
      }
      else
      {
        v26 = MEMORY[0x1E0C81028];
      }
      if (os_log_type_enabled(v26, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315650;
        *(_QWORD *)&buf[4] = "AUDenoise.cpp";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 414;
        *(_WORD *)&buf[18] = 1024;
        *(_DWORD *)&buf[20] = 3699;
        v28 = "%25s:%-5d Input size of DenoiseInputMaskEstimate is not equal to the the expected size (prop id: %u).\n";
        goto LABEL_94;
      }
      return 4294956445;
    case 3700:
      result = 4294956445;
      if (__n >= 4)
      {
        if (*(_BYTE *)__src)
          return 0;
        else
          return 4294956445;
      }
      break;
  }
  return result;
}

void sub_1B636C9CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t AUDenoise::SetParameter(AUDenoise *this, unsigned int a2, int a3, uint64_t a4, float a5)
{
  uint64_t v8;
  ausdk::AUElement *v9;
  uint64_t v10;
  ausdk::AUElement *v11;
  uint64_t result;
  ausdk::AUElement **v13;
  uint64_t v14;
  char *v15;

  if (a3 == 4)
  {
    v10 = *((_QWORD *)this + 76);
    if (v10)
    {
      v11 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v10 + 32))(v10, a4);
    }
    else
    {
      v14 = *((_QWORD *)this + 73);
      if (a4 >= (unint64_t)((*((_QWORD *)this + 74) - v14) >> 3))
        v11 = 0;
      else
        v11 = *(ausdk::AUElement **)(v14 + 8 * a4);
    }
    ausdk::AUElement::SetParameter(v11, a2, a5, 0);
    v15 = (char *)this + 544;
  }
  else
  {
    if (a3)
      return 4294956418;
    v8 = *((_QWORD *)this + 9);
    if (v8)
    {
      v9 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v8 + 32))(v8, 0);
    }
    else
    {
      v13 = (ausdk::AUElement **)*((_QWORD *)this + 6);
      if (*((ausdk::AUElement ***)this + 7) == v13)
        v9 = 0;
      else
        v9 = *v13;
    }
    ausdk::AUElement::SetParameter(v9, a2, a5, 0);
    v15 = (char *)this + 528;
  }
  result = 0;
  ++*(_QWORD *)v15;
  return result;
}

uint64_t AUDenoise::CanScheduleParameters(AUDenoise *this)
{
  return 0;
}

uint64_t AUDenoise::ProcessMultipleBufferLists(AUDenoise *this, unsigned int *a2, AudioDSP::Utility *a3, unsigned int a4, const AudioBufferList **a5, unsigned int a6, AudioBufferList **a7, double a8)
{
  int v10;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  float *v15;
  uint64_t v16;
  ausdk::AUElement *v17;
  uint64_t v18;
  uint64_t v19;
  ausdk::AUElement *v20;
  uint64_t v21;
  uint64_t v22;
  ausdk::AUElement *v23;
  uint64_t v24;
  uint64_t v25;
  ausdk::AUElement *v26;
  uint64_t v27;
  uint64_t v28;
  ausdk::AUElement *v29;
  uint64_t v30;
  int *v31;
  int v32;
  const AudioBufferList *v33;
  AudioBufferList *v34;
  AudioDSP::Utility *v35;
  BOOL *v36;
  NSObject *v37;
  NSObject *v39;
  const char *v40;
  unint64_t v41;
  char v42;
  float v43;
  float v44;
  float v45;
  uint64_t v46;
  uint64_t v47;
  float *mData;
  float v49;
  float v50;
  float v51;
  _BOOL4 v52;
  int v53;
  int v54;
  uint64_t v55;
  float v56;
  uint64_t v57;
  ausdk::AUElement *v58;
  ausdk::AUElement **v59;
  BOOL *v60;
  BOOL *v61;
  double v62;
  NSObject *v63;
  int v64;
  float v65;
  const char *v66;
  __int16 v67;
  int v68;
  __int16 v69;
  int v70;
  __int16 v71;
  int v72;
  AudioBufferList v73;
  int v74;
  int v75;
  uint64_t v76;
  uint64_t v77;

  v10 = (int)a3;
  v77 = *MEMORY[0x1E0C80C00];
  LODWORD(a8) = *((_DWORD *)this + 154);
  *((double *)this + 81) = *((double *)this + 81) + (double)*(unint64_t *)&a8 / *((double *)this + 78);
  v12 = *((_QWORD *)this + 66);
  if (*((_QWORD *)this + 67) != v12)
  {
    AUDenoise::UpdateState(this);
    *((_QWORD *)this + 67) = v12;
  }
  v13 = *((_QWORD *)this + 68);
  if (*((_QWORD *)this + 69) != v13)
  {
    if (*((_DWORD *)this + 158))
    {
      v14 = 0;
      v15 = (float *)((char *)this + 836);
      do
      {
        v16 = *((_QWORD *)this + 76);
        if (v16)
        {
          v17 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)v16 + 32))(v16, v14);
        }
        else
        {
          v18 = *((_QWORD *)this + 73);
          if (v14 >= (*((_QWORD *)this + 74) - v18) >> 3)
            v17 = 0;
          else
            v17 = *(ausdk::AUElement **)(v18 + 8 * v14);
        }
        *(v15 - 4) = ausdk::AUElement::GetParameter(v17, 0x12u);
        v19 = *((_QWORD *)this + 76);
        if (v19)
        {
          v20 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)v19 + 32))(v19, v14);
        }
        else
        {
          v21 = *((_QWORD *)this + 73);
          if (v14 >= (*((_QWORD *)this + 74) - v21) >> 3)
            v20 = 0;
          else
            v20 = *(ausdk::AUElement **)(v21 + 8 * v14);
        }
        *(v15 - 3) = ausdk::AUElement::GetParameter(v20, 0x13u);
        v22 = *((_QWORD *)this + 76);
        if (v22)
        {
          v23 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)v22 + 32))(v22, v14);
        }
        else
        {
          v24 = *((_QWORD *)this + 73);
          if (v14 >= (*((_QWORD *)this + 74) - v24) >> 3)
            v23 = 0;
          else
            v23 = *(ausdk::AUElement **)(v24 + 8 * v14);
        }
        *(v15 - 2) = ausdk::AUElement::GetParameter(v23, 0x14u);
        v25 = *((_QWORD *)this + 76);
        if (v25)
        {
          v26 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)v25 + 32))(v25, v14);
        }
        else
        {
          v27 = *((_QWORD *)this + 73);
          if (v14 >= (*((_QWORD *)this + 74) - v27) >> 3)
            v26 = 0;
          else
            v26 = *(ausdk::AUElement **)(v27 + 8 * v14);
        }
        *(v15 - 1) = ausdk::AUElement::GetParameter(v26, 0x15u);
        v28 = *((_QWORD *)this + 76);
        if (v28)
        {
          v29 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)v28 + 32))(v28, v14);
        }
        else
        {
          v30 = *((_QWORD *)this + 73);
          if (v14 >= (*((_QWORD *)this + 74) - v30) >> 3)
            v29 = 0;
          else
            v29 = *(ausdk::AUElement **)(v30 + 8 * v14);
        }
        *v15 = ausdk::AUElement::GetParameter(v29, 0x16u);
        v15 += 5;
        ++v14;
      }
      while (v14 < *((unsigned int *)this + 158));
    }
    *((_QWORD *)this + 69) = v13;
  }
  if (*((_DWORD *)this + 154) != v10)
    return 4294956422;
  v31 = (int *)*a5;
  if (!*a5)
  {
    if (AUDenoiseLogScope(void)::once != -1)
      dispatch_once(&AUDenoiseLogScope(void)::once, &__block_literal_global_10126);
    if (AUDenoiseLogScope(void)::scope)
    {
      v39 = *(NSObject **)AUDenoiseLogScope(void)::scope;
      if (!*(_QWORD *)AUDenoiseLogScope(void)::scope)
        return 4294956420;
    }
    else
    {
      v39 = MEMORY[0x1E0C81028];
    }
    if (os_log_type_enabled(v39, OS_LOG_TYPE_ERROR))
    {
      v73.mNumberBuffers = 136315394;
      *(_QWORD *)(&v73.mNumberBuffers + 1) = "AUDenoise.cpp";
      LOWORD(v73.mBuffers[0].mDataByteSize) = 1024;
      *(UInt32 *)((char *)&v73.mBuffers[0].mDataByteSize + 2) = 1516;
      v40 = "%25s:%-5d InputSignals cannot be NULL. It is a required input\n";
LABEL_67:
      _os_log_impl(&dword_1B5ED0000, v39, OS_LOG_TYPE_ERROR, v40, (uint8_t *)&v73, 0x12u);
    }
    return 4294956420;
  }
  v32 = *v31;
  if (*v31 != *((_DWORD *)this + 158))
    return 4294956428;
  v33 = a5[1];
  if (!v33)
  {
    if (AUDenoiseLogScope(void)::once != -1)
      dispatch_once(&AUDenoiseLogScope(void)::once, &__block_literal_global_10126);
    if (AUDenoiseLogScope(void)::scope)
    {
      v39 = *(NSObject **)AUDenoiseLogScope(void)::scope;
      if (!*(_QWORD *)AUDenoiseLogScope(void)::scope)
        return 4294956420;
    }
    else
    {
      v39 = MEMORY[0x1E0C81028];
    }
    if (os_log_type_enabled(v39, OS_LOG_TYPE_ERROR))
    {
      v73.mNumberBuffers = 136315394;
      *(_QWORD *)(&v73.mNumberBuffers + 1) = "AUDenoise.cpp";
      LOWORD(v73.mBuffers[0].mDataByteSize) = 1024;
      *(UInt32 *)((char *)&v73.mBuffers[0].mDataByteSize + 2) = 1524;
      v40 = "%25s:%-5d EchoEstimates cannot be NULL when Beam selection is not Off.\n";
      goto LABEL_67;
    }
    return 4294956420;
  }
  if (v33->mNumberBuffers != v32 || *a7 && (*a7)->mNumberBuffers != v32)
    return 4294956428;
  v34 = a7[1];
  if (v34)
  {
    if (v34->mNumberBuffers != v32)
      return 4294956428;
  }
  v64 = 0;
  v35 = (AudioDSP::Utility *)(2 * v10);
  *(_QWORD *)&v73.mNumberBuffers = *((_QWORD *)this + 78);
  v73.mBuffers[0] = (AudioBuffer)xmmword_1B6626900;
  v74 = 4;
  v75 = v32;
  v76 = 32;
  AudioDSP::Utility::DetectNonFinites(v35, v31, &v73, (const AudioStreamBasicDescription *)((char *)&v64 + 3), (BOOL *)a5);
  AudioDSP::Utility::DetectNonFinites(v35, a5[1], &v73, (const AudioStreamBasicDescription *)((char *)&v64 + 2), v36);
  if (!*((_BYTE *)this + 560) && (!(HIBYTE(v64) | BYTE2(v64)) || !*((_BYTE *)this + 656)))
  {
    if (*((_BYTE *)this + 809))
    {
      if (*((_DWORD *)this + 158))
      {
        v41 = 0;
        v42 = 0;
        do
        {
          if (*((float *)this + 5 * v41 + 207) == 0.0)
          {
            v43 = *((float *)this + 5 * v41 + 208);
            v44 = *((float *)this + 203);
            v45 = 1.0;
            if (v44 != 0.0)
              v45 = __exp10f(v44 / 10.0);
            if (v43 > v45)
              v42 = 1;
          }
          else
          {
            v46 = *((unsigned int *)this + 154);
            if ((_DWORD)v46)
            {
              v47 = 0;
              v49 = 0.0;
              do
              {
                mData = (float *)a5[1]->mBuffers[v41].mData;
                v49 = v49
                    + (float)((float)(mData[(v46 + v47)] * mData[(v46 + v47)])
                            + (float)(mData[v47] * mData[v47]));
                ++v47;
              }
              while (v46 != v47);
            }
            else
            {
              v49 = 0.0;
            }
            v50 = *((float *)this + 204);
            v51 = 1.0;
            if (v50 != 0.0)
              v51 = __exp10f(v50 / 10.0);
            if (v49 > v51)
              v42 = 1;
          }
          ++v41;
        }
        while (v41 < *((unsigned int *)this + 158));
      }
      else
      {
        v42 = 0;
      }
      v52 = (v42 & 1) == 0;
    }
    else
    {
      v52 = 1;
    }
    v53 = *((_DWORD *)this + 165);
    if (v53 == 3)
    {
      GuidedMWF::ProcessBufferList(*((GuidedMWF **)this + 145), *a5, a5[1], *a7, a7[1], *((unsigned __int8 *)this + 808), v52);
    }
    else if (v53 == 2)
    {
      iPMWF_HRLS_vDSP::ProcessBufferList(*((iPMWF_HRLS_vDSP **)this + 144), *a5, a5[1], *a7, a7[1], *((unsigned __int8 *)this + 808), v52);
    }
    else
    {
      PMWF_FAST_GS_vDSP::ProcessBufferList(*((PMWF_FAST_GS_vDSP **)this + 143), *a5, a5[1], *a7, a7[1], *((unsigned __int8 *)this + 808), v52);
    }
    if (!*((_BYTE *)this + 808))
      CopyBufferList(&a5[1]->mNumberBuffers, a7[1]);
    v54 = *((_DWORD *)this + 165);
    if (v54 != 3)
    {
      if (v54 == 2)
      {
        v55 = *((_QWORD *)this + 144);
        v65 = 0.0;
        vDSP_meanv(*(const float **)(v55 + 216), 1, &v65, *(unsigned int *)(v55 + 36));
        v56 = v65;
      }
      else
      {
        v56 = *(float *)(*((_QWORD *)this + 143) + 1520);
      }
      *((float *)this + 183) = v56;
    }
    v57 = *((_QWORD *)this + 9);
    if (v57)
    {
      v58 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v57 + 32))(v57, 0);
    }
    else
    {
      v59 = (ausdk::AUElement **)*((_QWORD *)this + 6);
      if (*((ausdk::AUElement ***)this + 7) == v59)
        v58 = 0;
      else
        v58 = *v59;
    }
    ausdk::AUElement::SetParameter(v58, 0x1Bu, *((float *)this + 183), 0);
    AudioDSP::Utility::DetectNonFinites(v35, *a7, &v73, (const AudioStreamBasicDescription *)((char *)&v64 + 1), v60);
    AudioDSP::Utility::DetectNonFinites(v35, a7[1], &v73, (const AudioStreamBasicDescription *)&v64, v61);
    if (!(BYTE1(v64) | v64) || !*((_BYTE *)this + 656))
      goto LABEL_125;
    if (AUDenoiseLogScope(void)::once != -1)
      dispatch_once(&AUDenoiseLogScope(void)::once, &__block_literal_global_10126);
    if (AUDenoiseLogScope(void)::scope)
    {
      v63 = *(NSObject **)AUDenoiseLogScope(void)::scope;
      if (!*(_QWORD *)AUDenoiseLogScope(void)::scope)
      {
LABEL_124:
        (*(void (**)(AUDenoise *))(*(_QWORD *)this + 64))(this);
        CopyBufferList(&(*a5)->mNumberBuffers, *a7);
        CopyBufferList(&a5[1]->mNumberBuffers, a7[1]);
        *((_QWORD *)this + 80) = 0;
LABEL_125:
        AUDenoise::LogMaster((uint64_t)this, *a5, *a7, v62);
        return 0;
      }
    }
    else
    {
      v63 = MEMORY[0x1E0C81028];
    }
    if (os_log_type_enabled(v63, OS_LOG_TYPE_ERROR))
    {
      v65 = 4.8153e-34;
      v66 = "AUDenoise.cpp";
      v67 = 1024;
      v68 = 1651;
      v69 = 1024;
      v70 = BYTE1(v64);
      v71 = 1024;
      v72 = v64;
      _os_log_impl(&dword_1B5ED0000, v63, OS_LOG_TYPE_ERROR, "%25s:%-5d AUDenoise: (OutputSignals, PMWFLeeOut) is NOT finite: (%u, %u)\n", (uint8_t *)&v65, 0x1Eu);
    }
    goto LABEL_124;
  }
  CopyBufferList(&(*a5)->mNumberBuffers, *a7);
  CopyBufferList(&a5[1]->mNumberBuffers, a7[1]);
  if (HIBYTE(v64) | BYTE2(v64))
  {
    if (AUDenoiseLogScope(void)::once != -1)
      dispatch_once(&AUDenoiseLogScope(void)::once, &__block_literal_global_10126);
    if (AUDenoiseLogScope(void)::scope)
    {
      v37 = *(NSObject **)AUDenoiseLogScope(void)::scope;
      if (!*(_QWORD *)AUDenoiseLogScope(void)::scope)
        goto LABEL_93;
    }
    else
    {
      v37 = MEMORY[0x1E0C81028];
    }
    if (os_log_type_enabled(v37, OS_LOG_TYPE_ERROR))
    {
      v65 = 4.8153e-34;
      v66 = "AUDenoise.cpp";
      v67 = 1024;
      v68 = 1563;
      v69 = 1024;
      v70 = HIBYTE(v64);
      v71 = 1024;
      v72 = BYTE2(v64);
      _os_log_impl(&dword_1B5ED0000, v37, OS_LOG_TYPE_ERROR, "%25s:%-5d AUDenoise: (InputSignals, EchoEstimates) is NOT finite: (%u, %u)\n", (uint8_t *)&v65, 0x1Eu);
    }
  }
LABEL_93:
  *((_QWORD *)this + 80) = 0;
  return 0;
}

uint64_t AUDenoise::Render(AUDenoise *this, unsigned int *a2, const AudioTimeStamp *a3, uint64_t a4)
{
  uint64_t v8;
  char v9;
  ausdk::AUScope *v10;
  char v11;
  char v12;
  ausdk::AUInputElement *Element;
  uint64_t result;
  ausdk::AUIOElement *v15;
  ausdk::AUIOElement *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD v20[2];
  _QWORD v21[3];

  v8 = 0;
  v9 = 0;
  v21[2] = *MEMORY[0x1E0C80C00];
  v10 = (AUDenoise *)((char *)this + 80);
  v11 = 1;
  do
  {
    v12 = v11;
    if (ausdk::AUBase::HasInput(this, v8))
    {
      Element = (ausdk::AUInputElement *)ausdk::AUScope::SafeGetElement(v10, v8);
      result = ausdk::AUInputElement::PullInput(Element, a2, a3, v8, a4);
      if ((_DWORD)result)
        return result;
    }
    else
    {
      v9 = 1;
    }
    v11 = 0;
    v8 = 1;
  }
  while ((v12 & 1) != 0);
  v15 = (ausdk::AUIOElement *)ausdk::AUScope::SafeGetElement((AUDenoise *)((char *)this + 128), 0);
  v21[0] = ausdk::AUIOElement::PrepareBuffer(v15, a4);
  v16 = (ausdk::AUIOElement *)ausdk::AUScope::SafeGetElement((AUDenoise *)((char *)this + 128), 1u);
  v17 = ausdk::AUIOElement::PrepareBuffer(v16, a4);
  result = 0;
  v21[1] = v17;
  if ((v9 & 1) == 0)
  {
    v18 = ausdk::AUScope::SafeGetElement(v10, 0);
    v20[0] = ausdk::AUBufferList::GetBufferList((ausdk::AUBufferList *)(v18 + 144));
    v19 = ausdk::AUScope::SafeGetElement(v10, 1u);
    v20[1] = ausdk::AUBufferList::GetBufferList((ausdk::AUBufferList *)(v19 + 144));
    return (*(uint64_t (**)(AUDenoise *, unsigned int *, uint64_t, uint64_t, _QWORD *, uint64_t, _QWORD *))(*(_QWORD *)this + 184))(this, a2, a4, 2, v20, 2, v21);
  }
  return result;
}

uint64_t AUDenoise::GetParameterList(AUDenoise *this, int a2, unsigned int *a3, unsigned int *a4)
{
  unsigned int v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t result;

  if (a2 == 4)
  {
    if (!a3)
    {
      v4 = 5;
      goto LABEL_11;
    }
    v4 = 5;
    *a3 = 18;
    v5 = 22;
    v6 = 21;
    v7 = 20;
    v8 = 19;
    v9 = 4;
    v10 = 3;
    v11 = 2;
    v12 = 1;
  }
  else
  {
    if (a2)
      return 4294956430;
    if (!a3)
    {
      v4 = 38;
      goto LABEL_11;
    }
    *(_OWORD *)a3 = xmmword_1B6626920;
    *((_OWORD *)a3 + 1) = xmmword_1B66A0770;
    *((_OWORD *)a3 + 2) = xmmword_1B66A07D0;
    *((_OWORD *)a3 + 3) = xmmword_1B66A2100;
    *((_OWORD *)a3 + 4) = xmmword_1B66A2110;
    *((_OWORD *)a3 + 5) = xmmword_1B66A2120;
    v4 = 38;
    v5 = 42;
    v6 = 41;
    v7 = 40;
    *((_OWORD *)a3 + 6) = xmmword_1B66A2130;
    *((_OWORD *)a3 + 7) = xmmword_1B66A0690;
    v8 = 39;
    v9 = 37;
    v10 = 36;
    v11 = 35;
    v12 = 34;
    *((_QWORD *)a3 + 16) = 0x2600000025;
  }
  a3[v12] = v8;
  a3[v11] = v7;
  a3[v10] = v6;
  a3[v9] = v5;
LABEL_11:
  result = 0;
  *a4 = v4;
  return result;
}

uint64_t AUDenoise::GetParameterInfo(AUDenoise *this, int a2, int a3, AudioUnitParameterInfo *buffer)
{
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  const __CFString *v8;
  AudioUnitParameterOptions flags;
  int v10;
  const __CFString *v11;
  AudioUnitParameterValue v12;
  uint64_t v13;
  AudioUnitParameterValue v14;
  AudioUnitParameterValue v15;
  AudioUnitParameterOptions v16;
  const __CFString *v17;
  AudioUnitParameterOptions v18;
  const __CFString *v19;
  uint64_t v20;
  UInt32 v21;
  AudioUnitParameterOptions v22;
  AudioUnitParameterValue v23;
  AudioUnitParameterUnit v24;
  UInt32 v25;
  uint64_t v26;

  buffer->flags = 0;
  buffer->unitName = 0;
  if (a2 == 4)
  {
    switch(a3)
    {
      case 18:
        buffer->cfNameString = CFSTR("EC Delta EIR.");
        buffer->flags = 0x8000000;
        CFStringGetCString(CFSTR("EC Delta EIR."), buffer->name, 52, 0x8000100u);
        buffer->unit = kAudioUnitParameterUnit_Generic;
        buffer->defaultValue = 0.0;
        v7 = 0x501502F900000000;
        goto LABEL_14;
      case 19:
        buffer->cfNameString = CFSTR("EC IR Delay.");
        buffer->flags = 0x8000000;
        CFStringGetCString(CFSTR("EC IR Delay."), buffer->name, 52, 0x8000100u);
        buffer->unit = kAudioUnitParameterUnit_Generic;
        buffer->defaultValue = 0.0;
        v7 = 0x43C8000000000000;
        goto LABEL_14;
      case 20:
        v8 = CFSTR("EC Adapted flag.");
        goto LABEL_13;
      case 21:
        buffer->cfNameString = CFSTR("EC Time aligned ref signal energy.");
        buffer->flags = 0x8000000;
        CFStringGetCString(CFSTR("EC Time aligned ref signal energy."), buffer->name, 52, 0x8000100u);
        buffer->unit = kAudioUnitParameterUnit_Generic;
        buffer->defaultValue = 0.0;
        v7 = 0x447A000000000000;
        goto LABEL_14;
      case 22:
        v8 = CFSTR("EC Mic-Eclee cross correlation.");
LABEL_13:
        buffer->cfNameString = v8;
        buffer->flags = 0x8000000;
        CFStringGetCString(v8, buffer->name, 52, 0x8000100u);
        buffer->unit = kAudioUnitParameterUnit_Generic;
        buffer->defaultValue = 0.0;
        v7 = 0x3F80000000000000;
LABEL_14:
        *(_QWORD *)&buffer->minValue = v7;
        flags = buffer->flags;
        v10 = 1073774592;
LABEL_68:
        v16 = flags | v10;
LABEL_69:
        result = 0;
        buffer->flags = v16;
        break;
      default:
        result = 4294956418;
        break;
    }
  }
  else
  {
    if (!a2)
    {
      result = 4294956418;
      switch(a3)
      {
        case 0:
          buffer->cfNameString = CFSTR("PMWF mode");
          buffer->flags = 0x8000000;
          CFStringGetCString(CFSTR("PMWF mode"), buffer->name, 52, 0x8000100u);
          buffer->unit = kAudioUnitParameterUnit_Indexed;
          v6 = 0x4040000000000000;
          goto LABEL_19;
        case 1:
          v11 = CFSTR("Smoothing time constant for mic PSD");
          goto LABEL_17;
        case 2:
          v11 = CFSTR("Smoothing time constant for noise PSD");
LABEL_17:
          buffer->cfNameString = v11;
          buffer->flags = 0x8000000;
          CFStringGetCString(v11, buffer->name, 52, 0x8000100u);
          buffer->unit = kAudioUnitParameterUnit_Seconds;
          *(_QWORD *)&buffer->minValue = 0x4000000000000000;
          v12 = 0.38;
          goto LABEL_30;
        case 3:
          buffer->cfNameString = CFSTR("Smoothing time constant for SPP");
          buffer->flags = 0x8000000;
          CFStringGetCString(CFSTR("Smoothing time constant for SPP"), buffer->name, 52, 0x8000100u);
          buffer->unit = kAudioUnitParameterUnit_Seconds;
          v6 = 0x4000000000000000;
LABEL_19:
          *(_QWORD *)&buffer->minValue = v6;
          buffer->defaultValue = 0.0;
          goto LABEL_31;
        case 4:
          buffer->cfNameString = CFSTR("Parameter for Wiener filter");
          buffer->flags = 0x8000000;
          CFStringGetCString(CFSTR("Parameter for Wiener filter"), buffer->name, 52, 0x8000100u);
          buffer->unit = kAudioUnitParameterUnit_Generic;
          v13 = 0x41A0000000000000;
          goto LABEL_24;
        case 5:
          buffer->cfNameString = CFSTR("Initial noise PSD");
          buffer->flags = 0x8000000;
          CFStringGetCString(CFSTR("Initial noise PSD"), buffer->name, 52, 0x8000100u);
          buffer->unit = kAudioUnitParameterUnit_Decibels;
          *(_QWORD *)&buffer->minValue = 0xC1F00000C2480000;
          v12 = -30.0;
          goto LABEL_30;
        case 6:
          buffer->cfNameString = CFSTR("A priori SPP");
          buffer->flags = 0x8000000;
          CFStringGetCString(CFSTR("A priori SPP"), buffer->name, 52, 0x8000100u);
          buffer->unit = kAudioUnitParameterUnit_Generic;
          *(_QWORD *)&buffer->minValue = 0x3F80000000000000;
          v12 = 0.5;
          goto LABEL_30;
        case 7:
          buffer->cfNameString = CFSTR("Max SPP");
          buffer->flags = 0x8000000;
          CFStringGetCString(CFSTR("Max SPP"), buffer->name, 52, 0x8000100u);
          buffer->unit = kAudioUnitParameterUnit_Generic;
          v13 = 0x3F80000000000000;
LABEL_24:
          *(_QWORD *)&buffer->minValue = v13;
          v12 = 1.0;
          goto LABEL_30;
        case 8:
          buffer->cfNameString = CFSTR("Max GLR");
          buffer->flags = 0x8000000;
          CFStringGetCString(CFSTR("Max GLR"), buffer->name, 52, 0x8000100u);
          buffer->unit = kAudioUnitParameterUnit_Generic;
          *(_QWORD *)&buffer->minValue = 0x47C35000447A0000;
          v12 = 100000.0;
          goto LABEL_30;
        case 9:
          buffer->cfNameString = CFSTR("Depricated");
          buffer->flags = 0x8000000;
          CFStringGetCString(CFSTR("Depricated"), buffer->name, 52, 0x8000100u);
          buffer->clumpID = 1;
          flags = buffer->flags;
          buffer->unit = kAudioUnitParameterUnit_Generic;
          *(_QWORD *)&buffer->minValue = 0x424800003F800000;
          buffer->defaultValue = 5.0;
          v10 = -988807168;
          goto LABEL_68;
        case 10:
          buffer->cfNameString = CFSTR("Number of frames for MVAD tracker");
          buffer->flags = 0x8000000;
          CFStringGetCString(CFSTR("Number of frames for MVAD tracker"), buffer->name, 52, 0x8000100u);
          buffer->clumpID = 1;
          flags = buffer->flags;
          buffer->unit = kAudioUnitParameterUnit_Generic;
          *(_QWORD *)&buffer->minValue = 0x424800003F800000;
          v14 = 5.0;
          goto LABEL_72;
        case 11:
          buffer->cfNameString = CFSTR("Speech to noise level threshold");
          buffer->flags = 0x8000000;
          CFStringGetCString(CFSTR("Speech to noise level threshold"), buffer->name, 52, 0x8000100u);
          buffer->clumpID = 1;
          flags = buffer->flags;
          buffer->unit = kAudioUnitParameterUnit_Decibels;
          *(_QWORD *)&buffer->minValue = 0x41A0000000000000;
          v15 = 6.9897;
          goto LABEL_66;
        case 12:
          buffer->cfNameString = CFSTR("Noise reduction amount");
          buffer->flags = 0x8000000;
          CFStringGetCString(CFSTR("Noise reduction amount"), buffer->name, 52, 0x8000100u);
          buffer->unit = kAudioUnitParameterUnit_Decibels;
          *(_QWORD *)&buffer->minValue = 3281387520;
          v12 = -300.0;
LABEL_30:
          buffer->defaultValue = v12;
LABEL_31:
          v16 = buffer->flags | 0xC0000000;
          goto LABEL_69;
        case 13:
          buffer->cfNameString = CFSTR("Max a priori SAP");
          buffer->flags = 0x8000000;
          CFStringGetCString(CFSTR("Max a priori SAP"), buffer->name, 52, 0x8000100u);
          buffer->clumpID = 1;
          flags = buffer->flags;
          buffer->unit = kAudioUnitParameterUnit_Generic;
          *(_QWORD *)&buffer->minValue = 0x3F80000000000000;
          v15 = 0.99;
          goto LABEL_66;
        case 14:
          v17 = CFSTR("Filter echo estimates?");
          goto LABEL_35;
        case 15:
          v17 = CFSTR("Stop adaptation during echo?");
LABEL_35:
          buffer->cfNameString = v17;
          buffer->flags = 0x8000000;
          CFStringGetCString(v17, buffer->name, 52, 0x8000100u);
          buffer->clumpID = 2;
          v18 = buffer->flags;
          buffer->unit = kAudioUnitParameterUnit_Boolean;
          *(_QWORD *)&buffer->minValue = 0x3F80000000000000;
          buffer->defaultValue = 0.0;
          v16 = v18 | 0xC0100000;
          goto LABEL_69;
        case 16:
          v19 = CFSTR("Sxx threshold to stop adaptation.");
          goto LABEL_38;
        case 17:
          v19 = CFSTR("Eclee threshold to stop adaptation.");
LABEL_38:
          buffer->cfNameString = v19;
          buffer->flags = 0x8000000;
          CFStringGetCString(v19, buffer->name, 52, 0x8000100u);
          buffer->clumpID = 2;
          flags = buffer->flags;
          buffer->unit = kAudioUnitParameterUnit_Decibels;
          buffer->defaultValue = -60.0;
          *(_QWORD *)&buffer->minValue = 3267887104;
          goto LABEL_67;
        case 23:
          buffer->cfNameString = CFSTR("Min a priori SAP");
          buffer->flags = 0x8000000;
          CFStringGetCString(CFSTR("Min a priori SAP"), buffer->name, 52, 0x8000100u);
          buffer->clumpID = 1;
          flags = buffer->flags;
          buffer->unit = kAudioUnitParameterUnit_Generic;
          *(_QWORD *)&buffer->minValue = 0x3DCCCCCD3C23D70ALL;
          v15 = 0.05;
          goto LABEL_66;
        case 24:
          buffer->cfNameString = CFSTR("Number of additional SPP iterations");
          buffer->flags = 0x8000000;
          CFStringGetCString(CFSTR("Number of additional SPP iterations"), buffer->name, 52, 0x8000100u);
          buffer->clumpID = 1;
          flags = buffer->flags;
          buffer->unit = kAudioUnitParameterUnit_Generic;
          v20 = 0x40A0000000000000;
          goto LABEL_60;
        case 25:
          buffer->cfNameString = CFSTR("Use full rank Wiener filter?");
          buffer->flags = 0x8000000;
          CFStringGetCString(CFSTR("Use full rank Wiener filter?"), buffer->name, 52, 0x8000100u);
          v21 = 1;
          goto LABEL_48;
        case 26:
          buffer->cfNameString = CFSTR("Number of frames to initialize noise cov.");
          buffer->flags = 0x8000000;
          CFStringGetCString(CFSTR("Number of frames to initialize noise cov."), buffer->name, 52, 0x8000100u);
          buffer->clumpID = 1;
          flags = buffer->flags;
          buffer->unit = kAudioUnitParameterUnit_Generic;
          *(_QWORD *)&buffer->minValue = 0x41A0000000000000;
          buffer->defaultValue = 0.0;
          goto LABEL_73;
        case 27:
          buffer->cfNameString = CFSTR("Average SPP per frame");
          buffer->flags = 0x8000000;
          CFStringGetCString(CFSTR("Average SPP per frame"), buffer->name, 52, 0x8000100u);
          buffer->clumpID = 1;
          v22 = buffer->flags;
          buffer->unit = kAudioUnitParameterUnit_Generic;
          *(_QWORD *)&buffer->minValue = 0x3F80000000000000;
          buffer->defaultValue = 0.0;
          v16 = v22 | 0x40108000;
          goto LABEL_69;
        case 28:
          buffer->cfNameString = CFSTR("Gram-Schmidt regularization energy threshold");
          buffer->flags = 0x8000000;
          CFStringGetCString(CFSTR("Gram-Schmidt regularization energy threshold"), buffer->name, 52, 0x8000100u);
          buffer->clumpID = 1;
          flags = buffer->flags;
          buffer->unit = kAudioUnitParameterUnit_Decibels;
          *(_QWORD *)&buffer->minValue = 0xC3480000C3960000;
          v23 = -250.0;
          goto LABEL_55;
        case 29:
          buffer->cfNameString = CFSTR("Time period after which debug metrics are logged");
          buffer->flags = 0x8000000;
          CFStringGetCString(CFSTR("Time period after which debug metrics are logged"), buffer->name, 52, 0x8000100u);
          buffer->clumpID = 1;
          flags = buffer->flags;
          buffer->unit = kAudioUnitParameterUnit_Seconds;
          *(_QWORD *)&buffer->minValue = 0x45D0500000000000;
          buffer->defaultValue = 0.0;
          goto LABEL_56;
        case 30:
          buffer->cfNameString = CFSTR("Steering type for iPMWF");
          buffer->flags = 0x8000000;
          CFStringGetCString(CFSTR("Steering type for iPMWF"), buffer->name, 52, 0x8000100u);
          buffer->clumpID = 3;
          flags = buffer->flags;
          v24 = kAudioUnitParameterUnit_Indexed;
          goto LABEL_49;
        case 31:
          buffer->cfNameString = CFSTR("Use external SPP for iPMWF?");
          buffer->flags = 0x8000000;
          CFStringGetCString(CFSTR("Use external SPP for iPMWF?"), buffer->name, 52, 0x8000100u);
          v21 = 3;
LABEL_48:
          buffer->clumpID = v21;
          flags = buffer->flags;
          v24 = kAudioUnitParameterUnit_Boolean;
LABEL_49:
          buffer->unit = v24;
          v20 = 0x3F80000000000000;
          goto LABEL_60;
        case 32:
          buffer->cfNameString = CFSTR("Type of recursive update of statistics for iPMWF");
          buffer->flags = 0x8000000;
          CFStringGetCString(CFSTR("Type of recursive update of statistics for iPMWF"), buffer->name, 52, 0x8000100u);
          v25 = 3;
          goto LABEL_64;
        case 33:
          buffer->cfNameString = CFSTR("Minimum frequency for IVA VAD calculator for iPMWF");
          buffer->flags = 0x8000000;
          CFStringGetCString(CFSTR("Minimum frequency for IVA VAD calculator for iPMWF"), buffer->name, 52, 0x8000100u);
          buffer->clumpID = 4;
          flags = buffer->flags;
          buffer->unit = kAudioUnitParameterUnit_Hertz;
          *(_QWORD *)&buffer->minValue = 0x44FA000042480000;
          v23 = 100.0;
          goto LABEL_55;
        case 34:
          buffer->cfNameString = CFSTR("Maximum frequency for IVA VAD calculator for iPMWF");
          buffer->flags = 0x8000000;
          CFStringGetCString(CFSTR("Maximum frequency for IVA VAD calculator for iPMWF"), buffer->name, 52, 0x8000100u);
          buffer->clumpID = 4;
          flags = buffer->flags;
          buffer->unit = kAudioUnitParameterUnit_Hertz;
          *(_QWORD *)&buffer->minValue = 0x45DAC00044FA0000;
          v23 = 7000.0;
          goto LABEL_55;
        case 35:
          buffer->cfNameString = CFSTR("Distribution prior for IVA VAD calculator for iPMWF");
          buffer->flags = 0x8000000;
          CFStringGetCString(CFSTR("Distribution prior for IVA VAD calculator for iPMWF"), buffer->name, 52, 0x8000100u);
          buffer->clumpID = 4;
          flags = buffer->flags;
          buffer->unit = kAudioUnitParameterUnit_Generic;
          *(_QWORD *)&buffer->minValue = 0x3F8000003DCCCCCDLL;
          v23 = 0.5;
          goto LABEL_55;
        case 36:
          buffer->cfNameString = CFSTR("Energy threshold for IVA VAD calculator for iPMWF");
          buffer->flags = 0x8000000;
          CFStringGetCString(CFSTR("Energy threshold for IVA VAD calculator for iPMWF"), buffer->name, 52, 0x8000100u);
          buffer->clumpID = 4;
          flags = buffer->flags;
          buffer->unit = kAudioUnitParameterUnit_Generic;
          *(_QWORD *)&buffer->minValue = 0x3DCCCCCD358637BDLL;
          v23 = 0.001;
LABEL_55:
          buffer->defaultValue = v23;
LABEL_56:
          v10 = -1005584384;
          goto LABEL_68;
        case 37:
          buffer->cfNameString = CFSTR("External input VAD for iPMWF");
          buffer->flags = 0x8000000;
          CFStringGetCString(CFSTR("External input VAD for iPMWF"), buffer->name, 52, 0x8000100u);
          buffer->clumpID = 3;
          flags = buffer->flags;
          buffer->unit = kAudioUnitParameterUnit_Generic;
          goto LABEL_62;
        case 38:
          buffer->cfNameString = CFSTR("Maximum signal gain for iPMWF");
          buffer->flags = 0x8000000;
          CFStringGetCString(CFSTR("Maximum signal gain for iPMWF"), buffer->name, 52, 0x8000100u);
          buffer->clumpID = 3;
          flags = buffer->flags;
          buffer->unit = kAudioUnitParameterUnit_Decibels;
          *(_QWORD *)&buffer->minValue = 0x4120000000000000;
          v15 = 6.0;
          goto LABEL_66;
        case 39:
          buffer->cfNameString = CFSTR("Target beam index from input plist for iPMWF.");
          buffer->flags = 0x8000000;
          CFStringGetCString(CFSTR("Target beam index from input plist for iPMWF."), buffer->name, 52, 0x8000100u);
          buffer->clumpID = 3;
          flags = buffer->flags;
          buffer->unit = kAudioUnitParameterUnit_Generic;
          v20 = 0x428E000000000000;
LABEL_60:
          *(_QWORD *)&buffer->minValue = v20;
          buffer->defaultValue = 0.0;
          goto LABEL_67;
        case 40:
          buffer->cfNameString = CFSTR("Use updated iPMWF filter on current frame");
          buffer->flags = 0x8000000;
          CFStringGetCString(CFSTR("Use updated iPMWF filter on current frame"), buffer->name, 52, 0x8000100u);
          buffer->clumpID = 3;
          flags = buffer->flags;
          buffer->unit = kAudioUnitParameterUnit_Boolean;
LABEL_62:
          v26 = 0x3F80000000000000;
          goto LABEL_65;
        case 41:
          buffer->cfNameString = CFSTR("Guidance mode for GuidedMWF");
          buffer->flags = 0x8000000;
          CFStringGetCString(CFSTR("Guidance mode for GuidedMWF"), buffer->name, 52, 0x8000100u);
          v25 = 5;
LABEL_64:
          buffer->clumpID = v25;
          flags = buffer->flags;
          buffer->unit = kAudioUnitParameterUnit_Indexed;
          v26 = 0x4000000000000000;
LABEL_65:
          *(_QWORD *)&buffer->minValue = v26;
          v15 = 1.0;
LABEL_66:
          buffer->defaultValue = v15;
LABEL_67:
          v10 = -1072693248;
          goto LABEL_68;
        case 42:
          buffer->cfNameString = CFSTR("Covariance inverse calculation mode for GuidedMWF");
          buffer->flags = 0x8000000;
          CFStringGetCString(CFSTR("Covariance inverse calculation mode for GuidedMWF"), buffer->name, 52, 0x8000100u);
          buffer->clumpID = 5;
          flags = buffer->flags;
          buffer->unit = kAudioUnitParameterUnit_Indexed;
          *(_QWORD *)&buffer->minValue = 0x4000000000000000;
          v14 = 2.0;
LABEL_72:
          buffer->defaultValue = v14;
LABEL_73:
          v10 = -1055916032;
          goto LABEL_68;
        default:
          return result;
      }
    }
    return 4294956430;
  }
  return result;
}

UInt8 *AUDenoise::SaveExtendedScopes(AUDenoise *this, __CFData *a2)
{
  ausdk::AUScope *Scope;

  Scope = (ausdk::AUScope *)ausdk::AUBase::GetScope(this, 4u);
  return ausdk::AUScope::SaveState(Scope, a2);
}

uint64_t AUDenoise::RestoreState(OpaqueAudioComponentInstance **this, const void *a2)
{
  uint64_t result;

  result = ausdk::AUBase::RestoreState(this, a2);
  if (!(_DWORD)result)
  {
    this[66] = (OpaqueAudioComponentInstance *)((char *)this[66] + 1);
    this[68] = (OpaqueAudioComponentInstance *)((char *)this[68] + 1);
  }
  return result;
}

uint64_t AUDenoise::GetParameterValueStrings(AUDenoise *this, int a2, int a3, const __CFArray **a4)
{
  uint64_t result;
  __int128 *v6;
  CFIndex v7;
  const __CFArray *v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  if (!a4)
    return 0;
  if (a2)
    return 4294956430;
  result = 0;
  if (a3 <= 31)
  {
    if (a3)
    {
      if (a3 != 30)
        return result;
      v9 = xmmword_1E69D62D8;
      v7 = 2;
    }
    else
    {
      v9 = xmmword_1E69D62B8;
      v10 = *(_OWORD *)&off_1E69D62C8;
      v7 = 4;
    }
  }
  else
  {
    switch(a3)
    {
      case ' ':
        v6 = &xmmword_1E69D62E8;
        break;
      case ')':
        v6 = &xmmword_1E69D6300;
        break;
      case '*':
        v6 = &xmmword_1E69D6318;
        break;
      default:
        return result;
    }
    v9 = *v6;
    *(_QWORD *)&v10 = *((_QWORD *)v6 + 2);
    v7 = 3;
  }
  v8 = CFArrayCreate(0, (const void **)&v9, v7, 0);
  result = 0;
  *a4 = v8;
  return result;
}

double AUDenoise::GetLatency(AUDenoise *this)
{
  return 0.0;
}

double AUDenoise::GetTailTime(AUDenoise *this)
{
  return 0.05;
}

uint64_t AUDenoise::SupportsTail(AUDenoise *this)
{
  return 1;
}

BOOL AUDenoise::StreamFormatWritable(AUDenoise *this)
{
  return *((_BYTE *)this + 17) == 0;
}

uint64_t AUDenoise::SupportedNumChannels(AUDenoise *this, const AUChannelInfo **a2)
{
  if (a2)
    *a2 = (const AUChannelInfo *)&AUDenoise::SupportedNumChannels(AUChannelInfo const**)::sSupportedChannelConfigs;
  return 16;
}

uint64_t AUDenoise::ValidFormat(AUDenoise *this, int a2, unsigned int a3, const AudioStreamBasicDescription *a4)
{
  uint64_t result;

  if (a4->mBitsPerChannel == 64 && a4->mFormatID == 1718773105)
    result = (LOBYTE(a4->mFormatFlags) >> 5) & 1;
  else
    result = 0;
  if (a2 == 2 || a2 == 1)
  {
    if (a4->mChannelsPerFrame < 0x11)
      return result;
    else
      return 0;
  }
  return result;
}

uint64_t AUDenoise::ChangeStreamFormat(AUDenoise *this, uint64_t a2, uint64_t a3, const AudioStreamBasicDescription *a4, const AudioStreamBasicDescription *a5)
{
  ausdk::AUBase::ChangeStreamFormat(this, a2, a3, a4, a5);
  if (a4->mSampleRate != a5->mSampleRate)
    *((_QWORD *)this + 78) = *(_QWORD *)&a5->mSampleRate;
  return 0;
}

uint64_t AUDenoise::GetScopeExtended(AUDenoise *this, int a2)
{
  if (a2 == 4)
    return (uint64_t)this + 568;
  else
    return 0;
}

uint64_t AUDenoise::SetMaxFramesPerSlice(AUDenoise *this, int a2)
{
  uint64_t result;

  result = ausdk::AUBase::SetMaxFramesPerSlice((uint64_t)this, a2);
  if (*((_DWORD *)this + 154) != a2)
    *((_DWORD *)this + 154) = a2;
  return result;
}

void AUDenoise::UpdateState(AUDenoise *this)
{
  uint64_t v2;
  ausdk::AUElement *v3;
  ausdk::AUElement **v4;
  uint64_t v5;
  ausdk::AUElement *v6;
  ausdk::AUElement **v7;
  uint64_t v8;
  ausdk::AUElement *v9;
  ausdk::AUElement **v10;
  uint64_t v11;
  ausdk::AUElement *v12;
  ausdk::AUElement **v13;
  uint64_t v14;
  ausdk::AUElement *v15;
  ausdk::AUElement **v16;
  uint64_t v17;
  ausdk::AUElement *v18;
  ausdk::AUElement **v19;
  uint64_t v20;
  ausdk::AUElement *v21;
  ausdk::AUElement **v22;
  uint64_t v23;
  ausdk::AUElement *v24;
  ausdk::AUElement **v25;
  uint64_t v26;
  ausdk::AUElement *v27;
  ausdk::AUElement **v28;
  uint64_t v29;
  ausdk::AUElement *v30;
  ausdk::AUElement **v31;
  uint64_t v32;
  ausdk::AUElement *v33;
  ausdk::AUElement **v34;
  uint64_t v35;
  ausdk::AUElement *v36;
  ausdk::AUElement **v37;
  uint64_t v38;
  ausdk::AUElement *v39;
  ausdk::AUElement **v40;
  uint64_t v41;
  ausdk::AUElement *v42;
  ausdk::AUElement **v43;
  uint64_t v44;
  ausdk::AUElement *v45;
  ausdk::AUElement **v46;
  uint64_t v47;
  ausdk::AUElement *v48;
  ausdk::AUElement **v49;
  uint64_t v50;
  ausdk::AUElement *v51;
  ausdk::AUElement **v52;
  uint64_t v53;
  ausdk::AUElement *v54;
  ausdk::AUElement **v55;
  uint64_t v56;
  ausdk::AUElement *v57;
  ausdk::AUElement **v58;
  uint64_t v59;
  ausdk::AUElement *v60;
  ausdk::AUElement **v61;
  uint64_t v62;
  ausdk::AUElement *v63;
  ausdk::AUElement **v64;
  uint64_t v65;
  ausdk::AUElement *v66;
  ausdk::AUElement **v67;
  uint64_t v68;
  ausdk::AUElement *v69;
  ausdk::AUElement **v70;
  uint64_t v71;
  ausdk::AUElement *v72;
  ausdk::AUElement **v73;
  uint64_t v74;
  ausdk::AUElement *v75;
  ausdk::AUElement **v76;
  uint64_t v77;
  ausdk::AUElement *v78;
  ausdk::AUElement **v79;
  uint64_t v80;
  ausdk::AUElement *v81;
  ausdk::AUElement **v82;
  uint64_t v83;
  ausdk::AUElement *v84;
  ausdk::AUElement **v85;
  uint64_t v86;
  ausdk::AUElement *v87;
  ausdk::AUElement **v88;
  uint64_t v89;
  ausdk::AUElement *v90;
  ausdk::AUElement **v91;
  uint64_t v92;
  ausdk::AUElement *v93;
  ausdk::AUElement **v94;
  uint64_t v95;
  ausdk::AUElement *v96;
  ausdk::AUElement **v97;
  uint64_t v98;
  ausdk::AUElement *v99;
  ausdk::AUElement **v100;
  uint64_t v101;
  ausdk::AUElement *v102;
  ausdk::AUElement **v103;
  uint64_t v104;
  ausdk::AUElement *v105;
  ausdk::AUElement **v106;
  uint64_t v107;
  ausdk::AUElement *v108;
  ausdk::AUElement **v109;
  uint64_t v110;
  ausdk::AUElement *v111;
  ausdk::AUElement **v112;
  uint64_t v113;
  ausdk::AUElement *v114;
  ausdk::AUElement **v115;
  uint64_t v116;
  ausdk::AUElement *v117;
  ausdk::AUElement **v118;
  float Parameter;
  float v120;
  float v121;
  uint64_t v122;
  ausdk::AUElement *v123;
  ausdk::AUElement **v124;
  float v125;
  float v126;
  float v127;
  uint64_t v128;
  ausdk::AUElement *v129;
  ausdk::AUElement **v130;
  caulk::concurrent::messenger *v131;
  float v132;
  float v133;
  float v134;
  uint64_t v135;
  uint64_t v136;
  int v137;
  uint64_t v138;
  float v139;
  float v140;
  float v141;
  float v142;
  unsigned int v143;
  uint64_t v144;
  unsigned int v145;
  double v146;
  float v147;
  float v148;
  uint64_t v149;
  float v150;
  float v151;
  float *v152;
  float v153;
  float v154;
  float v155;
  float *v156;
  uint64_t v157;
  float v158;
  float v159;
  float v160;
  float v161;
  int v162;
  float v163;
  float v164;
  _QWORD *v165;
  uint64_t v166;
  unint64_t v167;
  uint64_t v168;
  uint64_t v169;
  float v170;
  float v171;
  int v172;
  uint64_t v173;
  float v174;
  float v175;
  uint64_t v176;
  float v177;
  float v178;
  uint64_t v179;
  float __A;

  v2 = *((_QWORD *)this + 9);
  if (v2)
  {
    v3 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v2 + 32))(v2, 0);
  }
  else
  {
    v4 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v4)
      v3 = 0;
    else
      v3 = *v4;
  }
  *((_DWORD *)this + 165) = (int)ausdk::AUElement::GetParameter(v3, 0);
  v5 = *((_QWORD *)this + 9);
  if (v5)
  {
    v6 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v5 + 32))(v5, 0);
  }
  else
  {
    v7 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v7)
      v6 = 0;
    else
      v6 = *v7;
  }
  *((float *)this + 166) = ausdk::AUElement::GetParameter(v6, 1u);
  v8 = *((_QWORD *)this + 9);
  if (v8)
  {
    v9 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v8 + 32))(v8, 0);
  }
  else
  {
    v10 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v10)
      v9 = 0;
    else
      v9 = *v10;
  }
  *((float *)this + 167) = ausdk::AUElement::GetParameter(v9, 2u);
  v11 = *((_QWORD *)this + 9);
  if (v11)
  {
    v12 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v11 + 32))(v11, 0);
  }
  else
  {
    v13 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v13)
      v12 = 0;
    else
      v12 = *v13;
  }
  *((float *)this + 168) = ausdk::AUElement::GetParameter(v12, 3u);
  v14 = *((_QWORD *)this + 9);
  if (v14)
  {
    v15 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v14 + 32))(v14, 0);
  }
  else
  {
    v16 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v16)
      v15 = 0;
    else
      v15 = *v16;
  }
  *((float *)this + 169) = ausdk::AUElement::GetParameter(v15, 4u);
  v17 = *((_QWORD *)this + 9);
  if (v17)
  {
    v18 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v17 + 32))(v17, 0);
  }
  else
  {
    v19 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v19)
      v18 = 0;
    else
      v18 = *v19;
  }
  *((float *)this + 170) = ausdk::AUElement::GetParameter(v18, 5u);
  v20 = *((_QWORD *)this + 9);
  if (v20)
  {
    v21 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v20 + 32))(v20, 0);
  }
  else
  {
    v22 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v22)
      v21 = 0;
    else
      v21 = *v22;
  }
  *((float *)this + 171) = ausdk::AUElement::GetParameter(v21, 6u);
  v23 = *((_QWORD *)this + 9);
  if (v23)
  {
    v24 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v23 + 32))(v23, 0);
  }
  else
  {
    v25 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v25)
      v24 = 0;
    else
      v24 = *v25;
  }
  *((float *)this + 172) = ausdk::AUElement::GetParameter(v24, 7u);
  v26 = *((_QWORD *)this + 9);
  if (v26)
  {
    v27 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v26 + 32))(v26, 0);
  }
  else
  {
    v28 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v28)
      v27 = 0;
    else
      v27 = *v28;
  }
  *((float *)this + 173) = ausdk::AUElement::GetParameter(v27, 8u);
  v29 = *((_QWORD *)this + 9);
  if (v29)
  {
    v30 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v29 + 32))(v29, 0);
  }
  else
  {
    v31 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v31)
      v30 = 0;
    else
      v30 = *v31;
  }
  *((_DWORD *)this + 174) = ausdk::AUElement::GetParameter(v30, 9u);
  v32 = *((_QWORD *)this + 9);
  if (v32)
  {
    v33 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v32 + 32))(v32, 0);
  }
  else
  {
    v34 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v34)
      v33 = 0;
    else
      v33 = *v34;
  }
  *((_DWORD *)this + 175) = ausdk::AUElement::GetParameter(v33, 0xAu);
  v35 = *((_QWORD *)this + 9);
  if (v35)
  {
    v36 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v35 + 32))(v35, 0);
  }
  else
  {
    v37 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v37)
      v36 = 0;
    else
      v36 = *v37;
  }
  *((float *)this + 176) = ausdk::AUElement::GetParameter(v36, 0xBu);
  v38 = *((_QWORD *)this + 9);
  if (v38)
  {
    v39 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v38 + 32))(v38, 0);
  }
  else
  {
    v40 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v40)
      v39 = 0;
    else
      v39 = *v40;
  }
  *((float *)this + 177) = ausdk::AUElement::GetParameter(v39, 0xCu);
  v41 = *((_QWORD *)this + 9);
  if (v41)
  {
    v42 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v41 + 32))(v41, 0);
  }
  else
  {
    v43 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v43)
      v42 = 0;
    else
      v42 = *v43;
  }
  *((float *)this + 178) = ausdk::AUElement::GetParameter(v42, 0xDu);
  v44 = *((_QWORD *)this + 9);
  if (v44)
  {
    v45 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v44 + 32))(v44, 0);
  }
  else
  {
    v46 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v46)
      v45 = 0;
    else
      v45 = *v46;
  }
  *((float *)this + 179) = ausdk::AUElement::GetParameter(v45, 0x17u);
  v47 = *((_QWORD *)this + 9);
  if (v47)
  {
    v48 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v47 + 32))(v47, 0);
  }
  else
  {
    v49 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v49)
      v48 = 0;
    else
      v48 = *v49;
  }
  *((_DWORD *)this + 180) = ausdk::AUElement::GetParameter(v48, 0x18u);
  v50 = *((_QWORD *)this + 9);
  if (v50)
  {
    v51 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v50 + 32))(v50, 0);
  }
  else
  {
    v52 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v52)
      v51 = 0;
    else
      v51 = *v52;
  }
  *((_BYTE *)this + 724) = ausdk::AUElement::GetParameter(v51, 0x19u) != 0.0;
  v53 = *((_QWORD *)this + 9);
  if (v53)
  {
    v54 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v53 + 32))(v53, 0);
  }
  else
  {
    v55 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v55)
      v54 = 0;
    else
      v54 = *v55;
  }
  *((_DWORD *)this + 182) = ausdk::AUElement::GetParameter(v54, 0x1Au);
  v56 = *((_QWORD *)this + 9);
  if (v56)
  {
    v57 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v56 + 32))(v56, 0);
  }
  else
  {
    v58 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v58)
      v57 = 0;
    else
      v57 = *v58;
  }
  *((float *)this + 183) = ausdk::AUElement::GetParameter(v57, 0x1Bu);
  v59 = *((_QWORD *)this + 9);
  if (v59)
  {
    v60 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v59 + 32))(v59, 0);
  }
  else
  {
    v61 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v61)
      v60 = 0;
    else
      v60 = *v61;
  }
  *((float *)this + 184) = ausdk::AUElement::GetParameter(v60, 0x1Cu);
  v62 = *((_QWORD *)this + 9);
  if (v62)
  {
    v63 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v62 + 32))(v62, 0);
  }
  else
  {
    v64 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v64)
      v63 = 0;
    else
      v63 = *v64;
  }
  *((float *)this + 185) = ausdk::AUElement::GetParameter(v63, 0x1Du);
  v65 = *((_QWORD *)this + 9);
  if (v65)
  {
    v66 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v65 + 32))(v65, 0);
  }
  else
  {
    v67 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v67)
      v66 = 0;
    else
      v66 = *v67;
  }
  *((_DWORD *)this + 189) = (int)ausdk::AUElement::GetParameter(v66, 0x1Eu);
  v68 = *((_QWORD *)this + 9);
  if (v68)
  {
    v69 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v68 + 32))(v68, 0);
  }
  else
  {
    v70 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v70)
      v69 = 0;
    else
      v69 = *v70;
  }
  *((_BYTE *)this + 760) = ausdk::AUElement::GetParameter(v69, 0x1Fu) != 0.0;
  v71 = *((_QWORD *)this + 9);
  if (v71)
  {
    v72 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v71 + 32))(v71, 0);
  }
  else
  {
    v73 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v73)
      v72 = 0;
    else
      v72 = *v73;
  }
  *((_DWORD *)this + 191) = (int)ausdk::AUElement::GetParameter(v72, 0x20u);
  v74 = *((_QWORD *)this + 9);
  if (v74)
  {
    v75 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v74 + 32))(v74, 0);
  }
  else
  {
    v76 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v76)
      v75 = 0;
    else
      v75 = *v76;
  }
  *((float *)this + 192) = ausdk::AUElement::GetParameter(v75, 0x21u);
  v77 = *((_QWORD *)this + 9);
  if (v77)
  {
    v78 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v77 + 32))(v77, 0);
  }
  else
  {
    v79 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v79)
      v78 = 0;
    else
      v78 = *v79;
  }
  *((float *)this + 193) = ausdk::AUElement::GetParameter(v78, 0x22u);
  v80 = *((_QWORD *)this + 9);
  if (v80)
  {
    v81 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v80 + 32))(v80, 0);
  }
  else
  {
    v82 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v82)
      v81 = 0;
    else
      v81 = *v82;
  }
  *((float *)this + 194) = ausdk::AUElement::GetParameter(v81, 0x23u);
  v83 = *((_QWORD *)this + 9);
  if (v83)
  {
    v84 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v83 + 32))(v83, 0);
  }
  else
  {
    v85 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v85)
      v84 = 0;
    else
      v84 = *v85;
  }
  *((float *)this + 195) = ausdk::AUElement::GetParameter(v84, 0x24u);
  v86 = *((_QWORD *)this + 9);
  if (v86)
  {
    v87 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v86 + 32))(v86, 0);
  }
  else
  {
    v88 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v88)
      v87 = 0;
    else
      v87 = *v88;
  }
  *((float *)this + 196) = ausdk::AUElement::GetParameter(v87, 0x25u);
  v89 = *((_QWORD *)this + 9);
  if (v89)
  {
    v90 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v89 + 32))(v89, 0);
  }
  else
  {
    v91 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v91)
      v90 = 0;
    else
      v90 = *v91;
  }
  *((float *)this + 197) = ausdk::AUElement::GetParameter(v90, 0x26u);
  v92 = *((_QWORD *)this + 9);
  if (v92)
  {
    v93 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v92 + 32))(v92, 0);
  }
  else
  {
    v94 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v94)
      v93 = 0;
    else
      v93 = *v94;
  }
  *((_DWORD *)this + 198) = ausdk::AUElement::GetParameter(v93, 0x27u);
  v95 = *((_QWORD *)this + 9);
  if (v95)
  {
    v96 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v95 + 32))(v95, 0);
  }
  else
  {
    v97 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v97)
      v96 = 0;
    else
      v96 = *v97;
  }
  *((_BYTE *)this + 796) = ausdk::AUElement::GetParameter(v96, 0x28u) != 0.0;
  v98 = *((_QWORD *)this + 9);
  if (v98)
  {
    v99 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v98 + 32))(v98, 0);
  }
  else
  {
    v100 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v100)
      v99 = 0;
    else
      v99 = *v100;
  }
  *((_DWORD *)this + 200) = (int)ausdk::AUElement::GetParameter(v99, 0x29u);
  v101 = *((_QWORD *)this + 9);
  if (v101)
  {
    v102 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v101 + 32))(v101, 0);
  }
  else
  {
    v103 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v103)
      v102 = 0;
    else
      v102 = *v103;
  }
  *((_DWORD *)this + 201) = (int)ausdk::AUElement::GetParameter(v102, 0x2Au);
  if (*((float *)this + 184) == 0.0)
    *((_DWORD *)this + 184) = -1015414784;
  v104 = *((_QWORD *)this + 9);
  if (v104)
  {
    v105 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v104 + 32))(v104, 0);
  }
  else
  {
    v106 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v106)
      v105 = 0;
    else
      v105 = *v106;
  }
  *((_BYTE *)this + 808) = ausdk::AUElement::GetParameter(v105, 0xEu) != 0.0;
  v107 = *((_QWORD *)this + 9);
  if (v107)
  {
    v108 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v107 + 32))(v107, 0);
  }
  else
  {
    v109 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v109)
      v108 = 0;
    else
      v108 = *v109;
  }
  *((_BYTE *)this + 809) = ausdk::AUElement::GetParameter(v108, 0xFu) != 0.0;
  v110 = *((_QWORD *)this + 9);
  if (v110)
  {
    v111 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v110 + 32))(v110, 0);
  }
  else
  {
    v112 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v112)
      v111 = 0;
    else
      v111 = *v112;
  }
  *((float *)this + 203) = ausdk::AUElement::GetParameter(v111, 0x10u);
  v113 = *((_QWORD *)this + 9);
  if (v113)
  {
    v114 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v113 + 32))(v113, 0);
  }
  else
  {
    v115 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v115)
      v114 = 0;
    else
      v114 = *v115;
  }
  *((float *)this + 204) = ausdk::AUElement::GetParameter(v114, 0x11u);
  v116 = *((_QWORD *)this + 9);
  if (v116)
  {
    v117 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v116 + 32))(v116, 0);
  }
  else
  {
    v118 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v118)
      v117 = 0;
    else
      v117 = *v118;
  }
  Parameter = ausdk::AUElement::GetParameter(v117, 1u);
  v120 = 0.0;
  if (Parameter != 0.0)
  {
    v121 = *((double *)this + 78);
    v120 = expf((float)((float)-(float)*((unsigned int *)this + 154) / v121) / Parameter);
  }
  *((float *)this + 186) = v120;
  v122 = *((_QWORD *)this + 9);
  if (v122)
  {
    v123 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v122 + 32))(v122, 0);
  }
  else
  {
    v124 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v124)
      v123 = 0;
    else
      v123 = *v124;
  }
  v125 = ausdk::AUElement::GetParameter(v123, 2u);
  v126 = 0.0;
  if (v125 != 0.0)
  {
    v127 = *((double *)this + 78);
    v126 = expf((float)((float)-(float)*((unsigned int *)this + 154) / v127) / v125);
  }
  *((float *)this + 187) = v126;
  v128 = *((_QWORD *)this + 9);
  if (v128)
  {
    v129 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v128 + 32))(v128, 0);
  }
  else
  {
    v130 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v130)
      v129 = 0;
    else
      v129 = *v130;
  }
  v132 = ausdk::AUElement::GetParameter(v129, 3u);
  v133 = 0.0;
  if (v132 != 0.0)
  {
    v134 = *((double *)this + 78);
    v133 = expf((float)((float)-(float)*((unsigned int *)this + 154) / v134) / v132);
  }
  *((float *)this + 188) = v133;
  if (!*((_QWORD *)this + 156) && *((float *)this + 185) > 0.0)
  {
    v135 = caulk::concurrent::messenger::shared_logging_priority(v131);
    v136 = operator new();
    MEMORY[0x1BCC94FFC](v136, 0, v135);
    std::unique_ptr<caulk::concurrent::messenger>::reset[abi:ne180100]((uint64_t *)this + 156, v136);
  }
  v137 = *((_DWORD *)this + 165);
  if (v137 == 3)
  {
    if (*((_QWORD *)this + 145))
    {
LABEL_238:
      v152 = (float *)*((_QWORD *)this + 145);
      v153 = *((float *)this + 186);
      v152[2] = v153;
      v154 = 1.0;
      v152[13] = sqrtf(1.0 - v153);
      v155 = *((float *)this + 177);
      v156 = v152;
      if (v155 != 0.0)
      {
        v154 = __exp10f(v155 / 20.0);
        v156 = (float *)*((_QWORD *)this + 145);
      }
      v152[3] = v154;
      v156[6] = *((float *)this + 200);
      return;
    }
  }
  else if (v137 == 2)
  {
    if (*((_QWORD *)this + 144))
    {
LABEL_227:
      v138 = *((_QWORD *)this + 144);
      v139 = *((float *)this + 186);
      v140 = *(float *)(v138 + 72);
      v141 = *((float *)this + 187);
      *(float *)(v138 + 8) = v139;
      *(float *)(v138 + 12) = v141;
      *(float *)(v138 + 76) = v140 - v139;
      *(float *)(v138 + 80) = v140 - v141;
      *(_DWORD *)(v138 + 20) = *((_DWORD *)this + 169);
      v142 = *((float *)this + 170);
      if (v142 != 0.0)
        __exp10f(v142 / 10.0);
      if (!*(_DWORD *)(v138 + 84))
      {
        __A = 1.0 / sqrtf(*(float *)(v138 + 24));
        if (*(_DWORD *)(v138 + 32))
        {
          v143 = 0;
          do
          {
            vDSP_vfill(&__A, (float *)(*(_QWORD *)(v138 + 168) + 4 * (*(_DWORD *)(v138 + 36) + *(_DWORD *)(v138 + 40)) * v143), 1, *(unsigned int *)(v138 + 36));
            vDSP_vfill((const float *)(v138 + 24), (float *)(*(_QWORD *)(v138 + 696) + 4 * (*(_DWORD *)(v138 + 36) + *(_DWORD *)(v138 + 40)) * v143), 1, *(unsigned int *)(v138 + 36));
            vDSP_vfill((const float *)(v138 + 24), (float *)(*(_QWORD *)(v138 + 744) + 4 * (*(_DWORD *)(v138 + 36) + *(_DWORD *)(v138 + 40)) * v143++), 1, *(unsigned int *)(v138 + 36));
          }
          while (v143 < *(_DWORD *)(v138 + 32));
        }
      }
      v144 = *((_QWORD *)this + 144);
      v145 = *((_DWORD *)this + 154);
      v146 = (float)*((double *)this + 78) / ((float)v145 + (float)v145);
      *(float *)&v146 = v146;
      *(uint32x2_t *)(v144 + 108) = vmin_u32(vcvt_u32_f32(vrnda_f32(vabs_f32(vdiv_f32(*(float32x2_t *)((char *)this + 768), (float32x2_t)vdup_lane_s32(*(int32x2_t *)&v146, 0))))), (uint32x2_t)vdup_n_s32(v145));
      *(_QWORD *)(v144 + 116) = *((_QWORD *)this + 97);
      *(_DWORD *)(v144 + 124) = *((_DWORD *)this + 196);
      v147 = *((float *)this + 197);
      v148 = 1.0;
      v149 = v144;
      v150 = 1.0;
      if (v147 != 0.0)
      {
        v150 = __exp10f(v147 / 10.0);
        v149 = *((_QWORD *)this + 144);
      }
      *(float *)(v144 + 128) = v150;
      v151 = *((float *)this + 177);
      if (v151 != 0.0)
        v148 = __exp10f(v151 / 20.0);
      *(float *)(v149 + 16) = v148;
      return;
    }
  }
  else if (*((_QWORD *)this + 143))
  {
    goto LABEL_225;
  }
  AUDenoise::InitializePMWFClasses(this);
  v137 = *((_DWORD *)this + 165);
LABEL_225:
  if (v137 == 3)
    goto LABEL_238;
  if (v137 == 2)
    goto LABEL_227;
  v157 = *((_QWORD *)this + 143);
  v158 = *((float *)this + 186);
  v159 = *(float *)(v157 + 76);
  *(float *)(v157 + 152) = v159 / v158;
  *(float *)(v157 + 156) = v159 / (float)(v159 - v158);
  v160 = *((float *)this + 187);
  *(float *)(v157 + 8) = v158;
  *(float *)(v157 + 12) = v160;
  *(float *)(v157 + 96) = v159 - v158;
  *(float *)(v157 + 100) = v159 - v160;
  v161 = *((float *)this + 188);
  *(float *)(v157 + 104) = v159 - v161;
  v162 = *((_DWORD *)this + 169);
  *(float *)(v157 + 16) = v161;
  *(_DWORD *)(v157 + 20) = v162;
  v163 = *((float *)this + 170);
  v164 = 1.0;
  if (v163 != 0.0)
    v164 = __exp10f(v163 / 10.0);
  v165 = (_QWORD *)((char *)this + 684);
  if (!*(_DWORD *)(v157 + 148))
  {
    *(float *)(v157 + 24) = v164;
    if (*(_DWORD *)(v157 + 48))
    {
      v166 = 0;
      v167 = 0;
      do
      {
        vDSP_vfill((const float *)(v157 + 24), *(float **)(*(_QWORD *)(v157 + 200) + v166), 1, *(unsigned int *)(v157 + 52));
        vDSP_vfill((const float *)(v157 + 24), *(float **)(*(_QWORD *)(v157 + 224) + v166), 1, *(unsigned int *)(v157 + 52));
        ++v167;
        v166 += 24;
      }
      while (v167 < *(unsigned int *)(v157 + 48));
    }
  }
  v168 = *((_QWORD *)this + 143);
  v169 = *v165;
  *(float *)(v168 + 92) = (float)(*(float *)(v168 + 76) - COERCE_FLOAT(*v165)) / COERCE_FLOAT(*v165);
  *(_QWORD *)(v168 + 28) = v169;
  *(_DWORD *)(v168 + 36) = *((_DWORD *)this + 173);
  v170 = *((float *)this + 184);
  v171 = 1.0;
  if (v170 != 0.0)
    v171 = __exp10f(v170 / 10.0);
  *(float *)(v168 + 44) = v171;
  v172 = *((_DWORD *)this + 165);
  if (v172)
  {
    v173 = *((_QWORD *)this + 143);
    if (v172 == 1)
      *(_DWORD *)(v173 + 108) = 1;
  }
  else
  {
    v173 = *((_QWORD *)this + 143);
    *(_DWORD *)(v173 + 108) = 0;
  }
  v174 = *((float *)this + 176);
  v175 = 1.0;
  v176 = v173;
  v177 = 1.0;
  if (v174 != 0.0)
  {
    v177 = __exp10f(v174 / 10.0);
    v176 = *((_QWORD *)this + 143);
  }
  *(float *)(v173 + 120) = v177;
  v178 = *((float *)this + 177);
  v179 = v176;
  if (v178 != 0.0)
  {
    v175 = __exp10f(v178 / 20.0);
    v179 = *((_QWORD *)this + 143);
  }
  *(float *)(v176 + 124) = v175;
  *(_QWORD *)(v179 + 128) = *((_QWORD *)this + 89);
  *(_DWORD *)(v179 + 136) = *((_DWORD *)this + 180);
  *(_BYTE *)(v179 + 140) = *((_BYTE *)this + 724);
  if (!*(_DWORD *)(v179 + 148))
    *(_DWORD *)(v179 + 144) = *((_DWORD *)this + 182);
}

void sub_1B636F444(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1BCC95CEC](v1, 0x20C40A4A59CD2);
  _Unwind_Resume(a1);
}

uint64_t AUDenoise::LogMaster(uint64_t this, const AudioBufferList *a2, const AudioBufferList *a3, double a4)
{
  double v4;
  float v5;
  uint64_t v6;
  caulk::concurrent::messenger *v7;
  _QWORD *v10;
  uint64_t v11;
  unint64_t v12;
  void **p_mData;
  void **v14;
  const float *v15;
  const float *v16;
  const float *v17;
  float v18;
  float v19;
  float v20;
  caulk::concurrent::messenger *v21;
  uint64_t v22;
  caulk::concurrent::messenger *v23;
  uint64_t v24;
  float v25;
  uint64_t __C;

  LODWORD(a4) = *(_DWORD *)(this + 616);
  v4 = *(double *)(this + 640) + (double)*(unint64_t *)&a4 / *(double *)(this + 624);
  if (v4 < 0.0)
    v4 = 0.0;
  *(double *)(this + 640) = v4;
  v5 = *(float *)(this + 740);
  if (v5 > 0.0 && v4 > v5)
  {
    v6 = this;
    v7 = *(caulk::concurrent::messenger **)(this + 1248);
    if (v7)
    {
      v10 = (_QWORD *)MEMORY[0x1E0DDB688];
      v11 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)*MEMORY[0x1E0DDB688] + 16))(*MEMORY[0x1E0DDB688], 40, 8);
      *(_DWORD *)(v11 + 16) = 0;
      *(_OWORD *)(v11 + 24) = *(_OWORD *)(v6 + 640);
      *(_QWORD *)v11 = &off_1E69D6380;
      *(_QWORD *)(v11 + 8) = 0;
      caulk::concurrent::messenger::enqueue(v7, (caulk::concurrent::message *)v11);
      if (*(_DWORD *)(v6 + 632))
      {
        v12 = 0;
        p_mData = &a3->mBuffers[0].mData;
        v14 = &a2->mBuffers[0].mData;
        do
        {
          __C = 0;
          v25 = 0.0;
          vDSP_svesq((const float *)*v14, 1, (float *)&__C + 1, (2 * *(_DWORD *)(v6 + 616)));
          vDSP_svesq((const float *)*p_mData, 1, (float *)&__C, (2 * *(_DWORD *)(v6 + 616)));
          v16 = (const float *)*v14;
          v14 += 2;
          v15 = v16;
          v17 = (const float *)*p_mData;
          p_mData += 2;
          vDSP_distancesq(v15, 1, v17, 1, &v25, (2 * *(_DWORD *)(v6 + 616)));
          v18 = *(float *)&__C + 2.2204e-16;
          v19 = log10f((float)(*(float *)&__C + 2.2204e-16) / (float)(v25 + 2.2204e-16)) * 10.0;
          v20 = log10f(v18 / (float)(*((float *)&__C + 1) + 2.2204e-16)) * 10.0;
          v21 = *(caulk::concurrent::messenger **)(v6 + 1248);
          v22 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)*v10 + 16))(*v10, 40, 8);
          *(_DWORD *)(v22 + 16) = 0;
          *(_DWORD *)(v22 + 24) = v12;
          *(float *)(v22 + 28) = v19;
          *(float *)(v22 + 32) = v20;
          *(_QWORD *)v22 = &off_1E69D63A8;
          *(_QWORD *)(v22 + 8) = 0;
          caulk::concurrent::messenger::enqueue(v21, (caulk::concurrent::message *)v22);
          ++v12;
        }
        while (v12 < *(unsigned int *)(v6 + 632));
      }
      v23 = *(caulk::concurrent::messenger **)(v6 + 1248);
      v24 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)*v10 + 16))(*v10, 24, 8);
      *(_DWORD *)(v24 + 16) = 0;
      *(_QWORD *)v24 = &off_1E69D63D0;
      *(_QWORD *)(v24 + 8) = 0;
      this = caulk::concurrent::messenger::enqueue(v23, (caulk::concurrent::message *)v24);
      *(_QWORD *)(v6 + 640) = 0;
    }
  }
  return this;
}

void caulk::concurrent::details::rt_message_call<AUDenoise::LogMaster(AudioBufferList const&,AudioBufferList const&)::$_1,unsigned int &,float &,float &>::~rt_message_call(caulk::concurrent::message *a1)
{
  caulk::concurrent::message::~message(a1);
  JUMPOUT(0x1BCC95CECLL);
}

caulk::concurrent::message **caulk::concurrent::details::rt_message_call<AUDenoise::LogMaster(AudioBufferList const&,AudioBufferList const&)::$_1,unsigned int &,float &,float &>::perform(uint64_t a1)
{
  int v1;
  float v2;
  float v3;
  NSObject *v4;
  caulk::concurrent::message *v6;
  uint8_t buf[4];
  const char *v8;
  __int16 v9;
  int v10;
  __int16 v11;
  int v12;
  __int16 v13;
  double v14;
  __int16 v15;
  double v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v6 = (caulk::concurrent::message *)a1;
  v1 = *(_DWORD *)(a1 + 24);
  v2 = *(float *)(a1 + 28);
  v3 = *(float *)(a1 + 32);
  if (AUDenoiseLogScope(void)::once != -1)
    dispatch_once(&AUDenoiseLogScope(void)::once, &__block_literal_global_10126);
  if (AUDenoiseLogScope(void)::scope)
  {
    v4 = *(NSObject **)AUDenoiseLogScope(void)::scope;
    if (!*(_QWORD *)AUDenoiseLogScope(void)::scope)
      return caulk::concurrent::details::rt_message_call<AUDenoise::LogMaster(AudioBufferList const&,AudioBufferList const&)::$_1,unsigned int &,float &,float &>::rt_cleanup::~rt_cleanup(&v6);
  }
  else
  {
    v4 = MEMORY[0x1E0C81028];
  }
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 136316162;
    v8 = "AUDenoise.cpp";
    v9 = 1024;
    v10 = 1706;
    v11 = 1024;
    v12 = v1;
    v13 = 2048;
    v14 = v2;
    v15 = 2048;
    v16 = v3;
    _os_log_impl(&dword_1B5ED0000, v4, OS_LOG_TYPE_DEFAULT, "%25s:%-5d AUDenoise: SNR measure in [dB] for mic-channel %u , internal: %f (dB), external: %f (dB)\n", buf, 0x2Cu);
  }
  return caulk::concurrent::details::rt_message_call<AUDenoise::LogMaster(AudioBufferList const&,AudioBufferList const&)::$_1,unsigned int &,float &,float &>::rt_cleanup::~rt_cleanup(&v6);
}

caulk::concurrent::message **caulk::concurrent::details::rt_message_call<AUDenoise::LogMaster(AudioBufferList const&,AudioBufferList const&)::$_1,unsigned int &,float &,float &>::rt_cleanup::~rt_cleanup(caulk::concurrent::message **a1)
{
  caulk::concurrent::message *v2;

  v2 = *a1;
  caulk::concurrent::message::~message(*a1);
  (*(void (**)(_QWORD, caulk::concurrent::message *, uint64_t, uint64_t))(*(_QWORD *)*MEMORY[0x1E0DDB688] + 24))(*MEMORY[0x1E0DDB688], v2, 40, 8);
  return a1;
}

void caulk::concurrent::details::rt_message_call<AUDenoise::LogMaster(AudioBufferList const&,AudioBufferList const&)::$_2>::~rt_message_call(caulk::concurrent::message *a1)
{
  caulk::concurrent::message::~message(a1);
  JUMPOUT(0x1BCC95CECLL);
}

caulk::concurrent::message **caulk::concurrent::details::rt_message_call<AUDenoise::LogMaster(AudioBufferList const&,AudioBufferList const&)::$_2>::perform(caulk::concurrent::message *a1)
{
  NSObject *v1;
  caulk::concurrent::message *v3;
  uint8_t buf[4];
  const char *v5;
  __int16 v6;
  int v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  if (AUDenoiseLogScope(void)::once != -1)
    dispatch_once(&AUDenoiseLogScope(void)::once, &__block_literal_global_10126);
  if (AUDenoiseLogScope(void)::scope)
  {
    v1 = *(NSObject **)AUDenoiseLogScope(void)::scope;
    if (!*(_QWORD *)AUDenoiseLogScope(void)::scope)
      return caulk::concurrent::details::rt_message_call<AUDenoise::LogMaster(AudioBufferList const&,AudioBufferList const&)::$_2>::rt_cleanup::~rt_cleanup(&v3);
  }
  else
  {
    v1 = MEMORY[0x1E0C81028];
  }
  if (os_log_type_enabled(v1, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 136315394;
    v5 = "AUDenoise.cpp";
    v6 = 1024;
    v7 = 1711;
    _os_log_impl(&dword_1B5ED0000, v1, OS_LOG_TYPE_DEFAULT, "%25s:%-5d AUDenoise: ********* Logging ends *********\n", buf, 0x12u);
  }
  return caulk::concurrent::details::rt_message_call<AUDenoise::LogMaster(AudioBufferList const&,AudioBufferList const&)::$_2>::rt_cleanup::~rt_cleanup(&v3);
}

caulk::concurrent::message **caulk::concurrent::details::rt_message_call<AUDenoise::LogMaster(AudioBufferList const&,AudioBufferList const&)::$_2>::rt_cleanup::~rt_cleanup(caulk::concurrent::message **a1)
{
  caulk::concurrent::message *v2;

  v2 = *a1;
  caulk::concurrent::message::~message(*a1);
  (*(void (**)(_QWORD, caulk::concurrent::message *, uint64_t, uint64_t))(*(_QWORD *)*MEMORY[0x1E0DDB688] + 24))(*MEMORY[0x1E0DDB688], v2, 24, 8);
  return a1;
}

void caulk::concurrent::details::rt_message_call<AUDenoise::LogMaster(AudioBufferList const&,AudioBufferList const&)::$_0,double &,double &>::~rt_message_call(caulk::concurrent::message *a1)
{
  caulk::concurrent::message::~message(a1);
  JUMPOUT(0x1BCC95CECLL);
}

caulk::concurrent::message **caulk::concurrent::details::rt_message_call<AUDenoise::LogMaster(AudioBufferList const&,AudioBufferList const&)::$_0,double &,double &>::perform(caulk::concurrent::message *a1)
{
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  caulk::concurrent::message *v5;
  uint8_t buf[4];
  const char *v7;
  __int16 v8;
  int v9;
  __int16 v10;
  uint64_t v11;
  __int16 v12;
  uint64_t v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v5 = a1;
  v2 = *((_QWORD *)a1 + 3);
  v1 = *((_QWORD *)a1 + 4);
  if (AUDenoiseLogScope(void)::once != -1)
    dispatch_once(&AUDenoiseLogScope(void)::once, &__block_literal_global_10126);
  if (AUDenoiseLogScope(void)::scope)
  {
    v3 = *(NSObject **)AUDenoiseLogScope(void)::scope;
    if (!*(_QWORD *)AUDenoiseLogScope(void)::scope)
      return caulk::concurrent::details::rt_message_call<AUDenoise::LogMaster(AudioBufferList const&,AudioBufferList const&)::$_0,double &,double &>::rt_cleanup::~rt_cleanup(&v5);
  }
  else
  {
    v3 = MEMORY[0x1E0C81028];
  }
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 136315906;
    v7 = "AUDenoise.cpp";
    v8 = 1024;
    v9 = 1690;
    v10 = 2048;
    v11 = v2;
    v12 = 2048;
    v13 = v1;
    _os_log_impl(&dword_1B5ED0000, v3, OS_LOG_TYPE_DEFAULT, "%25s:%-5d AUDenoise: ********* Logging begins *********\nAUDenoise: logging (period, timestamp): (%f, %f) (s)\n", buf, 0x26u);
  }
  return caulk::concurrent::details::rt_message_call<AUDenoise::LogMaster(AudioBufferList const&,AudioBufferList const&)::$_0,double &,double &>::rt_cleanup::~rt_cleanup(&v5);
}

caulk::concurrent::message **caulk::concurrent::details::rt_message_call<AUDenoise::LogMaster(AudioBufferList const&,AudioBufferList const&)::$_0,double &,double &>::rt_cleanup::~rt_cleanup(caulk::concurrent::message **a1)
{
  caulk::concurrent::message *v2;

  v2 = *a1;
  caulk::concurrent::message::~message(*a1);
  (*(void (**)(_QWORD, caulk::concurrent::message *, uint64_t, uint64_t))(*(_QWORD *)*MEMORY[0x1E0DDB688] + 24))(*MEMORY[0x1E0DDB688], v2, 40, 8);
  return a1;
}

os_log_t ___ZL17AUDenoiseLogScopev_block_invoke()
{
  _QWORD *v0;
  os_log_t result;

  v0 = (_QWORD *)operator new();
  v0[1] = 0;
  result = os_log_create("com.apple.coreaudio", "audnos");
  *v0 = result;
  AUDenoiseLogScope(void)::scope = (uint64_t)v0;
  return result;
}

void AUDenoise::InitializePMWFClasses(AUDenoise *this)
{
  NSObject *v2;
  float v3;
  float v4;
  float v5;
  float v6;
  float v7;
  float v8;
  float v9;
  float v10;
  int v11;
  PMWF_FAST_GS_vDSP *v12;
  int v13;
  float v14;
  float v15;
  unsigned int v16;
  double v17;
  float32x2_t v18;
  uint64_t v19;
  double v20;
  unsigned int v21;
  float v22;
  float v23;
  int v24;
  int v25;
  int v26;
  char v27;
  int v28;
  int v29;
  char v30;
  int v31;
  const float *v32;
  float v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  unsigned int v52;
  unsigned int i;
  NSObject *v54;
  unsigned int v55;
  unsigned int *v56;
  unint64_t v57;
  unsigned int v58;
  float v59;
  const float *v60;
  int v61;
  float v62;
  float v63;
  int v64;
  unint64_t v65;
  unint64_t v66;
  NSObject *v67;
  unsigned int v68;
  unsigned int v69;
  uint64_t v70;
  unint64_t v71;
  float v72;
  float v73;
  int v74;
  int v75;
  NSObject *v76;
  float v77;
  unsigned int v78;
  NSObject *v79;
  uint64_t v80;
  uint64_t *v81;
  uint64_t v82;
  uint64_t v83;
  unint64_t v84;
  size_t v85;
  unsigned int v86;
  const float *v87;
  unsigned int v88;
  uint64_t v89;
  uint64_t v90;
  unsigned int v91;
  int v92;
  NSObject *v93;
  NSObject *v94;
  unsigned int *v95;
  unint64_t v96;
  float v97;
  unsigned int v98;
  unsigned int v99;
  unint64_t v100;
  unint64_t v101;
  unint64_t v102;
  unint64_t v103;
  unint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  unsigned int v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t *v115;
  uint64_t *v116;
  _QWORD *v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  _QWORD *v121;
  NSObject *v122;
  unsigned int v123;
  _QWORD v124[3];
  _QWORD v125[3];
  float v126;
  int v127[2];
  uint64_t v128;
  void **__A;
  _BYTE buf[18];
  __int16 v131;
  int v132;
  __int16 v133;
  double v134;
  uint64_t v135;

  v135 = *MEMORY[0x1E0C80C00];
  if (AUDenoiseLogScope(void)::once != -1)
    dispatch_once(&AUDenoiseLogScope(void)::once, &__block_literal_global_10126);
  if (AUDenoiseLogScope(void)::scope)
  {
    v2 = *(NSObject **)AUDenoiseLogScope(void)::scope;
    if (!*(_QWORD *)AUDenoiseLogScope(void)::scope)
      goto LABEL_9;
  }
  else
  {
    v2 = MEMORY[0x1E0C81028];
  }
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 136315394;
    *(_QWORD *)&buf[4] = "AUDenoise.cpp";
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = 1899;
    _os_log_impl(&dword_1B5ED0000, v2, OS_LOG_TYPE_DEFAULT, "%25s:%-5d AUDenoise: Initialize PMWF Classes.\n", buf, 0x12u);
  }
LABEL_9:
  v3 = *((float *)this + 170);
  v4 = 1.0;
  v5 = 1.0;
  if (v3 != 0.0)
    v5 = __exp10f(v3 / 10.0);
  v6 = *((float *)this + 184);
  if (v6 != 0.0)
    v4 = __exp10f(v6 / 10.0);
  v7 = *((float *)this + 176);
  v8 = 1.0;
  v9 = 1.0;
  if (v7 != 0.0)
    v9 = __exp10f(v7 / 10.0);
  v10 = *((float *)this + 177);
  if (v10 != 0.0)
    v8 = __exp10f(v10 / 20.0);
  if (*((_QWORD *)this + 143))
    std::unique_ptr<PMWF_FAST_GS_vDSP>::reset[abi:ne180100]((uint64_t *)this + 143, 0);
  if (*((_QWORD *)this + 144))
    std::unique_ptr<iPMWF_HRLS_vDSP>::reset[abi:ne180100]((_QWORD *)this + 144, 0);
  switch(*((_DWORD *)this + 165))
  {
    case 0:
      v11 = *((_DWORD *)this + 154);
      v12 = (PMWF_FAST_GS_vDSP *)operator new();
      PMWF_FAST_GS_vDSP::PMWF_FAST_GS_vDSP(v12, *((_DWORD *)this + 158), v11 + 1, *((float *)this + 186), *((float *)this + 187), *((float *)this + 188), *((float *)this + 169), v5, *((float *)this + 171), *((float *)this + 172), *((float *)this + 173), 0, *((_DWORD *)this + 174), *((_DWORD *)this + 175), *((_DWORD *)this + 180), *((_BYTE *)this + 724), v4, v9, v8,
        *((float *)this + 178),
        *((float *)this + 179),
        *((float *)this + 182),
        v123);
      goto LABEL_24;
    case 1:
      v13 = *((_DWORD *)this + 154);
      v12 = (PMWF_FAST_GS_vDSP *)operator new();
      PMWF_FAST_GS_vDSP::PMWF_FAST_GS_vDSP(v12, *((_DWORD *)this + 158), v13 + 1, *((float *)this + 186), *((float *)this + 187), *((float *)this + 188), *((float *)this + 169), v5, *((float *)this + 171), *((float *)this + 172), *((float *)this + 173), 1, *((_DWORD *)this + 174), *((_DWORD *)this + 175), *((_DWORD *)this + 180), *((_BYTE *)this + 724), v4, v9, v8,
        *((float *)this + 178),
        *((float *)this + 179),
        *((float *)this + 182),
        v123);
LABEL_24:
      std::unique_ptr<PMWF_FAST_GS_vDSP>::reset[abi:ne180100]((uint64_t *)this + 143, (uint64_t)v12);
      goto LABEL_106;
    case 2:
      v14 = *((float *)this + 197);
      v15 = 1.0;
      if (v14 != 0.0)
        v15 = __exp10f(v14 / 10.0);
      v16 = *((_DWORD *)this + 154);
      v17 = *((double *)this + 78);
      v18 = *(float32x2_t *)((char *)this + 768);
      v19 = operator new();
      v20 = (float)v17 / ((float)v16 + (float)v16);
      *(float *)&v20 = v20;
      v21 = *((_DWORD *)this + 158);
      v22 = *((float *)this + 186);
      v23 = *((float *)this + 187);
      v24 = *((_DWORD *)this + 169);
      v25 = *((_DWORD *)this + 182);
      v26 = *((_DWORD *)this + 189);
      v27 = *((_BYTE *)this + 760);
      v28 = *((_DWORD *)this + 191);
      v29 = *((_DWORD *)this + 196);
      v30 = *((_BYTE *)this + 796);
      *(float *)v127 = v5;
      *(_DWORD *)v19 = v21;
      *(_DWORD *)(v19 + 4) = v16 + 1;
      *(float *)(v19 + 8) = v22;
      *(float *)(v19 + 12) = v23;
      *(float *)(v19 + 16) = v8;
      *(_DWORD *)(v19 + 20) = v24;
      *(float *)(v19 + 24) = v5;
      *(_DWORD *)(v19 + 28) = 629145600;
      *(_DWORD *)(v19 + 32) = v21;
      v31 = (v16 + 1) * v21;
      *(_DWORD *)(v19 + 36) = v16 + 1;
      *(_DWORD *)(v19 + 40) = v31;
      *(_DWORD *)(v19 + 44) = v31 * v21;
      *(_DWORD *)(v19 + 48) = 2 * v21;
      *(_DWORD *)(v19 + 52) = v21 * v21;
      *(_DWORD *)(v19 + 56) = v31;
      *(_DWORD *)(v19 + 60) = 2 * v21 * v21;
      *(_DWORD *)(v19 + 64) = v21 * v21 * (v16 + 1);
      *(_QWORD *)(v19 + 68) = 0x3F80000000000000;
      v32 = (const float *)(v19 + 68);
      *(float *)(v19 + 76) = 1.0 - v22;
      *(float *)(v19 + 80) = 1.0 - v23;
      *(_DWORD *)(v19 + 84) = 0;
      *(_DWORD *)(v19 + 88) = v25;
      *(float *)(v19 + 92) = (float)v21;
      *(_DWORD *)(v19 + 96) = v26;
      *(_BYTE *)(v19 + 100) = v27;
      *(_BYTE *)(v19 + 101) = v30;
      *(_DWORD *)(v19 + 104) = v28;
      *(uint32x2_t *)(v19 + 108) = vmin_u32(vcvt_u32_f32(vrnda_f32(vabs_f32(vdiv_f32(v18, (float32x2_t)vdup_lane_s32(*(int32x2_t *)&v20, 0))))), (uint32x2_t)vdup_n_s32(v16));
      *(_QWORD *)(v19 + 116) = *((_QWORD *)this + 97);
      *(_DWORD *)(v19 + 124) = v29;
      *(float *)(v19 + 128) = v15;
      v33 = (float)v16 + (float)v16;
      *(float *)(v19 + 132) = v33;
      *(float *)(v19 + 136) = 1.0 / v33;
      std::vector<float>::vector((_QWORD *)(v19 + 144), 2 * v31 * v21);
      std::vector<float>::vector((_QWORD *)(v19 + 168), (2 * *(_DWORD *)(v19 + 44)));
      std::vector<float>::vector((_QWORD *)(v19 + 192), *(unsigned int *)(v19 + 36), (_DWORD *)(v19 + 92));
      v34 = *(unsigned int *)(v19 + 36);
      *(_DWORD *)buf = 0;
      std::vector<float>::vector((_QWORD *)(v19 + 216), v34, buf);
      v35 = *(unsigned int *)(v19 + 36);
      *(_DWORD *)buf = 0;
      std::vector<float>::vector((_QWORD *)(v19 + 240), v35, buf);
      v36 = *(unsigned int *)(v19 + 36);
      *(_DWORD *)buf = 0;
      std::vector<float>::vector((_QWORD *)(v19 + 264), v36, buf);
      v37 = *(unsigned int *)(v19 + 36);
      *(_DWORD *)buf = 0;
      std::vector<float>::vector((_QWORD *)(v19 + 288), v37, buf);
      v38 = *(unsigned int *)(v19 + 36);
      *(_DWORD *)buf = 0;
      std::vector<float>::vector((_QWORD *)(v19 + 312), v38, buf);
      v39 = *(unsigned int *)(v19 + 36);
      *(_DWORD *)buf = 0;
      std::vector<float>::vector((_QWORD *)(v19 + 336), v39, buf);
      std::vector<float>::vector((_QWORD *)(v19 + 360), (2 * *(_DWORD *)(v19 + 40)));
      std::vector<float>::vector((_QWORD *)(v19 + 384), (2 * *(_DWORD *)(v19 + 40)));
      std::vector<float>::vector((_QWORD *)(v19 + 408), (2 * *(_DWORD *)(v19 + 40)));
      std::vector<float>::vector((_QWORD *)(v19 + 432), (2 * *(_DWORD *)(v19 + 40)));
      v40 = *(unsigned int *)(v19 + 44);
      *(_DWORD *)buf = 0;
      std::vector<float>::vector((_QWORD *)(v19 + 456), v40, buf);
      std::vector<float>::vector((_QWORD *)(v19 + 480), (2 * *(_DWORD *)(v19 + 40)));
      std::vector<float>::vector((_QWORD *)(v19 + 504), (2 * *(_DWORD *)(v19 + 40)));
      std::vector<float>::vector((_QWORD *)(v19 + 528), (2 * *(_DWORD *)(v19 + 40)));
      v41 = *(unsigned int *)(v19 + 36);
      *(_DWORD *)buf = 1065353216;
      std::vector<float>::vector((_QWORD *)(v19 + 552), v41, buf);
      v42 = *(unsigned int *)(v19 + 36);
      *(_DWORD *)buf = 1065353216;
      std::vector<float>::vector((_QWORD *)(v19 + 576), v42, buf);
      v43 = *(unsigned int *)(v19 + 36);
      *(_DWORD *)buf = 1065353216;
      std::vector<float>::vector((_QWORD *)(v19 + 600), v43, buf);
      std::vector<float>::vector((_QWORD *)(v19 + 624), (2 * *(_DWORD *)(v19 + 40)));
      v44 = *(unsigned int *)(v19 + 36);
      *(_DWORD *)buf = 0;
      std::vector<float>::vector((_QWORD *)(v19 + 648), v44, buf);
      v45 = (2 * *(_DWORD *)(v19 + 44));
      *(_DWORD *)buf = 0;
      std::vector<float>::vector((_QWORD *)(v19 + 672), v45, buf);
      v46 = (2 * *(_DWORD *)(v19 + 44));
      *(_DWORD *)buf = 0;
      std::vector<float>::vector((_QWORD *)(v19 + 696), v46, buf);
      v47 = (2 * *(_DWORD *)(v19 + 44));
      *(_DWORD *)buf = 0;
      std::vector<float>::vector((_QWORD *)(v19 + 720), v47, buf);
      v48 = (2 * *(_DWORD *)(v19 + 44));
      *(_DWORD *)buf = 0;
      std::vector<float>::vector((_QWORD *)(v19 + 744), v48, buf);
      v49 = (2 * *(_DWORD *)(v19 + 40));
      *(_DWORD *)buf = 1065353216;
      std::vector<float>::vector((_QWORD *)(v19 + 768), v49, buf);
      v50 = (2 * *(_DWORD *)(v19 + 40));
      *(_DWORD *)buf = 1065353216;
      std::vector<float>::vector((_QWORD *)(v19 + 792), v50, buf);
      v51 = *(unsigned int *)(v19 + 40);
      *(_DWORD *)buf = 0;
      std::vector<float>::vector((_QWORD *)(v19 + 816), v51, buf);
      *(float *)&__A = 1.0 / sqrtf(*(float *)v127);
      v52 = *(_DWORD *)(v19 + 32);
      if (v52)
      {
        for (i = 0; i < v52; ++i)
        {
          vDSP_vfill((const float *)&__A, (float *)(*(_QWORD *)(v19 + 168) + 4 * (*(_DWORD *)(v19 + 36) + *(_DWORD *)(v19 + 40)) * i), 1, *(unsigned int *)(v19 + 36));
          vDSP_vfill((const float *)v127, (float *)(*(_QWORD *)(v19 + 696) + 4 * (*(_DWORD *)(v19 + 36) + *(_DWORD *)(v19 + 40)) * i), 1, *(unsigned int *)(v19 + 36));
          vDSP_vfill((const float *)v127, (float *)(*(_QWORD *)(v19 + 744) + 4 * (*(_DWORD *)(v19 + 36) + *(_DWORD *)(v19 + 40)) * i), 1, *(unsigned int *)(v19 + 36));
          v52 = *(_DWORD *)(v19 + 32);
        }
      }
      v126 = 1.0 / sqrtf((float)v52);
      vDSP_vfill(&v126, *(float **)(v19 + 792), 1, *(unsigned int *)(v19 + 40));
      vDSP_vfill(v32, (float *)(*(_QWORD *)(v19 + 792) + 4 * *(unsigned int *)(v19 + 40)), 1, *(unsigned int *)(v19 + 40));
      vDSP_vfill(v32, (float *)(*(_QWORD *)(v19 + 768) + 4 * *(unsigned int *)(v19 + 40)), 1, *(unsigned int *)(v19 + 40));
      iPMWF_HRLS_vDSP::InitializeFilter((iPMWF_HRLS_vDSP *)v19);
      if (AUDenoiseLogScope(void)::once != -1)
        dispatch_once(&AUDenoiseLogScope(void)::once, &__block_literal_global_19324);
      if (AUDenoiseLogScope(void)::scope)
      {
        v54 = *(NSObject **)AUDenoiseLogScope(void)::scope;
        if (!*(_QWORD *)AUDenoiseLogScope(void)::scope)
          goto LABEL_63;
      }
      else
      {
        v54 = MEMORY[0x1E0C81028];
      }
      if (os_log_type_enabled(v54, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 136315394;
        *(_QWORD *)&buf[4] = "iPMWF_HRLS_vDSP.cpp";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 157;
        _os_log_impl(&dword_1B5ED0000, v54, OS_LOG_TYPE_DEBUG, "%25s:%-5d iPMWF: successful initialization.\n", buf, 0x12u);
      }
LABEL_63:
      std::unique_ptr<iPMWF_HRLS_vDSP>::reset[abi:ne180100]((_QWORD *)this + 144, v19);
      if (*((_BYTE *)this + 657))
      {
        v80 = *((_QWORD *)this + 144);
        v81 = (uint64_t *)*((_QWORD *)this + 146);
        memset(v125, 0, sizeof(v125));
        std::vector<std::vector<float>>::__init_with_size[abi:ne180100]<std::vector<float>*,std::vector<float>*>(v125, *v81, v81[1], 0xAAAAAAAAAAAAAAABLL * ((v81[1] - *v81) >> 3));
        v82 = *((_QWORD *)this + 146);
        memset(v124, 0, sizeof(v124));
        std::vector<std::vector<float>>::__init_with_size[abi:ne180100]<std::vector<float>*,std::vector<float>*>(v124, *(_QWORD *)(v82 + 24), *(_QWORD *)(v82 + 32), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(v82 + 32) - *(_QWORD *)(v82 + 24)) >> 3));
        if (*(_DWORD *)(v80 + 32))
        {
          v83 = 0;
          v84 = 0;
          v85 = 4 * (*((_DWORD *)this + 154) + 1);
          do
          {
            memcpy((void *)(*(_QWORD *)(v80 + 768) + 4 * (*(_DWORD *)(v80 + 36) * v84)), *(const void **)(v125[0] + v83), v85);
            memcpy((void *)(*(_QWORD *)(v80 + 768)+ 4 * (*(_DWORD *)(v80 + 40) + *(_DWORD *)(v80 + 36) * v84++)), *(const void **)(v124[0] + v83), v85);
            v83 += 24;
          }
          while (v84 < *(unsigned int *)(v80 + 32));
        }
        v127[0] = *(_DWORD *)(v80 + 36);
        vDSP_vclr(*(float **)(v80 + 432), 1, v127[0]);
        if ((*(_DWORD *)(v80 + 32) & 0x7FFFFFFF) != 0)
        {
          v86 = 0;
          do
          {
            v87 = (const float *)(*(_QWORD *)(v80 + 768) + 4 * *(_DWORD *)(v80 + 36) * v86);
            vDSP_vma(v87, 1, v87, 1, *(const float **)(v80 + 432), 1, *(float **)(v80 + 432), 1, *(unsigned int *)(v80 + 36));
            ++v86;
          }
          while (v86 < 2 * *(_DWORD *)(v80 + 32));
        }
        vvsqrtf(*(float **)(v80 + 432), *(const float **)(v80 + 432), v127);
        vDSP_vthr(*(const float **)(v80 + 432), 1, (const float *)(v80 + 28), *(float **)(v80 + 432), 1, *(unsigned int *)(v80 + 36));
        vDSP_svdiv((const float *)(v80 + 72), *(const float **)(v80 + 432), 1, *(float **)(v80 + 432), 1, *(unsigned int *)(v80 + 36));
        if ((*(_DWORD *)(v80 + 32) & 0x7FFFFFFF) != 0)
        {
          v88 = 0;
          do
          {
            vDSP_vmul((const float *)(*(_QWORD *)(v80 + 768) + 4 * *(_DWORD *)(v80 + 36) * v88), 1, *(const float **)(v80 + 432), 1, (float *)(*(_QWORD *)(v80 + 792) + 4 * *(_DWORD *)(v80 + 36) * v88), 1, *(unsigned int *)(v80 + 36));
            ++v88;
          }
          while (v88 < 2 * *(_DWORD *)(v80 + 32));
        }
        vDSP_vneg((const float *)(*(_QWORD *)(v80 + 792) + 4 * *(unsigned int *)(v80 + 40)), 1, *(float **)(v80 + 816), 1, *(unsigned int *)(v80 + 40));
        *(_QWORD *)buf = v124;
        std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
        *(_QWORD *)buf = v125;
        std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
      }
      goto LABEL_106;
    case 3:
      v55 = *((_DWORD *)this + 154);
      v56 = (unsigned int *)operator new();
      v57 = v55 + 1;
      v58 = *((_DWORD *)this + 158);
      v59 = *((float *)this + 186);
      *v56 = v58;
      v56[1] = v57;
      *((float *)v56 + 2) = v59;
      *((float *)v56 + 3) = v8;
      *((float *)v56 + 4) = v5;
      v60 = (const float *)(v56 + 4);
      v56[5] = 629145600;
      *((_QWORD *)v56 + 3) = *((_QWORD *)this + 100);
      *((float *)v56 + 8) = v4;
      v61 = v57 * v58;
      v56[9] = v57 * v58;
      v56[10] = v57 * v58 * v58;
      v62 = 1.0 - v59;
      *((float *)v56 + 11) = 1.0 / (float)v58;
      *((float *)v56 + 12) = v62;
      v63 = (float)v55 + (float)v55;
      *((float *)v56 + 13) = sqrtf(v62);
      *((float *)v56 + 14) = v63;
      *((float *)v56 + 15) = 1.0 / v63;
      *((_OWORD *)v56 + 7) = 0u;
      *((_OWORD *)v56 + 4) = 0u;
      v64 = 2 * v58;
      *((_QWORD *)v56 + 16) = 0;
      *((_OWORD *)v56 + 5) = 0u;
      *((_OWORD *)v56 + 6) = 0u;
      std::vector<float>::vector((_QWORD *)v56 + 17, 2 * v58 * v57);
      std::vector<float>::vector((_QWORD *)v56 + 20, (v64 * v57));
      std::vector<float>::vector((_QWORD *)v56 + 23, (v64 * v57));
      std::vector<float>::vector((_QWORD *)v56 + 26, (v64 * v57));
      std::vector<float>::vector((_QWORD *)v56 + 29, v57);
      *(_DWORD *)buf = 0;
      std::vector<float>::vector((_QWORD *)v56 + 32, (v64 * v57), buf);
      v65 = (v61 * v64);
      *(_DWORD *)buf = 0;
      std::vector<float>::vector((_QWORD *)v56 + 35, v65, buf);
      *(_DWORD *)buf = 1065353216;
      std::vector<float>::vector((_QWORD *)v56 + 38, v57, buf);
      *(_DWORD *)buf = 1065353216;
      std::vector<float>::vector((_QWORD *)v56 + 41, v57, buf);
      *((_OWORD *)v56 + 23) = 0u;
      *((_OWORD *)v56 + 24) = 0u;
      *((_OWORD *)v56 + 22) = 0u;
      *(_DWORD *)buf = 0;
      std::vector<float>::vector((_QWORD *)v56 + 50, v57, buf);
      *(_DWORD *)buf = 0;
      std::vector<float>::vector((_QWORD *)v56 + 53, v57, buf);
      *(_DWORD *)buf = 0;
      std::vector<float>::vector((_QWORD *)v56 + 56, v57, buf);
      v66 = *v56;
      v56[118] = v66;
      buf[0] = 0;
      std::vector<BOOL>::vector((_QWORD *)v56 + 60, v66, buf);
      *((_QWORD *)v56 + 63) = 0;
      *((_QWORD *)v56 + 64) = 0;
      *((_QWORD *)v56 + 65) = 0;
      if (AUDenoiseLogScope(void)::once != -1)
        dispatch_once(&AUDenoiseLogScope(void)::once, &__block_literal_global_21398);
      if (AUDenoiseLogScope(void)::scope)
      {
        v67 = *(NSObject **)AUDenoiseLogScope(void)::scope;
        if (!*(_QWORD *)AUDenoiseLogScope(void)::scope)
          goto LABEL_43;
      }
      else
      {
        v67 = MEMORY[0x1E0C81028];
      }
      if (os_log_type_enabled(v67, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 136315394;
        *(_QWORD *)&buf[4] = "GuidedMWF.cpp";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 103;
        _os_log_impl(&dword_1B5ED0000, v67, OS_LOG_TYPE_DEBUG, "%25s:%-5d will try to initialize\n", buf, 0x12u);
      }
LABEL_43:
      std::vector<float>::resize((uint64_t)(v56 + 16), v65);
      *(_DWORD *)buf = 0;
      std::vector<float>::resize((uint64_t)(v56 + 22), v65, buf);
      *(_DWORD *)buf = 1065353216;
      std::vector<float>::resize((uint64_t)(v56 + 28), v57, buf);
      *(_DWORD *)buf = 0;
      std::vector<float>::resize((uint64_t)(v56 + 88), v65, buf);
      *(_DWORD *)buf = 0;
      std::vector<float>::resize((uint64_t)(v56 + 94), v65, buf);
      if (*v56)
      {
        v68 = 0;
        do
        {
          *(float *)buf = 1.0 / *((float *)v56 + 4);
          vDSP_vfill((const float *)buf, (float *)(*((_QWORD *)v56 + 11) + 4 * (v56[1] + v56[9]) * v68), 1, v56[1]);
          vDSP_vfill(v60, (float *)(*((_QWORD *)v56 + 44) + 4 * (v56[1] + v56[9]) * v68), 1, v56[1]);
          vDSP_vfill(v60, (float *)(*((_QWORD *)v56 + 47) + 4 * (v56[1] + v56[9]) * v68++), 1, v56[1]);
        }
        while (v68 < *v56);
      }
      v69 = v56[7];
      if (v69)
      {
        if (v69 == 1)
        {
          v70 = operator new();
          v72 = *(float *)v56;
          v71 = v56[1];
          v73 = *((float *)v56 + 4);
          v74 = 2 * *v56;
          v75 = v71 * *v56;
          *(_DWORD *)buf = 0;
          std::vector<float>::vector((_QWORD *)v70, (v75 * v74), buf);
          *(_DWORD *)buf = 0;
          std::vector<float>::vector((_QWORD *)(v70 + 24), (v75 * v74), buf);
          *(_DWORD *)buf = 0;
          std::vector<float>::vector((_QWORD *)(v70 + 48), (v74 * v71), buf);
          *(_DWORD *)buf = 0;
          std::vector<float>::vector((_QWORD *)(v70 + 72), v71, buf);
          *(_DWORD *)buf = 0;
          std::vector<float>::vector((_QWORD *)(v70 + 96), (v74 * v71), buf);
          *(_DWORD *)buf = 0;
          std::vector<float>::vector((_QWORD *)(v70 + 120), (v74 * v71), buf);
          *(_DWORD *)buf = 0;
          std::vector<float>::vector((_QWORD *)(v70 + 144), v71, buf);
          *(_DWORD *)buf = 0;
          std::vector<float>::vector((_QWORD *)(v70 + 168), (v75 * LODWORD(v72)), buf);
          *(float *)(v70 + 192) = v72;
          *(_DWORD *)(v70 + 196) = v71;
          *(float *)(v70 + 200) = v73;
          *(_DWORD *)(v70 + 204) = v75 * LODWORD(v72);
          *(_DWORD *)(v70 + 208) = v75;
          if (getMatrixUtilityLog(void)::onceToken != -1)
            dispatch_once(&getMatrixUtilityLog(void)::onceToken, &__block_literal_global_8252);
          v76 = getMatrixUtilityLog(void)::gLog;
          if (os_log_type_enabled((os_log_t)getMatrixUtilityLog(void)::gLog, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)buf = 134218752;
            *(_QWORD *)&buf[4] = v70;
            *(_WORD *)&buf[12] = 1024;
            *(float *)&buf[14] = v72;
            v131 = 1024;
            v132 = v71;
            v133 = 2048;
            v134 = v73;
            _os_log_debug_impl(&dword_1B5ED0000, v76, OS_LOG_TYPE_DEBUG, "[%p] will construct with M=%u, K=%u, delta=%f", buf, 0x22u);
          }
          v77 = *(float *)(v70 + 200);
          *(float *)v127 = 1.0 / sqrtf(v77);
          *(float *)&__A = 1.0 / v77;
          if (*(_DWORD *)(v70 + 192))
          {
            v78 = 0;
            do
            {
              vDSP_vfill((const float *)v127, (float *)(*(_QWORD *)v70 + 4 * (*(_DWORD *)(v70 + 196) + *(_DWORD *)(v70 + 208)) * v78), 1, *(unsigned int *)(v70 + 196));
              vDSP_vfill((const float *)&__A, (float *)(*(_QWORD *)(v70 + 24) + 4 * (*(_DWORD *)(v70 + 196) + *(_DWORD *)(v70 + 208)) * v78++), 1, *(unsigned int *)(v70 + 196));
            }
            while (v78 < *(_DWORD *)(v70 + 192));
          }
          if (getMatrixUtilityLog(void)::onceToken != -1)
            dispatch_once(&getMatrixUtilityLog(void)::onceToken, &__block_literal_global_8252);
          v79 = getMatrixUtilityLog(void)::gLog;
          if (os_log_type_enabled((os_log_t)getMatrixUtilityLog(void)::gLog, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)buf = 134217984;
            *(_QWORD *)&buf[4] = v70;
            _os_log_debug_impl(&dword_1B5ED0000, v79, OS_LOG_TYPE_DEBUG, "[%p] successfully constructed", buf, 0xCu);
          }
          std::unique_ptr<InverseWithHRLS>::reset[abi:ne180100]((uint64_t *)v56 + 64, v70);
        }
        else
        {
          v95 = (unsigned int *)operator new();
          v97 = *(float *)v56;
          v96 = v56[1];
          v98 = v56[4];
          v99 = v56[8];
          *v95 = *v56;
          v95[1] = v96;
          v95[2] = v96 * LODWORD(v97);
          v95[3] = v96 * LODWORD(v97) * LODWORD(v97);
          v95[4] = v98;
          v95[5] = v99;
          std::vector<float>::vector((_QWORD *)v95 + 3, v96);
          v100 = *v95;
          v95[12] = v100;
          buf[0] = 0;
          std::vector<BOOL>::vector((_QWORD *)v95 + 7, v100, buf);
          v101 = *v95;
          std::vector<float>::vector(buf, v95[1], v95 + 4);
          std::vector<std::vector<float>>::vector((_QWORD *)v95 + 10, v101, (uint64_t)buf);
          if (*(_QWORD *)buf)
          {
            *(_QWORD *)&buf[8] = *(_QWORD *)buf;
            operator delete(*(void **)buf);
          }
          v102 = *v95;
          std::vector<float>::vector(v127, v95[1]);
          std::vector<std::vector<float>>::vector(buf, v102, (uint64_t)v127);
          std::vector<std::vector<std::vector<float>>>::vector((_QWORD *)v95 + 13, v102, (uint64_t *)buf);
          __A = (void **)buf;
          std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&__A);
          if (*(_QWORD *)v127)
          {
            v128 = *(_QWORD *)v127;
            operator delete(*(void **)v127);
          }
          v103 = *v95;
          std::vector<float>::vector(v127, v95[1]);
          std::vector<std::vector<float>>::vector(buf, v103, (uint64_t)v127);
          std::vector<std::vector<std::vector<float>>>::vector((_QWORD *)v95 + 16, v103, (uint64_t *)buf);
          __A = (void **)buf;
          std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&__A);
          if (*(_QWORD *)v127)
          {
            v128 = *(_QWORD *)v127;
            operator delete(*(void **)v127);
          }
          v104 = *v95;
          std::vector<DSPSplitComplex>::vector(buf, v104);
          std::vector<std::vector<DSPSplitComplex>>::vector((_QWORD *)v95 + 19, v104, (uint64_t)buf);
          if (*(_QWORD *)buf)
          {
            *(_QWORD *)&buf[8] = *(_QWORD *)buf;
            operator delete(*(void **)buf);
          }
          std::vector<float>::vector((_QWORD *)v95 + 22, v95[2]);
          std::vector<float>::vector((_QWORD *)v95 + 25, v95[2]);
          std::vector<DSPSplitComplex>::vector((_QWORD *)v95 + 28, *v95);
          std::vector<float>::vector((_QWORD *)v95 + 31, v95[1]);
          std::vector<float>::vector((_QWORD *)v95 + 34, v95[1]);
          std::vector<float>::vector((_QWORD *)v95 + 37, v95[1]);
          std::vector<float>::vector((_QWORD *)v95 + 40, v95[1]);
          std::vector<float>::vector((_QWORD *)v95 + 43, v95[1]);
          v105 = *((_QWORD *)v95 + 43);
          *((_QWORD *)v95 + 46) = *((_QWORD *)v95 + 40);
          *((_QWORD *)v95 + 47) = v105;
          v106 = *v95;
          if ((_DWORD)v106)
          {
            v107 = 0;
            v108 = *((_QWORD *)v95 + 13);
            v109 = *((_QWORD *)v95 + 19);
            v110 = *((_QWORD *)v95 + 16);
            v111 = v95[1];
            v112 = *((_QWORD *)v95 + 22);
            v113 = *((_QWORD *)v95 + 28);
            v114 = *((_QWORD *)v95 + 25);
            do
            {
              v115 = *(uint64_t **)(v108 + 24 * v107);
              v116 = *(uint64_t **)(v110 + 24 * v107);
              v117 = (_QWORD *)(*(_QWORD *)(v109 + 24 * v107) + 8);
              v118 = v106;
              do
              {
                v119 = *v115;
                v115 += 3;
                *(v117 - 1) = v119;
                v120 = *v116;
                v116 += 3;
                *v117 = v120;
                v117 += 2;
                --v118;
              }
              while (v118);
              v121 = (_QWORD *)(v113 + 16 * v107);
              *v121 = v112 + 4 * v111 * v107;
              v121[1] = v114 + 4 * v111 * v107++;
            }
            while (v107 != v106);
          }
          InverseWithGramSchmidt::cleanup((InverseWithGramSchmidt *)v95);
          std::unique_ptr<InverseWithGramSchmidt>::reset[abi:ne180100]((_QWORD *)v56 + 65, (uint64_t)v95);
        }
      }
      else
      {
        v89 = operator new();
        v90 = *v56;
        v91 = v56[1];
        v92 = v91 * v90 * v90;
        *(_DWORD *)buf = 0;
        std::vector<float>::vector((_QWORD *)v89, (2 * v92), buf);
        *(_DWORD *)(v89 + 24) = v90;
        *(_DWORD *)(v89 + 28) = v91;
        *(_DWORD *)(v89 + 32) = v91 * v90;
        *(_DWORD *)(v89 + 36) = v92;
        bzero((void *)(v89 + 40), 0x220uLL);
        CLiteMatrix::CLiteMatrix((CLiteMatrix *)(v89 + 584), v90, v90);
        CLiteMatrix::CLiteMatrix((CLiteMatrix *)(v89 + 624), v90, v90);
        if (getMatrixUtilityLog(void)::onceToken != -1)
          dispatch_once(&getMatrixUtilityLog(void)::onceToken, &__block_literal_global_10401);
        v93 = getMatrixUtilityLog(void)::gLog;
        if (os_log_type_enabled((os_log_t)getMatrixUtilityLog(void)::gLog, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)buf = 134218496;
          *(_QWORD *)&buf[4] = v89;
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = v90;
          v131 = 1024;
          v132 = v91;
          _os_log_debug_impl(&dword_1B5ED0000, v93, OS_LOG_TYPE_DEBUG, "[%p] will construct with M=%u, K=%u", buf, 0x18u);
        }
        MoorePenrose::setMandN((MoorePenrose *)(v89 + 40), *(unsigned int *)(v89 + 24), *(unsigned int *)(v89 + 24));
        if (getMatrixUtilityLog(void)::onceToken != -1)
          dispatch_once(&getMatrixUtilityLog(void)::onceToken, &__block_literal_global_10401);
        v94 = getMatrixUtilityLog(void)::gLog;
        if (os_log_type_enabled((os_log_t)getMatrixUtilityLog(void)::gLog, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)buf = 134217984;
          *(_QWORD *)&buf[4] = v89;
          _os_log_debug_impl(&dword_1B5ED0000, v94, OS_LOG_TYPE_DEBUG, "[%p] successfully constructed", buf, 0xCu);
        }
        std::unique_ptr<InverseWithMoorePenrose>::reset[abi:ne180100]((uint64_t *)v56 + 63, v89);
      }
      GuidedMWF::InitializeMultiChannelFilter((float **)v56);
      if (AUDenoiseLogScope(void)::once != -1)
        dispatch_once(&AUDenoiseLogScope(void)::once, &__block_literal_global_21398);
      if (AUDenoiseLogScope(void)::scope)
      {
        v122 = *(NSObject **)AUDenoiseLogScope(void)::scope;
        if (!*(_QWORD *)AUDenoiseLogScope(void)::scope)
          goto LABEL_105;
      }
      else
      {
        v122 = MEMORY[0x1E0C81028];
      }
      if (os_log_type_enabled(v122, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 136315394;
        *(_QWORD *)&buf[4] = "GuidedMWF.cpp";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 137;
        _os_log_impl(&dword_1B5ED0000, v122, OS_LOG_TYPE_DEBUG, "%25s:%-5d initialized\n", buf, 0x12u);
      }
LABEL_105:
      std::unique_ptr<GuidedMWF>::reset[abi:ne180100]((_QWORD *)this + 145, (uint64_t)v56);
LABEL_106:
      *((_QWORD *)this + 148) = *((_QWORD *)this + 147);
      std::vector<float>::resize((uint64_t)this + 1176, (*((_DWORD *)this + 154) + 1));
      *((_QWORD *)this + 151) = *((_QWORD *)this + 150);
      std::vector<float>::resize((uint64_t)this + 1200, (*((_DWORD *)this + 154) + 1));
      *((_QWORD *)this + 154) = *((_QWORD *)this + 153);
      std::vector<float>::resize((uint64_t)this + 1224, ((2 * *((_DWORD *)this + 154) + 2) * *((_DWORD *)this + 158)));
      *((_OWORD *)this + 40) = 0u;
      return;
    default:
      goto LABEL_106;
  }
}

void sub_1B6371294(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12, void **a13, void **a14, uint64_t a15, uint64_t a16, uint64_t a17, void **a18, void **a19, void **a20,void **a21,void **a22,void **a23,void **a24,void **a25,void **a26,void **a27,void **a28,void **a29,void **a30,void **a31,void **a32,uint64_t *a33,_QWORD *a34,uint64_t *a35,void **a36,void **a37,void **a38,void **a39)
{
  _QWORD *v39;
  void **v40;
  void **v41;
  void **v42;
  uint64_t v43;
  void **v44;
  void **v45;
  _QWORD *v46;
  void **v47;
  uint64_t v48;
  void *v50;
  void *v51;
  void *v52;
  void *v53;
  void *v54;
  void *v55;
  void *v56;
  void *v57;
  void *v58;
  void *v59;
  void *v60;
  void *v61;
  void *v62;
  void *v63;
  void *v64;
  void *v65;
  void *v66;
  void *v67;
  void *v68;
  void *v69;
  void *v70;
  void *v71;
  void *v72;
  void *v73;
  void *v74;
  void *v75;

  v50 = *v47;
  if (*v47)
  {
    v46[44] = v50;
    operator delete(v50);
  }
  v51 = *v45;
  if (*v45)
  {
    v46[41] = v51;
    operator delete(v51);
  }
  v52 = *v44;
  if (*v44)
  {
    v46[38] = v52;
    operator delete(v52);
  }
  v53 = *v40;
  if (*v40)
  {
    v46[35] = v53;
    operator delete(v53);
  }
  v54 = *a12;
  if (*a12)
  {
    v46[32] = v54;
    operator delete(v54);
  }
  v55 = *v41;
  if (*v41)
  {
    v46[29] = v55;
    operator delete(v55);
  }
  v56 = *a13;
  if (*a13)
  {
    v46[26] = v56;
    operator delete(v56);
  }
  v57 = *a14;
  if (*a14)
  {
    v46[23] = v57;
    operator delete(v57);
  }
  *(_QWORD *)(v48 - 192) = v43;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v48 - 192));
  *(_QWORD *)(v48 - 192) = a15;
  std::vector<std::vector<std::vector<DspLib::Biquad::Section>>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v48 - 192));
  *(_QWORD *)(v48 - 192) = a16;
  std::vector<std::vector<std::vector<DspLib::Biquad::Section>>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v48 - 192));
  *(_QWORD *)(v48 - 192) = a17;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v48 - 192));
  if (*a18)
    operator delete(*a18);
  v58 = *a19;
  if (*a19)
  {
    v46[4] = v58;
    operator delete(v58);
  }
  MEMORY[0x1BCC95CEC](v46, 0x10B0C400BE2CFE6);
  std::unique_ptr<InverseWithGramSchmidt>::reset[abi:ne180100](a34, 0);
  std::unique_ptr<InverseWithHRLS>::reset[abi:ne180100](a33, 0);
  std::unique_ptr<InverseWithMoorePenrose>::reset[abi:ne180100](a35, 0);
  if (*a20)
    operator delete(*a20);
  v59 = *a21;
  if (*a21)
  {
    v39[57] = v59;
    operator delete(v59);
  }
  v60 = *a22;
  if (*a22)
  {
    v39[54] = v60;
    operator delete(v60);
  }
  v61 = *a23;
  if (*a23)
  {
    v39[51] = v61;
    operator delete(v61);
  }
  v62 = *a36;
  if (*a36)
  {
    v39[48] = v62;
    operator delete(v62);
  }
  v63 = *a37;
  if (*a37)
  {
    v39[45] = v63;
    operator delete(v63);
  }
  v64 = *a24;
  if (*a24)
  {
    v39[42] = v64;
    operator delete(v64);
  }
  v65 = *a25;
  if (*a25)
  {
    v39[39] = v65;
    operator delete(v65);
  }
  v66 = *a26;
  if (*a26)
  {
    v39[36] = v66;
    operator delete(v66);
  }
  v67 = *a27;
  if (*a27)
  {
    v39[33] = v67;
    operator delete(v67);
  }
  v68 = *a28;
  if (*a28)
  {
    v39[30] = v68;
    operator delete(v68);
  }
  v69 = *a29;
  if (*a29)
  {
    v39[27] = v69;
    operator delete(v69);
  }
  v70 = *a30;
  if (*a30)
  {
    v39[24] = v70;
    operator delete(v70);
  }
  v71 = *a31;
  if (*a31)
  {
    v39[21] = v71;
    operator delete(v71);
  }
  v72 = *a32;
  if (*a32)
  {
    v39[18] = v72;
    operator delete(v72);
  }
  v73 = *v42;
  if (*v42)
  {
    v39[15] = v73;
    operator delete(v73);
  }
  v74 = *a38;
  if (*a38)
  {
    v39[12] = v74;
    operator delete(v74);
  }
  v75 = *a39;
  if (*a39)
  {
    v39[9] = v75;
    operator delete(v75);
  }
  MEMORY[0x1BCC95CEC](v39, 0x10B0C40D44E31FDLL);
  _Unwind_Resume(a1);
}

uint64_t *std::unique_ptr<PMWF_FAST_GS_vDSP>::reset[abi:ne180100](uint64_t *result, uint64_t a2)
{
  uint64_t v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  void *v31;
  void *v32;
  void *v33;
  void *v34;
  void *v35;
  void *v36;
  void *v37;
  void *v38;
  void *v39;
  void *v40;
  void *v41;
  void *v42;
  void *v43;
  void *v44;
  void *v45;
  void *v46;
  void *v47;
  void *v48;
  void *v49;
  void **v50;

  v2 = *result;
  *result = a2;
  if (v2)
  {
    v3 = *(void **)(v2 + 1496);
    if (v3)
    {
      *(_QWORD *)(v2 + 1504) = v3;
      operator delete(v3);
    }
    v4 = *(void **)(v2 + 1472);
    if (v4)
    {
      *(_QWORD *)(v2 + 1480) = v4;
      operator delete(v4);
    }
    v5 = *(void **)(v2 + 1448);
    if (v5)
    {
      *(_QWORD *)(v2 + 1456) = v5;
      operator delete(v5);
    }
    v6 = *(void **)(v2 + 1424);
    if (v6)
    {
      *(_QWORD *)(v2 + 1432) = v6;
      operator delete(v6);
    }
    v7 = *(void **)(v2 + 1400);
    if (v7)
    {
      *(_QWORD *)(v2 + 1408) = v7;
      operator delete(v7);
    }
    v8 = *(void **)(v2 + 1376);
    if (v8)
    {
      *(_QWORD *)(v2 + 1384) = v8;
      operator delete(v8);
    }
    v9 = *(void **)(v2 + 1352);
    if (v9)
    {
      *(_QWORD *)(v2 + 1360) = v9;
      operator delete(v9);
    }
    v10 = *(void **)(v2 + 1328);
    if (v10)
    {
      *(_QWORD *)(v2 + 1336) = v10;
      operator delete(v10);
    }
    v11 = *(void **)(v2 + 1304);
    if (v11)
    {
      *(_QWORD *)(v2 + 1312) = v11;
      operator delete(v11);
    }
    v12 = *(void **)(v2 + 1280);
    if (v12)
    {
      *(_QWORD *)(v2 + 1288) = v12;
      operator delete(v12);
    }
    v13 = *(void **)(v2 + 1256);
    if (v13)
    {
      *(_QWORD *)(v2 + 1264) = v13;
      operator delete(v13);
    }
    v14 = *(void **)(v2 + 1232);
    if (v14)
    {
      *(_QWORD *)(v2 + 1240) = v14;
      operator delete(v14);
    }
    v15 = *(void **)(v2 + 1208);
    if (v15)
    {
      *(_QWORD *)(v2 + 1216) = v15;
      operator delete(v15);
    }
    v16 = *(void **)(v2 + 1184);
    if (v16)
    {
      *(_QWORD *)(v2 + 1192) = v16;
      operator delete(v16);
    }
    v17 = *(void **)(v2 + 1160);
    if (v17)
    {
      *(_QWORD *)(v2 + 1168) = v17;
      operator delete(v17);
    }
    v18 = *(void **)(v2 + 1136);
    if (v18)
    {
      *(_QWORD *)(v2 + 1144) = v18;
      operator delete(v18);
    }
    v19 = *(void **)(v2 + 1112);
    if (v19)
    {
      *(_QWORD *)(v2 + 1120) = v19;
      operator delete(v19);
    }
    v20 = *(void **)(v2 + 1088);
    if (v20)
    {
      *(_QWORD *)(v2 + 1096) = v20;
      operator delete(v20);
    }
    v21 = *(void **)(v2 + 1064);
    if (v21)
    {
      *(_QWORD *)(v2 + 1072) = v21;
      operator delete(v21);
    }
    v22 = *(void **)(v2 + 1040);
    if (v22)
    {
      *(_QWORD *)(v2 + 1048) = v22;
      operator delete(v22);
    }
    v23 = *(void **)(v2 + 1016);
    if (v23)
    {
      *(_QWORD *)(v2 + 1024) = v23;
      operator delete(v23);
    }
    v24 = *(void **)(v2 + 992);
    if (v24)
    {
      *(_QWORD *)(v2 + 1000) = v24;
      operator delete(v24);
    }
    v25 = *(void **)(v2 + 968);
    if (v25)
    {
      *(_QWORD *)(v2 + 976) = v25;
      operator delete(v25);
    }
    v26 = *(void **)(v2 + 928);
    if (v26)
    {
      *(_QWORD *)(v2 + 936) = v26;
      operator delete(v26);
    }
    v27 = *(void **)(v2 + 904);
    if (v27)
    {
      *(_QWORD *)(v2 + 912) = v27;
      operator delete(v27);
    }
    v28 = *(void **)(v2 + 880);
    if (v28)
    {
      *(_QWORD *)(v2 + 888) = v28;
      operator delete(v28);
    }
    v29 = *(void **)(v2 + 856);
    if (v29)
    {
      *(_QWORD *)(v2 + 864) = v29;
      operator delete(v29);
    }
    v30 = *(void **)(v2 + 832);
    if (v30)
    {
      *(_QWORD *)(v2 + 840) = v30;
      operator delete(v30);
    }
    v31 = *(void **)(v2 + 808);
    if (v31)
    {
      *(_QWORD *)(v2 + 816) = v31;
      operator delete(v31);
    }
    v32 = *(void **)(v2 + 784);
    if (v32)
    {
      *(_QWORD *)(v2 + 792) = v32;
      operator delete(v32);
    }
    v33 = *(void **)(v2 + 760);
    if (v33)
    {
      *(_QWORD *)(v2 + 768) = v33;
      operator delete(v33);
    }
    v34 = *(void **)(v2 + 736);
    if (v34)
    {
      *(_QWORD *)(v2 + 744) = v34;
      operator delete(v34);
    }
    v35 = *(void **)(v2 + 712);
    if (v35)
    {
      *(_QWORD *)(v2 + 720) = v35;
      operator delete(v35);
    }
    v36 = *(void **)(v2 + 688);
    if (v36)
    {
      *(_QWORD *)(v2 + 696) = v36;
      operator delete(v36);
    }
    v37 = *(void **)(v2 + 664);
    if (v37)
    {
      *(_QWORD *)(v2 + 672) = v37;
      operator delete(v37);
    }
    v38 = *(void **)(v2 + 640);
    if (v38)
    {
      *(_QWORD *)(v2 + 648) = v38;
      operator delete(v38);
    }
    v39 = *(void **)(v2 + 616);
    if (v39)
    {
      *(_QWORD *)(v2 + 624) = v39;
      operator delete(v39);
    }
    v40 = *(void **)(v2 + 592);
    if (v40)
    {
      *(_QWORD *)(v2 + 600) = v40;
      operator delete(v40);
    }
    v41 = *(void **)(v2 + 568);
    if (v41)
    {
      *(_QWORD *)(v2 + 576) = v41;
      operator delete(v41);
    }
    v42 = *(void **)(v2 + 544);
    if (v42)
    {
      *(_QWORD *)(v2 + 552) = v42;
      operator delete(v42);
    }
    v43 = *(void **)(v2 + 520);
    if (v43)
    {
      *(_QWORD *)(v2 + 528) = v43;
      operator delete(v43);
    }
    v44 = *(void **)(v2 + 496);
    if (v44)
    {
      *(_QWORD *)(v2 + 504) = v44;
      operator delete(v44);
    }
    v45 = *(void **)(v2 + 472);
    if (v45)
    {
      *(_QWORD *)(v2 + 480) = v45;
      operator delete(v45);
    }
    v46 = *(void **)(v2 + 448);
    if (v46)
    {
      *(_QWORD *)(v2 + 456) = v46;
      operator delete(v46);
    }
    v47 = *(void **)(v2 + 416);
    if (v47)
    {
      *(_QWORD *)(v2 + 424) = v47;
      operator delete(v47);
    }
    v48 = *(void **)(v2 + 392);
    if (v48)
    {
      *(_QWORD *)(v2 + 400) = v48;
      operator delete(v48);
    }
    v50 = (void **)(v2 + 368);
    std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v50);
    v50 = (void **)(v2 + 344);
    std::vector<std::vector<std::vector<DspLib::Biquad::Section>>>::__destroy_vector::operator()[abi:ne180100](&v50);
    v50 = (void **)(v2 + 320);
    std::vector<std::vector<std::vector<DspLib::Biquad::Section>>>::__destroy_vector::operator()[abi:ne180100](&v50);
    v50 = (void **)(v2 + 296);
    std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v50);
    v50 = (void **)(v2 + 272);
    std::vector<std::vector<std::vector<DspLib::Biquad::Section>>>::__destroy_vector::operator()[abi:ne180100](&v50);
    v50 = (void **)(v2 + 248);
    std::vector<std::vector<std::vector<DspLib::Biquad::Section>>>::__destroy_vector::operator()[abi:ne180100](&v50);
    v50 = (void **)(v2 + 224);
    std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v50);
    v50 = (void **)(v2 + 200);
    std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v50);
    v49 = *(void **)(v2 + 176);
    if (v49)
      operator delete(v49);
    JUMPOUT(0x1BCC95CECLL);
  }
  return result;
}

_QWORD *std::unique_ptr<iPMWF_HRLS_vDSP>::reset[abi:ne180100](_QWORD *result, uint64_t a2)
{
  _QWORD *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  void *v31;

  v2 = (_QWORD *)*result;
  *result = a2;
  if (v2)
  {
    v3 = (void *)v2[102];
    if (v3)
    {
      v2[103] = v3;
      operator delete(v3);
    }
    v4 = (void *)v2[99];
    if (v4)
    {
      v2[100] = v4;
      operator delete(v4);
    }
    v5 = (void *)v2[96];
    if (v5)
    {
      v2[97] = v5;
      operator delete(v5);
    }
    v6 = (void *)v2[93];
    if (v6)
    {
      v2[94] = v6;
      operator delete(v6);
    }
    v7 = (void *)v2[90];
    if (v7)
    {
      v2[91] = v7;
      operator delete(v7);
    }
    v8 = (void *)v2[87];
    if (v8)
    {
      v2[88] = v8;
      operator delete(v8);
    }
    v9 = (void *)v2[84];
    if (v9)
    {
      v2[85] = v9;
      operator delete(v9);
    }
    v10 = (void *)v2[81];
    if (v10)
    {
      v2[82] = v10;
      operator delete(v10);
    }
    v11 = (void *)v2[78];
    if (v11)
    {
      v2[79] = v11;
      operator delete(v11);
    }
    v12 = (void *)v2[75];
    if (v12)
    {
      v2[76] = v12;
      operator delete(v12);
    }
    v13 = (void *)v2[72];
    if (v13)
    {
      v2[73] = v13;
      operator delete(v13);
    }
    v14 = (void *)v2[69];
    if (v14)
    {
      v2[70] = v14;
      operator delete(v14);
    }
    v15 = (void *)v2[66];
    if (v15)
    {
      v2[67] = v15;
      operator delete(v15);
    }
    v16 = (void *)v2[63];
    if (v16)
    {
      v2[64] = v16;
      operator delete(v16);
    }
    v17 = (void *)v2[60];
    if (v17)
    {
      v2[61] = v17;
      operator delete(v17);
    }
    v18 = (void *)v2[57];
    if (v18)
    {
      v2[58] = v18;
      operator delete(v18);
    }
    v19 = (void *)v2[54];
    if (v19)
    {
      v2[55] = v19;
      operator delete(v19);
    }
    v20 = (void *)v2[51];
    if (v20)
    {
      v2[52] = v20;
      operator delete(v20);
    }
    v21 = (void *)v2[48];
    if (v21)
    {
      v2[49] = v21;
      operator delete(v21);
    }
    v22 = (void *)v2[45];
    if (v22)
    {
      v2[46] = v22;
      operator delete(v22);
    }
    v23 = (void *)v2[42];
    if (v23)
    {
      v2[43] = v23;
      operator delete(v23);
    }
    v24 = (void *)v2[39];
    if (v24)
    {
      v2[40] = v24;
      operator delete(v24);
    }
    v25 = (void *)v2[36];
    if (v25)
    {
      v2[37] = v25;
      operator delete(v25);
    }
    v26 = (void *)v2[33];
    if (v26)
    {
      v2[34] = v26;
      operator delete(v26);
    }
    v27 = (void *)v2[30];
    if (v27)
    {
      v2[31] = v27;
      operator delete(v27);
    }
    v28 = (void *)v2[27];
    if (v28)
    {
      v2[28] = v28;
      operator delete(v28);
    }
    v29 = (void *)v2[24];
    if (v29)
    {
      v2[25] = v29;
      operator delete(v29);
    }
    v30 = (void *)v2[21];
    if (v30)
    {
      v2[22] = v30;
      operator delete(v30);
    }
    v31 = (void *)v2[18];
    if (v31)
    {
      v2[19] = v31;
      operator delete(v31);
    }
    JUMPOUT(0x1BCC95CECLL);
  }
  return result;
}

_QWORD *std::unique_ptr<GuidedMWF>::reset[abi:ne180100](_QWORD *result, uint64_t a2)
{
  _QWORD *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;

  v2 = (_QWORD *)*result;
  *result = a2;
  if (v2)
  {
    std::unique_ptr<InverseWithGramSchmidt>::reset[abi:ne180100](v2 + 65, 0);
    std::unique_ptr<InverseWithHRLS>::reset[abi:ne180100](v2 + 64, 0);
    std::unique_ptr<InverseWithMoorePenrose>::reset[abi:ne180100](v2 + 63, 0);
    v3 = (void *)v2[60];
    if (v3)
      operator delete(v3);
    v4 = (void *)v2[56];
    if (v4)
    {
      v2[57] = v4;
      operator delete(v4);
    }
    v5 = (void *)v2[53];
    if (v5)
    {
      v2[54] = v5;
      operator delete(v5);
    }
    v6 = (void *)v2[50];
    if (v6)
    {
      v2[51] = v6;
      operator delete(v6);
    }
    v7 = (void *)v2[47];
    if (v7)
    {
      v2[48] = v7;
      operator delete(v7);
    }
    v8 = (void *)v2[44];
    if (v8)
    {
      v2[45] = v8;
      operator delete(v8);
    }
    v9 = (void *)v2[41];
    if (v9)
    {
      v2[42] = v9;
      operator delete(v9);
    }
    v10 = (void *)v2[38];
    if (v10)
    {
      v2[39] = v10;
      operator delete(v10);
    }
    v11 = (void *)v2[35];
    if (v11)
    {
      v2[36] = v11;
      operator delete(v11);
    }
    v12 = (void *)v2[32];
    if (v12)
    {
      v2[33] = v12;
      operator delete(v12);
    }
    v13 = (void *)v2[29];
    if (v13)
    {
      v2[30] = v13;
      operator delete(v13);
    }
    v14 = (void *)v2[26];
    if (v14)
    {
      v2[27] = v14;
      operator delete(v14);
    }
    v15 = (void *)v2[23];
    if (v15)
    {
      v2[24] = v15;
      operator delete(v15);
    }
    v16 = (void *)v2[20];
    if (v16)
    {
      v2[21] = v16;
      operator delete(v16);
    }
    v17 = (void *)v2[17];
    if (v17)
    {
      v2[18] = v17;
      operator delete(v17);
    }
    v18 = (void *)v2[14];
    if (v18)
    {
      v2[15] = v18;
      operator delete(v18);
    }
    v19 = (void *)v2[11];
    if (v19)
    {
      v2[12] = v19;
      operator delete(v19);
    }
    v20 = (void *)v2[8];
    if (v20)
    {
      v2[9] = v20;
      operator delete(v20);
    }
    JUMPOUT(0x1BCC95CECLL);
  }
  return result;
}

_QWORD *std::unique_ptr<InverseWithGramSchmidt>::reset[abi:ne180100](_QWORD *result, uint64_t a2)
{
  _QWORD *v2;
  NSObject *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  _BYTE v14[24];
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v2 = (_QWORD *)*result;
  *result = a2;
  if (v2)
  {
    if (getMatrixUtilityLog(void)::onceToken != -1)
      dispatch_once(&getMatrixUtilityLog(void)::onceToken, &__block_literal_global_24323);
    v3 = getMatrixUtilityLog(void)::gLog;
    if (os_log_type_enabled((os_log_t)getMatrixUtilityLog(void)::gLog, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)v14 = 134217984;
      *(_QWORD *)&v14[4] = v2;
      _os_log_debug_impl(&dword_1B5ED0000, v3, OS_LOG_TYPE_DEBUG, "[%p] destructed", v14, 0xCu);
    }
    v4 = (void *)v2[43];
    if (v4)
    {
      v2[44] = v4;
      operator delete(v4);
    }
    v5 = (void *)v2[40];
    if (v5)
    {
      v2[41] = v5;
      operator delete(v5);
    }
    v6 = (void *)v2[37];
    if (v6)
    {
      v2[38] = v6;
      operator delete(v6);
    }
    v7 = (void *)v2[34];
    if (v7)
    {
      v2[35] = v7;
      operator delete(v7);
    }
    v8 = (void *)v2[31];
    if (v8)
    {
      v2[32] = v8;
      operator delete(v8);
    }
    v9 = (void *)v2[28];
    if (v9)
    {
      v2[29] = v9;
      operator delete(v9);
    }
    v10 = (void *)v2[25];
    if (v10)
    {
      v2[26] = v10;
      operator delete(v10);
    }
    v11 = (void *)v2[22];
    if (v11)
    {
      v2[23] = v11;
      operator delete(v11);
    }
    *(_QWORD *)v14 = v2 + 19;
    std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)v14);
    *(_QWORD *)v14 = v2 + 16;
    std::vector<std::vector<std::vector<DspLib::Biquad::Section>>>::__destroy_vector::operator()[abi:ne180100]((void ***)v14);
    *(_QWORD *)v14 = v2 + 13;
    std::vector<std::vector<std::vector<DspLib::Biquad::Section>>>::__destroy_vector::operator()[abi:ne180100]((void ***)v14);
    *(_QWORD *)v14 = v2 + 10;
    std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)v14);
    v12 = (void *)v2[7];
    if (v12)
      operator delete(v12);
    v13 = (void *)v2[3];
    if (v13)
    {
      v2[4] = v13;
      operator delete(v13);
    }
    JUMPOUT(0x1BCC95CECLL);
  }
  return result;
}

uint64_t *std::unique_ptr<InverseWithHRLS>::reset[abi:ne180100](uint64_t *result, uint64_t a2)
{
  uint64_t v2;
  NSObject *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  int v12;
  uint64_t v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v2 = *result;
  *result = a2;
  if (v2)
  {
    if (getMatrixUtilityLog(void)::onceToken != -1)
      dispatch_once(&getMatrixUtilityLog(void)::onceToken, &__block_literal_global_8252);
    v3 = getMatrixUtilityLog(void)::gLog;
    if (os_log_type_enabled((os_log_t)getMatrixUtilityLog(void)::gLog, OS_LOG_TYPE_DEBUG))
    {
      v12 = 134217984;
      v13 = v2;
      _os_log_debug_impl(&dword_1B5ED0000, v3, OS_LOG_TYPE_DEBUG, "[%p] destructed", (uint8_t *)&v12, 0xCu);
    }
    v4 = *(void **)(v2 + 168);
    if (v4)
    {
      *(_QWORD *)(v2 + 176) = v4;
      operator delete(v4);
    }
    v5 = *(void **)(v2 + 144);
    if (v5)
    {
      *(_QWORD *)(v2 + 152) = v5;
      operator delete(v5);
    }
    v6 = *(void **)(v2 + 120);
    if (v6)
    {
      *(_QWORD *)(v2 + 128) = v6;
      operator delete(v6);
    }
    v7 = *(void **)(v2 + 96);
    if (v7)
    {
      *(_QWORD *)(v2 + 104) = v7;
      operator delete(v7);
    }
    v8 = *(void **)(v2 + 72);
    if (v8)
    {
      *(_QWORD *)(v2 + 80) = v8;
      operator delete(v8);
    }
    v9 = *(void **)(v2 + 48);
    if (v9)
    {
      *(_QWORD *)(v2 + 56) = v9;
      operator delete(v9);
    }
    v10 = *(void **)(v2 + 24);
    if (v10)
    {
      *(_QWORD *)(v2 + 32) = v10;
      operator delete(v10);
    }
    v11 = *(void **)v2;
    if (*(_QWORD *)v2)
    {
      *(_QWORD *)(v2 + 8) = v11;
      operator delete(v11);
    }
    JUMPOUT(0x1BCC95CECLL);
  }
  return result;
}

uint64_t *std::unique_ptr<InverseWithMoorePenrose>::reset[abi:ne180100](uint64_t *result, uint64_t a2)
{
  uint64_t v2;
  NSObject *v3;
  void *v4;
  void *v5;
  void *v6;
  int v7;
  uint64_t v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  v2 = *result;
  *result = a2;
  if (v2)
  {
    if (getMatrixUtilityLog(void)::onceToken != -1)
      dispatch_once(&getMatrixUtilityLog(void)::onceToken, &__block_literal_global_10401);
    v3 = getMatrixUtilityLog(void)::gLog;
    if (os_log_type_enabled((os_log_t)getMatrixUtilityLog(void)::gLog, OS_LOG_TYPE_DEBUG))
    {
      v7 = 134217984;
      v8 = v2;
      _os_log_debug_impl(&dword_1B5ED0000, v3, OS_LOG_TYPE_DEBUG, "[%p] destructed", (uint8_t *)&v7, 0xCu);
    }
    v4 = *(void **)(v2 + 640);
    if (v4)
    {
      *(_QWORD *)(v2 + 648) = v4;
      operator delete(v4);
    }
    v5 = *(void **)(v2 + 600);
    if (v5)
    {
      *(_QWORD *)(v2 + 608) = v5;
      operator delete(v5);
    }
    MoorePenrose::~MoorePenrose((MoorePenrose *)(v2 + 40));
    v6 = *(void **)v2;
    if (*(_QWORD *)v2)
    {
      *(_QWORD *)(v2 + 8) = v6;
      operator delete(v6);
    }
    JUMPOUT(0x1BCC95CECLL);
  }
  return result;
}

uint64_t std::default_delete<PMWFStvPlistHolder>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v2;
  void **v4;

  v2 = *(_QWORD *)(a1 + 64);
  *(_QWORD *)(a1 + 64) = 0;
  if (v2)
    MEMORY[0x1BCC95CEC](v2, 0x60C4044C4A2DFLL);
  v4 = (void **)(a1 + 24);
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v4);
  v4 = (void **)a1;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v4);
  return MEMORY[0x1BCC95CEC](a1, 0x1020C40A98CFEF5);
}

void AUCircArray::~AUCircArray(AUCircArray *this)
{
  AUCircArray::~AUCircArray(this);
  JUMPOUT(0x1BCC95CE0);
}

{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  *(_QWORD *)this = &off_1E69D6418;
  CACFArray::~CACFArray((AUCircArray *)((char *)this + 2968));
  CACFString::~CACFString((AUCircArray *)((char *)this + 2952));
  CACFArray::~CACFArray((AUCircArray *)((char *)this + 2936));
  CACFArray::~CACFArray((AUCircArray *)((char *)this + 2920));
  CACFArray::~CACFArray((AUCircArray *)((char *)this + 2904));
  CACFArray::~CACFArray((AUCircArray *)((char *)this + 2888));
  CACFArray::~CACFArray((AUCircArray *)((char *)this + 2872));
  CACFArray::~CACFArray((AUCircArray *)((char *)this + 2856));
  CACFArray::~CACFArray((AUCircArray *)((char *)this + 2840));
  CACFArray::~CACFArray((AUCircArray *)((char *)this + 2824));
  CACFDictionary::~CACFDictionary((AUCircArray *)((char *)this + 2808));
  v2 = (void *)*((_QWORD *)this + 348);
  if (v2)
  {
    *((_QWORD *)this + 349) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 345);
  if (v3)
  {
    *((_QWORD *)this + 346) = v3;
    operator delete(v3);
  }
  std::unique_ptr<CircArrayKernel>::reset[abi:ne180100]((CircArrayKernel **)this + 344, 0);
  *((_QWORD *)this + 80) = &off_1E69D66D8;
  ca::concurrent::deferred_deletion_queue<CircArrayKernel,10ul,std::default_delete<CircArrayKernel>>::~deferred_deletion_queue((uint64_t)this + 704);
  *(_QWORD *)this = off_1E69E6E50;
  v4 = (void *)*((_QWORD *)this + 76);
  if (v4)
  {
    *((_QWORD *)this + 77) = v4;
    operator delete(v4);
  }
  v5 = (void *)*((_QWORD *)this + 73);
  if (v5)
  {
    *((_QWORD *)this + 74) = v5;
    operator delete(v5);
  }
  v6 = (void *)*((_QWORD *)this + 70);
  if (v6)
  {
    *((_QWORD *)this + 71) = v6;
    operator delete(v6);
  }
  if (*((char *)this + 551) < 0)
    operator delete(*((void **)this + 66));
  ausdk::AUBase::~AUBase(this);
}

uint64_t AUCircArray::Initialize(AUCircArray *this)
{
  uint64_t v2;
  unsigned int v3;
  unint64_t v4;
  unint64_t v5;
  CFTypeRef cf[6];

  cf[5] = *(CFTypeRef *)MEMORY[0x1E0C80C00];
  v2 = AUJBase::Initialize(this);
  if (!(_DWORD)v2)
  {
    if (!*((_BYTE *)this + 633))
    {
      AUCircArray::CreateDefaultConfigPlist((AUCircArray *)cf, (uint64_t)this);
      AUCircArray::SetConfigPlist(this, (CFDictionaryRef)cf[0]);
      if (cf[0])
        CFRelease(cf[0]);
    }
    AUCircArray::CreateKernel((AUCircArray *)cf, (uint64_t)this);
    std::unique_ptr<CircArrayKernel>::reset[abi:ne180100]((CircArrayKernel **)this + 344, (CircArrayKernel *)cf[0]);
    if (!*((_QWORD *)this + 344))
      __assert_rtn("Initialize", "AUCircArray.mm", 82, "mActiveKernel.get()");
    v3 = *((_DWORD *)this + 746);
    *((double *)this + 374) = (double)v3
                            / *(double *)(ausdk::AUScope::SafeGetElement((AUCircArray *)((char *)this + 128), 0) + 80);
    v4 = *(unsigned int *)(ausdk::AUScope::SafeGetElement((AUCircArray *)((char *)this + 80), 0) + 108);
    cf[0] = 0;
    std::vector<float *>::assign((char **)this + 345, v4, cf);
    v5 = *(unsigned int *)(ausdk::AUScope::SafeGetElement((AUCircArray *)((char *)this + 128), 0) + 108);
    cf[0] = 0;
    std::vector<float *>::assign((char **)this + 348, v5, cf);
    (*(void (**)(AUCircArray *, _QWORD, _QWORD))(*(_QWORD *)this + 72))(this, 0, 0);
    return 0;
  }
  return v2;
}

void sub_1B6372AAC(_Unwind_Exception *exception_object, int a2)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

void sub_1B6372AC4(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, __int128 a9, __int128 a10)
{
  _DWORD *v12;
  NSObject *v13;
  NSObject *v14;
  NSObject *v15;
  _BOOL4 v16;
  int v17;
  int *v18;
  int *v19;
  NSObject *v20;
  NSObject *v21;
  int v22;
  NSObject *v23;
  NSObject *v24;

  if (a2)
  {
    applesauce::CF::DictionaryRef::~DictionaryRef((const void **)&a9);
    if (a2 == 3)
    {
      v12 = __cxa_begin_catch(a1);
      if (AUJBase::AUJBaseLogScope(void)::once != -1)
        dispatch_once(&AUJBase::AUJBaseLogScope(void)::once, &__block_literal_global_20859);
      CALog::LogObjIfEnabled((id *)AUJBase::AUJBaseLogScope(void)::scope);
      v13 = objc_claimAutoreleasedReturnValue();
      v14 = v13;
      if (v13)
      {
        v15 = v13;
        v16 = os_log_type_enabled(v13, OS_LOG_TYPE_ERROR);
        v14 = v15;
        if (v16)
        {
          v17 = v12[66];
          LODWORD(a9) = 136315906;
          *(_QWORD *)((char *)&a9 + 4) = "AUCircArray.mm";
          WORD6(a9) = 1024;
          *(_DWORD *)((char *)&a9 + 14) = 90;
          WORD1(a10) = 2080;
          *(_QWORD *)((char *)&a10 + 4) = v12 + 2;
          WORD6(a10) = 1024;
          *(_DWORD *)((char *)&a10 + 14) = v17;
          _os_log_impl(&dword_1B5ED0000, v15, OS_LOG_TYPE_ERROR, "%25s:%-5d CircArray Exception: %s (error = %d)\n", (uint8_t *)&a9, 0x22u);
          v14 = v15;
        }
      }

      __cxa_end_catch();
    }
    else
    {
      v18 = (int *)__cxa_begin_catch(a1);
      if (a2 == 2)
      {
        v19 = v18;
        if (AUJBase::AUJBaseLogScope(void)::once != -1)
          dispatch_once(&AUJBase::AUJBaseLogScope(void)::once, &__block_literal_global_20859);
        CALog::LogObjIfEnabled((id *)AUJBase::AUJBaseLogScope(void)::scope);
        v20 = objc_claimAutoreleasedReturnValue();
        v21 = v20;
        if (v20 && os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
        {
          v22 = *v19;
          LODWORD(a9) = 136315650;
          *(_QWORD *)((char *)&a9 + 4) = "AUCircArray.mm";
          WORD6(a9) = 1024;
          *(_DWORD *)((char *)&a9 + 14) = 104;
          WORD1(a10) = 1024;
          DWORD1(a10) = v22;
          _os_log_impl(&dword_1B5ED0000, v21, OS_LOG_TYPE_ERROR, "%25s:%-5d Unknown status thrown: %d\n", (uint8_t *)&a9, 0x18u);
        }

        __cxa_end_catch();
      }
      else
      {
        if (AUJBase::AUJBaseLogScope(void)::once != -1)
          dispatch_once(&AUJBase::AUJBaseLogScope(void)::once, &__block_literal_global_20859);
        CALog::LogObjIfEnabled((id *)AUJBase::AUJBaseLogScope(void)::scope);
        v23 = objc_claimAutoreleasedReturnValue();
        v24 = v23;
        if (v23 && os_log_type_enabled(v23, OS_LOG_TYPE_ERROR))
        {
          LODWORD(a9) = 136315394;
          *(_QWORD *)((char *)&a9 + 4) = "AUCircArray.mm";
          WORD6(a9) = 1024;
          *(_DWORD *)((char *)&a9 + 14) = 108;
          _os_log_impl(&dword_1B5ED0000, v24, OS_LOG_TYPE_ERROR, "%25s:%-5d Unknown error thrown\n", (uint8_t *)&a9, 0x12u);
        }

        __cxa_end_catch();
      }
    }
    JUMPOUT(0x1B6372A54);
  }
  JUMPOUT(0x1B6372AB4);
}

void sub_1B6372D70()
{
  JUMPOUT(0x1B6372AB4);
}

uint64_t AUCircArray::Reset(AUCircArray *this)
{
  CircArrayKernel *v1;

  v1 = (CircArrayKernel *)*((_QWORD *)this + 344);
  if (v1)
    CircArrayKernel::Reset(v1);
  return 0;
}

uint64_t AUCircArray::GetPropertyInfo(AUCircArray *this, int a2, int a3, unsigned int a4, unsigned int *a5, BOOL *a6)
{
  uint64_t result;
  BOOL v10;
  unsigned int v11;

  if (a3)
    return 4294956417;
  result = 4294956417;
  if (a2 > 1668179558)
  {
    if (a2 == 1668179559 || a2 == 1718186611)
    {
LABEL_9:
      v11 = 8;
LABEL_10:
      v10 = 1;
      goto LABEL_11;
    }
  }
  else
  {
    if ((a2 - 8800) <= 9)
    {
      if (a2 != 8803)
      {
        v10 = 0;
        v11 = 8;
LABEL_11:
        result = 0;
        *a6 = v10;
        *a5 = v11;
        return result;
      }
      goto LABEL_9;
    }
    if (a2 == 21)
    {
      if (((*(uint64_t (**)(AUCircArray *))(*(_QWORD *)this + 600))(this) & 1) == 0)
        return 4294956417;
      v11 = 4;
      goto LABEL_10;
    }
  }
  return result;
}

uint64_t AUCircArray::GetProperty(AUCircArray *this, int a2, int a3, unsigned int a4, _DWORD *a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  const void *v10;
  CFNumberRef v11;
  const void *v12;
  const void *v13;
  const void *v14;
  const void *v15;
  const void *v16;
  const void *v17;
  const void *v18;
  const void *v19;
  const void *v20;
  int valuePtr;
  uint64_t v22;
  uint64_t v23;

  if (a3)
    return 4294956417;
  v22 = v5;
  v23 = v6;
  result = 4294956417;
  if (a2 <= 1668179558)
  {
    switch(a2)
    {
      case 8800:
        v10 = (const void *)*((_QWORD *)this + 357);
        if (!v10)
          goto LABEL_31;
        CFRetain(v10);
        v11 = (CFNumberRef)*((_QWORD *)this + 357);
        goto LABEL_32;
      case 8801:
        v13 = (const void *)*((_QWORD *)this + 353);
        if (!v13)
          goto LABEL_31;
        CFRetain(v13);
        v11 = (CFNumberRef)*((_QWORD *)this + 353);
        goto LABEL_32;
      case 8802:
        v14 = (const void *)*((_QWORD *)this + 355);
        if (!v14)
          goto LABEL_31;
        CFRetain(v14);
        v11 = (CFNumberRef)*((_QWORD *)this + 355);
        goto LABEL_32;
      case 8803:
        goto LABEL_9;
      case 8804:
        v15 = (const void *)*((_QWORD *)this + 361);
        if (!v15)
          goto LABEL_31;
        CFRetain(v15);
        v11 = (CFNumberRef)*((_QWORD *)this + 361);
        goto LABEL_32;
      case 8805:
        v16 = (const void *)*((_QWORD *)this + 363);
        if (!v16)
          goto LABEL_31;
        CFRetain(v16);
        v11 = (CFNumberRef)*((_QWORD *)this + 363);
        goto LABEL_32;
      case 8806:
        v17 = (const void *)*((_QWORD *)this + 365);
        if (!v17)
          goto LABEL_31;
        CFRetain(v17);
        v11 = (CFNumberRef)*((_QWORD *)this + 365);
        goto LABEL_32;
      case 8807:
        v18 = (const void *)*((_QWORD *)this + 369);
        if (!v18)
          goto LABEL_31;
        CFRetain(v18);
        v11 = (CFNumberRef)*((_QWORD *)this + 369);
        goto LABEL_32;
      case 8808:
        valuePtr = *((_DWORD *)this + 750);
        v11 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberIntType, &valuePtr);
        goto LABEL_32;
      case 8809:
        v19 = (const void *)*((_QWORD *)this + 371);
        if (!v19)
          goto LABEL_31;
        CFRetain(v19);
        v11 = (CFNumberRef)*((_QWORD *)this + 371);
        goto LABEL_32;
      default:
        if (a2 == 21)
        {
          if ((*(unsigned int (**)(AUCircArray *))(*(_QWORD *)this + 600))(this))
          {
            result = 0;
            *a5 = *((unsigned __int8 *)this + 552);
          }
          else
          {
            return 4294956417;
          }
        }
        return result;
    }
  }
  if (a2 == 1668179559)
  {
    v20 = (const void *)*((_QWORD *)this + 351);
    if (v20)
    {
      CFRetain(v20);
      v11 = (CFNumberRef)*((_QWORD *)this + 351);
      goto LABEL_32;
    }
LABEL_31:
    v11 = 0;
    goto LABEL_32;
  }
  if (a2 != 1718186611)
    return result;
LABEL_9:
  v12 = (const void *)*((_QWORD *)this + 359);
  if (!v12)
    goto LABEL_31;
  CFRetain(v12);
  v11 = (CFNumberRef)*((_QWORD *)this + 359);
LABEL_32:
  result = 0;
  *(_QWORD *)a5 = v11;
  return result;
}

uint64_t AUCircArray::SetProperty(AUCircArray *this, int a2, int a3, int a4, CFTypeRef *a5)
{
  uint64_t v5;
  CFTypeRef v7;
  CFTypeID v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  void **v13;
  unsigned __int8 *v14;
  _BOOL4 v15;
  BOOL v16;
  const __CFDictionary *v17;
  CFTypeID v18;
  NSObject *v19;
  id v20;
  char *v21;
  unsigned __int8 *v22;
  char *v23;
  CircArrayKernel *v24;
  _BOOL4 v25;
  BOOL v26;
  NSObject *v27;
  NSObject *v28;
  CAXException *exception;
  CircArrayKernel *v31;
  CircArrayKernel *v32;
  void **v33;
  void **v34[2];
  _BYTE buf[12];
  __int16 v36;
  int v37;
  __int16 v38;
  void ***v39;
  __int16 v40;
  const char *v41;
  uint64_t v42;

  v42 = *MEMORY[0x1E0C80C00];
  v5 = 4294956417;
  if (a4 | a3 || !a5)
    return v5;
  switch(a2)
  {
    case 1718186611:
      goto LABEL_6;
    case 1668179559:
      v17 = (const __CFDictionary *)*a5;
      v18 = CFGetTypeID(*a5);
      if (v18 != CFDictionaryGetTypeID())
        return 4294956445;
      *((_BYTE *)this + 633) = 1;
      AUCircArray::SetConfigPlist(this, v17);
      (*(void (**)(AUCircArray *, uint64_t, _QWORD, _QWORD))(*(_QWORD *)this + 432))(this, 1668179559, 0, 0);
      if (AUJBase::AUJBaseLogScope(void)::once != -1)
        dispatch_once(&AUJBase::AUJBaseLogScope(void)::once, &__block_literal_global_20859);
      if (AUJBase::AUJBaseLogScope(void)::scope)
      {
        v19 = *(id *)AUJBase::AUJBaseLogScope(void)::scope;
        if (!v19)
        {
LABEL_30:
          if (!*((_BYTE *)this + 17))
            return 0;
          AUCircArray::CreateKernel((AUCircArray *)v34, (uint64_t)this);
          v31 = 0;
          v21 = (char *)this + 704;
          while (ca::concurrent::deferred_deletion_queue<CircArrayKernel,10ul,std::default_delete<CircArrayKernel>>::pop((uint64_t)this + 704, &v31));
          if (!v34[0])
            __assert_rtn("push", "deferred_deletion_queue.h", 71, "ioObject");
          v22 = (unsigned __int8 *)this + 2689;
          do
            __ldaxr(v22);
          while (__stlxr(1u, v22));
          v23 = (char *)this + 768;
          v24 = (CircArrayKernel *)v34[0];
          *(void ***)buf = v34[0];
          v25 = boost::lockfree::queue<std::vector<std::vector<float>> *,boost::lockfree::capacity<10ul>>::do_push<false>((uint64_t)v23, buf);
          v26 = v25;
          if (v25)
          {
            v24 = 0;
            v34[0] = 0;
          }
          ca::concurrent::deferred_deletion_queue<CircArrayKernel,10ul,std::default_delete<CircArrayKernel>>::drain_trash((uint64_t)v21);
          if (v31)
          {
            CircArrayKernel::~CircArrayKernel(v31);
            MEMORY[0x1BCC95CE0]();
          }
          if (v24)
          {
            CircArrayKernel::~CircArrayKernel(v24);
            MEMORY[0x1BCC95CE0]();
          }
          if (v26)
            return 0;
          if (AUJBase::AUJBaseLogScope(void)::once != -1)
            dispatch_once(&AUJBase::AUJBaseLogScope(void)::once, &__block_literal_global_20859);
          CALog::LogObjIfEnabled((id *)AUJBase::AUJBaseLogScope(void)::scope);
          v27 = objc_claimAutoreleasedReturnValue();
          v28 = v27;
          if (v27 && os_log_type_enabled(v27, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 136315394;
            *(_QWORD *)&buf[4] = "AUCircArray.mm";
            v36 = 1024;
            v37 = 419;
            _os_log_impl(&dword_1B5ED0000, v28, OS_LOG_TYPE_ERROR, "%25s:%-5d Failed to queue staged kernel\n", buf, 0x12u);
          }

          return 4294956433;
        }
      }
      else
      {
        v19 = MEMORY[0x1E0C81028];
        v20 = MEMORY[0x1E0C81028];
      }
      if (os_log_type_enabled(v19, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 136315394;
        *(_QWORD *)&buf[4] = "AUCircArray.mm";
        v36 = 1024;
        v37 = 415;
        _os_log_impl(&dword_1B5ED0000, v19, OS_LOG_TYPE_DEBUG, "%25s:%-5d Changed config plist successfully\n", buf, 0x12u);
      }

      goto LABEL_30;
    case 8803:
LABEL_6:
      v7 = *a5;
      v8 = CFGetTypeID(*a5);
      if (v8 == CFArrayGetTypeID())
      {
        CACFDictionary::operator=((uint64_t)this + 2872, v7);
        v9 = *((_QWORD *)this + 344);
        if (v9)
        {
          CFHelper::extractVectorOfVectors<float>((uint64_t *)&v31, (CFArrayRef *)this + 359);
          v10 = *(_QWORD *)(v9 + 208);
          v11 = *(_QWORD **)v10;
          v12 = *(_QWORD **)(v10 + 8);
          if ((_QWORD *)(v32 - v31) == (_QWORD *)((char *)v12 - *(_QWORD *)v10))
          {
            if (v32 == v31 || v12 == v11)
              std::vector<std::vector<float>>::__throw_out_of_range[abi:ne180100]();
            if (*((_QWORD *)v31 + 1) - *(_QWORD *)v31 == v11[1] - *v11)
            {
              v13 = (void **)operator new();
              *v13 = 0;
              v13[1] = 0;
              v13[2] = 0;
              std::vector<std::vector<float>>::__init_with_size[abi:ne180100]<std::vector<float>*,std::vector<float>*>(v13, (uint64_t)v31, (uint64_t)v32, 0xAAAAAAAAAAAAAAABLL * ((v32 - v31) >> 3));
              v33 = v13;
              v34[0] = 0;
              while (ca::concurrent::deferred_deletion_queue<std::vector<std::vector<float>>,10ul,std::default_delete<std::vector<std::vector<float>>>>::pop(v9 + 320, v34));
              v14 = (unsigned __int8 *)(v9 + 2305);
              do
                __ldaxr(v14);
              while (__stlxr(1u, v14));
              *(_QWORD *)buf = v33;
              v15 = boost::lockfree::queue<std::vector<std::vector<float>> *,boost::lockfree::capacity<10ul>>::do_push<false>(v9 + 384, buf);
              v16 = v15;
              if (v15)
                v33 = 0;
              ca::concurrent::deferred_deletion_queue<std::vector<std::vector<float>>,10ul,std::default_delete<std::vector<std::vector<float>>>>::drain_trash(v9 + 320);
              std::unique_ptr<std::vector<std::vector<float>>>::reset[abi:ne180100](v34, 0);
              std::unique_ptr<std::vector<std::vector<float>>>::reset[abi:ne180100](&v33, 0);
              if (v16)
              {
                *(_QWORD *)buf = &v31;
                std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
                v5 = 0;
                atomic_store(1u, (unsigned __int8 *)this + 632);
                return v5;
              }
              if (os_log_type_enabled(0, OS_LOG_TYPE_ERROR))
              {
                CAX4CCString::CAX4CCString((CAX4CCString *)v34, 0xFFFFFFFF);
                *(_DWORD *)buf = 136315906;
                *(_QWORD *)&buf[4] = "CircArrayKernel.mm";
                v36 = 1024;
                v37 = 537;
                v38 = 2080;
                v39 = v34;
                v40 = 2080;
                v41 = "Could not queue staged beam filters";
                _os_log_impl(&dword_1B5ED0000, 0, OS_LOG_TYPE_ERROR, "%25s:%-5d about to throw %s: %s", buf, 0x26u);
              }
              exception = (CAXException *)__cxa_allocate_exception(0x110uLL);
              CAXException::CAXException(exception, "Could not queue staged beam filters", -1);
            }
            else
            {
              if (os_log_type_enabled(0, OS_LOG_TYPE_ERROR))
              {
                CAX4CCString::CAX4CCString((CAX4CCString *)v34, 0xFFFFFFFF);
                *(_DWORD *)buf = 136315906;
                *(_QWORD *)&buf[4] = "CircArrayKernel.mm";
                v36 = 1024;
                v37 = 536;
                v38 = 2080;
                v39 = v34;
                v40 = 2080;
                v41 = "New beam filters differ in size from previous ones";
                _os_log_impl(&dword_1B5ED0000, 0, OS_LOG_TYPE_ERROR, "%25s:%-5d about to throw %s: %s", buf, 0x26u);
              }
              exception = (CAXException *)__cxa_allocate_exception(0x110uLL);
              CAXException::CAXException(exception, "New beam filters differ in size from previous ones", -1);
            }
          }
          else
          {
            if (os_log_type_enabled(0, OS_LOG_TYPE_ERROR))
            {
              CAX4CCString::CAX4CCString((CAX4CCString *)v34, 0xFFFFFFFF);
              *(_DWORD *)buf = 136315906;
              *(_QWORD *)&buf[4] = "CircArrayKernel.mm";
              v36 = 1024;
              v37 = 535;
              v38 = 2080;
              v39 = v34;
              v40 = 2080;
              v41 = "Number of beam FIRs doesn't match current number";
              _os_log_impl(&dword_1B5ED0000, 0, OS_LOG_TYPE_ERROR, "%25s:%-5d about to throw %s: %s", buf, 0x26u);
            }
            exception = (CAXException *)__cxa_allocate_exception(0x110uLL);
            CAXException::CAXException(exception, "Number of beam FIRs doesn't match current number", -1);
          }
        }
        return 0;
      }
      return 4294956445;
  }
  return v5;
}

uint64_t AUCircArray::SetParameter(AUCircArray *this, uint64_t a2, uint64_t a3, uint64_t a4, float a5)
{
  int v5;
  int v6;
  unsigned int v7;

  v5 = a4;
  v6 = a3;
  v7 = a2;
  AUJBase::SetParameter(this, a2, a3, a4, a5);
  if (!(v5 | v6) && (v7 < 0x18 || v7 == 33))
    atomic_store(1u, (unsigned __int8 *)this + 632);
  return 0;
}

uint64_t AUJBase::CanScheduleParameters(AUJBase *this)
{
  return 0;
}

uint64_t AUCircArray::ProcessMultipleBufferLists(AUCircArray *this, unsigned int *a2, AudioDSP::Utility *a3, int a4, const AudioBufferList **a5, int a6, AudioBufferList **a7)
{
  char v11;
  CircArrayKernel **v12;
  char *v13;
  char v14;
  BOOL v15;
  CircArrayKernel *v16;
  int v17;
  unsigned __int8 *v18;
  unsigned __int8 v19;
  uint64_t mNumberBuffers;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  const AudioBufferList *v28;
  uint64_t Element;
  BOOL *v30;
  AudioBufferList **v31;
  NSObject *v32;
  uint64_t v33;
  void *v34;
  uint64_t v35;
  char v36;
  char v37;
  BOOL v38;
  int v39;
  unint64_t v40;
  char v41;
  char v42;
  uint64_t v43;
  unint64_t v44;
  _QWORD *v45;
  uint64_t *v46;
  id v47;
  AudioBufferList *v48;
  UInt32 v49;
  void **p_mData;
  double v51;
  float v52;
  float v53;
  unsigned int v54;
  float32x2_t v55;
  uint64_t v56;
  unint64_t v57;
  _QWORD *v58;
  uint64_t *v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  float v63;
  uint64_t *v64;
  uint64_t v65;
  float v66;
  uint64_t v67;
  unint64_t v68;
  unint64_t v69;
  _QWORD *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  const void **v77;
  unint64_t v78;
  _QWORD *v79;
  unint64_t v80;
  unint64_t v81;
  unint64_t v82;
  uint64_t v83;
  _QWORD *v84;
  char *v85;
  unint64_t v86;
  unint64_t v87;
  uint64_t v88;
  unint64_t v89;
  uint64_t v90;
  unint64_t v91;
  unint64_t v92;
  unint64_t v93;
  unint64_t v94;
  unint64_t v95;
  unint64_t v96;
  unint64_t v97;
  DSPSplitComplex *v98;
  uint64_t v99;
  _DWORD *v100;
  vDSP_Length v101;
  unint64_t v102;
  int v103;
  int v104;
  uint64_t v105;
  uint64_t v106;
  unsigned int v107;
  __int128 v108;
  int v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  unint64_t v114;
  const float **v115;
  _QWORD *v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  DSPSplitComplex *v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  unint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  unsigned int v131;
  unsigned int v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  vDSP_Length v136;
  float *v137;
  uint64_t v138;
  unint64_t v139;
  uint64_t v140;
  uint64_t v141;
  float *v142;
  uint64_t v143;
  uint64_t v144;
  unint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  unint64_t v150;
  int v151;
  unsigned int v152;
  int v153;
  unint64_t v154;
  uint64_t v155;
  vDSP_Length v156;
  unint64_t v157;
  uint64_t v158;
  unint64_t v159;
  uint64_t v160;
  unint64_t v161;
  uint64_t v163;
  unint64_t i;
  uint64_t v165;
  BOOL *v166;
  CircArrayKernel **v167;
  NSObject *v168;
  id v169;
  AudioBufferList *v170;
  UInt32 v171;
  void **v172;
  AudioBufferList *v174;
  uint64_t v175;
  CircArrayKernel **v176;
  unsigned int v177;
  AUCircArray *v178;
  unsigned int v179;
  AudioBufferList **v180;
  uint64_t v181;
  int v182;
  int v183;
  AudioDSP::Utility *v184;
  uint64_t v185;
  char *__dst;
  uint64_t v187;
  AudioStreamBasicDescription v188;
  uint64_t v189;

  v189 = *MEMORY[0x1E0C80C00];
  if (a4 != 1 || a6 != 1)
    __assert_rtn("ProcessMultipleBufferLists", "AUCircArray.mm", 443, "inNumberInputBufferLists == 1 && inNumberOutputBufferLists == 1");
  v11 = 0;
  v12 = (CircArrayKernel **)((char *)this + 2752);
  v13 = (char *)this + 704;
  do
  {
    v14 = v11;
    v15 = ca::concurrent::deferred_deletion_queue<CircArrayKernel,10ul,std::default_delete<CircArrayKernel>>::pop((uint64_t)v13, v12);
    v11 = 1;
  }
  while (v15);
  v16 = *v12;
  if (*((_BYTE *)*v12 + 116))
  {
    LOBYTE(v17) = 0;
  }
  else
  {
    v18 = (unsigned __int8 *)this + 632;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(0, v18));
    v17 = v19 & 1;
    v16 = *v12;
    if (!(v14 & 1 | (v17 == 0)))
      *((_BYTE *)v16 + 128) = 1;
  }
  AUCircArray::ForwardParamsToKernel((uint64_t)this, (uint64_t)v16, (v17 & 1) == 0);
  mNumberBuffers = (*a5)->mNumberBuffers;
  v21 = (*a7)->mNumberBuffers;
  if ((_DWORD)mNumberBuffers)
  {
    v22 = 0;
    v23 = 8 * mNumberBuffers;
    v24 = 16;
    do
    {
      *(_QWORD *)(*((_QWORD *)this + 345) + v22) = *(_QWORD *)((char *)&(*a5)->mNumberBuffers + v24);
      v22 += 8;
      v24 += 16;
    }
    while (v23 != v22);
  }
  v176 = v12;
  if ((_DWORD)v21)
  {
    v25 = 0;
    v26 = 8 * v21;
    v27 = 16;
    do
    {
      *(_QWORD *)(*((_QWORD *)this + 348) + v25) = *(_QWORD *)((char *)&(*a7)->mNumberBuffers + v27);
      v25 += 8;
      v27 += 16;
    }
    while (v26 != v25);
  }
  v180 = a7;
  LOWORD(v188.mSampleRate) = 0;
  v28 = (const AudioBufferList *)(ausdk::AUScope::SafeGetElement((AUCircArray *)((char *)this + 80), 0) + 80);
  v178 = this;
  Element = ausdk::AUScope::SafeGetElement((AUCircArray *)((char *)this + 128), 0);
  v184 = a3;
  AudioDSP::Utility::DetectNonFinites(a3, *a5, v28, (AudioStreamBasicDescription *)((char *)&v188.mSampleRate + 1), v30);
  if (BYTE1(v188.mSampleRate) && *((_BYTE *)this + 3004))
  {
    if (AUCircArrayLogScope(void)::once != -1)
      dispatch_once(&AUCircArrayLogScope(void)::once, &__block_literal_global_10252);
    v31 = a7;
    if (AUCircArrayLogScope(void)::scope)
    {
      v32 = *(id *)AUCircArrayLogScope(void)::scope;
      if (!v32)
      {
LABEL_44:
        v48 = *v31;
        if (v48->mNumberBuffers)
        {
          v49 = 0;
          p_mData = &v48->mBuffers[0].mData;
          do
          {
            bzero(*p_mData, *((unsigned int *)p_mData - 1));
            ++v49;
            p_mData += 2;
          }
          while (v49 < v48->mNumberBuffers);
        }
        return 0;
      }
    }
    else
    {
      v32 = MEMORY[0x1E0C81028];
      v47 = MEMORY[0x1E0C81028];
    }
    if (os_log_type_enabled(v32, OS_LOG_TYPE_ERROR))
    {
      *(AudioFormatID *)((char *)&v188.mFormatID + 2) = 136315394;
      *(_QWORD *)((char *)&v188.mFormatFlags + 2) = "AUCircArray.mm";
      HIWORD(v188.mFramesPerPacket) = 1024;
      v188.mBytesPerFrame = 481;
      _os_log_impl(&dword_1B5ED0000, v32, OS_LOG_TYPE_ERROR, "%25s:%-5d AUCircArray: (InputSignals) is NOT finite", (uint8_t *)&v188.mFormatID + 2, 0x12u);
    }

    v31 = a7;
    goto LABEL_44;
  }
  v33 = *((_QWORD *)this + 344);
  v181 = *((_QWORD *)this + 345);
  v174 = (AudioBufferList *)(Element + 80);
  v175 = *((_QWORD *)this + 348);
  v182 = *(_DWORD *)(v33 + 2380);
  if (v182 != (_DWORD)a3)
  {
    v34 = *(void **)(v33 + 2464);
    v35 = *(_QWORD *)(v33 + 2472) - (_QWORD)v34;
    if (v35 >= 1)
      bzero(v34, 4 * (((unint64_t)v35 >> 2) - ((unint64_t)v35 > 3)) + 4);
  }
  v36 = 0;
  do
  {
    v37 = v36;
    v38 = ca::concurrent::deferred_deletion_queue<std::vector<std::vector<float>>,10ul,std::default_delete<std::vector<std::vector<float>>>>::pop(v33 + 320, (void ***)(v33 + 208));
    v36 = 1;
  }
  while (v38);
  v39 = *(unsigned __int8 *)(v33 + 129);
  if (*(_BYTE *)(v33 + 128) || v37 & 1 | (*(_BYTE *)(v33 + 129) != 0))
  {
    *(_BYTE *)(v33 + 128) = 0;
    if (v39)
    {
      v40 = 0;
      *(_BYTE *)(v33 + 129) = 0;
      v41 = 1;
      do
      {
        v42 = v41;
        v43 = *(_QWORD *)(v33 + 2856);
        if (0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(v33 + 2864) - v43) >> 3) <= v40)
          std::vector<std::vector<float>>::__throw_out_of_range[abi:ne180100]();
        if (*(_DWORD *)(v33 + 2368))
        {
          v44 = 0;
          v45 = (_QWORD *)(v43 + 24 * v40);
          do
          {
            *(_DWORD *)((char *)&v188.mSampleRate + 2) = v44 + 16;
            *(_QWORD *)((char *)&v188.mFormatID + 2) = (char *)&v188.mSampleRate + 2;
            v46 = std::__tree<std::__value_type<unsigned int,float>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,float>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,float>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>((uint64_t **)(v33 + 8), (unsigned int *)((char *)&v188.mSampleRate + 2), (uint64_t)&std::piecewise_construct, (unsigned int **)((char *)&v188.mFormatID + 2));
            if (v44 >= (uint64_t)(v45[1] - *v45) >> 2)
              std::vector<std::vector<float>>::__throw_out_of_range[abi:ne180100]();
            *(_DWORD *)(*v45 + 4 * v44++) = *((_DWORD *)v46 + 8);
          }
          while (v44 < *(unsigned int *)(v33 + 2368));
        }
        CircArrayKernel::Process(float const* const*,float * const*,unsigned int)::$_0::operator()(v33, v40);
        v41 = 0;
        v40 = 1;
      }
      while ((v42 & 1) != 0);
    }
    else
    {
      v51 = *(float *)(v33 + 40);
      v52 = *(float *)(v33 + 2384);
      *(_DWORD *)((char *)&v188.mSampleRate + 2) = 32;
      *(_QWORD *)((char *)&v188.mFormatID + 2) = (char *)&v188.mSampleRate + 2;
      v53 = rintf((float)(v52* *((float *)std::__tree<std::__value_type<unsigned int,float>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,float>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,float>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>((uint64_t **)(v33 + 8), (unsigned int *)((char *)&v188.mSampleRate + 2), (uint64_t)&std::piecewise_construct, (unsigned int **)((char *)&v188.mFormatID + 2))+ 8))/ 1000.0);
      v54 = (uint64_t)v53 & ~((uint64_t)v53 >> 63);
      *(_DWORD *)(v33 + 120) = v54;
      *(_DWORD *)(v33 + 124) = v54;
      if (v54 <= 1)
        v54 = 1;
      v55 = (float32x2_t)vbsl_s8((int8x8_t)vcltz_s32(vshl_n_s32(vdup_n_s32(*(float *)(v33 + 40) > 0.95), 0x1FuLL)), (int8x8_t)1065353216, (int8x8_t)0x3F80000000000000);
      if (*(_BYTE *)(v33 + 116))
      {
        *(_QWORD *)(v33 + 96) = 2;
        *(_DWORD *)(v33 + 104) = v54;
        *(float32x2_t *)(v33 + 108) = v55;
        *(_BYTE *)(v33 + 118) = 1;
      }
      else
      {
        *(_QWORD *)(v33 + 64) = 2;
        *(_DWORD *)(v33 + 72) = v54;
        *(float32x2_t *)(v33 + 76) = v55;
        *(_WORD *)(v33 + 116) = 257;
        *(_DWORD *)(v33 + 48) = 0;
        *(float *)(v33 + 44) = vsub_f32((float32x2_t)vdup_lane_s32((int32x2_t)v55, 1), v55).f32[0] / (float)v54;
      }
      v56 = *(_QWORD *)(v33 + 2856);
      if (0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(v33 + 2864) - v56) >> 3) <= (v51 <= 0.95))
        std::vector<std::vector<float>>::__throw_out_of_range[abi:ne180100]();
      if (*(_DWORD *)(v33 + 2368))
      {
        v57 = 0;
        v58 = (_QWORD *)(v56 + 24 * (v51 <= 0.95));
        do
        {
          *(_DWORD *)((char *)&v188.mSampleRate + 2) = v57 + 16;
          *(_QWORD *)((char *)&v188.mFormatID + 2) = (char *)&v188.mSampleRate + 2;
          v59 = std::__tree<std::__value_type<unsigned int,float>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,float>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,float>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>((uint64_t **)(v33 + 8), (unsigned int *)((char *)&v188.mSampleRate + 2), (uint64_t)&std::piecewise_construct, (unsigned int **)((char *)&v188.mFormatID + 2));
          if (v57 >= (uint64_t)(v58[1] - *v58) >> 2)
            std::vector<std::vector<float>>::__throw_out_of_range[abi:ne180100]();
          *(_DWORD *)(*v58 + 4 * v57++) = *((_DWORD *)v59 + 8);
        }
        while (v57 < *(unsigned int *)(v33 + 2368));
      }
      CircArrayKernel::Process(float const* const*,float * const*,unsigned int)::$_0::operator()(v33, v51 <= 0.95);
    }
  }
  v183 = *(unsigned __int8 *)(v33 + 116);
  if (*(_BYTE *)(v33 + 116))
  {
    v179 = 0;
    v177 = 1;
  }
  else
  {
    v177 = *(float *)(v33 + 40) > 0.95;
    v179 = v177;
  }
  if (*(_DWORD *)(v33 + 2368))
  {
    v60 = 0;
    v187 = 0;
    v61 = 0;
    v62 = 0;
    do
    {
      v63 = *(float *)(v33 + 2384);
      *(_DWORD *)((char *)&v188.mSampleRate + 2) = v62 + 24;
      *(_QWORD *)((char *)&v188.mFormatID + 2) = (char *)&v188.mSampleRate + 2;
      v64 = std::__tree<std::__value_type<unsigned int,float>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,float>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,float>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>((uint64_t **)(v33 + 8), (unsigned int *)((char *)&v188.mSampleRate + 2), (uint64_t)&std::piecewise_construct, (unsigned int **)((char *)&v188.mFormatID + 2));
      v65 = *(_QWORD *)(v33 + 2392);
      if (0x8E38E38E38E38E39 * ((*(_QWORD *)(v33 + 2400) - v65) >> 3) <= v62)
        std::vector<std::vector<float>>::__throw_out_of_range[abi:ne180100]();
      v66 = rintf((float)(v63 * *((float *)v64 + 8)) / 1000.0);
      v67 = (uint64_t)v66 & ~((uint64_t)v66 >> 63);
      if (*(_QWORD *)(v65 + v61 + 64) < (unint64_t)v67)
        __assert_rtn("SetDelaySamples", "CircularDelay.cpp", 40, "numSamples <= mMaxDelaySamps");
      v68 = (uint64_t)v66 & ~((uint64_t)v66 >> 63);
      v69 = *(_QWORD *)(v65 + v61);
      if (v69 >= v68)
      {
        v70 = (_QWORD *)(v65 + v61);
        v70[1] = v68;
        v71 = v70[5];
        v72 = v71 - v68;
        v73 = (int)v69 - (int)v67 + (int)v71;
        if ((int)v71 < (int)v67)
          v74 = v73;
        else
          v74 = v72;
        v70[6] = v74;
      }
      if (v182 == (_DWORD)v184)
      {
        v75 = *(_QWORD *)(v33 + 2392);
        if (0x8E38E38E38E38E39 * ((*(_QWORD *)(v33 + 2400) - v75) >> 3) <= v62)
          std::vector<std::vector<float>>::__throw_out_of_range[abi:ne180100]();
        v76 = *(_QWORD *)(v33 + 2832);
        if (0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(v33 + 2840) - v76) >> 3) <= v62)
          std::vector<std::vector<float>>::__throw_out_of_range[abi:ne180100]();
        v77 = (const void **)(v181 + v60);
      }
      else
      {
        if ((_DWORD)v184)
          memmove(*(void **)(v33 + 2464), *(const void **)(v181 + 8 * v62), 4 * v184);
        v75 = *(_QWORD *)(v33 + 2392);
        if (0x8E38E38E38E38E39 * ((*(_QWORD *)(v33 + 2400) - v75) >> 3) <= v62)
          std::vector<std::vector<float>>::__throw_out_of_range[abi:ne180100]();
        v76 = *(_QWORD *)(v33 + 2832);
        if (0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(v33 + 2840) - v76) >> 3) <= v62)
          std::vector<std::vector<float>>::__throw_out_of_range[abi:ne180100]();
        v77 = (const void **)(v33 + 2464);
      }
      v78 = *(unsigned int *)(v33 + 2380);
      v79 = (_QWORD *)(v75 + v61);
      if (*(_QWORD *)(v75 + v61 + 56) < v78)
        __assert_rtn("Process", "CircularDelay.cpp", 56, "numFrames <= mMaxFrames");
      v185 = v60;
      v80 = v79[5];
      v81 = *v79 - v80;
      if (v81 >= v78)
        v82 = *(unsigned int *)(v33 + 2380);
      else
        v82 = *v79 - v80;
      v84 = v79 + 2;
      v83 = v79[2];
      if (v80 >= (v79[3] - v83) >> 2)
        std::vector<std::vector<float>>::__throw_out_of_range[abi:ne180100]();
      v85 = (char *)*v77;
      __dst = *(char **)(v76 + v187);
      memcpy((void *)(v83 + 4 * v80), *v77, 4 * v82);
      v86 = *(_QWORD *)(v75 + v61);
      v87 = v79[5] + v82;
      if (v87 >= v86)
        v88 = *(_QWORD *)(v75 + v61);
      else
        v88 = 0;
      v89 = v87 - v88;
      v79[5] = v89;
      if (v81 < v78)
      {
        if (v89 >= (uint64_t)(v79[3] - *v84) >> 2)
          std::vector<std::vector<float>>::__throw_out_of_range[abi:ne180100]();
        memcpy((void *)(*v84 + 4 * v89), &v85[4 * v82], 4 * (v78 - v82));
        v79[5] += v78 - v82;
        v86 = *(_QWORD *)(v75 + v61);
      }
      v90 = v75 + v61;
      v91 = *(_QWORD *)(v75 + v61 + 48);
      v92 = v86 - v91;
      if (v86 - v91 >= v78)
        v93 = v78;
      else
        v93 = v86 - v91;
      if (v91 >= (uint64_t)(v79[3] - *v84) >> 2)
        std::vector<std::vector<float>>::__throw_out_of_range[abi:ne180100]();
      memcpy(__dst, (const void *)(*v84 + 4 * v91), 4 * v93);
      v94 = *(_QWORD *)(v75 + v61);
      v95 = *(_QWORD *)(v90 + 48) + v93;
      if (v95 < v94)
        v94 = 0;
      v96 = v95 - v94;
      *(_QWORD *)(v90 + 48) = v96;
      if (v92 < v78)
      {
        if (v96 >= (uint64_t)(v79[3] - *v84) >> 2)
          std::vector<std::vector<float>>::__throw_out_of_range[abi:ne180100]();
        v97 = v78 - v93;
        memcpy(&__dst[4 * v93], (const void *)(*v84 + 4 * v96), 4 * v97);
        *(_QWORD *)(v90 + 48) += v97;
      }
      ++v62;
      v61 += 72;
      v187 += 24;
      v60 = v185 + 8;
    }
    while (v62 < *(unsigned int *)(v33 + 2368));
  }
  vDSP_biquadm(*(vDSP_biquadm_Setup *)(v33 + 2488), *(const float ***)(v33 + 2504), 1, *(float ***)(v33 + 2528), 1, v184);
  if (v183)
  {
    v99 = *(_QWORD *)(v33 + 3048);
    if (0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(v33 + 3056) - v99) >> 3) <= 1)
      std::vector<std::vector<float>>::__throw_out_of_range[abi:ne180100]();
    v100 = *(_DWORD **)(v99 + 24);
    v101 = *(unsigned int *)(v33 + 2380);
    if (v101 > (uint64_t)(*(_QWORD *)(v99 + 32) - (_QWORD)v100) >> 2)
      __assert_rtn("Process", "ParamRamper.cpp", 53, "outParamValues.size() >= inNumFrames");
    if (*(_BYTE *)(v33 + 117))
    {
      if ((_DWORD)v101)
      {
        v102 = 0;
        v103 = *(unsigned __int8 *)(v33 + 116);
        v104 = 1;
        do
        {
          if (v102 >= *(unsigned int *)(v33 + 68))
          {
            v105 = *(_QWORD *)(v99 + 24);
            v106 = *(_QWORD *)(v99 + 32);
            if (v104 && !v103)
            {
              v103 = 1;
              *(_BYTE *)(v33 + 116) = 1;
              *(_DWORD *)(v33 + 48) = 0;
              *(float *)(v33 + 44) = (float)(*(float *)(v33 + 80) - *(float *)(v33 + 76))
                                   / (float)*(unsigned int *)(v33 + 72);
LABEL_115:
              if (v102 >= (v106 - v105) >> 2)
                std::vector<std::vector<float>>::__throw_out_of_range[abi:ne180100]();
              v107 = *(_DWORD *)(v33 + 48);
              *(float *)(v105 + 4 * v102) = *(float *)(v33 + 76) + (float)((float)v107 * *(float *)(v33 + 44));
              *(_DWORD *)(v33 + 48) = v107 + 1;
              if (v107 + 1 >= *(_DWORD *)(v33 + 72))
              {
                *(_WORD *)(v33 + 116) = 0;
                *(_DWORD *)(v33 + 40) = *(_DWORD *)(v33 + 80);
                v104 = *(unsigned __int8 *)(v33 + 118);
                v103 = 0;
                if (*(_BYTE *)(v33 + 118))
                {
                  v108 = *(_OWORD *)(v33 + 100);
                  *(_OWORD *)(v33 + 52) = *(_OWORD *)(v33 + 84);
                  *(_OWORD *)(v33 + 68) = v108;
                  v104 = 1;
                  *(_WORD *)(v33 + 117) = 1;
                }
              }
              goto LABEL_119;
            }
          }
          else
          {
            v105 = *(_QWORD *)(v99 + 24);
            v106 = *(_QWORD *)(v99 + 32);
          }
          if (v103)
            goto LABEL_115;
          if (v102 >= (v106 - v105) >> 2)
            std::vector<std::vector<float>>::__throw_out_of_range[abi:ne180100]();
          v103 = 0;
          *(_DWORD *)(v105 + 4 * v102) = *(_DWORD *)(v33 + 40);
LABEL_119:
          ++v102;
        }
        while (v101 != v102);
      }
    }
    else if ((_DWORD)v101)
    {
      v109 = *(_DWORD *)(v33 + 2380);
      do
      {
        *v100++ = *(_DWORD *)(v33 + 40);
        --v109;
      }
      while (v109);
    }
    *(AudioFormatID *)((char *)&v188.mFormatID + 2) = 1065353216;
    *(_DWORD *)((char *)&v188.mSampleRate + 2) = -1082130432;
    vDSP_vsmsa(*(const float **)(v99 + 24), 1, (const float *)((char *)&v188.mSampleRate + 2), (const float *)((char *)&v188.mFormatID + 2), *(float **)v99, 1, v101);
  }
  if (*(_DWORD *)(v33 + 2368))
  {
    v110 = 0;
    v111 = 0;
    v112 = 0;
    v113 = 0;
    v114 = 0;
    do
    {
      if (v183)
      {
        v115 = *(const float ***)(v33 + 3048);
        if (*(const float ***)(v33 + 3056) == v115)
          std::vector<std::vector<float>>::__throw_out_of_range[abi:ne180100]();
        v116 = *(_QWORD **)(v33 + 2856);
        if (*(_QWORD **)(v33 + 2864) == v116)
          std::vector<std::vector<float>>::__throw_out_of_range[abi:ne180100]();
        vDSP_vsmul(*v115, 1, (const float *)(*v116 + v113), *(float **)(v33 + 2928), 1, *(unsigned int *)(v33 + 2380));
        v117 = *(_QWORD *)(v33 + 3048);
        if (0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(v33 + 3056) - v117) >> 3) <= 1)
          std::vector<std::vector<float>>::__throw_out_of_range[abi:ne180100]();
        v118 = *(_QWORD *)(v33 + 2856);
        if (0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(v33 + 2864) - v118) >> 3) <= 1)
          std::vector<std::vector<float>>::__throw_out_of_range[abi:ne180100]();
        vDSP_vsma(*(const float **)(v117 + 24), 1, (const float *)(*(_QWORD *)(v118 + 24) + v113), *(const float **)(v33 + 2928), 1, *(float **)(v33 + 2928), 1, *(unsigned int *)(v33 + 2380));
        v119 = *(_QWORD *)(v33 + 2952);
        if (0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(v33 + 2960) - v119) >> 3) <= v114)
          std::vector<std::vector<float>>::__throw_out_of_range[abi:ne180100]();
        vDSP_vmul(*(const float **)(v33 + 2928), 1, *(const float **)(v119 + v112), 1, *(float **)(v33 + 2928), 1, *(unsigned int *)(v33 + 2380));
      }
      else
      {
        v121 = *(_QWORD *)(v33 + 2952);
        if (0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(v33 + 2960) - v121) >> 3) <= v114)
          std::vector<std::vector<float>>::__throw_out_of_range[abi:ne180100]();
        v122 = *(_QWORD *)(v33 + 2856);
        if (0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(v33 + 2864) - v122) >> 3) <= v179)
          std::vector<std::vector<float>>::__throw_out_of_range[abi:ne180100]();
        vDSP_vsmul(*(const float **)(v121 + v112), 1, (const float *)(*(_QWORD *)(v122 + 24 * v179) + v113), *(float **)(v33 + 2928), 1, *(unsigned int *)(v33 + 2380));
      }
      v123 = *(_QWORD *)(v33 + 2616);
      if (0xCF3CF3CF3CF3CF3DLL * ((*(_QWORD *)(v33 + 2624) - v123) >> 3) <= v114)
        std::vector<std::vector<float>>::__throw_out_of_range[abi:ne180100]();
      v124 = *(_QWORD *)(v33 + 2416);
      if (v114 >= (*(_QWORD *)(v33 + 2424) - v124) >> 5)
        std::vector<std::vector<float>>::__throw_out_of_range[abi:ne180100]();
      FreqDomainConvolver::Process((DSPSplitComplex *)(v123 + v110), *(const float **)(v33 + 2928), 0, *(unsigned int *)(v33 + 2380), (void **)(v124 + v111), v120);
      ++v114;
      v113 += 4;
      v112 += 24;
      v111 += 32;
      v110 += 168;
    }
    while (v114 < *(unsigned int *)(v33 + 2368));
  }
  if (v179 <= v177)
  {
    v125 = v179 + 333;
    v126 = (8 * v179) | (16 * v179);
    do
    {
      SmartFIR::ProcessFreq(*(SmartFIR **)(v33 + 8 * v125), *(const DSPSplitComplex *const **)(v33 + v126 + 2680), *(float *const **)(v33 + v126 + 2728));
      v127 = v125 - 333;
      v128 = *(_QWORD *)(v33 + 3000);
      if (0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(v33 + 3008) - v128) >> 3) <= v125 - 333)
        std::vector<std::vector<float>>::__throw_out_of_range[abi:ne180100]();
      v129 = *(_QWORD *)(v33 + 2976);
      if (0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(v33 + 2984) - v129) >> 3) <= v127)
        std::vector<std::vector<float>>::__throw_out_of_range[abi:ne180100]();
      v130 = *(_QWORD *)(v33 + 3024);
      if (0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(v33 + 3032) - v130) >> 3) <= v127)
        std::vector<std::vector<float>>::__throw_out_of_range[abi:ne180100]();
      vDSP_mmul(*(const float **)(v128 + v126), 1, *(const float **)(v129 + v126), 1, *(float **)(v130 + v126), 1, *(unsigned int *)(v33 + 2376), *(unsigned int *)(v33 + 2380), *(unsigned int *)(v33 + 2368));
      ++v125;
      v126 += 24;
    }
    while (v125 - v177 != 334);
  }
  v131 = *(_DWORD *)(v33 + 2376);
  if (v183)
  {
    if (!v131)
      goto LABEL_161;
    v132 = 0;
    v133 = (8 * v179) | (16 * v179);
    do
    {
      v134 = *(_QWORD *)(v33 + 3024);
      if (0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(v33 + 3032) - v134) >> 3) <= v179)
        std::vector<std::vector<float>>::__throw_out_of_range[abi:ne180100]();
      v135 = *(_QWORD *)(v33 + 3048);
      if (0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(v33 + 3056) - v135) >> 3) <= v179)
        std::vector<std::vector<float>>::__throw_out_of_range[abi:ne180100]();
      v136 = *(unsigned int *)(v33 + 2380);
      v137 = (float *)(*(_QWORD *)(v134 + v133) + 4 * v136 * v132);
      vDSP_vmul(v137, 1, *(const float **)(v135 + v133), 1, v137, 1, v136);
      v138 = *(_QWORD *)(v33 + 3024);
      v139 = 0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(v33 + 3032) - v138) >> 3);
      if (v139 <= v177)
        std::vector<std::vector<float>>::__throw_out_of_range[abi:ne180100]();
      v140 = *(_QWORD *)(v33 + 3048);
      if (0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(v33 + 3056) - v140) >> 3) <= v177)
        std::vector<std::vector<float>>::__throw_out_of_range[abi:ne180100]();
      if (v139 <= v179)
        std::vector<std::vector<float>>::__throw_out_of_range[abi:ne180100]();
      v141 = *(_DWORD *)(v33 + 2380) * v132;
      v142 = (float *)(*(_QWORD *)(v138 + 24 * v179) + 4 * v141);
      vDSP_vma((const float *)(*(_QWORD *)(v138 + 24 * v177) + 4 * v141), 1, *(const float **)(v140 + 24 * v177), 1, v142, 1, v142, 1, *(unsigned int *)(v33 + 2380));
      ++v132;
      v131 = *(_DWORD *)(v33 + 2376);
    }
    while (v132 < v131);
  }
  if (v131)
  {
    v143 = 0;
    v144 = 0;
    v145 = 0;
    do
    {
      v146 = *(_QWORD *)(v33 + 2640);
      if (0xCF3CF3CF3CF3CF3DLL * ((*(_QWORD *)(v33 + 2648) - v146) >> 3) <= v145)
        std::vector<std::vector<float>>::__throw_out_of_range[abi:ne180100]();
      v147 = *(_QWORD *)(v33 + 3024);
      if (0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(v33 + 3032) - v147) >> 3) <= v179)
        std::vector<std::vector<float>>::__throw_out_of_range[abi:ne180100]();
      v148 = *(_QWORD *)(v33 + 2440);
      if (v145 >= (*(_QWORD *)(v33 + 2448) - v148) >> 5)
        std::vector<std::vector<float>>::__throw_out_of_range[abi:ne180100]();
      FreqDomainConvolver::Process((DSPSplitComplex *)(v146 + v143), (const float *)(*(_QWORD *)(v147 + 24 * v179) + 4 * (*(_DWORD *)(v33 + 2380) * v145++)), 0, *(unsigned int *)(v33 + 2380), (void **)(v148 + v144), v98);
      v144 += 32;
      v143 += 168;
    }
    while (v145 < *(unsigned int *)(v33 + 2376));
  }
LABEL_161:
  SmartFIR::ProcessFreq(*(SmartFIR **)(v33 + 2776), *(const DSPSplitComplex *const **)(v33 + 2784), *(float *const **)(v33 + 2808));
  v149 = *(_QWORD *)(v33 + 136);
  if (*(_QWORD *)(v33 + 144) != v149)
  {
    v150 = 0;
    v151 = 0;
    v152 = 1;
    do
    {
      v153 = *(_DWORD *)(v33 + 2376);
      v154 = (v153 * v151);
      v155 = *(_QWORD *)(v33 + 3096);
      if (v154 >= (*(_QWORD *)(v33 + 3104) - v155) >> 2)
        std::vector<std::vector<float>>::__throw_out_of_range[abi:ne180100]();
      v156 = *(unsigned int *)(v33 + 2380);
      v157 = v153 * (v152 - 1) * v156;
      v158 = *(_QWORD *)(v33 + 3072);
      if (v157 >= (*(_QWORD *)(v33 + 3080) - v158) >> 2)
        std::vector<std::vector<float>>::__throw_out_of_range[abi:ne180100]();
      v159 = (v156 * v151);
      v160 = *(_QWORD *)(v33 + 3120);
      if (v159 >= (*(_QWORD *)(v33 + 3128) - v160) >> 2)
        std::vector<std::vector<float>>::__throw_out_of_range[abi:ne180100]();
      vDSP_mmul((const float *)(v155 + 4 * v154), 1, (const float *)(v158 + 4 * v157), 1, (float *)(v160 + 4 * v159), 1, *(unsigned int *)(v149 + 4 * v150), v156, *(unsigned int *)(v33 + 2376));
      v149 = *(_QWORD *)(v33 + 136);
      v161 = (*(_QWORD *)(v33 + 144) - v149) >> 2;
      if (v161 <= v150)
        std::vector<std::vector<float>>::__throw_out_of_range[abi:ne180100]();
      v151 += *(_DWORD *)(v149 + 4 * v150);
      v150 = v152;
    }
    while (v161 > v152++);
  }
  v163 = *(unsigned int *)(v33 + 2372);
  if ((_DWORD)v163)
  {
    for (i = 0; i != v163; ++i)
    {
      v165 = *(_QWORD *)(v33 + 2592);
      if (i >= (*(_QWORD *)(v33 + 2600) - v165) >> 3)
        std::vector<std::vector<float>>::__throw_out_of_range[abi:ne180100]();
      *(_QWORD *)(v165 + 8 * i) = *(_QWORD *)(v175 + 8 * i);
    }
  }
  vDSP_biquadm(*(vDSP_biquadm_Setup *)(v33 + 2552), *(const float ***)(v33 + 2568), 1, *(float ***)(v33 + 2592), 1, v184);
  AudioDSP::Utility::DetectNonFinites(v184, *v180, v174, &v188, v166);
  if (LOBYTE(v188.mSampleRate) && *((_BYTE *)v178 + 3004))
  {
    if (AUCircArrayLogScope(void)::once != -1)
      dispatch_once(&AUCircArrayLogScope(void)::once, &__block_literal_global_10252);
    v167 = v176;
    if (AUCircArrayLogScope(void)::scope)
    {
      v168 = *(id *)AUCircArrayLogScope(void)::scope;
      if (!v168)
      {
LABEL_183:
        CircArrayKernel::Reset(*v167);
        v170 = *v180;
        if ((*v180)->mNumberBuffers)
        {
          v171 = 0;
          v172 = &v170->mBuffers[0].mData;
          do
          {
            bzero(*v172, *((unsigned int *)v172 - 1));
            ++v171;
            v172 += 2;
          }
          while (v171 < v170->mNumberBuffers);
        }
        return 0;
      }
    }
    else
    {
      v168 = MEMORY[0x1E0C81028];
      v169 = MEMORY[0x1E0C81028];
    }
    if (os_log_type_enabled(v168, OS_LOG_TYPE_ERROR))
    {
      *(AudioFormatID *)((char *)&v188.mFormatID + 2) = 136315394;
      *(_QWORD *)((char *)&v188.mFormatFlags + 2) = "AUCircArray.mm";
      HIWORD(v188.mFramesPerPacket) = 1024;
      v188.mBytesPerFrame = 489;
      _os_log_impl(&dword_1B5ED0000, v168, OS_LOG_TYPE_ERROR, "%25s:%-5d AUCircArray: (OutputSignals) is NOT finite", (uint8_t *)&v188.mFormatID + 2, 0x12u);
    }

    v167 = v176;
    goto LABEL_183;
  }
  return 0;
}

uint64_t AUCircArray::GetParameterInfo(AUCircArray *this, int a2, unsigned int a3, AudioUnitParameterInfo *buffer)
{
  AudioUnitParameterOptions v4;
  uint64_t result;
  const __CFString *v7;
  const __CFString *v10;
  const __CFArray *v11;
  unsigned int Count;
  const __CFString *v13;
  const __CFString *v18;

  v4 = -939524096;
  buffer->flags = -939524096;
  if (a2)
    return 4294956418;
  if (a3 <= 7)
  {
    v7 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, CFSTR("Beam Angle %u"), a3 + 1);
    buffer->cfNameString = v7;
    v4 = buffer->flags | 0x8000010;
LABEL_5:
    buffer->flags = v4;
    CFStringGetCString(v7, buffer->name, 52, 0x8000100u);
    *(_QWORD *)&buffer->unit = 0xC3B400000000000FLL;
    _D0 = 1135869952;
    goto LABEL_18;
  }
  if (a3 <= 0xF)
  {
    v10 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, CFSTR("Beam Type %u"), a3 - 7);
    buffer->cfNameString = v10;
    buffer->flags |= 0x8000010u;
    CFStringGetCString(v10, buffer->name, 52, 0x8000100u);
    *(_QWORD *)&buffer->unit = 1;
    v11 = (const __CFArray *)*((_QWORD *)this + 357);
    if (!v11 || (Count = CFArrayGetCount(v11), Count <= 1))
      Count = 2;
    HIDWORD(_D0) = 0;
    *(float *)&_D0 = (float)(Count - 1);
    goto LABEL_18;
  }
  if (a3 <= 0x17)
  {
    v13 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, CFSTR("Gain %u"), a3 - 15);
    buffer->cfNameString = v13;
    buffer->flags |= 0x8000010u;
    CFStringGetCString(v13, buffer->name, 52, 0x8000100u);
    *(_QWORD *)&buffer->unit = 14;
    __asm { FMOV            V0.2S, #1.0 }
    goto LABEL_18;
  }
  if (a3 <= 0x1F)
  {
    v18 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, CFSTR("Delay %u"), a3 - 23);
    buffer->cfNameString = v18;
    buffer->flags |= 0x8000010u;
    CFStringGetCString(v18, buffer->name, 52, 0x8000100u);
    *(_QWORD *)&buffer->unit = 24;
    _D0 = 1148846080;
    goto LABEL_18;
  }
  if (a3 == 33)
  {
    v7 = CFSTR("Angle Offset");
    buffer->cfNameString = CFSTR("Angle Offset");
    goto LABEL_5;
  }
  if (a3 != 32)
    return 4294956418;
  buffer->cfNameString = CFSTR("Blend Time");
  buffer->flags = -939524096;
  CFStringGetCString(CFSTR("Blend Time"), buffer->name, 52, 0x8000100u);
  *(_QWORD *)&buffer->unit = 0x3F80000000000018;
  _D0 = 0x42200000461C4000;
LABEL_18:
  result = 0;
  *(_QWORD *)&buffer->maxValue = _D0;
  return result;
}

uint64_t AUCircArray::GetPresets(AUCircArray *this, const __CFArray **a2)
{
  __CFArray *Mutable;

  if (a2)
  {
    Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 2, 0);
    CFArrayAppendValue(Mutable, &kPresets);
    CFArrayAppendValue(Mutable, &dword_1E69D66B8);
    *a2 = Mutable;
  }
  return 0;
}

uint64_t AUCircArray::NewFactoryPresetSet(AUCircArray *this, const AUPreset *a2)
{
  uint64_t v3;
  SInt32 presetNumber;
  char i;
  const AUPreset *v6;
  char v7;
  uint64_t v9;
  uint64_t v10;

  v3 = 0;
  presetNumber = a2->presetNumber;
  for (i = 1; ; i = 0)
  {
    v6 = (const AUPreset *)&kPresets[4 * v3];
    if (presetNumber == v6->presetNumber)
      break;
    v7 = i;
    v3 = 1;
    if ((v7 & 1) == 0)
      return 4294956445;
  }
  if (presetNumber == 1)
  {
    (*(void (**)(AUCircArray *, uint64_t, _QWORD, _QWORD, _QWORD, float))(*(_QWORD *)this + 152))(this, 32, 0, 0, 0, 20.0);
    v10 = 0;
    do
    {
      (*(void (**)(AUCircArray *, uint64_t, _QWORD, _QWORD, _QWORD, float))(*(_QWORD *)this + 152))(this, v10, 0, 0, 0, 0.0);
      (*(void (**)(AUCircArray *, _QWORD, _QWORD, _QWORD, _QWORD, float))(*(_QWORD *)this + 152))(this, (v10 + 8), 0, 0, 0, 0.0);
      (*(void (**)(AUCircArray *, _QWORD, _QWORD, _QWORD, _QWORD, float))(*(_QWORD *)this + 152))(this, (v10 + 16), 0, 0, 0, 1.0);
      (*(void (**)(AUCircArray *, _QWORD, _QWORD, _QWORD, _QWORD, float))(*(_QWORD *)this + 152))(this, (v10 + 24), 0, 0, 0, 0.0);
      v10 = (v10 + 1);
    }
    while ((_DWORD)v10 != 8);
  }
  else if (!presetNumber)
  {
    (*(void (**)(AUCircArray *, uint64_t, _QWORD, _QWORD, _QWORD, float))(*(_QWORD *)this + 152))(this, 32, 0, 0, 0, 20.0);
    (*(void (**)(AUCircArray *, _QWORD, _QWORD, _QWORD, _QWORD, float))(*(_QWORD *)this + 152))(this, 0, 0, 0, 0, 30.0);
    (*(void (**)(AUCircArray *, uint64_t, _QWORD, _QWORD, _QWORD, float))(*(_QWORD *)this + 152))(this, 1, 0, 0, 0, 30.0);
    (*(void (**)(AUCircArray *, uint64_t, _QWORD, _QWORD, _QWORD, float))(*(_QWORD *)this + 152))(this, 2, 0, 0, 0, 0.0);
    (*(void (**)(AUCircArray *, uint64_t, _QWORD, _QWORD, _QWORD, float))(*(_QWORD *)this + 152))(this, 3, 0, 0, 0, 0.0);
    (*(void (**)(AUCircArray *, uint64_t, _QWORD, _QWORD, _QWORD, float))(*(_QWORD *)this + 152))(this, 4, 0, 0, 0, -90.0);
    (*(void (**)(AUCircArray *, uint64_t, _QWORD, _QWORD, _QWORD, float))(*(_QWORD *)this + 152))(this, 5, 0, 0, 0, 90.0);
    (*(void (**)(AUCircArray *, uint64_t, _QWORD, _QWORD, _QWORD, float))(*(_QWORD *)this + 152))(this, 8, 0, 0, 0, 2.0);
    (*(void (**)(AUCircArray *, uint64_t, _QWORD, _QWORD, _QWORD, float))(*(_QWORD *)this + 152))(this, 9, 0, 0, 0, 2.0);
    (*(void (**)(AUCircArray *, uint64_t, _QWORD, _QWORD, _QWORD, float))(*(_QWORD *)this + 152))(this, 10, 0, 0, 0, 2.0);
    (*(void (**)(AUCircArray *, uint64_t, _QWORD, _QWORD, _QWORD, float))(*(_QWORD *)this + 152))(this, 11, 0, 0, 0, 2.0);
    (*(void (**)(AUCircArray *, uint64_t, _QWORD, _QWORD, _QWORD, float))(*(_QWORD *)this + 152))(this, 12, 0, 0, 0, 2.0);
    (*(void (**)(AUCircArray *, uint64_t, _QWORD, _QWORD, _QWORD, float))(*(_QWORD *)this + 152))(this, 13, 0, 0, 0, 2.0);
    v9 = 16;
    do
    {
      (*(void (**)(AUCircArray *, uint64_t, _QWORD, _QWORD, _QWORD, float))(*(_QWORD *)this + 152))(this, v9, 0, 0, 0, 1.0);
      (*(void (**)(AUCircArray *, _QWORD, _QWORD, _QWORD, _QWORD, float))(*(_QWORD *)this + 152))(this, (v9 + 8), 0, 0, 0, 0.0);
      v9 = (v9 + 1);
    }
    while ((_DWORD)v9 != 24);
    (*(void (**)(AUCircArray *, uint64_t, _QWORD, _QWORD, _QWORD, float))(*(_QWORD *)this + 152))(this, 18, 0, 0, 0, 0.707);
    (*(void (**)(AUCircArray *, uint64_t, _QWORD, _QWORD, _QWORD, float))(*(_QWORD *)this + 152))(this, 19, 0, 0, 0, 0.707);
    (*(void (**)(AUCircArray *, uint64_t, _QWORD, _QWORD, _QWORD, float))(*(_QWORD *)this + 152))(this, 22, 0, 0, 0, 0.0);
    (*(void (**)(AUCircArray *, uint64_t, _QWORD, _QWORD, _QWORD, float))(*(_QWORD *)this + 152))(this, 23, 0, 0, 0, 0.0);
  }
  ausdk::AUBase::SetAFactoryPresetAsCurrent((char *)this, v6);
  return 0;
}

double AUCircArray::GetLatency(AUCircArray *this)
{
  return *((double *)this + 374);
}

uint64_t AUJBase::SupportsTail(AUJBase *this)
{
  return 1;
}

BOOL AUJBase::StreamFormatWritable(AUJBase *this)
{
  return *((_BYTE *)this + 17) == 0;
}

uint64_t AUJBase::Version(AUJBase *this)
{
  return 0;
}

_QWORD *AUCircArray::GetValidChannelCounts@<X0>(_QWORD *a1@<X8>)
{
  int v3;

  v3 = -65537;
  return std::vector<AUChannelInfo>::vector(a1, &v3);
}

uint64_t AUJBase::CanBypass(AUJBase *this)
{
  return 0;
}

uint64_t AUCircArray::PresetWasSet(uint64_t this)
{
  atomic_store(1u, (unsigned __int8 *)(this + 632));
  return this;
}

void AUCircArray::StreamFormatChanged(AUCircArray *this)
{
  CFTypeRef cf;

  if (!*((_BYTE *)this + 633))
  {
    AUCircArray::CreateDefaultConfigPlist((AUCircArray *)&cf, (uint64_t)this);
    AUCircArray::SetConfigPlist(this, (CFDictionaryRef)cf);
    if (cf)
      CFRelease(cf);
  }
}

void sub_1B637560C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  applesauce::CF::DictionaryRef::~DictionaryRef((const void **)va);
  _Unwind_Resume(a1);
}

uint64_t AUCircArray::HasCustomViewInDSPAUBundle(AUCircArray *this)
{
  return 1;
}

void AUCircArray::CreateDefaultConfigPlist(AUCircArray *this, uint64_t a2)
{
  id v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  double v13;
  int i;
  void *v15;
  double v16;
  void *v17;
  void *v18;
  double v19;
  void *v20;
  void *v21;
  void *v22;
  int v23;
  void *v24;
  void *v25;
  int v26;
  void *v27;
  void *v28;
  id cf;

  v4 = objc_alloc_init(MEMORY[0x1E0C99E08]);
  objc_msgSend(v4, "setObject:forKey:", CFSTR("Default (Passthrough)"), CFSTR("Version"));
  v5 = (void *)MEMORY[0x1E0C99D20];
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInt:", *(unsigned int *)(ausdk::AUScope::SafeGetElement((ausdk::AUScope *)(a2 + 128), 0) + 108));
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "arrayWithObject:", v6);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "setObject:forKey:", v7, CFSTR("SpeakersInRows"));

  v8 = (void *)MEMORY[0x1E0C99D20];
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInt:", 0);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v8, "arrayWithObject:", v9);
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "setObject:forKey:", v10, CFSTR("FirstDriverAngles"));

  objc_msgSend(MEMORY[0x1E0C99DE8], "array");
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0C99DE8], "array");
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  for (i = 0; i != 7; ++i)
  {
    if (i == 1)
    {
      LODWORD(v13) = 0;
      objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithFloat:", v13);
      v18 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v11, "addObject:", v18);

      LODWORD(v19) = 1.0;
      objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithFloat:", v19);
      v17 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v12, "addObject:", v17);
    }
    else
    {
      if (i)
      {
        LODWORD(v13) = 0;
        objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithFloat:", v13);
        v20 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v11, "addObject:", v20);

        LODWORD(v16) = 0;
      }
      else
      {
        LODWORD(v13) = 1.0;
        objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithFloat:", v13);
        v15 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v11, "addObject:", v15);

        LODWORD(v16) = 1.0;
      }
      objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithFloat:", v16);
      v17 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v12, "addObject:", v17);
    }

  }
  objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:", v11, v12, 0);
  v21 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "setObject:forKey:", v21, CFSTR("BeamCompositions"));

  objc_msgSend(v4, "setObject:forKey:", &unk_1E6A12928, CFSTR("BeamDescriptions"));
  objc_msgSend(v4, "setObject:forKey:", &unk_1E6A12940, CFSTR("EQBiQuad"));
  objc_msgSend(MEMORY[0x1E0C99DE8], "arrayWithObject:", &unk_1E6A12980);
  v22 = (void *)objc_claimAutoreleasedReturnValue();
  v23 = 127;
  do
  {
    objc_msgSend(v22, "addObject:", &unk_1E6A12990);
    --v23;
  }
  while (v23);
  objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:", v22, v22, 0);
  v24 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "setObject:forKey:", v24, CFSTR("BeamFIRs"));

  objc_msgSend(MEMORY[0x1E0C99DE8], "array");
  v25 = (void *)objc_claimAutoreleasedReturnValue();
  v26 = 4;
  do
  {
    objc_msgSend(v25, "addObject:", v22);
    --v26;
  }
  while (v26);
  objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObject:", v25);
  v27 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "setObject:forKey:", v27, CFSTR("ModalFIRs"));

  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInt:", 0);
  v28 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "setObject:forKey:", v28, CFSTR("LatencySamples"));

  cf = v4;
  if (cf)
    CFRetain(cf);
  applesauce::CF::DictionaryRef::DictionaryRef(this, cf);

}

void sub_1B63759DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, id a12)
{
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;

  _Unwind_Resume(a1);
}

void AUCircArray::SetConfigPlist(AUCircArray *this, CFDictionaryRef theDict)
{
  const __CFArray *v4;
  int Count;
  const __CFDictionary *v6;
  const void *v7;
  CFTypeID v8;
  CFTypeID v9;
  CFNumberRef v10;
  const void *v11;
  CFTypeID v12;
  CFTypeID v13;
  std::vector<unsigned int>::pointer begin;
  int v15;
  unsigned int v16;
  int v17;
  int v18;
  CFArrayRef v19;
  CFTypeRef v20;
  CFTypeID v21;
  CFTypeID v22;
  __CFArray *v23;
  const void *v24;
  unsigned int v25;
  int v26;
  const __CFArray *v27;
  int v28;
  const __CFArray *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  int v35;
  int **v36;
  int *v37;
  uint64_t v38;
  unint64_t v39;
  void **v40;
  uint64_t v41;
  int v42;
  unint64_t v43;
  int v44;
  void **v45;
  void **v46;
  const CFArrayCallBacks *v47;
  void *v48;
  float *v49;
  float *v50;
  BOOL v51;
  const void *v52;
  void *v53;
  CFTypeID v54;
  CFTypeID v55;
  void **v56;
  void **v57;
  int v58;
  int v59;
  int v60;
  const __CFArray *v61;
  _DWORD *v62;
  int v63;
  int v64;
  int v65;
  int v66;
  const void *v67;
  const void *v68;
  CFTypeID v69;
  int v70;
  int *v71;
  const __CFArray *v72;
  uint64_t v73;
  CAXException *v74;
  CAXException *exception;
  CAXException *v76;
  CAXException *v77;
  CAXException *v78;
  CAXException *v79;
  CAXException *v80;
  CAXException *v81;
  CAXException *v82;
  CAXException *v83;
  CAXException *v84;
  unsigned int v85;
  CAXException *v86;
  CAXException *v87;
  CFTypeRef v88;
  char v89;
  CFTypeRef cf;
  __int16 v91;
  CFArrayRef v92;
  __int16 v93;
  CFArrayRef v94;
  __int16 v95;
  std::vector<unsigned int> v96;
  CFMutableArrayRef Mutable;
  __int16 v98;
  CFMutableArrayRef theArray;
  __int16 v100;
  CFDictionaryRef theDicta;
  __int16 v102;
  void *value;
  __int16 v104;
  void *__p;
  void *v106;
  CFArrayRef v107;
  __int16 v108;
  CFArrayRef v109;
  __int16 v110;
  uint8_t v111[16];
  _BYTE buf[18];
  __int16 v113;
  CFArrayRef *p_valuePtr;
  __int16 v115;
  const char *v116;
  void **valuePtr;
  void **v118;
  CFArrayRef v119;
  __int16 v120;
  CFArrayRef v121;
  __int16 v122;
  uint64_t v123;

  v123 = *MEMORY[0x1E0C80C00];
  theDicta = theDict;
  v102 = 0;
  v4 = (const __CFArray *)*((_QWORD *)this + 357);
  if (v4)
  {
    Count = CFArrayGetCount(v4);
    v6 = theDicta;
  }
  else
  {
    Count = 0;
    v6 = theDict;
  }
  if (!CFDictionaryContainsKey(v6, CFSTR("SpeakersInRows")))
  {
    if (os_log_type_enabled(0, OS_LOG_TYPE_ERROR))
    {
      CAX4CCString::CAX4CCString((CAX4CCString *)&valuePtr, 0xFFFFFFFF);
      *(_DWORD *)buf = 136315906;
      *(_QWORD *)&buf[4] = "AUCircArray.mm";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 787;
      v113 = 2080;
      p_valuePtr = (CFArrayRef *)&valuePtr;
      v115 = 2080;
      v116 = "Plist doesn't contain speakers in rows array";
      _os_log_impl(&dword_1B5ED0000, 0, OS_LOG_TYPE_ERROR, "%25s:%-5d about to throw %s: %s", buf, 0x26u);
    }
    exception = (CAXException *)__cxa_allocate_exception(0x110uLL);
    CAXException::CAXException(exception, "Plist doesn't contain speakers in rows array", -1);
  }
  if (!CFDictionaryContainsKey(theDicta, CFSTR("FirstDriverAngles")))
  {
    if (os_log_type_enabled(0, OS_LOG_TYPE_ERROR))
    {
      CAX4CCString::CAX4CCString((CAX4CCString *)&valuePtr, 0xFFFFFFFF);
      *(_DWORD *)buf = 136315906;
      *(_QWORD *)&buf[4] = "AUCircArray.mm";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 788;
      v113 = 2080;
      p_valuePtr = (CFArrayRef *)&valuePtr;
      v115 = 2080;
      v116 = "Plist doesn't contain speakers offsets array";
      _os_log_impl(&dword_1B5ED0000, 0, OS_LOG_TYPE_ERROR, "%25s:%-5d about to throw %s: %s", buf, 0x26u);
    }
    v76 = (CAXException *)__cxa_allocate_exception(0x110uLL);
    CAXException::CAXException(v76, "Plist doesn't contain speakers offsets array", -1);
  }
  if (!CFDictionaryContainsKey(theDicta, CFSTR("BeamCompositions")))
  {
    if (os_log_type_enabled(0, OS_LOG_TYPE_ERROR))
    {
      CAX4CCString::CAX4CCString((CAX4CCString *)&valuePtr, 0xFFFFFFFF);
      *(_DWORD *)buf = 136315906;
      *(_QWORD *)&buf[4] = "AUCircArray.mm";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 789;
      v113 = 2080;
      p_valuePtr = (CFArrayRef *)&valuePtr;
      v115 = 2080;
      v116 = "Plist doesn't contain beam compositions array";
      _os_log_impl(&dword_1B5ED0000, 0, OS_LOG_TYPE_ERROR, "%25s:%-5d about to throw %s: %s", buf, 0x26u);
    }
    v77 = (CAXException *)__cxa_allocate_exception(0x110uLL);
    CAXException::CAXException(v77, "Plist doesn't contain beam compositions array", -1);
  }
  if (!CFDictionaryContainsKey(theDicta, CFSTR("BeamFIRs")))
  {
    if (os_log_type_enabled(0, OS_LOG_TYPE_ERROR))
    {
      CAX4CCString::CAX4CCString((CAX4CCString *)&valuePtr, 0xFFFFFFFF);
      *(_DWORD *)buf = 136315906;
      *(_QWORD *)&buf[4] = "AUCircArray.mm";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 790;
      v113 = 2080;
      p_valuePtr = (CFArrayRef *)&valuePtr;
      v115 = 2080;
      v116 = "Plist doesn't contain beam FIR array";
      _os_log_impl(&dword_1B5ED0000, 0, OS_LOG_TYPE_ERROR, "%25s:%-5d about to throw %s: %s", buf, 0x26u);
    }
    v78 = (CAXException *)__cxa_allocate_exception(0x110uLL);
    CAXException::CAXException(v78, "Plist doesn't contain beam FIR array", -1);
  }
  if (!CFDictionaryContainsKey(theDicta, CFSTR("ModalFIRs")))
  {
    if (os_log_type_enabled(0, OS_LOG_TYPE_ERROR))
    {
      CAX4CCString::CAX4CCString((CAX4CCString *)&valuePtr, 0xFFFFFFFF);
      *(_DWORD *)buf = 136315906;
      *(_QWORD *)&buf[4] = "AUCircArray.mm";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 791;
      v113 = 2080;
      p_valuePtr = (CFArrayRef *)&valuePtr;
      v115 = 2080;
      v116 = "Plist doesn't contain modal FIR array";
      _os_log_impl(&dword_1B5ED0000, 0, OS_LOG_TYPE_ERROR, "%25s:%-5d about to throw %s: %s", buf, 0x26u);
    }
    v79 = (CAXException *)__cxa_allocate_exception(0x110uLL);
    CAXException::CAXException(v79, "Plist doesn't contain modal FIR array", -1);
  }
  theArray = CFArrayCreateMutable(0, 0, MEMORY[0x1E0C9B378]);
  v100 = 257;
  Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x1E0C9B378]);
  v98 = 257;
  if (theDicta)
    v7 = CFDictionaryGetValue(theDicta, CFSTR("SpeakersInRows"));
  else
    v7 = 0;
  v8 = CFGetTypeID(v7);
  if (v8 == CFArrayGetTypeID())
  {
    CACFDictionary::GetCACFArray(&theDicta, CFSTR("SpeakersInRows"), (CACFArray *)&theArray);
  }
  else
  {
    v9 = CFGetTypeID(v7);
    if (v9 == CFNumberGetTypeID())
    {
      LODWORD(__p) = 0;
      CACFDictionary::GetSInt32((uint64_t)theDicta, CFSTR("SpeakersInRows"), (int *)&__p);
      if (theArray)
      {
        CFArrayRemoveAllValues(theArray);
        *(_QWORD *)&buf[8] = 0;
        LODWORD(valuePtr) = (_DWORD)__p;
        v10 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
        *(_QWORD *)buf = v10;
        buf[8] = 1;
        if (v10)
          CFArrayAppendValue(theArray, v10);
        CACFNumber::~CACFNumber((CACFNumber *)buf);
      }
    }
  }
  if (theDicta)
    v11 = CFDictionaryGetValue(theDicta, CFSTR("FirstDriverAngles"));
  else
    v11 = 0;
  v12 = CFGetTypeID(v11);
  if (v12 == CFArrayGetTypeID())
  {
    CACFDictionary::GetCACFArray(&theDicta, CFSTR("FirstDriverAngles"), (CACFArray *)&Mutable);
  }
  else
  {
    v13 = CFGetTypeID(v11);
    if (v13 == CFNumberGetTypeID())
    {
      *(_DWORD *)buf = 0;
      CACFDictionary::GetFloat32((uint64_t)theDicta, CFSTR("FirstDriverAngles"), (float *)buf);
      if (Mutable)
        CFArrayRemoveAllValues(Mutable);
      CACFArray::AppendFloat32(&Mutable, *(float *)buf);
    }
  }
  CFHelper::extractVector<unsigned int>(&v96, &theArray);
  begin = v96.__begin_;
  if (v96.__begin_ == v96.__end_)
  {
    v15 = 0;
  }
  else
  {
    v15 = 0;
    do
    {
      v16 = *begin++;
      v15 += v16;
    }
    while (begin != v96.__end_);
  }
  if (*((_BYTE *)this + 17)
    && v15 != *(_DWORD *)(ausdk::AUScope::SafeGetElement((AUCircArray *)((char *)this + 128), 0) + 108))
  {
    if (os_log_type_enabled(0, OS_LOG_TYPE_ERROR))
    {
      CAX4CCString::CAX4CCString((CAX4CCString *)&valuePtr, 0xFFFFFFFF);
      *(_DWORD *)buf = 136315906;
      *(_QWORD *)&buf[4] = "AUCircArray.mm";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 802;
      v113 = 2080;
      p_valuePtr = (CFArrayRef *)&valuePtr;
      v115 = 2080;
      v116 = "Speakers in row array does not have same number of speakers as AU output channels";
      _os_log_impl(&dword_1B5ED0000, 0, OS_LOG_TYPE_ERROR, "%25s:%-5d about to throw %s: %s", buf, 0x26u);
    }
    v82 = (CAXException *)__cxa_allocate_exception(0x110uLL);
    CAXException::CAXException(v82, "Speakers in row array does not have same number of speakers as AU output channels", -1);
  }
  if (theArray)
    v17 = CFArrayGetCount(theArray);
  else
    v17 = 0;
  v18 = (int)Mutable;
  if (Mutable)
    v18 = CFArrayGetCount(Mutable);
  if (v17 != v18)
  {
    if (os_log_type_enabled(0, OS_LOG_TYPE_ERROR))
    {
      CAX4CCString::CAX4CCString((CAX4CCString *)&valuePtr, 0xFFFFFFFF);
      *(_DWORD *)buf = 136315906;
      *(_QWORD *)&buf[4] = "AUCircArray.mm";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 806;
      v113 = 2080;
      p_valuePtr = (CFArrayRef *)&valuePtr;
      v115 = 2080;
      v116 = "Speakers in rows array size doesn't match speaker offsets array size";
      _os_log_impl(&dword_1B5ED0000, 0, OS_LOG_TYPE_ERROR, "%25s:%-5d about to throw %s: %s", buf, 0x26u);
    }
    v80 = (CAXException *)__cxa_allocate_exception(0x110uLL);
    CAXException::CAXException(v80, "Speakers in rows array size doesn't match speaker offsets array size", -1);
  }
  v94 = CFArrayCreateMutable(0, 0, MEMORY[0x1E0C9B378]);
  v95 = 257;
  v92 = CFArrayCreateMutable(0, 0, MEMORY[0x1E0C9B378]);
  v93 = 257;
  if (CFDictionaryContainsKey(theDicta, CFSTR("BeamCompositions"))
    && CFDictionaryContainsKey(theDicta, CFSTR("BeamFIRs")))
  {
    v109 = CFArrayCreateMutable(0, 0, MEMORY[0x1E0C9B378]);
    v110 = 257;
    CACFDictionary::GetCACFArray(&theDicta, CFSTR("BeamCompositions"), (CACFArray *)&v109);
    v19 = v109;
    cf = 0;
    CACFArray::GetCFType(&v109, 0, &cf);
    v20 = cf;
    v21 = CFGetTypeID(cf);
    if (v21 == CFArrayGetTypeID())
    {
      CACFDictionary::operator=((uint64_t)&v94, v19);
    }
    else
    {
      v22 = CFGetTypeID(v20);
      if (v22 == CFNumberGetTypeID())
      {
        v23 = CFArrayCreateMutable(0, 0, MEMORY[0x1E0C9B378]);
        *(_QWORD *)buf = v23;
        *(_WORD *)&buf[8] = 257;
        if (v23)
        {
          CFArrayAppendValue(v23, v19);
          v24 = *(const void **)buf;
        }
        else
        {
          v24 = 0;
        }
        CACFDictionary::operator=((uint64_t)&v94, v24);
        CACFArray::~CACFArray((CACFArray *)buf);
      }
    }
    v121 = CFArrayCreateMutable(0, 0, MEMORY[0x1E0C9B378]);
    v122 = 257;
    CACFArray::GetCACFArray(&v94, 0, (CACFArray *)&v121);
    v119 = CFArrayCreateMutable(0, 0, MEMORY[0x1E0C9B378]);
    v120 = 257;
    CACFDictionary::GetCACFArray(&theDicta, CFSTR("ModalFIRs"), (CACFArray *)&v119);
    v107 = CFArrayCreateMutable(0, 0, MEMORY[0x1E0C9B378]);
    v108 = 257;
    CACFArray::GetCACFArray(&v119, 0, (CACFArray *)&v107);
    if (v107)
    {
      v25 = CFArrayGetCount(v107);
      v26 = v25 - 1;
      v27 = v121;
      if (!v121)
      {
        if (v25)
          goto LABEL_190;
        goto LABEL_62;
      }
    }
    else
    {
      v25 = 0;
      v27 = v121;
      v26 = -1;
      if (!v121)
      {
LABEL_62:
        CFHelper::extractVectorOfVectors<float>((uint64_t *)buf, &v94);
        v31 = *(_QWORD *)buf;
        v30 = *(_QWORD *)&buf[8];
        LODWORD(value) = 0;
        std::vector<float>::vector(&__p, (2 * v26) | 1u, &value);
        std::vector<std::vector<float>>::vector(&valuePtr, 0xAAAAAAAAAAAAAAABLL * ((v30 - v31) >> 3), (uint64_t)&__p);
        if (__p)
        {
          v106 = __p;
          operator delete(__p);
        }
        v32 = *(_QWORD *)buf;
        if (*(_QWORD *)&buf[8] != *(_QWORD *)buf)
        {
          v33 = 0;
          if ((unint64_t)((*(_QWORD *)&buf[8] - *(_QWORD *)buf) / 24) <= 1)
            v34 = 1;
          else
            v34 = (*(_QWORD *)&buf[8] - *(_QWORD *)buf) / 24;
          do
          {
            v35 = 0;
            v36 = (int **)(v32 + 24 * v33);
            v37 = *v36;
            v38 = v36[1] - *v36;
            v39 = 0xAAAAAAAAAAAAAAABLL * (v118 - valuePtr);
            v40 = &valuePtr[3 * v33];
            v41 = v25;
            do
            {
              if (!v38)
                std::vector<std::vector<float>>::__throw_out_of_range[abi:ne180100]();
              if (v39 <= v33)
                std::vector<std::vector<float>>::__throw_out_of_range[abi:ne180100]();
              if (v35 <= 1)
                v42 = 1;
              else
                v42 = v35;
              v43 = (v42 - 1);
              if (v43 >= ((_BYTE *)v40[1] - (_BYTE *)*v40) >> 2)
                std::vector<std::vector<float>>::__throw_out_of_range[abi:ne180100]();
              v44 = *v37++;
              *((_DWORD *)*v40 + v43) = v44;
              v35 += 2;
              --v38;
              --v41;
            }
            while (v41);
            ++v33;
          }
          while (v33 != v34);
        }
        __p = CFArrayCreateMutable(0, 0, MEMORY[0x1E0C9B378]);
        LOWORD(v106) = 257;
        v45 = valuePtr;
        v46 = v118;
        if (valuePtr != v118)
        {
          v47 = (const CFArrayCallBacks *)MEMORY[0x1E0C9B378];
          do
          {
            v48 = CFArrayCreateMutable(0, 0, v47);
            value = v48;
            v104 = 257;
            v50 = (float *)*v45;
            v49 = (float *)v45[1];
            if (*v45 != v49)
            {
              do
                CACFArray::AppendFloat32((CFMutableArrayRef *)&value, *v50++);
              while (v50 != v49);
              v48 = value;
            }
            if (__p)
              v51 = BYTE1(v106) == 0;
            else
              v51 = 1;
            if (!v51)
              CFArrayAppendValue((CFMutableArrayRef)__p, v48);
            CACFArray::~CACFArray((CACFArray *)&value);
            v45 += 3;
          }
          while (v45 != v46);
        }
        CACFArray::operator=((uint64_t)&v94, (uint64_t)&__p);
        CACFArray::~CACFArray((CACFArray *)&__p);
        __p = &valuePtr;
        std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
        valuePtr = (void **)buf;
        std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&valuePtr);
LABEL_89:
        *(_QWORD *)buf = CFArrayCreateMutable(0, 0, MEMORY[0x1E0C9B378]);
        *(_WORD *)&buf[8] = 257;
        CACFDictionary::GetCACFArray(&theDicta, CFSTR("BeamFIRs"), (CACFArray *)buf);
        v52 = *(const void **)buf;
        __p = 0;
        CACFArray::GetCFType((CFArrayRef *)buf, 0, (const void **)&__p);
        v53 = __p;
        v54 = CFGetTypeID(__p);
        if (v54 == CFArrayGetTypeID())
        {
          CACFDictionary::operator=((uint64_t)&v92, v52);
        }
        else
        {
          v55 = CFGetTypeID(v53);
          if (v55 == CFNumberGetTypeID())
          {
            v56 = (void **)CFArrayCreateMutable(0, 0, MEMORY[0x1E0C9B378]);
            valuePtr = v56;
            LOWORD(v118) = 257;
            if (v56)
            {
              CFArrayAppendValue((CFMutableArrayRef)v56, v52);
              v57 = valuePtr;
            }
            else
            {
              v57 = 0;
            }
            CACFDictionary::operator=((uint64_t)&v92, v57);
            CACFArray::~CACFArray((CACFArray *)&valuePtr);
          }
        }
        CACFArray::~CACFArray((CACFArray *)buf);
        CACFArray::~CACFArray((CACFArray *)&v107);
        CACFArray::~CACFArray((CACFArray *)&v119);
        CACFArray::~CACFArray((CACFArray *)&v121);
        CACFArray::~CACFArray((CACFArray *)&v109);
        goto LABEL_97;
      }
    }
    v28 = CFArrayGetCount(v27);
    v29 = v121;
    if (v25 != v28)
    {
      if (!v121 || ((2 * v26) | 1) != CFArrayGetCount(v121))
LABEL_190:
        __assert_rtn("GetBeamArrays", "AUCircArray.mm", 737, "firstBeamComp.GetNumberItems() == algoOrder + 1 || firstBeamComp.GetNumberItems() == algoOrder * 2 + 1");
      v29 = v121;
    }
    if (v29)
      LODWORD(v29) = CFArrayGetCount(v29);
    if ((_DWORD)v29 != v25)
      goto LABEL_89;
    goto LABEL_62;
  }
LABEL_97:
  if (v94)
    v58 = CFArrayGetCount(v94);
  else
    v58 = 0;
  v59 = (int)v92;
  if (v92)
    v59 = CFArrayGetCount(v92);
  if (v58 != v59)
  {
    if (os_log_type_enabled(0, OS_LOG_TYPE_ERROR))
    {
      CAX4CCString::CAX4CCString((CAX4CCString *)&valuePtr, 0xFFFFFFFF);
      *(_DWORD *)buf = 136315906;
      *(_QWORD *)&buf[4] = "AUCircArray.mm";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 812;
      v113 = 2080;
      p_valuePtr = (CFArrayRef *)&valuePtr;
      v115 = 2080;
      v116 = "Number of beam compositions and beam FIRs does not match";
      _os_log_impl(&dword_1B5ED0000, 0, OS_LOG_TYPE_ERROR, "%25s:%-5d about to throw %s: %s", buf, 0x26u);
    }
    v81 = (CAXException *)__cxa_allocate_exception(0x110uLL);
    CAXException::CAXException(v81, "Number of beam compositions and beam FIRs does not match", -1);
  }
  valuePtr = (void **)CFArrayCreateMutable(0, 0, MEMORY[0x1E0C9B378]);
  LOWORD(v118) = 257;
  CACFDictionary::GetCACFArray(&theDicta, CFSTR("ModalFIRs"), (CACFArray *)&valuePtr);
  __p = CFArrayCreateMutable(0, 0, MEMORY[0x1E0C9B378]);
  LOWORD(v106) = 257;
  CACFArray::GetCACFArray((CFArrayRef *)&valuePtr, 0, (CACFArray *)&__p);
  v109 = CFArrayCreateMutable(0, 0, MEMORY[0x1E0C9B378]);
  v110 = 257;
  CACFArray::GetCACFArray(&v94, 0, (CACFArray *)&v109);
  if (__p)
  {
    v60 = CFArrayGetCount((CFArrayRef)__p);
    v61 = (const __CFArray *)__p;
    v62 = (_DWORD *)((char *)this + 3000);
    *((_DWORD *)this + 750) = v60 - 1;
    if (v61)
      v63 = CFArrayGetCount(v61);
    else
      v63 = 0;
  }
  else
  {
    v63 = 0;
    v62 = (_DWORD *)((char *)this + 3000);
    *((_DWORD *)this + 750) = -1;
  }
  if (!v109 || 2 * v63 - 1 != CFArrayGetCount(v109))
  {
    if (os_log_type_enabled(0, OS_LOG_TYPE_ERROR))
    {
      CAX4CCString::CAX4CCString((CAX4CCString *)&v121, 0xFFFFFFFF);
      *(_DWORD *)buf = 136315906;
      *(_QWORD *)&buf[4] = "AUCircArray.mm";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 823;
      v113 = 2080;
      p_valuePtr = &v121;
      v115 = 2080;
      v116 = "Number of modal filters doesn't match what's expected from beam compositions";
      _os_log_impl(&dword_1B5ED0000, 0, OS_LOG_TYPE_ERROR, "%25s:%-5d about to throw %s: %s", buf, 0x26u);
    }
    v74 = (CAXException *)__cxa_allocate_exception(0x110uLL);
    CAXException::CAXException(v74, "Number of modal filters doesn't match what's expected from beam compositions", -1);
  }
  v121 = CFArrayCreateMutable(0, 0, MEMORY[0x1E0C9B378]);
  v122 = 257;
  CACFArray::GetCACFArray(&v94, 0, (CACFArray *)&v121);
  v64 = (int)v121;
  if (v121)
    v64 = CFArrayGetCount(v121);
  if (v64 != *v62 + 1)
  {
    if (!v121)
      goto LABEL_182;
    if (((2 * *v62) | 1) == CFArrayGetCount(v121))
      goto LABEL_115;
    if (v121)
      v85 = CFArrayGetCount(v121);
    else
LABEL_182:
      v85 = 0;
    if (os_log_type_enabled(0, OS_LOG_TYPE_ERROR))
    {
      CAX4CCString::CAX4CCString((CAX4CCString *)&v119, v85);
      *(_DWORD *)buf = 136315906;
      *(_QWORD *)&buf[4] = "AUCircArray.mm";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 827;
      v113 = 2080;
      p_valuePtr = &v119;
      v115 = 2080;
      v116 = "Beam compositions size doesn't match expected from algo order";
      _os_log_impl(&dword_1B5ED0000, 0, OS_LOG_TYPE_ERROR, "%25s:%-5d about to throw %s: %s", buf, 0x26u);
    }
    v86 = (CAXException *)__cxa_allocate_exception(0x110uLL);
    CAXException::CAXException(v86, "Beam compositions size doesn't match expected from algo order", v85);
  }
LABEL_115:
  v119 = CFArrayCreateMutable(0, 0, MEMORY[0x1E0C9B378]);
  v120 = 257;
  v107 = CFArrayCreateMutable(0, 0, MEMORY[0x1E0C9B378]);
  v108 = 257;
  value = CFArrayCreateMutable(0, 0, MEMORY[0x1E0C9B378]);
  v104 = 257;
  cf = CFArrayCreateMutable(0, 0, MEMORY[0x1E0C9B378]);
  v91 = 257;
  v88 = 0;
  v89 = 1;
  if (CFDictionaryContainsKey(theDicta, CFSTR("EQBiQuad")))
  {
    CACFDictionary::GetCACFArray(&theDicta, CFSTR("EQBiQuad"), (CACFArray *)&v119);
    if (v119)
    {
      if (-858993459 * CFArrayGetCount(v119) >= 0x33333334)
      {
        if (os_log_type_enabled(0, OS_LOG_TYPE_ERROR))
        {
          CAX4CCString::CAX4CCString((CAX4CCString *)v111, 0xFFFFFFFF);
          *(_DWORD *)buf = 136315906;
          *(_QWORD *)&buf[4] = "AUCircArray.mm";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = 834;
          v113 = 2080;
          p_valuePtr = (CFArrayRef *)v111;
          v115 = 2080;
          v116 = "EQBQ array length not a multiple of 5, invalid";
          _os_log_impl(&dword_1B5ED0000, 0, OS_LOG_TYPE_ERROR, "%25s:%-5d about to throw %s: %s", buf, 0x26u);
        }
        v87 = (CAXException *)__cxa_allocate_exception(0x110uLL);
        CAXException::CAXException(v87, "EQBQ array length not a multiple of 5, invalid", -1);
      }
    }
  }
  if (CFDictionaryContainsKey(theDicta, CFSTR("DriverBQs")))
  {
    CACFDictionary::GetCACFArray(&theDicta, CFSTR("DriverBQs"), (CACFArray *)&v107);
    v65 = (int)v107;
    if (v107)
      v65 = CFArrayGetCount(v107);
    if (v65 != v15)
    {
      if (os_log_type_enabled(0, OS_LOG_TYPE_ERROR))
      {
        CAX4CCString::CAX4CCString((CAX4CCString *)v111, 0xFFFFFFFF);
        *(_DWORD *)buf = 136315906;
        *(_QWORD *)&buf[4] = "AUCircArray.mm";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 838;
        v113 = 2080;
        p_valuePtr = (CFArrayRef *)v111;
        v115 = 2080;
        v116 = "Driver BQ array does not have the same number of drivers as spksInRing";
        _os_log_impl(&dword_1B5ED0000, 0, OS_LOG_TYPE_ERROR, "%25s:%-5d about to throw %s: %s", buf, 0x26u);
      }
      v83 = (CAXException *)__cxa_allocate_exception(0x110uLL);
      CAXException::CAXException(v83, "Driver BQ array does not have the same number of drivers as spksInRing", -1);
    }
  }
  if (CFDictionaryContainsKey(theDicta, CFSTR("DriverMasks")))
  {
    CACFDictionary::GetCACFArray(&theDicta, CFSTR("DriverMasks"), (CACFArray *)&value);
    v66 = (int)value;
    if (value)
      v66 = CFArrayGetCount((CFArrayRef)value);
    if (v66 != v15)
    {
      if (os_log_type_enabled(0, OS_LOG_TYPE_ERROR))
      {
        CAX4CCString::CAX4CCString((CAX4CCString *)v111, 0xFFFFFFFF);
        *(_DWORD *)buf = 136315906;
        *(_QWORD *)&buf[4] = "AUCircArray.mm";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 842;
        v113 = 2080;
        p_valuePtr = (CFArrayRef *)v111;
        v115 = 2080;
        v116 = "Driver masks array does not have the same number of drivers as spksInRing";
        _os_log_impl(&dword_1B5ED0000, 0, OS_LOG_TYPE_ERROR, "%25s:%-5d about to throw %s: %s", buf, 0x26u);
      }
      v84 = (CAXException *)__cxa_allocate_exception(0x110uLL);
      CAXException::CAXException(v84, "Driver masks array does not have the same number of drivers as spksInRing", -1);
    }
  }
  if (CFDictionaryContainsKey(theDicta, CFSTR("BeamDescriptions")))
    CACFDictionary::GetCACFArray(&theDicta, CFSTR("BeamDescriptions"), (CACFArray *)&cf);
  if (CFDictionaryContainsKey(theDicta, CFSTR("Version")))
  {
    v89 = 1;
    if (theDicta)
    {
      v67 = CFDictionaryGetValue(theDicta, CFSTR("Version"));
      v68 = v67;
      if (v67)
      {
        v69 = CFGetTypeID(v67);
        if (v69 == CFStringGetTypeID())
          CACFString::operator=((uint64_t)&v88, v68);
      }
    }
  }
  v70 = CFDictionaryContainsKey(theDicta, CFSTR("LatencySamples"));
  v71 = (int *)((char *)this + 2984);
  if (v70)
    CACFDictionary::GetSInt32((uint64_t)theDicta, CFSTR("LatencySamples"), v71);
  else
    *v71 = 0;
  CACFArray::operator=((uint64_t)this + 2824, (uint64_t)&theArray);
  CACFArray::operator=((uint64_t)this + 2840, (uint64_t)&Mutable);
  CACFArray::operator=((uint64_t)this + 2856, (uint64_t)&v94);
  CACFArray::operator=((uint64_t)this + 2872, (uint64_t)&v92);
  CACFArray::operator=((uint64_t)this + 2888, (uint64_t)&valuePtr);
  CACFArray::operator=((uint64_t)this + 2968, (uint64_t)&cf);
  CACFString::operator=((uint64_t)this + 2952, (uint64_t)&v88);
  CACFArray::operator=((uint64_t)this + 2904, (uint64_t)&v119);
  CACFArray::operator=((uint64_t)this + 2920, (uint64_t)&v107);
  CACFArray::operator=((uint64_t)this + 2936, (uint64_t)&value);
  CACFDictionary::operator=((uint64_t)this + 2808, theDict);
  v72 = (const __CFArray *)*((_QWORD *)this + 357);
  if (v72)
    LODWORD(v72) = CFArrayGetCount(v72);
  if ((_DWORD)v72 != Count)
  {
    v73 = 8;
    do
    {
      (*(void (**)(AUCircArray *, uint64_t, _QWORD, uint64_t))(*(_QWORD *)this + 432))(this, 4, 0, v73);
      v73 = (v73 + 1);
    }
    while ((_DWORD)v73 != 16);
    (*(void (**)(AUCircArray *, uint64_t, _QWORD, _QWORD))(*(_QWORD *)this + 432))(this, 4, 0, 0);
  }
  CACFString::~CACFString((CACFString *)&v88);
  CACFArray::~CACFArray((CACFArray *)&cf);
  CACFArray::~CACFArray((CACFArray *)&value);
  CACFArray::~CACFArray((CACFArray *)&v107);
  CACFArray::~CACFArray((CACFArray *)&v119);
  CACFArray::~CACFArray((CACFArray *)&v121);
  CACFArray::~CACFArray((CACFArray *)&v109);
  CACFArray::~CACFArray((CACFArray *)&__p);
  CACFArray::~CACFArray((CACFArray *)&valuePtr);
  CACFArray::~CACFArray((CACFArray *)&v92);
  CACFArray::~CACFArray((CACFArray *)&v94);
  if (v96.__begin_)
  {
    v96.__end_ = v96.__begin_;
    operator delete(v96.__begin_);
  }
  CACFArray::~CACFArray((CACFArray *)&Mutable);
  CACFArray::~CACFArray((CACFArray *)&theArray);
  CACFDictionary::~CACFDictionary((CACFDictionary *)&theDicta);
}

void sub_1B637725C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13, uint64_t a14, char a15, uint64_t a16, void *__p, uint64_t a18, uint64_t a19, char a20,uint64_t a21,char a22,uint64_t a23,char a24,uint64_t a25,char a26,uint64_t a27,void *a28,uint64_t a29,uint64_t a30,char a31,uint64_t a32,char a33)
{
  uint64_t v33;

  CACFNumber::~CACFNumber((CACFNumber *)(v33 - 208));
  CACFArray::~CACFArray((CACFArray *)&a20);
  CACFArray::~CACFArray((CACFArray *)&a22);
  CACFDictionary::~CACFDictionary((CACFDictionary *)&a24);
  _Unwind_Resume(a1);
}

uint64_t CACFString::operator=(uint64_t a1, uint64_t a2)
{
  const void *v3;
  BOOL v5;
  int v6;
  BOOL v7;

  v3 = *(const void **)a2;
  if (*(_QWORD *)a2 != *(_QWORD *)a1)
  {
    if (*(_QWORD *)a1)
      v5 = *(_BYTE *)(a1 + 8) == 0;
    else
      v5 = 1;
    if (!v5)
    {
      CFRelease(*(CFTypeRef *)a1);
      v3 = *(const void **)a2;
    }
    *(_QWORD *)a1 = v3;
    v6 = *(unsigned __int8 *)(a2 + 8);
    *(_BYTE *)(a1 + 8) = v6;
    if (v6)
      v7 = v3 == 0;
    else
      v7 = 1;
    if (!v7)
      CFRetain(v3);
  }
  return a1;
}

_QWORD *std::vector<AUChannelInfo>::vector(_QWORD *a1, _DWORD *a2)
{
  _DWORD *v4;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  v4 = operator new(4uLL);
  *a1 = v4;
  a1[1] = v4;
  a1[2] = v4 + 1;
  *v4 = *a2;
  a1[1] = v4 + 1;
  return a1;
}

BOOL ca::concurrent::deferred_deletion_queue<CircArrayKernel,10ul,std::default_delete<CircArrayKernel>>::pop(uint64_t a1, CircArrayKernel **a2)
{
  _BOOL8 v4;
  CircArrayKernel *v5;
  CircArrayKernel *v6;
  std::runtime_error *exception;
  CircArrayKernel *v9;
  CircArrayKernel *v10;

  v10 = 0;
  v4 = boost::lockfree::queue<std::vector<std::vector<float>> *,boost::lockfree::capacity<10ul>>::pop<std::vector<std::vector<float>> *>((unsigned int *)(a1 + 64), &v10);
  if (v4)
  {
    v5 = v10;
    if (!v10)
      __assert_rtn("pop", "deferred_deletion_queue.h", 113, "pendingObject");
    v6 = *a2;
    if (*a2)
    {
      *a2 = 0;
      v9 = v6;
      if (!boost::lockfree::queue<std::vector<std::vector<float>> *,boost::lockfree::capacity<10ul>>::do_push<false>(a1 + 1024, &v9))
      {
        exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(exception, "trash queue exceeded capacity, object memory leaked");
      }
    }
    std::unique_ptr<CircArrayKernel>::reset[abi:ne180100](a2, v5);
  }
  return v4;
}

void sub_1B6377704(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t *AUCircArray::ForwardParamsToKernel(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned int v5;
  uint64_t **v6;
  int v7;
  int v8;
  uint64_t *result;
  uint64_t v10;
  float v11;
  float v12;
  int v13;
  int v14;
  unsigned int v15;
  unsigned int *v16;

  if (!(_DWORD)a3)
  {
    LODWORD(v16) = 0;
    (*(void (**)(uint64_t, uint64_t, uint64_t, _QWORD, unsigned int **))(*(_QWORD *)a1 + 144))(a1, 33, a3, 0, &v16);
    v10 = 0;
    v11 = *(float *)&v16;
    while (v10 < *(_DWORD *)(ausdk::AUScope::SafeGetElement((ausdk::AUScope *)(a1 + 80), 0) + 108))
    {
      LODWORD(v16) = 0;
      (*(void (**)(uint64_t, uint64_t, _QWORD, _QWORD, unsigned int **))(*(_QWORD *)a1 + 144))(a1, v10, 0, 0, &v16);
      v12 = *(float *)&v16 - v11;
      v15 = v10;
      v16 = &v15;
      *((float *)std::__tree<std::__value_type<unsigned int,float>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,float>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,float>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>((uint64_t **)(a2 + 8), &v15, (uint64_t)&std::piecewise_construct, &v16)+ 8) = v12;
      LODWORD(v16) = 0;
      (*(void (**)(uint64_t, _QWORD, _QWORD, _QWORD, unsigned int **))(*(_QWORD *)a1 + 144))(a1, (v10 + 8), 0, 0, &v16);
      v13 = (int)v16;
      v15 = v10 + 8;
      v16 = &v15;
      *((_DWORD *)std::__tree<std::__value_type<unsigned int,float>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,float>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,float>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>((uint64_t **)(a2 + 8), &v15, (uint64_t)&std::piecewise_construct, &v16)+ 8) = v13;
      LODWORD(v16) = 0;
      (*(void (**)(uint64_t, _QWORD, _QWORD, _QWORD, unsigned int **))(*(_QWORD *)a1 + 144))(a1, (v10 + 16), 0, 0, &v16);
      v14 = (int)v16;
      v15 = v10 + 16;
      v16 = &v15;
      *((_DWORD *)std::__tree<std::__value_type<unsigned int,float>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,float>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,float>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>((uint64_t **)(a2 + 8), &v15, (uint64_t)&std::piecewise_construct, &v16)+ 8) = v14;
      v10 = (v10 + 1);
    }
  }
  v5 = 0;
  v6 = (uint64_t **)(a2 + 8);
  while (v5 < *(_DWORD *)(ausdk::AUScope::SafeGetElement((ausdk::AUScope *)(a1 + 80), 0) + 108))
  {
    LODWORD(v16) = 0;
    (*(void (**)(uint64_t, _QWORD, _QWORD, _QWORD, unsigned int **))(*(_QWORD *)a1 + 144))(a1, v5 + 24, 0, 0, &v16);
    v7 = (int)v16;
    v15 = v5 + 24;
    v16 = &v15;
    *((_DWORD *)std::__tree<std::__value_type<unsigned int,float>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,float>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,float>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>(v6, &v15, (uint64_t)&std::piecewise_construct, &v16)+ 8) = v7;
    ++v5;
  }
  LODWORD(v16) = 0;
  (*(void (**)(uint64_t, uint64_t, _QWORD, _QWORD, unsigned int **))(*(_QWORD *)a1 + 144))(a1, 32, 0, 0, &v16);
  v8 = (int)v16;
  v15 = 32;
  v16 = &v15;
  result = std::__tree<std::__value_type<unsigned int,float>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,float>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,float>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>(v6, &v15, (uint64_t)&std::piecewise_construct, &v16);
  *((_DWORD *)result + 8) = v8;
  return result;
}

os_log_t ___Z19AUCircArrayLogScopev_block_invoke()
{
  _QWORD *v0;
  os_log_t result;

  v0 = (_QWORD *)operator new();
  v0[1] = 0;
  result = os_log_create("com.apple.coreaudio", "aucircarray");
  *v0 = result;
  AUCircArrayLogScope(void)::scope = (uint64_t)v0;
  return result;
}

CircArrayKernel *std::unique_ptr<CircArrayKernel>::reset[abi:ne180100](CircArrayKernel **a1, CircArrayKernel *a2)
{
  CircArrayKernel *result;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    CircArrayKernel::~CircArrayKernel(result);
    JUMPOUT(0x1BCC95CE0);
  }
  return result;
}

void CircArrayKernel::~CircArrayKernel(CircArrayKernel *this)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  uint64_t i;
  void *v9;
  uint64_t j;
  void *v11;
  uint64_t k;
  void *v13;
  void *v14;
  uint64_t v15;
  void *v16;
  void *v17;
  uint64_t v18;
  void *v19;
  void *v20;
  void *v21;
  void **v22;

  v2 = (void *)*((_QWORD *)this + 390);
  if (v2)
  {
    *((_QWORD *)this + 391) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 387);
  if (v3)
  {
    *((_QWORD *)this + 388) = v3;
    operator delete(v3);
  }
  v4 = (void *)*((_QWORD *)this + 384);
  if (v4)
  {
    *((_QWORD *)this + 385) = v4;
    operator delete(v4);
  }
  v22 = (void **)((char *)this + 3048);
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v22);
  v22 = (void **)((char *)this + 3024);
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v22);
  v22 = (void **)((char *)this + 3000);
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v22);
  v22 = (void **)((char *)this + 2976);
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v22);
  v22 = (void **)((char *)this + 2952);
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v22);
  v5 = (void *)*((_QWORD *)this + 366);
  if (v5)
  {
    *((_QWORD *)this + 367) = v5;
    operator delete(v5);
  }
  v22 = (void **)((char *)this + 2904);
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v22);
  v22 = (void **)((char *)this + 2880);
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v22);
  v22 = (void **)((char *)this + 2856);
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v22);
  v22 = (void **)((char *)this + 2832);
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v22);
  v6 = (void *)*((_QWORD *)this + 351);
  if (v6)
  {
    *((_QWORD *)this + 352) = v6;
    operator delete(v6);
  }
  v7 = (void *)*((_QWORD *)this + 348);
  if (v7)
  {
    *((_QWORD *)this + 349) = v7;
    operator delete(v7);
  }
  std::unique_ptr<SmartFIR>::reset[abi:ne180100]((uint64_t *)this + 347, 0);
  for (i = 0; i != -48; i -= 24)
  {
    v9 = *(void **)((char *)this + i + 2752);
    if (v9)
    {
      *(_QWORD *)((char *)this + i + 2760) = v9;
      operator delete(v9);
    }
  }
  for (j = 0; j != -48; j -= 24)
  {
    v11 = *(void **)((char *)this + j + 2704);
    if (v11)
    {
      *(_QWORD *)((char *)this + j + 2712) = v11;
      operator delete(v11);
    }
  }
  for (k = 2672; k != 2656; k -= 8)
    std::unique_ptr<SmartFIR>::reset[abi:ne180100]((uint64_t *)((char *)this + k), 0);
  v22 = (void **)((char *)this + 2640);
  std::vector<FreqDomainConvolver>::__destroy_vector::operator()[abi:ne180100](&v22);
  v22 = (void **)((char *)this + 2616);
  std::vector<FreqDomainConvolver>::__destroy_vector::operator()[abi:ne180100](&v22);
  v13 = (void *)*((_QWORD *)this + 324);
  if (v13)
  {
    *((_QWORD *)this + 325) = v13;
    operator delete(v13);
  }
  v14 = (void *)*((_QWORD *)this + 321);
  if (v14)
  {
    *((_QWORD *)this + 322) = v14;
    operator delete(v14);
  }
  v15 = *((_QWORD *)this + 319);
  *((_QWORD *)this + 319) = 0;
  if (v15)
    (*((void (**)(void))this + 320))();
  v16 = (void *)*((_QWORD *)this + 316);
  if (v16)
  {
    *((_QWORD *)this + 317) = v16;
    operator delete(v16);
  }
  v17 = (void *)*((_QWORD *)this + 313);
  if (v17)
  {
    *((_QWORD *)this + 314) = v17;
    operator delete(v17);
  }
  v18 = *((_QWORD *)this + 311);
  *((_QWORD *)this + 311) = 0;
  if (v18)
    (*((void (**)(void))this + 312))();
  v19 = (void *)*((_QWORD *)this + 308);
  if (v19)
  {
    *((_QWORD *)this + 309) = v19;
    operator delete(v19);
  }
  v22 = (void **)((char *)this + 2440);
  std::vector<CDSPSplitComplex>::__destroy_vector::operator()[abi:ne180100](&v22);
  v22 = (void **)((char *)this + 2416);
  std::vector<CDSPSplitComplex>::__destroy_vector::operator()[abi:ne180100](&v22);
  v22 = (void **)((char *)this + 2392);
  std::vector<CircularDelay>::__destroy_vector::operator()[abi:ne180100](&v22);
  *((_QWORD *)this + 32) = &off_1E69D6718;
  ca::concurrent::deferred_deletion_queue<std::vector<std::vector<float>>,10ul,std::default_delete<std::vector<std::vector<float>>>>::~deferred_deletion_queue((uint64_t)this + 320);
  std::unique_ptr<std::vector<std::vector<float>>>::reset[abi:ne180100]((void ***)this + 26, 0);
  v22 = (void **)((char *)this + 184);
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v22);
  v20 = (void *)*((_QWORD *)this + 20);
  if (v20)
  {
    *((_QWORD *)this + 21) = v20;
    operator delete(v20);
  }
  v21 = (void *)*((_QWORD *)this + 17);
  if (v21)
  {
    *((_QWORD *)this + 18) = v21;
    operator delete(v21);
  }
  std::__tree<std::__value_type<double,int>,std::__map_value_compare<double,std::__value_type<double,int>,std::less<double>,true>,std::allocator<std::__value_type<double,int>>>::destroy((uint64_t)this + 8, *((_QWORD **)this + 2));
}

void AUCircArray::CreateKernel(AUCircArray *this, uint64_t a2)
{
  uint64_t v2;
  std::vector<unsigned int>::pointer begin;
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;
  const CFArrayCallBacks *v8;
  _QWORD *v9;
  _QWORD *v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  unint64_t v17;
  const __CFArray *v18;
  _QWORD *v19;
  const __CFArray *v20;
  const __CFArray **v21;
  const __CFArray *v22;
  unsigned int Count;
  uint64_t v24;
  unsigned int v25;
  const CFArrayCallBacks *v26;
  const __CFArray *v27;
  _QWORD *v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  char *v32;
  char *v33;
  uint64_t v34;
  CFTypeRef v35;
  char *v36;
  void *v37;
  uint64_t i;
  _QWORD *v39;
  uint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  _QWORD *v45;
  _QWORD *v46;
  const __CFArray *v47;
  CFArrayRef *v48;
  const __CFArray *v49;
  unsigned int v50;
  uint64_t v51;
  unint64_t v52;
  char *v53;
  __int128 v54;
  uint64_t v55;
  _BYTE *v56;
  uint64_t v57;
  char *v58;
  char v59;
  unsigned int v60;
  char *v61;
  const __CFArray *v62;
  const __CFBoolean *v63;
  CFTypeID v64;
  BOOL v65;
  CFTypeID v66;
  char *v67;
  uint64_t v68;
  size_t v69;
  char *v70;
  char *v71;
  char *v72;
  char v73;
  void *v74;
  double v75;
  unsigned int v76;
  unsigned int v77;
  uint64_t v78;
  void *v79;
  float v80;
  AUCircArray *v81;
  uint64_t v82;
  CFTypeRef cf[2];
  _QWORD v84[2];
  __int128 v85;
  char *v86;
  void *__p;
  void *v88;
  char *v89;
  uint64_t v90;
  _QWORD *v91;
  unint64_t v92;
  std::vector<unsigned int> v93;
  uint64_t v94[3];
  uint64_t v95[3];
  void *v96[3];
  __int128 v97;
  char *v98;
  CFArrayRef valuePtr;
  __int16 v100;
  __int128 v101;
  char *v102;
  char *v103;
  unint64_t *v104;

  v2 = a2;
  CFHelper::extractVector<float>((uint64_t)v96, (CFArrayRef *)(a2 + 2840));
  CFHelper::extractVectorOfVectors<float>(v95, (CFArrayRef *)(v2 + 2856));
  CFHelper::extractVectorOfVectors<float>(v94, (CFArrayRef *)(v2 + 2872));
  CFHelper::extractVector<unsigned int>(&v93, (CFArrayRef *)(v2 + 2824));
  begin = v93.__begin_;
  v81 = this;
  v82 = v2;
  v5 = 0;
  if (v93.__begin_ == v93.__end_)
  {
    v90 = 0;
    v91 = 0;
    v92 = 0;
  }
  else
  {
    do
    {
      v6 = *begin++;
      v5 += v6;
    }
    while (begin != v93.__end_);
    v7 = 1;
    v8 = (const CFArrayCallBacks *)MEMORY[0x1E0C9B378];
    v90 = 0;
    v91 = 0;
    v92 = 0;
    do
    {
      __p = CFArrayCreateMutable(0, 0, v8);
      LOWORD(v88) = 257;
      CACFArray::GetCACFArray((CFArrayRef *)(v2 + 2888), v7 - 1, (CACFArray *)&__p);
      CFHelper::extractVectorOfVectors<float>((uint64_t *)&v97, (CFArrayRef *)&__p);
      v9 = v91;
      if ((unint64_t)v91 >= v92)
      {
        v11 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v91 - v90) >> 3);
        v12 = v11 + 1;
        if (v11 + 1 > 0xAAAAAAAAAAAAAAALL)
          std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
        if (0x5555555555555556 * ((uint64_t)(v92 - v90) >> 3) > v12)
          v12 = 0x5555555555555556 * ((uint64_t)(v92 - v90) >> 3);
        if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v92 - v90) >> 3) >= 0x555555555555555)
          v13 = 0xAAAAAAAAAAAAAAALL;
        else
          v13 = v12;
        v104 = &v92;
        v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<AUPropertyItem>>(v13);
        v15 = &v14[24 * v11];
        *(_QWORD *)&v101 = v14;
        *((_QWORD *)&v101 + 1) = v15;
        v103 = &v14[24 * v16];
        *(_QWORD *)v15 = 0;
        *((_QWORD *)v15 + 1) = 0;
        *((_QWORD *)v15 + 2) = 0;
        *(_OWORD *)v15 = v97;
        *((_QWORD *)v15 + 2) = v98;
        v97 = 0uLL;
        v98 = 0;
        v102 = v15 + 24;
        std::vector<std::vector<unsigned int>>::__swap_out_circular_buffer(&v90, &v101);
        v10 = v91;
        std::__split_buffer<std::vector<std::vector<float>>>::~__split_buffer((uint64_t)&v101);
      }
      else
      {
        *v91 = 0;
        v9[1] = 0;
        v9[2] = 0;
        *(_OWORD *)v9 = v97;
        v9[2] = v98;
        v97 = 0uLL;
        v98 = 0;
        v10 = v9 + 3;
      }
      v91 = v10;
      *(_QWORD *)&v101 = &v97;
      std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v101);
      CACFArray::~CACFArray((CACFArray *)&__p);
      v17 = v7++;
    }
    while (v17 < v93.__end_ - v93.__begin_);
  }
  v18 = *(const __CFArray **)(v2 + 2904);
  if (v18 && CFArrayGetCount(v18))
  {
    CFHelper::extractVector<double>((uint64_t)&__p, (CFArrayRef *)(v2 + 2904));
  }
  else
  {
    v19 = operator new(0x28uLL);
    v88 = v19 + 5;
    v89 = (char *)(v19 + 5);
    v19[4] = 0;
    *(_OWORD *)v19 = xmmword_1B665D8D8;
    *((_OWORD *)v19 + 1) = *(_OWORD *)algn_1B665D8E8;
    __p = v19;
  }
  v85 = 0uLL;
  v86 = 0;
  v20 = *(const __CFArray **)(v2 + 2920);
  if (v20 && CFArrayGetCount(v20))
  {
    v21 = (const __CFArray **)(v2 + 2920);
    cf[0] = 0;
    cf[1] = 0;
    v84[0] = 0;
    v22 = *(const __CFArray **)(v2 + 2920);
    if (v22)
    {
      Count = CFArrayGetCount(v22);
      if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v84[0] - (unint64_t)cf[0]) >> 3) < Count)
      {
        v104 = v84;
        *(_QWORD *)&v101 = std::__allocate_at_least[abi:ne180100]<std::allocator<AUPropertyItem>>(Count);
        *((_QWORD *)&v101 + 1) = v101 + (char *)cf[1] - (char *)cf[0];
        v102 = (char *)*((_QWORD *)&v101 + 1);
        v103 = (char *)(v101 + 24 * v24);
        std::vector<std::vector<unsigned int>>::__swap_out_circular_buffer(cf, &v101);
        std::__split_buffer<std::vector<unsigned int>>::~__split_buffer((uint64_t)&v101);
      }
    }
    v25 = 0;
    v26 = (const CFArrayCallBacks *)MEMORY[0x1E0C9B378];
    while (1)
    {
      v27 = *v21;
      if (*v21)
        LODWORD(v27) = CFArrayGetCount(v27);
      if (v25 >= v27)
        break;
      valuePtr = CFArrayCreateMutable(0, 0, v26);
      v100 = 257;
      CACFArray::GetCACFArray((CFArrayRef *)(v2 + 2920), v25, (CACFArray *)&valuePtr);
      CFHelper::extractVector<double>((uint64_t)&v97, &valuePtr);
      v28 = cf[1];
      if (cf[1] >= (CFTypeRef)v84[0])
      {
        v29 = 0xAAAAAAAAAAAAAAABLL * (((char *)cf[1] - (char *)cf[0]) >> 3);
        v30 = v29 + 1;
        if (v29 + 1 > 0xAAAAAAAAAAAAAAALL)
          std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
        if (0x5555555555555556 * ((uint64_t)(v84[0] - (unint64_t)cf[0]) >> 3) > v30)
          v30 = 0x5555555555555556 * ((uint64_t)(v84[0] - (unint64_t)cf[0]) >> 3);
        if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v84[0] - (unint64_t)cf[0]) >> 3) >= 0x555555555555555)
          v31 = 0xAAAAAAAAAAAAAAALL;
        else
          v31 = v30;
        v104 = v84;
        v32 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<AUPropertyItem>>(v31);
        v33 = &v32[24 * v29];
        *(_QWORD *)&v101 = v32;
        *((_QWORD *)&v101 + 1) = v33;
        v103 = &v32[24 * v34];
        *(_QWORD *)v33 = 0;
        *((_QWORD *)v33 + 1) = 0;
        *((_QWORD *)v33 + 2) = 0;
        *(_OWORD *)v33 = v97;
        *((_QWORD *)v33 + 2) = v98;
        v97 = 0uLL;
        v98 = 0;
        v102 = v33 + 24;
        std::vector<std::vector<unsigned int>>::__swap_out_circular_buffer(cf, &v101);
        v35 = cf[1];
        std::__split_buffer<std::vector<unsigned int>>::~__split_buffer((uint64_t)&v101);
        cf[1] = v35;
        if ((_QWORD)v97)
        {
          *((_QWORD *)&v97 + 1) = v97;
          operator delete((void *)v97);
        }
      }
      else
      {
        *(_QWORD *)cf[1] = 0;
        v28[1] = 0;
        v28[2] = 0;
        *(_OWORD *)v28 = v97;
        v28[2] = v98;
        v97 = 0uLL;
        v98 = 0;
        cf[1] = v28 + 3;
      }
      CACFArray::~CACFArray((CACFArray *)&valuePtr);
      ++v25;
    }
    std::vector<std::vector<float>>::__vdeallocate((uint64_t *)&v85);
    v85 = *(_OWORD *)cf;
    v86 = (char *)v84[0];
    cf[1] = 0;
    v84[0] = 0;
    cf[0] = 0;
    *(_QWORD *)&v101 = cf;
    std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v101);
  }
  else
  {
    v36 = (char *)operator new(0x28uLL);
    v37 = v36;
    for (i = 0; i != 40; i += 8)
      *(_QWORD *)&v36[i] = 0;
    v101 = 0uLL;
    v102 = 0;
    *(_QWORD *)&v97 = &v101;
    BYTE8(v97) = 0;
    if (v5)
    {
      if ((v5 & 0x80000000) != 0)
        std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
      v39 = std::__allocate_at_least[abi:ne180100]<std::allocator<AUPropertyItem>>((int)v5);
      *(_QWORD *)&v101 = v39;
      *((_QWORD *)&v101 + 1) = v39;
      v102 = (char *)&v39[3 * v40];
      v41 = &v39[3 * (int)v5];
      v42 = 24 * (int)v5;
      do
      {
        *v39 = 0;
        v39[1] = 0;
        v39[2] = 0;
        std::vector<double>::__init_with_size[abi:ne180100]<double *,double *>(v39, v37, (uint64_t)v37 + 40, 5uLL);
        v39 += 3;
        v42 -= 24;
      }
      while (v42);
      *((_QWORD *)&v101 + 1) = v41;
    }
    std::vector<std::vector<float>>::__vdeallocate((uint64_t *)&v85);
    v85 = v101;
    v86 = v102;
    v102 = 0;
    v101 = 0uLL;
    *(_QWORD *)&v97 = &v101;
    std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v97);
    operator delete(v37);
    if (v5)
    {
      v43 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)&v85 + 1) - v85) >> 3);
      v44 = v5;
      v45 = (_QWORD *)(v85 + 8);
      do
      {
        if (!v43)
          std::vector<std::vector<float>>::__throw_out_of_range[abi:ne180100]();
        v46 = (_QWORD *)*(v45 - 1);
        if ((_QWORD *)*v45 == v46)
          std::vector<std::vector<float>>::__throw_out_of_range[abi:ne180100]();
        *v46 = 0x3FF0000000000000;
        v45 += 3;
        --v43;
        --v44;
      }
      while (v44);
    }
  }
  v101 = 0uLL;
  v102 = 0;
  v47 = *(const __CFArray **)(v2 + 2936);
  if (v47 && CFArrayGetCount(v47))
  {
    v48 = (CFArrayRef *)(v2 + 2936);
    v97 = 0uLL;
    v98 = 0;
    v49 = *(const __CFArray **)(v2 + 2936);
    if (v49 && (v50 = CFArrayGetCount(v49), (v51 = v50) != 0))
    {
      v52 = (unint64_t)operator new(v50);
      v53 = (char *)(v52 + v51);
    }
    else
    {
      v53 = 0;
      v52 = 0;
    }
    v59 = 0;
    v60 = 0;
    v61 = (char *)v52;
    while (1)
    {
      v62 = *v48;
      if (*v48)
        LODWORD(v62) = CFArrayGetCount(v62);
      if (v60 >= v62)
      {
        *(_QWORD *)&v97 = v52;
        *((_QWORD *)&v97 + 1) = v61;
        *(_QWORD *)&v54 = v52;
        v101 = v97;
        v102 = v53;
        goto LABEL_99;
      }
      cf[0] = 0;
      if (CACFArray::GetCFType(v48, v60, cf))
      {
        v63 = (const __CFBoolean *)cf[0];
        if (cf[0])
        {
          v64 = CFGetTypeID(cf[0]);
          if (v64 == CFBooleanGetTypeID())
          {
            v65 = CFBooleanGetValue(v63) == 0;
          }
          else
          {
            v66 = CFGetTypeID(v63);
            if (v66 != CFNumberGetTypeID())
              goto LABEL_77;
            LODWORD(valuePtr) = 0;
            CFNumberGetValue(v63, kCFNumberSInt32Type, &valuePtr);
            v65 = (_DWORD)valuePtr == 0;
          }
          v59 = !v65;
        }
      }
LABEL_77:
      if (v61 >= v53)
      {
        v68 = (uint64_t)&v61[-v52 + 1];
        if (v68 < 0)
        {
          *((_QWORD *)&v97 + 1) = v61;
          v98 = v53;
          *(_QWORD *)&v97 = v52;
          std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
        }
        if (2 * (uint64_t)&v53[-v52] > (unint64_t)v68)
          v68 = 2 * (_QWORD)&v53[-v52];
        if ((unint64_t)&v53[-v52] >= 0x3FFFFFFFFFFFFFFFLL)
          v69 = 0x7FFFFFFFFFFFFFFFLL;
        else
          v69 = v68;
        if (v69)
          v70 = (char *)operator new(v69);
        else
          v70 = 0;
        v71 = &v61[(_QWORD)v70 - v52];
        *v71 = v59;
        v67 = v71 + 1;
        if (v61 != (char *)v52)
        {
          v72 = &v61[~v52];
          do
          {
            v73 = *--v61;
            (v72--)[(_QWORD)v70] = v73;
          }
          while (v61 != (char *)v52);
          v71 = v70;
        }
        v53 = &v70[v69];
        if (v52)
          operator delete((void *)v52);
        v52 = (unint64_t)v71;
      }
      else
      {
        *v61 = v59;
        v67 = v61 + 1;
      }
      ++v60;
      v61 = v67;
      v2 = v82;
    }
  }
  v98 = 0;
  v54 = 0uLL;
  v97 = 0u;
  if (v5)
  {
    v55 = (int)v5;
    std::vector<unsigned char>::__vallocate[abi:ne180100](&v97, (int)v5);
    v56 = (_BYTE *)*((_QWORD *)&v97 + 1);
    v57 = *((_QWORD *)&v97 + 1) + (int)v5;
    do
    {
      *v56++ = 1;
      --v55;
    }
    while (v55);
    *((_QWORD *)&v97 + 1) = v57;
    v58 = v98;
    v54 = v97;
  }
  else
  {
    v58 = 0;
  }
  v101 = v54;
  v102 = v58;
LABEL_99:
  v74 = (void *)v54;
  v75 = *(double *)(ausdk::AUScope::SafeGetElement((ausdk::AUScope *)(v2 + 128), 0) + 80);
  v76 = *(_DWORD *)(ausdk::AUScope::SafeGetElement((ausdk::AUScope *)(v2 + 80), 0) + 108);
  v77 = *(_DWORD *)(v2 + 336);
  if (AUJBase::AUJBaseLogScope(void)::once != -1)
    dispatch_once(&AUJBase::AUJBaseLogScope(void)::once, &__block_literal_global_20859);
  v78 = AUJBase::AUJBaseLogScope(void)::scope;
  v79 = operator new(0xC80uLL, (std::align_val_t)0x40uLL);
  v80 = v75;
  CircArrayKernel::CircArrayKernel((uint64_t)v79, v77, v76, *(_DWORD *)(v2 + 3000), (uint64_t)&v93, (uint64_t)v96, v95, v94, v80, &v90, &__p, &v85, (uint64_t *)&v101, v78);
  *(_QWORD *)v81 = v79;
  AUCircArray::ForwardParamsToKernel(v2, (uint64_t)v79, 0);
  if (v74)
    operator delete(v74);
  *(_QWORD *)&v101 = &v85;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v101);
  if (__p)
  {
    v88 = __p;
    operator delete(__p);
  }
  *(_QWORD *)&v101 = &v90;
  std::vector<std::vector<std::vector<DspLib::Biquad::Section>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v101);
  if (v93.__begin_)
  {
    v93.__end_ = v93.__begin_;
    operator delete(v93.__begin_);
  }
  *(_QWORD *)&v101 = v94;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v101);
  *(_QWORD *)&v101 = v95;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v101);
  if (v96[0])
  {
    v96[1] = v96[0];
    operator delete(v96[0]);
  }
}

void sub_1B6378608(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,uint64_t a27,char a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,uint64_t a33,char a34,uint64_t a35,uint64_t a36,char a37)
{
  uint64_t v37;
  void *v39;

  *(_QWORD *)(v37 - 192) = &a17;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v37 - 192));
  *(_QWORD *)(v37 - 192) = &a21;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v37 - 192));
  if (__p)
  {
    a26 = (uint64_t)__p;
    operator delete(__p);
  }
  *(_QWORD *)(v37 - 192) = &a28;
  std::vector<std::vector<std::vector<DspLib::Biquad::Section>>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v37 - 192));
  if (a31)
  {
    a32 = (uint64_t)a31;
    operator delete(a31);
  }
  *(_QWORD *)(v37 - 192) = &a34;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v37 - 192));
  *(_QWORD *)(v37 - 192) = &a37;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v37 - 192));
  v39 = *(void **)(v37 - 216);
  if (v39)
  {
    *(_QWORD *)(v37 - 208) = v39;
    operator delete(v39);
  }
  _Unwind_Resume(a1);
}

BOOL ca::concurrent::deferred_deletion_queue<CircArrayKernel,10ul,std::default_delete<CircArrayKernel>>::drain_trash(uint64_t a1)
{
  unsigned int *v1;
  _BOOL8 result;
  CircArrayKernel *v3;

  v3 = 0;
  v1 = (unsigned int *)(a1 + 1024);
  while (1)
  {
    result = boost::lockfree::queue<std::vector<std::vector<float>> *,boost::lockfree::capacity<10ul>>::pop<std::vector<std::vector<float>> *>(v1, &v3);
    if (!result)
      break;
    if (!v3)
      __assert_rtn("drain_trash", "deferred_deletion_queue.h", 146, "trashObject");
    CircArrayKernel::~CircArrayKernel(v3);
    MEMORY[0x1BCC95CE0]();
  }
  return result;
}

uint64_t ca::concurrent::deferred_deletion_queue<CircArrayKernel,10ul,std::default_delete<CircArrayKernel>>::~deferred_deletion_queue(uint64_t a1)
{
  CircArrayKernel *v3;

  *(_QWORD *)a1 = &off_1E69D66F8;
  ca::concurrent::deferred_deletion_queue<CircArrayKernel,10ul,std::default_delete<CircArrayKernel>>::drain_trash(a1);
  v3 = 0;
  while (boost::lockfree::queue<std::vector<std::vector<float>> *,boost::lockfree::capacity<10ul>>::pop<std::vector<std::vector<float>> *>((unsigned int *)(a1 + 64), &v3))
  {
    if (v3)
    {
      CircArrayKernel::~CircArrayKernel(v3);
      MEMORY[0x1BCC95CE0]();
    }
  }
  boost::lockfree::queue<std::vector<std::vector<float>> *,boost::lockfree::capacity<10ul>>::~queue((unsigned int *)(a1 + 1024));
  boost::lockfree::queue<std::vector<std::vector<float>> *,boost::lockfree::capacity<10ul>>::~queue((unsigned int *)(a1 + 64));
  return a1;
}

void ca::concurrent::deferred_deletion_queue<CircArrayKernel,10ul,std::default_delete<CircArrayKernel>>::~deferred_deletion_queue(uint64_t a1)
{
  ca::concurrent::deferred_deletion_queue<CircArrayKernel,10ul,std::default_delete<CircArrayKernel>>::~deferred_deletion_queue(a1);
  JUMPOUT(0x1BCC95CE0);
}

_QWORD *ca::concurrent::deferred_deletion_stash<CircArrayKernel,10ul,std::default_delete<CircArrayKernel>>::~deferred_deletion_stash(_QWORD *a1)
{
  *a1 = &off_1E69D66D8;
  ca::concurrent::deferred_deletion_queue<CircArrayKernel,10ul,std::default_delete<CircArrayKernel>>::~deferred_deletion_queue((uint64_t)(a1 + 8));
  return a1;
}

void ca::concurrent::deferred_deletion_stash<CircArrayKernel,10ul,std::default_delete<CircArrayKernel>>::~deferred_deletion_stash(_QWORD *a1)
{
  *a1 = &off_1E69D66D8;
  ca::concurrent::deferred_deletion_queue<CircArrayKernel,10ul,std::default_delete<CircArrayKernel>>::~deferred_deletion_queue((uint64_t)(a1 + 8));
  JUMPOUT(0x1BCC95CE0);
}

void SincKernelFactorySingleton::SincKernelFactorySingleton(SincKernelFactorySingleton *this)
{
  _QWORD *v1;
  char *v2;
  uint64_t v3;

  SincKernelFactorySingleton::instance(void)::gSincKernelFactorySingleton = 0;
  caulk::pooled_semaphore_mutex::pooled_semaphore_mutex((caulk::pooled_semaphore_mutex *)&unk_1EF136AB0);
  v1 = (_QWORD *)operator new();
  *v1 = 0;
  v1[1] = 0;
  v1[2] = 0;
  v2 = (char *)operator new(0x100uLL);
  *v1 = v2;
  v1[1] = v2;
  v1[2] = v2 + 256;
  v3 = SincKernelFactorySingleton::instance(void)::gSincKernelFactorySingleton;
  SincKernelFactorySingleton::instance(void)::gSincKernelFactorySingleton = (uint64_t)v1;
  if (v3)
    std::default_delete<std::vector<float>>::operator()[abi:ne180100](v3);
}

void sub_1B6378AE8(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v3;

  MEMORY[0x1BCC95CEC](v1, 0x80C40D6874129);
  v3 = SincKernelFactorySingleton::instance(void)::gSincKernelFactorySingleton;
  SincKernelFactorySingleton::instance(void)::gSincKernelFactorySingleton = 0;
  if (v3)
    std::default_delete<std::vector<float>>::operator()[abi:ne180100](v3);
  _Unwind_Resume(a1);
}

void SincKernelFactorySingleton::instance(SincKernelFactorySingleton *this)
{
  unsigned __int8 v1;
  SincKernelFactorySingleton *v2;

  if ((v1 & 1) == 0)
  {
    if ((_DWORD)v2)
    {
      SincKernelFactorySingleton::SincKernelFactorySingleton(v2);
    }
  }
}

void sub_1B6378B7C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t SincKernelFactorySingleton::ReferenceSincKernel(SincKernelFactorySingleton *this, double a2, double a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v10;
  _DWORD *v11;
  double v12;
  unsigned __int8 v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  char *v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  char *v21;
  char *v22;
  KaiserWindow *v23;
  char *v24;
  uint64_t v25;
  __int128 v26;
  char *v27;
  _BYTE *v28;
  _BYTE *v29;
  int64_t v30;
  char *v31;
  char *v32;
  uint64_t v33;
  void *v34;
  float32x4_t *v35;
  uint64_t v36;
  uint64_t v37;
  double v38;
  double v39;
  double v40;
  double v41;
  uint64_t v42;
  int32x4_t v43;
  float32x4_t *v44;
  float32x4_t *v45;
  uint64_t v46;
  int64x2_t v47;
  float64x2_t v48;
  float64x2_t v49;
  float64x2_t v50;
  float32x4_t v51;
  int32x4_t v52;
  long double v53;
  long double v54;
  double v55;
  double v56;
  double v57;
  long double v58;
  uint64_t v59;
  double v60;
  double v61;
  float v62;
  float v63;
  int v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  _DWORD *v68;
  int v69;
  int v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  _DWORD *v82;
  _DWORD *v83;
  uint64_t v84;
  _OWORD *v85;
  __int128 *v86;
  uint64_t v87;
  __int128 v88;
  uint64_t v89;
  _DWORD *v90;
  _DWORD *v91;
  _OWORD *v92;
  __int128 *v93;
  uint64_t v94;
  __int128 v95;
  uint64_t v96;
  _DWORD *v97;
  _DWORD *v98;
  unint64_t v99;
  uint64_t *v100;
  _QWORD *v101;
  uint64_t *v102;
  uint64_t v103;
  uint64_t v104;
  unint64_t v105;
  uint64_t v106;
  unint64_t v107;
  _BYTE *v108;
  uint64_t *v109;
  char *v110;
  unint64_t v111;
  uint64_t v112;
  _OWORD *v113;
  uint64_t *v114;
  uint64_t v115;
  __int128 v116;
  uint64_t v117;
  uint64_t v119;
  uint64_t v120;
  float64x2_t v121;
  long double v122;
  long double v123;
  float64x2_t v124;
  double v125;
  float64x2_t __x;
  double v127;
  float64x2_t v128;
  int32x4_t v129;
  void *v130;
  char v131;
  char *v132;
  KaiserWindow *v133;
  char *v134;
  uint64_t v135;
  uint64_t *v136;
  uint64_t *v137;
  __int128 *v138;
  __int128 *v139;
  uint64_t v140;
  __int128 v141;
  __int128 v142;

  v130 = &unk_1EF136AB0;
  v131 = 1;
  caulk::pooled_semaphore_mutex::_lock((caulk::pooled_semaphore_mutex *)&unk_1EF136AB0);
  v3 = SincKernelFactorySingleton::instance(void)::gSincKernelFactorySingleton;
  v4 = *(_QWORD *)(SincKernelFactorySingleton::instance(void)::gSincKernelFactorySingleton + 8)
     - *(_QWORD *)SincKernelFactorySingleton::instance(void)::gSincKernelFactorySingleton;
  if (!v4)
  {
LABEL_8:
    v8 = operator new();
    *(_QWORD *)v8 = 0;
    *(_OWORD *)(v8 + 8) = xmmword_1B66A2140;
    *(_OWORD *)(v8 + 24) = xmmword_1B66A2150;
    *(_QWORD *)v8 = malloc_type_calloc(0x58BuLL, 4uLL, 0x100004052888210uLL);
    v127 = *(double *)(v8 + 32);
    v10 = (*(_DWORD *)(v8 + 12) * *(_DWORD *)(v8 + 16));
    v11 = (_DWORD *)operator new[]();
    v12 = *(double *)(v8 + 24);
    {
      GetKaiser(unsigned int,double)::sKaiserWindows = 0;
      qword_1ED3378E0 = 0;
      qword_1ED3378E8 = 0;
      qword_1ED3378D8 = 0;
    }
    os_unfair_lock_lock((os_unfair_lock_t)&GetKaiser(unsigned int,double)::sKaiserWindows);
    v14 = qword_1ED3378E0;
    if (qword_1ED3378D8 != qword_1ED3378E0)
    {
      v15 = qword_1ED3378D8;
      while (*(_DWORD *)v15 != (_DWORD)v10 - 1 || *(double *)(v15 + 8) != v12)
      {
        v15 += 40;
        if (v15 == qword_1ED3378E0)
          goto LABEL_14;
      }
      v22 = (char *)(v15 + 16);
LABEL_43:
      v125 = (double)(int)v10 * 0.5;
      v35 = *(float32x4_t **)v22;
      os_unfair_lock_unlock((os_unfair_lock_t)&GetKaiser(unsigned int,double)::sKaiserWindows);
      v37 = *(unsigned int *)(v8 + 12);
      v36 = *(unsigned int *)(v8 + 16);
      v38 = 3.14159265 / (double)(int)v36;
      v39 = v127;
      v40 = v38 * v127;
      if ((int)v37 < 128)
      {
        v55 = cos(v38 * v127);
        v39 = v127;
        v41 = (double)(int)v10 * 0.5;
        if ((int)v10 >= 1)
        {
          v56 = v55 + v55;
          v57 = sin((-2.0 - v125) * v127 * v38) * v127;
          v58 = sin((-1.0 - v125) * v127 * v38);
          v41 = (double)(int)v10 * 0.5;
          v39 = v127;
          v59 = 0;
          v60 = v58 * v127;
          do
          {
            v61 = -(v57 - v56 * v60);
            v62 = v61 * v35->f32[v59] / (((double)(int)v59 - v125) * (v38 * v127));
            *(float *)&v11[v59++] = v62;
            v57 = v60;
            v60 = v61;
          }
          while (v10 != v59);
        }
      }
      else
      {
        v41 = (double)(int)v10 * 0.5;
        if ((int)v10 >= 1)
        {
          v42 = 0;
          if (v10 < 4)
            goto LABEL_128;
          if ((unint64_t)((char *)v11 - (char *)v35) < 0x10)
            goto LABEL_128;
          v120 = v3;
          v42 = v10 & 0xFFFFFFFC;
          v121 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v125, 0);
          v43 = (int32x4_t)xmmword_1B6626920;
          v44 = v35;
          v45 = (float32x4_t *)v11;
          v46 = v42;
          do
          {
            v129 = v43;
            v47.i64[0] = v43.i32[2];
            v47.i64[1] = v43.i32[3];
            v48 = vcvtq_f64_s64(v47);
            v47.i64[0] = v129.i32[0];
            v47.i64[1] = v129.i32[1];
            v128 = vmulq_n_f64(vsubq_f64(v48, v121), v40);
            __x = vmulq_n_f64(vsubq_f64(vcvtq_f64_s64(v47), v121), v40);
            v123 = sin(__x.f64[1]);
            v49.f64[0] = sin(__x.f64[0]);
            v49.f64[1] = v123;
            v124 = v49;
            v122 = sin(v128.f64[1]);
            v50.f64[0] = sin(v128.f64[0]);
            v39 = v127;
            v50.f64[1] = v122;
            v51 = *v44++;
            v40 = v38 * v127;
            *v45++ = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vdivq_f64(vmulq_f64(vmulq_n_f64(v124, v127), vcvtq_f64_f32(*(float32x2_t *)v51.f32)), __x)), vdivq_f64(vmulq_f64(vmulq_n_f64(v50, v127), vcvt_hight_f64_f32(v51)), v128));
            v52.i64[0] = 0x400000004;
            v52.i64[1] = 0x400000004;
            v43 = vaddq_s32(v129, v52);
            v46 -= 4;
          }
          while (v46);
          v3 = v120;
          v41 = (double)(int)v10 * 0.5;
          if (v42 != v10)
          {
LABEL_128:
            do
            {
              v53 = ((double)(int)v42 - v41) * v40;
              v54 = sin(v53);
              v41 = (double)(int)v10 * 0.5;
              v40 = v38 * v127;
              v39 = v127;
              *(float *)&v54 = v54 * (v127 * v35->f32[v42]) / v53;
              v11[v42++] = LODWORD(v54);
            }
            while (v10 != v42);
          }
        }
      }
      *v11 = 0;
      v63 = v39;
      *(float *)&v11[(int)v41] = v63;
      v11[(int)v10] = 0;
      if ((int)v37 >= 0)
        v64 = v37;
      else
        v64 = v37 + 1;
      *(_DWORD *)(v8 + 20) = (v64 >> 1) - 1;
      if ((v36 & 0x80000000) != 0 || (int)v37 < 1)
        goto LABEL_94;
      v65 = *(_QWORD *)v8;
      v66 = v36 + 1;
      v67 = 4 * v37;
      if (v37 <= 7)
      {
        v68 = (_DWORD *)(v65 + 12);
        v69 = v36;
        do
        {
          v70 = v69;
          *(v68 - 3) = v11[v69];
          if ((_DWORD)v37 != 1)
          {
            *(v68 - 2) = v11[v69 + v36];
            if ((_DWORD)v37 != 2)
            {
              v71 = v69 + v36 + v36;
              *(v68 - 1) = v11[v71];
              if ((_DWORD)v37 != 3)
              {
                v72 = v71 + v36;
                *v68 = v11[v72];
                if ((_DWORD)v37 != 4)
                {
                  v73 = v72 + v36;
                  v68[1] = v11[v73];
                  if ((_DWORD)v37 != 5)
                  {
                    v74 = v73 + v36;
                    v68[2] = v11[v74];
                    if ((_DWORD)v37 != 6)
                      v68[3] = v11[v74 + v36];
                  }
                }
              }
            }
          }
          v69 = v70 - 1;
          v68 = (_DWORD *)((char *)v68 + v67);
          --v66;
        }
        while (v66);
        goto LABEL_94;
      }
      if ((_DWORD)v36 != 1)
      {
        v80 = 0;
        v81 = 4 * v36;
        do
        {
          v82 = &v11[(int)v36];
          v83 = (_DWORD *)v65;
          v84 = v37;
          do
          {
            *v83++ = *v82;
            v82 = (_DWORD *)((char *)v82 + v81);
            --v84;
          }
          while (v84);
          ++v80;
          LODWORD(v36) = v36 - 1;
          v65 += v67;
        }
        while (v80 != v66);
        goto LABEL_94;
      }
      v75 = v37 & 0x7FFFFFF8;
      v76 = v37 & 0xFFFFFFF8;
      v77 = 32 * v36;
      if ((unint64_t)(v65 - (_QWORD)v11 - 4) >= 0x20)
      {
        v85 = (_OWORD *)(v65 + 16);
        v86 = (__int128 *)(v11 + 5);
        v87 = v37 & 0xFFFFFFF8;
        do
        {
          v88 = *v86;
          *(v85 - 1) = *(v86 - 1);
          *v85 = v88;
          v85 += 2;
          v86 = (__int128 *)((char *)v86 + v77);
          v87 -= 8;
        }
        while (v87);
        if (v75 == v37)
        {
LABEL_87:
          if ((unint64_t)(v67 + v65 - (_QWORD)v11) >= 0x20)
          {
            v92 = (_OWORD *)(v67 + v65 + 16);
            v93 = (__int128 *)(v11 + 4);
            v94 = v37 & 0xFFFFFFF8;
            do
            {
              v95 = *v93;
              *(v92 - 1) = *(v93 - 1);
              *v92 = v95;
              v92 += 2;
              v93 = (__int128 *)((char *)v93 + v77);
              v94 -= 8;
            }
            while (v94);
            if (v75 == v37)
              goto LABEL_94;
          }
          else
          {
            v75 = 0;
            v76 = 0;
          }
          v96 = v37 - v75;
          v97 = (_DWORD *)(v65 + v67 + 4 * v75);
          v98 = &v11[v76];
          do
          {
            *v97++ = *v98;
            v98 += v36;
            --v96;
          }
          while (v96);
LABEL_94:
          MEMORY[0x1BCC95CC8](v11, 0x1000C8052888210);
          v100 = *(uint64_t **)(v3 + 8);
          v99 = *(_QWORD *)(v3 + 16);
          if ((unint64_t)v100 >= v99)
          {
            v102 = *(uint64_t **)v3;
            v103 = (uint64_t)v100 - *(_QWORD *)v3;
            v104 = v103 >> 3;
            v105 = (v103 >> 3) + 1;
            if (v105 >> 61)
              std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
            v106 = v99 - (_QWORD)v102;
            if (v106 >> 2 > v105)
              v105 = v106 >> 2;
            if ((unint64_t)v106 >= 0x7FFFFFFFFFFFFFF8)
              v107 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v107 = v105;
            if (v107)
            {
              if (v107 >> 61)
                std::__throw_bad_array_new_length[abi:ne180100]();
              v108 = operator new(8 * v107);
            }
            else
            {
              v108 = 0;
            }
            v109 = (uint64_t *)&v108[8 * v104];
            v110 = &v108[8 * v107];
            *v109 = v8;
            v101 = v109 + 1;
            if (v100 == v102)
            {
              v102 = v100;
            }
            else
            {
              v111 = (char *)v100 - (char *)v102 - 8;
              if (v111 < 0x58)
                goto LABEL_129;
              if ((unint64_t)((char *)v100 - &v108[v103]) < 0x20)
                goto LABEL_129;
              v112 = (v111 >> 3) + 1;
              v113 = &v108[8 * v104 - 16];
              v114 = v100 - 2;
              v115 = v112 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                v116 = *(_OWORD *)v114;
                *(v113 - 1) = *((_OWORD *)v114 - 1);
                *v113 = v116;
                v113 -= 2;
                v114 -= 4;
                v115 -= 4;
              }
              while (v115);
              v109 -= v112 & 0x3FFFFFFFFFFFFFFCLL;
              v100 -= v112 & 0x3FFFFFFFFFFFFFFCLL;
              if (v112 != (v112 & 0x3FFFFFFFFFFFFFFCLL))
              {
LABEL_129:
                do
                {
                  v117 = *--v100;
                  *--v109 = v117;
                }
                while (v100 != v102);
                v102 = *(uint64_t **)v3;
              }
            }
            *(_QWORD *)v3 = v109;
            *(_QWORD *)(v3 + 8) = v101;
            *(_QWORD *)(v3 + 16) = v110;
            if (v102)
              operator delete(v102);
          }
          else
          {
            *v100 = v8;
            v101 = v100 + 1;
          }
          *(_QWORD *)(v3 + 8) = v101;
          goto LABEL_118;
        }
        v79 = v76 | 1;
        v78 = v37 & 0xFFFFFFF8;
      }
      else
      {
        v78 = 0;
        v79 = 1;
      }
      v89 = v37 - v78;
      v90 = (_DWORD *)(v65 + 4 * v78);
      v91 = &v11[v79];
      do
      {
        *v90++ = *v91;
        v91 += v36;
        --v89;
      }
      while (v89);
      goto LABEL_87;
    }
LABEL_14:
    v16 = 0x1ED337000uLL;
    if (qword_1ED3378E0 < (unint64_t)qword_1ED3378E8)
    {
      KaiserWindow::KaiserWindow((KaiserWindow *)qword_1ED3378E0, v10 - 1, v12);
      v17 = (char *)(v14 + 40);
      qword_1ED3378E0 = v14 + 40;
LABEL_42:
      *(_QWORD *)(v16 + 2272) = v17;
      v22 = v17 - 24;
      goto LABEL_43;
    }
    v18 = 0xCCCCCCCCCCCCCCCDLL * ((qword_1ED3378E0 - qword_1ED3378D8) >> 3);
    if (v18 + 1 > 0x666666666666666)
      std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
    v19 = 0x999999999999999ALL * ((qword_1ED3378E8 - qword_1ED3378D8) >> 3);
    if (v19 <= v18 + 1)
      v19 = v18 + 1;
    if (0xCCCCCCCCCCCCCCCDLL * ((qword_1ED3378E8 - qword_1ED3378D8) >> 3) >= 0x333333333333333)
      v20 = 0x666666666666666;
    else
      v20 = v19;
    v136 = &qword_1ED3378E8;
    if (v20)
    {
      if (v20 > 0x666666666666666)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v21 = (char *)operator new(40 * v20);
    }
    else
    {
      v21 = 0;
    }
    v119 = v3;
    v132 = v21;
    v133 = (KaiserWindow *)&v21[40 * v18];
    v135 = (uint64_t)&v21[40 * v20];
    KaiserWindow::KaiserWindow(v133, v10 - 1, v12);
    v23 = v133;
    v17 = (char *)v133 + 40;
    v134 = (char *)v133 + 40;
    v25 = qword_1ED3378D8;
    v24 = (char *)qword_1ED3378E0;
    *(_QWORD *)&v142 = v133;
    *((_QWORD *)&v142 + 1) = v133;
    v141 = v142;
    v137 = &qword_1ED3378E8;
    v138 = &v141;
    v139 = &v142;
    if (qword_1ED3378E0 == qword_1ED3378D8)
    {
      qword_1ED3378D8 = (uint64_t)v133;
      qword_1ED3378E0 = (uint64_t)v133 + 40;
      qword_1ED3378E8 = v135;
      v3 = v119;
    }
    else
    {
      v140 = 0;
      do
      {
        v26 = *(_OWORD *)(v24 - 40);
        *((_QWORD *)v23 - 3) = 0;
        v27 = (char *)v23 - 24;
        *(_OWORD *)((char *)v23 - 40) = v26;
        *((_QWORD *)v27 + 1) = 0;
        *((_QWORD *)v27 + 2) = 0;
        v29 = (_BYTE *)*((_QWORD *)v24 - 3);
        v28 = (_BYTE *)*((_QWORD *)v24 - 2);
        v30 = v28 - v29;
        if (v28 != v29)
        {
          if (v30 < 0)
            std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
          v31 = (char *)operator new(v28 - v29);
          *((_QWORD *)v23 - 3) = v31;
          *((_QWORD *)v23 - 2) = v31;
          v32 = &v31[4 * (v30 >> 2)];
          *((_QWORD *)v23 - 1) = v32;
          memcpy(v31, v29, v30);
          *((_QWORD *)v23 - 2) = v32;
        }
        v24 -= 40;
        v23 = (KaiserWindow *)(*((_QWORD *)&v142 + 1) - 40);
        *((_QWORD *)&v142 + 1) -= 40;
      }
      while (v24 != (char *)v25);
      v24 = (char *)qword_1ED3378D8;
      v33 = qword_1ED3378E0;
      qword_1ED3378D8 = (uint64_t)v23;
      qword_1ED3378E0 = (uint64_t)v17;
      qword_1ED3378E8 = v135;
      if ((char *)v33 == v24)
      {
        v3 = v119;
        v16 = 0x1ED337000;
        if (!v24)
          goto LABEL_42;
        goto LABEL_41;
      }
      v3 = v119;
      v16 = 0x1ED337000;
      do
      {
        v34 = *(void **)(v33 - 24);
        if (v34)
        {
          *(_QWORD *)(v33 - 16) = v34;
          operator delete(v34);
        }
        v33 -= 40;
      }
      while ((char *)v33 != v24);
    }
    if (!v24)
      goto LABEL_42;
LABEL_41:
    operator delete(v24);
    goto LABEL_42;
  }
  v5 = 0;
  v6 = v4 >> 3;
  v7 = 1;
  while (1)
  {
    v8 = *(_QWORD *)(*(_QWORD *)SincKernelFactorySingleton::instance(void)::gSincKernelFactorySingleton + 8 * v5);
    if (*(double *)(v8 + 32) == 0.9
      && *(double *)(v8 + 24) == 80.0
      && *(_DWORD *)(v8 + 12) == 11
      && *(_DWORD *)(v8 + 16) == 128)
    {
      break;
    }
    v5 = v7;
    if (v6 <= v7++)
      goto LABEL_8;
  }
LABEL_118:
  ++*(_DWORD *)(v8 + 8);
  std::unique_lock<caulk::pooled_semaphore_mutex>::~unique_lock[abi:ne180100]((uint64_t)&v130);
  return v8;
}

void sub_1B6379578(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30,uint64_t a31,char a32)
{
  uint64_t v32;

  std::__split_buffer<KaiserWindow>::~__split_buffer((uint64_t)&a32);
  os_unfair_lock_unlock((os_unfair_lock_t)&GetKaiser(unsigned int,double)::sKaiserWindows);
  MEMORY[0x1BCC95CEC](v32, 0x1080C4003DAF236);
  std::unique_lock<caulk::pooled_semaphore_mutex>::~unique_lock[abi:ne180100]((uint64_t)&a30);
  _Unwind_Resume(a1);
}

void IR::DelayLine::processPolyphaseQ22_10(IR::DelayLine *this, int a2, int a3, float *__C, vDSP_Length __N)
{
  int v5;
  int v6;
  unsigned int v7;
  unsigned int v8;
  vDSP_Length v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unsigned int v15;
  const float *v16;
  vDSP_Length v17;
  const float *v18;
  vDSP_Length v19;
  const float *v20;
  float *v21;
  const float *v22;

  v5 = *((_DWORD *)this + 32);
  v6 = a3 + (1 << (9 - v5)) - 512;
  v7 = (unsigned __int16)(v6 & 0x3FF) >> (10 - v5);
  if (v7 >= *((_DWORD *)this + 30))
    __assert_rtn("processPolyphaseQ22_10", "DelayLine.cpp", 206, "phaseIndex < mFractionalPhases");
  v8 = __N;
  v11 = *((unsigned int *)this + 33);
  v12 = (v11 - 1);
  v13 = *((_QWORD *)this + 2);
  v14 = (*((_QWORD *)this + 3) - v13) >> 2;
  v15 = (a2 - (v11 + (v6 >> 10)) + v14 + 1) & *((_DWORD *)this + 10);
  v16 = (const float *)(*((_QWORD *)this + 13) + 4 * v7 * v11);
  if ((_DWORD)__N == 1)
  {
    vDSP_dotpr((const float *)(v13 + 4 * v15 + 4 * v12), -1, v16, 1, __C, v11);
  }
  else
  {
    if (v14 >= (_DWORD)v12 + (_DWORD)__N + v15)
    {
      v20 = (const float *)(v13 + 4 * v15);
      v22 = &v16[v12];
      v19 = __N;
      v21 = __C;
    }
    else
    {
      if (v14 < (v12 + __N))
        __assert_rtn("processPolyphaseQ22_10", "DelayLine.cpp", 216, "inNumFramesToProcess + padOffset <= mDelayLine.size()");
      v17 = v14 - (v12 + v15);
      v18 = &v16[v12];
      vDSP_conv((const float *)(v13 + 4 * v15), 1, v18, -1, __C, 1, v17, v11);
      v19 = v8 - v17;
      v20 = (const float *)*((_QWORD *)this + 2);
      v21 = &__C[v17];
      v11 = *((unsigned int *)this + 33);
      v22 = v18;
    }
    vDSP_conv(v20, 1, v22, -1, v21, 1, v19, v11);
  }
}

uint64_t IR::DelayLine::DelayLine(uint64_t a1, int a2, int a3, std::vector<unsigned int>::size_type __n, unsigned int a5, int a6)
{
  uint64_t v7;
  char **v8;
  std::vector<int> *v9;
  const float **v10;
  uint64_t v11;
  unint64_t v14;
  unsigned int v15;
  unsigned int v16;
  unint64_t v17;
  unint64_t v18;
  SincKernelFactorySingleton *v20;
  double v21;
  double v22;
  uint64_t v23;
  int8x8_t v24;
  uint8x8_t v25;
  int v26;
  BOOL v27;
  unsigned int v28;
  unint64_t v29;
  unint64_t v30;
  std::vector<int>::size_type v31;
  float v32;
  float v33;
  unint64_t v34;
  int v35;
  uint64_t v37;
  float **v38;
  char **v39;
  char **v40;
  float v41;
  float __C;
  float __B;
  std::vector<unsigned int>::value_type __u;

  *(_DWORD *)a1 = a2;
  *(_DWORD *)(a1 + 4) = a3;
  *(_DWORD *)(a1 + 8) = __n;
  *(_BYTE *)(a1 + 12) = 1;
  *(_OWORD *)(a1 + 16) = 0u;
  v7 = a1 + 16;
  *(_OWORD *)(a1 + 48) = 0u;
  v8 = (char **)(a1 + 48);
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_DWORD *)(a1 + 96) = 1065347625;
  *(_OWORD *)(a1 + 136) = 0u;
  v9 = (std::vector<int> *)(a1 + 136);
  *(_OWORD *)(a1 + 184) = 0u;
  v10 = (const float **)(a1 + 184);
  v37 = a1 + 208;
  *(_OWORD *)(a1 + 232) = 0u;
  v11 = a1 + 232;
  v39 = (char **)(a1 + 256);
  v40 = (char **)(a1 + 72);
  v38 = (float **)(a1 + 160);
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_OWORD *)(a1 + 216) = 0u;
  *(_OWORD *)(a1 + 248) = 0u;
  *(_QWORD *)(a1 + 296) = 0;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 264) = 0u;
  *(_OWORD *)(a1 + 280) = 0u;
  if (!(_DWORD)__n)
    __assert_rtn("DelayLine", "DelayLine.cpp", 236, "inNumTaps > 0");
  switch(a3)
  {
    case 1:
    case 3:
      *(float *)&__u = 2.0;
      std::vector<float>::assign((char **)(a1 + 48), __n, &__u);
      v14 = *(unsigned int *)(a1 + 8);
      *(float *)&__u = 2.0;
      std::vector<float>::assign(v40, v14, &__u);
      v15 = 0;
      v16 = a2 + 4;
      break;
    case 2:
    case 4:
      *(float *)&__u = 3.0;
      std::vector<float>::assign((char **)(a1 + 48), __n, &__u);
      v17 = *(unsigned int *)(a1 + 8);
      *(float *)&__u = 3.0;
      std::vector<float>::assign(v40, v17, &__u);
      v15 = 0;
      v16 = a2 + 6;
      break;
    case 5:
    case 7:
      goto LABEL_7;
    case 6:
      *(float *)&__u = 0.0;
      std::vector<unsigned int>::assign((std::vector<unsigned int> *)(a1 + 280), __n, &__u);
      std::vector<float>::resize((uint64_t)v38, a5);
      std::vector<float>::resize((uint64_t)v10, a5);
      std::vector<float>::resize(v37, a5);
      std::vector<float>::resize(v11, a5);
      *(float *)&__u = 0.0;
      __B = 1.0 / (float)a5;
      vDSP_vramp((const float *)&__u, &__B, *(float **)(a1 + 184), 1, (uint64_t)(*(_QWORD *)(a1 + 192) - *(_QWORD *)(a1 + 184)) >> 2);
      v41 = -1.0;
      __C = 1.0;
      vDSP_vsmsa(*v10, 1, &v41, &__C, *v38, 1, a5);
LABEL_7:
      SincKernelFactorySingleton::instance((SincKernelFactorySingleton *)a1);
      v23 = SincKernelFactorySingleton::ReferenceSincKernel(v20, v21, v22);
      *(_QWORD *)(a1 + 112) = v23;
      v24 = (int8x8_t)*(unsigned int *)(v23 + 16);
      *(_DWORD *)(a1 + 120) = v24.i32[0];
      v25 = (uint8x8_t)vcnt_s8(v24);
      v25.i16[0] = vaddlv_u8(v25);
      if (v25.i32[0] != 1)
        __assert_rtn("DelayLine", "DelayLine.cpp", 285, "isPowerOfTwo(mFractionalPhases)");
      *(_DWORD *)(a1 + 124) = v24.i32[0] - 1;
      if (v24.i32[0] >= 2u)
      {
        v26 = 0;
        do
        {
          ++v26;
          v27 = v24.i32[0] > 3u;
          v24.i32[0] = (unsigned __int32)v24.i32[0] >> 1;
        }
        while (v27);
      }
      else
      {
        v26 = 0;
      }
      *(_DWORD *)(a1 + 128) = v26;
      v28 = *(_DWORD *)(v23 + 12);
      *(_DWORD *)(a1 + 132) = v28;
      *(_QWORD *)(a1 + 104) = *(_QWORD *)v23;
      v29 = *(unsigned int *)(a1 + 8);
      *(float *)&__u = (float)v28;
      std::vector<float>::assign(v8, v29, &__u);
      v30 = *(unsigned int *)(a1 + 8);
      *(float *)&__u = (float)*(unsigned int *)(a1 + 132);
      std::vector<float>::assign(v39, v30, &__u);
      v31 = *(unsigned int *)(a1 + 8);
      v32 = (float)*(unsigned int *)(a1 + 132) * 1024.0;
      v33 = -1.0;
      if (v32 >= 0.0)
        v33 = 1.0;
      __u = (uint64_t)(float)(v32 + (float)(v33 * 0.5));
      std::vector<int>::assign(v9, v31, (std::vector<int>::const_reference)&__u);
      v34 = *(unsigned int *)(a1 + 8);
      *(float *)&__u = (float)*(unsigned int *)(a1 + 132);
      std::vector<float>::assign(v40, v34, &__u);
      v16 = a6 + a2 + v28;
      v15 = v28 - 1;
      break;
    default:
      *(float *)&__u = 0.0;
      std::vector<float>::assign((char **)(a1 + 48), __n, &__u);
      v18 = *(unsigned int *)(a1 + 8);
      *(float *)&__u = 0.0;
      std::vector<float>::assign(v40, v18, &__u);
      v15 = 0;
      v16 = a2 + 1;
      break;
  }
  v35 = 1 << -(char)__clz(v16 - 1);
  *(float *)&__u = 0.0;
  std::vector<float>::resize(v7, v35 + v15, &__u);
  *(_DWORD *)(a1 + 40) = v35 - 1;
  IR::DelayLine::reset((IR::DelayLine *)a1);
  return a1;
}

void sub_1B6379B8C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void **a10, void **a11, void **a12, void **a13, void **a14)
{
  _QWORD *v14;
  void **v15;
  void **v16;
  void **v17;
  void **v18;
  void **v19;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;

  v21 = *a11;
  if (*a11)
  {
    v14[36] = v21;
    operator delete(v21);
  }
  v22 = *a13;
  if (*a13)
  {
    v14[33] = v22;
    operator delete(v22);
  }
  v23 = *v19;
  if (*v19)
  {
    v14[30] = v23;
    operator delete(v23);
  }
  v24 = *a10;
  if (*a10)
  {
    v14[27] = v24;
    operator delete(v24);
  }
  v25 = *v18;
  if (*v18)
  {
    v14[24] = v25;
    operator delete(v25);
  }
  v26 = *a12;
  if (*a12)
  {
    v14[21] = v26;
    operator delete(v26);
  }
  v27 = *v17;
  if (*v17)
  {
    v14[18] = v27;
    operator delete(v27);
  }
  v28 = *a14;
  if (*a14)
  {
    v14[10] = v28;
    operator delete(v28);
  }
  v29 = *v16;
  if (*v16)
  {
    v14[7] = v29;
    operator delete(v29);
  }
  v30 = *v15;
  if (*v15)
  {
    v14[3] = v30;
    operator delete(v30);
  }
  _Unwind_Resume(exception_object);
}

void std::vector<int>::assign(std::vector<int> *this, std::vector<int>::size_type __n, std::vector<int>::const_reference __u)
{
  uint64_t value;
  int *begin;
  std::vector<int>::size_type v8;
  unint64_t v9;
  std::vector<int>::pointer v10;
  int *v11;
  std::vector<int>::size_type v12;
  std::vector<int>::pointer end;
  std::vector<int>::size_type v14;
  std::vector<int>::size_type v15;
  int *v16;
  int *v17;
  std::vector<int>::size_type v18;

  value = (uint64_t)this->__end_cap_.__value_;
  begin = this->__begin_;
  if (__n <= (value - (uint64_t)begin) >> 2)
  {
    end = this->__end_;
    v14 = end - begin;
    if (v14 >= __n)
      v15 = __n;
    else
      v15 = end - begin;
    if (v15)
    {
      v16 = begin;
      do
      {
        *v16++ = *__u;
        --v15;
      }
      while (v15);
    }
    if (__n <= v14)
    {
      this->__end_ = &begin[__n];
    }
    else
    {
      v17 = &end[__n - v14];
      v18 = 4 * __n - 4 * v14;
      do
      {
        *end++ = *__u;
        v18 -= 4;
      }
      while (v18);
      this->__end_ = v17;
    }
  }
  else
  {
    if (begin)
    {
      this->__end_ = begin;
      operator delete(begin);
      value = 0;
      this->__begin_ = 0;
      this->__end_ = 0;
      this->__end_cap_.__value_ = 0;
    }
    v8 = value >> 1;
    if (value >> 1 <= __n)
      v8 = __n;
    if ((unint64_t)value >= 0x7FFFFFFFFFFFFFFCLL)
      v9 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v9 = v8;
    std::vector<int>::__vallocate[abi:ne180100](this, v9);
    v10 = this->__end_;
    v11 = &v10[__n];
    v12 = 4 * __n;
    do
    {
      *v10++ = *__u;
      v12 -= 4;
    }
    while (v12);
    this->__end_ = v11;
  }
}

void IR::DelayLine::reset(IR::DelayLine *this)
{
  int v2;
  void *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;

  v2 = *((_DWORD *)this + 1);
  if (v2 == 5 || v2 == 7)
  {
LABEL_12:
    v10 = (void *)*((_QWORD *)this + 2);
    v11 = *((_QWORD *)this + 3) - (_QWORD)v10;
    if (v11 >= 1)
      bzero(v10, 4 * (((unint64_t)v11 >> 2) - ((unint64_t)v11 > 3)) + 4);
    *((_DWORD *)this + 11) = *((_DWORD *)this + 33) - 1;
    goto LABEL_15;
  }
  if (v2 == 6)
  {
    v4 = (void *)*((_QWORD *)this + 29);
    v5 = *((_QWORD *)this + 30) - (_QWORD)v4;
    if (v5 >= 1)
      bzero(v4, 4 * (((unint64_t)v5 >> 2) - ((unint64_t)v5 > 3)) + 4);
    v6 = (void *)*((_QWORD *)this + 26);
    v7 = *((_QWORD *)this + 27) - (_QWORD)v6;
    if (v7 >= 1)
      bzero(v6, 4 * (((unint64_t)v7 >> 2) - ((unint64_t)v7 > 3)) + 4);
    v8 = (void *)*((_QWORD *)this + 35);
    v9 = *((_QWORD *)this + 36) - (_QWORD)v8;
    if (v9 >= 1)
      bzero(v8, 4 * (((unint64_t)v9 >> 2) - ((unint64_t)v9 > 3)) + 4);
    goto LABEL_12;
  }
  v12 = (void *)*((_QWORD *)this + 2);
  v13 = *((_QWORD *)this + 3) - (_QWORD)v12;
  if (v13 >= 1)
    bzero(v12, 4 * (((unint64_t)v13 >> 2) - ((unint64_t)v13 > 3)) + 4);
LABEL_15:
  *((_BYTE *)this + 12) = 1;
}

void IR::DelayLine::~DelayLine(IR::DelayLine *this)
{
  uint64_t v2;
  uint64_t *v3;
  int v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  char v23;

  if ((*((_DWORD *)this + 1) - 5) <= 2)
  {
    SincKernelFactorySingleton::instance(this);
    v2 = *((_QWORD *)this + 14);
    v22 = &unk_1EF136AB0;
    v23 = 1;
    caulk::pooled_semaphore_mutex::_lock((caulk::pooled_semaphore_mutex *)&unk_1EF136AB0);
    if (v2)
    {
      v3 = (uint64_t *)SincKernelFactorySingleton::instance(void)::gSincKernelFactorySingleton;
      v4 = *(_DWORD *)(v2 + 8) - 1;
      *(_DWORD *)(v2 + 8) = v4;
      if (!v4)
      {
        v16 = *v3;
        v15 = v3[1];
        if (v15 != *v3)
        {
          v17 = 0;
          v18 = 1;
          while (*(_QWORD *)(v16 + 8 * v17) != v2)
          {
            v17 = v18;
            if ((v15 - *v3) >> 3 <= (unint64_t)v18++)
              goto LABEL_4;
          }
          v20 = v16 + 8 * v17;
          v21 = v15 - (v20 + 8);
          if (v15 != v20 + 8)
            memmove((void *)(v16 + 8 * v17), (const void *)(v20 + 8), v15 - (v20 + 8));
          v3[1] = v20 + v21;
          free(*(void **)v2);
          MEMORY[0x1BCC95CEC](v2, 0x1080C4003DAF236);
        }
      }
    }
LABEL_4:
    std::unique_lock<caulk::pooled_semaphore_mutex>::~unique_lock[abi:ne180100]((uint64_t)&v22);
  }
  v5 = (void *)*((_QWORD *)this + 35);
  if (v5)
  {
    *((_QWORD *)this + 36) = v5;
    operator delete(v5);
  }
  v6 = (void *)*((_QWORD *)this + 32);
  if (v6)
  {
    *((_QWORD *)this + 33) = v6;
    operator delete(v6);
  }
  v7 = (void *)*((_QWORD *)this + 29);
  if (v7)
  {
    *((_QWORD *)this + 30) = v7;
    operator delete(v7);
  }
  v8 = (void *)*((_QWORD *)this + 26);
  if (v8)
  {
    *((_QWORD *)this + 27) = v8;
    operator delete(v8);
  }
  v9 = (void *)*((_QWORD *)this + 23);
  if (v9)
  {
    *((_QWORD *)this + 24) = v9;
    operator delete(v9);
  }
  v10 = (void *)*((_QWORD *)this + 20);
  if (v10)
  {
    *((_QWORD *)this + 21) = v10;
    operator delete(v10);
  }
  v11 = (void *)*((_QWORD *)this + 17);
  if (v11)
  {
    *((_QWORD *)this + 18) = v11;
    operator delete(v11);
  }
  v12 = (void *)*((_QWORD *)this + 9);
  if (v12)
  {
    *((_QWORD *)this + 10) = v12;
    operator delete(v12);
  }
  v13 = (void *)*((_QWORD *)this + 6);
  if (v13)
  {
    *((_QWORD *)this + 7) = v13;
    operator delete(v13);
  }
  v14 = (void *)*((_QWORD *)this + 2);
  if (v14)
  {
    *((_QWORD *)this + 3) = v14;
    operator delete(v14);
  }
}

uint64_t IR::DelayLine::DelayLine(uint64_t a1, uint64_t a2)
{
  int v4;
  uint64_t v5;
  __int128 v6;
  SincKernelFactorySingleton *v7;
  SincKernelFactorySingleton *v8;
  double v9;
  double v10;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_BYTE *)(a1 + 12) = 1;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a2 + 24) = 0;
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a2 + 48) = 0;
  *(_QWORD *)(a2 + 56) = 0;
  *(_QWORD *)(a2 + 64) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 88) = 0;
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a2 + 80) = 0;
  *(_QWORD *)(a2 + 88) = 0;
  *(_QWORD *)(a2 + 72) = 0;
  v4 = *(_DWORD *)(a2 + 96);
  v5 = *(_QWORD *)(a2 + 104);
  v6 = *(_OWORD *)(a2 + 120);
  *(_QWORD *)(a1 + 136) = 0;
  *(_DWORD *)(a1 + 96) = v4;
  *(_QWORD *)(a1 + 104) = v5;
  *(_QWORD *)(a1 + 112) = 0;
  *(_OWORD *)(a1 + 120) = v6;
  *(_QWORD *)(a1 + 144) = 0;
  *(_QWORD *)(a1 + 152) = 0;
  v7 = (SincKernelFactorySingleton *)std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>((_QWORD *)(a1 + 136), *(const void **)(a2 + 136), *(_QWORD *)(a2 + 144), (uint64_t)(*(_QWORD *)(a2 + 144) - *(_QWORD *)(a2 + 136)) >> 2);
  *(_QWORD *)(a1 + 160) = 0;
  *(_QWORD *)(a1 + 168) = 0;
  *(_QWORD *)(a1 + 176) = 0;
  *(_OWORD *)(a1 + 160) = *(_OWORD *)(a2 + 160);
  *(_QWORD *)(a1 + 176) = *(_QWORD *)(a2 + 176);
  *(_QWORD *)(a2 + 160) = 0;
  *(_QWORD *)(a2 + 168) = 0;
  *(_QWORD *)(a2 + 176) = 0;
  *(_QWORD *)(a1 + 184) = 0;
  *(_QWORD *)(a1 + 192) = 0;
  *(_QWORD *)(a1 + 200) = 0;
  *(_OWORD *)(a1 + 184) = *(_OWORD *)(a2 + 184);
  *(_QWORD *)(a1 + 200) = *(_QWORD *)(a2 + 200);
  *(_QWORD *)(a2 + 184) = 0;
  *(_QWORD *)(a2 + 192) = 0;
  *(_QWORD *)(a2 + 200) = 0;
  *(_QWORD *)(a1 + 208) = 0;
  *(_QWORD *)(a1 + 216) = 0;
  *(_QWORD *)(a1 + 224) = 0;
  *(_OWORD *)(a1 + 208) = *(_OWORD *)(a2 + 208);
  *(_QWORD *)(a1 + 224) = *(_QWORD *)(a2 + 224);
  *(_QWORD *)(a2 + 208) = 0;
  *(_QWORD *)(a2 + 216) = 0;
  *(_QWORD *)(a2 + 224) = 0;
  *(_QWORD *)(a1 + 232) = 0;
  *(_QWORD *)(a1 + 240) = 0;
  *(_QWORD *)(a1 + 248) = 0;
  *(_OWORD *)(a1 + 232) = *(_OWORD *)(a2 + 232);
  *(_QWORD *)(a1 + 248) = *(_QWORD *)(a2 + 248);
  *(_QWORD *)(a2 + 232) = 0;
  *(_QWORD *)(a2 + 240) = 0;
  *(_QWORD *)(a2 + 248) = 0;
  *(_QWORD *)(a1 + 256) = 0;
  *(_QWORD *)(a1 + 264) = 0;
  *(_QWORD *)(a1 + 272) = 0;
  *(_OWORD *)(a1 + 256) = *(_OWORD *)(a2 + 256);
  *(_QWORD *)(a1 + 272) = *(_QWORD *)(a2 + 272);
  *(_QWORD *)(a2 + 256) = 0;
  *(_QWORD *)(a2 + 264) = 0;
  *(_QWORD *)(a2 + 272) = 0;
  *(_QWORD *)(a1 + 280) = 0;
  *(_QWORD *)(a1 + 288) = 0;
  *(_QWORD *)(a1 + 296) = 0;
  *(_OWORD *)(a1 + 280) = *(_OWORD *)(a2 + 280);
  *(_QWORD *)(a1 + 296) = *(_QWORD *)(a2 + 296);
  *(_QWORD *)(a2 + 280) = 0;
  *(_QWORD *)(a2 + 288) = 0;
  *(_QWORD *)(a2 + 296) = 0;
  if ((*(_DWORD *)(a1 + 4) - 5) <= 2)
  {
    SincKernelFactorySingleton::instance(v7);
    *(_QWORD *)(a1 + 112) = SincKernelFactorySingleton::ReferenceSincKernel(v8, v9, v10);
  }
  return a1;
}

void sub_1B637A274(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, _Unwind_Exception *exception_object, void **a10)
{
  _QWORD *v10;
  void **v11;
  void **v12;
  void **v13;
  void **v14;
  void **v15;
  void **v16;
  void **v17;
  void **v18;
  void **v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;

  v20 = *v12;
  if (*v12)
  {
    v10[36] = v20;
    operator delete(v20);
  }
  v21 = *a10;
  if (*a10)
  {
    v10[33] = v21;
    operator delete(v21);
  }
  v22 = *v19;
  if (*v19)
  {
    v10[30] = v22;
    operator delete(v22);
  }
  v23 = *v18;
  if (*v18)
  {
    v10[27] = v23;
    operator delete(v23);
  }
  v24 = *v17;
  if (*v17)
  {
    v10[24] = v24;
    operator delete(v24);
  }
  v25 = *v16;
  if (*v16)
  {
    v10[21] = v25;
    operator delete(v25);
  }
  v26 = *v11;
  if (*v11)
  {
    v10[18] = v26;
    operator delete(v26);
  }
  v27 = *v15;
  if (*v15)
  {
    v10[10] = v27;
    operator delete(v27);
  }
  v28 = *v14;
  if (*v14)
  {
    v10[7] = v28;
    operator delete(v28);
  }
  v29 = *v13;
  if (*v13)
  {
    v10[3] = v29;
    operator delete(v29);
  }
  _Unwind_Resume(a1);
}

uint64_t IR::DelayLine::setDelay(uint64_t this, float a2)
{
  unsigned int v2;
  int v3;
  float v4;

  if (!*(_DWORD *)(this + 8))
    __assert_rtn("setDelay", "DelayLine.cpp", 397, "inTapIdx < mNumTaps");
  if ((float)*(unsigned int *)this < a2)
    a2 = (float)*(unsigned int *)this;
  v2 = *(_DWORD *)(this + 4);
  if (v2 <= 7)
  {
    v3 = 1 << v2;
    if ((v3 & 0xE0) != 0)
    {
      a2 = a2 + (float)*(unsigned int *)(this + 132);
    }
    else
    {
      v4 = a2 + 2.0;
      if ((v3 & 0x14) != 0)
        a2 = a2 + 3.0;
      if ((v3 & 0xA) != 0)
        a2 = v4;
    }
  }
  **(float **)(this + 48) = a2;
  return this;
}

void IR::DelayLine::process(IR::DelayLine *this, const float *__src, float **a3, vDSP_Length a4)
{
  float v5;
  vDSP_Length v7;
  int v9;
  uint64_t v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  float v15;
  float v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  uint64_t v29;
  uint64_t v30;
  unsigned int v31;
  unsigned int v32;
  uint64_t v33;
  uint64_t v34;
  float v35;
  float v36;
  float v37;
  float v38;
  float v39;
  float v40;
  float v41;
  float v42;
  float v43;
  float v44;
  float v45;
  uint64_t v46;
  uint64_t v47;
  unsigned int v48;
  uint64_t v49;
  uint64_t v50;
  float v51;
  float v52;
  float v53;
  float v54;
  float v55;
  float v56;
  float v57;
  float v58;
  float v59;
  float v60;
  float v61;
  float v62;
  uint64_t v63;
  uint64_t v64;
  unsigned int v65;
  uint64_t v66;
  uint64_t v67;
  float v68;
  float v69;
  float v70;
  float v71;
  float v72;
  float v73;
  float v74;
  float v75;
  float v76;
  float v77;
  float v78;
  uint64_t v79;
  uint64_t v80;
  unsigned int v81;
  uint64_t v82;
  uint64_t v83;
  float v84;
  float v85;
  float v86;
  float v87;
  float v88;
  float v89;
  float v90;
  float v91;
  float v92;
  float v93;
  float v94;
  float v95;
  double v96;
  float v97;
  float v98;
  float v99;
  float v100;
  float v101;
  uint64_t v102;
  unsigned int v103;
  unsigned int v104;
  int v105;
  uint64_t v106;
  uint64_t v107;
  unsigned int v108;
  float v109;
  uint64_t v110;
  uint64_t v111;
  int v112;
  uint64_t v113;
  uint64_t v114;
  float v115;
  uint64_t v116;
  float v117;
  float v118;
  float v119;
  char v120;
  char v121;
  int v122;
  unsigned int v123;
  unsigned int v124;
  uint64_t v125;
  float *v126;
  _DWORD *v127;
  uint64_t v128;
  vDSP_Length v129;
  float v130;
  float v131;
  float v132;
  float v133;
  uint64_t v134;
  unint64_t v135;
  int v136;
  float *v137;
  float *v138;
  float v139;
  uint64_t v140;
  float v141;
  float *v142;
  float v143;
  float v144;
  unsigned int v145;
  int v146;
  vDSP_Length v147;
  float v148;
  _BOOL4 v149;
  float v151;
  int v152;
  char v153;
  _DWORD *v154;
  int v155;
  uint64_t v156;
  float v157;
  unsigned int v158;
  vDSP_Length v159;
  BOOL v160;
  uint64_t v161;
  float v162;
  float v163;
  float v164;
  float *__E[5];
  unsigned int v166;
  int v167;
  vDSP_Length v168;
  uint64_t v169;
  const float *v170;
  uint64_t v171;

  v5 = *((float *)this + 24);
  if ((_DWORD)a4)
  {
    if (!__src)
      __assert_rtn("process", "DelayLine.cpp", 501, "inInputData");
    v7 = a4;
    v9 = *((_DWORD *)this + 2);
    v10 = (*((_QWORD *)this + 3) - *((_QWORD *)this + 2)) >> 2;
    if (*((_BYTE *)this + 12))
    {
      IR::DelayLine::swapDelays(this);
      *((_BYTE *)this + 12) = 0;
    }
    switch(*((_DWORD *)this + 1))
    {
      case 1:
        v29 = 0;
        v30 = *((_QWORD *)this + 2);
        v31 = *((_DWORD *)this + 10);
        v32 = *((_DWORD *)this + 11);
        do
        {
          *(float *)(v30 + 4 * v32) = __src[v29];
          if (v9)
          {
            v33 = 0;
            v34 = *((_QWORD *)this + 9);
            do
            {
              if (v5 == 2.7183)
              {
                v35 = *(float *)(v34 + 4 * v33)
                    + (float)((float)(*(float *)(*((_QWORD *)this + 6) + 4 * v33) - *(float *)(v34 + 4 * v33))
                            / (float)((int)v7 - v29));
              }
              else
              {
                v36 = *(float *)(*((_QWORD *)this + 6) + 4 * v33);
                v35 = v36 + (float)(*((float *)this + 24) * (float)(*(float *)(v34 + 4 * v33) - v36));
              }
              *(float *)(v34 + 4 * v33) = v35;
              v37 = (float)v32 - v35;
              if (v37 >= 0.0)
                v38 = -0.0;
              else
                v38 = (float)v10;
              v39 = v37 + v38;
              v40 = *(float *)(v30 + 4 * (v31 & (int)v39));
              v41 = *(float *)(v30 + 4 * (((int)v39 + 1) & v31));
              v42 = *(float *)(v30 + 4 * (((int)v39 + 2) & v31));
              v43 = *(float *)(v30 + 4 * (((int)v39 - 1) & v31));
              v44 = v43 + v40 * -2.5 + (float)(v41 + v41) + v42 * -0.5;
              v45 = (float)(v40 - v41) * 1.5 + (float)(v42 - v43) * 0.5;
              a3[v33++][v29] = v40
                             + (float)((float)((float)((float)(v41 - v43) * 0.5)
                                             + (float)((float)(v44 + (float)(v45 * (float)(v39 - (float)(int)v39)))
                                                     * (float)(v39 - (float)(int)v39)))
                                     * (float)(v39 - (float)(int)v39));
            }
            while ((v9 != 0) != v33);
          }
          v32 = v31 & (v32 + 1);
          ++v29;
        }
        while (v29 != v7);
        goto LABEL_74;
      case 2:
        v46 = 0;
        v47 = *((_QWORD *)this + 2);
        v48 = *((_DWORD *)this + 10);
        v32 = *((_DWORD *)this + 11);
        do
        {
          *(float *)(v47 + 4 * v32) = __src[v46];
          if (v9)
          {
            v49 = 0;
            v50 = *((_QWORD *)this + 9);
            do
            {
              if (v5 == 2.7183)
              {
                v51 = *(float *)(v50 + 4 * v49)
                    + (float)((float)(*(float *)(*((_QWORD *)this + 6) + 4 * v49) - *(float *)(v50 + 4 * v49))
                            / (float)((int)v7 - v46));
              }
              else
              {
                v52 = *(float *)(*((_QWORD *)this + 6) + 4 * v49);
                v51 = v52 + (float)(*((float *)this + 24) * (float)(*(float *)(v50 + 4 * v49) - v52));
              }
              *(float *)(v50 + 4 * v49) = v51;
              v53 = (float)v32 - v51;
              if (v53 >= 0.0)
                v54 = -0.0;
              else
                v54 = (float)v10;
              v55 = v53 + v54;
              v56 = *(float *)(v47 + 4 * (v48 & (int)v55));
              v57 = *(float *)(v47 + 4 * (((int)v55 + 1) & v48));
              v58 = *(float *)(v47 + 4 * (((int)v55 + 2) & v48));
              v59 = *(float *)(v47 + 4 * (((int)v55 + 3) & v48));
              v60 = *(float *)(v47 + 4 * (((int)v55 - 1) & v48));
              v61 = *(float *)(v47 + 4 * (((int)v55 - 2) & v48));
              v62 = (float)(v56 * -2.3333)
                  + v60 * 1.25
                  + (float)(v57 * 1.6667)
                  + v58 * -0.5
                  + (float)(v59 * 0.083333)
                  + (float)(v61 * -0.16667);
              a3[v49++][v46] = v56
                             + (float)((float)((float)((float)((float)(v57 - v60) * 0.66667)
                                                     + (float)((float)(v61 - v58) * 0.083333))
                                             + (float)((float)(v62
                                                             + (float)((float)((float)((float)((float)(v58 - v60)
                                                                                             * 0.58333)
                                                                                     + (float)((float)(v61 - v59)
                                                                                             * 0.083333))
                                                                             + (float)((float)(v56 - v57) * 1.3333))
                                                                     * (float)(v55 - (float)(int)v55)))
                                                     * (float)(v55 - (float)(int)v55)))
                                     * (float)(v55 - (float)(int)v55));
            }
            while ((v9 != 0) != v49);
          }
          v32 = v48 & (v32 + 1);
          ++v46;
        }
        while (v46 != v7);
        goto LABEL_74;
      case 3:
        v63 = 0;
        v64 = *((_QWORD *)this + 2);
        v65 = *((_DWORD *)this + 10);
        v32 = *((_DWORD *)this + 11);
        do
        {
          *(float *)(v64 + 4 * v32) = __src[v63];
          if (v9)
          {
            v66 = 0;
            v67 = *((_QWORD *)this + 9);
            do
            {
              if (v5 == 2.7183)
              {
                v68 = *(float *)(v67 + 4 * v66)
                    + (float)((float)(*(float *)(*((_QWORD *)this + 6) + 4 * v66) - *(float *)(v67 + 4 * v66))
                            / (float)((int)v7 - v63));
              }
              else
              {
                v69 = *(float *)(*((_QWORD *)this + 6) + 4 * v66);
                v68 = v69 + (float)(*((float *)this + 24) * (float)(*(float *)(v67 + 4 * v66) - v69));
              }
              *(float *)(v67 + 4 * v66) = v68;
              v70 = (float)v32 - v68;
              if (v70 >= 0.0)
                v71 = -0.0;
              else
                v71 = (float)v10;
              v72 = v70 + v71;
              v73 = *(float *)(v64 + 4 * (v65 & (int)v72));
              v74 = *(float *)(v64 + 4 * (((int)v72 + 1) & v65));
              v75 = *(float *)(v64 + 4 * (((int)v72 - 1) & v65));
              v76 = (float)(v74 + (float)(v75 * -0.33333)) + v73 * -0.5 - (float)(v74 * 0.16667);
              v77 = -(v73 - (float)(v74 + v75) * 0.5);
              v78 = (float)((float)(v74 - v75) * 0.16667) + (float)(v73 - v74) * 0.5;
              a3[v66++][v63] = v73
                             + (float)((float)(v76
                                             + (float)((float)(v77 + (float)(v78 * (float)(v72 - (float)(int)v72)))
                                                     * (float)(v72 - (float)(int)v72)))
                                     * (float)(v72 - (float)(int)v72));
            }
            while ((v9 != 0) != v66);
          }
          v32 = v65 & (v32 + 1);
          ++v63;
        }
        while (v63 != v7);
        goto LABEL_74;
      case 4:
        v79 = 0;
        v80 = *((_QWORD *)this + 2);
        v81 = *((_DWORD *)this + 10);
        v32 = *((_DWORD *)this + 11);
        do
        {
          *(float *)(v80 + 4 * v32) = __src[v79];
          if (v9)
          {
            v82 = 0;
            v83 = *((_QWORD *)this + 9);
            do
            {
              if (v5 == 2.7183)
              {
                v84 = *(float *)(v83 + 4 * v82)
                    + (float)((float)(*(float *)(*((_QWORD *)this + 6) + 4 * v82) - *(float *)(v83 + 4 * v82))
                            / (float)((int)v7 - v79));
              }
              else
              {
                v85 = *(float *)(*((_QWORD *)this + 6) + 4 * v82);
                v84 = v85 + (float)(*((float *)this + 24) * (float)(*(float *)(v83 + 4 * v82) - v85));
              }
              *(float *)(v83 + 4 * v82) = v84;
              v86 = (float)v32 - v84;
              if (v86 >= 0.0)
                v87 = -0.0;
              else
                v87 = (float)v10;
              v88 = v86 + v87;
              v89 = *(float *)(v80 + 4 * (v81 & (int)v88));
              v90 = *(float *)(v80 + 4 * (((int)v88 + 1) & v81));
              v91 = *(float *)(v80 + 4 * (((int)v88 + 2) & v81));
              v92 = *(float *)(v80 + 4 * (((int)v88 + 3) & v81));
              v93 = *(float *)(v80 + 4 * (((int)v88 - 1) & v81));
              v94 = *(float *)(v80 + 4 * (((int)v88 - 2) & v81));
              v95 = v88 - (float)(int)v88;
              v96 = (float)((float)(v91 + v94) * 0.041667);
              v97 = (float)((float)(v90 + v93) * -0.16667) + v89 * 0.25 + v96;
              v98 = (float)((float)((float)((float)(v90 * -0.58333) + (float)(v89 * 0.41667)) + (float)(v91 * 0.29167))
                          + (float)((float)(v92 + (float)(v93 + v94)) * -0.041667))
                  + (float)((float)(v97
                                  + (float)((float)((float)((float)((float)(v93 - v91) * 0.041667)
                                                          + (float)((float)(v92 - v94) * 0.0083333))
                                                  + (float)((float)(v90 - v89) * 0.083333))
                                          * v95))
                          * v95);
              v99 = (float)((float)(v90 + v93) * 0.66667) + v89 * -1.25 - v96;
              v100 = v99 + (float)(v98 * v95);
              v101 = v93 * -0.5 + v94 * 0.05 + (float)(v89 * -0.33333) + v90 + v91 * -0.25 + (float)(v92 * 0.033333);
              a3[v82++][v79] = v89 + (float)((float)(v101 + (float)(v100 * v95)) * v95);
            }
            while ((v9 != 0) != v82);
          }
          v32 = v81 & (v32 + 1);
          ++v79;
        }
        while (v79 != v7);
LABEL_74:
        *((_DWORD *)this + 11) = v32;
        return;
      case 5:
      case 7:
        v11 = v10;
        __E[4] = (float *)__E;
        v12 = *((_DWORD *)this + 33);
        v13 = v12 - 1;
        if (v12)
          v14 = v13;
        else
          v14 = 0;
        if (v9)
        {
          v15 = **((float **)this + 6) * 1024.0;
          v16 = -1.0;
          if (v15 >= 0.0)
            v16 = 1.0;
          v13 = (uint64_t)(float)(v15 + (float)(v16 * 0.5));
        }
        v171 = v13;
        v104 = v11;
        v166 = v11 - v14;
        v105 = v7 - v11;
        if (v7 <= v11)
        {
          v124 = *((_DWORD *)this + 11);
          if (v124 + v7 >= v11)
          {
            v140 = v11 - v124;
            if (v104 != v124)
              memmove((void *)(*((_QWORD *)this + 2) + 4 * v124), __src, 4 * v140);
            if ((_DWORD)v140 != (_DWORD)v7)
              memmove((void *)(*((_QWORD *)this + 2) + 4 * v14), &__src[v140], 4 * v7 - 4 * v140);
            *((_DWORD *)this + 11) += v105 + v14;
            if (v166 < v7)
              __assert_rtn("process", "DelayLine.cpp", 612, "inNumFramesToProcess <= delayLineLen - padOffset");
          }
          else
          {
            memmove((void *)(*((_QWORD *)this + 2) + 4 * v124), __src, 4 * v7);
            *((_DWORD *)this + 11) += v7;
          }
          if (v12 >= 2)
            memmove(*((void **)this + 2), (const void *)(*((_QWORD *)this + 3) - 4 * v14), 4 * v14);
          if (v9)
          {
            v141 = **((float **)this + 6);
            v142 = *a3;
            v143 = **((float **)this + 9);
            if ((float)(v143 * 1024.0) < 0.0)
              v144 = -1.0;
            else
              v144 = 1.0;
            if ((int)((uint64_t)(float)((float)(v143 * 1024.0) + (float)(v144 * 0.5)) - v171) >= 0)
              v145 = (uint64_t)(float)((float)(v143 * 1024.0) + (float)(v144 * 0.5)) - v171;
            else
              v145 = v171 - (uint64_t)(float)((float)(v143 * 1024.0) + (float)(v144 * 0.5));
            v146 = *((_DWORD *)this + 1);
            if (v146 == 7)
              v147 = 8;
            else
              v147 = 1;
            v148 = powf(*((float *)this + 24), (float)(int)v147);
            v149 = v145 > 0x20;
            if (v145 >= 0x21 && (int)v147 <= (int)v7)
            {
              v151 = v148;
              v152 = **((_DWORD **)this + 17);
              if (v146 == 7)
                v153 = 3;
              else
                v153 = 0;
              do
              {
                if (v5 == 2.7183)
                {
                  if (!(v7 >> v153))
                    __assert_rtn("process", "DelayLine.cpp", 655, "numSubBlocksRemaining > 0");
                  v154 = (_DWORD *)*((_QWORD *)this + 17);
                  v155 = v171;
                  LODWORD(v156) = ((int)v171 - *v154) / (int)(v7 >> v153) + *v154;
                  *v154 = v156;
                }
                else
                {
                  v143 = v141 + (float)(v151 * (float)(v143 - v141));
                  if ((float)(v143 * 1024.0) < 0.0)
                    v157 = -1.0;
                  else
                    v157 = 1.0;
                  v156 = (uint64_t)(float)((float)(v143 * 1024.0) + (float)(v157 * 0.5));
                  v152 = v156;
                  v155 = v171;
                }
                IR::DelayLine::processPolyphaseQ22_10(this, v124, v156, v142, v147);
                if (v152 - v155 >= 0)
                  v158 = v152 - v155;
                else
                  v158 = v155 - v152;
                v124 = *((_DWORD *)this + 10) & (v124 + v147);
                v159 = (v7 - v147);
                v149 = v158 > 0x20;
                v142 += v147;
                v160 = v158 < 0x21 || (int)v7 - (int)v147 < (int)v147;
                LODWORD(v7) = v7 - v147;
              }
              while (!v160);
              v7 = v159;
            }
            if ((int)v7 >= 1)
            {
              if (v5 == 2.7183)
              {
                LODWORD(v161) = **((_DWORD **)this + 17);
              }
              else
              {
                if (!v149)
                  v143 = v141;
                v164 = -1.0;
                if ((float)(v143 * 1024.0) >= 0.0)
                  v164 = 1.0;
                v161 = (uint64_t)(float)((float)(v143 * 1024.0) + (float)(v164 * 0.5));
              }
              IR::DelayLine::processPolyphaseQ22_10(this, v124, v161, v142, v7);
            }
            **((float **)this + 9) = v143;
          }
        }
        else
        {
          v170 = __src;
          v106 = 0;
          v107 = v9 != 0;
          v108 = *((_DWORD *)this + 11);
          v168 = v7;
          v169 = v7;
          v167 = v9;
          do
          {
            v109 = v170[v106];
            v110 = *((_QWORD *)this + 2);
            *(float *)(v110 + 4 * v108) = v109;
            if (v108 < v14)
              *(float *)(v110 + 4 * (v108 + v166)) = v109;
            if (v9)
            {
              v111 = 0;
              v112 = v7 - v106;
              do
              {
                if (v5 == 2.7183)
                {
                  v113 = *((_QWORD *)this + 17);
                  LODWORD(v114) = ((int)v171 - *(_DWORD *)(v113 + 4 * v111)) / v112 + *(_DWORD *)(v113 + 4 * v111);
                }
                else
                {
                  v115 = *(float *)(*((_QWORD *)this + 6) + 4 * v111);
                  v116 = *((_QWORD *)this + 9);
                  v117 = v115 + (float)(*((float *)this + 24) * (float)(*(float *)(v116 + 4 * v111) - v115));
                  *(float *)(v116 + 4 * v111) = v117;
                  v118 = v117 * 1024.0;
                  if (v118 < 0.0)
                    v119 = -1.0;
                  else
                    v119 = 1.0;
                  v114 = (uint64_t)(float)(v118 + (float)(v119 * 0.5));
                  v113 = *((_QWORD *)this + 17);
                }
                *(_DWORD *)(v113 + 4 * v111) = v114;
                v120 = *((_DWORD *)this + 32);
                v121 = 10 - v120;
                v122 = v114 + (1 << (9 - v120)) - 512;
                v123 = (unsigned __int16)(v122 & 0x3FF) >> v121;
                if (*((_DWORD *)this + 30) <= v123)
                  __assert_rtn("process", "DelayLine.cpp", 594, "phaseIndex < mFractionalPhases");
                vDSP_dotpr((const float *)(*((_QWORD *)this + 2)+ 4* ((v11 - ((_DWORD)v14 + (v122 >> 10)) + *((_DWORD *)this + 11)) & *((_DWORD *)this + 10))+ 4 * v14), -1, (const float *)(*((_QWORD *)this + 13) + 4 * *((_DWORD *)this + 33) * v123), 1, &a3[v111++][v106], *((unsigned int *)this + 33));
              }
              while (v107 != v111);
              v108 = *((_DWORD *)this + 11);
              LODWORD(v7) = v168;
              v9 = v167;
            }
            v108 = *((_DWORD *)this + 10) & (v108 + 1);
            *((_DWORD *)this + 11) = v108;
            ++v106;
          }
          while (v106 != v169);
        }
        return;
      case 6:
        v102 = *((unsigned int *)this + 11);
        v103 = *((_DWORD *)this + 33) - 1;
        if ((int)v102 + (int)v7 >= v10)
        {
          v125 = (v10 - v102);
          if ((_DWORD)v10 != (_DWORD)v102)
            memmove((void *)(*((_QWORD *)this + 2) + 4 * v102), __src, 4 * v125);
          if ((_DWORD)v125 != (_DWORD)v7)
            memmove((void *)(*((_QWORD *)this + 2) + 4 * v103), &__src[v125], 4 * v7 - 4 * v125);
          *((_DWORD *)this + 11) += v7 - v10 + v103;
          if (v10 - v103 <= v7)
            __assert_rtn("process", "DelayLine.cpp", 703, "inNumFramesToProcess < delayLineLen - padOffset");
        }
        else
        {
          memmove((void *)(*((_QWORD *)this + 2) + 4 * v102), __src, 4 * v7);
          *((_DWORD *)this + 11) += v7;
        }
        if (v103)
          memmove(*((void **)this + 2), (const void *)(*((_QWORD *)this + 3) - 4 * v103), 4 * v103);
        if (!v9)
          return;
        v126 = *a3;
        v127 = (_DWORD *)*((_QWORD *)this + 35);
        LODWORD(v128) = *v127;
        break;
      default:
        v17 = 0;
        v18 = *((_QWORD *)this + 2);
        v19 = *((_DWORD *)this + 10);
        v20 = *((_DWORD *)this + 11);
        do
        {
          *(float *)(v18 + 4 * v20) = __src[v17];
          if (v9)
          {
            v21 = 0;
            v22 = *((_QWORD *)this + 9);
            do
            {
              if (v5 == 2.7183)
              {
                v23 = *(float *)(v22 + 4 * v21)
                    + (float)((float)(*(float *)(*((_QWORD *)this + 6) + 4 * v21) - *(float *)(v22 + 4 * v21))
                            / (float)((int)v7 - v17));
              }
              else
              {
                v24 = *(float *)(*((_QWORD *)this + 6) + 4 * v21);
                v23 = v24 + (float)(*((float *)this + 24) * (float)(*(float *)(v22 + 4 * v21) - v24));
              }
              *(float *)(v22 + 4 * v21) = v23;
              v25 = (float)v20 - v23;
              if (v25 >= 0.0)
                v26 = -0.0;
              else
                v26 = (float)v10;
              v27 = v25 + v26;
              v28 = *(float *)(v18 + 4 * (v19 & (int)v27));
              a3[v21++][v17] = v28
                             + (float)((float)(v27 - (float)(int)v27)
                                     * (float)(*(float *)(v18 + 4 * (((int)v27 + 1) & v19)) - v28));
            }
            while ((v9 != 0) != v21);
          }
          v20 = v19 & (v20 + 1);
          ++v17;
        }
        while (v17 != v7);
        *((_DWORD *)this + 11) = v20;
        return;
    }
    while (1)
    {
      if ((_DWORD)v128)
      {
        if (v7 >= v128)
          v129 = v128;
        else
          v129 = v7;
        v130 = **((float **)this + 9) * 1024.0;
        if (v130 < 0.0)
          v131 = -1.0;
        else
          v131 = 1.0;
        IR::DelayLine::processPolyphaseQ22_10(this, v102, (uint64_t)(float)(v130 + (float)(v131 * 0.5)), *((float **)this + 29), v129);
        v132 = **((float **)this + 32) * 1024.0;
        if (v132 < 0.0)
          v133 = -1.0;
        else
          v133 = 1.0;
        IR::DelayLine::processPolyphaseQ22_10(this, v102, (uint64_t)(float)(v132 + (float)(v133 * 0.5)), *((float **)this + 26), v129);
        v134 = *((_QWORD *)this + 20);
        v135 = ((unint64_t)(*((_QWORD *)this + 21) - v134) >> 2) - **((unsigned int **)this + 35);
        vDSP_vmma((const float *)(v134 + 4 * v135), 1, *((const float **)this + 26), 1, (const float *)(*((_QWORD *)this + 23) + 4 * v135), 1, *((const float **)this + 29), 1, v126, 1, v129);
        v127 = (_DWORD *)*((_QWORD *)this + 35);
        LODWORD(v128) = *v127 - v129;
        *v127 = v128;
        v7 = (v7 - v129);
        if ((int)v129 + (int)v102 >= v10)
          v136 = v103 - v10;
        else
          v136 = 0;
        LODWORD(v102) = v129 + v102 + v136;
        v126 += v129;
      }
      else
      {
        v137 = (float *)*((_QWORD *)this + 6);
        v138 = (float *)*((_QWORD *)this + 9);
        v139 = *v138;
        if (*v137 == *v138)
        {
          v162 = v139 * 1024.0;
          v163 = -1.0;
          if (v162 >= 0.0)
            v163 = 1.0;
          IR::DelayLine::processPolyphaseQ22_10(this, v102, (uint64_t)(float)(v162 + (float)(v163 * 0.5)), v126, v7);
          return;
        }
        v128 = (*((_QWORD *)this + 21) - *((_QWORD *)this + 20)) >> 2;
        *v127 = v128;
        **((float **)this + 32) = v139;
        *v138 = *v137;
      }
      if (!(_DWORD)v7)
        return;
    }
  }
  if (v5 == 2.7183)
    IR::DelayLine::swapDelays(this);
}

void *IR::DelayLine::swapDelays(IR::DelayLine *this)
{
  const void *v2;
  unint64_t v3;
  void *result;
  char *v5;
  unint64_t v6;
  unint64_t v7;
  _DWORD *v8;
  uint64_t v9;
  float *v10;
  uint64_t v11;
  float v12;
  float v13;
  float v14;

  v2 = (const void *)*((_QWORD *)this + 6);
  v3 = (uint64_t)(*((_QWORD *)this + 7) - (_QWORD)v2) >> 2;
  v5 = (char *)this + 72;
  result = (void *)*((_QWORD *)this + 9);
  v6 = (uint64_t)(*((_QWORD *)v5 + 1) - (_QWORD)result) >> 2;
  if (v6 >= v3)
    v7 = v3;
  else
    v7 = v6;
  if (v7)
    result = memmove(result, v2, 4 * v7);
  if ((*((_DWORD *)this + 1) | 2) == 7)
  {
    v8 = (_DWORD *)*((_QWORD *)this + 17);
    v9 = *((_QWORD *)this + 18) - (_QWORD)v8;
    v10 = (float *)*((_QWORD *)this + 6);
    v11 = (uint64_t)(*((_QWORD *)this + 7) - (_QWORD)v10) >> 2 >= (unint64_t)(v9 >> 2)
        ? v9 >> 2
        : (uint64_t)(*((_QWORD *)this + 7) - (_QWORD)v10) >> 2;
    v11 = v11;
    if ((_DWORD)v11)
    {
      do
      {
        v12 = *v10++;
        v13 = v12 * 1024.0;
        if ((float)(v12 * 1024.0) < 0.0)
          v14 = -1.0;
        else
          v14 = 1.0;
        *v8++ = (uint64_t)(float)(v13 + (float)(v14 * 0.5));
        --v11;
      }
      while (v11);
    }
  }
  return result;
}

void AUFixedGain::~AUFixedGain(AUFixedGain *this)
{
  AUFixedGain::~AUFixedGain(this);
  JUMPOUT(0x1BCC95CECLL);
}

{
  void *v2;
  void *v3;

  *(_QWORD *)this = &off_1E69D6758;
  v2 = (void *)*((_QWORD *)this + 69);
  if (v2)
  {
    free(v2);
    *((_QWORD *)this + 69) = 0;
  }
  v3 = (void *)*((_QWORD *)this + 68);
  if (v3)
  {
    free(v3);
    *((_QWORD *)this + 68) = 0;
  }
  ausdk::AUBase::~AUBase(this);
}

uint64_t AUFixedGain::Initialize(AUFixedGain *this)
{
  uint64_t Element;
  __int128 v3;
  uint64_t v4;
  __int128 v5;
  const AudioStreamBasicDescription *v6;
  AudioStreamBasicDescription v8;
  _OWORD v9[2];
  uint64_t v10;

  Element = ausdk::AUScope::SafeGetElement((AUFixedGain *)((char *)this + 80), 0);
  v3 = *(_OWORD *)(Element + 96);
  v9[0] = *(_OWORD *)(Element + 80);
  v9[1] = v3;
  v10 = *(_QWORD *)(Element + 112);
  v4 = ausdk::AUScope::SafeGetElement((AUFixedGain *)((char *)this + 128), 0);
  v5 = *(_OWORD *)(v4 + 96);
  *(_OWORD *)&v8.mSampleRate = *(_OWORD *)(v4 + 80);
  *(_OWORD *)&v8.mBytesPerPacket = v5;
  *(_QWORD *)&v8.mBitsPerChannel = *(_QWORD *)(v4 + 112);
  if (!CAStreamBasicDescription::IsEquivalent((CAStreamBasicDescription *)v9, &v8, v6))
    return 4294956428;
  (*(void (**)(AUFixedGain *, _QWORD, _QWORD))(*(_QWORD *)this + 72))(this, 0, 0);
  return 0;
}

uint64_t AUFixedGain::Reset(AUFixedGain *this)
{
  const void *v1;

  v1 = (const void *)*((_QWORD *)this + 68);
  if (v1 && *((_QWORD *)this + 69))
    memcpy(*((void **)this + 69), v1, 4 * *((unsigned int *)this + 135));
  return 0;
}

uint64_t AUFixedGain::GetPropertyInfo(AUFixedGain *this, int a2, int a3, unsigned int a4, unsigned int *a5, BOOL *a6)
{
  uint64_t result;
  int v7;

  if (a3)
    return 4294956417;
  if ((a2 - 64002) >= 2)
  {
    if (a2 != 21)
      return 4294956417;
    *a6 = 1;
    v7 = 4;
  }
  else
  {
    *a6 = 1;
    v7 = 4 * *((_DWORD *)this + 135);
  }
  result = 0;
  *a5 = v7;
  return result;
}

uint64_t AUFixedGain::GetProperty(const void **this, int a2, int a3, unsigned int a4, _DWORD *__dst)
{
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  float *v13;
  float *v14;
  uint64_t v15;
  float v16;
  float v17;
  size_t v18;
  _QWORD v19[2];

  v19[1] = *MEMORY[0x1E0C80C00];
  if (a3)
    return 4294956417;
  switch(a2)
  {
    case 64003:
      v8 = *((unsigned int *)this + 135);
      if (!(_DWORD)v8)
        return 4294956417;
      memcpy(__dst, this[68], 4 * v8);
      return 0;
    case 64002:
      if (!*((_DWORD *)this + 135))
        return 4294956417;
      MEMORY[0x1E0C80A78](this);
      v11 = (char *)v19 - ((v10 + 15) & 0x7FFFFFFF0);
      v12 = *(unsigned int *)(v9 + 540);
      if ((_DWORD)v12)
      {
        v13 = *(float **)(v9 + 544);
        v14 = (float *)((char *)v19 - ((v10 + 15) & 0x7FFFFFFF0));
        v15 = *(unsigned int *)(v9 + 540);
        do
        {
          v16 = *v13++;
          v17 = v16 + 1.0e-20;
          *v14++ = log10f(v17) * 20.0;
          --v15;
        }
        while (v15);
        v18 = 4 * v12;
      }
      else
      {
        v18 = 0;
      }
      memcpy(__dst, v11, v18);
      return 0;
    case 21:
      v5 = 0;
      *__dst = *((_DWORD *)this + 134);
      return v5;
  }
  return 4294956417;
}

uint64_t AUFixedGain::SetProperty(AUFixedGain *this, int a2, int a3, unsigned int a4, _DWORD *a5, size_t size)
{
  uint64_t result;
  unsigned int v10;
  int v11;
  unint64_t v12;
  uint64_t v13;
  ausdk::AUElement *v14;
  ausdk::AUElement **v15;
  unint64_t v16;
  float v17;
  float v18;
  uint64_t v19;
  ausdk::AUElement *v20;
  ausdk::AUElement **v21;

  if (a3)
    return 4294956417;
  if ((a2 - 64002) >= 2)
  {
    if (a2 == 21)
    {
      result = 0;
      *((_DWORD *)this + 134) = *a5;
    }
    else
    {
      return 4294956417;
    }
  }
  else
  {
    v10 = size;
    if ((_DWORD)size)
    {
      CADeprecated::CAAutoFree<float>::allocBytes((void **)this + 68, size);
      result = *((_QWORD *)this + 68);
      if (result)
      {
        memcpy((void *)result, a5, v10);
        v11 = v10 >> 2;
        if (v10 >> 2 >= 0x10)
          v11 = 16;
        *((_DWORD *)this + 135) = v11;
        if (a2 == 64002)
        {
          if (v11)
          {
            v12 = 0;
            do
            {
              v13 = *((_QWORD *)this + 9);
              if (v13)
              {
                v14 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v13 + 32))(v13, 0);
              }
              else
              {
                v15 = (ausdk::AUElement **)*((_QWORD *)this + 6);
                if (*((ausdk::AUElement ***)this + 7) == v15)
                  v14 = 0;
                else
                  v14 = *v15;
              }
              ausdk::AUElement::SetParameter(v14, v12, *(float *)(*((_QWORD *)this + 68) + 4 * v12), 0);
              *(float *)(*((_QWORD *)this + 68) + 4 * v12) = __exp10f(*(float *)(*((_QWORD *)this + 68) + 4 * v12) / 20.0);
              ++v12;
            }
            while (v12 < *((unsigned int *)this + 135));
          }
        }
        else if (v11)
        {
          v16 = 0;
          do
          {
            v17 = *(float *)(*((_QWORD *)this + 68) + 4 * v16) + 1.0e-20;
            v18 = log10f(v17);
            v19 = *((_QWORD *)this + 9);
            if (v19)
            {
              v20 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v19 + 32))(v19, 0);
            }
            else
            {
              v21 = (ausdk::AUElement **)*((_QWORD *)this + 6);
              if (*((ausdk::AUElement ***)this + 7) == v21)
                v20 = 0;
              else
                v20 = *v21;
            }
            ausdk::AUElement::SetParameter(v20, v16++, v18 * 20.0, 0);
          }
          while (v16 < *((unsigned int *)this + 135));
        }
        result = 0;
        ++*((_DWORD *)this + 132);
      }
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t AUFixedGain::SetParameter(AUFixedGain *this, unsigned int a2, int a3, float a4)
{
  uint64_t result;
  uint64_t v8;
  ausdk::AUElement *v9;
  ausdk::AUElement **v10;

  if (a3)
    return 4294956418;
  v8 = *((_QWORD *)this + 9);
  if (v8)
  {
    v9 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v8 + 32))(v8, 0);
  }
  else
  {
    v10 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v10)
      v9 = 0;
    else
      v9 = *v10;
  }
  ausdk::AUElement::SetParameter(v9, a2, a4, 0);
  result = 0;
  ++*((_DWORD *)this + 132);
  return result;
}

uint64_t AUFixedGain::CanScheduleParameters(AUFixedGain *this)
{
  return 0;
}

uint64_t AUFixedGain::ProcessBufferLists(AUFixedGain *this, unsigned int *a2, const AudioBufferList *a3, AudioBufferList *a4, vDSP_Length __N)
{
  unsigned int v5;
  int v9;
  const void *v10;
  void *v11;
  unint64_t v12;
  uint64_t v13;
  float __B;

  v5 = __N;
  v9 = *((_DWORD *)this + 132);
  if (*((_DWORD *)this + 133) != v9)
  {
    v10 = (const void *)*((_QWORD *)this + 68);
    if (v10)
    {
      v11 = (void *)*((_QWORD *)this + 69);
      if (v11)
        memcpy(v11, v10, 4 * *((unsigned int *)this + 135));
    }
    *((_DWORD *)this + 133) = v9;
  }
  if (a3->mNumberBuffers)
  {
    v12 = 0;
    v13 = 16;
    do
    {
      if (*((_DWORD *)this + 134) || v12 >= *((unsigned int *)this + 135))
      {
        memcpy(*(void **)((char *)&a4->mNumberBuffers + v13), *(const void **)((char *)&a3->mNumberBuffers + v13), 4 * v5);
      }
      else
      {
        __B = 0.0;
        __B = *(float *)(*((_QWORD *)this + 69) + 4 * v12);
        vDSP_vsmul(*(const float **)((char *)&a3->mNumberBuffers + v13), 1, &__B, *(float **)((char *)&a4->mNumberBuffers + v13), 1, v5);
      }
      ++v12;
      v13 += 16;
    }
    while (v12 < a3->mNumberBuffers);
  }
  return 0;
}

uint64_t AUFixedGain::Render(AUFixedGain *this, unsigned int *a2, const AudioTimeStamp *a3, uint64_t a4)
{
  ausdk::AUInputElement *Element;
  uint64_t result;
  uint64_t v10;
  uint64_t BufferList;
  uint64_t v12;
  uint64_t v13;

  if (!ausdk::AUBase::HasInput(this, 0))
    return 4294956420;
  Element = (ausdk::AUInputElement *)ausdk::AUScope::SafeGetElement((AUFixedGain *)((char *)this + 80), 0);
  result = ausdk::AUInputElement::PullInput(Element, a2, a3, 0, a4);
  if (!(_DWORD)result)
  {
    v10 = ausdk::AUScope::SafeGetElement((AUFixedGain *)((char *)this + 80), 0);
    BufferList = ausdk::AUBufferList::GetBufferList((ausdk::AUBufferList *)(v10 + 144));
    v12 = ausdk::AUScope::SafeGetElement((AUFixedGain *)((char *)this + 128), 0);
    v13 = ausdk::AUBufferList::GetBufferList((ausdk::AUBufferList *)(v12 + 144));
    return (*(uint64_t (**)(AUFixedGain *, unsigned int *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)this + 176))(this, a2, BufferList, v13, a4);
  }
  return result;
}

uint64_t AUFixedGain::GetParameterList(AUFixedGain *this, int a2, unsigned int *a3, unsigned int *a4)
{
  uint64_t v5;
  uint64_t result;
  ausdk::AUScope *v8;

  if (a2)
  {
    LODWORD(v5) = 0;
    result = 4294956418;
  }
  else
  {
    v5 = 0;
    v8 = (AUFixedGain *)((char *)this + 80);
    do
    {
      if (*(_DWORD *)(ausdk::AUScope::SafeGetElement(v8, 0) + 108) <= v5)
        break;
      if (a3)
        a3[v5] = v5;
      ++v5;
    }
    while (v5 != 16);
    result = 0;
  }
  *a4 = v5;
  return result;
}

uint64_t AUFixedGain::GetParameterInfo(AUFixedGain *this, int a2, unsigned int a3, AudioUnitParameterInfo *buffer)
{
  uint64_t result;
  AudioUnitParameterOptions v6;

  if (a2)
    return 4294956418;
  buffer->flags = 0;
  buffer->unitName = 0;
  if (a3 > 0xF)
    return 4294956418;
  buffer->cfNameString = CFSTR("Gain (dB)");
  buffer->flags = 0x8000000;
  CFStringGetCString(CFSTR("Gain (dB)"), buffer->name, 52, 0x8000100u);
  result = 0;
  buffer->unit = kAudioUnitParameterUnit_Decibels;
  *(_QWORD *)&buffer->minValue = 0x41F00000C3480000;
  v6 = buffer->flags | 0x40008000;
  buffer->defaultValue = 0.0;
  buffer->flags = v6;
  return result;
}

uint64_t AUFixedGain::RestoreState(AUFixedGain *this, const void *a2)
{
  ++*((_DWORD *)this + 132);
  return 0;
}

double AUFixedGain::GetLatency(AUFixedGain *this)
{
  return 0.0;
}

double AUFixedGain::GetTailTime(AUFixedGain *this)
{
  return 0.0;
}

uint64_t AUFixedGain::SupportsTail(AUFixedGain *this)
{
  return 1;
}

BOOL AUFixedGain::StreamFormatWritable(AUFixedGain *this)
{
  return *((_BYTE *)this + 17) == 0;
}

uint64_t AUFixedGain::SupportedNumChannels(AUFixedGain *this, const AUChannelInfo **a2)
{
  if (a2)
    *a2 = (const AUChannelInfo *)&AUFixedGain::SupportedNumChannels(AUChannelInfo const**)::sSupportedChannelConfigs;
  return 1;
}

void std::vector<std::unique_ptr<HlcSuppressor>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  HlcSuppressor **v2;
  HlcSuppressor **v4;
  void *v5;

  v1 = *a1;
  v2 = (HlcSuppressor **)**a1;
  if (v2)
  {
    v4 = (HlcSuppressor **)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
        std::unique_ptr<HlcSuppressor>::reset[abi:ne180100](--v4);
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::vector<std::unique_ptr<SmoothedNoiseEstimator<float,NoiseSuppression::Noise::HendriksSPP>>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  _QWORD *v2;
  _QWORD *v4;
  void *v5;
  _QWORD *v6;
  _QWORD *v7;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v7 = (_QWORD *)*--v4;
        v6 = v7;
        *v4 = 0;
        if (v7)
          std::default_delete<SmoothedNoiseEstimator<float,NoiseSuppression::Noise::HendriksSPP>>::operator()[abi:ne180100](v6);
      }
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::vector<std::unique_ptr<MicSenseUtils::DynamicFIR<float>>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  _QWORD *v2;
  _QWORD *v4;
  void *v5;
  _QWORD *v6;
  _QWORD *v7;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v7 = (_QWORD *)*--v4;
        v6 = v7;
        *v4 = 0;
        if (v7)
          std::default_delete<MicSenseUtils::DynamicFIR<float>>::operator()[abi:ne180100](v6);
      }
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::vector<std::unique_ptr<FrequencyDomainCompressor>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  FrequencyDomainCompressor **v2;
  FrequencyDomainCompressor **v4;
  void *v5;

  v1 = *a1;
  v2 = (FrequencyDomainCompressor **)**a1;
  if (v2)
  {
    v4 = (FrequencyDomainCompressor **)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
        std::unique_ptr<FrequencyDomainCompressor>::reset[abi:ne180100](--v4);
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

_QWORD *std::unique_ptr<MicSenseUtils::GainsToFIR>::reset[abi:ne180100](_QWORD *result, uint64_t a2)
{
  _QWORD *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;

  v2 = (_QWORD *)*result;
  *result = a2;
  if (v2)
  {
    std::unique_ptr<vp::vx::Control_Center_Manager>::reset[abi:ne180100](v2 + 31, 0);
    v3 = (void *)v2[28];
    if (v3)
    {
      v2[29] = v3;
      operator delete(v3);
    }
    v4 = (void *)v2[25];
    if (v4)
    {
      v2[26] = v4;
      operator delete(v4);
    }
    v5 = (void *)v2[22];
    if (v5)
    {
      v2[23] = v5;
      operator delete(v5);
    }
    v6 = (void *)v2[19];
    if (v6)
    {
      v2[20] = v6;
      operator delete(v6);
    }
    v7 = (void *)v2[16];
    if (v7)
    {
      v2[17] = v7;
      operator delete(v7);
    }
    v8 = (void *)v2[13];
    if (v8)
    {
      v2[14] = v8;
      operator delete(v8);
    }
    v9 = (void *)v2[10];
    if (v9)
    {
      v2[11] = v9;
      operator delete(v9);
    }
    v10 = (void *)v2[7];
    if (v10)
    {
      v2[8] = v10;
      operator delete(v10);
    }
    JUMPOUT(0x1BCC95CECLL);
  }
  return result;
}

_QWORD *std::unique_ptr<PrescriptiveAmplification>::reset[abi:ne180100](_QWORD *result, uint64_t a2)
{
  _QWORD *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;

  v2 = (_QWORD *)*result;
  *result = a2;
  if (v2)
  {
    v3 = (void *)v2[21];
    if (v3)
    {
      v2[22] = v3;
      operator delete(v3);
    }
    v4 = (void *)v2[18];
    if (v4)
    {
      v2[19] = v4;
      operator delete(v4);
    }
    v5 = (void *)v2[15];
    if (v5)
    {
      v2[16] = v5;
      operator delete(v5);
    }
    v6 = (void *)v2[12];
    if (v6)
    {
      v2[13] = v6;
      operator delete(v6);
    }
    v7 = (void *)v2[9];
    if (v7)
    {
      v2[10] = v7;
      operator delete(v7);
    }
    v8 = (void *)v2[6];
    if (v8)
    {
      v2[7] = v8;
      operator delete(v8);
    }
    v9 = (void *)v2[3];
    if (v9)
    {
      v2[4] = v9;
      operator delete(v9);
    }
    JUMPOUT(0x1BCC95CECLL);
  }
  return result;
}

FrequencyDomainCompressor *std::unique_ptr<FrequencyDomainCompressor>::reset[abi:ne180100](FrequencyDomainCompressor **a1)
{
  FrequencyDomainCompressor *result;

  result = *a1;
  *a1 = 0;
  if (result)
  {
    FrequencyDomainCompressor::~FrequencyDomainCompressor(result);
    JUMPOUT(0x1BCC95CECLL);
  }
  return result;
}

void FrequencyDomainCompressor::~FrequencyDomainCompressor(FrequencyDomainCompressor *this)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void **v6;

  v2 = (void *)*((_QWORD *)this + 17);
  if (v2)
  {
    *((_QWORD *)this + 18) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 14);
  if (v3)
  {
    *((_QWORD *)this + 15) = v3;
    operator delete(v3);
  }
  v4 = (void *)*((_QWORD *)this + 11);
  if (v4)
  {
    *((_QWORD *)this + 12) = v4;
    operator delete(v4);
  }
  v6 = (void **)((char *)this + 24);
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v6);
  v5 = *(void **)this;
  if (*(_QWORD *)this)
  {
    *((_QWORD *)this + 1) = v5;
    operator delete(v5);
  }
}

void std::default_delete<MicSenseUtils::DynamicFIR<float>>::operator()[abi:ne180100](_QWORD *a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  v2 = (void *)a1[21];
  if (v2)
  {
    a1[22] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[16];
  if (v3)
  {
    a1[17] = v3;
    operator delete(v3);
  }
  v4 = (void *)a1[13];
  if (v4)
  {
    a1[14] = v4;
    operator delete(v4);
  }
  v5 = (void *)a1[10];
  if (v5)
  {
    a1[11] = v5;
    operator delete(v5);
  }
  v6 = (void *)a1[7];
  if (v6)
  {
    a1[8] = v6;
    operator delete(v6);
  }
  JUMPOUT(0x1BCC95CECLL);
}

void std::default_delete<SmoothedNoiseEstimator<float,NoiseSuppression::Noise::HendriksSPP>>::operator()[abi:ne180100](_QWORD *a1)
{
  void *v2;
  void *v3;

  v2 = (void *)a1[32];
  if (v2)
  {
    a1[33] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[29];
  if (v3)
  {
    a1[30] = v3;
    operator delete(v3);
  }
  NoiseSuppression::Noise::HendriksSPP::~HendriksSPP((NoiseSuppression::Noise::HendriksSPP *)(a1 + 1));
  JUMPOUT(0x1BCC95CECLL);
}

HlcSuppressor *std::unique_ptr<HlcSuppressor>::reset[abi:ne180100](HlcSuppressor **a1)
{
  HlcSuppressor *result;

  result = *a1;
  *a1 = 0;
  if (result)
  {
    HlcSuppressor::~HlcSuppressor(result);
    JUMPOUT(0x1BCC95CECLL);
  }
  return result;
}

void HlcSuppressor::~HlcSuppressor(HlcSuppressor *this)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;

  v2 = (void *)*((_QWORD *)this + 35);
  if (v2)
  {
    *((_QWORD *)this + 36) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 32);
  if (v3)
  {
    *((_QWORD *)this + 33) = v3;
    operator delete(v3);
  }
  v4 = (void *)*((_QWORD *)this + 29);
  if (v4)
  {
    *((_QWORD *)this + 30) = v4;
    operator delete(v4);
  }
  v5 = (void *)*((_QWORD *)this + 26);
  if (v5)
  {
    *((_QWORD *)this + 27) = v5;
    operator delete(v5);
  }
  v6 = (void *)*((_QWORD *)this + 23);
  if (v6)
  {
    *((_QWORD *)this + 24) = v6;
    operator delete(v6);
  }
  v7 = (void *)*((_QWORD *)this + 20);
  if (v7)
  {
    *((_QWORD *)this + 21) = v7;
    operator delete(v7);
  }
  v8 = (void *)*((_QWORD *)this + 17);
  if (v8)
  {
    *((_QWORD *)this + 18) = v8;
    operator delete(v8);
  }
  v9 = (void *)*((_QWORD *)this + 14);
  if (v9)
  {
    *((_QWORD *)this + 15) = v9;
    operator delete(v9);
  }
  v10 = (void *)*((_QWORD *)this + 11);
  if (v10)
  {
    *((_QWORD *)this + 12) = v10;
    operator delete(v10);
  }
  v11 = (void *)*((_QWORD *)this + 8);
  if (v11)
  {
    *((_QWORD *)this + 9) = v11;
    operator delete(v11);
  }
  v12 = *(void **)this;
  if (*(_QWORD *)this)
  {
    *((_QWORD *)this + 1) = v12;
    operator delete(v12);
  }
}

uint64_t MicSenseUtils::DynamicFIR<float>::DynamicFIR(uint64_t a1, unint64_t a2)
{
  char **v3;
  char **v4;
  char **v5;
  char **v6;
  unint64_t v7;
  unint64_t v8;
  int v10;

  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = a2;
  *(_QWORD *)(a1 + 16) = 0;
  *(_OWORD *)(a1 + 56) = 0u;
  v3 = (char **)(a1 + 56);
  *(_DWORD *)(a1 + 24) = 1000593162;
  v4 = (char **)(a1 + 80);
  *(_OWORD *)(a1 + 104) = 0u;
  v5 = (char **)(a1 + 104);
  v6 = (char **)(a1 + 128);
  *(_OWORD *)(a1 + 168) = 0u;
  *(_QWORD *)(a1 + 36) = 0;
  *(_QWORD *)(a1 + 28) = 0;
  *(_QWORD *)(a1 + 41) = 0;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_QWORD *)(a1 + 184) = 0;
  std::vector<float>::resize(a1 + 168, a2);
  v7 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 40) = v7;
  *(float *)(a1 + 28) = 1.0 / (float)v7;
  v10 = 0;
  std::vector<float>::assign(v5, v7, &v10);
  v10 = 0;
  std::vector<float>::assign(v6, v7, &v10);
  v10 = 0;
  std::vector<float>::assign(v3, v7, &v10);
  v8 = 2 * *(_QWORD *)(a1 + 8) - 1;
  v10 = 0;
  std::vector<float>::assign(v4, v8, &v10);
  return a1;
}

void sub_1B637C454(_Unwind_Exception *exception_object)
{
  _QWORD *v1;
  void **v2;
  void **v3;
  void **v4;
  void **v5;
  void **v6;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;

  v8 = *v6;
  if (*v6)
  {
    v1[22] = v8;
    operator delete(v8);
  }
  v9 = *v5;
  if (*v5)
  {
    v1[17] = v9;
    operator delete(v9);
  }
  v10 = *v4;
  if (*v4)
  {
    v1[14] = v10;
    operator delete(v10);
  }
  v11 = *v3;
  if (*v3)
  {
    v1[11] = v11;
    operator delete(v11);
  }
  v12 = *v2;
  if (*v2)
  {
    v1[8] = v12;
    operator delete(v12);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__split_buffer<std::unique_ptr<MicSenseUtils::DynamicFIR<float>>>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;
  _QWORD *v4;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 8;
    v4 = *(_QWORD **)(i - 8);
    *(_QWORD *)(i - 8) = 0;
    if (v4)
      std::default_delete<MicSenseUtils::DynamicFIR<float>>::operator()[abi:ne180100](v4);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t SmoothedNoiseEstimator<float,NoiseSuppression::Noise::HendriksSPP>::SmoothedNoiseEstimator(uint64_t a1, unint64_t a2, float a3, float a4)
{
  NoiseSuppression::Noise::HendriksSPP *v6;
  int v8;
  int v9;

  *(float *)a1 = a4;
  v6 = NoiseSuppression::Noise::HendriksSPP::HendriksSPP((NoiseSuppression::Noise::HendriksSPP *)(a1 + 8), a3, a2, a4);
  *(_DWORD *)(a1 + 36) = 872415232;
  NoiseSuppression::Noise::HendriksSPP::Init(v6);
  v9 = 0;
  std::vector<float>::vector((_QWORD *)(a1 + 232), a2, &v9);
  v8 = 0;
  std::vector<float>::vector((_QWORD *)(a1 + 256), a2, &v8);
  *(_DWORD *)(a1 + 280) = 0;
  return a1;
}

void sub_1B637C588(_Unwind_Exception *a1)
{
  NoiseSuppression::Noise::HendriksSPP *v1;
  uint64_t v2;
  void **v3;
  void *v5;

  v5 = *v3;
  if (*v3)
  {
    *(_QWORD *)(v2 + 240) = v5;
    operator delete(v5);
  }
  NoiseSuppression::Noise::HendriksSPP::~HendriksSPP(v1);
  _Unwind_Resume(a1);
}

void HearingLossCompensator_Core::SetParameter(HearingLossCompensator_Core *this, unint64_t a2, float a3)
{
  float v4;
  uint64_t v5;
  float v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  float v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  float v17;
  uint64_t v18;
  float **v19;
  float *v20;
  float *v21;
  float v22;
  float v23;
  uint64_t v24;
  float **v25;
  float *v26;
  unint64_t v27;
  uint64_t v28;
  float **v29;
  float *v30;
  float *v31;
  float v32;
  uint64_t v33;
  float **v34;
  float *v35;
  float *v36;
  float v37;
  float v38;
  float v39;
  uint64_t v40;
  float **v41;
  float *v42;
  float *v43;
  float v44;
  float v45;
  uint64_t v46;
  uint64_t *v47;
  uint64_t v48;
  uint64_t v49;
  float v50;
  BOOL v51;

  if (HearingLossCompensator_Core::kMaxValue[a2] < a3)
    a3 = HearingLossCompensator_Core::kMaxValue[a2];
  v4 = HearingLossCompensator_Core::kMinValue[a2];
  if (a3 < v4)
    a3 = HearingLossCompensator_Core::kMinValue[a2];
  v5 = *(_QWORD *)this;
  *(float *)(*(_QWORD *)this + 4 * a2) = a3;
  if (a2 > 7)
  {
    switch(a2)
    {
      case 0xDuLL:
        *(_DWORD *)(*((_QWORD *)this + 81) + 4) = *(_DWORD *)(v5 + 52);
        *(_DWORD *)(*((_QWORD *)this + 82) + 4) = *(_DWORD *)(v5 + 52);
        goto LABEL_11;
      case 0xEuLL:
        PrescriptiveAmplification::SetFineTuningSimple(*((PrescriptiveAmplification **)this + 81), *(float *)(v5 + 56), v4);
        PrescriptiveAmplification::SetFineTuningSimple(*((PrescriptiveAmplification **)this + 82), *(float *)(*(_QWORD *)this + 56), v6);
        goto LABEL_11;
      case 0xFuLL:
        **((_DWORD **)this + 81) = *(_DWORD *)(v5 + 60);
        **((_DWORD **)this + 82) = *(_DWORD *)(v5 + 60);
        goto LABEL_11;
      case 0x10uLL:
        if (*((_DWORD *)this + 6))
        {
          v7 = 0;
          do
            FrequencyDomainCompressor::SetParameter(*(float ***)(*((_QWORD *)this + 90) + 8 * v7++), 5, *(float *)(*(_QWORD *)this + 64));
          while (v7 < *((unsigned int *)this + 6));
        }
        return;
      default:
        if ((a2 & 0xFFFFFFFFFFFFFFFELL) == 0x1A)
        {
          *((_BYTE *)this + 80) = 1;
LABEL_11:
          *((_BYTE *)this + 82) = 1;
        }
        else
        {
          switch(a2)
          {
            case 8uLL:
              v8 = *((unsigned int *)this + 6);
              if ((_DWORD)v8)
              {
                v9 = (uint64_t *)*((_QWORD *)this + 90);
                do
                {
                  v11 = *v9++;
                  v10 = v11;
                  v12 = *(float *)(v5 + 32);
                  if (v12 > 60.0)
                    v12 = 60.0;
                  if (v12 < 0.0)
                    v12 = 0.0;
                  *(float *)(*(_QWORD *)v10 + 12) = v12;
                  --v8;
                }
                while (v8);
              }
              break;
            case 9uLL:
              v13 = *((unsigned int *)this + 6);
              if ((_DWORD)v13)
              {
                v14 = (uint64_t *)*((_QWORD *)this + 90);
                do
                {
                  v16 = *v14++;
                  v15 = v16;
                  v17 = *(float *)(v5 + 36);
                  if (v17 > 0.0)
                    v17 = 0.0;
                  if (v17 < -60.0)
                    v17 = -60.0;
                  *(float *)(*(_QWORD *)v15 + 16) = v17;
                  --v13;
                }
                while (v13);
              }
              break;
            case 0xAuLL:
              v18 = *((unsigned int *)this + 6);
              if ((_DWORD)v18)
              {
                v19 = (float **)*((_QWORD *)this + 90);
                do
                {
                  v21 = *v19++;
                  v20 = v21;
                  v22 = *(float *)(v5 + 40);
                  if (v22 > 1000.0)
                    v22 = 1000.0;
                  if (v22 < 0.0)
                    v22 = 0.0;
                  *(float *)(*(_QWORD *)v20 + 4) = v22;
                  v23 = expf(-1.0 / (float)((float)(v22 * 0.001) * v20[12]));
                  v20[15] = 1.0 - v23;
                  v20[16] = v23;
                  --v18;
                }
                while (v18);
              }
              break;
            case 0xBuLL:
              v33 = *((unsigned int *)this + 6);
              if ((_DWORD)v33)
              {
                v34 = (float **)*((_QWORD *)this + 90);
                do
                {
                  v36 = *v34++;
                  v35 = v36;
                  v37 = *(float *)(v5 + 44);
                  if (v37 > 5000.0)
                    v37 = 5000.0;
                  if (v37 < 0.0)
                    v37 = 0.0;
                  *(float *)(*(_QWORD *)v35 + 8) = v37;
                  v38 = expf(-1.0 / (float)((float)(v37 * 0.001) * v35[12]));
                  v35[17] = 1.0 - v38;
                  v35[18] = v38;
                  --v33;
                }
                while (v33);
              }
              break;
            case 0xCuLL:
              v39 = expf(-1.0 / (float)((float)(*(float *)(v5 + 48) * 0.001) * *((float *)this + 18)));
              *((float *)this + 16) = v39;
              *((float *)this + 17) = 1.0 - v39;
              break;
            case 0x11uLL:
              *((_BYTE *)this + 77) = *(float *)(v5 + 68) > 0.5;
              break;
            case 0x12uLL:
              v24 = *((unsigned int *)this + 6);
              if ((_DWORD)v24)
              {
                v25 = (float **)*((_QWORD *)this + 96);
                do
                {
                  v26 = *v25++;
                  v26[70] = expf(-1.0 / (float)(*(float *)(v5 + 72) * *v26));
                  --v24;
                }
                while (v24);
              }
              break;
            case 0x13uLL:
              *((float *)this + 15) = __exp10f(*(float *)(v5 + 76) / 10.0);
              break;
            case 0x14uLL:
              v40 = *((unsigned int *)this + 6);
              if ((_DWORD)v40)
              {
                v41 = (float **)*((_QWORD *)this + 99);
                do
                {
                  v43 = *v41++;
                  v42 = v43;
                  v44 = *(float *)(v5 + 80);
                  if (v44 > 100.0)
                    v44 = 100.0;
                  if (v44 < 0.0)
                    v44 = 0.0;
                  *(float *)(*(_QWORD *)v42 + 8) = v44;
                  v45 = expf(-1.0 / (float)((float)(v44 * 0.001) * v42[6]));
                  v42[13] = v45;
                  v42[14] = 1.0 - v45;
                  --v40;
                }
                while (v40);
              }
              break;
            case 0x15uLL:
              v46 = *((unsigned int *)this + 6);
              if ((_DWORD)v46)
              {
                v47 = (uint64_t *)*((_QWORD *)this + 99);
                do
                {
                  v49 = *v47++;
                  v48 = v49;
                  v50 = *(float *)(v5 + 84);
                  if (v50 > 0.0)
                    v50 = 0.0;
                  if (v50 < -60.0)
                    v50 = -60.0;
                  *(float *)(*(_QWORD *)v48 + 16) = v50;
                  --v46;
                }
                while (v46);
              }
              break;
            case 0x18uLL:
              if (*((_DWORD *)this + 6))
              {
                v27 = 0;
                do
                  FrequencyDomainCompressor::SetParameter(*(float ***)(*((_QWORD *)this + 90) + 8 * v27++), 0, *(float *)(*(_QWORD *)this + 96) + 16.0);
                while (v27 < *((unsigned int *)this + 6));
              }
              break;
            case 0x19uLL:
              v28 = *((unsigned int *)this + 6);
              if ((_DWORD)v28)
              {
                v29 = (float **)*((_QWORD *)this + 90);
                do
                {
                  v31 = *v29++;
                  v30 = v31;
                  v32 = *(float *)(v5 + 100);
                  if (v32 > 30.0)
                    v32 = 30.0;
                  if (v32 < -80.0)
                    v32 = -80.0;
                  *(float *)(*(_QWORD *)v30 + 24) = v32;
                  v30[21] = v32;
                  --v28;
                }
                while (v28);
              }
              break;
            case 0x1CuLL:
              *(float *)(*((_QWORD *)this + 81) + 8) = 1.0 - *(float *)(v5 + 112);
              *(float *)(*((_QWORD *)this + 82) + 8) = 1.0 - *(float *)(v5 + 112);
              goto LABEL_11;
            case 0x1DuLL:
              *(_DWORD *)(*((_QWORD *)this + 81) + 12) = *(_DWORD *)(v5 + 116);
              *(_DWORD *)(*((_QWORD *)this + 82) + 12) = *(_DWORD *)(v5 + 116);
              goto LABEL_11;
            case 0x1EuLL:
              v51 = *(float *)(v5 + 120) > 0.5 && *((_DWORD *)this + 6) > 1u;
              *((_BYTE *)this + 79) = v51;
              break;
            case 0x1FuLL:
              *((_BYTE *)this + 83) = *(float *)(v5 + 124) > 0.1;
              break;
            default:
              return;
          }
        }
        break;
    }
  }
  else
  {
    *(_WORD *)((char *)this + 81) = 257;
  }
}

void HearingLossCompensator_Core::SetSensitivityOffset(HearingLossCompensator_Core *this, const float *a2)
{
  unint64_t v2;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  float *v8;
  unint64_t v9;
  float *v10;
  float *v11;
  float v12;
  int v13;
  float *__C;
  float *v15;

  v2 = *((unsigned int *)this + 6);
  if ((_DWORD)v2)
  {
    v5 = 0;
    while (!*(_QWORD *)(*((_QWORD *)this + 90) + 8 * v5))
    {
LABEL_12:
      if (++v5 >= v2)
        return;
    }
    v6 = *((unsigned int *)this + 10);
    v13 = 0;
    std::vector<float>::vector(&__C, v6, &v13);
    vDSP_vlint(a2, *((const float **)this + 35), 1, __C, 1, *((unsigned int *)this + 10), 8uLL);
    v7 = *(_QWORD *)(*((_QWORD *)this + 90) + 8 * v5);
    v8 = __C;
    v9 = *(unsigned int *)(v7 + 52);
    if (v9 > v15 - __C)
      __assert_rtn("SetSensitivityOffset", "FrequencyDomainCompressor.cpp", 148, "offsets_dB.size() >= mNumSubbands");
    if ((_DWORD)v9)
    {
      v10 = *(float **)(v7 + 112);
      v11 = __C;
      do
      {
        v12 = *v11++;
        *v10++ = *(float *)(v7 + 76) + v12;
        --v9;
      }
      while (v9);
    }
    else if (!__C)
    {
LABEL_11:
      v2 = *((unsigned int *)this + 6);
      goto LABEL_12;
    }
    v15 = v8;
    operator delete(v8);
    goto LABEL_11;
  }
}

void sub_1B637CC00(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void HearingLossCompensator_Core::Process(int **this, _QWORD *a2, _QWORD *a3, vDSP_Length a4)
{
  unint64_t v4;
  _QWORD *v5;
  vDSP_Length v6;
  HearingLossCompensator_Core *v7;
  unint64_t v9;
  int *v10;
  int v11;
  int *v12;
  _DWORD *v13;
  int *v14;
  unsigned int v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  BOOL v20;
  _UNKNOWN **v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t i;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  float *v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  const void **v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  float v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  float *v46;
  float *v47;
  uint64_t v48;
  uint64_t *v49;
  uint64_t v50;
  vDSP_Length v51;
  uint64_t v52;
  float *v53;
  uint64_t v54;
  float *v55;
  float *v56;
  uint64_t v57;
  float v58;
  uint64_t v59;
  float *v60;
  unint64_t v61;
  unint64_t v62;
  float *v63;
  float *v64;
  float v65;
  int v66;
  uint64_t v67;
  unsigned int v68;
  float v69;
  float v70;
  float v71;
  uint64_t v72;
  uint64_t v73;
  float v74;
  uint64_t v75;
  float *v76;
  float *v77;
  unint64_t v78;
  const float *v79;
  uint64_t v80;
  uint64_t v81;
  float *v82;
  float *v83;
  vDSP_Length v84;
  float *v85;
  vDSP_Length v86;
  float v87;
  float v88;
  float v89;
  uint64_t v90;
  int **v91;
  uint64_t v92;
  int v93;
  _DWORD *v94;
  unint64_t v95;
  uint64_t v96;
  float v97;
  unint64_t v98;
  int *v99;
  float **v100;
  vDSP_Length v101;
  int v102;
  unsigned int v103;
  int v104;
  const float *v105;
  unsigned int v106;
  float *imagp;
  void *v108;
  size_t v109;
  _QWORD *v110;
  uint64_t __len;
  float *__B;
  HearingLossCompensator_Core *v113;
  _QWORD *v114;
  vDSP_Length v115;
  const float *v116;
  const float *v117;
  unint64_t v118;
  _QWORD *v119;
  uint64_t v120;
  DSPSplitComplex __A;

  v4 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a2[1] - *a2) >> 3);
  if (v4 != *((_DWORD *)this + 6))
    __assert_rtn("Process", "HearingLossCompensator_Core.cpp", 551, "input.size() == mNumChannels");
  v5 = a3;
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a3[1] - *a3) >> 3) != v4)
    __assert_rtn("Process", "HearingLossCompensator_Core.cpp", 552, "output.size() == mNumChannels");
  v6 = a4;
  v7 = (HearingLossCompensator_Core *)this;
  if (*((_DWORD *)this + 8) != a4)
    __assert_rtn("Process", "HearingLossCompensator_Core.cpp", 553, "numFrames == mBlockSize");
  v9 = (uint64_t)(*(_QWORD *)(*a2 + 8) - *(_QWORD *)*a2) >> 2;
  if (*((_BYTE *)this + 76))
  {
    if (v9 >= 2 * a4)
      goto LABEL_6;
LABEL_10:
    __assert_rtn("Process", "HearingLossCompensator_Core.cpp", 554, "mIsFrequencyDomain ? (input[0].size() >= 2 * numFrames) : (input[0].size() >= numFrames)");
  }
  if (v9 < a4)
    goto LABEL_10;
LABEL_6:
  if (*((_BYTE *)this + 81))
  {
    v10 = *this;
    v11 = **this;
    if (*((_BYTE *)this + 83))
    {
      v12 = this[26];
      *v12 = v11;
      v12[1] = v10[1];
      v12[2] = v10[2];
      v12[3] = v10[3];
      v12[4] = v10[4];
      v12[5] = v10[5];
      v12[6] = v10[6];
      v12[7] = v10[7];
      v13 = (_DWORD *)*((_QWORD *)v7 + 29);
      *v13 = v10[32];
      v13[1] = v10[33];
      v13[2] = v10[34];
      v13[3] = v10[35];
      v13[4] = v10[36];
      v13[5] = v10[37];
      v13[6] = v10[38];
      v13[7] = v10[39];
      vDSP_vlint((const float *)v12, *((const float **)v7 + 35), 1, *((float **)v7 + 32), 1, *((unsigned int *)v7 + 10), 8uLL);
      PrescriptiveAmplification::SetAudiogram(*((_QWORD *)v7 + 81), *((_QWORD *)v7 + 32), *((_QWORD *)v7 + 33));
      vDSP_vlint(*((const float **)v7 + 29), *((const float **)v7 + 35), 1, *((float **)v7 + 32), 1, *((unsigned int *)v7 + 10), 8uLL);
    }
    else
    {
      v14 = this[23];
      *v14 = v11;
      v14[1] = v10[1];
      v14[2] = v10[2];
      v14[3] = v10[3];
      v14[4] = v10[4];
      v14[5] = v10[5];
      v14[6] = v10[6];
      v14[7] = v10[7];
      vDSP_vlint((const float *)v14, *((const float **)v7 + 35), 1, *((float **)v7 + 32), 1, *((unsigned int *)v7 + 10), 8uLL);
      PrescriptiveAmplification::SetAudiogram(*((_QWORD *)v7 + 81), *((_QWORD *)v7 + 32), *((_QWORD *)v7 + 33));
    }
    PrescriptiveAmplification::SetAudiogram(*((_QWORD *)v7 + 82), *((_QWORD *)v7 + 32), *((_QWORD *)v7 + 33));
    *((_BYTE *)v7 + 81) = 0;
  }
  if (*((_BYTE *)v7 + 80))
  {
    v15 = *(float *)(*(_QWORD *)v7 + 104);
    v16 = *(float *)(*(_QWORD *)v7 + 108);
    HearingLossCompensator_Core::SetSensitivityOffset(v7, kHLC_Generic_SensitivityOffsets_dB);
    v17 = *((_QWORD *)v7 + 81);
    *(_DWORD *)(v17 + 20) = 0;
    PrescriptiveAmplification::ComputeFdVectors(v17);
    v18 = *((_QWORD *)v7 + 82);
    *(_DWORD *)(v18 + 20) = 0;
    PrescriptiveAmplification::ComputeFdVectors(v18);
    if (v15 == 2)
    {
      v22 = *((_QWORD *)v7 + 81);
      *(_DWORD *)(v22 + 20) = 1;
      PrescriptiveAmplification::ComputeFdVectors(v22);
      v23 = *((_QWORD *)v7 + 82);
      *(_DWORD *)(v23 + 20) = 1;
      PrescriptiveAmplification::ComputeFdVectors(v23);
      v19 = v16 - 8202;
      if (v16 - 8202 >= 9 || ((0x13Fu >> v19) & 1) == 0)
        goto LABEL_25;
      v21 = &off_1E69D69E0;
    }
    else
    {
      v19 = v16 - 8202;
      v20 = v15 != 1 || v19 >= 9;
      if (v20 || ((0x13Fu >> v19) & 1) == 0)
        goto LABEL_25;
      v21 = &off_1E69D6998;
    }
    HearingLossCompensator_Core::SetSensitivityOffset(v7, (const float *)v21[v19]);
LABEL_25:
    *((_BYTE *)v7 + 80) = 0;
  }
  if (*((_BYTE *)v7 + 82))
  {
    v24 = *((unsigned int *)v7 + 6);
    if ((_DWORD)v24)
    {
      for (i = 0; i < v24; ++i)
      {
        v26 = *((_QWORD *)v7 + i + 81);
        if (v26)
        {
          v27 = *(_QWORD *)(*((_QWORD *)v7 + 90) + 8 * i);
          if (v27)
          {
            PrescriptiveAmplification::GetGainTargets(v26, *(_QWORD *)(v27 + 24), *(_QWORD *)(v27 + 32));
            v24 = *((unsigned int *)v7 + 6);
          }
        }
      }
    }
    *((_BYTE *)v7 + 82) = 0;
  }
  v28 = *a2;
  if (a2[1] != *a2)
  {
    v29 = 0;
    v30 = 0;
    do
    {
      __A.realp = 0;
      __A.imagp = 0;
      v31 = *(float **)(*((_QWORD *)v7 + 47) + v29);
      __A.realp = v31;
      __A.imagp = *(float **)(*((_QWORD *)v7 + 50) + v29);
      v32 = *((unsigned int *)v7 + 8);
      if (*((_BYTE *)v7 + 76))
      {
        if ((_DWORD)v32)
        {
          memmove(v31, *(const void **)(v28 + v29), 4 * v32);
          v33 = *((unsigned int *)v7 + 8);
          if ((_DWORD)v33)
            memmove(*(void **)(*((_QWORD *)v7 + 50) + v29), (const void *)(*(_QWORD *)(*a2 + v29) + 4 * v33), 4 * (2 * v33) - 4 * v33);
        }
      }
      else
      {
        if ((_DWORD)v32)
          memmove(*((void **)v7 + 11), *(const void **)(v28 + v29), 4 * v32);
        VPTimeFreqConverter::Analyze(*(VPTimeFreqConverter **)(*((_QWORD *)v7 + 84) + 8 * v30), *((const float **)v7 + 11), &__A);
      }
      ++v30;
      v28 = *a2;
      v29 += 24;
    }
    while (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a2[1] - *a2) >> 3) > v30);
  }
  LODWORD(v34) = *((_DWORD *)v7 + 6);
  if ((_DWORD)v34)
  {
    v35 = 0;
    v36 = 0;
    do
    {
      __A.realp = 0;
      __A.imagp = 0;
      __A.realp = *(float **)(*((_QWORD *)v7 + 47) + v35);
      __A.imagp = *(float **)(*((_QWORD *)v7 + 50) + v35);
      vDSP_zvmags(&__A, 1, *(float **)(*((_QWORD *)v7 + 53) + v35), 1, (*((_DWORD *)v7 + 8) + 1));
      v37 = *((_QWORD *)v7 + 53) + v35;
      **(float **)v37 = *__A.realp * *__A.realp;
      *(float *)(*(_QWORD *)(v37 + 8) - 4) = *__A.imagp * *__A.imagp;
      if (*((_BYTE *)v7 + 78))
      {
        v38 = (const void **)SmoothedNoiseEstimator<float,NoiseSuppression::Noise::HendriksSPP>::process<std::vector<float>>(*(_QWORD *)(*((_QWORD *)v7 + 96) + 8 * v36));
        memcpy(*(void **)(*((_QWORD *)v7 + 59) + v35), *v38, 4 * *((unsigned int *)v7 + 9));
      }
      ++v36;
      v34 = *((unsigned int *)v7 + 6);
      v35 += 24;
    }
    while (v36 < v34);
  }
  if (*((_BYTE *)v7 + 79))
  {
    vDSP_vfill(&MicSenseUtils::kZerof, *((float **)v7 + 17), 1, *((unsigned int *)v7 + 9));
    vDSP_vfill(&MicSenseUtils::kZerof, *((float **)v7 + 11), 1, *((unsigned int *)v7 + 9));
    if (*((_DWORD *)v7 + 6))
    {
      v39 = 0;
      v40 = 0;
      do
      {
        vDSP_vadd(*(const float **)(*((_QWORD *)v7 + 53) + v39), 1, *((const float **)v7 + 17), 1, *((float **)v7 + 17), 1, *((unsigned int *)v7 + 9));
        vDSP_vadd(*(const float **)(*((_QWORD *)v7 + 59) + v39), 1, *((const float **)v7 + 11), 1, *((float **)v7 + 11), 1, *((unsigned int *)v7 + 9));
        ++v40;
        v41 = *((unsigned int *)v7 + 6);
        v39 += 24;
      }
      while (v40 < v41);
      v42 = (float)v41;
    }
    else
    {
      v42 = 0.0;
    }
    *(float *)&__A.realp = v42;
    vDSP_vsdiv(*((const float **)v7 + 17), 1, (const float *)&__A, *((float **)v7 + 17), 1, *((unsigned int *)v7 + 9));
    vDSP_vsdiv(*((const float **)v7 + 11), 1, (const float *)&__A, *((float **)v7 + 11), 1, *((unsigned int *)v7 + 9));
    LODWORD(v34) = *((_DWORD *)v7 + 6);
    if ((_DWORD)v34)
    {
      v43 = 0;
      v44 = 0;
      do
      {
        memcpy(*(void **)(*((_QWORD *)v7 + 53) + v43), *((const void **)v7 + 17), 4 * *((unsigned int *)v7 + 9));
        memcpy(*(void **)(*((_QWORD *)v7 + 59) + v43), *((const void **)v7 + 11), 4 * *((unsigned int *)v7 + 9));
        ++v44;
        v34 = *((unsigned int *)v7 + 6);
        v43 += 24;
      }
      while (v44 < v34);
    }
  }
  v110 = a2;
  if ((_DWORD)v34)
  {
    v45 = 0;
    v116 = (const float *)((char *)v7 + 68);
    v117 = (const float *)((char *)v7 + 64);
    v119 = (_QWORD *)((char *)v7 + 136);
    __len = 4 * v6;
    __B = (float *)((char *)v7 + 60);
    v114 = v5;
    v115 = v6;
    v113 = v7;
    do
    {
      v46 = *(float **)(*((_QWORD *)v7 + 56) + 24 * v45);
      vDSP_vsmsma(v46, 1, v117, *(const float **)(*((_QWORD *)v7 + 53) + 24 * v45), 1, v116, v46, 1, *((unsigned int *)v7 + 9));
      CFilterBank::filterbank_compute_bank32(*((_QWORD *)v7 + 80), *(const float **)(*((_QWORD *)v7 + 56) + 24 * v45), *(float **)(*((_QWORD *)v7 + 68) + 24 * v45));
      v47 = *(float **)(*((_QWORD *)v7 + 68) + 24 * v45);
      vDSP_vmul(v47, 1, *((const float **)v7 + 41), 1, v47, 1, *((unsigned int *)v7 + 10));
      v48 = *(_QWORD *)(*((_QWORD *)v7 + 90) + 8 * v45);
      v49 = (uint64_t *)(*((_QWORD *)v7 + 68) + 24 * v45);
      v50 = *v49;
      v51 = *(unsigned int *)(v48 + 52);
      if (v51 > (v49[1] - *v49) >> 2)
        __assert_rtn("Process", "FrequencyDomainCompressor.cpp", 203, "subbandPower.size() >= mNumSubbands");
      v52 = *((_QWORD *)v7 + 74) + 24 * v45;
      v53 = *(float **)v52;
      if (v51 > (uint64_t)(*(_QWORD *)(v52 + 8) - *(_QWORD *)v52) >> 2)
        __assert_rtn("Process", "FrequencyDomainCompressor.cpp", 204, "subbandGain_dB.size() >= mNumSubbands");
      if ((_DWORD)v51)
      {
        v118 = v45;
        v54 = 0;
        v120 = *(_QWORD *)(v48 + 112);
        v56 = *(float **)(v48 + 88);
        v55 = *(float **)(v48 + 96);
        v57 = *(_QWORD *)(v48 + 136);
        while (1)
        {
          v58 = *(float *)(v48 + 84)
              + (float)(*(float *)(v120 + 4 * v54) + (float)(log10f(fmaxf(*(float *)(v50 + 4 * v54), 2.2204e-16)) * 10.0));
          if (*(v55 - 1) < v58)
            v58 = *(v55 - 1);
          if (v58 < *v56)
            v58 = *v56;
          v59 = v55 - v56;
          if (v55 != v56)
          {
            v60 = v56;
            v61 = v55 - v56;
            do
            {
              v62 = v61 >> 1;
              v63 = &v60[v61 >> 1];
              v65 = *v63;
              v64 = v63 + 1;
              v61 += ~(v61 >> 1);
              if (v65 < v58)
                v60 = v64;
              else
                v61 = v62;
            }
            while (v61);
            v59 = v60 - v56;
          }
          v66 = v59 - 1;
          if ((int)v59 < 1)
            break;
          v67 = *(_QWORD *)(v48 + 24);
          if (v59 >= (unint64_t)(v55 - v56))
            goto LABEL_79;
          v68 = v66 & ~(v66 >> 31);
          v69 = (float)(v58 - v56[v68]) / (float)(v56[v59] - v56[v68]);
          v70 = (float)(v69 * *(float *)(*(_QWORD *)(v67 + 24 * v54) + 4 * v59))
              + (1.0 - v69) * *(float *)(*(_QWORD *)(v67 + 24 * v54) + 4 * v68);
LABEL_81:
          v71 = *(float *)(v57 + 4 * v54);
          v72 = 64;
          if (v70 > v71)
            v72 = 72;
          v73 = 60;
          if (v70 > v71)
            v73 = 68;
          v74 = (float)(v71 * *(float *)(v48 + v72)) + (float)(*(float *)(v48 + v73) * v70);
          *(float *)(v57 + 4 * v54) = v74;
          v53[v54++] = v74;
          if (v54 == v51)
          {
            v5 = v114;
            v6 = v115;
            v7 = v113;
            v45 = v118;
            goto LABEL_88;
          }
        }
        v67 = *(_QWORD *)(v48 + 24);
        if (!(_DWORD)v59)
        {
          v70 = **(float **)(v67 + 24 * v54);
          goto LABEL_81;
        }
LABEL_79:
        v70 = *(float *)(*(_QWORD *)(v67 + 24 * v54) + 4 * v66);
        goto LABEL_81;
      }
      v51 = 0;
LABEL_88:
      vDSP_vclip(v53, 1, (const float *)(*(_QWORD *)v48 + 16), (const float *)(*(_QWORD *)v48 + 12), v53, 1, v51);
      if (*((_BYTE *)v7 + 77))
      {
        v75 = 3 * v45;
        v76 = *(float **)(*((_QWORD *)v7 + 59) + 24 * v45);
        vDSP_vsmul(v76, 1, __B, v76, 1, *((unsigned int *)v7 + 9));
        CFilterBank::filterbank_compute_bank32(*((_QWORD *)v7 + 80), *(const float **)(*((_QWORD *)v7 + 59) + 24 * v45), *(float **)(*((_QWORD *)v7 + 71) + 24 * v45));
        v77 = *(float **)(*((_QWORD *)v7 + 71) + 24 * v45);
        vDSP_vmul(v77, 1, *((const float **)v7 + 41), 1, v77, 1, *((unsigned int *)v7 + 10));
        v78 = v45;
        v79 = *(const float **)(*((_QWORD *)v7 + 99) + 8 * v45);
        v80 = *((_QWORD *)v7 + 71);
        v81 = *((_QWORD *)v7 + 77) + 8 * v75;
        vDSP_vsmsma(*((const float **)v79 + 23), 1, v79 + 11, *(const float **)(*((_QWORD *)v7 + 68) + 8 * v75), 1, v79 + 12, *((float **)v79 + 23), 1, *((unsigned int *)v79 + 7));
        vDSP_vthr(*(const float **)(v80 + 8 * v75), 1, &MicSenseUtils::kepsf, *((float **)v79 + 8), 1, *((unsigned int *)v79 + 7));
        vDSP_vdiv(*((const float **)v79 + 8), 1, *((const float **)v79 + 17), 1, *((float **)v79 + 14), 1, *((unsigned int *)v79 + 7));
        vDSP_vmul(*((const float **)v79 + 23), 1, *((const float **)v79 + 14), 1, *((float **)v79 + 8), 1, *((unsigned int *)v79 + 7));
        vDSP_vclip(*((const float **)v79 + 8), 1, &MicSenseUtils::kOnef, &kParamValue_Mode1ReverbBlend_Max, *((float **)v79 + 26), 1, *((unsigned int *)v79 + 7));
        vDSP_vsadd(*((const float **)v79 + 26), 1, &kHlcSuppressor_SnrShift, *((float **)v79 + 8), 1, *((unsigned int *)v79 + 7));
        vDSP_vmul(*((const float **)v79 + 20), 1, *((const float **)v79 + 14), 1, *((float **)v79 + 11), 1, *((unsigned int *)v79 + 7));
        vDSP_vsmsma(*((const float **)v79 + 11), 1, v79 + 9, *((const float **)v79 + 8), 1, v79 + 10, *((float **)v79 + 11), 1, *((unsigned int *)v79 + 7));
        vDSP_vsadd(*((const float **)v79 + 11), 1, &MicSenseUtils::kOnef, *((float **)v79 + 8), 1, *((unsigned int *)v79 + 7));
        vDSP_vdiv(*((const float **)v79 + 8), 1, *((const float **)v79 + 11), 1, *((float **)v79 + 8), 1, *((unsigned int *)v79 + 7));
        vDSP_vsq(*((const float **)v79 + 8), 1, *((float **)v79 + 8), 1, *((unsigned int *)v79 + 7));
        vDSP_vmul(*((const float **)v79 + 8), 1, *((const float **)v79 + 23), 1, *((float **)v79 + 8), 1, *((unsigned int *)v79 + 7));
        vDSP_vmul(*((const float **)v79 + 8), 1, *((const float **)v79 + 14), 1, *((float **)v79 + 29), 1, *((unsigned int *)v79 + 7));
        vDSP_vsadd(*((const float **)v79 + 29), 1, &MicSenseUtils::kOnef, *((float **)v79 + 8), 1, *((unsigned int *)v79 + 7));
        vDSP_vdiv(*((const float **)v79 + 8), 1, *((const float **)v79 + 29), 1, *((float **)v79 + 8), 1, *((unsigned int *)v79 + 7));
        vDSP_vsadd(*((const float **)v79 + 26), 1, &MicSenseUtils::kOnef, *((float **)v79 + 11), 1, *((unsigned int *)v79 + 7));
        vDSP_vmul(*((const float **)v79 + 8), 1, *((const float **)v79 + 11), 1, *((float **)v79 + 11), 1, *((unsigned int *)v79 + 7));
        v82 = (float *)*((_QWORD *)v79 + 11);
        v83 = *(float **)v81;
        if (*((_QWORD *)v79 + 12) - (_QWORD)v82 < *(_QWORD *)(v81 + 8) - *(_QWORD *)v81)
          __assert_rtn("ComputeHypergeometricGain", "HlcSuppressor.cpp", 237, "x.size() >= result.size()");
        v84 = *((unsigned int *)v79 + 7);
        v85 = *(float **)v81;
        v86 = v84;
        v45 = v78;
        if ((_DWORD)v84)
        {
          do
          {
            v87 = *v82;
            v88 = floorf(v87 + v87);
            v89 = 1.0;
            if (v88 >= 0.0)
            {
              if (v88 <= 19.0)
                v89 = (float)((float)((float)-(float)(v88 - (float)(v87 * 2.0))
                                    * *((float *)&NoiseSuppression::Gain::Gain<float,(LogTypes)0>::ComputeHypergeometricGain(std::vector<float> &,AutoValue<std::vector<float>,(LogTypes)0> &)::table
                                      + v88
                                      + 1))
                            + (float)((float)(1.0 - (float)-(float)(v88 - (float)(v87 * 2.0)))
                                    * *((float *)&NoiseSuppression::Gain::Gain<float,(LogTypes)0>::ComputeHypergeometricGain(std::vector<float> &,AutoValue<std::vector<float>,(LogTypes)0> &)::table
                                      + v88)))
                    / sqrtf(v87 + 0.0001);
              else
                v89 = (float)(0.1296 / v87) + 1.0;
            }
            *v85++ = v89;
            ++v82;
            --v86;
          }
          while (v86);
        }
        vDSP_vmul(v83, 1, *((const float **)v79 + 8), 1, v83, 1, v84);
        vDSP_vclip(*(const float **)v81, 1, &MicSenseUtils::kepsf, &MicSenseUtils::kOnef, *(float **)v81, 1, *((unsigned int *)v79 + 7));
        vDSP_vsmsma(*((const float **)v79 + 35), 1, v79 + 13, *(const float **)v81, 1, v79 + 14, *((float **)v79 + 35), 1, *((unsigned int *)v79 + 7));
        memcpy(*(void **)v81, *((const void **)v79 + 35), 4 * *((unsigned int *)v79 + 7));
        vDSP_vmul(*((const float **)v79 + 23), 1, *(const float **)v81, 1, *((float **)v79 + 20), 1, *((unsigned int *)v79 + 7));
        vDSP_vdbcon(*(const float **)v81, 1, &MicSenseUtils::kOnef, *(float **)v81, 1, *((unsigned int *)v79 + 7), 1u);
        v90 = *(_QWORD *)v79;
        if (*(float *)(*(_QWORD *)v79 + 12) != 0.0)
        {
          vDSP_vsadd(*(const float **)v81, 1, (const float *)(*(_QWORD *)v79 + 12), *(float **)v81, 1, *((unsigned int *)v79 + 7));
          v90 = *(_QWORD *)v79;
        }
        vDSP_vclip(*(const float **)v81, 1, (const float *)(v90 + 16), &MicSenseUtils::kZerof, *(float **)v81, 1, *((unsigned int *)v79 + 7));
        vDSP_vadd(*(const float **)(*((_QWORD *)v7 + 77) + 24 * v78), 1, *(const float **)(*((_QWORD *)v7 + 74) + 24 * v78), 1, *((float **)v7 + 20), 1, *((unsigned int *)v7 + 10));
        vDSP_vclip(*((const float **)v7 + 20), 1, (const float *)(*(_QWORD *)v7 + 88), (const float *)(*(_QWORD *)v7 + 32), *((float **)v7 + 20), 1, *((unsigned int *)v7 + 10));
        v91 = (int **)*((_QWORD *)v7 + 80);
        v92 = *((_QWORD *)v7 + 20);
      }
      else
      {
        v91 = (int **)*((_QWORD *)v7 + 80);
        v92 = *(_QWORD *)(*((_QWORD *)v7 + 74) + 24 * v45);
      }
      CFilterBank::filterbank_compute_psd16(v91, v92, *((float **)v7 + 17));
      v93 = *((_DWORD *)v7 + 9);
      v94 = (_DWORD *)*((_QWORD *)v7 + 17);
      v94[v93 - 1] = v94[v93 - 2];
      if (v93)
      {
        v95 = 0;
        do
        {
          v96 = *((_QWORD *)v7 + 17);
          v97 = __exp10((float)(*(float *)(v96 + 4 * v95) * 0.05));
          *(float *)(v96 + 4 * v95++) = v97;
          v98 = *((unsigned int *)v7 + 9);
        }
        while (v95 < v98);
        v94 = (_DWORD *)*v119;
      }
      else
      {
        v98 = 0;
      }
      memcpy(*(void **)(*((_QWORD *)v7 + 62) + 24 * v45), v94, 4 * v98);
      if (*((_DWORD *)v7 + 12))
        goto LABEL_106;
      if (*((_BYTE *)v7 + 76))
        goto LABEL_113;
      if ((int)*(float *)(*(_QWORD *)v7 + 92) >= 1)
      {
LABEL_106:
        vDSP_vthr(*((const float **)v7 + 17), 1, &kHearingLossCompensator_ClipThreshold, *((float **)v7 + 17), 1, *((unsigned int *)v7 + 9));
        v99 = (int *)*((_QWORD *)v7 + 83);
        v100 = (float **)(*((_QWORD *)v7 + 65) + 24 * v45);
        v101 = *((unsigned int *)v7 + 8);
        if ((int)*(float *)(*(_QWORD *)v7 + 92) > 1)
          MicSenseUtils::GainsToFIR::gainsToLinearPhaseFilter(v99, (uint64_t)v119, v100, v101, 0);
        else
          MicSenseUtils::GainsToFIR::gainsToMinimumPhaseFilter((uint64_t)v99, (uint64_t)v119, v100, v101);
      }
      if (!*((_BYTE *)v7 + 76) && *(float *)(*(_QWORD *)v7 + 92))
      {
        MicSenseUtils::DynamicFIR<float>::setCoefficients(*(_QWORD *)(*((_QWORD *)v7 + 93) + 8 * v45), (const void **)(*((_QWORD *)v7 + 65) + 24 * v45), *((unsigned int *)v7 + 8));
        MicSenseUtils::DynamicFIR<float>::process(*(_QWORD *)(*((_QWORD *)v7 + 93) + 8 * v45), *(void **)(*v110 + 24 * v45), *(float **)(*v5 + 24 * v45), v6);
        goto LABEL_124;
      }
LABEL_113:
      __A.realp = 0;
      __A.imagp = 0;
      __A.realp = *(float **)(*((_QWORD *)v7 + 47) + 24 * v45);
      __A.imagp = *(float **)(*((_QWORD *)v7 + 50) + 24 * v45);
      memcpy(*((void **)v7 + 11), *((const void **)v7 + 17), 4 * *((unsigned int *)v7 + 9));
      v103 = *((_DWORD *)v7 + 7);
      v102 = *((_DWORD *)v7 + 8);
      v104 = v102 + 1;
      v105 = (const float *)*((_QWORD *)v7 + 11);
      if (v102 + 1 < v103)
      {
        v106 = ~v102 + v103;
        do
          v105[v104++] = v105[v106--];
        while (v106);
      }
      vDSP_zrvmul(&__A, 1, v105, 1, &__A, 1, v6);
      if (*((_BYTE *)v7 + 76))
      {
        if (v6)
        {
          memmove(*(void **)(*v5 + 24 * v45), __A.realp, __len);
          imagp = __A.imagp;
          v108 = (void *)(*(_QWORD *)(*v5 + 24 * v45) + 4 * v6);
          v109 = __len;
LABEL_121:
          memmove(v108, imagp, v109);
        }
      }
      else
      {
        VPTimeFreqConverter::Synthesize(*(VPTimeFreqConverter **)(*((_QWORD *)v7 + 87) + 8 * v45), &__A, *((float **)v7 + 14));
        if (v6)
        {
          imagp = (float *)*((_QWORD *)v7 + 14);
          v108 = *(void **)(*v5 + 24 * v45);
          v109 = __len;
          goto LABEL_121;
        }
      }
LABEL_124:
      ++v45;
    }
    while (v45 < *((unsigned int *)v7 + 6));
  }
}

uint64_t SmoothedNoiseEstimator<float,NoiseSuppression::Noise::HendriksSPP>::process<std::vector<float>>(uint64_t a1)
{
  uint64_t v1;

  v1 = a1 + 8;
  (*(void (**)(uint64_t))(*(_QWORD *)(a1 + 8) + 24))(a1 + 8);
  return AddMultiplyRVectorRScalarMultiplyRVectorRScalar<std::vector<float>,std::vector<float>,std::vector<float>>(v1 + 248, *(const float **)(v1 + 248), *(_QWORD *)(v1 + 256), *(const float **)(v1 + 224), *(_QWORD *)(v1 + 232), *(float *)(v1 + 272), 1.0 - *(float *)(v1 + 272));
}

void *MicSenseUtils::DynamicFIR<float>::setCoefficients(uint64_t a1, const void **a2, vDSP_Length __N)
{
  vDSP_Length v3;
  uint64_t v6;

  if (*(_QWORD *)(a1 + 8) < __N)
    __assert_rtn("setCoefficients", "MicSenseDynamicFIR.hpp", 93, "newFilterLength <= mMaxNumFrames");
  v3 = __N;
  if (*(_QWORD *)(a1 + 16) != __N)
  {
    *(_QWORD *)(a1 + 16) = __N;
    vDSP_vfill(&MicSenseUtils::DynamicFIR<float>::setCoefficients(std::vector<float> const&,unsigned long)::val, *(float **)(a1 + 104), 1, __N);
    vDSP_vfill(&MicSenseUtils::DynamicFIR<float>::setCoefficients(std::vector<float> const&,unsigned long)::val, *(float **)(a1 + 128), 1, *(_QWORD *)(a1 + 16));
    vDSP_vfill(&MicSenseUtils::DynamicFIR<float>::setCoefficients(std::vector<float> const&,unsigned long)::val, *(float **)(a1 + 80), 1, *(_QWORD *)(a1 + 16) + *(_QWORD *)(a1 + 8) - 1);
    v6 = *(_QWORD *)(a1 + 128);
    *(_QWORD *)(a1 + 152) = *(_QWORD *)(a1 + 104);
    *(_QWORD *)(a1 + 160) = v6;
    *(_QWORD *)(a1 + 32) = 0;
    v3 = *(_QWORD *)(a1 + 16);
  }
  *(_BYTE *)(a1 + 48) = 1;
  return memcpy(*(void **)(a1 + 56), *a2, 4 * v3);
}

void *MicSenseUtils::DynamicFIR<float>::process(uint64_t a1, void *__src, float *a3, vDSP_Length a4)
{
  uint64_t v8;
  uint64_t v9;
  void *v10;
  vDSP_Length v11;
  vDSP_Length v12;
  float v13;
  float v15;
  float __Step;
  float __Start;
  float v18;

  if (*(_BYTE *)(a1 + 48) && !*(_QWORD *)(a1 + 32))
  {
    v8 = *(_QWORD *)(a1 + 152);
    v9 = *(_QWORD *)(a1 + 104);
    if (v8 == v9)
      v10 = *(void **)(a1 + 128);
    else
      v10 = *(void **)(a1 + 104);
    if (v8 != v9)
      v8 = *(_QWORD *)(a1 + 128);
    *(_QWORD *)(a1 + 152) = v10;
    *(_QWORD *)(a1 + 160) = v8;
    memcpy(v10, *(const void **)(a1 + 56), 4 * *(_QWORD *)(a1 + 16));
    *(_BYTE *)(a1 + 48) = 0;
    *(_QWORD *)(a1 + 32) = *(_QWORD *)(a1 + 40) - 1;
  }
  memcpy((void *)(*(_QWORD *)(a1 + 80) + 4 * *(_QWORD *)(a1 + 16) - 4), __src, 4 * a4);
  vDSP_conv(*(const float **)(a1 + 80), 1, (const float *)(*(_QWORD *)(a1 + 152) + 4 * *(_QWORD *)(a1 + 16) - 4), -1, a3, 1, a4, *(_QWORD *)(a1 + 16));
  v11 = *(_QWORD *)(a1 + 32);
  if (v11)
  {
    if (v11 >= a4)
      v12 = a4;
    else
      v12 = *(_QWORD *)(a1 + 32);
    vDSP_conv(*(const float **)(a1 + 80), 1, (const float *)(*(_QWORD *)(a1 + 160) + 4 * *(_QWORD *)(a1 + 16) - 4), -1, *(float **)(a1 + 168), 1, v12, *(_QWORD *)(a1 + 16));
    v13 = *(float *)(a1 + 28);
    __Start = (float)*(unint64_t *)(a1 + 32) / (float)*(unint64_t *)(a1 + 40);
    v18 = -v13;
    v15 = 1.0 - __Start;
    __Step = v13;
    vDSP_vrampmul(a3, 1, &v15, &__Step, a3, 1, v12);
    vDSP_vrampmuladd(*(const float **)(a1 + 168), 1, &__Start, &v18, a3, 1, v12);
    *(_QWORD *)(a1 + 32) -= v12;
  }
  return memmove(*(void **)(a1 + 80), (const void *)(*(_QWORD *)(a1 + 80) + 4 * a4), 4 * *(_QWORD *)(a1 + 16) - 4);
}

uint64_t AddMultiplyRVectorRScalarMultiplyRVectorRScalar<std::vector<float>,std::vector<float>,std::vector<float>>(uint64_t a1, const float *__A, uint64_t a3, const float *a4, uint64_t a5, float a6, float a7)
{
  uint64_t v7;
  float __D;
  float __B;

  __D = a7;
  __B = a6;
  v7 = (uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 2;
  if (v7 != (a3 - (uint64_t)__A) >> 2)
    __assert_rtn("AddMultiplyRVectorRScalarMultiplyRVectorRScalar", "SmoothedNoiseEstimator.h", 64, "result.size() == A.size()");
  if (v7 != (a5 - (uint64_t)a4) >> 2)
    __assert_rtn("AddMultiplyRVectorRScalarMultiplyRVectorRScalar", "SmoothedNoiseEstimator.h", 65, "result.size() == C.size()");
  vDSP_vsmsma(__A, 1, &__B, a4, 1, &__D, *(float **)a1, 1, (uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 2);
  return a1;
}

void AUsubMAEC::myAecCore::~myAecCore(AUsubMAEC::myAecCore *this)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;

  v2 = (void *)*((_QWORD *)this + 371);
  if (v2)
  {
    free(v2);
    *((_QWORD *)this + 371) = 0;
  }
  v3 = (void *)*((_QWORD *)this + 372);
  if (v3)
  {
    free(v3);
    *((_QWORD *)this + 372) = 0;
  }
  v4 = (void *)*((_QWORD *)this + 383);
  if (v4)
  {
    free(v4);
    *((_QWORD *)this + 383) = 0;
  }
  v5 = (void *)*((_QWORD *)this + 384);
  if (v5)
  {
    free(v5);
    *((_QWORD *)this + 384) = 0;
  }
  v6 = (void *)*((_QWORD *)this + 385);
  if (v6)
  {
    free(v6);
    *((_QWORD *)this + 385) = 0;
  }
  v7 = (void *)*((_QWORD *)this + 386);
  if (v7)
  {
    free(v7);
    *((_QWORD *)this + 386) = 0;
  }
  v8 = (void *)*((_QWORD *)this + 387);
  if (v8)
  {
    free(v8);
    *((_QWORD *)this + 387) = 0;
  }
  v9 = (void *)*((_QWORD *)this + 390);
  if (v9)
  {
    free(v9);
    *((_QWORD *)this + 390) = 0;
  }
  AUsubMAEC::Kalman::removeKalman((AUsubMAEC::myAecCore *)((char *)this + 1936), 0);
  AUsubMAEC::Kalman::removeKalman((AUsubMAEC::myAecCore *)((char *)this + 2216), 1);
  if (*((_BYTE *)this + 2))
  {
    v10 = (void *)*((_QWORD *)this + 388);
    if (v10)
    {
      free(v10);
      *((_QWORD *)this + 388) = 0;
    }
    v11 = (void *)*((_QWORD *)this + 389);
    if (v11)
    {
      free(v11);
      *((_QWORD *)this + 389) = 0;
    }
  }
  v12 = (void *)*((_QWORD *)this + 379);
  if (v12)
  {
    free(v12);
    *((_QWORD *)this + 379) = 0;
  }
  v13 = (void *)*((_QWORD *)this + 377);
  if (v13)
  {
    free(v13);
    *((_QWORD *)this + 377) = 0;
  }
  v14 = (void *)*((_QWORD *)this + 378);
  if (v14)
  {
    free(v14);
    *((_QWORD *)this + 378) = 0;
  }
  AUsubMAEC::dualEC::~dualEC((AUsubMAEC::myAecCore *)((char *)this + 2712));
  AUsubMAEC::dualEC::~dualEC((AUsubMAEC::myAecCore *)((char *)this + 2496));
  AUsubMAEC::learnRate::~learnRate((AUsubMAEC::myAecCore *)((char *)this + 1720));
  AUsubMAEC::learnRate::~learnRate((AUsubMAEC::myAecCore *)((char *)this + 1504));
  AUsubMAEC::learnRate::~learnRate((AUsubMAEC::myAecCore *)((char *)this + 1288));
  AUsubMAEC::learnRate::~learnRate((AUsubMAEC::myAecCore *)((char *)this + 1072));
  AUsubMAEC::learnRate::~learnRate((AUsubMAEC::myAecCore *)((char *)this + 856));
  AUsubMAEC::myAecBuffers::~myAecBuffers((AUsubMAEC::myAecCore *)((char *)this + 768));
  AUsubMAEC::myAecBuffers::~myAecBuffers((AUsubMAEC::myAecCore *)((char *)this + 680));
  AUsubMAEC::myAecBuffers::~myAecBuffers((AUsubMAEC::myAecCore *)((char *)this + 592));
  AUsubMAEC::myAecBuffers::~myAecBuffers((AUsubMAEC::myAecCore *)((char *)this + 504));
  AUsubMAEC::myAecBuffers::~myAecBuffers((AUsubMAEC::myAecCore *)((char *)this + 416));
  AUsubMAEC::myFilter::~myFilter((float ***)this + 43);
  AUsubMAEC::myFilter::~myFilter((float ***)this + 34);
  AUsubMAEC::myFilter::~myFilter((float ***)this + 25);
  freeMatrix(*((_DWORD *)this + 41), (float ***)this + 14);
  freeMatrix(*((_DWORD *)this + 41), (float ***)this + 15);
  freeMatrix(*((_DWORD *)this + 41), (float ***)this + 17);
  v15 = (void *)*((_QWORD *)this + 16);
  if (v15)
  {
    free(v15);
    *((_QWORD *)this + 16) = 0;
  }
  v16 = (void *)*((_QWORD *)this + 24);
  if (v16)
  {
    free(v16);
    *((_QWORD *)this + 24) = 0;
  }
  v17 = (void *)*((_QWORD *)this + 18);
  if (v17)
  {
    free(v17);
    *((_QWORD *)this + 18) = 0;
  }
  v18 = (void *)*((_QWORD *)this + 19);
  if (v18)
  {
    free(v18);
    *((_QWORD *)this + 19) = 0;
  }
  MultiRadixFFT_Dispose(*((_QWORD *)this + 1));
  v19 = (void *)*((_QWORD *)this + 10);
  if (v19)
  {
    free(v19);
    *((_QWORD *)this + 10) = 0;
  }
  v20 = (void *)*((_QWORD *)this + 11);
  if (v20)
  {
    free(v20);
    *((_QWORD *)this + 11) = 0;
  }
  v21 = (void *)*((_QWORD *)this + 12);
  if (v21)
  {
    free(v21);
    *((_QWORD *)this + 12) = 0;
  }
}

void AUsubMAEC::myAecCore::sigOLA(AUsubMAEC::myAecCore *this, float *a2, float *a3, DSPComplex *__C, float *a5, float *a6)
{
  uint64_t v12;
  DSPSplitComplex v13;
  MultiRadixRealFFT *v14;
  int v15;
  size_t v16;
  int v17;
  int v18;
  uint64_t v19;
  int v20;
  int v21;
  int v22;
  DSPSplitComplex v23;

  vDSP_vclr((float *)__C, 1, *((int *)this + 733));
  v12 = *((int *)this + 5);
  *a3 = a2[v12];
  memcpy(*((void **)this + 12), a2, v12 * 4);
  memcpy(*((void **)this + 13), a3, 4 * *((int *)this + 5));
  v13 = (DSPSplitComplex)*((_OWORD *)this + 6);
  v23 = v13;
  if (*((float *)this + 12) != 1.0)
  {
    vDSP_vsmul(a2, 1, (const float *)this + 12, v13.realp, 1, *((int *)this + 5));
    vDSP_vsmul(a3, 1, (const float *)this + 12, *((float **)this + 13), 1, *((int *)this + 5));
  }
  v14 = (MultiRadixRealFFT *)*((_QWORD *)this + 1);
  if (v14)
    MultiRadixRealFFT::RealInPlaceTransform(v14, &v23, -1, *(float *)&v13.realp);
  vDSP_ztoc(&v23, 1, __C, 2, *((int *)this + 5));
  vDSP_vmul((const float *)__C, 1, *((const float **)this + 10), 1, (float *)__C, 1, *((int *)this + 4));
  v15 = *((_DWORD *)this + 733);
  v16 = 4 * v15;
  if (*((int *)this + 737) <= 1)
  {
    v19 = 0;
  }
  else
  {
    v17 = 0;
    v18 = 1;
    do
    {
      memmove(&a5[v17], &a5[v17 + v15], v16);
      v15 = *((_DWORD *)this + 733);
      v17 += v15;
      ++v18;
    }
    while (v18 < *((_DWORD *)this + 737));
    v19 = v17;
  }
  memcpy(&a5[v19], __C, v16);
  vDSP_vclr(a6, 1, *((int *)this + 736));
  v20 = *((_DWORD *)this + 737);
  if (v20 >= 1)
  {
    v21 = 0;
    v22 = -1;
    do
    {
      vDSP_vadd(a6, 1, &a5[*((_DWORD *)this + 733) * v21++ + *((_DWORD *)this + 736) * (v20 + v22)], 1, a6, 1, *((int *)this + 736));
      v20 = *((_DWORD *)this + 737);
      --v22;
    }
    while (v21 < v20);
  }
}

void IRSpatializer::~IRSpatializer(IRSpatializer *this)
{
  uint64_t v2;

  *(_QWORD *)this = &off_1E69D6A38;
  v2 = *((_QWORD *)this + 42);
  *((_QWORD *)this + 42) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  Spatializer::~Spatializer(this);
}

{
  uint64_t v2;

  *(_QWORD *)this = &off_1E69D6A38;
  v2 = *((_QWORD *)this + 42);
  *((_QWORD *)this + 42) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  Spatializer::~Spatializer(this);
  JUMPOUT(0x1BCC95CECLL);
}

uint64_t IRSpatializer::initialize(IRSpatializer *this, float a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6;
  int v8;
  int v9;

  if (!(_DWORD)a4)
    __assert_rtn("initialize", "IRSpatializer.cpp", 25, "inMaxFramesPerSlice > 0");
  if (a2 <= 0.0)
    __assert_rtn("initialize", "IRSpatializer.cpp", 26, "inSampleRate > 0");
  *((float *)this + 2) = a2;
  *((_DWORD *)this + 3) = a4;
  v6 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, _QWORD, _QWORD, _QWORD, _QWORD))(**((_QWORD **)this + 42)
                                                                                           + 16))(*((_QWORD *)this + 42), a4, 128, 0, 0, 0, 0);
  if (!(_DWORD)v6)
  {
    v9 = 0;
    std::vector<float>::resize((uint64_t)this + 136, a3, &v9);
    v8 = 0;
    std::vector<float>::resize((uint64_t)this + 272, a3, &v8);
    *((_WORD *)this + 8) = 257;
    *((_DWORD *)this + 5) = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 42) + 128))(*((_QWORD *)this + 42));
  }
  return v6;
}

uint64_t IRSpatializer::reset(IRSpatializer *this)
{
  uint64_t result;

  result = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 42) + 32))(*((_QWORD *)this + 42));
  *((_BYTE *)this + 17) = 1;
  *((_BYTE *)this + 268) = *((_BYTE *)this + 132);
  return result;
}

uint64_t IRSpatializer::processAccumulating(IRSpatializer *this, const float *a2, float *const *a3, int a4, float *const *a5, uint64_t a6, uint64_t a7, __n128 a8, IR::ComplexDataCircBuffer *a9)
{
  float v10;
  float *v16;
  float v17;
  uint64_t v18;
  unsigned int v19;
  unsigned int v20;
  unint64_t v21;
  unsigned int v22;
  unint64_t v23;
  NSObject *v25;
  NSObject *v26;
  std::string *v28;
  __int128 v29;
  std::string *v30;
  __int128 v31;
  std::string *v32;
  std::string *p_p;
  std::string v34;
  std::string v35;
  std::string __p;
  uint8_t buf[4];
  std::string *v38;
  __int16 v39;
  int v40;
  uint64_t v41;

  v41 = *MEMORY[0x1E0C80C00];
  if ((_DWORD)a6 == a4)
  {
    if (*((_BYTE *)this + 16))
    {
      v10 = a8.n128_f32[0];
      if (*((_BYTE *)this + 320) || *((_BYTE *)this + 17))
      {
        *((_BYTE *)this + 320) = 0;
        (*(void (**)(_QWORD, _QWORD, float))(**((_QWORD **)this + 42) + 144))(*((_QWORD *)this + 42), 0, *((float *)this + 12));
        (*(void (**)(_QWORD, uint64_t, float))(**((_QWORD **)this + 42) + 144))(*((_QWORD *)this + 42), 1, *((float *)this + 13));
        (*(void (**)(_QWORD, uint64_t, float))(**((_QWORD **)this + 42) + 144))(*((_QWORD *)this + 42), 2, *((float *)this + 14));
        *((_BYTE *)this + 17) = 0;
      }
      a8.n128_u32[0] = 0;
      if (*((_BYTE *)this + 132))
        a8.n128_f32[0] = v10;
      v16 = (float *)*((_QWORD *)this + 42);
      v17 = 3000.0;
      if (*((_DWORD *)this + 81))
        v17 = -1.0;
      v16[100] = v17;
      v18 = (*(uint64_t (**)(float *, const float *, float *const *, uint64_t, uint64_t, _QWORD, uint64_t, IR::ComplexDataCircBuffer *, __n128))(*(_QWORD *)v16 + 40))(v16, a2, a5, a6, a7, 0, a7, a9, a8);
      v19 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 42) + 72))(*((_QWORD *)this + 42));
      if (v19 >= a6)
        v20 = a6;
      else
        v20 = v19;
      if (v20)
      {
        v21 = 0;
        do
        {
          vDSP_vadd(a5[v21], 1, a3[v21], 1, a3[v21], 1, a7);
          ++v21;
          v22 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 42) + 72))(*((_QWORD *)this + 42));
          if (v22 >= a6)
            v23 = a6;
          else
            v23 = v22;
        }
        while (v21 < v23);
      }
      *((_BYTE *)this + 268) = *((_BYTE *)this + 132);
    }
    else
    {
      if (getAUSMV2Log(void)::onceToken != -1)
        dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_5474);
      v26 = getAUSMV2Log(void)::gLog;
      if (os_log_type_enabled((os_log_t)getAUSMV2Log(void)::gLog, OS_LOG_TYPE_DEBUG))
      {
        std::string::basic_string[abi:ne180100]<0>(&v34, "IRSpatializer");
        std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>("::", &v34, &v35);
        std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>("processAccumulating", &v35, &__p);
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          p_p = &__p;
        else
          p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
        *(_DWORD *)buf = 136315138;
        v38 = p_p;
        _os_log_debug_impl(&dword_1B5ED0000, v26, OS_LOG_TYPE_DEBUG, "%s: ERROR: not initialized", buf, 0xCu);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
        if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v35.__r_.__value_.__l.__data_);
        if (SHIBYTE(v34.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v34.__r_.__value_.__l.__data_);
      }
      return 4294956429;
    }
  }
  else
  {
    if (getAUSMV2Log(void)::onceToken != -1)
      dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_5474);
    v25 = getAUSMV2Log(void)::gLog;
    if (os_log_type_enabled((os_log_t)getAUSMV2Log(void)::gLog, OS_LOG_TYPE_DEBUG))
    {
      std::string::basic_string[abi:ne180100]<0>(&v34, "IRSpatializer");
      v28 = std::string::append(&v34, "::", 2uLL);
      v29 = *(_OWORD *)&v28->__r_.__value_.__l.__data_;
      v35.__r_.__value_.__r.__words[2] = v28->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v35.__r_.__value_.__l.__data_ = v29;
      v28->__r_.__value_.__l.__size_ = 0;
      v28->__r_.__value_.__r.__words[2] = 0;
      v28->__r_.__value_.__r.__words[0] = 0;
      v30 = std::string::append(&v35, "processAccumulating", 0x13uLL);
      v31 = *(_OWORD *)&v30->__r_.__value_.__l.__data_;
      __p.__r_.__value_.__r.__words[2] = v30->__r_.__value_.__r.__words[2];
      *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v31;
      v30->__r_.__value_.__l.__size_ = 0;
      v30->__r_.__value_.__r.__words[2] = 0;
      v30->__r_.__value_.__r.__words[0] = 0;
      v32 = &__p;
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v32 = (std::string *)__p.__r_.__value_.__r.__words[0];
      *(_DWORD *)buf = 136315394;
      v38 = v32;
      v39 = 1024;
      v40 = a4;
      _os_log_debug_impl(&dword_1B5ED0000, v25, OS_LOG_TYPE_DEBUG, "%s: ERROR: cannot process with %d output channels", buf, 0x12u);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v35.__r_.__value_.__l.__data_);
      if (SHIBYTE(v34.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v34.__r_.__value_.__l.__data_);
    }
    return 4294956445;
  }
  return v18;
}

void sub_1B637EA70(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(exception_object);
}

uint64_t IRSpatializer::getLatencyFrames(IRSpatializer *this)
{
  uint64_t result;

  result = *((_QWORD *)this + 42);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 120))(result);
  return result;
}

void IRSpatializer::IRSpatializer(IRSpatializer *this, const IR::IRDataAttributes *a2)
{
  _QWORD *v4;
  IR::IRProcessor *v5;
  uint64_t v6;

  Spatializer::Spatializer(this);
  *v4 = &off_1E69D6A38;
  v4[42] = 0;
  v5 = (IR::IRProcessor *)operator new();
  IR::IRProcessor::IRProcessor(v5, a2, 1);
  v6 = *((_QWORD *)this + 42);
  *((_QWORD *)this + 42) = v5;
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
}

void sub_1B637EB4C(_Unwind_Exception *a1)
{
  Spatializer *v1;
  uint64_t v2;
  uint64_t v4;

  MEMORY[0x1BCC95CEC](v2, 0x10E1C40AE0E3EF2);
  v4 = *((_QWORD *)v1 + 42);
  *((_QWORD *)v1 + 42) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  Spatializer::~Spatializer(v1);
  _Unwind_Resume(a1);
}

void AUsubMAEC::myFilter::~myFilter(float ***this)
{
  freeMatrix(*((_DWORD *)this + 17), this);
  freeMatrix(*((_DWORD *)this + 17), this + 1);
  if (*((_DWORD *)this + 16))
  {
    freeMatrix(*((_DWORD *)this + 17), this + 2);
    freeMatrix(*((_DWORD *)this + 17), this + 3);
    freeMatrix(*((_DWORD *)this + 17), this + 4);
    freeMatrix(*((_DWORD *)this + 17), this + 5);
  }
}

_QWORD *AUsubMAEC::myFilter::initFilter(uint64_t a1, _DWORD *a2)
{
  int v3;
  int v4;
  int v5;
  int v6;
  _QWORD *result;
  int v8;
  int v9;

  v3 = a2[6];
  *(_DWORD *)(a1 + 48) = v3;
  *(_DWORD *)(a1 + 52) = a2[3];
  *(_DWORD *)(a1 + 56) = a2[4];
  v4 = a2[13];
  *(_DWORD *)(a1 + 60) = v4;
  *(_DWORD *)(a1 + 64) = a2[14];
  v5 = a2[12];
  *(_DWORD *)(a1 + 68) = v5;
  v6 = v4 * v3;
  *(_QWORD *)a1 = allocMatrix(v5, v4 * v3);
  result = allocMatrix(*(_DWORD *)(a1 + 68), v6);
  *(_QWORD *)(a1 + 8) = result;
  v8 = *(_DWORD *)(a1 + 64);
  if (v8)
  {
    v9 = *(_DWORD *)(a1 + 48) * v8;
    *(_QWORD *)(a1 + 16) = allocMatrix(*(_DWORD *)(a1 + 68), v9);
    *(_QWORD *)(a1 + 24) = allocMatrix(*(_DWORD *)(a1 + 68), v9);
    *(_QWORD *)(a1 + 32) = allocMatrix(*(_DWORD *)(a1 + 68), v9);
    result = allocMatrix(*(_DWORD *)(a1 + 68), v9);
    *(_QWORD *)(a1 + 40) = result;
  }
  return result;
}

float AUsubMAEC::myFilter::runFilter(AUsubMAEC::myFilter *this, DSPSplitComplex *a2, DSPSplitComplex *a3, float **a4, float **a5, int *a6, int *a7, int a8)
{
  DSPSplitComplex *v13;
  int64x2_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  int v19;
  float *v20;
  float *v21;
  int v22;
  float *v23;
  float *v24;
  uint64_t v25;
  int v26;
  int v27;
  int v28;
  float *v29;
  float *v30;
  float *v31;
  float *v32;
  float *v33;
  float *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  float *v40;
  float *v41;
  float *realp;
  uint64_t v43;
  uint64_t v44;
  int *v45;
  uint64_t v46;
  int v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  float *v51;
  float *v52;
  float *imagp;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  int *v59;
  uint64_t v60;
  int v61;
  int v62;
  int v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  float *v67;
  uint64_t v68;
  uint64_t v69;
  int *v70;
  uint64_t v71;
  int v72;
  int v73;
  int v74;
  float *v75;
  float *v76;
  uint64_t v77;
  float *v78;
  float *v79;
  float *v80;
  DSPSplitComplex *v82;
  int v84;
  DSPSplitComplex __A;
  DSPSplitComplex __B;
  DSPSplitComplex __D;
  DSPSplitComplex v88;
  DSPSplitComplex v89;

  v13 = a2;
  vDSP_vclr(a2->realp, 1, *((int *)this + 12));
  vDSP_vclr(v13->imagp, 1, *((int *)this + 12));
  v84 = a8;
  if (a8)
  {
    vDSP_vclr(a3->realp, 1, *((int *)this + 12));
    vDSP_vclr(a3->imagp, 1, *((int *)this + 12));
  }
  v15 = *(int64x2_t *)v13;
  __D = (DSPSplitComplex)vaddq_s64(*(int64x2_t *)v13, vdupq_n_s64(4uLL));
  if (*((int *)this + 17) < 1)
  {
    v76 = (float *)v15.i64[1];
  }
  else
  {
    v82 = v13;
    v16 = 0;
    do
    {
      if (*((int *)this + 15) >= 1)
      {
        v17 = 0;
        do
        {
          v18 = *((_DWORD *)this + 12);
          v19 = v18 * v17 + 1;
          v20 = (float *)(*(_QWORD *)(*(_QWORD *)this + 8 * v16) + 4 * v19);
          v21 = (float *)(*(_QWORD *)(*((_QWORD *)this + 1) + 8 * v16) + 4 * v19);
          v22 = a6[v17] * v18 + 1;
          v23 = &a4[v16][v22];
          v24 = a5[v16];
          __B.realp = v20;
          __B.imagp = v21;
          __A.realp = v23;
          __A.imagp = &v24[v22];
          vDSP_zvma(&__A, 1, &__B, 1, &__D, 1, &__D, 1, *((int *)this + 14));
          ++v17;
        }
        while (v17 < *((int *)this + 15));
      }
      if (*((int *)this + 16) >= 1)
      {
        v25 = 0;
        do
        {
          v26 = *((_DWORD *)this + 12);
          v27 = a7[v25] * v26;
          v28 = v26 * v25 + 1;
          v29 = (float *)(*(_QWORD *)(*((_QWORD *)this + 3) + 8 * v16) + 4 * v28);
          v30 = &a4[v16][v27];
          v31 = &a5[v16][v27];
          v89.realp = (float *)(*(_QWORD *)(*((_QWORD *)this + 2) + 8 * v16) + 4 * v28);
          v89.imagp = v29;
          v88.realp = v30;
          v88.imagp = v31;
          vDSP_zvma(&v88, 1, &v89, 1, &__D, 1, &__D, 1, *((int *)this + 14));
          v32 = (float *)(*(_QWORD *)(*((_QWORD *)this + 5) + 8 * v16) + 4 * v28);
          v33 = &a4[v16][v27 + 2];
          v34 = &a5[v16][v27 + 2];
          v89.realp = (float *)(*(_QWORD *)(*((_QWORD *)this + 4) + 8 * v16) + 4 * v28);
          v89.imagp = v32;
          v88.realp = v33;
          v88.imagp = v34;
          vDSP_zvma(&v88, 1, &v89, 1, &__D, 1, &__D, 1, *((int *)this + 14));
          ++v25;
        }
        while (v25 < *((int *)this + 16));
      }
      if (!v16 && v84)
      {
        memcpy(a3->realp + 1, v82->realp + 1, 4 * *((int *)this + 14));
        memcpy(a3->imagp + 1, v82->imagp + 1, 4 * *((int *)this + 14));
      }
      ++v16;
    }
    while (v16 < *((int *)this + 17));
    v35 = *((unsigned int *)this + 17);
    if ((int)v35 > 0)
    {
      v36 = 0;
      v37 = *(_QWORD *)this;
      v38 = *((unsigned int *)this + 15);
      v39 = *((unsigned int *)this + 16);
      do
      {
        v40 = a4[v36];
        if ((int)v38 >= 1)
        {
          v41 = *(float **)(v37 + 8 * v36);
          realp = v82->realp;
          v43 = *((int *)this + 12);
          v44 = *((int *)this + 13);
          v45 = a6;
          v46 = v38;
          do
          {
            v47 = *v45++;
            *realp = *realp + (float)(*v41 * v40[v47 * (int)v43]);
            *(float *)v15.i32 = realp[v44] + (float)(v41[v44] * v40[(int)v44 + v47 * (int)v43]);
            realp[v44] = *(float *)v15.i32;
            v41 += v43;
            --v46;
          }
          while (v46);
        }
        if ((int)v39 > 0)
        {
          v48 = 0;
          v49 = *(_QWORD *)(*((_QWORD *)this + 2) + 8 * v36);
          v50 = *(_QWORD *)(*((_QWORD *)this + 3) + 8 * v36);
          v51 = a5[v36];
          v52 = v82->realp;
          imagp = v82->imagp;
          v54 = *((int *)this + 12);
          v55 = *((int *)this + 13);
          v56 = v50 + 4 * v55;
          v57 = 4 * v54;
          v58 = v49 + 4 * v55;
          v59 = a7;
          v60 = v39;
          do
          {
            v61 = *v59++;
            v62 = v61 * v54 + 1;
            *v52 = *v52 + (float)((float)(*(float *)(v49 + v48) * v40[v62]) - (float)(*(float *)(v50 + v48) * v51[v62]));
            *imagp = *imagp
                   + (float)((float)(*(float *)(v50 + v48) * v40[v62]) + (float)(*(float *)(v49 + v48) * v51[v62]));
            v63 = v61 * v54 + v55 - 1;
            v52[v55] = v52[v55]
                     + (float)((float)(*(float *)(v58 + v48) * v40[v63]) - (float)(*(float *)(v56 + v48) * v51[v63]));
            imagp[v55] = imagp[v55]
                       + (float)((float)(*(float *)(v56 + v48) * v40[v63]) + (float)(*(float *)(v58 + v48) * v51[v63]));
            v48 += v57;
            --v60;
          }
          while (v60);
          v64 = 0;
          v65 = *(_QWORD *)(*((_QWORD *)this + 4) + 8 * v36);
          v66 = *(_QWORD *)(*((_QWORD *)this + 5) + 8 * v36);
          v67 = v82->realp;
          v68 = v66 + 4 * v55;
          v69 = v65 + 4 * v55;
          v70 = a7;
          v71 = v39;
          do
          {
            v72 = *v70++;
            v73 = v72 * v54 + 2;
            *v67 = *v67 + (float)((float)(*(float *)(v65 + v64) * v40[v73]) - (float)(*(float *)(v66 + v64) * v51[v73]));
            *imagp = *imagp
                   + (float)((float)(*(float *)(v66 + v64) * v40[v73]) + (float)(*(float *)(v65 + v64) * v51[v73]));
            v74 = v72 * v54 + v55 - 2;
            v67[v55] = v67[v55]
                     + (float)((float)(*(float *)(v69 + v64) * v40[v74]) - (float)(*(float *)(v68 + v64) * v51[v74]));
            *(float *)v15.i32 = imagp[v55]
                              + (float)((float)(*(float *)(v68 + v64) * v40[v74])
                                      + (float)(*(float *)(v69 + v64) * v51[v74]));
            imagp[v55] = *(float *)v15.i32;
            v64 += v57;
            --v71;
          }
          while (v71);
        }
        ++v36;
      }
      while (v36 != v35);
      v75 = v82->imagp;
      *v75 = 0.0;
      v75[*((int *)this + 13)] = 0.0;
      return *(float *)v15.i32;
    }
    v13 = v82;
    v76 = v82->imagp;
  }
  *v76 = 0.0;
  v77 = *((int *)this + 13);
  v76[v77] = 0.0;
  if (v84)
  {
    v78 = v13->realp;
    v79 = a3->realp;
    *v79 = *v13->realp;
    v80 = a3->imagp;
    *v80 = *v76;
    v79[v77] = v78[v77];
    *(float *)v15.i32 = v76[v77];
    v80[v77] = *(float *)v15.i32;
  }
  return *(float *)v15.i32;
}

os_log_t ___Z19getMatrixUtilityLogv_block_invoke_10404()
{
  os_log_t result;

  result = os_log_create("com.apple.coreaudio", "AudioDSPMatrixUtility");
  getMatrixUtilityLog(void)::gLog = (uint64_t)result;
  return result;
}

void NeuralNetBNNS<signed char>::~NeuralNetBNNS(_QWORD *a1)
{
  NeuralNetBNNS<signed char>::~NeuralNetBNNS(a1);
  JUMPOUT(0x1BCC95CECLL);
}

uint64_t NeuralNetBNNS<signed char>::getNumLayers(uint64_t a1)
{
  return *(unsigned int *)(a1 + 44);
}

uint64_t NeuralNetBNNS<signed char>::getInputSize(uint64_t a1)
{
  return *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8);
}

uint64_t NeuralNetBNNS<signed char>::getOutputSize(uint64_t a1)
{
  return *(_QWORD *)(*(_QWORD *)(a1 + 48) + 968 * (*(_DWORD *)(a1 + 44) - 1) + 360);
}

uint64_t NeuralNetBNNS<signed char>::getOutput(uint64_t a1)
{
  return *(_QWORD *)(a1 + 56) - 152;
}

void NeuralNetBNNS<signed char>::cleanup(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (*(_DWORD *)(a1 + 44))
  {
    v2 = 0;
    v3 = 0;
    do
    {
      v4 = *(_QWORD *)(a1 + 48) + v2;
      vDSP_vclr(*(float **)(v4 + 792), 1, (uint64_t)(*(_QWORD *)(v4 + 800) - *(_QWORD *)(v4 + 792)) >> 2);
      vDSP_vclr(*(float **)(v4 + 816), 1, (uint64_t)(*(_QWORD *)(v4 + 824) - *(_QWORD *)(v4 + 816)) >> 2);
      vDSP_vclr(*(float **)(v4 + 840), 1, (uint64_t)(*(_QWORD *)(v4 + 848) - *(_QWORD *)(v4 + 840)) >> 2);
      vDSP_vclr(*(float **)(v4 + 864), 1, (uint64_t)(*(_QWORD *)(v4 + 872) - *(_QWORD *)(v4 + 864)) >> 2);
      bzero(*(void **)(v4 + 912), *(_QWORD *)(v4 + 920) - *(_QWORD *)(v4 + 912));
      ++v3;
      v2 += 968;
    }
    while (v3 < *(unsigned int *)(a1 + 44));
  }
}

uint64_t NeuralNetBNNS<signed char>::setEmbedding(uint64_t a1)
{
  NSObject **v1;
  NSObject *v2;
  int v4;
  const char *v5;
  __int16 v6;
  int v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v1 = *(NSObject ***)(a1 + 8);
  if (v1)
  {
    v2 = *v1;
    if (!*v1)
      return 4294956433;
  }
  else
  {
    v2 = MEMORY[0x1E0C81028];
  }
  if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR))
  {
    v4 = 136315394;
    v5 = "NeuralNetImpl.hpp";
    v6 = 1024;
    v7 = 201;
    _os_log_impl(&dword_1B5ED0000, v2, OS_LOG_TYPE_ERROR, "%25s:%-5d NeuralNetBNNS: Embeddings not supported in BNNS mode", (uint8_t *)&v4, 0x12u);
  }
  return 4294956433;
}

{
  NSObject **v1;
  NSObject *v2;
  int v4;
  const char *v5;
  __int16 v6;
  int v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v1 = *(NSObject ***)(a1 + 8);
  if (v1)
  {
    v2 = *v1;
    if (!*v1)
      return 4294956433;
  }
  else
  {
    v2 = MEMORY[0x1E0C81028];
  }
  if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR))
  {
    v4 = 136315394;
    v5 = "NeuralNetImpl.hpp";
    v6 = 1024;
    v7 = 209;
    _os_log_impl(&dword_1B5ED0000, v2, OS_LOG_TYPE_ERROR, "%25s:%-5d NeuralNetBNNS: Embeddings not supported in BNNS mode", (uint8_t *)&v4, 0x12u);
  }
  return 4294956433;
}

uint64_t NeuralNetBNNS<signed char>::process(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  vDSP_Length v6;
  vDSP_Length v7;
  float v8;
  const float **v9;
  int v10;
  unsigned int v11;
  unint64_t v12;
  float v13;
  unint64_t v14;
  uint64_t v15;
  float v16;
  const float **v17;
  int v18;
  unsigned int v19;
  unint64_t v20;
  float v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  vDSP_Length v25;
  vDSP_Length v26;
  float v27;
  float v28;
  unint64_t v29;
  float *v30;
  float v31;
  float v32;
  float v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  const void *v39;
  float *v40;
  float *__E;
  float *v42;
  const float **v43;
  unint64_t v44;
  unsigned int v45;
  uint64_t v47;
  float v48;
  float v49;
  float v50;
  float v51;
  float __C;
  float __B;

  v2 = a1;
  memcpy(*(void **)(*(_QWORD *)(a1 + 48) + 792), *(const void **)a2, *(_QWORD *)(a2 + 8) - *(_QWORD *)a2);
  if (*(_DWORD *)(v2 + 44))
  {
    v3 = 0;
    v4 = 516;
    v47 = v2;
    do
    {
      if (v4 != 516)
        memcpy(*(void **)(*(_QWORD *)(v2 + 48) + v4 + 276), *(const void **)(*(_QWORD *)(v2 + 48) + v4 - 668), *(_QWORD *)(*(_QWORD *)(v2 + 48) + v4 - 660) - *(_QWORD *)(*(_QWORD *)(v2 + 48) + v4 - 668));
      v5 = *(_QWORD *)(v2 + 48);
      v6 = *(_QWORD *)(v5 + v4 - 508);
      v7 = *(_QWORD *)(v5 + v4 - 156);
      v8 = 1.0 / *(float *)(v5 + v4 - 352);
      __C = -(float)(*(float *)(v5 + v4 - 348) * v8);
      __B = v8;
      v9 = (const float **)(v5 + v4 + 276);
      vDSP_vsmsa(*v9, 1, &__B, &__C, (float *)*v9, 1, v6);
      v10 = *(_DWORD *)(v2 + 40);
      if (v10)
      {
        HIDWORD(v12) = *(_DWORD *)(v2 + 40);
        LODWORD(v12) = HIDWORD(v12);
        v11 = v12 >> 3;
        if (v11 > 4)
        {
          v51 = -128.0;
          v13 = 127.0;
        }
        else
        {
          v51 = flt_1B667C858[v11];
          v13 = flt_1B667C86C[v11];
        }
        v50 = v13;
        vDSP_vclip(*v9, 1, &v51, &v50, (float *)*v9, 1, v6);
        v10 = *(_DWORD *)(v2 + 40);
      }
      HIDWORD(v14) = v10;
      LODWORD(v14) = v10;
      switch((v14 >> 3))
      {
        case 0u:
          memcpy(*(void **)(v5 + v4 + 396), *v9, 4 * v6);
          break;
        case 2u:
          vDSP_vfixr16(*v9, 1, *(__int16 **)(v5 + v4 + 396), 1, v6);
          break;
        case 4u:
          vDSP_vfixr32(*v9, 1, *(int **)(v5 + v4 + 396), 1, v6);
          break;
        default:
          vDSP_vfixr8(*v9, 1, *(char **)(v5 + v4 + 396), 1, v6);
          break;
      }
      v15 = v5 + v4;
      if (*(_DWORD *)(v5 + v4 + 448) == 1)
      {
        v16 = 1.0 / *(float *)v15;
        v50 = -(float)(*(float *)(v15 + 4) * v16);
        v51 = v16;
        v17 = (const float **)(v15 + 300);
        vDSP_vsmsa(*(const float **)(v15 + 300), 1, &v51, &v50, *(float **)(v15 + 300), 1, v7);
        v18 = *(_DWORD *)(v2 + 40);
        if (v18)
        {
          HIDWORD(v20) = *(_DWORD *)(v2 + 40);
          LODWORD(v20) = HIDWORD(v20);
          v19 = v20 >> 3;
          if (v19 > 4)
          {
            v49 = -128.0;
            v21 = 127.0;
          }
          else
          {
            v49 = flt_1B667C858[v19];
            v21 = flt_1B667C86C[v19];
          }
          v48 = v21;
          vDSP_vclip(*v17, 1, &v49, &v48, (float *)*v17, 1, v7);
          v18 = *(_DWORD *)(v2 + 40);
        }
        HIDWORD(v22) = v18;
        LODWORD(v22) = v18;
        switch((v22 >> 3))
        {
          case 0u:
            memcpy((void *)(*(_QWORD *)(v5 + v4 + 396) + v6), *v17, 4 * v7);
            break;
          case 2u:
            vDSP_vfixr16(*v17, 1, (__int16 *)(*(_QWORD *)(v5 + v4 + 396) + v6), 1, v7);
            break;
          case 4u:
            vDSP_vfixr32(*v17, 1, (int *)(*(_QWORD *)(v5 + v4 + 396) + v6), 1, v7);
            break;
          default:
            vDSP_vfixr8(*v17, 1, (char *)(*(_QWORD *)(v5 + v4 + 396) + v6), 1, v7);
            break;
        }
      }
      v23 = *(_QWORD *)(v2 + 48);
      __B = 0.0;
      v24 = v23 + v4;
      v25 = *(_QWORD *)(v23 + v4 - 508);
      v26 = *(_QWORD *)(v23 + v4 - 156);
      v27 = *(float *)(v23 + v4 - 172);
      v28 = *(float *)(v23 + v4 - 352);
      HIDWORD(v29) = *(_DWORD *)(v2 + 40);
      LODWORD(v29) = HIDWORD(v29);
      switch((v29 >> 3))
      {
        case 0u:
          memcpy(*(void **)(v23 + v4 + 276), *(const void **)(v23 + v4 + 396), 4 * v25);
          break;
        case 1u:
          v24 = v23 + v4;
          goto LABEL_29;
        case 2u:
          vDSP_vflt16(*(const __int16 **)(v23 + v4 + 396), 1, *(float **)(v23 + v4 + 276), 1, *(_QWORD *)(v23 + v4 - 508));
          break;
        case 4u:
          vDSP_vflt32(*(const int **)(v23 + v4 + 396), 1, *(float **)(v23 + v4 + 276), 1, *(_QWORD *)(v23 + v4 - 508));
          break;
        default:
LABEL_29:
          vDSP_vflt8(*(const char **)(v24 + 396), 1, *(float **)(v24 + 276), 1, *(_QWORD *)(v23 + v4 - 508));
          break;
      }
      v30 = (float *)(v23 + v4);
      vDSP_sve(*(const float **)(v23 + v4 + 276), 1, &__B, v25);
      v31 = (float)(v27 * v28) * __B;
      __B = v31;
      if (*(_DWORD *)(v23 + v4 + 448) == 1)
      {
        v32 = v30[45];
        v33 = *v30;
        __C = 0.0;
        HIDWORD(v34) = *(_DWORD *)(v2 + 40);
        LODWORD(v34) = HIDWORD(v34);
        switch((v34 >> 3))
        {
          case 0u:
            memcpy(*(void **)(v23 + v4 + 300), (const void *)(*(_QWORD *)(v23 + v4 + 396) + v25), 4 * v26);
            break;
          case 2u:
            vDSP_vflt16((const __int16 *)(*(_QWORD *)(v23 + v4 + 396) + v25), 1, *(float **)(v23 + v4 + 300), 1, v26);
            break;
          case 4u:
            vDSP_vflt32((const int *)(*(_QWORD *)(v23 + v4 + 396) + v25), 1, *(float **)(v23 + v4 + 300), 1, v26);
            break;
          default:
            vDSP_vflt8((const char *)(*(_QWORD *)(v23 + v4 + 396) + v25), 1, *(float **)(v23 + v4 + 300), 1, v26);
            break;
        }
        vDSP_sve(*(const float **)(v23 + v4 + 300), 1, &__C, v26);
        v31 = (float)((float)(v32 * v33) * __C) + __B;
      }
      v35 = *(_QWORD *)(v2 + 48);
      __C = v31;
      v36 = v35 + v4;
      v37 = *(_QWORD *)(v35 + v4 - 156);
      v38 = *(void **)(v35 + v4 + 268);
      v39 = *(const void **)(v35 + v4 + 396);
      if (*(_DWORD *)(v35 + v4 + 448) == 1)
      {
        BNNSFilterApply(v38, v39, *(void **)(v36 + 324));
        vDSP_vsadd(*(const float **)(v36 + 324), 1, &__C, *(float **)(v36 + 324), 1, 4 * (int)v37);
        v40 = *(float **)(v36 + 324);
        __E = *(float **)(v36 + 348);
        NeuralNetBNNS<signed char>::applyActivationFunction(v40, v40, 8, 3 * v37, 0.0, 0.0);
        __B = *(float *)&v37;
        vvtanhf(&v40[3 * (int)v37], &v40[3 * (int)v37], (const int *)&__B);
        vDSP_vmma(v40, 1, __E, 1, &v40[(int)v37], 1, &v40[3 * (int)v37], 1, __E, 1, (int)v37);
        v42 = *(float **)(v36 + 300);
        __B = *(float *)&v37;
        vvtanhf(v42, __E, (const int *)&__B);
        v2 = v47;
        vDSP_vmul(&v40[2 * (int)v37], 1, *(const float **)(v36 + 300), 1, *(float **)(v36 + 300), 1, (int)v37);
      }
      else
      {
        v43 = (const float **)(v36 + 300);
        BNNSFilterApply(v38, v39, *(void **)(v36 + 300));
        vDSP_vsadd(*v43, 1, &__C, (float *)*v43, 1, (int)v37);
        NeuralNetBNNS<signed char>::applyActivationFunction(*v43, (float *)*v43, *(_DWORD *)(v36 + 444), v37, *(float *)(v36 + 192), *(float *)(v36 + 196));
      }
      ++v3;
      v44 = *(unsigned int *)(v2 + 44);
      v4 += 968;
    }
    while (v3 < v44);
    v45 = v44 - 1;
  }
  else
  {
    v45 = -1;
  }
  return *(_QWORD *)(v2 + 48) + 968 * v45 + 816;
}

void NeuralNetBNNS<signed char>::applyActivationFunction(const float *a1, float *a2, int a3, int a4, float a5, float a6)
{
  float *v7;
  float *v8;
  uint64_t v9;
  float v10;
  float v11;
  float v12;
  vDSP_Length v13;
  const float *p_B;
  uint64_t v15;
  float v16;
  float v17;
  float __C;
  float v19;
  float __B;
  int __N;
  float __N_4;
  float v23;

  __N_4 = a6;
  v23 = a5;
  __N = a4;
  v7 = a2;
  v8 = (float *)a1;
  switch(a3)
  {
    case 1:
      __B = 0.0;
      vDSP_vthr(a1, 1, &__B, a2, 1, a4);
      break;
    case 2:
      if (a4)
      {
        v9 = a4;
        do
        {
          v10 = *v8++;
          v11 = v10;
          if (v10 >= 0.0)
            v12 = 1.0;
          else
            v12 = a5;
          *v7++ = v11 * v12;
          --v9;
        }
        while (v9);
      }
      break;
    case 3:
      __B = 0.5;
      vDSP_vsmul(a1, 1, &__B, a2, 1, a4);
      vvtanhf(v7, v7, &__N);
      vDSP_vsmsa(v7, 1, &__B, &__B, v7, 1, __N);
      break;
    case 4:
      vvtanhf(a2, a1, &__N);
      break;
    case 5:
      vDSP_vsmul(a1, 1, &__N_4, a2, 1, a4);
      vvtanhf(v7, v7, &__N);
      v13 = __N;
      p_B = &v23;
      goto LABEL_22;
    case 6:
      vvfabsf(a2, a1, &__N);
      break;
    case 7:
      if (a4)
      {
        v15 = a4;
        do
        {
          v16 = *v8;
          if (*v8 < 0.0)
            v16 = (float)(expf(v16) + -1.0) * a5;
          *v7++ = v16;
          ++v8;
          --v15;
        }
        while (v15);
      }
      break;
    case 8:
      v19 = 1.0;
      __B = 0.0;
      v17 = 0.2;
      __C = 0.5;
      vDSP_vsmsa(a1, 1, &v17, &__C, a2, 1, a4);
      vDSP_vclip(v7, 1, &__B, &v19, v7, 1, __N);
      break;
    case 9:
      __B = 0.0;
      vvexpf(a2, a1, &__N);
      vDSP_sve(v7, 1, &__B, __N);
      __B = 1.0 / __B;
      v13 = __N;
      p_B = &__B;
LABEL_22:
      vDSP_vsmul(v7, 1, p_B, v7, 1, v13);
      break;
    default:
      return;
  }
}

_QWORD *NeuralNetBNNS<signed char>::~NeuralNetBNNS(_QWORD *a1)
{
  uint64_t v2;
  void **v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  void *v7;
  unint64_t v8;
  BOOL v9;
  BOOL v10;
  void **v12;

  *a1 = &off_1E69D6C28;
  v3 = (void **)(a1 + 6);
  v2 = a1[6];
  v4 = a1[7];
  if (v4 != v2)
  {
    v5 = 0;
    v6 = 1;
    do
    {
      v7 = *(void **)(v2 + 968 * v5 + 784);
      if (v7)
      {
        BNNSFilterDestroy(v7);
        v2 = a1[6];
        v4 = a1[7];
        *(_QWORD *)(v2 + 968 * v5 + 784) = 0;
      }
      v5 = v6;
      v8 = 0x1B810ECF56BE69C9 * ((v4 - v2) >> 3);
      v9 = v8 >= v6;
      v10 = v8 == v6++;
    }
    while (!v10 && v9);
  }
  v12 = v3;
  std::vector<FullyConnectedLayerBNNS<float>>::__destroy_vector::operator()[abi:ne180100](&v12);
  *a1 = off_1E69D6BC8;
  std::shared_ptr<vp::services::Telephony_Utility>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 3));
  return a1;
}

void NeuralNetBNNS<short>::~NeuralNetBNNS(_QWORD *a1)
{
  NeuralNetBNNS<short>::~NeuralNetBNNS(a1);
  JUMPOUT(0x1BCC95CECLL);
}

uint64_t NeuralNetBNNS<short>::getNumLayers(uint64_t a1)
{
  return *(unsigned int *)(a1 + 44);
}

uint64_t NeuralNetBNNS<short>::getInputSize(uint64_t a1)
{
  return *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8);
}

uint64_t NeuralNetBNNS<short>::getOutputSize(uint64_t a1)
{
  return *(_QWORD *)(*(_QWORD *)(a1 + 48) + 968 * (*(_DWORD *)(a1 + 44) - 1) + 360);
}

uint64_t NeuralNetBNNS<short>::getOutput(uint64_t a1)
{
  return *(_QWORD *)(a1 + 56) - 152;
}

void NeuralNetBNNS<short>::cleanup(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (*(_DWORD *)(a1 + 44))
  {
    v2 = 0;
    v3 = 0;
    do
    {
      v4 = *(_QWORD *)(a1 + 48) + v2;
      vDSP_vclr(*(float **)(v4 + 792), 1, (uint64_t)(*(_QWORD *)(v4 + 800) - *(_QWORD *)(v4 + 792)) >> 2);
      vDSP_vclr(*(float **)(v4 + 816), 1, (uint64_t)(*(_QWORD *)(v4 + 824) - *(_QWORD *)(v4 + 816)) >> 2);
      vDSP_vclr(*(float **)(v4 + 840), 1, (uint64_t)(*(_QWORD *)(v4 + 848) - *(_QWORD *)(v4 + 840)) >> 2);
      vDSP_vclr(*(float **)(v4 + 864), 1, (uint64_t)(*(_QWORD *)(v4 + 872) - *(_QWORD *)(v4 + 864)) >> 2);
      bzero(*(void **)(v4 + 912), *(_QWORD *)(v4 + 920) - *(_QWORD *)(v4 + 912));
      ++v3;
      v2 += 968;
    }
    while (v3 < *(unsigned int *)(a1 + 44));
  }
}

uint64_t NeuralNetBNNS<short>::setEmbedding(uint64_t a1)
{
  NSObject **v1;
  NSObject *v2;
  int v4;
  const char *v5;
  __int16 v6;
  int v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v1 = *(NSObject ***)(a1 + 8);
  if (v1)
  {
    v2 = *v1;
    if (!*v1)
      return 4294956433;
  }
  else
  {
    v2 = MEMORY[0x1E0C81028];
  }
  if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR))
  {
    v4 = 136315394;
    v5 = "NeuralNetImpl.hpp";
    v6 = 1024;
    v7 = 201;
    _os_log_impl(&dword_1B5ED0000, v2, OS_LOG_TYPE_ERROR, "%25s:%-5d NeuralNetBNNS: Embeddings not supported in BNNS mode", (uint8_t *)&v4, 0x12u);
  }
  return 4294956433;
}

{
  NSObject **v1;
  NSObject *v2;
  int v4;
  const char *v5;
  __int16 v6;
  int v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v1 = *(NSObject ***)(a1 + 8);
  if (v1)
  {
    v2 = *v1;
    if (!*v1)
      return 4294956433;
  }
  else
  {
    v2 = MEMORY[0x1E0C81028];
  }
  if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR))
  {
    v4 = 136315394;
    v5 = "NeuralNetImpl.hpp";
    v6 = 1024;
    v7 = 209;
    _os_log_impl(&dword_1B5ED0000, v2, OS_LOG_TYPE_ERROR, "%25s:%-5d NeuralNetBNNS: Embeddings not supported in BNNS mode", (uint8_t *)&v4, 0x12u);
  }
  return 4294956433;
}

uint64_t NeuralNetBNNS<short>::process(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  vDSP_Length v6;
  vDSP_Length v7;
  float v8;
  const float **v9;
  int v10;
  unsigned int v11;
  unint64_t v12;
  float v13;
  unint64_t v14;
  uint64_t v15;
  float v16;
  const float **v17;
  int v18;
  unsigned int v19;
  unint64_t v20;
  float v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  vDSP_Length v25;
  vDSP_Length v26;
  float v27;
  float v28;
  unint64_t v29;
  float *v30;
  float v31;
  float v32;
  float v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  const void *v39;
  float *v40;
  float *__E;
  float *v42;
  const float **v43;
  unint64_t v44;
  unsigned int v45;
  uint64_t v47;
  float v48;
  float v49;
  float v50;
  float v51;
  float __C;
  float __B;

  v2 = a1;
  memcpy(*(void **)(*(_QWORD *)(a1 + 48) + 792), *(const void **)a2, *(_QWORD *)(a2 + 8) - *(_QWORD *)a2);
  if (*(_DWORD *)(v2 + 44))
  {
    v3 = 0;
    v4 = 516;
    v47 = v2;
    do
    {
      if (v4 != 516)
        memcpy(*(void **)(*(_QWORD *)(v2 + 48) + v4 + 276), *(const void **)(*(_QWORD *)(v2 + 48) + v4 - 668), *(_QWORD *)(*(_QWORD *)(v2 + 48) + v4 - 660) - *(_QWORD *)(*(_QWORD *)(v2 + 48) + v4 - 668));
      v5 = *(_QWORD *)(v2 + 48);
      v6 = *(_QWORD *)(v5 + v4 - 508);
      v7 = *(_QWORD *)(v5 + v4 - 156);
      v8 = 1.0 / *(float *)(v5 + v4 - 352);
      __C = -(float)(*(float *)(v5 + v4 - 348) * v8);
      __B = v8;
      v9 = (const float **)(v5 + v4 + 276);
      vDSP_vsmsa(*v9, 1, &__B, &__C, (float *)*v9, 1, v6);
      v10 = *(_DWORD *)(v2 + 40);
      if (v10)
      {
        HIDWORD(v12) = *(_DWORD *)(v2 + 40);
        LODWORD(v12) = HIDWORD(v12);
        v11 = v12 >> 3;
        if (v11 > 4)
        {
          v51 = -128.0;
          v13 = 127.0;
        }
        else
        {
          v51 = flt_1B667C858[v11];
          v13 = flt_1B667C86C[v11];
        }
        v50 = v13;
        vDSP_vclip(*v9, 1, &v51, &v50, (float *)*v9, 1, v6);
        v10 = *(_DWORD *)(v2 + 40);
      }
      HIDWORD(v14) = v10;
      LODWORD(v14) = v10;
      switch((v14 >> 3))
      {
        case 0u:
          memcpy(*(void **)(v5 + v4 + 396), *v9, 4 * v6);
          break;
        case 2u:
          vDSP_vfixr16(*v9, 1, *(__int16 **)(v5 + v4 + 396), 1, v6);
          break;
        case 4u:
          vDSP_vfixr32(*v9, 1, *(int **)(v5 + v4 + 396), 1, v6);
          break;
        default:
          vDSP_vfixr8(*v9, 1, *(char **)(v5 + v4 + 396), 1, v6);
          break;
      }
      v15 = v5 + v4;
      if (*(_DWORD *)(v5 + v4 + 448) == 1)
      {
        v16 = 1.0 / *(float *)v15;
        v50 = -(float)(*(float *)(v15 + 4) * v16);
        v51 = v16;
        v17 = (const float **)(v15 + 300);
        vDSP_vsmsa(*(const float **)(v15 + 300), 1, &v51, &v50, *(float **)(v15 + 300), 1, v7);
        v18 = *(_DWORD *)(v2 + 40);
        if (v18)
        {
          HIDWORD(v20) = *(_DWORD *)(v2 + 40);
          LODWORD(v20) = HIDWORD(v20);
          v19 = v20 >> 3;
          if (v19 > 4)
          {
            v49 = -128.0;
            v21 = 127.0;
          }
          else
          {
            v49 = flt_1B667C858[v19];
            v21 = flt_1B667C86C[v19];
          }
          v48 = v21;
          vDSP_vclip(*v17, 1, &v49, &v48, (float *)*v17, 1, v7);
          v18 = *(_DWORD *)(v2 + 40);
        }
        HIDWORD(v22) = v18;
        LODWORD(v22) = v18;
        switch((v22 >> 3))
        {
          case 0u:
            memcpy((void *)(*(_QWORD *)(v5 + v4 + 396) + 2 * v6), *v17, 4 * v7);
            break;
          case 2u:
            vDSP_vfixr16(*v17, 1, (__int16 *)(*(_QWORD *)(v5 + v4 + 396) + 2 * v6), 1, v7);
            break;
          case 4u:
            vDSP_vfixr32(*v17, 1, (int *)(*(_QWORD *)(v5 + v4 + 396) + 2 * v6), 1, v7);
            break;
          default:
            vDSP_vfixr8(*v17, 1, (char *)(*(_QWORD *)(v5 + v4 + 396) + 2 * v6), 1, v7);
            break;
        }
      }
      v23 = *(_QWORD *)(v2 + 48);
      __B = 0.0;
      v24 = v23 + v4;
      v25 = *(_QWORD *)(v23 + v4 - 508);
      v26 = *(_QWORD *)(v23 + v4 - 156);
      v27 = *(float *)(v23 + v4 - 172);
      v28 = *(float *)(v23 + v4 - 352);
      HIDWORD(v29) = *(_DWORD *)(v2 + 40);
      LODWORD(v29) = HIDWORD(v29);
      switch((v29 >> 3))
      {
        case 0u:
          memcpy(*(void **)(v23 + v4 + 276), *(const void **)(v23 + v4 + 396), 4 * v25);
          break;
        case 1u:
          v24 = v23 + v4;
          goto LABEL_29;
        case 2u:
          vDSP_vflt16(*(const __int16 **)(v23 + v4 + 396), 1, *(float **)(v23 + v4 + 276), 1, *(_QWORD *)(v23 + v4 - 508));
          break;
        case 4u:
          vDSP_vflt32(*(const int **)(v23 + v4 + 396), 1, *(float **)(v23 + v4 + 276), 1, *(_QWORD *)(v23 + v4 - 508));
          break;
        default:
LABEL_29:
          vDSP_vflt8(*(const char **)(v24 + 396), 1, *(float **)(v24 + 276), 1, *(_QWORD *)(v23 + v4 - 508));
          break;
      }
      v30 = (float *)(v23 + v4);
      vDSP_sve(*(const float **)(v23 + v4 + 276), 1, &__B, v25);
      v31 = (float)(v27 * v28) * __B;
      __B = v31;
      if (*(_DWORD *)(v23 + v4 + 448) == 1)
      {
        v32 = v30[45];
        v33 = *v30;
        __C = 0.0;
        HIDWORD(v34) = *(_DWORD *)(v2 + 40);
        LODWORD(v34) = HIDWORD(v34);
        switch((v34 >> 3))
        {
          case 0u:
            memcpy(*(void **)(v23 + v4 + 300), (const void *)(*(_QWORD *)(v23 + v4 + 396) + 2 * v25), 4 * v26);
            break;
          case 2u:
            vDSP_vflt16((const __int16 *)(*(_QWORD *)(v23 + v4 + 396) + 2 * v25), 1, *(float **)(v23 + v4 + 300), 1, v26);
            break;
          case 4u:
            vDSP_vflt32((const int *)(*(_QWORD *)(v23 + v4 + 396) + 2 * v25), 1, *(float **)(v23 + v4 + 300), 1, v26);
            break;
          default:
            vDSP_vflt8((const char *)(*(_QWORD *)(v23 + v4 + 396) + 2 * v25), 1, *(float **)(v23 + v4 + 300), 1, v26);
            break;
        }
        vDSP_sve(*(const float **)(v23 + v4 + 300), 1, &__C, v26);
        v31 = (float)((float)(v32 * v33) * __C) + __B;
      }
      v35 = *(_QWORD *)(v2 + 48);
      __C = v31;
      v36 = v35 + v4;
      v37 = *(_QWORD *)(v35 + v4 - 156);
      v38 = *(void **)(v35 + v4 + 268);
      v39 = *(const void **)(v35 + v4 + 396);
      if (*(_DWORD *)(v35 + v4 + 448) == 1)
      {
        BNNSFilterApply(v38, v39, *(void **)(v36 + 324));
        vDSP_vsadd(*(const float **)(v36 + 324), 1, &__C, *(float **)(v36 + 324), 1, 4 * (int)v37);
        v40 = *(float **)(v36 + 324);
        __E = *(float **)(v36 + 348);
        NeuralNetBNNS<short>::applyActivationFunction(v40, v40, 8, 3 * v37, 0.0, 0.0);
        __B = *(float *)&v37;
        vvtanhf(&v40[3 * (int)v37], &v40[3 * (int)v37], (const int *)&__B);
        vDSP_vmma(v40, 1, __E, 1, &v40[(int)v37], 1, &v40[3 * (int)v37], 1, __E, 1, (int)v37);
        v42 = *(float **)(v36 + 300);
        __B = *(float *)&v37;
        vvtanhf(v42, __E, (const int *)&__B);
        v2 = v47;
        vDSP_vmul(&v40[2 * (int)v37], 1, *(const float **)(v36 + 300), 1, *(float **)(v36 + 300), 1, (int)v37);
      }
      else
      {
        v43 = (const float **)(v36 + 300);
        BNNSFilterApply(v38, v39, *(void **)(v36 + 300));
        vDSP_vsadd(*v43, 1, &__C, (float *)*v43, 1, (int)v37);
        NeuralNetBNNS<short>::applyActivationFunction(*v43, (float *)*v43, *(_DWORD *)(v36 + 444), v37, *(float *)(v36 + 192), *(float *)(v36 + 196));
      }
      ++v3;
      v44 = *(unsigned int *)(v2 + 44);
      v4 += 968;
    }
    while (v3 < v44);
    v45 = v44 - 1;
  }
  else
  {
    v45 = -1;
  }
  return *(_QWORD *)(v2 + 48) + 968 * v45 + 816;
}

void NeuralNetBNNS<short>::applyActivationFunction(const float *a1, float *a2, int a3, int a4, float a5, float a6)
{
  float *v7;
  float *v8;
  uint64_t v9;
  float v10;
  float v11;
  float v12;
  vDSP_Length v13;
  const float *p_B;
  uint64_t v15;
  float v16;
  float v17;
  float __C;
  float v19;
  float __B;
  int __N;
  float __N_4;
  float v23;

  __N_4 = a6;
  v23 = a5;
  __N = a4;
  v7 = a2;
  v8 = (float *)a1;
  switch(a3)
  {
    case 1:
      __B = 0.0;
      vDSP_vthr(a1, 1, &__B, a2, 1, a4);
      break;
    case 2:
      if (a4)
      {
        v9 = a4;
        do
        {
          v10 = *v8++;
          v11 = v10;
          if (v10 >= 0.0)
            v12 = 1.0;
          else
            v12 = a5;
          *v7++ = v11 * v12;
          --v9;
        }
        while (v9);
      }
      break;
    case 3:
      __B = 0.5;
      vDSP_vsmul(a1, 1, &__B, a2, 1, a4);
      vvtanhf(v7, v7, &__N);
      vDSP_vsmsa(v7, 1, &__B, &__B, v7, 1, __N);
      break;
    case 4:
      vvtanhf(a2, a1, &__N);
      break;
    case 5:
      vDSP_vsmul(a1, 1, &__N_4, a2, 1, a4);
      vvtanhf(v7, v7, &__N);
      v13 = __N;
      p_B = &v23;
      goto LABEL_22;
    case 6:
      vvfabsf(a2, a1, &__N);
      break;
    case 7:
      if (a4)
      {
        v15 = a4;
        do
        {
          v16 = *v8;
          if (*v8 < 0.0)
            v16 = (float)(expf(v16) + -1.0) * a5;
          *v7++ = v16;
          ++v8;
          --v15;
        }
        while (v15);
      }
      break;
    case 8:
      v19 = 1.0;
      __B = 0.0;
      v17 = 0.2;
      __C = 0.5;
      vDSP_vsmsa(a1, 1, &v17, &__C, a2, 1, a4);
      vDSP_vclip(v7, 1, &__B, &v19, v7, 1, __N);
      break;
    case 9:
      __B = 0.0;
      vvexpf(a2, a1, &__N);
      vDSP_sve(v7, 1, &__B, __N);
      __B = 1.0 / __B;
      v13 = __N;
      p_B = &__B;
LABEL_22:
      vDSP_vsmul(v7, 1, p_B, v7, 1, v13);
      break;
    default:
      return;
  }
}

_QWORD *NeuralNetBNNS<short>::~NeuralNetBNNS(_QWORD *a1)
{
  uint64_t v2;
  void **v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  void *v7;
  unint64_t v8;
  BOOL v9;
  BOOL v10;
  void **v12;

  *a1 = &off_1E69D6C88;
  v3 = (void **)(a1 + 6);
  v2 = a1[6];
  v4 = a1[7];
  if (v4 != v2)
  {
    v5 = 0;
    v6 = 1;
    do
    {
      v7 = *(void **)(v2 + 968 * v5 + 784);
      if (v7)
      {
        BNNSFilterDestroy(v7);
        v2 = a1[6];
        v4 = a1[7];
        *(_QWORD *)(v2 + 968 * v5 + 784) = 0;
      }
      v5 = v6;
      v8 = 0x1B810ECF56BE69C9 * ((v4 - v2) >> 3);
      v9 = v8 >= v6;
      v10 = v8 == v6++;
    }
    while (!v10 && v9);
  }
  v12 = v3;
  std::vector<FullyConnectedLayerBNNS<float>>::__destroy_vector::operator()[abi:ne180100](&v12);
  *a1 = off_1E69D6BC8;
  std::shared_ptr<vp::services::Telephony_Utility>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 3));
  return a1;
}

void NeuralNetBNNS<int>::~NeuralNetBNNS(_QWORD *a1)
{
  NeuralNetBNNS<int>::~NeuralNetBNNS(a1);
  JUMPOUT(0x1BCC95CECLL);
}

uint64_t NeuralNetBNNS<int>::getNumLayers(uint64_t a1)
{
  return *(unsigned int *)(a1 + 44);
}

uint64_t NeuralNetBNNS<int>::getInputSize(uint64_t a1)
{
  return *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8);
}

uint64_t NeuralNetBNNS<int>::getOutputSize(uint64_t a1)
{
  return *(_QWORD *)(*(_QWORD *)(a1 + 48) + 968 * (*(_DWORD *)(a1 + 44) - 1) + 360);
}

uint64_t NeuralNetBNNS<int>::getOutput(uint64_t a1)
{
  return *(_QWORD *)(a1 + 56) - 152;
}

void NeuralNetBNNS<int>::cleanup(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (*(_DWORD *)(a1 + 44))
  {
    v2 = 0;
    v3 = 0;
    do
    {
      v4 = *(_QWORD *)(a1 + 48) + v2;
      vDSP_vclr(*(float **)(v4 + 792), 1, (uint64_t)(*(_QWORD *)(v4 + 800) - *(_QWORD *)(v4 + 792)) >> 2);
      vDSP_vclr(*(float **)(v4 + 816), 1, (uint64_t)(*(_QWORD *)(v4 + 824) - *(_QWORD *)(v4 + 816)) >> 2);
      vDSP_vclr(*(float **)(v4 + 840), 1, (uint64_t)(*(_QWORD *)(v4 + 848) - *(_QWORD *)(v4 + 840)) >> 2);
      vDSP_vclr(*(float **)(v4 + 864), 1, (uint64_t)(*(_QWORD *)(v4 + 872) - *(_QWORD *)(v4 + 864)) >> 2);
      bzero(*(void **)(v4 + 912), *(_QWORD *)(v4 + 920) - *(_QWORD *)(v4 + 912));
      ++v3;
      v2 += 968;
    }
    while (v3 < *(unsigned int *)(a1 + 44));
  }
}

uint64_t NeuralNetBNNS<int>::setEmbedding(uint64_t a1)
{
  NSObject **v1;
  NSObject *v2;
  int v4;
  const char *v5;
  __int16 v6;
  int v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v1 = *(NSObject ***)(a1 + 8);
  if (v1)
  {
    v2 = *v1;
    if (!*v1)
      return 4294956433;
  }
  else
  {
    v2 = MEMORY[0x1E0C81028];
  }
  if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR))
  {
    v4 = 136315394;
    v5 = "NeuralNetImpl.hpp";
    v6 = 1024;
    v7 = 201;
    _os_log_impl(&dword_1B5ED0000, v2, OS_LOG_TYPE_ERROR, "%25s:%-5d NeuralNetBNNS: Embeddings not supported in BNNS mode", (uint8_t *)&v4, 0x12u);
  }
  return 4294956433;
}

{
  NSObject **v1;
  NSObject *v2;
  int v4;
  const char *v5;
  __int16 v6;
  int v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v1 = *(NSObject ***)(a1 + 8);
  if (v1)
  {
    v2 = *v1;
    if (!*v1)
      return 4294956433;
  }
  else
  {
    v2 = MEMORY[0x1E0C81028];
  }
  if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR))
  {
    v4 = 136315394;
    v5 = "NeuralNetImpl.hpp";
    v6 = 1024;
    v7 = 209;
    _os_log_impl(&dword_1B5ED0000, v2, OS_LOG_TYPE_ERROR, "%25s:%-5d NeuralNetBNNS: Embeddings not supported in BNNS mode", (uint8_t *)&v4, 0x12u);
  }
  return 4294956433;
}

uint64_t NeuralNetBNNS<int>::process(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  vDSP_Length v6;
  vDSP_Length v7;
  float v8;
  const float **v9;
  int v10;
  unsigned int v11;
  unint64_t v12;
  float v13;
  unint64_t v14;
  uint64_t v15;
  float v16;
  const float **v17;
  int v18;
  unsigned int v19;
  unint64_t v20;
  float v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  vDSP_Length v25;
  vDSP_Length v26;
  float v27;
  float v28;
  unint64_t v29;
  float *v30;
  float v31;
  float v32;
  float v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  const void *v39;
  float *v40;
  float *__E;
  float *v42;
  const float **v43;
  unint64_t v44;
  unsigned int v45;
  uint64_t v47;
  float v48;
  float v49;
  float v50;
  float v51;
  float __C;
  float __B;

  v2 = a1;
  memcpy(*(void **)(*(_QWORD *)(a1 + 48) + 792), *(const void **)a2, *(_QWORD *)(a2 + 8) - *(_QWORD *)a2);
  if (*(_DWORD *)(v2 + 44))
  {
    v3 = 0;
    v4 = 516;
    v47 = v2;
    do
    {
      if (v4 != 516)
        memcpy(*(void **)(*(_QWORD *)(v2 + 48) + v4 + 276), *(const void **)(*(_QWORD *)(v2 + 48) + v4 - 668), *(_QWORD *)(*(_QWORD *)(v2 + 48) + v4 - 660) - *(_QWORD *)(*(_QWORD *)(v2 + 48) + v4 - 668));
      v5 = *(_QWORD *)(v2 + 48);
      v6 = *(_QWORD *)(v5 + v4 - 508);
      v7 = *(_QWORD *)(v5 + v4 - 156);
      v8 = 1.0 / *(float *)(v5 + v4 - 352);
      __C = -(float)(*(float *)(v5 + v4 - 348) * v8);
      __B = v8;
      v9 = (const float **)(v5 + v4 + 276);
      vDSP_vsmsa(*v9, 1, &__B, &__C, (float *)*v9, 1, v6);
      v10 = *(_DWORD *)(v2 + 40);
      if (v10)
      {
        HIDWORD(v12) = *(_DWORD *)(v2 + 40);
        LODWORD(v12) = HIDWORD(v12);
        v11 = v12 >> 3;
        if (v11 > 4)
        {
          v51 = -128.0;
          v13 = 127.0;
        }
        else
        {
          v51 = flt_1B667C858[v11];
          v13 = flt_1B667C86C[v11];
        }
        v50 = v13;
        vDSP_vclip(*v9, 1, &v51, &v50, (float *)*v9, 1, v6);
        v10 = *(_DWORD *)(v2 + 40);
      }
      HIDWORD(v14) = v10;
      LODWORD(v14) = v10;
      switch((v14 >> 3))
      {
        case 0u:
          memcpy(*(void **)(v5 + v4 + 396), *v9, 4 * v6);
          break;
        case 2u:
          vDSP_vfixr16(*v9, 1, *(__int16 **)(v5 + v4 + 396), 1, v6);
          break;
        case 4u:
          vDSP_vfixr32(*v9, 1, *(int **)(v5 + v4 + 396), 1, v6);
          break;
        default:
          vDSP_vfixr8(*v9, 1, *(char **)(v5 + v4 + 396), 1, v6);
          break;
      }
      v15 = v5 + v4;
      if (*(_DWORD *)(v5 + v4 + 448) == 1)
      {
        v16 = 1.0 / *(float *)v15;
        v50 = -(float)(*(float *)(v15 + 4) * v16);
        v51 = v16;
        v17 = (const float **)(v15 + 300);
        vDSP_vsmsa(*(const float **)(v15 + 300), 1, &v51, &v50, *(float **)(v15 + 300), 1, v7);
        v18 = *(_DWORD *)(v2 + 40);
        if (v18)
        {
          HIDWORD(v20) = *(_DWORD *)(v2 + 40);
          LODWORD(v20) = HIDWORD(v20);
          v19 = v20 >> 3;
          if (v19 > 4)
          {
            v49 = -128.0;
            v21 = 127.0;
          }
          else
          {
            v49 = flt_1B667C858[v19];
            v21 = flt_1B667C86C[v19];
          }
          v48 = v21;
          vDSP_vclip(*v17, 1, &v49, &v48, (float *)*v17, 1, v7);
          v18 = *(_DWORD *)(v2 + 40);
        }
        HIDWORD(v22) = v18;
        LODWORD(v22) = v18;
        switch((v22 >> 3))
        {
          case 0u:
            memcpy((void *)(*(_QWORD *)(v5 + v4 + 396) + 4 * v6), *v17, 4 * v7);
            break;
          case 2u:
            vDSP_vfixr16(*v17, 1, (__int16 *)(*(_QWORD *)(v5 + v4 + 396) + 4 * v6), 1, v7);
            break;
          case 4u:
            vDSP_vfixr32(*v17, 1, (int *)(*(_QWORD *)(v5 + v4 + 396) + 4 * v6), 1, v7);
            break;
          default:
            vDSP_vfixr8(*v17, 1, (char *)(*(_QWORD *)(v5 + v4 + 396) + 4 * v6), 1, v7);
            break;
        }
      }
      v23 = *(_QWORD *)(v2 + 48);
      __B = 0.0;
      v24 = v23 + v4;
      v25 = *(_QWORD *)(v23 + v4 - 508);
      v26 = *(_QWORD *)(v23 + v4 - 156);
      v27 = *(float *)(v23 + v4 - 172);
      v28 = *(float *)(v23 + v4 - 352);
      HIDWORD(v29) = *(_DWORD *)(v2 + 40);
      LODWORD(v29) = HIDWORD(v29);
      switch((v29 >> 3))
      {
        case 0u:
          memcpy(*(void **)(v23 + v4 + 276), *(const void **)(v23 + v4 + 396), 4 * v25);
          break;
        case 1u:
          v24 = v23 + v4;
          goto LABEL_29;
        case 2u:
          vDSP_vflt16(*(const __int16 **)(v23 + v4 + 396), 1, *(float **)(v23 + v4 + 276), 1, *(_QWORD *)(v23 + v4 - 508));
          break;
        case 4u:
          vDSP_vflt32(*(const int **)(v23 + v4 + 396), 1, *(float **)(v23 + v4 + 276), 1, *(_QWORD *)(v23 + v4 - 508));
          break;
        default:
LABEL_29:
          vDSP_vflt8(*(const char **)(v24 + 396), 1, *(float **)(v24 + 276), 1, *(_QWORD *)(v23 + v4 - 508));
          break;
      }
      v30 = (float *)(v23 + v4);
      vDSP_sve(*(const float **)(v23 + v4 + 276), 1, &__B, v25);
      v31 = (float)(v27 * v28) * __B;
      __B = v31;
      if (*(_DWORD *)(v23 + v4 + 448) == 1)
      {
        v32 = v30[45];
        v33 = *v30;
        __C = 0.0;
        HIDWORD(v34) = *(_DWORD *)(v2 + 40);
        LODWORD(v34) = HIDWORD(v34);
        switch((v34 >> 3))
        {
          case 0u:
            memcpy(*(void **)(v23 + v4 + 300), (const void *)(*(_QWORD *)(v23 + v4 + 396) + 4 * v25), 4 * v26);
            break;
          case 2u:
            vDSP_vflt16((const __int16 *)(*(_QWORD *)(v23 + v4 + 396) + 4 * v25), 1, *(float **)(v23 + v4 + 300), 1, v26);
            break;
          case 4u:
            vDSP_vflt32((const int *)(*(_QWORD *)(v23 + v4 + 396) + 4 * v25), 1, *(float **)(v23 + v4 + 300), 1, v26);
            break;
          default:
            vDSP_vflt8((const char *)(*(_QWORD *)(v23 + v4 + 396) + 4 * v25), 1, *(float **)(v23 + v4 + 300), 1, v26);
            break;
        }
        vDSP_sve(*(const float **)(v23 + v4 + 300), 1, &__C, v26);
        v31 = (float)((float)(v32 * v33) * __C) + __B;
      }
      v35 = *(_QWORD *)(v2 + 48);
      __C = v31;
      v36 = v35 + v4;
      v37 = *(_QWORD *)(v35 + v4 - 156);
      v38 = *(void **)(v35 + v4 + 268);
      v39 = *(const void **)(v35 + v4 + 396);
      if (*(_DWORD *)(v35 + v4 + 448) == 1)
      {
        BNNSFilterApply(v38, v39, *(void **)(v36 + 324));
        vDSP_vsadd(*(const float **)(v36 + 324), 1, &__C, *(float **)(v36 + 324), 1, 4 * (int)v37);
        v40 = *(float **)(v36 + 324);
        __E = *(float **)(v36 + 348);
        NeuralNetBNNS<int>::applyActivationFunction(v40, v40, 8, 3 * v37, 0.0, 0.0);
        __B = *(float *)&v37;
        vvtanhf(&v40[3 * (int)v37], &v40[3 * (int)v37], (const int *)&__B);
        vDSP_vmma(v40, 1, __E, 1, &v40[(int)v37], 1, &v40[3 * (int)v37], 1, __E, 1, (int)v37);
        v42 = *(float **)(v36 + 300);
        __B = *(float *)&v37;
        vvtanhf(v42, __E, (const int *)&__B);
        v2 = v47;
        vDSP_vmul(&v40[2 * (int)v37], 1, *(const float **)(v36 + 300), 1, *(float **)(v36 + 300), 1, (int)v37);
      }
      else
      {
        v43 = (const float **)(v36 + 300);
        BNNSFilterApply(v38, v39, *(void **)(v36 + 300));
        vDSP_vsadd(*v43, 1, &__C, (float *)*v43, 1, (int)v37);
        NeuralNetBNNS<int>::applyActivationFunction(*v43, (float *)*v43, *(_DWORD *)(v36 + 444), v37, *(float *)(v36 + 192), *(float *)(v36 + 196));
      }
      ++v3;
      v44 = *(unsigned int *)(v2 + 44);
      v4 += 968;
    }
    while (v3 < v44);
    v45 = v44 - 1;
  }
  else
  {
    v45 = -1;
  }
  return *(_QWORD *)(v2 + 48) + 968 * v45 + 816;
}

void NeuralNetBNNS<int>::applyActivationFunction(const float *a1, float *a2, int a3, int a4, float a5, float a6)
{
  float *v7;
  float *v8;
  uint64_t v9;
  float v10;
  float v11;
  float v12;
  vDSP_Length v13;
  const float *p_B;
  uint64_t v15;
  float v16;
  float v17;
  float __C;
  float v19;
  float __B;
  int __N;
  float __N_4;
  float v23;

  __N_4 = a6;
  v23 = a5;
  __N = a4;
  v7 = a2;
  v8 = (float *)a1;
  switch(a3)
  {
    case 1:
      __B = 0.0;
      vDSP_vthr(a1, 1, &__B, a2, 1, a4);
      break;
    case 2:
      if (a4)
      {
        v9 = a4;
        do
        {
          v10 = *v8++;
          v11 = v10;
          if (v10 >= 0.0)
            v12 = 1.0;
          else
            v12 = a5;
          *v7++ = v11 * v12;
          --v9;
        }
        while (v9);
      }
      break;
    case 3:
      __B = 0.5;
      vDSP_vsmul(a1, 1, &__B, a2, 1, a4);
      vvtanhf(v7, v7, &__N);
      vDSP_vsmsa(v7, 1, &__B, &__B, v7, 1, __N);
      break;
    case 4:
      vvtanhf(a2, a1, &__N);
      break;
    case 5:
      vDSP_vsmul(a1, 1, &__N_4, a2, 1, a4);
      vvtanhf(v7, v7, &__N);
      v13 = __N;
      p_B = &v23;
      goto LABEL_22;
    case 6:
      vvfabsf(a2, a1, &__N);
      break;
    case 7:
      if (a4)
      {
        v15 = a4;
        do
        {
          v16 = *v8;
          if (*v8 < 0.0)
            v16 = (float)(expf(v16) + -1.0) * a5;
          *v7++ = v16;
          ++v8;
          --v15;
        }
        while (v15);
      }
      break;
    case 8:
      v19 = 1.0;
      __B = 0.0;
      v17 = 0.2;
      __C = 0.5;
      vDSP_vsmsa(a1, 1, &v17, &__C, a2, 1, a4);
      vDSP_vclip(v7, 1, &__B, &v19, v7, 1, __N);
      break;
    case 9:
      __B = 0.0;
      vvexpf(a2, a1, &__N);
      vDSP_sve(v7, 1, &__B, __N);
      __B = 1.0 / __B;
      v13 = __N;
      p_B = &__B;
LABEL_22:
      vDSP_vsmul(v7, 1, p_B, v7, 1, v13);
      break;
    default:
      return;
  }
}

_QWORD *NeuralNetBNNS<int>::~NeuralNetBNNS(_QWORD *a1)
{
  uint64_t v2;
  void **v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  void *v7;
  unint64_t v8;
  BOOL v9;
  BOOL v10;
  void **v12;

  *a1 = &off_1E69D6CE8;
  v3 = (void **)(a1 + 6);
  v2 = a1[6];
  v4 = a1[7];
  if (v4 != v2)
  {
    v5 = 0;
    v6 = 1;
    do
    {
      v7 = *(void **)(v2 + 968 * v5 + 784);
      if (v7)
      {
        BNNSFilterDestroy(v7);
        v2 = a1[6];
        v4 = a1[7];
        *(_QWORD *)(v2 + 968 * v5 + 784) = 0;
      }
      v5 = v6;
      v8 = 0x1B810ECF56BE69C9 * ((v4 - v2) >> 3);
      v9 = v8 >= v6;
      v10 = v8 == v6++;
    }
    while (!v10 && v9);
  }
  v12 = v3;
  std::vector<FullyConnectedLayerBNNS<float>>::__destroy_vector::operator()[abi:ne180100](&v12);
  *a1 = off_1E69D6BC8;
  std::shared_ptr<vp::services::Telephony_Utility>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 3));
  return a1;
}

void NeuralNetBNNS<float>::~NeuralNetBNNS(_QWORD *a1)
{
  NeuralNetBNNS<float>::~NeuralNetBNNS(a1);
  JUMPOUT(0x1BCC95CECLL);
}

uint64_t NeuralNetBNNS<float>::getNumLayers(uint64_t a1)
{
  return *(unsigned int *)(a1 + 44);
}

uint64_t NeuralNetBNNS<float>::getInputSize(uint64_t a1)
{
  return *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8);
}

uint64_t NeuralNetBNNS<float>::getOutputSize(uint64_t a1)
{
  return *(_QWORD *)(*(_QWORD *)(a1 + 48) + 968 * (*(_DWORD *)(a1 + 44) - 1) + 360);
}

uint64_t NeuralNetBNNS<float>::getOutput(uint64_t a1)
{
  return *(_QWORD *)(a1 + 56) - 152;
}

void NeuralNetBNNS<float>::cleanup(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (*(_DWORD *)(a1 + 44))
  {
    v2 = 0;
    v3 = 0;
    do
    {
      v4 = *(_QWORD *)(a1 + 48) + v2;
      vDSP_vclr(*(float **)(v4 + 792), 1, (uint64_t)(*(_QWORD *)(v4 + 800) - *(_QWORD *)(v4 + 792)) >> 2);
      vDSP_vclr(*(float **)(v4 + 816), 1, (uint64_t)(*(_QWORD *)(v4 + 824) - *(_QWORD *)(v4 + 816)) >> 2);
      vDSP_vclr(*(float **)(v4 + 840), 1, (uint64_t)(*(_QWORD *)(v4 + 848) - *(_QWORD *)(v4 + 840)) >> 2);
      vDSP_vclr(*(float **)(v4 + 864), 1, (uint64_t)(*(_QWORD *)(v4 + 872) - *(_QWORD *)(v4 + 864)) >> 2);
      bzero(*(void **)(v4 + 912), *(_QWORD *)(v4 + 920) - *(_QWORD *)(v4 + 912));
      ++v3;
      v2 += 968;
    }
    while (v3 < *(unsigned int *)(a1 + 44));
  }
}

uint64_t NeuralNetBNNS<float>::setEmbedding(uint64_t a1)
{
  NSObject **v1;
  NSObject *v2;
  int v4;
  const char *v5;
  __int16 v6;
  int v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v1 = *(NSObject ***)(a1 + 8);
  if (v1)
  {
    v2 = *v1;
    if (!*v1)
      return 4294956433;
  }
  else
  {
    v2 = MEMORY[0x1E0C81028];
  }
  if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR))
  {
    v4 = 136315394;
    v5 = "NeuralNetImpl.hpp";
    v6 = 1024;
    v7 = 201;
    _os_log_impl(&dword_1B5ED0000, v2, OS_LOG_TYPE_ERROR, "%25s:%-5d NeuralNetBNNS: Embeddings not supported in BNNS mode", (uint8_t *)&v4, 0x12u);
  }
  return 4294956433;
}

{
  NSObject **v1;
  NSObject *v2;
  int v4;
  const char *v5;
  __int16 v6;
  int v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v1 = *(NSObject ***)(a1 + 8);
  if (v1)
  {
    v2 = *v1;
    if (!*v1)
      return 4294956433;
  }
  else
  {
    v2 = MEMORY[0x1E0C81028];
  }
  if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR))
  {
    v4 = 136315394;
    v5 = "NeuralNetImpl.hpp";
    v6 = 1024;
    v7 = 209;
    _os_log_impl(&dword_1B5ED0000, v2, OS_LOG_TYPE_ERROR, "%25s:%-5d NeuralNetBNNS: Embeddings not supported in BNNS mode", (uint8_t *)&v4, 0x12u);
  }
  return 4294956433;
}

uint64_t NeuralNetBNNS<float>::process(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  vDSP_Length v6;
  vDSP_Length v7;
  float v8;
  const float **v9;
  int v10;
  unsigned int v11;
  unint64_t v12;
  float v13;
  unint64_t v14;
  uint64_t v15;
  float v16;
  const float **v17;
  int v18;
  unsigned int v19;
  unint64_t v20;
  float v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  vDSP_Length v25;
  vDSP_Length v26;
  float v27;
  float v28;
  unint64_t v29;
  float *v30;
  float v31;
  float v32;
  float v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  const void *v39;
  float *v40;
  float *__E;
  float *v42;
  const float **v43;
  unint64_t v44;
  unsigned int v45;
  uint64_t v47;
  float v48;
  float v49;
  float v50;
  float v51;
  float __C;
  float __B;

  v2 = a1;
  memcpy(*(void **)(*(_QWORD *)(a1 + 48) + 792), *(const void **)a2, *(_QWORD *)(a2 + 8) - *(_QWORD *)a2);
  if (*(_DWORD *)(v2 + 44))
  {
    v3 = 0;
    v4 = 516;
    v47 = v2;
    do
    {
      if (v4 != 516)
        memcpy(*(void **)(*(_QWORD *)(v2 + 48) + v4 + 276), *(const void **)(*(_QWORD *)(v2 + 48) + v4 - 668), *(_QWORD *)(*(_QWORD *)(v2 + 48) + v4 - 660) - *(_QWORD *)(*(_QWORD *)(v2 + 48) + v4 - 668));
      v5 = *(_QWORD *)(v2 + 48);
      v6 = *(_QWORD *)(v5 + v4 - 508);
      v7 = *(_QWORD *)(v5 + v4 - 156);
      v8 = 1.0 / *(float *)(v5 + v4 - 352);
      __C = -(float)(*(float *)(v5 + v4 - 348) * v8);
      __B = v8;
      v9 = (const float **)(v5 + v4 + 276);
      vDSP_vsmsa(*v9, 1, &__B, &__C, (float *)*v9, 1, v6);
      v10 = *(_DWORD *)(v2 + 40);
      if (v10)
      {
        HIDWORD(v12) = *(_DWORD *)(v2 + 40);
        LODWORD(v12) = HIDWORD(v12);
        v11 = v12 >> 3;
        if (v11 > 4)
        {
          v51 = -128.0;
          v13 = 127.0;
        }
        else
        {
          v51 = flt_1B667C858[v11];
          v13 = flt_1B667C86C[v11];
        }
        v50 = v13;
        vDSP_vclip(*v9, 1, &v51, &v50, (float *)*v9, 1, v6);
        v10 = *(_DWORD *)(v2 + 40);
      }
      HIDWORD(v14) = v10;
      LODWORD(v14) = v10;
      switch((v14 >> 3))
      {
        case 0u:
          memcpy(*(void **)(v5 + v4 + 396), *v9, 4 * v6);
          break;
        case 2u:
          vDSP_vfixr16(*v9, 1, *(__int16 **)(v5 + v4 + 396), 1, v6);
          break;
        case 4u:
          vDSP_vfixr32(*v9, 1, *(int **)(v5 + v4 + 396), 1, v6);
          break;
        default:
          vDSP_vfixr8(*v9, 1, *(char **)(v5 + v4 + 396), 1, v6);
          break;
      }
      v15 = v5 + v4;
      if (*(_DWORD *)(v5 + v4 + 448) == 1)
      {
        v16 = 1.0 / *(float *)v15;
        v50 = -(float)(*(float *)(v15 + 4) * v16);
        v51 = v16;
        v17 = (const float **)(v15 + 300);
        vDSP_vsmsa(*(const float **)(v15 + 300), 1, &v51, &v50, *(float **)(v15 + 300), 1, v7);
        v18 = *(_DWORD *)(v2 + 40);
        if (v18)
        {
          HIDWORD(v20) = *(_DWORD *)(v2 + 40);
          LODWORD(v20) = HIDWORD(v20);
          v19 = v20 >> 3;
          if (v19 > 4)
          {
            v49 = -128.0;
            v21 = 127.0;
          }
          else
          {
            v49 = flt_1B667C858[v19];
            v21 = flt_1B667C86C[v19];
          }
          v48 = v21;
          vDSP_vclip(*v17, 1, &v49, &v48, (float *)*v17, 1, v7);
          v18 = *(_DWORD *)(v2 + 40);
        }
        HIDWORD(v22) = v18;
        LODWORD(v22) = v18;
        switch((v22 >> 3))
        {
          case 0u:
            memcpy((void *)(*(_QWORD *)(v5 + v4 + 396) + 4 * v6), *v17, 4 * v7);
            break;
          case 2u:
            vDSP_vfixr16(*v17, 1, (__int16 *)(*(_QWORD *)(v5 + v4 + 396) + 4 * v6), 1, v7);
            break;
          case 4u:
            vDSP_vfixr32(*v17, 1, (int *)(*(_QWORD *)(v5 + v4 + 396) + 4 * v6), 1, v7);
            break;
          default:
            vDSP_vfixr8(*v17, 1, (char *)(*(_QWORD *)(v5 + v4 + 396) + 4 * v6), 1, v7);
            break;
        }
      }
      v23 = *(_QWORD *)(v2 + 48);
      __B = 0.0;
      v24 = v23 + v4;
      v25 = *(_QWORD *)(v23 + v4 - 508);
      v26 = *(_QWORD *)(v23 + v4 - 156);
      v27 = *(float *)(v23 + v4 - 172);
      v28 = *(float *)(v23 + v4 - 352);
      HIDWORD(v29) = *(_DWORD *)(v2 + 40);
      LODWORD(v29) = HIDWORD(v29);
      switch((v29 >> 3))
      {
        case 0u:
          memcpy(*(void **)(v23 + v4 + 276), *(const void **)(v23 + v4 + 396), 4 * v25);
          break;
        case 1u:
          v24 = v23 + v4;
          goto LABEL_29;
        case 2u:
          vDSP_vflt16(*(const __int16 **)(v23 + v4 + 396), 1, *(float **)(v23 + v4 + 276), 1, *(_QWORD *)(v23 + v4 - 508));
          break;
        case 4u:
          vDSP_vflt32(*(const int **)(v23 + v4 + 396), 1, *(float **)(v23 + v4 + 276), 1, *(_QWORD *)(v23 + v4 - 508));
          break;
        default:
LABEL_29:
          vDSP_vflt8(*(const char **)(v24 + 396), 1, *(float **)(v24 + 276), 1, *(_QWORD *)(v23 + v4 - 508));
          break;
      }
      v30 = (float *)(v23 + v4);
      vDSP_sve(*(const float **)(v23 + v4 + 276), 1, &__B, v25);
      v31 = (float)(v27 * v28) * __B;
      __B = v31;
      if (*(_DWORD *)(v23 + v4 + 448) == 1)
      {
        v32 = v30[45];
        v33 = *v30;
        __C = 0.0;
        HIDWORD(v34) = *(_DWORD *)(v2 + 40);
        LODWORD(v34) = HIDWORD(v34);
        switch((v34 >> 3))
        {
          case 0u:
            memcpy(*(void **)(v23 + v4 + 300), (const void *)(*(_QWORD *)(v23 + v4 + 396) + 4 * v25), 4 * v26);
            break;
          case 2u:
            vDSP_vflt16((const __int16 *)(*(_QWORD *)(v23 + v4 + 396) + 4 * v25), 1, *(float **)(v23 + v4 + 300), 1, v26);
            break;
          case 4u:
            vDSP_vflt32((const int *)(*(_QWORD *)(v23 + v4 + 396) + 4 * v25), 1, *(float **)(v23 + v4 + 300), 1, v26);
            break;
          default:
            vDSP_vflt8((const char *)(*(_QWORD *)(v23 + v4 + 396) + 4 * v25), 1, *(float **)(v23 + v4 + 300), 1, v26);
            break;
        }
        vDSP_sve(*(const float **)(v23 + v4 + 300), 1, &__C, v26);
        v31 = (float)((float)(v32 * v33) * __C) + __B;
      }
      v35 = *(_QWORD *)(v2 + 48);
      __C = v31;
      v36 = v35 + v4;
      v37 = *(_QWORD *)(v35 + v4 - 156);
      v38 = *(void **)(v35 + v4 + 268);
      v39 = *(const void **)(v35 + v4 + 396);
      if (*(_DWORD *)(v35 + v4 + 448) == 1)
      {
        BNNSFilterApply(v38, v39, *(void **)(v36 + 324));
        vDSP_vsadd(*(const float **)(v36 + 324), 1, &__C, *(float **)(v36 + 324), 1, 4 * (int)v37);
        v40 = *(float **)(v36 + 324);
        __E = *(float **)(v36 + 348);
        NeuralNetBNNS<float>::applyActivationFunction(v40, v40, 8, 3 * v37, 0.0, 0.0);
        __B = *(float *)&v37;
        vvtanhf(&v40[3 * (int)v37], &v40[3 * (int)v37], (const int *)&__B);
        vDSP_vmma(v40, 1, __E, 1, &v40[(int)v37], 1, &v40[3 * (int)v37], 1, __E, 1, (int)v37);
        v42 = *(float **)(v36 + 300);
        __B = *(float *)&v37;
        vvtanhf(v42, __E, (const int *)&__B);
        v2 = v47;
        vDSP_vmul(&v40[2 * (int)v37], 1, *(const float **)(v36 + 300), 1, *(float **)(v36 + 300), 1, (int)v37);
      }
      else
      {
        v43 = (const float **)(v36 + 300);
        BNNSFilterApply(v38, v39, *(void **)(v36 + 300));
        vDSP_vsadd(*v43, 1, &__C, (float *)*v43, 1, (int)v37);
        NeuralNetBNNS<float>::applyActivationFunction(*v43, (float *)*v43, *(_DWORD *)(v36 + 444), v37, *(float *)(v36 + 192), *(float *)(v36 + 196));
      }
      ++v3;
      v44 = *(unsigned int *)(v2 + 44);
      v4 += 968;
    }
    while (v3 < v44);
    v45 = v44 - 1;
  }
  else
  {
    v45 = -1;
  }
  return *(_QWORD *)(v2 + 48) + 968 * v45 + 816;
}

void NeuralNetBNNS<float>::applyActivationFunction(const float *a1, float *a2, int a3, int a4, float a5, float a6)
{
  float *v7;
  float *v8;
  uint64_t v9;
  float v10;
  float v11;
  float v12;
  vDSP_Length v13;
  const float *p_B;
  uint64_t v15;
  float v16;
  float v17;
  float __C;
  float v19;
  float __B;
  int __N;
  float __N_4;
  float v23;

  __N_4 = a6;
  v23 = a5;
  __N = a4;
  v7 = a2;
  v8 = (float *)a1;
  switch(a3)
  {
    case 1:
      __B = 0.0;
      vDSP_vthr(a1, 1, &__B, a2, 1, a4);
      break;
    case 2:
      if (a4)
      {
        v9 = a4;
        do
        {
          v10 = *v8++;
          v11 = v10;
          if (v10 >= 0.0)
            v12 = 1.0;
          else
            v12 = a5;
          *v7++ = v11 * v12;
          --v9;
        }
        while (v9);
      }
      break;
    case 3:
      __B = 0.5;
      vDSP_vsmul(a1, 1, &__B, a2, 1, a4);
      vvtanhf(v7, v7, &__N);
      vDSP_vsmsa(v7, 1, &__B, &__B, v7, 1, __N);
      break;
    case 4:
      vvtanhf(a2, a1, &__N);
      break;
    case 5:
      vDSP_vsmul(a1, 1, &__N_4, a2, 1, a4);
      vvtanhf(v7, v7, &__N);
      v13 = __N;
      p_B = &v23;
      goto LABEL_22;
    case 6:
      vvfabsf(a2, a1, &__N);
      break;
    case 7:
      if (a4)
      {
        v15 = a4;
        do
        {
          v16 = *v8;
          if (*v8 < 0.0)
            v16 = (float)(expf(v16) + -1.0) * a5;
          *v7++ = v16;
          ++v8;
          --v15;
        }
        while (v15);
      }
      break;
    case 8:
      v19 = 1.0;
      __B = 0.0;
      v17 = 0.2;
      __C = 0.5;
      vDSP_vsmsa(a1, 1, &v17, &__C, a2, 1, a4);
      vDSP_vclip(v7, 1, &__B, &v19, v7, 1, __N);
      break;
    case 9:
      __B = 0.0;
      vvexpf(a2, a1, &__N);
      vDSP_sve(v7, 1, &__B, __N);
      __B = 1.0 / __B;
      v13 = __N;
      p_B = &__B;
LABEL_22:
      vDSP_vsmul(v7, 1, p_B, v7, 1, v13);
      break;
    default:
      return;
  }
}

_QWORD *NeuralNetBNNS<float>::~NeuralNetBNNS(_QWORD *a1)
{
  uint64_t v2;
  void **v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  void *v7;
  unint64_t v8;
  BOOL v9;
  BOOL v10;
  void **v12;

  *a1 = &off_1E69D6D48;
  v3 = (void **)(a1 + 6);
  v2 = a1[6];
  v4 = a1[7];
  if (v4 != v2)
  {
    v5 = 0;
    v6 = 1;
    do
    {
      v7 = *(void **)(v2 + 968 * v5 + 784);
      if (v7)
      {
        BNNSFilterDestroy(v7);
        v2 = a1[6];
        v4 = a1[7];
        *(_QWORD *)(v2 + 968 * v5 + 784) = 0;
      }
      v5 = v6;
      v8 = 0x1B810ECF56BE69C9 * ((v4 - v2) >> 3);
      v9 = v8 >= v6;
      v10 = v8 == v6++;
    }
    while (!v10 && v9);
  }
  v12 = v3;
  std::vector<FullyConnectedLayerBNNS<float>>::__destroy_vector::operator()[abi:ne180100](&v12);
  *a1 = off_1E69D6BC8;
  std::shared_ptr<vp::services::Telephony_Utility>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 3));
  return a1;
}

void NeuralNetEspresso::~NeuralNetEspresso(NeuralNetEspresso *this)
{
  NeuralNetEspresso::~NeuralNetEspresso(this);
  JUMPOUT(0x1BCC95CECLL);
}

{
  NSObject **v2;
  NSObject *v3;
  void *v4;
  void *v5;
  void *v6;
  _BYTE v7[12];
  __int16 v8;
  int v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)this = &off_1E69D6DA8;
  v2 = (NSObject **)*((_QWORD *)this + 1);
  if (v2)
  {
    v3 = *v2;
    if (!*v2)
      goto LABEL_7;
  }
  else
  {
    v3 = MEMORY[0x1E0C81028];
  }
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)v7 = 136315394;
    *(_QWORD *)&v7[4] = "NeuralNetImpl.cpp";
    v8 = 1024;
    v9 = 789;
    _os_log_impl(&dword_1B5ED0000, v3, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Destructing.", v7, 0x12u);
  }
LABEL_7:
  v4 = (void *)*((_QWORD *)this + 107);
  if (v4)
  {
    *((_QWORD *)this + 108) = v4;
    operator delete(v4);
  }
  v5 = (void *)*((_QWORD *)this + 104);
  if (v5)
  {
    *((_QWORD *)this + 105) = v5;
    operator delete(v5);
  }
  *(_QWORD *)v7 = (char *)this + 808;
  std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)v7);
  v6 = (void *)*((_QWORD *)this + 98);
  if (v6)
  {
    *((_QWORD *)this + 99) = v6;
    operator delete(v6);
  }
  if (*((_BYTE *)this + 248))
    std::shared_ptr<vp::services::Telephony_Utility>::~shared_ptr[abi:ne180100]((uint64_t)this + 232);
  std::__optional_destruct_base<audiodsp::espresso::v1::plan,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)this + 176);
  if (*((_BYTE *)this + 168))
    std::shared_ptr<vp::services::Telephony_Utility>::~shared_ptr[abi:ne180100]((uint64_t)this + 152);
  if (*((char *)this + 143) < 0)
    operator delete(*((void **)this + 15));
  if (*((char *)this + 119) < 0)
    operator delete(*((void **)this + 12));
  if (*((char *)this + 95) < 0)
    operator delete(*((void **)this + 9));
  if (*((char *)this + 71) < 0)
    operator delete(*((void **)this + 6));
  *(_QWORD *)this = off_1E69D6BC8;
  std::shared_ptr<vp::services::Telephony_Utility>::~shared_ptr[abi:ne180100]((uint64_t)this + 24);
}

uint64_t NeuralNetEspresso::getNumLayers(NeuralNetEspresso *this)
{
  return 0;
}

uint64_t NeuralNetEspresso::getInputSize(NeuralNetEspresso *this)
{
  if (!*((_BYTE *)this + 424))
    std::__throw_bad_optional_access[abi:ne180100]();
  return *((_QWORD *)this + 43)
       * *((_QWORD *)this + 42)
       * *((_QWORD *)this + 44)
       * *((_QWORD *)this + 45)
       * *((_QWORD *)this + 46);
}

uint64_t NeuralNetEspresso::getOutputSize(NeuralNetEspresso *this)
{
  if (!*((_BYTE *)this + 776))
    std::__throw_bad_optional_access[abi:ne180100]();
  return *((_QWORD *)this + 87)
       * *((_QWORD *)this + 86)
       * *((_QWORD *)this + 88)
       * *((_QWORD *)this + 89)
       * *((_QWORD *)this + 90);
}

uint64_t NeuralNetEspresso::getOutput(NeuralNetEspresso *this)
{
  return (uint64_t)this + 784;
}

void NeuralNetEspresso::cleanup(NeuralNetEspresso *this)
{
  float *v2;
  float *v3;
  float *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;

  if (!*((_BYTE *)this + 424))
LABEL_26:
    std::__throw_bad_optional_access[abi:ne180100]();
  if (*((_DWORD *)this + 104) == 65568)
    v2 = (float *)*((_QWORD *)this + 32);
  else
    v2 = 0;
  vDSP_vclr(v2, 1, *((_QWORD *)this + 43)* *((_QWORD *)this + 42)* *((_QWORD *)this + 44)* *((_QWORD *)this + 45)* *((_QWORD *)this + 46));
  if (*((char *)this + 119) < 0)
  {
    if (!*((_QWORD *)this + 13))
      goto LABEL_14;
  }
  else if (!*((_BYTE *)this + 119))
  {
    goto LABEL_14;
  }
  if (!*((_BYTE *)this + 600))
    goto LABEL_26;
  if (*((_DWORD *)this + 148) == 65568)
    v3 = (float *)*((_QWORD *)this + 54);
  else
    v3 = 0;
  vDSP_vclr(v3, 1, *((_QWORD *)this + 65)* *((_QWORD *)this + 64)* *((_QWORD *)this + 66)* *((_QWORD *)this + 67)* *((_QWORD *)this + 68));
LABEL_14:
  if (!*((_BYTE *)this + 776))
    goto LABEL_26;
  if (*((_DWORD *)this + 192) == 65568)
    v4 = (float *)*((_QWORD *)this + 76);
  else
    v4 = 0;
  vDSP_vclr(v4, 1, *((_QWORD *)this + 87)* *((_QWORD *)this + 86)* *((_QWORD *)this + 88)* *((_QWORD *)this + 89)* *((_QWORD *)this + 90));
  vDSP_vclr(*((float **)this + 98), 1, (uint64_t)(*((_QWORD *)this + 99) - *((_QWORD *)this + 98)) >> 2);
  if (*((_DWORD *)this + 36) == 1)
  {
    v5 = *((_QWORD *)this + 104);
    v6 = *((_QWORD *)this + 105);
    while (v5 != v6)
    {
      if (*(_DWORD *)(v5 + 160) == 65568)
        v7 = *(void **)v5;
      else
        v7 = 0;
      bzero(v7, 4* *(_QWORD *)(v5 + 80)* *(_QWORD *)(v5 + 88)* *(_QWORD *)(v5 + 96)* *(_QWORD *)(v5 + 104)* *(_QWORD *)(v5 + 112));
      v5 += 336;
    }
  }
}

uint64_t NeuralNetEspresso::setEmbedding(uint64_t a1, uint64_t a2)
{
  void *v3;
  uint64_t v4;
  uint64_t message;
  caulk::concurrent::message *v6;

  if (*(_BYTE *)(a1 + 600))
  {
    if (*(_DWORD *)(a1 + 592) == 65568)
      v3 = *(void **)(a1 + 432);
    else
      v3 = 0;
    memcpy(v3, *(const void **)a2, *(_QWORD *)(a2 + 8) - *(_QWORD *)a2);
    return 0;
  }
  else
  {
    v4 = _os_log_pack_size();
    message = caulk::deferred_logger::create_message(*(caulk::deferred_logger **)(a1 + 24), v4 + 88, 16);
    if (message)
    {
      v6 = (caulk::concurrent::message *)message;
      *(_WORD *)_os_log_pack_fill() = 0;
      caulk::concurrent::messenger::enqueue(*(caulk::concurrent::messenger **)(*(_QWORD *)(a1 + 24) + 16), v6);
    }
    return 4294956433;
  }
}

uint64_t NeuralNetEspresso::setEmbedding(NeuralNetEspresso *this, float a2)
{
  float *v3;
  uint64_t v4;
  uint64_t message;
  caulk::concurrent::message *v6;
  float __A;

  __A = a2;
  if (*((_BYTE *)this + 600))
  {
    if (*((_DWORD *)this + 148) == 65568)
      v3 = (float *)*((_QWORD *)this + 54);
    else
      v3 = 0;
    vDSP_vfill(&__A, v3, 1, *((_QWORD *)this + 65)* *((_QWORD *)this + 64)* *((_QWORD *)this + 66)* *((_QWORD *)this + 67)* *((_QWORD *)this + 68));
    return 0;
  }
  else
  {
    v4 = _os_log_pack_size();
    message = caulk::deferred_logger::create_message(*((caulk::deferred_logger **)this + 3), v4 + 88, 16);
    if (message)
    {
      v6 = (caulk::concurrent::message *)message;
      *(_WORD *)_os_log_pack_fill() = 0;
      caulk::concurrent::messenger::enqueue(*(caulk::concurrent::messenger **)(*((_QWORD *)this + 3) + 16), v6);
    }
    return 4294956433;
  }
}

uint64_t NeuralNetEspresso::process(uint64_t a1, uint64_t a2)
{
  const void *v3;
  int64_t v5;
  void *v6;
  uint64_t v7;
  const void *v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  int v12;
  const void *v13;
  size_t v14;
  void *v15;
  NSObject **v17;
  NSObject *v18;
  uint64_t v19;
  unint64_t v20;
  NSObject **v21;
  NSObject *v22;
  uint64_t v23;
  void *v24;
  _DWORD *exception;
  _DWORD *v26;
  int v27;
  const char *v28;
  __int16 v29;
  int v30;
  __int16 v31;
  int v32;
  __int16 v33;
  int v34;
  __int16 v35;
  int v36;
  uint64_t v37;

  v37 = *MEMORY[0x1E0C80C00];
  if (*(_DWORD *)(a1 + 40) != 65568)
  {
    v17 = *(NSObject ***)(a1 + 8);
    if (v17)
      v18 = *v17;
    else
      v18 = 0;
    if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
    {
      v27 = 136315650;
      v28 = "NeuralNetImpl.cpp";
      v29 = 1024;
      v30 = 958;
      v31 = 1024;
      v32 = -66743;
      _os_log_impl(&dword_1B5ED0000, v18, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (%d): \"Only Float32 inputs supported.\"", (uint8_t *)&v27, 0x18u);
    }
    exception = __cxa_allocate_exception(0x10uLL);
    *(_QWORD *)exception = &off_1E69EE218;
    exception[2] = -66743;
  }
  if (!*(_BYTE *)(a1 + 424))
    goto LABEL_24;
  v3 = *(const void **)a2;
  v5 = *(_QWORD *)(a2 + 8) - (_QWORD)v3;
  if (v5 >> 2 != *(_QWORD *)(a1 + 344)
                * *(_QWORD *)(a1 + 336)
                * *(_QWORD *)(a1 + 352)
                * *(_QWORD *)(a1 + 360)
                * *(_QWORD *)(a1 + 368))
  {
    v19 = *(_QWORD *)(a1 + 344)
        * *(_QWORD *)(a1 + 336)
        * *(_QWORD *)(a1 + 352)
        * *(_QWORD *)(a1 + 360)
        * *(_QWORD *)(a1 + 368);
    v20 = v5;
    v21 = *(NSObject ***)(a1 + 8);
    if (v21)
      v22 = *v21;
    else
      v22 = 0;
    if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
    {
      v27 = 136316162;
      v28 = "NeuralNetImpl.cpp";
      v29 = 1024;
      v30 = 947;
      v31 = 1024;
      v32 = -66743;
      v33 = 1024;
      v34 = v20 >> 2;
      v35 = 1024;
      v36 = v19;
      _os_log_impl(&dword_1B5ED0000, v22, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (%d): \"Input size (%u) and the actual NN input size (%u) not maching!\"", (uint8_t *)&v27, 0x24u);
    }
    v26 = __cxa_allocate_exception(0x10uLL);
    *(_QWORD *)v26 = &off_1E69EE218;
    v26[2] = -66743;
  }
  v6 = *(_DWORD *)(a1 + 416) == 65568 ? *(void **)(a1 + 256) : 0;
  memcpy(v6, v3, v5);
  if (!*(_BYTE *)(a1 + 208))
    goto LABEL_24;
  v7 = espresso_plan_execute_sync();
  if ((_DWORD)v7)
  {
    v23 = v7;
    v24 = __cxa_allocate_exception(0x20uLL);
    MEMORY[0x1BCC95758](v24, v23, &audiodsp::espresso::v1::error_category(void)::instance);
  }
  if (!*(_BYTE *)(a1 + 776))
LABEL_24:
    std::__throw_bad_optional_access[abi:ne180100]();
  if (*(_DWORD *)(a1 + 768) == 65568)
    v8 = *(const void **)(a1 + 608);
  else
    v8 = 0;
  memcpy(*(void **)(a1 + 784), v8, *(_QWORD *)(a1 + 792) - *(_QWORD *)(a1 + 784));
  if (*(_DWORD *)(a1 + 144) == 1)
  {
    vDSP_vclr(*(float **)(a1 + 856), 1, (uint64_t)(*(_QWORD *)(a1 + 864) - *(_QWORD *)(a1 + 856)) >> 2);
    v9 = *(_QWORD *)(a1 + 832);
    v10 = *(_QWORD *)(a1 + 840);
    while (v9 != v10)
    {
      v11 = *(void **)v9;
      v12 = *(_DWORD *)(v9 + 160);
      if (*(_DWORD *)(v9 + 328) == 65568)
        v13 = *(const void **)(v9 + 168);
      else
        v13 = 0;
      v14 = 4
          * *(_QWORD *)(v9 + 80)
          * *(_QWORD *)(v9 + 88)
          * *(_QWORD *)(v9 + 96)
          * *(_QWORD *)(v9 + 104)
          * *(_QWORD *)(v9 + 112);
      memcpy(*(void **)(a1 + 856), v13, v14);
      if (v12 == 65568)
        v15 = v11;
      else
        v15 = 0;
      memcpy(v15, *(const void **)(a1 + 856), v14);
      v9 += 336;
    }
  }
  return a1 + 784;
}

void sub_1B6382DFC(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__optional_destruct_base<audiodsp::espresso::v1::plan,false>::~__optional_destruct_base[abi:ne180100](uint64_t a1)
{
  if (*(_BYTE *)(a1 + 32))
  {
    std::shared_ptr<vp::services::Telephony_Utility>::~shared_ptr[abi:ne180100](a1 + 16);
    std::shared_ptr<vp::services::Telephony_Utility>::~shared_ptr[abi:ne180100](a1);
  }
  return a1;
}

void NeuralNetEspressoV2::~NeuralNetEspressoV2(NeuralNetEspressoV2 *this)
{
  NeuralNetEspressoV2::~NeuralNetEspressoV2(this);
  JUMPOUT(0x1BCC95CECLL);
}

{
  NSObject **v2;
  NSObject *v3;
  void *v4;
  void *v5;
  uint64_t v6;
  _BYTE v7[12];
  __int16 v8;
  int v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)this = &off_1E69D6E08;
  v2 = (NSObject **)*((_QWORD *)this + 1);
  if (v2)
  {
    v3 = *v2;
    if (!*v2)
      goto LABEL_7;
  }
  else
  {
    v3 = MEMORY[0x1E0C81028];
  }
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)v7 = 136315394;
    *(_QWORD *)&v7[4] = "NeuralNetImpl.cpp";
    v8 = 1024;
    v9 = 1126;
    _os_log_impl(&dword_1B5ED0000, v3, OS_LOG_TYPE_DEFAULT, "%25s:%-5d NeuralNetEspressoV2 Destructing.", v7, 0x12u);
  }
LABEL_7:
  v4 = (void *)*((_QWORD *)this + 50);
  if (v4)
  {
    *((_QWORD *)this + 51) = v4;
    operator delete(v4);
  }
  *(_QWORD *)v7 = (char *)this + 376;
  std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)v7);
  v5 = (void *)*((_QWORD *)this + 44);
  if (v5)
  {
    *((_QWORD *)this + 45) = v5;
    operator delete(v5);
  }
  v6 = *((_QWORD *)this + 43);
  *((_QWORD *)this + 43) = 0;
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  std::shared_ptr<vp::services::Telephony_Utility>::~shared_ptr[abi:ne180100]((uint64_t)this + 328);
  if (*((char *)this + 135) < 0)
    operator delete(*((void **)this + 14));
  if (*((char *)this + 111) < 0)
    operator delete(*((void **)this + 11));
  if (*((char *)this + 87) < 0)
    operator delete(*((void **)this + 8));
  if (*((char *)this + 63) < 0)
    operator delete(*((void **)this + 5));
  *(_QWORD *)this = off_1E69D6BC8;
  std::shared_ptr<vp::services::Telephony_Utility>::~shared_ptr[abi:ne180100]((uint64_t)this + 24);
}

uint64_t NeuralNetEspressoV2::getNumLayers(NeuralNetEspressoV2 *this)
{
  return 0;
}

uint64_t NeuralNetEspressoV2::getInputSize(NeuralNetEspressoV2 *this)
{
  return *((unsigned int *)this + 80);
}

uint64_t NeuralNetEspressoV2::getOutputSize(NeuralNetEspressoV2 *this)
{
  return *((unsigned int *)this + 81);
}

uint64_t NeuralNetEspressoV2::getOutput(NeuralNetEspressoV2 *this)
{
  return (uint64_t)this + 352;
}

void NeuralNetEspressoV2::cleanup(NeuralNetEspressoV2 *this)
{
  float *v2;

  if (*((char *)this + 111) < 0)
  {
    if (!*((_QWORD *)this + 12))
      goto LABEL_10;
  }
  else if (!*((_BYTE *)this + 111))
  {
    goto LABEL_10;
  }
  if (!*((_BYTE *)this + 312))
    std::__throw_bad_optional_access[abi:ne180100]();
  if (*((_DWORD *)this + 76) == 65568)
    v2 = (float *)*((_QWORD *)this + 18);
  else
    v2 = 0;
  vDSP_vclr(v2, 1, *((_QWORD *)this + 29)* *((_QWORD *)this + 28)* *((_QWORD *)this + 30)* *((_QWORD *)this + 31)* *((_QWORD *)this + 32));
LABEL_10:
  vDSP_vclr(*((float **)this + 44), 1, (uint64_t)(*((_QWORD *)this + 45) - *((_QWORD *)this + 44)) >> 2);
}

uint64_t NeuralNetEspressoV2::setEmbedding(uint64_t a1, uint64_t a2)
{
  void *v3;
  uint64_t v4;
  uint64_t message;
  caulk::concurrent::message *v6;

  if (*(_BYTE *)(a1 + 312))
  {
    if (*(_DWORD *)(a1 + 304) == 65568)
      v3 = *(void **)(a1 + 144);
    else
      v3 = 0;
    memcpy(v3, *(const void **)a2, *(_QWORD *)(a2 + 8) - *(_QWORD *)a2);
    return 0;
  }
  else
  {
    v4 = _os_log_pack_size();
    message = caulk::deferred_logger::create_message(*(caulk::deferred_logger **)(a1 + 24), v4 + 88, 16);
    if (message)
    {
      v6 = (caulk::concurrent::message *)message;
      *(_WORD *)_os_log_pack_fill() = 0;
      caulk::concurrent::messenger::enqueue(*(caulk::concurrent::messenger **)(*(_QWORD *)(a1 + 24) + 16), v6);
    }
    return 4294956433;
  }
}

uint64_t NeuralNetEspressoV2::setEmbedding(NeuralNetEspressoV2 *this, float a2)
{
  float *v3;
  uint64_t v4;
  uint64_t message;
  caulk::concurrent::message *v6;
  float __A;

  __A = a2;
  if (*((_BYTE *)this + 312))
  {
    if (*((_DWORD *)this + 76) == 65568)
      v3 = (float *)*((_QWORD *)this + 18);
    else
      v3 = 0;
    vDSP_vfill(&__A, v3, 1, *((_QWORD *)this + 29)* *((_QWORD *)this + 28)* *((_QWORD *)this + 30)* *((_QWORD *)this + 31)* *((_QWORD *)this + 32));
    return 0;
  }
  else
  {
    v4 = _os_log_pack_size();
    message = caulk::deferred_logger::create_message(*((caulk::deferred_logger **)this + 3), v4 + 88, 16);
    if (message)
    {
      v6 = (caulk::concurrent::message *)message;
      *(_WORD *)_os_log_pack_fill() = 0;
      caulk::concurrent::messenger::enqueue(*(caulk::concurrent::messenger **)(*((_QWORD *)this + 3) + 16), v6);
    }
    return 4294956433;
  }
}

uint64_t NeuralNetEspressoV2::process(uint64_t a1, uint64_t a2)
{
  E5RT::ExecutionStreamOperation *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  E5RT::ExecutionStreamOperation *v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  void *v14;
  unint64_t *v15;
  unint64_t v16;
  __int128 *v17;
  __int128 *v18;
  void **v19;
  __int128 v20;
  E5RT::ExecutionStreamOperation *v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  void *v25;
  unint64_t *v26;
  unint64_t v27;
  E5RT::ExecutionStreamOperation *v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  unint64_t *v32;
  unint64_t v33;
  __int128 v35;
  uint64_t v36;
  std::string v37;
  std::string v38;

  v4 = *(E5RT::ExecutionStreamOperation **)(a1 + 328);
  v5 = *(std::__shared_weak_count **)(a1 + 336);
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
  }
  NeuralNetEspressoV2::SetInput<float>(a1, v4, (unsigned __int8 *)(a1 + 64), a2);
  if (v5)
  {
    v8 = (unint64_t *)&v5->__shared_owners_;
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  E5RT::ExecutionStream::ExecuteStreamSync(*(E5RT::ExecutionStream **)(a1 + 344));
  v10 = *(E5RT::ExecutionStreamOperation **)(a1 + 328);
  v11 = *(std::__shared_weak_count **)(a1 + 336);
  if (v11)
  {
    v12 = (unint64_t *)&v11->__shared_owners_;
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
  }
  NeuralNetEspressoV2::GetOutput<float>((void **)&v38.__r_.__value_.__l.__data_, a1, v10, (unsigned __int8 *)(a1 + 112));
  v14 = *(void **)(a1 + 352);
  if (v14)
  {
    *(_QWORD *)(a1 + 360) = v14;
    operator delete(v14);
    *(_QWORD *)(a1 + 352) = 0;
    *(_QWORD *)(a1 + 360) = 0;
    *(_QWORD *)(a1 + 368) = 0;
  }
  *(std::string *)(a1 + 352) = v38;
  memset(&v38, 0, sizeof(v38));
  if (v11)
  {
    v15 = (unint64_t *)&v11->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if (*(_DWORD *)(a1 + 136) == 1)
  {
    vDSP_vclr(*(float **)(a1 + 400), 1, (uint64_t)(*(_QWORD *)(a1 + 408) - *(_QWORD *)(a1 + 400)) >> 2);
    v17 = *(__int128 **)(a1 + 376);
    v18 = *(__int128 **)(a1 + 384);
    if (v17 != v18)
    {
      v19 = (void **)(a1 + 400);
      do
      {
        if (*((char *)v17 + 23) < 0)
        {
          std::string::__init_copy_ctor_external(&v38, *(const std::string::value_type **)v17, *((_QWORD *)v17 + 1));
        }
        else
        {
          v20 = *v17;
          v38.__r_.__value_.__r.__words[2] = *((_QWORD *)v17 + 2);
          *(_OWORD *)&v38.__r_.__value_.__l.__data_ = v20;
        }
        if (*((char *)v17 + 47) < 0)
          std::string::__init_copy_ctor_external(&v37, *((const std::string::value_type **)v17 + 3), *((_QWORD *)v17 + 4));
        else
          v37 = *(std::string *)((_BYTE *)v17 + 1);
        v21 = *(E5RT::ExecutionStreamOperation **)(a1 + 328);
        v22 = *(std::__shared_weak_count **)(a1 + 336);
        if (v22)
        {
          v23 = (unint64_t *)&v22->__shared_owners_;
          do
            v24 = __ldxr(v23);
          while (__stxr(v24 + 1, v23));
        }
        NeuralNetEspressoV2::GetOutput<float>((void **)&v35, a1, v21, (unsigned __int8 *)&v37);
        v25 = *v19;
        if (*v19)
        {
          *(_QWORD *)(a1 + 408) = v25;
          operator delete(v25);
          *v19 = 0;
          *(_QWORD *)(a1 + 408) = 0;
          *(_QWORD *)(a1 + 416) = 0;
        }
        *(_OWORD *)(a1 + 400) = v35;
        *(_QWORD *)(a1 + 416) = v36;
        v36 = 0;
        v35 = 0uLL;
        if (v22)
        {
          v26 = (unint64_t *)&v22->__shared_owners_;
          do
            v27 = __ldaxr(v26);
          while (__stlxr(v27 - 1, v26));
          if (!v27)
          {
            ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
            std::__shared_weak_count::__release_weak(v22);
          }
        }
        v28 = *(E5RT::ExecutionStreamOperation **)(a1 + 328);
        v29 = *(std::__shared_weak_count **)(a1 + 336);
        if (v29)
        {
          v30 = (unint64_t *)&v29->__shared_owners_;
          do
            v31 = __ldxr(v30);
          while (__stxr(v31 + 1, v30));
        }
        NeuralNetEspressoV2::SetInput<float>(a1, v28, (unsigned __int8 *)&v38, a1 + 400);
        if (v29)
        {
          v32 = (unint64_t *)&v29->__shared_owners_;
          do
            v33 = __ldaxr(v32);
          while (__stlxr(v33 - 1, v32));
          if (!v33)
          {
            ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
            std::__shared_weak_count::__release_weak(v29);
          }
        }
        if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v37.__r_.__value_.__l.__data_);
        if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v38.__r_.__value_.__l.__data_);
        v17 += 3;
      }
      while (v17 != v18);
    }
  }
  return a1 + 352;
}

void sub_1B6383540(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  std::shared_ptr<vp::services::Telephony_Utility>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t NeuralNetEspressoV2::SetInput<float>(uint64_t a1, E5RT::ExecutionStreamOperation *this, unsigned __int8 *a3, uint64_t a4)
{
  uint64_t InputPorts;
  unsigned __int8 *v8;
  unsigned __int8 *v9;
  E5RT::IOPort *v10;
  uint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  E5RT::BufferObject *v14;
  uint64_t DataSpan;
  unint64_t v16;
  void *v17;
  unint64_t *p_shared_owners;
  unint64_t v19;
  const void *v20;
  uint64_t v21;
  size_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  NSObject **v27;
  NSObject *v28;
  uint64_t *v29;
  _DWORD *exception;
  E5RT::MemoryObject *v31;
  std::__shared_weak_count *v32;
  _QWORD v33[5];
  _BYTE buf[18];
  __int16 v35;
  int v36;
  __int16 v37;
  uint64_t *v38;
  uint64_t v39;

  v39 = *MEMORY[0x1E0C80C00];
  InputPorts = E5RT::ExecutionStreamOperation::GetInputPorts(this);
  std::unordered_map<std::string,std::shared_ptr<E5RT::IOPort>>::unordered_map((uint64_t)v33, InputPorts);
  if (!std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>>>::find<std::string>(v33, a3))
  {
    v27 = *(NSObject ***)(a1 + 8);
    if (v27)
      v28 = *v27;
    else
      v28 = 0;
    if (os_log_type_enabled(v28, OS_LOG_TYPE_ERROR))
    {
      if ((a3[23] & 0x80u) == 0)
        v29 = (uint64_t *)a3;
      else
        v29 = *(uint64_t **)a3;
      *(_DWORD *)buf = 136315906;
      *(_QWORD *)&buf[4] = "NeuralNetImpl.cpp";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 1181;
      v35 = 1024;
      v36 = -66743;
      v37 = 2080;
      v38 = v29;
      _os_log_impl(&dword_1B5ED0000, v28, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (%d): \"Input (%s) not available.\"", buf, 0x22u);
    }
    exception = __cxa_allocate_exception(0x10uLL);
    *(_QWORD *)exception = &off_1E69EE218;
    exception[2] = -66743;
  }
  v8 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>>>::find<std::string>(v33, a3);
  if (!v8)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  v9 = v8;
  v10 = (E5RT::IOPort *)*((_QWORD *)v8 + 5);
  v11 = *((_QWORD *)v9 + 6);
  *(_QWORD *)buf = v10;
  *(_QWORD *)&buf[8] = v11;
  if (v11)
  {
    v12 = (unint64_t *)(v11 + 8);
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
  }
  E5RT::IOPort::GetMemoryObject(v10);
  v14 = (E5RT::BufferObject *)E5RT::MemoryObject::TryAsBuffer(v31);
  DataSpan = E5RT::BufferObject::GetDataSpan(v14);
  if (v16 >= 4)
    v17 = (void *)DataSpan;
  else
    v17 = 0;
  if (v32)
  {
    p_shared_owners = (unint64_t *)&v32->__shared_owners_;
    do
      v19 = __ldaxr(p_shared_owners);
    while (__stlxr(v19 - 1, p_shared_owners));
    if (!v19)
    {
      ((void (*)())v32->__on_zero_shared)();
      std::__shared_weak_count::__release_weak(v32);
    }
  }
  v20 = *(const void **)a4;
  v21 = *(_QWORD *)(a4 + 8);
  v22 = v21 - *(_QWORD *)a4;
  if (v21 != *(_QWORD *)a4)
    memmove(v17, v20, v22);
  v23 = *(std::__shared_weak_count **)&buf[8];
  if (*(_QWORD *)&buf[8])
  {
    v24 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
    do
      v25 = __ldaxr(v24);
    while (__stlxr(v25 - 1, v24));
    if (!v25)
    {
      ((void (*)(std::__shared_weak_count *, const void *, size_t))v23->__on_zero_shared)(v23, v20, v22);
      std::__shared_weak_count::__release_weak(v23);
    }
  }
  return std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>>>::~__hash_table((uint64_t)v33);
}

void sub_1B63837E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  uint64_t v5;
  va_list va;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  va_list va1;

  va_start(va1, a4);
  va_start(va, a4);
  v5 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  std::shared_ptr<vp::services::Telephony_Utility>::~shared_ptr[abi:ne180100]((uint64_t)va1);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>>>::~__hash_table((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t NeuralNetEspressoV2::GetOutput<float>(void **a1, uint64_t a2, E5RT::ExecutionStreamOperation *this, unsigned __int8 *a4)
{
  uint64_t OutputPorts;
  unsigned __int8 *v8;
  unsigned __int8 *v9;
  E5RT::IOPort *v10;
  uint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  E5RT::BufferObject *v14;
  uint64_t DataSpan;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  const void *v20;
  unint64_t *p_shared_owners;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  NSObject **v27;
  NSObject *v28;
  uint64_t *v29;
  _DWORD *exception;
  E5RT::MemoryObject *v31;
  std::__shared_weak_count *v32;
  _QWORD v33[5];
  _BYTE buf[18];
  __int16 v35;
  int v36;
  __int16 v37;
  uint64_t *v38;
  uint64_t v39;

  v39 = *MEMORY[0x1E0C80C00];
  OutputPorts = E5RT::ExecutionStreamOperation::GetOutputPorts(this);
  std::unordered_map<std::string,std::shared_ptr<E5RT::IOPort>>::unordered_map((uint64_t)v33, OutputPorts);
  if (!std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>>>::find<std::string>(v33, a4))
  {
    v27 = *(NSObject ***)(a2 + 8);
    if (v27)
      v28 = *v27;
    else
      v28 = 0;
    if (os_log_type_enabled(v28, OS_LOG_TYPE_ERROR))
    {
      if ((a4[23] & 0x80u) == 0)
        v29 = (uint64_t *)a4;
      else
        v29 = *(uint64_t **)a4;
      *(_DWORD *)buf = 136315906;
      *(_QWORD *)&buf[4] = "NeuralNetImpl.cpp";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 1194;
      v35 = 1024;
      v36 = -66743;
      v37 = 2080;
      v38 = v29;
      _os_log_impl(&dword_1B5ED0000, v28, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (%d): \"Output (%s) not available.\"", buf, 0x22u);
    }
    exception = __cxa_allocate_exception(0x10uLL);
    *(_QWORD *)exception = &off_1E69EE218;
    exception[2] = -66743;
  }
  v8 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>>>::find<std::string>(v33, a4);
  if (!v8)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  v9 = v8;
  v10 = (E5RT::IOPort *)*((_QWORD *)v8 + 5);
  v11 = *((_QWORD *)v9 + 6);
  *(_QWORD *)buf = v10;
  *(_QWORD *)&buf[8] = v11;
  if (v11)
  {
    v12 = (unint64_t *)(v11 + 8);
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
  }
  E5RT::IOPort::GetMemoryObject(v10);
  v14 = (E5RT::BufferObject *)E5RT::MemoryObject::TryAsBuffer(v31);
  DataSpan = E5RT::BufferObject::GetDataSpan(v14);
  v16 = DataSpan;
  v18 = v17;
  v19 = v17 >> 2;
  if (v17 >= 4)
    v20 = (const void *)DataSpan;
  else
    v20 = 0;
  if (v32)
  {
    p_shared_owners = (unint64_t *)&v32->__shared_owners_;
    do
      v22 = __ldaxr(p_shared_owners);
    while (__stlxr(v22 - 1, p_shared_owners));
    if (!v22)
    {
      ((void (*)())v32->__on_zero_shared)();
      std::__shared_weak_count::__release_weak(v32);
    }
  }
  std::vector<float>::vector(a1, v19);
  if (v18 >= 4)
    memmove(*a1, v20, (size_t)v20 + 4 * v19 - v16);
  v23 = *(std::__shared_weak_count **)&buf[8];
  if (*(_QWORD *)&buf[8])
  {
    v24 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
    do
      v25 = __ldaxr(v24);
    while (__stlxr(v25 - 1, v24));
    if (!v25)
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
    }
  }
  return std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>>>::~__hash_table((uint64_t)v33);
}

void sub_1B6383A8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  uint64_t v5;
  va_list va;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  va_list va1;

  va_start(va1, a4);
  va_start(va, a4);
  v5 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  std::shared_ptr<vp::services::Telephony_Utility>::~shared_ptr[abi:ne180100]((uint64_t)va1);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>>>::~__hash_table((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::unordered_map<std::string,std::shared_ptr<E5RT::IOPort>>::unordered_map(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  unsigned __int8 *v5;
  _QWORD *v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint8x8_t v10;
  unint64_t v11;
  unsigned __int8 **v12;
  unsigned __int8 *i;
  unint64_t v14;
  _QWORD *v15;
  std::string *v16;
  __int128 v17;
  uint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  float v21;
  float v22;
  _BOOL8 v23;
  unint64_t v24;
  unint64_t v25;
  size_t v26;
  uint64_t v27;
  _QWORD *v28;
  unint64_t v29;
  _QWORD *v31;
  float *v32;
  _QWORD v33[2];
  char v34;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  v32 = (float *)(a1 + 32);
  std::__hash_table<std::__hash_value_type<unsigned int,std::tuple<__CFString const*,float,float,float,AudioUnitParameterUnit,unsigned int>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::tuple<__CFString const*,float,float,float,AudioUnitParameterUnit,unsigned int>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::tuple<__CFString const*,float,float,float,AudioUnitParameterUnit,unsigned int>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::tuple<__CFString const*,float,float,float,AudioUnitParameterUnit,unsigned int>>>>::__rehash<true>(a1, *(_QWORD *)(a2 + 8));
  v5 = *(unsigned __int8 **)(a2 + 16);
  if (v5)
  {
    v6 = (_QWORD *)(a1 + 24);
    v31 = (_QWORD *)(a1 + 16);
    do
    {
      v7 = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)(v5 + 16));
      v8 = v7;
      v9 = *(_QWORD *)(a1 + 8);
      if (v9)
      {
        v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
        v10.i16[0] = vaddlv_u8(v10);
        v11 = v10.u32[0];
        if (v10.u32[0] > 1uLL)
        {
          v2 = v7;
          if (v7 >= v9)
            v2 = v7 % v9;
        }
        else
        {
          v2 = (v9 - 1) & v7;
        }
        v12 = *(unsigned __int8 ***)(*(_QWORD *)a1 + 8 * v2);
        if (v12)
        {
          for (i = *v12; i; i = *(unsigned __int8 **)i)
          {
            v14 = *((_QWORD *)i + 1);
            if (v14 == v8)
            {
              if ((std::equal_to<std::string>::operator()[abi:ne180100]((uint64_t)v32, i + 16, v5 + 16) & 1) != 0)
                goto LABEL_47;
            }
            else
            {
              if (v11 > 1)
              {
                if (v14 >= v9)
                  v14 %= v9;
              }
              else
              {
                v14 &= v9 - 1;
              }
              if (v14 != v2)
                break;
            }
          }
        }
      }
      v15 = operator new(0x38uLL);
      v33[0] = v15;
      v33[1] = a1 + 16;
      v34 = 0;
      *v15 = 0;
      v15[1] = v8;
      v16 = (std::string *)(v15 + 2);
      if ((char)v5[39] < 0)
      {
        std::string::__init_copy_ctor_external(v16, *((const std::string::value_type **)v5 + 2), *((_QWORD *)v5 + 3));
      }
      else
      {
        v17 = *((_OWORD *)v5 + 1);
        v15[4] = *((_QWORD *)v5 + 4);
        *(_OWORD *)&v16->__r_.__value_.__l.__data_ = v17;
      }
      v15[5] = *((_QWORD *)v5 + 5);
      v18 = *((_QWORD *)v5 + 6);
      v15[6] = v18;
      if (v18)
      {
        v19 = (unint64_t *)(v18 + 8);
        do
          v20 = __ldxr(v19);
        while (__stxr(v20 + 1, v19));
      }
      v34 = 1;
      v21 = (float)(unint64_t)(*v6 + 1);
      v22 = *v32;
      if (!v9 || (float)(v22 * (float)v9) < v21)
      {
        v23 = (v9 & (v9 - 1)) != 0;
        if (v9 < 3)
          v23 = 1;
        v24 = v23 | (2 * v9);
        v25 = vcvtps_u32_f32(v21 / v22);
        if (v24 <= v25)
          v26 = v25;
        else
          v26 = v24;
        std::__hash_table<std::__hash_value_type<unsigned int,std::tuple<__CFString const*,float,float,float,AudioUnitParameterUnit,unsigned int>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::tuple<__CFString const*,float,float,float,AudioUnitParameterUnit,unsigned int>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::tuple<__CFString const*,float,float,float,AudioUnitParameterUnit,unsigned int>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::tuple<__CFString const*,float,float,float,AudioUnitParameterUnit,unsigned int>>>>::__rehash<true>(a1, v26);
        v9 = *(_QWORD *)(a1 + 8);
        if ((v9 & (v9 - 1)) != 0)
        {
          if (v8 >= v9)
            v2 = v8 % v9;
          else
            v2 = v8;
        }
        else
        {
          v2 = (v9 - 1) & v8;
        }
      }
      v27 = *(_QWORD *)a1;
      v28 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v2);
      if (v28)
      {
        *v15 = *v28;
      }
      else
      {
        *v15 = *v31;
        *v31 = v15;
        *(_QWORD *)(v27 + 8 * v2) = v31;
        if (!*v15)
          goto LABEL_46;
        v29 = *(_QWORD *)(*v15 + 8);
        if ((v9 & (v9 - 1)) != 0)
        {
          if (v29 >= v9)
            v29 %= v9;
        }
        else
        {
          v29 &= v9 - 1;
        }
        v28 = (_QWORD *)(*(_QWORD *)a1 + 8 * v29);
      }
      *v28 = v15;
LABEL_46:
      v33[0] = 0;
      ++*v6;
      std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,void *>>>>::reset[abi:ne180100]((uint64_t)v33);
LABEL_47:
      v5 = *(unsigned __int8 **)v5;
    }
    while (v5);
  }
  return a1;
}

void sub_1B6383D98(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>>>::find<std::string>(_QWORD *a1, unsigned __int8 *a2)
{
  unint64_t v4;
  int8x8_t v5;
  unint64_t v6;
  uint8x8_t v7;
  unint64_t v8;
  unint64_t v9;
  unsigned __int8 **v10;
  unsigned __int8 *v11;
  uint64_t v12;
  unint64_t v13;

  v4 = std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)(a1 + 3), (uint64_t)a2);
  v5 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v5)
    return 0;
  v6 = v4;
  v7 = (uint8x8_t)vcnt_s8(v5);
  v7.i16[0] = vaddlv_u8(v7);
  v8 = v7.u32[0];
  if (v7.u32[0] > 1uLL)
  {
    v9 = v4;
    if (v4 >= *(_QWORD *)&v5)
      v9 = v4 % *(_QWORD *)&v5;
  }
  else
  {
    v9 = (*(_QWORD *)&v5 - 1) & v4;
  }
  v10 = *(unsigned __int8 ***)(*a1 + 8 * v9);
  if (!v10)
    return 0;
  v11 = *v10;
  if (*v10)
  {
    v12 = (uint64_t)(a1 + 4);
    do
    {
      v13 = *((_QWORD *)v11 + 1);
      if (v13 == v6)
      {
        if ((std::equal_to<std::string>::operator()[abi:ne180100](v12, v11 + 16, a2) & 1) != 0)
          return v11;
      }
      else
      {
        if (v8 > 1)
        {
          if (v13 >= *(_QWORD *)&v5)
            v13 %= *(_QWORD *)&v5;
        }
        else
        {
          v13 &= *(_QWORD *)&v5 - 1;
        }
        if (v13 != v9)
          return 0;
      }
      v11 = *(unsigned __int8 **)v11;
    }
    while (v11);
  }
  return v11;
}

uint64_t std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>>>::~__hash_table(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;

  v2 = *(_QWORD **)(a1 + 16);
  if (v2)
  {
    do
    {
      v3 = (_QWORD *)*v2;
      std::__destroy_at[abi:ne180100]<vp::vx::io::Object::Log_Context,0>((uint64_t)(v2 + 2));
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
  v4 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v4)
    operator delete(v4);
  return a1;
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,void *>>>>::reset[abi:ne180100](uint64_t a1)
{
  void *v1;

  v1 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v1)
  {
    if (*(_BYTE *)(a1 + 16))
      std::__destroy_at[abi:ne180100]<vp::vx::io::Object::Log_Context,0>((uint64_t)v1 + 16);
    operator delete(v1);
  }
}

void MIL2BNNS::~MIL2BNNS(MIL2BNNS *this)
{
  MIL2BNNS::~MIL2BNNS(this);
  JUMPOUT(0x1BCC95CECLL);
}

{
  void *v2;
  NSObject **v3;
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t i;
  void *v8;
  const void *v9;
  void *v10;
  _BYTE v11[12];
  __int16 v12;
  int v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)this = &off_1E69D6E68;
  v2 = (void *)*((_QWORD *)this + 18);
  if (v2 && !*((_QWORD *)this + 20))
  {
    if (*((_BYTE *)this + 224))
      munmap(v2, *((_QWORD *)this + 19));
    else
      free(v2);
  }
  if (*((_QWORD *)this + 39))
  {
    BNNSGraphContextDestroy_v2();
    *((_QWORD *)this + 39) = 0;
    *((_QWORD *)this + 40) = 0;
  }
  v3 = (NSObject **)*((_QWORD *)this + 1);
  if (v3)
  {
    v4 = *v3;
    if (!*v3)
      goto LABEL_14;
  }
  else
  {
    v4 = MEMORY[0x1E0C81028];
  }
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)v11 = 136315394;
    *(_QWORD *)&v11[4] = "NeuralNetImpl.cpp";
    v12 = 1024;
    v13 = 1749;
    _os_log_impl(&dword_1B5ED0000, v4, OS_LOG_TYPE_DEFAULT, "%25s:%-5d MIL2BNNS Destructing.", v11, 0x12u);
  }
LABEL_14:
  *(_QWORD *)v11 = (char *)this + 280;
  std::vector<MIL2BNNS::GraphTensor>::__destroy_vector::operator()[abi:ne180100]((void ***)v11);
  v5 = *((_QWORD *)this + 31);
  *((_QWORD *)this + 31) = 0;
  if (v5)
    MEMORY[0x1BCC95CC8](v5, 0x1000C8077774924);
  v6 = *((_QWORD *)this + 30);
  *((_QWORD *)this + 30) = 0;
  if (v6)
    MEMORY[0x1BCC95CC8](v6, 0x1000C8077774924);
  for (i = 0; i != -48; i -= 24)
  {
    v8 = *(void **)((char *)this + i + 192);
    if (v8)
    {
      *(_QWORD *)((char *)this + i + 200) = v8;
      operator delete(v8);
    }
  }
  v9 = (const void *)*((_QWORD *)this + 20);
  if (v9)
    CFRelease(v9);
  v10 = (void *)*((_QWORD *)this + 15);
  if (v10)
  {
    *((_QWORD *)this + 16) = v10;
    operator delete(v10);
  }
  if (*((char *)this + 111) < 0)
    operator delete(*((void **)this + 11));
  if (*((char *)this + 87) < 0)
    operator delete(*((void **)this + 8));
  if (*((char *)this + 63) < 0)
    operator delete(*((void **)this + 5));
  *(_QWORD *)this = off_1E69D6BC8;
  std::shared_ptr<vp::services::Telephony_Utility>::~shared_ptr[abi:ne180100]((uint64_t)this + 24);
}

uint64_t MIL2BNNS::getNumLayers(MIL2BNNS *this)
{
  return 0;
}

uint64_t MIL2BNNS::getInputSize(MIL2BNNS *this)
{
  return **((_QWORD **)this + 33);
}

uint64_t MIL2BNNS::getOutputSize(MIL2BNNS *this)
{
  return **((_QWORD **)this + 38);
}

uint64_t MIL2BNNS::getOutput(MIL2BNNS *this)
{
  return (uint64_t)this + 120;
}

void MIL2BNNS::cleanup(MIL2BNNS *this)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t ArgumentPosition;
  void *v6;

  bzero(*((void **)this + 31), *((_QWORD *)this + 32));
  if (*((_DWORD *)this + 28) == 2)
  {
    v2 = *((_QWORD *)this + 35);
    v3 = *((_QWORD *)this + 36);
    if (v2 != v3)
    {
      v4 = (_QWORD *)((char *)this + 24 * ((*((_DWORD *)this + 54) & 1) == 0) + 168);
      do
      {
        if (!*(_QWORD *)(v2 + 40))
        {
          ArgumentPosition = BNNSGraphGetArgumentPosition();
          v6 = *(void **)(*v4 + 16 * ArgumentPosition);
          if (v6)
            bzero(v6, *(_QWORD *)(*v4 + 16 * ArgumentPosition + 8));
        }
        v2 += 48;
      }
      while (v2 != v3);
    }
  }
}

uint64_t MIL2BNNS::setEmbedding(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  const void *v4;
  int64_t v6;
  uint64_t v8;
  uint64_t message;
  caulk::concurrent::message *v10;

  v3 = *(_QWORD *)(a1 + 272);
  if (v3 && (v4 = *(const void **)a2, v6 = *(_QWORD *)(a2 + 8) - (_QWORD)v4, *(_QWORD *)v3 == v6 >> 2))
  {
    memcpy(*(void **)(v3 + 40), v4, v6);
    return 0;
  }
  else
  {
    v8 = _os_log_pack_size();
    message = caulk::deferred_logger::create_message(*(caulk::deferred_logger **)(a1 + 24), v8 + 88, 16);
    if (message)
    {
      v10 = (caulk::concurrent::message *)message;
      *(_WORD *)_os_log_pack_fill() = 0;
      caulk::concurrent::messenger::enqueue(*(caulk::concurrent::messenger **)(*(_QWORD *)(a1 + 24) + 16), v10);
    }
    return 4294956433;
  }
}

uint64_t MIL2BNNS::setEmbedding(MIL2BNNS *this, float a2)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t message;
  caulk::concurrent::message *v7;
  float __A;

  __A = a2;
  v3 = *((_QWORD *)this + 34);
  if (v3 && *(_QWORD *)v3 == 1)
  {
    vDSP_vfill(&__A, *(float **)(v3 + 40), 1, 1uLL);
    return 0;
  }
  else
  {
    v5 = _os_log_pack_size();
    message = caulk::deferred_logger::create_message(*((caulk::deferred_logger **)this + 3), v5 + 88, 16);
    if (message)
    {
      v7 = (caulk::concurrent::message *)message;
      *(_WORD *)_os_log_pack_fill() = 0;
      caulk::concurrent::messenger::enqueue(*(caulk::concurrent::messenger **)(*((_QWORD *)this + 3) + 16), v7);
    }
    return 4294956433;
  }
}

_QWORD *MIL2BNNS::process(_QWORD *a1, uint64_t a2)
{
  _QWORD *v2;
  void *v3;

  v2 = a1;
  memcpy(*(void **)(a1[33] + 40), *(const void **)a2, *(_QWORD *)(a2 + 8) - *(_QWORD *)a2);
  ++v2[27];
  BNNSGraphContextExecute_v2();
  v3 = (void *)v2[15];
  v2 += 15;
  memcpy(v3, *(const void **)(v2[23] + 40), *(_QWORD *)(v2[23] + 8));
  return v2;
}

void sub_1B63845B4(_Unwind_Exception *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  _Unwind_Resume(a1);
}

void std::vector<MIL2BNNS::GraphTensor>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  void **v2;
  void **v4;
  void *v5;

  v1 = *a1;
  v2 = (void **)**a1;
  if (v2)
  {
    v4 = (void **)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        if (*((char *)v4 - 9) < 0)
          operator delete(*(v4 - 4));
        v4 -= 6;
      }
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t NeuralNetImpl::NeuralNetImpl(uint64_t a1, caulk::deferred_logger **a2)
{
  int AppIntegerValue;
  int v4;
  NSObject **v5;
  NSObject *v6;
  int v8;
  const char *v9;
  __int16 v10;
  int v11;
  __int16 v12;
  int v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)a1 = off_1E69D6BC8;
  *(_QWORD *)(a1 + 8) = a2;
  *(_DWORD *)(a1 + 16) = 0;
  caulk::deferred_logger::create_v(*a2, a2);
  LOBYTE(v8) = 0;
  AppIntegerValue = CACFPreferencesGetAppIntegerValue(CFSTR("neuralnetutility_detailed_logging"), CFSTR("com.apple.coreaudio"), (BOOL *)&v8);
  if ((_BYTE)v8)
    v4 = AppIntegerValue;
  else
    v4 = 0;
  *(_DWORD *)(a1 + 16) = v4;
  v5 = *(NSObject ***)(a1 + 8);
  if (v5)
  {
    v6 = *v5;
    if (!*v5)
      return a1;
  }
  else
  {
    v6 = MEMORY[0x1E0C81028];
  }
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
  {
    v8 = 136315650;
    v9 = "NeuralNetImpl.cpp";
    v10 = 1024;
    v11 = 82;
    v12 = 1024;
    v13 = v4;
    _os_log_impl(&dword_1B5ED0000, v6, OS_LOG_TYPE_DEBUG, "%25s:%-5d Detailed logging set to %d.", (uint8_t *)&v8, 0x18u);
  }
  return a1;
}

void sub_1B6384764(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::shared_ptr<vp::services::Telephony_Utility>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void std::vector<signed char>::__append(_QWORD *a1, unint64_t a2, _BYTE *a3)
{
  unint64_t v4;
  uint64_t v6;
  _BYTE *v7;
  _BYTE *v8;
  unint64_t v9;
  unint64_t v10;
  size_t v11;
  void *v12;
  _BYTE *v13;
  char *v14;
  char *v15;
  _BYTE *v16;
  _BYTE *v17;
  char v18;

  v4 = a2;
  v7 = (_BYTE *)a1[1];
  v6 = a1[2];
  if (v6 - (uint64_t)v7 >= a2)
  {
    if (a2)
    {
      v13 = &v7[a2];
      do
      {
        *v7++ = *a3;
        --v4;
      }
      while (v4);
      v7 = v13;
    }
    a1[1] = v7;
  }
  else
  {
    v8 = &v7[-*a1];
    v9 = (unint64_t)&v8[a2];
    if ((uint64_t)&v8[a2] < 0)
      std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
    v10 = v6 - *a1;
    if (2 * v10 > v9)
      v9 = 2 * v10;
    if (v10 >= 0x3FFFFFFFFFFFFFFFLL)
      v11 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v11 = v9;
    if (v11)
      v12 = operator new(v11);
    else
      v12 = 0;
    v14 = &v8[(_QWORD)v12];
    v15 = &v8[(_QWORD)v12 + v4];
    v16 = &v8[(_QWORD)v12];
    do
    {
      *v16++ = *a3;
      --v4;
    }
    while (v4);
    v17 = (_BYTE *)*a1;
    if (v7 != (_BYTE *)*a1)
    {
      do
      {
        v18 = *--v7;
        *--v14 = v18;
      }
      while (v7 != v17);
      v7 = (_BYTE *)*a1;
    }
    *a1 = v14;
    a1[1] = v15;
    a1[2] = (char *)v12 + v11;
    if (v7)
      operator delete(v7);
  }
}

void std::vector<short>::resize(char **a1, unint64_t a2, _WORD *a3)
{
  char *v5;
  char *v6;
  unint64_t v7;
  char *v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  char *v18;
  char *v19;
  char *v20;
  char *i;
  __int16 v22;
  char *v23;
  uint64_t v24;

  v6 = *a1;
  v5 = a1[1];
  v7 = (v5 - *a1) >> 1;
  if (a2 <= v7)
  {
    if (a2 < v7)
      a1[1] = &v6[2 * a2];
  }
  else
  {
    v9 = a1[2];
    if (a2 - v7 <= (v9 - v5) >> 1)
    {
      v23 = &v5[2 * (a2 - v7)];
      v24 = 2 * a2 - 2 * v7;
      do
      {
        *(_WORD *)v5 = *a3;
        v5 += 2;
        v24 -= 2;
      }
      while (v24);
      a1[1] = v23;
    }
    else
    {
      if ((a2 & 0x8000000000000000) != 0)
        std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
      v10 = v9 - v6;
      if (v9 - v6 <= a2)
        v11 = a2;
      else
        v11 = v9 - v6;
      if (v10 >= 0x7FFFFFFFFFFFFFFELL)
        v12 = 0x7FFFFFFFFFFFFFFFLL;
      else
        v12 = v11;
      v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<short>>(v12);
      v15 = &v13[2 * v7];
      v16 = &v13[2 * a2];
      v17 = 2 * a2 - 2 * v7;
      v18 = v15;
      do
      {
        *(_WORD *)v18 = *a3;
        v18 += 2;
        v17 -= 2;
      }
      while (v17);
      v19 = &v13[2 * v14];
      v20 = *a1;
      for (i = a1[1]; i != v20; i -= 2)
      {
        v22 = *((_WORD *)i - 1);
        *((_WORD *)v15 - 1) = v22;
        v15 -= 2;
      }
      *a1 = v15;
      a1[1] = v16;
      a1[2] = v19;
      if (v20)
        operator delete(v20);
    }
  }
}

void std::vector<int>::resize(std::vector<int> *this, std::vector<int>::size_type __sz, std::vector<int>::const_reference __x)
{
  std::vector<int>::pointer end;
  std::vector<int>::pointer begin;
  std::vector<int>::size_type v7;
  int *value;
  unint64_t v10;
  std::vector<int>::size_type v11;
  unint64_t v12;
  char *v13;
  uint64_t v14;
  int *v15;
  int *v16;
  std::vector<int>::size_type v17;
  int *v18;
  int *v19;
  std::vector<int>::pointer v20;
  std::vector<int>::pointer i;
  int v22;
  int *v23;
  std::vector<int>::size_type v24;

  begin = this->__begin_;
  end = this->__end_;
  v7 = end - this->__begin_;
  if (__sz <= v7)
  {
    if (__sz < v7)
      this->__end_ = &begin[__sz];
  }
  else
  {
    value = this->__end_cap_.__value_;
    if (__sz - v7 <= value - end)
    {
      v23 = &end[__sz - v7];
      v24 = 4 * __sz - 4 * v7;
      do
      {
        *end++ = *__x;
        v24 -= 4;
      }
      while (v24);
      this->__end_ = v23;
    }
    else
    {
      if (__sz >> 62)
        std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
      v10 = (char *)value - (char *)begin;
      v11 = ((char *)value - (char *)begin) >> 1;
      if (v11 <= __sz)
        v11 = __sz;
      if (v10 >= 0x7FFFFFFFFFFFFFFCLL)
        v12 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v12 = v11;
      v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(v12);
      v15 = (int *)&v13[4 * v7];
      v16 = (int *)&v13[4 * __sz];
      v17 = 4 * __sz - 4 * v7;
      v18 = v15;
      do
      {
        *v18++ = *__x;
        v17 -= 4;
      }
      while (v17);
      v19 = (int *)&v13[4 * v14];
      v20 = this->__begin_;
      for (i = this->__end_; i != v20; --i)
      {
        v22 = *(i - 1);
        *--v15 = v22;
      }
      this->__begin_ = v15;
      this->__end_ = v16;
      this->__end_cap_.__value_ = v19;
      if (v20)
        operator delete(v20);
    }
  }
}

char *std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>(char *result, char *__src, uint64_t a3, unint64_t a4)
{
  _QWORD *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  unint64_t v11;
  void **v12;
  char *v13;
  _BYTE *v14;
  unint64_t v15;
  char *v16;
  size_t v17;
  void *v18;
  char *v19;

  v7 = result;
  v8 = *((_QWORD *)result + 2);
  v9 = *(char **)result;
  if (a4 > (v8 - *(_QWORD *)result) >> 2)
  {
    if (v9)
    {
      *((_QWORD *)result + 1) = v9;
      operator delete(v9);
      v8 = 0;
      *v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if (a4 >> 62)
      std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
    v10 = v8 >> 1;
    if (v8 >> 1 <= a4)
      v10 = a4;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFFCLL)
      v11 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v11 = v10;
    result = std::vector<int>::__vallocate[abi:ne180100](v7, v11);
    v13 = (char *)v7[1];
    v12 = (void **)(v7 + 1);
    v9 = v13;
LABEL_16:
    v17 = a3 - (_QWORD)__src;
    if (v17)
    {
      v18 = v9;
      v19 = __src;
      goto LABEL_18;
    }
    goto LABEL_19;
  }
  v12 = (void **)(result + 8);
  v14 = (_BYTE *)*((_QWORD *)result + 1);
  v15 = (v14 - v9) >> 2;
  if (v15 >= a4)
    goto LABEL_16;
  v16 = &__src[4 * v15];
  if (v14 != v9)
  {
    result = (char *)memmove(*(void **)result, __src, v14 - v9);
    v9 = (char *)*v12;
  }
  v17 = a3 - (_QWORD)v16;
  if (v17)
  {
    v18 = v9;
    v19 = v16;
LABEL_18:
    result = (char *)memmove(v18, v19, v17);
  }
LABEL_19:
  *v12 = &v9[v17];
  return result;
}

uint64_t audiodsp::espresso::v1::network::bind_buffer()
{
  uint64_t result;
  uint64_t v1;
  void *exception;

  result = espresso_network_bind_buffer();
  if ((_DWORD)result)
  {
    v1 = result;
    exception = __cxa_allocate_exception(0x20uLL);
    MEMORY[0x1BCC95758](exception, v1, &audiodsp::espresso::v1::error_category(void)::instance);
  }
  return result;
}

void sub_1B6384C24(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

std::string *std::pair<std::string,std::string>::pair[abi:ne180100]<true,0>(std::string *this, __int128 *a2, __int128 *a3)
{
  __int128 v5;
  std::string *v6;
  __int128 v7;

  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v5 = *a2;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v5;
  }
  v6 = this + 1;
  if (*((char *)a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v6, *(const std::string::value_type **)a3, *((_QWORD *)a3 + 1));
  }
  else
  {
    v7 = *a3;
    this[1].__r_.__value_.__r.__words[2] = *((_QWORD *)a3 + 2);
    *(_OWORD *)&v6->__r_.__value_.__l.__data_ = v7;
  }
  return this;
}

void sub_1B6384CB0(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

uint64_t audiodsp::espresso::v1::plan::plan(std::shared_ptr<void>,int)::{lambda(void *)#1}::operator()()
{
  uint64_t result;

  result = espresso_plan_destroy();
  if ((_DWORD)result)
    __assert_rtn("operator()", "plan.h", 61, "status == ESPRESSO_STATUS_SUCCESS");
  return result;
}

void std::__shared_ptr_pointer<void *,audiodsp::espresso::v1::plan::plan(std::shared_ptr<void>,int)::{lambda(void *)#1},std::allocator<void>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1BCC95CECLL);
}

uint64_t std::__shared_ptr_pointer<void *,audiodsp::espresso::v1::plan::plan(std::shared_ptr<void>,int)::{lambda(void *)#1},std::allocator<void>>::__on_zero_shared()
{
  uint64_t result;

  result = espresso_plan_destroy();
  if ((_DWORD)result)
    __assert_rtn("operator()", "plan.h", 61, "status == ESPRESSO_STATUS_SUCCESS");
  return result;
}

void std::__shared_ptr_pointer<void *,audiodsp::espresso::v1::context::context(espresso_engine_t,int)::{lambda(void *)#1},std::allocator<void>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1BCC95CECLL);
}

uint64_t std::__shared_ptr_pointer<void *,audiodsp::espresso::v1::context::context(espresso_engine_t,int)::{lambda(void *)#1},std::allocator<void>>::__on_zero_shared()
{
  return espresso_context_destroy();
}

void NeuralNetEspressoV2::AllocateAndBindMemoryToPort(NeuralNetEspressoV2 *this, E5RT::IOPort *a2)
{
  E5RT::TensorDescriptor *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count_vtbl *v4;
  uint64_t (**v5)();
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  std::runtime_error *exception;
  std::runtime_error *v15;
  std::__shared_weak_count *v16;
  std::__shared_weak_count_vtbl *v17;
  std::__shared_weak_count *v18;
  E5RT::OperandDescriptor *v19;
  std::__shared_weak_count *v20;

  E5RT::IOPort::GetPortDescriptor(this);
  if (!v19)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Found a null pointer to a port descriptor.");
  }
  if (E5RT::OperandDescriptor::TryAsTensorDescriptor(v19))
  {
    v2 = (E5RT::TensorDescriptor *)E5RT::OperandDescriptor::TensorDescriptor(v19);
    E5RT::TensorDescriptor::GetSize(v2);
    E5RT::BufferObject::AllocMemory();
    if (v17)
    {
      v3 = (std::__shared_weak_count *)operator new();
      v4 = v17;
      v5 = &off_1E69D6F38;
LABEL_8:
      v3->__vftable = (std::__shared_weak_count_vtbl *)v5;
      v3->__shared_owners_ = 0;
      v3->__shared_weak_owners_ = 0;
      v3[1].__vftable = v4;
      goto LABEL_10;
    }
  }
  else
  {
    if (!E5RT::OperandDescriptor::TryAsSurfaceDescriptor(v19))
    {
      v15 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v15, "Found an unsupported descriptor type.");
    }
    E5RT::OperandDescriptor::SurfaceDescriptor(v19);
    E5RT::SurfaceObject::AllocSurface();
    if (v17)
    {
      v3 = (std::__shared_weak_count *)operator new();
      v4 = v17;
      v5 = &off_1E69D6F70;
      goto LABEL_8;
    }
  }
  v3 = 0;
LABEL_10:
  v18 = v3;
  v16 = v3;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
  }
  E5RT::IOPort::BindMemoryObject();
  if (v16)
  {
    v8 = (unint64_t *)&v16->__shared_owners_;
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  if (v18)
  {
    v10 = (unint64_t *)&v18->__shared_owners_;
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
  if (v20)
  {
    v12 = (unint64_t *)&v20->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)())v20->__on_zero_shared)();
      std::__shared_weak_count::__release_weak(v20);
    }
  }
}

void sub_1B6384FDC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char a13)
{
  void *v13;
  uint64_t v14;

  __cxa_free_exception(v13);
  std::shared_ptr<vp::services::Telephony_Utility>::~shared_ptr[abi:ne180100]((uint64_t)&a13);
  std::shared_ptr<vp::services::Telephony_Utility>::~shared_ptr[abi:ne180100](v14 - 32);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_pointer<E5RT::SurfaceObject  *>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1BCC95CECLL);
}

uint64_t std::__shared_ptr_pointer<E5RT::SurfaceObject  *>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void std::__shared_ptr_pointer<E5RT::BufferObject  *>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1BCC95CECLL);
}

uint64_t std::__shared_ptr_pointer<E5RT::BufferObject  *>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void std::__shared_ptr_pointer<E5RT::ExecutionStreamOperation  *>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1BCC95CECLL);
}

uint64_t std::__shared_ptr_pointer<E5RT::ExecutionStreamOperation  *>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void MIL2BNNS::getCachedIRLocation(std::string *this, const __CFDictionary *a2, const __CFDictionary *a3)
{
  const __CFString *Value;
  const __CFString *v7;
  const __CFNumber *v8;
  const __CFNumber *v9;
  const __CFNumber *v10;
  const __CFNumber *v11;
  const __CFNumber *v12;
  const __CFNumber *v13;
  BOOL v14;
  NSObject **v15;
  NSObject *v16;
  char *v17;
  char *v18;
  uint64_t v19;
  std::string *v20;
  std::string::size_type size;
  NSObject **v22;
  NSObject *v23;
  const char *v24;
  NSObject *v25;
  os_log_type_t v26;
  NSObject **v27;
  NSObject *v28;
  size_t v29;
  uint8_t *v30;
  std::string *v31;
  std::string *v32;
  NSObject **v33;
  NSObject *v34;
  NSObject **v35;
  NSObject *v36;
  std::string *v37;
  __int128 v38;
  unsigned int v39;
  std::string *v40;
  std::string::size_type v41;
  std::string *v42;
  __int128 v43;
  std::string *v44;
  __int128 v45;
  unsigned int v46;
  std::string *v47;
  std::string::size_type v48;
  std::string *v49;
  __int128 v50;
  std::string *v51;
  __int128 v52;
  uint8_t *v53;
  std::string::size_type v54;
  NSObject **v55;
  NSObject *v56;
  std::string *v57;
  const char *v58;
  NSObject *v59;
  uint32_t v60;
  std::string *v61;
  std::string v62;
  std::string v63;
  std::string v64;
  std::string v65;
  std::string v66;
  std::string v67;
  std::string v68;
  std::string v69;
  const __CFNumber *v70;
  const __CFNumber *v71;
  const __CFNumber *v72;
  const __CFString *v73;
  uint8_t buf[40];
  uint64_t v75;

  v75 = *MEMORY[0x1E0C80C00];
  Value = (const __CFString *)CFDictionaryGetValue(a3, CFSTR("TaskID"));
  v7 = Value;
  if (Value)
    CFRetain(Value);
  v73 = v7;
  v8 = (const __CFNumber *)CFDictionaryGetValue(a3, CFSTR("TaskIteration"));
  v9 = v8;
  if (v8)
    CFRetain(v8);
  v72 = v9;
  v10 = (const __CFNumber *)CFDictionaryGetValue(a3, CFSTR("BlockSize"));
  v11 = v10;
  if (v10)
    CFRetain(v10);
  v71 = v11;
  v12 = (const __CFNumber *)CFDictionaryGetValue(a3, CFSTR("CacheIRFile"));
  v13 = v12;
  if (v12)
  {
    CFRetain(v12);
    v70 = v13;
    v14 = applesauce::CF::convert_to<BOOL,0>(v13);
  }
  else
  {
    v14 = 0;
    v70 = 0;
  }
  if (_xpc_runtime_is_app_sandboxed())
  {
    v15 = (NSObject **)*((_QWORD *)a2 + 1);
    if (v15)
    {
      v16 = *v15;
      if (!*v15)
        goto LABEL_27;
    }
    else
    {
      v16 = MEMORY[0x1E0C81028];
    }
    if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136315394;
      *(_QWORD *)&buf[4] = "NeuralNetImpl.cpp";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 1430;
      _os_log_impl(&dword_1B5ED0000, v16, OS_LOG_TYPE_DEFAULT, "%25s:%-5d app sandboxed: disable cache", buf, 0x12u);
    }
LABEL_27:
    v22 = (NSObject **)*((_QWORD *)a2 + 1);
    if (v22)
    {
      v23 = *v22;
      if (!*v22)
        goto LABEL_34;
    }
    else
    {
      v23 = MEMORY[0x1E0C81028];
    }
    if (os_log_type_enabled(v23, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 136315394;
      *(_QWORD *)&buf[4] = "NeuralNetImpl.cpp";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 1436;
      v24 = "%25s:%-5d CacheIRFile flag is disabled";
      v25 = v23;
      v26 = OS_LOG_TYPE_DEBUG;
LABEL_33:
      _os_log_impl(&dword_1B5ED0000, v25, v26, v24, buf, 0x12u);
      goto LABEL_34;
    }
    goto LABEL_34;
  }
  if (!v14)
    goto LABEL_27;
  if (!v7 || !v9 || !v11)
  {
    v27 = (NSObject **)*((_QWORD *)a2 + 1);
    if (v27)
    {
      v28 = *v27;
      if (!*v27)
        goto LABEL_34;
    }
    else
    {
      v28 = MEMORY[0x1E0C81028];
    }
    if (os_log_type_enabled(v28, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      *(_QWORD *)&buf[4] = "NeuralNetImpl.cpp";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 1440;
      v24 = "%25s:%-5d Missing TaskID, TaskIteration, BlockSize, or CacheIRFile in plist  --- can not generate cache file";
      v25 = v28;
      v26 = OS_LOG_TYPE_ERROR;
      goto LABEL_33;
    }
LABEL_34:
    this->__r_.__value_.__r.__words[0] = 0;
    this->__r_.__value_.__l.__size_ = 0;
    this->__r_.__value_.__r.__words[2] = 0;
    goto LABEL_35;
  }
  v17 = getenv("TMPDIR");
  if (v17)
    v18 = v17;
  else
    v18 = "";
  std::string::basic_string[abi:ne180100]<0>(&v69, v18);
  LOBYTE(v19) = *((_BYTE *)&v69.__r_.__value_.__s + 23);
  if (SHIBYTE(v69.__r_.__value_.__r.__words[2]) < 0)
  {
    size = v69.__r_.__value_.__l.__size_;
    if (v69.__r_.__value_.__l.__size_)
    {
      v20 = (std::string *)v69.__r_.__value_.__r.__words[0];
LABEL_52:
      if (v20->__r_.__value_.__s.__data_[size - 1] != 47)
      {
        if ((v69.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v29 = HIBYTE(v69.__r_.__value_.__r.__words[2]);
        else
          v29 = v69.__r_.__value_.__l.__size_;
        v30 = buf;
        std::string::basic_string[abi:ne180100]((uint64_t)buf, v29 + 1);
        if ((buf[23] & 0x80u) != 0)
          v30 = *(uint8_t **)buf;
        if (v29)
        {
          if ((v69.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v31 = &v69;
          else
            v31 = (std::string *)v69.__r_.__value_.__r.__words[0];
          memmove(v30, v31, v29);
        }
        *(_WORD *)&v30[v29] = 47;
        if (SHIBYTE(v69.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v69.__r_.__value_.__l.__data_);
        v69 = *(std::string *)buf;
        v19 = HIBYTE(*(_QWORD *)&buf[16]);
      }
      if ((v19 & 0x80u) == 0)
        v32 = &v69;
      else
        v32 = (std::string *)v69.__r_.__value_.__r.__words[0];
      if (access((const char *)v32, 6))
      {
        v33 = (NSObject **)*((_QWORD *)a2 + 1);
        if (v33)
        {
          v34 = *v33;
          if (!*v33)
            goto LABEL_128;
        }
        else
        {
          v34 = MEMORY[0x1E0C81028];
        }
        if (!os_log_type_enabled(v34, OS_LOG_TYPE_ERROR))
          goto LABEL_128;
        v57 = &v69;
        if ((v69.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          v57 = (std::string *)v69.__r_.__value_.__r.__words[0];
        *(_DWORD *)buf = 136315650;
        *(_QWORD *)&buf[4] = "NeuralNetImpl.cpp";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 1457;
        *(_WORD *)&buf[18] = 2080;
        *(_QWORD *)&buf[20] = v57;
        v58 = "%25s:%-5d No RW permission to temp path: %s";
        v59 = v34;
        v60 = 28;
LABEL_121:
        _os_log_impl(&dword_1B5ED0000, v59, OS_LOG_TYPE_ERROR, v58, buf, v60);
        goto LABEL_128;
      }
      applesauce::CF::convert_to<std::string,0>(v7, (uint64_t)&v64);
      v37 = std::string::append(&v64, "_", 1uLL);
      v38 = *(_OWORD *)&v37->__r_.__value_.__l.__data_;
      v65.__r_.__value_.__r.__words[2] = v37->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v65.__r_.__value_.__l.__data_ = v38;
      v37->__r_.__value_.__l.__size_ = 0;
      v37->__r_.__value_.__r.__words[2] = 0;
      v37->__r_.__value_.__r.__words[0] = 0;
      v39 = applesauce::CF::convert_to<unsigned int,0>(v9);
      std::to_string(&v63, v39);
      if ((v63.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v40 = &v63;
      else
        v40 = (std::string *)v63.__r_.__value_.__r.__words[0];
      if ((v63.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v41 = HIBYTE(v63.__r_.__value_.__r.__words[2]);
      else
        v41 = v63.__r_.__value_.__l.__size_;
      v42 = std::string::append(&v65, (const std::string::value_type *)v40, v41);
      v43 = *(_OWORD *)&v42->__r_.__value_.__l.__data_;
      v66.__r_.__value_.__r.__words[2] = v42->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v66.__r_.__value_.__l.__data_ = v43;
      v42->__r_.__value_.__l.__size_ = 0;
      v42->__r_.__value_.__r.__words[2] = 0;
      v42->__r_.__value_.__r.__words[0] = 0;
      v44 = std::string::append(&v66, "_", 1uLL);
      v45 = *(_OWORD *)&v44->__r_.__value_.__l.__data_;
      v67.__r_.__value_.__r.__words[2] = v44->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v67.__r_.__value_.__l.__data_ = v45;
      v44->__r_.__value_.__l.__size_ = 0;
      v44->__r_.__value_.__r.__words[2] = 0;
      v44->__r_.__value_.__r.__words[0] = 0;
      v46 = applesauce::CF::convert_to<unsigned int,0>(v11);
      std::to_string(&v62, v46);
      if ((v62.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v47 = &v62;
      else
        v47 = (std::string *)v62.__r_.__value_.__r.__words[0];
      if ((v62.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v48 = HIBYTE(v62.__r_.__value_.__r.__words[2]);
      else
        v48 = v62.__r_.__value_.__l.__size_;
      v49 = std::string::append(&v67, (const std::string::value_type *)v47, v48);
      v50 = *(_OWORD *)&v49->__r_.__value_.__l.__data_;
      v68.__r_.__value_.__r.__words[2] = v49->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v68.__r_.__value_.__l.__data_ = v50;
      v49->__r_.__value_.__l.__size_ = 0;
      v49->__r_.__value_.__r.__words[2] = 0;
      v49->__r_.__value_.__r.__words[0] = 0;
      v51 = std::string::append(&v68, ".ir", 3uLL);
      v52 = *(_OWORD *)&v51->__r_.__value_.__l.__data_;
      *(_QWORD *)&buf[16] = *((_QWORD *)&v51->__r_.__value_.__l + 2);
      *(_OWORD *)buf = v52;
      v51->__r_.__value_.__l.__size_ = 0;
      v51->__r_.__value_.__r.__words[2] = 0;
      v51->__r_.__value_.__r.__words[0] = 0;
      if ((buf[23] & 0x80u) == 0)
        v53 = buf;
      else
        v53 = *(uint8_t **)buf;
      if ((buf[23] & 0x80u) == 0)
        v54 = buf[23];
      else
        v54 = *(_QWORD *)&buf[8];
      std::string::append(&v69, (const std::string::value_type *)v53, v54);
      if ((char)buf[23] < 0)
        operator delete(*(void **)buf);
      if (SHIBYTE(v68.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v68.__r_.__value_.__l.__data_);
      if (SHIBYTE(v62.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v62.__r_.__value_.__l.__data_);
      if (SHIBYTE(v67.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v67.__r_.__value_.__l.__data_);
      if (SHIBYTE(v66.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v66.__r_.__value_.__l.__data_);
      if (SHIBYTE(v63.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v63.__r_.__value_.__l.__data_);
      if (SHIBYTE(v65.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v65.__r_.__value_.__l.__data_);
      if (SHIBYTE(v64.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v64.__r_.__value_.__l.__data_);
      v55 = (NSObject **)*((_QWORD *)a2 + 1);
      if (v55)
      {
        v56 = *v55;
        if (!*v55)
        {
LABEL_127:
          *this = v69;
          this = &v69;
          goto LABEL_128;
        }
      }
      else
      {
        v56 = MEMORY[0x1E0C81028];
      }
      if (os_log_type_enabled(v56, OS_LOG_TYPE_DEFAULT))
      {
        v61 = &v69;
        if ((v69.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          v61 = (std::string *)v69.__r_.__value_.__r.__words[0];
        *(_DWORD *)buf = 136315650;
        *(_QWORD *)&buf[4] = "NeuralNetImpl.cpp";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 1454;
        *(_WORD *)&buf[18] = 2080;
        *(_QWORD *)&buf[20] = v61;
        _os_log_impl(&dword_1B5ED0000, v56, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Path to compiled IR file: %s", buf, 0x1Cu);
      }
      goto LABEL_127;
    }
  }
  else if (*((_BYTE *)&v69.__r_.__value_.__s + 23))
  {
    v20 = &v69;
    size = HIBYTE(v69.__r_.__value_.__r.__words[2]);
    goto LABEL_52;
  }
  v35 = (NSObject **)*((_QWORD *)a2 + 1);
  if (!v35)
  {
    v36 = MEMORY[0x1E0C81028];
    goto LABEL_119;
  }
  v36 = *v35;
  if (*v35)
  {
LABEL_119:
    if (!os_log_type_enabled(v36, OS_LOG_TYPE_ERROR))
      goto LABEL_128;
    *(_DWORD *)buf = 136315394;
    *(_QWORD *)&buf[4] = "NeuralNetImpl.cpp";
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = 1446;
    v58 = "%25s:%-5d Empty temp path";
    v59 = v36;
    v60 = 18;
    goto LABEL_121;
  }
LABEL_128:
  this->__r_.__value_.__l.__size_ = 0;
  this->__r_.__value_.__r.__words[2] = 0;
  this->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v69.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v69.__r_.__value_.__l.__data_);
LABEL_35:
  if (v13)
    CFRelease(v13);
  if (v11)
    CFRelease(v11);
  if (v9)
    CFRelease(v9);
  if (v7)
    CFRelease(v7);
}

void sub_1B63858A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,uint64_t a41,void *a42,uint64_t a43,int a44,__int16 a45,char a46,char a47,uint64_t a48,void *__p,uint64_t a50,int a51,__int16 a52,char a53,char a54)
{
  uint64_t v54;

  if (*(char *)(v54 - 105) < 0)
    operator delete(*(void **)(v54 - 128));
  if (a54 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  if (a47 < 0)
    operator delete(a42);
  if (a40 < 0)
    operator delete(a35);
  if (a21 < 0)
    operator delete(a16);
  if (a33 < 0)
    operator delete(a28);
  if (a27 < 0)
    operator delete(a22);
  if (*(char *)(v54 - 169) < 0)
    operator delete(*(void **)(v54 - 192));
  applesauce::CF::TypeRef::~TypeRef((const void **)(v54 - 160));
  applesauce::CF::TypeRef::~TypeRef((const void **)(v54 - 152));
  applesauce::CF::TypeRef::~TypeRef((const void **)(v54 - 144));
  applesauce::CF::TypeRef::~TypeRef((const void **)(v54 - 136));
  _Unwind_Resume(a1);
}

void sub_1B63859F0()
{
  JUMPOUT(0x1B63859E0);
}

BOOL MIL2BNNS::loadContext(uint64_t a1, uint64_t a2, uint64_t a3)
{
  NSObject **v5;
  NSObject *v6;
  NSObject *v7;
  NSObject *v8;
  uint64_t Streaming;
  uint64_t v10;
  uint64_t v11;
  _BOOL8 v12;
  NSObject **v13;
  NSObject *v14;
  int v16;
  const char *v17;
  __int16 v18;
  int v19;
  __int16 v20;
  uint64_t v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  v5 = *(NSObject ***)(a1 + 8);
  if (v5)
  {
    v6 = *v5;
    if (!*v5)
      goto LABEL_7;
  }
  else
  {
    v6 = MEMORY[0x1E0C81028];
  }
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    v16 = 136315650;
    v17 = "NeuralNetImpl.cpp";
    v18 = 1024;
    v19 = 1526;
    v20 = 2048;
    v21 = a3;
    _os_log_impl(&dword_1B5ED0000, v6, OS_LOG_TYPE_DEFAULT, "%25s:%-5d graph size is %zu bytes", (uint8_t *)&v16, 0x1Cu);
    v5 = *(NSObject ***)(a1 + 8);
  }
LABEL_7:
  if (*(_DWORD *)(a1 + 112) == 2)
  {
    if (v5)
    {
      v7 = *v5;
      if (!*v5)
      {
LABEL_17:
        Streaming = BNNSGraphContextMakeStreaming();
        goto LABEL_22;
      }
    }
    else
    {
      v7 = MEMORY[0x1E0C81028];
    }
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG))
    {
      v16 = 136315394;
      v17 = "NeuralNetImpl.cpp";
      v18 = 1024;
      v19 = 1529;
      _os_log_impl(&dword_1B5ED0000, v7, OS_LOG_TYPE_DEBUG, "%25s:%-5d Mode=ManagedRingBuffer, Invoking BNNSGraphContextMakeStreaming", (uint8_t *)&v16, 0x12u);
    }
    goto LABEL_17;
  }
  if (!v5)
  {
    v8 = MEMORY[0x1E0C81028];
LABEL_19:
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
    {
      v16 = 136315394;
      v17 = "NeuralNetImpl.cpp";
      v18 = 1024;
      v19 = 1533;
      _os_log_impl(&dword_1B5ED0000, v8, OS_LOG_TYPE_DEBUG, "%25s:%-5d Invoking BNNSGraphContextMake", (uint8_t *)&v16, 0x12u);
    }
    goto LABEL_21;
  }
  v8 = *v5;
  if (*v5)
    goto LABEL_19;
LABEL_21:
  Streaming = BNNSGraphContextMake();
LABEL_22:
  v11 = v10;
  *(_QWORD *)(a1 + 312) = Streaming;
  *(_QWORD *)(a1 + 320) = v10;
  v12 = (v10 | Streaming) != 0;
  if (v10 | Streaming)
  {
    v13 = *(NSObject ***)(a1 + 8);
    if (v13)
    {
      v14 = *v13;
      if (!*v13)
      {
LABEL_29:
        BNNSGraphContextSetArgumentType();
        return v12;
      }
    }
    else
    {
      v14 = MEMORY[0x1E0C81028];
    }
    if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
    {
      v16 = 136315650;
      v17 = "NeuralNetImpl.cpp";
      v18 = 1024;
      v19 = 1541;
      v20 = 2048;
      v21 = v11;
      _os_log_impl(&dword_1B5ED0000, v14, OS_LOG_TYPE_DEFAULT, "%25s:%-5d context size is %zu bytes", (uint8_t *)&v16, 0x1Cu);
    }
    goto LABEL_29;
  }
  return v12;
}

void MIL2BNNS::loadModel(MIL2BNNS *this, CFDictionaryRef theDict)
{
  const __CFNumber *Value;
  const __CFNumber *v5;
  _BOOL4 v6;
  const __CFNumber *v7;
  const __CFNumber *v8;
  int v9;
  NSObject **v10;
  NSObject *v11;
  size_t WorkspaceSize_v2;
  void *v13;
  uint64_t v14;
  NSObject **v15;
  NSObject *v16;
  uint64_t v17;
  unsigned int v18;
  uint64_t ArgumentCount;
  uint64_t v20;
  size_t v21;
  uint64_t v22;
  uint64_t v23;
  NSObject **v24;
  NSObject *v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  __int128 v34;
  _QWORD *v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  unint64_t v45;
  const void **v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  int v50;
  unsigned __int8 *v51;
  unsigned __int8 *v52;
  NSObject **v53;
  NSObject *v54;
  const void *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  int v59;
  unsigned __int8 *v60;
  unsigned __int8 *v61;
  NSObject **v62;
  NSObject *v63;
  const void *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  int v68;
  unsigned __int8 *v69;
  unsigned __int8 *v70;
  NSObject **v71;
  NSObject *v72;
  const void *v73;
  uint64_t v74;
  uint64_t v75;
  NSObject **v76;
  NSObject *v77;
  char v78;
  _QWORD *v79;
  unint64_t *v80;
  void *v81;
  uint64_t v82;
  NSObject **v83;
  NSObject *v84;
  uint64_t v85;
  uint64_t v86;
  int *v87;
  unint64_t v88;
  int v89;
  uint64_t v90;
  uint64_t ArgumentPosition;
  uint64_t v92;
  _QWORD *v93;
  _QWORD *v94;
  uint64_t OutputCount;
  char *v96;
  char *v97;
  int v98;
  uint64_t v99;
  _QWORD *v100;
  unint64_t v101;
  _QWORD *v102;
  size_t v103;
  char *v104;
  unint64_t v105;
  size_t v106;
  const void *v107;
  uint64_t v108;
  char *v109;
  uint64_t v110;
  uint64_t v111;
  const void **v112;
  unint64_t v113;
  const void *v114;
  unint64_t v115;
  unint64_t v116;
  uint64_t v117;
  __int128 v118;
  NSObject **v119;
  NSObject *v120;
  std::runtime_error *v121;
  std::runtime_error *v122;
  std::runtime_error *v123;
  std::runtime_error *v124;
  int v125;
  const std::string::value_type *v126;
  std::string::size_type v127;
  std::string *v128;
  __int128 v129;
  NSObject **v130;
  NSObject *v131;
  std::runtime_error *exception;
  _DWORD *v133;
  uint64_t v134;
  _QWORD *v135;
  __int128 v136;
  __int128 v137;
  _QWORD *v138;
  unsigned __int8 **v139;
  uint64_t v140;
  unsigned __int8 **v141;
  _QWORD *v142;
  char *v143;
  size_t *v144;
  char *v145;
  unint64_t v146;
  std::string v147;
  const void *v148;
  unint64_t v149;
  char *v150;
  size_t v151;
  std::string v152;
  _BYTE buf[40];
  uint64_t v154;

  v154 = *MEMORY[0x1E0C80C00];
  if (!CFDictionaryContainsKey(theDict, CFSTR("DynamicBatchSize")))
    goto LABEL_16;
  Value = (const __CFNumber *)CFDictionaryGetValue(theDict, CFSTR("DynamicBatchSize"));
  v5 = Value;
  if (Value)
    CFRetain(Value);
  *(_QWORD *)buf = v5;
  v6 = applesauce::CF::convert_to<BOOL,0>(v5);
  if (v5)
    CFRelease(v5);
  if (!v6)
    goto LABEL_16;
  if (CFDictionaryContainsKey(theDict, CFSTR("BatchSize")))
  {
    v7 = (const __CFNumber *)CFDictionaryGetValue(theDict, CFSTR("BatchSize"));
    v8 = v7;
    if (v7)
      CFRetain(v7);
    *(_QWORD *)buf = v8;
    v9 = applesauce::CF::convert_to<unsigned int,0>(v8);
    if (v8)
      CFRelease(v8);
    v10 = (NSObject **)*((_QWORD *)this + 1);
    if (v10)
    {
      v11 = *v10;
      if (!*v10)
      {
LABEL_20:
        BNNSGraphContextSetBatchSize_v2();
        WorkspaceSize_v2 = BNNSGraphContextGetWorkspaceSize_v2();
        goto LABEL_21;
      }
    }
    else
    {
      v11 = MEMORY[0x1E0C81028];
    }
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136315650;
      *(_QWORD *)&buf[4] = "NeuralNetImpl.cpp";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 1553;
      *(_WORD *)&buf[18] = 1024;
      *(_DWORD *)&buf[20] = v9;
      _os_log_impl(&dword_1B5ED0000, v11, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Use DYNAMIC batch size (batch size = %d)", buf, 0x18u);
    }
    goto LABEL_20;
  }
  if (CFDictionaryContainsKey(theDict, CFSTR("BatchSize")))
  {
LABEL_16:
    WorkspaceSize_v2 = BNNSGraphGetWorkspaceSize_v2();
    goto LABEL_21;
  }
  BNNSGraphContextSetBatchSize_v2();
  WorkspaceSize_v2 = BNNSGraphContextGetWorkspaceSize_v2();
LABEL_21:
  *((_QWORD *)this + 29) = WorkspaceSize_v2;
  if (!WorkspaceSize_v2)
  {
    v14 = *((_QWORD *)this + 30);
    *((_QWORD *)this + 30) = 0;
    if (!v14)
      goto LABEL_27;
    goto LABEL_26;
  }
  if (WorkspaceSize_v2 == -1)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "BNNSGraphGetWorkspaceSize failed");
  }
  v13 = malloc_type_valloc(WorkspaceSize_v2, 0x6275D2F5uLL);
  v14 = *((_QWORD *)this + 30);
  *((_QWORD *)this + 30) = v13;
  if (v14)
LABEL_26:
    MEMORY[0x1BCC95CC8](v14, 0x1000C8077774924);
LABEL_27:
  v15 = (NSObject **)*((_QWORD *)this + 1);
  if (v15)
  {
    v16 = *v15;
    if (!*v15)
      goto LABEL_33;
  }
  else
  {
    v16 = MEMORY[0x1E0C81028];
  }
  if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
  {
    v17 = *((_QWORD *)this + 29);
    *(_DWORD *)buf = 136315650;
    *(_QWORD *)&buf[4] = "NeuralNetImpl.cpp";
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = 1582;
    *(_WORD *)&buf[18] = 2048;
    *(_QWORD *)&buf[20] = v17;
    _os_log_impl(&dword_1B5ED0000, v16, OS_LOG_TYPE_DEFAULT, "%25s:%-5d graph workspace size is %zu bytes", buf, 0x1Cu);
  }
LABEL_33:
  v18 = *((_DWORD *)this + 28);
  if (v18 >= 3)
  {
    v130 = (NSObject **)*((_QWORD *)this + 1);
    if (v130)
      v131 = *v130;
    else
      v131 = 0;
    if (os_log_type_enabled(v131, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315906;
      *(_QWORD *)&buf[4] = "NeuralNetImpl.cpp";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 1588;
      *(_WORD *)&buf[18] = 1024;
      *(_DWORD *)&buf[20] = -66743;
      *(_WORD *)&buf[24] = 1024;
      *(_DWORD *)&buf[26] = v18;
      _os_log_impl(&dword_1B5ED0000, v131, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (%d): \"Unknown streaming mode (%d).\"", buf, 0x1Eu);
    }
    v133 = __cxa_allocate_exception(0x10uLL);
    *(_QWORD *)v133 = &off_1E69EE218;
    v133[2] = -66743;
  }
  ArgumentCount = BNNSGraphGetArgumentCount();
  v20 = 8 * ArgumentCount;
  MEMORY[0x1E0C80A78](ArgumentCount);
  if ((unint64_t)(8 * ArgumentCount) >= 0x200)
    v21 = 512;
  else
    v21 = 8 * ArgumentCount;
  v144 = (size_t *)((char *)&v134 - ((8 * ArgumentCount + 15) & 0xFFFFFFFFFFFFFFF0));
  bzero(v144, v21);
  v146 = ArgumentCount;
  MEMORY[0x1E0C80A78](v22);
  v145 = (char *)&v134 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = (NSObject **)*((_QWORD *)this + 1);
  if (v24)
  {
    v25 = *v24;
    if (!*v24)
      goto LABEL_43;
  }
  else
  {
    v25 = MEMORY[0x1E0C81028];
  }
  if (os_log_type_enabled(v25, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 136315650;
    *(_QWORD *)&buf[4] = "NeuralNetImpl.cpp";
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = 1594;
    *(_WORD *)&buf[18] = 2048;
    *(_QWORD *)&buf[20] = v146;
    _os_log_impl(&dword_1B5ED0000, v25, OS_LOG_TYPE_DEBUG, "%25s:%-5d graph has %zu arguments", buf, 0x1Cu);
  }
LABEL_43:
  v26 = v146;
  BNNSGraphGetArgumentNames();
  BNNSGraphGetArgumentIntents();
  v138 = (_QWORD *)((char *)this + 168);
  std::vector<bnns_graph_argument_t>::resize((char **)this + 21, v26);
  v135 = (_QWORD *)((char *)this + 192);
  std::vector<bnns_graph_argument_t>::resize((char **)this + 24, v26);
  *((_QWORD *)this + 27) = 0;
  v28 = (uint64_t *)((char *)this + 280);
  v143 = (char *)this + 296;
  v29 = *((_QWORD *)this + 35);
  if (0xAAAAAAAAAAAAAAABLL * ((*((_QWORD *)this + 37) - v29) >> 4) < v26)
  {
    if (v26 > 0x555555555555555)
      std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
    v30 = *((_QWORD *)this + 36);
    *(_QWORD *)&buf[32] = v143;
    v31 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<MIL2BNNS::GraphTensor>>(v26);
    *(_QWORD *)&buf[8] = &v31[16 * ((v30 - v29) >> 4)];
    *(_QWORD *)&buf[16] = *(_QWORD *)&buf[8];
    *(_QWORD *)buf = v31;
    *(_QWORD *)&buf[24] = &v31[48 * v32];
    std::vector<MIL2BNNS::GraphTensor>::__swap_out_circular_buffer((uint64_t *)this + 35, buf);
    v33 = std::__split_buffer<MIL2BNNS::GraphTensor>::~__split_buffer((uint64_t)buf);
    MEMORY[0x1E0C80A78](v33);
    v35 = (uint64_t *)((char *)&v134 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0));
    v142 = (_QWORD *)((char *)this + 256);
    *((_QWORD *)this + 32) = 0;
    goto LABEL_47;
  }
  MEMORY[0x1E0C80A78](v27);
  v35 = (uint64_t *)((char *)&v134 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0));
  v142 = (_QWORD *)((char *)this + 256);
  *((_QWORD *)this + 32) = 0;
  if (v26)
  {
LABEL_47:
    v36 = 0;
    v141 = (unsigned __int8 **)((char *)this + 40);
    v140 = (uint64_t)this + 64;
    v139 = (unsigned __int8 **)((char *)this + 88);
    *(_QWORD *)&v34 = 136315650;
    v136 = v34;
    *(_QWORD *)&v34 = 136315906;
    v137 = v34;
    while (1)
    {
      v38 = *((_QWORD *)this + 36);
      v37 = *((_QWORD *)this + 37);
      if (v38 >= v37)
      {
        v40 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v38 - *v28) >> 4);
        v41 = v40 + 1;
        if (v40 + 1 > 0x555555555555555)
          std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
        v42 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v37 - *v28) >> 4);
        if (2 * v42 > v41)
          v41 = 2 * v42;
        if (v42 >= 0x2AAAAAAAAAAAAAALL)
          v43 = 0x555555555555555;
        else
          v43 = v41;
        *(_QWORD *)&buf[32] = v143;
        if (v43)
          v43 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<MIL2BNNS::GraphTensor>>(v43);
        else
          v44 = 0;
        *(_QWORD *)buf = v43;
        *(_QWORD *)&buf[8] = v43 + 48 * v40;
        *(_QWORD *)&buf[16] = *(_QWORD *)&buf[8];
        *(_QWORD *)&buf[24] = v43 + 48 * v44;
        MIL2BNNS::GraphTensor::GraphTensor(*(unint64_t **)&buf[8], (uint64_t)this + 312, (const std::string::value_type *)v144[v36]);
        *(_QWORD *)&buf[16] += 48;
        std::vector<MIL2BNNS::GraphTensor>::__swap_out_circular_buffer((uint64_t *)this + 35, buf);
        v39 = *((_QWORD *)this + 36);
        std::__split_buffer<MIL2BNNS::GraphTensor>::~__split_buffer((uint64_t)buf);
      }
      else
      {
        MIL2BNNS::GraphTensor::GraphTensor(*((unint64_t **)this + 36), (uint64_t)this + 312, (const std::string::value_type *)v144[v36]);
        v39 = v38 + 48;
        *((_QWORD *)this + 36) = v38 + 48;
      }
      *((_QWORD *)this + 36) = v39;
      v45 = v39 - 48;
      v46 = (const void **)(v39 - 32);
      v47 = *(unsigned __int8 *)(v39 - 9);
      if ((v47 & 0x80u) == 0)
        v48 = *(unsigned __int8 *)(v39 - 9);
      else
        v48 = *(_QWORD *)(v39 - 24);
      v49 = *((unsigned __int8 *)this + 63);
      v50 = (char)v49;
      if ((v49 & 0x80u) != 0)
        v49 = *((_QWORD *)this + 6);
      if (v48 != v49)
        goto LABEL_85;
      if (v50 >= 0)
        v51 = (unsigned __int8 *)v141;
      else
        v51 = *v141;
      if ((v47 & 0x80) != 0)
      {
        if (memcmp(*v46, v51, *(_QWORD *)(v39 - 24)))
          goto LABEL_85;
      }
      else if (*(_BYTE *)(v39 - 9))
      {
        v52 = (unsigned __int8 *)(v39 - 32);
        while (*v52 == *v51)
        {
          ++v52;
          ++v51;
          if (!--v47)
            goto LABEL_76;
        }
        goto LABEL_85;
      }
LABEL_76:
      if (*(_DWORD *)&v145[4 * v36] != 1)
        goto LABEL_85;
      *((_QWORD *)this + 33) = v45;
      v53 = (NSObject **)*((_QWORD *)this + 1);
      if (v53)
      {
        v54 = *v53;
        if (!*v53)
          goto LABEL_85;
      }
      else
      {
        v54 = MEMORY[0x1E0C81028];
      }
      if (os_log_type_enabled(v54, OS_LOG_TYPE_DEFAULT))
      {
        v55 = (const void *)(v39 - 32);
        if (*(char *)(v39 - 9) < 0)
          v55 = *v46;
        *(_DWORD *)buf = v136;
        *(_QWORD *)&buf[4] = "NeuralNetImpl.cpp";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 1616;
        *(_WORD *)&buf[18] = 2080;
        *(_QWORD *)&buf[20] = v55;
        _os_log_impl(&dword_1B5ED0000, v54, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Identified Input Tensor: %s", buf, 0x1Cu);
      }
LABEL_85:
      v56 = *(unsigned __int8 *)(v39 - 9);
      if ((v56 & 0x80u) == 0)
        v57 = *(unsigned __int8 *)(v39 - 9);
      else
        v57 = *(_QWORD *)(v39 - 24);
      v58 = *((unsigned __int8 *)this + 87);
      v59 = (char)v58;
      if ((v58 & 0x80u) != 0)
        v58 = *((_QWORD *)this + 9);
      if (v57 != v58)
        goto LABEL_110;
      if (v59 >= 0)
        v60 = (unsigned __int8 *)v140;
      else
        v60 = *(unsigned __int8 **)v140;
      if ((v56 & 0x80) != 0)
      {
        if (memcmp(*v46, v60, *(_QWORD *)(v39 - 24)))
          goto LABEL_110;
      }
      else if (*(_BYTE *)(v39 - 9))
      {
        v61 = (unsigned __int8 *)(v39 - 32);
        while (*v61 == *v60)
        {
          ++v61;
          ++v60;
          if (!--v56)
            goto LABEL_101;
        }
        goto LABEL_110;
      }
LABEL_101:
      if (*(_DWORD *)&v145[4 * v36] != 1)
        goto LABEL_110;
      *((_QWORD *)this + 34) = v45;
      v62 = (NSObject **)*((_QWORD *)this + 1);
      if (v62)
      {
        v63 = *v62;
        if (!*v62)
          goto LABEL_110;
      }
      else
      {
        v63 = MEMORY[0x1E0C81028];
      }
      if (os_log_type_enabled(v63, OS_LOG_TYPE_DEFAULT))
      {
        v64 = (const void *)(v39 - 32);
        if (*(char *)(v39 - 9) < 0)
          v64 = *v46;
        *(_DWORD *)buf = v136;
        *(_QWORD *)&buf[4] = "NeuralNetImpl.cpp";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 1620;
        *(_WORD *)&buf[18] = 2080;
        *(_QWORD *)&buf[20] = v64;
        _os_log_impl(&dword_1B5ED0000, v63, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Identified Embedding Tensor: %s", buf, 0x1Cu);
      }
LABEL_110:
      v65 = *(unsigned __int8 *)(v39 - 9);
      if ((v65 & 0x80u) == 0)
        v66 = *(unsigned __int8 *)(v39 - 9);
      else
        v66 = *(_QWORD *)(v39 - 24);
      v67 = *((unsigned __int8 *)this + 111);
      v68 = (char)v67;
      if ((v67 & 0x80u) != 0)
        v67 = *((_QWORD *)this + 12);
      if (v66 != v67)
        goto LABEL_135;
      if (v68 >= 0)
        v69 = (unsigned __int8 *)v139;
      else
        v69 = *v139;
      if ((v65 & 0x80) != 0)
      {
        if (memcmp(*v46, v69, *(_QWORD *)(v39 - 24)))
          goto LABEL_135;
      }
      else if (*(_BYTE *)(v39 - 9))
      {
        v70 = (unsigned __int8 *)(v39 - 32);
        while (*v70 == *v69)
        {
          ++v70;
          ++v69;
          if (!--v65)
            goto LABEL_126;
        }
        goto LABEL_135;
      }
LABEL_126:
      if (*(_DWORD *)&v145[4 * v36] != 2)
        goto LABEL_135;
      *((_QWORD *)this + 38) = v45;
      v71 = (NSObject **)*((_QWORD *)this + 1);
      if (v71)
      {
        v72 = *v71;
        if (!*v71)
          goto LABEL_135;
      }
      else
      {
        v72 = MEMORY[0x1E0C81028];
      }
      if (os_log_type_enabled(v72, OS_LOG_TYPE_DEFAULT))
      {
        v73 = (const void *)(v39 - 32);
        if (*(char *)(v39 - 9) < 0)
          v73 = *v46;
        *(_DWORD *)buf = v136;
        *(_QWORD *)&buf[4] = "NeuralNetImpl.cpp";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 1624;
        *(_WORD *)&buf[18] = 2080;
        *(_QWORD *)&buf[20] = v73;
        _os_log_impl(&dword_1B5ED0000, v72, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Identified Output Tensor: %s", buf, 0x1Cu);
      }
LABEL_135:
      if (*(_DWORD *)&v145[4 * v36] == 3)
      {
        if (*((_DWORD *)this + 28) != 2)
        {
          v123 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(v123, "Argument has InOut intent but streaming mode is not set as ManagedRingBuffer");
        }
        v35[v36] = *v142;
      }
      else
      {
        v74 = *((_QWORD *)this + 32);
        v35[v36] = v74;
        v75 = *(_QWORD *)(v39 - 40);
        *((_QWORD *)this + 32) = (v74 + v75 + 63) & 0xFFFFFFFFFFFFFFC0;
        v76 = (NSObject **)*((_QWORD *)this + 1);
        if (!v76)
        {
          v77 = MEMORY[0x1E0C81028];
LABEL_142:
          if (os_log_type_enabled(v77, OS_LOG_TYPE_DEBUG))
          {
            if (*(char *)(v39 - 9) < 0)
              v46 = (const void **)*v46;
            *(_DWORD *)buf = v137;
            *(_QWORD *)&buf[4] = "NeuralNetImpl.cpp";
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = 1642;
            *(_WORD *)&buf[18] = 2080;
            *(_QWORD *)&buf[20] = v46;
            *(_WORD *)&buf[28] = 2048;
            *(_QWORD *)&buf[30] = v75;
            _os_log_impl(&dword_1B5ED0000, v77, OS_LOG_TYPE_DEBUG, "%25s:%-5d allocation for tensor name: %s nBytes: %zu", buf, 0x26u);
          }
          goto LABEL_146;
        }
        v77 = *v76;
        if (*v76)
          goto LABEL_142;
      }
LABEL_146:
      if (++v36 == v146)
      {
        v78 = 0;
        goto LABEL_148;
      }
    }
  }
  v78 = 1;
LABEL_148:
  v79 = v135;
  if (!*((_QWORD *)this + 33))
  {
    v121 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v121, "failed to find input graph tensor");
    goto LABEL_224;
  }
  v80 = (unint64_t *)*((_QWORD *)this + 38);
  if (!v80)
  {
    v121 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v121, "failed to find output graph tensor");
LABEL_224:
  }
  if (*((_QWORD *)this + 34))
    goto LABEL_153;
  if ((*((char *)this + 87) & 0x80000000) == 0)
  {
    if (!*((_BYTE *)this + 87))
      goto LABEL_153;
    goto LABEL_208;
  }
  if (*((_QWORD *)this + 9))
  {
LABEL_208:
    v121 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v121, "failed to find embedding graph tensor");
    goto LABEL_224;
  }
LABEL_153:
  std::vector<float>::resize((uint64_t)this + 120, *v80);
  v81 = malloc_type_aligned_alloc(0x40uLL, *((_QWORD *)this + 32), 0x987CB936uLL);
  v82 = *((_QWORD *)this + 31);
  *((_QWORD *)this + 31) = v81;
  if (v82)
  {
    MEMORY[0x1BCC95CC8](v82, 0x1000C8077774924);
    v81 = (void *)*((_QWORD *)this + 31);
  }
  bzero(v81, *((_QWORD *)this + 32));
  v83 = (NSObject **)*((_QWORD *)this + 1);
  if (v83)
  {
    v84 = *v83;
    if (!*v83)
      goto LABEL_161;
  }
  else
  {
    v84 = MEMORY[0x1E0C81028];
  }
  if (os_log_type_enabled(v84, OS_LOG_TYPE_DEFAULT))
  {
    v85 = *v142;
    *(_DWORD *)buf = 136315650;
    *(_QWORD *)&buf[4] = "NeuralNetImpl.cpp";
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = 1662;
    *(_WORD *)&buf[18] = 2048;
    *(_QWORD *)&buf[20] = v85;
    _os_log_impl(&dword_1B5ED0000, v84, OS_LOG_TYPE_DEFAULT, "%25s:%-5d allocated %zu bytes of tensor data", buf, 0x1Cu);
  }
LABEL_161:
  if ((v78 & 1) == 0)
  {
    v86 = 0;
    v87 = (int *)v145;
    v88 = v146;
    do
    {
      v89 = *v87++;
      if (v89 != 3)
      {
        v90 = *((_QWORD *)this + 35);
        *(_QWORD *)(v90 + v86 + 40) = *((_QWORD *)this + 31) + *v35;
        ArgumentPosition = BNNSGraphGetArgumentPosition();
        v92 = *(_QWORD *)(v90 + v86 + 8);
        v93 = v138;
        v94 = (_QWORD *)(*v138 + 16 * ArgumentPosition);
        *v94 = *(_QWORD *)(v90 + v86 + 40);
        v94[1] = v92;
        *(_OWORD *)(*v79 + 16 * ArgumentPosition) = *(_OWORD *)(*v93 + 16 * ArgumentPosition);
      }
      v86 += 48;
      ++v35;
      --v88;
    }
    while (v88);
  }
  if (*((_DWORD *)this + 28) == 1)
  {
    OutputCount = BNNSGraphGetOutputCount();
    v96 = (char *)OutputCount;
    if (OutputCount)
    {
      v97 = 0;
      v98 = 0;
      v140 = 48 * OutputCount;
      v143 = (char *)OutputCount;
      do
      {
        v99 = *v28;
        v101 = *v28 + 48 * (_QWORD)v97;
        v100 = (_QWORD *)(v101 + 16);
        LODWORD(v101) = *(char *)(v101 + 39);
        if ((v101 & 0x80000000) != 0)
        {
          v102 = (_QWORD *)*v100;
          v101 = v100[1];
        }
        else
        {
          v101 = v101;
          v102 = v100;
        }
        *(_QWORD *)buf = v102;
        *(_QWORD *)&buf[8] = v101;
        if (v101 > 9)
        {
          v144 = v100;
          if (!std::string_view::compare[abi:ne180100](buf, v101 - 10, 0xFFFFFFFFFFFFFFFFLL, "_out_state", 0xAuLL))
          {
            LODWORD(v103) = *((char *)v144 + 23);
            LODWORD(v141) = v98;
            if ((v103 & 0x80000000) != 0)
            {
              v104 = (char *)*v144;
              v103 = v144[1];
            }
            else
            {
              v103 = v103;
              v104 = (char *)v144;
            }
            v150 = v104;
            v151 = v103;
            v105 = std::string_view::find[abi:ne180100]((uint64_t *)&v150, "_out_state", 0);
            if (v151 >= v105)
              v106 = v105;
            else
              v106 = v151;
            if ((unint64_t)v96 >= v146)
            {
LABEL_210:
              v122 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
              std::operator+<char>();
              std::runtime_error::runtime_error(v122, (const std::string *)buf);
            }
            v107 = v150;
            v142 = (_QWORD *)(v99 + 48 * (_QWORD)v97 + 8);
            v108 = v140;
            v109 = v143;
            while (1)
            {
              v110 = *v28;
              v111 = *v28 + v108;
              v112 = (const void **)(v111 + 16);
              if (*(char *)(v111 + 39) < 0)
              {
                v114 = *v112;
                v113 = *(_QWORD *)(v111 + 24);
              }
              else
              {
                v113 = *(unsigned __int8 *)(v111 + 39);
                v114 = v112;
              }
              v148 = v114;
              v149 = v113;
              v115 = std::string_view::find[abi:ne180100]((uint64_t *)&v148, "_in_state", 0);
              v116 = v149;
              if (v149 >= v115)
                v116 = v115;
              if (v115 != -1 && v106 == v116 && !memcmp(v107, v148, v106))
                break;
              ++v109;
              v108 += 48;
              if ((char *)v146 == v109)
                goto LABEL_210;
            }
            if (*v142 != *(_QWORD *)(v110 + 48 * (_QWORD)v109 + 8)
              || *(_DWORD *)&v145[4 * (_QWORD)v97] != 2
              || *(_DWORD *)&v145[4 * (_QWORD)v109] != 1)
            {
              v124 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
              std::operator+<char>();
              std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(" - ", &v147, &v152);
              v125 = *((char *)v112 + 23);
              if (v125 >= 0)
                v126 = (const std::string::value_type *)v112;
              else
                v126 = (const std::string::value_type *)*v112;
              if (v125 >= 0)
                v127 = *((unsigned __int8 *)v112 + 23);
              else
                v127 = (std::string::size_type)v112[1];
              v128 = std::string::append(&v152, v126, v127);
              v129 = *(_OWORD *)&v128->__r_.__value_.__l.__data_;
              *(_QWORD *)&buf[16] = *((_QWORD *)&v128->__r_.__value_.__l + 2);
              *(_OWORD *)buf = v129;
              v128->__r_.__value_.__l.__size_ = 0;
              v128->__r_.__value_.__r.__words[2] = 0;
              v128->__r_.__value_.__r.__words[0] = 0;
              std::runtime_error::runtime_error(v124, (const std::string *)buf);
            }
            v117 = *v135;
            v118 = *(_OWORD *)(*v135 + 16 * (_QWORD)v97);
            *(_OWORD *)(v117 + 16 * (_QWORD)v97) = *(_OWORD *)(*v135 + 16 * (_QWORD)v109);
            *(_OWORD *)(v117 + 16 * (_QWORD)v109) = v118;
            v98 = (_DWORD)v141 + 1;
            v96 = v143;
          }
        }
        ++v97;
      }
      while (v97 != v96);
    }
    else
    {
      v98 = 0;
    }
    v119 = (NSObject **)*((_QWORD *)this + 1);
    if (v119)
    {
      v120 = *v119;
      if (!*v119)
        return;
    }
    else
    {
      v120 = MEMORY[0x1E0C81028];
    }
    if (os_log_type_enabled(v120, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136315650;
      *(_QWORD *)&buf[4] = "NeuralNetImpl.cpp";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 1723;
      *(_WORD *)&buf[18] = 1024;
      *(_DWORD *)&buf[20] = v98;
      _os_log_impl(&dword_1B5ED0000, v120, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Identified %u streaming pairs", buf, 0x18u);
    }
  }
}

void sub_1B6386F40(void *a1, int a2)
{
  uint64_t v2;
  void *v3;
  uint64_t v4;
  void *v7;
  NSObject **v8;
  NSObject *v9;
  uint64_t v10;
  _DWORD *exception;

  __cxa_free_exception(v3);
  if (a2 == 2)
  {
    v7 = __cxa_begin_catch(a1);
    v8 = *(NSObject ***)(v2 + 8);
    if (v8)
      v9 = *v8;
    else
      v9 = 0;
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      v10 = (*(uint64_t (**)(void *))(*(_QWORD *)v7 + 16))(v7);
      *(_DWORD *)(v4 - 192) = 136315906;
      *(_QWORD *)(v4 - 188) = "NeuralNetImpl.cpp";
      *(_WORD *)(v4 - 180) = 1024;
      *(_DWORD *)(v4 - 178) = 1727;
      *(_WORD *)(v4 - 174) = 1024;
      *(_DWORD *)(v4 - 172) = -66743;
      *(_WORD *)(v4 - 168) = 2080;
      *(_QWORD *)(v4 - 166) = v10;
      _os_log_impl(&dword_1B5ED0000, v9, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (%d): \"Run time error: %s\"", (uint8_t *)(v4 - 192), 0x22u);
    }
    exception = __cxa_allocate_exception(0x10uLL);
    *(_QWORD *)exception = &off_1E69EE218;
    exception[2] = -66743;
  }
  JUMPOUT(0x1B6387250);
}

void sub_1B638723C()
{
  __cxa_end_catch();
  JUMPOUT(0x1B6387250);
}

void sub_1B6387248(_Unwind_Exception *exception_object, int a2)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

void std::vector<bnns_graph_argument_t>::resize(char **a1, unint64_t a2)
{
  char *v3;
  char *v4;
  unint64_t v5;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char *v11;
  char *v12;
  char *v13;
  char *v14;
  char *v15;

  v4 = *a1;
  v3 = a1[1];
  v5 = (v3 - *a1) >> 4;
  if (a2 <= v5)
  {
    if (a2 >= v5)
      return;
    v15 = &v4[16 * a2];
    goto LABEL_18;
  }
  v6 = a2 - v5;
  v7 = a1[2];
  if (a2 - v5 <= (v7 - v3) >> 4)
  {
    bzero(a1[1], 16 * v6);
    v15 = &v3[16 * v6];
LABEL_18:
    a1[1] = v15;
    return;
  }
  if (a2 >> 60)
    std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
  v8 = v7 - v4;
  v9 = v8 >> 3;
  if (v8 >> 3 <= a2)
    v9 = a2;
  if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF0)
    v10 = 0xFFFFFFFFFFFFFFFLL;
  else
    v10 = v9;
  if (v10 >> 60)
    std::__throw_bad_array_new_length[abi:ne180100]();
  v11 = (char *)operator new(16 * v10);
  v12 = &v11[16 * v5];
  v13 = &v11[16 * v10];
  bzero(v12, 16 * v6);
  v14 = &v12[16 * v6];
  if (v3 != v4)
  {
    do
    {
      *((_OWORD *)v12 - 1) = *((_OWORD *)v3 - 1);
      v12 -= 16;
      v3 -= 16;
    }
    while (v3 != v4);
    v3 = *a1;
  }
  *a1 = v12;
  a1[1] = v14;
  a1[2] = v13;
  if (v3)
    operator delete(v3);
}

unint64_t *MIL2BNNS::GraphTensor::GraphTensor(unint64_t *a1, uint64_t a2, const std::string::value_type *a3)
{
  std::string *v5;
  unint64_t v6;
  unint64_t v7;
  std::runtime_error *exception;
  uint64_t v10;
  int v11;

  a1[2] = 0;
  a1[3] = 0;
  v5 = (std::string *)(a1 + 2);
  a1[4] = 0;
  BNNSGraphContextGetTensorDescriptor_v2();
  if (v11 == 65552)
  {
    v6 = 2;
  }
  else
  {
    if (v11 != 65568)
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Invalid data type");
    }
    v6 = 4;
  }
  v7 = MEMORY[0x1BCC94360](&v10);
  *a1 = v7 / v6;
  a1[1] = v7;
  std::string::__assign_external(v5, a3);
  a1[5] = 0;
  return a1;
}

void sub_1B6387454(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;

  if (*(char *)(v1 + 39) < 0)
    operator delete(*v2);
  _Unwind_Resume(exception_object);
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<MIL2BNNS::GraphTensor>>(unint64_t a1)
{
  if (a1 >= 0x555555555555556)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(48 * a1);
}

uint64_t *std::vector<MIL2BNNS::GraphTensor>::__swap_out_circular_buffer(uint64_t *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v2 = *result;
  v3 = result[1];
  v4 = a2[1];
  if (v3 == *result)
  {
    v5 = a2[1];
  }
  else
  {
    do
    {
      v5 = v4 - 48;
      *(_OWORD *)(v4 - 48) = *(_OWORD *)(v3 - 48);
      v6 = *(_OWORD *)(v3 - 32);
      *(_QWORD *)(v4 - 16) = *(_QWORD *)(v3 - 16);
      *(_OWORD *)(v4 - 32) = v6;
      *(_QWORD *)(v3 - 24) = 0;
      *(_QWORD *)(v3 - 16) = 0;
      *(_QWORD *)(v3 - 32) = 0;
      *(_QWORD *)(v4 - 8) = *(_QWORD *)(v3 - 8);
      v4 -= 48;
      v3 -= 48;
    }
    while (v3 != v2);
  }
  a2[1] = v5;
  v7 = *result;
  *result = v5;
  a2[1] = v7;
  v8 = result[1];
  result[1] = a2[2];
  a2[2] = v8;
  v9 = result[2];
  result[2] = a2[3];
  a2[3] = v9;
  *a2 = a2[1];
  return result;
}

uint64_t std::__split_buffer<MIL2BNNS::GraphTensor>::~__split_buffer(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 16);
  if (v2 != v3)
  {
    do
    {
      v4 = v2 - 48;
      *(_QWORD *)(a1 + 16) = v2 - 48;
      if (*(char *)(v2 - 9) < 0)
      {
        operator delete(*(void **)(v2 - 32));
        v4 = *(_QWORD *)(a1 + 16);
      }
      v2 = v4;
    }
    while (v4 != v3);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void AUSpatialMap::~AUSpatialMap(AUSpatialMap *this)
{
  AUSpatialMap::~AUSpatialMap(this);
  JUMPOUT(0x1BCC95CECLL);
}

{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  uint64_t v19;
  void **v20;

  *(_QWORD *)this = &off_1E69D6FE0;
  v2 = (void *)*((_QWORD *)this + 145);
  if (v2)
  {
    *((_QWORD *)this + 146) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 142);
  if (v3)
  {
    *((_QWORD *)this + 143) = v3;
    operator delete(v3);
  }
  v4 = (void *)*((_QWORD *)this + 139);
  if (v4)
  {
    *((_QWORD *)this + 140) = v4;
    operator delete(v4);
  }
  v5 = (void *)*((_QWORD *)this + 134);
  if (v5)
  {
    *((_QWORD *)this + 135) = v5;
    operator delete(v5);
  }
  v6 = (void *)*((_QWORD *)this + 129);
  if (v6)
  {
    *((_QWORD *)this + 130) = v6;
    operator delete(v6);
  }
  v7 = (void *)*((_QWORD *)this + 124);
  if (v7)
  {
    *((_QWORD *)this + 125) = v7;
    operator delete(v7);
  }
  v20 = (void **)((char *)this + 952);
  std::vector<CLiteMatrix>::__destroy_vector::operator()[abi:ne180100](&v20);
  v8 = (void *)*((_QWORD *)this + 116);
  if (v8)
  {
    *((_QWORD *)this + 117) = v8;
    operator delete(v8);
  }
  v9 = (void *)*((_QWORD *)this + 111);
  if (v9)
  {
    *((_QWORD *)this + 112) = v9;
    operator delete(v9);
  }
  v10 = (void *)*((_QWORD *)this + 106);
  if (v10)
  {
    *((_QWORD *)this + 107) = v10;
    operator delete(v10);
  }
  v11 = (void *)*((_QWORD *)this + 103);
  if (v11)
  {
    *((_QWORD *)this + 104) = v11;
    operator delete(v11);
  }
  v12 = (void *)*((_QWORD *)this + 100);
  if (v12)
  {
    *((_QWORD *)this + 101) = v12;
    operator delete(v12);
  }
  v13 = (void *)*((_QWORD *)this + 95);
  if (v13)
  {
    *((_QWORD *)this + 96) = v13;
    operator delete(v13);
  }
  v14 = (void *)*((_QWORD *)this + 92);
  if (v14)
  {
    *((_QWORD *)this + 93) = v14;
    operator delete(v14);
  }
  v15 = (void *)*((_QWORD *)this + 88);
  if (v15)
  {
    *((_QWORD *)this + 89) = v15;
    operator delete(v15);
  }
  v16 = (void *)*((_QWORD *)this + 83);
  if (v16)
  {
    *((_QWORD *)this + 84) = v16;
    operator delete(v16);
  }
  v17 = (void *)*((_QWORD *)this + 78);
  if (v17)
  {
    *((_QWORD *)this + 79) = v17;
    operator delete(v17);
  }
  v20 = (void **)((char *)this + 584);
  std::vector<CLiteMatrix>::__destroy_vector::operator()[abi:ne180100](&v20);
  v18 = (void *)*((_QWORD *)this + 70);
  if (v18)
  {
    *((_QWORD *)this + 71) = v18;
    operator delete(v18);
  }
  v19 = *((_QWORD *)this + 67);
  *((_QWORD *)this + 67) = 0;
  if (v19)
    (*(void (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
  std::unique_ptr<ParametricProcessor>::reset[abi:ne180100]((ParametricProcessor **)this + 66, 0);
  ausdk::AUBase::~AUBase(this);
}

uint64_t AUSpatialMap::Initialize(AUSpatialMap *this)
{
  ausdk::AUScope *v2;
  uint64_t Element;
  __int128 v4;
  uint64_t v5;
  __int128 v6;
  const AudioStreamBasicDescription *v7;
  uint64_t result;
  NSObject *v9;
  NSObject *v10;
  const char *v11;
  int v12;
  int v13;
  uint64_t v14;
  double v15;
  uint64_t v16;
  int v17;
  int v18;
  afSTFTWrapper *v19;
  uint64_t v20;
  float v21;
  uint64_t FilterbandCenterFrequencies;
  uint64_t v23;
  int v24;
  float *v25;
  float v26;
  float *v27;
  uint64_t v28;
  int v29;
  float v30;
  uint64_t v31;
  void *v32;
  _QWORD *v33;
  void *v34;
  void *v35;
  _QWORD *v36;
  void *v37;
  _QWORD *v38;
  int v39;
  void **v40;
  _QWORD *v41;
  float *v42;
  float v43;
  int i;
  float *v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  unint64_t v49;
  char *v50;
  float *v51;
  float *v52;
  int v53;
  int v54;
  void **v55;
  _QWORD *v56;
  float *v57;
  int v58;
  float v59;
  float *v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  unint64_t v64;
  char *v65;
  float *v66;
  float *v67;
  int v68;
  uint64_t v69;
  unint64_t v70;
  uint64_t v71;
  void *v72;
  void *v73;
  void *v74;
  unint64_t v75;
  CLiteMatrix *v76;
  float v77;
  uint64_t v78;
  uint64_t v79;
  float v80;
  float v81;
  int v82;
  float v83;
  float v84;
  std::vector<int>::pointer begin;
  std::vector<int>::pointer end;
  float v87;
  int v88;
  float v89;
  float v90;
  std::vector<int>::pointer v91;
  std::vector<int>::pointer v92;
  float v93;
  uint64_t v94;
  float *v95;
  float *v96;
  float *v97;
  float *v98;
  float v99;
  float v100;
  float *v101;
  float *v102;
  float *v103;
  float v104;
  float v105;
  uint64_t v106;
  float *v107;
  float v108;
  float v109;
  float *v110;
  float *v111;
  float *v112;
  BOOL v113;
  uint64_t v114;
  float v115;
  float v116;
  float *v117;
  float *v118;
  float *v119;
  float v120;
  float v121;
  uint64_t v122;
  float *v123;
  float v124;
  float v125;
  int *v126;
  BOOL v127;
  std::vector<int>::pointer v128;
  int v129;
  std::vector<int>::pointer v130;
  int v131;
  int v132;
  BOOL v133;
  std::vector<int>::pointer v134;
  int *v135;
  BOOL v136;
  std::vector<int>::pointer v137;
  int v138;
  std::vector<int>::pointer v139;
  int v140;
  int v141;
  BOOL v142;
  uint64_t v143;
  float *v144;
  float v145;
  float *v146;
  float *v147;
  float v148;
  float *v149;
  float *v150;
  float *v151;
  float v152;
  float v153;
  _DWORD *v154;
  ParametricProcessor *v155;
  std::vector<int>::pointer v156;
  unint64_t v157;
  unint64_t v158;
  uint64_t v159;
  uint64_t v160;
  AudioStreamBasicDescription v161;
  __int128 v162;
  __int128 v163;
  uint64_t v164;
  float v165;
  float v166;
  float __C;
  float __B;
  std::vector<int> v169;
  std::vector<int> v170;
  void *v171;
  void *v172;
  uint64_t v173;
  _BYTE buf[32];
  __int128 v175;
  char v176;
  __int128 v177;
  uint64_t v178;
  int v179;
  __int128 v180;
  __int128 v181;
  int v182;
  uint64_t v183;
  int v184;
  uint64_t v185;
  int v186;
  CFTypeRef v187;
  CFTypeRef cf;
  __int128 v189;
  uint64_t v190;
  int v191;
  char v192;
  int v193;
  __int128 v194;
  char v195;
  uint64_t v196;
  void *__p[6];

  __p[3] = *(void **)MEMORY[0x1E0C80C00];
  v2 = (AUSpatialMap *)((char *)this + 80);
  Element = ausdk::AUScope::SafeGetElement((AUSpatialMap *)((char *)this + 80), 0);
  v4 = *(_OWORD *)(Element + 96);
  v162 = *(_OWORD *)(Element + 80);
  v163 = v4;
  v164 = *(_QWORD *)(Element + 112);
  v5 = ausdk::AUScope::SafeGetElement((AUSpatialMap *)((char *)this + 128), 0);
  v6 = *(_OWORD *)(v5 + 96);
  *(_OWORD *)&v161.mSampleRate = *(_OWORD *)(v5 + 80);
  *(_OWORD *)&v161.mBytesPerPacket = v6;
  *(_QWORD *)&v161.mBitsPerChannel = *(_QWORD *)(v5 + 112);
  if (!CAStreamBasicDescription::IsEquivalent((CAStreamBasicDescription *)&v162, &v161, v7))
  {
    if (AUSpatialMapLogScope(void)::once != -1)
      dispatch_once(&AUSpatialMapLogScope(void)::once, &__block_literal_global_14);
    if (AUSpatialMapLogScope(void)::scope)
    {
      v10 = *(NSObject **)AUSpatialMapLogScope(void)::scope;
      if (!*(_QWORD *)AUSpatialMapLogScope(void)::scope)
        return 4294956428;
    }
    else
    {
      v10 = MEMORY[0x1E0C81028];
    }
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 136315394;
      *(_QWORD *)&buf[4] = "AUSpatialMap.cpp";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 69;
      v11 = "%25s:%-5d Can't handle different in/out formats\n";
LABEL_25:
      _os_log_impl(&dword_1B5ED0000, v10, OS_LOG_TYPE_DEBUG, v11, buf, 0x12u);
    }
    return 4294956428;
  }
  if (HIDWORD(v163) != 4)
  {
    if (AUSpatialMapLogScope(void)::once != -1)
      dispatch_once(&AUSpatialMapLogScope(void)::once, &__block_literal_global_14);
    if (AUSpatialMapLogScope(void)::scope)
    {
      v10 = *(NSObject **)AUSpatialMapLogScope(void)::scope;
      if (!*(_QWORD *)AUSpatialMapLogScope(void)::scope)
        return 4294956428;
    }
    else
    {
      v10 = MEMORY[0x1E0C81028];
    }
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 136315394;
      *(_QWORD *)&buf[4] = "AUSpatialMap.cpp";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 75;
      v11 = "%25s:%-5d Can't handle more than 4 input channels\n";
      goto LABEL_25;
    }
    return 4294956428;
  }
  result = AUSpatialMap::DeviceSupportsAU(this);
  if (!(_DWORD)result)
    return result;
  if (AUSpatialMapLogScope(void)::once != -1)
    dispatch_once(&AUSpatialMapLogScope(void)::once, &__block_literal_global_14);
  if (AUSpatialMapLogScope(void)::scope)
  {
    v9 = *(NSObject **)AUSpatialMapLogScope(void)::scope;
    if (!*(_QWORD *)AUSpatialMapLogScope(void)::scope)
      goto LABEL_37;
  }
  else
  {
    v9 = MEMORY[0x1E0C81028];
  }
  if (os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG))
  {
    if (AUSpatialMap::DeviceScreenWidth(void)::once != -1)
      dispatch_once(&AUSpatialMap::DeviceScreenWidth(void)::once, &__block_literal_global_10625);
    v12 = AUSpatialMap::DeviceScreenWidth(void)::deviceScreenWidth;
    if (AUSpatialMap::DeviceScreenHeight(void)::once != -1)
      dispatch_once(&AUSpatialMap::DeviceScreenHeight(void)::once, &__block_literal_global_4);
    v13 = AUSpatialMap::DeviceScreenHeight(void)::deviceScreenHeight;
    if (AUSpatialMap::DeviceScreenScale(void)::once != -1)
      dispatch_once(&AUSpatialMap::DeviceScreenScale(void)::once, &__block_literal_global_8);
    *(_DWORD *)buf = 136316162;
    *(_QWORD *)&buf[4] = "AUSpatialMap.cpp";
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = 84;
    *(_WORD *)&buf[18] = 1024;
    *(_DWORD *)&buf[20] = v12;
    *(_WORD *)&buf[24] = 1024;
    *(_DWORD *)&buf[26] = v13;
    *(_WORD *)&buf[30] = 2048;
    *(double *)&v175 = *(float *)&AUSpatialMap::DeviceScreenScale(void)::deviceScreenScale;
    _os_log_impl(&dword_1B5ED0000, v9, OS_LOG_TYPE_DEBUG, "%25s:%-5d Device supports AU. { screenWidth=%d, screenHeight=%d, screenScale=%f }", buf, 0x28u);
  }
LABEL_37:
  v14 = ausdk::AUScope::SafeGetElement(v2, 0);
  v15 = *(double *)(v14 + 80);
  v16 = *(unsigned int *)(v14 + 108);
  v17 = *((_DWORD *)this + 297);
  v18 = *((_DWORD *)this + 296);
  v19 = (afSTFTWrapper *)operator new();
  afSTFTWrapper::afSTFTWrapper(v19, v16, 1u, *((_DWORD *)this + 296), v17 / v18, 1, 1);
  v20 = *((_QWORD *)this + 67);
  *((_QWORD *)this + 67) = v19;
  if (v20)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v20 + 8))(v20);
    v19 = (afSTFTWrapper *)*((_QWORD *)this + 67);
  }
  v21 = v15;
  FilterbandCenterFrequencies = afSTFTWrapper::getFilterbandCenterFrequencies(v19, v21);
  v172 = 0;
  v173 = 0;
  v171 = 0;
  std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(&v171, *(const void **)FilterbandCenterFrequencies, *(_QWORD *)(FilterbandCenterFrequencies + 8), (uint64_t)(*(_QWORD *)(FilterbandCenterFrequencies + 8) - *(_QWORD *)FilterbandCenterFrequencies) >> 2);
  v23 = *(unsigned int *)(*((_QWORD *)this + 67) + 8);
  if ((int)v23 >= 1)
  {
    v24 = 0;
    v25 = (float *)v171;
    v26 = *((float *)this + 300);
    v27 = (float *)v171;
    v28 = *(unsigned int *)(*((_QWORD *)this + 67) + 8);
    do
    {
      if (*v27 <= v26)
        *((_DWORD *)this + 298) = v24++;
      ++v27;
      --v28;
    }
    while (v28);
    v29 = 0;
    v30 = *((float *)this + 301);
    v31 = v23;
    do
    {
      if (*v25 <= v30)
        *((_DWORD *)this + 299) = v29++;
      ++v25;
      --v31;
    }
    while (v31);
  }
  LiteMatrix<float>::LiteMatrix((uint64_t)buf, v16, *((int *)this + 297));
  *((_OWORD *)this + 34) = *(_OWORD *)buf;
  v32 = (void *)*((_QWORD *)this + 70);
  if (v32)
  {
    *((_QWORD *)this + 71) = v32;
    operator delete(v32);
    *((_QWORD *)this + 70) = 0;
    *((_QWORD *)this + 71) = 0;
    *((_QWORD *)this + 72) = 0;
  }
  *((_OWORD *)this + 35) = *(_OWORD *)&buf[16];
  *((_QWORD *)this + 72) = v175;
  CLiteMatrix::CLiteMatrix((CLiteMatrix *)buf, v16, *((_DWORD *)this + 297) / *((_DWORD *)this + 296));
  std::vector<CLiteMatrix>::vector(&v170, (int)v23, (uint64_t)buf);
  std::vector<CLiteMatrix>::__vdeallocate((uint64_t *)this + 73);
  *(std::vector<int> *)((char *)this + 584) = v170;
  memset(&v170, 0, sizeof(v170));
  v169.__begin_ = (std::vector<int>::pointer)&v170;
  std::vector<CLiteMatrix>::__destroy_vector::operator()[abi:ne180100]((void ***)&v169);
  if (*(_QWORD *)&buf[16])
  {
    *(_QWORD *)&buf[24] = *(_QWORD *)&buf[16];
    operator delete(*(void **)&buf[16]);
  }
  LiteMatrix<float>::LiteMatrix((uint64_t)buf, 1, *((_DWORD *)this + 297) / *((_DWORD *)this + 296));
  *(_OWORD *)((char *)this + 648) = *(_OWORD *)buf;
  v33 = (_QWORD *)((char *)this + 664);
  v34 = (void *)*((_QWORD *)this + 83);
  if (v34)
  {
    *((_QWORD *)this + 84) = v34;
    operator delete(v34);
    *v33 = 0;
    *((_QWORD *)this + 84) = 0;
    *((_QWORD *)this + 85) = 0;
  }
  *(_OWORD *)v33 = *(_OWORD *)&buf[16];
  *((_QWORD *)this + 85) = v175;
  CLiteMatrix::CLiteMatrix((CLiteMatrix *)buf, v16, *((_DWORD *)this + 297) / *((_DWORD *)this + 296));
  *((_OWORD *)this + 43) = *(_OWORD *)buf;
  v35 = (void *)*((_QWORD *)this + 88);
  if (v35)
  {
    *((_QWORD *)this + 89) = v35;
    operator delete(v35);
    *((_QWORD *)this + 88) = 0;
    *((_QWORD *)this + 89) = 0;
    *((_QWORD *)this + 90) = 0;
  }
  *((_OWORD *)this + 44) = *(_OWORD *)&buf[16];
  *((_QWORD *)this + 90) = v175;
  std::vector<float>::vector(buf, *((_DWORD *)this + 297) / *((_DWORD *)this + 296));
  v157 = v16;
  v159 = (int)v23;
  v36 = (_QWORD *)((char *)this + 888);
  v38 = (_QWORD *)((char *)this + 824);
  v37 = (void *)*((_QWORD *)this + 103);
  if (v37)
  {
    *((_QWORD *)this + 104) = v37;
    operator delete(v37);
    *v38 = 0;
    *((_QWORD *)this + 104) = 0;
    *((_QWORD *)this + 105) = 0;
  }
  v39 = 0;
  *(_OWORD *)v38 = *(_OWORD *)buf;
  *((_QWORD *)this + 105) = *(_QWORD *)&buf[16];
  v40 = (void **)((char *)this + 736);
  v41 = (_QWORD *)((char *)this + 752);
  v42 = (float *)*((_QWORD *)this + 93);
  v43 = -90.0;
  do
  {
    for (i = 0; i != 23; ++i)
    {
      if ((unint64_t)v42 >= *v41)
      {
        v45 = (float *)*v40;
        v46 = ((char *)v42 - (_BYTE *)*v40) >> 2;
        v47 = v46 + 1;
        if ((unint64_t)(v46 + 1) >> 62)
LABEL_196:
          std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
        v48 = *v41 - (_QWORD)v45;
        if (v48 >> 1 > v47)
          v47 = v48 >> 1;
        if ((unint64_t)v48 >= 0x7FFFFFFFFFFFFFFCLL)
          v49 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v49 = v47;
        if (v49)
        {
          v50 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>((uint64_t)this + 752, v49);
          v42 = (float *)*((_QWORD *)this + 93);
          v45 = (float *)*((_QWORD *)this + 92);
        }
        else
        {
          v50 = 0;
        }
        v51 = (float *)&v50[4 * v46];
        *v51 = v43;
        v52 = v51 + 1;
        while (v42 != v45)
        {
          v53 = *((_DWORD *)v42-- - 1);
          *((_DWORD *)v51-- - 1) = v53;
        }
        *((_QWORD *)this + 92) = v51;
        *((_QWORD *)this + 93) = v52;
        *((_QWORD *)this + 94) = &v50[4 * v49];
        if (v45)
          operator delete(v45);
        v42 = v52;
      }
      else
      {
        *v42++ = v43;
      }
      *((_QWORD *)this + 93) = v42;
    }
    v43 = v43 + 4.0;
    ++v39;
  }
  while (v39 != 46);
  v54 = 0;
  v55 = (void **)((char *)this + 760);
  v56 = (_QWORD *)((char *)this + 776);
  v57 = (float *)*((_QWORD *)this + 96);
  do
  {
    v58 = 0;
    v59 = -90.0;
    do
    {
      if ((unint64_t)v57 >= *v56)
      {
        v60 = (float *)*v55;
        v61 = ((char *)v57 - (_BYTE *)*v55) >> 2;
        v62 = v61 + 1;
        if ((unint64_t)(v61 + 1) >> 62)
          goto LABEL_196;
        v63 = *v56 - (_QWORD)v60;
        if (v63 >> 1 > v62)
          v62 = v63 >> 1;
        if ((unint64_t)v63 >= 0x7FFFFFFFFFFFFFFCLL)
          v64 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v64 = v62;
        if (v64)
        {
          v65 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>((uint64_t)this + 776, v64);
          v57 = (float *)*((_QWORD *)this + 96);
          v60 = (float *)*((_QWORD *)this + 95);
        }
        else
        {
          v65 = 0;
        }
        v66 = (float *)&v65[4 * v61];
        *v66 = v59;
        v67 = v66 + 1;
        while (v57 != v60)
        {
          v68 = *((_DWORD *)v57-- - 1);
          *((_DWORD *)v66-- - 1) = v68;
        }
        *((_QWORD *)this + 95) = v66;
        *((_QWORD *)this + 96) = v67;
        *((_QWORD *)this + 97) = &v65[4 * v64];
        if (v60)
          operator delete(v60);
        v57 = v67;
      }
      else
      {
        *v57++ = v59;
      }
      *((_QWORD *)this + 96) = v57;
      v59 = v59 + 8.0;
      ++v58;
    }
    while (v58 != 23);
    ++v54;
  }
  while (v54 != 46);
  v69 = *((_QWORD *)this + 93) - *((_QWORD *)this + 92);
  v70 = ((uint64_t)v57 - *((_QWORD *)this + 95)) >> 2;
  if (v70 >= v69 >> 2)
    v71 = v69 >> 2;
  else
    LODWORD(v71) = v70;
  *((_DWORD *)this + 182) = v71;
  LiteMatrix<float>::LiteMatrix((uint64_t)buf, 1, *((_DWORD *)this + 297) / *((_DWORD *)this + 296));
  *((_OWORD *)this + 49) = *(_OWORD *)buf;
  v72 = (void *)*((_QWORD *)this + 100);
  if (v72)
  {
    *((_QWORD *)this + 101) = v72;
    operator delete(v72);
    *((_QWORD *)this + 100) = 0;
    *((_QWORD *)this + 101) = 0;
    *((_QWORD *)this + 102) = 0;
  }
  *((_OWORD *)this + 50) = *(_OWORD *)&buf[16];
  *((_QWORD *)this + 102) = v175;
  std::vector<float>::resize((uint64_t)this + 848, *((int *)this + 182));
  LiteMatrix<float>::LiteMatrix((uint64_t)buf, v159, 1);
  *(_OWORD *)((char *)this + 872) = *(_OWORD *)buf;
  v73 = (void *)*((_QWORD *)this + 111);
  if (v73)
  {
    *((_QWORD *)this + 112) = v73;
    operator delete(v73);
    *v36 = 0;
    *((_QWORD *)this + 112) = 0;
    *((_QWORD *)this + 113) = 0;
  }
  *(_OWORD *)v36 = *(_OWORD *)&buf[16];
  *((_QWORD *)this + 113) = v175;
  LiteMatrix<float>::LiteMatrix((uint64_t)buf, 1, 1);
  *((_OWORD *)this + 57) = *(_OWORD *)buf;
  v74 = (void *)*((_QWORD *)this + 116);
  if (v74)
  {
    *((_QWORD *)this + 117) = v74;
    operator delete(v74);
    *((_QWORD *)this + 116) = 0;
    *((_QWORD *)this + 117) = 0;
    *((_QWORD *)this + 118) = 0;
  }
  *((_OWORD *)this + 58) = *(_OWORD *)&buf[16];
  *((_QWORD *)this + 118) = v175;
  v75 = *((int *)this + 182);
  CLiteMatrix::CLiteMatrix((CLiteMatrix *)buf, 4, v157);
  std::vector<CLiteMatrix>::vector(&v170, v75, (uint64_t)buf);
  std::vector<CLiteMatrix>::__vdeallocate((uint64_t *)this + 119);
  *(std::vector<int> *)((char *)this + 952) = v170;
  memset(&v170, 0, sizeof(v170));
  v169.__begin_ = (std::vector<int>::pointer)&v170;
  std::vector<CLiteMatrix>::__destroy_vector::operator()[abi:ne180100]((void ***)&v169);
  if (*(_QWORD *)&buf[16])
  {
    *(_QWORD *)&buf[24] = *(_QWORD *)&buf[16];
    operator delete(*(void **)&buf[16]);
  }
  if (*((int *)this + 182) >= 1)
  {
    v78 = 0;
    v79 = 0;
    do
    {
      v80 = *((float *)*v40 + v79) * 3.14159265 / 180.0;
      v81 = (float)-*((float *)*v55 + v79) * 3.14159265 / 180.0;
      RotationUtilities::yawPitchRoll2RotationMatrixFOA((RotationUtilities *)(*((_QWORD *)this + 119) + v78), v76, v80, v81, v77);
      ++v79;
      v78 += 40;
    }
    while (v79 < *((int *)this + 182));
  }
  v82 = *((_DWORD *)this + 302);
  if (v82 <= 0)
  {
    if (AUSpatialMap::DeviceScreenWidth(void)::once != -1)
      dispatch_once(&AUSpatialMap::DeviceScreenWidth(void)::once, &__block_literal_global_10625);
    v84 = (float)AUSpatialMap::DeviceScreenWidth(void)::deviceScreenWidth;
    if (AUSpatialMap::DeviceScreenScale(void)::once != -1)
      dispatch_once(&AUSpatialMap::DeviceScreenScale(void)::once, &__block_literal_global_8);
    v83 = v84 / *(float *)&AUSpatialMap::DeviceScreenScale(void)::deviceScreenScale;
  }
  else
  {
    v83 = (float)v82;
  }
  *(_DWORD *)buf = 0;
  std::vector<int>::vector(&v170, v83, (const std::vector<int>::value_type *)buf);
  begin = v170.__begin_;
  end = v170.__end_;
  if (v170.__begin_ != v170.__end_)
  {
    v87 = -1.0;
    do
    {
      v87 = v87 + 1.0;
      *begin++ = (int)v87;
    }
    while (begin != end);
  }
  v88 = *((_DWORD *)this + 303);
  if (v88 < 1)
  {
    if (AUSpatialMap::DeviceScreenHeight(void)::once != -1)
      dispatch_once(&AUSpatialMap::DeviceScreenHeight(void)::once, &__block_literal_global_4);
    v90 = (float)AUSpatialMap::DeviceScreenHeight(void)::deviceScreenHeight;
    if (AUSpatialMap::DeviceScreenScale(void)::once != -1)
      dispatch_once(&AUSpatialMap::DeviceScreenScale(void)::once, &__block_literal_global_8);
    v89 = v90 / *(float *)&AUSpatialMap::DeviceScreenScale(void)::deviceScreenScale;
  }
  else
  {
    v89 = (float)v88;
  }
  *(_DWORD *)buf = 0;
  std::vector<int>::vector(&v169, v89, (const std::vector<int>::value_type *)buf);
  v91 = v169.__begin_;
  v92 = v169.__end_;
  if (v169.__begin_ != v169.__end_)
  {
    v93 = 0.0;
    do
    {
      v93 = v93 + 1.0;
      *v91++ = (int)v93;
    }
    while (v91 != v92);
  }
  __C = 180.0;
  __B = -180.0;
  v165 = 90.0;
  v166 = -90.0;
  vDSP_vclip(*((const float **)this + 92), 1, &__B, &__C, *((float **)this + 92), 1, *((int *)this + 182));
  vDSP_vclip(*((const float **)this + 95), 1, &v166, &v165, *((float **)this + 95), 1, *((int *)this + 182));
  v94 = 0;
  v95 = (float *)*((_QWORD *)this + 92);
  v96 = (float *)*((_QWORD *)this + 93);
  if (v95 == v96)
  {
    v98 = (float *)*((_QWORD *)this + 92);
  }
  else
  {
    v97 = v95 + 1;
    v98 = (float *)*((_QWORD *)this + 92);
    if (v95 + 1 != v96)
    {
      v99 = *v95;
      v100 = *v95;
      v101 = v95 + 1;
      v102 = (float *)*((_QWORD *)this + 92);
      v103 = v95 + 1;
      do
      {
        v104 = *v103++;
        v105 = v104;
        if (v100 < v104)
        {
          v100 = v105;
          v102 = v101;
        }
        v101 = v103;
      }
      while (v103 != v96);
      v106 = (char *)v102 - (char *)v95;
      v98 = (float *)*((_QWORD *)this + 92);
      v107 = v95 + 1;
      do
      {
        v108 = *v107++;
        v109 = v108;
        if (v108 < v99)
        {
          v99 = v109;
          v98 = v97;
        }
        v97 = v107;
      }
      while (v107 != v96);
      v94 = v106 >> 2;
    }
  }
  v110 = (float *)*((_QWORD *)this + 95);
  v111 = (float *)*((_QWORD *)this + 96);
  v112 = v110 + 1;
  v113 = v110 == v111 || v112 == v111;
  v158 = *((_QWORD *)this + 95);
  if (v113)
  {
    v114 = 0;
  }
  else
  {
    v115 = *v110;
    v116 = *v110;
    v117 = v110 + 1;
    v118 = (float *)*((_QWORD *)this + 95);
    v119 = v110 + 1;
    do
    {
      v120 = *v119++;
      v121 = v120;
      if (v116 < v120)
      {
        v116 = v121;
        v118 = v117;
      }
      v117 = v119;
    }
    while (v119 != v111);
    v122 = (char *)v118 - (char *)v110;
    v123 = v110 + 1;
    do
    {
      v124 = *v123++;
      v125 = v124;
      if (v124 < v115)
      {
        v115 = v125;
        v110 = v112;
      }
      v112 = v123;
    }
    while (v123 != v111);
    v114 = v122 >> 2;
  }
  v126 = v170.__begin_ + 1;
  v127 = v170.__begin_ == v170.__end_ || v126 == v170.__end_;
  v128 = v170.__begin_;
  if (!v127)
  {
    v129 = *v170.__begin_;
    v128 = v170.__begin_;
    v130 = v170.__begin_ + 1;
    do
    {
      v132 = *v130++;
      v131 = v132;
      v133 = v129 < v132;
      if (v129 <= v132)
        v129 = v131;
      if (v133)
        v128 = v126;
      v126 = v130;
    }
    while (v130 != v170.__end_);
  }
  v160 = *((_QWORD *)this + 92);
  v134 = v169.__begin_;
  v135 = v169.__begin_ + 1;
  v136 = v169.__begin_ == v169.__end_ || v135 == v169.__end_;
  v137 = v169.__begin_;
  if (!v136)
  {
    v138 = *v169.__begin_;
    v137 = v169.__begin_;
    v139 = v169.__begin_ + 1;
    do
    {
      v141 = *v139++;
      v140 = v141;
      v142 = v138 < v141;
      if (v138 <= v141)
        v138 = v140;
      if (v142)
        v137 = v135;
      v135 = v139;
    }
    while (v139 != v169.__end_);
  }
  v156 = v170.__begin_;
  std::vector<float>::resize((uint64_t)this + 1136, *((int *)this + 182));
  std::vector<float>::resize((uint64_t)this + 1160, *((int *)this + 182));
  v143 = *((unsigned int *)this + 182);
  if ((int)v143 >= 1)
  {
    v144 = (float *)*v40;
    v145 = (float)v169.__begin_[v137 - v134];
    v146 = (float *)*((_QWORD *)this + 145);
    v147 = (float *)*v55;
    v148 = (float)v170.__begin_[v128 - v156];
    v149 = (float *)*((_QWORD *)this + 142);
    v150 = (float *)*v40;
    v151 = (float *)*v55;
    do
    {
      v152 = *v150++;
      *v146++ = roundf((float)((float)(v152 - v144[((uint64_t)v98 - v160) >> 2]) * v145)/ (float)(v144[v94] - v144[((uint64_t)v98 - v160) >> 2]));
      v153 = *v151++;
      *v149++ = roundf((float)((float)(v153 - v147[(uint64_t)((uint64_t)v110 - v158) >> 2]) * v148)/ (float)(v147[v114] - v147[(uint64_t)((uint64_t)v110 - v158) >> 2]));
      --v143;
    }
    while (v143);
  }
  buf[0] = 0;
  *(_QWORD *)&buf[4] = 0xBF800000467A0000;
  *(_DWORD *)&buf[12] = 1195081728;
  *(_QWORD *)&buf[16] = 0x8000000800;
  *(_WORD *)&buf[24] = 257;
  v175 = xmmword_1B66A08D0;
  v176 = 1;
  v177 = xmmword_1B66A08E0;
  v178 = 3;
  v179 = 3;
  v180 = xmmword_1B66A08F0;
  v181 = xmmword_1B66A0900;
  v183 = 0x3E4CCCCD3F800000;
  v182 = 30;
  v184 = 1056964608;
  v185 = 0x100000001;
  v186 = 0;
  v187 = 0;
  cf = 0;
  v189 = xmmword_1B66A0910;
  v190 = 0xA00000003;
  v191 = 2;
  v192 = 1;
  v193 = 1;
  v194 = xmmword_1B66A0920;
  v195 = 0;
  v196 = 0x100000000;
  std::vector<AudioChannelLayout>::vector(__p, 1uLL);
  v154 = __p[0];
  *(_QWORD *)__p[0] = 0;
  v154[2] = 0;
  *(float *)&buf[12] = v21;
  *(int32x2_t *)&buf[16] = vrev64_s32(*(int32x2_t *)((char *)this + 1184));
  v155 = (ParametricProcessor *)operator new();
  ParametricProcessor::ParametricProcessor(v155, (const ParametricProcessor::pars *)buf);
  std::unique_ptr<ParametricProcessor>::reset[abi:ne180100]((ParametricProcessor **)this + 66, v155);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  if (cf)
    CFRelease(cf);
  if (v187)
    CFRelease(v187);
  if (v169.__begin_)
  {
    v169.__end_ = v169.__begin_;
    operator delete(v169.__begin_);
  }
  if (v170.__begin_)
  {
    v170.__end_ = v170.__begin_;
    operator delete(v170.__begin_);
  }
  if (v171)
  {
    v172 = v171;
    operator delete(v171);
  }
  return 0;
}

void sub_1B63885B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *__p,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,uint64_t a33,void *a34,uint64_t a35,uint64_t a36,char a37,uint64_t a38,uint64_t a39,uint64_t a40)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t AUSpatialMap::GetPropertyInfo(AUSpatialMap *this, int a2, int a3, unsigned int a4, unsigned int *a5, BOOL *a6)
{
  uint64_t result;
  BOOL v8;
  unsigned int v9;
  int v10;
  int v11;

  if (a3)
    return 4294956417;
  result = 4294956417;
  if (a2 > 1936548727)
  {
    if (a2 > 1937141111)
    {
      switch(a2)
      {
        case 1937141112:
          v8 = 0;
          v10 = *((_DWORD *)this + 286);
          v11 = *((_DWORD *)this + 284);
          break;
        case 1937141113:
          v8 = 0;
          v10 = *((_DWORD *)this + 292);
          v11 = *((_DWORD *)this + 290);
          break;
        case 1937141869:
          v8 = 0;
          v10 = *((_DWORD *)this + 214);
          v11 = *((_DWORD *)this + 212);
          break;
        default:
          return result;
      }
      v9 = (v10 - v11) & 0xFFFFFFFC;
      goto LABEL_23;
    }
    if (a2 != 1936548728 && a2 != 1936548729)
      return result;
LABEL_19:
    v8 = 1;
    v9 = 4;
    goto LABEL_23;
  }
  if (a2 > 1836606309)
  {
    v8 = 0;
    v9 = 8;
    if (a2 != 1836606310 && a2 != 1836671846 && a2 != 1886217062)
      return result;
LABEL_23:
    result = 0;
    *a5 = v9;
    *a6 = v8;
    return result;
  }
  if (a2 == 21 || a2 == 3700)
    goto LABEL_19;
  return result;
}

uint64_t AUSpatialMap::GetProperty(AUSpatialMap *this, int a2, int a3, unsigned int a4, CFArrayRef *__dst)
{
  uint64_t result;
  int v8;
  const void *v9;
  uint64_t v10;
  char *v11;
  CFArrayRef CFArray;

  if (a3)
    return 4294956417;
  result = 4294956417;
  if (a2 > 1886217061)
  {
    if (a2 > 1937141112)
    {
      if (a2 == 1937141113)
      {
        v9 = (const void *)*((_QWORD *)this + 145);
        v10 = *((_QWORD *)this + 146);
      }
      else
      {
        if (a2 != 1937141869)
          return result;
        v9 = (const void *)*((_QWORD *)this + 106);
        v10 = *((_QWORD *)this + 107);
      }
    }
    else
    {
      if (a2 == 1886217062)
      {
        v11 = (char *)this + 848;
LABEL_22:
        CFArray = applesauce::CF::details::make_CFArrayRef<float>(v11);
        result = 0;
        *__dst = CFArray;
        return result;
      }
      if (a2 != 1937141112)
        return result;
      v9 = (const void *)*((_QWORD *)this + 142);
      v10 = *((_QWORD *)this + 143);
    }
    memcpy(__dst, v9, v10 - (_QWORD)v9);
    return 0;
  }
  if (a2 > 1836606309)
  {
    if (a2 == 1836606310)
    {
      v11 = (char *)this + 1136;
    }
    else
    {
      if (a2 != 1836671846)
        return result;
      v11 = (char *)this + 1160;
    }
    goto LABEL_22;
  }
  if (a2 == 21)
  {
    result = 0;
    v8 = *((unsigned __int8 *)this + 1216);
  }
  else
  {
    if (a2 != 3700)
      return result;
    result = 0;
    v8 = *((unsigned __int8 *)this + 376);
  }
  *(_DWORD *)__dst = v8;
  return result;
}

uint64_t AUSpatialMap::SetProperty(AUSpatialMap *this, int a2, int a3, unsigned int a4, _DWORD *a5, unsigned int a6)
{
  uint64_t result;

  if (a3)
    return 4294956417;
  result = 4294956417;
  if (a2 > 1936548727)
  {
    if (a2 == 1936548728)
    {
      result = 0;
      *((_DWORD *)this + 302) = *a5;
    }
    else if (a2 == 1936548729)
    {
      result = 0;
      *((_DWORD *)this + 303) = *a5;
    }
  }
  else if (a2 == 21)
  {
    if (a6 >= 4)
    {
      result = 0;
      *((_BYTE *)this + 1216) = *a5 != 0;
    }
    else
    {
      return 4294956445;
    }
  }
  else if (a2 == 3700)
  {
    result = 4294956445;
    if (a6 >= 4)
    {
      if (*(_BYTE *)a5)
        return 0;
      else
        return 4294956445;
    }
  }
  return result;
}

uint64_t AUSpatialMap::CanScheduleParameters(AUSpatialMap *this)
{
  return 0;
}

uint64_t AUSpatialMap::ProcessBufferLists(AUSpatialMap *this, unsigned int *a2, const AudioBufferList *a3, AudioBufferList *a4, unsigned int a5)
{
  unint64_t mNumberBuffers;
  uint64_t v11;
  unint64_t v12;
  size_t mDataByteSize;
  void *mData;
  void *v15;
  uint64_t Element;
  unint64_t v17;
  uint64_t v18;
  void **p_mData;
  uint64_t v20;
  unint64_t v21;
  void **v22;
  _DWORD *v23;
  int v24;
  uint64_t *v25;
  uint64_t v26;
  _OWORD *v27;
  CLiteMatrix *v28;
  int64_t v29;
  uint64_t v30;
  int64_t v31;
  int v32;
  uint64_t v33;
  float v34;
  float *v35;
  unint64_t v36;
  uint64_t v37;
  unint64_t i;
  float v39;
  float __C;

  if (AUSpatialMap::DeviceSupportsAU(this))
  {
    mNumberBuffers = a3->mNumberBuffers;
    if (mNumberBuffers == a4->mNumberBuffers && mNumberBuffers != 0)
    {
      v11 = 0;
      v12 = 0;
      do
      {
        mDataByteSize = a3->mBuffers[v11].mDataByteSize;
        if ((_DWORD)mDataByteSize == a4->mBuffers[v11].mDataByteSize)
        {
          mData = a3->mBuffers[v11].mData;
          v15 = a4->mBuffers[v11].mData;
          if (mData != v15)
          {
            memcpy(v15, mData, mDataByteSize);
            mNumberBuffers = a3->mNumberBuffers;
          }
        }
        ++v12;
        ++v11;
      }
      while (v12 < mNumberBuffers);
    }
    if (!*((_BYTE *)this + 1216))
    {
      Element = ausdk::AUScope::SafeGetElement((AUSpatialMap *)((char *)this + 80), 0);
      if (a5)
      {
        v17 = 0;
        v18 = *(unsigned int *)(Element + 108);
        p_mData = &a3->mBuffers[0].mData;
        v20 = a5;
        do
        {
          if ((_DWORD)v18)
          {
            v21 = 0;
            v22 = p_mData;
            do
            {
              v23 = *v22;
              v22 += 2;
              v24 = v23[v17];
              *(_DWORD *)LiteMatrix<float>::operator()((unint64_t *)this + 68, v21++, v17) = v24;
            }
            while (v18 != v21);
          }
          ++v17;
        }
        while (v17 != v20);
      }
      v25 = (uint64_t *)afSTFTWrapper::fltbAnalysisMatrix(*((afSTFTWrapper **)this + 67), (unint64_t *)this + 68);
      if ((uint64_t *)((char *)this + 584) != v25)
        std::vector<CLiteMatrix>::__assign_with_size[abi:ne180100]<CLiteMatrix*,CLiteMatrix*>((uint64_t *)this + 73, *v25, v25[1], 0xCCCCCCCCCCCCCCCDLL * ((v25[1] - *v25) >> 3));
      if (*((int *)this + 182) >= 1)
      {
        v26 = 0;
        v27 = (_OWORD *)((char *)this + 608);
        do
        {
          vDSP_vclr(*((float **)this + 111), 1, (uint64_t)(*((_QWORD *)this + 112) - *((_QWORD *)this + 111)) >> 2);
          v29 = *((int *)this + 299);
          if ((int)v29 < *((_DWORD *)this + 298))
          {
            do
            {
              v30 = *((_QWORD *)this + 73) + 40 * v29;
              *v27 = *(_OWORD *)v30;
              if (v27 != (_OWORD *)v30)
                std::vector<float>::__assign_with_size[abi:ne180100]<float const*,float const*>((char *)this + 624, *(char **)(v30 + 16), *(_QWORD *)(v30 + 24), (uint64_t)(*(_QWORD *)(v30 + 24) - *(_QWORD *)(v30 + 16)) >> 2);
              CLiteMatrix::MatrixMultiply((vDSP_Length *)(*((_QWORD *)this + 119) + 40 * v26), (AUSpatialMap *)((char *)this + 608), (AUSpatialMap *)((char *)this + 688), v28);
              ParametricProcessor::calculateFrameEnergy((vDSP_Length *)this + 86, (unint64_t *)this + 81);
              ParametricProcessor::calculateG(*((_QWORD *)this + 66), (vDSP_Length *)this + 86, (uint64_t)this + 648, (uint64_t)this + 784);
              if (*((_DWORD *)this + 297) / *((_DWORD *)this + 296) >= 1)
              {
                v31 = 0;
                do
                {
                  *(float *)(*((_QWORD *)this + 103) + 4 * v31) = (float)(*(float *)LiteMatrix<float>::operator()((unint64_t *)this + 98, 0, v31)* 1.5)* 0.25;
                  ++v31;
                  v32 = *((_DWORD *)this + 297) / *((_DWORD *)this + 296);
                }
                while (v31 < v32);
                if (v32 >= 1)
                {
                  v33 = 0;
                  do
                  {
                    v34 = *(float *)(*((_QWORD *)this + 103) + 4 * v33);
                    v35 = (float *)LiteMatrix<float>::operator()((unint64_t *)this + 109, v29, 0);
                    *v35 = v34 + *v35;
                    ++v33;
                  }
                  while (v33 < *((_DWORD *)this + 297) / *((_DWORD *)this + 296));
                }
              }
              ++v29;
            }
            while (v29 < *((int *)this + 298));
          }
          if (*((_QWORD *)this + 114) != 1)
            __assert_rtn("SumRows", "LiteMatrix.cpp", 255, "outputMatrix.NumRows()==1");
          v36 = *((_QWORD *)this + 115);
          if (v36 != *((_QWORD *)this + 110))
            __assert_rtn("SumRows", "LiteMatrix.cpp", 256, "outputMatrix.NumCols()==inputMatrix.NumCols()");
          if (v36)
          {
            v37 = 0;
            for (i = 0; i < v36; ++i)
            {
              __C = 0.0;
              vDSP_sve((const float *)(*((_QWORD *)this + 111) + v37), v36, &__C, *((_QWORD *)this + 109));
              v39 = __C;
              *(float *)LiteMatrix<float>::operator()((unint64_t *)this + 114, 0, i) = v39;
              v36 = *((_QWORD *)this + 110);
              v37 += 4;
            }
          }
          *(_DWORD *)(*((_QWORD *)this + 106) + 4 * v26++) = *(_DWORD *)LiteMatrix<float>::operator()((unint64_t *)this + 114, 0, 0);
        }
        while (v26 < *((int *)this + 182));
      }
    }
  }
  return 0;
}

uint64_t AUSpatialMap::Render(AUSpatialMap *this, unsigned int *a2, const AudioTimeStamp *a3, uint64_t a4)
{
  uint64_t result;
  uint64_t Element;
  uint64_t v10;
  ausdk::AUInputElement *v11;
  uint64_t BufferList;
  uint64_t v13;
  unsigned int v14;

  result = AUSpatialMap::DeviceSupportsAU(this);
  if ((_DWORD)result)
  {
    Element = ausdk::AUScope::SafeGetElement((AUSpatialMap *)((char *)this + 80), 0);
    v10 = ausdk::AUScope::SafeGetElement((AUSpatialMap *)((char *)this + 128), 0);
    v14 = 0;
    v11 = (ausdk::AUInputElement *)ausdk::AUScope::SafeGetElement((AUSpatialMap *)((char *)this + 80), 0);
    result = ausdk::AUInputElement::PullInput(v11, &v14, a3, 0, a4);
    if (!(_DWORD)result)
    {
      BufferList = ausdk::AUBufferList::GetBufferList((ausdk::AUBufferList *)(Element + 144));
      v13 = ausdk::AUBufferList::GetBufferList((ausdk::AUBufferList *)(v10 + 144));
      return (*(uint64_t (**)(AUSpatialMap *, unsigned int *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)this
                                                                                                  + 176))(this, a2, BufferList, v13, a4);
    }
  }
  return result;
}

double AUSpatialMap::GetTailTime(AUSpatialMap *this)
{
  return 0.0;
}

uint64_t AUSpatialMap::SupportsTail(AUSpatialMap *this)
{
  return 1;
}

BOOL AUSpatialMap::StreamFormatWritable(AUSpatialMap *this)
{
  return *((_BYTE *)this + 17) == 0;
}

uint64_t AUSpatialMap::SupportedNumChannels(AUSpatialMap *this, const AUChannelInfo **a2)
{
  if (a2)
    *a2 = (const AUChannelInfo *)&AUSpatialMap::SupportedNumChannels(AUChannelInfo const**)::sSupportedChannelConfigs;
  return 1;
}

BOOL AUSpatialMap::DeviceSupportsAU(AUSpatialMap *this)
{
  const __CFBoolean *v2;
  int Value;

  v2 = (const __CFBoolean *)MGCopyAnswer();
  Value = CFBooleanGetValue(v2);
  if (v2)
    CFRelease(v2);
  if (Value)
  {
    if (AUSpatialMap::DeviceScreenWidth(void)::once != -1)
      dispatch_once(&AUSpatialMap::DeviceScreenWidth(void)::once, &__block_literal_global_10625);
    if (AUSpatialMap::DeviceScreenWidth(void)::deviceScreenWidth)
    {
      if (AUSpatialMap::DeviceScreenHeight(void)::once != -1)
        dispatch_once(&AUSpatialMap::DeviceScreenHeight(void)::once, &__block_literal_global_4);
      if (AUSpatialMap::DeviceScreenHeight(void)::deviceScreenHeight)
        return 1;
    }
  }
  return *((_DWORD *)this + 302) || *((_DWORD *)this + 303);
}

void ___ZN12AUSpatialMap18DeviceScreenHeightEv_block_invoke()
{
  const __CFNumber *v0;
  const __CFNumber *v1;

  v0 = (const __CFNumber *)MGCopyAnswer();
  if (v0)
  {
    v1 = v0;
    CFNumberGetValue(v0, kCFNumberSInt32Type, &AUSpatialMap::DeviceScreenHeight(void)::deviceScreenHeight);
    CFRelease(v1);
  }
}

void ___ZN12AUSpatialMap17DeviceScreenWidthEv_block_invoke()
{
  const __CFNumber *v0;
  const __CFNumber *v1;

  v0 = (const __CFNumber *)MGCopyAnswer();
  if (v0)
  {
    v1 = v0;
    CFNumberGetValue(v0, kCFNumberSInt32Type, &AUSpatialMap::DeviceScreenWidth(void)::deviceScreenWidth);
    CFRelease(v1);
  }
}

std::vector<int> *__cdecl std::vector<int>::vector(std::vector<int> *this, std::vector<int>::size_type __n, const std::vector<int>::value_type *__x)
{
  std::vector<int>::pointer end;
  int *v7;
  std::vector<int>::size_type v8;

  this->__begin_ = 0;
  this->__end_ = 0;
  this->__end_cap_.__value_ = 0;
  if (__n)
  {
    std::vector<int>::__vallocate[abi:ne180100](this, __n);
    end = this->__end_;
    v7 = &end[__n];
    v8 = 4 * __n;
    do
    {
      *end++ = *__x;
      v8 -= 4;
    }
    while (v8);
    this->__end_ = v7;
  }
  return this;
}

void sub_1B63890B0(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void ___ZN12AUSpatialMap17DeviceScreenScaleEv_block_invoke()
{
  const __CFNumber *v0;
  const __CFNumber *v1;

  v0 = (const __CFNumber *)MGCopyAnswer();
  if (v0)
  {
    v1 = v0;
    CFNumberGetValue(v0, kCFNumberFloat32Type, &AUSpatialMap::DeviceScreenScale(void)::deviceScreenScale);
    CFRelease(v1);
  }
}

os_log_t ___ZL20AUSpatialMapLogScopev_block_invoke()
{
  _QWORD *v0;
  os_log_t result;

  v0 = (_QWORD *)operator new();
  v0[1] = 0;
  result = os_log_create("com.apple.spatialmap", "spatialmap");
  *v0 = result;
  AUSpatialMapLogScope(void)::scope = (uint64_t)v0;
  return result;
}

void AUMicIssueDetector::~AUMicIssueDetector(AUMicIssueDetector *this)
{
  AUMicIssueDetector::~AUMicIssueDetector(this);
  JUMPOUT(0x1BCC95CECLL);
}

{
  void *v2;
  void *v3;
  uint64_t v4;
  void *v5;
  void *v6;
  void **v7;

  *(_QWORD *)this = &off_1E69D7330;
  std::shared_ptr<vp::services::Telephony_Utility>::~shared_ptr[abi:ne180100]((uint64_t)this + 824);
  v7 = (void **)((char *)this + 792);
  std::vector<std::unique_ptr<DspLib::AlgorithmBaseNewParameters>>::__destroy_vector::operator()[abi:ne180100](&v7);
  v2 = (void *)*((_QWORD *)this + 94);
  if (v2)
  {
    *((_QWORD *)this + 95) = v2;
    operator delete(v2);
  }
  v7 = (void **)((char *)this + 728);
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v7);
  v7 = (void **)((char *)this + 704);
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v7);
  v3 = (void *)*((_QWORD *)this + 85);
  if (v3)
  {
    *((_QWORD *)this + 86) = v3;
    operator delete(v3);
  }
  v7 = (void **)((char *)this + 656);
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v7);
  v7 = (void **)((char *)this + 632);
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v7);
  v4 = *((_QWORD *)this + 78);
  *((_QWORD *)this + 78) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  v5 = (void *)*((_QWORD *)this + 69);
  if (v5)
  {
    *((_QWORD *)this + 70) = v5;
    operator delete(v5);
  }
  v6 = (void *)*((_QWORD *)this + 66);
  if (v6)
  {
    *((_QWORD *)this + 67) = v6;
    operator delete(v6);
  }
  ausdk::AUBase::~AUBase(this);
}

void AUMicIssueDetector::CreateExtendedElements(AUMicIssueDetector *this)
{
  unint64_t i;
  std::string *v3;
  __int128 v4;
  void **v5;
  CFStringRef v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  std::string v10;
  void *__p[2];
  int64_t v12;

  ausdk::AUScope::Initialize((int64x2_t *)((char *)this + 776), this, 4, 8);
  for (i = 0; i != 8; ++i)
  {
    std::to_string(&v10, i);
    v3 = std::string::insert(&v10, 0, "Mic", 3uLL);
    v4 = *(_OWORD *)&v3->__r_.__value_.__l.__data_;
    v12 = v3->__r_.__value_.__r.__words[2];
    *(_OWORD *)__p = v4;
    v3->__r_.__value_.__l.__size_ = 0;
    v3->__r_.__value_.__r.__words[2] = 0;
    v3->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v10.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v10.__r_.__value_.__l.__data_);
    if (v12 >= 0)
      v5 = __p;
    else
      v5 = (void **)__p[0];
    v6 = CFStringCreateWithCString(0, (const char *)v5, 0x8000100u);
    v7 = *((_QWORD *)this + 102);
    if (v7)
    {
      v8 = (*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)v7 + 32))(v7, i);
    }
    else
    {
      v9 = *((_QWORD *)this + 99);
      if (i >= (*((_QWORD *)this + 100) - v9) >> 3)
        v8 = 0;
      else
        v8 = *(_QWORD *)(v9 + 8 * i);
    }
    ausdk::Owned<__CFString const*>::operator=((const void **)(v8 + 72), v6);
    CFRelease(v6);
    if (SHIBYTE(v12) < 0)
      operator delete(__p[0]);
  }
}

void sub_1B6389454(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t AUMicIssueDetector::Initialize(AUMicIssueDetector *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unsigned __int8 v6;
  uint64_t v7;
  const char *v8;
  unsigned __int8 v9;
  unsigned __int8 v10;
  unsigned __int8 v11;
  uint64_t Element;
  uint64_t v13;
  unsigned __int8 v14;
  NSObject *v15;
  uint32_t v16;
  AU::AUMicIssueDetector *v18;
  NSObject *log;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  const AudioStreamBasicDescription *v23;
  double v24;
  float v25;
  uint64_t v27;
  unsigned __int8 v28;
  int v29;
  const char *v30;
  __int16 v31;
  int v32;
  __int16 v33;
  int v34;
  uint64_t v35;

  v35 = *MEMORY[0x1E0C80C00];
  v2 = *((_QWORD *)this + 15);
  if (v2)
    LODWORD(v3) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 24))(v2);
  else
    v3 = (*((_QWORD *)this + 13) - *((_QWORD *)this + 12)) >> 3;
  v4 = *((_QWORD *)this + 21);
  if (v4)
  {
    LODWORD(v5) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 24))(v4);
    if ((_DWORD)v3)
      goto LABEL_6;
LABEL_11:
    {
      AU::AUMicIssueDetector::get_log(void)::aumisd_os_log = (uint64_t)os_log_create("com.apple.coreaudio", "AUMicIssueDetector");
    }
    v7 = AU::AUMicIssueDetector::get_log(void)::aumisd_os_log;
    if (!os_log_type_enabled((os_log_t)AU::AUMicIssueDetector::get_log(void)::aumisd_os_log, OS_LOG_TYPE_ERROR))
      return 4294956428;
    v29 = 136315394;
    v30 = "AUMicIssueDetector.cpp";
    v31 = 1024;
    v32 = 52;
    v8 = "%s:%-5d Number of Input Elements provided is less than the Minimum required.";
LABEL_27:
    v15 = v7;
    v16 = 18;
    goto LABEL_28;
  }
  v5 = (*((_QWORD *)this + 19) - *((_QWORD *)this + 18)) >> 3;
  if (!(_DWORD)v3)
    goto LABEL_11;
LABEL_6:
  if (v3 >= 3)
  {
    if ((v6 & 1) == 0)
    {
      {
        AU::AUMicIssueDetector::get_log(void)::aumisd_os_log = (uint64_t)os_log_create("com.apple.coreaudio", "AUMicIssueDetector");
      }
    }
    v7 = AU::AUMicIssueDetector::get_log(void)::aumisd_os_log;
    if (!os_log_type_enabled((os_log_t)AU::AUMicIssueDetector::get_log(void)::aumisd_os_log, OS_LOG_TYPE_ERROR))
      return 4294956428;
    v29 = 136315394;
    v30 = "AUMicIssueDetector.cpp";
    v31 = 1024;
    v32 = 56;
    v8 = "%s:%-5d Number of Input Elements provided is greather than the Maximum supported.";
    goto LABEL_27;
  }
  if (!(_DWORD)v5)
  {
    if ((v11 & 1) == 0
    {
      AU::AUMicIssueDetector::get_log(void)::aumisd_os_log = (uint64_t)os_log_create("com.apple.coreaudio", "AUMicIssueDetector");
    }
    v7 = AU::AUMicIssueDetector::get_log(void)::aumisd_os_log;
    if (!os_log_type_enabled((os_log_t)AU::AUMicIssueDetector::get_log(void)::aumisd_os_log, OS_LOG_TYPE_ERROR))
      return 4294956428;
    v29 = 136315394;
    v30 = "AUMicIssueDetector.cpp";
    v31 = 1024;
    v32 = 60;
    v8 = "%s:%-5d Number of Output Elements provided is less than the Minimum required.";
    goto LABEL_27;
  }
  if (v5 >= 6)
  {
    if ((v10 & 1) == 0
    {
      AU::AUMicIssueDetector::get_log(void)::aumisd_os_log = (uint64_t)os_log_create("com.apple.coreaudio", "AUMicIssueDetector");
    }
    v7 = AU::AUMicIssueDetector::get_log(void)::aumisd_os_log;
    if (!os_log_type_enabled((os_log_t)AU::AUMicIssueDetector::get_log(void)::aumisd_os_log, OS_LOG_TYPE_ERROR))
      return 4294956428;
    v29 = 136315394;
    v30 = "AUMicIssueDetector.cpp";
    v31 = 1024;
    v32 = 64;
    v8 = "%s:%-5d Number of Output Elements provided is greather than the Maximum supported.";
    goto LABEL_27;
  }
  Element = ausdk::AUScope::SafeGetElement((AUMicIssueDetector *)((char *)this + 80), 0);
  if (*(_DWORD *)(Element + 88) != 1718773105
    || (v13 = Element, (*(_DWORD *)(Element + 108) - 9) <= 0xFFFFFFF8))
  {
    if ((v14 & 1) == 0
    {
      AU::AUMicIssueDetector::get_log(void)::aumisd_os_log = (uint64_t)os_log_create("com.apple.coreaudio", "AUMicIssueDetector");
    }
    v7 = AU::AUMicIssueDetector::get_log(void)::aumisd_os_log;
    if (!os_log_type_enabled((os_log_t)AU::AUMicIssueDetector::get_log(void)::aumisd_os_log, OS_LOG_TYPE_ERROR))
      return 4294956428;
    v29 = 136315394;
    v30 = "AUMicIssueDetector.cpp";
    v31 = 1024;
    v32 = 71;
    v8 = "%s:%-5d Input Format is Invalid.";
    goto LABEL_27;
  }
  if (v3 > 1)
  {
    v18 = (AU::AUMicIssueDetector *)ausdk::AUScope::SafeGetElement((AUMicIssueDetector *)((char *)this + 80), 1u);
    if (*((_DWORD *)v18 + 22) != 1718773105 || (*((_DWORD *)v18 + 27) - 9) <= 0xFFFFFFF8)
    {
      log = AU::AUMicIssueDetector::get_log(v18);
      if (os_log_type_enabled(log, OS_LOG_TYPE_ERROR))
      {
        v29 = 136315650;
        v30 = "AUMicIssueDetector.cpp";
        v31 = 1024;
        v32 = 78;
        v33 = 1024;
        v34 = 1;
        v8 = "%s:%-5d Format for ECLee Input Element %u is Invalid.";
        goto LABEL_56;
      }
      return 4294956428;
    }
  }
  v20 = 0;
  while (2)
  {
    v21 = ausdk::AUScope::SafeGetElement((AUMicIssueDetector *)((char *)this + 128), v20);
    v22 = v21;
    v23 = (const AudioStreamBasicDescription *)(v21 + 80);
    switch(v20)
    {
      case 0u:
        if (AUMicIssueDetector::validOutputFormat(this, v23, *(_DWORD *)(v13 + 108)))
          goto LABEL_49;
        v20 = 0;
        goto LABEL_53;
      case 1u:
      case 4u:
        if (!AUMicIssueDetector::validOutputFormat(this, v23, 1))
          goto LABEL_53;
        goto LABEL_49;
      case 2u:
        if (*(_DWORD *)(v21 + 88) == 1819304813)
        {
          v24 = *(double *)(v21 + 80);
          v25 = *(double *)(ausdk::AUScope::SafeGetElement((AUMicIssueDetector *)((char *)this + 80), 0) + 80);
          if (v24 == v25 && *(_DWORD *)(v22 + 108) == 1)
            goto LABEL_49;
        }
        v20 = 2;
        goto LABEL_53;
      case 3u:
        if (*(_DWORD *)(v21 + 88) == 1718773105 && (*(_DWORD *)(v21 + 108) - 9) >= 0xFFFFFFF9)
        {
LABEL_49:
          if ((_DWORD)v5 == ++v20)
          {
            *((_DWORD *)this + 145) = *((_DWORD *)this + 84);
            *((_DWORD *)this + 146) = *(_DWORD *)(v13 + 108);
            *((_DWORD *)this + 147) = v3;
            *((_DWORD *)this + 148) = v5;
            v27 = AUMicIssueDetector::setupCore(this);
            (*(void (**)(AUMicIssueDetector *, _QWORD, _QWORD))(*(_QWORD *)this + 72))(this, 0, 0);
            return v27;
          }
          continue;
        }
        v20 = 3;
LABEL_53:
        if ((v28 & 1) == 0
        {
          AU::AUMicIssueDetector::get_log(void)::aumisd_os_log = (uint64_t)os_log_create("com.apple.coreaudio", "AUMicIssueDetector");
        }
        log = AU::AUMicIssueDetector::get_log(void)::aumisd_os_log;
        if (os_log_type_enabled((os_log_t)AU::AUMicIssueDetector::get_log(void)::aumisd_os_log, OS_LOG_TYPE_ERROR))
        {
          v29 = 136315650;
          v30 = "AUMicIssueDetector.cpp";
          v31 = 1024;
          v32 = 96;
          v33 = 1024;
          v34 = v20;
          v8 = "%s:%-5d Format for Output Element %u is Invalid.";
LABEL_56:
          v15 = log;
          v16 = 24;
LABEL_28:
          _os_log_impl(&dword_1B5ED0000, v15, OS_LOG_TYPE_ERROR, v8, (uint8_t *)&v29, v16);
        }
        return 4294956428;
      default:
        goto LABEL_53;
    }
  }
}

uint64_t AUMicIssueDetector::Reset(AUMicIssueDetector *this)
{
  float v2;
  ausdk::AUElement *Element;
  unint64_t i;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  ausdk::AUElement *v8;
  uint64_t v9;
  uint64_t v10;

  *(_OWORD *)((char *)this + 596) = xmmword_1B6627BC0;
  *(_QWORD *)((char *)this + 612) = 1;
  v2 = *(float *)(*((_QWORD *)this + 66) + 120);
  Element = (ausdk::AUElement *)ausdk::AUScope::SafeGetElement((AUMicIssueDetector *)((char *)this + 32), 0);
  ausdk::AUElement::SetParameter(Element, 3u, v2, 0);
  for (i = 0; ; ++i)
  {
    v5 = *((_QWORD *)this + 102);
    if (v5)
      LODWORD(v6) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 24))(v5);
    else
      v6 = (*((_QWORD *)this + 100) - *((_QWORD *)this + 99)) >> 3;
    if (i >= v6)
      break;
    v7 = *((_QWORD *)this + 102);
    if (v7)
    {
      v8 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)v7 + 32))(v7, i);
    }
    else
    {
      v9 = *((_QWORD *)this + 99);
      if (i >= (*((_QWORD *)this + 100) - v9) >> 3)
        v8 = 0;
      else
        v8 = *(ausdk::AUElement **)(v9 + 8 * i);
    }
    ausdk::AUElement::SetParameter(v8, 6u, *(float *)(*((_QWORD *)this + 69) + 216), 0);
  }
  v10 = *((_QWORD *)this + 78);
  if (v10)
    (*(void (**)(uint64_t))(*(_QWORD *)v10 + 24))(v10);
  return 0;
}

uint64_t AUMicIssueDetector::GetPropertyInfo(AUMicIssueDetector *this, int a2, int a3, unsigned int a4, unsigned int *a5, BOOL *a6)
{
  uint64_t result;
  int v7;

  if (a3)
  {
    result = 4294956417;
    if (a2 == 1004 && a3 == 4)
    {
LABEL_4:
      *a6 = 0;
LABEL_5:
      v7 = 4;
LABEL_6:
      result = 0;
      *a5 = v7;
    }
  }
  else
  {
    result = 4294956417;
    if (a2 <= 1001)
    {
      if (a2 == 21)
      {
        *a6 = 1;
        goto LABEL_5;
      }
      if (a2 == 1001)
      {
        *a6 = 1;
        v7 = 8;
        goto LABEL_6;
      }
    }
    else
    {
      if (a2 == 1002)
      {
        *a6 = 1;
        v7 = 4 * *((_DWORD *)this + 84);
        goto LABEL_6;
      }
      if (a2 == 1003 || a2 == 3700)
        goto LABEL_4;
    }
  }
  return result;
}

uint64_t AUMicIssueDetector::GetProperty(AUMicIssueDetector *this, int a2, int a3, uint64_t a4, float *__b)
{
  uint64_t result;
  float v8;
  uint64_t v9;
  int v10;
  const void **v11;
  uint64_t v12;

  result = 4294956417;
  if (!a3)
  {
    if (a2 > 1002)
    {
      if (a2 == 1003)
      {
        v8 = 0.0;
        if (*((_BYTE *)this + 17) && !*((_BYTE *)this + 576))
          v8 = (*(float (**)(_QWORD, _QWORD, float))(**((_QWORD **)this + 78) + 48))(*((_QWORD *)this + 78), 0, 0.0);
LABEL_24:
        result = 0;
        *__b = v8;
        return result;
      }
      if (a2 != 3700)
        return result;
      result = 0;
      v10 = *((unsigned __int8 *)this + 376);
    }
    else
    {
      if (a2 != 21)
      {
        if (a2 == 1002)
        {
          if (*((_BYTE *)this + 17) && !*((_BYTE *)this + 576))
          {
            if (*((_DWORD *)this + 145) != *((_DWORD *)this + 84))
              return 4294956446;
            v11 = (const void **)(*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 78) + 80))(*((_QWORD *)this + 78));
            v12 = *((unsigned int *)this + 145);
            if ((_DWORD)v12)
              memmove(__b, *v11, 4 * v12);
          }
          else
          {
            v9 = *((unsigned int *)this + 84);
            if ((_DWORD)v9)
              memset_pattern16(__b, &unk_1B6627B80, 4 * v9);
          }
          return 0;
        }
        return result;
      }
      result = 0;
      v10 = *((unsigned __int8 *)this + 576);
    }
    *(_DWORD *)__b = v10;
    return result;
  }
  if (a2 == 1004 && a3 == 4)
  {
    v8 = 0.0;
    if (*((_BYTE *)this + 17) && !*((_BYTE *)this + 576))
    {
      if (*((_DWORD *)this + 146) <= a4)
        return result;
      (*(void (**)(_QWORD, uint64_t, uint64_t, float))(**((_QWORD **)this + 78) + 56))(*((_QWORD *)this + 78), a4, 1, 0.0);
    }
    goto LABEL_24;
  }
  return result;
}

uint64_t AUMicIssueDetector::SetProperty(AUMicIssueDetector *this, int a2, int a3, unsigned int a4, const __CFDictionary **a5)
{
  uint64_t result;
  const __CFDictionary *v7;
  int v8;
  unsigned __int8 v9;
  NSObject *v10;
  const char *v11;
  NSObject *v12;
  _QWORD *v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  _QWORD *v17;
  const __CFNumber *Value;
  unsigned __int8 v19;
  NSObject *v20;
  const char *CStringPtr;
  const __CFData *v22;
  const __CFData *v23;
  unsigned int Length;
  unsigned int v25;
  _QWORD *v26;
  const UInt8 *BytePtr;
  unsigned __int8 v28;
  unsigned int *v29;
  _DWORD *v30;
  uint64_t v31;
  unsigned int v32;
  int v33;
  _BYTE v34[14];
  __int16 v35;
  const char *v36;
  uint64_t v37;

  v37 = *MEMORY[0x1E0C80C00];
  if (a3)
    return 4294956417;
  if (a2 != 1001)
  {
    if (a2 == 21)
    {
      result = 0;
      *((_BYTE *)this + 576) = *(_DWORD *)a5 != 0;
      return result;
    }
    return 4294956417;
  }
  if (!a5)
    return 4294956445;
  if (*((_BYTE *)this + 17))
    return 4294956447;
  v7 = *a5;
  if (!*a5)
    return 4294956445;
  GetScalarFromDictOptional<unsigned int>(*a5, CFSTR("AlgorithmCoreType"), (char *)this + 620);
  v8 = *((_DWORD *)this + 155);
  if (v8)
  {
    if ((v9 & 1) == 0)
    {
      {
        AU::AUMicIssueDetector::get_log(void)::aumisd_os_log = (uint64_t)os_log_create("com.apple.coreaudio", "AUMicIssueDetector");
      }
    }
    v10 = AU::AUMicIssueDetector::get_log(void)::aumisd_os_log;
    if (!os_log_type_enabled((os_log_t)AU::AUMicIssueDetector::get_log(void)::aumisd_os_log, OS_LOG_TYPE_ERROR))
      return 4294956445;
    v33 = 136315394;
    *(_QWORD *)v34 = "AUMicIssueDetector.cpp";
    *(_WORD *)&v34[8] = 1024;
    *(_DWORD *)&v34[10] = 924;
    v11 = "%s:%-5d Unsupported Algorithm Core Type Provided";
    goto LABEL_15;
  }
  {
    AU::AUMicIssueDetector::get_log(void)::aumisd_os_log = (uint64_t)os_log_create("com.apple.coreaudio", "AUMicIssueDetector");
  }
  v12 = AU::AUMicIssueDetector::get_log(void)::aumisd_os_log;
  if (os_log_type_enabled((os_log_t)AU::AUMicIssueDetector::get_log(void)::aumisd_os_log, OS_LOG_TYPE_INFO))
  {
    v33 = 136315394;
    *(_QWORD *)v34 = "AUMicIssueDetector.cpp";
    *(_WORD *)&v34[8] = 1024;
    *(_DWORD *)&v34[10] = 921;
    _os_log_impl(&dword_1B5ED0000, v12, OS_LOG_TYPE_INFO, "%s:%-5d Successfully retrieved Algorithm Core Type MicIssueDetectorCorev1 \n", (uint8_t *)&v33, 0x12u);
  }
  _ZNSt3__115allocate_sharedB8ne180100I30AUMicIssueDetectorCoreV1ParamsNS_9allocatorIS1_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(&v33);
  v13 = (_QWORD *)((char *)this + 824);
  std::shared_ptr<vp::xml::_xmlNode const>::operator=[abi:ne180100]((uint64_t)v13, (__int128 *)&v33);
  v14 = *(std::__shared_weak_count **)&v34[4];
  if (*(_QWORD *)&v34[4])
  {
    v15 = (unint64_t *)(*(_QWORD *)&v34[4] + 8);
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  v17 = (_QWORD *)*v13;
  GetScalarFromDictOptional<float>(v7, CFSTR("WindProbBandLowFreq"), v17);
  GetScalarFromDictOptional<float>(v7, CFSTR("WindProbBandHighFreq"), (char *)v17 + 4);
  GetScalarFromDictOptional<float>(v7, CFSTR("WindLvlBandLowFreq"), v17 + 1);
  GetScalarFromDictOptional<float>(v7, CFSTR("WindLvlBandMidFreq"), (char *)v17 + 12);
  GetScalarFromDictOptional<float>(v7, CFSTR("WindLvlBandHighFreq"), v17 + 2);
  GetScalarFromDictOptional<float>(v7, CFSTR("WindLvlBandEnThr"), (char *)v17 + 20);
  GetScalarFromDictOptional<float>(v7, CFSTR("WindLvlToGainFlr"), v17 + 3);
  GetScalarFromDictOptional<float>(v7, CFSTR("WindLvlToGainSlope"), (char *)v17 + 28);
  GetScalarFromDictOptional<float>(v7, CFSTR("WindLvlToGainMean"), v17 + 4);
  GetScalarFromDictOptional<float>(v7, CFSTR("WindLvlGainAttackTC"), (char *)v17 + 36);
  GetScalarFromDictOptional<float>(v7, CFSTR("WindLvlGainReleaseTC"), v17 + 5);
  GetScalarFromDictOptional<float>(v7, CFSTR("WindLvlGainHoldTime"), (char *)v17 + 44);
  GetScalarFromDictOptional<float>(v7, CFSTR("EnRatioBandLowFreq"), v17 + 6);
  GetScalarFromDictOptional<float>(v7, CFSTR("EnRatioBandHighFreq"), (char *)v17 + 52);
  GetScalarFromDictOptional<float>(v7, CFSTR("EnRatioBandCohrThr"), v17 + 7);
  GetScalarFromDictOptional<float>(v7, CFSTR("EnRatioToGainFlr"), (char *)v17 + 60);
  GetScalarFromDictOptional<float>(v7, CFSTR("EnRatioToGainSlope"), v17 + 8);
  GetScalarFromDictOptional<float>(v7, CFSTR("EnRatioToGainMean"), (char *)v17 + 68);
  GetScalarFromDictOptional<float>(v7, CFSTR("EnRatioGainAttackTC"), v17 + 9);
  GetScalarFromDictOptional<float>(v7, CFSTR("EnRatioGainReleaseTC"), (char *)v17 + 76);
  GetScalarFromDictOptional<float>(v7, CFSTR("EnRatioGainHoldTime"), v17 + 10);
  GetScalarFromDictOptional<float>(v7, CFSTR("EnRatioGainInEnThr"), (char *)v17 + 84);
  GetScalarFromDictOptional<float>(v7, CFSTR("EnRatioGainOutEnFloor"), v17 + 11);
  GetScalarFromDictOptional<float>(v7, CFSTR("GainLowFreq"), (char *)v17 + 92);
  GetScalarFromDictOptional<float>(v7, CFSTR("GainCrossoverFreq"), v17 + 12);
  GetScalarFromDictOptional<float>(v7, CFSTR("GainHighFreq"), (char *)v17 + 100);
  GetScalarFromDictOptional<float>(v7, CFSTR("CohrToGainSigmoidSlope"), v17 + 13);
  GetScalarFromDictOptional<float>(v7, CFSTR("CohrtoGainSigmoidMean"), (char *)v17 + 108);
  GetScalarFromDictOptional<float>(v7, CFSTR("GainThreshold"), v17 + 14);
  Value = (const __CFNumber *)CFDictionaryGetValue(v7, CFSTR("PreferredMic"));
  if (Value)
  {
    CFNumberGetValue(Value, kCFNumberIntType, v17 + 19);
  }
  else
  {
    if ((v19 & 1) == 0
    {
      AU::AUMicIssueDetector::get_log(void)::aumisd_os_log = (uint64_t)os_log_create("com.apple.coreaudio", "AUMicIssueDetector");
    }
    v20 = AU::AUMicIssueDetector::get_log(void)::aumisd_os_log;
    if (os_log_type_enabled((os_log_t)AU::AUMicIssueDetector::get_log(void)::aumisd_os_log, OS_LOG_TYPE_INFO))
    {
      CStringPtr = CFStringGetCStringPtr(CFSTR("PreferredMic"), 0x8000100u);
      v33 = 136315650;
      *(_QWORD *)v34 = "AUMicIssueDetector.cpp";
      *(_WORD *)&v34[8] = 1024;
      *(_DWORD *)&v34[10] = 907;
      v35 = 2080;
      v36 = CStringPtr;
      _os_log_impl(&dword_1B5ED0000, v20, OS_LOG_TYPE_INFO, "%s:%-5d Param value for %s not found in plist, using default value.", (uint8_t *)&v33, 0x1Cu);
    }
  }
  GetScalarFromDictOptional<float>(v7, CFSTR("MicSwitchGainThr"), (char *)v17 + 156);
  GetScalarFromDictOptional<unsigned int>(v7, CFSTR("BlockedMicDecisionTC"), (char *)v17 + 116);
  GetScalarFromDictOptional<unsigned int>(v7, CFSTR("BlockedMicNumBands"), v17 + 15);
  result = CFDictionaryContainsKey(v7, CFSTR("BlockedMicProfile"));
  if ((_DWORD)result)
  {
    v22 = (const __CFData *)CFDictionaryGetValue(v7, CFSTR("BlockedMicProfile"));
    v23 = v22;
    if (!v22)
    {
      if ((v28 & 1) == 0
      {
        AU::AUMicIssueDetector::get_log(void)::aumisd_os_log = (uint64_t)os_log_create("com.apple.coreaudio", "AUMicIssueDetector");
      }
      v10 = AU::AUMicIssueDetector::get_log(void)::aumisd_os_log;
      if (!os_log_type_enabled((os_log_t)AU::AUMicIssueDetector::get_log(void)::aumisd_os_log, OS_LOG_TYPE_ERROR))
        return 4294956445;
      v33 = 136315394;
      *(_QWORD *)v34 = "AUMicIssueDetector.cpp";
      *(_WORD *)&v34[8] = 1024;
      *(_DWORD *)&v34[10] = 990;
      v11 = "%s:%-5d Could not retrieve blocked mic profile data. Will use default\n";
LABEL_15:
      _os_log_impl(&dword_1B5ED0000, v10, OS_LOG_TYPE_ERROR, v11, (uint8_t *)&v33, 0x12u);
      return 4294956445;
    }
    Length = CFDataGetLength(v22);
    v25 = Length >> 2;
    if (Length >> 2 != 5 * *((_DWORD *)v17 + 30))
      return 4294956445;
    v26 = v17 + 16;
    std::vector<float>::resize((uint64_t)v26, v25);
    BytePtr = CFDataGetBytePtr(v23);
    if (Length >= 4)
    {
      v29 = (unsigned int *)BytePtr;
      v30 = (_DWORD *)*v26;
      if (v25 <= 1)
        v31 = 1;
      else
        v31 = v25;
      result = 0;
      do
      {
        v32 = *v29++;
        *v30++ = bswap32(v32);
        --v31;
      }
      while (v31);
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t AUMicIssueDetector::SetParameter(AUMicIssueDetector *this, uint64_t a2, unsigned int a3, unsigned int a4, float a5)
{
  ausdk::AUScope *Scope;
  ausdk::AUElement *Element;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t result;
  char *v17;
  uint64_t v18;
  uint64_t v19;

  Scope = (ausdk::AUScope *)ausdk::AUBase::GetScope(this, a3);
  Element = (ausdk::AUElement *)ausdk::AUScope::SafeGetElement(Scope, a4);
  ausdk::AUElement::SetParameter(Element, a2, a5, 0);
  if (a3 == 4)
  {
    v15 = *((_QWORD *)this + 69);
    if (a2 < (unint64_t)((*((_QWORD *)this + 70) - v15) >> 5))
    {
      result = 0;
      if ((*(_BYTE *)(v15 + 32 * a2 + 13) & 0x80) != 0)
        ++*((_DWORD *)this + 153);
      else
        ++*((_DWORD *)this + 149);
      return result;
    }
LABEL_21:
    std::vector<std::vector<float>>::__throw_out_of_range[abi:ne180100]();
  }
  if (a3)
    return 4294956430;
  v12 = *((_QWORD *)this + 66);
  if (a2 >= (unint64_t)((*((_QWORD *)this + 67) - v12) >> 5))
    goto LABEL_21;
  v13 = *(_DWORD *)(v12 + 32 * a2 + 12);
  v18 = 0x100000000FLL;
  if ((_DWORD)a2 == 15)
  {
    v14 = 0;
  }
  else
  {
    if ((_DWORD)a2 != 16)
    {
      v17 = (char *)&v19;
      goto LABEL_15;
    }
    v14 = 1;
  }
  v17 = (char *)((unint64_t)&v18 | (4 * v14));
LABEL_15:
  if (v17 - (char *)&v18 == 8)
  {
    if ((v13 & 0x8000) != 0)
      ++*((_DWORD *)this + 151);
    else
      ++*((_DWORD *)this + 149);
  }
  else
  {
    (*(void (**)(_QWORD, uint64_t, float))(**((_QWORD **)this + 78) + 32))(*((_QWORD *)this + 78), a2, a5);
  }
  return 0;
}

uint64_t AUMicIssueDetector::CanScheduleParameters(AUMicIssueDetector *this)
{
  return 0;
}

uint64_t AUMicIssueDetector::ProcessMultipleBufferLists(AUMicIssueDetector *this, unsigned int *a2, int a3, int a4, const AudioBufferList **a5, unsigned int a6, AudioBufferList **a7)
{
  unsigned int v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  ausdk::AUElement *v18;
  ausdk::AUElement **v19;
  float Parameter;
  unint64_t i;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  ausdk::AUElement *v30;
  uint64_t v31;
  float v32;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  AudioBufferList *v37;
  AudioBufferList *v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  ausdk::AUElement *v42;
  ausdk::AUElement **v43;
  float v44;
  int v45;
  unint64_t v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  ausdk::AUElement *v55;
  uint64_t v56;
  float v57;
  uint64_t v58;
  uint64_t v59;
  ausdk::AUElement *v60;
  uint64_t v61;
  float v62;
  uint64_t v63;
  uint64_t v64;
  ausdk::AUElement *v65;
  uint64_t v66;
  float v67;
  uint64_t v68;
  uint64_t v69;
  ausdk::AUElement *v70;
  uint64_t v71;
  float v72;
  UInt32 *v73;
  const AudioBufferList *v74;
  AUMicIssueDetector *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  unint64_t v80;
  uint64_t v81;
  unint64_t v82;
  uint64_t v83;
  unsigned int v84;
  AudioBufferList *v85;
  AudioBufferList *v86;
  UInt32 mNumberBuffers;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  AudioBufferList *v91;
  uint64_t v92;
  uint64_t v93;
  unint64_t v94;
  uint64_t v95;
  uint64_t v96;
  ausdk::AUElement *v97;
  ausdk::AUElement **v98;
  float v99;
  unint64_t j;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  unint64_t v105;
  uint64_t v106;
  uint64_t v107;
  ausdk::AUElement *v108;
  uint64_t v109;
  float v110;
  AudioBufferList *v111;
  unint64_t mDataByteSize;
  void *mData;
  uint64_t v114;
  unint64_t v115;
  unsigned int v116;

  if (*((_DWORD *)this + 145) != a3)
    return 4294956422;
  if (*((_DWORD *)this + 147) != a4 || *((_DWORD *)this + 148) != a6)
    return 4294956419;
  v10 = 2 * a3;
  if (!a3 || *((_BYTE *)this + 576))
  {
    v34 = *((unsigned int *)this + 146);
    if ((_DWORD)v34)
    {
      v35 = 0;
      v36 = 16;
      do
      {
        if (v10)
        {
          memmove(*(void **)((char *)&(*a7)->mNumberBuffers + v36), *(const void **)((char *)&(*a5)->mNumberBuffers + v36), 4 * v10);
          v34 = *((unsigned int *)this + 146);
        }
        ++v35;
        v36 += 16;
      }
      while (v35 < v34);
      a6 = *((_DWORD *)this + 148);
    }
    if (a6 > 1)
    {
      v37 = a7[1];
      if (v37 && v10)
      {
        memmove(v37->mBuffers[0].mData, *(const void **)&(*a5)[1].mBuffers[0].mNumberChannels, 4 * v10);
        a6 = *((_DWORD *)this + 148);
      }
      if (a6 >= 3)
      {
        v38 = a7[2];
        if (v38)
          vDSP_vfill(&AUMicIssueDetector::kOnef, (float *)v38->mBuffers[0].mData, 1, (unint64_t)v38->mBuffers[0].mDataByteSize >> 2);
      }
    }
  }
  else
  {
    v116 = a6;
    v11 = *((_DWORD *)this + 149);
    if (v11 != *((_DWORD *)this + 150))
    {
      *((_DWORD *)this + 150) = v11;
      v12 = *((_QWORD *)this + 67);
      v13 = *((_QWORD *)this + 66);
      if (v12 != v13)
      {
        v14 = 0;
        v15 = 12;
        do
        {
          if ((*(_BYTE *)(v13 + v15 + 1) & 0x80) == 0)
          {
            v16 = *((_QWORD *)this + 78);
            v17 = *((_QWORD *)this + 9);
            if (v17)
            {
              v18 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v17 + 32))(v17, 0);
            }
            else
            {
              v19 = (ausdk::AUElement **)*((_QWORD *)this + 6);
              if (*((ausdk::AUElement ***)this + 7) == v19)
                v18 = 0;
              else
                v18 = *v19;
            }
            Parameter = ausdk::AUElement::GetParameter(v18, v14);
            (*(void (**)(uint64_t, unint64_t, float))(*(_QWORD *)v16 + 32))(v16, v14, Parameter);
            v12 = *((_QWORD *)this + 67);
            v13 = *((_QWORD *)this + 66);
          }
          ++v14;
          v15 += 32;
        }
        while (v14 < (v12 - v13) >> 5);
      }
      for (i = 0; ; ++i)
      {
        v22 = *((_QWORD *)this + 102);
        if (v22)
          LODWORD(v23) = (*(uint64_t (**)(uint64_t, unsigned int *))(*(_QWORD *)v22 + 24))(v22, a2);
        else
          v23 = (*((_QWORD *)this + 100) - *((_QWORD *)this + 99)) >> 3;
        if (i >= v23)
          break;
        v24 = *((_QWORD *)this + 70);
        v25 = *((_QWORD *)this + 69);
        if (v24 != v25)
        {
          v26 = 0;
          v27 = 12;
          do
          {
            if ((*(_BYTE *)(v25 + v27 + 1) & 0x80) == 0)
            {
              v28 = *((_QWORD *)this + 78);
              v29 = *((_QWORD *)this + 102);
              if (v29)
              {
                v30 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)v29 + 32))(v29, i);
              }
              else
              {
                v31 = *((_QWORD *)this + 99);
                if (i >= (*((_QWORD *)this + 100) - v31) >> 3)
                  v30 = 0;
                else
                  v30 = *(ausdk::AUElement **)(v31 + 8 * i);
              }
              v32 = ausdk::AUElement::GetParameter(v30, v26);
              (*(void (**)(uint64_t, unint64_t, unint64_t, float))(*(_QWORD *)v28 + 40))(v28, i, v26, v32);
              v24 = *((_QWORD *)this + 70);
              v25 = *((_QWORD *)this + 69);
            }
            ++v26;
            v27 += 32;
          }
          while (v26 < (v24 - v25) >> 5);
        }
      }
      (*(void (**)(_QWORD))(**((_QWORD **)this + 78) + 64))(*((_QWORD *)this + 78));
    }
    v39 = *((_DWORD *)this + 151);
    if (v39 != *((_DWORD *)this + 152))
    {
      *((_DWORD *)this + 152) = v39;
      v40 = *((_QWORD *)this + 78);
      v41 = *((_QWORD *)this + 9);
      if (v41)
      {
        v42 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v41 + 32))(v41, 0);
      }
      else
      {
        v43 = (ausdk::AUElement **)*((_QWORD *)this + 6);
        if (*((ausdk::AUElement ***)this + 7) == v43)
          v42 = 0;
        else
          v42 = *v43;
      }
      v44 = ausdk::AUElement::GetParameter(v42, 3u);
      (*(void (**)(uint64_t, uint64_t, float))(*(_QWORD *)v40 + 32))(v40, 3, v44);
    }
    v45 = *((_DWORD *)this + 153);
    if (v45 != *((_DWORD *)this + 154))
    {
      v50 = 0;
      *((_DWORD *)this + 154) = v45;
      while (1)
      {
        v51 = *((_QWORD *)this + 102);
        if (v51)
          LODWORD(v52) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v51 + 24))(v51);
        else
          v52 = (*((_QWORD *)this + 100) - *((_QWORD *)this + 99)) >> 3;
        if (v50 >= v52)
          break;
        v53 = *((_QWORD *)this + 78);
        v54 = *((_QWORD *)this + 102);
        if (v54)
        {
          v55 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)v54 + 32))(v54, v50);
        }
        else
        {
          v56 = *((_QWORD *)this + 99);
          if (v50 >= (*((_QWORD *)this + 100) - v56) >> 3)
            v55 = 0;
          else
            v55 = *(ausdk::AUElement **)(v56 + 8 * v50);
        }
        v57 = ausdk::AUElement::GetParameter(v55, 6u);
        (*(void (**)(uint64_t, unint64_t, uint64_t, float))(*(_QWORD *)v53 + 40))(v53, v50, 6, v57);
        v58 = *((_QWORD *)this + 78);
        v59 = *((_QWORD *)this + 102);
        if (v59)
        {
          v60 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)v59 + 32))(v59, v50);
        }
        else
        {
          v61 = *((_QWORD *)this + 99);
          if (v50 >= (*((_QWORD *)this + 100) - v61) >> 3)
            v60 = 0;
          else
            v60 = *(ausdk::AUElement **)(v61 + 8 * v50);
        }
        v62 = ausdk::AUElement::GetParameter(v60, 7u);
        (*(void (**)(uint64_t, unint64_t, uint64_t, float))(*(_QWORD *)v58 + 40))(v58, v50, 7, v62);
        v63 = *((_QWORD *)this + 78);
        v64 = *((_QWORD *)this + 102);
        if (v64)
        {
          v65 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)v64 + 32))(v64, v50);
        }
        else
        {
          v66 = *((_QWORD *)this + 99);
          if (v50 >= (*((_QWORD *)this + 100) - v66) >> 3)
            v65 = 0;
          else
            v65 = *(ausdk::AUElement **)(v66 + 8 * v50);
        }
        v67 = ausdk::AUElement::GetParameter(v65, 8u);
        (*(void (**)(uint64_t, unint64_t, uint64_t, float))(*(_QWORD *)v63 + 40))(v63, v50, 8, v67);
        v68 = *((_QWORD *)this + 78);
        v69 = *((_QWORD *)this + 102);
        if (v69)
        {
          v70 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)v69 + 32))(v69, v50);
        }
        else
        {
          v71 = *((_QWORD *)this + 99);
          if (v50 >= (*((_QWORD *)this + 100) - v71) >> 3)
            v70 = 0;
          else
            v70 = *(ausdk::AUElement **)(v71 + 8 * v50);
        }
        v72 = ausdk::AUElement::GetParameter(v70, 9u);
        (*(void (**)(uint64_t, unint64_t, uint64_t, float))(*(_QWORD *)v68 + 40))(v68, v50++, 9, v72);
      }
    }
    v46 = *((unsigned int *)this + 146);
    if ((_DWORD)v46)
    {
      v47 = 0;
      v48 = 0;
      v49 = 16;
      do
      {
        if (v10)
        {
          memmove(*(void **)(*((_QWORD *)this + 79) + v47), *(const void **)((char *)&(*a5)->mNumberBuffers + v49), 4 * v10);
          v46 = *((unsigned int *)this + 146);
        }
        ++v48;
        v47 += 24;
        v49 += 16;
      }
      while (v48 < v46);
    }
    else
    {
      v46 = 0;
    }
    v73 = (UInt32 *)((char *)this + 584);
    if (*((_DWORD *)this + 147) > 1u)
    {
      v74 = a5[1];
      if (v74)
      {
        v75 = v74->mNumberBuffers >= v46 ? (AUMicIssueDetector *)((char *)this + 584) : (AUMicIssueDetector *)a5[1];
        v76 = *(unsigned int *)v75;
        if ((_DWORD)v76)
        {
          v77 = 0;
          v78 = 24 * v76;
          v79 = 16;
          do
          {
            if (v10)
              memmove(*(void **)(*((_QWORD *)this + 88) + v77), *(const void **)((char *)&a5[1]->mNumberBuffers + v79), 4 * v10);
            v77 += 24;
            v79 += 16;
          }
          while (v78 != v77);
        }
      }
    }
    (*(void (**)(_QWORD, char *, char *, char *, char *, char *))(**((_QWORD **)this + 78) + 72))(*((_QWORD *)this + 78), (char *)this + 632, (char *)this + 656, (char *)this + 680, (char *)this + 704, (char *)this + 728);
    v80 = *((unsigned int *)this + 146);
    if ((_DWORD)v80)
    {
      v81 = 0;
      v82 = 0;
      v83 = 16;
      do
      {
        if (v10)
        {
          memmove(*(void **)((char *)&(*a7)->mNumberBuffers + v83), *(const void **)(*((_QWORD *)this + 82) + v81), 4 * v10);
          v80 = *v73;
        }
        ++v82;
        v83 += 16;
        v81 += 24;
      }
      while (v82 < v80);
    }
    v84 = *((_DWORD *)this + 148);
    if (v84 > 1)
    {
      if (v10)
      {
        v85 = a7[1];
        if (v85)
        {
          memmove(v85->mBuffers[0].mData, *((const void **)this + 85), 4 * v10);
          v84 = *((_DWORD *)this + 148);
        }
      }
      if (v84 >= 4)
      {
        v86 = a7[3];
        if (v86)
        {
          mNumberBuffers = v86->mNumberBuffers;
          if (mNumberBuffers >= *v73)
            mNumberBuffers = *v73;
          if (mNumberBuffers)
          {
            v88 = 0;
            v89 = 24 * mNumberBuffers;
            v90 = 16;
            do
            {
              if (v10)
                memmove(*(void **)((char *)&a7[3]->mNumberBuffers + v90), *(const void **)(*((_QWORD *)this + 91) + v88), 4 * v10);
              v88 += 24;
              v90 += 16;
            }
            while (v89 != v88);
            v84 = *((_DWORD *)this + 148);
          }
        }
        if (v84 >= 5)
        {
          if (v10)
          {
            v91 = a7[4];
            if (v91)
              memmove(v91->mBuffers[0].mData, *((const void **)this + 94), 4 * v10);
          }
        }
      }
    }
    v92 = *((_QWORD *)this + 67);
    v93 = *((_QWORD *)this + 66);
    if (v92 != v93)
    {
      v94 = 0;
      v95 = 12;
      do
      {
        if ((*(_BYTE *)(v93 + v95 + 1) & 0x80) != 0)
        {
          v96 = *((_QWORD *)this + 9);
          if (v96)
          {
            v97 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v96 + 32))(v96, 0);
          }
          else
          {
            v98 = (ausdk::AUElement **)*((_QWORD *)this + 6);
            if (*((ausdk::AUElement ***)this + 7) == v98)
              v97 = 0;
            else
              v97 = *v98;
          }
          v99 = (*(float (**)(_QWORD, unint64_t))(**((_QWORD **)this + 78) + 48))(*((_QWORD *)this + 78), v94);
          ausdk::AUElement::SetParameter(v97, v94, v99, 0);
          v92 = *((_QWORD *)this + 67);
          v93 = *((_QWORD *)this + 66);
        }
        ++v94;
        v95 += 32;
      }
      while (v94 < (v92 - v93) >> 5);
    }
    for (j = 0; ; ++j)
    {
      v101 = *((_QWORD *)this + 102);
      if (v101)
        LODWORD(v102) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v101 + 24))(v101);
      else
        v102 = (*((_QWORD *)this + 100) - *((_QWORD *)this + 99)) >> 3;
      if (j >= v102)
        break;
      v103 = *((_QWORD *)this + 70);
      v104 = *((_QWORD *)this + 69);
      if (v103 != v104)
      {
        v105 = 0;
        v106 = 12;
        do
        {
          if ((*(_BYTE *)(v104 + v106 + 1) & 0x80) != 0)
          {
            v107 = *((_QWORD *)this + 102);
            if (v107)
            {
              v108 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)v107 + 32))(v107, j);
            }
            else
            {
              v109 = *((_QWORD *)this + 99);
              if (j >= (*((_QWORD *)this + 100) - v109) >> 3)
                v108 = 0;
              else
                v108 = *(ausdk::AUElement **)(v109 + 8 * j);
            }
            v110 = (*(float (**)(_QWORD, unint64_t, unint64_t))(**((_QWORD **)this + 78) + 56))(*((_QWORD *)this + 78), j, v105);
            ausdk::AUElement::SetParameter(v108, v105, v110, 0);
            v103 = *((_QWORD *)this + 70);
            v104 = *((_QWORD *)this + 69);
          }
          ++v105;
          v106 += 32;
        }
        while (v105 < (v103 - v104) >> 5);
      }
    }
    if (v116 >= 3)
    {
      v111 = a7[2];
      if (v111)
      {
        mDataByteSize = v111->mBuffers[0].mDataByteSize;
        mData = v111->mBuffers[0].mData;
        v114 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 78) + 80))(*((_QWORD *)this + 78));
        v115 = (uint64_t)(*(_QWORD *)(v114 + 8) - *(_QWORD *)v114) >> 2;
        if (v115 >= mDataByteSize >> 2)
          v115 = mDataByteSize >> 2;
        if (v115)
          memmove(mData, *(const void **)v114, 4 * v115);
      }
    }
  }
  return 0;
}

uint64_t AUMicIssueDetector::Render(AUMicIssueDetector *this, unsigned int *a2, const AudioTimeStamp *a3, uint64_t a4)
{
  char v8;
  uint64_t v9;
  ausdk::AUScope *v10;
  uint64_t v11;
  uint64_t v12;
  ausdk::AUInputElement *Element;
  uint64_t result;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  ausdk::AUIOElement *v18;
  uint64_t v19;
  unint64_t v20;
  char v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t BufferList;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD v31[2];
  _OWORD v32[2];
  uint64_t v33;
  uint64_t v34;

  v8 = 0;
  v9 = 0;
  v34 = *MEMORY[0x1E0C80C00];
  v10 = (AUMicIssueDetector *)((char *)this + 80);
  while (1)
  {
    v11 = *((_QWORD *)this + 15);
    if (v11)
      LODWORD(v12) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 24))(v11);
    else
      v12 = (*((_QWORD *)this + 13) - *((_QWORD *)this + 12)) >> 3;
    if (v9 >= v12)
      break;
    if (ausdk::AUBase::HasInput(this, v9))
    {
      Element = (ausdk::AUInputElement *)ausdk::AUScope::SafeGetElement(v10, v9);
      result = ausdk::AUInputElement::PullInput(Element, a2, a3, v9, a4);
      if ((_DWORD)result)
        return result;
    }
    else
    {
      v8 = 1;
    }
    v9 = (v9 + 1);
  }
  v15 = 0;
  v33 = 0;
  memset(v32, 0, sizeof(v32));
  do
  {
    v16 = *((_QWORD *)this + 21);
    if (v16)
      LODWORD(v17) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v16 + 24))(v16);
    else
      v17 = (*((_QWORD *)this + 19) - *((_QWORD *)this + 18)) >> 3;
    if (v15 >= v17)
    {
      v19 = 0;
    }
    else
    {
      v18 = (ausdk::AUIOElement *)ausdk::AUScope::SafeGetElement((AUMicIssueDetector *)((char *)this + 128), v15);
      v19 = ausdk::AUIOElement::PrepareBuffer(v18, a4);
    }
    *((_QWORD *)v32 + v15++) = v19;
  }
  while (v15 != 5);
  if ((v8 & 1) != 0)
    return 0;
  v20 = 0;
  v31[0] = 0;
  v31[1] = 0;
  v21 = 1;
  do
  {
    v22 = v21;
    v23 = *((_QWORD *)this + 15);
    if (v23)
      LODWORD(v24) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v23 + 24))(v23);
    else
      v24 = (*((_QWORD *)this + 13) - *((_QWORD *)this + 12)) >> 3;
    if (v20 >= v24)
    {
      BufferList = 0;
    }
    else
    {
      v25 = ausdk::AUScope::SafeGetElement(v10, v20);
      BufferList = ausdk::AUBufferList::GetBufferList((ausdk::AUBufferList *)(v25 + 144));
    }
    v21 = 0;
    v31[v20] = BufferList;
    v20 = 1;
  }
  while ((v22 & 1) != 0);
  v27 = *((_QWORD *)this + 15);
  if (v27)
    v28 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v27 + 24))(v27);
  else
    v28 = (*((_QWORD *)this + 13) - *((_QWORD *)this + 12)) >> 3;
  v29 = *((_QWORD *)this + 21);
  if (v29)
    v30 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v29 + 24))(v29);
  else
    v30 = (*((_QWORD *)this + 19) - *((_QWORD *)this + 18)) >> 3;
  return (*(uint64_t (**)(AUMicIssueDetector *, unsigned int *, uint64_t, uint64_t, _QWORD *, uint64_t, _OWORD *))(*(_QWORD *)this + 184))(this, a2, a4, v28, v31, v30, v32);
}

BOOL AUMicIssueDetector::BusCountWritable(AUMicIssueDetector *this, int a2)
{
  return (a2 - 1) <= 1 && *((_BYTE *)this + 17) == 0;
}

uint64_t AUMicIssueDetector::SetBusCount(AUMicIssueDetector *this, int a2, unsigned int a3)
{
  int64x2_t *v4;
  unsigned __int8 v6;
  NSObject *v7;
  const char *v8;
  unsigned __int8 v9;
  int v10;
  const char *v11;
  __int16 v12;
  int v13;
  __int16 v14;
  unsigned int v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  if (a2 == 2)
  {
    if (a3 - 1 <= 4)
    {
      v4 = (int64x2_t *)((char *)this + 128);
      goto LABEL_7;
    }
    {
      AU::AUMicIssueDetector::get_log(void)::aumisd_os_log = (uint64_t)os_log_create("com.apple.coreaudio", "AUMicIssueDetector");
    }
    v7 = AU::AUMicIssueDetector::get_log(void)::aumisd_os_log;
    if (!os_log_type_enabled((os_log_t)AU::AUMicIssueDetector::get_log(void)::aumisd_os_log, OS_LOG_TYPE_ERROR))
      return 4294956445;
    v10 = 136315650;
    v11 = "AUMicIssueDetector.cpp";
    v12 = 1024;
    v13 = 189;
    v14 = 1024;
    v15 = a3;
    v8 = "%s:%-5d Invalid number (%u) of output buses requested. We only support 1–5 buses.";
    goto LABEL_15;
  }
  if (a2 != 1)
    return 4294956430;
  if (a3 - 1 <= 1)
  {
    v4 = (int64x2_t *)((char *)this + 80);
LABEL_7:
    ausdk::AUScope::SetNumberOfElements(v4, a3);
    return 0;
  }
  if ((v6 & 1) == 0)
  {
    {
      AU::AUMicIssueDetector::get_log(void)::aumisd_os_log = (uint64_t)os_log_create("com.apple.coreaudio", "AUMicIssueDetector");
    }
  }
  v7 = AU::AUMicIssueDetector::get_log(void)::aumisd_os_log;
  if (os_log_type_enabled((os_log_t)AU::AUMicIssueDetector::get_log(void)::aumisd_os_log, OS_LOG_TYPE_ERROR))
  {
    v10 = 136315650;
    v11 = "AUMicIssueDetector.cpp";
    v12 = 1024;
    v13 = 180;
    v14 = 1024;
    v15 = a3;
    v8 = "%s:%-5d Invalid number (%u) of input buses requested. We only support 1-2 input buses.";
LABEL_15:
    _os_log_impl(&dword_1B5ED0000, v7, OS_LOG_TYPE_ERROR, v8, (uint8_t *)&v10, 0x18u);
  }
  return 4294956445;
}

uint64_t AUMicIssueDetector::GetParameterInfo(AUMicIssueDetector *this, int a2, unsigned int a3, AudioUnitParameterInfo *buffer)
{
  char *v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  int v8;
  int v9;
  signed int v10;
  const __CFString *v11;

  if (a2 == 4)
  {
    v4 = (char *)this + 552;
  }
  else
  {
    if (a2)
      return 4294956430;
    v4 = (char *)this + 528;
  }
  v6 = v4;
  v5 = *(_QWORD *)v4;
  if (a3 >= (unint64_t)((*((_QWORD *)v6 + 1) - v5) >> 5))
    return 4294956418;
  v7 = v5 + 32 * a3;
  v8 = *(_DWORD *)(v7 + 12);
  buffer->unit = *(_DWORD *)(v7 + 8);
  buffer->minValue = *(AudioUnitParameterValue *)(v7 + 16);
  buffer->maxValue = *(AudioUnitParameterValue *)(v7 + 20);
  buffer->defaultValue = *(AudioUnitParameterValue *)(v7 + 24);
  v9 = v8 + 1082130432;
  buffer->flags = v8 + 1082130432;
  v10 = *(_DWORD *)(v7 + 28);
  if (v10 >= 1)
  {
    buffer->clumpID = v10;
    v9 |= 0x100000u;
  }
  v11 = *(const __CFString **)v7;
  buffer->cfNameString = *(CFStringRef *)v7;
  buffer->flags = v9 | 0x8000000;
  CFStringGetCString(v11, buffer->name, 52, 0x8000100u);
  return 0;
}

UInt8 *AUMicIssueDetector::SaveExtendedScopes(AUMicIssueDetector *this, __CFData *a2)
{
  ausdk::AUScope *Scope;

  Scope = (ausdk::AUScope *)ausdk::AUBase::GetScope(this, 4u);
  return ausdk::AUScope::SaveState(Scope, a2);
}

uint64_t AUMicIssueDetector::RestoreState(OpaqueAudioComponentInstance **this, const void *a2)
{
  uint64_t result;

  result = ausdk::AUBase::RestoreState(this, a2);
  if (!(_DWORD)result)
  {
    if (*((_BYTE *)this + 17))
    {
      ++*((_DWORD *)this + 149);
      ++*((_DWORD *)this + 151);
      ++*((_DWORD *)this + 153);
    }
  }
  return result;
}

uint64_t AUMicIssueDetector::GetParameterValueStrings(AUMicIssueDetector *this, int a2, unsigned int a3, const __CFArray **a4)
{
  char *v5;
  uint64_t result;
  const __CFArray *v7;
  __int128 v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  if (a2 == 4)
  {
    v5 = (char *)this + 552;
  }
  else
  {
    if (a2)
      return 4294956430;
    v5 = (char *)this + 528;
  }
  result = 4294956418;
  if (!a2 && (uint64_t)(*((_QWORD *)v5 + 1) - *(_QWORD *)v5) >> 5 <= (unint64_t)a3)
  {
    if (a4)
    {
      if (a3 == 4)
      {
        v8 = xmmword_1E69D7570;
        v7 = CFArrayCreate(0, (const void **)&v8, 4, 0);
        result = 0;
        *a4 = v7;
      }
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t AUMicIssueDetector::CopyClumpName(AUMicIssueDetector *this, int a2, int a3, unsigned int a4, const __CFString **a5)
{
  uint64_t result;
  const __CFString *v7;

  if (a2)
    return 4294956430;
  if ((a3 - 1) > 4)
    return 4294956418;
  v7 = CFStringCreateWithCString(0, off_1E69D75B8[a3 - 1], 0x8000100u);
  result = 0;
  *a5 = v7;
  return result;
}

double AUMicIssueDetector::GetLatency(AUMicIssueDetector *this)
{
  return 0.0;
}

double AUMicIssueDetector::GetTailTime(AUMicIssueDetector *this)
{
  return 0.0;
}

uint64_t AUMicIssueDetector::SupportsTail(AUMicIssueDetector *this)
{
  return 1;
}

BOOL AUMicIssueDetector::StreamFormatWritable(AUMicIssueDetector *this)
{
  return *((_BYTE *)this + 17) == 0;
}

uint64_t AUMicIssueDetector::SupportedNumChannels(AUMicIssueDetector *this, const AUChannelInfo **a2)
{
  if (a2)
    *a2 = (const AUChannelInfo *)&AUMicIssueDetector::SupportedNumChannels(AUChannelInfo const**)::sChannels;
  return 7;
}

uint64_t AUMicIssueDetector::ValidFormat(AUMicIssueDetector *this, const AudioStreamBasicDescription *a2, int a3, AudioStreamBasicDescription *a4)
{
  unsigned int v5;
  BOOL v6;

  if ((_DWORD)a2 == 2 && a3 == 2)
  {
    if (ausdk::ASBD::IsCommonFloat32((ausdk::ASBD *)a4, a2))
      v5 = (a4->mFormatFlags & 0x20) != 0 || a4->mChannelsPerFrame == 1;
    else
      v5 = 0;
LABEL_19:
    if (a4->mChannelsPerFrame == 1)
      return v5;
    else
      return 0;
  }
  v6 = a4->mBitsPerChannel == 64 && a4->mFormatID == 1718773105;
  v5 = (LOBYTE(a4->mFormatFlags) >> 5) & 1;
  if (!v6)
    v5 = 0;
  if ((_DWORD)a2 == 2 && (a3 == 4 || a3 == 1))
    goto LABEL_19;
  if (a4->mChannelsPerFrame - 2 < 7)
    return v5;
  else
    return 0;
}

uint64_t AUMicIssueDetector::GetScopeExtended(AUMicIssueDetector *this, int a2)
{
  if (a2 == 4)
    return (uint64_t)this + 776;
  else
    return 0;
}

void GetScalarFromDictOptional<unsigned int>(const __CFDictionary *a1, const __CFString *a2, void *a3)
{
  const __CFNumber *Value;
  unsigned __int8 v6;
  NSObject *v7;
  int v8;
  const char *v9;
  __int16 v10;
  int v11;
  __int16 v12;
  const char *CStringPtr;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  Value = (const __CFNumber *)CFDictionaryGetValue(a1, a2);
  if (Value)
  {
    CFNumberGetValue(Value, kCFNumberIntType, a3);
  }
  else
  {
    {
      AU::AUMicIssueDetector::get_log(void)::aumisd_os_log = (uint64_t)os_log_create("com.apple.coreaudio", "AUMicIssueDetector");
    }
    v7 = AU::AUMicIssueDetector::get_log(void)::aumisd_os_log;
    if (os_log_type_enabled((os_log_t)AU::AUMicIssueDetector::get_log(void)::aumisd_os_log, OS_LOG_TYPE_INFO))
    {
      v8 = 136315650;
      v9 = "AUMicIssueDetector.cpp";
      v10 = 1024;
      v11 = 907;
      v12 = 2080;
      CStringPtr = CFStringGetCStringPtr(a2, 0x8000100u);
      _os_log_impl(&dword_1B5ED0000, v7, OS_LOG_TYPE_INFO, "%s:%-5d Param value for %s not found in plist, using default value.", (uint8_t *)&v8, 0x1Cu);
    }
  }
}

double _ZNSt3__115allocate_sharedB8ne180100I30AUMicIssueDetectorCoreV1ParamsNS_9allocatorIS1_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(_QWORD *a1)
{
  char *v2;
  _OWORD *v3;
  double result;

  v2 = (char *)operator new(0xB8uLL);
  *(_OWORD *)(v2 + 8) = 0u;
  *(_QWORD *)v2 = &off_1E69D7590;
  *(_OWORD *)(v2 + 24) = 0u;
  *(_OWORD *)(v2 + 40) = 0u;
  *(_OWORD *)(v2 + 56) = 0u;
  *(_OWORD *)(v2 + 72) = 0u;
  *(_OWORD *)(v2 + 88) = 0u;
  *(_OWORD *)(v2 + 104) = 0u;
  *(_OWORD *)(v2 + 136) = 0u;
  *(_OWORD *)(v2 + 152) = 0u;
  *(_OWORD *)(v2 + 28) = xmmword_1B66A2160;
  *(_OWORD *)(v2 + 44) = xmmword_1B66A2170;
  *(_OWORD *)(v2 + 60) = xmmword_1B66A2180;
  *(_OWORD *)(v2 + 76) = xmmword_1B66A2190;
  *(_OWORD *)(v2 + 92) = xmmword_1B66A21A0;
  *(_OWORD *)(v2 + 168) = 0u;
  *(int32x2_t *)(v2 + 108) = vdup_n_s32(0xC2D20000);
  *(_OWORD *)(v2 + 120) = xmmword_1B66A21B0;
  *((_DWORD *)v2 + 34) = 1061997773;
  *(_QWORD *)(v2 + 140) = 0x3000007D0;
  *((_QWORD *)v2 + 21) = 0;
  *(_OWORD *)(v2 + 152) = 0u;
  v3 = operator new(0x3CuLL);
  *v3 = xmmword_1B665DCB4;
  v3[1] = unk_1B665DCC4;
  v3[2] = xmmword_1B665DCD4;
  result = 536871302.0;
  *(_OWORD *)((char *)v3 + 44) = *(__int128 *)((char *)&xmmword_1B665DCD4 + 12);
  *((_QWORD *)v2 + 19) = v3;
  *((_QWORD *)v2 + 20) = (char *)v3 + 60;
  *((_QWORD *)v2 + 21) = (char *)v3 + 60;
  *((_QWORD *)v2 + 22) = 0x3F33333300000000;
  *a1 = v2 + 24;
  a1[1] = v2;
  return result;
}

void sub_1B638B9FC(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void GetScalarFromDictOptional<float>(const __CFDictionary *a1, const __CFString *a2, void *a3)
{
  const __CFNumber *Value;
  unsigned __int8 v6;
  NSObject *v7;
  int v8;
  const char *v9;
  __int16 v10;
  int v11;
  __int16 v12;
  const char *CStringPtr;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  Value = (const __CFNumber *)CFDictionaryGetValue(a1, a2);
  if (Value)
  {
    CFNumberGetValue(Value, kCFNumberFloat32Type, a3);
  }
  else
  {
    {
      AU::AUMicIssueDetector::get_log(void)::aumisd_os_log = (uint64_t)os_log_create("com.apple.coreaudio", "AUMicIssueDetector");
    }
    v7 = AU::AUMicIssueDetector::get_log(void)::aumisd_os_log;
    if (os_log_type_enabled((os_log_t)AU::AUMicIssueDetector::get_log(void)::aumisd_os_log, OS_LOG_TYPE_INFO))
    {
      v8 = 136315650;
      v9 = "AUMicIssueDetector.cpp";
      v10 = 1024;
      v11 = 907;
      v12 = 2080;
      CStringPtr = CFStringGetCStringPtr(a2, 0x8000100u);
      _os_log_impl(&dword_1B5ED0000, v7, OS_LOG_TYPE_INFO, "%s:%-5d Param value for %s not found in plist, using default value.", (uint8_t *)&v8, 0x1Cu);
    }
  }
}

void std::__shared_ptr_emplace<AUMicIssueDetectorCoreV1Params>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E69D7590;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<AUMicIssueDetectorCoreV1Params>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E69D7590;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1BCC95CECLL);
}

void std::__shared_ptr_emplace<AUMicIssueDetectorCoreV1Params>::__on_zero_shared(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 152);
  if (v2)
  {
    *(_QWORD *)(a1 + 160) = v2;
    operator delete(v2);
  }
}

uint64_t AU::AUMicIssueDetector::get_log(AU::AUMicIssueDetector *this)
{
  unsigned __int8 v1;
  char *v2;
  int v4;

  v2 = (char *)&xmmword_1EF135FF8 + 8;
  if ((v1 & 1) == 0)
  {
    v2 = (_BYTE *)(&xmmword_1EF135FF8 + 8);
    if (v4)
    {
      AU::AUMicIssueDetector::get_log(void)::aumisd_os_log = (uint64_t)os_log_create("com.apple.coreaudio", "AUMicIssueDetector");
      v2 = (_BYTE *)(&xmmword_1EF135FF8 + 8);
    }
  }
  return *((_QWORD *)v2 + 352);
}

BOOL AUMicIssueDetector::validOutputFormat(AUMicIssueDetector *this, const AudioStreamBasicDescription *a2, int a3)
{
  double mSampleRate;
  float v6;
  _BOOL8 result;

  result = 0;
  if (a2->mFormatID == 1718773105)
  {
    mSampleRate = a2->mSampleRate;
    v6 = *(double *)(ausdk::AUScope::SafeGetElement((AUMicIssueDetector *)((char *)this + 80), 0) + 80);
    if (mSampleRate == v6 && a2->mChannelsPerFrame == a3)
      return 1;
  }
  return result;
}

uint64_t AUMicIssueDetector::setupCore(AUMicIssueDetector *this)
{
  int v1;
  uint64_t v4;
  uint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  _DWORD *v11;
  int *v12;
  int v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _DWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  __n128 v22;
  std::__shared_weak_count *v23;
  unint64_t *p_shared_owners;
  unint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  char **v32;
  char **v33;
  uint64_t v34;
  unint64_t v35;
  char **v36;
  uint64_t v37;
  unint64_t v38;
  char **v39;
  std::__shared_weak_count *v40;
  unint64_t *v41;
  unint64_t v42;
  uint64_t v43;
  std::__shared_weak_count *v44;
  __int128 __A;

  v1 = *((_DWORD *)this + 145);
  if (v1)
  {
    if (*((_DWORD *)this + 155))
      return 4294956421;
    v4 = operator new();
    *(_QWORD *)v4 = &off_1E69D1C68;
    *(_OWORD *)(v4 + 8) = 0u;
    *(_OWORD *)(v4 + 24) = 0u;
    v5 = (uint64_t *)(v4 + 32);
    *(_OWORD *)(v4 + 40) = 0u;
    *(_QWORD *)(v4 + 56) = 0;
    *(_OWORD *)(v4 + 64) = xmmword_1B662A2B0;
    *(_DWORD *)(v4 + 80) = 0;
    *(_QWORD *)(v4 + 88) = 0;
    *(_QWORD *)(v4 + 96) = 0;
    *(_QWORD *)(v4 + 104) = 0;
    v6 = *((_QWORD *)this + 67) - *((_QWORD *)this + 66);
    v7 = *((_QWORD *)this + 70);
    v8 = (v6 >> 5);
    v9 = *((_QWORD *)this + 69);
    std::vector<float>::resize(v4 + 8, v8);
    v10 = v7 - v9;
    if ((v6 & 0x1FFFFFFFE0) != 0)
    {
      v11 = *(_DWORD **)(v4 + 8);
      v12 = (int *)(*((_QWORD *)this + 66) + 24);
      do
      {
        v13 = *v12;
        v12 += 8;
        *v11++ = v13;
        --v8;
      }
      while (v8);
    }
    v14 = (v10 >> 5);
    std::vector<std::vector<float>>::resize(v5, v14);
    if ((v10 & 0x1FFFFFFFE0) != 0)
    {
      v15 = 0;
      v16 = 24;
      do
      {
        std::vector<float>::resize(*v5 + v15, 8uLL);
        LODWORD(__A) = 0;
        LODWORD(__A) = *(_DWORD *)(*((_QWORD *)this + 69) + v16);
        vDSP_vfill((const float *)&__A, *(float **)(*v5 + v15), 1, 8uLL);
        v15 += 24;
        v16 += 32;
        --v14;
      }
      while (v14);
    }
    *(_QWORD *)(v4 + 112) = 0;
    *(_QWORD *)v4 = &off_1E69C5FE8;
    *(_QWORD *)(v4 + 120) = 0;
    *(_WORD *)(v4 + 128) = 0;
    *(_OWORD *)(v4 + 132) = 0u;
    *(_OWORD *)(v4 + 148) = 0u;
    *(_OWORD *)(v4 + 164) = 0u;
    *(_OWORD *)(v4 + 180) = 0u;
    *(_OWORD *)(v4 + 196) = 0u;
    *(_OWORD *)(v4 + 212) = 0u;
    *(_OWORD *)(v4 + 228) = 0u;
    *(_OWORD *)(v4 + 244) = 0u;
    *(_QWORD *)(v4 + 260) = 0x3F8000003F800000;
    *(_OWORD *)(v4 + 268) = 0u;
    *(_OWORD *)(v4 + 284) = 0u;
    *(_OWORD *)(v4 + 300) = 0u;
    *(_OWORD *)(v4 + 316) = 0u;
    *(_OWORD *)(v4 + 332) = 0u;
    *(_OWORD *)(v4 + 348) = 0u;
    *(_OWORD *)(v4 + 364) = 0u;
    *(_OWORD *)(v4 + 380) = 0u;
    *(_OWORD *)(v4 + 396) = 0u;
    *(_OWORD *)(v4 + 412) = 0u;
    *(_OWORD *)(v4 + 428) = 0u;
    *(_OWORD *)(v4 + 444) = 0u;
    *(_OWORD *)(v4 + 460) = 0u;
    *(_OWORD *)(v4 + 472) = 0u;
    v17 = operator new(0xCuLL);
    *(_QWORD *)(v4 + 472) = v17 + 3;
    *(_QWORD *)(v4 + 480) = v17 + 3;
    *(_QWORD *)v17 = 0x3F0000003E800000;
    v17[2] = 1048576000;
    *(_QWORD *)(v4 + 464) = v17;
    bzero((void *)(v4 + 488), 0x2D8uLL);
    v18 = *((_QWORD *)this + 78);
    *((_QWORD *)this + 78) = v4;
    if (v18)
      (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
    if (!*((_QWORD *)this + 103))
    {
      _ZNSt3__115allocate_sharedB8ne180100I30AUMicIssueDetectorCoreV1ParamsNS_9allocatorIS1_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(&__A);
      std::shared_ptr<vp::xml::_xmlNode const>::operator=[abi:ne180100]((uint64_t)this + 824, &__A);
      v40 = (std::__shared_weak_count *)*((_QWORD *)&__A + 1);
      if (*((_QWORD *)&__A + 1))
      {
        v41 = (unint64_t *)(*((_QWORD *)&__A + 1) + 8);
        do
          v42 = __ldaxr(v41);
        while (__stlxr(v42 - 1, v41));
        if (!v42)
        {
          ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
          std::__shared_weak_count::__release_weak(v40);
        }
      }
    }
    v19 = *((_QWORD *)this + 78);
    v20 = *((unsigned int *)this + 146);
    v21 = *((unsigned int *)this + 145);
    v22.n128_u64[0] = *(_QWORD *)(ausdk::AUScope::SafeGetElement((AUMicIssueDetector *)((char *)this + 80), 0) + 80);
    v22.n128_f32[0] = v22.n128_f64[0];
    v23 = (std::__shared_weak_count *)*((_QWORD *)this + 104);
    v43 = *((_QWORD *)this + 103);
    v44 = v23;
    if (v23)
    {
      p_shared_owners = (unint64_t *)&v23->__shared_owners_;
      do
        v25 = __ldxr(p_shared_owners);
      while (__stxr(v25 + 1, p_shared_owners));
    }
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t *, __n128))(*(_QWORD *)v19 + 16))(v19, v20, v21, &v43, v22);
    v26 = v44;
    if (v44)
    {
      v27 = (unint64_t *)&v44->__shared_owners_;
      do
        v28 = __ldaxr(v27);
      while (__stlxr(v28 - 1, v27));
      if (!v28)
      {
        ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
        std::__shared_weak_count::__release_weak(v26);
      }
    }
    (*(void (**)(_QWORD))(**((_QWORD **)this + 78) + 64))(*((_QWORD *)this + 78));
    v29 = *((unsigned int *)this + 146);
    std::vector<std::vector<float>>::resize((uint64_t *)this + 79, v29);
    std::vector<std::vector<float>>::resize((uint64_t *)this + 82, v29);
    if (*((_DWORD *)this + 146))
    {
      v30 = 0;
      v31 = 0;
      do
      {
        v32 = (char **)(*((_QWORD *)this + 79) + v30);
        v33 = (char **)(*((_QWORD *)this + 82) + v30);
        LODWORD(__A) = 0;
        std::vector<float>::assign(v32, (2 * v1), &__A);
        LODWORD(__A) = 0;
        std::vector<float>::assign(v33, (2 * v1), &__A);
        ++v31;
        v30 += 24;
      }
      while (v31 < *((unsigned int *)this + 146));
    }
    if (*((_DWORD *)this + 148) > 1u)
    {
      LODWORD(__A) = 0;
      std::vector<float>::assign((char **)this + 85, (2 * v1), &__A);
    }
    if (*((_DWORD *)this + 147) >= 2u)
    {
      std::vector<std::vector<float>>::resize((uint64_t *)this + 88, *((unsigned int *)this + 146));
      if (*((_DWORD *)this + 146))
      {
        v34 = 0;
        v35 = 0;
        do
        {
          v36 = (char **)(*((_QWORD *)this + 88) + v34);
          LODWORD(__A) = 0;
          std::vector<float>::assign(v36, (2 * v1), &__A);
          ++v35;
          v34 += 24;
        }
        while (v35 < *((unsigned int *)this + 146));
      }
    }
    if (*((_DWORD *)this + 148) >= 4u)
    {
      std::vector<std::vector<float>>::resize((uint64_t *)this + 91, *((unsigned int *)this + 146));
      if (*((_DWORD *)this + 146))
      {
        v37 = 0;
        v38 = 0;
        do
        {
          v39 = (char **)(*((_QWORD *)this + 91) + v37);
          LODWORD(__A) = 0;
          std::vector<float>::assign(v39, (2 * v1), &__A);
          ++v38;
          v37 += 24;
        }
        while (v38 < *((unsigned int *)this + 146));
      }
      LODWORD(__A) = 0;
      std::vector<float>::assign((char **)this + 94, (2 * v1), &__A);
    }
  }
  return 0;
}

void sub_1B638C130(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<vp::services::Telephony_Utility>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

float PiecewiseLinearTransform::tx(PiecewiseLinearTransform *this, float result, PiecewiseLinearTransform *a3)
{
  unint64_t v3;
  unint64_t v4;
  float *v5;
  PiecewiseLinearTransform *v6;
  float v7;
  char *v8;

  if (a3 == this)
    return result;
  if (*(float *)this >= result)
  {
    v8 = (char *)this + 4;
    return *(float *)v8;
  }
  if (*((float *)a3 - 2) <= result)
  {
    v8 = (char *)a3 - 4;
    return *(float *)v8;
  }
  v3 = (a3 - this) >> 3;
  do
  {
    v4 = v3 >> 1;
    v5 = (float *)((char *)this + 8 * (v3 >> 1));
    v7 = *v5;
    v6 = (PiecewiseLinearTransform *)(v5 + 2);
    v3 += ~(v3 >> 1);
    if (v7 > result)
      v3 = v4;
    else
      this = v6;
  }
  while (v3);
  return *((float *)this - 1)
       + (float)((float)((float)(result - *((float *)this - 2)) * (float)(*((float *)this + 1) - *((float *)this - 1)))
               / (float)(*(float *)this - *((float *)this - 2)));
}

void ParameterTransformBox::~ParameterTransformBox(ParameterTransformBox *this)
{
  uint64_t v2;

  *(_QWORD *)this = &off_1E69D75F0;
  v2 = *((_QWORD *)this + 98);
  *((_QWORD *)this + 98) = 0;
  if (v2)
    std::default_delete<std::vector<AUSM::ExclusionZone>>::operator()[abi:ne180100](v2);
  DSPGraph::Box::~Box(this);
}

{
  uint64_t v2;

  *(_QWORD *)this = &off_1E69D75F0;
  v2 = *((_QWORD *)this + 98);
  *((_QWORD *)this + 98) = 0;
  if (v2)
    std::default_delete<std::vector<AUSM::ExclusionZone>>::operator()[abi:ne180100](v2);
  DSPGraph::Box::~Box(this);
  JUMPOUT(0x1BCC95CECLL);
}

uint64_t ParameterTransformBox::setParameter(ParameterTransformBox *this, float a2)
{
  float v2;
  float v4;
  int v5;
  char *v7;
  char v8;

  v2 = a2;
  if (*((_BYTE *)this + 776))
  {
    v4 = logf(a2);
    if (v2 <= 0.0)
      v2 = -30.0;
    else
      v2 = v4;
  }
  v7 = (char *)this + 780;
  v5 = caulk::pooled_semaphore_mutex::try_lock((ParameterTransformBox *)((char *)this + 780));
  v8 = v5;
  if (v5)
    *((float *)this + 193) = PiecewiseLinearTransform::tx(**((PiecewiseLinearTransform ***)this + 98), v2, *(PiecewiseLinearTransform **)(*((_QWORD *)this + 98) + 8));
  return std::unique_lock<caulk::pooled_semaphore_mutex>::~unique_lock[abi:ne180100]((uint64_t)&v7);
}

void sub_1B638C4E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::unique_lock<caulk::pooled_semaphore_mutex>::~unique_lock[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

float ParameterTransformBox::getParameter(ParameterTransformBox *this)
{
  return *((float *)this + 193);
}

double ParameterTransformBox::desc@<D0>(uint64_t a1@<X8>)
{
  double result;

  result = 2.16793153e233;
  *(_OWORD *)a1 = xmmword_1B66A1260;
  *(_DWORD *)(a1 + 16) = 0;
  return result;
}

uint64_t ParameterTransformBox::getPropertyInfo(ParameterTransformBox *this, int a2)
{
  uint64_t v2;

  v2 = 0x1FFFFD581;
  if (a2 == 1)
    v2 = 0x100000001;
  if (a2)
    return v2;
  else
    return 0x100000018;
}

uint64_t ParameterTransformBox::getProperty(ParameterTransformBox *this, int a2, unsigned int a3, unsigned int a4, unsigned int *a5, _BYTE *a6)
{
  caulk::pooled_semaphore_mutex *v9;
  uint64_t **v10;
  double v11;
  char *v12;
  char *v14;
  uint64_t *v15;
  uint64_t v16;

  if (a2 == 1)
  {
    *a6 = *((_BYTE *)this + 776);
    *a5 = 1;
  }
  else if (!a2)
  {
    v9 = (ParameterTransformBox *)((char *)this + 780);
    caulk::pooled_semaphore_mutex::_lock((ParameterTransformBox *)((char *)this + 780));
    v10 = (uint64_t **)*((_QWORD *)this + 98);
    v15 = 0;
    v16 = 0;
    v14 = 0;
    std::vector<std::pair<float,float>>::__init_with_size[abi:ne180100]<std::pair<float,float>*,std::pair<float,float>*>((char *)&v14, *v10, v10[1], v10[1] - *v10);
    if (*((_BYTE *)this + 776))
      UndoLogTransformationOfXValues(&v14, v11);
    v12 = v14;
    std::vector<std::pair<float,float>>::__assign_with_size[abi:ne180100]<std::pair<float,float>*,std::pair<float,float>*>(a6, (uint64_t *)v14, v15, ((char *)v15 - v14) >> 3);
    *a5 = 24;
    if (v12)
      operator delete(v12);
    caulk::pooled_semaphore_mutex::_unlock(v9);
  }
  return 0;
}

void sub_1B638C614(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p)
{
  caulk::pooled_semaphore_mutex *v10;

  caulk::pooled_semaphore_mutex::_unlock(v10);
  _Unwind_Resume(a1);
}

uint64_t ParameterTransformBox::setProperty(ParameterTransformBox *this, int a2, unsigned int a3, unsigned int a4, int a5, uint64_t **a6)
{
  double v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  int v12;
  double v13;
  BOOL v14;
  char *v15;
  uint64_t *v16;
  uint64_t v17;

  if (a2 == 1)
  {
    v12 = *(unsigned __int8 *)a6;
    caulk::pooled_semaphore_mutex::_lock((ParameterTransformBox *)((char *)this + 780));
    if (v12)
      v14 = 1;
    else
      v14 = *((_BYTE *)this + 776) == 0;
    if (v14)
    {
      if (v12 && !*((_BYTE *)this + 776))
        ApplyLogTransformationOfXValues(*((char ***)this + 98), v13);
    }
    else
    {
      UndoLogTransformationOfXValues(*((char ***)this + 98), v13);
    }
    *((_BYTE *)this + 776) = v12;
    caulk::pooled_semaphore_mutex::_unlock((ParameterTransformBox *)((char *)this + 780));
  }
  else
  {
    if (a2 || a5 != 24)
      return 4294956445;
    v15 = 0;
    v16 = 0;
    v17 = 0;
    std::vector<std::pair<float,float>>::__init_with_size[abi:ne180100]<std::pair<float,float>*,std::pair<float,float>*>((char *)&v15, *a6, a6[1], a6[1] - *a6);
    if (*((_BYTE *)this + 776))
      ApplyLogTransformationOfXValues(&v15, v7);
    caulk::pooled_semaphore_mutex::_lock((ParameterTransformBox *)((char *)this + 780));
    v8 = operator new();
    *(_QWORD *)v8 = 0;
    *(_QWORD *)(v8 + 8) = 0;
    *(_QWORD *)(v8 + 16) = 0;
    v9 = v15;
    std::vector<std::pair<float,float>>::__init_with_size[abi:ne180100]<std::pair<float,float>*,std::pair<float,float>*>((char *)v8, (uint64_t *)v15, v16, ((char *)v16 - v15) >> 3);
    v10 = *((_QWORD *)this + 98);
    *((_QWORD *)this + 98) = v8;
    if (v10)
      std::default_delete<std::vector<AUSM::ExclusionZone>>::operator()[abi:ne180100](v10);
    caulk::pooled_semaphore_mutex::_unlock((ParameterTransformBox *)((char *)this + 780));
    if (v9)
      operator delete(v9);
  }
  return 0;
}

void sub_1B638C76C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *ApplyLogTransformationOfXValues(char **a1, double a2)
{
  __n128 v2;
  _QWORD *result;
  uint64_t v4;
  _QWORD v5[3];
  _QWORD *v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  v5[0] = &off_1E69D78E0;
  v5[1] = &__block_literal_global_10853;
  v6 = v5;
  v2.n128_f32[0] = PiecewiseLinearTransform::ApplyFunctionToChangeXValues(a1, (uint64_t)v5, a2);
  result = v6;
  if (v6 == v5)
  {
    v4 = 4;
    result = v5;
  }
  else
  {
    if (!v6)
      return result;
    v4 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(__n128))(*result + 8 * v4))(v2);
}

void sub_1B638C874(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v14;
  uint64_t v15;

  v14 = a13;
  if (a13 == &a10)
  {
    v15 = 4;
    v14 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v15 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v14 + 8 * v15))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

_QWORD *UndoLogTransformationOfXValues(char **a1, double a2)
{
  __n128 v2;
  _QWORD *result;
  uint64_t v4;
  _QWORD v5[3];
  _QWORD *v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  v5[0] = &off_1E69D78E0;
  v5[1] = &__block_literal_global_7;
  v6 = v5;
  v2.n128_f32[0] = PiecewiseLinearTransform::ApplyFunctionToChangeXValues(a1, (uint64_t)v5, a2);
  result = v6;
  if (v6 == v5)
  {
    v4 = 4;
    result = v5;
  }
  else
  {
    if (!v6)
      return result;
    v4 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(__n128))(*result + 8 * v4))(v2);
}

void sub_1B638C94C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v14;
  uint64_t v15;

  v14 = a13;
  if (a13 == &a10)
  {
    v15 = 4;
    v14 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v15 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v14 + 8 * v15))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

float ___Z30UndoLogTransformationOfXValuesR24PiecewiseLinearTransform_block_invoke(float a1)
{
  float result;

  result = expf(a1);
  if (LODWORD(result) >> 23 >= 0xFF)
    __assert_rtn("UndoLogTransformationOfXValues_block_invoke", "ParameterTransformBox.mm", 84, "isfinite(y)");
  return result;
}

void ___Z31ApplyLogTransformationOfXValuesR24PiecewiseLinearTransform_block_invoke(float a1)
{
  logf(a1);
}

uint64_t GetVPProductFamilyType(int a1)
{
  int v1;
  uint64_t result;
  void **v3;
  void *v4;
  NSObject *v5;
  void **v6;
  void *v7;
  NSObject *v8;
  int v9;
  const char *v10;
  __int16 v11;
  int v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v1 = a1 - 2;
  result = 39;
  switch(v1)
  {
    case 0:
    case 1:
    case 179:
    case 183:
      return 53;
    case 2:
      return 54;
    case 3:
      return 55;
    case 7:
      return 13;
    case 8:
    case 178:
      return 14;
    case 15:
      return 18;
    case 16:
      return 19;
    case 22:
      return 1;
    case 23:
      return 2;
    case 24:
      return 7;
    case 25:
      return 4;
    case 26:
      return 5;
    case 29:
      return 17;
    case 30:
      return 9;
    case 31:
      return 10;
    case 32:
      return 11;
    case 33:
      return 12;
    case 34:
      return 15;
    case 35:
      return 16;
    case 36:
      return 20;
    case 37:
      return 21;
    case 44:
      return 6;
    case 70:
      return 34;
    case 71:
      return 35;
    case 72:
    case 73:
      return 36;
    case 75:
      return 30;
    case 76:
      return 31;
    case 78:
    case 79:
      return 38;
    case 81:
    case 82:
      return 32;
    case 83:
    case 84:
      return 33;
    case 85:
      return 22;
    case 86:
      return 23;
    case 90:
    case 91:
      return 37;
    case 94:
      return 24;
    case 95:
      return 25;
    case 98:
      return 26;
    case 99:
      return 27;
    case 102:
      return 28;
    case 103:
      return 29;
    case 123:
      return 3;
    case 132:
    case 133:
      return result;
    case 136:
    case 137:
      return 40;
    case 138:
    case 139:
      return 41;
    case 144:
    case 145:
      return 42;
    case 146:
    case 147:
      return 43;
    case 148:
    case 149:
      return 44;
    case 150:
    case 151:
      return 45;
    case 152:
    case 153:
      return 46;
    case 154:
    case 155:
      return 47;
    case 156:
    case 157:
      return 48;
    case 158:
      return 49;
    case 159:
    case 160:
      return 50;
    case 161:
    case 162:
      return 51;
    case 167:
      return 52;
    case 175:
      return 8;
    default:
      if (VPLogScope(void)::once != -1)
        dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
      v3 = (void **)VPLogScope(void)::scope;
      if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(1, VPLogScope(void)::scope, 0))
      {
        v4 = *v3;
        if (!*v3)
          v4 = (void *)MEMORY[0x1E0C81028];
        v5 = v4;
        if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
        {
          v9 = 136315394;
          v10 = "vpBaseAspen.mm";
          v11 = 1024;
          v12 = 296;
          _os_log_impl(&dword_1B5ED0000, v5, OS_LOG_TYPE_ERROR, "%25s:%-5d _vp: <SERIOUS ERROR> Hardware unknown! default config!", (uint8_t *)&v9, 0x12u);
        }

        if (VPLogScope(void)::once != -1)
          dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
      }
      v6 = (void **)VPLogScope(void)::scope;
      if (!VPLogScope(void)::scope)
        return 0;
      result = CALegacyLog::LogEnabled(1, VPLogScope(void)::scope, 0);
      if ((_DWORD)result)
      {
        v7 = *v6;
        if (!*v6)
          v7 = (void *)MEMORY[0x1E0C81028];
        v8 = v7;
        if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
        {
          v9 = 136315394;
          v10 = "vpBaseAspen.mm";
          v11 = 1024;
          v12 = 298;
          _os_log_impl(&dword_1B5ED0000, v8, OS_LOG_TYPE_ERROR, "%25s:%-5d Hey I just met you, and this is crazy, but here's my component 'Audio - DSP', so file a radar maybe.", (uint8_t *)&v9, 0x12u);
        }

        return 0;
      }
      return result;
  }
}

void GetAndPrintPortTypeProperty(AudioObjectPropertyScope a1, int a2, AudioObjectID inObjectID, AudioObjectPropertySelector a4, const char *a5, unsigned int *a6)
{
  CFIndex Count;
  void **v9;
  void *v10;
  NSObject *v11;
  const char *v12;
  const char *v13;
  CFIndex v14;
  void *v15;
  int *v16;
  const __CFNumber *ValueAtIndex;
  void **v18;
  void *v19;
  NSObject *v20;
  void **v22;
  void *v23;
  NSObject *v24;
  void *v25;
  int *v26;
  AudioObjectID v27;
  BOOL v28;
  int v29;
  void **v30;
  void *v31;
  NSObject *v32;
  AudioObjectID v33;
  void *v34;
  NSObject *v35;
  AudioObjectPropertyAddress v39;
  int v40;
  AudioObjectPropertyAddress v41;
  AudioObjectID valuePtr;
  UInt32 ioDataSize;
  const __CFArray *outData;
  AudioObjectPropertyAddress inAddress;
  uint8_t v46[16];
  uint8_t buf[4];
  const char *v48;
  __int16 v49;
  int v50;
  __int16 v51;
  _BYTE v52[14];
  __int16 v53;
  uint8_t *v54;
  uint64_t v55;

  v55 = *MEMORY[0x1E0C80C00];
  inAddress.mSelector = 1684104048;
  inAddress.mScope = a1;
  inAddress.mElement = 0;
  outData = 0;
  ioDataSize = 8;
  if (!AudioObjectGetPropertyData(inObjectID, &inAddress, 0, 0, &ioDataSize, &outData) && ioDataSize == 8)
  {
    Count = CFArrayGetCount(outData);
    if (VPLogScope(void)::once != -1)
      dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
    v9 = (void **)VPLogScope(void)::scope;
    if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(5, VPLogScope(void)::scope, 0))
    {
      v10 = *v9;
      if (!*v9)
        v10 = (void *)MEMORY[0x1E0C81028];
      v11 = v10;
      if (os_log_type_enabled(v11, OS_LOG_TYPE_DEBUG))
      {
        v12 = "REF";
        *(_DWORD *)buf = 136316162;
        v48 = "vpBaseAspen.mm";
        if (a1 == 1768845428)
          v12 = "MIC";
        v49 = 1024;
        v50 = 551;
        *(_QWORD *)v52 = v12;
        v13 = "input";
        v51 = 2080;
        *(_WORD *)&v52[8] = 1024;
        *(_DWORD *)&v52[10] = Count;
        if (a1 != 1768845428)
          v13 = "output";
        v53 = 2080;
        v54 = (uint8_t *)v13;
        _os_log_impl(&dword_1B5ED0000, v11, OS_LOG_TYPE_DEBUG, "%25s:%-5d %s device has %d active %s ports", buf, 0x2Cu);
      }

    }
    if (Count >= 1)
    {
      v14 = 0;
      v15 = (void *)MEMORY[0x1E0C81028];
      v16 = &dword_1B5ED0000;
      while (1)
      {
        valuePtr = 0;
        ValueAtIndex = (const __CFNumber *)CFArrayGetValueAtIndex(outData, v14);
        if (ValueAtIndex)
        {
          CFNumberGetValue(ValueAtIndex, kCFNumberIntType, &valuePtr);
          if (VPLogScope(void)::once != -1)
            dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
          v18 = (void **)VPLogScope(void)::scope;
          if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(5, VPLogScope(void)::scope, 0))
          {
            v19 = *v18;
            if (!*v18)
              v19 = v15;
            v20 = v19;
            if (os_log_type_enabled(v20, OS_LOG_TYPE_DEBUG))
            {
              *(_DWORD *)buf = 136315650;
              v48 = "vpBaseAspen.mm";
              v49 = 1024;
              v50 = 561;
              v51 = 1024;
              *(_DWORD *)v52 = valuePtr;
              _os_log_impl(v16, v20, OS_LOG_TYPE_DEBUG, "%25s:%-5d current port ID = %d", buf, 0x18u);
            }

          }
        }
        *(_QWORD *)&v41.mSelector = 0x676C6F6270747970;
        v41.mElement = 0;
        v40 = 0;
        ioDataSize = 4;
        if (!AudioObjectGetPropertyData(valuePtr, &v41, 0, 0, &ioDataSize, &v40) && ioDataSize == 4)
        {
          if (VPLogScope(void)::once != -1)
            dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
          v22 = (void **)VPLogScope(void)::scope;
          if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(5, VPLogScope(void)::scope, 0))
          {
            v23 = *v22;
            if (!*v22)
              v23 = v15;
            v24 = v23;
            if (os_log_type_enabled(v24, OS_LOG_TYPE_DEBUG))
            {
              v25 = v15;
              v26 = v16;
              v27 = valuePtr;
              CAX4CCString::CAX4CCString((CAX4CCString *)v46, v40);
              *(_DWORD *)buf = 136315906;
              v48 = "vpBaseAspen.mm";
              v49 = 1024;
              v50 = 572;
              v51 = 1024;
              *(_DWORD *)v52 = v27;
              *(_WORD *)&v52[4] = 2080;
              *(_QWORD *)&v52[6] = v46;
              v16 = v26;
              _os_log_impl(v26, v24, OS_LOG_TYPE_DEBUG, "%25s:%-5d port type for port id %d is %s", buf, 0x22u);
              v15 = v25;
            }

          }
          if (v40 == a2)
            break;
        }
        if (Count == ++v14)
          goto LABEL_69;
      }
      v39.mSelector = a4;
      *(_QWORD *)&v39.mScope = 1735159650;
      ioDataSize = 4;
      if (AudioObjectGetPropertyData(valuePtr, &v39, 0, 0, &ioDataSize, a6))
        v28 = 0;
      else
        v28 = ioDataSize == 4;
      v29 = v28;
      if (VPLogScope(void)::once != -1)
        dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
      v30 = (void **)VPLogScope(void)::scope;
      if (v29)
      {
        if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(5, VPLogScope(void)::scope, 0))
        {
          v31 = *v30;
          if (!*v30)
            v31 = v15;
          v32 = v31;
          if (os_log_type_enabled(v32, OS_LOG_TYPE_DEBUG))
          {
            v33 = valuePtr;
            CAX4CCString::CAX4CCString((CAX4CCString *)v46, *a6);
            *(_DWORD *)buf = 136316162;
            v48 = "vpBaseAspen.mm";
            v49 = 1024;
            v50 = 582;
            v51 = 2080;
            *(_QWORD *)v52 = a5;
            *(_WORD *)&v52[8] = 1024;
            *(_DWORD *)&v52[10] = v33;
            v53 = 2080;
            v54 = v46;
            _os_log_impl(&dword_1B5ED0000, v32, OS_LOG_TYPE_DEBUG, "%25s:%-5d port %s type for port id %d is %s", buf, 0x2Cu);
          }

        }
      }
      else
      {
        if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(5, VPLogScope(void)::scope, 0))
        {
          v34 = *v30;
          if (!*v30)
            v34 = v15;
          v35 = v34;
          if (os_log_type_enabled(v35, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)buf = 136315906;
            v48 = "vpBaseAspen.mm";
            v49 = 1024;
            v50 = 586;
            v51 = 2080;
            *(_QWORD *)v52 = a5;
            *(_WORD *)&v52[8] = 1024;
            *(_DWORD *)&v52[10] = valuePtr;
            _os_log_impl(&dword_1B5ED0000, v35, OS_LOG_TYPE_DEBUG, "%25s:%-5d port %s type for port id %d was not found!", buf, 0x22u);
          }

        }
        *a6 = 0;
      }
    }
  }
LABEL_69:
  if (outData)
    CFRelease(outData);
}

void sub_1B638D6B4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void dft_v5::paramInit_v5(uint64_t *a1, int a2, int a3, int a4, unsigned int a5, int a6, int a7, int a8, float a9, float a10, float a11, float a12, float a13, int a14, unsigned int a15, int a16, int a17, char a18, char a19, char a20)
{
  char *v32;
  char *v33;
  int v34;
  int v35;
  int v36;
  float v37;
  int v38;
  int v39;
  float v40;
  float v41;
  float v42;
  _DWORD *v43;
  float v44;
  int v45;
  int v46;
  int v47;
  int v48;
  int v50;
  int v51;
  float v52;
  uint64_t v53;
  int v54;
  int v55;
  int v56;
  const char *v57;
  std::bad_alloc *exception;
  std::bad_alloc *v59;
  uint8_t buf[4];
  const char *v62;
  __int16 v63;
  int v64;
  uint64_t v65;

  v65 = *MEMORY[0x1E0C80C00];
  v32 = (char *)malloc_type_malloc(0xC8uLL, 0x2C8E6D5CuLL);
  if (!v32)
  {
LABEL_47:
    exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
    v59 = std::bad_alloc::bad_alloc(exception);
  }
  v33 = v32;
  *((_DWORD *)v32 + 49) = 0;
  *(_OWORD *)(v32 + 180) = 0u;
  *(_OWORD *)(v32 + 164) = 0u;
  *(_OWORD *)(v32 + 148) = 0u;
  *(_OWORD *)(v32 + 132) = 0u;
  *(_OWORD *)(v32 + 116) = 0u;
  *(_OWORD *)(v32 + 100) = 0u;
  *(_OWORD *)(v32 + 84) = 0u;
  *(_OWORD *)(v32 + 68) = 0u;
  *(_OWORD *)(v32 + 52) = 0u;
  *(_OWORD *)(v32 + 36) = 0u;
  *(_OWORD *)(v32 + 20) = 0u;
  *(_OWORD *)(v32 + 4) = 0u;
  *a1 = (uint64_t)v32;
  v34 = 2 * a3;
  v35 = a3 + 1;
  *(_DWORD *)v32 = 2 * a3;
  if (a8)
    v36 = a4 + 1;
  else
    v36 = a4;
  *((_DWORD *)v32 + 11) = a4;
  *((_DWORD *)v32 + 12) = v36;
  *((_DWORD *)v32 + 4) = a3;
  *((_DWORD *)v32 + 7) = a3;
  v37 = (float)a3;
  *((float *)v32 + 8) = 1.0 / (float)a3;
  *((_DWORD *)v32 + 16) = a5;
  if (a6 && (v38 = (int)(float)((float)(int)a5 / 5000.0), *((_DWORD *)v32 + 17) = v38, v38 > 0))
  {
    if (v38 < 7)
      goto LABEL_11;
    v39 = 6;
  }
  else
  {
    v39 = 1;
  }
  *((_DWORD *)v32 + 17) = v39;
LABEL_11:
  v40 = 0.0;
  v41 = v37 / (float)a5;
  if (a5)
    v40 = v41 * 1000.0;
  else
    v41 = 0.0;
  *((float *)v32 + 5) = v41;
  *((float *)v32 + 6) = v40;
  *((_DWORD *)v32 + 9) = a3 >> 1;
  *((_DWORD *)v32 + 10) = v35;
  *((_DWORD *)v32 + 13) = a4 * a3;
  *((_DWORD *)v32 + 14) = v36 * v35;
  *((_DWORD *)v32 + 15) = v36 * a3;
  *((_DWORD *)v32 + 24) = 0;
  v42 = powf((float)(1.0 / (float)((float)a2 * -3.0)) + 1.0, v37);
  *((float *)v33 + 22) = 1.0 / (float)v34;
  *((float *)v33 + 23) = v42;
  *((_DWORD *)v33 + 25) = a7;
  *((_DWORD *)v33 + 26) = a8;
  *((_DWORD *)v33 + 20) = v34;
  *((_DWORD *)v33 + 21) = 1065353216;
  *((_DWORD *)v33 + 18) = a4 * a3 + v34;
  MultiRadixRealFFT_Create(2 * a3, (MultiRadixRealFFT **)v33 + 1);
  if (a3 > 4096)
  {
    if (os_log_type_enabled(0, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      v62 = "dft_v5.cpp";
      v63 = 1024;
      v64 = 214;
      v57 = "%25s:%-5d ASSERTION FAILURE [(!(fftSize > 2048 * 4)) != 0 is false]: ";
LABEL_45:
      _os_log_impl(&dword_1B5ED0000, 0, OS_LOG_TYPE_ERROR, v57, buf, 0x12u);
    }
LABEL_46:
    __break(1u);
    goto LABEL_47;
  }
  if (a4 >= 257)
  {
    if (os_log_type_enabled(0, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      v62 = "dft_v5.cpp";
      v63 = 1024;
      v64 = 216;
      v57 = "%25s:%-5d ASSERTION FAILURE [(!(nDftBuffers > 256)) != 0 is false]: ";
      goto LABEL_45;
    }
    goto LABEL_46;
  }
  if (a5 <= 0x2EE0)
  {
    v43 = (_DWORD *)*a1;
    *(_DWORD *)(*a1 + 108) = v35;
LABEL_21:
    v43[28] = v35;
LABEL_22:
    v43[29] = v35;
    v46 = a3 + 1;
    goto LABEL_23;
  }
  v44 = (float)v35 / (float)a5;
  v45 = (int)(float)(roundf(v44 * 8000.0) + 1.0);
  if (v35 < v45)
    v45 = a3 + 1;
  *(_DWORD *)(*a1 + 108) = v45;
  v43 = (_DWORD *)*a1;
  if (a5 <= 0x4E20)
    goto LABEL_21;
  v55 = (int)(float)((float)((float)v35 * roundf(v44 * 16000.0)) + 1.0);
  if (v35 < v55)
    v55 = a3 + 1;
  v43[28] = v55;
  v43 = (_DWORD *)*a1;
  if (a5 <= 0x5DC0)
    goto LABEL_22;
  v56 = (int)(float)(roundf(v44 * 24000.0) + 1.0);
  if (v35 < v56)
    v56 = a3 + 1;
  v43[29] = v56;
  v43 = (_DWORD *)*a1;
  v46 = *(_DWORD *)(*a1 + 116);
LABEL_23:
  v43[30] = 1;
  v47 = v43[27];
  if (v47 < v46)
  {
    v48 = v43[28];
    if (v48 < v46 && v47 < v48)
      v50 = 3;
    else
      v50 = 2;
    v43[30] = v50;
  }
  v43[31] = a14;
  v43[32] = a15;
  if ((a16 & 0xFFFFFFFE) == 2)
    v51 = a15;
  else
    v51 = 1;
  v43[33] = v51;
  v43[40] = a16;
  v43[41] = a17;
  v52 = __exp10f(a9 / 10.0);
  v53 = *a1;
  *(float *)(v53 + 172) = v52;
  v54 = *(_DWORD *)(v53 + 132);
  *(_DWORD *)(v53 + 76) = *(_DWORD *)(v53 + 72) * v54;
  *(_DWORD *)(v53 + 136) = a15 * a3;
  *(_DWORD *)(v53 + 140) = v54 * a3;
  *(_DWORD *)(v53 + 144) = v35 * a15;
  *(int32x2_t *)(v53 + 148) = vrev64_s32(vmul_s32(*(int32x2_t *)(v53 + 56), vdup_n_s32(a15)));
  *(_DWORD *)(v53 + 156) = *(_DWORD *)(v53 + 44) * a15;
  *(_DWORD *)(v53 + 168) = 0;
  *(_BYTE *)(v53 + 176) = a18;
  *(_BYTE *)(v53 + 177) = a19;
  *(_BYTE *)(v53 + 178) = a20;
  *(float *)(v53 + 180) = a10;
  *(float *)(v53 + 184) = a11;
  *(float *)(v53 + 188) = a12;
  *(float *)(v53 + 192) = a13;
  *(_DWORD *)(v53 + 196) = llroundf(80.0 / *(float *)(v53 + 24));
}

void dft_v5::dftGenericAnalysis2ndHalf(const DSPComplex *a1, float *__C, float *a3, uint64_t a4, int a5)
{
  int v9;
  vDSP_Length v10;
  uint64_t v11;
  float v12;
  MultiRadixRealFFT *v13;
  DSPSplitComplex v14;

  v9 = *(_DWORD *)(a4 + 36);
  v10 = v9;
  if (a5)
    v11 = *(unsigned int *)(a4 + 36);
  else
    v11 = 0;
  vDSP_vclr(__C, 1, 2 * v9);
  vDSP_vclr(a3, 1, 2 * v10);
  v14.realp = &__C[v11];
  v14.imagp = &a3[v11];
  vDSP_ctoz(a1, 2, &v14, 1, v10);
  v14.realp = __C;
  v14.imagp = a3;
  v13 = *(MultiRadixRealFFT **)(a4 + 8);
  if (v13)
    MultiRadixRealFFT::RealInPlaceTransform(v13, &v14, 1, v12);
  vDSP_vsmul(__C, 1, (const float *)(a4 + 88), __C, 1, *(int *)(a4 + 16));
  vDSP_vsmul(a3, 1, (const float *)(a4 + 88), a3, 1, *(int *)(a4 + 16));
}

void dft_v5::dftGenericAnalysis2ndHalf_dsc(const void *a1, const void *a2, float *__C, float *a4, int *a5)
{
  int v10;
  vDSP_Length v11;
  float v12;
  MultiRadixRealFFT *v13;
  DSPSplitComplex v14;

  v10 = *a5 >> 2;
  v11 = (uint64_t)*a5 >> 2;
  vDSP_vclr(__C, 1, v11);
  vDSP_vclr(a4, 1, v11);
  memcpy(&__C[v10], a1, 4 * v10);
  memcpy(&a4[v10], a2, 4 * v10);
  v14.realp = __C;
  v14.imagp = a4;
  v13 = (MultiRadixRealFFT *)*((_QWORD *)a5 + 1);
  if (v13)
    MultiRadixRealFFT::RealInPlaceTransform(v13, &v14, 1, v12);
  vDSP_vsmul(__C, 1, (const float *)a5 + 22, __C, 1, (uint64_t)*a5 >> 1);
  vDSP_vsmul(a4, 1, (const float *)a5 + 22, a4, 1, (uint64_t)*a5 >> 1);
}

void dft_v5::dftSynthesis(float *__C, float *a2, uint64_t a3)
{
  float v4;
  MultiRadixRealFFT *v6;
  float __B;
  DSPSplitComplex v8;

  v4 = *(float *)(a3 + 84);
  __B = v4;
  v8.realp = __C;
  v8.imagp = a2;
  if (v4 != 1.0)
  {
    vDSP_vsmul(__C, 1, &__B, __C, 1, *(int *)(a3 + 16));
    vDSP_vsmul(a2, 1, &__B, a2, 1, *(int *)(a3 + 16));
  }
  v6 = *(MultiRadixRealFFT **)(a3 + 8);
  if (v6)
    MultiRadixRealFFT::RealInPlaceTransform(v6, &v8, -1, v4);
}

uint64_t AUSM::RoomCongruence::Processor::computeAverageRT60(uint64_t *a1, _QWORD *a2, float *a3, float *a4)
{
  void *v6;
  float v7;
  uint64_t *v8;
  uint64_t v9;
  float v10;
  uint64_t v11;
  NSObject *v12;
  const char *v13;
  NSObject *v14;
  int v16;
  uint64_t *v17;
  __int16 v18;
  const char *v19;
  _BYTE buf[22];
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  if (a4 == a3)
  {
    if (getAUSMV2Log(void)::onceToken != -1)
      dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_5474);
    v12 = getAUSMV2Log(void)::gLog;
    v10 = 0.0;
    if (!os_log_type_enabled((os_log_t)getAUSMV2Log(void)::gLog, OS_LOG_TYPE_ERROR))
      goto LABEL_17;
    if (*((char *)a1 + 23) < 0)
      a1 = (uint64_t *)*a1;
    *(_DWORD *)buf = 136315394;
    *(_QWORD *)&buf[4] = a1;
    *(_WORD *)&buf[12] = 2080;
    *(_QWORD *)&buf[14] = "computeAverageRT60";
    v13 = "[%s|%s] The center freq. array is empty. Returning empty optional.";
    goto LABEL_27;
  }
  if (a2[1] - *a2 != (char *)a4 - (char *)a3)
  {
    if (getAUSMV2Log(void)::onceToken != -1)
      dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_5474);
    v12 = getAUSMV2Log(void)::gLog;
    v10 = 0.0;
    if (!os_log_type_enabled((os_log_t)getAUSMV2Log(void)::gLog, OS_LOG_TYPE_ERROR))
      goto LABEL_17;
    if (*((char *)a1 + 23) < 0)
      a1 = (uint64_t *)*a1;
    *(_DWORD *)buf = 136315394;
    *(_QWORD *)&buf[4] = a1;
    *(_WORD *)&buf[12] = 2080;
    *(_QWORD *)&buf[14] = "computeAverageRT60";
    v13 = "[%s|%s] Number of elements in the center freq. and the RT60 vectors is not equal. Returning empty optional.";
LABEL_27:
    _os_log_error_impl(&dword_1B5ED0000, v12, OS_LOG_TYPE_ERROR, v13, buf, 0x16u);
LABEL_17:
    v11 = 0;
    return v11 & 0x100000000 | LODWORD(v10);
  }
  AUSM::RoomCongruence::findIndicesOfCenterFreqsWithinRange((uint64_t **)buf, a3, a4, 500.0, 4000.0);
  v6 = *(void **)buf;
  if (*(_QWORD *)&buf[8] != *(_QWORD *)buf)
  {
    v7 = 0.0;
    v8 = *(uint64_t **)buf;
    do
    {
      v9 = *v8++;
      v7 = v7 + *(float *)(*a2 + 4 * v9);
    }
    while (v8 != *(uint64_t **)&buf[8]);
    v10 = v7 / (float)(unint64_t)((uint64_t)(*(_QWORD *)&buf[8] - *(_QWORD *)buf) >> 3);
    v11 = 0x100000000;
    if (!*(_QWORD *)buf)
      return v11 & 0x100000000 | LODWORD(v10);
LABEL_22:
    operator delete(v6);
    return v11 & 0x100000000 | LODWORD(v10);
  }
  if (getAUSMV2Log(void)::onceToken != -1)
    dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_5474);
  v14 = getAUSMV2Log(void)::gLog;
  v10 = 0.0;
  if (os_log_type_enabled((os_log_t)getAUSMV2Log(void)::gLog, OS_LOG_TYPE_ERROR))
  {
    if (*((char *)a1 + 23) < 0)
      a1 = (uint64_t *)*a1;
    v16 = 136315394;
    v17 = a1;
    v18 = 2080;
    v19 = "computeAverageRT60";
    _os_log_error_impl(&dword_1B5ED0000, v14, OS_LOG_TYPE_ERROR, "[%s|%s] No center frequencies within the provided range were found. Returning empty optional.", (uint8_t *)&v16, 0x16u);
  }
  v11 = 0;
  if (v6)
    goto LABEL_22;
  return v11 & 0x100000000 | LODWORD(v10);
}

AUSM::RoomCongruence::RoomConfiguration *AUSM::RoomCongruence::RoomConfiguration::RoomConfiguration(AUSM::RoomCongruence::RoomConfiguration *this, const AUSM::RoomCongruence::RoomConfiguration *a2)
{
  uint64_t v4;

  *(_QWORD *)this = 0;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(this, *(const void **)a2, *((_QWORD *)a2 + 1), (uint64_t)(*((_QWORD *)a2 + 1) - *(_QWORD *)a2) >> 2);
  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 4) = 0;
  *((_QWORD *)this + 5) = 0;
  std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>((_QWORD *)this + 3, *((const void **)a2 + 3), *((_QWORD *)a2 + 4), (uint64_t)(*((_QWORD *)a2 + 4) - *((_QWORD *)a2 + 3)) >> 2);
  v4 = *((_QWORD *)a2 + 6);
  *((_QWORD *)this + 7) = 0;
  *((_QWORD *)this + 6) = v4;
  *((_QWORD *)this + 8) = 0;
  *((_QWORD *)this + 9) = 0;
  std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>((_QWORD *)this + 7, *((const void **)a2 + 7), *((_QWORD *)a2 + 8), (uint64_t)(*((_QWORD *)a2 + 8) - *((_QWORD *)a2 + 7)) >> 2);
  *((_QWORD *)this + 10) = 0;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>((_QWORD *)this + 10, *((const void **)a2 + 10), *((_QWORD *)a2 + 11), (uint64_t)(*((_QWORD *)a2 + 11) - *((_QWORD *)a2 + 10)) >> 2);
  return this;
}

void sub_1B638E16C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void **v3;
  void *v5;
  void *v6;
  void *v7;

  v5 = *v3;
  if (*v3)
  {
    *(_QWORD *)(v1 + 64) = v5;
    operator delete(v5);
  }
  v6 = *v2;
  if (*v2)
  {
    *(_QWORD *)(v1 + 32) = v6;
    operator delete(v6);
  }
  v7 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v7;
    operator delete(v7);
  }
  _Unwind_Resume(exception_object);
}

void AUSM::RoomCongruence::RoomConfiguration::~RoomConfiguration(AUSM::RoomCongruence::RoomConfiguration *this)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  v2 = (void *)*((_QWORD *)this + 10);
  if (v2)
  {
    *((_QWORD *)this + 11) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 7);
  if (v3)
  {
    *((_QWORD *)this + 8) = v3;
    operator delete(v3);
  }
  v4 = (void *)*((_QWORD *)this + 3);
  if (v4)
  {
    *((_QWORD *)this + 4) = v4;
    operator delete(v4);
  }
  v5 = *(void **)this;
  if (*(_QWORD *)this)
  {
    *((_QWORD *)this + 1) = v5;
    operator delete(v5);
  }
}

void AUSM::RoomCongruence::Processor::computeTargetMatchingParams(_BYTE *a1, uint64_t *a2, uint64_t a3, int a4, uint64_t a5)
{
  uint64_t *v7;
  float *v8;
  float *v9;
  char *v10;
  float *v11;
  float *v12;
  float *v15;
  float *v16;
  float *v17;
  uint64_t v18;
  float v19;
  float v20;
  float v21;
  char *v22;
  NSObject *v23;
  uint64_t v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float v29;
  float v30;
  NSObject *v31;
  const char *v32;
  NSObject *v33;
  float v34;
  uint64_t v35;
  unint64_t v36;
  float *v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t v42;
  NSObject *v43;
  uint64_t v44;
  unint64_t v45;
  float v46;
  float *v47;
  float *v48;
  uint64_t v49;
  unint64_t v50;
  unint64_t v51;
  uint64_t v52;
  unint64_t v53;
  NSObject *v54;
  uint64_t v55;
  void *v56;
  float *v57;
  uint64_t v58;
  unsigned int v59;
  float v60;
  float v61;
  char *v62;
  float *v63;
  char *v64;
  uint64_t v65;
  unint64_t v66;
  uint64_t v67;
  unint64_t v68;
  char *v69;
  float *v70;
  int v71;
  float *v72;
  float v73;
  double v74;
  float v75;
  NSObject *v76;
  uint64_t v77;
  NSObject *v78;
  NSObject *v79;
  float v80;
  _BYTE *v81;
  char *v82;
  char *v83;
  uint64_t v84;
  _BYTE *v85;
  char *v86;
  float v87;
  char *v88;
  uint64_t v89;
  float v90;
  float v91;
  float v92;
  uint64_t *v93;
  char *v94;
  uint64_t v95;
  float v96;
  float v97;
  float v98;
  float v99;
  float v100;
  float v101;
  float v102;
  float v103;
  char *v104;
  unint64_t v105;
  char *v106;
  char *v107;
  uint64_t v108;
  unint64_t v109;
  unint64_t v110;
  uint64_t v111;
  float v112;
  float *v113;
  float v114;
  char *v115;
  char *v116;
  uint64_t v117;
  unint64_t v118;
  unint64_t v119;
  uint64_t v120;
  char *v121;
  char *v122;
  char *v123;
  uint64_t v124;
  unint64_t v125;
  unint64_t v126;
  uint64_t v127;
  char *v128;
  NSObject *v129;
  void *v130;
  void *v131;
  int64_t v132;
  char *v133;
  char *v134;
  __CFArray *Mutable;
  __CFArray *v136;
  __CFArray *v137;
  __CFArray *v138;
  char *v139;
  int v140;
  int v141;
  int v142;
  CFNumberRef v143;
  CFNumberRef v144;
  CFNumberRef v145;
  CFNumberRef v146;
  __CFDictionary *v147;
  void *v148;
  const void *v149;
  CFTypeRef v150;
  CFTypeRef v151;
  CFTypeRef v152;
  CFTypeRef v153;
  uint64_t v154;
  uint64_t v155;
  std::runtime_error *exception;
  std::runtime_error *v157;
  std::runtime_error *v158;
  std::runtime_error *v159;
  void *__src;
  char *v161;
  unint64_t v162;
  void *v163;
  void *__dst;
  uint64_t v165;
  CFTypeRef cf;
  __int128 v167;
  __int128 v168;
  __int128 v169;
  char v170;
  CFTypeRef v171;
  __int128 v172;
  CFTypeRef v173;
  _BYTE v174[25];
  CFTypeRef v175;
  uint64_t v176;
  int v177;
  void *valuePtr;
  _BYTE *v179;
  void *v180;
  char *v181;
  void *v182;
  char *v183;
  __int128 __p;
  char *v185;
  _BYTE buf[24];
  _BYTE v187[38];
  CFTypeRef v188;
  __int128 v189;
  CFTypeRef v190;
  _OWORD v191[2];
  CFTypeRef v192;
  uint64_t v193;
  int v194;
  char v195;
  const void *v196;
  void *v197;
  char v198;
  uint64_t v199;

  v7 = a2;
  v199 = *MEMORY[0x1E0C80C00];
  *a1 = 0;
  a1[184] = 0;
  v8 = *(float **)a5;
  v9 = *(float **)(a5 + 8);
  v10 = (char *)v9 - *(_QWORD *)a5;
  v12 = *(float **)a3;
  v11 = *(float **)(a3 + 8);
  if (v10 != (char *)v11 - *(_QWORD *)a3)
  {
LABEL_25:
    if (getAUSMV2Log(void)::onceToken != -1)
      dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_5474);
    v31 = getAUSMV2Log(void)::gLog;
    if (!os_log_type_enabled((os_log_t)getAUSMV2Log(void)::gLog, OS_LOG_TYPE_ERROR))
      return;
    if (*((char *)v7 + 23) < 0)
      v7 = (uint64_t *)*v7;
    *(_DWORD *)buf = 136315394;
    *(_QWORD *)&buf[4] = v7;
    *(_WORD *)&buf[12] = 2080;
    *(_QWORD *)&buf[14] = "computeTargetMatchingParams";
    v32 = "[%s|%s] Mismatched frequency resolutions between the requested room config and user data. Returning empty optional.";
LABEL_51:
    _os_log_error_impl(&dword_1B5ED0000, v31, OS_LOG_TYPE_ERROR, v32, buf, 0x16u);
    return;
  }
  if (v8 != v9)
  {
    v15 = *(float **)a3;
    v16 = *(float **)a5;
    while (*v16 == *v15)
    {
      ++v16;
      ++v15;
      if (v16 == v9)
        goto LABEL_6;
    }
    goto LABEL_25;
  }
LABEL_6:
  if (v12 == v11 || v10 == (char *)40)
  {
LABEL_11:
    v18 = AUSM::RoomCongruence::Processor::computeAverageRT60(a2, (_QWORD *)(a5 + 24), v8, v9);
    if ((v18 & 0xFF00000000) == 0)
    {
      if (getAUSMV2Log(void)::onceToken != -1)
        dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_5474);
      v31 = getAUSMV2Log(void)::gLog;
      if (!os_log_type_enabled((os_log_t)getAUSMV2Log(void)::gLog, OS_LOG_TYPE_ERROR))
        return;
      if (*((char *)v7 + 23) < 0)
        v7 = (uint64_t *)*v7;
      *(_DWORD *)buf = 136315394;
      *(_QWORD *)&buf[4] = v7;
      *(_WORD *)&buf[12] = 2080;
      *(_QWORD *)&buf[14] = "computeTargetMatchingParams";
      v32 = "[%s|%s] Failed to compute the average RT60 for the preset User Data. Returning empty optional.";
      goto LABEL_51;
    }
    v19 = *(float *)(a3 + 108);
    if (v19 <= 0.0 || (v20 = *(float *)&v18, *(float *)&v18 <= 0.0))
    {
      if (getAUSMV2Log(void)::onceToken != -1)
        dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_5474);
      v33 = getAUSMV2Log(void)::gLog;
      if (os_log_type_enabled((os_log_t)getAUSMV2Log(void)::gLog, OS_LOG_TYPE_ERROR))
      {
        v154 = (uint64_t)v7;
        if (*((char *)v7 + 23) < 0)
          v154 = *v7;
        *(_DWORD *)buf = 136315394;
        *(_QWORD *)&buf[4] = v154;
        *(_WORD *)&buf[12] = 2080;
        *(_QWORD *)&buf[14] = "computeCorrectionEnvelopeExpDecayCoefficient";
        _os_log_error_impl(&dword_1B5ED0000, v33, OS_LOG_TYPE_ERROR, "[%s|%s] One or both of the input RT60 was not greater than zero. Returning empty optional.", buf, 0x16u);
        if (getAUSMV2Log(void)::onceToken != -1)
          dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_5474);
      }
      v31 = getAUSMV2Log(void)::gLog;
      if (!os_log_type_enabled((os_log_t)getAUSMV2Log(void)::gLog, OS_LOG_TYPE_ERROR))
        return;
      if (*((char *)v7 + 23) < 0)
        v7 = (uint64_t *)*v7;
      *(_DWORD *)buf = 136315394;
      *(_QWORD *)&buf[4] = v7;
      *(_WORD *)&buf[12] = 2080;
      *(_QWORD *)&buf[14] = "computeTargetMatchingParams";
      v32 = "[%s|%s] Failed to compute the correction envelope exponential decay coefficient. Returning empty optional.";
      goto LABEL_51;
    }
    IR::getPresetDataAttributes();
    v21 = (float)(-6.9078 / v20) + (float)(6.9078 / v19);
    *(float *)&v174[20] = v21;
    if (getAUSMV2Log(void)::onceToken != -1)
      dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_5474);
    v22 = (char *)&xmmword_1EF135FF8 + 8;
    v23 = getAUSMV2Log(void)::gLog;
    if (os_log_type_enabled((os_log_t)getAUSMV2Log(void)::gLog, OS_LOG_TYPE_DEFAULT))
    {
      v24 = (uint64_t)v7;
      if (*((char *)v7 + 23) < 0)
        v24 = *v7;
      *(_DWORD *)buf = 136315650;
      *(_QWORD *)&buf[4] = v24;
      *(_WORD *)&buf[12] = 2080;
      *(_QWORD *)&buf[14] = "computeTargetMatchingParams";
      *(_WORD *)&buf[22] = 2048;
      *(double *)v187 = *(float *)&v174[20];
      _os_log_impl(&dword_1B5ED0000, v23, OS_LOG_TYPE_DEFAULT, "[%s|%s] Exp Decay Coeff: %f.", buf, 0x20u);
    }
    v163 = 0;
    __dst = 0;
    v165 = 0;
    if (v21 <= 0.0)
    {
LABEL_101:
      if (!*(_BYTE *)(a3 + 124))
      {
        LOBYTE(__p) = 0;
        LOBYTE(v185) = 0;
        v73 = *(float *)(a3 + 116);
        if (*(float *)(a3 + 112) >= v73)
          v73 = *(float *)(a3 + 112);
        v74 = pow((float)(v73 * 2.5) / (*(float *)(a3 + 108) * 314.159265), 0.474999994);
        if (getAUSMV2Log(void)::onceToken != -1)
          dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_5474);
        v75 = v74;
        v76 = getAUSMV2Log(void)::gLog;
        if (os_log_type_enabled((os_log_t)getAUSMV2Log(void)::gLog, OS_LOG_TYPE_DEFAULT))
        {
          v77 = (uint64_t)v7;
          if (*((char *)v7 + 23) < 0)
            v77 = *v7;
          *(_DWORD *)buf = 136315650;
          *(_QWORD *)&buf[4] = v77;
          *(_WORD *)&buf[12] = 2080;
          *(_QWORD *)&buf[14] = "computeCriticalDistanceCorrectionGainStage";
          *(_WORD *)&buf[22] = 2048;
          *(double *)v187 = v75;
          _os_log_impl(&dword_1B5ED0000, v76, OS_LOG_TYPE_DEFAULT, "[%s|%s] Critical Distance [m]: %f", buf, 0x20u);
        }
        if (v75 <= 0.0)
        {
          if (getAUSMV2Log(void)::onceToken != -1)
            dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_5474);
          v78 = getAUSMV2Log(void)::gLog;
          if (os_log_type_enabled((os_log_t)getAUSMV2Log(void)::gLog, OS_LOG_TYPE_ERROR))
          {
            v155 = (uint64_t)v7;
            if (*((char *)v7 + 23) < 0)
              v155 = *v7;
            *(_DWORD *)buf = 136315394;
            *(_QWORD *)&buf[4] = v155;
            *(_WORD *)&buf[12] = 2080;
            *(_QWORD *)&buf[14] = "computeCriticalDistanceCorrectionGainStage";
            _os_log_error_impl(&dword_1B5ED0000, v78, OS_LOG_TYPE_ERROR, "[%s|%s] The computed critical distance must be greater than 0. Returning empty optional.", buf, 0x16u);
          }
          LODWORD(__p) = 0;
          *((_QWORD *)&__p + 1) = 0;
          LOBYTE(v185) = 0;
          if (getAUSMV2Log(void)::onceToken != -1)
            dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_5474);
          v79 = getAUSMV2Log(void)::gLog;
          if (os_log_type_enabled((os_log_t)getAUSMV2Log(void)::gLog, OS_LOG_TYPE_ERROR))
          {
            if (*((char *)v7 + 23) < 0)
              v7 = (uint64_t *)*v7;
            *(_DWORD *)buf = 136315394;
            *(_QWORD *)&buf[4] = v7;
            *(_WORD *)&buf[12] = 2080;
            *(_QWORD *)&buf[14] = "computeTargetMatchingParams";
            _os_log_error_impl(&dword_1B5ED0000, v79, OS_LOG_TYPE_ERROR, "[%s|%s] Failed to compute the critical distance gain biquad. Returning empty optional.", buf, 0x16u);
          }
          if (v163)
            operator delete(v163);
          IR::IRDataAttributes::~IRDataAttributes((IR::IRDataAttributes *)&cf);
          return;
        }
        v112 = log10f(v75 + 2.2204e-16) * -20.0;
        if (*(float *)(a3 + 120) > v112)
          v112 = *(float *)(a3 + 120);
        LODWORD(__p) = 1101004800;
        *((float *)&__p + 1) = v112;
        *((_QWORD *)&__p + 1) = 0;
        LOBYTE(v185) = 1;
        std::vector<AUSM::RoomCongruence::Biquad>::push_back[abi:ne180100](&v163, &__p);
LABEL_241:
        *(_QWORD *)&__p = 0;
        v182 = 0;
        v131 = v163;
        v132 = (_BYTE *)__dst - (_BYTE *)v163;
        if (__dst == v163)
        {
          v133 = 0;
          v134 = 0;
        }
        else
        {
          if (v132 < 0)
            std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
          v133 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float (ASAFeatures::*)(ASAFrontEndInputState const*)>>(v132 >> 4);
          memmove(v133, v131, v132);
          v134 = &v133[16 * (v132 >> 4)];
        }
        v180 = 0;
        if (((unint64_t)(v134 - v133) >> 4))
        {
          Mutable = CFArrayCreateMutable(0, ((unint64_t)(v134 - v133) >> 4), MEMORY[0x1E0C9B378]);
          v136 = CFArrayCreateMutable(0, ((unint64_t)(v134 - v133) >> 4), MEMORY[0x1E0C9B378]);
          v137 = CFArrayCreateMutable(0, ((unint64_t)(v134 - v133) >> 4), MEMORY[0x1E0C9B378]);
          v138 = CFArrayCreateMutable(0, ((unint64_t)(v134 - v133) >> 4), MEMORY[0x1E0C9B378]);
          if (v133 != v134)
          {
            v139 = v133;
            do
            {
              v140 = *((_DWORD *)v139 + 1);
              v141 = *((_DWORD *)v139 + 2);
              v142 = *((_DWORD *)v139 + 3);
              LODWORD(valuePtr) = *(_DWORD *)v139;
              v143 = CFNumberCreate(0, kCFNumberFloatType, &valuePtr);
              *(_QWORD *)buf = v143;
              if (!v143)
              {
                exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                std::runtime_error::runtime_error(exception, "Could not construct");
              }
              CFArrayAppendValue(Mutable, v143);
              CFRelease(v143);
              LODWORD(valuePtr) = v140;
              v144 = CFNumberCreate(0, kCFNumberFloatType, &valuePtr);
              *(_QWORD *)buf = v144;
              if (!v144)
              {
                v157 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                std::runtime_error::runtime_error(v157, "Could not construct");
              }
              CFArrayAppendValue(v136, v144);
              CFRelease(v144);
              LODWORD(valuePtr) = v141;
              v145 = CFNumberCreate(0, kCFNumberFloatType, &valuePtr);
              *(_QWORD *)buf = v145;
              if (!v145)
              {
                v158 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                std::runtime_error::runtime_error(v158, "Could not construct");
              }
              CFArrayAppendValue(v137, v145);
              CFRelease(v145);
              LODWORD(valuePtr) = v142;
              v146 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
              *(_QWORD *)buf = v146;
              if (!v146)
              {
                v159 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                std::runtime_error::runtime_error(v159, "Could not construct");
              }
              CFArrayAppendValue(v138, v146);
              CFRelease(v146);
              v139 += 16;
            }
            while (v139 != v134);
          }
          v147 = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
          CFDictionaryAddValue(v147, CFSTR("Frequency"), Mutable);
          CFDictionaryAddValue(v147, CFSTR("Quality"), v137);
          CFDictionaryAddValue(v147, CFSTR("Gain"), v136);
          CFDictionaryAddValue(v147, CFSTR("Type"), v138);
          applesauce::CF::DictionaryRef::DictionaryRef((applesauce::CF::DictionaryRef *)buf, v147);
          v148 = *(void **)buf;
          v180 = *(void **)buf;
          CFRelease(Mutable);
          CFRelease(v137);
          CFRelease(v136);
          CFRelease(v138);
        }
        else
        {
          v148 = 0;
        }
        *(_QWORD *)&__p = v148;
        if (v133)
          operator delete(v133);
        v182 = v148;
        if (v148)
        {
          CFRetain(v148);
          CFRetain(v148);
          CFRetain(v148);
          v149 = v148;
        }
        else
        {
          v149 = 0;
        }
        v150 = cf;
        if (cf)
          CFRetain(cf);
        *(_QWORD *)buf = v150;
        *(_OWORD *)&buf[8] = v167;
        *(_OWORD *)v187 = v168;
        *(_OWORD *)&v187[16] = v169;
        v187[32] = v170;
        v151 = v171;
        if (v171)
          CFRetain(v171);
        v188 = v151;
        v189 = v172;
        v152 = v173;
        if (v173)
          CFRetain(v173);
        v190 = v152;
        v191[0] = *(_OWORD *)v174;
        *(_OWORD *)((char *)v191 + 9) = *(_OWORD *)&v174[9];
        v153 = v175;
        if (v175)
          CFRetain(v175);
        v192 = v153;
        v193 = v176;
        v194 = v177;
        v195 = 1;
        if (v149)
          CFRetain(v149);
        v196 = v149;
        if (v148)
          CFRetain(v148);
        v197 = v148;
        v198 = 1;
        if (a1[184])
        {
          AUSM::RoomCongruence::ProcessingResult::operator=((uint64_t)a1, (uint64_t)buf);
        }
        else
        {
          std::construct_at[abi:ne180100]<AUSM::RoomCongruence::ProcessingResult,AUSM::RoomCongruence::ProcessingResult,AUSM::RoomCongruence::ProcessingResult*>((uint64_t)a1, (uint64_t)buf);
          a1[184] = 1;
        }
        AUSM::RoomCongruence::ProcessingResult::~ProcessingResult((AUSM::RoomCongruence::ProcessingResult *)buf);
        if (v148)
          CFRelease(v148);
        if (v149)
          CFRelease(v149);
        if (v148)
        {
          CFRelease(v148);
          CFRelease(v148);
        }
        if (v163)
          operator delete(v163);
        if (v175)
          CFRelease(v175);
        if (v173)
          CFRelease(v173);
        if (v171)
          CFRelease(v171);
        if (cf)
          CFRelease(cf);
        return;
      }
      __src = 0;
      v161 = 0;
      v162 = 0;
      std::vector<DataTimeStamp>::reserve(&__src, 3uLL);
      __p = 0uLL;
      v185 = 0;
      std::vector<float>::reserve((void **)&__p, (uint64_t)(*(_QWORD *)(a3 + 8) - *(_QWORD *)a3) >> 2);
      v57 = *(float **)(a3 + 8);
      if (v57 == *(float **)a3)
      {
        v72 = *(float **)(a3 + 8);
      }
      else
      {
        v58 = 0;
        v59 = 0;
        do
        {
          v60 = *(float *)(*(_QWORD *)(a3 + 80) + 4 * v58);
          if (!*(_BYTE *)(a3 + 125))
            v60 = v60 + *(float *)(*(_QWORD *)(a3 + 56) + 4 * v58);
          v61 = log10f((float)(v60 / *(float *)(*(_QWORD *)(a5 + 104) + 4 * v58)) + 2.2204e-16) * 10.0;
          v62 = (char *)*((_QWORD *)&__p + 1);
          if (*((_QWORD *)&__p + 1) >= (unint64_t)v185)
          {
            v64 = (char *)__p;
            v65 = (uint64_t)(*((_QWORD *)&__p + 1) - __p) >> 2;
            v66 = v65 + 1;
            if ((unint64_t)(v65 + 1) >> 62)
              std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
            v67 = (uint64_t)&v185[-__p];
            if ((uint64_t)&v185[-__p] >> 1 > v66)
              v66 = v67 >> 1;
            if ((unint64_t)v67 >= 0x7FFFFFFFFFFFFFFCLL)
              v68 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v68 = v66;
            if (v68)
            {
              v69 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>((uint64_t)&v185, v68);
              v62 = (char *)*((_QWORD *)&__p + 1);
              v64 = (char *)__p;
            }
            else
            {
              v69 = 0;
            }
            v70 = (float *)&v69[4 * v65];
            *v70 = v61;
            v63 = v70 + 1;
            while (v62 != v64)
            {
              v71 = *((_DWORD *)v62 - 1);
              v62 -= 4;
              *((_DWORD *)v70-- - 1) = v71;
            }
            *(_QWORD *)&__p = v70;
            *((_QWORD *)&__p + 1) = v63;
            v185 = &v69[4 * v68];
            if (v64)
              operator delete(v64);
          }
          else
          {
            **((float **)&__p + 1) = v61;
            v63 = (float *)(v62 + 4);
          }
          *((_QWORD *)&__p + 1) = v63;
          v72 = *(float **)a3;
          v57 = *(float **)(a3 + 8);
          v58 = ++v59;
        }
        while (v59 < (unint64_t)(((uint64_t)v57 - *(_QWORD *)a3) >> 2));
        v22 = (_BYTE *)(&xmmword_1EF135FF8 + 8);
      }
      v80 = 0.0;
      AUSM::RoomCongruence::findIndicesOfCenterFreqsWithinRange((uint64_t **)&v182, v72, v57, 0.0, 500.0);
      v81 = v182;
      v82 = v183;
      if (v182 != v183)
      {
        v83 = (char *)v182;
        do
        {
          v84 = *(_QWORD *)v83;
          v83 += 8;
          v80 = v80 + *(float *)(__p + 4 * v84);
        }
        while (v83 != v183);
      }
      AUSM::RoomCongruence::findIndicesOfCenterFreqsWithinRange((uint64_t **)&v180, *(float **)a3, *(float **)(a3 + 8), 500.0, 5000.0);
      v85 = v180;
      v86 = v181;
      v87 = 0.0;
      if (v180 != v181)
      {
        v88 = (char *)v180;
        do
        {
          v89 = *(_QWORD *)v88;
          v88 += 8;
          v87 = v87 + *(float *)(__p + 4 * v89);
        }
        while (v88 != v181);
      }
      AUSM::RoomCongruence::findIndicesOfCenterFreqsWithinRange((uint64_t **)&valuePtr, *(float **)a3, *(float **)(a3 + 8), 5000.0, 21657.0);
      v90 = v80 / (float)(unint64_t)((v82 - v81) >> 3);
      v91 = v87 / (float)(unint64_t)((v86 - v85) >> 3);
      v92 = 0.0;
      if (valuePtr == v179)
      {
        v94 = (char *)&xmmword_1EF135FF8 + 8;
      }
      else
      {
        v93 = (uint64_t *)valuePtr;
        v94 = (_BYTE *)(&xmmword_1EF135FF8 + 8);
        do
        {
          v95 = *v93++;
          v92 = v92 + *(float *)(__p + 4 * v95);
        }
        while (v93 != (uint64_t *)v179);
      }
      v96 = v92 / (float)(unint64_t)((v179 - (_BYTE *)valuePtr) >> 3);
      if (v90 <= 12.0)
        v97 = v80 / (float)(unint64_t)((v82 - v81) >> 3);
      else
        v97 = 12.0;
      if (v90 >= -60.0)
        v98 = v97;
      else
        v98 = -60.0;
      if (v91 <= 12.0)
        v99 = v91;
      else
        v99 = 12.0;
      if (v91 >= -60.0)
        v100 = v99;
      else
        v100 = -60.0;
      if (v96 <= 12.0)
        v101 = v96;
      else
        v101 = 12.0;
      if (v96 >= -60.0)
        v102 = v101;
      else
        v102 = -60.0;
      v103 = v98 - v100;
      v104 = v161;
      v105 = v162;
      if ((unint64_t)v161 >= v162)
      {
        v107 = (char *)__src;
        v108 = (v161 - (_BYTE *)__src) >> 4;
        v109 = v108 + 1;
        if ((unint64_t)(v108 + 1) >> 60)
          std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
        if ((uint64_t)(v162 - (_QWORD)__src) >> 3 > v109)
          v109 = (uint64_t)(v162 - (_QWORD)__src) >> 3;
        if (v162 - (unint64_t)__src >= 0x7FFFFFFFFFFFFFF0)
          v110 = 0xFFFFFFFFFFFFFFFLL;
        else
          v110 = v109;
        if (v110)
          v110 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<float (ASAFeatures::*)(ASAFrontEndInputState const*)>>(v110);
        else
          v111 = 0;
        v113 = (float *)(v110 + 16 * v108);
        v105 = v110 + 16 * v111;
        *v113 = 500.0;
        v113[1] = v103;
        *((_QWORD *)v113 + 1) = 0x73F3504F3;
        v106 = (char *)(v113 + 4);
        if (v104 != v107)
        {
          do
          {
            *((_OWORD *)v113 - 1) = *((_OWORD *)v104 - 1);
            v113 -= 4;
            v104 -= 16;
          }
          while (v104 != v107);
          v104 = v107;
        }
        __src = v113;
        v161 = v106;
        v162 = v110 + 16 * v111;
        if (v104)
          operator delete(v104);
      }
      else
      {
        *(_DWORD *)v161 = 1140457472;
        *((float *)v104 + 1) = v103;
        *((_QWORD *)v104 + 1) = 0x73F3504F3;
        v106 = v104 + 16;
      }
      v114 = v102 - v100;
      if ((unint64_t)v106 < v105)
      {
        *(_DWORD *)v106 = 1167867904;
        *((float *)v106 + 1) = v114;
        *((_QWORD *)v106 + 1) = 0x83F3504F3;
        v115 = v106 + 16;
        goto LABEL_208;
      }
      v116 = (char *)__src;
      v117 = (v106 - (_BYTE *)__src) >> 4;
      v118 = v117 + 1;
      if ((unint64_t)(v117 + 1) >> 60)
        std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
      if ((uint64_t)(v105 - (_QWORD)__src) >> 3 > v118)
        v118 = (uint64_t)(v105 - (_QWORD)__src) >> 3;
      if (v105 - (unint64_t)__src >= 0x7FFFFFFFFFFFFFF0)
        v119 = 0xFFFFFFFFFFFFFFFLL;
      else
        v119 = v118;
      if (v119)
        v119 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<float (ASAFeatures::*)(ASAFrontEndInputState const*)>>(v119);
      else
        v120 = 0;
      v121 = (char *)(v119 + 16 * v117);
      v105 = v119 + 16 * v120;
      *(_DWORD *)v121 = 1167867904;
      *((float *)v121 + 1) = v114;
      *((_QWORD *)v121 + 1) = 0x83F3504F3;
      v115 = v121 + 16;
      if (v106 == v116)
      {
        __src = v121;
        v161 = v121 + 16;
        v116 = v106;
      }
      else
      {
        do
        {
          *((_OWORD *)v121 - 1) = *((_OWORD *)v106 - 1);
          v121 -= 16;
          v106 -= 16;
        }
        while (v106 != v116);
        __src = v121;
        v161 = v115;
        if (!v116)
        {
LABEL_208:
          if ((unint64_t)v115 >= v105)
          {
            v123 = (char *)__src;
            v124 = (v115 - (_BYTE *)__src) >> 4;
            v125 = v124 + 1;
            if ((unint64_t)(v124 + 1) >> 60)
              std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
            if ((uint64_t)(v105 - (_QWORD)__src) >> 3 > v125)
              v125 = (uint64_t)(v105 - (_QWORD)__src) >> 3;
            if (v105 - (unint64_t)__src >= 0x7FFFFFFFFFFFFFF0)
              v126 = 0xFFFFFFFFFFFFFFFLL;
            else
              v126 = v125;
            if (v126)
              v126 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<float (ASAFeatures::*)(ASAFrontEndInputState const*)>>(v126);
            else
              v127 = 0;
            v128 = (char *)(v126 + 16 * v124);
            *(_DWORD *)v128 = 1101004800;
            *((float *)v128 + 1) = v100;
            *((_QWORD *)v128 + 1) = 0;
            v122 = v128 + 16;
            if (v115 == v123)
            {
              __src = v128;
              v162 = v126 + 16 * v127;
              v123 = v115;
            }
            else
            {
              do
              {
                *((_OWORD *)v128 - 1) = *((_OWORD *)v115 - 1);
                v128 -= 16;
                v115 -= 16;
              }
              while (v115 != v123);
              __src = v128;
              v162 = v126 + 16 * v127;
              if (!v123)
                goto LABEL_225;
            }
            operator delete(v123);
          }
          else
          {
            *(_DWORD *)v115 = 1101004800;
            *((float *)v115 + 1) = v100;
            *((_QWORD *)v115 + 1) = 0;
            v122 = v115 + 16;
          }
LABEL_225:
          v161 = v122;
          if (*((_QWORD *)v94 + 229) != -1)
            dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_5474);
          v129 = *((_QWORD *)v22 + 228);
          if (os_log_type_enabled(v129, OS_LOG_TYPE_DEFAULT))
          {
            if (*((char *)v7 + 23) < 0)
              v7 = (uint64_t *)*v7;
            *(_DWORD *)buf = 136316162;
            *(_QWORD *)&buf[4] = v7;
            *(_WORD *)&buf[12] = 2080;
            *(_QWORD *)&buf[14] = "computeSpectralMatchingCorrectionBiquads";
            *(_WORD *)&buf[22] = 2048;
            *(double *)v187 = v98;
            *(_WORD *)&v187[8] = 2048;
            *(double *)&v187[10] = v100;
            *(_WORD *)&v187[18] = 2048;
            *(double *)&v187[20] = v102;
            _os_log_impl(&dword_1B5ED0000, v129, OS_LOG_TYPE_DEFAULT, "[%s|%s] Spectral matching gains [dB]: LG: %f, MG: %f, HG: %f.", buf, 0x34u);
          }
          if (valuePtr)
            operator delete(valuePtr);
          if (v180)
            operator delete(v180);
          if (v182)
            operator delete(v182);
          if ((_QWORD)__p)
          {
            *((_QWORD *)&__p + 1) = __p;
            operator delete((void *)__p);
          }
          v130 = __src;
          std::vector<AUSM::RoomCongruence::Biquad>::__insert_with_size[abi:ne180100]<std::__wrap_iter<AUSM::RoomCongruence::Biquad*>,std::__wrap_iter<AUSM::RoomCongruence::Biquad*>>((uint64_t)&v163, (char *)__dst, (char *)__src, v122, (v122 - (_BYTE *)__src) >> 4);
          if (v130)
            operator delete(v130);
          goto LABEL_241;
        }
      }
      operator delete(v116);
      goto LABEL_208;
    }
    __p = 0uLL;
    v185 = 0;
    std::vector<DataTimeStamp>::reserve((void **)&__p, 2uLL);
    switch(a4)
    {
      case '4':
        v28 = *(float *)(a3 + 108);
        v26 = (float)(expf(v28 * -4.0) * 180.0) + 170.0;
        v27 = (float)(11.5 - v28) * log10f(1.0 / v28);
        v30 = 6000.0;
        v29 = 2.8;
        break;
      case '5':
        v34 = *(float *)(a3 + 108);
        v26 = (float)(expf(v34 * -5.0) * 150.0) + 175.0;
        v27 = (float)((float)(v34 * -5.0) + 12.8) * log10f(1.4 / v34);
        v29 = 3.0;
        v30 = 7000.0;
        v28 = v34 / 1.4;
        break;
      case '6':
        v25 = *(float *)(a3 + 108);
        v26 = (float)(expf(v25 * -4.0) * 140.0) + 195.0;
        v27 = (float)((float)(v25 * -3.8) + 11.2) * log10f(2.0 / v25);
        v28 = v25 * 0.5;
        v29 = 2.5;
        v30 = 7000.0;
        break;
      default:
        if (getAUSMV2Log(void)::onceToken != -1)
          dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_5474);
        v43 = getAUSMV2Log(void)::gLog;
        if (os_log_type_enabled((os_log_t)getAUSMV2Log(void)::gLog, OS_LOG_TYPE_ERROR))
        {
          v44 = (uint64_t)v7;
          if (*((char *)v7 + 23) < 0)
            v44 = *v7;
          *(_DWORD *)buf = 136315394;
          *(_QWORD *)&buf[4] = v44;
          *(_WORD *)&buf[12] = 2080;
          *(_QWORD *)&buf[14] = "computeReflatteningCorrectionBiquads";
          _os_log_error_impl(&dword_1B5ED0000, v43, OS_LOG_TYPE_ERROR, "[%s|%s] The selected closest preset is not supported. Returning empty vector.", buf, 0x16u);
        }
        goto LABEL_99;
    }
    v35 = *((_QWORD *)&__p + 1);
    v36 = (unint64_t)v185;
    if (*((_QWORD *)&__p + 1) >= (unint64_t)v185)
    {
      v38 = __p;
      v39 = (uint64_t)(*((_QWORD *)&__p + 1) - __p) >> 4;
      v40 = v39 + 1;
      if ((unint64_t)(v39 + 1) >> 60)
        std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
      if ((uint64_t)&v185[-__p] >> 3 > v40)
        v40 = (uint64_t)&v185[-__p] >> 3;
      if ((unint64_t)&v185[-__p] >= 0x7FFFFFFFFFFFFFF0)
        v41 = 0xFFFFFFFFFFFFFFFLL;
      else
        v41 = v40;
      if (v41)
        v41 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<float (ASAFeatures::*)(ASAFrontEndInputState const*)>>(v41);
      else
        v42 = 0;
      v45 = v41 + 16 * v39;
      v36 = v41 + 16 * v42;
      *(float *)v45 = v26;
      *(float *)(v45 + 4) = v27;
      *(_QWORD *)(v45 + 8) = 0x83F333333;
      v37 = (float *)(v45 + 16);
      if (v35 != v38)
      {
        do
        {
          *(_OWORD *)(v45 - 16) = *(_OWORD *)(v35 - 16);
          v45 -= 16;
          v35 -= 16;
        }
        while (v35 != v38);
        v35 = v38;
      }
      *(_QWORD *)&__p = v45;
      *((_QWORD *)&__p + 1) = v37;
      if (v35)
        operator delete((void *)v35);
    }
    else
    {
      **((float **)&__p + 1) = v26;
      *(float *)(v35 + 4) = v27;
      *(_QWORD *)(v35 + 8) = 0x83F333333;
      v37 = (float *)(v35 + 16);
    }
    v46 = (float)(v28 + -1.0) * v29;
    if ((unint64_t)v37 >= v36)
    {
      v48 = (float *)__p;
      v49 = (uint64_t)((uint64_t)v37 - __p) >> 4;
      v50 = v49 + 1;
      if ((unint64_t)(v49 + 1) >> 60)
        std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
      if ((uint64_t)(v36 - __p) >> 3 > v50)
        v50 = (uint64_t)(v36 - __p) >> 3;
      if (v36 - (unint64_t)__p >= 0x7FFFFFFFFFFFFFF0)
        v51 = 0xFFFFFFFFFFFFFFFLL;
      else
        v51 = v50;
      if (v51)
        v51 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<float (ASAFeatures::*)(ASAFrontEndInputState const*)>>(v51);
      else
        v52 = 0;
      v53 = v51 + 16 * v49;
      *(float *)v53 = v30;
      *(float *)(v53 + 4) = v46;
      *(_QWORD *)(v53 + 8) = 0x83F19999ALL;
      v47 = (float *)(v53 + 16);
      if (v37 == v48)
      {
        *(_QWORD *)&__p = v53;
        v185 = (char *)(v51 + 16 * v52);
        v48 = v37;
      }
      else
      {
        do
        {
          *(_OWORD *)(v53 - 16) = *((_OWORD *)v37 - 1);
          v53 -= 16;
          v37 -= 4;
        }
        while (v37 != v48);
        *(_QWORD *)&__p = v53;
        v185 = (char *)(v51 + 16 * v52);
        if (!v48)
          goto LABEL_93;
      }
      operator delete(v48);
    }
    else
    {
      *v37 = v30;
      v37[1] = v46;
      *((_QWORD *)v37 + 1) = 0x83F19999ALL;
      v47 = v37 + 4;
    }
LABEL_93:
    *((_QWORD *)&__p + 1) = v47;
    if (getAUSMV2Log(void)::onceToken != -1)
      dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_5474);
    v54 = getAUSMV2Log(void)::gLog;
    if (os_log_type_enabled((os_log_t)getAUSMV2Log(void)::gLog, OS_LOG_TYPE_DEFAULT))
    {
      v55 = (uint64_t)v7;
      if (*((char *)v7 + 23) < 0)
        v55 = *v7;
      *(_DWORD *)buf = 136316418;
      *(_QWORD *)&buf[4] = v55;
      *(_WORD *)&buf[12] = 2080;
      *(_QWORD *)&buf[14] = "computeReflatteningCorrectionBiquads";
      *(_WORD *)&buf[22] = 2048;
      *(double *)v187 = v26;
      *(_WORD *)&v187[8] = 2048;
      *(double *)&v187[10] = v27;
      *(_WORD *)&v187[18] = 2048;
      *(double *)&v187[20] = v30;
      *(_WORD *)&v187[28] = 2048;
      *(double *)&v187[30] = v46;
      _os_log_impl(&dword_1B5ED0000, v54, OS_LOG_TYPE_DEFAULT, "[%s|%s] Reflattening Biquads: Biquad A: freq = %f [Hz], gain = %f [dB], Biquad B: freq = %f, gain = %f.", buf, 0x3Eu);
    }
LABEL_99:
    v56 = (void *)__p;
    std::vector<AUSM::RoomCongruence::Biquad>::__insert_with_size[abi:ne180100]<std::__wrap_iter<AUSM::RoomCongruence::Biquad*>,std::__wrap_iter<AUSM::RoomCongruence::Biquad*>>((uint64_t)&v163, (char *)__dst, (char *)__p, *((char **)&__p + 1), (uint64_t)(*((_QWORD *)&__p + 1) - __p) >> 4);
    if (v56)
      operator delete(v56);
    goto LABEL_101;
  }
  v17 = (float *)&AUSM::RoomCongruence::kOctaveBandFrequencies;
  while (*v12 == *v17)
  {
    ++v12;
    ++v17;
    if (v12 == v11)
      goto LABEL_11;
  }
  if (getAUSMV2Log(void)::onceToken != -1)
    dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_5474);
  v31 = getAUSMV2Log(void)::gLog;
  if (os_log_type_enabled((os_log_t)getAUSMV2Log(void)::gLog, OS_LOG_TYPE_ERROR))
  {
    if (*((char *)v7 + 23) < 0)
      v7 = (uint64_t *)*v7;
    *(_DWORD *)buf = 136315394;
    *(_QWORD *)&buf[4] = v7;
    *(_WORD *)&buf[12] = 2080;
    *(_QWORD *)&buf[14] = "computeTargetMatchingParams";
    v32 = "[%s|%s] only supporting octave band resolution. Returning empty optional.";
    goto LABEL_51;
  }
}

void sub_1B638F950(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,void *a35,uint64_t a36,uint64_t a37,void *a38,uint64_t a39,uint64_t a40,void *a41,uint64_t a42,uint64_t a43,void *a44,uint64_t a45,uint64_t a46,char a47)
{
  AUSM::RoomCongruence::ProcessingResult *v47;

  if (__p)
    operator delete(__p);
  IR::IRDataAttributes::~IRDataAttributes((IR::IRDataAttributes *)&a16);
  if (*((_BYTE *)v47 + 184))
    AUSM::RoomCongruence::ProcessingResult::~ProcessingResult(v47);
  _Unwind_Resume(a1);
}

void std::vector<AUSM::RoomCongruence::Biquad>::__insert_with_size[abi:ne180100]<std::__wrap_iter<AUSM::RoomCongruence::Biquad*>,std::__wrap_iter<AUSM::RoomCongruence::Biquad*>>(uint64_t a1, char *__dst, char *__src, char *a4, uint64_t a5)
{
  char *v6;
  uint64_t v9;
  unint64_t v10;
  char *v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  int64_t v20;
  char *v21;
  char *v22;
  char *v23;
  char *v24;
  __int128 v25;
  _OWORD *v26;
  char *v27;
  uint64_t v28;
  _OWORD *v29;
  __int128 v30;
  char *v31;
  char *v32;
  _OWORD *v33;
  unint64_t v34;
  _BYTE *v35;
  uint64_t v36;
  char *v37;

  if (a5 < 1)
    return;
  v6 = __src;
  v10 = *(_QWORD *)(a1 + 8);
  v9 = *(_QWORD *)(a1 + 16);
  if (a5 > (uint64_t)(v9 - v10) >> 4)
  {
    v11 = *(char **)a1;
    v12 = a5 + ((uint64_t)(v10 - *(_QWORD *)a1) >> 4);
    if (v12 >> 60)
      std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
    v13 = (__dst - v11) >> 4;
    v14 = v9 - (_QWORD)v11;
    if (v14 >> 3 > v12)
      v12 = v14 >> 3;
    if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFF0)
      v15 = 0xFFFFFFFFFFFFFFFLL;
    else
      v15 = v12;
    if (v15)
      v15 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<float (ASAFeatures::*)(ASAFrontEndInputState const*)>>(v15);
    else
      v16 = 0;
    v26 = (_OWORD *)(v15 + 16 * v13);
    v27 = (char *)&v26[a5];
    v28 = 16 * a5;
    v29 = v26;
    do
    {
      v30 = *(_OWORD *)v6;
      v6 += 16;
      *v29++ = v30;
      v28 -= 16;
    }
    while (v28);
    v31 = *(char **)a1;
    if (*(char **)a1 == __dst)
    {
      v33 = v26;
    }
    else
    {
      v32 = __dst;
      do
      {
        v33 = v26 - 1;
        *(v26 - 1) = *((_OWORD *)v32 - 1);
        v32 -= 16;
        --v26;
      }
      while (v32 != v31);
    }
    v34 = v15 + 16 * v16;
    v35 = *(_BYTE **)(a1 + 8);
    v36 = v35 - __dst;
    if (v35 != __dst)
      memmove(v27, __dst, v35 - __dst);
    v37 = *(char **)a1;
    *(_QWORD *)a1 = v33;
    *(_QWORD *)(a1 + 8) = &v27[v36];
    *(_QWORD *)(a1 + 16) = v34;
    if (v37)
      operator delete(v37);
    return;
  }
  v17 = v10 - (_QWORD)__dst;
  v18 = (uint64_t)(v10 - (_QWORD)__dst) >> 4;
  if (v18 >= a5)
  {
    v19 = &__src[16 * a5];
    v21 = *(char **)(a1 + 8);
LABEL_17:
    v22 = &__dst[16 * a5];
    v23 = &v21[-16 * a5];
    v24 = v21;
    if ((unint64_t)v23 < v10)
    {
      v24 = v21;
      do
      {
        v25 = *(_OWORD *)v23;
        v23 += 16;
        *(_OWORD *)v24 = v25;
        v24 += 16;
      }
      while ((unint64_t)v23 < v10);
    }
    *(_QWORD *)(a1 + 8) = v24;
    if (v21 != v22)
      memmove(&v21[-16 * ((v21 - v22) >> 4)], __dst, v21 - v22);
    if (v19 != v6)
      memmove(__dst, v6, v19 - v6);
    return;
  }
  v19 = &__src[16 * v18];
  v20 = a4 - v19;
  if (a4 != v19)
    memmove(*(void **)(a1 + 8), &__src[16 * v18], a4 - v19);
  v21 = (char *)(v10 + v20);
  *(_QWORD *)(a1 + 8) = v10 + v20;
  if (v17 >= 1)
    goto LABEL_17;
}

void std::vector<AUSM::RoomCongruence::Biquad>::push_back[abi:ne180100](void **a1, _OWORD *a2)
{
  unint64_t v4;
  _OWORD *v5;
  _OWORD *v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _OWORD *v12;
  unint64_t v13;
  char *v14;
  char *v15;

  v5 = a1[1];
  v4 = (unint64_t)a1[2];
  if ((unint64_t)v5 >= v4)
  {
    v7 = ((char *)v5 - (_BYTE *)*a1) >> 4;
    v8 = v7 + 1;
    if ((unint64_t)(v7 + 1) >> 60)
      std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
    v9 = v4 - (_QWORD)*a1;
    if (v9 >> 3 > v8)
      v8 = v9 >> 3;
    if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF0)
      v10 = 0xFFFFFFFFFFFFFFFLL;
    else
      v10 = v8;
    if (v10)
      v10 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<float (ASAFeatures::*)(ASAFrontEndInputState const*)>>(v10);
    else
      v11 = 0;
    v12 = (_OWORD *)(v10 + 16 * v7);
    v13 = v10 + 16 * v11;
    *v12 = *a2;
    v6 = v12 + 1;
    v15 = (char *)*a1;
    v14 = (char *)a1[1];
    if (v14 != *a1)
    {
      do
      {
        *--v12 = *((_OWORD *)v14 - 1);
        v14 -= 16;
      }
      while (v14 != v15);
      v14 = (char *)*a1;
    }
    *a1 = v12;
    a1[1] = v6;
    a1[2] = (void *)v13;
    if (v14)
      operator delete(v14);
  }
  else
  {
    *v5 = *a2;
    v6 = v5 + 1;
  }
  a1[1] = v6;
}

uint64_t AUSM::RoomCongruence::ProcessingResult::operator=(uint64_t a1, uint64_t a2)
{
  const void *v4;
  const void *v5;
  const void *v6;
  const void *v7;

  std::__optional_storage_base<IR::IRDataAttributes,false>::__assign_from[abi:ne180100]<std::__optional_copy_assign_base<IR::IRDataAttributes,false> const&>((IR::IRDataAttributes *)a1, a2);
  v4 = *(const void **)(a1 + 160);
  v5 = *(const void **)(a2 + 160);
  *(_QWORD *)(a1 + 160) = v5;
  if (v5)
    CFRetain(v5);
  if (v4)
    CFRelease(v4);
  v6 = *(const void **)(a1 + 168);
  v7 = *(const void **)(a2 + 168);
  *(_QWORD *)(a1 + 168) = v7;
  if (v7)
    CFRetain(v7);
  if (v6)
    CFRelease(v6);
  *(_BYTE *)(a1 + 176) = *(_BYTE *)(a2 + 176);
  return a1;
}

uint64_t std::construct_at[abi:ne180100]<AUSM::RoomCongruence::ProcessingResult,AUSM::RoomCongruence::ProcessingResult,AUSM::RoomCongruence::ProcessingResult*>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  *(_BYTE *)a1 = 0;
  *(_BYTE *)(a1 + 152) = 0;
  if (*(_BYTE *)(a2 + 152))
  {
    IR::IRDataAttributes::IRDataAttributes(a1, a2);
    *(_BYTE *)(a1 + 152) = 1;
  }
  v4 = *(_QWORD *)(a2 + 160);
  if (v4)
    CFRetain(*(CFTypeRef *)(a2 + 160));
  *(_QWORD *)(a1 + 160) = v4;
  v5 = *(_QWORD *)(a2 + 168);
  if (v5)
    CFRetain(*(CFTypeRef *)(a2 + 168));
  *(_QWORD *)(a1 + 168) = v5;
  *(_BYTE *)(a1 + 176) = *(_BYTE *)(a2 + 176);
  return a1;
}

void AUSM::RoomCongruence::Processor::process(uint64_t a1, uint64_t a2, CFTypeRef *a3)
{
  uint64_t v3;
  _BOOL4 v6;
  CFTypeRef v7;
  CFDictionaryRef *v8;
  CFDictionaryRef *v9;
  const __CFArray **v10;
  const __CFArray *size;
  const __CFArray *v12;
  unsigned __int8 v13;
  CFDictionaryRef *v14;
  const __CFArray **v15;
  const __CFArray *v16;
  unsigned __int8 v17;
  const __CFDictionary **v18;
  const __CFDictionary **v19;
  CFDictionaryRef *v20;
  const __CFArray **v21;
  const __CFArray *v22;
  const __CFArray *v23;
  unsigned __int8 v24;
  CFDictionaryRef *v25;
  const __CFArray **v26;
  const __CFArray *v27;
  const __CFArray *v28;
  unsigned __int8 v29;
  char v30;
  NSObject *v31;
  NSObject *v32;
  const char *v33;
  float v34;
  float v35;
  float v36;
  float v37;
  const __CFArray *v38;
  const __CFArray *v39;
  const __CFArray *v40;
  const __CFArray *v41;
  char v42;
  NSObject *v43;
  char *v44;
  CFIndex Count;
  CFIndex v46;
  CFIndex v47;
  CFIndex v48;
  unint64_t i;
  float v50;
  float v51;
  char *v52;
  _DWORD *v53;
  char *v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  unint64_t v58;
  char *v59;
  char *v60;
  int v61;
  float v62;
  float v63;
  char *v64;
  _DWORD *v65;
  char *v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t v69;
  unint64_t v70;
  char *v71;
  char *v72;
  int v73;
  float v74;
  float v75;
  char *v76;
  _DWORD *v77;
  char *v78;
  uint64_t v79;
  unint64_t v80;
  uint64_t v81;
  unint64_t v82;
  char *v83;
  char *v84;
  int v85;
  float v86;
  float v87;
  char *v88;
  _DWORD *v89;
  char *v90;
  uint64_t v91;
  unint64_t v92;
  uint64_t v93;
  unint64_t v94;
  char *v95;
  char *v96;
  int v97;
  unint64_t v98;
  float *v99;
  float *v100;
  float *v101;
  float *v102;
  float v103;
  float *v104;
  float v105;
  float v106;
  NSObject *v107;
  char *v108;
  NSObject *v109;
  const char *v110;
  __int128 v111;
  float *v112;
  float *v113;
  float *v114;
  float *v115;
  float *v116;
  float *v117;
  NSObject *v118;
  const char *v119;
  float *v120;
  float *v121;
  float *v122;
  NSObject *v123;
  const char *v124;
  NSObject *v125;
  const char *v126;
  uint64_t v127;
  uint64_t v128;
  float *v129;
  uint64_t v130;
  float v131;
  float v132;
  float v133;
  BOOL v134;
  BOOL v135;
  uint64_t v136;
  float v137;
  float v138;
  NSObject *v139;
  _BOOL8 v140;
  uint64_t v141;
  char v142;
  int v143;
  float v144;
  float v145;
  float v146;
  int v147;
  float v148;
  int v149;
  float v150;
  float v151;
  unint64_t v152;
  NSObject *v153;
  uint64_t v154;
  const char *v155;
  NSObject *v156;
  uint64_t v157;
  int v158;
  float v159;
  float v160;
  float v161;
  NSObject *v162;
  _BOOL8 v163;
  uint64_t v164;
  float v165;
  uint64_t v166;
  NSObject *v167;
  const char *v168;
  NSObject *v169;
  uint64_t v170;
  int v171;
  NSObject *v172;
  char *v173;
  unint64_t PresetWithClosestRoomVolume;
  uint64_t v175;
  char *v176;
  const char *v177;
  NSObject *v178;
  uint64_t v179;
  unint64_t v180;
  uint8x8_t v181;
  unint64_t v182;
  uint64_t **v183;
  uint64_t *v184;
  unint64_t v185;
  uint64_t v186;
  __int128 v187;
  char *v188;
  NSObject *v189;
  uint32_t v190;
  char *v191;
  uint64_t v192;
  uint64_t v193;
  NSObject *v194;
  const char *v195;
  unint64_t v196;
  NSObject *v197;
  uint64_t v198;
  NSObject *v199;
  uint64_t v200;
  std::runtime_error *v201;
  std::runtime_error *v202;
  std::runtime_error *v203;
  std::runtime_error *v204;
  std::runtime_error *exception;
  std::runtime_error *v206;
  std::runtime_error *v207;
  std::runtime_error *v208;
  std::runtime_error *v209;
  std::runtime_error *v210;
  std::runtime_error *v211;
  std::runtime_error *v212;
  std::runtime_error *v213;
  std::runtime_error *v214;
  const __CFArray *v215;
  int v216;
  AUSM::RoomCongruence::ProcessingResult *v217;
  AUSM::RoomCongruence::ProcessingResult *v218;
  _OWORD *v219;
  uint64_t v220;
  float v221;
  _BYTE v222[184];
  __int128 v223[2];
  int v224;
  _BYTE v225[104];
  _OWORD v226[2];
  int v227;
  _QWORD v228[3];
  float *v229;
  uint64_t v230;
  float v231;
  float v232;
  float *v233;
  uint64_t v234;
  float *v235;
  uint64_t v236;
  CFTypeRef v237;
  CFTypeRef v238;
  CFTypeRef v239;
  CFTypeRef v240;
  CFTypeRef cf;
  const __CFArray *v242;
  const __CFArray *v243;
  const __CFArray *v244;
  const __CFArray *v245;
  _BYTE buf[22];
  __int16 v247;
  void *__src;
  uint64_t v249[3];
  void *v250;
  uint64_t v251;
  void *v252;
  uint64_t v253;
  _BYTE v254[28];
  char v255;
  uint64_t v256;
  uint64_t v257;
  char v258;
  char v259;
  _OWORD v260[6];
  _BYTE v261[28];
  _BYTE v262[24];
  char v263[24];
  uint64_t v264;
  char v265[24];
  char v266[24];
  _OWORD v267[2];
  char v268;
  _BYTE v269[12];
  __int128 __p;
  __int128 v271;
  __int128 v272;
  __int128 v273;
  __int128 v274;
  __int128 v275;
  _QWORD v276[4];

  v3 = a2;
  v276[1] = *MEMORY[0x1E0C80C00];
  if (!*(_BYTE *)(a2 + 158))
  {
    if (getAUSMV2Log(void)::onceToken != -1)
      dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_5474);
    v31 = getAUSMV2Log(void)::gLog;
    if (os_log_type_enabled((os_log_t)getAUSMV2Log(void)::gLog, OS_LOG_TYPE_DEFAULT))
    {
      if (*(char *)(v3 + 23) < 0)
        v3 = *(_QWORD *)v3;
      *(_DWORD *)buf = 136315394;
      *(_QWORD *)&buf[4] = v3;
      *(_WORD *)&buf[12] = 2080;
      *(_QWORD *)&buf[14] = "process";
      _os_log_impl(&dword_1B5ED0000, v31, OS_LOG_TYPE_DEFAULT, "[%s|%s] Room Congruence is turned off. Returning a valid result with an indicator of the feature being turned off.", buf, 0x16u);
    }
    buf[0] = 0;
    v255 = 0;
    v257 = 0;
    v256 = 0;
    v258 = 0;
    *(_BYTE *)a1 = 0;
    *(_BYTE *)(a1 + 152) = 0;
    *(_QWORD *)(a1 + 160) = 0;
    *(_QWORD *)(a1 + 168) = 0;
    *(_BYTE *)(a1 + 176) = 0;
    *(_BYTE *)(a1 + 184) = 1;
    AUSM::RoomCongruence::ProcessingResult::~ProcessingResult((AUSM::RoomCongruence::ProcessingResult *)buf);
    return;
  }
  v220 = a2 + 272;
  v6 = AUSM::RoomCongruence::TuningParameters::operator==(a2 + 272, a2 + 128);
  *(_BYTE *)a1 = 0;
  *(_BYTE *)(a1 + 184) = 0;
  if (v6 && *(_BYTE *)(v3 + 496))
  {
    std::construct_at[abi:ne180100]<AUSM::RoomCongruence::ProcessingResult,AUSM::RoomCongruence::ProcessingResult const&,AUSM::RoomCongruence::ProcessingResult*>(a1, v3 + 312);
    *(_BYTE *)(a1 + 184) = 1;
  }
  v7 = *a3;
  if (!*a3)
  {
    cf = 0;
    if (getAUSMV2Log(void)::onceToken != -1)
      dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_5474);
    v32 = getAUSMV2Log(void)::gLog;
    if (!os_log_type_enabled((os_log_t)getAUSMV2Log(void)::gLog, OS_LOG_TYPE_ERROR))
      goto LABEL_66;
    *(_DWORD *)buf = 136315138;
    *(_QWORD *)&buf[4] = "isRoomConfigurationDictionaryStructurallyValid";
    v33 = "[Room Congruence] %s: Room configuration invalid - underlying CF object is nil.";
    goto LABEL_65;
  }
  CFRetain(*a3);
  cf = v7;
  if (!applesauce::CF::details::has_key<__CFString const* const&>((CFDictionaryRef)v7, CFSTR("CenterFreqs")))
  {
    if (getAUSMV2Log(void)::onceToken != -1)
      dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_5474);
    v32 = getAUSMV2Log(void)::gLog;
    if (!os_log_type_enabled((os_log_t)getAUSMV2Log(void)::gLog, OS_LOG_TYPE_ERROR))
      goto LABEL_66;
    *(_DWORD *)buf = 136315138;
    *(_QWORD *)&buf[4] = "isRoomConfigurationDictionaryStructurallyValid";
    v33 = "[Room Congruence] %s: Room configuration invalid - missing center frequencies.";
    goto LABEL_65;
  }
  if (!applesauce::CF::details::has_key<__CFString const* const&>((CFDictionaryRef)v7, CFSTR("RT60")))
  {
    if (getAUSMV2Log(void)::onceToken != -1)
      dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_5474);
    v32 = getAUSMV2Log(void)::gLog;
    if (!os_log_type_enabled((os_log_t)getAUSMV2Log(void)::gLog, OS_LOG_TYPE_ERROR))
      goto LABEL_66;
    *(_DWORD *)buf = 136315138;
    *(_QWORD *)&buf[4] = "isRoomConfigurationDictionaryStructurallyValid";
    v33 = "[Room Congruence] %s: Room configuration invalid - missing RT60 targets.";
    goto LABEL_65;
  }
  if (!applesauce::CF::details::has_key<__CFString const* const&>((CFDictionaryRef)v7, CFSTR("RoomSurface")))
  {
    if (getAUSMV2Log(void)::onceToken != -1)
      dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_5474);
    v32 = getAUSMV2Log(void)::gLog;
    if (!os_log_type_enabled((os_log_t)getAUSMV2Log(void)::gLog, OS_LOG_TYPE_ERROR))
      goto LABEL_66;
    *(_DWORD *)buf = 136315138;
    *(_QWORD *)&buf[4] = "isRoomConfigurationDictionaryStructurallyValid";
    v33 = "[Room Congruence] %s: Room configuration invalid - missing room surface area.";
    goto LABEL_65;
  }
  if (!applesauce::CF::details::has_key<__CFString const* const&>((CFDictionaryRef)v7, CFSTR("RoomVolume")))
  {
    if (getAUSMV2Log(void)::onceToken != -1)
      dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_5474);
    v32 = getAUSMV2Log(void)::gLog;
    if (!os_log_type_enabled((os_log_t)getAUSMV2Log(void)::gLog, OS_LOG_TYPE_ERROR))
      goto LABEL_66;
    *(_DWORD *)buf = 136315138;
    *(_QWORD *)&buf[4] = "isRoomConfigurationDictionaryStructurallyValid";
    v33 = "[Room Congruence] %s: Room configuration invalid - missing room volume.";
    goto LABEL_65;
  }
  if (!applesauce::CF::details::has_key<__CFString const* const&>((CFDictionaryRef)v7, CFSTR("EarlyRoomEnergy")))
  {
    if (getAUSMV2Log(void)::onceToken != -1)
      dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_5474);
    v32 = getAUSMV2Log(void)::gLog;
    if (!os_log_type_enabled((os_log_t)getAUSMV2Log(void)::gLog, OS_LOG_TYPE_ERROR))
      goto LABEL_66;
    *(_DWORD *)buf = 136315138;
    *(_QWORD *)&buf[4] = "isRoomConfigurationDictionaryStructurallyValid";
    v33 = "[Room Congruence] %s: Room configuration invalid - missing early reflections energy.";
    goto LABEL_65;
  }
  v8 = (CFDictionaryRef *)applesauce::CF::DictionaryRef::operator->(&cf);
  if (!applesauce::CF::details::has_key<__CFString const* const&>(*v8, CFSTR("LateRoomEnergy")))
  {
    if (getAUSMV2Log(void)::onceToken != -1)
      dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_5474);
    v32 = getAUSMV2Log(void)::gLog;
    if (!os_log_type_enabled((os_log_t)getAUSMV2Log(void)::gLog, OS_LOG_TYPE_ERROR))
      goto LABEL_66;
    *(_DWORD *)buf = 136315138;
    *(_QWORD *)&buf[4] = "isRoomConfigurationDictionaryStructurallyValid";
    v33 = "[Room Congruence] %s: Room configuration invalid - missing late reverb energy.";
LABEL_65:
    _os_log_error_impl(&dword_1B5ED0000, v32, OS_LOG_TYPE_ERROR, v33, buf, 0xCu);
LABEL_66:
    v30 = 0;
    goto LABEL_67;
  }
  v9 = (CFDictionaryRef *)applesauce::CF::DictionaryRef::operator->(&cf);
  applesauce::CF::details::find_at_key_or_optional<applesauce::CF::ArrayRef,__CFString const* const&>(buf, *v9, CFSTR("CenterFreqs"));
  if (!buf[8])
  {
    if (getAUSMV2Log(void)::onceToken != -1)
      dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_5474);
    v109 = getAUSMV2Log(void)::gLog;
    if (!os_log_type_enabled((os_log_t)getAUSMV2Log(void)::gLog, OS_LOG_TYPE_ERROR))
      goto LABEL_243;
    *(_DWORD *)v262 = 136315138;
    *(_QWORD *)&v262[4] = "isRoomConfigurationDictionaryStructurallyValid";
    v110 = "[Room Congruence] %s: Room configuration invalid - mismatch between queried and actual type of the center fre"
           "quencies value in the dictionary.";
    goto LABEL_242;
  }
  v10 = (const __CFArray **)applesauce::CF::ArrayRef::operator->(buf);
  size = applesauce::CF::ArrayRef_proxy::get_size(*v10);
  if (!size)
  {
    if (getAUSMV2Log(void)::onceToken != -1)
      dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_5474);
    v109 = getAUSMV2Log(void)::gLog;
    if (!os_log_type_enabled((os_log_t)getAUSMV2Log(void)::gLog, OS_LOG_TYPE_ERROR))
      goto LABEL_243;
    *(_DWORD *)v262 = 136315138;
    *(_QWORD *)&v262[4] = "isRoomConfigurationDictionaryStructurallyValid";
    v110 = "[Room Congruence] %s: Room configuration invalid - the center frequency array is empty.";
    goto LABEL_242;
  }
  v12 = size;
  applesauce::CF::ArrayRef::ArrayRef((applesauce::CF::ArrayRef *)&v245, *(CFTypeRef *)buf);
  v13 = AUSM::RoomCongruence::isArrayOf<float>(v245);
  applesauce::CF::ArrayRef::~ArrayRef((const void **)&v245);
  if ((v13 & 1) != 0)
  {
    v14 = (CFDictionaryRef *)applesauce::CF::DictionaryRef::operator->(&cf);
    applesauce::CF::details::find_at_key_or_optional<applesauce::CF::ArrayRef,__CFString const* const&>(v262, *v14, CFSTR("RT60"));
    if (v262[8])
    {
      v15 = (const __CFArray **)applesauce::CF::ArrayRef::operator->(v262);
      v16 = applesauce::CF::ArrayRef_proxy::get_size(*v15);
      if (v16)
      {
        v215 = v16;
        applesauce::CF::ArrayRef::ArrayRef((applesauce::CF::ArrayRef *)&v244, *(CFTypeRef *)v262);
        v17 = AUSM::RoomCongruence::isArrayOf<float>(v244);
        applesauce::CF::ArrayRef::~ArrayRef((const void **)&v244);
        if ((v17 & 1) != 0)
        {
          v18 = (const __CFDictionary **)applesauce::CF::DictionaryRef::operator->(&cf);
          if (((unint64_t)applesauce::CF::DictionaryRef_proxy::at_as<float,__CFString const* const&>(*v18, CFSTR("RoomVolume")) & 0xFF00000000) != 0)
          {
            v19 = (const __CFDictionary **)applesauce::CF::DictionaryRef::operator->(&cf);
            if (((unint64_t)applesauce::CF::DictionaryRef_proxy::at_as<float,__CFString const* const&>(*v19, CFSTR("RoomSurface")) & 0xFF00000000) != 0)
            {
              v217 = (AUSM::RoomCongruence::ProcessingResult *)a1;
              v20 = (CFDictionaryRef *)applesauce::CF::DictionaryRef::operator->(&cf);
              applesauce::CF::details::find_at_key_or_optional<applesauce::CF::ArrayRef,__CFString const* const&>(v260, *v20, CFSTR("EarlyRoomEnergy"));
              if (BYTE8(v260[0]))
              {
                v21 = (const __CFArray **)applesauce::CF::ArrayRef::operator->(v260);
                v22 = applesauce::CF::ArrayRef_proxy::get_size(*v21);
                if (v22)
                {
                  v23 = v22;
                  applesauce::CF::ArrayRef::ArrayRef((applesauce::CF::ArrayRef *)&v243, *(CFTypeRef *)&v260[0]);
                  v24 = AUSM::RoomCongruence::isArrayOf<float>(v243);
                  applesauce::CF::ArrayRef::~ArrayRef((const void **)&v243);
                  if ((v24 & 1) != 0)
                  {
                    v25 = (CFDictionaryRef *)applesauce::CF::DictionaryRef::operator->(&cf);
                    applesauce::CF::details::find_at_key_or_optional<applesauce::CF::ArrayRef,__CFString const* const&>(&__p, *v25, CFSTR("LateRoomEnergy"));
                    if (BYTE8(__p))
                    {
                      v26 = (const __CFArray **)applesauce::CF::ArrayRef::operator->(&__p);
                      v27 = applesauce::CF::ArrayRef_proxy::get_size(*v26);
                      if (v27)
                      {
                        v28 = v27;
                        applesauce::CF::ArrayRef::ArrayRef((applesauce::CF::ArrayRef *)&v242, (CFTypeRef)__p);
                        v29 = AUSM::RoomCongruence::isArrayOf<float>(v242);
                        applesauce::CF::ArrayRef::~ArrayRef((const void **)&v242);
                        if ((v29 & 1) != 0)
                        {
                          if (v12 == v215 && v215 == v23 && v23 == v28)
                          {
                            v30 = 1;
LABEL_495:
                            std::__optional_destruct_base<applesauce::CF::ArrayRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&__p);
                            goto LABEL_451;
                          }
                          if (getAUSMV2Log(void)::onceToken != -1)
                            dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_5474);
                          v194 = getAUSMV2Log(void)::gLog;
                          if (!os_log_type_enabled((os_log_t)getAUSMV2Log(void)::gLog, OS_LOG_TYPE_ERROR))
                          {
LABEL_494:
                            v30 = 0;
                            goto LABEL_495;
                          }
                          *(_DWORD *)v269 = 136315138;
                          *(_QWORD *)&v269[4] = "isRoomConfigurationDictionaryStructurallyValid";
                          v195 = "[Room Congruence] %s: Room configuration invalid - center frequencies, rt60, early refl"
                                 "ections energy and late reverb energy arrays should have the same number of elements.";
                        }
                        else
                        {
                          if (getAUSMV2Log(void)::onceToken != -1)
                            dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_5474);
                          v194 = getAUSMV2Log(void)::gLog;
                          if (!os_log_type_enabled((os_log_t)getAUSMV2Log(void)::gLog, OS_LOG_TYPE_ERROR))
                            goto LABEL_494;
                          *(_DWORD *)v269 = 136315138;
                          *(_QWORD *)&v269[4] = "isRoomConfigurationDictionaryStructurallyValid";
                          v195 = "[Room Congruence] %s: Room configuration invalid - mismatch between queried and actual "
                                 "type of the late reverb energy values in the array - must be float.";
                        }
                      }
                      else
                      {
                        if (getAUSMV2Log(void)::onceToken != -1)
                          dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_5474);
                        v194 = getAUSMV2Log(void)::gLog;
                        if (!os_log_type_enabled((os_log_t)getAUSMV2Log(void)::gLog, OS_LOG_TYPE_ERROR))
                          goto LABEL_494;
                        *(_DWORD *)v269 = 136315138;
                        *(_QWORD *)&v269[4] = "isRoomConfigurationDictionaryStructurallyValid";
                        v195 = "[Room Congruence] %s: Room configuration invalid - the late reverb energy array is empty.";
                      }
                    }
                    else
                    {
                      if (getAUSMV2Log(void)::onceToken != -1)
                        dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_5474);
                      v194 = getAUSMV2Log(void)::gLog;
                      if (!os_log_type_enabled((os_log_t)getAUSMV2Log(void)::gLog, OS_LOG_TYPE_ERROR))
                        goto LABEL_494;
                      *(_DWORD *)v269 = 136315138;
                      *(_QWORD *)&v269[4] = "isRoomConfigurationDictionaryStructurallyValid";
                      v195 = "[Room Congruence] %s: Room configuration invalid - mismatch between queried and actual type"
                             " of the late reverb energy value in the dictionary.";
                    }
                    _os_log_error_impl(&dword_1B5ED0000, v194, OS_LOG_TYPE_ERROR, v195, v269, 0xCu);
                    goto LABEL_494;
                  }
                  if (getAUSMV2Log(void)::onceToken != -1)
                    dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_5474);
                  v125 = getAUSMV2Log(void)::gLog;
                  if (!os_log_type_enabled((os_log_t)getAUSMV2Log(void)::gLog, OS_LOG_TYPE_ERROR))
                  {
LABEL_450:
                    v30 = 0;
LABEL_451:
                    std::__optional_destruct_base<applesauce::CF::ArrayRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)v260);
                    a1 = (uint64_t)v217;
                    goto LABEL_263;
                  }
                  LODWORD(__p) = 136315138;
                  *(_QWORD *)((char *)&__p + 4) = "isRoomConfigurationDictionaryStructurallyValid";
                  v126 = "[Room Congruence] %s: Room configuration invalid - mismatch between queried and actual type of "
                         "the early reflections energy values in the array - must be float.";
                }
                else
                {
                  if (getAUSMV2Log(void)::onceToken != -1)
                    dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_5474);
                  v125 = getAUSMV2Log(void)::gLog;
                  if (!os_log_type_enabled((os_log_t)getAUSMV2Log(void)::gLog, OS_LOG_TYPE_ERROR))
                    goto LABEL_450;
                  LODWORD(__p) = 136315138;
                  *(_QWORD *)((char *)&__p + 4) = "isRoomConfigurationDictionaryStructurallyValid";
                  v126 = "[Room Congruence] %s: Room configuration invalid - the early reflection energy array is empty.";
                }
              }
              else
              {
                if (getAUSMV2Log(void)::onceToken != -1)
                  dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_5474);
                v125 = getAUSMV2Log(void)::gLog;
                if (!os_log_type_enabled((os_log_t)getAUSMV2Log(void)::gLog, OS_LOG_TYPE_ERROR))
                  goto LABEL_450;
                LODWORD(__p) = 136315138;
                *(_QWORD *)((char *)&__p + 4) = "isRoomConfigurationDictionaryStructurallyValid";
                v126 = "[Room Congruence] %s: Room configuration invalid - mismatch between queried and actual type of th"
                       "e early reflections energy value in the dictionary.";
              }
              _os_log_error_impl(&dword_1B5ED0000, v125, OS_LOG_TYPE_ERROR, v126, (uint8_t *)&__p, 0xCu);
              goto LABEL_450;
            }
            if (getAUSMV2Log(void)::onceToken != -1)
              dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_5474);
            v123 = getAUSMV2Log(void)::gLog;
            if (!os_log_type_enabled((os_log_t)getAUSMV2Log(void)::gLog, OS_LOG_TYPE_ERROR))
              goto LABEL_277;
            LODWORD(v260[0]) = 136315138;
            *(_QWORD *)((char *)v260 + 4) = "isRoomConfigurationDictionaryStructurallyValid";
            v124 = "[Room Congruence] %s: Room configuration invalid - mismatch between queried and actual type of the ro"
                   "om surface area value in the dictionary.";
          }
          else
          {
            if (getAUSMV2Log(void)::onceToken != -1)
              dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_5474);
            v123 = getAUSMV2Log(void)::gLog;
            if (!os_log_type_enabled((os_log_t)getAUSMV2Log(void)::gLog, OS_LOG_TYPE_ERROR))
              goto LABEL_277;
            LODWORD(v260[0]) = 136315138;
            *(_QWORD *)((char *)v260 + 4) = "isRoomConfigurationDictionaryStructurallyValid";
            v124 = "[Room Congruence] %s: Room configuration invalid - mismatch between queried and actual type of the ro"
                   "om volume value in the dictionary.";
          }
          _os_log_error_impl(&dword_1B5ED0000, v123, OS_LOG_TYPE_ERROR, v124, (uint8_t *)v260, 0xCu);
LABEL_277:
          v30 = 0;
          goto LABEL_263;
        }
        if (getAUSMV2Log(void)::onceToken != -1)
          dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_5474);
        v118 = getAUSMV2Log(void)::gLog;
        if (!os_log_type_enabled((os_log_t)getAUSMV2Log(void)::gLog, OS_LOG_TYPE_ERROR))
        {
LABEL_262:
          v30 = 0;
LABEL_263:
          std::__optional_destruct_base<applesauce::CF::ArrayRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)v262);
          goto LABEL_244;
        }
        LODWORD(v260[0]) = 136315138;
        *(_QWORD *)((char *)v260 + 4) = "isRoomConfigurationDictionaryStructurallyValid";
        v119 = "[Room Congruence] %s: Room configuration invalid - mismatch between queried and actual type of the RT60 v"
               "alues in the array - must be float.";
      }
      else
      {
        if (getAUSMV2Log(void)::onceToken != -1)
          dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_5474);
        v118 = getAUSMV2Log(void)::gLog;
        if (!os_log_type_enabled((os_log_t)getAUSMV2Log(void)::gLog, OS_LOG_TYPE_ERROR))
          goto LABEL_262;
        LODWORD(v260[0]) = 136315138;
        *(_QWORD *)((char *)v260 + 4) = "isRoomConfigurationDictionaryStructurallyValid";
        v119 = "[Room Congruence] %s: Room configuration invalid - the RT60 array is empty.";
      }
    }
    else
    {
      if (getAUSMV2Log(void)::onceToken != -1)
        dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_5474);
      v118 = getAUSMV2Log(void)::gLog;
      if (!os_log_type_enabled((os_log_t)getAUSMV2Log(void)::gLog, OS_LOG_TYPE_ERROR))
        goto LABEL_262;
      LODWORD(v260[0]) = 136315138;
      *(_QWORD *)((char *)v260 + 4) = "isRoomConfigurationDictionaryStructurallyValid";
      v119 = "[Room Congruence] %s: Room configuration invalid - mismatch between queried and actual type of the RT60 val"
             "ue in the dictionary.";
    }
    _os_log_error_impl(&dword_1B5ED0000, v118, OS_LOG_TYPE_ERROR, v119, (uint8_t *)v260, 0xCu);
    goto LABEL_262;
  }
  if (getAUSMV2Log(void)::onceToken != -1)
    dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_5474);
  v109 = getAUSMV2Log(void)::gLog;
  if (os_log_type_enabled((os_log_t)getAUSMV2Log(void)::gLog, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)v262 = 136315138;
    *(_QWORD *)&v262[4] = "isRoomConfigurationDictionaryStructurallyValid";
    v110 = "[Room Congruence] %s: Room configuration invalid - mismatch between queried and actual type of the center fre"
           "quency values in the array - must be float.";
LABEL_242:
    _os_log_error_impl(&dword_1B5ED0000, v109, OS_LOG_TYPE_ERROR, v110, v262, 0xCu);
  }
LABEL_243:
  v30 = 0;
LABEL_244:
  std::__optional_destruct_base<applesauce::CF::ArrayRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)buf);
LABEL_67:
  if (cf)
    CFRelease(cf);
  if ((v30 & 1) == 0)
  {
    if (getAUSMV2Log(void)::onceToken != -1)
      dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_5474);
    v43 = getAUSMV2Log(void)::gLog;
    if (os_log_type_enabled((os_log_t)getAUSMV2Log(void)::gLog, OS_LOG_TYPE_ERROR))
    {
      if (*(char *)(v3 + 23) < 0)
        v3 = *(_QWORD *)v3;
      *(double *)&v44 = COERCE_DOUBLE("empty optional");
      *(_DWORD *)buf = 136315650;
      *(_QWORD *)&buf[4] = v3;
      *(_WORD *)&buf[12] = 2080;
      *(_QWORD *)&buf[14] = "process";
      if (v6)
        *(double *)&v44 = COERCE_DOUBLE("cached data from last valid room");
      v247 = 2080;
      __src = v44;
      _os_log_error_impl(&dword_1B5ED0000, v43, OS_LOG_TYPE_ERROR, "[%s|%s] Room configuration dictionary structurally invalid. Returning %s.", buf, 0x20u);
    }
    return;
  }
  if (!*a3)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
  }
  applesauce::CF::details::find_at_key<applesauce::CF::ArrayRef,__CFString const* const&>((applesauce::CF::ArrayRef *)&v240, (CFDictionaryRef)*a3, CFSTR("CenterFreqs"));
  if (!*a3)
  {
    v206 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v206, "Could not construct");
  }
  applesauce::CF::details::find_at_key<applesauce::CF::ArrayRef,__CFString const* const&>((applesauce::CF::ArrayRef *)&v239, (CFDictionaryRef)*a3, CFSTR("RT60"));
  if (!*a3)
  {
    v207 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v207, "Could not construct");
  }
  v34 = applesauce::CF::details::find_at_key<float,__CFString const* const&>((const __CFDictionary *)*a3, CFSTR("RoomVolume"));
  if (!*a3)
  {
    v208 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v208, "Could not construct");
  }
  v35 = v34;
  v36 = applesauce::CF::details::find_at_key<float,__CFString const* const&>((const __CFDictionary *)*a3, CFSTR("RoomSurface"));
  if (!*a3)
  {
    v209 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v209, "Could not construct");
  }
  v37 = v36;
  applesauce::CF::details::find_at_key<applesauce::CF::ArrayRef,__CFString const* const&>((applesauce::CF::ArrayRef *)&v238, (CFDictionaryRef)*a3, CFSTR("EarlyRoomEnergy"));
  if (!*a3)
  {
    v210 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v210, "Could not construct");
  }
  applesauce::CF::details::find_at_key<applesauce::CF::ArrayRef,__CFString const* const&>((applesauce::CF::ArrayRef *)&v237, (CFDictionaryRef)*a3, CFSTR("LateRoomEnergy"));
  v276[0] = 0;
  v274 = 0u;
  v275 = 0u;
  v272 = 0u;
  v273 = 0u;
  __p = 0u;
  v271 = 0u;
  v38 = (const __CFArray *)v240;
  if (v240)
    CFRetain(v240);
  v219 = (_OWORD *)(v3 + 128);
  if (AUSM::RoomCongruence::isArrayOf<float>(v38))
  {
    v39 = (const __CFArray *)v239;
    if (v239)
      CFRetain(v239);
    if (AUSM::RoomCongruence::isArrayOf<float>(v39))
    {
      v40 = (const __CFArray *)v238;
      if (v238)
        CFRetain(v238);
      if (AUSM::RoomCongruence::isArrayOf<float>(v40))
      {
        v41 = (const __CFArray *)v237;
        if (v237)
          CFRetain(v237);
        v42 = AUSM::RoomCongruence::isArrayOf<float>(v41) ^ 1;
        if (v41)
          CFRelease(v41);
      }
      else
      {
        v42 = 1;
      }
      if (v40)
        CFRelease(v40);
    }
    else
    {
      v42 = 1;
    }
    if (v39)
      CFRelease(v39);
  }
  else
  {
    v42 = 1;
  }
  if (v38)
    CFRelease(v38);
  if ((v42 & 1) == 0)
  {
    if (!v240)
    {
      v211 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v211, "Could not construct");
    }
    Count = CFArrayGetCount((CFArrayRef)v240);
    if (!v239)
    {
      v212 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v212, "Could not construct");
    }
    v46 = CFArrayGetCount((CFArrayRef)v239);
    if (!v238)
    {
      v213 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v213, "Could not construct");
    }
    v47 = CFArrayGetCount((CFArrayRef)v238);
    if (!v237)
    {
      v214 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v214, "Could not construct");
    }
    v48 = CFArrayGetCount((CFArrayRef)v237);
    if (Count == v46 && v46 == v47 && v47 == v48)
    {
      v218 = (AUSM::RoomCongruence::ProcessingResult *)a1;
      std::vector<float>::reserve((void **)&__p, Count);
      std::vector<float>::reserve((void **)&v271 + 1, Count);
      std::vector<float>::reserve((void **)&v273 + 1, Count);
      std::vector<float>::reserve((void **)&v275, Count);
      if (Count)
      {
        for (i = 0; i != Count; ++i)
        {
          if (!v240)
          {
            v201 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
            std::runtime_error::runtime_error(v201, "Could not construct");
          }
          v50 = applesauce::CF::details::at_to<float>((const __CFArray *)v240, i);
          v51 = v50;
          v52 = (char *)*((_QWORD *)&__p + 1);
          if (*((_QWORD *)&__p + 1) >= (unint64_t)v271)
          {
            v54 = (char *)__p;
            v55 = (uint64_t)(*((_QWORD *)&__p + 1) - __p) >> 2;
            v56 = v55 + 1;
            if ((unint64_t)(v55 + 1) >> 62)
              std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
            v57 = v271 - __p;
            if ((uint64_t)(v271 - __p) >> 1 > v56)
              v56 = v57 >> 1;
            if ((unint64_t)v57 >= 0x7FFFFFFFFFFFFFFCLL)
              v58 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v58 = v56;
            if (v58)
            {
              v59 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>((uint64_t)&v271, v58);
              v52 = (char *)*((_QWORD *)&__p + 1);
              v54 = (char *)__p;
            }
            else
            {
              v59 = 0;
            }
            v60 = &v59[4 * v55];
            *(float *)v60 = v51;
            v53 = v60 + 4;
            while (v52 != v54)
            {
              v61 = *((_DWORD *)v52 - 1);
              v52 -= 4;
              *((_DWORD *)v60 - 1) = v61;
              v60 -= 4;
            }
            *(_QWORD *)&__p = v60;
            *((_QWORD *)&__p + 1) = v53;
            *(_QWORD *)&v271 = &v59[4 * v58];
            if (v54)
              operator delete(v54);
          }
          else
          {
            **((float **)&__p + 1) = v50;
            v53 = v52 + 4;
          }
          *((_QWORD *)&__p + 1) = v53;
          if (!v239)
          {
            v202 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
            std::runtime_error::runtime_error(v202, "Could not construct");
          }
          v62 = applesauce::CF::details::at_to<float>((const __CFArray *)v239, i);
          v63 = v62;
          v64 = (char *)v272;
          if ((unint64_t)v272 >= *((_QWORD *)&v272 + 1))
          {
            v66 = (char *)*((_QWORD *)&v271 + 1);
            v67 = (uint64_t)(v272 - *((_QWORD *)&v271 + 1)) >> 2;
            v68 = v67 + 1;
            if ((unint64_t)(v67 + 1) >> 62)
              std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
            v69 = *((_QWORD *)&v272 + 1) - *((_QWORD *)&v271 + 1);
            if ((uint64_t)(*((_QWORD *)&v272 + 1) - *((_QWORD *)&v271 + 1)) >> 1 > v68)
              v68 = v69 >> 1;
            if ((unint64_t)v69 >= 0x7FFFFFFFFFFFFFFCLL)
              v70 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v70 = v68;
            if (v70)
            {
              v71 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>((uint64_t)&v272 + 8, v70);
              v64 = (char *)v272;
              v66 = (char *)*((_QWORD *)&v271 + 1);
            }
            else
            {
              v71 = 0;
            }
            v72 = &v71[4 * v67];
            *(float *)v72 = v63;
            v65 = v72 + 4;
            while (v64 != v66)
            {
              v73 = *((_DWORD *)v64 - 1);
              v64 -= 4;
              *((_DWORD *)v72 - 1) = v73;
              v72 -= 4;
            }
            *((_QWORD *)&v271 + 1) = v72;
            *(_QWORD *)&v272 = v65;
            *((_QWORD *)&v272 + 1) = &v71[4 * v70];
            if (v66)
              operator delete(v66);
          }
          else
          {
            *(float *)v272 = v62;
            v65 = v64 + 4;
          }
          *(_QWORD *)&v272 = v65;
          if (!v238)
          {
            v203 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
            std::runtime_error::runtime_error(v203, "Could not construct");
          }
          v74 = applesauce::CF::details::at_to<float>((const __CFArray *)v238, i);
          v75 = v74;
          v76 = (char *)v274;
          if ((unint64_t)v274 >= *((_QWORD *)&v274 + 1))
          {
            v78 = (char *)*((_QWORD *)&v273 + 1);
            v79 = (uint64_t)(v274 - *((_QWORD *)&v273 + 1)) >> 2;
            v80 = v79 + 1;
            if ((unint64_t)(v79 + 1) >> 62)
              std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
            v81 = *((_QWORD *)&v274 + 1) - *((_QWORD *)&v273 + 1);
            if ((uint64_t)(*((_QWORD *)&v274 + 1) - *((_QWORD *)&v273 + 1)) >> 1 > v80)
              v80 = v81 >> 1;
            if ((unint64_t)v81 >= 0x7FFFFFFFFFFFFFFCLL)
              v82 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v82 = v80;
            if (v82)
            {
              v83 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>((uint64_t)&v274 + 8, v82);
              v76 = (char *)v274;
              v78 = (char *)*((_QWORD *)&v273 + 1);
            }
            else
            {
              v83 = 0;
            }
            v84 = &v83[4 * v79];
            *(float *)v84 = v75;
            v77 = v84 + 4;
            while (v76 != v78)
            {
              v85 = *((_DWORD *)v76 - 1);
              v76 -= 4;
              *((_DWORD *)v84 - 1) = v85;
              v84 -= 4;
            }
            *((_QWORD *)&v273 + 1) = v84;
            *(_QWORD *)&v274 = v77;
            *((_QWORD *)&v274 + 1) = &v83[4 * v82];
            if (v78)
              operator delete(v78);
          }
          else
          {
            *(float *)v274 = v74;
            v77 = v76 + 4;
          }
          *(_QWORD *)&v274 = v77;
          if (!v237)
          {
            v204 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
            std::runtime_error::runtime_error(v204, "Could not construct");
          }
          v86 = applesauce::CF::details::at_to<float>((const __CFArray *)v237, i);
          v87 = v86;
          v88 = (char *)*((_QWORD *)&v275 + 1);
          if (*((_QWORD *)&v275 + 1) >= v276[0])
          {
            v90 = (char *)v275;
            v91 = (uint64_t)(*((_QWORD *)&v275 + 1) - v275) >> 2;
            v92 = v91 + 1;
            if ((unint64_t)(v91 + 1) >> 62)
              std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
            v93 = v276[0] - v275;
            if ((uint64_t)(v276[0] - v275) >> 1 > v92)
              v92 = v93 >> 1;
            if ((unint64_t)v93 >= 0x7FFFFFFFFFFFFFFCLL)
              v94 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v94 = v92;
            if (v94)
            {
              v95 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>((uint64_t)v276, v94);
              v88 = (char *)*((_QWORD *)&v275 + 1);
              v90 = (char *)v275;
            }
            else
            {
              v95 = 0;
            }
            v96 = &v95[4 * v91];
            *(float *)v96 = v87;
            v89 = v96 + 4;
            while (v88 != v90)
            {
              v97 = *((_DWORD *)v88 - 1);
              v88 -= 4;
              *((_DWORD *)v96 - 1) = v97;
              v96 -= 4;
            }
            *(_QWORD *)&v275 = v96;
            *((_QWORD *)&v275 + 1) = v89;
            v276[0] = &v95[4 * v94];
            if (v90)
              operator delete(v90);
          }
          else
          {
            **((float **)&v275 + 1) = v86;
            v89 = v88 + 4;
          }
          *((_QWORD *)&v275 + 1) = v89;
        }
      }
      *(_QWORD *)&v273 = __PAIR64__(LODWORD(v37), LODWORD(v35));
      a1 = (uint64_t)v218;
    }
  }
  if (v237)
    CFRelease(v237);
  if (v238)
    CFRelease(v238);
  if (v239)
    CFRelease(v239);
  if (v240)
    CFRelease(v240);
  if (*((_QWORD *)&__p + 1) == (_QWORD)__p
    || *(float *)&v273 <= 0.0
    || *((float *)&v273 + 1) <= 0.0
    || (v98 = (uint64_t)(*((_QWORD *)&__p + 1) - __p) >> 2,
        v99 = (float *)*((_QWORD *)&v271 + 1),
        v98 != (uint64_t)(v272 - *((_QWORD *)&v271 + 1)) >> 2)
    || (v100 = (float *)*((_QWORD *)&v273 + 1), v98 != (uint64_t)(v274 - *((_QWORD *)&v273 + 1)) >> 2)
    || (v101 = (float *)v275, v98 != (uint64_t)(*((_QWORD *)&v275 + 1) - v275) >> 2))
  {
LABEL_216:
    if (getAUSMV2Log(void)::onceToken != -1)
      dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_5474);
    v107 = getAUSMV2Log(void)::gLog;
    if (os_log_type_enabled((os_log_t)getAUSMV2Log(void)::gLog, OS_LOG_TYPE_ERROR))
    {
      if (*(char *)(v3 + 23) < 0)
        v3 = *(_QWORD *)v3;
      *(double *)&v108 = COERCE_DOUBLE("empty optional");
      *(_DWORD *)buf = 136315650;
      *(_QWORD *)&buf[4] = v3;
      *(_WORD *)&buf[12] = 2080;
      *(_QWORD *)&buf[14] = "process";
      if (v6)
        *(double *)&v108 = COERCE_DOUBLE("cached data from last valid room");
      v247 = 2080;
      __src = v108;
      _os_log_error_impl(&dword_1B5ED0000, v107, OS_LOG_TYPE_ERROR, "[%s|%s] Room configuration logically invalid. Returning %s.", buf, 0x20u);
    }
    goto LABEL_219;
  }
  if (v98 <= 1)
    v98 = 1;
  v102 = (float *)__p;
  do
  {
    v103 = *v102;
    if ((*(_DWORD *)v102 & 0x7FFFFFFFu) > 0x7F7FFFFF
      || v103 <= 0.0
      || v103 >= 24000.0
      || (*(_DWORD *)v99 & 0x7FFFFFFFu) > 0x7F7FFFFF
      || *v99 < 0.0
      || (*(_DWORD *)v100 & 0x7FFFFFFFu) > 0x7F7FFFFF
      || *v100 < 0.0
      || (*(_DWORD *)v101 & 0x7FFFFFFFu) > 0x7F7FFFFF
      || *v101 < 0.0)
    {
      goto LABEL_216;
    }
    ++v101;
    ++v100;
    ++v99;
    ++v102;
    --v98;
  }
  while (v98);
  v104 = (float *)(__p + 4);
  while (v104 != *((float **)&__p + 1))
  {
    v106 = *(v104 - 1);
    v105 = *v104++;
    if (v105 < v106)
      goto LABEL_216;
  }
  *(_QWORD *)v269 = v3 + 24;
  v269[8] = 1;
  caulk::recursive_mutex_adapter<caulk::pooled_semaphore_mutex>::lock(v3 + 24);
  AUSM::RoomCongruence::RoomConfiguration::RoomConfiguration((AUSM::RoomCongruence::RoomConfiguration *)v228, (const AUSM::RoomCongruence::RoomConfiguration *)&__p);
  v111 = *(_OWORD *)(v3 + 144);
  v226[0] = *v219;
  v226[1] = v111;
  v227 = *(_DWORD *)(v3 + 160);
  v113 = *(float **)(v3 + 168);
  v112 = *(float **)(v3 + 176);
  v114 = (float *)v228[0];
  if ((char *)v112 - (char *)v113 != v228[1] - v228[0])
    goto LABEL_293;
  while (v113 != v112)
  {
    if (*v113 != *v114)
      goto LABEL_293;
    ++v113;
    ++v114;
  }
  v116 = *(float **)(v3 + 192);
  v115 = *(float **)(v3 + 200);
  v117 = v229;
  if ((char *)v115 - (char *)v116 != v230 - (_QWORD)v229)
    goto LABEL_293;
  while (v116 != v115)
  {
    if (*v116 != *v117)
      goto LABEL_293;
    ++v116;
    ++v117;
  }
  if (*(float *)(v3 + 216) != v231)
    goto LABEL_293;
  if (*(float *)(v3 + 220) != v232)
    goto LABEL_293;
  v121 = *(float **)(v3 + 224);
  v120 = *(float **)(v3 + 232);
  v122 = v233;
  if ((char *)v120 - (char *)v121 != v234 - (_QWORD)v233)
    goto LABEL_293;
  while (v121 != v120)
  {
    if (*v121 != *v122)
      goto LABEL_293;
    ++v121;
    ++v122;
  }
  v128 = *(_QWORD *)(v3 + 248);
  v127 = *(_QWORD *)(v3 + 256);
  v129 = v235;
  if (v127 - v128 != v236 - (_QWORD)v235)
    goto LABEL_293;
  if (v128 == v127)
    goto LABEL_291;
  v130 = v128 + 4;
  do
  {
    v131 = *(float *)(v130 - 4);
    v132 = *v129++;
    v133 = v132;
    v134 = v131 != v132 || v130 == v127;
    v130 += 4;
  }
  while (!v134);
  if (v131 == v133)
  {
LABEL_291:
    v135 = AUSM::RoomCongruence::TuningParameters::operator==(v220, (uint64_t)v226);
    AUSM::RoomCongruence::RoomConfiguration::~RoomConfiguration((AUSM::RoomCongruence::RoomConfiguration *)v228);
    if (v135)
      goto LABEL_415;
  }
  else
  {
LABEL_293:
    AUSM::RoomCongruence::RoomConfiguration::~RoomConfiguration((AUSM::RoomCongruence::RoomConfiguration *)v228);
  }
  v262[0] = 0;
  v268 = 0;
  v136 = AUSM::RoomCongruence::Processor::computeAverageRT60((uint64_t *)v3, (_QWORD *)&v271 + 1, (float *)__p, *((float **)&__p + 1));
  v137 = *(float *)&v136;
  if ((v136 & 0xFF00000000) != 0)
  {
    *(_DWORD *)buf = 0;
    std::vector<float>::vector(v260, (uint64_t)(v274 - *((_QWORD *)&v273 + 1)) >> 2, buf);
    if (getAUSMV2Log(void)::onceToken != -1)
      dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_5474);
    v138 = v137;
    v139 = getAUSMV2Log(void)::gLog;
    v140 = os_log_type_enabled((os_log_t)getAUSMV2Log(void)::gLog, OS_LOG_TYPE_DEFAULT);
    if (v140)
    {
      v141 = v3;
      if (*(char *)(v3 + 23) < 0)
        v141 = *(_QWORD *)v3;
      *(_DWORD *)buf = 136315906;
      *(_QWORD *)&buf[4] = v141;
      *(_WORD *)&buf[12] = 2080;
      *(_QWORD *)&buf[14] = "tuneTarget";
      v247 = 2048;
      *(double *)&__src = v138;
      LOWORD(v249[0]) = 2048;
      *(double *)((char *)v249 + 2) = *(float *)&v273;
      _os_log_impl(&dword_1B5ED0000, v139, OS_LOG_TYPE_DEFAULT, "[%s|%s] From PHASE input: mid-band RT60 = %.3f s, room volume = %.1f m3", buf, 0x2Au);
    }
    v142 = *(_BYTE *)(v3 + 157);
    v143 = *(_DWORD *)(v3 + 160);
    if (!*(_BYTE *)(v3 + 156))
    {
      v158 = 0;
      v151 = *(float *)&v273;
      v159 = v138;
      v138 = 0.0;
      v149 = v273;
LABEL_322:
      AUSM::RoomCongruence::RoomConfiguration::RoomConfiguration((AUSM::RoomCongruence::RoomConfiguration *)buf, (const AUSM::RoomCongruence::RoomConfiguration *)&__p);
      *(float *)v254 = v138;
      *(float *)&v254[4] = v159;
      *(_DWORD *)&v254[8] = v149;
      *(float *)&v254[12] = v151;
      *(_DWORD *)&v254[16] = v158;
      v254[20] = v142;
      v254[21] = 1;
      *(_DWORD *)&v254[24] = v143;
      if (v268)
      {
        std::vector<float>::__assign_with_size[abi:ne180100]<float const*,float const*>(v262, *(char **)buf, *(uint64_t *)&buf[8], (uint64_t)(*(_QWORD *)&buf[8] - *(_QWORD *)buf) >> 2);
        std::vector<float>::__assign_with_size[abi:ne180100]<float const*,float const*>(v263, (char *)__src, v249[0], (v249[0] - (uint64_t)__src) >> 2);
        v264 = v249[2];
        std::vector<float>::__assign_with_size[abi:ne180100]<float const*,float const*>(v265, (char *)v250, v251, (v251 - (uint64_t)v250) >> 2);
        std::vector<float>::__assign_with_size[abi:ne180100]<float const*,float const*>(v266, (char *)v252, v253, (v253 - (uint64_t)v252) >> 2);
        v267[0] = *(_OWORD *)v254;
        *(_OWORD *)((char *)v267 + 12) = *(_OWORD *)&v254[12];
      }
      else
      {
        AUSM::RoomCongruence::RoomConfiguration::RoomConfiguration((AUSM::RoomCongruence::RoomConfiguration *)v262, (const AUSM::RoomCongruence::RoomConfiguration *)buf);
        v267[0] = *(_OWORD *)v254;
        *(_OWORD *)((char *)v267 + 12) = *(_OWORD *)&v254[12];
        v268 = 1;
      }
      AUSM::RoomCongruence::RoomConfiguration::~RoomConfiguration((AUSM::RoomCongruence::RoomConfiguration *)buf);
LABEL_358:
      if (*(_QWORD *)&v260[0])
      {
        *((_QWORD *)&v260[0] + 1) = *(_QWORD *)&v260[0];
        operator delete(*(void **)&v260[0]);
      }
      goto LABEL_360;
    }
    v144 = *(float *)(v3 + 128);
    v145 = *(float *)(v3 + 132);
    v146 = *(float *)(v3 + 148);
    v221 = *(float *)(v3 + 144);
    v147 = *(_DWORD *)(v3 + 152);
    v148 = *(float *)(v3 + 140);
    v149 = v273;
    if (v148 >= *(float *)&v273)
      v150 = *(float *)&v273;
    else
      v150 = *(float *)(v3 + 140);
    if (*(float *)&v273 >= *(float *)(v3 + 136))
      v151 = v150;
    else
      v151 = *(float *)(v3 + 136);
    v152 = AUSM::RoomCongruence::computeIdealRt60((AUSM::RoomCongruence *)v140, v151, v144, v145);
    if (!HIDWORD(v152))
    {
      if (getAUSMV2Log(void)::onceToken != -1)
        dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_5474);
      v153 = getAUSMV2Log(void)::gLog;
      if (!os_log_type_enabled((os_log_t)getAUSMV2Log(void)::gLog, OS_LOG_TYPE_ERROR))
        goto LABEL_358;
      v154 = v3;
      if (*(char *)(v3 + 23) < 0)
        v154 = *(_QWORD *)v3;
      *(_DWORD *)buf = 136315394;
      *(_QWORD *)&buf[4] = v154;
      *(_WORD *)&buf[12] = 2080;
      *(_QWORD *)&buf[14] = "tuneTarget";
      v155 = "[%s|%s] Failed to compute the ideal RT60 for the given data. Returning empty optional.";
LABEL_444:
      _os_log_error_impl(&dword_1B5ED0000, v153, OS_LOG_TYPE_ERROR, v155, buf, 0x16u);
      goto LABEL_358;
    }
    v160 = *(float *)&v152;
    v216 = v147;
    if (getAUSMV2Log(void)::onceToken != -1)
      dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_5474);
    v161 = v160;
    v162 = getAUSMV2Log(void)::gLog;
    v163 = os_log_type_enabled((os_log_t)getAUSMV2Log(void)::gLog, OS_LOG_TYPE_DEFAULT);
    if (v163)
    {
      v164 = v3;
      if (*(char *)(v3 + 23) < 0)
        v164 = *(_QWORD *)v3;
      *(_DWORD *)buf = 136315650;
      *(_QWORD *)&buf[4] = v164;
      *(_WORD *)&buf[12] = 2080;
      *(_QWORD *)&buf[14] = "tuneTarget";
      v247 = 2048;
      *(double *)&__src = v161;
      _os_log_impl(&dword_1B5ED0000, v162, OS_LOG_TYPE_DEFAULT, "[%s|%s] The computed ideal RT60: %f", buf, 0x20u);
    }
    if (v138 <= 0.0)
    {
      if (getAUSMV2Log(void)::onceToken != -1)
        dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_5474);
      v167 = getAUSMV2Log(void)::gLog;
      if (!os_log_type_enabled((os_log_t)getAUSMV2Log(void)::gLog, OS_LOG_TYPE_ERROR))
        goto LABEL_357;
      v166 = a1;
      *(_DWORD *)buf = 136315138;
      *(_QWORD *)&buf[4] = "warpRT60";
      v168 = "[Room Congruence] %s: The input RT60 to be warped must be greater than 0. Returning empty optional.";
    }
    else
    {
      v165 = v146 * v161;
      v166 = a1;
      if ((float)(v146 * v161) <= v161)
      {
        if (getAUSMV2Log(void)::onceToken != -1)
          dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_5474);
        v167 = getAUSMV2Log(void)::gLog;
        if (!os_log_type_enabled((os_log_t)getAUSMV2Log(void)::gLog, OS_LOG_TYPE_ERROR))
          goto LABEL_357;
        *(_DWORD *)buf = 136315138;
        *(_QWORD *)&buf[4] = "warpRT60";
        v168 = "[Room Congruence] %s: The low cut input RT60 for warping must be lower than the high cut RT60. Returning empty optional.";
      }
      else if (v161 <= 0.0)
      {
        if (getAUSMV2Log(void)::onceToken != -1)
          dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_5474);
        v167 = getAUSMV2Log(void)::gLog;
        if (!os_log_type_enabled((os_log_t)getAUSMV2Log(void)::gLog, OS_LOG_TYPE_ERROR))
          goto LABEL_357;
        *(_DWORD *)buf = 136315138;
        *(_QWORD *)&buf[4] = "warpRT60";
        v168 = "[Room Congruence] %s: Both low and high cut input RT60 for warping must be greater than 0. Returning empty optional.";
      }
      else
      {
        if ((float)(v221 * v161) > 0.0)
        {
          if (v161 <= v138)
          {
            if (v165 >= v138)
              v161 = v161
                   + (float)((float)((float)((float)(v221 * v161) - v161) / (float)(v165 - v161)) * (float)(v138 - v161));
            else
              v161 = v221 * v161;
          }
          v196 = AUSM::RoomCongruence::computeIdealRt60((AUSM::RoomCongruence *)v163, v148, v144, v145);
          if (!HIDWORD(v196))
          {
            if (getAUSMV2Log(void)::onceToken != -1)
              dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_5474);
            v197 = getAUSMV2Log(void)::gLog;
            if (os_log_type_enabled((os_log_t)getAUSMV2Log(void)::gLog, OS_LOG_TYPE_ERROR))
            {
              v198 = v3;
              if (*(char *)(v3 + 23) < 0)
                v198 = *(_QWORD *)v3;
              *(_DWORD *)buf = 136315394;
              *(_QWORD *)&buf[4] = v198;
              *(_WORD *)&buf[12] = 2080;
              *(_QWORD *)&buf[14] = "tuneTarget";
              _os_log_error_impl(&dword_1B5ED0000, v197, OS_LOG_TYPE_ERROR, "[%s|%s] Failed to compute upper RT60 limit.", buf, 0x16u);
            }
            goto LABEL_358;
          }
          v159 = *(float *)&v196;
          if (v161 <= *(float *)&v196)
          {
            v159 = v161;
          }
          else
          {
            if (getAUSMV2Log(void)::onceToken != -1)
              dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_5474);
            v199 = getAUSMV2Log(void)::gLog;
            if (os_log_type_enabled((os_log_t)getAUSMV2Log(void)::gLog, OS_LOG_TYPE_DEFAULT))
            {
              v200 = v3;
              if (*(char *)(v3 + 23) < 0)
                v200 = *(_QWORD *)v3;
              *(_DWORD *)buf = 136315650;
              *(_QWORD *)&buf[4] = v200;
              *(_WORD *)&buf[12] = 2080;
              *(_QWORD *)&buf[14] = "tuneTarget";
              v247 = 2048;
              *(double *)&__src = v159;
              _os_log_impl(&dword_1B5ED0000, v199, OS_LOG_TYPE_DEFAULT, "[%s|%s] Clipping RT60 to max value: %f", buf, 0x20u);
            }
          }
          v158 = v216;
          goto LABEL_322;
        }
        if (getAUSMV2Log(void)::onceToken != -1)
          dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_5474);
        v167 = getAUSMV2Log(void)::gLog;
        if (!os_log_type_enabled((os_log_t)getAUSMV2Log(void)::gLog, OS_LOG_TYPE_ERROR))
        {
LABEL_357:
          v153 = getAUSMV2Log(void)::gLog;
          if (!os_log_type_enabled((os_log_t)getAUSMV2Log(void)::gLog, OS_LOG_TYPE_ERROR))
            goto LABEL_358;
          v192 = v3;
          if (*(char *)(v3 + 23) < 0)
            v192 = *(_QWORD *)v3;
          *(_DWORD *)buf = 136315394;
          *(_QWORD *)&buf[4] = v192;
          *(_WORD *)&buf[12] = 2080;
          *(_QWORD *)&buf[14] = "tuneTarget";
          v155 = "[%s|%s] Failed to compute the warping result for the given tuning and input RT60 data. Returning empty optional.";
          goto LABEL_444;
        }
        *(_DWORD *)buf = 136315138;
        *(_QWORD *)&buf[4] = "warpRT60";
        v168 = "[Room Congruence] %s: Both low and high cut output RT60 for warping must be greater than 0. Returning empty optional.";
      }
    }
    _os_log_error_impl(&dword_1B5ED0000, v167, OS_LOG_TYPE_ERROR, v168, buf, 0xCu);
    a1 = v166;
    if (getAUSMV2Log(void)::onceToken != -1)
      dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_5474);
    goto LABEL_357;
  }
  if (getAUSMV2Log(void)::onceToken != -1)
    dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_5474);
  v156 = getAUSMV2Log(void)::gLog;
  if (os_log_type_enabled((os_log_t)getAUSMV2Log(void)::gLog, OS_LOG_TYPE_ERROR))
  {
    v157 = v3;
    if (*(char *)(v3 + 23) < 0)
      v157 = *(_QWORD *)v3;
    *(_DWORD *)buf = 136315394;
    *(_QWORD *)&buf[4] = v157;
    *(_WORD *)&buf[12] = 2080;
    *(_QWORD *)&buf[14] = "tuneTarget";
    _os_log_error_impl(&dword_1B5ED0000, v156, OS_LOG_TYPE_ERROR, "[%s|%s] Failed to compute the average RT60 for the target data. Returning empty optional.", buf, 0x16u);
  }
LABEL_360:
  if (!v268)
  {
    if (getAUSMV2Log(void)::onceToken != -1)
      dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_5474);
    v172 = getAUSMV2Log(void)::gLog;
    if (os_log_type_enabled((os_log_t)getAUSMV2Log(void)::gLog, OS_LOG_TYPE_ERROR))
    {
      if (*(char *)(v3 + 23) < 0)
        v3 = *(_QWORD *)v3;
      *(double *)&v173 = COERCE_DOUBLE("empty optional");
      *(_DWORD *)buf = 136315650;
      *(_QWORD *)&buf[4] = v3;
      *(_WORD *)&buf[12] = 2080;
      *(_QWORD *)&buf[14] = "process";
      if (v6)
        *(double *)&v173 = COERCE_DOUBLE("cached data from last valid room");
      v247 = 2080;
      __src = v173;
      _os_log_error_impl(&dword_1B5ED0000, v172, OS_LOG_TYPE_ERROR, "[%s|%s] TuneTarget failed. Returning %s.", buf, 0x20u);
    }
    goto LABEL_413;
  }
  AUSM::RoomCongruence::RoomConfiguration::RoomConfiguration((AUSM::RoomCongruence::RoomConfiguration *)v260, (const AUSM::RoomCongruence::RoomConfiguration *)v262);
  *(_OWORD *)v261 = v267[0];
  *(_OWORD *)&v261[12] = *(_OWORD *)((char *)v267 + 12);
  if (getAUSMV2Log(void)::onceToken != -1)
    dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_5474);
  v169 = getAUSMV2Log(void)::gLog;
  if (os_log_type_enabled((os_log_t)getAUSMV2Log(void)::gLog, OS_LOG_TYPE_DEFAULT))
  {
    v170 = v3;
    if (*(char *)(v3 + 23) < 0)
      v170 = *(_QWORD *)v3;
    *(_DWORD *)buf = 136315906;
    *(_QWORD *)&buf[4] = v170;
    *(_WORD *)&buf[12] = 2080;
    *(_QWORD *)&buf[14] = "process";
    v247 = 2048;
    *(double *)&__src = *(float *)&v261[4];
    LOWORD(v249[0]) = 2048;
    *(double *)((char *)v249 + 2) = *(float *)&v261[12];
    _os_log_impl(&dword_1B5ED0000, v169, OS_LOG_TYPE_DEFAULT, "[%s|%s] The new target mid-band RT60: %f. The new target room volume: %f", buf, 0x2Au);
  }
  if ((*(_DWORD *)&v261[24] - 1) >= 3)
  {
    PresetWithClosestRoomVolume = AUSM::RoomCongruence::Processor::findPresetWithClosestRoomVolume((AUSM::RoomCongruence::Processor *)v3, *(float *)&v261[12]);
    if (!HIDWORD(PresetWithClosestRoomVolume))
    {
      if (getAUSMV2Log(void)::onceToken != -1)
        dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_5474);
      v175 = getAUSMV2Log(void)::gLog;
      if (!os_log_type_enabled((os_log_t)getAUSMV2Log(void)::gLog, OS_LOG_TYPE_ERROR))
        goto LABEL_412;
      if (*(char *)(v3 + 23) < 0)
        v3 = *(_QWORD *)v3;
      *(double *)&v176 = COERCE_DOUBLE("empty optional");
      *(_DWORD *)buf = 136315650;
      *(_QWORD *)&buf[4] = v3;
      *(_WORD *)&buf[12] = 2080;
      *(_QWORD *)&buf[14] = "process";
      if (v6)
        *(double *)&v176 = COERCE_DOUBLE("cached data from last valid room");
      v247 = 2080;
      __src = v176;
      v177 = "[%s|%s] Couldn't find a matching preset. Returning %s.";
LABEL_427:
      v189 = v175;
      v190 = 32;
LABEL_428:
      _os_log_error_impl(&dword_1B5ED0000, v189, OS_LOG_TYPE_ERROR, v177, buf, v190);
      goto LABEL_412;
    }
    v171 = PresetWithClosestRoomVolume;
  }
  else
  {
    v171 = *(_DWORD *)&v261[24] + 51;
  }
  if (getAUSMV2Log(void)::onceToken != -1)
    dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_5474);
  v178 = getAUSMV2Log(void)::gLog;
  if (os_log_type_enabled((os_log_t)getAUSMV2Log(void)::gLog, OS_LOG_TYPE_DEFAULT))
  {
    v179 = v3;
    if (*(char *)(v3 + 23) < 0)
      v179 = *(_QWORD *)v3;
    *(_DWORD *)buf = 136315650;
    *(_QWORD *)&buf[4] = v179;
    *(_WORD *)&buf[12] = 2080;
    *(_QWORD *)&buf[14] = "process";
    v247 = 1024;
    LODWORD(__src) = v171;
    _os_log_impl(&dword_1B5ED0000, v178, OS_LOG_TYPE_DEFAULT, "[%s|%s] Using library room IR %d", buf, 0x1Cu);
  }
  v180 = *(_QWORD *)(v3 + 72);
  if (!v180)
    goto LABEL_409;
  v181 = (uint8x8_t)vcnt_s8((int8x8_t)v180);
  v181.i16[0] = vaddlv_u8(v181);
  if (v181.u32[0] > 1uLL)
  {
    v182 = v171;
    if (v180 <= v171)
      v182 = v171 % v180;
  }
  else
  {
    v182 = (v180 - 1) & v171;
  }
  v183 = *(uint64_t ***)(*(_QWORD *)(v3 + 64) + 8 * v182);
  if (!v183 || (v184 = *v183) == 0)
  {
LABEL_409:
    if (getAUSMV2Log(void)::onceToken != -1)
      dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_5474);
    v175 = getAUSMV2Log(void)::gLog;
    if (!os_log_type_enabled((os_log_t)getAUSMV2Log(void)::gLog, OS_LOG_TYPE_ERROR))
      goto LABEL_412;
    if (*(char *)(v3 + 23) < 0)
      v3 = *(_QWORD *)v3;
    *(double *)&v188 = COERCE_DOUBLE("empty optional");
    *(_DWORD *)buf = 136315650;
    *(_QWORD *)&buf[4] = v3;
    *(_WORD *)&buf[12] = 2080;
    *(_QWORD *)&buf[14] = "process";
    if (v6)
      *(double *)&v188 = COERCE_DOUBLE("cached data from last valid room");
    v247 = 2080;
    __src = v188;
    v177 = "[%s|%s] Couldn't find user data for the selected IR preset. Returning %s.";
    goto LABEL_427;
  }
  while (1)
  {
    v185 = v184[1];
    if (v185 == v171)
      break;
    if (v181.u32[0] > 1uLL)
    {
      if (v185 >= v180)
        v185 %= v180;
    }
    else
    {
      v185 &= v180 - 1;
    }
    if (v185 != v182)
      goto LABEL_409;
LABEL_408:
    v184 = (uint64_t *)*v184;
    if (!v184)
      goto LABEL_409;
  }
  if (*((_DWORD *)v184 + 4) != v171)
    goto LABEL_408;
  v186 = (uint64_t)(v184 + 3);
  if (!AUSM::RoomCongruence::UserData::isValid((AUSM::RoomCongruence::UserData *)(v184 + 3)))
  {
    if (getAUSMV2Log(void)::onceToken != -1)
      dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_5474);
    v175 = getAUSMV2Log(void)::gLog;
    if (!os_log_type_enabled((os_log_t)getAUSMV2Log(void)::gLog, OS_LOG_TYPE_ERROR))
      goto LABEL_412;
    if (*(char *)(v3 + 23) < 0)
      v3 = *(_QWORD *)v3;
    *(double *)&v191 = COERCE_DOUBLE("empty optional");
    *(_DWORD *)buf = 136315650;
    *(_QWORD *)&buf[4] = v3;
    *(_WORD *)&buf[12] = 2080;
    *(_QWORD *)&buf[14] = "process";
    if (v6)
      *(double *)&v191 = COERCE_DOUBLE("cached data from last valid room");
    v247 = 2080;
    __src = v191;
    v177 = "[%s|%s] Logically invalid user data retrieved. Returning %s.";
    goto LABEL_427;
  }
  AUSM::RoomCongruence::Processor::computeTargetMatchingParams(buf, (uint64_t *)v3, (uint64_t)v260, v171, v186);
  std::__optional_storage_base<AUSM::RoomCongruence::ProcessingResult,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<AUSM::RoomCongruence::ProcessingResult,false>>((AUSM::RoomCongruence::ProcessingResult *)a1, (uint64_t)buf);
  if (v259)
    AUSM::RoomCongruence::ProcessingResult::~ProcessingResult((AUSM::RoomCongruence::ProcessingResult *)buf);
  if (*(_BYTE *)(a1 + 184))
  {
    AUSM::RoomCongruence::RoomConfiguration::RoomConfiguration((AUSM::RoomCongruence::RoomConfiguration *)v225, (const AUSM::RoomCongruence::RoomConfiguration *)&__p);
    v187 = *(_OWORD *)(v3 + 144);
    v223[0] = *v219;
    v223[1] = v187;
    v224 = *(_DWORD *)(v3 + 160);
    if (!*(_BYTE *)(a1 + 184))
      std::__throw_bad_optional_access[abi:ne180100]();
    AUSM::RoomCongruence::ProcessingResult::ProcessingResult((AUSM::RoomCongruence::ProcessingResult *)v222, (const AUSM::RoomCongruence::ProcessingResult *)a1);
    AUSM::RoomCongruence::Cache::Cache((uint64_t)buf, (const AUSM::RoomCongruence::RoomConfiguration *)v225, v223, (uint64_t)v222);
    AUSM::RoomCongruence::Cache::operator=(v3 + 168, (uint64_t)buf);
    AUSM::RoomCongruence::Cache::~Cache((AUSM::RoomCongruence::Cache *)buf);
    AUSM::RoomCongruence::ProcessingResult::~ProcessingResult((AUSM::RoomCongruence::ProcessingResult *)v222);
    AUSM::RoomCongruence::RoomConfiguration::~RoomConfiguration((AUSM::RoomCongruence::RoomConfiguration *)v225);
    goto LABEL_412;
  }
  if (getAUSMV2Log(void)::onceToken != -1)
    dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_5474);
  v193 = getAUSMV2Log(void)::gLog;
  if (os_log_type_enabled((os_log_t)getAUSMV2Log(void)::gLog, OS_LOG_TYPE_ERROR))
  {
    if (*(char *)(v3 + 23) < 0)
      v3 = *(_QWORD *)v3;
    *(_DWORD *)buf = 136315394;
    *(_QWORD *)&buf[4] = v3;
    *(_WORD *)&buf[12] = 2080;
    *(_QWORD *)&buf[14] = "process";
    v177 = "[%s|%s] Failed to match the parameters. Returning empty optional.";
    v189 = v193;
    v190 = 22;
    goto LABEL_428;
  }
LABEL_412:
  AUSM::RoomCongruence::RoomConfiguration::~RoomConfiguration((AUSM::RoomCongruence::RoomConfiguration *)v260);
LABEL_413:
  if (v268)
    AUSM::RoomCongruence::RoomConfiguration::~RoomConfiguration((AUSM::RoomCongruence::RoomConfiguration *)v262);
LABEL_415:
  std::unique_lock<caulk::recursive_mutex_adapter<caulk::pooled_semaphore_mutex>>::~unique_lock[abi:ne180100]((uint64_t)v269);
LABEL_219:
  AUSM::RoomCongruence::RoomConfiguration::~RoomConfiguration((AUSM::RoomCongruence::RoomConfiguration *)&__p);
}

void sub_1B6392998(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, AUSM::RoomCongruence::ProcessingResult *a12)
{
  applesauce::CF::ArrayRef::~ArrayRef((const void **)&STACK[0x240]);
  std::__optional_destruct_base<applesauce::CF::ArrayRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&STACK[0x4E0]);
  std::__optional_destruct_base<applesauce::CF::ArrayRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&STACK[0x3B0]);
  std::__optional_destruct_base<applesauce::CF::ArrayRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&STACK[0x440]);
  std::__optional_destruct_base<applesauce::CF::ArrayRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&STACK[0x260]);
  applesauce::CF::DictionaryRef::~DictionaryRef((const void **)&STACK[0x238]);
  if (*((_BYTE *)a12 + 184))
    AUSM::RoomCongruence::ProcessingResult::~ProcessingResult(a12);
  _Unwind_Resume(a1);
}

applesauce::CF::ArrayRef *applesauce::CF::details::find_at_key<applesauce::CF::ArrayRef,__CFString const* const&>(applesauce::CF::ArrayRef *a1, CFDictionaryRef theDict, const void *a3)
{
  const void *v4;
  const void *v5;
  std::runtime_error *exception;

  v4 = applesauce::CF::details::at_key<__CFString const* const&>(theDict, a3);
  if (!v4)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    applesauce::CF::not_found(exception);
  }
  v5 = v4;
  CFRetain(v4);
  return applesauce::CF::ArrayRef::ArrayRef(a1, v5);
}

void sub_1B6392D98(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t AUSM::RoomCongruence::Processor::findPresetWithClosestRoomVolume(AUSM::RoomCongruence::Processor *this, float a2)
{
  uint64_t v2;
  int v3;
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  float v8;
  float v9;

  if (a2 >= 0.0)
  {
    v5 = *((_QWORD *)this + 13);
    v6 = *((_QWORD *)this + 14);
    if (v5 == v6)
    {
      v2 = 0;
      v3 = 0;
      v4 = 0;
    }
    else
    {
      v7 = v5 + 8;
      if (v5 + 8 != v6)
      {
        v8 = logf(a2);
        do
        {
          v9 = vabds_f32(logf(*(float *)(v7 + 4)), v8);
          if (v9 < vabds_f32(logf(*(float *)(v5 + 4)), v8))
            v5 = v7;
          v7 += 8;
        }
        while (v7 != v6);
      }
      v4 = *(_DWORD *)v5 & 0xFFFFFF00;
      v3 = *(_DWORD *)v5;
      v2 = 0x100000000;
    }
  }
  else
  {
    v2 = 0;
    v3 = 0;
    v4 = 0;
  }
  return v2 | v4 | v3;
}

void std::__optional_storage_base<AUSM::RoomCongruence::ProcessingResult,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<AUSM::RoomCongruence::ProcessingResult,false>>(AUSM::RoomCongruence::ProcessingResult *a1, uint64_t a2)
{
  uint64_t v2;

  if (*((unsigned __int8 *)a1 + 184) == *(unsigned __int8 *)(a2 + 184))
  {
    if (*((_BYTE *)a1 + 184))
      AUSM::RoomCongruence::ProcessingResult::operator=((uint64_t)a1, a2);
  }
  else if (*((_BYTE *)a1 + 184))
  {
    AUSM::RoomCongruence::ProcessingResult::~ProcessingResult(a1);
    *(_BYTE *)(v2 + 184) = 0;
  }
  else
  {
    *(_BYTE *)(std::construct_at[abi:ne180100]<AUSM::RoomCongruence::ProcessingResult,AUSM::RoomCongruence::ProcessingResult,AUSM::RoomCongruence::ProcessingResult*>((uint64_t)a1, a2)+ 184) = 1;
  }
}

AUSM::RoomCongruence::ProcessingResult *AUSM::RoomCongruence::ProcessingResult::ProcessingResult(AUSM::RoomCongruence::ProcessingResult *this, const AUSM::RoomCongruence::ProcessingResult *a2)
{
  uint64_t v4;
  uint64_t v5;

  *(_BYTE *)this = 0;
  *((_BYTE *)this + 152) = 0;
  if (*((_BYTE *)a2 + 152))
  {
    IR::IRDataAttributes::IRDataAttributes((uint64_t)this, (uint64_t)a2);
    *((_BYTE *)this + 152) = 1;
  }
  v4 = *((_QWORD *)a2 + 20);
  if (v4)
    CFRetain(*((CFTypeRef *)a2 + 20));
  *((_QWORD *)this + 20) = v4;
  v5 = *((_QWORD *)a2 + 21);
  if (v5)
    CFRetain(*((CFTypeRef *)a2 + 21));
  *((_QWORD *)this + 21) = v5;
  *((_BYTE *)this + 176) = *((_BYTE *)a2 + 176);
  return this;
}

uint64_t AUSM::RoomCongruence::Cache::Cache(uint64_t a1, const AUSM::RoomCongruence::RoomConfiguration *a2, __int128 *a3, uint64_t a4)
{
  AUSM::RoomCongruence::RoomConfiguration *v7;
  __int128 v8;
  __int128 v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v7 = AUSM::RoomCongruence::RoomConfiguration::RoomConfiguration((AUSM::RoomCongruence::RoomConfiguration *)a1, a2);
  v8 = *a3;
  v9 = a3[1];
  v10 = *((_DWORD *)a3 + 8);
  *((_BYTE *)v7 + 144) = 0;
  v11 = (uint64_t)v7 + 144;
  *(_DWORD *)(v11 - 8) = v10;
  *(_OWORD *)(v11 - 24) = v9;
  *(_OWORD *)(v11 - 40) = v8;
  *(_BYTE *)(v11 + 152) = 0;
  if (*(_BYTE *)(a4 + 152))
  {
    IR::IRDataAttributes::IRDataAttributes(v11, a4);
    *(_BYTE *)(a1 + 296) = 1;
  }
  v12 = *(_QWORD *)(a4 + 160);
  if (v12)
    CFRetain(*(CFTypeRef *)(a4 + 160));
  *(_QWORD *)(a1 + 304) = v12;
  v13 = *(_QWORD *)(a4 + 168);
  if (v13)
    CFRetain(*(CFTypeRef *)(a4 + 168));
  *(_QWORD *)(a1 + 312) = v13;
  *(_BYTE *)(a1 + 320) = *(_BYTE *)(a4 + 176);
  *(_BYTE *)(a1 + 328) = 1;
  return a1;
}

uint64_t AUSM::RoomCongruence::Cache::operator=(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  __int128 v5;
  AUSM::RoomCongruence::ProcessingResult *v6;
  uint64_t v7;

  if (a1 != a2)
  {
    std::vector<float>::__assign_with_size[abi:ne180100]<float const*,float const*>((char *)a1, *(char **)a2, *(_QWORD *)(a2 + 8), (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 2);
    std::vector<float>::__assign_with_size[abi:ne180100]<float const*,float const*>((char *)(a1 + 24), *(char **)(a2 + 24), *(_QWORD *)(a2 + 32), (uint64_t)(*(_QWORD *)(a2 + 32) - *(_QWORD *)(a2 + 24)) >> 2);
    *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
    std::vector<float>::__assign_with_size[abi:ne180100]<float const*,float const*>((char *)(a1 + 56), *(char **)(a2 + 56), *(_QWORD *)(a2 + 64), (uint64_t)(*(_QWORD *)(a2 + 64) - *(_QWORD *)(a2 + 56)) >> 2);
    std::vector<float>::__assign_with_size[abi:ne180100]<float const*,float const*>((char *)(a1 + 80), *(char **)(a2 + 80), *(_QWORD *)(a2 + 88), (uint64_t)(*(_QWORD *)(a2 + 88) - *(_QWORD *)(a2 + 80)) >> 2);
  }
  v4 = *(_OWORD *)(a2 + 104);
  v5 = *(_OWORD *)(a2 + 120);
  *(_DWORD *)(a1 + 136) = *(_DWORD *)(a2 + 136);
  *(_OWORD *)(a1 + 120) = v5;
  *(_OWORD *)(a1 + 104) = v4;
  v6 = (AUSM::RoomCongruence::ProcessingResult *)(a1 + 144);
  v7 = a2 + 144;
  if (*(unsigned __int8 *)(a1 + 328) == *(unsigned __int8 *)(a2 + 328))
  {
    if (*(_BYTE *)(a1 + 328))
      AUSM::RoomCongruence::ProcessingResult::operator=((uint64_t)v6, v7);
  }
  else if (*(_BYTE *)(a1 + 328))
  {
    AUSM::RoomCongruence::ProcessingResult::~ProcessingResult(v6);
    *(_BYTE *)(a1 + 328) = 0;
  }
  else
  {
    std::construct_at[abi:ne180100]<AUSM::RoomCongruence::ProcessingResult,AUSM::RoomCongruence::ProcessingResult const&,AUSM::RoomCongruence::ProcessingResult*>((uint64_t)v6, v7);
    *(_BYTE *)(a1 + 328) = 1;
  }
  return a1;
}

void AUSM::RoomCongruence::Cache::~Cache(AUSM::RoomCongruence::Cache *this)
{
  if (*((_BYTE *)this + 328))
    AUSM::RoomCongruence::ProcessingResult::~ProcessingResult((AUSM::RoomCongruence::Cache *)((char *)this + 144));
  AUSM::RoomCongruence::RoomConfiguration::~RoomConfiguration(this);
}

uint64_t std::construct_at[abi:ne180100]<AUSM::RoomCongruence::ProcessingResult,AUSM::RoomCongruence::ProcessingResult const&,AUSM::RoomCongruence::ProcessingResult*>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  *(_BYTE *)a1 = 0;
  *(_BYTE *)(a1 + 152) = 0;
  if (*(_BYTE *)(a2 + 152))
  {
    IR::IRDataAttributes::IRDataAttributes(a1, a2);
    *(_BYTE *)(a1 + 152) = 1;
  }
  v4 = *(_QWORD *)(a2 + 160);
  if (v4)
    CFRetain(*(CFTypeRef *)(a2 + 160));
  *(_QWORD *)(a1 + 160) = v4;
  v5 = *(_QWORD *)(a2 + 168);
  if (v5)
    CFRetain(*(CFTypeRef *)(a2 + 168));
  *(_QWORD *)(a1 + 168) = v5;
  *(_BYTE *)(a1 + 176) = *(_BYTE *)(a2 + 176);
  return a1;
}

void AUSM::RoomCongruence::Processor::setTuningParameters(float *a1, CFTypeRef *a2)
{
  CFTypeRef v4;
  BOOL isTuningParametersDictionaryStructurallyValid;
  CFTypeRef v6;
  NSObject *v7;
  BOOL v8;
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;
  float v14;
  float v15;
  BOOL v16;
  BOOL v17;
  BOOL v18;
  int v19;
  std::runtime_error *exception;
  CFTypeRef cf;
  CFTypeRef v22;
  _BYTE buf[12];
  __int16 v24;
  const char *v25;
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  v4 = *a2;
  if (*a2)
    CFRetain(*a2);
  cf = v4;
  isTuningParametersDictionaryStructurallyValid = AUSM::RoomCongruence::isTuningParametersDictionaryStructurallyValid((CFDictionaryRef *)&cf);
  if (cf)
    CFRelease(cf);
  if (isTuningParametersDictionaryStructurallyValid)
  {
    *(_QWORD *)buf = a1 + 6;
    buf[8] = 1;
    caulk::recursive_mutex_adapter<caulk::pooled_semaphore_mutex>::lock((uint64_t)(a1 + 6));
    v6 = *a2;
    if (v6)
    {
      CFRetain(v6);
      CFRetain(v6);
    }
    v22 = v6;
    v8 = AUSM::RoomCongruence::isTuningParametersDictionaryStructurallyValid((CFDictionaryRef *)&v22);
    if (v22)
      CFRelease(v22);
    if (v8)
    {
      if (!v6)
      {
        exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(exception, "Could not construct");
      }
      v9 = applesauce::CF::details::find_at_key<float,__CFString const* const&>((const __CFDictionary *)v6, CFSTR("k"));
      v10 = applesauce::CF::details::find_at_key<float,__CFString const* const&>((const __CFDictionary *)v6, CFSTR("exp"));
      v11 = applesauce::CF::details::find_at_key<float,__CFString const* const&>((const __CFDictionary *)v6, CFSTR("lowerVolumeLimit"));
      v12 = applesauce::CF::details::find_at_key<float,__CFString const* const&>((const __CFDictionary *)v6, CFSTR("upperVolumeLimit"));
      v13 = applesauce::CF::details::find_at_key<float,__CFString const* const&>((const __CFDictionary *)v6, CFSTR("alpha"));
      v14 = applesauce::CF::details::find_at_key<float,__CFString const* const&>((const __CFDictionary *)v6, CFSTR("beta"));
      v15 = applesauce::CF::details::find_at_key<float,__CFString const* const&>((const __CFDictionary *)v6, CFSTR("lowerReverbLevelLimit"));
      v16 = applesauce::CF::details::find_at_key<BOOL,__CFString const* const&>((const __CFDictionary *)v6, CFSTR("isWarpingEnabled"));
      v17 = applesauce::CF::details::find_at_key<BOOL,__CFString const* const&>((const __CFDictionary *)v6, CFSTR("useSpectralMatching"));
      v18 = applesauce::CF::details::find_at_key<BOOL,__CFString const* const&>((const __CFDictionary *)v6, CFSTR("isRoomCongruenceEnabled"));
      v19 = applesauce::CF::details::find_at_key<unsigned int,__CFString const* const&>((const __CFDictionary *)v6, CFSTR("libraryRoomIr"));
    }
    else
    {
      v16 = 0;
      v19 = 0;
      v18 = 0;
      v10 = 0.0;
      v17 = 1;
      v11 = 0.0;
      v12 = 0.0;
      v13 = 0.0;
      v14 = 0.0;
      v15 = 0.0;
      v9 = 0.0;
    }
    a1[32] = v9;
    a1[33] = v10;
    a1[34] = v11;
    a1[35] = v12;
    a1[36] = v13;
    a1[37] = v14;
    a1[38] = v15;
    *((_BYTE *)a1 + 156) = v16;
    *((_BYTE *)a1 + 157) = v17;
    *((_BYTE *)a1 + 158) = v18;
    *((_DWORD *)a1 + 40) = v19;
    if (v6)
      CFRelease(v6);
    std::unique_lock<caulk::recursive_mutex_adapter<caulk::pooled_semaphore_mutex>>::~unique_lock[abi:ne180100]((uint64_t)buf);
  }
  else
  {
    if (getAUSMV2Log(void)::onceToken != -1)
      dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_5474);
    v7 = getAUSMV2Log(void)::gLog;
    if (os_log_type_enabled((os_log_t)getAUSMV2Log(void)::gLog, OS_LOG_TYPE_ERROR))
    {
      if (*((char *)a1 + 23) < 0)
        a1 = *(float **)a1;
      *(_DWORD *)buf = 136315394;
      *(_QWORD *)&buf[4] = a1;
      v24 = 2080;
      v25 = "setTuningParameters";
      _os_log_error_impl(&dword_1B5ED0000, v7, OS_LOG_TYPE_ERROR, "[%s|%s] Tuning Parameters dictionary structurally invalid. Failed to set, returning.", buf, 0x16u);
    }
  }
}

void sub_1B6393488(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, const void *a10, __int16 a11, char a12, char a13, CFTypeRef cf, char a15)
{
  void *v15;

  __cxa_free_exception(v15);
  applesauce::CF::DictionaryRef::~DictionaryRef(&a10);
  std::unique_lock<caulk::recursive_mutex_adapter<caulk::pooled_semaphore_mutex>>::~unique_lock[abi:ne180100]((uint64_t)&a15);
  _Unwind_Resume(a1);
}

uint64_t AUSM::RoomCongruence::Processor::Processor(uint64_t a1, const void **a2)
{
  CFIndex v2;
  _QWORD *v5;
  size_t v6;
  IR::IRDataLoader *v7;
  _OWORD *v8;
  const void *v9;
  uint64_t v10;
  IR::IRDataLoader *v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  int64_t v15;
  char *v16;
  size_t v17;
  IR::IRDataLoader *v18;
  unint64_t v19;
  CFTypeRef v20;
  const void *v21;
  const void *v22;
  unsigned __int8 v23;
  unsigned __int8 v24;
  const __CFDictionary **v25;
  CFDictionaryRef *v26;
  const __CFArray **v27;
  unsigned __int8 v28;
  CFDictionaryRef *v29;
  const __CFArray **v30;
  unsigned __int8 v31;
  CFDictionaryRef *v32;
  const __CFArray **v33;
  unsigned __int8 v34;
  int v35;
  uint64_t v36;
  NSObject *v37;
  const char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  float v45;
  const __CFArray *v46;
  const __CFArray *v47;
  const __CFArray *v48;
  const __CFArray *v49;
  char v50;
  CFIndex Count;
  CFIndex v52;
  CFIndex v53;
  CFIndex v54;
  unint64_t i;
  float v56;
  float v57;
  char *v58;
  _DWORD *v59;
  char *v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  unint64_t v64;
  char *v65;
  char *v66;
  int v67;
  float v68;
  float v69;
  char *v70;
  _DWORD *v71;
  char *v72;
  uint64_t v73;
  unint64_t v74;
  uint64_t v75;
  unint64_t v76;
  char *v77;
  char *v78;
  int v79;
  float v80;
  float v81;
  char *v82;
  _DWORD *v83;
  char *v84;
  uint64_t v85;
  unint64_t v86;
  uint64_t v87;
  unint64_t v88;
  char *v89;
  char *v90;
  int v91;
  float v92;
  float v93;
  char *v94;
  _DWORD *v95;
  char *v96;
  uint64_t v97;
  unint64_t v98;
  uint64_t v99;
  unint64_t v100;
  char *v101;
  char *v102;
  int v103;
  float v104;
  float v105;
  char *v106;
  _DWORD *v107;
  char *v108;
  uint64_t v109;
  unint64_t v110;
  uint64_t v111;
  unint64_t v112;
  char *v113;
  char *v114;
  int v115;
  unint64_t v116;
  unint64_t v117;
  uint8x8_t v118;
  uint64_t **v119;
  uint64_t *j;
  unint64_t v121;
  char *v122;
  float v123;
  float v124;
  _BOOL8 v125;
  unint64_t v126;
  unint64_t v127;
  int8x8_t prime;
  void *v129;
  void *v130;
  uint64_t v131;
  _QWORD *v132;
  unint64_t v133;
  uint8x8_t v134;
  unint64_t v135;
  uint8x8_t v136;
  uint64_t v137;
  _QWORD *v138;
  unint64_t v139;
  _QWORD *v140;
  unint64_t v141;
  float v142;
  int v143;
  unint64_t v144;
  _DWORD *v145;
  _DWORD *v146;
  _DWORD *v147;
  uint64_t v148;
  unint64_t v149;
  uint64_t v150;
  unint64_t v151;
  char *v152;
  char *v153;
  char *v154;
  uint64_t v155;
  unint64_t v156;
  void *v157;
  uint64_t v158;
  NSObject *v159;
  const char *v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  NSObject *v164;
  const char *v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  NSObject *v170;
  const char *v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  NSObject *v175;
  const char *v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  NSObject *v180;
  const char *v181;
  uint64_t v182;
  uint64_t v183;
  NSObject *v184;
  float *v185;
  float *v186;
  unint64_t v187;
  uint64_t v188;
  void *v190;
  std::runtime_error *v191;
  std::runtime_error *v192;
  std::runtime_error *v193;
  std::runtime_error *v194;
  std::runtime_error *v195;
  std::runtime_error *v196;
  std::runtime_error *v197;
  std::runtime_error *v198;
  std::runtime_error *v199;
  std::runtime_error *v200;
  std::runtime_error *v201;
  std::runtime_error *exception;
  std::runtime_error *v203;
  std::runtime_error *v204;
  std::runtime_error *v205;
  _QWORD *v206;
  _QWORD *v207;
  void **v208;
  CFArrayRef theArray;
  CFTypeRef v210;
  CFTypeRef v211;
  CFTypeRef v212;
  CFTypeRef v213;
  CFTypeRef v214;
  CFTypeRef cf;
  const __CFArray *v216;
  const __CFArray *v217;
  const __CFArray *v218;
  const void *v219[2];
  _OWORD __src[2];
  __int128 v221;
  float v222;
  __int128 v223;
  __int128 v224;
  __int128 v225;
  __int128 v226;
  char *v227;
  uint8_t v228[4];
  const char *v229;
  _BYTE v230[12];
  _BYTE v231[12];
  _BYTE v232[12];
  __int128 buf;
  char v234;
  uint64_t v235;

  v235 = *MEMORY[0x1E0C80C00];
  *(_DWORD *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  caulk::pooled_semaphore_mutex::pooled_semaphore_mutex((caulk::pooled_semaphore_mutex *)(a1 + 36));
  *(_OWORD *)(a1 + 40) = 0u;
  v5 = (_QWORD *)(a1 + 40);
  v208 = (void **)(a1 + 64);
  *(_QWORD *)(a1 + 88) = 0;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_DWORD *)(a1 + 96) = 1065353216;
  *(_OWORD *)(a1 + 104) = 0u;
  v206 = (_QWORD *)(a1 + 104);
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_QWORD *)(a1 + 149) = 0;
  *(_WORD *)(a1 + 157) = 1;
  *(_DWORD *)(a1 + 160) = 0;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_OWORD *)(a1 + 216) = 0u;
  *(_OWORD *)(a1 + 232) = 0u;
  *(_OWORD *)(a1 + 248) = 0u;
  *(_OWORD *)(a1 + 264) = 0u;
  *(_OWORD *)(a1 + 280) = 0u;
  *(_QWORD *)(a1 + 293) = 0;
  *(_WORD *)(a1 + 301) = 1;
  *(_DWORD *)(a1 + 304) = 0;
  *(_BYTE *)(a1 + 312) = 0;
  *(_BYTE *)(a1 + 496) = 0;
  if (*((char *)a2 + 23) >= 0)
    v6 = *((unsigned __int8 *)a2 + 23);
  else
    v6 = (size_t)a2[1];
  v7 = (IR::IRDataLoader *)std::string::basic_string[abi:ne180100]((uint64_t)__src, v6 + 26);
  if ((SBYTE7(__src[1]) & 0x80u) == 0)
    v8 = __src;
  else
    v8 = *(_OWORD **)&__src[0];
  if (v6)
  {
    if (*((char *)a2 + 23) >= 0)
      v9 = a2;
    else
      v9 = *a2;
    v7 = (IR::IRDataLoader *)memmove(v8, v9, v6);
  }
  strcpy((char *)v8 + v6, "|RoomCongruence::Processor");
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
  *(_OWORD *)a1 = __src[0];
  *(_QWORD *)(a1 + 16) = *(_QWORD *)&__src[1];
  *(_QWORD *)&__src[0] = 0x3500000034;
  DWORD2(__src[0]) = 54;
  v10 = *(_QWORD *)(a1 + 56);
  v11 = *(IR::IRDataLoader **)(a1 + 40);
  if ((unint64_t)(v10 - (_QWORD)v11) < 0xC)
  {
    if (v11)
    {
      *(_QWORD *)(a1 + 48) = v11;
      operator delete(v11);
      v10 = 0;
      *v5 = 0;
      *(_QWORD *)(a1 + 48) = 0;
      *(_QWORD *)(a1 + 56) = 0;
    }
    v12 = v10 >> 1;
    if ((unint64_t)(v10 >> 1) <= 3)
      v12 = 3;
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFFCLL)
      v13 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v13 = v12;
    if (v13 >> 62)
      std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
    v7 = (IR::IRDataLoader *)operator new(4 * v13);
    v11 = v7;
    *(_QWORD *)(a1 + 40) = v7;
    *(_QWORD *)(a1 + 48) = v7;
    *(_QWORD *)(a1 + 56) = (char *)v7 + 4 * v13;
    goto LABEL_28;
  }
  v14 = *(char **)(a1 + 48);
  v15 = v14 - (char *)v11;
  if ((unint64_t)(v14 - (char *)v11) > 0xB)
  {
LABEL_28:
    *(_QWORD *)v11 = *(_QWORD *)&__src[0];
    *((_DWORD *)v11 + 2) = DWORD2(__src[0]);
    v17 = 12;
    goto LABEL_29;
  }
  v16 = (char *)__src + v15;
  if (v14 != (char *)v11)
  {
    memcpy(*(void **)(a1 + 40), __src, v14 - (char *)v11);
    v11 = *(IR::IRDataLoader **)(a1 + 48);
  }
  v17 = 12 - v15;
  v7 = (IR::IRDataLoader *)memcpy(v11, v16, v17);
LABEL_29:
  *(_QWORD *)(a1 + 48) = (char *)v11 + v17;
  cf = 0;
  v18 = *(IR::IRDataLoader **)(a1 + 40);
  if ((IR::IRDataLoader *)((char *)v11 + v17) != v18)
  {
    v19 = 0;
    v207 = (_QWORD *)(a1 + 80);
    while (1)
    {
      IR::IRDataLoader::instance(v7);
      IR::IRDataLoader::getUserData();
      v20 = cf;
      v21 = *(const void **)&__src[0];
      cf = *(CFTypeRef *)&__src[0];
      *(_QWORD *)&__src[0] = v20;
      if (v20)
        CFRelease(v20);
      if (!v21)
      {
        v214 = 0;
        if (getAUSMV2Log(void)::onceToken != -1)
          dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_5474);
        v36 = getAUSMV2Log(void)::gLog;
        if (os_log_type_enabled((os_log_t)getAUSMV2Log(void)::gLog, OS_LOG_TYPE_ERROR))
        {
          LODWORD(__src[0]) = 136315138;
          *(_QWORD *)((char *)__src + 4) = "isIrDataUserDataDictionaryStructurallyValid";
          v37 = v36;
          v38 = "[Room Congruence] %s: IRData User Data invalid - underlying CF object is nil.";
          goto LABEL_98;
        }
        goto LABEL_99;
      }
      CFRetain(v21);
      v214 = v21;
      if (!applesauce::CF::details::has_key<__CFString const* const&>((CFDictionaryRef)v21, CFSTR("CenterFreqs")))
      {
        if (getAUSMV2Log(void)::onceToken != -1)
          dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_5474);
        v39 = getAUSMV2Log(void)::gLog;
        if (os_log_type_enabled((os_log_t)getAUSMV2Log(void)::gLog, OS_LOG_TYPE_ERROR))
        {
          LODWORD(__src[0]) = 136315138;
          *(_QWORD *)((char *)__src + 4) = "isIrDataUserDataDictionaryStructurallyValid";
          v37 = v39;
          v38 = "[Room Congruence] %s: IRData User Data invalid - missing center frequencies.";
          goto LABEL_98;
        }
        goto LABEL_99;
      }
      if (!v214)
        goto LABEL_465;
      if (!applesauce::CF::details::has_key<__CFString const* const&>((CFDictionaryRef)v214, CFSTR("RT60")))
      {
        if (getAUSMV2Log(void)::onceToken != -1)
          dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_5474);
        v40 = getAUSMV2Log(void)::gLog;
        if (os_log_type_enabled((os_log_t)getAUSMV2Log(void)::gLog, OS_LOG_TYPE_ERROR))
        {
          LODWORD(__src[0]) = 136315138;
          *(_QWORD *)((char *)__src + 4) = "isIrDataUserDataDictionaryStructurallyValid";
          v37 = v40;
          v38 = "[Room Congruence] %s: IRData User Data invalid - missing RT60 targets.";
          goto LABEL_98;
        }
        goto LABEL_99;
      }
      if (!v214)
        goto LABEL_465;
      if (!applesauce::CF::details::has_key<__CFString const* const&>((CFDictionaryRef)v214, CFSTR("RoomVolume")))
      {
        if (getAUSMV2Log(void)::onceToken != -1)
          dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_5474);
        v41 = getAUSMV2Log(void)::gLog;
        if (os_log_type_enabled((os_log_t)getAUSMV2Log(void)::gLog, OS_LOG_TYPE_ERROR))
        {
          LODWORD(__src[0]) = 136315138;
          *(_QWORD *)((char *)__src + 4) = "isIrDataUserDataDictionaryStructurallyValid";
          v37 = v41;
          v38 = "[Room Congruence] %s: IRData User Data invalid - missing room volume.";
          goto LABEL_98;
        }
        goto LABEL_99;
      }
      if (!v214)
        goto LABEL_465;
      if (!applesauce::CF::details::has_key<__CFString const* const&>((CFDictionaryRef)v214, CFSTR("EarlyRoomEnergy")))
      {
        if (getAUSMV2Log(void)::onceToken != -1)
          dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_5474);
        v42 = getAUSMV2Log(void)::gLog;
        if (os_log_type_enabled((os_log_t)getAUSMV2Log(void)::gLog, OS_LOG_TYPE_ERROR))
        {
          LODWORD(__src[0]) = 136315138;
          *(_QWORD *)((char *)__src + 4) = "isIrDataUserDataDictionaryStructurallyValid";
          v37 = v42;
          v38 = "[Room Congruence] %s: IRData User Data invalid - missing early room energy.";
          goto LABEL_98;
        }
        goto LABEL_99;
      }
      if (!v214)
        goto LABEL_465;
      if (!applesauce::CF::details::has_key<__CFString const* const&>((CFDictionaryRef)v214, CFSTR("LateRoomEnergy")))
      {
        if (getAUSMV2Log(void)::onceToken != -1)
          dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_5474);
        v43 = getAUSMV2Log(void)::gLog;
        if (os_log_type_enabled((os_log_t)getAUSMV2Log(void)::gLog, OS_LOG_TYPE_ERROR))
        {
          LODWORD(__src[0]) = 136315138;
          *(_QWORD *)((char *)__src + 4) = "isIrDataUserDataDictionaryStructurallyValid";
          v37 = v43;
          v38 = "[Room Congruence] %s: IRData User Data invalid - missing late room energy.";
          goto LABEL_98;
        }
LABEL_99:
        v35 = 0;
        goto LABEL_100;
      }
      if (!v214)
        goto LABEL_465;
      if (!applesauce::CF::details::has_key<__CFString const* const&>((CFDictionaryRef)v214, CFSTR("TotalRoomEnergy")))
      {
        if (getAUSMV2Log(void)::onceToken != -1)
          dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_5474);
        v44 = getAUSMV2Log(void)::gLog;
        if (os_log_type_enabled((os_log_t)getAUSMV2Log(void)::gLog, OS_LOG_TYPE_ERROR))
        {
          LODWORD(__src[0]) = 136315138;
          *(_QWORD *)((char *)__src + 4) = "isIrDataUserDataDictionaryStructurallyValid";
          v37 = v44;
          v38 = "[Room Congruence] %s: IRData User Data invalid - missing total room energy.";
LABEL_98:
          _os_log_error_impl(&dword_1B5ED0000, v37, OS_LOG_TYPE_ERROR, v38, (uint8_t *)__src, 0xCu);
        }
        goto LABEL_99;
      }
      if (!v214)
      {
LABEL_465:
        exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(exception, "Could not construct");
      }
      applesauce::CF::details::find_at_key_or_optional<applesauce::CF::ArrayRef,__CFString const* const&>(__src, (CFDictionaryRef)v214, CFSTR("CenterFreqs"));
      if (!BYTE8(__src[0]))
        break;
      if (!*(_QWORD *)&__src[0])
      {
        v203 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v203, "Could not construct");
      }
      if (!CFArrayGetCount(*(CFArrayRef *)&__src[0]))
      {
        if (getAUSMV2Log(void)::onceToken != -1)
          dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_5474);
        v161 = getAUSMV2Log(void)::gLog;
        if (!os_log_type_enabled((os_log_t)getAUSMV2Log(void)::gLog, OS_LOG_TYPE_ERROR))
          goto LABEL_361;
        LODWORD(buf) = 136315138;
        *(_QWORD *)((char *)&buf + 4) = "isIrDataUserDataDictionaryStructurallyValid";
        v159 = v161;
        v160 = "[Room Congruence] %s: IRData User Data invalid - the center frequency array is empty.";
        goto LABEL_360;
      }
      v22 = *(const void **)&__src[0];
      if (*(_QWORD *)&__src[0])
        CFRetain(*(CFTypeRef *)&__src[0]);
      v219[1] = v22;
      v23 = AUSM::RoomCongruence::isArrayOf<float>((const __CFArray *)v22);
      if (v22)
        CFRelease(v22);
      if ((v23 & 1) != 0)
      {
        if (!v214)
        {
          v204 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(v204, "Could not construct");
        }
        applesauce::CF::details::find_at_key_or_optional<applesauce::CF::ArrayRef,__CFString const* const&>(&buf, (CFDictionaryRef)v214, CFSTR("RT60"));
        if (BYTE8(buf))
        {
          if (!(_QWORD)buf)
          {
            v205 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
            std::runtime_error::runtime_error(v205, "Could not construct");
          }
          if (CFArrayGetCount((CFArrayRef)buf))
          {
            applesauce::CF::ArrayRef::ArrayRef((applesauce::CF::ArrayRef *)v219, (CFTypeRef)buf);
            v24 = AUSM::RoomCongruence::isArrayOf<float>((const __CFArray *)v219[0]);
            applesauce::CF::ArrayRef::~ArrayRef(v219);
            if ((v24 & 1) != 0)
            {
              v25 = (const __CFDictionary **)applesauce::CF::DictionaryRef::operator->(&v214);
              if (((unint64_t)applesauce::CF::DictionaryRef_proxy::at_as<float,__CFString const* const&>(*v25, CFSTR("RoomVolume")) & 0xFF00000000) != 0)
              {
                v26 = (CFDictionaryRef *)applesauce::CF::DictionaryRef::operator->(&v214);
                applesauce::CF::details::find_at_key_or_optional<applesauce::CF::ArrayRef,__CFString const* const&>(v232, *v26, CFSTR("EarlyRoomEnergy"));
                if (BYTE8(buf))
                {
                  v27 = (const __CFArray **)applesauce::CF::ArrayRef::operator->(&buf);
                  if (applesauce::CF::ArrayRef_proxy::get_size(*v27))
                  {
                    applesauce::CF::ArrayRef::ArrayRef((applesauce::CF::ArrayRef *)&v218, *(CFTypeRef *)v232);
                    v28 = AUSM::RoomCongruence::isArrayOf<float>(v218);
                    applesauce::CF::ArrayRef::~ArrayRef((const void **)&v218);
                    if ((v28 & 1) != 0)
                    {
                      v29 = (CFDictionaryRef *)applesauce::CF::DictionaryRef::operator->(&v214);
                      applesauce::CF::details::find_at_key_or_optional<applesauce::CF::ArrayRef,__CFString const* const&>(v231, *v29, CFSTR("LateRoomEnergy"));
                      if (v231[8])
                      {
                        v30 = (const __CFArray **)applesauce::CF::ArrayRef::operator->(v231);
                        if (applesauce::CF::ArrayRef_proxy::get_size(*v30))
                        {
                          applesauce::CF::ArrayRef::ArrayRef((applesauce::CF::ArrayRef *)&v217, *(CFTypeRef *)v231);
                          v31 = AUSM::RoomCongruence::isArrayOf<float>(v217);
                          applesauce::CF::ArrayRef::~ArrayRef((const void **)&v217);
                          if ((v31 & 1) != 0)
                          {
                            v32 = (CFDictionaryRef *)applesauce::CF::DictionaryRef::operator->(&v214);
                            applesauce::CF::details::find_at_key_or_optional<applesauce::CF::ArrayRef,__CFString const* const&>(v230, *v32, CFSTR("TotalRoomEnergy"));
                            if (v230[8])
                            {
                              v33 = (const __CFArray **)applesauce::CF::ArrayRef::operator->(v230);
                              if (applesauce::CF::ArrayRef_proxy::get_size(*v33))
                              {
                                applesauce::CF::ArrayRef::ArrayRef((applesauce::CF::ArrayRef *)&v216, *(CFTypeRef *)v230);
                                v34 = AUSM::RoomCongruence::isArrayOf<float>(v216);
                                applesauce::CF::ArrayRef::~ArrayRef((const void **)&v216);
                                if ((v34 & 1) != 0)
                                {
                                  v35 = 1;
                                  goto LABEL_426;
                                }
                                if (getAUSMV2Log(void)::onceToken != -1)
                                  dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_5474);
                                v183 = getAUSMV2Log(void)::gLog;
                                if (os_log_type_enabled((os_log_t)getAUSMV2Log(void)::gLog, OS_LOG_TYPE_ERROR))
                                {
                                  *(_DWORD *)v228 = 136315138;
                                  v229 = "isIrDataUserDataDictionaryStructurallyValid";
                                  v180 = v183;
                                  v181 = "[Room Congruence] %s: IRData User Data invalid - mismatch between queried and a"
                                         "ctual type of the total reverb energy values in the array - must be float.";
LABEL_424:
                                  _os_log_error_impl(&dword_1B5ED0000, v180, OS_LOG_TYPE_ERROR, v181, v228, 0xCu);
                                }
                              }
                              else
                              {
                                if (getAUSMV2Log(void)::onceToken != -1)
                                  dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_5474);
                                v182 = getAUSMV2Log(void)::gLog;
                                if (os_log_type_enabled((os_log_t)getAUSMV2Log(void)::gLog, OS_LOG_TYPE_ERROR))
                                {
                                  *(_DWORD *)v228 = 136315138;
                                  v229 = "isIrDataUserDataDictionaryStructurallyValid";
                                  v180 = v182;
                                  v181 = "[Room Congruence] %s: IRData User Data invalid - the total reverb energy array is empty.";
                                  goto LABEL_424;
                                }
                              }
                            }
                            else
                            {
                              if (getAUSMV2Log(void)::onceToken != -1)
                                dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_5474);
                              v179 = getAUSMV2Log(void)::gLog;
                              if (os_log_type_enabled((os_log_t)getAUSMV2Log(void)::gLog, OS_LOG_TYPE_ERROR))
                              {
                                *(_DWORD *)v228 = 136315138;
                                v229 = "isIrDataUserDataDictionaryStructurallyValid";
                                v180 = v179;
                                v181 = "[Room Congruence] %s: IRData User Data invalid - mismatch between queried and act"
                                       "ual type of the total reverb energy value in the dictionary.";
                                goto LABEL_424;
                              }
                            }
                            v35 = 0;
LABEL_426:
                            std::__optional_destruct_base<applesauce::CF::ArrayRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)v230);
LABEL_411:
                            std::__optional_destruct_base<applesauce::CF::ArrayRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)v231);
LABEL_396:
                            std::__optional_destruct_base<applesauce::CF::ArrayRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)v232);
LABEL_381:
                            std::__optional_destruct_base<applesauce::CF::ArrayRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&buf);
                            goto LABEL_362;
                          }
                          if (getAUSMV2Log(void)::onceToken != -1)
                            dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_5474);
                          v178 = getAUSMV2Log(void)::gLog;
                          if (os_log_type_enabled((os_log_t)getAUSMV2Log(void)::gLog, OS_LOG_TYPE_ERROR))
                          {
                            *(_DWORD *)v230 = 136315138;
                            *(_QWORD *)&v230[4] = "isIrDataUserDataDictionaryStructurallyValid";
                            v175 = v178;
                            v176 = "[Room Congruence] %s: IRData User Data invalid - mismatch between queried and actual "
                                   "type of the late reverb energy values in the array - must be float.";
LABEL_409:
                            _os_log_error_impl(&dword_1B5ED0000, v175, OS_LOG_TYPE_ERROR, v176, v230, 0xCu);
                          }
                        }
                        else
                        {
                          if (getAUSMV2Log(void)::onceToken != -1)
                            dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_5474);
                          v177 = getAUSMV2Log(void)::gLog;
                          if (os_log_type_enabled((os_log_t)getAUSMV2Log(void)::gLog, OS_LOG_TYPE_ERROR))
                          {
                            *(_DWORD *)v230 = 136315138;
                            *(_QWORD *)&v230[4] = "isIrDataUserDataDictionaryStructurallyValid";
                            v175 = v177;
                            v176 = "[Room Congruence] %s: IRData User Data invalid - the late reverb energy array is empty.";
                            goto LABEL_409;
                          }
                        }
                      }
                      else
                      {
                        if (getAUSMV2Log(void)::onceToken != -1)
                          dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_5474);
                        v174 = getAUSMV2Log(void)::gLog;
                        if (os_log_type_enabled((os_log_t)getAUSMV2Log(void)::gLog, OS_LOG_TYPE_ERROR))
                        {
                          *(_DWORD *)v230 = 136315138;
                          *(_QWORD *)&v230[4] = "isIrDataUserDataDictionaryStructurallyValid";
                          v175 = v174;
                          v176 = "[Room Congruence] %s: IRData User Data invalid - mismatch between queried and actual ty"
                                 "pe of the late reverb energy value in the dictionary.";
                          goto LABEL_409;
                        }
                      }
                      v35 = 0;
                      goto LABEL_411;
                    }
                    if (getAUSMV2Log(void)::onceToken != -1)
                      dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_5474);
                    v173 = getAUSMV2Log(void)::gLog;
                    if (os_log_type_enabled((os_log_t)getAUSMV2Log(void)::gLog, OS_LOG_TYPE_ERROR))
                    {
                      *(_DWORD *)v231 = 136315138;
                      *(_QWORD *)&v231[4] = "isIrDataUserDataDictionaryStructurallyValid";
                      v170 = v173;
                      v171 = "[Room Congruence] %s: IRData User Data invalid - mismatch between queried and actual type o"
                             "f the early reflections energy values in the array - must be float.";
LABEL_394:
                      _os_log_error_impl(&dword_1B5ED0000, v170, OS_LOG_TYPE_ERROR, v171, v231, 0xCu);
                    }
                  }
                  else
                  {
                    if (getAUSMV2Log(void)::onceToken != -1)
                      dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_5474);
                    v172 = getAUSMV2Log(void)::gLog;
                    if (os_log_type_enabled((os_log_t)getAUSMV2Log(void)::gLog, OS_LOG_TYPE_ERROR))
                    {
                      *(_DWORD *)v231 = 136315138;
                      *(_QWORD *)&v231[4] = "isIrDataUserDataDictionaryStructurallyValid";
                      v170 = v172;
                      v171 = "[Room Congruence] %s: IRData User Data invalid - the early reflections energy array is empty.";
                      goto LABEL_394;
                    }
                  }
                }
                else
                {
                  if (getAUSMV2Log(void)::onceToken != -1)
                    dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_5474);
                  v169 = getAUSMV2Log(void)::gLog;
                  if (os_log_type_enabled((os_log_t)getAUSMV2Log(void)::gLog, OS_LOG_TYPE_ERROR))
                  {
                    *(_DWORD *)v231 = 136315138;
                    *(_QWORD *)&v231[4] = "isIrDataUserDataDictionaryStructurallyValid";
                    v170 = v169;
                    v171 = "[Room Congruence] %s: IRData User Data invalid - mismatch between queried and actual type of "
                           "the early reflections energy value in the dictionary.";
                    goto LABEL_394;
                  }
                }
                v35 = 0;
                goto LABEL_396;
              }
              if (getAUSMV2Log(void)::onceToken != -1)
                dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_5474);
              v168 = getAUSMV2Log(void)::gLog;
              if (os_log_type_enabled((os_log_t)getAUSMV2Log(void)::gLog, OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)v232 = 136315138;
                *(_QWORD *)&v232[4] = "isIrDataUserDataDictionaryStructurallyValid";
                v164 = v168;
                v165 = "[Room Congruence] %s: IRData User Data invalid - mismatch between queried and actual type of the "
                       "room volume value in the dictionary.";
LABEL_379:
                _os_log_error_impl(&dword_1B5ED0000, v164, OS_LOG_TYPE_ERROR, v165, v232, 0xCu);
              }
            }
            else
            {
              if (getAUSMV2Log(void)::onceToken != -1)
                dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_5474);
              v167 = getAUSMV2Log(void)::gLog;
              if (os_log_type_enabled((os_log_t)getAUSMV2Log(void)::gLog, OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)v232 = 136315138;
                *(_QWORD *)&v232[4] = "isIrDataUserDataDictionaryStructurallyValid";
                v164 = v167;
                v165 = "[Room Congruence] %s: IRData User Data invalid - mismatch between queried and actual type of the "
                       "RT60 values in the array - must be float.";
                goto LABEL_379;
              }
            }
          }
          else
          {
            if (getAUSMV2Log(void)::onceToken != -1)
              dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_5474);
            v166 = getAUSMV2Log(void)::gLog;
            if (os_log_type_enabled((os_log_t)getAUSMV2Log(void)::gLog, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)v232 = 136315138;
              *(_QWORD *)&v232[4] = "isIrDataUserDataDictionaryStructurallyValid";
              v164 = v166;
              v165 = "[Room Congruence] %s: IRData User Data invalid - the RT60 array is empty.";
              goto LABEL_379;
            }
          }
        }
        else
        {
          if (getAUSMV2Log(void)::onceToken != -1)
            dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_5474);
          v163 = getAUSMV2Log(void)::gLog;
          if (os_log_type_enabled((os_log_t)getAUSMV2Log(void)::gLog, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)v232 = 136315138;
            *(_QWORD *)&v232[4] = "isIrDataUserDataDictionaryStructurallyValid";
            v164 = v163;
            v165 = "[Room Congruence] %s: IRData User Data invalid - mismatch between queried and actual type of the RT60"
                   " value in the dictionary.";
            goto LABEL_379;
          }
        }
        v35 = 0;
        goto LABEL_381;
      }
      if (getAUSMV2Log(void)::onceToken != -1)
        dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_5474);
      v162 = getAUSMV2Log(void)::gLog;
      if (os_log_type_enabled((os_log_t)getAUSMV2Log(void)::gLog, OS_LOG_TYPE_ERROR))
      {
        LODWORD(buf) = 136315138;
        *(_QWORD *)((char *)&buf + 4) = "isIrDataUserDataDictionaryStructurallyValid";
        v159 = v162;
        v160 = "[Room Congruence] %s: IRData User Data invalid - mismatch between queried and actual type of the center f"
               "requency values in the array - must be float.";
LABEL_360:
        _os_log_error_impl(&dword_1B5ED0000, v159, OS_LOG_TYPE_ERROR, v160, (uint8_t *)&buf, 0xCu);
      }
LABEL_361:
      v35 = 0;
LABEL_362:
      std::__optional_destruct_base<applesauce::CF::ArrayRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)__src);
LABEL_100:
      v7 = (IR::IRDataLoader *)v214;
      if (v214)
        CFRelease(v214);
      if (!v35)
        goto LABEL_337;
      if (!v21)
      {
        v196 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v196, "Could not construct");
      }
      applesauce::CF::details::find_at_key<applesauce::CF::ArrayRef,__CFString const* const&>((applesauce::CF::ArrayRef *)&v213, (CFDictionaryRef)v21, CFSTR("CenterFreqs"));
      applesauce::CF::details::find_at_key<applesauce::CF::ArrayRef,__CFString const* const&>((applesauce::CF::ArrayRef *)&v212, (CFDictionaryRef)v21, CFSTR("RT60"));
      v45 = applesauce::CF::details::find_at_key<float,__CFString const* const&>((const __CFDictionary *)v21, CFSTR("RoomVolume"));
      applesauce::CF::details::find_at_key<applesauce::CF::ArrayRef,__CFString const* const&>((applesauce::CF::ArrayRef *)&v211, (CFDictionaryRef)v21, CFSTR("EarlyRoomEnergy"));
      applesauce::CF::details::find_at_key<applesauce::CF::ArrayRef,__CFString const* const&>((applesauce::CF::ArrayRef *)&v210, (CFDictionaryRef)v21, CFSTR("LateRoomEnergy"));
      applesauce::CF::details::find_at_key<applesauce::CF::ArrayRef,__CFString const* const&>((applesauce::CF::ArrayRef *)&theArray, (CFDictionaryRef)v21, CFSTR("TotalRoomEnergy"));
      v221 = 0u;
      memset(__src, 0, sizeof(__src));
      v223 = 0u;
      v224 = 0u;
      v225 = 0u;
      v226 = 0u;
      v227 = 0;
      v46 = (const __CFArray *)v213;
      if (v213)
        CFRetain(v213);
      if (!AUSM::RoomCongruence::isArrayOf<float>(v46))
      {
        v50 = 1;
        goto LABEL_131;
      }
      v47 = (const __CFArray *)v212;
      if (v212)
        CFRetain(v212);
      if (AUSM::RoomCongruence::isArrayOf<float>(v47))
      {
        v48 = (const __CFArray *)v211;
        if (v211)
          CFRetain(v211);
        if (AUSM::RoomCongruence::isArrayOf<float>(v48))
        {
          v2 = (CFIndex)v210;
          if (v210)
            CFRetain(v210);
          if (AUSM::RoomCongruence::isArrayOf<float>((const __CFArray *)v2))
          {
            v49 = (const __CFArray *)v210;
            if (v210)
              CFRetain(v210);
            v50 = AUSM::RoomCongruence::isArrayOf<float>(v49) ^ 1;
            if (v49)
              CFRelease(v49);
            if (!v2)
              goto LABEL_127;
LABEL_126:
            CFRelease((CFTypeRef)v2);
          }
          else
          {
            v50 = 1;
            if (v2)
              goto LABEL_126;
          }
        }
        else
        {
          v50 = 1;
        }
LABEL_127:
        if (v48)
          CFRelease(v48);
        goto LABEL_129;
      }
      v50 = 1;
LABEL_129:
      if (v47)
        CFRelease(v47);
LABEL_131:
      if (v46)
        CFRelease(v46);
      if ((v50 & 1) == 0)
      {
        if (!v213)
        {
          v200 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(v200, "Could not construct");
        }
        Count = CFArrayGetCount((CFArrayRef)v213);
        if (!v212)
        {
          v199 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(v199, "Could not construct");
        }
        v52 = CFArrayGetCount((CFArrayRef)v212);
        if (!v211)
        {
          v198 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(v198, "Could not construct");
        }
        v53 = CFArrayGetCount((CFArrayRef)v211);
        if (!v210)
        {
          v197 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(v197, "Could not construct");
        }
        v2 = CFArrayGetCount((CFArrayRef)v210);
        if (!theArray)
        {
          v201 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(v201, "Could not construct");
        }
        v54 = CFArrayGetCount(theArray);
        if (Count == v52 && v52 == v53 && v53 == v2 && v2 == v54)
        {
          std::vector<float>::reserve((void **)__src, Count);
          std::vector<float>::reserve((void **)&__src[1] + 1, Count);
          std::vector<float>::reserve((void **)&v223, Count);
          std::vector<float>::reserve((void **)&v224 + 1, Count);
          std::vector<float>::reserve((void **)&v226, Count);
          if (Count)
          {
            for (i = 0; i != Count; ++i)
            {
              if (!v213)
              {
                v191 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                std::runtime_error::runtime_error(v191, "Could not construct");
              }
              v56 = applesauce::CF::details::at_to<float>((const __CFArray *)v213, i);
              v57 = v56;
              v58 = (char *)*((_QWORD *)&__src[0] + 1);
              if (*((_QWORD *)&__src[0] + 1) >= *(_QWORD *)&__src[1])
              {
                v60 = *(char **)&__src[0];
                v61 = (uint64_t)(*((_QWORD *)&__src[0] + 1) - *(_QWORD *)&__src[0]) >> 2;
                v62 = v61 + 1;
                if ((unint64_t)(v61 + 1) >> 62)
                  std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
                v63 = *(_QWORD *)&__src[1] - *(_QWORD *)&__src[0];
                if ((uint64_t)(*(_QWORD *)&__src[1] - *(_QWORD *)&__src[0]) >> 1 > v62)
                  v62 = v63 >> 1;
                if ((unint64_t)v63 >= 0x7FFFFFFFFFFFFFFCLL)
                  v64 = 0x3FFFFFFFFFFFFFFFLL;
                else
                  v64 = v62;
                if (v64)
                {
                  v65 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>((uint64_t)&__src[1], v64);
                  v58 = (char *)*((_QWORD *)&__src[0] + 1);
                  v60 = *(char **)&__src[0];
                }
                else
                {
                  v65 = 0;
                }
                v66 = &v65[4 * v61];
                *(float *)v66 = v57;
                v59 = v66 + 4;
                while (v58 != v60)
                {
                  v67 = *((_DWORD *)v58 - 1);
                  v58 -= 4;
                  *((_DWORD *)v66 - 1) = v67;
                  v66 -= 4;
                }
                *(_QWORD *)&__src[0] = v66;
                *((_QWORD *)&__src[0] + 1) = v59;
                *(_QWORD *)&__src[1] = &v65[4 * v64];
                if (v60)
                  operator delete(v60);
              }
              else
              {
                **((float **)&__src[0] + 1) = v56;
                v59 = v58 + 4;
              }
              *((_QWORD *)&__src[0] + 1) = v59;
              if (!v212)
              {
                v194 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                std::runtime_error::runtime_error(v194, "Could not construct");
              }
              v68 = applesauce::CF::details::at_to<float>((const __CFArray *)v212, i);
              v69 = v68;
              v70 = (char *)v221;
              if ((unint64_t)v221 >= *((_QWORD *)&v221 + 1))
              {
                v72 = (char *)*((_QWORD *)&__src[1] + 1);
                v73 = (uint64_t)(v221 - *((_QWORD *)&__src[1] + 1)) >> 2;
                v74 = v73 + 1;
                if ((unint64_t)(v73 + 1) >> 62)
                  std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
                v75 = *((_QWORD *)&v221 + 1) - *((_QWORD *)&__src[1] + 1);
                if ((uint64_t)(*((_QWORD *)&v221 + 1) - *((_QWORD *)&__src[1] + 1)) >> 1 > v74)
                  v74 = v75 >> 1;
                if ((unint64_t)v75 >= 0x7FFFFFFFFFFFFFFCLL)
                  v76 = 0x3FFFFFFFFFFFFFFFLL;
                else
                  v76 = v74;
                if (v76)
                {
                  v77 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>((uint64_t)&v221 + 8, v76);
                  v72 = (char *)*((_QWORD *)&__src[1] + 1);
                  v70 = (char *)v221;
                }
                else
                {
                  v77 = 0;
                }
                v78 = &v77[4 * v73];
                *(float *)v78 = v69;
                v71 = v78 + 4;
                while (v70 != v72)
                {
                  v79 = *((_DWORD *)v70 - 1);
                  v70 -= 4;
                  *((_DWORD *)v78 - 1) = v79;
                  v78 -= 4;
                }
                *((_QWORD *)&__src[1] + 1) = v78;
                *(_QWORD *)&v221 = v71;
                *((_QWORD *)&v221 + 1) = &v77[4 * v76];
                if (v72)
                  operator delete(v72);
              }
              else
              {
                *(float *)v221 = v68;
                v71 = v70 + 4;
              }
              *(_QWORD *)&v221 = v71;
              if (!v211)
              {
                v192 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                std::runtime_error::runtime_error(v192, "Could not construct");
              }
              v80 = applesauce::CF::details::at_to<float>((const __CFArray *)v211, i);
              v81 = v80;
              v82 = (char *)*((_QWORD *)&v223 + 1);
              if (*((_QWORD *)&v223 + 1) >= (unint64_t)v224)
              {
                v84 = (char *)v223;
                v85 = (uint64_t)(*((_QWORD *)&v223 + 1) - v223) >> 2;
                v86 = v85 + 1;
                if ((unint64_t)(v85 + 1) >> 62)
                  std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
                v87 = v224 - v223;
                if ((uint64_t)(v224 - v223) >> 1 > v86)
                  v86 = v87 >> 1;
                if ((unint64_t)v87 >= 0x7FFFFFFFFFFFFFFCLL)
                  v88 = 0x3FFFFFFFFFFFFFFFLL;
                else
                  v88 = v86;
                if (v88)
                {
                  v89 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>((uint64_t)&v224, v88);
                  v82 = (char *)*((_QWORD *)&v223 + 1);
                  v84 = (char *)v223;
                }
                else
                {
                  v89 = 0;
                }
                v90 = &v89[4 * v85];
                *(float *)v90 = v81;
                v83 = v90 + 4;
                while (v82 != v84)
                {
                  v91 = *((_DWORD *)v82 - 1);
                  v82 -= 4;
                  *((_DWORD *)v90 - 1) = v91;
                  v90 -= 4;
                }
                *(_QWORD *)&v223 = v90;
                *((_QWORD *)&v223 + 1) = v83;
                *(_QWORD *)&v224 = &v89[4 * v88];
                if (v84)
                  operator delete(v84);
              }
              else
              {
                **((float **)&v223 + 1) = v80;
                v83 = v82 + 4;
              }
              *((_QWORD *)&v223 + 1) = v83;
              if (!v210)
              {
                v195 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                std::runtime_error::runtime_error(v195, "Could not construct");
              }
              v92 = applesauce::CF::details::at_to<float>((const __CFArray *)v210, i);
              v93 = v92;
              v94 = (char *)v225;
              if ((unint64_t)v225 >= *((_QWORD *)&v225 + 1))
              {
                v96 = (char *)*((_QWORD *)&v224 + 1);
                v97 = (uint64_t)(v225 - *((_QWORD *)&v224 + 1)) >> 2;
                v98 = v97 + 1;
                if ((unint64_t)(v97 + 1) >> 62)
                  std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
                v99 = *((_QWORD *)&v225 + 1) - *((_QWORD *)&v224 + 1);
                if ((uint64_t)(*((_QWORD *)&v225 + 1) - *((_QWORD *)&v224 + 1)) >> 1 > v98)
                  v98 = v99 >> 1;
                if ((unint64_t)v99 >= 0x7FFFFFFFFFFFFFFCLL)
                  v100 = 0x3FFFFFFFFFFFFFFFLL;
                else
                  v100 = v98;
                if (v100)
                {
                  v101 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>((uint64_t)&v225 + 8, v100);
                  v96 = (char *)*((_QWORD *)&v224 + 1);
                  v94 = (char *)v225;
                }
                else
                {
                  v101 = 0;
                }
                v102 = &v101[4 * v97];
                *(float *)v102 = v93;
                v95 = v102 + 4;
                while (v94 != v96)
                {
                  v103 = *((_DWORD *)v94 - 1);
                  v94 -= 4;
                  *((_DWORD *)v102 - 1) = v103;
                  v102 -= 4;
                }
                *((_QWORD *)&v224 + 1) = v102;
                *(_QWORD *)&v225 = v95;
                *((_QWORD *)&v225 + 1) = &v101[4 * v100];
                if (v96)
                  operator delete(v96);
              }
              else
              {
                *(float *)v225 = v92;
                v95 = v94 + 4;
              }
              *(_QWORD *)&v225 = v95;
              if (!theArray)
              {
                v193 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                std::runtime_error::runtime_error(v193, "Could not construct");
              }
              v104 = applesauce::CF::details::at_to<float>(theArray, i);
              v105 = v104;
              v106 = (char *)*((_QWORD *)&v226 + 1);
              if (*((_QWORD *)&v226 + 1) >= (unint64_t)v227)
              {
                v108 = (char *)v226;
                v109 = (uint64_t)(*((_QWORD *)&v226 + 1) - v226) >> 2;
                v110 = v109 + 1;
                if ((unint64_t)(v109 + 1) >> 62)
                  std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
                v111 = (uint64_t)&v227[-v226];
                if ((uint64_t)&v227[-v226] >> 1 > v110)
                  v110 = v111 >> 1;
                if ((unint64_t)v111 >= 0x7FFFFFFFFFFFFFFCLL)
                  v112 = 0x3FFFFFFFFFFFFFFFLL;
                else
                  v112 = v110;
                if (v112)
                {
                  v113 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>((uint64_t)&v227, v112);
                  v106 = (char *)*((_QWORD *)&v226 + 1);
                  v108 = (char *)v226;
                }
                else
                {
                  v113 = 0;
                }
                v114 = &v113[4 * v109];
                *(float *)v114 = v105;
                v107 = v114 + 4;
                while (v106 != v108)
                {
                  v115 = *((_DWORD *)v106 - 1);
                  v106 -= 4;
                  *((_DWORD *)v114 - 1) = v115;
                  v114 -= 4;
                }
                *(_QWORD *)&v226 = v114;
                *((_QWORD *)&v226 + 1) = v107;
                v227 = &v113[4 * v112];
                if (v108)
                  operator delete(v108);
              }
              else
              {
                **((float **)&v226 + 1) = v104;
                v107 = v106 + 4;
              }
              *((_QWORD *)&v226 + 1) = v107;
            }
          }
          v222 = v45;
        }
      }
      if (theArray)
        CFRelease(theArray);
      if (v210)
        CFRelease(v210);
      if (v211)
        CFRelease(v211);
      if (v212)
        CFRelease(v212);
      if (v213)
        CFRelease(v213);
      if (AUSM::RoomCongruence::UserData::isValid((AUSM::RoomCongruence::UserData *)__src))
      {
        v116 = *((int *)v18 + v19);
        v117 = *(_QWORD *)(a1 + 72);
        if (v117)
        {
          v118 = (uint8x8_t)vcnt_s8((int8x8_t)v117);
          v118.i16[0] = vaddlv_u8(v118);
          if (v118.u32[0] > 1uLL)
          {
            v2 = *((int *)v18 + v19);
            if (v117 <= v116)
              v2 = v116 % v117;
          }
          else
          {
            v2 = (v117 - 1) & v116;
          }
          v119 = (uint64_t **)*((_QWORD *)*v208 + v2);
          if (v119)
          {
            for (j = *v119; j; j = (uint64_t *)*j)
            {
              v121 = j[1];
              if (v121 == v116)
              {
                if (*((_DWORD *)j + 4) == (_DWORD)v116)
                  goto LABEL_315;
              }
              else
              {
                if (v118.u32[0] > 1uLL)
                {
                  if (v121 >= v117)
                    v121 %= v117;
                }
                else
                {
                  v121 &= v117 - 1;
                }
                if (v121 != v2)
                  break;
              }
            }
          }
        }
        v122 = (char *)operator new(0x98uLL);
        *(_QWORD *)&buf = v122;
        *((_QWORD *)&buf + 1) = a1 + 80;
        *(_QWORD *)v122 = 0;
        *((_QWORD *)v122 + 1) = v116;
        *((_DWORD *)v122 + 4) = *((_DWORD *)v18 + v19);
        *(_OWORD *)(v122 + 56) = 0u;
        *(_OWORD *)(v122 + 40) = 0u;
        *(_OWORD *)(v122 + 24) = 0u;
        *((_QWORD *)v122 + 18) = 0;
        *((_OWORD *)v122 + 7) = 0u;
        *((_OWORD *)v122 + 8) = 0u;
        *((_OWORD *)v122 + 5) = 0u;
        *((_OWORD *)v122 + 6) = 0u;
        v234 = 1;
        v123 = (float)(unint64_t)(*(_QWORD *)(a1 + 88) + 1);
        v124 = *(float *)(a1 + 96);
        if (!v117 || (float)(v124 * (float)v117) < v123)
        {
          v125 = (v117 & (v117 - 1)) != 0;
          if (v117 < 3)
            v125 = 1;
          v126 = v125 | (2 * v117);
          v127 = vcvtps_u32_f32(v123 / v124);
          if (v126 <= v127)
            prime = (int8x8_t)v127;
          else
            prime = (int8x8_t)v126;
          if (*(_QWORD *)&prime == 1)
          {
            prime = (int8x8_t)2;
          }
          else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
          {
            prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
            v117 = *(_QWORD *)(a1 + 72);
          }
          if (*(_QWORD *)&prime <= v117)
          {
            if (*(_QWORD *)&prime < v117)
            {
              v135 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 88) / *(float *)(a1 + 96));
              if (v117 < 3
                || (v136 = (uint8x8_t)vcnt_s8((int8x8_t)v117), v136.i16[0] = vaddlv_u8(v136), v136.u32[0] > 1uLL))
              {
                v135 = std::__next_prime(v135);
              }
              else
              {
                v137 = 1 << -(char)__clz(v135 - 1);
                if (v135 >= 2)
                  v135 = v137;
              }
              if (*(_QWORD *)&prime <= v135)
                prime = (int8x8_t)v135;
              if (*(_QWORD *)&prime >= v117)
              {
                v117 = *(_QWORD *)(a1 + 72);
              }
              else
              {
                if (prime)
                  goto LABEL_271;
                v157 = *v208;
                *v208 = 0;
                if (v157)
                  operator delete(v157);
                v117 = 0;
                *(_QWORD *)(a1 + 72) = 0;
              }
            }
          }
          else
          {
LABEL_271:
            if (*(_QWORD *)&prime >> 61)
              std::__throw_bad_array_new_length[abi:ne180100]();
            v129 = operator new(8 * *(_QWORD *)&prime);
            v130 = *v208;
            *v208 = v129;
            if (v130)
              operator delete(v130);
            v131 = 0;
            *(int8x8_t *)(a1 + 72) = prime;
            do
              *((_QWORD *)*v208 + v131++) = 0;
            while (*(_QWORD *)&prime != v131);
            v132 = (_QWORD *)*v207;
            if (*v207)
            {
              v133 = v132[1];
              v134 = (uint8x8_t)vcnt_s8(prime);
              v134.i16[0] = vaddlv_u8(v134);
              if (v134.u32[0] > 1uLL)
              {
                if (v133 >= *(_QWORD *)&prime)
                  v133 %= *(_QWORD *)&prime;
              }
              else
              {
                v133 &= *(_QWORD *)&prime - 1;
              }
              *((_QWORD *)*v208 + v133) = v207;
              v138 = (_QWORD *)*v132;
              if (*v132)
              {
                do
                {
                  v139 = v138[1];
                  if (v134.u32[0] > 1uLL)
                  {
                    if (v139 >= *(_QWORD *)&prime)
                      v139 %= *(_QWORD *)&prime;
                  }
                  else
                  {
                    v139 &= *(_QWORD *)&prime - 1;
                  }
                  if (v139 != v133)
                  {
                    if (!*((_QWORD *)*v208 + v139))
                    {
                      *((_QWORD *)*v208 + v139) = v132;
                      goto LABEL_296;
                    }
                    *v132 = *v138;
                    *v138 = **((_QWORD **)*v208 + v139);
                    **((_QWORD **)*v208 + v139) = v138;
                    v138 = v132;
                  }
                  v139 = v133;
LABEL_296:
                  v132 = v138;
                  v138 = (_QWORD *)*v138;
                  v133 = v139;
                }
                while (v138);
              }
            }
            v117 = (unint64_t)prime;
          }
          if ((v117 & (v117 - 1)) != 0)
          {
            if (v117 <= v116)
              v2 = v116 % v117;
            else
              v2 = v116;
          }
          else
          {
            v2 = (v117 - 1) & v116;
          }
        }
        v140 = (_QWORD *)*((_QWORD *)*v208 + v2);
        j = (uint64_t *)buf;
        if (v140)
        {
          *(_QWORD *)buf = *v140;
          goto LABEL_313;
        }
        *(_QWORD *)buf = *v207;
        *v207 = j;
        *((_QWORD *)*v208 + v2) = v207;
        if (*j)
        {
          v141 = *(_QWORD *)(*j + 8);
          if ((v117 & (v117 - 1)) != 0)
          {
            if (v141 >= v117)
              v141 %= v117;
          }
          else
          {
            v141 &= v117 - 1;
          }
          v140 = (char *)*v208 + 8 * v141;
LABEL_313:
          *v140 = j;
        }
        *(_QWORD *)&buf = 0;
        ++*(_QWORD *)(a1 + 88);
        std::unique_ptr<std::__hash_node<std::__hash_value_type<IR::IRPreset,AUSM::RoomCongruence::UserData>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<IR::IRPreset,AUSM::RoomCongruence::UserData>,void *>>>>::reset[abi:ne180100]((uint64_t *)&buf);
LABEL_315:
        if (j + 3 == (uint64_t *)__src)
        {
          v142 = v222;
          *((float *)j + 18) = v222;
        }
        else
        {
          std::vector<float>::__assign_with_size[abi:ne180100]<float const*,float const*>((char *)j + 24, *(char **)&__src[0], *((uint64_t *)&__src[0] + 1), (uint64_t)(*((_QWORD *)&__src[0] + 1) - *(_QWORD *)&__src[0]) >> 2);
          std::vector<float>::__assign_with_size[abi:ne180100]<float const*,float const*>((char *)j + 48, *((char **)&__src[1] + 1), v221, (uint64_t)(v221 - *((_QWORD *)&__src[1] + 1)) >> 2);
          *((float *)j + 18) = v222;
          std::vector<float>::__assign_with_size[abi:ne180100]<float const*,float const*>((char *)j + 80, (char *)v223, *((uint64_t *)&v223 + 1), (uint64_t)(*((_QWORD *)&v223 + 1) - v223) >> 2);
          std::vector<float>::__assign_with_size[abi:ne180100]<float const*,float const*>((char *)j + 104, *((char **)&v224 + 1), v225, (uint64_t)(v225 - *((_QWORD *)&v224 + 1)) >> 2);
          std::vector<float>::__assign_with_size[abi:ne180100]<float const*,float const*>((char *)j + 128, (char *)v226, *((uint64_t *)&v226 + 1), (uint64_t)(*((_QWORD *)&v226 + 1) - v226) >> 2);
          v142 = v222;
        }
        v143 = *((_DWORD *)v18 + v19);
        v145 = *(_DWORD **)(a1 + 112);
        v144 = *(_QWORD *)(a1 + 120);
        if ((unint64_t)v145 >= v144)
        {
          v147 = (_DWORD *)*v206;
          v148 = ((uint64_t)v145 - *v206) >> 3;
          v149 = v148 + 1;
          if ((unint64_t)(v148 + 1) >> 61)
            std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
          v150 = v144 - (_QWORD)v147;
          if (v150 >> 2 > v149)
            v149 = v150 >> 2;
          if ((unint64_t)v150 >= 0x7FFFFFFFFFFFFFF8)
            v151 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v151 = v149;
          if (v151)
          {
            if (v151 >> 61)
              std::__throw_bad_array_new_length[abi:ne180100]();
            v152 = (char *)operator new(8 * v151);
          }
          else
          {
            v152 = 0;
          }
          v153 = &v152[8 * v148];
          *(_DWORD *)v153 = v143;
          *((float *)v153 + 1) = v142;
          v154 = v153;
          if (v145 != v147)
          {
            do
            {
              v155 = *((_QWORD *)v145 - 1);
              v145 -= 2;
              *((_QWORD *)v154 - 1) = v155;
              v154 -= 8;
            }
            while (v145 != v147);
            v145 = (_DWORD *)*v206;
          }
          v146 = v153 + 8;
          *(_QWORD *)(a1 + 104) = v154;
          *(_QWORD *)(a1 + 112) = v153 + 8;
          *(_QWORD *)(a1 + 120) = &v152[8 * v151];
          if (v145)
            operator delete(v145);
        }
        else
        {
          *v145 = v143;
          *((float *)v145 + 1) = v142;
          v146 = v145 + 2;
        }
        *(_QWORD *)(a1 + 112) = v146;
      }
      AUSM::RoomCongruence::UserData::~UserData((AUSM::RoomCongruence::UserData *)__src);
LABEL_337:
      ++v19;
      v18 = *(IR::IRDataLoader **)(a1 + 40);
      v156 = (uint64_t)(*(_QWORD *)(a1 + 48) - (_QWORD)v18) >> 2;
      if (v156 <= v19)
      {
        v5 = (_QWORD *)(a1 + 40);
        goto LABEL_428;
      }
    }
    if (getAUSMV2Log(void)::onceToken != -1)
      dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_5474);
    v158 = getAUSMV2Log(void)::gLog;
    if (!os_log_type_enabled((os_log_t)getAUSMV2Log(void)::gLog, OS_LOG_TYPE_ERROR))
      goto LABEL_361;
    LODWORD(buf) = 136315138;
    *(_QWORD *)((char *)&buf + 4) = "isIrDataUserDataDictionaryStructurallyValid";
    v159 = v158;
    v160 = "[Room Congruence] %s: IRData User Data invalid - mismatch between queried and actual type of the center frequ"
           "encies value in the dictionary.";
    goto LABEL_360;
  }
  v156 = ((IR::IRDataLoader *)((char *)v11 + v17) - v18) >> 2;
LABEL_428:
  v5[11] = 0;
  v5[12] = 0;
  *(_QWORD *)((char *)v5 + 109) = 0;
  v5[13] = 0;
  *(_WORD *)(a1 + 157) = 1;
  *(_DWORD *)(a1 + 160) = 0;
  if (v156 != *(_QWORD *)(a1 + 88))
  {
    if (getAUSMV2Log(void)::onceToken != -1)
      dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_5474);
    v184 = getAUSMV2Log(void)::gLog;
    if (os_log_type_enabled((os_log_t)getAUSMV2Log(void)::gLog, OS_LOG_TYPE_ERROR))
    {
      v190 = (void *)a1;
      if (*(char *)(a1 + 23) < 0)
        v190 = *(void **)a1;
      LODWORD(__src[0]) = 136315394;
      *(_QWORD *)((char *)__src + 4) = v190;
      WORD6(__src[0]) = 2080;
      *(_QWORD *)((char *)__src + 14) = "Processor";
      _os_log_error_impl(&dword_1B5ED0000, v184, OS_LOG_TYPE_ERROR, "[%s|%s] One or more of the chosen IR Presets does not contain room congruence data or the data is corrupted.", (uint8_t *)__src, 0x16u);
    }
  }
  v185 = *(float **)(a1 + 104);
  v186 = *(float **)(a1 + 112);
  v187 = 126 - 2 * __clz(((char *)v186 - (char *)v185) >> 3);
  if (v186 == v185)
    v188 = 0;
  else
    v188 = v187;
  std::__introsort<std::_ClassicAlgPolicy,AUSM::RoomCongruence::Processor::Processor(std::string const&)::$_0 &,std::pair<IR::IRPreset,float> *,false>(v185, v186, v188, 1);
  if (cf)
    CFRelease(cf);
  return a1;
}

void sub_1B6395658(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, AUSM::RoomCongruence::Cache *a9, void **a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void **a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,const void *a30,const void *a31,const void *a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,void *a37)
{
  uint64_t v37;
  uint64_t v38;
  void *v40;
  void *v41;

  applesauce::CF::ArrayRef::~ArrayRef(&a32);
  std::__optional_destruct_base<applesauce::CF::ArrayRef,false>::~__optional_destruct_base[abi:ne180100](v38 - 192);
  std::__optional_destruct_base<applesauce::CF::ArrayRef,false>::~__optional_destruct_base[abi:ne180100](v38 - 176);
  std::__optional_destruct_base<applesauce::CF::ArrayRef,false>::~__optional_destruct_base[abi:ne180100](v38 - 160);
  std::__optional_destruct_base<applesauce::CF::ArrayRef,false>::~__optional_destruct_base[abi:ne180100](v38 - 144);
  std::__optional_destruct_base<applesauce::CF::ArrayRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&a37);
  applesauce::CF::DictionaryRef::~DictionaryRef(&a30);
  applesauce::CF::DictionaryRef::~DictionaryRef(&a31);
  AUSM::RoomCongruence::Cache::~Cache(a9);
  v40 = *a16;
  if (*a16)
  {
    *(_QWORD *)(v37 + 112) = v40;
    operator delete(v40);
  }
  std::__hash_table<std::__hash_value_type<IR::IRPreset,AUSM::RoomCongruence::UserData>,std::__unordered_map_hasher<IR::IRPreset,std::__hash_value_type<IR::IRPreset,AUSM::RoomCongruence::UserData>,std::hash<IR::IRPreset>,std::equal_to<IR::IRPreset>,true>,std::__unordered_map_equal<IR::IRPreset,std::__hash_value_type<IR::IRPreset,AUSM::RoomCongruence::UserData>,std::equal_to<IR::IRPreset>,std::hash<IR::IRPreset>,true>,std::allocator<std::__hash_value_type<IR::IRPreset,AUSM::RoomCongruence::UserData>>>::~__hash_table(a24);
  v41 = *a10;
  if (*a10)
  {
    *(_QWORD *)(v37 + 48) = v41;
    operator delete(v41);
  }
  if (*(char *)(v37 + 23) < 0)
    operator delete(*(void **)v37);
  _Unwind_Resume(a1);
}

void AUSM::RoomCongruence::UserData::~UserData(AUSM::RoomCongruence::UserData *this)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  v2 = (void *)*((_QWORD *)this + 13);
  if (v2)
  {
    *((_QWORD *)this + 14) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 10);
  if (v3)
  {
    *((_QWORD *)this + 11) = v3;
    operator delete(v3);
  }
  v4 = (void *)*((_QWORD *)this + 7);
  if (v4)
  {
    *((_QWORD *)this + 8) = v4;
    operator delete(v4);
  }
  v5 = (void *)*((_QWORD *)this + 3);
  if (v5)
  {
    *((_QWORD *)this + 4) = v5;
    operator delete(v5);
  }
  v6 = *(void **)this;
  if (*(_QWORD *)this)
  {
    *((_QWORD *)this + 1) = v6;
    operator delete(v6);
  }
}

float *std::__introsort<std::_ClassicAlgPolicy,AUSM::RoomCongruence::Processor::Processor(std::string const&)::$_0 &,std::pair<IR::IRPreset,float> *,false>(float *result, float *a2, uint64_t a3, char a4)
{
  float *v7;
  float *v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  float *v12;
  float v13;
  int v14;
  float v15;
  float v16;
  float *v17;
  float *v18;
  float *v19;
  float *v20;
  float v21;
  float *v22;
  float v23;
  float *v24;
  float v25;
  int v26;
  float v27;
  float v28;
  BOOL v29;
  float *v30;
  float v31;
  float *v32;
  float v33;
  float *v34;
  float *v35;
  float v36;
  float v37;
  float v38;
  int v39;
  float v40;
  float v41;
  float v42;
  float v43;
  float v44;
  float v45;
  float v46;
  int v47;
  float v48;
  float v49;
  int v50;
  int v51;
  float v52;
  int v53;
  float v54;
  float v55;
  float *v56;
  BOOL v58;
  uint64_t v59;
  float *v60;
  float v61;
  float v62;
  float v63;
  uint64_t v64;
  float *v65;
  uint64_t v66;
  int64_t v67;
  int64_t v68;
  int64_t v69;
  uint64_t v70;
  float *v71;
  float v72;
  float v73;
  float *v74;
  int v75;
  float *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  float v81;
  int v82;
  float *v83;
  float *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  unint64_t v88;
  float v89;
  float v90;
  int v91;
  unint64_t v92;
  float *v93;
  float *v95;
  float v96;
  float v97;
  float v98;
  float *v99;
  float v100;

  v7 = result;
LABEL_2:
  v8 = v7;
  while (2)
  {
    v7 = v8;
    v9 = (char *)a2 - (char *)v8;
    v10 = ((char *)a2 - (char *)v8) >> 3;
    switch(v10)
    {
      case 0uLL:
      case 1uLL:
        return result;
      case 2uLL:
        v42 = *(a2 - 1);
        v43 = v8[1];
        if (v42 < v43)
        {
          v44 = *v8;
          *v8 = *(a2 - 2);
          *(a2 - 2) = v44;
          v8[1] = v42;
          *(a2 - 1) = v43;
        }
        return result;
      case 3uLL:
        return std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,AUSM::RoomCongruence::Processor::Processor(std::string const&)::$_0 &,std::pair<IR::IRPreset,float> *>(v8, v8 + 2, a2 - 2);
      case 4uLL:
        return std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,AUSM::RoomCongruence::Processor::Processor(std::string const&)::$_0 &,std::pair<IR::IRPreset,float> *>(v8, v8 + 2, v8 + 4, a2 - 2);
      case 5uLL:
        result = std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,AUSM::RoomCongruence::Processor::Processor(std::string const&)::$_0 &,std::pair<IR::IRPreset,float> *>(v8, v8 + 2, v8 + 4, v8 + 6);
        v45 = *(a2 - 1);
        v46 = v8[7];
        if (v45 < v46)
        {
          v47 = *((_DWORD *)v8 + 6);
          v8[6] = *(a2 - 2);
          *((_DWORD *)a2 - 2) = v47;
          v8[7] = v45;
          *(a2 - 1) = v46;
          v48 = v8[7];
          v49 = v8[5];
          if (v48 < v49)
          {
            v50 = *((_DWORD *)v8 + 4);
            v51 = *((_DWORD *)v8 + 6);
            *((_DWORD *)v8 + 4) = v51;
            *((_DWORD *)v8 + 6) = v50;
            v8[5] = v48;
            v8[7] = v49;
            v52 = v8[3];
            if (v48 < v52)
            {
              v53 = *((_DWORD *)v8 + 2);
              *((_DWORD *)v8 + 2) = v51;
              *((_DWORD *)v8 + 4) = v53;
              v8[3] = v48;
              v8[5] = v52;
              v54 = v8[1];
              if (v48 < v54)
              {
                v55 = *v8;
                *(_DWORD *)v8 = v51;
                v8[2] = v55;
                v8[1] = v48;
                v8[3] = v54;
              }
            }
          }
        }
        return result;
      default:
        if (v9 <= 191)
        {
          v56 = v8 + 2;
          v58 = v8 == a2 || v56 == a2;
          if ((a4 & 1) != 0)
          {
            if (!v58)
            {
              v59 = 0;
              v60 = v8;
              do
              {
                v61 = v60[3];
                v62 = v60[1];
                v60 = v56;
                if (v61 < v62)
                {
                  v63 = *v56;
                  v64 = v59;
                  while (1)
                  {
                    v65 = (float *)((char *)v8 + v64);
                    v65[2] = *(float *)((char *)v8 + v64);
                    v65[3] = *(float *)((char *)v8 + v64 + 4);
                    if (!v64)
                      break;
                    v64 -= 8;
                    if (v61 >= *(v65 - 1))
                    {
                      v66 = (uint64_t)v8 + v64 + 8;
                      goto LABEL_80;
                    }
                  }
                  v66 = (uint64_t)v8;
LABEL_80:
                  *(float *)v66 = v63;
                  *(float *)(v66 + 4) = v61;
                }
                v56 = v60 + 2;
                v59 += 8;
              }
              while (v60 + 2 != a2);
            }
          }
          else if (!v58)
          {
            v95 = v8 + 1;
            do
            {
              v96 = v7[3];
              v97 = v7[1];
              v7 = v56;
              if (v96 < v97)
              {
                v98 = *v56;
                v99 = v95;
                do
                {
                  v99[1] = *(v99 - 1);
                  v99[2] = *v99;
                  v100 = *(v99 - 2);
                  v99 -= 2;
                }
                while (v96 < v100);
                v99[1] = v98;
                v99[2] = v96;
              }
              v56 = v7 + 2;
              v95 += 2;
            }
            while (v7 + 2 != a2);
          }
          return result;
        }
        if (!a3)
        {
          if (v8 != a2)
          {
            v67 = (v10 - 2) >> 1;
            v68 = v67;
            do
            {
              v69 = v68;
              if (v67 >= v68)
              {
                v70 = (2 * v68) | 1;
                v71 = &v8[2 * v70];
                if (2 * v69 + 2 < (uint64_t)v10 && v71[1] < v71[3])
                {
                  v71 += 2;
                  v70 = 2 * v69 + 2;
                }
                v72 = v71[1];
                v73 = v8[2 * v69 + 1];
                if (v72 >= v73)
                {
                  v74 = &v8[2 * v69];
                  v75 = *(_DWORD *)v74;
                  do
                  {
                    v76 = v74;
                    v74 = v71;
                    *v76 = *v71;
                    v76[1] = v72;
                    if (v67 < v70)
                      break;
                    v77 = 2 * v70;
                    v70 = (2 * v70) | 1;
                    v71 = &v8[2 * v70];
                    v78 = v77 + 2;
                    if (v78 < (uint64_t)v10 && v71[1] < v71[3])
                    {
                      v71 += 2;
                      v70 = v78;
                    }
                    v72 = v71[1];
                  }
                  while (v72 >= v73);
                  *(_DWORD *)v74 = v75;
                  v74[1] = v73;
                }
              }
              v68 = v69 - 1;
            }
            while (v69);
            v79 = (unint64_t)v9 >> 3;
            do
            {
              v80 = 0;
              v81 = *v8;
              v82 = *((_DWORD *)v8 + 1);
              v83 = v8;
              do
              {
                v84 = v83;
                v83 += 2 * v80 + 2;
                v85 = 2 * v80;
                v80 = (2 * v80) | 1;
                v86 = v85 + 2;
                if (v86 < v79 && v83[1] < v83[3])
                {
                  v83 += 2;
                  v80 = v86;
                }
                *v84 = *v83;
                v84[1] = v83[1];
              }
              while (v80 <= (uint64_t)((unint64_t)(v79 - 2) >> 1));
              if (v83 == a2 - 2)
              {
                *v83 = v81;
                *((_DWORD *)v83 + 1) = v82;
              }
              else
              {
                *v83 = *(a2 - 2);
                v83[1] = *(a2 - 1);
                *(a2 - 2) = v81;
                *((_DWORD *)a2 - 1) = v82;
                v87 = (char *)v83 - (char *)v8 + 8;
                if (v87 >= 9)
                {
                  v88 = (((unint64_t)v87 >> 3) - 2) >> 1;
                  v89 = v8[2 * v88 + 1];
                  v90 = v83[1];
                  if (v89 < v90)
                  {
                    v91 = *(_DWORD *)v83;
                    do
                    {
                      v92 = v88;
                      v93 = v83;
                      v83 = &v8[2 * v92];
                      *v93 = *v83;
                      v93[1] = v89;
                      if (!v92)
                        break;
                      v88 = (v92 - 1) >> 1;
                      v89 = v8[2 * v88 + 1];
                    }
                    while (v89 < v90);
                    *(_DWORD *)v83 = v91;
                    v8[2 * v92 + 1] = v90;
                  }
                }
              }
              a2 -= 2;
            }
            while (v79-- > 2);
          }
          return result;
        }
        v11 = v10 >> 1;
        v12 = &v8[2 * (v10 >> 1)];
        if ((unint64_t)v9 < 0x401)
        {
          result = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,AUSM::RoomCongruence::Processor::Processor(std::string const&)::$_0 &,std::pair<IR::IRPreset,float> *>(&v7[2 * (v10 >> 1)], v7, a2 - 2);
        }
        else
        {
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,AUSM::RoomCongruence::Processor::Processor(std::string const&)::$_0 &,std::pair<IR::IRPreset,float> *>(v7, &v7[2 * (v10 >> 1)], a2 - 2);
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,AUSM::RoomCongruence::Processor::Processor(std::string const&)::$_0 &,std::pair<IR::IRPreset,float> *>(v7 + 2, v12 - 2, a2 - 4);
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,AUSM::RoomCongruence::Processor::Processor(std::string const&)::$_0 &,std::pair<IR::IRPreset,float> *>(v7 + 4, &v7[2 * v11 + 2], a2 - 6);
          result = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,AUSM::RoomCongruence::Processor::Processor(std::string const&)::$_0 &,std::pair<IR::IRPreset,float> *>(v12 - 2, v12, &v7[2 * v11 + 2]);
          v13 = *v7;
          *v7 = *v12;
          *v12 = v13;
          v14 = *((_DWORD *)v7 + 1);
          v7[1] = v12[1];
          *((_DWORD *)v12 + 1) = v14;
        }
        --a3;
        if ((a4 & 1) == 0)
        {
          v15 = v7[1];
          if (*(v7 - 1) < v15)
            goto LABEL_12;
          if (v15 >= *(a2 - 1))
          {
            v32 = v7 + 2;
            do
            {
              v8 = v32;
              if (v32 >= a2)
                break;
              v33 = v32[1];
              v32 += 2;
            }
            while (v15 >= v33);
          }
          else
          {
            v30 = v7;
            do
            {
              v8 = v30 + 2;
              v31 = v30[3];
              v30 += 2;
            }
            while (v15 >= v31);
          }
          v34 = a2;
          if (v8 < a2)
          {
            v35 = a2;
            do
            {
              v34 = v35 - 2;
              v36 = *(v35 - 1);
              v35 -= 2;
            }
            while (v15 < v36);
          }
          v37 = *v7;
          while (v8 < v34)
          {
            v38 = *v8;
            *v8 = *v34;
            *v34 = v38;
            v39 = *((_DWORD *)v8 + 1);
            v8[1] = v34[1];
            *((_DWORD *)v34 + 1) = v39;
            do
            {
              v40 = v8[3];
              v8 += 2;
            }
            while (v15 >= v40);
            do
            {
              v41 = *(v34 - 1);
              v34 -= 2;
            }
            while (v15 < v41);
          }
          if (v8 - 2 != v7)
          {
            *v7 = *(v8 - 2);
            v7[1] = *(v8 - 1);
          }
          a4 = 0;
          *(v8 - 2) = v37;
          *(v8 - 1) = v15;
          continue;
        }
        v15 = v7[1];
LABEL_12:
        v16 = *v7;
        v17 = v7;
        do
        {
          v18 = v17;
          v17 += 2;
        }
        while (v18[3] < v15);
        v19 = a2;
        if (v18 == v7)
        {
          v22 = a2;
          while (v17 < v22)
          {
            v20 = v22 - 2;
            v23 = *(v22 - 1);
            v22 -= 2;
            if (v23 < v15)
              goto LABEL_22;
          }
          v20 = v22;
        }
        else
        {
          do
          {
            v20 = v19 - 2;
            v21 = *(v19 - 1);
            v19 -= 2;
          }
          while (v21 >= v15);
        }
LABEL_22:
        v8 = v17;
        if (v17 < v20)
        {
          v24 = v20;
          do
          {
            v25 = *v8;
            *v8 = *v24;
            *v24 = v25;
            v26 = *((_DWORD *)v8 + 1);
            v8[1] = v24[1];
            *((_DWORD *)v24 + 1) = v26;
            do
            {
              v27 = v8[3];
              v8 += 2;
            }
            while (v27 < v15);
            do
            {
              v28 = *(v24 - 1);
              v24 -= 2;
            }
            while (v28 >= v15);
          }
          while (v8 < v24);
        }
        if (v8 - 2 != v7)
        {
          *v7 = *(v8 - 2);
          v7[1] = *(v8 - 1);
        }
        *(v8 - 2) = v16;
        *(v8 - 1) = v15;
        if (v17 < v20)
        {
LABEL_33:
          result = (float *)std::__introsort<std::_ClassicAlgPolicy,AUSM::RoomCongruence::Processor::Processor(std::string const&)::$_0 &,std::pair<IR::IRPreset,float> *,false>(v7, v8 - 2, a3, a4 & 1);
          a4 = 0;
          continue;
        }
        v29 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,AUSM::RoomCongruence::Processor::Processor(std::string const&)::$_0 &,std::pair<IR::IRPreset,float> *>(v7, v8 - 2);
        result = (float *)std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,AUSM::RoomCongruence::Processor::Processor(std::string const&)::$_0 &,std::pair<IR::IRPreset,float> *>(v8, a2);
        if (!(_DWORD)result)
        {
          if (v29)
            continue;
          goto LABEL_33;
        }
        a2 = v8 - 2;
        if (!v29)
          goto LABEL_2;
        return result;
    }
  }
}

uint64_t std::__hash_table<std::__hash_value_type<IR::IRPreset,AUSM::RoomCongruence::UserData>,std::__unordered_map_hasher<IR::IRPreset,std::__hash_value_type<IR::IRPreset,AUSM::RoomCongruence::UserData>,std::hash<IR::IRPreset>,std::equal_to<IR::IRPreset>,true>,std::__unordered_map_equal<IR::IRPreset,std::__hash_value_type<IR::IRPreset,AUSM::RoomCongruence::UserData>,std::equal_to<IR::IRPreset>,std::hash<IR::IRPreset>,true>,std::allocator<std::__hash_value_type<IR::IRPreset,AUSM::RoomCongruence::UserData>>>::~__hash_table(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;

  v2 = *(_QWORD **)(a1 + 16);
  if (v2)
  {
    do
    {
      v3 = (_QWORD *)*v2;
      AUSM::RoomCongruence::UserData::~UserData((AUSM::RoomCongruence::UserData *)(v2 + 3));
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
  v4 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v4)
    operator delete(v4);
  return a1;
}

float *std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,AUSM::RoomCongruence::Processor::Processor(std::string const&)::$_0 &,std::pair<IR::IRPreset,float> *>(float *result, float *a2, float *a3)
{
  float v3;
  float v4;
  float v5;
  float v6;
  float v7;
  float v8;
  float v9;
  float v10;
  float v11;

  v3 = a2[1];
  v4 = result[1];
  v5 = a3[1];
  if (v3 >= v4)
  {
    if (v5 < v3)
    {
      v7 = *a2;
      *a2 = *a3;
      *a3 = v7;
      a2[1] = v5;
      a3[1] = v3;
      v8 = a2[1];
      v9 = result[1];
      if (v8 < v9)
      {
        v10 = *result;
        *result = *a2;
        *a2 = v10;
        result[1] = v8;
        a2[1] = v9;
      }
    }
  }
  else
  {
    v6 = *result;
    if (v5 >= v3)
    {
      *result = *a2;
      *a2 = v6;
      result[1] = v3;
      a2[1] = v4;
      v11 = a3[1];
      if (v11 >= v4)
        return result;
      *a2 = *a3;
      *a3 = v6;
      a2[1] = v11;
    }
    else
    {
      *result = *a3;
      *a3 = v6;
      result[1] = v5;
    }
    a3[1] = v4;
  }
  return result;
}

float *std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,AUSM::RoomCongruence::Processor::Processor(std::string const&)::$_0 &,std::pair<IR::IRPreset,float> *>(float *a1, float *a2, float *a3, float *a4)
{
  float *result;
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;
  float v14;
  float v15;
  float v16;
  float v17;

  result = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,AUSM::RoomCongruence::Processor::Processor(std::string const&)::$_0 &,std::pair<IR::IRPreset,float> *>(a1, a2, a3);
  v9 = a4[1];
  v10 = a3[1];
  if (v9 < v10)
  {
    v11 = *a3;
    *a3 = *a4;
    *a4 = v11;
    a3[1] = v9;
    a4[1] = v10;
    v12 = a3[1];
    v13 = a2[1];
    if (v12 < v13)
    {
      v14 = *a2;
      *a2 = *a3;
      *a3 = v14;
      a2[1] = v12;
      a3[1] = v13;
      v15 = a2[1];
      v16 = a1[1];
      if (v15 < v16)
      {
        v17 = *a1;
        *a1 = *a2;
        *a2 = v17;
        a1[1] = v15;
        a2[1] = v16;
      }
    }
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,AUSM::RoomCongruence::Processor::Processor(std::string const&)::$_0 &,std::pair<IR::IRPreset,float> *>(float *a1, float *a2)
{
  uint64_t v4;
  _BOOL8 result;
  float v6;
  float v7;
  float v8;
  float *v9;
  float *v10;
  uint64_t v11;
  int v12;
  float v13;
  int v14;
  uint64_t v15;
  float *v16;
  uint64_t v17;
  float v18;
  float v19;
  int v20;
  float v21;
  float v22;
  int v23;
  int v24;
  float v25;
  int v26;
  float v27;
  float v28;

  v4 = ((char *)a2 - (char *)a1) >> 3;
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v6 = *(a2 - 1);
      v7 = a1[1];
      if (v6 < v7)
      {
        v8 = *a1;
        *a1 = *(a2 - 2);
        *(a2 - 2) = v8;
        a1[1] = v6;
        *(a2 - 1) = v7;
      }
      return result;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,AUSM::RoomCongruence::Processor::Processor(std::string const&)::$_0 &,std::pair<IR::IRPreset,float> *>(a1, a1 + 2, a2 - 2);
      return 1;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,AUSM::RoomCongruence::Processor::Processor(std::string const&)::$_0 &,std::pair<IR::IRPreset,float> *>(a1, a1 + 2, a1 + 4, a2 - 2);
      return 1;
    case 5:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,AUSM::RoomCongruence::Processor::Processor(std::string const&)::$_0 &,std::pair<IR::IRPreset,float> *>(a1, a1 + 2, a1 + 4, a1 + 6);
      v18 = *(a2 - 1);
      v19 = a1[7];
      if (v18 < v19)
      {
        v20 = *((_DWORD *)a1 + 6);
        a1[6] = *(a2 - 2);
        *((_DWORD *)a2 - 2) = v20;
        a1[7] = v18;
        *(a2 - 1) = v19;
        v21 = a1[7];
        v22 = a1[5];
        if (v21 < v22)
        {
          v23 = *((_DWORD *)a1 + 4);
          v24 = *((_DWORD *)a1 + 6);
          *((_DWORD *)a1 + 4) = v24;
          *((_DWORD *)a1 + 6) = v23;
          a1[5] = v21;
          a1[7] = v22;
          v25 = a1[3];
          if (v21 < v25)
          {
            v26 = *((_DWORD *)a1 + 2);
            *((_DWORD *)a1 + 2) = v24;
            *((_DWORD *)a1 + 4) = v26;
            a1[3] = v21;
            a1[5] = v25;
            v27 = a1[1];
            if (v21 < v27)
            {
              v28 = *a1;
              *(_DWORD *)a1 = v24;
              a1[2] = v28;
              a1[1] = v21;
              a1[3] = v27;
            }
          }
        }
      }
      return 1;
    default:
      v9 = a1 + 4;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,AUSM::RoomCongruence::Processor::Processor(std::string const&)::$_0 &,std::pair<IR::IRPreset,float> *>(a1, a1 + 2, a1 + 4);
      v10 = a1 + 6;
      if (a1 + 6 == a2)
        return 1;
      v11 = 0;
      v12 = 0;
      break;
  }
  while (1)
  {
    v13 = v10[1];
    if (v13 < v9[1])
    {
      v14 = *(_DWORD *)v10;
      v15 = v11;
      while (1)
      {
        v16 = (float *)((char *)a1 + v15);
        v16[6] = *(float *)((char *)a1 + v15 + 16);
        v16[7] = *(float *)((char *)a1 + v15 + 20);
        if (v15 == -16)
          break;
        v15 -= 8;
        if (v13 >= v16[3])
        {
          v17 = (uint64_t)a1 + v15 + 24;
          goto LABEL_13;
        }
      }
      v17 = (uint64_t)a1;
LABEL_13:
      *(_DWORD *)v17 = v14;
      *(float *)(v17 + 4) = v13;
      if (++v12 == 8)
        return v10 + 2 == a2;
    }
    v9 = v10;
    v11 += 8;
    v10 += 2;
    if (v10 == a2)
      return 1;
  }
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<IR::IRPreset,AUSM::RoomCongruence::UserData>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<IR::IRPreset,AUSM::RoomCongruence::UserData>,void *>>>>::reset[abi:ne180100](uint64_t *a1)
{
  uint64_t v1;

  v1 = *a1;
  *a1 = 0;
  if (v1)
  {
    if (*((_BYTE *)a1 + 16))
      AUSM::RoomCongruence::UserData::~UserData((AUSM::RoomCongruence::UserData *)(v1 + 24));
    operator delete((void *)v1);
  }
}

void ASAFeaturesDSPChain::~ASAFeaturesDSPChain(ASAFeaturesDSPChain *this)
{
  ASAFeaturesDSPChain::~ASAFeaturesDSPChain(this);
  JUMPOUT(0x1BCC95CECLL);
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  *(_QWORD *)this = &off_1E69D7928;
  ASAFeaturesDSPChain::Uninitialize(this);
  v2 = *((_QWORD *)this + 35);
  *((_QWORD *)this + 35) = 0;
  if (v2)
    std::default_delete<std::vector<unsigned int>>::operator()[abi:ne180100](v2);
  v3 = *((_QWORD *)this + 34);
  *((_QWORD *)this + 34) = 0;
  if (v3)
    std::default_delete<std::vector<float>>::operator()[abi:ne180100](v3);
  v4 = *((_QWORD *)this + 33);
  *((_QWORD *)this + 33) = 0;
  if (v4)
    std::default_delete<std::vector<float>>::operator()[abi:ne180100](v4);
  std::unique_ptr<FeatureSelection>::reset[abi:ne180100]((uint64_t *)this + 31, 0);
  std::unique_ptr<ASAFeatures>::reset[abi:ne180100]((uint64_t *)this + 30, 0);
  std::unique_ptr<ASAFrontEnd>::reset[abi:ne180100]((uint64_t **)this + 29, 0);
  v5 = *((_QWORD *)this + 28);
  *((_QWORD *)this + 28) = 0;
  if (v5)
    MEMORY[0x1BCC95CEC](v5, 0x1000C4027586B93);
  v6 = *((_QWORD *)this + 27);
  *((_QWORD *)this + 27) = 0;
  if (v6)
    MEMORY[0x1BCC95CEC](v6, 0x80C408F261F10);
  v7 = *((_QWORD *)this + 26);
  *((_QWORD *)this + 26) = 0;
  if (v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  v8 = *((_QWORD *)this + 25);
  *((_QWORD *)this + 25) = 0;
  if (v8)
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  v9 = *((_QWORD *)this + 24);
  *((_QWORD *)this + 24) = 0;
  if (v9)
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  v10 = *((_QWORD *)this + 23);
  *((_QWORD *)this + 23) = 0;
  if (v10)
    (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  v11 = *((_QWORD *)this + 22);
  *((_QWORD *)this + 22) = 0;
  if (v11)
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  v12 = *((_QWORD *)this + 21);
  *((_QWORD *)this + 21) = 0;
  if (v12)
    (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
  v13 = *((_QWORD *)this + 20);
  *((_QWORD *)this + 20) = 0;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v14 = *((_QWORD *)this + 19);
  *((_QWORD *)this + 19) = 0;
  if (v14)
    (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
  v15 = *((_QWORD *)this + 18);
  *((_QWORD *)this + 18) = 0;
  if (v15)
    (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
  v16 = *((_QWORD *)this + 17);
  *((_QWORD *)this + 17) = 0;
  if (v16)
    (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
  v17 = *((_QWORD *)this + 16);
  *((_QWORD *)this + 16) = 0;
  if (v17)
    (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
  v18 = *((_QWORD *)this + 15);
  *((_QWORD *)this + 15) = 0;
  if (v18)
    (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
  v19 = *((_QWORD *)this + 14);
  *((_QWORD *)this + 14) = 0;
  if (v19)
    (*(void (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
  v20 = *((_QWORD *)this + 13);
  *((_QWORD *)this + 13) = 0;
  if (v20)
    (*(void (**)(uint64_t))(*(_QWORD *)v20 + 8))(v20);
  v21 = *((_QWORD *)this + 12);
  *((_QWORD *)this + 12) = 0;
  if (v21)
    (*(void (**)(uint64_t))(*(_QWORD *)v21 + 8))(v21);
  v22 = *((_QWORD *)this + 11);
  *((_QWORD *)this + 11) = 0;
  if (v22)
    (*(void (**)(uint64_t))(*(_QWORD *)v22 + 8))(v22);
  v23 = *((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = 0;
  if (v23)
    MEMORY[0x1BCC95CEC](v23, 0x1000C40451B5BE8);
  v24 = *((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v24)
    MEMORY[0x1BCC95CEC](v24, 0x1000C40451B5BE8);
  std::unique_ptr<ASAPreprocessor>::reset[abi:ne180100]((uint64_t *)this + 8, 0);
  v25 = *((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (v25)
    MEMORY[0x1BCC95CEC](v25, 0x1000C400A747E1ELL);
}

uint64_t ASAFeaturesDSPChain::Initialize(uint64_t a1, uint64_t a2, const __CFDictionary *a3)
{
  int v6;
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  const __CFNumber *Value;
  const __CFNumber *v11;
  const __CFNumber *v12;
  unsigned int v13;
  double v14;
  double v15;
  int v16;
  uint64_t v17;
  double v18;
  uint64_t v19;
  double v20;
  _QWORD *v21;
  float v22;
  float v23;
  float v24;
  long double v25;
  double v26;
  float v27;
  double v28;
  size_t v29;
  char *v30;
  char *v31;
  float *v32;
  float *v33;
  char *v34;
  char *v35;
  float v36;
  float v37;
  float v38;
  unint64_t v39;
  double *v40;
  uint64_t v41;
  float v42;
  float v43;
  double v44;
  double v45;
  float v46;
  float v47;
  const __CFNumber *v48;
  unsigned int v49;
  unsigned int v50;
  int v51;
  unsigned int v52;
  int v53;
  _DWORD *v54;
  int v55;
  uint64_t v56;
  _DWORD *v57;
  int v58;
  uint64_t v59;
  const __CFDictionary *v60;
  const __CFDictionary *v61;
  const __CFDictionary *v62;
  const __CFNumber *v63;
  const __CFNumber *v64;
  const __CFNumber *v65;
  const __CFNumber *v66;
  const __CFNumber *v67;
  double v68;
  int v69;
  int v70;
  int v71;
  int v72;
  int v73;
  int v74;
  int v75;
  float v76;
  double v77;
  uint64_t v78;
  float v79;
  float v80;
  uint32x2_t v81;
  uint64_t v82;
  void *v83;
  void *v84;
  uint64_t v85;
  void *v86;
  void *v87;
  uint64_t v88;
  void *v89;
  void *v90;
  uint64_t v91;
  void *v92;
  void *v93;
  uint64_t v94;
  void *v95;
  void *v96;
  uint64_t v97;
  void *v98;
  void *v99;
  uint64_t v100;
  void *v101;
  void *v102;
  uint64_t v103;
  void *v104;
  void *v105;
  uint64_t v106;
  void *v107;
  void *v108;
  uint64_t v109;
  void *v110;
  void *v111;
  uint64_t v112;
  void *v113;
  void *v114;
  uint64_t v115;
  void *v116;
  void *v117;
  uint64_t v118;
  void *v119;
  void *v120;
  uint64_t v121;
  uint64_t v122;
  float v123;
  uint64x2_t v124;
  int64x2_t v125;
  uint64_t v126;
  uint64_t v127;
  int64x2_t v128;
  int32x2_t v129;
  float *v130;
  uint64_t v131;
  double v132;
  _QWORD *v133;
  float v134;
  uint64_t v135;
  float v136;
  float v137;
  uint64_t v138;
  float *v139;
  float v140;
  uint64_t v141;
  uint64_t v142;
  double *v143;
  double *v144;
  float v145;
  uint64_t v146;
  uint64_t v147;
  double v148;
  double v149;
  double v150;
  uint64_t v151;
  double *v152;
  long double *v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  double v157;
  double v158;
  double v159;
  uint64_t v160;
  float *v161;
  float *v162;
  double v163;
  uint64_t v164;
  double v165;
  BOOL v167;
  double v168;
  float v169;
  uint64_t v170;
  float v171;
  uint64_t v172;
  double *v173;
  double *v174;
  uint64_t v176;
  double *v177;
  double *v178;
  vDSP_Length v179;
  vDSP_Length v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  float *v184;
  double *v185;
  double v186;
  float v187;
  int32x2_t v188;
  double v189;
  int32x2_t v190;
  double v191;
  uint64_t v192;
  uint64_t v193;
  float v194;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64x2_t v203;
  int64x2_t v204;
  double v205;
  float v206;
  float v207;
  unsigned int **v208;
  uint64_t v209;
  uint64_t v210;
  unsigned int *v211;
  uint64_t v212;
  void *v213;
  void *v214;
  uint64_t v215;
  void *v216;
  void *v217;
  uint64_t v218;
  void *v219;
  void *v220;
  uint64_t v221;
  void *v222;
  void *v223;
  uint64_t v224;
  void *v225;
  void *v226;
  uint64_t v227;
  void *v228;
  void *v229;
  uint64_t v230;
  void *v231;
  void *v232;
  uint64_t v233;
  void *v234;
  void *v235;
  uint64_t v236;
  void *v237;
  void *v238;
  uint64_t v239;
  void *v240;
  void *v241;
  uint64_t v242;
  void *v243;
  void *v244;
  uint64_t v245;
  void *v246;
  void *v247;
  uint64_t v248;
  __int128 v249;
  uint64_t v250;
  const __CFNumber *v251;
  const __CFNumber *v252;
  const __CFNumber *v253;
  const __CFNumber *v254;
  const __CFNumber *v255;
  const __CFNumber *v256;
  const __CFNumber *v257;
  const __CFNumber *v258;
  const __CFNumber *v259;
  const __CFNumber *v260;
  const __CFNumber *v261;
  const __CFNumber *v262;
  const __CFNumber *v263;
  const __CFNumber *v264;
  const __CFNumber *v265;
  const __CFNumber *v266;
  const __CFNumber *v267;
  const __CFNumber *v268;
  const __CFNumber *v269;
  const __CFNumber *v270;
  const __CFNumber *v271;
  const __CFNumber *v272;
  const __CFNumber *v273;
  const __CFNumber *v274;
  const __CFNumber *v275;
  const __CFNumber *v276;
  const __CFNumber *v277;
  const __CFNumber *v278;
  const __CFNumber *v279;
  const __CFNumber *v280;
  const __CFNumber *v281;
  const __CFNumber *v282;
  const __CFNumber *v283;
  const __CFNumber *v284;
  const __CFNumber *v285;
  const __CFNumber *v286;
  const __CFNumber *v287;
  const __CFNumber *v288;
  const __CFNumber *v289;
  const __CFNumber *v290;
  const __CFNumber *v291;
  const __CFNumber *v292;
  const __CFNumber *v293;
  const __CFNumber *v294;
  const __CFNumber *v295;
  const __CFNumber *v296;
  const __CFNumber *v297;
  const __CFNumber *v298;
  const __CFNumber *v299;
  _QWORD *v300;
  unsigned int *v301;
  unint64_t v302;
  unsigned int v303;
  unint64_t v304;
  unsigned int *v305;
  uint64_t v306;
  unint64_t v307;
  unsigned int v308;
  _DWORD *v309;
  unint64_t v310;
  unint64_t v311;
  _QWORD *v312;
  unsigned int v313;
  const __CFNumber *v314;
  const __CFNumber *v315;
  const __CFNumber *v316;
  const __CFNumber *v317;
  const __CFNumber *v318;
  const __CFNumber *v319;
  const __CFNumber *v320;
  const __CFNumber *v321;
  const __CFNumber *v322;
  const __CFNumber *v323;
  const __CFNumber *v324;
  const __CFNumber *v325;
  uint64_t v326;
  float v327;
  float v328;
  uint32x2_t *v329;
  float v330;
  float v331;
  float v332;
  float v333;
  __int32 v334;
  uint32x2_t v335;
  uint32x2_t v336;
  uint64_t v337;
  uint64_t v338;
  unsigned int v339;
  float v340;
  int v341;
  int v342;
  int v343;
  uint64_t v344;
  int v345;
  int v346;
  double v347;
  int v348;
  int v349;
  double v350;
  char *v351;
  _QWORD *v352;
  uint64_t i;
  float v354;
  float v355;
  char *v356;
  uint64_t v357;
  float v358;
  float v359;
  int v360;
  float v361;
  int v362;
  float v363;
  float v364;
  _QWORD *v365;
  uint64_t v366;
  uint64_t v367;
  float v368;
  float v369;
  float v370;
  float v371;
  float v372;
  float v373;
  uint64_t v374;
  uint64_t v375;
  float v376;
  int v377;
  float v378;
  float v379;
  uint64_t v380;
  uint64_t v381;
  float v382;
  int v383;
  uint64_t v384;
  uint64_t v385;
  float v386;
  float v387;
  float v388;
  float v389;
  float v390;
  float v391;
  float v392;
  float v393;
  int v394;
  void *v395;
  uint64_t v396;
  unint64_t v397;
  uint64_t v398;
  uint64_t v399;
  float v400;
  uint64_t v401;
  uint64_t v402;
  float v403;
  int v404;
  uint64_t v405;
  uint64_t v406;
  int v407;
  uint64_t v408;
  uint64_t v409;
  int v410;
  uint64_t v411;
  uint64_t v412;
  int v413;
  uint64_t v414;
  uint64_t v415;
  float v416;
  int v417;
  uint64_t v418;
  uint64_t v419;
  float v420;
  float v421;
  int v422;
  uint64_t v423;
  uint64_t v424;
  float v425;
  float v426;
  int v427;
  uint64_t v428;
  uint64_t v429;
  float v430;
  float v431;
  int v432;
  int v433;
  uint64_t v434;
  unsigned int *v435;
  float32x2_t *v436;
  float32x2_t *v437;
  float32x2_t v438;
  uint32x2_t v439;
  uint64_t v440;
  unint64_t v441;
  char *v442;
  unint64_t v443;
  char *v444;
  unint64_t v445;
  float *v446;
  uint64_t v447;
  unint64_t j;
  uint64_t v449;
  unint64_t v450;
  uint64_t v451;
  uint64_t v452;
  void *v453;
  char *v454;
  float v455;
  uint64_t v456;
  uint64_t v457;
  unint64_t v458;
  unint64_t v459;
  unsigned int v460;
  uint64_t v461;
  char v462;
  unsigned int **v464;
  ASAFeatures *v465;
  _QWORD *v466;
  uint64_t v467;
  _QWORD *v468;
  uint64_t v469;
  std::vector<unsigned int> *v470;
  uint64_t v471;
  const char *v473;
  int v474;
  std::bad_alloc *v475;
  std::bad_alloc *v476;
  std::bad_alloc *v477;
  std::bad_alloc *v478;
  std::bad_alloc *exception;
  std::bad_alloc *v480;
  const std::string::value_type *v481;
  std::string::size_type v482;
  NSObject *v483;
  std::string *v484;
  NSObject *v485;
  const char *v486;
  const __CFDictionary *v487;
  const __CFDictionary *theDict;
  uint64_t v489;
  int64x2_t v490;
  uint64x2_t v491;
  float64x2_t v492;
  float64x2_t __x;
  double v494;
  uint64_t v495;
  int32x2_t v496;
  uint64_t v497;
  int64x2_t v498;
  uint64_t v499;
  uint64_t v500;
  void *__p;
  void *v502;
  uint64_t v503;
  int v504;
  int v505;
  int v506;
  int v507;
  int v508;
  int v509;
  int v510;
  int v511;
  int v512;
  int v513;
  int v514;
  void *v515;
  _BYTE *v516;
  int v517;
  void *v518;
  _BYTE *v519;
  void *v520;
  _BYTE *v521;
  uint64_t v522;
  uint64_t v523;
  void *v524;
  unsigned int *v525;
  uint64_t v526;
  int v527;
  void *v528[2];
  uint64_t v529;
  int v530;
  double v531;
  double v532;
  double v533;
  double v534;
  double v535;
  double v536;
  double v537;
  double v538;
  double v539;
  double v540;
  double v541;
  double v542;
  double v543;
  double v544;
  double v545;
  double v546;
  double v547;
  double v548;
  double v549;
  double v550;
  double v551;
  double v552;
  double v553;
  int v554;
  int v555;
  double v556;
  int v557;
  int v558;
  double v559;
  double v560;
  int v561;
  double v562;
  unsigned int v563;
  int v564;
  double v565;
  double v566;
  double v567;
  double v568;
  double v569;
  int v570;
  int v571;
  double v572;
  unsigned int v573;
  double v574;
  double v575;
  double v576;
  double v577;
  double v578;
  int v579;
  uint64_t v580;
  uint64_t v581;
  double v582;
  unsigned int v583;
  double valuePtr;
  std::string v585;
  uint64_t v586;
  _BYTE __B[18];
  __int16 v588;
  std::string *v589;
  uint64_t v590;

  v590 = *MEMORY[0x1E0C80C00];
  std::string::basic_string[abi:ne180100]<0>(&v585, "");
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
  FeaturesDSPChain::InitializeInputOutputBufferSizes(a1, (_QWORD *)a2, a3, 19);
  if (v6)
  {
    std::string::__assign_external(&v585, "Failed to initialize input and output buffer sizes.", 0x33uLL);
    goto LABEL_328;
  }
  v7 = operator new();
  v8 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)v7 = *(_OWORD *)a2;
  *(_OWORD *)(v7 + 16) = v8;
  *(_QWORD *)(v7 + 32) = *(_QWORD *)(a2 + 32);
  v9 = *(_QWORD *)(a1 + 56);
  *(_QWORD *)(a1 + 56) = v7;
  if (v9)
    MEMORY[0x1BCC95CEC](v9, 0x1000C400A747E1ELL);
  valuePtr = 0.0;
  v583 = 0;
  v582 = 0.0;
  Value = (const __CFNumber *)CFDictionaryGetValue(a3, CFSTR("HighpassFilterCutoffHz"));
  if (!CFNumberGetValue(Value, kCFNumberFloat64Type, &valuePtr))
  {
    v481 = "Failed to read highpass filter cutoff from plist.";
LABEL_316:
    v482 = 49;
LABEL_327:
    std::string::__assign_external(&v585, v481, v482);
    goto LABEL_328;
  }
  v11 = (const __CFNumber *)CFDictionaryGetValue(a3, CFSTR("UseNoiseDithering"));
  if (!CFNumberGetValue(v11, kCFNumberSInt32Type, &v583))
  {
    v481 = "Failed to read noise dithering option from plist.";
    goto LABEL_316;
  }
  v12 = (const __CFNumber *)CFDictionaryGetValue(a3, CFSTR("NoiseFloorDB"));
  if (!CFNumberGetValue(v12, kCFNumberFloat64Type, &v582))
  {
    v481 = "Failed to read noise floor from plist.";
LABEL_319:
    v482 = 38;
    goto LABEL_327;
  }
  v13 = v583;
  if (v583 > 1)
  {
    v481 = "Noise dithering option must be 0 or 1.";
    goto LABEL_319;
  }
  v14 = valuePtr;
  v15 = v582;
  v16 = *(_DWORD *)(a1 + 16);
  v17 = operator new();
  v18 = *(double *)(a1 + 32);
  std::string::basic_string[abi:ne180100]<0>(__B, "");
  theDict = a3;
  v19 = (10 * v16);
  *(float *)(v17 + 8) = (float)v19;
  *(_QWORD *)(v17 + 16) = 0;
  *(_QWORD *)(v17 + 24) = 0;
  *(_DWORD *)(v17 + 32) = 0;
  *(_BYTE *)(v17 + 36) = v13 != 0;
  if (VADGenUtils::TwoPi(void)::result)
  {
    v20 = *(double *)VADGenUtils::TwoPi(void)::result;
  }
  else
  {
    v21 = (_QWORD *)operator new();
    *v21 = 0x401921FB54442D18;
    VADGenUtils::TwoPi(void)::result = (uint64_t)v21;
    v20 = 6.28318531;
  }
  v22 = v14;
  v24 = v18;
  v25 = cos(v20 * v22 / v24);
  v26 = sqrt((1.0 - v25) / (v25 + 1.0));
  v27 = v26 + 1.0;
  *(float *)&v26 = 1.0 - v26;
  *(float *)v17 = 1.0 / v27;
  *(_DWORD *)(v17 + 4) = LODWORD(v26);
  *(_OWORD *)v528 = xmmword_1B66A21C0;
  v23 = v15;
  v28 = __exp10((float)(v23 / 20.0));
  v29 = 4 * (10 * v16);
  v30 = (char *)malloc_type_malloc(v29, 0x2C8E6D5CuLL);
  v31 = v30;
  if ((_DWORD)v19 && !v30)
    goto LABEL_312;
  bzero(v30, 4 * (10 * v16));
  v32 = (float *)malloc_type_malloc(4 * (10 * v16), 0x2C8E6D5CuLL);
  v33 = v32;
  if (!(_DWORD)v19)
  {
    bzero(v32, v29);
    v35 = (char *)malloc_type_malloc(0, 0x2C8E6D5CuLL);
    bzero(v35, 0);
    goto LABEL_23;
  }
  if (!v32
    || (bzero(v32, 4 * (10 * v16)),
        v34 = (char *)malloc_type_malloc(4 * (10 * v16), 0x2C8E6D5CuLL),
        (v35 = v34) == 0))
  {
LABEL_312:
    exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
    v480 = std::bad_alloc::bad_alloc(exception);
  }
  v36 = v28;
  bzero(v34, 4 * (10 * v16));
  VADLCG::AddToBuffer((int *)v528, v33, 10 * v16, v37);
  VADLCG::AddToBuffer((int *)v528, (float *)v35, 10 * v16, v38);
  v39 = 0;
  v40 = (double *)VADGenUtils::TwoPi(void)::result;
  v41 = 4 * v19;
  do
  {
    v42 = *(float *)&v35[v39];
    v43 = v33[v39 / 4] * 0.5 + 0.5;
    v44 = log(v43);
    if (v40)
    {
      v45 = *v40;
    }
    else
    {
      v40 = (double *)operator new();
      *v40 = 6.28318531;
      VADGenUtils::TwoPi(void)::result = (uint64_t)v40;
      v45 = 6.28318531;
    }
    v46 = v42 * 0.5 + 0.5;
    v47 = sqrt(v44 * -2.0) * cos(v45 * v46);
    *(float *)&v31[v39] = v36 * v47;
    v39 += 4;
  }
  while (v41 != v39);
LABEL_23:
  free(v33);
  free(v35);
  *(_QWORD *)(v17 + 16) = v31;
  std::unique_ptr<ASAPreprocessor>::reset[abi:ne180100]((uint64_t *)(a1 + 64), v17);
  if (SBYTE3(v589) < 0)
    operator delete(*(void **)__B);
  v48 = (const __CFNumber *)CFDictionaryGetValue(theDict, CFSTR("AudioLongAnalysisSizeSamples"));
  if (!CFNumberGetValue(v48, kCFNumberSInt32Type, (void *)(a1 + 256)))
  {
    v481 = "Failed to read long analysis window size from plist.";
    v482 = 52;
    goto LABEL_327;
  }
  v49 = *(_DWORD *)(a1 + 16);
  v50 = *(_DWORD *)(a1 + 20);
  v51 = v50 / v49;
  if (v50 / v49 * v49 != v50)
  {
    v473 = "(numOverlap + 1)*mAudioBufferSize == mAudioAnalysisSize";
    v474 = 92;
    goto LABEL_304;
  }
  v52 = *(_DWORD *)(a1 + 256);
  v53 = v52 / v49;
  if (v52 / v49 * v49 != v52)
  {
    v473 = "(numLongOverlap + 1)*mAudioBufferSize == mLongAudioAnalysisSize";
    v474 = 93;
LABEL_304:
    __assert_rtn("Initialize", "ASAFeaturesDSPChain.cpp", v474, v473);
  }
  v54 = (_DWORD *)operator new();
  v55 = *(_DWORD *)(a1 + 16);
  *v54 = v55;
  v54[1] = v51 - 1;
  v54[2] = v55 * v51;
  v54[3] = 4 * v55;
  v56 = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 72) = v54;
  if (v56)
    MEMORY[0x1BCC95CEC](v56, 0x1000C40451B5BE8);
  v57 = (_DWORD *)operator new();
  v58 = *(_DWORD *)(a1 + 16);
  *v57 = v58;
  v57[1] = v53 - 1;
  v57[2] = v58 * v53;
  v57[3] = 4 * v58;
  v59 = *(_QWORD *)(a1 + 80);
  *(_QWORD *)(a1 + 80) = v57;
  if (v59)
    MEMORY[0x1BCC95CEC](v59, 0x1000C40451B5BE8);
  v60 = (const __CFDictionary *)CFDictionaryGetValue(theDict, CFSTR("ASAFrontEndParams"));
  v61 = (const __CFDictionary *)CFDictionaryGetValue(theDict, CFSTR("ASAFeatureParams"));
  v62 = (const __CFDictionary *)CFDictionaryGetValue(theDict, CFSTR("ASAFilteringPriors"));
  v581 = 0;
  v580 = 0;
  v579 = 0;
  v63 = (const __CFNumber *)CFDictionaryGetValue(v60, CFSTR("numMFCCFilters"));
  if (!CFNumberGetValue(v63, kCFNumberSInt32Type, (char *)&v581 + 4))
  {
    v481 = "Failed to read num MFCC filters from plist.";
    v482 = 43;
    goto LABEL_327;
  }
  v64 = (const __CFNumber *)CFDictionaryGetValue(v60, CFSTR("numMFCCCoefficients"));
  if (!CFNumberGetValue(v64, kCFNumberSInt32Type, &v581))
  {
    v481 = "Failed to read num MFCC coeffs from plist.";
    v482 = 42;
    goto LABEL_327;
  }
  v65 = (const __CFNumber *)CFDictionaryGetValue(v60, CFSTR("minMFCCFreqHz"));
  if (!CFNumberGetValue(v65, kCFNumberFloat32Type, (char *)&v580 + 4))
  {
    v481 = "Failed to read min MFCC freq from plist.";
LABEL_326:
    v482 = 40;
    goto LABEL_327;
  }
  v66 = (const __CFNumber *)CFDictionaryGetValue(v60, CFSTR("maxMFCCFreqHz"));
  if (!CFNumberGetValue(v66, kCFNumberFloat32Type, &v580))
  {
    v481 = "Failed to read max MFCC freq from plist.";
    goto LABEL_326;
  }
  v67 = (const __CFNumber *)CFDictionaryGetValue(v60, CFSTR("lifterAmount"));
  if (!CFNumberGetValue(v67, kCFNumberFloat32Type, &v579))
  {
    v481 = "Failed to read lifter amount from plist.";
    goto LABEL_326;
  }
  v487 = v62;
  v68 = *(double *)(a1 + 32);
  v69 = *(_DWORD *)(a1 + 20);
  v70 = *(_DWORD *)(a1 + 256);
  v72 = v581;
  v71 = HIDWORD(v581);
  v73 = HIDWORD(v580);
  v74 = v580;
  v75 = v579;
  v76 = v582;
  v77 = __exp10((float)(v76 / 20.0));
  v78 = operator new();
  v79 = v77;
  v80 = v68;
  *(float *)v78 = v80;
  *(_DWORD *)(v78 + 4) = v69;
  *(_DWORD *)(v78 + 8) = v70;
  *(_DWORD *)(v78 + 12) = v71;
  *(_DWORD *)(v78 + 16) = v72;
  *(_DWORD *)(v78 + 20) = v73;
  *(_DWORD *)(v78 + 24) = v74;
  *(_DWORD *)(v78 + 28) = v75;
  *(float *)(v78 + 32) = v76;
  *(float *)(v78 + 36) = v79;
  v81 = *(uint32x2_t *)(v78 + 4);
  *(uint32x2_t *)(v78 + 40) = vsra_n_u32((uint32x2_t)0x100000001, v81, 1uLL);
  *(_OWORD *)(v78 + 72) = 0u;
  *(_OWORD *)(v78 + 88) = 0u;
  *(_OWORD *)(v78 + 104) = 0u;
  *(_OWORD *)(v78 + 120) = 0u;
  *(_OWORD *)(v78 + 136) = 0u;
  *(_OWORD *)(v78 + 152) = 0u;
  if (MultiRadixFFT_Create(v81.u32[0], (_QWORD *)(v78 + 48)))
  {
    if (EndpointVAD2LogScope(void)::once != -1)
      dispatch_once(&EndpointVAD2LogScope(void)::once, &__block_literal_global_5);
    if (EndpointVAD2LogScope(void)::scope)
    {
      v485 = *(NSObject **)EndpointVAD2LogScope(void)::scope;
      if (!*(_QWORD *)EndpointVAD2LogScope(void)::scope)
        goto LABEL_409;
    }
    else
    {
      v485 = MEMORY[0x1E0C81028];
    }
    if (!os_log_type_enabled(v485, OS_LOG_TYPE_ERROR))
      goto LABEL_409;
    *(_DWORD *)__B = 136315394;
    *(_QWORD *)&__B[4] = "ASAFrontEnd.cpp";
    *(_WORD *)&__B[12] = 1024;
    *(_DWORD *)&__B[14] = 72;
    v486 = "%25s:%-5d MultiRadixFFT_Create() returned an error attempting to create mCplxFFTSetup. Invalid block size?";
    goto LABEL_408;
  }
  if (MultiRadixFFT_Create(*(_DWORD *)(v78 + 8), (_QWORD *)(v78 + 56)))
  {
    if (EndpointVAD2LogScope(void)::once != -1)
      dispatch_once(&EndpointVAD2LogScope(void)::once, &__block_literal_global_5);
    if (EndpointVAD2LogScope(void)::scope)
    {
      v485 = *(NSObject **)EndpointVAD2LogScope(void)::scope;
      if (!*(_QWORD *)EndpointVAD2LogScope(void)::scope)
        goto LABEL_409;
    }
    else
    {
      v485 = MEMORY[0x1E0C81028];
    }
    if (!os_log_type_enabled(v485, OS_LOG_TYPE_ERROR))
      goto LABEL_409;
    *(_DWORD *)__B = 136315394;
    *(_QWORD *)&__B[4] = "ASAFrontEnd.cpp";
    *(_WORD *)&__B[12] = 1024;
    *(_DWORD *)&__B[14] = 78;
    v486 = "%25s:%-5d MultiRadixFFT_Create() returned an error attempting to create mCplxFFTSetup_Long. Invalid block size?";
LABEL_408:
    _os_log_impl(&dword_1B5ED0000, v485, OS_LOG_TYPE_ERROR, v486, __B, 0x12u);
    goto LABEL_409;
  }
  if (MultiRadixFFT_Create(*(_DWORD *)(v78 + 4), (_QWORD *)(v78 + 64)))
  {
    if (EndpointVAD2LogScope(void)::once != -1)
      dispatch_once(&EndpointVAD2LogScope(void)::once, &__block_literal_global_5);
    if (EndpointVAD2LogScope(void)::scope)
    {
      v485 = *(NSObject **)EndpointVAD2LogScope(void)::scope;
      if (!*(_QWORD *)EndpointVAD2LogScope(void)::scope)
        goto LABEL_409;
    }
    else
    {
      v485 = MEMORY[0x1E0C81028];
    }
    if (os_log_type_enabled(v485, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)__B = 136315394;
      *(_QWORD *)&__B[4] = "ASAFrontEnd.cpp";
      *(_WORD *)&__B[12] = 1024;
      *(_DWORD *)&__B[14] = 84;
      v486 = "%25s:%-5d MultiRadixFFT_Create() returned an error attempting to create mCplxFFTSetup_Cepstrum. Invalid block size?";
      goto LABEL_408;
    }
LABEL_409:
    abort();
  }
  v82 = *(unsigned int *)(v78 + 4);
  v83 = malloc_type_malloc(4 * v82, 0x2C8E6D5CuLL);
  v84 = v83;
  if ((_DWORD)v82 && !v83)
    goto LABEL_310;
  bzero(v83, 4 * v82);
  *(_QWORD *)(v78 + 72) = v84;
  v85 = *(unsigned int *)(v78 + 8);
  v86 = malloc_type_malloc(4 * v85, 0x2C8E6D5CuLL);
  v87 = v86;
  if ((_DWORD)v85)
  {
    if (!v86)
      goto LABEL_310;
  }
  bzero(v86, 4 * v85);
  *(_QWORD *)(v78 + 80) = v87;
  v88 = *(unsigned int *)(v78 + 40);
  v89 = malloc_type_malloc(4 * v88, 0x2C8E6D5CuLL);
  v90 = v89;
  if ((_DWORD)v88)
  {
    if (!v89)
      goto LABEL_310;
  }
  bzero(v89, 4 * v88);
  *(_QWORD *)(v78 + 88) = v90;
  v91 = (*(_DWORD *)(v78 + 40) * *(_DWORD *)(v78 + 12));
  v92 = malloc_type_malloc(4 * v91, 0x2C8E6D5CuLL);
  v93 = v92;
  if ((_DWORD)v91)
  {
    if (!v92)
      goto LABEL_310;
  }
  bzero(v92, 4 * v91);
  *(_QWORD *)(v78 + 96) = v93;
  v94 = (*(_DWORD *)(v78 + 12) * *(_DWORD *)(v78 + 40));
  v95 = malloc_type_malloc(4 * v94, 0x2C8E6D5CuLL);
  v96 = v95;
  if ((_DWORD)v94)
  {
    if (!v95)
      goto LABEL_310;
  }
  bzero(v95, 4 * v94);
  *(_QWORD *)(v78 + 104) = v96;
  v97 = *(unsigned int *)(v78 + 16);
  v98 = malloc_type_malloc(4 * v97, 0x2C8E6D5CuLL);
  v99 = v98;
  if ((_DWORD)v97)
  {
    if (!v98)
      goto LABEL_310;
  }
  bzero(v98, 4 * v97);
  *(_QWORD *)(v78 + 112) = v99;
  v100 = *(unsigned int *)(v78 + 40);
  v101 = malloc_type_malloc(4 * v100, 0x2C8E6D5CuLL);
  v102 = v101;
  if ((_DWORD)v100)
  {
    if (!v101)
      goto LABEL_310;
  }
  bzero(v101, 4 * v100);
  *(_QWORD *)(v78 + 120) = v102;
  v103 = (*(_DWORD *)(v78 + 12) * *(_DWORD *)(v78 + 16));
  v104 = malloc_type_malloc(4 * v103, 0x2C8E6D5CuLL);
  v105 = v104;
  if ((_DWORD)v103)
  {
    if (!v104)
      goto LABEL_310;
  }
  bzero(v104, 4 * v103);
  *(_QWORD *)(v78 + 128) = v105;
  v106 = (2 * *(_DWORD *)(v78 + 4));
  v107 = malloc_type_malloc(4 * v106, 0x2C8E6D5CuLL);
  v108 = v107;
  if ((_DWORD)v106)
  {
    if (!v107)
      goto LABEL_310;
  }
  bzero(v107, 4 * v106);
  *(_QWORD *)(v78 + 136) = v108;
  v109 = (2 * *(_DWORD *)(v78 + 8));
  v110 = malloc_type_malloc(4 * v109, 0x2C8E6D5CuLL);
  v111 = v110;
  if ((_DWORD)v109)
  {
    if (!v110)
      goto LABEL_310;
  }
  bzero(v110, 4 * v109);
  *(_QWORD *)(v78 + 144) = v111;
  v112 = *(unsigned int *)(v78 + 12);
  v113 = malloc_type_malloc(4 * v112, 0x2C8E6D5CuLL);
  v114 = v113;
  if ((_DWORD)v112)
  {
    if (!v113)
      goto LABEL_310;
  }
  bzero(v113, 4 * v112);
  *(_QWORD *)(v78 + 152) = v114;
  v115 = (2 * *(_DWORD *)(v78 + 4));
  v116 = malloc_type_malloc(4 * v115, 0x2C8E6D5CuLL);
  v117 = v116;
  if ((_DWORD)v115)
  {
    if (!v116)
      goto LABEL_310;
  }
  bzero(v116, 4 * v115);
  *(_QWORD *)(v78 + 160) = v117;
  v118 = (2 * *(_DWORD *)(v78 + 4));
  v119 = malloc_type_malloc(4 * v118, 0x2C8E6D5CuLL);
  v120 = v119;
  if ((_DWORD)v118)
  {
    if (!v119)
      goto LABEL_310;
  }
  bzero(v119, 4 * v118);
  *(_QWORD *)(v78 + 168) = v120;
  v121 = *(unsigned int *)(v78 + 40);
  if ((_DWORD)v121)
  {
    v122 = 0;
    v123 = *(float *)v78 * 0.5 / (float)(v121 - 1);
    v124 = (uint64x2_t)vdupq_n_s64(v121 - 1);
    v125 = vdupq_n_s64(2uLL);
    v126 = *(_QWORD *)(v78 + 88);
    v127 = (v121 + 1) & 0x1FFFFFFFELL;
    v128 = (int64x2_t)xmmword_1B6626830;
    do
    {
      v129 = vmovn_s64((int64x2_t)vcgeq_u64(v124, (uint64x2_t)v128));
      if ((v129.i8[0] & 1) != 0)
        *(float *)(v126 + 4 * v122) = v123 * (float)v122;
      if ((v129.i8[4] & 1) != 0)
        *(float *)(v126 + 4 * v122 + 4) = v123 * (float)(v122 + 1);
      v122 += 2;
      v128 = vaddq_s64(v128, v125);
    }
    while (v127 != v122);
  }
  v130 = *(float **)(v78 + 72);
  v131 = *(unsigned int *)(v78 + 4);
  if (VADGenUtils::TwoPi(void)::result)
  {
    v132 = *(double *)VADGenUtils::TwoPi(void)::result;
  }
  else
  {
    v133 = (_QWORD *)operator new();
    *v133 = 0x401921FB54442D18;
    VADGenUtils::TwoPi(void)::result = (uint64_t)v133;
    v132 = 6.28318531;
  }
  v134 = v132;
  v135 = 4 * v131;
  if ((_DWORD)v131 == 1)
  {
    *v130 = (float)(v134 + 0.0) * 0.5;
  }
  else
  {
    if (!(_DWORD)v131)
      goto LABEL_82;
    v136 = v134 / (float)(unint64_t)(v131 - 1);
    v137 = 0.0;
    v138 = 4 * v131;
    v139 = v130;
    do
    {
      *v139++ = v137;
      v137 = v136 + v137;
      v138 -= 4;
    }
    while (v138);
  }
  do
  {
    v140 = cos(*v130);
    *v130++ = (float)(v140 * -0.46) + 0.54;
    v135 -= 4;
  }
  while (v135);
LABEL_82:
  v141 = *(unsigned int *)(v78 + 8);
  if ((_DWORD)v141)
    memset_pattern16(*(void **)(v78 + 80), &unk_1B6627B80, 4 * v141);
  v142 = (*(_DWORD *)(v78 + 12) + 2);
  v143 = (double *)malloc_type_malloc(8 * v142, 0x2C8E6D5CuLL);
  v144 = v143;
  if ((_DWORD)v142 && !v143)
  {
LABEL_310:
    v475 = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
    v476 = std::bad_alloc::bad_alloc(v475);
  }
  bzero(v143, 8 * v142);
  v145 = *(float *)(v78 + 24);
  v146 = *(unsigned int *)(v78 + 12);
  v147 = (v146 + 2);
  v148 = log(*(float *)(v78 + 20) * 0.00142857 + 1.0) * 1127.0;
  v149 = log(v145 * 0.00142857 + 1.0) * 1127.0;
  if ((_DWORD)v146 == -1)
  {
    *v144 = (v148 + v149) * 0.5;
    goto LABEL_91;
  }
  if ((_DWORD)v146 != -2)
  {
    v150 = (v149 - v148) / (double)(unint64_t)(v147 - 1);
    v151 = 8 * v147;
    v152 = v144;
    do
    {
      *v152++ = v148;
      v148 = v150 + v148;
      v151 -= 8;
    }
    while (v151);
LABEL_91:
    v153 = v144;
    do
    {
      *v153 = (exp(*v153 * 0.00088731145) + -1.0) * 700.0;
      ++v153;
      --v147;
    }
    while (v147);
    if (!(_DWORD)v146)
      goto LABEL_111;
  }
  v154 = 0;
  v155 = 0;
  v156 = *(unsigned int *)(v78 + 40);
  v157 = *v144;
  v158 = v144[1];
  do
  {
    v159 = v157;
    v157 = v158;
    v158 = v144[v155 + 2];
    if ((_DWORD)v156)
    {
      v161 = *(float **)(v78 + 88);
      v160 = *(_QWORD *)(v78 + 96);
      v162 = (float *)(v160 + v154);
      v163 = 0.0;
      v164 = v156;
      do
      {
        v165 = *v161;
        if (v159 > v165 || v157 < v165)
        {
          v167 = v157 > v165 || v158 < v165;
          v168 = 1.0 - (v165 - v157) / (v158 - v157);
          if (v167)
            v168 = 0.0;
        }
        else
        {
          v168 = (v165 - v159) / (v157 - v159);
        }
        v163 = v163 + v168;
        v169 = v168;
        *v162++ = v169;
        ++v161;
        --v164;
      }
      while (v164);
      v170 = v156;
      do
      {
        v171 = 1.0 / v163 * *(float *)(v160 + v154);
        *(float *)(v160 + v154) = v171;
        v160 += 4;
        --v170;
      }
      while (v170);
    }
    ++v155;
    v154 += 4 * v156;
  }
  while (v155 != v146);
LABEL_111:
  free(v144);
  v172 = (*(_DWORD *)(v78 + 40) * *(_DWORD *)(v78 + 12));
  v173 = (double *)malloc_type_malloc(8 * v172, 0x2C8E6D5CuLL);
  v174 = v173;
  if ((_DWORD)v172)
    _ZF = v173 == 0;
  else
    _ZF = 0;
  if (_ZF)
    goto LABEL_310;
  bzero(v173, 8 * v172);
  v176 = (*(_DWORD *)(v78 + 12) * *(_DWORD *)(v78 + 40));
  v177 = (double *)malloc_type_malloc(8 * v176, 0x2C8E6D5CuLL);
  v178 = v177;
  if ((_DWORD)v176)
  {
    if (!v177)
      goto LABEL_310;
  }
  bzero(v177, 8 * v176);
  v179 = *(unsigned int *)(v78 + 12);
  v180 = *(unsigned int *)(v78 + 40);
  v181 = (v180 * v179);
  if ((_DWORD)v181)
  {
    v182 = 0;
    v183 = *(_QWORD *)(v78 + 96);
    do
    {
      v174[v182] = *(float *)(v183 + 4 * v182);
      ++v182;
    }
    while (v181 != v182);
    VADGenUtils::ComputeProjectionComponent<double>(v174, v178, v179, v180);
    v184 = *(float **)(v78 + 104);
    v185 = v178;
    do
    {
      v186 = *v185++;
      v187 = v186;
      *v184++ = v187;
      --v181;
    }
    while (v181);
  }
  else
  {
    VADGenUtils::ComputeProjectionComponent<double>(v174, v178, v179, v180);
  }
  v489 = a1;
  free(v178);
  free(v174);
  v188.i32[0] = *(_DWORD *)(v78 + 28);
  ASAFrontEnd::createLifterResponse(*(ASAFrontEnd **)(v78 + 112), (float *)*(unsigned int *)(v78 + 16), v188, v189);
  v190.i32[0] = *(_DWORD *)(v78 + 28);
  ASAFrontEnd::createLifterResponse(*(ASAFrontEnd **)(v78 + 120), (float *)*(unsigned int *)(v78 + 40), v190, v191);
  v192 = *(unsigned int *)(v78 + 12);
  v193 = *(unsigned int *)(v78 + 16);
  v194 = (float)v192;
  __asm { FMOV            V0.2D, #0.5 }
  v492 = _Q0;
  if ((_DWORD)v193)
  {
    v199 = 0;
    v200 = 0;
    v491 = (uint64x2_t)vdupq_n_s64(v192 - 1);
    v490 = vdupq_n_s64(2uLL);
    do
    {
      if ((_DWORD)v192)
      {
        v201 = 0;
        v202 = *(_QWORD *)(v78 + 128) + v199;
        v203 = (uint64x2_t)xmmword_1B6626830;
        do
        {
          v498 = (int64x2_t)v203;
          v496 = vmovn_s64((int64x2_t)vcgeq_u64(v491, v203));
          v204.i64[0] = (int)v201;
          v204.i64[1] = (int)v201 + 1;
          __x = vmulq_n_f64(vaddq_f64(vcvtq_f64_s64(v204), v492), (float)((float)(3.1416 / v194) * (float)(int)v200));
          v494 = cos(__x.f64[1]);
          v205 = cos(__x.f64[0]);
          if ((v496.i8[0] & 1) != 0)
          {
            v206 = v205;
            *(float *)(v202 + 4 * v201) = v206;
          }
          if ((v496.i8[4] & 1) != 0)
          {
            v207 = v494;
            *(float *)(v202 + 4 * v201 + 4) = v207;
          }
          v201 += 2;
          v203 = (uint64x2_t)vaddq_s64(v498, v490);
        }
        while (((v192 + 1) & 0x1FFFFFFFELL) != v201);
      }
      ++v200;
      v199 += 4 * v192;
    }
    while (v200 != v193);
  }
  *(_DWORD *)__B = sqrtf(2.0 / v194);
  vDSP_vsmul(*(const float **)(v78 + 128), 1, (const float *)__B, *(float **)(v78 + 128), 1, (v193 * v192));
  v208 = (unsigned int **)(a1 + 232);
  v528[0] = 0;
  std::unique_ptr<ASAFrontEnd>::reset[abi:ne180100]((uint64_t **)(a1 + 232), (uint64_t *)v78);
  std::unique_ptr<ASAFrontEnd>::reset[abi:ne180100]((uint64_t **)v528, 0);
  v209 = operator new();
  *(_OWORD *)(v209 + 64) = 0u;
  *(_OWORD *)(v209 + 80) = 0u;
  *(_OWORD *)(v209 + 32) = 0u;
  *(_OWORD *)(v209 + 48) = 0u;
  *(_OWORD *)v209 = 0u;
  *(_OWORD *)(v209 + 16) = 0u;
  v210 = *(_QWORD *)(a1 + 216);
  *(_QWORD *)(a1 + 216) = v209;
  if (v210)
  {
    MEMORY[0x1BCC95CEC](v210, 0x80C408F261F10);
    v209 = *(_QWORD *)(a1 + 216);
  }
  v211 = *v208;
  v212 = (*v208)[1];
  v213 = malloc_type_malloc(4 * v212, 0x2C8E6D5CuLL);
  v214 = v213;
  if ((_DWORD)v212 && !v213)
    goto LABEL_311;
  bzero(v213, 4 * v212);
  *(_QWORD *)v209 = v214;
  v215 = v211[2];
  v216 = malloc_type_malloc(4 * v215, 0x2C8E6D5CuLL);
  v217 = v216;
  if ((_DWORD)v215)
  {
    if (!v216)
      goto LABEL_311;
  }
  bzero(v216, 4 * v215);
  *(_QWORD *)(v209 + 8) = v217;
  v218 = v211[10];
  v219 = malloc_type_malloc(4 * v218, 0x2C8E6D5CuLL);
  v220 = v219;
  if ((_DWORD)v218)
  {
    if (!v219)
      goto LABEL_311;
  }
  bzero(v219, 4 * v218);
  *(_QWORD *)(v209 + 16) = v220;
  v221 = v211[11];
  v222 = malloc_type_malloc(4 * v221, 0x2C8E6D5CuLL);
  v223 = v222;
  if ((_DWORD)v221)
  {
    if (!v222)
      goto LABEL_311;
  }
  bzero(v222, 4 * v221);
  *(_QWORD *)(v209 + 24) = v223;
  v224 = v211[3];
  v225 = malloc_type_malloc(4 * v224, 0x2C8E6D5CuLL);
  v226 = v225;
  if ((_DWORD)v224)
  {
    if (!v225)
      goto LABEL_311;
  }
  bzero(v225, 4 * v224);
  *(_QWORD *)(v209 + 32) = v226;
  v227 = v211[10];
  v228 = malloc_type_malloc(4 * v227, 0x2C8E6D5CuLL);
  v229 = v228;
  if ((_DWORD)v227)
  {
    if (!v228)
      goto LABEL_311;
  }
  bzero(v228, 4 * v227);
  *(_QWORD *)(v209 + 40) = v229;
  v230 = v211[10];
  v231 = malloc_type_malloc(4 * v230, 0x2C8E6D5CuLL);
  v232 = v231;
  if ((_DWORD)v230)
  {
    if (!v231)
      goto LABEL_311;
  }
  bzero(v231, 4 * v230);
  *(_QWORD *)(v209 + 48) = v232;
  v233 = v211[10];
  v234 = malloc_type_malloc(4 * v233, 0x2C8E6D5CuLL);
  v235 = v234;
  if ((_DWORD)v233)
  {
    if (!v234)
      goto LABEL_311;
  }
  bzero(v234, 4 * v233);
  *(_QWORD *)(v209 + 56) = v235;
  v236 = v211[4];
  v237 = malloc_type_malloc(4 * v236, 0x2C8E6D5CuLL);
  v238 = v237;
  if ((_DWORD)v236)
  {
    if (!v237)
      goto LABEL_311;
  }
  bzero(v237, 4 * v236);
  *(_QWORD *)(v209 + 64) = v238;
  v239 = v211[4];
  v240 = malloc_type_malloc(4 * v239, 0x2C8E6D5CuLL);
  v241 = v240;
  if ((_DWORD)v239)
  {
    if (!v240)
      goto LABEL_311;
  }
  bzero(v240, 4 * v239);
  *(_QWORD *)(v209 + 72) = v241;
  v242 = v211[10];
  v243 = malloc_type_malloc(4 * v242, 0x2C8E6D5CuLL);
  v244 = v243;
  if ((_DWORD)v242)
  {
    if (!v243)
      goto LABEL_311;
  }
  bzero(v243, 4 * v242);
  *(_QWORD *)(v209 + 80) = v244;
  v245 = v211[10];
  v246 = malloc_type_malloc(4 * v245, 0x2C8E6D5CuLL);
  v247 = v246;
  if ((_DWORD)v245)
  {
    if (!v246)
    {
LABEL_311:
      v477 = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
      v478 = std::bad_alloc::bad_alloc(v477);
    }
  }
  bzero(v246, 4 * v245);
  *(_QWORD *)(v209 + 88) = v247;
  v495 = *(_QWORD *)(*v208 + 1);
  v497 = *((_QWORD *)*v208 + 5);
  v499 = *(_QWORD *)(*v208 + 3);
  v248 = operator new();
  *(_QWORD *)&v249 = v495;
  *((_QWORD *)&v249 + 1) = v497;
  *(_OWORD *)v248 = v249;
  *(_QWORD *)(v248 + 16) = v499;
  *(_DWORD *)(v248 + 24) = v497;
  v250 = *(_QWORD *)(v489 + 224);
  *(_QWORD *)(v489 + 224) = v248;
  if (v250)
    MEMORY[0x1BCC95CEC](v250, 0x1000C4027586B93);
  v578 = 0.0;
  v251 = (const __CFNumber *)CFDictionaryGetValue(v61, CFSTR("SpeechCenterFreqHz"));
  if (!CFNumberGetValue(v251, kCFNumberFloat64Type, &v578))
  {
    std::string::__assign_external(&v585, "Failed to read speech center freq from plist.", 0x2DuLL);
    goto LABEL_328;
  }
  v577 = 0.0;
  v252 = (const __CFNumber *)CFDictionaryGetValue(v61, CFSTR("SpeechWidthPow2"));
  if (!CFNumberGetValue(v252, kCFNumberFloat64Type, &v577)
    || (v576 = 0.0,
        v253 = (const __CFNumber *)CFDictionaryGetValue(v61, CFSTR("SpeechEmphAmount")),
        !CFNumberGetValue(v253, kCFNumberFloat64Type, &v576)))
  {
    std::string::__assign_external(&v585, "Failed to read lifter amount from plist.", 0x28uLL);
    goto LABEL_328;
  }
  v575 = 0.0;
  v254 = (const __CFNumber *)CFDictionaryGetValue(v61, CFSTR("MinWindowSizeSec"));
  if (!CFNumberGetValue(v254, kCFNumberFloat64Type, &v575))
  {
    std::string::__assign_external(&v585, "Failed to read min window size seconds from plist.", 0x32uLL);
    goto LABEL_328;
  }
  v574 = 0.0;
  v255 = (const __CFNumber *)CFDictionaryGetValue(v61, CFSTR("MaxWindowSizeSec"));
  if (!CFNumberGetValue(v255, kCFNumberFloat64Type, &v574))
  {
    std::string::__assign_external(&v585, "Failed to read max window size seconds from plist.", 0x32uLL);
    goto LABEL_328;
  }
  v573 = 0;
  v256 = (const __CFNumber *)CFDictionaryGetValue(v61, CFSTR("ChromaNumSemitones"));
  if (!CFNumberGetValue(v256, kCFNumberSInt32Type, &v573))
  {
    std::string::__assign_external(&v585, "Failed to read num semitones from plist.", 0x28uLL);
    goto LABEL_328;
  }
  v572 = 0.0;
  v257 = (const __CFNumber *)CFDictionaryGetValue(v61, CFSTR("ChromaFMinHz"));
  if (!CFNumberGetValue(v257, kCFNumberFloat64Type, &v572))
  {
    std::string::__assign_external(&v585, "Failed to read fmin from plist.", 0x1FuLL);
    goto LABEL_328;
  }
  v571 = 0;
  v258 = (const __CFNumber *)CFDictionaryGetValue(v61, CFSTR("ChromaMinBandpassBin"));
  if (!CFNumberGetValue(v258, kCFNumberSInt32Type, &v571))
  {
    std::string::__assign_external(&v585, "Failed to read min bin from plist.", 0x22uLL);
    goto LABEL_328;
  }
  v570 = 0;
  v259 = (const __CFNumber *)CFDictionaryGetValue(v61, CFSTR("ChromaMaxBandpassBin"));
  if (!CFNumberGetValue(v259, kCFNumberSInt32Type, &v570))
  {
    std::string::__assign_external(&v585, "Failed to read max bin from plist.", 0x22uLL);
    goto LABEL_328;
  }
  v569 = 0.0;
  v260 = (const __CFNumber *)CFDictionaryGetValue(v61, CFSTR("RMSNominalRMSDB"));
  if (!CFNumberGetValue(v260, kCFNumberFloat64Type, &v569))
  {
    std::string::__assign_external(&v585, "Failed to read nominal RMS from plist.", 0x26uLL);
    goto LABEL_328;
  }
  v568 = 0.0;
  v261 = (const __CFNumber *)CFDictionaryGetValue(v61, CFSTR("RMSDCBlockingTimeConstSec"));
  if (!CFNumberGetValue(v261, kCFNumberFloat64Type, &v568))
  {
    std::string::__assign_external(&v585, "Failed to read DC blocking time const from plist.", 0x31uLL);
    goto LABEL_328;
  }
  v567 = 0.0;
  v262 = (const __CFNumber *)CFDictionaryGetValue(v61, CFSTR("RMSLowpassTimeConstSec"));
  if (!CFNumberGetValue(v262, kCFNumberFloat64Type, &v567))
  {
    std::string::__assign_external(&v585, "Failed to read lowpass time const from plist.", 0x2DuLL);
    goto LABEL_328;
  }
  v566 = 0.0;
  v263 = (const __CFNumber *)CFDictionaryGetValue(v61, CFSTR("BeatsV2MinBPM"));
  if (!CFNumberGetValue(v263, kCFNumberFloat64Type, &v566))
  {
    std::string::__assign_external(&v585, "Failed to read min BPM from plist.", 0x22uLL);
    goto LABEL_328;
  }
  v565 = 0.0;
  v264 = (const __CFNumber *)CFDictionaryGetValue(v61, CFSTR("BeatsV2MaxBPM"));
  if (!CFNumberGetValue(v264, kCFNumberFloat64Type, &v565))
  {
    std::string::__assign_external(&v585, "Failed to read max BPM from plist.", 0x22uLL);
    goto LABEL_328;
  }
  v564 = 0;
  v265 = (const __CFNumber *)CFDictionaryGetValue(v61, CFSTR("BeatsV2MelBandSmoothRadius"));
  if (!CFNumberGetValue(v265, kCFNumberSInt32Type, &v564))
  {
    std::string::__assign_external(&v585, "Failed to read mel band smoothing radius from plist.", 0x34uLL);
    goto LABEL_328;
  }
  v563 = 0;
  v266 = (const __CFNumber *)CFDictionaryGetValue(v61, CFSTR("BeatsV2NumSmooMelBands"));
  if (!CFNumberGetValue(v266, kCFNumberSInt32Type, &v563))
  {
    std::string::__assign_external(&v585, "Failed to read num mel smoo bands from plist.", 0x2DuLL);
    goto LABEL_328;
  }
  v562 = 0.0;
  v267 = (const __CFNumber *)CFDictionaryGetValue(v61, CFSTR("BeatsV2SparsityExponent"));
  if (!CFNumberGetValue(v267, kCFNumberFloat64Type, &v562))
  {
    std::string::__assign_external(&v585, "Failed to read sparsity exponent from plist.", 0x2CuLL);
    goto LABEL_328;
  }
  v561 = 0;
  v268 = (const __CFNumber *)CFDictionaryGetValue(v61, CFSTR("BeatsV2ZeropadAmt"));
  if (!CFNumberGetValue(v268, kCFNumberSInt32Type, &v561))
  {
    std::string::__assign_external(&v585, "Failed to read zeropad amt from plist.", 0x26uLL);
    goto LABEL_328;
  }
  v560 = 0.0;
  v269 = (const __CFNumber *)CFDictionaryGetValue(v61, CFSTR("BeatsV2MinWinSizeSec"));
  if (!CFNumberGetValue(v269, kCFNumberFloat64Type, &v560))
  {
    std::string::__assign_external(&v585, "Failed to read beats min win size from plist.", 0x2DuLL);
    goto LABEL_328;
  }
  v559 = 0.0;
  v270 = (const __CFNumber *)CFDictionaryGetValue(v61, CFSTR("BeatsV2MaxWinSizeSec"));
  if (!CFNumberGetValue(v270, kCFNumberFloat64Type, &v559))
  {
    std::string::__assign_external(&v585, "Failed to read beats max win size from plist.", 0x2DuLL);
    goto LABEL_328;
  }
  v558 = 0;
  v271 = (const __CFNumber *)CFDictionaryGetValue(v61, CFSTR("BeatsV2Config8NumHarmonics"));
  if (!CFNumberGetValue(v271, kCFNumberSInt32Type, &v558))
  {
    std::string::__assign_external(&v585, "Failed to read config8 num harmonics from plist.", 0x30uLL);
    goto LABEL_328;
  }
  v557 = 0;
  v272 = (const __CFNumber *)CFDictionaryGetValue(v61, CFSTR("BeatsV2Config8BPMMultiplier"));
  if (!CFNumberGetValue(v272, kCFNumberSInt32Type, &v557))
  {
    std::string::__assign_external(&v585, "Failed to read config8 BPM multiplier from plist.", 0x31uLL);
    goto LABEL_328;
  }
  v556 = 0.0;
  v273 = (const __CFNumber *)CFDictionaryGetValue(v61, CFSTR("BeatsV2Config8SparsityAlpha"));
  if (!CFNumberGetValue(v273, kCFNumberFloat64Type, &v556))
  {
    std::string::__assign_external(&v585, "Failed to read config8 sparsity alpha from plist.", 0x31uLL);
    goto LABEL_328;
  }
  v555 = 0;
  v274 = (const __CFNumber *)CFDictionaryGetValue(v61, CFSTR("BeatsV2Config16NumHarmonics"));
  if (!CFNumberGetValue(v274, kCFNumberSInt32Type, &v555))
  {
    std::string::__assign_external(&v585, "Failed to read config16 num harmonics from plist.", 0x31uLL);
    goto LABEL_328;
  }
  v554 = 0;
  v275 = (const __CFNumber *)CFDictionaryGetValue(v61, CFSTR("BeatsV2Config16BPMMultiplier"));
  if (!CFNumberGetValue(v275, kCFNumberSInt32Type, &v554))
  {
    std::string::__assign_external(&v585, "Failed to read config16 BPM multiplier from plist.", 0x32uLL);
    goto LABEL_328;
  }
  v553 = 0.0;
  v276 = (const __CFNumber *)CFDictionaryGetValue(v61, CFSTR("BeatsV2Config16SparsityAlpha"));
  if (!CFNumberGetValue(v276, kCFNumberFloat64Type, &v553))
  {
    std::string::__assign_external(&v585, "Failed to read config16 sparsity alpha from plist.", 0x32uLL);
    goto LABEL_328;
  }
  v552 = 0.0;
  v277 = (const __CFNumber *)CFDictionaryGetValue(v61, CFSTR("ModEnergy1CenterFreqHz"));
  if (!CFNumberGetValue(v277, kCFNumberFloat64Type, &v552)
    || (v551 = 0.0,
        v278 = (const __CFNumber *)CFDictionaryGetValue(v61, CFSTR("ModEnergy2CenterFreqHz")),
        !CFNumberGetValue(v278, kCFNumberFloat64Type, &v551)))
  {
    std::string::__assign_external(&v585, "Failed to read center freq from plist.", 0x26uLL);
    goto LABEL_328;
  }
  v550 = 0.0;
  v279 = (const __CFNumber *)CFDictionaryGetValue(v61, CFSTR("ModEnergyLookaheadSec"));
  if (!CFNumberGetValue(v279, kCFNumberFloat64Type, &v550))
    goto LABEL_378;
  v549 = 0.0;
  v280 = (const __CFNumber *)CFDictionaryGetValue(v61, CFSTR("ModEnergySimLookaheadSec"));
  if (!CFNumberGetValue(v280, kCFNumberFloat64Type, &v549))
  {
LABEL_379:
    std::string::__assign_external(&v585, "Failed to read sim lookahead from plist.", 0x28uLL);
    goto LABEL_328;
  }
  v548 = 0.0;
  v281 = (const __CFNumber *)CFDictionaryGetValue(v61, CFSTR("ModEnergyNumSpectralCycles"));
  if (!CFNumberGetValue(v281, kCFNumberFloat64Type, &v548))
  {
    std::string::__assign_external(&v585, "Failed to read num spectral cycles from plist.", 0x2EuLL);
    goto LABEL_328;
  }
  v547 = 0.0;
  v282 = (const __CFNumber *)CFDictionaryGetValue(v61, CFSTR("ModEnergySig1Center"));
  if (!CFNumberGetValue(v282, kCFNumberFloat64Type, &v547))
    goto LABEL_381;
  v546 = 0.0;
  v283 = (const __CFNumber *)CFDictionaryGetValue(v61, CFSTR("ModEnergySig1Slope"));
  if (!CFNumberGetValue(v283, kCFNumberFloat64Type, &v546))
  {
LABEL_382:
    std::string::__assign_external(&v585, "Failed to read sig1 slope from plist.", 0x25uLL);
    goto LABEL_328;
  }
  v545 = 0.0;
  v284 = (const __CFNumber *)CFDictionaryGetValue(v61, CFSTR("ModEnergySig2Center"));
  if (!CFNumberGetValue(v284, kCFNumberFloat64Type, &v545))
  {
    std::string::__assign_external(&v585, "Failed to read sig2 center from plist.", 0x26uLL);
    goto LABEL_328;
  }
  v544 = 0.0;
  v285 = (const __CFNumber *)CFDictionaryGetValue(v61, CFSTR("ModEnergySig2Slope"));
  if (!CFNumberGetValue(v285, kCFNumberFloat64Type, &v544))
  {
    std::string::__assign_external(&v585, "Failed to read sig2 slope from plist.", 0x25uLL);
    goto LABEL_328;
  }
  v543 = 0.0;
  v286 = (const __CFNumber *)CFDictionaryGetValue(v61, CFSTR("HarmConsistencyFreqBPAvgPitchHz"));
  if (!CFNumberGetValue(v286, kCFNumberFloat64Type, &v543))
  {
    std::string::__assign_external(&v585, "Failed to read freq BP avg pitch from plist.", 0x2CuLL);
    goto LABEL_328;
  }
  v542 = 0.0;
  v287 = (const __CFNumber *)CFDictionaryGetValue(v61, CFSTR("HarmConsistencyTimeLPPoleRadius"));
  if (!CFNumberGetValue(v287, kCFNumberFloat64Type, &v542))
  {
    std::string::__assign_external(&v585, "Failed to read LP pole radius from plist.", 0x29uLL);
    goto LABEL_328;
  }
  v541 = 0.0;
  v288 = (const __CFNumber *)CFDictionaryGetValue(v61, CFSTR("HarmConsistencyLookaheadSec"));
  if (!CFNumberGetValue(v288, kCFNumberFloat64Type, &v541))
  {
LABEL_378:
    std::string::__assign_external(&v585, "Failed to read lookahead from plist.", 0x24uLL);
    goto LABEL_328;
  }
  v540 = 0.0;
  v289 = (const __CFNumber *)CFDictionaryGetValue(v61, CFSTR("HarmConsistencySimLookaheadSec"));
  if (!CFNumberGetValue(v289, kCFNumberFloat64Type, &v540))
    goto LABEL_379;
  v539 = 0.0;
  v290 = (const __CFNumber *)CFDictionaryGetValue(v61, CFSTR("HarmConsistencySig1Center"));
  if (!CFNumberGetValue(v290, kCFNumberFloat64Type, &v539))
  {
LABEL_381:
    std::string::__assign_external(&v585, "Failed to read sig1 center from plist.", 0x26uLL);
    goto LABEL_328;
  }
  v538 = 0.0;
  v291 = (const __CFNumber *)CFDictionaryGetValue(v61, CFSTR("HarmConsistencySig1Slope"));
  if (!CFNumberGetValue(v291, kCFNumberFloat64Type, &v538))
    goto LABEL_382;
  v537 = 0.0;
  v292 = (const __CFNumber *)CFDictionaryGetValue(v61, CFSTR("LowEnergyThreshold"));
  if (!CFNumberGetValue(v292, kCFNumberFloat64Type, &v537))
  {
    std::string::__assign_external(&v585, "Failed to read low energy threshold from plist.", 0x2FuLL);
    goto LABEL_328;
  }
  v536 = 0.0;
  v293 = (const __CFNumber *)CFDictionaryGetValue(v61, CFSTR("SpecRolloffFrac"));
  if (!CFNumberGetValue(v293, kCFNumberFloat64Type, &v536))
  {
    std::string::__assign_external(&v585, "Failed to read spec rolloff frac from plist.", 0x2CuLL);
    goto LABEL_328;
  }
  v535 = 0.0;
  v294 = (const __CFNumber *)CFDictionaryGetValue(v61, CFSTR("CepstralVarianceCepBoostPower"));
  if (!CFNumberGetValue(v294, kCFNumberFloat64Type, &v535))
  {
    std::string::__assign_external(&v585, "Failed to read cep boost power from plist.", 0x2AuLL);
    goto LABEL_328;
  }
  v534 = 0.0;
  v295 = (const __CFNumber *)CFDictionaryGetValue(v61, CFSTR("AvgPitchDensityAPDBeginQuefSec"));
  if (!CFNumberGetValue(v295, kCFNumberFloat64Type, &v534))
  {
    std::string::__assign_external(&v585, "Failed to read begin quef sec from plist.", 0x29uLL);
    goto LABEL_328;
  }
  v533 = 0.0;
  v296 = (const __CFNumber *)CFDictionaryGetValue(v61, CFSTR("AvgPitchDensityAPDEndQuefSec"));
  if (!CFNumberGetValue(v296, kCFNumberFloat64Type, &v533))
  {
    std::string::__assign_external(&v585, "Failed to read end quef sec from plist.", 0x27uLL);
    goto LABEL_328;
  }
  v532 = 0.0;
  v297 = (const __CFNumber *)CFDictionaryGetValue(v61, CFSTR("AvgTonalityPowerTonalityPeakThresh"));
  if (!CFNumberGetValue(v297, kCFNumberFloat64Type, &v532))
  {
    std::string::__assign_external(&v585, "Failed to read tonality peak thresh from plist.", 0x2FuLL);
    goto LABEL_328;
  }
  v531 = 0.0;
  v298 = (const __CFNumber *)CFDictionaryGetValue(v61, CFSTR("AvgTonalityPowerMeanRMSShrinkage"));
  if (!CFNumberGetValue(v298, kCFNumberFloat64Type, &v531))
  {
    std::string::__assign_external(&v585, "Failed to read mean RMS shrinkage from plist.", 0x2DuLL);
LABEL_328:
    if (EndpointVAD2LogScope(void)::once != -1)
      dispatch_once(&EndpointVAD2LogScope(void)::once, &__block_literal_global_5);
    if (EndpointVAD2LogScope(void)::scope)
    {
      v483 = *(NSObject **)EndpointVAD2LogScope(void)::scope;
      if (!*(_QWORD *)EndpointVAD2LogScope(void)::scope)
        goto LABEL_337;
    }
    else
    {
      v483 = MEMORY[0x1E0C81028];
    }
    if (os_log_type_enabled(v483, OS_LOG_TYPE_ERROR))
    {
      v484 = &v585;
      if ((v585.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v484 = (std::string *)v585.__r_.__value_.__r.__words[0];
      *(_DWORD *)__B = 136315650;
      *(_QWORD *)&__B[4] = "ASAFeaturesDSPChain.cpp";
      *(_WORD *)&__B[12] = 1024;
      *(_DWORD *)&__B[14] = 660;
      v588 = 2080;
      v589 = v484;
      _os_log_impl(&dword_1B5ED0000, v483, OS_LOG_TYPE_ERROR, "%25s:%-5d Error initializing ASA features DSP chain: %s", __B, 0x1Cu);
    }
LABEL_337:
    abort();
  }
  v530 = 0;
  v299 = (const __CFNumber *)CFDictionaryGetValue(v487, CFSTR("ChromaPriorValue"));
  CFNumberGetValue(v299, kCFNumberFloat32Type, &v530);
  v300 = std::vector<float>::vector(__B, v563);
  PListReader::GetSerializedFloat32DataFromDict(v300, v487, CFSTR("BeatLogActPriorVec"));
  v528[0] = 0;
  v528[1] = 0;
  v529 = 0;
  v527 = 0;
  v524 = 0;
  v525 = 0;
  v526 = 0;
  PListReader::GetSerializedFloat32DataFromDict(v528, &v527, (unint64_t)&v524, v487, CFSTR("BeatInitialLogActArray"));
  if (v525 == v524)
    std::vector<std::vector<float>>::__throw_out_of_range[abi:ne180100]();
  std::vector<std::vector<float>>::vector(&v522, *(unsigned int *)v524);
  v301 = (unsigned int *)v524;
  v302 = (char *)v525 - (_BYTE *)v524;
  v303 = v499;
  if (v525 == v524)
LABEL_224:
    std::vector<std::vector<float>>::__throw_out_of_range[abi:ne180100]();
  v304 = 0;
  while (v304 < *v301)
  {
    if (0xAAAAAAAAAAAAAAABLL * ((v523 - v522) >> 3) <= v304)
      std::vector<std::vector<float>>::__throw_out_of_range[abi:ne180100]();
    if (v302 >= 5)
    {
      std::vector<float>::resize(v522 + 24 * v304, v301[1]);
      v301 = (unsigned int *)v524;
      v305 = v525;
      v302 = (char *)v525 - (_BYTE *)v524;
      if ((unint64_t)((char *)v525 - (_BYTE *)v524) < 5)
        std::vector<std::vector<float>>::__throw_out_of_range[abi:ne180100]();
      v306 = *((unsigned int *)v524 + 1);
      v303 = v499;
      if ((_DWORD)v306)
      {
        v307 = 0;
        v308 = v563;
        v309 = v528[0];
        v310 = ((char *)v528[1] - (char *)v528[0]) >> 2;
        v311 = 0xAAAAAAAAAAAAAAABLL * ((v523 - v522) >> 3);
        v312 = (_QWORD *)(v522 + 24 * v304);
        v313 = v304;
        do
        {
          if (v310 <= v313)
            goto LABEL_301;
          if (v311 <= v304)
            std::vector<std::vector<float>>::__throw_out_of_range[abi:ne180100]();
          if (v307 >= (uint64_t)(v312[1] - *v312) >> 2)
LABEL_301:
            std::vector<std::vector<float>>::__throw_out_of_range[abi:ne180100]();
          *(_DWORD *)(*v312 + 4 * v307++) = v309[v313];
          v313 += v308;
        }
        while (v306 != v307);
      }
      ++v304;
      if (v305 != v301)
        continue;
    }
    goto LABEL_224;
  }
  std::vector<float>::vector(&v520, v303);
  PListReader::GetSerializedFloat32DataFromDict(&v520, v487, CFSTR("LogMelSpecPriorVec"));
  std::vector<float>::vector(&v518, *(unsigned int *)(*(_QWORD *)(v489 + 224) + 12));
  PListReader::GetSerializedFloat32DataFromDict(&v518, v487, CFSTR("HarmConsistencyFilterPriorVec"));
  v517 = 0;
  v314 = (const __CFNumber *)CFDictionaryGetValue(v487, CFSTR("RMSDbPrior"));
  CFNumberGetValue(v314, kCFNumberFloat32Type, &v517);
  std::vector<float>::vector(&v515, *(unsigned int *)(*(_QWORD *)(v489 + 224) + 16));
  PListReader::GetSerializedFloat32DataFromDict(&v515, v487, CFSTR("LogMelSpecPriorVec"));
  v514 = 0;
  v315 = (const __CFNumber *)CFDictionaryGetValue(v487, CFSTR("ModEnergy2PriorValue"));
  CFNumberGetValue(v315, kCFNumberFloat32Type, &v514);
  v513 = 0;
  v316 = (const __CFNumber *)CFDictionaryGetValue(v487, CFSTR("TonalityMarkerPriorValue"));
  CFNumberGetValue(v316, kCFNumberFloat32Type, &v513);
  v512 = 0;
  v317 = (const __CFNumber *)CFDictionaryGetValue(v487, CFSTR("TonalityGatedRMSPriorValue"));
  CFNumberGetValue(v317, kCFNumberFloat32Type, &v512);
  v511 = 0;
  v318 = (const __CFNumber *)CFDictionaryGetValue(v487, CFSTR("ModEnergyPriorValue"));
  CFNumberGetValue(v318, kCFNumberFloat32Type, &v511);
  v510 = 0;
  v319 = (const __CFNumber *)CFDictionaryGetValue(v487, CFSTR("SpecRolloffPriorValue"));
  CFNumberGetValue(v319, kCFNumberFloat32Type, &v510);
  v509 = 0;
  v320 = (const __CFNumber *)CFDictionaryGetValue(v487, CFSTR("SpecCentroidPriorValue"));
  CFNumberGetValue(v320, kCFNumberFloat32Type, &v509);
  v508 = 0;
  v321 = (const __CFNumber *)CFDictionaryGetValue(v487, CFSTR("SpecFluxPriorValue"));
  CFNumberGetValue(v321, kCFNumberFloat32Type, &v508);
  v507 = 0;
  v322 = (const __CFNumber *)CFDictionaryGetValue(v487, CFSTR("SpecReconDiffPriorValue"));
  CFNumberGetValue(v322, kCFNumberFloat32Type, &v507);
  v506 = 0;
  v323 = (const __CFNumber *)CFDictionaryGetValue(v487, CFSTR("CepSparsityPriorValue"));
  CFNumberGetValue(v323, kCFNumberFloat32Type, &v506);
  v505 = 0;
  v324 = (const __CFNumber *)CFDictionaryGetValue(v487, CFSTR("CepVariancePriorValue"));
  CFNumberGetValue(v324, kCFNumberFloat32Type, &v505);
  v504 = 0;
  v325 = (const __CFNumber *)CFDictionaryGetValue(v487, CFSTR("PitchDensityPriorValue"));
  CFNumberGetValue(v325, kCFNumberFloat32Type, &v504);
  v326 = operator new();
  v327 = *(double *)(v489 + 32);
  v328 = *(double *)(v489 + 40);
  v329 = *(uint32x2_t **)(v489 + 224);
  v330 = v575;
  v331 = v574;
  v332 = v578;
  v333 = v577;
  v334 = v329[2].i32[0];
  *(_QWORD *)v326 = &off_1E69C5460;
  *(float *)(v326 + 8) = v327;
  *(float *)(v326 + 12) = v328;
  v335 = *v329;
  *(uint32x2_t *)(v326 + 16) = *v329;
  *(float *)(v326 + 24) = v330;
  *(float *)(v326 + 28) = v331;
  *(float *)(v326 + 32) = v332;
  *(float *)(v326 + 36) = v333;
  *(_DWORD *)(v326 + 44) = v334;
  *(float *)(v326 + 48) = v330 * v328;
  *(float *)(v326 + 52) = v328 * v331;
  v336 = vsra_n_u32((uint32x2_t)0x100000001, v335, 1uLL);
  *(uint32x2_t *)(v326 + 56) = v336;
  *(float *)(v326 + 68) = v327 / (float)v335.u32[0];
  *(_DWORD *)(v326 + 72) = v336.i32[0];
  *(_DWORD *)(v326 + 64) = (float)(unint64_t)((float)(v327 / v328) + 0.5);
  *(float *)(v326 + 76) = 1.0 / (float)v336.u32[0];
  v337 = *(_QWORD *)(v489 + 88);
  *(_QWORD *)(v489 + 88) = v326;
  if (v337)
    (*(void (**)(uint64_t))(*(_QWORD *)v337 + 8))(v337);
  v338 = operator new();
  v339 = v573;
  v340 = v572;
  v341 = v571;
  v342 = v570;
  *(float *)(v338 + 12) = v340;
  v343 = v530;
  *(_QWORD *)v338 = &off_1E69C5488;
  *(_DWORD *)(v338 + 8) = v339;
  *(_DWORD *)(v338 + 16) = v341;
  *(_DWORD *)(v338 + 20) = v342;
  *(_DWORD *)(v338 + 24) = v343;
  *(float *)(v338 + 28) = 1.0 / (float)v339;
  v344 = *(_QWORD *)(v489 + 96);
  *(_QWORD *)(v489 + 96) = v338;
  if (v344)
    (*(void (**)(uint64_t))(*(_QWORD *)v344 + 8))(v344);
  v345 = v558;
  v346 = v557;
  v347 = v556;
  v348 = v555;
  v349 = v554;
  v350 = v553;
  v351 = (char *)operator new(0x18uLL);
  v352 = v351;
  for (i = 0; i != 24; i += 12)
  {
    v356 = &v351[i];
    *(_QWORD *)v356 = 0;
    *((_DWORD *)v356 + 2) = 0;
  }
  *(_DWORD *)v351 = v345;
  *((_DWORD *)v351 + 1) = v346;
  v354 = v347;
  *((float *)v351 + 2) = v354;
  *((_DWORD *)v351 + 3) = v348;
  *((_DWORD *)v351 + 4) = v349;
  v355 = v350;
  *((float *)v351 + 5) = v355;
  v357 = operator new();
  v358 = v566;
  v359 = v565;
  v360 = v564;
  v361 = v562;
  v362 = v561;
  v363 = v560;
  v364 = v559;
  *(_QWORD *)v357 = off_1E69C54B0;
  *(float *)(v357 + 8) = v358;
  *(float *)(v357 + 12) = v359;
  *(_DWORD *)(v357 + 16) = v360;
  *(float *)(v357 + 20) = v361;
  *(_DWORD *)(v357 + 24) = v362;
  *(float *)(v357 + 28) = v363;
  *(float *)(v357 + 32) = v364;
  *(_QWORD *)(v357 + 40) = 0;
  *(_QWORD *)(v357 + 48) = 0;
  *(_QWORD *)(v357 + 56) = 0;
  v365 = operator new(0x18uLL);
  *(_QWORD *)(v357 + 64) = 0;
  *(_QWORD *)(v357 + 48) = v365 + 3;
  *(_QWORD *)(v357 + 56) = v365 + 3;
  *(_OWORD *)v365 = *(_OWORD *)v352;
  v365[2] = v352[2];
  *(_QWORD *)(v357 + 40) = v365;
  *(_QWORD *)(v357 + 72) = 0;
  *(_QWORD *)(v357 + 80) = 0;
  std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>((_QWORD *)(v357 + 64), *(const void **)__B, *(uint64_t *)&__B[8], (uint64_t)(*(_QWORD *)&__B[8] - *(_QWORD *)__B) >> 2);
  *(_QWORD *)(v357 + 88) = 0;
  *(_QWORD *)(v357 + 96) = 0;
  *(_QWORD *)(v357 + 104) = 0;
  std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>((_QWORD *)(v357 + 88), v520, (uint64_t)v521, (v521 - (_BYTE *)v520) >> 2);
  *(_QWORD *)(v357 + 112) = 0;
  *(_QWORD *)(v357 + 120) = 0;
  *(_QWORD *)(v357 + 128) = 0;
  std::vector<std::vector<float>>::__init_with_size[abi:ne180100]<std::vector<float>*,std::vector<float>*>((_QWORD *)(v357 + 112), v522, v523, 0xAAAAAAAAAAAAAAABLL * ((v523 - v522) >> 3));
  (*(void (**)(uint64_t))(*(_QWORD *)v357 + 16))(v357);
  v366 = *(_QWORD *)(v489 + 104);
  *(_QWORD *)(v489 + 104) = v357;
  if (v366)
    (*(void (**)(uint64_t))(*(_QWORD *)v366 + 8))(v366);
  v367 = operator new();
  v368 = v543;
  v369 = v542;
  v370 = v541;
  v371 = v540;
  v372 = v539;
  v373 = v538;
  *(_QWORD *)v367 = &off_1E69C54D8;
  *(float *)(v367 + 8) = v368;
  *(float *)(v367 + 12) = v369;
  *(float *)(v367 + 16) = v370;
  *(float *)(v367 + 20) = v371;
  *(float *)(v367 + 24) = v372;
  *(float *)(v367 + 28) = v373;
  *(_QWORD *)(v367 + 32) = 0;
  *(_QWORD *)(v367 + 40) = 0;
  *(_QWORD *)(v367 + 48) = 0;
  std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>((_QWORD *)(v367 + 32), v518, (uint64_t)v519, (v519 - (_BYTE *)v518) >> 2);
  (*(void (**)(uint64_t))(*(_QWORD *)v367 + 16))(v367);
  v374 = *(_QWORD *)(v489 + 112);
  *(_QWORD *)(v489 + 112) = v367;
  if (v374)
    (*(void (**)(uint64_t))(*(_QWORD *)v374 + 8))(v374);
  v375 = operator new();
  v376 = v569;
  v377 = v517;
  v378 = v568;
  v379 = v567;
  *(_QWORD *)v375 = &off_1E69C5500;
  *(float *)(v375 + 8) = v376;
  *(_DWORD *)(v375 + 12) = v377;
  *(float *)(v375 + 16) = v378;
  *(float *)(v375 + 20) = v379;
  v380 = *(_QWORD *)(v489 + 120);
  *(_QWORD *)(v489 + 120) = v375;
  if (v380)
    (*(void (**)(uint64_t))(*(_QWORD *)v380 + 8))(v380);
  v381 = operator new();
  v382 = v552;
  v383 = v511;
  *(_QWORD *)v381 = &off_1E69C5528;
  *(float *)(v381 + 8) = v382;
  *(_DWORD *)(v381 + 12) = v383;
  v384 = *(_QWORD *)(v489 + 128);
  *(_QWORD *)(v489 + 128) = v381;
  if (v384)
    (*(void (**)(uint64_t))(*(_QWORD *)v384 + 8))(v384);
  v385 = operator new();
  v386 = v551;
  v387 = v550;
  v388 = v549;
  v389 = v548;
  v390 = v547;
  v391 = v546;
  v392 = v545;
  v393 = v544;
  v394 = v514;
  *(_QWORD *)v385 = &off_1E69C5550;
  *(float *)(v385 + 8) = v386;
  *(float *)(v385 + 12) = v387;
  *(float *)(v385 + 16) = v388;
  *(float *)(v385 + 20) = v389;
  *(float *)(v385 + 24) = v390;
  *(float *)(v385 + 28) = v391;
  *(float *)(v385 + 32) = v392;
  *(float *)(v385 + 36) = v393;
  *(_QWORD *)(v385 + 40) = 0;
  *(_QWORD *)(v385 + 48) = 0;
  v395 = v515;
  v396 = (uint64_t)v516;
  v397 = (v516 - (_BYTE *)v515) >> 2;
  *(_QWORD *)(v385 + 56) = 0;
  std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>((_QWORD *)(v385 + 40), v395, v396, v397);
  *(_DWORD *)(v385 + 64) = v394;
  v398 = *(_QWORD *)(v489 + 136);
  *(_QWORD *)(v489 + 136) = v385;
  if (v398)
    (*(void (**)(uint64_t))(*(_QWORD *)v398 + 8))(v398);
  v399 = operator new();
  v400 = v537;
  *(_QWORD *)v399 = &off_1E69C5578;
  *(float *)(v399 + 8) = v400;
  v401 = *(_QWORD *)(v489 + 144);
  *(_QWORD *)(v489 + 144) = v399;
  if (v401)
    (*(void (**)(uint64_t))(*(_QWORD *)v401 + 8))(v401);
  v402 = operator new();
  v403 = v536;
  v404 = v510;
  *(_QWORD *)v402 = &off_1E69C55A0;
  *(float *)(v402 + 8) = v403;
  *(_DWORD *)(v402 + 12) = v404;
  v405 = *(_QWORD *)(v489 + 152);
  *(_QWORD *)(v489 + 152) = v402;
  if (v405)
    (*(void (**)(uint64_t))(*(_QWORD *)v405 + 8))(v405);
  v406 = operator new();
  v407 = v509;
  *(_QWORD *)v406 = &off_1E69C55C8;
  *(_DWORD *)(v406 + 8) = v407;
  v408 = *(_QWORD *)(v489 + 160);
  *(_QWORD *)(v489 + 160) = v406;
  if (v408)
    (*(void (**)(uint64_t))(*(_QWORD *)v408 + 8))(v408);
  v409 = operator new();
  v410 = v508;
  *(_QWORD *)v409 = &off_1E69C55F0;
  *(_DWORD *)(v409 + 8) = v410;
  v411 = *(_QWORD *)(v489 + 168);
  *(_QWORD *)(v489 + 168) = v409;
  if (v411)
    (*(void (**)(uint64_t))(*(_QWORD *)v411 + 8))(v411);
  v412 = operator new();
  v413 = v507;
  *(_QWORD *)v412 = &off_1E69C5618;
  *(_DWORD *)(v412 + 8) = v413;
  v414 = *(_QWORD *)(v489 + 176);
  *(_QWORD *)(v489 + 176) = v412;
  if (v414)
    (*(void (**)(uint64_t))(*(_QWORD *)v414 + 8))(v414);
  v415 = operator new();
  v416 = v576;
  v417 = v506;
  *(_QWORD *)v415 = &off_1E69C5640;
  *(float *)(v415 + 8) = v416;
  *(_DWORD *)(v415 + 12) = v417;
  v418 = *(_QWORD *)(v489 + 184);
  *(_QWORD *)(v489 + 184) = v415;
  if (v418)
    (*(void (**)(uint64_t))(*(_QWORD *)v418 + 8))(v418);
  v419 = operator new();
  v420 = v535;
  v421 = v576;
  v422 = v505;
  *(_QWORD *)v419 = &off_1E69C5668;
  *(float *)(v419 + 8) = v420;
  *(float *)(v419 + 12) = v421;
  *(_DWORD *)(v419 + 16) = v422;
  v423 = *(_QWORD *)(v489 + 192);
  *(_QWORD *)(v489 + 192) = v419;
  if (v423)
    (*(void (**)(uint64_t))(*(_QWORD *)v423 + 8))(v423);
  v424 = operator new();
  v425 = v534;
  v426 = v533;
  v427 = v504;
  *(_QWORD *)v424 = &off_1E69C5690;
  *(float *)(v424 + 8) = v425;
  *(float *)(v424 + 12) = v426;
  *(_DWORD *)(v424 + 16) = v427;
  v428 = *(_QWORD *)(v489 + 200);
  *(_QWORD *)(v489 + 200) = v424;
  if (v428)
    (*(void (**)(uint64_t))(*(_QWORD *)v428 + 8))(v428);
  v429 = operator new();
  v430 = v532;
  v431 = v531;
  v432 = v513;
  v433 = v512;
  *(_QWORD *)v429 = &off_1E69C56B8;
  *(float *)(v429 + 8) = v430;
  *(float *)(v429 + 12) = v431;
  *(_DWORD *)(v429 + 16) = v432;
  *(_DWORD *)(v429 + 20) = v433;
  v434 = *(_QWORD *)(v489 + 208);
  *(_QWORD *)(v489 + 208) = v429;
  if (v434)
    (*(void (**)(uint64_t))(*(_QWORD *)v434 + 8))(v434);
  __p = 0;
  v502 = 0;
  v503 = 0;
  PListReader::GetSerializedFloat32DataFromDict(&__p, theDict, CFSTR("FeatureSelectionDataBlob"));
  v435 = (unsigned int *)operator new();
  v436 = (float32x2_t *)__p;
  *(_OWORD *)(v435 + 2) = 0u;
  *(_OWORD *)(v435 + 14) = 0u;
  *((_QWORD *)v435 + 14) = 0;
  *((_QWORD *)v435 + 15) = 0;
  *((_QWORD *)v435 + 16) = 0;
  *(_OWORD *)(v435 + 6) = 0u;
  *(_OWORD *)(v435 + 10) = 0u;
  *(_OWORD *)(v435 + 18) = 0u;
  *(_OWORD *)(v435 + 22) = 0u;
  v438 = *v436;
  v437 = v436 + 1;
  v439 = vcvt_u32_f32(vcvt_f32_f64(vcvtq_f64_u64(vcvtq_u64_f64(vaddq_f64(vcvtq_f64_f32(v438), v492)))));
  *(uint32x2_t *)v435 = v439;
  v440 = v439.u32[1];
  std::vector<float>::resize((uint64_t)(v435 + 2), v439.u32[1]);
  if (*((_QWORD *)v435 + 2) == *((_QWORD *)v435 + 1)
    || (memcpy(*((void **)v435 + 1), v437, 4 * v440),
        v441 = v435[1],
        std::vector<float>::resize((uint64_t)(v435 + 8), v441),
        *((_QWORD *)v435 + 5) == *((_QWORD *)v435 + 4))
    || (v442 = (char *)v437 + 4 * v440,
        memcpy(*((void **)v435 + 4), v442, 4 * v441),
        v443 = v435[1] * *v435,
        std::vector<float>::resize((uint64_t)(v435 + 14), v443),
        *((_QWORD *)v435 + 8) == *((_QWORD *)v435 + 7)))
  {
LABEL_309:
    std::vector<std::vector<float>>::__throw_out_of_range[abi:ne180100]();
  }
  v444 = &v442[4 * v441];
  memcpy(*((void **)v435 + 7), v444, 4 * v443);
  v445 = *v435;
  std::vector<std::vector<float>>::resize((uint64_t *)v435 + 10, v445);
  v446 = (float *)&v444[4 * v443];
  if ((_DWORD)v445)
  {
    v447 = 0;
    for (j = 0; j != v445; ++j)
    {
      v449 = *((_QWORD *)v435 + 10);
      if (0xAAAAAAAAAAAAAAABLL * ((*((_QWORD *)v435 + 11) - v449) >> 3) <= j
        || (v450 = (float)(unint64_t)(*v446 + 0.5),
            std::vector<float>::resize(v449 + v447, v450),
            v451 = *((_QWORD *)v435 + 10),
            0xAAAAAAAAAAAAAAABLL * ((*((_QWORD *)v435 + 11) - v451) >> 3) <= j))
      {
        std::vector<std::vector<float>>::__throw_out_of_range[abi:ne180100]();
      }
      v452 = v451 + v447;
      v453 = *(void **)(v451 + v447);
      if (*(void **)(v452 + 8) == v453)
        goto LABEL_309;
      v454 = (char *)(v446 + 1);
      memcpy(v453, v454, 4 * v450);
      v446 = (float *)&v454[4 * v450];
      v447 += 24;
    }
  }
  v455 = *v446;
  v435[26] = *v446;
  if (v455 != (float)v455)
    __assert_rtn("parseFeatureEnableBitMask", "FeatureSelection.cpp", 246, "static_cast<Float32>(featureEnableBitMask) == tempMask");
  std::vector<float>::resize((uint64_t)(v435 + 28), v435[1]);
  v456 = *((_QWORD *)v435 + 10);
  v457 = *((_QWORD *)v435 + 11) - v456;
  if (v457)
  {
    v458 = 0;
    v459 = 0xAAAAAAAAAAAAAAABLL * (v457 >> 3);
    v460 = 1;
    v461 = v489;
    do
    {
      _ZF = *(_QWORD *)(v456 + 24 * v458 + 8) - *(_QWORD *)(v456 + 24 * v458) == 4;
      v462 = _ZF;
      v458 = v460++;
    }
    while (_ZF && v459 > v458);
  }
  else
  {
    v462 = 1;
    v461 = v489;
  }
  *((_BYTE *)v435 + 136) = v462;
  v464 = (unsigned int **)(v461 + 248);
  v500 = 0;
  std::unique_ptr<FeatureSelection>::reset[abi:ne180100]((uint64_t *)(v461 + 248), (uint64_t)v435);
  std::unique_ptr<FeatureSelection>::reset[abi:ne180100](&v500, 0);
  v465 = (ASAFeatures *)operator new();
  ASAFeatures::ASAFeatures(v465, *(const ASAParamsGeneric **)(v461 + 88), *(const ASAParamsChromaHiFreq **)(v461 + 96), *(const ASAParamsBeatsV2 **)(v461 + 104), *(const ASAParamsHarmonicConsistency **)(v461 + 112), *(const ASAParamsRms **)(v461 + 120), *(const ASAParamsModEnergy **)(v461 + 128), *(const ASAParamsModEnergy2 **)(v461 + 136), *(_OWORD *)(v461 + 144), *(_OWORD *)(v461 + 160), *(_OWORD *)(v461 + 176), *(_OWORD *)(v461 + 192), *(const ASAParamsAvgTonalityPower **)(v461 + 208), *(_DWORD *)(*(_QWORD *)(v461 + 248) + 104));
  v586 = 0;
  std::unique_ptr<ASAFeatures>::reset[abi:ne180100]((uint64_t *)(v461 + 240), (uint64_t)v465);
  std::unique_ptr<ASAFeatures>::reset[abi:ne180100](&v586, 0);
  v466 = (_QWORD *)operator new();
  std::vector<float>::vector(v466, *(unsigned int *)(*(_QWORD *)(v461 + 248) + 4));
  v467 = *(_QWORD *)(v461 + 264);
  *(_QWORD *)(v461 + 264) = v466;
  if (v467)
    std::default_delete<std::vector<float>>::operator()[abi:ne180100](v467);
  v468 = (_QWORD *)operator new();
  std::vector<float>::vector(v468, **v464);
  v469 = *(_QWORD *)(v461 + 272);
  *(_QWORD *)(v461 + 272) = v468;
  if (v469)
    std::default_delete<std::vector<float>>::operator()[abi:ne180100](v469);
  v470 = (std::vector<unsigned int> *)operator new();
  std::vector<unsigned int>::vector(v470, **v464);
  v471 = *(_QWORD *)(v461 + 280);
  *(_QWORD *)(v461 + 280) = v470;
  if (v471)
    std::default_delete<std::vector<unsigned int>>::operator()[abi:ne180100](v471);
  if (__p)
  {
    v502 = __p;
    operator delete(__p);
  }
  operator delete(v352);
  if (v515)
  {
    v516 = v515;
    operator delete(v515);
  }
  if (v518)
  {
    v519 = v518;
    operator delete(v518);
  }
  if (v520)
  {
    v521 = v520;
    operator delete(v520);
  }
  v520 = &v522;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v520);
  if (v524)
  {
    v525 = (unsigned int *)v524;
    operator delete(v524);
  }
  if (v528[0])
  {
    v528[1] = v528[0];
    operator delete(v528[0]);
  }
  if (*(_QWORD *)__B)
  {
    *(_QWORD *)&__B[8] = *(_QWORD *)__B;
    operator delete(*(void **)__B);
  }
  if (SHIBYTE(v585.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v585.__r_.__value_.__l.__data_);
  return 0;
}

void sub_1B63998CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,void *__p,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,void *a52,uint64_t a53,uint64_t a54,uint64_t a55,void *a56,uint64_t a57,uint64_t a58,void *a59,uint64_t a60,uint64_t a61,char a62,uint64_t a63)
{
  void *a65;
  uint64_t a66;
  void *a69;
  uint64_t a70;
  uint64_t v70;
  void *v71;
  uint64_t v72;
  void *v74;

  MEMORY[0x1BCC95CEC](v70, 0x10C402FEFCB83);
  if (__p)
    operator delete(__p);
  operator delete(v71);
  if (a52)
    operator delete(a52);
  if (a56)
    operator delete(a56);
  if (a59)
  {
    a60 = (uint64_t)a59;
    operator delete(a59);
  }
  a59 = &a62;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a59);
  if (a65)
  {
    a66 = (uint64_t)a65;
    operator delete(a65);
  }
  if (a69)
  {
    a70 = (uint64_t)a69;
    operator delete(a69);
  }
  v74 = *(void **)(v72 - 192);
  if (v74)
  {
    *(_QWORD *)(v72 - 184) = v74;
    operator delete(v74);
  }
  if (*(char *)(v72 - 201) < 0)
    operator delete(*(void **)(v72 - 224));
  _Unwind_Resume(a1);
}

uint64_t ASAFeaturesDSPChain::Uninitialize(ASAFeaturesDSPChain *this)
{
  uint64_t v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;

  *((_BYTE *)this + 8) = 0;
  v2 = *((_QWORD *)this + 27);
  if (v2)
  {
    if (*(_QWORD *)v2)
    {
      free(*(void **)v2);
      v2 = *((_QWORD *)this + 27);
    }
    v3 = *(void **)(v2 + 8);
    if (v3)
    {
      free(v3);
      v2 = *((_QWORD *)this + 27);
    }
    v4 = *(void **)(v2 + 16);
    if (v4)
    {
      free(v4);
      v2 = *((_QWORD *)this + 27);
    }
    v5 = *(void **)(v2 + 24);
    if (v5)
    {
      free(v5);
      v2 = *((_QWORD *)this + 27);
    }
    v6 = *(void **)(v2 + 32);
    if (v6)
    {
      free(v6);
      v2 = *((_QWORD *)this + 27);
    }
    v7 = *(void **)(v2 + 40);
    if (v7)
    {
      free(v7);
      v2 = *((_QWORD *)this + 27);
    }
    v8 = *(void **)(v2 + 48);
    if (v8)
    {
      free(v8);
      v2 = *((_QWORD *)this + 27);
    }
    v9 = *(void **)(v2 + 56);
    if (v9)
    {
      free(v9);
      v2 = *((_QWORD *)this + 27);
    }
    v10 = *(void **)(v2 + 64);
    if (v10)
    {
      free(v10);
      v2 = *((_QWORD *)this + 27);
    }
    v11 = *(void **)(v2 + 72);
    if (v11)
    {
      free(v11);
      v2 = *((_QWORD *)this + 27);
    }
    v12 = *(void **)(v2 + 80);
    if (v12)
    {
      free(v12);
      v2 = *((_QWORD *)this + 27);
    }
    v13 = *(void **)(v2 + 88);
    if (v13)
      free(v13);
  }
  *((_DWORD *)this + 3) = 0;
  return 0;
}

uint64_t ASAFeaturesDSPChain::ComputeAllFeaturesFromAudio(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4, uint64_t a5, _QWORD *a6)
{
  float *v9;
  uint64_t v10;
  float v11;
  float v12;
  uint64_t v13;
  float *v14;
  uint64_t v15;
  float *v16;
  float v17;
  float v18;
  float v19;
  float v20;
  unsigned int v21;
  uint64_t v22;
  unsigned int v23;
  float *v24;
  unsigned int v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  unsigned int v29;
  size_t v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  unsigned int v34;
  size_t v35;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  ASAFrontEnd *v39;
  void **v40;
  void **v41;
  float *v42;
  void *v43;
  float *v44;
  float *v45;
  float *v46;
  const float *v47;
  _OWORD *v48;
  ASAFeatures *v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  float *v53;
  int v54;
  _DWORD **v55;
  float v56;
  float v57;
  uint64_t v58;
  uint64_t v59;
  _DWORD *v60;
  int v61;
  void (*v62)(_QWORD *, int *);
  uint64_t v63;
  _QWORD *v64;
  int v65;
  uint64_t v66;
  const float *v67;
  uint64_t v68;
  _DWORD *v69;
  uint64_t v70;
  float *v71;
  uint64_t v72;
  float *v73;
  const float *v74;
  const float *v75;
  const float *v76;
  const float *v77;
  float **v78;
  float **v79;
  float v80;
  uint64_t v81;
  unint64_t v82;
  uint64_t *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  unint64_t v87;
  uint64_t v88;
  unint64_t v89;
  uint64_t v90;
  unsigned int *v91;
  uint64_t v92;
  unint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  float *v98;
  double *v99;
  NSObject *v101;
  float *__C;
  void *__dst;
  float *v104;
  float *v105;
  float *v106;
  int v107[4];
  __int128 v108;
  __int128 v109;
  __int128 v110;
  __int128 v111;
  __int128 v112;
  float __B;
  uint8_t buf[4];
  const char *v115;
  __int16 v116;
  int v117;
  uint64_t v118;

  v118 = *MEMORY[0x1E0C80C00];
  if (*(_DWORD *)(a1 + 16) != a3)
    __assert_rtn("ComputeAllFeaturesFromAudio", "ASAFeaturesDSPChain.cpp", 717, "numAudioSamples == mAudioBufferSize");
  v9 = *(float **)(a5 + 16);
  v10 = *(_QWORD *)(a1 + 64);
  v12 = *(float *)(v10 + 28);
  v11 = *(float *)(v10 + 32);
  v13 = 4 * a3;
  if (a3)
  {
    v14 = *(float **)(a2 + 16);
    v15 = 4 * a3;
    v16 = *(float **)(a5 + 16);
    v17 = *(float *)v10;
    v18 = *(float *)(v10 + 4);
    do
    {
      v19 = *v14++;
      v20 = v19;
      v11 = v17 * (float)((float)(v19 + (float)(v18 * v11)) - v12);
      *v16++ = v11;
      v12 = v19;
      v15 -= 4;
    }
    while (v15);
  }
  else
  {
    v20 = *(float *)(v10 + 28);
  }
  *(float *)(v10 + 28) = v20;
  *(float *)(v10 + 32) = v11;
  if (*(_BYTE *)(v10 + 36))
  {
    v21 = *(_DWORD *)(v10 + 24);
    if (a3)
    {
      v22 = *(_QWORD *)(v10 + 16);
      v23 = *(float *)(v10 + 8);
      v24 = v9;
      do
      {
        *v24 = *(float *)(v22 + 4 * v21) + *v24;
        ++v24;
        v25 = v21 + 1;
        if (v25 >= v23)
          v26 = v23;
        else
          v26 = 0;
        v21 = v25 - v26;
        v13 -= 4;
      }
      while (v13);
    }
    *(_DWORD *)(v10 + 24) = v21;
  }
  v27 = *(_QWORD *)(a1 + 72);
  v28 = **(_QWORD **)(a1 + 216);
  if (*(_DWORD *)(v27 + 4))
  {
    v29 = 0;
    do
    {
      v30 = *(unsigned int *)(v27 + 12);
      v31 = (void *)(v28 + v30 * v29++);
      memcpy(v31, (const void *)(v28 + v30 * v29), v30);
    }
    while (v29 < *(_DWORD *)(v27 + 4));
  }
  else
  {
    v29 = 0;
  }
  memcpy((void *)(v28 + *(_DWORD *)(v27 + 12) * v29), v9, *(unsigned int *)(v27 + 12));
  v32 = *(_QWORD *)(a1 + 80);
  v33 = *(_QWORD *)(*(_QWORD *)(a1 + 216) + 8);
  if (*(_DWORD *)(v32 + 4))
  {
    v34 = 0;
    do
    {
      v35 = *(unsigned int *)(v32 + 12);
      v36 = (void *)(v33 + v35 * v34++);
      memcpy(v36, (const void *)(v33 + v35 * v34), v35);
    }
    while (v34 < *(_DWORD *)(v32 + 4));
  }
  else
  {
    v34 = 0;
  }
  memcpy((void *)(v33 + *(_DWORD *)(v32 + 12) * v34), v9, *(unsigned int *)(v32 + 12));
  v37 = *(_QWORD *)(a1 + 232);
  v38 = *(_QWORD *)(a1 + 216);
  v39 = *(ASAFrontEnd **)(v38 + 8);
  v40 = *(void ***)(v38 + 16);
  v41 = *(void ***)(v38 + 24);
  v42 = *(float **)(v38 + 32);
  v43 = *(void **)(v38 + 40);
  __dst = *(void **)(v38 + 48);
  v104 = *(float **)(v38 + 56);
  v44 = *(float **)(v38 + 80);
  v105 = *(float **)(v38 + 72);
  v106 = *(float **)(v38 + 64);
  __C = *(float **)(v38 + 88);
  ASAFrontEnd::genericComputeMagnitudeSpectrum(*(ASAFrontEnd **)v38, *(const float **)(v37 + 72), *(float **)(v37 + 136), *(unsigned int *)(v37 + 4), *(_DWORD *)(v37 + 40), (_QWORD **)(v37 + 48), v40, v45);
  if (v39)
    ASAFrontEnd::genericComputeMagnitudeSpectrum(v39, *(const float **)(v37 + 80), *(float **)(v37 + 144), *(unsigned int *)(v37 + 8), *(_DWORD *)(v37 + 44), (_QWORD **)(v37 + 56), v41, v46);
  vDSP_mmul(*(const float **)(v37 + 96), 1, (const float *)v40, 1, v42, 1, *(unsigned int *)(v37 + 12), 1uLL, *(unsigned int *)(v37 + 40));
  v47 = *(const float **)(v37 + 136);
  *(_DWORD *)buf = *(_DWORD *)(v37 + 4);
  vDSP_vsadd(v47, 1, &VADGenUtils::MagOffset_MagFloorMinus100DB, *(float **)(v37 + 160), 1, *(int *)buf);
  vvlogf(*(float **)(v37 + 160), *(const float **)(v37 + 160), (const int *)buf);
  bzero((void *)(*(_QWORD *)(v37 + 160) + 4 * *(unsigned int *)(v37 + 4)), 4 * *(unsigned int *)(v37 + 4));
  *(_QWORD *)v107 = *(_QWORD *)(v37 + 160);
  *(_QWORD *)&v107[2] = *(_QWORD *)v107 + 4 * *(unsigned int *)(v37 + 4);
  MultiRadixFFT_CplxInPlaceTransform(*(_QWORD **)(v37 + 64), (const float **)v107, -1);
  __B = 1.0 / (float)*(unsigned int *)(v37 + 4);
  vDSP_vsmul(*(const float **)(v37 + 160), 1, &__B, v44, 1, *(unsigned int *)(v37 + 40));
  vDSP_vmul(*(const float **)(v37 + 120), 1, v44, 1, __C, 1, *(unsigned int *)(v37 + 40));
  memcpy(__dst, v43, 4 * *(unsigned int *)(v37 + 40));
  vDSP_mmul(*(const float **)(v37 + 104), 1, v42, 1, (float *)v43, 1, *(unsigned int *)(v37 + 40), 1uLL, *(unsigned int *)(v37 + 12));
  vDSP_vthr((const float *)v43, 1, (const float *)(v37 + 36), (float *)v43, 1, *(unsigned int *)(v37 + 40));
  vDSP_vsub((const float *)v43, 1, (const float *)v40, 1, v104, 1, *(unsigned int *)(v37 + 40));
  v107[0] = *(_DWORD *)(v37 + 12);
  vvlogf(*(float **)(v37 + 152), v42, v107);
  vDSP_mmul(*(const float **)(v37 + 128), 1, *(const float **)(v37 + 152), 1, v106, 1, *(unsigned int *)(v37 + 16), 1uLL, *(unsigned int *)(v37 + 12));
  vDSP_vmul(*(const float **)(v37 + 112), 1, v106, 1, v105, 1, *(unsigned int *)(v37 + 16));
  v48 = *(_OWORD **)(a1 + 216);
  v50 = v48[1];
  *(_OWORD *)v107 = *v48;
  v49 = *(ASAFeatures **)v107;
  v108 = v50;
  v51 = v48[3];
  v109 = v48[2];
  v110 = v51;
  v52 = v48[5];
  v111 = v48[4];
  v112 = v52;
  v53 = *(float **)(a1 + 240);
  v54 = *(_DWORD *)(*(_QWORD *)(a1 + 248) + 104);
  v55 = *(_DWORD ***)(a1 + 264);
  ++*((_DWORD *)v53 + 252);
  v56 = ASAFeatures::computeCenteredRMS(v49, *(unsigned int *)(*(_QWORD *)v53 + 64), *(_DWORD *)(*(_QWORD *)v53 + 16));
  v53[245] = v56;
  v57 = log10(v56);
  v53[246] = v57 * 20.0;
  *((_BYTE *)v53 + 976) = 0;
  v59 = *((_QWORD *)v53 + 16);
  v58 = *((_QWORD *)v53 + 17);
  if (v59 != v58)
  {
    v60 = *v55;
    v61 = 1;
    do
    {
      if ((v61 & v54) != 0)
      {
        v62 = *(void (**)(_QWORD *, int *))v59;
        v63 = *(_QWORD *)(v59 + 8);
        v64 = (_QWORD *)((char *)v53 + (v63 >> 1));
        if ((v63 & 1) != 0)
          v62 = *(void (**)(_QWORD *, int *))(*v64 + v62);
        v62(v64, v107);
        v58 = *((_QWORD *)v53 + 17);
      }
      else
      {
        v65 = 0;
      }
      *v60++ = v65;
      v61 *= 2;
      v59 += 16;
    }
    while (v59 != v58);
  }
  *((_BYTE *)v53 + 976) = 1;
  v66 = *(_QWORD *)(a1 + 264);
  v67 = *(const float **)v66;
  if (*(_QWORD *)(v66 + 8) == *(_QWORD *)v66)
    goto LABEL_68;
  v68 = *(_QWORD *)(a1 + 280);
  v69 = *(_DWORD **)v68;
  if (*(_QWORD *)(v68 + 8) == *(_QWORD *)v68)
    std::vector<std::vector<float>>::__throw_out_of_range[abi:ne180100]();
  v70 = *(_QWORD *)(a1 + 272);
  v71 = *(float **)v70;
  if (*(_QWORD *)(v70 + 8) == *(_QWORD *)v70)
    goto LABEL_68;
  v72 = *(_QWORD *)(a1 + 248);
  v73 = *(float **)(v72 + 112);
  if (*(float **)(v72 + 120) == v73)
    goto LABEL_69;
  v74 = *(const float **)(v72 + 8);
  if (*(const float **)(v72 + 16) == v74 || (v75 = *(const float **)(v72 + 32), *(const float **)(v72 + 40) == v75))
LABEL_68:
    std::vector<std::vector<float>>::__throw_out_of_range[abi:ne180100]();
  vDSP_vam(v67, 1, v74, 1, v75, 1, v73, 1, *(unsigned int *)(v72 + 4));
  v76 = *(const float **)(v72 + 112);
  if (*(const float **)(v72 + 120) == v76 || (v77 = *(const float **)(v72 + 56), *(const float **)(v72 + 64) == v77))
LABEL_69:
    std::vector<std::vector<float>>::__throw_out_of_range[abi:ne180100]();
  cblas_sgemv(CblasRowMajor, CblasNoTrans, *(_DWORD *)v72, *(_DWORD *)(v72 + 4), 1.0, v77, *(_DWORD *)(v72 + 4), v76, 1, 0.0, v71, 1);
  if (!*(_BYTE *)(v72 + 136))
  {
    if (EndpointVAD2LogScope(void)::once != -1)
      dispatch_once(&EndpointVAD2LogScope(void)::once, &__block_literal_global_5);
    if (EndpointVAD2LogScope(void)::scope)
    {
      v101 = *(NSObject **)EndpointVAD2LogScope(void)::scope;
      if (!*(_QWORD *)EndpointVAD2LogScope(void)::scope)
        goto LABEL_78;
    }
    else
    {
      v101 = MEMORY[0x1E0C81028];
    }
    if (os_log_type_enabled(v101, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      v115 = "FeatureSelection.cpp";
      v116 = 1024;
      v117 = 119;
      _os_log_impl(&dword_1B5ED0000, v101, OS_LOG_TYPE_ERROR, "%25s:%-5d Non-binary threshold is unsupported.", buf, 0x12u);
    }
LABEL_78:
    abort();
  }
  v78 = *(float ***)(v72 + 80);
  v79 = *(float ***)(v72 + 88);
  while (v78 != v79)
  {
    if (v78[1] == *v78)
      goto LABEL_69;
    v80 = *v71++;
    *v69++ = v80 >= **v78;
    v78 += 3;
  }
  v81 = 0;
  v82 = 0;
  v83 = *(uint64_t **)(a1 + 264);
  v84 = *v83;
  v85 = (v83[1] - *v83) >> 2;
  do
  {
    if (v85 == v82)
      goto LABEL_69;
    v86 = a6[3];
    v87 = (a6[4] - v86) >> 2;
    if (v87 <= v82)
      goto LABEL_66;
    *(_DWORD *)(v86 + 4 * v82) = *(_DWORD *)(v84 + 4 * v82);
    v88 = a6[7];
    v89 = (a6[8] - v88) >> 4;
    if (v89 <= v82)
      goto LABEL_66;
    v90 = v88 + v81;
    *(_QWORD *)(v90 + 8) = *(_QWORD *)(a4 + 8);
    *(double *)v90 = *(double *)(a4 + 8) * *(double *)(a1 + 40);
    ++v82;
    v81 += 16;
  }
  while (v81 != 304);
  v91 = **(unsigned int ***)(a1 + 280);
  v92 = *(_QWORD *)(*(_QWORD *)(a1 + 280) + 8) - (_QWORD)v91;
  if (v92)
  {
    v93 = v92 >> 2;
    v94 = 19;
    if (v87 <= 0x13)
      v95 = 19;
    else
      v95 = v87;
    v96 = v95 - 19;
    if (v93 <= 1)
      v93 = 1;
    if (v89 > 0x13)
      v94 = v89;
    v97 = v94 - 19;
    v98 = (float *)(v86 + 76);
    v99 = (double *)(v88 + 312);
    while (v96)
    {
      *v98 = (float)*v91;
      if (!v97)
        break;
      *v99 = *(double *)(a4 + 8);
      --v97;
      ++v91;
      *(v99 - 1) = *(double *)(a4 + 8) * *(double *)(a1 + 40);
      --v96;
      ++v98;
      v99 += 2;
      if (!--v93)
        goto LABEL_65;
    }
LABEL_66:
    __assert_rtn("operator[]", "FeatureTimeSeries.h", 91, "index < mArray.size()");
  }
LABEL_65:
  ++*(_DWORD *)(a1 + 12);
  return 0;
}

uint64_t ASAFeaturesDSPChain::GetInputAudioFormat(ASAFeaturesDSPChain *this, CAStreamBasicDescription *a2)
{
  __int128 *v2;
  __int128 v3;
  __int128 v4;

  v2 = (__int128 *)*((_QWORD *)this + 7);
  v3 = *v2;
  v4 = v2[1];
  *((_QWORD *)a2 + 4) = *((_QWORD *)v2 + 4);
  *(_OWORD *)a2 = v3;
  *((_OWORD *)a2 + 1) = v4;
  return 0;
}

uint64_t ASAFeaturesDSPChain::GetNumSuperFeatures(ASAFeaturesDSPChain *this)
{
  return **((unsigned int **)this + 31);
}

void ASAFeaturesDSPChain::GetSuperFeatureDimensions(uint64_t a1, std::vector<unsigned int> *this)
{
  unsigned int *v3;
  uint64_t *v4;
  uint64_t *v5;
  std::vector<unsigned int>::pointer begin;
  uint64_t v7;
  uint64_t v8;

  v3 = *(unsigned int **)(a1 + 248);
  std::vector<unsigned int>::resize(this, *v3);
  v4 = (uint64_t *)*((_QWORD *)v3 + 10);
  v5 = (uint64_t *)*((_QWORD *)v3 + 11);
  if (v4 != v5)
  {
    begin = this->__begin_;
    do
    {
      v8 = *v4;
      v7 = v4[1];
      v4 += 3;
      *begin++ = ((unint64_t)(v7 - v8) >> 2) + 1;
    }
    while (v4 != v5);
  }
}

uint64_t **std::unique_ptr<ASAFrontEnd>::reset[abi:ne180100](uint64_t **result, uint64_t *a2)
{
  uint64_t *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;

  v2 = *result;
  *result = a2;
  if (v2)
  {
    v3 = (void *)v2[21];
    if (v3)
      free(v3);
    v4 = (void *)v2[20];
    if (v4)
      free(v4);
    v5 = (void *)v2[19];
    if (v5)
      free(v5);
    v6 = (void *)v2[18];
    if (v6)
      free(v6);
    v7 = (void *)v2[17];
    if (v7)
      free(v7);
    v8 = (void *)v2[16];
    if (v8)
      free(v8);
    v9 = (void *)v2[15];
    if (v9)
      free(v9);
    v10 = (void *)v2[14];
    if (v10)
      free(v10);
    v11 = (void *)v2[13];
    if (v11)
      free(v11);
    v12 = (void *)v2[12];
    if (v12)
      free(v12);
    v13 = (void *)v2[11];
    if (v13)
      free(v13);
    v14 = (void *)v2[10];
    if (v14)
      free(v14);
    v15 = (void *)v2[9];
    if (v15)
      free(v15);
    MultiRadixFFT_Dispose(v2[8]);
    MultiRadixFFT_Dispose(v2[7]);
    MultiRadixFFT_Dispose(v2[6]);
    JUMPOUT(0x1BCC95CECLL);
  }
  return result;
}

uint64_t *std::unique_ptr<FeatureSelection>::reset[abi:ne180100](uint64_t *result, uint64_t a2)
{
  uint64_t v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void **v7;

  v2 = *result;
  *result = a2;
  if (v2)
  {
    v3 = *(void **)(v2 + 112);
    if (v3)
    {
      *(_QWORD *)(v2 + 120) = v3;
      operator delete(v3);
    }
    v7 = (void **)(v2 + 80);
    std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v7);
    v4 = *(void **)(v2 + 56);
    if (v4)
    {
      *(_QWORD *)(v2 + 64) = v4;
      operator delete(v4);
    }
    v5 = *(void **)(v2 + 32);
    if (v5)
    {
      *(_QWORD *)(v2 + 40) = v5;
      operator delete(v5);
    }
    v6 = *(void **)(v2 + 8);
    if (v6)
    {
      *(_QWORD *)(v2 + 16) = v6;
      operator delete(v6);
    }
    JUMPOUT(0x1BCC95CECLL);
  }
  return result;
}

uint64_t *std::unique_ptr<ASAFeatures>::reset[abi:ne180100](uint64_t *result, uint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t i;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  void *v31;
  void *v32;
  void *v33;
  void *v34;
  void *v35;
  void *v36;
  void *v37;
  void *v38;
  void *v39;
  void *v40;
  void *v41;
  void *v42;
  void *v43;
  void *v44;
  void *v45;
  _QWORD *v46;
  void *v47;
  void *v48;
  void *v49;
  void *v50;
  void *v51;
  void *v52;
  void *v53;
  void ***v54;
  void **v55;
  unint64_t v56;
  void *v57;
  void *v58;
  _QWORD *v59;
  void *v60;
  void *v61;
  void *v62;
  void *v63;
  void *v64;
  void *v65;
  void *v66;
  void *v67;
  void *v68;
  void *v69;
  void *v70;
  void *v71;
  uint64_t v72;
  void *v73;
  void *v74;
  void *v75;
  void *v76;
  void *v77;
  void *v78;
  void *v79;
  void *v80;
  void *v81;
  void *v82;
  void *v83;
  void *v84;
  void **v85;

  v2 = *result;
  *result = a2;
  if (v2)
  {
    v3 = *(unsigned int *)(v2 + 732);
    if ((_DWORD)v3)
    {
      for (i = 0; i < v3; ++i)
      {
        v5 = *(_QWORD *)(v2 + 200);
        v6 = *(_QWORD *)(v2 + 208) - v5;
        if (!v6)
          break;
        if (i >= v6 >> 3)
          std::vector<std::vector<float>>::__throw_out_of_range[abi:ne180100]();
        v7 = *(_QWORD *)(v5 + 8 * i);
        if (v7)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
          v3 = *(unsigned int *)(v2 + 732);
        }
      }
    }
    v8 = 0;
    while (1)
    {
      v9 = *(_QWORD *)(v2 + 176);
      if (v8 >= (*(_QWORD *)(v2 + 184) - v9) >> 3)
        break;
      v10 = *(_QWORD *)(v9 + 8 * v8);
      if (v10)
        (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
      if (++v8 == 18)
      {
        v11 = 0;
        while (1)
        {
          v12 = *(_QWORD *)(v2 + 152);
          if (v11 >= (*(_QWORD *)(v2 + 160) - v12) >> 3)
            break;
          v13 = *(_QWORD *)(v12 + 8 * v11);
          if (v13)
          {
            v14 = *(void **)(v13 + 16);
            if (v14)
            {
              *(_QWORD *)(v13 + 24) = v14;
              operator delete(v14);
            }
            MEMORY[0x1BCC95CEC](v13, 0x1080C400DE93FC6);
          }
          if (++v11 == 18)
          {
            v15 = *(_QWORD *)(v2 + 592);
            if (v15)
              (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
            v16 = *(void **)(v2 + 584);
            if (v16)
              free(v16);
            v17 = *(void **)(v2 + 576);
            if (v17)
              free(v17);
            v18 = *(void **)(v2 + 568);
            if (v18)
              free(v18);
            v19 = *(void **)(v2 + 560);
            if (v19)
              free(v19);
            v20 = *(void **)(v2 + 712);
            if (v20)
              free(v20);
            v21 = *(void **)(v2 + 704);
            if (v21)
              free(v21);
            v22 = *(void **)(v2 + 552);
            if (v22)
              free(v22);
            v23 = *(void **)(v2 + 696);
            if (v23)
              free(v23);
            v24 = *(void **)(v2 + 688);
            if (v24)
              free(v24);
            v25 = *(void **)(v2 + 680);
            if (v25)
              free(v25);
            v26 = *(void **)(v2 + 672);
            if (v26)
              free(v26);
            v27 = *(void **)(v2 + 664);
            if (v27)
              free(v27);
            v28 = *(void **)(v2 + 544);
            if (v28)
              free(v28);
            v29 = *(void **)(v2 + 536);
            if (v29)
              free(v29);
            v30 = *(void **)(v2 + 528);
            if (v30)
              free(v30);
            v31 = *(void **)(v2 + 520);
            if (v31)
              free(v31);
            v32 = *(void **)(v2 + 512);
            if (v32)
              free(v32);
            v33 = *(void **)(v2 + 504);
            if (v33)
              free(v33);
            v34 = *(void **)(v2 + 496);
            if (v34)
              free(v34);
            v35 = *(void **)(v2 + 488);
            if (v35)
              free(v35);
            v36 = *(void **)(v2 + 480);
            if (v36)
              free(v36);
            v37 = *(void **)(v2 + 472);
            if (v37)
              free(v37);
            v38 = *(void **)(v2 + 464);
            if (v38)
              free(v38);
            v39 = *(void **)(v2 + 456);
            if (v39)
              free(v39);
            v40 = *(void **)(v2 + 448);
            if (v40)
              free(v40);
            v41 = *(void **)(v2 + 440);
            if (v41)
              free(v41);
            v42 = *(void **)(v2 + 432);
            if (v42)
              free(v42);
            v43 = *(void **)(v2 + 424);
            if (v43)
              free(v43);
            v44 = *(void **)(v2 + 416);
            if (v44)
              free(v44);
            v45 = *(void **)(v2 + 408);
            if (v45)
              free(v45);
            v46 = *(_QWORD **)(v2 + 400);
            if (v46)
            {
              if (*v46)
                MEMORY[0x1BCC95CC8](*v46, 0x1000C8052888210);
              MEMORY[0x1BCC95CEC](v46, 0x1080C40FC6463CFLL);
            }
            v47 = *(void **)(v2 + 384);
            if (v47)
              free(v47);
            v48 = *(void **)(v2 + 376);
            if (v48)
              free(v48);
            v49 = *(void **)(v2 + 368);
            if (v49)
              free(v49);
            v50 = *(void **)(v2 + 360);
            if (v50)
              free(v50);
            v51 = *(void **)(v2 + 352);
            if (v51)
              free(v51);
            v52 = *(void **)(v2 + 344);
            if (v52)
              free(v52);
            v53 = *(void **)(v2 + 656);
            if (v53)
              free(v53);
            v54 = *(void ****)(v2 + 648);
            if (v54)
            {
              v55 = v54[1];
              if (v55 != *v54)
              {
                v56 = 0;
                v55 = *v54;
                do
                {
                  if (v55[v56])
                  {
                    free(v55[v56]);
                    v54 = *(void ****)(v2 + 648);
                    v55 = *v54;
                  }
                  ++v56;
                }
                while (v56 < v54[1] - v55);
              }
              if (v55)
              {
                v54[1] = v55;
                operator delete(v55);
              }
              MEMORY[0x1BCC95CEC](v54, 0x80C40D6874129);
            }
            v57 = *(void **)(v2 + 640);
            if (v57)
              free(v57);
            v58 = *(void **)(v2 + 632);
            if (v58)
              free(v58);
            v59 = *(_QWORD **)(v2 + 392);
            if (v59)
            {
              if (*v59)
                MEMORY[0x1BCC95CC8](*v59, 0x1000C8052888210);
              MEMORY[0x1BCC95CEC](v59, 0x1080C40FC6463CFLL);
            }
            v60 = *(void **)(v2 + 336);
            if (v60)
              free(v60);
            v61 = *(void **)(v2 + 328);
            if (v61)
              free(v61);
            v62 = *(void **)(v2 + 320);
            if (v62)
              free(v62);
            v63 = *(void **)(v2 + 312);
            if (v63)
              free(v63);
            v64 = *(void **)(v2 + 304);
            if (v64)
              free(v64);
            v65 = *(void **)(v2 + 296);
            if (v65)
              free(v65);
            v66 = *(void **)(v2 + 288);
            if (v66)
              free(v66);
            v67 = *(void **)(v2 + 280);
            if (v67)
              free(v67);
            v68 = *(void **)(v2 + 272);
            if (v68)
              free(v68);
            v69 = *(void **)(v2 + 264);
            if (v69)
              free(v69);
            v70 = *(void **)(v2 + 256);
            if (v70)
              free(v70);
            v71 = *(void **)(v2 + 248);
            if (v71)
              free(v71);
            v72 = *(_QWORD *)(v2 + 624);
            if (v72)
            {
              v85 = *(void ***)(v2 + 624);
              std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v85);
              MEMORY[0x1BCC95CEC](v72, 0x20C40960023A9);
            }
            v73 = *(void **)(v2 + 616);
            if (v73)
              free(v73);
            v74 = *(void **)(v2 + 608);
            if (v74)
              free(v74);
            v75 = *(void **)(v2 + 600);
            if (v75)
              free(v75);
            v76 = *(void **)(v2 + 240);
            if (v76)
              free(v76);
            v77 = *(void **)(v2 + 232);
            if (v77)
              free(v77);
            v78 = *(void **)(v2 + 224);
            if (v78)
              free(v78);
            v79 = *(void **)(v2 + 768);
            if (v79)
            {
              *(_QWORD *)(v2 + 776) = v79;
              operator delete(v79);
            }
            v80 = *(void **)(v2 + 744);
            if (v80)
            {
              *(_QWORD *)(v2 + 752) = v80;
              operator delete(v80);
            }
            v81 = *(void **)(v2 + 200);
            if (v81)
            {
              *(_QWORD *)(v2 + 208) = v81;
              operator delete(v81);
            }
            v82 = *(void **)(v2 + 176);
            if (v82)
            {
              *(_QWORD *)(v2 + 184) = v82;
              operator delete(v82);
            }
            v83 = *(void **)(v2 + 152);
            if (v83)
            {
              *(_QWORD *)(v2 + 160) = v83;
              operator delete(v83);
            }
            v84 = *(void **)(v2 + 128);
            if (v84)
            {
              *(_QWORD *)(v2 + 136) = v84;
              operator delete(v84);
            }
            JUMPOUT(0x1BCC95CECLL);
          }
        }
        std::vector<std::vector<float>>::__throw_out_of_range[abi:ne180100]();
      }
    }
    std::vector<std::vector<float>>::__throw_out_of_range[abi:ne180100]();
  }
  return result;
}

uint64_t *std::unique_ptr<ASAPreprocessor>::reset[abi:ne180100](uint64_t *result, uint64_t a2)
{
  uint64_t v2;
  void *v3;

  v2 = *result;
  *result = a2;
  if (v2)
  {
    v3 = *(void **)(v2 + 16);
    if (v3)
      free(v3);
    JUMPOUT(0x1BCC95CECLL);
  }
  return result;
}

void AUEndpointVAD2::~AUEndpointVAD2(AUEndpointVAD2 *this)
{
  AUEndpointVAD2::~AUEndpointVAD2(this);
  JUMPOUT(0x1BCC95CECLL);
}

{
  uint64_t v2;
  void *v3;

  *(_QWORD *)this = &off_1E69D7978;
  *((_QWORD *)this + 66) = &unk_1E69D7BE8;
  v2 = *((_QWORD *)this + 68);
  if (v2)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
    *((_QWORD *)this + 68) = 0;
  }
  v3 = (void *)*((_QWORD *)this + 75);
  if (v3)
  {
    *((_QWORD *)this + 76) = v3;
    operator delete(v3);
  }
  ausdk::AUBase::~AUBase(this);
}

uint64_t AUEndpointVAD2::Initialize(AUEndpointVAD2 *this)
{
  double v2;
  uint64_t result;
  NSObject *v4;
  uint64_t v5;
  uint64_t Element;
  __int128 v7;
  unsigned int v8;
  const __CFNumber *Value;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _DWORD *v14;
  unsigned int v15;
  FeatureAudioAdaptor *v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  CADeprecated::AUOutputBL *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _DWORD *v32;
  unsigned int v33;
  FeatureAudioAdaptor *v34;
  void *v35;
  std::vector<unsigned int>::size_type v36;
  unint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unsigned int v43;
  uint64_t v44;
  uint64_t v45;
  CADeprecated::AUOutputBL *v46;
  _DWORD *v47;
  float v48;
  float v49;
  double v50;
  double v51;
  std::__shared_weak_count *v52;
  unint64_t *v53;
  unint64_t v54;
  float *v55;
  double v56;
  float v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  float *v61;
  double v62;
  float v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  _QWORD *v67;
  uint64_t v68;
  _QWORD *v69;
  uint64_t v70;
  _QWORD *v71;
  uint64_t v72;
  _QWORD *v73;
  uint64_t v74;
  const __CFDictionary *v75;
  _QWORD *v76;
  _QWORD *v77;
  _QWORD *v78;
  const __CFNumber *v79;
  int v80;
  int v81;
  float v82;
  uint64_t v83;
  uint64_t *v84;
  uint64_t v85;
  uint64_t *v86;
  uint64_t v87;
  uint64_t *v88;
  uint64_t v89;
  uint64_t *v90;
  _QWORD *v91;
  uint64_t v92;
  std::vector<unsigned int> *v93;
  uint64_t v94;
  uint64_t v95;
  _DWORD *v96;
  uint64_t v97;
  unint64_t v98;
  std::vector<unsigned int>::pointer begin;
  unint64_t v100;
  unsigned int v101;
  unsigned int v102;
  int v103;
  uint64_t v104;
  BOOL v105;
  unint64_t v106;
  BOOL v107;
  NSObject *v108;
  uint64_t v109;
  unint64_t v110;
  std::vector<unsigned int>::pointer v111;
  unint64_t v112;
  unint64_t v113;
  uint64_t v114;
  _QWORD *v115;
  unsigned int v116;
  uint64_t v117;
  std::vector<unsigned int>::size_type v118;
  _QWORD *v119;
  uint64_t v120;
  uint64_t v121;
  float32x2_t v122;
  float32x2_t v123;
  int32x2_t v124;
  uint64_t v125;
  _QWORD *v126;
  uint64_t v127;
  void *v128;
  uint64_t *v129;
  uint64_t v130;
  uint64_t *v131;
  _QWORD *v132;
  _QWORD *v133;
  _QWORD *v134;
  char *v135;
  unint64_t v136;
  _QWORD *v137;
  uint64_t v138;
  uint64_t v139;
  unint64_t v140;
  _QWORD *v141;
  NSObject *v142;
  std::string *v143;
  __int128 v144;
  __int128 v145;
  uint64_t v146;
  _OWORD v147[2];
  uint64_t v148;
  _OWORD v149[2];
  uint64_t v150;
  _OWORD v151[2];
  uint64_t v152;
  int valuePtr;
  std::string v154;
  void *__p;
  void *v156;
  uint64_t v157;
  _BYTE *v158;
  _BYTE *v159;
  uint64_t v160;
  int v161;
  __int128 v162;
  uint64_t v163;
  uint8_t buf[32];
  uint64_t v165;
  uint64_t v166;

  v166 = *MEMORY[0x1E0C80C00];
  (*(void (**)(AUEndpointVAD2 *))(*(_QWORD *)this + 64))(this);
  *((_DWORD *)this + 156) = 0;
  *(_OWORD *)((char *)this + 632) = 0u;
  v2 = *(double *)(ausdk::AUScope::SafeGetElement((AUEndpointVAD2 *)((char *)this + 80), 0) + 80);
  if (v2 != *(double *)(ausdk::AUScope::SafeGetElement((AUEndpointVAD2 *)((char *)this + 128), 0) + 80))
    return 4294956421;
  if (*(double *)(ausdk::AUScope::SafeGetElement((AUEndpointVAD2 *)((char *)this + 80), 0) + 80) < 8000.0)
  {
    if (EndpointVAD2LogScope(void)::once != -1)
      dispatch_once(&EndpointVAD2LogScope(void)::once, &__block_literal_global_5);
    if (EndpointVAD2LogScope(void)::scope)
    {
      v4 = *(NSObject **)EndpointVAD2LogScope(void)::scope;
      if (!*(_QWORD *)EndpointVAD2LogScope(void)::scope)
        return 4294956421;
    }
    else
    {
      v4 = MEMORY[0x1E0C81028];
    }
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      *(_QWORD *)&buf[4] = "AUEndpointVAD2.cpp";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 92;
      _os_log_impl(&dword_1B5ED0000, v4, OS_LOG_TYPE_ERROR, "%25s:%-5d Audio sampling rate must be 8000 Hz or higher.", buf, 0x12u);
    }
    return 4294956421;
  }
  if (!*((_BYTE *)this + 552))
  {
    if (EndpointVAD2LogScope(void)::once != -1)
      dispatch_once(&EndpointVAD2LogScope(void)::once, &__block_literal_global_5);
    if (EndpointVAD2LogScope(void)::scope)
    {
      v108 = *(NSObject **)EndpointVAD2LogScope(void)::scope;
      if (!*(_QWORD *)EndpointVAD2LogScope(void)::scope)
      {
LABEL_123:
        (*(void (**)(AUEndpointVAD2 *, uint64_t))(*(_QWORD *)this + 584))(this, 1);
        return 0;
      }
    }
    else
    {
      v108 = MEMORY[0x1E0C81028];
    }
    if (os_log_type_enabled(v108, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136315394;
      *(_QWORD *)&buf[4] = "AUEndpointVAD2.cpp";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 107;
      _os_log_impl(&dword_1B5ED0000, v108, OS_LOG_TYPE_DEFAULT, "%25s:%-5d AUEndpointVAD2: The top-level plist property is unset. Setting the AU to bypass mode (no VAD outputs).", buf, 0x12u);
    }
    goto LABEL_123;
  }
  v5 = *((_QWORD *)this + 68);
  Element = ausdk::AUScope::SafeGetElement((AUEndpointVAD2 *)((char *)this + 80), 0);
  v7 = *(_OWORD *)(Element + 96);
  v144 = *(_OWORD *)(Element + 80);
  v145 = v7;
  v146 = *(_QWORD *)(Element + 112);
  v8 = *((_DWORD *)this + 84);
  std::string::basic_string[abi:ne180100]<0>(&v154, "");
  if (!*(_QWORD *)(v5 + 152) || !*(_QWORD *)(v5 + 160))
  {
    std::string::__assign_external(&v154, "At least one settings dictionary is null. You must load all settings before initializing.", 0x59uLL);
    goto LABEL_132;
  }
  if (*(_BYTE *)(v5 + 8))
  {
    *(_BYTE *)(v5 + 8) = 0;
    *(_BYTE *)(v5 + 304) = 0;
    *(_QWORD *)(v5 + 368) = *(_QWORD *)(v5 + 360);
  }
  valuePtr = 0;
  Value = (const __CFNumber *)CFDictionaryGetValue(*(CFDictionaryRef *)(v5 + 144), CFSTR("VADMode"));
  if (!CFNumberGetValue(Value, kCFNumberSInt32Type, &valuePtr))
  {
    std::string::__assign_external(&v154, "Failed to read VAD mode from plist.", 0x23uLL);
    goto LABEL_132;
  }
  *(_DWORD *)(v5 + 24) = valuePtr;
  v165 = 0;
  memset(buf, 0, sizeof(buf));
  v10 = operator new();
  *(_BYTE *)(v10 + 8) = 0;
  *(_QWORD *)(v10 + 20) = 0;
  *(_QWORD *)(v10 + 12) = 0;
  *(_QWORD *)(v10 + 32) = 0;
  *(_QWORD *)(v10 + 40) = 0;
  *(_DWORD *)(v10 + 48) = 0;
  *(_QWORD *)v10 = &off_1E69CAFF8;
  *(_QWORD *)(v10 + 64) = 0;
  *(_QWORD *)(v10 + 72) = 0;
  *(_QWORD *)(v10 + 56) = 0;
  v11 = *(_QWORD *)(v5 + 32);
  v12 = *(_QWORD *)(v11 + 8);
  *(_QWORD *)(v11 + 8) = v10;
  if (v12)
    (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
  v13 = *(_QWORD *)(*(_QWORD *)(v5 + 32) + 8);
  v152 = v146;
  v151[0] = v144;
  v151[1] = v145;
  (*(void (**)(uint64_t, _OWORD *, _QWORD))(*(_QWORD *)v13 + 16))(v13, v151, *(_QWORD *)(v5 + 152));
  v14 = *(_DWORD **)(*(_QWORD *)(v5 + 32) + 8);
  v14[12] = *(_DWORD *)(v5 + 24);
  (*(void (**)(_DWORD *, uint8_t *))(*(_QWORD *)v14 + 40))(v14, buf);
  *(_DWORD *)(v5 + 84) = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(v5 + 32) + 8) + 48))(*(_QWORD *)(*(_QWORD *)(v5 + 32) + 8));
  v15 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v5 + 32) + 8) + 16);
  v16 = (FeatureAudioAdaptor *)operator new();
  FeatureAudioAdaptor::FeatureAudioAdaptor(v16, (const CAStreamBasicDescription *)&v144, (const CAStreamBasicDescription *)buf, v8, v15, *(int (**)(void *, unsigned int, const AudioBufferList **, AudioBufferList **))(v5 + 32), v17);
  std::unique_ptr<FeatureAudioAdaptor>::reset[abi:ne180100](*(uint64_t **)(v5 + 32), (uint64_t)v16);
  FixedArray<unsigned int>::Allocate(*(_QWORD *)(v5 + 32) + 48, *(unsigned int *)(v5 + 84));
  v18 = *(_QWORD *)(v5 + 32);
  v19 = *(_QWORD *)(v18 + 56);
  v20 = *(_QWORD *)(v18 + 64) - v19;
  if (!v20 || (*(_DWORD *)v19 = 4, v20 <= 8))
    __assert_rtn("ElementAt", "FeatureTimeSeries.h", 77, "index < mArray.size()");
  *(_QWORD *)(v19 + 4) = 0x500000006;
  FixedArray<unsigned int>::Allocate(v18 + 80, *(unsigned int *)(v5 + 84));
  v21 = 0;
  v22 = *(_QWORD *)(*(_QWORD *)(v5 + 32) + 88);
  v23 = (*(_QWORD *)(*(_QWORD *)(v5 + 32) + 96) - v22) >> 2;
  do
  {
    if (v23 == v21)
      __assert_rtn("ElementAt", "FeatureTimeSeries.h", 77, "index < mArray.size()");
    *(_DWORD *)(v22 + 4 * v21) = v21;
    ++v21;
  }
  while (v21 != 3);
  v24 = operator new();
  LODWORD(v149[0]) = 0;
  EnsembleTimeSeriesEvent<float>::EnsembleTimeSeriesEvent(v24, 0xAu, v149);
  v25 = *(_QWORD *)(v5 + 32);
  v26 = *(_QWORD *)(v25 + 16);
  *(_QWORD *)(v25 + 16) = v24;
  if (v26)
    (*(void (**)(uint64_t))(*(_QWORD *)v26 + 8))(v26);
  v27 = (CADeprecated::AUOutputBL *)operator new();
  CADeprecated::AUOutputBL::AUOutputBL(v27, (const CAStreamBasicDescription *)buf);
  std::unique_ptr<CADeprecated::AUOutputBL>::reset[abi:ne180100]((uint64_t *)(*(_QWORD *)(v5 + 32) + 112), (uint64_t)v27);
  CADeprecated::AUOutputBL::Allocate(*(_QWORD *)(*(_QWORD *)(v5 + 32) + 112), 2 * v8);
  CADeprecated::AUOutputBL::Prepare(*(_QWORD *)(*(_QWORD *)(v5 + 32) + 112), *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v5 + 32) + 112) + 64));
  *(_DWORD *)(*(_QWORD *)(v5 + 32) + 120) = 2 * v8;
  v150 = 0;
  memset(v149, 0, sizeof(v149));
  v28 = operator new();
  *(_BYTE *)(v28 + 8) = 0;
  *(_QWORD *)(v28 + 20) = 0;
  *(_QWORD *)(v28 + 12) = 0;
  *(_QWORD *)(v28 + 32) = 0;
  *(_QWORD *)(v28 + 40) = 0;
  *(_DWORD *)(v28 + 48) = 0;
  *(_QWORD *)v28 = &off_1E69D7928;
  *(_OWORD *)(v28 + 56) = 0u;
  *(_OWORD *)(v28 + 72) = 0u;
  *(_OWORD *)(v28 + 88) = 0u;
  *(_OWORD *)(v28 + 104) = 0u;
  *(_OWORD *)(v28 + 120) = 0u;
  *(_OWORD *)(v28 + 136) = 0u;
  *(_OWORD *)(v28 + 152) = 0u;
  *(_OWORD *)(v28 + 168) = 0u;
  *(_OWORD *)(v28 + 184) = 0u;
  *(_OWORD *)(v28 + 200) = 0u;
  *(_OWORD *)(v28 + 216) = 0u;
  *(_OWORD *)(v28 + 232) = 0u;
  *(_QWORD *)(v28 + 248) = 0;
  *(_QWORD *)(v28 + 264) = 0;
  *(_QWORD *)(v28 + 272) = 0;
  *(_QWORD *)(v28 + 280) = 0;
  v29 = *(_QWORD *)(v5 + 48);
  v30 = *(_QWORD *)(v29 + 8);
  *(_QWORD *)(v29 + 8) = v28;
  if (v30)
    (*(void (**)(uint64_t))(*(_QWORD *)v30 + 8))(v30);
  v31 = *(_QWORD *)(*(_QWORD *)(v5 + 48) + 8);
  v148 = v146;
  v147[0] = v144;
  v147[1] = v145;
  (*(void (**)(uint64_t, _OWORD *, _QWORD))(*(_QWORD *)v31 + 16))(v31, v147, *(_QWORD *)(v5 + 160));
  v32 = *(_DWORD **)(*(_QWORD *)(v5 + 48) + 8);
  v32[12] = *(_DWORD *)(v5 + 24);
  (*(void (**)(_DWORD *, _OWORD *))(*(_QWORD *)v32 + 40))(v32, v149);
  *(_DWORD *)(v5 + 88) = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(v5 + 48) + 8) + 48))(*(_QWORD *)(*(_QWORD *)(v5 + 48) + 8));
  v33 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v5 + 48) + 8) + 16);
  v34 = (FeatureAudioAdaptor *)operator new();
  FeatureAudioAdaptor::FeatureAudioAdaptor(v34, (const CAStreamBasicDescription *)&v144, (const CAStreamBasicDescription *)v149, v8, v33, *(int (**)(void *, unsigned int, const AudioBufferList **, AudioBufferList **))(v5 + 48), v35);
  std::unique_ptr<FeatureAudioAdaptor>::reset[abi:ne180100](*(uint64_t **)(v5 + 48), (uint64_t)v34);
  v36 = *(unsigned int *)(v5 + 88);
  *(_DWORD *)(v5 + 92) = v36 + *(_DWORD *)(v5 + 84);
  FixedArray<unsigned int>::Allocate(*(_QWORD *)(v5 + 48) + 48, v36);
  FixedArray<unsigned int>::Allocate(*(_QWORD *)(v5 + 48) + 80, *(unsigned int *)(v5 + 88));
  if (*(_DWORD *)(v5 + 88))
  {
    v37 = 0;
    v38 = *(_QWORD **)(v5 + 48);
    v39 = v38[7];
    v40 = (v38[8] - v39) >> 2;
    do
    {
      if (v40 == v37 || (*(_DWORD *)(v39 + 4 * v37) = v37 + 19, v41 = v38[11], v37 >= (v38[12] - v41) >> 2))
        __assert_rtn("ElementAt", "FeatureTimeSeries.h", 77, "index < mArray.size()");
      *(_DWORD *)(v41 + 4 * v37) = v37 + *(_DWORD *)(v5 + 84);
      ++v37;
    }
    while (v37 < *(unsigned int *)(v5 + 88));
  }
  v42 = operator new();
  v43 = *(_DWORD *)(v5 + 88) + 19;
  LODWORD(v162) = 0;
  EnsembleTimeSeriesEvent<float>::EnsembleTimeSeriesEvent(v42, v43, &v162);
  v44 = *(_QWORD *)(v5 + 48);
  v45 = *(_QWORD *)(v44 + 16);
  *(_QWORD *)(v44 + 16) = v42;
  if (v45)
    (*(void (**)(uint64_t))(*(_QWORD *)v45 + 8))(v45);
  v46 = (CADeprecated::AUOutputBL *)operator new();
  CADeprecated::AUOutputBL::AUOutputBL(v46, (const CAStreamBasicDescription *)v149);
  std::unique_ptr<CADeprecated::AUOutputBL>::reset[abi:ne180100]((uint64_t *)(*(_QWORD *)(v5 + 48) + 112), (uint64_t)v46);
  CADeprecated::AUOutputBL::Allocate(*(_QWORD *)(*(_QWORD *)(v5 + 48) + 112), 2 * v8);
  CADeprecated::AUOutputBL::Prepare(*(_QWORD *)(*(_QWORD *)(v5 + 48) + 112), *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v5 + 48) + 112) + 64));
  v47 = *(_DWORD **)(v5 + 48);
  v47[30] = 2 * v8;
  v49 = (float)v8 / *(double *)&v144;
  v50 = v49;
  v51 = *(double *)(*(_QWORD *)v47 + 32);
  if (v51 >= *(double *)(**(_QWORD **)(v5 + 32) + 32))
    v51 = *(double *)(**(_QWORD **)(v5 + 32) + 32);
  v48 = *(double *)&v144 / (double)v8;
  std::allocate_shared[abi:ne180100]<VectorTimeSeriesSynchronizer<float>,std::allocator<VectorTimeSeriesSynchronizer<float>>,unsigned int &,unsigned int &,float &,void>(&v162, (ceil(v50 / v51) + 1.0), *(_DWORD *)(v5 + 92), v48);
  std::shared_ptr<vp::xml::_xmlNode const>::operator=[abi:ne180100](v5 + 64, &v162);
  v52 = (std::__shared_weak_count *)*((_QWORD *)&v162 + 1);
  if (*((_QWORD *)&v162 + 1))
  {
    v53 = (unint64_t *)(*((_QWORD *)&v162 + 1) + 8);
    do
      v54 = __ldaxr(v53);
    while (__stlxr(v54 - 1, v53));
    if (!v54)
    {
      ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
      std::__shared_weak_count::__release_weak(v52);
    }
  }
  v55 = *(float **)(v5 + 32);
  v56 = *(double *)(*(_QWORD *)v55 + 32);
  v57 = 1.0 / v56;
  v55[41] = v57;
  v58 = operator new();
  LODWORD(v162) = 10;
  EnsembleTimeSeriesBuffer<float>::EnsembleTimeSeriesBuffer(v58, vcvtpd_u64_f64(v50 / v56), &v162);
  v59 = *(_QWORD *)(v5 + 32);
  v60 = *(_QWORD *)(v59 + 24);
  *(_QWORD *)(v59 + 24) = v58;
  if (v60)
    (*(void (**)(uint64_t))(*(_QWORD *)v60 + 8))(v60);
  std::shared_ptr<clsp::CLSPKernel_Logs>::operator=[abi:ne180100]((_QWORD *)(*(_QWORD *)(v5 + 32) + 32), *(_QWORD *)(v5 + 64), *(_QWORD *)(v5 + 72));
  v61 = *(float **)(v5 + 48);
  v62 = *(double *)(*(_QWORD *)v61 + 32);
  v63 = 1.0 / v62;
  v61[41] = v63;
  v64 = operator new();
  LODWORD(v162) = *(_DWORD *)(v5 + 88) + 19;
  EnsembleTimeSeriesBuffer<float>::EnsembleTimeSeriesBuffer(v64, vcvtpd_u64_f64(v50 / v62), &v162);
  v65 = *(_QWORD *)(v5 + 48);
  v66 = *(_QWORD *)(v65 + 24);
  *(_QWORD *)(v65 + 24) = v64;
  if (v66)
    (*(void (**)(uint64_t))(*(_QWORD *)v66 + 8))(v66);
  std::shared_ptr<clsp::CLSPKernel_Logs>::operator=[abi:ne180100]((_QWORD *)(*(_QWORD *)(v5 + 48) + 32), *(_QWORD *)(v5 + 64), *(_QWORD *)(v5 + 72));
  v67 = (_QWORD *)operator new();
  *v67 = 0;
  v67[1] = 0;
  v67[2] = 0;
  v68 = *(_QWORD *)(v5 + 240);
  *(_QWORD *)(v5 + 240) = v67;
  if (v68)
    std::default_delete<std::vector<float>>::operator()[abi:ne180100](v68);
  v69 = (_QWORD *)operator new();
  *v69 = 0;
  v69[1] = 0;
  v69[2] = 0;
  v70 = *(_QWORD *)(v5 + 248);
  *(_QWORD *)(v5 + 248) = v69;
  if (v70)
    std::default_delete<std::vector<float>>::operator()[abi:ne180100](v70);
  v71 = (_QWORD *)operator new();
  *v71 = 0;
  v71[1] = 0;
  v71[2] = 0;
  v72 = *(_QWORD *)(v5 + 256);
  *(_QWORD *)(v5 + 256) = v71;
  if (v72)
    std::default_delete<std::vector<float>>::operator()[abi:ne180100](v72);
  v73 = (_QWORD *)operator new();
  *v73 = 0;
  v73[1] = 0;
  v73[2] = 0;
  v74 = *(_QWORD *)(v5 + 264);
  *(_QWORD *)(v5 + 264) = v73;
  if (v74)
    std::default_delete<std::vector<float>>::operator()[abi:ne180100](v74);
  v75 = *(const __CFDictionary **)(v5 + 168);
  v77 = *(_QWORD **)(v5 + 240);
  v76 = *(_QWORD **)(v5 + 248);
  v78 = *(_QWORD **)(v5 + 256);
  v162 = 0uLL;
  v163 = 0;
  v161 = 0;
  v158 = 0;
  v159 = 0;
  v160 = 0;
  PListReader::GetSerializedFloat32DataFromDict(&v162, &v161, (unint64_t)&v158, v75, CFSTR("TopLayerStateProductDimensions"));
  EndpointVAD2::FloatVectorToUIntVector((uint64_t *)&v162, (std::vector<unsigned int> *)(v5 + 184));
  __p = 0;
  v156 = 0;
  v157 = 0;
  PListReader::GetSerializedFloat32DataFromDict(&__p, &v161, (unint64_t)&v158, v75, CFSTR("MidLayerStateProductDimensions"));
  EndpointVAD2::FloatVectorToUIntVector((uint64_t *)&__p, (std::vector<unsigned int> *)(v5 + 208));
  PListReader::GetSerializedFloat32DataFromDict(v77, &v161, (unint64_t)&v158, v75, CFSTR("FullStatePrior"));
  PListReader::GetSerializedFloat32DataFromDict(v76, &v161, (unint64_t)&v158, v75, CFSTR("FullStateTransMx"));
  v79 = (const __CFNumber *)CFDictionaryGetValue(v75, CFSTR("TopLayerObservationDimension"));
  v80 = CFNumberGetValue(v79, kCFNumberSInt32Type, (void *)(v5 + 232));
  if (v80)
    v81 = 0;
  else
    v81 = -50;
  if (v80)
  {
    PListReader::GetSerializedFloat32DataFromDict(v78, &v161, (unint64_t)&v158, v75, CFSTR("TopLayerObservationPrior"));
    PListReader::GetSerializedFloat32DataFromDict(v73, &v161, (unint64_t)&v158, v75, CFSTR("TopLayerObservationTransMx"));
    v81 = 0;
  }
  if (__p)
  {
    v156 = __p;
    operator delete(__p);
  }
  if (v158)
  {
    v159 = v158;
    operator delete(v158);
  }
  if ((_QWORD)v162)
  {
    *((_QWORD *)&v162 + 1) = v162;
    operator delete((void *)v162);
  }
  if (v81)
  {
    std::string::__assign_external(&v154, "Failed to read Viterbi settings from plist.", 0x2BuLL);
LABEL_132:
    if (EndpointVAD2LogScope(void)::once != -1)
      dispatch_once(&EndpointVAD2LogScope(void)::once, &__block_literal_global_5);
    if (EndpointVAD2LogScope(void)::scope)
    {
      v142 = *(NSObject **)EndpointVAD2LogScope(void)::scope;
      if (!*(_QWORD *)EndpointVAD2LogScope(void)::scope)
        goto LABEL_141;
    }
    else
    {
      v142 = MEMORY[0x1E0C81028];
    }
    if (os_log_type_enabled(v142, OS_LOG_TYPE_ERROR))
    {
      v143 = &v154;
      if ((v154.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v143 = (std::string *)v154.__r_.__value_.__r.__words[0];
      *(_DWORD *)buf = 136315650;
      *(_QWORD *)&buf[4] = "EndpointVAD2.cpp";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 283;
      *(_WORD *)&buf[18] = 2080;
      *(_QWORD *)&buf[20] = v143;
      _os_log_impl(&dword_1B5ED0000, v142, OS_LOG_TYPE_ERROR, "%25s:%-5d Error initializing EndpointVAD2: %s", buf, 0x1Cu);
    }
LABEL_141:
    abort();
  }
  v82 = *(float *)(*(_QWORD *)(v5 + 48) + 164);
  v83 = operator new();
  v84 = *(uint64_t **)(v5 + 240);
  v85 = *v84;
  if (v84[1] == *v84
    || (v86 = *(uint64_t **)(v5 + 248), v87 = *v86, v86[1] == *v86)
    || (v88 = *(uint64_t **)(v5 + 256), v89 = *v88, v88[1] == *v88)
    || (v90 = *(uint64_t **)(v5 + 264), v90[1] == *v90))
  {
    std::vector<std::vector<float>>::__throw_out_of_range[abi:ne180100]();
  }
  MixViterbiProd::MixViterbiProd(v83, v5 + 184, v5 + 208, *(_DWORD *)(v5 + 232), v85, v87, v89, *v90, (float)(unint64_t)((float)(v82 * 600.0) + 0.5));
  std::unique_ptr<MixViterbiProd>::reset[abi:ne180100]((uint64_t *)(v5 + 96), v83);
  *(_BYTE *)(v5 + 288) = 0;
  *(_DWORD *)(v5 + 292) = 0;
  v91 = (_QWORD *)operator new();
  *v91 = 0;
  v91[1] = 0;
  v91[2] = 0;
  v92 = *(_QWORD *)(v5 + 296);
  *(_QWORD *)(v5 + 296) = v91;
  if (v92)
    std::default_delete<std::vector<unsigned int>>::operator()[abi:ne180100](v92);
  v162 = 0uLL;
  v163 = 0;
  v159 = 0;
  v160 = 0;
  v158 = 0;
  (*(void (**)(_QWORD, __int128 *))(**(_QWORD **)(*(_QWORD *)(v5 + 32) + 8) + 56))(*(_QWORD *)(*(_QWORD *)(v5 + 32) + 8), &v162);
  (*(void (**)(_QWORD, _BYTE **))(**(_QWORD **)(*(_QWORD *)(v5 + 48) + 8) + 56))(*(_QWORD *)(*(_QWORD *)(v5 + 48) + 8), &v158);
  v93 = *(std::vector<unsigned int> **)(v5 + 296);
  v94 = (v159 - v158) >> 2;
  v95 = v94 + ((uint64_t)(*((_QWORD *)&v162 + 1) - v162) >> 2);
  std::vector<unsigned int>::resize(v93, v94 + ((uint64_t)(*((_QWORD *)&v162 + 1) - v162) >> 2));
  v96 = v158;
  if (v159 != v158)
  {
    v97 = 0;
    v98 = (v159 - v158) >> 2;
    begin = v93->__begin_;
    v100 = v93->__end_ - v93->__begin_;
    v101 = v95 - 1;
    v102 = 1;
    v103 = 1;
    while (v100 > v101)
    {
      begin[v101] = v103;
      v104 = ~v97;
      v105 = __CFADD__(v98, v104);
      v106 = v98 + v104;
      if (!v105)
        break;
      v103 *= v96[v106];
      v97 = v102;
      v107 = v98 > v102++;
      --v101;
      if (!v107)
        goto LABEL_86;
    }
LABEL_127:
    std::vector<std::vector<float>>::__throw_out_of_range[abi:ne180100]();
  }
  v103 = 1;
LABEL_86:
  v109 = v162;
  if (*((_QWORD *)&v162 + 1) != (_QWORD)v162)
  {
    v110 = (uint64_t)(*((_QWORD *)&v162 + 1) - v162) >> 2;
    v111 = v93->__begin_;
    v112 = v93->__end_ - v93->__begin_;
    v113 = v110 - 1;
    if (v110 <= 1)
      v114 = 1;
    else
      v114 = (uint64_t)(*((_QWORD *)&v162 + 1) - v162) >> 2;
    while (v112 > v113)
    {
      v111[v113] = v103;
      if (v110 <= v113)
        break;
      v103 *= *(_DWORD *)(v109 + 4 * v113--);
      if (!--v114)
        goto LABEL_93;
    }
    goto LABEL_127;
  }
LABEL_93:
  v115 = (_QWORD *)operator new();
  v116 = *(_DWORD *)(v5 + 92);
  LODWORD(__p) = 0;
  TimeSeriesEvent<float>::TimeSeriesEvent((uint64_t)v115, v116, &__p);
  *v115 = &off_1E69E2E20;
  v115[6] = 0;
  v115[7] = 0;
  v117 = *(_QWORD *)(v5 + 272);
  *(_QWORD *)(v5 + 272) = v115;
  if (v117)
    (*(void (**)(uint64_t))(*(_QWORD *)v117 + 8))(v117);
  v118 = *(unsigned int *)(*(_QWORD *)(v5 + 96) + 72);
  v119 = (_QWORD *)operator new();
  LODWORD(__p) = 0;
  TimeSeriesEvent<unsigned int>::TimeSeriesEvent((uint64_t)v119, v118, &__p);
  *v119 = &off_1E69E2E40;
  v119[6] = 0;
  v119[7] = 0;
  v120 = *(_QWORD *)(v5 + 280);
  *(_QWORD *)(v5 + 280) = v119;
  if (v120)
    (*(void (**)(uint64_t))(*(_QWORD *)v120 + 8))(v120);
  std::vector<std::vector<unsigned int>>::reserve((_QWORD *)(v5 + 336), 0x1F4uLL);
  std::vector<DataTimeStamp>::reserve((void **)(v5 + 312), 0x1F4uLL);
  *(_QWORD *)(v5 + 384) = 0;
  v121 = operator new();
  v122 = *(float32x2_t *)(v5 + 120);
  v123 = *(float32x2_t *)(v5 + 128);
  v124 = *(int32x2_t *)(v5 + 136);
  v125 = v144;
  *(double *)v121 = *(float *)(v5 + 116);
  *(_DWORD *)(v121 + 8) = 1000;
  *(_QWORD *)(v121 + 16) = 0;
  *(_QWORD *)(v121 + 24) = 0;
  *(_QWORD *)(v121 + 32) = 0;
  std::vector<TimeStampedEvent<unsigned int>>::reserve((void **)(v121 + 16), 0x3E9uLL);
  *(_QWORD *)(v121 + 96) = 0;
  *(_QWORD *)(v121 + 40) = 0;
  *(_QWORD *)(v121 + 48) = 0;
  *(float64x2_t *)(v121 + 56) = vcvtq_f64_f32(v122);
  *(float64x2_t *)(v121 + 72) = vcvtq_f64_f32(v123);
  *(int32x2_t *)(v121 + 88) = vrev64_s32(v124);
  *(_QWORD *)(v121 + 104) = 0;
  *(_QWORD *)(v121 + 112) = 0;
  *(_DWORD *)(v121 + 120) = 0;
  *(_QWORD *)(v121 + 128) = v125;
  *(_BYTE *)(v121 + 136) = 1;
  *(_QWORD *)(v121 + 152) = 0;
  *(_QWORD *)(v121 + 160) = 0;
  *(_OWORD *)(v121 + 176) = 0u;
  *(_OWORD *)(v121 + 192) = 0u;
  *(_QWORD *)(v121 + 208) = 0;
  *(_QWORD *)(v121 + 216) = 1000;
  std::vector<TimeStampedEvent<unsigned int>>::reserve((void **)(v121 + 96), 0x3E8uLL);
  *(_QWORD *)(v121 + 104) = *(_QWORD *)(v121 + 96);
  v126 = (_QWORD *)operator new();
  v127 = *(unsigned int *)(v121 + 216);
  v128 = (void *)operator new[]();
  bzero(v128, 4 * v127);
  *v126 = v128;
  v126[1] = v127;
  bzero(v128, 4 * (int)v127);
  v129 = *(uint64_t **)(v121 + 192);
  *(_QWORD *)(v121 + 192) = v126;
  if (v129)
    std::default_delete<MRRingBuffer<AUEndpointVAD3_Decision>>::operator()[abi:ne180100](v129);
  v130 = operator new();
  MRRingBuffer<DataTimeStamp>::MRRingBuffer(v130, *(_DWORD *)(v121 + 216));
  v131 = *(uint64_t **)(v121 + 200);
  *(_QWORD *)(v121 + 200) = v130;
  if (v131)
    std::default_delete<MRRingBuffer<DataTimeStamp>>::operator()[abi:ne180100](v131);
  v132 = *(_QWORD **)(v5 + 104);
  *(_QWORD *)(v5 + 104) = v121;
  if (v132)
    std::default_delete<EndpointDecisionLayerVAD2>::operator()[abi:ne180100](v132);
  *(_BYTE *)(v5 + 304) = 0;
  *(_BYTE *)(v5 + 8) = 1;
  *(_DWORD *)(v5 + 12) = v8;
  *(_QWORD *)(v5 + 16) = v125;
  if (v158)
  {
    v159 = v158;
    operator delete(v158);
  }
  if ((_QWORD)v162)
  {
    *((_QWORD *)&v162 + 1) = v162;
    operator delete((void *)v162);
  }
  if (SHIBYTE(v154.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v154.__r_.__value_.__l.__data_);
  v133 = (_QWORD *)*((_QWORD *)this + 68);
  v134 = (_QWORD *)v133[45];
  v133[46] = v134;
  v135 = (char *)this + 528;
  v136 = v133[47];
  if ((unint64_t)v134 >= v136)
  {
    v138 = v136 - (_QWORD)v134;
    v139 = v138 >> 2;
    if ((unint64_t)(v138 >> 2) <= 1)
      v139 = 1;
    if ((unint64_t)v138 >= 0x7FFFFFFFFFFFFFF8)
      v140 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v140 = v139;
    if (v140 >> 61)
      std::__throw_bad_array_new_length[abi:ne180100]();
    v141 = operator new(8 * v140);
    *v141 = v135;
    v137 = v141 + 1;
    v133[45] = v141;
    v133[46] = v141 + 1;
    v133[47] = &v141[v140];
    if (v134)
      operator delete(v134);
  }
  else
  {
    *v134 = v135;
    v137 = v134 + 1;
  }
  result = 0;
  v133[46] = v137;
  return result;
}

void sub_1B639C2E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,void *__p,uint64_t a37,int a38,__int16 a39,char a40,char a41,void *a42,uint64_t a43)
{
  if (a41 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t AUEndpointVAD2::Reset(AUEndpointVAD2 *this)
{
  if (*((_BYTE *)this + 17) && *((_DWORD *)this + 156))
    (*(void (**)(AUEndpointVAD2 *))(*(_QWORD *)this + 56))(this);
  return 0;
}

uint64_t AUEndpointVAD2::GetPropertyInfo(AUEndpointVAD2 *this, int a2, int a3, unsigned int a4, unsigned int *a5, BOOL *a6)
{
  uint64_t result;
  char v7;
  unsigned int v8;

  if (a3)
    return 4294956417;
  switch(a2)
  {
    case 64010:
      v7 = *((_BYTE *)this + 17) ^ 1;
      goto LABEL_6;
    case 64011:
    case 64013:
    case 64016:
    case 64018:
    case 64021:
      v7 = 0;
      v8 = 0;
      goto LABEL_21;
    case 64012:
    case 64017:
      v7 = 0;
      v8 = 40;
      goto LABEL_21;
    case 64014:
    case 64015:
    case 64019:
    case 64020:
    case 64037:
    case 64040:
      goto LABEL_11;
    case 64022:
      v7 = 1;
      goto LABEL_16;
    case 64023:
      v8 = 8;
      goto LABEL_20;
    case 64024:
      v8 = 0;
      v7 = *((_DWORD *)this + 156) != 0;
      goto LABEL_21;
    case 64025:
    case 64026:
    case 64027:
    case 64028:
    case 64029:
    case 64030:
    case 64031:
    case 64032:
      v7 = *((_BYTE *)this + 17) ^ 1;
      goto LABEL_12;
    case 64033:
    case 64034:
    case 64035:
    case 64036:
      v7 = 0;
LABEL_16:
      v8 = 1;
      goto LABEL_21;
    case 64038:
    case 64039:
    case 64041:
    case 64042:
    case 64043:
    case 64044:
      v7 = 0;
LABEL_6:
      v8 = 8;
      goto LABEL_21;
    default:
      if (a2 == 21)
      {
        v8 = 4;
LABEL_20:
        v7 = 1;
      }
      else
      {
        if (a2 != 3700)
          return 4294956417;
LABEL_11:
        v7 = 0;
LABEL_12:
        v8 = 4;
      }
LABEL_21:
      result = 0;
      *a6 = v7;
      *a5 = v8;
      break;
  }
  return result;
}

uint64_t AUEndpointVAD2::GetProperty(AUEndpointVAD2 *this, int a2, int a3, unsigned int a4, void **a5)
{
  uint64_t result;
  NSObject *v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  float **v15;
  int v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  double v23;
  uint64_t v24;
  const char *v25;
  int v26;
  const char *v27;
  __int16 v28;
  int v29;
  uint64_t v30;

  v30 = *MEMORY[0x1E0C80C00];
  if (a3)
    return 4294956417;
  switch(a2)
  {
    case 64010:
      if (EndpointVAD2LogScope(void)::once != -1)
        dispatch_once(&EndpointVAD2LogScope(void)::once, &__block_literal_global_5);
      if (EndpointVAD2LogScope(void)::scope)
      {
        v8 = *(NSObject **)EndpointVAD2LogScope(void)::scope;
        if (!*(_QWORD *)EndpointVAD2LogScope(void)::scope)
          return 4294956449;
      }
      else
      {
        v8 = MEMORY[0x1E0C81028];
      }
      if (!os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
        return 4294956449;
      v26 = 136315394;
      v27 = "AUEndpointVAD2.cpp";
      v28 = 1024;
      v29 = 447;
      v25 = "%25s:%-5d The top-level parameter data structure is not saved internally! Instead, you should query specific"
            " AU properties individually.";
      goto LABEL_102;
    case 64011:
      v10 = *(_QWORD *)(*((_QWORD *)this + 68) + 32);
      goto LABEL_19;
    case 64012:
      v11 = *(_QWORD *)(*((_QWORD *)this + 68) + 32);
      goto LABEL_21;
    case 64013:
      v12 = *(_QWORD *)(*((_QWORD *)this + 68) + 32);
      v13 = *(_DWORD *)(v12 + 160);
      v14 = *(_QWORD *)(v12 + 24);
      v15 = (float **)a5;
      v16 = 10;
      goto LABEL_27;
    case 64014:
      result = 0;
      v9 = 10;
      goto LABEL_80;
    case 64015:
      result = 0;
      v9 = *(_DWORD *)(*((_QWORD *)this + 68) + 84);
      goto LABEL_80;
    case 64016:
      v10 = *(_QWORD *)(*((_QWORD *)this + 68) + 48);
LABEL_19:
      v17 = *(_QWORD *)(*(_QWORD *)(v10 + 112) + 48);
      memcpy(a5[2], *(const void **)(v17 + 16), *(unsigned int *)(v17 + 12));
      result = 0;
      v18 = *(_DWORD *)(v17 + 12);
      *((_DWORD *)a5 + 2) = v18;
      *((_DWORD *)a5 + 3) = v18;
      return result;
    case 64017:
      v11 = *(_QWORD *)(*((_QWORD *)this + 68) + 48);
LABEL_21:
      (*(void (**)(_QWORD, void **))(**(_QWORD **)(v11 + 8) + 40))(*(_QWORD *)(v11 + 8), a5);
      return 0;
    case 64018:
      v19 = *((_QWORD *)this + 68);
      v16 = *(_DWORD *)(v19 + 88) + 19;
      v20 = *(_QWORD *)(v19 + 48);
      v13 = *(_DWORD *)(v20 + 160);
      v14 = *(_QWORD *)(v20 + 24);
      goto LABEL_26;
    case 64019:
      result = 0;
      v9 = *(_DWORD *)(*((_QWORD *)this + 68) + 88) + 19;
      goto LABEL_80;
    case 64020:
      result = 0;
      v9 = *(_DWORD *)(*((_QWORD *)this + 68) + 88);
      goto LABEL_80;
    case 64021:
      v21 = *((_QWORD *)this + 68);
      v16 = *(_DWORD *)(v21 + 92);
      v13 = *(_DWORD *)(v21 + 80);
      v14 = *(_QWORD *)(v21 + 64);
LABEL_26:
      v15 = (float **)a5;
LABEL_27:
      EndpointVAD2::GetInterleavedFeaturesFromQueue(v15, v16, v13, v14);
      return 0;
    case 64022:
      result = 0;
      *(_BYTE *)a5 = *(_DWORD *)(*((_QWORD *)this + 68) + 28) == 0;
      return result;
    case 64023:
      if (EndpointVAD2LogScope(void)::once != -1)
        dispatch_once(&EndpointVAD2LogScope(void)::once, &__block_literal_global_5);
      if (EndpointVAD2LogScope(void)::scope)
      {
        v8 = *(NSObject **)EndpointVAD2LogScope(void)::scope;
        if (!*(_QWORD *)EndpointVAD2LogScope(void)::scope)
          return 4294956449;
      }
      else
      {
        v8 = MEMORY[0x1E0C81028];
      }
      if (!os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
        return 4294956449;
      v26 = 136315394;
      v27 = "AUEndpointVAD2.cpp";
      v28 = 1024;
      v29 = 534;
      v25 = "%25s:%-5d kAUEndpointVAD2Property_EventHandler is write-only.";
      goto LABEL_102;
    case 64024:
      if (EndpointVAD2LogScope(void)::once != -1)
        dispatch_once(&EndpointVAD2LogScope(void)::once, &__block_literal_global_5);
      if (EndpointVAD2LogScope(void)::scope)
      {
        v8 = *(NSObject **)EndpointVAD2LogScope(void)::scope;
        if (!*(_QWORD *)EndpointVAD2LogScope(void)::scope)
          return 4294956449;
      }
      else
      {
        v8 = MEMORY[0x1E0C81028];
      }
      if (!os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
        return 4294956449;
      v26 = 136315394;
      v27 = "AUEndpointVAD2.cpp";
      v28 = 1024;
      v29 = 539;
      v25 = "%25s:%-5d kAUEndpointVAD2Property_DoneProcessingAudioForNonRealTimeDecode is write-only.";
      goto LABEL_102;
    case 64025:
      result = 0;
      v22 = *(_DWORD *)(*((_QWORD *)this + 68) + 112);
      goto LABEL_48;
    case 64026:
      result = 0;
      v22 = *(_DWORD *)(*((_QWORD *)this + 68) + 116);
      goto LABEL_48;
    case 64027:
      result = 0;
      v22 = *(_DWORD *)(*((_QWORD *)this + 68) + 120);
      goto LABEL_48;
    case 64028:
      result = 0;
      v22 = *(_DWORD *)(*((_QWORD *)this + 68) + 124);
      goto LABEL_48;
    case 64029:
      result = 0;
      v22 = *(_DWORD *)(*((_QWORD *)this + 68) + 128);
      goto LABEL_48;
    case 64030:
      result = 0;
      v22 = *(_DWORD *)(*((_QWORD *)this + 68) + 132);
      goto LABEL_48;
    case 64031:
      result = 0;
      v22 = *(_DWORD *)(*((_QWORD *)this + 68) + 136);
      goto LABEL_48;
    case 64032:
      result = 0;
      v22 = *(_DWORD *)(*((_QWORD *)this + 68) + 140);
LABEL_48:
      *(_DWORD *)a5 = v22;
      return result;
    case 64033:
      if (EndpointVAD2LogScope(void)::once != -1)
        dispatch_once(&EndpointVAD2LogScope(void)::once, &__block_literal_global_5);
      if (EndpointVAD2LogScope(void)::scope)
      {
        v8 = *(NSObject **)EndpointVAD2LogScope(void)::scope;
        if (!*(_QWORD *)EndpointVAD2LogScope(void)::scope)
          return 4294956449;
      }
      else
      {
        v8 = MEMORY[0x1E0C81028];
      }
      if (!os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
        return 4294956449;
      v26 = 136315394;
      v27 = "AUEndpointVAD2.cpp";
      v28 = 1024;
      v29 = 584;
      v25 = "%25s:%-5d kAUEndpointVAD2Property_RecurrentVADSpeechDetectionEvent cannot be directly accessed.";
      goto LABEL_102;
    case 64034:
      if (EndpointVAD2LogScope(void)::once != -1)
        dispatch_once(&EndpointVAD2LogScope(void)::once, &__block_literal_global_5);
      if (EndpointVAD2LogScope(void)::scope)
      {
        v8 = *(NSObject **)EndpointVAD2LogScope(void)::scope;
        if (!*(_QWORD *)EndpointVAD2LogScope(void)::scope)
          return 4294956449;
      }
      else
      {
        v8 = MEMORY[0x1E0C81028];
      }
      if (!os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
        return 4294956449;
      v26 = 136315394;
      v27 = "AUEndpointVAD2.cpp";
      v28 = 1024;
      v29 = 589;
      v25 = "%25s:%-5d kAUEndpointVAD2Property_RecurrentVADNonspeechDetectionEvent cannot be directly accessed.";
      goto LABEL_102;
    case 64035:
      if (EndpointVAD2LogScope(void)::once != -1)
        dispatch_once(&EndpointVAD2LogScope(void)::once, &__block_literal_global_5);
      if (EndpointVAD2LogScope(void)::scope)
      {
        v8 = *(NSObject **)EndpointVAD2LogScope(void)::scope;
        if (!*(_QWORD *)EndpointVAD2LogScope(void)::scope)
          return 4294956449;
      }
      else
      {
        v8 = MEMORY[0x1E0C81028];
      }
      if (!os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
        return 4294956449;
      v26 = 136315394;
      v27 = "AUEndpointVAD2.cpp";
      v28 = 1024;
      v29 = 594;
      v25 = "%25s:%-5d kAUEndpointVAD2Property_EndpointerSpeechDetectionEvent cannot be directly accessed.";
      goto LABEL_102;
    case 64036:
      if (EndpointVAD2LogScope(void)::once != -1)
        dispatch_once(&EndpointVAD2LogScope(void)::once, &__block_literal_global_5);
      if (EndpointVAD2LogScope(void)::scope)
      {
        v8 = *(NSObject **)EndpointVAD2LogScope(void)::scope;
        if (!*(_QWORD *)EndpointVAD2LogScope(void)::scope)
          return 4294956449;
      }
      else
      {
        v8 = MEMORY[0x1E0C81028];
      }
      if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
      {
        v26 = 136315394;
        v27 = "AUEndpointVAD2.cpp";
        v28 = 1024;
        v29 = 599;
        v25 = "%25s:%-5d kAUEndpointVAD2Property_EndpointerNonspeechDetectionEvent cannot be directly accessed.";
LABEL_102:
        _os_log_impl(&dword_1B5ED0000, v8, OS_LOG_TYPE_DEFAULT, v25, (uint8_t *)&v26, 0x12u);
      }
      return 4294956449;
    case 64037:
      result = 0;
      v9 = *((_DWORD *)this + 139);
      goto LABEL_80;
    case 64038:
      result = 0;
      v23 = *((double *)this + 70);
      goto LABEL_78;
    case 64039:
      result = 0;
      v23 = *((double *)this + 71);
      goto LABEL_78;
    case 64040:
      result = 0;
      v9 = *((_DWORD *)this + 144);
      goto LABEL_80;
    case 64041:
      result = 0;
      v23 = *((double *)this + 73);
      goto LABEL_78;
    case 64042:
      result = 0;
      v23 = *((double *)this + 74);
      goto LABEL_78;
    case 64043:
      result = 0;
      v24 = *(_QWORD *)(*((_QWORD *)this + 68) + 32);
      goto LABEL_77;
    case 64044:
      result = 0;
      v24 = *(_QWORD *)(*((_QWORD *)this + 68) + 48);
LABEL_77:
      v23 = *(float *)(v24 + 164);
LABEL_78:
      *(double *)a5 = v23;
      return result;
    default:
      if (a2 == 3700)
      {
        result = 0;
        v9 = *((unsigned __int8 *)this + 376);
      }
      else
      {
        if (a2 != 21)
          return 4294956417;
        v9 = (*(uint64_t (**)(AUEndpointVAD2 *))(*(_QWORD *)this + 576))(this);
        result = 0;
      }
LABEL_80:
      *(_DWORD *)a5 = v9;
      break;
  }
  return result;
}

uint64_t AUEndpointVAD2::SetProperty(AUEndpointVAD2 *this, int a2, int a3, unsigned int a4, CFDictionaryRef theDict, unsigned int a6)
{
  uint64_t result;
  double v9;
  uint64_t Element;
  int v11;
  int v12;
  const __CFDictionary *Value;
  const __CFDictionary *v14;
  const __CFDictionary *v15;
  const __CFDictionary *v16;
  const __CFDictionary **v17;
  const __CFDictionary **v18;
  const __CFDictionary **v19;
  const __CFDictionary **v20;

  if (a3)
    return 4294956417;
  result = 4294956431;
  switch(a2)
  {
    case 64010:
      if (*((_BYTE *)this + 17))
        return 4294956447;
      Value = (const __CFDictionary *)CFDictionaryGetValue(theDict, CFSTR("CommonParameters"));
      v14 = (const __CFDictionary *)CFDictionaryGetValue(theDict, CFSTR("ULDATParameters"));
      v15 = (const __CFDictionary *)CFDictionaryGetValue(theDict, CFSTR("ASAParameters"));
      v16 = (const __CFDictionary *)CFDictionaryGetValue(theDict, CFSTR("ViterbiParameters"));
      EndpointVAD2::SetProperties(Value, (CFTypeRef *)(*((_QWORD *)this + 68) + 144), v17);
      EndpointVAD2::SetProperties(v14, (CFTypeRef *)(*((_QWORD *)this + 68) + 152), v18);
      EndpointVAD2::SetProperties(v15, (CFTypeRef *)(*((_QWORD *)this + 68) + 160), v19);
      EndpointVAD2::SetProperties(v16, (CFTypeRef *)(*((_QWORD *)this + 68) + 168), v20);
      result = 0;
      *((_BYTE *)this + 552) = 1;
      return result;
    case 64011:
    case 64012:
    case 64013:
    case 64014:
    case 64015:
    case 64016:
    case 64017:
    case 64018:
    case 64019:
    case 64020:
    case 64021:
    case 64033:
    case 64034:
    case 64035:
    case 64036:
    case 64037:
    case 64038:
    case 64039:
    case 64040:
    case 64041:
    case 64042:
    case 64043:
    case 64044:
      return result;
    case 64022:
      result = 0;
      *(_DWORD *)(*((_QWORD *)this + 68) + 28) = *(_BYTE *)theDict == 0;
      return result;
    case 64023:
      AUEndpointVAD2::AddHandler(this, (uint64_t)theDict);
      goto LABEL_25;
    case 64024:
      if (*(_BYTE *)theDict)
      {
        v9 = *((double *)this + 80);
        Element = ausdk::AUScope::SafeGetElement((AUEndpointVAD2 *)((char *)this + 80), 0);
        EndpointVAD2::DoneProcessingAudio(*((EndpointVAD2 **)this + 68), v9 / *(double *)(Element + 80));
      }
      goto LABEL_25;
    case 64025:
      result = 0;
      *(_DWORD *)(*((_QWORD *)this + 68) + 112) = *(_DWORD *)theDict;
      return result;
    case 64026:
      result = 0;
      *(_DWORD *)(*((_QWORD *)this + 68) + 116) = *(_DWORD *)theDict;
      return result;
    case 64027:
      result = 0;
      *(_DWORD *)(*((_QWORD *)this + 68) + 120) = *(_DWORD *)theDict;
      return result;
    case 64028:
      result = 0;
      *(_DWORD *)(*((_QWORD *)this + 68) + 124) = *(_DWORD *)theDict;
      return result;
    case 64029:
      result = 0;
      *(_DWORD *)(*((_QWORD *)this + 68) + 128) = *(_DWORD *)theDict;
      return result;
    case 64030:
      result = 0;
      *(_DWORD *)(*((_QWORD *)this + 68) + 132) = *(_DWORD *)theDict;
      return result;
    case 64031:
      result = 0;
      *(_DWORD *)(*((_QWORD *)this + 68) + 136) = *(_DWORD *)theDict;
      return result;
    case 64032:
      result = 0;
      *(_DWORD *)(*((_QWORD *)this + 68) + 140) = *(_DWORD *)theDict;
      return result;
    default:
      if (a2 == 3700)
        return result;
      if (a2 != 21)
        return 4294956417;
      if (a6 >= 4)
      {
        v11 = *(_DWORD *)theDict;
        v12 = *(_DWORD *)theDict != 0;
        if (v12 != (*(unsigned int (**)(AUEndpointVAD2 *))(*(_QWORD *)this + 576))(this))
          (*(void (**)(AUEndpointVAD2 *, BOOL))(*(_QWORD *)this + 584))(this, v11 != 0);
LABEL_25:
        result = 0;
      }
      else
      {
        result = 4294956445;
      }
      break;
  }
  return result;
}

uint64_t AUEndpointVAD2::CanScheduleParameters(AUEndpointVAD2 *this)
{
  return 0;
}

uint64_t AUEndpointVAD2::ProcessMultipleBufferLists(AUEndpointVAD2 *this, unsigned int *a2, uint64_t a3, unsigned int a4, const AudioBufferList **a5, unsigned int a6, AudioBufferList **a7)
{
  int v10;
  double v11;
  double v12;
  double v13;
  uint64_t v14;
  const AudioBufferList *v15;
  int v16;
  double v17;
  unsigned int v18;
  unsigned int j;
  uint64_t v20;
  uint64_t v21;
  float *v22;
  uint64_t v23;
  unsigned int v24;
  unint64_t v25;
  int *v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  float v30;
  float v31;
  int v32;
  uint64_t v33;
  void *mData;
  void *v35;
  uint64_t result;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  _QWORD *i;
  uint64_t v41;
  _QWORD *v42;
  void *v43;
  void **v44;
  uint64_t v45;
  NSObject *v46;
  int v47;
  double v48;
  uint64_t v49;
  int v50;
  double v51;
  double v52;
  double v53;
  uint64_t v54;
  int v56;
  _BYTE __p[18];
  __int16 v58;
  int v59;
  __int16 v60;
  int v61;
  uint64_t v62;

  v62 = *MEMORY[0x1E0C80C00];
  v10 = *((_DWORD *)this + 156);
  *((_DWORD *)this + 156) = v10 + 1;
  v11 = *((double *)this + 80);
  if (!v10)
  {
    v37 = *((_QWORD *)this + 35);
    mach_timebase_info((mach_timebase_info_t)__p);
    LODWORD(v38) = *(_DWORD *)&__p[4];
    LODWORD(v39) = *(_DWORD *)__p;
    *((double *)this + 79) = (double)v37 / ((double)v38 / (double)v39 * 1000000000.0);
    for (i = (_QWORD *)*((_QWORD *)this + 75); i != *((_QWORD **)this + 76); ++i)
    {
      v41 = *i;
      v42 = (_QWORD *)(*i + 80);
      v44 = (void **)(*i + 104);
      v43 = *v44;
      *(_QWORD *)(v41 + 88) = *v42;
      *(_QWORD *)(v41 + 112) = v43;
      *(_QWORD *)(v41 + 136) = *(_QWORD *)(v41 + 128);
      v45 = *(_QWORD *)(v41 + 32);
      *(_QWORD *)(v41 + 16) = *(_QWORD *)(v41 + 8);
      *(_QWORD *)(v41 + 40) = v45;
      *(_QWORD *)(v41 + 64) = *(_QWORD *)(v41 + 56);
      std::vector<EndpointDecisionLayerVAD2::Decision>::reserve((uint64_t)v42);
      std::vector<double>::reserve(v44, 8uLL);
      std::vector<double>::reserve((void **)(v41 + 128), 8uLL);
      std::vector<EndpointDecisionLayerVAD2::Decision>::reserve(v41 + 8);
      std::vector<double>::reserve((void **)(v41 + 32), 8uLL);
      std::vector<double>::reserve((void **)(v41 + 56), 8uLL);
      *(_QWORD *)(v41 + 152) = 0;
    }
  }
  v12 = *(double *)(ausdk::AUScope::SafeGetElement((AUEndpointVAD2 *)((char *)this + 80), 0) + 80);
  if (*((_BYTE *)this + 376) && *((_DWORD *)this + 84) != (_DWORD)a3)
  {
    if (EndpointVAD2LogScope(void)::once != -1)
      dispatch_once(&EndpointVAD2LogScope(void)::once, &__block_literal_global_5);
    if (EndpointVAD2LogScope(void)::scope)
    {
      v46 = *(NSObject **)EndpointVAD2LogScope(void)::scope;
      if (!*(_QWORD *)EndpointVAD2LogScope(void)::scope)
        return 4294956422;
    }
    else
    {
      v46 = MEMORY[0x1E0C81028];
    }
    if (os_log_type_enabled(v46, OS_LOG_TYPE_ERROR))
    {
      v47 = *((_DWORD *)this + 84);
      *(_DWORD *)__p = 136315906;
      *(_QWORD *)&__p[4] = "AUEndpointVAD2.cpp";
      *(_WORD *)&__p[12] = 1024;
      *(_DWORD *)&__p[14] = 900;
      v58 = 1024;
      v59 = a3;
      v60 = 1024;
      v61 = v47;
      _os_log_impl(&dword_1B5ED0000, v46, OS_LOG_TYPE_ERROR, "%25s:%-5d Incorrect number of input samples! Received %d, but expected %d.", __p, 0x1Eu);
    }
    return 4294956422;
  }
  if (((*(uint64_t (**)(AUEndpointVAD2 *))(*(_QWORD *)this + 576))(this) & 1) == 0)
  {
    v14 = *((_QWORD *)this + 68);
    v15 = *a5;
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    ++*(_DWORD *)(v14 + 384);
    v16 = *(_DWORD *)(*(_QWORD *)(v14 + 64) + 88);
    v17 = v11 / v12;
    FeaturesDSPWrapper::ProcessAudio(*(FeaturesDSPWrapper **)(v14 + 32), v15, v17, a3);
    FeaturesDSPWrapper::ProcessAudio(*(FeaturesDSPWrapper **)(v14 + 48), v15, v17, a3);
    v18 = *(_DWORD *)(*(_QWORD *)(v14 + 64) + 88) - v16;
    *(_DWORD *)(v14 + 80) = v18;
    if (v18)
    {
      for (j = 0; j < v18; ++j)
      {
        ++*(_DWORD *)(v14 + 384);
        v20 = *(_QWORD *)(v14 + 64);
        v56 = j - v18;
        VectorTimeSeriesSynchronizer<float>::GetSynchronizedVector(v20, &v56, *(_QWORD *)(v14 + 272));
        v21 = *(_QWORD *)(v14 + 272);
        v22 = *(float **)(v21 + 24);
        v23 = *(_QWORD *)(v21 + 32) - (_QWORD)v22;
        if ((v23 & 0x3FFFFFFFCLL) != 0)
        {
          v24 = 0;
          v25 = (unint64_t)v23 >> 2;
          v26 = **(int ***)(v14 + 296);
          v27 = v23 >> 2;
          v28 = ((unint64_t)v23 >> 2);
          v29 = (v25 - 1);
          do
          {
            if (v27 <= v29)
              __assert_rtn("ElementAt", "FeatureTimeSeries.h", 84, "index < mArray.size()");
            v30 = *v22++;
            v31 = (float)(unint64_t)(v30 + 0.5);
            v32 = *v26++;
            v24 += v32 * v31;
            --v28;
          }
          while (v28);
        }
        else
        {
          v24 = 0;
        }
        v33 = *(_QWORD *)(v14 + 96);
        if (*(_BYTE *)(v14 + 288))
        {
          v13 = MixViterbiProd::Update(v33, *(_DWORD *)(v14 + 292), v24, (_OWORD *)(v21 + 48));
        }
        else
        {
          v13 = MixViterbiProd::Initialize(v33, v24, (_OWORD *)(v21 + 48));
          *(_BYTE *)(v14 + 288) = 1;
        }
        *(_DWORD *)(v14 + 292) = v24;
        v18 = *(_DWORD *)(v14 + 80);
      }
    }
    if (SHIBYTE(v59) < 0)
      operator delete(*(void **)__p);
    if (!*(_DWORD *)(v14 + 28))
    {
      *(double *)__p = *(double *)(v14 + 16) * v17;
      *(double *)&__p[8] = v17;
      v48 = *(float *)(v14 + 112);
      v49 = *(_QWORD *)(v14 + 96);
      v50 = *(unsigned __int8 *)(v49 + 232);
      v51 = 0.0;
      if (!*(_BYTE *)(v49 + 232))
      {
        MRRingBuffer<DataTimeStamp>::GetSample(*(_QWORD *)(v49 + 192), *(_DWORD *)(v49 + 224) - 1);
        v51 = v52;
      }
      v53 = v17 - v48;
      std::vector<std::vector<float>>::__clear[abi:ne180100]((uint64_t *)(v14 + 336));
      *(_QWORD *)(v14 + 320) = *(_QWORD *)(v14 + 312);
      v54 = *(_QWORD *)(v14 + 96);
      if (v50 || v53 > v51)
      {
        v56 = 0;
        if (MixViterbiProd::getForceDecodeTimeFramesRelativeToPresent((MixViterbiProd *)v54, v53, &v56)
          && v56 > *(_DWORD *)(v54 + 216))
        {
          MixViterbiProd::updateDecode(v54, (_QWORD *)(v14 + 336), (char **)(v14 + 312), v56);
        }
      }
      else
      {
        if (*(_BYTE *)(v54 + 232))
          __assert_rtn("DecodeFromConvergence", "MixViterbiProd.cpp", 166, "!mNeverConverged");
        MixViterbiProd::updateDecode(*(_QWORD *)(v14 + 96), (_QWORD *)(v14 + 336), (char **)(v14 + 312), *(_DWORD *)(v54 + 224));
      }
      if (*(_QWORD *)(v14 + 344) != *(_QWORD *)(v14 + 336) && *(_QWORD *)(v14 + 320) != *(_QWORD *)(v14 + 312))
        EndpointVAD2::UpdateAndDispatchDecisions(v14, (_QWORD **)(v14 + 336), (uint64_t *)(v14 + 312), (uint64_t)__p, *(_QWORD *)(v14 + 104), *(_DWORD *)(v14 + 24), (_BYTE *)(v14 + 304));
    }
  }
  mData = (*a5)->mBuffers[0].mData;
  v35 = (*a7)->mBuffers[0].mData;
  if (mData != v35)
    memcpy(v35, mData, (*a5)->mBuffers[0].mDataByteSize);
  result = 0;
  LODWORD(v13) = *((_DWORD *)this + 84);
  *((double *)this + 80) = *((double *)this + 80) + (double)*(unint64_t *)&v13;
  return result;
}

void sub_1B639D5B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t AUEndpointVAD2::Render(AUEndpointVAD2 *this, unsigned int *a2, const AudioTimeStamp *a3, uint64_t a4)
{
  uint64_t result;
  uint64_t Element;
  ausdk::AUInputElement *v10;
  uint64_t v11;
  uint64_t BufferList;
  _QWORD v13[2];

  v13[1] = *MEMORY[0x1E0C80C00];
  if (*((_DWORD *)this + 84) < a4)
    return 4294956422;
  if (!ausdk::AUBase::HasInput(this, 0))
    return 4294956420;
  Element = ausdk::AUScope::SafeGetElement((AUEndpointVAD2 *)((char *)this + 128), 0);
  v10 = (ausdk::AUInputElement *)ausdk::AUScope::SafeGetElement((AUEndpointVAD2 *)((char *)this + 80), 0);
  result = ausdk::AUInputElement::PullInput(v10, a2, a3, 0, a4);
  if (!(_DWORD)result)
  {
    v11 = ausdk::AUScope::SafeGetElement((AUEndpointVAD2 *)((char *)this + 80), 0);
    v13[0] = ausdk::AUBufferList::GetBufferList((ausdk::AUBufferList *)(v11 + 144));
    BufferList = ausdk::AUBufferList::GetBufferList((ausdk::AUBufferList *)(Element + 144));
    return (*(uint64_t (**)(AUEndpointVAD2 *, unsigned int *, uint64_t, uint64_t, _QWORD *, uint64_t, uint64_t *))(*(_QWORD *)this + 184))(this, a2, a4, 1, v13, 1, &BufferList);
  }
  return result;
}

uint64_t AUEndpointVAD2::GetParameterInfo(AUEndpointVAD2 *this, unsigned int a2, unsigned int a3, AudioUnitParameterInfo *a4)
{
  a4->flags = 0x40000000;
  a4->unitName = 0;
  return 4294956418;
}

double AUEndpointVAD2::GetLatency(AUEndpointVAD2 *this)
{
  float *v1;
  float v2;

  v1 = (float *)*((_QWORD *)this + 68);
  v2 = v1[30];
  if (v2 <= v1[31])
    v2 = v1[31];
  if (v1[29] > v2)
    v2 = v1[29];
  return (float)(v1[28] + v2);
}

double AUEndpointVAD2::GetTailTime(AUEndpointVAD2 *this)
{
  return 0.0;
}

uint64_t AUEndpointVAD2::SupportsTail(AUEndpointVAD2 *this)
{
  return 1;
}

BOOL AUEndpointVAD2::StreamFormatWritable(AUEndpointVAD2 *this)
{
  return *((_BYTE *)this + 17) == 0;
}

uint64_t AUEndpointVAD2::SupportedNumChannels(AUEndpointVAD2 *this, const AUChannelInfo **a2)
{
  if (a2)
    *a2 = (const AUChannelInfo *)&AUEndpointVAD2::SupportedNumChannels(AUChannelInfo const**)::sSupportedChannelConfigs;
  return 1;
}

BOOL AUEndpointVAD2::ValidFormat(AUEndpointVAD2 *this, const AudioStreamBasicDescription *a2, unsigned int a3, AudioStreamBasicDescription *a4)
{
  _BOOL4 v5;

  if (ausdk::ASBD::IsCommonFloat32((ausdk::ASBD *)a4, a2))
    v5 = (a4->mFormatFlags & 0x20) != 0 || a4->mChannelsPerFrame == 1;
  else
    v5 = 0;
  return a4->mChannelsPerFrame == 1 && v5;
}

uint64_t AUEndpointVAD2::ShouldBypassEffect(AUEndpointVAD2 *this)
{
  return *((unsigned __int8 *)this + 536);
}

uint64_t AUEndpointVAD2::SetBypassEffect(uint64_t this, char a2)
{
  *(_BYTE *)(this + 536) = a2;
  return this;
}

uint64_t AUEndpointVAD2::HandleEvent(uint64_t result, _DWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v9;
  uint64_t *v10;
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;

  v9 = result;
  v10 = *(uint64_t **)(result + 600);
  if (v10 != *(uint64_t **)(result + 608))
  {
    do
    {
      v13 = *v10++;
      result = (*(uint64_t (**)(uint64_t, _DWORD *, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v13 + 16))(v13, a2, a3, a4, a5, a6);
    }
    while (v10 != *(uint64_t **)(v9 + 608));
  }
  v14 = *a2 - 1;
  if (v14 < 2)
  {
    *(_QWORD *)(v9 + 560) = *(_QWORD *)(a3 + 8);
    *(_QWORD *)(v9 + 568) = *(_QWORD *)(a4 + 8);
  }
  else
  {
    if ((*a2 - 3) >= 2)
      return result;
    *(_QWORD *)(v9 + 584) = *(_QWORD *)(a3 + 8);
    *(_QWORD *)(v9 + 592) = *(_QWORD *)(a4 + 8);
  }
  switch(v14)
  {
    case 0u:
      *(_DWORD *)(v9 + 556) = 1;
      v15 = 64033;
      goto LABEL_13;
    case 1u:
      *(_DWORD *)(v9 + 556) = 0;
      v15 = 64034;
      goto LABEL_13;
    case 2u:
      *(_DWORD *)(v9 + 576) = 1;
      v15 = 64035;
      goto LABEL_13;
    case 3u:
      *(_DWORD *)(v9 + 576) = 0;
      v15 = 64036;
LABEL_13:
      result = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, _QWORD))(*(_QWORD *)v9 + 432))(v9, v15, 0, 0);
      break;
    default:
      return result;
  }
  return result;
}

uint64_t AUEndpointVAD2::SetInputOutputAudioFormat(AUEndpointVAD2 *this, double *a2)
{
  uint64_t Element;
  uint64_t result;
  uint64_t v5;
  _QWORD v6[2];
  __int128 v7;
  uint64_t v8;

  *(double *)v6 = *a2;
  v6[1] = 0x296C70636DLL;
  v7 = xmmword_1B66A1000;
  v8 = 32;
  Element = ausdk::AUScope::SafeGetElement((AUEndpointVAD2 *)((char *)this + 80), 0);
  result = (*(uint64_t (**)(uint64_t, _QWORD *))(*(_QWORD *)Element + 56))(Element, v6);
  if (!(_DWORD)result)
  {
    v5 = ausdk::AUScope::SafeGetElement((AUEndpointVAD2 *)((char *)this + 128), 0);
    return (*(uint64_t (**)(uint64_t, _QWORD *))(*(_QWORD *)v5 + 56))(v5, v6);
  }
  return result;
}

void `non-virtual thunk to'AUEndpointVAD2::~AUEndpointVAD2(AUEndpointVAD2 *this)
{
  AUEndpointVAD2::~AUEndpointVAD2((AUEndpointVAD2 *)((char *)this - 528));
}

{
  AUEndpointVAD2::~AUEndpointVAD2((AUEndpointVAD2 *)((char *)this - 528));
  JUMPOUT(0x1BCC95CECLL);
}

uint64_t `non-virtual thunk to'AUEndpointVAD2::HandleEvent(uint64_t a1, _DWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return AUEndpointVAD2::HandleEvent(a1 - 528, a2, a3, a4, a5, a6);
}

void AUEndpointVAD2::AddHandler(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;
  unint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;

  v4 = (_QWORD *)a1[76];
  v5 = a1[77];
  if ((unint64_t)v4 >= v5)
  {
    v7 = (_QWORD *)a1[75];
    v8 = v4 - v7;
    v9 = v8 + 1;
    if ((unint64_t)(v8 + 1) >> 61)
      std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
    v10 = v5 - (_QWORD)v7;
    if (v10 >> 2 > v9)
      v9 = v10 >> 2;
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF8)
      v11 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v11 = v9;
    if (v11)
    {
      if (v11 >> 61)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v12 = (char *)operator new(8 * v11);
    }
    else
    {
      v12 = 0;
    }
    v13 = &v12[8 * v8];
    *(_QWORD *)v13 = a2;
    v6 = v13 + 8;
    if (v4 != v7)
    {
      do
      {
        v14 = *--v4;
        *((_QWORD *)v13 - 1) = v14;
        v13 -= 8;
      }
      while (v4 != v7);
      v4 = (_QWORD *)a1[75];
    }
    a1[75] = v13;
    a1[76] = v6;
    a1[77] = &v12[8 * v11];
    if (v4)
      operator delete(v4);
  }
  else
  {
    *v4 = a2;
    v6 = v4 + 1;
  }
  a1[76] = v6;
}

void AULoudnessNormalizer::~AULoudnessNormalizer(AULoudnessNormalizer *this)
{
  AUDspLib::~AUDspLib(this);
  JUMPOUT(0x1BCC95CECLL);
}

uint64_t AULoudnessNormalizer::Initialize(AULoudnessNormalizer *this)
{
  unsigned int v2;

  v2 = *(_DWORD *)(ausdk::AUScope::SafeGetElement((AULoudnessNormalizer *)((char *)this + 80), 0) + 108);
  if (v2 < 3 || v2 == *((unsigned __int16 *)this + 900))
    return AUDspLib::Initialize(this);
  else
    return 4294956428;
}

uint64_t AULoudnessNormalizer::GetPropertyInfo(AULoudnessNormalizer *this, int a2, unsigned int a3, unsigned int a4, unsigned int *a5, BOOL *a6)
{
  if (a2 != 1920165236)
    return AUDspLib::GetPropertyInfo(this, a2, a3, a4, a5, a6);
  *a6 = 1;
  *a5 = 4;
  return 0;
}

uint64_t AULoudnessNormalizer::SetProperty(AULoudnessNormalizer *this, int a2, int a3, unsigned int a4, int *a5, void *a6, int *a7)
{
  DspLib::LoudnessNormalizer::Algorithm *v9;
  int v10;
  float v11;
  unsigned __int8 v13;

  if (a2 != 1920165236)
    return AUDspLib::SetProperty(this, a2, a3, a4, a5, a6, a7);
  v9 = (DspLib::LoudnessNormalizer::Algorithm *)*((_QWORD *)this + 66);
  if (v9)
  {
    caulk::pooled_semaphore_mutex::_lock((AULoudnessNormalizer *)((char *)this + 1824));
    v10 = *a5;
    if (*a5 == 2)
    {
      v13 = atomic_load((unsigned __int8 *)this + 1821);
      if ((v13 & 1) == 0)
        goto LABEL_11;
    }
    else if (v10 != 1)
    {
      if (!v10)
      {
        DspLib::LoudnessNormalizer::Algorithm::expectedLoudnessAfterReset(v9);
LABEL_10:
        DspLib::LoudnessNormalizer::Algorithm::resetLoudnessHistory(v9, v11);
      }
LABEL_11:
      caulk::pooled_semaphore_mutex::_unlock((AULoudnessNormalizer *)((char *)this + 1824));
      return 0;
    }
    v11 = DspLib::LoudnessNormalizer::Algorithm::maxGainKneePoint(v9);
    goto LABEL_10;
  }
  return 0;
}

void sub_1B639DC8C(_Unwind_Exception *a1)
{
  caulk::pooled_semaphore_mutex *v1;

  caulk::pooled_semaphore_mutex::_unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t AULoudnessNormalizer::SetParameter(AULoudnessNormalizer *this, unsigned int a2, uint64_t a3, uint64_t a4, __n128 a5)
{
  float v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v9;
  ausdk::AUScope *Scope;
  ausdk::AUElement *Element;
  unsigned int v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  ausdk::AUScope *v17;
  float v18;
  DspLib::LoudnessNormalizer::Algorithm *v20;
  float v21;
  ausdk::AUScope *v22;
  ausdk::AUElement *v23;
  uint64_t v24;
  ausdk::AUScope *v25;
  uint64_t v26;
  ausdk::AUScope *v27;
  uint64_t v28;

  v5 = a5.n128_f32[0];
  v6 = a4;
  v7 = a3;
  v9 = *((_DWORD *)this + 439) - 1;
  if (v9 >= a2)
    v9 = a2;
  if (a2 == 1937141612)
  {
    (*(void (**)(AULoudnessNormalizer *, uint64_t, uint64_t, uint64_t, __n128))(*(_QWORD *)this + 152))(this, 1, a3, a4, a5);
    Scope = (ausdk::AUScope *)ausdk::AUBase::GetScope(this, v7);
    Element = (ausdk::AUElement *)ausdk::AUScope::SafeGetElement(Scope, v6);
    v12 = 1937141612;
LABEL_11:
    v18 = v5;
    goto LABEL_12;
  }
  v14 = *(unsigned int *)(*((_QWORD *)this + 211) + 4 * v9);
  if ((_DWORD)v14 == 1)
  {
    AULoudnessNormalizer::mSystemVolume_dB = a5.n128_u32[0];
    v15 = *((_QWORD *)this + 66);
    if (v15)
      (*(void (**)(uint64_t, uint64_t, __n128))(*(_QWORD *)v15 + 128))(v15, 1, a5);
    v16 = *((_QWORD *)this + 68);
    if (*((_QWORD *)this + 69) != v16)
      *(float *)(v16 + 4) = v5;
LABEL_10:
    v17 = (ausdk::AUScope *)ausdk::AUBase::GetScope(this, v7);
    Element = (ausdk::AUElement *)ausdk::AUScope::SafeGetElement(v17, v6);
    v12 = a2;
    goto LABEL_11;
  }
  switch(a2)
  {
    case 0x3EAu:
      v26 = *((_QWORD *)this + 66);
      if (!v26)
        return 0;
      *(_BYTE *)(v26 + 1364) = roundf(a5.n128_f32[0]) != 0.0;
      v27 = (ausdk::AUScope *)ausdk::AUBase::GetScope(this, a3);
      Element = (ausdk::AUElement *)ausdk::AUScope::SafeGetElement(v27, v6);
      v12 = 1002;
      goto LABEL_11;
    case 0x3E9u:
      v24 = *((_QWORD *)this + 66);
      if (!v24)
        return 0;
      *(_DWORD *)(v24 + 1360) = a5.n128_u32[0];
      v25 = (ausdk::AUScope *)ausdk::AUBase::GetScope(this, a3);
      Element = (ausdk::AUElement *)ausdk::AUScope::SafeGetElement(v25, v6);
      v12 = 1001;
      goto LABEL_11;
    case 0x3E8u:
      v20 = (DspLib::LoudnessNormalizer::Algorithm *)*((_QWORD *)this + 66);
      if (!v20)
        return 0;
      v21 = DspLib::LoudnessNormalizer::Algorithm::processEnvironmentalNoiseSmoothing(*((DspLib::LoudnessNormalizer::Algorithm **)this + 66), a5.n128_f32[0]);
      DspLib::LoudnessNormalizer::Algorithm::setEnvironmentalNoiseSPL(v20, v21);
      v22 = (ausdk::AUScope *)ausdk::AUBase::GetScope(this, v7);
      v23 = (ausdk::AUElement *)ausdk::AUScope::SafeGetElement(v22, v6);
      ausdk::AUElement::SetParameter(v23, 0x3E8u, v5, 0);
      Element = (ausdk::AUElement *)ausdk::AUScope::SafeGetElement((AULoudnessNormalizer *)((char *)this + 32), 0);
      v12 = 1004;
      v18 = v21;
LABEL_12:
      ausdk::AUElement::SetParameter(Element, v12, v18, 0);
      return 0;
  }
  if ((_DWORD)v14 == 47 || (_DWORD)v14 == 34)
  {
    v28 = *((_QWORD *)this + 66);
    if (!v28)
    {
      ausdk::AUBase::SetParameter(this, a2, a3, a4, a5.n128_f32[0]);
      return 0;
    }
    *(_DWORD *)(*((_QWORD *)this + 68) + 4 * v14) = a5.n128_u32[0];
    (*(void (**)(uint64_t, __n128))(*(_QWORD *)v28 + 128))(v28, a5);
    goto LABEL_10;
  }
  return AUDspLib::SetParameter(this, a2, a3, a4, a5.n128_f32[0]);
}

uint64_t AULoudnessNormalizer::ProcessMultipleBufferLists(float ***this, unsigned int *a2, uint64_t a3, unsigned int a4, const AudioBufferList **a5, unsigned int a6, const AudioBufferList **a7)
{
  uint64_t v8;
  float **v9;
  float v10;
  ausdk::AUElement *Element;

  v8 = AUDspLib::ProcessMultipleBufferLists((AUDspLib *)this, a2, a3, a4, a5, a6, a7);
  v9 = this[66];
  if (v9)
  {
    v10 = DspLib::LoudnessNormalizer::Algorithm::totalMomentaryGainIndB(v9);
    Element = (ausdk::AUElement *)ausdk::AUScope::SafeGetElement((ausdk::AUScope *)(this + 4), 0);
    ausdk::AUElement::SetParameter(Element, 0x64u, v10, 0);
  }
  return v8;
}

BOOL AULoudnessNormalizer::BusCountWritable(AULoudnessNormalizer *this, int a2)
{
  return a2 == 1;
}

uint64_t AULoudnessNormalizer::GetParameterInfo(AULoudnessNormalizer *this, int a2, unsigned int a3, AudioUnitParameterInfo *buffer)
{
  const __CFString *v5;

  switch(a3)
  {
    case 0x3E8u:
      buffer->unit = kAudioUnitParameterUnit_Decibels;
      *(_QWORD *)&buffer->minValue = 0x4316000000000000;
      *(_QWORD *)&buffer->defaultValue = 0xC800200000000000;
      v5 = CFSTR("environmental noise dB SPL - raw");
      goto LABEL_9;
    case 0x3E9u:
      buffer->unit = kAudioUnitParameterUnit_Decibels;
      *(_QWORD *)&buffer->minValue = 0x3F80000000000000;
      *(_QWORD *)&buffer->defaultValue = 0xC800200000000000;
      v5 = CFSTR("environmental wind activity");
      goto LABEL_9;
    case 0x3EAu:
      buffer->unit = kAudioUnitParameterUnit_Boolean;
      *(_QWORD *)&buffer->minValue = 0x3F80000000000000;
      *(_QWORD *)&buffer->defaultValue = 0xC800200000000000;
      v5 = CFSTR("environmental self voice activity");
      goto LABEL_9;
    case 0x3EBu:
      return AUDspLib::GetParameterInfo(this, a2, a3, buffer);
    case 0x3ECu:
      buffer->unit = kAudioUnitParameterUnit_Decibels;
      v5 = CFSTR("environmental noise dB SPL - smooth");
      *(_QWORD *)&buffer->minValue = 0x4316000000000000;
      buffer->cfNameString = CFSTR("environmental noise dB SPL - smooth");
      buffer->defaultValue = 0.0;
      buffer->flags = 1208000512;
      goto LABEL_11;
    default:
      if (a3 == 1937141612)
      {
        AUDspLib::GetParameterInfo(this, a2, 1u, buffer);
        buffer->flags += 0x10000000;
      }
      else
      {
        if (a3 != 100)
          return AUDspLib::GetParameterInfo(this, a2, a3, buffer);
        buffer->unit = kAudioUnitParameterUnit_Decibels;
        *(_QWORD *)&buffer->minValue = 0x42480000C2480000;
        *(_QWORD *)&buffer->defaultValue = 0x4800800000000000;
        v5 = CFSTR("total momentary gain");
LABEL_9:
        buffer->cfNameString = v5;
LABEL_11:
        CFStringGetCString(v5, buffer->name, 52, 0x8000100u);
      }
      return 0;
  }
}

uint64_t AULoudnessNormalizer::RestoreState(OpaqueAudioComponentInstance **this, const void *a2)
{
  uint64_t result;
  float v5;
  ausdk::AUElement *Element;

  result = AUDspLib::RestoreState(this, a2);
  if (!(_DWORD)result)
  {
    result = AUDspLib::loadDefaultAudioChannelLayout((AUDspLib *)this, (CFDictionaryRef)a2);
    if (!(_DWORD)result)
    {
      v5 = *(float *)&AULoudnessNormalizer::mSystemVolume_dB;
      Element = (ausdk::AUElement *)ausdk::AUScope::SafeGetElement((ausdk::AUScope *)(this + 4), 0);
      ausdk::AUElement::SetParameter(Element, 1u, v5, 0);
      return 0;
    }
  }
  return result;
}

uint64_t AULoudnessNormalizer::GetParameterValueStrings(AULoudnessNormalizer *this, unsigned int a2, unsigned int a3, const __CFArray **a4)
{
  int v5;
  const void **v6;
  const CFArrayCallBacks *v7;
  CFIndex v8;
  uint64_t result;
  __int128 *v10;
  const __CFArray *v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  if (!a4)
    return 0;
  v5 = *(_DWORD *)(*((_QWORD *)this + 211) + 4 * a3);
  if ((v5 - 11) <= 1)
  {
    v6 = (const void **)&DspLib::LoudnessMeter::Parameters::kStateNames;
    v7 = (const CFArrayCallBacks *)MEMORY[0x1E0C9B378];
LABEL_4:
    v8 = 4;
    goto LABEL_17;
  }
  result = 4294956418;
  if (v5 <= 18)
  {
    if (v5 == 2)
    {
      v12 = xmmword_1E69D7F50;
      v13 = *(_OWORD *)&off_1E69D7F60;
      v7 = (const CFArrayCallBacks *)MEMORY[0x1E0C9B378];
      v6 = (const void **)&v12;
      goto LABEL_4;
    }
    if (v5 != 16)
      return result;
    v16 = xmmword_1E69D7FB0;
    v17 = *(_OWORD *)&off_1E69D7FC0;
    v18 = xmmword_1E69D7FD0;
    v19 = *(_OWORD *)&off_1E69D7FE0;
    v12 = xmmword_1E69D7F70;
    v13 = *(_OWORD *)&off_1E69D7F80;
    v14 = xmmword_1E69D7F90;
    v15 = *(_OWORD *)&off_1E69D7FA0;
    v7 = (const CFArrayCallBacks *)MEMORY[0x1E0C9B378];
    v6 = (const void **)&v12;
    v8 = 16;
  }
  else
  {
    switch(v5)
    {
      case 19:
        v10 = &xmmword_1E69D8018;
        break;
      case 32:
        v10 = &xmmword_1E69D7FF0;
        break;
      case 36:
        v12 = xmmword_1E69D8008;
        v7 = (const CFArrayCallBacks *)MEMORY[0x1E0C9B378];
        v6 = (const void **)&v12;
        v8 = 2;
        goto LABEL_17;
      default:
        return result;
    }
    v12 = *v10;
    *(_QWORD *)&v13 = *((_QWORD *)v10 + 2);
    v7 = (const CFArrayCallBacks *)MEMORY[0x1E0C9B378];
    v6 = (const void **)&v12;
    v8 = 3;
  }
LABEL_17:
  v11 = CFArrayCreate(0, v6, v8, v7);
  result = 0;
  *a4 = v11;
  return result;
}

uint64_t AULoudnessNormalizer::Version(AULoudnessNormalizer *this)
{
  return 50593792;
}

DspLib::LoudnessNormalizer::Algorithm *AULoudnessNormalizer::newDspLibAlgorithm(AULoudnessNormalizer *this)
{
  DspLib::LoudnessNormalizer::Algorithm *v1;

  v1 = (DspLib::LoudnessNormalizer::Algorithm *)operator new(0x2780uLL, (std::align_val_t)0x40uLL);
  DspLib::LoudnessNormalizer::Algorithm::Algorithm(v1);
  return v1;
}

void sub_1B639E314(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1BCC95CE0](v1, 64);
  _Unwind_Resume(a1);
}

void AULoudnessNormalizer::AULoudnessNormalizer(AULoudnessNormalizer *this, OpaqueAudioComponentInstance *a2)
{
  _QWORD *v2;
  ausdk::AUScope *v3;
  ausdk::AUElement *Element;
  ausdk::AUElement *v5;
  ausdk::AUElement *v6;
  ausdk::AUElement *v7;
  ausdk::AUElement *v8;
  ausdk::AUElement *v9;
  __int128 v10;
  uint64_t v11;

  v10 = 0uLL;
  v11 = 0;
  v2 = (_QWORD *)AUDspLib::AUDspLib((uint64_t)this, a2, (uint64_t)&DspLib::LoudnessNormalizer::Parameters::kParameterList, &v10, (uint64_t)CFSTR("AULoudnessNormalizer_ViewFactory"), 0);
  *v2 = &off_1E69D7CB0;
  v3 = (ausdk::AUScope *)(v2 + 4);
  Element = (ausdk::AUElement *)ausdk::AUScope::SafeGetElement((ausdk::AUScope *)(v2 + 4), 0);
  ausdk::AUElement::SetParameter(Element, 0x73766F6Cu, 0.0, 0);
  v5 = (ausdk::AUElement *)ausdk::AUScope::SafeGetElement(v3, 0);
  ausdk::AUElement::SetParameter(v5, 0x64u, 0.0, 0);
  v6 = (ausdk::AUElement *)ausdk::AUScope::SafeGetElement(v3, 0);
  ausdk::AUElement::SetParameter(v6, 0x3E8u, 0.0, 0);
  v7 = (ausdk::AUElement *)ausdk::AUScope::SafeGetElement(v3, 0);
  ausdk::AUElement::SetParameter(v7, 0x3ECu, 0.0, 0);
  v8 = (ausdk::AUElement *)ausdk::AUScope::SafeGetElement(v3, 0);
  ausdk::AUElement::SetParameter(v8, 0x3E9u, 0.0, 0);
  v9 = (ausdk::AUElement *)ausdk::AUScope::SafeGetElement(v3, 0);
  ausdk::AUElement::SetParameter(v9, 0x3EAu, 0.0, 0);
}

void sub_1B639E434(_Unwind_Exception *a1)
{
  AUDspLib *v1;

  AUDspLib::~AUDspLib(v1);
  _Unwind_Resume(a1);
}

void clsp::ParameterUpdater::GetArraysData(CFDictionaryRef *this, const CACFDictionary *a2, const __CFString *a3, uint64_t a4, double *a5)
{
  unsigned int *v9;
  const __CFString *Count;
  unsigned int *v11;
  uint64_t v12;
  uint64_t v13;
  std::logic_error *exception;
  std::logic_error *v15;
  char v16[4];
  char v17[8];
  char v18;
  CFArrayRef theArray;
  __int16 v20;
  double v21;
  __CFString v22;
  char __str[512];
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  v21 = 0.0;
  if (!CFDictionaryContainsKey(*this, a2))
  {
    theArray = a2;
    LOBYTE(v20) = 1;
    *(_DWORD *)v17 = 512;
    CACFString::GetCString((const __CFString *)a2, &v22, v17, v9);
    snprintf(__str, 0x200uLL, "Key not found in inConfig: %s", (const char *)&v22);
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, __str);
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5038] + 16);
  }
  theArray = CFArrayCreateMutable(0, 0, MEMORY[0x1E0C9B378]);
  v20 = 257;
  CACFDictionary::GetCACFArray(this, (const __CFString *)a2, (CACFArray *)&theArray);
  Count = (const __CFString *)CFArrayGetCount(theArray);
  if (Count != (const __CFString *)((char *)&a3->isa + 1))
  {
    *(_QWORD *)v17 = a2;
    v18 = 1;
    *(_DWORD *)v16 = 512;
    CACFString::GetCString((const __CFString *)a2, &v22, v16, v11);
    snprintf(__str, 0x200uLL, "Key does not have proper length in inConfig: %s", (const char *)&v22);
    v15 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(v15, __str);
    v15->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5038] + 16);
  }
  v12 = 0;
  v13 = Count;
  do
  {
    CACFArray::GetFloat64(&theArray, v12, &v21);
    *(double *)(a4 + 8 * v12++) = v21;
  }
  while (v13 != v12);
  CACFArray::~CACFArray((CACFArray *)&theArray);
}

void sub_1B639E63C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13)
{
  void *v13;

  __cxa_free_exception(v13);
  CACFString::~CACFString((CACFString *)&a11);
  CACFArray::~CACFArray((CACFArray *)&a13);
  _Unwind_Resume(a1);
}

clsp::FirFilter *clsp::FirFilter::FirFilter(clsp::FirFilter *this, CFArrayRef *a2, double a3)
{
  unint64_t Count;
  uint64_t v7;
  uint64_t v8;
  uint64_t i;
  float v10;
  unint64_t v11;
  int v13;

  if (*a2)
    Count = CFArrayGetCount(*a2);
  else
    Count = 0;
  v13 = 0;
  std::vector<float>::vector(this, Count, &v13);
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  if (*a2)
  {
    v7 = CFArrayGetCount(*a2);
    if (v7)
    {
      v8 = 0;
      for (i = 0; i != v7; ++i)
      {
        CACFArray::GetFloat32(a2, i, (float *)(*(_QWORD *)this + v8));
        v8 += 4;
      }
    }
  }
  v10 = a3;
  v11 = DspLib::FFT::resampleFIRfilterSize((DspLib::FFT *)((uint64_t)(*((_QWORD *)this + 1) - *(_QWORD *)this) >> 2), 48000.0, v10);
  std::vector<float>::resize((uint64_t)this + 24, v11);
  std::vector<float>::resize((uint64_t)this + 48, v11);
  DspLib::FFT::resampleFIRfilter(*(const void **)this, (uint64_t)(*((_QWORD *)this + 1) - *(_QWORD *)this) >> 2, *((float **)this + 3), 48000.0, v10, (uint64_t)(*((_QWORD *)this + 4) - *((_QWORD *)this + 3)) >> 2, (DspLib *)1);
  return this;
}

void sub_1B639E7CC(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void **v3;
  void *v5;
  void *v6;
  void *v7;

  v5 = *v3;
  if (*v3)
  {
    *(_QWORD *)(v1 + 56) = v5;
    operator delete(v5);
  }
  v6 = *v2;
  if (*v2)
  {
    *(_QWORD *)(v1 + 32) = v6;
    operator delete(v6);
  }
  v7 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v7;
    operator delete(v7);
  }
  _Unwind_Resume(exception_object);
}

void clsp::FirFilter::firlsfilter(clsp::FirFilter *this, float *a2, float *__C, unsigned int a4)
{
  vDSP_Length v7;
  uint64_t v8;
  _DWORD *v9;
  uint64_t v10;
  int v11;

  if (a4)
  {
    v7 = (uint64_t)(*((_QWORD *)this + 4) - *((_QWORD *)this + 3)) >> 2;
    v8 = a4;
    do
    {
      v9 = (_DWORD *)*((_QWORD *)this + 6);
      v10 = *((_QWORD *)this + 7) - 4;
      if ((_DWORD *)v10 != v9)
      {
        memmove(v9 + 1, v9, v10 - (_QWORD)v9);
        v9 = (_DWORD *)*((_QWORD *)this + 6);
      }
      v11 = *(_DWORD *)a2++;
      *v9 = v11;
      vDSP_dotpr(*((const float **)this + 6), 1, *((const float **)this + 3), 1, __C++, v7);
      --v8;
    }
    while (v8);
  }
}

void AUResidualEchoSuppressorV3::~AUResidualEchoSuppressorV3(AUResidualEchoSuppressorV3 *this)
{
  AUResidualEchoSuppressorV3::~AUResidualEchoSuppressorV3(this);
  JUMPOUT(0x1BCC95CECLL);
}

{
  uint64_t v2;

  *(_QWORD *)this = &off_1E69D8258;
  v2 = *((_QWORD *)this + 70);
  if (v2)
  {
    CResidualSuppressorV3::speex_preprocess_state_res_destroy(v2);
    *((_QWORD *)this + 70) = 0;
  }
  ausdk::AUBase::~AUBase(this);
}

uint64_t AUResidualEchoSuppressorV3::Initialize(AUResidualEchoSuppressorV3 *this)
{
  char v2;
  ausdk::AUScope *v3;
  unsigned int v4;
  char v5;
  uint64_t Element;
  double v7;
  uint64_t v8;
  double v9;
  int v10;
  int v11;
  int v12;
  int v13;
  uint64_t v14;
  double v15;
  int v16;
  int v17;
  int v18;
  int v19;
  _DWORD *v20;
  FILE **v21;
  FILE *v22;
  const char *v23;
  int v24;
  int v25;
  uint64_t result;
  uint64_t v27;
  ausdk::AUElement *v28;
  ausdk::AUElement **v29;
  float Parameter;
  uint64_t v31;
  ausdk::AUElement *v32;
  ausdk::AUElement **v33;
  float v34;
  uint64_t v35;
  ausdk::AUElement *v36;
  ausdk::AUElement **v37;
  uint64_t v38;
  ausdk::AUElement *v39;
  ausdk::AUElement **v40;
  float v41;
  uint64_t v42;
  ausdk::AUElement *v43;
  ausdk::AUElement **v44;
  float v45;
  uint64_t v46;
  ausdk::AUElement *v47;
  ausdk::AUElement **v48;
  float v49;
  uint64_t v50;
  float v51;
  ausdk::AUElement *v52;
  ausdk::AUElement **v53;
  float v54;
  uint64_t v55;
  float v56;
  ausdk::AUElement *v57;
  ausdk::AUElement **v58;
  float v59;
  uint64_t v60;
  ausdk::AUElement *v61;
  ausdk::AUElement **v62;
  float v63;
  uint64_t v64;
  ausdk::AUElement *v65;
  ausdk::AUElement **v66;
  float v67;
  uint64_t v68;
  ausdk::AUElement *v69;
  ausdk::AUElement **v70;
  float v71;
  uint64_t v72;
  ausdk::AUElement *v73;
  ausdk::AUElement **v74;
  float v75;
  uint64_t v76;
  float v77;
  ausdk::AUElement *v78;
  ausdk::AUElement **v79;
  float v80;
  uint64_t v81;
  ausdk::AUElement *v82;
  ausdk::AUElement **v83;
  float v84;
  uint64_t v85;
  ausdk::AUElement *v86;
  ausdk::AUElement **v87;
  float v88;
  uint64_t v89;
  float v90;
  ausdk::AUElement *v91;
  ausdk::AUElement **v92;
  float v93;
  uint64_t v94;
  ausdk::AUElement *v95;
  ausdk::AUElement **v96;
  float v97;
  uint64_t v98;
  ausdk::AUElement *v99;
  ausdk::AUElement **v100;
  float v101;
  uint64_t v102;
  ausdk::AUElement *v103;
  ausdk::AUElement **v104;
  float v105;
  uint64_t v106;
  ausdk::AUElement *v107;
  ausdk::AUElement **v108;
  float v109;
  uint64_t v110;
  ausdk::AUElement *v111;
  ausdk::AUElement **v112;
  float v113;
  uint64_t v114;
  ausdk::AUElement *v115;
  ausdk::AUElement **v116;
  float v117;
  uint64_t v118;
  ausdk::AUElement *v119;
  ausdk::AUElement **v120;
  float v121;
  uint64_t v122;
  ausdk::AUElement *v123;
  ausdk::AUElement **v124;
  float v125;
  uint64_t v126;
  ausdk::AUElement *v127;
  ausdk::AUElement **v128;
  float v129;
  uint64_t v130;
  ausdk::AUElement *v131;
  ausdk::AUElement **v132;
  int v133;
  float v134;
  float v135;
  float v136;
  float v137;
  float v138;
  float v139;
  float v140;
  NSObject *v141;
  NSObject *v142;
  int v143;
  int32x2_t v144;
  unsigned int isa_low;
  float v146;
  float v147;
  float v148;
  unsigned int v149;
  float v150;
  uint64_t v151;
  uint64_t v152;
  ausdk::AUElement *v153;
  ausdk::AUElement **v154;
  uint64_t v155;
  ausdk::AUElement *v156;
  ausdk::AUElement **v157;
  float v158;
  uint64_t v159;
  float v160;
  float v161;
  float v162;
  float v163;
  float v164;
  float v165;
  float v166;
  float v167;
  float v168;
  float v169;
  float v170;
  float v171;
  float v172;
  float v173;
  float v174;
  float v175;
  float v176;
  float v177;
  float v178;
  float v179;
  float v180;

  v2 = 0;
  v3 = (AUResidualEchoSuppressorV3 *)((char *)this + 80);
  v4 = 1;
  do
  {
    v5 = v2;
    Element = ausdk::AUScope::SafeGetElement(v3, v4 - 1);
    if (*(double *)(Element + 80) != *(double *)(ausdk::AUScope::SafeGetElement(v3, v4) + 80))
      return 4294956428;
    v4 = 2;
    v2 = 1;
  }
  while ((v5 & 1) == 0);
  v7 = *(double *)(ausdk::AUScope::SafeGetElement(v3, 0) + 80);
  if (v7 != *(double *)(ausdk::AUScope::SafeGetElement((AUResidualEchoSuppressorV3 *)((char *)this + 128), 0) + 80))
    return 4294956428;
  *((_DWORD *)this + 137) = *((_DWORD *)this + 84);
  *((_BYTE *)this + 540) = *(_DWORD *)(ausdk::AUScope::SafeGetElement(v3, 0) + 88) == 1718773105;
  *((_BYTE *)this + 541) = *(_DWORD *)(ausdk::AUScope::SafeGetElement(v3, 1u) + 88) == 1718773105;
  *((_BYTE *)this + 542) = *(_DWORD *)(ausdk::AUScope::SafeGetElement(v3, 2u) + 88) == 1718773105;
  *((_BYTE *)this + 543) = *(_DWORD *)(ausdk::AUScope::SafeGetElement(v3, 3u) + 88) == 1718773105;
  *((_BYTE *)this + 544) = *(_DWORD *)(ausdk::AUScope::SafeGetElement((AUResidualEchoSuppressorV3 *)((char *)this + 128), 0)+ 88) == 1718773105;
  *((_BYTE *)this + 545) = *(_DWORD *)(ausdk::AUScope::SafeGetElement((AUResidualEchoSuppressorV3 *)((char *)this + 128), 1u)+ 88) == 1718773105;
  v8 = ausdk::AUScope::SafeGetElement(v3, 0);
  v9 = *(double *)(v8 + 80);
  v11 = *(_DWORD *)(v8 + 88);
  v10 = *(_DWORD *)(v8 + 92);
  v12 = *(_DWORD *)(v8 + 104);
  v13 = *(_DWORD *)(v8 + 108);
  v14 = ausdk::AUScope::SafeGetElement(v3, 1u);
  v15 = *(double *)(v14 + 80);
  v17 = *(_DWORD *)(v14 + 88);
  v16 = *(_DWORD *)(v14 + 92);
  v18 = *(_DWORD *)(v14 + 104);
  v19 = *(_DWORD *)(v14 + 108);
  v20 = (_DWORD *)ausdk::AUScope::SafeGetElement(v3, 2u);
  if (v9 != v15)
  {
    v21 = (FILE **)MEMORY[0x1E0C80C10];
    v22 = (FILE *)*MEMORY[0x1E0C80C10];
    v23 = "_vpio_res: check 1 failed!\n";
LABEL_14:
    fwrite(v23, 0x1BuLL, 1uLL, v22);
    fflush(*v21);
    return 4294956428;
  }
  v25 = v20[22];
  v24 = v20[23];
  if (v11 != 1819304813 && v11 != 1718773105 || (v10 & 2) != 0 || v13 != 1 || (v10 & 1) == 0 && v12 != 2)
  {
    v21 = (FILE **)MEMORY[0x1E0C80C10];
    v22 = (FILE *)*MEMORY[0x1E0C80C10];
    v23 = "_vpio_res: check 2 failed!\n";
    goto LABEL_14;
  }
  if (v17 != 1819304813 && v17 != 1718773105
    || (v16 & 2) != 0
    || v19 != 1
    || (v16 & 1) == 0 && v18 != 2
    || v25 != 1819304813 && v25 != 1718773105
    || (v24 & 2) != 0
    || v20[27] != 1
    || (v24 & 1) == 0 && v20[26] != 2)
  {
    v21 = (FILE **)MEMORY[0x1E0C80C10];
    v22 = (FILE *)*MEMORY[0x1E0C80C10];
    v23 = "_vpio_res: check 3 failed!\n";
    goto LABEL_14;
  }
  v27 = *((_QWORD *)this + 9);
  if (v27)
  {
    v28 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v27 + 32))(v27, 0);
  }
  else
  {
    v29 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v29)
      v28 = 0;
    else
      v28 = *v29;
  }
  Parameter = ausdk::AUElement::GetParameter(v28, 1u);
  v31 = *((_QWORD *)this + 9);
  v177 = Parameter;
  if (v31)
  {
    v32 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v31 + 32))(v31, 0);
  }
  else
  {
    v33 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v33)
      v32 = 0;
    else
      v32 = *v33;
  }
  v34 = ausdk::AUElement::GetParameter(v32, 2u);
  v35 = *((_QWORD *)this + 9);
  v176 = v34;
  if (v35)
  {
    v36 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v35 + 32))(v35, 0);
  }
  else
  {
    v37 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v37)
      v36 = 0;
    else
      v36 = *v37;
  }
  *((_DWORD *)this + 138) = ausdk::AUElement::GetParameter(v36, 8u);
  v38 = *((_QWORD *)this + 9);
  if (v38)
  {
    v39 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v38 + 32))(v38, 0);
  }
  else
  {
    v40 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v40)
      v39 = 0;
    else
      v39 = *v40;
  }
  v41 = ausdk::AUElement::GetParameter(v39, 9u);
  v42 = *((_QWORD *)this + 9);
  v175 = v41;
  if (v42)
  {
    v43 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v42 + 32))(v42, 0);
  }
  else
  {
    v44 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v44)
      v43 = 0;
    else
      v43 = *v44;
  }
  v45 = ausdk::AUElement::GetParameter(v43, 0xAu);
  v46 = *((_QWORD *)this + 9);
  v179 = v45;
  if (v46)
  {
    v47 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v46 + 32))(v46, 0);
  }
  else
  {
    v48 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v48)
      v47 = 0;
    else
      v47 = *v48;
  }
  v49 = ausdk::AUElement::GetParameter(v47, 0xBu);
  v50 = *((_QWORD *)this + 9);
  if (v50)
  {
    v51 = v49;
    v52 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v50 + 32))(v50, 0);
  }
  else
  {
    v51 = v49;
    v53 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v53)
      v52 = 0;
    else
      v52 = *v53;
  }
  v54 = ausdk::AUElement::GetParameter(v52, 0xCu);
  v55 = *((_QWORD *)this + 9);
  if (v55)
  {
    v56 = v54;
    v57 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v55 + 32))(v55, 0);
  }
  else
  {
    v56 = v54;
    v58 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v58)
      v57 = 0;
    else
      v57 = *v58;
  }
  v59 = ausdk::AUElement::GetParameter(v57, 0xDu);
  v60 = *((_QWORD *)this + 9);
  v174 = v59;
  if (v60)
  {
    v61 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v60 + 32))(v60, 0);
  }
  else
  {
    v62 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v62)
      v61 = 0;
    else
      v61 = *v62;
  }
  v63 = ausdk::AUElement::GetParameter(v61, 0xEu);
  v64 = *((_QWORD *)this + 9);
  v173 = v63;
  if (v64)
  {
    v65 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v64 + 32))(v64, 0);
  }
  else
  {
    v66 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v66)
      v65 = 0;
    else
      v65 = *v66;
  }
  v67 = ausdk::AUElement::GetParameter(v65, 0xFu);
  v68 = *((_QWORD *)this + 9);
  v172 = v67;
  if (v68)
  {
    v69 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v68 + 32))(v68, 0);
  }
  else
  {
    v70 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v70)
      v69 = 0;
    else
      v69 = *v70;
  }
  v71 = ausdk::AUElement::GetParameter(v69, 0x10u);
  v72 = *((_QWORD *)this + 9);
  if (v72)
  {
    v73 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v72 + 32))(v72, 0);
  }
  else
  {
    v74 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v74)
      v73 = 0;
    else
      v73 = *v74;
  }
  v75 = ausdk::AUElement::GetParameter(v73, 0x11u);
  v76 = *((_QWORD *)this + 9);
  if (v76)
  {
    v77 = v75;
    v78 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v76 + 32))(v76, 0);
  }
  else
  {
    v77 = v75;
    v79 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v79)
      v78 = 0;
    else
      v78 = *v79;
  }
  v80 = ausdk::AUElement::GetParameter(v78, 0x12u);
  v81 = *((_QWORD *)this + 9);
  if (v81)
  {
    v82 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v81 + 32))(v81, 0);
  }
  else
  {
    v83 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v83)
      v82 = 0;
    else
      v82 = *v83;
  }
  v84 = ausdk::AUElement::GetParameter(v82, 0x13u);
  v85 = *((_QWORD *)this + 9);
  v178 = v84;
  if (v85)
  {
    v86 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v85 + 32))(v85, 0);
  }
  else
  {
    v87 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v87)
      v86 = 0;
    else
      v86 = *v87;
  }
  v88 = ausdk::AUElement::GetParameter(v86, 0x14u);
  v89 = *((_QWORD *)this + 9);
  if (v89)
  {
    v90 = v88;
    v91 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v89 + 32))(v89, 0);
  }
  else
  {
    v90 = v88;
    v92 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v92)
      v91 = 0;
    else
      v91 = *v92;
  }
  v93 = ausdk::AUElement::GetParameter(v91, 0x15u);
  v94 = *((_QWORD *)this + 9);
  v170 = v93;
  if (v94)
  {
    v95 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v94 + 32))(v94, 0);
  }
  else
  {
    v96 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v96)
      v95 = 0;
    else
      v95 = *v96;
  }
  v97 = ausdk::AUElement::GetParameter(v95, 0x16u);
  v98 = *((_QWORD *)this + 9);
  v171 = v97;
  if (v98)
  {
    v99 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v98 + 32))(v98, 0);
  }
  else
  {
    v100 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v100)
      v99 = 0;
    else
      v99 = *v100;
  }
  v101 = ausdk::AUElement::GetParameter(v99, 0x17u);
  v102 = *((_QWORD *)this + 9);
  v169 = v101;
  if (v102)
  {
    v103 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v102 + 32))(v102, 0);
  }
  else
  {
    v104 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v104)
      v103 = 0;
    else
      v103 = *v104;
  }
  v105 = ausdk::AUElement::GetParameter(v103, 0x18u);
  v106 = *((_QWORD *)this + 9);
  v168 = v105;
  if (v106)
  {
    v107 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v106 + 32))(v106, 0);
  }
  else
  {
    v108 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v108)
      v107 = 0;
    else
      v107 = *v108;
  }
  v109 = ausdk::AUElement::GetParameter(v107, 0x19u);
  v110 = *((_QWORD *)this + 9);
  v166 = v109;
  if (v110)
  {
    v111 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v110 + 32))(v110, 0);
  }
  else
  {
    v112 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v112)
      v111 = 0;
    else
      v111 = *v112;
  }
  v113 = ausdk::AUElement::GetParameter(v111, 0x1Au);
  v114 = *((_QWORD *)this + 9);
  v167 = v113;
  if (v114)
  {
    v115 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v114 + 32))(v114, 0);
  }
  else
  {
    v116 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v116)
      v115 = 0;
    else
      v115 = *v116;
  }
  v117 = ausdk::AUElement::GetParameter(v115, 0x1Bu);
  v118 = *((_QWORD *)this + 9);
  v165 = v117;
  if (v118)
  {
    v119 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v118 + 32))(v118, 0);
  }
  else
  {
    v120 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v120)
      v119 = 0;
    else
      v119 = *v120;
  }
  v121 = ausdk::AUElement::GetParameter(v119, 0x1Cu);
  v122 = *((_QWORD *)this + 9);
  v164 = v121;
  if (v122)
  {
    v123 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v122 + 32))(v122, 0);
  }
  else
  {
    v124 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v124)
      v123 = 0;
    else
      v123 = *v124;
  }
  v125 = ausdk::AUElement::GetParameter(v123, 0x1Eu);
  v126 = *((_QWORD *)this + 9);
  v163 = v125;
  if (v126)
  {
    v127 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v126 + 32))(v126, 0);
  }
  else
  {
    v128 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v128)
      v127 = 0;
    else
      v127 = *v128;
  }
  v129 = ausdk::AUElement::GetParameter(v127, 0x1Du);
  v130 = *((_QWORD *)this + 9);
  v161 = v129;
  if (v130)
  {
    v131 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v130 + 32))(v130, 0);
  }
  else
  {
    v132 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v132)
      v131 = 0;
    else
      v131 = *v132;
  }
  v162 = ausdk::AUElement::GetParameter(v131, 0x1Fu);
  v133 = v9;
  (*(void (**)(AUResidualEchoSuppressorV3 *))(*(_QWORD *)this + 64))(this);
  v180 = __exp10f(v179 * 0.1);
  v134 = __exp10f(v51 * 0.1);
  v135 = __exp10f(v56 * 0.1);
  v136 = __exp10f(v71 * 0.1);
  v137 = __exp10f(v77 * 0.1);
  v138 = __exp10f(v80 * 0.1);
  v139 = __exp10f(v178 * 0.1);
  v140 = __exp10f(v90 * 0.1);
  v141 = CResidualSuppressorV3::speex_preprocess_state_res_init((CResidualSuppressorV3 *)*((unsigned int *)this + 84), v133);
  *((_QWORD *)this + 70) = v141;
  if (!v141)
    return 4294956421;
  v142 = v141;
  v143 = (int)v163;
  v144.i32[0] = (int)v177;
  v144.i32[1] = (int)v176;
  *(int32x2_t *)((char *)&v141[4].isa + 4) = vneg_s32(vabs_s32(v144));
  HIDWORD(v141[5].isa) = *((_DWORD *)this + 138);
  LODWORD(v141[62].isa) = v175;
  *((float *)&v141[62].isa + 1) = v180;
  *(float *)&v141[63].isa = v134;
  *((float *)&v141[63].isa + 1) = v135;
  *((float *)&v141[69].isa + 1) = v174;
  *(float *)&v141[64].isa = v173;
  *((float *)&v141[64].isa + 1) = v172;
  *(float *)&v141[65].isa = v136;
  *((float *)&v141[65].isa + 1) = v137;
  *(float *)&v141[66].isa = v138;
  *((float *)&v141[66].isa + 1) = v139;
  *(float *)&v141[67].isa = v140;
  HIDWORD(v141[67].isa) = v170;
  *((float *)&v141[68].isa + 1) = v171;
  *(float *)&v141[69].isa = v169;
  HIDWORD(v141[71].isa) = v168;
  LODWORD(v141[72].isa) = v166;
  isa_low = (float)SLODWORD(v141[1].isa);
  v146 = (float)SHIDWORD(v141[1].isa) * 0.5;
  v147 = v146 / (float)isa_low;
  v148 = fmaxf(v167, 300.0);
  if (v148 < v146)
    v146 = v148;
  v149 = vcvtms_u32_f32(v146 / v147);
  if (v149 < isa_low)
    isa_low = v149;
  LODWORD(v141[83].isa) = isa_low;
  *((float *)&v141[83].isa + 1) = v165;
  *(float *)&v141[84].isa = v164;
  LODWORD(v141->isa) = (int)v161;
  if (v143 >= 0)
    v143 = -v143;
  LODWORD(v141[4].isa) = v143;
  v150 = __exp10f((float)v143 * 0.1);
  *(float *)&v142[7].isa = v150;
  *((float *)&v142[7].isa + 1) = sqrtf(v150);
  v151 = *((_QWORD *)this + 70);
  *(float *)(v151 + 48) = v162;
  *(float *)(v151 + 52) = __exp10f(v162 * 0.1);
  *(_DWORD *)(*((_QWORD *)this + 70) + 220) = 0;
  v152 = *((_QWORD *)this + 9);
  if (v152)
  {
    v153 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v152 + 32))(v152, 0);
  }
  else
  {
    v154 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v154)
      v153 = 0;
    else
      v153 = *v154;
  }
  *(float *)(*((_QWORD *)this + 70) + 688) = ausdk::AUElement::GetParameter(v153, 0x21u);
  v155 = *((_QWORD *)this + 9);
  if (v155)
  {
    v156 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v155 + 32))(v155, 0);
  }
  else
  {
    v157 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v157)
      v156 = 0;
    else
      v156 = *v157;
  }
  v158 = ausdk::AUElement::GetParameter(v156, 0x22u);
  v159 = *((_QWORD *)this + 70);
  v160 = expf(-1.0 / (float)(v158 * (float)((float)*(int *)(v159 + 12) / (float)*(int *)(v159 + 8))));
  result = 0;
  *(float *)(v159 + 680) = 1.0 - v160;
  return result;
}

void AUResidualEchoSuppressorV3::Cleanup(AUResidualEchoSuppressorV3 *this)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 70);
  if (v2)
  {
    CResidualSuppressorV3::speex_preprocess_state_res_destroy(v2);
    *((_QWORD *)this + 70) = 0;
  }
}

uint64_t AUResidualEchoSuppressorV3::Reset(AUResidualEchoSuppressorV3 *this)
{
  return 0;
}

uint64_t AUResidualEchoSuppressorV3::GetPropertyInfo(AUResidualEchoSuppressorV3 *this, int a2, int a3, unsigned int a4, unsigned int *a5, BOOL *a6)
{
  uint64_t result;
  BOOL v7;

  if (a3)
    return 4294956417;
  if (a2 == 21)
  {
    v7 = 1;
  }
  else
  {
    if (a2 != 3700)
      return 4294956417;
    v7 = 0;
  }
  result = 0;
  *a6 = v7;
  *a5 = 4;
  return result;
}

uint64_t AUResidualEchoSuppressorV3::GetProperty(AUResidualEchoSuppressorV3 *this, int a2, int a3, unsigned int a4, _DWORD *a5)
{
  uint64_t result;
  int v7;

  if (a3)
    return 4294956417;
  if (a2 == 3700)
  {
    v7 = *((unsigned __int8 *)this + 376);
    goto LABEL_7;
  }
  if (a2 == 21)
  {
    v7 = (*(uint64_t (**)(AUResidualEchoSuppressorV3 *))(*(_QWORD *)this + 576))(this);
LABEL_7:
    result = 0;
    *a5 = v7;
    return result;
  }
  return 4294956417;
}

uint64_t AUResidualEchoSuppressorV3::SetProperty(AUResidualEchoSuppressorV3 *this, int a2, int a3, unsigned int a4, int *a5, unsigned int a6)
{
  uint64_t result;
  int v8;
  int v9;

  result = 4294956417;
  if (a2 == 21 && !a3)
  {
    if (a6 >= 4)
    {
      v8 = *a5;
      v9 = *a5 != 0;
      if (v9 != (*(unsigned int (**)(AUResidualEchoSuppressorV3 *))(*(_QWORD *)this + 576))(this))
        (*(void (**)(AUResidualEchoSuppressorV3 *, BOOL))(*(_QWORD *)this + 584))(this, v8 != 0);
      return 0;
    }
    else
    {
      return 4294956445;
    }
  }
  return result;
}

uint64_t AUResidualEchoSuppressorV3::SetParameter(AUResidualEchoSuppressorV3 *this, unsigned int a2, unsigned int a3, unsigned int a4, float a5)
{
  uint64_t v9;
  ausdk::AUElement *v10;
  ausdk::AUElement **v11;
  ausdk::AUScope *Scope;
  ausdk::AUElement *Element;

  if (a2 <= 0x22 && ((1 << a2) & 0x6FFFFDF27) != 0)
  {
    v9 = *((_QWORD *)this + 9);
    if (v9)
    {
      v10 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v9 + 32))(v9, 0);
    }
    else
    {
      v11 = (ausdk::AUElement **)*((_QWORD *)this + 6);
      if (*((ausdk::AUElement ***)this + 7) == v11)
        v10 = 0;
      else
        v10 = *v11;
    }
    ausdk::AUElement::SetParameter(v10, a2, a5, 0);
    ++*((_DWORD *)this + 133);
  }
  else
  {
    Scope = (ausdk::AUScope *)ausdk::AUBase::GetScope(this, a3);
    Element = (ausdk::AUElement *)ausdk::AUScope::SafeGetElement(Scope, a4);
    ausdk::AUElement::SetParameter(Element, a2, a5, 0);
  }
  return 0;
}

uint64_t AUResidualEchoSuppressorV3::CanScheduleParameters(AUResidualEchoSuppressorV3 *this)
{
  return 0;
}

uint64_t AUResidualEchoSuppressorV3::ProcessMultipleBufferLists(AUResidualEchoSuppressorV3 *this, unsigned int *a2, int a3, unsigned int a4, const AudioBufferList **a5, unsigned int a6, AudioBufferList **a7)
{
  AudioBufferList *v10;
  unsigned int mDataByteSize;
  uint64_t v12;
  uint64_t v13;
  ausdk::AUElement *v14;
  ausdk::AUElement **v15;
  float Parameter;
  uint64_t v17;
  ausdk::AUElement *v18;
  ausdk::AUElement **v19;
  float v20;
  uint64_t v21;
  ausdk::AUElement *v22;
  ausdk::AUElement **v23;
  float v24;
  uint64_t v25;
  ausdk::AUElement *v26;
  ausdk::AUElement **v27;
  float v28;
  uint64_t v29;
  ausdk::AUElement *v30;
  ausdk::AUElement **v31;
  float v32;
  uint64_t v33;
  ausdk::AUElement *v34;
  ausdk::AUElement **v35;
  float v36;
  uint64_t v37;
  ausdk::AUElement *v38;
  ausdk::AUElement **v39;
  uint64_t v40;
  ausdk::AUElement *v41;
  ausdk::AUElement **v42;
  uint64_t v43;
  ausdk::AUElement *v44;
  ausdk::AUElement **v45;
  uint64_t v46;
  ausdk::AUElement *v47;
  ausdk::AUElement **v48;
  uint64_t v49;
  ausdk::AUElement *v50;
  ausdk::AUElement **v51;
  uint64_t v52;
  ausdk::AUElement *v53;
  ausdk::AUElement **v54;
  uint64_t v55;
  ausdk::AUElement *v56;
  ausdk::AUElement **v57;
  uint64_t v58;
  ausdk::AUElement *v59;
  ausdk::AUElement **v60;
  uint64_t v61;
  ausdk::AUElement *v62;
  ausdk::AUElement **v63;
  uint64_t v64;
  ausdk::AUElement *v65;
  ausdk::AUElement **v66;
  float v67;
  uint64_t v68;
  ausdk::AUElement *v69;
  ausdk::AUElement **v70;
  uint64_t v71;
  ausdk::AUElement *v72;
  ausdk::AUElement **v73;
  uint64_t v74;
  ausdk::AUElement *v75;
  ausdk::AUElement **v76;
  int v77;
  int v78;
  float v79;
  uint64_t v80;
  ausdk::AUElement *v81;
  ausdk::AUElement **v82;
  float v83;
  uint64_t v84;
  uint64_t v85;
  ausdk::AUElement *v86;
  ausdk::AUElement **v87;
  uint64_t v88;
  ausdk::AUElement *v89;
  ausdk::AUElement **v90;
  uint64_t v91;
  ausdk::AUElement *v92;
  ausdk::AUElement **v93;
  uint64_t v94;
  ausdk::AUElement *v95;
  ausdk::AUElement **v96;
  float v97;
  uint64_t v98;
  ausdk::AUElement *v99;
  ausdk::AUElement **v100;
  unsigned int v101;
  unsigned int v102;
  unsigned int v103;
  int v104;
  int v105;
  uint64_t v106;
  ausdk::AUElement *v107;
  ausdk::AUElement **v108;
  float v109;
  float v110;
  float v111;
  float v112;
  float v113;
  float v114;
  float v115;
  float v116;
  uint64_t v117;
  unsigned int v118;
  float v119;
  float v120;
  float v121;
  unsigned int v122;
  int v123;
  float v124;
  uint64_t v125;
  float v126;
  uint64_t v127;
  ausdk::AUElement *v128;
  ausdk::AUElement **v129;
  uint64_t v130;
  ausdk::AUElement *v131;
  ausdk::AUElement **v132;
  float v133;
  uint64_t v134;
  uint64_t v135;
  ausdk::AUElement *v136;
  ausdk::AUElement **v137;
  float v138;
  uint64_t v139;
  ausdk::AUElement *v140;
  ausdk::AUElement **v141;
  int v142;
  float v143;
  uint64_t v144;
  ausdk::AUElement *v145;
  ausdk::AUElement **v146;
  float v147;
  uint64_t v148;
  int v149;
  uint64_t v150;
  float *mData;
  float *v152;
  float *v153;
  float *v154;
  const AudioBufferList *v155;
  uint64_t v156;
  float *v157;
  _BOOL4 v160;
  uint64_t v161;
  const void *v162;
  const void *v163;
  char *v164;
  uint64_t v165;
  char *v166;
  uint64_t v167;
  char *v168;
  const void *v169;
  uint64_t v170;
  const void *v171;
  const void *v172;
  char *v173;
  uint64_t v174;
  char *v175;
  void *v176;
  uint64_t v177;
  const void *v178;
  size_t v179;
  AudioBufferList *v180;
  unsigned int v181;
  uint64_t v182;
  ausdk::AUElement *v183;
  ausdk::AUElement **v184;
  uint64_t v185;
  uint64_t v186;
  ausdk::AUElement *v187;
  ausdk::AUElement **v188;
  float v190;
  float v191;
  float v192;
  float v193;
  float v194;
  float v195;
  float v196;
  float v197;
  float v198;
  float v199;
  float v200;
  float v201;
  float v202;
  float v203;
  float v204;
  int v205;
  float *v206[2];
  float *v207[2];
  float *v208[4];

  v208[2] = *(float **)MEMORY[0x1E0C80C00];
  if (*((_DWORD *)this + 84) != a3)
    return 4294956422;
  if ((*(unsigned int (**)(AUResidualEchoSuppressorV3 *, unsigned int *))(*(_QWORD *)this + 576))(this, a2))
  {
    v10 = a7[1];
    mDataByteSize = v10->mBuffers[0].mDataByteSize;
    if (mDataByteSize >= 4)
      memset_pattern16(v10->mBuffers[0].mData, &unk_1B6627B80, mDataByteSize & 0xFFFFFFFC);
    if (*((unsigned __int8 *)this + 540) == *((unsigned __int8 *)this + 544))
      memcpy((*a7)->mBuffers[0].mData, (*a5)->mBuffers[0].mData, (*a7)->mBuffers[0].mDataByteSize);
    else
      bzero((*a7)->mBuffers[0].mData, (*a7)->mBuffers[0].mDataByteSize);
    return 0;
  }
  if (*((_DWORD *)this + 133) != *((_DWORD *)this + 134))
  {
    v205 = *((_DWORD *)this + 133);
    v13 = *((_QWORD *)this + 9);
    if (v13)
    {
      v14 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v13 + 32))(v13, 0);
    }
    else
    {
      v15 = (ausdk::AUElement **)*((_QWORD *)this + 6);
      if (*((ausdk::AUElement ***)this + 7) == v15)
        v14 = 0;
      else
        v14 = *v15;
    }
    Parameter = ausdk::AUElement::GetParameter(v14, 1u);
    v17 = *((_QWORD *)this + 9);
    if (v17)
    {
      v18 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v17 + 32))(v17, 0);
    }
    else
    {
      v19 = (ausdk::AUElement **)*((_QWORD *)this + 6);
      if (*((ausdk::AUElement ***)this + 7) == v19)
        v18 = 0;
      else
        v18 = *v19;
    }
    v20 = ausdk::AUElement::GetParameter(v18, 2u);
    v21 = *((_QWORD *)this + 9);
    if (v21)
    {
      v22 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v21 + 32))(v21, 0);
    }
    else
    {
      v23 = (ausdk::AUElement **)*((_QWORD *)this + 6);
      if (*((ausdk::AUElement ***)this + 7) == v23)
        v22 = 0;
      else
        v22 = *v23;
    }
    v24 = ausdk::AUElement::GetParameter(v22, 8u);
    v25 = *((_QWORD *)this + 9);
    if (v25)
    {
      v26 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v25 + 32))(v25, 0);
    }
    else
    {
      v27 = (ausdk::AUElement **)*((_QWORD *)this + 6);
      if (*((ausdk::AUElement ***)this + 7) == v27)
        v26 = 0;
      else
        v26 = *v27;
    }
    v28 = ausdk::AUElement::GetParameter(v26, 9u);
    v29 = *((_QWORD *)this + 9);
    if (v29)
    {
      v30 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v29 + 32))(v29, 0);
    }
    else
    {
      v31 = (ausdk::AUElement **)*((_QWORD *)this + 6);
      if (*((ausdk::AUElement ***)this + 7) == v31)
        v30 = 0;
      else
        v30 = *v31;
    }
    v32 = ausdk::AUElement::GetParameter(v30, 0xAu);
    v33 = *((_QWORD *)this + 9);
    if (v33)
    {
      v34 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v33 + 32))(v33, 0);
    }
    else
    {
      v35 = (ausdk::AUElement **)*((_QWORD *)this + 6);
      if (*((ausdk::AUElement ***)this + 7) == v35)
        v34 = 0;
      else
        v34 = *v35;
    }
    v36 = ausdk::AUElement::GetParameter(v34, 0xBu);
    v37 = *((_QWORD *)this + 9);
    if (v37)
    {
      v38 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v37 + 32))(v37, 0);
    }
    else
    {
      v39 = (ausdk::AUElement **)*((_QWORD *)this + 6);
      if (*((ausdk::AUElement ***)this + 7) == v39)
        v38 = 0;
      else
        v38 = *v39;
    }
    v203 = ausdk::AUElement::GetParameter(v38, 0xCu);
    v40 = *((_QWORD *)this + 9);
    if (v40)
    {
      v41 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v40 + 32))(v40, 0);
    }
    else
    {
      v42 = (ausdk::AUElement **)*((_QWORD *)this + 6);
      if (*((ausdk::AUElement ***)this + 7) == v42)
        v41 = 0;
      else
        v41 = *v42;
    }
    v204 = ausdk::AUElement::GetParameter(v41, 0xDu);
    v43 = *((_QWORD *)this + 9);
    if (v43)
    {
      v44 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v43 + 32))(v43, 0);
    }
    else
    {
      v45 = (ausdk::AUElement **)*((_QWORD *)this + 6);
      if (*((ausdk::AUElement ***)this + 7) == v45)
        v44 = 0;
      else
        v44 = *v45;
    }
    v202 = ausdk::AUElement::GetParameter(v44, 0xEu);
    v46 = *((_QWORD *)this + 9);
    if (v46)
    {
      v47 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v46 + 32))(v46, 0);
    }
    else
    {
      v48 = (ausdk::AUElement **)*((_QWORD *)this + 6);
      if (*((ausdk::AUElement ***)this + 7) == v48)
        v47 = 0;
      else
        v47 = *v48;
    }
    v201 = ausdk::AUElement::GetParameter(v47, 0xFu);
    v49 = *((_QWORD *)this + 9);
    if (v49)
    {
      v50 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v49 + 32))(v49, 0);
    }
    else
    {
      v51 = (ausdk::AUElement **)*((_QWORD *)this + 6);
      if (*((ausdk::AUElement ***)this + 7) == v51)
        v50 = 0;
      else
        v50 = *v51;
    }
    v200 = ausdk::AUElement::GetParameter(v50, 0x10u);
    v52 = *((_QWORD *)this + 9);
    if (v52)
    {
      v53 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v52 + 32))(v52, 0);
    }
    else
    {
      v54 = (ausdk::AUElement **)*((_QWORD *)this + 6);
      if (*((ausdk::AUElement ***)this + 7) == v54)
        v53 = 0;
      else
        v53 = *v54;
    }
    v199 = ausdk::AUElement::GetParameter(v53, 0x11u);
    v55 = *((_QWORD *)this + 9);
    if (v55)
    {
      v56 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v55 + 32))(v55, 0);
    }
    else
    {
      v57 = (ausdk::AUElement **)*((_QWORD *)this + 6);
      if (*((ausdk::AUElement ***)this + 7) == v57)
        v56 = 0;
      else
        v56 = *v57;
    }
    v198 = ausdk::AUElement::GetParameter(v56, 0x12u);
    v58 = *((_QWORD *)this + 9);
    if (v58)
    {
      v59 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v58 + 32))(v58, 0);
    }
    else
    {
      v60 = (ausdk::AUElement **)*((_QWORD *)this + 6);
      if (*((ausdk::AUElement ***)this + 7) == v60)
        v59 = 0;
      else
        v59 = *v60;
    }
    v197 = ausdk::AUElement::GetParameter(v59, 0x13u);
    v61 = *((_QWORD *)this + 9);
    if (v61)
    {
      v62 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v61 + 32))(v61, 0);
    }
    else
    {
      v63 = (ausdk::AUElement **)*((_QWORD *)this + 6);
      if (*((ausdk::AUElement ***)this + 7) == v63)
        v62 = 0;
      else
        v62 = *v63;
    }
    v196 = ausdk::AUElement::GetParameter(v62, 0x14u);
    v64 = *((_QWORD *)this + 9);
    if (v64)
    {
      v65 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v64 + 32))(v64, 0);
    }
    else
    {
      v66 = (ausdk::AUElement **)*((_QWORD *)this + 6);
      if (*((ausdk::AUElement ***)this + 7) == v66)
        v65 = 0;
      else
        v65 = *v66;
    }
    v67 = ausdk::AUElement::GetParameter(v65, 0x15u);
    v68 = *((_QWORD *)this + 9);
    if (v68)
    {
      v69 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v68 + 32))(v68, 0);
    }
    else
    {
      v70 = (ausdk::AUElement **)*((_QWORD *)this + 6);
      if (*((ausdk::AUElement ***)this + 7) == v70)
        v69 = 0;
      else
        v69 = *v70;
    }
    v195 = ausdk::AUElement::GetParameter(v69, 0x16u);
    v71 = *((_QWORD *)this + 9);
    if (v71)
    {
      v72 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v71 + 32))(v71, 0);
    }
    else
    {
      v73 = (ausdk::AUElement **)*((_QWORD *)this + 6);
      if (*((ausdk::AUElement ***)this + 7) == v73)
        v72 = 0;
      else
        v72 = *v73;
    }
    v194 = ausdk::AUElement::GetParameter(v72, 0x17u);
    v74 = *((_QWORD *)this + 9);
    if (v74)
    {
      v75 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v74 + 32))(v74, 0);
    }
    else
    {
      v76 = (ausdk::AUElement **)*((_QWORD *)this + 6);
      if (*((ausdk::AUElement ***)this + 7) == v76)
        v75 = 0;
      else
        v75 = *v76;
    }
    v77 = (int)Parameter;
    v78 = (int)v20;
    v79 = ausdk::AUElement::GetParameter(v75, 0x18u);
    v80 = *((_QWORD *)this + 9);
    if (v80)
    {
      v81 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v80 + 32))(v80, 0);
    }
    else
    {
      v82 = (ausdk::AUElement **)*((_QWORD *)this + 6);
      if (*((ausdk::AUElement ***)this + 7) == v82)
        v81 = 0;
      else
        v81 = *v82;
    }
    v83 = ausdk::AUElement::GetParameter(v81, 0x19u);
    v84 = *((_QWORD *)this + 70);
    *(int32x2_t *)(v84 + 36) = vneg_s32(vabs_s32((int32x2_t)__PAIR64__(v78, v77)));
    *(_DWORD *)(v84 + 44) = v24;
    v85 = *((_QWORD *)this + 9);
    if (v85)
    {
      v86 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v85 + 32))(v85, 0);
    }
    else
    {
      v87 = (ausdk::AUElement **)*((_QWORD *)this + 6);
      if (*((ausdk::AUElement ***)this + 7) == v87)
        v86 = 0;
      else
        v86 = *v87;
    }
    v193 = ausdk::AUElement::GetParameter(v86, 0x1Au);
    v88 = *((_QWORD *)this + 9);
    if (v88)
    {
      v89 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v88 + 32))(v88, 0);
    }
    else
    {
      v90 = (ausdk::AUElement **)*((_QWORD *)this + 6);
      if (*((ausdk::AUElement ***)this + 7) == v90)
        v89 = 0;
      else
        v89 = *v90;
    }
    v192 = ausdk::AUElement::GetParameter(v89, 0x1Bu);
    v91 = *((_QWORD *)this + 9);
    if (v91)
    {
      v92 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v91 + 32))(v91, 0);
    }
    else
    {
      v93 = (ausdk::AUElement **)*((_QWORD *)this + 6);
      if (*((ausdk::AUElement ***)this + 7) == v93)
        v92 = 0;
      else
        v92 = *v93;
    }
    v191 = ausdk::AUElement::GetParameter(v92, 0x1Cu);
    v94 = *((_QWORD *)this + 9);
    if (v94)
    {
      v95 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v94 + 32))(v94, 0);
    }
    else
    {
      v96 = (ausdk::AUElement **)*((_QWORD *)this + 6);
      if (*((ausdk::AUElement ***)this + 7) == v96)
        v95 = 0;
      else
        v95 = *v96;
    }
    v97 = ausdk::AUElement::GetParameter(v95, 0x1Eu);
    v98 = *((_QWORD *)this + 9);
    if (v98)
    {
      v99 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v98 + 32))(v98, 0);
    }
    else
    {
      v100 = (ausdk::AUElement **)*((_QWORD *)this + 6);
      if (*((ausdk::AUElement ***)this + 7) == v100)
        v99 = 0;
      else
        v99 = *v100;
    }
    v101 = v28;
    v102 = v79;
    v103 = v83;
    v104 = (int)v97;
    v105 = (int)ausdk::AUElement::GetParameter(v99, 0x1Du);
    v106 = *((_QWORD *)this + 9);
    if (v106)
    {
      v107 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v106 + 32))(v106, 0);
    }
    else
    {
      v108 = (ausdk::AUElement **)*((_QWORD *)this + 6);
      if (*((ausdk::AUElement ***)this + 7) == v108)
        v107 = 0;
      else
        v107 = *v108;
    }
    v190 = ausdk::AUElement::GetParameter(v107, 0x1Fu);
    v109 = __exp10f(v32 / 10.0);
    v110 = __exp10f(v36 / 10.0);
    v111 = __exp10f(v203 / 10.0);
    v112 = __exp10f(v200 / 10.0);
    v113 = __exp10f(v199 / 10.0);
    v114 = __exp10f(v198 / 10.0);
    v115 = __exp10f(v197 / 10.0);
    v116 = __exp10f(v196 / 10.0);
    v117 = *((_QWORD *)this + 70);
    *(_DWORD *)(v117 + 496) = v101;
    *(float *)(v117 + 500) = v109;
    *(float *)(v117 + 504) = v110;
    *(float *)(v117 + 508) = v111;
    *(float *)(v117 + 556) = v204;
    *(float *)(v117 + 512) = v202;
    *(float *)(v117 + 516) = v201;
    *(float *)(v117 + 520) = v112;
    *(float *)(v117 + 524) = v113;
    *(float *)(v117 + 528) = v114;
    *(float *)(v117 + 532) = v115;
    *(float *)(v117 + 536) = v116;
    *(_DWORD *)(v117 + 540) = v67;
    *(float *)(v117 + 548) = v195;
    *(float *)(v117 + 552) = v194;
    *(_DWORD *)(v117 + 572) = v102;
    *(_DWORD *)(v117 + 576) = v103;
    v118 = (float)*(int *)(v117 + 8);
    v119 = (float)*(int *)(v117 + 12) * 0.5;
    v120 = v119 / (float)v118;
    v121 = fmaxf(v193, 300.0);
    if (v121 < v119)
      v119 = v121;
    v122 = vcvtms_u32_f32(v119 / v120);
    if (v122 < v118)
      v118 = v122;
    *(_DWORD *)(v117 + 664) = v118;
    *(float *)(v117 + 668) = v192;
    *(float *)(v117 + 672) = v191;
    *(_DWORD *)v117 = v105;
    if (v104 < 0)
      v123 = v104;
    else
      v123 = -v104;
    *(_DWORD *)(v117 + 32) = v123;
    v124 = __exp10f((float)v123 * 0.1);
    *(float *)(v117 + 56) = v124;
    *(float *)(v117 + 60) = sqrtf(v124);
    v125 = *((_QWORD *)this + 70);
    v126 = v190;
    *(float *)(v125 + 48) = v190;
    *(float *)(v125 + 52) = __exp10f(v126 * 0.1);
    v127 = *((_QWORD *)this + 9);
    if (v127)
    {
      v128 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v127 + 32))(v127, 0);
    }
    else
    {
      v129 = (ausdk::AUElement **)*((_QWORD *)this + 6);
      if (*((ausdk::AUElement ***)this + 7) == v129)
        v128 = 0;
      else
        v128 = *v129;
    }
    *(float *)(*((_QWORD *)this + 70) + 688) = ausdk::AUElement::GetParameter(v128, 0x21u);
    v130 = *((_QWORD *)this + 9);
    if (v130)
    {
      v131 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v130 + 32))(v130, 0);
    }
    else
    {
      v132 = (ausdk::AUElement **)*((_QWORD *)this + 6);
      if (*((ausdk::AUElement ***)this + 7) == v132)
        v131 = 0;
      else
        v131 = *v132;
    }
    v133 = ausdk::AUElement::GetParameter(v131, 0x22u);
    v134 = *((_QWORD *)this + 70);
    *(float *)(v134 + 680) = 1.0
                           - expf(-1.0 / (float)(v133 * (float)((float)*(int *)(v134 + 12) / (float)*(int *)(v134 + 8))));
    if (!*(_DWORD *)v134)
      *(_DWORD *)(v134 + 676) = 0;
    *((_DWORD *)this + 134) = v205;
  }
  v135 = *((_QWORD *)this + 9);
  if (v135)
  {
    v136 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v135 + 32))(v135, 0);
  }
  else
  {
    v137 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v137)
      v136 = 0;
    else
      v136 = *v137;
  }
  v138 = ausdk::AUElement::GetParameter(v136, 6u);
  v139 = *((_QWORD *)this + 9);
  if (v139)
  {
    v140 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v139 + 32))(v139, 0);
  }
  else
  {
    v141 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v141)
      v140 = 0;
    else
      v140 = *v141;
  }
  v142 = (int)v138;
  v143 = ausdk::AUElement::GetParameter(v140, 7u);
  v144 = *((_QWORD *)this + 9);
  if (v144)
  {
    v145 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v144 + 32))(v144, 0);
  }
  else
  {
    v146 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v146)
      v145 = 0;
    else
      v145 = *v146;
  }
  v147 = ausdk::AUElement::GetParameter(v145, 0xDu);
  v148 = *((_QWORD *)this + 70);
  *(_DWORD *)(v148 + 488) = v142;
  *(float *)(v148 + 492) = v143;
  *(float *)(v148 + 556) = v147;
  v149 = *(_DWORD *)v148;
  v150 = *((unsigned int *)this + 84);
  if (*(int *)v148 >= 2)
  {
    mData = 0;
    v152 = 0;
    v153 = 0;
    v154 = 0;
  }
  else
  {
    mData = (float *)a5[1]->mBuffers[0].mData;
    v152 = &mData[v150];
    v153 = (float *)a5[2]->mBuffers[0].mData;
    v154 = &v153[v150];
  }
  v155 = a5[3];
  if (v155)
    v156 = (uint64_t)v155->mBuffers[0].mData;
  else
    v156 = 0;
  v157 = (float *)(*a5)->mBuffers[0].mData;
  v208[0] = mData;
  v208[1] = v152;
  v207[0] = v153;
  v207[1] = v154;
  v160 = v149 < 2 && mData != 0 && v153 != 0;
  if ((v149 > 1 || v160) && *((_BYTE *)this + 541))
  {
    if (*((_BYTE *)this + 542) && *((_BYTE *)this + 540) && v157)
    {
      v206[0] = v157;
      v206[1] = &v157[v150];
      CResidualSuppressorV3::speex_preprocess_run_freq(v148, v206, v208, v207, v156);
      if (*((_BYTE *)this + 544))
      {
        v161 = *((_QWORD *)this + 70);
        v162 = *(const void **)(v161 + 344);
        v163 = *(const void **)(v161 + 352);
        v164 = (char *)(*a7)->mBuffers[0].mData;
        v165 = *((unsigned int *)this + 84);
        v166 = &v164[4 * v165];
        memcpy(v164, v162, 4 * v165);
        memcpy(v166, v163, 4 * *((unsigned int *)this + 84));
        memcpy(a7[1]->mBuffers[0].mData, *(const void **)(*((_QWORD *)this + 70) + 112), 4 * *(int *)(*((_QWORD *)this + 70) + 8));
      }
      goto LABEL_207;
    }
    v12 = 0xFFFFFFFFLL;
    if (*((_BYTE *)this + 542) && !*((_BYTE *)this + 540) && v157)
    {
      MEMORY[0x1E0C80A78](v148);
      v168 = (char *)&v190 - ((v167 + 15) & 0x7FFFFFFF0);
      memcpy(v168, v169, 4 * *((unsigned int *)this + 84));
      CResidualSuppressorV3::speex_preprocess_run(*((_QWORD *)this + 70), v168, v208, v207, v156);
      if (*((_BYTE *)this + 544))
      {
        v170 = *((_QWORD *)this + 70);
        v171 = *(const void **)(v170 + 344);
        v172 = *(const void **)(v170 + 352);
        v173 = (char *)(*a7)->mBuffers[0].mData;
        v174 = *((unsigned int *)this + 84);
        v175 = &v173[4 * v174];
        memcpy(v173, v171, 4 * v174);
        memcpy(v175, v172, 4 * *((unsigned int *)this + 84));
        v176 = a7[1]->mBuffers[0].mData;
        v177 = *((_QWORD *)this + 70);
        v178 = *(const void **)(v177 + 112);
        v179 = 4 * *(int *)(v177 + 8);
      }
      else
      {
        v176 = (*a7)->mBuffers[0].mData;
        v179 = 4 * *((unsigned int *)this + 84);
        v178 = v168;
      }
      memcpy(v176, v178, v179);
LABEL_207:
      if (*((_DWORD *)this + 138) == 2)
      {
        v180 = a7[1];
        v181 = v180->mBuffers[0].mDataByteSize;
        if (v181 >= 4)
          memset_pattern16(v180->mBuffers[0].mData, &unk_1B6627B80, v181 & 0xFFFFFFFC);
      }
      v12 = 0;
    }
  }
  else
  {
    v12 = 0xFFFFFFFFLL;
  }
  v182 = *((_QWORD *)this + 9);
  if (v182)
  {
    v183 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v182 + 32))(v182, 0);
  }
  else
  {
    v184 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v184)
      v183 = 0;
    else
      v183 = *v184;
  }
  ausdk::AUElement::SetParameter(v183, 0x20u, *(float *)(*((_QWORD *)this + 70) + 220), 0);
  v185 = *((_QWORD *)this + 70);
  if (*(int *)v185 >= 1)
  {
    v186 = *((_QWORD *)this + 9);
    if (v186)
    {
      v187 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v186 + 32))(v186, 0);
      v185 = *((_QWORD *)this + 70);
    }
    else
    {
      v188 = (ausdk::AUElement **)*((_QWORD *)this + 6);
      if (*((ausdk::AUElement ***)this + 7) == v188)
        v187 = 0;
      else
        v187 = *v188;
    }
    ausdk::AUElement::SetParameter(v187, 0x23u, *(float *)(v185 + 676), 0);
  }
  return v12;
}

uint64_t AUResidualEchoSuppressorV3::Render(AUResidualEchoSuppressorV3 *this, unsigned int *a2, const AudioTimeStamp *a3, uint64_t a4)
{
  uint64_t Element;
  ausdk::AUInputElement *v9;
  uint64_t v10;
  ausdk::AUInputElement *v11;
  uint64_t v12;
  uint64_t BufferList;
  uint64_t v15;
  uint64_t v16;
  ausdk::AUInputElement *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  ausdk::AUInputElement *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD v29[5];

  v29[4] = *MEMORY[0x1E0C80C00];
  if (*((_DWORD *)this + 84) != (_DWORD)a4)
    return 4294956422;
  if (!ausdk::AUBase::HasInput(this, 0))
    return 4294956420;
  Element = ausdk::AUScope::SafeGetElement((AUResidualEchoSuppressorV3 *)((char *)this + 128), 0);
  v9 = (ausdk::AUInputElement *)ausdk::AUScope::SafeGetElement((AUResidualEchoSuppressorV3 *)((char *)this + 80), 0);
  v10 = ausdk::AUInputElement::PullInput(v9, a2, a3, 0, a4);
  if (!(_DWORD)v10)
  {
    if (ausdk::AUBase::HasInput(this, 1u))
    {
      v11 = (ausdk::AUInputElement *)ausdk::AUScope::SafeGetElement((AUResidualEchoSuppressorV3 *)((char *)this + 80), 1u);
      v10 = ausdk::AUInputElement::PullInput(v11, a2, a3, 1, a4);
      v12 = ausdk::AUScope::SafeGetElement((AUResidualEchoSuppressorV3 *)((char *)this + 80), 1u);
      BufferList = ausdk::AUBufferList::GetBufferList((ausdk::AUBufferList *)(v12 + 144));
      if ((_DWORD)v10)
        return v10;
    }
    else
    {
      v15 = ausdk::AUScope::SafeGetElement((AUResidualEchoSuppressorV3 *)((char *)this + 80), 0);
      BufferList = ausdk::AUBufferList::GetBufferList((ausdk::AUBufferList *)(v15 + 144));
    }
    v16 = BufferList;
    if (ausdk::AUBase::HasInput(this, 2u))
    {
      v17 = (ausdk::AUInputElement *)ausdk::AUScope::SafeGetElement((AUResidualEchoSuppressorV3 *)((char *)this + 80), 2u);
      v10 = ausdk::AUInputElement::PullInput(v17, a2, a3, 2, a4);
      v18 = ausdk::AUScope::SafeGetElement((AUResidualEchoSuppressorV3 *)((char *)this + 80), 2u);
      v19 = ausdk::AUBufferList::GetBufferList((ausdk::AUBufferList *)(v18 + 144));
      if ((_DWORD)v10)
        return v10;
    }
    else
    {
      v20 = ausdk::AUScope::SafeGetElement((AUResidualEchoSuppressorV3 *)((char *)this + 80), 0);
      v19 = ausdk::AUBufferList::GetBufferList((ausdk::AUBufferList *)(v20 + 144));
    }
    v21 = v19;
    if (!ausdk::AUBase::HasInput(this, 3u))
    {
      v25 = ausdk::AUScope::SafeGetElement((AUResidualEchoSuppressorV3 *)((char *)this + 80), 0);
      v24 = ausdk::AUBufferList::GetBufferList((ausdk::AUBufferList *)(v25 + 144));
LABEL_19:
      v26 = v24;
      v27 = ausdk::AUScope::SafeGetElement((AUResidualEchoSuppressorV3 *)((char *)this + 80), 0);
      v29[0] = ausdk::AUBufferList::GetBufferList((ausdk::AUBufferList *)(v27 + 144));
      v29[1] = v16;
      v29[2] = v21;
      v29[3] = v26;
      v28 = ausdk::AUBufferList::GetBufferList((ausdk::AUBufferList *)(Element + 144));
      return (*(uint64_t (**)(AUResidualEchoSuppressorV3 *, unsigned int *, uint64_t, uint64_t, _QWORD *, uint64_t, uint64_t *))(*(_QWORD *)this + 184))(this, a2, a4, 4, v29, 1, &v28);
    }
    v22 = (ausdk::AUInputElement *)ausdk::AUScope::SafeGetElement((AUResidualEchoSuppressorV3 *)((char *)this + 80), 3u);
    v10 = ausdk::AUInputElement::PullInput(v22, a2, a3, 3, a4);
    v23 = ausdk::AUScope::SafeGetElement((AUResidualEchoSuppressorV3 *)((char *)this + 80), 3u);
    v24 = ausdk::AUBufferList::GetBufferList((ausdk::AUBufferList *)(v23 + 144));
    if (!(_DWORD)v10)
      goto LABEL_19;
  }
  return v10;
}

BOOL AUResidualEchoSuppressorV3::BusCountWritable(AUResidualEchoSuppressorV3 *this, int a2)
{
  return (a2 - 1) < 2;
}

uint64_t AUResidualEchoSuppressorV3::GetParameterInfo(AUResidualEchoSuppressorV3 *this, int a2, unsigned int a3, AudioUnitParameterInfo *buffer)
{
  uint64_t result;
  const __CFString *v6;
  AudioUnitParameterUnit v7;
  AudioUnitParameterValue v8;
  AudioUnitParameterValue v9;
  AudioUnitParameterValue v10;
  int v11;

  buffer->unitName = 0;
  buffer->flags = 0x40000000;
  result = 4294956418;
  if (!a2 && a3 <= 0x23)
  {
    v6 = off_1E69D84A8[a3];
    v7 = dword_1B665E490[a3];
    v8 = flt_1B665E520[a3];
    v9 = flt_1B665E5B0[a3];
    v10 = flt_1B665E640[a3];
    v11 = dword_1B665E6D0[a3];
    buffer->cfNameString = v6;
    buffer->flags = 1207959552;
    CFStringGetCString(v6, buffer->name, 52, 0x8000100u);
    result = 0;
    buffer->unit = v7;
    buffer->minValue = v8;
    buffer->maxValue = v9;
    buffer->defaultValue = v10;
    buffer->flags |= v11;
  }
  return result;
}

double AUResidualEchoSuppressorV3::GetLatency(AUResidualEchoSuppressorV3 *this)
{
  return 0.0;
}

double AUResidualEchoSuppressorV3::GetTailTime(AUResidualEchoSuppressorV3 *this)
{
  return 0.0;
}

uint64_t AUResidualEchoSuppressorV3::SupportsTail(AUResidualEchoSuppressorV3 *this)
{
  return 1;
}

BOOL AUResidualEchoSuppressorV3::StreamFormatWritable(AUResidualEchoSuppressorV3 *this)
{
  return *((_BYTE *)this + 17) == 0;
}

uint64_t AUResidualEchoSuppressorV3::SupportedNumChannels(AUResidualEchoSuppressorV3 *this, const AUChannelInfo **a2)
{
  if (a2)
    *a2 = (const AUChannelInfo *)&AUResidualEchoSuppressorV3::SupportedNumChannels(AUChannelInfo const**)::sSupportedChannelConfigs;
  return 1;
}

uint64_t AUResidualEchoSuppressorV3::ValidFormat(AUResidualEchoSuppressorV3 *this, const AudioStreamBasicDescription *a2, unsigned int a3, AudioStreamBasicDescription *a4)
{
  int v6;
  uint64_t result;
  __int128 v8;
  _OWORD v9[2];
  uint64_t v10;
  int v11;

  if (a4->mChannelsPerFrame != 1)
    return 0;
  v6 = (int)a2;
  result = ausdk::ASBD::IsCommonFloat32((ausdk::ASBD *)a4, a2);
  if (v6 == 1)
  {
    if (a3 > 2 || result == 1)
      return result;
    goto LABEL_11;
  }
  if (v6 != 2)
    return result;
  if ((result & 1) != 0)
    return 1;
  result = 0;
  if (!a3)
  {
LABEL_11:
    if (a4->mFormatID == 1718773105)
    {
      v8 = *(_OWORD *)&a4->mBytesPerPacket;
      v9[0] = *(_OWORD *)&a4->mSampleRate;
      v9[1] = v8;
      v10 = *(_QWORD *)&a4->mBitsPerChannel;
      DWORD2(v9[0]) = 1819304813;
      v11 = 0;
      LODWORD(result) = CAStreamBasicDescription::IdentifyCommonPCMFormat(v9, &v11, 0);
      if (v11 == 4)
        return result;
      else
        return 0;
    }
  }
  return result;
}

uint64_t AUResidualEchoSuppressorV3::ChangeStreamFormat(AUResidualEchoSuppressorV3 *this, uint64_t a2, uint64_t a3, const AudioStreamBasicDescription *a4, const AudioStreamBasicDescription *a5)
{
  unsigned int v6;
  int v7;
  BOOL *v9;

  v6 = a3;
  v7 = a2;
  ausdk::AUBase::ChangeStreamFormat(this, a2, a3, a4, a5);
  if (v7 != 2 || v6)
  {
    if (v7 == 1 && v6 <= 2)
    {
      v9 = (BOOL *)this + v6 + 540;
      *v9 = a5->mFormatID == 1718773105;
    }
  }
  else
  {
    *((_BYTE *)this + 544) = a5->mFormatID == 1718773105;
  }
  return 0;
}

uint64_t AUResidualEchoSuppressorV3::ShouldBypassEffect(AUResidualEchoSuppressorV3 *this)
{
  return *((unsigned __int8 *)this + 528);
}

uint64_t AUResidualEchoSuppressorV3::SetBypassEffect(uint64_t this, char a2)
{
  *(_BYTE *)(this + 528) = a2;
  return this;
}

void AUSoftClip::~AUSoftClip(AUSoftClip *this)
{
  AUSoftClip::~AUSoftClip(this);
  JUMPOUT(0x1BCC95CECLL);
}

{
  void **v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  void **v7;

  *(_QWORD *)this = &off_1E69D85D8;
  v2 = (void **)((char *)this + 528);
  v3 = (_QWORD *)*((_QWORD *)this + 67);
  v4 = (_QWORD *)*((_QWORD *)this + 66);
  while (v3 != v4)
  {
    v6 = *--v3;
    v5 = v6;
    *v3 = 0;
    if (v6)
      (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  }
  *((_QWORD *)this + 67) = v4;
  *(_OWORD *)((char *)this + 568) = 0u;
  *(_QWORD *)this = &off_1E69ED840;
  v7 = v2;
  std::vector<std::unique_ptr<DspLib::AlgorithmBaseNewParameters>>::__destroy_vector::operator()[abi:ne180100](&v7);
  ausdk::AUBase::~AUBase(this);
}

uint64_t AUSoftClip::Initialize(int64x2_t *this)
{
  uint64_t v2;

  v2 = ausdk::AUEffectBase::Initialize(this);
  if (!(_DWORD)v2)
    (*(void (**)(int64x2_t *, _QWORD, _QWORD))(this->i64[0] + 72))(this, 0, 0);
  return v2;
}

double AUSoftClip::Cleanup(AUSoftClip *this)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  double result;

  v2 = (_QWORD *)*((_QWORD *)this + 67);
  v3 = (_QWORD *)*((_QWORD *)this + 66);
  while (v2 != v3)
  {
    v5 = *--v2;
    v4 = v5;
    *v2 = 0;
    if (v5)
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  }
  *((_QWORD *)this + 67) = v3;
  result = 0.0;
  *(_OWORD *)((char *)this + 568) = 0u;
  return result;
}

uint64_t AUSoftClip::Reset(AUSoftClip *this, int a2)
{
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;

  v4 = (_QWORD *)*((_QWORD *)this + 66);
  v5 = (_QWORD *)*((_QWORD *)this + 67);
  while (v4 != v5)
  {
    if (*v4)
      (*(void (**)(_QWORD))(*(_QWORD *)*v4 + 16))(*v4);
    ++v4;
  }
  if (!a2)
  {
    v6 = (_QWORD *)*((_QWORD *)this + 66);
    if (*((_QWORD **)this + 67) != v6)
    {
      if (*v6)
        (*(void (**)(_QWORD))(*(_QWORD *)*v6 + 16))(*v6);
    }
  }
  return 0;
}

uint64_t AUSoftClip::SetParameter(AUSoftClip *this, unsigned int a2, unsigned int a3, unsigned int a4, float a5)
{
  ausdk::AUScope *Scope;
  ausdk::AUElement *Element;

  Scope = (ausdk::AUScope *)ausdk::AUBase::GetScope(this, a3);
  Element = (ausdk::AUElement *)ausdk::AUScope::SafeGetElement(Scope, a4);
  ausdk::AUElement::SetParameter(Element, a2, a5, 0);
  ++*((_DWORD *)this + 148);
  return 0;
}

uint64_t AUSoftClip::ProcessBufferLists(AUSoftClip *this, unsigned int *a2, const AudioBufferList *a3, AudioBufferList *a4, uint64_t a5)
{
  _QWORD *v9;
  _DWORD *exception;
  char IsInputSilent;

  if (a3->mNumberBuffers == 2)
  {
    v9 = (_QWORD *)*((_QWORD *)this + 66);
    if (!*v9)
    {
      exception = __cxa_allocate_exception(0x10uLL);
      *(_QWORD *)exception = &off_1E69EE218;
      exception[2] = -10868;
    }
    IsInputSilent = ausdk::AUEffectBase::IsInputSilent(this, *a2, a5);
    (*(void (**)(_QWORD, const AudioBufferList *, AudioBufferList *, uint64_t, char *))(*(_QWORD *)*v9 + 32))(*v9, a3, a4, a5, &IsInputSilent);
    if (!IsInputSilent)
      *a2 &= ~0x10u;
  }
  else
  {
    ausdk::AUEffectBase::ProcessBufferLists(this, a2, a3, a4, a5);
  }
  return 0;
}

uint64_t AUSoftClip::GetParameterInfo(AUSoftClip *this, int a2, int a3, AudioUnitParameterInfo *buffer)
{
  uint64_t result;
  const __CFString *v6;
  AudioUnitParameterValue v7;

  buffer->flags = -1073741824;
  buffer->unitName = 0;
  if (a2)
    return 4294956418;
  if (a3 == 1751216740)
  {
    v7 = -24.0;
    v6 = CFSTR("hard clip level dB");
  }
  else
  {
    if (a3 != 1936680564)
      return 4294956418;
    v6 = CFSTR("soft clip level dB");
    v7 = -48.0;
  }
  buffer->cfNameString = v6;
  buffer->flags = -939524096;
  CFStringGetCString(v6, buffer->name, 52, 0x8000100u);
  result = 0;
  buffer->unit = kAudioUnitParameterUnit_Decibels;
  buffer->minValue = v7;
  *(_QWORD *)&buffer->maxValue = 0;
  return result;
}

double AUSoftClip::GetLatency(AUSoftClip *this)
{
  return 0.0;
}

double AUSoftClip::GetTailTime(AUSoftClip *this)
{
  return 0.0;
}

uint64_t AUSoftClip::SupportsTail(AUSoftClip *this)
{
  return 1;
}

uint64_t AUSoftClip::SupportedNumChannels(AUSoftClip *this, const AUChannelInfo **a2)
{
  if (a2)
    *a2 = (const AUChannelInfo *)&AUSoftClip::SupportedNumChannels(AUChannelInfo const**)::sSupportedChannelConfigs;
  return 1;
}

BOOL AUSoftClip::ValidFormat(AUSoftClip *this, unsigned int a2, unsigned int a3, AudioStreamBasicDescription *a4)
{
  _BOOL8 result;
  int v7;
  BOOL v8;

  v8 = 0;
  v7 = 0;
  CAStreamBasicDescription::IdentifyCommonPCMFormat(a4, &v7, &v8);
  result = 0;
  if (v7 == 1)
    return a4->mChannelsPerFrame < 3 || !v8;
  return result;
}

uint64_t AUSoftClip::NewKernel@<X0>(AUSoftClip *this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t result;

  result = operator new();
  *(_DWORD *)(result + 16) = 0;
  *(_QWORD *)result = &off_1E69D8840;
  *(_QWORD *)(result + 8) = this;
  *(_DWORD *)(result + 48) = -1;
  *a2 = result;
  return result;
}

void SoftClipKernel::~SoftClipKernel(SoftClipKernel *this)
{
  JUMPOUT(0x1BCC95CECLL);
}

uint64_t SoftClipKernel::Process(SoftClipKernel *this, float *a2, float *a3, int a4, BOOL *a5, __n128 a6)
{
  _DWORD *v10;
  int v11;
  uint64_t result;
  float v13;
  float v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float v19;
  float v20;
  float v21;
  float v22;
  float v23;
  float v24;

  v10 = (_DWORD *)*((_QWORD *)this + 1);
  v11 = v10[148];
  if (v11 != *((_DWORD *)this + 12))
  {
    a6.n128_f32[0] = SoftClipKernel::CalculateCoeffs(this);
    *((_DWORD *)this + 12) = v11;
  }
  result = (*(uint64_t (**)(_DWORD *, __n128))(*(_QWORD *)v10 + 592))(v10, a6);
  if ((result & 1) == 0)
  {
    if (*((float *)this + 6) >= 1.0)
    {
      if (a4)
      {
        v20 = *((float *)this + 10);
        do
        {
          v21 = *a2++;
          v22 = v21;
          if (v21 >= (float)-v20)
            v23 = v22;
          else
            v23 = -v20;
          if (v22 <= v20)
            v24 = v23;
          else
            v24 = v20;
          *a3++ = v24;
          --a4;
        }
        while (a4);
      }
    }
    else if (a4)
    {
      v14 = *((float *)this + 7);
      v13 = *((float *)this + 8);
      v15 = *((float *)this + 9);
      v16 = *((float *)this + 10);
      v17 = *((float *)this + 11);
      do
      {
        v18 = *a2;
        v19 = v17 * *a2;
        if (*a2 >= 0.0)
        {
          if (v19 > v14)
          {
            v18 = v16;
            if (v19 < v13)
              v18 = v16 + (float)((float)((float)(v19 - v13) * (float)(v19 - v13)) * v15);
          }
        }
        else if (v19 < (float)-v14)
        {
          v18 = -v16;
          if (v19 >= (float)-v13)
            v18 = (float)((float)-(float)((float)((float)-v19 - v13) * (float)((float)-v19 - v13)) * v15) - v16;
        }
        *a3++ = v18;
        ++a2;
        --a4;
      }
      while (a4);
    }
  }
  return result;
}

uint64_t SoftClipKernel::ProcessStereoNonInterleaved(SoftClipKernel *this, const AudioBufferList *a2, AudioBufferList *a3, unsigned int a4, BOOL *a5, __n128 a6)
{
  _DWORD *v10;
  int v11;
  uint64_t result;
  float *mData;
  float *v14;
  float *v15;
  float *v16;
  float v17;
  float v18;
  float v19;
  float v20;
  float v21;
  float v22;
  float v23;
  uint64_t v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float v29;
  float v30;
  uint64_t v31;
  float v32;
  float v33;
  float v34;
  float v35;
  float v36;
  float v37;
  float v38;
  float v39;

  v10 = (_DWORD *)*((_QWORD *)this + 1);
  v11 = v10[148];
  if (v11 != *((_DWORD *)this + 12))
  {
    a6.n128_f32[0] = SoftClipKernel::CalculateCoeffs(this);
    *((_DWORD *)this + 12) = v11;
  }
  result = (*(uint64_t (**)(_DWORD *, __n128))(*(_QWORD *)v10 + 592))(v10, a6);
  if ((result & 1) == 0)
  {
    mData = (float *)a2->mBuffers[0].mData;
    v14 = *(float **)&a2[1].mBuffers[0].mNumberChannels;
    v15 = (float *)a3->mBuffers[0].mData;
    v16 = *(float **)&a3[1].mBuffers[0].mNumberChannels;
    if (*((float *)this + 6) >= 1.0)
    {
      if (a4)
      {
        v29 = *((float *)this + 10);
        v30 = -v29;
        v31 = a4;
        do
        {
          v32 = *mData++;
          v33 = v32;
          if (v32 >= v30)
            v34 = v33;
          else
            v34 = -v29;
          if (v33 <= v29)
            v35 = v34;
          else
            v35 = v29;
          *v15++ = v35;
          v36 = *v14++;
          v37 = v36;
          if (v36 >= v30)
            v38 = v37;
          else
            v38 = -v29;
          if (v37 <= v29)
            v39 = v38;
          else
            v39 = v29;
          *v16++ = v39;
          --v31;
        }
        while (v31);
      }
    }
    else if (a4)
    {
      v18 = *((float *)this + 7);
      v17 = *((float *)this + 8);
      v19 = *((float *)this + 9);
      v20 = *((float *)this + 10);
      v21 = *((float *)this + 11);
      v22 = -v18;
      v23 = -v17;
      v24 = a4;
      do
      {
        v25 = *mData;
        v26 = v21 * *mData;
        if (*mData >= 0.0)
        {
          if (v26 > v18)
          {
            v25 = v20;
            if (v26 < v17)
              v25 = v20 + (float)((float)((float)(v26 - v17) * (float)(v26 - v17)) * v19);
          }
        }
        else if (v26 < v22)
        {
          v25 = -v20;
          if (v26 >= v23)
            v25 = (float)((float)-(float)((float)((float)-v26 - v17) * (float)((float)-v26 - v17)) * v19) - v20;
        }
        *v15 = v25;
        v27 = *v14;
        v28 = v21 * *v14;
        if (*v14 >= 0.0)
        {
          if (v28 > v18)
          {
            v27 = v20;
            if (v28 < v17)
              v27 = v20 + (float)((float)((float)(v28 - v17) * (float)(v28 - v17)) * v19);
          }
        }
        else if (v28 < v22)
        {
          v27 = -v20;
          if (v28 >= v23)
            v27 = (float)((float)-(float)((float)((float)-v28 - v17) * (float)((float)-v28 - v17)) * v19) - v20;
        }
        *v16++ = v27;
        ++v14;
        ++v15;
        ++mData;
        --v24;
      }
      while (v24);
    }
  }
  return result;
}

float SoftClipKernel::CalculateCoeffs(SoftClipKernel *this)
{
  ausdk::AUEffectBase *v2;
  float Parameter;
  float v4;
  float v5;
  float v6;
  float v7;
  float v8;
  float result;

  v2 = (ausdk::AUEffectBase *)*((_QWORD *)this + 1);
  Parameter = ausdk::AUEffectBase::GetParameter(v2, 0x68617264u);
  v4 = __exp10f(Parameter * 0.05);
  v5 = ausdk::AUEffectBase::GetParameter(v2, 0x736F6674u);
  v6 = __exp10f(v5 * 0.05);
  if (v6 >= (float)(v4 * 0.98))
    v6 = v4;
  *((float *)this + 5) = v4;
  *((float *)this + 6) = v6;
  v7 = v6 / v4;
  v8 = v4 / ((v7 + -1.0) * 4.0);
  *((float *)this + 7) = v7;
  *((float *)this + 8) = 2.0 - v7;
  *((float *)this + 9) = v8;
  *((float *)this + 10) = v4;
  result = 1.0 / v4;
  *((float *)this + 11) = 1.0 / v4;
  return result;
}

uint64_t ausdk::AUEffectBase::IsInputSilent(ausdk::AUEffectBase *this, char a2, unsigned int a3)
{
  double v6;
  double v7;
  double v8;
  uint64_t result;
  unsigned int v10;
  BOOL v11;
  unsigned int v12;

  v6 = *(double *)(ausdk::AUScope::SafeGetElement((ausdk::AUEffectBase *)((char *)this + 128), 0) + 80);
  v7 = (*(double (**)(ausdk::AUEffectBase *))(*(_QWORD *)this + 344))(this);
  (*(void (**)(ausdk::AUEffectBase *))(*(_QWORD *)this + 352))(this);
  if ((a2 & 0x10) == 0)
  {
    result = 0;
    *((_BYTE *)this + 560) = 1;
    return result;
  }
  if (!*((_BYTE *)this + 560))
  {
    v10 = *((_DWORD *)this + 139);
    if (v10)
      goto LABEL_5;
    return 1;
  }
  v10 = (v6 * (v7 + v8));
  *((_DWORD *)this + 139) = v10;
  *((_BYTE *)this + 560) = 0;
  if (!v10)
    return 1;
LABEL_5:
  result = 0;
  v11 = v10 >= a3;
  v12 = v10 - a3;
  if (!v11)
    v12 = 0;
  *((_DWORD *)this + 139) = v12;
  return result;
}

os_log_t ___ZL22AUNeuralNetVADLogScopev_block_invoke_11611()
{
  _QWORD *v0;
  os_log_t result;

  v0 = (_QWORD *)operator new();
  v0[1] = 0;
  result = os_log_create("com.apple.coreaudio", "nnvad");
  *v0 = result;
  AUNeuralNetVADLogScope(void)::scope = (uint64_t)v0;
  return result;
}

void DirectionalVAD::setTargetDirection(DirectionalVAD *this, float a2, float a3)
{
  NSObject *v6;
  double v7;
  int v8;
  const char *v9;
  __int16 v10;
  int v11;
  __int16 v12;
  double v13;
  __int16 v14;
  double v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  *(float *)this = a2;
  if (a3 >= -90.0 && a3 <= 90.0)
  {
    *((float *)this + 1) = a3;
    return;
  }
  if (AUNeuralNetVADLogScope(void)::once != -1)
    dispatch_once(&AUNeuralNetVADLogScope(void)::once, &__block_literal_global_11607);
  if (AUNeuralNetVADLogScope(void)::scope)
  {
    v6 = *(NSObject **)AUNeuralNetVADLogScope(void)::scope;
    if (!*(_QWORD *)AUNeuralNetVADLogScope(void)::scope)
      return;
  }
  else
  {
    v6 = MEMORY[0x1E0C81028];
  }
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    v7 = *((float *)this + 1);
    v8 = 136315906;
    v9 = "DirectionalVAD.cpp";
    v10 = 1024;
    v11 = 82;
    v12 = 2048;
    v13 = a3;
    v14 = 2048;
    v15 = v7;
    _os_log_impl(&dword_1B5ED0000, v6, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Target elevation not set to (%f), it remains at the current value (%f). Elevation must be in range [-90, 90].\n", (uint8_t *)&v8, 0x26u);
  }
}

void DirectionalVAD::setCurrentDirection(float **this, float a2, float a3)
{
  NSObject *v6;
  double v7;
  int v8;
  const char *v9;
  __int16 v10;
  int v11;
  __int16 v12;
  double v13;
  __int16 v14;
  double v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  *this[9] = a2;
  if (a3 >= -90.0 && a3 <= 90.0)
  {
    *this[12] = a3;
    return;
  }
  if (AUNeuralNetVADLogScope(void)::once != -1)
    dispatch_once(&AUNeuralNetVADLogScope(void)::once, &__block_literal_global_11607);
  if (AUNeuralNetVADLogScope(void)::scope)
  {
    v6 = *(NSObject **)AUNeuralNetVADLogScope(void)::scope;
    if (!*(_QWORD *)AUNeuralNetVADLogScope(void)::scope)
      return;
  }
  else
  {
    v6 = MEMORY[0x1E0C81028];
  }
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    v7 = *this[12];
    v8 = 136315906;
    v9 = "DirectionalVAD.cpp";
    v10 = 1024;
    v11 = 110;
    v12 = 2048;
    v13 = a3;
    v14 = 2048;
    v15 = v7;
    _os_log_impl(&dword_1B5ED0000, v6, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Current elevation not set to (%f), it remains at the current value (%f). Elevation must be in range [-90, 90].\n", (uint8_t *)&v8, 0x26u);
  }
}

void DirectionalVAD::setShapeParameter(DirectionalVAD *this, float a2)
{
  NSObject *v4;
  double v5;
  int v6;
  const char *v7;
  __int16 v8;
  int v9;
  __int16 v10;
  double v11;
  __int16 v12;
  double v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  if (a2 >= 0.0)
  {
    *((float *)this + 14) = a2;
    return;
  }
  if (AUNeuralNetVADLogScope(void)::once != -1)
    dispatch_once(&AUNeuralNetVADLogScope(void)::once, &__block_literal_global_11607);
  if (AUNeuralNetVADLogScope(void)::scope)
  {
    v4 = *(NSObject **)AUNeuralNetVADLogScope(void)::scope;
    if (!*(_QWORD *)AUNeuralNetVADLogScope(void)::scope)
      return;
  }
  else
  {
    v4 = MEMORY[0x1E0C81028];
  }
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    v5 = *((float *)this + 14);
    v6 = 136315906;
    v7 = "DirectionalVAD.cpp";
    v8 = 1024;
    v9 = 127;
    v10 = 2048;
    v11 = a2;
    v12 = 2048;
    v13 = v5;
    _os_log_impl(&dword_1B5ED0000, v4, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Shape parameter not set to (%f), it remains at the current value (%f). Valid range is >= 0.\n", (uint8_t *)&v6, 0x26u);
  }
}

void DirectionalVAD::setConditionalTargetPrior(DirectionalVAD *this, float a2)
{
  NSObject *v5;
  double v6;
  int v7;
  const char *v8;
  __int16 v9;
  int v10;
  __int16 v11;
  double v12;
  __int16 v13;
  double v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  if (a2 >= 0.0 && a2 <= 1.0)
  {
    *((float *)this + 15) = a2;
    return;
  }
  if (AUNeuralNetVADLogScope(void)::once != -1)
    dispatch_once(&AUNeuralNetVADLogScope(void)::once, &__block_literal_global_11607);
  if (AUNeuralNetVADLogScope(void)::scope)
  {
    v5 = *(NSObject **)AUNeuralNetVADLogScope(void)::scope;
    if (!*(_QWORD *)AUNeuralNetVADLogScope(void)::scope)
      return;
  }
  else
  {
    v5 = MEMORY[0x1E0C81028];
  }
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    v6 = *((float *)this + 15);
    v7 = 136315906;
    v8 = "DirectionalVAD.cpp";
    v9 = 1024;
    v10 = 136;
    v11 = 2048;
    v12 = a2;
    v13 = 2048;
    v14 = v6;
    _os_log_impl(&dword_1B5ED0000, v5, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Conditional target prior not set to (%f), it remains at the current value (%f). Valid range is [0, 1].\n", (uint8_t *)&v7, 0x26u);
  }
}

void AUHOAZoom::~AUHOAZoom(AUHOAZoom *this)
{
  uint64_t v2;
  void **v3;

  *(_QWORD *)this = off_1E69D8A68;
  if (*((char *)this + 623) < 0)
    operator delete(*((void **)this + 75));
  v3 = (void **)((char *)this + 576);
  std::vector<std::__fs::filesystem::path>::__destroy_vector::operator()[abi:ne180100](&v3);
  std::__tree<std::__value_type<std::string,std::vector<float>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<float>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<float>>>>::destroy(*((_QWORD **)this + 70));
  v2 = *((_QWORD *)this + 67);
  *((_QWORD *)this + 67) = 0;
  if (v2)
    std::default_delete<DominanceZoom>::operator()[abi:ne180100](v2);
  std::unique_ptr<std::map<unsigned int,HOAZoomParameterInfo>>::reset[abi:ne180100]((uint64_t *)this + 66, 0);
  ausdk::AUBase::~AUBase(this);
}

{
  uint64_t v2;
  void **v3;

  *(_QWORD *)this = off_1E69D8A68;
  if (*((char *)this + 623) < 0)
    operator delete(*((void **)this + 75));
  v3 = (void **)((char *)this + 576);
  std::vector<std::__fs::filesystem::path>::__destroy_vector::operator()[abi:ne180100](&v3);
  std::__tree<std::__value_type<std::string,std::vector<float>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<float>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<float>>>>::destroy(*((_QWORD **)this + 70));
  v2 = *((_QWORD *)this + 67);
  *((_QWORD *)this + 67) = 0;
  if (v2)
    std::default_delete<DominanceZoom>::operator()[abi:ne180100](v2);
  std::unique_ptr<std::map<unsigned int,HOAZoomParameterInfo>>::reset[abi:ne180100]((uint64_t *)this + 66, 0);
  ausdk::AUBase::~AUBase(this);
  MEMORY[0x1BCC95CEC]();
}

uint64_t AUHOAZoom::Initialize(AUHOAZoom *this)
{
  NSObject *v2;
  uint64_t Element;
  __int128 v4;
  uint64_t v5;
  __int128 v6;
  double mSampleRate;
  DominanceZoom *v8;
  uint64_t v9;
  NSObject *v10;
  int v11;
  uint64_t v12;
  ausdk::AUElement *v13;
  uint64_t result;
  ausdk::AUElement *v15;
  ausdk::AUElement **v16;
  ausdk::AUElement **v17;
  float Parameter;
  NSObject *v19;
  uint64_t v20;
  ausdk::AUElement *v21;
  ausdk::AUElement **v22;
  float v23;
  NSObject *v24;
  float v25;
  NSObject *v26;
  uint64_t v27;
  ausdk::AUElement *v28;
  ausdk::AUElement **v29;
  float v30;
  NSObject *v31;
  NSObject *v32;
  _BOOL4 v33;
  __int128 v34;
  _BYTE v35[24];
  uint8_t v36[4];
  const char *v37;
  __int16 v38;
  int v39;
  __int16 v40;
  double v41;
  AudioStreamBasicDescription buf;
  uint64_t v43;

  v43 = *MEMORY[0x1E0C80C00];
  if (getAUHOAZoomLog(void)::onceToken != -1)
    dispatch_once(&getAUHOAZoomLog(void)::onceToken, &__block_literal_global_11643);
  v2 = getAUHOAZoomLog(void)::gLog;
  if (os_log_type_enabled((os_log_t)getAUHOAZoomLog(void)::gLog, OS_LOG_TYPE_DEFAULT))
  {
    LODWORD(buf.mSampleRate) = 136315394;
    *(_QWORD *)((char *)&buf.mSampleRate + 4) = "AUHOAZoom.mm";
    LOWORD(buf.mFormatFlags) = 1024;
    *(AudioFormatFlags *)((char *)&buf.mFormatFlags + 2) = 144;
    _os_log_impl(&dword_1B5ED0000, v2, OS_LOG_TYPE_DEFAULT, "%s:%i ---", (uint8_t *)&buf, 0x12u);
  }
  Element = ausdk::AUScope::SafeGetElement((AUHOAZoom *)((char *)this + 80), 0);
  v4 = *(_OWORD *)(Element + 96);
  *(_OWORD *)&buf.mSampleRate = *(_OWORD *)(Element + 80);
  *(_OWORD *)&buf.mBytesPerPacket = v4;
  *(_QWORD *)&buf.mBitsPerChannel = *(_QWORD *)(Element + 112);
  v5 = ausdk::AUScope::SafeGetElement((AUHOAZoom *)((char *)this + 128), 0);
  v6 = *(_OWORD *)(v5 + 96);
  v34 = *(_OWORD *)(v5 + 80);
  *(_OWORD *)v35 = v6;
  *(_QWORD *)&v35[16] = *(_QWORD *)(v5 + 112);
  if (*(double *)&v34 != buf.mSampleRate
    || DWORD2(v34) != buf.mFormatID
    || *(_QWORD *)v35 != *(_QWORD *)&buf.mBytesPerPacket
    || *(_QWORD *)&v35[12] != *(_QWORD *)&buf.mChannelsPerFrame
    || !CA::Implementation::EquivalentFormatFlags((CA::Implementation *)&v34, &buf, 0, 0)
    || *((_QWORD *)this + 79) != buf.mChannelsPerFrame
    || *((_DWORD *)this + 160) != 1)
  {
    return 4294956428;
  }
  *((_QWORD *)this + 78) = *((unsigned int *)this + 84);
  mSampleRate = buf.mSampleRate;
  v8 = (DominanceZoom *)operator new();
  DominanceZoom::DominanceZoom((uint64_t)v8, *((_DWORD *)this + 160), *((_DWORD *)this + 136), *((_QWORD *)this + 78), mSampleRate);
  v9 = *((_QWORD *)this + 67);
  *((_QWORD *)this + 67) = v8;
  if (v9)
    std::default_delete<DominanceZoom>::operator()[abi:ne180100](v9);
  DominanceZoom::SetZoomCurveValue(v8, (AUHOAZoom *)((char *)this + 552));
  if (getAUHOAZoomLog(void)::onceToken != -1)
    dispatch_once(&getAUHOAZoomLog(void)::onceToken, &__block_literal_global_11643);
  v10 = getAUHOAZoomLog(void)::gLog;
  if (os_log_type_enabled((os_log_t)getAUHOAZoomLog(void)::gLog, OS_LOG_TYPE_DEFAULT))
  {
    v11 = *((unsigned __int8 *)this + 644);
    *(_DWORD *)v36 = 136315650;
    v37 = "AUHOAZoom.mm";
    v38 = 1024;
    v39 = 172;
    v40 = 1024;
    LODWORD(v41) = v11;
    _os_log_impl(&dword_1B5ED0000, v10, OS_LOG_TYPE_DEFAULT, "%s:%i mFOVWasSetLast = %i", v36, 0x18u);
  }
  v12 = *((_QWORD *)this + 9);
  if (*((_BYTE *)this + 644))
  {
    if (v12)
    {
      v13 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v12 + 32))(v12, 0);
    }
    else
    {
      v16 = (ausdk::AUElement **)*((_QWORD *)this + 6);
      if (*((ausdk::AUElement ***)this + 7) == v16)
        v13 = 0;
      else
        v13 = *v16;
    }
    Parameter = ausdk::AUElement::GetParameter(v13, 2u);
    if (getAUHOAZoomLog(void)::onceToken != -1)
      dispatch_once(&getAUHOAZoomLog(void)::onceToken, &__block_literal_global_11643);
    v19 = getAUHOAZoomLog(void)::gLog;
    if (os_log_type_enabled((os_log_t)getAUHOAZoomLog(void)::gLog, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)v36 = 136315650;
      v37 = "AUHOAZoom.mm";
      v38 = 1024;
      v39 = 175;
      v40 = 2048;
      v41 = Parameter;
      _os_log_impl(&dword_1B5ED0000, v19, OS_LOG_TYPE_DEFAULT, "%s:%i Setting zoom amount %f on mDominanceZoom", v36, 0x1Cu);
    }
    DominanceZoom::SetZoomAmount(*((DominanceZoom **)this + 67), Parameter);
    v20 = *((_QWORD *)this + 9);
    if (v20)
    {
      v21 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v20 + 32))(v20, 0);
    }
    else
    {
      v22 = (ausdk::AUElement **)*((_QWORD *)this + 6);
      if (*((ausdk::AUElement ***)this + 7) == v22)
        v21 = 0;
      else
        v21 = *v22;
    }
    v23 = ausdk::AUElement::GetParameter(v21, 1u);
    if (getAUHOAZoomLog(void)::onceToken != -1)
      dispatch_once(&getAUHOAZoomLog(void)::onceToken, &__block_literal_global_11643);
    v24 = getAUHOAZoomLog(void)::gLog;
    if (os_log_type_enabled((os_log_t)getAUHOAZoomLog(void)::gLog, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)v36 = 136315650;
      v37 = "AUHOAZoom.mm";
      v38 = 1024;
      v39 = 179;
      v40 = 2048;
      v41 = v23;
      _os_log_impl(&dword_1B5ED0000, v24, OS_LOG_TYPE_DEFAULT, "%s:%i Setting FOV %f on mDominanceZoom", v36, 0x1Cu);
    }
    DominanceZoom::SetFOV(*((DominanceZoom **)this + 67), v23);
  }
  else
  {
    if (v12)
    {
      v15 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v12 + 32))(v12, 0);
    }
    else
    {
      v17 = (ausdk::AUElement **)*((_QWORD *)this + 6);
      if (*((ausdk::AUElement ***)this + 7) == v17)
        v15 = 0;
      else
        v15 = *v17;
    }
    v25 = ausdk::AUElement::GetParameter(v15, 1u);
    getAUHOAZoomLog();
    v26 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v26, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)v36 = 136315650;
      v37 = "AUHOAZoom.mm";
      v38 = 1024;
      v39 = 183;
      v40 = 2048;
      v41 = v25;
      _os_log_impl(&dword_1B5ED0000, v26, OS_LOG_TYPE_DEFAULT, "%s:%i Setting FOV %f on mDominanceZoom", v36, 0x1Cu);
    }

    DominanceZoom::SetFOV(*((DominanceZoom **)this + 67), v25);
    v27 = *((_QWORD *)this + 9);
    if (v27)
    {
      v28 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v27 + 32))(v27, 0);
    }
    else
    {
      v29 = (ausdk::AUElement **)*((_QWORD *)this + 6);
      if (*((ausdk::AUElement ***)this + 7) == v29)
        v28 = 0;
      else
        v28 = *v29;
    }
    v30 = ausdk::AUElement::GetParameter(v28, 2u);
    getAUHOAZoomLog();
    v31 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v31, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)v36 = 136315650;
      v37 = "AUHOAZoom.mm";
      v38 = 1024;
      v39 = 187;
      v40 = 2048;
      v41 = v30;
      _os_log_impl(&dword_1B5ED0000, v31, OS_LOG_TYPE_DEFAULT, "%s:%i Setting zoom amount %f on mDominanceZoom", v36, 0x1Cu);
    }

    DominanceZoom::SetZoomAmount(*((DominanceZoom **)this + 67), v30);
  }
  if (getAUHOAZoomLog(void)::onceToken != -1)
    dispatch_once(&getAUHOAZoomLog(void)::onceToken, &__block_literal_global_11643);
  v32 = getAUHOAZoomLog(void)::gLog;
  v33 = os_log_type_enabled((os_log_t)getAUHOAZoomLog(void)::gLog, OS_LOG_TYPE_DEFAULT);
  result = 0;
  if (v33)
  {
    *(_DWORD *)v36 = 136315650;
    v37 = "AUHOAZoom.mm";
    v38 = 1024;
    v39 = 191;
    v40 = 1024;
    LODWORD(v41) = 0;
    _os_log_impl(&dword_1B5ED0000, v32, OS_LOG_TYPE_DEFAULT, "%s:%i Done initializing result = %i", v36, 0x18u);
    return 0;
  }
  return result;
}

void sub_1B63A20C0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1BCC95CEC](v1, 0x10B2C4085F10906);
  _Unwind_Resume(a1);
}

uint64_t AUHOAZoom::Cleanup(AUHOAZoom *this)
{
  NSObject *v2;
  uint64_t result;
  int v4;
  const char *v5;
  __int16 v6;
  int v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  if (getAUHOAZoomLog(void)::onceToken != -1)
    dispatch_once(&getAUHOAZoomLog(void)::onceToken, &__block_literal_global_11643);
  v2 = getAUHOAZoomLog(void)::gLog;
  if (os_log_type_enabled((os_log_t)getAUHOAZoomLog(void)::gLog, OS_LOG_TYPE_DEFAULT))
  {
    v4 = 136315394;
    v5 = "AUHOAZoom.mm";
    v6 = 1024;
    v7 = 197;
    _os_log_impl(&dword_1B5ED0000, v2, OS_LOG_TYPE_DEFAULT, "%s:%i ----", (uint8_t *)&v4, 0x12u);
  }
  result = *((_QWORD *)this + 67);
  *((_QWORD *)this + 67) = 0;
  if (result)
    std::default_delete<DominanceZoom>::operator()[abi:ne180100](result);
  return result;
}

uint64_t AUHOAZoom::GetPropertyInfo(AUHOAZoom *this, int a2, int a3, unsigned int a4, unsigned int *a5, BOOL *a6)
{
  uint64_t result;
  BOOL v7;
  unsigned int v8;

  result = 4294956417;
  if (!a3)
  {
    if (a2 > 2000)
    {
      if (a2 == 2001)
      {
        v7 = 0;
LABEL_13:
        v8 = 8;
        goto LABEL_14;
      }
      if (a2 != 3700)
        return result;
      v7 = 0;
    }
    else
    {
      if (a2 != 21)
      {
        if (a2 != 2000)
          return result;
        v7 = 1;
        goto LABEL_13;
      }
      v7 = 1;
    }
    v8 = 4;
LABEL_14:
    result = 0;
    *a5 = v8;
    *a6 = v7;
  }
  return result;
}

uint64_t AUHOAZoom::GetProperty(std::vector<std::string> *this, int a2, int a3, unsigned int a4, __CFDictionary **a5)
{
  uint64_t v5;
  void *v9;
  void *v10;
  __CFDictionary *v11;
  uint64_t v12;
  std::string *p_end;
  std::string::size_type v14;
  std::string::size_type v15;
  int value_low;
  void *v17;
  id v18;
  std::vector<std::string>::pointer end;
  NSObject *v20;
  NSObject *v21;
  std::vector<std::string>::pointer begin;
  double v24;
  id v25;
  void *v26;
  double v27;
  _DWORD *i;
  std::string::size_type size;
  void *v30;
  void *v31;
  void *v32;
  void **p_begin;
  std::string __p;
  __int128 v35;
  std::string *v36;
  __int128 v37;
  std::string *v38;
  _BYTE buf[12];
  __int16 v40;
  int v41;
  uint64_t v42;

  v42 = *MEMORY[0x1E0C80C00];
  if (!a3)
  {
    v5 = 4294956417;
    if (a2 > 2000)
    {
      if (a2 == 2001)
      {
        v17 = (void *)objc_opt_new();
        v10 = v17;
        if (v17)
        {
          if (this[22].__end_)
          {
            v18 = v17;
            end = this[22].__end_;
            if (getAUHOAZoomLog(void)::onceToken != -1)
              dispatch_once(&getAUHOAZoomLog(void)::onceToken, &__block_literal_global_22500);
            v20 = getAUHOAZoomLog(void)::gLog;
            if (os_log_type_enabled((os_log_t)getAUHOAZoomLog(void)::gLog, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)buf = 136315394;
              *(_QWORD *)&buf[4] = "DominanceZoom.cpp";
              v40 = 1024;
              v41 = 230;
              _os_log_impl(&dword_1B5ED0000, v20, OS_LOG_TYPE_DEFAULT, "%s:%i --", buf, 0x12u);
            }
            caulk::pooled_semaphore_mutex::_lock((caulk::pooled_semaphore_mutex *)&end[8]);
            if (getAUHOAZoomLog(void)::onceToken != -1)
              dispatch_once(&getAUHOAZoomLog(void)::onceToken, &__block_literal_global_22500);
            v21 = getAUHOAZoomLog(void)::gLog;
            if (os_log_type_enabled((os_log_t)getAUHOAZoomLog(void)::gLog, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)buf = 136315394;
              *(_QWORD *)&buf[4] = "DominanceZoom.cpp";
              v40 = 1024;
              v41 = 230;
              _os_log_impl(&dword_1B5ED0000, v21, OS_LOG_TYPE_DEFAULT, "%s:%i locked", buf, 0x12u);
            }
            if (atomic_load((unsigned int *)&end[14]))
              DominanceCurveCoordinator::UpdateEffectiveDominanceCurve((DominanceCurveCoordinator *)end);
            memset(&__p, 0, sizeof(__p));
            std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(&__p, end[3].__r_.__value_.__l.__data_, end[3].__r_.__value_.__l.__size_, (uint64_t)(end[3].__r_.__value_.__l.__size_ - end[3].__r_.__value_.__r.__words[0]) >> 2);
            caulk::pooled_semaphore_mutex::_unlock((caulk::pooled_semaphore_mutex *)&end[8]);
            begin = this[26].__begin_;
            v24 = *(double *)(ausdk::AUScope::SafeGetElement((ausdk::AUScope *)&this[3].__end_, 0) + 80);
            v25 = v18;
            v26 = (void *)objc_opt_new();
            size = __p.__r_.__value_.__l.__size_;
            for (i = (_DWORD *)__p.__r_.__value_.__r.__words[0]; i != (_DWORD *)size; ++i)
            {
              LODWORD(v27) = *i;
              objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithFloat:", v27);
              v30 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v26, "addObject:", v30);

            }
            objc_msgSend(v25, "setObject:forKeyedSubscript:", v26, CFSTR("DominanceValues"));
            objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInt:", begin);
            v31 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v25, "setObject:forKeyedSubscript:", v31, CFSTR("BlockSize"));

            objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithDouble:", v24);
            v32 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v25, "setObject:forKeyedSubscript:", v32, CFSTR("SampleRate"));

            *a5 = (__CFDictionary *)v25;
            if (__p.__r_.__value_.__r.__words[0])
            {
              __p.__r_.__value_.__l.__size_ = __p.__r_.__value_.__r.__words[0];
              operator delete(__p.__r_.__value_.__l.__data_);
            }
            v5 = 0;
          }
          else
          {
            v5 = 4294956429;
          }
        }
        else
        {
          v5 = 4294956433;
        }
        goto LABEL_41;
      }
      if (a2 != 3700)
        return v5;
      v5 = 0;
      value_low = LOBYTE(this[15].__end_cap_.__value_);
    }
    else
    {
      if (a2 != 21)
      {
        if (a2 != 2000)
          return v5;
        v9 = (void *)objc_opt_new();
        v10 = v9;
        if (v9)
        {
          v11 = v9;
          v12 = (uint64_t)this[22].__end_;
          if (v12)
          {
            DominanceZoom::CopyZoomCurveValue(&__p, v12);
            p_end = (std::string *)&this[23].__end_;
            std::__tree<std::__value_type<std::string,std::vector<float>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<float>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<float>>>>::destroy(this[23].__end_->__r_.__value_.__r.__words);
            v14 = __p.__r_.__value_.__l.__size_;
            this[23].__begin_ = (std::vector<std::string>::pointer)__p.__r_.__value_.__r.__words[0];
            this[23].__end_ = (std::vector<std::string>::pointer)v14;
            v15 = __p.__r_.__value_.__r.__words[2];
            this[23].__end_cap_.__value_ = (std::string *)__p.__r_.__value_.__r.__words[2];
            if (v15)
            {
              *(_QWORD *)(v14 + 16) = p_end;
              __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p.__r_.__value_.__l.__size_;
              *(_OWORD *)&__p.__r_.__value_.__r.__words[1] = 0uLL;
            }
            else
            {
              this[23].__begin_ = p_end;
            }
            std::vector<std::__fs::filesystem::path>::__vdeallocate(this + 24);
            *(_OWORD *)&this[24].__begin_ = v35;
            this[24].__end_cap_.__value_ = v36;
            v36 = 0;
            v35 = 0uLL;
            p_begin = (void **)&this[25].__begin_;
            if (SHIBYTE(this[25].__end_cap_.__value_) < 0)
              operator delete(*p_begin);
            *(_OWORD *)p_begin = v37;
            this[25].__end_cap_.__value_ = v38;
            HIBYTE(v38) = 0;
            LOBYTE(v37) = 0;
            *(_QWORD *)buf = &v35;
            std::vector<std::__fs::filesystem::path>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
            std::__tree<std::__value_type<std::string,std::vector<float>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<float>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<float>>>>::destroy((_QWORD *)__p.__r_.__value_.__l.__size_);
          }
          ZoomCurveValue::SaveToDictionary((ZoomCurveValue *)&this[23], v11);
          v5 = 0;
          *a5 = v11;
        }
        else
        {
          v5 = 4294956433;
        }
LABEL_41:

        return v5;
      }
      v5 = 0;
      value_low = BYTE4(this[27].__begin_);
    }
    *(_DWORD *)a5 = value_low;
    return v5;
  }
  return 4294956417;
}

void sub_1B63A2698(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  void *v11;
  void *v12;
  void *v13;
  void *v14;

  if (__p)
    operator delete(__p);

  _Unwind_Resume(a1);
}

uint64_t AUHOAZoom::SetProperty(AUHOAZoom *this, int a2, int a3, unsigned int a4, _DWORD *a5, int a6)
{
  uint64_t result;
  void *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  void **v13;
  DominanceZoom *v14;
  void *__p[2];
  char v16;
  std::string v17;
  __int128 *v18;
  __int128 *v19;
  char *v20;
  __int128 **v21;
  char v22;
  __int128 v23;
  uint64_t v24;
  __int128 v25;
  uint64_t v26;
  __int128 v27;
  uint64_t v28;
  __int128 v29;

  *(_QWORD *)&v29 = *MEMORY[0x1E0C80C00];
  if (a3)
    return 4294956417;
  if (a2 == 21)
  {
    *((_BYTE *)this + 652) = *a5 != 0;
    return 4294956417;
  }
  if (a2 != 2000)
    return 4294956417;
  result = 4294956445;
  if (a6 == 8)
  {
    v8 = *(void **)a5;
    if (*(_QWORD *)a5)
    {
      std::string::basic_string[abi:ne180100]<0>(&v23, "HOAZoomCurve");
      std::string::basic_string[abi:ne180100]<0>(&v25, "HOAZoomInDominanceCurve");
      std::string::basic_string[abi:ne180100]<0>(&v27, "HOAZoomOutDominanceCurve");
      v18 = 0;
      v19 = 0;
      v20 = 0;
      v21 = &v18;
      v22 = 0;
      v18 = (__int128 *)operator new(0x48uLL);
      v19 = v18;
      v20 = (char *)v18 + 72;
      v9 = 0;
      v19 = (__int128 *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v20, &v23, &v29, (std::string *)v18);
      do
      {
        if (*((char *)&v28 + v9 + 7) < 0)
          operator delete(*(void **)((char *)&v27 + v9));
        v9 -= 24;
      }
      while (v9 != -72);
      memset(&v17, 0, sizeof(v17));
      std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v17, v18, v19, 0xAAAAAAAAAAAAAAABLL * (((char *)v19 - (char *)v18) >> 3));
      std::string::basic_string[abi:ne180100]<0>(__p, "");
      ZoomCurveValue::LoadFromDictionary((uint64_t)&v23, v8, (__int128 **)&v17, (uint64_t *)__p);
      v10 = (char *)this + 560;
      std::__tree<std::__value_type<std::string,std::vector<float>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<float>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<float>>>>::destroy(*((_QWORD **)this + 70));
      v11 = *((_QWORD *)&v23 + 1);
      *((_QWORD *)this + 69) = v23;
      *((_QWORD *)this + 70) = v11;
      v12 = v24;
      *((_QWORD *)this + 71) = v24;
      if (v12)
      {
        *(_QWORD *)(v11 + 16) = v10;
        *(_QWORD *)&v23 = (char *)&v23 + 8;
        *((_QWORD *)&v23 + 1) = 0;
        v24 = 0;
      }
      else
      {
        *((_QWORD *)this + 69) = v10;
      }
      std::vector<std::__fs::filesystem::path>::__vdeallocate((std::vector<std::string> *)this + 24);
      *((_OWORD *)this + 36) = v25;
      *((_QWORD *)this + 74) = v26;
      v26 = 0;
      v25 = 0uLL;
      v13 = (void **)((char *)this + 600);
      if (*((char *)this + 623) < 0)
        operator delete(*v13);
      *(_OWORD *)v13 = v27;
      *((_QWORD *)this + 77) = v28;
      HIBYTE(v28) = 0;
      LOBYTE(v27) = 0;
      v21 = (__int128 **)&v25;
      std::vector<std::__fs::filesystem::path>::__destroy_vector::operator()[abi:ne180100]((void ***)&v21);
      std::__tree<std::__value_type<std::string,std::vector<float>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<float>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<float>>>>::destroy(*((_QWORD **)&v23 + 1));
      if (v16 < 0)
        operator delete(__p[0]);
      v21 = (__int128 **)&v17;
      std::vector<std::__fs::filesystem::path>::__destroy_vector::operator()[abi:ne180100]((void ***)&v21);
      v14 = (DominanceZoom *)*((_QWORD *)this + 67);
      if (v14)
        DominanceZoom::SetZoomCurveValue(v14, (AUHOAZoom *)((char *)this + 552));
      *(_QWORD *)&v23 = &v18;
      std::vector<std::__fs::filesystem::path>::__destroy_vector::operator()[abi:ne180100]((void ***)&v23);
      return 0;
    }
  }
  return result;
}

void sub_1B63A29B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char *a24)
{
  a24 = &a19;
  std::vector<std::__fs::filesystem::path>::__destroy_vector::operator()[abi:ne180100]((void ***)&a24);
  _Unwind_Resume(a1);
}

uint64_t AUHOAZoom::GetParameter(AUHOAZoom *this, unsigned int a2, unsigned int a3, unsigned int a4, float *a5)
{
  ausdk::AUScope *Scope;
  ausdk::AUElement *Element;
  float *v12;
  NSObject *v13;
  NSObject *v14;
  float v15;
  NSObject *v16;
  uint64_t v17;
  ausdk::AUElement *v18;
  NSObject *v19;
  NSObject *v20;
  float v21;
  NSObject *v22;
  uint64_t v23;
  ausdk::AUElement *v24;
  ausdk::AUElement **v25;
  ausdk::AUElement **v26;
  uint64_t v27;
  ausdk::AUElement *v28;
  ausdk::AUElement **v29;
  NSObject *v30;
  double v31;
  int v33;
  const char *v34;
  __int16 v35;
  int v36;
  __int16 v37;
  int v38;
  __int16 v39;
  double v40;
  uint64_t v41;

  v41 = *MEMORY[0x1E0C80C00];
  Scope = (ausdk::AUScope *)ausdk::AUBase::GetScope(this, a3);
  Element = (ausdk::AUElement *)ausdk::AUScope::SafeGetElement(Scope, a4);
  *a5 = ausdk::AUElement::GetParameter(Element, a2);
  if (!a3)
  {
    v12 = (float *)*((_QWORD *)this + 67);
    if (v12)
    {
      if (a2 == 1)
      {
        if (getAUHOAZoomLog(void)::onceToken != -1)
          dispatch_once(&getAUHOAZoomLog(void)::onceToken, &__block_literal_global_22500);
        v19 = getAUHOAZoomLog(void)::gLog;
        if (os_log_type_enabled((os_log_t)getAUHOAZoomLog(void)::gLog, OS_LOG_TYPE_DEFAULT))
        {
          v33 = 136315394;
          v34 = "DominanceZoom.cpp";
          v35 = 1024;
          v36 = 211;
          _os_log_impl(&dword_1B5ED0000, v19, OS_LOG_TYPE_DEFAULT, "%s:%i --", (uint8_t *)&v33, 0x12u);
        }
        caulk::pooled_semaphore_mutex::_lock((caulk::pooled_semaphore_mutex *)(v12 + 48));
        if (getAUHOAZoomLog(void)::onceToken != -1)
          dispatch_once(&getAUHOAZoomLog(void)::onceToken, &__block_literal_global_22500);
        v20 = getAUHOAZoomLog(void)::gLog;
        if (os_log_type_enabled((os_log_t)getAUHOAZoomLog(void)::gLog, OS_LOG_TYPE_DEFAULT))
        {
          v33 = 136315394;
          v34 = "DominanceZoom.cpp";
          v35 = 1024;
          v36 = 211;
          _os_log_impl(&dword_1B5ED0000, v20, OS_LOG_TYPE_DEFAULT, "%s:%i locked", (uint8_t *)&v33, 0x12u);
        }
        v21 = v12[47];
        caulk::pooled_semaphore_mutex::_unlock((caulk::pooled_semaphore_mutex *)(v12 + 48));
        if (getAUHOAZoomLog(void)::onceToken != -1)
          dispatch_once(&getAUHOAZoomLog(void)::onceToken, &__block_literal_global_11643);
        v22 = getAUHOAZoomLog(void)::gLog;
        if (os_log_type_enabled((os_log_t)getAUHOAZoomLog(void)::gLog, OS_LOG_TYPE_DEFAULT))
        {
          v33 = 136315906;
          v34 = "AUHOAZoom.mm";
          v35 = 1024;
          v36 = 480;
          v37 = 1024;
          v38 = 1;
          v39 = 2048;
          v40 = v21;
          _os_log_impl(&dword_1B5ED0000, v22, OS_LOG_TYPE_DEFAULT, "%s:%i Read param %i val %f from mDominanceZoom", (uint8_t *)&v33, 0x22u);
        }
        v23 = *((_QWORD *)this + 9);
        if (v23)
        {
          v24 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v23 + 32))(v23, 0);
        }
        else
        {
          v26 = (ausdk::AUElement **)*((_QWORD *)this + 6);
          if (*((ausdk::AUElement ***)this + 7) == v26)
            v24 = 0;
          else
            v24 = *v26;
        }
        ausdk::AUElement::SetParameter(v24, 1u, v21, 0);
      }
      else if (!a2)
      {
        if (getAUHOAZoomLog(void)::onceToken != -1)
          dispatch_once(&getAUHOAZoomLog(void)::onceToken, &__block_literal_global_22500);
        v13 = getAUHOAZoomLog(void)::gLog;
        if (os_log_type_enabled((os_log_t)getAUHOAZoomLog(void)::gLog, OS_LOG_TYPE_DEFAULT))
        {
          v33 = 136315394;
          v34 = "DominanceZoom.cpp";
          v35 = 1024;
          v36 = 224;
          _os_log_impl(&dword_1B5ED0000, v13, OS_LOG_TYPE_DEFAULT, "%s:%i --", (uint8_t *)&v33, 0x12u);
        }
        caulk::pooled_semaphore_mutex::_lock((caulk::pooled_semaphore_mutex *)(v12 + 48));
        if (getAUHOAZoomLog(void)::onceToken != -1)
          dispatch_once(&getAUHOAZoomLog(void)::onceToken, &__block_literal_global_22500);
        v14 = getAUHOAZoomLog(void)::gLog;
        if (os_log_type_enabled((os_log_t)getAUHOAZoomLog(void)::gLog, OS_LOG_TYPE_DEFAULT))
        {
          v33 = 136315394;
          v34 = "DominanceZoom.cpp";
          v35 = 1024;
          v36 = 224;
          _os_log_impl(&dword_1B5ED0000, v14, OS_LOG_TYPE_DEFAULT, "%s:%i locked", (uint8_t *)&v33, 0x12u);
        }
        v15 = v12[46];
        caulk::pooled_semaphore_mutex::_unlock((caulk::pooled_semaphore_mutex *)(v12 + 48));
        if (getAUHOAZoomLog(void)::onceToken != -1)
          dispatch_once(&getAUHOAZoomLog(void)::onceToken, &__block_literal_global_11643);
        v16 = getAUHOAZoomLog(void)::gLog;
        if (os_log_type_enabled((os_log_t)getAUHOAZoomLog(void)::gLog, OS_LOG_TYPE_DEFAULT))
        {
          v33 = 136315906;
          v34 = "AUHOAZoom.mm";
          v35 = 1024;
          v36 = 475;
          v37 = 1024;
          v38 = 0;
          v39 = 2048;
          v40 = v15;
          _os_log_impl(&dword_1B5ED0000, v16, OS_LOG_TYPE_DEFAULT, "%s:%i Read param %i val %f from mDominanceZoom", (uint8_t *)&v33, 0x22u);
        }
        v17 = *((_QWORD *)this + 9);
        if (v17)
        {
          v18 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v17 + 32))(v17, 0);
        }
        else
        {
          v25 = (ausdk::AUElement **)*((_QWORD *)this + 6);
          if (*((ausdk::AUElement ***)this + 7) == v25)
            v18 = 0;
          else
            v18 = *v25;
        }
        ausdk::AUElement::SetParameter(v18, 0, v15, 0);
      }
    }
    v27 = *((_QWORD *)this + 9);
    if (v27)
    {
      v28 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v27 + 32))(v27, 0);
    }
    else
    {
      v29 = (ausdk::AUElement **)*((_QWORD *)this + 6);
      if (*((ausdk::AUElement ***)this + 7) == v29)
        v28 = 0;
      else
        v28 = *v29;
    }
    *a5 = ausdk::AUElement::GetParameter(v28, a2);
    if (getAUHOAZoomLog(void)::onceToken != -1)
      dispatch_once(&getAUHOAZoomLog(void)::onceToken, &__block_literal_global_11643);
    v30 = getAUHOAZoomLog(void)::gLog;
    if (os_log_type_enabled((os_log_t)getAUHOAZoomLog(void)::gLog, OS_LOG_TYPE_DEFAULT))
    {
      v31 = *a5;
      v33 = 136315906;
      v34 = "AUHOAZoom.mm";
      v35 = 1024;
      v36 = 488;
      v37 = 1024;
      v38 = a2;
      v39 = 2048;
      v40 = v31;
      _os_log_impl(&dword_1B5ED0000, v30, OS_LOG_TYPE_DEFAULT, "%s:%i param ID %i outValue %f", (uint8_t *)&v33, 0x22u);
    }
  }
  return 0;
}

void sub_1B63A3050(_Unwind_Exception *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  _Unwind_Resume(a1);
}

uint64_t AUHOAZoom::SetParameter(DominanceZoom **this, unsigned int a2, int a3, float a4)
{
  DominanceZoom *v8;
  NSObject *v9;
  NSObject *v10;
  DominanceZoom *v11;
  ausdk::AUElement *v12;
  ausdk::AUElement **v13;
  int v14;
  const char *v15;
  __int16 v16;
  int v17;
  __int16 v18;
  double v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  if (a3)
    return 4294956430;
  if (a2 == 1)
  {
    if (this[67])
    {
      if (getAUHOAZoomLog(void)::onceToken != -1)
        dispatch_once(&getAUHOAZoomLog(void)::onceToken, &__block_literal_global_11643);
      v10 = getAUHOAZoomLog(void)::gLog;
      if (os_log_type_enabled((os_log_t)getAUHOAZoomLog(void)::gLog, OS_LOG_TYPE_DEFAULT))
      {
        v14 = 136315650;
        v15 = "AUHOAZoom.mm";
        v16 = 1024;
        v17 = 512;
        v18 = 2048;
        v19 = a4;
        _os_log_impl(&dword_1B5ED0000, v10, OS_LOG_TYPE_DEFAULT, "%s:%i Setting FOV %f on mDominanceZoom", (uint8_t *)&v14, 0x1Cu);
      }
      DominanceZoom::SetFOV(this[67], a4);
    }
    LOBYTE(v8) = 1;
    goto LABEL_18;
  }
  if (a2 == 2)
  {
    v8 = this[67];
    if (v8)
    {
      if (getAUHOAZoomLog(void)::onceToken != -1)
        dispatch_once(&getAUHOAZoomLog(void)::onceToken, &__block_literal_global_11643);
      v9 = getAUHOAZoomLog(void)::gLog;
      if (os_log_type_enabled((os_log_t)getAUHOAZoomLog(void)::gLog, OS_LOG_TYPE_DEFAULT))
      {
        v14 = 136315650;
        v15 = "AUHOAZoom.mm";
        v16 = 1024;
        v17 = 505;
        v18 = 2048;
        v19 = a4;
        _os_log_impl(&dword_1B5ED0000, v9, OS_LOG_TYPE_DEFAULT, "%s:%i Setting manual zoom amount %f on mDominanceZoom", (uint8_t *)&v14, 0x1Cu);
      }
      DominanceZoom::SetZoomAmount(this[67], a4);
      LOBYTE(v8) = 0;
    }
LABEL_18:
    *((_BYTE *)this + 644) = (_BYTE)v8;
  }
  v11 = this[9];
  if (v11)
  {
    v12 = (ausdk::AUElement *)(*(uint64_t (**)(DominanceZoom *, _QWORD))(*(_QWORD *)v11 + 32))(v11, 0);
  }
  else
  {
    v13 = (ausdk::AUElement **)this[6];
    if (this[7] == (DominanceZoom *)v13)
      v12 = 0;
    else
      v12 = *v13;
  }
  ausdk::AUElement::SetParameter(v12, a2, a4, 0);
  return 0;
}

uint64_t AUHOAZoom::CanScheduleParameters(AUHOAZoom *this)
{
  return 0;
}

uint64_t AUHOAZoom::ProcessMultipleBufferLists(AUHOAZoom *this, unsigned int *a2, int a3, CLiteMatrix *a4, const AudioBufferList **a5, int a6, AudioBufferList **a7)
{
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  _DWORD *v11;
  _DWORD *v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  size_t v16;
  const void *v17;
  void *v18;
  unsigned int *v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  int v26;
  float v27;
  double v28;
  NSObject *v30;
  NSObject *v31;
  uint64_t v32;
  NSObject *v33;
  NSObject *v34;
  float v35;
  float v36;
  float v37;
  uint64_t v38;
  uint64_t v39;
  float v40;
  float v41;
  NSObject *v42;
  unsigned int v43;
  NSObject *v44;
  unint64_t v45;
  uint64_t v46;
  unint64_t v47;
  int **v48;
  _QWORD *v49;
  unint64_t v50;
  int **v51;
  uint64_t v52;
  int v53;
  int v54;
  int v55;
  _DWORD *v56;
  uint64_t v57;
  unint64_t v58;
  _QWORD *v59;
  uint64_t v60;
  int v61;
  _DWORD *v62;
  unint64_t v63;
  int *v64;
  int v65;
  uint64_t v66;
  char v67;
  uint8_t buf[4];
  const char *v69;
  __int16 v70;
  int v71;
  __int16 v72;
  double v73;
  uint64_t v74;

  v74 = *MEMORY[0x1E0C80C00];
  result = 4294956428;
  if ((_DWORD)a4 != 1 || a6 != 1)
    return result;
  v9 = *((_QWORD *)this + 78);
  if (v9 != a3)
    return 4294956422;
  v10 = *((_QWORD *)this + 67);
  if (!v10)
    return 4294956429;
  v11 = *a5;
  v12 = *a7;
  if (!*((_BYTE *)this + 652))
  {
    v19 = (unsigned int *)(v10 + 336);
    do
      v20 = __ldaxr(v19);
    while (__stlxr(0, v19));
    if (v20)
    {
      v66 = v10 + 192;
      v67 = caulk::pooled_semaphore_mutex::try_lock((caulk::pooled_semaphore_mutex *)(v10 + 192));
      if ((v67 & 1) != 0)
      {
        DominanceCurveCoordinator::UpdateEffectiveDominanceCurve((DominanceCurveCoordinator *)v10);
        v22 = *(_QWORD *)(v10 + 280);
        v21 = *(_QWORD *)(v10 + 288);
        if (0xCCCCCCCCCCCCCCCDLL * ((v21 - v22) >> 3) == (uint64_t)(*(_QWORD *)(v10 + 80) - *(_QWORD *)(v10 + 72)) >> 2)
        {
          if (v21 != v22)
          {
            v23 = 0;
            v24 = 0;
            do
            {
              v25 = *(_QWORD *)(v10 + 72);
              if (v24 >= (*(_QWORD *)(v10 + 80) - v25) >> 2)
                std::vector<std::vector<float>>::__throw_out_of_range[abi:ne180100]();
              v65 = *(_DWORD *)(v10 + 320);
              v26 = *(_DWORD *)(v10 + 304);
              v27 = *(float *)(v25 + 4 * v24);
              v28 = v27;
              if (v27 < 0.0 || v27 > 1.0)
              {
                if (getAUHOAZoomLog(void)::onceToken != -1)
                  dispatch_once(&getAUHOAZoomLog(void)::onceToken, &__block_literal_global_22500);
                v30 = getAUHOAZoomLog(void)::gLog;
                if (os_log_type_enabled((os_log_t)getAUHOAZoomLog(void)::gLog, OS_LOG_TYPE_ERROR))
                {
                  *(_DWORD *)buf = 136315650;
                  v69 = "DominanceZoom.cpp";
                  v70 = 1024;
                  v71 = 22;
                  v72 = 2048;
                  v73 = v27;
                  _os_log_error_impl(&dword_1B5ED0000, v30, OS_LOG_TYPE_ERROR, "%s:%i illegal dominance parameter value: %f", buf, 0x1Cu);
                }
              }
              if (v26 != 1)
              {
                if (getAUHOAZoomLog(void)::onceToken != -1)
                  dispatch_once(&getAUHOAZoomLog(void)::onceToken, &__block_literal_global_22500);
                v31 = getAUHOAZoomLog(void)::gLog;
                if (os_log_type_enabled((os_log_t)getAUHOAZoomLog(void)::gLog, OS_LOG_TYPE_ERROR))
                {
                  *(_DWORD *)buf = 136315394;
                  v69 = "DominanceZoom.cpp";
                  v70 = 1024;
                  v71 = 23;
                  _os_log_error_impl(&dword_1B5ED0000, v31, OS_LOG_TYPE_ERROR, "%s:%i only first order is supported now", buf, 0x12u);
                }
              }
              v32 = ((v26 + 1) * (v26 + 1));
              if (*(_QWORD *)(v22 + v23 + 8) != v32)
              {
                if (getAUHOAZoomLog(void)::onceToken != -1)
                  dispatch_once(&getAUHOAZoomLog(void)::onceToken, &__block_literal_global_22500);
                v33 = getAUHOAZoomLog(void)::gLog;
                if (os_log_type_enabled((os_log_t)getAUHOAZoomLog(void)::gLog, OS_LOG_TYPE_ERROR))
                {
                  *(_DWORD *)buf = 136315394;
                  v69 = "DominanceZoom.cpp";
                  v70 = 1024;
                  v71 = 26;
                  _os_log_error_impl(&dword_1B5ED0000, v33, OS_LOG_TYPE_ERROR, "%s:%i bad outMatrix num cols", buf, 0x12u);
                }
              }
              if (*(_QWORD *)(v22 + v23) != v32)
              {
                if (getAUHOAZoomLog(void)::onceToken != -1)
                  dispatch_once(&getAUHOAZoomLog(void)::onceToken, &__block_literal_global_22500);
                v34 = getAUHOAZoomLog(void)::gLog;
                if (os_log_type_enabled((os_log_t)getAUHOAZoomLog(void)::gLog, OS_LOG_TYPE_ERROR))
                {
                  *(_DWORD *)buf = 136315394;
                  v69 = "DominanceZoom.cpp";
                  v70 = 1024;
                  v71 = 27;
                  _os_log_error_impl(&dword_1B5ED0000, v34, OS_LOG_TYPE_ERROR, "%s:%i bad outMatrix num rows", buf, 0x12u);
                }
              }
              if (v26 != 1)
                goto LABEL_57;
              v35 = 1.0 - v28 * 0.9 * (v28 * 0.9);
              v36 = sqrtf(v35);
              if (v65 == 1)
              {
                v41 = v28 * 1.33333333;
                v39 = *(_QWORD *)(v22 + v23 + 16);
                v38 = *(_QWORD *)(v22 + v23 + 24);
                *(_QWORD *)v39 = 1065353216;
                *(_DWORD *)(v39 + 8) = 0;
                *(float *)(v39 + 12) = v41;
                *(_DWORD *)(v39 + 16) = 0;
                *(float *)(v39 + 20) = v36;
                v40 = v27 / -3.0;
              }
              else
              {
                if (v65)
                {
                  if (getAUHOAZoomLog(void)::onceToken != -1)
                    dispatch_once(&getAUHOAZoomLog(void)::onceToken, &__block_literal_global_22500);
                  v42 = getAUHOAZoomLog(void)::gLog;
                  if (os_log_type_enabled((os_log_t)getAUHOAZoomLog(void)::gLog, OS_LOG_TYPE_ERROR))
                  {
                    *(_DWORD *)buf = 136315650;
                    v69 = "DominanceZoom.cpp";
                    v70 = 1024;
                    v71 = 75;
                    v72 = 1024;
                    LODWORD(v73) = v65;
                    _os_log_error_impl(&dword_1B5ED0000, v42, OS_LOG_TYPE_ERROR, "%s:%i unsupported normalization %i", buf, 0x18u);
                  }
                  goto LABEL_57;
                }
                v37 = v28 * 0.769800373;
                v39 = *(_QWORD *)(v22 + v23 + 16);
                v38 = *(_QWORD *)(v22 + v23 + 24);
                *(_QWORD *)v39 = 1065353216;
                *(_DWORD *)(v39 + 8) = 0;
                *(float *)(v39 + 12) = v37;
                *(_DWORD *)(v39 + 16) = 0;
                *(float *)(v39 + 20) = v36;
                v40 = v27 / -1.7321;
              }
              *(_QWORD *)(v39 + 24) = 0;
              *(_QWORD *)(v39 + 32) = 0;
              *(float *)(v39 + 40) = v36;
              *(_DWORD *)(v39 + 44) = 0;
              *(float *)(v39 + 48) = v40;
              *(_DWORD *)(v39 + 52) = 0;
              *(_DWORD *)(v39 + 56) = 0;
              *(_DWORD *)(v39 + 60) = 1065353216;
              bzero((void *)(v39 + 4 * ((v38 - v39) >> 3)), 0x40uLL);
LABEL_57:
              ++v24;
              v22 = *(_QWORD *)(v10 + 280);
              v23 += 40;
            }
            while (v24 < 0xCCCCCCCCCCCCCCCDLL * ((*(_QWORD *)(v10 + 288) - v22) >> 3));
          }
        }
        else
        {
          if (getAUHOAZoomLog(void)::onceToken != -1)
            dispatch_once(&getAUHOAZoomLog(void)::onceToken, &__block_literal_global_22500);
          v44 = getAUHOAZoomLog(void)::gLog;
          if (os_log_type_enabled((os_log_t)getAUHOAZoomLog(void)::gLog, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 136315394;
            v69 = "DominanceZoom.cpp";
            v70 = 1024;
            v71 = 116;
            _os_log_error_impl(&dword_1B5ED0000, v44, OS_LOG_TYPE_ERROR, "%s:%i bad dominanceValues size", buf, 0x12u);
          }
        }
      }
      else
      {
        do
          v43 = __ldaxr(v19);
        while (__stlxr(v43 + 1, v19));
      }
      std::unique_lock<caulk::pooled_semaphore_mutex>::~unique_lock[abi:ne180100]((uint64_t)&v66);
    }
    v45 = *v11;
    if (*(_QWORD *)(v10 + 312) != v45)
      __assert_rtn("Process", "DominanceZoom.cpp", 122, "inBuffer->mNumberBuffers == mNumChannels");
    if ((_DWORD)v45 != *v12)
      __assert_rtn("Process", "DominanceZoom.cpp", 123, "outBuffer->mNumberBuffers == mNumChannels");
    v46 = *(_QWORD *)(v10 + 328);
    if (((v46 ^ v9) & 0x7FFFFFFFFFFFFFFFLL) != 0)
      __assert_rtn("Process", "DominanceZoom.cpp", 124, "numSamples == mBlockSize * 2");
    if (v46 != -1)
    {
      v47 = 0;
      v48 = (int **)(v11 + 4);
      v49 = v12 + 4;
      do
      {
        if (v45)
        {
          v50 = 0;
          v51 = v48;
          do
          {
            if (v47)
            {
              v52 = *(_QWORD *)(v10 + 328);
              v53 = (*v51)[v47];
              *(_DWORD *)CLiteMatrix::Get((CLiteMatrix *)(v10 + 200), v50, 0) = v53;
              v54 = 0;
              if (v47 != v52)
                v54 = (*v51)[*(_QWORD *)(v10 + 328) + v47];
            }
            else
            {
              v55 = **v51;
              *(_DWORD *)CLiteMatrix::Get((CLiteMatrix *)(v10 + 200), v50, 0) = v55;
              v54 = 0;
            }
            CLiteMatrix::Get((CLiteMatrix *)(v10 + 200), v50, 0);
            *v56 = v54;
            ++v50;
            v51 += 2;
          }
          while (v50 < *(_QWORD *)(v10 + 312));
        }
        v57 = *(_QWORD *)(v10 + 280);
        if (0xCCCCCCCCCCCCCCCDLL * ((*(_QWORD *)(v10 + 288) - v57) >> 3) <= v47)
          std::vector<std::vector<float>>::__throw_out_of_range[abi:ne180100]();
        CLiteMatrix::MatrixMultiply((vDSP_Length *)(v57 + 40 * v47), (const CLiteMatrix *)(v10 + 200), (const CLiteMatrix *)(v10 + 240), a4);
        v45 = *(_QWORD *)(v10 + 312);
        if (v45)
        {
          v58 = 0;
          v59 = v49;
          do
          {
            if (v47)
            {
              v60 = *(_QWORD *)(v10 + 328);
              v61 = *(_DWORD *)CLiteMatrix::Get((CLiteMatrix *)(v10 + 240), v58, 0);
              v62 = (_DWORD *)*v59;
              if (v47 == v60)
              {
                v63 = *(_QWORD *)(v10 + 328);
              }
              else
              {
                v62[v47] = v61;
                CLiteMatrix::Get((CLiteMatrix *)(v10 + 240), v58, 0);
                v61 = *v64;
                v62 = (_DWORD *)*v59;
                v63 = *(_QWORD *)(v10 + 328) + v47;
              }
              v62[v63] = v61;
            }
            else
            {
              *(_DWORD *)*v59 = *(_DWORD *)CLiteMatrix::Get((CLiteMatrix *)(v10 + 240), v58, 0);
            }
            ++v58;
            v45 = *(_QWORD *)(v10 + 312);
            v59 += 2;
          }
          while (v58 < v45);
        }
        ++v47;
      }
      while (v47 < *(_QWORD *)(v10 + 328) + 1);
    }
    return 0;
  }
  v13 = *v11;
  if (v13 != *v12 || !*v11)
    return 0;
  v14 = 0;
  v15 = 0;
  do
  {
    v16 = v11[v14 + 3];
    if ((_DWORD)v16 == v12[v14 + 3])
    {
      v17 = *(const void **)&v11[v14 + 4];
      v18 = *(void **)&v12[v14 + 4];
      if (v17 != v18)
      {
        memcpy(v18, v17, v16);
        v13 = *v11;
      }
    }
    result = 0;
    ++v15;
    v14 += 4;
  }
  while (v15 < v13);
  return result;
}

void sub_1B63A3BA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  std::unique_lock<caulk::pooled_semaphore_mutex>::~unique_lock[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t AUHOAZoom::Render(AUHOAZoom *this, unsigned int *a2, const AudioTimeStamp *a3, uint64_t a4)
{
  ausdk::AUScope *v8;
  ausdk::AUInputElement *Element;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t BufferList;

  v8 = (AUHOAZoom *)((char *)this + 80);
  Element = (ausdk::AUInputElement *)ausdk::AUScope::SafeGetElement((AUHOAZoom *)((char *)this + 80), 0);
  result = ausdk::AUInputElement::PullInput(Element, a2, a3, 0, a4);
  if (!(_DWORD)result)
  {
    v11 = ausdk::AUScope::SafeGetElement((AUHOAZoom *)((char *)this + 128), 0);
    BufferList = ausdk::AUBufferList::GetBufferList((ausdk::AUBufferList *)(v11 + 144));
    v12 = ausdk::AUScope::SafeGetElement(v8, 0);
    v13 = ausdk::AUBufferList::GetBufferList((ausdk::AUBufferList *)(v12 + 144));
    return (*(uint64_t (**)(AUHOAZoom *, unsigned int *, uint64_t, uint64_t, uint64_t *, uint64_t, uint64_t *))(*(_QWORD *)this + 184))(this, a2, a4, 1, &v13, 1, &BufferList);
  }
  return result;
}

uint64_t AUHOAZoom::BusCountWritable(AUHOAZoom *this)
{
  return 0;
}

uint64_t AUHOAZoom::GetParameterList(AUHOAZoom *this, int a2, unsigned int *a3, unsigned int *a4)
{
  _QWORD *ParameterMap;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  BOOL v14;

  *a4 = 0;
  if (!a2)
  {
    ParameterMap = (_QWORD *)AUHOAZoom::GetParameterMap(this);
    *a4 = ParameterMap[2];
    if (a3)
    {
      v10 = (_QWORD *)*ParameterMap;
      v8 = ParameterMap + 1;
      v9 = v10;
      if (v10 != v8)
      {
        v11 = 0;
        do
        {
          a3[v11] = *((_DWORD *)v9 + 8);
          v12 = (_QWORD *)v9[1];
          if (v12)
          {
            do
            {
              v13 = v12;
              v12 = (_QWORD *)*v12;
            }
            while (v12);
          }
          else
          {
            do
            {
              v13 = (_QWORD *)v9[2];
              v14 = *v13 == (_QWORD)v9;
              v9 = v13;
            }
            while (!v14);
          }
          ++v11;
          v9 = v13;
        }
        while (v13 != v8);
      }
    }
  }
  return 0;
}

__n128 AUHOAZoom::GetParameterInfo(AUHOAZoom *this, int a2, unsigned int a3, AudioUnitParameterInfo *a4)
{
  uint64_t ParameterMap;
  __n128 result;
  uint64_t v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  BOOL v14;
  uint64_t *v15;
  unsigned int v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;

  if (!a2)
  {
    ParameterMap = AUHOAZoom::GetParameterMap(this);
    v10 = *(uint64_t **)(ParameterMap + 8);
    v8 = ParameterMap + 8;
    v9 = v10;
    if (v10)
    {
      v11 = v8;
      v12 = (uint64_t)v9;
      do
      {
        v13 = *(_DWORD *)(v12 + 32);
        v14 = v13 >= a3;
        if (v13 >= a3)
          v15 = (uint64_t *)v12;
        else
          v15 = (uint64_t *)(v12 + 8);
        if (v14)
          v11 = v12;
        v12 = *v15;
      }
      while (*v15);
      if (v11 != v8 && *(_DWORD *)(v11 + 32) <= a3)
      {
        while (1)
        {
          while (1)
          {
            v16 = *((_DWORD *)v9 + 8);
            if (v16 <= a3)
              break;
            v9 = (uint64_t *)*v9;
            if (!v9)
              goto LABEL_19;
          }
          if (v16 >= a3)
            break;
          v9 = (uint64_t *)v9[1];
          if (!v9)
LABEL_19:
            std::__throw_out_of_range[abi:ne180100]("map::at:  key not found");
        }
        v17 = *(_OWORD *)(v9 + 5);
        v18 = *(_OWORD *)(v9 + 9);
        *(_OWORD *)&a4->name[16] = *(_OWORD *)(v9 + 7);
        *(_OWORD *)&a4->name[32] = v18;
        *(_OWORD *)a4->name = v17;
        result = *(__n128 *)(v9 + 11);
        v19 = *(_OWORD *)(v9 + 13);
        v20 = *(_OWORD *)(v9 + 15);
        *(_QWORD *)&a4->flags = v9[17];
        *(_OWORD *)&a4->clumpID = v19;
        *(_OWORD *)&a4->unit = v20;
        *(__n128 *)&a4->name[48] = result;
      }
    }
  }
  return result;
}

uint64_t AUHOAZoom::SaveState(std::vector<std::string> *this, ausdk **a2)
{
  __CFDictionary *v4;
  uint64_t end;
  std::string *p_end;
  std::string::size_type size;
  std::string::size_type v8;
  NSObject *v9;
  void **p_begin;
  void **v12;
  std::string buf;
  __int128 v14;
  std::string *v15;
  __int128 v16;
  std::string *v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  ausdk::AUBase::SaveState((ausdk::AUBase *)this, a2);
  v4 = *a2;
  if (v4)
  {
    end = (uint64_t)this[22].__end_;
    if (end)
    {
      DominanceZoom::CopyZoomCurveValue(&buf, end);
      p_end = (std::string *)&this[23].__end_;
      std::__tree<std::__value_type<std::string,std::vector<float>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<float>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<float>>>>::destroy(this[23].__end_->__r_.__value_.__r.__words);
      size = buf.__r_.__value_.__l.__size_;
      this[23].__begin_ = (std::vector<std::string>::pointer)buf.__r_.__value_.__r.__words[0];
      this[23].__end_ = (std::vector<std::string>::pointer)size;
      v8 = buf.__r_.__value_.__r.__words[2];
      this[23].__end_cap_.__value_ = (std::string *)buf.__r_.__value_.__r.__words[2];
      if (v8)
      {
        *(_QWORD *)(size + 16) = p_end;
        buf.__r_.__value_.__r.__words[0] = (std::string::size_type)&buf.__r_.__value_.__l.__size_;
        *(_OWORD *)&buf.__r_.__value_.__r.__words[1] = 0uLL;
      }
      else
      {
        this[23].__begin_ = p_end;
      }
      std::vector<std::__fs::filesystem::path>::__vdeallocate(this + 24);
      *(_OWORD *)&this[24].__begin_ = v14;
      this[24].__end_cap_.__value_ = v15;
      v15 = 0;
      v14 = 0uLL;
      p_begin = (void **)&this[25].__begin_;
      if (SHIBYTE(this[25].__end_cap_.__value_) < 0)
        operator delete(*p_begin);
      *(_OWORD *)p_begin = v16;
      this[25].__end_cap_.__value_ = v17;
      HIBYTE(v17) = 0;
      LOBYTE(v16) = 0;
      v12 = (void **)&v14;
      std::vector<std::__fs::filesystem::path>::__destroy_vector::operator()[abi:ne180100](&v12);
      std::__tree<std::__value_type<std::string,std::vector<float>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<float>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<float>>>>::destroy((_QWORD *)buf.__r_.__value_.__l.__size_);
    }
    ZoomCurveValue::SaveToDictionary((ZoomCurveValue *)&this[23], v4);
    return 0;
  }
  else
  {
    if (getAUHOAZoomLog(void)::onceToken != -1)
      dispatch_once(&getAUHOAZoomLog(void)::onceToken, &__block_literal_global_11643);
    v9 = getAUHOAZoomLog(void)::gLog;
    if (os_log_type_enabled((os_log_t)getAUHOAZoomLog(void)::gLog, OS_LOG_TYPE_ERROR))
    {
      LODWORD(buf.__r_.__value_.__l.__data_) = 136315394;
      *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)"AUHOAZoom.mm";
      WORD2(buf.__r_.__value_.__r.__words[1]) = 1024;
      *(_DWORD *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = 422;
      _os_log_error_impl(&dword_1B5ED0000, v9, OS_LOG_TYPE_ERROR, "%s:%i AUBase::SaveState didn't produce valid dictionary?", (uint8_t *)&buf, 0x12u);
    }
    return 4294956445;
  }
}

uint64_t AUHOAZoom::RestoreState(AUHOAZoom *this, void *cf)
{
  CFTypeID v4;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  void **v13;
  DominanceZoom *v14;
  void *__p[2];
  char v16;
  std::string v17;
  __int128 *v18;
  __int128 *v19;
  char *v20;
  __int128 **v21;
  char v22;
  _BYTE buf[24];
  __int128 v24;
  uint64_t v25;
  __int128 v26;
  uint64_t v27;
  __int128 v28;

  *(_QWORD *)&v28 = *MEMORY[0x1E0C80C00];
  if (!cf)
    return 4294956445;
  v4 = CFGetTypeID(cf);
  if (v4 != CFDictionaryGetTypeID())
    return 4294956445;
  v5 = ausdk::AUBase::RestoreState((OpaqueAudioComponentInstance **)this, cf);
  if ((_DWORD)v5)
  {
    v6 = v5;
    if (getAUHOAZoomLog(void)::onceToken != -1)
      dispatch_once(&getAUHOAZoomLog(void)::onceToken, &__block_literal_global_11643);
    v7 = getAUHOAZoomLog(void)::gLog;
    if (os_log_type_enabled((os_log_t)getAUHOAZoomLog(void)::gLog, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315650;
      *(_QWORD *)&buf[4] = "AUHOAZoom.mm";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 406;
      *(_WORD *)&buf[18] = 1024;
      *(_DWORD *)&buf[20] = v6;
      _os_log_error_impl(&dword_1B5ED0000, v7, OS_LOG_TYPE_ERROR, "%s:%i Error %i while restoring state", buf, 0x18u);
    }
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(buf, "HOAZoomCurve");
    std::string::basic_string[abi:ne180100]<0>(&v24, "HOAZoomInDominanceCurve");
    std::string::basic_string[abi:ne180100]<0>(&v26, "HOAZoomOutDominanceCurve");
    v18 = 0;
    v19 = 0;
    v20 = 0;
    v21 = &v18;
    v22 = 0;
    v18 = (__int128 *)operator new(0x48uLL);
    v19 = v18;
    v20 = (char *)v18 + 72;
    v9 = 0;
    v19 = (__int128 *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v20, (__int128 *)buf, &v28, (std::string *)v18);
    do
    {
      if (*((char *)&v27 + v9 + 7) < 0)
        operator delete(*(void **)((char *)&v26 + v9));
      v9 -= 24;
    }
    while (v9 != -72);
    memset(&v17, 0, sizeof(v17));
    std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v17, v18, v19, 0xAAAAAAAAAAAAAAABLL * (((char *)v19 - (char *)v18) >> 3));
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    ZoomCurveValue::LoadFromDictionary((uint64_t)buf, cf, (__int128 **)&v17, (uint64_t *)__p);
    v10 = (char *)this + 560;
    std::__tree<std::__value_type<std::string,std::vector<float>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<float>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<float>>>>::destroy(*((_QWORD **)this + 70));
    v11 = *(_QWORD *)&buf[8];
    *((_QWORD *)this + 69) = *(_QWORD *)buf;
    *((_QWORD *)this + 70) = v11;
    v12 = *(_QWORD *)&buf[16];
    *((_QWORD *)this + 71) = *(_QWORD *)&buf[16];
    if (v12)
    {
      *(_QWORD *)(v11 + 16) = v10;
      *(_QWORD *)buf = &buf[8];
      *(_OWORD *)&buf[8] = 0uLL;
    }
    else
    {
      *((_QWORD *)this + 69) = v10;
    }
    std::vector<std::__fs::filesystem::path>::__vdeallocate((std::vector<std::string> *)this + 24);
    *((_OWORD *)this + 36) = v24;
    *((_QWORD *)this + 74) = v25;
    v25 = 0;
    v24 = 0uLL;
    v13 = (void **)((char *)this + 600);
    if (*((char *)this + 623) < 0)
      operator delete(*v13);
    *(_OWORD *)v13 = v26;
    *((_QWORD *)this + 77) = v27;
    HIBYTE(v27) = 0;
    LOBYTE(v26) = 0;
    v21 = (__int128 **)&v24;
    std::vector<std::__fs::filesystem::path>::__destroy_vector::operator()[abi:ne180100]((void ***)&v21);
    std::__tree<std::__value_type<std::string,std::vector<float>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<float>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<float>>>>::destroy(*(_QWORD **)&buf[8]);
    if (v16 < 0)
      operator delete(__p[0]);
    v21 = (__int128 **)&v17;
    std::vector<std::__fs::filesystem::path>::__destroy_vector::operator()[abi:ne180100]((void ***)&v21);
    v14 = (DominanceZoom *)*((_QWORD *)this + 67);
    if (v14)
      DominanceZoom::SetZoomCurveValue(v14, (AUHOAZoom *)((char *)this + 552));
    *(_QWORD *)buf = &v18;
    std::vector<std::__fs::filesystem::path>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
    return 0;
  }
  return v6;
}

void sub_1B63A42DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char *a24)
{
  a24 = &a19;
  std::vector<std::__fs::filesystem::path>::__destroy_vector::operator()[abi:ne180100]((void ***)&a24);
  _Unwind_Resume(a1);
}

double AUHOAZoom::GetLatency(AUHOAZoom *this)
{
  return 0.0;
}

uint64_t AUHOAZoom::SupportsTail(AUHOAZoom *this)
{
  return 1;
}

BOOL AUHOAZoom::StreamFormatWritable(AUHOAZoom *this)
{
  return *((_BYTE *)this + 17) == 0;
}

uint64_t AUHOAZoom::SupportedNumChannels(AUHOAZoom *this, const AUChannelInfo **a2)
{
  if (a2)
    *a2 = (const AUChannelInfo *)&AUHOAZoom::SupportedNumChannels(AUChannelInfo const**)::sSupportedChannelConfigs;
  return 1;
}

uint64_t AUHOAZoom::ValidFormat(AUHOAZoom *this, unsigned int a2, unsigned int a3, const AudioStreamBasicDescription *a4)
{
  UInt32 mChannelsPerFrame;
  _BOOL4 v6;
  AudioFormatFlags v7;
  int HOAOrderForNumberOfChannels;

  mChannelsPerFrame = a4->mChannelsPerFrame;
  v6 = a4->mFormatID == 1718773105 && a4->mBitsPerChannel == 64;
  v7 = v6 & (a4->mFormatFlags >> 5);
  HOAOrderForNumberOfChannels = GetHOAOrderForNumberOfChannels(a4->mChannelsPerFrame);
  if ((HOAOrderForNumberOfChannels + 1) * (HOAOrderForNumberOfChannels + 1) == mChannelsPerFrame)
    return v7;
  else
    return 0;
}

char *AUHOAZoom::GetAudioChannelLayout(AUHOAZoom *this, unsigned int a2, int a3, AudioChannelLayout *a4, BOOL *a5)
{
  int v6;
  char *v7;
  std::vector<char>::pointer begin;
  std::vector<char> __p;
  std::vector<char>::value_type __x;

  if (a3)
    ausdk::Throw((ausdk *)0xFFFFD583);
  *a5 = 1;
  v6 = *((_DWORD *)this + 162);
  __x = 0;
  std::vector<char>::vector(&__p, 0x20uLL, &__x);
  v7 = 0;
  begin = __p.__begin_;
  *((_DWORD *)__p.__begin_ + 1) = 0;
  *((_DWORD *)begin + 2) = 0;
  *(_DWORD *)begin = v6;
  if ((v6 | 0x10000) != 0x10000)
  {
    if ((_WORD)v6)
    {
      v7 = (char *)(__p.__end_ - begin);
      if (a4 && (_DWORD)v7)
        memcpy(a4, begin, (LODWORD(__p.__end_) - (_DWORD)begin));
    }
    else
    {
      v7 = 0;
    }
  }
  __p.__end_ = begin;
  operator delete(begin);
  return v7;
}

uint64_t AUHOAZoom::SetAudioChannelLayout(AUHOAZoom *this, unsigned int a2, unsigned int a3, const AudioChannelLayout *a4)
{
  AudioChannelLayoutTag mChannelLayoutTag;

  if (!a4)
    return 4294956428;
  mChannelLayoutTag = a4->mChannelLayoutTag;
  if (!ChannelLayoutTagIsSupportedHOA(a4->mChannelLayoutTag))
    return 4294956428;
  AUHOAZoom::UpdateChannelLayoutTag(this, mChannelLayoutTag);
  return 0;
}

void AUHOAZoom::GetChannelLayoutTags(void **a1@<X8>)
{
  _DWORD *v3;
  _DWORD *v4;
  char *v5;
  char *v6;
  uint64_t v7;
  _DWORD *v8;
  _DWORD *v9;
  _DWORD *v10;
  int v11;
  int v12;
  _DWORD *v13;
  _BYTE *v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char *v19;
  int *v20;
  char *v21;
  int v22;

  v3 = operator new(4uLL);
  *v3 = 1;
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  v4 = std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>((uint64_t)(a1 + 2), 1uLL);
  v5 = (char *)*a1;
  v6 = (char *)a1[1];
  v8 = &v4[v7];
  *v4 = 12517380;
  v9 = v4 + 1;
  v10 = v4;
  while (v6 != v5)
  {
    v11 = *((_DWORD *)v6 - 1);
    v6 -= 4;
    *--v10 = v11;
  }
  *a1 = v10;
  a1[1] = v9;
  a1[2] = v8;
  if (v5)
  {
    operator delete(v5);
    v8 = a1[2];
  }
  a1[1] = v9;
  v12 = ((*v3 + 1) * (*v3 + 1)) | 0xBE0000;
  if (v9 >= v8)
  {
    v14 = *a1;
    v15 = ((char *)v9 - (_BYTE *)*a1) >> 2;
    v16 = v15 + 1;
    if ((unint64_t)(v15 + 1) >> 62)
      std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
    v17 = (char *)v8 - v14;
    if (v17 >> 1 > v16)
      v16 = v17 >> 1;
    if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFFCLL)
      v18 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v18 = v16;
    if (v18)
    {
      v19 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>((uint64_t)(a1 + 2), v18);
      v14 = *a1;
      v9 = a1[1];
    }
    else
    {
      v19 = 0;
    }
    v20 = (int *)&v19[4 * v15];
    v21 = &v19[4 * v18];
    *v20 = v12;
    v13 = v20 + 1;
    while (v9 != (_DWORD *)v14)
    {
      v22 = *--v9;
      *--v20 = v22;
    }
    *a1 = v20;
    a1[1] = v13;
    a1[2] = v21;
    if (v14)
      operator delete(v14);
  }
  else
  {
    v4[1] = v12;
    v13 = v4 + 2;
  }
  a1[1] = v13;
  operator delete(v3);
}

void sub_1B63A469C(_Unwind_Exception *a1)
{
  void *v1;
  uint64_t v2;
  void *v4;

  v4 = *(void **)v2;
  if (*(_QWORD *)v2)
  {
    *(_QWORD *)(v2 + 8) = v4;
    operator delete(v4);
  }
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t AUHOAZoom::UpdateChannelLayoutTag(AUHOAZoom *this, int a2)
{
  int v4;
  uint64_t result;

  if (!ChannelLayoutTagIsSupportedHOA(a2))
    __assert_rtn("UpdateChannelLayoutTag", "AUHOAZoom.mm", 126, "ChannelLayoutTagIsSupportedHOA(tag)");
  *((_DWORD *)this + 162) = a2;
  if ((a2 & 0xFFFF0000) == 0xBE0000)
    v4 = 1;
  else
    v4 = 2 * ((a2 & 0xFFFF0000) != 12517376);
  *((_DWORD *)this + 136) = v4;
  *((_QWORD *)this + 79) = (unsigned __int16)a2;
  result = GetHOAOrderForNumberOfChannels((unsigned __int16)a2);
  *((_DWORD *)this + 160) = result;
  return result;
}

void ___Z15getAUHOAZoomLogv_block_invoke()
{
  os_log_t v0;
  void *v1;

  v0 = os_log_create("com.apple.coreaudio", "hoaz");
  v1 = (void *)getAUHOAZoomLog(void)::gLog;
  getAUHOAZoomLog(void)::gLog = (uint64_t)v0;

}

uint64_t AUHOAZoom::GetParameterMap(AUHOAZoom *this)
{
  uint64_t result;
  uint64_t *v3;
  _QWORD *v4;
  uint64_t **v5;
  void **v6[3];
  void **v7[3];
  _QWORD v8[3];
  void ***v9;

  result = *((_QWORD *)this + 66);
  if (!result)
  {
    v3 = (uint64_t *)((char *)this + 528);
    v4 = (_QWORD *)operator new();
    v4[2] = 0;
    v4[1] = 0;
    *v4 = v4 + 1;
    std::unique_ptr<std::map<unsigned int,HOAZoomParameterInfo>>::reset[abi:ne180100](v3, (uint64_t)v4);
    v5 = (uint64_t **)*v3;
    memset(v8, 0, sizeof(v8));
    AUHOAZoom::AddParameterToMap(v5, 0, 1073782784, CFSTR("Effective zoom amount"), (uint64_t)v8, 0.0, 1.0, 0.0);
    v7[0] = (void **)v8;
    std::vector<std::__fs::filesystem::path>::__destroy_vector::operator()[abi:ne180100](v7);
    memset(v7, 0, sizeof(v7));
    AUHOAZoom::AddParameterToMap(v5, 1u, -1073741824, CFSTR("Camera field of view"), (uint64_t)v7, 1.0, 180.0, 69.654);
    v6[0] = (void **)v7;
    std::vector<std::__fs::filesystem::path>::__destroy_vector::operator()[abi:ne180100](v6);
    memset(v6, 0, sizeof(v6));
    AUHOAZoom::AddParameterToMap(v5, 2u, -1073741824, CFSTR("Manual zoom amount"), (uint64_t)v6, 0.0, 1.0, 0.0);
    v9 = v6;
    std::vector<std::__fs::filesystem::path>::__destroy_vector::operator()[abi:ne180100]((void ***)&v9);
    return *v3;
  }
  return result;
}

void sub_1B63A48B4(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 - 40) = v1;
  std::vector<std::__fs::filesystem::path>::__destroy_vector::operator()[abi:ne180100]((void ***)(v2 - 40));
  _Unwind_Resume(a1);
}

uint64_t *std::unique_ptr<std::map<unsigned int,HOAZoomParameterInfo>>::reset[abi:ne180100](uint64_t *result, uint64_t a2)
{
  uint64_t v2;

  v2 = *result;
  *result = a2;
  if (v2)
  {
    std::__tree<std::__value_type<unsigned int,HOAZoomParameterInfo>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,HOAZoomParameterInfo>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,HOAZoomParameterInfo>>>::destroy(*(char **)(v2 + 8));
    JUMPOUT(0x1BCC95CECLL);
  }
  return result;
}

void AUHOAZoom::AddParameterToMap(uint64_t **a1, unsigned int a2, int a3, const __CFString *a4, uint64_t a5, float a6, float a7, float a8)
{
  char *v16;
  char **v17;
  char **v18;
  unsigned int v19;
  char *v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 *begin;
  __int128 *end;
  unint64_t v26;
  uint64_t *v27;
  std::vector<std::string> *v28;
  char buffer[16];
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  uint64_t v35;
  std::vector<std::string> v36;
  uint64_t v37;

  v37 = *MEMORY[0x1E0C80C00];
  memset(&v36, 0, sizeof(v36));
  bzero(buffer, 0x80uLL);
  LODWORD(v34) = 0;
  *(_QWORD *)((char *)&v34 + 4) = __PAIR64__(LODWORD(a7), LODWORD(a6));
  *((float *)&v34 + 3) = a8;
  LODWORD(v35) = a3;
  if (&v36 != (std::vector<std::string> *)a5)
  {
    std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>(&v36, *(std::string **)a5, *(__int128 **)(a5 + 8), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a5 + 8) - *(_QWORD *)a5) >> 3));
    a3 = v35;
  }
  *((_QWORD *)&v33 + 1) = a4;
  LODWORD(v35) = a3 | 0x8000000;
  CFStringGetCString(a4, buffer, 52, 0x8000100u);
  LODWORD(v33) = 0;
  LODWORD(v35) = v35 | 0x100000;
  v17 = (char **)(a1 + 1);
  v16 = (char *)a1[1];
  if (v16)
  {
    while (1)
    {
      while (1)
      {
        v18 = (char **)v16;
        v19 = *((_DWORD *)v16 + 8);
        if (v19 <= a2)
          break;
        v16 = *v18;
        v17 = v18;
        if (!*v18)
          goto LABEL_11;
      }
      if (v19 >= a2)
        break;
      v16 = v18[1];
      if (!v16)
      {
        v17 = v18 + 1;
        goto LABEL_11;
      }
    }
  }
  else
  {
    v18 = (char **)(a1 + 1);
LABEL_11:
    v20 = (char *)operator new(0xA8uLL);
    *((_QWORD *)v20 + 18) = 0;
    v21 = v31;
    *(_OWORD *)(v20 + 88) = v32;
    v22 = v34;
    *(_OWORD *)(v20 + 104) = v33;
    *(_OWORD *)(v20 + 120) = v22;
    v23 = v30;
    *(_OWORD *)(v20 + 40) = *(_OWORD *)buffer;
    *(_OWORD *)(v20 + 56) = v23;
    *((_DWORD *)v20 + 8) = a2;
    begin = (__int128 *)v36.__begin_;
    *((_QWORD *)v20 + 17) = v35;
    *(_OWORD *)(v20 + 72) = v21;
    end = (__int128 *)v36.__end_;
    v26 = 0xAAAAAAAAAAAAAAABLL * (((char *)v36.__end_ - (char *)begin) >> 3);
    *((_QWORD *)v20 + 19) = 0;
    *((_QWORD *)v20 + 20) = 0;
    std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)v20 + 6, begin, end, v26);
    *(_QWORD *)v20 = 0;
    *((_QWORD *)v20 + 1) = 0;
    *((_QWORD *)v20 + 2) = v18;
    *v17 = v20;
    v27 = (uint64_t *)**a1;
    if (v27)
    {
      *a1 = v27;
      v20 = *v17;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(a1[1], (uint64_t *)v20);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
  }
  v28 = &v36;
  std::vector<std::__fs::filesystem::path>::__destroy_vector::operator()[abi:ne180100]((void ***)&v28);
}

void sub_1B63A4B44(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9)
{
  void *v9;

  operator delete(v9);
  std::vector<std::__fs::filesystem::path>::__destroy_vector::operator()[abi:ne180100]((void ***)&a9);
  _Unwind_Resume(a1);
}

void std::__tree<std::__value_type<unsigned int,HOAZoomParameterInfo>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,HOAZoomParameterInfo>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,HOAZoomParameterInfo>>>::destroy(char *a1)
{
  void **v2;

  if (a1)
  {
    std::__tree<std::__value_type<unsigned int,HOAZoomParameterInfo>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,HOAZoomParameterInfo>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,HOAZoomParameterInfo>>>::destroy(*(_QWORD *)a1);
    std::__tree<std::__value_type<unsigned int,HOAZoomParameterInfo>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,HOAZoomParameterInfo>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,HOAZoomParameterInfo>>>::destroy(*((_QWORD *)a1 + 1));
    v2 = (void **)(a1 + 144);
    std::vector<std::__fs::filesystem::path>::__destroy_vector::operator()[abi:ne180100](&v2);
    operator delete(a1);
  }
}

void std::default_delete<DominanceZoom>::operator()[abi:ne180100](uint64_t a1)
{
  void *v2;
  void *v3;
  void **v4;

  v4 = (void **)(a1 + 280);
  std::vector<CLiteMatrix>::__destroy_vector::operator()[abi:ne180100](&v4);
  v2 = *(void **)(a1 + 256);
  if (v2)
  {
    *(_QWORD *)(a1 + 264) = v2;
    operator delete(v2);
  }
  v3 = *(void **)(a1 + 216);
  if (v3)
  {
    *(_QWORD *)(a1 + 224) = v3;
    operator delete(v3);
  }
  DominanceCurveCoordinator::~DominanceCurveCoordinator((void **)a1);
  JUMPOUT(0x1BCC95CECLL);
}

void DominanceCurveCoordinator::~DominanceCurveCoordinator(void **this)
{
  void *v2;
  void **v3;

  if (*((char *)this + 183) < 0)
    operator delete(this[20]);
  if (*((char *)this + 159) < 0)
    operator delete(this[17]);
  if (*((char *)this + 135) < 0)
    operator delete(this[14]);
  v2 = this[9];
  if (v2)
  {
    this[10] = v2;
    operator delete(v2);
  }
  if (*((char *)this + 71) < 0)
    operator delete(this[6]);
  v3 = this + 3;
  std::vector<std::__fs::filesystem::path>::__destroy_vector::operator()[abi:ne180100](&v3);
  std::__tree<std::__value_type<std::string,std::vector<float>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<float>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<float>>>>::destroy(this[1]);
}

id getAUHOAZoomLog(void)
{
  if (getAUHOAZoomLog(void)::onceToken != -1)
    dispatch_once(&getAUHOAZoomLog(void)::onceToken, &__block_literal_global_11643);
  return (id)getAUHOAZoomLog(void)::gLog;
}

void AUDeesser::~AUDeesser(OpaqueAudioComponentInstance **this)
{
  AUDeesser::~AUDeesser(this);
  JUMPOUT(0x1BCC95CECLL);
}

{
  OSStatus v2;
  uint64_t i;
  OpaqueAudioComponentInstance *v4;
  OSStatus v5;
  OpaqueAudioComponentInstance *v6;

  *this = (OpaqueAudioComponentInstance *)&off_1E69D8CD8;
  AUDeesser::Cleanup((AUDeesser *)this);
  v2 = 0;
  for (i = 92; i != 102; ++i)
  {
    if (this[i])
    {
      v2 = AudioComponentInstanceDispose(this[i]);
      this[i] = 0;
    }
  }
  if (!v2)
  {
    v4 = this[102];
    if (!v4 || (v5 = AudioComponentInstanceDispose(v4), this[102] = 0, !v5))
    {
      v6 = this[103];
      if (v6)
      {
        AudioComponentInstanceDispose(v6);
        this[103] = 0;
      }
    }
  }
  std::__optional_destruct_base<ausdk::AUBufferList,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)(this + 112));
  std::__optional_destruct_base<ausdk::AUBufferList,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)(this + 108));
  std::__optional_destruct_base<ausdk::AUBufferList,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)(this + 104));
  CDSPSplitComplex::~CDSPSplitComplex((CDSPSplitComplex *)(this + 77));
  CDSPSplitComplex::~CDSPSplitComplex((CDSPSplitComplex *)(this + 73));
  CDSPSplitComplex::~CDSPSplitComplex((CDSPSplitComplex *)(this + 69));
  ausdk::AUBase::~AUBase((ausdk::AUBase *)this);
}

double AUDeesser::Initialize(AUDeesser *this)
{
  ausdk::AUScope *v2;
  uint64_t Element;
  __int128 v4;
  uint64_t v5;
  __int128 v6;
  double result;
  unsigned int v8;
  float v9;
  BlockProcessor *v10;
  uint64_t v11;
  int v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int inData;
  AudioStreamBasicDescription v17;
  __int128 v18;
  _BYTE v19[24];

  v2 = (AUDeesser *)((char *)this + 80);
  Element = ausdk::AUScope::SafeGetElement((AUDeesser *)((char *)this + 80), 0);
  v4 = *(_OWORD *)(Element + 96);
  v18 = *(_OWORD *)(Element + 80);
  *(_OWORD *)v19 = v4;
  *(_QWORD *)&v19[16] = *(_QWORD *)(Element + 112);
  v5 = ausdk::AUScope::SafeGetElement((AUDeesser *)((char *)this + 128), 0);
  v6 = *(_OWORD *)(v5 + 96);
  *(_OWORD *)&v17.mSampleRate = *(_OWORD *)(v5 + 80);
  *(_OWORD *)&v17.mBytesPerPacket = v6;
  *(_QWORD *)&v17.mBitsPerChannel = *(_QWORD *)(v5 + 112);
  result = *(double *)&v18;
  if (*(double *)&v18 == v17.mSampleRate
    && DWORD2(v18) == v17.mFormatID
    && *(_QWORD *)v19 == *(_QWORD *)&v17.mBytesPerPacket
    && *(_QWORD *)&v19[12] == *(_QWORD *)&v17.mChannelsPerFrame
    && CA::Implementation::EquivalentFormatFlags((CA::Implementation *)&v18, &v17, 0, 0))
  {
    v8 = *((_DWORD *)this + 84);
    inData = v8;
    if (!*((_BYTE *)this + 376) || (v9 = (float)v8 / v17.mSampleRate, v9 > 0.02))
    {
      v8 = (v17.mSampleRate * dbl_1B66A21D0[*((_DWORD *)this + 232) == 0]) & 0xFFFFFFFC;
      inData = v8;
      v15 = *(_DWORD *)(ausdk::AUScope::SafeGetElement(v2, 0) + 108);
      v14 = *(_DWORD *)(ausdk::AUScope::SafeGetElement((AUDeesser *)((char *)this + 128), 0) + 108);
      v10 = (BlockProcessor *)operator new();
      BlockProcessor::BlockProcessor(v10, 1, &v15, 1, &v14, v8, (int (*)(void *, unsigned int, const AudioBufferList **, AudioBufferList **))AUDeesser::BlockProcessClassFunc, this);
      *((_QWORD *)this + 66) = v10;
    }
    std::__optional_destruct_base<ausdk::AUBufferList,false>::reset[abi:ne180100]((uint64_t)this + 832);
    *((_QWORD *)this + 106) = 0;
    *((_OWORD *)this + 52) = 0u;
    *((_BYTE *)this + 856) = 1;
    ausdk::AUBufferList::Allocate((AUDeesser *)((char *)this + 832), &v17, v8);
    std::__optional_destruct_base<ausdk::AUBufferList,false>::reset[abi:ne180100]((uint64_t)this + 864);
    *((_QWORD *)this + 110) = 0;
    *((_OWORD *)this + 54) = 0u;
    *((_BYTE *)this + 888) = 1;
    ausdk::AUBufferList::Allocate((AUDeesser *)((char *)this + 864), &v17, v8);
    std::__optional_destruct_base<ausdk::AUBufferList,false>::reset[abi:ne180100]((uint64_t)this + 896);
    *((_QWORD *)this + 114) = 0;
    *((_OWORD *)this + 56) = 0u;
    *((_BYTE *)this + 920) = 1;
    ausdk::AUBufferList::Allocate((AUDeesser *)((char *)this + 896), &v17, v8);
    if (!(*(unsigned int (**)(AUDeesser *, _QWORD, _QWORD))(*(_QWORD *)this + 72))(this, 0, 0))
    {
      v11 = 736;
      while (!AudioUnitSetProperty(*(AudioUnit *)((char *)this + v11), 0xEu, 0, 0, &inData, 4u))
      {
        v11 += 8;
        if (v11 == 816)
        {
          if (!AudioUnitSetProperty(*((AudioUnit *)this + 102), 0xEu, 0, 0, &inData, 4u)
            && !AudioUnitSetProperty(*((AudioUnit *)this + 103), 0xEu, 0, 0, &inData, 4u))
          {
            AUDeesser::UpdateParameters(this);
            *((_DWORD *)this + 136) = *((_DWORD *)this + 135);
            result = AUDeesser::InitializeUnderlyingAUs(this);
            if (!v12)
            {
              if (((float)(flt_1B662D648[*((_DWORD *)this + 232) == 0] / (float)inData) / *(double *)&v18) <= 1)
                v13 = 1;
              else
                v13 = ((float)(flt_1B662D648[*((_DWORD *)this + 232) == 0] / (float)inData)
                                   / *(double *)&v18);
              std::valarray<float>::resize((uint64_t)this + 568, *(double *)&v18, 0.0);
              *((_DWORD *)this + 140) = v13;
              *((_QWORD *)this + 69) = 0;
              std::valarray<float>::resize((uint64_t)this + 600, *(double *)&v18, 0.0);
              *((_DWORD *)this + 148) = v13;
              *((_QWORD *)this + 73) = 0;
              std::valarray<float>::resize((uint64_t)this + 632, *(double *)&v18, 0.0);
              *((_DWORD *)this + 156) = v13;
              result = 0.0;
              *((_QWORD *)this + 77) = 0;
            }
          }
          return result;
        }
      }
    }
  }
  return result;
}

void sub_1B63A50A8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1BCC95CEC](v1, 0x1080C40622722D2);
  _Unwind_Resume(a1);
}

uint64_t AUDeesser::Cleanup(AUDeesser *this)
{
  uint64_t v2;
  char *v3;
  OpaqueAudioComponentInstance *v4;
  uint64_t result;
  OpaqueAudioComponentInstance *v6;
  uint64_t v7;

  v2 = 0;
  v3 = (char *)this + 736;
  while (1)
  {
    v4 = *(OpaqueAudioComponentInstance **)&v3[v2];
    if (v4)
    {
      result = AudioUnitUninitialize(v4);
      if ((_DWORD)result)
        break;
    }
    v2 += 8;
    if (v2 == 80)
    {
      v6 = (OpaqueAudioComponentInstance *)*((_QWORD *)this + 102);
      if (!v6 || (result = AudioUnitUninitialize(v6), !(_DWORD)result))
      {
        result = *((_QWORD *)this + 103);
        if (result)
          result = AudioUnitUninitialize((AudioUnit)result);
      }
      break;
    }
  }
  v7 = *((_QWORD *)this + 66);
  if (v7)
  {
    BlockBuffer::~BlockBuffer((BlockBuffer *)(v7 + 24));
    BlockBuffer::~BlockBuffer((BlockBuffer *)v7);
    result = MEMORY[0x1BCC95CEC]();
    *((_QWORD *)this + 66) = 0;
  }
  return result;
}

uint64_t AUDeesser::Reset(AUDeesser *this)
{
  uint64_t result;
  uint64_t v3;
  char *v4;

  *((_QWORD *)this + 69) = 0;
  *((_QWORD *)this + 73) = 0;
  *((_QWORD *)this + 77) = 0;
  result = AudioUnitReset(*((AudioUnit *)this + 102), 0, 0);
  if (!(_DWORD)result)
  {
    result = AudioUnitReset(*((AudioUnit *)this + 103), 0, 0);
    if (!(_DWORD)result)
    {
      v3 = 0;
      v4 = (char *)this + 736;
      while (1)
      {
        result = AudioUnitReset(*(AudioUnit *)&v4[v3], 0, 0);
        if ((_DWORD)result)
          break;
        v3 += 8;
        if (v3 == 80)
          return 0;
      }
    }
  }
  return result;
}

uint64_t AUDeesser::GetPropertyInfo(AUDeesser *this, int a2, int a3, unsigned int a4, unsigned int *a5, BOOL *a6)
{
  uint64_t result;

  if (a3 || a2 != 21 && a2 != 64001 && a2 != 3700)
    return 4294956417;
  result = 0;
  *a6 = 1;
  *a5 = 4;
  return result;
}

uint64_t AUDeesser::GetProperty(AUDeesser *this, int a2, int a3, unsigned int a4, _DWORD *a5)
{
  uint64_t result;
  int v6;

  if (a3)
    return 4294956417;
  switch(a2)
  {
    case 64001:
      v6 = *((_DWORD *)this + 232);
      break;
    case 3700:
      v6 = *((unsigned __int8 *)this + 376);
      break;
    case 21:
      v6 = *((_DWORD *)this + 134);
      break;
    default:
      return 4294956417;
  }
  result = 0;
  *a5 = v6;
  return result;
}

uint64_t AUDeesser::SetProperty(AUDeesser *this, int a2, int a3, unsigned int a4, _DWORD *a5, unsigned int a6)
{
  uint64_t result;

  if (a3)
    return 4294956417;
  if (a2 == 64001)
  {
    if (a6 >= 4)
    {
      result = 0;
      *((_DWORD *)this + 232) = *a5;
      return result;
    }
    return 4294956445;
  }
  if (a2 == 3700)
  {
    if (a6 >= 4)
    {
      result = 0;
      *((_BYTE *)this + 376) = *(_BYTE *)a5;
      return result;
    }
    return 4294956445;
  }
  if (a2 != 21)
    return 4294956417;
  result = 0;
  *((_DWORD *)this + 134) = *a5;
  return result;
}

uint64_t AUDeesser::SetParameter(AUDeesser *this, unsigned int a2, unsigned int a3, unsigned int a4, float a5)
{
  ausdk::AUScope *Scope;
  ausdk::AUElement *Element;

  Scope = (ausdk::AUScope *)ausdk::AUBase::GetScope(this, a3);
  Element = (ausdk::AUElement *)ausdk::AUScope::SafeGetElement(Scope, a4);
  ausdk::AUElement::SetParameter(Element, a2, a5, 0);
  ++*((_DWORD *)this + 135);
  return 0;
}

uint64_t AUDeesser::CanScheduleParameters(AUDeesser *this)
{
  return 0;
}

uint64_t AUDeesser::ProcessBufferLists(AUDeesser *this, unsigned int *a2, AudioBufferList *a3, AudioBufferList *a4, unsigned int a5)
{
  int v10;
  uint64_t result;
  BlockProcessor *v12;
  const AudioStreamBasicDescription *Element;
  _DWORD *v14;
  int v15;
  AudioBufferList *v16;
  AudioBufferList *v17;

  v10 = *((_DWORD *)this + 135);
  if (*((_DWORD *)this + 136) != v10)
  {
    AUDeesser::UpdateParameters(this);
    *((_DWORD *)this + 136) = v10;
  }
  if (*((_DWORD *)this + 134) || *((_DWORD *)this + 137) <= 1u)
    goto LABEL_5;
  v12 = (BlockProcessor *)*((_QWORD *)this + 66);
  if (v12)
  {
    v16 = a4;
    v17 = a3;
    return BlockProcessor::Process(v12, a5, (const AudioBufferList **)&v17, &v16);
  }
  Element = (const AudioStreamBasicDescription *)ausdk::AUScope::SafeGetElement((AUDeesser *)((char *)this + 128), 0);
  v14 = (_DWORD *)ausdk::AUBufferList::PrepareBuffer((AUDeesser *)((char *)this + 896), Element + 2, a5);
  CopyBufferList(&a3->mNumberBuffers, v14);
  v15 = *((_DWORD *)this + 137);
  if (v15 == 4)
  {
    AUDeesser::Crossover4Way(this, a2, (const AudioTimeStamp *)((char *)this + 672), a4, a5);
    goto LABEL_6;
  }
  if (v15 == 3)
  {
    AUDeesser::Crossover3Way(this, a2, (const AudioTimeStamp *)((char *)this + 672), a4, a5);
    goto LABEL_6;
  }
  if (v15 != 2)
LABEL_5:
    CopyBufferList(&a3->mNumberBuffers, a4);
  else
    AUDeesser::Crossover2Way(this, a2, (const AudioTimeStamp *)((char *)this + 672), a4, a5);
LABEL_6:
  result = 0;
  *((double *)this + 84) = *((double *)this + 84) + (double)a5;
  return result;
}

uint64_t AUDeesser::Render(AUDeesser *this, unsigned int *a2, const AudioTimeStamp *a3, uint64_t a4)
{
  ausdk::AUScope *v8;
  uint64_t Element;
  uint64_t v10;
  ausdk::AUInputElement *v11;
  uint64_t result;
  uint64_t BufferList;
  uint64_t v14;
  unsigned int v15;

  v8 = (AUDeesser *)((char *)this + 80);
  Element = ausdk::AUScope::SafeGetElement((AUDeesser *)((char *)this + 80), 0);
  v10 = ausdk::AUScope::SafeGetElement((AUDeesser *)((char *)this + 128), 0);
  v15 = 0;
  v11 = (ausdk::AUInputElement *)ausdk::AUScope::SafeGetElement(v8, 0);
  result = ausdk::AUInputElement::PullInput(v11, &v15, a3, 0, a4);
  if (!(_DWORD)result)
  {
    BufferList = ausdk::AUBufferList::GetBufferList((ausdk::AUBufferList *)(Element + 144));
    v14 = ausdk::AUBufferList::GetBufferList((ausdk::AUBufferList *)(v10 + 144));
    return (*(uint64_t (**)(AUDeesser *, unsigned int *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)this + 176))(this, a2, BufferList, v14, a4);
  }
  return result;
}

uint64_t AUDeesser::GetParameterInfo(AUDeesser *this, int a2, int a3, AudioUnitParameterInfo *buffer)
{
  uint64_t result;
  UInt32 v6;
  const __CFString *v7;
  uint64_t v8;
  int v9;
  AudioUnitParameterUnit v10;
  AudioUnitParameterValue v11;
  int v12;

  if (a2)
    return 4294956418;
  buffer->flags = 0;
  buffer->unitName = 0;
  v6 = 2;
  switch(a3)
  {
    case 0:
      buffer->clumpID = 1;
      v7 = CFSTR("Low Suppression Band Start Frequency");
      buffer->cfNameString = CFSTR("Low Suppression Band Start Frequency");
      v8 = 0x467A000042C80000;
      v9 = -1073741824;
      v10 = kAudioUnitParameterUnit_Hertz;
      v11 = 2500.0;
      goto LABEL_28;
    case 1:
    case 2:
      buffer->clumpID = 1;
      if (a3 == 1)
        v7 = CFSTR("Low Suppression Band End Frequency");
      else
        v7 = CFSTR("High Suppression Band End Frequency");
      buffer->cfNameString = v7;
      v8 = 0x473B800043480000;
      v9 = -1073741824;
      v10 = kAudioUnitParameterUnit_Hertz;
      v11 = 6000.0;
      goto LABEL_28;
    case 3:
      goto LABEL_11;
    case 4:
      v6 = 3;
LABEL_11:
      buffer->clumpID = v6;
      v7 = CFSTR("Suppression RMS Level");
      buffer->cfNameString = CFSTR("Suppression RMS Level");
      v8 = 0x41400000C2C00000;
      v9 = -1073741824;
      v10 = kAudioUnitParameterUnit_Decibels;
      v12 = -1038614528;
      goto LABEL_22;
    case 5:
      goto LABEL_13;
    case 6:
      v6 = 3;
LABEL_13:
      buffer->clumpID = v6;
      v7 = CFSTR("Threshold Ratio (RMS)");
      buffer->cfNameString = CFSTR("Threshold Ratio (RMS)");
      v8 = 0x41400000C2C00000;
      v9 = -1073741824;
      v11 = -9.0;
      goto LABEL_25;
    case 7:
      goto LABEL_15;
    case 8:
      v6 = 3;
LABEL_15:
      v10 = kAudioUnitParameterUnit_Generic;
      v7 = CFSTR("Threshold Smoothing Time (ms)");
      buffer->clumpID = v6;
      buffer->cfNameString = CFSTR("Threshold Smoothing Time (ms)");
      v8 = 0x42C8000040C00000;
      v9 = -1073741824;
      v11 = 24.0;
      goto LABEL_28;
    case 9:
      goto LABEL_17;
    case 10:
      v6 = 3;
LABEL_17:
      v10 = kAudioUnitParameterUnit_Generic;
      v7 = CFSTR("Suppression Attack Time (ms)");
      buffer->clumpID = v6;
      buffer->cfNameString = CFSTR("Suppression Attack Time (ms)");
      v8 = 0x4496000040C00000;
      v9 = -1073741824;
      v11 = 10.0;
      goto LABEL_28;
    case 11:
      goto LABEL_19;
    case 12:
      v6 = 3;
LABEL_19:
      v10 = kAudioUnitParameterUnit_Generic;
      buffer->clumpID = v6;
      v7 = CFSTR("Suppression Release Time (ms)");
      buffer->cfNameString = CFSTR("Suppression Release Time (ms)");
      v8 = 0x4496000040C00000;
      v9 = -1073741824;
      v12 = 1120403456;
      goto LABEL_22;
    case 13:
      goto LABEL_21;
    case 14:
      v6 = 3;
LABEL_21:
      v9 = 1073774592;
      buffer->clumpID = v6;
      v7 = CFSTR("Measured Threshold Ratio (RMS)");
      buffer->cfNameString = CFSTR("Measured Threshold Ratio (RMS)");
      v8 = 0x41400000C2C00000;
      v10 = kAudioUnitParameterUnit_Decibels;
      v12 = -1027604480;
LABEL_22:
      v11 = *(float *)&v12;
      goto LABEL_28;
    case 15:
      goto LABEL_24;
    case 16:
      v6 = 3;
LABEL_24:
      v9 = 1073774592;
      v7 = CFSTR("S Band Compression");
      buffer->clumpID = v6;
      buffer->cfNameString = CFSTR("S Band Compression");
      v8 = 0x41A0000000000000;
      v11 = 0.0;
LABEL_25:
      v10 = kAudioUnitParameterUnit_Decibels;
      goto LABEL_28;
    case 17:
      goto LABEL_27;
    case 18:
      v6 = 3;
LABEL_27:
      buffer->clumpID = v6;
      v7 = CFSTR("Monitor S Detection");
      buffer->cfNameString = CFSTR("Monitor S Detection");
      v8 = 0x3F80000000000000;
      v9 = -1073741824;
      v11 = 0.0;
      v10 = kAudioUnitParameterUnit_Boolean;
LABEL_28:
      buffer->flags = 135266304;
      CFStringGetCString(v7, buffer->name, 52, 0x8000100u);
      result = 0;
      buffer->unit = v10;
      *(_QWORD *)&buffer->minValue = v8;
      buffer->defaultValue = v11;
      buffer->flags |= v9;
      break;
    default:
      result = 4294956418;
      break;
  }
  return result;
}

uint64_t AUDeesser::RestoreState(OpaqueAudioComponentInstance **this, const void *a2)
{
  uint64_t result;

  result = ausdk::AUBase::RestoreState(this, a2);
  if (!(_DWORD)result)
    ++*((_DWORD *)this + 135);
  return result;
}

uint64_t AUDeesser::CopyClumpName(AUDeesser *this, int a2, int a3, unsigned int a4, __CFString **a5)
{
  uint64_t result;
  __CFString *v7;

  if (a2)
    return 4294956430;
  if ((a3 - 1) > 2)
    return 4294956418;
  v7 = off_1E69D8F18[a3 - 1];
  CFRetain(v7);
  result = 0;
  *a5 = v7;
  return result;
}

double AUDeesser::GetLatency(AUDeesser *this)
{
  return 0.0;
}

double AUDeesser::GetTailTime(AUDeesser *this)
{
  return 0.0;
}

uint64_t AUDeesser::SupportsTail(AUDeesser *this)
{
  return 1;
}

BOOL AUDeesser::StreamFormatWritable(AUDeesser *this)
{
  return *((_BYTE *)this + 17) == 0;
}

uint64_t AUDeesser::SupportedNumChannels(AUDeesser *this, const AUChannelInfo **a2)
{
  if (a2)
    *a2 = (const AUChannelInfo *)&AUDeesser::SupportedNumChannels(AUChannelInfo const**)::sSupportedChannelConfigs;
  return 2;
}

BOOL AUDeesser::ValidFormat(AUDeesser *this, const AudioStreamBasicDescription *a2, unsigned int a3, AudioStreamBasicDescription *a4)
{
  _BOOL4 v5;

  if (ausdk::ASBD::IsCommonFloat32((ausdk::ASBD *)a4, a2))
    v5 = (a4->mFormatFlags & 0x20) != 0 || a4->mChannelsPerFrame == 1;
  else
    v5 = 0;
  return a4->mChannelsPerFrame < 3 && v5;
}

void AUDeesser::UpdateParameters(AUDeesser *this)
{
  int v2;
  char *v3;
  uint64_t i;
  uint64_t v5;
  ausdk::AUElement *v6;
  ausdk::AUElement **v7;
  float Parameter;
  uint64_t v9;
  ausdk::AUElement *v10;
  ausdk::AUElement **v11;
  float v12;
  uint64_t v13;
  ausdk::AUElement *v14;
  ausdk::AUElement **v15;
  float v16;
  float v17;
  int v18;
  int v19;
  char v20;
  char v21;
  AudioUnitParameterID v22;
  AudioUnitParameterID v23;
  AudioUnitParameterID v24;
  AudioUnitParameterID v25;
  int v26;
  char v27;
  char v28;
  int v29;
  char v30;
  char v31;
  AudioUnitParameterID v32;
  AudioUnitParameterID v33;
  AudioUnitParameterID v34;
  AudioUnitParameterID v35;
  ausdk::AUElement *Element;
  ausdk::AUElement *v37;
  ausdk::AUElement *v38;
  ausdk::AUElement *v39;
  ausdk::AUElement *v40;
  float v41;
  ausdk::AUElement *v42;
  float v43;
  ausdk::AUElement *v44;
  float v45;
  ausdk::AUElement *v46;
  ausdk::AUElement *v47;
  float v48;
  ausdk::AUElement *v49;
  float v50;
  ausdk::AUElement *v51;
  float v52;
  ausdk::AUElement *v53;

  v2 = 0;
  v3 = (char *)this + 736;
  do
  {
    for (i = 0; i != 80; i += 8)
      AudioUnitSetParameter(*(AudioUnit *)&v3[i], v2 + 1000, 0, 0, 1.0, 0);
    ++v2;
  }
  while (v2 != 8);
  v5 = *((_QWORD *)this + 9);
  if (v5)
  {
    v6 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v5 + 32))(v5, 0);
  }
  else
  {
    v7 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v7)
      v6 = 0;
    else
      v6 = *v7;
  }
  Parameter = ausdk::AUElement::GetParameter(v6, 0);
  v9 = *((_QWORD *)this + 9);
  if (v9)
  {
    v10 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v9 + 32))(v9, 0);
  }
  else
  {
    v11 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v11)
      v10 = 0;
    else
      v10 = *v11;
  }
  v12 = ausdk::AUElement::GetParameter(v10, 1u);
  v13 = *((_QWORD *)this + 9);
  if (v13)
  {
    v14 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v13 + 32))(v13, 0);
  }
  else
  {
    v15 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v15)
      v14 = 0;
    else
      v14 = *v15;
  }
  v16 = ausdk::AUElement::GetParameter(v14, 2u);
  v17 = *(double *)(ausdk::AUScope::SafeGetElement((AUDeesser *)((char *)this + 128), 0) + 80) * 0.49000001;
  if (Parameter >= v17)
  {
    v18 = 1;
LABEL_25:
    *((_DWORD *)this + 137) = v18;
    v19 = 0;
    v20 = 1;
    do
    {
      v21 = v20;
      v22 = v19 | 0xFA0;
      AudioUnitSetParameter(*((AudioUnit *)this + 92), v19 | 0xFA0, 0, 0, 0.0, 0);
      v23 = v19 | 0x3E8;
      AudioUnitSetParameter(*((AudioUnit *)this + 92), v19 | 0x3E8, 0, 0, 0.0, 0);
      v24 = v19 | 0xBB8;
      AudioUnitSetParameter(*((AudioUnit *)this + 92), v19 | 0xBB8, 0, 0, v12, 0);
      v25 = v19 | 0x7D0;
      AudioUnitSetParameter(*((AudioUnit *)this + 92), v25, 0, 0, 1.0, 0);
      AudioUnitSetParameter(*((AudioUnit *)this + 93), v22, 0, 0, 0.0, 0);
      AudioUnitSetParameter(*((AudioUnit *)this + 93), v23, 0, 0, 0.0, 0);
      AudioUnitSetParameter(*((AudioUnit *)this + 93), v24, 0, 0, v12, 0);
      AudioUnitSetParameter(*((AudioUnit *)this + 93), v25, 0, 0, 2.0, 0);
      AudioUnitSetParameter(*((AudioUnit *)this + 94), v22, 0, 0, 0.0, 0);
      AudioUnitSetParameter(*((AudioUnit *)this + 94), v23, 0, 0, 0.0, 0);
      AudioUnitSetParameter(*((AudioUnit *)this + 94), v24, 0, 0, v16, 0);
      AudioUnitSetParameter(*((AudioUnit *)this + 94), v25, 0, 0, 2.0, 0);
      AudioUnitSetParameter(*((AudioUnit *)this + 95), v22, 0, 0, 0.0, 0);
      AudioUnitSetParameter(*((AudioUnit *)this + 95), v23, 0, 0, 0.0, 0);
      AudioUnitSetParameter(*((AudioUnit *)this + 95), v24, 0, 0, v16, 0);
      AudioUnitSetParameter(*((AudioUnit *)this + 95), v25, 0, 0, 1.0, 0);
      AudioUnitSetParameter(*((AudioUnit *)this + 96), v22, 0, 0, 0.0, 0);
      AudioUnitSetParameter(*((AudioUnit *)this + 96), v23, 0, 0, 0.0, 0);
      AudioUnitSetParameter(*((AudioUnit *)this + 96), v24, 0, 0, Parameter, 0);
      AudioUnitSetParameter(*((AudioUnit *)this + 96), v25, 0, 0, 2.0, 0);
      AudioUnitSetParameter(*((AudioUnit *)this + 97), v22, 0, 0, 0.0, 0);
      AudioUnitSetParameter(*((AudioUnit *)this + 97), v23, 0, 0, 0.0, 0);
      AudioUnitSetParameter(*((AudioUnit *)this + 97), v24, 0, 0, Parameter, 0);
      AudioUnitSetParameter(*((AudioUnit *)this + 97), v25, 0, 0, 1.0, 0);
      AudioUnitSetParameter(*((AudioUnit *)this + 98), v22, 0, 0, 0.0, 0);
      AudioUnitSetParameter(*((AudioUnit *)this + 98), v23, 0, 0, 0.0, 0);
      AudioUnitSetParameter(*((AudioUnit *)this + 98), v24, 0, 0, Parameter, 0);
      AudioUnitSetParameter(*((AudioUnit *)this + 98), v25, 0, 0, 1.0, 0);
      AudioUnitSetParameter(*((AudioUnit *)this + 99), v22, 0, 0, 0.0, 0);
      AudioUnitSetParameter(*((AudioUnit *)this + 99), v23, 0, 0, 0.0, 0);
      AudioUnitSetParameter(*((AudioUnit *)this + 99), v24, 0, 0, Parameter, 0);
      AudioUnitSetParameter(*((AudioUnit *)this + 99), v25, 0, 0, 2.0, 0);
      AudioUnitSetParameter(*((AudioUnit *)this + 100), v22, 0, 0, 0.0, 0);
      AudioUnitSetParameter(*((AudioUnit *)this + 100), v23, 0, 0, 0.0, 0);
      AudioUnitSetParameter(*((AudioUnit *)this + 100), v24, 0, 0, v16, 0);
      AudioUnitSetParameter(*((AudioUnit *)this + 100), v25, 0, 0, 1.0, 0);
      AudioUnitSetParameter(*((AudioUnit *)this + 101), v22, 0, 0, 0.0, 0);
      AudioUnitSetParameter(*((AudioUnit *)this + 101), v23, 0, 0, 0.0, 0);
      AudioUnitSetParameter(*((AudioUnit *)this + 101), v24, 0, 0, v16, 0);
      AudioUnitSetParameter(*((AudioUnit *)this + 101), v25, 0, 0, 2.0, 0);
      v20 = 0;
      v19 = 1;
    }
    while ((v21 & 1) != 0);
    goto LABEL_33;
  }
  if (v12 >= v17)
  {
    v26 = 0;
    *((_DWORD *)this + 137) = 2;
    v27 = 1;
    do
    {
      v28 = v27;
      AudioUnitSetParameter(*((AudioUnit *)this + 92), v26 | 0xFA0, 0, 0, 0.0, 0);
      AudioUnitSetParameter(*((AudioUnit *)this + 92), v26 | 0x3E8, 0, 0, 0.0, 0);
      AudioUnitSetParameter(*((AudioUnit *)this + 92), v26 | 0xBB8, 0, 0, Parameter, 0);
      AudioUnitSetParameter(*((AudioUnit *)this + 93), v26 | 0xFA0, 0, 0, 0.0, 0);
      AudioUnitSetParameter(*((AudioUnit *)this + 93), v26 | 0x3E8, 0, 0, 0.0, 0);
      AudioUnitSetParameter(*((AudioUnit *)this + 93), v26 | 0xBB8, 0, 0, Parameter, 0);
      AudioUnitSetParameter(*((AudioUnit *)this + 92), v26 | 0x7D0, 0, 0, 1.0, 0);
      AudioUnitSetParameter(*((AudioUnit *)this + 93), v26 | 0x7D0, 0, 0, 2.0, 0);
      v27 = 0;
      v26 = 1;
    }
    while ((v28 & 1) != 0);
  }
  else
  {
    if (v16 < v17)
    {
      v18 = 4;
      goto LABEL_25;
    }
    v29 = 0;
    *((_DWORD *)this + 137) = 3;
    v30 = 1;
    do
    {
      v31 = v30;
      v32 = v29 | 0xFA0;
      AudioUnitSetParameter(*((AudioUnit *)this + 92), v29 | 0xFA0, 0, 0, 0.0, 0);
      v33 = v29 | 0x3E8;
      AudioUnitSetParameter(*((AudioUnit *)this + 92), v29 | 0x3E8, 0, 0, 0.0, 0);
      v34 = v29 | 0xBB8;
      AudioUnitSetParameter(*((AudioUnit *)this + 92), v29 | 0xBB8, 0, 0, Parameter, 0);
      v35 = v29 | 0x7D0;
      AudioUnitSetParameter(*((AudioUnit *)this + 92), v35, 0, 0, 1.0, 0);
      AudioUnitSetParameter(*((AudioUnit *)this + 93), v32, 0, 0, 0.0, 0);
      AudioUnitSetParameter(*((AudioUnit *)this + 93), v33, 0, 0, 0.0, 0);
      AudioUnitSetParameter(*((AudioUnit *)this + 93), v34, 0, 0, Parameter, 0);
      AudioUnitSetParameter(*((AudioUnit *)this + 93), v35, 0, 0, 2.0, 0);
      AudioUnitSetParameter(*((AudioUnit *)this + 94), v32, 0, 0, 0.0, 0);
      AudioUnitSetParameter(*((AudioUnit *)this + 94), v33, 0, 0, 0.0, 0);
      AudioUnitSetParameter(*((AudioUnit *)this + 94), v34, 0, 0, v12, 0);
      AudioUnitSetParameter(*((AudioUnit *)this + 94), v35, 0, 0, 2.0, 0);
      AudioUnitSetParameter(*((AudioUnit *)this + 95), v32, 0, 0, 0.0, 0);
      AudioUnitSetParameter(*((AudioUnit *)this + 95), v33, 0, 0, 0.0, 0);
      AudioUnitSetParameter(*((AudioUnit *)this + 95), v34, 0, 0, v12, 0);
      AudioUnitSetParameter(*((AudioUnit *)this + 95), v35, 0, 0, 1.0, 0);
      AudioUnitSetParameter(*((AudioUnit *)this + 96), v32, 0, 0, 0.0, 0);
      AudioUnitSetParameter(*((AudioUnit *)this + 96), v33, 0, 0, 0.0, 0);
      AudioUnitSetParameter(*((AudioUnit *)this + 96), v34, 0, 0, v12, 0);
      AudioUnitSetParameter(*((AudioUnit *)this + 96), v35, 0, 0, 1.0, 0);
      AudioUnitSetParameter(*((AudioUnit *)this + 97), v32, 0, 0, 0.0, 0);
      AudioUnitSetParameter(*((AudioUnit *)this + 97), v33, 0, 0, 0.0, 0);
      AudioUnitSetParameter(*((AudioUnit *)this + 97), v34, 0, 0, v12, 0);
      AudioUnitSetParameter(*((AudioUnit *)this + 97), v35, 0, 0, 2.0, 0);
      v30 = 0;
      v29 = 1;
    }
    while ((v31 & 1) != 0);
  }
LABEL_33:
  Element = (ausdk::AUElement *)ausdk::AUScope::SafeGetElement((AUDeesser *)((char *)this + 32), 0);
  *((float *)this + 163) = ausdk::AUElement::GetParameter(Element, 3u);
  v37 = (ausdk::AUElement *)ausdk::AUScope::SafeGetElement((AUDeesser *)((char *)this + 32), 0);
  *((float *)this + 165) = ausdk::AUElement::GetParameter(v37, 5u);
  v38 = (ausdk::AUElement *)ausdk::AUScope::SafeGetElement((AUDeesser *)((char *)this + 32), 0);
  *((float *)this + 164) = ausdk::AUElement::GetParameter(v38, 4u);
  v39 = (ausdk::AUElement *)ausdk::AUScope::SafeGetElement((AUDeesser *)((char *)this + 32), 0);
  *((float *)this + 166) = ausdk::AUElement::GetParameter(v39, 6u);
  v40 = (ausdk::AUElement *)ausdk::AUScope::SafeGetElement((AUDeesser *)((char *)this + 32), 0);
  v41 = ausdk::AUElement::GetParameter(v40, 9u);
  AudioUnitSetParameter(*((AudioUnit *)this + 102), 7u, 0, 0, (float)(1000.0 / v41) * -0.06, 0);
  v42 = (ausdk::AUElement *)ausdk::AUScope::SafeGetElement((AUDeesser *)((char *)this + 32), 0);
  v43 = ausdk::AUElement::GetParameter(v42, 0xBu);
  AudioUnitSetParameter(*((AudioUnit *)this + 102), 6u, 0, 0, (float)(1000.0 / v43) * 0.06, 0);
  v44 = (ausdk::AUElement *)ausdk::AUScope::SafeGetElement((AUDeesser *)((char *)this + 32), 0);
  v45 = ausdk::AUElement::GetParameter(v44, 7u);
  AudioUnitSetParameter(*((AudioUnit *)this + 102), 8u, 0, 0, v45, 0);
  v46 = (ausdk::AUElement *)ausdk::AUScope::SafeGetElement((AUDeesser *)((char *)this + 32), 0);
  *((_BYTE *)this + 648) = ausdk::AUElement::GetParameter(v46, 0x11u) > 0.0;
  v47 = (ausdk::AUElement *)ausdk::AUScope::SafeGetElement((AUDeesser *)((char *)this + 32), 0);
  v48 = ausdk::AUElement::GetParameter(v47, 0xAu);
  AudioUnitSetParameter(*((AudioUnit *)this + 103), 7u, 0, 0, (float)(1000.0 / v48) * -0.06, 0);
  v49 = (ausdk::AUElement *)ausdk::AUScope::SafeGetElement((AUDeesser *)((char *)this + 32), 0);
  v50 = ausdk::AUElement::GetParameter(v49, 0xCu);
  AudioUnitSetParameter(*((AudioUnit *)this + 103), 6u, 0, 0, (float)(1000.0 / v50) * 0.06, 0);
  v51 = (ausdk::AUElement *)ausdk::AUScope::SafeGetElement((AUDeesser *)((char *)this + 32), 0);
  v52 = ausdk::AUElement::GetParameter(v51, 8u);
  AudioUnitSetParameter(*((AudioUnit *)this + 103), 8u, 0, 0, v52, 0);
  v53 = (ausdk::AUElement *)ausdk::AUScope::SafeGetElement((AUDeesser *)((char *)this + 32), 0);
  *((_BYTE *)this + 649) = ausdk::AUElement::GetParameter(v53, 0x12u) > 0.0;
}

void AUDeesser::Crossover2Way(AUDeesser *this, unsigned int *a2, const AudioTimeStamp *a3, AudioBufferList *a4, UInt32 a5)
{
  __int128 v9;
  __int128 v10;
  uint64_t BufferList;
  vDSP_Length v12;
  const float **v13;
  uint64_t v14;
  unsigned int v15;
  unsigned int v16;
  float v17;
  float v18;
  const float **v19;
  uint64_t v20;
  unsigned int v21;
  unsigned int v22;
  float v23;
  float v24;
  float v25;
  char v26;
  float v27;
  uint64_t v28;
  ausdk::AUElement *v29;
  ausdk::AUElement **v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  ausdk::AUElement *v35;
  ausdk::AUElement **v36;
  AudioUnitParameterValue outValue;
  float __C;
  AudioTimeStamp inTimeStamp;

  v9 = *(_OWORD *)&a3->mRateScalar;
  *(_OWORD *)&inTimeStamp.mSampleTime = *(_OWORD *)&a3->mSampleTime;
  *(_OWORD *)&inTimeStamp.mRateScalar = v9;
  v10 = *(_OWORD *)&a3->mSMPTETime.mHours;
  *(_OWORD *)&inTimeStamp.mSMPTETime.mSubframes = *(_OWORD *)&a3->mSMPTETime.mSubframes;
  *(_OWORD *)&inTimeStamp.mSMPTETime.mHours = v10;
  BufferList = ausdk::AUBufferList::GetBufferList((AUDeesser *)((char *)this + 896));
  CopyBufferList((unsigned int *)BufferList, a4);
  __C = 0.0;
  v12 = a5;
  vDSP_svesq((const float *)a4->mBuffers[0].mData, 1, &__C, a5);
  __C = __C / (float)a5;
  v13 = (const float **)((char *)this + 552);
  v14 = *((unsigned int *)this + 139);
  *(float *)(*((_QWORD *)this + 71) + 4 * v14) = __C;
  v15 = *((_DWORD *)this + 140);
  *((_DWORD *)this + 139) = ((int)v14 + 1) % v15;
  v16 = *((_DWORD *)this + 138);
  if (v16 < v15)
    *(_DWORD *)v13 = v16 + 1;
  v17 = SlidingRMSWindow::ComputeRMS(v13) + 1.0e-20;
  v18 = log10f(v17) * 10.0;
  AudioUnitProcess(*((AudioUnit *)this + 93), a2, &inTimeStamp, a5, (AudioBufferList *)BufferList);
  __C = 0.0;
  vDSP_svesq(*(const float **)(BufferList + 16), 1, &__C, a5);
  __C = __C / (float)a5;
  v19 = (const float **)((char *)this + 584);
  v20 = *((unsigned int *)this + 147);
  *(float *)(*((_QWORD *)this + 75) + 4 * v20) = __C;
  v21 = *((_DWORD *)this + 148);
  *((_DWORD *)this + 147) = ((int)v20 + 1) % v21;
  v22 = *((_DWORD *)this + 146);
  if (v22 < v21)
    *(_DWORD *)v19 = v22 + 1;
  v23 = SlidingRMSWindow::ComputeRMS(v19) + 1.0e-20;
  v24 = log10f(v23) * 10.0;
  v25 = 0.0;
  if (v18 >= -50.0 && (float)(v24 - v18) >= *((float *)this + 165))
  {
    v27 = -0.0;
    if (*((_DWORD *)this + 232))
      v27 = v24;
    v25 = *((float *)this + 163) + v27;
    v26 = 1;
  }
  else
  {
    v26 = 0;
  }
  AudioUnitSetParameter(*((AudioUnit *)this + 102), 1u, 0, 0, v25, 0);
  v28 = *((_QWORD *)this + 9);
  if (v28)
  {
    v29 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v28 + 32))(v28, 0);
  }
  else
  {
    v30 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v30)
      v29 = 0;
    else
      v29 = *v30;
  }
  ausdk::AUElement::SetParameter(v29, 0xDu, v24 - v18, 0);
  AudioUnitProcess(*((AudioUnit *)this + 92), a2, &inTimeStamp, a5, a4);
  if (!*((_BYTE *)this + 648))
    AudioUnitProcess(*((AudioUnit *)this + 102), a2, &inTimeStamp, a5, (AudioBufferList *)BufferList);
  if (a4->mNumberBuffers)
  {
    v31 = 0;
    v32 = 0;
    v33 = BufferList + 16;
    do
    {
      if (*((_BYTE *)this + 648))
        bzero(a4->mBuffers[v31].mData, a4->mBuffers[v31].mDataByteSize);
      if ((v26 & 1) != 0 || !*((_BYTE *)this + 648))
        vDSP_vadd(*(const float **)(v33 + v31 * 16), 1, (const float *)a4->mBuffers[v31].mData, 1, (float *)a4->mBuffers[v31].mData, 1, v12);
      ++v32;
      ++v31;
    }
    while (v32 < a4->mNumberBuffers);
  }
  outValue = 0.0;
  AudioUnitGetParameter(*((AudioUnit *)this + 102), 0x3Eu, 0, 0, &outValue);
  v34 = *((_QWORD *)this + 9);
  if (v34)
  {
    v35 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v34 + 32))(v34, 0);
  }
  else
  {
    v36 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v36)
      v35 = 0;
    else
      v35 = *v36;
  }
  ausdk::AUElement::SetParameter(v35, 0xFu, outValue, 0);
}

void AUDeesser::Crossover3Way(AUDeesser *this, unsigned int *a2, const AudioTimeStamp *a3, AudioBufferList *a4, unsigned int a5)
{
  __int128 v9;
  __int128 v10;
  ausdk::AUBufferList *v11;
  const AudioStreamBasicDescription *Element;
  uint64_t BufferList;
  vDSP_Length v14;
  const float **v15;
  uint64_t v16;
  unsigned int v17;
  unsigned int v18;
  float v19;
  float v20;
  AudioBufferList *v21;
  unint64_t v22;
  uint64_t v23;
  float v24;
  const float **v25;
  uint64_t v26;
  unsigned int v27;
  unsigned int v28;
  float v29;
  float v30;
  float v31;
  char v32;
  float v33;
  uint64_t v34;
  ausdk::AUElement *v35;
  ausdk::AUElement **v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  ausdk::AUElement *v41;
  ausdk::AUElement **v42;
  AudioUnitParameterValue outValue;
  float __C;
  AudioTimeStamp inTimeStamp;

  v9 = *(_OWORD *)&a3->mRateScalar;
  *(_OWORD *)&inTimeStamp.mSampleTime = *(_OWORD *)&a3->mSampleTime;
  *(_OWORD *)&inTimeStamp.mRateScalar = v9;
  v10 = *(_OWORD *)&a3->mSMPTETime.mHours;
  *(_OWORD *)&inTimeStamp.mSMPTETime.mSubframes = *(_OWORD *)&a3->mSMPTETime.mSubframes;
  *(_OWORD *)&inTimeStamp.mSMPTETime.mHours = v10;
  v11 = (AUDeesser *)((char *)this + 832);
  Element = (const AudioStreamBasicDescription *)ausdk::AUScope::SafeGetElement((AUDeesser *)((char *)this + 128), 0);
  ausdk::AUBufferList::PrepareBuffer(v11, Element + 2, a5);
  BufferList = ausdk::AUBufferList::GetBufferList((AUDeesser *)((char *)this + 896));
  CopyBufferList((unsigned int *)BufferList, a4);
  __C = 0.0;
  v14 = a5;
  vDSP_svesq((const float *)a4->mBuffers[0].mData, 1, &__C, a5);
  __C = __C / (float)a5;
  v15 = (const float **)((char *)this + 552);
  v16 = *((unsigned int *)this + 139);
  *(float *)(*((_QWORD *)this + 71) + 4 * v16) = __C;
  v17 = *((_DWORD *)this + 140);
  *((_DWORD *)this + 139) = ((int)v16 + 1) % v17;
  v18 = *((_DWORD *)this + 138);
  if (v18 < v17)
    *(_DWORD *)v15 = v18 + 1;
  v19 = SlidingRMSWindow::ComputeRMS(v15) + 1.0e-20;
  v20 = log10f(v19);
  v21 = (AudioBufferList *)ausdk::AUBufferList::GetBufferList(v11);
  AudioUnitProcess(*((AudioUnit *)this + 92), a2, &inTimeStamp, a5, a4);
  CopyBufferList(&a4->mNumberBuffers, v21);
  AUDeesser::ApplyAllpassFilter((AudioUnit *)this, a2, &inTimeStamp, a4, v21, 2u, 3, a5);
  CopyBufferList((unsigned int *)BufferList, a4);
  AudioUnitProcess(*((AudioUnit *)this + 93), a2, &inTimeStamp, a5, a4);
  CopyBufferList(&a4->mNumberBuffers, (_DWORD *)BufferList);
  AudioUnitProcess(*((AudioUnit *)this + 97), a2, &inTimeStamp, a5, a4);
  if (v21->mNumberBuffers)
  {
    v22 = 0;
    v23 = 16;
    do
    {
      vDSP_vadd(*(const float **)((char *)&a4->mNumberBuffers + v23), 1, *(const float **)((char *)&v21->mNumberBuffers + v23), 1, *(float **)((char *)&v21->mNumberBuffers + v23), 1, a5);
      ++v22;
      v23 += 16;
    }
    while (v22 < v21->mNumberBuffers);
  }
  v24 = v20 * 10.0;
  AudioUnitProcess(*((AudioUnit *)this + 96), a2, &inTimeStamp, a5, (AudioBufferList *)BufferList);
  __C = 0.0;
  vDSP_svesq(*(const float **)(BufferList + 16), 1, &__C, a5);
  __C = __C / (float)a5;
  v25 = (const float **)((char *)this + 584);
  v26 = *((unsigned int *)this + 147);
  *(float *)(*((_QWORD *)this + 75) + 4 * v26) = __C;
  v27 = *((_DWORD *)this + 148);
  *((_DWORD *)this + 147) = ((int)v26 + 1) % v27;
  v28 = *((_DWORD *)this + 146);
  if (v28 < v27)
    *(_DWORD *)v25 = v28 + 1;
  v29 = SlidingRMSWindow::ComputeRMS(v25) + 1.0e-20;
  v30 = log10f(v29) * 10.0;
  v31 = 0.0;
  if (v24 >= -50.0 && (float)(v30 - v24) >= *((float *)this + 165))
  {
    v33 = -0.0;
    if (*((_DWORD *)this + 232))
      v33 = v30;
    v31 = *((float *)this + 163) + v33;
    v32 = 1;
  }
  else
  {
    v32 = 0;
  }
  AudioUnitSetParameter(*((AudioUnit *)this + 102), 1u, 0, 0, v31, 0);
  v34 = *((_QWORD *)this + 9);
  if (v34)
  {
    v35 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v34 + 32))(v34, 0);
  }
  else
  {
    v36 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v36)
      v35 = 0;
    else
      v35 = *v36;
  }
  ausdk::AUElement::SetParameter(v35, 0xDu, v30 - v24, 0);
  if (!*((_BYTE *)this + 648))
    AudioUnitProcess(*((AudioUnit *)this + 102), a2, &inTimeStamp, a5, (AudioBufferList *)BufferList);
  if (v21->mNumberBuffers)
  {
    v37 = 0;
    v38 = 0;
    v39 = BufferList + 16;
    do
    {
      if (*((_BYTE *)this + 648))
        bzero(v21->mBuffers[v37].mData, v21->mBuffers[v37].mDataByteSize);
      if ((v32 & 1) != 0 || !*((_BYTE *)this + 648))
        vDSP_vadd(*(const float **)(v39 + v37 * 16), 1, (const float *)v21->mBuffers[v37].mData, 1, (float *)v21->mBuffers[v37].mData, 1, v14);
      ++v38;
      ++v37;
    }
    while (v38 < v21->mNumberBuffers);
  }
  CopyBufferList(&v21->mNumberBuffers, a4);
  outValue = 0.0;
  AudioUnitGetParameter(*((AudioUnit *)this + 102), 0x3Eu, 0, 0, &outValue);
  v40 = *((_QWORD *)this + 9);
  if (v40)
  {
    v41 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v40 + 32))(v40, 0);
  }
  else
  {
    v42 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v42)
      v41 = 0;
    else
      v41 = *v42;
  }
  ausdk::AUElement::SetParameter(v41, 0xFu, outValue, 0);
}

unsigned int *AUDeesser::Crossover4Way(AUDeesser *this, unsigned int *a2, const AudioTimeStamp *a3, AudioBufferList *a4, unsigned int a5)
{
  __int128 v9;
  __int128 v10;
  ausdk::AUBufferList *v11;
  ausdk::AUScope *v12;
  const AudioStreamBasicDescription *Element;
  const AudioStreamBasicDescription *v14;
  vDSP_Length v15;
  float v16;
  const float **v17;
  uint64_t v18;
  unsigned int v19;
  unsigned int v20;
  float v21;
  float v22;
  uint64_t v23;
  _DWORD *v24;
  unsigned int *v25;
  unint64_t v26;
  void **v27;
  float v28;
  const float **v29;
  uint64_t v30;
  unsigned int v31;
  unsigned int v32;
  float v33;
  float v34;
  float v35;
  float v36;
  _BOOL4 v37;
  uint64_t v38;
  ausdk::AUElement *v39;
  ausdk::AUElement **v40;
  uint64_t v41;
  ausdk::AUElement *v42;
  ausdk::AUElement **v43;
  unint64_t v44;
  unint64_t v45;
  uint64_t v46;
  const float **v47;
  uint64_t v48;
  unsigned int v49;
  unsigned int v50;
  float v51;
  float v52;
  float v53;
  float v54;
  _BOOL4 v55;
  uint64_t v56;
  ausdk::AUElement *v57;
  ausdk::AUElement **v58;
  uint64_t v59;
  ausdk::AUElement *v60;
  ausdk::AUElement **v61;
  unint64_t v62;
  unint64_t v63;
  uint64_t v64;
  unint64_t v65;
  unint64_t v66;
  uint64_t v67;
  unsigned int *BufferList;
  AudioUnitParameterValue outValue;
  float __C;
  AudioTimeStamp inTimeStamp;

  v9 = *(_OWORD *)&a3->mRateScalar;
  *(_OWORD *)&inTimeStamp.mSampleTime = *(_OWORD *)&a3->mSampleTime;
  *(_OWORD *)&inTimeStamp.mRateScalar = v9;
  v10 = *(_OWORD *)&a3->mSMPTETime.mHours;
  *(_OWORD *)&inTimeStamp.mSMPTETime.mSubframes = *(_OWORD *)&a3->mSMPTETime.mSubframes;
  *(_OWORD *)&inTimeStamp.mSMPTETime.mHours = v10;
  v11 = (AUDeesser *)((char *)this + 832);
  v12 = (AUDeesser *)((char *)this + 128);
  Element = (const AudioStreamBasicDescription *)ausdk::AUScope::SafeGetElement((AUDeesser *)((char *)this + 128), 0);
  ausdk::AUBufferList::PrepareBuffer(v11, Element + 2, a5);
  v14 = (const AudioStreamBasicDescription *)ausdk::AUScope::SafeGetElement(v12, 0);
  ausdk::AUBufferList::PrepareBuffer((AUDeesser *)((char *)this + 864), v14 + 2, a5);
  BufferList = (unsigned int *)ausdk::AUBufferList::GetBufferList((AUDeesser *)((char *)this + 896));
  CopyBufferList(BufferList, a4);
  __C = 0.0;
  v15 = a5;
  vDSP_svesq((const float *)a4->mBuffers[0].mData, 1, &__C, a5);
  v16 = (float)a5;
  __C = __C / (float)a5;
  v17 = (const float **)((char *)this + 552);
  v18 = *((unsigned int *)this + 139);
  *(float *)(*((_QWORD *)this + 71) + 4 * v18) = __C;
  v19 = *((_DWORD *)this + 140);
  *((_DWORD *)this + 139) = ((int)v18 + 1) % v19;
  v20 = *((_DWORD *)this + 138);
  if (v20 < v19)
    *(_DWORD *)v17 = v20 + 1;
  v21 = SlidingRMSWindow::ComputeRMS(v17) + 1.0e-20;
  v22 = log10f(v21);
  AudioUnitProcess(*((AudioUnit *)this + 92), a2, &inTimeStamp, a5, a4);
  v23 = ausdk::AUBufferList::GetBufferList(v11);
  CopyBufferList(&a4->mNumberBuffers, (_DWORD *)v23);
  AUDeesser::ApplyAllpassFilter((AudioUnit *)this, a2, &inTimeStamp, (AudioBufferList *)v23, a4, 2u, 3, a5);
  CopyBufferList(&a4->mNumberBuffers, (_DWORD *)v23);
  AudioUnitProcess(*((AudioUnit *)this + 98), a2, &inTimeStamp, a5, a4);
  v24 = (_DWORD *)ausdk::AUBufferList::GetBufferList((AUDeesser *)((char *)this + 864));
  v25 = v24;
  if (*((_BYTE *)this + 648) || *((_BYTE *)this + 649))
  {
    if (*v24)
    {
      v26 = 0;
      v27 = (void **)(v24 + 4);
      do
      {
        bzero(*v27, *((unsigned int *)v27 - 1));
        ++v26;
        v27 += 2;
      }
      while (v26 < *v25);
    }
  }
  else
  {
    CopyBufferList(&a4->mNumberBuffers, v24);
  }
  v28 = v22 * 10.0;
  AudioUnitProcess(*((AudioUnit *)this + 99), a2, &inTimeStamp, a5, (AudioBufferList *)v23);
  __C = 0.0;
  vDSP_svesq(*(const float **)(v23 + 16), 1, &__C, a5);
  __C = __C / v16;
  v29 = (const float **)((char *)this + 584);
  v30 = *((unsigned int *)this + 147);
  *(float *)(*((_QWORD *)this + 75) + 4 * v30) = __C;
  v31 = *((_DWORD *)this + 148);
  *((_DWORD *)this + 147) = ((int)v30 + 1) % v31;
  v32 = *((_DWORD *)this + 146);
  if (v32 < v31)
    *(_DWORD *)v29 = v32 + 1;
  v33 = SlidingRMSWindow::ComputeRMS(v29) + 1.0e-20;
  v34 = log10f(v33) * 10.0;
  v35 = 0.0;
  v36 = v34 - v28;
  if (v28 >= -50.0 && v36 >= *((float *)this + 165))
  {
    if (!*((_DWORD *)this + 232))
      v34 = -0.0;
    v35 = *((float *)this + 163) + v34;
    v37 = 1;
  }
  else
  {
    v37 = 0;
  }
  AudioUnitSetParameter(*((AudioUnit *)this + 102), 1u, 0, 0, v35, 0);
  v38 = *((_QWORD *)this + 9);
  if (v38)
  {
    v39 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v38 + 32))(v38, 0);
  }
  else
  {
    v40 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v40)
      v39 = 0;
    else
      v39 = *v40;
  }
  ausdk::AUElement::SetParameter(v39, 0xDu, v36, 0);
  if (!*((_BYTE *)this + 648))
    AudioUnitProcess(*((AudioUnit *)this + 102), a2, &inTimeStamp, a5, (AudioBufferList *)v23);
  outValue = 0.0;
  AudioUnitGetParameter(*((AudioUnit *)this + 102), 0x3Eu, 0, 0, &outValue);
  v41 = *((_QWORD *)this + 9);
  if (v41)
  {
    v42 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v41 + 32))(v41, 0);
  }
  else
  {
    v43 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v43)
      v42 = 0;
    else
      v42 = *v43;
  }
  ausdk::AUElement::SetParameter(v42, 0xFu, outValue, 0);
  if (!*((_BYTE *)this + 648))
    v37 = *((_BYTE *)this + 649) == 0;
  v44 = *v25;
  if ((_DWORD)v44)
  {
    v45 = 0;
    v46 = 4;
    do
    {
      if (v37)
      {
        vDSP_vadd(*(const float **)(v23 + v46 * 4), 1, *(const float **)&v25[v46], 1, *(float **)&v25[v46], 1, a5);
        v44 = *v25;
      }
      ++v45;
      v46 += 4;
    }
    while (v45 < v44);
  }
  CopyBufferList(BufferList, a4);
  AudioUnitProcess(*((AudioUnit *)this + 93), a2, &inTimeStamp, a5, a4);
  CopyBufferList(&a4->mNumberBuffers, (_DWORD *)v23);
  AUDeesser::ApplyAllpassFilter((AudioUnit *)this, a2, &inTimeStamp, (AudioBufferList *)v23, a4, 4u, 5, a5);
  CopyBufferList(&a4->mNumberBuffers, (_DWORD *)v23);
  AudioUnitProcess(*((AudioUnit *)this + 100), a2, &inTimeStamp, a5, a4);
  __C = 0.0;
  vDSP_svesq((const float *)a4->mBuffers[0].mData, 1, &__C, a5);
  __C = __C / v16;
  v47 = (const float **)((char *)this + 616);
  v48 = *((unsigned int *)this + 155);
  *(float *)(*((_QWORD *)this + 79) + 4 * v48) = __C;
  v49 = *((_DWORD *)this + 156);
  *((_DWORD *)this + 155) = ((int)v48 + 1) % v49;
  v50 = *((_DWORD *)this + 154);
  if (v50 < v49)
    *(_DWORD *)v47 = v50 + 1;
  v51 = SlidingRMSWindow::ComputeRMS(v47) + 1.0e-20;
  v52 = log10f(v51) * 10.0;
  v53 = 0.0;
  v54 = v52 - v28;
  if (v28 >= -50.0 && v54 >= *((float *)this + 166))
  {
    if (!*((_DWORD *)this + 232))
      v52 = -0.0;
    v53 = *((float *)this + 164) + v52;
    v55 = 1;
  }
  else
  {
    v55 = 0;
  }
  AudioUnitSetParameter(*((AudioUnit *)this + 103), 1u, 0, 0, v53, 0);
  v56 = *((_QWORD *)this + 9);
  if (v56)
  {
    v57 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v56 + 32))(v56, 0);
  }
  else
  {
    v58 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v58)
      v57 = 0;
    else
      v57 = *v58;
  }
  ausdk::AUElement::SetParameter(v57, 0xEu, v54, 0);
  if (!*((_BYTE *)this + 649))
    AudioUnitProcess(*((AudioUnit *)this + 103), a2, &inTimeStamp, a5, a4);
  AudioUnitGetParameter(*((AudioUnit *)this + 103), 0x3Eu, 0, 0, &outValue);
  v59 = *((_QWORD *)this + 9);
  if (v59)
  {
    v60 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v59 + 32))(v59, 0);
  }
  else
  {
    v61 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v61)
      v60 = 0;
    else
      v60 = *v61;
  }
  ausdk::AUElement::SetParameter(v60, 0x10u, outValue, 0);
  if (!*((_BYTE *)this + 649))
    v55 = *((_BYTE *)this + 648) == 0;
  v62 = *v25;
  if ((_DWORD)v62)
  {
    v63 = 0;
    v64 = 4;
    do
    {
      if (v55)
      {
        vDSP_vadd(*(const float **)((char *)&a4->mNumberBuffers + v64 * 4), 1, *(const float **)&v25[v64], 1, *(float **)&v25[v64], 1, a5);
        v62 = *v25;
      }
      ++v63;
      v64 += 4;
    }
    while (v63 < v62);
  }
  AudioUnitProcess(*((AudioUnit *)this + 101), a2, &inTimeStamp, a5, (AudioBufferList *)v23);
  v65 = *v25;
  if ((_DWORD)v65)
  {
    v66 = 0;
    v67 = 4;
    do
    {
      if (!*((_BYTE *)this + 649) && !*((_BYTE *)this + 648))
      {
        vDSP_vadd(*(const float **)(v23 + v67 * 4), 1, *(const float **)&v25[v67], 1, *(float **)&v25[v67], 1, v15);
        v65 = *v25;
      }
      ++v66;
      v67 += 4;
    }
    while (v66 < v65);
  }
  return CopyBufferList(v25, a4);
}

void AUDeesser::ApplyAllpassFilter(AudioUnit *this, unsigned int *a2, const AudioTimeStamp *a3, AudioBufferList *a4, AudioBufferList *a5, unsigned int a6, int a7, UInt32 inNumberFrames)
{
  char *v14;
  unint64_t v15;
  uint64_t v16;

  v14 = (char *)(this + 92);
  AudioUnitProcess(this[a6 + 92], a2, a3, inNumberFrames, a5);
  AudioUnitProcess(*(AudioUnit *)&v14[8 * a7], a2, a3, inNumberFrames, a4);
  if (a5->mNumberBuffers)
  {
    v15 = 0;
    v16 = 16;
    do
    {
      vDSP_vadd(*(const float **)((char *)&a5->mNumberBuffers + v16), 1, *(const float **)((char *)&a4->mNumberBuffers + v16), 1, *(float **)((char *)&a5->mNumberBuffers + v16), 1, inNumberFrames);
      ++v15;
      v16 += 16;
    }
    while (v15 < a5->mNumberBuffers);
  }
}

uint64_t AUDeesser::BlockProcessClassFunc(AUDeesser *this, void *a2, unsigned int **a3, AudioBufferList **a4, AudioBufferList **a5)
{
  unsigned int v7;
  ausdk::AUBufferList *v9;
  const AudioStreamBasicDescription *Element;
  _DWORD *v11;
  int v12;
  unsigned int v14;

  v7 = a2;
  v9 = (AUDeesser *)((char *)this + 896);
  Element = (const AudioStreamBasicDescription *)ausdk::AUScope::SafeGetElement((AUDeesser *)((char *)this + 128), 0);
  v11 = (_DWORD *)ausdk::AUBufferList::PrepareBuffer(v9, Element + 2, v7);
  CopyBufferList(*a3, v11);
  v14 = 512;
  v12 = *((_DWORD *)this + 137);
  switch(v12)
  {
    case 4:
      AUDeesser::Crossover4Way(this, &v14, (const AudioTimeStamp *)((char *)this + 672), *a4, v7);
      break;
    case 3:
      AUDeesser::Crossover3Way(this, &v14, (const AudioTimeStamp *)((char *)this + 672), *a4, v7);
      break;
    case 2:
      AUDeesser::Crossover2Way(this, &v14, (const AudioTimeStamp *)((char *)this + 672), *a4, v7);
      break;
    default:
      CopyBufferList(*a3, *a4);
      break;
  }
  *((double *)this + 84) = *((double *)this + 84) + (double)v7;
  return 0;
}

void std::__optional_destruct_base<ausdk::AUBufferList,false>::reset[abi:ne180100](uint64_t a1)
{
  _QWORD *v2;

  if (*(_BYTE *)(a1 + 24))
  {
    v2 = *(_QWORD **)(a1 + 8);
    if (v2)
    {
      ((void (*)(int, _QWORD *))ausdk::BufferAllocator::instance(void)::global[3])((int)&ausdk::BufferAllocator::instance(void)::global, v2);
      *(_QWORD *)(a1 + 8) = 0;
    }
    *(_QWORD *)(a1 + 16) = 0;
    *(_DWORD *)a1 = 0;
    *(_BYTE *)(a1 + 24) = 0;
  }
}

double AUDeesser::InitializeUnderlyingAUs(AUDeesser *this)
{
  uint64_t Element;
  uint64_t v3;
  __int128 v4;
  OpaqueAudioComponentInstance *v5;
  double result;
  OpaqueAudioComponentInstance *v7;
  OpaqueAudioComponentInstance *v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;

  Element = ausdk::AUScope::SafeGetElement((AUDeesser *)((char *)this + 128), 0);
  v3 = 0;
  v4 = *(_OWORD *)(Element + 96);
  v12 = *(_OWORD *)(Element + 80);
  v13 = v4;
  v14 = *(_QWORD *)(Element + 112);
  while (1)
  {
    v5 = *(OpaqueAudioComponentInstance **)((char *)this + v3 + 736);
    if (v5)
    {
      v9 = v12;
      v10 = v13;
      v11 = v14;
      if (SetUpAudioUnit(v5, &v9, 0))
        break;
    }
    v3 += 8;
    if (v3 == 80)
    {
      v7 = (OpaqueAudioComponentInstance *)*((_QWORD *)this + 102);
      v9 = v12;
      v10 = v13;
      v11 = v14;
      if (!SetUpAudioUnit(v7, &v9, 1))
      {
        v8 = (OpaqueAudioComponentInstance *)*((_QWORD *)this + 103);
        v9 = v12;
        v10 = v13;
        v11 = v14;
        SetUpAudioUnit(v8, &v9, 1);
        result = 0.0;
        *((_OWORD *)this + 44) = 0u;
        *((_OWORD *)this + 45) = 0u;
        *((_OWORD *)this + 42) = 0u;
        *((_OWORD *)this + 43) = 0u;
        *((_DWORD *)this + 182) = 1;
      }
      return result;
    }
  }
  return result;
}

uint64_t SetUpAudioUnit(OpaqueAudioComponentInstance *a1, const void *a2, int a3)
{
  uint64_t result;
  unsigned int i;
  unsigned int j;
  int v9;
  UInt32 ioDataSize;
  unsigned int outData;
  int inData;

  inData = a3;
  result = AudioUnitUninitialize(a1);
  if (!(_DWORD)result)
  {
    result = AudioUnitSetProperty(a1, 8u, 1u, 0, a2, 0x28u);
    if (!(_DWORD)result)
    {
      result = AudioUnitSetProperty(a1, 8u, 2u, 0, a2, 0x28u);
      if (!(_DWORD)result)
      {
        if (!a3 || (result = AudioUnitSetProperty(a1, 0xE74u, 0, 0, &inData, 4u), !(_DWORD)result))
        {
          ioDataSize = 4;
          outData = 0;
          result = AudioUnitGetProperty(a1, 0xBu, 1u, 0, &outData, &ioDataSize);
          if (!(_DWORD)result)
          {
            if (outData)
            {
              for (i = 0; i < outData; ++i)
              {
                v9 = 0;
                AudioUnitSetProperty(a1, 0x33u, 1u, 0, &v9, 4u);
              }
            }
            ioDataSize = 4;
            outData = 0;
            result = AudioUnitGetProperty(a1, 0xBu, 2u, 0, &outData, &ioDataSize);
            if (!(_DWORD)result)
            {
              if (outData)
              {
                for (j = 0; j < outData; ++j)
                {
                  v9 = 0;
                  AudioUnitSetProperty(a1, 0x33u, 2u, 0, &v9, 4u);
                }
              }
              return AudioUnitInitialize(a1);
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t std::__optional_destruct_base<ausdk::AUBufferList,false>::~__optional_destruct_base[abi:ne180100](uint64_t a1)
{
  _QWORD *v2;

  if (*(_BYTE *)(a1 + 24))
  {
    v2 = *(_QWORD **)(a1 + 8);
    if (v2)
    {
      ((void (*)(int, _QWORD *))ausdk::BufferAllocator::instance(void)::global[3])((int)&ausdk::BufferAllocator::instance(void)::global, v2);
      *(_QWORD *)(a1 + 8) = 0;
    }
    *(_QWORD *)(a1 + 16) = 0;
    *(_DWORD *)a1 = 0;
  }
  return a1;
}

float learnrate_v4::getAdaptationRate4_v6(uint64_t a1)
{
  uint64_t v2;
  float *v3;
  uint64_t v4;
  int v5;
  int v6;
  int v7;
  uint64_t v8;
  float *v9;
  uint64_t v10;
  vDSP_Length v11;
  float result;
  float v13;
  float v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float v19;
  float v20;
  float v21;
  float v23;
  float v24;
  uint64_t v25;
  float *v26;
  _BYTE v27[4];
  float __B;
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  __B = 0.0;
  MEMORY[0x1E0C80A78](a1);
  v3 = (float *)&v27[-((v2 + 15) & 0x7FFFFFFF0)];
  MEMORY[0x1E0C80A78](v4);
  v9 = (float *)&v27[-v8];
  if (*(_DWORD *)(v10 + 148) == 1)
  {
    __B = *(float *)(a1 + 140) + *(float *)(a1 + 140);
    v11 = v5;
    vDSP_vsmul(*(const float **)(a1 + 64), 1, &__B, v3, 1, v5);
    __B = 9.0e-10;
    vDSP_vsadd(*(const float **)(a1 + 48), 1, &__B, v9, 1, v11);
    vDSP_vmin(v3, 1, v9, 1, v3, 1, v11);
    __B = 0.35;
    vDSP_vsmul(v3, 1, &__B, v3, 1, v11);
    __B = *(float *)(a1 + 144) * 0.3;
    vDSP_vsmul(v9, 1, &__B, *(float **)(a1 + 112), 1, v11);
    vDSP_vadd(v3, 1, *(const float **)(a1 + 112), 1, v3, 1, v11);
    vDSP_vdiv(v9, 1, v3, 1, *(float **)(a1 + 112), 1, v11);
  }
  else
  {
    v13 = (float)(v5 - 1);
    if (v7)
    {
      v14 = *(float *)(a1 + 4);
      v15 = (float)(v13 * 2000.0) * 9.3132e-10;
      result = 0.0;
      if (v14 > v15)
      {
        v16 = v14 * 0.25;
        __B = v16;
        v17 = *(float *)(a1 + 32);
        if (v16 > (float)(v17 * 0.25))
        {
          __B = v17 * 0.25;
          v16 = v17 * 0.25;
        }
        result = v16 / v17;
      }
    }
    else
    {
      v18 = (float)(v13 * 1000.0) * 9.3132e-10;
      result = 0.0;
      if (*(float *)(a1 + 376) > v18)
      {
        if (!v6)
          ++*(_DWORD *)(a1 + 380);
        v19 = *(float *)(a1 + 336);
        v20 = *(float *)(a1 + 340);
        result = 0.25;
        if (v19 > v20)
        {
          v21 = *(float *)(a1 + 320);
          if (v21 > v19 || v21 < v20)
          {
            if (v21 <= v19)
              result = *(float *)(a1 + 348);
            else
              result = *(float *)(a1 + 344);
          }
          else
          {
            result = *(float *)(a1 + 348)
                   + (float)((float)((float)(v21 - v20) / (float)(v19 - v20))
                           * (float)(*(float *)(a1 + 344) - *(float *)(a1 + 348)));
          }
          v23 = 0.25;
          if (result >= 0.25)
            v23 = result;
          if (*(_DWORD *)(a1 + 380) <= *(_DWORD *)(a1 + 384))
            result = v23;
        }
      }
    }
    v24 = fminf(result * 2.5, 1.0);
    if (v6 == 2)
      result = v24;
    if (v5 >= 1)
    {
      v25 = v5;
      v26 = *(float **)(a1 + 112);
      do
      {
        *v26++ = result;
        --v25;
      }
      while (v25);
    }
    if (!v6)
    {
      result = result + *(float *)(a1 + 152);
      *(float *)(a1 + 152) = result;
    }
  }
  return result;
}

void learnrate_v4::updateStatistics_echo(int a1, const float *a2, const float *__A, float *a4)
{
  vDSP_Length v8;
  float v9;
  float v10;

  v8 = a1;
  vDSP_svesq(__A, 1, a4 + 6, a1);
  vDSP_svesq(a2, 1, a4 + 8, v8);
  v9 = a4[8];
  a4[9] = v9;
  a4[10] = v9;
  v10 = (float)((float)(2 * a1) * 100.0) * 9.3132e-10;
  if (v9 < v10)
    a4[8] = v10;
  vDSP_dotpr(a2, 1, __A, 1, a4 + 5, v8);
}

void learnrate_v4::adaptLmsFilter_v4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  int *v5;
  int *v6;
  uint64_t v7;
  uint64_t v8;
  _DWORD *v9;
  _DWORD *v10;
  const float *v11;
  const float *v12;
  const float *v13;
  const float *v14;
  vDSP_Length v15;
  vDSP_Length v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  float *v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  float *v25;
  uint64_t v26;
  float *v27;
  vDSP_Length v28;
  uint64_t v29;
  uint64_t v30;
  vDSP_Length v31;
  uint64_t v32;
  uint64_t v33;
  _DWORD *v34;
  _DWORD *v35;
  uint64_t v36;
  uint64_t v37;
  float *v38;
  uint64_t v39;
  int v40;
  vDSP_Length v41;
  float *v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  uint64_t v46;
  vDSP_Length v47;
  float *v48;
  float *v49;
  int v50;
  const float *v51;
  const float *v52;
  const float *v53;
  const float *v54;
  uint64_t v55;
  uint64_t v56;
  float *v57;
  float v58;
  float v59;
  uint64_t v60;
  uint64_t v61;
  int v62;
  uint64_t v63;
  float *v64;
  _DWORD *v65;
  uint64_t v66;
  float *v67;
  uint64_t v68;
  size_t v69;
  vDSP_Length v70;
  int v71;
  uint64_t v72;
  float *v73;
  float *v74;
  int v75;
  uint64_t v76;
  float *v77;
  float *v78;
  float v79;
  MultiRadixRealFFT *v80;
  float v81;
  float *v82;
  float *v83;
  uint64_t v84;
  float *v85;
  int v86;
  float v87;
  MultiRadixRealFFT *v88;
  vDSP_Length __N;
  float *v90;
  float *v91;
  uint64_t v92;
  uint64_t v93;
  _DWORD *v94;
  _DWORD *v95;
  uint64_t v96;
  _DWORD *v97;
  uint64_t v98;
  vDSP_Length v99;
  int v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  int v107;
  int v108;
  int v109;
  uint64_t v110;
  float *v111;
  uint64_t v112;
  float *__C;
  float *__Ca;
  uint64_t v115;
  uint64_t v116;
  vDSP_Length v117;
  vDSP_Length v118;
  uint64_t v119;
  uint64_t v120;
  float *v121;
  float *v122;
  float *v123;
  float *v124;
  _QWORD *v125;
  uint64_t v126;
  int *v127;
  uint64_t v128;
  float *v129;
  float *v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  int v135;
  float *__Da;
  float *__D;
  float *v138;
  float *v139;
  float *v140;
  float *v141;
  float __A;
  float __B;
  DSPSplitComplex v144;
  _DWORD v145[64];
  _DWORD v146[64];
  float __E[1024];
  float v148[1024];
  float v149[1025];
  uint64_t v150;

  MEMORY[0x1E0C80A78](a1);
  v2 = v1;
  v4 = v3;
  v6 = v5;
  v8 = v7;
  v10 = v9;
  v12 = v11;
  v14 = v13;
  v150 = *MEMORY[0x1E0C80C00];
  v15 = v5[4];
  v16 = v5[10];
  v105 = v5[11];
  v17 = v9[23];
  v99 = (int)v9[9];
  v103 = v5[15];
  v18 = v9[19];
  v19 = (int)v9[18];
  *(_DWORD *)(v7 + 72) = v19;
  *(_DWORD *)(v7 + 76) = v18;
  v109 = v18;
  __A = 0.0;
  vDSP_vmul(*(const float **)(v2 + 96), 1, *(const float **)(v2 + 112), 1, *(float **)(v2 + 112), 1, v16);
  v90 = (float *)v14;
  vDSP_vmul(*(const float **)(v2 + 112), 1, v14, 1, v149, 1, v15);
  v91 = (float *)v12;
  vDSP_vmul(*(const float **)(v2 + 112), 1, v12, 1, v148, 1, v15);
  v20 = *(float **)v8;
  v104 = v17;
  v127 = v6;
  if ((int)v17 >= 1)
  {
    v21 = v105;
    v92 = v8;
    v93 = (v109 + 1) * (int)v15;
    v102 = 4 * v99;
    v22 = 4 * v15;
    __N = (v19 * v15);
    v23 = (int)__N;
    v24 = *(_QWORD *)(v2 + 104);
    v26 = v4[2];
    v25 = (float *)v4[3];
    v27 = *(float **)(v8 + 8);
    v121 = *(float **)(v8 + 16);
    v123 = *(float **)(v8 + 24);
    v28 = *(_QWORD *)v10;
    v29 = *((_QWORD *)v10 + 1);
    v100 = v109 + 1 - v19;
    v101 = 4 * v105;
    v95 = &v145[v19];
    v96 = 4 * v19;
    v30 = v24 + 4 * v19;
    v94 = &v146[v19];
    v31 = v99;
    v107 = v19;
    v32 = 0;
    v134 = 4 * v15;
    v125 = v4;
    v97 = v10;
    v98 = v2;
    do
    {
      v117 = v28;
      v119 = v29;
      v115 = v30;
      if (*(_BYTE *)(v4[16] + v32))
      {
        __C = v27;
        if (v21 >= 1)
        {
          v33 = 0;
          v34 = v145;
          v35 = v146;
          v36 = v105;
          do
          {
            *v35++ = *(_DWORD *)(v28 + v33);
            *v34++ = *(_DWORD *)(v29 + v33);
            v33 += v22;
            --v36;
          }
          while (v36);
        }
        v106 = v32;
        if (v10[17] == 1)
        {
          __A = 0.0;
          if ((int)__N >= 1)
          {
            v37 = v24;
            v38 = v25;
            v39 = v26;
            vDSP_vfill(&__A, v20, 1, __N);
            vDSP_vfill(&__A, __C, 1, __N);
            vDSP_vfill(&__A, v121, 1, __N);
            vDSP_vfill(&__A, v123, 1, __N);
            v26 = v39;
            v25 = v38;
            v24 = v37;
            v23 = (int)__N;
            v22 = 4 * v15;
          }
          v40 = *(_DWORD *)(v92 + 36);
          v41 = (v40 - v93);
          if ((int)v41 >= 1)
          {
            v131 = v24;
            v42 = v25;
            v43 = v26;
            vDSP_vfill(&__A, &v20[v93], 1, (v40 - v93));
            vDSP_vfill(&__A, &__C[v93], 1, v41);
            vDSP_vfill(&__A, &v121[v93], 1, v41);
            vDSP_vfill(&__A, &v123[v93], 1, v41);
            v26 = v43;
            v25 = v42;
            v24 = v131;
            v23 = (int)__N;
            v22 = 4 * v15;
          }
        }
        v111 = v20;
        if (v107 <= v109)
        {
          v44 = v96;
          v45 = v100;
          v47 = v117;
          v46 = v119;
          v48 = v20;
          v49 = __C;
          v129 = v25;
          v132 = v24;
          v128 = v26;
          do
          {
            __A = *(float *)(v24 + v44);
            v50 = *(_DWORD *)(v4[11] + v44) * v15;
            v51 = (const float *)(v47 + v23 * 4);
            v140 = (float *)(v46 + v23 * 4);
            __Da = &v48[v23];
            v138 = &v49[v23];
            v52 = (const float *)(v26 + 4 * v50);
            v53 = &v25[v50];
            vDSP_vmma(v149, 1, v52, 1, v148, 1, v53, 1, __E, 1, v15);
            vDSP_vsma(__E, 1, &__A, v51, 1, __Da, 1, v15);
            v54 = v52;
            v4 = v125;
            vDSP_vmmsb(v148, 1, v54, 1, v149, 1, v53, 1, __E, 1, v15);
            vDSP_vsma(__E, 1, &__A, v140, 1, v138, 1, v15);
            v26 = v128;
            v25 = v129;
            v24 = v132;
            v23 = (int)__N;
            v22 = 4 * v15;
            v49 = (float *)((char *)v49 + v134);
            v48 = (float *)((char *)v48 + v134);
            v46 += v134;
            v47 += v134;
            v44 += 4;
            --v45;
          }
          while (v45);
        }
        v32 = v106;
        v20 = v111;
        v27 = __C;
        v10 = v97;
        v21 = v105;
        v31 = v99;
        v55 = v115;
        if (v107 <= v109)
        {
          v56 = 0;
          v57 = *(float **)(v98 + 112);
          v58 = *v90 * *v57;
          v59 = *v91 * v57[v15];
          v60 = v4[11] + v96;
          v61 = v23 * 4;
          do
          {
            v62 = *(_DWORD *)(v60 + 4 * v56) * v15;
            *(float *)((char *)v111 + v61) = *(float *)&v94[v56]
                                           + (float)((float)(v58 * *(float *)(v115 + 4 * v56))
                                                   * *(float *)(v26 + 4 * v62));
            *(float *)((char *)__C + v61) = *(float *)&v95[v56]
                                          + (float)((float)(v59 * *(float *)(v115 + 4 * v56)) * v25[v62]);
            v61 += v22;
            ++v56;
          }
          while (v100 != (_DWORD)v56);
        }
      }
      else
      {
        v63 = v24;
        v64 = v25;
        v65 = v10;
        v66 = v26;
        vDSP_vclr(v20, 1, v31);
        vDSP_vclr(v27, 1, v31);
        v55 = v115;
        v26 = v66;
        v10 = v65;
        v21 = v105;
        v25 = v64;
        v24 = v63;
        v23 = (int)__N;
        v22 = 4 * v15;
      }
      v121 += v31;
      v123 += v31;
      v20 = (float *)((char *)v20 + v102);
      v27 = (float *)((char *)v27 + v102);
      ++v32;
      v29 = v119 + v102;
      v28 = v117 + v102;
      v24 += v101;
      v30 = v55 + v101;
      v26 += 4 * v103;
      v25 += v103;
    }
    while (v32 != v104);
    v8 = v92;
    v20 = *(float **)v92;
    v6 = v127;
  }
  v135 = *v6;
  v116 = v4[16];
  v118 = *(int *)(v8 + 36);
  v110 = *(int *)(v8 + 72);
  v108 = *(_DWORD *)(v8 + 76);
  v141 = *(float **)(v8 + 16);
  __D = *(float **)(v8 + 8);
  v139 = *(float **)(v8 + 24);
  v67 = (float *)*(unsigned int *)(v8 + 92);
  vDSP_vclr(*(float **)(v8 + 48), 1, *(int *)(v8 + 88));
  __Ca = v67;
  if ((int)v67 >= 1)
  {
    v68 = 0;
    v130 = *(float **)(v8 + 48);
    v133 = v135 >> 1;
    v69 = 4 * v133;
    v70 = (uint64_t)v135 >> 2;
    if (v135 >> 1 <= 2)
      v71 = 2;
    else
      v71 = v135 >> 1;
    v126 = ((v71 - 1) >> 1) + 1;
    v72 = (int)v110 * (uint64_t)(v135 >> 1);
    v124 = &v141[v72];
    v112 = 4 * v118;
    v122 = &v139[v72];
    do
    {
      v120 = v68;
      if (*(_BYTE *)(v116 + v68))
      {
        if ((int)v110 <= v108)
        {
          v74 = v122;
          v73 = v124;
          v75 = ~(_DWORD)v110;
          v76 = v110;
          do
          {
            v77 = &v141[v76 * v133];
            v78 = &v139[v76 * v133];
            v144.realp = v77;
            v144.imagp = v78;
            memcpy(v77, &v20[v76 * v133], v69);
            memcpy(v78, &__D[v76 * v133], v69);
            v80 = (MultiRadixRealFFT *)*((_QWORD *)v127 + 1);
            if (v80)
              MultiRadixRealFFT::RealInPlaceTransform(v80, &v144, -1, v79);
            __B = *((float *)v127 + 22) * *((float *)v127 + 21);
            vDSP_vsmul(v77, 1, &__B, v77, 1, v70);
            vDSP_vsmul(v78, 1, &__B, v78, 1, v70);
            vDSP_vclr(&v77[v70], 1, v70);
            vDSP_vclr(&v78[v70], 1, v70);
            if (v135 >= 2)
            {
              v82 = &v130[(v135 >> 1) * (v127[11] + v75)];
              v83 = v74;
              v84 = v126;
              v85 = v73;
              do
              {
                v86 = *(_DWORD *)v85++;
                *(_DWORD *)v82 = v86;
                v87 = *v83++;
                v81 = v87;
                v82[1] = v87;
                v82 += 2;
                --v84;
              }
              while (v84);
            }
            v88 = (MultiRadixRealFFT *)*((_QWORD *)v127 + 1);
            if (v88)
              MultiRadixRealFFT::RealInPlaceTransform(v88, &v144, 1, v81);
            ++v76;
            v73 = (float *)((char *)v73 + v69);
            --v75;
            v74 = (float *)((char *)v74 + v69);
          }
          while (v108 + 1 != (_DWORD)v76);
        }
      }
      else
      {
        vDSP_vclr(v141, 1, v118);
        vDSP_vclr(v139, 1, v118);
        vDSP_vclr(v130, 1, v118);
      }
      v20 += v118;
      __D += v118;
      v130 = (float *)((char *)v130 + v112);
      v68 = v120 + 1;
      v141 += v118;
      v124 = (float *)((char *)v124 + v112);
      v122 = (float *)((char *)v122 + v112);
      v139 += v118;
    }
    while ((float *)(v120 + 1) != __Ca);
  }
}

void AULowFlow::~AULowFlow(id *this)
{

  AUDspLib::~AUDspLib((AUDspLib *)this);
}

{

  AUDspLib::~AUDspLib((AUDspLib *)this);
  JUMPOUT(0x1BCC95CECLL);
}

uint64_t AULowFlow::Initialize(AULowFlow *this)
{
  uint64_t v2;

  v2 = AUDspLib::Initialize(this);
  if (!(_DWORD)v2 && *((_QWORD *)this + 272))
    AULowFlow::setModelParameters(this);
  return v2;
}

uint64_t AULowFlow::GetPropertyInfo(AULowFlow *this, int a2, unsigned int a3, unsigned int a4, unsigned int *a5, BOOL *a6)
{
  uint64_t result;

  if (a2 != 6620)
    return AUDspLib::GetPropertyInfo(this, a2, a3, a4, a5, a6);
  if (a3)
    return 4294956430;
  result = 0;
  *a5 = 8;
  *a6 = 1;
  return result;
}

uint64_t AULowFlow::GetProperty(AULowFlow *this, int a2, unsigned int a3, unsigned int a4, CFDictionaryRef *a5, int *a6)
{
  uint64_t result;
  void *v8;
  const __CFDictionary *v9;

  if (a2 != 6620)
    return AUDspLib::GetProperty(this, a2, a3, a4, a5, a6);
  if (a3)
    return 4294956430;
  v8 = (void *)*((_QWORD *)this + 272);
  if (!v8)
    return 4294956433;
  v9 = v8;
  result = 0;
  *a5 = v9;
  return result;
}

uint64_t AULowFlow::SetProperty(id *this, int a2, int a3, unsigned int a4, int *a5, void *a6, int *a7)
{
  uint64_t v8;
  void *v10;
  char v11;
  uint64_t v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  id v17;
  BOOL v18;
  id v19;
  id v20;
  unint64_t v21;
  void *v22;
  void *v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t i;
  char v28;
  BOOL v29;
  id obj;
  void *v31;
  void *v32;
  NSMutableDictionary *v33;
  void *v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  _QWORD v39[8];
  _BYTE v40[128];
  uint64_t v41;

  v41 = *MEMORY[0x1E0C80C00];
  if (a2 != 6620)
    return AUDspLib::SetProperty((AUDspLib *)this, a2, a3, a4, a5, a6, a7);
  if (!a3)
  {
    if ((_DWORD)a6 != 8)
      return 4294956445;
    applesauce::dispatch::v1::queue::get(*(id *)a5);
    v32 = (void *)objc_claimAutoreleasedReturnValue();
    obj = (id)objc_msgSend(v32, "mutableCopy");
    v33 = (NSMutableDictionary *)obj;
    -[NSMutableDictionary objectForKeyedSubscript:](v33, "objectForKeyedSubscript:", CFSTR("Name"));
    v31 = (void *)objc_claimAutoreleasedReturnValue();
    if (v31
      || (-[NSMutableDictionary objectForKeyedSubscript:](v33, "objectForKeyedSubscript:", CFSTR("AcousticID")),
          v10 = (void *)objc_claimAutoreleasedReturnValue(),
          v10,
          v10))
    {
      -[NSMutableDictionary objectForKeyedSubscript:](v33, "objectForKeyedSubscript:", CFSTR("ChannelData"));
      v34 = (void *)objc_claimAutoreleasedReturnValue();
      if (v34 && objc_msgSend(v34, "count") == 2)
      {
        v11 = 0;
        v12 = 0;
        while (1)
        {
          objc_msgSend(v34, "objectAtIndexedSubscript:", v12);
          v13 = (void *)objc_claimAutoreleasedReturnValue();
          v14 = v13;
          if (!v13)
            break;
          objc_msgSend(v13, "objectForKeyedSubscript:", CFSTR("AnalogGain"));
          v15 = (void *)objc_claimAutoreleasedReturnValue();
          if (!v15)
          {

            break;
          }
          objc_msgSend(v14, "objectForKeyedSubscript:", CFSTR("PressureResponse"));
          v16 = (void *)objc_claimAutoreleasedReturnValue();
          if (v16)
          {
            objc_opt_class();
            if ((objc_opt_isKindOfClass() & 1) != 0)
            {
              v17 = v16;
              v18 = objc_msgSend(v17, "length") == 4096;

              if (v18)
                goto LABEL_16;
            }
            else
            {
              objc_opt_class();
              if ((objc_opt_isKindOfClass() & 1) != 0)
              {
                v19 = v16;
                if (objc_msgSend(v19, "count") != 1024)
                  goto LABEL_33;
                v37 = 0u;
                v38 = 0u;
                v35 = 0u;
                v36 = 0u;
                v20 = v19;
                v25 = objc_msgSend(v20, "countByEnumeratingWithState:objects:count:", &v35, v40, 16);
                if (v25)
                {
                  v26 = *(_QWORD *)v36;
                  while (2)
                  {
                    for (i = 0; i != v25; ++i)
                    {
                      if (*(_QWORD *)v36 != v26)
                        objc_enumerationMutation(v20);
                      objc_opt_class();
                      if ((objc_opt_isKindOfClass() & 1) == 0)
                      {
                        v24 = 1;
                        v19 = v20;
                        goto LABEL_36;
                      }
                    }
                    v25 = objc_msgSend(v20, "countByEnumeratingWithState:objects:count:", &v35, v40, 16);
                    if (v25)
                      continue;
                    break;
                  }
                }

LABEL_16:
                objc_msgSend(v14, "objectForKeyedSubscript:", CFSTR("ThieleSmall"));
                v19 = (id)objc_claimAutoreleasedReturnValue();
                if (v19)
                {
                  v39[0] = CFSTR("Bl");
                  v39[1] = CFSTR("Reb");
                  v39[2] = CFSTR("Mms");
                  v39[3] = CFSTR("MmsFrontPort");
                  v39[4] = CFSTR("Rms");
                  v39[5] = CFSTR("RmsFrontPort");
                  v39[6] = CFSTR("Kms");
                  v39[7] = CFSTR("KmsFrontPort");
                  objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v39, 8);
                  v20 = (id)objc_claimAutoreleasedReturnValue();
                  v21 = 0;
                  while (objc_msgSend(v20, "count") > v21)
                  {
                    objc_msgSend(v20, "objectAtIndexedSubscript:", v21);
                    v22 = (void *)objc_claimAutoreleasedReturnValue();
                    objc_msgSend(v19, "objectForKeyedSubscript:", v22);
                    v23 = (void *)objc_claimAutoreleasedReturnValue();

                    ++v21;
                    if (!v23)
                    {
                      v24 = 1;
                      goto LABEL_36;
                    }
                  }
                  v24 = 0;
LABEL_36:

                }
                else
                {
LABEL_33:
                  v24 = 1;
                }

                goto LABEL_38;
              }
            }
          }
          v24 = 1;
LABEL_38:

          v28 = (v24 != 0) | v11;
          v11 = 1;
          v12 = 1;
          if ((v28 & 1) != 0)
          {
            v29 = v24 == 0;
            if (v29)
              v8 = 0;
            else
              v8 = 4294956445;

            if (v29)
            {
              updateModelParametersDictionary(v33);
              objc_storeStrong(this + 272, obj);
              if (*((_BYTE *)this + 17))
                AULowFlow::setModelParameters((AULowFlow *)this);
              v8 = 0;
            }
            goto LABEL_51;
          }
        }
      }

    }
    else
    {

    }
    v8 = 4294956445;
LABEL_51:

    return v8;
  }
  return 4294956430;
}

void sub_1B63A8BB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, void *a13)
{

  _Unwind_Resume(a1);
}

uint64_t AULowFlow::SetParameter(AULowFlow *this, unsigned int a2, unsigned int a3, uint64_t a4, float a5)
{
  uint64_t result;
  unsigned int v9;

  result = AUDspLib::SetParameter(this, a2, a3, a4, a5);
  v9 = *((_DWORD *)this + 439) - 1;
  if (v9 >= a2)
    v9 = a2;
  if (*(_DWORD *)(*((_QWORD *)this + 211) + 4 * v9) == 4)
    *((float *)this + 542) = a5;
  return result;
}

uint64_t AULowFlow::RestoreState(OpaqueAudioComponentInstance **this, const void *a2)
{
  unsigned int v3;
  uint64_t result;

  v3 = AUDspLib::RestoreState(this, a2);
  LODWORD(result) = (*((uint64_t (**)(OpaqueAudioComponentInstance **, uint64_t, _QWORD, _QWORD, _QWORD, float))*this
                     + 19))(this, 4, 0, 0, 0, *((float *)this + 542));
  if ((_DWORD)result)
    return result;
  else
    return v3;
}

uint64_t AULowFlow::SupportedNumChannels(AULowFlow *this, const AUChannelInfo **a2)
{
  if (a2)
    *a2 = (const AUChannelInfo *)&AULowFlow::SupportedNumChannels(AUChannelInfo const**)::sChannels;
  return 2;
}

uint64_t AULowFlow::Version(AULowFlow *this)
{
  return 197888;
}

DspLib::LowFlow::Algorithm *AULowFlow::newDspLibAlgorithm(AULowFlow *this, int a2)
{
  DspLib::LowFlow::Algorithm *v2;

  if (a2 != 4 && a2 != 2)
    return 0;
  v2 = (DspLib::LowFlow::Algorithm *)operator new();
  DspLib::LowFlow::Algorithm::Algorithm(v2);
  return v2;
}

void sub_1B63A8DB8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1BCC95CEC](v1, 0x10E1C4019F2F9D0);
  _Unwind_Resume(a1);
}

void updateModelParametersDictionary(NSMutableDictionary *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  unsigned int v6;
  void *v7;
  void *v8;
  uint64_t v9;
  double v10;
  uint64_t v11;
  char *v12;
  unsigned int i;
  void *v14;
  int v15;
  uint64_t v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  uint64_t v24;
  double v25;
  uint64_t v26;
  char *v27;
  unsigned int j;
  void *v29;
  int v30;
  void *v31;
  void *v32;
  uint64_t v33;
  id v34;
  id v35;
  NSMutableDictionary *v36;
  uint64_t *v37;
  id v38;
  void *v39;
  uint64_t v40;

  v40 = *MEMORY[0x1E0C80C00];
  v36 = a1;
  -[NSMutableDictionary objectForKeyedSubscript:](v36, "objectForKeyedSubscript:", CFSTR("AcousticID"));
  v34 = (id)objc_claimAutoreleasedReturnValue();
  if (v34)
  {
    -[NSMutableDictionary removeObjectForKey:](v36, "removeObjectForKey:", CFSTR("AcousticID"));
    -[NSMutableDictionary objectForKeyedSubscript:](v36, "objectForKeyedSubscript:", CFSTR("Name"));
    v1 = (void *)objc_claimAutoreleasedReturnValue();
    if (!v1)
    {
      objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("Acoustic ID: %@"), v34);
      v2 = (void *)objc_claimAutoreleasedReturnValue();
      -[NSMutableDictionary setObject:forKeyedSubscript:](v36, "setObject:forKeyedSubscript:", v2, CFSTR("Name"));

    }
  }
  -[NSMutableDictionary objectForKeyedSubscript:](v36, "objectForKeyedSubscript:", CFSTR("ChannelData"));
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "objectAtIndexedSubscript:", 0);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "objectForKeyedSubscript:", CFSTR("PressureResponse"));
  v35 = (id)objc_claimAutoreleasedReturnValue();

  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
  {
    -[NSMutableDictionary objectForKeyedSubscript:](v36, "objectForKeyedSubscript:", CFSTR("ChannelData"));
    v38 = (id)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0C99DE8], "array");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    v6 = 0;
    v39 = v5;
    while (objc_msgSend(v38, "count") > (unint64_t)v6)
    {
      objc_msgSend(v38, "objectAtIndexedSubscript:", v6);
      v7 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v7, "objectForKeyedSubscript:", CFSTR("PressureResponse"));
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      v9 = objc_msgSend(v8, "count");
      v37 = &v33;
      v10 = MEMORY[0x1E0C80A78](v9);
      v12 = (char *)&v33 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
      for (i = 0; objc_msgSend(v8, "count", v10) > (unint64_t)i; ++i)
      {
        objc_msgSend(v8, "objectAtIndexedSubscript:", i);
        v14 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v14, "floatValue");
        *(_DWORD *)&v12[4 * i] = v15;

      }
      v16 = objc_msgSend(v8, "count");
      objc_msgSend(MEMORY[0x1E0C99D50], "dataWithBytes:length:", v12, 4 * v16);
      v17 = (void *)objc_claimAutoreleasedReturnValue();
      v18 = (void *)MEMORY[0x1E0C99E08];
      objc_msgSend(v7, "objectForKeyedSubscript:", CFSTR("AnalogGain"));
      v19 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v7, "objectForKeyedSubscript:", CFSTR("ThieleSmall"));
      v20 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v18, "dictionaryWithObjectsAndKeys:", v19, CFSTR("AnalogGain"), v17, CFSTR("PressureResponse"), v20, CFSTR("ThieleSmall"), 0);
      v21 = (void *)objc_claimAutoreleasedReturnValue();

      objc_msgSend(v7, "objectForKeyedSubscript:", CFSTR("TweeterResponse"));
      v22 = (void *)objc_claimAutoreleasedReturnValue();
      v23 = v39;
      if (v22)
      {
        v24 = objc_msgSend(v22, "count");
        v25 = MEMORY[0x1E0C80A78](v24);
        v27 = (char *)&v33 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
        for (j = 0; objc_msgSend(v22, "count", v25) > (unint64_t)j; ++j)
        {
          objc_msgSend(v22, "objectAtIndexedSubscript:", j);
          v29 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v29, "floatValue");
          *(_DWORD *)&v27[4 * j] = v30;

        }
        objc_msgSend(MEMORY[0x1E0C99D50], "dataWithBytes:length:", v27, 4 * objc_msgSend(v22, "count"));
        v31 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v7, "objectForKeyedSubscript:", CFSTR("TweeterGain"));
        v32 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v21, "setValue:forKey:", v32, CFSTR("TweeterGain"));

        objc_msgSend(v21, "setValue:forKey:", v31, CFSTR("TweeterResponse"));
        v23 = v39;
      }
      objc_msgSend(v23, "addObject:", v21);

      ++v6;
      v5 = v39;
    }
    -[NSMutableDictionary setObject:forKeyedSubscript:](v36, "setObject:forKeyedSubscript:", v5, CFSTR("ChannelData"));

  }
}

void sub_1B63A9234(_Unwind_Exception *a1)
{
  void *v1;
  uint64_t v2;

  _Unwind_Resume(a1);
}

void AULowFlow::setModelParameters(AULowFlow *this)
{
  uint64_t v1;
  double v2;
  uint64_t v3;
  _DWORD *v4;
  char *v5;
  int *v6;
  uint64_t v7;
  BOOL v8;
  int v9;
  char v10;
  char v11;
  void *v12;
  void *v13;
  void *v14;
  int v15;
  void *v16;
  int v17;
  void *v18;
  int v19;
  void *v20;
  int v21;
  void *v22;
  int v23;
  void *v24;
  int v25;
  void *v26;
  int v27;
  void *v28;
  int v29;
  void *v30;
  int v31;
  void *v32;
  void *v33;
  int v34;
  void *v35;
  void *v36;
  uint64_t *v37;
  uint64_t v38;
  unsigned int *v39;
  unint64_t v40;
  uint64_t *v41;
  int v42;
  char *v43;
  int *v44;
  void *v45;
  int v46;
  char v47;
  _BYTE v48[8192];
  _DWORD v49[20];

  v2 = MEMORY[0x1E0C80A78](this);
  v3 = v1;
  v4 = *(_DWORD **)(v1 + 2144);
  if (v4 == *(_DWORD **)(v1 + 2152))
  {
    v5 = 0;
    v6 = 0;
  }
  else
  {
    if (*v4 == 4)
      v5 = &v47;
    else
      v5 = 0;
    if (*v4 == 4)
      v6 = &v46;
    else
      v6 = 0;
  }
  v46 = 0;
  objc_msgSend(*(id *)(v1 + 2176), "objectForKeyedSubscript:", CFSTR("ChannelData"), v2);
  v45 = (void *)objc_claimAutoreleasedReturnValue();
  if (objc_msgSend(v45, "count") == 2)
  {
    v7 = 0;
    v43 = v5;
    v44 = v6;
    if (v5)
      v8 = v6 == 0;
    else
      v8 = 1;
    v9 = !v8;
    v10 = 1;
    do
    {
      v11 = v10;
      objc_msgSend(v45, "objectAtIndexedSubscript:", v7, v43);
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v12, "objectForKeyedSubscript:", CFSTR("ThieleSmall"));
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v12, "objectForKeyedSubscript:", CFSTR("AnalogGain"));
      v14 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v14, "floatValue");
      v49[9 * v7] = v15;

      objc_msgSend(v13, "objectForKeyedSubscript:", CFSTR("Bl"));
      v16 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v16, "floatValue");
      v49[9 * v7 + 1] = v17;

      objc_msgSend(v13, "objectForKeyedSubscript:", CFSTR("Reb"));
      v18 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v18, "floatValue");
      v49[9 * v7 + 2] = v19;

      objc_msgSend(v13, "objectForKeyedSubscript:", CFSTR("Mms"));
      v20 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v20, "floatValue");
      v49[9 * v7 + 3] = v21;

      objc_msgSend(v13, "objectForKeyedSubscript:", CFSTR("MmsFrontPort"));
      v22 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v22, "floatValue");
      v49[9 * v7 + 4] = v23;

      objc_msgSend(v13, "objectForKeyedSubscript:", CFSTR("Rms"));
      v24 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v24, "floatValue");
      v49[9 * v7 + 5] = v25;

      objc_msgSend(v13, "objectForKeyedSubscript:", CFSTR("RmsFrontPort"));
      v26 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v26, "floatValue");
      v49[9 * v7 + 6] = v27;

      objc_msgSend(v13, "objectForKeyedSubscript:", CFSTR("Kms"));
      v28 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v28, "floatValue");
      v49[9 * v7 + 7] = v29;

      objc_msgSend(v13, "objectForKeyedSubscript:", CFSTR("KmsFrontPort"));
      v30 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v30, "floatValue");
      v49[9 * v7 + 8] = v31;

      objc_msgSend(v12, "objectForKeyedSubscript:", CFSTR("PressureResponse"));
      v32 = (void *)objc_claimAutoreleasedReturnValue();
      if (objc_msgSend(v32, "length") != 4096)
        goto LABEL_33;
      objc_msgSend(v32, "getBytes:length:", &v48[4096 * v7], 4096);
      if (v9)
      {
        objc_msgSend(v12, "objectForKeyedSubscript:", CFSTR("TweeterGain"));
        v33 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v33, "floatValue");
        *v44 = v34;

        objc_msgSend(v12, "objectForKeyedSubscript:", CFSTR("TweeterResponse"));
        v35 = (void *)objc_claimAutoreleasedReturnValue();
        v36 = v35;
        if (!v35 || objc_msgSend(v35, "length") != 4096)
        {

LABEL_33:
          goto LABEL_34;
        }
        objc_msgSend(v36, "getBytes:length:", &v43[4096 * v7], 4096);

      }
      v10 = 0;
      v7 = 1;
    }
    while ((v11 & 1) != 0);

    v37 = (uint64_t *)(v3 + 528);
    v38 = -1;
    do
    {
      if (*(_DWORD *)(v3 + 1588))
      {
        v39 = *(unsigned int **)(v3 + 2144);
        if (v39 == *(unsigned int **)(v3 + 2152))
          v40 = 0;
        else
          v40 = *v39;
      }
      else
      {
        v40 = 1;
      }
      if (++v38 >= v40)
        break;
      v41 = v37 + 7;
      v42 = DspLib::LowFlow::Algorithm::setModelParameters(*v37, (uint64_t)v49, (uint64_t)v48, v43, v44);
      v37 = v41;
    }
    while (!v42);
  }
  else
  {
LABEL_34:

  }
}

void sub_1B63A971C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11)
{

  _Unwind_Resume(a1);
}

void AUWindKill::~AUWindKill(AUWindKill *this)
{
  *(_QWORD *)this = &off_1E69D9430;
  WindDetectorAndSuppressor::~WindDetectorAndSuppressor((AUWindKill *)((char *)this + 544));
  ausdk::AUBase::~AUBase(this);
}

{
  *(_QWORD *)this = &off_1E69D9430;
  WindDetectorAndSuppressor::~WindDetectorAndSuppressor((AUWindKill *)((char *)this + 544));
  ausdk::AUBase::~AUBase(this);
  JUMPOUT(0x1BCC95CECLL);
}

uint64_t AUWindKill::Initialize(AUWindKill *this)
{
  ausdk::AUScope *v2;
  unsigned int i;
  uint64_t v4;
  uint64_t v5;
  double v7;
  int v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  float *v18;
  double v19;
  double v20;
  double v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  float __C;

  v2 = (AUWindKill *)((char *)this + 80);
  if (*(_DWORD *)(ausdk::AUScope::SafeGetElement((AUWindKill *)((char *)this + 80), 0) + 108) != 2)
    return 4294956421;
  for (i = 0; ; ++i)
  {
    v4 = *((_QWORD *)this + 21);
    if (v4)
      LODWORD(v5) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 24))(v4);
    else
      v5 = (*((_QWORD *)this + 19) - *((_QWORD *)this + 18)) >> 3;
    if (i >= v5)
      break;
    if (i - 1 >= 2)
    {
      if (!i && *(_DWORD *)(ausdk::AUScope::SafeGetElement((AUWindKill *)((char *)this + 128), 0) + 108) != 2)
        return 4294956421;
    }
    else if (*(_DWORD *)(ausdk::AUScope::SafeGetElement((AUWindKill *)((char *)this + 128), i) + 108) != 1)
    {
      return 4294956421;
    }
  }
  v7 = *(double *)(ausdk::AUScope::SafeGetElement(v2, 0) + 80);
  v8 = *((_DWORD *)this + 84);
  *((double *)this + 70) = v7;
  *((_DWORD *)this + 142) = v8;
  if (!v8)
    __assert_rtn("initialize", "WindSuppressorCore.cpp", 28, "blockSize > 0");
  if (v7 <= 0.0)
    __assert_rtn("initialize", "WindSuppressorCore.cpp", 29, "sampleRate > 0.0f");
  *((_BYTE *)this + 1376) = 1;
  *((_DWORD *)this + 269) = 1;
  *((_DWORD *)this + 268) = v8;
  *((double *)this + 137) = v7;
  v9 = (2 * v8);
  *((_DWORD *)this + 266) = v9;
  *((_DWORD *)this + 267) = v8 + 1;
  __C = 0.0;
  std::vector<float>::assign((char **)this + 151, v9, &__C);
  v10 = *((unsigned int *)this + 266);
  __C = 0.0;
  std::vector<float>::assign((char **)this + 154, v10, &__C);
  v11 = *((unsigned int *)this + 266);
  __C = 0.0;
  std::vector<float>::assign((char **)this + 157, v11, &__C);
  v12 = *((unsigned int *)this + 266);
  __C = 0.0;
  std::vector<float>::assign((char **)this + 145, v12, &__C);
  v13 = *((unsigned int *)this + 266);
  __C = 0.0;
  std::vector<float>::assign((char **)this + 148, v13, &__C);
  v14 = *((unsigned int *)this + 266);
  __C = 1.0;
  std::vector<float>::assign((char **)this + 142, v14, &__C);
  std::vector<WindUtility::EventTracker<float>>::resize((_QWORD *)this + 169, *((unsigned int *)this + 269));
  v15 = *((unsigned int *)this + 269);
  __C = 0.0;
  std::vector<float>::assign((char **)this + 160, v15, &__C);
  std::vector<float>::assign((char **)this + 166, (*((_DWORD *)this + 269) + 1), &WindSuppressorCore::kDefaultAggOmniBlendingRatio);
  std::vector<std::vector<float>>::resize((uint64_t *)this + 163, *((unsigned int *)this + 269));
  if (*((_DWORD *)this + 269))
  {
    v16 = 0;
    v17 = 0;
    do
    {
      std::vector<float>::assign((char **)(*((_QWORD *)this + 163) + v16), *((unsigned int *)this + 267), &WindSuppressorCore::kDefaultGains);
      ++v17;
      v16 += 24;
    }
    while (v17 < *((unsigned int *)this + 269));
  }
  if (!*((_BYTE *)this + 1376))
    __assert_rtn("setFrequencySmoothingFilter", "WindSuppressorCore.cpp", 163, "mInitialized");
  *((_DWORD *)this + 271) = 5;
  v18 = (float *)*((_QWORD *)this + 145);
  if (*((_QWORD *)this + 146) - (_QWORD)v18 <= 0x13uLL)
    __assert_rtn("generateFrequencySmoothingWindow", "WindSuppressorCore.cpp", 466, "window.size() >= N");
  vDSP_hann_window(v18, 5uLL, 0);
  __C = 0.0;
  vDSP_sve(*((const float **)this + 145), 1, &__C, 5uLL);
  if (__C < 2.2204e-16)
    __C = 1.0;
  vDSP_vsdiv(*((const float **)this + 145), 1, &__C, *((float **)this + 145), 1, 5uLL);
  WindDetectorAndSuppressor::UpdateNonTrivialParameters((AUWindKill *)((char *)this + 544), v19, v20, v21);
  v22 = *((unsigned int *)this + 142);
  __C = 0.0;
  std::vector<float>::assign((char **)this + 103, v22, &__C);
  v23 = *((unsigned int *)this + 142);
  __C = 0.0;
  std::vector<float>::assign((char **)this + 106, v23, &__C);
  v24 = (2 * *((_DWORD *)this + 142));
  __C = 0.0;
  std::vector<float>::assign((char **)this + 109, v24, &__C);
  v25 = *((unsigned int *)this + 142);
  __C = 1.0;
  std::vector<float>::assign((char **)this + 112, v25, &__C);
  std::vector<float>::assign((char **)this + 115, *((unsigned int *)this + 142), (_DWORD *)this + 136);
  v26 = *((unsigned int *)this + 142);
  __C = 0.0;
  std::vector<float>::assign((char **)this + 121, v26, &__C);
  v27 = *((unsigned int *)this + 142);
  __C = 1.0;
  std::vector<float>::assign((char **)this + 124, v27, &__C);
  v28 = (2 * *((_DWORD *)this + 142));
  __C = 0.0;
  std::vector<float>::assign((char **)this + 127, v28, &__C);
  *((_BYTE *)this + 552) = 1;
  WindDetectorAndSuppressor::Reset((AUWindKill *)((char *)this + 544));
  (*(void (**)(AUWindKill *, _QWORD, _QWORD))(*(_QWORD *)this + 72))(this, 0, 0);
  return 0;
}

uint64_t AUWindKill::Reset(AUWindKill *this)
{
  char *v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;

  if (*((_BYTE *)this + 17))
  {
    v2 = (char *)this + 544;
    WindDetectorAndSuppressor::Reset((AUWindKill *)((char *)this + 544));
    v3 = *(_OWORD *)(v2 + 232);
    *(_OWORD *)((char *)this + 1480) = *(_OWORD *)(v2 + 216);
    *(_OWORD *)((char *)this + 1496) = v3;
    v4 = *(_OWORD *)(v2 + 264);
    *(_OWORD *)((char *)this + 1512) = *(_OWORD *)(v2 + 248);
    *(_OWORD *)((char *)this + 1528) = v4;
    v5 = *(_OWORD *)(v2 + 168);
    *(_OWORD *)((char *)this + 1416) = *(_OWORD *)(v2 + 152);
    *(_OWORD *)((char *)this + 1432) = v5;
    v6 = *(_OWORD *)(v2 + 200);
    *(_OWORD *)((char *)this + 1448) = *(_OWORD *)(v2 + 184);
    *(_OWORD *)((char *)this + 1464) = v6;
    v7 = *(_OWORD *)(v2 + 136);
    *(_OWORD *)((char *)this + 1384) = *(_OWORD *)(v2 + 120);
    *(_OWORD *)((char *)this + 1400) = v7;
  }
  return 0;
}

uint64_t AUWindKill::GetPropertyInfo(AUWindKill *this, int a2, int a3, unsigned int a4, unsigned int *a5, BOOL *a6)
{
  uint64_t result;
  int v8;

  if (a3)
    return 4294956417;
  result = 4294956417;
  if (a2 > 5629)
  {
    if (a2 == 5630 || a2 == 5631)
    {
      *a6 = 1;
      v8 = 4 * *((_DWORD *)this + 84);
      goto LABEL_13;
    }
    if (a2 != 5632)
      return result;
    *a6 = 0;
LABEL_11:
    v8 = 4;
LABEL_13:
    result = 0;
    *a5 = v8;
    return result;
  }
  if (a2 == 21 || a2 == 3700)
  {
    *a6 = 1;
    goto LABEL_11;
  }
  return result;
}

uint64_t AUWindKill::GetProperty(AUWindKill *this, int a2, int a3, unsigned int a4, float *__b)
{
  uint64_t result;
  float v7;
  int v8;
  _BYTE *v9;
  _BYTE *v10;
  uint64_t v11;

  if (a3)
    return 4294956417;
  result = 4294956417;
  if (a2 <= 5629)
  {
    if (a2 == 21)
    {
      result = 0;
      v8 = *((unsigned __int8 *)this + 536);
    }
    else
    {
      if (a2 != 3700)
        return result;
      result = 0;
      v8 = *((unsigned __int8 *)this + 376);
    }
    *(_DWORD *)__b = v8;
    return result;
  }
  switch(a2)
  {
    case 5630:
      if (!*((_BYTE *)this + 17) || *((_BYTE *)this + 536))
      {
LABEL_21:
        v11 = *((unsigned int *)this + 84);
        if ((_DWORD)v11)
          memset_pattern16(__b, &unk_1B6627B80, 4 * v11);
        return 0;
      }
      v9 = (_BYTE *)*((_QWORD *)this + 115);
      v10 = (_BYTE *)*((_QWORD *)this + 116);
LABEL_26:
      if (v10 != v9)
        memmove(__b, v9, v10 - v9);
      return 0;
    case 5631:
      if (!*((_BYTE *)this + 17) || *((_BYTE *)this + 536))
        goto LABEL_21;
      v9 = (_BYTE *)*((_QWORD *)this + 112);
      v10 = (_BYTE *)*((_QWORD *)this + 113);
      goto LABEL_26;
    case 5632:
      v7 = 0.0;
      if (*((_BYTE *)this + 17) && !*((_BYTE *)this + 536))
      {
        if (*((_BYTE *)this + 1384))
          v7 = 1.0;
      }
      result = 0;
      *__b = v7;
      break;
  }
  return result;
}

uint64_t AUWindKill::SetProperty(AUWindKill *this, int a2, int a3, unsigned int a4, _BYTE *a5, unsigned int a6)
{
  uint64_t result;

  if (a3)
    return 4294956417;
  if (a2 == 3700)
  {
    result = 4294956445;
    if (a6 >= 4)
    {
      if (*a5)
        return 0;
      else
        return 4294956445;
    }
  }
  else
  {
    if (a2 != 21)
      return 4294956417;
    result = 0;
    *((_BYTE *)this + 536) = *(_DWORD *)a5 != 0;
  }
  return result;
}

uint64_t AUWindKill::SetParameter(AUWindKill *this, unsigned int a2, int a3, float a4)
{
  uint64_t result;
  uint64_t v8;
  ausdk::AUElement *v9;
  ausdk::AUElement **v10;

  if (a3)
    return 4294956418;
  v8 = *((_QWORD *)this + 9);
  if (v8)
  {
    v9 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v8 + 32))(v8, 0);
  }
  else
  {
    v10 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v10)
      v9 = 0;
    else
      v9 = *v10;
  }
  ausdk::AUElement::SetParameter(v9, a2, a4, 0);
  result = 0;
  ++*((_DWORD *)this + 132);
  return result;
}

uint64_t AUWindKill::CanScheduleParameters(AUWindKill *this)
{
  return 0;
}

uint64_t AUWindKill::ProcessMultipleBufferLists(AUWindKill *this, unsigned int *a2, unsigned int a3, unsigned int a4, const AudioBufferList **a5, unsigned int a6, AudioBufferList **a7, double a8, double a9, double a10)
{
  int v15;
  uint64_t v16;
  ausdk::AUElement *v17;
  ausdk::AUElement **v18;
  uint64_t v19;
  ausdk::AUElement *v20;
  ausdk::AUElement **v21;
  uint64_t v22;
  ausdk::AUElement *v23;
  ausdk::AUElement **v24;
  uint64_t v25;
  ausdk::AUElement *v26;
  ausdk::AUElement **v27;
  uint64_t v28;
  ausdk::AUElement *v29;
  ausdk::AUElement **v30;
  uint64_t v31;
  ausdk::AUElement *v32;
  ausdk::AUElement **v33;
  uint64_t v34;
  ausdk::AUElement *v35;
  ausdk::AUElement **v36;
  uint64_t v37;
  ausdk::AUElement *v38;
  ausdk::AUElement **v39;
  uint64_t v40;
  ausdk::AUElement *v41;
  ausdk::AUElement **v42;
  uint64_t v43;
  ausdk::AUElement *v44;
  ausdk::AUElement **v45;
  uint64_t v46;
  ausdk::AUElement *v47;
  ausdk::AUElement **v48;
  uint64_t v49;
  ausdk::AUElement *v50;
  ausdk::AUElement **v51;
  uint64_t v52;
  ausdk::AUElement *v53;
  ausdk::AUElement **v54;
  uint64_t v55;
  ausdk::AUElement *v56;
  ausdk::AUElement **v57;
  uint64_t v58;
  ausdk::AUElement *v59;
  ausdk::AUElement **v60;
  uint64_t v61;
  ausdk::AUElement *v62;
  ausdk::AUElement **v63;
  uint64_t v64;
  ausdk::AUElement *v65;
  ausdk::AUElement **v66;
  uint64_t v67;
  ausdk::AUElement *v68;
  ausdk::AUElement **v69;
  uint64_t v70;
  ausdk::AUElement *v71;
  ausdk::AUElement **v72;
  uint64_t v73;
  ausdk::AUElement *v74;
  ausdk::AUElement **v75;
  uint64_t v76;
  ausdk::AUElement *v77;
  ausdk::AUElement **v78;
  uint64_t v79;
  ausdk::AUElement *v80;
  ausdk::AUElement **v81;
  uint64_t v82;
  ausdk::AUElement *v83;
  ausdk::AUElement **v84;
  uint64_t v85;
  ausdk::AUElement *v86;
  ausdk::AUElement **v87;
  uint64_t v88;
  ausdk::AUElement *v89;
  ausdk::AUElement **v90;
  uint64_t v91;
  ausdk::AUElement *v92;
  ausdk::AUElement **v93;
  uint64_t v94;
  ausdk::AUElement *v95;
  ausdk::AUElement **v96;
  uint64_t v97;
  ausdk::AUElement *v98;
  ausdk::AUElement **v99;
  uint64_t v100;
  ausdk::AUElement *v101;
  ausdk::AUElement **v102;
  uint64_t v103;
  ausdk::AUElement *v104;
  ausdk::AUElement **v105;
  uint64_t v106;
  ausdk::AUElement *v107;
  ausdk::AUElement **v108;
  uint64_t v109;
  ausdk::AUElement *v110;
  ausdk::AUElement **v111;
  uint64_t v112;
  ausdk::AUElement *v113;
  ausdk::AUElement **v114;
  uint64_t v115;
  ausdk::AUElement *v116;
  ausdk::AUElement **v117;
  uint64_t v118;
  ausdk::AUElement *v119;
  ausdk::AUElement **v120;
  uint64_t v121;
  ausdk::AUElement *v122;
  ausdk::AUElement **v123;
  uint64_t v124;
  ausdk::AUElement *v125;
  ausdk::AUElement **v126;
  uint64_t v127;
  ausdk::AUElement *v128;
  ausdk::AUElement **v129;
  uint64_t v130;
  ausdk::AUElement *v131;
  ausdk::AUElement **v132;
  uint64_t v133;
  ausdk::AUElement *v134;
  ausdk::AUElement **v135;
  float v136;
  float v137;
  uint64_t v138;
  ausdk::AUElement *v139;
  float v140;
  ausdk::AUElement **v141;
  float v142;
  uint64_t v143;
  ausdk::AUElement *v144;
  float v145;
  ausdk::AUElement **v146;
  uint64_t v147;
  ausdk::AUElement *v148;
  ausdk::AUElement **v149;
  uint64_t v150;
  ausdk::AUElement *v151;
  float v152;
  ausdk::AUElement **v153;
  uint64_t v154;
  ausdk::AUElement *v155;
  float v156;
  ausdk::AUElement **v157;
  uint64_t v158;
  ausdk::AUElement *v159;
  float v160;
  ausdk::AUElement **v161;
  uint64_t v162;
  ausdk::AUElement *v163;
  float v164;
  ausdk::AUElement **v165;
  uint64_t v166;
  ausdk::AUElement *v167;
  float v168;
  ausdk::AUElement **v169;
  float v170;
  uint64_t v171;
  ausdk::AUElement *v172;
  ausdk::AUElement **v173;
  float v174;
  uint64_t v175;
  ausdk::AUElement *v176;
  ausdk::AUElement **v177;
  float v178;
  uint64_t v179;
  ausdk::AUElement *v180;
  ausdk::AUElement **v181;
  float v182;
  uint64_t v183;
  ausdk::AUElement *v184;
  ausdk::AUElement **v185;
  __int128 v186;
  __int128 v187;
  __int128 v188;
  __int128 v189;
  __int128 v190;
  const AudioBufferList *v191;
  unint64_t v192;
  AudioBufferList *v193;
  AudioBufferList *v194;
  AudioBufferList *v195;
  AudioBufferList *v196;
  uint64_t v197;
  unint64_t v198;
  __int128 v200;
  __int128 v201;
  __int128 v202;
  __int128 v203;
  __int128 v204;
  __int128 v205;
  uint64_t v206;
  ausdk::AUElement *v207;
  ausdk::AUElement **v208;
  float v209;
  uint64_t v210;
  ausdk::AUElement *v211;
  ausdk::AUElement **v212;
  uint64_t v213;
  ausdk::AUElement *v214;
  ausdk::AUElement **v215;
  uint64_t v216;
  ausdk::AUElement *v217;
  ausdk::AUElement **v218;
  uint64_t v219;
  ausdk::AUElement *v220;
  ausdk::AUElement **v221;
  uint64_t v222;
  ausdk::AUElement *v223;
  ausdk::AUElement **v224;
  uint64_t v225;
  ausdk::AUElement *v226;
  ausdk::AUElement **v227;
  uint64_t v228;
  ausdk::AUElement *v229;
  ausdk::AUElement **v230;
  uint64_t v231;
  ausdk::AUElement *v232;
  ausdk::AUElement **v233;
  uint64_t v234;
  ausdk::AUElement *v235;
  ausdk::AUElement **v236;
  AudioBufferList *v237;
  AudioBufferList *v238;
  AudioBufferList *v239;
  uint64_t v240;

  v240 = *MEMORY[0x1E0C80C00];
  v15 = *((_DWORD *)this + 132);
  if (*((_DWORD *)this + 133) != v15)
  {
    v16 = *((_QWORD *)this + 9);
    if (v16)
    {
      v17 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v16 + 32))(v16, 0);
    }
    else
    {
      v18 = (ausdk::AUElement **)*((_QWORD *)this + 6);
      if (*((ausdk::AUElement ***)this + 7) == v18)
        v17 = 0;
      else
        v17 = *v18;
    }
    *((_BYTE *)this + 1384) = ausdk::AUElement::GetParameter(v17, 0) != 0.0;
    v19 = *((_QWORD *)this + 9);
    if (v19)
    {
      v20 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v19 + 32))(v19, 0);
    }
    else
    {
      v21 = (ausdk::AUElement **)*((_QWORD *)this + 6);
      if (*((ausdk::AUElement ***)this + 7) == v21)
        v20 = 0;
      else
        v20 = *v21;
    }
    *((float *)this + 347) = ausdk::AUElement::GetParameter(v20, 1u);
    v22 = *((_QWORD *)this + 9);
    if (v22)
    {
      v23 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v22 + 32))(v22, 0);
    }
    else
    {
      v24 = (ausdk::AUElement **)*((_QWORD *)this + 6);
      if (*((ausdk::AUElement ***)this + 7) == v24)
        v23 = 0;
      else
        v23 = *v24;
    }
    *((float *)this + 348) = ausdk::AUElement::GetParameter(v23, 0x1Bu);
    v25 = *((_QWORD *)this + 9);
    if (v25)
    {
      v26 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v25 + 32))(v25, 0);
    }
    else
    {
      v27 = (ausdk::AUElement **)*((_QWORD *)this + 6);
      if (*((ausdk::AUElement ***)this + 7) == v27)
        v26 = 0;
      else
        v26 = *v27;
    }
    *((float *)this + 349) = ausdk::AUElement::GetParameter(v26, 2u);
    v28 = *((_QWORD *)this + 9);
    if (v28)
    {
      v29 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v28 + 32))(v28, 0);
    }
    else
    {
      v30 = (ausdk::AUElement **)*((_QWORD *)this + 6);
      if (*((ausdk::AUElement ***)this + 7) == v30)
        v29 = 0;
      else
        v29 = *v30;
    }
    *((float *)this + 350) = ausdk::AUElement::GetParameter(v29, 3u);
    v31 = *((_QWORD *)this + 9);
    if (v31)
    {
      v32 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v31 + 32))(v31, 0);
    }
    else
    {
      v33 = (ausdk::AUElement **)*((_QWORD *)this + 6);
      if (*((ausdk::AUElement ***)this + 7) == v33)
        v32 = 0;
      else
        v32 = *v33;
    }
    *((float *)this + 351) = ausdk::AUElement::GetParameter(v32, 4u);
    v34 = *((_QWORD *)this + 9);
    if (v34)
    {
      v35 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v34 + 32))(v34, 0);
    }
    else
    {
      v36 = (ausdk::AUElement **)*((_QWORD *)this + 6);
      if (*((ausdk::AUElement ***)this + 7) == v36)
        v35 = 0;
      else
        v35 = *v36;
    }
    *((float *)this + 352) = ausdk::AUElement::GetParameter(v35, 5u);
    v37 = *((_QWORD *)this + 9);
    if (v37)
    {
      v38 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v37 + 32))(v37, 0);
    }
    else
    {
      v39 = (ausdk::AUElement **)*((_QWORD *)this + 6);
      if (*((ausdk::AUElement ***)this + 7) == v39)
        v38 = 0;
      else
        v38 = *v39;
    }
    *((float *)this + 353) = ausdk::AUElement::GetParameter(v38, 6u);
    v40 = *((_QWORD *)this + 9);
    if (v40)
    {
      v41 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v40 + 32))(v40, 0);
    }
    else
    {
      v42 = (ausdk::AUElement **)*((_QWORD *)this + 6);
      if (*((ausdk::AUElement ***)this + 7) == v42)
        v41 = 0;
      else
        v41 = *v42;
    }
    *((float *)this + 354) = ausdk::AUElement::GetParameter(v41, 7u);
    v43 = *((_QWORD *)this + 9);
    if (v43)
    {
      v44 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v43 + 32))(v43, 0);
    }
    else
    {
      v45 = (ausdk::AUElement **)*((_QWORD *)this + 6);
      if (*((ausdk::AUElement ***)this + 7) == v45)
        v44 = 0;
      else
        v44 = *v45;
    }
    *((float *)this + 355) = ausdk::AUElement::GetParameter(v44, 8u);
    v46 = *((_QWORD *)this + 9);
    if (v46)
    {
      v47 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v46 + 32))(v46, 0);
    }
    else
    {
      v48 = (ausdk::AUElement **)*((_QWORD *)this + 6);
      if (*((ausdk::AUElement ***)this + 7) == v48)
        v47 = 0;
      else
        v47 = *v48;
    }
    *((float *)this + 356) = ausdk::AUElement::GetParameter(v47, 0x13u);
    v49 = *((_QWORD *)this + 9);
    if (v49)
    {
      v50 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v49 + 32))(v49, 0);
    }
    else
    {
      v51 = (ausdk::AUElement **)*((_QWORD *)this + 6);
      if (*((ausdk::AUElement ***)this + 7) == v51)
        v50 = 0;
      else
        v50 = *v51;
    }
    *((float *)this + 357) = ausdk::AUElement::GetParameter(v50, 9u);
    v52 = *((_QWORD *)this + 9);
    if (v52)
    {
      v53 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v52 + 32))(v52, 0);
    }
    else
    {
      v54 = (ausdk::AUElement **)*((_QWORD *)this + 6);
      if (*((ausdk::AUElement ***)this + 7) == v54)
        v53 = 0;
      else
        v53 = *v54;
    }
    *((float *)this + 358) = ausdk::AUElement::GetParameter(v53, 0xAu);
    v55 = *((_QWORD *)this + 9);
    if (v55)
    {
      v56 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v55 + 32))(v55, 0);
    }
    else
    {
      v57 = (ausdk::AUElement **)*((_QWORD *)this + 6);
      if (*((ausdk::AUElement ***)this + 7) == v57)
        v56 = 0;
      else
        v56 = *v57;
    }
    *((float *)this + 359) = ausdk::AUElement::GetParameter(v56, 0xBu);
    v58 = *((_QWORD *)this + 9);
    if (v58)
    {
      v59 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v58 + 32))(v58, 0);
    }
    else
    {
      v60 = (ausdk::AUElement **)*((_QWORD *)this + 6);
      if (*((ausdk::AUElement ***)this + 7) == v60)
        v59 = 0;
      else
        v59 = *v60;
    }
    *((float *)this + 360) = ausdk::AUElement::GetParameter(v59, 0xCu);
    v61 = *((_QWORD *)this + 9);
    if (v61)
    {
      v62 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v61 + 32))(v61, 0);
    }
    else
    {
      v63 = (ausdk::AUElement **)*((_QWORD *)this + 6);
      if (*((ausdk::AUElement ***)this + 7) == v63)
        v62 = 0;
      else
        v62 = *v63;
    }
    *((_DWORD *)this + 361) = (int)ausdk::AUElement::GetParameter(v62, 0xDu);
    v64 = *((_QWORD *)this + 9);
    if (v64)
    {
      v65 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v64 + 32))(v64, 0);
    }
    else
    {
      v66 = (ausdk::AUElement **)*((_QWORD *)this + 6);
      if (*((ausdk::AUElement ***)this + 7) == v66)
        v65 = 0;
      else
        v65 = *v66;
    }
    *((_DWORD *)this + 362) = ausdk::AUElement::GetParameter(v65, 0xEu);
    v67 = *((_QWORD *)this + 9);
    if (v67)
    {
      v68 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v67 + 32))(v67, 0);
    }
    else
    {
      v69 = (ausdk::AUElement **)*((_QWORD *)this + 6);
      if (*((ausdk::AUElement ***)this + 7) == v69)
        v68 = 0;
      else
        v68 = *v69;
    }
    *((float *)this + 363) = ausdk::AUElement::GetParameter(v68, 0xFu);
    v70 = *((_QWORD *)this + 9);
    if (v70)
    {
      v71 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v70 + 32))(v70, 0);
    }
    else
    {
      v72 = (ausdk::AUElement **)*((_QWORD *)this + 6);
      if (*((ausdk::AUElement ***)this + 7) == v72)
        v71 = 0;
      else
        v71 = *v72;
    }
    *((float *)this + 364) = ausdk::AUElement::GetParameter(v71, 0x14u);
    v73 = *((_QWORD *)this + 9);
    if (v73)
    {
      v74 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v73 + 32))(v73, 0);
    }
    else
    {
      v75 = (ausdk::AUElement **)*((_QWORD *)this + 6);
      if (*((ausdk::AUElement ***)this + 7) == v75)
        v74 = 0;
      else
        v74 = *v75;
    }
    *((float *)this + 365) = ausdk::AUElement::GetParameter(v74, 0x1Cu);
    v76 = *((_QWORD *)this + 9);
    if (v76)
    {
      v77 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v76 + 32))(v76, 0);
    }
    else
    {
      v78 = (ausdk::AUElement **)*((_QWORD *)this + 6);
      if (*((ausdk::AUElement ***)this + 7) == v78)
        v77 = 0;
      else
        v77 = *v78;
    }
    *((float *)this + 366) = ausdk::AUElement::GetParameter(v77, 0x1Du);
    v79 = *((_QWORD *)this + 9);
    if (v79)
    {
      v80 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v79 + 32))(v79, 0);
    }
    else
    {
      v81 = (ausdk::AUElement **)*((_QWORD *)this + 6);
      if (*((ausdk::AUElement ***)this + 7) == v81)
        v80 = 0;
      else
        v80 = *v81;
    }
    *((float *)this + 367) = ausdk::AUElement::GetParameter(v80, 0x10u);
    v82 = *((_QWORD *)this + 9);
    if (v82)
    {
      v83 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v82 + 32))(v82, 0);
    }
    else
    {
      v84 = (ausdk::AUElement **)*((_QWORD *)this + 6);
      if (*((ausdk::AUElement ***)this + 7) == v84)
        v83 = 0;
      else
        v83 = *v84;
    }
    *((float *)this + 368) = ausdk::AUElement::GetParameter(v83, 0x15u);
    v85 = *((_QWORD *)this + 9);
    if (v85)
    {
      v86 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v85 + 32))(v85, 0);
    }
    else
    {
      v87 = (ausdk::AUElement **)*((_QWORD *)this + 6);
      if (*((ausdk::AUElement ***)this + 7) == v87)
        v86 = 0;
      else
        v86 = *v87;
    }
    *((float *)this + 369) = ausdk::AUElement::GetParameter(v86, 0x11u);
    v88 = *((_QWORD *)this + 9);
    if (v88)
    {
      v89 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v88 + 32))(v88, 0);
    }
    else
    {
      v90 = (ausdk::AUElement **)*((_QWORD *)this + 6);
      if (*((ausdk::AUElement ***)this + 7) == v90)
        v89 = 0;
      else
        v89 = *v90;
    }
    *((float *)this + 370) = ausdk::AUElement::GetParameter(v89, 0x16u);
    v91 = *((_QWORD *)this + 9);
    if (v91)
    {
      v92 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v91 + 32))(v91, 0);
    }
    else
    {
      v93 = (ausdk::AUElement **)*((_QWORD *)this + 6);
      if (*((ausdk::AUElement ***)this + 7) == v93)
        v92 = 0;
      else
        v92 = *v93;
    }
    *((float *)this + 371) = ausdk::AUElement::GetParameter(v92, 0x12u);
    v94 = *((_QWORD *)this + 9);
    if (v94)
    {
      v95 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v94 + 32))(v94, 0);
    }
    else
    {
      v96 = (ausdk::AUElement **)*((_QWORD *)this + 6);
      if (*((ausdk::AUElement ***)this + 7) == v96)
        v95 = 0;
      else
        v95 = *v96;
    }
    *((float *)this + 372) = ausdk::AUElement::GetParameter(v95, 0x1Eu);
    v97 = *((_QWORD *)this + 9);
    if (v97)
    {
      v98 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v97 + 32))(v97, 0);
    }
    else
    {
      v99 = (ausdk::AUElement **)*((_QWORD *)this + 6);
      if (*((ausdk::AUElement ***)this + 7) == v99)
        v98 = 0;
      else
        v98 = *v99;
    }
    *((float *)this + 373) = ausdk::AUElement::GetParameter(v98, 0x17u);
    v100 = *((_QWORD *)this + 9);
    if (v100)
    {
      v101 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v100 + 32))(v100, 0);
    }
    else
    {
      v102 = (ausdk::AUElement **)*((_QWORD *)this + 6);
      if (*((ausdk::AUElement ***)this + 7) == v102)
        v101 = 0;
      else
        v101 = *v102;
    }
    *((float *)this + 374) = ausdk::AUElement::GetParameter(v101, 0x18u);
    v103 = *((_QWORD *)this + 9);
    if (v103)
    {
      v104 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v103 + 32))(v103, 0);
    }
    else
    {
      v105 = (ausdk::AUElement **)*((_QWORD *)this + 6);
      if (*((ausdk::AUElement ***)this + 7) == v105)
        v104 = 0;
      else
        v104 = *v105;
    }
    *((float *)this + 375) = ausdk::AUElement::GetParameter(v104, 0x19u);
    v106 = *((_QWORD *)this + 9);
    if (v106)
    {
      v107 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v106 + 32))(v106, 0);
    }
    else
    {
      v108 = (ausdk::AUElement **)*((_QWORD *)this + 6);
      if (*((ausdk::AUElement ***)this + 7) == v108)
        v107 = 0;
      else
        v107 = *v108;
    }
    *((float *)this + 376) = ausdk::AUElement::GetParameter(v107, 0x1Au);
    v109 = *((_QWORD *)this + 9);
    if (v109)
    {
      v110 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v109 + 32))(v109, 0);
    }
    else
    {
      v111 = (ausdk::AUElement **)*((_QWORD *)this + 6);
      if (*((ausdk::AUElement ***)this + 7) == v111)
        v110 = 0;
      else
        v110 = *v111;
    }
    *((_BYTE *)this + 1508) = ausdk::AUElement::GetParameter(v110, 0x1Fu) != 0.0;
    v112 = *((_QWORD *)this + 9);
    if (v112)
    {
      v113 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v112 + 32))(v112, 0);
    }
    else
    {
      v114 = (ausdk::AUElement **)*((_QWORD *)this + 6);
      if (*((ausdk::AUElement ***)this + 7) == v114)
        v113 = 0;
      else
        v113 = *v114;
    }
    *((float *)this + 378) = ausdk::AUElement::GetParameter(v113, 0x20u);
    v115 = *((_QWORD *)this + 9);
    if (v115)
    {
      v116 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v115 + 32))(v115, 0);
    }
    else
    {
      v117 = (ausdk::AUElement **)*((_QWORD *)this + 6);
      if (*((ausdk::AUElement ***)this + 7) == v117)
        v116 = 0;
      else
        v116 = *v117;
    }
    *((float *)this + 379) = ausdk::AUElement::GetParameter(v116, 0x21u);
    v118 = *((_QWORD *)this + 9);
    if (v118)
    {
      v119 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v118 + 32))(v118, 0);
    }
    else
    {
      v120 = (ausdk::AUElement **)*((_QWORD *)this + 6);
      if (*((ausdk::AUElement ***)this + 7) == v120)
        v119 = 0;
      else
        v119 = *v120;
    }
    *((float *)this + 380) = ausdk::AUElement::GetParameter(v119, 0x22u);
    v121 = *((_QWORD *)this + 9);
    if (v121)
    {
      v122 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v121 + 32))(v121, 0);
    }
    else
    {
      v123 = (ausdk::AUElement **)*((_QWORD *)this + 6);
      if (*((ausdk::AUElement ***)this + 7) == v123)
        v122 = 0;
      else
        v122 = *v123;
    }
    *((float *)this + 381) = ausdk::AUElement::GetParameter(v122, 0x23u);
    v124 = *((_QWORD *)this + 9);
    if (v124)
    {
      v125 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v124 + 32))(v124, 0);
    }
    else
    {
      v126 = (ausdk::AUElement **)*((_QWORD *)this + 6);
      if (*((ausdk::AUElement ***)this + 7) == v126)
        v125 = 0;
      else
        v125 = *v126;
    }
    *((float *)this + 382) = ausdk::AUElement::GetParameter(v125, 0x24u);
    v127 = *((_QWORD *)this + 9);
    if (v127)
    {
      v128 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v127 + 32))(v127, 0);
    }
    else
    {
      v129 = (ausdk::AUElement **)*((_QWORD *)this + 6);
      if (*((ausdk::AUElement ***)this + 7) == v129)
        v128 = 0;
      else
        v128 = *v129;
    }
    *((float *)this + 383) = ausdk::AUElement::GetParameter(v128, 0x25u);
    v130 = *((_QWORD *)this + 9);
    if (v130)
    {
      v131 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v130 + 32))(v130, 0);
    }
    else
    {
      v132 = (ausdk::AUElement **)*((_QWORD *)this + 6);
      if (*((ausdk::AUElement ***)this + 7) == v132)
        v131 = 0;
      else
        v131 = *v132;
    }
    *((float *)this + 384) = ausdk::AUElement::GetParameter(v131, 0x26u);
    v133 = *((_QWORD *)this + 9);
    if (v133)
    {
      v134 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v133 + 32))(v133, 0);
    }
    else
    {
      v135 = (ausdk::AUElement **)*((_QWORD *)this + 6);
      if (*((ausdk::AUElement ***)this + 7) == v135)
        v134 = 0;
      else
        v134 = *v135;
    }
    *((float *)this + 385) = ausdk::AUElement::GetParameter(v134, 0x27u);
    v136 = *(double *)(ausdk::AUScope::SafeGetElement((AUWindKill *)((char *)this + 80), 0) + 80);
    v137 = v136 * 0.5;
    if (*((float *)this + 351) > (float)(v136 * 0.5))
    {
      *((float *)this + 351) = v137;
      v138 = *((_QWORD *)this + 9);
      if (v138)
      {
        v139 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v138 + 32))(v138, 0);
        v140 = *((float *)this + 351);
      }
      else
      {
        v141 = (ausdk::AUElement **)*((_QWORD *)this + 6);
        if (*((ausdk::AUElement ***)this + 7) == v141)
          v139 = 0;
        else
          v139 = *v141;
        v140 = v136 * 0.5;
      }
      ausdk::AUElement::SetParameter(v139, 4u, v140, 0);
    }
    v142 = *((float *)this + 352);
    if (v142 > v137)
    {
      *((float *)this + 352) = v137;
      v143 = *((_QWORD *)this + 9);
      if (v143)
      {
        v144 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v143 + 32))(v143, 0);
        v145 = *((float *)this + 352);
      }
      else
      {
        v146 = (ausdk::AUElement **)*((_QWORD *)this + 6);
        if (*((ausdk::AUElement ***)this + 7) == v146)
          v144 = 0;
        else
          v144 = *v146;
        v145 = v137;
      }
      ausdk::AUElement::SetParameter(v144, 5u, v145, 0);
      v142 = *((float *)this + 352);
    }
    if (*((float *)this + 351) > v142)
    {
      *((float *)this + 351) = v142;
      v147 = *((_QWORD *)this + 9);
      if (v147)
      {
        v148 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v147 + 32))(v147, 0);
        v142 = *((float *)this + 351);
      }
      else
      {
        v149 = (ausdk::AUElement **)*((_QWORD *)this + 6);
        if (*((ausdk::AUElement ***)this + 7) == v149)
          v148 = 0;
        else
          v148 = *v149;
      }
      ausdk::AUElement::SetParameter(v148, 4u, v142, 0);
    }
    if (*((float *)this + 356) > v137)
    {
      *((float *)this + 356) = v137;
      v150 = *((_QWORD *)this + 9);
      if (v150)
      {
        v151 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v150 + 32))(v150, 0);
        v152 = *((float *)this + 356);
      }
      else
      {
        v153 = (ausdk::AUElement **)*((_QWORD *)this + 6);
        if (*((ausdk::AUElement ***)this + 7) == v153)
          v151 = 0;
        else
          v151 = *v153;
        v152 = v137;
      }
      ausdk::AUElement::SetParameter(v151, 0x13u, v152, 0);
    }
    if (*((float *)this + 357) > v137)
    {
      *((float *)this + 357) = v137;
      v154 = *((_QWORD *)this + 9);
      if (v154)
      {
        v155 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v154 + 32))(v154, 0);
        v156 = *((float *)this + 357);
      }
      else
      {
        v157 = (ausdk::AUElement **)*((_QWORD *)this + 6);
        if (*((ausdk::AUElement ***)this + 7) == v157)
          v155 = 0;
        else
          v155 = *v157;
        v156 = v137;
      }
      ausdk::AUElement::SetParameter(v155, 9u, v156, 0);
    }
    if (*((float *)this + 358) > v137)
    {
      *((float *)this + 358) = v137;
      v158 = *((_QWORD *)this + 9);
      if (v158)
      {
        v159 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v158 + 32))(v158, 0);
        v160 = *((float *)this + 358);
      }
      else
      {
        v161 = (ausdk::AUElement **)*((_QWORD *)this + 6);
        if (*((ausdk::AUElement ***)this + 7) == v161)
          v159 = 0;
        else
          v159 = *v161;
        v160 = v137;
      }
      ausdk::AUElement::SetParameter(v159, 0xAu, v160, 0);
    }
    if (*((float *)this + 367) > v137)
    {
      *((float *)this + 367) = v137;
      v162 = *((_QWORD *)this + 9);
      if (v162)
      {
        v163 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v162 + 32))(v162, 0);
        v164 = *((float *)this + 367);
      }
      else
      {
        v165 = (ausdk::AUElement **)*((_QWORD *)this + 6);
        if (*((ausdk::AUElement ***)this + 7) == v165)
          v163 = 0;
        else
          v163 = *v165;
        v164 = v137;
      }
      ausdk::AUElement::SetParameter(v163, 0x10u, v164, 0);
    }
    if (*((float *)this + 368) > v137)
    {
      *((float *)this + 368) = v137;
      v166 = *((_QWORD *)this + 9);
      if (v166)
      {
        v167 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v166 + 32))(v166, 0);
        v168 = *((float *)this + 368);
      }
      else
      {
        v169 = (ausdk::AUElement **)*((_QWORD *)this + 6);
        if (*((ausdk::AUElement ***)this + 7) == v169)
          v167 = 0;
        else
          v167 = *v169;
        v168 = v137;
      }
      ausdk::AUElement::SetParameter(v167, 0x15u, v168, 0);
    }
    v170 = *((float *)this + 369);
    if (v170 > v137)
    {
      *((float *)this + 369) = v137;
      v171 = *((_QWORD *)this + 9);
      if (v171)
      {
        v172 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v171 + 32))(v171, 0);
        v137 = *((float *)this + 369);
      }
      else
      {
        v173 = (ausdk::AUElement **)*((_QWORD *)this + 6);
        if (*((ausdk::AUElement ***)this + 7) == v173)
          v172 = 0;
        else
          v172 = *v173;
      }
      ausdk::AUElement::SetParameter(v172, 0x11u, v137, 0);
      v170 = *((float *)this + 369);
    }
    v174 = *((float *)this + 367);
    if (v174 > v170)
    {
      *((float *)this + 367) = v170;
      v175 = *((_QWORD *)this + 9);
      if (v175)
      {
        v176 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v175 + 32))(v175, 0);
        v170 = *((float *)this + 367);
      }
      else
      {
        v177 = (ausdk::AUElement **)*((_QWORD *)this + 6);
        if (*((ausdk::AUElement ***)this + 7) == v177)
          v176 = 0;
        else
          v176 = *v177;
      }
      ausdk::AUElement::SetParameter(v176, 0x10u, v170, 0);
      v174 = *((float *)this + 367);
    }
    v178 = *((float *)this + 368);
    if (v178 < v174)
    {
      *((float *)this + 368) = v174;
      v179 = *((_QWORD *)this + 9);
      if (v179)
      {
        v180 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v179 + 32))(v179, 0);
        v174 = *((float *)this + 368);
      }
      else
      {
        v181 = (ausdk::AUElement **)*((_QWORD *)this + 6);
        if (*((ausdk::AUElement ***)this + 7) == v181)
          v180 = 0;
        else
          v180 = *v181;
      }
      ausdk::AUElement::SetParameter(v180, 0x15u, v174, 0);
      v178 = *((float *)this + 368);
    }
    v182 = *((float *)this + 369);
    if (v178 > v182)
    {
      *((float *)this + 368) = v182;
      v183 = *((_QWORD *)this + 9);
      if (v183)
      {
        v184 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v183 + 32))(v183, 0);
        v182 = *((float *)this + 368);
      }
      else
      {
        v185 = (ausdk::AUElement **)*((_QWORD *)this + 6);
        if (*((ausdk::AUElement ***)this + 7) == v185)
          v184 = 0;
        else
          v184 = *v185;
      }
      ausdk::AUElement::SetParameter(v184, 0x15u, v182, 0);
    }
    v186 = *(_OWORD *)((char *)this + 1496);
    *(_OWORD *)((char *)this + 760) = *(_OWORD *)((char *)this + 1480);
    *(_OWORD *)((char *)this + 776) = v186;
    v187 = *(_OWORD *)((char *)this + 1528);
    *(_OWORD *)((char *)this + 792) = *(_OWORD *)((char *)this + 1512);
    v188 = *(_OWORD *)((char *)this + 1432);
    *(_OWORD *)((char *)this + 696) = *(_OWORD *)((char *)this + 1416);
    *(_OWORD *)((char *)this + 712) = v188;
    v189 = *(_OWORD *)((char *)this + 1464);
    *(_OWORD *)((char *)this + 728) = *(_OWORD *)((char *)this + 1448);
    *(_OWORD *)((char *)this + 744) = v189;
    v190 = *(_OWORD *)((char *)this + 1400);
    *(_OWORD *)((char *)this + 664) = *(_OWORD *)((char *)this + 1384);
    *(_OWORD *)((char *)this + 680) = v190;
    *(_OWORD *)((char *)this + 808) = v187;
    WindDetectorAndSuppressor::UpdateWindSuppressorCoreState((AUWindKill *)((char *)this + 544));
    *((_DWORD *)this + 133) = v15;
  }
  if (*((_DWORD *)this + 84) != a3)
    return 4294956422;
  v191 = *a5;
  if (!*a5)
    return 4294956420;
  if (v191->mNumberBuffers != 2)
    return 4294956428;
  v192 = 0;
  v237 = 0;
  v238 = 0;
  v239 = 0;
  do
  {
    if (v192 >= a6)
      v193 = 0;
    else
      v193 = a7[v192];
    *(&v237 + v192++) = v193;
  }
  while (v192 != 3);
  v194 = v237;
  if (v237)
  {
    if (v237->mNumberBuffers != 2)
      return 4294956428;
  }
  v195 = v238;
  if (v238)
  {
    if (v238->mNumberBuffers != 1)
      return 4294956428;
  }
  v196 = v239;
  if (v239)
  {
    if (v239->mNumberBuffers != 1)
      return 4294956428;
  }
  if (*((_BYTE *)this + 536))
  {
    if (v237 && v237->mNumberBuffers)
    {
      v197 = 0;
      v198 = 0;
      do
      {
        memcpy(v194->mBuffers[v197].mData, (*a5)->mBuffers[v197].mData, (*a5)->mBuffers[v197].mDataByteSize);
        ++v198;
        ++v197;
      }
      while (v198 < v194->mNumberBuffers);
    }
    if (v195)
      bzero(v195->mBuffers[0].mData, v195->mBuffers[0].mDataByteSize);
    if (v196 && a3)
      memset_pattern16(v196->mBuffers[0].mData, &unk_1B6627B80, 4 * a3);
    WindDetectorAndSuppressor::ResetOutputPropertiesAndParams((AUWindKill *)((char *)this + 544));
  }
  else
  {
    WindDetectorAndSuppressor::ProcessBufferLists((AUWindKill *)((char *)this + 544), v191, v237, v238, v239, a8, a9, a10);
  }
  v200 = *(_OWORD *)((char *)this + 776);
  *(_OWORD *)((char *)this + 1480) = *(_OWORD *)((char *)this + 760);
  *(_OWORD *)((char *)this + 1496) = v200;
  v201 = *(_OWORD *)((char *)this + 792);
  v202 = *(_OWORD *)((char *)this + 712);
  *(_OWORD *)((char *)this + 1416) = *(_OWORD *)((char *)this + 696);
  *(_OWORD *)((char *)this + 1432) = v202;
  v203 = *(_OWORD *)((char *)this + 744);
  *(_OWORD *)((char *)this + 1448) = *(_OWORD *)((char *)this + 728);
  *(_OWORD *)((char *)this + 1464) = v203;
  v204 = *(_OWORD *)((char *)this + 680);
  *(_OWORD *)((char *)this + 1384) = *(_OWORD *)((char *)this + 664);
  *(_OWORD *)((char *)this + 1400) = v204;
  v205 = *(_OWORD *)((char *)this + 808);
  *(_OWORD *)((char *)this + 1512) = v201;
  *(_OWORD *)((char *)this + 1528) = v205;
  v206 = *((_QWORD *)this + 9);
  if (v206)
  {
    v207 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v206 + 32))(v206, 0);
  }
  else
  {
    v208 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v208)
      v207 = 0;
    else
      v207 = *v208;
  }
  v209 = 0.0;
  if (*((_BYTE *)this + 1384))
    v209 = 1.0;
  ausdk::AUElement::SetParameter(v207, 0, v209, 0);
  v210 = *((_QWORD *)this + 9);
  if (v210)
  {
    v211 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v210 + 32))(v210, 0);
  }
  else
  {
    v212 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v212)
      v211 = 0;
    else
      v211 = *v212;
  }
  ausdk::AUElement::SetParameter(v211, 1u, *((float *)this + 347), 0);
  v213 = *((_QWORD *)this + 9);
  if (v213)
  {
    v214 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v213 + 32))(v213, 0);
  }
  else
  {
    v215 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v215)
      v214 = 0;
    else
      v214 = *v215;
  }
  ausdk::AUElement::SetParameter(v214, 0x1Bu, *((float *)this + 348), 0);
  v216 = *((_QWORD *)this + 9);
  if (v216)
  {
    v217 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v216 + 32))(v216, 0);
  }
  else
  {
    v218 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v218)
      v217 = 0;
    else
      v217 = *v218;
  }
  ausdk::AUElement::SetParameter(v217, 0xEu, (float)*((unsigned int *)this + 362), 0);
  v219 = *((_QWORD *)this + 9);
  if (v219)
  {
    v220 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v219 + 32))(v219, 0);
  }
  else
  {
    v221 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v221)
      v220 = 0;
    else
      v220 = *v221;
  }
  ausdk::AUElement::SetParameter(v220, 0xFu, *((float *)this + 363), 0);
  v222 = *((_QWORD *)this + 9);
  if (v222)
  {
    v223 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v222 + 32))(v222, 0);
  }
  else
  {
    v224 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v224)
      v223 = 0;
    else
      v223 = *v224;
  }
  ausdk::AUElement::SetParameter(v223, 0x14u, *((float *)this + 364), 0);
  v225 = *((_QWORD *)this + 9);
  if (v225)
  {
    v226 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v225 + 32))(v225, 0);
  }
  else
  {
    v227 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v227)
      v226 = 0;
    else
      v226 = *v227;
  }
  ausdk::AUElement::SetParameter(v226, 0x1Cu, *((float *)this + 365), 0);
  v228 = *((_QWORD *)this + 9);
  if (v228)
  {
    v229 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v228 + 32))(v228, 0);
  }
  else
  {
    v230 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v230)
      v229 = 0;
    else
      v229 = *v230;
  }
  ausdk::AUElement::SetParameter(v229, 0x1Du, *((float *)this + 366), 0);
  v231 = *((_QWORD *)this + 9);
  if (v231)
  {
    v232 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v231 + 32))(v231, 0);
  }
  else
  {
    v233 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v233)
      v232 = 0;
    else
      v232 = *v233;
  }
  ausdk::AUElement::SetParameter(v232, 0x19u, *((float *)this + 375), 0);
  v234 = *((_QWORD *)this + 9);
  if (v234)
  {
    v235 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v234 + 32))(v234, 0);
  }
  else
  {
    v236 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v236)
      v235 = 0;
    else
      v235 = *v236;
  }
  ausdk::AUElement::SetParameter(v235, 0x1Au, *((float *)this + 376), 0);
  return 0;
}

uint64_t AUWindKill::Render(AUWindKill *this, unsigned int *a2, const AudioTimeStamp *a3, uint64_t a4)
{
  int HasInput;
  char v9;
  ausdk::AUInputElement *v10;
  uint64_t result;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  ausdk::AUIOElement *Element;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t BufferList;
  _QWORD v21[4];

  v21[3] = *MEMORY[0x1E0C80C00];
  HasInput = ausdk::AUBase::HasInput(this, 0);
  v9 = HasInput;
  if (!HasInput
    || (v10 = (ausdk::AUInputElement *)ausdk::AUScope::SafeGetElement((AUWindKill *)((char *)this + 80), 0),
        result = ausdk::AUInputElement::PullInput(v10, a2, a3, 0, a4),
        !(_DWORD)result))
  {
    v12 = 0;
    memset(v21, 0, 24);
    do
    {
      v13 = *((_QWORD *)this + 21);
      if (v13)
        LODWORD(v14) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v13 + 24))(v13);
      else
        v14 = (*((_QWORD *)this + 19) - *((_QWORD *)this + 18)) >> 3;
      if (v12 >= v14)
      {
        v16 = 0;
      }
      else
      {
        Element = (ausdk::AUIOElement *)ausdk::AUScope::SafeGetElement((AUWindKill *)((char *)this + 128), v12);
        v16 = ausdk::AUIOElement::PrepareBuffer(Element, a4);
      }
      v21[v12++] = v16;
    }
    while (v12 != 3);
    if ((v9 & 1) != 0)
    {
      v17 = ausdk::AUScope::SafeGetElement((AUWindKill *)((char *)this + 80), 0);
      BufferList = ausdk::AUBufferList::GetBufferList((ausdk::AUBufferList *)(v17 + 144));
      v18 = *((_QWORD *)this + 21);
      if (v18)
        v19 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v18 + 24))(v18);
      else
        v19 = (*((_QWORD *)this + 19) - *((_QWORD *)this + 18)) >> 3;
      return (*(uint64_t (**)(AUWindKill *, unsigned int *, uint64_t, uint64_t, uint64_t *, uint64_t, _QWORD *))(*(_QWORD *)this + 184))(this, a2, a4, 1, &BufferList, v19, v21);
    }
    else
    {
      return 0;
    }
  }
  return result;
}

BOOL AUWindKill::BusCountWritable(AUWindKill *this, int a2)
{
  return a2 == 2 && *((_BYTE *)this + 17) == 0;
}

uint64_t AUWindKill::SetBusCount(AUWindKill *this, int a2, unsigned int a3)
{
  int64x2_t *v3;
  unsigned int v4;
  uint64_t v5;

  if (a2 == 1 && a3 == 1)
  {
    v3 = (int64x2_t *)((char *)this + 80);
    v4 = 1;
LABEL_7:
    ausdk::AUScope::SetNumberOfElements(v3, v4);
    return 0;
  }
  v5 = 4294956445;
  if (a2 == 2 && a3 - 1 <= 2)
  {
    v3 = (int64x2_t *)((char *)this + 128);
    v4 = a3;
    goto LABEL_7;
  }
  return v5;
}

uint64_t AUWindKill::GetParameterList(AUWindKill *this, int a2, unsigned int *a3, unsigned int *a4)
{
  unsigned int v4;
  uint64_t result;

  if (a2)
  {
    v4 = 0;
    result = 4294956430;
  }
  else
  {
    result = 0;
    if (a3)
    {
      *(_OWORD *)a3 = xmmword_1B66A21E0;
      *((_OWORD *)a3 + 1) = xmmword_1B66A21F0;
      *((_OWORD *)a3 + 2) = xmmword_1B66A2200;
      *((_OWORD *)a3 + 3) = xmmword_1B66A1FA0;
      *((_OWORD *)a3 + 4) = xmmword_1B66A2210;
      *((_OWORD *)a3 + 5) = xmmword_1B66A2220;
      *((_OWORD *)a3 + 6) = xmmword_1B66A2230;
      *((_OWORD *)a3 + 7) = xmmword_1B66A2240;
      *((_OWORD *)a3 + 8) = xmmword_1B66A1FD0;
      *((_OWORD *)a3 + 9) = xmmword_1B66A1FE0;
    }
    v4 = 40;
  }
  *a4 = v4;
  return result;
}

uint64_t AUWindKill::GetParameterInfo(AUWindKill *this, int a2, unsigned int a3, AudioUnitParameterInfo *buffer)
{
  uint64_t result;
  const __CFString *v6;
  UInt32 v7;
  AudioUnitParameterUnit v8;
  AudioUnitParameterValue v9;
  AudioUnitParameterValue v10;
  AudioUnitParameterValue v11;
  int v12;
  AudioUnitParameterOptions flags;

  buffer->flags = 0;
  buffer->unitName = 0;
  if (a2)
    return 4294956430;
  if (a3 > 0x27)
    return 4294956418;
  v6 = off_1E69D9690[a3];
  v7 = dword_1B665ED9C[a3];
  v8 = dword_1B665EE3C[a3];
  v9 = flt_1B665EEDC[a3];
  v10 = flt_1B665EF7C[a3];
  v11 = flt_1B665F01C[a3];
  v12 = dword_1B665F0BC[a3];
  buffer->cfNameString = v6;
  buffer->flags = 0x8000000;
  CFStringGetCString(v6, buffer->name, 52, 0x8000100u);
  result = 0;
  buffer->clumpID = v7;
  flags = buffer->flags;
  buffer->unit = v8;
  buffer->minValue = v9;
  buffer->maxValue = v10;
  buffer->defaultValue = v11;
  buffer->flags = flags | v12;
  return result;
}

uint64_t AUWindKill::RestoreState(OpaqueAudioComponentInstance **this, const void *a2)
{
  uint64_t result;

  result = ausdk::AUBase::RestoreState(this, a2);
  if (!(_DWORD)result)
    ++*((_DWORD *)this + 132);
  return result;
}

uint64_t AUWindKill::GetParameterValueStrings(AUWindKill *this, int a2, int a3, const __CFArray **a4)
{
  uint64_t result;
  const __CFArray *v6;
  _OWORD v7[2];
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  if (!a4)
    return 0;
  if (a2)
    return 4294956430;
  if (a3 != 13)
    return 0;
  v7[0] = xmmword_1E69D9670;
  v7[1] = *(_OWORD *)off_1E69D9680;
  v6 = CFArrayCreate(0, (const void **)v7, 4, 0);
  result = 0;
  *a4 = v6;
  return result;
}

double AUWindKill::GetLatency(AUWindKill *this)
{
  return 0.0;
}

double AUWindKill::GetTailTime(AUWindKill *this)
{
  return 0.05;
}

uint64_t AUWindKill::SupportsTail(AUWindKill *this)
{
  return 1;
}

BOOL AUWindKill::StreamFormatWritable(AUWindKill *this)
{
  return *((_BYTE *)this + 17) == 0;
}

uint64_t AUWindKill::SupportedNumChannels(AUWindKill *this, const AUChannelInfo **a2)
{
  if (a2)
    *a2 = (const AUChannelInfo *)&AUWindKill::SupportedNumChannels(AUChannelInfo const**)::sSupportedChannelConfigs;
  return 1;
}

uint64_t AUWindKill::ValidFormat(AUWindKill *this, int a2, int a3, const AudioStreamBasicDescription *a4)
{
  UInt32 mBitsPerChannel;
  UInt32 mBytesPerPacket;
  UInt32 mChannelsPerFrame;
  UInt32 mBytesPerFrame;
  BOOL v8;
  BOOL v11;
  _BOOL4 v12;
  int v13;
  uint64_t result;
  BOOL v16;
  AudioFormatFlags mFormatFlags;
  int v18;
  _BOOL4 v19;
  int v20;

  mBitsPerChannel = a4->mBitsPerChannel;
  if (a2 != 2 || a3 != 2)
  {
    if (mBitsPerChannel == 64 && a4->mFormatID == 1718773105)
      result = (LOBYTE(a4->mFormatFlags) >> 5) & 1;
    else
      result = 0;
    if (a2 == 1)
    {
      mChannelsPerFrame = a4->mChannelsPerFrame;
    }
    else
    {
      if (a2 != 2)
        return result;
      mChannelsPerFrame = a4->mChannelsPerFrame;
      if (a3)
        goto LABEL_48;
    }
    v16 = mChannelsPerFrame == 2;
    goto LABEL_49;
  }
  mBytesPerPacket = a4->mBytesPerPacket;
  mBytesPerFrame = a4->mBytesPerFrame;
  mChannelsPerFrame = a4->mChannelsPerFrame;
  v8 = a4->mFormatID == 1819304813 && a4->mFramesPerPacket == 1;
  v11 = !v8 || mBytesPerFrame != mBytesPerPacket || mBitsPerChannel >> 3 > mBytesPerFrame || mChannelsPerFrame == 0;
  if (!v11
    && ((mFormatFlags = a4->mFormatFlags, (mFormatFlags & 0x20) != 0)
     || (v8 = mBytesPerPacket == mBytesPerPacket / mChannelsPerFrame * mChannelsPerFrame,
         mBytesPerPacket /= mChannelsPerFrame,
         v8)))
  {
    v18 = 8 * mBytesPerPacket;
    v12 = mBytesPerPacket == 4 && (a4->mFormatFlags & 0x1F84) == 0;
    if ((mFormatFlags & 1) != 0)
    {
      v19 = (a4->mFormatFlags & 0x1F84) == 0;
    }
    else
    {
      v12 = 0;
      v19 = 1;
    }
    if (v18 == mBitsPerChannel)
    {
      v20 = v19;
    }
    else
    {
      v12 = 0;
      v20 = 1;
    }
    if ((mFormatFlags & 2) != 0)
    {
      v12 = 0;
      v13 = 1;
    }
    else
    {
      v13 = v20;
    }
  }
  else
  {
    v12 = 0;
    v13 = 0;
  }
  if (mBitsPerChannel == 32)
    LODWORD(result) = v12 & v13;
  else
    LODWORD(result) = 0;
LABEL_48:
  v16 = mChannelsPerFrame == 1;
LABEL_49:
  if (v16)
    return result;
  else
    return 0;
}

void AUECMIMOHelper::~AUECMIMOHelper(AUECMIMOHelper *this)
{
  AUECMIMOHelper::~AUECMIMOHelper(this);
  JUMPOUT(0x1BCC95CECLL);
}

{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void **v6;

  *(_QWORD *)this = &off_1E69D97E0;
  v6 = (void **)((char *)this + 760);
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v6);
  v2 = (void *)*((_QWORD *)this + 92);
  if (v2)
  {
    *((_QWORD *)this + 93) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 89);
  if (v3)
  {
    *((_QWORD *)this + 90) = v3;
    operator delete(v3);
  }
  v4 = (void *)*((_QWORD *)this + 84);
  if (v4)
  {
    *((_QWORD *)this + 85) = v4;
    operator delete(v4);
  }
  v5 = (void *)*((_QWORD *)this + 81);
  if (v5)
  {
    *((_QWORD *)this + 82) = v5;
    operator delete(v5);
  }
  v6 = (void **)((char *)this + 624);
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v6);
  ausdk::AUBase::~AUBase(this);
}

uint64_t AUECMIMOHelper::Initialize(AUECMIMOHelper *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  int v7;
  uint64_t v8;
  ausdk::AUElement *v9;
  uint64_t result;
  ausdk::AUElement **v11;
  uint64_t v12;
  ausdk::AUElement *v13;
  ausdk::AUElement **v14;
  uint64_t v15;
  ausdk::AUElement *v16;
  ausdk::AUElement **v17;
  uint64_t v18;
  ausdk::AUElement *v19;
  ausdk::AUElement **v20;
  uint64_t v21;
  ausdk::AUElement *v22;
  ausdk::AUElement **v23;
  uint64_t v24;
  ausdk::AUElement *v25;
  ausdk::AUElement **v26;
  uint64_t v27;
  ausdk::AUElement *v28;
  ausdk::AUElement **v29;
  int v30;
  float v31;
  int v32;
  float v33;
  int v34;
  int v35;
  unsigned int v36;
  int v37;
  uint64_t v38;
  ausdk::AUElement *v39;
  ausdk::AUElement **v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  int v45;

  v2 = *((_QWORD *)this + 15);
  if (v2)
    LODWORD(v3) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 24))(v2);
  else
    v3 = (*((_QWORD *)this + 13) - *((_QWORD *)this + 12)) >> 3;
  if ((_DWORD)v3 != 2)
    return 4294956428;
  v4 = *((_QWORD *)this + 21);
  if (v4)
    LODWORD(v5) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 24))(v4);
  else
    v5 = (*((_QWORD *)this + 19) - *((_QWORD *)this + 18)) >> 3;
  if ((_DWORD)v5 != 1)
    return 4294956428;
  v6 = *(_DWORD *)(ausdk::AUScope::SafeGetElement((AUECMIMOHelper *)((char *)this + 80), 1u) + 108);
  if ((v6 - 9) < 0xFFFFFFF8)
    return 4294956428;
  v7 = *(_DWORD *)(ausdk::AUScope::SafeGetElement((AUECMIMOHelper *)((char *)this + 80), 0) + 108);
  if ((v7 - 9) < 0xFFFFFFF8
    || *(_DWORD *)(ausdk::AUScope::SafeGetElement((AUECMIMOHelper *)((char *)this + 128), 0) + 108) != 1)
  {
    return 4294956428;
  }
  *((_DWORD *)this + 135) = v6;
  *((_DWORD *)this + 137) = v7;
  v8 = *((_QWORD *)this + 9);
  if (v8)
  {
    v9 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v8 + 32))(v8, 0);
  }
  else
  {
    v11 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v11)
      v9 = 0;
    else
      v9 = *v11;
  }
  *((_DWORD *)this + 139) = (int)ausdk::AUElement::GetParameter(v9, 0);
  v12 = *((_QWORD *)this + 9);
  if (v12)
  {
    v13 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v12 + 32))(v12, 0);
  }
  else
  {
    v14 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v14)
      v13 = 0;
    else
      v13 = *v14;
  }
  *((float *)this + 174) = ausdk::AUElement::GetParameter(v13, 1u);
  v15 = *((_QWORD *)this + 9);
  if (v15)
  {
    v16 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v15 + 32))(v15, 0);
  }
  else
  {
    v17 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v17)
      v16 = 0;
    else
      v16 = *v17;
  }
  *((float *)this + 175) = ausdk::AUElement::GetParameter(v16, 2u);
  v18 = *((_QWORD *)this + 9);
  if (v18)
  {
    v19 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v18 + 32))(v18, 0);
  }
  else
  {
    v20 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v20)
      v19 = 0;
    else
      v19 = *v20;
  }
  *((float *)this + 176) = ausdk::AUElement::GetParameter(v19, 3u);
  v21 = *((_QWORD *)this + 9);
  if (v21)
  {
    v22 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v21 + 32))(v21, 0);
  }
  else
  {
    v23 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v23)
      v22 = 0;
    else
      v22 = *v23;
  }
  *((_DWORD *)this + 140) = (int)ausdk::AUElement::GetParameter(v22, 4u);
  v24 = *((_QWORD *)this + 9);
  if (v24)
  {
    v25 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v24 + 32))(v24, 0);
  }
  else
  {
    v26 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v26)
      v25 = 0;
    else
      v25 = *v26;
  }
  *((float *)this + 145) = ausdk::AUElement::GetParameter(v25, 7u);
  v27 = *((_QWORD *)this + 9);
  if (v27)
  {
    v28 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v27 + 32))(v27, 0);
  }
  else
  {
    v29 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v29)
      v28 = 0;
    else
      v28 = *v29;
  }
  *((float *)this + 150) = ausdk::AUElement::GetParameter(v28, 8u);
  AUECMIMOHelper::update_params(this);
  *((_DWORD *)this + 198) = *((_DWORD *)this + 197);
  v30 = *((_DWORD *)this + 84);
  *((_DWORD *)this + 132) = v30;
  *((_DWORD *)this + 133) = 2 * v30;
  *((_DWORD *)this + 138) = v30 + 1;
  v31 = *(double *)(ausdk::AUScope::SafeGetElement((AUECMIMOHelper *)((char *)this + 80), 0) + 80);
  v32 = (int)v31;
  v33 = (float)(int)v31;
  v34 = (float)((float)(v33 * (float)*((int *)this + 139)) / 1000.0);
  v35 = *((_DWORD *)this + 132);
  if (v35 > v34)
    v34 = *((_DWORD *)this + 132);
  v36 = vcvtps_u32_f32((float)v34 / (float)v35);
  *((_DWORD *)this + 134) = v32;
  *((_DWORD *)this + 136) = v36;
  *((_DWORD *)this + 141) = v35 * v36;
  v37 = (float)((float)((float)(int)(v35 * v36) / v33) * 1000.0);
  *((_DWORD *)this + 140) = v37;
  v38 = *((_QWORD *)this + 9);
  if (v38)
  {
    v39 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v38 + 32))(v38, 0);
    v37 = *((_DWORD *)this + 140);
  }
  else
  {
    v40 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v40)
      v39 = 0;
    else
      v39 = *v40;
  }
  ausdk::AUElement::SetParameter(v39, 4u, (float)v37, 0);
  AUECMIMOHelper::fcn_vector_init((uint64_t *)this + 78, *((_DWORD *)this + 135), *((_DWORD *)this + 133));
  v41 = (4
                     * *((_DWORD *)this + 133)
                     * *((_DWORD *)this + 137)
                     * *((_DWORD *)this + 135)
                     * *((_DWORD *)this + 136));
  v45 = 0;
  *((_QWORD *)this + 82) = *((_QWORD *)this + 81);
  std::vector<float>::resize((uint64_t)this + 648, v41, &v45);
  v42 = (4
                     * *((_DWORD *)this + 133)
                     * *((_DWORD *)this + 137)
                     * *((_DWORD *)this + 135)
                     * *((_DWORD *)this + 136));
  v45 = 0;
  *((_QWORD *)this + 90) = *((_QWORD *)this + 89);
  std::vector<float>::resize((uint64_t)this + 712, v42, &v45);
  v43 = (4
                     * *((_DWORD *)this + 133)
                     * *((_DWORD *)this + 137)
                     * *((_DWORD *)this + 135)
                     * *((_DWORD *)this + 136));
  v45 = 0;
  *((_QWORD *)this + 85) = *((_QWORD *)this + 84);
  std::vector<float>::resize((uint64_t)this + 672, v43, &v45);
  AUECMIMOHelper::fcn_vector_init((uint64_t *)this + 95, *((_DWORD *)this + 135), *((_DWORD *)this + 136));
  v44 = *((unsigned int *)this + 133);
  v45 = 0;
  *((_QWORD *)this + 93) = *((_QWORD *)this + 92);
  std::vector<float>::resize((uint64_t)this + 736, v44, &v45);
  result = 0;
  *((_DWORD *)this + 196) = 0;
  return result;
}

uint64_t AUECMIMOHelper::GetPropertyInfo(AUECMIMOHelper *this, int a2, int a3, unsigned int a4, unsigned int *a5, BOOL *a6)
{
  uint64_t result;
  int v7;

  if (a3)
    return 4294956417;
  if (a2 == 103800)
  {
    *a6 = 1;
    v7 = 4 * *((_DWORD *)this + 133) * *((_DWORD *)this + 137) * *((_DWORD *)this + 135) * *((_DWORD *)this + 136);
  }
  else
  {
    if (a2 == 3700)
    {
      *a6 = 0;
    }
    else
    {
      if (a2 != 21)
        return 4294956417;
      *a6 = 1;
    }
    v7 = 4;
  }
  result = 0;
  *a5 = v7;
  return result;
}

uint64_t AUECMIMOHelper::GetProperty(AUECMIMOHelper *this, int a2, int a3, unsigned int a4, _DWORD *a5)
{
  uint64_t result;
  int v6;

  if (a3)
    return 4294956417;
  if (a2 == 3700)
  {
    v6 = *((unsigned __int8 *)this + 376);
  }
  else
  {
    if (a2 != 21)
      return 4294956417;
    v6 = *((_DWORD *)this + 142);
  }
  result = 0;
  *a5 = v6;
  return result;
}

uint64_t AUECMIMOHelper::SetProperty(AUECMIMOHelper *this, int a2, int a3, unsigned int a4, _DWORD *__src, size_t __n)
{
  uint64_t v6;

  if (a3)
    return 4294956417;
  if (a2 == 103800)
  {
    if ((_DWORD)__n == 4
                      * *((_DWORD *)this + 133)
                      * *((_DWORD *)this + 137)
                      * *((_DWORD *)this + 135)
                      * *((_DWORD *)this + 136))
    {
      *((_BYTE *)this + 576) = 1;
      memcpy(*((void **)this + 81), __src, __n);
      return 0;
    }
    else
    {
      v6 = 0;
      *((_BYTE *)this + 576) = 0;
    }
  }
  else
  {
    if (a2 != 21)
      return 4294956417;
    if (__n >= 4)
    {
      v6 = 0;
      *((_DWORD *)this + 142) = *__src != 0;
    }
    else
    {
      return 4294956445;
    }
  }
  return v6;
}

uint64_t AUECMIMOHelper::SetParameter(ausdk::AUElement ***this, unsigned int a2, unsigned int a3, unsigned int a4, float a5)
{
  ausdk::AUScope *Scope;
  ausdk::AUElement *Element;
  ausdk::AUElement **v10;
  ausdk::AUElement **v11;

  if (a3)
  {
    Scope = (ausdk::AUScope *)ausdk::AUBase::GetScope((ausdk::AUBase *)this, a3);
    Element = (ausdk::AUElement *)ausdk::AUScope::SafeGetElement(Scope, a4);
  }
  else
  {
    if (*((_BYTE *)this + 17) && (a2 - 9 < 6 || a2 == 5))
      ++*((_DWORD *)this + 197);
    v10 = this[9];
    if (v10)
    {
      Element = (ausdk::AUElement *)(*((uint64_t (**)(ausdk::AUElement **, _QWORD))*v10 + 4))(this[9], 0);
    }
    else
    {
      v11 = this[6];
      if (this[7] == v11)
        Element = 0;
      else
        Element = *v11;
    }
  }
  ausdk::AUElement::SetParameter(Element, a2, a5, 0);
  return 0;
}

uint64_t AUECMIMOHelper::CanScheduleParameters(AUECMIMOHelper *this)
{
  return 0;
}

uint64_t AUECMIMOHelper::ProcessMultipleBufferLists(AUECMIMOHelper *this, unsigned int *a2, int a3, unsigned int a4, const AudioBufferList **a5, unsigned int a6, AudioBufferList **a7)
{
  int v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  const void *v14;
  void *mData;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  int v19;
  int v20;
  int v21;
  vDSP_Length v22;
  int v23;
  float v24;
  float v25;
  int v26;
  float v27;
  float v28;
  float v29;
  unint64_t v30;
  int v31;
  int v32;
  int v33;
  int v34;
  int v35;
  uint64_t v36;
  float v37;
  float v38;
  const float *v39;
  const float *v40;
  vDSP_Length v41;
  float v42;
  float v43;
  float v44;
  uint64_t result;
  float v46;
  float v47;
  uint64_t v48;
  float v49;
  float v50;
  float v51;
  float v52;
  uint64_t v53;
  float v54;
  uint64_t v56;
  ausdk::AUElement *v57;
  ausdk::AUElement **v58;
  uint64_t v59;
  ausdk::AUElement *v60;
  ausdk::AUElement **v61;
  uint64_t v62;
  ausdk::AUElement *v63;
  ausdk::AUElement **v64;
  uint64_t v65;
  ausdk::AUElement *v66;
  ausdk::AUElement **v67;
  uint64_t v68;
  ausdk::AUElement *v69;
  ausdk::AUElement **v70;
  int v71;
  int v72;
  int v73;
  int v74;
  int v75;
  float v76;
  float v77;
  float v78;
  float v79;
  float __C;

  if (*((_DWORD *)this + 84) != a3)
    return 4294956422;
  v10 = *((_DWORD *)this + 197);
  if (*((_DWORD *)this + 198) != v10)
  {
    AUECMIMOHelper::update_params(this);
    *((_DWORD *)this + 198) = v10;
  }
  if (*((_DWORD *)this + 135))
  {
    v11 = 0;
    v12 = 0;
    v13 = 16;
    do
    {
      v14 = *(const void **)((char *)&a5[1]->mNumberBuffers + v13);
      memcpy(*(void **)(*((_QWORD *)this + 78) + v11), (const void *)(*(_QWORD *)(*((_QWORD *)this + 78) + v11) + 4 * *((int *)this + 132)), 4 * *((int *)this + 132));
      memcpy((void *)(*(_QWORD *)(*((_QWORD *)this + 78) + v11) + 4 * *((int *)this + 132)), v14, 4 * *((int *)this + 132));
      __C = 0.0;
      vDSP_svesq(*(const float **)(*((_QWORD *)this + 78) + v11), 1, &__C, *((int *)this + 133));
      *(float *)(*(_QWORD *)(*((_QWORD *)this + 95) + v11) + 4 * *((int *)this + 155)) = __C;
      ++v12;
      v11 += 24;
      v13 += 16;
    }
    while (v12 < *((unsigned int *)this + 135));
  }
  mData = (*a7)->mBuffers[0].mData;
  memcpy(mData, a5[1]->mBuffers[0].mData, 4 * *((int *)this + 132));
  LODWORD(v16) = *((_DWORD *)this + 135);
  if (v16 >= 2)
  {
    v17 = 1;
    v18 = 32;
    do
    {
      vDSP_vadd(*(const float **)((char *)&a5[1]->mNumberBuffers + v18), 1, (const float *)mData, 1, (float *)mData, 1, *((int *)this + 132));
      ++v17;
      v16 = *((unsigned int *)this + 135);
      v18 += 16;
    }
    while (v17 < v16);
  }
  if (*((_BYTE *)this + 576))
  {
    v19 = *((_DWORD *)this + 132);
    v76 = 0.0;
    v77 = 0.0;
    v20 = *((_DWORD *)this + 137);
    if (v20 < 1)
    {
      v29 = 1.0e-30;
      v28 = 0.0;
      v25 = 1.0e-30;
      v27 = 0.0;
      v24 = 0.0;
    }
    else
    {
      v21 = 0;
      v22 = (2 * v19);
      v23 = *((_DWORD *)this + 136);
      v24 = 0.0;
      v25 = 1.0e-30;
      v26 = v16;
      v27 = 0.0;
      v28 = 0.0;
      v29 = 1.0e-30;
      do
      {
        if (v26)
        {
          v30 = 0;
          v73 = v21;
          v74 = v26 * v21 * v23 * *((_DWORD *)this + 133);
          do
          {
            if (v23 >= 1)
            {
              v31 = 0;
              v32 = 0;
              v75 = v74 + v23 * v30 * *((_DWORD *)this + 133);
              do
              {
                v33 = v75 + *((_DWORD *)this + 133) * v32;
                vDSP_svesq((const float *)(*((_QWORD *)this + 81) + 4 * v33), 1, &v77, v22);
                v34 = *((_DWORD *)this + 155);
                v35 = v31 + v34;
                if (v31 + v34 < 0)
                  v35 = *((_DWORD *)this + 136) + v34 - v32;
                v36 = v33;
                v37 = *(float *)(*(_QWORD *)(*((_QWORD *)this + 95) + 24 * v30) + 4 * v35);
                v38 = v77;
                vDSP_vsub((const float *)(*((_QWORD *)this + 81) + 4 * v33), 1, (const float *)(*((_QWORD *)this + 89) + 4 * v33), 1, *((float **)this + 92), 1, v22);
                vDSP_svesq(*((const float **)this + 92), 1, &v76, *((int *)this + 133));
                v39 = (const float *)*((_QWORD *)this + 92);
                v40 = (const float *)(*((_QWORD *)this + 84) + 4 * v36);
                v41 = *((int *)this + 133);
                v42 = *((float *)this + 152);
                __C = 0.0;
                vDSP_dotpr(v39, 1, v40, 1, &__C, v41);
                v78 = 0.0;
                v79 = 0.0;
                vDSP_svesq(v39, 1, &v79, v41);
                vDSP_svesq(v40, 1, &v78, v41);
                v43 = sqrtf(v78 * v79);
                v44 = 0.0;
                if (v43 > v42)
                  v44 = __C / (float)((float)(v42 / 100.0) + v43);
                v29 = v29 + v38;
                v25 = v25 + (float)(v38 * v37);
                v27 = v27 + (float)((float)(v38 * v37) * (float)v32);
                v24 = v24 + (float)((float)(v38 * v37) * v44);
                memcpy((void *)(*((_QWORD *)this + 84) + 4 * v36), *((const void **)this + 92), 4 * *((int *)this + 133));
                v28 = v28 + (float)(*(float *)(*(_QWORD *)(*((_QWORD *)this + 95) + 24 * v30) + 4 * v35) * v76);
                ++v32;
                v23 = *((_DWORD *)this + 136);
                --v31;
              }
              while (v32 < v23);
              LODWORD(v16) = *((_DWORD *)this + 135);
            }
            ++v30;
          }
          while (v30 < v16);
          v20 = *((_DWORD *)this + 137);
          v26 = v16;
          v21 = v73;
        }
        ++v21;
      }
      while (v21 < v20);
    }
    v46 = -1.0;
    if ((float)(v24 / v25) >= -1.0)
      v46 = v24 / v25;
    if (v46 > 1.0)
      v46 = 1.0;
    v47 = *((float *)this + 145);
    v48 = 588;
    if (v46 > v47)
      v48 = 584;
    v49 = (float)(v46 * (float)(1.0 - *(float *)((char *)this + v48))) + (float)(*(float *)((char *)this + v48) * v47);
    *((float *)this + 145) = v49;
    v50 = *((float *)this + 148);
    v51 = 0.0;
    if (v49 > v50)
      v51 = (float)(v49 - v50) * *((float *)this + 151);
    *((float *)this + 175) = (float)((float)((float)((float)(v27 / v25) + 0.5) * 1000.0) * (float)*((int *)this + 132))
                           / (float)*((int *)this + 134);
    v52 = *((float *)this + 196);
    v53 = 612;
    if (v52 > v25)
      v53 = 616;
    v54 = (float)(v28 * 100.0)
        / (float)((float)((float)(*(float *)((char *)this + v53) * v52) + 1.0e-20)
                + (float)((float)(1.0 - *(float *)((char *)this + v53)) * v25));
    *((float *)this + 174) = v54;
    *((float *)this + 176) = v25 / v29;
    *((float *)this + 196) = v25;
    if (v54 <= v51 && *((_BYTE *)this + 596) != 0)
      v54 = v51;
    *((float *)this + 150) = v54;
    memcpy(*((void **)this + 89), *((const void **)this + 81), (4 * *((_DWORD *)this + 133) * v20 * v16 * *((_DWORD *)this + 136)));
  }
  else
  {
    *((_QWORD *)this + 87) = 1148829696;
    *((_DWORD *)this + 176) = 1065353216;
  }
  v56 = *((_QWORD *)this + 9);
  if (v56)
  {
    v57 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v56 + 32))(v56, 0);
  }
  else
  {
    v58 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v58)
      v57 = 0;
    else
      v57 = *v58;
  }
  ausdk::AUElement::SetParameter(v57, 1u, *((float *)this + 174), 0);
  v59 = *((_QWORD *)this + 9);
  if (v59)
  {
    v60 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v59 + 32))(v59, 0);
  }
  else
  {
    v61 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v61)
      v60 = 0;
    else
      v60 = *v61;
  }
  ausdk::AUElement::SetParameter(v60, 2u, *((float *)this + 175), 0);
  v62 = *((_QWORD *)this + 9);
  if (v62)
  {
    v63 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v62 + 32))(v62, 0);
  }
  else
  {
    v64 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v64)
      v63 = 0;
    else
      v63 = *v64;
  }
  ausdk::AUElement::SetParameter(v63, 3u, *((float *)this + 176), 0);
  v65 = *((_QWORD *)this + 9);
  if (v65)
  {
    v66 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v65 + 32))(v65, 0);
  }
  else
  {
    v67 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v67)
      v66 = 0;
    else
      v66 = *v67;
  }
  ausdk::AUElement::SetParameter(v66, 7u, *((float *)this + 145), 0);
  v68 = *((_QWORD *)this + 9);
  if (v68)
  {
    v69 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v68 + 32))(v68, 0);
  }
  else
  {
    v70 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v70)
      v69 = 0;
    else
      v69 = *v70;
  }
  ausdk::AUElement::SetParameter(v69, 8u, *((float *)this + 150), 0);
  result = 0;
  v71 = *((_DWORD *)this + 155);
  if (v71 + 1 < *((_DWORD *)this + 136))
    v72 = v71 + 1;
  else
    v72 = 0;
  *((_DWORD *)this + 155) = v72;
  return result;
}

uint64_t AUECMIMOHelper::Render(AUECMIMOHelper *this, unsigned int *a2, const AudioTimeStamp *a3, uint64_t a4)
{
  uint64_t Element;
  ausdk::AUInputElement *v9;
  uint64_t result;
  uint64_t v11;
  uint64_t BufferList;
  int HasInput;
  unsigned int v14;
  ausdk::AUInputElement *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD v18[3];

  v18[2] = *MEMORY[0x1E0C80C00];
  if (*((_DWORD *)this + 84) != (_DWORD)a4)
    return 4294956422;
  Element = ausdk::AUScope::SafeGetElement((AUECMIMOHelper *)((char *)this + 128), 0);
  if (!ausdk::AUBase::HasInput(this, 0))
    return 4294956420;
  v9 = (ausdk::AUInputElement *)ausdk::AUScope::SafeGetElement((AUECMIMOHelper *)((char *)this + 80), 0);
  result = ausdk::AUInputElement::PullInput(v9, a2, a3, 0, a4);
  if (!(_DWORD)result)
  {
    v11 = ausdk::AUScope::SafeGetElement((AUECMIMOHelper *)((char *)this + 80), 0);
    BufferList = ausdk::AUBufferList::GetBufferList((ausdk::AUBufferList *)(v11 + 144));
    HasInput = ausdk::AUBase::HasInput(this, 1u);
    v14 = 0;
    if (!HasInput
      || (v14 = 1,
          v15 = (ausdk::AUInputElement *)ausdk::AUScope::SafeGetElement((AUECMIMOHelper *)((char *)this + 80), 1u),
          result = ausdk::AUInputElement::PullInput(v15, a2, a3, 1, a4),
          !(_DWORD)result))
    {
      v16 = ausdk::AUScope::SafeGetElement((AUECMIMOHelper *)((char *)this + 80), v14);
      v18[0] = BufferList;
      v18[1] = ausdk::AUBufferList::GetBufferList((ausdk::AUBufferList *)(v16 + 144));
      v17 = ausdk::AUBufferList::GetBufferList((ausdk::AUBufferList *)(Element + 144));
      if (HasInput)
        return (*(uint64_t (**)(AUECMIMOHelper *, unsigned int *, uint64_t, uint64_t, _QWORD *, uint64_t, uint64_t *))(*(_QWORD *)this + 184))(this, a2, a4, 2, v18, 1, &v17);
      else
        return 0;
    }
  }
  return result;
}

uint64_t AUECMIMOHelper::GetParameterList(AUECMIMOHelper *this, int a2, unsigned int *a3, unsigned int *a4)
{
  uint64_t result;

  if (a2)
    return 4294956430;
  if (a3)
  {
    *(_OWORD *)a3 = xmmword_1B6626920;
    *((_OWORD *)a3 + 1) = xmmword_1B66A0770;
    *((_OWORD *)a3 + 2) = xmmword_1B66A07D0;
    *((_QWORD *)a3 + 6) = 0xD0000000CLL;
    a3[14] = 14;
  }
  result = 0;
  *a4 = 15;
  return result;
}

uint64_t AUECMIMOHelper::GetParameterInfo(AUECMIMOHelper *this, int a2, unsigned int a3, AudioUnitParameterInfo *buffer)
{
  uint64_t result;
  const __CFString *v6;
  AudioUnitParameterUnit v7;
  AudioUnitParameterValue v8;
  AudioUnitParameterValue v9;
  AudioUnitParameterValue v10;
  int v11;

  buffer->flags = 0x40000000;
  buffer->unitName = 0;
  result = 4294956418;
  if (!a2 && a3 <= 0xE)
  {
    v6 = off_1E69D9A20[a3];
    v7 = dword_1B665F17C[a3];
    v8 = flt_1B665F1B8[a3];
    v9 = flt_1B665F1F4[a3];
    v10 = flt_1B665F230[a3];
    v11 = dword_1B665F26C[a3];
    buffer->cfNameString = v6;
    buffer->flags = 1207959552;
    CFStringGetCString(v6, buffer->name, 52, 0x8000100u);
    result = 0;
    buffer->unit = v7;
    buffer->minValue = v8;
    buffer->maxValue = v9;
    buffer->defaultValue = v10;
    buffer->flags |= v11;
  }
  return result;
}

double AUECMIMOHelper::GetLatency(AUECMIMOHelper *this)
{
  return 0.0;
}

double AUECMIMOHelper::GetTailTime(AUECMIMOHelper *this)
{
  return 0.0;
}

uint64_t AUECMIMOHelper::SupportsTail(AUECMIMOHelper *this)
{
  return 1;
}

BOOL AUECMIMOHelper::StreamFormatWritable(AUECMIMOHelper *this)
{
  return *((_BYTE *)this + 17) == 0;
}

uint64_t AUECMIMOHelper::SupportedNumChannels(AUECMIMOHelper *this, const AUChannelInfo **a2)
{
  if (a2)
    *a2 = (const AUChannelInfo *)&AUECMIMOHelper::SupportedNumChannels(AUChannelInfo const**)::sSupportedChannelConfigs;
  return 8;
}

uint64_t AUECMIMOHelper::ValidFormat(AUECMIMOHelper *this, const AudioStreamBasicDescription *a2, unsigned int a3, AudioStreamBasicDescription *a4)
{
  int v6;
  uint64_t result;

  v6 = (int)a2;
  result = ausdk::ASBD::IsCommonFloat32((ausdk::ASBD *)a4, a2);
  if ((_DWORD)result)
    result = (a4->mFormatFlags & 0x20) != 0 || a4->mChannelsPerFrame == 1;
  if (v6 == 2)
  {
    if (a4->mChannelsPerFrame == 1)
      result = result;
    else
      result = 0;
  }
  else if (v6 == 1)
  {
    if (a4->mChannelsPerFrame)
      result = result;
    else
      result = 0;
  }
  if (a3 <= 1)
  {
    if (a4->mChannelsPerFrame < 9)
      return result;
    else
      return 0;
  }
  return result;
}

void AUECMIMOHelper::update_params(AUECMIMOHelper *this)
{
  uint64_t v2;
  ausdk::AUElement *v3;
  ausdk::AUElement **v4;
  uint64_t v5;
  ausdk::AUElement *v6;
  ausdk::AUElement **v7;
  uint64_t v8;
  ausdk::AUElement *v9;
  ausdk::AUElement **v10;
  uint64_t v11;
  ausdk::AUElement *v12;
  ausdk::AUElement **v13;
  uint64_t v14;
  ausdk::AUElement *v15;
  ausdk::AUElement **v16;
  uint64_t v17;
  ausdk::AUElement *v18;
  ausdk::AUElement **v19;
  uint64_t v20;
  ausdk::AUElement *v21;
  ausdk::AUElement **v22;
  uint64_t v23;
  ausdk::AUElement *v24;
  ausdk::AUElement **v25;
  float v26;

  v2 = *((_QWORD *)this + 9);
  if (v2)
  {
    v3 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v2 + 32))(v2, 0);
  }
  else
  {
    v4 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v4)
      v3 = 0;
    else
      v3 = *v4;
  }
  *((float *)this + 153) = ausdk::AUElement::GetParameter(v3, 5u);
  v5 = *((_QWORD *)this + 9);
  if (v5)
  {
    v6 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v5 + 32))(v5, 0);
  }
  else
  {
    v7 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v7)
      v6 = 0;
    else
      v6 = *v7;
  }
  *((float *)this + 154) = ausdk::AUElement::GetParameter(v6, 6u);
  v8 = *((_QWORD *)this + 9);
  if (v8)
  {
    v9 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v8 + 32))(v8, 0);
  }
  else
  {
    v10 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v10)
      v9 = 0;
    else
      v9 = *v10;
  }
  *((float *)this + 146) = ausdk::AUElement::GetParameter(v9, 0xAu);
  v11 = *((_QWORD *)this + 9);
  if (v11)
  {
    v12 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v11 + 32))(v11, 0);
  }
  else
  {
    v13 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v13)
      v12 = 0;
    else
      v12 = *v13;
  }
  *((float *)this + 147) = ausdk::AUElement::GetParameter(v12, 0xBu);
  v14 = *((_QWORD *)this + 9);
  if (v14)
  {
    v15 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v14 + 32))(v14, 0);
  }
  else
  {
    v16 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v16)
      v15 = 0;
    else
      v15 = *v16;
  }
  *((float *)this + 148) = fmaxf(ausdk::AUElement::GetParameter(v15, 0xCu), 0.0);
  v17 = *((_QWORD *)this + 9);
  if (v17)
  {
    v18 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v17 + 32))(v17, 0);
  }
  else
  {
    v19 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v19)
      v18 = 0;
    else
      v18 = *v19;
  }
  *((_BYTE *)this + 596) = ausdk::AUElement::GetParameter(v18, 9u) != 0.0;
  v20 = *((_QWORD *)this + 9);
  if (v20)
  {
    v21 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v20 + 32))(v20, 0);
  }
  else
  {
    v22 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v22)
      v21 = 0;
    else
      v21 = *v22;
  }
  *((float *)this + 151) = ausdk::AUElement::GetParameter(v21, 0xDu);
  v23 = *((_QWORD *)this + 9);
  if (v23)
  {
    v24 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v23 + 32))(v23, 0);
  }
  else
  {
    v25 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v25)
      v24 = 0;
    else
      v24 = *v25;
  }
  v26 = ausdk::AUElement::GetParameter(v24, 0xEu) * 0.1;
  *((float *)this + 152) = __exp10f(v26);
}

void AUECMIMOHelper::fcn_vector_init(uint64_t *a1, unsigned int a2, unsigned int a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;

  v9 = 0;
  std::vector<std::vector<float>>::__clear[abi:ne180100](a1);
  v6 = a2;
  std::vector<std::vector<float>>::resize(a1, a2);
  if (a2)
  {
    v7 = 0;
    v8 = 24 * v6;
    do
    {
      std::vector<float>::resize(*a1 + v7, a3, &v9);
      v7 += 24;
    }
    while (v8 != v7);
  }
}

os_log_t ___Z10SCLogScopev_block_invoke()
{
  _QWORD *v0;
  os_log_t result;

  v0 = (_QWORD *)operator new();
  v0[1] = 0;
  result = os_log_create("com.apple.coreaudio", "spcp");
  *v0 = result;
  SCLogScope(void)::scope = (uint64_t)v0;
  return result;
}

void GetDOAFrequencySmoothingOptions(_QWORD *a1)
{
  std::string *v2;
  _DWORD *v3;
  std::string *v4;
  uint64_t i;
  std::string *v6;
  std::string *v7;
  std::string *v8;
  std::string **v9;
  char v10;
  __int128 v11;
  _QWORD v12[3];
  _QWORD v13[3];
  _QWORD v14[3];
  _QWORD v15[3];
  __int128 v16;

  *(_QWORD *)&v16 = *MEMORY[0x1E0C80C00];
  std::string::basic_string[abi:ne180100]<0>(&v11, "0");
  std::string::basic_string[abi:ne180100]<0>(v12, "1/48");
  std::string::basic_string[abi:ne180100]<0>(v13, "1/24");
  std::string::basic_string[abi:ne180100]<0>(v14, "1/12");
  std::string::basic_string[abi:ne180100]<0>(v15, "1/6");
  v6 = 0;
  v7 = 0;
  v8 = 0;
  v9 = &v6;
  v10 = 0;
  v6 = (std::string *)operator new(0x78uLL);
  v7 = v6;
  v8 = v6 + 5;
  v2 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v8, &v11, &v16, v6);
  v7 = v2;
  v3 = operator new(0x14uLL);
  v3[4] = 1042983595;
  *(_OWORD *)v3 = xmmword_1B665F2A8;
  v4 = v8;
  *a1 = v6;
  a1[1] = v2;
  v7 = 0;
  v8 = 0;
  v6 = 0;
  a1[2] = v4;
  a1[3] = v3;
  a1[4] = v3 + 5;
  a1[5] = v3 + 5;
  v9 = &v6;
  std::vector<std::__fs::filesystem::path>::__destroy_vector::operator()[abi:ne180100]((void ***)&v9);
  for (i = 0; i != -15; i -= 3)
  {
    if (SHIBYTE(v15[i + 2]) < 0)
      operator delete((void *)v15[i]);
  }
}

void sub_1B63ACE54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, void **a13, uint64_t a14, char a15)
{
  uint64_t v16;

  a13 = (void **)&a10;
  std::vector<std::__fs::filesystem::path>::__destroy_vector::operator()[abi:ne180100](&a13);
  v16 = 0;
  while (1)
  {
    if (*(&a15 + v16 + 119) < 0)
      operator delete(*(void **)(&a15 + v16 + 96));
    v16 -= 24;
    if (v16 == -120)
      _Unwind_Resume(a1);
  }
}

void FillSpatialCaptureParameterMap(uint64_t **a1)
{
  std::vector<std::string>::pointer begin;
  std::vector<std::string>::pointer data;
  std::vector<std::string>::pointer v4;
  char *v5;
  std::vector<std::string>::pointer v6;
  std::vector<std::string>::pointer v7;
  std::vector<std::string>::pointer v8;
  _DWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  _DWORD *v14;
  _DWORD *v15;
  _DWORD *v16;
  _DWORD *v17;
  _DWORD *v18;
  _DWORD *v19;
  _DWORD *v20;
  _DWORD *v21;
  _DWORD *v22;
  _DWORD *v23;
  _DWORD *v24;
  _DWORD *v25;
  _DWORD *v26;
  _DWORD *v27;
  _DWORD *v28;
  _DWORD *v29;
  _DWORD *v30;
  _DWORD *v31;
  _DWORD *v32;
  _DWORD *v33;
  _DWORD *v34;
  _DWORD *v35;
  _DWORD *v36;
  std::vector<std::string>::pointer end;
  std::vector<std::string>::pointer v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  char v44;
  char v45;
  uint64_t v46;
  char v47;
  std::string *v48;
  unint64_t v49;
  void *v50;
  void *v51;
  uint64_t v52;
  void *v53[3];
  void *v54;
  void *v55;
  uint64_t v56;
  std::string v57;
  void *v58;
  void *v59;
  uint64_t v60;
  void *v61[3];
  void *v62;
  void *v63;
  uint64_t v64;
  void *v65[3];
  void *v66;
  void *v67;
  uint64_t v68;
  void *v69[3];
  void *v70;
  void *v71;
  uint64_t v72;
  void *v73[3];
  void *v74;
  void *v75;
  uint64_t v76;
  void *v77[3];
  void *v78;
  void *v79;
  uint64_t v80;
  void *v81[3];
  void *v82;
  void *v83;
  uint64_t v84;
  void *v85[3];
  void *v86;
  void *v87;
  uint64_t v88;
  void *v89[3];
  void *v90;
  void *v91;
  uint64_t v92;
  void *v93[3];
  void *v94;
  void *v95;
  uint64_t v96;
  void *v97[3];
  void *v98;
  void *v99;
  uint64_t v100;
  std::string v101;
  std::string *v102;
  std::string *v103;
  void **p_data;
  void *v105;
  void *v106;
  uint64_t v107;
  std::string v108;
  void *v109;
  void *v110;
  uint64_t v111;
  void *v112[3];
  void *v113;
  void *v114;
  uint64_t v115;
  void *v116[3];
  void *v117;
  void *v118;
  uint64_t v119;
  void *v120[3];
  void *v121;
  void *v122;
  uint64_t v123;
  void *v124[3];
  void *v125;
  void *v126;
  uint64_t v127;
  void *v128[3];
  void *v129;
  void *v130;
  uint64_t v131;
  void *v132[3];
  void *v133;
  void *v134;
  uint64_t v135;
  __int128 v136;
  uint64_t v137;
  void *v138;
  void *v139;
  __int128 v140;
  uint64_t v141;
  void *v142;
  void *v143;
  uint64_t v144;
  void *v145[3];
  void *v146;
  void *v147;
  uint64_t v148;
  void *v149[3];
  void *v150;
  void *v151;
  _DWORD *v152;
  void *v153[3];
  void *v154;
  void *v155;
  _DWORD *v156;
  void *v157[3];
  void *v158;
  void *v159;
  _DWORD *v160;
  void *v161[3];
  void *v162;
  void *v163;
  _DWORD *v164;
  void *v165[3];
  void *v166;
  void *v167;
  _DWORD *v168;
  void *v169[3];
  void *v170;
  void *v171;
  _DWORD *v172;
  void *v173[3];
  void *v174;
  void *v175;
  _DWORD *v176;
  void *v177[3];
  void *v178;
  void *v179;
  _DWORD *v180;
  void *v181[3];
  void *v182;
  void *v183;
  _DWORD *v184;
  void *v185[3];
  void *v186;
  void *v187;
  _DWORD *v188;
  void *v189[3];
  void *v190;
  void *v191;
  _DWORD *v192;
  void *v193[3];
  void *v194;
  void *v195;
  _DWORD *v196;
  void *v197[3];
  void *v198;
  void *v199;
  _DWORD *v200;
  void *v201[3];
  void *v202;
  void *v203;
  _DWORD *v204;
  void *v205[3];
  void *v206;
  void *v207;
  _DWORD *v208;
  void *v209[3];
  void *v210;
  void *v211;
  _DWORD *v212;
  void *v213[3];
  void *v214;
  void *v215;
  _DWORD *v216;
  void *v217[3];
  void *v218;
  void *v219;
  _DWORD *v220;
  void *v221[3];
  void *v222;
  void *v223;
  _DWORD *v224;
  void *v225[3];
  void *v226;
  void *v227;
  _DWORD *v228;
  void *v229[3];
  void *v230;
  void *v231;
  _DWORD *v232;
  void *v233[3];
  void *v234;
  void *v235;
  _DWORD *v236;
  void *v237[3];
  void *v238;
  void *v239;
  _DWORD *v240;
  void *v241[3];
  void *v242;
  void *v243;
  _QWORD *v244;
  void *v245[3];
  void *v246;
  void *v247;
  _QWORD *v248;
  void *v249[3];
  void *v250;
  void *v251;
  _QWORD *v252;
  void *v253[3];
  void *v254;
  void *v255;
  _QWORD *v256;
  void *v257[3];
  void *v258;
  void *v259;
  _DWORD *v260;
  void *v261[3];
  void *v262;
  void *v263;
  uint64_t v264;
  void *v265[3];
  void *__p;
  void *v267;
  uint64_t v268;
  std::string v269;
  std::vector<std::string> v270;
  char *v271;
  char *v272;
  char *v273;
  std::string v274;
  std::vector<std::string> v275;
  std::vector<std::string> v276;
  void *v277[3];
  __int128 v278;
  uint64_t v279;

  v279 = *MEMORY[0x1E0C80C00];
  std::vector<std::string>::vector(&v275, 2uLL);
  begin = v275.__begin_;
  if (SHIBYTE(v275.__begin_[1].__r_.__value_.__r.__words[2]) < 0)
  {
    v275.__begin_[1].__r_.__value_.__l.__size_ = 4;
    data = (std::vector<std::string>::pointer)begin[1].__r_.__value_.__l.__data_;
  }
  else
  {
    data = v275.__begin_ + 1;
    *((_BYTE *)&v275.__begin_[1].__r_.__value_.__s + 23) = 4;
  }
  strcpy((char *)data, "Back");
  v4 = v275.__begin_;
  if (SHIBYTE(v275.__begin_->__r_.__value_.__r.__words[2]) < 0)
  {
    v275.__begin_->__r_.__value_.__l.__size_ = 5;
    v4 = (std::vector<std::string>::pointer)v4->__r_.__value_.__r.__words[0];
  }
  else
  {
    *((_BYTE *)&v275.__begin_->__r_.__value_.__s + 23) = 5;
  }
  strcpy((char *)v4, "Front");
  memset(&v274, 0, sizeof(v274));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v274, (__int128 *)v275.__begin_, (__int128 *)v275.__end_, 0xAAAAAAAAAAAAAAABLL * (((char *)v275.__end_ - (char *)v275.__begin_) >> 3));
  v5 = (char *)operator new(8uLL);
  v271 = v5;
  *(_QWORD *)v5 = 0x100000000;
  v272 = v5 + 8;
  v273 = v5 + 8;
  AUSpatialCapture::AddParameterToMap(a1, 0, 1u, -1073741824, CFSTR("Camera Direction"), (uint64_t)&v274, 0, &v271, 0.0, 1.0, 1.0);
  if (v271)
  {
    v272 = v271;
    operator delete(v271);
  }
  v276.__begin_ = &v274;
  std::vector<std::__fs::filesystem::path>::__destroy_vector::operator()[abi:ne180100]((void ***)&v276);
  std::vector<std::string>::vector(&v270, 4uLL);
  v6 = v270.__begin_;
  if (SHIBYTE(v270.__begin_->__r_.__value_.__r.__words[2]) < 0)
  {
    v270.__begin_->__r_.__value_.__l.__size_ = 8;
    v6 = (std::vector<std::string>::pointer)v6->__r_.__value_.__r.__words[0];
  }
  else
  {
    *((_BYTE *)&v270.__begin_->__r_.__value_.__s + 23) = 8;
  }
  strcpy((char *)v6, "Portrait");
  v7 = v270.__begin_;
  if (SHIBYTE(v270.__begin_[1].__r_.__value_.__r.__words[2]) < 0)
  {
    v270.__begin_[1].__r_.__value_.__l.__size_ = 18;
    v8 = (std::vector<std::string>::pointer)v7[1].__r_.__value_.__l.__data_;
  }
  else
  {
    v8 = v270.__begin_ + 1;
    *((_BYTE *)&v270.__begin_[1].__r_.__value_.__s + 23) = 18;
  }
  strcpy((char *)v8, "PortraitUpsideDown");
  std::string::__assign_external(v270.__begin_ + 2, "LandscapeLeft (home button right)", 0x21uLL);
  std::string::__assign_external(v270.__begin_ + 3, "LandscapeRight (home button left)", 0x21uLL);
  memset(&v269, 0, sizeof(v269));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v269, (__int128 *)v270.__begin_, (__int128 *)v270.__end_, 0xAAAAAAAAAAAAAAABLL * (((char *)v270.__end_ - (char *)v270.__begin_) >> 3));
  v267 = 0;
  __p = 0;
  v268 = 0;
  AUSpatialCapture::AddParameterToMap(a1, 1u, 1u, -1073741824, CFSTR("Target UI Orientation"), (uint64_t)&v269, 0, (char **)&__p, 1.0, 4.0, 3.0);
  if (__p)
  {
    v267 = __p;
    operator delete(__p);
  }
  v276.__begin_ = &v269;
  std::vector<std::__fs::filesystem::path>::__destroy_vector::operator()[abi:ne180100]((void ***)&v276);
  memset(v265, 0, sizeof(v265));
  v264 = 0;
  v262 = 0;
  v263 = 0;
  AUSpatialCapture::AddParameterToMap(a1, 0x1Eu, 0, 1073782784, CFSTR("Active UI Orientation"), (uint64_t)v265, 0, (char **)&v262, 0.0, 4.0, 3.0);
  if (v262)
  {
    v263 = v262;
    operator delete(v262);
  }
  v276.__begin_ = (std::vector<std::string>::pointer)v265;
  std::vector<std::__fs::filesystem::path>::__destroy_vector::operator()[abi:ne180100]((void ***)&v276);
  memset(v261, 0, sizeof(v261));
  v9 = operator new(4uLL);
  v258 = v9;
  *v9 = 1;
  v260 = v9 + 1;
  v259 = v9 + 1;
  AUSpatialCapture::AddParameterToMap(a1, 0x2Eu, 0, -1073741824, CFSTR("Camera field of view"), (uint64_t)v261, 0, (char **)&v258, 1.0, 180.0, 69.654);
  if (v258)
  {
    v259 = v258;
    operator delete(v258);
  }
  v276.__begin_ = (std::vector<std::string>::pointer)v261;
  std::vector<std::__fs::filesystem::path>::__destroy_vector::operator()[abi:ne180100]((void ***)&v276);
  memset(v257, 0, sizeof(v257));
  v10 = operator new(8uLL);
  v254 = v10;
  *v10 = 0x100000000;
  v256 = v10 + 1;
  v255 = v10 + 1;
  AUSpatialCapture::AddParameterToMap(a1, 0x32u, 0xDu, -1073741824, CFSTR("Beam gain (front camera)"), (uint64_t)v257, 0, (char **)&v254, -12.0, 12.0, 0.0);
  if (v254)
  {
    v255 = v254;
    operator delete(v254);
  }
  v276.__begin_ = (std::vector<std::string>::pointer)v257;
  std::vector<std::__fs::filesystem::path>::__destroy_vector::operator()[abi:ne180100]((void ***)&v276);
  memset(v253, 0, sizeof(v253));
  v11 = operator new(8uLL);
  v250 = v11;
  *v11 = 0x100000000;
  v252 = v11 + 1;
  v251 = v11 + 1;
  AUSpatialCapture::AddParameterToMap(a1, 0x33u, 0xDu, -1073741824, CFSTR("Default beam gain (back camera)"), (uint64_t)v253, 0, (char **)&v250, -12.0, 12.0, 0.0);
  if (v250)
  {
    v251 = v250;
    operator delete(v250);
  }
  v276.__begin_ = (std::vector<std::string>::pointer)v253;
  std::vector<std::__fs::filesystem::path>::__destroy_vector::operator()[abi:ne180100]((void ***)&v276);
  memset(v249, 0, sizeof(v249));
  v12 = operator new(8uLL);
  v246 = v12;
  *v12 = 0x100000000;
  v248 = v12 + 1;
  v247 = v12 + 1;
  AUSpatialCapture::AddParameterToMap(a1, 0x34u, 0xDu, -1073741824, CFSTR("Zoom in beam gain (back camera)"), (uint64_t)v249, 0, (char **)&v246, -12.0, 12.0, 0.0);
  if (v246)
  {
    v247 = v246;
    operator delete(v246);
  }
  v276.__begin_ = (std::vector<std::string>::pointer)v249;
  std::vector<std::__fs::filesystem::path>::__destroy_vector::operator()[abi:ne180100]((void ***)&v276);
  memset(v245, 0, sizeof(v245));
  v13 = operator new(8uLL);
  v242 = v13;
  *v13 = 0x100000000;
  v244 = v13 + 1;
  v243 = v13 + 1;
  AUSpatialCapture::AddParameterToMap(a1, 0x35u, 0xDu, -1073741824, CFSTR("Zoom out beam gain (back camera)"), (uint64_t)v245, 0, (char **)&v242, -12.0, 12.0, 0.0);
  if (v242)
  {
    v243 = v242;
    operator delete(v242);
  }
  v276.__begin_ = (std::vector<std::string>::pointer)v245;
  std::vector<std::__fs::filesystem::path>::__destroy_vector::operator()[abi:ne180100]((void ***)&v276);
  memset(v241, 0, sizeof(v241));
  v14 = operator new(4uLL);
  v238 = v14;
  *v14 = 1;
  v240 = v14 + 1;
  v239 = v14 + 1;
  AUSpatialCapture::AddParameterToMap(a1, 0x2Fu, 0, 1073782784, CFSTR("Zoom out -> default fade"), (uint64_t)v241, 1, (char **)&v238, 0.0, 1.0, 1.0);
  if (v238)
  {
    v239 = v238;
    operator delete(v238);
  }
  v276.__begin_ = (std::vector<std::string>::pointer)v241;
  std::vector<std::__fs::filesystem::path>::__destroy_vector::operator()[abi:ne180100]((void ***)&v276);
  memset(v237, 0, sizeof(v237));
  v15 = operator new(4uLL);
  v234 = v15;
  *v15 = 1;
  v236 = v15 + 1;
  v235 = v15 + 1;
  AUSpatialCapture::AddParameterToMap(a1, 0x30u, 0, 1073782784, CFSTR("Default + zoom out -> zoom in fade"), (uint64_t)v237, 1, (char **)&v234, 0.0, 1.0, 1.0);
  if (v234)
  {
    v235 = v234;
    operator delete(v234);
  }
  v276.__begin_ = (std::vector<std::string>::pointer)v237;
  std::vector<std::__fs::filesystem::path>::__destroy_vector::operator()[abi:ne180100]((void ***)&v276);
  memset(v233, 0, sizeof(v233));
  v16 = operator new(4uLL);
  v230 = v16;
  *v16 = 1;
  v232 = v16 + 1;
  v231 = v16 + 1;
  AUSpatialCapture::AddParameterToMap(a1, 0x31u, 2u, -1073733632, CFSTR("Override FOV control of beam fading"), (uint64_t)v233, 1, (char **)&v230, 0.0, 1.0, 0.0);
  if (v230)
  {
    v231 = v230;
    operator delete(v230);
  }
  v276.__begin_ = (std::vector<std::string>::pointer)v233;
  std::vector<std::__fs::filesystem::path>::__destroy_vector::operator()[abi:ne180100]((void ***)&v276);
  memset(v229, 0, sizeof(v229));
  v17 = operator new(4uLL);
  v226 = v17;
  *v17 = 1;
  v228 = v17 + 1;
  v227 = v17 + 1;
  AUSpatialCapture::AddParameterToMap(a1, 0x1Cu, 0, -1073741824, CFSTR("Override Zoom out -> default fade"), (uint64_t)v229, 1, (char **)&v226, 0.0, 1.0, 1.0);
  if (v226)
  {
    v227 = v226;
    operator delete(v226);
  }
  v276.__begin_ = (std::vector<std::string>::pointer)v229;
  std::vector<std::__fs::filesystem::path>::__destroy_vector::operator()[abi:ne180100]((void ***)&v276);
  memset(v225, 0, sizeof(v225));
  v18 = operator new(4uLL);
  v222 = v18;
  *v18 = 1;
  v224 = v18 + 1;
  v223 = v18 + 1;
  AUSpatialCapture::AddParameterToMap(a1, 0x1Du, 0, -1073741824, CFSTR("Override default + zoom out -> zoom in fade"), (uint64_t)v225, 1, (char **)&v222, 0.0, 1.0, 0.0);
  if (v222)
  {
    v223 = v222;
    operator delete(v222);
  }
  v276.__begin_ = (std::vector<std::string>::pointer)v225;
  std::vector<std::__fs::filesystem::path>::__destroy_vector::operator()[abi:ne180100]((void ***)&v276);
  memset(v221, 0, sizeof(v221));
  v19 = operator new(4uLL);
  v218 = v19;
  *v19 = 0;
  v220 = v19 + 1;
  v219 = v19 + 1;
  AUSpatialCapture::AddParameterToMap(a1, 0x16u, 2u, -1073741824, CFSTR("Limit wind boost"), (uint64_t)v221, 2, (char **)&v218, 0.0, 1.0, 1.0);
  if (v218)
  {
    v219 = v218;
    operator delete(v218);
  }
  v276.__begin_ = (std::vector<std::string>::pointer)v221;
  std::vector<std::__fs::filesystem::path>::__destroy_vector::operator()[abi:ne180100]((void ***)&v276);
  memset(v217, 0, sizeof(v217));
  v20 = operator new(4uLL);
  v214 = v20;
  *v20 = 0;
  v216 = v20 + 1;
  v215 = v20 + 1;
  AUSpatialCapture::AddParameterToMap(a1, 0x17u, 8u, -1069547520, CFSTR("Cutoff frequency for wind boost limiting"), (uint64_t)v217, 2, (char **)&v214, 1.0, 24000.0, 500.0);
  if (v214)
  {
    v215 = v214;
    operator delete(v214);
  }
  v276.__begin_ = (std::vector<std::string>::pointer)v217;
  std::vector<std::__fs::filesystem::path>::__destroy_vector::operator()[abi:ne180100]((void ***)&v276);
  memset(v213, 0, sizeof(v213));
  v21 = operator new(4uLL);
  v210 = v21;
  *v21 = 0;
  v212 = v21 + 1;
  v211 = v21 + 1;
  AUSpatialCapture::AddParameterToMap(a1, 0x18u, 0xDu, -1073741824, CFSTR("Wind boost detection threshold (dB)"), (uint64_t)v213, 2, (char **)&v210, 0.0, 12.0, 6.0);
  if (v210)
  {
    v211 = v210;
    operator delete(v210);
  }
  v276.__begin_ = (std::vector<std::string>::pointer)v213;
  std::vector<std::__fs::filesystem::path>::__destroy_vector::operator()[abi:ne180100]((void ***)&v276);
  memset(v209, 0, sizeof(v209));
  v22 = operator new(4uLL);
  v206 = v22;
  *v22 = 0;
  v208 = v22 + 1;
  v207 = v22 + 1;
  AUSpatialCapture::AddParameterToMap(a1, 0x19u, 0xDu, -1073741824, CFSTR("Max wind boost allowed (dB)"), (uint64_t)v209, 2, (char **)&v206, 0.0, 12.0, 0.0);
  if (v206)
  {
    v207 = v206;
    operator delete(v206);
  }
  v276.__begin_ = (std::vector<std::string>::pointer)v209;
  std::vector<std::__fs::filesystem::path>::__destroy_vector::operator()[abi:ne180100]((void ***)&v276);
  memset(v205, 0, sizeof(v205));
  v23 = operator new(4uLL);
  v202 = v23;
  *v23 = 0;
  v204 = v23 + 1;
  v203 = v23 + 1;
  AUSpatialCapture::AddParameterToMap(a1, 0x20u, 8u, 1077977088, CFSTR("Current Crossover Frequency (MAX)"), (uint64_t)v205, 2, (char **)&v202, 20.0, 20000.0, 20.0);
  if (v202)
  {
    v203 = v202;
    operator delete(v202);
  }
  v276.__begin_ = (std::vector<std::string>::pointer)v205;
  std::vector<std::__fs::filesystem::path>::__destroy_vector::operator()[abi:ne180100]((void ***)&v276);
  memset(v201, 0, sizeof(v201));
  v24 = operator new(4uLL);
  v198 = v24;
  *v24 = 0;
  v200 = v24 + 1;
  v199 = v24 + 1;
  AUSpatialCapture::AddParameterToMap(a1, 0x21u, 0xDu, -1006632960, CFSTR("Scale Cutoff"), (uint64_t)v201, 2, (char **)&v198, -100.0, 100.0, -100.0);
  if (v198)
  {
    v199 = v198;
    operator delete(v198);
  }
  v276.__begin_ = (std::vector<std::string>::pointer)v201;
  std::vector<std::__fs::filesystem::path>::__destroy_vector::operator()[abi:ne180100]((void ***)&v276);
  memset(v197, 0, sizeof(v197));
  v25 = operator new(4uLL);
  v194 = v25;
  *v25 = 0;
  v196 = v25 + 1;
  v195 = v25 + 1;
  AUSpatialCapture::AddParameterToMap(a1, 0x22u, 4u, -1006632960, CFSTR("Raw Scale Smoothing"), (uint64_t)v197, 2, (char **)&v194, 0.0, 10.0, 0.03);
  if (v194)
  {
    v195 = v194;
    operator delete(v194);
  }
  v276.__begin_ = (std::vector<std::string>::pointer)v197;
  std::vector<std::__fs::filesystem::path>::__destroy_vector::operator()[abi:ne180100]((void ***)&v276);
  memset(v193, 0, sizeof(v193));
  v26 = operator new(4uLL);
  v190 = v26;
  *v26 = 0;
  v192 = v26 + 1;
  v191 = v26 + 1;
  AUSpatialCapture::AddParameterToMap(a1, 0x23u, 0xDu, -1073741824, CFSTR("Omni Blend Scale Thres"), (uint64_t)v193, 2, (char **)&v190, -100.0, 100.0, -12.0);
  if (v190)
  {
    v191 = v190;
    operator delete(v190);
  }
  v276.__begin_ = (std::vector<std::string>::pointer)v193;
  std::vector<std::__fs::filesystem::path>::__destroy_vector::operator()[abi:ne180100]((void ***)&v276);
  memset(v189, 0, sizeof(v189));
  v27 = operator new(4uLL);
  v186 = v27;
  *v27 = 0;
  v188 = v27 + 1;
  v187 = v27 + 1;
  AUSpatialCapture::AddParameterToMap(a1, 0x24u, 8u, -1073741824, CFSTR("Crossover Max Frequency"), (uint64_t)v189, 2, (char **)&v186, 0.0, 20000.0, 1250.0);
  if (v186)
  {
    v187 = v186;
    operator delete(v186);
  }
  v276.__begin_ = (std::vector<std::string>::pointer)v189;
  std::vector<std::__fs::filesystem::path>::__destroy_vector::operator()[abi:ne180100]((void ***)&v276);
  memset(v185, 0, sizeof(v185));
  v28 = operator new(4uLL);
  v182 = v28;
  *v28 = 0;
  v184 = v28 + 1;
  v183 = v28 + 1;
  AUSpatialCapture::AddParameterToMap(a1, 0x25u, 4u, -1073741824, CFSTR("Crossover Index Attack"), (uint64_t)v185, 2, (char **)&v182, 0.0, 10.0, 0.1);
  if (v182)
  {
    v183 = v182;
    operator delete(v182);
  }
  v276.__begin_ = (std::vector<std::string>::pointer)v185;
  std::vector<std::__fs::filesystem::path>::__destroy_vector::operator()[abi:ne180100]((void ***)&v276);
  memset(v181, 0, sizeof(v181));
  v29 = operator new(4uLL);
  v178 = v29;
  *v29 = 0;
  v180 = v29 + 1;
  v179 = v29 + 1;
  AUSpatialCapture::AddParameterToMap(a1, 0x26u, 4u, -1073741824, CFSTR("Crossover Index Release"), (uint64_t)v181, 2, (char **)&v178, 0.0, 10.0, 1.0);
  if (v178)
  {
    v179 = v178;
    operator delete(v178);
  }
  v276.__begin_ = (std::vector<std::string>::pointer)v181;
  std::vector<std::__fs::filesystem::path>::__destroy_vector::operator()[abi:ne180100]((void ***)&v276);
  memset(v177, 0, sizeof(v177));
  v30 = operator new(4uLL);
  v174 = v30;
  *v30 = 0;
  v176 = v30 + 1;
  v175 = v30 + 1;
  AUSpatialCapture::AddParameterToMap(a1, 0x27u, 4u, -1073741824, CFSTR("Crossover Index Hold"), (uint64_t)v177, 2, (char **)&v174, 0.0, 10.0, 1.5);
  if (v174)
  {
    v175 = v174;
    operator delete(v174);
  }
  v276.__begin_ = (std::vector<std::string>::pointer)v177;
  std::vector<std::__fs::filesystem::path>::__destroy_vector::operator()[abi:ne180100]((void ***)&v276);
  memset(v173, 0, sizeof(v173));
  v31 = operator new(4uLL);
  v170 = v31;
  *v31 = 0;
  v172 = v31 + 1;
  v171 = v31 + 1;
  AUSpatialCapture::AddParameterToMap(a1, 0x28u, 4u, -1006632960, CFSTR("Crossover Index Smoothing"), (uint64_t)v173, 2, (char **)&v170, 0.0, 10.0, 0.4);
  if (v170)
  {
    v171 = v170;
    operator delete(v170);
  }
  v276.__begin_ = (std::vector<std::string>::pointer)v173;
  std::vector<std::__fs::filesystem::path>::__destroy_vector::operator()[abi:ne180100]((void ***)&v276);
  memset(v169, 0, sizeof(v169));
  v32 = operator new(4uLL);
  v166 = v32;
  *v32 = 0;
  v168 = v32 + 1;
  v167 = v32 + 1;
  AUSpatialCapture::AddParameterToMap(a1, 0x29u, 8u, -1073741824, CFSTR("Min Omni Blend Crossover Frequency"), (uint64_t)v169, 2, (char **)&v166, 0.0, 20000.0, 250.0);
  if (v166)
  {
    v167 = v166;
    operator delete(v166);
  }
  v276.__begin_ = (std::vector<std::string>::pointer)v169;
  std::vector<std::__fs::filesystem::path>::__destroy_vector::operator()[abi:ne180100]((void ***)&v276);
  memset(v165, 0, sizeof(v165));
  v33 = operator new(4uLL);
  v162 = v33;
  *v33 = 0;
  v164 = v33 + 1;
  v163 = v33 + 1;
  AUSpatialCapture::AddParameterToMap(a1, 0x2Au, 0xDu, -1073741824, CFSTR("Min Omni Blend Abs. Energy Trigger"), (uint64_t)v165, 2, (char **)&v162, -200.0, 200.0, -90.0);
  if (v162)
  {
    v163 = v162;
    operator delete(v162);
  }
  v276.__begin_ = (std::vector<std::string>::pointer)v165;
  std::vector<std::__fs::filesystem::path>::__destroy_vector::operator()[abi:ne180100]((void ***)&v276);
  memset(v161, 0, sizeof(v161));
  v34 = operator new(4uLL);
  v158 = v34;
  *v34 = 0;
  v160 = v34 + 1;
  v159 = v34 + 1;
  AUSpatialCapture::AddParameterToMap(a1, 0x2Bu, 4u, -1073741824, CFSTR("Wind / Scratch Detect Trigger Attack"), (uint64_t)v161, 2, (char **)&v158, 0.0, 1.0, 0.25);
  if (v158)
  {
    v159 = v158;
    operator delete(v158);
  }
  v276.__begin_ = (std::vector<std::string>::pointer)v161;
  std::vector<std::__fs::filesystem::path>::__destroy_vector::operator()[abi:ne180100]((void ***)&v276);
  memset(v157, 0, sizeof(v157));
  v35 = operator new(4uLL);
  v154 = v35;
  *v35 = 0;
  v156 = v35 + 1;
  v155 = v35 + 1;
  AUSpatialCapture::AddParameterToMap(a1, 0x2Cu, 4u, -1006632960, CFSTR("Wind / Scratch Detect Trigger Release"), (uint64_t)v157, 2, (char **)&v154, 0.0, 1.0, 0.25);
  if (v154)
  {
    v155 = v154;
    operator delete(v154);
  }
  v276.__begin_ = (std::vector<std::string>::pointer)v157;
  std::vector<std::__fs::filesystem::path>::__destroy_vector::operator()[abi:ne180100]((void ***)&v276);
  memset(v153, 0, sizeof(v153));
  v36 = operator new(4uLL);
  v150 = v36;
  *v36 = 0;
  v152 = v36 + 1;
  v151 = v36 + 1;
  AUSpatialCapture::AddParameterToMap(a1, 0x2Du, 0, -1006632960, CFSTR("Cross Fade Length Ramp Slope"), (uint64_t)v153, 2, (char **)&v150, 0.0, 10.0, 0.75);
  if (v150)
  {
    v151 = v150;
    operator delete(v150);
  }
  v276.__begin_ = (std::vector<std::string>::pointer)v153;
  std::vector<std::__fs::filesystem::path>::__destroy_vector::operator()[abi:ne180100]((void ***)&v276);
  memset(v149, 0, sizeof(v149));
  v148 = 0;
  v146 = 0;
  v147 = 0;
  AUSpatialCapture::AddParameterToMap(a1, 2u, 2u, -1006632960, CFSTR("Enable DOA smoothing"), (uint64_t)v149, 3, (char **)&v146, 0.0, 1.0, 0.0);
  if (v146)
  {
    v147 = v146;
    operator delete(v146);
  }
  v276.__begin_ = (std::vector<std::string>::pointer)v149;
  std::vector<std::__fs::filesystem::path>::__destroy_vector::operator()[abi:ne180100]((void ***)&v276);
  memset(v145, 0, sizeof(v145));
  v144 = 0;
  v142 = 0;
  v143 = 0;
  AUSpatialCapture::AddParameterToMap(a1, 3u, 0, -1006632960, CFSTR("DOA time smoothing"), (uint64_t)v145, 3, (char **)&v142, 0.0, 1.0, 0.0);
  if (v142)
  {
    v143 = v142;
    operator delete(v142);
  }
  v276.__begin_ = (std::vector<std::string>::pointer)v145;
  std::vector<std::__fs::filesystem::path>::__destroy_vector::operator()[abi:ne180100]((void ***)&v276);
  GetDOAFrequencySmoothingOptions(&v276);
  v38 = v276.__begin_;
  end = v276.__end_;
  GetDOAFrequencySmoothingOptions(&v136);
  v140 = v136;
  v141 = v137;
  v137 = 0;
  v136 = 0uLL;
  v135 = 0;
  v133 = 0;
  v134 = 0;
  AUSpatialCapture::AddParameterToMap(a1, 4u, 1u, -1006632960, CFSTR("DOA frequency smoothing"), (uint64_t)&v140, 3, (char **)&v133, 0.0, (float)(0xAAAAAAAAAAAAAAABLL * (((char *)end - (char *)v38) >> 3) - 1), 0.0);
  if (v133)
  {
    v134 = v133;
    operator delete(v133);
  }
  v102 = (std::string *)&v140;
  std::vector<std::__fs::filesystem::path>::__destroy_vector::operator()[abi:ne180100]((void ***)&v102);
  if (v138)
  {
    v139 = v138;
    operator delete(v138);
  }
  v102 = (std::string *)&v136;
  std::vector<std::__fs::filesystem::path>::__destroy_vector::operator()[abi:ne180100]((void ***)&v102);
  if (v277[0])
  {
    v277[1] = v277[0];
    operator delete(v277[0]);
  }
  *(_QWORD *)&v136 = &v276;
  std::vector<std::__fs::filesystem::path>::__destroy_vector::operator()[abi:ne180100]((void ***)&v136);
  memset(v132, 0, sizeof(v132));
  v131 = 0;
  v129 = 0;
  v130 = 0;
  AUSpatialCapture::AddParameterToMap(a1, 5u, 0, -1006632960, CFSTR("DOA smoothing bias"), (uint64_t)v132, 3, (char **)&v129, 0.0, 1.0, 0.0);
  if (v129)
  {
    v130 = v129;
    operator delete(v129);
  }
  v276.__begin_ = (std::vector<std::string>::pointer)v132;
  std::vector<std::__fs::filesystem::path>::__destroy_vector::operator()[abi:ne180100]((void ***)&v276);
  memset(v128, 0, sizeof(v128));
  v127 = 0;
  v125 = 0;
  v126 = 0;
  AUSpatialCapture::AddParameterToMap(a1, 6u, 2u, -1006632960, CFSTR("Override measured DOA"), (uint64_t)v128, 3, (char **)&v125, 0.0, 1.0, 0.0);
  if (v125)
  {
    v126 = v125;
    operator delete(v125);
  }
  v276.__begin_ = (std::vector<std::string>::pointer)v128;
  std::vector<std::__fs::filesystem::path>::__destroy_vector::operator()[abi:ne180100]((void ***)&v276);
  memset(v124, 0, sizeof(v124));
  v123 = 0;
  v121 = 0;
  v122 = 0;
  AUSpatialCapture::AddParameterToMap(a1, 7u, 0, -1006632960, CFSTR("Override azimuth"), (uint64_t)v124, 3, (char **)&v121, -180.0, 180.0, 0.0);
  if (v121)
  {
    v122 = v121;
    operator delete(v121);
  }
  v276.__begin_ = (std::vector<std::string>::pointer)v124;
  std::vector<std::__fs::filesystem::path>::__destroy_vector::operator()[abi:ne180100]((void ***)&v276);
  memset(v120, 0, sizeof(v120));
  v119 = 0;
  v117 = 0;
  v118 = 0;
  AUSpatialCapture::AddParameterToMap(a1, 8u, 0, -1006632960, CFSTR("Override elevation"), (uint64_t)v120, 3, (char **)&v117, -90.0, 90.0, 0.0);
  if (v117)
  {
    v118 = v117;
    operator delete(v117);
  }
  v276.__begin_ = (std::vector<std::string>::pointer)v120;
  std::vector<std::__fs::filesystem::path>::__destroy_vector::operator()[abi:ne180100]((void ***)&v276);
  memset(v116, 0, sizeof(v116));
  v115 = 0;
  v113 = 0;
  v114 = 0;
  AUSpatialCapture::AddParameterToMap(a1, 9u, 0, -1006632960, CFSTR("Coefficient smoothing"), (uint64_t)v116, 3, (char **)&v113, 0.0, 4.0, 2.0);
  if (v113)
  {
    v114 = v113;
    operator delete(v113);
  }
  v276.__begin_ = (std::vector<std::string>::pointer)v116;
  std::vector<std::__fs::filesystem::path>::__destroy_vector::operator()[abi:ne180100]((void ***)&v276);
  memset(v112, 0, sizeof(v112));
  v111 = 0;
  v109 = 0;
  v110 = 0;
  AUSpatialCapture::AddParameterToMap(a1, 0xAu, 2u, -1006632960, CFSTR("Enable Parametric timbre filter"), (uint64_t)v112, 3, (char **)&v109, 0.0, 1.0, 1.0);
  if (v109)
  {
    v110 = v109;
    operator delete(v109);
  }
  v276.__begin_ = (std::vector<std::string>::pointer)v112;
  std::vector<std::__fs::filesystem::path>::__destroy_vector::operator()[abi:ne180100]((void ***)&v276);
  std::string::basic_string[abi:ne180100]<0>(&v276, "Mono");
  std::string::basic_string[abi:ne180100]<0>(v277, "Linear");
  v136 = 0uLL;
  v137 = 0;
  v102 = (std::string *)&v136;
  LOBYTE(v103) = 0;
  *(_QWORD *)&v136 = operator new(0x30uLL);
  *((_QWORD *)&v136 + 1) = v136;
  v137 = v136 + 48;
  v39 = 0;
  *((_QWORD *)&v136 + 1) = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v137, (__int128 *)&v276, &v278, (std::string *)v136);
  do
  {
    if (SHIBYTE(v277[v39 + 2]) < 0)
      operator delete(*(void **)((char *)&v276 + v39 * 8 + 24));
    v39 -= 3;
  }
  while (v39 != -6);
  v40 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)&v136 + 1) - v136) >> 3);
  memset(&v108, 0, sizeof(v108));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v108, (__int128 *)v136, *((__int128 **)&v136 + 1), v40);
  v106 = 0;
  v105 = 0;
  v107 = 0;
  AUSpatialCapture::AddParameterToMap(a1, 0x11u, 1u, -1006632960, CFSTR("Low signal select"), (uint64_t)&v108, 3, (char **)&v105, 0.0, (float)(v40 - 1), 0.0);
  if (v105)
  {
    v106 = v105;
    operator delete(v105);
  }
  v276.__begin_ = &v108;
  std::vector<std::__fs::filesystem::path>::__destroy_vector::operator()[abi:ne180100]((void ***)&v276);
  std::string::basic_string[abi:ne180100]<0>(&v276, "Spaced omni");
  std::string::basic_string[abi:ne180100]<0>(v277, "Linear");
  v103 = 0;
  v102 = 0;
  p_data = 0;
  *(_QWORD *)&v278 = &v102;
  BYTE8(v278) = 0;
  v102 = (std::string *)operator new(0x30uLL);
  v103 = v102;
  p_data = (void **)&v102[2].__r_.__value_.__l.__data_;
  v41 = 0;
  v103 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&p_data, (__int128 *)&v276, &v278, v102);
  do
  {
    if (SHIBYTE(v277[v41 + 2]) < 0)
      operator delete(*(void **)((char *)&v276 + v41 * 8 + 24));
    v41 -= 3;
  }
  while (v41 != -6);
  v42 = 0xAAAAAAAAAAAAAAABLL * (((char *)v103 - (char *)v102) >> 3);
  memset(&v101, 0, sizeof(v101));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v101, (__int128 *)v102, (__int128 *)v103, v42);
  v99 = 0;
  v98 = 0;
  v100 = 0;
  AUSpatialCapture::AddParameterToMap(a1, 0x12u, 1u, -1006632960, CFSTR("High signal select"), (uint64_t)&v101, 3, (char **)&v98, 0.0, (float)(v42 - 1), 0.0);
  if (v98)
  {
    v99 = v98;
    operator delete(v98);
  }
  v276.__begin_ = &v101;
  std::vector<std::__fs::filesystem::path>::__destroy_vector::operator()[abi:ne180100]((void ***)&v276);
  memset(v97, 0, sizeof(v97));
  v96 = 0;
  v94 = 0;
  v95 = 0;
  AUSpatialCapture::AddParameterToMap(a1, 0xEu, 8u, -1002438656, CFSTR("Min Parameteric Frequency"), (uint64_t)v97, 3, (char **)&v94, 20.0, 1000.0, 100.0);
  if (v94)
  {
    v95 = v94;
    operator delete(v94);
  }
  v276.__begin_ = (std::vector<std::string>::pointer)v97;
  std::vector<std::__fs::filesystem::path>::__destroy_vector::operator()[abi:ne180100]((void ***)&v276);
  memset(v93, 0, sizeof(v93));
  v91 = 0;
  v92 = 0;
  v90 = 0;
  AUSpatialCapture::AddParameterToMap(a1, 0xFu, 8u, -1002438656, CFSTR("Max Parameteric Frequency"), (uint64_t)v93, 3, (char **)&v90, 20.0, 24000.0, 2700.0);
  if (v90)
  {
    v91 = v90;
    operator delete(v90);
  }
  v276.__begin_ = (std::vector<std::string>::pointer)v93;
  std::vector<std::__fs::filesystem::path>::__destroy_vector::operator()[abi:ne180100]((void ***)&v276);
  v88 = 0;
  memset(v89, 0, sizeof(v89));
  v86 = 0;
  v87 = 0;
  AUSpatialCapture::AddParameterToMap(a1, 0x10u, 0x15u, -1006632960, CFSTR("Parameteric filter transition width"), (uint64_t)v89, 3, (char **)&v86, 0.0, 2.0, 0.5);
  if (v86)
  {
    v87 = v86;
    operator delete(v86);
  }
  v276.__begin_ = (std::vector<std::string>::pointer)v89;
  std::vector<std::__fs::filesystem::path>::__destroy_vector::operator()[abi:ne180100]((void ***)&v276);
  v84 = 0;
  memset(v85, 0, sizeof(v85));
  v82 = 0;
  v83 = 0;
  AUSpatialCapture::AddParameterToMap(a1, 0x1Fu, 8u, 1145085952, CFSTR("Max Calculated Parameteric Frequency"), (uint64_t)v85, 3, (char **)&v82, 20.0, 24000.0, 2700.0);
  if (v82)
  {
    v83 = v82;
    operator delete(v82);
  }
  v276.__begin_ = (std::vector<std::string>::pointer)v85;
  std::vector<std::__fs::filesystem::path>::__destroy_vector::operator()[abi:ne180100]((void ***)&v276);
  v80 = 0;
  memset(v81, 0, sizeof(v81));
  v78 = 0;
  v79 = 0;
  AUSpatialCapture::AddParameterToMap(a1, 0x13u, 0xDu, -1006632960, CFSTR("Low gain"), (uint64_t)v81, 3, (char **)&v78, -6.0, 6.0, 0.0);
  if (v78)
  {
    v79 = v78;
    operator delete(v78);
  }
  v276.__begin_ = (std::vector<std::string>::pointer)v81;
  std::vector<std::__fs::filesystem::path>::__destroy_vector::operator()[abi:ne180100]((void ***)&v276);
  v76 = 0;
  memset(v77, 0, sizeof(v77));
  v74 = 0;
  v75 = 0;
  AUSpatialCapture::AddParameterToMap(a1, 0x14u, 0xDu, -1006632960, CFSTR("Mid gain"), (uint64_t)v77, 3, (char **)&v74, -6.0, 6.0, 0.0);
  if (v74)
  {
    v75 = v74;
    operator delete(v74);
  }
  v276.__begin_ = (std::vector<std::string>::pointer)v77;
  std::vector<std::__fs::filesystem::path>::__destroy_vector::operator()[abi:ne180100]((void ***)&v276);
  v72 = 0;
  memset(v73, 0, sizeof(v73));
  v70 = 0;
  v71 = 0;
  AUSpatialCapture::AddParameterToMap(a1, 0x15u, 0xDu, -1006632960, CFSTR("High gain"), (uint64_t)v73, 3, (char **)&v70, -6.0, 6.0, 0.0);
  if (v70)
  {
    v71 = v70;
    operator delete(v70);
  }
  v276.__begin_ = (std::vector<std::string>::pointer)v73;
  std::vector<std::__fs::filesystem::path>::__destroy_vector::operator()[abi:ne180100]((void ***)&v276);
  v68 = 0;
  memset(v69, 0, sizeof(v69));
  v66 = 0;
  v67 = 0;
  AUSpatialCapture::AddParameterToMap(a1, 0xBu, 0, -1006632960, CFSTR("DRR multiplier"), (uint64_t)v69, 3, (char **)&v66, 0.0, 2.0, 1.2);
  if (v66)
  {
    v67 = v66;
    operator delete(v66);
  }
  v276.__begin_ = (std::vector<std::string>::pointer)v69;
  std::vector<std::__fs::filesystem::path>::__destroy_vector::operator()[abi:ne180100]((void ***)&v276);
  v64 = 0;
  memset(v65, 0, sizeof(v65));
  v62 = 0;
  v63 = 0;
  AUSpatialCapture::AddParameterToMap(a1, 0xCu, 0, -1002438656, CFSTR("DRR mix regularization"), (uint64_t)v65, 3, (char **)&v62, 1.0e-12, 1.0, 0.001);
  if (v62)
  {
    v63 = v62;
    operator delete(v62);
  }
  v276.__begin_ = (std::vector<std::string>::pointer)v65;
  std::vector<std::__fs::filesystem::path>::__destroy_vector::operator()[abi:ne180100]((void ***)&v276);
  v60 = 0;
  memset(v61, 0, sizeof(v61));
  v58 = 0;
  v59 = 0;
  AUSpatialCapture::AddParameterToMap(a1, 0xDu, 0, -1006632960, CFSTR("DRR filter smoothing"), (uint64_t)v61, 3, (char **)&v58, 0.0, 4.0, 0.0);
  if (v58)
  {
    v59 = v58;
    operator delete(v58);
  }
  v276.__begin_ = (std::vector<std::string>::pointer)v61;
  std::vector<std::__fs::filesystem::path>::__destroy_vector::operator()[abi:ne180100]((void ***)&v276);
  std::vector<std::string>::vector(&v276, 2uLL);
  v43 = 0;
  v44 = 1;
  do
  {
    v45 = v44;
    *(_QWORD *)((char *)&v278 + 7) = 0;
    *(_QWORD *)&v278 = 0;
    if ((v44 & 1) != 0)
    {
      v46 = 0x7261656E694CLL;
      v47 = 6;
    }
    else
    {
      qmemcpy(&v278, "Linear", 6);
      v46 = 0x656C62616D6F6F5ALL;
      v47 = 14;
    }
    v48 = &v276.__begin_[v43];
    if (SHIBYTE(v48->__r_.__value_.__r.__words[2]) < 0)
      operator delete(v48->__r_.__value_.__l.__data_);
    v44 = 0;
    v48->__r_.__value_.__r.__words[0] = v46;
    v48->__r_.__value_.__l.__size_ = v278;
    *(std::string::size_type *)((char *)&v48->__r_.__value_.__r.__words[1] + 7) = *(_QWORD *)((char *)&v278 + 7);
    *((_BYTE *)&v48->__r_.__value_.__s + 23) = v47;
    v43 = 1;
  }
  while ((v45 & 1) != 0);
  v49 = 0xAAAAAAAAAAAAAAABLL * (((char *)v276.__end_ - (char *)v276.__begin_) >> 3);
  memset(&v57, 0, sizeof(v57));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v57, (__int128 *)v276.__begin_, (__int128 *)v276.__end_, v49);
  v54 = 0;
  v55 = 0;
  v56 = 0;
  AUSpatialCapture::AddParameterToMap(a1, 0x1Au, 1u, -1006632960, CFSTR("Render mode (doesn't control MCLP)"), (uint64_t)&v57, 3, (char **)&v54, 0.0, (float)(v49 - 1), 0.0);
  if (v54)
  {
    v55 = v54;
    operator delete(v54);
  }
  *(_QWORD *)&v278 = &v57;
  std::vector<std::__fs::filesystem::path>::__destroy_vector::operator()[abi:ne180100]((void ***)&v278);
  v52 = 0;
  memset(v53, 0, sizeof(v53));
  v50 = 0;
  v51 = 0;
  AUSpatialCapture::AddParameterToMap(a1, 0x1Bu, 0, -1006632960, CFSTR("Depreciated"), (uint64_t)v53, 3, (char **)&v50, 0.0, 1.0, 0.0);
  if (v50)
  {
    v51 = v50;
    operator delete(v50);
  }
  *(_QWORD *)&v278 = v53;
  std::vector<std::__fs::filesystem::path>::__destroy_vector::operator()[abi:ne180100]((void ***)&v278);
  *(_QWORD *)&v278 = &v276;
  std::vector<std::__fs::filesystem::path>::__destroy_vector::operator()[abi:ne180100]((void ***)&v278);
  v276.__begin_ = (std::vector<std::string>::pointer)&v102;
  std::vector<std::__fs::filesystem::path>::__destroy_vector::operator()[abi:ne180100]((void ***)&v276);
  v276.__begin_ = (std::vector<std::string>::pointer)&v136;
  std::vector<std::__fs::filesystem::path>::__destroy_vector::operator()[abi:ne180100]((void ***)&v276);
  v276.__begin_ = (std::vector<std::string>::pointer)&v270;
  std::vector<std::__fs::filesystem::path>::__destroy_vector::operator()[abi:ne180100]((void ***)&v276);
  v276.__begin_ = (std::vector<std::string>::pointer)&v275;
  std::vector<std::__fs::filesystem::path>::__destroy_vector::operator()[abi:ne180100]((void ***)&v276);
}

void sub_1B63AEDA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *__p, uint64_t a10, uint64_t a11, char a12)
{
  uint64_t v12;

  if (__p)
    operator delete(__p);
  *(_QWORD *)(v12 - 120) = &a12;
  std::vector<std::__fs::filesystem::path>::__destroy_vector::operator()[abi:ne180100]((void ***)(v12 - 120));
  *(_QWORD *)(v12 - 120) = v12 - 168;
  std::vector<std::__fs::filesystem::path>::__destroy_vector::operator()[abi:ne180100]((void ***)(v12 - 120));
  *(_QWORD *)(v12 - 168) = &STACK[0x270];
  std::vector<std::__fs::filesystem::path>::__destroy_vector::operator()[abi:ne180100]((void ***)(v12 - 168));
  *(_QWORD *)(v12 - 168) = &STACK[0x3F0];
  std::vector<std::__fs::filesystem::path>::__destroy_vector::operator()[abi:ne180100]((void ***)(v12 - 168));
  *(_QWORD *)(v12 - 168) = &STACK[0xA38];
  std::vector<std::__fs::filesystem::path>::__destroy_vector::operator()[abi:ne180100]((void ***)(v12 - 168));
  *(_QWORD *)(v12 - 168) = v12 - 192;
  std::vector<std::__fs::filesystem::path>::__destroy_vector::operator()[abi:ne180100]((void ***)(v12 - 168));
  _Unwind_Resume(a1);
}

void sub_1B63AEF8C()
{
  unint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  STACK[0x278] = v0;
  std::vector<std::__fs::filesystem::path>::__destroy_vector::operator()[abi:ne180100]((void ***)(v1 - 120));
  v2 = 0;
  v3 = v1 - 168;
  while (1)
  {
    if (*(char *)(v3 + v2 + 47) < 0)
      operator delete(*(void **)(v3 + v2 + 24));
    v2 -= 24;
    if (v2 == -48)
      JUMPOUT(0x1B63AEF4CLL);
  }
}

void sub_1B63AEFD0()
{
  uint64_t v0;

  if (*(char *)(v0 - 145) < 0)
    operator delete(*(void **)(v0 - 168));
  JUMPOUT(0x1B63AEF4CLL);
}

void sub_1B63AEFE8()
{
  JUMPOUT(0x1B63AEF4CLL);
}

void sub_1B63AF010()
{
  unint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  STACK[0x3F8] = v0;
  std::vector<std::__fs::filesystem::path>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x270]);
  v2 = 0;
  v3 = v1 - 168;
  while (1)
  {
    if (*(char *)(v3 + v2 + 47) < 0)
      operator delete(*(void **)(v3 + v2 + 24));
    v2 -= 24;
    if (v2 == -48)
      JUMPOUT(0x1B63AEF5CLL);
  }
}

void sub_1B63AF054()
{
  uint64_t v0;

  if (*(char *)(v0 - 145) < 0)
    operator delete(*(void **)(v0 - 168));
  JUMPOUT(0x1B63AEF5CLL);
}

void sub_1B63AF06C()
{
  JUMPOUT(0x1B63AEF5CLL);
}

std::vector<std::string> *__cdecl std::vector<std::string>::vector(std::vector<std::string> *this, std::vector<std::string>::size_type __n)
{
  std::vector<std::string>::pointer end;
  size_t v5;

  this->__begin_ = 0;
  this->__end_ = 0;
  this->__end_cap_.__value_ = 0;
  std::vector<std::__fs::filesystem::path>::__vallocate[abi:ne180100](this, __n);
  end = this->__end_;
  v5 = 24 * ((24 * __n - 24) / 0x18) + 24;
  bzero(end, v5);
  this->__end_ = (std::vector<std::string>::pointer)((char *)end + v5);
  return this;
}

void sub_1B63AF680(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  std::vector<std::__fs::filesystem::path>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

uint64_t std::pair<std::vector<std::string>,std::vector<float>>::~pair(uint64_t a1)
{
  void *v2;
  void **v4;

  v2 = *(void **)(a1 + 24);
  if (v2)
  {
    *(_QWORD *)(a1 + 32) = v2;
    operator delete(v2);
  }
  v4 = (void **)a1;
  std::vector<std::__fs::filesystem::path>::__destroy_vector::operator()[abi:ne180100](&v4);
  return a1;
}

void GetSpatialCaptureDSPGraphSource(std::string *a1, void *a2, int a3, int **a4, uint64_t a5, int a6, int a7)
{
  void *v12;
  double v13;
  double v14;
  void *v15;
  unsigned int v16;
  std::vector<char>::pointer begin;
  unsigned int v18;
  void *v19;
  unsigned int v20;
  void *v21;
  unsigned int v22;
  std::string *v23;
  __int128 v24;
  std::string *v25;
  __int128 v26;
  std::string *v27;
  std::string::size_type size;
  std::string *v29;
  __int128 v30;
  std::string *v31;
  __int128 v32;
  std::string *v33;
  std::string::size_type v34;
  std::string *v35;
  __int128 v36;
  std::string *v37;
  __int128 v38;
  std::string *v39;
  std::string::size_type v40;
  std::string *v41;
  __int128 v42;
  std::string *v43;
  __int128 v44;
  std::string *v45;
  std::string::size_type v46;
  std::string *v47;
  __int128 v48;
  std::string *v49;
  __int128 v50;
  std::string *p_x;
  std::string::size_type v52;
  std::string *v53;
  std::string::size_type v54;
  std::string *v55;
  std::string::size_type v56;
  std::string *v57;
  std::string::size_type v58;
  unsigned int v59;
  std::string *v60;
  __int128 v61;
  std::string *v62;
  __int128 v63;
  std::string *v64;
  std::string::size_type v65;
  std::string *v66;
  __int128 v67;
  std::string *v68;
  __int128 v69;
  std::string *v70;
  std::string::size_type v71;
  std::string *v72;
  __int128 v73;
  std::string *v74;
  __int128 v75;
  std::string *v76;
  std::string::size_type v77;
  std::string *v78;
  __int128 v79;
  std::string *v80;
  __int128 v81;
  std::string *v82;
  std::string::size_type v83;
  std::string *v84;
  __int128 v85;
  std::string *v86;
  __int128 v87;
  std::string *v88;
  std::string::size_type v89;
  std::string *v90;
  __int128 v91;
  std::string *v92;
  __int128 v93;
  std::string *v94;
  std::string::size_type v95;
  std::string *v96;
  __int128 v97;
  std::string *v98;
  __int128 v99;
  std::string *v100;
  std::string::size_type v101;
  std::string *v102;
  __int128 v103;
  std::string *v104;
  __int128 v105;
  std::string *v106;
  __int128 v107;
  std::string *v108;
  __int128 v109;
  std::string *v110;
  std::string::size_type v111;
  std::string *v112;
  __int128 v113;
  std::string *v114;
  __int128 v115;
  std::string *v116;
  std::string::size_type v117;
  std::string *v118;
  __int128 v119;
  std::string *v120;
  __int128 v121;
  std::string *v122;
  std::string::size_type v123;
  std::string *v124;
  __int128 v125;
  std::string *v126;
  __int128 v127;
  std::string *v128;
  std::string::size_type v129;
  std::string *v130;
  __int128 v131;
  std::string *v132;
  __int128 v133;
  std::string *v134;
  std::string::size_type v135;
  std::string *v136;
  __int128 v137;
  std::string *v138;
  __int128 v139;
  std::string *v140;
  std::string::size_type v141;
  std::string *v142;
  __int128 v143;
  std::string *v144;
  __int128 v145;
  std::string *v146;
  std::string::size_type v147;
  std::string *v148;
  __int128 v149;
  std::string *v150;
  __int128 v151;
  std::string *v152;
  std::string::size_type v153;
  std::string *v154;
  __int128 v155;
  std::string *v156;
  __int128 v157;
  std::string *v158;
  std::string::size_type v159;
  std::string *v160;
  __int128 v161;
  std::string *v162;
  __int128 v163;
  std::string *v164;
  std::string::size_type v165;
  std::string *v166;
  __int128 v167;
  std::string *v168;
  __int128 v169;
  std::string *v170;
  std::string::size_type v171;
  std::string *v172;
  __int128 v173;
  std::string *v174;
  __int128 v175;
  std::string *v176;
  std::string::size_type v177;
  std::string *v178;
  __int128 v179;
  std::string *v180;
  __int128 v181;
  std::string *v182;
  std::string::size_type v183;
  std::string *v184;
  __int128 v185;
  std::string *v186;
  __int128 v187;
  std::string *v188;
  std::string::size_type v189;
  std::string *v190;
  __int128 v191;
  std::string *v192;
  __int128 v193;
  std::string *v194;
  std::string::size_type v195;
  std::string *v196;
  __int128 v197;
  std::string *v198;
  __int128 v199;
  std::string *v200;
  std::string::size_type v201;
  std::string *v202;
  __int128 v203;
  std::string *v204;
  __int128 v205;
  std::string *v206;
  std::string::size_type v207;
  std::string *v208;
  __int128 v209;
  std::string *v210;
  __int128 v211;
  std::string *v212;
  std::string::size_type v213;
  std::string *v214;
  __int128 v215;
  std::string *v216;
  __int128 v217;
  std::string *v218;
  std::string::size_type v219;
  std::string *v220;
  __int128 v221;
  std::string *v222;
  __int128 v223;
  std::string *v224;
  std::string::size_type v225;
  std::string *v226;
  __int128 v227;
  std::string *v228;
  __int128 v229;
  std::string *v230;
  std::string::size_type v231;
  std::string *v232;
  __int128 v233;
  std::string *v234;
  __int128 v235;
  std::string *v236;
  std::string::size_type v237;
  std::string *v238;
  __int128 v239;
  std::string *v240;
  __int128 v241;
  std::string *v242;
  std::string::size_type v243;
  std::string *v244;
  __int128 v245;
  std::string *v246;
  __int128 v247;
  std::string *v248;
  std::string::size_type v249;
  std::string *v250;
  __int128 v251;
  std::string *v252;
  __int128 v253;
  std::string *v254;
  std::string::size_type v255;
  std::string *v256;
  __int128 v257;
  std::string *v258;
  __int128 v259;
  std::string *v260;
  std::string::size_type v261;
  std::string *v262;
  __int128 v263;
  std::string *v264;
  __int128 v265;
  std::string *v266;
  std::string::size_type v267;
  std::string *v268;
  __int128 v269;
  std::string *v270;
  __int128 v271;
  std::string *v272;
  std::string::size_type v273;
  std::string *v274;
  __int128 v275;
  std::string *v276;
  __int128 v277;
  std::string *v278;
  std::string::size_type v279;
  std::string *v280;
  __int128 v281;
  std::string *v282;
  __int128 v283;
  std::string *v284;
  std::string::size_type v285;
  std::string *v286;
  __int128 v287;
  std::string *v288;
  __int128 v289;
  std::string *v290;
  std::string::size_type v291;
  std::string *v292;
  __int128 v293;
  std::string *v294;
  __int128 v295;
  std::string *v296;
  std::string::size_type v297;
  std::string *v298;
  __int128 v299;
  std::string *v300;
  __int128 v301;
  std::string *v302;
  std::string::size_type v303;
  std::string *v304;
  __int128 v305;
  std::string *v306;
  __int128 v307;
  std::string *v308;
  std::string::size_type v309;
  std::string *v310;
  __int128 v311;
  std::string *v312;
  __int128 v313;
  std::string *v314;
  std::string::size_type v315;
  std::string *v316;
  __int128 v317;
  std::string *v318;
  __int128 v319;
  std::string *v320;
  std::string::size_type v321;
  std::string *v322;
  __int128 v323;
  std::string *v324;
  __int128 v325;
  std::string *v326;
  std::string::size_type v327;
  std::string *v328;
  __int128 v329;
  std::string *v330;
  __int128 v331;
  std::string *v332;
  std::string::size_type v333;
  std::string *v334;
  __int128 v335;
  std::string *v336;
  __int128 v337;
  std::string *v338;
  std::string::size_type v339;
  std::string *v340;
  __int128 v341;
  std::string *v342;
  __int128 v343;
  std::string *v344;
  std::string::size_type v345;
  std::string *v346;
  __int128 v347;
  std::string *v348;
  __int128 v349;
  std::string *v350;
  std::string::size_type v351;
  std::string *v352;
  __int128 v353;
  std::string *v354;
  __int128 v355;
  std::string *v356;
  std::string::size_type v357;
  std::string *v358;
  __int128 v359;
  std::string *v360;
  __int128 v361;
  std::string *v362;
  std::string::size_type v363;
  std::string *v364;
  __int128 v365;
  std::string *v366;
  __int128 v367;
  std::string *v368;
  std::string::size_type v369;
  std::string *v370;
  __int128 v371;
  std::string *v372;
  __int128 v373;
  std::string *v374;
  std::string::size_type v375;
  std::string *v376;
  __int128 v377;
  std::string *v378;
  __int128 v379;
  std::string *v380;
  std::string::size_type v381;
  std::string *v382;
  __int128 v383;
  std::string *v384;
  __int128 v385;
  std::string *v386;
  std::string::size_type v387;
  std::string *v388;
  __int128 v389;
  std::string *v390;
  __int128 v391;
  std::string *v392;
  std::string::size_type v393;
  std::string *v394;
  __int128 v395;
  std::string *v396;
  __int128 v397;
  std::string *v398;
  std::string::size_type v399;
  std::string *v400;
  __int128 v401;
  std::string *v402;
  __int128 v403;
  std::string *v404;
  std::string::size_type v405;
  std::string *v406;
  __int128 v407;
  std::string *v408;
  __int128 v409;
  std::string *v410;
  std::string::size_type v411;
  std::string *v412;
  __int128 v413;
  std::string *v414;
  __int128 v415;
  std::string *v416;
  std::string::size_type v417;
  std::string *v418;
  __int128 v419;
  std::string *v420;
  __int128 v421;
  std::string *v422;
  std::string::size_type v423;
  std::string *v424;
  __int128 v425;
  std::string *v426;
  __int128 v427;
  std::string *v428;
  std::string::size_type v429;
  std::string *v430;
  __int128 v431;
  std::string *v432;
  __int128 v433;
  std::string *v434;
  std::string::size_type v435;
  std::string *v436;
  __int128 v437;
  std::string *v438;
  __int128 v439;
  std::string *v440;
  std::string::size_type v441;
  std::string *v442;
  __int128 v443;
  std::string *v444;
  __int128 v445;
  std::string *v446;
  std::string::size_type v447;
  std::string *v448;
  __int128 v449;
  std::string *v450;
  __int128 v451;
  std::string *v452;
  std::string::size_type v453;
  std::string *v454;
  __int128 v455;
  std::string *v456;
  __int128 v457;
  std::string *v458;
  std::string::size_type v459;
  std::string *v460;
  __int128 v461;
  std::string *v462;
  __int128 v463;
  std::string *v464;
  std::string::size_type v465;
  std::string *v466;
  __int128 v467;
  std::string *v468;
  __int128 v469;
  std::string *v470;
  std::string::size_type v471;
  std::string *v472;
  __int128 v473;
  std::string *v474;
  __int128 v475;
  std::string *v476;
  std::string::size_type v477;
  std::string *v478;
  __int128 v479;
  std::string *v480;
  __int128 v481;
  std::string *v482;
  std::string::size_type v483;
  std::string *v484;
  __int128 v485;
  std::string *v486;
  __int128 v487;
  std::string *v488;
  std::string::size_type v489;
  std::string *v490;
  __int128 v491;
  std::string *v492;
  __int128 v493;
  std::string *v494;
  std::string::size_type v495;
  std::string *v496;
  __int128 v497;
  std::string *v498;
  __int128 v499;
  std::string *v500;
  std::string::size_type v501;
  std::string *v502;
  __int128 v503;
  std::string *v504;
  __int128 v505;
  std::string *v506;
  std::string::size_type v507;
  std::string *v508;
  __int128 v509;
  std::string *v510;
  __int128 v511;
  std::string *v512;
  std::string::size_type v513;
  int v514;
  const std::string::value_type *v515;
  std::string::size_type v516;
  id v517;
  id v518;
  id v519;
  NSObject *v520;
  std::string *v521;
  std::string::size_type v522;
  const std::string::value_type *v523;
  std::vector<char>::pointer value_high;
  const std::string::value_type *v525;
  std::string::size_type v526;
  std::string *v527;
  __int128 v528;
  std::string *v529;
  __int128 v530;
  std::string *v531;
  std::string::size_type v532;
  char v533;
  uint64_t v534;
  std::string *v535;
  __int128 v536;
  std::string *v537;
  __int128 v538;
  std::string *v539;
  std::string::size_type v540;
  std::string *v541;
  __int128 v542;
  std::string *v543;
  __int128 v544;
  std::string *v545;
  __int128 v546;
  std::string *v547;
  std::string::size_type v548;
  std::string *v549;
  __int128 v550;
  std::string *v551;
  __int128 v552;
  std::string *v553;
  std::string::size_type v554;
  std::string *v555;
  __int128 v556;
  std::string *v557;
  __int128 v558;
  std::string *v559;
  std::string::size_type v560;
  std::string *v561;
  __int128 v562;
  std::string *v563;
  std::string::size_type v564;
  std::string *v565;
  __int128 v566;
  std::string *v567;
  __int128 v568;
  std::string *v569;
  std::string::size_type v570;
  std::string *v571;
  __int128 v572;
  std::string *v573;
  __int128 v574;
  std::string *v575;
  std::string::size_type v576;
  std::string *v577;
  __int128 v578;
  std::string *v579;
  __int128 v580;
  std::string *v581;
  std::string::size_type v582;
  std::string *v583;
  __int128 v584;
  std::string *v585;
  __int128 v586;
  std::string *v587;
  std::string::size_type v588;
  std::string *v589;
  __int128 v590;
  std::string *v591;
  __int128 v592;
  std::string *v593;
  std::string::size_type v594;
  std::string *v595;
  __int128 v596;
  std::string *v597;
  __int128 v598;
  std::string *v599;
  std::string::size_type v600;
  unsigned int v601;
  std::string *v602;
  __int128 v603;
  std::string *v604;
  __int128 v605;
  std::string *v606;
  std::string::size_type v607;
  std::string *v608;
  __int128 v609;
  std::string *v610;
  __int128 v611;
  std::string *v612;
  std::string::size_type v613;
  std::string *v614;
  __int128 v615;
  std::string *v616;
  __int128 v617;
  std::string *v618;
  std::string::size_type v619;
  std::string *v620;
  __int128 v621;
  std::string *v622;
  __int128 v623;
  std::string *v624;
  std::string::size_type v625;
  std::string *v626;
  __int128 v627;
  std::string *v628;
  __int128 v629;
  std::string *v630;
  std::string::size_type v631;
  std::string *v632;
  __int128 v633;
  std::string *v634;
  __int128 v635;
  std::string *v636;
  std::string::size_type v637;
  std::string *v638;
  __int128 v639;
  std::string *v640;
  __int128 v641;
  std::string *v642;
  std::string::size_type v643;
  std::string *v644;
  __int128 v645;
  std::string *v646;
  __int128 v647;
  std::string *v648;
  std::string::size_type v649;
  std::string *v650;
  __int128 v651;
  std::string *v652;
  __int128 v653;
  std::string *v654;
  std::string::size_type v655;
  std::string *v656;
  __int128 v657;
  std::string *v658;
  __int128 v659;
  std::string *v660;
  std::string::size_type v661;
  std::string *v662;
  __int128 v663;
  std::string *v664;
  __int128 v665;
  std::string *v666;
  std::string::size_type v667;
  std::string *v668;
  __int128 v669;
  std::string *v670;
  __int128 v671;
  std::string *v672;
  std::string::size_type v673;
  std::string *v674;
  __int128 v675;
  std::string *v676;
  __int128 v677;
  std::string *v678;
  std::string::size_type v679;
  std::string *v680;
  __int128 v681;
  std::string *v682;
  __int128 v683;
  std::string *v684;
  std::string::size_type v685;
  std::string *v686;
  __int128 v687;
  std::string *v688;
  __int128 v689;
  std::string *v690;
  std::string::size_type v691;
  std::string *v692;
  __int128 v693;
  std::string *v694;
  __int128 v695;
  std::string *v696;
  std::string::size_type v697;
  std::string *v698;
  __int128 v699;
  std::string *v700;
  __int128 v701;
  std::string *v702;
  std::string::size_type v703;
  std::string *v704;
  __int128 v705;
  std::string *v706;
  __int128 v707;
  std::string *v708;
  std::string::size_type v709;
  std::string *v710;
  __int128 v711;
  std::string *v712;
  __int128 v713;
  std::string *v714;
  std::string::size_type v715;
  std::string *v716;
  __int128 v717;
  std::string *v718;
  __int128 v719;
  std::string *v720;
  std::string::size_type v721;
  std::string *v722;
  __int128 v723;
  std::string *v724;
  __int128 v725;
  std::string *v726;
  std::string::size_type v727;
  std::string *v728;
  __int128 v729;
  std::string *v730;
  __int128 v731;
  std::string *v732;
  std::string::size_type v733;
  std::string *v734;
  __int128 v735;
  std::string *v736;
  __int128 v737;
  std::string *v738;
  std::string::size_type v739;
  std::string *v740;
  __int128 v741;
  std::string *v742;
  __int128 v743;
  std::string *v744;
  std::string::size_type v745;
  std::string *v746;
  __int128 v747;
  std::string *v748;
  __int128 v749;
  std::string *v750;
  std::string::size_type v751;
  std::string *v752;
  __int128 v753;
  std::string *v754;
  __int128 v755;
  std::string *v756;
  std::string::size_type v757;
  std::string *v758;
  __int128 v759;
  std::string *v760;
  __int128 v761;
  std::string *v762;
  std::string::size_type v763;
  std::string *v764;
  __int128 v765;
  std::string *v766;
  __int128 v767;
  std::string *v768;
  std::string::size_type v769;
  std::string *v770;
  __int128 v771;
  std::string *v772;
  __int128 v773;
  std::string *v774;
  std::string::size_type v775;
  std::string *v776;
  __int128 v777;
  std::string *v778;
  __int128 v779;
  std::string *v780;
  std::string::size_type v781;
  std::string *v782;
  __int128 v783;
  std::string *v784;
  __int128 v785;
  std::string *v786;
  std::string::size_type v787;
  std::string *v788;
  __int128 v789;
  std::string *v790;
  __int128 v791;
  std::string *v792;
  std::string::size_type v793;
  std::string *v794;
  __int128 v795;
  std::string *v796;
  __int128 v797;
  std::string *v798;
  std::string::size_type v799;
  std::string *v800;
  __int128 v801;
  std::string *v802;
  __int128 v803;
  std::string *v804;
  std::string::size_type v805;
  std::string *v806;
  __int128 v807;
  std::string *v808;
  __int128 v809;
  std::string *v810;
  std::string::size_type v811;
  std::string *v812;
  __int128 v813;
  std::string *v814;
  __int128 v815;
  std::string *v816;
  std::string::size_type v817;
  std::string *v818;
  __int128 v819;
  std::string *v820;
  __int128 v821;
  std::string *v822;
  std::string::size_type v823;
  std::string *v824;
  __int128 v825;
  std::string *v826;
  __int128 v827;
  std::string *v828;
  std::string::size_type v829;
  std::string *v830;
  __int128 v831;
  std::string *v832;
  __int128 v833;
  std::string *v834;
  std::string::size_type v835;
  std::string *v836;
  __int128 v837;
  std::string *v838;
  __int128 v839;
  std::string *v840;
  std::string::size_type v841;
  std::string *v842;
  __int128 v843;
  std::string *v844;
  __int128 v845;
  std::string *v846;
  std::string::size_type v847;
  std::string *v848;
  __int128 v849;
  std::string *v850;
  __int128 v851;
  std::string *v852;
  std::string::size_type v853;
  std::string *v854;
  __int128 v855;
  std::string *v856;
  __int128 v857;
  std::string *v858;
  std::string::size_type v859;
  std::string *v860;
  __int128 v861;
  std::string *v862;
  __int128 v863;
  std::string *v864;
  std::string::size_type v865;
  std::string *v866;
  __int128 v867;
  std::string *v868;
  __int128 v869;
  std::string *v870;
  std::string::size_type v871;
  std::string *v872;
  __int128 v873;
  std::string *v874;
  __int128 v875;
  std::string *v876;
  std::string::size_type v877;
  std::string *v878;
  __int128 v879;
  std::string *v880;
  __int128 v881;
  std::string *v882;
  std::string::size_type v883;
  std::string *v884;
  __int128 v885;
  std::string *v886;
  __int128 v887;
  std::string *v888;
  std::string::size_type v889;
  std::string *v890;
  __int128 v891;
  std::string *v892;
  __int128 v893;
  std::string *v894;
  std::string::size_type v895;
  std::string *v896;
  __int128 v897;
  std::string *v898;
  __int128 v899;
  std::string *v900;
  std::string::size_type v901;
  std::string *v902;
  __int128 v903;
  std::string *v904;
  __int128 v905;
  std::string *v906;
  std::string::size_type v907;
  std::string *v908;
  __int128 v909;
  std::string *v910;
  __int128 v911;
  std::string *v912;
  std::string::size_type v913;
  std::string *v914;
  __int128 v915;
  std::string *v916;
  __int128 v917;
  std::string *v918;
  std::string::size_type v919;
  std::string *v920;
  __int128 v921;
  std::string *v922;
  __int128 v923;
  std::string *v924;
  std::string::size_type v925;
  std::string *v926;
  __int128 v927;
  std::string *v928;
  __int128 v929;
  std::string *v930;
  std::string::size_type v931;
  std::string *v932;
  __int128 v933;
  std::string *v934;
  __int128 v935;
  std::string *v936;
  std::string::size_type v937;
  std::string *v938;
  __int128 v939;
  std::string *v940;
  __int128 v941;
  std::string *v942;
  std::string::size_type v943;
  std::string *v944;
  __int128 v945;
  std::string *v946;
  __int128 v947;
  std::string *v948;
  std::string::size_type v949;
  std::string *v950;
  __int128 v951;
  std::string *v952;
  __int128 v953;
  std::string *v954;
  std::string::size_type v955;
  std::string *v956;
  __int128 v957;
  std::string *v958;
  __int128 v959;
  std::string *v960;
  std::string::size_type v961;
  std::string *v962;
  __int128 v963;
  std::string *v964;
  __int128 v965;
  std::string *v966;
  std::string::size_type v967;
  std::string *v968;
  __int128 v969;
  std::string *v970;
  __int128 v971;
  std::string *v972;
  std::string::size_type v973;
  std::string *v974;
  __int128 v975;
  std::string *v976;
  __int128 v977;
  std::string *v978;
  std::string::size_type v979;
  std::string *v980;
  __int128 v981;
  std::string *v982;
  __int128 v983;
  std::string *v984;
  __int128 v985;
  std::string *v986;
  __int128 v987;
  std::string *v988;
  std::string::size_type v989;
  std::string *v990;
  __int128 v991;
  std::string *v992;
  __int128 v993;
  std::string *v994;
  __int128 v995;
  std::string *v996;
  __int128 v997;
  std::string *v998;
  std::string::size_type v999;
  std::string *v1000;
  __int128 v1001;
  std::string *v1002;
  __int128 v1003;
  std::string *v1004;
  __int128 v1005;
  std::string *v1006;
  __int128 v1007;
  std::string *v1008;
  std::string::size_type v1009;
  std::string *v1010;
  __int128 v1011;
  std::string *v1012;
  __int128 v1013;
  std::string *v1014;
  __int128 v1015;
  std::string *v1016;
  __int128 v1017;
  std::string *v1018;
  std::string::size_type v1019;
  std::string *v1020;
  __int128 v1021;
  std::string *v1022;
  __int128 v1023;
  std::string *v1024;
  std::string::size_type v1025;
  std::string *v1026;
  __int128 v1027;
  std::string *v1028;
  __int128 v1029;
  std::string *v1030;
  std::string::size_type v1031;
  std::string *v1032;
  __int128 v1033;
  std::string *v1034;
  __int128 v1035;
  std::string *v1036;
  __int128 v1037;
  std::string *v1038;
  __int128 v1039;
  std::string *v1040;
  std::string::size_type v1041;
  std::string *v1042;
  __int128 v1043;
  std::string *v1044;
  __int128 v1045;
  std::string *v1046;
  __int128 v1047;
  std::string *v1048;
  __int128 v1049;
  std::string *v1050;
  std::string::size_type v1051;
  std::string *v1052;
  __int128 v1053;
  std::string *v1054;
  __int128 v1055;
  std::string *v1056;
  std::string::size_type v1057;
  std::string *v1058;
  __int128 v1059;
  std::string *v1060;
  __int128 v1061;
  std::string *v1062;
  __int128 v1063;
  std::string *v1064;
  __int128 v1065;
  std::string *v1066;
  std::string::size_type v1067;
  std::string *v1068;
  __int128 v1069;
  std::string *v1070;
  __int128 v1071;
  std::string *v1072;
  std::string::size_type v1073;
  std::string *v1074;
  __int128 v1075;
  std::string *v1076;
  __int128 v1077;
  std::string *v1078;
  __int128 v1079;
  std::string *v1080;
  __int128 v1081;
  std::string *v1082;
  std::string::size_type v1083;
  std::string *v1084;
  __int128 v1085;
  std::string *v1086;
  __int128 v1087;
  std::string *v1088;
  std::string::size_type v1089;
  std::string *v1090;
  std::string *v1091;
  __int128 v1092;
  std::string *v1093;
  __int128 v1094;
  std::string *v1095;
  __int128 v1096;
  std::string *v1097;
  std::string::size_type v1098;
  std::string *v1099;
  __int128 v1100;
  std::string *v1101;
  __int128 v1102;
  std::string *v1103;
  std::string::size_type v1104;
  id v1105;
  id v1106;
  NSObject *v1107;
  std::string *v1108;
  __int128 v1109;
  int v1110;
  const std::string::value_type *v1111;
  std::string::size_type v1112;
  std::string *v1113;
  __int128 v1114;
  std::string *v1115;
  __int128 v1116;
  int v1117;
  const std::string::value_type *v1118;
  std::string::size_type v1119;
  std::string *v1120;
  __int128 v1121;
  std::string *v1122;
  char *v1123;
  char v1124;
  void *v1125;
  id v1126;
  NSObject *v1127;
  std::string *v1128;
  __int128 v1129;
  int v1130;
  const std::string::value_type *v1131;
  std::string::size_type v1132;
  std::string *v1133;
  __int128 v1134;
  std::string *v1135;
  __int128 v1136;
  int v1137;
  const std::string::value_type *v1138;
  std::string::size_type v1139;
  std::string *v1140;
  __int128 v1141;
  std::string *v1142;
  __int128 v1143;
  int v1144;
  const std::string::value_type *v1145;
  std::string::size_type v1146;
  std::string *v1147;
  __int128 v1148;
  std::string *v1149;
  __int128 v1150;
  int v1151;
  const std::string::value_type *v1152;
  std::string::size_type v1153;
  std::string *v1154;
  __int128 v1155;
  std::string *v1156;
  char *v1157;
  char v1158;
  _BOOL4 AppBooleanValue;
  id v1160;
  char v1161;
  std::string v1163;
  std::string v1164;
  std::string v1165;
  std::string v1166;
  std::string v1167;
  std::string v1168;
  std::string v1169;
  std::string v1170;
  std::string v1171;
  std::string v1172;
  std::string __x;
  std::vector<char> v1174;
  std::string v1175;
  std::string v1176;
  std::string v1177;
  uint64_t v1178;

  v1178 = *MEMORY[0x1E0C80C00];
  v1160 = a2;
  objc_msgSend(v1160, "objectForKeyedSubscript:", CFSTR("sampleRate"));
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v12, "doubleValue");
  v14 = v13;

  if (v14 <= 0.0)
  {
    std::string::basic_string[abi:ne180100]<0>(&v1174, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/InternalAudioUnits/Effects/AUSpatialCapture/SpatialCapture.mm");
    std::string::basic_string[abi:ne180100]<0>(&__x, "GetSpatialCaptureDSPGraphSource");
    std::string::basic_string[abi:ne180100]<0>(&v1177, "bad sample rate");
    DSPGraph::ThrowException();
    goto LABEL_2211;
  }
  objc_msgSend(v1160, "objectForKeyedSubscript:", CFSTR("numMics"));
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  v16 = objc_msgSend(v15, "unsignedIntValue");

  if (!v16)
  {
    std::string::basic_string[abi:ne180100]<0>(&v1174, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/InternalAudioUnits/Effects/AUSpatialCapture/SpatialCapture.mm");
    std::string::basic_string[abi:ne180100]<0>(&__x, "GetSpatialCaptureDSPGraphSource");
    std::string::basic_string[abi:ne180100]<0>(&v1177, "bad number of mics");
    DSPGraph::ThrowException();
    goto LABEL_2211;
  }
  __x.__r_.__value_.__s.__data_[0] = 0;
  std::vector<char>::vector(&v1174, 0x20uLL, (const std::vector<char>::value_type *)&__x);
  begin = v1174.__begin_;
  *((_DWORD *)v1174.__begin_ + 1) = 0;
  *((_DWORD *)begin + 2) = 0;
  *(_DWORD *)begin = a3;
  if (!a3 || a3 == 0x10000)
  {
    v1174.__end_ = begin;
    operator delete(begin);
    goto LABEL_2206;
  }
  v18 = (unsigned __int16)a3;
  v1174.__end_ = begin;
  operator delete(begin);
  if (!(_WORD)a3)
  {
LABEL_2206:
    std::string::basic_string[abi:ne180100]<0>(&v1174, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/InternalAudioUnits/Effects/AUSpatialCapture/SpatialCapture.mm");
    std::string::basic_string[abi:ne180100]<0>(&__x, "GetSpatialCaptureDSPGraphSource");
    std::string::basic_string[abi:ne180100]<0>(&v1177, "bad number of outputs");
    DSPGraph::ThrowException();
    goto LABEL_2211;
  }
  objc_msgSend(v1160, "objectForKeyedSubscript:", CFSTR("numSDLSBeams"));
  v19 = (void *)objc_claimAutoreleasedReturnValue();
  v20 = objc_msgSend(v19, "unsignedIntValue");

  if (!v20)
  {
    std::string::basic_string[abi:ne180100]<0>(&v1174, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/InternalAudioUnits/Effects/AUSpatialCapture/SpatialCapture.mm");
    std::string::basic_string[abi:ne180100]<0>(&__x, "GetSpatialCaptureDSPGraphSource");
    std::string::basic_string[abi:ne180100]<0>(&v1177, "bad number of linear spatial beams");
    DSPGraph::ThrowException();
    goto LABEL_2211;
  }
  objc_msgSend(v1160, "objectForKeyedSubscript:", CFSTR("nFFT"));
  v21 = (void *)objc_claimAutoreleasedReturnValue();
  v22 = objc_msgSend(v21, "unsignedIntValue");

  if (v22 <= 1)
  {
    std::string::basic_string[abi:ne180100]<0>(&v1174, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/InternalAudioUnits/Effects/AUSpatialCapture/SpatialCapture.mm");
    std::string::basic_string[abi:ne180100]<0>(&__x, "GetSpatialCaptureDSPGraphSource");
    std::string::basic_string[abi:ne180100]<0>(&v1177, "bad block size");
    DSPGraph::ThrowException();
LABEL_2211:
    __break(1u);
  }
  AppBooleanValue = CACFPreferencesGetAppBooleanValue(CFSTR("enable_spatial_capture_recording"), CFSTR("com.apple.coreaudio"), 0);
  memset(&v1174, 0, sizeof(v1174));
  std::to_string(&v1166, (int)v14);
  v23 = std::string::insert(&v1166, 0, "    ; Defines                                    \n    [def procRate ",
          0x44uLL);
  v24 = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
  v1167.__r_.__value_.__r.__words[2] = v23->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v1167.__r_.__value_.__l.__data_ = v24;
  v23->__r_.__value_.__l.__size_ = 0;
  v23->__r_.__value_.__r.__words[2] = 0;
  v23->__r_.__value_.__r.__words[0] = 0;
  v25 = std::string::append(&v1167, "]                  \n    [def numMics ", 0x25uLL);
  v26 = *(_OWORD *)&v25->__r_.__value_.__l.__data_;
  v1168.__r_.__value_.__r.__words[2] = v25->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v1168.__r_.__value_.__l.__data_ = v26;
  v25->__r_.__value_.__l.__size_ = 0;
  v25->__r_.__value_.__r.__words[2] = 0;
  v25->__r_.__value_.__r.__words[0] = 0;
  std::to_string(&v1175, v16);
  if ((v1175.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v27 = &v1175;
  else
    v27 = (std::string *)v1175.__r_.__value_.__r.__words[0];
  if ((v1175.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(v1175.__r_.__value_.__r.__words[2]);
  else
    size = v1175.__r_.__value_.__l.__size_;
  v29 = std::string::append(&v1168, (const std::string::value_type *)v27, size);
  v30 = *(_OWORD *)&v29->__r_.__value_.__l.__data_;
  v1176.__r_.__value_.__r.__words[2] = v29->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v1176.__r_.__value_.__l.__data_ = v30;
  v29->__r_.__value_.__l.__size_ = 0;
  v29->__r_.__value_.__r.__words[2] = 0;
  v29->__r_.__value_.__r.__words[0] = 0;
  v31 = std::string::append(&v1176, "]                     \n    [def numOutputs ", 0x2BuLL);
  v32 = *(_OWORD *)&v31->__r_.__value_.__l.__data_;
  v1169.__r_.__value_.__r.__words[2] = v31->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v1169.__r_.__value_.__l.__data_ = v32;
  v31->__r_.__value_.__l.__size_ = 0;
  v31->__r_.__value_.__r.__words[2] = 0;
  v31->__r_.__value_.__r.__words[0] = 0;
  std::to_string(&v1165, v18);
  if ((v1165.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v33 = &v1165;
  else
    v33 = (std::string *)v1165.__r_.__value_.__r.__words[0];
  if ((v1165.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v34 = HIBYTE(v1165.__r_.__value_.__r.__words[2]);
  else
    v34 = v1165.__r_.__value_.__l.__size_;
  v35 = std::string::append(&v1169, (const std::string::value_type *)v33, v34);
  v36 = *(_OWORD *)&v35->__r_.__value_.__l.__data_;
  v1170.__r_.__value_.__r.__words[2] = v35->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v1170.__r_.__value_.__l.__data_ = v36;
  v35->__r_.__value_.__l.__size_ = 0;
  v35->__r_.__value_.__r.__words[2] = 0;
  v35->__r_.__value_.__r.__words[0] = 0;
  v37 = std::string::append(&v1170, "]                     \n    [def numLinBeams ", 0x2CuLL);
  v38 = *(_OWORD *)&v37->__r_.__value_.__l.__data_;
  v1171.__r_.__value_.__r.__words[2] = v37->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v1171.__r_.__value_.__l.__data_ = v38;
  v37->__r_.__value_.__l.__size_ = 0;
  v37->__r_.__value_.__r.__words[2] = 0;
  v37->__r_.__value_.__r.__words[0] = 0;
  std::to_string(&v1164, v20);
  if ((v1164.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v39 = &v1164;
  else
    v39 = (std::string *)v1164.__r_.__value_.__r.__words[0];
  if ((v1164.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v40 = HIBYTE(v1164.__r_.__value_.__r.__words[2]);
  else
    v40 = v1164.__r_.__value_.__l.__size_;
  v41 = std::string::append(&v1171, (const std::string::value_type *)v39, v40);
  v42 = *(_OWORD *)&v41->__r_.__value_.__l.__data_;
  v1172.__r_.__value_.__r.__words[2] = v41->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v1172.__r_.__value_.__l.__data_ = v42;
  v41->__r_.__value_.__l.__size_ = 0;
  v41->__r_.__value_.__r.__words[2] = 0;
  v41->__r_.__value_.__r.__words[0] = 0;
  v43 = std::string::append(&v1172, "]                     \n    [def fftBlockSize ", 0x2DuLL);
  v44 = *(_OWORD *)&v43->__r_.__value_.__l.__data_;
  v1177.__r_.__value_.__r.__words[2] = v43->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v1177.__r_.__value_.__l.__data_ = v44;
  v43->__r_.__value_.__l.__size_ = 0;
  v43->__r_.__value_.__r.__words[2] = 0;
  v43->__r_.__value_.__r.__words[0] = 0;
  std::to_string(&v1163, v22 >> 1);
  if ((v1163.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v45 = &v1163;
  else
    v45 = (std::string *)v1163.__r_.__value_.__r.__words[0];
  if ((v1163.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v46 = HIBYTE(v1163.__r_.__value_.__r.__words[2]);
  else
    v46 = v1163.__r_.__value_.__l.__size_;
  v47 = std::string::append(&v1177, (const std::string::value_type *)v45, v46);
  v48 = *(_OWORD *)&v47->__r_.__value_.__l.__data_;
  __x.__r_.__value_.__r.__words[2] = v47->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__x.__r_.__value_.__l.__data_ = v48;
  v47->__r_.__value_.__l.__size_ = 0;
  v47->__r_.__value_.__r.__words[2] = 0;
  v47->__r_.__value_.__r.__words[0] = 0;
  v49 = std::string::append(&__x, "] \n", 3uLL);
  v50 = *(_OWORD *)&v49->__r_.__value_.__l.__data_;
  a1->__r_.__value_.__r.__words[2] = v49->__r_.__value_.__r.__words[2];
  *(_OWORD *)&a1->__r_.__value_.__l.__data_ = v50;
  v49->__r_.__value_.__l.__size_ = 0;
  v49->__r_.__value_.__r.__words[2] = 0;
  v49->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(__x.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__x.__r_.__value_.__l.__data_);
  if (SHIBYTE(v1163.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v1163.__r_.__value_.__l.__data_);
  if (SHIBYTE(v1177.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v1177.__r_.__value_.__l.__data_);
  if (SHIBYTE(v1172.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v1172.__r_.__value_.__l.__data_);
  if (SHIBYTE(v1164.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v1164.__r_.__value_.__l.__data_);
  if (SHIBYTE(v1171.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v1171.__r_.__value_.__l.__data_);
  if (SHIBYTE(v1170.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v1170.__r_.__value_.__l.__data_);
  if (SHIBYTE(v1165.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v1165.__r_.__value_.__l.__data_);
  if (SHIBYTE(v1169.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v1169.__r_.__value_.__l.__data_);
  if (SHIBYTE(v1176.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v1176.__r_.__value_.__l.__data_);
  if (SHIBYTE(v1175.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v1175.__r_.__value_.__l.__data_);
  if (SHIBYTE(v1168.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v1168.__r_.__value_.__l.__data_);
  if (SHIBYTE(v1167.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v1167.__r_.__value_.__l.__data_);
  if (SHIBYTE(v1166.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v1166.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&__x, "\n     ; Output\n     out finalOut\n     ");
  if ((__x.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_x = &__x;
  else
    p_x = (std::string *)__x.__r_.__value_.__r.__words[0];
  if ((__x.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v52 = HIBYTE(__x.__r_.__value_.__r.__words[2]);
  else
    v52 = __x.__r_.__value_.__l.__size_;
  std::string::append(a1, (const std::string::value_type *)p_x, v52);
  if (SHIBYTE(__x.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__x.__r_.__value_.__l.__data_);
    if (a6)
      goto LABEL_68;
  }
  else if (a6)
  {
LABEL_68:
    std::string::basic_string[abi:ne180100]<0>(&__x, "\n                                      in refInTd\n                                      box refIn fft 1 1\n                                      wire refInTd refIn ([procRate] [numMics] [fftBlockSize])\n                                      ");
    if ((__x.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v53 = &__x;
    else
      v53 = (std::string *)__x.__r_.__value_.__r.__words[0];
    if ((__x.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v54 = HIBYTE(__x.__r_.__value_.__r.__words[2]);
    else
      v54 = __x.__r_.__value_.__l.__size_;
    goto LABEL_81;
  }
  std::string::basic_string[abi:ne180100]<0>(&__x, "\n            in refIn\n                                      ");
  if ((__x.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v53 = &__x;
  else
    v53 = (std::string *)__x.__r_.__value_.__r.__words[0];
  if ((__x.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v54 = HIBYTE(__x.__r_.__value_.__r.__words[2]);
  else
    v54 = __x.__r_.__value_.__l.__size_;
LABEL_81:
  std::string::append(a1, (const std::string::value_type *)v53, v54);
  if (SHIBYTE(__x.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__x.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&__x, "\n                                  ;\n"
    "                                  ; Mic selection\n"
    "                                  ;\n"
    "                                  box micSelectCoordinator scmicselect 0 0\n"
    "                                  \n"
    "                                  ; Linear spatial (full signal)\n"
    "                                  box linFullSignal (aufx bmfd appl) 1 3\n"
    "                                  box linDead0 dead 1 0\n"
    "                                  box linDead1 dead 1 0\n"
    "                                  box linPatcher chansel 1 1\n"
    "                                  \n"
    "                                  wire refIn                                 linFullSignal                       (fr"
    "eq [procRate] [numMics] [fftBlockSize])\n"
    "                                  wire (linFullSignal 0)                     linDead0                            (fr"
    "eq [procRate] 1 [fftBlockSize])\n"
    "                                  wire (linFullSignal 1)                     linDead1                            (fr"
    "eq [procRate] 1 [fftBlockSize])\n"
    "                                  wire (linFullSignal 2)                     linPatcher                          (fr"
    "eq [procRate] [numLinBeams] [fftBlockSize])\n"
    "                                  ");
  if ((__x.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v55 = &__x;
  else
    v55 = (std::string *)__x.__r_.__value_.__r.__words[0];
  if ((__x.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v56 = HIBYTE(__x.__r_.__value_.__r.__words[2]);
  else
    v56 = __x.__r_.__value_.__l.__size_;
  std::string::append(a1, (const std::string::value_type *)v55, v56);
  if (SHIBYTE(__x.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__x.__r_.__value_.__l.__data_);
    if (!a7)
      goto LABEL_101;
  }
  else if (!a7)
  {
    goto LABEL_101;
  }
  std::string::basic_string[abi:ne180100]<0>(&__x, "\n                                  box linFullSignalFTT fft 1 1\n                                  ");
  if ((__x.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v57 = &__x;
  else
    v57 = (std::string *)__x.__r_.__value_.__r.__words[0];
  if ((__x.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v58 = HIBYTE(__x.__r_.__value_.__r.__words[2]);
  else
    v58 = __x.__r_.__value_.__l.__size_;
  std::string::append(a1, (const std::string::value_type *)v57, v58);
  if (SHIBYTE(__x.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__x.__r_.__value_.__l.__data_);
LABEL_101:
  v59 = 0;
  do
  {
    std::to_string(&v1170, v59 + 3);
    v60 = std::string::insert(&v1170, 0, "wireProperty (micSelectCoordinator ", 0x23uLL);
    v61 = *(_OWORD *)&v60->__r_.__value_.__l.__data_;
    v1171.__r_.__value_.__r.__words[2] = v60->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v1171.__r_.__value_.__l.__data_ = v61;
    v60->__r_.__value_.__l.__size_ = 0;
    v60->__r_.__value_.__r.__words[2] = 0;
    v60->__r_.__value_.__r.__words[0] = 0;
    v62 = std::string::append(&v1171, ") (linPatcher ", 0xEuLL);
    v63 = *(_OWORD *)&v62->__r_.__value_.__l.__data_;
    v1172.__r_.__value_.__r.__words[2] = v62->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v1172.__r_.__value_.__l.__data_ = v63;
    v62->__r_.__value_.__l.__size_ = 0;
    v62->__r_.__value_.__r.__words[2] = 0;
    v62->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v1169, v59);
    if ((v1169.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v64 = &v1169;
    else
      v64 = (std::string *)v1169.__r_.__value_.__r.__words[0];
    if ((v1169.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v65 = HIBYTE(v1169.__r_.__value_.__r.__words[2]);
    else
      v65 = v1169.__r_.__value_.__l.__size_;
    v66 = std::string::append(&v1172, (const std::string::value_type *)v64, v65);
    v67 = *(_OWORD *)&v66->__r_.__value_.__l.__data_;
    v1177.__r_.__value_.__r.__words[2] = v66->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v1177.__r_.__value_.__l.__data_ = v67;
    v66->__r_.__value_.__l.__size_ = 0;
    v66->__r_.__value_.__r.__words[2] = 0;
    v66->__r_.__value_.__r.__words[0] = 0;
    v68 = std::string::append(&v1177, ") true\n", 7uLL);
    v69 = *(_OWORD *)&v68->__r_.__value_.__l.__data_;
    __x.__r_.__value_.__r.__words[2] = v68->__r_.__value_.__r.__words[2];
    *(_OWORD *)&__x.__r_.__value_.__l.__data_ = v69;
    v68->__r_.__value_.__l.__size_ = 0;
    v68->__r_.__value_.__r.__words[2] = 0;
    v68->__r_.__value_.__r.__words[0] = 0;
    if ((__x.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v70 = &__x;
    else
      v70 = (std::string *)__x.__r_.__value_.__r.__words[0];
    if ((__x.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v71 = HIBYTE(__x.__r_.__value_.__r.__words[2]);
    else
      v71 = __x.__r_.__value_.__l.__size_;
    std::string::append(a1, (const std::string::value_type *)v70, v71);
    if (SHIBYTE(__x.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__x.__r_.__value_.__l.__data_);
    if (SHIBYTE(v1177.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v1177.__r_.__value_.__l.__data_);
    if (SHIBYTE(v1169.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v1169.__r_.__value_.__l.__data_);
    if (SHIBYTE(v1172.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v1172.__r_.__value_.__l.__data_);
    if (SHIBYTE(v1171.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v1171.__r_.__value_.__l.__data_);
    if (SHIBYTE(v1170.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v1170.__r_.__value_.__l.__data_);
    ++v59;
  }
  while (v18 != v59);
  std::to_string(&v1170, 3u);
  v72 = std::string::insert(&v1170, 0, "wireParam (micSelectCoordinator ", 0x20uLL);
  v73 = *(_OWORD *)&v72->__r_.__value_.__l.__data_;
  v1171.__r_.__value_.__r.__words[2] = v72->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v1171.__r_.__value_.__l.__data_ = v73;
  v72->__r_.__value_.__l.__size_ = 0;
  v72->__r_.__value_.__r.__words[2] = 0;
  v72->__r_.__value_.__r.__words[0] = 0;
  v74 = std::string::append(&v1171, " 0 0) (linFullSignal ", 0x15uLL);
  v75 = *(_OWORD *)&v74->__r_.__value_.__l.__data_;
  v1172.__r_.__value_.__r.__words[2] = v74->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v1172.__r_.__value_.__l.__data_ = v75;
  v74->__r_.__value_.__l.__size_ = 0;
  v74->__r_.__value_.__r.__words[2] = 0;
  v74->__r_.__value_.__r.__words[0] = 0;
  std::to_string(&v1169, 4u);
  if ((v1169.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v76 = &v1169;
  else
    v76 = (std::string *)v1169.__r_.__value_.__r.__words[0];
  if ((v1169.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v77 = HIBYTE(v1169.__r_.__value_.__r.__words[2]);
  else
    v77 = v1169.__r_.__value_.__l.__size_;
  v78 = std::string::append(&v1172, (const std::string::value_type *)v76, v77);
  v79 = *(_OWORD *)&v78->__r_.__value_.__l.__data_;
  v1177.__r_.__value_.__r.__words[2] = v78->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v1177.__r_.__value_.__l.__data_ = v79;
  v78->__r_.__value_.__l.__size_ = 0;
  v78->__r_.__value_.__r.__words[2] = 0;
  v78->__r_.__value_.__r.__words[0] = 0;
  v80 = std::string::append(&v1177, ") true\n", 7uLL);
  v81 = *(_OWORD *)&v80->__r_.__value_.__l.__data_;
  __x.__r_.__value_.__r.__words[2] = v80->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__x.__r_.__value_.__l.__data_ = v81;
  v80->__r_.__value_.__l.__size_ = 0;
  v80->__r_.__value_.__r.__words[2] = 0;
  v80->__r_.__value_.__r.__words[0] = 0;
  if ((__x.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v82 = &__x;
  else
    v82 = (std::string *)__x.__r_.__value_.__r.__words[0];
  if ((__x.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v83 = HIBYTE(__x.__r_.__value_.__r.__words[2]);
  else
    v83 = __x.__r_.__value_.__l.__size_;
  std::string::append(a1, (const std::string::value_type *)v82, v83);
  if (SHIBYTE(__x.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__x.__r_.__value_.__l.__data_);
  if (SHIBYTE(v1177.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v1177.__r_.__value_.__l.__data_);
  if (SHIBYTE(v1169.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v1169.__r_.__value_.__l.__data_);
  if (SHIBYTE(v1172.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v1172.__r_.__value_.__l.__data_);
  if (SHIBYTE(v1171.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v1171.__r_.__value_.__l.__data_);
  if (SHIBYTE(v1170.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v1170.__r_.__value_.__l.__data_);
  std::to_string(&v1170, v18 + 2);
  v84 = std::string::insert(&v1170, 0, "wireParam (micSelectCoordinator ", 0x20uLL);
  v85 = *(_OWORD *)&v84->__r_.__value_.__l.__data_;
  v1171.__r_.__value_.__r.__words[2] = v84->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v1171.__r_.__value_.__l.__data_ = v85;
  v84->__r_.__value_.__l.__size_ = 0;
  v84->__r_.__value_.__r.__words[2] = 0;
  v84->__r_.__value_.__r.__words[0] = 0;
  v86 = std::string::append(&v1171, " 0 0) (linFullSignal ", 0x15uLL);
  v87 = *(_OWORD *)&v86->__r_.__value_.__l.__data_;
  v1172.__r_.__value_.__r.__words[2] = v86->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v1172.__r_.__value_.__l.__data_ = v87;
  v86->__r_.__value_.__l.__size_ = 0;
  v86->__r_.__value_.__r.__words[2] = 0;
  v86->__r_.__value_.__r.__words[0] = 0;
  std::to_string(&v1169, 5u);
  if ((v1169.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v88 = &v1169;
  else
    v88 = (std::string *)v1169.__r_.__value_.__r.__words[0];
  if ((v1169.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v89 = HIBYTE(v1169.__r_.__value_.__r.__words[2]);
  else
    v89 = v1169.__r_.__value_.__l.__size_;
  v90 = std::string::append(&v1172, (const std::string::value_type *)v88, v89);
  v91 = *(_OWORD *)&v90->__r_.__value_.__l.__data_;
  v1177.__r_.__value_.__r.__words[2] = v90->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v1177.__r_.__value_.__l.__data_ = v91;
  v90->__r_.__value_.__l.__size_ = 0;
  v90->__r_.__value_.__r.__words[2] = 0;
  v90->__r_.__value_.__r.__words[0] = 0;
  v92 = std::string::append(&v1177, ") true\n", 7uLL);
  v93 = *(_OWORD *)&v92->__r_.__value_.__l.__data_;
  __x.__r_.__value_.__r.__words[2] = v92->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__x.__r_.__value_.__l.__data_ = v93;
  v92->__r_.__value_.__l.__size_ = 0;
  v92->__r_.__value_.__r.__words[2] = 0;
  v92->__r_.__value_.__r.__words[0] = 0;
  if ((__x.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v94 = &__x;
  else
    v94 = (std::string *)__x.__r_.__value_.__r.__words[0];
  if ((__x.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v95 = HIBYTE(__x.__r_.__value_.__r.__words[2]);
  else
    v95 = __x.__r_.__value_.__l.__size_;
  std::string::append(a1, (const std::string::value_type *)v94, v95);
  if (SHIBYTE(__x.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__x.__r_.__value_.__l.__data_);
  if (SHIBYTE(v1177.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v1177.__r_.__value_.__l.__data_);
  if (SHIBYTE(v1169.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v1169.__r_.__value_.__l.__data_);
  if (SHIBYTE(v1172.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v1172.__r_.__value_.__l.__data_);
  if (SHIBYTE(v1171.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v1171.__r_.__value_.__l.__data_);
  if (SHIBYTE(v1170.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v1170.__r_.__value_.__l.__data_);
  std::to_string(&v1170, 0x1Eu);
  v96 = std::string::insert(&v1170, 0, "param ", 6uLL);
  v97 = *(_OWORD *)&v96->__r_.__value_.__l.__data_;
  v1171.__r_.__value_.__r.__words[2] = v96->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v1171.__r_.__value_.__l.__data_ = v97;
  v96->__r_.__value_.__l.__size_ = 0;
  v96->__r_.__value_.__r.__words[2] = 0;
  v96->__r_.__value_.__r.__words[0] = 0;
  v98 = std::string::append(&v1171, " ", 1uLL);
  v99 = *(_OWORD *)&v98->__r_.__value_.__l.__data_;
  v1172.__r_.__value_.__r.__words[2] = v98->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v1172.__r_.__value_.__l.__data_ = v99;
  v98->__r_.__value_.__l.__size_ = 0;
  v98->__r_.__value_.__r.__words[2] = 0;
  v98->__r_.__value_.__r.__words[0] = 0;
  std::to_string(&v1169, 3u);
  if ((v1169.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v100 = &v1169;
  else
    v100 = (std::string *)v1169.__r_.__value_.__r.__words[0];
  if ((v1169.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v101 = HIBYTE(v1169.__r_.__value_.__r.__words[2]);
  else
    v101 = v1169.__r_.__value_.__l.__size_;
  v102 = std::string::append(&v1172, (const std::string::value_type *)v100, v101);
  v103 = *(_OWORD *)&v102->__r_.__value_.__l.__data_;
  v1177.__r_.__value_.__r.__words[2] = v102->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v1177.__r_.__value_.__l.__data_ = v103;
  v102->__r_.__value_.__l.__size_ = 0;
  v102->__r_.__value_.__r.__words[2] = 0;
  v102->__r_.__value_.__r.__words[0] = 0;
  v104 = std::string::append(&v1177, "\n", 1uLL);
  v105 = *(_OWORD *)&v104->__r_.__value_.__l.__data_;
  __x.__r_.__value_.__r.__words[2] = v104->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__x.__r_.__value_.__l.__data_ = v105;
  v104->__r_.__value_.__l.__size_ = 0;
  v104->__r_.__value_.__r.__words[2] = 0;
  v104->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v1177.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v1177.__r_.__value_.__l.__data_);
  if (SHIBYTE(v1169.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v1169.__r_.__value_.__l.__data_);
  if (SHIBYTE(v1172.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v1172.__r_.__value_.__l.__data_);
  if (SHIBYTE(v1171.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v1171.__r_.__value_.__l.__data_);
  if (SHIBYTE(v1170.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v1170.__r_.__value_.__l.__data_);
  std::to_string(&v1169, 0x1Eu);
  v106 = std::string::insert(&v1169, 0, "wireGraphParam ", 0xFuLL);
  v107 = *(_OWORD *)&v106->__r_.__value_.__l.__data_;
  v1170.__r_.__value_.__r.__words[2] = v106->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v1170.__r_.__value_.__l.__data_ = v107;
  v106->__r_.__value_.__l.__size_ = 0;
  v106->__r_.__value_.__r.__words[2] = 0;
  v106->__r_.__value_.__r.__words[0] = 0;
  v108 = std::string::append(&v1170, " (micSelectCoordinator ", 0x17uLL);
  v109 = *(_OWORD *)&v108->__r_.__value_.__l.__data_;
  v1171.__r_.__value_.__r.__words[2] = v108->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v1171.__r_.__value_.__l.__data_ = v109;
  v108->__r_.__value_.__l.__size_ = 0;
  v108->__r_.__value_.__r.__words[2] = 0;
  v108->__r_.__value_.__r.__words[0] = 0;
  std::to_string(&v1176, 0x1Eu);
  if ((v1176.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v110 = &v1176;
  else
    v110 = (std::string *)v1176.__r_.__value_.__r.__words[0];
  if ((v1176.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v111 = HIBYTE(v1176.__r_.__value_.__r.__words[2]);
  else
    v111 = v1176.__r_.__value_.__l.__size_;
  v112 = std::string::append(&v1171, (const std::string::value_type *)v110, v111);
  v113 = *(_OWORD *)&v112->__r_.__value_.__l.__data_;
  v1172.__r_.__value_.__r.__words[2] = v112->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v1172.__r_.__value_.__l.__data_ = v113;
  v112->__r_.__value_.__l.__size_ = 0;
  v112->__r_.__value_.__r.__words[2] = 0;
  v112->__r_.__value_.__r.__words[0] = 0;
  v114 = std::string::append(&v1172, " 0 0)\n", 6uLL);
  v115 = *(_OWORD *)&v114->__r_.__value_.__l.__data_;
  v1177.__r_.__value_.__r.__words[2] = v114->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v1177.__r_.__value_.__l.__data_ = v115;
  v114->__r_.__value_.__l.__size_ = 0;
  v114->__r_.__value_.__r.__words[2] = 0;
  v114->__r_.__value_.__r.__words[0] = 0;
  if ((v1177.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v116 = &v1177;
  else
    v116 = (std::string *)v1177.__r_.__value_.__r.__words[0];
  if ((v1177.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v117 = HIBYTE(v1177.__r_.__value_.__r.__words[2]);
  else
    v117 = v1177.__r_.__value_.__l.__size_;
  std::string::append(&__x, (const std::string::value_type *)v116, v117);
  if (SHIBYTE(v1177.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v1177.__r_.__value_.__l.__data_);
  if (SHIBYTE(v1172.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v1172.__r_.__value_.__l.__data_);
  if (SHIBYTE(v1176.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v1176.__r_.__value_.__l.__data_);
  if (SHIBYTE(v1171.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v1171.__r_.__value_.__l.__data_);
  if (SHIBYTE(v1170.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v1170.__r_.__value_.__l.__data_);
  if (SHIBYTE(v1169.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v1169.__r_.__value_.__l.__data_);
  std::to_string(&v1171, 0);
  v118 = std::string::insert(&v1171, 0, "param ", 6uLL);
  v119 = *(_OWORD *)&v118->__r_.__value_.__l.__data_;
  v1172.__r_.__value_.__r.__words[2] = v118->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v1172.__r_.__value_.__l.__data_ = v119;
  v118->__r_.__value_.__l.__size_ = 0;
  v118->__r_.__value_.__r.__words[2] = 0;
  v118->__r_.__value_.__r.__words[0] = 0;
  v120 = std::string::append(&v1172, " 0.0\n", 5uLL);
  v121 = *(_OWORD *)&v120->__r_.__value_.__l.__data_;
  v1177.__r_.__value_.__r.__words[2] = v120->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v1177.__r_.__value_.__l.__data_ = v121;
  v120->__r_.__value_.__l.__size_ = 0;
  v120->__r_.__value_.__r.__words[2] = 0;
  v120->__r_.__value_.__r.__words[0] = 0;
  if ((v1177.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v122 = &v1177;
  else
    v122 = (std::string *)v1177.__r_.__value_.__r.__words[0];
  if ((v1177.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v123 = HIBYTE(v1177.__r_.__value_.__r.__words[2]);
  else
    v123 = v1177.__r_.__value_.__l.__size_;
  std::string::append(&__x, (const std::string::value_type *)v122, v123);
  if (SHIBYTE(v1177.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v1177.__r_.__value_.__l.__data_);
  if (SHIBYTE(v1172.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v1172.__r_.__value_.__l.__data_);
  if (SHIBYTE(v1171.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v1171.__r_.__value_.__l.__data_);
  std::to_string(&v1169, 0);
  v124 = std::string::insert(&v1169, 0, "wireGraphParam ", 0xFuLL);
  v125 = *(_OWORD *)&v124->__r_.__value_.__l.__data_;
  v1170.__r_.__value_.__r.__words[2] = v124->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v1170.__r_.__value_.__l.__data_ = v125;
  v124->__r_.__value_.__l.__size_ = 0;
  v124->__r_.__value_.__r.__words[2] = 0;
  v124->__r_.__value_.__r.__words[0] = 0;
  v126 = std::string::append(&v1170, " (micSelectCoordinator ", 0x17uLL);
  v127 = *(_OWORD *)&v126->__r_.__value_.__l.__data_;
  v1171.__r_.__value_.__r.__words[2] = v126->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v1171.__r_.__value_.__l.__data_ = v127;
  v126->__r_.__value_.__l.__size_ = 0;
  v126->__r_.__value_.__r.__words[2] = 0;
  v126->__r_.__value_.__r.__words[0] = 0;
  std::to_string(&v1176, 0);
  if ((v1176.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v128 = &v1176;
  else
    v128 = (std::string *)v1176.__r_.__value_.__r.__words[0];
  if ((v1176.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v129 = HIBYTE(v1176.__r_.__value_.__r.__words[2]);
  else
    v129 = v1176.__r_.__value_.__l.__size_;
  v130 = std::string::append(&v1171, (const std::string::value_type *)v128, v129);
  v131 = *(_OWORD *)&v130->__r_.__value_.__l.__data_;
  v1172.__r_.__value_.__r.__words[2] = v130->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v1172.__r_.__value_.__l.__data_ = v131;
  v130->__r_.__value_.__l.__size_ = 0;
  v130->__r_.__value_.__r.__words[2] = 0;
  v130->__r_.__value_.__r.__words[0] = 0;
  v132 = std::string::append(&v1172, " 0 0)\n", 6uLL);
  v133 = *(_OWORD *)&v132->__r_.__value_.__l.__data_;
  v1177.__r_.__value_.__r.__words[2] = v132->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v1177.__r_.__value_.__l.__data_ = v133;
  v132->__r_.__value_.__l.__size_ = 0;
  v132->__r_.__value_.__r.__words[2] = 0;
  v132->__r_.__value_.__r.__words[0] = 0;
  if ((v1177.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v134 = &v1177;
  else
    v134 = (std::string *)v1177.__r_.__value_.__r.__words[0];
  if ((v1177.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v135 = HIBYTE(v1177.__r_.__value_.__r.__words[2]);
  else
    v135 = v1177.__r_.__value_.__l.__size_;
  std::string::append(&__x, (const std::string::value_type *)v134, v135);
  if (SHIBYTE(v1177.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v1177.__r_.__value_.__l.__data_);
  if (SHIBYTE(v1172.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v1172.__r_.__value_.__l.__data_);
  if (SHIBYTE(v1176.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v1176.__r_.__value_.__l.__data_);
  if (SHIBYTE(v1171.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v1171.__r_.__value_.__l.__data_);
  if (SHIBYTE(v1170.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v1170.__r_.__value_.__l.__data_);
  if (SHIBYTE(v1169.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v1169.__r_.__value_.__l.__data_);
  std::to_string(&v1171, 0x32u);
  v136 = std::string::insert(&v1171, 0, "param ", 6uLL);
  v137 = *(_OWORD *)&v136->__r_.__value_.__l.__data_;
  v1172.__r_.__value_.__r.__words[2] = v136->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v1172.__r_.__value_.__l.__data_ = v137;
  v136->__r_.__value_.__l.__size_ = 0;
  v136->__r_.__value_.__r.__words[2] = 0;
  v136->__r_.__value_.__r.__words[0] = 0;
  v138 = std::string::append(&v1172, " 0.0\n", 5uLL);
  v139 = *(_OWORD *)&v138->__r_.__value_.__l.__data_;
  v1177.__r_.__value_.__r.__words[2] = v138->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v1177.__r_.__value_.__l.__data_ = v139;
  v138->__r_.__value_.__l.__size_ = 0;
  v138->__r_.__value_.__r.__words[2] = 0;
  v138->__r_.__value_.__r.__words[0] = 0;
  if ((v1177.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v140 = &v1177;
  else
    v140 = (std::string *)v1177.__r_.__value_.__r.__words[0];
  if ((v1177.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v141 = HIBYTE(v1177.__r_.__value_.__r.__words[2]);
  else
    v141 = v1177.__r_.__value_.__l.__size_;
  std::string::append(&__x, (const std::string::value_type *)v140, v141);
  if (SHIBYTE(v1177.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v1177.__r_.__value_.__l.__data_);
  if (SHIBYTE(v1172.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v1172.__r_.__value_.__l.__data_);
  if (SHIBYTE(v1171.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v1171.__r_.__value_.__l.__data_);
  std::to_string(&v1171, 0x33u);
  v142 = std::string::insert(&v1171, 0, "param ", 6uLL);
  v143 = *(_OWORD *)&v142->__r_.__value_.__l.__data_;
  v1172.__r_.__value_.__r.__words[2] = v142->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v1172.__r_.__value_.__l.__data_ = v143;
  v142->__r_.__value_.__l.__size_ = 0;
  v142->__r_.__value_.__r.__words[2] = 0;
  v142->__r_.__value_.__r.__words[0] = 0;
  v144 = std::string::append(&v1172, " 0.0\n", 5uLL);
  v145 = *(_OWORD *)&v144->__r_.__value_.__l.__data_;
  v1177.__r_.__value_.__r.__words[2] = v144->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v1177.__r_.__value_.__l.__data_ = v145;
  v144->__r_.__value_.__l.__size_ = 0;
  v144->__r_.__value_.__r.__words[2] = 0;
  v144->__r_.__value_.__r.__words[0] = 0;
  if ((v1177.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v146 = &v1177;
  else
    v146 = (std::string *)v1177.__r_.__value_.__r.__words[0];
  if ((v1177.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v147 = HIBYTE(v1177.__r_.__value_.__r.__words[2]);
  else
    v147 = v1177.__r_.__value_.__l.__size_;
  std::string::append(&__x, (const std::string::value_type *)v146, v147);
  if (SHIBYTE(v1177.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v1177.__r_.__value_.__l.__data_);
  if (SHIBYTE(v1172.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v1172.__r_.__value_.__l.__data_);
  if (SHIBYTE(v1171.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v1171.__r_.__value_.__l.__data_);
  std::to_string(&v1171, 0x34u);
  v148 = std::string::insert(&v1171, 0, "param ", 6uLL);
  v149 = *(_OWORD *)&v148->__r_.__value_.__l.__data_;
  v1172.__r_.__value_.__r.__words[2] = v148->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v1172.__r_.__value_.__l.__data_ = v149;
  v148->__r_.__value_.__l.__size_ = 0;
  v148->__r_.__value_.__r.__words[2] = 0;
  v148->__r_.__value_.__r.__words[0] = 0;
  v150 = std::string::append(&v1172, " 0.0\n", 5uLL);
  v151 = *(_OWORD *)&v150->__r_.__value_.__l.__data_;
  v1177.__r_.__value_.__r.__words[2] = v150->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v1177.__r_.__value_.__l.__data_ = v151;
  v150->__r_.__value_.__l.__size_ = 0;
  v150->__r_.__value_.__r.__words[2] = 0;
  v150->__r_.__value_.__r.__words[0] = 0;
  if ((v1177.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v152 = &v1177;
  else
    v152 = (std::string *)v1177.__r_.__value_.__r.__words[0];
  if ((v1177.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v153 = HIBYTE(v1177.__r_.__value_.__r.__words[2]);
  else
    v153 = v1177.__r_.__value_.__l.__size_;
  std::string::append(&__x, (const std::string::value_type *)v152, v153);
  if (SHIBYTE(v1177.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v1177.__r_.__value_.__l.__data_);
  if (SHIBYTE(v1172.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v1172.__r_.__value_.__l.__data_);
  if (SHIBYTE(v1171.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v1171.__r_.__value_.__l.__data_);
  std::to_string(&v1171, 0x35u);
  v154 = std::string::insert(&v1171, 0, "param ", 6uLL);
  v155 = *(_OWORD *)&v154->__r_.__value_.__l.__data_;
  v1172.__r_.__value_.__r.__words[2] = v154->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v1172.__r_.__value_.__l.__data_ = v155;
  v154->__r_.__value_.__l.__size_ = 0;
  v154->__r_.__value_.__r.__words[2] = 0;
  v154->__r_.__value_.__r.__words[0] = 0;
  v156 = std::string::append(&v1172, " 0.0\n", 5uLL);
  v157 = *(_OWORD *)&v156->__r_.__value_.__l.__data_;
  v1177.__r_.__value_.__r.__words[2] = v156->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v1177.__r_.__value_.__l.__data_ = v157;
  v156->__r_.__value_.__l.__size_ = 0;
  v156->__r_.__value_.__r.__words[2] = 0;
  v156->__r_.__value_.__r.__words[0] = 0;
  if ((v1177.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v158 = &v1177;
  else
    v158 = (std::string *)v1177.__r_.__value_.__r.__words[0];
  if ((v1177.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v159 = HIBYTE(v1177.__r_.__value_.__r.__words[2]);
  else
    v159 = v1177.__r_.__value_.__l.__size_;
  std::string::append(&__x, (const std::string::value_type *)v158, v159);
  if (SHIBYTE(v1177.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v1177.__r_.__value_.__l.__data_);
  if (SHIBYTE(v1172.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v1172.__r_.__value_.__l.__data_);
  if (SHIBYTE(v1171.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v1171.__r_.__value_.__l.__data_);
  std::to_string(&v1171, 0x2Fu);
  v160 = std::string::insert(&v1171, 0, "param ", 6uLL);
  v161 = *(_OWORD *)&v160->__r_.__value_.__l.__data_;
  v1172.__r_.__value_.__r.__words[2] = v160->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v1172.__r_.__value_.__l.__data_ = v161;
  v160->__r_.__value_.__l.__size_ = 0;
  v160->__r_.__value_.__r.__words[2] = 0;
  v160->__r_.__value_.__r.__words[0] = 0;
  v162 = std::string::append(&v1172, " 0.0\n", 5uLL);
  v163 = *(_OWORD *)&v162->__r_.__value_.__l.__data_;
  v1177.__r_.__value_.__r.__words[2] = v162->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v1177.__r_.__value_.__l.__data_ = v163;
  v162->__r_.__value_.__l.__size_ = 0;
  v162->__r_.__value_.__r.__words[2] = 0;
  v162->__r_.__value_.__r.__words[0] = 0;
  if ((v1177.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v164 = &v1177;
  else
    v164 = (std::string *)v1177.__r_.__value_.__r.__words[0];
  if ((v1177.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v165 = HIBYTE(v1177.__r_.__value_.__r.__words[2]);
  else
    v165 = v1177.__r_.__value_.__l.__size_;
  std::string::append(&__x, (const std::string::value_type *)v164, v165);
  if (SHIBYTE(v1177.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v1177.__r_.__value_.__l.__data_);
  if (SHIBYTE(v1172.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v1172.__r_.__value_.__l.__data_);
  if (SHIBYTE(v1171.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v1171.__r_.__value_.__l.__data_);
  std::to_string(&v1171, 0x30u);
  v166 = std::string::insert(&v1171, 0, "param ", 6uLL);
  v167 = *(_OWORD *)&v166->__r_.__value_.__l.__data_;
  v1172.__r_.__value_.__r.__words[2] = v166->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v1172.__r_.__value_.__l.__data_ = v167;
  v166->__r_.__value_.__l.__size_ = 0;
  v166->__r_.__value_.__r.__words[2] = 0;
  v166->__r_.__value_.__r.__words[0] = 0;
  v168 = std::string::append(&v1172, " 0.0\n", 5uLL);
  v169 = *(_OWORD *)&v168->__r_.__value_.__l.__data_;
  v1177.__r_.__value_.__r.__words[2] = v168->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v1177.__r_.__value_.__l.__data_ = v169;
  v168->__r_.__value_.__l.__size_ = 0;
  v168->__r_.__value_.__r.__words[2] = 0;
  v168->__r_.__value_.__r.__words[0] = 0;
  if ((v1177.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v170 = &v1177;
  else
    v170 = (std::string *)v1177.__r_.__value_.__r.__words[0];
  if ((v1177.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v171 = HIBYTE(v1177.__r_.__value_.__r.__words[2]);
  else
    v171 = v1177.__r_.__value_.__l.__size_;
  std::string::append(&__x, (const std::string::value_type *)v170, v171);
  if (SHIBYTE(v1177.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v1177.__r_.__value_.__l.__data_);
  if (SHIBYTE(v1172.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v1172.__r_.__value_.__l.__data_);
  if (SHIBYTE(v1171.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v1171.__r_.__value_.__l.__data_);
  std::to_string(&v1171, 0x31u);
  v172 = std::string::insert(&v1171, 0, "param ", 6uLL);
  v173 = *(_OWORD *)&v172->__r_.__value_.__l.__data_;
  v1172.__r_.__value_.__r.__words[2] = v172->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v1172.__r_.__value_.__l.__data_ = v173;
  v172->__r_.__value_.__l.__size_ = 0;
  v172->__r_.__value_.__r.__words[2] = 0;
  v172->__r_.__value_.__r.__words[0] = 0;
  v174 = std::string::append(&v1172, " 0.0\n", 5uLL);
  v175 = *(_OWORD *)&v174->__r_.__value_.__l.__data_;
  v1177.__r_.__value_.__r.__words[2] = v174->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v1177.__r_.__value_.__l.__data_ = v175;
  v174->__r_.__value_.__l.__size_ = 0;
  v174->__r_.__value_.__r.__words[2] = 0;
  v174->__r_.__value_.__r.__words[0] = 0;
  if ((v1177.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v176 = &v1177;
  else
    v176 = (std::string *)v1177.__r_.__value_.__r.__words[0];
  if ((v1177.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v177 = HIBYTE(v1177.__r_.__value_.__r.__words[2]);
  else
    v177 = v1177.__r_.__value_.__l.__size_;
  std::string::append(&__x, (const std::string::value_type *)v176, v177);
  if (SHIBYTE(v1177.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v1177.__r_.__value_.__l.__data_);
  if (SHIBYTE(v1172.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v1172.__r_.__value_.__l.__data_);
  if (SHIBYTE(v1171.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v1171.__r_.__value_.__l.__data_);
  std::to_string(&v1171, 0x1Cu);
  v178 = std::string::insert(&v1171, 0, "param ", 6uLL);
  v179 = *(_OWORD *)&v178->__r_.__value_.__l.__data_;
  v1172.__r_.__value_.__r.__words[2] = v178->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v1172.__r_.__value_.__l.__data_ = v179;
  v178->__r_.__value_.__l.__size_ = 0;
  v178->__r_.__value_.__r.__words[2] = 0;
  v178->__r_.__value_.__r.__words[0] = 0;
  v180 = std::string::append(&v1172, " 0.0\n", 5uLL);
  v181 = *(_OWORD *)&v180->__r_.__value_.__l.__data_;
  v1177.__r_.__value_.__r.__words[2] = v180->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v1177.__r_.__value_.__l.__data_ = v181;
  v180->__r_.__value_.__l.__size_ = 0;
  v180->__r_.__value_.__r.__words[2] = 0;
  v180->__r_.__value_.__r.__words[0] = 0;
  if ((v1177.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v182 = &v1177;
  else
    v182 = (std::string *)v1177.__r_.__value_.__r.__words[0];
  if ((v1177.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v183 = HIBYTE(v1177.__r_.__value_.__r.__words[2]);
  else
    v183 = v1177.__r_.__value_.__l.__size_;
  std::string::append(&__x, (const std::string::value_type *)v182, v183);
  if (SHIBYTE(v1177.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v1177.__r_.__value_.__l.__data_);
  if (SHIBYTE(v1172.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v1172.__r_.__value_.__l.__data_);
  if (SHIBYTE(v1171.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v1171.__r_.__value_.__l.__data_);
  std::to_string(&v1171, 0x1Du);
  v184 = std::string::insert(&v1171, 0, "param ", 6uLL);
  v185 = *(_OWORD *)&v184->__r_.__value_.__l.__data_;
  v1172.__r_.__value_.__r.__words[2] = v184->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v1172.__r_.__value_.__l.__data_ = v185;
  v184->__r_.__value_.__l.__size_ = 0;
  v184->__r_.__value_.__r.__words[2] = 0;
  v184->__r_.__value_.__r.__words[0] = 0;
  v186 = std::string::append(&v1172, " 0.0\n", 5uLL);
  v187 = *(_OWORD *)&v186->__r_.__value_.__l.__data_;
  v1177.__r_.__value_.__r.__words[2] = v186->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v1177.__r_.__value_.__l.__data_ = v187;
  v186->__r_.__value_.__l.__size_ = 0;
  v186->__r_.__value_.__r.__words[2] = 0;
  v186->__r_.__value_.__r.__words[0] = 0;
  if ((v1177.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v188 = &v1177;
  else
    v188 = (std::string *)v1177.__r_.__value_.__r.__words[0];
  if ((v1177.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v189 = HIBYTE(v1177.__r_.__value_.__r.__words[2]);
  else
    v189 = v1177.__r_.__value_.__l.__size_;
  std::string::append(&__x, (const std::string::value_type *)v188, v189);
  if (SHIBYTE(v1177.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v1177.__r_.__value_.__l.__data_);
  if (SHIBYTE(v1172.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v1172.__r_.__value_.__l.__data_);
  if (SHIBYTE(v1171.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v1171.__r_.__value_.__l.__data_);
  std::to_string(&v1171, 0x19u);
  v190 = std::string::insert(&v1171, 0, "param ", 6uLL);
  v191 = *(_OWORD *)&v190->__r_.__value_.__l.__data_;
  v1172.__r_.__value_.__r.__words[2] = v190->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v1172.__r_.__value_.__l.__data_ = v191;
  v190->__r_.__value_.__l.__size_ = 0;
  v190->__r_.__value_.__r.__words[2] = 0;
  v190->__r_.__value_.__r.__words[0] = 0;
  v192 = std::string::append(&v1172, " 0.0\n", 5uLL);
  v193 = *(_OWORD *)&v192->__r_.__value_.__l.__data_;
  v1177.__r_.__value_.__r.__words[2] = v192->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v1177.__r_.__value_.__l.__data_ = v193;
  v192->__r_.__value_.__l.__size_ = 0;
  v192->__r_.__value_.__r.__words[2] = 0;
  v192->__r_.__value_.__r.__words[0] = 0;
  if ((v1177.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v194 = &v1177;
  else
    v194 = (std::string *)v1177.__r_.__value_.__r.__words[0];
  if ((v1177.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v195 = HIBYTE(v1177.__r_.__value_.__r.__words[2]);
  else
    v195 = v1177.__r_.__value_.__l.__size_;
  std::string::append(&__x, (const std::string::value_type *)v194, v195);
  if (SHIBYTE(v1177.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v1177.__r_.__value_.__l.__data_);
  if (SHIBYTE(v1172.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v1172.__r_.__value_.__l.__data_);
  if (SHIBYTE(v1171.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v1171.__r_.__value_.__l.__data_);
  std::to_string(&v1171, 0x18u);
  v196 = std::string::insert(&v1171, 0, "param ", 6uLL);
  v197 = *(_OWORD *)&v196->__r_.__value_.__l.__data_;
  v1172.__r_.__value_.__r.__words[2] = v196->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v1172.__r_.__value_.__l.__data_ = v197;
  v196->__r_.__value_.__l.__size_ = 0;
  v196->__r_.__value_.__r.__words[2] = 0;
  v196->__r_.__value_.__r.__words[0] = 0;
  v198 = std::string::append(&v1172, " 0.0\n", 5uLL);
  v199 = *(_OWORD *)&v198->__r_.__value_.__l.__data_;
  v1177.__r_.__value_.__r.__words[2] = v198->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v1177.__r_.__value_.__l.__data_ = v199;
  v198->__r_.__value_.__l.__size_ = 0;
  v198->__r_.__value_.__r.__words[2] = 0;
  v198->__r_.__value_.__r.__words[0] = 0;
  if ((v1177.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v200 = &v1177;
  else
    v200 = (std::string *)v1177.__r_.__value_.__r.__words[0];
  if ((v1177.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v201 = HIBYTE(v1177.__r_.__value_.__r.__words[2]);
  else
    v201 = v1177.__r_.__value_.__l.__size_;
  std::string::append(&__x, (const std::string::value_type *)v200, v201);
  if (SHIBYTE(v1177.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v1177.__r_.__value_.__l.__data_);
  if (SHIBYTE(v1172.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v1172.__r_.__value_.__l.__data_);
  if (SHIBYTE(v1171.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v1171.__r_.__value_.__l.__data_);
  std::to_string(&v1171, 0x17u);
  v202 = std::string::insert(&v1171, 0, "param ", 6uLL);
  v203 = *(_OWORD *)&v202->__r_.__value_.__l.__data_;
  v1172.__r_.__value_.__r.__words[2] = v202->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v1172.__r_.__value_.__l.__data_ = v203;
  v202->__r_.__value_.__l.__size_ = 0;
  v202->__r_.__value_.__r.__words[2] = 0;
  v202->__r_.__value_.__r.__words[0] = 0;
  v204 = std::string::append(&v1172, " 0.0\n", 5uLL);
  v205 = *(_OWORD *)&v204->__r_.__value_.__l.__data_;
  v1177.__r_.__value_.__r.__words[2] = v204->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v1177.__r_.__value_.__l.__data_ = v205;
  v204->__r_.__value_.__l.__size_ = 0;
  v204->__r_.__value_.__r.__words[2] = 0;
  v204->__r_.__value_.__r.__words[0] = 0;
  if ((v1177.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v206 = &v1177;
  else
    v206 = (std::string *)v1177.__r_.__value_.__r.__words[0];
  if ((v1177.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v207 = HIBYTE(v1177.__r_.__value_.__r.__words[2]);
  else
    v207 = v1177.__r_.__value_.__l.__size_;
  std::string::append(&__x, (const std::string::value_type *)v206, v207);
  if (SHIBYTE(v1177.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v1177.__r_.__value_.__l.__data_);
  if (SHIBYTE(v1172.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v1172.__r_.__value_.__l.__data_);
  if (SHIBYTE(v1171.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v1171.__r_.__value_.__l.__data_);
  std::to_string(&v1171, 0x16u);
  v208 = std::string::insert(&v1171, 0, "param ", 6uLL);
  v209 = *(_OWORD *)&v208->__r_.__value_.__l.__data_;
  v1172.__r_.__value_.__r.__words[2] = v208->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v1172.__r_.__value_.__l.__data_ = v209;
  v208->__r_.__value_.__l.__size_ = 0;
  v208->__r_.__value_.__r.__words[2] = 0;
  v208->__r_.__value_.__r.__words[0] = 0;
  v210 = std::string::append(&v1172, " 0.0\n", 5uLL);
  v211 = *(_OWORD *)&v210->__r_.__value_.__l.__data_;
  v1177.__r_.__value_.__r.__words[2] = v210->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v1177.__r_.__value_.__l.__data_ = v211;
  v210->__r_.__value_.__l.__size_ = 0;
  v210->__r_.__value_.__r.__words[2] = 0;
  v210->__r_.__value_.__r.__words[0] = 0;
  if ((v1177.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v212 = &v1177;
  else
    v212 = (std::string *)v1177.__r_.__value_.__r.__words[0];
  if ((v1177.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v213 = HIBYTE(v1177.__r_.__value_.__r.__words[2]);
  else
    v213 = v1177.__r_.__value_.__l.__size_;
  std::string::append(&__x, (const std::string::value_type *)v212, v213);
  if (SHIBYTE(v1177.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v1177.__r_.__value_.__l.__data_);
  if (SHIBYTE(v1172.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v1172.__r_.__value_.__l.__data_);
  if (SHIBYTE(v1171.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v1171.__r_.__value_.__l.__data_);
  std::to_string(&v1171, 0x20u);
  v214 = std::string::insert(&v1171, 0, "param ", 6uLL);
  v215 = *(_OWORD *)&v214->__r_.__value_.__l.__data_;
  v1172.__r_.__value_.__r.__words[2] = v214->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v1172.__r_.__value_.__l.__data_ = v215;
  v214->__r_.__value_.__l.__size_ = 0;
  v214->__r_.__value_.__r.__words[2] = 0;
  v214->__r_.__value_.__r.__words[0] = 0;
  v216 = std::string::append(&v1172, " 0.0 out\n", 9uLL);
  v217 = *(_OWORD *)&v216->__r_.__value_.__l.__data_;
  v1177.__r_.__value_.__r.__words[2] = v216->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v1177.__r_.__value_.__l.__data_ = v217;
  v216->__r_.__value_.__l.__size_ = 0;
  v216->__r_.__value_.__r.__words[2] = 0;
  v216->__r_.__value_.__r.__words[0] = 0;
  if ((v1177.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v218 = &v1177;
  else
    v218 = (std::string *)v1177.__r_.__value_.__r.__words[0];
  if ((v1177.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v219 = HIBYTE(v1177.__r_.__value_.__r.__words[2]);
  else
    v219 = v1177.__r_.__value_.__l.__size_;
  std::string::append(&__x, (const std::string::value_type *)v218, v219);
  if (SHIBYTE(v1177.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v1177.__r_.__value_.__l.__data_);
  if (SHIBYTE(v1172.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v1172.__r_.__value_.__l.__data_);
  if (SHIBYTE(v1171.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v1171.__r_.__value_.__l.__data_);
  std::to_string(&v1171, 0x21u);
  v220 = std::string::insert(&v1171, 0, "param ", 6uLL);
  v221 = *(_OWORD *)&v220->__r_.__value_.__l.__data_;
  v1172.__r_.__value_.__r.__words[2] = v220->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v1172.__r_.__value_.__l.__data_ = v221;
  v220->__r_.__value_.__l.__size_ = 0;
  v220->__r_.__value_.__r.__words[2] = 0;
  v220->__r_.__value_.__r.__words[0] = 0;
  v222 = std::string::append(&v1172, " 0.0\n", 5uLL);
  v223 = *(_OWORD *)&v222->__r_.__value_.__l.__data_;
  v1177.__r_.__value_.__r.__words[2] = v222->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v1177.__r_.__value_.__l.__data_ = v223;
  v222->__r_.__value_.__l.__size_ = 0;
  v222->__r_.__value_.__r.__words[2] = 0;
  v222->__r_.__value_.__r.__words[0] = 0;
  if ((v1177.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v224 = &v1177;
  else
    v224 = (std::string *)v1177.__r_.__value_.__r.__words[0];
  if ((v1177.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v225 = HIBYTE(v1177.__r_.__value_.__r.__words[2]);
  else
    v225 = v1177.__r_.__value_.__l.__size_;
  std::string::append(&__x, (const std::string::value_type *)v224, v225);
  if (SHIBYTE(v1177.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v1177.__r_.__value_.__l.__data_);
  if (SHIBYTE(v1172.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v1172.__r_.__value_.__l.__data_);
  if (SHIBYTE(v1171.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v1171.__r_.__value_.__l.__data_);
  std::to_string(&v1171, 0x22u);
  v226 = std::string::insert(&v1171, 0, "param ", 6uLL);
  v227 = *(_OWORD *)&v226->__r_.__value_.__l.__data_;
  v1172.__r_.__value_.__r.__words[2] = v226->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v1172.__r_.__value_.__l.__data_ = v227;
  v226->__r_.__value_.__l.__size_ = 0;
  v226->__r_.__value_.__r.__words[2] = 0;
  v226->__r_.__value_.__r.__words[0] = 0;
  v228 = std::string::append(&v1172, " 0.0\n", 5uLL);
  v229 = *(_OWORD *)&v228->__r_.__value_.__l.__data_;
  v1177.__r_.__value_.__r.__words[2] = v228->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v1177.__r_.__value_.__l.__data_ = v229;
  v228->__r_.__value_.__l.__size_ = 0;
  v228->__r_.__value_.__r.__words[2] = 0;
  v228->__r_.__value_.__r.__words[0] = 0;
  if ((v1177.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v230 = &v1177;
  else
    v230 = (std::string *)v1177.__r_.__value_.__r.__words[0];
  if ((v1177.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v231 = HIBYTE(v1177.__r_.__value_.__r.__words[2]);
  else
    v231 = v1177.__r_.__value_.__l.__size_;
  std::string::append(&__x, (const std::string::value_type *)v230, v231);
  if (SHIBYTE(v1177.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v1177.__r_.__value_.__l.__data_);
  if (SHIBYTE(v1172.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v1172.__r_.__value_.__l.__data_);
  if (SHIBYTE(v1171.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v1171.__r_.__value_.__l.__data_);
  std::to_string(&v1171, 0x23u);
  v232 = std::string::insert(&v1171, 0, "param ", 6uLL);
  v233 = *(_OWORD *)&v232->__r_.__value_.__l.__data_;
  v1172.__r_.__value_.__r.__words[2] = v232->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v1172.__r_.__value_.__l.__data_ = v233;
  v232->__r_.__value_.__l.__size_ = 0;
  v232->__r_.__value_.__r.__words[2] = 0;
  v232->__r_.__value_.__r.__words[0] = 0;
  v234 = std::string::append(&v1172, " 0.0\n", 5uLL);
  v235 = *(_OWORD *)&v234->__r_.__value_.__l.__data_;
  v1177.__r_.__value_.__r.__words[2] = v234->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v1177.__r_.__value_.__l.__data_ = v235;
  v234->__r_.__value_.__l.__size_ = 0;
  v234->__r_.__value_.__r.__words[2] = 0;
  v234->__r_.__value_.__r.__words[0] = 0;
  if ((v1177.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v236 = &v1177;
  else
    v236 = (std::string *)v1177.__r_.__value_.__r.__words[0];
  if ((v1177.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v237 = HIBYTE(v1177.__r_.__value_.__r.__words[2]);
  else
    v237 = v1177.__r_.__value_.__l.__size_;
  std::string::append(&__x, (const std::string::value_type *)v236, v237);
  if (SHIBYTE(v1177.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v1177.__r_.__value_.__l.__data_);
  if (SHIBYTE(v1172.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v1172.__r_.__value_.__l.__data_);
  if (SHIBYTE(v1171.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v1171.__r_.__value_.__l.__data_);
  std::to_string(&v1171, 0x24u);
  v238 = std::string::insert(&v1171, 0, "param ", 6uLL);
  v239 = *(_OWORD *)&v238->__r_.__value_.__l.__data_;
  v1172.__r_.__value_.__r.__words[2] = v238->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v1172.__r_.__value_.__l.__data_ = v239;
  v238->__r_.__value_.__l.__size_ = 0;
  v238->__r_.__value_.__r.__words[2] = 0;
  v238->__r_.__value_.__r.__words[0] = 0;
  v240 = std::string::append(&v1172, " 0.0\n", 5uLL);
  v241 = *(_OWORD *)&v240->__r_.__value_.__l.__data_;
  v1177.__r_.__value_.__r.__words[2] = v240->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v1177.__r_.__value_.__l.__data_ = v241;
  v240->__r_.__value_.__l.__size_ = 0;
  v240->__r_.__value_.__r.__words[2] = 0;
  v240->__r_.__value_.__r.__words[0] = 0;
  if ((v1177.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v242 = &v1177;
  else
    v242 = (std::string *)v1177.__r_.__value_.__r.__words[0];
  if ((v1177.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v243 = HIBYTE(v1177.__r_.__value_.__r.__words[2]);
  else
    v243 = v1177.__r_.__value_.__l.__size_;
  std::string::append(&__x, (const std::string::value_type *)v242, v243);
  if (SHIBYTE(v1177.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v1177.__r_.__value_.__l.__data_);
  if (SHIBYTE(v1172.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v1172.__r_.__value_.__l.__data_);
  if (SHIBYTE(v1171.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v1171.__r_.__value_.__l.__data_);
  std::to_string(&v1171, 0x25u);
  v244 = std::string::insert(&v1171, 0, "param ", 6uLL);
  v245 = *(_OWORD *)&v244->__r_.__value_.__l.__data_;
  v1172.__r_.__value_.__r.__words[2] = v244->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v1172.__r_.__value_.__l.__data_ = v245;
  v244->__r_.__value_.__l.__size_ = 0;
  v244->__r_.__value_.__r.__words[2] = 0;
  v244->__r_.__value_.__r.__words[0] = 0;
  v246 = std::string::append(&v1172, " 0.0\n", 5uLL);
  v247 = *(_OWORD *)&v246->__r_.__value_.__l.__data_;
  v1177.__r_.__value_.__r.__words[2] = v246->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v1177.__r_.__value_.__l.__data_ = v247;
  v246->__r_.__value_.__l.__size_ = 0;
  v246->__r_.__value_.__r.__words[2] = 0;
  v246->__r_.__value_.__r.__words[0] = 0;
  if ((v1177.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v248 = &v1177;
  else
    v248 = (std::string *)v1177.__r_.__value_.__r.__words[0];
  if ((v1177.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v249 = HIBYTE(v1177.__r_.__value_.__r.__words[2]);
  else
    v249 = v1177.__r_.__value_.__l.__size_;
  std::string::append(&__x, (const std::string::value_type *)v248, v249);
  if (SHIBYTE(v1177.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v1177.__r_.__value_.__l.__data_);
  if (SHIBYTE(v1172.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v1172.__r_.__value_.__l.__data_);
  if (SHIBYTE(v1171.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v1171.__r_.__value_.__l.__data_);
  std::to_string(&v1171, 0x26u);
  v250 = std::string::insert(&v1171, 0, "param ", 6uLL);
  v251 = *(_OWORD *)&v250->__r_.__value_.__l.__data_;
  v1172.__r_.__value_.__r.__words[2] = v250->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v1172.__r_.__value_.__l.__data_ = v251;
  v250->__r_.__value_.__l.__size_ = 0;
  v250->__r_.__value_.__r.__words[2] = 0;
  v250->__r_.__value_.__r.__words[0] = 0;
  v252 = std::string::append(&v1172, " 0.0\n", 5uLL);
  v253 = *(_OWORD *)&v252->__r_.__value_.__l.__data_;
  v1177.__r_.__value_.__r.__words[2] = v252->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v1177.__r_.__value_.__l.__data_ = v253;
  v252->__r_.__value_.__l.__size_ = 0;
  v252->__r_.__value_.__r.__words[2] = 0;
  v252->__r_.__value_.__r.__words[0] = 0;
  if ((v1177.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v254 = &v1177;
  else
    v254 = (std::string *)v1177.__r_.__value_.__r.__words[0];
  if ((v1177.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v255 = HIBYTE(v1177.__r_.__value_.__r.__words[2]);
  else
    v255 = v1177.__r_.__value_.__l.__size_;
  std::string::append(&__x, (const std::string::value_type *)v254, v255);
  if (SHIBYTE(v1177.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v1177.__r_.__value_.__l.__data_);
  if (SHIBYTE(v1172.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v1172.__r_.__value_.__l.__data_);
  if (SHIBYTE(v1171.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v1171.__r_.__value_.__l.__data_);
  std::to_string(&v1171, 0x27u);
  v256 = std::string::insert(&v1171, 0, "param ", 6uLL);
  v257 = *(_OWORD *)&v256->__r_.__value_.__l.__data_;
  v1172.__r_.__value_.__r.__words[2] = v256->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v1172.__r_.__value_.__l.__data_ = v257;
  v256->__r_.__value_.__l.__size_ = 0;
  v256->__r_.__value_.__r.__words[2] = 0;
  v256->__r_.__value_.__r.__words[0] = 0;
  v258 = std::string::append(&v1172, " 0.0\n", 5uLL);
  v259 = *(_OWORD *)&v258->__r_.__value_.__l.__data_;
  v1177.__r_.__value_.__r.__words[2] = v258->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v1177.__r_.__value_.__l.__data_ = v259;
  v258->__r_.__value_.__l.__size_ = 0;
  v258->__r_.__value_.__r.__words[2] = 0;
  v258->__r_.__value_.__r.__words[0] = 0;
  if ((v1177.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v260 = &v1177;
  else
    v260 = (std::string *)v1177.__r_.__value_.__r.__words[0];
  if ((v1177.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v261 = HIBYTE(v1177.__r_.__value_.__r.__words[2]);
  else
    v261 = v1177.__r_.__value_.__l.__size_;
  std::string::append(&__x, (const std::string::value_type *)v260, v261);
  if (SHIBYTE(v1177.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v1177.__r_.__value_.__l.__data_);
  if (SHIBYTE(v1172.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v1172.__r_.__value_.__l.__data_);
  if (SHIBYTE(v1171.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v1171.__r_.__value_.__l.__data_);
  std::to_string(&v1171, 0x28u);
  v262 = std::string::insert(&v1171, 0, "param ", 6uLL);
  v263 = *(_OWORD *)&v262->__r_.__value_.__l.__data_;
  v1172.__r_.__value_.__r.__words[2] = v262->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v1172.__r_.__value_.__l.__data_ = v263;
  v262->__r_.__value_.__l.__size_ = 0;
  v262->__r_.__value_.__r.__words[2] = 0;
  v262->__r_.__value_.__r.__words[0] = 0;
  v264 = std::string::append(&v1172, " 0.0\n", 5uLL);
  v265 = *(_OWORD *)&v264->__r_.__value_.__l.__data_;
  v1177.__r_.__value_.__r.__words[2] = v264->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v1177.__r_.__value_.__l.__data_ = v265;
  v264->__r_.__value_.__l.__size_ = 0;
  v264->__r_.__value_.__r.__words[2] = 0;
  v264->__r_.__value_.__r.__words[0] = 0;
  if ((v1177.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v266 = &v1177;
  else
    v266 = (std::string *)v1177.__r_.__value_.__r.__words[0];
  if ((v1177.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v267 = HIBYTE(v1177.__r_.__value_.__r.__words[2]);
  else
    v267 = v1177.__r_.__value_.__l.__size_;
  std::string::append(&__x, (const std::string::value_type *)v266, v267);
  if (SHIBYTE(v1177.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v1177.__r_.__value_.__l.__data_);
  if (SHIBYTE(v1172.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v1172.__r_.__value_.__l.__data_);
  if (SHIBYTE(v1171.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v1171.__r_.__value_.__l.__data_);
  std::to_string(&v1171, 0x29u);
  v268 = std::string::insert(&v1171, 0, "param ", 6uLL);
  v269 = *(_OWORD *)&v268->__r_.__value_.__l.__data_;
  v1172.__r_.__value_.__r.__words[2] = v268->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v1172.__r_.__value_.__l.__data_ = v269;
  v268->__r_.__value_.__l.__size_ = 0;
  v268->__r_.__value_.__r.__words[2] = 0;
  v268->__r_.__value_.__r.__words[0] = 0;
  v270 = std::string::append(&v1172, " 0.0\n", 5uLL);
  v271 = *(_OWORD *)&v270->__r_.__value_.__l.__data_;
  v1177.__r_.__value_.__r.__words[2] = v270->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v1177.__r_.__value_.__l.__data_ = v271;
  v270->__r_.__value_.__l.__size_ = 0;
  v270->__r_.__value_.__r.__words[2] = 0;
  v270->__r_.__value_.__r.__words[0] = 0;
  if ((v1177.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v272 = &v1177;
  else
    v272 = (std::string *)v1177.__r_.__value_.__r.__words[0];
  if ((v1177.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v273 = HIBYTE(v1177.__r_.__value_.__r.__words[2]);
  else
    v273 = v1177.__r_.__value_.__l.__size_;
  std::string::append(&__x, (const std::string::value_type *)v272, v273);
  if (SHIBYTE(v1177.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v1177.__r_.__value_.__l.__data_);
  if (SHIBYTE(v1172.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v1172.__r_.__value_.__l.__data_);
  if (SHIBYTE(v1171.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v1171.__r_.__value_.__l.__data_);
  std::to_string(&v1171, 0x2Au);
  v274 = std::string::insert(&v1171, 0, "param ", 6uLL);
  v275 = *(_OWORD *)&v274->__r_.__value_.__l.__data_;
  v1172.__r_.__value_.__r.__words[2] = v274->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v1172.__r_.__value_.__l.__data_ = v275;
  v274->__r_.__value_.__l.__size_ = 0;
  v274->__r_.__value_.__r.__words[2] = 0;
  v274->__r_.__value_.__r.__words[0] = 0;
  v276 = std::string::append(&v1172, " 0.0\n", 5uLL);
  v277 = *(_OWORD *)&v276->__r_.__value_.__l.__data_;
  v1177.__r_.__value_.__r.__words[2] = v276->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v1177.__r_.__value_.__l.__data_ = v277;
  v276->__r_.__value_.__l.__size_ = 0;
  v276->__r_.__value_.__r.__words[2] = 0;
  v276->__r_.__value_.__r.__words[0] = 0;
  if ((v1177.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v278 = &v1177;
  else
    v278 = (std::string *)v1177.__r_.__value_.__r.__words[0];
  if ((v1177.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v279 = HIBYTE(v1177.__r_.__value_.__r.__words[2]);
  else
    v279 = v1177.__r_.__value_.__l.__size_;
  std::string::append(&__x, (const std::string::value_type *)v278, v279);
  if (SHIBYTE(v1177.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v1177.__r_.__value_.__l.__data_);
  if (SHIBYTE(v1172.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v1172.__r_.__value_.__l.__data_);
  if (SHIBYTE(v1171.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v1171.__r_.__value_.__l.__data_);
  std::to_string(&v1171, 0x2Bu);
  v280 = std::string::insert(&v1171, 0, "param ", 6uLL);
  v281 = *(_OWORD *)&v280->__r_.__value_.__l.__data_;
  v1172.__r_.__value_.__r.__words[2] = v280->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v1172.__r_.__value_.__l.__data_ = v281;
  v280->__r_.__value_.__l.__size_ = 0;
  v280->__r_.__value_.__r.__words[2] = 0;
  v280->__r_.__value_.__r.__words[0] = 0;
  v282 = std::string::append(&v1172, " 0.0\n", 5uLL);
  v283 = *(_OWORD *)&v282->__r_.__value_.__l.__data_;
  v1177.__r_.__value_.__r.__words[2] = v282->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v1177.__r_.__value_.__l.__data_ = v283;
  v282->__r_.__value_.__l.__size_ = 0;
  v282->__r_.__value_.__r.__words[2] = 0;
  v282->__r_.__value_.__r.__words[0] = 0;
  if ((v1177.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v284 = &v1177;
  else
    v284 = (std::string *)v1177.__r_.__value_.__r.__words[0];
  if ((v1177.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v285 = HIBYTE(v1177.__r_.__value_.__r.__words[2]);
  else
    v285 = v1177.__r_.__value_.__l.__size_;
  std::string::append(&__x, (const std::string::value_type *)v284, v285);
  if (SHIBYTE(v1177.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v1177.__r_.__value_.__l.__data_);
  if (SHIBYTE(v1172.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v1172.__r_.__value_.__l.__data_);
  if (SHIBYTE(v1171.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v1171.__r_.__value_.__l.__data_);
  std::to_string(&v1171, 0x2Cu);
  v286 = std::string::insert(&v1171, 0, "param ", 6uLL);
  v287 = *(_OWORD *)&v286->__r_.__value_.__l.__data_;
  v1172.__r_.__value_.__r.__words[2] = v286->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v1172.__r_.__value_.__l.__data_ = v287;
  v286->__r_.__value_.__l.__size_ = 0;
  v286->__r_.__value_.__r.__words[2] = 0;
  v286->__r_.__value_.__r.__words[0] = 0;
  v288 = std::string::append(&v1172, " 0.0\n", 5uLL);
  v289 = *(_OWORD *)&v288->__r_.__value_.__l.__data_;
  v1177.__r_.__value_.__r.__words[2] = v288->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v1177.__r_.__value_.__l.__data_ = v289;
  v288->__r_.__value_.__l.__size_ = 0;
  v288->__r_.__value_.__r.__words[2] = 0;
  v288->__r_.__value_.__r.__words[0] = 0;
  if ((v1177.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v290 = &v1177;
  else
    v290 = (std::string *)v1177.__r_.__value_.__r.__words[0];
  if ((v1177.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v291 = HIBYTE(v1177.__r_.__value_.__r.__words[2]);
  else
    v291 = v1177.__r_.__value_.__l.__size_;
  std::string::append(&__x, (const std::string::value_type *)v290, v291);
  if (SHIBYTE(v1177.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v1177.__r_.__value_.__l.__data_);
  if (SHIBYTE(v1172.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v1172.__r_.__value_.__l.__data_);
  if (SHIBYTE(v1171.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v1171.__r_.__value_.__l.__data_);
  std::to_string(&v1171, 0x2Du);
  v292 = std::string::insert(&v1171, 0, "param ", 6uLL);
  v293 = *(_OWORD *)&v292->__r_.__value_.__l.__data_;
  v1172.__r_.__value_.__r.__words[2] = v292->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v1172.__r_.__value_.__l.__data_ = v293;
  v292->__r_.__value_.__l.__size_ = 0;
  v292->__r_.__value_.__r.__words[2] = 0;
  v292->__r_.__value_.__r.__words[0] = 0;
  v294 = std::string::append(&v1172, " 0.0\n", 5uLL);
  v295 = *(_OWORD *)&v294->__r_.__value_.__l.__data_;
  v1177.__r_.__value_.__r.__words[2] = v294->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v1177.__r_.__value_.__l.__data_ = v295;
  v294->__r_.__value_.__l.__size_ = 0;
  v294->__r_.__value_.__r.__words[2] = 0;
  v294->__r_.__value_.__r.__words[0] = 0;
  if ((v1177.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v296 = &v1177;
  else
    v296 = (std::string *)v1177.__r_.__value_.__r.__words[0];
  if ((v1177.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v297 = HIBYTE(v1177.__r_.__value_.__r.__words[2]);
  else
    v297 = v1177.__r_.__value_.__l.__size_;
  std::string::append(&__x, (const std::string::value_type *)v296, v297);
  if (SHIBYTE(v1177.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v1177.__r_.__value_.__l.__data_);
  if (SHIBYTE(v1172.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v1172.__r_.__value_.__l.__data_);
  if (SHIBYTE(v1171.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v1171.__r_.__value_.__l.__data_);
  std::to_string(&v1169, 0x19u);
  v298 = std::string::insert(&v1169, 0, "wireGraphParam ", 0xFuLL);
  v299 = *(_OWORD *)&v298->__r_.__value_.__l.__data_;
  v1170.__r_.__value_.__r.__words[2] = v298->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v1170.__r_.__value_.__l.__data_ = v299;
  v298->__r_.__value_.__l.__size_ = 0;
  v298->__r_.__value_.__r.__words[2] = 0;
  v298->__r_.__value_.__r.__words[0] = 0;
  v300 = std::string::append(&v1170, " (linFullSignal ", 0x10uLL);
  v301 = *(_OWORD *)&v300->__r_.__value_.__l.__data_;
  v1171.__r_.__value_.__r.__words[2] = v300->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v1171.__r_.__value_.__l.__data_ = v301;
  v300->__r_.__value_.__l.__size_ = 0;
  v300->__r_.__value_.__r.__words[2] = 0;
  v300->__r_.__value_.__r.__words[0] = 0;
  std::to_string(&v1176, 0x1Bu);
  if ((v1176.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v302 = &v1176;
  else
    v302 = (std::string *)v1176.__r_.__value_.__r.__words[0];
  if ((v1176.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v303 = HIBYTE(v1176.__r_.__value_.__r.__words[2]);
  else
    v303 = v1176.__r_.__value_.__l.__size_;
  v304 = std::string::append(&v1171, (const std::string::value_type *)v302, v303);
  v305 = *(_OWORD *)&v304->__r_.__value_.__l.__data_;
  v1172.__r_.__value_.__r.__words[2] = v304->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v1172.__r_.__value_.__l.__data_ = v305;
  v304->__r_.__value_.__l.__size_ = 0;
  v304->__r_.__value_.__r.__words[2] = 0;
  v304->__r_.__value_.__r.__words[0] = 0;
  v306 = std::string::append(&v1172, " 0 0)\n", 6uLL);
  v307 = *(_OWORD *)&v306->__r_.__value_.__l.__data_;
  v1177.__r_.__value_.__r.__words[2] = v306->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v1177.__r_.__value_.__l.__data_ = v307;
  v306->__r_.__value_.__l.__size_ = 0;
  v306->__r_.__value_.__r.__words[2] = 0;
  v306->__r_.__value_.__r.__words[0] = 0;
  if ((v1177.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v308 = &v1177;
  else
    v308 = (std::string *)v1177.__r_.__value_.__r.__words[0];
  if ((v1177.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v309 = HIBYTE(v1177.__r_.__value_.__r.__words[2]);
  else
    v309 = v1177.__r_.__value_.__l.__size_;
  std::string::append(&__x, (const std::string::value_type *)v308, v309);
  if (SHIBYTE(v1177.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v1177.__r_.__value_.__l.__data_);
  if (SHIBYTE(v1172.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v1172.__r_.__value_.__l.__data_);
  if (SHIBYTE(v1176.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v1176.__r_.__value_.__l.__data_);
  if (SHIBYTE(v1171.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v1171.__r_.__value_.__l.__data_);
  if (SHIBYTE(v1170.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v1170.__r_.__value_.__l.__data_);
  if (SHIBYTE(v1169.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v1169.__r_.__value_.__l.__data_);
  std::to_string(&v1169, 0x18u);
  v310 = std::string::insert(&v1169, 0, "wireGraphParam ", 0xFuLL);
  v311 = *(_OWORD *)&v310->__r_.__value_.__l.__data_;
  v1170.__r_.__value_.__r.__words[2] = v310->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v1170.__r_.__value_.__l.__data_ = v311;
  v310->__r_.__value_.__l.__size_ = 0;
  v310->__r_.__value_.__r.__words[2] = 0;
  v310->__r_.__value_.__r.__words[0] = 0;
  v312 = std::string::append(&v1170, " (linFullSignal ", 0x10uLL);
  v313 = *(_OWORD *)&v312->__r_.__value_.__l.__data_;
  v1171.__r_.__value_.__r.__words[2] = v312->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v1171.__r_.__value_.__l.__data_ = v313;
  v312->__r_.__value_.__l.__size_ = 0;
  v312->__r_.__value_.__r.__words[2] = 0;
  v312->__r_.__value_.__r.__words[0] = 0;
  std::to_string(&v1176, 0x1Au);
  if ((v1176.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v314 = &v1176;
  else
    v314 = (std::string *)v1176.__r_.__value_.__r.__words[0];
  if ((v1176.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v315 = HIBYTE(v1176.__r_.__value_.__r.__words[2]);
  else
    v315 = v1176.__r_.__value_.__l.__size_;
  v316 = std::string::append(&v1171, (const std::string::value_type *)v314, v315);
  v317 = *(_OWORD *)&v316->__r_.__value_.__l.__data_;
  v1172.__r_.__value_.__r.__words[2] = v316->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v1172.__r_.__value_.__l.__data_ = v317;
  v316->__r_.__value_.__l.__size_ = 0;
  v316->__r_.__value_.__r.__words[2] = 0;
  v316->__r_.__value_.__r.__words[0] = 0;
  v318 = std::string::append(&v1172, " 0 0)\n", 6uLL);
  v319 = *(_OWORD *)&v318->__r_.__value_.__l.__data_;
  v1177.__r_.__value_.__r.__words[2] = v318->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v1177.__r_.__value_.__l.__data_ = v319;
  v318->__r_.__value_.__l.__size_ = 0;
  v318->__r_.__value_.__r.__words[2] = 0;
  v318->__r_.__value_.__r.__words[0] = 0;
  if ((v1177.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v320 = &v1177;
  else
    v320 = (std::string *)v1177.__r_.__value_.__r.__words[0];
  if ((v1177.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v321 = HIBYTE(v1177.__r_.__value_.__r.__words[2]);
  else
    v321 = v1177.__r_.__value_.__l.__size_;
  std::string::append(&__x, (const std::string::value_type *)v320, v321);
  if (SHIBYTE(v1177.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v1177.__r_.__value_.__l.__data_);
  if (SHIBYTE(v1172.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v1172.__r_.__value_.__l.__data_);
  if (SHIBYTE(v1176.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v1176.__r_.__value_.__l.__data_);
  if (SHIBYTE(v1171.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v1171.__r_.__value_.__l.__data_);
  if (SHIBYTE(v1170.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v1170.__r_.__value_.__l.__data_);
  if (SHIBYTE(v1169.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v1169.__r_.__value_.__l.__data_);
  std::to_string(&v1169, 0x17u);
  v322 = std::string::insert(&v1169, 0, "wireGraphParam ", 0xFuLL);
  v323 = *(_OWORD *)&v322->__r_.__value_.__l.__data_;
  v1170.__r_.__value_.__r.__words[2] = v322->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v1170.__r_.__value_.__l.__data_ = v323;
  v322->__r_.__value_.__l.__size_ = 0;
  v322->__r_.__value_.__r.__words[2] = 0;
  v322->__r_.__value_.__r.__words[0] = 0;
  v324 = std::string::append(&v1170, " (linFullSignal ", 0x10uLL);
  v325 = *(_OWORD *)&v324->__r_.__value_.__l.__data_;
  v1171.__r_.__value_.__r.__words[2] = v324->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v1171.__r_.__value_.__l.__data_ = v325;
  v324->__r_.__value_.__l.__size_ = 0;
  v324->__r_.__value_.__r.__words[2] = 0;
  v324->__r_.__value_.__r.__words[0] = 0;
  std::to_string(&v1176, 0x19u);
  if ((v1176.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v326 = &v1176;
  else
    v326 = (std::string *)v1176.__r_.__value_.__r.__words[0];
  if ((v1176.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v327 = HIBYTE(v1176.__r_.__value_.__r.__words[2]);
  else
    v327 = v1176.__r_.__value_.__l.__size_;
  v328 = std::string::append(&v1171, (const std::string::value_type *)v326, v327);
  v329 = *(_OWORD *)&v328->__r_.__value_.__l.__data_;
  v1172.__r_.__value_.__r.__words[2] = v328->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v1172.__r_.__value_.__l.__data_ = v329;
  v328->__r_.__value_.__l.__size_ = 0;
  v328->__r_.__value_.__r.__words[2] = 0;
  v328->__r_.__value_.__r.__words[0] = 0;
  v330 = std::string::append(&v1172, " 0 0)\n", 6uLL);
  v331 = *(_OWORD *)&v330->__r_.__value_.__l.__data_;
  v1177.__r_.__value_.__r.__words[2] = v330->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v1177.__r_.__value_.__l.__data_ = v331;
  v330->__r_.__value_.__l.__size_ = 0;
  v330->__r_.__value_.__r.__words[2] = 0;
  v330->__r_.__value_.__r.__words[0] = 0;
  if ((v1177.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v332 = &v1177;
  else
    v332 = (std::string *)v1177.__r_.__value_.__r.__words[0];
  if ((v1177.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v333 = HIBYTE(v1177.__r_.__value_.__r.__words[2]);
  else
    v333 = v1177.__r_.__value_.__l.__size_;
  std::string::append(&__x, (const std::string::value_type *)v332, v333);
  if (SHIBYTE(v1177.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v1177.__r_.__value_.__l.__data_);
  if (SHIBYTE(v1172.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v1172.__r_.__value_.__l.__data_);
  if (SHIBYTE(v1176.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v1176.__r_.__value_.__l.__data_);
  if (SHIBYTE(v1171.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v1171.__r_.__value_.__l.__data_);
  if (SHIBYTE(v1170.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v1170.__r_.__value_.__l.__data_);
  if (SHIBYTE(v1169.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v1169.__r_.__value_.__l.__data_);
  std::to_string(&v1169, 0x16u);
  v334 = std::string::insert(&v1169, 0, "wireGraphParam ", 0xFuLL);
  v335 = *(_OWORD *)&v334->__r_.__value_.__l.__data_;
  v1170.__r_.__value_.__r.__words[2] = v334->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v1170.__r_.__value_.__l.__data_ = v335;
  v334->__r_.__value_.__l.__size_ = 0;
  v334->__r_.__value_.__r.__words[2] = 0;
  v334->__r_.__value_.__r.__words[0] = 0;
  v336 = std::string::append(&v1170, " (linFullSignal ", 0x10uLL);
  v337 = *(_OWORD *)&v336->__r_.__value_.__l.__data_;
  v1171.__r_.__value_.__r.__words[2] = v336->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v1171.__r_.__value_.__l.__data_ = v337;
  v336->__r_.__value_.__l.__size_ = 0;
  v336->__r_.__value_.__r.__words[2] = 0;
  v336->__r_.__value_.__r.__words[0] = 0;
  std::to_string(&v1176, 0x17u);
  if ((v1176.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v338 = &v1176;
  else
    v338 = (std::string *)v1176.__r_.__value_.__r.__words[0];
  if ((v1176.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v339 = HIBYTE(v1176.__r_.__value_.__r.__words[2]);
  else
    v339 = v1176.__r_.__value_.__l.__size_;
  v340 = std::string::append(&v1171, (const std::string::value_type *)v338, v339);
  v341 = *(_OWORD *)&v340->__r_.__value_.__l.__data_;
  v1172.__r_.__value_.__r.__words[2] = v340->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v1172.__r_.__value_.__l.__data_ = v341;
  v340->__r_.__value_.__l.__size_ = 0;
  v340->__r_.__value_.__r.__words[2] = 0;
  v340->__r_.__value_.__r.__words[0] = 0;
  v342 = std::string::append(&v1172, " 0 0)\n", 6uLL);
  v343 = *(_OWORD *)&v342->__r_.__value_.__l.__data_;
  v1177.__r_.__value_.__r.__words[2] = v342->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v1177.__r_.__value_.__l.__data_ = v343;
  v342->__r_.__value_.__l.__size_ = 0;
  v342->__r_.__value_.__r.__words[2] = 0;
  v342->__r_.__value_.__r.__words[0] = 0;
  if ((v1177.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v344 = &v1177;
  else
    v344 = (std::string *)v1177.__r_.__value_.__r.__words[0];
  if ((v1177.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v345 = HIBYTE(v1177.__r_.__value_.__r.__words[2]);
  else
    v345 = v1177.__r_.__value_.__l.__size_;
  std::string::append(&__x, (const std::string::value_type *)v344, v345);
  if (SHIBYTE(v1177.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v1177.__r_.__value_.__l.__data_);
  if (SHIBYTE(v1172.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v1172.__r_.__value_.__l.__data_);
  if (SHIBYTE(v1176.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v1176.__r_.__value_.__l.__data_);
  if (SHIBYTE(v1171.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v1171.__r_.__value_.__l.__data_);
  if (SHIBYTE(v1170.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v1170.__r_.__value_.__l.__data_);
  if (SHIBYTE(v1169.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v1169.__r_.__value_.__l.__data_);
  std::to_string(&v1169, 0x20u);
  v346 = std::string::insert(&v1169, 0, "wireGraphParam ", 0xFuLL);
  v347 = *(_OWORD *)&v346->__r_.__value_.__l.__data_;
  v1170.__r_.__value_.__r.__words[2] = v346->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v1170.__r_.__value_.__l.__data_ = v347;
  v346->__r_.__value_.__l.__size_ = 0;
  v346->__r_.__value_.__r.__words[2] = 0;
  v346->__r_.__value_.__r.__words[0] = 0;
  v348 = std::string::append(&v1170, " (linFullSignal ", 0x10uLL);
  v349 = *(_OWORD *)&v348->__r_.__value_.__l.__data_;
  v1171.__r_.__value_.__r.__words[2] = v348->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v1171.__r_.__value_.__l.__data_ = v349;
  v348->__r_.__value_.__l.__size_ = 0;
  v348->__r_.__value_.__r.__words[2] = 0;
  v348->__r_.__value_.__r.__words[0] = 0;
  std::to_string(&v1176, 0x1Cu);
  if ((v1176.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v350 = &v1176;
  else
    v350 = (std::string *)v1176.__r_.__value_.__r.__words[0];
  if ((v1176.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v351 = HIBYTE(v1176.__r_.__value_.__r.__words[2]);
  else
    v351 = v1176.__r_.__value_.__l.__size_;
  v352 = std::string::append(&v1171, (const std::string::value_type *)v350, v351);
  v353 = *(_OWORD *)&v352->__r_.__value_.__l.__data_;
  v1172.__r_.__value_.__r.__words[2] = v352->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v1172.__r_.__value_.__l.__data_ = v353;
  v352->__r_.__value_.__l.__size_ = 0;
  v352->__r_.__value_.__r.__words[2] = 0;
  v352->__r_.__value_.__r.__words[0] = 0;
  v354 = std::string::append(&v1172, " 0 0)\n", 6uLL);
  v355 = *(_OWORD *)&v354->__r_.__value_.__l.__data_;
  v1177.__r_.__value_.__r.__words[2] = v354->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v1177.__r_.__value_.__l.__data_ = v355;
  v354->__r_.__value_.__l.__size_ = 0;
  v354->__r_.__value_.__r.__words[2] = 0;
  v354->__r_.__value_.__r.__words[0] = 0;
  if ((v1177.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v356 = &v1177;
  else
    v356 = (std::string *)v1177.__r_.__value_.__r.__words[0];
  if ((v1177.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v357 = HIBYTE(v1177.__r_.__value_.__r.__words[2]);
  else
    v357 = v1177.__r_.__value_.__l.__size_;
  std::string::append(&__x, (const std::string::value_type *)v356, v357);
  if (SHIBYTE(v1177.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v1177.__r_.__value_.__l.__data_);
  if (SHIBYTE(v1172.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v1172.__r_.__value_.__l.__data_);
  if (SHIBYTE(v1176.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v1176.__r_.__value_.__l.__data_);
  if (SHIBYTE(v1171.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v1171.__r_.__value_.__l.__data_);
  if (SHIBYTE(v1170.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v1170.__r_.__value_.__l.__data_);
  if (SHIBYTE(v1169.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v1169.__r_.__value_.__l.__data_);
  std::to_string(&v1169, 0x21u);
  v358 = std::string::insert(&v1169, 0, "wireGraphParam ", 0xFuLL);
  v359 = *(_OWORD *)&v358->__r_.__value_.__l.__data_;
  v1170.__r_.__value_.__r.__words[2] = v358->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v1170.__r_.__value_.__l.__data_ = v359;
  v358->__r_.__value_.__l.__size_ = 0;
  v358->__r_.__value_.__r.__words[2] = 0;
  v358->__r_.__value_.__r.__words[0] = 0;
  v360 = std::string::append(&v1170, " (linFullSignal ", 0x10uLL);
  v361 = *(_OWORD *)&v360->__r_.__value_.__l.__data_;
  v1171.__r_.__value_.__r.__words[2] = v360->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v1171.__r_.__value_.__l.__data_ = v361;
  v360->__r_.__value_.__l.__size_ = 0;
  v360->__r_.__value_.__r.__words[2] = 0;
  v360->__r_.__value_.__r.__words[0] = 0;
  std::to_string(&v1176, 0x1Du);
  if ((v1176.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v362 = &v1176;
  else
    v362 = (std::string *)v1176.__r_.__value_.__r.__words[0];
  if ((v1176.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v363 = HIBYTE(v1176.__r_.__value_.__r.__words[2]);
  else
    v363 = v1176.__r_.__value_.__l.__size_;
  v364 = std::string::append(&v1171, (const std::string::value_type *)v362, v363);
  v365 = *(_OWORD *)&v364->__r_.__value_.__l.__data_;
  v1172.__r_.__value_.__r.__words[2] = v364->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v1172.__r_.__value_.__l.__data_ = v365;
  v364->__r_.__value_.__l.__size_ = 0;
  v364->__r_.__value_.__r.__words[2] = 0;
  v364->__r_.__value_.__r.__words[0] = 0;
  v366 = std::string::append(&v1172, " 0 0)\n", 6uLL);
  v367 = *(_OWORD *)&v366->__r_.__value_.__l.__data_;
  v1177.__r_.__value_.__r.__words[2] = v366->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v1177.__r_.__value_.__l.__data_ = v367;
  v366->__r_.__value_.__l.__size_ = 0;
  v366->__r_.__value_.__r.__words[2] = 0;
  v366->__r_.__value_.__r.__words[0] = 0;
  if ((v1177.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v368 = &v1177;
  else
    v368 = (std::string *)v1177.__r_.__value_.__r.__words[0];
  if ((v1177.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v369 = HIBYTE(v1177.__r_.__value_.__r.__words[2]);
  else
    v369 = v1177.__r_.__value_.__l.__size_;
  std::string::append(&__x, (const std::string::value_type *)v368, v369);
  if (SHIBYTE(v1177.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v1177.__r_.__value_.__l.__data_);
  if (SHIBYTE(v1172.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v1172.__r_.__value_.__l.__data_);
  if (SHIBYTE(v1176.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v1176.__r_.__value_.__l.__data_);
  if (SHIBYTE(v1171.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v1171.__r_.__value_.__l.__data_);
  if (SHIBYTE(v1170.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v1170.__r_.__value_.__l.__data_);
  if (SHIBYTE(v1169.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v1169.__r_.__value_.__l.__data_);
  std::to_string(&v1169, 0x22u);
  v370 = std::string::insert(&v1169, 0, "wireGraphParam ", 0xFuLL);
  v371 = *(_OWORD *)&v370->__r_.__value_.__l.__data_;
  v1170.__r_.__value_.__r.__words[2] = v370->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v1170.__r_.__value_.__l.__data_ = v371;
  v370->__r_.__value_.__l.__size_ = 0;
  v370->__r_.__value_.__r.__words[2] = 0;
  v370->__r_.__value_.__r.__words[0] = 0;
  v372 = std::string::append(&v1170, " (linFullSignal ", 0x10uLL);
  v373 = *(_OWORD *)&v372->__r_.__value_.__l.__data_;
  v1171.__r_.__value_.__r.__words[2] = v372->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v1171.__r_.__value_.__l.__data_ = v373;
  v372->__r_.__value_.__l.__size_ = 0;
  v372->__r_.__value_.__r.__words[2] = 0;
  v372->__r_.__value_.__r.__words[0] = 0;
  std::to_string(&v1176, 0x1Eu);
  if ((v1176.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v374 = &v1176;
  else
    v374 = (std::string *)v1176.__r_.__value_.__r.__words[0];
  if ((v1176.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v375 = HIBYTE(v1176.__r_.__value_.__r.__words[2]);
  else
    v375 = v1176.__r_.__value_.__l.__size_;
  v376 = std::string::append(&v1171, (const std::string::value_type *)v374, v375);
  v377 = *(_OWORD *)&v376->__r_.__value_.__l.__data_;
  v1172.__r_.__value_.__r.__words[2] = v376->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v1172.__r_.__value_.__l.__data_ = v377;
  v376->__r_.__value_.__l.__size_ = 0;
  v376->__r_.__value_.__r.__words[2] = 0;
  v376->__r_.__value_.__r.__words[0] = 0;
  v378 = std::string::append(&v1172, " 0 0)\n", 6uLL);
  v379 = *(_OWORD *)&v378->__r_.__value_.__l.__data_;
  v1177.__r_.__value_.__r.__words[2] = v378->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v1177.__r_.__value_.__l.__data_ = v379;
  v378->__r_.__value_.__l.__size_ = 0;
  v378->__r_.__value_.__r.__words[2] = 0;
  v378->__r_.__value_.__r.__words[0] = 0;
  if ((v1177.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v380 = &v1177;
  else
    v380 = (std::string *)v1177.__r_.__value_.__r.__words[0];
  if ((v1177.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v381 = HIBYTE(v1177.__r_.__value_.__r.__words[2]);
  else
    v381 = v1177.__r_.__value_.__l.__size_;
  std::string::append(&__x, (const std::string::value_type *)v380, v381);
  if (SHIBYTE(v1177.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v1177.__r_.__value_.__l.__data_);
  if (SHIBYTE(v1172.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v1172.__r_.__value_.__l.__data_);
  if (SHIBYTE(v1176.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v1176.__r_.__value_.__l.__data_);
  if (SHIBYTE(v1171.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v1171.__r_.__value_.__l.__data_);
  if (SHIBYTE(v1170.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v1170.__r_.__value_.__l.__data_);
  if (SHIBYTE(v1169.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v1169.__r_.__value_.__l.__data_);
  std::to_string(&v1169, 0x23u);
  v382 = std::string::insert(&v1169, 0, "wireGraphParam ", 0xFuLL);
  v383 = *(_OWORD *)&v382->__r_.__value_.__l.__data_;
  v1170.__r_.__value_.__r.__words[2] = v382->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v1170.__r_.__value_.__l.__data_ = v383;
  v382->__r_.__value_.__l.__size_ = 0;
  v382->__r_.__value_.__r.__words[2] = 0;
  v382->__r_.__value_.__r.__words[0] = 0;
  v384 = std::string::append(&v1170, " (linFullSignal ", 0x10uLL);
  v385 = *(_OWORD *)&v384->__r_.__value_.__l.__data_;
  v1171.__r_.__value_.__r.__words[2] = v384->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v1171.__r_.__value_.__l.__data_ = v385;
  v384->__r_.__value_.__l.__size_ = 0;
  v384->__r_.__value_.__r.__words[2] = 0;
  v384->__r_.__value_.__r.__words[0] = 0;
  std::to_string(&v1176, 0x1Fu);
  if ((v1176.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v386 = &v1176;
  else
    v386 = (std::string *)v1176.__r_.__value_.__r.__words[0];
  if ((v1176.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v387 = HIBYTE(v1176.__r_.__value_.__r.__words[2]);
  else
    v387 = v1176.__r_.__value_.__l.__size_;
  v388 = std::string::append(&v1171, (const std::string::value_type *)v386, v387);
  v389 = *(_OWORD *)&v388->__r_.__value_.__l.__data_;
  v1172.__r_.__value_.__r.__words[2] = v388->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v1172.__r_.__value_.__l.__data_ = v389;
  v388->__r_.__value_.__l.__size_ = 0;
  v388->__r_.__value_.__r.__words[2] = 0;
  v388->__r_.__value_.__r.__words[0] = 0;
  v390 = std::string::append(&v1172, " 0 0)\n", 6uLL);
  v391 = *(_OWORD *)&v390->__r_.__value_.__l.__data_;
  v1177.__r_.__value_.__r.__words[2] = v390->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v1177.__r_.__value_.__l.__data_ = v391;
  v390->__r_.__value_.__l.__size_ = 0;
  v390->__r_.__value_.__r.__words[2] = 0;
  v390->__r_.__value_.__r.__words[0] = 0;
  if ((v1177.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v392 = &v1177;
  else
    v392 = (std::string *)v1177.__r_.__value_.__r.__words[0];
  if ((v1177.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v393 = HIBYTE(v1177.__r_.__value_.__r.__words[2]);
  else
    v393 = v1177.__r_.__value_.__l.__size_;
  std::string::append(&__x, (const std::string::value_type *)v392, v393);
  if (SHIBYTE(v1177.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v1177.__r_.__value_.__l.__data_);
  if (SHIBYTE(v1172.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v1172.__r_.__value_.__l.__data_);
  if (SHIBYTE(v1176.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v1176.__r_.__value_.__l.__data_);
  if (SHIBYTE(v1171.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v1171.__r_.__value_.__l.__data_);
  if (SHIBYTE(v1170.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v1170.__r_.__value_.__l.__data_);
  if (SHIBYTE(v1169.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v1169.__r_.__value_.__l.__data_);
  std::to_string(&v1169, 0x24u);
  v394 = std::string::insert(&v1169, 0, "wireGraphParam ", 0xFuLL);
  v395 = *(_OWORD *)&v394->__r_.__value_.__l.__data_;
  v1170.__r_.__value_.__r.__words[2] = v394->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v1170.__r_.__value_.__l.__data_ = v395;
  v394->__r_.__value_.__l.__size_ = 0;
  v394->__r_.__value_.__r.__words[2] = 0;
  v394->__r_.__value_.__r.__words[0] = 0;
  v396 = std::string::append(&v1170, " (linFullSignal ", 0x10uLL);
  v397 = *(_OWORD *)&v396->__r_.__value_.__l.__data_;
  v1171.__r_.__value_.__r.__words[2] = v396->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v1171.__r_.__value_.__l.__data_ = v397;
  v396->__r_.__value_.__l.__size_ = 0;
  v396->__r_.__value_.__r.__words[2] = 0;
  v396->__r_.__value_.__r.__words[0] = 0;
  std::to_string(&v1176, 0x20u);
  if ((v1176.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v398 = &v1176;
  else
    v398 = (std::string *)v1176.__r_.__value_.__r.__words[0];
  if ((v1176.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v399 = HIBYTE(v1176.__r_.__value_.__r.__words[2]);
  else
    v399 = v1176.__r_.__value_.__l.__size_;
  v400 = std::string::append(&v1171, (const std::string::value_type *)v398, v399);
  v401 = *(_OWORD *)&v400->__r_.__value_.__l.__data_;
  v1172.__r_.__value_.__r.__words[2] = v400->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v1172.__r_.__value_.__l.__data_ = v401;
  v400->__r_.__value_.__l.__size_ = 0;
  v400->__r_.__value_.__r.__words[2] = 0;
  v400->__r_.__value_.__r.__words[0] = 0;
  v402 = std::string::append(&v1172, " 0 0)\n", 6uLL);
  v403 = *(_OWORD *)&v402->__r_.__value_.__l.__data_;
  v1177.__r_.__value_.__r.__words[2] = v402->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v1177.__r_.__value_.__l.__data_ = v403;
  v402->__r_.__value_.__l.__size_ = 0;
  v402->__r_.__value_.__r.__words[2] = 0;
  v402->__r_.__value_.__r.__words[0] = 0;
  if ((v1177.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v404 = &v1177;
  else
    v404 = (std::string *)v1177.__r_.__value_.__r.__words[0];
  if ((v1177.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v405 = HIBYTE(v1177.__r_.__value_.__r.__words[2]);
  else
    v405 = v1177.__r_.__value_.__l.__size_;
  std::string::append(&__x, (const std::string::value_type *)v404, v405);
  if (SHIBYTE(v1177.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v1177.__r_.__value_.__l.__data_);
  if (SHIBYTE(v1172.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v1172.__r_.__value_.__l.__data_);
  if (SHIBYTE(v1176.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v1176.__r_.__value_.__l.__data_);
  if (SHIBYTE(v1171.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v1171.__r_.__value_.__l.__data_);
  if (SHIBYTE(v1170.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v1170.__r_.__value_.__l.__data_);
  if (SHIBYTE(v1169.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v1169.__r_.__value_.__l.__data_);
  std::to_string(&v1169, 0x25u);
  v406 = std::string::insert(&v1169, 0, "wireGraphParam ", 0xFuLL);
  v407 = *(_OWORD *)&v406->__r_.__value_.__l.__data_;
  v1170.__r_.__value_.__r.__words[2] = v406->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v1170.__r_.__value_.__l.__data_ = v407;
  v406->__r_.__value_.__l.__size_ = 0;
  v406->__r_.__value_.__r.__words[2] = 0;
  v406->__r_.__value_.__r.__words[0] = 0;
  v408 = std::string::append(&v1170, " (linFullSignal ", 0x10uLL);
  v409 = *(_OWORD *)&v408->__r_.__value_.__l.__data_;
  v1171.__r_.__value_.__r.__words[2] = v408->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v1171.__r_.__value_.__l.__data_ = v409;
  v408->__r_.__value_.__l.__size_ = 0;
  v408->__r_.__value_.__r.__words[2] = 0;
  v408->__r_.__value_.__r.__words[0] = 0;
  std::to_string(&v1176, 0x21u);
  if ((v1176.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v410 = &v1176;
  else
    v410 = (std::string *)v1176.__r_.__value_.__r.__words[0];
  if ((v1176.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v411 = HIBYTE(v1176.__r_.__value_.__r.__words[2]);
  else
    v411 = v1176.__r_.__value_.__l.__size_;
  v412 = std::string::append(&v1171, (const std::string::value_type *)v410, v411);
  v413 = *(_OWORD *)&v412->__r_.__value_.__l.__data_;
  v1172.__r_.__value_.__r.__words[2] = v412->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v1172.__r_.__value_.__l.__data_ = v413;
  v412->__r_.__value_.__l.__size_ = 0;
  v412->__r_.__value_.__r.__words[2] = 0;
  v412->__r_.__value_.__r.__words[0] = 0;
  v414 = std::string::append(&v1172, " 0 0)\n", 6uLL);
  v415 = *(_OWORD *)&v414->__r_.__value_.__l.__data_;
  v1177.__r_.__value_.__r.__words[2] = v414->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v1177.__r_.__value_.__l.__data_ = v415;
  v414->__r_.__value_.__l.__size_ = 0;
  v414->__r_.__value_.__r.__words[2] = 0;
  v414->__r_.__value_.__r.__words[0] = 0;
  if ((v1177.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v416 = &v1177;
  else
    v416 = (std::string *)v1177.__r_.__value_.__r.__words[0];
  if ((v1177.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v417 = HIBYTE(v1177.__r_.__value_.__r.__words[2]);
  else
    v417 = v1177.__r_.__value_.__l.__size_;
  std::string::append(&__x, (const std::string::value_type *)v416, v417);
  if (SHIBYTE(v1177.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v1177.__r_.__value_.__l.__data_);
  if (SHIBYTE(v1172.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v1172.__r_.__value_.__l.__data_);
  if (SHIBYTE(v1176.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v1176.__r_.__value_.__l.__data_);
  if (SHIBYTE(v1171.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v1171.__r_.__value_.__l.__data_);
  if (SHIBYTE(v1170.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v1170.__r_.__value_.__l.__data_);
  if (SHIBYTE(v1169.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v1169.__r_.__value_.__l.__data_);
  std::to_string(&v1169, 0x26u);
  v418 = std::string::insert(&v1169, 0, "wireGraphParam ", 0xFuLL);
  v419 = *(_OWORD *)&v418->__r_.__value_.__l.__data_;
  v1170.__r_.__value_.__r.__words[2] = v418->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v1170.__r_.__value_.__l.__data_ = v419;
  v418->__r_.__value_.__l.__size_ = 0;
  v418->__r_.__value_.__r.__words[2] = 0;
  v418->__r_.__value_.__r.__words[0] = 0;
  v420 = std::string::append(&v1170, " (linFullSignal ", 0x10uLL);
  v421 = *(_OWORD *)&v420->__r_.__value_.__l.__data_;
  v1171.__r_.__value_.__r.__words[2] = v420->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v1171.__r_.__value_.__l.__data_ = v421;
  v420->__r_.__value_.__l.__size_ = 0;
  v420->__r_.__value_.__r.__words[2] = 0;
  v420->__r_.__value_.__r.__words[0] = 0;
  std::to_string(&v1176, 0x22u);
  if ((v1176.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v422 = &v1176;
  else
    v422 = (std::string *)v1176.__r_.__value_.__r.__words[0];
  if ((v1176.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v423 = HIBYTE(v1176.__r_.__value_.__r.__words[2]);
  else
    v423 = v1176.__r_.__value_.__l.__size_;
  v424 = std::string::append(&v1171, (const std::string::value_type *)v422, v423);
  v425 = *(_OWORD *)&v424->__r_.__value_.__l.__data_;
  v1172.__r_.__value_.__r.__words[2] = v424->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v1172.__r_.__value_.__l.__data_ = v425;
  v424->__r_.__value_.__l.__size_ = 0;
  v424->__r_.__value_.__r.__words[2] = 0;
  v424->__r_.__value_.__r.__words[0] = 0;
  v426 = std::string::append(&v1172, " 0 0)\n", 6uLL);
  v427 = *(_OWORD *)&v426->__r_.__value_.__l.__data_;
  v1177.__r_.__value_.__r.__words[2] = v426->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v1177.__r_.__value_.__l.__data_ = v427;
  v426->__r_.__value_.__l.__size_ = 0;
  v426->__r_.__value_.__r.__words[2] = 0;
  v426->__r_.__value_.__r.__words[0] = 0;
  if ((v1177.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v428 = &v1177;
  else
    v428 = (std::string *)v1177.__r_.__value_.__r.__words[0];
  if ((v1177.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v429 = HIBYTE(v1177.__r_.__value_.__r.__words[2]);
  else
    v429 = v1177.__r_.__value_.__l.__size_;
  std::string::append(&__x, (const std::string::value_type *)v428, v429);
  if (SHIBYTE(v1177.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v1177.__r_.__value_.__l.__data_);
  if (SHIBYTE(v1172.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v1172.__r_.__value_.__l.__data_);
  if (SHIBYTE(v1176.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v1176.__r_.__value_.__l.__data_);
  if (SHIBYTE(v1171.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v1171.__r_.__value_.__l.__data_);
  if (SHIBYTE(v1170.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v1170.__r_.__value_.__l.__data_);
  if (SHIBYTE(v1169.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v1169.__r_.__value_.__l.__data_);
  std::to_string(&v1169, 0x27u);
  v430 = std::string::insert(&v1169, 0, "wireGraphParam ", 0xFuLL);
  v431 = *(_OWORD *)&v430->__r_.__value_.__l.__data_;
  v1170.__r_.__value_.__r.__words[2] = v430->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v1170.__r_.__value_.__l.__data_ = v431;
  v430->__r_.__value_.__l.__size_ = 0;
  v430->__r_.__value_.__r.__words[2] = 0;
  v430->__r_.__value_.__r.__words[0] = 0;
  v432 = std::string::append(&v1170, " (linFullSignal ", 0x10uLL);
  v433 = *(_OWORD *)&v432->__r_.__value_.__l.__data_;
  v1171.__r_.__value_.__r.__words[2] = v432->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v1171.__r_.__value_.__l.__data_ = v433;
  v432->__r_.__value_.__l.__size_ = 0;
  v432->__r_.__value_.__r.__words[2] = 0;
  v432->__r_.__value_.__r.__words[0] = 0;
  std::to_string(&v1176, 0x23u);
  if ((v1176.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v434 = &v1176;
  else
    v434 = (std::string *)v1176.__r_.__value_.__r.__words[0];
  if ((v1176.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v435 = HIBYTE(v1176.__r_.__value_.__r.__words[2]);
  else
    v435 = v1176.__r_.__value_.__l.__size_;
  v436 = std::string::append(&v1171, (const std::string::value_type *)v434, v435);
  v437 = *(_OWORD *)&v436->__r_.__value_.__l.__data_;
  v1172.__r_.__value_.__r.__words[2] = v436->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v1172.__r_.__value_.__l.__data_ = v437;
  v436->__r_.__value_.__l.__size_ = 0;
  v436->__r_.__value_.__r.__words[2] = 0;
  v436->__r_.__value_.__r.__words[0] = 0;
  v438 = std::string::append(&v1172, " 0 0)\n", 6uLL);
  v439 = *(_OWORD *)&v438->__r_.__value_.__l.__data_;
  v1177.__r_.__value_.__r.__words[2] = v438->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v1177.__r_.__value_.__l.__data_ = v439;
  v438->__r_.__value_.__l.__size_ = 0;
  v438->__r_.__value_.__r.__words[2] = 0;
  v438->__r_.__value_.__r.__words[0] = 0;
  if ((v1177.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v440 = &v1177;
  else
    v440 = (std::string *)v1177.__r_.__value_.__r.__words[0];
  if ((v1177.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v441 = HIBYTE(v1177.__r_.__value_.__r.__words[2]);
  else
    v441 = v1177.__r_.__value_.__l.__size_;
  std::string::append(&__x, (const std::string::value_type *)v440, v441);
  if (SHIBYTE(v1177.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v1177.__r_.__value_.__l.__data_);
  if (SHIBYTE(v1172.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v1172.__r_.__value_.__l.__data_);
  if (SHIBYTE(v1176.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v1176.__r_.__value_.__l.__data_);
  if (SHIBYTE(v1171.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v1171.__r_.__value_.__l.__data_);
  if (SHIBYTE(v1170.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v1170.__r_.__value_.__l.__data_);
  if (SHIBYTE(v1169.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v1169.__r_.__value_.__l.__data_);
  std::to_string(&v1169, 0x28u);
  v442 = std::string::insert(&v1169, 0, "wireGraphParam ", 0xFuLL);
  v443 = *(_OWORD *)&v442->__r_.__value_.__l.__data_;
  v1170.__r_.__value_.__r.__words[2] = v442->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v1170.__r_.__value_.__l.__data_ = v443;
  v442->__r_.__value_.__l.__size_ = 0;
  v442->__r_.__value_.__r.__words[2] = 0;
  v442->__r_.__value_.__r.__words[0] = 0;
  v444 = std::string::append(&v1170, " (linFullSignal ", 0x10uLL);
  v445 = *(_OWORD *)&v444->__r_.__value_.__l.__data_;
  v1171.__r_.__value_.__r.__words[2] = v444->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v1171.__r_.__value_.__l.__data_ = v445;
  v444->__r_.__value_.__l.__size_ = 0;
  v444->__r_.__value_.__r.__words[2] = 0;
  v444->__r_.__value_.__r.__words[0] = 0;
  std::to_string(&v1176, 0x24u);
  if ((v1176.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v446 = &v1176;
  else
    v446 = (std::string *)v1176.__r_.__value_.__r.__words[0];
  if ((v1176.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v447 = HIBYTE(v1176.__r_.__value_.__r.__words[2]);
  else
    v447 = v1176.__r_.__value_.__l.__size_;
  v448 = std::string::append(&v1171, (const std::string::value_type *)v446, v447);
  v449 = *(_OWORD *)&v448->__r_.__value_.__l.__data_;
  v1172.__r_.__value_.__r.__words[2] = v448->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v1172.__r_.__value_.__l.__data_ = v449;
  v448->__r_.__value_.__l.__size_ = 0;
  v448->__r_.__value_.__r.__words[2] = 0;
  v448->__r_.__value_.__r.__words[0] = 0;
  v450 = std::string::append(&v1172, " 0 0)\n", 6uLL);
  v451 = *(_OWORD *)&v450->__r_.__value_.__l.__data_;
  v1177.__r_.__value_.__r.__words[2] = v450->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v1177.__r_.__value_.__l.__data_ = v451;
  v450->__r_.__value_.__l.__size_ = 0;
  v450->__r_.__value_.__r.__words[2] = 0;
  v450->__r_.__value_.__r.__words[0] = 0;
  if ((v1177.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v452 = &v1177;
  else
    v452 = (std::string *)v1177.__r_.__value_.__r.__words[0];
  if ((v1177.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v453 = HIBYTE(v1177.__r_.__value_.__r.__words[2]);
  else
    v453 = v1177.__r_.__value_.__l.__size_;
  std::string::append(&__x, (const std::string::value_type *)v452, v453);
  if (SHIBYTE(v1177.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v1177.__r_.__value_.__l.__data_);
  if (SHIBYTE(v1172.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v1172.__r_.__value_.__l.__data_);
  if (SHIBYTE(v1176.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v1176.__r_.__value_.__l.__data_);
  if (SHIBYTE(v1171.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v1171.__r_.__value_.__l.__data_);
  if (SHIBYTE(v1170.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v1170.__r_.__value_.__l.__data_);
  if (SHIBYTE(v1169.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v1169.__r_.__value_.__l.__data_);
  std::to_string(&v1169, 0x29u);
  v454 = std::string::insert(&v1169, 0, "wireGraphParam ", 0xFuLL);
  v455 = *(_OWORD *)&v454->__r_.__value_.__l.__data_;
  v1170.__r_.__value_.__r.__words[2] = v454->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v1170.__r_.__value_.__l.__data_ = v455;
  v454->__r_.__value_.__l.__size_ = 0;
  v454->__r_.__value_.__r.__words[2] = 0;
  v454->__r_.__value_.__r.__words[0] = 0;
  v456 = std::string::append(&v1170, " (linFullSignal ", 0x10uLL);
  v457 = *(_OWORD *)&v456->__r_.__value_.__l.__data_;
  v1171.__r_.__value_.__r.__words[2] = v456->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v1171.__r_.__value_.__l.__data_ = v457;
  v456->__r_.__value_.__l.__size_ = 0;
  v456->__r_.__value_.__r.__words[2] = 0;
  v456->__r_.__value_.__r.__words[0] = 0;
  std::to_string(&v1176, 0x25u);
  if ((v1176.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v458 = &v1176;
  else
    v458 = (std::string *)v1176.__r_.__value_.__r.__words[0];
  if ((v1176.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v459 = HIBYTE(v1176.__r_.__value_.__r.__words[2]);
  else
    v459 = v1176.__r_.__value_.__l.__size_;
  v460 = std::string::append(&v1171, (const std::string::value_type *)v458, v459);
  v461 = *(_OWORD *)&v460->__r_.__value_.__l.__data_;
  v1172.__r_.__value_.__r.__words[2] = v460->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v1172.__r_.__value_.__l.__data_ = v461;
  v460->__r_.__value_.__l.__size_ = 0;
  v460->__r_.__value_.__r.__words[2] = 0;
  v460->__r_.__value_.__r.__words[0] = 0;
  v462 = std::string::append(&v1172, " 0 0)\n", 6uLL);
  v463 = *(_OWORD *)&v462->__r_.__value_.__l.__data_;
  v1177.__r_.__value_.__r.__words[2] = v462->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v1177.__r_.__value_.__l.__data_ = v463;
  v462->__r_.__value_.__l.__size_ = 0;
  v462->__r_.__value_.__r.__words[2] = 0;
  v462->__r_.__value_.__r.__words[0] = 0;
  if ((v1177.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v464 = &v1177;
  else
    v464 = (std::string *)v1177.__r_.__value_.__r.__words[0];
  if ((v1177.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v465 = HIBYTE(v1177.__r_.__value_.__r.__words[2]);
  else
    v465 = v1177.__r_.__value_.__l.__size_;
  std::string::append(&__x, (const std::string::value_type *)v464, v465);
  if (SHIBYTE(v1177.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v1177.__r_.__value_.__l.__data_);
  if (SHIBYTE(v1172.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v1172.__r_.__value_.__l.__data_);
  if (SHIBYTE(v1176.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v1176.__r_.__value_.__l.__data_);
  if (SHIBYTE(v1171.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v1171.__r_.__value_.__l.__data_);
  if (SHIBYTE(v1170.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v1170.__r_.__value_.__l.__data_);
  if (SHIBYTE(v1169.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v1169.__r_.__value_.__l.__data_);
  std::to_string(&v1169, 0x2Au);
  v466 = std::string::insert(&v1169, 0, "wireGraphParam ", 0xFuLL);
  v467 = *(_OWORD *)&v466->__r_.__value_.__l.__data_;
  v1170.__r_.__value_.__r.__words[2] = v466->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v1170.__r_.__value_.__l.__data_ = v467;
  v466->__r_.__value_.__l.__size_ = 0;
  v466->__r_.__value_.__r.__words[2] = 0;
  v466->__r_.__value_.__r.__words[0] = 0;
  v468 = std::string::append(&v1170, " (linFullSignal ", 0x10uLL);
  v469 = *(_OWORD *)&v468->__r_.__value_.__l.__data_;
  v1171.__r_.__value_.__r.__words[2] = v468->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v1171.__r_.__value_.__l.__data_ = v469;
  v468->__r_.__value_.__l.__size_ = 0;
  v468->__r_.__value_.__r.__words[2] = 0;
  v468->__r_.__value_.__r.__words[0] = 0;
  std::to_string(&v1176, 0x26u);
  if ((v1176.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v470 = &v1176;
  else
    v470 = (std::string *)v1176.__r_.__value_.__r.__words[0];
  if ((v1176.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v471 = HIBYTE(v1176.__r_.__value_.__r.__words[2]);
  else
    v471 = v1176.__r_.__value_.__l.__size_;
  v472 = std::string::append(&v1171, (const std::string::value_type *)v470, v471);
  v473 = *(_OWORD *)&v472->__r_.__value_.__l.__data_;
  v1172.__r_.__value_.__r.__words[2] = v472->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v1172.__r_.__value_.__l.__data_ = v473;
  v472->__r_.__value_.__l.__size_ = 0;
  v472->__r_.__value_.__r.__words[2] = 0;
  v472->__r_.__value_.__r.__words[0] = 0;
  v474 = std::string::append(&v1172, " 0 0)\n", 6uLL);
  v475 = *(_OWORD *)&v474->__r_.__value_.__l.__data_;
  v1177.__r_.__value_.__r.__words[2] = v474->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v1177.__r_.__value_.__l.__data_ = v475;
  v474->__r_.__value_.__l.__size_ = 0;
  v474->__r_.__value_.__r.__words[2] = 0;
  v474->__r_.__value_.__r.__words[0] = 0;
  if ((v1177.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v476 = &v1177;
  else
    v476 = (std::string *)v1177.__r_.__value_.__r.__words[0];
  if ((v1177.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v477 = HIBYTE(v1177.__r_.__value_.__r.__words[2]);
  else
    v477 = v1177.__r_.__value_.__l.__size_;
  std::string::append(&__x, (const std::string::value_type *)v476, v477);
  if (SHIBYTE(v1177.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v1177.__r_.__value_.__l.__data_);
  if (SHIBYTE(v1172.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v1172.__r_.__value_.__l.__data_);
  if (SHIBYTE(v1176.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v1176.__r_.__value_.__l.__data_);
  if (SHIBYTE(v1171.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v1171.__r_.__value_.__l.__data_);
  if (SHIBYTE(v1170.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v1170.__r_.__value_.__l.__data_);
  if (SHIBYTE(v1169.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v1169.__r_.__value_.__l.__data_);
  std::to_string(&v1169, 0x2Bu);
  v478 = std::string::insert(&v1169, 0, "wireGraphParam ", 0xFuLL);
  v479 = *(_OWORD *)&v478->__r_.__value_.__l.__data_;
  v1170.__r_.__value_.__r.__words[2] = v478->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v1170.__r_.__value_.__l.__data_ = v479;
  v478->__r_.__value_.__l.__size_ = 0;
  v478->__r_.__value_.__r.__words[2] = 0;
  v478->__r_.__value_.__r.__words[0] = 0;
  v480 = std::string::append(&v1170, " (linFullSignal ", 0x10uLL);
  v481 = *(_OWORD *)&v480->__r_.__value_.__l.__data_;
  v1171.__r_.__value_.__r.__words[2] = v480->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v1171.__r_.__value_.__l.__data_ = v481;
  v480->__r_.__value_.__l.__size_ = 0;
  v480->__r_.__value_.__r.__words[2] = 0;
  v480->__r_.__value_.__r.__words[0] = 0;
  std::to_string(&v1176, 0x27u);
  if ((v1176.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v482 = &v1176;
  else
    v482 = (std::string *)v1176.__r_.__value_.__r.__words[0];
  if ((v1176.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v483 = HIBYTE(v1176.__r_.__value_.__r.__words[2]);
  else
    v483 = v1176.__r_.__value_.__l.__size_;
  v484 = std::string::append(&v1171, (const std::string::value_type *)v482, v483);
  v485 = *(_OWORD *)&v484->__r_.__value_.__l.__data_;
  v1172.__r_.__value_.__r.__words[2] = v484->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v1172.__r_.__value_.__l.__data_ = v485;
  v484->__r_.__value_.__l.__size_ = 0;
  v484->__r_.__value_.__r.__words[2] = 0;
  v484->__r_.__value_.__r.__words[0] = 0;
  v486 = std::string::append(&v1172, " 0 0)\n", 6uLL);
  v487 = *(_OWORD *)&v486->__r_.__value_.__l.__data_;
  v1177.__r_.__value_.__r.__words[2] = v486->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v1177.__r_.__value_.__l.__data_ = v487;
  v486->__r_.__value_.__l.__size_ = 0;
  v486->__r_.__value_.__r.__words[2] = 0;
  v486->__r_.__value_.__r.__words[0] = 0;
  if ((v1177.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v488 = &v1177;
  else
    v488 = (std::string *)v1177.__r_.__value_.__r.__words[0];
  if ((v1177.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v489 = HIBYTE(v1177.__r_.__value_.__r.__words[2]);
  else
    v489 = v1177.__r_.__value_.__l.__size_;
  std::string::append(&__x, (const std::string::value_type *)v488, v489);
  if (SHIBYTE(v1177.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v1177.__r_.__value_.__l.__data_);
  if (SHIBYTE(v1172.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v1172.__r_.__value_.__l.__data_);
  if (SHIBYTE(v1176.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v1176.__r_.__value_.__l.__data_);
  if (SHIBYTE(v1171.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v1171.__r_.__value_.__l.__data_);
  if (SHIBYTE(v1170.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v1170.__r_.__value_.__l.__data_);
  if (SHIBYTE(v1169.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v1169.__r_.__value_.__l.__data_);
  std::to_string(&v1169, 0x2Cu);
  v490 = std::string::insert(&v1169, 0, "wireGraphParam ", 0xFuLL);
  v491 = *(_OWORD *)&v490->__r_.__value_.__l.__data_;
  v1170.__r_.__value_.__r.__words[2] = v490->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v1170.__r_.__value_.__l.__data_ = v491;
  v490->__r_.__value_.__l.__size_ = 0;
  v490->__r_.__value_.__r.__words[2] = 0;
  v490->__r_.__value_.__r.__words[0] = 0;
  v492 = std::string::append(&v1170, " (linFullSignal ", 0x10uLL);
  v493 = *(_OWORD *)&v492->__r_.__value_.__l.__data_;
  v1171.__r_.__value_.__r.__words[2] = v492->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v1171.__r_.__value_.__l.__data_ = v493;
  v492->__r_.__value_.__l.__size_ = 0;
  v492->__r_.__value_.__r.__words[2] = 0;
  v492->__r_.__value_.__r.__words[0] = 0;
  std::to_string(&v1176, 0x28u);
  if ((v1176.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v494 = &v1176;
  else
    v494 = (std::string *)v1176.__r_.__value_.__r.__words[0];
  if ((v1176.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v495 = HIBYTE(v1176.__r_.__value_.__r.__words[2]);
  else
    v495 = v1176.__r_.__value_.__l.__size_;
  v496 = std::string::append(&v1171, (const std::string::value_type *)v494, v495);
  v497 = *(_OWORD *)&v496->__r_.__value_.__l.__data_;
  v1172.__r_.__value_.__r.__words[2] = v496->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v1172.__r_.__value_.__l.__data_ = v497;
  v496->__r_.__value_.__l.__size_ = 0;
  v496->__r_.__value_.__r.__words[2] = 0;
  v496->__r_.__value_.__r.__words[0] = 0;
  v498 = std::string::append(&v1172, " 0 0)\n", 6uLL);
  v499 = *(_OWORD *)&v498->__r_.__value_.__l.__data_;
  v1177.__r_.__value_.__r.__words[2] = v498->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v1177.__r_.__value_.__l.__data_ = v499;
  v498->__r_.__value_.__l.__size_ = 0;
  v498->__r_.__value_.__r.__words[2] = 0;
  v498->__r_.__value_.__r.__words[0] = 0;
  if ((v1177.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v500 = &v1177;
  else
    v500 = (std::string *)v1177.__r_.__value_.__r.__words[0];
  if ((v1177.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v501 = HIBYTE(v1177.__r_.__value_.__r.__words[2]);
  else
    v501 = v1177.__r_.__value_.__l.__size_;
  std::string::append(&__x, (const std::string::value_type *)v500, v501);
  if (SHIBYTE(v1177.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v1177.__r_.__value_.__l.__data_);
  if (SHIBYTE(v1172.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v1172.__r_.__value_.__l.__data_);
  if (SHIBYTE(v1176.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v1176.__r_.__value_.__l.__data_);
  if (SHIBYTE(v1171.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v1171.__r_.__value_.__l.__data_);
  if (SHIBYTE(v1170.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v1170.__r_.__value_.__l.__data_);
  if (SHIBYTE(v1169.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v1169.__r_.__value_.__l.__data_);
  std::to_string(&v1169, 0x2Du);
  v502 = std::string::insert(&v1169, 0, "wireGraphParam ", 0xFuLL);
  v503 = *(_OWORD *)&v502->__r_.__value_.__l.__data_;
  v1170.__r_.__value_.__r.__words[2] = v502->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v1170.__r_.__value_.__l.__data_ = v503;
  v502->__r_.__value_.__l.__size_ = 0;
  v502->__r_.__value_.__r.__words[2] = 0;
  v502->__r_.__value_.__r.__words[0] = 0;
  v504 = std::string::append(&v1170, " (linFullSignal ", 0x10uLL);
  v505 = *(_OWORD *)&v504->__r_.__value_.__l.__data_;
  v1171.__r_.__value_.__r.__words[2] = v504->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v1171.__r_.__value_.__l.__data_ = v505;
  v504->__r_.__value_.__l.__size_ = 0;
  v504->__r_.__value_.__r.__words[2] = 0;
  v504->__r_.__value_.__r.__words[0] = 0;
  std::to_string(&v1176, 0x29u);
  if ((v1176.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v506 = &v1176;
  else
    v506 = (std::string *)v1176.__r_.__value_.__r.__words[0];
  if ((v1176.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v507 = HIBYTE(v1176.__r_.__value_.__r.__words[2]);
  else
    v507 = v1176.__r_.__value_.__l.__size_;
  v508 = std::string::append(&v1171, (const std::string::value_type *)v506, v507);
  v509 = *(_OWORD *)&v508->__r_.__value_.__l.__data_;
  v1172.__r_.__value_.__r.__words[2] = v508->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v1172.__r_.__value_.__l.__data_ = v509;
  v508->__r_.__value_.__l.__size_ = 0;
  v508->__r_.__value_.__r.__words[2] = 0;
  v508->__r_.__value_.__r.__words[0] = 0;
  v510 = std::string::append(&v1172, " 0 0)\n", 6uLL);
  v511 = *(_OWORD *)&v510->__r_.__value_.__l.__data_;
  v1177.__r_.__value_.__r.__words[2] = v510->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v1177.__r_.__value_.__l.__data_ = v511;
  v510->__r_.__value_.__l.__size_ = 0;
  v510->__r_.__value_.__r.__words[2] = 0;
  v510->__r_.__value_.__r.__words[0] = 0;
  if ((v1177.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v512 = &v1177;
  else
    v512 = (std::string *)v1177.__r_.__value_.__r.__words[0];
  if ((v1177.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v513 = HIBYTE(v1177.__r_.__value_.__r.__words[2]);
  else
    v513 = v1177.__r_.__value_.__l.__size_;
  std::string::append(&__x, (const std::string::value_type *)v512, v513);
  if (SHIBYTE(v1177.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v1177.__r_.__value_.__l.__data_);
  if (SHIBYTE(v1172.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v1172.__r_.__value_.__l.__data_);
  if (SHIBYTE(v1176.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v1176.__r_.__value_.__l.__data_);
  if (SHIBYTE(v1171.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v1171.__r_.__value_.__l.__data_);
  if (SHIBYTE(v1170.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v1170.__r_.__value_.__l.__data_);
  if (SHIBYTE(v1169.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v1169.__r_.__value_.__l.__data_);
  if ((char *)a4[1] - (char *)*a4 == 4)
  {
    v514 = **a4;
    if (v514 != 1)
    {
      if (!v514)
      {
        std::string::append(a1, "\n         box postGain (aufx dbgn abox) 1 1\n         ;\n"
          "         ; Linear spatial (full signal)\n"
          "         ;\n"
          "         ",
          0x73uLL);
        if (a7)
          v515 = "\n"
                 "             wire linPatcher                            linFullSignalFTT                    (freq [proc"
                 "Rate] [numOutputs] [fftBlockSize])\n"
                 "             wire linFullSignalFTT                      postGain                            ([procRate]"
                 " [numOutputs] [fftBlockSize])\n"
                 "             wire postGain                              finalOut                            ([procRate]"
                 " [numOutputs] [fftBlockSize])\n"
                 "             ";
        else
          v515 = "\n"
                 "             wire linPatcher                            postGain                            (freq [proc"
                 "Rate] [numOutputs] [fftBlockSize])\n"
                 "             wire postGain                              finalOut                            (freq [proc"
                 "Rate] [numOutputs] [fftBlockSize])\n"
                 "             ";
        if (a7)
          v516 = 418;
        else
          v516 = 290;
        std::string::append(a1, v515, v516);
        std::string::append(a1, "\n        param 1000 -3.0\n        wireGraphParam 1000 (postGain 0 0 0)\n        ", 0x4EuLL);
        if (!AppBooleanValue)
          goto LABEL_1031;
        if (SCLogScope(void)::once != -1)
          dispatch_once(&SCLogScope(void)::once, &__block_literal_global_11993);
        if (SCLogScope(void)::scope)
        {
          v517 = *(id *)SCLogScope(void)::scope;
          if (!v517)
            goto LABEL_2132;
        }
        else
        {
          v517 = (id)MEMORY[0x1E0C81028];
          v1106 = MEMORY[0x1E0C81028];
        }
        v1107 = v517;
        if (os_log_type_enabled(v1107, OS_LOG_TYPE_DEFAULT))
        {
          LODWORD(v1177.__r_.__value_.__l.__data_) = 136315394;
          *(std::string::size_type *)((char *)v1177.__r_.__value_.__r.__words + 4) = (std::string::size_type)"SpatialCapture.mm";
          WORD2(v1177.__r_.__value_.__r.__words[1]) = 1024;
          *(_DWORD *)((char *)&v1177.__r_.__value_.__r.__words[1] + 6) = 375;
          _os_log_impl(&dword_1B5ED0000, v1107, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Enabling recording", (uint8_t *)&v1177, 0x12u);
        }

LABEL_2132:
        std::operator+<char>();
        v1108 = std::string::append(&v1169, "ref-in-sc.wav\"     refIn \n            record \"", 0x2EuLL);
        v1109 = *(_OWORD *)&v1108->__r_.__value_.__l.__data_;
        v1170.__r_.__value_.__r.__words[2] = v1108->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v1170.__r_.__value_.__l.__data_ = v1109;
        v1108->__r_.__value_.__l.__size_ = 0;
        v1108->__r_.__value_.__r.__words[2] = 0;
        v1108->__r_.__value_.__r.__words[0] = 0;
        v1110 = *(char *)(a5 + 23);
        if (v1110 >= 0)
          v1111 = (const std::string::value_type *)a5;
        else
          v1111 = *(const std::string::value_type **)a5;
        if (v1110 >= 0)
          v1112 = *(unsigned __int8 *)(a5 + 23);
        else
          v1112 = *(_QWORD *)(a5 + 8);
        v1113 = std::string::append(&v1170, v1111, v1112);
        v1114 = *(_OWORD *)&v1113->__r_.__value_.__l.__data_;
        v1171.__r_.__value_.__r.__words[2] = v1113->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v1171.__r_.__value_.__l.__data_ = v1114;
        v1113->__r_.__value_.__l.__size_ = 0;
        v1113->__r_.__value_.__r.__words[2] = 0;
        v1113->__r_.__value_.__r.__words[0] = 0;
        v1115 = std::string::append(&v1171, "linFullSignal-sc.wav\"     (linFullSignal 2) \n            record \"", 0x41uLL);
        v1116 = *(_OWORD *)&v1115->__r_.__value_.__l.__data_;
        v1172.__r_.__value_.__r.__words[2] = v1115->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v1172.__r_.__value_.__l.__data_ = v1116;
        v1115->__r_.__value_.__l.__size_ = 0;
        v1115->__r_.__value_.__r.__words[2] = 0;
        v1115->__r_.__value_.__r.__words[0] = 0;
        v1117 = *(char *)(a5 + 23);
        if (v1117 >= 0)
          v1118 = (const std::string::value_type *)a5;
        else
          v1118 = *(const std::string::value_type **)a5;
        if (v1117 >= 0)
          v1119 = *(unsigned __int8 *)(a5 + 23);
        else
          v1119 = *(_QWORD *)(a5 + 8);
        v1120 = std::string::append(&v1172, v1118, v1119);
        v1121 = *(_OWORD *)&v1120->__r_.__value_.__l.__data_;
        v1177.__r_.__value_.__r.__words[2] = v1120->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v1177.__r_.__value_.__l.__data_ = v1121;
        v1120->__r_.__value_.__l.__size_ = 0;
        v1120->__r_.__value_.__r.__words[2] = 0;
        v1120->__r_.__value_.__r.__words[0] = 0;
        v1122 = std::string::append(&v1177, "linPatcher-sc.wav\"     linPatcher \n            ", 0x2FuLL);
        v1123 = (char *)v1122->__r_.__value_.__r.__words[0];
        v1176.__r_.__value_.__r.__words[0] = v1122->__r_.__value_.__l.__size_;
        *(std::string::size_type *)((char *)v1176.__r_.__value_.__r.__words + 7) = *(std::string::size_type *)((char *)&v1122->__r_.__value_.__r.__words[1] + 7);
        v1124 = HIBYTE(v1122->__r_.__value_.__r.__words[2]);
        v1122->__r_.__value_.__l.__size_ = 0;
        v1122->__r_.__value_.__r.__words[2] = 0;
        v1122->__r_.__value_.__r.__words[0] = 0;
        if (SHIBYTE(v1174.__end_cap_.__value_) < 0)
          operator delete(v1174.__begin_);
        v1174.__begin_ = v1123;
        v1174.__end_ = (std::vector<char>::pointer)v1176.__r_.__value_.__r.__words[0];
        *(std::vector<char>::pointer *)((char *)&v1174.__end_ + 7) = *(std::vector<char>::pointer *)((char *)v1176.__r_.__value_.__r.__words + 7);
        HIBYTE(v1174.__end_cap_.__value_) = v1124;
        if (SHIBYTE(v1177.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v1177.__r_.__value_.__l.__data_);
        if (SHIBYTE(v1172.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v1172.__r_.__value_.__l.__data_);
        if (SHIBYTE(v1171.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v1171.__r_.__value_.__l.__data_);
        if (SHIBYTE(v1170.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v1170.__r_.__value_.__l.__data_);
        if (SHIBYTE(v1169.__r_.__value_.__r.__words[2]) < 0)
        {
          v1125 = (void *)v1169.__r_.__value_.__r.__words[0];
LABEL_2204:
          operator delete(v1125);
          goto LABEL_1031;
        }
        goto LABEL_1031;
      }
      goto LABEL_1022;
    }
    std::string::append(a1, "\n                           box focused (aufx bmfd appl) 1 3\n                           box focusedDead dead 2 0\n                           box focusedPatcher chansel 1 1\n                           box focusedVsSpatialMix scmx 2 1\n                           \n                           box wide (aufx bmfd appl) 1 3\n                           box wideDead dead 2 0\n                           box widePatcher chansel 1 1\n                           box wideVsSpatialMix scmx 2 1\n                           \n                           box focusedFOVToBeamMix paramtx 0 0\n                           box wideFOVToBeamMix    paramtx 0 0\n                           \n                           box focusedBeamMixOverrideSwitch paramsw 0 0\n                           box wideBeamMixOverrideSwitch    paramsw 0 0\n                           \n                           box defaultBeamGainCamDirSwitch paramsw 0 0\n"
      "                           box focusedBeamGainCamDirSwitch paramsw 0 0\n"
      "                           box wideBeamGainCamDirSwitch paramsw 0 0\n"
      "\n"
      "                           wire refIn                           focused                       (freq [procRate] [nu"
      "mMics] [fftBlockSize])\n"
      "                           wire (focused 0)                     (focusedDead 0)               (freq [procRate] 1 ["
      "fftBlockSize])\n"
      "                           wire (focused 1)                     (focusedDead 1)               (freq [procRate] 1 ["
      "fftBlockSize])\n"
      "                           wire (focused 2)                     focusedPatcher                (freq [procRate] [nu"
      "mLinBeams] [fftBlockSize])\n"
      "\n"
      "                           wire refIn                           wide                       (freq [procRate] [numMi"
      "cs] [fftBlockSize])\n"
      "                           wire (wide 0)                        (wideDead 0)               (freq [procRate] 1 [fft"
      "BlockSize])\n"
      "                           wire (wide 1)                        (wideDead 1)               (freq [procRate] 1 [fft"
      "BlockSize])\n"
      "                           wire (wide 2)                        widePatcher                (freq [procRate] [numLi"
      "nBeams] [fftBlockSize])\n"
      "\n"
      "                           wire widePatcher                     (wideVsSpatialMix 0)       (freq [procRate] [numOu"
      "tputs] [fftBlockSize])\n"
      "                           wire linPatcher                      (wideVsSpatialMix 1)       (freq [procRate] [numOu"
      "tputs] [fftBlockSize])\n"
      "                           wire focusedPatcher                  (focusedVsSpatialMix 1)       (freq [procRate] [nu"
      "mOutputs] [fftBlockSize])\n"
      "\n"
      "                           wire wideVsSpatialMix                (focusedVsSpatialMix 0)       (freq [procRate] [nu"
      "mOutputs] [fftBlockSize])\n"
      "\n"
      "                           ",
      0xA7FuLL);
    if (a7)
      v525 = "\n"
             "             wire focusedVsSpatialMix             linFullSignalFTT              (freq [procRate] [numOutput"
             "s] [fftBlockSize])\n"
             "             wire linFullSignalFTT                finalOut                      ([procRate] [numOutputs] [f"
             "ftBlockSize])\n"
             "             ";
    else
      v525 = "\n"
             "             wire focusedVsSpatialMix             finalOut                      (freq [procRate] [numOutput"
             "s] [fftBlockSize])\n"
             "                          ";
    if (a7)
      v526 = 261;
    else
      v526 = 153;
    std::string::append(a1, v525, v526);
    std::to_string(&v1171, 0x2Eu);
    v527 = std::string::insert(&v1171, 0, "param ", 6uLL);
    v528 = *(_OWORD *)&v527->__r_.__value_.__l.__data_;
    v1172.__r_.__value_.__r.__words[2] = v527->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v1172.__r_.__value_.__l.__data_ = v528;
    v527->__r_.__value_.__l.__size_ = 0;
    v527->__r_.__value_.__r.__words[2] = 0;
    v527->__r_.__value_.__r.__words[0] = 0;
    v529 = std::string::append(&v1172, " 0.0\n", 5uLL);
    v530 = *(_OWORD *)&v529->__r_.__value_.__l.__data_;
    v1177.__r_.__value_.__r.__words[2] = v529->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v1177.__r_.__value_.__l.__data_ = v530;
    v529->__r_.__value_.__l.__size_ = 0;
    v529->__r_.__value_.__r.__words[2] = 0;
    v529->__r_.__value_.__r.__words[0] = 0;
    if ((v1177.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v531 = &v1177;
    else
      v531 = (std::string *)v1177.__r_.__value_.__r.__words[0];
    if ((v1177.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v532 = HIBYTE(v1177.__r_.__value_.__r.__words[2]);
    else
      v532 = v1177.__r_.__value_.__l.__size_;
    std::string::append(&__x, (const std::string::value_type *)v531, v532);
    if (SHIBYTE(v1177.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v1177.__r_.__value_.__l.__data_);
    if (SHIBYTE(v1172.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v1172.__r_.__value_.__l.__data_);
    if (SHIBYTE(v1171.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v1171.__r_.__value_.__l.__data_);
    v533 = 0;
    v534 = 0;
    v1175.__r_.__value_.__r.__words[0] = (std::string::size_type)"focused";
    v1175.__r_.__value_.__l.__size_ = (std::string::size_type)"wide";
    do
    {
      v1161 = v533;
      std::string::basic_string[abi:ne180100]<0>(&v1177, *(&v1175.__r_.__value_.__l.__data_ + v534));
      std::to_string(&v1168, 0x2Eu);
      v535 = std::string::insert(&v1168, 0, "wireGraphParam ", 0xFuLL);
      v536 = *(_OWORD *)&v535->__r_.__value_.__l.__data_;
      v1176.__r_.__value_.__r.__words[2] = v535->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v1176.__r_.__value_.__l.__data_ = v536;
      v535->__r_.__value_.__l.__size_ = 0;
      v535->__r_.__value_.__r.__words[2] = 0;
      v535->__r_.__value_.__r.__words[0] = 0;
      v537 = std::string::append(&v1176, " (", 2uLL);
      v538 = *(_OWORD *)&v537->__r_.__value_.__l.__data_;
      v1169.__r_.__value_.__r.__words[2] = v537->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v1169.__r_.__value_.__l.__data_ = v538;
      v537->__r_.__value_.__l.__size_ = 0;
      v537->__r_.__value_.__r.__words[2] = 0;
      v537->__r_.__value_.__r.__words[0] = 0;
      if ((v1177.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v539 = &v1177;
      else
        v539 = (std::string *)v1177.__r_.__value_.__r.__words[0];
      if ((v1177.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v540 = HIBYTE(v1177.__r_.__value_.__r.__words[2]);
      else
        v540 = v1177.__r_.__value_.__l.__size_;
      v541 = std::string::append(&v1169, (const std::string::value_type *)v539, v540);
      v542 = *(_OWORD *)&v541->__r_.__value_.__l.__data_;
      v1170.__r_.__value_.__r.__words[2] = v541->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v1170.__r_.__value_.__l.__data_ = v542;
      v541->__r_.__value_.__l.__size_ = 0;
      v541->__r_.__value_.__r.__words[2] = 0;
      v541->__r_.__value_.__r.__words[0] = 0;
      v543 = std::string::append(&v1170, "FOVToBeamMix", 0xCuLL);
      v544 = *(_OWORD *)&v543->__r_.__value_.__l.__data_;
      v1171.__r_.__value_.__r.__words[2] = v543->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v1171.__r_.__value_.__l.__data_ = v544;
      v543->__r_.__value_.__l.__size_ = 0;
      v543->__r_.__value_.__r.__words[2] = 0;
      v543->__r_.__value_.__r.__words[0] = 0;
      v545 = std::string::append(&v1171, " 0 0 0)\n", 8uLL);
      v546 = *(_OWORD *)&v545->__r_.__value_.__l.__data_;
      v1172.__r_.__value_.__r.__words[2] = v545->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v1172.__r_.__value_.__l.__data_ = v546;
      v545->__r_.__value_.__l.__size_ = 0;
      v545->__r_.__value_.__r.__words[2] = 0;
      v545->__r_.__value_.__r.__words[0] = 0;
      if ((v1172.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v547 = &v1172;
      else
        v547 = (std::string *)v1172.__r_.__value_.__r.__words[0];
      if ((v1172.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v548 = HIBYTE(v1172.__r_.__value_.__r.__words[2]);
      else
        v548 = v1172.__r_.__value_.__l.__size_;
      std::string::append(&__x, (const std::string::value_type *)v547, v548);
      if (SHIBYTE(v1172.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v1172.__r_.__value_.__l.__data_);
      if (SHIBYTE(v1171.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v1171.__r_.__value_.__l.__data_);
      if (SHIBYTE(v1170.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v1170.__r_.__value_.__l.__data_);
      if (SHIBYTE(v1169.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v1169.__r_.__value_.__l.__data_);
      if (SHIBYTE(v1176.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v1176.__r_.__value_.__l.__data_);
      if (SHIBYTE(v1168.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v1168.__r_.__value_.__l.__data_);
      std::operator+<char>();
      v549 = std::string::append(&v1176, "FOVToBeamMix", 0xCuLL);
      v550 = *(_OWORD *)&v549->__r_.__value_.__l.__data_;
      v1169.__r_.__value_.__r.__words[2] = v549->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v1169.__r_.__value_.__l.__data_ = v550;
      v549->__r_.__value_.__l.__size_ = 0;
      v549->__r_.__value_.__r.__words[2] = 0;
      v549->__r_.__value_.__r.__words[0] = 0;
      v551 = std::string::append(&v1169, " 0 0 0) (", 9uLL);
      v552 = *(_OWORD *)&v551->__r_.__value_.__l.__data_;
      v1170.__r_.__value_.__r.__words[2] = v551->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v1170.__r_.__value_.__l.__data_ = v552;
      v551->__r_.__value_.__l.__size_ = 0;
      v551->__r_.__value_.__r.__words[2] = 0;
      v551->__r_.__value_.__r.__words[0] = 0;
      if ((v1177.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v553 = &v1177;
      else
        v553 = (std::string *)v1177.__r_.__value_.__r.__words[0];
      if ((v1177.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v554 = HIBYTE(v1177.__r_.__value_.__r.__words[2]);
      else
        v554 = v1177.__r_.__value_.__l.__size_;
      v555 = std::string::append(&v1170, (const std::string::value_type *)v553, v554);
      v556 = *(_OWORD *)&v555->__r_.__value_.__l.__data_;
      v1171.__r_.__value_.__r.__words[2] = v555->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v1171.__r_.__value_.__l.__data_ = v556;
      v555->__r_.__value_.__l.__size_ = 0;
      v555->__r_.__value_.__r.__words[2] = 0;
      v555->__r_.__value_.__r.__words[0] = 0;
      v557 = std::string::append(&v1171, "BeamMixOverrideSwitch 1 0 0) true\n", 0x22uLL);
      v558 = *(_OWORD *)&v557->__r_.__value_.__l.__data_;
      v1172.__r_.__value_.__r.__words[2] = v557->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v1172.__r_.__value_.__l.__data_ = v558;
      v557->__r_.__value_.__l.__size_ = 0;
      v557->__r_.__value_.__r.__words[2] = 0;
      v557->__r_.__value_.__r.__words[0] = 0;
      if ((v1172.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v559 = &v1172;
      else
        v559 = (std::string *)v1172.__r_.__value_.__r.__words[0];
      if ((v1172.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v560 = HIBYTE(v1172.__r_.__value_.__r.__words[2]);
      else
        v560 = v1172.__r_.__value_.__l.__size_;
      std::string::append(&__x, (const std::string::value_type *)v559, v560);
      if (SHIBYTE(v1172.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v1172.__r_.__value_.__l.__data_);
      if (SHIBYTE(v1171.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v1171.__r_.__value_.__l.__data_);
      if (SHIBYTE(v1170.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v1170.__r_.__value_.__l.__data_);
      if (SHIBYTE(v1169.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v1169.__r_.__value_.__l.__data_);
      if (SHIBYTE(v1176.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v1176.__r_.__value_.__l.__data_);
      std::operator+<char>();
      v561 = std::string::append(&v1168, "BeamMixOverrideSwitch 0 0 0) (", 0x1EuLL);
      v562 = *(_OWORD *)&v561->__r_.__value_.__l.__data_;
      v1176.__r_.__value_.__r.__words[2] = v561->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v1176.__r_.__value_.__l.__data_ = v562;
      v561->__r_.__value_.__l.__size_ = 0;
      v561->__r_.__value_.__r.__words[2] = 0;
      v561->__r_.__value_.__r.__words[0] = 0;
      if ((v1177.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v563 = &v1177;
      else
        v563 = (std::string *)v1177.__r_.__value_.__r.__words[0];
      if ((v1177.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v564 = HIBYTE(v1177.__r_.__value_.__r.__words[2]);
      else
        v564 = v1177.__r_.__value_.__l.__size_;
      v565 = std::string::append(&v1176, (const std::string::value_type *)v563, v564);
      v566 = *(_OWORD *)&v565->__r_.__value_.__l.__data_;
      v1169.__r_.__value_.__r.__words[2] = v565->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v1169.__r_.__value_.__l.__data_ = v566;
      v565->__r_.__value_.__l.__size_ = 0;
      v565->__r_.__value_.__r.__words[2] = 0;
      v565->__r_.__value_.__r.__words[0] = 0;
      v567 = std::string::append(&v1169, "VsSpatialMix ", 0xDuLL);
      v568 = *(_OWORD *)&v567->__r_.__value_.__l.__data_;
      v1170.__r_.__value_.__r.__words[2] = v567->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v1170.__r_.__value_.__l.__data_ = v568;
      v567->__r_.__value_.__l.__size_ = 0;
      v567->__r_.__value_.__r.__words[2] = 0;
      v567->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v1167, 0);
      if ((v1167.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v569 = &v1167;
      else
        v569 = (std::string *)v1167.__r_.__value_.__r.__words[0];
      if ((v1167.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v570 = HIBYTE(v1167.__r_.__value_.__r.__words[2]);
      else
        v570 = v1167.__r_.__value_.__l.__size_;
      v571 = std::string::append(&v1170, (const std::string::value_type *)v569, v570);
      v572 = *(_OWORD *)&v571->__r_.__value_.__l.__data_;
      v1171.__r_.__value_.__r.__words[2] = v571->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v1171.__r_.__value_.__l.__data_ = v572;
      v571->__r_.__value_.__l.__size_ = 0;
      v571->__r_.__value_.__r.__words[2] = 0;
      v571->__r_.__value_.__r.__words[0] = 0;
      v573 = std::string::append(&v1171, " 0 0) true\n", 0xBuLL);
      v574 = *(_OWORD *)&v573->__r_.__value_.__l.__data_;
      v1172.__r_.__value_.__r.__words[2] = v573->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v1172.__r_.__value_.__l.__data_ = v574;
      v573->__r_.__value_.__l.__size_ = 0;
      v573->__r_.__value_.__r.__words[2] = 0;
      v573->__r_.__value_.__r.__words[0] = 0;
      if ((v1172.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v575 = &v1172;
      else
        v575 = (std::string *)v1172.__r_.__value_.__r.__words[0];
      if ((v1172.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v576 = HIBYTE(v1172.__r_.__value_.__r.__words[2]);
      else
        v576 = v1172.__r_.__value_.__l.__size_;
      std::string::append(&__x, (const std::string::value_type *)v575, v576);
      if (SHIBYTE(v1172.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v1172.__r_.__value_.__l.__data_);
      if (SHIBYTE(v1171.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v1171.__r_.__value_.__l.__data_);
      if (SHIBYTE(v1167.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v1167.__r_.__value_.__l.__data_);
      if (SHIBYTE(v1170.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v1170.__r_.__value_.__l.__data_);
      if (SHIBYTE(v1169.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v1169.__r_.__value_.__l.__data_);
      if (SHIBYTE(v1176.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v1176.__r_.__value_.__l.__data_);
      if (SHIBYTE(v1168.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v1168.__r_.__value_.__l.__data_);
      std::to_string(&v1176, 0);
      v577 = std::string::insert(&v1176, 0, "wireGraphParam ", 0xFuLL);
      v578 = *(_OWORD *)&v577->__r_.__value_.__l.__data_;
      v1169.__r_.__value_.__r.__words[2] = v577->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v1169.__r_.__value_.__l.__data_ = v578;
      v577->__r_.__value_.__l.__size_ = 0;
      v577->__r_.__value_.__r.__words[2] = 0;
      v577->__r_.__value_.__r.__words[0] = 0;
      v579 = std::string::append(&v1169, " (", 2uLL);
      v580 = *(_OWORD *)&v579->__r_.__value_.__l.__data_;
      v1170.__r_.__value_.__r.__words[2] = v579->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v1170.__r_.__value_.__l.__data_ = v580;
      v579->__r_.__value_.__l.__size_ = 0;
      v579->__r_.__value_.__r.__words[2] = 0;
      v579->__r_.__value_.__r.__words[0] = 0;
      if ((v1177.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v581 = &v1177;
      else
        v581 = (std::string *)v1177.__r_.__value_.__r.__words[0];
      if ((v1177.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v582 = HIBYTE(v1177.__r_.__value_.__r.__words[2]);
      else
        v582 = v1177.__r_.__value_.__l.__size_;
      v583 = std::string::append(&v1170, (const std::string::value_type *)v581, v582);
      v584 = *(_OWORD *)&v583->__r_.__value_.__l.__data_;
      v1171.__r_.__value_.__r.__words[2] = v583->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v1171.__r_.__value_.__l.__data_ = v584;
      v583->__r_.__value_.__l.__size_ = 0;
      v583->__r_.__value_.__r.__words[2] = 0;
      v583->__r_.__value_.__r.__words[0] = 0;
      v585 = std::string::append(&v1171, "BeamGainCamDirSwitch 0 0 0)\n", 0x1CuLL);
      v586 = *(_OWORD *)&v585->__r_.__value_.__l.__data_;
      v1172.__r_.__value_.__r.__words[2] = v585->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v1172.__r_.__value_.__l.__data_ = v586;
      v585->__r_.__value_.__l.__size_ = 0;
      v585->__r_.__value_.__r.__words[2] = 0;
      v585->__r_.__value_.__r.__words[0] = 0;
      if ((v1172.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v587 = &v1172;
      else
        v587 = (std::string *)v1172.__r_.__value_.__r.__words[0];
      if ((v1172.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v588 = HIBYTE(v1172.__r_.__value_.__r.__words[2]);
      else
        v588 = v1172.__r_.__value_.__l.__size_;
      std::string::append(&__x, (const std::string::value_type *)v587, v588);
      if (SHIBYTE(v1172.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v1172.__r_.__value_.__l.__data_);
      if (SHIBYTE(v1171.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v1171.__r_.__value_.__l.__data_);
      if (SHIBYTE(v1170.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v1170.__r_.__value_.__l.__data_);
      if (SHIBYTE(v1169.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v1169.__r_.__value_.__l.__data_);
      if (SHIBYTE(v1176.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v1176.__r_.__value_.__l.__data_);
      std::to_string(&v1176, 0x32u);
      v589 = std::string::insert(&v1176, 0, "wireGraphParam ", 0xFuLL);
      v590 = *(_OWORD *)&v589->__r_.__value_.__l.__data_;
      v1169.__r_.__value_.__r.__words[2] = v589->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v1169.__r_.__value_.__l.__data_ = v590;
      v589->__r_.__value_.__l.__size_ = 0;
      v589->__r_.__value_.__r.__words[2] = 0;
      v589->__r_.__value_.__r.__words[0] = 0;
      v591 = std::string::append(&v1169, " (", 2uLL);
      v592 = *(_OWORD *)&v591->__r_.__value_.__l.__data_;
      v1170.__r_.__value_.__r.__words[2] = v591->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v1170.__r_.__value_.__l.__data_ = v592;
      v591->__r_.__value_.__l.__size_ = 0;
      v591->__r_.__value_.__r.__words[2] = 0;
      v591->__r_.__value_.__r.__words[0] = 0;
      if ((v1177.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v593 = &v1177;
      else
        v593 = (std::string *)v1177.__r_.__value_.__r.__words[0];
      if ((v1177.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v594 = HIBYTE(v1177.__r_.__value_.__r.__words[2]);
      else
        v594 = v1177.__r_.__value_.__l.__size_;
      v595 = std::string::append(&v1170, (const std::string::value_type *)v593, v594);
      v596 = *(_OWORD *)&v595->__r_.__value_.__l.__data_;
      v1171.__r_.__value_.__r.__words[2] = v595->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v1171.__r_.__value_.__l.__data_ = v596;
      v595->__r_.__value_.__l.__size_ = 0;
      v595->__r_.__value_.__r.__words[2] = 0;
      v595->__r_.__value_.__r.__words[0] = 0;
      v597 = std::string::append(&v1171, "BeamGainCamDirSwitch 1 0 0)\n", 0x1CuLL);
      v598 = *(_OWORD *)&v597->__r_.__value_.__l.__data_;
      v1172.__r_.__value_.__r.__words[2] = v597->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v1172.__r_.__value_.__l.__data_ = v598;
      v597->__r_.__value_.__l.__size_ = 0;
      v597->__r_.__value_.__r.__words[2] = 0;
      v597->__r_.__value_.__r.__words[0] = 0;
      if ((v1172.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v599 = &v1172;
      else
        v599 = (std::string *)v1172.__r_.__value_.__r.__words[0];
      if ((v1172.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v600 = HIBYTE(v1172.__r_.__value_.__r.__words[2]);
      else
        v600 = v1172.__r_.__value_.__l.__size_;
      std::string::append(&__x, (const std::string::value_type *)v599, v600);
      if (SHIBYTE(v1172.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v1172.__r_.__value_.__l.__data_);
      if (SHIBYTE(v1171.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v1171.__r_.__value_.__l.__data_);
      if (SHIBYTE(v1170.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v1170.__r_.__value_.__l.__data_);
      if (SHIBYTE(v1169.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v1169.__r_.__value_.__l.__data_);
      if (SHIBYTE(v1176.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v1176.__r_.__value_.__l.__data_);
      v601 = 0;
      do
      {
        std::to_string(&v1167, v601 + 3);
        v602 = std::string::insert(&v1167, 0, "wireProperty (micSelectCoordinator ", 0x23uLL);
        v603 = *(_OWORD *)&v602->__r_.__value_.__l.__data_;
        v1168.__r_.__value_.__r.__words[2] = v602->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v1168.__r_.__value_.__l.__data_ = v603;
        v602->__r_.__value_.__l.__size_ = 0;
        v602->__r_.__value_.__r.__words[2] = 0;
        v602->__r_.__value_.__r.__words[0] = 0;
        v604 = std::string::append(&v1168, ") (", 3uLL);
        v605 = *(_OWORD *)&v604->__r_.__value_.__l.__data_;
        v1176.__r_.__value_.__r.__words[2] = v604->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v1176.__r_.__value_.__l.__data_ = v605;
        v604->__r_.__value_.__l.__size_ = 0;
        v604->__r_.__value_.__r.__words[2] = 0;
        v604->__r_.__value_.__r.__words[0] = 0;
        if ((v1177.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v606 = &v1177;
        else
          v606 = (std::string *)v1177.__r_.__value_.__r.__words[0];
        if ((v1177.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v607 = HIBYTE(v1177.__r_.__value_.__r.__words[2]);
        else
          v607 = v1177.__r_.__value_.__l.__size_;
        v608 = std::string::append(&v1176, (const std::string::value_type *)v606, v607);
        v609 = *(_OWORD *)&v608->__r_.__value_.__l.__data_;
        v1169.__r_.__value_.__r.__words[2] = v608->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v1169.__r_.__value_.__l.__data_ = v609;
        v608->__r_.__value_.__l.__size_ = 0;
        v608->__r_.__value_.__r.__words[2] = 0;
        v608->__r_.__value_.__r.__words[0] = 0;
        v610 = std::string::append(&v1169, "Patcher ", 8uLL);
        v611 = *(_OWORD *)&v610->__r_.__value_.__l.__data_;
        v1170.__r_.__value_.__r.__words[2] = v610->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v1170.__r_.__value_.__l.__data_ = v611;
        v610->__r_.__value_.__l.__size_ = 0;
        v610->__r_.__value_.__r.__words[2] = 0;
        v610->__r_.__value_.__r.__words[0] = 0;
        std::to_string(&v1166, v601);
        if ((v1166.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v612 = &v1166;
        else
          v612 = (std::string *)v1166.__r_.__value_.__r.__words[0];
        if ((v1166.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v613 = HIBYTE(v1166.__r_.__value_.__r.__words[2]);
        else
          v613 = v1166.__r_.__value_.__l.__size_;
        v614 = std::string::append(&v1170, (const std::string::value_type *)v612, v613);
        v615 = *(_OWORD *)&v614->__r_.__value_.__l.__data_;
        v1171.__r_.__value_.__r.__words[2] = v614->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v1171.__r_.__value_.__l.__data_ = v615;
        v614->__r_.__value_.__l.__size_ = 0;
        v614->__r_.__value_.__r.__words[2] = 0;
        v614->__r_.__value_.__r.__words[0] = 0;
        v616 = std::string::append(&v1171, ") true\n", 7uLL);
        v617 = *(_OWORD *)&v616->__r_.__value_.__l.__data_;
        v1172.__r_.__value_.__r.__words[2] = v616->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v1172.__r_.__value_.__l.__data_ = v617;
        v616->__r_.__value_.__l.__size_ = 0;
        v616->__r_.__value_.__r.__words[2] = 0;
        v616->__r_.__value_.__r.__words[0] = 0;
        if ((v1172.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v618 = &v1172;
        else
          v618 = (std::string *)v1172.__r_.__value_.__r.__words[0];
        if ((v1172.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v619 = HIBYTE(v1172.__r_.__value_.__r.__words[2]);
        else
          v619 = v1172.__r_.__value_.__l.__size_;
        std::string::append(a1, (const std::string::value_type *)v618, v619);
        if (SHIBYTE(v1172.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v1172.__r_.__value_.__l.__data_);
        if (SHIBYTE(v1171.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v1171.__r_.__value_.__l.__data_);
        if (SHIBYTE(v1166.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v1166.__r_.__value_.__l.__data_);
        if (SHIBYTE(v1170.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v1170.__r_.__value_.__l.__data_);
        if (SHIBYTE(v1169.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v1169.__r_.__value_.__l.__data_);
        if (SHIBYTE(v1176.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v1176.__r_.__value_.__l.__data_);
        if (SHIBYTE(v1168.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v1168.__r_.__value_.__l.__data_);
        if (SHIBYTE(v1167.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v1167.__r_.__value_.__l.__data_);
        ++v601;
      }
      while (v18 != v601);
      std::to_string(&v1167, 3u);
      v620 = std::string::insert(&v1167, 0, "wireParam (micSelectCoordinator ", 0x20uLL);
      v621 = *(_OWORD *)&v620->__r_.__value_.__l.__data_;
      v1168.__r_.__value_.__r.__words[2] = v620->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v1168.__r_.__value_.__l.__data_ = v621;
      v620->__r_.__value_.__l.__size_ = 0;
      v620->__r_.__value_.__r.__words[2] = 0;
      v620->__r_.__value_.__r.__words[0] = 0;
      v622 = std::string::append(&v1168, " 0 0) (", 7uLL);
      v623 = *(_OWORD *)&v622->__r_.__value_.__l.__data_;
      v1176.__r_.__value_.__r.__words[2] = v622->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v1176.__r_.__value_.__l.__data_ = v623;
      v622->__r_.__value_.__l.__size_ = 0;
      v622->__r_.__value_.__r.__words[2] = 0;
      v622->__r_.__value_.__r.__words[0] = 0;
      if ((v1177.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v624 = &v1177;
      else
        v624 = (std::string *)v1177.__r_.__value_.__r.__words[0];
      if ((v1177.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v625 = HIBYTE(v1177.__r_.__value_.__r.__words[2]);
      else
        v625 = v1177.__r_.__value_.__l.__size_;
      v626 = std::string::append(&v1176, (const std::string::value_type *)v624, v625);
      v627 = *(_OWORD *)&v626->__r_.__value_.__l.__data_;
      v1169.__r_.__value_.__r.__words[2] = v626->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v1169.__r_.__value_.__l.__data_ = v627;
      v626->__r_.__value_.__l.__size_ = 0;
      v626->__r_.__value_.__r.__words[2] = 0;
      v626->__r_.__value_.__r.__words[0] = 0;
      v628 = std::string::append(&v1169, " ", 1uLL);
      v629 = *(_OWORD *)&v628->__r_.__value_.__l.__data_;
      v1170.__r_.__value_.__r.__words[2] = v628->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v1170.__r_.__value_.__l.__data_ = v629;
      v628->__r_.__value_.__l.__size_ = 0;
      v628->__r_.__value_.__r.__words[2] = 0;
      v628->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v1166, 4u);
      if ((v1166.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v630 = &v1166;
      else
        v630 = (std::string *)v1166.__r_.__value_.__r.__words[0];
      if ((v1166.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v631 = HIBYTE(v1166.__r_.__value_.__r.__words[2]);
      else
        v631 = v1166.__r_.__value_.__l.__size_;
      v632 = std::string::append(&v1170, (const std::string::value_type *)v630, v631);
      v633 = *(_OWORD *)&v632->__r_.__value_.__l.__data_;
      v1171.__r_.__value_.__r.__words[2] = v632->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v1171.__r_.__value_.__l.__data_ = v633;
      v632->__r_.__value_.__l.__size_ = 0;
      v632->__r_.__value_.__r.__words[2] = 0;
      v632->__r_.__value_.__r.__words[0] = 0;
      v634 = std::string::append(&v1171, ") true\n", 7uLL);
      v635 = *(_OWORD *)&v634->__r_.__value_.__l.__data_;
      v1172.__r_.__value_.__r.__words[2] = v634->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v1172.__r_.__value_.__l.__data_ = v635;
      v634->__r_.__value_.__l.__size_ = 0;
      v634->__r_.__value_.__r.__words[2] = 0;
      v634->__r_.__value_.__r.__words[0] = 0;
      if ((v1172.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v636 = &v1172;
      else
        v636 = (std::string *)v1172.__r_.__value_.__r.__words[0];
      if ((v1172.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v637 = HIBYTE(v1172.__r_.__value_.__r.__words[2]);
      else
        v637 = v1172.__r_.__value_.__l.__size_;
      std::string::append(a1, (const std::string::value_type *)v636, v637);
      if (SHIBYTE(v1172.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v1172.__r_.__value_.__l.__data_);
      if (SHIBYTE(v1171.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v1171.__r_.__value_.__l.__data_);
      if (SHIBYTE(v1166.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v1166.__r_.__value_.__l.__data_);
      if (SHIBYTE(v1170.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v1170.__r_.__value_.__l.__data_);
      if (SHIBYTE(v1169.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v1169.__r_.__value_.__l.__data_);
      if (SHIBYTE(v1176.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v1176.__r_.__value_.__l.__data_);
      if (SHIBYTE(v1168.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v1168.__r_.__value_.__l.__data_);
      if (SHIBYTE(v1167.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v1167.__r_.__value_.__l.__data_);
      std::to_string(&v1167, v18 + 2);
      v638 = std::string::insert(&v1167, 0, "wireParam (micSelectCoordinator ", 0x20uLL);
      v639 = *(_OWORD *)&v638->__r_.__value_.__l.__data_;
      v1168.__r_.__value_.__r.__words[2] = v638->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v1168.__r_.__value_.__l.__data_ = v639;
      v638->__r_.__value_.__l.__size_ = 0;
      v638->__r_.__value_.__r.__words[2] = 0;
      v638->__r_.__value_.__r.__words[0] = 0;
      v640 = std::string::append(&v1168, " 0 0) (", 7uLL);
      v641 = *(_OWORD *)&v640->__r_.__value_.__l.__data_;
      v1176.__r_.__value_.__r.__words[2] = v640->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v1176.__r_.__value_.__l.__data_ = v641;
      v640->__r_.__value_.__l.__size_ = 0;
      v640->__r_.__value_.__r.__words[2] = 0;
      v640->__r_.__value_.__r.__words[0] = 0;
      if ((v1177.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v642 = &v1177;
      else
        v642 = (std::string *)v1177.__r_.__value_.__r.__words[0];
      if ((v1177.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v643 = HIBYTE(v1177.__r_.__value_.__r.__words[2]);
      else
        v643 = v1177.__r_.__value_.__l.__size_;
      v644 = std::string::append(&v1176, (const std::string::value_type *)v642, v643);
      v645 = *(_OWORD *)&v644->__r_.__value_.__l.__data_;
      v1169.__r_.__value_.__r.__words[2] = v644->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v1169.__r_.__value_.__l.__data_ = v645;
      v644->__r_.__value_.__l.__size_ = 0;
      v644->__r_.__value_.__r.__words[2] = 0;
      v644->__r_.__value_.__r.__words[0] = 0;
      v646 = std::string::append(&v1169, " ", 1uLL);
      v647 = *(_OWORD *)&v646->__r_.__value_.__l.__data_;
      v1170.__r_.__value_.__r.__words[2] = v646->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v1170.__r_.__value_.__l.__data_ = v647;
      v646->__r_.__value_.__l.__size_ = 0;
      v646->__r_.__value_.__r.__words[2] = 0;
      v646->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v1166, 5u);
      if ((v1166.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v648 = &v1166;
      else
        v648 = (std::string *)v1166.__r_.__value_.__r.__words[0];
      if ((v1166.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v649 = HIBYTE(v1166.__r_.__value_.__r.__words[2]);
      else
        v649 = v1166.__r_.__value_.__l.__size_;
      v650 = std::string::append(&v1170, (const std::string::value_type *)v648, v649);
      v651 = *(_OWORD *)&v650->__r_.__value_.__l.__data_;
      v1171.__r_.__value_.__r.__words[2] = v650->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v1171.__r_.__value_.__l.__data_ = v651;
      v650->__r_.__value_.__l.__size_ = 0;
      v650->__r_.__value_.__r.__words[2] = 0;
      v650->__r_.__value_.__r.__words[0] = 0;
      v652 = std::string::append(&v1171, ") true\n", 7uLL);
      v653 = *(_OWORD *)&v652->__r_.__value_.__l.__data_;
      v1172.__r_.__value_.__r.__words[2] = v652->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v1172.__r_.__value_.__l.__data_ = v653;
      v652->__r_.__value_.__l.__size_ = 0;
      v652->__r_.__value_.__r.__words[2] = 0;
      v652->__r_.__value_.__r.__words[0] = 0;
      if ((v1172.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v654 = &v1172;
      else
        v654 = (std::string *)v1172.__r_.__value_.__r.__words[0];
      if ((v1172.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v655 = HIBYTE(v1172.__r_.__value_.__r.__words[2]);
      else
        v655 = v1172.__r_.__value_.__l.__size_;
      std::string::append(a1, (const std::string::value_type *)v654, v655);
      if (SHIBYTE(v1172.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v1172.__r_.__value_.__l.__data_);
      if (SHIBYTE(v1171.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v1171.__r_.__value_.__l.__data_);
      if (SHIBYTE(v1166.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v1166.__r_.__value_.__l.__data_);
      if (SHIBYTE(v1170.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v1170.__r_.__value_.__l.__data_);
      if (SHIBYTE(v1169.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v1169.__r_.__value_.__l.__data_);
      if (SHIBYTE(v1176.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v1176.__r_.__value_.__l.__data_);
      if (SHIBYTE(v1168.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v1168.__r_.__value_.__l.__data_);
      if (SHIBYTE(v1167.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v1167.__r_.__value_.__l.__data_);
      std::to_string(&v1167, 0x19u);
      v656 = std::string::insert(&v1167, 0, "wireGraphParam ", 0xFuLL);
      v657 = *(_OWORD *)&v656->__r_.__value_.__l.__data_;
      v1168.__r_.__value_.__r.__words[2] = v656->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v1168.__r_.__value_.__l.__data_ = v657;
      v656->__r_.__value_.__l.__size_ = 0;
      v656->__r_.__value_.__r.__words[2] = 0;
      v656->__r_.__value_.__r.__words[0] = 0;
      v658 = std::string::append(&v1168, " (", 2uLL);
      v659 = *(_OWORD *)&v658->__r_.__value_.__l.__data_;
      v1176.__r_.__value_.__r.__words[2] = v658->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v1176.__r_.__value_.__l.__data_ = v659;
      v658->__r_.__value_.__l.__size_ = 0;
      v658->__r_.__value_.__r.__words[2] = 0;
      v658->__r_.__value_.__r.__words[0] = 0;
      if ((v1177.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v660 = &v1177;
      else
        v660 = (std::string *)v1177.__r_.__value_.__r.__words[0];
      if ((v1177.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v661 = HIBYTE(v1177.__r_.__value_.__r.__words[2]);
      else
        v661 = v1177.__r_.__value_.__l.__size_;
      v662 = std::string::append(&v1176, (const std::string::value_type *)v660, v661);
      v663 = *(_OWORD *)&v662->__r_.__value_.__l.__data_;
      v1169.__r_.__value_.__r.__words[2] = v662->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v1169.__r_.__value_.__l.__data_ = v663;
      v662->__r_.__value_.__l.__size_ = 0;
      v662->__r_.__value_.__r.__words[2] = 0;
      v662->__r_.__value_.__r.__words[0] = 0;
      v664 = std::string::append(&v1169, " ", 1uLL);
      v665 = *(_OWORD *)&v664->__r_.__value_.__l.__data_;
      v1170.__r_.__value_.__r.__words[2] = v664->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v1170.__r_.__value_.__l.__data_ = v665;
      v664->__r_.__value_.__l.__size_ = 0;
      v664->__r_.__value_.__r.__words[2] = 0;
      v664->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v1166, 0x1Bu);
      if ((v1166.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v666 = &v1166;
      else
        v666 = (std::string *)v1166.__r_.__value_.__r.__words[0];
      if ((v1166.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v667 = HIBYTE(v1166.__r_.__value_.__r.__words[2]);
      else
        v667 = v1166.__r_.__value_.__l.__size_;
      v668 = std::string::append(&v1170, (const std::string::value_type *)v666, v667);
      v669 = *(_OWORD *)&v668->__r_.__value_.__l.__data_;
      v1171.__r_.__value_.__r.__words[2] = v668->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v1171.__r_.__value_.__l.__data_ = v669;
      v668->__r_.__value_.__l.__size_ = 0;
      v668->__r_.__value_.__r.__words[2] = 0;
      v668->__r_.__value_.__r.__words[0] = 0;
      v670 = std::string::append(&v1171, " 0 0)\n", 6uLL);
      v671 = *(_OWORD *)&v670->__r_.__value_.__l.__data_;
      v1172.__r_.__value_.__r.__words[2] = v670->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v1172.__r_.__value_.__l.__data_ = v671;
      v670->__r_.__value_.__l.__size_ = 0;
      v670->__r_.__value_.__r.__words[2] = 0;
      v670->__r_.__value_.__r.__words[0] = 0;
      if ((v1172.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v672 = &v1172;
      else
        v672 = (std::string *)v1172.__r_.__value_.__r.__words[0];
      if ((v1172.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v673 = HIBYTE(v1172.__r_.__value_.__r.__words[2]);
      else
        v673 = v1172.__r_.__value_.__l.__size_;
      std::string::append(&__x, (const std::string::value_type *)v672, v673);
      if (SHIBYTE(v1172.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v1172.__r_.__value_.__l.__data_);
      if (SHIBYTE(v1171.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v1171.__r_.__value_.__l.__data_);
      if (SHIBYTE(v1166.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v1166.__r_.__value_.__l.__data_);
      if (SHIBYTE(v1170.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v1170.__r_.__value_.__l.__data_);
      if (SHIBYTE(v1169.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v1169.__r_.__value_.__l.__data_);
      if (SHIBYTE(v1176.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v1176.__r_.__value_.__l.__data_);
      if (SHIBYTE(v1168.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v1168.__r_.__value_.__l.__data_);
      if (SHIBYTE(v1167.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v1167.__r_.__value_.__l.__data_);
      std::to_string(&v1167, 0x18u);
      v674 = std::string::insert(&v1167, 0, "wireGraphParam ", 0xFuLL);
      v675 = *(_OWORD *)&v674->__r_.__value_.__l.__data_;
      v1168.__r_.__value_.__r.__words[2] = v674->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v1168.__r_.__value_.__l.__data_ = v675;
      v674->__r_.__value_.__l.__size_ = 0;
      v674->__r_.__value_.__r.__words[2] = 0;
      v674->__r_.__value_.__r.__words[0] = 0;
      v676 = std::string::append(&v1168, " (", 2uLL);
      v677 = *(_OWORD *)&v676->__r_.__value_.__l.__data_;
      v1176.__r_.__value_.__r.__words[2] = v676->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v1176.__r_.__value_.__l.__data_ = v677;
      v676->__r_.__value_.__l.__size_ = 0;
      v676->__r_.__value_.__r.__words[2] = 0;
      v676->__r_.__value_.__r.__words[0] = 0;
      if ((v1177.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v678 = &v1177;
      else
        v678 = (std::string *)v1177.__r_.__value_.__r.__words[0];
      if ((v1177.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v679 = HIBYTE(v1177.__r_.__value_.__r.__words[2]);
      else
        v679 = v1177.__r_.__value_.__l.__size_;
      v680 = std::string::append(&v1176, (const std::string::value_type *)v678, v679);
      v681 = *(_OWORD *)&v680->__r_.__value_.__l.__data_;
      v1169.__r_.__value_.__r.__words[2] = v680->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v1169.__r_.__value_.__l.__data_ = v681;
      v680->__r_.__value_.__l.__size_ = 0;
      v680->__r_.__value_.__r.__words[2] = 0;
      v680->__r_.__value_.__r.__words[0] = 0;
      v682 = std::string::append(&v1169, " ", 1uLL);
      v683 = *(_OWORD *)&v682->__r_.__value_.__l.__data_;
      v1170.__r_.__value_.__r.__words[2] = v682->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v1170.__r_.__value_.__l.__data_ = v683;
      v682->__r_.__value_.__l.__size_ = 0;
      v682->__r_.__value_.__r.__words[2] = 0;
      v682->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v1166, 0x1Au);
      if ((v1166.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v684 = &v1166;
      else
        v684 = (std::string *)v1166.__r_.__value_.__r.__words[0];
      if ((v1166.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v685 = HIBYTE(v1166.__r_.__value_.__r.__words[2]);
      else
        v685 = v1166.__r_.__value_.__l.__size_;
      v686 = std::string::append(&v1170, (const std::string::value_type *)v684, v685);
      v687 = *(_OWORD *)&v686->__r_.__value_.__l.__data_;
      v1171.__r_.__value_.__r.__words[2] = v686->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v1171.__r_.__value_.__l.__data_ = v687;
      v686->__r_.__value_.__l.__size_ = 0;
      v686->__r_.__value_.__r.__words[2] = 0;
      v686->__r_.__value_.__r.__words[0] = 0;
      v688 = std::string::append(&v1171, " 0 0)\n", 6uLL);
      v689 = *(_OWORD *)&v688->__r_.__value_.__l.__data_;
      v1172.__r_.__value_.__r.__words[2] = v688->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v1172.__r_.__value_.__l.__data_ = v689;
      v688->__r_.__value_.__l.__size_ = 0;
      v688->__r_.__value_.__r.__words[2] = 0;
      v688->__r_.__value_.__r.__words[0] = 0;
      if ((v1172.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v690 = &v1172;
      else
        v690 = (std::string *)v1172.__r_.__value_.__r.__words[0];
      if ((v1172.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v691 = HIBYTE(v1172.__r_.__value_.__r.__words[2]);
      else
        v691 = v1172.__r_.__value_.__l.__size_;
      std::string::append(&__x, (const std::string::value_type *)v690, v691);
      if (SHIBYTE(v1172.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v1172.__r_.__value_.__l.__data_);
      if (SHIBYTE(v1171.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v1171.__r_.__value_.__l.__data_);
      if (SHIBYTE(v1166.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v1166.__r_.__value_.__l.__data_);
      if (SHIBYTE(v1170.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v1170.__r_.__value_.__l.__data_);
      if (SHIBYTE(v1169.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v1169.__r_.__value_.__l.__data_);
      if (SHIBYTE(v1176.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v1176.__r_.__value_.__l.__data_);
      if (SHIBYTE(v1168.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v1168.__r_.__value_.__l.__data_);
      if (SHIBYTE(v1167.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v1167.__r_.__value_.__l.__data_);
      std::to_string(&v1167, 0x17u);
      v692 = std::string::insert(&v1167, 0, "wireGraphParam ", 0xFuLL);
      v693 = *(_OWORD *)&v692->__r_.__value_.__l.__data_;
      v1168.__r_.__value_.__r.__words[2] = v692->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v1168.__r_.__value_.__l.__data_ = v693;
      v692->__r_.__value_.__l.__size_ = 0;
      v692->__r_.__value_.__r.__words[2] = 0;
      v692->__r_.__value_.__r.__words[0] = 0;
      v694 = std::string::append(&v1168, " (", 2uLL);
      v695 = *(_OWORD *)&v694->__r_.__value_.__l.__data_;
      v1176.__r_.__value_.__r.__words[2] = v694->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v1176.__r_.__value_.__l.__data_ = v695;
      v694->__r_.__value_.__l.__size_ = 0;
      v694->__r_.__value_.__r.__words[2] = 0;
      v694->__r_.__value_.__r.__words[0] = 0;
      if ((v1177.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v696 = &v1177;
      else
        v696 = (std::string *)v1177.__r_.__value_.__r.__words[0];
      if ((v1177.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v697 = HIBYTE(v1177.__r_.__value_.__r.__words[2]);
      else
        v697 = v1177.__r_.__value_.__l.__size_;
      v698 = std::string::append(&v1176, (const std::string::value_type *)v696, v697);
      v699 = *(_OWORD *)&v698->__r_.__value_.__l.__data_;
      v1169.__r_.__value_.__r.__words[2] = v698->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v1169.__r_.__value_.__l.__data_ = v699;
      v698->__r_.__value_.__l.__size_ = 0;
      v698->__r_.__value_.__r.__words[2] = 0;
      v698->__r_.__value_.__r.__words[0] = 0;
      v700 = std::string::append(&v1169, " ", 1uLL);
      v701 = *(_OWORD *)&v700->__r_.__value_.__l.__data_;
      v1170.__r_.__value_.__r.__words[2] = v700->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v1170.__r_.__value_.__l.__data_ = v701;
      v700->__r_.__value_.__l.__size_ = 0;
      v700->__r_.__value_.__r.__words[2] = 0;
      v700->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v1166, 0x19u);
      if ((v1166.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v702 = &v1166;
      else
        v702 = (std::string *)v1166.__r_.__value_.__r.__words[0];
      if ((v1166.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v703 = HIBYTE(v1166.__r_.__value_.__r.__words[2]);
      else
        v703 = v1166.__r_.__value_.__l.__size_;
      v704 = std::string::append(&v1170, (const std::string::value_type *)v702, v703);
      v705 = *(_OWORD *)&v704->__r_.__value_.__l.__data_;
      v1171.__r_.__value_.__r.__words[2] = v704->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v1171.__r_.__value_.__l.__data_ = v705;
      v704->__r_.__value_.__l.__size_ = 0;
      v704->__r_.__value_.__r.__words[2] = 0;
      v704->__r_.__value_.__r.__words[0] = 0;
      v706 = std::string::append(&v1171, " 0 0)\n", 6uLL);
      v707 = *(_OWORD *)&v706->__r_.__value_.__l.__data_;
      v1172.__r_.__value_.__r.__words[2] = v706->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v1172.__r_.__value_.__l.__data_ = v707;
      v706->__r_.__value_.__l.__size_ = 0;
      v706->__r_.__value_.__r.__words[2] = 0;
      v706->__r_.__value_.__r.__words[0] = 0;
      if ((v1172.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v708 = &v1172;
      else
        v708 = (std::string *)v1172.__r_.__value_.__r.__words[0];
      if ((v1172.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v709 = HIBYTE(v1172.__r_.__value_.__r.__words[2]);
      else
        v709 = v1172.__r_.__value_.__l.__size_;
      std::string::append(&__x, (const std::string::value_type *)v708, v709);
      if (SHIBYTE(v1172.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v1172.__r_.__value_.__l.__data_);
      if (SHIBYTE(v1171.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v1171.__r_.__value_.__l.__data_);
      if (SHIBYTE(v1166.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v1166.__r_.__value_.__l.__data_);
      if (SHIBYTE(v1170.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v1170.__r_.__value_.__l.__data_);
      if (SHIBYTE(v1169.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v1169.__r_.__value_.__l.__data_);
      if (SHIBYTE(v1176.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v1176.__r_.__value_.__l.__data_);
      if (SHIBYTE(v1168.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v1168.__r_.__value_.__l.__data_);
      if (SHIBYTE(v1167.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v1167.__r_.__value_.__l.__data_);
      std::to_string(&v1167, 0x16u);
      v710 = std::string::insert(&v1167, 0, "wireGraphParam ", 0xFuLL);
      v711 = *(_OWORD *)&v710->__r_.__value_.__l.__data_;
      v1168.__r_.__value_.__r.__words[2] = v710->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v1168.__r_.__value_.__l.__data_ = v711;
      v710->__r_.__value_.__l.__size_ = 0;
      v710->__r_.__value_.__r.__words[2] = 0;
      v710->__r_.__value_.__r.__words[0] = 0;
      v712 = std::string::append(&v1168, " (", 2uLL);
      v713 = *(_OWORD *)&v712->__r_.__value_.__l.__data_;
      v1176.__r_.__value_.__r.__words[2] = v712->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v1176.__r_.__value_.__l.__data_ = v713;
      v712->__r_.__value_.__l.__size_ = 0;
      v712->__r_.__value_.__r.__words[2] = 0;
      v712->__r_.__value_.__r.__words[0] = 0;
      if ((v1177.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v714 = &v1177;
      else
        v714 = (std::string *)v1177.__r_.__value_.__r.__words[0];
      if ((v1177.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v715 = HIBYTE(v1177.__r_.__value_.__r.__words[2]);
      else
        v715 = v1177.__r_.__value_.__l.__size_;
      v716 = std::string::append(&v1176, (const std::string::value_type *)v714, v715);
      v717 = *(_OWORD *)&v716->__r_.__value_.__l.__data_;
      v1169.__r_.__value_.__r.__words[2] = v716->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v1169.__r_.__value_.__l.__data_ = v717;
      v716->__r_.__value_.__l.__size_ = 0;
      v716->__r_.__value_.__r.__words[2] = 0;
      v716->__r_.__value_.__r.__words[0] = 0;
      v718 = std::string::append(&v1169, " ", 1uLL);
      v719 = *(_OWORD *)&v718->__r_.__value_.__l.__data_;
      v1170.__r_.__value_.__r.__words[2] = v718->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v1170.__r_.__value_.__l.__data_ = v719;
      v718->__r_.__value_.__l.__size_ = 0;
      v718->__r_.__value_.__r.__words[2] = 0;
      v718->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v1166, 0x17u);
      if ((v1166.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v720 = &v1166;
      else
        v720 = (std::string *)v1166.__r_.__value_.__r.__words[0];
      if ((v1166.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v721 = HIBYTE(v1166.__r_.__value_.__r.__words[2]);
      else
        v721 = v1166.__r_.__value_.__l.__size_;
      v722 = std::string::append(&v1170, (const std::string::value_type *)v720, v721);
      v723 = *(_OWORD *)&v722->__r_.__value_.__l.__data_;
      v1171.__r_.__value_.__r.__words[2] = v722->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v1171.__r_.__value_.__l.__data_ = v723;
      v722->__r_.__value_.__l.__size_ = 0;
      v722->__r_.__value_.__r.__words[2] = 0;
      v722->__r_.__value_.__r.__words[0] = 0;
      v724 = std::string::append(&v1171, " 0 0)\n", 6uLL);
      v725 = *(_OWORD *)&v724->__r_.__value_.__l.__data_;
      v1172.__r_.__value_.__r.__words[2] = v724->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v1172.__r_.__value_.__l.__data_ = v725;
      v724->__r_.__value_.__l.__size_ = 0;
      v724->__r_.__value_.__r.__words[2] = 0;
      v724->__r_.__value_.__r.__words[0] = 0;
      if ((v1172.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v726 = &v1172;
      else
        v726 = (std::string *)v1172.__r_.__value_.__r.__words[0];
      if ((v1172.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v727 = HIBYTE(v1172.__r_.__value_.__r.__words[2]);
      else
        v727 = v1172.__r_.__value_.__l.__size_;
      std::string::append(&__x, (const std::string::value_type *)v726, v727);
      if (SHIBYTE(v1172.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v1172.__r_.__value_.__l.__data_);
      if (SHIBYTE(v1171.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v1171.__r_.__value_.__l.__data_);
      if (SHIBYTE(v1166.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v1166.__r_.__value_.__l.__data_);
      if (SHIBYTE(v1170.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v1170.__r_.__value_.__l.__data_);
      if (SHIBYTE(v1169.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v1169.__r_.__value_.__l.__data_);
      if (SHIBYTE(v1176.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v1176.__r_.__value_.__l.__data_);
      if (SHIBYTE(v1168.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v1168.__r_.__value_.__l.__data_);
      if (SHIBYTE(v1167.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v1167.__r_.__value_.__l.__data_);
      std::to_string(&v1167, 0x21u);
      v728 = std::string::insert(&v1167, 0, "wireGraphParam ", 0xFuLL);
      v729 = *(_OWORD *)&v728->__r_.__value_.__l.__data_;
      v1168.__r_.__value_.__r.__words[2] = v728->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v1168.__r_.__value_.__l.__data_ = v729;
      v728->__r_.__value_.__l.__size_ = 0;
      v728->__r_.__value_.__r.__words[2] = 0;
      v728->__r_.__value_.__r.__words[0] = 0;
      v730 = std::string::append(&v1168, " (", 2uLL);
      v731 = *(_OWORD *)&v730->__r_.__value_.__l.__data_;
      v1176.__r_.__value_.__r.__words[2] = v730->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v1176.__r_.__value_.__l.__data_ = v731;
      v730->__r_.__value_.__l.__size_ = 0;
      v730->__r_.__value_.__r.__words[2] = 0;
      v730->__r_.__value_.__r.__words[0] = 0;
      if ((v1177.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v732 = &v1177;
      else
        v732 = (std::string *)v1177.__r_.__value_.__r.__words[0];
      if ((v1177.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v733 = HIBYTE(v1177.__r_.__value_.__r.__words[2]);
      else
        v733 = v1177.__r_.__value_.__l.__size_;
      v734 = std::string::append(&v1176, (const std::string::value_type *)v732, v733);
      v735 = *(_OWORD *)&v734->__r_.__value_.__l.__data_;
      v1169.__r_.__value_.__r.__words[2] = v734->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v1169.__r_.__value_.__l.__data_ = v735;
      v734->__r_.__value_.__l.__size_ = 0;
      v734->__r_.__value_.__r.__words[2] = 0;
      v734->__r_.__value_.__r.__words[0] = 0;
      v736 = std::string::append(&v1169, " ", 1uLL);
      v737 = *(_OWORD *)&v736->__r_.__value_.__l.__data_;
      v1170.__r_.__value_.__r.__words[2] = v736->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v1170.__r_.__value_.__l.__data_ = v737;
      v736->__r_.__value_.__l.__size_ = 0;
      v736->__r_.__value_.__r.__words[2] = 0;
      v736->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v1166, 0x1Du);
      if ((v1166.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v738 = &v1166;
      else
        v738 = (std::string *)v1166.__r_.__value_.__r.__words[0];
      if ((v1166.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v739 = HIBYTE(v1166.__r_.__value_.__r.__words[2]);
      else
        v739 = v1166.__r_.__value_.__l.__size_;
      v740 = std::string::append(&v1170, (const std::string::value_type *)v738, v739);
      v741 = *(_OWORD *)&v740->__r_.__value_.__l.__data_;
      v1171.__r_.__value_.__r.__words[2] = v740->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v1171.__r_.__value_.__l.__data_ = v741;
      v740->__r_.__value_.__l.__size_ = 0;
      v740->__r_.__value_.__r.__words[2] = 0;
      v740->__r_.__value_.__r.__words[0] = 0;
      v742 = std::string::append(&v1171, " 0 0)\n", 6uLL);
      v743 = *(_OWORD *)&v742->__r_.__value_.__l.__data_;
      v1172.__r_.__value_.__r.__words[2] = v742->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v1172.__r_.__value_.__l.__data_ = v743;
      v742->__r_.__value_.__l.__size_ = 0;
      v742->__r_.__value_.__r.__words[2] = 0;
      v742->__r_.__value_.__r.__words[0] = 0;
      if ((v1172.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v744 = &v1172;
      else
        v744 = (std::string *)v1172.__r_.__value_.__r.__words[0];
      if ((v1172.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v745 = HIBYTE(v1172.__r_.__value_.__r.__words[2]);
      else
        v745 = v1172.__r_.__value_.__l.__size_;
      std::string::append(&__x, (const std::string::value_type *)v744, v745);
      if (SHIBYTE(v1172.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v1172.__r_.__value_.__l.__data_);
      if (SHIBYTE(v1171.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v1171.__r_.__value_.__l.__data_);
      if (SHIBYTE(v1166.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v1166.__r_.__value_.__l.__data_);
      if (SHIBYTE(v1170.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v1170.__r_.__value_.__l.__data_);
      if (SHIBYTE(v1169.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v1169.__r_.__value_.__l.__data_);
      if (SHIBYTE(v1176.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v1176.__r_.__value_.__l.__data_);
      if (SHIBYTE(v1168.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v1168.__r_.__value_.__l.__data_);
      if (SHIBYTE(v1167.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v1167.__r_.__value_.__l.__data_);
      std::to_string(&v1167, 0x22u);
      v746 = std::string::insert(&v1167, 0, "wireGraphParam ", 0xFuLL);
      v747 = *(_OWORD *)&v746->__r_.__value_.__l.__data_;
      v1168.__r_.__value_.__r.__words[2] = v746->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v1168.__r_.__value_.__l.__data_ = v747;
      v746->__r_.__value_.__l.__size_ = 0;
      v746->__r_.__value_.__r.__words[2] = 0;
      v746->__r_.__value_.__r.__words[0] = 0;
      v748 = std::string::append(&v1168, " (", 2uLL);
      v749 = *(_OWORD *)&v748->__r_.__value_.__l.__data_;
      v1176.__r_.__value_.__r.__words[2] = v748->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v1176.__r_.__value_.__l.__data_ = v749;
      v748->__r_.__value_.__l.__size_ = 0;
      v748->__r_.__value_.__r.__words[2] = 0;
      v748->__r_.__value_.__r.__words[0] = 0;
      if ((v1177.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v750 = &v1177;
      else
        v750 = (std::string *)v1177.__r_.__value_.__r.__words[0];
      if ((v1177.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v751 = HIBYTE(v1177.__r_.__value_.__r.__words[2]);
      else
        v751 = v1177.__r_.__value_.__l.__size_;
      v752 = std::string::append(&v1176, (const std::string::value_type *)v750, v751);
      v753 = *(_OWORD *)&v752->__r_.__value_.__l.__data_;
      v1169.__r_.__value_.__r.__words[2] = v752->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v1169.__r_.__value_.__l.__data_ = v753;
      v752->__r_.__value_.__l.__size_ = 0;
      v752->__r_.__value_.__r.__words[2] = 0;
      v752->__r_.__value_.__r.__words[0] = 0;
      v754 = std::string::append(&v1169, " ", 1uLL);
      v755 = *(_OWORD *)&v754->__r_.__value_.__l.__data_;
      v1170.__r_.__value_.__r.__words[2] = v754->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v1170.__r_.__value_.__l.__data_ = v755;
      v754->__r_.__value_.__l.__size_ = 0;
      v754->__r_.__value_.__r.__words[2] = 0;
      v754->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v1166, 0x1Eu);
      if ((v1166.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v756 = &v1166;
      else
        v756 = (std::string *)v1166.__r_.__value_.__r.__words[0];
      if ((v1166.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v757 = HIBYTE(v1166.__r_.__value_.__r.__words[2]);
      else
        v757 = v1166.__r_.__value_.__l.__size_;
      v758 = std::string::append(&v1170, (const std::string::value_type *)v756, v757);
      v759 = *(_OWORD *)&v758->__r_.__value_.__l.__data_;
      v1171.__r_.__value_.__r.__words[2] = v758->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v1171.__r_.__value_.__l.__data_ = v759;
      v758->__r_.__value_.__l.__size_ = 0;
      v758->__r_.__value_.__r.__words[2] = 0;
      v758->__r_.__value_.__r.__words[0] = 0;
      v760 = std::string::append(&v1171, " 0 0)\n", 6uLL);
      v761 = *(_OWORD *)&v760->__r_.__value_.__l.__data_;
      v1172.__r_.__value_.__r.__words[2] = v760->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v1172.__r_.__value_.__l.__data_ = v761;
      v760->__r_.__value_.__l.__size_ = 0;
      v760->__r_.__value_.__r.__words[2] = 0;
      v760->__r_.__value_.__r.__words[0] = 0;
      if ((v1172.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v762 = &v1172;
      else
        v762 = (std::string *)v1172.__r_.__value_.__r.__words[0];
      if ((v1172.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v763 = HIBYTE(v1172.__r_.__value_.__r.__words[2]);
      else
        v763 = v1172.__r_.__value_.__l.__size_;
      std::string::append(&__x, (const std::string::value_type *)v762, v763);
      if (SHIBYTE(v1172.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v1172.__r_.__value_.__l.__data_);
      if (SHIBYTE(v1171.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v1171.__r_.__value_.__l.__data_);
      if (SHIBYTE(v1166.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v1166.__r_.__value_.__l.__data_);
      if (SHIBYTE(v1170.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v1170.__r_.__value_.__l.__data_);
      if (SHIBYTE(v1169.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v1169.__r_.__value_.__l.__data_);
      if (SHIBYTE(v1176.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v1176.__r_.__value_.__l.__data_);
      if (SHIBYTE(v1168.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v1168.__r_.__value_.__l.__data_);
      if (SHIBYTE(v1167.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v1167.__r_.__value_.__l.__data_);
      std::to_string(&v1167, 0x23u);
      v764 = std::string::insert(&v1167, 0, "wireGraphParam ", 0xFuLL);
      v765 = *(_OWORD *)&v764->__r_.__value_.__l.__data_;
      v1168.__r_.__value_.__r.__words[2] = v764->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v1168.__r_.__value_.__l.__data_ = v765;
      v764->__r_.__value_.__l.__size_ = 0;
      v764->__r_.__value_.__r.__words[2] = 0;
      v764->__r_.__value_.__r.__words[0] = 0;
      v766 = std::string::append(&v1168, " (", 2uLL);
      v767 = *(_OWORD *)&v766->__r_.__value_.__l.__data_;
      v1176.__r_.__value_.__r.__words[2] = v766->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v1176.__r_.__value_.__l.__data_ = v767;
      v766->__r_.__value_.__l.__size_ = 0;
      v766->__r_.__value_.__r.__words[2] = 0;
      v766->__r_.__value_.__r.__words[0] = 0;
      if ((v1177.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v768 = &v1177;
      else
        v768 = (std::string *)v1177.__r_.__value_.__r.__words[0];
      if ((v1177.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v769 = HIBYTE(v1177.__r_.__value_.__r.__words[2]);
      else
        v769 = v1177.__r_.__value_.__l.__size_;
      v770 = std::string::append(&v1176, (const std::string::value_type *)v768, v769);
      v771 = *(_OWORD *)&v770->__r_.__value_.__l.__data_;
      v1169.__r_.__value_.__r.__words[2] = v770->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v1169.__r_.__value_.__l.__data_ = v771;
      v770->__r_.__value_.__l.__size_ = 0;
      v770->__r_.__value_.__r.__words[2] = 0;
      v770->__r_.__value_.__r.__words[0] = 0;
      v772 = std::string::append(&v1169, " ", 1uLL);
      v773 = *(_OWORD *)&v772->__r_.__value_.__l.__data_;
      v1170.__r_.__value_.__r.__words[2] = v772->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v1170.__r_.__value_.__l.__data_ = v773;
      v772->__r_.__value_.__l.__size_ = 0;
      v772->__r_.__value_.__r.__words[2] = 0;
      v772->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v1166, 0x1Fu);
      if ((v1166.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v774 = &v1166;
      else
        v774 = (std::string *)v1166.__r_.__value_.__r.__words[0];
      if ((v1166.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v775 = HIBYTE(v1166.__r_.__value_.__r.__words[2]);
      else
        v775 = v1166.__r_.__value_.__l.__size_;
      v776 = std::string::append(&v1170, (const std::string::value_type *)v774, v775);
      v777 = *(_OWORD *)&v776->__r_.__value_.__l.__data_;
      v1171.__r_.__value_.__r.__words[2] = v776->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v1171.__r_.__value_.__l.__data_ = v777;
      v776->__r_.__value_.__l.__size_ = 0;
      v776->__r_.__value_.__r.__words[2] = 0;
      v776->__r_.__value_.__r.__words[0] = 0;
      v778 = std::string::append(&v1171, " 0 0)\n", 6uLL);
      v779 = *(_OWORD *)&v778->__r_.__value_.__l.__data_;
      v1172.__r_.__value_.__r.__words[2] = v778->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v1172.__r_.__value_.__l.__data_ = v779;
      v778->__r_.__value_.__l.__size_ = 0;
      v778->__r_.__value_.__r.__words[2] = 0;
      v778->__r_.__value_.__r.__words[0] = 0;
      if ((v1172.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v780 = &v1172;
      else
        v780 = (std::string *)v1172.__r_.__value_.__r.__words[0];
      if ((v1172.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v781 = HIBYTE(v1172.__r_.__value_.__r.__words[2]);
      else
        v781 = v1172.__r_.__value_.__l.__size_;
      std::string::append(&__x, (const std::string::value_type *)v780, v781);
      if (SHIBYTE(v1172.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v1172.__r_.__value_.__l.__data_);
      if (SHIBYTE(v1171.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v1171.__r_.__value_.__l.__data_);
      if (SHIBYTE(v1166.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v1166.__r_.__value_.__l.__data_);
      if (SHIBYTE(v1170.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v1170.__r_.__value_.__l.__data_);
      if (SHIBYTE(v1169.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v1169.__r_.__value_.__l.__data_);
      if (SHIBYTE(v1176.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v1176.__r_.__value_.__l.__data_);
      if (SHIBYTE(v1168.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v1168.__r_.__value_.__l.__data_);
      if (SHIBYTE(v1167.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v1167.__r_.__value_.__l.__data_);
      std::to_string(&v1167, 0x24u);
      v782 = std::string::insert(&v1167, 0, "wireGraphParam ", 0xFuLL);
      v783 = *(_OWORD *)&v782->__r_.__value_.__l.__data_;
      v1168.__r_.__value_.__r.__words[2] = v782->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v1168.__r_.__value_.__l.__data_ = v783;
      v782->__r_.__value_.__l.__size_ = 0;
      v782->__r_.__value_.__r.__words[2] = 0;
      v782->__r_.__value_.__r.__words[0] = 0;
      v784 = std::string::append(&v1168, " (", 2uLL);
      v785 = *(_OWORD *)&v784->__r_.__value_.__l.__data_;
      v1176.__r_.__value_.__r.__words[2] = v784->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v1176.__r_.__value_.__l.__data_ = v785;
      v784->__r_.__value_.__l.__size_ = 0;
      v784->__r_.__value_.__r.__words[2] = 0;
      v784->__r_.__value_.__r.__words[0] = 0;
      if ((v1177.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v786 = &v1177;
      else
        v786 = (std::string *)v1177.__r_.__value_.__r.__words[0];
      if ((v1177.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v787 = HIBYTE(v1177.__r_.__value_.__r.__words[2]);
      else
        v787 = v1177.__r_.__value_.__l.__size_;
      v788 = std::string::append(&v1176, (const std::string::value_type *)v786, v787);
      v789 = *(_OWORD *)&v788->__r_.__value_.__l.__data_;
      v1169.__r_.__value_.__r.__words[2] = v788->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v1169.__r_.__value_.__l.__data_ = v789;
      v788->__r_.__value_.__l.__size_ = 0;
      v788->__r_.__value_.__r.__words[2] = 0;
      v788->__r_.__value_.__r.__words[0] = 0;
      v790 = std::string::append(&v1169, " ", 1uLL);
      v791 = *(_OWORD *)&v790->__r_.__value_.__l.__data_;
      v1170.__r_.__value_.__r.__words[2] = v790->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v1170.__r_.__value_.__l.__data_ = v791;
      v790->__r_.__value_.__l.__size_ = 0;
      v790->__r_.__value_.__r.__words[2] = 0;
      v790->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v1166, 0x20u);
      if ((v1166.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v792 = &v1166;
      else
        v792 = (std::string *)v1166.__r_.__value_.__r.__words[0];
      if ((v1166.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v793 = HIBYTE(v1166.__r_.__value_.__r.__words[2]);
      else
        v793 = v1166.__r_.__value_.__l.__size_;
      v794 = std::string::append(&v1170, (const std::string::value_type *)v792, v793);
      v795 = *(_OWORD *)&v794->__r_.__value_.__l.__data_;
      v1171.__r_.__value_.__r.__words[2] = v794->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v1171.__r_.__value_.__l.__data_ = v795;
      v794->__r_.__value_.__l.__size_ = 0;
      v794->__r_.__value_.__r.__words[2] = 0;
      v794->__r_.__value_.__r.__words[0] = 0;
      v796 = std::string::append(&v1171, " 0 0)\n", 6uLL);
      v797 = *(_OWORD *)&v796->__r_.__value_.__l.__data_;
      v1172.__r_.__value_.__r.__words[2] = v796->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v1172.__r_.__value_.__l.__data_ = v797;
      v796->__r_.__value_.__l.__size_ = 0;
      v796->__r_.__value_.__r.__words[2] = 0;
      v796->__r_.__value_.__r.__words[0] = 0;
      if ((v1172.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v798 = &v1172;
      else
        v798 = (std::string *)v1172.__r_.__value_.__r.__words[0];
      if ((v1172.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v799 = HIBYTE(v1172.__r_.__value_.__r.__words[2]);
      else
        v799 = v1172.__r_.__value_.__l.__size_;
      std::string::append(&__x, (const std::string::value_type *)v798, v799);
      if (SHIBYTE(v1172.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v1172.__r_.__value_.__l.__data_);
      if (SHIBYTE(v1171.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v1171.__r_.__value_.__l.__data_);
      if (SHIBYTE(v1166.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v1166.__r_.__value_.__l.__data_);
      if (SHIBYTE(v1170.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v1170.__r_.__value_.__l.__data_);
      if (SHIBYTE(v1169.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v1169.__r_.__value_.__l.__data_);
      if (SHIBYTE(v1176.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v1176.__r_.__value_.__l.__data_);
      if (SHIBYTE(v1168.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v1168.__r_.__value_.__l.__data_);
      if (SHIBYTE(v1167.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v1167.__r_.__value_.__l.__data_);
      std::to_string(&v1167, 0x25u);
      v800 = std::string::insert(&v1167, 0, "wireGraphParam ", 0xFuLL);
      v801 = *(_OWORD *)&v800->__r_.__value_.__l.__data_;
      v1168.__r_.__value_.__r.__words[2] = v800->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v1168.__r_.__value_.__l.__data_ = v801;
      v800->__r_.__value_.__l.__size_ = 0;
      v800->__r_.__value_.__r.__words[2] = 0;
      v800->__r_.__value_.__r.__words[0] = 0;
      v802 = std::string::append(&v1168, " (", 2uLL);
      v803 = *(_OWORD *)&v802->__r_.__value_.__l.__data_;
      v1176.__r_.__value_.__r.__words[2] = v802->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v1176.__r_.__value_.__l.__data_ = v803;
      v802->__r_.__value_.__l.__size_ = 0;
      v802->__r_.__value_.__r.__words[2] = 0;
      v802->__r_.__value_.__r.__words[0] = 0;
      if ((v1177.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v804 = &v1177;
      else
        v804 = (std::string *)v1177.__r_.__value_.__r.__words[0];
      if ((v1177.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v805 = HIBYTE(v1177.__r_.__value_.__r.__words[2]);
      else
        v805 = v1177.__r_.__value_.__l.__size_;
      v806 = std::string::append(&v1176, (const std::string::value_type *)v804, v805);
      v807 = *(_OWORD *)&v806->__r_.__value_.__l.__data_;
      v1169.__r_.__value_.__r.__words[2] = v806->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v1169.__r_.__value_.__l.__data_ = v807;
      v806->__r_.__value_.__l.__size_ = 0;
      v806->__r_.__value_.__r.__words[2] = 0;
      v806->__r_.__value_.__r.__words[0] = 0;
      v808 = std::string::append(&v1169, " ", 1uLL);
      v809 = *(_OWORD *)&v808->__r_.__value_.__l.__data_;
      v1170.__r_.__value_.__r.__words[2] = v808->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v1170.__r_.__value_.__l.__data_ = v809;
      v808->__r_.__value_.__l.__size_ = 0;
      v808->__r_.__value_.__r.__words[2] = 0;
      v808->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v1166, 0x21u);
      if ((v1166.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v810 = &v1166;
      else
        v810 = (std::string *)v1166.__r_.__value_.__r.__words[0];
      if ((v1166.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v811 = HIBYTE(v1166.__r_.__value_.__r.__words[2]);
      else
        v811 = v1166.__r_.__value_.__l.__size_;
      v812 = std::string::append(&v1170, (const std::string::value_type *)v810, v811);
      v813 = *(_OWORD *)&v812->__r_.__value_.__l.__data_;
      v1171.__r_.__value_.__r.__words[2] = v812->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v1171.__r_.__value_.__l.__data_ = v813;
      v812->__r_.__value_.__l.__size_ = 0;
      v812->__r_.__value_.__r.__words[2] = 0;
      v812->__r_.__value_.__r.__words[0] = 0;
      v814 = std::string::append(&v1171, " 0 0)\n", 6uLL);
      v815 = *(_OWORD *)&v814->__r_.__value_.__l.__data_;
      v1172.__r_.__value_.__r.__words[2] = v814->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v1172.__r_.__value_.__l.__data_ = v815;
      v814->__r_.__value_.__l.__size_ = 0;
      v814->__r_.__value_.__r.__words[2] = 0;
      v814->__r_.__value_.__r.__words[0] = 0;
      if ((v1172.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v816 = &v1172;
      else
        v816 = (std::string *)v1172.__r_.__value_.__r.__words[0];
      if ((v1172.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v817 = HIBYTE(v1172.__r_.__value_.__r.__words[2]);
      else
        v817 = v1172.__r_.__value_.__l.__size_;
      std::string::append(&__x, (const std::string::value_type *)v816, v817);
      if (SHIBYTE(v1172.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v1172.__r_.__value_.__l.__data_);
      if (SHIBYTE(v1171.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v1171.__r_.__value_.__l.__data_);
      if (SHIBYTE(v1166.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v1166.__r_.__value_.__l.__data_);
      if (SHIBYTE(v1170.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v1170.__r_.__value_.__l.__data_);
      if (SHIBYTE(v1169.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v1169.__r_.__value_.__l.__data_);
      if (SHIBYTE(v1176.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v1176.__r_.__value_.__l.__data_);
      if (SHIBYTE(v1168.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v1168.__r_.__value_.__l.__data_);
      if (SHIBYTE(v1167.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v1167.__r_.__value_.__l.__data_);
      std::to_string(&v1167, 0x26u);
      v818 = std::string::insert(&v1167, 0, "wireGraphParam ", 0xFuLL);
      v819 = *(_OWORD *)&v818->__r_.__value_.__l.__data_;
      v1168.__r_.__value_.__r.__words[2] = v818->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v1168.__r_.__value_.__l.__data_ = v819;
      v818->__r_.__value_.__l.__size_ = 0;
      v818->__r_.__value_.__r.__words[2] = 0;
      v818->__r_.__value_.__r.__words[0] = 0;
      v820 = std::string::append(&v1168, " (", 2uLL);
      v821 = *(_OWORD *)&v820->__r_.__value_.__l.__data_;
      v1176.__r_.__value_.__r.__words[2] = v820->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v1176.__r_.__value_.__l.__data_ = v821;
      v820->__r_.__value_.__l.__size_ = 0;
      v820->__r_.__value_.__r.__words[2] = 0;
      v820->__r_.__value_.__r.__words[0] = 0;
      if ((v1177.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v822 = &v1177;
      else
        v822 = (std::string *)v1177.__r_.__value_.__r.__words[0];
      if ((v1177.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v823 = HIBYTE(v1177.__r_.__value_.__r.__words[2]);
      else
        v823 = v1177.__r_.__value_.__l.__size_;
      v824 = std::string::append(&v1176, (const std::string::value_type *)v822, v823);
      v825 = *(_OWORD *)&v824->__r_.__value_.__l.__data_;
      v1169.__r_.__value_.__r.__words[2] = v824->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v1169.__r_.__value_.__l.__data_ = v825;
      v824->__r_.__value_.__l.__size_ = 0;
      v824->__r_.__value_.__r.__words[2] = 0;
      v824->__r_.__value_.__r.__words[0] = 0;
      v826 = std::string::append(&v1169, " ", 1uLL);
      v827 = *(_OWORD *)&v826->__r_.__value_.__l.__data_;
      v1170.__r_.__value_.__r.__words[2] = v826->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v1170.__r_.__value_.__l.__data_ = v827;
      v826->__r_.__value_.__l.__size_ = 0;
      v826->__r_.__value_.__r.__words[2] = 0;
      v826->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v1166, 0x22u);
      if ((v1166.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v828 = &v1166;
      else
        v828 = (std::string *)v1166.__r_.__value_.__r.__words[0];
      if ((v1166.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v829 = HIBYTE(v1166.__r_.__value_.__r.__words[2]);
      else
        v829 = v1166.__r_.__value_.__l.__size_;
      v830 = std::string::append(&v1170, (const std::string::value_type *)v828, v829);
      v831 = *(_OWORD *)&v830->__r_.__value_.__l.__data_;
      v1171.__r_.__value_.__r.__words[2] = v830->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v1171.__r_.__value_.__l.__data_ = v831;
      v830->__r_.__value_.__l.__size_ = 0;
      v830->__r_.__value_.__r.__words[2] = 0;
      v830->__r_.__value_.__r.__words[0] = 0;
      v832 = std::string::append(&v1171, " 0 0)\n", 6uLL);
      v833 = *(_OWORD *)&v832->__r_.__value_.__l.__data_;
      v1172.__r_.__value_.__r.__words[2] = v832->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v1172.__r_.__value_.__l.__data_ = v833;
      v832->__r_.__value_.__l.__size_ = 0;
      v832->__r_.__value_.__r.__words[2] = 0;
      v832->__r_.__value_.__r.__words[0] = 0;
      if ((v1172.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v834 = &v1172;
      else
        v834 = (std::string *)v1172.__r_.__value_.__r.__words[0];
      if ((v1172.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v835 = HIBYTE(v1172.__r_.__value_.__r.__words[2]);
      else
        v835 = v1172.__r_.__value_.__l.__size_;
      std::string::append(&__x, (const std::string::value_type *)v834, v835);
      if (SHIBYTE(v1172.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v1172.__r_.__value_.__l.__data_);
      if (SHIBYTE(v1171.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v1171.__r_.__value_.__l.__data_);
      if (SHIBYTE(v1166.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v1166.__r_.__value_.__l.__data_);
      if (SHIBYTE(v1170.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v1170.__r_.__value_.__l.__data_);
      if (SHIBYTE(v1169.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v1169.__r_.__value_.__l.__data_);
      if (SHIBYTE(v1176.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v1176.__r_.__value_.__l.__data_);
      if (SHIBYTE(v1168.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v1168.__r_.__value_.__l.__data_);
      if (SHIBYTE(v1167.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v1167.__r_.__value_.__l.__data_);
      std::to_string(&v1167, 0x27u);
      v836 = std::string::insert(&v1167, 0, "wireGraphParam ", 0xFuLL);
      v837 = *(_OWORD *)&v836->__r_.__value_.__l.__data_;
      v1168.__r_.__value_.__r.__words[2] = v836->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v1168.__r_.__value_.__l.__data_ = v837;
      v836->__r_.__value_.__l.__size_ = 0;
      v836->__r_.__value_.__r.__words[2] = 0;
      v836->__r_.__value_.__r.__words[0] = 0;
      v838 = std::string::append(&v1168, " (", 2uLL);
      v839 = *(_OWORD *)&v838->__r_.__value_.__l.__data_;
      v1176.__r_.__value_.__r.__words[2] = v838->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v1176.__r_.__value_.__l.__data_ = v839;
      v838->__r_.__value_.__l.__size_ = 0;
      v838->__r_.__value_.__r.__words[2] = 0;
      v838->__r_.__value_.__r.__words[0] = 0;
      if ((v1177.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v840 = &v1177;
      else
        v840 = (std::string *)v1177.__r_.__value_.__r.__words[0];
      if ((v1177.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v841 = HIBYTE(v1177.__r_.__value_.__r.__words[2]);
      else
        v841 = v1177.__r_.__value_.__l.__size_;
      v842 = std::string::append(&v1176, (const std::string::value_type *)v840, v841);
      v843 = *(_OWORD *)&v842->__r_.__value_.__l.__data_;
      v1169.__r_.__value_.__r.__words[2] = v842->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v1169.__r_.__value_.__l.__data_ = v843;
      v842->__r_.__value_.__l.__size_ = 0;
      v842->__r_.__value_.__r.__words[2] = 0;
      v842->__r_.__value_.__r.__words[0] = 0;
      v844 = std::string::append(&v1169, " ", 1uLL);
      v845 = *(_OWORD *)&v844->__r_.__value_.__l.__data_;
      v1170.__r_.__value_.__r.__words[2] = v844->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v1170.__r_.__value_.__l.__data_ = v845;
      v844->__r_.__value_.__l.__size_ = 0;
      v844->__r_.__value_.__r.__words[2] = 0;
      v844->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v1166, 0x23u);
      if ((v1166.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v846 = &v1166;
      else
        v846 = (std::string *)v1166.__r_.__value_.__r.__words[0];
      if ((v1166.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v847 = HIBYTE(v1166.__r_.__value_.__r.__words[2]);
      else
        v847 = v1166.__r_.__value_.__l.__size_;
      v848 = std::string::append(&v1170, (const std::string::value_type *)v846, v847);
      v849 = *(_OWORD *)&v848->__r_.__value_.__l.__data_;
      v1171.__r_.__value_.__r.__words[2] = v848->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v1171.__r_.__value_.__l.__data_ = v849;
      v848->__r_.__value_.__l.__size_ = 0;
      v848->__r_.__value_.__r.__words[2] = 0;
      v848->__r_.__value_.__r.__words[0] = 0;
      v850 = std::string::append(&v1171, " 0 0)\n", 6uLL);
      v851 = *(_OWORD *)&v850->__r_.__value_.__l.__data_;
      v1172.__r_.__value_.__r.__words[2] = v850->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v1172.__r_.__value_.__l.__data_ = v851;
      v850->__r_.__value_.__l.__size_ = 0;
      v850->__r_.__value_.__r.__words[2] = 0;
      v850->__r_.__value_.__r.__words[0] = 0;
      if ((v1172.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v852 = &v1172;
      else
        v852 = (std::string *)v1172.__r_.__value_.__r.__words[0];
      if ((v1172.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v853 = HIBYTE(v1172.__r_.__value_.__r.__words[2]);
      else
        v853 = v1172.__r_.__value_.__l.__size_;
      std::string::append(&__x, (const std::string::value_type *)v852, v853);
      if (SHIBYTE(v1172.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v1172.__r_.__value_.__l.__data_);
      if (SHIBYTE(v1171.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v1171.__r_.__value_.__l.__data_);
      if (SHIBYTE(v1166.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v1166.__r_.__value_.__l.__data_);
      if (SHIBYTE(v1170.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v1170.__r_.__value_.__l.__data_);
      if (SHIBYTE(v1169.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v1169.__r_.__value_.__l.__data_);
      if (SHIBYTE(v1176.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v1176.__r_.__value_.__l.__data_);
      if (SHIBYTE(v1168.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v1168.__r_.__value_.__l.__data_);
      if (SHIBYTE(v1167.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v1167.__r_.__value_.__l.__data_);
      std::to_string(&v1167, 0x28u);
      v854 = std::string::insert(&v1167, 0, "wireGraphParam ", 0xFuLL);
      v855 = *(_OWORD *)&v854->__r_.__value_.__l.__data_;
      v1168.__r_.__value_.__r.__words[2] = v854->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v1168.__r_.__value_.__l.__data_ = v855;
      v854->__r_.__value_.__l.__size_ = 0;
      v854->__r_.__value_.__r.__words[2] = 0;
      v854->__r_.__value_.__r.__words[0] = 0;
      v856 = std::string::append(&v1168, " (", 2uLL);
      v857 = *(_OWORD *)&v856->__r_.__value_.__l.__data_;
      v1176.__r_.__value_.__r.__words[2] = v856->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v1176.__r_.__value_.__l.__data_ = v857;
      v856->__r_.__value_.__l.__size_ = 0;
      v856->__r_.__value_.__r.__words[2] = 0;
      v856->__r_.__value_.__r.__words[0] = 0;
      if ((v1177.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v858 = &v1177;
      else
        v858 = (std::string *)v1177.__r_.__value_.__r.__words[0];
      if ((v1177.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v859 = HIBYTE(v1177.__r_.__value_.__r.__words[2]);
      else
        v859 = v1177.__r_.__value_.__l.__size_;
      v860 = std::string::append(&v1176, (const std::string::value_type *)v858, v859);
      v861 = *(_OWORD *)&v860->__r_.__value_.__l.__data_;
      v1169.__r_.__value_.__r.__words[2] = v860->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v1169.__r_.__value_.__l.__data_ = v861;
      v860->__r_.__value_.__l.__size_ = 0;
      v860->__r_.__value_.__r.__words[2] = 0;
      v860->__r_.__value_.__r.__words[0] = 0;
      v862 = std::string::append(&v1169, " ", 1uLL);
      v863 = *(_OWORD *)&v862->__r_.__value_.__l.__data_;
      v1170.__r_.__value_.__r.__words[2] = v862->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v1170.__r_.__value_.__l.__data_ = v863;
      v862->__r_.__value_.__l.__size_ = 0;
      v862->__r_.__value_.__r.__words[2] = 0;
      v862->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v1166, 0x24u);
      if ((v1166.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v864 = &v1166;
      else
        v864 = (std::string *)v1166.__r_.__value_.__r.__words[0];
      if ((v1166.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v865 = HIBYTE(v1166.__r_.__value_.__r.__words[2]);
      else
        v865 = v1166.__r_.__value_.__l.__size_;
      v866 = std::string::append(&v1170, (const std::string::value_type *)v864, v865);
      v867 = *(_OWORD *)&v866->__r_.__value_.__l.__data_;
      v1171.__r_.__value_.__r.__words[2] = v866->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v1171.__r_.__value_.__l.__data_ = v867;
      v866->__r_.__value_.__l.__size_ = 0;
      v866->__r_.__value_.__r.__words[2] = 0;
      v866->__r_.__value_.__r.__words[0] = 0;
      v868 = std::string::append(&v1171, " 0 0)\n", 6uLL);
      v869 = *(_OWORD *)&v868->__r_.__value_.__l.__data_;
      v1172.__r_.__value_.__r.__words[2] = v868->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v1172.__r_.__value_.__l.__data_ = v869;
      v868->__r_.__value_.__l.__size_ = 0;
      v868->__r_.__value_.__r.__words[2] = 0;
      v868->__r_.__value_.__r.__words[0] = 0;
      if ((v1172.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v870 = &v1172;
      else
        v870 = (std::string *)v1172.__r_.__value_.__r.__words[0];
      if ((v1172.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v871 = HIBYTE(v1172.__r_.__value_.__r.__words[2]);
      else
        v871 = v1172.__r_.__value_.__l.__size_;
      std::string::append(&__x, (const std::string::value_type *)v870, v871);
      if (SHIBYTE(v1172.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v1172.__r_.__value_.__l.__data_);
      if (SHIBYTE(v1171.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v1171.__r_.__value_.__l.__data_);
      if (SHIBYTE(v1166.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v1166.__r_.__value_.__l.__data_);
      if (SHIBYTE(v1170.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v1170.__r_.__value_.__l.__data_);
      if (SHIBYTE(v1169.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v1169.__r_.__value_.__l.__data_);
      if (SHIBYTE(v1176.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v1176.__r_.__value_.__l.__data_);
      if (SHIBYTE(v1168.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v1168.__r_.__value_.__l.__data_);
      if (SHIBYTE(v1167.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v1167.__r_.__value_.__l.__data_);
      std::to_string(&v1167, 0x29u);
      v872 = std::string::insert(&v1167, 0, "wireGraphParam ", 0xFuLL);
      v873 = *(_OWORD *)&v872->__r_.__value_.__l.__data_;
      v1168.__r_.__value_.__r.__words[2] = v872->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v1168.__r_.__value_.__l.__data_ = v873;
      v872->__r_.__value_.__l.__size_ = 0;
      v872->__r_.__value_.__r.__words[2] = 0;
      v872->__r_.__value_.__r.__words[0] = 0;
      v874 = std::string::append(&v1168, " (", 2uLL);
      v875 = *(_OWORD *)&v874->__r_.__value_.__l.__data_;
      v1176.__r_.__value_.__r.__words[2] = v874->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v1176.__r_.__value_.__l.__data_ = v875;
      v874->__r_.__value_.__l.__size_ = 0;
      v874->__r_.__value_.__r.__words[2] = 0;
      v874->__r_.__value_.__r.__words[0] = 0;
      if ((v1177.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v876 = &v1177;
      else
        v876 = (std::string *)v1177.__r_.__value_.__r.__words[0];
      if ((v1177.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v877 = HIBYTE(v1177.__r_.__value_.__r.__words[2]);
      else
        v877 = v1177.__r_.__value_.__l.__size_;
      v878 = std::string::append(&v1176, (const std::string::value_type *)v876, v877);
      v879 = *(_OWORD *)&v878->__r_.__value_.__l.__data_;
      v1169.__r_.__value_.__r.__words[2] = v878->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v1169.__r_.__value_.__l.__data_ = v879;
      v878->__r_.__value_.__l.__size_ = 0;
      v878->__r_.__value_.__r.__words[2] = 0;
      v878->__r_.__value_.__r.__words[0] = 0;
      v880 = std::string::append(&v1169, " ", 1uLL);
      v881 = *(_OWORD *)&v880->__r_.__value_.__l.__data_;
      v1170.__r_.__value_.__r.__words[2] = v880->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v1170.__r_.__value_.__l.__data_ = v881;
      v880->__r_.__value_.__l.__size_ = 0;
      v880->__r_.__value_.__r.__words[2] = 0;
      v880->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v1166, 0x25u);
      if ((v1166.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v882 = &v1166;
      else
        v882 = (std::string *)v1166.__r_.__value_.__r.__words[0];
      if ((v1166.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v883 = HIBYTE(v1166.__r_.__value_.__r.__words[2]);
      else
        v883 = v1166.__r_.__value_.__l.__size_;
      v884 = std::string::append(&v1170, (const std::string::value_type *)v882, v883);
      v885 = *(_OWORD *)&v884->__r_.__value_.__l.__data_;
      v1171.__r_.__value_.__r.__words[2] = v884->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v1171.__r_.__value_.__l.__data_ = v885;
      v884->__r_.__value_.__l.__size_ = 0;
      v884->__r_.__value_.__r.__words[2] = 0;
      v884->__r_.__value_.__r.__words[0] = 0;
      v886 = std::string::append(&v1171, " 0 0)\n", 6uLL);
      v887 = *(_OWORD *)&v886->__r_.__value_.__l.__data_;
      v1172.__r_.__value_.__r.__words[2] = v886->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v1172.__r_.__value_.__l.__data_ = v887;
      v886->__r_.__value_.__l.__size_ = 0;
      v886->__r_.__value_.__r.__words[2] = 0;
      v886->__r_.__value_.__r.__words[0] = 0;
      if ((v1172.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v888 = &v1172;
      else
        v888 = (std::string *)v1172.__r_.__value_.__r.__words[0];
      if ((v1172.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v889 = HIBYTE(v1172.__r_.__value_.__r.__words[2]);
      else
        v889 = v1172.__r_.__value_.__l.__size_;
      std::string::append(&__x, (const std::string::value_type *)v888, v889);
      if (SHIBYTE(v1172.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v1172.__r_.__value_.__l.__data_);
      if (SHIBYTE(v1171.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v1171.__r_.__value_.__l.__data_);
      if (SHIBYTE(v1166.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v1166.__r_.__value_.__l.__data_);
      if (SHIBYTE(v1170.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v1170.__r_.__value_.__l.__data_);
      if (SHIBYTE(v1169.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v1169.__r_.__value_.__l.__data_);
      if (SHIBYTE(v1176.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v1176.__r_.__value_.__l.__data_);
      if (SHIBYTE(v1168.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v1168.__r_.__value_.__l.__data_);
      if (SHIBYTE(v1167.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v1167.__r_.__value_.__l.__data_);
      std::to_string(&v1167, 0x2Au);
      v890 = std::string::insert(&v1167, 0, "wireGraphParam ", 0xFuLL);
      v891 = *(_OWORD *)&v890->__r_.__value_.__l.__data_;
      v1168.__r_.__value_.__r.__words[2] = v890->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v1168.__r_.__value_.__l.__data_ = v891;
      v890->__r_.__value_.__l.__size_ = 0;
      v890->__r_.__value_.__r.__words[2] = 0;
      v890->__r_.__value_.__r.__words[0] = 0;
      v892 = std::string::append(&v1168, " (", 2uLL);
      v893 = *(_OWORD *)&v892->__r_.__value_.__l.__data_;
      v1176.__r_.__value_.__r.__words[2] = v892->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v1176.__r_.__value_.__l.__data_ = v893;
      v892->__r_.__value_.__l.__size_ = 0;
      v892->__r_.__value_.__r.__words[2] = 0;
      v892->__r_.__value_.__r.__words[0] = 0;
      if ((v1177.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v894 = &v1177;
      else
        v894 = (std::string *)v1177.__r_.__value_.__r.__words[0];
      if ((v1177.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v895 = HIBYTE(v1177.__r_.__value_.__r.__words[2]);
      else
        v895 = v1177.__r_.__value_.__l.__size_;
      v896 = std::string::append(&v1176, (const std::string::value_type *)v894, v895);
      v897 = *(_OWORD *)&v896->__r_.__value_.__l.__data_;
      v1169.__r_.__value_.__r.__words[2] = v896->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v1169.__r_.__value_.__l.__data_ = v897;
      v896->__r_.__value_.__l.__size_ = 0;
      v896->__r_.__value_.__r.__words[2] = 0;
      v896->__r_.__value_.__r.__words[0] = 0;
      v898 = std::string::append(&v1169, " ", 1uLL);
      v899 = *(_OWORD *)&v898->__r_.__value_.__l.__data_;
      v1170.__r_.__value_.__r.__words[2] = v898->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v1170.__r_.__value_.__l.__data_ = v899;
      v898->__r_.__value_.__l.__size_ = 0;
      v898->__r_.__value_.__r.__words[2] = 0;
      v898->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v1166, 0x26u);
      if ((v1166.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v900 = &v1166;
      else
        v900 = (std::string *)v1166.__r_.__value_.__r.__words[0];
      if ((v1166.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v901 = HIBYTE(v1166.__r_.__value_.__r.__words[2]);
      else
        v901 = v1166.__r_.__value_.__l.__size_;
      v902 = std::string::append(&v1170, (const std::string::value_type *)v900, v901);
      v903 = *(_OWORD *)&v902->__r_.__value_.__l.__data_;
      v1171.__r_.__value_.__r.__words[2] = v902->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v1171.__r_.__value_.__l.__data_ = v903;
      v902->__r_.__value_.__l.__size_ = 0;
      v902->__r_.__value_.__r.__words[2] = 0;
      v902->__r_.__value_.__r.__words[0] = 0;
      v904 = std::string::append(&v1171, " 0 0)\n", 6uLL);
      v905 = *(_OWORD *)&v904->__r_.__value_.__l.__data_;
      v1172.__r_.__value_.__r.__words[2] = v904->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v1172.__r_.__value_.__l.__data_ = v905;
      v904->__r_.__value_.__l.__size_ = 0;
      v904->__r_.__value_.__r.__words[2] = 0;
      v904->__r_.__value_.__r.__words[0] = 0;
      if ((v1172.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v906 = &v1172;
      else
        v906 = (std::string *)v1172.__r_.__value_.__r.__words[0];
      if ((v1172.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v907 = HIBYTE(v1172.__r_.__value_.__r.__words[2]);
      else
        v907 = v1172.__r_.__value_.__l.__size_;
      std::string::append(&__x, (const std::string::value_type *)v906, v907);
      if (SHIBYTE(v1172.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v1172.__r_.__value_.__l.__data_);
      if (SHIBYTE(v1171.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v1171.__r_.__value_.__l.__data_);
      if (SHIBYTE(v1166.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v1166.__r_.__value_.__l.__data_);
      if (SHIBYTE(v1170.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v1170.__r_.__value_.__l.__data_);
      if (SHIBYTE(v1169.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v1169.__r_.__value_.__l.__data_);
      if (SHIBYTE(v1176.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v1176.__r_.__value_.__l.__data_);
      if (SHIBYTE(v1168.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v1168.__r_.__value_.__l.__data_);
      if (SHIBYTE(v1167.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v1167.__r_.__value_.__l.__data_);
      std::to_string(&v1167, 0x2Bu);
      v908 = std::string::insert(&v1167, 0, "wireGraphParam ", 0xFuLL);
      v909 = *(_OWORD *)&v908->__r_.__value_.__l.__data_;
      v1168.__r_.__value_.__r.__words[2] = v908->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v1168.__r_.__value_.__l.__data_ = v909;
      v908->__r_.__value_.__l.__size_ = 0;
      v908->__r_.__value_.__r.__words[2] = 0;
      v908->__r_.__value_.__r.__words[0] = 0;
      v910 = std::string::append(&v1168, " (", 2uLL);
      v911 = *(_OWORD *)&v910->__r_.__value_.__l.__data_;
      v1176.__r_.__value_.__r.__words[2] = v910->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v1176.__r_.__value_.__l.__data_ = v911;
      v910->__r_.__value_.__l.__size_ = 0;
      v910->__r_.__value_.__r.__words[2] = 0;
      v910->__r_.__value_.__r.__words[0] = 0;
      if ((v1177.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v912 = &v1177;
      else
        v912 = (std::string *)v1177.__r_.__value_.__r.__words[0];
      if ((v1177.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v913 = HIBYTE(v1177.__r_.__value_.__r.__words[2]);
      else
        v913 = v1177.__r_.__value_.__l.__size_;
      v914 = std::string::append(&v1176, (const std::string::value_type *)v912, v913);
      v915 = *(_OWORD *)&v914->__r_.__value_.__l.__data_;
      v1169.__r_.__value_.__r.__words[2] = v914->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v1169.__r_.__value_.__l.__data_ = v915;
      v914->__r_.__value_.__l.__size_ = 0;
      v914->__r_.__value_.__r.__words[2] = 0;
      v914->__r_.__value_.__r.__words[0] = 0;
      v916 = std::string::append(&v1169, " ", 1uLL);
      v917 = *(_OWORD *)&v916->__r_.__value_.__l.__data_;
      v1170.__r_.__value_.__r.__words[2] = v916->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v1170.__r_.__value_.__l.__data_ = v917;
      v916->__r_.__value_.__l.__size_ = 0;
      v916->__r_.__value_.__r.__words[2] = 0;
      v916->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v1166, 0x27u);
      if ((v1166.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v918 = &v1166;
      else
        v918 = (std::string *)v1166.__r_.__value_.__r.__words[0];
      if ((v1166.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v919 = HIBYTE(v1166.__r_.__value_.__r.__words[2]);
      else
        v919 = v1166.__r_.__value_.__l.__size_;
      v920 = std::string::append(&v1170, (const std::string::value_type *)v918, v919);
      v921 = *(_OWORD *)&v920->__r_.__value_.__l.__data_;
      v1171.__r_.__value_.__r.__words[2] = v920->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v1171.__r_.__value_.__l.__data_ = v921;
      v920->__r_.__value_.__l.__size_ = 0;
      v920->__r_.__value_.__r.__words[2] = 0;
      v920->__r_.__value_.__r.__words[0] = 0;
      v922 = std::string::append(&v1171, " 0 0)\n", 6uLL);
      v923 = *(_OWORD *)&v922->__r_.__value_.__l.__data_;
      v1172.__r_.__value_.__r.__words[2] = v922->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v1172.__r_.__value_.__l.__data_ = v923;
      v922->__r_.__value_.__l.__size_ = 0;
      v922->__r_.__value_.__r.__words[2] = 0;
      v922->__r_.__value_.__r.__words[0] = 0;
      if ((v1172.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v924 = &v1172;
      else
        v924 = (std::string *)v1172.__r_.__value_.__r.__words[0];
      if ((v1172.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v925 = HIBYTE(v1172.__r_.__value_.__r.__words[2]);
      else
        v925 = v1172.__r_.__value_.__l.__size_;
      std::string::append(&__x, (const std::string::value_type *)v924, v925);
      if (SHIBYTE(v1172.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v1172.__r_.__value_.__l.__data_);
      if (SHIBYTE(v1171.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v1171.__r_.__value_.__l.__data_);
      if (SHIBYTE(v1166.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v1166.__r_.__value_.__l.__data_);
      if (SHIBYTE(v1170.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v1170.__r_.__value_.__l.__data_);
      if (SHIBYTE(v1169.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v1169.__r_.__value_.__l.__data_);
      if (SHIBYTE(v1176.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v1176.__r_.__value_.__l.__data_);
      if (SHIBYTE(v1168.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v1168.__r_.__value_.__l.__data_);
      if (SHIBYTE(v1167.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v1167.__r_.__value_.__l.__data_);
      std::to_string(&v1167, 0x2Cu);
      v926 = std::string::insert(&v1167, 0, "wireGraphParam ", 0xFuLL);
      v927 = *(_OWORD *)&v926->__r_.__value_.__l.__data_;
      v1168.__r_.__value_.__r.__words[2] = v926->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v1168.__r_.__value_.__l.__data_ = v927;
      v926->__r_.__value_.__l.__size_ = 0;
      v926->__r_.__value_.__r.__words[2] = 0;
      v926->__r_.__value_.__r.__words[0] = 0;
      v928 = std::string::append(&v1168, " (", 2uLL);
      v929 = *(_OWORD *)&v928->__r_.__value_.__l.__data_;
      v1176.__r_.__value_.__r.__words[2] = v928->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v1176.__r_.__value_.__l.__data_ = v929;
      v928->__r_.__value_.__l.__size_ = 0;
      v928->__r_.__value_.__r.__words[2] = 0;
      v928->__r_.__value_.__r.__words[0] = 0;
      if ((v1177.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v930 = &v1177;
      else
        v930 = (std::string *)v1177.__r_.__value_.__r.__words[0];
      if ((v1177.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v931 = HIBYTE(v1177.__r_.__value_.__r.__words[2]);
      else
        v931 = v1177.__r_.__value_.__l.__size_;
      v932 = std::string::append(&v1176, (const std::string::value_type *)v930, v931);
      v933 = *(_OWORD *)&v932->__r_.__value_.__l.__data_;
      v1169.__r_.__value_.__r.__words[2] = v932->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v1169.__r_.__value_.__l.__data_ = v933;
      v932->__r_.__value_.__l.__size_ = 0;
      v932->__r_.__value_.__r.__words[2] = 0;
      v932->__r_.__value_.__r.__words[0] = 0;
      v934 = std::string::append(&v1169, " ", 1uLL);
      v935 = *(_OWORD *)&v934->__r_.__value_.__l.__data_;
      v1170.__r_.__value_.__r.__words[2] = v934->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v1170.__r_.__value_.__l.__data_ = v935;
      v934->__r_.__value_.__l.__size_ = 0;
      v934->__r_.__value_.__r.__words[2] = 0;
      v934->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v1166, 0x28u);
      if ((v1166.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v936 = &v1166;
      else
        v936 = (std::string *)v1166.__r_.__value_.__r.__words[0];
      if ((v1166.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v937 = HIBYTE(v1166.__r_.__value_.__r.__words[2]);
      else
        v937 = v1166.__r_.__value_.__l.__size_;
      v938 = std::string::append(&v1170, (const std::string::value_type *)v936, v937);
      v939 = *(_OWORD *)&v938->__r_.__value_.__l.__data_;
      v1171.__r_.__value_.__r.__words[2] = v938->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v1171.__r_.__value_.__l.__data_ = v939;
      v938->__r_.__value_.__l.__size_ = 0;
      v938->__r_.__value_.__r.__words[2] = 0;
      v938->__r_.__value_.__r.__words[0] = 0;
      v940 = std::string::append(&v1171, " 0 0)\n", 6uLL);
      v941 = *(_OWORD *)&v940->__r_.__value_.__l.__data_;
      v1172.__r_.__value_.__r.__words[2] = v940->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v1172.__r_.__value_.__l.__data_ = v941;
      v940->__r_.__value_.__l.__size_ = 0;
      v940->__r_.__value_.__r.__words[2] = 0;
      v940->__r_.__value_.__r.__words[0] = 0;
      if ((v1172.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v942 = &v1172;
      else
        v942 = (std::string *)v1172.__r_.__value_.__r.__words[0];
      if ((v1172.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v943 = HIBYTE(v1172.__r_.__value_.__r.__words[2]);
      else
        v943 = v1172.__r_.__value_.__l.__size_;
      std::string::append(&__x, (const std::string::value_type *)v942, v943);
      if (SHIBYTE(v1172.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v1172.__r_.__value_.__l.__data_);
      if (SHIBYTE(v1171.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v1171.__r_.__value_.__l.__data_);
      if (SHIBYTE(v1166.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v1166.__r_.__value_.__l.__data_);
      if (SHIBYTE(v1170.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v1170.__r_.__value_.__l.__data_);
      if (SHIBYTE(v1169.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v1169.__r_.__value_.__l.__data_);
      if (SHIBYTE(v1176.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v1176.__r_.__value_.__l.__data_);
      if (SHIBYTE(v1168.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v1168.__r_.__value_.__l.__data_);
      if (SHIBYTE(v1167.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v1167.__r_.__value_.__l.__data_);
      std::to_string(&v1167, 0x2Du);
      v944 = std::string::insert(&v1167, 0, "wireGraphParam ", 0xFuLL);
      v945 = *(_OWORD *)&v944->__r_.__value_.__l.__data_;
      v1168.__r_.__value_.__r.__words[2] = v944->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v1168.__r_.__value_.__l.__data_ = v945;
      v944->__r_.__value_.__l.__size_ = 0;
      v944->__r_.__value_.__r.__words[2] = 0;
      v944->__r_.__value_.__r.__words[0] = 0;
      v946 = std::string::append(&v1168, " (", 2uLL);
      v947 = *(_OWORD *)&v946->__r_.__value_.__l.__data_;
      v1176.__r_.__value_.__r.__words[2] = v946->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v1176.__r_.__value_.__l.__data_ = v947;
      v946->__r_.__value_.__l.__size_ = 0;
      v946->__r_.__value_.__r.__words[2] = 0;
      v946->__r_.__value_.__r.__words[0] = 0;
      if ((v1177.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v948 = &v1177;
      else
        v948 = (std::string *)v1177.__r_.__value_.__r.__words[0];
      if ((v1177.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v949 = HIBYTE(v1177.__r_.__value_.__r.__words[2]);
      else
        v949 = v1177.__r_.__value_.__l.__size_;
      v950 = std::string::append(&v1176, (const std::string::value_type *)v948, v949);
      v951 = *(_OWORD *)&v950->__r_.__value_.__l.__data_;
      v1169.__r_.__value_.__r.__words[2] = v950->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v1169.__r_.__value_.__l.__data_ = v951;
      v950->__r_.__value_.__l.__size_ = 0;
      v950->__r_.__value_.__r.__words[2] = 0;
      v950->__r_.__value_.__r.__words[0] = 0;
      v952 = std::string::append(&v1169, " ", 1uLL);
      v953 = *(_OWORD *)&v952->__r_.__value_.__l.__data_;
      v1170.__r_.__value_.__r.__words[2] = v952->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v1170.__r_.__value_.__l.__data_ = v953;
      v952->__r_.__value_.__l.__size_ = 0;
      v952->__r_.__value_.__r.__words[2] = 0;
      v952->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v1166, 0x29u);
      if ((v1166.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v954 = &v1166;
      else
        v954 = (std::string *)v1166.__r_.__value_.__r.__words[0];
      if ((v1166.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v955 = HIBYTE(v1166.__r_.__value_.__r.__words[2]);
      else
        v955 = v1166.__r_.__value_.__l.__size_;
      v956 = std::string::append(&v1170, (const std::string::value_type *)v954, v955);
      v957 = *(_OWORD *)&v956->__r_.__value_.__l.__data_;
      v1171.__r_.__value_.__r.__words[2] = v956->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v1171.__r_.__value_.__l.__data_ = v957;
      v956->__r_.__value_.__l.__size_ = 0;
      v956->__r_.__value_.__r.__words[2] = 0;
      v956->__r_.__value_.__r.__words[0] = 0;
      v958 = std::string::append(&v1171, " 0 0)\n", 6uLL);
      v959 = *(_OWORD *)&v958->__r_.__value_.__l.__data_;
      v1172.__r_.__value_.__r.__words[2] = v958->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v1172.__r_.__value_.__l.__data_ = v959;
      v958->__r_.__value_.__l.__size_ = 0;
      v958->__r_.__value_.__r.__words[2] = 0;
      v958->__r_.__value_.__r.__words[0] = 0;
      if ((v1172.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v960 = &v1172;
      else
        v960 = (std::string *)v1172.__r_.__value_.__r.__words[0];
      if ((v1172.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v961 = HIBYTE(v1172.__r_.__value_.__r.__words[2]);
      else
        v961 = v1172.__r_.__value_.__l.__size_;
      std::string::append(&__x, (const std::string::value_type *)v960, v961);
      if (SHIBYTE(v1172.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v1172.__r_.__value_.__l.__data_);
      if (SHIBYTE(v1171.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v1171.__r_.__value_.__l.__data_);
      if (SHIBYTE(v1166.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v1166.__r_.__value_.__l.__data_);
      if (SHIBYTE(v1170.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v1170.__r_.__value_.__l.__data_);
      if (SHIBYTE(v1169.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v1169.__r_.__value_.__l.__data_);
      if (SHIBYTE(v1176.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v1176.__r_.__value_.__l.__data_);
      if (SHIBYTE(v1168.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v1168.__r_.__value_.__l.__data_);
      if (SHIBYTE(v1167.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v1167.__r_.__value_.__l.__data_);
      std::to_string(&v1167, 0);
      v962 = std::string::insert(&v1167, 0, "wireGraphParam ", 0xFuLL);
      v963 = *(_OWORD *)&v962->__r_.__value_.__l.__data_;
      v1168.__r_.__value_.__r.__words[2] = v962->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v1168.__r_.__value_.__l.__data_ = v963;
      v962->__r_.__value_.__l.__size_ = 0;
      v962->__r_.__value_.__r.__words[2] = 0;
      v962->__r_.__value_.__r.__words[0] = 0;
      v964 = std::string::append(&v1168, " (", 2uLL);
      v965 = *(_OWORD *)&v964->__r_.__value_.__l.__data_;
      v1176.__r_.__value_.__r.__words[2] = v964->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v1176.__r_.__value_.__l.__data_ = v965;
      v964->__r_.__value_.__l.__size_ = 0;
      v964->__r_.__value_.__r.__words[2] = 0;
      v964->__r_.__value_.__r.__words[0] = 0;
      if ((v1177.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v966 = &v1177;
      else
        v966 = (std::string *)v1177.__r_.__value_.__r.__words[0];
      if ((v1177.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v967 = HIBYTE(v1177.__r_.__value_.__r.__words[2]);
      else
        v967 = v1177.__r_.__value_.__l.__size_;
      v968 = std::string::append(&v1176, (const std::string::value_type *)v966, v967);
      v969 = *(_OWORD *)&v968->__r_.__value_.__l.__data_;
      v1169.__r_.__value_.__r.__words[2] = v968->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v1169.__r_.__value_.__l.__data_ = v969;
      v968->__r_.__value_.__l.__size_ = 0;
      v968->__r_.__value_.__r.__words[2] = 0;
      v968->__r_.__value_.__r.__words[0] = 0;
      v970 = std::string::append(&v1169, "VsSpatialMix ", 0xDuLL);
      v971 = *(_OWORD *)&v970->__r_.__value_.__l.__data_;
      v1170.__r_.__value_.__r.__words[2] = v970->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v1170.__r_.__value_.__l.__data_ = v971;
      v970->__r_.__value_.__l.__size_ = 0;
      v970->__r_.__value_.__r.__words[2] = 0;
      v970->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v1166, 0);
      if ((v1166.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v972 = &v1166;
      else
        v972 = (std::string *)v1166.__r_.__value_.__r.__words[0];
      if ((v1166.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v973 = HIBYTE(v1166.__r_.__value_.__r.__words[2]);
      else
        v973 = v1166.__r_.__value_.__l.__size_;
      v974 = std::string::append(&v1170, (const std::string::value_type *)v972, v973);
      v975 = *(_OWORD *)&v974->__r_.__value_.__l.__data_;
      v1171.__r_.__value_.__r.__words[2] = v974->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v1171.__r_.__value_.__l.__data_ = v975;
      v974->__r_.__value_.__l.__size_ = 0;
      v974->__r_.__value_.__r.__words[2] = 0;
      v974->__r_.__value_.__r.__words[0] = 0;
      v976 = std::string::append(&v1171, " 0 0)\n", 6uLL);
      v977 = *(_OWORD *)&v976->__r_.__value_.__l.__data_;
      v1172.__r_.__value_.__r.__words[2] = v976->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v1172.__r_.__value_.__l.__data_ = v977;
      v976->__r_.__value_.__l.__size_ = 0;
      v976->__r_.__value_.__r.__words[2] = 0;
      v976->__r_.__value_.__r.__words[0] = 0;
      if ((v1172.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v978 = &v1172;
      else
        v978 = (std::string *)v1172.__r_.__value_.__r.__words[0];
      if ((v1172.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v979 = HIBYTE(v1172.__r_.__value_.__r.__words[2]);
      else
        v979 = v1172.__r_.__value_.__l.__size_;
      std::string::append(&__x, (const std::string::value_type *)v978, v979);
      if (SHIBYTE(v1172.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v1172.__r_.__value_.__l.__data_);
      if (SHIBYTE(v1171.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v1171.__r_.__value_.__l.__data_);
      if (SHIBYTE(v1166.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v1166.__r_.__value_.__l.__data_);
      if (SHIBYTE(v1170.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v1170.__r_.__value_.__l.__data_);
      if (SHIBYTE(v1169.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v1169.__r_.__value_.__l.__data_);
      if (SHIBYTE(v1176.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v1176.__r_.__value_.__l.__data_);
      if (SHIBYTE(v1168.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v1168.__r_.__value_.__l.__data_);
      if (SHIBYTE(v1167.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v1167.__r_.__value_.__l.__data_);
      if (SHIBYTE(v1177.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v1177.__r_.__value_.__l.__data_);
      v533 = 1;
      v534 = 1;
    }
    while ((v1161 & 1) == 0);
    std::to_string(&v1169, 0x1Du);
    v980 = std::string::insert(&v1169, 0, "wireGraphParam ", 0xFuLL);
    v981 = *(_OWORD *)&v980->__r_.__value_.__l.__data_;
    v1170.__r_.__value_.__r.__words[2] = v980->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v1170.__r_.__value_.__l.__data_ = v981;
    v980->__r_.__value_.__l.__size_ = 0;
    v980->__r_.__value_.__r.__words[2] = 0;
    v980->__r_.__value_.__r.__words[0] = 0;
    v982 = std::string::append(&v1170, " (", 2uLL);
    v983 = *(_OWORD *)&v982->__r_.__value_.__l.__data_;
    v1171.__r_.__value_.__r.__words[2] = v982->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v1171.__r_.__value_.__l.__data_ = v983;
    v982->__r_.__value_.__l.__size_ = 0;
    v982->__r_.__value_.__r.__words[2] = 0;
    v982->__r_.__value_.__r.__words[0] = 0;
    v984 = std::string::append(&v1171, "focused", 7uLL);
    v985 = *(_OWORD *)&v984->__r_.__value_.__l.__data_;
    v1172.__r_.__value_.__r.__words[2] = v984->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v1172.__r_.__value_.__l.__data_ = v985;
    v984->__r_.__value_.__l.__size_ = 0;
    v984->__r_.__value_.__r.__words[2] = 0;
    v984->__r_.__value_.__r.__words[0] = 0;
    v986 = std::string::append(&v1172, "BeamMixOverrideSwitch 2 0 0)\n", 0x1DuLL);
    v987 = *(_OWORD *)&v986->__r_.__value_.__l.__data_;
    v1177.__r_.__value_.__r.__words[2] = v986->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v1177.__r_.__value_.__l.__data_ = v987;
    v986->__r_.__value_.__l.__size_ = 0;
    v986->__r_.__value_.__r.__words[2] = 0;
    v986->__r_.__value_.__r.__words[0] = 0;
    if ((v1177.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v988 = &v1177;
    else
      v988 = (std::string *)v1177.__r_.__value_.__r.__words[0];
    if ((v1177.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v989 = HIBYTE(v1177.__r_.__value_.__r.__words[2]);
    else
      v989 = v1177.__r_.__value_.__l.__size_;
    std::string::append(&__x, (const std::string::value_type *)v988, v989);
    if (SHIBYTE(v1177.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v1177.__r_.__value_.__l.__data_);
    if (SHIBYTE(v1172.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v1172.__r_.__value_.__l.__data_);
    if (SHIBYTE(v1171.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v1171.__r_.__value_.__l.__data_);
    if (SHIBYTE(v1170.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v1170.__r_.__value_.__l.__data_);
    if (SHIBYTE(v1169.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v1169.__r_.__value_.__l.__data_);
    std::to_string(&v1169, 0x1Cu);
    v990 = std::string::insert(&v1169, 0, "wireGraphParam ", 0xFuLL);
    v991 = *(_OWORD *)&v990->__r_.__value_.__l.__data_;
    v1170.__r_.__value_.__r.__words[2] = v990->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v1170.__r_.__value_.__l.__data_ = v991;
    v990->__r_.__value_.__l.__size_ = 0;
    v990->__r_.__value_.__r.__words[2] = 0;
    v990->__r_.__value_.__r.__words[0] = 0;
    v992 = std::string::append(&v1170, " (", 2uLL);
    v993 = *(_OWORD *)&v992->__r_.__value_.__l.__data_;
    v1171.__r_.__value_.__r.__words[2] = v992->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v1171.__r_.__value_.__l.__data_ = v993;
    v992->__r_.__value_.__l.__size_ = 0;
    v992->__r_.__value_.__r.__words[2] = 0;
    v992->__r_.__value_.__r.__words[0] = 0;
    v994 = std::string::append(&v1171, "wide", 4uLL);
    v995 = *(_OWORD *)&v994->__r_.__value_.__l.__data_;
    v1172.__r_.__value_.__r.__words[2] = v994->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v1172.__r_.__value_.__l.__data_ = v995;
    v994->__r_.__value_.__l.__size_ = 0;
    v994->__r_.__value_.__r.__words[2] = 0;
    v994->__r_.__value_.__r.__words[0] = 0;
    v996 = std::string::append(&v1172, "BeamMixOverrideSwitch 2 0 0)\n", 0x1DuLL);
    v997 = *(_OWORD *)&v996->__r_.__value_.__l.__data_;
    v1177.__r_.__value_.__r.__words[2] = v996->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v1177.__r_.__value_.__l.__data_ = v997;
    v996->__r_.__value_.__l.__size_ = 0;
    v996->__r_.__value_.__r.__words[2] = 0;
    v996->__r_.__value_.__r.__words[0] = 0;
    if ((v1177.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v998 = &v1177;
    else
      v998 = (std::string *)v1177.__r_.__value_.__r.__words[0];
    if ((v1177.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v999 = HIBYTE(v1177.__r_.__value_.__r.__words[2]);
    else
      v999 = v1177.__r_.__value_.__l.__size_;
    std::string::append(&__x, (const std::string::value_type *)v998, v999);
    if (SHIBYTE(v1177.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v1177.__r_.__value_.__l.__data_);
    if (SHIBYTE(v1172.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v1172.__r_.__value_.__l.__data_);
    if (SHIBYTE(v1171.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v1171.__r_.__value_.__l.__data_);
    if (SHIBYTE(v1170.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v1170.__r_.__value_.__l.__data_);
    if (SHIBYTE(v1169.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v1169.__r_.__value_.__l.__data_);
    std::to_string(&v1169, 0x31u);
    v1000 = std::string::insert(&v1169, 0, "wireGraphParam ", 0xFuLL);
    v1001 = *(_OWORD *)&v1000->__r_.__value_.__l.__data_;
    v1170.__r_.__value_.__r.__words[2] = v1000->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v1170.__r_.__value_.__l.__data_ = v1001;
    v1000->__r_.__value_.__l.__size_ = 0;
    v1000->__r_.__value_.__r.__words[2] = 0;
    v1000->__r_.__value_.__r.__words[0] = 0;
    v1002 = std::string::append(&v1170, " (", 2uLL);
    v1003 = *(_OWORD *)&v1002->__r_.__value_.__l.__data_;
    v1171.__r_.__value_.__r.__words[2] = v1002->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v1171.__r_.__value_.__l.__data_ = v1003;
    v1002->__r_.__value_.__l.__size_ = 0;
    v1002->__r_.__value_.__r.__words[2] = 0;
    v1002->__r_.__value_.__r.__words[0] = 0;
    v1004 = std::string::append(&v1171, "focused", 7uLL);
    v1005 = *(_OWORD *)&v1004->__r_.__value_.__l.__data_;
    v1172.__r_.__value_.__r.__words[2] = v1004->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v1172.__r_.__value_.__l.__data_ = v1005;
    v1004->__r_.__value_.__l.__size_ = 0;
    v1004->__r_.__value_.__r.__words[2] = 0;
    v1004->__r_.__value_.__r.__words[0] = 0;
    v1006 = std::string::append(&v1172, "BeamMixOverrideSwitch 0 0 0)\n", 0x1DuLL);
    v1007 = *(_OWORD *)&v1006->__r_.__value_.__l.__data_;
    v1177.__r_.__value_.__r.__words[2] = v1006->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v1177.__r_.__value_.__l.__data_ = v1007;
    v1006->__r_.__value_.__l.__size_ = 0;
    v1006->__r_.__value_.__r.__words[2] = 0;
    v1006->__r_.__value_.__r.__words[0] = 0;
    if ((v1177.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v1008 = &v1177;
    else
      v1008 = (std::string *)v1177.__r_.__value_.__r.__words[0];
    if ((v1177.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v1009 = HIBYTE(v1177.__r_.__value_.__r.__words[2]);
    else
      v1009 = v1177.__r_.__value_.__l.__size_;
    std::string::append(&__x, (const std::string::value_type *)v1008, v1009);
    if (SHIBYTE(v1177.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v1177.__r_.__value_.__l.__data_);
    if (SHIBYTE(v1172.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v1172.__r_.__value_.__l.__data_);
    if (SHIBYTE(v1171.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v1171.__r_.__value_.__l.__data_);
    if (SHIBYTE(v1170.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v1170.__r_.__value_.__l.__data_);
    if (SHIBYTE(v1169.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v1169.__r_.__value_.__l.__data_);
    std::to_string(&v1169, 0x31u);
    v1010 = std::string::insert(&v1169, 0, "wireGraphParam ", 0xFuLL);
    v1011 = *(_OWORD *)&v1010->__r_.__value_.__l.__data_;
    v1170.__r_.__value_.__r.__words[2] = v1010->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v1170.__r_.__value_.__l.__data_ = v1011;
    v1010->__r_.__value_.__l.__size_ = 0;
    v1010->__r_.__value_.__r.__words[2] = 0;
    v1010->__r_.__value_.__r.__words[0] = 0;
    v1012 = std::string::append(&v1170, " (", 2uLL);
    v1013 = *(_OWORD *)&v1012->__r_.__value_.__l.__data_;
    v1171.__r_.__value_.__r.__words[2] = v1012->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v1171.__r_.__value_.__l.__data_ = v1013;
    v1012->__r_.__value_.__l.__size_ = 0;
    v1012->__r_.__value_.__r.__words[2] = 0;
    v1012->__r_.__value_.__r.__words[0] = 0;
    v1014 = std::string::append(&v1171, "wide", 4uLL);
    v1015 = *(_OWORD *)&v1014->__r_.__value_.__l.__data_;
    v1172.__r_.__value_.__r.__words[2] = v1014->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v1172.__r_.__value_.__l.__data_ = v1015;
    v1014->__r_.__value_.__l.__size_ = 0;
    v1014->__r_.__value_.__r.__words[2] = 0;
    v1014->__r_.__value_.__r.__words[0] = 0;
    v1016 = std::string::append(&v1172, "BeamMixOverrideSwitch 0 0 0)\n", 0x1DuLL);
    v1017 = *(_OWORD *)&v1016->__r_.__value_.__l.__data_;
    v1177.__r_.__value_.__r.__words[2] = v1016->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v1177.__r_.__value_.__l.__data_ = v1017;
    v1016->__r_.__value_.__l.__size_ = 0;
    v1016->__r_.__value_.__r.__words[2] = 0;
    v1016->__r_.__value_.__r.__words[0] = 0;
    if ((v1177.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v1018 = &v1177;
    else
      v1018 = (std::string *)v1177.__r_.__value_.__r.__words[0];
    if ((v1177.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v1019 = HIBYTE(v1177.__r_.__value_.__r.__words[2]);
    else
      v1019 = v1177.__r_.__value_.__l.__size_;
    std::string::append(&__x, (const std::string::value_type *)v1018, v1019);
    if (SHIBYTE(v1177.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v1177.__r_.__value_.__l.__data_);
    if (SHIBYTE(v1172.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v1172.__r_.__value_.__l.__data_);
    if (SHIBYTE(v1171.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v1171.__r_.__value_.__l.__data_);
    if (SHIBYTE(v1170.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v1170.__r_.__value_.__l.__data_);
    if (SHIBYTE(v1169.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v1169.__r_.__value_.__l.__data_);
    std::to_string(&v1171, 0);
    v1020 = std::string::insert(&v1171, 0, "wireGraphParam ", 0xFuLL);
    v1021 = *(_OWORD *)&v1020->__r_.__value_.__l.__data_;
    v1172.__r_.__value_.__r.__words[2] = v1020->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v1172.__r_.__value_.__l.__data_ = v1021;
    v1020->__r_.__value_.__l.__size_ = 0;
    v1020->__r_.__value_.__r.__words[2] = 0;
    v1020->__r_.__value_.__r.__words[0] = 0;
    v1022 = std::string::append(&v1172, " (defaultBeamGainCamDirSwitch 0 0 0)\n", 0x25uLL);
    v1023 = *(_OWORD *)&v1022->__r_.__value_.__l.__data_;
    v1177.__r_.__value_.__r.__words[2] = v1022->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v1177.__r_.__value_.__l.__data_ = v1023;
    v1022->__r_.__value_.__l.__size_ = 0;
    v1022->__r_.__value_.__r.__words[2] = 0;
    v1022->__r_.__value_.__r.__words[0] = 0;
    if ((v1177.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v1024 = &v1177;
    else
      v1024 = (std::string *)v1177.__r_.__value_.__r.__words[0];
    if ((v1177.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v1025 = HIBYTE(v1177.__r_.__value_.__r.__words[2]);
    else
      v1025 = v1177.__r_.__value_.__l.__size_;
    std::string::append(&__x, (const std::string::value_type *)v1024, v1025);
    if (SHIBYTE(v1177.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v1177.__r_.__value_.__l.__data_);
    if (SHIBYTE(v1172.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v1172.__r_.__value_.__l.__data_);
    if (SHIBYTE(v1171.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v1171.__r_.__value_.__l.__data_);
    std::to_string(&v1171, 0x32u);
    v1026 = std::string::insert(&v1171, 0, "wireGraphParam ", 0xFuLL);
    v1027 = *(_OWORD *)&v1026->__r_.__value_.__l.__data_;
    v1172.__r_.__value_.__r.__words[2] = v1026->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v1172.__r_.__value_.__l.__data_ = v1027;
    v1026->__r_.__value_.__l.__size_ = 0;
    v1026->__r_.__value_.__r.__words[2] = 0;
    v1026->__r_.__value_.__r.__words[0] = 0;
    v1028 = std::string::append(&v1172, " (defaultBeamGainCamDirSwitch 1 0 0)\n", 0x25uLL);
    v1029 = *(_OWORD *)&v1028->__r_.__value_.__l.__data_;
    v1177.__r_.__value_.__r.__words[2] = v1028->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v1177.__r_.__value_.__l.__data_ = v1029;
    v1028->__r_.__value_.__l.__size_ = 0;
    v1028->__r_.__value_.__r.__words[2] = 0;
    v1028->__r_.__value_.__r.__words[0] = 0;
    if ((v1177.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v1030 = &v1177;
    else
      v1030 = (std::string *)v1177.__r_.__value_.__r.__words[0];
    if ((v1177.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v1031 = HIBYTE(v1177.__r_.__value_.__r.__words[2]);
    else
      v1031 = v1177.__r_.__value_.__l.__size_;
    std::string::append(&__x, (const std::string::value_type *)v1030, v1031);
    if (SHIBYTE(v1177.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v1177.__r_.__value_.__l.__data_);
    if (SHIBYTE(v1172.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v1172.__r_.__value_.__l.__data_);
    if (SHIBYTE(v1171.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v1171.__r_.__value_.__l.__data_);
    std::to_string(&v1169, 0x35u);
    v1032 = std::string::insert(&v1169, 0, "wireGraphParam ", 0xFuLL);
    v1033 = *(_OWORD *)&v1032->__r_.__value_.__l.__data_;
    v1170.__r_.__value_.__r.__words[2] = v1032->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v1170.__r_.__value_.__l.__data_ = v1033;
    v1032->__r_.__value_.__l.__size_ = 0;
    v1032->__r_.__value_.__r.__words[2] = 0;
    v1032->__r_.__value_.__r.__words[0] = 0;
    v1034 = std::string::append(&v1170, " (", 2uLL);
    v1035 = *(_OWORD *)&v1034->__r_.__value_.__l.__data_;
    v1171.__r_.__value_.__r.__words[2] = v1034->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v1171.__r_.__value_.__l.__data_ = v1035;
    v1034->__r_.__value_.__l.__size_ = 0;
    v1034->__r_.__value_.__r.__words[2] = 0;
    v1034->__r_.__value_.__r.__words[0] = 0;
    v1036 = std::string::append(&v1171, "wide", 4uLL);
    v1037 = *(_OWORD *)&v1036->__r_.__value_.__l.__data_;
    v1172.__r_.__value_.__r.__words[2] = v1036->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v1172.__r_.__value_.__l.__data_ = v1037;
    v1036->__r_.__value_.__l.__size_ = 0;
    v1036->__r_.__value_.__r.__words[2] = 0;
    v1036->__r_.__value_.__r.__words[0] = 0;
    v1038 = std::string::append(&v1172, "BeamGainCamDirSwitch 2 0 0)\n", 0x1CuLL);
    v1039 = *(_OWORD *)&v1038->__r_.__value_.__l.__data_;
    v1177.__r_.__value_.__r.__words[2] = v1038->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v1177.__r_.__value_.__l.__data_ = v1039;
    v1038->__r_.__value_.__l.__size_ = 0;
    v1038->__r_.__value_.__r.__words[2] = 0;
    v1038->__r_.__value_.__r.__words[0] = 0;
    if ((v1177.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v1040 = &v1177;
    else
      v1040 = (std::string *)v1177.__r_.__value_.__r.__words[0];
    if ((v1177.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v1041 = HIBYTE(v1177.__r_.__value_.__r.__words[2]);
    else
      v1041 = v1177.__r_.__value_.__l.__size_;
    std::string::append(&__x, (const std::string::value_type *)v1040, v1041);
    if (SHIBYTE(v1177.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v1177.__r_.__value_.__l.__data_);
    if (SHIBYTE(v1172.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v1172.__r_.__value_.__l.__data_);
    if (SHIBYTE(v1171.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v1171.__r_.__value_.__l.__data_);
    if (SHIBYTE(v1170.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v1170.__r_.__value_.__l.__data_);
    if (SHIBYTE(v1169.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v1169.__r_.__value_.__l.__data_);
    std::to_string(&v1169, 0x34u);
    v1042 = std::string::insert(&v1169, 0, "wireGraphParam ", 0xFuLL);
    v1043 = *(_OWORD *)&v1042->__r_.__value_.__l.__data_;
    v1170.__r_.__value_.__r.__words[2] = v1042->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v1170.__r_.__value_.__l.__data_ = v1043;
    v1042->__r_.__value_.__l.__size_ = 0;
    v1042->__r_.__value_.__r.__words[2] = 0;
    v1042->__r_.__value_.__r.__words[0] = 0;
    v1044 = std::string::append(&v1170, " (", 2uLL);
    v1045 = *(_OWORD *)&v1044->__r_.__value_.__l.__data_;
    v1171.__r_.__value_.__r.__words[2] = v1044->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v1171.__r_.__value_.__l.__data_ = v1045;
    v1044->__r_.__value_.__l.__size_ = 0;
    v1044->__r_.__value_.__r.__words[2] = 0;
    v1044->__r_.__value_.__r.__words[0] = 0;
    v1046 = std::string::append(&v1171, "focused", 7uLL);
    v1047 = *(_OWORD *)&v1046->__r_.__value_.__l.__data_;
    v1172.__r_.__value_.__r.__words[2] = v1046->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v1172.__r_.__value_.__l.__data_ = v1047;
    v1046->__r_.__value_.__l.__size_ = 0;
    v1046->__r_.__value_.__r.__words[2] = 0;
    v1046->__r_.__value_.__r.__words[0] = 0;
    v1048 = std::string::append(&v1172, "BeamGainCamDirSwitch 2 0 0)\n", 0x1CuLL);
    v1049 = *(_OWORD *)&v1048->__r_.__value_.__l.__data_;
    v1177.__r_.__value_.__r.__words[2] = v1048->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v1177.__r_.__value_.__l.__data_ = v1049;
    v1048->__r_.__value_.__l.__size_ = 0;
    v1048->__r_.__value_.__r.__words[2] = 0;
    v1048->__r_.__value_.__r.__words[0] = 0;
    if ((v1177.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v1050 = &v1177;
    else
      v1050 = (std::string *)v1177.__r_.__value_.__r.__words[0];
    if ((v1177.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v1051 = HIBYTE(v1177.__r_.__value_.__r.__words[2]);
    else
      v1051 = v1177.__r_.__value_.__l.__size_;
    std::string::append(&__x, (const std::string::value_type *)v1050, v1051);
    if (SHIBYTE(v1177.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v1177.__r_.__value_.__l.__data_);
    if (SHIBYTE(v1172.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v1172.__r_.__value_.__l.__data_);
    if (SHIBYTE(v1171.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v1171.__r_.__value_.__l.__data_);
    if (SHIBYTE(v1170.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v1170.__r_.__value_.__l.__data_);
    if (SHIBYTE(v1169.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v1169.__r_.__value_.__l.__data_);
    std::to_string(&v1171, 0x33u);
    v1052 = std::string::insert(&v1171, 0, "wireGraphParam ", 0xFuLL);
    v1053 = *(_OWORD *)&v1052->__r_.__value_.__l.__data_;
    v1172.__r_.__value_.__r.__words[2] = v1052->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v1172.__r_.__value_.__l.__data_ = v1053;
    v1052->__r_.__value_.__l.__size_ = 0;
    v1052->__r_.__value_.__r.__words[2] = 0;
    v1052->__r_.__value_.__r.__words[0] = 0;
    v1054 = std::string::append(&v1172, " (defaultBeamGainCamDirSwitch 2 0 0)\n", 0x25uLL);
    v1055 = *(_OWORD *)&v1054->__r_.__value_.__l.__data_;
    v1177.__r_.__value_.__r.__words[2] = v1054->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v1177.__r_.__value_.__l.__data_ = v1055;
    v1054->__r_.__value_.__l.__size_ = 0;
    v1054->__r_.__value_.__r.__words[2] = 0;
    v1054->__r_.__value_.__r.__words[0] = 0;
    if ((v1177.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v1056 = &v1177;
    else
      v1056 = (std::string *)v1177.__r_.__value_.__r.__words[0];
    if ((v1177.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v1057 = HIBYTE(v1177.__r_.__value_.__r.__words[2]);
    else
      v1057 = v1177.__r_.__value_.__l.__size_;
    std::string::append(&__x, (const std::string::value_type *)v1056, v1057);
    if (SHIBYTE(v1177.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v1177.__r_.__value_.__l.__data_);
    if (SHIBYTE(v1172.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v1172.__r_.__value_.__l.__data_);
    if (SHIBYTE(v1171.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v1171.__r_.__value_.__l.__data_);
    std::string::basic_string[abi:ne180100]<0>(&v1168, "wireParam (");
    v1058 = std::string::append(&v1168, "focused", 7uLL);
    v1059 = *(_OWORD *)&v1058->__r_.__value_.__l.__data_;
    v1176.__r_.__value_.__r.__words[2] = v1058->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v1176.__r_.__value_.__l.__data_ = v1059;
    v1058->__r_.__value_.__l.__size_ = 0;
    v1058->__r_.__value_.__r.__words[2] = 0;
    v1058->__r_.__value_.__r.__words[0] = 0;
    v1060 = std::string::append(&v1176, "BeamGainCamDirSwitch 0 0 0) (", 0x1DuLL);
    v1061 = *(_OWORD *)&v1060->__r_.__value_.__l.__data_;
    v1169.__r_.__value_.__r.__words[2] = v1060->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v1169.__r_.__value_.__l.__data_ = v1061;
    v1060->__r_.__value_.__l.__size_ = 0;
    v1060->__r_.__value_.__r.__words[2] = 0;
    v1060->__r_.__value_.__r.__words[0] = 0;
    v1062 = std::string::append(&v1169, "focused", 7uLL);
    v1063 = *(_OWORD *)&v1062->__r_.__value_.__l.__data_;
    v1170.__r_.__value_.__r.__words[2] = v1062->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v1170.__r_.__value_.__l.__data_ = v1063;
    v1062->__r_.__value_.__l.__size_ = 0;
    v1062->__r_.__value_.__r.__words[2] = 0;
    v1062->__r_.__value_.__r.__words[0] = 0;
    v1064 = std::string::append(&v1170, "VsSpatialMix ", 0xDuLL);
    v1065 = *(_OWORD *)&v1064->__r_.__value_.__l.__data_;
    v1171.__r_.__value_.__r.__words[2] = v1064->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v1171.__r_.__value_.__l.__data_ = v1065;
    v1064->__r_.__value_.__l.__size_ = 0;
    v1064->__r_.__value_.__r.__words[2] = 0;
    v1064->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v1167, 2u);
    if ((v1167.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v1066 = &v1167;
    else
      v1066 = (std::string *)v1167.__r_.__value_.__r.__words[0];
    if ((v1167.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v1067 = HIBYTE(v1167.__r_.__value_.__r.__words[2]);
    else
      v1067 = v1167.__r_.__value_.__l.__size_;
    v1068 = std::string::append(&v1171, (const std::string::value_type *)v1066, v1067);
    v1069 = *(_OWORD *)&v1068->__r_.__value_.__l.__data_;
    v1172.__r_.__value_.__r.__words[2] = v1068->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v1172.__r_.__value_.__l.__data_ = v1069;
    v1068->__r_.__value_.__l.__size_ = 0;
    v1068->__r_.__value_.__r.__words[2] = 0;
    v1068->__r_.__value_.__r.__words[0] = 0;
    v1070 = std::string::append(&v1172, " 0 0) true\n", 0xBuLL);
    v1071 = *(_OWORD *)&v1070->__r_.__value_.__l.__data_;
    v1177.__r_.__value_.__r.__words[2] = v1070->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v1177.__r_.__value_.__l.__data_ = v1071;
    v1070->__r_.__value_.__l.__size_ = 0;
    v1070->__r_.__value_.__r.__words[2] = 0;
    v1070->__r_.__value_.__r.__words[0] = 0;
    if ((v1177.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v1072 = &v1177;
    else
      v1072 = (std::string *)v1177.__r_.__value_.__r.__words[0];
    if ((v1177.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v1073 = HIBYTE(v1177.__r_.__value_.__r.__words[2]);
    else
      v1073 = v1177.__r_.__value_.__l.__size_;
    std::string::append(&__x, (const std::string::value_type *)v1072, v1073);
    if (SHIBYTE(v1177.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v1177.__r_.__value_.__l.__data_);
    if (SHIBYTE(v1172.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v1172.__r_.__value_.__l.__data_);
    if (SHIBYTE(v1167.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v1167.__r_.__value_.__l.__data_);
    if (SHIBYTE(v1171.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v1171.__r_.__value_.__l.__data_);
    if (SHIBYTE(v1170.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v1170.__r_.__value_.__l.__data_);
    if (SHIBYTE(v1169.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v1169.__r_.__value_.__l.__data_);
    if (SHIBYTE(v1176.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v1176.__r_.__value_.__l.__data_);
    if (SHIBYTE(v1168.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v1168.__r_.__value_.__l.__data_);
    std::string::basic_string[abi:ne180100]<0>(&v1168, "wireParam (");
    v1074 = std::string::append(&v1168, "wide", 4uLL);
    v1075 = *(_OWORD *)&v1074->__r_.__value_.__l.__data_;
    v1176.__r_.__value_.__r.__words[2] = v1074->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v1176.__r_.__value_.__l.__data_ = v1075;
    v1074->__r_.__value_.__l.__size_ = 0;
    v1074->__r_.__value_.__r.__words[2] = 0;
    v1074->__r_.__value_.__r.__words[0] = 0;
    v1076 = std::string::append(&v1176, "BeamGainCamDirSwitch 0 0 0) (", 0x1DuLL);
    v1077 = *(_OWORD *)&v1076->__r_.__value_.__l.__data_;
    v1169.__r_.__value_.__r.__words[2] = v1076->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v1169.__r_.__value_.__l.__data_ = v1077;
    v1076->__r_.__value_.__l.__size_ = 0;
    v1076->__r_.__value_.__r.__words[2] = 0;
    v1076->__r_.__value_.__r.__words[0] = 0;
    v1078 = std::string::append(&v1169, "wide", 4uLL);
    v1079 = *(_OWORD *)&v1078->__r_.__value_.__l.__data_;
    v1170.__r_.__value_.__r.__words[2] = v1078->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v1170.__r_.__value_.__l.__data_ = v1079;
    v1078->__r_.__value_.__l.__size_ = 0;
    v1078->__r_.__value_.__r.__words[2] = 0;
    v1078->__r_.__value_.__r.__words[0] = 0;
    v1080 = std::string::append(&v1170, "VsSpatialMix ", 0xDuLL);
    v1081 = *(_OWORD *)&v1080->__r_.__value_.__l.__data_;
    v1171.__r_.__value_.__r.__words[2] = v1080->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v1171.__r_.__value_.__l.__data_ = v1081;
    v1080->__r_.__value_.__l.__size_ = 0;
    v1080->__r_.__value_.__r.__words[2] = 0;
    v1080->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v1167, 1u);
    if ((v1167.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v1082 = &v1167;
    else
      v1082 = (std::string *)v1167.__r_.__value_.__r.__words[0];
    if ((v1167.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v1083 = HIBYTE(v1167.__r_.__value_.__r.__words[2]);
    else
      v1083 = v1167.__r_.__value_.__l.__size_;
    v1084 = std::string::append(&v1171, (const std::string::value_type *)v1082, v1083);
    v1085 = *(_OWORD *)&v1084->__r_.__value_.__l.__data_;
    v1172.__r_.__value_.__r.__words[2] = v1084->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v1172.__r_.__value_.__l.__data_ = v1085;
    v1084->__r_.__value_.__l.__size_ = 0;
    v1084->__r_.__value_.__r.__words[2] = 0;
    v1084->__r_.__value_.__r.__words[0] = 0;
    v1086 = std::string::append(&v1172, " 0 0) true\n", 0xBuLL);
    v1087 = *(_OWORD *)&v1086->__r_.__value_.__l.__data_;
    v1177.__r_.__value_.__r.__words[2] = v1086->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v1177.__r_.__value_.__l.__data_ = v1087;
    v1086->__r_.__value_.__l.__size_ = 0;
    v1086->__r_.__value_.__r.__words[2] = 0;
    v1086->__r_.__value_.__r.__words[0] = 0;
    if ((v1177.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v1088 = &v1177;
    else
      v1088 = (std::string *)v1177.__r_.__value_.__r.__words[0];
    if ((v1177.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v1089 = HIBYTE(v1177.__r_.__value_.__r.__words[2]);
    else
      v1089 = v1177.__r_.__value_.__l.__size_;
    std::string::append(&__x, (const std::string::value_type *)v1088, v1089);
    if (SHIBYTE(v1177.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v1177.__r_.__value_.__l.__data_);
    if (SHIBYTE(v1172.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v1172.__r_.__value_.__l.__data_);
    if (SHIBYTE(v1167.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v1167.__r_.__value_.__l.__data_);
    if (SHIBYTE(v1171.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v1171.__r_.__value_.__l.__data_);
    if (SHIBYTE(v1170.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v1170.__r_.__value_.__l.__data_);
    if (SHIBYTE(v1169.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v1169.__r_.__value_.__l.__data_);
    if (SHIBYTE(v1176.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v1176.__r_.__value_.__l.__data_);
    if (SHIBYTE(v1168.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v1168.__r_.__value_.__l.__data_);
    v1090 = (std::string *)std::string::basic_string[abi:ne180100]<0>(&v1176, "wireParam (");
    v1091 = std::string::append(v1090, "defaultBeamGainCamDirSwitch 0 0 0) (", 0x24uLL);
    v1092 = *(_OWORD *)&v1091->__r_.__value_.__l.__data_;
    v1169.__r_.__value_.__r.__words[2] = v1091->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v1169.__r_.__value_.__l.__data_ = v1092;
    v1091->__r_.__value_.__l.__size_ = 0;
    v1091->__r_.__value_.__r.__words[2] = 0;
    v1091->__r_.__value_.__r.__words[0] = 0;
    v1093 = std::string::append(&v1169, "wide", 4uLL);
    v1094 = *(_OWORD *)&v1093->__r_.__value_.__l.__data_;
    v1170.__r_.__value_.__r.__words[2] = v1093->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v1170.__r_.__value_.__l.__data_ = v1094;
    v1093->__r_.__value_.__l.__size_ = 0;
    v1093->__r_.__value_.__r.__words[2] = 0;
    v1093->__r_.__value_.__r.__words[0] = 0;
    v1095 = std::string::append(&v1170, "VsSpatialMix ", 0xDuLL);
    v1096 = *(_OWORD *)&v1095->__r_.__value_.__l.__data_;
    v1171.__r_.__value_.__r.__words[2] = v1095->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v1171.__r_.__value_.__l.__data_ = v1096;
    v1095->__r_.__value_.__l.__size_ = 0;
    v1095->__r_.__value_.__r.__words[2] = 0;
    v1095->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v1168, 2u);
    if ((v1168.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v1097 = &v1168;
    else
      v1097 = (std::string *)v1168.__r_.__value_.__r.__words[0];
    if ((v1168.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v1098 = HIBYTE(v1168.__r_.__value_.__r.__words[2]);
    else
      v1098 = v1168.__r_.__value_.__l.__size_;
    v1099 = std::string::append(&v1171, (const std::string::value_type *)v1097, v1098);
    v1100 = *(_OWORD *)&v1099->__r_.__value_.__l.__data_;
    v1172.__r_.__value_.__r.__words[2] = v1099->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v1172.__r_.__value_.__l.__data_ = v1100;
    v1099->__r_.__value_.__l.__size_ = 0;
    v1099->__r_.__value_.__r.__words[2] = 0;
    v1099->__r_.__value_.__r.__words[0] = 0;
    v1101 = std::string::append(&v1172, " 0 0) true\n", 0xBuLL);
    v1102 = *(_OWORD *)&v1101->__r_.__value_.__l.__data_;
    v1177.__r_.__value_.__r.__words[2] = v1101->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v1177.__r_.__value_.__l.__data_ = v1102;
    v1101->__r_.__value_.__l.__size_ = 0;
    v1101->__r_.__value_.__r.__words[2] = 0;
    v1101->__r_.__value_.__r.__words[0] = 0;
    if ((v1177.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v1103 = &v1177;
    else
      v1103 = (std::string *)v1177.__r_.__value_.__r.__words[0];
    if ((v1177.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v1104 = HIBYTE(v1177.__r_.__value_.__r.__words[2]);
    else
      v1104 = v1177.__r_.__value_.__l.__size_;
    std::string::append(&__x, (const std::string::value_type *)v1103, v1104);
    if (SHIBYTE(v1177.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v1177.__r_.__value_.__l.__data_);
    if (SHIBYTE(v1172.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v1172.__r_.__value_.__l.__data_);
    if (SHIBYTE(v1168.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v1168.__r_.__value_.__l.__data_);
    if (SHIBYTE(v1171.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v1171.__r_.__value_.__l.__data_);
    if (SHIBYTE(v1170.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v1170.__r_.__value_.__l.__data_);
    if (SHIBYTE(v1169.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v1169.__r_.__value_.__l.__data_);
    if (SHIBYTE(v1176.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v1176.__r_.__value_.__l.__data_);
    if (!AppBooleanValue)
      goto LABEL_1031;
    if (SCLogScope(void)::once != -1)
      dispatch_once(&SCLogScope(void)::once, &__block_literal_global_11993);
    if (SCLogScope(void)::scope)
    {
      v1105 = *(id *)SCLogScope(void)::scope;
      if (!v1105)
        goto LABEL_2160;
    }
    else
    {
      v1105 = (id)MEMORY[0x1E0C81028];
      v1126 = MEMORY[0x1E0C81028];
    }
    v1127 = v1105;
    if (os_log_type_enabled(v1127, OS_LOG_TYPE_DEFAULT))
    {
      LODWORD(v1177.__r_.__value_.__l.__data_) = 136315394;
      *(std::string::size_type *)((char *)v1177.__r_.__value_.__r.__words + 4) = (std::string::size_type)"SpatialCapture.mm";
      WORD2(v1177.__r_.__value_.__r.__words[1]) = 1024;
      *(_DWORD *)((char *)&v1177.__r_.__value_.__r.__words[1] + 6) = 488;
      _os_log_impl(&dword_1B5ED0000, v1127, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Enabling recording", (uint8_t *)&v1177, 0x12u);
    }

LABEL_2160:
    std::operator+<char>();
    v1128 = std::string::append(&v1166, "ref-in-sc.wav\"     refIn \n            record \"", 0x2EuLL);
    v1129 = *(_OWORD *)&v1128->__r_.__value_.__l.__data_;
    v1167.__r_.__value_.__r.__words[2] = v1128->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v1167.__r_.__value_.__l.__data_ = v1129;
    v1128->__r_.__value_.__l.__size_ = 0;
    v1128->__r_.__value_.__r.__words[2] = 0;
    v1128->__r_.__value_.__r.__words[0] = 0;
    v1130 = *(char *)(a5 + 23);
    if (v1130 >= 0)
      v1131 = (const std::string::value_type *)a5;
    else
      v1131 = *(const std::string::value_type **)a5;
    if (v1130 >= 0)
      v1132 = *(unsigned __int8 *)(a5 + 23);
    else
      v1132 = *(_QWORD *)(a5 + 8);
    v1133 = std::string::append(&v1167, v1131, v1132);
    v1134 = *(_OWORD *)&v1133->__r_.__value_.__l.__data_;
    v1168.__r_.__value_.__r.__words[2] = v1133->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v1168.__r_.__value_.__l.__data_ = v1134;
    v1133->__r_.__value_.__l.__size_ = 0;
    v1133->__r_.__value_.__r.__words[2] = 0;
    v1133->__r_.__value_.__r.__words[0] = 0;
    v1135 = std::string::append(&v1168, "linFullSignal-sc.wav\"     (linFullSignal 2) \n            record \"", 0x41uLL);
    v1136 = *(_OWORD *)&v1135->__r_.__value_.__l.__data_;
    v1176.__r_.__value_.__r.__words[2] = v1135->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v1176.__r_.__value_.__l.__data_ = v1136;
    v1135->__r_.__value_.__l.__size_ = 0;
    v1135->__r_.__value_.__r.__words[2] = 0;
    v1135->__r_.__value_.__r.__words[0] = 0;
    v1137 = *(char *)(a5 + 23);
    if (v1137 >= 0)
      v1138 = (const std::string::value_type *)a5;
    else
      v1138 = *(const std::string::value_type **)a5;
    if (v1137 >= 0)
      v1139 = *(unsigned __int8 *)(a5 + 23);
    else
      v1139 = *(_QWORD *)(a5 + 8);
    v1140 = std::string::append(&v1176, v1138, v1139);
    v1141 = *(_OWORD *)&v1140->__r_.__value_.__l.__data_;
    v1169.__r_.__value_.__r.__words[2] = v1140->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v1169.__r_.__value_.__l.__data_ = v1141;
    v1140->__r_.__value_.__l.__size_ = 0;
    v1140->__r_.__value_.__r.__words[2] = 0;
    v1140->__r_.__value_.__r.__words[0] = 0;
    v1142 = std::string::append(&v1169, "linPatcher-sc.wav\"     linPatcher \n            record \"", 0x37uLL);
    v1143 = *(_OWORD *)&v1142->__r_.__value_.__l.__data_;
    v1170.__r_.__value_.__r.__words[2] = v1142->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v1170.__r_.__value_.__l.__data_ = v1143;
    v1142->__r_.__value_.__l.__size_ = 0;
    v1142->__r_.__value_.__r.__words[2] = 0;
    v1142->__r_.__value_.__r.__words[0] = 0;
    v1144 = *(char *)(a5 + 23);
    if (v1144 >= 0)
      v1145 = (const std::string::value_type *)a5;
    else
      v1145 = *(const std::string::value_type **)a5;
    if (v1144 >= 0)
      v1146 = *(unsigned __int8 *)(a5 + 23);
    else
      v1146 = *(_QWORD *)(a5 + 8);
    v1147 = std::string::append(&v1170, v1145, v1146);
    v1148 = *(_OWORD *)&v1147->__r_.__value_.__l.__data_;
    v1171.__r_.__value_.__r.__words[2] = v1147->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v1171.__r_.__value_.__l.__data_ = v1148;
    v1147->__r_.__value_.__l.__size_ = 0;
    v1147->__r_.__value_.__r.__words[2] = 0;
    v1147->__r_.__value_.__r.__words[0] = 0;
    v1149 = std::string::append(&v1171, "focusedPatcher-sc.wav\"     focusedPatcher \n            record \"", 0x3FuLL);
    v1150 = *(_OWORD *)&v1149->__r_.__value_.__l.__data_;
    v1172.__r_.__value_.__r.__words[2] = v1149->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v1172.__r_.__value_.__l.__data_ = v1150;
    v1149->__r_.__value_.__l.__size_ = 0;
    v1149->__r_.__value_.__r.__words[2] = 0;
    v1149->__r_.__value_.__r.__words[0] = 0;
    v1151 = *(char *)(a5 + 23);
    if (v1151 >= 0)
      v1152 = (const std::string::value_type *)a5;
    else
      v1152 = *(const std::string::value_type **)a5;
    if (v1151 >= 0)
      v1153 = *(unsigned __int8 *)(a5 + 23);
    else
      v1153 = *(_QWORD *)(a5 + 8);
    v1154 = std::string::append(&v1172, v1152, v1153);
    v1155 = *(_OWORD *)&v1154->__r_.__value_.__l.__data_;
    v1177.__r_.__value_.__r.__words[2] = v1154->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v1177.__r_.__value_.__l.__data_ = v1155;
    v1154->__r_.__value_.__l.__size_ = 0;
    v1154->__r_.__value_.__r.__words[2] = 0;
    v1154->__r_.__value_.__r.__words[0] = 0;
    v1156 = std::string::append(&v1177, "focused-sc.wav\"     (focused 2) \n            ", 0x2DuLL);
    v1157 = (char *)v1156->__r_.__value_.__r.__words[0];
    v1175.__r_.__value_.__r.__words[0] = v1156->__r_.__value_.__l.__size_;
    *(std::string::size_type *)((char *)v1175.__r_.__value_.__r.__words + 7) = *(std::string::size_type *)((char *)&v1156->__r_.__value_.__r.__words[1] + 7);
    v1158 = HIBYTE(v1156->__r_.__value_.__r.__words[2]);
    v1156->__r_.__value_.__l.__size_ = 0;
    v1156->__r_.__value_.__r.__words[2] = 0;
    v1156->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v1174.__end_cap_.__value_) < 0)
      operator delete(v1174.__begin_);
    v1174.__begin_ = v1157;
    v1174.__end_ = (std::vector<char>::pointer)v1175.__r_.__value_.__r.__words[0];
    *(std::vector<char>::pointer *)((char *)&v1174.__end_ + 7) = *(std::vector<char>::pointer *)((char *)v1175.__r_.__value_.__r.__words
                                                                                               + 7);
    HIBYTE(v1174.__end_cap_.__value_) = v1158;
    if (SHIBYTE(v1177.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v1177.__r_.__value_.__l.__data_);
    if (SHIBYTE(v1172.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v1172.__r_.__value_.__l.__data_);
    if (SHIBYTE(v1171.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v1171.__r_.__value_.__l.__data_);
    if (SHIBYTE(v1170.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v1170.__r_.__value_.__l.__data_);
    if (SHIBYTE(v1169.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v1169.__r_.__value_.__l.__data_);
    if (SHIBYTE(v1176.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v1176.__r_.__value_.__l.__data_);
    if (SHIBYTE(v1168.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v1168.__r_.__value_.__l.__data_);
    if (SHIBYTE(v1167.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v1167.__r_.__value_.__l.__data_);
    if (SHIBYTE(v1166.__r_.__value_.__r.__words[2]) < 0)
    {
      v1125 = (void *)v1166.__r_.__value_.__r.__words[0];
      goto LABEL_2204;
    }
    goto LABEL_1031;
  }
LABEL_1022:
  if (SCLogScope(void)::once != -1)
    dispatch_once(&SCLogScope(void)::once, &__block_literal_global_11993);
  if (SCLogScope(void)::scope)
  {
    v518 = *(id *)SCLogScope(void)::scope;
    if (!v518)
      goto LABEL_1031;
  }
  else
  {
    v518 = (id)MEMORY[0x1E0C81028];
    v519 = MEMORY[0x1E0C81028];
  }
  v520 = v518;
  if (os_log_type_enabled(v520, OS_LOG_TYPE_ERROR))
  {
    LODWORD(v1177.__r_.__value_.__l.__data_) = 136315394;
    *(std::string::size_type *)((char *)v1177.__r_.__value_.__r.__words + 4) = (std::string::size_type)"SpatialCapture.mm";
    WORD2(v1177.__r_.__value_.__r.__words[1]) = 1024;
    *(_DWORD *)((char *)&v1177.__r_.__value_.__r.__words[1] + 6) = 503;
    _os_log_impl(&dword_1B5ED0000, v520, OS_LOG_TYPE_ERROR, "%25s:%-5d Plist has a bad render mode selectino", (uint8_t *)&v1177, 0x12u);
  }

LABEL_1031:
  if ((__x.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v521 = &__x;
  else
    v521 = (std::string *)__x.__r_.__value_.__r.__words[0];
  if ((__x.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v522 = HIBYTE(__x.__r_.__value_.__r.__words[2]);
  else
    v522 = __x.__r_.__value_.__l.__size_;
  std::string::append(a1, (const std::string::value_type *)v521, v522);
  if (SHIBYTE(v1174.__end_cap_.__value_) >= 0)
    v523 = (const std::string::value_type *)&v1174;
  else
    v523 = v1174.__begin_;
  if (SHIBYTE(v1174.__end_cap_.__value_) >= 0)
    value_high = (std::vector<char>::pointer)HIBYTE(v1174.__end_cap_.__value_);
  else
    value_high = v1174.__end_;
  std::string::append(a1, v523, (std::string::size_type)value_high);
  if (SHIBYTE(__x.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__x.__r_.__value_.__l.__data_);
  if (SHIBYTE(v1174.__end_cap_.__value_) < 0)
    operator delete(v1174.__begin_);

}

