void sub_1B63B78B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,uint64_t a36,void *a37,uint64_t a38,int a39,__int16 a40,char a41,char a42,uint64_t a43,void *a44,uint64_t a45,int a46,__int16 a47,char a48,char a49,uint64_t a50,void *a51,uint64_t a52,int a53,__int16 a54,char a55,char a56,uint64_t a57,void *a58,uint64_t a59,int a60,__int16 a61,char a62,char a63)
{
  void *__p;
  char a70;
  uint64_t v70;

  if (*(char *)(v70 - 121) < 0)
    operator delete(*(void **)(v70 - 144));
  if (a70 < 0)
    operator delete(__p);
  if (a63 < 0)
    operator delete(a58);
  if (a56 < 0)
    operator delete(a51);
  if (a49 < 0)
    operator delete(a44);
  if (*(char *)(v70 - 153) < 0)
    operator delete(*(void **)(v70 - 176));
  if (a42 < 0)
    operator delete(a37);
  if (a35 < 0)
    operator delete(a30);
  if (a29 < 0)
    operator delete(a24);
  if (*(char *)(v70 - 233) < 0)
    operator delete(*(void **)(v70 - 256));
  if (*(char *)(a14 + 23) < 0)
    operator delete(*(void **)a14);
  if (*(char *)(v70 - 201) < 0)
    operator delete(*(void **)(v70 - 224));

  _Unwind_Resume(a1);
}

uint64_t ___Z28GetSpatialCaptureBoxRegistryPK14__CFDictionaryj_block_invoke(__CFDictionary **a1, int a2, int a3)
{
  uint64_t v4;
  _OWORD *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t i;
  NSString *v10;
  unsigned int CameraDirectionFromString;
  void *v12;
  void *v13;
  int v14;
  id v15;
  void *v16;
  id v17;
  NSObject *v18;
  id v19;
  void *v20;
  id v21;
  NSObject *v22;
  uint64_t v23;
  void *v24;
  BOOL v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  NSString *v30;
  uint64_t OrientationFromString;
  void *v32;
  void *v33;
  void *v34;
  void *v35;
  int v36;
  void *v37;
  int v38;
  id v39;
  id v40;
  void *v41;
  id v42;
  NSObject *v43;
  NSObject *v44;
  os_log_type_t v45;
  const char *v46;
  uint32_t v47;
  void *v48;
  id v49;
  NSObject *v50;
  id v51;
  void *v52;
  id v53;
  uint64_t v54;
  uint64_t v55;
  __CFDictionary *v56;
  void *v57;
  unsigned int v58;
  int v59;
  unsigned __int32 v60;
  uint8x8_t v61;
  NSString *v62;
  NSString *v63;
  unsigned int v64;
  void *v65;
  id v66;
  void *v67;
  id v68;
  NSObject *v69;
  unsigned int v70;
  char *v71;
  char *v72;
  uint64_t v73;
  unint64_t v74;
  uint64_t v75;
  uint64_t m;
  unsigned int v77;
  id v78;
  void *v79;
  id v80;
  NSObject *v81;
  id v82;
  void *v83;
  id v84;
  NSObject *v85;
  uint64_t v86;
  unint64_t v87;
  unint64_t v88;
  uint64_t v89;
  char *v90;
  char *v91;
  int v92;
  unsigned int v93;
  int v94;
  id v95;
  void *v96;
  id v97;
  NSObject *v98;
  uint64_t v99;
  uint64_t v101;
  uint64_t v102;
  uint64_t j;
  __CFDictionary *v104;
  void *v105;
  __CFDictionary **v106;
  id v107;
  __CFDictionary *v108;
  __CFDictionary *v109;
  id v110;
  unsigned int v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  NSString *v115;
  uint64_t v116;
  uint64_t v117;
  _QWORD *v118;
  unsigned int v119;
  uint64_t k;
  void *v121;
  uint64_t v122;
  id v123;
  id v124;
  uint64_t v125;
  id obj;
  NSString *obja;
  id objb;
  id objc;
  __int128 v130;
  __int128 v131;
  __int128 v132;
  __int128 v133;
  __int128 v134;
  __int128 v135;
  __int128 v136;
  __int128 v137;
  __int128 v138;
  __int128 v139;
  __int128 v140;
  __int128 v141;
  __int128 v142;
  __int128 v143;
  __int128 v144;
  __int128 v145;
  __int128 v146;
  __int128 v147;
  __int128 v148;
  __int128 v149;
  __int128 v150;
  __int128 v151;
  __int128 v152;
  __int128 v153;
  uint8_t v154[4];
  const char *v155;
  __int16 v156;
  int v157;
  __int16 v158;
  unsigned int v159;
  __int16 v160;
  int v161;
  _BYTE v162[128];
  _BYTE v163[128];
  _BYTE v164[12];
  __int16 v165;
  int v166;
  __int16 v167;
  int v168;
  __int16 v169;
  int v170;
  __int16 v171;
  uint64_t v172;
  __int16 v173;
  int v174;
  __int16 v175;
  uint64_t v176;
  __int16 v177;
  int v178;
  uint8_t v179[128];
  uint8_t buf[4];
  const char *v181;
  __int16 v182;
  int v183;
  __int16 v184;
  int v185;
  __int16 v186;
  uint64_t v187;
  __int16 v188;
  unsigned int v189;
  _BYTE v190[128];
  uint64_t v191;

  v191 = *MEMORY[0x1E0C80C00];
  if (a3 | a2)
    __assert_rtn("GetSpatialCaptureBoxRegistry_block_invoke", "SpatialCapture.mm", 524, "numInputs == 0 && numOutputs == 0 && \"Bad number of ins or outs\"");
  v4 = operator new();
  v106 = a1;
  v108 = a1[4];
  DSPGraph::Box::Box((DSPGraph::Box *)v4);
  *(_QWORD *)v4 = off_1E69EA868;
  *(_QWORD *)(v4 + 772) = 0;
  *(_QWORD *)(v4 + 784) = 0;
  *(_QWORD *)(v4 + 800) = 0;
  *(_QWORD *)(v4 + 792) = 0;
  v5 = operator new(0x140uLL);
  v5[18] = 0u;
  v5[19] = 0u;
  v5[16] = 0u;
  v5[17] = 0u;
  v5[14] = 0u;
  v5[15] = 0u;
  v5[12] = 0u;
  v5[13] = 0u;
  v5[10] = 0u;
  v5[11] = 0u;
  v5[8] = 0u;
  v5[9] = 0u;
  v5[6] = 0u;
  v5[7] = 0u;
  v5[4] = 0u;
  v5[5] = 0u;
  v5[2] = 0u;
  v5[3] = 0u;
  *v5 = 0u;
  v5[1] = 0u;
  *(_QWORD *)(v4 + 784) = v5;
  *(_QWORD *)(v4 + 792) = v5 + 20;
  *(_QWORD *)(v4 + 800) = v5 + 20;
  *(_QWORD *)v4 = &off_1E69EA5D8;
  *(_QWORD *)(v4 + 808) = 0;
  *(_QWORD *)(v4 + 824) = 0;
  *(_QWORD *)(v4 + 816) = 0;
  *(_DWORD *)(v4 + 772) = 3;
  v122 = v4;
  v118 = (_QWORD *)(v4 + 808);
  std::vector<int>::resize((std::vector<int> *)(v4 + 808), 2uLL);
  **(_QWORD **)(v4 + 808) = 0x200000001;
  GetSubDictionaryWithKey(v108, "MicSelections", 1);
  v123 = (id)objc_claimAutoreleasedReturnValue();
  if (v123)
  {
    objc_msgSend(v123, "objectForKeyedSubscript:", CFSTR("Ref"));
    v6 = (void *)objc_claimAutoreleasedReturnValue();

    if (!v6)
      goto LABEL_31;
    v152 = 0u;
    v153 = 0u;
    v150 = 0u;
    v151 = 0u;
    objc_msgSend(v123, "objectForKeyedSubscript:", CFSTR("Ref"));
    obj = (id)objc_claimAutoreleasedReturnValue();
    v7 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v150, v190, 16);
    if (!v7)
      goto LABEL_30;
    v8 = *(_QWORD *)v151;
    while (1)
    {
      for (i = 0; i != v7; ++i)
      {
        if (*(_QWORD *)v151 != v8)
          objc_enumerationMutation(obj);
        v10 = *(NSString **)(*((_QWORD *)&v150 + 1) + 8 * i);
        CameraDirectionFromString = GetCameraDirectionFromString(v10);
        objc_msgSend(v123, "objectForKeyedSubscript:", CFSTR("Ref"));
        v12 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v12, "objectForKeyedSubscript:", v10);
        v13 = (void *)objc_claimAutoreleasedReturnValue();
        v14 = objc_msgSend(v13, "intValue");

        *(_DWORD *)(*v118 + 4 * CameraDirectionFromString) = v14 - 1;
        if (v14 <= 0)
        {
          if (SCLogScope(void)::once != -1)
            dispatch_once(&SCLogScope(void)::once, &__block_literal_global_11993);
          if (SCLogScope(void)::scope)
          {
            v15 = *(id *)SCLogScope(void)::scope;
            if (!v15)
              goto LABEL_19;
          }
          else
          {
            v16 = (void *)MEMORY[0x1E0C81028];
            v17 = MEMORY[0x1E0C81028];
            v15 = v16;
          }
          v18 = v15;
          if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 136315394;
            v181 = "SCMicSelectionBox.mm";
            v182 = 1024;
            v183 = 39;
            _os_log_impl(&dword_1B5ED0000, v18, OS_LOG_TYPE_ERROR, "%25s:%-5d Negative mic number!", buf, 0x12u);
          }

        }
LABEL_19:
        if (SCLogScope(void)::once != -1)
          dispatch_once(&SCLogScope(void)::once, &__block_literal_global_11993);
        if (SCLogScope(void)::scope)
        {
          v19 = *(id *)SCLogScope(void)::scope;
          if (!v19)
            continue;
        }
        else
        {
          v20 = (void *)MEMORY[0x1E0C81028];
          v21 = MEMORY[0x1E0C81028];
          v19 = v20;
        }
        v22 = v19;
        if (os_log_type_enabled(v22, OS_LOG_TYPE_DEBUG))
        {
          v23 = -[NSString UTF8String](objc_retainAutorelease(v10), "UTF8String");
          *(_DWORD *)buf = 136316162;
          v181 = "SCMicSelectionBox.mm";
          v182 = 1024;
          v183 = 40;
          v184 = 1024;
          v185 = v14;
          v186 = 2080;
          v187 = v23;
          v188 = 1024;
          v189 = CameraDirectionFromString;
          _os_log_impl(&dword_1B5ED0000, v22, OS_LOG_TYPE_DEBUG, "%25s:%-5d Ref mic is %i for beam direction %s (%i)", buf, 0x28u);
        }

      }
      v7 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v150, v190, 16);
      if (!v7)
      {
LABEL_30:

LABEL_31:
        objc_msgSend(v123, "objectForKeyedSubscript:", CFSTR("SpacedOmni"));
        v24 = (void *)objc_claimAutoreleasedReturnValue();
        v25 = v24 == 0;

        if (v25)
          break;
        v148 = 0u;
        v149 = 0u;
        v146 = 0u;
        v147 = 0u;
        objc_msgSend(v123, "objectForKeyedSubscript:", CFSTR("SpacedOmni"));
        v110 = (id)objc_claimAutoreleasedReturnValue();
        v114 = objc_msgSend(v110, "countByEnumeratingWithState:objects:count:", &v146, buf, 16);
        if (!v114)
          goto LABEL_76;
        v112 = *(_QWORD *)v147;
LABEL_34:
        v116 = 0;
        while (1)
        {
          if (*(_QWORD *)v147 != v112)
            objc_enumerationMutation(v110);
          obja = *(NSString **)(*((_QWORD *)&v146 + 1) + 8 * v116);
          v26 = GetCameraDirectionFromString(obja);
          v144 = 0u;
          v145 = 0u;
          v142 = 0u;
          v143 = 0u;
          objc_msgSend(v123, "objectForKeyedSubscript:", CFSTR("SpacedOmni"));
          v27 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v27, "objectForKeyedSubscript:", obja);
          v121 = (void *)objc_claimAutoreleasedReturnValue();

          v28 = objc_msgSend(v121, "countByEnumeratingWithState:objects:count:", &v142, v179, 16);
          if (v28)
            break;
LABEL_74:

          if (++v116 == v114)
          {
            v114 = objc_msgSend(v110, "countByEnumeratingWithState:objects:count:", &v146, buf, 16);
            if (!v114)
            {
LABEL_76:

              goto LABEL_77;
            }
            goto LABEL_34;
          }
        }
        v125 = *(_QWORD *)v143;
        while (2)
        {
          v29 = 0;
LABEL_40:
          if (*(_QWORD *)v143 != v125)
            objc_enumerationMutation(v121);
          v30 = *(NSString **)(*((_QWORD *)&v142 + 1) + 8 * v29);
          OrientationFromString = GetOrientationFromString(v30);
          objc_msgSend(v123, "objectForKeyedSubscript:", CFSTR("SpacedOmni"));
          v32 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v32, "objectForKeyedSubscript:", obja);
          v33 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v33, "objectForKeyedSubscript:", v30);
          v34 = (void *)objc_claimAutoreleasedReturnValue();

          if ((unint64_t)objc_msgSend(v34, "count") < 2)
          {
            if (SCLogScope(void)::once != -1)
              dispatch_once(&SCLogScope(void)::once, &__block_literal_global_11993);
            if (SCLogScope(void)::scope)
            {
              v40 = *(id *)SCLogScope(void)::scope;
              if (!v40)
                goto LABEL_72;
            }
            else
            {
              v41 = (void *)MEMORY[0x1E0C81028];
              v42 = MEMORY[0x1E0C81028];
              v40 = v41;
            }
            v43 = v40;
            if (os_log_type_enabled(v43, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)v164 = 136315394;
              *(_QWORD *)&v164[4] = "SCMicSelectionBox.mm";
              v165 = 1024;
              v166 = 58;
              v44 = v43;
              v45 = OS_LOG_TYPE_ERROR;
              v46 = "%25s:%-5d Mic selections array is too short!";
              v47 = 18;
              goto LABEL_70;
            }
          }
          else
          {
            objc_msgSend(v34, "objectAtIndexedSubscript:", 0);
            v35 = (void *)objc_claimAutoreleasedReturnValue();
            v36 = objc_msgSend(v35, "intValue");

            objc_msgSend(v34, "objectAtIndexedSubscript:", 1);
            v37 = (void *)objc_claimAutoreleasedReturnValue();
            v38 = objc_msgSend(v37, "intValue");

            *(_DWORD *)OrientationAndCameraDirectionDependentBox<SCMicSelectionInfo>::Get(v122, v26, OrientationFromString) = v36 - 1;
            *(_DWORD *)(OrientationAndCameraDirectionDependentBox<SCMicSelectionInfo>::Get(v122, v26, OrientationFromString)+ 4) = v38 - 1;
            if (v36 < 1 || v38 <= 0)
            {
              if (SCLogScope(void)::once != -1)
                dispatch_once(&SCLogScope(void)::once, &__block_literal_global_11993);
              if (SCLogScope(void)::scope)
              {
                v39 = *(id *)SCLogScope(void)::scope;
                if (!v39)
                  goto LABEL_62;
              }
              else
              {
                v48 = (void *)MEMORY[0x1E0C81028];
                v49 = MEMORY[0x1E0C81028];
                v39 = v48;
              }
              v50 = v39;
              if (os_log_type_enabled(v50, OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)v164 = 136315394;
                *(_QWORD *)&v164[4] = "SCMicSelectionBox.mm";
                v165 = 1024;
                v166 = 55;
                _os_log_impl(&dword_1B5ED0000, v50, OS_LOG_TYPE_ERROR, "%25s:%-5d Negative mic number!", v164, 0x12u);
              }

            }
LABEL_62:
            if (SCLogScope(void)::once != -1)
              dispatch_once(&SCLogScope(void)::once, &__block_literal_global_11993);
            if (SCLogScope(void)::scope)
            {
              v51 = *(id *)SCLogScope(void)::scope;
              if (!v51)
              {
LABEL_72:

                if (v28 == ++v29)
                {
                  v28 = objc_msgSend(v121, "countByEnumeratingWithState:objects:count:", &v142, v179, 16);
                  if (!v28)
                    goto LABEL_74;
                  continue;
                }
                goto LABEL_40;
              }
            }
            else
            {
              v52 = (void *)MEMORY[0x1E0C81028];
              v53 = MEMORY[0x1E0C81028];
              v51 = v52;
            }
            v43 = v51;
            if (os_log_type_enabled(v43, OS_LOG_TYPE_DEBUG))
            {
              v54 = -[NSString UTF8String](objc_retainAutorelease(obja), "UTF8String");
              v55 = -[NSString UTF8String](objc_retainAutorelease(v30), "UTF8String");
              *(_DWORD *)v164 = 136316930;
              *(_QWORD *)&v164[4] = "SCMicSelectionBox.mm";
              v165 = 1024;
              v166 = 56;
              v167 = 1024;
              v168 = v36;
              v169 = 1024;
              v170 = v38;
              v171 = 2080;
              v172 = v54;
              v173 = 1024;
              v174 = v26;
              v175 = 2080;
              v176 = v55;
              v177 = 1024;
              v178 = OrientationFromString;
              v44 = v43;
              v45 = OS_LOG_TYPE_DEBUG;
              v46 = "%25s:%-5d Spaced omni is mics %i (L) and %i (R) for camera direction %s (%i) and orientation %s (%i)";
              v47 = 62;
LABEL_70:
              _os_log_impl(&dword_1B5ED0000, v44, v45, v46, v164, v47);
            }
          }
          break;
        }

        goto LABEL_72;
      }
    }
  }
LABEL_77:
  v56 = v108;
  if (!v56)
    __assert_rtn("SCMicSelectionBox", "SCMicSelectionBox.mm", 68, "topLevelDict");
  v104 = v56;
  -[__CFDictionary objectForKeyedSubscript:](v56, "objectForKeyedSubscript:", CFSTR("numSDLSBeams"));
  v57 = (void *)objc_claimAutoreleasedReturnValue();
  v58 = objc_msgSend(v57, "unsignedIntValue");

  if (!v58)
    __assert_rtn("SCMicSelectionBox", "SCMicSelectionBox.mm", 70, "numSDLSBeams > 0");
  CAAudioChannelLayout::CAAudioChannelLayout((CAAudioChannelLayout *)v164, *((_DWORD *)v106 + 10));
  if (*(_QWORD *)v164)
  {
    v59 = *(_DWORD *)(*(_QWORD *)v164 + 16);
    if (v59 == 0x10000)
    {
      v61 = (uint8x8_t)vcnt_s8((int8x8_t)*(unsigned int *)(*(_QWORD *)v164 + 20));
      v61.i16[0] = vaddlv_u8(v61);
      v60 = v61.i32[0];
    }
    else if (v59)
    {
      v60 = (unsigned __int16)*(_DWORD *)(*(_QWORD *)v164 + 16);
    }
    else
    {
      v60 = *(_DWORD *)(*(_QWORD *)v164 + 24);
    }
  }
  else
  {
    v60 = 0;
  }
  CAAudioChannelLayout::~CAAudioChannelLayout((unsigned int **)v164);
  GetSubDictionaryWithKey(v104, "SDLSChannelSelections", 0);
  v105 = (void *)objc_claimAutoreleasedReturnValue();

  if (v105)
  {
    v140 = 0u;
    v141 = 0u;
    v138 = 0u;
    v139 = 0u;
    v124 = v105;
    v101 = objc_msgSend(v124, "countByEnumeratingWithState:objects:count:", &v138, v164, 16);
    if (!v101)
      goto LABEL_168;
    v109 = (__CFDictionary *)v60;
    v102 = *(_QWORD *)v139;
    while (1)
    {
      for (j = 0; j != v101; ++j)
      {
        if (*(_QWORD *)v139 != v102)
          objc_enumerationMutation(v124);
        v62 = *(NSString **)(*((_QWORD *)&v138 + 1) + 8 * j);
        v111 = GetCameraDirectionFromString(v62);
        v136 = 0u;
        v137 = 0u;
        v134 = 0u;
        v135 = 0u;
        v115 = v62;
        objc_msgSend(v124, "objectForKeyedSubscript:", v62);
        v107 = (id)objc_claimAutoreleasedReturnValue();
        v117 = objc_msgSend(v107, "countByEnumeratingWithState:objects:count:", &v134, v163, 16);
        if (v117)
        {
          v113 = *(_QWORD *)v135;
          do
          {
            for (k = 0; k != v117; ++k)
            {
              if (*(_QWORD *)v135 != v113)
                objc_enumerationMutation(v107);
              v63 = *(NSString **)(*((_QWORD *)&v134 + 1) + 8 * k);
              v64 = GetOrientationFromString(v63);
              objc_msgSend(v124, "objectForKeyedSubscript:", v115);
              v65 = (void *)objc_claimAutoreleasedReturnValue();
              v119 = v64;
              objc_msgSend(v65, "objectForKeyedSubscript:", v63);
              objb = (id)objc_claimAutoreleasedReturnValue();

              if ((__CFDictionary *)objc_msgSend(objb, "count") == v109)
                goto LABEL_107;
              if (SCLogScope(void)::once != -1)
                dispatch_once(&SCLogScope(void)::once, &__block_literal_global_11993);
              if (!SCLogScope(void)::scope)
              {
                v67 = (void *)MEMORY[0x1E0C81028];
                v68 = MEMORY[0x1E0C81028];
                v66 = v67;
LABEL_104:
                v69 = v66;
                if (os_log_type_enabled(v69, OS_LOG_TYPE_ERROR))
                {
                  v70 = objc_msgSend(objb, "count");
                  *(_DWORD *)v154 = 136315650;
                  v155 = "SCMicSelectionBox.mm";
                  v156 = 1024;
                  v157 = 83;
                  v158 = 1024;
                  v159 = v70;
                  _os_log_impl(&dword_1B5ED0000, v69, OS_LOG_TYPE_ERROR, "%25s:%-5d Bad channel selection array! count = %u", v154, 0x18u);
                }

                goto LABEL_107;
              }
              v66 = *(id *)SCLogScope(void)::scope;
              if (v66)
                goto LABEL_104;
LABEL_107:
              v132 = 0u;
              v133 = 0u;
              v130 = 0u;
              v131 = 0u;
              objc = objb;
              v71 = 0;
              v72 = 0;
              v73 = objc_msgSend(objc, "countByEnumeratingWithState:objects:count:", &v130, v162, 16);
              if (!v73)
                goto LABEL_162;
              v74 = 0;
              v75 = *(_QWORD *)v131;
              do
              {
                for (m = 0; m != v73; ++m)
                {
                  if (*(_QWORD *)v131 != v75)
                    objc_enumerationMutation(objc);
                  v77 = objc_msgSend(*(id *)(*((_QWORD *)&v130 + 1) + 8 * m), "intValue");
                  if ((v77 & 0x80000000) != 0)
                  {
                    if (SCLogScope(void)::once != -1)
                      dispatch_once(&SCLogScope(void)::once, &__block_literal_global_11993);
                    if (SCLogScope(void)::scope)
                    {
                      v78 = *(id *)SCLogScope(void)::scope;
                      if (!v78)
                        goto LABEL_122;
                    }
                    else
                    {
                      v79 = (void *)MEMORY[0x1E0C81028];
                      v80 = MEMORY[0x1E0C81028];
                      v78 = v79;
                    }
                    v81 = v78;
                    if (os_log_type_enabled(v81, OS_LOG_TYPE_ERROR))
                    {
                      *(_DWORD *)v154 = 136315650;
                      v155 = "SCMicSelectionBox.mm";
                      v156 = 1024;
                      v157 = 88;
                      v158 = 1024;
                      v159 = v77;
                      _os_log_impl(&dword_1B5ED0000, v81, OS_LOG_TYPE_ERROR, "%25s:%-5d Bad channel selection %i", v154, 0x18u);
                    }

                  }
LABEL_122:
                  if (v77 < v58)
                    goto LABEL_132;
                  if (SCLogScope(void)::once != -1)
                    dispatch_once(&SCLogScope(void)::once, &__block_literal_global_11993);
                  if (SCLogScope(void)::scope)
                  {
                    v82 = *(id *)SCLogScope(void)::scope;
                    if (!v82)
                      goto LABEL_132;
                  }
                  else
                  {
                    v83 = (void *)MEMORY[0x1E0C81028];
                    v84 = MEMORY[0x1E0C81028];
                    v82 = v83;
                  }
                  v85 = v82;
                  if (os_log_type_enabled(v85, OS_LOG_TYPE_ERROR))
                  {
                    *(_DWORD *)v154 = 136315650;
                    v155 = "SCMicSelectionBox.mm";
                    v156 = 1024;
                    v157 = 89;
                    v158 = 1024;
                    v159 = v77;
                    _os_log_impl(&dword_1B5ED0000, v85, OS_LOG_TYPE_ERROR, "%25s:%-5d Bad channel selection %i", v154, 0x18u);
                  }

LABEL_132:
                  if ((unint64_t)v72 >= v74)
                  {
                    v86 = (v72 - v71) >> 2;
                    v87 = v86 + 1;
                    if ((unint64_t)(v86 + 1) >> 62)
                      std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
                    if ((uint64_t)(v74 - (_QWORD)v71) >> 1 > v87)
                      v87 = (uint64_t)(v74 - (_QWORD)v71) >> 1;
                    if (v74 - (unint64_t)v71 >= 0x7FFFFFFFFFFFFFFCLL)
                      v88 = 0x3FFFFFFFFFFFFFFFLL;
                    else
                      v88 = v87;
                    if (v88)
                      v88 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(v88);
                    else
                      v89 = 0;
                    v90 = (char *)(v88 + 4 * v86);
                    *(_DWORD *)v90 = v77;
                    v91 = v90 + 4;
                    while (v72 != v71)
                    {
                      v92 = *((_DWORD *)v72 - 1);
                      v72 -= 4;
                      *((_DWORD *)v90 - 1) = v92;
                      v90 -= 4;
                    }
                    v74 = v88 + 4 * v89;
                    if (v71)
                      operator delete(v71);
                    v71 = v90;
                    v72 = v91;
                  }
                  else
                  {
                    *(_DWORD *)v72 = v77;
                    v72 += 4;
                  }
                  if ((unint64_t)(v72 - v71) >= 9)
                  {
                    v93 = *((_DWORD *)v72 - 1);
                    v94 = *((_DWORD *)v72 - 2);
                    if (v93 - v94 != 1)
                    {
                      if (SCLogScope(void)::once != -1)
                        dispatch_once(&SCLogScope(void)::once, &__block_literal_global_11993);
                      if (SCLogScope(void)::scope)
                      {
                        v95 = *(id *)SCLogScope(void)::scope;
                        if (!v95)
                          continue;
                      }
                      else
                      {
                        v96 = (void *)MEMORY[0x1E0C81028];
                        v97 = MEMORY[0x1E0C81028];
                        v95 = v96;
                      }
                      v98 = v95;
                      if (os_log_type_enabled(v98, OS_LOG_TYPE_ERROR))
                      {
                        *(_DWORD *)v154 = 136315906;
                        v155 = "SCMicSelectionBox.mm";
                        v156 = 1024;
                        v157 = 95;
                        v158 = 1024;
                        v159 = v93;
                        v160 = 1024;
                        v161 = v94;
                        _os_log_impl(&dword_1B5ED0000, v98, OS_LOG_TYPE_ERROR, "%25s:%-5d The ranged beam selection optimization requires that the channels are in order, but vLast = %i and vSecondLast = %i", v154, 0x1Eu);
                      }

                    }
                  }
                }
                v73 = objc_msgSend(objc, "countByEnumeratingWithState:objects:count:", &v130, v162, 16);
              }
              while (v73);
LABEL_162:

              v99 = OrientationAndCameraDirectionDependentBox<SCMicSelectionInfo>::Get(v122, v111, v119);
              std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)(v99 + 8), v71, (uint64_t)v72, (v72 - v71) >> 2);
              if (v71)
                operator delete(v71);

            }
            v117 = objc_msgSend(v107, "countByEnumeratingWithState:objects:count:", &v134, v163, 16);
          }
          while (v117);
        }

      }
      v101 = objc_msgSend(v124, "countByEnumeratingWithState:objects:count:", &v138, v164, 16);
      if (!v101)
      {
LABEL_168:

        break;
      }
    }
  }

  return v122;
}

void sub_1B63B9A90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, unint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void **a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,DSPGraph::Box *a29,void *a30)
{
  void *v31;

  v31 = *a22;
  if (*a22)
  {
    *((_QWORD *)a29 + 102) = v31;
    operator delete(v31);
  }
  *(_QWORD *)a29 = off_1E69EA868;
  STACK[0x250] = a12;
  std::vector<SCMicSelectionInfo>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x250]);
  DSPGraph::Box::~Box(a29);
  MEMORY[0x1BCC95CEC](a29, 0x10F3C40FFAE72A1);
  _Unwind_Resume(a1);
}

void DSPGraph::NewBoxRegistry::~NewBoxRegistry(DSPGraph::NewBoxRegistry *this)
{
  char *v2;
  void **v3;

  *(_QWORD *)this = MEMORY[0x1E0CFFC40] + 16;
  v2 = (char *)this + 8;
  v3 = (void **)((char *)this + 88);
  std::vector<std::pair<std::string,AudioComponentDescription>>::__destroy_vector::operator()[abi:ne180100](&v3);
  std::__hash_table<std::__hash_value_type<AudioComponentDescription,std::function<DSPGraph::Box * ()(unsigned int,unsigned int)>>,std::__unordered_map_hasher<AudioComponentDescription,std::__hash_value_type<AudioComponentDescription,std::function<DSPGraph::Box * ()(unsigned int,unsigned int)>>,std::hash<AudioComponentDescription>,DSPGraph::NewBoxRegistry::AudioComponentDescriptionEquality,true>,std::__unordered_map_equal<AudioComponentDescription,std::__hash_value_type<AudioComponentDescription,std::function<DSPGraph::Box * ()(unsigned int,unsigned int)>>,DSPGraph::NewBoxRegistry::AudioComponentDescriptionEquality,std::hash<AudioComponentDescription>,true>,std::allocator<std::__hash_value_type<AudioComponentDescription,std::function<DSPGraph::Box * ()(unsigned int,unsigned int)>>>>::~__hash_table((uint64_t)this + 48);
  std::__hash_table<std::__hash_value_type<std::string,std::function<DSPGraph::Box * ()(unsigned int,unsigned int)>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::function<DSPGraph::Box * ()(unsigned int,unsigned int)>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::function<DSPGraph::Box * ()(unsigned int,unsigned int)>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::function<DSPGraph::Box * ()(unsigned int,unsigned int)>>>>::~__hash_table((uint64_t)v2);
}

void std::vector<std::pair<std::string,AudioComponentDescription>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  void **v2;
  void **v4;
  void *v5;

  v1 = *a1;
  v2 = (void **)**a1;
  if (v2)
  {
    v4 = (void **)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        if (*((char *)v4 - 25) < 0)
          operator delete(*(v4 - 6));
        v4 -= 6;
      }
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t std::__hash_table<std::__hash_value_type<AudioComponentDescription,std::function<DSPGraph::Box * ()(unsigned int,unsigned int)>>,std::__unordered_map_hasher<AudioComponentDescription,std::__hash_value_type<AudioComponentDescription,std::function<DSPGraph::Box * ()(unsigned int,unsigned int)>>,std::hash<AudioComponentDescription>,DSPGraph::NewBoxRegistry::AudioComponentDescriptionEquality,true>,std::__unordered_map_equal<AudioComponentDescription,std::__hash_value_type<AudioComponentDescription,std::function<DSPGraph::Box * ()(unsigned int,unsigned int)>>,DSPGraph::NewBoxRegistry::AudioComponentDescriptionEquality,std::hash<AudioComponentDescription>,true>,std::allocator<std::__hash_value_type<AudioComponentDescription,std::function<DSPGraph::Box * ()(unsigned int,unsigned int)>>>>::~__hash_table(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  void *v6;

  v2 = *(_QWORD **)(a1 + 16);
  if (v2)
  {
    while (1)
    {
      v3 = (_QWORD *)*v2;
      v4 = (_QWORD *)v2[8];
      if (v4 == v2 + 5)
        break;
      if (v4)
      {
        v5 = 5;
LABEL_6:
        (*(void (**)(void))(*v4 + 8 * v5))();
      }
      operator delete(v2);
      v2 = v3;
      if (!v3)
        goto LABEL_8;
    }
    v4 = v2 + 5;
    v5 = 4;
    goto LABEL_6;
  }
LABEL_8:
  v6 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v6)
    operator delete(v6);
  return a1;
}

uint64_t std::__hash_table<std::__hash_value_type<std::string,std::function<DSPGraph::Box * ()(unsigned int,unsigned int)>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::function<DSPGraph::Box * ()(unsigned int,unsigned int)>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::function<DSPGraph::Box * ()(unsigned int,unsigned int)>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::function<DSPGraph::Box * ()(unsigned int,unsigned int)>>>>::~__hash_table(uint64_t a1)
{
  char *v2;
  char *v3;
  char *v4;
  uint64_t v5;
  void *v6;

  v2 = *(char **)(a1 + 16);
  if (v2)
  {
    while (1)
    {
      v3 = *(char **)v2;
      v4 = (char *)*((_QWORD *)v2 + 8);
      if (v4 == v2 + 40)
        break;
      if (v4)
      {
        v5 = 5;
LABEL_6:
        (*(void (**)(void))(*(_QWORD *)v4 + 8 * v5))();
      }
      if (v2[39] < 0)
        operator delete(*((void **)v2 + 2));
      operator delete(v2);
      v2 = v3;
      if (!v3)
        goto LABEL_10;
    }
    v4 = v2 + 40;
    v5 = 4;
    goto LABEL_6;
  }
LABEL_10:
  v6 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v6)
    operator delete(v6);
  return a1;
}

uint64_t std::__function::__func<ParameterTransformBox *({block_pointer} {__strong})(unsigned int,unsigned int),std::allocator<ParameterTransformBox *({block_pointer} {__strong})(unsigned int,unsigned int)>,DSPGraph::Box * ()(unsigned int,unsigned int)>::~__func(uint64_t a1)
{

  return a1;
}

void std::__function::__func<ParameterTransformBox *({block_pointer} {__strong})(unsigned int,unsigned int),std::allocator<ParameterTransformBox *({block_pointer} {__strong})(unsigned int,unsigned int)>,DSPGraph::Box * ()(unsigned int,unsigned int)>::~__func(uint64_t a1)
{

  JUMPOUT(0x1BCC95CECLL);
}

uint64_t std::__function::__func<ParameterTransformBox *({block_pointer} {__strong})(unsigned int,unsigned int),std::allocator<ParameterTransformBox *({block_pointer} {__strong})(unsigned int,unsigned int)>,DSPGraph::Box * ()(unsigned int,unsigned int)>::__clone()
{
  return 0;
}

void *std::__function::__func<ParameterTransformBox *({block_pointer} {__strong})(unsigned int,unsigned int),std::allocator<ParameterTransformBox *({block_pointer} {__strong})(unsigned int,unsigned int)>,DSPGraph::Box * ()(unsigned int,unsigned int)>::__clone(uint64_t a1, _QWORD *a2)
{
  void *result;

  *a2 = &off_1E69D9F38;
  result = _Block_copy(*(const void **)(a1 + 8));
  a2[1] = result;
  return result;
}

void std::__function::__func<ParameterTransformBox *({block_pointer} {__strong})(unsigned int,unsigned int),std::allocator<ParameterTransformBox *({block_pointer} {__strong})(unsigned int,unsigned int)>,DSPGraph::Box * ()(unsigned int,unsigned int)>::destroy(uint64_t a1)
{
  void *v1;

  v1 = *(void **)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;

}

uint64_t std::__function::__func<ParameterTransformBox *({block_pointer} {__strong})(unsigned int,unsigned int),std::allocator<ParameterTransformBox *({block_pointer} {__strong})(unsigned int,unsigned int)>,DSPGraph::Box * ()(unsigned int,unsigned int)>::operator()(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 8) + 16))();
}

uint64_t ___Z28GetSpatialCaptureBoxRegistryPK14__CFDictionaryj_block_invoke_5(uint64_t a1, int a2, int a3)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;

  if (a3 | a2)
    __assert_rtn("GetSpatialCaptureBoxRegistry_block_invoke_5", "SpatialCapture.mm", 540, "numInputs == 0 && numOutputs == 0 && \"Bad number of ins or outs\"");
  v3 = operator new();
  DSPGraph::Box::Box((DSPGraph::Box *)v3);
  *(_QWORD *)v3 = &off_1E69D75F0;
  *(_DWORD *)(v3 + 772) = 0;
  *(_BYTE *)(v3 + 776) = 0;
  caulk::pooled_semaphore_mutex::pooled_semaphore_mutex((caulk::pooled_semaphore_mutex *)(v3 + 780));
  *(_QWORD *)(v3 + 784) = 0;
  v4 = (_QWORD *)operator new();
  *v4 = 0;
  v4[1] = 0;
  v4[2] = 0;
  v5 = *(_QWORD *)(v3 + 784);
  *(_QWORD *)(v3 + 784) = v4;
  if (v5)
    std::default_delete<std::vector<AUSM::ExclusionZone>>::operator()[abi:ne180100](v5);
  return v3;
}

void sub_1B63BA058(_Unwind_Exception *a1)
{
  DSPGraph::Box *v1;
  uint64_t v3;

  v3 = *((_QWORD *)v1 + 98);
  *((_QWORD *)v1 + 98) = 0;
  if (v3)
    std::default_delete<std::vector<AUSM::ExclusionZone>>::operator()[abi:ne180100](v3);
  DSPGraph::Box::~Box(v1);
  MEMORY[0x1BCC95CEC](v1, 0x10F3C40132EE293);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<ParameterSwitchBox *({block_pointer} {__strong})(unsigned int,unsigned int),std::allocator<ParameterSwitchBox *({block_pointer} {__strong})(unsigned int,unsigned int)>,DSPGraph::Box * ()(unsigned int,unsigned int)>::~__func(uint64_t a1)
{

  return a1;
}

void std::__function::__func<ParameterSwitchBox *({block_pointer} {__strong})(unsigned int,unsigned int),std::allocator<ParameterSwitchBox *({block_pointer} {__strong})(unsigned int,unsigned int)>,DSPGraph::Box * ()(unsigned int,unsigned int)>::~__func(uint64_t a1)
{

  JUMPOUT(0x1BCC95CECLL);
}

uint64_t std::__function::__func<ParameterSwitchBox *({block_pointer} {__strong})(unsigned int,unsigned int),std::allocator<ParameterSwitchBox *({block_pointer} {__strong})(unsigned int,unsigned int)>,DSPGraph::Box * ()(unsigned int,unsigned int)>::__clone()
{
  return 0;
}

void *std::__function::__func<ParameterSwitchBox *({block_pointer} {__strong})(unsigned int,unsigned int),std::allocator<ParameterSwitchBox *({block_pointer} {__strong})(unsigned int,unsigned int)>,DSPGraph::Box * ()(unsigned int,unsigned int)>::__clone(uint64_t a1, _QWORD *a2)
{
  void *result;

  *a2 = &off_1E69D9EF0;
  result = _Block_copy(*(const void **)(a1 + 8));
  a2[1] = result;
  return result;
}

void std::__function::__func<ParameterSwitchBox *({block_pointer} {__strong})(unsigned int,unsigned int),std::allocator<ParameterSwitchBox *({block_pointer} {__strong})(unsigned int,unsigned int)>,DSPGraph::Box * ()(unsigned int,unsigned int)>::destroy(uint64_t a1)
{
  void *v1;

  v1 = *(void **)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;

}

uint64_t std::__function::__func<ParameterSwitchBox *({block_pointer} {__strong})(unsigned int,unsigned int),std::allocator<ParameterSwitchBox *({block_pointer} {__strong})(unsigned int,unsigned int)>,DSPGraph::Box * ()(unsigned int,unsigned int)>::operator()(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 8) + 16))();
}

uint64_t ___Z28GetSpatialCaptureBoxRegistryPK14__CFDictionaryj_block_invoke_4(uint64_t a1, int a2, int a3)
{
  uint64_t v3;

  if (a3 | a2)
    __assert_rtn("GetSpatialCaptureBoxRegistry_block_invoke_4", "SpatialCapture.mm", 536, "numInputs == 0 && numOutputs == 0 && \"Bad number of ins or outs\"");
  v3 = operator new();
  DSPGraph::Box::Box((DSPGraph::Box *)v3);
  *(_QWORD *)v3 = &off_1E69CD2C0;
  *(_QWORD *)(v3 + 776) = 0;
  *(_QWORD *)(v3 + 792) = 0;
  *(_QWORD *)(v3 + 784) = 0;
  *(_DWORD *)(v3 + 800) = 0;
  std::vector<float>::resize(v3 + 776, 2uLL);
  return v3;
}

void sub_1B63BA1FC(_Unwind_Exception *a1)
{
  DSPGraph::Box *v1;
  void **v2;
  void **v3;
  void *v5;

  v3 = v2;
  v5 = *v3;
  if (*v3)
  {
    *((_QWORD *)v1 + 98) = v5;
    operator delete(v5);
  }
  DSPGraph::Box::~Box(v1);
  MEMORY[0x1BCC95CEC](v1, 0x10F3C4040D472F1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<SCTwoInputMixer *({block_pointer} {__strong})(unsigned int,unsigned int),std::allocator<SCTwoInputMixer *({block_pointer} {__strong})(unsigned int,unsigned int)>,DSPGraph::Box * ()(unsigned int,unsigned int)>::~__func(uint64_t a1)
{

  return a1;
}

void std::__function::__func<SCTwoInputMixer *({block_pointer} {__strong})(unsigned int,unsigned int),std::allocator<SCTwoInputMixer *({block_pointer} {__strong})(unsigned int,unsigned int)>,DSPGraph::Box * ()(unsigned int,unsigned int)>::~__func(uint64_t a1)
{

  JUMPOUT(0x1BCC95CECLL);
}

uint64_t std::__function::__func<SCTwoInputMixer *({block_pointer} {__strong})(unsigned int,unsigned int),std::allocator<SCTwoInputMixer *({block_pointer} {__strong})(unsigned int,unsigned int)>,DSPGraph::Box * ()(unsigned int,unsigned int)>::__clone()
{
  return 0;
}

void *std::__function::__func<SCTwoInputMixer *({block_pointer} {__strong})(unsigned int,unsigned int),std::allocator<SCTwoInputMixer *({block_pointer} {__strong})(unsigned int,unsigned int)>,DSPGraph::Box * ()(unsigned int,unsigned int)>::__clone(uint64_t a1, _QWORD *a2)
{
  void *result;

  *a2 = &off_1E69D9EA8;
  result = _Block_copy(*(const void **)(a1 + 8));
  a2[1] = result;
  return result;
}

void std::__function::__func<SCTwoInputMixer *({block_pointer} {__strong})(unsigned int,unsigned int),std::allocator<SCTwoInputMixer *({block_pointer} {__strong})(unsigned int,unsigned int)>,DSPGraph::Box * ()(unsigned int,unsigned int)>::destroy(uint64_t a1)
{
  void *v1;

  v1 = *(void **)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;

}

uint64_t std::__function::__func<SCTwoInputMixer *({block_pointer} {__strong})(unsigned int,unsigned int),std::allocator<SCTwoInputMixer *({block_pointer} {__strong})(unsigned int,unsigned int)>,DSPGraph::Box * ()(unsigned int,unsigned int)>::operator()(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 8) + 16))();
}

uint64_t ___Z28GetSpatialCaptureBoxRegistryPK14__CFDictionaryj_block_invoke_3(uint64_t a1, int a2, int a3)
{
  uint64_t v3;

  if (a2 != 2 || a3 != 1)
    __assert_rtn("GetSpatialCaptureBoxRegistry_block_invoke_3", "SpatialCapture.mm", 532, "numInputs == 2 && numOutputs == 1 && \"Bad number of ins or outs\"");
  v3 = operator new();
  DSPGraph::Box::Box((DSPGraph::Box *)v3);
  *(_QWORD *)v3 = &off_1E69C60E8;
  *(_DWORD *)(v3 + 772) = 1065353216;
  __asm { FMOV            V0.2S, #1.0 }
  *(_QWORD *)(v3 + 776) = _D0;
  return v3;
}

void sub_1B63BA394(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1BCC95CEC](v1, 0x10F3C4003047F56);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<ChannelSelectorBox *({block_pointer} {__strong})(unsigned int,unsigned int),std::allocator<ChannelSelectorBox *({block_pointer} {__strong})(unsigned int,unsigned int)>,DSPGraph::Box * ()(unsigned int,unsigned int)>::~__func(uint64_t a1)
{

  return a1;
}

void std::__function::__func<ChannelSelectorBox *({block_pointer} {__strong})(unsigned int,unsigned int),std::allocator<ChannelSelectorBox *({block_pointer} {__strong})(unsigned int,unsigned int)>,DSPGraph::Box * ()(unsigned int,unsigned int)>::~__func(uint64_t a1)
{

  JUMPOUT(0x1BCC95CECLL);
}

uint64_t std::__function::__func<ChannelSelectorBox *({block_pointer} {__strong})(unsigned int,unsigned int),std::allocator<ChannelSelectorBox *({block_pointer} {__strong})(unsigned int,unsigned int)>,DSPGraph::Box * ()(unsigned int,unsigned int)>::__clone()
{
  return 0;
}

void *std::__function::__func<ChannelSelectorBox *({block_pointer} {__strong})(unsigned int,unsigned int),std::allocator<ChannelSelectorBox *({block_pointer} {__strong})(unsigned int,unsigned int)>,DSPGraph::Box * ()(unsigned int,unsigned int)>::__clone(uint64_t a1, _QWORD *a2)
{
  void *result;

  *a2 = &off_1E69D9E60;
  result = _Block_copy(*(const void **)(a1 + 8));
  a2[1] = result;
  return result;
}

void std::__function::__func<ChannelSelectorBox *({block_pointer} {__strong})(unsigned int,unsigned int),std::allocator<ChannelSelectorBox *({block_pointer} {__strong})(unsigned int,unsigned int)>,DSPGraph::Box * ()(unsigned int,unsigned int)>::destroy(uint64_t a1)
{
  void *v1;

  v1 = *(void **)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;

}

uint64_t std::__function::__func<ChannelSelectorBox *({block_pointer} {__strong})(unsigned int,unsigned int),std::allocator<ChannelSelectorBox *({block_pointer} {__strong})(unsigned int,unsigned int)>,DSPGraph::Box * ()(unsigned int,unsigned int)>::operator()(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 8) + 16))();
}

void sub_1B63BA504(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1BCC95CEC](v1, 0x10F3C406C69A187);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<SCMicSelectionBox *({block_pointer} {__strong})(unsigned int,unsigned int),std::allocator<SCMicSelectionBox *({block_pointer} {__strong})(unsigned int,unsigned int)>,DSPGraph::Box * ()(unsigned int,unsigned int)>::~__func(uint64_t a1)
{

  return a1;
}

void std::__function::__func<SCMicSelectionBox *({block_pointer} {__strong})(unsigned int,unsigned int),std::allocator<SCMicSelectionBox *({block_pointer} {__strong})(unsigned int,unsigned int)>,DSPGraph::Box * ()(unsigned int,unsigned int)>::~__func(uint64_t a1)
{

  JUMPOUT(0x1BCC95CECLL);
}

uint64_t std::__function::__func<SCMicSelectionBox *({block_pointer} {__strong})(unsigned int,unsigned int),std::allocator<SCMicSelectionBox *({block_pointer} {__strong})(unsigned int,unsigned int)>,DSPGraph::Box * ()(unsigned int,unsigned int)>::__clone()
{
  return 0;
}

void *std::__function::__func<SCMicSelectionBox *({block_pointer} {__strong})(unsigned int,unsigned int),std::allocator<SCMicSelectionBox *({block_pointer} {__strong})(unsigned int,unsigned int)>,DSPGraph::Box * ()(unsigned int,unsigned int)>::__clone(uint64_t a1, _QWORD *a2)
{
  void *result;

  *a2 = &off_1E69D9E18;
  result = _Block_copy(*(const void **)(a1 + 8));
  a2[1] = result;
  return result;
}

void std::__function::__func<SCMicSelectionBox *({block_pointer} {__strong})(unsigned int,unsigned int),std::allocator<SCMicSelectionBox *({block_pointer} {__strong})(unsigned int,unsigned int)>,DSPGraph::Box * ()(unsigned int,unsigned int)>::destroy(uint64_t a1)
{
  void *v1;

  v1 = *(void **)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;

}

uint64_t std::__function::__func<SCMicSelectionBox *({block_pointer} {__strong})(unsigned int,unsigned int),std::allocator<SCMicSelectionBox *({block_pointer} {__strong})(unsigned int,unsigned int)>,DSPGraph::Box * ()(unsigned int,unsigned int)>::operator()(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 8) + 16))();
}

uint64_t ClampOrientation(uint64_t a1)
{
  uint64_t v1;
  NSObject *v2;
  id v3;
  uint64_t v4;
  const char *v5;
  id v6;
  int v8;
  const char *v9;
  __int16 v10;
  int v11;
  __int16 v12;
  int v13;
  __int16 v14;
  int v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  if (!(_DWORD)a1)
  {
    if (SCLogScope(void)::once != -1)
      dispatch_once(&SCLogScope(void)::once, &__block_literal_global_11993);
    if (SCLogScope(void)::scope)
    {
      v2 = *(id *)SCLogScope(void)::scope;
      if (!v2)
        return 1;
    }
    else
    {
      v2 = MEMORY[0x1E0C81028];
      v3 = MEMORY[0x1E0C81028];
    }
    v4 = 1;
    if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR))
    {
      v8 = 136315906;
      v9 = "SpatialCapture.mm";
      v10 = 1024;
      v11 = 584;
      v12 = 1024;
      v13 = 0;
      v14 = 1024;
      v15 = 1;
      v5 = "%25s:%-5d Orientation %u is smaller than the minimum allowed value (%u)";
LABEL_19:
      _os_log_impl(&dword_1B5ED0000, v2, OS_LOG_TYPE_ERROR, v5, (uint8_t *)&v8, 0x1Eu);
    }
LABEL_20:

    return v4;
  }
  v1 = a1;
  if (a1 >= 5)
  {
    if (SCLogScope(void)::once != -1)
      dispatch_once(&SCLogScope(void)::once, &__block_literal_global_11993);
    if (SCLogScope(void)::scope)
    {
      v2 = *(id *)SCLogScope(void)::scope;
      if (!v2)
        return 4;
    }
    else
    {
      v2 = MEMORY[0x1E0C81028];
      v6 = MEMORY[0x1E0C81028];
    }
    v4 = 4;
    if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR))
    {
      v8 = 136315906;
      v9 = "SpatialCapture.mm";
      v10 = 1024;
      v11 = 587;
      v12 = 1024;
      v13 = v1;
      v14 = 1024;
      v15 = 4;
      v5 = "%25s:%-5d Orientation %u is larger than the maximum allowed value (%u)";
      goto LABEL_19;
    }
    goto LABEL_20;
  }
  return v1;
}

uint64_t ClampCameraDirection(uint64_t a1)
{
  uint64_t v1;
  NSObject *v2;
  id v3;
  int v5;
  const char *v6;
  __int16 v7;
  int v8;
  __int16 v9;
  int v10;
  __int16 v11;
  int v12;
  uint64_t v13;

  v1 = a1;
  v13 = *MEMORY[0x1E0C80C00];
  if (a1 >= 2)
  {
    if (SCLogScope(void)::once != -1)
      dispatch_once(&SCLogScope(void)::once, &__block_literal_global_11993);
    if (SCLogScope(void)::scope)
    {
      v2 = *(id *)SCLogScope(void)::scope;
      if (!v2)
        return 1;
    }
    else
    {
      v2 = MEMORY[0x1E0C81028];
      v3 = MEMORY[0x1E0C81028];
    }
    if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR))
    {
      v5 = 136315906;
      v6 = "SpatialCapture.mm";
      v7 = 1024;
      v8 = 596;
      v9 = 1024;
      v10 = v1;
      v11 = 1024;
      v12 = 1;
      _os_log_impl(&dword_1B5ED0000, v2, OS_LOG_TYPE_ERROR, "%25s:%-5d Camera direction %u is larger than the maximum allowed value (%u)", (uint8_t *)&v5, 0x1Eu);
    }

    return 1;
  }
  return v1;
}

void dft_v4::paramInit_v4(uint64_t *a1, int a2, int a3, int a4, unsigned int a5, int a6, int a7, int a8, float a9, int a10, unsigned int a11, int a12, int a13)
{
  _OWORD *v21;
  _OWORD *v22;
  int v23;
  int v24;
  int v25;
  float v26;
  int v27;
  int v28;
  float v29;
  float v30;
  float v31;
  _DWORD *v32;
  float v33;
  int v34;
  int v35;
  int v36;
  int v37;
  int v39;
  int v40;
  float v41;
  uint64_t v42;
  int v43;
  int v44;
  int v45;
  const char *v46;
  std::bad_alloc *exception;
  std::bad_alloc *v48;
  uint8_t buf[4];
  const char *v51;
  __int16 v52;
  int v53;
  uint64_t v54;

  v54 = *MEMORY[0x1E0C80C00];
  v21 = malloc_type_malloc(0xB0uLL, 0x2C8E6D5CuLL);
  if (!v21)
  {
LABEL_47:
    exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
    v48 = std::bad_alloc::bad_alloc(exception);
  }
  v22 = v21;
  v21[10] = 0u;
  *(_OWORD *)((char *)v21 + 148) = 0u;
  *(_OWORD *)((char *)v21 + 132) = 0u;
  *(_OWORD *)((char *)v21 + 116) = 0u;
  *(_OWORD *)((char *)v21 + 100) = 0u;
  *(_OWORD *)((char *)v21 + 84) = 0u;
  *(_OWORD *)((char *)v21 + 68) = 0u;
  *(_OWORD *)((char *)v21 + 52) = 0u;
  *(_OWORD *)((char *)v21 + 36) = 0u;
  *(_OWORD *)((char *)v21 + 20) = 0u;
  *(_OWORD *)((char *)v21 + 4) = 0u;
  *a1 = (uint64_t)v21;
  v23 = 2 * a3;
  v24 = a3 + 1;
  *(_DWORD *)v21 = 2 * a3;
  if (a8)
    v25 = a4 + 1;
  else
    v25 = a4;
  *((_DWORD *)v21 + 11) = a4;
  *((_DWORD *)v21 + 12) = v25;
  *((_DWORD *)v21 + 4) = a3;
  *((_DWORD *)v21 + 7) = a3;
  v26 = (float)a3;
  *((float *)v21 + 8) = 1.0 / (float)a3;
  *((_DWORD *)v21 + 16) = a5;
  if (a6 && (v27 = (int)(float)((float)(int)a5 / 5000.0), *((_DWORD *)v21 + 17) = v27, v27 > 0))
  {
    if (v27 < 7)
      goto LABEL_11;
    v28 = 6;
  }
  else
  {
    v28 = 1;
  }
  *((_DWORD *)v21 + 17) = v28;
LABEL_11:
  v29 = 0.0;
  v30 = v26 / (float)a5;
  if (a5)
    v29 = v30 * 1000.0;
  else
    v30 = 0.0;
  *((float *)v21 + 5) = v30;
  *((float *)v21 + 6) = v29;
  *((_DWORD *)v21 + 9) = a3 >> 1;
  *((_DWORD *)v21 + 10) = v24;
  *((_DWORD *)v21 + 13) = a4 * a3;
  *((_DWORD *)v21 + 14) = v25 * v24;
  *((_DWORD *)v21 + 15) = v25 * a3;
  *((_DWORD *)v21 + 24) = 0;
  v31 = powf((float)(1.0 / (float)((float)a2 * -3.0)) + 1.0, v26);
  *((float *)v22 + 22) = 1.0 / (float)v23;
  *((float *)v22 + 23) = v31;
  *((_DWORD *)v22 + 25) = a7;
  *((_DWORD *)v22 + 26) = a8;
  *((_DWORD *)v22 + 20) = v23;
  *((_DWORD *)v22 + 21) = 1065353216;
  *((_DWORD *)v22 + 18) = a4 * a3 + v23;
  MultiRadixRealFFT_Create(2 * a3, (MultiRadixRealFFT **)v22 + 1);
  if (a3 >= 2049)
  {
    if (os_log_type_enabled(0, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      v51 = "dft_v4.cpp";
      v52 = 1024;
      v53 = 196;
      v46 = "%25s:%-5d ASSERTION FAILURE [(!(fftSize > 1024 * 4)) != 0 is false]: ";
LABEL_45:
      _os_log_impl(&dword_1B5ED0000, 0, OS_LOG_TYPE_ERROR, v46, buf, 0x12u);
    }
LABEL_46:
    __break(1u);
    goto LABEL_47;
  }
  if (a4 >= 65)
  {
    if (os_log_type_enabled(0, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      v51 = "dft_v4.cpp";
      v52 = 1024;
      v53 = 198;
      v46 = "%25s:%-5d ASSERTION FAILURE [(!(nDftBuffers > 64)) != 0 is false]: ";
      goto LABEL_45;
    }
    goto LABEL_46;
  }
  if (a5 <= 0x2EE0)
  {
    v32 = (_DWORD *)*a1;
    *(_DWORD *)(*a1 + 108) = v24;
LABEL_21:
    v32[28] = v24;
LABEL_22:
    v32[29] = v24;
    v35 = a3 + 1;
    goto LABEL_23;
  }
  v33 = (float)v24 / (float)a5;
  v34 = (int)(float)(roundf(v33 * 8000.0) + 1.0);
  if (v24 < v34)
    v34 = a3 + 1;
  *(_DWORD *)(*a1 + 108) = v34;
  v32 = (_DWORD *)*a1;
  if (a5 <= 0x4E20)
    goto LABEL_21;
  v44 = (int)(float)((float)((float)v24 * roundf(v33 * 16000.0)) + 1.0);
  if (v24 < v44)
    v44 = a3 + 1;
  v32[28] = v44;
  v32 = (_DWORD *)*a1;
  if (a5 <= 0x5DC0)
    goto LABEL_22;
  v45 = (int)(float)(roundf(v33 * 24000.0) + 1.0);
  if (v24 < v45)
    v45 = a3 + 1;
  v32[29] = v45;
  v32 = (_DWORD *)*a1;
  v35 = *(_DWORD *)(*a1 + 116);
LABEL_23:
  v32[30] = 1;
  v36 = v32[27];
  if (v36 < v35)
  {
    v37 = v32[28];
    if (v37 < v35 && v36 < v37)
      v39 = 3;
    else
      v39 = 2;
    v32[30] = v39;
  }
  v32[31] = a10;
  v32[32] = a11;
  if ((a12 & 0xFFFFFFFE) == 2)
    v40 = a11;
  else
    v40 = 1;
  v32[33] = v40;
  v32[40] = a12;
  v32[41] = a13;
  v41 = __exp10f(a9 / 10.0);
  v42 = *a1;
  *(float *)(v42 + 172) = v41;
  v43 = *(_DWORD *)(v42 + 132);
  *(_DWORD *)(v42 + 76) = *(_DWORD *)(v42 + 72) * v43;
  *(_DWORD *)(v42 + 136) = a11 * a3;
  *(_DWORD *)(v42 + 140) = v43 * a3;
  *(_DWORD *)(v42 + 144) = v24 * a11;
  *(int32x2_t *)(v42 + 148) = vrev64_s32(vmul_s32(*(int32x2_t *)(v42 + 56), vdup_n_s32(a11)));
  *(_DWORD *)(v42 + 156) = *(_DWORD *)(v42 + 44) * a11;
  *(_DWORD *)(v42 + 168) = 0;
}

void AUEchoCancelerV5::~AUEchoCancelerV5(AUEchoCancelerV5 *this)
{
  AUEchoCancelerV5::~AUEchoCancelerV5(this);
  JUMPOUT(0x1BCC95CECLL);
}

{
  _BYTE *v2;
  _BYTE *v3;
  _BYTE *v4;
  _BYTE *v5;
  _BYTE *v6;
  _BYTE *v7;
  _BYTE *v8;
  _BYTE *v9;

  *(_QWORD *)this = &off_1E69D9F80;
  AUEchoCancelerV5::Cleanup(this);
  v2 = (_BYTE *)*((_QWORD *)this + 79);
  if (v2)
  {
    v3 = (_BYTE *)*((_QWORD *)this + 80);
    if (v3 != v2)
      *((_QWORD *)this + 80) = &v3[(v2 - v3 + 3) & 0xFFFFFFFFFFFFFFFCLL];
    operator delete(v2);
    *((_QWORD *)this + 79) = 0;
    *((_QWORD *)this + 80) = 0;
  }
  v4 = (_BYTE *)*((_QWORD *)this + 77);
  if (v4)
  {
    v5 = (_BYTE *)*((_QWORD *)this + 78);
    if (v5 != v4)
      *((_QWORD *)this + 78) = &v5[(v4 - v5 + 3) & 0xFFFFFFFFFFFFFFFCLL];
    operator delete(v4);
    *((_QWORD *)this + 77) = 0;
    *((_QWORD *)this + 78) = 0;
  }
  v6 = (_BYTE *)*((_QWORD *)this + 75);
  if (v6)
  {
    v7 = (_BYTE *)*((_QWORD *)this + 76);
    if (v7 != v6)
      *((_QWORD *)this + 76) = &v7[(v6 - v7 + 3) & 0xFFFFFFFFFFFFFFFCLL];
    operator delete(v6);
    *((_QWORD *)this + 75) = 0;
    *((_QWORD *)this + 76) = 0;
  }
  v8 = (_BYTE *)*((_QWORD *)this + 73);
  if (v8)
  {
    v9 = (_BYTE *)*((_QWORD *)this + 74);
    if (v9 != v8)
      *((_QWORD *)this + 74) = &v9[(v8 - v9 + 3) & 0xFFFFFFFFFFFFFFFCLL];
    operator delete(v8);
    *((_QWORD *)this + 73) = 0;
    *((_QWORD *)this + 74) = 0;
  }
  ausdk::AUBase::~AUBase(this);
}

uint64_t AUEchoCancelerV5::Initialize(int32x2_t *this)
{
  int32x2_t v2;
  uint64_t v3;
  int32x2_t v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t Element;
  unsigned int v8;
  uint64_t v9;
  double v10;
  int32x2_t v12;
  ausdk::AUElement *v13;
  ausdk::AUElement **v14;
  int32x2_t v15;
  ausdk::AUElement *v16;
  ausdk::AUElement **v17;

  v2 = this[15];
  if (v2)
    LODWORD(v3) = (*(uint64_t (**)(int32x2_t))(**(_QWORD **)&v2 + 24))(v2);
  else
    v3 = (*(_QWORD *)&this[13] - *(_QWORD *)&this[12]) >> 3;
  v4 = this[21];
  if (v4)
    LODWORD(v5) = (*(uint64_t (**)(int32x2_t))(**(_QWORD **)&v4 + 24))(v4);
  else
    v5 = (*(_QWORD *)&this[19] - *(_QWORD *)&this[18]) >> 3;
  if (v3 >= 2)
  {
    v6 = 1;
    do
    {
      Element = ausdk::AUScope::SafeGetElement((ausdk::AUScope *)&this[10], v6 - 1);
      if (*(double *)(Element + 80) != *(double *)(ausdk::AUScope::SafeGetElement((ausdk::AUScope *)&this[10], v6) + 80))
        return 4294956428;
    }
    while ((_DWORD)v3 != ++v6);
  }
  if (v5 >= 2)
  {
    v8 = 1;
    do
    {
      v9 = ausdk::AUScope::SafeGetElement((ausdk::AUScope *)&this[16], v8 - 1);
      if (*(double *)(v9 + 80) != *(double *)(ausdk::AUScope::SafeGetElement((ausdk::AUScope *)&this[16], v8) + 80))
        return 4294956428;
    }
    while ((_DWORD)v5 != ++v8);
  }
  v10 = *(double *)(ausdk::AUScope::SafeGetElement((ausdk::AUScope *)&this[10], 0) + 80);
  if (v10 != *(double *)(ausdk::AUScope::SafeGetElement((ausdk::AUScope *)&this[16], 0) + 80))
    return 4294956428;
  this[67].i32[0] = this[66].i32[1];
  *(_OWORD *)this[68].i8 = 0u;
  this[70] = vdup_n_s32(0xC2C80000);
  this[71].i32[0] = -1027080192;
  this[83].i32[0] = *(_DWORD *)(ausdk::AUScope::SafeGetElement((ausdk::AUScope *)&this[10], 1u) + 108);
  v12 = this[9];
  if (v12)
  {
    v13 = (ausdk::AUElement *)(*(uint64_t (**)(int32x2_t, _QWORD))(**(_QWORD **)&v12 + 32))(v12, 0);
  }
  else
  {
    v14 = (ausdk::AUElement **)this[6];
    if ((ausdk::AUElement **)this[7] == v14)
      v13 = 0;
    else
      v13 = *v14;
  }
  *(float *)&this[83].i32[1] = ausdk::AUElement::GetParameter(v13, 0x2Eu);
  v15 = this[9];
  if (v15)
  {
    v16 = (ausdk::AUElement *)(*(uint64_t (**)(int32x2_t, _QWORD))(**(_QWORD **)&v15 + 32))(v15, 0);
  }
  else
  {
    v17 = (ausdk::AUElement **)this[6];
    if ((ausdk::AUElement **)this[7] == v17)
      v16 = 0;
    else
      v16 = *v17;
  }
  this[84].i8[0] = ausdk::AUElement::GetParameter(v16, 0x41u) != 0.0;
  if (!this[42].i32[0])
    return 4294956421;
  AUEchoCancelerV5::InitializeEC((AUEchoCancelerV5 *)this);
  return 0;
}

void AUEchoCancelerV5::Cleanup(AUEchoCancelerV5 *this)
{
  uint64_t v2;
  void **v3;
  uint64_t v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  _QWORD *v28;
  void *v29;
  void *v30;
  void *v31;
  void *v32;
  void *v33;
  void *v34;
  void *v35;
  void *v36;
  void **v37;
  void *v38;
  void **v39;
  void *v40;
  _QWORD *v41;
  void *v42;
  void *v43;
  void *v44;
  void *v45;
  void *v46;
  void *v47;
  uint64_t *v48;
  _QWORD *v49;
  void *v50;
  void *v51;
  void *v52;
  void *v53;
  _QWORD *v54;
  void *v55;
  void *v56;
  void *v57;
  void *v58;
  void *v59;
  void *v60;
  void *v61;
  void *v62;
  void *v63;
  void *v64;
  void *v65;
  void *v66;
  void *v67;
  void *v68;
  void *v69;
  void *v70;
  void *v71;
  void *v72;
  void *v73;
  void *v74;
  void *v75;
  void *v76;
  void *v77;
  void *v78;
  void *v79;
  void *v80;
  void *v81;
  void *v82;
  void *v83;
  void *v84;
  uint64_t *v85;
  uint64_t v86;
  uint64_t v87;
  void *v88;
  void *v89;
  void **v90;
  void **v91;
  void *v92;
  void *v93;
  void *v94;
  void *v95;
  void *v96;
  void *v97;
  void *v98;
  void *v99;
  void *v100;
  void *v101;
  void *v102;
  void *v103;
  _QWORD *v104;
  void *v105;
  void *v106;
  _QWORD *v107;
  void *v108;

  v2 = *((_QWORD *)this + 72);
  if (v2)
  {
    v3 = *(void ***)(v2 + 64);
    if (v3)
    {
      if (!*v3 || (free(*v3), *v3 = 0, v2 = *((_QWORD *)this + 72), (v3 = *(void ***)(v2 + 64)) != 0))
      {
        free(v3);
        *(_QWORD *)(v2 + 64) = 0;
        v2 = *((_QWORD *)this + 72);
      }
    }
    v4 = *(_QWORD *)(v2 + 56);
    if (v4 && *(_QWORD *)v4)
    {
      free(*(void **)v4);
      *(_QWORD *)v4 = 0;
      v2 = *((_QWORD *)this + 72);
      v4 = *(_QWORD *)(v2 + 56);
    }
    v5 = *(void **)(v4 + 8);
    if (v5)
    {
      free(v5);
      *(_QWORD *)(v4 + 8) = 0;
      v2 = *((_QWORD *)this + 72);
      v4 = *(_QWORD *)(v2 + 56);
    }
    v6 = *(void **)(v4 + 16);
    if (v6)
    {
      free(v6);
      *(_QWORD *)(v4 + 16) = 0;
      v2 = *((_QWORD *)this + 72);
      v4 = *(_QWORD *)(v2 + 56);
    }
    v7 = *(void **)(v4 + 32);
    if (v7)
    {
      free(v7);
      *(_QWORD *)(v4 + 32) = 0;
      v2 = *((_QWORD *)this + 72);
      v4 = *(_QWORD *)(v2 + 56);
    }
    v8 = *(void **)(v4 + 48);
    if (v8)
    {
      free(v8);
      *(_QWORD *)(v4 + 48) = 0;
      v2 = *((_QWORD *)this + 72);
      v4 = *(_QWORD *)(v2 + 56);
    }
    v9 = *(void **)(v4 + 64);
    if (v9)
    {
      free(v9);
      *(_QWORD *)(v4 + 64) = 0;
      v2 = *((_QWORD *)this + 72);
      v4 = *(_QWORD *)(v2 + 56);
    }
    v10 = *(void **)(v4 + 72);
    if (v10)
    {
      free(v10);
      *(_QWORD *)(v4 + 72) = 0;
      v2 = *((_QWORD *)this + 72);
      v4 = *(_QWORD *)(v2 + 56);
    }
    v11 = *(void **)(v4 + 80);
    if (v11)
    {
      free(v11);
      *(_QWORD *)(v4 + 80) = 0;
      v2 = *((_QWORD *)this + 72);
      v4 = *(_QWORD *)(v2 + 56);
    }
    v12 = *(void **)(v4 + 88);
    if (v12)
    {
      free(v12);
      *(_QWORD *)(v4 + 88) = 0;
      v2 = *((_QWORD *)this + 72);
      v4 = *(_QWORD *)(v2 + 56);
    }
    v13 = *(void **)(v4 + 96);
    if (v13)
    {
      free(v13);
      *(_QWORD *)(v4 + 96) = 0;
      v2 = *((_QWORD *)this + 72);
      v4 = *(_QWORD *)(v2 + 56);
    }
    v14 = *(void **)(v4 + 104);
    if (v14)
    {
      free(v14);
      *(_QWORD *)(v4 + 104) = 0;
      v2 = *((_QWORD *)this + 72);
      v4 = *(_QWORD *)(v2 + 56);
    }
    v15 = *(void **)(v4 + 112);
    if (v15)
    {
      free(v15);
      *(_QWORD *)(v4 + 112) = 0;
      v2 = *((_QWORD *)this + 72);
      v4 = *(_QWORD *)(v2 + 56);
    }
    v16 = *(void **)(v4 + 120);
    if (v16)
    {
      free(v16);
      *(_QWORD *)(v4 + 120) = 0;
      v2 = *((_QWORD *)this + 72);
      v4 = *(_QWORD *)(v2 + 56);
    }
    v17 = *(void **)(v4 + 128);
    if (v17)
    {
      free(v17);
      *(_QWORD *)(v4 + 128) = 0;
      v2 = *((_QWORD *)this + 72);
      v4 = *(_QWORD *)(v2 + 56);
    }
    v18 = *(void **)(v4 + 136);
    if (v18)
    {
      free(v18);
      *(_QWORD *)(v4 + 136) = 0;
      v2 = *((_QWORD *)this + 72);
      v4 = *(_QWORD *)(v2 + 56);
    }
    v19 = *(void **)(v4 + 168);
    if (v19)
    {
      free(v19);
      *(_QWORD *)(v4 + 168) = 0;
      v2 = *((_QWORD *)this + 72);
      v4 = *(_QWORD *)(v2 + 56);
    }
    v20 = *(void **)(v4 + 144);
    if (v20)
    {
      free(v20);
      *(_QWORD *)(v4 + 144) = 0;
      v2 = *((_QWORD *)this + 72);
      v4 = *(_QWORD *)(v2 + 56);
    }
    v21 = *(void **)(v4 + 296);
    if (v21)
    {
      free(v21);
      *(_QWORD *)(v4 + 296) = 0;
      v2 = *((_QWORD *)this + 72);
      v4 = *(_QWORD *)(v2 + 56);
    }
    v22 = *(void **)(v4 + 304);
    if (v22)
    {
      free(v22);
      *(_QWORD *)(v4 + 304) = 0;
      v2 = *((_QWORD *)this + 72);
      v4 = *(_QWORD *)(v2 + 56);
    }
    v23 = *(void **)(v4 + 312);
    if (v23)
    {
      free(v23);
      *(_QWORD *)(v4 + 312) = 0;
      v2 = *((_QWORD *)this + 72);
      v4 = *(_QWORD *)(v2 + 56);
    }
    v24 = *(void **)(v4 + 320);
    if (v24)
    {
      free(v24);
      *(_QWORD *)(v4 + 320) = 0;
      v2 = *((_QWORD *)this + 72);
      v4 = *(_QWORD *)(v2 + 56);
    }
    v25 = *(void **)(v4 + 328);
    if (v25)
    {
      free(v25);
      *(_QWORD *)(v4 + 328) = 0;
      v2 = *((_QWORD *)this + 72);
      v4 = *(_QWORD *)(v2 + 56);
    }
    v26 = *(void **)(v4 + 344);
    if (v26)
    {
      free(v26);
      *(_QWORD *)(v4 + 344) = 0;
      v2 = *((_QWORD *)this + 72);
      v4 = *(_QWORD *)(v2 + 56);
    }
    v27 = *(void **)(v4 + 360);
    if (v27)
    {
      free(v27);
      *(_QWORD *)(v4 + 360) = 0;
      v2 = *((_QWORD *)this + 72);
    }
    if (!*(_DWORD *)(*(_QWORD *)v2 + 100))
    {
      v28 = *(_QWORD **)(v2 + 56);
      v29 = (void *)v28[22];
      if (v29)
      {
        free(v29);
        v28[22] = 0;
        v2 = *((_QWORD *)this + 72);
        v28 = *(_QWORD **)(v2 + 56);
      }
      v30 = (void *)v28[23];
      if (v30)
      {
        free(v30);
        v28[23] = 0;
        v2 = *((_QWORD *)this + 72);
        v28 = *(_QWORD **)(v2 + 56);
      }
      v31 = (void *)v28[24];
      if (v31)
      {
        free(v31);
        v28[24] = 0;
        v2 = *((_QWORD *)this + 72);
        v28 = *(_QWORD **)(v2 + 56);
      }
      v32 = (void *)v28[25];
      if (v32)
      {
        free(v32);
        v28[25] = 0;
        v2 = *((_QWORD *)this + 72);
        v28 = *(_QWORD **)(v2 + 56);
      }
      v33 = (void *)v28[27];
      if (v33)
      {
        free(v33);
        v28[27] = 0;
        v2 = *((_QWORD *)this + 72);
        v28 = *(_QWORD **)(v2 + 56);
      }
      v34 = (void *)v28[29];
      if (v34)
      {
        free(v34);
        v28[29] = 0;
        v2 = *((_QWORD *)this + 72);
        v28 = *(_QWORD **)(v2 + 56);
      }
      v35 = (void *)v28[30];
      if (v35)
      {
        free(v35);
        v28[30] = 0;
        v2 = *((_QWORD *)this + 72);
        v28 = *(_QWORD **)(v2 + 56);
      }
      v36 = (void *)v28[31];
      if (v36)
      {
        free(v36);
        v28[31] = 0;
        v2 = *((_QWORD *)this + 72);
        v28 = *(_QWORD **)(v2 + 56);
      }
      v37 = (void **)v28[33];
      if (v37)
      {
        if (!*v37
          || (free(*v37),
              *v37 = 0,
              v2 = *((_QWORD *)this + 72),
              v28 = *(_QWORD **)(v2 + 56),
              (v37 = (void **)v28[33]) != 0))
        {
          free(v37);
          v28[33] = 0;
          v2 = *((_QWORD *)this + 72);
          v28 = *(_QWORD **)(v2 + 56);
        }
      }
      v38 = (void *)v28[34];
      if (v38)
      {
        free(v38);
        v28[34] = 0;
        v2 = *((_QWORD *)this + 72);
        v28 = *(_QWORD **)(v2 + 56);
      }
      v39 = (void **)v28[35];
      if (v39)
      {
        if (!*v39
          || (free(*v39),
              *v39 = 0,
              v2 = *((_QWORD *)this + 72),
              v28 = *(_QWORD **)(v2 + 56),
              (v39 = (void **)v28[35]) != 0))
        {
          free(v39);
          v28[35] = 0;
          v2 = *((_QWORD *)this + 72);
          v28 = *(_QWORD **)(v2 + 56);
        }
      }
      v40 = (void *)v28[36];
      if (v40)
      {
        free(v40);
        v28[36] = 0;
        v2 = *((_QWORD *)this + 72);
      }
      dft_v3::dftRemove((void **)(v2 + 72));
      v2 = *((_QWORD *)this + 72);
    }
    v41 = *(_QWORD **)(v2 + 56);
    v42 = (void *)v41[51];
    if (v42)
    {
      free(v42);
      v41[51] = 0;
      v2 = *((_QWORD *)this + 72);
      v41 = *(_QWORD **)(v2 + 56);
    }
    v43 = (void *)v41[53];
    if (v43)
    {
      free(v43);
      v41[53] = 0;
      v2 = *((_QWORD *)this + 72);
      v41 = *(_QWORD **)(v2 + 56);
    }
    v44 = (void *)v41[55];
    if (v44)
    {
      free(v44);
      v41[55] = 0;
      v2 = *((_QWORD *)this + 72);
      v41 = *(_QWORD **)(v2 + 56);
    }
    v45 = (void *)v41[57];
    if (v45)
    {
      free(v45);
      v41[57] = 0;
      v2 = *((_QWORD *)this + 72);
      v41 = *(_QWORD **)(v2 + 56);
    }
    v46 = (void *)v41[58];
    if (v46)
    {
      free(v46);
      v41[58] = 0;
      v2 = *((_QWORD *)this + 72);
      v41 = *(_QWORD **)(v2 + 56);
    }
    v47 = (void *)v41[59];
    if (v47)
    {
      free(v47);
      v41[59] = 0;
      v2 = *((_QWORD *)this + 72);
    }
    dft_v3::dftRemove((void **)(v2 + 80));
    lmsfilt_v5::removeLmsFilter((uint64_t *)(*((_QWORD *)this + 72) + 88));
    lmsfilt_v5::removeLmsFilter((uint64_t *)(*((_QWORD *)this + 72) + 96));
    v48 = (uint64_t *)*((_QWORD *)this + 72);
    if (*(int *)(*v48 + 104) >= 1)
    {
      lmsfilt_v5::removeLmsFilter(v48 + 13);
      lmsfilt_v5::removeLmsFilter((uint64_t *)(*((_QWORD *)this + 72) + 112));
      v48 = (uint64_t *)*((_QWORD *)this + 72);
      v49 = (_QWORD *)v48[7];
      v50 = (void *)v49[47];
      if (v50)
      {
        free(v50);
        v49[47] = 0;
        v48 = (uint64_t *)*((_QWORD *)this + 72);
        v49 = (_QWORD *)v48[7];
      }
      v51 = (void *)v49[49];
      if (v51)
      {
        free(v51);
        v49[49] = 0;
        v48 = (uint64_t *)*((_QWORD *)this + 72);
        v49 = (_QWORD *)v48[7];
      }
      v52 = (void *)v49[48];
      if (v52)
      {
        free(v52);
        v49[48] = 0;
        v48 = (uint64_t *)*((_QWORD *)this + 72);
        v49 = (_QWORD *)v48[7];
      }
      v53 = (void *)v49[50];
      if (v53)
      {
        free(v53);
        v49[50] = 0;
        v48 = (uint64_t *)*((_QWORD *)this + 72);
      }
    }
    v54 = (_QWORD *)v48[6];
    if (v54)
    {
      v55 = (void *)v54[39];
      if (v55)
      {
        free(v55);
        v54[39] = 0;
        v54 = (_QWORD *)v48[6];
      }
      v56 = (void *)v54[41];
      if (v56)
      {
        free(v56);
        v54[41] = 0;
        v54 = (_QWORD *)v48[6];
      }
      v57 = (void *)v54[1];
      if (v57)
      {
        free(v57);
        v54[1] = 0;
        v54 = (_QWORD *)v48[6];
      }
      v58 = (void *)v54[6];
      if (v58)
      {
        free(v58);
        v54[6] = 0;
        v54 = (_QWORD *)v48[6];
      }
      v59 = (void *)v54[7];
      if (v59)
      {
        free(v59);
        v54[7] = 0;
        v54 = (_QWORD *)v48[6];
      }
      v60 = (void *)v54[8];
      if (v60)
      {
        free(v60);
        v54[8] = 0;
        v54 = (_QWORD *)v48[6];
      }
      v61 = (void *)v54[9];
      if (v61)
      {
        free(v61);
        v54[9] = 0;
        v54 = (_QWORD *)v48[6];
      }
      v62 = (void *)v54[10];
      if (v62)
      {
        free(v62);
        v54[10] = 0;
        v54 = (_QWORD *)v48[6];
      }
      v63 = (void *)v54[15];
      if (v63)
      {
        free(v63);
        v54[15] = 0;
        v54 = (_QWORD *)v48[6];
      }
      v64 = (void *)v54[13];
      if (v64)
      {
        free(v64);
        v54[13] = 0;
        v54 = (_QWORD *)v48[6];
      }
      v65 = (void *)v54[79];
      if (v65)
      {
        free(v65);
        v54[79] = 0;
        v54 = (_QWORD *)v48[6];
      }
      v66 = (void *)v54[14];
      if (v66)
      {
        free(v66);
        v54[14] = 0;
        v54 = (_QWORD *)v48[6];
      }
      v67 = (void *)v54[12];
      if (v67)
      {
        free(v67);
        v54[12] = 0;
        v54 = (_QWORD *)v48[6];
      }
      v68 = (void *)v54[20];
      if (v68)
      {
        free(v68);
        v54[20] = 0;
        v54 = (_QWORD *)v48[6];
      }
      v69 = (void *)v54[21];
      if (v69)
      {
        free(v69);
        v54[21] = 0;
        v54 = (_QWORD *)v48[6];
      }
      v70 = (void *)v54[22];
      if (v70)
      {
        free(v70);
        v54[22] = 0;
        v54 = (_QWORD *)v48[6];
      }
      v71 = (void *)v54[23];
      if (v71)
      {
        free(v71);
        v54[23] = 0;
        v54 = (_QWORD *)v48[6];
      }
      v72 = (void *)v54[24];
      if (v72)
      {
        free(v72);
        v54[24] = 0;
        v54 = (_QWORD *)v48[6];
      }
      v73 = (void *)v54[25];
      if (v73)
      {
        free(v73);
        v54[25] = 0;
        v54 = (_QWORD *)v48[6];
      }
      v74 = (void *)v54[26];
      if (v74)
      {
        free(v74);
        v54[26] = 0;
        v54 = (_QWORD *)v48[6];
      }
      v75 = (void *)v54[37];
      if (v75)
      {
        free(v75);
        v54[37] = 0;
        v54 = (_QWORD *)v48[6];
      }
      v76 = (void *)v54[38];
      if (v76)
      {
        free(v76);
        v54[38] = 0;
        v54 = (_QWORD *)v48[6];
      }
      v77 = (void *)v54[56];
      if (v77)
      {
        free(v77);
        v54[56] = 0;
        v54 = (_QWORD *)v48[6];
      }
      v78 = (void *)v54[57];
      if (v78)
      {
        free(v78);
        v54[57] = 0;
        v54 = (_QWORD *)v48[6];
      }
      v79 = (void *)v54[58];
      if (v79)
      {
        free(v79);
        v54[58] = 0;
        v54 = (_QWORD *)v48[6];
      }
      v80 = (void *)v54[59];
      if (v80)
      {
        free(v80);
        v54[59] = 0;
        v54 = (_QWORD *)v48[6];
      }
      v81 = (void *)v54[62];
      if (v81)
      {
        free(v81);
        v54[62] = 0;
        v54 = (_QWORD *)v48[6];
      }
      v82 = (void *)v54[63];
      if (v82)
      {
        free(v82);
        v54[63] = 0;
        v54 = (_QWORD *)v48[6];
      }
      v83 = (void *)v54[60];
      if (v83)
      {
        free(v83);
        v54[60] = 0;
        v54 = (_QWORD *)v48[6];
      }
      v84 = (void *)v54[61];
      if (!v84 || (free(v84), v54[61] = 0, (v54 = (_QWORD *)v48[6]) != 0))
      {
        free(v54);
        v48[6] = 0;
      }
    }
    v85 = (uint64_t *)*((_QWORD *)this + 72);
    v86 = v85[1];
    if (v86)
    {
      v87 = *v85;
      if (*(_QWORD *)v86)
      {
        free(*(void **)v86);
        *(_QWORD *)v86 = 0;
        v86 = v85[1];
      }
      v88 = *(void **)(v86 + 8);
      if (v88)
      {
        free(v88);
        *(_QWORD *)(v86 + 8) = 0;
        v86 = v85[1];
      }
      v89 = *(void **)(v86 + 32);
      if (v89)
      {
        free(v89);
        *(_QWORD *)(v86 + 32) = 0;
        v86 = v85[1];
      }
      if (!*(_DWORD *)(v87 + 100))
      {
        v90 = *(void ***)(v86 + 56);
        if (v90 && *v90)
        {
          free(*v90);
          *v90 = 0;
          v86 = v85[1];
        }
        v91 = *(void ***)(v86 + 64);
        if (v91 && *v91)
        {
          free(*v91);
          *v91 = 0;
          v86 = v85[1];
        }
        v92 = *(void **)(v86 + 56);
        if (v92)
        {
          free(v92);
          *(_QWORD *)(v86 + 56) = 0;
          v86 = v85[1];
        }
        v93 = *(void **)(v86 + 64);
        if (v93)
        {
          free(v93);
          *(_QWORD *)(v86 + 64) = 0;
          v86 = v85[1];
        }
      }
      v94 = *(void **)(v86 + 88);
      if (v94)
      {
        free(v94);
        *(_QWORD *)(v86 + 88) = 0;
        v86 = v85[1];
      }
      v95 = *(void **)(v86 + 16);
      if (v95)
      {
        free(v95);
        *(_QWORD *)(v86 + 16) = 0;
        v86 = v85[1];
      }
      v96 = *(void **)(v86 + 24);
      if (v96)
      {
        free(v96);
        *(_QWORD *)(v86 + 24) = 0;
        v86 = v85[1];
      }
      v97 = *(void **)(v86 + 96);
      if (v97)
      {
        free(v97);
        *(_QWORD *)(v86 + 96) = 0;
        v86 = v85[1];
      }
      v98 = *(void **)(v86 + 104);
      if (v98)
      {
        free(v98);
        *(_QWORD *)(v86 + 104) = 0;
        v86 = v85[1];
      }
      v99 = *(void **)(v86 + 120);
      if (v99)
      {
        free(v99);
        *(_QWORD *)(v86 + 120) = 0;
        v86 = v85[1];
      }
      v100 = *(void **)(v86 + 128);
      if (v100)
      {
        free(v100);
        *(_QWORD *)(v86 + 128) = 0;
        v86 = v85[1];
      }
      v101 = *(void **)(v86 + 136);
      if (v101)
      {
        free(v101);
        *(_QWORD *)(v86 + 136) = 0;
        v86 = v85[1];
      }
      v102 = *(void **)(v86 + 144);
      if (v102)
      {
        free(v102);
        *(_QWORD *)(v86 + 144) = 0;
        v86 = v85[1];
      }
      v103 = *(void **)(v86 + 160);
      if (!v103 || (free(v103), *(_QWORD *)(v86 + 160) = 0, (v86 = v85[1]) != 0))
      {
        free((void *)v86);
        v85[1] = 0;
      }
    }
    dft_v3::dftRemove(*((void ***)this + 72));
    v104 = (_QWORD *)*((_QWORD *)this + 72);
    v105 = (void *)v104[7];
    if (!v105 || (free(v105), v104[7] = 0, (v104 = (_QWORD *)*((_QWORD *)this + 72)) != 0))
      free(v104);
    *((_QWORD *)this + 72) = 0;
  }
  v106 = (void *)*((_QWORD *)this + 82);
  if (v106)
  {
    free(v106);
    *((_QWORD *)this + 82) = 0;
  }
  v107 = (_QWORD *)*((_QWORD *)this + 85);
  if (v107)
  {
    v108 = (void *)v107[20];
    if (!v108 || (free(v108), v107[20] = 0, (v107 = (_QWORD *)*((_QWORD *)this + 85)) != 0))
    {
      free(v107);
      *((_QWORD *)this + 85) = 0;
    }
  }
}

uint64_t AUEchoCancelerV5::Reset(float **this)
{
  float *v2;
  uint64_t v3;
  float *v4;
  uint64_t v5;
  float *v6;
  uint64_t v7;
  float *v8;
  uint64_t v9;
  int **v10;
  int *v11;
  int *v12;
  int *v13;
  int *v14;
  vDSP_Length v15;
  vDSP_Length v16;
  vDSP_Length v17;
  int64_t v18;
  float *v19;
  float *v20;
  float *v21;
  float *v22;
  float *v23;
  float *v24;
  float *v25;
  uint64_t v26;
  float v27;
  float *v28;
  int64_t i;
  uint64_t v30;
  uint64_t v31;
  float *v32;
  float v33;
  float v34;
  float *v35;
  uint64_t v36;
  __int128 v37;
  float *v38;
  float *v39;
  vDSP_Length v40;
  float *v41;
  float *v42;
  float *v43;
  _DWORD *v44;
  _DWORD *v45;
  uint64_t v46;
  _DWORD *v47;
  int v48;
  float *v49;
  vDSP_Length v55;
  float *v56;
  float *v57;
  float *v58;
  float *v59;
  vDSP_Length v60;
  float *v61;
  float *v62;
  float *v63;
  float *v64;
  size_t v65;
  int v66;
  vDSP_Length v67;
  uint64_t v68;
  uint64_t v69;
  vDSP_Length v70;
  vDSP_Length v71;
  float *v72;
  float *v73;
  vDSP_Length v74;
  float *v75;
  float *v76;
  float *v77;
  float *v78;
  float *v79;
  float *v80;
  float *v81;
  vDSP_Length v82;
  float *v83;
  float *v84;
  float *v85;
  vDSP_Length v86;
  float *v87;
  float *v88;
  float *v89;
  float *v90;
  float *v91;
  float *v92;
  float *v93;
  float *v94;
  float *v95;
  float *v96;
  float *v97;
  float *v98;
  float *v99;
  float *v100;
  float *v101;
  uint64_t v102;
  float *v103;
  float *v104;
  float *v105;
  float *v106;
  float *v107;
  float *v108;
  float *v109;
  int *v110;
  vDSP_Length v111;
  int v112;
  float *v113;
  float *v114;
  float *v115;
  float *v116;
  float *v117;
  float *v118;
  float *v119;
  float *v120;
  vDSP_Length v121;
  float *v122;
  vDSP_Length v123;
  float *v124;
  float *v125;
  float *v126;
  int *v127;
  vDSP_Length v128;
  vDSP_Length v129;
  float *v130;
  float *v131;
  float *v132;
  float *v133;
  float *v134;
  float *v135;
  float *v136;
  float *v137;
  float *v138;
  float *v139;
  float __B;
  int *v142;

  if (*((_BYTE *)this + 17))
  {
    vDSP_vclr(this[82], 1, (*((_DWORD *)this[85] + 30) * *((_DWORD *)this + 84)));
    v2 = this[73];
    v3 = (char *)this[74] - (char *)v2;
    if (v3 >= 1)
      bzero(v2, 4 * (((unint64_t)v3 >> 2) - ((unint64_t)v3 > 3)) + 4);
    v4 = this[75];
    v5 = (char *)this[76] - (char *)v4;
    if (v5 >= 1)
      bzero(v4, 4 * (((unint64_t)v5 >> 2) - ((unint64_t)v5 > 3)) + 4);
    v6 = this[77];
    v7 = (char *)this[78] - (char *)v6;
    if (v7 >= 1)
      bzero(v6, 4 * (((unint64_t)v7 >> 2) - ((unint64_t)v7 > 3)) + 4);
    v8 = this[79];
    v9 = (char *)this[80] - (char *)v8;
    if (v9 >= 1)
      bzero(v8, 4 * (((unint64_t)v9 >> 2) - ((unint64_t)v9 > 3)) + 4);
    v10 = (int **)this[72];
    if (v10)
    {
      v11 = *v10;
      v12 = v10[1];
      v142 = *v10;
      v14 = v10[6];
      v13 = v10[7];
      lmsfilt_v5::resetLmsFilter((uint64_t *)&v142, (uint64_t)v10[11]);
      lmsfilt_v5::resetLmsFilter((uint64_t *)&v142, (uint64_t)v10[12]);
      if ((*v10)[26] >= 1)
      {
        lmsfilt_v5::resetLmsFilter((uint64_t *)&v142, (uint64_t)v10[13]);
        lmsfilt_v5::resetLmsFilter((uint64_t *)&v142, (uint64_t)v10[14]);
      }
      v15 = v11[32];
      v16 = v11[10];
      v17 = v11[36];
      v18 = v11[39];
      *(_BYTE *)v14 = 1;
      v14[1] = 813694978;
      v19 = (float *)*((_QWORD *)v14 + 1);
      if (v19)
        vDSP_vclr(v19, 1, v15);
      *((_OWORD *)v14 + 1) = xmmword_1B66A1280;
      *((int32x2_t *)v14 + 4) = vdup_n_s32(0x30800002u);
      v14[10] = 813694978;
      v20 = (float *)*((_QWORD *)v14 + 6);
      if (v20)
        vDSP_vclr(v20, 1, v16);
      v21 = (float *)*((_QWORD *)v14 + 7);
      if (v21)
        vDSP_vclr(v21, 1, v17);
      v22 = (float *)*((_QWORD *)v14 + 8);
      if (v22)
        vDSP_vclr(v22, 1, v16);
      v23 = (float *)*((_QWORD *)v14 + 9);
      if (v23)
        vDSP_vclr(v23, 1, v16);
      v24 = (float *)*((_QWORD *)v14 + 10);
      if (v24)
        vDSP_vclr(v24, 1, v16);
      *((int32x2_t *)v14 + 11) = vdup_n_s32(0x30800002u);
      *(_QWORD *)(v14 + 37) = 0;
      *(_QWORD *)(v14 + 35) = 0;
      v25 = (float *)*((_QWORD *)v14 + 15);
      if (v25)
        vDSP_vclr(v25, 1, v18);
      v26 = v11[11];
      v27 = expf(-2.4 / (float)(int)v26);
      v28 = (float *)*((_QWORD *)v14 + 13);
      if ((int)v18 >= 1)
      {
        for (i = 0; i < v18; i += v26)
          v28[i] = 0.7;
      }
      if ((int)v15 < 1)
      {
        v33 = 0.0;
      }
      else
      {
        v30 = 0;
        v31 = 4 * v26;
        v32 = v28 + 1;
        v33 = 0.0;
        do
        {
          v33 = v33 + v28[v30 * v26];
          if ((int)v26 >= 2)
          {
            v34 = *(float *)((char *)v28 + v31 * v30);
            v35 = v32;
            v36 = v26 - 1;
            do
            {
              v34 = v27 * v34;
              *v35++ = v34;
              v33 = v33 + v34;
              --v36;
            }
            while (v36);
          }
          ++v30;
          v32 = (float *)((char *)v32 + v31);
        }
        while (v30 != v15);
      }
      __B = 1.0 / v33;
      vDSP_vsmul(v28, 1, &__B, v28, 1, v18);
      *((int32x2_t *)v14 + 27) = vdup_n_s32(0x30800002u);
      v14[56] = 0;
      *(_OWORD *)(v14 + 57) = xmmword_1B66A1290;
      *(_QWORD *)&v37 = 0x100000001;
      *((_QWORD *)&v37 + 1) = 0x100000001;
      *(_OWORD *)(v14 + 61) = v37;
      *(_QWORD *)(v14 + 67) = 0;
      *(_QWORD *)(v14 + 69) = 0;
      *(_QWORD *)(v14 + 65) = 0;
      *(_QWORD *)(v14 + 71) = 0x3080000230800002;
      v38 = (float *)*((_QWORD *)v14 + 37);
      if (v38)
        vDSP_vclr(v38, 1, v16);
      v39 = (float *)*((_QWORD *)v14 + 38);
      if (v39)
        vDSP_vclr(v39, 1, v16);
      v40 = v14[59];
      v41 = (float *)*((_QWORD *)v14 + 20);
      if (v41)
        vDSP_vclr(v41, 1, v14[59]);
      v42 = (float *)*((_QWORD *)v14 + 21);
      if (v42)
        vDSP_vclr(v42, 1, v40);
      v43 = (float *)*((_QWORD *)v14 + 22);
      if (v43)
        vDSP_vclr(v43, 1, v40);
      if ((int)v40 >= 1)
      {
        v44 = (_DWORD *)*((_QWORD *)v14 + 24);
        v45 = (_DWORD *)*((_QWORD *)v14 + 25);
        v46 = v40;
        v47 = (_DWORD *)*((_QWORD *)v14 + 26);
        do
        {
          *v44++ = 1;
          *v45++ = 1;
          *v47++ = 1;
          --v46;
        }
        while (v46);
      }
      v48 = v14[59];
      if (v48 <= v14[63])
        v48 = v14[63];
      if (v48 >= 1)
        memset_pattern16(*((void **)v14 + 23), &unk_1B66A2BB0, 4 * v48);
      *((_QWORD *)v14 + 40) = 0;
      *((_QWORD *)v14 + 42) = 0;
      v14[94] = 0;
      bzero(*((void **)v14 + 41), 4 * v11[32]);
      *(_QWORD *)(v14 + 95) = 0;
      v14[97] = 1022739087;
      if (!v11[25])
      {
        v49 = (float *)*((_QWORD *)v14 + 39);
        if (v49)
          vDSP_vclr(v49, 1, v11[32]);
        v14[80] = 0;
        v14[96] = v11[11];
      }
      __asm { FMOV            V0.2S, #1.0 }
      *((_QWORD *)v14 + 50) = _D0;
      v14[102] = 1065353216;
      v55 = v14[111];
      v56 = (float *)*((_QWORD *)v14 + 62);
      if (v56)
        vDSP_vclr(v56, 1, v14[111]);
      v57 = (float *)*((_QWORD *)v14 + 63);
      if (v57)
        vDSP_vclr(v57, 1, v55);
      v58 = (float *)*((_QWORD *)v14 + 60);
      if (v58)
        vDSP_vclr(v58, 1, v55);
      v59 = (float *)*((_QWORD *)v14 + 61);
      if (v59)
        vDSP_vclr(v59, 1, v55);
      v60 = v14[110];
      v61 = (float *)*((_QWORD *)v14 + 56);
      if (v61)
        vDSP_vclr(v61, 1, v14[110]);
      v62 = (float *)*((_QWORD *)v14 + 57);
      if (v62)
        vDSP_vclr(v62, 1, v60);
      v63 = (float *)*((_QWORD *)v14 + 58);
      if (v63)
        vDSP_vclr(v63, 1, v60);
      v64 = (float *)*((_QWORD *)v14 + 59);
      if (v64)
        vDSP_vclr(v64, 1, v60);
      v14[128] = 813694978;
      v14[137] = 0;
      *(_OWORD *)(v14 + 129) = 0u;
      *(_OWORD *)(v14 + 133) = 0u;
      *(_OWORD *)(v14 + 139) = xmmword_1B66A2250;
      *((_OWORD *)v14 + 36) = xmmword_1B66A1290;
      *((_QWORD *)v14 + 74) = 0;
      *((_QWORD *)v14 + 75) = 0xC1A0000000000000;
      *((_OWORD *)v14 + 38) = 0u;
      v14[156] = 0;
      *((_QWORD *)v14 + 80) = 3184315597;
      v65 = v11[32];
      v66 = v11[9];
      v67 = v66 * (uint64_t)(int)v65;
      v68 = v11[34];
      v69 = v11[11];
      v71 = v11[37];
      v70 = v11[38];
      if (*(_QWORD *)v12)
        vDSP_vclr(*(float **)v12, 1, v66 * (uint64_t)(int)v65);
      v72 = (float *)*((_QWORD *)v12 + 1);
      if (v72)
        vDSP_vclr(v72, 1, v67);
      v73 = (float *)*((_QWORD *)v12 + 4);
      if (v73)
        vDSP_vclr(v73, 1, 2 * v68);
      if (!v11[25])
      {
        v74 = v11[33];
        v75 = (float *)**((_QWORD **)v12 + 7);
        if (v75)
          vDSP_vclr(v75, 1, v11[33]);
        v76 = (float *)**((_QWORD **)v12 + 8);
        if (v76)
          vDSP_vclr(v76, 1, v74);
      }
      *((_QWORD *)v12 + 9) = 0;
      v12[20] = 0;
      bzero(*((void **)v12 + 11), 4 * v69);
      v77 = (float *)*((_QWORD *)v12 + 2);
      if (v77)
        vDSP_vclr(v77, 1, v71);
      v78 = (float *)*((_QWORD *)v12 + 3);
      if (v78)
        vDSP_vclr(v78, 1, v71);
      __B = 9.0e-10;
      v79 = (float *)*((_QWORD *)v12 + 12);
      if (v79)
        vDSP_vfill(&__B, v79, 1, v70);
      v80 = (float *)*((_QWORD *)v12 + 13);
      if (v80)
        vDSP_vclr(v80, 1, (int)v69 * (uint64_t)(int)v65);
      memset(*((void **)v12 + 15), 1, v65);
      memset(*((void **)v12 + 16), 1, v65);
      bzero(*((void **)v12 + 17), v65);
      bzero(*((void **)v12 + 18), 4 * v65);
      v81 = (float *)*((_QWORD *)v12 + 6);
      if (v81)
        vDSP_vclr(v81, 1, v11[34]);
      v82 = v11[4];
      if (*(_QWORD *)v13)
        vDSP_vclr(*(float **)v13, 1, v11[4]);
      v83 = (float *)*((_QWORD *)v13 + 1);
      if (v83)
        vDSP_vclr(v83, 1, v82);
      v84 = (float *)*((_QWORD *)v13 + 2);
      if (v84)
        vDSP_vclr(v84, 1, 2 * v11[34]);
      v85 = (float *)*((_QWORD *)v13 + 4);
      v86 = 2 * (int)v82;
      if (v85)
        vDSP_vclr(v85, 1, 2 * (int)v82);
      v87 = (float *)*((_QWORD *)v13 + 6);
      if (v87)
        vDSP_vclr(v87, 1, v86);
      v88 = (float *)*((_QWORD *)v13 + 8);
      if (v88)
      {
        vDSP_vclr(v88, 1, v82);
        v89 = (float *)*((_QWORD *)v13 + 8);
        if (v89)
        {
          vDSP_vclr(v89, 1, v82);
          v90 = (float *)*((_QWORD *)v13 + 8);
          if (v90)
            vDSP_vclr(v90, 1, v82);
        }
      }
      v91 = (float *)*((_QWORD *)v13 + 9);
      if (v91)
        vDSP_vclr(v91, 1, v82);
      v92 = (float *)*((_QWORD *)v13 + 10);
      if (v92)
        vDSP_vclr(v92, 1, v82);
      v93 = (float *)*((_QWORD *)v13 + 11);
      if (v93)
        vDSP_vclr(v93, 1, v82);
      v94 = (float *)*((_QWORD *)v13 + 12);
      if (v94)
        vDSP_vclr(v94, 1, v82);
      v95 = (float *)*((_QWORD *)v13 + 13);
      if (v95)
        vDSP_vclr(v95, 1, v82);
      v96 = (float *)*((_QWORD *)v13 + 14);
      if (v96)
        vDSP_vclr(v96, 1, v82);
      v97 = (float *)*((_QWORD *)v13 + 15);
      if (v97)
        vDSP_vclr(v97, 1, v82);
      v98 = (float *)*((_QWORD *)v13 + 16);
      if (v98)
        vDSP_vclr(v98, 1, v82);
      v99 = (float *)*((_QWORD *)v13 + 17);
      if (v99)
        vDSP_vclr(v99, 1, v82);
      v100 = (float *)*((_QWORD *)v13 + 21);
      if (v100)
        vDSP_vclr(v100, 1, v82);
      v101 = (float *)*((_QWORD *)v13 + 18);
      if (v101)
        vDSP_vclr(v101, 1, v86);
      v102 = (*v10)[34];
      v103 = (float *)*((_QWORD *)v13 + 37);
      if (v103)
        vDSP_vclr(v103, 1, v82);
      v104 = (float *)*((_QWORD *)v13 + 38);
      if (v104)
        vDSP_vclr(v104, 1, v82);
      v105 = (float *)*((_QWORD *)v13 + 39);
      if (v105)
        vDSP_vclr(v105, 1, v82);
      v106 = (float *)*((_QWORD *)v13 + 40);
      if (v106)
        vDSP_vclr(v106, 1, v82);
      v107 = (float *)*((_QWORD *)v13 + 41);
      if (v107)
        vDSP_vclr(v107, 1, 2 * v102);
      v108 = (float *)*((_QWORD *)v13 + 43);
      if (v108)
        vDSP_vclr(v108, 1, v86);
      v109 = (float *)*((_QWORD *)v13 + 45);
      if (v109)
        vDSP_vclr(v109, 1, v86);
      v110 = *v10;
      if (!(*v10)[25])
      {
        v111 = v110[20];
        v112 = v110[33];
        v113 = (float *)*((_QWORD *)v13 + 22);
        if (v113)
          vDSP_vclr(v113, 1, v110[20]);
        v114 = (float *)*((_QWORD *)v13 + 23);
        if (v114)
          vDSP_vclr(v114, 1, v111);
        v115 = (float *)*((_QWORD *)v13 + 24);
        if (v115)
          vDSP_vclr(v115, 1, v111);
        v116 = (float *)*((_QWORD *)v13 + 29);
        if (v116)
          vDSP_vclr(v116, 1, v111);
        v117 = (float *)*((_QWORD *)v13 + 30);
        if (v117)
          vDSP_vclr(v117, 1, v111);
        v118 = (float *)*((_QWORD *)v13 + 31);
        if (v118)
          vDSP_vclr(v118, 1, v111);
        v119 = (float *)*((_QWORD *)v13 + 32);
        if (v119)
          vDSP_vclr(v119, 1, v111);
        v120 = (float *)*((_QWORD *)v13 + 34);
        if (v120)
          vDSP_vclr(v120, 1, v111);
        v121 = v112 * (uint64_t)(int)v111;
        v122 = (float *)**((_QWORD **)v13 + 33);
        if (v122)
          vDSP_vclr(v122, 1, v121);
        v123 = 2 * v111;
        v124 = (float *)**((_QWORD **)v13 + 35);
        if (v124)
          vDSP_vclr(v124, 1, 2 * v121);
        v125 = (float *)*((_QWORD *)v13 + 25);
        if (v125)
          vDSP_vclr(v125, 1, v123);
        v126 = (float *)*((_QWORD *)v13 + 27);
        if (v126)
          vDSP_vclr(v126, 1, v123);
      }
      v127 = v10[6];
      v128 = v127[107];
      v129 = v127[106];
      v130 = (float *)*((_QWORD *)v13 + 51);
      if (v130)
        vDSP_vclr(v130, 1, v127[107]);
      v131 = (float *)*((_QWORD *)v13 + 53);
      if (v131)
        vDSP_vclr(v131, 1, v128);
      v132 = (float *)*((_QWORD *)v13 + 55);
      if (v132)
        vDSP_vclr(v132, 1, v128);
      v133 = (float *)*((_QWORD *)v13 + 57);
      if (v133)
        vDSP_vclr(v133, 1, v129);
      v134 = (float *)*((_QWORD *)v13 + 58);
      if (v134)
        vDSP_vclr(v134, 1, v129);
      v135 = (float *)*((_QWORD *)v13 + 59);
      if (v135)
        vDSP_vclr(v135, 1, v129);
      if ((*v10)[26] >= 1)
      {
        v136 = (float *)*((_QWORD *)v13 + 47);
        if (v136)
          vDSP_vclr(v136, 1, v82);
        v137 = (float *)*((_QWORD *)v13 + 48);
        if (v137)
          vDSP_vclr(v137, 1, v82);
        v138 = (float *)*((_QWORD *)v13 + 49);
        if (v138)
          vDSP_vclr(v138, 1, v82);
        v139 = (float *)*((_QWORD *)v13 + 50);
        if (v139)
          vDSP_vclr(v139, 1, v82);
      }
    }
  }
  return 0;
}

uint64_t AUEchoCancelerV5::GetPropertyInfo(AUEchoCancelerV5 *this, int a2, int a3, unsigned int a4, unsigned int *a5, BOOL *a6)
{
  uint64_t result;
  int v8;
  int v9;

  if (a3)
    return 4294956417;
  result = 4294956417;
  if (a2 <= 3800)
  {
    if (a2 != 21)
    {
      if (a2 != 3700)
      {
        if (a2 != 3800)
          return result;
        *a6 = 0;
        v8 = **((_DWORD **)this + 85) * *(_DWORD *)(*((_QWORD *)this + 85) + 120);
        goto LABEL_16;
      }
      *a6 = 0;
      goto LABEL_14;
    }
LABEL_12:
    *a6 = 1;
LABEL_14:
    v9 = 4;
    goto LABEL_17;
  }
  if (a2 == 3801)
    goto LABEL_12;
  if (a2 == 3900)
  {
    *a6 = 0;
    v8 = *((_DWORD *)this + 84);
LABEL_16:
    v9 = 4 * v8;
    goto LABEL_17;
  }
  if (a2 != 103800)
    return result;
  *a6 = 0;
  v9 = 8;
LABEL_17:
  result = 0;
  *a5 = v9;
  return result;
}

uint64_t AUEchoCancelerV5::GetProperty(AUEchoCancelerV5 *this, int a2, int a3, unsigned int a4, CFArrayRef *a5)
{
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  const void *v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  _DWORD *v18;
  uint64_t v19;
  uint64_t v20;
  void *__p;
  void *v22;
  uint64_t v23;
  void **p_p;

  if (a3)
    return 4294956417;
  result = 4294956417;
  if (a2 > 3799)
  {
    if (a2 != 3800)
    {
      if (a2 == 3900)
      {
        v12 = *((_QWORD *)this + 72);
        v13 = 16;
        if (*(int *)(*(_QWORD *)(v12 + 48) + 592) > 0)
          v13 = 40;
        memcpy(*((void **)this + 73), *(const void **)(*(_QWORD *)(v12 + v13) + 48), 4 * *(int *)(*(_QWORD *)(v12 + v13) + 88));
        v14 = (const void *)*((_QWORD *)this + 73);
        v15 = *((unsigned int *)this + 84);
        goto LABEL_26;
      }
      if (a2 != 103800)
        return result;
    }
    v9 = *((_QWORD *)this + 72);
    if (*((_BYTE *)this + 688))
    {
      v10 = v9 + 16;
    }
    else
    {
      v16 = *(_DWORD *)(*(_QWORD *)(v9 + 48) + 592);
      v17 = v9 + 16;
      v10 = v9 + 40;
      if (v16 <= 0)
        v10 = v17;
    }
    memcpy(*((void **)this + 73), *(const void **)(*(_QWORD *)v10 + 48), 4 * *(int *)(*(_QWORD *)v10 + 88));
    if (a2 == 103800)
    {
      __p = 0;
      v22 = 0;
      v23 = 0;
      v18 = (_DWORD *)*((_QWORD *)this + 73);
      v19 = (*(_DWORD *)(*((_QWORD *)this + 85) + 120) * **((_DWORD **)this + 85));
      p_p = &__p;
      if ((_DWORD)v19)
      {
        v20 = 4 * v19;
        do
        {
          std::back_insert_iterator<std::vector<float>>::operator=[abi:ne180100]((uint64_t *)&p_p, v18++);
          v20 -= 4;
        }
        while (v20);
      }
      *a5 = applesauce::CF::details::make_CFArrayRef<float>(&__p);
      if (__p)
      {
        v22 = __p;
        operator delete(__p);
      }
      return 0;
    }
    v14 = (const void *)*((_QWORD *)this + 73);
    v15 = **((unsigned int **)this + 85) * (uint64_t)*(int *)(*((_QWORD *)this + 85) + 120);
LABEL_26:
    memcpy(a5, v14, 4 * v15);
    return 0;
  }
  if (a2 == 21)
  {
    v11 = (*(uint64_t (**)(AUEchoCancelerV5 *))(*(_QWORD *)this + 576))(this);
    result = 0;
  }
  else
  {
    if (a2 != 3700)
      return result;
    result = 0;
    v11 = *((unsigned __int8 *)this + 376);
  }
  *(_DWORD *)a5 = v11;
  return result;
}

void sub_1B63BC6D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t AUEchoCancelerV5::SetProperty(AUEchoCancelerV5 *this, int a2, int a3, unsigned int a4, int *a5, unsigned int a6)
{
  uint64_t result;
  int v8;
  int v9;

  if (a3)
    return 4294956417;
  if (a2 == 3801)
  {
    if (a6 >= 4)
    {
      result = 0;
      *((_BYTE *)this + 688) = *a5 != 0;
      return result;
    }
    return 4294956445;
  }
  if (a2 != 21)
    return 4294956417;
  if (a6 < 4)
    return 4294956445;
  v8 = *a5;
  v9 = *a5 != 0;
  if (v9 != (*(unsigned int (**)(AUEchoCancelerV5 *))(*(_QWORD *)this + 576))(this))
    (*(void (**)(AUEchoCancelerV5 *, BOOL))(*(_QWORD *)this + 584))(this, v8 != 0);
  return 0;
}

uint64_t AUEchoCancelerV5::SetParameter(ausdk::AUElement ***this, unsigned int a2, unsigned int a3, unsigned int a4, float a5)
{
  ausdk::AUScope *Scope;
  ausdk::AUElement *Element;
  ausdk::AUElement **v11;
  ausdk::AUElement **v12;

  if (a3)
  {
    Scope = (ausdk::AUScope *)ausdk::AUBase::GetScope((ausdk::AUBase *)this, a3);
LABEL_3:
    Element = (ausdk::AUElement *)ausdk::AUScope::SafeGetElement(Scope, a4);
    goto LABEL_4;
  }
  if (a2 > 0x29 || ((1 << a2) & 0x30000000001) == 0)
  {
    Scope = (ausdk::AUScope *)(this + 4);
    goto LABEL_3;
  }
  if (*((_BYTE *)this + 17))
    ++*((_DWORD *)this + 133);
  v11 = this[9];
  if (v11)
  {
    Element = (ausdk::AUElement *)(*((uint64_t (**)(ausdk::AUElement **, _QWORD))*v11 + 4))(this[9], 0);
  }
  else
  {
    v12 = this[6];
    if (this[7] == v12)
      Element = 0;
    else
      Element = *v12;
  }
LABEL_4:
  ausdk::AUElement::SetParameter(Element, a2, a5, 0);
  return 0;
}

uint64_t AUEchoCancelerV5::CanScheduleParameters(AUEchoCancelerV5 *this)
{
  return 0;
}

uint64_t AUEchoCancelerV5::ProcessMultipleBufferLists(AUEchoCancelerV5 *this, unsigned int *a2, int a3, unsigned int a4, const AudioBufferList **a5, unsigned int a6, AudioBufferList **a7, __n128 a8)
{
  int v9;
  int v14;
  void *mData;
  void *v16;
  uint64_t v17;
  void *v18;
  float *v19;
  float *v20;
  void *v21;
  uint64_t v22;
  ausdk::AUElement *v23;
  ausdk::AUElement **v24;
  AudioBufferList *v25;
  void *v26;
  float Parameter;
  uint64_t v28;
  ausdk::AUElement *v29;
  ausdk::AUElement **v30;
  float v31;
  vDSP_Length v32;
  size_t v33;
  _DWORD *v34;
  int v35;
  int v36;
  const float *v37;
  const float *v38;
  float *v39;
  uint64_t Element;
  uint64_t v41;
  ausdk::AUElement *v42;
  ausdk::AUElement **v43;
  uint64_t v44;
  ausdk::AUElement *v45;
  ausdk::AUElement **v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  ausdk::AUElement *v54;
  AudioBufferList *v55;
  _QWORD *v56;
  AudioBufferList *v57;
  uint64_t v58;
  ausdk::AUElement *v59;
  _QWORD *v60;
  uint64_t v61;
  ausdk::AUElement *v62;
  _QWORD *v63;
  uint64_t v64;
  ausdk::AUElement *v65;
  _QWORD *v66;
  uint64_t v67;
  ausdk::AUElement *v68;
  _QWORD *v69;
  uint64_t v70;
  ausdk::AUElement *v71;
  _QWORD *v72;
  uint64_t v73;
  ausdk::AUElement *v74;
  _QWORD *v75;
  uint64_t v76;
  ausdk::AUElement *v77;
  _QWORD *v78;
  uint64_t v79;
  ausdk::AUElement *v80;
  _QWORD *v81;
  BOOL v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  _BYTE *v86;
  const float *v87;
  uint64_t v88;
  ausdk::AUElement *v89;
  ausdk::AUElement **v90;
  int v91;
  _BOOL4 v93;
  uint64_t v94;
  ausdk::AUElement *v95;
  void *v96;
  void *v97;
  void *v98;
  ausdk::AUElement **v99;
  uint64_t v100;
  ausdk::AUElement *v101;
  ausdk::AUElement **v102;
  uint64_t v103;
  ausdk::AUElement *v104;
  ausdk::AUElement **v105;
  uint64_t v106;
  ausdk::AUElement *v107;
  ausdk::AUElement **v108;
  uint64_t v109;
  ausdk::AUElement *v110;
  ausdk::AUElement **v111;
  uint64_t v112;
  ausdk::AUElement *v113;
  ausdk::AUElement **v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  int v119;
  vDSP_Length v120;
  float v121;
  float v122;
  uint64_t v123;
  ausdk::AUElement *v124;
  ausdk::AUElement **v125;
  uint64_t v126;
  vDSP_Length v127;
  uint64_t v128;
  unsigned int v129;
  uint64_t v130;
  float v131;
  float v132;
  uint64_t v133;
  float v134;
  ausdk::AUElement *v135;
  ausdk::AUElement **v136;
  uint64_t v137;
  ausdk::AUElement *v138;
  ausdk::AUElement **v139;
  float v140;
  float v141;
  float v142;
  float v143;
  uint64_t v144;
  ausdk::AUElement *v145;
  ausdk::AUElement **v146;
  ausdk::AUElement **v147;
  float v148;
  const float *v149;
  const float *v150;
  float v151;
  float v152;
  uint64_t v153;
  ausdk::AUElement *v154;
  ausdk::AUElement **v155;
  float v156;
  uint64_t v157;
  ausdk::AUElement *v158;
  ausdk::AUElement **v159;
  float v160;
  uint64_t v161;
  ausdk::AUElement *v162;
  ausdk::AUElement **v163;
  ausdk::AUElement **v164;
  float v165;
  uint64_t v166;
  ausdk::AUElement *v167;
  ausdk::AUElement **v168;
  float v169;
  uint64_t v170;
  ausdk::AUElement *v171;
  ausdk::AUElement **v172;
  uint64_t v173;
  ausdk::AUElement *v174;
  ausdk::AUElement **v175;
  ausdk::AUElement **v176;
  float v177;
  float v178;
  AudioBufferList **v180;
  void *v181;
  void *v182;
  void *__dst;
  void *v184;
  void *v185;
  float __C;
  float v187;
  float v188;
  uint64_t v189;

  v9 = *((_DWORD *)this + 84);
  if (v9 != a3)
  {
    printf("AUEchoCancelerV5::ProcessMultipleBufferLists error - wrong (%d) block size expected (%d)", a3, v9);
    return 4294956422;
  }
  v187 = 0.0;
  v14 = *((_DWORD *)this + 133);
  if (*((_DWORD *)this + 134) != v14)
  {
    a8.n128_f32[0] = AUEchoCancelerV5::InitializeEC(this);
    *((_DWORD *)this + 134) = v14;
  }
  if (a6 < 2)
  {
    v16 = 0;
    v185 = 0;
    mData = 0;
    goto LABEL_9;
  }
  mData = a7[1]->mBuffers[0].mData;
  if (a6 == 2)
  {
    v16 = 0;
    v185 = 0;
LABEL_9:
    v18 = 0;
LABEL_10:
    v184 = 0;
    goto LABEL_11;
  }
  v185 = a7[2]->mBuffers[0].mData;
  if (a6 < 4)
  {
    v16 = 0;
    goto LABEL_9;
  }
  v25 = a7[3];
  if (v25)
    v26 = v25->mBuffers[0].mData;
  else
    v26 = 0;
  if (a6 < 5)
  {
    v16 = 0;
LABEL_73:
    v184 = 0;
    v18 = v26;
    goto LABEL_11;
  }
  v55 = a7[4];
  if (v55)
    v16 = v55->mBuffers[0].mData;
  else
    v16 = 0;
  if (a6 < 6)
    goto LABEL_73;
  v57 = a7[5];
  v18 = v26;
  if (!v57)
    goto LABEL_10;
  v184 = v57->mBuffers[0].mData;
LABEL_11:
  v19 = (float *)(*a5)->mBuffers[0].mData;
  v20 = (float *)(*a7)->mBuffers[0].mData;
  v21 = a5[1]->mBuffers[0].mData;
  v22 = *((_QWORD *)this + 9);
  if (v22)
  {
    v23 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD, __n128))(*(_QWORD *)v22 + 32))(v22, 0, a8);
  }
  else
  {
    v24 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v24)
      v23 = 0;
    else
      v23 = *v24;
  }
  Parameter = ausdk::AUElement::GetParameter(v23, 2u);
  v28 = *((_QWORD *)this + 9);
  if (v28)
  {
    v29 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v28 + 32))(v28, 0);
  }
  else
  {
    v30 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v30)
      v29 = 0;
    else
      v29 = *v30;
  }
  v31 = ausdk::AUElement::GetParameter(v29, 0xBu);
  if (((*(uint64_t (**)(AUEchoCancelerV5 *))(*(_QWORD *)this + 576))(this) & 1) == 0
    && *((_QWORD *)this + 72))
  {
    v17 = 0xFFFFFFFFLL;
    if (!v19 || !v21)
    {
LABEL_206:
      v137 = *((_QWORD *)this + 9);
      if (v137)
      {
        v138 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v137 + 32))(v137, 0);
      }
      else
      {
        v139 = (ausdk::AUElement **)*((_QWORD *)this + 6);
        if (*((ausdk::AUElement ***)this + 7) == v139)
          v138 = 0;
        else
          v138 = *v139;
      }
      v140 = ausdk::AUElement::GetParameter(v138, 0x23u);
      v141 = v187;
      v142 = *((float *)this + 140);
      if (v187 >= v142)
        v143 = v187;
      else
        v143 = *((float *)this + 140);
      if (v143 < *((float *)this + 141))
        v143 = *((float *)this + 141);
      *((float *)this + 141) = v142;
      *((float *)this + 140) = v141;
      v144 = *((_QWORD *)this + 9);
      if (v143 <= v140)
      {
        if (v144)
        {
          v145 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v144 + 32))(v144, 0);
        }
        else
        {
          v147 = (ausdk::AUElement **)*((_QWORD *)this + 6);
          if (*((ausdk::AUElement ***)this + 7) == v147)
            v145 = 0;
          else
            v145 = *v147;
        }
        v148 = 0.0;
      }
      else
      {
        if (v144)
        {
          v145 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v144 + 32))(v144, 0);
        }
        else
        {
          v146 = (ausdk::AUElement **)*((_QWORD *)this + 6);
          if (*((ausdk::AUElement ***)this + 7) == v146)
            v145 = 0;
          else
            v145 = *v146;
        }
        v148 = 1.0;
      }
      ausdk::AUElement::SetParameter(v145, 0x24u, v148, 0);
      v149 = *(const float **)(*(_QWORD *)(*((_QWORD *)this + 72) + 56) + 96);
      v150 = (const float *)(*a7)->mBuffers[0].mData;
      v189 = 0;
      vDSP_svesq(v149, 1, (float *)&v189, *((unsigned int *)this + 84));
      vDSP_svesq(v150, 1, (float *)&v189 + 1, *((unsigned int *)this + 84));
      v151 = *(float *)&v189 / (*((float *)&v189 + 1) + 1.0e-20) + 1.0e-20;
      v152 = log10f(v151);
      v153 = *((_QWORD *)this + 9);
      if (v153)
      {
        v154 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v153 + 32))(v153, 0);
      }
      else
      {
        v155 = (ausdk::AUElement **)*((_QWORD *)this + 6);
        if (*((ausdk::AUElement ***)this + 7) == v155)
          v154 = 0;
        else
          v154 = *v155;
      }
      v156 = ausdk::AUElement::GetParameter(v154, 0x42u);
      v157 = *((_QWORD *)this + 9);
      if (v157)
      {
        v158 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v157 + 32))(v157, 0);
      }
      else
      {
        v159 = (ausdk::AUElement **)*((_QWORD *)this + 6);
        if (*((ausdk::AUElement ***)this + 7) == v159)
          v158 = 0;
        else
          v158 = *v159;
      }
      v160 = v152 * 10.0;
      ausdk::AUElement::SetParameter(v158, 0x44u, *((float *)this + 142), 0);
      v161 = *((_QWORD *)this + 9);
      if (*((float *)this + 142) <= v156)
      {
        if (v161)
        {
          v162 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v161 + 32))(v161, 0);
        }
        else
        {
          v164 = (ausdk::AUElement **)*((_QWORD *)this + 6);
          if (*((ausdk::AUElement ***)this + 7) == v164)
            v162 = 0;
          else
            v162 = *v164;
        }
        v165 = 0.0;
      }
      else
      {
        if (v161)
        {
          v162 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v161 + 32))(v161, 0);
        }
        else
        {
          v163 = (ausdk::AUElement **)*((_QWORD *)this + 6);
          if (*((ausdk::AUElement ***)this + 7) == v163)
            v162 = 0;
          else
            v162 = *v163;
        }
        v165 = 1.0;
      }
      ausdk::AUElement::SetParameter(v162, 0x43u, v165, 0);
      *((float *)this + 142) = v160;
      v166 = *((_QWORD *)this + 9);
      if (v166)
      {
        v167 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v166 + 32))(v166, 0);
      }
      else
      {
        v168 = (ausdk::AUElement **)*((_QWORD *)this + 6);
        if (*((ausdk::AUElement ***)this + 7) == v168)
          v167 = 0;
        else
          v167 = *v168;
      }
      v169 = ausdk::AUElement::GetParameter(v167, 0x46u);
      v170 = *((_QWORD *)this + 9);
      if (v170)
      {
        v171 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v170 + 32))(v170, 0);
      }
      else
      {
        v172 = (ausdk::AUElement **)*((_QWORD *)this + 6);
        if (*((ausdk::AUElement ***)this + 7) == v172)
          v171 = 0;
        else
          v171 = *v172;
      }
      ausdk::AUElement::SetParameter(v171, 0x45u, *((float *)this + 143), 0);
      v173 = *((_QWORD *)this + 9);
      if (*((float *)this + 143) <= v169)
      {
        if (v173)
        {
          v174 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v173 + 32))(v173, 0);
        }
        else
        {
          v176 = (ausdk::AUElement **)*((_QWORD *)this + 6);
          if (*((ausdk::AUElement ***)this + 7) == v176)
            v174 = 0;
          else
            v174 = *v176;
        }
        v177 = 0.0;
      }
      else
      {
        if (v173)
        {
          v174 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v173 + 32))(v173, 0);
        }
        else
        {
          v175 = (ausdk::AUElement **)*((_QWORD *)this + 6);
          if (*((ausdk::AUElement ***)this + 7) == v175)
            v174 = 0;
          else
            v174 = *v175;
        }
        v177 = 1.0;
      }
      ausdk::AUElement::SetParameter(v174, 0x47u, v177, 0);
      v178 = (float)(*(float *)&v189 / (float)*((unsigned int *)this + 84)) + 1.0e-20;
      *((float *)this + 143) = log10f(v178) * 10.0;
      return v17;
    }
    __dst = v18;
    v32 = *((int *)this + 84);
    v33 = 4 * (int)v32;
    memcpy(*((void **)this + 82), v21, v33);
    v34 = (_DWORD *)*((_QWORD *)this + 85);
    v35 = v34[31];
    v181 = v16;
    v182 = mData;
    if ((v35 | 2) != 3)
    {
      if (v35 == 2 && (int)v34[33] >= 2)
      {
        v180 = a7;
        v47 = 1;
        v48 = 32;
        v49 = 4 * v32;
        do
        {
          memcpy((void *)(*((_QWORD *)this + 82) + v49), *(const void **)((char *)&a5[1]->mNumberBuffers + v48), v33);
          ++v47;
          v34 = (_DWORD *)*((_QWORD *)this + 85);
          v49 += 4 * v32;
          v48 += 16;
        }
        while (v47 < (int)v34[33]);
        a7 = v180;
      }
      goto LABEL_59;
    }
    v36 = v34[32];
    if (v36 == 2)
    {
      vDSP_vsq((const float *)v21, 1, (float *)(*((_QWORD *)this + 82) + 4 * v32), 1, v32);
      if (*((_BYTE *)this + 672))
      {
        v37 = (const float *)(*((_QWORD *)this + 82) + 4 * v32);
        v38 = (const float *)v21;
        v39 = (float *)v37;
LABEL_54:
        vDSP_vmul(v38, 1, v37, 1, v39, 1, v32);
      }
    }
    else if (v36 >= 3)
    {
      vDSP_vsq((const float *)v21, 1, (float *)(*((_QWORD *)this + 82) + 4 * v32), 1, v32);
      vDSP_vmul((const float *)v21, 1, (const float *)(*((_QWORD *)this + 82) + 4 * v32), 1, (float *)(*((_QWORD *)this + 82) + 8 * v32), 1, v32);
      if (*((_BYTE *)this + 672))
      {
        vDSP_vsq((const float *)v21, 1, (float *)(*((_QWORD *)this + 82) + 4 * v32), 1, v32);
        vDSP_vmul((const float *)v21, 1, (const float *)(*((_QWORD *)this + 82) + 4 * v32), 1, (float *)(*((_QWORD *)this + 82) + 8 * v32), 1, v32);
        v50 = *((_QWORD *)this + 82);
        v38 = (const float *)(v50 + 4 * v32);
        v37 = (const float *)(v50 + 8 * v32);
        v39 = (float *)v38;
        goto LABEL_54;
      }
    }
    v34 = (_DWORD *)*((_QWORD *)this + 85);
    if (v34[31] == 3 && (int)v34[33] >= 2)
    {
      v51 = 1;
      v52 = 32;
      do
      {
        memcpy((void *)(*((_QWORD *)this + 82) + 4 * ((int)v51++ + v34[32] - 1) * (int)v32), *(const void **)((char *)&a5[1]->mNumberBuffers + v52), v33);
        v34 = (_DWORD *)*((_QWORD *)this + 85);
        v52 += 16;
      }
      while (v51 < (int)v34[33]);
    }
LABEL_59:
    if (v34[31] == 2)
    {
      v53 = *((_QWORD *)this + 9);
      if (v53)
      {
        v54 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v53 + 32))(v53, 0);
      }
      else
      {
        v56 = (_QWORD *)*((_QWORD *)this + 6);
        v54 = *((_QWORD **)this + 7) == v56 ? 0 : (ausdk::AUElement *)*v56;
      }
      **(_BYTE **)(*(_QWORD *)(*((_QWORD *)this + 72) + 8) + 120) = ausdk::AUElement::GetParameter(v54, 0x2Fu) != 0.0;
      if (*(int *)(*((_QWORD *)this + 85) + 120) >= 2)
      {
        v58 = *((_QWORD *)this + 9);
        if (v58)
        {
          v59 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v58 + 32))(v58, 0);
        }
        else
        {
          v60 = (_QWORD *)*((_QWORD *)this + 6);
          v59 = *((_QWORD **)this + 7) == v60 ? 0 : (ausdk::AUElement *)*v60;
        }
        *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 72) + 8) + 120) + 1) = ausdk::AUElement::GetParameter(v59, 0x30u) != 0.0;
        if (*(int *)(*((_QWORD *)this + 85) + 120) >= 3)
        {
          v61 = *((_QWORD *)this + 9);
          if (v61)
          {
            v62 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v61 + 32))(v61, 0);
          }
          else
          {
            v63 = (_QWORD *)*((_QWORD *)this + 6);
            v62 = *((_QWORD **)this + 7) == v63 ? 0 : (ausdk::AUElement *)*v63;
          }
          *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 72) + 8) + 120) + 2) = ausdk::AUElement::GetParameter(v62, 0x31u) != 0.0;
          if (*(int *)(*((_QWORD *)this + 85) + 120) >= 4)
          {
            v64 = *((_QWORD *)this + 9);
            if (v64)
            {
              v65 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v64 + 32))(v64, 0);
            }
            else
            {
              v66 = (_QWORD *)*((_QWORD *)this + 6);
              v65 = *((_QWORD **)this + 7) == v66 ? 0 : (ausdk::AUElement *)*v66;
            }
            *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 72) + 8) + 120) + 3) = ausdk::AUElement::GetParameter(v65, 0x32u) != 0.0;
            if (*(int *)(*((_QWORD *)this + 85) + 120) >= 5)
            {
              v67 = *((_QWORD *)this + 9);
              if (v67)
              {
                v68 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v67 + 32))(v67, 0);
              }
              else
              {
                v69 = (_QWORD *)*((_QWORD *)this + 6);
                v68 = *((_QWORD **)this + 7) == v69 ? 0 : (ausdk::AUElement *)*v69;
              }
              *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 72) + 8) + 120) + 4) = ausdk::AUElement::GetParameter(v68, 0x33u) != 0.0;
              if (*(int *)(*((_QWORD *)this + 85) + 120) >= 6)
              {
                v70 = *((_QWORD *)this + 9);
                if (v70)
                {
                  v71 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v70 + 32))(v70, 0);
                }
                else
                {
                  v72 = (_QWORD *)*((_QWORD *)this + 6);
                  v71 = *((_QWORD **)this + 7) == v72 ? 0 : (ausdk::AUElement *)*v72;
                }
                *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 72) + 8) + 120) + 5) = ausdk::AUElement::GetParameter(v71, 0x34u) != 0.0;
                if (*(int *)(*((_QWORD *)this + 85) + 120) >= 7)
                {
                  v73 = *((_QWORD *)this + 9);
                  if (v73)
                  {
                    v74 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v73 + 32))(v73, 0);
                  }
                  else
                  {
                    v75 = (_QWORD *)*((_QWORD *)this + 6);
                    v74 = *((_QWORD **)this + 7) == v75 ? 0 : (ausdk::AUElement *)*v75;
                  }
                  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 72) + 8) + 120) + 6) = ausdk::AUElement::GetParameter(v74, 0x35u) != 0.0;
                  if (*(int *)(*((_QWORD *)this + 85) + 120) >= 8)
                  {
                    v76 = *((_QWORD *)this + 9);
                    if (v76)
                    {
                      v77 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v76 + 32))(v76, 0);
                    }
                    else
                    {
                      v78 = (_QWORD *)*((_QWORD *)this + 6);
                      v77 = *((_QWORD **)this + 7) == v78 ? 0 : (ausdk::AUElement *)*v78;
                    }
                    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 72) + 8) + 120) + 7) = ausdk::AUElement::GetParameter(v77, 0x36u) != 0.0;
                    if (*(int *)(*((_QWORD *)this + 85) + 120) >= 9)
                    {
                      v79 = *((_QWORD *)this + 9);
                      if (v79)
                      {
                        v80 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v79 + 32))(v79, 0);
                      }
                      else
                      {
                        v81 = (_QWORD *)*((_QWORD *)this + 6);
                        v80 = *((_QWORD **)this + 7) == v81 ? 0 : (ausdk::AUElement *)*v81;
                      }
                      v82 = ausdk::AUElement::GetParameter(v80, 0x37u) != 0.0;
                      v83 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 72) + 8) + 120);
                      *(_BYTE *)(v83 + 8) = v82;
                      v84 = *(unsigned int *)(*((_QWORD *)this + 85) + 120);
                      if ((int)v84 >= 10)
                      {
                        v85 = v84 - 9;
                        v86 = (_BYTE *)(v83 + 9);
                        do
                        {
                          *v86++ = *(_BYTE *)(v83 + 8);
                          --v85;
                        }
                        while (v85);
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    v87 = (const float *)*((_QWORD *)this + 82);
    v88 = *((_QWORD *)this + 9);
    if (v88)
    {
      v89 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v88 + 32))(v88, 0);
    }
    else
    {
      v90 = (ausdk::AUElement **)*((_QWORD *)this + 6);
      if (*((ausdk::AUElement ***)this + 7) == v90)
        v89 = 0;
      else
        v89 = *v90;
    }
    v91 = (int)ausdk::AUElement::GetParameter(v89, 4u);
    __C = 0.0;
    vDSP_svesq(v19, 1, &__C, v32);
    v93 = __C == 0.0 || v91 > 0;
    aec_v5::run_aec(*((float ***)this + 72), (_DWORD *)this + 136, (float *)this + 137, (_DWORD *)this + 138, (_DWORD *)this + 139, v87, v19, v20, &v187, v93, (_DWORD *)this + 162, (_DWORD *)this + 167);
    v94 = *((_QWORD *)this + 9);
    if (v94)
    {
      v95 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v94 + 32))(v94, 0);
      v96 = v181;
      v98 = v184;
      v97 = v185;
    }
    else
    {
      v99 = (ausdk::AUElement **)*((_QWORD *)this + 6);
      v98 = v184;
      v97 = v185;
      if (*((ausdk::AUElement ***)this + 7) == v99)
        v95 = 0;
      else
        v95 = *v99;
      v96 = v181;
    }
    ausdk::AUElement::SetParameter(v95, 8u, *((float *)this + 137), 0);
    v100 = *((_QWORD *)this + 9);
    if (v100)
    {
      v101 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v100 + 32))(v100, 0);
    }
    else
    {
      v102 = (ausdk::AUElement **)*((_QWORD *)this + 6);
      if (*((ausdk::AUElement ***)this + 7) == v102)
        v101 = 0;
      else
        v101 = *v102;
    }
    ausdk::AUElement::SetParameter(v101, 0x21u, (float)*((int *)this + 138), 0);
    v103 = *((_QWORD *)this + 9);
    if (v103)
    {
      v104 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v103 + 32))(v103, 0);
    }
    else
    {
      v105 = (ausdk::AUElement **)*((_QWORD *)this + 6);
      if (*((ausdk::AUElement ***)this + 7) == v105)
        v104 = 0;
      else
        v104 = *v105;
    }
    ausdk::AUElement::SetParameter(v104, 0x22u, *((float *)this + 139), 0);
    v106 = *((_QWORD *)this + 9);
    if (v106)
    {
      v107 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v106 + 32))(v106, 0);
    }
    else
    {
      v108 = (ausdk::AUElement **)*((_QWORD *)this + 6);
      if (*((ausdk::AUElement ***)this + 7) == v108)
        v107 = 0;
      else
        v107 = *v108;
    }
    ausdk::AUElement::SetParameter(v107, 0x25u, *((float *)this + 162), 0);
    v109 = *((_QWORD *)this + 9);
    if (v109)
    {
      v110 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v109 + 32))(v109, 0);
    }
    else
    {
      v111 = (ausdk::AUElement **)*((_QWORD *)this + 6);
      if (*((ausdk::AUElement ***)this + 7) == v111)
        v110 = 0;
      else
        v110 = *v111;
    }
    ausdk::AUElement::SetParameter(v110, 0x2Du, v187, 0);
    v112 = *((_QWORD *)this + 9);
    if (v112)
    {
      v113 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v112 + 32))(v112, 0);
    }
    else
    {
      v114 = (ausdk::AUElement **)*((_QWORD *)this + 6);
      if (*((ausdk::AUElement ***)this + 7) == v114)
        v113 = 0;
      else
        v113 = *v114;
    }
    ausdk::AUElement::SetParameter(v113, 0x2Eu, *((float *)this + 167), 0);
    if (v97)
      memcpy(v97, *(const void **)(*(_QWORD *)(*((_QWORD *)this + 72) + 56) + 168), 4 * *((unsigned int *)this + 84));
    if (v182)
      memcpy(v182, *(const void **)(*(_QWORD *)(*((_QWORD *)this + 72) + 56) + 96), 4 * *((unsigned int *)this + 84));
    if (__dst)
      memcpy(__dst, *(const void **)(*(_QWORD *)(*((_QWORD *)this + 72) + 56) + 104), 4 * *((unsigned int *)this + 84));
    if (v96)
      memcpy(v96, *(const void **)(*(_QWORD *)(*((_QWORD *)this + 72) + 56) + 112), 4 * *((unsigned int *)this + 84));
    if (v98)
      memcpy(v98, *(const void **)(*(_QWORD *)(*((_QWORD *)this + 72) + 56) + 120), 4 * *((unsigned int *)this + 84));
    if (Parameter == 0.0)
    {
      v189 = 0;
      v188 = 0.0;
      v115 = *((_QWORD *)this + 74);
      v116 = *((_QWORD *)this + 73);
      v117 = *((_QWORD *)this + 72);
      v118 = 16;
      if (*(int *)(*(_QWORD *)(v117 + 48) + 592) > 0)
        v118 = 40;
      memcpy(*((void **)this + 73), *(const void **)(*(_QWORD *)(v117 + v118) + 48), 4 * *(int *)(*(_QWORD *)(v117 + v118) + 88));
      *(float *)&v119 = 0.0;
      if (*(_DWORD *)(*(_QWORD *)(*((_QWORD *)this + 72) + 48) + 232))
        goto LABEL_183;
      v120 = ((unint64_t)(v115 - v116) >> 2);
      vDSP_vsub(*((const float **)this + 73), 1, *((const float **)this + 75), 1, *((float **)this + 77), 1, v120);
      vDSP_vsq(*((const float **)this + 77), 1, *((float **)this + 77), 1, v120);
      vDSP_sve(*((const float **)this + 77), 1, (float *)&v189 + 1, v120);
      vDSP_vsq(*((const float **)this + 75), 1, *((float **)this + 79), 1, v120);
      vDSP_sve(*((const float **)this + 79), 1, (float *)&v189, v120);
      vDSP_vsq(*((const float **)this + 73), 1, *((float **)this + 79), 1, v120);
      vDSP_sve(*((const float **)this + 79), 1, &v188, v120);
      v121 = *(float *)&v189 + 0.00000001;
      *(float *)&v189 = (float)(v188 * 0.2) + (float)(v121 * 0.8);
      v122 = *((float *)&v189 + 1) * 100.0 / *(float *)&v189;
      *(float *)&v119 = 800.0;
      if (v122 > 800.0)
LABEL_183:
        v122 = *(float *)&v119;
      std::valarray<float>::__assign_range((uint64_t)this + 600, *((_BYTE **)this + 73), *((_BYTE **)this + 74));
    }
    else
    {
      v122 = 0.0;
    }
    v123 = *((_QWORD *)this + 9);
    if (v123)
    {
      v124 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v123 + 32))(v123, 0);
    }
    else
    {
      v125 = (ausdk::AUElement **)*((_QWORD *)this + 6);
      if (*((ausdk::AUElement ***)this + 7) == v125)
        v124 = 0;
      else
        v124 = *v125;
    }
    ausdk::AUElement::SetParameter(v124, 3u, v122, 0);
    if (v31 != 1.0)
    {
      v126 = *(_QWORD *)(*((_QWORD *)this + 72) + 16);
      v127 = *(unsigned int *)(v126 + 36);
      vDSP_vabs(*(const float **)(v126 + 48), 1, *((float **)this + 77), 1, v127);
      if ((_DWORD)v127)
      {
        v128 = 0;
        v129 = 0;
        v131 = -1.0;
        do
        {
          v130 = *((_QWORD *)this + 77);
          if (*(float *)(v130 + 4 * v128) > v131)
          {
            v129 = v128;
            v131 = *(float *)(v130 + 4 * v128);
          }
          ++v128;
        }
        while (v127 != v128);
        v132 = (float)v129 * 1000.0;
      }
      else
      {
        v132 = 0.0;
      }
      v133 = *((_QWORD *)this + 9);
      v134 = v132 / (float)*((unsigned int *)this + 135);
      if (v133)
      {
        v135 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v133 + 32))(v133, 0);
      }
      else
      {
        v136 = (ausdk::AUElement **)*((_QWORD *)this + 6);
        if (*((ausdk::AUElement ***)this + 7) == v136)
          v135 = 0;
        else
          v135 = *v136;
      }
      ausdk::AUElement::SetParameter(v135, 0x1Eu, v134, 0);
    }
    v17 = 0;
    goto LABEL_206;
  }
  if (v19 != v20)
  {
    Element = ausdk::AUScope::SafeGetElement((AUEchoCancelerV5 *)((char *)this + 128), 0);
    memcpy(v20, v19, (*(_DWORD *)(Element + 104) * a3));
    v41 = *((_QWORD *)this + 9);
    if (v41)
    {
      v42 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v41 + 32))(v41, 0);
    }
    else
    {
      v43 = (ausdk::AUElement **)*((_QWORD *)this + 6);
      if (*((ausdk::AUElement ***)this + 7) == v43)
        v42 = 0;
      else
        v42 = *v43;
    }
    ausdk::AUElement::SetParameter(v42, 3u, 0.0, 0);
    v44 = *((_QWORD *)this + 9);
    if (v44)
    {
      v45 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v44 + 32))(v44, 0);
    }
    else
    {
      v46 = (ausdk::AUElement **)*((_QWORD *)this + 6);
      if (*((ausdk::AUElement ***)this + 7) == v46)
        v45 = 0;
      else
        v45 = *v46;
    }
    ausdk::AUElement::SetParameter(v45, 0x24u, 0.0, 0);
  }
  return 0;
}

uint64_t AUEchoCancelerV5::Render(AUEchoCancelerV5 *this, unsigned int *a2, const AudioTimeStamp *a3, uint64_t a4)
{
  ausdk::AUScope *v8;
  uint64_t Element;
  uint64_t v10;
  ausdk::AUInputElement *v11;
  uint64_t result;
  AudioBufferList *BufferList;

  if (*((_DWORD *)this + 84) != (_DWORD)a4)
    return 4294956422;
  v8 = (AUEchoCancelerV5 *)((char *)this + 80);
  Element = ausdk::AUScope::SafeGetElement((AUEchoCancelerV5 *)((char *)this + 80), 0);
  v10 = ausdk::AUScope::SafeGetElement((AUEchoCancelerV5 *)((char *)this + 128), 0);
  if (!ausdk::AUBase::HasInput(this, 0))
    return 4294956420;
  v11 = (ausdk::AUInputElement *)ausdk::AUScope::SafeGetElement(v8, 0);
  result = ausdk::AUInputElement::PullInput(v11, a2, a3, 0, a4);
  if (!(_DWORD)result)
  {
    BufferList = (AudioBufferList *)ausdk::AUBufferList::GetBufferList((ausdk::AUBufferList *)(v10 + 144));
    ausdk::AUBufferList::CopyBufferContentsTo((_QWORD *)(Element + 144), BufferList);
    return 0;
  }
  return result;
}

BOOL AUEchoCancelerV5::BusCountWritable(AUEchoCancelerV5 *this, int a2)
{
  return (a2 - 1) < 2;
}

uint64_t AUEchoCancelerV5::GetParameterInfo(AUEchoCancelerV5 *this, int a2, int a3, AudioUnitParameterInfo *buffer)
{
  uint64_t result;
  AudioUnitParameterOptions flags;
  AudioUnitParameterValue v7;
  AudioUnitParameterOptions v8;
  uint64_t v9;
  int v10;
  const __CFString *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  const __CFString *v15;
  uint64_t v16;
  uint64_t v17;
  UInt32 v18;
  int v19;
  AudioUnitParameterOptions v20;
  AudioUnitParameterOptions v21;
  uint64_t v22;
  const __CFString *v23;
  const __CFString *v24;
  const __CFString *v25;
  UInt32 v26;
  const __CFString *v27;
  AudioUnitParameterOptions v28;
  const __CFString *v29;
  UInt32 v30;
  const __CFString *v31;

  buffer->flags = 0x40000000;
  buffer->unitName = 0;
  if (a2)
    return 4294956418;
  switch(a3)
  {
    case 0:
      buffer->cfNameString = CFSTR("total modelled filt len");
      buffer->flags = 1207959552;
      CFStringGetCString(CFSTR("total modelled filt len"), buffer->name, 52, 0x8000100u);
      result = 0;
      buffer->clumpID = 1;
      flags = buffer->flags;
      buffer->unit = kAudioUnitParameterUnit_Milliseconds;
      *(_QWORD *)&buffer->minValue = 0x453B80003F800000;
      v7 = 79.0;
      goto LABEL_48;
    case 1:
      buffer->cfNameString = CFSTR("(I) actual filt sz");
      buffer->flags = 1207959552;
      CFStringGetCString(CFSTR("(I) actual filt sz"), buffer->name, 52, 0x8000100u);
      result = 0;
      buffer->clumpID = 1;
      v8 = buffer->flags;
      buffer->unit = kAudioUnitParameterUnit_SampleFrames;
      v9 = 0x4811500000000000;
      goto LABEL_97;
    case 2:
      buffer->cfNameString = CFSTR("delta EIR disable");
      buffer->flags = 1207959552;
      CFStringGetCString(CFSTR("delta EIR disable"), buffer->name, 52, 0x8000100u);
      result = 0;
      buffer->clumpID = 6;
      v8 = buffer->flags;
      buffer->unit = kAudioUnitParameterUnit_Indexed;
      *(_QWORD *)&buffer->minValue = 0x3F80000000000000;
      v10 = -1877999616;
      goto LABEL_98;
    case 3:
      buffer->cfNameString = CFSTR("(I) delta EIR");
      buffer->flags = 1207959552;
      CFStringGetCString(CFSTR("(I) delta EIR"), buffer->name, 52, 0x8000100u);
      result = 0;
      buffer->clumpID = 3;
      v8 = buffer->flags;
      buffer->unit = kAudioUnitParameterUnit_Ratio;
      v9 = 0x501502F900000000;
      goto LABEL_97;
    case 4:
      v11 = CFSTR("(I) Freeze adaptation option");
      goto LABEL_96;
    case 5:
      buffer->cfNameString = CFSTR("(I) EC Ref-Mic Delay MilliSec");
      buffer->flags = 1207959552;
      CFStringGetCString(CFSTR("(I) EC Ref-Mic Delay MilliSec"), buffer->name, 52, 0x8000100u);
      result = 0;
      buffer->clumpID = 6;
      v8 = buffer->flags;
      buffer->unit = kAudioUnitParameterUnit_Milliseconds;
      v12 = 0x41A0000000000000;
      goto LABEL_93;
    case 6:
      buffer->cfNameString = CFSTR("(I) AGC dynamic gain");
      buffer->flags = 1207959552;
      CFStringGetCString(CFSTR("(I) AGC dynamic gain"), buffer->name, 52, 0x8000100u);
      result = 0;
      buffer->clumpID = 6;
      v8 = buffer->flags;
      buffer->unit = kAudioUnitParameterUnit_Decibels;
      v12 = 0x41A00000C1A00000;
      goto LABEL_93;
    case 7:
      buffer->cfNameString = CFSTR("(I) AGC post gain");
      buffer->flags = 1207959552;
      CFStringGetCString(CFSTR("(I) AGC post gain"), buffer->name, 52, 0x8000100u);
      result = 0;
      buffer->clumpID = 6;
      v8 = buffer->flags;
      buffer->unit = kAudioUnitParameterUnit_Decibels;
      v13 = 0x41A00000C1A00000;
      goto LABEL_36;
    case 8:
      buffer->cfNameString = CFSTR("(I) EC main lobe delay");
      buffer->flags = 1207959552;
      CFStringGetCString(CFSTR("(I) EC main lobe delay"), buffer->name, 52, 0x8000100u);
      result = 0;
      buffer->clumpID = 3;
      v8 = buffer->flags;
      buffer->unit = kAudioUnitParameterUnit_Milliseconds;
      v9 = 0x43C8000000000000;
      goto LABEL_97;
    case 9:
      buffer->cfNameString = CFSTR("Allow LMS filter scale down for rapid h changes");
      buffer->flags = 1207959552;
      CFStringGetCString(CFSTR("Allow LMS filter scale down for rapid h changes"), buffer->name, 52, 0x8000100u);
      result = 0;
      buffer->clumpID = 6;
      flags = buffer->flags;
      buffer->unit = kAudioUnitParameterUnit_Indexed;
      v14 = 0x4000000000000000;
      goto LABEL_74;
    case 10:
      buffer->cfNameString = CFSTR("EC init convergence options");
      buffer->flags = 1207959552;
      CFStringGetCString(CFSTR("EC init convergence options"), buffer->name, 52, 0x8000100u);
      result = 0;
      buffer->clumpID = 4;
      v8 = buffer->flags;
      buffer->unit = kAudioUnitParameterUnit_Indexed;
      *(_QWORD *)&buffer->minValue = 0x3F80000000000000;
      v10 = -2079326208;
      goto LABEL_98;
    case 11:
      v15 = CFSTR("disable search for IR peak");
      goto LABEL_72;
    case 12:
      buffer->cfNameString = CFSTR("DualEC DualEcStatDur");
      buffer->flags = 1207959552;
      CFStringGetCString(CFSTR("DualEC DualEcStatDur"), buffer->name, 52, 0x8000100u);
      result = 0;
      buffer->clumpID = 5;
      flags = buffer->flags;
      buffer->unit = kAudioUnitParameterUnit_Milliseconds;
      *(_QWORD *)&buffer->minValue = 0x447A000000000000;
      v7 = 220.0;
      goto LABEL_75;
    case 13:
      buffer->cfNameString = CFSTR("DualEC MinBackupOverAdapt");
      buffer->flags = 1207959552;
      CFStringGetCString(CFSTR("DualEC MinBackupOverAdapt"), buffer->name, 52, 0x8000100u);
      result = 0;
      buffer->clumpID = 5;
      flags = buffer->flags;
      buffer->unit = kAudioUnitParameterUnit_Milliseconds;
      v16 = 0x447A000000000000;
      goto LABEL_27;
    case 14:
      buffer->cfNameString = CFSTR("DualEC MinCopyAdaptToBackup");
      buffer->flags = 1207959552;
      CFStringGetCString(CFSTR("DualEC MinCopyAdaptToBackup"), buffer->name, 52, 0x8000100u);
      result = 0;
      buffer->clumpID = 5;
      flags = buffer->flags;
      buffer->unit = kAudioUnitParameterUnit_Milliseconds;
      *(_QWORD *)&buffer->minValue = 0x447A000000000000;
      v7 = 100.0;
      goto LABEL_75;
    case 15:
      buffer->cfNameString = CFSTR("DualEC MaxCopyAdaptToBackup");
      buffer->flags = 1207959552;
      CFStringGetCString(CFSTR("DualEC MaxCopyAdaptToBackup"), buffer->name, 52, 0x8000100u);
      result = 0;
      buffer->clumpID = 5;
      flags = buffer->flags;
      buffer->unit = kAudioUnitParameterUnit_Milliseconds;
      *(_QWORD *)&buffer->minValue = 0x447A000000000000;
      v7 = 200.0;
      goto LABEL_75;
    case 16:
      buffer->cfNameString = CFSTR("DualEC ResetTime");
      buffer->flags = 1207959552;
      CFStringGetCString(CFSTR("DualEC ResetTime"), buffer->name, 52, 0x8000100u);
      result = 0;
      buffer->clumpID = 5;
      flags = buffer->flags;
      buffer->unit = kAudioUnitParameterUnit_Milliseconds;
      *(_QWORD *)&buffer->minValue = 0x447A000000000000;
      v7 = 150.0;
      goto LABEL_75;
    case 17:
      buffer->cfNameString = CFSTR("DualEC EPS_EC_ERROR_MIN");
      buffer->flags = 1207959552;
      CFStringGetCString(CFSTR("DualEC EPS_EC_ERROR_MIN"), buffer->name, 52, 0x8000100u);
      result = 0;
      buffer->clumpID = 5;
      flags = buffer->flags;
      buffer->unit = kAudioUnitParameterUnit_Decibels;
      *(_QWORD *)&buffer->minValue = 0x43960000C3960000;
      v7 = -35.0;
      goto LABEL_75;
    case 18:
      buffer->cfNameString = CFSTR("DualEC MIN_ADAPT_DOING_OK");
      buffer->flags = 1207959552;
      CFStringGetCString(CFSTR("DualEC MIN_ADAPT_DOING_OK"), buffer->name, 52, 0x8000100u);
      result = 0;
      buffer->clumpID = 5;
      flags = buffer->flags;
      buffer->unit = kAudioUnitParameterUnit_Decibels;
      *(_QWORD *)&buffer->minValue = 0x43960000C3960000;
      v7 = 0.4;
      goto LABEL_75;
    case 19:
      buffer->cfNameString = CFSTR("DualEC MIN_ADAPT_OVER_BACKUP");
      buffer->flags = 1207959552;
      CFStringGetCString(CFSTR("DualEC MIN_ADAPT_OVER_BACKUP"), buffer->name, 52, 0x8000100u);
      result = 0;
      buffer->clumpID = 5;
      flags = buffer->flags;
      buffer->unit = kAudioUnitParameterUnit_Decibels;
      *(_QWORD *)&buffer->minValue = 0x43960000C3960000;
      v7 = -0.5;
      goto LABEL_75;
    case 20:
      buffer->cfNameString = CFSTR("DualEC MIN_ADAPT_IN_SINGLETALK");
      buffer->flags = 1207959552;
      CFStringGetCString(CFSTR("DualEC MIN_ADAPT_IN_SINGLETALK"), buffer->name, 52, 0x8000100u);
      result = 0;
      buffer->clumpID = 5;
      flags = buffer->flags;
      buffer->unit = kAudioUnitParameterUnit_Decibels;
      v17 = 0x43960000C3960000;
      goto LABEL_79;
    case 21:
      buffer->cfNameString = CFSTR("DualEC MIN_ECHO_LEVEL_TO_CHECK");
      buffer->flags = 1207959552;
      CFStringGetCString(CFSTR("DualEC MIN_ECHO_LEVEL_TO_CHECK"), buffer->name, 52, 0x8000100u);
      result = 0;
      buffer->clumpID = 5;
      flags = buffer->flags;
      buffer->unit = kAudioUnitParameterUnit_Decibels;
      *(_QWORD *)&buffer->minValue = 0x43960000C3960000;
      v7 = -90.0;
      goto LABEL_75;
    case 22:
      buffer->cfNameString = CFSTR("DualEC MIN_HANG_TIME");
      buffer->flags = 1207959552;
      CFStringGetCString(CFSTR("DualEC MIN_HANG_TIME"), buffer->name, 52, 0x8000100u);
      result = 0;
      buffer->clumpID = 5;
      flags = buffer->flags;
      buffer->unit = kAudioUnitParameterUnit_Milliseconds;
      v16 = 0x4396000000000000;
LABEL_27:
      *(_QWORD *)&buffer->minValue = v16;
      v7 = 20.0;
      goto LABEL_75;
    case 23:
      buffer->cfNameString = CFSTR("FastInitConverge MaxAdaptRate");
      buffer->flags = 1207959552;
      CFStringGetCString(CFSTR("FastInitConverge MaxAdaptRate"), buffer->name, 52, 0x8000100u);
      result = 0;
      buffer->clumpID = 6;
      flags = buffer->flags;
      buffer->unit = kAudioUnitParameterUnit_Generic;
      *(_QWORD *)&buffer->minValue = 0x4000000000000000;
      v7 = 0.35;
      goto LABEL_75;
    case 24:
      buffer->cfNameString = CFSTR("FastInitConverge MinAdaptRate");
      buffer->flags = 1207959552;
      CFStringGetCString(CFSTR("FastInitConverge MinAdaptRate"), buffer->name, 52, 0x8000100u);
      result = 0;
      buffer->clumpID = 6;
      flags = buffer->flags;
      buffer->unit = kAudioUnitParameterUnit_Generic;
      *(_QWORD *)&buffer->minValue = 0x4000000000000000;
      v7 = 0.15;
      goto LABEL_75;
    case 25:
      buffer->cfNameString = CFSTR("FastInitConverge HighXCorr");
      buffer->flags = 1207959552;
      CFStringGetCString(CFSTR("FastInitConverge HighXCorr"), buffer->name, 52, 0x8000100u);
      result = 0;
      buffer->clumpID = 6;
      flags = buffer->flags;
      buffer->unit = kAudioUnitParameterUnit_Generic;
      *(_QWORD *)&buffer->minValue = 0x3F80000000000000;
      v7 = 0.86;
      goto LABEL_75;
    case 26:
      buffer->cfNameString = CFSTR("FastInitConverge LowXCorr");
      buffer->flags = 1207959552;
      CFStringGetCString(CFSTR("FastInitConverge LowXCorr"), buffer->name, 52, 0x8000100u);
      result = 0;
      buffer->clumpID = 6;
      flags = buffer->flags;
      buffer->unit = kAudioUnitParameterUnit_Generic;
      *(_QWORD *)&buffer->minValue = 0x3F80000000000000;
      v7 = 0.5;
      goto LABEL_75;
    case 27:
      buffer->cfNameString = CFSTR("FastInitConverge TimeConstForRunningAv");
      buffer->flags = 1207959552;
      CFStringGetCString(CFSTR("FastInitConverge TimeConstForRunningAv"), buffer->name, 52, 0x8000100u);
      result = 0;
      buffer->clumpID = 6;
      flags = buffer->flags;
      buffer->unit = kAudioUnitParameterUnit_Milliseconds;
      *(_QWORD *)&buffer->minValue = 0x43FA000000000000;
      v7 = 30.0;
      goto LABEL_75;
    case 28:
      v15 = CFSTR("FastInitConverge EnableSubSampForDelayEst");
      goto LABEL_72;
    case 29:
      buffer->cfNameString = CFSTR("FastInitConverge LeakThresh");
      buffer->flags = 1207959552;
      CFStringGetCString(CFSTR("FastInitConverge LeakThresh"), buffer->name, 52, 0x8000100u);
      result = 0;
      buffer->clumpID = 6;
      flags = buffer->flags;
      buffer->unit = kAudioUnitParameterUnit_Generic;
      *(_QWORD *)&buffer->minValue = 0x3F80000000000000;
      v7 = 0.01;
      goto LABEL_75;
    case 30:
      buffer->cfNameString = CFSTR("(I) IR peak delay in msec 1st ref chan");
      buffer->flags = 1207959552;
      CFStringGetCString(CFSTR("(I) IR peak delay in msec 1st ref chan"), buffer->name, 52, 0x8000100u);
      result = 0;
      buffer->clumpID = 6;
      v8 = buffer->flags;
      buffer->unit = kAudioUnitParameterUnit_Generic;
      v13 = 0x453B800000000000;
LABEL_36:
      *(_QWORD *)&buffer->minValue = v13;
      v10 = 68190208;
      goto LABEL_98;
    case 31:
      buffer->cfNameString = CFSTR("RER floor LeakThresh");
      buffer->flags = 1207959552;
      CFStringGetCString(CFSTR("RER floor LeakThresh"), buffer->name, 52, 0x8000100u);
      result = 0;
      buffer->clumpID = 6;
      flags = buffer->flags;
      buffer->unit = kAudioUnitParameterUnit_Generic;
      *(_QWORD *)&buffer->minValue = 0x3F80000000000000;
      v7 = 0.04;
      goto LABEL_75;
    case 32:
      buffer->cfNameString = CFSTR("RER floor MicEchoEstXcorrThresh");
      buffer->flags = 1207959552;
      CFStringGetCString(CFSTR("RER floor MicEchoEstXcorrThresh"), buffer->name, 52, 0x8000100u);
      result = 0;
      buffer->clumpID = 6;
      flags = buffer->flags;
      buffer->unit = kAudioUnitParameterUnit_Generic;
      *(_QWORD *)&buffer->minValue = 0x3F80000000000000;
      v7 = 0.79;
      goto LABEL_75;
    case 33:
      v11 = CFSTR("(I) EC adaptation state");
      goto LABEL_96;
    case 34:
      buffer->cfNameString = CFSTR("(I) EC time aligned ref signal energy");
      buffer->flags = 1207959552;
      CFStringGetCString(CFSTR("(I) EC time aligned ref signal energy"), buffer->name, 52, 0x8000100u);
      result = 0;
      buffer->clumpID = 3;
      v8 = buffer->flags;
      buffer->unit = kAudioUnitParameterUnit_Generic;
      v9 = 0x447A000000000000;
      goto LABEL_97;
    case 35:
      buffer->cfNameString = CFSTR("Threshold on echo to local voice energy for beam");
      buffer->flags = 1207959552;
      CFStringGetCString(CFSTR("Threshold on echo to local voice energy for beam"), buffer->name, 52, 0x8000100u);
      result = 0;
      buffer->clumpID = 6;
      flags = buffer->flags;
      buffer->unit = kAudioUnitParameterUnit_Generic;
      *(_QWORD *)&buffer->minValue = 0x447A0000C47A0000;
      v7 = -3.0;
      goto LABEL_75;
    case 36:
      v11 = CFSTR("(I) Echo flag to beam2");
      goto LABEL_96;
    case 37:
      v11 = CFSTR("(I) Mic Eclee Xcorr");
      goto LABEL_96;
    case 38:
      buffer->cfNameString = CFSTR("Fast Adapt: 0=off, 1=init conv, 2=init+re conv 3= init+re conv + init rate cal, 4=2+resettable");
      buffer->flags = 1207959552;
      CFStringGetCString(CFSTR("Fast Adapt: 0=off, 1=init conv, 2=init+re conv 3= init+re conv + init rate cal, 4=2+resettable"), buffer->name, 52, 0x8000100u);
      result = 0;
      buffer->clumpID = 4;
      flags = buffer->flags;
      buffer->unit = kAudioUnitParameterUnit_Generic;
      v14 = 0x4040000000000000;
      goto LABEL_74;
    case 39:
      buffer->cfNameString = CFSTR("Crop: Enable crop for long total filter lens");
      buffer->flags = 1207959552;
      CFStringGetCString(CFSTR("Crop: Enable crop for long total filter lens"), buffer->name, 52, 0x8000100u);
      result = 0;
      v18 = 1;
      goto LABEL_57;
    case 40:
      buffer->cfNameString = CFSTR("Crop: Pre-lobe delay for long total filter lens");
      buffer->flags = 1207959552;
      CFStringGetCString(CFSTR("Crop: Pre-lobe delay for long total filter lens"), buffer->name, 52, 0x8000100u);
      result = 0;
      buffer->clumpID = 1;
      flags = buffer->flags;
      buffer->unit = kAudioUnitParameterUnit_Milliseconds;
      *(_QWORD *)&buffer->minValue = 0x453B80003F800000;
      v7 = 40.0;
      goto LABEL_48;
    case 41:
      buffer->cfNameString = CFSTR("Crop: Copped filter length for long total filter lens");
      buffer->flags = 1207959552;
      CFStringGetCString(CFSTR("Crop: Copped filter length for long total filter lens"), buffer->name, 52, 0x8000100u);
      result = 0;
      buffer->clumpID = 1;
      flags = buffer->flags;
      buffer->unit = kAudioUnitParameterUnit_Milliseconds;
      *(_QWORD *)&buffer->minValue = 0x453B80003F800000;
      v7 = 200.0;
LABEL_48:
      v19 = -1877999616;
      goto LABEL_76;
    case 42:
      buffer->cfNameString = CFSTR("Multi-chan EC mode: 0-LinearEC, 1-PolyEC, 2-MultiChanEC, 3- MultiChan+PolyEC");
      buffer->flags = 1207959552;
      CFStringGetCString(CFSTR("Multi-chan EC mode: 0-LinearEC, 1-PolyEC, 2-MultiChanEC, 3- MultiChan+PolyEC"), buffer->name, 52, 0x8000100u);
      result = 0;
      buffer->clumpID = 2;
      v20 = buffer->flags | 0x100000;
      buffer->unit = kAudioUnitParameterUnit_Generic;
      *(_QWORD *)&buffer->minValue = 0x4040000000000000;
      buffer->defaultValue = 0.0;
      buffer->flags = v20;
      return result;
    case 43:
      buffer->cfNameString = CFSTR("Order to do for Poly EC");
      buffer->flags = 1207959552;
      CFStringGetCString(CFSTR("Order to do for Poly EC"), buffer->name, 52, 0x8000100u);
      result = 0;
      buffer->clumpID = 4;
      flags = buffer->flags;
      buffer->unit = kAudioUnitParameterUnit_Generic;
      *(_QWORD *)&buffer->minValue = 0x404000003F800000;
      v7 = 3.0;
      goto LABEL_75;
    case 44:
      buffer->cfNameString = CFSTR("Num of ref channels to use for multi-chan EC");
      buffer->flags = 1207959552;
      CFStringGetCString(CFSTR("Num of ref channels to use for multi-chan EC"), buffer->name, 52, 0x8000100u);
      result = 0;
      buffer->clumpID = 2;
      v21 = buffer->flags | 0x100000;
      buffer->unit = kAudioUnitParameterUnit_Generic;
      *(_QWORD *)&buffer->minValue = 0x412000003F800000;
      buffer->defaultValue = 1.0;
      buffer->flags = v21;
      return result;
    case 45:
      buffer->cfNameString = CFSTR("(I) 10*log10(syy/see)");
      buffer->flags = 1207959552;
      CFStringGetCString(CFSTR("(I) 10*log10(syy/see)"), buffer->name, 52, 0x8000100u);
      result = 0;
      buffer->clumpID = 3;
      v8 = buffer->flags;
      buffer->unit = kAudioUnitParameterUnit_Generic;
      v9 = 0x42C80000C2C80000;
      goto LABEL_97;
    case 46:
      buffer->cfNameString = CFSTR("(I) Echo leakage");
      buffer->flags = 1207959552;
      CFStringGetCString(CFSTR("(I) Echo leakage"), buffer->name, 52, 0x8000100u);
      result = 0;
      buffer->clumpID = 3;
      flags = buffer->flags;
      buffer->unit = kAudioUnitParameterUnit_Generic;
      v22 = 0x42C8000000000000;
      goto LABEL_61;
    case 47:
      v23 = CFSTR("Enable Ref Channel 0");
      goto LABEL_56;
    case 48:
      v23 = CFSTR("Enable Ref Channel 1");
LABEL_56:
      buffer->cfNameString = v23;
      buffer->flags = 1207959552;
      CFStringGetCString(v23, buffer->name, 52, 0x8000100u);
      result = 0;
      v18 = 2;
LABEL_57:
      buffer->clumpID = v18;
      flags = buffer->flags;
      buffer->unit = kAudioUnitParameterUnit_Generic;
      *(_QWORD *)&buffer->minValue = 0x3F80000000000000;
      v7 = 1.0;
      goto LABEL_69;
    case 49:
      v24 = CFSTR("Enable Ref Channel 2");
      goto LABEL_60;
    case 50:
      v24 = CFSTR("Enable Ref Channel 3");
LABEL_60:
      buffer->cfNameString = v24;
      buffer->flags = 1207959552;
      CFStringGetCString(v24, buffer->name, 52, 0x8000100u);
      result = 0;
      buffer->clumpID = 2;
      flags = buffer->flags;
      buffer->unit = kAudioUnitParameterUnit_Generic;
      v22 = 0x3F80000000000000;
LABEL_61:
      *(_QWORD *)&buffer->minValue = v22;
      v7 = 1.0;
      v19 = 1081344;
      goto LABEL_76;
    case 51:
      v25 = CFSTR("Enable Ref Channel 4");
      goto LABEL_67;
    case 52:
      v25 = CFSTR("Enable Ref Channel 5");
      goto LABEL_67;
    case 53:
      v25 = CFSTR("Enable Ref Channel 6");
      goto LABEL_67;
    case 54:
      v25 = CFSTR("Enable Ref Channel 7");
      goto LABEL_67;
    case 55:
      v25 = CFSTR("Enable Ref Channel 8");
LABEL_67:
      buffer->cfNameString = v25;
      buffer->flags = 1207959552;
      CFStringGetCString(v25, buffer->name, 52, 0x8000100u);
      result = 0;
      v26 = 2;
      goto LABEL_73;
    case 56:
      buffer->cfNameString = CFSTR("Regularization constant for NLMS Normalization");
      buffer->flags = 1207959552;
      CFStringGetCString(CFSTR("Regularization constant for NLMS Normalization"), buffer->name, 52, 0x8000100u);
      result = 0;
      buffer->clumpID = 6;
      flags = buffer->flags;
      buffer->unit = kAudioUnitParameterUnit_Generic;
      *(_QWORD *)&buffer->minValue = 0xC2480000C3160000;
      v7 = -80.458;
LABEL_69:
      v19 = -2146435072;
      goto LABEL_76;
    case 57:
      v27 = CFSTR("Run multiple iteration on Fast EC");
      goto LABEL_85;
    case 58:
      v15 = CFSTR("Calculate posterior error");
LABEL_72:
      buffer->cfNameString = v15;
      buffer->flags = 1207959552;
      CFStringGetCString(v15, buffer->name, 52, 0x8000100u);
      result = 0;
      v26 = 6;
LABEL_73:
      buffer->clumpID = v26;
      flags = buffer->flags;
      buffer->unit = kAudioUnitParameterUnit_Generic;
      v14 = 0x3F80000000000000;
LABEL_74:
      *(_QWORD *)&buffer->minValue = v14;
      v7 = 1.0;
      goto LABEL_75;
    case 59:
      v27 = CFSTR("Enable Poly EC speedup option");
      goto LABEL_85;
    case 60:
      buffer->cfNameString = CFSTR("Leakage threshold for poly EC speedup");
      buffer->flags = 1207959552;
      CFStringGetCString(CFSTR("Leakage threshold for poly EC speedup"), buffer->name, 52, 0x8000100u);
      result = 0;
      buffer->clumpID = 6;
      flags = buffer->flags;
      buffer->unit = kAudioUnitParameterUnit_Generic;
      v17 = 3253731328;
LABEL_79:
      *(_QWORD *)&buffer->minValue = v17;
      v7 = -6.0;
      goto LABEL_75;
    case 61:
      buffer->cfNameString = CFSTR("Delta IR threshold for poly EC speedup");
      buffer->flags = 1207959552;
      CFStringGetCString(CFSTR("Delta IR threshold for poly EC speedup"), buffer->name, 52, 0x8000100u);
      result = 0;
      buffer->clumpID = 6;
      flags = buffer->flags;
      buffer->unit = kAudioUnitParameterUnit_Generic;
      *(_QWORD *)&buffer->minValue = 0x42C8000000000000;
      v7 = 10.0;
      goto LABEL_75;
    case 62:
      buffer->cfNameString = CFSTR("syy2sdd ratio threshold for Poly EC speedup");
      buffer->flags = 1207959552;
      CFStringGetCString(CFSTR("syy2sdd ratio threshold for Poly EC speedup"), buffer->name, 52, 0x8000100u);
      result = 0;
      buffer->clumpID = 6;
      flags = buffer->flags;
      buffer->unit = kAudioUnitParameterUnit_Generic;
      *(_QWORD *)&buffer->minValue = 0x42C8000000000000;
      v7 = 6.0;
      goto LABEL_75;
    case 63:
      buffer->cfNameString = CFSTR("ir Ratio threshold for poly EC speedup");
      buffer->flags = 1207959552;
      CFStringGetCString(CFSTR("ir Ratio threshold for poly EC speedup"), buffer->name, 52, 0x8000100u);
      result = 0;
      buffer->clumpID = 6;
      flags = buffer->flags;
      buffer->unit = kAudioUnitParameterUnit_Generic;
      *(_QWORD *)&buffer->minValue = 0x447A000000000000;
      v7 = 40.0;
      goto LABEL_75;
    case 64:
      v29 = CFSTR("split eclee parts for poly EC");
      goto LABEL_88;
    case 65:
      v27 = CFSTR("Only use odd order terms in poly EC reference");
LABEL_85:
      buffer->cfNameString = v27;
      buffer->flags = 1207959552;
      CFStringGetCString(v27, buffer->name, 52, 0x8000100u);
      result = 0;
      v30 = 4;
      goto LABEL_89;
    case 66:
      v31 = CFSTR("De-emphasized Echo to local voice threshold");
      goto LABEL_92;
    case 67:
      v29 = CFSTR("De-emphasized Echo Flag");
LABEL_88:
      buffer->cfNameString = v29;
      buffer->flags = 1207959552;
      CFStringGetCString(v29, buffer->name, 52, 0x8000100u);
      result = 0;
      v30 = 6;
LABEL_89:
      buffer->clumpID = v30;
      v8 = buffer->flags;
      buffer->unit = kAudioUnitParameterUnit_Generic;
      v12 = 0x3F80000000000000;
      goto LABEL_93;
    case 68:
      v31 = CFSTR("(I)De-emphasized 10*log10(syy/see)");
      goto LABEL_92;
    case 69:
      v31 = CFSTR("(I)Eclee engergy in dB");
LABEL_92:
      buffer->cfNameString = v31;
      buffer->flags = 1207959552;
      CFStringGetCString(v31, buffer->name, 52, 0x8000100u);
      result = 0;
      buffer->clumpID = 6;
      v8 = buffer->flags;
      buffer->unit = kAudioUnitParameterUnit_Decibels;
      v12 = 0x447A0000C47A0000;
LABEL_93:
      *(_QWORD *)&buffer->minValue = v12;
      v10 = 68157440;
      goto LABEL_98;
    case 70:
      buffer->cfNameString = CFSTR("Eclee engergy thresh low in dB");
      buffer->flags = 1207959552;
      CFStringGetCString(CFSTR("Eclee engergy thresh low in dB"), buffer->name, 52, 0x8000100u);
      result = 0;
      buffer->clumpID = 6;
      flags = buffer->flags;
      buffer->unit = kAudioUnitParameterUnit_Decibels;
      *(_QWORD *)&buffer->minValue = 0x447A0000C47A0000;
      v7 = -26.0;
LABEL_75:
      v19 = 68157440;
LABEL_76:
      v28 = flags | v19;
      buffer->defaultValue = v7;
      goto LABEL_99;
    case 71:
      v11 = CFSTR("eclee active flag based on low thresh");
LABEL_96:
      buffer->cfNameString = v11;
      buffer->flags = 1207959552;
      CFStringGetCString(v11, buffer->name, 52, 0x8000100u);
      result = 0;
      buffer->clumpID = 3;
      v8 = buffer->flags;
      buffer->unit = kAudioUnitParameterUnit_Generic;
      v9 = 0x3F80000000000000;
LABEL_97:
      *(_QWORD *)&buffer->minValue = v9;
      v10 = 1081344;
LABEL_98:
      v28 = v8 | v10;
      buffer->defaultValue = 0.0;
LABEL_99:
      buffer->flags = v28;
      break;
    default:
      return 4294956418;
  }
  return result;
}

uint64_t AUEchoCancelerV5::RestoreState(OpaqueAudioComponentInstance **this, const void *a2)
{
  uint64_t result;

  result = ausdk::AUBase::RestoreState(this, a2);
  if (!(_DWORD)result)
    ++*((_DWORD *)this + 133);
  return result;
}

uint64_t AUEchoCancelerV5::CopyClumpName(AUEchoCancelerV5 *this, int a2, int a3, unsigned int a4, const __CFString **a5)
{
  uint64_t result;

  if (a2)
    return 4294956430;
  if ((a3 - 1) > 5)
    return 4294956418;
  result = 0;
  *a5 = kAUEchoCancelerV5ClumpNamesPtr[a3];
  return result;
}

double AUEchoCancelerV5::GetLatency(AUEchoCancelerV5 *this)
{
  return 0.0;
}

double AUEchoCancelerV5::GetTailTime(AUEchoCancelerV5 *this)
{
  return 0.0;
}

uint64_t AUEchoCancelerV5::SupportsTail(AUEchoCancelerV5 *this)
{
  return 1;
}

BOOL AUEchoCancelerV5::StreamFormatWritable(AUEchoCancelerV5 *this)
{
  return *((_BYTE *)this + 17) == 0;
}

uint64_t AUEchoCancelerV5::SupportedNumChannels(AUEchoCancelerV5 *this, const AUChannelInfo **a2)
{
  if (a2)
    *a2 = (const AUChannelInfo *)&AUEchoCancelerV5::SupportedNumChannels(AUChannelInfo const**)::sSupportedChannelConfigs;
  return 1;
}

uint64_t AUEchoCancelerV5::ValidFormat(AUEchoCancelerV5 *this, const AudioStreamBasicDescription *a2, int a3, AudioStreamBasicDescription *a4)
{
  uint64_t result;

  result = ausdk::ASBD::IsCommonFloat32((ausdk::ASBD *)a4, a2);
  if ((_DWORD)result)
  {
    if ((a4->mFormatFlags & 0x20) != 0)
    {
      result = 1;
      if (a3)
        return result;
      goto LABEL_5;
    }
    result = a4->mChannelsPerFrame == 1;
  }
  if (a3)
    return result;
LABEL_5:
  if (a4->mChannelsPerFrame == 1)
    return result;
  else
    return 0;
}

uint64_t AUEchoCancelerV5::ShouldBypassEffect(AUEchoCancelerV5 *this)
{
  return *((unsigned __int8 *)this + 528);
}

uint64_t AUEchoCancelerV5::SetBypassEffect(uint64_t this, char a2)
{
  *(_BYTE *)(this + 528) = a2;
  return this;
}

float AUEchoCancelerV5::InitializeEC(AUEchoCancelerV5 *this)
{
  uint64_t Element;
  _OWORD *v3;
  uint64_t v4;
  ausdk::AUElement *v5;
  ausdk::AUElement **v6;
  unsigned int Parameter;
  uint64_t v8;
  unsigned int v9;
  float v10;
  float v11;
  uint64_t v12;
  ausdk::AUElement *v13;
  ausdk::AUElement **v14;
  uint64_t v15;
  ausdk::AUElement *v16;
  ausdk::AUElement **v17;
  float v18;
  uint64_t v19;
  uint64_t v20;
  ausdk::AUElement *v21;
  ausdk::AUElement **v22;
  uint64_t v23;
  ausdk::AUElement *v24;
  ausdk::AUElement **v25;
  uint64_t v26;
  ausdk::AUElement *v27;
  ausdk::AUElement **v28;
  uint64_t v29;
  ausdk::AUElement *v30;
  ausdk::AUElement **v31;
  uint64_t v32;
  ausdk::AUElement *v33;
  ausdk::AUElement **v34;
  uint64_t v35;
  ausdk::AUElement *v36;
  ausdk::AUElement **v37;
  uint64_t v38;
  ausdk::AUElement *v39;
  ausdk::AUElement **v40;
  uint64_t v41;
  ausdk::AUElement *v42;
  ausdk::AUElement **v43;
  uint64_t v44;
  ausdk::AUElement *v45;
  ausdk::AUElement **v46;
  uint64_t v47;
  ausdk::AUElement *v48;
  ausdk::AUElement **v49;
  uint64_t v50;
  ausdk::AUElement *v51;
  ausdk::AUElement **v52;
  uint64_t v53;
  ausdk::AUElement *v54;
  ausdk::AUElement **v55;
  uint64_t v56;
  ausdk::AUElement *v57;
  ausdk::AUElement **v58;
  uint64_t v59;
  ausdk::AUElement *v60;
  ausdk::AUElement **v61;
  uint64_t v62;
  ausdk::AUElement *v63;
  ausdk::AUElement **v64;
  uint64_t v65;
  ausdk::AUElement *v66;
  ausdk::AUElement **v67;
  uint64_t v68;
  ausdk::AUElement *v69;
  ausdk::AUElement **v70;
  uint64_t v71;
  ausdk::AUElement *v72;
  ausdk::AUElement **v73;
  float v74;
  uint64_t v75;
  uint64_t v76;
  ausdk::AUElement *v77;
  ausdk::AUElement **v78;
  uint64_t v79;
  ausdk::AUElement *v80;
  ausdk::AUElement **v81;
  uint64_t v82;
  ausdk::AUElement *v83;
  ausdk::AUElement **v84;
  uint64_t v85;
  ausdk::AUElement *v86;
  ausdk::AUElement **v87;
  uint64_t v88;
  ausdk::AUElement *v89;
  ausdk::AUElement **v90;
  unsigned int v91;
  uint64_t v92;
  ausdk::AUElement *v93;
  ausdk::AUElement **v94;
  float v95;
  unsigned int v96;
  unsigned int v97;
  unsigned int *v98;
  unsigned int v99;
  unsigned int v100;
  uint64_t v101;
  ausdk::AUElement *v102;
  ausdk::AUElement **v103;
  uint64_t v104;
  ausdk::AUElement *v105;
  ausdk::AUElement **v106;
  int v107;
  uint64_t v108;
  ausdk::AUElement *v109;
  ausdk::AUElement **v110;
  int v111;
  uint64_t v112;
  int v113;
  uint64_t v114;
  ausdk::AUElement *v115;
  ausdk::AUElement **v116;
  uint64_t v117;
  ausdk::AUElement *v118;
  ausdk::AUElement **v119;
  uint64_t v120;
  ausdk::AUElement *v121;
  ausdk::AUElement **v122;
  uint64_t v123;
  ausdk::AUElement *v124;
  ausdk::AUElement **v125;
  uint64_t v126;
  ausdk::AUElement *v127;
  ausdk::AUElement **v128;
  uint64_t v129;
  ausdk::AUElement *v130;
  ausdk::AUElement **v131;
  uint64_t v132;
  ausdk::AUElement *v133;
  ausdk::AUElement **v134;
  uint64_t v135;
  ausdk::AUElement *v136;
  ausdk::AUElement **v137;
  uint64_t v138;
  ausdk::AUElement *v139;
  ausdk::AUElement **v140;
  BOOL v141;
  uint64_t v142;
  uint64_t v143;
  _DWORD *v144;
  _DWORD *v145;
  uint64_t v146;
  size_t v147;
  void *v148;
  BOOL v149;
  void *v150;
  uint64_t v151;
  unint64_t v152;
  void *v153;
  uint64_t v154;
  uint64_t v155;
  unint64_t v156;
  void *v157;
  uint64_t v158;
  uint64_t v159;
  unint64_t v160;
  void *v161;
  uint64_t v162;
  uint64_t v163;
  unint64_t v164;
  void *v165;
  uint64_t v166;
  unsigned int v167;
  uint64_t v168;
  ausdk::AUElement *v169;
  ausdk::AUElement **v170;
  float result;
  std::bad_alloc *exception;
  std::bad_alloc *v173;

  Element = ausdk::AUScope::SafeGetElement((AUEchoCancelerV5 *)((char *)this + 80), 0);
  (*(void (**)(AUEchoCancelerV5 *))(*(_QWORD *)this + 64))(this);
  *((_DWORD *)this + 135) = *(double *)(Element + 80);
  v3 = malloc_type_malloc(0xB0uLL, 0x2C8E6D5CuLL);
  if (!v3)
    goto LABEL_257;
  v3[9] = 0u;
  v3[10] = 0u;
  v3[7] = 0u;
  v3[8] = 0u;
  v3[5] = 0u;
  v3[6] = 0u;
  v3[3] = 0u;
  v3[4] = 0u;
  v3[1] = 0u;
  v3[2] = 0u;
  *v3 = 0u;
  *((_QWORD *)this + 85) = v3;
  v4 = *((_QWORD *)this + 9);
  if (v4)
  {
    v5 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v4 + 32))(v4, 0);
  }
  else
  {
    v6 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v6)
      v5 = 0;
    else
      v5 = *v6;
  }
  Parameter = ausdk::AUElement::GetParameter(v5, 0);
  v8 = *((_QWORD *)this + 85);
  if (!Parameter)
    goto LABEL_226;
  v9 = *((_DWORD *)this + 84);
  v10 = (float)v9;
  v11 = (float)*((unsigned int *)this + 135) / (float)((float)v9 * 1000.0);
  *(_DWORD *)v8 = (float)(ceilf(v11 * (float)Parameter) * (float)v9);
  *(_DWORD *)(v8 + 4) = v9;
  v12 = *((_QWORD *)this + 9);
  if (v12)
  {
    v13 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v12 + 32))(v12, 0);
  }
  else
  {
    v14 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v14)
      v13 = 0;
    else
      v13 = *v14;
  }
  *(_DWORD *)(*((_QWORD *)this + 85) + 8) = ausdk::AUElement::GetParameter(v13, 9u);
  v15 = *((_QWORD *)this + 9);
  if (v15)
  {
    v16 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v15 + 32))(v15, 0);
  }
  else
  {
    v17 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v17)
      v16 = 0;
    else
      v16 = *v17;
  }
  v18 = ausdk::AUElement::GetParameter(v16, 0xAu);
  v19 = *((_QWORD *)this + 85);
  *(_DWORD *)(v19 + 12) = v18;
  *(_DWORD *)(v19 + 16) = 1;
  v20 = *((_QWORD *)this + 9);
  if (v20)
  {
    v21 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v20 + 32))(v20, 0);
  }
  else
  {
    v22 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v22)
      v21 = 0;
    else
      v21 = *v22;
  }
  *(float *)(*((_QWORD *)this + 85) + 20) = ausdk::AUElement::GetParameter(v21, 0xCu);
  v23 = *((_QWORD *)this + 9);
  if (v23)
  {
    v24 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v23 + 32))(v23, 0);
  }
  else
  {
    v25 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v25)
      v24 = 0;
    else
      v24 = *v25;
  }
  *(float *)(*((_QWORD *)this + 85) + 24) = ausdk::AUElement::GetParameter(v24, 0xDu);
  v26 = *((_QWORD *)this + 9);
  if (v26)
  {
    v27 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v26 + 32))(v26, 0);
  }
  else
  {
    v28 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v28)
      v27 = 0;
    else
      v27 = *v28;
  }
  *(float *)(*((_QWORD *)this + 85) + 28) = ausdk::AUElement::GetParameter(v27, 0xEu);
  v29 = *((_QWORD *)this + 9);
  if (v29)
  {
    v30 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v29 + 32))(v29, 0);
  }
  else
  {
    v31 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v31)
      v30 = 0;
    else
      v30 = *v31;
  }
  *(float *)(*((_QWORD *)this + 85) + 32) = ausdk::AUElement::GetParameter(v30, 0xFu);
  v32 = *((_QWORD *)this + 9);
  if (v32)
  {
    v33 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v32 + 32))(v32, 0);
  }
  else
  {
    v34 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v34)
      v33 = 0;
    else
      v33 = *v34;
  }
  *(float *)(*((_QWORD *)this + 85) + 36) = ausdk::AUElement::GetParameter(v33, 0x10u);
  v35 = *((_QWORD *)this + 9);
  if (v35)
  {
    v36 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v35 + 32))(v35, 0);
  }
  else
  {
    v37 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v37)
      v36 = 0;
    else
      v36 = *v37;
  }
  *(float *)(*((_QWORD *)this + 85) + 40) = ausdk::AUElement::GetParameter(v36, 0x11u);
  v38 = *((_QWORD *)this + 9);
  if (v38)
  {
    v39 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v38 + 32))(v38, 0);
  }
  else
  {
    v40 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v40)
      v39 = 0;
    else
      v39 = *v40;
  }
  *(float *)(*((_QWORD *)this + 85) + 44) = ausdk::AUElement::GetParameter(v39, 0x12u);
  v41 = *((_QWORD *)this + 9);
  if (v41)
  {
    v42 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v41 + 32))(v41, 0);
  }
  else
  {
    v43 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v43)
      v42 = 0;
    else
      v42 = *v43;
  }
  *(float *)(*((_QWORD *)this + 85) + 48) = ausdk::AUElement::GetParameter(v42, 0x13u);
  v44 = *((_QWORD *)this + 9);
  if (v44)
  {
    v45 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v44 + 32))(v44, 0);
  }
  else
  {
    v46 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v46)
      v45 = 0;
    else
      v45 = *v46;
  }
  *(float *)(*((_QWORD *)this + 85) + 52) = ausdk::AUElement::GetParameter(v45, 0x14u);
  v47 = *((_QWORD *)this + 9);
  if (v47)
  {
    v48 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v47 + 32))(v47, 0);
  }
  else
  {
    v49 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v49)
      v48 = 0;
    else
      v48 = *v49;
  }
  *(float *)(*((_QWORD *)this + 85) + 56) = ausdk::AUElement::GetParameter(v48, 0x15u);
  v50 = *((_QWORD *)this + 9);
  if (v50)
  {
    v51 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v50 + 32))(v50, 0);
  }
  else
  {
    v52 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v52)
      v51 = 0;
    else
      v51 = *v52;
  }
  *(float *)(*((_QWORD *)this + 85) + 60) = ausdk::AUElement::GetParameter(v51, 0x16u);
  v53 = *((_QWORD *)this + 9);
  if (v53)
  {
    v54 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v53 + 32))(v53, 0);
  }
  else
  {
    v55 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v55)
      v54 = 0;
    else
      v54 = *v55;
  }
  *(float *)(*((_QWORD *)this + 85) + 64) = ausdk::AUElement::GetParameter(v54, 0x19u);
  v56 = *((_QWORD *)this + 9);
  if (v56)
  {
    v57 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v56 + 32))(v56, 0);
  }
  else
  {
    v58 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v58)
      v57 = 0;
    else
      v57 = *v58;
  }
  *(float *)(*((_QWORD *)this + 85) + 68) = ausdk::AUElement::GetParameter(v57, 0x1Au);
  v59 = *((_QWORD *)this + 9);
  if (v59)
  {
    v60 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v59 + 32))(v59, 0);
  }
  else
  {
    v61 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v61)
      v60 = 0;
    else
      v60 = *v61;
  }
  *(float *)(*((_QWORD *)this + 85) + 72) = ausdk::AUElement::GetParameter(v60, 0x17u);
  v62 = *((_QWORD *)this + 9);
  if (v62)
  {
    v63 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v62 + 32))(v62, 0);
  }
  else
  {
    v64 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v64)
      v63 = 0;
    else
      v63 = *v64;
  }
  *(float *)(*((_QWORD *)this + 85) + 76) = ausdk::AUElement::GetParameter(v63, 0x18u);
  v65 = *((_QWORD *)this + 9);
  if (v65)
  {
    v66 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v65 + 32))(v65, 0);
  }
  else
  {
    v67 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v67)
      v66 = 0;
    else
      v66 = *v67;
  }
  *(float *)(*((_QWORD *)this + 85) + 80) = ausdk::AUElement::GetParameter(v66, 0x1Bu);
  v68 = *((_QWORD *)this + 9);
  if (v68)
  {
    v69 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v68 + 32))(v68, 0);
  }
  else
  {
    v70 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v70)
      v69 = 0;
    else
      v69 = *v70;
  }
  *(_BYTE *)(*((_QWORD *)this + 85) + 84) = ausdk::AUElement::GetParameter(v69, 0x1Cu) != 0.0;
  v71 = *((_QWORD *)this + 9);
  if (v71)
  {
    v72 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v71 + 32))(v71, 0);
  }
  else
  {
    v73 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v73)
      v72 = 0;
    else
      v72 = *v73;
  }
  v74 = ausdk::AUElement::GetParameter(v72, 0x1Du);
  v75 = *((_QWORD *)this + 85);
  *(float *)(v75 + 88) = v74;
  *(_DWORD *)(v75 + 92) = 1;
  v76 = *((_QWORD *)this + 9);
  if (v76)
  {
    v77 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v76 + 32))(v76, 0);
  }
  else
  {
    v78 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v78)
      v77 = 0;
    else
      v77 = *v78;
  }
  *(float *)(*((_QWORD *)this + 85) + 96) = ausdk::AUElement::GetParameter(v77, 0x1Fu);
  v79 = *((_QWORD *)this + 9);
  if (v79)
  {
    v80 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v79 + 32))(v79, 0);
  }
  else
  {
    v81 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v81)
      v80 = 0;
    else
      v80 = *v81;
  }
  *(float *)(*((_QWORD *)this + 85) + 100) = ausdk::AUElement::GetParameter(v80, 0x20u);
  v82 = *((_QWORD *)this + 9);
  if (v82)
  {
    v83 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v82 + 32))(v82, 0);
  }
  else
  {
    v84 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v84)
      v83 = 0;
    else
      v83 = *v84;
  }
  *(_DWORD *)(*((_QWORD *)this + 85) + 104) = ausdk::AUElement::GetParameter(v83, 0x27u);
  v85 = *((_QWORD *)this + 9);
  if (v85)
  {
    v86 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v85 + 32))(v85, 0);
  }
  else
  {
    v87 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v87)
      v86 = 0;
    else
      v86 = *v87;
  }
  *(_DWORD *)(*((_QWORD *)this + 85) + 108) = ausdk::AUElement::GetParameter(v86, 0x26u);
  v88 = *((_QWORD *)this + 9);
  if (v88)
  {
    v89 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v88 + 32))(v88, 0);
  }
  else
  {
    v90 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v90)
      v89 = 0;
    else
      v89 = *v90;
  }
  v91 = ausdk::AUElement::GetParameter(v89, 0x28u);
  v92 = *((_QWORD *)this + 9);
  if (v92)
  {
    v93 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v92 + 32))(v92, 0);
  }
  else
  {
    v94 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v94)
      v93 = 0;
    else
      v93 = *v94;
  }
  v95 = ausdk::AUElement::GetParameter(v93, 0x29u);
  if (v91 <= 5)
    v96 = 5;
  else
    v96 = v91;
  v97 = (float)(ceilf(v11 * (float)v96) * v10);
  v98 = (unsigned int *)*((_QWORD *)this + 85);
  v99 = (float)(ceilf(v11 * (float)v95) * v10);
  if (v97 >= v99)
    v99 = v9 + v97;
  v98[28] = v97;
  v98[29] = v99;
  v100 = *v98;
  if (v99 >= *v98)
  {
    v98[28] = 0;
    v98[29] = v100;
    v98[26] = 0;
  }
  v101 = *((_QWORD *)this + 9);
  if (v101)
  {
    v102 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v101 + 32))(v101, 0);
  }
  else
  {
    v103 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v103)
      v102 = 0;
    else
      v102 = *v103;
  }
  *(_DWORD *)(*((_QWORD *)this + 85) + 124) = (int)ausdk::AUElement::GetParameter(v102, 0x2Au);
  v104 = *((_QWORD *)this + 9);
  if (v104)
  {
    v105 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v104 + 32))(v104, 0);
  }
  else
  {
    v106 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v106)
      v105 = 0;
    else
      v105 = *v106;
  }
  v107 = (int)ausdk::AUElement::GetParameter(v105, 0x2Bu);
  if (v107 >= 3)
    v107 = 3;
  *(_DWORD *)(*((_QWORD *)this + 85) + 128) = v107;
  v108 = *((_QWORD *)this + 9);
  if (v108)
  {
    v109 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v108 + 32))(v108, 0);
  }
  else
  {
    v110 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v110)
      v109 = 0;
    else
      v109 = *v110;
  }
  v111 = (int)ausdk::AUElement::GetParameter(v109, 0x2Cu);
  v112 = *((_QWORD *)this + 85);
  if (*((_DWORD *)this + 166) < v111)
    v111 = *((_DWORD *)this + 166);
  *(_DWORD *)(v112 + 132) = v111;
  v113 = *(_DWORD *)(v112 + 124);
  if (v113 == 3)
  {
    *(_DWORD *)(v112 + 120) = v111 + *(_DWORD *)(v112 + 128) - 1;
    goto LABEL_172;
  }
  if (v113 == 2)
  {
    *(_DWORD *)(v112 + 120) = v111;
    *(_DWORD *)(v112 + 128) = 1;
LABEL_171:
    *(_BYTE *)(v112 + 168) = 0;
    *(_BYTE *)(v112 + 142) = 0;
    goto LABEL_172;
  }
  if (v113 != 1)
  {
    *(_DWORD *)(v112 + 120) = 1;
    *(_QWORD *)(v112 + 128) = 0x100000001;
    goto LABEL_171;
  }
  *(_DWORD *)(v112 + 120) = *(_DWORD *)(v112 + 128);
  *(_DWORD *)(v112 + 132) = 1;
LABEL_172:
  v114 = *((_QWORD *)this + 9);
  if (v114)
  {
    v115 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v114 + 32))(v114, 0);
  }
  else
  {
    v116 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v116)
      v115 = 0;
    else
      v115 = *v116;
  }
  *(float *)(*((_QWORD *)this + 85) + 136) = ausdk::AUElement::GetParameter(v115, 0x38u);
  v117 = *((_QWORD *)this + 9);
  if (v117)
  {
    v118 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v117 + 32))(v117, 0);
  }
  else
  {
    v119 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v119)
      v118 = 0;
    else
      v118 = *v119;
  }
  *(_BYTE *)(*((_QWORD *)this + 85) + 140) = ausdk::AUElement::GetParameter(v118, 0x39u) != 0.0;
  v120 = *((_QWORD *)this + 9);
  if (v120)
  {
    v121 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v120 + 32))(v120, 0);
  }
  else
  {
    v122 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v122)
      v121 = 0;
    else
      v121 = *v122;
  }
  *(_BYTE *)(*((_QWORD *)this + 85) + 141) = ausdk::AUElement::GetParameter(v121, 0x3Au) != 0.0;
  v123 = *((_QWORD *)this + 9);
  if (v123)
  {
    v124 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v123 + 32))(v123, 0);
  }
  else
  {
    v125 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v125)
      v124 = 0;
    else
      v124 = *v125;
  }
  *(_BYTE *)(*((_QWORD *)this + 85) + 142) = ausdk::AUElement::GetParameter(v124, 0x3Bu) != 0.0;
  v126 = *((_QWORD *)this + 9);
  if (v126)
  {
    v127 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v126 + 32))(v126, 0);
  }
  else
  {
    v128 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v128)
      v127 = 0;
    else
      v127 = *v128;
  }
  *(float *)(*((_QWORD *)this + 85) + 144) = ausdk::AUElement::GetParameter(v127, 0x3Cu);
  v129 = *((_QWORD *)this + 9);
  if (v129)
  {
    v130 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v129 + 32))(v129, 0);
  }
  else
  {
    v131 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v131)
      v130 = 0;
    else
      v130 = *v131;
  }
  *(float *)(*((_QWORD *)this + 85) + 148) = ausdk::AUElement::GetParameter(v130, 0x3Du);
  v132 = *((_QWORD *)this + 9);
  if (v132)
  {
    v133 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v132 + 32))(v132, 0);
  }
  else
  {
    v134 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v134)
      v133 = 0;
    else
      v133 = *v134;
  }
  *(float *)(*((_QWORD *)this + 85) + 152) = ausdk::AUElement::GetParameter(v133, 0x3Eu);
  v135 = *((_QWORD *)this + 9);
  if (v135)
  {
    v136 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v135 + 32))(v135, 0);
  }
  else
  {
    v137 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v137)
      v136 = 0;
    else
      v136 = *v137;
  }
  *(float *)(*((_QWORD *)this + 85) + 156) = ausdk::AUElement::GetParameter(v136, 0x3Fu);
  v138 = *((_QWORD *)this + 9);
  if (v138)
  {
    v139 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v138 + 32))(v138, 0);
  }
  else
  {
    v140 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v140)
      v139 = 0;
    else
      v139 = *v140;
  }
  v141 = ausdk::AUElement::GetParameter(v139, 0x40u) != 0.0;
  v142 = *((_QWORD *)this + 85);
  *(_BYTE *)(v142 + 168) = v141;
  v143 = *(int *)(v142 + 120);
  v144 = malloc_type_malloc(4 * v143, 0x2C8E6D5CuLL);
  v145 = v144;
  if ((_DWORD)v143 && !v144)
  {
LABEL_257:
    exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
    v173 = std::bad_alloc::bad_alloc(exception);
  }
  bzero(v144, 4 * v143);
  v8 = *((_QWORD *)this + 85);
  *(_QWORD *)(v8 + 160) = v145;
  if ((*(_DWORD *)(v8 + 124) | 2) == 3)
  {
    if (*(int *)(v8 + 128) >= 2)
    {
      v146 = 1;
      do
        v145[v146++] = 1;
      while (v146 < *(int *)(v8 + 128));
    }
  }
  else if (*(_BYTE *)(v8 + 168))
  {
    *(_BYTE *)(v8 + 168) = 0;
  }
LABEL_226:
  v147 = 4 * *((unsigned int *)this + 84) * (uint64_t)*(int *)(v8 + 120);
  v148 = malloc_type_malloc(v147, 0x2C8E6D5CuLL);
  if (v148)
    v149 = 1;
  else
    v149 = v147 == 0;
  if (!v149)
    goto LABEL_257;
  v150 = v148;
  bzero(v148, v147);
  *((_QWORD *)this + 82) = v150;
  aec_v5::aec_init((uint64_t **)this + 72, *((_DWORD *)this + 135), *((int **)this + 85));
  v151 = *(_QWORD *)(*((_QWORD *)this + 72) + 16);
  if (v151)
    v152 = *(int *)(v151 + 88);
  else
    v152 = 0;
  std::valarray<float>::resize((uint64_t)this + 584, v152, 0.0);
  v153 = (void *)*((_QWORD *)this + 73);
  v154 = *((_QWORD *)this + 74) - (_QWORD)v153;
  if (v154 >= 1)
    bzero(v153, 4 * (((unint64_t)v154 >> 2) - ((unint64_t)v154 > 3)) + 4);
  v155 = *(_QWORD *)(*((_QWORD *)this + 72) + 16);
  if (v155)
    v156 = *(int *)(v155 + 88);
  else
    v156 = 0;
  std::valarray<float>::resize((uint64_t)this + 600, v156, 0.0);
  v157 = (void *)*((_QWORD *)this + 75);
  v158 = *((_QWORD *)this + 76) - (_QWORD)v157;
  if (v158 >= 1)
    bzero(v157, 4 * (((unint64_t)v158 >> 2) - ((unint64_t)v158 > 3)) + 4);
  v159 = *(_QWORD *)(*((_QWORD *)this + 72) + 16);
  if (v159)
    v160 = *(int *)(v159 + 88);
  else
    v160 = 0;
  std::valarray<float>::resize((uint64_t)this + 616, v160, 0.0);
  v161 = (void *)*((_QWORD *)this + 77);
  v162 = *((_QWORD *)this + 78) - (_QWORD)v161;
  if (v162 >= 1)
    bzero(v161, 4 * (((unint64_t)v162 >> 2) - ((unint64_t)v162 > 3)) + 4);
  v163 = *(_QWORD *)(*((_QWORD *)this + 72) + 16);
  if (v163)
    v164 = *(int *)(v163 + 88);
  else
    v164 = 0;
  std::valarray<float>::resize((uint64_t)this + 632, v164, 0.0);
  v165 = (void *)*((_QWORD *)this + 79);
  v166 = *((_QWORD *)this + 80) - (_QWORD)v165;
  if (v166 >= 1)
    bzero(v165, 4 * (((unint64_t)v166 >> 2) - ((unint64_t)v166 > 3)) + 4);
  v167 = **((_DWORD **)this + 85);
  v168 = *((_QWORD *)this + 9);
  if (v168)
  {
    v169 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v168 + 32))(v168, 0);
  }
  else
  {
    v170 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v170)
      v169 = 0;
    else
      v169 = *v170;
  }
  ausdk::AUElement::SetParameter(v169, 1u, (float)v167, 0);
  return result;
}

AudioBufferList *VoiceProcessorV9::ProcessDownlinkAudio(VoiceProcessorV9 *this, AudioBufferList *a2, AudioBufferList *a3, AudioBufferList *a4, AudioBufferList *a5, uint64_t a6, const AudioTimeStamp *a7)
{
  char *v11;
  char *v12;
  unsigned int *v13;
  unsigned int v14;
  CADeprecated::CAMutex *v15;
  AudioBufferList *v16;
  AudioBufferList *v17;
  double v18;
  char *v19;
  double v20;
  double v21;
  _QWORD *v22;
  NSObject *v23;
  uint64_t v24;
  int *v25;
  double v26;
  double v27;
  _QWORD *v28;
  NSObject *v29;
  int *v30;
  char *v31;
  int v32;
  UInt32 v33;
  int v34;
  const CAStreamBasicDescription *v35;
  AudioBufferList *v36;
  UInt32 mNumberBuffers;
  unint64_t v38;
  void **p_mData;
  AudioBufferList *v40;
  unint64_t v41;
  void **v42;
  AudioBufferList *v43;
  AudioBufferList *v44;
  unint64_t v45;
  void **v46;
  AudioBufferList *v47;
  int v48;
  double v49;
  NSObject *v50;
  NSObject *v51;
  int *v52;
  NSObject *v53;
  NSObject *v54;
  int v55;
  int *v56;
  uint64_t v57;
  int v58;
  double v59;
  double v60;
  _QWORD *v61;
  NSObject *v62;
  int *v63;
  _QWORD *v64;
  NSObject *v65;
  UInt32 v66;
  int v67;
  int v68;
  int *v69;
  uint64_t v70;
  UInt32 v71;
  int v72;
  _QWORD *v73;
  NSObject *v74;
  UInt32 mDataByteSize;
  int v76;
  int *v77;
  int v78;
  uint64_t v79;
  _QWORD *v80;
  NSObject *v81;
  int *v82;
  _QWORD *v83;
  NSObject *v84;
  UInt32 v85;
  int v86;
  int v87;
  int *v88;
  uint64_t v89;
  UInt32 v90;
  int v91;
  NSObject *v92;
  NSObject *v93;
  int *v94;
  NSObject *v95;
  NSObject *v96;
  int v97;
  VoiceProcessor::SampleRateConverter **v98;
  unsigned int v99;
  unsigned int *v100;
  uint64_t v101;
  int v102;
  int *v103;
  uint64_t v104;
  unint64_t v105;
  const AudioBufferList *v106;
  uint64_t v107;
  UInt64 v108;
  UInt64 v109;
  Float64 mSampleTime;
  unsigned int frame_count;
  int v112;
  uint64_t v113;
  int *v114;
  int v115;
  uint64_t v116;
  size_t v117;
  unint64_t v118;
  uint64_t v119;
  unint64_t i;
  int v121;
  AudioBufferList *v122;
  int v123;
  uint64_t v124;
  size_t v125;
  uint64_t v126;
  unint64_t v127;
  unint64_t j;
  char *v129;
  unint64_t *v130;
  unint64_t v131;
  unint64_t v132;
  int v133;
  uint64_t v134;
  AudioUnit v135;
  CA::AudioSampleRateConverter **v136;
  uint64_t v137;
  float v138;
  unsigned int v139;
  unsigned int v140;
  unsigned int v141;
  unsigned int v142;
  double v143;
  AudioBufferList *v144;
  unsigned int v145;
  uint64_t v146;
  size_t v147;
  uint64_t v148;
  uint64_t v149;
  char *v150;
  uint64_t v151;
  uint64_t v152;
  OpaqueAudioComponentInstance *v153;
  OpaqueAudioComponentInstance *v154;
  OpaqueAudioComponentInstance *v155;
  __int128 v156;
  unsigned int *v157;
  __int128 v158;
  _BOOL8 v159;
  uint64_t v160;
  int v161;
  int *v162;
  int v163;
  UInt64 v164;
  UInt64 v165;
  UInt64 v166;
  UInt64 v167;
  const float *data;
  const float *v169;
  float *v170;
  uint64_t v171;
  size_t v172;
  uint64_t v173;
  unint64_t v174;
  unint64_t v175;
  int v176;
  uint64_t v177;
  AudioBufferList *v178;
  AudioBufferList *v179;
  AudioBufferList *v180;
  unint64_t k;
  unint64_t v182;
  AudioBuffer *mBuffers;
  _OWORD *v184;
  unint64_t n;
  __int128 v186;
  unint64_t v187;
  int v188;
  uint64_t v189;
  unint64_t m;
  unsigned int v191;
  uint64_t v192;
  double v193;
  uint64_t v194;
  AudioBufferList *v195;
  int *v196;
  int v197;
  uint64_t v198;
  size_t v199;
  int v200;
  uint64_t v201;
  int *v202;
  size_t v203;
  uint64_t v204;
  UInt32 v205;
  uint64_t v206;
  UInt32 *v207;
  size_t v208;
  uint64_t v209;
  UInt32 v210;
  uint64_t v211;
  UInt32 *v212;
  size_t v213;
  uint64_t v214;
  _DWORD *v215;
  unint64_t v216;
  void **v217;
  unsigned int v218;
  uint64_t v219;
  UInt32 *v220;
  size_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  int *v225;
  size_t v226;
  uint64_t v227;
  int v228;
  uint64_t v229;
  _QWORD *v230;
  uint64_t *v231;
  uint64_t v232;
  uint64_t v233;
  AudioBufferList *v234;
  AudioBufferList *v235;
  AudioBufferList *v236;
  int v237;
  uint64_t v238;
  uint64_t *v239;
  void **v240;
  uint64_t v241;
  uint64_t v242;
  int v243;
  uint64_t v244;
  uint64_t *v245;
  void **v246;
  uint64_t v247;
  uint64_t v248;
  int v249;
  uint64_t v250;
  uint64_t *v251;
  void **v252;
  uint64_t v253;
  int v254;
  uint64_t v255;
  uint64_t *v256;
  void **v257;
  uint64_t v258;
  int v259;
  uint64_t v260;
  uint64_t v261;
  UInt32 *v262;
  _QWORD *v263;
  uint64_t v264;
  AudioBufferList *v265;
  AudioBufferList *MonoABL;
  AudioBufferList *v267;
  AudioBufferList *v268;
  AudioBufferList *v269;
  AudioBufferList *v270;
  uint64_t v271;
  unsigned int *v272;
  uint64_t v273;
  AudioBufferList *v274;
  unint64_t v275;
  void **v276;
  _BOOL4 v277;
  _BOOL4 v278;
  uint64_t v279;
  uint64_t v280;
  uint64_t v281;
  const AudioBufferList *v282;
  uint64_t v283;
  float v284;
  UInt64 v285;
  UInt64 v286;
  float *v287;
  uint64_t v288;
  OpaqueAudioComponentInstance *v289;
  int v290;
  UInt64 v291;
  Float64 v292;
  UInt32 *p_mNumberBuffers;
  OpaqueAudioComponentInstance *v294;
  OSStatus Parameter;
  _BOOL4 v297;
  UInt64 v298;
  UInt64 v299;
  const float *v300;
  float *v301;
  UInt64 v302;
  UInt64 v303;
  const float *v304;
  float *v305;
  UInt64 v306;
  UInt64 v307;
  const float *v308;
  float *v309;
  uint64_t v310;
  OpaqueAudioComponentInstance *v311;
  OpaqueAudioComponentInstance *v312;
  int v313;
  OpaqueAudioComponentInstance *v314;
  int v315;
  OpaqueAudioComponentInstance *v316;
  OpaqueAudioComponentInstance *v317;
  AudioBufferList *v318;
  unint64_t v319;
  int v320;
  float v321;
  UInt64 v322;
  UInt64 v323;
  const float *v324;
  float *v325;
  unint64_t v326;
  uint64_t v327;
  int v328;
  UInt32 v329;
  unint64_t v330;
  unsigned int v331;
  uint64_t v332;
  int v333;
  uint64_t DynamicsDSPChannelCount;
  UInt32 v335;
  uint64_t v336;
  AudioBufferList *v337;
  size_t v338;
  unsigned int v339;
  unsigned int v340;
  uint64_t *v341;
  _DWORD *audio_buffer_list;
  unsigned int *v343;
  unint64_t v344;
  void **v345;
  UInt32 v346;
  int v347;
  const float *mData;
  const float *v349;
  float *v350;
  uint64_t v351;
  UInt32 v352;
  uint64_t v353;
  OpaqueAudioComponentInstance *v354;
  uint64_t v355;
  AudioBufferList *v356;
  size_t v357;
  unsigned int v358;
  int v359;
  uint64_t v360;
  UInt32 *v361;
  size_t v362;
  void *v363;
  uint64_t v364;
  uint64_t v365;
  _DWORD *v366;
  size_t v367;
  uint64_t v368;
  uint64_t v369;
  uint64_t v370;
  UInt32 *v371;
  size_t v372;
  unint64_t v373;
  uint64_t v374;
  uint64_t v375;
  void *v376;
  uint64_t v377;
  uint64_t v378;
  AudioBufferList *v379;
  size_t v380;
  uint64_t v381;
  AudioBufferList *v382;
  AudioBuffer v383;
  int v384;
  void **v385;
  unsigned int v386;
  unint64_t v387;
  char *v388;
  const void **v389;
  unsigned int *v390;
  uint64_t v391;
  AudioBufferList *v392;
  unint64_t v393;
  uint64_t v394;
  int v395;
  AudioBuffer *v396;
  _OWORD *v397;
  unint64_t ii;
  __int128 v399;
  UInt32 v400;
  void **v401;
  unint64_t v402;
  unint64_t v403;
  void **v404;
  unsigned int *v405;
  unint64_t v406;
  void **v407;
  unint64_t v408;
  uint64_t v409;
  uint64_t v410;
  float *v411;
  CA::AudioSampleRateConverter **v412;
  _BYTE *v413;
  vDSP_Length v414;
  AudioUnitParameterValue v415;
  OpaqueAudioComponentInstance *v416;
  OpaqueAudioComponentInstance *v417;
  unsigned int v418;
  uint64_t v419;
  uint64_t v420;
  UInt64 v421;
  uint64_t v422;
  uint64_t v423;
  const AudioBufferList *v424;
  const AudioBufferList **v425;
  __int128 v426;
  __int128 v427;
  __int128 v428;
  __int128 v429;
  uint64_t v430;
  OpaqueAudioComponentInstance *v431;
  uint64_t v432;
  uint64_t v433;
  AudioBufferList *v434;
  size_t v435;
  uint64_t v436;
  AudioBuffer *v437;
  AudioBuffer v438;
  OpaqueAudioComponentInstance *v439;
  uint64_t v440;
  uint64_t v441;
  AudioBufferList *v442;
  size_t v443;
  uint64_t v444;
  AudioBufferList *v445;
  AudioBuffer v446;
  char v447;
  float v448;
  float v449;
  float v450;
  float v451;
  BOOL v452;
  float v453;
  float v454;
  float v455;
  unint64_t v456;
  uint64_t v457;
  _DWORD *v458;
  UInt32 v459;
  UInt64 v460;
  OpaqueAudioComponentInstance *v461;
  uint64_t v462;
  uint64_t v463;
  AudioBufferList *v464;
  size_t v465;
  uint64_t v466;
  AudioBuffer *v467;
  AudioBuffer v468;
  UInt64 v469;
  _DWORD *v470;
  UInt32 v471;
  uint64_t v472;
  uint64_t v473;
  AudioBufferList *v474;
  size_t v475;
  uint64_t v476;
  AudioBufferList *v477;
  AudioBuffer v478;
  UInt64 v479;
  OpaqueAudioComponentInstance *v480;
  char v481;
  char *v482;
  OpaqueAudioComponentInstance *v483;
  OpaqueAudioComponentInstance *v484;
  OpaqueAudioComponentInstance *v485;
  unsigned int v486;
  uint64_t v487;
  uint64_t v488;
  int *v489;
  unsigned int v490;
  double v491;
  int *v492;
  uint64_t v493;
  unint64_t v494;
  void **v495;
  int v496;
  unsigned int v498;
  _DWORD *v500;
  _DWORD *v501;
  _DWORD *v503;
  _DWORD *v505;
  _DWORD *v507;
  _DWORD *v509;
  _DWORD *v510;
  _DWORD *v511;
  _DWORD *exception;
  _DWORD *v513;
  _DWORD *v514;
  NSObject *v515;
  _DWORD *v516;
  _DWORD *v517;
  _DWORD *v518;
  _DWORD *v519;
  NSObject *v520;
  _DWORD *v521;
  _DWORD *v522;
  _DWORD *v523;
  uint64_t v524;
  __int128 v525;
  char *v526;
  vp::Audio_Buffer *v527;
  _BYTE *v528;
  const AudioTimeStamp *v529;
  void **v530;
  void **v531;
  void **v532;
  void **v533;
  uint64_t *v534;
  int v535;
  unsigned int v536;
  Float64 v537;
  Float64 v538;
  uint64_t v539;
  AudioBufferList *v540;
  UInt32 *v541;
  UInt32 *v542;
  int *v543;
  unsigned int *v544;
  AudioBufferList *v545;
  AudioBufferList *v546;
  unsigned int v547;
  AudioBufferList *v548;
  AudioBufferList *v549;
  char *v550;
  const AudioBufferList *v551;
  Float64 v552;
  float v553;
  AudioBufferList v554;
  UInt32 v555;
  UInt32 NumberOfSourceFrames;
  UInt32 v557;
  AudioTimeStamp v558;
  AudioBufferList *v559[2];
  AudioTimeStamp v560;
  AudioTimeStamp v561;
  AudioBufferList v562;
  AudioBufferList v563;
  AudioTimeStamp v564;
  AudioTimeStamp buf;
  uint64_t v566;

  v545 = a3;
  v546 = a4;
  v548 = a2;
  v566 = *MEMORY[0x1E0C80C00];
  v11 = (char *)this + 17032;
  v12 = (char *)this + 12488;
  v13 = (unsigned int *)((char *)this + 2484);
  do
    v14 = __ldaxr(v13);
  while (__stlxr(v14 + 1, v13));
  if (*((_DWORD *)this + 620))
  {
    VoiceProcessorV2::LogIOError((uint64_t)this, 23.006, (float)*((unsigned int *)this + 3114), 0.0, 0.0, "processdl: tryer failed to acquire lock");
    v15 = (VoiceProcessorV9 *)((char *)this + 2576);
    CADeprecated::CAMutex::Lock((VoiceProcessorV9 *)((char *)this + 2576));
LABEL_5:
    ++*((_DWORD *)this + 3114);
    CADeprecated::CAMutex::Unlock(v15);
    LOBYTE(v16) = 0;
    v17 = (AudioBufferList *)1937006964;
    v18 = 0.0;
    goto LABEL_932;
  }
  if (!*((_BYTE *)this + 477))
  {
    VoiceProcessorV2::LogIOError((uint64_t)this, 23.005, (float)*((unsigned int *)this + 3114), 0.0, 0.0, "processdl: not ok to process?!");
    v15 = (VoiceProcessorV9 *)((char *)this + 2576);
    CADeprecated::CAMutex::Lock((VoiceProcessorV9 *)((char *)this + 2576));
    goto LABEL_5;
  }
  v18 = 0.0;
  if (*((_BYTE *)this + 15897) && *((_QWORD *)this + 1571))
  {
    v19 = (char *)this + 17032;
    v18 = (double)mach_absolute_time() * 0.0000000416666667;
    if (*((double *)this + 1986) == 0.0)
      *((double *)this + 1986) = v18;
    v11 = v19;
  }
  v528 = v11;
  (*(void (**)(AudioTimeStamp *__return_ptr, VoiceProcessorV9 *, const AudioTimeStamp *))(*(_QWORD *)this + 680))(&buf, this, a7);
  v558 = buf;
  if (v12[3409])
  {
    if (*v12)
    {
      v20 = *((double *)this + 1560);
      HIDWORD(v21) = HIDWORD(v558.mSampleTime);
      if (v20 != v558.mSampleTime)
      {
        VoiceProcessorV2::WriteTSOverload((std::chrono::duration<long long, std::ratio<1, 1000000>>::rep)this, v20, v558.mSampleTime, 2);
        v21 = *((double *)this + 1560);
        if (v558.mSampleTime < v21)
        {
          if (VPLogScope(void)::once != -1)
            dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
          v22 = (_QWORD *)VPLogScope(void)::scope;
          if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(1, VPLogScope(void)::scope, 0))
          {
            v23 = (*v22 ? *v22 : MEMORY[0x1E0C81028]);
            if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR))
            {
              v24 = *((_QWORD *)this + 1560);
              LODWORD(buf.mSampleTime) = 136316674;
              *(_QWORD *)((char *)&buf.mSampleTime + 4) = "vpProcessDownlink_v9.cpp";
              WORD2(buf.mHostTime) = 1024;
              *(_DWORD *)((char *)&buf.mHostTime + 6) = 75;
              WORD1(buf.mRateScalar) = 2048;
              *(_QWORD *)((char *)&buf.mRateScalar + 4) = v24;
              WORD2(buf.mWordClockTime) = 2048;
              *(UInt64 *)((char *)&buf.mWordClockTime + 6) = *(_QWORD *)&v558.mSampleTime;
              HIWORD(buf.mSMPTETime.mCounter) = 2048;
              *(_QWORD *)&buf.mSMPTETime.mType = v558.mHostTime;
              buf.mSMPTETime.mHours = 2048;
              *(Float64 *)&buf.mSMPTETime.mMinutes = v558.mRateScalar;
              HIWORD(buf.mFlags) = 1024;
              buf.mReserved = v558.mFlags;
              _os_log_impl(&dword_1B5ED0000, v23, OS_LOG_TYPE_ERROR, "%25s:%-5d  >vp> sprk sample time jumped backwards, expected sample time: %.2lf, input sample time: %.2lf, input host time: %lld, input rate scalar: %.2lf, input flag: %d", (uint8_t *)&buf, 0x40u);
            }
          }
          v25 = (int *)*((_QWORD *)this + 1570);
          if (v25 && (v12[3409] || v12[3410]))
          {
            if (VPLogScope(void)::once != -1)
              dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
            CALegacyLog::log(v25, 1, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v9/vpProcessDownlink_v9.cpp", 75, "ProcessDownlinkAudio", "sprk sample time jumped backwards, expected sample time: %.2lf, input sample time: %.2lf, input host time: %lld, input rate scalar: %.2lf, input flag: %d", *((double *)this + 1560), v558.mSampleTime, v558.mHostTime, v558.mRateScalar, v558.mFlags);
          }
          VoiceProcessorV2::LogIOError((uint64_t)this, 23.008, (float)*((unsigned int *)this + 3114), 0.0, 0.0, "sprk sample time jumped backwards");
        }
      }
    }
    else
    {
      *v12 = 1;
      VoiceProcessorV2::WriteTSOverload((std::chrono::duration<long long, std::ratio<1, 1000000>>::rep)this, 0.0, v558.mSampleTime, 2);
      v21 = *((double *)this + 215);
      v26 = v558.mSampleTime - v21;
      v27 = (float)((float)((float)(roundf(*((float *)this + 289) * (float)*((unsigned int *)this + 124))
                                  + (float)*((unsigned int *)this + 124))
                          + (float)*((unsigned int *)this + 293))
                  + (float)*((unsigned int *)this + 294));
      if (v558.mSampleTime - v21 != v27)
      {
        if (VPLogScope(void)::once != -1)
          dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
        v28 = (_QWORD *)VPLogScope(void)::scope;
        if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(1, VPLogScope(void)::scope, 0))
        {
          v29 = (*v28 ? *v28 : MEMORY[0x1E0C81028]);
          if (os_log_type_enabled(v29, OS_LOG_TYPE_ERROR))
          {
            LODWORD(buf.mSampleTime) = 136315906;
            *(_QWORD *)((char *)&buf.mSampleTime + 4) = "vpProcessDownlink_v9.cpp";
            WORD2(buf.mHostTime) = 1024;
            *(_DWORD *)((char *)&buf.mHostTime + 6) = 65;
            WORD1(buf.mRateScalar) = 2048;
            *(double *)((char *)&buf.mRateScalar + 4) = v27;
            WORD2(buf.mWordClockTime) = 2048;
            *(double *)((char *)&buf.mWordClockTime + 6) = v26;
            _os_log_impl(&dword_1B5ED0000, v29, OS_LOG_TYPE_ERROR, "%25s:%-5d  >vp> bad mic-speaker delay: expected sample time diff: %.1lf, actual sample time diff: %.1lf", (uint8_t *)&buf, 0x26u);
          }
        }
        v30 = (int *)*((_QWORD *)this + 1570);
        if (v30 && (v12[3409] || v12[3410]))
        {
          if (VPLogScope(void)::once != -1)
            dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
          CALegacyLog::log(v30, 1, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v9/vpProcessDownlink_v9.cpp", 65, "ProcessDownlinkAudio", "bad mic-speaker delay: expected sample time diff: %.1lf, actual sample time diff: %.1lf", v27, v26);
        }
        VoiceProcessorV2::LogIOError((uint64_t)this, 23.009, (float)*((unsigned int *)this + 3114), 0.0, 0.0, "bad relative mic-ref TS");
      }
    }
    LODWORD(v21) = *((_DWORD *)this + 121);
    *((double *)this + 1560) = v558.mSampleTime + (double)*(unint64_t *)&v21;
  }
  v529 = a7;
  v539 = a6;
  v550 = v12;
  v31 = (char *)this + 2488;
  v32 = (*(uint64_t (**)(char *))(*((_QWORD *)this + 311) + 16))((char *)this + 2488);
  CADeprecated::CAMutex::Lock((VoiceProcessorV9 *)((char *)this + 2576));
  ++*((_DWORD *)this + 3114);
  CADeprecated::CAMutex::Unlock((VoiceProcessorV9 *)((char *)this + 2576));
  v535 = v32;
  v33 = *((_DWORD *)this + 121);
  NumberOfSourceFrames = v33;
  v557 = v33;
  v34 = v550[3409];
  if (v550[3409])
  {
    v550[385] = 1;
    if (a5->mNumberBuffers == *((_DWORD *)this + 89))
    {
      v35 = (VoiceProcessorV9 *)((char *)this + 328);
LABEL_56:
      if (!v548)
      {
        v36 = (AudioBufferList *)*((_QWORD *)this + 199);
        mNumberBuffers = v36->mNumberBuffers;
        v548 = v36;
        if (mNumberBuffers)
        {
          v38 = 0;
          p_mData = &v36->mBuffers[0].mData;
          do
          {
            bzero(*p_mData, *((unsigned int *)p_mData - 1));
            ++v38;
            p_mData += 2;
          }
          while (v38 < v548->mNumberBuffers);
          v34 = v550[3409];
        }
      }
      if (v34 && (VoiceProcessorV2::InjectionFilesReadSignal(this, 1, v539, v548), v550[3409]) || v550[3410])
        VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)this, 0x32u, v539, v548, &v558);
      v40 = v545;
      if (!v545)
      {
        v40 = (AudioBufferList *)*((_QWORD *)this + 200);
        if (v40->mNumberBuffers)
        {
          v41 = 0;
          v42 = &v40->mBuffers[0].mData;
          do
          {
            v43 = v40;
            bzero(*v42, *((unsigned int *)v42 - 1));
            v40 = v43;
            ++v41;
            v42 += 2;
          }
          while (v41 < v43->mNumberBuffers);
        }
      }
      v545 = v40;
      if (v550[3409] && (VoiceProcessorV2::InjectionFilesReadSignal(this, 10, v539, v545), v550[3409]) || v550[3410])
        VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)this, 0x53u, v539, v545, &v558);
      v44 = v546;
      if (!v546)
      {
        v44 = (AudioBufferList *)*((_QWORD *)this + 201);
        if (v44->mNumberBuffers)
        {
          v45 = 0;
          v46 = &v44->mBuffers[0].mData;
          do
          {
            v47 = v44;
            bzero(*v46, *((unsigned int *)v46 - 1));
            v44 = v47;
            ++v45;
            v46 += 2;
          }
          while (v45 < v47->mNumberBuffers);
        }
      }
      v546 = v44;
      if (v550[3409] && (VoiceProcessorV2::InjectionFilesReadSignal(this, 11, v539, v546), v550[3409]) || v550[3410])
        VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)this, 0x54u, v539, v546, &v558);
      v33 = *((_DWORD *)this + 121);
LABEL_82:
      if (v33 == (_DWORD)v539)
      {
        if (a5->mBuffers[0].mDataByteSize == *((_DWORD *)this + 88) * (_DWORD)v539)
        {
          v48 = v550[3331];
          v526 = (char *)this + 2488;
          if (!v48)
            goto LABEL_230;
          v550[3331] = 0;
          v49 = (double)(mach_absolute_time() - *((_QWORD *)this + 1980)) * 0.0000000416666667;
          VoiceProcessorV2::LogIOError((uint64_t)this, 23.002, (float)*((unsigned int *)this + 3114), (float)*((unsigned int *)this + 121), (float)v539, "processdownlinkaudio: <block size no longer mismatched>");
          if (v49 <= 1.0)
          {
            if (VPLogScope(void)::once != -1)
              dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
            v92 = CALog::LogObjIfEnabled(2, VPLogScope(void)::scope);
            if (v92)
            {
              v93 = v92;
              if (os_log_type_enabled(v92, OS_LOG_TYPE_DEFAULT))
              {
                LODWORD(buf.mSampleTime) = 136315650;
                *(_QWORD *)((char *)&buf.mSampleTime + 4) = "vpProcessDownlink_v9.cpp";
                WORD2(buf.mHostTime) = 1024;
                *(_DWORD *)((char *)&buf.mHostTime + 6) = 205;
                WORD1(buf.mRateScalar) = 2048;
                *(double *)((char *)&buf.mRateScalar + 4) = v49;
                _os_log_impl(&dword_1B5ED0000, v93, OS_LOG_TYPE_DEFAULT, "%25s:%-5d  >vp> CoreAudio: ***** VP BLOCK WARNING: BAD BLOCK CONFIG CORRECTED after %.6f seconds *****\n", (uint8_t *)&buf, 0x1Cu);
              }
            }
            v94 = (int *)*((_QWORD *)this + 1570);
            if (v94 && (v550[3409] || v550[3410]))
            {
              if (VPLogScope(void)::once != -1)
                dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
              CALegacyLog::log(v94, 2, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v9/vpProcessDownlink_v9.cpp", 205, "ProcessDownlinkAudio", "CoreAudio: ***** VP BLOCK WARNING: BAD BLOCK CONFIG CORRECTED after %.6f seconds *****\n", v49);
            }
            if (VPLogScope(void)::once != -1)
              dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
            v95 = CALog::LogObjIfEnabled(2, VPLogScope(void)::scope);
            if (v95)
            {
              v96 = v95;
              if (os_log_type_enabled(v95, OS_LOG_TYPE_DEFAULT))
              {
                v97 = *((_DWORD *)this + 121);
                LODWORD(buf.mSampleTime) = 136315906;
                *(_QWORD *)((char *)&buf.mSampleTime + 4) = "vpProcessDownlink_v9.cpp";
                WORD2(buf.mHostTime) = 1024;
                *(_DWORD *)((char *)&buf.mHostTime + 6) = 206;
                WORD1(buf.mRateScalar) = 1024;
                HIDWORD(buf.mRateScalar) = v539;
                LOWORD(buf.mWordClockTime) = 1024;
                *(_DWORD *)((char *)&buf.mWordClockTime + 2) = v97;
                _os_log_impl(&dword_1B5ED0000, v96, OS_LOG_TYPE_DEFAULT, "%25s:%-5d  >vp> processdownlinkaudio: <block size no longer mismatched between expected and actual> num frames received = %u. hwio buff size = %u\n", (uint8_t *)&buf, 0x1Eu);
              }
            }
            v56 = (int *)*((_QWORD *)this + 1570);
            if (v56 && (v550[3409] || v550[3410]))
            {
              if (VPLogScope(void)::once != -1)
                dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
              v57 = 206;
              v58 = 2;
              goto LABEL_229;
            }
          }
          else
          {
            if (VPLogScope(void)::once != -1)
              dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
            v50 = CALog::LogObjIfEnabled(1, VPLogScope(void)::scope);
            if (v50)
            {
              v51 = v50;
              if (os_log_type_enabled(v50, OS_LOG_TYPE_ERROR))
              {
                LODWORD(buf.mSampleTime) = 136315650;
                *(_QWORD *)((char *)&buf.mSampleTime + 4) = "vpProcessDownlink_v9.cpp";
                WORD2(buf.mHostTime) = 1024;
                *(_DWORD *)((char *)&buf.mHostTime + 6) = 200;
                WORD1(buf.mRateScalar) = 2048;
                *(double *)((char *)&buf.mRateScalar + 4) = v49;
                _os_log_impl(&dword_1B5ED0000, v51, OS_LOG_TYPE_ERROR, "%25s:%-5d  >vp> CoreAudio: ***** VP BLOCK SERIOUS ERROR: BAD BLOCK CONFIG CORRECTED after %.6f seconds *****\n", (uint8_t *)&buf, 0x1Cu);
              }
            }
            v52 = (int *)*((_QWORD *)this + 1570);
            if (v52 && (v550[3409] || v550[3410]))
            {
              if (VPLogScope(void)::once != -1)
                dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
              CALegacyLog::log(v52, 1, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v9/vpProcessDownlink_v9.cpp", 200, "ProcessDownlinkAudio", "CoreAudio: ***** VP BLOCK SERIOUS ERROR: BAD BLOCK CONFIG CORRECTED after %.6f seconds *****\n", v49);
            }
            if (VPLogScope(void)::once != -1)
              dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
            v53 = CALog::LogObjIfEnabled(1, VPLogScope(void)::scope);
            if (v53)
            {
              v54 = v53;
              if (os_log_type_enabled(v53, OS_LOG_TYPE_ERROR))
              {
                v55 = *((_DWORD *)this + 121);
                LODWORD(buf.mSampleTime) = 136315906;
                *(_QWORD *)((char *)&buf.mSampleTime + 4) = "vpProcessDownlink_v9.cpp";
                WORD2(buf.mHostTime) = 1024;
                *(_DWORD *)((char *)&buf.mHostTime + 6) = 201;
                WORD1(buf.mRateScalar) = 1024;
                HIDWORD(buf.mRateScalar) = v539;
                LOWORD(buf.mWordClockTime) = 1024;
                *(_DWORD *)((char *)&buf.mWordClockTime + 2) = v55;
                _os_log_impl(&dword_1B5ED0000, v54, OS_LOG_TYPE_ERROR, "%25s:%-5d  >vp> processdownlinkaudio: <block size no longer mismatched between expected and actual> num frames received = %u. hwio buff size = %u\n", (uint8_t *)&buf, 0x1Eu);
              }
            }
            v56 = (int *)*((_QWORD *)this + 1570);
            if (v56 && (v550[3409] || v550[3410]))
            {
              if (VPLogScope(void)::once != -1)
                dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
              v57 = 201;
              v58 = 1;
LABEL_229:
              CALegacyLog::log(v56, v58, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v9/vpProcessDownlink_v9.cpp", v57, "ProcessDownlinkAudio", "processdownlinkaudio: <block size no longer mismatched between expected and actual> num frames received = %u. hwio buff size = %u\n", v539, *((_DWORD *)this + 121));
            }
          }
LABEL_230:
          v98 = (VoiceProcessor::SampleRateConverter **)*((_QWORD *)this + 48);
          v99 = *((_DWORD *)this + 121);
          if (*((_QWORD *)this + 47))
          {
            if (v98)
            {
              NumberOfSourceFrames = VoiceProcessor::SampleRateConverter::GetNumberOfSourceFrames(*v98);
              v98 = (VoiceProcessor::SampleRateConverter **)*((_QWORD *)this + 47);
LABEL_237:
              v99 = VoiceProcessor::SampleRateConverter::GetNumberOfSourceFrames(*v98);
              goto LABEL_238;
            }
            v98 = (VoiceProcessor::SampleRateConverter **)*((_QWORD *)this + 47);
          }
          else if (!v98)
          {
LABEL_238:
            v100 = (unsigned int *)*((_QWORD *)this + 13);
            v101 = *v100;
            if ((int)v101 >= 1)
            {
              v102 = v99 * *((_DWORD *)this + 58);
              v103 = (int *)(v100 + 3);
              do
              {
                *v103 = v102;
                v103 += 4;
                --v101;
              }
              while (v101);
            }
            v555 = v99;
            v104 = (*(uint64_t (**)(void))(*((_QWORD *)this + 12) + 16))();
            v105 = v555;
            v557 = v555;
            v106 = (const AudioBufferList *)*((_QWORD *)this + 13);
            if (v550[3409]
              && (VoiceProcessorV2::InjectionFilesReadSignal(this, 0, v555, *((AudioBufferList **)this + 13)),
                  v106 = (const AudioBufferList *)*((_QWORD *)this + 13),
                  v550[3409])
              || v550[3410])
            {
              v104 = VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)this, 0x33u, v555, v106, &v558);
              v106 = (const AudioBufferList *)*((_QWORD *)this + 13);
            }
            v107 = *((_QWORD *)this + 1995);
            if (AudioIssueDetectorLibraryLoader(void)::once != -1)
              dispatch_once(&AudioIssueDetectorLibraryLoader(void)::once, &__block_literal_global_12440);
            if (AudioIssueDetectorLibraryLoader(void)::libSym)
              v104 = AudioIssueDetectorLibraryLoader(void)::libSym(v107, 51, 0, v106, v555, &v558);
            if (*((_BYTE *)this + 2082) || *((_DWORD *)this + 19) == 7 && *((float *)this + 3116) == 0.0)
            {
              vp::Audio_Buffer_List_Ref::Audio_Buffer_List_Ref(&buf, *((const AudioBufferList **)this + 13));
              v561.mSampleTime = buf.mSampleTime;
              *(_QWORD *)&buf.mSampleTime = vp::Audio_Buffer_List_Ref::begin((vp::Audio_Buffer_List_Ref *)&v561);
              buf.mHostTime = v108;
              *(_QWORD *)&v564.mSampleTime = vp::Audio_Buffer_List_Ref::end((vp::Audio_Buffer_List_Ref *)&v561);
              v564.mHostTime = v109;
              while (1)
              {
                v104 = vp::Audio_Buffer_Iterator::operator!=(&buf, &v564);
                if ((v104 & 1) == 0)
                  break;
                mSampleTime = buf.mSampleTime;
                frame_count = vp::Audio_Buffer_Ref::get_frame_count((vp::Audio_Buffer_Ref *)&buf);
                vp::fill(*(float ***)&mSampleTime, frame_count, 0.0);
                vp::Audio_Buffer_Iterator::operator++((uint64_t)&buf);
              }
            }
            v112 = *((_DWORD *)this + 55);
            if ((v112 & 0x20) != 0)
            {
              v115 = *((_DWORD *)this + 59);
              if ((v115 - 65) <= 0xFFFFFFBF)
              {
                if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
                {
                  LODWORD(buf.mSampleTime) = 136315394;
                  *(_QWORD *)((char *)&buf.mSampleTime + 4) = "vpProcessDownlink_v9.cpp";
                  WORD2(buf.mHostTime) = 1024;
                  *(_DWORD *)((char *)&buf.mHostTime + 6) = 276;
                  _os_log_impl(&dword_1B5ED0000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  STACK_ABL: invalid number of buffers", (uint8_t *)&buf, 0x12u);
                }
                exception = __cxa_allocate_exception(0x10uLL);
                *(_QWORD *)exception = &off_1E69EE218;
                exception[2] = -50;
              }
              MEMORY[0x1E0C80A78](v104);
              v114 = (int *)((char *)&v526 - v116);
              bzero((char *)&v526 - v116, v117);
            }
            else
            {
              MEMORY[0x1E0C80A78](v104);
              v114 = (int *)&v524;
              v524 = 0;
              v525 = 0uLL;
              v115 = 1;
            }
            v118 = 0;
            *v114 = v115;
            v119 = 2;
            if ((v112 & 0x20) != 0)
              goto LABEL_261;
LABEL_260:
            for (i = 1; v118 < i; i = *((unsigned int *)this + 59))
            {
              *(_OWORD *)&v114[v119] = *(_OWORD *)(*((_QWORD *)this + 13) + v119 * 4);
              ++v118;
              v119 += 4;
              if ((v112 & 0x20) == 0)
                goto LABEL_260;
LABEL_261:
              ;
            }
            v121 = *((_DWORD *)this + 65);
            if ((v121 & 0x20) != 0)
            {
              v123 = *((_DWORD *)this + 69);
              if ((v123 - 65) <= 0xFFFFFFBF)
              {
                if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
                {
                  LODWORD(buf.mSampleTime) = 136315394;
                  *(_QWORD *)((char *)&buf.mSampleTime + 4) = "vpProcessDownlink_v9.cpp";
                  WORD2(buf.mHostTime) = 1024;
                  *(_DWORD *)((char *)&buf.mHostTime + 6) = 282;
                  _os_log_impl(&dword_1B5ED0000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  STACK_ABL: invalid number of buffers", (uint8_t *)&buf, 0x12u);
                }
                v513 = __cxa_allocate_exception(0x10uLL);
                *(_QWORD *)v513 = &off_1E69EE218;
                v513[2] = -50;
              }
              MEMORY[0x1E0C80A78](v113);
              v122 = (AudioBufferList *)((char *)&v526 - v124);
              bzero((char *)&v526 - v124, v125);
            }
            else
            {
              MEMORY[0x1E0C80A78](v113);
              v122 = (AudioBufferList *)&v524;
              v524 = 0;
              v525 = 0uLL;
              v123 = 1;
            }
            v126 = 0;
            v127 = 0;
            v122->mNumberBuffers = v123;
            if ((v121 & 0x20) != 0)
              goto LABEL_271;
LABEL_270:
            for (j = 1; v127 < j; j = *((unsigned int *)this + 69))
            {
              v129 = (char *)v122 + v126;
              *((_QWORD *)v129 + 2) = *(_QWORD *)(*((_QWORD *)this + 22) + v126 + 16);
              *((_DWORD *)v129 + 2) = 1;
              *((_DWORD *)v129 + 3) = 4 * v105;
              ++v127;
              v126 += 16;
              if ((v121 & 0x20) == 0)
                goto LABEL_270;
LABEL_271:
              ;
            }
            if ((*((_BYTE *)this + 8832) & 1) != 0 && (*((_BYTE *)this + 8840) & 1) != 0 && *((_QWORD *)this + 437))
            {
              v130 = (unint64_t *)((char *)this + 0x4000);
              v131 = atomic_load((unint64_t *)this + 2048);
              if (v131)
              {
                *(_QWORD *)&v561.mSampleTime = this;
                *(_QWORD *)&buf.mSampleTime = caulk::function_ref<void ()(unsigned char const*,unsigned long)>::functor_invoker<VoiceProcessorV9::ProcessDownlinkAudio(AudioBufferList *,AudioBufferList *,AudioBufferList *,AudioBufferList *,unsigned int,AudioTimeStamp const&)::$_0>;
                buf.mHostTime = (UInt64)&v561;
                *(_QWORD *)&v564.mSampleTime = &buf;
                caulk::concurrent::lf_read_synchronized_write<std::optional<std::vector<unsigned char>>>::access<vp::utility::Lock_Free_SRSW_Storage<unsigned char>::load(caulk::function_ref<void ()(unsigned char const*,unsigned long)>)::{lambda(std::optional<std::vector<unsigned char>> const&)#1}>((VoiceProcessorV9 *)((char *)this + 16304), &v564);
                do
                  v132 = __ldaxr(v130);
                while (__stlxr(v132 - v131, v130));
              }
              v133 = *((_DWORD *)this + 576);
              if (v133 != *((_DWORD *)this + 578))
                AudioUnitSetParameter(*((AudioUnit *)this + 437), 0x75696F72u, 0, 0, (float)v133, 0);
              buf = v558;
              LODWORD(v560.mSampleTime) = 512;
              *(_QWORD *)&v564.mSampleTime = v114;
              *(_QWORD *)&v561.mSampleTime = v122;
              LODWORD(v105) = v557;
              AudioUnitProcessMultiple(*((AudioUnit *)this + 437), (AudioUnitRenderActionFlags *)&v560, &buf, v557, 1u, (const AudioBufferList **)&v564, 1u, (AudioBufferList **)&v561);
            }
            else
            {
              *(_QWORD *)&v563.mNumberBuffers = v122;
              *(_QWORD *)&buf.mSampleTime = vp::Audio_Buffer_List_Ref::begin((vp::Audio_Buffer_List_Ref *)&v563);
              buf.mHostTime = v164;
              *(_QWORD *)&v564.mSampleTime = vp::Audio_Buffer_List_Ref::end((vp::Audio_Buffer_List_Ref *)&v563);
              v564.mHostTime = v165;
              while (vp::Audio_Buffer_Iterator::operator!=(&buf, &v564))
              {
                vp::fill(*(float ***)&buf.mSampleTime, v105, 0.0);
                *(_QWORD *)&v562.mNumberBuffers = v114;
                *(_QWORD *)&v561.mSampleTime = vp::Audio_Buffer_List_Ref::begin((vp::Audio_Buffer_List_Ref *)&v562);
                v561.mHostTime = v166;
                *(_QWORD *)&v560.mSampleTime = vp::Audio_Buffer_List_Ref::end((vp::Audio_Buffer_List_Ref *)&v562);
                v560.mHostTime = v167;
                while (vp::Audio_Buffer_Iterator::operator!=(&v561, &v560))
                {
                  data = (const float *)vp::Audio_Buffer_Ref::get_data((vp::Audio_Buffer_Ref *)&buf);
                  v169 = (const float *)vp::Audio_Buffer_Ref::get_data((vp::Audio_Buffer_Ref *)&v561);
                  v170 = (float *)vp::Audio_Buffer_Ref::get_data((vp::Audio_Buffer_Ref *)&buf);
                  vDSP_vadd(data, 1, v169, 1, v170, 1, v105);
                  vp::Audio_Buffer_Iterator::operator++((uint64_t)&v561);
                }
                vp::Audio_Buffer_Iterator::operator++((uint64_t)&buf);
              }
            }
            if ((*((_BYTE *)this + 8832) & 2) != 0 && (*((_BYTE *)this + 8840) & 2) != 0)
            {
              v134 = *((_QWORD *)this + 438);
              if (v134)
              {
                buf = v558;
                LODWORD(v561.mSampleTime) = 512;
                MEMORY[0x1E0C80A78](v134);
                v525 = 0uLL;
                v524 = 0;
                v525 = *(_OWORD *)(*((_QWORD *)this + 22) + 8);
                LODWORD(v524) = 1;
                *(_QWORD *)&v564.mSampleTime = &v524;
                AudioUnitProcessMultiple(v135, (AudioUnitRenderActionFlags *)&v561, &buf, v105, 1u, (const AudioBufferList **)&v564, 0, (AudioBufferList **)&v560);
              }
            }
            v136 = (CA::AudioSampleRateConverter **)*((_QWORD *)this + 47);
            if (v136)
            {
              VoiceProcessor::SampleRateConverter::Convert(v136, &v557, &NumberOfSourceFrames, v122, *((const AudioBufferList **)this + 23));
              LODWORD(v105) = NumberOfSourceFrames;
              v557 = NumberOfSourceFrames;
              v122 = (AudioBufferList *)*((_QWORD *)this + 23);
            }
            v549 = a5;
            v138 = VoiceProcessorV2::DetermineNoiseBasedVolume(this);
            v139 = *((_DWORD *)this + 130);
            buf = v558;
            if (v139)
            {
              v140 = 0;
              v141 = 0;
              v544 = (unsigned int *)((char *)this + 17552);
              v142 = 4 * (v105 / v139);
              LODWORD(v551) = v105 / v139;
              v143 = (double)(v105 / v139);
              do
              {
                v547 = v140;
                if ((*((_BYTE *)this + 300) & 0x20) != 0)
                {
                  v145 = *((_DWORD *)this + 79);
                  if (v145 - 65 <= 0xFFFFFFBF)
                  {
                    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
                    {
                      LODWORD(v564.mSampleTime) = 136315394;
                      *(_QWORD *)((char *)&v564.mSampleTime + 4) = "vpProcessDownlink_v9.cpp";
                      WORD2(v564.mHostTime) = 1024;
                      *(_DWORD *)((char *)&v564.mHostTime + 6) = 381;
                      _os_log_impl(&dword_1B5ED0000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  STACK_ABL: invalid number of buffers", (uint8_t *)&v564, 0x12u);
                    }
                    v510 = __cxa_allocate_exception(0x10uLL);
                    *(_QWORD *)v510 = &off_1E69EE218;
                    v510[2] = -50;
                  }
                  MEMORY[0x1E0C80A78](v137);
                  v144 = (AudioBufferList *)((char *)&v526 - v146);
                  bzero((char *)&v526 - v146, v147);
                }
                else
                {
                  MEMORY[0x1E0C80A78](v137);
                  v144 = (AudioBufferList *)&v524;
                  v524 = 0;
                  v525 = 0uLL;
                  v145 = 1;
                }
                v148 = 0;
                v144->mNumberBuffers = v145;
                v149 = v145;
                do
                {
                  v150 = (char *)v144 + v148 * 16;
                  *((_DWORD *)v150 + 2) = 1;
                  *((_DWORD *)v150 + 3) = v142;
                  if (v122)
                    v151 = (uint64_t)v122->mBuffers[v148].mData + 4 * v141;
                  else
                    v151 = 0;
                  *((_QWORD *)v150 + 2) = v151;
                  ++v148;
                  --v149;
                }
                while (v149);
                v152 = *((_QWORD *)this + 1104);
                if ((v152 & 8) != 0 && (*((_BYTE *)this + 8840) & 8) != 0)
                {
                  v153 = (OpaqueAudioComponentInstance *)*((_QWORD *)this + 440);
                  if (v153)
                  {
                    v564 = buf;
                    LODWORD(v561.mSampleTime) = 512;
                    AudioUnitProcess(v153, (AudioUnitRenderActionFlags *)&v561, &v564, (UInt32)v551, v144);
                    if (v550[3409] || v550[3410])
                      VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)this, 0x55u, v551, v144, &buf);
                    v152 = *((_QWORD *)this + 1104);
                  }
                }
                if ((v152 & 0x10) != 0 && (*((_BYTE *)this + 8840) & 0x10) != 0)
                {
                  v154 = (OpaqueAudioComponentInstance *)*((_QWORD *)this + 441);
                  if (v154)
                  {
                    v564 = buf;
                    LODWORD(v561.mSampleTime) = 512;
                    AudioUnitProcess(v154, (AudioUnitRenderActionFlags *)&v561, &v564, (UInt32)v551, v144);
                    if (v550[3409] || v550[3410])
                      VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)this, 0x74u, v551, v144, &buf);
                    v152 = *((_QWORD *)this + 1104);
                  }
                }
                if ((v152 & 0x20) != 0 && (*((_BYTE *)this + 8840) & 0x20) != 0)
                {
                  v155 = (OpaqueAudioComponentInstance *)*((_QWORD *)this + 442);
                  if (v155)
                  {
                    v564 = buf;
                    LODWORD(v561.mSampleTime) = 512;
                    AudioUnitProcess(v155, (AudioUnitRenderActionFlags *)&v561, &v564, (UInt32)v551, v144);
                    if (v550[3409] || v550[3410])
                      VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)this, 0x56u, v551, v144, &buf);
                    v152 = *((_QWORD *)this + 1104);
                  }
                }
                v156 = *(_OWORD *)&buf.mRateScalar;
                v157 = v544;
                *(_OWORD *)v544 = *(_OWORD *)&buf.mSampleTime;
                *((_OWORD *)v157 + 1) = v156;
                v158 = *(_OWORD *)&buf.mSMPTETime.mHours;
                *((_OWORD *)v157 + 2) = *(_OWORD *)&buf.mSMPTETime.mSubframes;
                *((_OWORD *)v157 + 3) = v158;
                if ((~(_BYTE)v152 & 0xC0) != 0
                  || ((*((_BYTE *)this + 8840) & 0x40) == 0 || !*((_QWORD *)this + 443)
                    ? ((*((_BYTE *)this + 8840) & 0x80) != 0
                     ? (v159 = *((_QWORD *)this + 444) != 0)
                     : (v159 = 0))
                    : (v159 = 1),
                      !*((_BYTE *)this + 480)
                    ? (v137 = (*(uint64_t (**)(VoiceProcessorV9 *, AudioBufferList *, AudioBufferList *, _BOOL8, _QWORD))(*(_QWORD *)this + 768))(this, v144, v144, v159, v551)): (*(_QWORD *)&v564.mSampleTime = v144, *(_QWORD *)&v561.mSampleTime = v144, v137 = BlockProcessor::Process(*((BlockProcessor **)this + 2193), v551, (const AudioBufferList **)&v564, (AudioBufferList **)&v561)), !v159))
                {
                  v137 = (*(uint64_t (**)(VoiceProcessorV9 *, AudioBufferList *, AudioBufferList *, _QWORD, _QWORD))(*(_QWORD *)this + 768))(this, v144, v144, 0, v551);
                }
                v160 = *((_QWORD *)this + 1104);
                if ((v160 & 0x100) != 0 && (*((_BYTE *)this + 8841) & 1) != 0)
                {
                  v137 = *((_QWORD *)this + 445);
                  if (v137)
                  {
                    v564 = buf;
                    AudioUnitSetParameter((AudioUnit)v137, 5u, 0, 0, v138, 0);
                    LODWORD(v561.mSampleTime) = 512;
                    v137 = AudioUnitProcess(*((AudioUnit *)this + 445), (AudioUnitRenderActionFlags *)&v561, &v564, (UInt32)v551, v144);
                    if (v550[3409] || v550[3410])
                      v137 = VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)this, 0x36u, v551, v144, &v564);
                    v160 = *((_QWORD *)this + 1104);
                  }
                }
                if ((v160 & 0x200) != 0 && (*((_BYTE *)this + 8841) & 2) != 0)
                {
                  v137 = *((_QWORD *)this + 446);
                  if (v137)
                  {
                    v564 = buf;
                    LODWORD(v561.mSampleTime) = 512;
                    v137 = AudioUnitProcess((AudioUnit)v137, (AudioUnitRenderActionFlags *)&v561, &v564, (UInt32)v551, v144);
                    if (v550[3409] || v550[3410])
                      v137 = VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)this, 0x57u, v551, v144, &v564);
                    v160 = *((_QWORD *)this + 1104);
                  }
                }
                if ((v160 & 0x4000) != 0 && (*((_BYTE *)this + 8841) & 0x40) != 0)
                {
                  if (*((_QWORD *)this + 451))
                  {
                    v137 = (*(uint64_t (**)(VoiceProcessorV9 *, AudioBufferList *, _QWORD, AudioTimeStamp *))(*(_QWORD *)this + 664))(this, v144, v551, &buf);
                    if (v550[3409] || v550[3410])
                      v137 = VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)this, 0x7Bu, v551, v144, &buf);
                  }
                }
                v141 += v551;
                buf.mSampleTime = buf.mSampleTime + v143;
                v140 = v547 + 1;
              }
              while (v547 + 1 < *((_DWORD *)this + 130));
            }
            v161 = *((_DWORD *)this + 75);
            if ((v161 & 0x20) != 0)
            {
              v163 = *((_DWORD *)this + 79);
              a5 = v549;
              if ((v163 - 65) <= 0xFFFFFFBF)
              {
                if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
                {
                  LODWORD(v564.mSampleTime) = 136315394;
                  *(_QWORD *)((char *)&v564.mSampleTime + 4) = "vpProcessDownlink_v9.cpp";
                  WORD2(v564.mHostTime) = 1024;
                  *(_DWORD *)((char *)&v564.mHostTime + 6) = 465;
                  _os_log_impl(&dword_1B5ED0000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  STACK_ABL: invalid number of buffers", (uint8_t *)&v564, 0x12u);
                }
                v514 = __cxa_allocate_exception(0x10uLL);
                *(_QWORD *)v514 = &off_1E69EE218;
                v514[2] = -50;
              }
              MEMORY[0x1E0C80A78](v137);
              v162 = (int *)((char *)&v526 - v171);
              bzero((char *)&v526 - v171, v172);
            }
            else
            {
              MEMORY[0x1E0C80A78](v137);
              v162 = (int *)&v524;
              v524 = 0;
              v525 = 0uLL;
              v163 = 1;
              a5 = v549;
            }
            *v162 = v163;
            v174 = *((_QWORD *)this + 47);
            v173 = *((_QWORD *)this + 48);
            if (v173)
            {
              if (v174)
              {
                NumberOfSourceFrames = *((_DWORD *)this + 121);
                v173 = VoiceProcessor::SampleRateConverter::Convert((CA::AudioSampleRateConverter **)v173, &v557, &NumberOfSourceFrames, v122, *((const AudioBufferList **)this + 24));
                v175 = 0;
                v176 = *((_DWORD *)this + 75);
                v177 = 2;
                v179 = v545;
                v178 = v546;
                v180 = v548;
                if ((v176 & 0x20) != 0)
                  goto LABEL_369;
LABEL_368:
                for (k = 1; v175 < k; k = *((unsigned int *)this + 79))
                {
                  *(_OWORD *)&v162[v177] = *(_OWORD *)(*((_QWORD *)this + 24) + v177 * 4);
                  ++v175;
                  v177 += 4;
                  if ((v176 & 0x20) == 0)
                    goto LABEL_368;
LABEL_369:
                  ;
                }
              }
              else
              {
                v173 = VoiceProcessor::SampleRateConverter::Convert((CA::AudioSampleRateConverter **)v173, &v557, &NumberOfSourceFrames, v122, *((const AudioBufferList **)this + 24));
                v187 = 0;
                v188 = *((_DWORD *)this + 75);
                v189 = 2;
                v179 = v545;
                v178 = v546;
                v180 = v548;
                if ((v188 & 0x20) != 0)
                  goto LABEL_382;
LABEL_381:
                for (m = 1; v187 < m; m = *((unsigned int *)this + 79))
                {
                  *(_OWORD *)&v162[v189] = *(_OWORD *)(*((_QWORD *)this + 24) + v189 * 4);
                  ++v187;
                  v189 += 4;
                  if ((v188 & 0x20) == 0)
                    goto LABEL_381;
LABEL_382:
                  ;
                }
              }
              v557 = NumberOfSourceFrames;
            }
            else if (v174)
            {
              v182 = 0;
              mBuffers = v122->mBuffers;
              v184 = v162 + 2;
              v179 = v545;
              v178 = v546;
              v180 = v548;
              if ((v161 & 0x20) != 0)
                goto LABEL_376;
LABEL_375:
              for (n = 1; v182 < n; n = *((unsigned int *)this + 79))
              {
                v186 = (__int128)*mBuffers++;
                *v184++ = v186;
                ++v182;
                if ((v161 & 0x20) == 0)
                  goto LABEL_375;
LABEL_376:
                ;
              }
            }
            else
            {
              v396 = v122->mBuffers;
              v397 = v162 + 2;
              v179 = v545;
              v178 = v546;
              v180 = v548;
              if ((v161 & 0x20) != 0)
                goto LABEL_704;
LABEL_703:
              for (ii = 1; v174 < ii; ii = *((unsigned int *)this + 79))
              {
                v399 = (__int128)*v396++;
                *v397++ = v399;
                ++v174;
                if ((v161 & 0x20) == 0)
                  goto LABEL_703;
LABEL_704:
                ;
              }
            }
            v564 = v558;
            if (*((_DWORD *)this + 130))
            {
              v191 = 0;
              v547 = 0;
              v527 = (VoiceProcessorV9 *)((char *)this + 2744);
              v533 = &v179->mBuffers[0].mData;
              v534 = (uint64_t *)(v162 + 4);
              v531 = &v180->mBuffers[0].mData;
              v532 = &v178->mBuffers[0].mData;
              v530 = &a5->mBuffers[0].mData;
              v192 = 1;
              v193 = -8589940800.0;
              do
              {
                if ((*((_BYTE *)this + 300) & 0x20) != 0)
                {
                  v197 = *((_DWORD *)this + 79);
                  if ((v197 - 65) <= 0xFFFFFFBF)
                  {
                    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
                    {
                      LODWORD(v561.mSampleTime) = 136315394;
                      *(_QWORD *)((char *)&v561.mSampleTime + 4) = "vpProcessDownlink_v9.cpp";
                      WORD2(v561.mHostTime) = 1024;
                      *(_DWORD *)((char *)&v561.mHostTime + 6) = 513;
                      _os_log_impl(&dword_1B5ED0000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  STACK_ABL: invalid number of buffers", (uint8_t *)&v561, 0x12u);
                    }
                    v511 = __cxa_allocate_exception(0x10uLL);
                    *(_QWORD *)v511 = &off_1E69EE218;
                    v511[2] = -50;
                  }
                  MEMORY[0x1E0C80A78](v173);
                  v196 = (int *)((char *)&v526 - v198);
                  bzero((char *)&v526 - v198, v199);
                  v195 = v545;
                }
                else
                {
                  MEMORY[0x1E0C80A78](v173);
                  v196 = (int *)&v524;
                  v524 = 0;
                  v525 = 0uLL;
                  v197 = 1;
                }
                *v196 = v197;
                if (v195)
                {
                  v200 = v195->mNumberBuffers;
                  if (v195->mNumberBuffers - 65 <= 0xFFFFFFBF)
                  {
                    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
                    {
                      LODWORD(v561.mSampleTime) = 136315394;
                      *(_QWORD *)((char *)&v561.mSampleTime + 4) = "vpProcessDownlink_v9.cpp";
                      WORD2(v561.mHostTime) = 1024;
                      *(_DWORD *)((char *)&v561.mHostTime + 6) = 515;
                      _os_log_impl(&dword_1B5ED0000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  STACK_ABL: invalid number of buffers", (uint8_t *)&v561, 0x12u);
                    }
                    v507 = __cxa_allocate_exception(0x10uLL);
                    *(_QWORD *)v507 = &off_1E69EE218;
                    v507[2] = -50;
                  }
                }
                else
                {
                  v200 = 1;
                }
                MEMORY[0x1E0C80A78](v194);
                v202 = (int *)((char *)&v526 - v201);
                bzero((char *)&v526 - v201, v203);
                v543 = v202;
                *v202 = v200;
                if (v546)
                {
                  v205 = v546->mNumberBuffers;
                  if (v546->mNumberBuffers - 65 <= 0xFFFFFFBF)
                  {
                    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
                    {
                      LODWORD(v561.mSampleTime) = 136315394;
                      *(_QWORD *)((char *)&v561.mSampleTime + 4) = "vpProcessDownlink_v9.cpp";
                      WORD2(v561.mHostTime) = 1024;
                      *(_DWORD *)((char *)&v561.mHostTime + 6) = 517;
                      _os_log_impl(&dword_1B5ED0000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  STACK_ABL: invalid number of buffers", (uint8_t *)&v561, 0x12u);
                    }
                    v503 = __cxa_allocate_exception(0x10uLL);
                    *(_QWORD *)v503 = &off_1E69EE218;
                    v503[2] = -50;
                  }
                }
                else
                {
                  v205 = 1;
                }
                v544 = (unsigned int *)v196;
                MEMORY[0x1E0C80A78](v204);
                v207 = (UInt32 *)((char *)&v526 - v206);
                bzero((char *)&v526 - v206, v208);
                v542 = v207;
                *v207 = v205;
                v536 = v191;
                if (v548)
                {
                  v210 = v548->mNumberBuffers;
                  if (v548->mNumberBuffers - 65 <= 0xFFFFFFBF)
                  {
                    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
                    {
                      LODWORD(v561.mSampleTime) = 136315394;
                      *(_QWORD *)((char *)&v561.mSampleTime + 4) = "vpProcessDownlink_v9.cpp";
                      WORD2(v561.mHostTime) = 1024;
                      *(_DWORD *)((char *)&v561.mHostTime + 6) = 519;
                      _os_log_impl(&dword_1B5ED0000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  STACK_ABL: invalid number of buffers", (uint8_t *)&v561, 0x12u);
                    }
                    v505 = __cxa_allocate_exception(0x10uLL);
                    *(_QWORD *)v505 = &off_1E69EE218;
                    v505[2] = -50;
                  }
                }
                else
                {
                  v210 = 1;
                }
                MEMORY[0x1E0C80A78](v209);
                v212 = (UInt32 *)((char *)&v526 - v211);
                bzero((char *)&v526 - v211, v213);
                *v212 = v210;
                v215 = (_DWORD *)*((_QWORD *)this + 203);
                if (*((_BYTE *)this + 2244))
                {
                  if (!v215)
                    goto LABEL_414;
                  if (!*v215)
                    goto LABEL_412;
                  v216 = 0;
                  v217 = (void **)(v215 + 4);
                  do
                  {
                    bzero(*v217, *((unsigned int *)v217 - 1));
                    ++v216;
                    v217 += 2;
                  }
                  while (v216 < *v215);
                  v215 = (_DWORD *)*((_QWORD *)this + 203);
                }
                if (v215)
                {
LABEL_412:
                  v218 = *v215;
                  if ((*v215 - 65) <= 0xFFFFFFBF)
                  {
                    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
                    {
                      LODWORD(v561.mSampleTime) = 136315394;
                      *(_QWORD *)((char *)&v561.mSampleTime + 4) = "vpProcessDownlink_v9.cpp";
                      WORD2(v561.mHostTime) = 1024;
                      *(_DWORD *)((char *)&v561.mHostTime + 6) = 525;
                      _os_log_impl(&dword_1B5ED0000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  STACK_ABL: invalid number of buffers", (uint8_t *)&v561, 0x12u);
                    }
                    v509 = __cxa_allocate_exception(0x10uLL);
                    *(_QWORD *)v509 = &off_1E69EE218;
                    v509[2] = -50;
                  }
                  goto LABEL_415;
                }
LABEL_414:
                v218 = 1;
LABEL_415:
                MEMORY[0x1E0C80A78](v214);
                v220 = (UInt32 *)((char *)&v526 - v219);
                bzero((char *)&v526 - v219, v221);
                v541 = v220;
                *v220 = v218;
                v223 = a5->mNumberBuffers;
                if ((v223 - 65) <= 0xFFFFFFBF)
                {
                  if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
                  {
                    LODWORD(v561.mSampleTime) = 136315394;
                    *(_QWORD *)((char *)&v561.mSampleTime + 4) = "vpProcessDownlink_v9.cpp";
                    WORD2(v561.mHostTime) = 1024;
                    *(_DWORD *)((char *)&v561.mHostTime + 6) = 527;
                    _os_log_impl(&dword_1B5ED0000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  STACK_ABL: invalid number of buffers", (uint8_t *)&v561, 0x12u);
                  }
                  v500 = __cxa_allocate_exception(0x10uLL);
                  *(_QWORD *)v500 = &off_1E69EE218;
                  v500[2] = -50;
                }
                MEMORY[0x1E0C80A78](v222);
                v225 = (int *)((char *)&v526 - v224);
                bzero((char *)&v526 - v224, v226);
                *v225 = v223;
                v227 = *v544;
                if ((_DWORD)v227)
                {
                  v228 = 4 * *((_DWORD *)this + 129);
                  v229 = v547;
                  v230 = v544 + 4;
                  v231 = v534;
                  do
                  {
                    *((_DWORD *)v230 - 2) = 1;
                    *((_DWORD *)v230 - 1) = v228;
                    v232 = *v231;
                    v231 += 2;
                    *v230 = v232 + 4 * v229;
                    v230 += 2;
                    --v227;
                  }
                  while (v227);
                }
                v233 = *v543;
                v235 = v545;
                v234 = v546;
                v236 = v548;
                if ((_DWORD)v233)
                {
                  v237 = 4 * *((_DWORD *)this + 129);
                  v238 = v547;
                  v239 = (uint64_t *)(v543 + 4);
                  v240 = v533;
                  do
                  {
                    *((_DWORD *)v239 - 2) = 1;
                    *((_DWORD *)v239 - 1) = v237;
                    if (v235)
                      v241 = (uint64_t)*v240 + 4 * v238;
                    else
                      v241 = 0;
                    *v239 = v241;
                    v239 += 2;
                    v240 += 2;
                    --v233;
                  }
                  while (v233);
                }
                v242 = *v542;
                if ((_DWORD)v242)
                {
                  v243 = 4 * *((_DWORD *)this + 129);
                  v244 = v547;
                  v245 = (uint64_t *)(v542 + 4);
                  v246 = v532;
                  do
                  {
                    *((_DWORD *)v245 - 2) = 1;
                    *((_DWORD *)v245 - 1) = v243;
                    if (v234)
                      v247 = (uint64_t)*v246 + 4 * v244;
                    else
                      v247 = 0;
                    *v245 = v247;
                    v245 += 2;
                    v246 += 2;
                    --v242;
                  }
                  while (v242);
                }
                v248 = *v212;
                if ((_DWORD)v248)
                {
                  v249 = 4 * *((_DWORD *)this + 129);
                  v250 = v547;
                  v251 = (uint64_t *)(v212 + 4);
                  v252 = v531;
                  do
                  {
                    *((_DWORD *)v251 - 2) = 1;
                    *((_DWORD *)v251 - 1) = v249;
                    if (v236)
                      v253 = (uint64_t)*v252 + 4 * v250;
                    else
                      v253 = 0;
                    *v251 = v253;
                    v251 += 2;
                    v252 += 2;
                    --v248;
                  }
                  while (v248);
                }
                if ((_DWORD)v223)
                {
                  v254 = 4 * *((_DWORD *)this + 129);
                  v255 = v547;
                  v256 = (uint64_t *)(v225 + 4);
                  v257 = v530;
                  do
                  {
                    *((_DWORD *)v256 - 2) = 1;
                    *((_DWORD *)v256 - 1) = v254;
                    if (a5)
                      v258 = (uint64_t)*v257 + 4 * v255;
                    else
                      v258 = 0;
                    *v256 = v258;
                    v256 += 2;
                    v257 += 2;
                    --v223;
                  }
                  while (v223);
                }
                if (v218)
                {
                  v259 = 4 * *((_DWORD *)this + 129);
                  v260 = v547;
                  v261 = v218;
                  v262 = v541 + 4;
                  v263 = v215 + 4;
                  do
                  {
                    *(v262 - 2) = 1;
                    *(v262 - 1) = v259;
                    if (v215)
                      v264 = *v263 + 4 * v260;
                    else
                      v264 = 0;
                    *(_QWORD *)v262 = v264;
                    v262 += 4;
                    v263 += 2;
                    --v261;
                  }
                  while (v261);
                }
                if (v236 && *((_BYTE *)this + 2244))
                {
                  CopyAllBuffersABL(v541, v548);
                  v235 = v545;
                }
                if (v235)
                  v265 = (AudioBufferList *)v543;
                else
                  v265 = 0;
                MonoABL = GetMonoABL(v265, &v563, *((unsigned int *)this + 129));
                if (v546)
                  v267 = (AudioBufferList *)v542;
                else
                  v267 = 0;
                v268 = GetMonoABL(v267, &v562, *((unsigned int *)this + 129));
                if (v548)
                  v269 = (AudioBufferList *)v212;
                else
                  v269 = 0;
                v270 = GetMonoABL(v269, &v554, *((unsigned int *)this + 129));
                v271 = 0;
                *(_QWORD *)&v561.mSampleTime = 10;
                v561.mHostTime = (UInt64)v544;
                *(_QWORD *)&v561.mRateScalar = 11;
                v540 = v270;
                v561.mWordClockTime = (UInt64)v270;
                *(_QWORD *)&v561.mSMPTETime.mSubframes = 12;
                v537 = *(double *)&v268;
                v538 = *(double *)&MonoABL;
                *(_QWORD *)&v561.mSMPTETime.mType = MonoABL;
                *(_QWORD *)&v561.mSMPTETime.mHours = 13;
                *(_QWORD *)&v561.mFlags = v268;
                do
                {
                  v272 = (unsigned int *)&v561 + 4 * v271;
                  v273 = *v272;
                  v274 = (AudioBufferList *)*((_QWORD *)v272 + 1);
                  if (!v274)
                  {
                    v274 = (AudioBufferList *)*((_QWORD *)this + 202);
                    if (v274->mNumberBuffers)
                    {
                      v275 = 0;
                      v276 = &v274->mBuffers[0].mData;
                      do
                      {
                        bzero(*v276, *((unsigned int *)v276 - 1));
                        ++v275;
                        v276 += 2;
                      }
                      while (v275 < v274->mNumberBuffers);
                      v274 = (AudioBufferList *)*((_QWORD *)this + 202);
                      a5 = v549;
                    }
                  }
                  v277 = VoiceProcessorV2::VPUseAUInProcess(this, v273, 0);
                  if (v274)
                    v278 = v277;
                  else
                    v278 = 0;
                  if (v278)
                  {
                    v560 = v564;
                    LODWORD(v559[0]) = 512;
                    AudioUnitProcess(*((AudioUnit *)this + v273 + 437), (AudioUnitRenderActionFlags *)v559, &v560, *((_DWORD *)this + 129), v274);
                  }
                  ++v271;
                }
                while (v271 != 4);
                v279 = *((_QWORD *)this + 1104);
                if ((v279 & 0x40000000) == 0)
                  goto LABEL_475;
                v280 = *((_QWORD *)this + 1105);
                if ((v280 & 0x40000000) == 0)
                  goto LABEL_475;
                v16 = 0;
                if (!*((_QWORD *)this + 467) || (v279 & v280 & 0x80000000) == 0)
                  goto LABEL_476;
                if (*((_QWORD *)this + 468) && (v341 = (uint64_t *)v527, vp::Audio_Buffer::get_audio_buffer_list(v527)))
                {
                  vp::Audio_Buffer::prepare(v341, *((_DWORD *)this + 129));
                  audio_buffer_list = (_DWORD *)vp::Audio_Buffer::get_audio_buffer_list((vp::Audio_Buffer *)v341);
                  if (*audio_buffer_list)
                  {
                    v343 = audio_buffer_list;
                    v344 = 0;
                    v345 = (void **)(audio_buffer_list + 4);
                    do
                    {
                      bzero(*v345, *((unsigned int *)v345 - 1));
                      ++v344;
                      v345 += 2;
                    }
                    while (v344 < *v343);
                  }
                  v16 = (AudioBufferList *)vp::Audio_Buffer::get_audio_buffer_list(v527);
                  LODWORD(v560.mSampleTime) = 512;
                  v561 = v564;
                  AudioUnitProcess(*((AudioUnit *)this + 467), (AudioUnitRenderActionFlags *)&v560, &v561, *((_DWORD *)this + 129), v16);
                  v346 = *((_DWORD *)this + 129);
                  if (v550[3409] || v550[3410])
                  {
                    VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)this, 0x3Du, *((unsigned int *)this + 129), v16, &v564);
                    v346 = *((_DWORD *)this + 129);
                  }
                  v561 = v564;
                  LODWORD(v560.mSampleTime) = 512;
                  AudioUnitProcess(*((AudioUnit *)this + 468), (AudioUnitRenderActionFlags *)&v560, &v561, v346, v16);
                  if (v550[3409] || v550[3410])
                  {
                    VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)this, 0x3Eu, *((unsigned int *)this + 129), v16, &v561);
                    if (v550[3409] || v550[3410])
                      VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)this, 0x3Fu, *((unsigned int *)this + 129), v16, &v561);
                  }
                }
                else
                {
LABEL_475:
                  v16 = 0;
                }
LABEL_476:
                if (*((_BYTE *)this + 2244))
                  v17 = (AudioBufferList *)v225;
                else
                  v17 = (AudioBufferList *)v544;
                if (*((_BYTE *)this + 2244))
                  v281 = (uint64_t)v541;
                else
                  v281 = (uint64_t)v540;
                if (v281)
                  v282 = (const AudioBufferList *)v281;
                else
                  v282 = v16;
                v551 = v282;
                v283 = *((_QWORD *)this + 1104);
                if ((v283 & 0x8000000) != 0 && ((*((_BYTE *)this + 8843) & 8) != 0 || *((_BYTE *)this + 472)) && v281)
                {
                  v284 = VoiceProcessorV2::CalculateDownlinkMixGainDB(this);
                  *((float *)this + 1113) = v284;
                  LODWORD(v552) = 0;
                  LODWORD(v552) = __exp10f(v284 / 20.0);
                  v559[0] = (AudioBufferList *)v281;
                  *(_QWORD *)&v561.mSampleTime = vp::Audio_Buffer_List_Ref::begin((vp::Audio_Buffer_List_Ref *)v559);
                  v561.mHostTime = v285;
                  *(_QWORD *)&v560.mSampleTime = vp::Audio_Buffer_List_Ref::end((vp::Audio_Buffer_List_Ref *)v559);
                  v560.mHostTime = v286;
                  while (vp::Audio_Buffer_Iterator::operator!=(&v561, &v560))
                  {
                    v281 = vp::Audio_Buffer_Ref::get_data((vp::Audio_Buffer_Ref *)&v561);
                    v287 = (float *)vp::Audio_Buffer_Ref::get_data((vp::Audio_Buffer_Ref *)&v561);
                    vDSP_vsmul((const float *)v281, 1, (const float *)&v552, v287, 1, *((unsigned int *)this + 129));
                    vp::Audio_Buffer_Iterator::operator++((uint64_t)&v561);
                  }
                  v283 = *((_QWORD *)this + 1104);
                }
                if ((v283 & 0x10000000) != 0 && (*((_BYTE *)this + 8843) & 0x10) != 0)
                {
                  (*(void (**)(VoiceProcessorV9 *, unsigned int *, UInt32 *))(*(_QWORD *)this + 672))(this, v544, v541);
                  v283 = *((_QWORD *)this + 1104);
                }
                if ((v283 & 0x8000) != 0
                  && (v288 = *((_QWORD *)this + 1105), (v288 & 0x8000) != 0)
                  && (v289 = (OpaqueAudioComponentInstance *)*((_QWORD *)this + 452)) != 0)
                {
                  v290 = *((unsigned __int8 *)this + 2244);
                  v561 = v564;
                  LODWORD(v552) = 512;
                  v291 = (UInt64)v543;
                  if (v545 == 0 || v290 == 0)
                    v291 = *(_QWORD *)&v538;
                  *(_QWORD *)&v560.mSampleTime = v544;
                  v560.mHostTime = v291;
                  v292 = *(double *)&v542;
                  if (v546 == 0 || v290 == 0)
                    v292 = v537;
                  p_mNumberBuffers = v541;
                  if (v548 == 0 || v290 == 0)
                    p_mNumberBuffers = &v540->mNumberBuffers;
                  v560.mRateScalar = v292;
                  v560.mWordClockTime = (UInt64)p_mNumberBuffers;
                  *(_QWORD *)&v560.mSMPTETime.mSubframes = v16;
                  if ((v283 & v288 & 2) != 0)
                  {
                    v294 = (OpaqueAudioComponentInstance *)*((_QWORD *)this + 438);
                    if (v294)
                    {
                      if (v290 || v550[4072])
                      {
                        LODWORD(v559[0]) = 0;
                        Parameter = AudioUnitGetParameter(v294, 0x73707062u, 0, 0, (AudioUnitParameterValue *)v559);
                        v297 = *(float *)v559 == 1.0 && Parameter == 0;
                        LODWORD(v553) = v297;
                        AudioUnitSetProperty(*((AudioUnit *)this + 452), 0x6164756Bu, 0, 0, &v553, 4u);
                        v289 = (OpaqueAudioComponentInstance *)*((_QWORD *)this + 452);
                      }
                    }
                  }
                  v559[0] = v17;
                  v559[1] = (AudioBufferList *)v551;
                  AudioUnitProcessMultiple(v289, (AudioUnitRenderActionFlags *)&v552, &v561, *((_DWORD *)this + 129), 5u, (const AudioBufferList **)&v560, 2u, v559);
                  if (v550[3409] || v550[3410])
                  {
                    VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)this, 0x59u, *((unsigned int *)this + 129), v17, &v561);
                    if (v550[3409] || v550[3410])
                      VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)this, 0x76u, *((unsigned int *)this + 129), v551, &v561);
                  }
                }
                else
                {
                  if (v538 != 0.0)
                  {
                    v553 = 0.44668;
                    v561.mSampleTime = v538;
                    v559[0] = (AudioBufferList *)vp::Audio_Buffer_List_Ref::operator[](&v561, 0);
                    v552 = *(double *)&v17;
                    *(_QWORD *)&v561.mSampleTime = vp::Audio_Buffer_List_Ref::begin((vp::Audio_Buffer_List_Ref *)&v552);
                    v561.mHostTime = v298;
                    *(_QWORD *)&v560.mSampleTime = vp::Audio_Buffer_List_Ref::end((vp::Audio_Buffer_List_Ref *)&v552);
                    v560.mHostTime = v299;
                    while (vp::Audio_Buffer_Iterator::operator!=(&v561, &v560))
                    {
                      v300 = (const float *)vp::Audio_Buffer_Ref::get_data((vp::Audio_Buffer_Ref *)v559);
                      v281 = vp::Audio_Buffer_Ref::get_data((vp::Audio_Buffer_Ref *)&v561);
                      v301 = (float *)vp::Audio_Buffer_Ref::get_data((vp::Audio_Buffer_Ref *)&v561);
                      vDSP_vsma(v300, 1, &v553, (const float *)v281, 1, v301, 1, *((unsigned int *)this + 129));
                      vp::Audio_Buffer_Iterator::operator++((uint64_t)&v561);
                    }
                  }
                  if (v537 != 0.0)
                  {
                    v561.mSampleTime = v537;
                    v559[0] = (AudioBufferList *)vp::Audio_Buffer_List_Ref::operator[](&v561, 0);
                    v552 = *(double *)&v17;
                    *(_QWORD *)&v561.mSampleTime = vp::Audio_Buffer_List_Ref::begin((vp::Audio_Buffer_List_Ref *)&v552);
                    v561.mHostTime = v302;
                    *(_QWORD *)&v560.mSampleTime = vp::Audio_Buffer_List_Ref::end((vp::Audio_Buffer_List_Ref *)&v552);
                    v560.mHostTime = v303;
                    while (vp::Audio_Buffer_Iterator::operator!=(&v561, &v560))
                    {
                      v304 = (const float *)vp::Audio_Buffer_Ref::get_data((vp::Audio_Buffer_Ref *)v559);
                      v281 = vp::Audio_Buffer_Ref::get_data((vp::Audio_Buffer_Ref *)&v561);
                      v305 = (float *)vp::Audio_Buffer_Ref::get_data((vp::Audio_Buffer_Ref *)&v561);
                      vDSP_vadd(v304, 1, (const float *)v281, 1, v305, 1, *((unsigned int *)this + 129));
                      vp::Audio_Buffer_Iterator::operator++((uint64_t)&v561);
                    }
                  }
                  if (v16 && v16 != v551)
                  {
                    *(_QWORD *)&v561.mSampleTime = v16;
                    v559[0] = (AudioBufferList *)vp::Audio_Buffer_List_Ref::operator[](&v561, 0);
                    vp::Audio_Buffer_List_Ref::Audio_Buffer_List_Ref(&v561, v551);
                    v552 = v561.mSampleTime;
                    *(_QWORD *)&v561.mSampleTime = vp::Audio_Buffer_List_Ref::begin((vp::Audio_Buffer_List_Ref *)&v552);
                    v561.mHostTime = v306;
                    *(_QWORD *)&v560.mSampleTime = vp::Audio_Buffer_List_Ref::end((vp::Audio_Buffer_List_Ref *)&v552);
                    v560.mHostTime = v307;
                    while (vp::Audio_Buffer_Iterator::operator!=(&v561, &v560))
                    {
                      v308 = (const float *)vp::Audio_Buffer_Ref::get_data((vp::Audio_Buffer_Ref *)v559);
                      v16 = (AudioBufferList *)vp::Audio_Buffer_Ref::get_data((vp::Audio_Buffer_Ref *)&v561);
                      v309 = (float *)vp::Audio_Buffer_Ref::get_data((vp::Audio_Buffer_Ref *)&v561);
                      vDSP_vadd(v308, 1, (const float *)&v16->mNumberBuffers, 1, v309, 1, *((unsigned int *)this + 129));
                      vp::Audio_Buffer_Iterator::operator++((uint64_t)&v561);
                    }
                  }
                }
                v310 = *((_QWORD *)this + 1104);
                if ((v310 & 0x8000) != 0
                  && (*((_BYTE *)this + 8841) & 0x80) != 0
                  && *((_QWORD *)this + 452)
                  && *((_BYTE *)this + 2244))
                {
                  (*(void (**)(VoiceProcessorV9 *, AudioBufferList *, AudioTimeStamp *))(*(_QWORD *)this
                                                                                                  + 648))(this, v17, &v564);
                  v310 = *((_QWORD *)this + 1104);
                }
                if ((v310 & 0x800000) != 0 && (*((_BYTE *)this + 8842) & 0x80) != 0)
                {
                  v311 = (OpaqueAudioComponentInstance *)*((_QWORD *)this + 460);
                  if (v311)
                  {
                    v561 = v564;
                    LODWORD(v560.mSampleTime) = 512;
                    AudioUnitProcess(v311, (AudioUnitRenderActionFlags *)&v560, &v561, *((_DWORD *)this + 129), v17);
                    if (v550[3409] || v550[3410])
                      VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)this, 0x37u, *((unsigned int *)this + 129), v17, &v561);
                    v310 = *((_QWORD *)this + 1104);
                  }
                }
                if ((v310 & 0x10000000000) != 0 && (*((_BYTE *)this + 8845) & 1) != 0)
                {
                  v312 = (OpaqueAudioComponentInstance *)*((_QWORD *)this + 477);
                  if (v312)
                  {
                    v313 = *((_DWORD *)this + 576);
                    if (v313 != *((_DWORD *)this + 578))
                    {
                      AudioUnitSetParameter(v312, 0, 0, 0, (float)v313, 0);
                      v312 = (OpaqueAudioComponentInstance *)*((_QWORD *)this + 477);
                    }
                    *(_QWORD *)&v560.mSampleTime = v17;
                    v559[0] = v17;
                    v561 = v564;
                    LODWORD(v552) = 512;
                    AudioUnitProcessMultiple(v312, (AudioUnitRenderActionFlags *)&v552, &v561, *((_DWORD *)this + 129), 1u, (const AudioBufferList **)&v560, 1u, v559);
                    if (v550[3409] || v550[3410])
                      VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)this, 0x7Du, *((unsigned int *)this + 129), v17, &v561);
                    v310 = *((_QWORD *)this + 1104);
                  }
                }
                if ((v310 & 0x1000000) != 0 && (*((_BYTE *)this + 8843) & 1) != 0)
                {
                  v314 = (OpaqueAudioComponentInstance *)*((_QWORD *)this + 461);
                  if (v314)
                  {
                    v315 = *((_DWORD *)this + 576);
                    if (v315 != *((_DWORD *)this + 578))
                    {
                      AudioUnitSetParameter(v314, 1u, 0, 0, (float)v315, 0);
                      v314 = (OpaqueAudioComponentInstance *)*((_QWORD *)this + 461);
                    }
                    v561 = v564;
                    LODWORD(v560.mSampleTime) = 512;
                    AudioUnitProcess(v314, (AudioUnitRenderActionFlags *)&v560, &v561, *((_DWORD *)this + 129), v17);
                    v310 = *((_QWORD *)this + 1104);
                  }
                }
                if ((v310 & 0x2000000) != 0
                  && (*((_BYTE *)this + 8843) & 2) != 0
                  && (v316 = (OpaqueAudioComponentInstance *)*((_QWORD *)this + 462)) != 0)
                {
                  v561 = v564;
                  LODWORD(v560.mSampleTime) = 512;
                  AudioUnitProcess(v316, (AudioUnitRenderActionFlags *)&v560, &v561, *((_DWORD *)this + 129), v17);
                }
                else if ((v310 & 0x4000000) != 0
                       && (*((_BYTE *)this + 8843) & 4) != 0
                       && (v317 = (OpaqueAudioComponentInstance *)*((_QWORD *)this + 463)) != 0)
                {
                  v318 = (AudioBufferList *)*((_QWORD *)this + 198);
                  if (v318->mNumberBuffers)
                  {
                    v319 = 0;
                    LODWORD(v16) = *((_DWORD *)this + 79) - 1;
                    v281 = 16;
                    do
                    {
                      if (v16 >= v319)
                        v320 = v319;
                      else
                        v320 = (int)v16;
                      memcpy(*(void **)((char *)&v318->mNumberBuffers + v281), v17->mBuffers[v320].mData, 4 * *((unsigned int *)this + 129));
                      ++v319;
                      v318 = (AudioBufferList *)*((_QWORD *)this + 198);
                      v281 += 16;
                    }
                    while (v319 < v318->mNumberBuffers);
                    v317 = (OpaqueAudioComponentInstance *)*((_QWORD *)this + 463);
                  }
                  v561 = v564;
                  LODWORD(v560.mSampleTime) = 512;
                  AudioUnitProcess(v317, (AudioUnitRenderActionFlags *)&v560, &v561, *((_DWORD *)this + 129), v318);
                  v17 = (AudioBufferList *)*((_QWORD *)this + 198);
                  if (!v17)
                  {
                    _os_assert_log();
                    _os_crash();
                    __break(1u);
                    goto LABEL_963;
                  }
                }
                else
                {
                  LODWORD(v552) = 0;
                  v321 = 1.0;
                  if (!*((_BYTE *)this + 2244))
                    v321 = *((float *)this + 3119);
                  LODWORD(v552) = __exp10f((float)((float)(v321 * 32.0) + -32.0) / 20.0);
                  v559[0] = v17;
                  *(_QWORD *)&v561.mSampleTime = vp::Audio_Buffer_List_Ref::begin((vp::Audio_Buffer_List_Ref *)v559);
                  v561.mHostTime = v322;
                  *(_QWORD *)&v560.mSampleTime = vp::Audio_Buffer_List_Ref::end((vp::Audio_Buffer_List_Ref *)v559);
                  v560.mHostTime = v323;
                  while (vp::Audio_Buffer_Iterator::operator!=(&v561, &v560))
                  {
                    v324 = (const float *)vp::Audio_Buffer_Ref::get_data((vp::Audio_Buffer_Ref *)&v561);
                    v325 = (float *)vp::Audio_Buffer_Ref::get_data((vp::Audio_Buffer_Ref *)&v561);
                    vDSP_vsmul(v324, 1, (const float *)&v552, v325, 1, *((unsigned int *)this + 129));
                    vp::Audio_Buffer_Iterator::operator++((uint64_t)&v561);
                  }
                  if (v550[3409] || v550[3410])
                    VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)this, 0x37u, *((unsigned int *)this + 129), v17, &v564);
                }
                if (!v551
                  || (*((_BYTE *)this + 8835) & 0x20) == 0
                  || (*((_BYTE *)this + 8843) & 0x20) == 0 && !*((_BYTE *)this + 472))
                {
                  if (v17->mNumberBuffers)
                  {
                    v326 = 0;
                    v327 = 4;
                    do
                    {
                      memcpy(*(void **)&v225[v327], *(const void **)((char *)&v17->mNumberBuffers + v327 * 4), 4 * *((unsigned int *)this + 129));
                      ++v326;
                      v327 += 4;
                    }
                    while (v326 < v17->mNumberBuffers);
                  }
                  goto LABEL_601;
                }
                if (*((_BYTE *)this + 2244))
                {
                  v328 = *((_DWORD *)this + 89);
                  v329 = v17->mNumberBuffers;
LABEL_595:
                  if (v329)
                  {
                    v330 = 0;
                    v331 = v328 - 1;
                    v332 = 4;
                    do
                    {
                      if (v331 >= v330)
                        v333 = v330;
                      else
                        v333 = v331;
                      vDSP_vadd(*(const float **)((char *)&v17->mNumberBuffers + v332 * 4), 1, (const float *)v551->mBuffers[v333].mData, 1, *(float **)&v225[v332], 1, *((unsigned int *)this + 129));
                      ++v330;
                      v332 += 4;
                    }
                    while (v330 < v17->mNumberBuffers);
                  }
                  goto LABEL_601;
                }
                v329 = v17->mNumberBuffers;
                v328 = 1;
                v347 = v17->mNumberBuffers - 1;
                if (v17->mNumberBuffers == 1)
                  goto LABEL_595;
                while ((v347 & 0x80000000) == 0)
                {
                  mData = (const float *)v17->mBuffers[v347].mData;
                  v349 = (const float *)v551->mBuffers[v347 & (v347 >> 31)].mData;
                  v350 = *(float **)&v225[4 * v347-- + 4];
                  vDSP_vadd(mData, 1, v349, 1, v350, 1, *((unsigned int *)this + 129));
                }
LABEL_601:
                DynamicsDSPChannelCount = VoiceProcessorV2::GetDynamicsDSPChannelCount(this);
                if ((DynamicsDSPChannelCount - 65) <= 0xFFFFFFBF)
                {
                  if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
                  {
                    LODWORD(v561.mSampleTime) = 136315394;
                    *(_QWORD *)((char *)&v561.mSampleTime + 4) = "vpProcessDownlink_v9.cpp";
                    WORD2(v561.mHostTime) = 1024;
                    *(_DWORD *)((char *)&v561.mHostTime + 6) = 824;
                    _os_log_impl(&dword_1B5ED0000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  STACK_ABL: invalid number of buffers", (uint8_t *)&v561, 0x12u);
                  }
                  v501 = __cxa_allocate_exception(0x10uLL);
                  *(_QWORD *)v501 = &off_1E69EE218;
                  v501[2] = -50;
                }
                v335 = DynamicsDSPChannelCount;
                MEMORY[0x1E0C80A78](DynamicsDSPChannelCount);
                v337 = (AudioBufferList *)((char *)&v526 - v336);
                bzero((char *)&v526 - v336, v338);
                v337->mNumberBuffers = v335;
                v173 = (uint64_t)memcpy(v337->mBuffers, v225 + 2, 16 * v335);
                if (v550[3409] || v550[3410])
                  v173 = VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)this, 0x35u, *((unsigned int *)this + 129), v337, &v564);
                v339 = v536;
                if ((*((_BYTE *)this + 8836) & 1) != 0 && (*((_BYTE *)this + 8844) & 1) != 0)
                {
                  v173 = *((_QWORD *)this + 469);
                  if (v173)
                  {
                    v561 = v564;
                    LODWORD(v560.mSampleTime) = 512;
                    v173 = AudioUnitProcess((AudioUnit)v173, (AudioUnitRenderActionFlags *)&v560, &v561, *((_DWORD *)this + 129), v337);
                  }
                }
                v340 = *((_DWORD *)this + 129);
                v564.mSampleTime = v564.mSampleTime + (double)v340;
                v547 += v340;
                v191 = v339 + 1;
              }
              while (v191 < *((_DWORD *)this + 130));
            }
            v351 = VoiceProcessorV2::GetDynamicsDSPChannelCount(this);
            v352 = v351;
            v353 = *((_QWORD *)this + 1104);
            if ((v353 & 0x400000000) != 0)
            {
              v31 = v526;
              if ((*((_BYTE *)this + 8844) & 4) != 0)
              {
                v354 = (OpaqueAudioComponentInstance *)*((_QWORD *)this + 471);
                if (v354)
                {
                  if ((v351 - 65) <= 0xFFFFFFBF)
                  {
                    if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
                      goto LABEL_1008;
                    LODWORD(v561.mSampleTime) = 136315394;
                    *(_QWORD *)((char *)&v561.mSampleTime + 4) = "vpProcessDownlink_v9.cpp";
                    WORD2(v561.mHostTime) = 1024;
                    *(_DWORD *)((char *)&v561.mHostTime + 6) = 848;
                    v515 = MEMORY[0x1E0C81028];
                    goto LABEL_1007;
                  }
                  MEMORY[0x1E0C80A78](v351);
                  v356 = (AudioBufferList *)((char *)&v526 - v355);
                  bzero((char *)&v526 - v355, v357);
                  v356->mNumberBuffers = v352;
                  memcpy(v356->mBuffers, a5->mBuffers, 16 * v352);
                  LODWORD(v561.mSampleTime) = 512;
                  v351 = AudioUnitProcess(v354, (AudioUnitRenderActionFlags *)&v561, &v558, *((_DWORD *)this + 121), v356);
                  if (v550[3409] || v550[3410])
                    v351 = VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)this, 0x40u, v539, v356, &v558);
                  v353 = *((_QWORD *)this + 1104);
                }
              }
            }
            else
            {
              v31 = v526;
            }
            if ((v353 & 0x2000000000) != 0 && (*((_BYTE *)this + 8844) & 0x20) != 0 && *((_QWORD *)this + 474)
              || (v353 & 0x800000000) != 0 && (*((_BYTE *)this + 8844) & 8) != 0 && *((_QWORD *)this + 472))
            {
              if ((v353 & 0x2000000000) != 0)
                v358 = 37;
              else
                v358 = 35;
              if (v352 == a5->mNumberBuffers)
              {
                v561 = v558;
                LODWORD(v560.mSampleTime) = 512;
                v351 = AudioUnitProcess(*((AudioUnit *)this + v358 + 437), (AudioUnitRenderActionFlags *)&v560, &v561, *((_DWORD *)this + 121), a5);
              }
              else
              {
                v392 = (AudioBufferList *)*((_QWORD *)this + 25);
                if (v392->mNumberBuffers)
                {
                  v393 = 0;
                  v394 = 16;
                  do
                  {
                    memcpy(*(void **)((char *)&v392->mNumberBuffers + v394), a5->mBuffers[0].mData, a5->mBuffers[0].mDataByteSize);
                    ++v393;
                    v392 = (AudioBufferList *)*((_QWORD *)this + 25);
                    v394 += 16;
                  }
                  while (v393 < v392->mNumberBuffers);
                }
                v561 = v558;
                v554.mNumberBuffers = 512;
                v351 = AudioUnitProcess(*((AudioUnit *)this + v358 + 437), &v554.mNumberBuffers, &v561, *((_DWORD *)this + 121), v392);
                if ((*((_BYTE *)this + 8836) & 0x40) != 0
                  && (*((_BYTE *)this + 8844) & 0x40) != 0
                  && (v351 = *((_QWORD *)this + 475)) != 0)
                {
                  v395 = *((_DWORD *)this + 576);
                  if (v395 != *((_DWORD *)this + 578))
                  {
                    AudioUnitSetParameter((AudioUnit)v351, 0, 0, 0, (float)v395, 0);
                    v351 = *((_QWORD *)this + 475);
                  }
                  *(_QWORD *)&v563.mNumberBuffers = *((_QWORD *)this + 25);
                  *(_QWORD *)&v562.mNumberBuffers = a5;
                  v560 = v558;
                  LODWORD(v559[0]) = 512;
                  v351 = AudioUnitProcessMultiple((AudioUnit)v351, (AudioUnitRenderActionFlags *)v559, &v560, *((_DWORD *)this + 121), 1u, (const AudioBufferList **)&v563, 1u, (AudioBufferList **)&v562);
                  if (v550[3409] || v550[3410])
                    v351 = VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)this, 0x7Du, v539, a5, &v558);
                }
                else if (a5->mNumberBuffers)
                {
                  v403 = 0;
                  v404 = &a5->mBuffers[0].mData;
                  do
                  {
                    v405 = (unsigned int *)*((_QWORD *)this + 25);
                    if (v403 >= *v405)
                      v406 = 0;
                    else
                      v406 = v403;
                    v351 = (uint64_t)memcpy(*v404, *(const void **)&v405[4 * v406 + 4], *((unsigned int *)v404 - 1));
                    ++v403;
                    v404 += 2;
                  }
                  while (v403 < a5->mNumberBuffers);
                }
              }
              goto LABEL_727;
            }
            if ((v353 & 0x8000000000) == 0
              || (*((_BYTE *)this + 8844) & 0x80) == 0
              || (v351 = *((_QWORD *)this + 476)) == 0)
            {
              if ((v353 & 0x20000000000) != 0
                && (v369 = *((_QWORD *)this + 1105), (v369 & 0x20000000000) != 0)
                && *((_QWORD *)this + 478))
              {
                if ((v353 & v369 & 0x40000000000) != 0 && *((_QWORD *)this + 479))
                {
                  if (v352 - 65 <= 0xFFFFFFBF)
                  {
                    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
                    {
                      LODWORD(v561.mSampleTime) = 136315394;
                      *(_QWORD *)((char *)&v561.mSampleTime + 4) = "vpProcessDownlink_v9.cpp";
                      WORD2(v561.mHostTime) = 1024;
                      *(_DWORD *)((char *)&v561.mHostTime + 6) = 923;
                      _os_log_impl(&dword_1B5ED0000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  STACK_ABL: invalid number of buffers", (uint8_t *)&v561, 0x12u);
                    }
                    v522 = __cxa_allocate_exception(0x10uLL);
                    *(_QWORD *)v522 = &off_1E69EE218;
                    v522[2] = -50;
                  }
                  MEMORY[0x1E0C80A78](v351);
                  v371 = (UInt32 *)((char *)&v526 - v370);
                  bzero((char *)&v526 - v370, v372);
                  v373 = 0;
                  *v371 = v352;
                  v374 = *((_QWORD *)this + 25);
                  v375 = 16 * v352;
                  do
                  {
                    v376 = memcpy(*(void **)(v374 + v373 + 16), a5->mBuffers[v373 / 0x10].mData, *(unsigned int *)(v374 + v373 + 12));
                    v374 = *((_QWORD *)this + 25);
                    *(_OWORD *)&v371[v373 / 4 + 2] = *(_OWORD *)(v374 + v373 + 8);
                    v373 += 16;
                  }
                  while (v375 != v373);
                  *(_QWORD *)&v560.mSampleTime = v371;
                  v377 = *((unsigned int *)this + 1073);
                  if ((v377 - 65) < 0xFFFFFFC0)
                  {
                    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
                    {
                      LODWORD(v561.mSampleTime) = 136315394;
                      *(_QWORD *)((char *)&v561.mSampleTime + 4) = "vpProcessDownlink_v9.cpp";
                      WORD2(v561.mHostTime) = 1024;
                      *(_DWORD *)((char *)&v561.mHostTime + 6) = 938;
                      _os_log_impl(&dword_1B5ED0000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  STACK_ABL: invalid number of buffers", (uint8_t *)&v561, 0x12u);
                    }
                    v523 = __cxa_allocate_exception(0x10uLL);
                    *(_QWORD *)v523 = &off_1E69EE218;
                    v523[2] = -50;
                  }
                  MEMORY[0x1E0C80A78](v376);
                  v379 = (AudioBufferList *)((char *)&v526 - v378);
                  bzero((char *)&v526 - v378, v380);
                  v381 = 0;
                  v379->mNumberBuffers = v377;
                  v382 = a5 + 1;
                  do
                  {
                    v383 = *(AudioBuffer *)&v382->mNumberBuffers;
                    v382 = (AudioBufferList *)((char *)v382 + 32);
                    v379->mBuffers[v381++] = v383;
                  }
                  while (v377 != v381);
                  *(_QWORD *)&v563.mNumberBuffers = v379;
                  if (*((_BYTE *)this + 2245))
                  {
                    v384 = *((_DWORD *)this + 576);
                    if (v384 != *((_DWORD *)this + 578))
                      AudioUnitSetParameter(*((AudioUnit *)this + 479), 0, 0, 0, (float)v384, 0);
                  }
                  v561 = v558;
                  v562.mNumberBuffers = 512;
                  AudioUnitProcessMultiple(*((AudioUnit *)this + 479), &v562.mNumberBuffers, &v561, *((_DWORD *)this + 121), 1u, (const AudioBufferList **)&v560, 1u, (AudioBufferList **)&v563);
                  if (v550[3409] || v550[3410])
                    VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)this, 0x7Eu, v539, v379, &v561);
                  v385 = &a5->mBuffers[0].mData;
                  do
                  {
                    memcpy(*v385, v385[2], *((unsigned int *)v385 - 1));
                    v385 += 4;
                    --v377;
                  }
                  while (v377);
                }
                else if (!*((_BYTE *)this + 2244) && a5->mNumberBuffers >= 2)
                {
                  v407 = (void **)a5[1].mBuffers;
                  v408 = 1;
                  do
                  {
                    memcpy(*v407, a5->mBuffers[0].mData, *((unsigned int *)v407 - 1));
                    ++v408;
                    v407 += 2;
                  }
                  while (v408 < a5->mNumberBuffers);
                }
                v561 = v558;
                LODWORD(v560.mSampleTime) = 512;
                v351 = AudioUnitProcess(*((AudioUnit *)this + 478), (AudioUnitRenderActionFlags *)&v560, &v561, *((_DWORD *)this + 121), a5);
              }
              else if ((v353 & 0x2000000000000000) != 0 && (*((_BYTE *)this + 8847) & 0x20) != 0)
              {
                v400 = a5->mNumberBuffers;
                if (a5->mNumberBuffers >= 2)
                {
                  if (*((_DWORD *)this + 79) == 1)
                  {
                    v351 = (uint64_t)memcpy(*(void **)&a5[1].mBuffers[0].mNumberChannels, a5->mBuffers[0].mData, a5->mBuffers[0].mDataByteSize);
                    v400 = a5->mNumberBuffers;
                  }
                  if (v400 >= 3)
                  {
                    v401 = (void **)&a5[2];
                    v402 = 2;
                    do
                    {
                      bzero(*v401, *((unsigned int *)v401 - 1));
                      ++v402;
                      v401 += 2;
                    }
                    while (v402 < a5->mNumberBuffers);
                  }
                }
              }
              else if (!*((_BYTE *)this + 2244))
              {
                v386 = *((_DWORD *)this + 79);
                v387 = v386 <= 1 ? 1 : v386;
                if (v387 < a5->mNumberBuffers)
                {
                  v388 = (char *)a5 + 16 * (v387 - 1);
                  v389 = (const void **)(v388 + 16);
                  v390 = (unsigned int *)(v388 + 12);
                  v391 = 16 * v387 + 16;
                  do
                  {
                    v351 = (uint64_t)memcpy(*(void **)((char *)&a5->mNumberBuffers + v391), *v389, *v390);
                    ++v387;
                    v391 += 16;
                  }
                  while (v387 < a5->mNumberBuffers);
                }
              }
LABEL_727:
              v409 = *((_QWORD *)this + 1104);
              if ((v409 & 0x80000000000) == 0 || (*((_BYTE *)this + 8845) & 8) == 0 || !*((_QWORD *)this + 480))
                goto LABEL_762;
              v410 = *((_QWORD *)this + 2128);
              v411 = *(float **)(v410 + 16);
              v562.mNumberBuffers = *((_DWORD *)this + 127);
              v412 = (CA::AudioSampleRateConverter **)*((_QWORD *)this + 49);
              if (v412)
              {
                v562.mNumberBuffers = CA::AudioSampleRateConverter::GetExpectedNumberOfOutputFrames(*v412);
                v410 = *((_QWORD *)this + 1988);
                v413 = v528;
                if (v562.mNumberBuffers <= *(_DWORD *)(v410 + 12) >> 2)
                {
                  VoiceProcessor::SampleRateConverter::Convert(*((CA::AudioSampleRateConverter ***)this + 49), (unsigned int *)this + 127, &v562.mNumberBuffers, *((const AudioBufferList **)this + 2128), (const AudioBufferList *)v410);
                  v410 = *((_QWORD *)this + 1988);
                }
                else
                {
                  *v528 = 0;
                }
                v411 = *(float **)(v410 + 16);
              }
              else
              {
                v413 = v528;
              }
              v414 = (unint64_t)*(unsigned int *)(v410 + 12) >> 2;
              if (*v413)
              {
                v415 = 0.0;
                if (v414 > v562.mNumberBuffers)
                  vDSP_vclr(&v411[v562.mNumberBuffers], 1, (v414 - v562.mNumberBuffers));
              }
              else
              {
                v415 = 1.0;
                vDSP_vclr(v411, 1, v414);
              }
              AudioUnitSetParameter(*((AudioUnit *)this + 480), 0x15u, 0, 0, v415, 0);
              if ((*((_BYTE *)this + 4662) & 0x80) != 0 && (*((_BYTE *)this + 4678) & 0x80) != 0)
              {
                v416 = (OpaqueAudioComponentInstance *)*((_QWORD *)this + 402);
                if (v416)
                {
                  LODWORD(v561.mSampleTime) = 0;
                  AudioUnitGetParameter(v416, 9u, 0, 0, (AudioUnitParameterValue *)&v561);
                  AudioUnitSetParameter(*((AudioUnit *)this + 480), 0x17u, 0, 0, *(AudioUnitParameterValue *)&v561.mSampleTime, 0);
                }
              }
              v417 = (OpaqueAudioComponentInstance *)*((_QWORD *)this + 480);
              v418 = atomic_load(VoiceProcessorV4::mIsOnEar);
              AudioUnitSetParameter(v417, 0x16u, 0, 0, (float)v418, 0);
              v419 = *((_QWORD *)this + 49);
              v420 = 17024;
              if (v419)
                v420 = 15904;
              v421 = *(_QWORD *)((char *)this + v420);
              *(_QWORD *)&v560.mSampleTime = a5;
              v560.mHostTime = v421;
              v561 = v558;
              v554.mNumberBuffers = 512;
              *(_QWORD *)&v563.mNumberBuffers = a5;
              v422 = *((unsigned int *)this + 129);
              if (v550[3409] || v550[3410])
              {
                VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)this, 0x6Fu, v422, a5, &v561);
                v422 = *((unsigned int *)this + 129);
                v423 = 15904;
                if (!*((_QWORD *)this + 49))
                  v423 = 17024;
                v424 = *(const AudioBufferList **)((char *)this + v423);
                if (v550[3409])
                {
LABEL_757:
                  VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)this, 0x70u, v422, v424, &v561);
LABEL_758:
                  AudioUnitProcessMultiple(*((AudioUnit *)this + 480), &v554.mNumberBuffers, &v561, *((_DWORD *)this + 121), 2u, (const AudioBufferList **)&v560, 1u, (AudioBufferList **)&v563);
                  if (v550[3409] || v550[3410])
                    VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)this, 0x71u, *((unsigned int *)this + 129), a5, &v561);
                  v351 = AudioUnitSetParameter(*((AudioUnit *)this + 480), 0x15u, 0, 0, 0.0, 0);
                  v409 = *((_QWORD *)this + 1104);
LABEL_762:
                  if ((v409 & 0x100000000000) != 0 && (*((_BYTE *)this + 8845) & 0x10) != 0)
                  {
                    v351 = *((_QWORD *)this + 481);
                    if (v351)
                    {
                      v426 = *(_OWORD *)&v529->mRateScalar;
                      *(_OWORD *)&v561.mSampleTime = *(_OWORD *)&v529->mSampleTime;
                      *(_OWORD *)&v561.mRateScalar = v426;
                      v427 = *(_OWORD *)&v529->mSMPTETime.mHours;
                      *(_OWORD *)&v561.mSMPTETime.mSubframes = *(_OWORD *)&v529->mSMPTETime.mSubframes;
                      *(_OWORD *)&v561.mSMPTETime.mHours = v427;
                      LODWORD(v560.mSampleTime) = 512;
                      v351 = AudioUnitProcess((AudioUnit)v351, (AudioUnitRenderActionFlags *)&v560, &v561, *((_DWORD *)this + 121), a5);
                      v409 = *((_QWORD *)this + 1104);
                    }
                  }
                  if ((v409 & 0x200000000000) != 0 && (*((_BYTE *)this + 8845) & 0x20) != 0)
                  {
                    v351 = *((_QWORD *)this + 482);
                    if (v351)
                    {
                      *(_QWORD *)&v560.mSampleTime = a5;
                      *(_QWORD *)&v563.mNumberBuffers = a5;
                      v428 = *(_OWORD *)&v529->mRateScalar;
                      *(_OWORD *)&v561.mSampleTime = *(_OWORD *)&v529->mSampleTime;
                      *(_OWORD *)&v561.mRateScalar = v428;
                      v429 = *(_OWORD *)&v529->mSMPTETime.mHours;
                      *(_OWORD *)&v561.mSMPTETime.mSubframes = *(_OWORD *)&v529->mSMPTETime.mSubframes;
                      *(_OWORD *)&v561.mSMPTETime.mHours = v429;
                      v562.mNumberBuffers = 512;
                      v351 = AudioUnitProcessMultiple((AudioUnit)v351, &v562.mNumberBuffers, &v561, *((_DWORD *)this + 121), 1u, (const AudioBufferList **)&v560, 1u, (AudioBufferList **)&v563);
                      v409 = *((_QWORD *)this + 1104);
                    }
                  }
                  if ((v409 & 0x100000000000000) == 0
                    || (v430 = *((_QWORD *)this + 1105), (v430 & 0x100000000000000) == 0)
                    || !*((_QWORD *)this + 493))
                  {
                    if ((v409 & 0x200000000000000) == 0
                      || (v430 = *((_QWORD *)this + 1105), (v430 & 0x200000000000000) == 0)
                      || !*((_QWORD *)this + 494))
                    {
                      if ((v409 & 0x400000000000000) == 0
                        || (v430 = *((_QWORD *)this + 1105), (v430 & 0x400000000000000) == 0)
                        || !*((_QWORD *)this + 495))
                      {
                        v447 = 0;
LABEL_807:
                        if ((v409 & 0x40000000000000) != 0 && (*((_BYTE *)this + 8846) & 0x40) != 0)
                        {
                          v351 = *((_QWORD *)this + 491);
                          if (v351)
                          {
                            v561 = v558;
                            LODWORD(v560.mSampleTime) = 512;
                            v351 = AudioUnitProcess((AudioUnit)v351, (AudioUnitRenderActionFlags *)&v560, &v561, *((_DWORD *)this + 121), a5);
                            v409 = *((_QWORD *)this + 1104);
                          }
                        }
                        if ((v409 & 0x800000000000000) != 0
                          && ((*((_BYTE *)this + 8847) & 8) != 0 || *((_BYTE *)this + 472)))
                        {
                          LODWORD(v561.mSampleTime) = 1065353216;
                          LODWORD(v560.mSampleTime) = 1065353216;
                          if ((*((_BYTE *)this + 2083) || *((_BYTE *)this + 472))
                            && (v448 = *((float *)this + 1131), v448 != 0.0))
                          {
                            v449 = __exp10f(v448 / 20.0);
                            *(float *)&v560.mSampleTime = v449;
                            *(float *)&v561.mSampleTime = v449;
                          }
                          else
                          {
                            v450 = *((float *)this + 1129);
                            if (v450 >= -300.0)
                            {
                              if (v450 == 0.0)
                              {
                                v449 = 1.0;
                              }
                              else
                              {
                                v451 = v450 / 20.0;
                                v452 = v450 <= 60.0;
                                v453 = 3.0;
                                if (v452)
                                  v453 = v451;
                                v449 = __exp10f(v453);
                                *(float *)&v561.mSampleTime = v449;
                              }
                            }
                            else
                            {
                              LODWORD(v561.mSampleTime) = 0;
                              v449 = 0.0;
                            }
                            v454 = *((float *)this + 1130);
                            if (v454 >= -300.0)
                            {
                              if (v454 != 0.0)
                              {
                                v455 = v454 / 20.0;
                                if (v454 > 60.0)
                                  v455 = 3.0;
                                LODWORD(v560.mSampleTime) = __exp10f(v455);
                                v449 = *(float *)&v561.mSampleTime;
                              }
                            }
                            else
                            {
                              LODWORD(v560.mSampleTime) = 0;
                            }
                          }
                          if (v449 == 0.0)
                          {
                            bzero(a5->mBuffers[0].mData, 4 * *((unsigned int *)this + 121));
                            v31 = v526;
                          }
                          else
                          {
                            v31 = v526;
                            if (v449 != 1.0)
                              vDSP_vsmul((const float *)a5->mBuffers[0].mData, 1, (const float *)&v561, (float *)a5->mBuffers[0].mData, 1, *((unsigned int *)this + 121));
                          }
                          if (a5->mNumberBuffers >= 2)
                          {
                            v456 = 1;
                            v457 = 32;
                            do
                            {
                              if (*(float *)&v560.mSampleTime == 0.0)
                              {
                                bzero(*(void **)((char *)&a5->mNumberBuffers + v457), 4 * *((unsigned int *)this + 121));
                              }
                              else if (*(float *)&v560.mSampleTime != 1.0)
                              {
                                vDSP_vsmul(*(const float **)((char *)&a5->mNumberBuffers + v457), 1, (const float *)&v560, *(float **)((char *)&a5->mNumberBuffers + v457), 1, *((unsigned int *)this + 121));
                              }
                              ++v456;
                              v457 += 16;
                            }
                            while (v456 < a5->mNumberBuffers);
                          }
                          v409 = *((_QWORD *)this + 1104);
                        }
                        if ((v409 & 0x80000000000000) != 0 && (*((_BYTE *)this + 8846) & 0x80) != 0)
                        {
                          v351 = *((_QWORD *)this + 492);
                          if (v351)
                          {
                            v561 = v558;
                            LODWORD(v560.mSampleTime) = 512;
                            v351 = AudioUnitProcess((AudioUnit)v351, (AudioUnitRenderActionFlags *)&v560, &v561, *((_DWORD *)this + 121), a5);
                            if (v550[3409] || v550[3410])
                              v351 = VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)this, 0x77u, *((unsigned int *)this + 121), a5, &v561);
                            v409 = *((_QWORD *)this + 1104);
                          }
                        }
                        if ((v409 & 0x100000000000000) != 0 && (*((_BYTE *)this + 8847) & 1) != 0)
                        {
                          v351 = *((_QWORD *)this + 493);
                          if (v351)
                          {
                            if (*((_DWORD *)this + 1128) == 1 && (v458 = (_DWORD *)*((_QWORD *)this + 197)) != 0)
                            {
                              ABLRingBuffer<float>::ReadFrom((_DWORD *)this + 384, *((_DWORD *)this + 121), v458);
                              v351 = *((_QWORD *)this + 493);
                              v459 = 2;
                            }
                            else
                            {
                              v459 = 1;
                            }
                            v460 = *((_QWORD *)this + 197);
                            *(_QWORD *)&v560.mSampleTime = a5;
                            v560.mHostTime = v460;
                            *(_QWORD *)&v563.mNumberBuffers = a5;
                            v561 = v558;
                            v562.mNumberBuffers = 512;
                            v351 = AudioUnitProcessMultiple((AudioUnit)v351, &v562.mNumberBuffers, &v561, *((_DWORD *)this + 121), v459, (const AudioBufferList **)&v560, 1u, (AudioBufferList **)&v563);
                            if (v550[3409] || v550[3410])
                              v351 = VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)this, 0x41u, v539, a5, &v561);
                            v409 = *((_QWORD *)this + 1104);
                          }
                        }
                        if ((v409 & 0x200000000000000) != 0 && (*((_BYTE *)this + 8847) & 2) != 0)
                        {
                          v461 = (OpaqueAudioComponentInstance *)*((_QWORD *)this + 494);
                          if (v461)
                          {
                            v462 = *((unsigned int *)this + 1073);
                            if ((v462 - 65) <= 0xFFFFFFBF)
                            {
                              if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
                              {
                                LODWORD(v561.mSampleTime) = 136315394;
                                *(_QWORD *)((char *)&v561.mSampleTime + 4) = "vpProcessDownlink_v9.cpp";
                                WORD2(v561.mHostTime) = 1024;
                                *(_DWORD *)((char *)&v561.mHostTime + 6) = 1227;
                                _os_log_impl(&dword_1B5ED0000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  STACK_ABL: invalid number of buffers", (uint8_t *)&v561, 0x12u);
                              }
                              v516 = __cxa_allocate_exception(0x10uLL);
                              *(_QWORD *)v516 = &off_1E69EE218;
                              v516[2] = -50;
                            }
                            MEMORY[0x1E0C80A78](v351);
                            v464 = (AudioBufferList *)((char *)&v526 - v463);
                            bzero((char *)&v526 - v463, v465);
                            v466 = 0;
                            v464->mNumberBuffers = v462;
                            v467 = a5->mBuffers;
                            do
                            {
                              v468 = *v467;
                              v467 += 2;
                              v464->mBuffers[v466++] = v468;
                            }
                            while (v462 != v466);
                            v469 = *((_QWORD *)this + 197);
                            *(_QWORD *)&v560.mSampleTime = v464;
                            v560.mHostTime = v469;
                            *(_QWORD *)&v563.mNumberBuffers = v464;
                            v561 = v558;
                            v562.mNumberBuffers = 512;
                            v351 = AudioUnitProcessMultiple(v461, &v562.mNumberBuffers, &v561, *((_DWORD *)this + 121), 1u, (const AudioBufferList **)&v560, 1u, (AudioBufferList **)&v563);
                            if (v550[3409] || v550[3410])
                              v351 = VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)this, 0x42u, v539, v464, &v561);
                            v409 = *((_QWORD *)this + 1104);
                          }
                        }
                        if ((v409 & 0x400000000000000) != 0
                          && (*((_BYTE *)this + 8847) & 4) != 0
                          && *((_QWORD *)this + 495))
                        {
                          if (*((_DWORD *)this + 1128) == 1 && (v470 = (_DWORD *)*((_QWORD *)this + 197)) != 0)
                          {
                            v351 = (uint64_t)ABLRingBuffer<float>::ReadFrom((_DWORD *)this + 384, *((_DWORD *)this + 121), v470);
                            v471 = 2;
                          }
                          else
                          {
                            v471 = 1;
                          }
                          v472 = *((unsigned int *)this + 1073);
                          if ((v472 - 65) <= 0xFFFFFFBF)
                          {
                            if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
                            {
                              LODWORD(v561.mSampleTime) = 136315394;
                              *(_QWORD *)((char *)&v561.mSampleTime + 4) = "vpProcessDownlink_v9.cpp";
                              WORD2(v561.mHostTime) = 1024;
                              *(_DWORD *)((char *)&v561.mHostTime + 6) = 1252;
                              _os_log_impl(&dword_1B5ED0000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  STACK_ABL: invalid number of buffers", (uint8_t *)&v561, 0x12u);
                            }
                            v517 = __cxa_allocate_exception(0x10uLL);
                            *(_QWORD *)v517 = &off_1E69EE218;
                            v517[2] = -50;
                          }
                          MEMORY[0x1E0C80A78](v351);
                          v474 = (AudioBufferList *)((char *)&v526 - v473);
                          bzero((char *)&v526 - v473, v475);
                          v476 = 0;
                          v474->mNumberBuffers = v472;
                          v477 = a5 + 1;
                          do
                          {
                            v478 = *(AudioBuffer *)&v477->mNumberBuffers;
                            v477 = (AudioBufferList *)((char *)v477 + 32);
                            v474->mBuffers[v476++] = v478;
                          }
                          while (v472 != v476);
                          v479 = *((_QWORD *)this + 197);
                          *(_QWORD *)&v560.mSampleTime = v474;
                          v560.mHostTime = v479;
                          *(_QWORD *)&v563.mNumberBuffers = v474;
                          v561 = v558;
                          v562.mNumberBuffers = 512;
                          AudioUnitProcessMultiple(*((AudioUnit *)this + 495), &v562.mNumberBuffers, &v561, *((_DWORD *)this + 121), v471, (const AudioBufferList **)&v560, 1u, (AudioBufferList **)&v563);
                          if (v550[3409] || v550[3410])
                            VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)this, 0x43u, v539, v474, &v561);
                          v409 = *((_QWORD *)this + 1104);
                        }
                        if ((v409 & 0x400000000000) != 0 && (*((_BYTE *)this + 8845) & 0x40) != 0)
                        {
                          v480 = (OpaqueAudioComponentInstance *)*((_QWORD *)this + 483);
                          if (v480)
                          {
                            v561 = v558;
                            LODWORD(v560.mSampleTime) = 512;
                            AudioUnitProcess(v480, (AudioUnitRenderActionFlags *)&v560, &v561, *((_DWORD *)this + 121), a5);
                            v409 = *((_QWORD *)this + 1104);
                          }
                        }
                        if ((v409 & 0x800000000000) != 0)
                          v481 = v447;
                        else
                          v481 = 1;
                        if ((v481 & 1) != 0)
                        {
                          v482 = (_BYTE *)(&xmmword_1EF135FF8 + 8);
                        }
                        else
                        {
                          v482 = (char *)&xmmword_1EF135FF8 + 8;
                          if ((*((_BYTE *)this + 8845) & 0x80) != 0)
                          {
                            v483 = (OpaqueAudioComponentInstance *)*((_QWORD *)this + 484);
                            if (v483)
                            {
                              v561 = v558;
                              LODWORD(v560.mSampleTime) = 512;
                              AudioUnitProcess(v483, (AudioUnitRenderActionFlags *)&v560, &v561, *((_DWORD *)this + 121), a5);
                              if (v550[3409] || v550[3410])
                                VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)this, 0x39u, *((unsigned int *)this + 121), a5, &v561);
                              v409 = *((_QWORD *)this + 1104);
                            }
                          }
                        }
                        if ((v409 & 0x4000000000000) != 0 && (*((_BYTE *)this + 8846) & 4) != 0)
                        {
                          v484 = (OpaqueAudioComponentInstance *)*((_QWORD *)this + 487);
                          if (v484)
                          {
                            v561 = v558;
                            LODWORD(v560.mSampleTime) = 512;
                            AudioUnitProcess(v484, (AudioUnitRenderActionFlags *)&v560, &v561, *((_DWORD *)this + 121), a5);
                            if (v550[3409] || v550[3410])
                              VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)this, 0x75u, *((unsigned int *)this + 121), a5, &v561);
                            v409 = *((_QWORD *)this + 1104);
                          }
                        }
                        if ((v409 & 0x8000000000000) != 0 && (*((_BYTE *)this + 8846) & 8) != 0)
                        {
                          v485 = (OpaqueAudioComponentInstance *)*((_QWORD *)this + 488);
                          if (v485)
                          {
                            v486 = *((_DWORD *)this + 18);
                            if (v486 <= 0x34 && ((0x1FFFE33F3FFEF0uLL >> v486) & 1) != 0)
                            {
                              v561 = v558;
                              LODWORD(v560.mSampleTime) = 512;
                              AudioUnitProcess(v485, (AudioUnitRenderActionFlags *)&v560, &v561, *((_DWORD *)this + 121), a5);
                              if (v550[3409] || v550[3410])
                                VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)this, 0x73u, *((unsigned int *)this + 121), a5, &v561);
                            }
                          }
                        }
                        if (v550[3409] && (VoiceProcessorV2::InjectionFilesReadSignal(this, 2, v539, a5), v550[3409])
                          || v550[3410])
                        {
                          VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)this, 0x44u, v539, a5, &v558);
                        }
                        v487 = *((_QWORD *)this + 1995);
                        if (AudioIssueDetectorLibraryLoader(void)::once != -1)
                          dispatch_once(&AudioIssueDetectorLibraryLoader(void)::once, &__block_literal_global_12440);
                        if (*((_QWORD *)v482 + 499))
                          (*((void (**)(uint64_t, uint64_t, _QWORD, AudioBufferList *, uint64_t, AudioTimeStamp *))v482
                           + 499))(v487, 68, 0, a5, v539, &v558);
                        if (*((_DWORD *)this + 1127) == 1 && !v550[3688])
                          VoiceProcessorV2::AppendReferenceSignal(this, a5, (AudioBufferList *)&v558, 0);
                        if (v550[3409])
                          VoiceProcessorV2::LoopBackRead(this, v539, a5);
                        goto LABEL_929;
                      }
                    }
                  }
                  if ((v409 & v430 & 0x800000000000) != 0)
                  {
                    v351 = *((_QWORD *)this + 484);
                    if (v351)
                    {
                      v561 = v558;
                      LODWORD(v560.mSampleTime) = 512;
                      v351 = AudioUnitProcess((AudioUnit)v351, (AudioUnitRenderActionFlags *)&v560, &v561, *((_DWORD *)this + 121), a5);
                      if (v550[3409] || v550[3410])
                        v351 = VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)this, 0x39u, *((unsigned int *)this + 121), a5, &v561);
                      v409 = *((_QWORD *)this + 1104);
                    }
                  }
                  if ((v409 & 0x1000000000000) != 0 && (*((_BYTE *)this + 8846) & 1) != 0)
                  {
                    v431 = (OpaqueAudioComponentInstance *)*((_QWORD *)this + 485);
                    if (v431)
                    {
                      v432 = *((unsigned int *)this + 1073);
                      if ((v432 - 65) <= 0xFFFFFFBF)
                      {
                        if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
                          goto LABEL_1017;
                        LODWORD(v561.mSampleTime) = 136315394;
                        *(_QWORD *)((char *)&v561.mSampleTime + 4) = "vpProcessDownlink_v9.cpp";
                        WORD2(v561.mHostTime) = 1024;
                        *(_DWORD *)((char *)&v561.mHostTime + 6) = 1117;
                        v520 = MEMORY[0x1E0C81028];
                        goto LABEL_1016;
                      }
                      MEMORY[0x1E0C80A78](v351);
                      v434 = (AudioBufferList *)((char *)&v526 - v433);
                      bzero((char *)&v526 - v433, v435);
                      v436 = 0;
                      v434->mNumberBuffers = v432;
                      v437 = a5->mBuffers;
                      do
                      {
                        v438 = *v437;
                        v437 += 2;
                        v434->mBuffers[v436++] = v438;
                      }
                      while (v432 != v436);
                      v561 = v558;
                      LODWORD(v560.mSampleTime) = 512;
                      v351 = AudioUnitProcess(v431, (AudioUnitRenderActionFlags *)&v560, &v561, *((_DWORD *)this + 121), v434);
                      if (v550[3409] || v550[3410])
                        v351 = VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)this, 0x3Au, *((unsigned int *)this + 121), v434, &v561);
                      v409 = *((_QWORD *)this + 1104);
                    }
                  }
                  if ((v409 & 0x2000000000000) == 0
                    || (*((_BYTE *)this + 8846) & 2) == 0
                    || (v439 = (OpaqueAudioComponentInstance *)*((_QWORD *)this + 486)) == 0)
                  {
LABEL_805:
                    v447 = 1;
                    goto LABEL_807;
                  }
                  v440 = *((unsigned int *)this + 1073);
                  if ((v440 - 65) > 0xFFFFFFBF)
                  {
                    MEMORY[0x1E0C80A78](v351);
                    v442 = (AudioBufferList *)((char *)&v526 - v441);
                    bzero((char *)&v526 - v441, v443);
                    v444 = 0;
                    v442->mNumberBuffers = v440;
                    v445 = a5 + 1;
                    do
                    {
                      v446 = *(AudioBuffer *)&v445->mNumberBuffers;
                      v445 = (AudioBufferList *)((char *)v445 + 32);
                      v442->mBuffers[v444++] = v446;
                    }
                    while (v440 != v444);
                    v561 = v558;
                    LODWORD(v560.mSampleTime) = 512;
                    v351 = AudioUnitProcess(v439, (AudioUnitRenderActionFlags *)&v560, &v561, *((_DWORD *)this + 121), v442);
                    if (v550[3409] || v550[3410])
                      v351 = VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)this, 0x3Bu, *((unsigned int *)this + 121), v442, &v561);
                    v409 = *((_QWORD *)this + 1104);
                    goto LABEL_805;
                  }
                  if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
                  {
LABEL_1017:
                    v521 = __cxa_allocate_exception(0x10uLL);
                    *(_QWORD *)v521 = &off_1E69EE218;
                    v521[2] = -50;
                  }
                  LODWORD(v561.mSampleTime) = 136315394;
                  *(_QWORD *)((char *)&v561.mSampleTime + 4) = "vpProcessDownlink_v9.cpp";
                  WORD2(v561.mHostTime) = 1024;
                  *(_DWORD *)((char *)&v561.mHostTime + 6) = 1131;
                  v520 = MEMORY[0x1E0C81028];
LABEL_1016:
                  _os_log_impl(&dword_1B5ED0000, v520, OS_LOG_TYPE_ERROR, "%25s:%-5d  STACK_ABL: invalid number of buffers", (uint8_t *)&v561, 0x12u);
                  goto LABEL_1017;
                }
              }
              else
              {
                if (v419)
                  v425 = (const AudioBufferList **)((char *)this + 15904);
                else
                  v425 = (const AudioBufferList **)((char *)this + 17024);
                v424 = *v425;
              }
              if (!v550[3410])
                goto LABEL_758;
              goto LABEL_757;
            }
            v359 = *((_DWORD *)this + 576);
            if (v359 != *((_DWORD *)this + 578))
              v351 = AudioUnitSetParameter((AudioUnit)v351, 0, 0, 0, (float)v359, 0);
            if (v352 - 65 > 0xFFFFFFBF)
            {
              MEMORY[0x1E0C80A78](v351);
              v361 = (UInt32 *)((char *)&v526 - v360);
              bzero((char *)&v526 - v360, v362);
              *v361 = v352;
              v363 = memcpy(v361 + 2, a5->mBuffers, 16 * v352);
              v364 = a5->mNumberBuffers;
              if ((v364 - 65) <= 0xFFFFFFBF)
              {
                if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
                {
                  LODWORD(v561.mSampleTime) = 136315394;
                  *(_QWORD *)((char *)&v561.mSampleTime + 4) = "vpProcessDownlink_v9.cpp";
                  WORD2(v561.mHostTime) = 1024;
                  *(_DWORD *)((char *)&v561.mHostTime + 6) = 910;
                  _os_log_impl(&dword_1B5ED0000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  STACK_ABL: invalid number of buffers", (uint8_t *)&v561, 0x12u);
                }
                v519 = __cxa_allocate_exception(0x10uLL);
                *(_QWORD *)v519 = &off_1E69EE218;
                v519[2] = -50;
              }
              MEMORY[0x1E0C80A78](v363);
              v366 = (_DWORD *)((char *)&v526 - v365);
              bzero((char *)&v526 - v365, v367);
              *v366 = v364;
              v368 = 2;
              do
              {
                *(AudioBuffer *)&v366[v368] = a5->mBuffers[--v364];
                v368 += 4;
              }
              while (v364);
              *(_QWORD *)&v560.mSampleTime = v361;
              *(_QWORD *)&v563.mNumberBuffers = v366;
              v561 = v558;
              v562.mNumberBuffers = 512;
              v351 = AudioUnitProcessMultiple(*((AudioUnit *)this + 476), &v562.mNumberBuffers, &v561, *((_DWORD *)this + 121), 1u, (const AudioBufferList **)&v560, 1u, (AudioBufferList **)&v563);
              if (v550[3409] || v550[3410])
                v351 = VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)this, 0x7Du, v539, a5, &v561);
              goto LABEL_727;
            }
            if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
            {
LABEL_1008:
              v518 = __cxa_allocate_exception(0x10uLL);
              *(_QWORD *)v518 = &off_1E69EE218;
              v518[2] = -50;
            }
            LODWORD(v561.mSampleTime) = 136315394;
            *(_QWORD *)((char *)&v561.mSampleTime + 4) = "vpProcessDownlink_v9.cpp";
            WORD2(v561.mHostTime) = 1024;
            *(_DWORD *)((char *)&v561.mHostTime + 6) = 907;
            v515 = MEMORY[0x1E0C81028];
LABEL_1007:
            _os_log_impl(&dword_1B5ED0000, v515, OS_LOG_TYPE_ERROR, "%25s:%-5d  STACK_ABL: invalid number of buffers", (uint8_t *)&v561, 0x12u);
            goto LABEL_1008;
          }
          NumberOfSourceFrames = *((_DWORD *)this + 121);
          goto LABEL_237;
        }
        if (VPLogScope(void)::once != -1)
          dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
        v73 = (_QWORD *)VPLogScope(void)::scope;
        if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(1, VPLogScope(void)::scope, 0))
        {
          v74 = (*v73 ? *v73 : MEMORY[0x1E0C81028]);
          if (os_log_type_enabled(v74, OS_LOG_TYPE_ERROR))
          {
            mDataByteSize = a5->mBuffers[0].mDataByteSize;
            v76 = *((_DWORD *)this + 88) * v539;
            LODWORD(buf.mSampleTime) = 136315906;
            *(_QWORD *)((char *)&buf.mSampleTime + 4) = "vpProcessDownlink_v9.cpp";
            WORD2(buf.mHostTime) = 1024;
            *(_DWORD *)((char *)&buf.mHostTime + 6) = 182;
            WORD1(buf.mRateScalar) = 1024;
            HIDWORD(buf.mRateScalar) = mDataByteSize;
            LOWORD(buf.mWordClockTime) = 1024;
            *(_DWORD *)((char *)&buf.mWordClockTime + 2) = v76;
            _os_log_impl(&dword_1B5ED0000, v74, OS_LOG_TYPE_ERROR, "%25s:%-5d  >vp> processdownlinkaudio: SERIOUS ERROR: ioOutputData->mBuffers[0].mDataByteSize = %u, expected = %u", (uint8_t *)&buf, 0x1Eu);
          }
        }
        v77 = (int *)*((_QWORD *)this + 1570);
        v78 = v550[3409];
        if (v77)
        {
          if (!v550[3409] && !v550[3410])
            goto LABEL_159;
          if (VPLogScope(void)::once != -1)
            dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
          CALegacyLog::log(v77, 1, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v9/vpProcessDownlink_v9.cpp", 182, "ProcessDownlinkAudio", "processdownlinkaudio: SERIOUS ERROR: ioOutputData->mBuffers[0].mDataByteSize = %u, expected = %u", a5->mBuffers[0].mDataByteSize, *((_DWORD *)this + 88) * v539);
          v78 = v550[3409];
        }
        if (v78)
        {
          VoiceProcessorV2::InjectionFilesReadSignal(this, 2, v539, a5);
          if (v550[3409])
          {
LABEL_160:
            VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)this, 0x44u, v539, a5, &v558);
LABEL_161:
            v79 = *((_QWORD *)this + 1995);
            if (AudioIssueDetectorLibraryLoader(void)::once != -1)
              dispatch_once(&AudioIssueDetectorLibraryLoader(void)::once, &__block_literal_global_12440);
            if (!AudioIssueDetectorLibraryLoader(void)::libSym)
              goto LABEL_929;
            goto LABEL_206;
          }
        }
LABEL_159:
        if (!v550[3410])
          goto LABEL_161;
        goto LABEL_160;
      }
      if (v550[3331])
      {
        v59 = (double)(mach_absolute_time() - *((_QWORD *)this + 1980)) * 0.0000000416666667;
        v60 = *((double *)this + 1983);
        if (v59 > v60)
        {
          *((double *)this + 1983) = v60 + 10.0;
          VoiceProcessorV2::LogIOError((uint64_t)this, 23.002, (float)*((unsigned int *)this + 3114), (float)*((unsigned int *)this + 121), (float)v539, "processdownlinkaudio: <block size mismatch>");
          if (VPLogScope(void)::once != -1)
            dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
          v61 = (_QWORD *)VPLogScope(void)::scope;
          if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(1, VPLogScope(void)::scope, 0))
          {
            v62 = (*v61 ? *v61 : MEMORY[0x1E0C81028]);
            if (os_log_type_enabled(v62, OS_LOG_TYPE_ERROR))
            {
              LODWORD(buf.mSampleTime) = 136315650;
              *(_QWORD *)((char *)&buf.mSampleTime + 4) = "vpProcessDownlink_v9.cpp";
              WORD2(buf.mHostTime) = 1024;
              *(_DWORD *)((char *)&buf.mHostTime + 6) = 166;
              WORD1(buf.mRateScalar) = 2048;
              *(double *)((char *)&buf.mRateScalar + 4) = v59;
              _os_log_impl(&dword_1B5ED0000, v62, OS_LOG_TYPE_ERROR, "%25s:%-5d  >vp> CoreAudio: ***** VP BLOCK SERIOUS ERROR: PROCESSDLAUDIO BAD BLOCK CONFIG for over %.6f seconds *****\n", (uint8_t *)&buf, 0x1Cu);
            }
          }
          v63 = (int *)*((_QWORD *)this + 1570);
          if (v63 && (v550[3409] || v550[3410]))
          {
            if (VPLogScope(void)::once != -1)
              dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
            CALegacyLog::log(v63, 1, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v9/vpProcessDownlink_v9.cpp", 166, "ProcessDownlinkAudio", "CoreAudio: ***** VP BLOCK SERIOUS ERROR: PROCESSDLAUDIO BAD BLOCK CONFIG for over %.6f seconds *****\n", v59);
          }
          if (VPLogScope(void)::once != -1)
            dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
          v64 = (_QWORD *)VPLogScope(void)::scope;
          if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(1, VPLogScope(void)::scope, 0))
          {
            v65 = (*v64 ? *v64 : MEMORY[0x1E0C81028]);
            if (os_log_type_enabled(v65, OS_LOG_TYPE_ERROR))
            {
              v526 = (char *)this + 2488;
              v66 = a5->mBuffers[0].mDataByteSize;
              v67 = *((_DWORD *)this + 121);
              CAFormatter::CAFormatter((CAFormatter *)&v564, v35);
              v68 = *((_DWORD *)this + 3114);
              LODWORD(buf.mSampleTime) = 136316674;
              *(_QWORD *)((char *)&buf.mSampleTime + 4) = "vpProcessDownlink_v9.cpp";
              WORD2(buf.mHostTime) = 1024;
              *(_DWORD *)((char *)&buf.mHostTime + 6) = 170;
              WORD1(buf.mRateScalar) = 1024;
              HIDWORD(buf.mRateScalar) = v539;
              LOWORD(buf.mWordClockTime) = 1024;
              *(_DWORD *)((char *)&buf.mWordClockTime + 2) = v66;
              HIWORD(buf.mWordClockTime) = 1024;
              *(_DWORD *)&buf.mSMPTETime.mSubframes = v67;
              LOWORD(buf.mSMPTETime.mCounter) = 2080;
              *(Float64 *)((char *)&buf.mSMPTETime.mCounter + 2) = v564.mSampleTime;
              HIWORD(buf.mSMPTETime.mFlags) = 1024;
              *(_DWORD *)&buf.mSMPTETime.mHours = v68;
              _os_log_impl(&dword_1B5ED0000, v65, OS_LOG_TYPE_ERROR, "%25s:%-5d  >vp> processdownlinkaudio: <block size mismatch btwn expected and actual> num frames received  = %u (data byte size = %u).\tdl mix blk size = %u\n\tdl mix asbd = %s\n\t process dl callcount = %u\n", (uint8_t *)&buf, 0x34u);
              if (*(_QWORD *)&v564.mSampleTime)
                free(*(void **)&v564.mSampleTime);
              v31 = v526;
            }
          }
          v69 = (int *)*((_QWORD *)this + 1570);
          if (v69)
          {
            if (v550[3409] || v550[3410])
            {
              if (VPLogScope(void)::once != -1)
                dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
              v70 = VPLogScope(void)::scope;
              v71 = a5->mBuffers[0].mDataByteSize;
              v72 = *((_DWORD *)this + 121);
              CAFormatter::CAFormatter((CAFormatter *)&buf, v35);
              CALegacyLog::log(v69, 1, v70, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v9/vpProcessDownlink_v9.cpp", 170, "ProcessDownlinkAudio", "processdownlinkaudio: <block size mismatch btwn expected and actual> num frames received  = %u (data byte size = %u).\tdl mix blk size = %u\n\tdl mix asbd = %s\n\t process dl callcount = %u\n", v539, v71, v72, *(const char **)&buf.mSampleTime, *((_DWORD *)this + 3114));
LABEL_197:
              if (*(_QWORD *)&buf.mSampleTime)
                free(*(void **)&buf.mSampleTime);
            }
          }
        }
      }
      else
      {
        v550[3331] = 1;
        *((_QWORD *)this + 1980) = mach_absolute_time();
        *((_QWORD *)this + 1983) = 0x3FF0000000000000;
        VoiceProcessorV2::LogIOError((uint64_t)this, 23.002, (float)*((unsigned int *)this + 3114), (float)*((unsigned int *)this + 121), (float)v539, "processdl: <block size mismatch>");
        if (VPLogScope(void)::once != -1)
          dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
        v80 = (_QWORD *)VPLogScope(void)::scope;
        if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(2, VPLogScope(void)::scope, 0))
        {
          v81 = (*v80 ? *v80 : MEMORY[0x1E0C81028]);
          if (os_log_type_enabled(v81, OS_LOG_TYPE_DEFAULT))
          {
            LODWORD(buf.mSampleTime) = 136315394;
            *(_QWORD *)((char *)&buf.mSampleTime + 4) = "vpProcessDownlink_v9.cpp";
            WORD2(buf.mHostTime) = 1024;
            *(_DWORD *)((char *)&buf.mHostTime + 6) = 146;
            _os_log_impl(&dword_1B5ED0000, v81, OS_LOG_TYPE_DEFAULT, "%25s:%-5d  >vp> CoreAudio: ***** VP BLOCK WARNING: PROCESSDLAUDIO TRANSIENT INCORRECT BLOCK CONFIG", (uint8_t *)&buf, 0x12u);
          }
        }
        v82 = (int *)*((_QWORD *)this + 1570);
        if (v82 && (v550[3409] || v550[3410]))
        {
          if (VPLogScope(void)::once != -1)
            dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
          CALegacyLog::log(v82, 2, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v9/vpProcessDownlink_v9.cpp", 146, "ProcessDownlinkAudio", "CoreAudio: ***** VP BLOCK WARNING: PROCESSDLAUDIO TRANSIENT INCORRECT BLOCK CONFIG");
        }
        if (VPLogScope(void)::once != -1)
          dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
        v83 = (_QWORD *)VPLogScope(void)::scope;
        if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(2, VPLogScope(void)::scope, 0))
        {
          v84 = (*v83 ? *v83 : MEMORY[0x1E0C81028]);
          if (os_log_type_enabled(v84, OS_LOG_TYPE_DEFAULT))
          {
            v526 = (char *)this + 2488;
            v85 = a5->mBuffers[0].mDataByteSize;
            v86 = *((_DWORD *)this + 121);
            CAFormatter::CAFormatter((CAFormatter *)&v564, v35);
            v87 = *((_DWORD *)this + 3114);
            LODWORD(buf.mSampleTime) = 136316674;
            *(_QWORD *)((char *)&buf.mSampleTime + 4) = "vpProcessDownlink_v9.cpp";
            WORD2(buf.mHostTime) = 1024;
            *(_DWORD *)((char *)&buf.mHostTime + 6) = 150;
            WORD1(buf.mRateScalar) = 1024;
            HIDWORD(buf.mRateScalar) = v539;
            LOWORD(buf.mWordClockTime) = 1024;
            *(_DWORD *)((char *)&buf.mWordClockTime + 2) = v85;
            HIWORD(buf.mWordClockTime) = 1024;
            *(_DWORD *)&buf.mSMPTETime.mSubframes = v86;
            LOWORD(buf.mSMPTETime.mCounter) = 2080;
            *(Float64 *)((char *)&buf.mSMPTETime.mCounter + 2) = v564.mSampleTime;
            HIWORD(buf.mSMPTETime.mFlags) = 1024;
            *(_DWORD *)&buf.mSMPTETime.mHours = v87;
            _os_log_impl(&dword_1B5ED0000, v84, OS_LOG_TYPE_DEFAULT, "%25s:%-5d  >vp> warning: processdownlinkaudio: <transient block size mismatch btwn expected and actual> num frames received  = %u (data byte size = %u).\t dl mix buff size = %u\n\tdlmix asbd = %s\n\tprocess dl callcount = %u\n", (uint8_t *)&buf, 0x34u);
            if (*(_QWORD *)&v564.mSampleTime)
              free(*(void **)&v564.mSampleTime);
            v31 = v526;
          }
        }
        v88 = (int *)*((_QWORD *)this + 1570);
        if (v88 && (v550[3409] || v550[3410]))
        {
          if (VPLogScope(void)::once != -1)
            dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
          v89 = VPLogScope(void)::scope;
          v90 = a5->mBuffers[0].mDataByteSize;
          v91 = *((_DWORD *)this + 121);
          CAFormatter::CAFormatter((CAFormatter *)&buf, v35);
          CALegacyLog::log(v88, 2, v89, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v9/vpProcessDownlink_v9.cpp", 150, "ProcessDownlinkAudio", "warning: processdownlinkaudio: <transient block size mismatch btwn expected and actual> num frames received  = %u (data byte size = %u).\t dl mix buff size = %u\n\tdlmix asbd = %s\n\tprocess dl callcount = %u\n", v539, v90, v91, *(const char **)&buf.mSampleTime, *((_DWORD *)this + 3114));
          goto LABEL_197;
        }
      }
      if (v550[3409] && (VoiceProcessorV2::InjectionFilesReadSignal(this, 2, v539, a5), v550[3409]) || v550[3410])
        VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)this, 0x44u, v539, a5, &v558);
      v79 = *((_QWORD *)this + 1995);
      if (AudioIssueDetectorLibraryLoader(void)::once != -1)
        dispatch_once(&AudioIssueDetectorLibraryLoader(void)::once, &__block_literal_global_12440);
      if (!AudioIssueDetectorLibraryLoader(void)::libSym)
        goto LABEL_929;
LABEL_206:
      AudioIssueDetectorLibraryLoader(void)::libSym(v79, 68, 0, a5, v539, &v558);
    }
  }
  else if (a5->mNumberBuffers == *((_DWORD *)this + 89))
  {
    v35 = (VoiceProcessorV9 *)((char *)this + 328);
    if (!v550[3410])
      goto LABEL_82;
    goto LABEL_56;
  }
LABEL_929:
  if (v535)
    (*(void (**)(char *))(*(_QWORD *)v31 + 24))(v31);
  v17 = 0;
  LOBYTE(v16) = 1;
  v12 = v550;
LABEL_932:
  if (v12[3409] && *((_QWORD *)this + 1571))
  {
    v488 = mach_absolute_time();
    v489 = (int *)*((_QWORD *)this + 1571);
    v281 = (uint64_t)&AudioDataAnalysisManagerLibraryLoader(void)::libSym;
    if (VPTimestampLogScope(void)::once != -1)
      dispatch_once(&VPTimestampLogScope(void)::once, &__block_literal_global_5_19938);
    v192 = (uint64_t)&AudioDataAnalysisManagerLibraryLoader(void)::libSym;
    v193 = (double)v488 * 0.0000000416666667 - v18;
    CALegacyLog::log(v489, 5, VPTimestampLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v9/vpProcessDownlink_v9.cpp", 1326, "ProcessDownlinkAudio", "DL %f %f %f", v558.mSampleTime, v18, v193);
    v490 = *((_DWORD *)this + 121);
    v491 = *((double *)this + 41);
    if (v193 >= (double)v490 / v491)
    {
      v225 = (int *)*((_QWORD *)this + 1571);
      if (VPTimestampLogScope(void)::once != -1)
LABEL_963:
        dispatch_once(&VPTimestampLogScope(void)::once, &__block_literal_global_5_19938);
      CALegacyLog::log(v225, 5, *(_QWORD *)(v192 + 360), "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v9/vpProcessDownlink_v9.cpp", 1328, "ProcessDownlinkAudio", "DL ERROR, processing slower than RT - %f", v193);
      v490 = *((_DWORD *)this + 121);
      v491 = *((double *)this + 41);
    }
    if (v18 - *((double *)this + 1986) > (double)(*((_DWORD *)this + 294) + v490) / v491)
    {
      v492 = (int *)*((_QWORD *)this + 1571);
      if (*(_QWORD *)(v281 + 352) != -1)
        dispatch_once(&VPTimestampLogScope(void)::once, &__block_literal_global_5_19938);
      CALegacyLog::log(v492, 5, *(_QWORD *)(v192 + 360), "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v9/vpProcessDownlink_v9.cpp", 1330, "ProcessDownlinkAudio", "DL ERROR, not being called in a timely manner - %f", v18 - *((double *)this + 1986));
    }
    *((double *)this + 1986) = v18;
  }
  if ((v16 & 1) != 0)
  {
    if (*((_DWORD *)this + 19) != 1)
    {
      if (*((_BYTE *)this + 1648)
        || (v493 = FadeInOverFewFrames(*((AudioBufferList **)this + 204), a5, *((unsigned int *)this + 410), *((_DWORD *)this + 411)), *((_BYTE *)this + 1648) = v493, *((_DWORD *)this + 410) = HIDWORD(v493), (_BYTE)v493))
      {
        CopyAllBuffersABL(*((UInt32 **)this + 204), a5);
      }
    }
  }
  else
  {
    if (*((_DWORD *)this + 20) == 1)
    {
      if (!a5->mNumberBuffers)
        goto LABEL_961;
      v494 = 0;
      v495 = &a5->mBuffers[0].mData;
      do
      {
        bzero(*v495, *((unsigned int *)v495 - 1));
        ++v494;
        v495 += 2;
      }
      while (v494 < a5->mNumberBuffers);
    }
    else
    {
      *((_DWORD *)this + 410) = 0;
      *((_BYTE *)this + 1648) = 0;
      FadeOutOverOneFrame(*((AudioBufferList **)this + 204), a5);
    }
    v496 = *((_DWORD *)this + 20);
    if (v496 == 2 || v496 == 4)
      v17 = 0;
  }
  do
LABEL_961:
    v498 = __ldaxr(v13);
  while (__stlxr(v498 - 1, v13));
  return v17;
}

void sub_1B63C5780(_Unwind_Exception *exception_object)
{
  _DWORD *v1;
  unsigned int *v2;
  unsigned int v4;

  if (v1[18])
    (*(void (**)(_QWORD))(**(_QWORD **)v1 + 24))(*(_QWORD *)v1);
  do
    v4 = __ldaxr(v2);
  while (__stlxr(v4 - 1, v2));
  _Unwind_Resume(exception_object);
}

uint64_t caulk::function_ref<void ()(unsigned char const*,unsigned long)>::functor_invoker<VoiceProcessorV9::ProcessDownlinkAudio(AudioBufferList *,AudioBufferList *,AudioBufferList *,AudioBufferList *,unsigned int,AudioTimeStamp const&)::$_0>(uint64_t a1, void *inData, UInt32 inDataSize)
{
  return AudioUnitSetProperty(*(AudioUnit *)(**(_QWORD **)a1 + 3496), 0x73706D64u, 0, 0, inData, inDataSize);
}

void BeamformerTD::~BeamformerTD(BeamformerTD *this)
{
  BeamformerTD::~BeamformerTD(this);
  JUMPOUT(0x1BCC95CECLL);
}

{
  _QWORD *v2;
  void *v3;
  void *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  void *v10;
  _QWORD *v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  void *v25;
  uint64_t v26;
  void *v27;

  v2 = (_QWORD *)((char *)this + 508064);
  *(_QWORD *)this = &off_1E69DA258;
  BeamformerTD::Cleanup(this);
  v3 = (void *)v2[8];
  if (v3)
  {
    v2[9] = v3;
    operator delete(v3);
  }
  v4 = (void *)v2[5];
  if (v4)
  {
    v2[6] = v4;
    operator delete(v4);
  }
  v5 = (_QWORD *)((char *)this + 501152);
  v6 = (_QWORD *)((char *)this + 372128);
  v7 = (_QWORD *)((char *)this + 365216);
  v8 = (_QWORD *)((char *)this + 358304);
  v9 = (_QWORD *)((char *)this + 247712);
  v10 = (void *)v2[2];
  v11 = (_QWORD *)((char *)this + 240800);
  if (v10)
  {
    v2[3] = v10;
    operator delete(v10);
  }
  v12 = -6912;
  do
  {
    v13 = (void *)*(v2 - 1);
    if (v13)
    {
      *v2 = v13;
      operator delete(v13);
    }
    v2 -= 3;
    v12 += 24;
  }
  while (v12);
  v14 = -110592;
  do
  {
    v15 = (void *)*(v5 - 1);
    if (v15)
    {
      *v5 = v15;
      operator delete(v15);
    }
    v5 -= 3;
    v14 += 24;
  }
  while (v14);
  v16 = -6912;
  do
  {
    v17 = (void *)*(v6 - 1);
    if (v17)
    {
      *v6 = v17;
      operator delete(v17);
    }
    v6 -= 3;
    v16 += 24;
  }
  while (v16);
  v18 = -6912;
  do
  {
    v19 = (void *)*(v7 - 1);
    if (v19)
    {
      *v7 = v19;
      operator delete(v19);
    }
    v7 -= 3;
    v18 += 24;
  }
  while (v18);
  v20 = -110592;
  do
  {
    v21 = (void *)*(v8 - 1);
    if (v21)
    {
      *v8 = v21;
      operator delete(v21);
    }
    v8 -= 3;
    v20 += 24;
  }
  while (v20);
  v22 = -6912;
  do
  {
    v23 = (void *)*(v9 - 1);
    if (v23)
    {
      *v9 = v23;
      operator delete(v23);
    }
    v9 -= 3;
    v22 += 24;
  }
  while (v22);
  v24 = -110592;
  do
  {
    v25 = (void *)*(v11 - 1);
    if (v25)
    {
      *v11 = v25;
      operator delete(v25);
    }
    v11 -= 3;
    v24 += 24;
  }
  while (v24);
  v26 = 110592;
  do
  {
    v27 = *(void **)((char *)this + v26 + 19608);
    if (v27)
    {
      *(_QWORD *)((char *)this + v26 + 19616) = v27;
      operator delete(v27);
    }
    v26 -= 24;
  }
  while (v26);
  BeamformerBase::~BeamformerBase(this);
}

uint64_t BeamformerTD::Initialize(BeamformerTD *this, double a2, unsigned int a3)
{
  double v4;
  int32x2_t v5;
  float v6;
  unint64_t v7;
  _DWORD *v8;
  uint64_t v9;
  unint64_t v10;
  unsigned int v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t *v14;
  uint64_t *v15;
  unint64_t v16;
  char *v17;
  unint64_t v18;
  char *v19;
  uint64_t *v20;
  unint64_t v21;
  char *v22;
  NSObject *v23;
  __CFDictionary *v24;
  CFNumberRef v25;
  CA::AudioSampleRateConverter *v26;
  double v27;
  double v28;
  unint64_t v29;
  void **v30;
  unint64_t v31;
  double v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  char *v36;
  char **v37;
  unint64_t v38;
  float *v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  float v43;
  unint64_t v44;
  unint64_t v45;
  char *v46;
  char **v47;
  unint64_t v48;
  float *v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  float v53;
  int v54;
  int v55;
  int v56;
  int v57;
  unint64_t v58;
  const float **v59;
  unsigned int v60;
  char **v61;
  unint64_t v62;
  char **v63;
  unint64_t v64;
  unint64_t v65;
  unint64_t v66;
  unint64_t v67;
  float *v68;
  unint64_t v69;
  unint64_t v70;
  unint64_t v71;
  unint64_t v72;
  float *v73;
  const float **v74;
  uint64_t result;
  caulk *v76;
  std::runtime_error *v77;
  caulk *v78;
  std::runtime_error *v79;
  std::runtime_error *exception;
  int __C;
  std::string v82;
  int v83;
  __CFDictionary *v84;
  std::string valuePtr;
  char *v86;
  float *v87[2];

  v87[1] = *(float **)MEMORY[0x1E0C80C00];
  *((double *)this + 3) = a2;
  *((_DWORD *)this + 8) = a3;
  v4 = (float)a3;
  v5 = (int32x2_t)vcvt_u32_f32(vrnda_f32(vcvt_f32_f64(vmulq_n_f64(vdivq_f64(vcvtq_f64_f32(*(float32x2_t *)((char *)this + 88)), (float64x2_t)vdupq_lane_s64(COERCE__INT64(a2 * 0.5), 0)), v4))));
  *(int32x2_t *)((char *)this + 36) = v5;
  *(float *)&v4 = *((float *)this + 39) / (a2 * 0.5) * v4;
  *((float *)this + 13) = roundf(*(float *)&v4);
  *((_DWORD *)this + 11) = vsub_s32(vdup_lane_s32(v5, 1), v5).u32[0] + 1;
  v6 = a2 / (double)a3;
  *((float *)this + 12) = expf(-1.0 / (float)(*((float *)this + 24) * v6));
  if (!*((_BYTE *)this + 17))
  {
    if (AUBeamItTDLogScope(void)::once != -1)
      dispatch_once(&AUBeamItTDLogScope(void)::once, &__block_literal_global_12524);
    if (AUBeamItTDLogScope(void)::scope)
    {
      v23 = *(NSObject **)AUBeamItTDLogScope(void)::scope;
      if (!*(_QWORD *)AUBeamItTDLogScope(void)::scope)
        return 4294956421;
    }
    else
    {
      v23 = MEMORY[0x1E0C81028];
    }
    if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR))
    {
      LODWORD(valuePtr.__r_.__value_.__l.__data_) = 136315394;
      *(std::string::size_type *)((char *)valuePtr.__r_.__value_.__r.__words + 4) = (std::string::size_type)"BeamformerTD.cpp";
      WORD2(valuePtr.__r_.__value_.__r.__words[1]) = 1024;
      *(_DWORD *)((char *)&valuePtr.__r_.__value_.__r.__words[1] + 6) = 97;
      _os_log_impl(&dword_1B5ED0000, v23, OS_LOG_TYPE_ERROR, "%25s:%-5d Initialization failed, top level plist is not set.", (uint8_t *)&valuePtr, 0x12u);
    }
    return 4294956421;
  }
  v7 = *((unsigned int *)this + 3);
  valuePtr.__r_.__value_.__r.__words[0] = 0;
  std::vector<void *>::assign((uint64_t)this + 508080, v7, &valuePtr);
  v8 = (_DWORD *)((char *)this + 19608);
  v9 = *((_QWORD *)this + 63510);
  if (*((_QWORD *)this + 63511) != v9)
  {
    v10 = 0;
    v11 = 1;
    do
    {
      VPTimeFreqConverter_Create(0, *((_DWORD *)this + 8), (VPTimeFreqConverter **)(v9 + 8 * v10));
      v10 = v11;
      v9 = *((_QWORD *)this + 63510);
      ++v11;
    }
    while (v10 < (*((_QWORD *)this + 63511) - v9) >> 3);
  }
  (*(void (**)(BeamformerTD *))(*(_QWORD *)this + 144))(this);
  if (*((double *)this + 3) == *((double *)this + 2450))
  {
    *((_DWORD *)this + 4902) = *((_DWORD *)this + 4903);
    v12 = *((unsigned int *)this + 3);
    if ((_DWORD)v12)
    {
      v13 = 0;
      v14 = (uint64_t *)((char *)this + 501176);
      v15 = (uint64_t *)((char *)this + 390584);
      LODWORD(v16) = *((_DWORD *)this + 2);
      v17 = (char *)this + 247728;
      do
      {
        if ((_DWORD)v16)
        {
          v18 = 0;
          v19 = v17;
          v20 = v15;
          do
          {
            std::vector<float>::__assign_with_size[abi:ne180100]<float const*,float const*>(v19, (char *)*(v20 - 1), *v20, (*v20 - *(v20 - 1)) >> 2);
            ++v18;
            v16 = *((unsigned int *)this + 2);
            v20 += 3;
            v19 += 24;
          }
          while (v18 < v16);
          v12 = *((unsigned int *)this + 3);
        }
        ++v13;
        v15 += 48;
        v17 += 384;
      }
      while (v13 < v12);
      *((_DWORD *)this + 4904) = *((_DWORD *)this + 4905);
      if (v12)
      {
        v21 = 0;
        v22 = (char *)this + 358320;
        do
        {
          std::vector<float>::__assign_with_size[abi:ne180100]<float const*,float const*>(v22, (char *)*(v14 - 1), *v14, (*v14 - *(v14 - 1)) >> 2);
          ++v21;
          v12 = *((unsigned int *)this + 3);
          v14 += 3;
          v22 += 24;
        }
        while (v21 < v12);
      }
    }
    else
    {
      *((_DWORD *)this + 4904) = *((_DWORD *)this + 4905);
    }
  }
  else
  {
    CA::AudioSampleRateConverterBuilder::AudioSampleRateConverterBuilder((uint64_t)&v83, 0);
    CA::AudioSampleRateConverterBuilder::SetAttribute<double>(v84, (const void *)*MEMORY[0x1E0CFFD50], *((double *)this + 2450));
    CA::AudioSampleRateConverterBuilder::SetAttribute<double>(v84, (const void *)*MEMORY[0x1E0CFFD60], *((double *)this + 3));
    CA::AudioSampleRateConverterBuilder::SetAttribute<unsigned int>(v84, (const void *)*MEMORY[0x1E0CFFD40], 1852797549);
    CA::AudioSampleRateConverterBuilder::SetAttribute<unsigned int>(v84, (const void *)*MEMORY[0x1E0CFFD70], 96);
    CA::AudioSampleRateConverterBuilder::SetAttribute<unsigned int>(v84, (const void *)*MEMORY[0x1E0CFFD68], 1);
    v24 = v84;
    valuePtr.__r_.__value_.__s.__data_[0] = 0;
    v25 = CFNumberCreate(0, kCFNumberCharType, &valuePtr);
    if (!v25)
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Could not construct");
    }
    CFDictionarySetValue(v24, (const void *)*MEMORY[0x1E0CFFD48], v25);
    CFRelease(v25);
    CA::AudioSampleRateConverterBuilder::Build((CA::AudioSampleRateConverterBuilder *)&valuePtr);
    caulk::expected<long long,int>::value((uint64_t)&valuePtr);
    v26 = (CA::AudioSampleRateConverter *)valuePtr.__r_.__value_.__r.__words[0];
    valuePtr.__r_.__value_.__r.__words[0] = 0;
    caulk::__expected_detail::base<CA::AudioSampleRateConverter,int>::~base((uint64_t)&valuePtr);
    v27 = *((double *)this + 2450);
    v28 = *((double *)this + 3);
    LODWORD(valuePtr.__r_.__value_.__l.__data_) = 0;
    if (!AudioSampleRateConverterGetKernelSize())
      std::__throw_bad_optional_access[abi:ne180100]();
    v29 = (*((_DWORD *)this + 4903) + LODWORD(valuePtr.__r_.__value_.__l.__data_) - 1);
    __C = LODWORD(valuePtr.__r_.__value_.__l.__data_) - 1;
    *v8 = AudioSampleRateConverterGetExpectedNumberOfOutputFrames();
    v30 = (void **)((char *)this + 508104);
    LODWORD(valuePtr.__r_.__value_.__l.__data_) = 0;
    std::vector<float>::assign((char **)this + 63513, v29, &valuePtr);
    v31 = *((unsigned int *)this + 3);
    v32 = v27 / v28;
    if ((_DWORD)v31)
    {
      v33 = 0;
      LODWORD(v34) = *((_DWORD *)this + 2);
      do
      {
        if ((_DWORD)v34)
        {
          v35 = 0;
          do
          {
            v36 = (char *)this + 384 * v33 + 24 * v35;
            memcpy(*v30, *((const void **)v36 + 48822), 4 * *((unsigned int *)this + 4903));
            v37 = (char **)(v36 + 247728);
            v38 = *v8;
            LODWORD(valuePtr.__r_.__value_.__l.__data_) = 0;
            std::vector<float>::assign(v37, v38, &valuePtr);
            v39 = (float *)*v30;
            v86 = *v37;
            v87[0] = v39;
            v40 = CA::AudioSampleRateConverter::Process(v26, (const float *const *)v87, v29, &v86, (float *const *)*v8);
            if ((_DWORD)v40)
            {
              v76 = (caulk *)v40;
              v77 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
              caulk::string_from_4cc(v76, 1, &v82);
              std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>("failed to run SRC with status ", &v82, &valuePtr);
              std::runtime_error::runtime_error(v77, &valuePtr);
            }
            AudioSampleRateConverterReset();
            v41 = *v8;
            if ((_DWORD)v41)
            {
              v42 = *v37;
              do
              {
                v43 = v32 * *(float *)v42;
                *(float *)v42 = v43;
                v42 += 4;
                --v41;
              }
              while (v41);
            }
            ++v35;
            v34 = *((unsigned int *)this + 2);
          }
          while (v35 < v34);
          v31 = *((unsigned int *)this + 3);
        }
        ++v33;
      }
      while (v33 < v31);
    }
    v44 = (*((_DWORD *)this + 4905) + __C);
    *((_DWORD *)this + 4904) = AudioSampleRateConverterGetExpectedNumberOfOutputFrames();
    LODWORD(valuePtr.__r_.__value_.__l.__data_) = 0;
    std::vector<float>::assign((char **)v30, v44, &valuePtr);
    if (*((_DWORD *)this + 3))
    {
      v45 = 0;
      do
      {
        v46 = (char *)this + 24 * v45;
        memcpy(*v30, *((const void **)v46 + 62646), 4 * *((unsigned int *)this + 4905));
        v47 = (char **)(v46 + 358320);
        v48 = *((unsigned int *)this + 4904);
        LODWORD(valuePtr.__r_.__value_.__l.__data_) = 0;
        std::vector<float>::assign(v47, v48, &valuePtr);
        v49 = (float *)*v30;
        v86 = *v47;
        v87[0] = v49;
        v50 = CA::AudioSampleRateConverter::Process(v26, (const float *const *)v87, v44, &v86, (float *const *)*((unsigned int *)this + 4904));
        if ((_DWORD)v50)
        {
          v78 = (caulk *)v50;
          v79 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          caulk::string_from_4cc(v78, 1, &v82);
          std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>("failed to run SRC with status ", &v82, &valuePtr);
          std::runtime_error::runtime_error(v79, &valuePtr);
        }
        AudioSampleRateConverterReset();
        v51 = *((unsigned int *)this + 4904);
        if ((_DWORD)v51)
        {
          v52 = *v47;
          do
          {
            v53 = v32 * *(float *)v52;
            *(float *)v52 = v53;
            v52 += 4;
            --v51;
          }
          while (v51);
        }
        ++v45;
      }
      while (v45 < *((unsigned int *)this + 3));
    }
    AudioSampleRateConverterDispose();
    CA::AudioSampleRateConverterBuilder::~AudioSampleRateConverterBuilder((CA::AudioSampleRateConverterBuilder *)&v83);
    LODWORD(v12) = *((_DWORD *)this + 3);
  }
  v54 = *((_DWORD *)this + 17);
  v55 = *((_DWORD *)this + 8) - 1;
  v56 = v55 + *v8;
  v57 = v55 + *((_DWORD *)this + 4904);
  *((_DWORD *)this + 4906) = v56;
  *((_DWORD *)this + 4907) = v57;
  if ((_DWORD)v12)
  {
    v58 = 0;
    v59 = (const float **)((char *)this + 247728);
    v60 = v54 - 1;
    v61 = (char **)((char *)this + 130224);
    do
    {
      if (*((_DWORD *)this + 2))
      {
        v62 = 0;
        v63 = v61;
        do
        {
          v64 = *((unsigned int *)this + 4906);
          LODWORD(valuePtr.__r_.__value_.__l.__data_) = 0;
          std::vector<float>::assign(v63 - 13824, v64, &valuePtr);
          if (v60 < 2)
          {
            v65 = *((unsigned int *)this + 4906);
            LODWORD(valuePtr.__r_.__value_.__l.__data_) = 0;
            std::vector<float>::assign(v63, v65, &valuePtr);
          }
          ++v62;
          v63 += 3;
        }
        while (v62 < *((unsigned int *)this + 2));
      }
      v66 = *((unsigned int *)this + 4907);
      LODWORD(valuePtr.__r_.__value_.__l.__data_) = 0;
      std::vector<float>::assign((char **)this + 3 * v58++ + 30102, v66, &valuePtr);
      v67 = *((unsigned int *)this + 3);
      v61 += 48;
    }
    while (v58 < v67);
    v68 = (float *)((char *)this + 372144);
    if (*((_DWORD *)this + 3))
    {
      v69 = 0;
      v70 = *((unsigned int *)this + 2);
      v71 = v70;
      do
      {
        if (v71)
        {
          v72 = 0;
          v73 = v68;
          v74 = v59;
          do
          {
            *v68 = 0.0;
            if (*(float *)(*((_QWORD *)this + 3 * v69 + 45654) + 4 * v72) == 1.0)
            {
              vDSP_svesq(*v74, 1, v68, *v8);
              v70 = *((unsigned int *)this + 2);
            }
            ++v72;
            v74 += 3;
            ++v68;
          }
          while (v72 < v70);
          v67 = *((unsigned int *)this + 3);
          v71 = v70;
          v68 = v73;
        }
        ++v69;
        v59 += 48;
        v68 += 16;
      }
      while (v69 < v67);
    }
  }
  result = 0;
  *((_BYTE *)this + 16) = 1;
  return result;
}

void sub_1B63C6454(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t BeamformerTD::Reset(BeamformerTD *this)
{
  uint64_t *v2;
  unint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  char **v6;
  unint64_t v7;
  char **v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unsigned int v15;
  VPTimeFreqConverter *v16;
  int v18;
  int v19;
  int v20;

  v2 = (uint64_t *)((char *)this + 508080);
  *((_DWORD *)this + 27) = 0;
  *((_DWORD *)this + 28) = 0;
  vDSP_vclr(*((float **)this + 2394), 1, 0x120uLL);
  memset_pattern16((char *)this + 552, &unk_1B6629FB0, 0x480uLL);
  if (*((_DWORD *)this + 3))
  {
    v3 = 0;
    v4 = (unsigned int *)((char *)this + 19624);
    v5 = *((_DWORD *)this + 17) - 1;
    v6 = (char **)((char *)this + 130224);
    do
    {
      if (*((_DWORD *)this + 2))
      {
        v7 = 0;
        v8 = v6;
        do
        {
          v9 = *v4;
          v20 = 0;
          std::vector<float>::assign(v8 - 13824, v9, &v20);
          if (v5 <= 1)
          {
            v10 = *v4;
            v19 = 0;
            std::vector<float>::assign(v8, v10, &v19);
          }
          ++v7;
          v8 += 3;
        }
        while (v7 < *((unsigned int *)this + 2));
      }
      v11 = *((unsigned int *)this + 4907);
      v18 = 0;
      std::vector<float>::assign((char **)this + 3 * v3++ + 30102, v11, &v18);
      v6 += 48;
    }
    while (v3 < *((unsigned int *)this + 3));
  }
  v13 = *v2;
  v12 = v2[1];
  if (v12 != *v2)
  {
    v14 = 0;
    v15 = 1;
    do
    {
      v16 = *(VPTimeFreqConverter **)(v13 + 8 * v14);
      if (v16)
      {
        VPTimeFreqConverter::~VPTimeFreqConverter(v16);
        MEMORY[0x1BCC95CEC]();
        VPTimeFreqConverter_Create(0, *((_DWORD *)this + 8), (VPTimeFreqConverter **)(*v2 + 8 * v14));
        v13 = *v2;
        v12 = v2[1];
      }
      v14 = v15++;
    }
    while (v14 < (v12 - v13) >> 3);
  }
  return 0;
}

uint64_t BeamformerTD::Cleanup(BeamformerTD *this)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unsigned int v6;
  VPTimeFreqConverter *v7;

  v2 = (uint64_t *)((char *)this + 508080);
  v4 = *((_QWORD *)this + 63510);
  v3 = *((_QWORD *)this + 63511);
  if (v3 != v4)
  {
    v5 = 0;
    v6 = 1;
    do
    {
      v7 = *(VPTimeFreqConverter **)(v4 + 8 * v5);
      if (v7)
      {
        VPTimeFreqConverter::~VPTimeFreqConverter(v7);
        MEMORY[0x1BCC95CEC]();
        *(_QWORD *)(*v2 + 8 * v5) = 0;
        v4 = *v2;
        v3 = v2[1];
      }
      v5 = v6++;
    }
    while (v5 < (v3 - v4) >> 3);
  }
  *((_BYTE *)this + 16) = 0;
  return 0;
}

uint64_t BeamformerTD::SetProfile(BeamformerTD *this, CFDictionaryRef theDict)
{
  const __CFNumber *Value;
  unint64_t v4;
  char *v5;
  NSObject *v6;
  const __CFNumber *v7;
  NSObject *v8;
  const __CFNumber *v9;
  NSObject *v10;
  const __CFNumber *v11;
  NSObject *v12;
  const __CFNumber *v13;
  NSObject *v14;
  unint64_t v15;
  char *v16;
  std::string *v17;
  __int128 v18;
  void **v19;
  CFStringRef v20;
  const __CFDictionary *v21;
  uint64_t v22;
  NSObject *v23;
  void **v24;
  const __CFString *v25;
  uint64_t v26;
  NSObject *v27;
  const char *CStringPtr;
  const __CFNumber *v29;
  uint64_t v30;
  NSObject *v31;
  const __CFNumber *v32;
  uint64_t v33;
  NSObject *v34;
  const __CFNumber *v35;
  uint64_t v36;
  NSObject *v37;
  void **v38;
  void *v39;
  void **v40;
  void *v41;
  const __CFDictionary *v42;
  NSObject *v43;
  std::string *v44;
  unint64_t v45;
  char *v46;
  std::string *v47;
  __int128 v48;
  const char *v49;
  const __CFString *v50;
  void *v51;
  int v52;
  uint64_t v53;
  NSObject *v54;
  void **v55;
  NSObject *v56;
  std::string *p_p;
  uint64_t result;
  NSObject *v59;
  CAXException *v60;
  NSObject *v61;
  CAXException *v62;
  NSObject *v63;
  CAXException *v64;
  NSObject *v65;
  CAXException *v66;
  NSObject *v67;
  CAXException *exception;
  NSObject *v69;
  CAXException *v70;
  NSObject *v71;
  CAXException *v72;
  NSObject *v73;
  CAXException *v74;
  NSObject *v75;
  CAXException *v76;
  std::string __p;
  float v79;
  float v80;
  float v81;
  void *v82[2];
  int64_t v83;
  int v84;
  int v85;
  int v86;
  int v87;
  int valuePtr;
  _BYTE buf[28];
  __int16 v90;
  int v91;
  uint64_t v92;

  v92 = *MEMORY[0x1E0C80C00];
  valuePtr = 0;
  Value = (const __CFNumber *)CFDictionaryGetValue(theDict, CFSTR("SampleRate"));
  v5 = (char *)&xmmword_1EF135FF8 + 8;
  if (!CFNumberGetValue(Value, kCFNumberIntType, &valuePtr))
  {
    if (AUBeamItTDLogScope(void)::once != -1)
      dispatch_once(&AUBeamItTDLogScope(void)::once, &__block_literal_global_12524);
    if (AUBeamItTDLogScope(void)::scope)
    {
      if ((*(_BYTE *)(AUBeamItTDLogScope(void)::scope + 8) & 1) != 0)
      {
        v67 = *(NSObject **)AUBeamItTDLogScope(void)::scope;
        if (*(_QWORD *)AUBeamItTDLogScope(void)::scope)
        {
          if (os_log_type_enabled(*(os_log_t *)AUBeamItTDLogScope(void)::scope, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)buf = 136315394;
            *(_QWORD *)&buf[4] = "BeamformerTD.cpp";
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = 158;
            _os_log_impl(&dword_1B5ED0000, v67, OS_LOG_TYPE_DEBUG, "%25s:%-5d Failed to retrieve sample rate.\n", buf, 0x12u);
          }
        }
      }
    }
    exception = (CAXException *)__cxa_allocate_exception(0x110uLL);
    CAXException::CAXException(exception, "Failed to retrieve sample rate from input dictionary.", -1);
  }
  if (AUBeamItTDLogScope(void)::once != -1)
    dispatch_once(&AUBeamItTDLogScope(void)::once, &__block_literal_global_12524);
  if (AUBeamItTDLogScope(void)::scope)
  {
    if ((*(_BYTE *)(AUBeamItTDLogScope(void)::scope + 8) & 1) != 0)
    {
      v6 = *(NSObject **)AUBeamItTDLogScope(void)::scope;
      if (*(_QWORD *)AUBeamItTDLogScope(void)::scope)
      {
        if (os_log_type_enabled(*(os_log_t *)AUBeamItTDLogScope(void)::scope, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)buf = 136315650;
          *(_QWORD *)&buf[4] = "BeamformerTD.cpp";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = 156;
          *(_WORD *)&buf[18] = 1024;
          *(_DWORD *)&buf[20] = valuePtr;
          _os_log_impl(&dword_1B5ED0000, v6, OS_LOG_TYPE_DEBUG, "%25s:%-5d Successfully retrieved sample rate (%iHz).\n", buf, 0x18u);
        }
      }
    }
  }
  LODWORD(v4) = valuePtr;
  *((double *)this + 2450) = (double)v4;
  v87 = 0;
  v7 = (const __CFNumber *)CFDictionaryGetValue(theDict, CFSTR("nMicsUsed"));
  if (!CFNumberGetValue(v7, kCFNumberIntType, &v87))
  {
    if (AUBeamItTDLogScope(void)::once != -1)
      dispatch_once(&AUBeamItTDLogScope(void)::once, &__block_literal_global_12524);
    if (AUBeamItTDLogScope(void)::scope)
    {
      if ((*(_BYTE *)(AUBeamItTDLogScope(void)::scope + 8) & 1) != 0)
      {
        v69 = *(NSObject **)AUBeamItTDLogScope(void)::scope;
        if (*(_QWORD *)AUBeamItTDLogScope(void)::scope)
        {
          if (os_log_type_enabled(*(os_log_t *)AUBeamItTDLogScope(void)::scope, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)buf = 136315394;
            *(_QWORD *)&buf[4] = "BeamformerTD.cpp";
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = 173;
            _os_log_impl(&dword_1B5ED0000, v69, OS_LOG_TYPE_DEBUG, "%25s:%-5d Failed to retrieve number of mics used.\n", buf, 0x12u);
          }
        }
      }
    }
    v70 = (CAXException *)__cxa_allocate_exception(0x110uLL);
    CAXException::CAXException(v70, "Failed to retrieve number of mics used from input dictionary.", -1);
  }
  if (AUBeamItTDLogScope(void)::once != -1)
    dispatch_once(&AUBeamItTDLogScope(void)::once, &__block_literal_global_12524);
  if (AUBeamItTDLogScope(void)::scope)
  {
    if ((*(_BYTE *)(AUBeamItTDLogScope(void)::scope + 8) & 1) != 0)
    {
      v8 = *(NSObject **)AUBeamItTDLogScope(void)::scope;
      if (*(_QWORD *)AUBeamItTDLogScope(void)::scope)
      {
        if (os_log_type_enabled(*(os_log_t *)AUBeamItTDLogScope(void)::scope, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)buf = 136315650;
          *(_QWORD *)&buf[4] = "BeamformerTD.cpp";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = 171;
          *(_WORD *)&buf[18] = 1024;
          *(_DWORD *)&buf[20] = v87;
          _os_log_impl(&dword_1B5ED0000, v8, OS_LOG_TYPE_DEBUG, "%25s:%-5d Successfully retrieved number of mics used (%i).\n", buf, 0x18u);
        }
      }
    }
  }
  *((_DWORD *)this + 2) = v87;
  v86 = 0;
  v9 = (const __CFNumber *)CFDictionaryGetValue(theDict, CFSTR("nBeams"));
  if (!CFNumberGetValue(v9, kCFNumberIntType, &v86))
  {
    if (AUBeamItTDLogScope(void)::once != -1)
      dispatch_once(&AUBeamItTDLogScope(void)::once, &__block_literal_global_12524);
    if (AUBeamItTDLogScope(void)::scope)
    {
      if ((*(_BYTE *)(AUBeamItTDLogScope(void)::scope + 8) & 1) != 0)
      {
        v71 = *(NSObject **)AUBeamItTDLogScope(void)::scope;
        if (*(_QWORD *)AUBeamItTDLogScope(void)::scope)
        {
          if (os_log_type_enabled(*(os_log_t *)AUBeamItTDLogScope(void)::scope, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)buf = 136315394;
            *(_QWORD *)&buf[4] = "BeamformerTD.cpp";
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = 188;
            _os_log_impl(&dword_1B5ED0000, v71, OS_LOG_TYPE_DEBUG, "%25s:%-5d Failed to retrieve number of beams.\n", buf, 0x12u);
          }
        }
      }
    }
    v72 = (CAXException *)__cxa_allocate_exception(0x110uLL);
    CAXException::CAXException(v72, "Failed to retrieve number of beams from input dictionary.", -1);
  }
  if (AUBeamItTDLogScope(void)::once != -1)
    dispatch_once(&AUBeamItTDLogScope(void)::once, &__block_literal_global_12524);
  if (AUBeamItTDLogScope(void)::scope)
  {
    if ((*(_BYTE *)(AUBeamItTDLogScope(void)::scope + 8) & 1) != 0)
    {
      v10 = *(NSObject **)AUBeamItTDLogScope(void)::scope;
      if (*(_QWORD *)AUBeamItTDLogScope(void)::scope)
      {
        if (os_log_type_enabled(*(os_log_t *)AUBeamItTDLogScope(void)::scope, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)buf = 136315650;
          *(_QWORD *)&buf[4] = "BeamformerTD.cpp";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = 186;
          *(_WORD *)&buf[18] = 1024;
          *(_DWORD *)&buf[20] = v86;
          _os_log_impl(&dword_1B5ED0000, v10, OS_LOG_TYPE_DEBUG, "%25s:%-5d Successfully retrieved number of beams (%i).\n", buf, 0x18u);
        }
      }
    }
  }
  *((_DWORD *)this + 3) = v86;
  v85 = 0;
  v11 = (const __CFNumber *)CFDictionaryGetValue(theDict, CFSTR("BFFilterLength"));
  if (!CFNumberGetValue(v11, kCFNumberIntType, &v85))
  {
    if (AUBeamItTDLogScope(void)::once != -1)
      dispatch_once(&AUBeamItTDLogScope(void)::once, &__block_literal_global_12524);
    if (AUBeamItTDLogScope(void)::scope)
    {
      if ((*(_BYTE *)(AUBeamItTDLogScope(void)::scope + 8) & 1) != 0)
      {
        v73 = *(NSObject **)AUBeamItTDLogScope(void)::scope;
        if (*(_QWORD *)AUBeamItTDLogScope(void)::scope)
        {
          if (os_log_type_enabled(*(os_log_t *)AUBeamItTDLogScope(void)::scope, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)buf = 136315394;
            *(_QWORD *)&buf[4] = "BeamformerTD.cpp";
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = 203;
            _os_log_impl(&dword_1B5ED0000, v73, OS_LOG_TYPE_DEBUG, "%25s:%-5d Failed to retrieve beamforming filter length.\n", buf, 0x12u);
          }
        }
      }
    }
    v74 = (CAXException *)__cxa_allocate_exception(0x110uLL);
    CAXException::CAXException(v74, "Failed to retrieve beamforming filter length from input dictionary.", -1);
  }
  if (AUBeamItTDLogScope(void)::once != -1)
    dispatch_once(&AUBeamItTDLogScope(void)::once, &__block_literal_global_12524);
  if (AUBeamItTDLogScope(void)::scope)
  {
    if ((*(_BYTE *)(AUBeamItTDLogScope(void)::scope + 8) & 1) != 0)
    {
      v12 = *(NSObject **)AUBeamItTDLogScope(void)::scope;
      if (*(_QWORD *)AUBeamItTDLogScope(void)::scope)
      {
        if (os_log_type_enabled(*(os_log_t *)AUBeamItTDLogScope(void)::scope, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)buf = 136315650;
          *(_QWORD *)&buf[4] = "BeamformerTD.cpp";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = 201;
          *(_WORD *)&buf[18] = 1024;
          *(_DWORD *)&buf[20] = v85;
          _os_log_impl(&dword_1B5ED0000, v12, OS_LOG_TYPE_DEBUG, "%25s:%-5d Successfully retrieved beamforming filter length (%i).\n", buf, 0x18u);
        }
      }
    }
  }
  *((_DWORD *)this + 4903) = v85;
  v84 = 0;
  v13 = (const __CFNumber *)CFDictionaryGetValue(theDict, CFSTR("EQFilterLength"));
  if (!CFNumberGetValue(v13, kCFNumberIntType, &v84))
  {
    if (AUBeamItTDLogScope(void)::once != -1)
      dispatch_once(&AUBeamItTDLogScope(void)::once, &__block_literal_global_12524);
    if (AUBeamItTDLogScope(void)::scope)
    {
      if ((*(_BYTE *)(AUBeamItTDLogScope(void)::scope + 8) & 1) != 0)
      {
        v75 = *(NSObject **)AUBeamItTDLogScope(void)::scope;
        if (*(_QWORD *)AUBeamItTDLogScope(void)::scope)
        {
          if (os_log_type_enabled(*(os_log_t *)AUBeamItTDLogScope(void)::scope, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)buf = 136315394;
            *(_QWORD *)&buf[4] = "BeamformerTD.cpp";
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = 218;
            _os_log_impl(&dword_1B5ED0000, v75, OS_LOG_TYPE_DEBUG, "%25s:%-5d Failed to retrieve EQ filter length.\n", buf, 0x12u);
          }
        }
      }
    }
    v76 = (CAXException *)__cxa_allocate_exception(0x110uLL);
    CAXException::CAXException(v76, "Failed to retrieve EQ filter length from input dictionary.", -1);
  }
  if (AUBeamItTDLogScope(void)::once != -1)
    dispatch_once(&AUBeamItTDLogScope(void)::once, &__block_literal_global_12524);
  if (AUBeamItTDLogScope(void)::scope)
  {
    if ((*(_BYTE *)(AUBeamItTDLogScope(void)::scope + 8) & 1) != 0)
    {
      v14 = *(NSObject **)AUBeamItTDLogScope(void)::scope;
      if (*(_QWORD *)AUBeamItTDLogScope(void)::scope)
      {
        if (os_log_type_enabled(*(os_log_t *)AUBeamItTDLogScope(void)::scope, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)buf = 136315650;
          *(_QWORD *)&buf[4] = "BeamformerTD.cpp";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = 216;
          *(_WORD *)&buf[18] = 1024;
          *(_DWORD *)&buf[20] = v84;
          _os_log_impl(&dword_1B5ED0000, v14, OS_LOG_TYPE_DEBUG, "%25s:%-5d Successfully retrieved EQ filter length (%i).\n", buf, 0x18u);
        }
      }
    }
  }
  *((_DWORD *)this + 4905) = v84;
  if (!*((_DWORD *)this + 3))
  {
LABEL_144:
    result = 0;
    *((_BYTE *)this + 17) = 1;
    return result;
  }
  v15 = 0;
  v16 = (char *)this + 390576;
  while (1)
  {
    std::to_string((std::string *)buf, v15);
    v17 = std::string::insert((std::string *)buf, 0, "Beam", 4uLL);
    v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
    v83 = v17->__r_.__value_.__r.__words[2];
    *(_OWORD *)v82 = v18;
    v17->__r_.__value_.__l.__size_ = 0;
    v17->__r_.__value_.__r.__words[2] = 0;
    v17->__r_.__value_.__r.__words[0] = 0;
    if ((buf[23] & 0x80000000) != 0)
      operator delete(*(void **)buf);
    if (v83 >= 0)
      v19 = v82;
    else
      v19 = (void **)v82[0];
    v20 = CFStringCreateWithCString(0, (const char *)v19, 0x8000100u);
    v21 = (const __CFDictionary *)CFDictionaryGetValue(theDict, v20);
    if (!v21)
    {
      if (AUBeamItTDLogScope(void)::once != -1)
        dispatch_once(&AUBeamItTDLogScope(void)::once, &__block_literal_global_12524);
      v53 = *((_QWORD *)v5 + 361);
      if (v53)
      {
        if ((*(_BYTE *)(v53 + 8) & 1) != 0)
        {
          v54 = *(NSObject **)v53;
          if (*(_QWORD *)v53)
          {
            if (os_log_type_enabled(*(os_log_t *)v53, OS_LOG_TYPE_DEBUG))
            {
              v55 = v82;
              if (v83 < 0)
                v55 = (void **)v82[0];
              *(_DWORD *)buf = 136315650;
              *(_QWORD *)&buf[4] = "BeamformerTD.cpp";
              *(_WORD *)&buf[12] = 1024;
              *(_DWORD *)&buf[14] = 236;
              *(_WORD *)&buf[18] = 2080;
              *(_QWORD *)&buf[20] = v55;
              _os_log_impl(&dword_1B5ED0000, v54, OS_LOG_TYPE_DEBUG, "%25s:%-5d Missing dictionary: %s\n", buf, 0x1Cu);
            }
          }
        }
      }
      CFRelease(v20);
      goto LABEL_128;
    }
    if (AUBeamItTDLogScope(void)::once != -1)
      dispatch_once(&AUBeamItTDLogScope(void)::once, &__block_literal_global_12524);
    v22 = *((_QWORD *)v5 + 361);
    if (v22)
    {
      if ((*(_BYTE *)(v22 + 8) & 1) != 0)
      {
        v23 = *(NSObject **)v22;
        if (*(_QWORD *)v22)
        {
          if (os_log_type_enabled(*(os_log_t *)v22, OS_LOG_TYPE_DEBUG))
          {
            v24 = v82;
            if (v83 < 0)
              v24 = (void **)v82[0];
            *(_DWORD *)buf = 136315650;
            *(_QWORD *)&buf[4] = "BeamformerTD.cpp";
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = 242;
            *(_WORD *)&buf[18] = 2080;
            *(_QWORD *)&buf[20] = v24;
            _os_log_impl(&dword_1B5ED0000, v23, OS_LOG_TYPE_DEBUG, "%25s:%-5d Found the dictionary: %s\n", buf, 0x1Cu);
          }
        }
      }
    }
    CFRelease(v20);
    v25 = (const __CFString *)CFDictionaryGetValue(v21, CFSTR("Description"));
    if (!v25)
    {
      if (AUBeamItTDLogScope(void)::once != -1)
        dispatch_once(&AUBeamItTDLogScope(void)::once, &__block_literal_global_12524);
      if (AUBeamItTDLogScope(void)::scope)
      {
        if ((*(_BYTE *)(AUBeamItTDLogScope(void)::scope + 8) & 1) != 0)
        {
          v63 = *(NSObject **)AUBeamItTDLogScope(void)::scope;
          if (*(_QWORD *)AUBeamItTDLogScope(void)::scope)
          {
            if (os_log_type_enabled(*(os_log_t *)AUBeamItTDLogScope(void)::scope, OS_LOG_TYPE_DEBUG))
            {
              *(_DWORD *)buf = 136315394;
              *(_QWORD *)&buf[4] = "BeamformerTD.cpp";
              *(_WORD *)&buf[12] = 1024;
              *(_DWORD *)&buf[14] = 251;
              _os_log_impl(&dword_1B5ED0000, v63, OS_LOG_TYPE_DEBUG, "%25s:%-5d Failed to retrieve the beam description.\n", buf, 0x12u);
            }
          }
        }
      }
      v64 = (CAXException *)__cxa_allocate_exception(0x110uLL);
      CAXException::CAXException(v64, "Failed to retrieve the beam description from input dictionary.", -1);
    }
    if (AUBeamItTDLogScope(void)::once != -1)
      dispatch_once(&AUBeamItTDLogScope(void)::once, &__block_literal_global_12524);
    v26 = *((_QWORD *)v5 + 361);
    if (v26)
    {
      if ((*(_BYTE *)(v26 + 8) & 1) != 0)
      {
        v27 = *(NSObject **)v26;
        if (*(_QWORD *)v26)
        {
          if (os_log_type_enabled(*(os_log_t *)v26, OS_LOG_TYPE_DEBUG))
          {
            CStringPtr = CFStringGetCStringPtr(v25, 0x8000100u);
            *(_DWORD *)buf = 136315906;
            *(_QWORD *)&buf[4] = "BeamformerTD.cpp";
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = 249;
            *(_WORD *)&buf[18] = 2080;
            *(_QWORD *)&buf[20] = CStringPtr;
            v90 = 1024;
            v91 = v15;
            _os_log_impl(&dword_1B5ED0000, v27, OS_LOG_TYPE_DEBUG, "%25s:%-5d Successfully retrieved the description (%s) for Beam %d.\n", buf, 0x22u);
          }
        }
      }
    }
    v81 = 0.0;
    v29 = (const __CFNumber *)CFDictionaryGetValue(v21, CFSTR("Distance"));
    if (!CFNumberGetValue(v29, kCFNumberFloat32Type, &v81))
    {
      if (AUBeamItTDLogScope(void)::once != -1)
        dispatch_once(&AUBeamItTDLogScope(void)::once, &__block_literal_global_12524);
      if (AUBeamItTDLogScope(void)::scope)
      {
        if ((*(_BYTE *)(AUBeamItTDLogScope(void)::scope + 8) & 1) != 0)
        {
          v61 = *(NSObject **)AUBeamItTDLogScope(void)::scope;
          if (*(_QWORD *)AUBeamItTDLogScope(void)::scope)
          {
            if (os_log_type_enabled(*(os_log_t *)AUBeamItTDLogScope(void)::scope, OS_LOG_TYPE_DEBUG))
            {
              *(_DWORD *)buf = 136315394;
              *(_QWORD *)&buf[4] = "BeamformerTD.cpp";
              *(_WORD *)&buf[12] = 1024;
              *(_DWORD *)&buf[14] = 264;
              _os_log_impl(&dword_1B5ED0000, v61, OS_LOG_TYPE_DEBUG, "%25s:%-5d Failed to retrieve beam distance.\n", buf, 0x12u);
            }
          }
        }
      }
      v62 = (CAXException *)__cxa_allocate_exception(0x110uLL);
      CAXException::CAXException(v62, "Failed to retrieve beam distance from input dictionary.", -1);
    }
    if (AUBeamItTDLogScope(void)::once != -1)
      dispatch_once(&AUBeamItTDLogScope(void)::once, &__block_literal_global_12524);
    v30 = *((_QWORD *)v5 + 361);
    if (v30)
    {
      if ((*(_BYTE *)(v30 + 8) & 1) != 0)
      {
        v31 = *(NSObject **)v30;
        if (*(_QWORD *)v30)
        {
          if (os_log_type_enabled(*(os_log_t *)v30, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)buf = 136315650;
            *(_QWORD *)&buf[4] = "BeamformerTD.cpp";
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = 262;
            *(_WORD *)&buf[18] = 2048;
            *(double *)&buf[20] = v81;
            _os_log_impl(&dword_1B5ED0000, v31, OS_LOG_TYPE_DEBUG, "%25s:%-5d Successfully retrieved beam distance (%0.2f).\n", buf, 0x1Cu);
          }
        }
      }
    }
    *((float *)this + v15 + 426) = v81;
    v80 = 0.0;
    v32 = (const __CFNumber *)CFDictionaryGetValue(v21, CFSTR("Azimuth"));
    if (!CFNumberGetValue(v32, kCFNumberFloat32Type, &v80))
    {
      if (AUBeamItTDLogScope(void)::once != -1)
        dispatch_once(&AUBeamItTDLogScope(void)::once, &__block_literal_global_12524);
      if (AUBeamItTDLogScope(void)::scope)
      {
        if ((*(_BYTE *)(AUBeamItTDLogScope(void)::scope + 8) & 1) != 0)
        {
          v59 = *(NSObject **)AUBeamItTDLogScope(void)::scope;
          if (*(_QWORD *)AUBeamItTDLogScope(void)::scope)
          {
            if (os_log_type_enabled(*(os_log_t *)AUBeamItTDLogScope(void)::scope, OS_LOG_TYPE_DEBUG))
            {
              *(_DWORD *)buf = 136315394;
              *(_QWORD *)&buf[4] = "BeamformerTD.cpp";
              *(_WORD *)&buf[12] = 1024;
              *(_DWORD *)&buf[14] = 278;
              _os_log_impl(&dword_1B5ED0000, v59, OS_LOG_TYPE_DEBUG, "%25s:%-5d Failed to retrieve beam azimuth.\n", buf, 0x12u);
            }
          }
        }
      }
      v60 = (CAXException *)__cxa_allocate_exception(0x110uLL);
      CAXException::CAXException(v60, "Failed to retrieve beam azimuth from input dictionary.", -1);
    }
    if (AUBeamItTDLogScope(void)::once != -1)
      dispatch_once(&AUBeamItTDLogScope(void)::once, &__block_literal_global_12524);
    v33 = *((_QWORD *)v5 + 361);
    if (v33)
    {
      if ((*(_BYTE *)(v33 + 8) & 1) != 0)
      {
        v34 = *(NSObject **)v33;
        if (*(_QWORD *)v33)
        {
          if (os_log_type_enabled(*(os_log_t *)v33, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)buf = 136315650;
            *(_QWORD *)&buf[4] = "BeamformerTD.cpp";
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = 276;
            *(_WORD *)&buf[18] = 2048;
            *(double *)&buf[20] = v80;
            _os_log_impl(&dword_1B5ED0000, v34, OS_LOG_TYPE_DEBUG, "%25s:%-5d Successfully retrieved beam azimuth (%0.2f).\n", buf, 0x1Cu);
          }
        }
      }
    }
    *((float *)this + v15 + 714) = v80;
    v79 = 0.0;
    v35 = (const __CFNumber *)CFDictionaryGetValue(v21, CFSTR("Elevation"));
    if (!CFNumberGetValue(v35, kCFNumberFloat32Type, &v79))
    {
      if (AUBeamItTDLogScope(void)::once != -1)
        dispatch_once(&AUBeamItTDLogScope(void)::once, &__block_literal_global_12524);
      if (AUBeamItTDLogScope(void)::scope)
      {
        if ((*(_BYTE *)(AUBeamItTDLogScope(void)::scope + 8) & 1) != 0)
        {
          v65 = *(NSObject **)AUBeamItTDLogScope(void)::scope;
          if (*(_QWORD *)AUBeamItTDLogScope(void)::scope)
          {
            if (os_log_type_enabled(*(os_log_t *)AUBeamItTDLogScope(void)::scope, OS_LOG_TYPE_DEBUG))
            {
              *(_DWORD *)buf = 136315394;
              *(_QWORD *)&buf[4] = "BeamformerTD.cpp";
              *(_WORD *)&buf[12] = 1024;
              *(_DWORD *)&buf[14] = 292;
              _os_log_impl(&dword_1B5ED0000, v65, OS_LOG_TYPE_DEBUG, "%25s:%-5d Failed to retrieve beam elevation.\n", buf, 0x12u);
            }
          }
        }
      }
      v66 = (CAXException *)__cxa_allocate_exception(0x110uLL);
      CAXException::CAXException(v66, "Failed to retrieve beam elevation from input dictionary.", -1);
    }
    if (AUBeamItTDLogScope(void)::once != -1)
      dispatch_once(&AUBeamItTDLogScope(void)::once, &__block_literal_global_12524);
    v36 = *((_QWORD *)v5 + 361);
    if (v36)
    {
      if ((*(_BYTE *)(v36 + 8) & 1) != 0)
      {
        v37 = *(NSObject **)v36;
        if (*(_QWORD *)v36)
        {
          if (os_log_type_enabled(*(os_log_t *)v36, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)buf = 136315650;
            *(_QWORD *)&buf[4] = "BeamformerTD.cpp";
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = 290;
            *(_WORD *)&buf[18] = 2048;
            *(double *)&buf[20] = v79;
            _os_log_impl(&dword_1B5ED0000, v37, OS_LOG_TYPE_DEBUG, "%25s:%-5d Successfully retrieved beam elevation (%0.2f).\n", buf, 0x1Cu);
          }
        }
      }
    }
    *((float *)this + v15 + 1002) = v79;
    BeamformerBase::ReadVectorFromDictionary((BeamformerBase *)buf, v21, CFSTR("NonZeroMics"));
    v38 = (void **)((char *)this + 24 * v15 + 365232);
    v39 = *v38;
    if (*v38)
    {
      *((_QWORD *)this + 3 * v15 + 45655) = v39;
      operator delete(v39);
      *v38 = 0;
      *((_QWORD *)this + 3 * v15 + 45655) = 0;
      *((_QWORD *)this + 3 * v15 + 45656) = 0;
    }
    *(_OWORD *)v38 = *(_OWORD *)buf;
    *((_QWORD *)this + 3 * v15 + 45656) = *(_QWORD *)&buf[16];
    BeamformerBase::ReadVectorFromDictionary((BeamformerBase *)buf, v21, CFSTR("EQSelectionFilter"));
    v40 = (void **)((char *)this + 24 * v15 + 501168);
    v41 = *v40;
    if (*v40)
    {
      *((_QWORD *)this + 3 * v15 + 62647) = v41;
      operator delete(v41);
      *v40 = 0;
      *((_QWORD *)this + 3 * v15 + 62647) = 0;
      *((_QWORD *)this + 3 * v15 + 62648) = 0;
    }
    *(_OWORD *)v40 = *(_OWORD *)buf;
    *((_QWORD *)this + 3 * v15 + 62648) = *(_QWORD *)&buf[16];
    v42 = (const __CFDictionary *)CFDictionaryGetValue(v21, CFSTR("BFFilter"));
    if (!v42)
    {
      if (AUBeamItTDLogScope(void)::once != -1)
        dispatch_once(&AUBeamItTDLogScope(void)::once, &__block_literal_global_12524);
      if (AUBeamItTDLogScope(void)::scope)
      {
        if ((*(_BYTE *)(AUBeamItTDLogScope(void)::scope + 8) & 1) != 0)
        {
          v56 = *(NSObject **)AUBeamItTDLogScope(void)::scope;
          if (*(_QWORD *)AUBeamItTDLogScope(void)::scope)
          {
            if (os_log_type_enabled(*(os_log_t *)AUBeamItTDLogScope(void)::scope, OS_LOG_TYPE_DEBUG))
            {
              std::string::basic_string[abi:ne180100]<0>(&__p, "Missing dictionary BFFilter");
              p_p = &__p;
              if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
                p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
              *(_DWORD *)buf = 136315650;
              *(_QWORD *)&buf[4] = "BeamformerTD.cpp";
              *(_WORD *)&buf[12] = 1024;
              *(_DWORD *)&buf[14] = 312;
              *(_WORD *)&buf[18] = 2080;
              *(_QWORD *)&buf[20] = p_p;
              _os_log_impl(&dword_1B5ED0000, v56, OS_LOG_TYPE_DEBUG, "%25s:%-5d %s\n", buf, 0x1Cu);
              if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
                operator delete(__p.__r_.__value_.__l.__data_);
            }
          }
        }
      }
LABEL_128:
      v52 = 1;
      goto LABEL_129;
    }
    if (AUBeamItTDLogScope(void)::once != -1)
      dispatch_once(&AUBeamItTDLogScope(void)::once, &__block_literal_global_12524);
    if (AUBeamItTDLogScope(void)::scope)
    {
      if ((*(_BYTE *)(AUBeamItTDLogScope(void)::scope + 8) & 1) != 0)
      {
        v43 = *(NSObject **)AUBeamItTDLogScope(void)::scope;
        if (*(_QWORD *)AUBeamItTDLogScope(void)::scope)
        {
          if (os_log_type_enabled(*(os_log_t *)AUBeamItTDLogScope(void)::scope, OS_LOG_TYPE_DEBUG))
          {
            std::string::basic_string[abi:ne180100]<0>(&__p, "Found the dictionary BFFilter.");
            v44 = &__p;
            if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
              v44 = (std::string *)__p.__r_.__value_.__r.__words[0];
            *(_DWORD *)buf = 136315650;
            *(_QWORD *)&buf[4] = "BeamformerTD.cpp";
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = 317;
            *(_WORD *)&buf[18] = 2080;
            *(_QWORD *)&buf[20] = v44;
            _os_log_impl(&dword_1B5ED0000, v43, OS_LOG_TYPE_DEBUG, "%25s:%-5d %s\n", buf, 0x1Cu);
            if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
              operator delete(__p.__r_.__value_.__l.__data_);
          }
        }
      }
    }
    if (*((_DWORD *)this + 2))
    {
      v45 = 0;
      v46 = v16;
      do
      {
        std::to_string(&__p, v45);
        v47 = std::string::insert(&__p, 0, "Mic", 3uLL);
        v48 = *(_OWORD *)&v47->__r_.__value_.__l.__data_;
        *(_QWORD *)&buf[16] = *((_QWORD *)&v47->__r_.__value_.__l + 2);
        *(_OWORD *)buf = v48;
        v47->__r_.__value_.__l.__size_ = 0;
        v47->__r_.__value_.__r.__words[2] = 0;
        v47->__r_.__value_.__r.__words[0] = 0;
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
        if (buf[23] >= 0)
          v49 = buf;
        else
          v49 = *(const char **)buf;
        v50 = CFStringCreateWithCString(0, v49, 0x8000100u);
        BeamformerBase::ReadVectorFromDictionary((BeamformerBase *)&__p, v42, v50);
        v51 = *(void **)v46;
        if (*(_QWORD *)v46)
        {
          *((_QWORD *)v46 + 1) = v51;
          operator delete(v51);
          *(_QWORD *)v46 = 0;
          *((_QWORD *)v46 + 1) = 0;
          *((_QWORD *)v46 + 2) = 0;
        }
        *(std::string *)v46 = __p;
        CFRelease(v50);
        if ((buf[23] & 0x80000000) != 0)
          operator delete(*(void **)buf);
        ++v45;
        v46 += 24;
      }
      while (v45 < *((unsigned int *)this + 2));
    }
    v52 = 0;
LABEL_129:
    if (SHIBYTE(v83) < 0)
      operator delete(v82[0]);
    if (v52)
      return 4294956446;
    ++v15;
    v16 += 384;
    v5 = (_BYTE *)(&xmmword_1EF135FF8 + 8);
    if (v15 >= *((unsigned int *)this + 3))
      goto LABEL_144;
  }
}

void sub_1B63C7C70(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38)
{
  if (a29 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t BeamformerBase::SetSubbandDOACalcuationEnabled(BeamformerBase *this)
{
  return 4294956446;
}

uint64_t BeamformerBase::GetSubbandDOACalcuationEnabled(BeamformerBase *this)
{
  return 0;
}

uint64_t BeamformerBase::BorrowSubbandDOA(BeamformerBase *this)
{
  return 0;
}

void BeamformerTD::MakeABeam(uint64_t a1, unsigned int *a2, char **a3, unsigned int a4, int a5)
{
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  float **v11;
  _QWORD *v12;
  uint64_t v13;
  vDSP_Length v14;
  vDSP_Length v15;
  const float *v16;
  float **v17;
  float *v18;
  float *__C;
  unsigned int *v23;
  int v24;

  v7 = *(unsigned int *)(a1 + 32);
  v24 = 0;
  std::vector<float>::assign(a3, v7, &v24);
  v23 = a2;
  v8 = *a2;
  if ((_DWORD)v8)
  {
    v9 = 0;
    v10 = a1 + 384 * a4;
    v11 = (float **)(v10 + 130224);
    v12 = (_QWORD *)(v10 + 247728);
    v13 = 4;
    do
    {
      if (*(float *)(*(_QWORD *)(a1 + 24 * a4 + 365232) + 4 * v9) == 1.0)
      {
        __C = *(float **)(a1 + 19056);
        v14 = *(unsigned int *)(a1 + 32);
        v15 = *(unsigned int *)(a1 + 19608);
        v16 = (const float *)(*v12 + 4 * v15 - 4);
        v17 = v11 - 13824;
        if (a5)
          v17 = v11;
        v18 = *v17;
        memcpy(&(*v17)[v15 - 1], *(const void **)&v23[v13], 4 * v14);
        vDSP_conv(v18, 1, v16, -1, __C, 1, v14, v15);
        memmove(v18, &v18[v14], 4 * (v15 - 1));
        vDSP_vadd((const float *)*a3, 1, *(const float **)(a1 + 19056), 1, (float *)*a3, 1, *(unsigned int *)(a1 + 32));
        v8 = *v23;
      }
      ++v9;
      v11 += 3;
      v13 += 4;
      v12 += 3;
    }
    while (v9 < v8);
  }
}

void BeamformerTD::CrossfadeBeams(uint64_t a1, float **a2, uint64_t a3)
{
  float *v6;
  float *v7;
  float *v8;
  float *i;
  vDSP_Length v10;
  vDSP_Length v11;
  float __Step;
  float __Start;

  v7 = *a2;
  v6 = a2[1];
  v8 = *(float **)a3;
  if ((char *)v6 - (char *)*a2 == *(_QWORD *)(a3 + 8) - *(_QWORD *)a3)
  {
    if (v7 == v6)
      return;
    for (i = *(float **)a3; *v7 == *i; ++i)
    {
      if (++v7 == v6)
        return;
    }
  }
  __Start = 0.0;
  v10 = *(unsigned int *)(a1 + 32);
  __Step = 1.0 / (float)v10;
  vDSP_vrampmul(v8, 1, &__Start, &__Step, v8, 1, v10);
  v11 = *(unsigned int *)(a1 + 32);
  __Start = 1.0;
  __Step = -1.0 / (float)v11;
  vDSP_vrampmuladd(*a2, 1, &__Start, &__Step, *(float **)a3, 1, v11);
}

uint64_t BeamformerTD::MakeABeamWithCrossfade(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  int v8;
  uint64_t result;

  v8 = a4;
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 80))(a1, a2, a3, a4, a6);
  if ((_DWORD)a5 != v8)
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 80))(a1, a2, a1 + 19176, a5, a6);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 88))(a1, a1 + 19176, a3);
  }
  return result;
}

void *BeamformerTD::ApplyEQ(uint64_t a1, const void **a2, void **a3, unsigned int a4, int a5)
{
  uint64_t v5;
  float *v6;
  float *v7;
  vDSP_Length v8;
  vDSP_Length v9;
  const float *v10;

  if (a5 != 1)
    return memcpy(*a3, *a2, 4 * *(unsigned int *)(a1 + 32));
  v5 = a1 + 24 * a4;
  v6 = *(float **)(v5 + 240816);
  v7 = (float *)*a3;
  v8 = *(unsigned int *)(a1 + 19616);
  v9 = *(unsigned int *)(a1 + 32);
  v10 = (const float *)(*(_QWORD *)(v5 + 358320) + 4 * v8 - 4);
  memcpy(&v6[v8 - 1], *a2, 4 * v9);
  vDSP_conv(v6, 1, v10, -1, v7, 1, v9, v8);
  return memmove(v6, &v6[v9], 4 * (v8 - 1));
}

uint64_t BeamformerTD::MakePHATBeam(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  NSObject *v12;
  int v14;
  const char *v15;
  __int16 v16;
  int v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  if (AUBeamItTDLogScope(void)::once != -1)
    dispatch_once(&AUBeamItTDLogScope(void)::once, &__block_literal_global_12524);
  if (AUBeamItTDLogScope(void)::scope)
  {
    v12 = *(NSObject **)AUBeamItTDLogScope(void)::scope;
    if (!*(_QWORD *)AUBeamItTDLogScope(void)::scope)
      goto LABEL_9;
  }
  else
  {
    v12 = MEMORY[0x1E0C81028];
  }
  if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
  {
    v14 = 136315394;
    v15 = "BeamformerTD.cpp";
    v16 = 1024;
    v17 = 562;
    _os_log_impl(&dword_1B5ED0000, v12, OS_LOG_TYPE_ERROR, "%25s:%-5d AUBeamItTD: in BeamformerTD::MakePHATBeam. Not sure what to do here. For now just run the same thing as SRP mode.", (uint8_t *)&v14, 0x12u);
  }
LABEL_9:
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD))(*(_QWORD *)a1 + 80))(a1, a2, a3, a5, 0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 104))(a1, a3, a4, a5, a6);
}

uint64_t BeamformerTD::MakeLSDDBeam(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  NSObject *v12;
  int v14;
  const char *v15;
  __int16 v16;
  int v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  if (AUBeamItTDLogScope(void)::once != -1)
    dispatch_once(&AUBeamItTDLogScope(void)::once, &__block_literal_global_12524);
  if (AUBeamItTDLogScope(void)::scope)
  {
    v12 = *(NSObject **)AUBeamItTDLogScope(void)::scope;
    if (!*(_QWORD *)AUBeamItTDLogScope(void)::scope)
      goto LABEL_9;
  }
  else
  {
    v12 = MEMORY[0x1E0C81028];
  }
  if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
  {
    v14 = 136315394;
    v15 = "BeamformerTD.cpp";
    v16 = 1024;
    v17 = 574;
    _os_log_impl(&dword_1B5ED0000, v12, OS_LOG_TYPE_ERROR, "%25s:%-5d AUBeamItTD: in BeamformerTD::MakeLSDDBeam. Not sure what to do here. For now just run the same thing as SRP mode.", (uint8_t *)&v14, 0x12u);
  }
LABEL_9:
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD))(*(_QWORD *)a1 + 80))(a1, a2, a3, a5, 0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 104))(a1, a3, a4, a5, a6);
}

uint64_t BeamformerTD::ECMixSwitch(BeamformerTD *this)
{
  uint64_t result;
  uint64_t v2;
  uint64_t v3;
  float *v4;
  uint64_t v5;
  float *v6;
  float v7;
  uint64_t v8;
  float v9;
  float *v10;
  float *v11;
  uint64_t v12;
  float v13;
  float v14;
  float *v15;
  _QWORD *v16;
  float32x2_t v17;
  float v18;
  float32x2_t v19;
  float v20;
  float v21;
  float32x2_t v22;
  _QWORD v23[2];

  v23[1] = *MEMORY[0x1E0C80C00];
  result = MEMORY[0x1E0C80A78](this);
  v4 = (float *)((char *)v23 - ((v3 + 15) & 0x7FFFFFFF0));
  if ((_DWORD)v2)
  {
    v5 = *(unsigned int *)(result + 108);
    v6 = (float *)(result + (v5 << 6) + 372144);
    v7 = 2.2204e-16;
    v8 = v2;
    do
    {
      v9 = *v6++;
      v7 = v7 + v9;
      --v8;
    }
    while (v8);
    v10 = (float *)(result + (v5 << 6) + 372144);
    v11 = v4;
    v12 = v2;
    v13 = 1.0 / v7;
    do
    {
      v14 = *v10++;
      *v11++ = v13 * v14;
      --v12;
    }
    while (v12);
    v15 = *(float **)(result + 24 * v5 + 365232);
    v16 = (_QWORD *)(result + 240);
    v17 = 0;
    v18 = 1.0;
    v19 = 0;
    do
    {
      if (*v15 == 1.0)
        v18 = v18 * *((float *)v16 - 1);
      v20 = *v4++;
      v21 = v20;
      v17 = vmla_n_f32(v17, *(float32x2_t *)((char *)v16 - 12), v20);
      v22 = *(float32x2_t *)v16;
      v16 = (_QWORD *)((char *)v16 + 20);
      v19 = vmla_n_f32(v19, v22, v21);
      ++v15;
      --v2;
    }
    while (v2);
  }
  else
  {
    v17 = 0;
    v18 = 1.0;
    v19 = 0;
  }
  *(float32x2_t *)(result + 228) = v17;
  *(float32x2_t *)(result + 240) = v19;
  *(float *)(result + 236) = v18;
  return result;
}

void BeamformerTD::SelectBeam(float **this)
{
  vDSP_Length v2;
  char *v3;
  const float **v4;
  unsigned int v5;
  uint64_t v6;
  float *v7;
  VPTimeFreqConverter *v8;
  uint64_t v9;
  float v10;
  int v11;
  int v12;
  float v13;
  float v14;
  float v15;
  float v16;
  const float *v17;
  vDSP_Length v18;
  uint64_t v19;
  vDSP_Length v20;
  int v21;
  uint64_t __B;
  vDSP_Length __I;
  float v24;
  DSPSplitComplex __A;
  DSPSplitComplex v26;
  float __C;

  v24 = 0.0;
  __B = 0;
  __I = 0;
  vDSP_vclr(this[2394], 1, 0x120uLL);
  if (*((_DWORD *)this + 3))
  {
    v2 = 0;
    v3 = (char *)(this + 69);
    v4 = (const float **)(this + 645);
    do
    {
      __C = 0.0;
      v5 = *((_DWORD *)this + 11);
      v6 = *((unsigned int *)this + 8);
      v7 = &this[63516][v6];
      v26.realp = this[63516];
      v26.imagp = v7;
      v8 = *(VPTimeFreqConverter **)&this[63510][2 * v2];
      if (v8)
      {
        VPTimeFreqConverter::Analyze(v8, *v4, &v26);
        LODWORD(v6) = *((_DWORD *)this + 8);
      }
      if (*((_DWORD *)this + 10) == (_DWORD)v6)
        v5 = *((_DWORD *)this + 11) - 1;
      v9 = *((unsigned int *)this + 9);
      __A.realp = &v26.realp[v9];
      __A.imagp = &v26.imagp[v9];
      vDSP_zvmags(&__A, 1, this[2385], 1, v5);
      vDSP_sve(this[2385], 1, &__C, v5);
      v10 = *v26.imagp;
      v11 = *((_DWORD *)this + 10);
      v12 = *((_DWORD *)this + 8);
      if (*((_DWORD *)this + 9))
      {
        v13 = __C + (float)(v10 * v10);
        if (v11 != v12)
          v13 = __C;
      }
      else
      {
        v13 = __C - (float)(v10 * v10);
        if (v11 == v12)
          v13 = __C;
      }
      v14 = log10(v13 + 1.0e-10) * 10.0;
      v15 = (float)(*((float *)this + 12) * *(float *)&v3[4 * v2]) + (1.0 - *((float *)this + 12)) * v14;
      *(float *)&v3[4 * v2] = v15;
      v16 = __exp10f(fmaxf(fminf(v15, 100.0), -100.0) / 10.0);
      v17 = this[2394];
      v17[v2++] = v16;
      v18 = *((unsigned int *)this + 3);
      v4 += 3;
    }
    while (v2 < v18);
  }
  else
  {
    v18 = 0;
    v17 = this[2394];
  }
  vDSP_sve(v17, 1, (float *)&__B, v18);
  vDSP_vsdiv(this[2394], 1, (const float *)&__B, this[2394], 1, *((unsigned int *)this + 3));
  v19 = *((unsigned int *)this + 20);
  v20 = (*((_DWORD *)this + 21) - v19 + 1);
  if (*((_BYTE *)this + 104))
  {
    vDSP_meanv((const float *)this + v19 + 138, 1, (float *)&__B + 1, (*((_DWORD *)this + 21) - v19 + 1));
    *((float *)&__B + 1) = -*((float *)&__B + 1);
    vDSP_vsadd((const float *)this + v19 + 138, 1, (const float *)&__B + 1, (float *)this + v19 + 138, 1, v20);
  }
  vDSP_maxvi((const float *)this + v19 + 138, 1, &v24, &__I, v20);
  if (v24 <= *((float *)this + 25))
    v21 = *((_DWORD *)this + 28);
  else
    v21 = v19 + __I;
  *((_DWORD *)this + 27) = v21;
}

char *BeamformerTD::AllocateBlockSizeDependentVectors(BeamformerTD *this)
{
  unint64_t v2;
  char **v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  char **v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  int v16;

  if (*((_DWORD *)this + 3))
  {
    v2 = 0;
    v3 = (char **)((char *)this + 5160);
    do
    {
      v4 = *((unsigned int *)this + 8);
      v16 = 0;
      std::vector<float>::assign(v3, v4, &v16);
      ++v2;
      v5 = *((unsigned int *)this + 3);
      v3 += 3;
    }
    while (v2 < v5);
    if ((_DWORD)v5)
    {
      v6 = 0;
      v7 = (char **)((char *)this + 12072);
      do
      {
        v8 = *((unsigned int *)this + 8);
        v16 = 0;
        std::vector<float>::assign(v7, v8, &v16);
        ++v6;
        v7 += 3;
      }
      while (v6 < *((unsigned int *)this + 3));
    }
  }
  v9 = *((unsigned int *)this + 8);
  v16 = 0;
  std::vector<float>::assign((char **)this + 2373, v9, &v16);
  v10 = *((unsigned int *)this + 8);
  v16 = 0;
  std::vector<float>::assign((char **)this + 2376, v10, &v16);
  v11 = *((unsigned int *)this + 8);
  v16 = 0;
  std::vector<float>::assign((char **)this + 2397, v11, &v16);
  v12 = *((unsigned int *)this + 8);
  v16 = 0;
  std::vector<float>::assign((char **)this + 2382, v12, &v16);
  v13 = (2 * *((_DWORD *)this + 8));
  v16 = 0;
  std::vector<float>::assign((char **)this + 63516, v13, &v16);
  v14 = *((unsigned int *)this + 8);
  v16 = 0;
  return std::vector<float>::assign((char **)this + 2385, v14, &v16);
}

float BeamformerTD::CalculateEnergyInFullBand(uint64_t a1, const float **a2)
{
  float __C;

  __C = 0.0;
  vDSP_svesq(*a2, 1, &__C, *(unsigned int *)(a1 + 32));
  return log10((float)(__C / (float)*(unsigned int *)(a1 + 32)) + 1.0e-10) * 10.0;
}

os_log_t ___ZL18AUBeamItTDLogScopev_block_invoke_12528()
{
  _QWORD *v0;
  os_log_t result;

  v0 = (_QWORD *)operator new();
  v0[1] = 0;
  result = os_log_create("com.apple.coreaudio", "aubmtd");
  *v0 = result;
  AUBeamItTDLogScope(void)::scope = (uint64_t)v0;
  return result;
}

void BeamformerBase::~BeamformerBase(BeamformerBase *this)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  uint64_t i;
  void *v12;
  uint64_t v13;
  void *v14;

  *(_QWORD *)this = off_1E69ECEE8;
  LimitWindBoost::~LimitWindBoost((BeamformerBase *)((char *)this + 19200));
  v2 = (void *)*((_QWORD *)this + 2397);
  if (v2)
  {
    *((_QWORD *)this + 2398) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 2394);
  if (v3)
  {
    *((_QWORD *)this + 2395) = v3;
    operator delete(v3);
  }
  v4 = (void *)*((_QWORD *)this + 2391);
  if (v4)
  {
    *((_QWORD *)this + 2392) = v4;
    operator delete(v4);
  }
  v5 = (void *)*((_QWORD *)this + 2388);
  if (v5)
  {
    *((_QWORD *)this + 2389) = v5;
    operator delete(v5);
  }
  v6 = (void *)*((_QWORD *)this + 2385);
  if (v6)
  {
    *((_QWORD *)this + 2386) = v6;
    operator delete(v6);
  }
  v7 = (void *)*((_QWORD *)this + 2382);
  if (v7)
  {
    *((_QWORD *)this + 2383) = v7;
    operator delete(v7);
  }
  v8 = (void *)*((_QWORD *)this + 2379);
  if (v8)
  {
    *((_QWORD *)this + 2380) = v8;
    operator delete(v8);
  }
  v9 = (void *)*((_QWORD *)this + 2376);
  if (v9)
  {
    *((_QWORD *)this + 2377) = v9;
    operator delete(v9);
  }
  v10 = (void *)*((_QWORD *)this + 2373);
  if (v10)
  {
    *((_QWORD *)this + 2374) = v10;
    operator delete(v10);
  }
  for (i = 0; i != -6912; i -= 24)
  {
    v12 = *(void **)((char *)this + i + 18960);
    if (v12)
    {
      *(_QWORD *)((char *)this + i + 18968) = v12;
      operator delete(v12);
    }
  }
  v13 = 6912;
  do
  {
    v14 = *(void **)((char *)this + v13 + 5136);
    if (v14)
    {
      *(_QWORD *)((char *)this + v13 + 5144) = v14;
      operator delete(v14);
    }
    v13 -= 24;
  }
  while (v13);
}

void BeamformerBase::BeamformerBase(BeamformerBase *this)
{
  *(_QWORD *)this = off_1E69ECEE8;
  *((_QWORD *)this + 1) = 0x12000000010;
  *((_WORD *)this + 8) = 0;
  *((_QWORD *)this + 3) = 0x40CF400000000000;
  *((_OWORD *)this + 2) = xmmword_1B66A2260;
  *((_QWORD *)this + 6) = 0;
  *((_QWORD *)this + 7) = 0;
  bzero((char *)this + 5160, 0x36D8uLL);
  LimitWindBoost::LimitWindBoost((BeamformerBase *)((char *)this + 19200));
}

void sub_1B63C8D84(_Unwind_Exception *exception_object)
{
  _QWORD *v1;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  _QWORD *v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  void *v16;

  v3 = (void *)v1[2397];
  if (v3)
  {
    v1[2398] = v3;
    operator delete(v3);
  }
  v4 = (void *)v1[2394];
  if (v4)
  {
    v1[2395] = v4;
    operator delete(v4);
  }
  v5 = (void *)v1[2391];
  if (v5)
  {
    v1[2392] = v5;
    operator delete(v5);
  }
  v6 = (void *)v1[2388];
  if (v6)
  {
    v1[2389] = v6;
    operator delete(v6);
  }
  v7 = (void *)v1[2385];
  if (v7)
  {
    v1[2386] = v7;
    operator delete(v7);
  }
  v8 = (void *)v1[2382];
  if (v8)
  {
    v1[2383] = v8;
    operator delete(v8);
  }
  v9 = (void *)v1[2379];
  if (v9)
  {
    v1[2380] = v9;
    operator delete(v9);
  }
  v10 = (void *)v1[2376];
  if (v10)
  {
    v1[2377] = v10;
    operator delete(v10);
  }
  v11 = (void *)v1[2373];
  if (v11)
  {
    v1[2374] = v11;
    operator delete(v11);
  }
  v12 = v1 + 2371;
  v13 = -6912;
  while (1)
  {
    v14 = (void *)*(v12 - 1);
    if (v14)
    {
      *v12 = v14;
      operator delete(v14);
    }
    v12 -= 3;
    v13 += 24;
    if (!v13)
    {
      v15 = 864;
      while (1)
      {
        v16 = (void *)v1[v15 + 642];
        if (v16)
        {
          v1[v15 + 643] = v16;
          operator delete(v16);
        }
        v15 -= 3;
        if (!(v15 * 8))
          _Unwind_Resume(exception_object);
      }
    }
  }
}

uint64_t VoiceProcessorV2::AppendSpeakerTelemetryData(VoiceProcessorV2 *this, const AudioBufferList *a2, uint64_t a3, AudioTimeStamp *a4)
{
  char *v8;
  unsigned int *v9;
  unsigned int v10;
  double v11;
  double mSampleTime;
  unsigned int v13;
  int v15;
  unint64_t v16;
  unsigned int v17;
  int v18;
  unsigned int v19;
  unsigned int v20;
  uint64_t v21;
  unint64_t v22;
  void **p_mData;
  void *v24;
  unint64_t v25;
  unint64_t v26;
  void **v27;
  char *v28;
  unsigned int v29;
  unsigned int v30;
  BOOL v31;
  unsigned int v32;

  v8 = (char *)this + 12504;
  v9 = (unsigned int *)((char *)this + 2484);
  do
    v10 = __ldaxr(v9);
  while (__stlxr(v10 + 1, v9));
  if (*((_DWORD *)this + 620))
  {
    VoiceProcessorV2::LogIOError((uint64_t)this, 24.006, 0.0, 0.0, 0.0, "appspkrtel: tryer failed to acquire lock");
    goto LABEL_12;
  }
  if (*((_DWORD *)this + 382) != (_DWORD)a3)
  {
    VoiceProcessorV2::LogIOError((uint64_t)this, 24.002, 0.0, 0.0, 0.0, "appspkrtel: received %d samples, expected = %d");
    goto LABEL_12;
  }
  if (*((_DWORD *)this + 1128) != 1)
    goto LABEL_12;
  if (*((_BYTE *)this + 15897))
  {
    *((_BYTE *)this + 12874) = 1;
    if (*v8)
    {
      v11 = *((double *)this + 1562);
      mSampleTime = a4->mSampleTime;
      if (v11 == a4->mSampleTime)
      {
        *((double *)this + 1562) = mSampleTime + (double)a3;
LABEL_21:
        VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)this, 0x45u, a3, a2, a4);
        goto LABEL_22;
      }
      goto LABEL_19;
    }
    goto LABEL_18;
  }
  if (!*((_BYTE *)this + 15898))
    goto LABEL_22;
  *((_BYTE *)this + 12874) = 1;
  if (!*v8)
  {
LABEL_18:
    *v8 = 1;
    mSampleTime = a4->mSampleTime;
    v11 = 0.0;
LABEL_19:
    VoiceProcessorV2::WriteTSOverload((std::chrono::duration<long long, std::ratio<1, 1000000>>::rep)this, v11, mSampleTime, 3);
    v15 = v8[3393];
    LODWORD(v16) = *((_DWORD *)this + 382);
    *((double *)this + 1562) = a4->mSampleTime + (double)v16;
    if (v15)
      goto LABEL_21;
    goto LABEL_20;
  }
  v11 = *((double *)this + 1562);
  mSampleTime = a4->mSampleTime;
  if (v11 != a4->mSampleTime)
    goto LABEL_19;
  *((double *)this + 1562) = mSampleTime + (double)a3;
LABEL_20:
  if (v8[3394])
    goto LABEL_21;
LABEL_22:
  if (a2->mNumberBuffers == *((_DWORD *)this + 385))
  {
    v17 = 0;
    if ((_DWORD)a3)
    {
      v18 = *((_DWORD *)this + 384);
      v19 = v18 - *((_DWORD *)this + 386);
      if (v19)
      {
        if (v19 >= a3)
          v17 = a3;
        else
          v17 = v18 - *((_DWORD *)this + 386);
        v20 = v18 - *((_DWORD *)this + 388);
        if (v20 >= v17)
          v21 = v17;
        else
          v21 = v20;
        if (a2->mNumberBuffers)
        {
          v22 = 0;
          p_mData = &a2->mBuffers[0].mData;
          do
          {
            v24 = *p_mData;
            p_mData += 2;
            memcpy((void *)(*((_QWORD *)this + 195)+ 4 * (*((_DWORD *)this + 388) + *((_DWORD *)this + 384) * v22++)), v24, 4 * v21);
            v25 = *((unsigned int *)this + 385);
          }
          while (v22 < v25);
          if (v17 > v20 && (_DWORD)v25)
          {
            v26 = 0;
            v27 = &a2->mBuffers[0].mData;
            do
            {
              v28 = (char *)*v27;
              v27 += 2;
              memcpy((void *)(*((_QWORD *)this + 195) + 4 * (*((_DWORD *)this + 384) * v26++)), &v28[4 * v21], 4 * (v17 - v21));
            }
            while (v26 < *((unsigned int *)this + 385));
          }
        }
        *((_DWORD *)this + 386) += v17;
        v29 = *((_DWORD *)this + 388) + v17;
        *((_DWORD *)this + 388) = v29;
        v30 = *((_DWORD *)this + 384);
        v31 = v29 >= v30;
        v32 = v29 - v30;
        if (v31)
          *((_DWORD *)this + 388) = v32;
      }
    }
  }
  else
  {
    v17 = 0;
  }
  if (v17 != (_DWORD)a3)
    VoiceProcessorV2::LogIOError((uint64_t)this, 24.001, 0.0, 0.0, 0.0, "appspkrtel: ring buffer write error %d");
  do
LABEL_12:
    v13 = __ldaxr(v9);
  while (__stlxr(v13 - 1, v9));
  return 0;
}

void sub_1B63C9130(_Unwind_Exception *a1)
{
  unsigned int *v1;
  unsigned int v2;

  do
    v2 = __ldaxr(v1);
  while (__stlxr(v2 - 1, v1));
  _Unwind_Resume(a1);
}

uint64_t VoiceProcessorV2::SetDownLinkVolume(VoiceProcessorV2 *this, float a2)
{
  char *v4;
  _QWORD *v5;
  NSObject *v6;
  int *v7;
  uint64_t result;
  int v9;
  _QWORD *v10;
  NSObject *v11;
  int *v12;
  const void *v13;
  _QWORD *v14;
  NSObject *v15;
  double v16;
  int *v17;
  OpaqueAudioComponentInstance *v18;
  OpaqueAudioComponentInstance *v19;
  OpaqueAudioComponentInstance *v20;
  OpaqueAudioComponentInstance *v21;
  float v22;
  OpaqueAudioComponentInstance *v23;
  uint64_t v24;
  unsigned int *v25;
  unsigned int v26;
  _DWORD *v27;
  const void *v28;
  float valuePtr;
  _BYTE buf[12];
  __int16 v31;
  int v32;
  __int16 v33;
  double v34;
  uint64_t v35;

  v35 = *MEMORY[0x1E0C80C00];
  CADeprecated::CAAtomicSignaler::PersistentTryer::PersistentTryer(&v27, (uint64_t)this + 2480, 400000);
  v4 = (char *)this + 15897;
  if (*v27)
  {
    if (VPLogScope(void)::once != -1)
      dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
    v5 = (_QWORD *)VPLogScope(void)::scope;
    if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(1, VPLogScope(void)::scope, 0))
    {
      v6 = (*v5 ? *v5 : MEMORY[0x1E0C81028]);
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315650;
        *(_QWORD *)&buf[4] = "VoiceProcessor_v2.cpp";
        v31 = 1024;
        v32 = 756;
        v33 = 1024;
        LODWORD(v34) = 400000;
        _os_log_impl(&dword_1B5ED0000, v6, OS_LOG_TYPE_ERROR, "%25s:%-5d  >vp> setdownlinkvolume failed because mSignaler can't be acquired within %u microseconds", buf, 0x18u);
      }
    }
    v7 = (int *)*((_QWORD *)this + 1570);
    if (v7 && (*v4 || v4[1]))
    {
      if (VPLogScope(void)::once != -1)
        dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
      CALegacyLog::log(v7, 1, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/VoiceProcessor_v2.cpp", 756, "SetDownLinkVolume", "setdownlinkvolume failed because mSignaler can't be acquired within %u microseconds", 400000);
    }
    result = 4294956433;
  }
  else
  {
    v9 = (*(uint64_t (**)(char *))(*((_QWORD *)this + 311) + 16))((char *)this + 2488);
    if (VPLogScope(void)::once != -1)
      dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
    v10 = (_QWORD *)VPLogScope(void)::scope;
    if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(3, VPLogScope(void)::scope, 0))
    {
      v11 = (*v10 ? *v10 : MEMORY[0x1E0C81028]);
      if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 136315650;
        *(_QWORD *)&buf[4] = "VoiceProcessor_v2.cpp";
        v31 = 1024;
        v32 = 764;
        v33 = 2048;
        v34 = a2;
        _os_log_impl(&dword_1B5ED0000, v11, OS_LOG_TYPE_DEFAULT, "%25s:%-5d  <vp> setdownlinkvolume called with: user volume = %f", buf, 0x1Cu);
      }
    }
    v12 = (int *)*((_QWORD *)this + 1570);
    if (v12 && (*v4 || *((_BYTE *)this + 15898)))
    {
      if (VPLogScope(void)::once != -1)
        dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
      CALegacyLog::log(v12, 3, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/VoiceProcessor_v2.cpp", 764, "SetDownLinkVolume", "setdownlinkvolume called with: user volume = %f", a2);
    }
    if (*v4)
    {
      valuePtr = a2;
      if (*((_QWORD *)this + 1884))
      {
        *(_QWORD *)buf = 0;
        VoiceProcessorV2::PListCopyDictionaryForWrite(this, (__CFDictionary **)buf);
        v13 = *(const void **)buf;
        if (*(_QWORD *)buf)
        {
          VPGetPropsPListStringForKey((applesauce::CF::StringRef *)&v28, 21);
          WriteItemToDictionary((__CFDictionary **)buf, &v28, 2, 4uLL, (const char *)&valuePtr);
          if (v28)
            CFRelease(v28);
          CFRelease(v13);
        }
      }
    }
    if (AudioIssueDetectorLibraryLoader(void)::once != -1)
      dispatch_once(&AudioIssueDetectorLibraryLoader(void)::once, &__block_literal_global_12811);
    if (AudioIssueDetectorLibraryLoader(void)::libSym)
      AudioIssueDetectorLibraryLoader(void)::libSym(a2);
    *((float *)this + 3116) = a2;
    if (*((float *)this + 3119) == a2)
    {
      if (VPLogScope(void)::once != -1)
        dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
      v14 = (_QWORD *)VPLogScope(void)::scope;
      if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(5, VPLogScope(void)::scope, 0))
      {
        v15 = (*v14 ? *v14 : MEMORY[0x1E0C81028]);
        if (os_log_type_enabled(v15, OS_LOG_TYPE_DEBUG))
        {
          v16 = *((float *)this + 3116);
          *(_DWORD *)buf = 136315650;
          *(_QWORD *)&buf[4] = "VoiceProcessor_v2.cpp";
          v31 = 1024;
          v32 = 775;
          v33 = 2048;
          v34 = v16;
          _os_log_impl(&dword_1B5ED0000, v15, OS_LOG_TYPE_DEBUG, "%25s:%-5d  <vp> setdownlinkvolume: no need to change volume = %f", buf, 0x1Cu);
        }
      }
      v17 = (int *)*((_QWORD *)this + 1570);
      if (v17 && (*v4 || *((_BYTE *)this + 15898)))
      {
        if (VPLogScope(void)::once != -1)
          dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
        CALegacyLog::log(v17, 5, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/VoiceProcessor_v2.cpp", 775, "SetDownLinkVolume", "setdownlinkvolume: no need to change volume = %f", *((float *)this + 3116));
      }
    }
    else
    {
      *((float *)this + 3119) = a2;
      AUPropAndParamHelper::AddItemToAUParamList((uint64_t)this + 9040, 5, a2);
      if ((*((_BYTE *)this + 8833) & 1) != 0)
      {
        v18 = (OpaqueAudioComponentInstance *)*((_QWORD *)this + 445);
        if (v18)
          AudioUnitSetParameter(v18, 5u, 0, 0, *((AudioUnitParameterValue *)this + 3119), 0);
      }
      AUPropAndParamHelper::AddItemToAUParamList((uint64_t)this + 9352, 0, *((float *)this + 3119));
      if ((*((_BYTE *)this + 8834) & 0x20) != 0)
      {
        v19 = (OpaqueAudioComponentInstance *)*((_QWORD *)this + 458);
        if (v19)
          AudioUnitSetParameter(v19, 0, 0, 0, *((AudioUnitParameterValue *)this + 3119), 0);
      }
      AUPropAndParamHelper::AddItemToAUParamList((uint64_t)this + 9376, 0, *((float *)this + 3119));
      if ((*((_BYTE *)this + 8834) & 0x40) != 0)
      {
        v20 = (OpaqueAudioComponentInstance *)*((_QWORD *)this + 459);
        if (v20)
          AudioUnitSetParameter(v20, 0, 0, 0, *((AudioUnitParameterValue *)this + 3119), 0);
      }
      AUPropAndParamHelper::AddItemToAUParamList((uint64_t)this + 8944, 1937141612, *((float *)this + 3119));
      if ((*((_BYTE *)this + 8832) & 0x10) != 0)
      {
        v21 = (OpaqueAudioComponentInstance *)*((_QWORD *)this + 441);
        if (v21)
          AudioUnitSetParameter(v21, 0x73766F6Cu, 0, 0, *((AudioUnitParameterValue *)this + 3119), 0);
      }
      v22 = VoiceProcessorV2::DetermineRouteBasedPreGain(this);
      AUPropAndParamHelper::AddItemToAUParamList((uint64_t)this + 9400, 7, v22);
      AUPropAndParamHelper::AddItemToAUParamList((uint64_t)this + 9400, 5, *((float *)this + 3119));
      AUPropAndParamHelper::AddItemToAUParamList((uint64_t)this + 9016, 26, v22);
      v24 = *((_QWORD *)this + 1104);
      if ((v24 & 0x800000) != 0)
      {
        v23 = (OpaqueAudioComponentInstance *)*((_QWORD *)this + 460);
        if (v23)
        {
          AudioUnitSetParameter(v23, 7u, 0, 0, v22, 0);
          v23 = (OpaqueAudioComponentInstance *)AudioUnitSetParameter(*((AudioUnit *)this + 460), 5u, 0, 0, *((AudioUnitParameterValue *)this + 3119), 0);
          v24 = *((_QWORD *)this + 1104);
        }
      }
      if ((v24 & 0x80) != 0)
      {
        v23 = (OpaqueAudioComponentInstance *)*((_QWORD *)this + 444);
        if (v23)
          v23 = (OpaqueAudioComponentInstance *)AudioUnitSetParameter(v23, 0x1Au, 0, 0, v22, 0);
      }
      if (*v4)
      {
        MEMORY[0x1E0C80A78](v23);
        AUProcessingBlockBase::UnitsChanged();
      }
    }
    if (v9)
      (*(void (**)(char *))(*((_QWORD *)this + 311) + 24))((char *)this + 2488);
    result = 0;
  }
  v25 = v27 + 1;
  do
    v26 = __ldaxr(v25);
  while (__stlxr(v26 - 1, v25));
  return result;
}

void sub_1B63C98AC(_Unwind_Exception *exception_object, int a2)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t VoiceProcessorV2::SetMode(VoiceProcessorV2 *this, int a2)
{
  char *v4;
  char *v5;
  char *v6;
  unsigned int *v7;
  unsigned int v8;
  _QWORD *v9;
  NSObject *v10;
  int *v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  _QWORD *v15;
  VPEmergencyCallStateObserver *v16;
  double v17;
  double v18;
  int v19;
  _QWORD *v20;
  NSObject *v21;
  int *v22;
  _QWORD *v23;
  NSObject *v24;
  int *v25;
  _QWORD *v26;
  NSObject *v27;
  int *v28;
  _QWORD *v29;
  NSObject *v30;
  int v31;
  int *v32;
  unsigned int v33;
  int v35;
  _QWORD v36[6];
  std::__shared_weak_count *v37;
  void *v38;
  _BYTE buf[18];
  __int16 v40;
  int v41;
  uint64_t v42;

  v42 = *MEMORY[0x1E0C80C00];
  v4 = (char *)this + 16536;
  v5 = (char *)this + 15897;
  v6 = (char *)this + 2392;
  v35 = (*(uint64_t (**)(char *))(*((_QWORD *)this + 299) + 16))((char *)this + 2392);
  v7 = (unsigned int *)((char *)this + 2480);
  do
    v8 = __ldaxr(v7);
  while (__stlxr(v8 + 1, v7));
  while (*((_DWORD *)this + 621))
    usleep(0x1F4u);
  if (*((_DWORD *)this + 19) != a2)
  {
    *((_DWORD *)this + 19) = a2;
    if (a2 == 6 || a2 == 1)
    {
      if (VPLogScope(void)::once != -1)
        dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
      v9 = (_QWORD *)VPLogScope(void)::scope;
      if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(3, VPLogScope(void)::scope, 0))
      {
        v10 = (*v9 ? *v9 : MEMORY[0x1E0C81028]);
        if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 136315394;
          *(_QWORD *)&buf[4] = "VoiceProcessor_v2.cpp";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = 704;
          _os_log_impl(&dword_1B5ED0000, v10, OS_LOG_TYPE_DEFAULT, "%25s:%-5d  <vp> Setting up emergency call status handler", buf, 0x12u);
        }
      }
      v11 = (int *)*((_QWORD *)this + 1570);
      if (v11 && (*v5 || v5[1]))
      {
        if (VPLogScope(void)::once != -1)
          dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
        CALegacyLog::log(v11, 3, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/VoiceProcessor_v2.cpp", 704, "SetMode", "Setting up emergency call status handler");
      }
      caulk::details::lifetime_guard_base<VoiceProcessorV2>::weak_T_ptr(buf, *((_QWORD *)this + 2075), *((std::__shared_weak_count **)this + 2077));
      v36[0] = MEMORY[0x1E0C809B0];
      v36[2] = ___ZN16VoiceProcessorV27SetModeEi_block_invoke;
      v36[3] = &__block_descriptor_tmp_41;
      v12 = *(std::__shared_weak_count **)&buf[8];
      v36[4] = this;
      v36[5] = *(_QWORD *)buf;
      v36[1] = 1174405120;
      v37 = *(std::__shared_weak_count **)&buf[8];
      if (*(_QWORD *)&buf[8])
      {
        v13 = (unint64_t *)(*(_QWORD *)&buf[8] + 16);
        do
          v14 = __ldxr(v13);
        while (__stxr(v14 + 1, v13));
      }
      if (v4[48])
      {
        vp::objc::ID::~ID((id *)this + 2072);
        v4[48] = 0;
      }
      v15 = v36;
      *((_QWORD *)this + 2072) = 0;
      v16 = -[VPEmergencyCallStateObserver initWithEmergencyCallStateHandler:]([VPEmergencyCallStateObserver alloc], "initWithEmergencyCallStateHandler:", v15);
      vp::objc::ID::ID((vp::objc::ID *)&v38, (objc_object *)v16);
      vp::objc::ID::operator=((void **)this + 2072, &v38);
      vp::objc::ID::~ID(&v38);

      v4[48] = 1;
      if (v37)
        std::__shared_weak_count::__release_weak(v37);
      if (v12)
        std::__shared_weak_count::__release_weak(v12);
    }
    if (*v5 || v5[1])
      VoiceProcessorV2::PListWriteSetModeParameters(this);
    if (VoiceProcessorV2::ShouldInteractWithControlCenter(this))
    {
      v19 = (*(uint64_t (**)(VoiceProcessorV2 *))(*(_QWORD *)this + 568))(this);
      *(_DWORD *)v4 = v19;
      if (*v5)
      {
        VoiceProcessorV2::PListWriteSetPropertyParameters(this, 1718384242);
        v19 = *(_DWORD *)v4;
      }
      if (v19)
      {
        if (VPLogScope(void)::once != -1)
          dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
        v20 = (_QWORD *)VPLogScope(void)::scope;
        if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(3, VPLogScope(void)::scope, 0))
        {
          v21 = (*v20 ? *v20 : MEMORY[0x1E0C81028]);
          if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 136315394;
            *(_QWORD *)&buf[4] = "VoiceProcessor_v2.cpp";
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = 726;
            _os_log_impl(&dword_1B5ED0000, v21, OS_LOG_TYPE_DEFAULT, "%25s:%-5d  <vp> Forcing bypass to false due to chat flavor", buf, 0x12u);
          }
        }
        v22 = (int *)*((_QWORD *)this + 1570);
        if (v22 && (*v5 || v5[1]))
        {
          if (VPLogScope(void)::once != -1)
            dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
          CALegacyLog::log(v22, 3, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/VoiceProcessor_v2.cpp", 726, "SetMode", "Forcing bypass to false due to chat flavor");
        }
        *((_BYTE *)this + 472) = 0;
      }
    }
    if (!v5[280])
    {
      if (VPLogScope(void)::once != -1)
        dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
      v23 = (_QWORD *)VPLogScope(void)::scope;
      if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(3, VPLogScope(void)::scope, 0))
      {
        v24 = (*v23 ? *v23 : MEMORY[0x1E0C81028]);
        if (os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 136315394;
          *(_QWORD *)&buf[4] = "VoiceProcessor_v2.cpp";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = 739;
          _os_log_impl(&dword_1B5ED0000, v24, OS_LOG_TYPE_DEFAULT, "%25s:%-5d  <vp> Begin self-reinit (SetMode)", buf, 0x12u);
        }
      }
      v25 = (int *)*((_QWORD *)this + 1570);
      if (v25 && (*v5 || v5[1]))
      {
        if (VPLogScope(void)::once != -1)
          dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
        CALegacyLog::log(v25, 3, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/VoiceProcessor_v2.cpp", 739, "SetMode", "Begin self-reinit (SetMode)");
      }
      VoiceProcessorV2::ResetTimestampsAndInitializeVP(this, 1, v17, v18);
      if (VPLogScope(void)::once != -1)
        dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
      v26 = (_QWORD *)VPLogScope(void)::scope;
      if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(3, VPLogScope(void)::scope, 0))
      {
        v27 = (*v26 ? *v26 : MEMORY[0x1E0C81028]);
        if (os_log_type_enabled(v27, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 136315394;
          *(_QWORD *)&buf[4] = "VoiceProcessor_v2.cpp";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = 741;
          _os_log_impl(&dword_1B5ED0000, v27, OS_LOG_TYPE_DEFAULT, "%25s:%-5d  <vp> End self-reinit (SetMode)", buf, 0x12u);
        }
      }
      v28 = (int *)*((_QWORD *)this + 1570);
      if (v28 && (*v5 || v5[1]))
      {
        if (VPLogScope(void)::once != -1)
          dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
        CALegacyLog::log(v28, 3, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/VoiceProcessor_v2.cpp", 741, "SetMode", "End self-reinit (SetMode)");
      }
    }
  }
  if (VPLogScope(void)::once != -1)
    dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
  v29 = (_QWORD *)VPLogScope(void)::scope;
  if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(3, VPLogScope(void)::scope, 0))
  {
    v30 = (*v29 ? *v29 : MEMORY[0x1E0C81028]);
    if (os_log_type_enabled(v30, OS_LOG_TYPE_DEFAULT))
    {
      v31 = *((_DWORD *)this + 19);
      *(_DWORD *)buf = 136315650;
      *(_QWORD *)&buf[4] = "VoiceProcessor_v2.cpp";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 744;
      v40 = 1024;
      v41 = v31;
      _os_log_impl(&dword_1B5ED0000, v30, OS_LOG_TYPE_DEFAULT, "%25s:%-5d  <vp> operation mode = %i", buf, 0x18u);
    }
  }
  v32 = (int *)*((_QWORD *)this + 1570);
  if (v32 && (*v5 || v5[1]))
  {
    if (VPLogScope(void)::once != -1)
      dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
    CALegacyLog::log(v32, 3, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/VoiceProcessor_v2.cpp", 744, "SetMode", "operation mode = %i", *((_DWORD *)this + 19));
  }
  do
    v33 = __ldaxr(v7);
  while (__stlxr(v33 - 1, v7));
  if (v35)
    (*(void (**)(char *))(*(_QWORD *)v6 + 24))(v6);
  return 0;
}

void sub_1B63CA134(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, int a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, std::__shared_weak_count *a18)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

uint64_t VoiceProcessorV2::GetVersion(VoiceProcessorV2 *this)
{
  return 2;
}

void VoiceProcessorV2::DumpState(VoiceProcessorV2 *this, __sFILE *a2)
{
  int v4;
  const char *v5;
  const char *v6;
  const char *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  int v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  _QWORD *v17;
  NSObject *v18;
  int *v19;
  _BYTE buf[12];
  __int16 v21;
  int v22;
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  if (a2)
  {
    v4 = (*(uint64_t (**)(VoiceProcessorV2 *))(*(_QWORD *)this + 112))(this);
    fprintf(a2, "VoiceProcessor version = %u \n", v4);
    if (*((_BYTE *)this + 2083))
      v5 = "TRUE";
    else
      v5 = "FALSE";
    fprintf(a2, "VP Disabled = %s.  \n", v5);
    if (*((_BYTE *)this + 2085))
      v6 = "TRUE";
    else
      v6 = "FALSE";
    fprintf(a2, "HW has vp = %s.  \n", v6);
    v7 = (char *)this + 32;
    if (*((char *)this + 55) < 0)
      v7 = *(const char **)v7;
    fprintf(a2, "Product: %s\n", v7);
    CAX4CCString::CAX4CCString((CAX4CCString *)buf, *((_DWORD *)this + 549));
    fprintf(a2, "Primary audio vocoder type = %s(%d) \n", buf, *((_DWORD *)this + 549));
    fprintf(a2, "Driver-prescribed postprocessing input gain  = %f dB.  \n", *((float *)this + 1091));
    fprintf(a2, "Beam direction = %d \n", *((_DWORD *)this + 684));
    CAFormatter::CAFormatter((CAFormatter *)buf, (const AudioStreamBasicDescription *)((char *)this + 584));
    fprintf(a2, "HW Format REF: %s \n", *(const char **)buf);
    if (*(_QWORD *)buf)
      free(*(void **)buf);
    CAFormatter::CAFormatter((CAFormatter *)buf, (const AudioStreamBasicDescription *)((char *)this + 624));
    fprintf(a2, "HW Format MIC: %s \n", *(const char **)buf);
    if (*(_QWORD *)buf)
      free(*(void **)buf);
    fprintf(a2, "HW Block Size REF: %d \n", *((_DWORD *)this + 123));
    fprintf(a2, "HW Block Size MIC: %d \n", *((_DWORD *)this + 124));
    v8 = *((_QWORD *)this + 262);
    if (*((_QWORD *)this + 263) != v8)
    {
      v9 = 0;
      do
      {
        fprintf(a2, "    HW Trim Gain MIC(ch-%lu): %f dB \n", v9, *(float *)(v8 + 4 * v9));
        ++v9;
        v8 = *((_QWORD *)this + 262);
      }
      while (v9 < (*((_QWORD *)this + 263) - v8) >> 2);
    }
    v10 = *((_QWORD *)this + 266);
    if (*((_QWORD *)this + 267) != v10)
    {
      v11 = 0;
      do
      {
        fprintf(a2, "    HW Trim Gain REF(ch-%lu): %f dB \n", v11, *(float *)(v10 + 4 * v11));
        ++v11;
        v10 = *((_QWORD *)this + 266);
      }
      while (v11 < (*((_QWORD *)this + 267) - v10) >> 2);
    }
    CAFormatter::CAFormatter((CAFormatter *)buf, (const AudioStreamBasicDescription *)((char *)this + 984));
    fprintf(a2, "VP Output Format: %s \n", *(const char **)buf);
    if (*(_QWORD *)buf)
      free(*(void **)buf);
    fprintf(a2, "REF Channel BitMap: %x, OUT Channel BitMap: %x \n", *((_DWORD *)this + 100), *((_DWORD *)this + 101));
    fprintf(a2, "HW MIC Channels: %s, BitMap: %x \n", *((const char **)this + 54), *((_DWORD *)this + 106));
    fprintf(a2, "EP MIC Channels: %s, BitMap: %x \n", *((const char **)this + 57), *((_DWORD *)this + 112));
    v12 = 0;
    while (((*((_DWORD *)this + 116) >> v12) & 1) == 0)
    {
      if (++v12 == 32)
      {
        v12 = 33;
        break;
      }
    }
    fprintf(a2, "Primary epmic index: %d \n", v12);
    fprintf(a2, "SRC Quality: 0x%x (0:min, 0x20:low, 0x40:med, 0x60:hig, 0x7f:max) \n", *((_DWORD *)this + 1112));
    fprintf(a2, "Hw real-world correction: %f samples \n", *((float *)this + 1111));
    fprintf(a2, "Ref-Mic Delay: %f msec \n", *((float *)this + 1092));
    fprintf(a2, "    Pre-echo-processing Digital Input Gain: %f dB \n", *((float *)this + 1090));
    fprintf(a2, "Post-echo-processing Digital Input Gain: %f dB \n", *((float *)this + 1091));
    fprintf(a2, "Downlink Mix Gain: %f dB \n", *((float *)this + 1113));
    fprintf(a2, "Downlink Final Gain Chn 0: %f dB \n", *((float *)this + 1129));
    fprintf(a2, "Downlink Final Gain Chn 1: %f dB \n", *((float *)this + 1130));
    CAFormatter::CAFormatter((CAFormatter *)buf, (VoiceProcessorV2 *)((char *)this + 208));
    fprintf(a2, "DL Format FEV: %s \n", *(const char **)buf);
    if (*(_QWORD *)buf)
      free(*(void **)buf);
    CAFormatter::CAFormatter((CAFormatter *)buf, (VoiceProcessorV2 *)((char *)this + 288));
    fprintf(a2, "DL Format FEV Process: %s \n", *(const char **)buf);
    if (*(_QWORD *)buf)
      free(*(void **)buf);
    CAFormatter::CAFormatter((CAFormatter *)buf, (VoiceProcessorV2 *)((char *)this + 328));
    fprintf(a2, "DL Format MIX: %s \n", *(const char **)buf);
    if (*(_QWORD *)buf)
      free(*(void **)buf);
    fprintf(a2, "DL Block Size MIX: %d \n", *((_DWORD *)this + 121));
    fprintf(a2, "calcblkzsizes: mHwRefBlkSz = %lu, mHwMicBlkSz = %lu \n", *((unsigned int *)this + 123), *((unsigned int *)this + 124));
    fprintf(a2, "calcblkzsizes: mDsRefBlkSz = %lu, mDsMicBlkSz = %lu \n", *((unsigned int *)this + 125), *((unsigned int *)this + 126));
    fprintf(a2, "calcblkzsizes: mEpIoBlkSz  = %lu, mUsOutBlkSz = %lu \n", *((unsigned int *)this + 127), *((unsigned int *)this + 131));
    CAFormatter::CAFormatter((CAFormatter *)buf, (const AudioStreamBasicDescription *)((char *)this + 824));
    fprintf(a2, "calcasbds: mEpMicASBD (ignore the # of channels) format: %s", *(const char **)buf);
    if (*(_QWORD *)buf)
      free(*(void **)buf);
    CAFormatter::CAFormatter((CAFormatter *)buf, (const AudioStreamBasicDescription *)((char *)this + 904));
    fprintf(a2, "calcasbds: mEpOutASBD format: %s", *(const char **)buf);
    if (*(_QWORD *)buf)
      free(*(void **)buf);
    CAFormatter::CAFormatter((CAFormatter *)buf, (const AudioStreamBasicDescription *)((char *)this + 944));
    fprintf(a2, "calcasbds: mUsOutASBD format: %s", *(const char **)buf);
    if (*(_QWORD *)buf)
      free(*(void **)buf);
    fprintf(a2, "HW preslatency & ref to mic delay: input {deviceID=%d, latency=%u, safety offset=%u}, output {deviceID=%d, latency=%u, safety offset=%u} \n", *((_DWORD *)this + 285), *((_DWORD *)this + 291), *((_DWORD *)this + 293), *((_DWORD *)this + 284), *((_DWORD *)this + 292), *((_DWORD *)this + 294));
    fprintf(a2, "Num Ref Ports = %u, Num Mic Ports = %u \n", (*((_QWORD *)this + 293) - *((_QWORD *)this + 292)) >> 2, (*((_QWORD *)this + 296) - *((_QWORD *)this + 295)) >> 2);
    v13 = *((_QWORD *)this + 292);
    if (*((_QWORD *)this + 293) != v13)
    {
      v14 = 0;
      do
      {
        CAX4CCString::CAX4CCString((CAX4CCString *)buf, *(_DWORD *)(v13 + 4 * v14));
        fprintf(a2, "      : Ref Port #%lu=%s \n", v14++, buf);
        v13 = *((_QWORD *)this + 292);
      }
      while (v14 < (*((_QWORD *)this + 293) - v13) >> 2);
    }
    v15 = *((_QWORD *)this + 295);
    if (*((_QWORD *)this + 296) != v15)
    {
      v16 = 0;
      do
      {
        CAX4CCString::CAX4CCString((CAX4CCString *)buf, *(_DWORD *)(v15 + 4 * v16));
        fprintf(a2, "      : Mic Port #%lu=%s \n", v16++, buf);
        v15 = *((_QWORD *)this + 295);
      }
      while (v16 < (*((_QWORD *)this + 296) - v15) >> 2);
    }
  }
  else
  {
    if (VPLogScope(void)::once != -1)
      dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
    v17 = (_QWORD *)VPLogScope(void)::scope;
    if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(2, VPLogScope(void)::scope, 0))
    {
      v18 = (*v17 ? *v17 : MEMORY[0x1E0C81028]);
      if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 136315394;
        *(_QWORD *)&buf[4] = "VoiceProcessor_v2.cpp";
        v21 = 1024;
        v22 = 6007;
        _os_log_impl(&dword_1B5ED0000, v18, OS_LOG_TYPE_DEFAULT, "%25s:%-5d  >vp> VoiceProcessorV2::DumpToFile() - Dump file is not available", buf, 0x12u);
      }
    }
    v19 = (int *)*((_QWORD *)this + 1570);
    if (v19 && (*((_BYTE *)this + 15897) || *((_BYTE *)this + 15898)))
    {
      if (VPLogScope(void)::once != -1)
        dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
      CALegacyLog::log(v19, 2, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/VoiceProcessor_v2.cpp", 6007, "DumpState", "VoiceProcessorV2::DumpToFile() - Dump file is not available");
    }
  }
}

uint64_t VoiceProcessorV2::AppendReferenceSignal(VoiceProcessorV2 *this, AudioBufferList *a2, AudioBufferList *a3)
{
  return VoiceProcessorV2::AppendReferenceSignal(this, a2, a3, 1);
}

uint64_t VoiceProcessorV2::AddPropertyListenerBlock(uint64_t a1, unsigned int a2, const void *a3, uint64_t *a4)
{
  uint64_t v4;
  std::mutex *v9;
  uint64_t *v10;
  unint64_t v11;
  uint8x8_t v12;
  uint64_t v13;
  uint64_t **v14;
  uint64_t *i;
  unint64_t v16;
  _QWORD *v17;
  float v18;
  float v19;
  _BOOL8 v20;
  unint64_t v21;
  unint64_t v22;
  size_t v23;
  uint64_t v24;
  _QWORD *v25;
  unint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  _QWORD *v29;
  unint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  _QWORD *v37;
  char *v38;
  _QWORD *v39;
  char *v40;
  char *v41;
  unint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  char *v45;
  _QWORD *v46;
  NSObject *v47;
  unsigned int v48;
  _QWORD *v49;
  uint64_t v50;
  int *v51;
  uint64_t v52;
  unsigned int v53;
  _QWORD *v54;
  uint64_t v56;
  void *aBlock;
  uint64_t v58;
  unsigned int v59;
  void **v60;
  _BYTE buf[24];
  uint64_t v62;
  uint64_t v63;

  v63 = *MEMORY[0x1E0C80C00];
  v59 = a2;
  v9 = (std::mutex *)(a1 + 2664);
  std::mutex::lock((std::mutex *)(a1 + 2664));
  if (a2 != 1885957987)
  {
    v13 = 4294956417;
    goto LABEL_87;
  }
  v10 = (uint64_t *)(a1 + 4304);
  if (!std::__hash_table<std::__hash_value_type<unsigned int,std::tuple<__CFString const*,float,float,float,AudioUnitParameterUnit,unsigned int>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::tuple<__CFString const*,float,float,float,AudioUnitParameterUnit,unsigned int>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::tuple<__CFString const*,float,float,float,AudioUnitParameterUnit,unsigned int>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::tuple<__CFString const*,float,float,float,AudioUnitParameterUnit,unsigned int>>>>::find<unsigned int>((_QWORD *)(a1 + 4304), 0x70696F63u))
  {
    v56 = 0;
    aBlock = 0;
    v58 = 0;
    *(_DWORD *)buf = 1885957987;
    *(_QWORD *)&buf[16] = 0;
    v62 = 0;
    *(_QWORD *)&buf[8] = 0;
    v11 = *(_QWORD *)(a1 + 4312);
    if (v11)
    {
      v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
      v12.i16[0] = vaddlv_u8(v12);
      if (v12.u32[0] > 1uLL)
      {
        v4 = 1885957987;
        if (v11 <= 0x70696F63)
          v4 = 0x70696F63 % v11;
      }
      else
      {
        v4 = ((_DWORD)v11 - 1) & 0x70696F63;
      }
      v14 = *(uint64_t ***)(*v10 + 8 * v4);
      if (v14)
      {
        for (i = *v14; i; i = (uint64_t *)*i)
        {
          v16 = i[1];
          if (v16 == 1885957987)
          {
            if (*((_DWORD *)i + 4) == 1885957987)
              goto LABEL_43;
          }
          else
          {
            if (v12.u32[0] > 1uLL)
            {
              if (v16 >= v11)
                v16 %= v11;
            }
            else
            {
              v16 &= v11 - 1;
            }
            if (v16 != v4)
              break;
          }
        }
      }
    }
    v17 = operator new(0x30uLL);
    *v17 = 0;
    v17[1] = 1885957987;
    *((_DWORD *)v17 + 4) = 1885957987;
    v17[4] = 0;
    v17[5] = 0;
    v17[3] = 0;
    *(_QWORD *)&buf[16] = 0;
    v62 = 0;
    *(_QWORD *)&buf[8] = 0;
    v18 = (float)(unint64_t)(*(_QWORD *)(a1 + 4328) + 1);
    v19 = *(float *)(a1 + 4336);
    if (!v11 || (float)(v19 * (float)v11) < v18)
    {
      v20 = 1;
      if (v11 >= 3)
        v20 = (v11 & (v11 - 1)) != 0;
      v21 = v20 | (2 * v11);
      v22 = vcvtps_u32_f32(v18 / v19);
      if (v21 <= v22)
        v23 = v22;
      else
        v23 = v21;
      std::__hash_table<std::__hash_value_type<unsigned int,std::tuple<__CFString const*,float,float,float,AudioUnitParameterUnit,unsigned int>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::tuple<__CFString const*,float,float,float,AudioUnitParameterUnit,unsigned int>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::tuple<__CFString const*,float,float,float,AudioUnitParameterUnit,unsigned int>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::tuple<__CFString const*,float,float,float,AudioUnitParameterUnit,unsigned int>>>>::__rehash<true>(a1 + 4304, v23);
      v11 = *(_QWORD *)(a1 + 4312);
      if ((v11 & (v11 - 1)) != 0)
      {
        if (v11 <= 0x70696F63)
          v4 = 0x70696F63 % v11;
        else
          v4 = 1885957987;
      }
      else
      {
        v4 = ((_DWORD)v11 - 1) & 0x70696F63;
      }
    }
    v24 = *v10;
    v25 = *(_QWORD **)(*v10 + 8 * v4);
    if (v25)
    {
      *v17 = *v25;
    }
    else
    {
      *v17 = *(_QWORD *)(a1 + 4320);
      *(_QWORD *)(a1 + 4320) = v17;
      *(_QWORD *)(v24 + 8 * v4) = a1 + 4320;
      if (!*v17)
        goto LABEL_42;
      v26 = *(_QWORD *)(*v17 + 8);
      if ((v11 & (v11 - 1)) != 0)
      {
        if (v26 >= v11)
          v26 %= v11;
      }
      else
      {
        v26 &= v11 - 1;
      }
      v25 = (_QWORD *)(*v10 + 8 * v26);
    }
    *v25 = v17;
LABEL_42:
    ++*(_QWORD *)(a1 + 4328);
LABEL_43:
    v60 = (void **)&buf[8];
    std::vector<VoiceProcessorV2::VoiceProcessorPropertyListenerBlockInfo>::__destroy_vector::operator()[abi:ne180100](&v60);
    *(_QWORD *)buf = &v56;
    std::vector<VoiceProcessorV2::VoiceProcessorPropertyListenerBlockInfo>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
  }
  v27 = *(_QWORD *)(a1 + 4344) + 1;
  *(_QWORD *)(a1 + 4344) = v27;
  v56 = v27;
  aBlock = 0;
  if (a3)
    aBlock = _Block_copy(a3);
  v28 = std::__hash_table<std::__hash_value_type<unsigned int,std::vector<VoiceProcessorV2::VoiceProcessorPropertyListenerBlockInfo>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::vector<VoiceProcessorV2::VoiceProcessorPropertyListenerBlockInfo>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::vector<VoiceProcessorV2::VoiceProcessorPropertyListenerBlockInfo>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::vector<VoiceProcessorV2::VoiceProcessorPropertyListenerBlockInfo>>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>(a1 + 4304, 0x70696F63u, &v59);
  v29 = (_QWORD *)v28[4];
  v30 = v28[5];
  if ((unint64_t)v29 >= v30)
  {
    v32 = v28[3];
    v33 = ((uint64_t)v29 - v32) >> 4;
    if ((unint64_t)(v33 + 1) >> 60)
      std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
    v34 = v30 - v32;
    v35 = v34 >> 3;
    if (v34 >> 3 <= (unint64_t)(v33 + 1))
      v35 = v33 + 1;
    if ((unint64_t)v34 >= 0x7FFFFFFFFFFFFFF0)
      v36 = 0xFFFFFFFFFFFFFFFLL;
    else
      v36 = v35;
    if (v36)
    {
      if (v36 >> 60)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v37 = operator new(16 * v36);
    }
    else
    {
      v37 = 0;
    }
    v38 = (char *)&v37[2 * v36];
    v39 = std::construct_at[abi:ne180100]<VoiceProcessorV2::VoiceProcessorPropertyListenerBlockInfo,VoiceProcessorV2::VoiceProcessorPropertyListenerBlockInfo&,VoiceProcessorV2::VoiceProcessorPropertyListenerBlockInfo*>(&v37[2 * v33], &v56);
    v31 = v39 + 2;
    v40 = (char *)v28[3];
    v41 = (char *)v28[4];
    if (v41 == v40)
    {
      v28[3] = v39;
      v28[4] = v31;
      v28[5] = v38;
      if (!v41)
        goto LABEL_68;
    }
    else
    {
      v42 = 0;
      do
      {
        v43 = &v39[v42 / 8];
        *(v43 - 2) = *(_QWORD *)&v41[v42 - 16];
        *(v43 - 1) = 0;
        v44 = *(_QWORD *)&v41[v42 - 8];
        if (v44)
        {
          *(v43 - 1) = v44;
          *(_QWORD *)&v41[v42 - 8] = 0;
        }
        v42 -= 16;
      }
      while (&v41[v42] != v40);
      v45 = (char *)v28[3];
      v28[3] = &v39[v42 / 8];
      v28[4] = v31;
      v28[5] = v38;
      if (v41 != v45)
      {
        do
        {
          v41 -= 16;
          std::__destroy_at[abi:ne180100]<VoiceProcessorV2::VoiceProcessorPropertyListenerBlockInfo,0>((uint64_t)v41);
        }
        while (v41 != v45);
        v41 = v45;
      }
      if (!v41)
        goto LABEL_68;
    }
    operator delete(v41);
LABEL_68:
    v27 = v56;
    goto LABEL_69;
  }
  v31 = std::construct_at[abi:ne180100]<VoiceProcessorV2::VoiceProcessorPropertyListenerBlockInfo,VoiceProcessorV2::VoiceProcessorPropertyListenerBlockInfo&,VoiceProcessorV2::VoiceProcessorPropertyListenerBlockInfo*>(v29, &v56)+ 2;
  v28[4] = v31;
LABEL_69:
  v28[4] = v31;
  *a4 = v27;
  if (VPLogScope(void)::once != -1)
    dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
  v46 = (_QWORD *)VPLogScope(void)::scope;
  if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(5, VPLogScope(void)::scope, 0))
  {
    v47 = (*v46 ? *v46 : MEMORY[0x1E0C81028]);
    if (os_log_type_enabled(v47, OS_LOG_TYPE_DEBUG))
    {
      v48 = v59;
      v49 = std::__hash_table<std::__hash_value_type<unsigned int,std::vector<VoiceProcessorV2::VoiceProcessorPropertyListenerBlockInfo>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::vector<VoiceProcessorV2::VoiceProcessorPropertyListenerBlockInfo>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::vector<VoiceProcessorV2::VoiceProcessorPropertyListenerBlockInfo>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::vector<VoiceProcessorV2::VoiceProcessorPropertyListenerBlockInfo>>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>(a1 + 4304, v59, &v59);
      v50 = (v49[4] - v49[3]) >> 4;
      *(_DWORD *)buf = 136315906;
      *(_QWORD *)&buf[4] = "VoiceProcessor_v2.cpp";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 1077;
      *(_WORD *)&buf[18] = 1024;
      *(_DWORD *)&buf[20] = v48;
      LOWORD(v62) = 1024;
      *(_DWORD *)((char *)&v62 + 2) = v50;
      _os_log_impl(&dword_1B5ED0000, v47, OS_LOG_TYPE_DEBUG, "%25s:%-5d  <vp> Successfully added property listener for property ID %d! listener list size: %d", buf, 0x1Eu);
    }
  }
  v51 = *(int **)(a1 + 12560);
  if (v51 && (*(_BYTE *)(a1 + 15897) || *(_BYTE *)(a1 + 15898)))
  {
    if (VPLogScope(void)::once != -1)
      dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
    v52 = VPLogScope(void)::scope;
    v53 = v59;
    v54 = std::__hash_table<std::__hash_value_type<unsigned int,std::vector<VoiceProcessorV2::VoiceProcessorPropertyListenerBlockInfo>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::vector<VoiceProcessorV2::VoiceProcessorPropertyListenerBlockInfo>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::vector<VoiceProcessorV2::VoiceProcessorPropertyListenerBlockInfo>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::vector<VoiceProcessorV2::VoiceProcessorPropertyListenerBlockInfo>>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>((uint64_t)v10, v59, &v59);
    CALegacyLog::log(v51, 5, v52, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/VoiceProcessor_v2.cpp", 1077, "AddPropertyListenerBlock", "Successfully added property listener for property ID %d! listener list size: %d", v53, (v54[4] - v54[3]) >> 4);
  }
  if (aBlock)
    _Block_release(aBlock);
  v13 = 0;
LABEL_87:
  std::mutex::unlock(v9);
  return v13;
}

void sub_1B63CAFCC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  std::mutex *v4;
  va_list va;

  va_start(va, a4);
  VoiceProcessorV2::VoiceProcessorPropertyListenerBlockInfo::~VoiceProcessorPropertyListenerBlockInfo((VoiceProcessorV2::VoiceProcessorPropertyListenerBlockInfo *)va);
  std::mutex::unlock(v4);
  _Unwind_Resume(a1);
}

uint64_t VoiceProcessorV2::RemovePropertyListenerBlock(int8x8_t *this, unsigned int a2, uint64_t a3)
{
  std::mutex *v6;
  int8x8_t *v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  const void *v19;
  uint64_t v20;
  uint64_t *v21;
  int8x8_t v22;
  unint64_t v23;
  uint8x8_t v24;
  uint64_t *v25;
  uint64_t *v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unsigned int v32;

  v32 = a2;
  v6 = (std::mutex *)&this[333];
  std::mutex::lock((std::mutex *)&this[333]);
  v7 = this + 538;
  if (std::__hash_table<std::__hash_value_type<unsigned int,std::tuple<__CFString const*,float,float,float,AudioUnitParameterUnit,unsigned int>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::tuple<__CFString const*,float,float,float,AudioUnitParameterUnit,unsigned int>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::tuple<__CFString const*,float,float,float,AudioUnitParameterUnit,unsigned int>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::tuple<__CFString const*,float,float,float,AudioUnitParameterUnit,unsigned int>>>>::find<unsigned int>(&this[538], a2))
  {
    v8 = std::__hash_table<std::__hash_value_type<unsigned int,std::vector<VoiceProcessorV2::VoiceProcessorPropertyListenerBlockInfo>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::vector<VoiceProcessorV2::VoiceProcessorPropertyListenerBlockInfo>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::vector<VoiceProcessorV2::VoiceProcessorPropertyListenerBlockInfo>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::vector<VoiceProcessorV2::VoiceProcessorPropertyListenerBlockInfo>>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>((uint64_t)&this[538], a2, &v32);
    v9 = v8;
    v10 = v8[3];
    v11 = v8[4];
    if (v11 != v10)
    {
      v12 = 0;
      v13 = (v11 - v10) >> 4;
      if (v13 <= 1)
        v13 = 1;
      v14 = (uint64_t *)v8[3];
      while (1)
      {
        v15 = *v14;
        v14 += 2;
        if (v15 == a3)
          break;
        if (v13 == ++v12)
          goto LABEL_48;
      }
      if ((v12 & 0x80000000) == 0)
      {
        v17 = (_QWORD *)(v10 + 16 * v12);
        v18 = v17 + 2;
        if (v17 + 2 != (_QWORD *)v11)
        {
          do
          {
            v17 = v18;
            *(v18 - 2) = *v18;
            v19 = (const void *)*(v18 - 1);
            if (v19)
              _Block_release(v19);
            *(v17 - 1) = 0;
            v20 = v17[1];
            if (v20)
            {
              *(v17 - 1) = v20;
              v17[1] = 0;
            }
            v18 = v17 + 2;
          }
          while (v17 + 2 != (_QWORD *)v11);
          v11 = v9[4];
        }
        while ((_QWORD *)v11 != v17)
        {
          v11 -= 16;
          std::__destroy_at[abi:ne180100]<VoiceProcessorV2::VoiceProcessorPropertyListenerBlockInfo,0>(v11);
        }
        v9[4] = v17;
        if ((_QWORD *)v9[3] == v17)
        {
          v21 = std::__hash_table<std::__hash_value_type<unsigned int,std::tuple<__CFString const*,float,float,float,AudioUnitParameterUnit,unsigned int>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::tuple<__CFString const*,float,float,float,AudioUnitParameterUnit,unsigned int>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::tuple<__CFString const*,float,float,float,AudioUnitParameterUnit,unsigned int>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::tuple<__CFString const*,float,float,float,AudioUnitParameterUnit,unsigned int>>>>::find<unsigned int>(&this[538], v32);
          v22 = this[539];
          v23 = v21[1];
          v24 = (uint8x8_t)vcnt_s8(v22);
          v24.i16[0] = vaddlv_u8(v24);
          if (v24.u32[0] > 1uLL)
          {
            if (v23 >= *(_QWORD *)&v22)
              v23 %= *(_QWORD *)&v22;
          }
          else
          {
            v23 &= *(_QWORD *)&v22 - 1;
          }
          v25 = *(uint64_t **)(*(_QWORD *)v7 + 8 * v23);
          do
          {
            v26 = v25;
            v25 = (uint64_t *)*v25;
          }
          while (v25 != v21);
          if (v26 == (uint64_t *)&this[540])
            goto LABEL_38;
          v27 = v26[1];
          if (v24.u32[0] > 1uLL)
          {
            if (v27 >= *(_QWORD *)&v22)
              v27 %= *(_QWORD *)&v22;
          }
          else
          {
            v27 &= *(_QWORD *)&v22 - 1;
          }
          if (v27 != v23)
          {
LABEL_38:
            if (!*v21)
              goto LABEL_39;
            v28 = *(_QWORD *)(*v21 + 8);
            if (v24.u32[0] > 1uLL)
            {
              if (v28 >= *(_QWORD *)&v22)
                v28 %= *(_QWORD *)&v22;
            }
            else
            {
              v28 &= *(_QWORD *)&v22 - 1;
            }
            if (v28 != v23)
LABEL_39:
              *(_QWORD *)(*(_QWORD *)v7 + 8 * v23) = 0;
          }
          v29 = *v21;
          if (*v21)
          {
            v30 = *(_QWORD *)(v29 + 8);
            if (v24.u32[0] > 1uLL)
            {
              if (v30 >= *(_QWORD *)&v22)
                v30 %= *(_QWORD *)&v22;
            }
            else
            {
              v30 &= *(_QWORD *)&v22 - 1;
            }
            if (v30 != v23)
            {
              *(_QWORD *)(*(_QWORD *)v7 + 8 * v30) = v26;
              v29 = *v21;
            }
          }
          *v26 = v29;
          *v21 = 0;
          --*(_QWORD *)&this[541];
          std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned int,std::vector<VoiceProcessorV2::VoiceProcessorPropertyListenerBlockInfo>>,void *>>>::operator()[abi:ne180100](1, (void **)v21);
        }
      }
    }
LABEL_48:
    v16 = 0;
  }
  else
  {
    v16 = 4294956417;
  }
  std::mutex::unlock(v6);
  return v16;
}

void sub_1B63CB2BC(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

_BYTE *VoiceProcessorV2::CorrectHardwareOutputSafetyOffsets(_BYTE *this)
{
  if (this[2244])
    return (_BYTE *)(*(uint64_t (**)(_BYTE *))(*(_QWORD *)this + 272))(this);
  return this;
}

void VoiceProcessorV2::UpdateHardwareOutputSafetyOffsets(VoiceProcessorV2 *this)
{
  int v2;
  unint64_t PortID;
  _BYTE *v4;
  OSStatus PropertyData;
  OSStatus v6;
  _QWORD *v7;
  NSObject *v8;
  int *v9;
  _QWORD *v10;
  NSObject *v11;
  AudioObjectID *v12;
  int *v13;
  OSStatus v14;
  OSStatus v15;
  _QWORD *v16;
  NSObject *v17;
  int *v18;
  _QWORD *v19;
  NSObject *v20;
  AudioObjectID v21;
  int *v22;
  _QWORD *v23;
  NSObject *v24;
  AudioObjectID v25;
  int *v26;
  OSStatus v27;
  OSStatus v28;
  _QWORD *v29;
  NSObject *v30;
  int *v31;
  int *v32;
  int *v33;
  AudioObjectID outData;
  unsigned int v35;
  UInt32 ioDataSize;
  AudioObjectPropertyAddress inAddress;
  __int16 v38;
  int v39;
  __int16 v40;
  AudioObjectID v41;
  uint64_t v42;

  v42 = *MEMORY[0x1E0C80C00];
  if (*((_QWORD *)this + 292) != *((_QWORD *)this + 293))
  {
    v2 = *((_DWORD *)this + 294);
    v35 = 1869968496;
    PortID = VoiceProcessorV2::getPortID(this, (AudioObjectID *)this + 284, &v35);
    if (!(_DWORD)PortID)
    {
      v4 = (char *)this + 15897;
      outData = 0;
      *(_QWORD *)&inAddress.mSelector = 0x676C6F62706F776ELL;
      inAddress.mElement = 0;
      ioDataSize = 4;
      PropertyData = AudioObjectGetPropertyData(HIDWORD(PortID), &inAddress, 0, 0, &ioDataSize, &outData);
      if (PropertyData)
      {
        v6 = PropertyData;
        if (VPLogScope(void)::once != -1)
          dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
        v7 = (_QWORD *)VPLogScope(void)::scope;
        if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(1, VPLogScope(void)::scope, 0))
        {
          v8 = (*v7 ? *v7 : MEMORY[0x1E0C81028]);
          if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
          {
            inAddress.mSelector = 136315650;
            *(_QWORD *)&inAddress.mScope = "VoiceProcessor_v2.cpp";
            v38 = 1024;
            v39 = 1694;
            v40 = 1024;
            v41 = v6;
            _os_log_impl(&dword_1B5ED0000, v8, OS_LOG_TYPE_ERROR, "%25s:%-5d  >vp> error %d getting owning device ID for the ref port", (uint8_t *)&inAddress, 0x18u);
          }
        }
        v9 = (int *)*((_QWORD *)this + 1570);
        if (v9 && (*v4 || *((_BYTE *)this + 15898)))
        {
          if (VPLogScope(void)::once != -1)
            dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
          CALegacyLog::log(v9, 1, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/VoiceProcessor_v2.cpp", 1694, "UpdateHardwareOutputSafetyOffsets", "error %d getting owning device ID for the ref port", v6);
        }
      }
      if (VPLogScope(void)::once != -1)
        dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
      v10 = (_QWORD *)VPLogScope(void)::scope;
      if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(5, VPLogScope(void)::scope, 0))
      {
        v11 = (*v10 ? *v10 : MEMORY[0x1E0C81028]);
        if (os_log_type_enabled(v11, OS_LOG_TYPE_DEBUG))
        {
          inAddress.mSelector = 136315650;
          *(_QWORD *)&inAddress.mScope = "VoiceProcessor_v2.cpp";
          v38 = 1024;
          v39 = 1696;
          v40 = 1024;
          v41 = outData;
          _os_log_impl(&dword_1B5ED0000, v11, OS_LOG_TYPE_DEBUG, "%25s:%-5d  <vp> ref physical dev ID = %u", (uint8_t *)&inAddress, 0x18u);
        }
      }
      v12 = (AudioObjectID *)((char *)this + 1176);
      v13 = (int *)*((_QWORD *)this + 1570);
      if (v13 && (*v4 || *((_BYTE *)this + 15898)))
      {
        if (VPLogScope(void)::once != -1)
          dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
        CALegacyLog::log(v13, 5, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/VoiceProcessor_v2.cpp", 1696, "UpdateHardwareOutputSafetyOffsets", "ref physical dev ID = %u", outData);
      }
      *(_QWORD *)&inAddress.mSelector = 0x6F75747073616674;
      inAddress.mElement = 0;
      ioDataSize = 4;
      v14 = AudioObjectGetPropertyData(outData, &inAddress, 0, 0, &ioDataSize, (char *)this + 1176);
      if (v14)
      {
        v15 = v14;
        if (VPLogScope(void)::once != -1)
          dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
        v16 = (_QWORD *)VPLogScope(void)::scope;
        if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(1, VPLogScope(void)::scope, 0))
        {
          v17 = (*v16 ? *v16 : MEMORY[0x1E0C81028]);
          if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
          {
            inAddress.mSelector = 136315650;
            *(_QWORD *)&inAddress.mScope = "VoiceProcessor_v2.cpp";
            v38 = 1024;
            v39 = 1699;
            v40 = 1024;
            v41 = v15;
            _os_log_impl(&dword_1B5ED0000, v17, OS_LOG_TYPE_ERROR, "%25s:%-5d  >vp> error %d getting physical output device safety offset", (uint8_t *)&inAddress, 0x18u);
          }
        }
        v18 = (int *)*((_QWORD *)this + 1570);
        if (v18 && (*v4 || *((_BYTE *)this + 15898)))
        {
          if (VPLogScope(void)::once != -1)
          {
            v32 = (int *)*((_QWORD *)this + 1570);
            dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
            v18 = v32;
          }
          CALegacyLog::log(v18, 1, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/VoiceProcessor_v2.cpp", 1699, "UpdateHardwareOutputSafetyOffsets", "error %d getting physical output device safety offset", v15);
        }
      }
      if (!*((_DWORD *)this + 1127))
      {
        *(_QWORD *)&inAddress.mSelector = 0x696E707473616674;
        inAddress.mElement = 0;
        ioDataSize = 4;
        v27 = AudioObjectGetPropertyData(outData, &inAddress, 0, 0, &ioDataSize, (char *)this + 1152);
        if (v27)
        {
          v28 = v27;
          if (VPLogScope(void)::once != -1)
            dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
          v29 = (_QWORD *)VPLogScope(void)::scope;
          if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(1, VPLogScope(void)::scope, 0))
          {
            v30 = (*v29 ? *v29 : MEMORY[0x1E0C81028]);
            if (os_log_type_enabled(v30, OS_LOG_TYPE_ERROR))
            {
              inAddress.mSelector = 136315650;
              *(_QWORD *)&inAddress.mScope = "VoiceProcessor_v2.cpp";
              v38 = 1024;
              v39 = 1703;
              v40 = 1024;
              v41 = v28;
              _os_log_impl(&dword_1B5ED0000, v30, OS_LOG_TYPE_ERROR, "%25s:%-5d  >vp> error %d getting tap stream input safety offset", (uint8_t *)&inAddress, 0x18u);
            }
          }
          v31 = (int *)*((_QWORD *)this + 1570);
          if (v31 && (*v4 || *((_BYTE *)this + 15898)))
          {
            if (VPLogScope(void)::once != -1)
            {
              v33 = (int *)*((_QWORD *)this + 1570);
              dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
              v31 = v33;
            }
            CALegacyLog::log(v31, 1, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/VoiceProcessor_v2.cpp", 1703, "UpdateHardwareOutputSafetyOffsets", "error %d getting tap stream input safety offset", v28);
          }
        }
      }
      (*(void (**)(VoiceProcessorV2 *, _QWORD))(*(_QWORD *)this + 296))(this, outData);
      *((_DWORD *)this + 295) = *((_DWORD *)this + 294) - v2;
      if (VPLogScope(void)::once != -1)
        dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
      v19 = (_QWORD *)VPLogScope(void)::scope;
      if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(3, VPLogScope(void)::scope, 0))
      {
        v20 = (*v19 ? *v19 : MEMORY[0x1E0C81028]);
        if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
        {
          v21 = *v12;
          inAddress.mSelector = 136315650;
          *(_QWORD *)&inAddress.mScope = "VoiceProcessor_v2.cpp";
          v38 = 1024;
          v39 = 1710;
          v40 = 1024;
          v41 = v21;
          _os_log_impl(&dword_1B5ED0000, v20, OS_LOG_TYPE_DEFAULT, "%25s:%-5d  <vp> Override aggregate device output safety offset with physical device output safety offset= %u", (uint8_t *)&inAddress, 0x18u);
        }
      }
      v22 = (int *)*((_QWORD *)this + 1570);
      if (v22 && (*v4 || *((_BYTE *)this + 15898)))
      {
        if (VPLogScope(void)::once != -1)
          dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
        CALegacyLog::log(v22, 3, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/VoiceProcessor_v2.cpp", 1710, "UpdateHardwareOutputSafetyOffsets", "Override aggregate device output safety offset with physical device output safety offset= %u", *v12);
      }
      if (VPLogScope(void)::once != -1)
        dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
      v23 = (_QWORD *)VPLogScope(void)::scope;
      if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(5, VPLogScope(void)::scope, 0))
      {
        v24 = (*v23 ? *v23 : MEMORY[0x1E0C81028]);
        if (os_log_type_enabled(v24, OS_LOG_TYPE_DEBUG))
        {
          v25 = *((_DWORD *)this + 295);
          inAddress.mSelector = 136315650;
          *(_QWORD *)&inAddress.mScope = "VoiceProcessor_v2.cpp";
          v38 = 1024;
          v39 = 1711;
          v40 = 1024;
          v41 = v25;
          _os_log_impl(&dword_1B5ED0000, v24, OS_LOG_TYPE_DEBUG, "%25s:%-5d  <vp> Output safety offset correction= %d", (uint8_t *)&inAddress, 0x18u);
        }
      }
      v26 = (int *)*((_QWORD *)this + 1570);
      if (v26 && (*v4 || *((_BYTE *)this + 15898)))
      {
        if (VPLogScope(void)::once != -1)
          dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
        CALegacyLog::log(v26, 5, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/VoiceProcessor_v2.cpp", 1711, "UpdateHardwareOutputSafetyOffsets", "Output safety offset correction= %d", *((_DWORD *)this + 295));
      }
    }
  }
}

_BYTE *VoiceProcessorV2::CorrectHardwareOutputPresentationLatency(_BYTE *this)
{
  if (this[2244])
    return (_BYTE *)(*(uint64_t (**)(_BYTE *))(*(_QWORD *)this + 288))(this);
  return this;
}

void VoiceProcessorV2::UpdateHardwareOutputPresentationLatency(VoiceProcessorV2 *this)
{
  _DWORD *v1;
  char *v3;
  AudioObjectID *v4;
  AudioObjectID v5;
  OSStatus PropertyData;
  _QWORD *v7;
  NSObject *v8;
  AudioObjectID v9;
  int *v10;
  AudioObjectID v11;
  const __CFNumber *ValueAtIndex;
  _QWORD *v13;
  NSObject *v14;
  int *v15;
  OSStatus v16;
  UInt32 v17;
  _QWORD *v18;
  NSObject *v19;
  int *v20;
  unint64_t PortID;
  OSStatus v22;
  UInt32 v23;
  _QWORD *v24;
  NSObject *v25;
  int *v26;
  _QWORD *v27;
  NSObject *v28;
  int *v29;
  OSStatus v30;
  UInt32 v31;
  _QWORD *v32;
  NSObject *v33;
  int *v34;
  _QWORD *v35;
  NSObject *v36;
  UInt32 v37;
  int *v38;
  OSStatus v39;
  UInt32 v40;
  _QWORD *v41;
  NSObject *v42;
  int *v43;
  int *v44;
  unsigned int v45;
  const __CFArray *outData;
  UInt32 valuePtr;
  UInt32 ioDataSize;
  AudioObjectPropertyAddress inAddress;
  __int16 v50;
  int v51;
  __int16 v52;
  UInt32 v53;
  __int16 v54;
  AudioObjectID v55;
  uint64_t v56;

  v56 = *MEMORY[0x1E0C80C00];
  v45 = 1869968496;
  v1 = (_DWORD *)*((_QWORD *)this + 292);
  if (v1 != *((_DWORD **)this + 293))
  {
    v3 = (char *)this + 15897;
    v4 = (AudioObjectID *)((char *)this + 1136);
    if (*v1 == 1885433971)
    {
      outData = 0;
      v5 = *v4;
      *(_QWORD *)&inAddress.mSelector = 0x6F75747064616373;
      inAddress.mElement = 0;
      valuePtr = 0;
      ioDataSize = 8;
      PropertyData = AudioObjectGetPropertyData(v5, &inAddress, 4u, v1, &ioDataSize, &outData);
      if (PropertyData)
      {
        if (VPLogScope(void)::once != -1)
          dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
        v7 = (_QWORD *)VPLogScope(void)::scope;
        if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(1, VPLogScope(void)::scope, 0))
        {
          v8 = (*v7 ? *v7 : MEMORY[0x1E0C81028]);
          if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
          {
            v9 = *v4;
            inAddress.mSelector = 136315906;
            *(_QWORD *)&inAddress.mScope = "VoiceProcessor_v2.cpp";
            v50 = 1024;
            v51 = 1829;
            v52 = 1024;
            v53 = PropertyData;
            v54 = 1024;
            v55 = v9;
            _os_log_impl(&dword_1B5ED0000, v8, OS_LOG_TYPE_ERROR, "%25s:%-5d  >vp> error %d getting streams from ref %u", (uint8_t *)&inAddress, 0x1Eu);
          }
        }
        v10 = (int *)*((_QWORD *)this + 1570);
        if (v10 && (*v3 || v3[1]))
        {
          if (VPLogScope(void)::once != -1)
          {
            v44 = (int *)*((_QWORD *)this + 1570);
            dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
            v10 = v44;
          }
          CALegacyLog::log(v10, 1, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/VoiceProcessor_v2.cpp", 1829, "getStreamID", "error %d getting streams from ref %u", PropertyData, *v4);
        }
      }
      v11 = outData;
      if (outData)
      {
        if (CFArrayGetCount(outData) >= 1)
        {
          ValueAtIndex = (const __CFNumber *)CFArrayGetValueAtIndex(outData, 0);
          CFNumberGetValue(ValueAtIndex, kCFNumberIntType, &valuePtr);
          if (VPLogScope(void)::once != -1)
            dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
          v13 = (_QWORD *)VPLogScope(void)::scope;
          if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(5, VPLogScope(void)::scope, 0))
          {
            v14 = (*v13 ? *v13 : MEMORY[0x1E0C81028]);
            if (os_log_type_enabled(v14, OS_LOG_TYPE_DEBUG))
            {
              inAddress.mSelector = 136315650;
              *(_QWORD *)&inAddress.mScope = "VoiceProcessor_v2.cpp";
              v50 = 1024;
              v51 = 1836;
              v52 = 1024;
              v53 = valuePtr;
              _os_log_impl(&dword_1B5ED0000, v14, OS_LOG_TYPE_DEBUG, "%25s:%-5d  <vp> stream ID = %u", (uint8_t *)&inAddress, 0x18u);
            }
          }
          v15 = (int *)*((_QWORD *)this + 1570);
          if (v15 && (*v3 || v3[1]))
          {
            if (VPLogScope(void)::once != -1)
              dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
            CALegacyLog::log(v15, 5, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/VoiceProcessor_v2.cpp", 1836, "getStreamID", "stream ID = %u", valuePtr);
          }
        }
        CFRelease(outData);
        v11 = valuePtr;
      }
      if (!PropertyData)
      {
        *(_QWORD *)&inAddress.mSelector = 0x6F757470736C6174;
        inAddress.mElement = 0;
        LODWORD(outData) = 4;
        v16 = AudioObjectGetPropertyData(v11, &inAddress, 0, 0, (UInt32 *)&outData, (char *)this + 1168);
        if (v16)
        {
          v17 = v16;
          if (VPLogScope(void)::once != -1)
            dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
          v18 = (_QWORD *)VPLogScope(void)::scope;
          if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(1, VPLogScope(void)::scope, 0))
          {
            v19 = (*v18 ? *v18 : MEMORY[0x1E0C81028]);
            if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
            {
              inAddress.mSelector = 136315650;
              *(_QWORD *)&inAddress.mScope = "VoiceProcessor_v2.cpp";
              v50 = 1024;
              v51 = 1750;
              v52 = 1024;
              v53 = v17;
              _os_log_impl(&dword_1B5ED0000, v19, OS_LOG_TYPE_ERROR, "%25s:%-5d  >vp> error %d getting stream output latency", (uint8_t *)&inAddress, 0x18u);
            }
          }
          v20 = (int *)*((_QWORD *)this + 1570);
          if (v20 && (*v3 || v3[1]))
          {
            if (VPLogScope(void)::once != -1)
              dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
            CALegacyLog::log(v20, 1, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/VoiceProcessor_v2.cpp", 1750, "UpdateHardwareOutputPresentationLatency", "error %d getting stream output latency", v17);
          }
        }
      }
    }
    else
    {
      PortID = VoiceProcessorV2::getPortID(this, (AudioObjectID *)this + 284, &v45);
      if (!(_DWORD)PortID)
      {
        ioDataSize = 0;
        *(_QWORD *)&inAddress.mSelector = 0x676C6F62706F776ELL;
        inAddress.mElement = 0;
        LODWORD(outData) = 4;
        v22 = AudioObjectGetPropertyData(HIDWORD(PortID), &inAddress, 0, 0, (UInt32 *)&outData, &ioDataSize);
        if (v22)
        {
          v23 = v22;
          if (VPLogScope(void)::once != -1)
            dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
          v24 = (_QWORD *)VPLogScope(void)::scope;
          if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(1, VPLogScope(void)::scope, 0))
          {
            v25 = (*v24 ? *v24 : MEMORY[0x1E0C81028]);
            if (os_log_type_enabled(v25, OS_LOG_TYPE_ERROR))
            {
              inAddress.mSelector = 136315650;
              *(_QWORD *)&inAddress.mScope = "VoiceProcessor_v2.cpp";
              v50 = 1024;
              v51 = 1762;
              v52 = 1024;
              v53 = v23;
              _os_log_impl(&dword_1B5ED0000, v25, OS_LOG_TYPE_ERROR, "%25s:%-5d  >vp> error %d getting owning device ID for the ref port", (uint8_t *)&inAddress, 0x18u);
            }
          }
          v26 = (int *)*((_QWORD *)this + 1570);
          if (v26 && (*v3 || v3[1]))
          {
            if (VPLogScope(void)::once != -1)
              dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
            CALegacyLog::log(v26, 1, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/VoiceProcessor_v2.cpp", 1762, "UpdateHardwareOutputPresentationLatency", "error %d getting owning device ID for the ref port", v23);
          }
        }
        if (VPLogScope(void)::once != -1)
          dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
        v27 = (_QWORD *)VPLogScope(void)::scope;
        if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(5, VPLogScope(void)::scope, 0))
        {
          v28 = (*v27 ? *v27 : MEMORY[0x1E0C81028]);
          if (os_log_type_enabled(v28, OS_LOG_TYPE_DEBUG))
          {
            inAddress.mSelector = 136315650;
            *(_QWORD *)&inAddress.mScope = "VoiceProcessor_v2.cpp";
            v50 = 1024;
            v51 = 1763;
            v52 = 1024;
            v53 = ioDataSize;
            _os_log_impl(&dword_1B5ED0000, v28, OS_LOG_TYPE_DEBUG, "%25s:%-5d  <vp> ref physical dev ID = %u", (uint8_t *)&inAddress, 0x18u);
          }
        }
        v29 = (int *)*((_QWORD *)this + 1570);
        if (v29 && (*v3 || v3[1]))
        {
          if (VPLogScope(void)::once != -1)
            dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
          CALegacyLog::log(v29, 5, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/VoiceProcessor_v2.cpp", 1763, "UpdateHardwareOutputPresentationLatency", "ref physical dev ID = %u", ioDataSize);
        }
        *(_QWORD *)&inAddress.mSelector = 0x6F7574706C746E63;
        inAddress.mElement = 0;
        LODWORD(outData) = 4;
        v30 = AudioObjectGetPropertyData(ioDataSize, &inAddress, 0, 0, (UInt32 *)&outData, (char *)this + 1168);
        if (v30)
        {
          v31 = v30;
          if (VPLogScope(void)::once != -1)
            dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
          v32 = (_QWORD *)VPLogScope(void)::scope;
          if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(1, VPLogScope(void)::scope, 0))
          {
            v33 = (*v32 ? *v32 : MEMORY[0x1E0C81028]);
            if (os_log_type_enabled(v33, OS_LOG_TYPE_ERROR))
            {
              inAddress.mSelector = 136315650;
              *(_QWORD *)&inAddress.mScope = "VoiceProcessor_v2.cpp";
              v50 = 1024;
              v51 = 1766;
              v52 = 1024;
              v53 = v31;
              _os_log_impl(&dword_1B5ED0000, v33, OS_LOG_TYPE_ERROR, "%25s:%-5d  >vp> error %d getting physical device output latency", (uint8_t *)&inAddress, 0x18u);
            }
          }
          v34 = (int *)*((_QWORD *)this + 1570);
          if (v34 && (*v3 || v3[1]))
          {
            if (VPLogScope(void)::once != -1)
              dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
            CALegacyLog::log(v34, 1, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/VoiceProcessor_v2.cpp", 1766, "UpdateHardwareOutputPresentationLatency", "error %d getting physical device output latency", v31);
          }
        }
        if (!*((_DWORD *)this + 1127))
        {
          *(_QWORD *)&inAddress.mSelector = 0x696E70746C746E63;
          inAddress.mElement = 0;
          LODWORD(outData) = 4;
          v39 = AudioObjectGetPropertyData(ioDataSize, &inAddress, 0, 0, (UInt32 *)&outData, (char *)this + 1148);
          if (v39)
          {
            v40 = v39;
            if (VPLogScope(void)::once != -1)
              dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
            v41 = (_QWORD *)VPLogScope(void)::scope;
            if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(1, VPLogScope(void)::scope, 0))
            {
              v42 = (*v41 ? *v41 : MEMORY[0x1E0C81028]);
              if (os_log_type_enabled(v42, OS_LOG_TYPE_ERROR))
              {
                inAddress.mSelector = 136315650;
                *(_QWORD *)&inAddress.mScope = "VoiceProcessor_v2.cpp";
                v50 = 1024;
                v51 = 1770;
                v52 = 1024;
                v53 = v40;
                _os_log_impl(&dword_1B5ED0000, v42, OS_LOG_TYPE_ERROR, "%25s:%-5d  >vp> error %d getting tap stream input latency", (uint8_t *)&inAddress, 0x18u);
              }
            }
            v43 = (int *)*((_QWORD *)this + 1570);
            if (v43 && (*v3 || v3[1]))
            {
              if (VPLogScope(void)::once != -1)
                dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
              CALegacyLog::log(v43, 1, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/VoiceProcessor_v2.cpp", 1770, "UpdateHardwareOutputPresentationLatency", "error %d getting tap stream input latency", v40);
            }
          }
        }
        (*(void (**)(VoiceProcessorV2 *, _QWORD))(*(_QWORD *)this + 304))(this, ioDataSize);
      }
    }
    if (VPLogScope(void)::once != -1)
      dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
    v35 = (_QWORD *)VPLogScope(void)::scope;
    if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(3, VPLogScope(void)::scope, 0))
    {
      v36 = (*v35 ? *v35 : MEMORY[0x1E0C81028]);
      if (os_log_type_enabled(v36, OS_LOG_TYPE_DEFAULT))
      {
        v37 = *((_DWORD *)this + 292);
        inAddress.mSelector = 136315650;
        *(_QWORD *)&inAddress.mScope = "VoiceProcessor_v2.cpp";
        v50 = 1024;
        v51 = 1778;
        v52 = 1024;
        v53 = v37;
        _os_log_impl(&dword_1B5ED0000, v36, OS_LOG_TYPE_DEFAULT, "%25s:%-5d  <vp> Override aggregate device output latency with stream/physical device output latency= %u", (uint8_t *)&inAddress, 0x18u);
      }
    }
    v38 = (int *)*((_QWORD *)this + 1570);
    if (v38 && (*v3 || v3[1]))
    {
      if (VPLogScope(void)::once != -1)
        dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
      CALegacyLog::log(v38, 3, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/VoiceProcessor_v2.cpp", 1778, "UpdateHardwareOutputPresentationLatency", "Override aggregate device output latency with stream/physical device output latency= %u", *((_DWORD *)this + 292));
    }
  }
}

void VoiceProcessorV2::ScaleHardwareOutputSafetyOffsets(VoiceProcessorV2 *this, AudioObjectID inObjectID)
{
  char *v3;
  OSStatus PropertyData;
  unint64_t v5;
  _QWORD *v6;
  NSObject *v7;
  int *v8;
  NSObject *v9;
  uint64_t v10;
  int v11;
  int *v12;
  double v13;
  _QWORD *v14;
  NSObject *v15;
  int v16;
  int *v17;
  _QWORD *v18;
  NSObject *v19;
  int v20;
  int *v21;
  _QWORD *v22;
  NSObject *v23;
  int v24;
  int *v25;
  double outData;
  UInt32 ioDataSize;
  AudioObjectPropertyAddress inAddress;
  __int16 v29;
  int v30;
  __int16 v31;
  double v32;
  __int16 v33;
  uint64_t v34;
  __int16 v35;
  int v36;
  uint64_t v37;

  v37 = *MEMORY[0x1E0C80C00];
  if (*((_BYTE *)this + 2244))
  {
    v3 = (char *)this + 15897;
    outData = 0.0;
    *(_QWORD *)&inAddress.mSelector = 0x6F7574706E737274;
    inAddress.mElement = 0;
    ioDataSize = 8;
    PropertyData = AudioObjectGetPropertyData(inObjectID, &inAddress, 0, 0, &ioDataSize, &outData);
    if (VPLogScope(void)::once != -1)
      dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
    v6 = (_QWORD *)VPLogScope(void)::scope;
    if (PropertyData)
    {
      if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(1, VPLogScope(void)::scope, 0))
      {
        v7 = (*v6 ? *v6 : MEMORY[0x1E0C81028]);
        if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
        {
          inAddress.mSelector = 136315650;
          *(_QWORD *)&inAddress.mScope = "VoiceProcessor_v2.cpp";
          v29 = 1024;
          v30 = 1853;
          v31 = 1024;
          LODWORD(v32) = PropertyData;
          _os_log_impl(&dword_1B5ED0000, v7, OS_LOG_TYPE_ERROR, "%25s:%-5d  >vp> error %d getting ref physical device nominal sample rate", (uint8_t *)&inAddress, 0x18u);
        }
      }
      v8 = (int *)*((_QWORD *)this + 1570);
      if (v8 && (*v3 || v3[1]))
      {
        if (VPLogScope(void)::once != -1)
          dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
        CALegacyLog::log(v8, 1, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/VoiceProcessor_v2.cpp", 1853, "ScaleHardwareOutputSafetyOffsets", "error %d getting ref physical device nominal sample rate");
      }
    }
    else
    {
      if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(5, VPLogScope(void)::scope, 0))
      {
        v9 = (*v6 ? *v6 : MEMORY[0x1E0C81028]);
        if (os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG))
        {
          v10 = *((_QWORD *)this + 88);
          v11 = *((_DWORD *)this + 294);
          inAddress.mSelector = 136316162;
          *(_QWORD *)&inAddress.mScope = "VoiceProcessor_v2.cpp";
          v29 = 1024;
          v30 = 1855;
          v31 = 2048;
          v32 = outData;
          v33 = 2048;
          v34 = v10;
          v35 = 1024;
          v36 = v11;
          _os_log_impl(&dword_1B5ED0000, v9, OS_LOG_TYPE_DEBUG, "%25s:%-5d  <vp> ref nominal sample rate = %lf; ref sample rate = %lf; output safety offset before scaling = %u",
            (uint8_t *)&inAddress,
            0x2Cu);
        }
      }
      v12 = (int *)*((_QWORD *)this + 1570);
      if (v12 && (*v3 || v3[1]))
      {
        if (VPLogScope(void)::once != -1)
          dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
        CALegacyLog::log(v12, 5, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/VoiceProcessor_v2.cpp", 1855, "ScaleHardwareOutputSafetyOffsets", "ref nominal sample rate = %lf; ref sample rate = %lf; output safety offset before scaling = %u",
          outData,
          *((double *)this + 88),
          *((_DWORD *)this + 294));
      }
      if (outData > 0.0)
      {
        LODWORD(v5) = *((_DWORD *)this + 294);
        v13 = *((double *)this + 73) * (double)v5 / outData;
        *((_DWORD *)this + 294) = v13;
        if (VPLogScope(void)::once != -1)
          dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
        v14 = (_QWORD *)VPLogScope(void)::scope;
        if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(5, VPLogScope(void)::scope, 0))
        {
          v15 = (*v14 ? *v14 : MEMORY[0x1E0C81028]);
          if (os_log_type_enabled(v15, OS_LOG_TYPE_DEBUG))
          {
            v16 = *((_DWORD *)this + 294);
            inAddress.mSelector = 136315650;
            *(_QWORD *)&inAddress.mScope = "VoiceProcessor_v2.cpp";
            v29 = 1024;
            v30 = 1858;
            v31 = 1024;
            LODWORD(v32) = v16;
            _os_log_impl(&dword_1B5ED0000, v15, OS_LOG_TYPE_DEBUG, "%25s:%-5d  <vp> output safety offset after scaling = %u", (uint8_t *)&inAddress, 0x18u);
          }
        }
        v17 = (int *)*((_QWORD *)this + 1570);
        if (v17 && (*v3 || v3[1]))
        {
          if (VPLogScope(void)::once != -1)
            dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
          CALegacyLog::log(v17, 5, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/VoiceProcessor_v2.cpp", 1858, "ScaleHardwareOutputSafetyOffsets", "output safety offset after scaling = %u", *((_DWORD *)this + 294));
        }
        if (!*((_DWORD *)this + 1127))
        {
          if (VPLogScope(void)::once != -1)
            dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
          v18 = (_QWORD *)VPLogScope(void)::scope;
          if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(5, VPLogScope(void)::scope, 0))
          {
            v19 = (*v18 ? *v18 : MEMORY[0x1E0C81028]);
            if (os_log_type_enabled(v19, OS_LOG_TYPE_DEBUG))
            {
              v20 = *((_DWORD *)this + 288);
              inAddress.mSelector = 136315650;
              *(_QWORD *)&inAddress.mScope = "VoiceProcessor_v2.cpp";
              v29 = 1024;
              v30 = 1860;
              v31 = 1024;
              LODWORD(v32) = v20;
              _os_log_impl(&dword_1B5ED0000, v19, OS_LOG_TYPE_DEBUG, "%25s:%-5d  <vp> tap stream input safety offset before scaling = %u", (uint8_t *)&inAddress, 0x18u);
            }
          }
          v21 = (int *)*((_QWORD *)this + 1570);
          if (v21 && (*v3 || v3[1]))
          {
            if (VPLogScope(void)::once != -1)
              dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
            CALegacyLog::log(v21, 5, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/VoiceProcessor_v2.cpp", 1860, "ScaleHardwareOutputSafetyOffsets", "tap stream input safety offset before scaling = %u", *((_DWORD *)this + 288));
          }
          LODWORD(v13) = *((_DWORD *)this + 288);
          *((_DWORD *)this + 288) = (*((double *)this + 73) * (double)*(unint64_t *)&v13 / outData);
          if (VPLogScope(void)::once != -1)
            dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
          v22 = (_QWORD *)VPLogScope(void)::scope;
          if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(5, VPLogScope(void)::scope, 0))
          {
            v23 = (*v22 ? *v22 : MEMORY[0x1E0C81028]);
            if (os_log_type_enabled(v23, OS_LOG_TYPE_DEBUG))
            {
              v24 = *((_DWORD *)this + 288);
              inAddress.mSelector = 136315650;
              *(_QWORD *)&inAddress.mScope = "VoiceProcessor_v2.cpp";
              v29 = 1024;
              v30 = 1862;
              v31 = 1024;
              LODWORD(v32) = v24;
              _os_log_impl(&dword_1B5ED0000, v23, OS_LOG_TYPE_DEBUG, "%25s:%-5d  <vp> tap stream input safety offset after scaling = %u", (uint8_t *)&inAddress, 0x18u);
            }
          }
          v25 = (int *)*((_QWORD *)this + 1570);
          if (v25 && (*v3 || v3[1]))
          {
            if (VPLogScope(void)::once != -1)
              dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
            CALegacyLog::log(v25, 5, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/VoiceProcessor_v2.cpp", 1862, "ScaleHardwareOutputSafetyOffsets", "tap stream input safety offset after scaling = %u");
          }
        }
      }
    }
  }
}

void VoiceProcessorV2::ScaleHardwareOutputPresentationLatency(VoiceProcessorV2 *this, AudioObjectID inObjectID)
{
  char *v3;
  OSStatus PropertyData;
  unint64_t v5;
  _QWORD *v6;
  NSObject *v7;
  int *v8;
  NSObject *v9;
  uint64_t v10;
  int v11;
  int *v12;
  double v13;
  _QWORD *v14;
  NSObject *v15;
  int v16;
  int *v17;
  _QWORD *v18;
  NSObject *v19;
  int v20;
  int *v21;
  _QWORD *v22;
  NSObject *v23;
  int v24;
  int *v25;
  double outData;
  UInt32 ioDataSize;
  AudioObjectPropertyAddress inAddress;
  __int16 v29;
  int v30;
  __int16 v31;
  double v32;
  __int16 v33;
  uint64_t v34;
  __int16 v35;
  int v36;
  uint64_t v37;

  v37 = *MEMORY[0x1E0C80C00];
  if (*((_BYTE *)this + 2244))
  {
    v3 = (char *)this + 15897;
    outData = 0.0;
    *(_QWORD *)&inAddress.mSelector = 0x6F7574706E737274;
    inAddress.mElement = 0;
    ioDataSize = 8;
    PropertyData = AudioObjectGetPropertyData(inObjectID, &inAddress, 0, 0, &ioDataSize, &outData);
    if (VPLogScope(void)::once != -1)
      dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
    v6 = (_QWORD *)VPLogScope(void)::scope;
    if (PropertyData)
    {
      if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(1, VPLogScope(void)::scope, 0))
      {
        v7 = (*v6 ? *v6 : MEMORY[0x1E0C81028]);
        if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
        {
          inAddress.mSelector = 136315650;
          *(_QWORD *)&inAddress.mScope = "VoiceProcessor_v2.cpp";
          v29 = 1024;
          v30 = 1878;
          v31 = 1024;
          LODWORD(v32) = PropertyData;
          _os_log_impl(&dword_1B5ED0000, v7, OS_LOG_TYPE_ERROR, "%25s:%-5d  >vp> error %d getting ref physical device nominal sample rate", (uint8_t *)&inAddress, 0x18u);
        }
      }
      v8 = (int *)*((_QWORD *)this + 1570);
      if (v8 && (*v3 || v3[1]))
      {
        if (VPLogScope(void)::once != -1)
          dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
        CALegacyLog::log(v8, 1, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/VoiceProcessor_v2.cpp", 1878, "ScaleHardwareOutputPresentationLatency", "error %d getting ref physical device nominal sample rate", PropertyData);
      }
    }
    else
    {
      if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(5, VPLogScope(void)::scope, 0))
      {
        v9 = (*v6 ? *v6 : MEMORY[0x1E0C81028]);
        if (os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG))
        {
          v10 = *((_QWORD *)this + 88);
          v11 = *((_DWORD *)this + 292);
          inAddress.mSelector = 136316162;
          *(_QWORD *)&inAddress.mScope = "VoiceProcessor_v2.cpp";
          v29 = 1024;
          v30 = 1880;
          v31 = 2048;
          v32 = outData;
          v33 = 2048;
          v34 = v10;
          v35 = 1024;
          v36 = v11;
          _os_log_impl(&dword_1B5ED0000, v9, OS_LOG_TYPE_DEBUG, "%25s:%-5d  <vp> ref nominal sample rate = %lf; ref sample rate = %lf; output latency before scaling = %u",
            (uint8_t *)&inAddress,
            0x2Cu);
        }
      }
      v12 = (int *)*((_QWORD *)this + 1570);
      if (v12 && (*v3 || v3[1]))
      {
        if (VPLogScope(void)::once != -1)
          dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
        CALegacyLog::log(v12, 5, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/VoiceProcessor_v2.cpp", 1880, "ScaleHardwareOutputPresentationLatency", "ref nominal sample rate = %lf; ref sample rate = %lf; output latency before scaling = %u",
          outData,
          *((double *)this + 88),
          *((_DWORD *)this + 292));
      }
      if (outData > 0.0)
      {
        LODWORD(v5) = *((_DWORD *)this + 292);
        v13 = *((double *)this + 73) * (double)v5 / outData;
        *((_DWORD *)this + 292) = v13;
        if (VPLogScope(void)::once != -1)
          dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
        v14 = (_QWORD *)VPLogScope(void)::scope;
        if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(5, VPLogScope(void)::scope, 0))
        {
          v15 = (*v14 ? *v14 : MEMORY[0x1E0C81028]);
          if (os_log_type_enabled(v15, OS_LOG_TYPE_DEBUG))
          {
            v16 = *((_DWORD *)this + 292);
            inAddress.mSelector = 136315650;
            *(_QWORD *)&inAddress.mScope = "VoiceProcessor_v2.cpp";
            v29 = 1024;
            v30 = 1883;
            v31 = 1024;
            LODWORD(v32) = v16;
            _os_log_impl(&dword_1B5ED0000, v15, OS_LOG_TYPE_DEBUG, "%25s:%-5d  <vp> output latency after scaling = %u", (uint8_t *)&inAddress, 0x18u);
          }
        }
        v17 = (int *)*((_QWORD *)this + 1570);
        if (v17 && (*v3 || v3[1]))
        {
          if (VPLogScope(void)::once != -1)
            dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
          CALegacyLog::log(v17, 5, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/VoiceProcessor_v2.cpp", 1883, "ScaleHardwareOutputPresentationLatency", "output latency after scaling = %u", *((_DWORD *)this + 292));
        }
        if (!*((_DWORD *)this + 1127))
        {
          if (VPLogScope(void)::once != -1)
            dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
          v18 = (_QWORD *)VPLogScope(void)::scope;
          if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(5, VPLogScope(void)::scope, 0))
          {
            v19 = (*v18 ? *v18 : MEMORY[0x1E0C81028]);
            if (os_log_type_enabled(v19, OS_LOG_TYPE_DEBUG))
            {
              v20 = *((_DWORD *)this + 287);
              inAddress.mSelector = 136315650;
              *(_QWORD *)&inAddress.mScope = "VoiceProcessor_v2.cpp";
              v29 = 1024;
              v30 = 1885;
              v31 = 1024;
              LODWORD(v32) = v20;
              _os_log_impl(&dword_1B5ED0000, v19, OS_LOG_TYPE_DEBUG, "%25s:%-5d  <vp> tap stream input latency before scaling = %u", (uint8_t *)&inAddress, 0x18u);
            }
          }
          v21 = (int *)*((_QWORD *)this + 1570);
          if (v21 && (*v3 || v3[1]))
          {
            if (VPLogScope(void)::once != -1)
              dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
            CALegacyLog::log(v21, 5, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/VoiceProcessor_v2.cpp", 1885, "ScaleHardwareOutputPresentationLatency", "tap stream input latency before scaling = %u", *((_DWORD *)this + 287));
          }
          LODWORD(v13) = *((_DWORD *)this + 287);
          *((_DWORD *)this + 287) = (*((double *)this + 73) * (double)*(unint64_t *)&v13 / outData);
          if (VPLogScope(void)::once != -1)
            dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
          v22 = (_QWORD *)VPLogScope(void)::scope;
          if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(5, VPLogScope(void)::scope, 0))
          {
            v23 = (*v22 ? *v22 : MEMORY[0x1E0C81028]);
            if (os_log_type_enabled(v23, OS_LOG_TYPE_DEBUG))
            {
              v24 = *((_DWORD *)this + 287);
              inAddress.mSelector = 136315650;
              *(_QWORD *)&inAddress.mScope = "VoiceProcessor_v2.cpp";
              v29 = 1024;
              v30 = 1887;
              v31 = 1024;
              LODWORD(v32) = v24;
              _os_log_impl(&dword_1B5ED0000, v23, OS_LOG_TYPE_DEBUG, "%25s:%-5d  <vp> tap stream input latency after scaling = %u", (uint8_t *)&inAddress, 0x18u);
            }
          }
          v25 = (int *)*((_QWORD *)this + 1570);
          if (v25 && (*v3 || v3[1]))
          {
            if (VPLogScope(void)::once != -1)
              dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
            CALegacyLog::log(v25, 5, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/VoiceProcessor_v2.cpp", 1887, "ScaleHardwareOutputPresentationLatency", "tap stream input latency after scaling = %u", *((_DWORD *)this + 287));
          }
        }
        VoiceProcessorV2::PListWriteRefPhysicalDevSR(this, &outData);
      }
    }
  }
}

void VoiceProcessorV2::MitigateFrontCameraNoise(VoiceProcessorV2 *this)
{
  int v1;
  _DWORD *v4;
  float v5;
  _QWORD *v6;
  NSObject *v7;
  int *v8;
  int *v9;
  uint8_t buf[4];
  const char *v11;
  __int16 v12;
  int v13;
  __int16 v14;
  double v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v1 = *((_DWORD *)this + 19);
  if (v1 == 3 || v1 == 0)
  {
    v4 = (_DWORD *)*((_QWORD *)this + 292);
    if (v4 != *((_DWORD **)this + 293)
      && *v4 == 1886613611
      && FigCaptureSpeakerInterferenceMitigationIsSupported())
    {
      *((_QWORD *)this + 1104) |= 0x80000000000000uLL;
      if (FigCaptureSpeakerInterferenceMitigationIsRequired())
        v5 = 1.0;
      else
        v5 = 0.0;
      AUPropAndParamHelper::AddItemToAUParamList((uint64_t)this + 10168, 5, v5);
      if (VPLogScope(void)::once != -1)
        dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
      v6 = (_QWORD *)VPLogScope(void)::scope;
      if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(4, VPLogScope(void)::scope, 0))
      {
        v7 = (*v6 ? *v6 : MEMORY[0x1E0C81028]);
        if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)buf = 136315650;
          v11 = "VoiceProcessor_v2.cpp";
          v12 = 1024;
          v13 = 2814;
          v14 = 2048;
          v15 = v5;
          _os_log_impl(&dword_1B5ED0000, v7, OS_LOG_TYPE_INFO, "%25s:%-5d  <vp> mitigate front camera noise; value = %f",
            buf,
            0x1Cu);
        }
      }
      v8 = (int *)*((_QWORD *)this + 1570);
      if (v8 && (*((_BYTE *)this + 15897) || *((_BYTE *)this + 15898)))
      {
        if (VPLogScope(void)::once != -1)
        {
          v9 = (int *)*((_QWORD *)this + 1570);
          dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
          v8 = v9;
        }
        CALegacyLog::log(v8, 4, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/VoiceProcessor_v2.cpp", 2814, "MitigateFrontCameraNoise", "mitigate front camera noise; value = %f",
          v5);
      }
    }
  }
}

unint64_t VoiceProcessorV2::getPortID(VoiceProcessorV2 *this, AudioObjectID *a2, const unsigned int *a3)
{
  char *v6;
  _QWORD *v7;
  NSObject *v8;
  AudioObjectID v9;
  int *v10;
  AudioObjectID v11;
  const void *v12;
  unsigned int PropertyData;
  _QWORD *v14;
  NSObject *v15;
  int v16;
  int *v17;
  int Count;
  const __CFNumber *ValueAtIndex;
  _QWORD *v20;
  NSObject *v21;
  int *v22;
  _QWORD *v23;
  NSObject *v24;
  int *v25;
  unint64_t v26;
  _QWORD *v27;
  NSObject *v28;
  int *v29;
  const __CFArray *outData;
  unsigned int valuePtr;
  UInt32 ioDataSize;
  AudioObjectPropertyAddress buf;
  __int16 v35;
  int v36;
  __int16 v37;
  unsigned int v38;
  __int16 v39;
  int v40;
  uint64_t v41;

  v41 = *MEMORY[0x1E0C80C00];
  valuePtr = 0;
  if (VPLogScope(void)::once != -1)
    dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
  v6 = (char *)this + 15897;
  v7 = (_QWORD *)VPLogScope(void)::scope;
  if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(5, VPLogScope(void)::scope, 0))
  {
    v8 = (*v7 ? *v7 : MEMORY[0x1E0C81028]);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
    {
      v9 = *a2;
      buf.mSelector = 136315650;
      *(_QWORD *)&buf.mScope = "VoiceProcessor_v2.cpp";
      v35 = 1024;
      v36 = 1789;
      v37 = 1024;
      v38 = v9;
      _os_log_impl(&dword_1B5ED0000, v8, OS_LOG_TYPE_DEBUG, "%25s:%-5d  <vp> device ID = %u", (uint8_t *)&buf, 0x18u);
    }
  }
  v10 = (int *)*((_QWORD *)this + 1570);
  if (v10 && (*v6 || *((_BYTE *)this + 15898)))
  {
    if (VPLogScope(void)::once != -1)
      dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
    CALegacyLog::log(v10, 5, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/VoiceProcessor_v2.cpp", 1789, "getPortID", "device ID = %u", *a2);
  }
  outData = 0;
  if (*a3 == 1768845428)
  {
    v11 = *a2;
    strcpy((char *)&buf, "spcdtpni");
    BYTE1(buf.mElement) = 0;
    HIWORD(buf.mElement) = 0;
    v12 = (const void *)*((_QWORD *)this + 295);
  }
  else
  {
    if (*a3 != 1869968496)
    {
      PropertyData = 0;
      goto LABEL_54;
    }
    v11 = *a2;
    strcpy((char *)&buf, "spcdptuo");
    BYTE1(buf.mElement) = 0;
    HIWORD(buf.mElement) = 0;
    v12 = (const void *)*((_QWORD *)this + 292);
  }
  ioDataSize = 8;
  PropertyData = AudioObjectGetPropertyData(v11, &buf, 4u, v12, &ioDataSize, &outData);
  if (PropertyData)
  {
    if (VPLogScope(void)::once != -1)
      dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
    v14 = (_QWORD *)VPLogScope(void)::scope;
    if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(1, VPLogScope(void)::scope, 0))
    {
      v15 = (*v14 ? *v14 : MEMORY[0x1E0C81028]);
      if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
      {
        v16 = *((_DWORD *)this + 284);
        buf.mSelector = 136315906;
        *(_QWORD *)&buf.mScope = "VoiceProcessor_v2.cpp";
        v35 = 1024;
        v36 = 1796;
        v37 = 1024;
        v38 = PropertyData;
        v39 = 1024;
        v40 = v16;
        _os_log_impl(&dword_1B5ED0000, v15, OS_LOG_TYPE_ERROR, "%25s:%-5d  >vp> error %d getting connected ports %u", (uint8_t *)&buf, 0x1Eu);
      }
    }
    v17 = (int *)*((_QWORD *)this + 1570);
    if (v17 && (*v6 || *((_BYTE *)this + 15898)))
    {
      if (VPLogScope(void)::once != -1)
        dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
      CALegacyLog::log(v17, 1, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/VoiceProcessor_v2.cpp", 1796, "getPortID", "error %d getting connected ports %u", PropertyData, *((_DWORD *)this + 284));
    }
  }
  if (outData)
  {
    Count = CFArrayGetCount(outData);
    if (Count < 1)
    {
      if (VPLogScope(void)::once != -1)
        dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
      v27 = (_QWORD *)VPLogScope(void)::scope;
      if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(5, VPLogScope(void)::scope, 0))
      {
        v28 = (*v27 ? *v27 : MEMORY[0x1E0C81028]);
        if (os_log_type_enabled(v28, OS_LOG_TYPE_DEBUG))
        {
          buf.mSelector = 136315650;
          *(_QWORD *)&buf.mScope = "VoiceProcessor_v2.cpp";
          v35 = 1024;
          v36 = 1806;
          v37 = 1024;
          v38 = Count;
          _os_log_impl(&dword_1B5ED0000, v28, OS_LOG_TYPE_DEBUG, "%25s:%-5d  <vp> Size of portsArray = %d", (uint8_t *)&buf, 0x18u);
        }
      }
      v29 = (int *)*((_QWORD *)this + 1570);
      if (v29 && (*v6 || v6[1]))
      {
        if (VPLogScope(void)::once != -1)
          dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
        CALegacyLog::log(v29, 5, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/VoiceProcessor_v2.cpp", 1806, "getPortID", "Size of portsArray = %d");
      }
    }
    else
    {
      ValueAtIndex = (const __CFNumber *)CFArrayGetValueAtIndex(outData, 0);
      CFNumberGetValue(ValueAtIndex, kCFNumberIntType, &valuePtr);
      if (VPLogScope(void)::once != -1)
        dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
      v20 = (_QWORD *)VPLogScope(void)::scope;
      if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(5, VPLogScope(void)::scope, 0))
      {
        v21 = (*v20 ? *v20 : MEMORY[0x1E0C81028]);
        if (os_log_type_enabled(v21, OS_LOG_TYPE_DEBUG))
        {
          buf.mSelector = 136315650;
          *(_QWORD *)&buf.mScope = "VoiceProcessor_v2.cpp";
          v35 = 1024;
          v36 = 1804;
          v37 = 1024;
          v38 = valuePtr;
          _os_log_impl(&dword_1B5ED0000, v21, OS_LOG_TYPE_DEBUG, "%25s:%-5d  <vp> port ID = %u", (uint8_t *)&buf, 0x18u);
        }
      }
      v22 = (int *)*((_QWORD *)this + 1570);
      if (v22 && (*v6 || v6[1]))
      {
        if (VPLogScope(void)::once != -1)
          dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
        CALegacyLog::log(v22, 5, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/VoiceProcessor_v2.cpp", 1804, "getPortID", "port ID = %u");
      }
    }
    CFRelease(outData);
    v26 = (unint64_t)valuePtr << 32;
    return v26 | PropertyData;
  }
LABEL_54:
  if (VPLogScope(void)::once != -1)
    dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
  v23 = (_QWORD *)VPLogScope(void)::scope;
  if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(5, VPLogScope(void)::scope, 0))
  {
    v24 = (*v23 ? *v23 : MEMORY[0x1E0C81028]);
    if (os_log_type_enabled(v24, OS_LOG_TYPE_DEBUG))
    {
      buf.mSelector = 136315394;
      *(_QWORD *)&buf.mScope = "VoiceProcessor_v2.cpp";
      v35 = 1024;
      v36 = 1810;
      _os_log_impl(&dword_1B5ED0000, v24, OS_LOG_TYPE_DEBUG, "%25s:%-5d  <vp> Array of ports is empty", (uint8_t *)&buf, 0x12u);
    }
  }
  v25 = (int *)*((_QWORD *)this + 1570);
  if (v25 && (*v6 || v6[1]))
  {
    if (VPLogScope(void)::once != -1)
      dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
    CALegacyLog::log(v25, 5, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/VoiceProcessor_v2.cpp", 1810, "getPortID", "Array of ports is empty");
  }
  v26 = 0;
  return v26 | PropertyData;
}

_QWORD *std::__hash_table<std::__hash_value_type<unsigned int,std::vector<VoiceProcessorV2::VoiceProcessorPropertyListenerBlockInfo>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::vector<VoiceProcessorV2::VoiceProcessorPropertyListenerBlockInfo>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::vector<VoiceProcessorV2::VoiceProcessorPropertyListenerBlockInfo>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::vector<VoiceProcessorV2::VoiceProcessorPropertyListenerBlockInfo>>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>(uint64_t a1, unsigned int a2, _DWORD *a3)
{
  unint64_t v3;
  unint64_t v6;
  unint64_t v7;
  uint8x8_t v8;
  void **v9;
  _QWORD *v10;
  unint64_t v11;
  float v12;
  float v13;
  _BOOL8 v14;
  unint64_t v15;
  unint64_t v16;
  size_t v17;
  uint64_t v18;
  _QWORD *v19;
  unint64_t v20;

  v6 = a2;
  v7 = *(_QWORD *)(a1 + 8);
  if (v7)
  {
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v3 = a2;
      if (v7 <= a2)
        v3 = a2 % v7;
    }
    else
    {
      v3 = ((_DWORD)v7 - 1) & a2;
    }
    v9 = *(void ***)(*(_QWORD *)a1 + 8 * v3);
    if (v9)
    {
      v10 = *v9;
      if (*v9)
      {
        do
        {
          v11 = v10[1];
          if (v11 == a2)
          {
            if (*((_DWORD *)v10 + 4) == a2)
              return v10;
          }
          else
          {
            if (v8.u32[0] > 1uLL)
            {
              if (v11 >= v7)
                v11 %= v7;
            }
            else
            {
              v11 &= v7 - 1;
            }
            if (v11 != v3)
              break;
          }
          v10 = (_QWORD *)*v10;
        }
        while (v10);
      }
    }
  }
  v10 = operator new(0x30uLL);
  *v10 = 0;
  v10[1] = v6;
  *((_DWORD *)v10 + 4) = *a3;
  v10[4] = 0;
  v10[5] = 0;
  v10[3] = 0;
  v12 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v13 = *(float *)(a1 + 32);
  if (!v7 || (float)(v13 * (float)v7) < v12)
  {
    v14 = 1;
    if (v7 >= 3)
      v14 = (v7 & (v7 - 1)) != 0;
    v15 = v14 | (2 * v7);
    v16 = vcvtps_u32_f32(v12 / v13);
    if (v15 <= v16)
      v17 = v16;
    else
      v17 = v15;
    std::__hash_table<std::__hash_value_type<unsigned int,std::tuple<__CFString const*,float,float,float,AudioUnitParameterUnit,unsigned int>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::tuple<__CFString const*,float,float,float,AudioUnitParameterUnit,unsigned int>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::tuple<__CFString const*,float,float,float,AudioUnitParameterUnit,unsigned int>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::tuple<__CFString const*,float,float,float,AudioUnitParameterUnit,unsigned int>>>>::__rehash<true>(a1, v17);
    v7 = *(_QWORD *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v7 <= v6)
        v3 = v6 % v7;
      else
        v3 = v6;
    }
    else
    {
      v3 = ((_DWORD)v7 - 1) & v6;
    }
  }
  v18 = *(_QWORD *)a1;
  v19 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v19)
  {
    *v10 = *v19;
LABEL_38:
    *v19 = v10;
    goto LABEL_39;
  }
  *v10 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v10;
  *(_QWORD *)(v18 + 8 * v3) = a1 + 16;
  if (*v10)
  {
    v20 = *(_QWORD *)(*v10 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v20 >= v7)
        v20 %= v7;
    }
    else
    {
      v20 &= v7 - 1;
    }
    v19 = (_QWORD *)(*(_QWORD *)a1 + 8 * v20);
    goto LABEL_38;
  }
LABEL_39:
  ++*(_QWORD *)(a1 + 24);
  return v10;
}

void sub_1B63CE044(_Unwind_Exception *a1)
{
  void **v1;

  std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned int,std::vector<VoiceProcessorV2::VoiceProcessorPropertyListenerBlockInfo>>,void *>>>::operator()[abi:ne180100](1, v1);
  _Unwind_Resume(a1);
}

void std::__destroy_at[abi:ne180100]<VoiceProcessorV2::VoiceProcessorPropertyListenerBlockInfo,0>(uint64_t a1)
{
  const void *v2;

  v2 = *(const void **)(a1 + 8);
  if (v2)
  {
    _Block_release(v2);
    *(_QWORD *)(a1 + 8) = 0;
  }
}

void std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned int,std::vector<VoiceProcessorV2::VoiceProcessorPropertyListenerBlockInfo>>,void *>>>::operator()[abi:ne180100](char a1, void **__p)
{
  void **v3;

  if (a1)
  {
    v3 = __p + 3;
    std::vector<VoiceProcessorV2::VoiceProcessorPropertyListenerBlockInfo>::__destroy_vector::operator()[abi:ne180100](&v3);
  }
  if (__p)
    operator delete(__p);
}

void std::vector<VoiceProcessorV2::VoiceProcessorPropertyListenerBlockInfo>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  void *v2;
  uint64_t v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = (uint64_t)v1[1];
    v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 16;
        std::__destroy_at[abi:ne180100]<VoiceProcessorV2::VoiceProcessorPropertyListenerBlockInfo,0>(v4);
      }
      while ((void *)v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void VoiceProcessorV2::VoiceProcessorPropertyListenerBlockInfo::~VoiceProcessorPropertyListenerBlockInfo(VoiceProcessorV2::VoiceProcessorPropertyListenerBlockInfo *this)
{
  const void *v2;

  v2 = (const void *)*((_QWORD *)this + 1);
  if (v2)
  {
    _Block_release(v2);
    *((_QWORD *)this + 1) = 0;
  }
}

_QWORD *std::construct_at[abi:ne180100]<VoiceProcessorV2::VoiceProcessorPropertyListenerBlockInfo,VoiceProcessorV2::VoiceProcessorPropertyListenerBlockInfo&,VoiceProcessorV2::VoiceProcessorPropertyListenerBlockInfo*>(_QWORD *a1, _QWORD *a2)
{
  const void *v3;

  a1[1] = 0;
  v3 = (const void *)a2[1];
  *a1 = *a2;
  if (v3)
    a1[1] = _Block_copy(v3);
  return a1;
}

uint64_t VoiceProcessorV2::AppendReferenceSignal(VoiceProcessorV2 *this, AudioBufferList *a2, AudioBufferList *a3, int a4)
{
  char *v7;
  unsigned int *v8;
  unsigned int v9;
  uint64_t v10;
  _QWORD *v11;
  NSObject *v12;
  int *v13;
  unsigned int v14;
  VoiceProcessorV2 *v15;
  uint64_t v16;
  unsigned int v17;
  uint64_t v18;
  unsigned int v19;
  _DWORD *v20;
  unint64_t v21;
  void **v22;
  unsigned int v23;
  UInt32 v25;
  _DWORD *v26;
  unint64_t v27;
  void **v28;
  __int128 v29;
  __int128 v30;
  unsigned int v31;
  _BYTE buf[32];
  uint64_t v33;
  uint64_t v34;

  v34 = *MEMORY[0x1E0C80C00];
  v7 = (char *)this + 15897;
  v8 = (unsigned int *)((char *)this + 2484);
  do
    v9 = __ldaxr(v8);
  while (__stlxr(v9 + 1, v8));
  if (*((_DWORD *)this + 620))
  {
    VoiceProcessorV2::LogIOError((uint64_t)this, 11.006, (float)*((unsigned int *)this + 3112), (float)*((unsigned int *)this + 3113), 0.0, "appendreferencesignal: failed to acquire uplink reader lock");
LABEL_5:
    v10 = 4294956433;
    goto LABEL_44;
  }
  if (a4 == 1)
  {
    if (*((_DWORD *)this + 1127) && !*((_BYTE *)this + 16176))
      goto LABEL_43;
  }
  else
  {
    if (a4)
      goto LABEL_43;
    if (*((_DWORD *)this + 1127) != 1 || *((_BYTE *)this + 16176))
    {
      if (VPLogScope(void)::once != -1)
        dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
      v11 = (_QWORD *)VPLogScope(void)::scope;
      if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(1, VPLogScope(void)::scope, 0))
      {
        v12 = (*v11 ? *v11 : MEMORY[0x1E0C81028]);
        if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136315650;
          *(_QWORD *)&buf[4] = "VoiceProcessor_v2.cpp";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = 1020;
          *(_WORD *)&buf[18] = 2080;
          *(_QWORD *)&buf[20] = "internal";
          _os_log_impl(&dword_1B5ED0000, v12, OS_LOG_TYPE_ERROR, "%25s:%-5d  >vp> %s reference signal was not expected!", buf, 0x1Cu);
        }
      }
      v13 = (int *)*((_QWORD *)this + 1570);
      if (v13 && (*v7 || v7[1]))
      {
        if (VPLogScope(void)::once != -1)
          dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
        CALegacyLog::log(v13, 1, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/VoiceProcessor_v2.cpp", 1020, "AppendReferenceSignal", "%s reference signal was not expected!", "internal");
      }
      goto LABEL_43;
    }
  }
  v14 = *((_DWORD *)this + 3113) + 1;
  *((_DWORD *)this + 3113) = v14;
  if (!*((_BYTE *)this + 476))
  {
    VoiceProcessorV2::LogIOError((uint64_t)this, 11.005, (float)*((unsigned int *)this + 3112), (float)v14, 0.0, "appendreferencesignal: not OK to process");
    goto LABEL_5;
  }
  if (*v7)
  {
    v15 = (VoiceProcessorV2 *)*((_QWORD *)this + 1892);
    if (v15)
    {
      VoiceProcessorV2::InjectionOrAdditionFilesCopyPreInjectionABL(v15, a2, a3);
      v16 = *((_QWORD *)this + 1892);
      v31 = 0;
      v17 = *(_DWORD *)(v16 + 12) / *((_DWORD *)this + 152);
      v10 = VoiceProcessorV2::FrontEndBlockSizeCheck(this, 1, v17, *((_DWORD *)this + 123), (const AudioBufferList *)v16, &v31);
      if ((_DWORD)v10)
        goto LABEL_44;
      v18 = v31;
      if (*v7)
      {
        v19 = v31;
        if (!v31)
          v19 = *((_DWORD *)this + 123);
        VoiceProcessorV2::InjectionFilesReadSignal(this, 3, v19, (AudioBufferList *)v16);
      }
      if ((_DWORD)v18)
      {
        if (*v7 || v7[1])
          VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)this, 0, v18, (const AudioBufferList *)v16, (AudioTimeStamp *)a3);
        v20 = (_DWORD *)*((_QWORD *)this + 128);
        if (*v20)
        {
          v21 = 0;
          v22 = (void **)(v20 + 4);
          do
          {
            bzero(*v22, *((unsigned int *)v22 - 1));
            ++v21;
            v22 += 2;
          }
          while (v21 < *v20);
        }
      }
      else
      {
        if (*v7 || v7[1])
          VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)this, 0, *((unsigned int *)this + 123), (const AudioBufferList *)v16, (AudioTimeStamp *)a3);
        v29 = *(_OWORD *)((char *)this + 600);
        *(_OWORD *)buf = *(_OWORD *)((char *)this + 584);
        *(_OWORD *)&buf[16] = v29;
        v33 = *((_QWORD *)this + 77);
        VoiceProcessorV2::FrontEndFormatConverter(this, (const CAStreamBasicDescription *)buf, *((_DWORD *)this + 100), (const AudioBufferList *)v16, v17, *((AudioBufferList **)this + 128), 0);
      }
      goto LABEL_60;
    }
LABEL_43:
    v10 = 0;
    goto LABEL_44;
  }
  v31 = 0;
  v25 = a2->mBuffers[0].mDataByteSize / *((_DWORD *)this + 152);
  v10 = VoiceProcessorV2::FrontEndBlockSizeCheck(this, 1, v25, *((_DWORD *)this + 123), a2, &v31);
  if ((_DWORD)v10)
    goto LABEL_44;
  if (v31)
  {
    if (*v7 || v7[1])
      VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)this, 0, v31, a2, (AudioTimeStamp *)a3);
    v26 = (_DWORD *)*((_QWORD *)this + 128);
    if (*v26)
    {
      v27 = 0;
      v28 = (void **)(v26 + 4);
      do
      {
        bzero(*v28, *((unsigned int *)v28 - 1));
        ++v27;
        v28 += 2;
      }
      while (v27 < *v26);
    }
  }
  else
  {
    if (*v7 || v7[1])
      VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)this, 0, *((unsigned int *)this + 123), a2, (AudioTimeStamp *)a3);
    v30 = *(_OWORD *)((char *)this + 600);
    *(_OWORD *)buf = *(_OWORD *)((char *)this + 584);
    *(_OWORD *)&buf[16] = v30;
    v33 = *((_QWORD *)this + 77);
    VoiceProcessorV2::FrontEndFormatConverter(this, (const CAStreamBasicDescription *)buf, *((_DWORD *)this + 100), a2, v25, *((AudioBufferList **)this + 128), 0);
  }
LABEL_60:
  VoiceProcessorV2::FrontEndRefTimeStampHandler(this, (double *)&a3->mNumberBuffers, (const AudioTimeStamp *)*((unsigned int *)this + 123));
  do
LABEL_44:
    v23 = __ldaxr(v8);
  while (__stlxr(v23 - 1, v8));
  return v10;
}

void sub_1B63CE69C(_Unwind_Exception *a1)
{
  unsigned int *v1;
  unsigned int v2;

  do
    v2 = __ldaxr(v1);
  while (__stlxr(v2 - 1, v1));
  _Unwind_Resume(a1);
}

uint64_t VoiceProcessorV2::FrontEndBlockSizeCheck(VoiceProcessorV2 *this, int a2, unsigned int a3, unsigned int a4, const AudioBufferList *a5, unsigned int *a6)
{
  char *v7;
  const char *v8;
  float v9;
  const AudioStreamBasicDescription *v10;
  const AudioStreamBasicDescription *v11;
  char *v12;
  const AudioBufferList *v13;
  uint64_t v16;
  NSObject *v18;
  unsigned int v19;
  _BOOL4 v20;
  uint64_t v21;
  int *v22;
  unsigned int v23;
  uint64_t v24;
  _QWORD *v25;
  NSObject *v26;
  int *v27;
  _QWORD *v28;
  NSObject *v29;
  void *v30;
  int v31;
  int *v32;
  uint64_t v33;
  UInt32 v34;
  int v35;
  int v36;
  const char *v37;
  uint64_t v38;
  uint64_t v39;
  char v40;
  char v41;
  uint64_t v42;
  double v43;
  double v44;
  uint64_t v45;
  const char *v46;
  double v47;
  _QWORD *v48;
  NSObject *v49;
  int *v50;
  _QWORD *v51;
  NSObject *v52;
  int *v53;
  NSObject *v54;
  int *v55;
  _QWORD *v56;
  NSObject *v57;
  int *v58;
  _QWORD *v60;
  NSObject *v61;
  int *v62;
  _QWORD *v63;
  NSObject *v64;
  UInt32 mDataByteSize;
  void *v66;
  int v67;
  int *v68;
  UInt32 v69;
  int v70;
  int v71;
  const char *v72;
  unsigned int v73;
  unsigned int v74;
  uint64_t v75;
  UInt32 v76;
  int v77;
  int v78;
  int v79;
  int v80;
  int v81[2];
  uint64_t v82;
  unsigned int v83;
  unsigned int v84;
  const char *v85;
  void *v86;
  void *v87;
  _BYTE buf[12];
  __int16 v89;
  int v90;
  __int16 v91;
  double v92;
  __int16 v93;
  unsigned int v94;
  __int16 v95;
  unsigned int v96;
  __int16 v97;
  _BYTE v98[10];
  __int16 v99;
  int v100;
  __int16 v101;
  void *v102;
  __int16 v103;
  void *v104;
  __int16 v105;
  int v106;
  uint64_t v107;

  v107 = *MEMORY[0x1E0C80C00];
  v7 = (char *)this + 15817;
  if (a2)
    v8 = "ref";
  else
    v8 = "mic";
  if (a2)
    v9 = 12.0;
  else
    v9 = 22.0;
  v10 = (const AudioStreamBasicDescription *)((char *)this + 584);
  v11 = (const AudioStreamBasicDescription *)((char *)this + 624);
  if (a2)
    v12 = (char *)this + 584;
  else
    v12 = (char *)this + 624;
  if (a3)
  {
    v13 = a5;
    v85 = v8;
    if (a3 == a4 && *((_DWORD *)v12 + 6) * a3 <= a5->mBuffers[0].mDataByteSize)
    {
      if (*v7 && (a2 & 1) != 0 || (v24 = 0, *((_BYTE *)this + 15818)) && (a2 & 1) == 0)
      {
        if (a2)
        {
          *v7 = 0;
          v38 = mach_absolute_time();
          v39 = 15824;
        }
        else
        {
          *((_BYTE *)this + 15818) = 0;
          v38 = mach_absolute_time();
          v39 = 15832;
        }
        v46 = v8;
        v47 = (double)(v38 - *(_QWORD *)((char *)this + v39)) * 0.0000000416666667;
        VoiceProcessorV2::LogIOError((uint64_t)this, v9 + 0.002, (float)*((unsigned int *)this + 3112), (float)*((unsigned int *)this + 3113), (float)a3, "append signal (%s): <block size no longer mismatched>", v8);
        if (VPLogScope(void)::once != -1)
          dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
        v48 = (_QWORD *)VPLogScope(void)::scope;
        if (v47 <= 1.0)
        {
          if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(2, VPLogScope(void)::scope, 0))
          {
            v54 = (*v48 ? *v48 : MEMORY[0x1E0C81028]);
            if (os_log_type_enabled(v54, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)buf = 136315650;
              *(_QWORD *)&buf[4] = "VoiceProcessor_v2.cpp";
              v89 = 1024;
              v90 = 1313;
              v91 = 2048;
              v92 = v47;
              _os_log_impl(&dword_1B5ED0000, v54, OS_LOG_TYPE_DEFAULT, "%25s:%-5d  >vp> CoreAudio: ***** VP BLOCK WARNING: BAD BLOCK CONFIG CORRECTED after %.6f seconds *****\n", buf, 0x1Cu);
            }
          }
          v55 = (int *)*((_QWORD *)this + 1570);
          if (v55 && (v7[80] || v7[81]))
          {
            if (VPLogScope(void)::once != -1)
              dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
            CALegacyLog::log(v55, 2, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/VoiceProcessor_v2.cpp", 1313, "FrontEndBlockSizeCheck", "CoreAudio: ***** VP BLOCK WARNING: BAD BLOCK CONFIG CORRECTED after %.6f seconds *****\n", v47);
            v46 = v85;
          }
          if (VPLogScope(void)::once != -1)
            dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
          v56 = (_QWORD *)VPLogScope(void)::scope;
          if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(2, VPLogScope(void)::scope, 0))
          {
            v57 = (*v56 ? *v56 : MEMORY[0x1E0C81028]);
            if (os_log_type_enabled(v57, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)buf = 136316162;
              *(_QWORD *)&buf[4] = "VoiceProcessor_v2.cpp";
              v89 = 1024;
              v90 = 1314;
              v91 = 2080;
              v92 = *(double *)&v46;
              v93 = 1024;
              v94 = a3;
              v95 = 1024;
              v96 = a3;
              _os_log_impl(&dword_1B5ED0000, v57, OS_LOG_TYPE_DEFAULT, "%25s:%-5d  >vp> append signal (%s): <block size no longer mismatched between expected and actual> num frames received = %u. hwio buff size = %u\n", buf, 0x28u);
            }
          }
          v58 = (int *)*((_QWORD *)this + 1570);
          if (v58 && (v7[80] || v7[81]))
          {
            if (VPLogScope(void)::once != -1)
              dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
            CALegacyLog::log(v58, 2, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/VoiceProcessor_v2.cpp", 1314, "FrontEndBlockSizeCheck", "append signal (%s): <block size no longer mismatched between expected and actual> num frames received = %u. hwio buff size = %u\n", v46, a3, a3);
          }
        }
        else
        {
          if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(1, VPLogScope(void)::scope, 0))
          {
            v49 = (*v48 ? *v48 : MEMORY[0x1E0C81028]);
            if (os_log_type_enabled(v49, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = 136315650;
              *(_QWORD *)&buf[4] = "VoiceProcessor_v2.cpp";
              v89 = 1024;
              v90 = 1308;
              v91 = 2048;
              v92 = v47;
              _os_log_impl(&dword_1B5ED0000, v49, OS_LOG_TYPE_ERROR, "%25s:%-5d  >vp> CoreAudio: ***** VP BLOCK SERIOUS ERROR: BAD BLOCK CONFIG CORRECTED after %.6f seconds *****\n", buf, 0x1Cu);
            }
          }
          v50 = (int *)*((_QWORD *)this + 1570);
          if (v50 && (v7[80] || v7[81]))
          {
            if (VPLogScope(void)::once != -1)
              dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
            CALegacyLog::log(v50, 1, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/VoiceProcessor_v2.cpp", 1308, "FrontEndBlockSizeCheck", "CoreAudio: ***** VP BLOCK SERIOUS ERROR: BAD BLOCK CONFIG CORRECTED after %.6f seconds *****\n", v47);
            v46 = v85;
          }
          if (VPLogScope(void)::once != -1)
            dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
          v51 = (_QWORD *)VPLogScope(void)::scope;
          if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(1, VPLogScope(void)::scope, 0))
          {
            v52 = (*v51 ? *v51 : MEMORY[0x1E0C81028]);
            if (os_log_type_enabled(v52, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = 136316162;
              *(_QWORD *)&buf[4] = "VoiceProcessor_v2.cpp";
              v89 = 1024;
              v90 = 1309;
              v91 = 2080;
              v92 = *(double *)&v46;
              v93 = 1024;
              v94 = a3;
              v95 = 1024;
              v96 = a3;
              _os_log_impl(&dword_1B5ED0000, v52, OS_LOG_TYPE_ERROR, "%25s:%-5d  >vp> append signal (%s): <block size no longer mismatched between expected and actual> num frames received = %u. hwio buff size = %u\n", buf, 0x28u);
            }
          }
          v53 = (int *)*((_QWORD *)this + 1570);
          if (v53 && (v7[80] || v7[81]))
          {
            if (VPLogScope(void)::once != -1)
              dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
            CALegacyLog::log(v53, 1, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/VoiceProcessor_v2.cpp", 1309, "FrontEndBlockSizeCheck", "append signal (%s): <block size no longer mismatched between expected and actual> num frames received = %u. hwio buff size = %u\n", v46, a3, a3);
          }
        }
        return 0;
      }
    }
    else if ((*v7 || (a2 & 1) == 0) && (*((_BYTE *)this + 15818) || (a2 & 1) != 0))
    {
      if (*((_BYTE *)this + 15818))
        v40 = a2;
      else
        v40 = 1;
      v24 = 1718772077;
      v41 = a2;
      if (!*v7)
        v41 = 0;
      if ((v41 & 1) != 0 || (v40 & 1) == 0)
      {
        v84 = a4;
        v42 = mach_absolute_time();
        if (a2)
        {
          v43 = (double)(v42 - *((_QWORD *)this + 1978)) * 0.0000000416666667;
          v44 = *((double *)this + 1981);
          if (v43 <= v44)
            return v24;
          v45 = 15848;
        }
        else
        {
          v43 = (double)(v42 - *((_QWORD *)this + 1979)) * 0.0000000416666667;
          v44 = *((double *)this + 1982);
          if (v43 <= v44)
            return v24;
          v45 = 15856;
        }
        *(double *)((char *)this + v45) = v44 + 10.0;
        VoiceProcessorV2::LogIOError((uint64_t)this, v9 + 0.002, (float)*((unsigned int *)this + 3112), (float)*((unsigned int *)this + 3113), (float)a3, "append signal (%s): <block size mismatch>", v8);
        if (VPLogScope(void)::once != -1)
          dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
        v60 = (_QWORD *)VPLogScope(void)::scope;
        if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(1, VPLogScope(void)::scope, 0))
        {
          v61 = (*v60 ? *v60 : MEMORY[0x1E0C81028]);
          if (os_log_type_enabled(v61, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 136315650;
            *(_QWORD *)&buf[4] = "VoiceProcessor_v2.cpp";
            v89 = 1024;
            v90 = 1277;
            v91 = 2048;
            v92 = v43;
            _os_log_impl(&dword_1B5ED0000, v61, OS_LOG_TYPE_ERROR, "%25s:%-5d  >vp> CoreAudio: ***** VP BLOCK SERIOUS ERROR: BAD BLOCK CONFIG for over %.6f seconds *****\n", buf, 0x1Cu);
          }
        }
        v62 = (int *)*((_QWORD *)this + 1570);
        if (v62 && (v7[80] || v7[81]))
        {
          if (VPLogScope(void)::once != -1)
            dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
          CALegacyLog::log(v62, 1, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/VoiceProcessor_v2.cpp", 1277, "FrontEndBlockSizeCheck", "CoreAudio: ***** VP BLOCK SERIOUS ERROR: BAD BLOCK CONFIG for over %.6f seconds *****\n", v43);
        }
        if (VPLogScope(void)::once != -1)
          dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
        v63 = (_QWORD *)VPLogScope(void)::scope;
        if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(1, VPLogScope(void)::scope, 0))
        {
          v64 = (*v63 ? *v63 : MEMORY[0x1E0C81028]);
          if (os_log_type_enabled(v64, OS_LOG_TYPE_ERROR))
          {
            *(_QWORD *)v81 = v13;
            mDataByteSize = v13->mBuffers[0].mDataByteSize;
            v77 = *((_DWORD *)this + 123);
            v79 = *((_DWORD *)this + 124);
            CAFormatter::CAFormatter((CAFormatter *)&v87, v11);
            v66 = v87;
            CAFormatter::CAFormatter((CAFormatter *)&v86, v10);
            v67 = *((_DWORD *)this + 3112);
            *(_DWORD *)buf = 136317698;
            *(_QWORD *)&buf[4] = "VoiceProcessor_v2.cpp";
            v89 = 1024;
            v90 = 1282;
            v91 = 2080;
            v92 = *(double *)&v85;
            v93 = 1024;
            v94 = a3;
            v95 = 1024;
            v96 = mDataByteSize;
            v97 = 1024;
            *(_DWORD *)v98 = v84;
            *(_WORD *)&v98[4] = 1024;
            *(_DWORD *)&v98[6] = v77;
            v99 = 1024;
            v100 = v79;
            v101 = 2080;
            v102 = v66;
            v103 = 2080;
            v104 = v86;
            v105 = 1024;
            v106 = v67;
            _os_log_impl(&dword_1B5ED0000, v64, OS_LOG_TYPE_ERROR, "%25s:%-5d  >vp> append signal (%s): <block size mismatch btwn expected and actual> num frames received  = %u (data byte size = %u).\t hwio buff size = %u\n\t\thwio ref buff size  = %u.\t hwio mic buff size = %u\n\tmic asbd = %s, ref asbd = %s\n\t\t process callcount = %u\n", buf, 0x54u);
            if (v86)
              free(v86);
            v13 = *(const AudioBufferList **)v81;
            if (v87)
              free(v87);
          }
        }
        v68 = (int *)*((_QWORD *)this + 1570);
        if (v68)
        {
          if (v7[80] || v7[81])
          {
            if (VPLogScope(void)::once != -1)
              dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
            v82 = VPLogScope(void)::scope;
            v69 = v13->mBuffers[0].mDataByteSize;
            v70 = *((_DWORD *)this + 123);
            v71 = *((_DWORD *)this + 124);
            CAFormatter::CAFormatter((CAFormatter *)buf, v11);
            v72 = *(const char **)buf;
            CAFormatter::CAFormatter((CAFormatter *)&v87, v10);
            CALegacyLog::log(v68, 1, v82, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/VoiceProcessor_v2.cpp", 1282, "FrontEndBlockSizeCheck", "append signal (%s): <block size mismatch btwn expected and actual> num frames received  = %u (data byte size = %u).\t hwio buff size = %u\n\t\thwio ref buff size  = %u.\t hwio mic buff size = %u\n\tmic asbd = %s, ref asbd = %s\n\t\t process callcount = %u\n", v85, a3, v69, v84, v70, v71, v72,
              (const char *)v87,
              *((_DWORD *)this + 3112));
            goto LABEL_69;
          }
        }
      }
    }
    else
    {
      v83 = a4;
      if (a2)
      {
        *v7 = 1;
        *((_QWORD *)this + 1978) = mach_absolute_time();
        v16 = 15848;
      }
      else
      {
        *((_BYTE *)this + 15818) = 1;
        *((_QWORD *)this + 1979) = mach_absolute_time();
        v16 = 15856;
      }
      *(_QWORD *)((char *)this + v16) = 0x3FF0000000000000;
      VoiceProcessorV2::LogIOError((uint64_t)this, v9 + 0.002, (float)*((unsigned int *)this + 3112), (float)*((unsigned int *)this + 3113), (float)a3, "append signal (%s): <block size mismatch>", v8);
      if (VPLogScope(void)::once != -1)
        dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
      v25 = (_QWORD *)VPLogScope(void)::scope;
      if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(2, VPLogScope(void)::scope, 0))
      {
        v26 = (*v25 ? *v25 : MEMORY[0x1E0C81028]);
        if (os_log_type_enabled(v26, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 136315394;
          *(_QWORD *)&buf[4] = "VoiceProcessor_v2.cpp";
          v89 = 1024;
          v90 = 1243;
          _os_log_impl(&dword_1B5ED0000, v26, OS_LOG_TYPE_DEFAULT, "%25s:%-5d  >vp> CoreAudio: ***** VP BLOCK WARNING: TRANSIENT INCORRECT BLOCK CONFIG", buf, 0x12u);
        }
      }
      v27 = (int *)*((_QWORD *)this + 1570);
      if (v27 && (v7[80] || v7[81]))
      {
        if (VPLogScope(void)::once != -1)
          dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
        CALegacyLog::log(v27, 2, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/VoiceProcessor_v2.cpp", 1243, "FrontEndBlockSizeCheck", "CoreAudio: ***** VP BLOCK WARNING: TRANSIENT INCORRECT BLOCK CONFIG");
      }
      if (VPLogScope(void)::once != -1)
        dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
      v28 = (_QWORD *)VPLogScope(void)::scope;
      if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(2, VPLogScope(void)::scope, 0))
      {
        v29 = (*v28 ? *v28 : MEMORY[0x1E0C81028]);
        if (os_log_type_enabled(v29, OS_LOG_TYPE_DEFAULT))
        {
          v76 = v13->mBuffers[0].mDataByteSize;
          v78 = *((_DWORD *)this + 123);
          v80 = *((_DWORD *)this + 124);
          CAFormatter::CAFormatter((CAFormatter *)&v87, v11);
          v30 = v87;
          CAFormatter::CAFormatter((CAFormatter *)&v86, v10);
          v31 = *((_DWORD *)this + 3112);
          *(_DWORD *)buf = 136317698;
          *(_QWORD *)&buf[4] = "VoiceProcessor_v2.cpp";
          v89 = 1024;
          v90 = 1248;
          v91 = 2080;
          v92 = *(double *)&v8;
          v93 = 1024;
          v94 = a3;
          v95 = 1024;
          v96 = v76;
          v97 = 1024;
          *(_DWORD *)v98 = v83;
          *(_WORD *)&v98[4] = 1024;
          *(_DWORD *)&v98[6] = v78;
          v99 = 1024;
          v100 = v80;
          v101 = 2080;
          v102 = v30;
          v103 = 2080;
          v104 = v86;
          v105 = 1024;
          v106 = v31;
          _os_log_impl(&dword_1B5ED0000, v29, OS_LOG_TYPE_DEFAULT, "%25s:%-5d  >vp> warning: append signal (%s): <transient block size mismatch btwn expected and actual> num frames received  = %u (data byte size = %u).\t hwio buff size = %u\n\t\thwio ref buff size  = %u.\t hwio mic buff size = %u\n\tmic asbd = %s, ref asbd = %s\n\t\t process callcount = %u\n", buf, 0x54u);
          if (v86)
            free(v86);
          if (v87)
            free(v87);
        }
      }
      v24 = 1718772077;
      v32 = (int *)*((_QWORD *)this + 1570);
      if (v32 && (v7[80] || v7[81]))
      {
        if (VPLogScope(void)::once != -1)
          dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
        v33 = VPLogScope(void)::scope;
        v34 = v13->mBuffers[0].mDataByteSize;
        v35 = *((_DWORD *)this + 123);
        v36 = *((_DWORD *)this + 124);
        CAFormatter::CAFormatter((CAFormatter *)buf, v11);
        v37 = *(const char **)buf;
        CAFormatter::CAFormatter((CAFormatter *)&v87, v10);
        CALegacyLog::log(v32, 2, v33, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/VoiceProcessor_v2.cpp", 1248, "FrontEndBlockSizeCheck", "warning: append signal (%s): <transient block size mismatch btwn expected and actual> num frames received  = %u (data byte size = %u).\t hwio buff size = %u\n\t\thwio ref buff size  = %u.\t hwio mic buff size = %u\n\tmic asbd = %s, ref asbd = %s\n\t\t process callcount = %u\n", v85, a3, v34, v83, v35, v36, v37,
          (const char *)v87,
          *((_DWORD *)this + 3112));
LABEL_69:
        if (v87)
          free(v87);
        if (*(_QWORD *)buf)
          free(*(void **)buf);
      }
    }
  }
  else
  {
    if (VPLogScope(void)::once != -1)
    {
      v73 = a4;
      dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
      a4 = v73;
    }
    if (VPLogScope(void)::scope && *(int *)(VPLogScope(void)::scope + 8) >= 6)
    {
      v18 = *(_QWORD *)VPLogScope(void)::scope ? *(NSObject **)VPLogScope(void)::scope : MEMORY[0x1E0C81028];
      v19 = a4;
      v20 = os_log_type_enabled(v18, OS_LOG_TYPE_DEBUG);
      a4 = v19;
      if (v20)
      {
        v21 = *((unsigned int *)this + 3112);
        *(_DWORD *)buf = 136316418;
        *(_QWORD *)&buf[4] = "VoiceProcessor_v2.cpp";
        v89 = 1024;
        v90 = 1222;
        v91 = 2080;
        v92 = *(double *)&v8;
        v93 = 1024;
        v94 = 0;
        v95 = 1024;
        v96 = v19;
        v97 = 2048;
        *(_QWORD *)v98 = v21;
        _os_log_impl(&dword_1B5ED0000, v18, OS_LOG_TYPE_DEBUG, "%25s:%-5d  <vp> append signal (%s): <silence optimization, generating zeroes> num frames received = %u.\t hwio buff size = %u\t process callcount = %lu", buf, 0x32u);
        a4 = v19;
      }
    }
    v22 = (int *)*((_QWORD *)this + 1570);
    if (v22 && (v7[80] || v7[81]))
    {
      if (VPLogScope(void)::once != -1)
      {
        v74 = a4;
        dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
        a4 = v74;
      }
      v75 = *((unsigned int *)this + 3112);
      v23 = a4;
      CALegacyLog::log(v22, 6, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/VoiceProcessor_v2.cpp", 1222, "FrontEndBlockSizeCheck", "append signal (%s): <silence optimization, generating zeroes> num frames received = %u.\t hwio buff size = %u\t process callcount = %lu", v8, 0, a4, v75);
      a4 = v23;
    }
    v24 = 0;
    *a6 = a4;
  }
  return v24;
}

void sub_1B63CF688(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25)
{
  if (a24)
    free(a24);
  _Unwind_Resume(exception_object);
}

uint64_t VoiceProcessorV2::FrontEndFormatConverter(VoiceProcessorV2 *this, const CAStreamBasicDescription *a2, unsigned int a3, const AudioBufferList *a4, unsigned int a5, AudioBufferList *a6, int a7)
{
  AudioBufferList *v7;
  unsigned int v8;
  UInt32 v11;
  AudioBuffer *mBuffers;
  VoiceProcessorV2 *v13;
  size_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  float *v20;
  unint64_t mNumberBuffers;
  uint64_t v22;
  UInt32 v23;
  float *v24;
  vDSP_Length v25;
  float *v26;
  float v27;
  uint64_t v28;
  const float *v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  float *v34;
  UInt32 mNumberChannels;
  UInt32 v36;
  unsigned int v37;
  int v38;
  AudioBufferList *v39;
  void **v40;
  void *v41;
  float *v42;
  vDSP_Length v43;
  float *v44;
  float v45;
  AudioBuffer v46;
  vp::utility::Audio_Buffer_Mixer *v47;
  uint64_t v48;
  uint64_t v49;
  _BYTE *v50;
  _BYTE *v51;
  uint64_t v52;
  _BYTE *v53;
  BOOL v54;
  unsigned int v55;
  _BYTE *v56;
  _BYTE *v57;
  _DWORD *v58;
  unsigned int v59;
  _QWORD *v60;
  int v61;
  NSObject *v62;
  _BOOL4 v63;
  UInt32 v64;
  unint64_t v65;
  unint64_t v66;
  VoiceProcessorV2 *v67;
  uint64_t *v68;
  _BYTE *v69;
  _BYTE *v70;
  _BYTE *v71;
  unint64_t v72;
  void *v73;
  char *mData;
  NSObject *v75;
  UInt32 v76;
  _QWORD *v78;
  NSObject *v79;
  UInt32 v80;
  uint64_t v81;
  float *v82;
  vDSP_Length v83;
  uint64_t *v84;
  float *v85;
  vDSP_Length v86;
  void **p_mData;
  const CAStreamBasicDescription *v88;
  VoiceProcessorV2 *v89;
  int v90;
  __int128 v91;
  _BYTE __B[24];
  __int16 v93;
  UInt32 v94;
  uint64_t v95;

  v7 = a6;
  v8 = a5;
  v88 = a2;
  v89 = this;
  v95 = *MEMORY[0x1E0C80C00];
  v90 = a7;
  if (a7)
    v11 = 5;
  else
    v11 = 8;
  if (a4->mNumberBuffers != 1)
  {
    v84 = &v81;
    v86 = a5;
    v16 = 4 * a5;
    MEMORY[0x1E0C80A78](this);
    v17 = (char *)&v81 - ((v16 + 15) & 0x7FFFFFFF0);
    MEMORY[0x1E0C80A78](v18);
    v20 = (float *)((char *)&v81 - v19);
    bzero(v17, v16);
    v85 = v20;
    bzero(v20, v16);
    v13 = v89;
    mNumberBuffers = a4->mNumberBuffers;
    if (!(_DWORD)mNumberBuffers)
    {
LABEL_25:
      if (!a3)
      {
        *(float *)__B = 1.0 / (float)a4->mNumberBuffers;
        vDSP_vsmul(v85, 1, (const float *)__B, (float *)a6->mBuffers[0].mData, 1, v86);
        v13 = v89;
      }
      v7 = a6;
      v8 = a5;
      goto LABEL_54;
    }
    v22 = 0;
    v23 = 0;
    LODWORD(p_mData) = ((2 * a3) | (a3 >> 1)) & 3;
    while (1)
    {
      if (v90 && **((_DWORD **)v13 + 295) == 1886216809 && (*((_DWORD *)v13 + 18) - 30) <= 7)
      {
        if ((_DWORD)p_mData && ((1 << v22) & p_mData) == 0)
          goto LABEL_24;
      }
      else if (a3 && ((1 << v22) & a3) == 0)
      {
        goto LABEL_24;
      }
      if (v23 >= a6->mNumberBuffers)
      {
        if (VPLogScope(void)::once != -1)
        {
          dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
          v13 = v89;
        }
        v60 = (_QWORD *)VPLogScope(void)::scope;
        if (VPLogScope(void)::scope)
        {
          v61 = CALegacyLog::LogEnabled(1, VPLogScope(void)::scope, 0);
          v13 = v89;
          if (v61)
          {
            v62 = (*v60 ? *v60 : MEMORY[0x1E0C81028]);
            v63 = os_log_type_enabled(v62, OS_LOG_TYPE_ERROR);
            v13 = v89;
            if (v63)
            {
              v64 = a6->mNumberBuffers;
              *(_DWORD *)__B = 136315906;
              *(_QWORD *)&__B[4] = "VoiceProcessor_v2.cpp";
              *(_WORD *)&__B[12] = 1024;
              *(_DWORD *)&__B[14] = 1448;
              *(_WORD *)&__B[18] = 1024;
              *(_DWORD *)&__B[20] = v23;
              v93 = 1024;
              v94 = v64;
              _os_log_impl(&dword_1B5ED0000, v62, OS_LOG_TYPE_ERROR, "%25s:%-5d frontendformatconverter : error dst channel index (%d) goes beyond number of channels in out ABL (%d)", __B, 0x1Eu);
              v13 = v89;
            }
          }
        }
        goto LABEL_25;
      }
      ConvertBufferToFloat32(v88, &a4->mBuffers[v22], 0, (float *)v17, a5);
      if (a3)
      {
        memcpy(a6->mBuffers[v23].mData, v17, v16);
      }
      else if (a5)
      {
        v24 = v85;
        v25 = v86;
        v26 = (float *)((char *)&v81 - ((v16 + 15) & 0x7FFFFFFF0));
        do
        {
          v27 = *v26++;
          *v24 = *v24 + v27;
          ++v24;
          --v25;
        }
        while (v25);
      }
      v23 += a3 != 0;
      mNumberBuffers = a4->mNumberBuffers;
      v13 = v89;
LABEL_24:
      if (++v22 >= mNumberBuffers)
        goto LABEL_25;
    }
  }
  mBuffers = a4->mBuffers;
  if (a4->mBuffers[0].mNumberChannels == 1)
  {
    ConvertBufferToFloat32(v88, mBuffers, 0, (float *)a6->mBuffers[0].mData, a5);
    v13 = v89;
    goto LABEL_54;
  }
  if (a4->mBuffers[0].mNumberChannels > v11)
  {
    v28 = 593717363;
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)__B = 136315394;
      *(_QWORD *)&__B[4] = "VoiceProcessor_v2.cpp";
      *(_WORD *)&__B[12] = 1024;
      *(_DWORD *)&__B[14] = 1421;
      _os_log_impl(&dword_1B5ED0000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  appendsignal: ERROR too many interleaved channels?! data disagrees with ASBD set during InitializeHWInput", __B, 0x12u);
    }
    return v28;
  }
  v81 = (uint64_t)&v81;
  v83 = a5;
  v30 = (const float *)(4 * a5);
  MEMORY[0x1E0C80A78](this);
  v31 = (char *)&v81 - (((unint64_t)v30 + 15) & 0x7FFFFFFF0);
  MEMORY[0x1E0C80A78](v32);
  v34 = (float *)((char *)&v81 - v33);
  bzero(v31, (size_t)v30);
  v82 = v34;
  v85 = (float *)v30;
  bzero(v34, (size_t)v30);
  mNumberChannels = mBuffers->mNumberChannels;
  if (!mBuffers->mNumberChannels)
    goto LABEL_51;
  v36 = 0;
  v37 = 0;
  LODWORD(v86) = a3 != 0;
  LODWORD(v84) = ((2 * a3) | (a3 >> 1)) & 3;
  p_mData = &v7->mBuffers[0].mData;
  while (1)
  {
    v38 = 1 << v37;
    if (!v90 || **((_DWORD **)v89 + 295) != 1886216809 || (*((_DWORD *)v89 + 18) - 30) > 7)
      break;
    if (!(_DWORD)v84 || (v38 & v84) != 0)
      goto LABEL_41;
LABEL_50:
    if (++v37 >= mNumberChannels)
      goto LABEL_51;
  }
  if (a3 && (v38 & a3) == 0)
    goto LABEL_50;
LABEL_41:
  if (v36 < v7->mNumberBuffers)
  {
    v39 = v7;
    v40 = &v7->mBuffers[v36].mData;
    if (!a3)
      v40 = p_mData;
    v41 = *v40;
    ConvertBufferToFloat32(v88, mBuffers, v37, (float *)v31, a5);
    if (a3)
    {
      memcpy(v41, v31, (size_t)v85);
      v7 = v39;
    }
    else
    {
      v7 = v39;
      if (a5)
      {
        v42 = v82;
        v43 = v83;
        v44 = (float *)v31;
        do
        {
          v45 = *v44++;
          *v42 = *v42 + v45;
          ++v42;
          --v43;
        }
        while (v43);
      }
    }
    v36 += v86;
    mNumberChannels = mBuffers->mNumberChannels;
    goto LABEL_50;
  }
  if (VPLogScope(void)::once != -1)
    dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
  v78 = (_QWORD *)VPLogScope(void)::scope;
  if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(1, VPLogScope(void)::scope, 0))
  {
    v79 = (*v78 ? *v78 : MEMORY[0x1E0C81028]);
    if (os_log_type_enabled(v79, OS_LOG_TYPE_ERROR))
    {
      v80 = v7->mNumberBuffers;
      *(_DWORD *)__B = 136315906;
      *(_QWORD *)&__B[4] = "VoiceProcessor_v2.cpp";
      *(_WORD *)&__B[12] = 1024;
      *(_DWORD *)&__B[14] = 1390;
      *(_WORD *)&__B[18] = 1024;
      *(_DWORD *)&__B[20] = v36;
      v93 = 1024;
      v94 = v80;
      _os_log_impl(&dword_1B5ED0000, v79, OS_LOG_TYPE_ERROR, "%25s:%-5d frontendformatconverter : error dst channel index (%d) goes beyond number of channels in out ABL (%d)", __B, 0x1Eu);
    }
  }
LABEL_51:
  v13 = v89;
  if (!a3)
  {
    *(float *)__B = 1.0 / (float)mBuffers->mNumberChannels;
    vDSP_vsmul(v82, 1, (const float *)__B, (float *)v7->mBuffers[0].mData, 1, v83);
    v13 = v89;
  }
  v8 = a5;
LABEL_54:
  if (v90)
  {
    if (**((_DWORD **)v13 + 295) == 1886216809)
    {
      v28 = 0;
      if ((*((_DWORD *)v13 + 18) - 30) <= 7 && v7->mNumberBuffers == 2)
      {
        v28 = 0;
        v46 = v7->mBuffers[0];
        v7->mBuffers[0] = *(AudioBuffer *)&v7[1].mNumberBuffers;
        *(AudioBuffer *)&v7[1].mNumberBuffers = v46;
      }
      return v28;
    }
    return 0;
  }
  if (!*((_BYTE *)v13 + 2064))
    return 0;
  v47 = (VoiceProcessorV2 *)((char *)v13 + 2000);
  if (*((_DWORD *)v13 + 576) != *((_DWORD *)v13 + 578))
  {
    (*(void (**)(VoiceProcessorV2 *, uint64_t, uint64_t))(*(_QWORD *)v13 + 464))(v13, (uint64_t)v13 + 2000, (uint64_t)v13 + 2072);
    v13 = v89;
  }
  if (*((_BYTE *)v13 + 2244) && *((_DWORD *)v13 + 18) == 22)
  {
    v48 = 0;
    v49 = 0;
    v91 = xmmword_1B66A2270;
    *(_OWORD *)&__B[8] = 0uLL;
    *(_QWORD *)__B = &__B[8];
    v50 = &__B[8];
    while (1)
    {
      v51 = &__B[8];
      if (v50 == &__B[8])
        goto LABEL_71;
      v52 = v48;
      v53 = &__B[8];
      if (v48)
      {
        do
        {
          v51 = (_BYTE *)v52;
          v52 = *(_QWORD *)(v52 + 8);
        }
        while (v52);
      }
      else
      {
        do
        {
          v51 = (_BYTE *)*((_QWORD *)v53 + 2);
          v54 = *(_QWORD *)v51 == (_QWORD)v53;
          v53 = v51;
        }
        while (v54);
      }
      v55 = *(_DWORD *)&__B[4 * v49 - 16];
      if (*((_DWORD *)v51 + 7) < v55)
      {
LABEL_71:
        v56 = v48 ? v51 : &__B[8];
        v57 = v48 ? v51 + 8 : &__B[8];
      }
      else
      {
        v56 = &__B[8];
        v57 = &__B[8];
        if (v48)
        {
          v57 = &__B[8];
          while (1)
          {
            while (1)
            {
              v56 = (_BYTE *)v48;
              v59 = *(_DWORD *)(v48 + 28);
              if (v55 >= v59)
                break;
              v48 = *(_QWORD *)v56;
              v57 = v56;
              if (!*(_QWORD *)v56)
                goto LABEL_78;
            }
            if (v59 >= v55)
              break;
            v57 = v56 + 8;
            v48 = *((_QWORD *)v56 + 1);
            if (!v48)
              goto LABEL_78;
          }
        }
      }
      if (!*(_QWORD *)v57)
      {
LABEL_78:
        v58 = operator new(0x20uLL);
        v58[7] = *(_DWORD *)&__B[4 * v49 - 16];
        *(_QWORD *)v58 = 0;
        *((_QWORD *)v58 + 1) = 0;
        *((_QWORD *)v58 + 2) = v56;
        *(_QWORD *)v57 = v58;
        if (**(_QWORD **)__B)
        {
          *(_QWORD *)__B = **(_QWORD **)__B;
          v58 = *(_DWORD **)v57;
        }
        std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)&__B[8], (uint64_t *)v58);
        ++*(_QWORD *)&__B[16];
      }
      if (++v49 == 4)
        break;
      v50 = *(_BYTE **)__B;
      v48 = *(_QWORD *)&__B[8];
    }
    v65 = v7->mNumberBuffers;
    if ((_DWORD)v65)
    {
      v66 = 0;
      v67 = v89;
      do
      {
        v68 = *(uint64_t **)&__B[8];
        if (*(_QWORD *)&__B[8])
        {
          v69 = &__B[8];
          do
          {
            v70 = v68;
            v71 = v69;
            v72 = *((unsigned int *)v68 + 7);
            if (v66 <= v72)
              v69 = v68;
            else
              ++v68;
            v68 = (uint64_t *)*v68;
          }
          while (v68);
          if (v69 != &__B[8])
          {
            if (v66 > v72)
              v70 = v71;
            if (v66 >= *((unsigned int *)v70 + 7))
            {
              v73 = *(void **)(*((_QWORD *)v67 + 207) + 16 * v66 + 16);
              mData = (char *)v7->mBuffers[v66].mData;
              memcpy(*((void **)v67 + 208), &mData[4 * (v8 - *((_DWORD *)v67 + 418))], 4 * *((unsigned int *)v67 + 418));
              memmove(&mData[4 * *((unsigned int *)v67 + 418)], mData, 4 * (v8 - *((_DWORD *)v67 + 418)));
              memcpy(mData, v73, 4 * *((unsigned int *)v67 + 418));
              memcpy(v73, *((const void **)v67 + 208), 4 * *((unsigned int *)v67 + 418));
              v65 = v7->mNumberBuffers;
            }
          }
        }
        ++v66;
      }
      while (v66 < v65);
    }
    std::__tree<std::__value_type<unsigned int,unsigned int>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,unsigned int>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,unsigned int>>>::destroy(*(_QWORD **)&__B[8]);
  }
  if ((vp::utility::Audio_Buffer_Mixer::mix(v47, v7, v7, v8) & 1) != 0)
    return 0;
  if (VPLogScope(void)::once != -1)
    dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
  v28 = VPLogScope(void)::scope;
  if (VPLogScope(void)::scope)
  {
    if (CALegacyLog::LogEnabled(1, VPLogScope(void)::scope, 0))
    {
      v75 = *(_QWORD *)v28 ? *(NSObject **)v28 : MEMORY[0x1E0C81028];
      if (os_log_type_enabled(v75, OS_LOG_TYPE_ERROR))
      {
        v76 = v7->mNumberBuffers;
        *(_DWORD *)__B = 136315650;
        *(_QWORD *)&__B[4] = "VoiceProcessor_v2.cpp";
        *(_WORD *)&__B[12] = 1024;
        *(_DWORD *)&__B[14] = 1524;
        *(_WORD *)&__B[18] = 1024;
        *(_DWORD *)&__B[20] = v76;
        _os_log_impl(&dword_1B5ED0000, v75, OS_LOG_TYPE_ERROR, "%25s:%-5d failed to downmix %u reference signals", __B, 0x18u);
      }
    }
    return 0;
  }
  return v28;
}

void sub_1B63D013C(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__tree<std::__value_type<unsigned int,unsigned int>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,unsigned int>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,unsigned int>>>::destroy(*(_QWORD **)(v1 - 120));
  _Unwind_Resume(a1);
}

double VoiceProcessorV2::FrontEndRefTimeStampHandler(VoiceProcessorV2 *this, double *a2, const AudioTimeStamp *a3)
{
  unsigned int v3;
  char *v6;
  double v7;
  double v8;
  _QWORD *v9;
  NSObject *v10;
  uint64_t v11;
  double v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  int *v16;
  int v17;
  double result;
  uint8_t buf[4];
  const char *v20;
  __int16 v21;
  int v22;
  __int16 v23;
  uint64_t v24;
  __int16 v25;
  double v26;
  __int16 v27;
  uint64_t v28;
  __int16 v29;
  uint64_t v30;
  __int16 v31;
  int v32;
  uint64_t v33;

  v3 = a3;
  v33 = *MEMORY[0x1E0C80C00];
  v6 = (char *)this + 15897;
  v7 = *a2;
  if (!*((_BYTE *)this + 1688))
  {
    *((_BYTE *)this + 1688) = 1;
    *((double *)this + 212) = v7;
    if (*v6 || *((_BYTE *)this + 15898))
    {
      VoiceProcessorV2::WriteTSOverload((std::chrono::duration<long long, std::ratio<1, 1000000>>::rep)this, 0.0, v7, 0);
      v7 = *a2;
    }
  }
  v8 = *((double *)this + 212);
  if (v8 != v7)
  {
    if (*v6 || v6[1])
    {
      VoiceProcessorV2::WriteTSOverload((std::chrono::duration<long long, std::ratio<1, 1000000>>::rep)this, v8, v7, 0);
      v7 = *a2;
      v8 = *((double *)this + 212);
    }
    if (v7 < v8)
    {
      if (VPLogScope(void)::once != -1)
        dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
      v9 = (_QWORD *)VPLogScope(void)::scope;
      if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(1, VPLogScope(void)::scope, 0))
      {
        v10 = (*v9 ? *v9 : MEMORY[0x1E0C81028]);
        if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
        {
          v11 = *((_QWORD *)this + 212);
          v12 = *a2;
          v13 = *((_QWORD *)a2 + 1);
          v14 = *((_QWORD *)a2 + 2);
          v15 = *((_DWORD *)a2 + 14);
          *(_DWORD *)buf = 136316674;
          v20 = "VoiceProcessor_v2.cpp";
          v21 = 1024;
          v22 = 1554;
          v23 = 2048;
          v24 = v11;
          v25 = 2048;
          v26 = v12;
          v27 = 2048;
          v28 = v13;
          v29 = 2048;
          v30 = v14;
          v31 = 1024;
          v32 = v15;
          _os_log_impl(&dword_1B5ED0000, v10, OS_LOG_TYPE_ERROR, "%25s:%-5d  >vp> ref sample time jumped backwards, expected sample time: %.2lf, input sample time: %.2lf, input host time: %lld, input rate scalar: %.2lf, input flag: %d", buf, 0x40u);
        }
      }
      v16 = (int *)*((_QWORD *)this + 1570);
      if (v16 && (*v6 || v6[1]))
      {
        if (VPLogScope(void)::once != -1)
          dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
        CALegacyLog::log(v16, 1, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/VoiceProcessor_v2.cpp", 1554, "FrontEndRefTimeStampHandler", "ref sample time jumped backwards, expected sample time: %.2lf, input sample time: %.2lf, input host time: %lld, input rate scalar: %.2lf, input flag: %d", *((double *)this + 212), *a2, *((_QWORD *)a2 + 1), a2[2], *((_DWORD *)a2 + 14));
      }
      VoiceProcessorV2::LogIOError((uint64_t)this, 12.008, (float)*((unsigned int *)this + 3112), (float)*((unsigned int *)this + 3113), 0.0, "ref sample time jumped backwards");
      v7 = *a2;
    }
  }
  v17 = CADeprecated::AudioRingBuffer::Store(*((CADeprecated::AudioRingBuffer **)this + 150), *((const AudioBufferList **)this + 128), v3, (uint64_t)v7);
  if (v17)
    VoiceProcessorV2::LogIOError((uint64_t)this, 12.001, (float)*((unsigned int *)this + 3112), (float)*((unsigned int *)this + 3113), (float)v17, "frontendreftshandler: ERROR: Ring Buffer error! %d", v17);
  result = *a2 + (double)v3;
  *((double *)this + 212) = result;
  return result;
}

void ConvertBufferToFloat32(const CAStreamBasicDescription *a1, const AudioBuffer *a2, unsigned int a3, float *a4, unsigned int a5)
{
  float *v6;
  char *mData;
  BOOL v8;
  uint64_t v12;
  uint64_t v13;
  uint8_t *v14;
  uint64_t v15;
  _WORD *v16;
  uint64_t v17;
  uint8_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint8_t *v21;
  uint64_t v22;
  _DWORD *v23;
  uint64_t v24;
  uint8_t *v25;
  float *v26;
  uint64_t mNumberChannels;
  _QWORD *v28;
  NSObject *v29;
  uint64_t v30;
  uint64_t v31;
  uint8_t buf[4];
  const char *v33;
  __int16 v34;
  int v35;
  uint64_t v36;

  v6 = a4;
  v36 = *MEMORY[0x1E0C80C00];
  mData = (char *)a2->mData;
  if (mData)
    v8 = a2->mDataByteSize == 0;
  else
    v8 = 1;
  if (v8)
  {
    bzero(a4, 4 * a5);
  }
  else
  {
    *(_DWORD *)buf = 0;
    v12 = CAStreamBasicDescription::IdentifyCommonPCMFormat(a1, (int *)buf, 0);
    if ((_DWORD)v12 && *(_DWORD *)buf == 2)
    {
      MEMORY[0x1E0C80A78](v12);
      v14 = &buf[-v13];
      if (a5)
      {
        v15 = a5;
        v16 = (char *)a2->mData + 2 * a3;
        v17 = 2 * a2->mNumberChannels;
        v18 = v14;
        do
        {
          *(_WORD *)v18 = *v16;
          v18 += 2;
          v16 = (_WORD *)((char *)v16 + v17);
          --v15;
        }
        while (v15);
      }
      NativeInt16ToFloat32Scaled_ARM();
    }
    else
    {
      *(_DWORD *)buf = 0;
      v19 = CAStreamBasicDescription::IdentifyCommonPCMFormat(a1, (int *)buf, 0);
      if ((_DWORD)v19 && *(_DWORD *)buf == 3)
      {
        MEMORY[0x1E0C80A78](v19);
        v21 = &buf[-v20];
        if (a5)
        {
          v22 = a5;
          v23 = (char *)a2->mData + 4 * a3;
          v24 = 4 * a2->mNumberChannels;
          v25 = v21;
          do
          {
            *(_DWORD *)v25 = *v23;
            v25 += 4;
            v23 = (_DWORD *)((char *)v23 + v24);
            --v22;
          }
          while (v22);
        }
        NativeInt32ToFloat32Scaled_ARM();
      }
      else
      {
        *(_DWORD *)buf = 0;
        if (CAStreamBasicDescription::IdentifyCommonPCMFormat(a1, (int *)buf, 0) && *(_DWORD *)buf == 1)
        {
          v26 = (float *)&mData[4 * a3];
          mNumberChannels = a2->mNumberChannels;
          if ((_DWORD)mNumberChannels == 1)
          {
            memcpy(v6, v26, 4 * a5);
          }
          else if (a5)
          {
            v30 = 4 * mNumberChannels;
            v31 = a5;
            do
            {
              *v6++ = *v26;
              v26 = (float *)((char *)v26 + v30);
              --v31;
            }
            while (v31);
          }
        }
        else
        {
          if (VPLogScope(void)::once != -1)
            dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
          v28 = (_QWORD *)VPLogScope(void)::scope;
          if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(5, VPLogScope(void)::scope, 0))
          {
            v29 = (*v28 ? *v28 : MEMORY[0x1E0C81028]);
            if (os_log_type_enabled(v29, OS_LOG_TYPE_DEBUG))
            {
              *(_DWORD *)buf = 136315394;
              v33 = "VoiceProcessor_v2.cpp";
              v34 = 1024;
              v35 = 1349;
              _os_log_impl(&dword_1B5ED0000, v29, OS_LOG_TYPE_DEBUG, "%25s:%-5d invalid format", buf, 0x12u);
            }
          }
        }
      }
    }
  }
}

void ___ZN16VoiceProcessorV27SetModeEi_block_invoke(_QWORD *a1, int a2)
{
  std::__shared_weak_count *v3;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  VoiceProcessorV2 *v8;
  _QWORD *v9;
  NSObject *v10;
  int *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  int *v14;
  uint8_t buf[4];
  const char *v16;
  __int16 v17;
  int v18;
  __int16 v19;
  int v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  v3 = (std::__shared_weak_count *)a1[6];
  if (v3)
  {
    v5 = a1[4];
    v6 = std::__shared_weak_count::lock(v3);
    if (v6)
    {
      v7 = v6;
      v8 = (VoiceProcessorV2 *)a1[5];
      if (v8)
      {
        if (VPLogScope(void)::once != -1)
          dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
        v9 = (_QWORD *)VPLogScope(void)::scope;
        if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(3, VPLogScope(void)::scope, 0))
        {
          v10 = (*v9 ? *v9 : MEMORY[0x1E0C81028]);
          if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 136315650;
            v16 = "VoiceProcessor_v2.cpp";
            v17 = 1024;
            v18 = 709;
            v19 = 1024;
            v20 = a2;
            _os_log_impl(&dword_1B5ED0000, v10, OS_LOG_TYPE_DEFAULT, "%25s:%-5d  <vp> Emergency call status handler triggered, isEmergencyCall: %d\n", buf, 0x18u);
          }
        }
        v11 = *(int **)(v5 + 12560);
        if (v11 && (*(_BYTE *)(v5 + 15897) || *(_BYTE *)(v5 + 15898)))
        {
          if (VPLogScope(void)::once != -1)
          {
            v14 = *(int **)(v5 + 12560);
            dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
            v11 = v14;
          }
          CALegacyLog::log(v11, 3, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/VoiceProcessor_v2.cpp", 709, "SetMode_block_invoke", "Emergency call status handler triggered, isEmergencyCall: %d\n", a2);
        }
        VoiceProcessorV2::SetEmergencyCallStatus(v8, a2);
      }
      p_shared_owners = (unint64_t *)&v7->__shared_owners_;
      do
        v13 = __ldaxr(p_shared_owners);
      while (__stlxr(v13 - 1, p_shared_owners));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
  }
}

void sub_1B63D0988(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  std::shared_ptr<vp::services::Telephony_Utility>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

VoiceProcessorV2 *VoiceProcessorV2::ShouldInteractWithControlCenter(VoiceProcessorV2 *this)
{
  VoiceProcessorV2 *result;

  result = (VoiceProcessorV2 *)_os_feature_enabled_impl();
  if ((_DWORD)result)
  {
    result = (VoiceProcessorV2 *)VoiceProcessorV2::IsDeviceSupportingAdvancedChatFlavors(result);
    if ((_DWORD)result)
      return (VoiceProcessorV2 *)(*((_BYTE *)this + 16177) == 0);
  }
  return result;
}

void VoiceProcessorV2::ResetTimestampsAndInitializeVP(VoiceProcessorV2 *this, int a2, double a3, double a4)
{
  char *v6;
  char v7;
  _QWORD *v8;
  NSObject *v9;
  int *v10;
  _QWORD *v11;
  NSObject *v12;
  int *v13;
  int v14;
  const char *v15;
  __int16 v16;
  int v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v6 = (char *)this + 12488;
  if (*((_BYTE *)this + 476))
  {
    if (a2)
    {
      if (*((_BYTE *)this + 15897))
      {
        if (*((_BYTE *)this + 1688))
        {
          LODWORD(a4) = *((_DWORD *)this + 123);
          VoiceProcessorV2::WriteTSOverload((std::chrono::duration<long long, std::ratio<1, 1000000>>::rep)this, *((double *)this + 212) - (double)*(unint64_t *)&a4, *((double *)this + 212) - (double)*(unint64_t *)&a4, 0);
        }
        if (*((_BYTE *)this + 1689) && (v6[3409] || v6[3410]))
        {
          LODWORD(a4) = *((_DWORD *)this + 124);
          VoiceProcessorV2::WriteTSOverload((std::chrono::duration<long long, std::ratio<1, 1000000>>::rep)this, *((double *)this + 213) - (double)*(unint64_t *)&a4, *((double *)this + 213) - (double)*(unint64_t *)&a4, 1);
        }
      }
      *((_WORD *)this + 844) = 0;
      if (*((_BYTE *)this + 1856))
        *((_BYTE *)this + 1856) = 0;
      v7 = 1;
    }
    else
    {
      v7 = 0;
    }
    *((_BYTE *)this + 2247) = v7;
    (*(void (**)(VoiceProcessorV2 *))(*(_QWORD *)this + 240))(this);
    if (VPLogScope(void)::once != -1)
      dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
    v8 = (_QWORD *)VPLogScope(void)::scope;
    if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(5, VPLogScope(void)::scope, 0))
    {
      v9 = (*v8 ? *v8 : MEMORY[0x1E0C81028]);
      if (os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG))
      {
        v14 = 136315394;
        v15 = "VoiceProcessor_v2.cpp";
        v16 = 1024;
        v17 = 3023;
        _os_log_impl(&dword_1B5ED0000, v9, OS_LOG_TYPE_DEBUG, "%25s:%-5d  <vp> called initialize", (uint8_t *)&v14, 0x12u);
      }
    }
    v10 = (int *)*((_QWORD *)this + 1570);
    if (v10 && (v6[3409] || v6[3410]))
    {
      if (VPLogScope(void)::once != -1)
        dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
      CALegacyLog::log(v10, 5, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/VoiceProcessor_v2.cpp", 3023, "ResetTimestampsAndInitializeVP", "called initialize");
    }
    if (v6[3409] || v6[3410])
      VoiceProcessorV2::PListWriteInitializeHwInputParameters(this);
  }
  if (*((_BYTE *)this + 477))
  {
    if (a2 && v6[3409])
    {
      if (*v6)
      {
        LODWORD(a4) = *((_DWORD *)this + 121);
        VoiceProcessorV2::WriteTSOverload((std::chrono::duration<long long, std::ratio<1, 1000000>>::rep)this, *((double *)this + 1560) - (double)*(unint64_t *)&a4, *((double *)this + 1560) - (double)*(unint64_t *)&a4, 2);
      }
      *v6 = 0;
    }
    VoiceProcessorV2::InitializeDLP(this);
    if (VPLogScope(void)::once != -1)
      dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
    v11 = (_QWORD *)VPLogScope(void)::scope;
    if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(5, VPLogScope(void)::scope, 0))
    {
      v12 = (*v11 ? *v11 : MEMORY[0x1E0C81028]);
      if (os_log_type_enabled(v12, OS_LOG_TYPE_DEBUG))
      {
        v14 = 136315394;
        v15 = "VoiceProcessor_v2.cpp";
        v16 = 1024;
        v17 = 3041;
        _os_log_impl(&dword_1B5ED0000, v12, OS_LOG_TYPE_DEBUG, "%25s:%-5d  <vp> called initializedlp", (uint8_t *)&v14, 0x12u);
      }
    }
    v13 = (int *)*((_QWORD *)this + 1570);
    if (v13 && (v6[3409] || v6[3410]))
    {
      if (VPLogScope(void)::once != -1)
        dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
      CALegacyLog::log(v13, 5, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/VoiceProcessor_v2.cpp", 3041, "ResetTimestampsAndInitializeVP", "called initializedlp");
    }
    if (v6[3409] || v6[3410])
      VoiceProcessorV2::PListWriteInitializeDLPParameters(this);
  }
  *((_DWORD *)this + 563) = 0;
  *((_DWORD *)this + 568) = 0;
  *((_DWORD *)this + 566) = 0;
}

uint64_t VoiceProcessorV2::IsDeviceSupportingAdvancedChatFlavors(VoiceProcessorV2 *this)
{
  unsigned __int8 v1;

  if ((v1 & 1) == 0
  {
    VoiceProcessorV2::IsDeviceSupportingAdvancedChatFlavors(void)const::isDeviceSupported = MGGetBoolAnswer();
  }
  return VoiceProcessorV2::IsDeviceSupportingAdvancedChatFlavors(void)const::isDeviceSupported;
}

uint64_t __copy_helper_block_e8_40c58_ZTSN5caulk14lifetime_guardI16VoiceProcessorV2vE8weak_refE(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(result + 48) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 16);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void __destroy_helper_block_e8_40c58_ZTSN5caulk14lifetime_guardI16VoiceProcessorV2vE8weak_refE(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void VoiceProcessorV2::SetEmergencyCallStatus(VoiceProcessorV2 *this, int a2)
{
  char *v2;
  char v3;
  char *v5;
  int v6;
  double v7;
  double v8;
  unsigned int *v9;
  unsigned int v10;
  int v11;
  _QWORD *v12;
  NSObject *v13;
  int v14;
  int *v15;
  _QWORD *v16;
  NSObject *v17;
  int *v18;
  _QWORD *v19;
  NSObject *v20;
  int *v21;
  unsigned int v22;
  uint8_t buf[4];
  const char *v24;
  __int16 v25;
  int v26;
  __int16 v27;
  int v28;
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  v2 = (char *)this + 15897;
  if (*((unsigned __int8 *)this + 16568) != a2)
  {
    v3 = a2;
    v5 = (char *)this + 2392;
    v6 = (*(uint64_t (**)(char *))(*((_QWORD *)this + 299) + 16))((char *)this + 2392);
    v9 = (unsigned int *)((char *)this + 2480);
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 + 1, v9));
    while (*((_DWORD *)this + 621))
      usleep(0x1F4u);
    v11 = v2[671];
    v2[671] = v3;
    if (*v2)
      VoiceProcessorV2::PListWriteSetPropertyParameters(this, 1768514915);
    if (VPLogScope(void)::once != -1)
      dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
    v12 = (_QWORD *)VPLogScope(void)::scope;
    if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(3, VPLogScope(void)::scope, 0))
    {
      v13 = (*v12 ? *v12 : MEMORY[0x1E0C81028]);
      if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
      {
        v14 = v2[671];
        *(_DWORD *)buf = 136315650;
        v24 = "VoiceProcessor_v2.cpp";
        v25 = 1024;
        v26 = 6430;
        v27 = 1024;
        v28 = v14;
        _os_log_impl(&dword_1B5ED0000, v13, OS_LOG_TYPE_DEFAULT, "%25s:%-5d  <vp> VP mIsInEmergencyCall set to %u", buf, 0x18u);
      }
    }
    v15 = (int *)*((_QWORD *)this + 1570);
    if (v15 && (*v2 || v2[1]))
    {
      if (VPLogScope(void)::once != -1)
        dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
      CALegacyLog::log(v15, 3, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/VoiceProcessor_v2.cpp", 6430, "SetEmergencyCallStatus", "VP mIsInEmergencyCall set to %u", v2[671]);
    }
    if (v2[671] != v11)
    {
      if (VPLogScope(void)::once != -1)
        dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
      v16 = (_QWORD *)VPLogScope(void)::scope;
      if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(3, VPLogScope(void)::scope, 0))
      {
        v17 = (*v16 ? *v16 : MEMORY[0x1E0C81028]);
        if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 136315394;
          v24 = "VoiceProcessor_v2.cpp";
          v25 = 1024;
          v26 = 6435;
          _os_log_impl(&dword_1B5ED0000, v17, OS_LOG_TYPE_DEFAULT, "%25s:%-5d  <vp> Begin self-reinit (SetEmergencyCallStatus)", buf, 0x12u);
        }
      }
      v18 = (int *)*((_QWORD *)this + 1570);
      if (v18 && (*v2 || v2[1]))
      {
        if (VPLogScope(void)::once != -1)
          dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
        CALegacyLog::log(v18, 3, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/VoiceProcessor_v2.cpp", 6435, "SetEmergencyCallStatus", "Begin self-reinit (SetEmergencyCallStatus)");
      }
      VoiceProcessorV2::ResetTimestampsAndInitializeVP(this, 1, v7, v8);
      if (VPLogScope(void)::once != -1)
        dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
      v19 = (_QWORD *)VPLogScope(void)::scope;
      if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(3, VPLogScope(void)::scope, 0))
      {
        v20 = (*v19 ? *v19 : MEMORY[0x1E0C81028]);
        if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 136315394;
          v24 = "VoiceProcessor_v2.cpp";
          v25 = 1024;
          v26 = 6437;
          _os_log_impl(&dword_1B5ED0000, v20, OS_LOG_TYPE_DEFAULT, "%25s:%-5d  <vp> End self-reinit (SetEmergencyCallStatus)", buf, 0x12u);
        }
      }
      v21 = (int *)*((_QWORD *)this + 1570);
      if (v21 && (*v2 || v2[1]))
      {
        if (VPLogScope(void)::once != -1)
          dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
        CALegacyLog::log(v21, 3, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/VoiceProcessor_v2.cpp", 6437, "SetEmergencyCallStatus", "End self-reinit (SetEmergencyCallStatus)");
      }
    }
    do
      v22 = __ldaxr(v9);
    while (__stlxr(v22 - 1, v9));
    if (v6)
      (*(void (**)(char *))(*(_QWORD *)v5 + 24))(v5);
  }
}

void sub_1B63D12D4(_Unwind_Exception *exception_object, int a2)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

_QWORD *CADeprecated::CAAtomicSignaler::PersistentTryer::PersistentTryer(_QWORD *a1, uint64_t a2, int a3)
{
  unsigned int *v4;
  unsigned int v5;
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int *v11;
  unsigned int v12;
  BOOL v13;

  *a1 = a2;
  v4 = (unsigned int *)(a2 + 4);
  do
    v5 = __ldaxr(v4);
  while (__stlxr(v5 + 1, v4));
  v6 = *a1;
  if (*(_DWORD *)*a1)
  {
    v7 = 0;
    v8 = a3 - 1;
    do
    {
      v9 = (unsigned int *)(v6 + 4);
      do
        v10 = __ldaxr(v9);
      while (__stlxr(v10 - 1, v9));
      usleep(0x1F4u);
      v7 += 500;
      v11 = (unsigned int *)(*a1 + 4);
      do
        v12 = __ldaxr(v11);
      while (__stlxr(v12 + 1, v11));
      v6 = *a1;
      if (*(_DWORD *)*a1)
        v13 = v8 >= v7;
      else
        v13 = 0;
    }
    while (v13);
  }
  return a1;
}

float VoiceProcessorV2::DetermineRouteBasedPreGain(VoiceProcessorV2 *this)
{
  int *v1;
  int v2;
  float v3;
  float result;
  float *v5;
  float *v6;
  float *v7;
  float v8;
  float *v9;
  float v10;
  float v11;

  v1 = (int *)*((_QWORD *)this + 292);
  if (v1 == *((int **)this + 293))
  {
    v3 = 38.0;
  }
  else
  {
    v2 = *v1;
    v3 = 38.0;
    if (v2 <= 1886152046)
    {
      if (v2 == 1885892706)
        v3 = 32.0;
      if (v2 == 1885888867)
        v3 = 24.0;
    }
    else
    {
      if (v2 == 1886545251)
        v3 = 24.0;
      if (v2 == 1886613611)
        v3 = 30.0;
      if (v2 == 1886152047)
        v3 = 32.0;
    }
  }
  result = fminf(0.0 - (float)((float)(1.0 - *((float *)this + 3119)) * v3), 0.0);
  v5 = (float *)*((_QWORD *)this + 266);
  v6 = (float *)*((_QWORD *)this + 267);
  if (v5 != v6)
  {
    v7 = v5 + 1;
    if (v5 + 1 != v6)
    {
      v8 = *v5;
      v9 = v5 + 1;
      do
      {
        v10 = *v9++;
        v11 = v10;
        if (v10 < v8)
        {
          v8 = v11;
          v5 = v7;
        }
        v7 = v9;
      }
      while (v9 != v6);
    }
    return result + *v5;
  }
  return result;
}

PListLogger ***std::unique_ptr<TuningPListMgr>::reset[abi:ne180100](PListLogger ***result, PListLogger **a2)
{
  PListLogger **v2;
  uint64_t v3;
  PListLogger *v4;
  int *v5;

  v2 = *result;
  *result = a2;
  if (v2)
  {
    v3 = 2;
    while (1)
    {
      v4 = v2[v3];
      if (v4)
      {
        CFRelease(v4);
        v2[v3] = 0;
      }
      if (++v3 == 6)
      {
        v5 = (int *)v2[6];
        if (v5)
        {
          if (*v5 != -1)
          {
            PListLogger::log(v2[6], "*** done.\n");
            close(*v5);
            *v5 = -1;
          }
          MEMORY[0x1BCC95CEC](v5, 0x1000C4005A209FELL);
        }
        CACFString::~CACFString((CACFString *)v2);
        JUMPOUT(0x1BCC95CECLL);
      }
    }
  }
  return result;
}

void ___ZN16VoiceProcessorV2C2ERKN2vp7ContextE_block_invoke(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned __int8 *a5)
{
  uint64_t v5;
  unsigned __int8 *v6;
  unsigned __int8 *v7;
  BOOL v9;
  BOOL v10;
  _BYTE *v11;
  _BOOL4 v12;
  _QWORD *v13;
  NSObject *v14;
  int *v15;
  unint64_t v16;
  _QWORD *v17;
  NSObject *v18;
  int *v19;
  unint64_t v20;
  _QWORD *v21;
  NSObject *v22;
  const char *v23;
  int v24;
  int *v25;
  const char *v26;
  _QWORD *v27;
  NSObject *v28;
  int v29;
  int *v30;
  _QWORD *v31;
  NSObject *v32;
  int *v33;
  BOOL v34;
  BOOL v35;
  BOOL v36;
  BOOL v37;
  _BYTE **v38;
  _BYTE *v39;
  _BYTE buf[18];
  __int16 v41;
  const char *v42;
  uint64_t v43;

  v43 = *MEMORY[0x1E0C80C00];
  v5 = *(_QWORD *)(a1 + 32);
  v36 = 0;
  VoiceProcessorV2::ReadDefaultsOverride(CFSTR("EnableVPTelephonyMonitor"), 0, &v36, 0, a5);
  v35 = 0;
  VoiceProcessorV2::ReadDefaultsOverride(CFSTR("EnableTelephonyMonitor"), 0, &v35, 0, v6);
  v9 = v36 && v35;
  v34 = 0;
  VoiceProcessorV2::ReadDefaultsOverride(CFSTR("vp_enable_debug_features"), 0, &v34, 0, v7);
  v10 = v34 || v9;
  v37 = v10;
  if (queryBuildType(void)::once != -1)
    dispatch_once(&queryBuildType(void)::once, &__block_literal_global_67);
  v11 = (_BYTE *)(v5 + 15897);
  if (gIsInternal)
  {
    v12 = 1;
  }
  else
  {
    v10 = v37;
    v12 = gIsCarrier != 0;
  }
  if (!v10)
    v12 = 0;
  v37 = v12;
  if (!v12)
    goto LABEL_110;
  if (!*(_BYTE *)(v5 + 15898))
  {
    if (VPLogScope(void)::once != -1)
      dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
    v13 = (_QWORD *)VPLogScope(void)::scope;
    if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(5, VPLogScope(void)::scope, 0))
    {
      v14 = (*v13 ? *v13 : MEMORY[0x1E0C81028]);
      if (os_log_type_enabled(v14, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 136315394;
        *(_QWORD *)&buf[4] = "vpDebug_FileSaving.cpp";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 1006;
        _os_log_impl(&dword_1B5ED0000, v14, OS_LOG_TYPE_DEBUG, "%25s:%-5d  <vp> File-Saving switch turned on", buf, 0x12u);
      }
    }
    v15 = *(int **)(v5 + 12560);
    if (v15 && (*v11 || *(_BYTE *)(v5 + 15898)))
    {
      if (VPLogScope(void)::once != -1)
        dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
      CALegacyLog::log(v15, 5, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/vpDebugFeatures/vpDebug_FileSaving.cpp", 1006, "RereadSaveFilesDefaults", "File-Saving switch turned on");
    }
    *(_QWORD *)buf = v5;
    *(_QWORD *)&buf[8] = &v37;
    v16 = atomic_load((unint64_t *)(v5 + 15928));
    if (v16 != -1)
    {
      v39 = buf;
      v38 = &v39;
      std::__call_once((std::once_flag::_State_type *)(v5 + 15928), &v38, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<VoiceProcessorV2::RereadSaveFilesDefaults(void)::$_0 &&>>);
    }
    if (!v37)
    {
LABEL_110:
      if (*(_BYTE *)(v5 + 15898))
      {
        if (VPLogScope(void)::once != -1)
          dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
        v17 = (_QWORD *)VPLogScope(void)::scope;
        if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(5, VPLogScope(void)::scope, 0))
        {
          v18 = (*v17 ? *v17 : MEMORY[0x1E0C81028]);
          if (os_log_type_enabled(v18, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)buf = 136315394;
            *(_QWORD *)&buf[4] = "vpDebug_FileSaving.cpp";
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = 1025;
            _os_log_impl(&dword_1B5ED0000, v18, OS_LOG_TYPE_DEBUG, "%25s:%-5d  <vp> File-Saving switch turned off", buf, 0x12u);
          }
        }
        v19 = *(int **)(v5 + 12560);
        if (v19 && (*v11 || *(_BYTE *)(v5 + 15898)))
        {
          if (VPLogScope(void)::once != -1)
            dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
          CALegacyLog::log(v19, 5, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/vpDebugFeatures/vpDebug_FileSaving.cpp", 1025, "RereadSaveFilesDefaults", "File-Saving switch turned off");
        }
        *(_QWORD *)buf = v5;
        *(_QWORD *)&buf[8] = &v37;
        v20 = atomic_load((unint64_t *)(v5 + 15936));
        if (v20 != -1)
        {
          v39 = buf;
          v38 = &v39;
          std::__call_once((std::once_flag::_State_type *)(v5 + 15936), &v38, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<VoiceProcessorV2::RereadSaveFilesDefaults(void)::$_1 &&>>);
        }
      }
    }
  }
  if (VPLogScope(void)::once != -1)
    dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
  v21 = (_QWORD *)VPLogScope(void)::scope;
  if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(5, VPLogScope(void)::scope, 0))
  {
    v22 = (*v21 ? *v21 : MEMORY[0x1E0C81028]);
    if (os_log_type_enabled(v22, OS_LOG_TYPE_DEBUG))
    {
      v23 = "enabled";
      v24 = *(unsigned __int8 *)(v5 + 15898);
      *(_QWORD *)&buf[4] = "vpDebug_FileSaving.cpp";
      *(_DWORD *)buf = 136315650;
      if (!v24)
        v23 = "disabled";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 1040;
      v41 = 2080;
      v42 = v23;
      _os_log_impl(&dword_1B5ED0000, v22, OS_LOG_TYPE_DEBUG, "%25s:%-5d  <vp> vp debug features (HUP) are %s", buf, 0x1Cu);
    }
  }
  v25 = *(int **)(v5 + 12560);
  if (v25 && (*v11 || *(_BYTE *)(v5 + 15898)))
  {
    if (VPLogScope(void)::once != -1)
      dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
    if (*(_BYTE *)(v5 + 15898))
      v26 = "enabled";
    else
      v26 = "disabled";
    CALegacyLog::log(v25, 5, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/vpDebugFeatures/vpDebug_FileSaving.cpp", 1040, "RereadSaveFilesDefaults", "vp debug features (HUP) are %s", v26);
  }
  if (queryBuildType(void)::once != -1)
    dispatch_once(&queryBuildType(void)::once, &__block_literal_global_67);
  if ((gIsInternal || gIsCarrier) && *(_DWORD *)(v5 + 12576) <= 1u)
  {
    if (PlatformUtilities_iOS::IsTelephonyCaptureAllowed())
    {
      *(_DWORD *)(v5 + 12576) = 1;
      if (VPLogScope(void)::once != -1)
        dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
      v27 = (_QWORD *)VPLogScope(void)::scope;
      if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(3, VPLogScope(void)::scope, 0))
      {
        v28 = (*v27 ? *v27 : MEMORY[0x1E0C81028]);
        if (os_log_type_enabled(v28, OS_LOG_TYPE_DEFAULT))
        {
          v29 = *(_DWORD *)(v5 + 12576);
          *(_DWORD *)buf = 136315650;
          *(_QWORD *)&buf[4] = "vpDebug_FileSaving.cpp";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = 1050;
          v41 = 1024;
          LODWORD(v42) = v29;
          _os_log_impl(&dword_1B5ED0000, v28, OS_LOG_TYPE_DEFAULT, "%25s:%-5d  <vp> master default exists, enabling file saving level %d", buf, 0x18u);
        }
      }
      v30 = *(int **)(v5 + 12560);
      if (v30 && (*v11 || *(_BYTE *)(v5 + 15898)))
      {
        if (VPLogScope(void)::once != -1)
          dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
        CALegacyLog::log(v30, 3, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/vpDebugFeatures/vpDebug_FileSaving.cpp", 1050, "RereadSaveFilesDefaults", "master default exists, enabling file saving level %d");
      }
    }
    else
    {
      *(_DWORD *)(v5 + 12576) = 0;
      if (VPLogScope(void)::once != -1)
        dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
      v31 = (_QWORD *)VPLogScope(void)::scope;
      if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(3, VPLogScope(void)::scope, 0))
      {
        v32 = (*v31 ? *v31 : MEMORY[0x1E0C81028]);
        if (os_log_type_enabled(v32, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 136315394;
          *(_QWORD *)&buf[4] = "vpDebug_FileSaving.cpp";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = 1055;
          _os_log_impl(&dword_1B5ED0000, v32, OS_LOG_TYPE_DEFAULT, "%25s:%-5d  <vp> master default does not exist, disabling file saving level", buf, 0x12u);
        }
      }
      v33 = *(int **)(v5 + 12560);
      if (v33 && (*v11 || *(_BYTE *)(v5 + 15898)))
      {
        if (VPLogScope(void)::once != -1)
          dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
        CALegacyLog::log(v33, 3, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/vpDebugFeatures/vpDebug_FileSaving.cpp", 1055, "RereadSaveFilesDefaults", "master default does not exist, disabling file saving level");
      }
    }
  }
}

uint64_t caulk::details::lifetime_guard_base<VoiceProcessorV2>::~lifetime_guard_base(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t result;

  if (*(_QWORD *)(a1 + 8))
  {
    _os_assert_log();
    result = _os_crash();
    __break(1u);
  }
  else
  {
    if (*(_BYTE *)(a1 + 40))
      MEMORY[0x1BCC950B0](a1 + 24);
    v2 = *(std::__shared_weak_count **)(a1 + 16);
    if (v2)
    {
      p_shared_owners = (unint64_t *)&v2->__shared_owners_;
      do
        v4 = __ldaxr(p_shared_owners);
      while (__stlxr(v4 - 1, p_shared_owners));
      if (!v4)
      {
        ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
        std::__shared_weak_count::__release_weak(v2);
      }
    }
    return a1;
  }
  return result;
}

uint64_t caulk::concurrent::lf_read_synchronized_write<std::optional<std::vector<unsigned char>>>::~lf_read_synchronized_write(uint64_t a1)
{
  void *v2;
  void *v3;

  if (*(_BYTE *)(a1 + 8))
  {
    if (*(_BYTE *)(a1 + 40))
    {
      v2 = *(void **)(a1 + 16);
      if (v2)
      {
        *(_QWORD *)(a1 + 24) = v2;
        operator delete(v2);
      }
    }
  }
  if (*(_BYTE *)(a1 + 9))
  {
    if (*(_BYTE *)(a1 + 72))
    {
      v3 = *(void **)(a1 + 48);
      if (v3)
      {
        *(_QWORD *)(a1 + 56) = v3;
        operator delete(v3);
      }
    }
  }
  return a1;
}

void VoiceProcessor::ConfigInfo::~ConfigInfo(VoiceProcessor::ConfigInfo *this)
{
  void *v2;
  void *v3;

  if (*((_BYTE *)this + 72))
  {
    v2 = (void *)*((_QWORD *)this + 6);
    if (v2)
    {
      *((_QWORD *)this + 7) = v2;
      operator delete(v2);
    }
  }
  if (*((_BYTE *)this + 40))
  {
    v3 = (void *)*((_QWORD *)this + 2);
    if (v3)
    {
      *((_QWORD *)this + 3) = v3;
      operator delete(v3);
    }
  }
}

uint64_t ABLRingBuffer<float>::~ABLRingBuffer(uint64_t a1)
{
  _BYTE *v2;
  _QWORD *v3;
  _BYTE *v4;

  v3 = (_QWORD *)(a1 + 24);
  v2 = *(_BYTE **)(a1 + 24);
  if (v2)
  {
    v4 = (_BYTE *)v3[1];
    if (v4 != v2)
      *(_QWORD *)(a1 + 32) = &v4[(v2 - v4 + 3) & 0xFFFFFFFFFFFFFFFCLL];
    operator delete(v2);
    *v3 = 0;
    v3[1] = 0;
  }
  return a1;
}

void std::vector<std::vector<std::unique_ptr<VPTimeFreqConverter>>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  void **v2;
  void **v4;
  void *v5;
  void **v6;

  v1 = *a1;
  v2 = (void **)**a1;
  if (v2)
  {
    v4 = (void **)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v4 -= 3;
        v6 = v4;
        std::vector<std::unique_ptr<VPTimeFreqConverter>>::__destroy_vector::operator()[abi:ne180100](&v6);
      }
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void VoiceProcessorV2::VPEchoProcessingParams::~VPEchoProcessingParams(VoiceProcessorV2::VPEchoProcessingParams *this)
{
  uint64_t v2;
  char *v3;
  void *v4;
  uint64_t i;
  void *v6;
  uint64_t j;
  uint64_t k;
  void *v9;
  uint64_t v10;
  void *v11;
  void **v12;

  v2 = 0;
  v3 = (char *)this + 8016;
  do
  {
    v12 = (void **)&v3[v2];
    std::vector<AUPropertyItem>::__destroy_vector::operator()[abi:ne180100](&v12);
    v2 -= 24;
  }
  while (v2 != -1488);
  CACFString::~CACFString((VoiceProcessorV2::VPEchoProcessingParams *)((char *)this + 6536));
  v4 = (void *)*((_QWORD *)this + 813);
  if (v4)
  {
    *((_QWORD *)this + 814) = v4;
    operator delete(v4);
  }
  v12 = (void **)((char *)this + 6480);
  std::vector<AUPropertyItem>::__destroy_vector::operator()[abi:ne180100](&v12);
  for (i = 0; i != -1488; i -= 24)
  {
    v6 = *(void **)((char *)this + i + 5960);
    if (v6)
    {
      *(_QWORD *)((char *)this + i + 5968) = v6;
      operator delete(v6);
    }
  }
  for (j = 0; j != -96; j -= 24)
    CACFString::~CACFString((VoiceProcessorV2::VPEchoProcessingParams *)((char *)this + j + 4456));
  for (k = 4360; k != 2656; k -= 24)
  {
    v12 = (void **)((char *)this + k);
    std::vector<AUPropertyItem>::__destroy_vector::operator()[abi:ne180100](&v12);
  }
  CACFString::~CACFString((VoiceProcessorV2::VPEchoProcessingParams *)((char *)this + 2664));
  v9 = (void *)*((_QWORD *)this + 329);
  if (v9)
  {
    *((_QWORD *)this + 330) = v9;
    operator delete(v9);
  }
  v12 = (void **)((char *)this + 2608);
  std::vector<AUPropertyItem>::__destroy_vector::operator()[abi:ne180100](&v12);
  v10 = 1704;
  do
  {
    v11 = *(void **)((char *)this + v10 + 312);
    if (v11)
    {
      *(_QWORD *)((char *)this + v10 + 320) = v11;
      operator delete(v11);
    }
    v10 -= 24;
  }
  while (v10);
  std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::~__hash_table((uint64_t)this + 264);
  std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::~__hash_table((uint64_t)this + 224);
  CACFString::~CACFString((VoiceProcessorV2::VPEchoProcessingParams *)((char *)this + 200));
  CACFString::~CACFString((VoiceProcessorV2::VPEchoProcessingParams *)((char *)this + 184));
}

uint64_t std::__hash_table<std::__hash_value_type<unsigned int,std::vector<VoiceProcessorV2::VoiceProcessorPropertyListenerBlockInfo>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::vector<VoiceProcessorV2::VoiceProcessorPropertyListenerBlockInfo>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::vector<VoiceProcessorV2::VoiceProcessorPropertyListenerBlockInfo>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::vector<VoiceProcessorV2::VoiceProcessorPropertyListenerBlockInfo>>>>::~__hash_table(uint64_t a1)
{
  char *v2;
  char *v3;
  void *v4;
  void **v6;

  v2 = *(char **)(a1 + 16);
  if (v2)
  {
    do
    {
      v3 = *(char **)v2;
      v6 = (void **)(v2 + 24);
      std::vector<VoiceProcessorV2::VoiceProcessorPropertyListenerBlockInfo>::__destroy_vector::operator()[abi:ne180100](&v6);
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
  v4 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v4)
    operator delete(v4);
  return a1;
}

uint64_t std::__optional_destruct_base<vp::utility::Audio_Buffer_Mixer,false>::~__optional_destruct_base[abi:ne180100](uint64_t a1)
{
  void **v3;

  if (*(_BYTE *)(a1 + 64))
  {
    v3 = (void **)(a1 + 40);
    std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v3);
    v3 = (void **)(a1 + 16);
    std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v3);
  }
  return a1;
}

void std::vector<std::unique_ptr<VoiceProcessor::SampleRateConverter>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  _QWORD *v2;
  _QWORD *v4;
  void *v5;
  uint64_t v6;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v6 = *--v4;
        *v4 = 0;
        if (v6)
          std::default_delete<VoiceProcessor::SampleRateConverter>::operator()[abi:ne180100]();
      }
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void CADeprecated::CAAutoDelete<CADeprecated::CABufferList>::set(_QWORD **a1, _QWORD *a2)
{
  _QWORD *v2;
  uint64_t v5;

  v2 = *a1;
  if (*a1 != a2)
  {
    if (v2)
    {
      v5 = v2[1];
      if (v5)
        MEMORY[0x1BCC95CC8](v5, 0x1000C8077774924);
      operator delete(v2);
    }
    *a1 = a2;
  }
}

void std::vector<AUPropertyItem>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v2;

  v2 = *a1;
  if (*v2)
  {
    std::vector<AUPropertyItem>::__base_destruct_at_end[abi:ne180100]((uint64_t)v2, (uint64_t)*v2);
    operator delete(**a1);
  }
}

void std::__shared_ptr_emplace<caulk::details::lifetime_guard_base<VoiceProcessorV2>::control_block,std::allocator<caulk::details::lifetime_guard_base<VoiceProcessorV2>::control_block>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E69DA7A8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<caulk::details::lifetime_guard_base<VoiceProcessorV2>::control_block,std::allocator<caulk::details::lifetime_guard_base<VoiceProcessorV2>::control_block>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E69DA7A8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1BCC95CECLL);
}

void std::__shared_ptr_emplace<caulk::details::lifetime_guard_base<VoiceProcessorV2>::control_block,std::allocator<caulk::details::lifetime_guard_base<VoiceProcessorV2>::control_block>>::__on_zero_shared(uint64_t a1)
{
  std::__shared_weak_count *v2;

  __dmb(0xBu);
  caulk::semaphore::signal((caulk::semaphore *)(*(_QWORD *)(a1 + 40) + 24));
  v2 = *(std::__shared_weak_count **)(a1 + 32);
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
}

void VoiceProcessorV2::~VoiceProcessorV2(VoiceProcessorV2 *this)
{
  char *v2;
  FILE **v3;
  PowerLogManager *v4;
  _QWORD *v5;
  NSObject *v6;
  int *v7;
  _QWORD *v8;
  NSObject *v9;
  int *v10;
  caulk::concurrent::messenger *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  _OWORD *v16;
  void **v17;
  _OWORD *v18;
  void **v19;
  unint64_t v20;
  void *v21;
  const void *v22;
  const void *v23;
  const void *v24;
  AudioBufferList **v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t i;
  uint64_t v29;
  int *v30;
  int v31;
  int v32;
  VPTimeFreqConverter *v33;
  VPTimeFreqConverter *v34;
  VPTimeFreqConverter *v35;
  VPTimeFreqConverter *v36;
  VPTimeFreqConverter *v37;
  VPTimeFreqConverter *v38;
  VPTimeFreqConverter *v39;
  VPTimeFreqConverter *v40;
  uint64_t j;
  uint64_t v42;
  int *v43;
  int v44;
  int v45;
  uint64_t v46;
  uint64_t v47;
  _QWORD *v48;
  NSObject *v49;
  int *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  const void *v54;
  const void *v55;
  const void *v56;
  const void *v57;
  const void *v58;
  const void *v59;
  const void *v60;
  const void *v61;
  const void *v62;
  const void *v63;
  const void *v64;
  const void *v65;
  const void *v66;
  const void *v67;
  const void *v68;
  const void *v69;
  const void *v70;
  const void *v71;
  const void *v72;
  const void *v73;
  const void *v74;
  const void *v75;
  const void *v76;
  const void *v77;
  const void *v78;
  const void *v79;
  const void *v80;
  const void *v81;
  void *v82;
  void *v83;
  _BYTE *v84;
  _BYTE *v85;
  uint64_t v86;
  uint64_t v87;
  char *v88;
  uint64_t v89;
  char *v90;
  uint64_t v91;
  uint64_t k;
  void *v93;
  void *v94;
  const void *v95;
  void *v96;
  const void *v97;
  void *v98;
  const void *v99;
  void *v100;
  const void *v101;
  void *v102;
  const void *v103;
  uint64_t v104;
  _BYTE *v105;
  _BYTE *v106;
  _BYTE *v107;
  _BYTE *v108;
  _BYTE *v109;
  _BYTE *v110;
  _BYTE *v111;
  _BYTE *v112;
  _BYTE *v113;
  _BYTE *v114;
  uint64_t v115;
  void *v116;
  void *v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  const void *v121;
  PowerLogManager **v122;
  void *__p[2];
  char v124;
  std::string v125;
  void **v126;
  _BYTE buf[24];
  uint64_t v128;

  v128 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)this = off_1E69DA348;
  v2 = (char *)this + 16600;
  caulk::details::lifetime_guard_base<VoiceProcessorV2>::invalidate((uint64_t)this + 16600);
  v3 = (FILE **)MEMORY[0x1E0C80C10];
  if (*((_BYTE *)this + 15816))
    fflush((FILE *)*MEMORY[0x1E0C80C10]);
  dispatch_source_cancel(*((dispatch_source_t *)this + 1993));
  dispatch_release(*((dispatch_object_t *)this + 1993));
  *((_QWORD *)this + 1993) = 0;
  v122 = (PowerLogManager **)((char *)this + 15912);
  v4 = (PowerLogManager *)*((_QWORD *)this + 1989);
  if (v4)
  {
    PowerLogManager::EndPowerTracking(v4);
    if (VPLogScope(void)::once != -1)
      dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
    v5 = (_QWORD *)VPLogScope(void)::scope;
    if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(5, VPLogScope(void)::scope, 0))
    {
      v6 = (*v5 ? *v5 : MEMORY[0x1E0C81028]);
      if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 136315394;
        *(_QWORD *)&buf[4] = "VoiceProcessor_v2.cpp";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 257;
        _os_log_impl(&dword_1B5ED0000, v6, OS_LOG_TYPE_DEBUG, "%25s:%-5d  <vp> Waiting for power log tasks to complete (thread join)", buf, 0x12u);
      }
    }
    v7 = (int *)*((_QWORD *)this + 1570);
    if (v7 && (*((_BYTE *)this + 15897) || *((_BYTE *)this + 15898)))
    {
      if (VPLogScope(void)::once != -1)
        dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
      CALegacyLog::log(v7, 5, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/VoiceProcessor_v2.cpp", 257, "~VoiceProcessorV2", "Waiting for power log tasks to complete (thread join)");
    }
    PowerLogManager::SetPowerVendor(*v122, 0, 0);
    if (VPLogScope(void)::once != -1)
      dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
    v8 = (_QWORD *)VPLogScope(void)::scope;
    if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(5, VPLogScope(void)::scope, 0))
    {
      v9 = (*v8 ? *v8 : MEMORY[0x1E0C81028]);
      if (os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 136315394;
        *(_QWORD *)&buf[4] = "VoiceProcessor_v2.cpp";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 259;
        _os_log_impl(&dword_1B5ED0000, v9, OS_LOG_TYPE_DEBUG, "%25s:%-5d  <vp> Power log tasks complete", buf, 0x12u);
      }
    }
    v10 = (int *)*((_QWORD *)this + 1570);
    if (v10 && (*((_BYTE *)this + 15897) || *((_BYTE *)this + 15898)))
    {
      if (VPLogScope(void)::once != -1)
        dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
      CALegacyLog::log(v10, 5, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/VoiceProcessor_v2.cpp", 259, "~VoiceProcessorV2", "Power log tasks complete");
    }
  }
  v11 = (caulk::concurrent::messenger *)*((_QWORD *)this + 2027);
  if (v11)
    caulk::concurrent::messenger::drain(v11);
  myFreeABLDynamic((AudioBufferList **)this + 13);
  myFreeABLDynamic((AudioBufferList **)this + 22);
  myFreeABLDynamic((AudioBufferList **)this + 23);
  myFreeABLDynamic((AudioBufferList **)this + 24);
  myFreeABLDynamic((AudioBufferList **)this + 25);
  myFreeABLDynamic((AudioBufferList **)this + 1988);
  v12 = *((_QWORD *)this + 47);
  *((_QWORD *)this + 47) = 0;
  if (v12)
    std::default_delete<VoiceProcessor::SampleRateConverter>::operator()[abi:ne180100]();
  v13 = *((_QWORD *)this + 48);
  *((_QWORD *)this + 48) = 0;
  if (v13)
    std::default_delete<VoiceProcessor::SampleRateConverter>::operator()[abi:ne180100]();
  v14 = *((_QWORD *)this + 49);
  *((_QWORD *)this + 49) = 0;
  if (v14)
    std::default_delete<VoiceProcessor::SampleRateConverter>::operator()[abi:ne180100]();
  if (*((_BYTE *)this + 1952))
  {
    *(_QWORD *)buf = (char *)this + 1928;
    std::vector<std::unique_ptr<VoiceProcessor::SampleRateConverter>>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
    *((_BYTE *)this + 1952) = 0;
  }
  if (*((_BYTE *)this + 1984))
  {
    *(_QWORD *)buf = (char *)this + 1960;
    std::vector<std::unique_ptr<VoiceProcessor::SampleRateConverter>>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
    *((_BYTE *)this + 1984) = 0;
  }
  if (*((_BYTE *)this + 1392))
  {
    *(_QWORD *)buf = (char *)this + 1368;
    std::vector<std::unique_ptr<VoiceProcessor::SampleRateConverter>>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
    *((_BYTE *)this + 1392) = 0;
  }
  myFreeABLDynamic((AudioBufferList **)this + 178);
  myFreeABLDynamic((AudioBufferList **)this + 179);
  myFreeABLDynamic((AudioBufferList **)this + 177);
  free(*((void **)this + 176));
  v15 = *((_DWORD *)this + 370);
  if (v15 || *((_DWORD *)this + 371))
  {
    *(_OWORD *)&buf[8] = 0uLL;
    *(_QWORD *)buf = &buf[8];
    std::to_string(&v125, v15);
    std::string::basic_string[abi:ne180100]<0>(__p, "vp_mic_clip_detection_presrc_frames");
    v126 = __p;
    v16 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)buf, __p, (_OWORD **)&v126);
    v17 = (void **)v16 + 7;
    if (*((char *)v16 + 79) < 0)
      operator delete(*v17);
    *(std::string *)v17 = v125;
    *((_BYTE *)&v125.__r_.__value_.__s + 23) = 0;
    v125.__r_.__value_.__s.__data_[0] = 0;
    if (v124 < 0)
    {
      operator delete(__p[0]);
      if (SHIBYTE(v125.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v125.__r_.__value_.__l.__data_);
    }
    std::to_string(&v125, *((_DWORD *)this + 371));
    std::string::basic_string[abi:ne180100]<0>(__p, "vp_mic_clip_detection_postsrc_frames");
    v126 = __p;
    v18 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)buf, __p, (_OWORD **)&v126);
    v19 = (void **)v18 + 7;
    if (*((char *)v18 + 79) < 0)
      operator delete(*v19);
    *(std::string *)v19 = v125;
    *((_BYTE *)&v125.__r_.__value_.__s + 23) = 0;
    v125.__r_.__value_.__s.__data_[0] = 0;
    if (v124 < 0)
    {
      operator delete(__p[0]);
      if (SHIBYTE(v125.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v125.__r_.__value_.__l.__data_);
    }
    AudioStatisticsHelperSendMessage(*((uint64_t **)this + 270), *((_DWORD *)this + 542), (const UInt8 **)buf, 6);
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(*(_QWORD **)&buf[8]);
  }
  myFreeABLDynamic((AudioBufferList **)this + 128);
  myFreeABLDynamic((AudioBufferList **)this + 129);
  myFreeABLDynamic((AudioBufferList **)this + 130);
  myFreeABLDynamic((AudioBufferList **)this + 131);
  myFreeABLDynamic((AudioBufferList **)this + 132);
  myFreeABLDynamic((AudioBufferList **)this + 133);
  myFreeABLDynamic((AudioBufferList **)this + 134);
  myFreeABLDynamic((AudioBufferList **)this + 135);
  myFreeABLDynamic((AudioBufferList **)this + 136);
  myFreeABLDynamic((AudioBufferList **)this + 137);
  myFreeABLDynamic((AudioBufferList **)this + 151);
  myFreeABLDynamic((AudioBufferList **)this + 157);
  myFreeABLDynamic((AudioBufferList **)this + 158);
  myFreeABLDynamic((AudioBufferList **)this + 2056);
  myFreeABLDynamic((AudioBufferList **)this + 207);
  v21 = (void *)*((_QWORD *)this + 208);
  if (v21)
    free(v21);
  *((_QWORD *)this + 293) = *((_QWORD *)this + 292);
  *((_QWORD *)this + 296) = *((_QWORD *)this + 295);
  v22 = (const void *)*((_QWORD *)this + 276);
  if (v22)
  {
    CFRelease(v22);
    *((_QWORD *)this + 276) = 0;
  }
  v23 = (const void *)*((_QWORD *)this + 277);
  if (v23)
  {
    CFRelease(v23);
    *((_QWORD *)this + 277) = 0;
  }
  v24 = (const void *)*((_QWORD *)this + 278);
  if (v24)
  {
    CFRelease(v24);
    *((_QWORD *)this + 278) = 0;
  }
  if (*((_BYTE *)this + 15816))
    fflush(*v3);
  if (*((_BYTE *)this + 15897) || *((_BYTE *)this + 15898))
  {
    if (*((_BYTE *)this + 1688))
    {
      LODWORD(v20) = *((_DWORD *)this + 123);
      VoiceProcessorV2::WriteTSOverload((std::chrono::duration<long long, std::ratio<1, 1000000>>::rep)this, *((double *)this + 212) - (double)v20, *((double *)this + 212) - (double)v20, 0);
    }
    if (*((_BYTE *)this + 1689) && (*((_BYTE *)this + 15897) || *((_BYTE *)this + 15898)))
    {
      LODWORD(v20) = *((_DWORD *)this + 124);
      VoiceProcessorV2::WriteTSOverload((std::chrono::duration<long long, std::ratio<1, 1000000>>::rep)this, *((double *)this + 213) - (double)v20, *((double *)this + 213) - (double)v20, 1);
    }
    if (*((_BYTE *)this + 12488) && (*((_BYTE *)this + 15897) || *((_BYTE *)this + 15898)))
    {
      LODWORD(v20) = *((_DWORD *)this + 121);
      VoiceProcessorV2::WriteTSOverload((std::chrono::duration<long long, std::ratio<1, 1000000>>::rep)this, *((double *)this + 1560) - (double)v20, *((double *)this + 1560) - (double)v20, 2);
    }
    if (*((_BYTE *)this + 12504) && (*((_BYTE *)this + 15897) || *((_BYTE *)this + 15898)))
    {
      LODWORD(v20) = *((_DWORD *)this + 382);
      VoiceProcessorV2::WriteTSOverload((std::chrono::duration<long long, std::ratio<1, 1000000>>::rep)this, *((double *)this + 1562) - (double)v20, *((double *)this + 1562) - (double)v20, 3);
    }
  }
  VoiceProcessorV2::SaveFilesCleanup(this);
  if (*((_BYTE *)this + 15897))
  {
    v25 = (AudioBufferList **)((char *)this + 15160);
    v26 = 12;
    do
    {
      if (*v25)
      {
        myFreeABLDynamic(v25);
        *v25 = 0;
      }
      v25[1] = 0;
      v25[2] = 0;
      if (v25[37])
      {
        myFreeABLDynamic(v25 + 37);
        v25[37] = 0;
      }
      v25[38] = 0;
      v25[39] = 0;
      v25 += 3;
      --v26;
    }
    while (v26);
    if (*((_QWORD *)this + 1892))
    {
      myFreeABLDynamic((AudioBufferList **)this + 1892);
      *((_QWORD *)this + 1892) = 0;
    }
    if (*((_QWORD *)this + 1893))
    {
      myFreeABLDynamic((AudioBufferList **)this + 1893);
      *((_QWORD *)this + 1893) = 0;
    }
    if (*((_BYTE *)this + 15897))
    {
      v27 = *((_QWORD *)this + 1969);
      *((_QWORD *)this + 1969) = 0;
      if (v27)
        std::default_delete<VoiceProcessor::SampleRateConverter>::operator()[abi:ne180100]();
      myFreeABLDynamic((AudioBufferList **)this + 1971);
    }
  }
  for (i = 0; i != 71; ++i)
  {
    v29 = 0;
    v30 = VoiceProcessorV2::VPUplinkIndexToSubTypeArray;
    while (1)
    {
      v31 = *v30;
      v30 += 18;
      if (i == v31)
        break;
      if (++v29 == 71)
      {
        v32 = 0;
        goto LABEL_108;
      }
    }
    v32 = VoiceProcessorV2::VPUplinkIndexToSubTypeArray[18 * v29 + 1];
LABEL_108:
    VoiceProcessorV2::DisposeAU(this, 1635083896, v32, (OpaqueAudioComponentInstance **)this + i + 347, 1);
  }
  VoiceProcessorV2::DisposeAU(this, 1635082616, 1635284597, (OpaqueAudioComponentInstance **)this + 1550, 1);
  myFreeABLDynamic((AudioBufferList **)this + 418);
  myFreeABLDynamic((AudioBufferList **)this + 419);
  myFreeABLDynamic((AudioBufferList **)this + 421);
  myFreeABLDynamic((AudioBufferList **)this + 420);
  myFreeABLDynamic((AudioBufferList **)this + 422);
  myFreeABLDynamic((AudioBufferList **)this + 423);
  myFreeABLDynamic((AudioBufferList **)this + 424);
  myFreeABLDynamic((AudioBufferList **)this + 425);
  myFreeABLDynamic((AudioBufferList **)this + 426);
  myFreeABLDynamic((AudioBufferList **)this + 427);
  myFreeABLDynamic((AudioBufferList **)this + 436);
  myFreeABLDynamic((AudioBufferList **)this + 428);
  myFreeABLDynamic((AudioBufferList **)this + 429);
  myFreeABLDynamic((AudioBufferList **)this + 430);
  myFreeABLDynamic((AudioBufferList **)this + 431);
  myFreeABLDynamic((AudioBufferList **)this + 435);
  myFreeABLDynamic((AudioBufferList **)this + 434);
  myFreeABLDynamic((AudioBufferList **)this + 432);
  myFreeABLDynamic((AudioBufferList **)this + 433);
  myFreeABLDynamic((AudioBufferList **)this + 537);
  myFreeABLDynamic((AudioBufferList **)this + 499);
  myFreeABLDynamic((AudioBufferList **)this + 500);
  myFreeABLDynamic((AudioBufferList **)this + 502);
  myFreeABLDynamic((AudioBufferList **)this + 503);
  myFreeABLDynamic((AudioBufferList **)this + 501);
  myFreeABLDynamic((AudioBufferList **)this + 504);
  myFreeABLDynamic((AudioBufferList **)this + 507);
  myFreeABLDynamic((AudioBufferList **)this + 509);
  myFreeABLDynamic((AudioBufferList **)this + 510);
  myFreeABLDynamic((AudioBufferList **)this + 511);
  myFreeABLDynamic((AudioBufferList **)this + 505);
  myFreeABLDynamic((AudioBufferList **)this + 506);
  v33 = (VPTimeFreqConverter *)*((_QWORD *)this + 512);
  if (v33)
  {
    VPTimeFreqConverter::~VPTimeFreqConverter(v33);
    MEMORY[0x1BCC95CEC]();
    *((_QWORD *)this + 512) = 0;
  }
  v34 = (VPTimeFreqConverter *)*((_QWORD *)this + 513);
  if (v34)
  {
    VPTimeFreqConverter::~VPTimeFreqConverter(v34);
    MEMORY[0x1BCC95CEC]();
    *((_QWORD *)this + 513) = 0;
  }
  v35 = (VPTimeFreqConverter *)*((_QWORD *)this + 514);
  if (v35)
  {
    VPTimeFreqConverter::~VPTimeFreqConverter(v35);
    MEMORY[0x1BCC95CEC]();
    *((_QWORD *)this + 514) = 0;
  }
  v36 = (VPTimeFreqConverter *)*((_QWORD *)this + 515);
  if (v36)
  {
    VPTimeFreqConverter::~VPTimeFreqConverter(v36);
    MEMORY[0x1BCC95CEC]();
    *((_QWORD *)this + 515) = 0;
  }
  v37 = (VPTimeFreqConverter *)*((_QWORD *)this + 516);
  if (v37)
  {
    VPTimeFreqConverter::~VPTimeFreqConverter(v37);
    MEMORY[0x1BCC95CEC]();
    *((_QWORD *)this + 516) = 0;
  }
  v38 = (VPTimeFreqConverter *)*((_QWORD *)this + 517);
  if (v38)
  {
    VPTimeFreqConverter::~VPTimeFreqConverter(v38);
    MEMORY[0x1BCC95CEC]();
    *((_QWORD *)this + 517) = 0;
  }
  v39 = (VPTimeFreqConverter *)*((_QWORD *)this + 518);
  if (v39)
  {
    VPTimeFreqConverter::~VPTimeFreqConverter(v39);
    MEMORY[0x1BCC95CEC]();
    *((_QWORD *)this + 518) = 0;
  }
  v40 = (VPTimeFreqConverter *)*((_QWORD *)this + 519);
  if (v40)
  {
    VPTimeFreqConverter::~VPTimeFreqConverter(v40);
    MEMORY[0x1BCC95CEC]();
    *((_QWORD *)this + 519) = 0;
  }
  for (j = 0; j != 62; ++j)
  {
    v42 = 0;
    v43 = VoiceProcessorV2::VPDownlinkIndexToSubTypeArray;
    while (1)
    {
      v44 = *v43;
      v43 += 18;
      if (j == v44)
        break;
      if (++v42 == 62)
      {
        v45 = 0;
        goto LABEL_131;
      }
    }
    v45 = VoiceProcessorV2::VPDownlinkIndexToSubTypeArray[18 * v42 + 1];
LABEL_131:
    VoiceProcessorV2::DisposeAU(this, 1635083896, v45, (OpaqueAudioComponentInstance **)this + j + 437, 1);
  }
  VoiceProcessorV2::DisposeAU(this, 1635082616, 1635284580, (OpaqueAudioComponentInstance **)this + 1551, 1);
  myFreeABLDynamic((AudioBufferList **)this + 197);
  myFreeABLDynamic((AudioBufferList **)this + 198);
  myFreeABLDynamic((AudioBufferList **)this + 199);
  myFreeABLDynamic((AudioBufferList **)this + 200);
  myFreeABLDynamic((AudioBufferList **)this + 201);
  myFreeABLDynamic((AudioBufferList **)this + 202);
  myFreeABLDynamic((AudioBufferList **)this + 203);
  myFreeABLDynamic((AudioBufferList **)this + 204);
  v46 = *((_QWORD *)this + 1564);
  if (v46)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v46 + 8))(v46);
    *((_QWORD *)this + 1564) = 0;
  }
  v47 = *((_QWORD *)this + 1565);
  if (v47)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v47 + 8))(v47);
    *((_QWORD *)this + 1565) = 0;
  }
  if (VPLogScope(void)::once != -1)
    dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
  v48 = (_QWORD *)VPLogScope(void)::scope;
  if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(3, VPLogScope(void)::scope, 0))
  {
    v49 = (*v48 ? *v48 : MEMORY[0x1E0C81028]);
    if (os_log_type_enabled(v49, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136315394;
      *(_QWORD *)&buf[4] = "VoiceProcessor_v2.cpp";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 455;
      _os_log_impl(&dword_1B5ED0000, v49, OS_LOG_TYPE_DEFAULT, "%25s:%-5d  <vp> VoiceProcessorV2 destroyed!", buf, 0x12u);
    }
  }
  v50 = (int *)*((_QWORD *)this + 1570);
  if (v50 && (*((_BYTE *)this + 15897) || *((_BYTE *)this + 15898)))
  {
    if (VPLogScope(void)::once != -1)
      dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
    CALegacyLog::log(v50, 3, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/VoiceProcessor_v2.cpp", 455, "~VoiceProcessorV2", "VoiceProcessorV2 destroyed!");
  }
  if (!*((_DWORD *)this + 3144))
    std::__fs::filesystem::__remove((const std::__fs::filesystem::path *)((char *)this + 12536), 0);
  v51 = *((_QWORD *)this + 1994);
  if (AudioIssueDetectorLibraryLoader(void)::once != -1)
    dispatch_once(&AudioIssueDetectorLibraryLoader(void)::once, &__block_literal_global_12811);
  if (AudioIssueDetectorLibraryLoader(void)::libSym)
  {
    AudioIssueDetectorLibraryLoader(void)::libSym(v51);
    v52 = *((_QWORD *)this + 1995);
    if (AudioIssueDetectorLibraryLoader(void)::once != -1)
      dispatch_once(&AudioIssueDetectorLibraryLoader(void)::once, &__block_literal_global_12811);
  }
  else
  {
    v52 = *((_QWORD *)this + 1995);
  }
  if (AudioIssueDetectorLibraryLoader(void)::libSym)
    AudioIssueDetectorLibraryLoader(void)::libSym(v52);
  v53 = *((_QWORD *)this + 1996);
  if (AudioDataAnalysisManagerLibraryLoader(void)::once != -1)
    dispatch_once(&AudioDataAnalysisManagerLibraryLoader(void)::once, &__block_literal_global_317);
  if (AudioDataAnalysisManagerLibraryLoader(void)::libSym)
    AudioDataAnalysisManagerLibraryLoader(void)::libSym(v53);
  v54 = (const void *)*((_QWORD *)this + 2085);
  if (v54)
    CFRelease(v54);
  v55 = (const void *)*((_QWORD *)this + 2084);
  if (v55)
    CFRelease(v55);
  v56 = (const void *)*((_QWORD *)this + 2083);
  if (v56)
    CFRelease(v56);
  v57 = (const void *)*((_QWORD *)this + 2082);
  if (v57)
    CFRelease(v57);
  v58 = (const void *)*((_QWORD *)this + 2081);
  if (v58)
    CFRelease(v58);
  caulk::details::lifetime_guard_base<VoiceProcessorV2>::~lifetime_guard_base((uint64_t)v2);
  if (*((_BYTE *)this + 16584))
    vp::objc::ID::~ID((id *)this + 2072);
  v59 = (const void *)*((_QWORD *)this + 2069);
  if (v59)
    CFRelease(v59);
  v60 = (const void *)*((_QWORD *)this + 2065);
  if (v60)
    CFRelease(v60);
  v61 = (const void *)*((_QWORD *)this + 2064);
  if (v61)
    CFRelease(v61);
  v62 = (const void *)*((_QWORD *)this + 2063);
  if (v62)
    CFRelease(v62);
  v63 = (const void *)*((_QWORD *)this + 2062);
  if (v63)
    CFRelease(v63);
  v64 = (const void *)*((_QWORD *)this + 2061);
  if (v64)
    CFRelease(v64);
  v65 = (const void *)*((_QWORD *)this + 2060);
  if (v65)
    CFRelease(v65);
  v66 = (const void *)*((_QWORD *)this + 2059);
  if (v66)
    CFRelease(v66);
  v67 = (const void *)*((_QWORD *)this + 2058);
  if (v67)
    CFRelease(v67);
  v68 = (const void *)*((_QWORD *)this + 2057);
  if (v68)
    CFRelease(v68);
  v69 = (const void *)*((_QWORD *)this + 2054);
  if (v69)
  {
    _Block_release(v69);
    *((_QWORD *)this + 2054) = 0;
  }
  v70 = (const void *)*((_QWORD *)this + 2053);
  if (v70)
    CFRelease(v70);
  v71 = (const void *)*((_QWORD *)this + 2052);
  if (v71)
    CFRelease(v71);
  v72 = (const void *)*((_QWORD *)this + 2051);
  if (v72)
    CFRelease(v72);
  v73 = (const void *)*((_QWORD *)this + 2050);
  if (v73)
    CFRelease(v73);
  caulk::concurrent::lf_read_synchronized_write<std::optional<std::vector<unsigned char>>>::~lf_read_synchronized_write((uint64_t)this + 16304);
  v74 = (const void *)*((_QWORD *)this + 2036);
  if (v74)
    CFRelease(v74);
  v75 = (const void *)*((_QWORD *)this + 2035);
  if (v75)
    CFRelease(v75);
  v76 = (const void *)*((_QWORD *)this + 2034);
  if (v76)
    CFRelease(v76);
  v77 = (const void *)*((_QWORD *)this + 2033);
  if (v77)
    CFRelease(v77);
  v78 = (const void *)*((_QWORD *)this + 2032);
  if (v78)
    CFRelease(v78);
  v79 = (const void *)*((_QWORD *)this + 2031);
  if (v79)
    CFRelease(v79);
  v80 = (const void *)*((_QWORD *)this + 2030);
  if (v80)
    CFRelease(v80);
  v81 = (const void *)*((_QWORD *)this + 2029);
  if (v81)
    CFRelease(v81);
  std::shared_ptr<vp::services::Telephony_Utility>::~shared_ptr[abi:ne180100]((uint64_t)this + 16216);
  if (*((char *)this + 16207) < 0)
    operator delete(*((void **)this + 2023));
  if (*((_BYTE *)this + 16144))
  {
    v82 = (void *)*((_QWORD *)this + 2015);
    if (v82)
    {
      *((_QWORD *)this + 2016) = v82;
      operator delete(v82);
    }
  }
  if (*((_BYTE *)this + 16112))
  {
    v83 = (void *)*((_QWORD *)this + 2011);
    if (v83)
    {
      *((_QWORD *)this + 2012) = v83;
      operator delete(v83);
    }
  }
  *(_QWORD *)buf = (char *)this + 16048;
  std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
  *(_QWORD *)buf = (char *)this + 16024;
  std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
  *(_QWORD *)buf = (char *)this + 16000;
  std::vector<std::__fs::filesystem::path>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
  *(_QWORD *)buf = (char *)this + 15976;
  std::vector<std::__fs::filesystem::path>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
  std::shared_ptr<vp::services::Telephony_Utility>::~shared_ptr[abi:ne180100]((uint64_t)v122);
  v84 = (_BYTE *)*((_QWORD *)this + 1975);
  if (v84)
  {
    v85 = (_BYTE *)*((_QWORD *)this + 1976);
    if (v85 != v84)
      *((_QWORD *)this + 1976) = &v85[(v84 - v85 + 3) & 0xFFFFFFFFFFFFFFFCLL];
    operator delete(v84);
    *((_QWORD *)this + 1975) = 0;
    *((_QWORD *)this + 1976) = 0;
  }
  v86 = *((_QWORD *)this + 1969);
  *((_QWORD *)this + 1969) = 0;
  if (v86)
    std::default_delete<VoiceProcessor::SampleRateConverter>::operator()[abi:ne180100]();
  v87 = 0;
  v88 = (char *)this + 15720;
  do
  {
    myFreeABLDynamic((AudioBufferList **)&v88[v87]);
    *(_QWORD *)&v88[v87] = 0;
    v87 -= 24;
  }
  while (v87 != -288);
  v89 = 0;
  v90 = (char *)this + 15424;
  do
  {
    myFreeABLDynamic((AudioBufferList **)&v90[v89]);
    *(_QWORD *)&v90[v89] = 0;
    v89 -= 24;
  }
  while (v89 != -288);
  v91 = *((_QWORD *)this + 1881);
  *((_QWORD *)this + 1881) = 0;
  if (v91)
    MEMORY[0x1BCC95CEC](v91, 0x1000C4089CA3EB1);
  *(_QWORD *)buf = (char *)this + 13952;
  std::vector<std::vector<std::unique_ptr<VPTimeFreqConverter>>>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
  for (k = 0; k != -1072; k -= 8)
    vp::Audio_Capture::~Audio_Capture((VoiceProcessorV2 *)((char *)this + k + 13944));
  CADeprecated::CAAutoDelete<CALegacyLog>::set((_QWORD *)this + 1571, 0);
  CADeprecated::CAAutoDelete<CALegacyLog>::set((_QWORD *)this + 1570, 0);
  if (*((char *)this + 12559) < 0)
    operator delete(*((void **)this + 1567));
  VoiceProcessorV2::VPEchoProcessingParams::~VPEchoProcessingParams((VoiceProcessorV2 *)((char *)this + 4352));
  std::__hash_table<std::__hash_value_type<unsigned int,std::vector<VoiceProcessorV2::VoiceProcessorPropertyListenerBlockInfo>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::vector<VoiceProcessorV2::VoiceProcessorPropertyListenerBlockInfo>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::vector<VoiceProcessorV2::VoiceProcessorPropertyListenerBlockInfo>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::vector<VoiceProcessorV2::VoiceProcessorPropertyListenerBlockInfo>>>>::~__hash_table((uint64_t)this + 4304);
  vp::Audio_Buffer::~Audio_Buffer((VoiceProcessorV2 *)((char *)this + 2768));
  vp::Audio_Buffer::~Audio_Buffer((VoiceProcessorV2 *)((char *)this + 2760));
  vp::Audio_Buffer::~Audio_Buffer((VoiceProcessorV2 *)((char *)this + 2752));
  vp::Audio_Buffer::~Audio_Buffer((VoiceProcessorV2 *)((char *)this + 2744));
  std::unique_ptr<TuningPListMgr>::reset[abi:ne180100]((PListLogger ***)this + 341, 0);
  std::mutex::~mutex((std::mutex *)((char *)this + 2664));
  *((_QWORD *)this + 322) = &off_1E69EDF70;
  pthread_mutex_destroy((pthread_mutex_t *)((char *)this + 2600));
  *((_QWORD *)this + 311) = &off_1E69EDF70;
  pthread_mutex_destroy((pthread_mutex_t *)((char *)this + 2512));
  *((_QWORD *)this + 299) = &off_1E69EDF70;
  pthread_mutex_destroy((pthread_mutex_t *)((char *)this + 2416));
  v93 = (void *)*((_QWORD *)this + 295);
  if (v93)
  {
    *((_QWORD *)this + 296) = v93;
    operator delete(v93);
  }
  v94 = (void *)*((_QWORD *)this + 292);
  if (v94)
  {
    *((_QWORD *)this + 293) = v94;
    operator delete(v94);
  }
  CAAudioChannelLayout::~CAAudioChannelLayout((unsigned int **)this + 287);
  v95 = (const void *)*((_QWORD *)this + 279);
  if (v95)
    CFRelease(v95);
  v96 = (void *)*((_QWORD *)this + 273);
  if (v96)
  {
    free(v96);
    *((_QWORD *)this + 273) = 0;
  }
  v97 = (const void *)*((_QWORD *)this + 272);
  if (v97)
    CFRelease(v97);
  v98 = (void *)*((_QWORD *)this + 270);
  if (v98)
  {
    free(v98);
    *((_QWORD *)this + 270) = 0;
  }
  v99 = (const void *)*((_QWORD *)this + 269);
  if (v99)
    CFRelease(v99);
  v100 = (void *)*((_QWORD *)this + 266);
  if (v100)
  {
    *((_QWORD *)this + 267) = v100;
    operator delete(v100);
  }
  v101 = (const void *)*((_QWORD *)this + 265);
  if (v101)
    CFRelease(v101);
  v102 = (void *)*((_QWORD *)this + 262);
  if (v102)
  {
    *((_QWORD *)this + 263) = v102;
    operator delete(v102);
  }
  v103 = (const void *)*((_QWORD *)this + 261);
  if (v103)
    CFRelease(v103);
  std::__optional_destruct_base<vp::utility::Audio_Buffer_Mixer,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)this + 2000);
  v104 = *((_QWORD *)this + 249);
  *((_QWORD *)this + 249) = 0;
  if (v104)
    std::default_delete<VoiceProcessor::SampleRateConverter>::operator()[abi:ne180100]();
  if (*((_BYTE *)this + 1984))
  {
    *(_QWORD *)buf = (char *)this + 1960;
    std::vector<std::unique_ptr<VoiceProcessor::SampleRateConverter>>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
  }
  if (*((_BYTE *)this + 1952))
  {
    *(_QWORD *)buf = (char *)this + 1928;
    std::vector<std::unique_ptr<VoiceProcessor::SampleRateConverter>>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
  }
  v105 = (_BYTE *)*((_QWORD *)this + 195);
  if (v105)
  {
    v106 = (_BYTE *)*((_QWORD *)this + 196);
    if (v106 != v105)
      *((_QWORD *)this + 196) = &v106[(v105 - v106 + 3) & 0xFFFFFFFFFFFFFFFCLL];
    operator delete(v105);
    *((_QWORD *)this + 195) = 0;
    *((_QWORD *)this + 196) = 0;
  }
  v107 = (_BYTE *)*((_QWORD *)this + 183);
  if (v107)
  {
    v108 = (_BYTE *)*((_QWORD *)this + 184);
    if (v108 != v107)
      *((_QWORD *)this + 184) = &v108[(v107 - v108 + 3) & 0xFFFFFFFFFFFFFFFCLL];
    operator delete(v107);
    *((_QWORD *)this + 183) = 0;
    *((_QWORD *)this + 184) = 0;
  }
  if (*((_BYTE *)this + 1392))
  {
    *(_QWORD *)buf = (char *)this + 1368;
    std::vector<std::unique_ptr<VoiceProcessor::SampleRateConverter>>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
  }
  v109 = (_BYTE *)*((_QWORD *)this + 169);
  if (v109)
  {
    v110 = (_BYTE *)*((_QWORD *)this + 170);
    if (v110 != v109)
      *((_QWORD *)this + 170) = &v110[(v109 - v110 + 3) & 0xFFFFFFFFFFFFFFFCLL];
    operator delete(v109);
    *((_QWORD *)this + 169) = 0;
    *((_QWORD *)this + 170) = 0;
  }
  v111 = (_BYTE *)*((_QWORD *)this + 164);
  if (v111)
  {
    v112 = (_BYTE *)*((_QWORD *)this + 165);
    if (v112 != v111)
      *((_QWORD *)this + 165) = &v112[(v111 - v112 + 3) & 0xFFFFFFFFFFFFFFFCLL];
    operator delete(v111);
    *((_QWORD *)this + 164) = 0;
    *((_QWORD *)this + 165) = 0;
  }
  v113 = (_BYTE *)*((_QWORD *)this + 155);
  if (v113)
  {
    v114 = (_BYTE *)*((_QWORD *)this + 156);
    if (v114 != v113)
      *((_QWORD *)this + 156) = &v114[(v113 - v114 + 3) & 0xFFFFFFFFFFFFFFFCLL];
    operator delete(v113);
    *((_QWORD *)this + 155) = 0;
    *((_QWORD *)this + 156) = 0;
  }
  v115 = *((_QWORD *)this + 150);
  if (v115)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v115 + 8))(v115);
    *((_QWORD *)this + 150) = 0;
  }
  CADeprecated::CAAutoDelete<CADeprecated::CABufferList>::set((_QWORD **)this + 141, 0);
  CADeprecated::CAAutoDelete<CADeprecated::CABufferList>::set((_QWORD **)this + 140, 0);
  CADeprecated::CAAutoDelete<CADeprecated::CABufferList>::set((_QWORD **)this + 139, 0);
  CADeprecated::CAAutoDelete<CADeprecated::CABufferList>::set((_QWORD **)this + 138, 0);
  v116 = (void *)*((_QWORD *)this + 57);
  if (v116)
    free(v116);
  v117 = (void *)*((_QWORD *)this + 54);
  if (v117)
    free(v117);
  v118 = *((_QWORD *)this + 49);
  *((_QWORD *)this + 49) = 0;
  if (v118)
    std::default_delete<VoiceProcessor::SampleRateConverter>::operator()[abi:ne180100]();
  v119 = *((_QWORD *)this + 48);
  *((_QWORD *)this + 48) = 0;
  if (v119)
    std::default_delete<VoiceProcessor::SampleRateConverter>::operator()[abi:ne180100]();
  v120 = *((_QWORD *)this + 47);
  *((_QWORD *)this + 47) = 0;
  if (v120)
    std::default_delete<VoiceProcessor::SampleRateConverter>::operator()[abi:ne180100]();
  v121 = (const void *)*((_QWORD *)this + 12);
  if (v121)
  {
    _Block_release(v121);
    *((_QWORD *)this + 12) = 0;
  }
  if (*((char *)this + 55) < 0)
    operator delete(*((void **)this + 4));
  if (*((char *)this + 31) < 0)
    operator delete(*((void **)this + 1));
}

void sub_1B63D38E0(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

OpaqueAudioComponentInstance *VoiceProcessorV2::DisposeAU(VoiceProcessorV2 *this, int a2, int a3, OpaqueAudioComponentInstance **a4, int a5)
{
  OpaqueAudioComponentInstance *result;
  BOOL v8;
  _BOOL4 v9;
  uint64_t v10;
  const AUPBUnit **v11;
  unint64_t Index;
  _DWORD v13[2];
  uint64_t v14;
  OpaqueAudioComponentInstance *v15;

  result = *a4;
  if (*a4)
  {
    if (*((_BYTE *)this + 15897))
      v8 = a5 == 0;
    else
      v8 = 1;
    if (!v8)
    {
      v13[0] = a2;
      v13[1] = a3;
      v14 = 1634758764;
      v15 = result;
      v9 = VoiceProcessorV2::AUIsInDownLinkProcessingChain(this, (const AUPBUnit *)v13);
      v10 = 12512;
      if (v9)
        v10 = 12520;
      v11 = *(const AUPBUnit ***)((char *)this + v10);
      Index = VoiceProcessorV2::VPAUProcessingBlock::FindIndex(v11[3], v11[4], (uint64_t)v13);
      if ((Index & 0x80000000) == 0)
        (*((void (**)(const AUPBUnit **, unint64_t))*v11 + 11))(v11, Index);
      result = *a4;
    }
    result = (OpaqueAudioComponentInstance *)AudioComponentInstanceDispose(result);
    *a4 = 0;
  }
  return result;
}

void ___Z37AudioDataAnalysisManagerLibraryLoaderv_block_invoke_12877()
{
  void *v0;
  char *v1;
  int v2;
  char *v3;
  uint64_t v4;

  v4 = *MEMORY[0x1E0C80C00];
  v0 = dlopen("/usr/lib/libAudioIssueDetector.dylib", 1);
  if (v0)
    goto LABEL_5;
  if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
  {
    v2 = 136315138;
    v3 = dlerror();
    _os_log_error_impl(&dword_1B5ED0000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "dlerror : libAudioIssueDetector ADAM: %s", (uint8_t *)&v2, 0xCu);
  }
  v0 = dlopen("/usr/local/lib/libAudioIssueDetector.dylib", 1);
  if (v0)
  {
LABEL_5:
    AudioDataAnalysisManagerLibraryLoader(void)::libSym = (uint64_t (*)(_QWORD, _QWORD))dlsym(v0, "AudioDataAnalysisManagerCreate");
    AudioDataAnalysisManagerLibraryLoader(void)::libSym = (uint64_t (*)(_QWORD))dlsym(v0, "AudioDataAnalysisManagerDispose");
    AudioDataAnalysisManagerLibraryLoader(void)::libSym = (uint64_t)dlsym(v0, "AudioDataAnalysisManagerReset");
    AudioDataAnalysisManagerLibraryLoader(void)::libSym = (uint64_t (*)(_QWORD, _QWORD))dlsym(v0, "AudioDataAnalysisManagerUpdateReportingSessions");
    AudioDataAnalysisManagerLibraryLoader(void)::libSym = (uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))dlsym(v0, "AudioDataAnalysisManagerCreateNodePCM");
    AudioDataAnalysisManagerLibraryLoader(void)::libSym = (uint64_t)dlsym(v0, "AudioDataAnalysisManagerCreateNodeSPL");
    AudioDataAnalysisManagerLibraryLoader(void)::libSym = (uint64_t)dlsym(v0, "AudioDataAnalysisManagerRemoveNode");
    AudioDataAnalysisManagerLibraryLoader(void)::libSym = (uint64_t (*)(_QWORD))dlsym(v0, "AudioDataAnalysisManagerInitialize");
    AudioDataAnalysisManagerLibraryLoader(void)::libSym = (uint64_t)dlsym(v0, "AudioDataAnalysisManagerIsSessionInitialized");
    AudioDataAnalysisManagerLibraryLoader(void)::libSym = (uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))dlsym(v0, "AudioDataAnalysisManagerProcessAudio");
    AudioDataAnalysisManagerLibraryLoader(void)::libSym = (uint64_t)dlsym(v0, "AudioDataAnalysisManagerProcessSPL");
    AudioDataAnalysisManagerLibraryLoader(void)::libSym = (uint64_t)dlsym(v0, "AudioDataAnalysisManagerCreateNodeEnvSPL");
    AudioDataAnalysisManagerLibraryLoader(void)::libSym = (uint64_t)dlsym(v0, "AudioDataAnalysisManagerCreateNodeEnvSoundClass");
    AudioDataAnalysisManagerLibraryLoader(void)::libSym = (uint64_t)dlsym(v0, "AudioDataAnalysisManagerProcessEnvSPL");
    AudioDataAnalysisManagerLibraryLoader(void)::libSym = (uint64_t)dlsym(v0, "AudioDataAnalysisManagerProcessEnvSoundClass");
    AudioDataAnalysisManagerLibraryLoader(void)::libSym = (uint64_t)dlsym(v0, "AudioDataAnalysisManagerSetDeviceInfo");
    AudioDataAnalysisManagerLibraryLoader(void)::libSym = (uint64_t)dlsym(v0, "AudioDataAnalysisManagerRegisterDeviceInfo");
    AudioDataAnalysisManagerLibraryLoader(void)::libSym = (uint64_t)dlsym(v0, "AudioDataAnalysisManagerSetDeviceConnectionState");
    AudioDataAnalysisManagerLibraryLoader(void)::libSym = (uint64_t)dlsym(v0, "AudioDataAnalysisManagerStartServices");
    AudioDataAnalysisManagerLibraryLoader(void)::libSym = (uint64_t)dlsym(v0, "AudioDataAnalysisManagerConnectedWiredDeviceIsHeadphone");
    AudioDataAnalysisManagerLibraryLoader(void)::libSym = (uint64_t (*)(_QWORD, _QWORD))dlsym(v0, "AudioDataAnalysisManagerSetApplicationBundleID");
  }
  else if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
  {
    v1 = dlerror();
    v2 = 136315138;
    v3 = v1;
    _os_log_error_impl(&dword_1B5ED0000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "dlerror : libAudioIssueDetector ADAM: %s", (uint8_t *)&v2, 0xCu);
  }
}

uint64_t VoiceProcessorV2::GetChatFlavor(VoiceProcessorV2 *this)
{
  unsigned __int8 *v1;
  uint64_t v2;
  _BOOL4 IsRefPortOwningDeviceBluetoothAppleProduct;
  int v6;
  uint64_t v7;
  unsigned int v8;
  char v9;
  char *v10;

  v1 = (unsigned __int8 *)this + 16536;
  if (*((_BYTE *)this + 16568))
    return 0;
  if (*((_BYTE *)this + 2246))
    return 2;
  if (!*((_BYTE *)this + 2268))
    return *(unsigned int *)v1;
  if (*((_QWORD *)this + 295) == *((_QWORD *)this + 296) || *((_QWORD *)this + 292) == *((_QWORD *)this + 293))
    return 0;
  IsRefPortOwningDeviceBluetoothAppleProduct = VoiceProcessorV2::IsRefPortOwningDeviceBluetoothAppleProduct((int **)this);
  if (IsRefPortOwningDeviceBluetoothAppleProduct)
    v6 = v1[60];
  else
    v6 = 0;
  v7 = 0;
  v8 = *((_DWORD *)this + 596) & 0xFFFFFFFE;
  while (1)
  {
    if (*(_DWORD *)&VoiceProcessorV2::GetAutomaticChatFlavor(void)const::sRouteConfigurations[v7] != **((_DWORD **)this + 295)
      || *(_DWORD *)&VoiceProcessorV2::GetAutomaticChatFlavor(void)const::sRouteConfigurations[v7 + 4] != **((_DWORD **)this + 292))
    {
      goto LABEL_27;
    }
    v9 = !IsRefPortOwningDeviceBluetoothAppleProduct;
    if (!VoiceProcessorV2::GetAutomaticChatFlavor(void)const::sRouteConfigurations[v7 + 9])
      v9 = 1;
    if ((v9 & 1) != 0)
    {
      if (((IsRefPortOwningDeviceBluetoothAppleProduct ^ (VoiceProcessorV2::GetAutomaticChatFlavor(void)const::sRouteConfigurations[v7 + 9] != 0)) & 1) != 0)
        goto LABEL_27;
    }
    else if (VoiceProcessorV2::GetAutomaticChatFlavor(void)const::sRouteConfigurations[v7 + 8] != v6)
    {
      goto LABEL_27;
    }
    if (v8 != 1647718502 || !VoiceProcessorV2::GetAutomaticChatFlavor(void)const::sRouteConfigurations[v7 + 11])
      break;
    v10 = &VoiceProcessorV2::GetAutomaticChatFlavor(void)const::sRouteConfigurations[v7];
    if (VoiceProcessorV2::GetAutomaticChatFlavor(void)const::sRouteConfigurations[v7 + 10] == (v8 == 1647718502))
      return *((unsigned int *)v10 + 3);
LABEL_27:
    v2 = 0;
    v7 += 16;
    if (v7 == 320)
      return v2;
  }
  if ((v8 == 1647718502) != (VoiceProcessorV2::GetAutomaticChatFlavor(void)const::sRouteConfigurations[v7 + 11] != 0))
    goto LABEL_27;
  v10 = &VoiceProcessorV2::GetAutomaticChatFlavor(void)const::sRouteConfigurations[v7];
  return *((unsigned int *)v10 + 3);
}

void VoiceProcessorV2::GetHardwareModelNameForTuning(std::string *this, uint64_t a2)
{
  uint64_t v2;
  char v3;
  BOOL v4;

  v2 = 0;
  v3 = 0;
  do
  {
    v4 = dword_1B665DCF0[v2] == **(_DWORD **)(a2 + 2336) && dword_1B665DD08[v2] == **(_DWORD **)(a2 + 2360);
    v3 |= v4;
    ++v2;
  }
  while (v2 != 6);
  VoiceProcessorV2::GetHardwareModelNameForTuning(this, a2, v3 & 1);
}

void VoiceProcessorV2::GetHardwareModelNameForTuning(std::string *this, uint64_t a2, int a3)
{
  std::string::size_type v4;
  __int128 v5;
  std::string::size_type v6;
  char v7;

  if (a3)
  {
    std::string::basic_string[abi:ne180100]<0>(this, "Generic");
    return;
  }
  if (*(_BYTE *)(a2 + 60))
  {
    GetHWIdentifierString((uint64_t)&v5, *(_QWORD *)(a2 + 56));
    if (v7)
    {
      *(_OWORD *)&this->__r_.__value_.__l.__data_ = v5;
      v4 = v6;
LABEL_8:
      this->__r_.__value_.__r.__words[2] = v4;
      return;
    }
    std::string::basic_string[abi:ne180100]<0>(this, "");
  }
  else
  {
    if ((*(char *)(a2 + 55) & 0x80000000) == 0)
    {
      *(_OWORD *)&this->__r_.__value_.__l.__data_ = *(_OWORD *)(a2 + 32);
      v4 = *(_QWORD *)(a2 + 48);
      goto LABEL_8;
    }
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)(a2 + 32), *(_QWORD *)(a2 + 40));
  }
}

void VoiceProcessorV2::GetVersionNameForTuning(std::string *this, uint64_t a2)
{
  unsigned int v3;
  std::string *v4;
  std::string v5;

  v3 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 112))(a2);
  std::to_string(&v5, v3);
  v4 = std::string::insert(&v5, 0, "VPV", 3uLL);
  *this = *v4;
  v4->__r_.__value_.__l.__size_ = 0;
  v4->__r_.__value_.__r.__words[2] = 0;
  v4->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v5.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v5.__r_.__value_.__l.__data_);
}

void sub_1B63D40E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void VoiceProcessorV2::GetDeviceCodeNameForTuning(VoiceProcessorV2 *this, uint64_t a2)
{
  uint64_t v2;
  char v3;
  BOOL v4;

  v2 = 0;
  v3 = 0;
  do
  {
    v4 = dword_1B665DCF0[v2] == **(_DWORD **)(a2 + 2336) && dword_1B665DD08[v2] == **(_DWORD **)(a2 + 2360);
    v3 |= v4;
    ++v2;
  }
  while (v2 != 6);
  VoiceProcessorV2::GetDeviceCodeNameForTuning(this, a2, v3 & 1);
}

void VoiceProcessorV2::GetDeviceCodeNameForTuning(VoiceProcessorV2 *this, uint64_t a2, int a3)
{
  int v4;
  int v5;
  CFStringRef v6;
  const __CFString *v7;
  CFTypeID v8;

  if (a3)
  {
    std::string::basic_string[abi:ne180100]<0>(this, "gen");
    return;
  }
  v4 = *(_DWORD *)(a2 + 68);
  switch(v4)
  {
    case 2:
    case 3:
LABEL_13:
      v5 = 2;
      break;
    case 4:
    case 5:
    case 9:
    case 17:
    case 18:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 31:
    case 32:
    case 33:
    case 34:
    case 35:
    case 36:
    case 37:
    case 38:
    case 39:
    case 46:
    case 72:
    case 73:
    case 74:
    case 75:
    case 77:
    case 78:
    case 80:
    case 81:
    case 83:
    case 84:
    case 85:
    case 86:
    case 87:
    case 88:
    case 92:
    case 93:
    case 96:
    case 97:
    case 100:
    case 101:
    case 104:
    case 105:
LABEL_4:
      v5 = *(_DWORD *)(a2 + 68);
      break;
    case 6:
    case 7:
    case 8:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 29:
    case 30:
    case 40:
    case 41:
    case 42:
    case 43:
    case 44:
    case 45:
    case 47:
    case 48:
    case 49:
    case 50:
    case 51:
    case 52:
    case 53:
    case 54:
    case 55:
    case 56:
    case 57:
    case 58:
    case 59:
    case 60:
    case 61:
    case 62:
    case 63:
    case 64:
    case 65:
    case 66:
    case 67:
    case 68:
    case 69:
    case 70:
    case 71:
    case 76:
    case 79:
    case 82:
    case 89:
    case 90:
    case 91:
    case 94:
    case 95:
    case 98:
    case 99:
    case 102:
    case 103:
LABEL_23:
      v5 = 0;
      break;
    case 10:
LABEL_14:
      v5 = 10;
      break;
    default:
      v5 = 139;
      switch(v4)
      {
        case 125:
        case 160:
        case 169:
          goto LABEL_4;
        case 134:
        case 138:
          v5 = 138;
          break;
        case 135:
        case 139:
          goto LABEL_5;
        case 140:
        case 146:
          v5 = 146;
          break;
        case 141:
        case 147:
          v5 = 147;
          break;
        case 148:
        case 150:
          v5 = 150;
          break;
        case 149:
        case 151:
          v5 = 151;
          break;
        case 152:
        case 154:
          v5 = 154;
          break;
        case 153:
        case 155:
          v5 = 155;
          break;
        case 156:
        case 158:
          v5 = 158;
          break;
        case 157:
        case 159:
          v5 = 159;
          break;
        case 180:
          goto LABEL_14;
        case 181:
        case 185:
          goto LABEL_13;
        default:
          goto LABEL_23;
      }
      break;
  }
LABEL_5:
  v6 = PlatformUtilities_iOS::CopyProductTypeFilePrefix(v5);
  if (v6)
  {
    v7 = v6;
    v8 = CFGetTypeID(v6);
    if (v8 == CFStringGetTypeID())
    {
      applesauce::CF::convert_to<std::string,0>(v7, (uint64_t)this);
      CFRelease(v7);
      return;
    }
    CFRelease(v7);
  }
  std::string::basic_string[abi:ne180100]<0>(this, "");
}

void sub_1B63D42D8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  applesauce::CF::StringRef::~StringRef((const void **)va);
  _Unwind_Resume(a1);
}

std::string *VoiceProcessorV2::GetRouteSpecificGenericTuningSubDir(std::string *this, uint64_t a2)
{
  std::string *v2;
  char v3;

  v2 = this;
  if (**(_DWORD **)(a2 + 2336) == 1885892727
    && **(_DWORD **)(a2 + 2360) == 1886222185
    && *(_DWORD *)(a2 + 2384) == 1781740087)
  {
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = 0uLL;
    this->__r_.__value_.__r.__words[2] = 0;
    this = std::string::append[abi:ne180100]<char const*,0>(this, "Accessory/AID6001", "");
    v3 = 1;
  }
  else
  {
    v3 = 0;
    this->__r_.__value_.__s.__data_[0] = 0;
  }
  v2[1].__r_.__value_.__s.__data_[0] = v3;
  return this;
}

void sub_1B63D437C(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

uint64_t *applesauce::dispatch::v1::async<VoiceProcessorV2::NotifyPropertyChanged(unsigned int)::$_0>(dispatch_queue_s *,VoiceProcessorV2::NotifyPropertyChanged(unsigned int)::$_0 &&)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  uint64_t v2;

  v2 = a1;
  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(a1 + 8) + 16))(*(_QWORD *)(a1 + 8), *(unsigned int *)(a1 + 16));
  return std::unique_ptr<VoiceProcessorV2::NotifyPropertyChanged::$_0,std::default_delete<VoiceProcessorV2::NotifyPropertyChanged::$_0>>::~unique_ptr[abi:ne180100](&v2);
}

void sub_1B63D43D8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<VoiceProcessorV2::NotifyPropertyChanged::$_0,std::default_delete<VoiceProcessorV2::NotifyPropertyChanged::$_0>>::~unique_ptr[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t *std::unique_ptr<VoiceProcessorV2::NotifyPropertyChanged(unsigned int)::$_0,std::default_delete<VoiceProcessorV2::NotifyPropertyChanged(unsigned int)::$_0>>::~unique_ptr[abi:ne180100](uint64_t *a1)
{
  uint64_t v2;
  const void *v3;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    v3 = *(const void **)(v2 + 8);
    if (v3)
    {
      _Block_release(v3);
      *(_QWORD *)(v2 + 8) = 0;
    }
    MEMORY[0x1BCC95CEC](v2, 0x1080C409070E284);
  }
  return a1;
}

uint64_t VoiceProcessorV2::ShouldGenerateReferenceSignalInternally(VoiceProcessorV2 *this)
{
  int v3;
  unsigned int v4;
  int v5;
  int v6;
  int v7;
  unsigned int v8;

  if (*((_BYTE *)this + 16177))
    return 0;
  if (!*((_DWORD *)this + 286))
    return 1;
  v3 = _os_feature_enabled_simple_impl();
  v4 = *((_DWORD *)this + 18);
  if (v3 && v4 == 52)
  {
    v5 = *((_DWORD *)this + 596);
    if (v5 == 1886613611)
      return 0;
    v6 = 0;
    v7 = *((unsigned __int8 *)this + 2244);
  }
  else
  {
    v6 = 0;
    v7 = *((unsigned __int8 *)this + 2244);
    v5 = *((_DWORD *)this + 596);
    if (v4 <= 0x26 && ((1 << v4) & 0x4030000000) != 0)
      v6 = _os_feature_enabled_impl();
  }
  v8 = v6 ^ 1;
  if (v5 == 1781740087)
    v8 = 0;
  if (v7)
    return 0;
  else
    return v8;
}

void VoiceProcessorV2::SrcAndAppendToRingBuffer(VoiceProcessorV2 *this, int a2, uint64_t a3, AudioBufferList *a4, _DWORD *a5, AudioBufferList *a6, AudioTimeStamp *a7, const AudioTimeStamp *a8)
{
  int v9;
  uint64_t v10;
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  _DWORD *v17;
  uint64_t v18;
  unsigned int *v19;
  int v20;
  unsigned int v21;
  int v22;
  char *v23;
  _DWORD *v24;
  CA::AudioSampleRateConverter ***v25;
  unint64_t mNumberBuffers;
  _DWORD *v27;
  uint64_t v28;
  unsigned int ExpectedNumberOfOutputFrames;
  unint64_t v30;
  unint64_t v31;
  AudioBuffer *v32;
  unint64_t v33;
  uint64_t v34;
  CA::AudioSampleRateConverter **v35;
  unsigned int v36;
  unsigned int v37;
  int v38;
  unsigned int v39;
  unsigned int v40;
  uint64_t v41;
  unint64_t v42;
  void **p_mData;
  void *v44;
  unint64_t v45;
  unint64_t v46;
  void **v47;
  char *v48;
  unsigned int v49;
  unsigned int v50;
  BOOL v51;
  unsigned int v52;
  int v53;
  int v54;
  unsigned int v55;
  unsigned int v56;
  unsigned int v57;
  uint64_t v58;
  unint64_t v59;
  const void **v60;
  const void *v61;
  unint64_t v62;
  unint64_t v63;
  uint64_t *v64;
  uint64_t v65;
  unsigned int v66;
  unsigned int v67;
  unsigned int v68;
  uint64_t v69;
  CA::AudioSampleRateConverter ***v70;
  unint64_t v71;
  uint64_t v72;
  unsigned int v73;
  unint64_t v74;
  unint64_t v75;
  AudioBuffer *v76;
  unint64_t v77;
  uint64_t v78;
  CA::AudioSampleRateConverter **v79;
  int v80;
  unsigned int v81;
  unsigned int v82;
  uint64_t v83;
  unint64_t v84;
  const void **v85;
  const void *v86;
  unint64_t v87;
  unint64_t v88;
  uint64_t *v89;
  uint64_t v90;
  unsigned int v91;
  unsigned int v92;
  unsigned int v93;
  int v94;
  unsigned int v95;
  unsigned int v96;
  uint64_t v97;
  unint64_t v98;
  const void **v99;
  const void *v100;
  unint64_t v101;
  unint64_t v102;
  uint64_t *v103;
  uint64_t v104;
  unsigned int v105;
  unsigned int v106;
  unsigned int v107;
  uint64_t v108;
  int v109;
  char v110;
  unsigned int v111;
  _DWORD *v112;
  _DWORD *v113;
  uint64_t v114;
  char *v115;
  uint64_t v117;
  AudioBufferList v119;
  AudioBufferList v120;
  unsigned int v121;
  unsigned int v122;

  v9 = (int)a6;
  v10 = a3;
  v12 = (char *)this + 15897;
  v13 = 1960;
  if (a2)
    v13 = 1928;
  v117 = v13;
  if (a2)
    v14 = (char *)this + 1928;
  else
    v14 = (char *)this + 1960;
  v15 = 1328;
  if (a2)
    v15 = 1288;
  v114 = v15;
  if (a2)
    v16 = (char *)this + 1288;
  else
    v16 = (char *)this + 1328;
  v17 = (_DWORD *)*((_QWORD *)this + 179);
  v18 = 1064;
  if (a2)
    v18 = 1056;
  v19 = *(unsigned int **)((char *)this + v18);
  v20 = a2 ^ 1;
  if (((a2 ^ 1) & 1) != 0)
  {
    if (*v12 && (VoiceProcessorV2::InjectionFilesReadSignal(this, 6, a3, a4), *v12) || v12[1])
    {
      v21 = 3;
      goto LABEL_22;
    }
  }
  else if (*v12 && (VoiceProcessorV2::InjectionFilesReadSignal(this, 5, a3, a4), *v12) || v12[1])
  {
    v21 = 2;
LABEL_22:
    VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)this, v21, v10, a4, a7);
  }
  v22 = v20 & v9;
  if (v14[24])
  {
    v23 = v14;
    v24 = v17;
    v115 = v23;
    v108 = *((_QWORD *)v23 + 1);
    v25 = *(CA::AudioSampleRateConverter ****)((char *)this + v117);
    mNumberBuffers = a4->mNumberBuffers;
    v27 = v19;
    v28 = *v19;
    ExpectedNumberOfOutputFrames = CA::AudioSampleRateConverter::GetExpectedNumberOfOutputFrames(**v25);
    v121 = v10;
    v122 = ExpectedNumberOfOutputFrames;
    v111 = v10;
    v112 = v27;
    v113 = v24;
    if ((_DWORD)v28)
    {
      v30 = 0;
      v31 = (v108 - (uint64_t)v25) >> 3;
      v32 = (AudioBuffer *)(v27 + 2);
      do
      {
        v120.mNumberBuffers = 1;
        v120.mBuffers[0] = *v32;
        v119.mNumberBuffers = 1;
        if (v30 >= mNumberBuffers)
          v33 = (mNumberBuffers - 1);
        else
          v33 = v30;
        v119.mBuffers[0] = a4->mBuffers[v33];
        if (v31 <= v30)
          goto LABEL_33;
        v34 = *(_QWORD *)((char *)this + v117);
        if (v30 >= (*((_QWORD *)v115 + 1) - v34) >> 3)
LABEL_140:
          std::vector<std::vector<float>>::__throw_out_of_range[abi:ne180100]();
        v35 = *(CA::AudioSampleRateConverter ***)(v34 + 8 * v30);
        if (v35)
          VoiceProcessor::SampleRateConverter::Convert(v35, &v121, &v122, &v119, &v120);
        else
LABEL_33:
          bzero(v120.mBuffers[0].mData, v120.mBuffers[0].mDataByteSize);
        ++v30;
        ++v32;
      }
      while (v28 != v30);
      v36 = v122;
    }
    else
    {
      v36 = ExpectedNumberOfOutputFrames;
    }
    v53 = *v27;
    if (*v27 == *((_DWORD *)v16 + 1))
    {
      v37 = 0;
      if (v36)
      {
        v54 = *(_DWORD *)((char *)this + v114);
        v55 = v54 - *((_DWORD *)v16 + 2);
        v56 = v111;
        if (v55)
        {
          v110 = v22;
          if (v55 >= v36)
            v37 = v36;
          else
            v37 = v54 - *((_DWORD *)v16 + 2);
          v57 = v54 - *((_DWORD *)v16 + 4);
          if (v57 >= v37)
            v58 = v37;
          else
            v58 = v57;
          if (v53)
          {
            v59 = 0;
            v60 = (const void **)(v112 + 4);
            do
            {
              v61 = *v60;
              v60 += 2;
              memcpy((void *)(*((_QWORD *)v16 + 3)+ 4 * (*((_DWORD *)v16 + 4) + *(_DWORD *)((char *)this + v114) * v59++)), v61, 4 * v58);
              v62 = *((unsigned int *)v16 + 1);
            }
            while (v59 < v62);
            v56 = v111;
            if (v37 > v57)
            {
              if ((_DWORD)v62)
              {
                v63 = 0;
                v64 = (uint64_t *)(v112 + 4);
                do
                {
                  v65 = *v64;
                  v64 += 2;
                  memcpy((void *)(*((_QWORD *)v16 + 3) + 4 * (*(_DWORD *)((char *)this + v114) * v63++)), (const void *)(v65 + 4 * v58), 4 * (v37 - v58));
                }
                while (v63 < *((unsigned int *)v16 + 1));
              }
            }
          }
          *((_DWORD *)v16 + 2) += v37;
          v66 = *((_DWORD *)v16 + 4) + v37;
          *((_DWORD *)v16 + 4) = v66;
          v67 = *(_DWORD *)((char *)this + v114);
          v51 = v66 >= v67;
          v68 = v66 - v67;
          if (v51)
            *((_DWORD *)v16 + 4) = v68;
          LOBYTE(v22) = v110;
        }
        if ((v22 & 1) == 0)
          goto LABEL_135;
        goto LABEL_81;
      }
    }
    else
    {
      v37 = 0;
    }
    v56 = v111;
    if ((v22 & 1) == 0)
    {
LABEL_135:
      LODWORD(v10) = v36;
      goto LABEL_136;
    }
LABEL_81:
    v69 = *((_QWORD *)this + 172);
    v70 = (CA::AudioSampleRateConverter ***)*((_QWORD *)this + 171);
    v71 = *a5;
    v72 = *v24;
    v73 = CA::AudioSampleRateConverter::GetExpectedNumberOfOutputFrames(**v70);
    v121 = v56;
    v122 = v73;
    if ((_DWORD)v72)
    {
      v74 = 0;
      v75 = (v69 - (uint64_t)v70) >> 3;
      v76 = (AudioBuffer *)(v24 + 2);
      do
      {
        v120.mNumberBuffers = 1;
        v120.mBuffers[0] = *v76;
        v119.mNumberBuffers = 1;
        if (v74 >= v71)
          v77 = (v71 - 1);
        else
          v77 = v74;
        v119.mBuffers[0] = *(AudioBuffer *)&a5[4 * v77 + 2];
        if (v75 <= v74)
          goto LABEL_90;
        v78 = *((_QWORD *)this + 171);
        if (v74 >= (*((_QWORD *)this + 172) - v78) >> 3)
          goto LABEL_140;
        v79 = *(CA::AudioSampleRateConverter ***)(v78 + 8 * v74);
        if (v79)
          VoiceProcessor::SampleRateConverter::Convert(v79, &v121, &v122, &v119, &v120);
        else
LABEL_90:
          bzero(v120.mBuffers[0].mData, v120.mBuffers[0].mDataByteSize);
        ++v74;
        ++v76;
      }
      while (v72 != v74);
      v36 = v122;
      v24 = v113;
    }
    else
    {
      v36 = v73;
    }
    if (*v24 == *((_DWORD *)this + 361))
    {
      v37 = 0;
      if (v36)
      {
        v94 = *((_DWORD *)this + 360);
        v95 = v94 - *((_DWORD *)this + 362);
        if (v95)
        {
          if (v95 >= v36)
            v37 = v36;
          else
            v37 = v94 - *((_DWORD *)this + 362);
          v96 = v94 - *((_DWORD *)this + 364);
          if (v96 >= v37)
            v97 = v37;
          else
            v97 = v96;
          if (*v24)
          {
            v98 = 0;
            v99 = (const void **)(v24 + 4);
            do
            {
              v100 = *v99;
              v99 += 2;
              memcpy((void *)(*((_QWORD *)this + 183)+ 4 * (*((_DWORD *)this + 364) + *((_DWORD *)this + 360) * v98++)), v100, 4 * v97);
              v101 = *((unsigned int *)this + 361);
            }
            while (v98 < v101);
            if (v37 > v96 && (_DWORD)v101)
            {
              v102 = 0;
              v103 = (uint64_t *)(v24 + 4);
              do
              {
                v104 = *v103;
                v103 += 2;
                memcpy((void *)(*((_QWORD *)this + 183) + 4 * (*((_DWORD *)this + 360) * v102++)), (const void *)(v104 + 4 * v97), 4 * (v37 - v97));
              }
              while (v102 < *((unsigned int *)this + 361));
            }
          }
          *((_DWORD *)this + 362) += v37;
          v105 = *((_DWORD *)this + 364) + v37;
          *((_DWORD *)this + 364) = v105;
          v106 = *((_DWORD *)this + 360);
          v51 = v105 >= v106;
          v107 = v105 - v106;
          if (v51)
            *((_DWORD *)this + 364) = v107;
        }
      }
    }
    else
    {
      v37 = 0;
    }
    goto LABEL_135;
  }
  if (a4->mNumberBuffers == *((_DWORD *)v16 + 1))
  {
    v37 = 0;
    if ((_DWORD)v10)
    {
      v38 = *(_DWORD *)((char *)this + v114);
      v39 = v38 - *((_DWORD *)v16 + 2);
      if (v39)
      {
        v109 = v20 & v9;
        if (v39 >= v10)
          v37 = v10;
        else
          v37 = v38 - *((_DWORD *)v16 + 2);
        v40 = v38 - *((_DWORD *)v16 + 4);
        if (v40 >= v37)
          v41 = v37;
        else
          v41 = v40;
        if (a4->mNumberBuffers)
        {
          v42 = 0;
          p_mData = &a4->mBuffers[0].mData;
          do
          {
            v44 = *p_mData;
            p_mData += 2;
            memcpy((void *)(*((_QWORD *)v16 + 3)+ 4 * (*((_DWORD *)v16 + 4) + *(_DWORD *)((char *)this + v114) * v42++)), v44, 4 * v41);
            v45 = *((unsigned int *)v16 + 1);
          }
          while (v42 < v45);
          if (v37 > v40 && (_DWORD)v45)
          {
            v46 = 0;
            v47 = &a4->mBuffers[0].mData;
            do
            {
              v48 = (char *)*v47;
              v47 += 2;
              memcpy((void *)(*((_QWORD *)v16 + 3) + 4 * (*(_DWORD *)((char *)this + v114) * v46++)), &v48[4 * v41], 4 * (v37 - v41));
            }
            while (v46 < *((unsigned int *)v16 + 1));
          }
        }
        *((_DWORD *)v16 + 2) += v37;
        v49 = *((_DWORD *)v16 + 4) + v37;
        *((_DWORD *)v16 + 4) = v49;
        v50 = *(_DWORD *)((char *)this + v114);
        v51 = v49 >= v50;
        v52 = v49 - v50;
        if (v51)
          *((_DWORD *)v16 + 4) = v52;
        v22 = v109;
      }
    }
  }
  else
  {
    v37 = 0;
  }
  if (v22)
  {
    if (*a5 == *((_DWORD *)this + 361))
    {
      v37 = 0;
      if ((_DWORD)v10)
      {
        v80 = *((_DWORD *)this + 360);
        v81 = v80 - *((_DWORD *)this + 362);
        if (v81)
        {
          if (v81 >= v10)
            v37 = v10;
          else
            v37 = v80 - *((_DWORD *)this + 362);
          v82 = v80 - *((_DWORD *)this + 364);
          if (v82 >= v37)
            v83 = v37;
          else
            v83 = v82;
          if (*a5)
          {
            v84 = 0;
            v85 = (const void **)(a5 + 4);
            do
            {
              v86 = *v85;
              v85 += 2;
              memcpy((void *)(*((_QWORD *)this + 183)+ 4 * (*((_DWORD *)this + 364) + *((_DWORD *)this + 360) * v84++)), v86, 4 * v83);
              v87 = *((unsigned int *)this + 361);
            }
            while (v84 < v87);
            if (v37 > v82 && (_DWORD)v87)
            {
              v88 = 0;
              v89 = (uint64_t *)(a5 + 4);
              do
              {
                v90 = *v89;
                v89 += 2;
                memcpy((void *)(*((_QWORD *)this + 183) + 4 * (*((_DWORD *)this + 360) * v88++)), (const void *)(v90 + 4 * v83), 4 * (v37 - v83));
              }
              while (v88 < *((unsigned int *)this + 361));
            }
          }
          *((_DWORD *)this + 362) += v37;
          v91 = *((_DWORD *)this + 364) + v37;
          *((_DWORD *)this + 364) = v91;
          v92 = *((_DWORD *)this + 360);
          v51 = v91 >= v92;
          v93 = v91 - v92;
          if (v51)
            *((_DWORD *)this + 364) = v93;
        }
      }
    }
    else
    {
      v37 = 0;
    }
  }
LABEL_136:
  if (v37 < v10)
    VoiceProcessorV2::LogIOError((uint64_t)this, 25.001, (float)*((unsigned int *)this + 3112), (float)*((unsigned int *)this + 3113), 0.0, "srcandappendtoringbuff: overflow?!", a3, a4, a5, a6, a7, a8);
}

uint64_t VoiceProcessorV2::InstantiateAU(VoiceProcessorV2 *this, OSType a2, OSType a3, OpaqueAudioComponentInstance **a4, int a5)
{
  char *v10;
  OpaqueAudioComponent *Next;
  _QWORD *v12;
  NSObject *v13;
  int *v14;
  uint64_t v15;
  _QWORD *v16;
  NSObject *v17;
  int *v18;
  uint64_t v19;
  BOOL v21;
  OpaqueAudioComponentInstance *v22;
  _BOOL4 v23;
  uint64_t v24;
  AUProcessingBlockBase *v25;
  uint64_t v26;
  unsigned int v27;
  unint64_t v28;
  BOOL v29;
  uint64_t v30;
  int *v31;
  int v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  int *v38;
  int v39;
  int v40;
  uint64_t v41;
  const AUPBUnit *v42;
  const AUPBUnit *v43;
  unsigned int Index;
  unsigned int v45;
  _QWORD *v46;
  NSObject *v47;
  uint64_t v48;
  AudioComponentDescription inDesc;
  _DWORD v50[2];
  uint64_t v51;
  OpaqueAudioComponentInstance *v52;
  uint8_t buf[4];
  const char *v54;
  __int16 v55;
  int v56;
  __int16 v57;
  _DWORD v58[7];

  *(_QWORD *)&v58[5] = *MEMORY[0x1E0C80C00];
  v10 = (char *)this + 15897;
  if (*a4)
    VoiceProcessorV2::DisposeAU(this, a2, a3, a4, a5);
  inDesc.componentType = a2;
  inDesc.componentSubType = a3;
  *(_QWORD *)&inDesc.componentManufacturer = 1634758764;
  inDesc.componentFlagsMask = 0;
  Next = AudioComponentFindNext(0, &inDesc);
  if (!Next)
  {
    if (VPLogScope(void)::once != -1)
      dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
    v16 = (_QWORD *)VPLogScope(void)::scope;
    if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(1, VPLogScope(void)::scope, 0))
    {
      v17 = (*v16 ? *v16 : MEMORY[0x1E0C81028]);
      if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
      {
        CAX4CCString::CAX4CCString((CAX4CCString *)v50, a3);
        *(_DWORD *)buf = 136315650;
        v54 = "VoiceProcessor_v2.cpp";
        v55 = 1024;
        v56 = 2285;
        v57 = 2080;
        *(_QWORD *)v58 = v50;
        _os_log_impl(&dword_1B5ED0000, v17, OS_LOG_TYPE_ERROR, "%25s:%-5d  >vp> InstantiateAU: couldn't find component 'aufx'|%s AU", buf, 0x1Cu);
      }
    }
    v18 = (int *)*((_QWORD *)this + 1570);
    if (v18 && (*v10 || v10[1]))
    {
      if (VPLogScope(void)::once != -1)
        dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
      v19 = VPLogScope(void)::scope;
      CAX4CCString::CAX4CCString((CAX4CCString *)buf, a3);
      CALegacyLog::log(v18, 1, v19, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/VoiceProcessor_v2.cpp", 2285, "InstantiateAU", "InstantiateAU: couldn't find component 'aufx'|%s AU");
    }
    return 4294957891;
  }
  if (AudioComponentInstanceNew(Next, a4))
  {
    if (VPLogScope(void)::once != -1)
      dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
    v12 = (_QWORD *)VPLogScope(void)::scope;
    if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(1, VPLogScope(void)::scope, 0))
    {
      v13 = (*v12 ? *v12 : MEMORY[0x1E0C81028]);
      if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
      {
        CAX4CCString::CAX4CCString((CAX4CCString *)v50, a3);
        *(_DWORD *)buf = 136315650;
        v54 = "VoiceProcessor_v2.cpp";
        v55 = 1024;
        v56 = 2272;
        v57 = 2080;
        *(_QWORD *)v58 = v50;
        _os_log_impl(&dword_1B5ED0000, v13, OS_LOG_TYPE_ERROR, "%25s:%-5d  >vp> InstantiateAU: couldn't instantiate 'aufx'|%s AU", buf, 0x1Cu);
      }
    }
    v14 = (int *)*((_QWORD *)this + 1570);
    if (v14 && (*v10 || v10[1]))
    {
      if (VPLogScope(void)::once != -1)
        dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
      v15 = VPLogScope(void)::scope;
      CAX4CCString::CAX4CCString((CAX4CCString *)buf, a3);
      CALegacyLog::log(v14, 1, v15, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/VoiceProcessor_v2.cpp", 2272, "InstantiateAU", "InstantiateAU: couldn't instantiate 'aufx'|%s AU");
    }
    return 4294957891;
  }
  if (*v10)
    v21 = a5 == 0;
  else
    v21 = 1;
  if (!v21)
  {
    v50[0] = a2;
    v50[1] = a3;
    v22 = *a4;
    v51 = 1634758764;
    v52 = v22;
    v23 = VoiceProcessorV2::AUIsInDownLinkProcessingChain(this, (const AUPBUnit *)v50);
    v24 = 12512;
    if (v23)
      v24 = 12520;
    v25 = *(AUProcessingBlockBase **)((char *)this + v24);
    if (a3 == 1635284580)
    {
      if (v22 == *((OpaqueAudioComponentInstance **)this + 1551))
      {
        v35 = 0;
        v27 = 0;
        do
        {
          if (*(_QWORD *)((char *)this + v35 + 3496))
            ++v27;
          v35 += 8;
        }
        while (v35 != 496);
        goto LABEL_93;
      }
    }
    else if (a3 == 1635284597 && v22 == *((OpaqueAudioComponentInstance **)this + 1550))
    {
      v26 = 0;
      v27 = 0;
      do
      {
        if (*(_QWORD *)((char *)this + v26 + 2776))
          ++v27;
        v26 += 8;
      }
      while (v26 != 568);
LABEL_93:
      v42 = (const AUPBUnit *)*((_QWORD *)v25 + 3);
      v43 = (const AUPBUnit *)*((_QWORD *)v25 + 4);
      Index = VoiceProcessorV2::VPAUProcessingBlock::FindIndex(v42, v43, (uint64_t)v50);
      if ((v27 & 0x80000000) == 0)
      {
        v45 = Index;
        if (Index != v27)
        {
          if ((Index & 0x80000000) != 0)
          {
            if (0xAAAAAAAAAAAAAAABLL * ((v43 - v42) >> 3) >= v27)
              v48 = v27;
            else
              v48 = 0xAAAAAAAAAAAAAAABLL * ((v43 - v42) >> 3);
            AUProcessingBlockBase::InsertAUAtIndex(v25, v48, (const AUPBUnit *)v50);
            AUPBRegisterAU();
            *(_DWORD *)buf = 1635087726;
            AUPBPropertiesChanged();
          }
          else if (Index > v27)
          {
            if (VPLogScope(void)::once != -1)
              dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
            v46 = (_QWORD *)VPLogScope(void)::scope;
            if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(5, VPLogScope(void)::scope, 0))
            {
              v47 = (*v46 ? *v46 : MEMORY[0x1E0C81028]);
              if (os_log_type_enabled(v47, OS_LOG_TYPE_DEBUG))
              {
                *(_DWORD *)buf = 136315906;
                v54 = "vpDebug_TuningSupport.cpp";
                v55 = 1024;
                v56 = 133;
                v57 = 1024;
                v58[0] = v27;
                LOWORD(v58[1]) = 1024;
                *(_DWORD *)((char *)&v58[1] + 2) = v45;
                _os_log_impl(&dword_1B5ED0000, v47, OS_LOG_TYPE_DEBUG, "%25s:%-5d VoiceProcessorV2::VPAUProcessingBlock::InsertAUIntoProcessingBlock index proposed=%d, current=%d !?", buf, 0x1Eu);
              }
            }
          }
        }
      }
      return 0;
    }
    v28 = 0;
    v29 = 0;
    while (1)
    {
      v30 = 0;
      v31 = VoiceProcessorV2::VPUplinkIndexToSubTypeArray;
      while (1)
      {
        v32 = *v31;
        v31 += 18;
        if (v32 == (_DWORD)v28)
          break;
        if (++v30 == 71)
        {
          v33 = 0;
          goto LABEL_59;
        }
      }
      v33 = VoiceProcessorV2::VPUplinkIndexToSubTypeArray[18 * v30 + 1];
LABEL_59:
      if (v33 == a3 && v22 == *((OpaqueAudioComponentInstance **)this + v28 + 347))
        break;
      v29 = v28++ > 0x45;
      if (v28 == 71)
        goto LABEL_76;
    }
    if ((_DWORD)v28)
    {
      v34 = 0;
      v27 = 0;
      do
      {
        if (*((_QWORD *)this + v34 + 347))
          ++v27;
        ++v34;
      }
      while (v28 != v34);
    }
    else
    {
      v27 = 0;
    }
    if (!v29)
      goto LABEL_93;
LABEL_76:
    v36 = 0;
    while (1)
    {
      v37 = 0;
      v38 = VoiceProcessorV2::VPDownlinkIndexToSubTypeArray;
      while (1)
      {
        v39 = *v38;
        v38 += 18;
        if (v39 == (_DWORD)v36)
          break;
        if (++v37 == 62)
        {
          v40 = 0;
          goto LABEL_82;
        }
      }
      v40 = VoiceProcessorV2::VPDownlinkIndexToSubTypeArray[18 * v37 + 1];
LABEL_82:
      if (v40 == a3 && v22 == *((OpaqueAudioComponentInstance **)this + v36 + 437))
        break;
      if (++v36 == 62)
      {
        v27 = -1;
        goto LABEL_93;
      }
    }
    if ((_DWORD)v36)
    {
      v41 = 0;
      v27 = 0;
      do
      {
        if (*((_QWORD *)this + v41 + 437))
          ++v27;
        ++v41;
      }
      while (v36 != v41);
    }
    else
    {
      v27 = 0;
    }
    goto LABEL_93;
  }
  return 0;
}

void VoiceProcessorV2::SignalParamSwitchMix(AudioUnit *this, int a2, int a3, _BYTE *a4, BOOL *a5)
{
  unsigned int v8;
  unsigned int v9;
  AudioUnit v10;
  int v11;
  vDSP_Length v12;
  AudioUnit v13;
  const float *v14;
  const float *v15;
  AudioUnit v16;
  const float *v17;
  const float *v18;
  float *v19;
  float *v20;
  float *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  float v26;
  float v27;
  float v28;
  float v29;
  float v30;
  AudioUnit v31;
  const float *v32;
  const float *v33;
  float *v34;
  float *v35;
  AudioUnitParameterValue outValue;
  uint64_t v37;
  _QWORD v38[2];

  v38[1] = *MEMORY[0x1E0C80C00];
  outValue = 2.0;
  if (a3)
  {
    AudioUnitGetParameter(this[376], 0x1Cu, 0, 0, &outValue);
    v8 = outValue;
    if (outValue == 2)
      v9 = 0;
    else
      v9 = outValue;
  }
  else
  {
    v8 = 0;
    v9 = 0;
  }
  if (!a2)
    v8 = v9;
  v10 = this[582];
  if ((v10 & 0x20000000) != 0 && (*((_BYTE *)this + 4675) & 0x20) != 0 && this[376]
    || (v10 & 0x40000000) != 0 && (*((_BYTE *)this + 4675) & 0x40) != 0 && this[377])
  {
    if (v8 == 2)
    {
      memcpy(*((void **)this[428] + 2), *((const void **)this[429] + 2), *((unsigned int *)this + 1071));
      v12 = *((unsigned int *)this + 127);
      memcpy(*((void **)this[434] + 2 * *((unsigned int *)this + 1040) + 2), *((const void **)this[504] + 2), 4 * (2 * v12));
      memcpy(*((void **)this[434] + 2 * *((unsigned int *)this + 1041) + 2), *((const void **)this[504] + 4), 4 * (2 * *((_DWORD *)this + 127)));
      v13 = this[434];
      v14 = (const float *)*((_QWORD *)v13 + 2);
      v15 = (const float *)*((_QWORD *)v13 + 4);
      v16 = this[537];
      v17 = (const float *)*((_QWORD *)v16 + 2);
      v18 = (const float *)*((_QWORD *)v16 + 4);
      v19 = (float *)*((_QWORD *)this[504] + 2);
      v20 = &v19[v12];
      v21 = (float *)*((_QWORD *)this[435] + 2);
      vDSP_vmul(v14, 1, v17, 1, v19, 1, (2 * v12));
      vDSP_vmul(v15, 1, v18, 1, v21, 1, (2 * v12));
      vDSP_vadd(v21, 1, v19, 1, v19, 1, (2 * v12));
      vDSP_vsub(v20, 1, v19, 1, v19, 1, v12);
      vDSP_vmul(v14, 1, &v17[v12], 1, v21, 1, v12);
      vDSP_vmul(&v14[v12], 1, v17, 1, &v21[v12], 1, v12);
      vDSP_vadd(v21, 1, &v21[v12], 1, v20, 1, v12);
      vDSP_vmul(v15, 1, &v18[v12], 1, v21, 1, v12);
      vDSP_vmul(&v15[v12], 1, v18, 1, &v21[v12], 1, v12);
      vDSP_vadd(v21, 1, &v21[v12], 1, v21, 1, v12);
      vDSP_vadd(v21, 1, v20, 1, v20, 1, v12);
      v37 = 0;
      v38[0] = 0;
      v22 = *((unsigned int *)this + 1042);
      *((_DWORD *)v38 + v22) = *((_DWORD *)this + 1046);
      *((_DWORD *)&v38[-1] + v22) = *((_DWORD *)this + 1050);
      v23 = *((unsigned int *)this + 1043);
      *((_DWORD *)v38 + v23) = *((_DWORD *)this + 1047);
      *((_DWORD *)&v38[-1] + v23) = *((_DWORD *)this + 1051);
      v24 = *((unsigned int *)this + 1072);
      v25 = v24 + v12;
      v26 = (float)(v17[v24] * v17[v24]) + (float)(v17[v25] * v17[v25]);
      v27 = (float)(v18[v24] * v18[v24]) + (float)(v18[v25] * v18[v25]);
      if ((float)(v26 + v27) <= 0.0)
      {
        v29 = 0.0;
        v30 = 1.0;
      }
      else
      {
        v28 = 1.0 / (float)(v26 + v27);
        v29 = v27 * v28;
        v30 = v26 * v28;
      }
      *((float *)this + 1046) = (float)(v29 * *((float *)v38 + 1)) + (float)(v30 * *(float *)v38);
      *((float *)this + 1050) = (float)(v29 * *((float *)&v37 + 1)) + (float)(v30 * *(float *)&v37);
      *((float *)this + 1054) = *((float *)this + 1054) * *((float *)this + 1055);
      *((float *)this + 1058) = (float)(v29 * *((float *)this + 1059)) + (float)(v30 * *((float *)this + 1058));
      *((float *)this + 1062) = (float)(v29 * *((float *)this + 1063)) + (float)(v30 * *((float *)this + 1062));
      if ((*((_BYTE *)this + 4659) & 4) != 0 && (*((_BYTE *)this + 4675) & 4) != 0 && this[373])
      {
        memcpy(*((void **)this[434] + 2 * *((unsigned int *)this + 1040) + 2), *((const void **)this[507] + 2), 4 * (2 * *((_DWORD *)this + 127)));
        memcpy(*((void **)this[434] + 2 * *((unsigned int *)this + 1041) + 2), *((const void **)this[508] + 2), 4 * (2 * *((_DWORD *)this + 127)));
        v31 = this[434];
        v32 = (const float *)*((_QWORD *)v31 + 2);
        v33 = (const float *)*((_QWORD *)v31 + 4);
        v34 = (float *)*((_QWORD *)this[507] + 2);
        v35 = (float *)*((_QWORD *)this[435] + 2);
        vDSP_vmul(v32, 1, v17, 1, v34, 1, (2 * v12));
        vDSP_vmul(v33, 1, v18, 1, v35, 1, (2 * v12));
        vDSP_vadd(v35, 1, v34, 1, v34, 1, (2 * v12));
        vDSP_vsub(&v34[v12], 1, v34, 1, v34, 1, v12);
        vDSP_vmul(v32, 1, &v17[v12], 1, v35, 1, v12);
        vDSP_vmul(&v32[v12], 1, v17, 1, &v35[v12], 1, v12);
        vDSP_vadd(v35, 1, &v35[v12], 1, &v34[v12], 1, v12);
        vDSP_vmul(v33, 1, &v18[v12], 1, v35, 1, v12);
        vDSP_vmul(&v33[v12], 1, v18, 1, &v35[v12], 1, v12);
        vDSP_vadd(v35, 1, &v35[v12], 1, v35, 1, v12);
        vDSP_vadd(v35, 1, &v34[v12], 1, &v34[v12], 1, v12);
      }
    }
    else
    {
      if (v8 == 1)
      {
        v11 = *((_DWORD *)this + 1045);
      }
      else
      {
        if (v8)
          return;
        v11 = *((_DWORD *)this + 1044);
      }
      if (v11 == 1)
      {
        memcpy(*((void **)this[428] + 2), *((const void **)this[505] + 2), *((unsigned int *)this + 1071));
        memcpy(*((void **)this[504] + 2), *((const void **)this[504] + 4), *((unsigned int *)this + 1071));
        if ((*((_BYTE *)this + 4659) & 4) != 0 && (*((_BYTE *)this + 4675) & 4) != 0)
        {
          if (this[373])
            memcpy(*((void **)this[507] + 2), *((const void **)this[508] + 2), *((unsigned int *)this + 1071));
        }
        *((_DWORD *)this + 1046) = *((_DWORD *)this + 1047);
        *((_DWORD *)this + 1050) = *((_DWORD *)this + 1051);
        *((_DWORD *)this + 1054) = *((_DWORD *)this + 1055);
        *((_DWORD *)this + 1058) = *((_DWORD *)this + 1059);
        *((_DWORD *)this + 1062) = *((_DWORD *)this + 1063);
        *a4 = 1;
      }
    }
  }
}

BOOL VoiceProcessorV2::VPUseAUInProcess(VoiceProcessorV2 *this, unsigned int a2, int a3)
{
  uint64_t v3;
  unint64_t v4;
  char *v5;

  if (!a3)
  {
    if (a2 < 0x3E)
    {
      if ((*((_QWORD *)this + 1104) & (1 << a2)) == 0
        || a2 - 27 < 0x23 && ((0x500000007uLL >> (a2 - 27)) & 1) != 0)
      {
        return 0;
      }
      if ((*((_QWORD *)this + 1105) & (1 << a2)) != 0
        || (v3 = *((unsigned __int8 *)this + 472), *((_BYTE *)this + 472))
        && (v3 = 0, a2 <= 0x3B)
        && ((1 << a2) & 0x800000028000000) != 0)
      {
        v5 = (char *)this + 8 * a2 + 3496;
        return *(_QWORD *)v5 != 0;
      }
      return v3;
    }
LABEL_19:
    std::__throw_out_of_range[abi:ne180100]("bitset test argument out of range");
  }
  if (a2 >= 0x47)
    goto LABEL_19;
  v3 = 0;
  if (a2 != 62)
  {
    v4 = (unint64_t)a2 >> 6;
    if ((*((_QWORD *)this + v4 + 582) & (1 << a2)) != 0)
    {
      if ((*((_QWORD *)this + v4 + 584) & (1 << a2)) != 0)
      {
        v5 = (char *)this + 8 * a2 + 2776;
        return *(_QWORD *)v5 != 0;
      }
      return 0;
    }
  }
  return v3;
}

float VoiceProcessorV2::TimeAlignedReferenceAndOtherHandling(VoiceProcessorV2 *this, int a2, int a3, int a4, char a5)
{
  char v6;
  float result;
  float *v9;
  VPTimeFreqConverter *v10;
  DSPSplitComplex v11;

  v6 = a2;
  result = *((float *)this + 1054);
  if (result != 0.0)
    goto LABEL_11;
  if (!a3 || !a4 || !a2)
  {
    if (!a3)
      goto LABEL_9;
    goto LABEL_8;
  }
  if ((a5 & 1) != 0)
LABEL_8:
    memcpy(*(void **)(*((_QWORD *)this + 423) + 16), *(const void **)(*((_QWORD *)this + 424) + 16), 4 * *((unsigned int *)this + 127));
LABEL_9:
  v9 = (float *)(*(_QWORD *)(*((_QWORD *)this + 511) + 16) + 4 * *((unsigned int *)this + 127));
  v11.realp = *(float **)(*((_QWORD *)this + 511) + 16);
  v11.imagp = v9;
  v10 = (VPTimeFreqConverter *)*((_QWORD *)this + 519);
  if (v10)
    VPTimeFreqConverter::Analyze(v10, *(const float **)(*((_QWORD *)this + 423) + 16), &v11);
LABEL_11:
  if (a3)
  {
    if ((v6 & 1) == 0)
    {
      result = *((float *)this + 1055);
      *((float *)this + 1054) = result;
    }
  }
  return result;
}

uint64_t VoiceProcessorV2::ApplyBeamDirection(VoiceProcessorV2 *this)
{
  OpaqueAudioComponentInstance *v2;
  uint64_t result;

  AUPropAndParamHelper::AddItemToAUParamList((uint64_t)this + 5408, 0, (float)*((unsigned int *)this + 684));
  if ((*((_BYTE *)this + 4659) & 0x40) == 0)
    return 0;
  v2 = (OpaqueAudioComponentInstance *)*((_QWORD *)this + 377);
  if (!v2)
    return 0;
  result = AudioUnitSetParameter(v2, 0, 0, 0, (float)*((unsigned int *)this + 684), 0);
  if (!(_DWORD)result)
    return 0;
  return result;
}

void VoiceProcessorV2::ApplyCustomTelephonyDSPOverrides(VoiceProcessorV2 *this, CFDictionaryRef theDict, int a3)
{
  const __CFNumber *Value;
  const __CFNumber *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  const __CFNumber *v12;
  const __CFNumber *v13;
  char *v14;
  float v15;
  int v16;
  const __CFArray *v17;
  const __CFArray *v18;
  unsigned int Count;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  CFIndex v24;
  char *v25;
  const __CFDictionary *ValueAtIndex;
  const __CFDictionary *v27;
  const __CFNumber *v28;
  const __CFNumber *v29;
  const __CFNumber *v30;
  const __CFNumber *v31;
  const __CFNumber *v32;
  const __CFNumber *v33;
  const void *v34;
  const __CFData *v35;
  const __CFData *v36;
  CFIndex Length;
  UInt8 *BytePtr;
  float valuePtr;

  if (CFDictionaryGetCount(theDict))
  {
    if (a3)
    {
      if (CFDictionaryContainsKey(theDict, CFSTR("noise suppression"))
        && CFDictionaryGetValue(theDict, CFSTR("noise suppression")))
      {
        *((_QWORD *)this + 583) |= 0x10uLL;
      }
      if (CFDictionaryContainsKey(theDict, CFSTR("agc")))
      {
        Value = (const __CFNumber *)CFDictionaryGetValue(theDict, CFSTR("agc"));
        if (Value)
        {
          v7 = Value;
          CFRetain(Value);
          valuePtr = 0.0;
          CFNumberGetValue(v7, kCFNumberIntType, &valuePtr);
          CFRelease(v7);
          v8 = *((_QWORD *)this + 583);
          v9 = v8 & 0xFFFFFFFFFFFFFFFDLL;
          v10 = v8 | 0x12;
          if (LODWORD(valuePtr) == 1)
            v11 = v10;
          else
            v11 = v9;
          *((_QWORD *)this + 583) = v11;
        }
      }
    }
    if (CFDictionaryContainsKey(theDict, CFSTR("gain")))
    {
      v12 = (const __CFNumber *)CFDictionaryGetValue(theDict, CFSTR("gain"));
      if (v12)
      {
        v13 = v12;
        CFRetain(v12);
        valuePtr = 0.0;
        CFNumberGetValue(v13, kCFNumberFloat32Type, &valuePtr);
        CFRelease(v13);
        if (a3)
        {
          *((int8x16_t *)this + 291) = vorrq_s8(*((int8x16_t *)this + 291), (int8x16_t)xmmword_1B66A0610);
          v14 = (char *)this + 6984;
          v15 = valuePtr;
          v16 = 1;
        }
        else
        {
          *((_QWORD *)this + 1104) |= 0x1800000000000000uLL;
          AUPropAndParamHelper::AddItemToAUParamList((uint64_t)this + 10856, 0, valuePtr);
          v15 = valuePtr;
          v14 = (char *)this + 10856;
          v16 = 8;
        }
        AUPropAndParamHelper::AddItemToAUParamList((uint64_t)v14, v16, v15);
      }
    }
    if (CFDictionaryContainsKey(theDict, CFSTR("eq")))
    {
      v17 = (const __CFArray *)CFDictionaryGetValue(theDict, CFSTR("eq"));
      if (v17)
      {
        v18 = v17;
        CFRetain(v17);
        Count = CFArrayGetCount(v18);
        v20 = 9640;
        if (a3)
        {
          v20 = 6200;
          *((_QWORD *)this + 582) |= 0x8000000000000000;
          v21 = (char *)this + 4664;
          v22 = 16;
        }
        else
        {
          v21 = (char *)this + 8832;
          v22 = 0x1000000200000000;
        }
        *(_QWORD *)v21 |= v22;
        if (Count >= 0xA)
          v23 = 10;
        else
          v23 = Count;
        if ((_DWORD)v23)
        {
          v24 = 0;
          v25 = (char *)this + v20;
          do
          {
            ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(v18, v24);
            if (ValueAtIndex)
            {
              v27 = ValueAtIndex;
              CFRetain(ValueAtIndex);
              if (CFDictionaryContainsKey(v27, CFSTR("AUNBandEQ_FilterType"))
                && CFDictionaryContainsKey(v27, CFSTR("AUNBandEQ_FilterFrequency")))
              {
                AUPropAndParamHelper::AddItemToAUParamList((uint64_t)v25, v24 + 1000, 0.0);
                v28 = (const __CFNumber *)CFDictionaryGetValue(v27, CFSTR("AUNBandEQ_FilterType"));
                if (v28)
                {
                  v29 = v28;
                  CFRetain(v28);
                  valuePtr = 0.0;
                  CFNumberGetValue(v29, kCFNumberIntType, &valuePtr);
                  CFRelease(v29);
                  AUPropAndParamHelper::AddItemToAUParamList((uint64_t)v25, v24 + 2000, (float)LODWORD(valuePtr));
                }
                v30 = (const __CFNumber *)CFDictionaryGetValue(v27, CFSTR("AUNBandEQ_FilterFrequency"));
                if (v30)
                {
                  v31 = v30;
                  CFRetain(v30);
                  valuePtr = 0.0;
                  CFNumberGetValue(v31, kCFNumberFloat32Type, &valuePtr);
                  CFRelease(v31);
                  AUPropAndParamHelper::AddItemToAUParamList((uint64_t)v25, v24 + 3000, valuePtr);
                }
              }
              if (CFDictionaryContainsKey(v27, CFSTR("AUNBandEQ_FilterGain")))
              {
                v32 = (const __CFNumber *)CFDictionaryGetValue(v27, CFSTR("AUNBandEQ_FilterGain"));
                if (v32)
                {
                  v33 = v32;
                  CFRetain(v32);
                  valuePtr = 0.0;
                  CFNumberGetValue(v33, kCFNumberFloat32Type, &valuePtr);
                  CFRelease(v33);
                  AUPropAndParamHelper::AddItemToAUParamList((uint64_t)v25, v24 + 4000, valuePtr);
                }
              }
              if (CFDictionaryContainsKey(v27, CFSTR("AUNBandEQ_FilterBandwidth")))
              {
                v34 = CFDictionaryGetValue(v27, CFSTR("AUNBandEQ_FilterBandwidth"));
                CFRetain(v34);
                valuePtr = 0.0;
                CFNumberGetValue((CFNumberRef)v34, kCFNumberFloat32Type, &valuePtr);
                CFRelease(v34);
                AUPropAndParamHelper::AddItemToAUParamList((uint64_t)v25, v24 + 5000, valuePtr);
              }
              CFRelease(v27);
            }
            ++v24;
          }
          while (v23 != v24);
        }
        CFRelease(v18);
      }
    }
    if (CFDictionaryContainsKey(theDict, CFSTR("speaker calibration")) && *((_DWORD *)this + 1128) == 1)
    {
      v35 = (const __CFData *)CFDictionaryGetValue(theDict, CFSTR("speaker calibration"));
      if (v35)
      {
        v36 = v35;
        CFRetain(v35);
        Length = CFDataGetLength(v36);
        BytePtr = (UInt8 *)CFDataGetBytePtr(v36);
        AUPropAndParamHelper::AddItemToAUPropsList((AUPropertyItem **)this + 1531, 0xFA01u, 0, 0, Length, BytePtr, 1);
        CFRelease(v36);
      }
    }
  }
}

void VoiceProcessorV2::CreateSRC(VoiceProcessorV2 *this, double a2, double a3, VoiceProcessorV2 *a4, int a5, uint64_t a6, unsigned __int8 *a7)
{
  NSObject *v12;
  int v13;
  NSObject *v14;
  _QWORD *v15;
  uint64_t v16;
  float v17[2];
  __CFDictionary *v18;
  uint8_t buf[8];
  __int16 v20;
  int v21;
  __int16 v22;
  double v23;
  __int16 v24;
  double v25;
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  LOBYTE(v17[0]) = (*((_DWORD *)a4 + 18) - 18) < 4;
  VoiceProcessorV2::ReadAndApplyDefaultsOverride(a4, CFSTR("vp_enable_ramstad_src"), 0, v17, a7);
  if (!LOBYTE(v17[0]))
  {
    if ((a5 - 3) >= 0xFFFFFFFE)
    {
      v13 = *((_DWORD *)a4 + 1112);
      CA::AudioSampleRateConverterBuilder::AudioSampleRateConverterBuilder((uint64_t)v17 + 1, 0);
      CA::AudioSampleRateConverterBuilder::SetAttribute<double>(v18, (const void *)*MEMORY[0x1E0CFFD50], a2);
      CA::AudioSampleRateConverterBuilder::SetAttribute<double>(v18, (const void *)*MEMORY[0x1E0CFFD60], a3);
      CA::AudioSampleRateConverterBuilder::SetAttribute<unsigned int>(v18, (const void *)*MEMORY[0x1E0CFFD58], a5);
      CA::AudioSampleRateConverterBuilder::SetAttribute<unsigned int>(v18, (const void *)*MEMORY[0x1E0CFFD40], 1852797549);
      CA::AudioSampleRateConverterBuilder::SetAttribute<unsigned int>(v18, (const void *)*MEMORY[0x1E0CFFD68], 2);
      CA::AudioSampleRateConverterBuilder::SetAttribute<unsigned int>(v18, (const void *)*MEMORY[0x1E0CFFD70], v13);
      if (VPLogScope(void)::once != -1)
        dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
      v14 = *(NSObject **)VPLogScope(void)::scope;
      if (os_log_type_enabled(*(os_log_t *)VPLogScope(void)::scope, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 67109888;
        *(_DWORD *)&buf[4] = v13;
        v20 = 1024;
        v21 = a5;
        v22 = 2048;
        v23 = a2;
        v24 = 2048;
        v25 = a3;
        _os_log_debug_impl(&dword_1B5ED0000, v14, OS_LOG_TYPE_DEBUG, "creating 'Resampler2' sample rate converter Q%u, %u ch, %.2fHz to %.2fHz", buf, 0x22u);
      }
      goto LABEL_14;
    }
LABEL_9:
    *(_QWORD *)this = 0;
    return;
  }
  if ((a5 - 3) <= 0xFFFFFFFD)
    goto LABEL_9;
  CA::AudioSampleRateConverterBuilder::AudioSampleRateConverterBuilder((uint64_t)v17 + 1, 1);
  CA::AudioSampleRateConverterBuilder::SetAttribute<double>(v18, (const void *)*MEMORY[0x1E0CFFD20], a2);
  CA::AudioSampleRateConverterBuilder::SetAttribute<double>(v18, (const void *)*MEMORY[0x1E0CFFD30], a3);
  CA::AudioSampleRateConverterBuilder::SetAttribute<unsigned int>(v18, (const void *)*MEMORY[0x1E0CFFD28], a5);
  CA::AudioSampleRateConverterBuilder::SetAttribute<unsigned int>(v18, (const void *)*MEMORY[0x1E0CFFD38], 33);
  if (VPLogScope(void)::once != -1)
    dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
  v12 = *(NSObject **)VPLogScope(void)::scope;
  if (os_log_type_enabled(*(os_log_t *)VPLogScope(void)::scope, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 67109888;
    *(_DWORD *)&buf[4] = 33;
    v20 = 1024;
    v21 = a5;
    v22 = 2048;
    v23 = a2;
    v24 = 2048;
    v25 = a3;
    _os_log_debug_impl(&dword_1B5ED0000, v12, OS_LOG_TYPE_DEBUG, "creating 'Ramstad' sample rate converter Q%u, %u ch, %.2fHz to %.2fHz", buf, 0x22u);
  }
LABEL_14:
  CA::AudioSampleRateConverterBuilder::Build((CA::AudioSampleRateConverterBuilder *)buf);
  caulk::expected<long long,int>::value((uint64_t)buf);
  v15 = (_QWORD *)operator new();
  v16 = *(_QWORD *)buf;
  *(_QWORD *)buf = 0;
  *v15 = v16;
  *(_QWORD *)this = v15;
  AudioSampleRateConverterDispose();
  caulk::__expected_detail::base<CA::AudioSampleRateConverter,int>::~base((uint64_t)buf);
  CA::AudioSampleRateConverterBuilder::~AudioSampleRateConverterBuilder((CA::AudioSampleRateConverterBuilder *)((char *)v17 + 1));
}

void sub_1B63D64E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

_QWORD *std::__function::__func<void CASmartPreferences::AddHandler<double>(__CFString const*,__CFString const*,double (*)(void const*,BOOL &),std::function<void ()(double)>)::{lambda(void const*)#1},std::allocator<void CASmartPreferences::AddHandler<double>(__CFString const*,__CFString const*,double (*)(void const*,BOOL &),std::function<void ()(double)>)::{lambda(void const*)#1}>,BOOL ()(void const*)>::~__func(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;

  *a1 = &off_1E69DA718;
  v2 = a1 + 2;
  v3 = (_QWORD *)a1[5];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return a1;
}

void std::__function::__func<void CASmartPreferences::AddHandler<double>(__CFString const*,__CFString const*,double (*)(void const*,BOOL &),std::function<void ()(double)>)::{lambda(void const*)#1},std::allocator<void CASmartPreferences::AddHandler<double>(__CFString const*,__CFString const*,double (*)(void const*,BOOL &),std::function<void ()(double)>)::{lambda(void const*)#1}>,BOOL ()(void const*)>::~__func(_QWORD *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;

  *a1 = &off_1E69DA718;
  v1 = a1 + 2;
  v2 = (_QWORD *)a1[5];
  if (v2 == v1)
  {
    v3 = 4;
    v2 = v1;
  }
  else
  {
    if (!v2)
      goto LABEL_6;
    v3 = 5;
  }
  (*(void (**)(void))(*v2 + 8 * v3))();
LABEL_6:
  JUMPOUT(0x1BCC95CECLL);
}

_QWORD *std::__function::__func<void CASmartPreferences::AddHandler<double>(__CFString const*,__CFString const*,double (*)(void const*,BOOL &),std::function<void ()(double)>)::{lambda(void const*)#1},std::allocator<void CASmartPreferences::AddHandler<double>(__CFString const*,__CFString const*,double (*)(void const*,BOOL &),std::function<void ()(double)>)::{lambda(void const*)#1}>,BOOL ()(void const*)>::__clone(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;

  v2 = operator new(0x30uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *v2 = &off_1E69DA718;
  v2[1] = v3;
  std::__function::__value_func<void ()(std::vector<long long> const&)>::__value_func[abi:ne180100]((uint64_t)(v2 + 2), a1 + 16);
  return v2;
}

void sub_1B63D6644(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<void CASmartPreferences::AddHandler<double>(__CFString const*,__CFString const*,double (*)(void const*,BOOL &),std::function<void ()(double)>)::{lambda(void const*)#1},std::allocator<void CASmartPreferences::AddHandler<double>(__CFString const*,__CFString const*,double (*)(void const*,BOOL &),std::function<void ()(double)>)::{lambda(void const*)#1}>,BOOL ()(void const*)>::__clone(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  *a2 = &off_1E69DA718;
  a2[1] = v2;
  return std::__function::__value_func<void ()(std::vector<long long> const&)>::__value_func[abi:ne180100]((uint64_t)(a2 + 2), a1 + 16);
}

_QWORD *std::__function::__func<void CASmartPreferences::AddHandler<double>(__CFString const*,__CFString const*,double (*)(void const*,BOOL &),std::function<void ()(double)>)::{lambda(void const*)#1},std::allocator<void CASmartPreferences::AddHandler<double>(__CFString const*,__CFString const*,double (*)(void const*,BOOL &),std::function<void ()(double)>)::{lambda(void const*)#1}>,BOOL ()(void const*)>::destroy(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *result;
  uint64_t v3;

  v1 = (_QWORD *)(a1 + 16);
  result = *(_QWORD **)(a1 + 40);
  if (result == v1)
  {
    v3 = 4;
    result = v1;
  }
  else
  {
    if (!result)
      return result;
    v3 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v3))();
}

void std::__function::__func<void CASmartPreferences::AddHandler<double>(__CFString const*,__CFString const*,double (*)(void const*,BOOL &),std::function<void ()(double)>)::{lambda(void const*)#1},std::allocator<void CASmartPreferences::AddHandler<double>(__CFString const*,__CFString const*,double (*)(void const*,BOOL &),std::function<void ()(double)>)::{lambda(void const*)#1}>,BOOL ()(void const*)>::destroy_deallocate(char *__p)
{
  char *v2;
  char *v3;
  uint64_t v4;

  v2 = __p + 16;
  v3 = (char *)*((_QWORD *)__p + 5);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*(_QWORD *)v3 + 8 * v4))();
  }
  operator delete(__p);
}

BOOL std::__function::__func<void CASmartPreferences::AddHandler<double>(__CFString const*,__CFString const*,double (*)(void const*,BOOL &),std::function<void ()(double)>)::{lambda(void const*)#1},std::allocator<void CASmartPreferences::AddHandler<double>(__CFString const*,__CFString const*,double (*)(void const*,BOOL &),std::function<void ()(double)>)::{lambda(void const*)#1}>,BOOL ()(void const*)>::operator()(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v7;
  uint64_t v8;

  v3 = *a2;
  v7 = 0;
  (*(void (**)(uint64_t, char *))(a1 + 8))(v3, &v7);
  if (!v7)
    return 0;
  v8 = v4;
  v5 = *(_QWORD *)(a1 + 40);
  if (!v5)
    std::__throw_bad_function_call[abi:ne180100]();
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v5 + 48))(v5, &v8);
  return v7 != 0;
}

void std::__function::__func<CASmartPreferences::Read(__CFString const*,__CFString const*,float &)::{lambda(double)#1},std::allocator<CASmartPreferences::Read(__CFString const*,__CFString const*,float &)::{lambda(double)#1}>,void ()(double)>::~__func()
{
  JUMPOUT(0x1BCC95CECLL);
}

_QWORD *std::__function::__func<CASmartPreferences::Read(__CFString const*,__CFString const*,float &)::{lambda(double)#1},std::allocator<CASmartPreferences::Read(__CFString const*,__CFString const*,float &)::{lambda(double)#1}>,void ()(double)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E69DA760;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<CASmartPreferences::Read(__CFString const*,__CFString const*,float &)::{lambda(double)#1},std::allocator<CASmartPreferences::Read(__CFString const*,__CFString const*,float &)::{lambda(double)#1}>,void ()(double)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E69DA760;
  a2[1] = v2;
  return result;
}

float std::__function::__func<CASmartPreferences::Read(__CFString const*,__CFString const*,float &)::{lambda(double)#1},std::allocator<CASmartPreferences::Read(__CFString const*,__CFString const*,float &)::{lambda(double)#1}>,void ()(double)>::operator()(uint64_t a1, double *a2)
{
  float result;

  result = *a2;
  **(float **)(a1 + 8) = result;
  return result;
}

void VPAUBusFormats::AllocateForFormats(VPAUBusFormats *this, unsigned int a2, unsigned int a3)
{
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  std::bad_alloc *exception;
  std::bad_alloc *v13;

  v6 = (void *)*((_QWORD *)this + 1);
  if (v6)
  {
    free(v6);
    *((_QWORD *)this + 1) = 0;
  }
  *(_DWORD *)this = 0;
  if (a2)
  {
    v7 = malloc_type_malloc(40 * a2, 0x2C8E6D5CuLL);
    if (!v7)
      goto LABEL_14;
    v8 = v7;
    bzero(v7, 40 * a2);
    *((_QWORD *)this + 1) = v8;
    *(_DWORD *)this = a2;
  }
  v9 = (void *)*((_QWORD *)this + 3);
  if (v9)
  {
    free(v9);
    *((_QWORD *)this + 3) = 0;
  }
  *((_DWORD *)this + 4) = 0;
  v10 = malloc_type_malloc(40 * a3, 0x2C8E6D5CuLL);
  v11 = v10;
  if (a3 && !v10)
  {
LABEL_14:
    exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
    v13 = std::bad_alloc::bad_alloc(exception);
  }
  bzero(v10, 40 * a3);
  *((_QWORD *)this + 3) = v11;
  if (a3)
  {
    if (v11)
      *((_DWORD *)this + 4) = a3;
  }
}

__n128 VPAUBusFormats::SetFormats(VPAUBusFormats *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  __n128 result;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;

  VPAUBusFormats::AllocateForFormats(a1, a3, a5);
  if (a3)
  {
    v11 = *((_QWORD *)a1 + 1);
    v12 = 40 * a3;
    do
    {
      result = *(__n128 *)a2;
      v13 = *(_OWORD *)(a2 + 16);
      *(_QWORD *)(v11 + 32) = *(_QWORD *)(a2 + 32);
      *(__n128 *)v11 = result;
      *(_OWORD *)(v11 + 16) = v13;
      a2 += 40;
      v11 += 40;
      v12 -= 40;
    }
    while (v12);
  }
  if (a5)
  {
    v14 = *((_QWORD *)a1 + 3);
    v15 = 40 * a5;
    do
    {
      result = *(__n128 *)a4;
      v16 = *(_OWORD *)(a4 + 16);
      *(_QWORD *)(v14 + 32) = *(_QWORD *)(a4 + 32);
      *(__n128 *)v14 = result;
      *(_OWORD *)(v14 + 16) = v16;
      a4 += 40;
      v14 += 40;
      v15 -= 40;
    }
    while (v15);
  }
  return result;
}

uint64_t VoiceProcessorV2::GetFarEndVoiceMixChannelCount(VoiceProcessorV2 *this)
{
  char *v2;
  int v3;
  _QWORD *v5;
  NSObject *v6;
  int *v7;
  _QWORD *v8;
  NSObject *v9;
  int v10;
  int *v11;
  int v12;
  uint64_t result;
  unsigned int v15;
  unsigned int v16;
  NSObject *v17;
  NSObject *v18;
  int *v19;
  int *v20;
  int *v21;
  uint8_t buf[4];
  const char *v23;
  __int16 v24;
  int v25;
  __int16 v26;
  int v27;
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  if (!*((_BYTE *)this + 2245))
    return 1;
  v2 = (char *)this + 15897;
  v3 = *((_DWORD *)this + 19);
  if (v3 != 2 && v3 != 4)
  {
    if (VPLogScope(void)::once != -1)
      dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
    v8 = (_QWORD *)VPLogScope(void)::scope;
    if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(3, VPLogScope(void)::scope, 0))
    {
      v9 = (*v8 ? *v8 : MEMORY[0x1E0C81028]);
      if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
      {
        v10 = *((_DWORD *)this + 19);
        *(_DWORD *)buf = 136315650;
        v23 = "VoiceProcessor_v2.cpp";
        v24 = 1024;
        v25 = 6364;
        v26 = 1024;
        v27 = v10;
        _os_log_impl(&dword_1B5ED0000, v9, OS_LOG_TYPE_DEFAULT, "%25s:%-5d  <vp> force 32-to-1 mono downmix due to operation mode: %u", buf, 0x18u);
      }
    }
    v11 = (int *)*((_QWORD *)this + 1570);
    if (v11 && (*v2 || v2[1]))
    {
      if (VPLogScope(void)::once != -1)
      {
        v20 = (int *)*((_QWORD *)this + 1570);
        dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
        v11 = v20;
      }
      CALegacyLog::log(v11, 3, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/VoiceProcessor_v2.cpp", 6364, "GetFarEndVoiceMixChannelCount", "force 32-to-1 mono downmix due to operation mode: %u");
    }
    return 1;
  }
  if (*((_BYTE *)this + 16296))
  {
    if (VPLogScope(void)::once != -1)
      dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
    v5 = (_QWORD *)VPLogScope(void)::scope;
    if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(3, VPLogScope(void)::scope, 0))
    {
      v6 = (*v5 ? *v5 : MEMORY[0x1E0C81028]);
      if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 136315394;
        v23 = "VoiceProcessor_v2.cpp";
        v24 = 1024;
        v25 = 6370;
        _os_log_impl(&dword_1B5ED0000, v6, OS_LOG_TYPE_DEFAULT, "%25s:%-5d  <vp> force 32-to-1 mono downmix", buf, 0x12u);
      }
    }
    v7 = (int *)*((_QWORD *)this + 1570);
    if (v7 && (*v2 || v2[1]))
    {
      if (VPLogScope(void)::once != -1)
        dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
      CALegacyLog::log(v7, 3, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/VoiceProcessor_v2.cpp", 6370, "GetFarEndVoiceMixChannelCount", "force 32-to-1 mono downmix");
    }
    return 1;
  }
  v12 = **((_DWORD **)this + 292);
  result = 1;
  if (v12 > 1885892726)
  {
    if (v12 != 1886613611)
    {
      if (v12 == 1885892727)
      {
        if (*((_DWORD *)this + 596) == 1781740087)
        {
          return 2;
        }
        else if (VoiceProcessorV2::isDeviceSpatializationDisabledInHeadsetRoutes(this))
        {
          return 1;
        }
        else
        {
          return 2;
        }
      }
      return result;
    }
    v16 = *((_DWORD *)this + 18);
    result = 2;
    if (v16 > 0x24 || ((1 << v16) & 0x1CC0000100) == 0)
      return result;
    return 1;
  }
  if (v12 != 1885892674 && v12 != 1885892706)
    return result;
  if (VoiceProcessorV2::isDeviceSpatializationDisabledInHeadsetRoutes(this)
    || !VoiceProcessorV2::IsRefPortOwningDeviceBluetoothAppleProduct((int **)this))
  {
    return 1;
  }
  if (!*((_DWORD *)this + 4098))
  {
    if (VPLogScope(void)::once != -1)
      dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
    v17 = CALog::LogObjIfEnabled(3, VPLogScope(void)::scope);
    if (v17)
    {
      v18 = v17;
      if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 136315650;
        v23 = "VoiceProcessor_v2.cpp";
        v24 = 1024;
        v25 = 6402;
        v26 = 1024;
        v27 = 0;
        _os_log_impl(&dword_1B5ED0000, v18, OS_LOG_TYPE_DEFAULT, "%25s:%-5d  <vp> force 32-to-1 mono downmix due to spatial mode off (mSpatialMode = %d)", buf, 0x18u);
      }
    }
    v19 = (int *)*((_QWORD *)this + 1570);
    if (v19 && (*v2 || v2[1]))
    {
      if (VPLogScope(void)::once != -1)
      {
        v21 = (int *)*((_QWORD *)this + 1570);
        dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
        v19 = v21;
      }
      CALegacyLog::log(v19, 3, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/VoiceProcessor_v2.cpp", 6402, "GetFarEndVoiceMixChannelCount", "force 32-to-1 mono downmix due to spatial mode off (mSpatialMode = %d)");
    }
    return 1;
  }
  v15 = *((_DWORD *)this + 89);
  if (v15 >= 2)
    return 2;
  else
    return v15;
}

void sub_1B63D6E6C(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

uint64_t VoiceProcessorV2::GetDynamicsDSPChannelCount(VoiceProcessorV2 *this)
{
  uint64_t v1;

  if (*((_DWORD *)this + 89) == 2
    && ((v1 = *((_QWORD *)this + 1104), (v1 & 0x400000) != 0)
     && (*((_BYTE *)this + 8842) & 0x40) != 0
     && *((_QWORD *)this + 459)
     || (v1 & 0x4000000) != 0 && (*((_BYTE *)this + 8843) & 4) != 0 && *((_QWORD *)this + 463)))
  {
    return 2;
  }
  else
  {
    return *((unsigned int *)this + 69);
  }
}

BOOL VoiceProcessorV2::isDeviceSpatializationDisabledInHeadsetRoutes(VoiceProcessorV2 *this)
{
  unsigned int v1;
  NSObject *v3;
  int *v4;
  int *v6;
  int v7;
  const char *v8;
  __int16 v9;
  int v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  v1 = *((_DWORD *)this + 89);
  if (v1 <= 1)
  {
    if (VPLogScope(void)::once != -1)
      dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
    if (VPLogScope(void)::scope && *(int *)(VPLogScope(void)::scope + 8) >= 6)
    {
      v3 = *(_QWORD *)VPLogScope(void)::scope ? *(NSObject **)VPLogScope(void)::scope : MEMORY[0x1E0C81028];
      if (os_log_type_enabled(v3, OS_LOG_TYPE_DEBUG))
      {
        v7 = 136315394;
        v8 = "VoiceProcessor_v2.cpp";
        v9 = 1024;
        v10 = 6300;
        _os_log_impl(&dword_1B5ED0000, v3, OS_LOG_TYPE_DEBUG, "%25s:%-5d  <vp> disable spatialization when mix format is less than 2", (uint8_t *)&v7, 0x12u);
      }
    }
    v4 = (int *)*((_QWORD *)this + 1570);
    if (v4 && (*((_BYTE *)this + 15897) || *((_BYTE *)this + 15898)))
    {
      if (VPLogScope(void)::once != -1)
      {
        v6 = (int *)*((_QWORD *)this + 1570);
        dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
        v4 = v6;
      }
      CALegacyLog::log(v4, 6, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/VoiceProcessor_v2.cpp", 6300, "isDeviceSpatializationDisabledInHeadsetRoutes", "disable spatialization when mix format is less than 2");
    }
  }
  return v1 < 2;
}

void sub_1B63D7064(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

uint64_t VoiceProcessorV2::PopulateAUPropsAndParamsLists(VoiceProcessorV2 *this, unsigned int a2, int a3)
{
  char *v5;
  uint64_t v6;
  uint64_t v7;
  __n128 v8;
  uint64_t v9;
  __int128 v11;
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  __int128 v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  __int128 v40;
  _QWORD *v41;
  int v42;
  int v43;
  int v44;
  unsigned int v45;
  unsigned int v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  __int128 v56;
  _OWORD *v57;
  __int128 v58;
  __int128 v59;
  uint64_t v60;
  int v61;
  uint64_t v62;
  uint64_t v63;
  double v64;
  double v65;
  unint64_t v66;
  int NextFFTFriendlyBlkSz;
  NSObject *v68;
  NSObject *v69;
  uint64_t v70;
  int *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  __int128 v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  __int128 v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  __int128 v93;
  unsigned int v94;
  int v95;
  _BOOL4 v96;
  uint64_t v97;
  int DynamicsDSPChannelCount;
  int v99;
  __int128 v100;
  __int128 v101;
  uint64_t v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  int v110;
  uint64_t v111;
  uint64_t v112;
  int v113;
  uint64_t v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  __int128 v118;
  uint64_t v119;
  uint64_t v120;
  _BYTE *v121;
  uint64_t v122;
  unsigned int v123;
  int v124;
  _BOOL4 v125;
  _OWORD *v126;
  __int128 v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  int v132;
  uint64_t v133;
  __int128 v134;
  __int128 v135;
  __int128 v136;
  uint64_t v137;
  __int128 v138;
  __int128 v139;
  uint64_t v140;
  unint64_t v141;
  __int128 v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  unint64_t *v152;
  __int128 v153;
  uint64_t v154;
  __int128 v155;
  uint64_t v156;
  uint64_t v157;
  __int128 v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  int v168;
  uint64_t v169;
  __int128 v170;
  __int128 v171;
  uint64_t v172;
  __int128 v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  __int128 v179;
  uint64_t v180;
  uint64_t v181;
  __int128 v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  __int128 v196;
  __int128 v197;
  __int128 v198;
  __int128 v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  __int128 v204;
  __int128 v205;
  uint64_t v206;
  __int128 v207;
  uint64_t v208;
  __n128 *v209;
  uint64_t v210;
  unint64_t v211;
  uint64_t v212;
  __int128 v213;
  uint64_t v214;
  unint64_t v215;
  uint64_t v216;
  __int128 v217;
  AUPropertyItem **v218;
  char *v219;
  AUPropertyItem **v220;
  AUPropertyItem **v221;
  AUPropertyItem **v222;
  AUPropertyItem **v223;
  _DWORD *v224;
  unsigned __int8 v225;
  AUPropertyItem **v226;
  int v227;
  unint64_t *v228;
  unint64_t v229;
  unsigned int v230;
  unsigned int v231;
  uint64_t v232;
  __int128 v233;
  __n128 *v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  AUPropertyItem **v242;
  const __CFDictionary **v243;
  const void *v244;
  AUPropertyItem **v245;
  char *v246;
  CFDictionaryRef CFDictionaryRef;
  const void *v248;
  _QWORD *v249;
  uint64_t i;
  const void *v251;
  const void *v252;
  const __CFDictionary **v253;
  const void *v254;
  AUPropertyItem **v255;
  _DWORD *v256;
  double v257;
  double v258;
  uint64_t v259;
  __int128 v260;
  __int128 v261;
  uint64_t v262;
  uint64_t v263;
  __int128 v264;
  __int128 v265;
  uint64_t v266;
  int v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  __int128 v272;
  uint64_t v273;
  unint64_t v274;
  uint64_t v275;
  __int128 v276;
  uint64_t v277;
  unint64_t v278;
  uint64_t v279;
  __int128 v280;
  double v281;
  double v282;
  unsigned int v283;
  double v284;
  unsigned int v285;
  AUPropertyItem **v286;
  AUPropertyItem **v287;
  float *v288;
  float *v289;
  float *v290;
  float v291;
  float *v292;
  float v293;
  float v294;
  double v295;
  double v296;
  unint64_t v297;
  int v298;
  _BYTE *v299;
  unint64_t v300;
  double v301;
  double v302;
  unsigned int v303;
  float v304;
  int v305;
  int v306;
  void *v307;
  unsigned int v308;
  AUPropertyItem **v309;
  uint64_t v310;
  uint64_t v311;
  char isPersonalMediaEnabled;
  va::PersonalAudioInterface *v313;
  int v314;
  int v315;
  double v316;
  unint64_t v317;
  int v318;
  NSObject *v319;
  NSObject *v320;
  int *v321;
  int v322;
  double v323;
  unint64_t v324;
  int v325;
  NSObject *v326;
  NSObject *v327;
  int *v328;
  NSObject *v329;
  NSObject *v330;
  int *v331;
  uint64_t v333;
  int *v334;
  uint64_t v335;
  NSString *v336;
  const void *v337;
  int v338;
  char *v339;
  const void *v340;
  int v341;
  int v342;
  unsigned int v343;
  uint64_t v344;
  unsigned int v345;
  uint64_t v346;
  _BYTE v347[40];
  _BYTE buf[40];
  __int128 v349;
  __int128 v350;
  uint64_t v351;
  uint64_t v352;

  v352 = *MEMORY[0x1E0C80C00];
  v343 = 0;
  v344 = 0;
  v5 = (char *)this + 15897;
  v345 = 0;
  v346 = 0;
  if (a3)
  {
    switch(a2)
    {
      case 0u:
      case 5u:
        *(_QWORD *)&buf[32] = *((_QWORD *)this + 107);
        v158 = *(_OWORD *)((char *)this + 840);
        *(_OWORD *)buf = *(_OWORD *)((char *)this + 824);
        *(_OWORD *)&buf[16] = v158;
        VPAUBusFormats::AllocateForFormats((VPAUBusFormats *)&v343, 1u, 1u);
        goto LABEL_118;
      case 1u:
      case 2u:
      case 3u:
      case 4u:
      case 6u:
      case 7u:
      case 8u:
      case 9u:
        v6 = *((_QWORD *)this + 103);
        VPAUBusFormats::AllocateForFormats((VPAUBusFormats *)&v343, 1u, 1u);
        v7 = v344;
        *(_QWORD *)v344 = v6;
        v8.n128_u32[1] = 41;
        *(_OWORD *)(v7 + 8) = xmmword_1B6626900;
        *(_OWORD *)(v7 + 24) = xmmword_1B6626910;
        v9 = v346;
        *(_QWORD *)v346 = v6;
        *(_OWORD *)(v9 + 8) = xmmword_1B6626900;
        *(_OWORD *)(v9 + 24) = xmmword_1B6626910;
        break;
      case 0xAu:
      case 0xBu:
        VPAUBusFormats::AllocateForFormats((VPAUBusFormats *)&v343, 2u, 4u);
        v77 = *((_QWORD *)this + 103);
        v78 = v344;
        *(_QWORD *)v344 = v77;
        v79 = xmmword_1B6626900;
        *(_OWORD *)(v78 + 8) = xmmword_1B6626900;
        *(_OWORD *)(v78 + 24) = xmmword_1B66A0830;
        v80 = v344;
        v81 = v346;
        *(_QWORD *)(v344 + 40) = v77;
        *(_OWORD *)(v80 + 48) = xmmword_1B6626900;
        *(_OWORD *)(v80 + 64) = xmmword_1B66A0830;
        v82 = *((_QWORD *)this + 103);
        *(_QWORD *)v81 = v82;
        *(_OWORD *)(v81 + 8) = xmmword_1B6626900;
        v83 = xmmword_1B6626910;
        goto LABEL_105;
      case 0xCu:
      case 0xDu:
      case 0xEu:
      case 0xFu:
        v29 = *((_QWORD *)this + 103);
        v36 = *((_QWORD *)this + 98);
        VPAUBusFormats::AllocateForFormats((VPAUBusFormats *)&v343, 2u, 3u);
        v37 = v344;
        *(_QWORD *)v344 = v29;
        v8 = (__n128)xmmword_1B6626900;
        *(_OWORD *)(v37 + 8) = xmmword_1B6626900;
        v33 = xmmword_1B6626910;
        *(_OWORD *)(v37 + 24) = xmmword_1B6626910;
        v38 = v344;
        v35 = v346;
        *(_QWORD *)(v344 + 40) = v36;
        *(_OWORD *)(v38 + 48) = xmmword_1B6626900;
        *(_OWORD *)(v38 + 64) = xmmword_1B6626910;
        goto LABEL_12;
      case 0x10u:
      case 0x11u:
      case 0x12u:
      case 0x13u:
      case 0x14u:
        v29 = *((_QWORD *)this + 103);
        v30 = *((_QWORD *)this + 98);
        v31 = *((_DWORD *)this + 203);
        VPAUBusFormats::AllocateForFormats((VPAUBusFormats *)&v343, 2u, 3u);
        v32 = v344;
        *(_QWORD *)v344 = v29;
        v8 = (__n128)xmmword_1B6626900;
        *(_OWORD *)(v32 + 8) = xmmword_1B6626900;
        v33 = xmmword_1B6626910;
        *(_OWORD *)(v32 + 24) = xmmword_1B6626910;
        v34 = v344;
        v35 = v346;
        *(_QWORD *)(v344 + 40) = v30;
        *(_OWORD *)(v34 + 48) = xmmword_1B6626900;
        *(_DWORD *)(v34 + 64) = 4;
        *(_DWORD *)(v34 + 68) = v31;
        *(_QWORD *)(v34 + 72) = 32;
LABEL_12:
        *(_QWORD *)v35 = v29;
        *(__n128 *)(v35 + 8) = v8;
        *(_OWORD *)(v35 + 24) = v33;
        v39 = v346;
        *(_QWORD *)(v346 + 40) = v29;
        *(__n128 *)(v39 + 48) = v8;
        *(_OWORD *)(v39 + 64) = v33;
        *(_QWORD *)(v39 + 80) = v29;
        *(__n128 *)(v39 + 88) = v8;
        *(_OWORD *)(v39 + 104) = v33;
        break;
      case 0x15u:
      case 0x16u:
      case 0x17u:
      case 0x18u:
      case 0x19u:
      case 0x1Au:
        v22 = *((_QWORD *)this + 103);
        v23 = *((_QWORD *)this + 98);
        v24 = *((_DWORD *)this + 203);
        VPAUBusFormats::AllocateForFormats((VPAUBusFormats *)&v343, 2u, 6u);
        v25 = v344;
        *(_QWORD *)v344 = v22;
        v8.n128_u32[1] = 41;
        *(_OWORD *)(v25 + 8) = xmmword_1B6626900;
        *(_OWORD *)(v25 + 24) = xmmword_1B6626910;
        v26 = v344;
        v27 = v346;
        *(_QWORD *)(v344 + 40) = v23;
        *(_OWORD *)(v26 + 48) = xmmword_1B6626900;
        *(_DWORD *)(v26 + 64) = 4;
        *(_DWORD *)(v26 + 68) = v24;
        *(_QWORD *)(v26 + 72) = 32;
        *(_QWORD *)v27 = v22;
        *(_OWORD *)(v27 + 8) = xmmword_1B6626900;
        *(_OWORD *)(v27 + 24) = xmmword_1B6626910;
        v28 = v346;
        *(_QWORD *)(v346 + 40) = v22;
        *(_OWORD *)(v28 + 48) = xmmword_1B6626900;
        *(_OWORD *)(v28 + 64) = xmmword_1B6626910;
        *(_QWORD *)(v28 + 80) = v22;
        *(_OWORD *)(v28 + 88) = xmmword_1B6626900;
        *(_OWORD *)(v28 + 104) = xmmword_1B6626910;
        *(_QWORD *)(v28 + 120) = v22;
        *(_OWORD *)(v28 + 128) = xmmword_1B6626900;
        *(_OWORD *)(v28 + 144) = xmmword_1B6626910;
        *(_QWORD *)(v28 + 160) = v22;
        *(_OWORD *)(v28 + 168) = xmmword_1B6626900;
        *(_OWORD *)(v28 + 184) = xmmword_1B6626910;
        *(_QWORD *)(v28 + 200) = v22;
        *(_OWORD *)(v28 + 208) = xmmword_1B6626900;
        *(_OWORD *)(v28 + 224) = xmmword_1B6626910;
        break;
      case 0x1Bu:
        v169 = *((_QWORD *)this + 107);
        v170 = *(_OWORD *)((char *)this + 840);
        *(_OWORD *)buf = *(_OWORD *)((char *)this + 824);
        *(_OWORD *)&buf[16] = v170;
        v171 = *((_OWORD *)this + 50);
        v349 = *((_OWORD *)this + 49);
        v350 = v171;
        v172 = *((_QWORD *)this + 102);
        *(_QWORD *)&buf[32] = v169;
        v351 = v172;
        v173 = *(_OWORD *)((char *)this + 920);
        *(_OWORD *)v347 = *(_OWORD *)((char *)this + 904);
        *(_OWORD *)&v347[16] = v173;
        *(_QWORD *)&v347[32] = *((_QWORD *)this + 117);
        v8 = VPAUBusFormats::SetFormats((VPAUBusFormats *)&v343, (uint64_t)buf, 2, (uint64_t)v347, 1);
        break;
      case 0x1Cu:
      case 0x38u:
      case 0x39u:
        VPAUBusFormats::AllocateForFormats((VPAUBusFormats *)&v343, 1u, 1u);
        v8.n128_u64[0] = *((_QWORD *)this + 113);
        v203 = v344;
        *(_QWORD *)v344 = v8.n128_u64[0];
        v204 = xmmword_1B66A0BD0;
        *(_OWORD *)(v203 + 8) = xmmword_1B66A0BD0;
        v205 = xmmword_1B66A0BE0;
        goto LABEL_116;
      case 0x1Du:
        *(_QWORD *)&buf[32] = *((_QWORD *)this + 117);
        v136 = *(_OWORD *)((char *)this + 920);
        *(_OWORD *)buf = *(_OWORD *)((char *)this + 904);
        *(_OWORD *)&buf[16] = v136;
        VPAUBusFormats::AllocateForFormats((VPAUBusFormats *)&v343, 6u, 1u);
        v137 = v344;
        v138 = *(_OWORD *)buf;
        *(_OWORD *)v344 = *(_OWORD *)buf;
        v139 = *(_OWORD *)&buf[16];
        *(_OWORD *)(v137 + 16) = *(_OWORD *)&buf[16];
        v140 = *(_QWORD *)&buf[32];
        *(_QWORD *)(v137 + 32) = *(_QWORD *)&buf[32];
        *(_OWORD *)(v137 + 40) = v138;
        *(_OWORD *)(v137 + 56) = v139;
        *(_QWORD *)(v137 + 72) = v140;
        *(_OWORD *)(v137 + 80) = v138;
        *(_OWORD *)(v137 + 96) = v139;
        *(_QWORD *)(v137 + 112) = v140;
        *(_QWORD *)(v137 + 152) = v140;
        *(_OWORD *)(v137 + 120) = v138;
        *(_OWORD *)(v137 + 136) = v139;
        *(_OWORD *)(v137 + 160) = v138;
        *(_OWORD *)(v137 + 176) = v139;
        *(_QWORD *)(v137 + 192) = v140;
        v141 = *(_QWORD *)&buf[32];
        *(_QWORD *)(v137 + 232) = *(_QWORD *)&buf[32];
        v142 = *(_OWORD *)buf;
        v8 = *(__n128 *)&buf[16];
        *(_OWORD *)(v137 + 216) = *(_OWORD *)&buf[16];
        *(_OWORD *)(v137 + 200) = v142;
        goto LABEL_119;
      case 0x1Eu:
        VPAUBusFormats::AllocateForFormats((VPAUBusFormats *)&v343, 1u, 1u);
        v143 = *((_QWORD *)this + 103);
        goto LABEL_100;
      case 0x1Fu:
        VPAUBusFormats::AllocateForFormats((VPAUBusFormats *)&v343, 1u, 2u);
        v162 = v344;
        *(_QWORD *)v344 = *((_QWORD *)this + 103);
        v8.n128_u32[1] = 41;
        *(_OWORD *)(v162 + 8) = xmmword_1B66A0BD0;
        *(_OWORD *)(v162 + 24) = xmmword_1B66A0BC0;
        v163 = *((_QWORD *)this + 113);
        v164 = v346;
        *(_QWORD *)v346 = v163;
        *(_OWORD *)(v164 + 8) = xmmword_1B66A0BD0;
        *(_OWORD *)(v164 + 24) = xmmword_1B66A0BE0;
        v165 = v346;
        *(_QWORD *)(v346 + 40) = v163;
        *(_OWORD *)(v165 + 48) = xmmword_1B66A0BD0;
        *(_OWORD *)(v165 + 64) = xmmword_1B66A0BE0;
        break;
      case 0x20u:
        VPAUBusFormats::AllocateForFormats((VPAUBusFormats *)&v343, 5u, 2u);
        v174 = 0;
        v8.n128_u64[0] = *((_QWORD *)this + 103);
        v134 = xmmword_1B66A0BD0;
        v135 = xmmword_1B66A0BE0;
        do
        {
          v175 = v344 + v174;
          *(_QWORD *)v175 = v8.n128_u64[0];
          *(_OWORD *)(v175 + 8) = xmmword_1B66A0BD0;
          *(_OWORD *)(v175 + 24) = xmmword_1B66A0BE0;
          v174 += 40;
        }
        while (v174 != 200);
        v176 = v346;
        *(_QWORD *)v346 = v8.n128_u64[0];
        *(_OWORD *)(v176 + 8) = xmmword_1B66A0BD0;
        *(_OWORD *)(v176 + 24) = xmmword_1B66A0BE0;
        goto LABEL_109;
      case 0x21u:
      case 0x22u:
        VPAUBusFormats::AllocateForFormats((VPAUBusFormats *)&v343, 2u, 2u);
        v8.n128_u64[0] = *((_QWORD *)this + 103);
        v144 = v344;
        *(_QWORD *)v344 = v8.n128_u64[0];
        *(_OWORD *)(v144 + 8) = xmmword_1B66A0BD0;
        *(_OWORD *)(v144 + 24) = xmmword_1B66A0DD0;
        v145 = v346;
        *(_QWORD *)v346 = v8.n128_u64[0];
        *(_OWORD *)(v145 + 8) = xmmword_1B66A0BD0;
        *(_OWORD *)(v145 + 24) = xmmword_1B66A0DD0;
        v146 = v344;
        v147 = v346;
        *(_QWORD *)(v344 + 40) = v8.n128_u64[0];
        *(_OWORD *)(v146 + 48) = xmmword_1B66A0BD0;
        *(_OWORD *)(v146 + 64) = xmmword_1B66A0DD0;
        *(_QWORD *)(v147 + 40) = v8.n128_u64[0];
        *(_OWORD *)(v147 + 48) = xmmword_1B66A0BD0;
        *(_OWORD *)(v147 + 64) = xmmword_1B66A0DD0;
        break;
      case 0x23u:
        v168 = *((_DWORD *)this + 213) + 1;
        *(_QWORD *)buf = *((_QWORD *)this + 103);
        *(_OWORD *)&buf[8] = xmmword_1B6626900;
        *(_DWORD *)&buf[24] = 4;
        *(_DWORD *)&buf[28] = v168;
        *(_QWORD *)&buf[32] = 32;
        *(_QWORD *)v347 = *(_QWORD *)buf;
        *(_OWORD *)&v347[8] = xmmword_1B6626900;
        *(_OWORD *)&v347[24] = xmmword_1B6626910;
        v8 = VPAUBusFormats::SetFormats((VPAUBusFormats *)&v343, (uint64_t)buf, 1, (uint64_t)v347, 1);
        break;
      case 0x24u:
        VPAUBusFormats::AllocateForFormats((VPAUBusFormats *)&v343, 2u, 4u);
        v185 = *((_QWORD *)this + 103);
        v186 = v344;
        *(_QWORD *)v344 = v185;
        v79 = xmmword_1B66A0BD0;
        *(_OWORD *)(v186 + 8) = xmmword_1B66A0BD0;
        *(_OWORD *)(v186 + 24) = xmmword_1B66A0DD0;
        v187 = v344;
        v81 = v346;
        *(_QWORD *)(v344 + 40) = v185;
        *(_OWORD *)(v187 + 48) = xmmword_1B66A0BD0;
        *(_OWORD *)(v187 + 64) = xmmword_1B66A0DD0;
        v82 = *((_QWORD *)this + 103);
        *(_QWORD *)v81 = v82;
        *(_OWORD *)(v81 + 8) = xmmword_1B66A0BD0;
        v83 = xmmword_1B66A0BE0;
LABEL_105:
        *(_OWORD *)(v81 + 24) = v83;
        v188 = v346;
        *(_QWORD *)(v346 + 40) = v82;
        *(_OWORD *)(v188 + 48) = v79;
        *(_OWORD *)(v188 + 64) = v83;
        v8.n128_u64[0] = *((_QWORD *)this + 103);
        *(_QWORD *)(v188 + 80) = v8.n128_u64[0];
        *(_OWORD *)(v188 + 88) = v79;
        *(_OWORD *)(v188 + 104) = v83;
        *(_QWORD *)(v188 + 120) = v8.n128_u64[0];
        *(_OWORD *)(v188 + 128) = v79;
        *(_OWORD *)(v188 + 144) = v83;
        break;
      case 0x25u:
        VPAUBusFormats::AllocateForFormats((VPAUBusFormats *)&v343, 3u, 2u);
        v8.n128_u64[0] = *((_QWORD *)this + 103);
        v166 = v344;
        *(_QWORD *)v344 = v8.n128_u64[0];
        v134 = xmmword_1B6626900;
        *(_OWORD *)(v166 + 8) = xmmword_1B6626900;
        *(_OWORD *)(v166 + 24) = xmmword_1B66A0830;
        v167 = v344;
        v161 = v346;
        *(_QWORD *)(v344 + 40) = v8.n128_u64[0];
        *(_OWORD *)(v167 + 48) = xmmword_1B6626900;
        *(_OWORD *)(v167 + 64) = xmmword_1B66A0830;
        *(_QWORD *)(v167 + 80) = v8.n128_u64[0];
        *(_OWORD *)(v167 + 88) = xmmword_1B6626900;
        *(_OWORD *)(v167 + 104) = xmmword_1B66A0830;
        v8.n128_u64[0] = *((_QWORD *)this + 103);
        *(_QWORD *)v161 = v8.n128_u64[0];
        *(_OWORD *)(v161 + 8) = xmmword_1B6626900;
        v135 = xmmword_1B6626910;
        goto LABEL_108;
      case 0x26u:
      case 0x27u:
        VPAUBusFormats::AllocateForFormats((VPAUBusFormats *)&v343, 4u, 2u);
        v8.n128_u64[0] = *((_QWORD *)this + 103);
        v72 = v344;
        *(_QWORD *)v344 = v8.n128_u64[0];
        *(_OWORD *)(v72 + 8) = xmmword_1B66A0BD0;
        *(_OWORD *)(v72 + 24) = xmmword_1B66A0BE0;
        v73 = v344;
        v74 = v346;
        *(_QWORD *)(v344 + 40) = v8.n128_u64[0];
        *(_OWORD *)(v73 + 48) = xmmword_1B66A0BD0;
        *(_OWORD *)(v73 + 64) = xmmword_1B66A0BE0;
        *(_QWORD *)(v73 + 80) = v8.n128_u64[0];
        *(_OWORD *)(v73 + 88) = xmmword_1B66A0BD0;
        *(_OWORD *)(v73 + 104) = xmmword_1B66A0BE0;
        *(_QWORD *)v74 = *((_QWORD *)this + 113);
        *(_OWORD *)(v74 + 8) = xmmword_1B66A0BD0;
        *(_OWORD *)(v74 + 24) = xmmword_1B66A0BE0;
        v8.n128_u64[0] = *((_QWORD *)this + 113);
        v75 = v346;
        v76 = v344;
        *(_QWORD *)(v346 + 40) = v8.n128_u64[0];
        *(_OWORD *)(v75 + 48) = xmmword_1B66A0DF0;
        *(_OWORD *)(v75 + 64) = xmmword_1B6626910;
        *(_QWORD *)(v76 + 120) = v8.n128_u64[0];
        *(_OWORD *)(v76 + 128) = xmmword_1B66A0DF0;
        *(_OWORD *)(v76 + 144) = xmmword_1B6626910;
        break;
      case 0x28u:
      case 0x29u:
        VPAUBusFormats::AllocateForFormats((VPAUBusFormats *)&v343, 5u, 2u);
        v8.n128_u64[0] = *((_QWORD *)this + 103);
        v84 = v344;
        *(_QWORD *)v344 = v8.n128_u64[0];
        *(_OWORD *)(v84 + 8) = xmmword_1B66A0BD0;
        *(_OWORD *)(v84 + 24) = xmmword_1B66A0BE0;
        v85 = v344;
        v86 = v346;
        *(_QWORD *)(v344 + 40) = v8.n128_u64[0];
        *(_OWORD *)(v85 + 48) = xmmword_1B66A0BD0;
        *(_OWORD *)(v85 + 64) = xmmword_1B66A0BE0;
        *(_QWORD *)(v85 + 80) = v8.n128_u64[0];
        *(_OWORD *)(v85 + 88) = xmmword_1B66A0BD0;
        *(_OWORD *)(v85 + 104) = xmmword_1B66A0BE0;
        *(_QWORD *)v86 = *((_QWORD *)this + 113);
        *(_OWORD *)(v86 + 8) = xmmword_1B66A0BD0;
        *(_OWORD *)(v86 + 24) = xmmword_1B66A0BE0;
        v8.n128_u64[0] = *((_QWORD *)this + 113);
        v87 = v346;
        v88 = v344;
        *(_QWORD *)(v346 + 40) = v8.n128_u64[0];
        *(_OWORD *)(v87 + 48) = xmmword_1B66A0DF0;
        *(_OWORD *)(v87 + 64) = xmmword_1B6626910;
        *(_QWORD *)(v88 + 120) = v8.n128_u64[0];
        *(_OWORD *)(v88 + 128) = xmmword_1B66A0DF0;
        *(_OWORD *)(v88 + 144) = xmmword_1B6626910;
        *(_QWORD *)(v88 + 160) = v8.n128_u64[0];
        *(_OWORD *)(v88 + 168) = xmmword_1B66A0DF0;
        *(_OWORD *)(v88 + 184) = xmmword_1B6626910;
        break;
      case 0x2Au:
      case 0x2Bu:
      case 0x2Cu:
        VPAUBusFormats::AllocateForFormats((VPAUBusFormats *)&v343, 6u, 3u);
        v8.n128_u64[0] = *((_QWORD *)this + 103);
        v47 = v344;
        *(_QWORD *)v344 = v8.n128_u64[0];
        *(_OWORD *)(v47 + 8) = xmmword_1B66A0BD0;
        *(_OWORD *)(v47 + 24) = xmmword_1B66A0BE0;
        v48 = v344;
        v49 = v346;
        *(_QWORD *)(v344 + 40) = v8.n128_u64[0];
        *(_OWORD *)(v48 + 48) = xmmword_1B66A0BD0;
        *(_OWORD *)(v48 + 64) = xmmword_1B66A0BE0;
        *(_QWORD *)(v48 + 80) = v8.n128_u64[0];
        *(_OWORD *)(v48 + 88) = xmmword_1B66A0BD0;
        *(_OWORD *)(v48 + 104) = xmmword_1B66A0BE0;
        *(_QWORD *)(v48 + 200) = v8.n128_u64[0];
        *(_OWORD *)(v48 + 208) = xmmword_1B66A0BD0;
        *(_OWORD *)(v48 + 224) = xmmword_1B66A0BE0;
        v8.n128_u64[0] = *((_QWORD *)this + 113);
        *(_QWORD *)v49 = v8.n128_u64[0];
        *(_OWORD *)(v49 + 8) = xmmword_1B66A0BD0;
        *(_OWORD *)(v49 + 24) = xmmword_1B66A0BE0;
        v50 = v346;
        v51 = v344;
        *(_QWORD *)(v346 + 40) = v8.n128_u64[0];
        v8.n128_u32[1] = 9;
        *(_OWORD *)(v50 + 48) = xmmword_1B66A0BD0;
        *(_OWORD *)(v50 + 64) = xmmword_1B66A0BE0;
        v52 = *((_QWORD *)this + 113);
        *(_QWORD *)(v50 + 80) = v52;
        *(_OWORD *)(v50 + 88) = xmmword_1B66A0DF0;
        *(_OWORD *)(v50 + 104) = xmmword_1B6626910;
        *(_QWORD *)(v51 + 120) = v52;
        *(_OWORD *)(v51 + 128) = xmmword_1B66A0DF0;
        *(_OWORD *)(v51 + 144) = xmmword_1B6626910;
        *(_QWORD *)(v51 + 160) = v52;
        *(_OWORD *)(v51 + 168) = xmmword_1B66A0DF0;
        *(_OWORD *)(v51 + 184) = xmmword_1B6626910;
        break;
      case 0x2Du:
        VPAUBusFormats::AllocateForFormats((VPAUBusFormats *)&v343, 2u, 2u);
        v8.n128_u64[0] = *((_QWORD *)this + 113);
        v191 = v344;
        *(_QWORD *)v344 = v8.n128_u64[0];
        *(_OWORD *)(v191 + 8) = xmmword_1B66A0BD0;
        *(_OWORD *)(v191 + 24) = xmmword_1B66A0BC0;
        v192 = v344;
        v193 = v346;
        *(_QWORD *)(v344 + 40) = v8.n128_u64[0];
        *(_OWORD *)(v192 + 48) = xmmword_1B66A0BD0;
        *(_OWORD *)(v192 + 64) = xmmword_1B66A0BC0;
        *(_QWORD *)v193 = v8.n128_u64[0];
        *(_OWORD *)(v193 + 8) = xmmword_1B66A0BD0;
        *(_OWORD *)(v193 + 24) = xmmword_1B66A0BC0;
        v194 = v346;
        *(_QWORD *)(v346 + 40) = v8.n128_u64[0];
        v8.n128_u32[1] = 1;
        *(_OWORD *)(v194 + 48) = xmmword_1B66A0BD0;
        *(_OWORD *)(v194 + 64) = xmmword_1B66A0BE0;
        break;
      case 0x2Eu:
        VPAUBusFormats::AllocateForFormats((VPAUBusFormats *)&v343, 2u, 2u);
        v8.n128_u64[0] = *((_QWORD *)this + 113);
        v133 = v344;
        *(_QWORD *)v344 = v8.n128_u64[0];
        v134 = xmmword_1B66A0BD0;
        *(_OWORD *)(v133 + 8) = xmmword_1B66A0BD0;
        v135 = xmmword_1B66A0BC0;
        goto LABEL_107;
      case 0x2Fu:
        VPAUBusFormats::AllocateForFormats((VPAUBusFormats *)&v343, 2u, 2u);
        v8.n128_u64[0] = *((_QWORD *)this + 113);
        v133 = v344;
        *(_QWORD *)v344 = v8.n128_u64[0];
        v134 = xmmword_1B66A0BD0;
        *(_OWORD *)(v133 + 8) = xmmword_1B66A0BD0;
        v135 = xmmword_1B66A0CE0;
LABEL_107:
        *(_OWORD *)(v133 + 24) = v135;
        v189 = v344;
        v161 = v346;
        *(_QWORD *)(v344 + 40) = v8.n128_u64[0];
        *(_OWORD *)(v189 + 48) = v134;
        *(_OWORD *)(v189 + 64) = v135;
        *(_QWORD *)v161 = v8.n128_u64[0];
        *(_OWORD *)(v161 + 8) = v134;
        goto LABEL_108;
      case 0x30u:
        VPAUBusFormats::AllocateForFormats((VPAUBusFormats *)&v343, 2u, 2u);
        v8.n128_u64[0] = *((_QWORD *)this + 113);
        v159 = v344;
        *(_QWORD *)v344 = v8.n128_u64[0];
        v134 = xmmword_1B66A0BD0;
        *(_OWORD *)(v159 + 8) = xmmword_1B66A0BD0;
        *(_OWORD *)(v159 + 24) = xmmword_1B66A0DD0;
        v160 = v344;
        v161 = v346;
        *(_QWORD *)(v344 + 40) = v8.n128_u64[0];
        *(_OWORD *)(v160 + 48) = xmmword_1B66A0BD0;
        *(_OWORD *)(v160 + 64) = xmmword_1B66A0DD0;
        v8.n128_u64[0] = *((_QWORD *)this + 113);
        *(_QWORD *)v161 = v8.n128_u64[0];
        *(_OWORD *)(v161 + 8) = xmmword_1B66A0BD0;
        v135 = xmmword_1B66A0BE0;
LABEL_108:
        *(_OWORD *)(v161 + 24) = v135;
LABEL_109:
        v190 = v346;
        goto LABEL_110;
      case 0x31u:
        VPAUBusFormats::AllocateForFormats((VPAUBusFormats *)&v343, 1u, 1u);
        v143 = *((_QWORD *)this + 113);
LABEL_100:
        v177 = v344;
        *(_QWORD *)v344 = v143;
        *(_OWORD *)(v177 + 8) = xmmword_1B66A0BD0;
        *(_OWORD *)(v177 + 24) = xmmword_1B66A0BC0;
        v178 = v346;
        *(_QWORD *)v346 = *((_QWORD *)this + 113);
        *(_OWORD *)(v178 + 8) = xmmword_1B66A0BD0;
        v8.n128_u32[1] = 1;
        *(_OWORD *)(v178 + 24) = xmmword_1B66A0BE0;
        break;
      case 0x32u:
        *(_QWORD *)buf = *((_QWORD *)this + 113);
        *(_OWORD *)&buf[8] = xmmword_1B66A0BD0;
        *(_OWORD *)&buf[24] = xmmword_1B66A0BE0;
        *(_QWORD *)v347 = *(_QWORD *)buf;
        *(_OWORD *)&v347[8] = xmmword_1B66A0BD0;
        *(_OWORD *)&v347[24] = xmmword_1B66A0BE0;
        v8 = VPAUBusFormats::SetFormats((VPAUBusFormats *)&v343, (uint64_t)buf, 1, (uint64_t)v347, 1);
        break;
      case 0x33u:
        goto LABEL_78;
      case 0x34u:
        if (*((_BYTE *)this + 2083) || *((_BYTE *)this + 2085))
        {
          v152 = (unint64_t *)((char *)this + 904);
          *(_QWORD *)&buf[32] = *((_QWORD *)this + 117);
          v153 = *(_OWORD *)((char *)this + 920);
          *(_OWORD *)buf = *(_OWORD *)((char *)this + 904);
          *(_OWORD *)&buf[16] = v153;
          VPAUBusFormats::AllocateForFormats((VPAUBusFormats *)&v343, 2u, 2u);
          v154 = v344;
          v8 = *(__n128 *)&buf[16];
          *(_OWORD *)(v344 + 16) = *(_OWORD *)&buf[16];
          v155 = *(_OWORD *)buf;
          *(_OWORD *)v154 = *(_OWORD *)buf;
          v156 = *(_QWORD *)&buf[32];
          *(_QWORD *)(v154 + 32) = *(_QWORD *)&buf[32];
          v157 = v346;
          *(_OWORD *)v346 = v155;
          *(__n128 *)(v157 + 16) = v8;
          *(_QWORD *)(v157 + 32) = v156;
          v8.n128_u64[0] = *v152;
          *(_QWORD *)(v154 + 40) = *v152;
          *(_OWORD *)(v154 + 48) = xmmword_1B66A0DF0;
          *(_OWORD *)(v154 + 64) = xmmword_1B6626910;
          *(_QWORD *)(v157 + 40) = v8.n128_u64[0];
          *(_OWORD *)(v157 + 48) = xmmword_1B66A0DF0;
          *(_OWORD *)(v157 + 64) = xmmword_1B6626910;
        }
        else
        {
LABEL_78:
          VPAUBusFormats::AllocateForFormats((VPAUBusFormats *)&v343, 2u, 2u);
          v8.n128_u64[0] = *((_QWORD *)this + 113);
          v128 = v344;
          *(_QWORD *)v344 = v8.n128_u64[0];
          *(_OWORD *)(v128 + 8) = xmmword_1B66A0BD0;
          *(_OWORD *)(v128 + 24) = xmmword_1B66A0BE0;
          v129 = v344;
          v130 = v346;
          *(_QWORD *)(v344 + 40) = v8.n128_u64[0];
          *(_OWORD *)(v129 + 48) = xmmword_1B66A0DF0;
          *(_OWORD *)(v129 + 64) = xmmword_1B6626910;
          *(_QWORD *)v130 = v8.n128_u64[0];
          *(_OWORD *)(v130 + 8) = xmmword_1B66A0BD0;
          *(_OWORD *)(v130 + 24) = xmmword_1B66A0BE0;
          v131 = v346;
          *(_QWORD *)(v346 + 40) = v8.n128_u64[0];
          *(_OWORD *)(v131 + 48) = xmmword_1B66A0DF0;
          *(_OWORD *)(v131 + 64) = xmmword_1B6626910;
        }
        break;
      case 0x35u:
        if (*((_BYTE *)this + 2083) || *((_BYTE *)this + 2085))
        {
          *(_QWORD *)&buf[32] = *((_QWORD *)this + 117);
          v179 = *(_OWORD *)((char *)this + 920);
          *(_OWORD *)buf = *(_OWORD *)((char *)this + 904);
          *(_OWORD *)&buf[16] = v179;
          v180 = *((_QWORD *)this + 113);
          VPAUBusFormats::AllocateForFormats((VPAUBusFormats *)&v343, 3u, 3u);
          v181 = v344;
          v8 = *(__n128 *)&buf[16];
          *(_OWORD *)(v344 + 16) = *(_OWORD *)&buf[16];
          v182 = *(_OWORD *)buf;
          *(_OWORD *)v181 = *(_OWORD *)buf;
          v183 = *(_QWORD *)&buf[32];
          *(_QWORD *)(v181 + 32) = *(_QWORD *)&buf[32];
          *(_QWORD *)(v181 + 40) = v180;
          *(_OWORD *)(v181 + 48) = xmmword_1B66A0DF0;
          *(_OWORD *)(v181 + 64) = xmmword_1B6626910;
          *(_QWORD *)(v181 + 112) = v183;
          *(_OWORD *)(v181 + 80) = v182;
          *(__n128 *)(v181 + 96) = v8;
          v184 = v346;
          *(_OWORD *)v346 = v182;
          *(__n128 *)(v184 + 16) = v8;
          *(_QWORD *)(v184 + 32) = v183;
          *(_QWORD *)(v184 + 40) = v180;
          *(_OWORD *)(v184 + 48) = xmmword_1B66A0DF0;
          *(_OWORD *)(v184 + 64) = xmmword_1B6626910;
          *(_QWORD *)(v184 + 80) = v180;
          *(_OWORD *)(v184 + 88) = xmmword_1B66A0DF0;
          *(_OWORD *)(v184 + 104) = xmmword_1B6626910;
        }
        else
        {
          VPAUBusFormats::AllocateForFormats((VPAUBusFormats *)&v343, 3u, 3u);
          v8.n128_u64[0] = *((_QWORD *)this + 113);
          v333 = v344;
          *(_QWORD *)v344 = v8.n128_u64[0];
          v196 = xmmword_1B66A0BD0;
          *(_OWORD *)(v333 + 8) = xmmword_1B66A0BD0;
          v197 = xmmword_1B66A0BE0;
          *(_OWORD *)(v333 + 24) = xmmword_1B66A0BE0;
          v198 = xmmword_1B66A0DF0;
          v199 = xmmword_1B6626910;
          v200 = v344;
          v201 = v346;
          *(_QWORD *)(v344 + 40) = v8.n128_u64[0];
          *(_OWORD *)(v200 + 48) = xmmword_1B66A0DF0;
          *(_OWORD *)(v200 + 64) = xmmword_1B6626910;
LABEL_113:
          *(_QWORD *)(v200 + 80) = v8.n128_u64[0];
          *(_OWORD *)(v200 + 88) = v198;
          *(_OWORD *)(v200 + 104) = v199;
          *(_QWORD *)v201 = v8.n128_u64[0];
          *(_OWORD *)(v201 + 8) = v196;
          *(_OWORD *)(v201 + 24) = v197;
          v202 = v346;
          *(_QWORD *)(v346 + 40) = v8.n128_u64[0];
          *(_OWORD *)(v202 + 48) = v198;
          *(_OWORD *)(v202 + 64) = v199;
          *(_QWORD *)(v202 + 80) = v8.n128_u64[0];
          *(_OWORD *)(v202 + 88) = v198;
          *(_OWORD *)(v202 + 104) = v199;
        }
        break;
      case 0x36u:
        VPAUBusFormats::AllocateForFormats((VPAUBusFormats *)&v343, 3u, 3u);
        v8.n128_u64[0] = *((_QWORD *)this + 113);
        v195 = v344;
        *(_QWORD *)v344 = v8.n128_u64[0];
        v196 = xmmword_1B66A0BD0;
        *(_OWORD *)(v195 + 8) = xmmword_1B66A0BD0;
        v197 = xmmword_1B66A0BE0;
        *(_OWORD *)(v195 + 24) = xmmword_1B66A0BE0;
        v198 = xmmword_1B66A0DF0;
        v199 = xmmword_1B6626910;
        v200 = v344;
        v201 = v346;
        *(_QWORD *)(v344 + 40) = v8.n128_u64[0];
        *(_OWORD *)(v200 + 48) = xmmword_1B66A0BD0;
        *(_OWORD *)(v200 + 64) = xmmword_1B66A0BE0;
        goto LABEL_113;
      case 0x37u:
        VPAUBusFormats::AllocateForFormats((VPAUBusFormats *)&v343, 4u, 4u);
        v8.n128_u64[0] = *((_QWORD *)this + 113);
        v148 = v344;
        *(_QWORD *)v344 = v8.n128_u64[0];
        *(_OWORD *)(v148 + 8) = xmmword_1B66A0BD0;
        *(_OWORD *)(v148 + 24) = xmmword_1B66A0BE0;
        v149 = v344;
        v150 = v346;
        *(_QWORD *)(v344 + 40) = v8.n128_u64[0];
        *(_OWORD *)(v149 + 48) = xmmword_1B66A0BD0;
        *(_OWORD *)(v149 + 64) = xmmword_1B66A0BE0;
        *(_QWORD *)(v149 + 80) = v8.n128_u64[0];
        *(_OWORD *)(v149 + 88) = xmmword_1B66A0DF0;
        *(_OWORD *)(v149 + 104) = xmmword_1B6626910;
        *(_QWORD *)(v149 + 120) = v8.n128_u64[0];
        *(_OWORD *)(v149 + 128) = xmmword_1B66A0DF0;
        *(_OWORD *)(v149 + 144) = xmmword_1B6626910;
        *(_QWORD *)v150 = v8.n128_u64[0];
        *(_OWORD *)(v150 + 8) = xmmword_1B66A0BD0;
        *(_OWORD *)(v150 + 24) = xmmword_1B66A0BE0;
        v151 = v346;
        *(_QWORD *)(v346 + 40) = v8.n128_u64[0];
        *(_OWORD *)(v151 + 48) = xmmword_1B66A0DF0;
        *(_OWORD *)(v151 + 64) = xmmword_1B6626910;
        *(_QWORD *)(v151 + 80) = v8.n128_u64[0];
        *(_OWORD *)(v151 + 88) = xmmword_1B66A0DF0;
        *(_OWORD *)(v151 + 104) = xmmword_1B6626910;
        *(_QWORD *)(v151 + 120) = v8.n128_u64[0];
        *(_OWORD *)(v151 + 128) = xmmword_1B66A0DF0;
        *(_OWORD *)(v151 + 144) = xmmword_1B6626910;
        break;
      case 0x3Au:
        VPAUBusFormats::AllocateForFormats((VPAUBusFormats *)&v343, 1u, 1u);
        v8.n128_u64[0] = *((_QWORD *)this + 103);
        v203 = v344;
        *(_QWORD *)v344 = v8.n128_u64[0];
        v204 = xmmword_1B66A0BD0;
        *(_OWORD *)(v203 + 8) = xmmword_1B66A0BD0;
        v205 = xmmword_1B66A0BC0;
LABEL_116:
        *(_OWORD *)(v203 + 24) = v205;
        v206 = v346;
        *(_QWORD *)v346 = v8.n128_u64[0];
        *(_OWORD *)(v206 + 8) = v204;
        *(_OWORD *)(v206 + 24) = v205;
        break;
      case 0x3Bu:
      case 0x46u:
        *(_QWORD *)buf = *((_QWORD *)this + 103);
        *(_OWORD *)&buf[8] = xmmword_1B6626900;
        *(_OWORD *)&buf[24] = xmmword_1B6626910;
        *(_QWORD *)v347 = *(_QWORD *)buf;
        *(_OWORD *)&v347[8] = xmmword_1B6626900;
        *(_OWORD *)&v347[24] = xmmword_1B6626910;
        v8 = VPAUBusFormats::SetFormats((VPAUBusFormats *)&v343, (uint64_t)buf, 1, (uint64_t)v347, 1);
        break;
      case 0x3Cu:
        v228 = (unint64_t *)((char *)this + 904);
        *(_OWORD *)buf = *(_OWORD *)((char *)this + 904);
        *(_OWORD *)&buf[12] = *(_OWORD *)((char *)this + 916);
        v229 = *((_QWORD *)this + 117);
        v230 = (*(uint64_t (**)(VoiceProcessorV2 *))(*(_QWORD *)this + 112))(this);
        if (v230 <= 8)
          v231 = 6;
        else
          v231 = 8;
        VPAUBusFormats::AllocateForFormats((VPAUBusFormats *)&v343, v231, 1u);
        v232 = v344;
        v8 = *(__n128 *)buf;
        *(_OWORD *)v344 = *(_OWORD *)buf;
        v233 = *(_OWORD *)&buf[12];
        *(_OWORD *)(v232 + 12) = *(_OWORD *)&buf[12];
        *(_DWORD *)(v232 + 28) = 1;
        *(_QWORD *)(v232 + 32) = v229;
        v234 = (__n128 *)v346;
        *(_OWORD *)(v346 + 12) = v233;
        *v234 = v8;
        v234[1].n128_u32[3] = 1;
        v234[2].n128_u64[0] = v229;
        v8.n128_u64[0] = *v228;
        v235 = v344;
        *(_QWORD *)(v344 + 40) = *v228;
        *(_OWORD *)(v235 + 48) = xmmword_1B66A0BD0;
        *(_OWORD *)(v235 + 64) = xmmword_1B66A0BE0;
        *(_QWORD *)(v235 + 80) = v8.n128_u64[0];
        *(_OWORD *)(v235 + 88) = xmmword_1B66A0BD0;
        *(_OWORD *)(v235 + 104) = xmmword_1B66A0BE0;
        *(_QWORD *)(v235 + 120) = v8.n128_u64[0];
        *(_OWORD *)(v235 + 128) = xmmword_1B66A0BD0;
        *(_OWORD *)(v235 + 144) = xmmword_1B66A0BE0;
        v8.n128_u64[0] = *v228;
        *(_QWORD *)(v235 + 160) = *v228;
        v134 = xmmword_1B66A0DF0;
        *(_OWORD *)(v235 + 168) = xmmword_1B66A0DF0;
        v135 = xmmword_1B6626910;
        *(_OWORD *)(v235 + 184) = xmmword_1B6626910;
        *(_QWORD *)(v235 + 200) = v8.n128_u64[0];
        *(_OWORD *)(v235 + 208) = xmmword_1B66A0DF0;
        *(_OWORD *)(v235 + 224) = xmmword_1B6626910;
        if (v230 >= 9)
        {
          *(_QWORD *)(v235 + 240) = v8.n128_u64[0];
          v190 = v235 + 240;
          *(_OWORD *)(v190 + 8) = xmmword_1B66A0DF0;
          *(_OWORD *)(v190 + 24) = xmmword_1B6626910;
LABEL_110:
          *(_QWORD *)(v190 + 40) = v8.n128_u64[0];
          *(_OWORD *)(v190 + 48) = v134;
          *(_OWORD *)(v190 + 64) = v135;
        }
        break;
      case 0x3Du:
        *(_QWORD *)buf = *((_QWORD *)this + 113);
        *(_OWORD *)&buf[8] = xmmword_1B6626900;
        *(_OWORD *)&buf[24] = xmmword_1B6626910;
        *(_QWORD *)v347 = *(_QWORD *)buf;
        *(_OWORD *)&v347[8] = xmmword_1B6626900;
        *(_OWORD *)&v347[24] = xmmword_1B6626910;
        v8 = VPAUBusFormats::SetFormats((VPAUBusFormats *)&v343, (uint64_t)buf, 1, (uint64_t)v347, 1);
        break;
      case 0x3Fu:
      case 0x40u:
      case 0x41u:
      case 0x43u:
        *(_QWORD *)&buf[32] = *((_QWORD *)this + 117);
        v40 = *(_OWORD *)((char *)this + 920);
        *(_OWORD *)buf = *(_OWORD *)((char *)this + 904);
        *(_OWORD *)&buf[16] = v40;
        VPAUBusFormats::AllocateForFormats((VPAUBusFormats *)&v343, 1u, 1u);
        goto LABEL_118;
      case 0x42u:
        v132 = *((_DWORD *)this + 233);
        *(_QWORD *)buf = *((_QWORD *)this + 113);
        *(_OWORD *)&buf[8] = xmmword_1B66A0BD0;
        *(_DWORD *)&buf[24] = 8;
        *(_DWORD *)&buf[28] = v132;
        *(_QWORD *)&buf[32] = 64;
        *(_QWORD *)v347 = *(_QWORD *)buf;
        *(_OWORD *)&v347[8] = xmmword_1B66A0BD0;
        *(_DWORD *)&v347[24] = 8;
        *(_DWORD *)&v347[28] = v132;
        *(_QWORD *)&v347[32] = 64;
        v8 = VPAUBusFormats::SetFormats((VPAUBusFormats *)&v343, (uint64_t)buf, 1, (uint64_t)v347, 1);
        break;
      case 0x44u:
        v207 = *((_OWORD *)this + 60);
        *(_OWORD *)buf = *((_OWORD *)this + 59);
        *(_OWORD *)&buf[16] = v207;
        *(_QWORD *)&buf[32] = *((_QWORD *)this + 122);
        VPAUBusFormats::AllocateForFormats((VPAUBusFormats *)&v343, 1u, 1u);
LABEL_118:
        v208 = v344;
        v8 = *(__n128 *)&buf[16];
        *(_OWORD *)(v344 + 16) = *(_OWORD *)&buf[16];
        v142 = *(_OWORD *)buf;
        *(_OWORD *)v208 = *(_OWORD *)buf;
        v141 = *(_QWORD *)&buf[32];
        *(_QWORD *)(v208 + 32) = *(_QWORD *)&buf[32];
LABEL_119:
        v209 = (__n128 *)v346;
        *(_OWORD *)v346 = v142;
        v209[1] = v8;
        v209[2].n128_u64[0] = v141;
        break;
      case 0x45u:
        v236 = *((_QWORD *)this + 103);
        v237 = *((_QWORD *)this + 98);
        v238 = *((_QWORD *)this + 113);
        VPAUBusFormats::AllocateForFormats((VPAUBusFormats *)&v343, 2u, 1u);
        v239 = v344;
        *(_QWORD *)v344 = v236;
        v8.n128_u32[1] = 41;
        *(_OWORD *)(v239 + 8) = xmmword_1B6626900;
        *(_OWORD *)(v239 + 24) = xmmword_1B6626910;
        v240 = v344;
        v241 = v346;
        *(_QWORD *)(v344 + 40) = v237;
        *(_OWORD *)(v240 + 48) = xmmword_1B6626900;
        *(_OWORD *)(v240 + 64) = xmmword_1B6626910;
        *(_QWORD *)v241 = v238;
        *(_OWORD *)(v241 + 8) = xmmword_1B6626900;
        *(_OWORD *)(v241 + 24) = xmmword_1B6626910;
        break;
      default:
        VPAUBusFormats::AllocateForFormats((VPAUBusFormats *)&v343, 0, 0);
        break;
    }
    if (v343)
    {
      v210 = 0;
      v211 = 0;
      do
      {
        v212 = *(_QWORD *)(v344 + v210 + 32);
        v213 = *(_OWORD *)(v344 + v210 + 16);
        *(_OWORD *)buf = *(_OWORD *)(v344 + v210);
        *(_OWORD *)&buf[16] = v213;
        *(_QWORD *)&buf[32] = v212;
        AUPropAndParamHelper::AddItemToAUPropsList((AUPropertyItem **)this + 3 * a2 + 879, 8u, 1u, v211++, 0x28uLL, buf, 1);
        v210 += 40;
      }
      while (v211 < v343);
    }
    if (v345)
    {
      v214 = 0;
      v215 = 0;
      do
      {
        v216 = *(_QWORD *)(v346 + v214 + 32);
        v217 = *(_OWORD *)(v346 + v214 + 16);
        *(_OWORD *)buf = *(_OWORD *)(v346 + v214);
        *(_OWORD *)&buf[16] = v217;
        *(_QWORD *)&buf[32] = v216;
        AUPropAndParamHelper::AddItemToAUPropsList((AUPropertyItem **)this + 3 * a2 + 879, 8u, 2u, v215++, 0x28uLL, buf, 1);
        v214 += 40;
      }
      while (v215 < v345);
    }
    v70 = 0;
    switch(a2)
    {
      case 0u:
      case 6u:
      case 7u:
      case 8u:
      case 9u:
      case 0x3Fu:
        *(_DWORD *)buf = 10;
        v221 = (AUPropertyItem **)((char *)this + 24 * a2 + 7032);
        AUPropAndParamHelper::AddItemToAUPropsList(v221, 0x898u, 0, 0, 4uLL, buf, 1);
        *(_DWORD *)v347 = *((_DWORD *)this + 127);
        AUPropAndParamHelper::AddItemToAUPropsList(v221, 0xEu, 0, 0, 4uLL, v347, 1);
        goto LABEL_348;
      case 1u:
      case 2u:
      case 3u:
      case 4u:
      case 0xCu:
      case 0xDu:
      case 0xEu:
      case 0xFu:
      case 0x10u:
      case 0x11u:
      case 0x12u:
      case 0x13u:
      case 0x14u:
      case 0x15u:
      case 0x16u:
      case 0x17u:
      case 0x18u:
      case 0x19u:
      case 0x1Au:
      case 0x1Cu:
      case 0x2Du:
      case 0x30u:
      case 0x31u:
      case 0x32u:
      case 0x36u:
      case 0x37u:
      case 0x38u:
      case 0x41u:
      case 0x43u:
      case 0x45u:
        *(_DWORD *)buf = *((_DWORD *)this + 127);
        AUPropAndParamHelper::AddItemToAUPropsList((AUPropertyItem **)this + 3 * a2 + 879, 0xEu, 0, 0, 4uLL, buf, 1);
        goto LABEL_348;
      case 5u:
        *(_DWORD *)buf = 1;
        AUPropAndParamHelper::AddItemToAUPropsList((AUPropertyItem **)this + 894, 0xE74u, 0, 0, 4uLL, buf, 1);
        *(_DWORD *)v347 = *((_DWORD *)this + 127);
        AUPropAndParamHelper::AddItemToAUPropsList((AUPropertyItem **)this + 894, 0xEu, 0, 0, 4uLL, v347, 1);
        goto LABEL_348;
      case 0xAu:
      case 0xBu:
      case 0x20u:
      case 0x21u:
      case 0x22u:
      case 0x24u:
      case 0x25u:
      case 0x39u:
      case 0x3Au:
        v218 = (AUPropertyItem **)((char *)this + 24 * a2 + 7032);
        v219 = (char *)this + 508;
        goto LABEL_129;
      case 0x1Bu:
        v342 = 1;
        v242 = (AUPropertyItem **)((char *)this + 7680);
        AUPropAndParamHelper::AddItemToAUPropsList((AUPropertyItem **)this + 960, 0xE74u, 0, 0, 4uLL, &v342, 1);
        v341 = *((_DWORD *)this + 127);
        AUPropAndParamHelper::AddItemToAUPropsList((AUPropertyItem **)this + 960, 0xEu, 0, 0, 4uLL, &v341, 1);
        if (*((_QWORD *)this + 2061))
        {
          *(_QWORD *)buf = *((_QWORD *)this + 2061);
          AUPropAndParamHelper::AddItemToAUPropsList((AUPropertyItem **)this + 960, 0x67727478u, 0, 0, 8uLL, buf, 1);
        }
        if (*((_QWORD *)this + 2062))
        {
          *(_QWORD *)buf = *((_QWORD *)this + 2062);
          AUPropAndParamHelper::AddItemToAUPropsList((AUPropertyItem **)this + 960, 0x676E616Du, 0, 0, 8uLL, buf, 1);
        }
        if (*((_QWORD *)this + 2063))
        {
          *(_QWORD *)buf = *((_QWORD *)this + 2063);
          AUPropAndParamHelper::AddItemToAUPropsList((AUPropertyItem **)this + 960, 0x61757370u, 0, 0, 8uLL, buf, 1);
        }
        if (*((_QWORD *)this + 2064))
        {
          *(_QWORD *)buf = *((_QWORD *)this + 2064);
          AUPropAndParamHelper::AddItemToAUPropsList((AUPropertyItem **)this + 960, 0x70727370u, 0, 0, 8uLL, buf, 1);
        }
        if (*((_QWORD *)this + 2065))
        {
          *(_QWORD *)buf = *((_QWORD *)this + 2065);
          AUPropAndParamHelper::AddItemToAUPropsList((AUPropertyItem **)this + 960, 0x67727072u, 0, 0, 8uLL, buf, 1);
          v243 = (const __CFDictionary **)applesauce::CF::DictionaryRef::operator->((_QWORD *)this + 2065);
          applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&v339, "/");
          applesauce::CF::at_or<applesauce::CF::StringRef,char const(&)[9]>(&v340, *v243, &v339);
          v244 = v340;
          applesauce::CF::StringRef::~StringRef(&v340);
          applesauce::CF::StringRef::~StringRef((const void **)&v339);
          *(_QWORD *)v347 = v244;
          AUPropAndParamHelper::AddItemToAUPropsList(v242, 0x70727270u, 0, 0, 8uLL, v347, 1);
        }
        goto LABEL_348;
      case 0x1Du:
        *(_DWORD *)buf = *((_DWORD *)this + 127);
        AUPropAndParamHelper::AddItemToAUPropsList((AUPropertyItem **)this + 966, 0xEu, 0, 0, 4uLL, buf, 1);
        goto LABEL_348;
      case 0x1Eu:
        *(_DWORD *)buf = 1;
        AUPropAndParamHelper::AddItemToAUPropsList((AUPropertyItem **)this + 969, 0xE74u, 0, 0, 4uLL, buf, 1);
        *(_DWORD *)v347 = 2 * *((_DWORD *)this + 127);
        AUPropAndParamHelper::AddItemToAUPropsList((AUPropertyItem **)this + 969, 0xE75u, 0, 0, 4uLL, v347, 1);
        AUPropAndParamHelper::AddItemToAUPropsList((AUPropertyItem **)this + 969, 0xEu, 0, 0, 4uLL, (char *)this + 508, 1);
        LODWORD(v340) = 1;
        AUPropAndParamHelper::AddItemToAUPropsList((AUPropertyItem **)this + 969, 0xE78u, 0, 0, 4uLL, &v340, 1);
        goto LABEL_348;
      case 0x1Fu:
        *(_DWORD *)buf = 1;
        v255 = (AUPropertyItem **)((char *)this + 7776);
        AUPropAndParamHelper::AddItemToAUPropsList((AUPropertyItem **)this + 972, 0xE74u, 0, 0, 4uLL, buf, 1);
        v256 = (_DWORD *)((char *)this + 508);
        AUPropAndParamHelper::AddItemToAUPropsList(v255, 0xEu, 0, 0, 4uLL, v256, 1);
        *(_DWORD *)v347 = 2 * *v256;
        AUPropAndParamHelper::AddItemToAUPropsList(v255, 0xE75u, 0, 0, 4uLL, v347, 1);
        LODWORD(v340) = 1;
        AUPropAndParamHelper::AddItemToAUPropsList(v255, 0xE78u, 0, 0, 4uLL, &v340, 1);
        goto LABEL_348;
      case 0x23u:
      case 0x3Bu:
        v226 = (AUPropertyItem **)((char *)this + 24 * a2 + 7032);
        AUPropAndParamHelper::AddItemToAUPropsList(v226, 0xEu, 0, 0, 4uLL, (char *)this + 508, 1);
        v227 = *((_DWORD *)this + 19);
        if (v227 == 6 || v227 == 1)
        {
          *(_DWORD *)buf = 2;
          AUPropAndParamHelper::AddItemToAUPropsList(v226, 0xE72u, 0, 0, 4uLL, buf, 1);
        }
        goto LABEL_348;
      case 0x26u:
      case 0x27u:
      case 0x28u:
      case 0x29u:
      case 0x2Au:
      case 0x2Bu:
      case 0x2Cu:
        *(_DWORD *)buf = *((_DWORD *)this + 127);
        v220 = (AUPropertyItem **)((char *)this + 24 * a2 + 7032);
        AUPropAndParamHelper::AddItemToAUPropsList(v220, 0xEu, 0, 0, 4uLL, buf, 1);
        if (a2 - 42 <= 2)
        {
          *(_DWORD *)v347 = 3;
          AUPropAndParamHelper::AddItemToAUPropsList(v220, 0xBu, 2u, 0, 4uLL, v347, 1);
        }
        goto LABEL_348;
      case 0x2Eu:
      case 0x2Fu:
        *(_DWORD *)v347 = *((_DWORD *)this + 127);
        v223 = (AUPropertyItem **)((char *)this + 24 * a2 + 7032);
        AUPropAndParamHelper::AddItemToAUPropsList(v223, 0xEu, 0, 0, 4uLL, v347, 1);
        v224 = (_DWORD *)*((_QWORD *)this + 292);
        if (v224 != *((_DWORD **)this + 293) && *v224 == 1886545251)
        {
          if ((v225 & 1) == 0
          {
            applesauce::CF::NumberRef::NumberRef<AUBSS2Algorithm,void>((CFNumberRef *)buf);
            v335 = *(_QWORD *)buf;
            *(_QWORD *)buf = 0;
            applesauce::CF::NumberRef::~NumberRef((const void **)buf);
            VoiceProcessorV2::PopulateAUPropsAndParamsLists(unsigned int,BOOL)::gBSS2Algorithm = v335;
          }
          AUPropAndParamHelper::AddItemToAUPropsList(v223, 0x1195u, 0, 0, 8uLL, &VoiceProcessorV2::PopulateAUPropsAndParamsLists(unsigned int,BOOL)::gBSS2Algorithm, 1);
        }
        goto LABEL_348;
      case 0x33u:
      case 0x34u:
      case 0x35u:
        *(_DWORD *)buf = 1;
        v222 = (AUPropertyItem **)((char *)this + 24 * a2 + 7032);
        AUPropAndParamHelper::AddItemToAUPropsList(v222, 0xE74u, 0, 0, 4uLL, buf, 1);
        *(_DWORD *)v347 = *((_DWORD *)this + 127);
        AUPropAndParamHelper::AddItemToAUPropsList(v222, 0xEu, 0, 0, 4uLL, v347, 1);
        goto LABEL_348;
      case 0x3Cu:
        *(_DWORD *)v347 = *((_DWORD *)this + 127);
        AUPropAndParamHelper::AddItemToAUPropsList((AUPropertyItem **)this + 1059, 0xEu, 0, 0, 4uLL, v347, 1);
        if (*v5)
        {
          *(_QWORD *)buf = this;
          *(_QWORD *)&buf[8] = VoiceProcessorV2::EchoGateV3ReadWriteControlDataCallback;
          *(_QWORD *)&buf[16] = VoiceProcessorV2::VPLogGatingFFTCallback_V2;
          AUPropAndParamHelper::AddItemToAUPropsList((AUPropertyItem **)this + 1059, 0x845u, 0, 0, 0x18uLL, buf, 1);
        }
        goto LABEL_348;
      case 0x3Du:
        *(_DWORD *)v347 = 1;
        AUPropAndParamHelper::AddItemToAUPropsList((AUPropertyItem **)this + 1062, 0xE74u, 0, 0, 4uLL, v347, 1);
        LODWORD(v340) = *((_DWORD *)this + 127);
        AUPropAndParamHelper::AddItemToAUPropsList((AUPropertyItem **)this + 1062, 0xEu, 0, 0, 4uLL, &v340, 1);
        if (*((_QWORD *)this + 2057))
        {
          *(_QWORD *)buf = *((_QWORD *)this + 2057);
          AUPropAndParamHelper::AddItemToAUPropsList((AUPropertyItem **)this + 1062, 0x67727478u, 0, 0, 8uLL, buf, 1);
        }
        if (*((_QWORD *)this + 2058))
        {
          *(_QWORD *)buf = *((_QWORD *)this + 2058);
          AUPropAndParamHelper::AddItemToAUPropsList((AUPropertyItem **)this + 1062, 0x676E616Du, 0, 0, 8uLL, buf, 1);
        }
        if (*((_QWORD *)this + 2059))
        {
          *(_QWORD *)buf = *((_QWORD *)this + 2059);
          AUPropAndParamHelper::AddItemToAUPropsList((AUPropertyItem **)this + 1062, 0x61757370u, 0, 0, 8uLL, buf, 1);
        }
        if (*((_QWORD *)this + 2060))
        {
          *(_QWORD *)buf = *((_QWORD *)this + 2060);
          AUPropAndParamHelper::AddItemToAUPropsList((AUPropertyItem **)this + 1062, 0x70727370u, 0, 0, 8uLL, buf, 1);
        }
        goto LABEL_348;
      case 0x40u:
        *(_DWORD *)buf = 1;
        AUPropAndParamHelper::AddItemToAUPropsList((AUPropertyItem **)this + 1071, 0xE74u, 0, 0, 4uLL, buf, 1);
        *(_DWORD *)v347 = *((_DWORD *)this + 127);
        AUPropAndParamHelper::AddItemToAUPropsList((AUPropertyItem **)this + 1071, 0xEu, 0, 0, 4uLL, v347, 1);
        goto LABEL_348;
      case 0x42u:
        *(_DWORD *)buf = *((_DWORD *)this + 127);
        AUPropAndParamHelper::AddItemToAUPropsList((AUPropertyItem **)this + 1077, 0xEu, 0, 0, 4uLL, buf, 1);
        goto LABEL_348;
      case 0x44u:
        v257 = *((double *)this + 113);
        v258 = *((double *)this + 123);
        v8.n128_u32[0] = *((_DWORD *)this + 127);
        v8.n128_f64[0] = (double)v8.n128_u64[0];
        if (v257 != v258)
          v8.n128_f64[0] = ceil(v258 * v8.n128_f64[0] / v257);
        v219 = (char *)this + 540;
        *((_DWORD *)this + 135) = v8.n128_f64[0];
        v218 = (AUPropertyItem **)((char *)this + 8664);
LABEL_129:
        AUPropAndParamHelper::AddItemToAUPropsList(v218, 0xEu, 0, 0, 4uLL, v219, 1);
        v70 = 0;
        break;
      case 0x46u:
        v342 = 1;
        v245 = (AUPropertyItem **)((char *)this + 8712);
        AUPropAndParamHelper::AddItemToAUPropsList((AUPropertyItem **)this + 1089, 0xE74u, 0, 0, 4uLL, &v342, 1);
        v341 = *((_DWORD *)this + 127);
        AUPropAndParamHelper::AddItemToAUPropsList((AUPropertyItem **)this + 1089, 0xEu, 0, 0, 4uLL, &v341, 1);
        if (*((_QWORD *)this + 2081))
        {
          *(_QWORD *)buf = *((_QWORD *)this + 2081);
          AUPropAndParamHelper::AddItemToAUPropsList((AUPropertyItem **)this + 1089, 0x67727478u, 0, 0, 8uLL, buf, 1);
        }
        if (*((_QWORD *)this + 2082))
        {
          *(_QWORD *)buf = *((_QWORD *)this + 2082);
          AUPropAndParamHelper::AddItemToAUPropsList((AUPropertyItem **)this + 1089, 0x676E616Du, 0, 0, 8uLL, buf, 1);
        }
        if (*((_QWORD *)this + 2083))
        {
          *(_QWORD *)buf = *((_QWORD *)this + 2083);
          AUPropAndParamHelper::AddItemToAUPropsList((AUPropertyItem **)this + 1089, 0x61757370u, 0, 0, 8uLL, buf, 1);
        }
        if (*((_QWORD *)this + 2084))
        {
          *(_QWORD *)buf = *((_QWORD *)this + 2084);
          AUPropAndParamHelper::AddItemToAUPropsList((AUPropertyItem **)this + 1089, 0x70727370u, 0, 0, 8uLL, buf, 1);
        }
        v338 = 1953850480;
        applesauce::CF::TypeRefPair::TypeRefPair<char const(&)[3],int>((applesauce::CF::TypeRef *)buf, "ID", &v338);
        v246 = (char *)this + 8;
        if (*((char *)this + 31) < 0)
          v246 = *(char **)v246;
        v339 = v246;
        applesauce::CF::TypeRefPair::TypeRefPair<char const(&)[9],char const*>((applesauce::CF::TypeRef *)&buf[16], "cfobject", &v339);
        *(_QWORD *)v347 = buf;
        *(_QWORD *)&v347[8] = 2;
        CFDictionaryRef = applesauce::CF::details::make_CFDictionaryRef((uint64_t)v347);
        v248 = (const void *)*((_QWORD *)this + 2085);
        v249 = (_QWORD *)((char *)this + 16680);
        *((_QWORD *)this + 2085) = CFDictionaryRef;
        v340 = v248;
        applesauce::CF::DictionaryRef::~DictionaryRef(&v340);
        for (i = 0; i != -32; i -= 16)
        {
          v251 = *(const void **)&buf[i + 24];
          if (v251)
            CFRelease(v251);
          v252 = *(const void **)&buf[i + 16];
          if (v252)
            CFRelease(v252);
        }
        if (*v249)
        {
          *(_QWORD *)buf = *v249;
          AUPropAndParamHelper::AddItemToAUPropsList(v245, 0x67727072u, 0, 0, 8uLL, buf, 1);
          v253 = (const __CFDictionary **)applesauce::CF::DictionaryRef::operator->(v249);
          applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&v339, "/");
          applesauce::CF::at_or<applesauce::CF::StringRef,char const(&)[9]>(&v340, *v253, &v339);
          v254 = v340;
          applesauce::CF::StringRef::~StringRef(&v340);
          applesauce::CF::StringRef::~StringRef((const void **)&v339);
          *(_QWORD *)v347 = v254;
          AUPropAndParamHelper::AddItemToAUPropsList(v245, 0x70727270u, 0, 0, 8uLL, v347, 1);
        }
        goto LABEL_348;
      default:
        break;
    }
  }
  else
  {
    switch(a2)
    {
      case 0u:
        v100 = *((_OWORD *)this + 14);
        *(_OWORD *)buf = *((_OWORD *)this + 13);
        *(_OWORD *)&buf[16] = v100;
        *(_QWORD *)&buf[32] = *((_QWORD *)this + 30);
        v101 = *(_OWORD *)((char *)this + 264);
        *(_OWORD *)v347 = *(_OWORD *)((char *)this + 248);
        *(_OWORD *)&v347[16] = v101;
        *(_QWORD *)&v347[32] = *((_QWORD *)this + 35);
        VPAUBusFormats::SetFormats((VPAUBusFormats *)&v343, (uint64_t)buf, 1, (uint64_t)v347, 1);
        goto LABEL_201;
      case 1u:
        VPAUBusFormats::AllocateForFormats((VPAUBusFormats *)&v343, 1u, 0);
        v102 = v344;
        *(_QWORD *)v344 = *((_QWORD *)this + 31);
        *(_OWORD *)(v102 + 8) = xmmword_1B6626900;
        *(_OWORD *)(v102 + 24) = xmmword_1B6626910;
        goto LABEL_201;
      case 2u:
      case 3u:
      case 4u:
      case 5u:
      case 8u:
      case 9u:
        v20 = *((_OWORD *)this + 19);
        *(_OWORD *)buf = *((_OWORD *)this + 18);
        *(_OWORD *)&buf[16] = v20;
        *(_QWORD *)&buf[32] = *((_QWORD *)this + 40);
        v21 = *((_OWORD *)this + 19);
        *(_OWORD *)v347 = *((_OWORD *)this + 18);
        *(_OWORD *)&v347[16] = v21;
        *(_QWORD *)&v347[32] = *((_QWORD *)this + 40);
        VPAUBusFormats::SetFormats((VPAUBusFormats *)&v343, (uint64_t)buf, 1, (uint64_t)v347, 1);
        goto LABEL_201;
      case 6u:
      case 7u:
        VPAUBusFormats::AllocateForFormats((VPAUBusFormats *)&v343, 1u, 1u);
        v54 = v344;
        v55 = *((_QWORD *)this + 40);
        v56 = *((_OWORD *)this + 19);
        *(_OWORD *)v344 = *((_OWORD *)this + 18);
        *(_OWORD *)(v54 + 16) = v56;
        *(_QWORD *)(v54 + 32) = v55;
        v57 = (_OWORD *)v346;
        v58 = *((_OWORD *)this + 18);
        v59 = *((_OWORD *)this + 19);
        *(_QWORD *)(v346 + 32) = *((_QWORD *)this + 40);
        *v57 = v58;
        v57[1] = v59;
        if ((*(unsigned int (**)(VoiceProcessorV2 *))(*(_QWORD *)this + 112))(this) >= 8
          && (~*((_DWORD *)this + 2208) & 0xC0) == 0)
        {
          v60 = *((_QWORD *)this + 36);
          v61 = *((_DWORD *)this + 79);
          v62 = v344;
          *(_QWORD *)v344 = v60;
          *(_OWORD *)(v62 + 8) = xmmword_1B66A0BD0;
          *(_DWORD *)(v62 + 24) = 8;
          *(_DWORD *)(v62 + 28) = v61;
          *(_QWORD *)(v62 + 32) = 64;
          v63 = v346;
          *(_QWORD *)v346 = v60;
          *(_OWORD *)(v63 + 8) = xmmword_1B66A0BD0;
          *(_DWORD *)(v63 + 24) = 8;
          *(_DWORD *)(v63 + 28) = v61;
          *(_QWORD *)(v63 + 32) = 64;
        }
        if ((!*((_DWORD *)this + 19)
           || (*(unsigned int (**)(VoiceProcessorV2 *))(*(_QWORD *)this + 112))(this) <= 7)
          && (*(unsigned int (**)(VoiceProcessorV2 *))(*(_QWORD *)this + 112))(this) > 7)
        {
          goto LABEL_201;
        }
        v64 = *((double *)this + 36);
        v65 = *((double *)this + 41);
        v66 = *((unsigned int *)this + 129);
        if (v64 != v65)
          LODWORD(v66) = vcvtpd_u64_f64(v64 * (double)v66 / v65);
        NextFFTFriendlyBlkSz = BlockSizeHelper::GetNextFFTFriendlyBlkSz(v66);
        if (NextFFTFriendlyBlkSz == (_DWORD)v66)
          goto LABEL_201;
        if (VPLogScope(void)::once != -1)
          dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
        v68 = CALog::LogObjIfEnabled(5, VPLogScope(void)::scope);
        if (v68)
        {
          v69 = v68;
          if (os_log_type_enabled(v68, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)buf = 136315906;
            *(_QWORD *)&buf[4] = "VoiceProcessor_v2.cpp";
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = 3962;
            *(_WORD *)&buf[18] = 1024;
            *(_DWORD *)&buf[20] = v66;
            *(_WORD *)&buf[24] = 1024;
            *(_DWORD *)&buf[26] = NextFFTFriendlyBlkSz;
            _os_log_impl(&dword_1B5ED0000, v69, OS_LOG_TYPE_DEBUG, "%25s:%-5d  <vp> _vp<WARNING>: The DLNS isn't configured at an fft-friendly blocksize (%d vs %d), disabling it for now", buf, 0x1Eu);
          }
        }
        v70 = 1718772077;
        v71 = (int *)*((_QWORD *)this + 1570);
        if (v71 && (*v5 || v5[1]))
        {
          if (VPLogScope(void)::once != -1)
            dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
          CALegacyLog::log(v71, 5, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/VoiceProcessor_v2.cpp", 3962, "GetAUStreamFormats", "_vp<WARNING>: The DLNS isn't configured at an fft-friendly blocksize (%d vs %d), disabling it for now", v66, NextFFTFriendlyBlkSz);
        }
        break;
      case 0xAu:
      case 0x17u:
      case 0x18u:
      case 0x19u:
      case 0x28u:
        *(_QWORD *)buf = *((_QWORD *)this + 41);
        *(_OWORD *)&buf[8] = xmmword_1B6626900;
        *(_DWORD *)&buf[24] = 4;
        *(_DWORD *)&buf[28] = VoiceProcessorV2::GetFarEndVoiceMixChannelCount(this);
        *(_QWORD *)&buf[32] = 32;
        *(_QWORD *)v347 = *(_QWORD *)buf;
        *(_OWORD *)&v347[8] = xmmword_1B6626900;
        *(_QWORD *)&v347[24] = __PAIR64__(*(unsigned int *)&buf[28], 4);
        *(_QWORD *)&v347[32] = 32;
        VPAUBusFormats::SetFormats((VPAUBusFormats *)&v343, (uint64_t)buf, 1, (uint64_t)v347, 1);
        goto LABEL_201;
      case 0xBu:
      case 0xCu:
      case 0xDu:
        v41 = (_QWORD *)((char *)this + 328);
        v42 = *((_DWORD *)this + 85);
        v43 = *((_DWORD *)this + 90);
        v44 = *((_DWORD *)this + 91);
        if ((v42 & 0x20) != 0)
        {
          v45 = 1;
        }
        else
        {
          v45 = *((_DWORD *)this + 89);
          if (!v45)
          {
            v46 = (v43 + 7) >> 3;
            goto LABEL_50;
          }
        }
        v46 = *((_DWORD *)this + 88) / v45;
LABEL_50:
        *(_QWORD *)buf = *v41;
        *(_DWORD *)&buf[8] = *((_DWORD *)this + 84);
        *(_DWORD *)&buf[12] = v42 & 0xFFFFFFDF;
        *(_DWORD *)&buf[16] = v46;
        *(_DWORD *)&buf[20] = 1;
        *(_DWORD *)&buf[24] = v46;
        *(_DWORD *)&buf[28] = 1;
        *(_DWORD *)&buf[32] = v43;
        *(_DWORD *)&buf[36] = v44;
        *(_QWORD *)v347 = *v41;
        *(_DWORD *)&v347[8] = *((_DWORD *)this + 84);
        *(_DWORD *)&v347[12] = v42 & 0xFFFFFFDF;
        *(_DWORD *)&v347[16] = v46;
        *(_DWORD *)&v347[20] = 1;
        *(_DWORD *)&v347[24] = v46;
        *(_DWORD *)&v347[28] = 1;
        *(_DWORD *)&v347[32] = v43;
        *(_DWORD *)&v347[36] = v44;
        VPAUBusFormats::SetFormats((VPAUBusFormats *)&v343, (uint64_t)buf, 1, (uint64_t)v347, 1);
LABEL_201:
        if (v343)
        {
          v273 = 0;
          v274 = 0;
          do
          {
            v275 = *(_QWORD *)(v344 + v273 + 32);
            v276 = *(_OWORD *)(v344 + v273 + 16);
            *(_OWORD *)buf = *(_OWORD *)(v344 + v273);
            *(_OWORD *)&buf[16] = v276;
            *(_QWORD *)&buf[32] = v275;
            AUPropAndParamHelper::AddItemToAUPropsList((AUPropertyItem **)this + 3 * a2 + 1363, 8u, 1u, v274++, 0x28uLL, buf, 1);
            v273 += 40;
          }
          while (v274 < v343);
        }
        if (v345)
        {
          v277 = 0;
          v278 = 0;
          do
          {
            v279 = *(_QWORD *)(v346 + v277 + 32);
            v280 = *(_OWORD *)(v346 + v277 + 16);
            *(_OWORD *)buf = *(_OWORD *)(v346 + v277);
            *(_OWORD *)&buf[16] = v280;
            *(_QWORD *)&buf[32] = v279;
            AUPropAndParamHelper::AddItemToAUPropsList((AUPropertyItem **)this + 3 * a2 + 1363, 8u, 2u, v278++, 0x28uLL, buf, 1);
            v277 += 40;
          }
          while (v278 < v345);
        }
        v281 = *((double *)this + 36);
        v282 = *((double *)this + 41);
        v283 = *((_DWORD *)this + 129);
        v284 = (double)v283;
        if (v281 != v282)
          v284 = ceil(v281 * v284 / v282);
        v70 = 0;
        v285 = v284;
        *((_DWORD *)this + 134) = v284;
        switch(a2)
        {
          case 0u:
            if (*((_QWORD *)this + 2029))
            {
              *(_QWORD *)buf = *((_QWORD *)this + 2029);
              AUPropAndParamHelper::AddItemToAUPropsList((AUPropertyItem **)this + 1363, 0x67727478u, 0, 0, 8uLL, buf, 1);
            }
            if (*((_QWORD *)this + 2030))
            {
              *(_QWORD *)buf = *((_QWORD *)this + 2030);
              AUPropAndParamHelper::AddItemToAUPropsList((AUPropertyItem **)this + 1363, 0x676E616Du, 0, 0, 8uLL, buf, 1);
            }
            if (*((_QWORD *)this + 2031))
            {
              *(_QWORD *)buf = *((_QWORD *)this + 2031);
              AUPropAndParamHelper::AddItemToAUPropsList((AUPropertyItem **)this + 1363, 0x61757370u, 0, 0, 8uLL, buf, 1);
            }
            if (*((_QWORD *)this + 2032))
            {
              *(_QWORD *)buf = *((_QWORD *)this + 2032);
              AUPropAndParamHelper::AddItemToAUPropsList((AUPropertyItem **)this + 1363, 0x70727370u, 0, 0, 8uLL, buf, 1);
            }
            if (*((_QWORD *)this + 2033))
            {
              *(_QWORD *)buf = *((_QWORD *)this + 2033);
              AUPropAndParamHelper::AddItemToAUPropsList((AUPropertyItem **)this + 1363, 0x67727072u, 0, 0, 8uLL, buf, 1);
            }
            if (*((_QWORD *)this + 2034))
            {
              *(_QWORD *)buf = *((_QWORD *)this + 2034);
              AUPropAndParamHelper::AddItemToAUPropsList((AUPropertyItem **)this + 1363, 0x67727072u, 0, 0, 8uLL, buf, 0);
            }
            if (*((_QWORD *)this + 2035))
            {
              *(_QWORD *)buf = *((_QWORD *)this + 2035);
              AUPropAndParamHelper::AddItemToAUPropsList((AUPropertyItem **)this + 1363, 0x67727072u, 0, 0, 8uLL, buf, 0);
            }
            if (*((_QWORD *)this + 2036))
            {
              *(_QWORD *)buf = *((_QWORD *)this + 2036);
              AUPropAndParamHelper::AddItemToAUPropsList((AUPropertyItem **)this + 1363, 0x67727072u, 0, 0, 8uLL, buf, 0);
            }
            if (*((_DWORD *)this + 596) != 1781740087)
            {
              v303 = atomic_load((unsigned int *)this + 577);
              AUPropAndParamHelper::AddItemToAUParamList((uint64_t)this + 8848, 1969844082, (float)v303);
            }
            if (VoiceProcessorV2::GetFarEndVoiceMixChannelCount(this) >= 2)
            {
              v304 = 0.0;
              if (*((_DWORD *)this + 19) != 2)
                v304 = 1.0;
              AUPropAndParamHelper::AddItemToAUParamList((uint64_t)this + 8848, 1966175095, v304);
            }
            goto LABEL_348;
          case 1u:
            if (*((_QWORD *)this + 2050))
            {
              *(_QWORD *)buf = *((_QWORD *)this + 2050);
              AUPropAndParamHelper::AddItemToAUPropsList((AUPropertyItem **)this + 1366, 0x67727478u, 0, 0, 8uLL, buf, 1);
              *(_DWORD *)v347 = 0;
              AUPropAndParamHelper::AddItemToAUPropsList((AUPropertyItem **)this + 1366, 0xBu, 2u, 0, 4uLL, v347, 1);
            }
            if (*((_QWORD *)this + 2051))
            {
              *(_QWORD *)buf = *((_QWORD *)this + 2051);
              AUPropAndParamHelper::AddItemToAUPropsList((AUPropertyItem **)this + 1366, 0x676E616Du, 0, 0, 8uLL, buf, 1);
            }
            if (*((_QWORD *)this + 2052))
            {
              *(_QWORD *)buf = *((_QWORD *)this + 2052);
              AUPropAndParamHelper::AddItemToAUPropsList((AUPropertyItem **)this + 1366, 0x61757370u, 0, 0, 8uLL, buf, 1);
            }
            if (*((_QWORD *)this + 2053))
            {
              *(_QWORD *)buf = *((_QWORD *)this + 2053);
              AUPropAndParamHelper::AddItemToAUPropsList((AUPropertyItem **)this + 1366, 0x70727370u, 0, 0, 8uLL, buf, 1);
            }
            goto LABEL_348;
          case 2u:
            *(_DWORD *)buf = 10;
            AUPropAndParamHelper::AddItemToAUPropsList((AUPropertyItem **)this + 1369, 0x898u, 0, 0, 4uLL, buf, 1);
            *(_DWORD *)v347 = *((_DWORD *)this + 134);
            AUPropAndParamHelper::AddItemToAUPropsList((AUPropertyItem **)this + 1369, 0xEu, 0, 0, 4uLL, v347, 1);
            goto LABEL_348;
          case 3u:
            *(_DWORD *)buf = v284;
            v309 = (AUPropertyItem **)((char *)this + 10976);
            AUPropAndParamHelper::AddItemToAUPropsList(v309, 0xEu, 0, 0, 4uLL, buf, 1);
            *(_DWORD *)v347 = 0;
            AUPropAndParamHelper::AddItemToAUPropsList(v309, 0x19CAu, 0, 0, 4uLL, v347, 1);
            goto LABEL_348;
          case 4u:
          case 5u:
          case 0xEu:
            *(_DWORD *)buf = v284;
            AUPropAndParamHelper::AddItemToAUPropsList((AUPropertyItem **)this + 3 * a2 + 1363, 0xEu, 0, 0, 4uLL, buf, 1);
            goto LABEL_348;
          case 6u:
            *(_DWORD *)v347 = 1;
            AUPropAndParamHelper::AddItemToAUPropsList((AUPropertyItem **)this + 1381, 0xE74u, 0, 0, 4uLL, v347, 1);
            v295 = *((double *)this + 36);
            v296 = *((double *)this + 41);
            v297 = *((unsigned int *)this + 129);
            if (v295 != v296)
              LODWORD(v297) = vcvtpd_u64_f64(v295 * (double)v297 / v296);
            LODWORD(v340) = v297;
            v298 = BlockSizeHelper::GetNextFFTFriendlyBlkSz(v297);
            if (BlockSizeHelper::GetNextFFTFriendlyBlkSz(v297) == (_DWORD)v297)
            {
              v299 = (char *)this + 480;
              *((_BYTE *)this + 480) = 0;
            }
            else
            {
              v322 = *((_DWORD *)this + 19);
              v299 = (char *)this + 480;
              *((_BYTE *)this + 480) = v322 == 0;
              if (!v322)
              {
                v323 = *((double *)this + 36);
                if ((double)v297 / v323 >= 0.012)
                  v324 = v297;
                else
                  v324 = (v323 * 0.012);
                v325 = BlockSizeHelper::GetNextFFTFriendlyBlkSz(v324);
                if (VPLogScope(void)::once != -1)
                  dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
                v326 = CALog::LogObjIfEnabled(3, VPLogScope(void)::scope);
                if (v326)
                {
                  v327 = v326;
                  if (os_log_type_enabled(v326, OS_LOG_TYPE_DEFAULT))
                  {
                    *(_DWORD *)buf = 136315906;
                    *(_QWORD *)&buf[4] = "VoiceProcessor_v2.cpp";
                    *(_WORD *)&buf[12] = 1024;
                    *(_DWORD *)&buf[14] = 4891;
                    *(_WORD *)&buf[18] = 1024;
                    *(_DWORD *)&buf[20] = v297;
                    *(_WORD *)&buf[24] = 1024;
                    *(_DWORD *)&buf[26] = v325;
                    _os_log_impl(&dword_1B5ED0000, v327, OS_LOG_TYPE_DEFAULT, "%25s:%-5d  <vp> _vp<INFO>: The OCNS isn't configured at an fft-friendly blocksize (%d vs %d), reconfiguring it", buf, 0x1Eu);
                  }
                }
                v328 = (int *)*((_QWORD *)this + 1570);
                if (v328 && (*v5 || v5[1]))
                {
                  if (VPLogScope(void)::once != -1)
                  {
                    v334 = (int *)*((_QWORD *)this + 1570);
                    dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
                    v328 = v334;
                  }
                  CALegacyLog::log(v328, 3, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/VoiceProcessor_v2.cpp", 4891, "PopulateAUPropsAndParamsLists", "_vp<INFO>: The OCNS isn't configured at an fft-friendly blocksize (%d vs %d), reconfiguring it", v297, v325);
                }
                LODWORD(v340) = v325;
              }
            }
            AUPropAndParamHelper::AddItemToAUPropsList((AUPropertyItem **)this + 1381, 0xEu, 0, 0, 4uLL, &v340, 1);
            if (v298 == (_DWORD)v340 || *v299)
              goto LABEL_348;
            if (VPLogScope(void)::once != -1)
              dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
            v329 = CALog::LogObjIfEnabled(5, VPLogScope(void)::scope);
            if (v329)
            {
              v330 = v329;
              if (os_log_type_enabled(v329, OS_LOG_TYPE_DEBUG))
              {
                *(_DWORD *)buf = 136315906;
                *(_QWORD *)&buf[4] = "VoiceProcessor_v2.cpp";
                *(_WORD *)&buf[12] = 1024;
                *(_DWORD *)&buf[14] = 4900;
                *(_WORD *)&buf[18] = 1024;
                *(_DWORD *)&buf[20] = (_DWORD)v340;
                *(_WORD *)&buf[24] = 1024;
                *(_DWORD *)&buf[26] = v298;
                _os_log_impl(&dword_1B5ED0000, v330, OS_LOG_TYPE_DEBUG, "%25s:%-5d  <vp> _vp<WARNING>: The DLNS isn't configured at an fft-friendly blocksize (%d vs %d), disabling it for now", buf, 0x1Eu);
              }
            }
            v70 = 1718772077;
            v331 = (int *)*((_QWORD *)this + 1570);
            if (v331 && (*v5 || v5[1]))
            {
              if (VPLogScope(void)::once != -1)
                dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
              CALegacyLog::log(v331, 5, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/VoiceProcessor_v2.cpp", 4900, "PopulateAUPropsAndParamsLists", "_vp<WARNING>: The DLNS isn't configured at an fft-friendly blocksize (%d vs %d), disabling it for now", (_DWORD)v340, v298);
            }
            goto LABEL_349;
          case 7u:
            *(_DWORD *)v347 = v284;
            if (BlockSizeHelper::GetNextFFTFriendlyBlkSz(v284) == v285)
            {
              *((_BYTE *)this + 480) = 0;
            }
            else
            {
              v315 = *((_DWORD *)this + 19);
              *((_BYTE *)this + 480) = v315 == 0;
              if (!v315)
              {
                v316 = *((double *)this + 36);
                if ((double)v285 / v316 >= 0.012)
                  v317 = v285;
                else
                  v317 = (v316 * 0.012);
                v318 = BlockSizeHelper::GetNextFFTFriendlyBlkSz(v317);
                if (VPLogScope(void)::once != -1)
                  dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
                v319 = CALog::LogObjIfEnabled(3, VPLogScope(void)::scope);
                if (v319)
                {
                  v320 = v319;
                  if (os_log_type_enabled(v319, OS_LOG_TYPE_DEFAULT))
                  {
                    *(_DWORD *)buf = 136315906;
                    *(_QWORD *)&buf[4] = "VoiceProcessor_v2.cpp";
                    *(_WORD *)&buf[12] = 1024;
                    *(_DWORD *)&buf[14] = 4861;
                    *(_WORD *)&buf[18] = 1024;
                    *(_DWORD *)&buf[20] = v285;
                    *(_WORD *)&buf[24] = 1024;
                    *(_DWORD *)&buf[26] = v318;
                    _os_log_impl(&dword_1B5ED0000, v320, OS_LOG_TYPE_DEFAULT, "%25s:%-5d  <vp> _vp<INFO>: The SpeechEnhance isn't configured at an fft-friendly blocksize (%d vs %d), reconfiguring it", buf, 0x1Eu);
                  }
                }
                v321 = (int *)*((_QWORD *)this + 1570);
                if (v321 && (*v5 || v5[1]))
                {
                  if (VPLogScope(void)::once != -1)
                    dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
                  CALegacyLog::log(v321, 3, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/VoiceProcessor_v2.cpp", 4861, "PopulateAUPropsAndParamsLists", "_vp<INFO>: The SpeechEnhance isn't configured at an fft-friendly blocksize (%d vs %d), reconfiguring it", v285, v318);
                }
                *(_DWORD *)v347 = v318;
              }
            }
            AUPropAndParamHelper::AddItemToAUPropsList((AUPropertyItem **)this + 1384, 0xEu, 0, 0, 4uLL, v347, 1);
            *(_QWORD *)buf = *((_QWORD *)this + 113);
            AUPropAndParamHelper::AddItemToAUPropsList((AUPropertyItem **)this + 1384, 0x3EBu, 0, 0, 8uLL, buf, 1);
            LODWORD(v340) = *((_DWORD *)this + 127);
            AUPropAndParamHelper::AddItemToAUPropsList((AUPropertyItem **)this + 1384, 0x3ECu, 0, 0, 4uLL, &v340, 1);
            goto LABEL_348;
          case 8u:
            *(_DWORD *)buf = v284;
            AUPropAndParamHelper::AddItemToAUPropsList((AUPropertyItem **)this + 1387, 0xEu, 0, 0, 4uLL, buf, 1);
            goto LABEL_348;
          case 9u:
            *(_DWORD *)buf = v284;
            AUPropAndParamHelper::AddItemToAUPropsList((AUPropertyItem **)this + 1390, 0xEu, 0, 0, 4uLL, buf, 1);
            *(_DWORD *)v347 = 1;
            v301 = *((double *)this + 36);
            v302 = *((double *)this + 41);
            if (v301 != v302)
            {
              LODWORD(v300) = *((_DWORD *)this + 129);
              *(_DWORD *)v347 = ceil(v301 * (double)v300 / v302) == floor(v301 * (double)v300 / v302);
            }
            AUPropAndParamHelper::AddItemToAUPropsList((AUPropertyItem **)this + 1390, 0xE74u, 0, 0, 4uLL, v347, 1);
            goto LABEL_348;
          case 0xFu:
            *(_DWORD *)buf = v283;
            AUPropAndParamHelper::AddItemToAUPropsList((AUPropertyItem **)this + 1408, 0xEu, 0, 0, 4uLL, buf, 1);
            if (*((_BYTE *)this + 2244) || v5[663])
            {
              *(_DWORD *)v347 = 0;
              AUPropAndParamHelper::AddItemToAUPropsList((AUPropertyItem **)this + 1408, 0x15u, 0, 0, 4uLL, v347, 1);
              if (v5[663])
              {
                LODWORD(v340) = 1;
                AUPropAndParamHelper::AddItemToAUPropsList((AUPropertyItem **)this + 1408, 0x6E657065u, 0, 0, 4uLL, &v340, 1);
              }
              LODWORD(v340) = *((_DWORD *)this + 4141);
              AUPropAndParamHelper::AddItemToAUPropsList((AUPropertyItem **)this + 1408, 0x6E65706Cu, 0, 0, 4uLL, &v340, 1);
            }
            goto LABEL_348;
          case 0x10u:
          case 0x11u:
          case 0x13u:
          case 0x17u:
          case 0x18u:
          case 0x19u:
          case 0x1Eu:
            *(_DWORD *)buf = v283;
            AUPropAndParamHelper::AddItemToAUPropsList((AUPropertyItem **)this + 3 * a2 + 1363, 0xEu, 0, 0, 4uLL, buf, 1);
            goto LABEL_348;
          case 0x12u:
          case 0x14u:
          case 0x1Fu:
            *(_DWORD *)buf = 10;
            v286 = (AUPropertyItem **)((char *)this + 24 * a2 + 10904);
            AUPropAndParamHelper::AddItemToAUPropsList(v286, 0x898u, 0, 0, 4uLL, buf, 1);
            *(_DWORD *)v347 = *((_DWORD *)this + 129);
            AUPropAndParamHelper::AddItemToAUPropsList(v286, 0xEu, 0, 0, 4uLL, v347, 1);
            goto LABEL_348;
          case 0x15u:
          case 0x16u:
            *(_DWORD *)buf = 1;
            v287 = (AUPropertyItem **)((char *)this + 24 * a2 + 10904);
            AUPropAndParamHelper::AddItemToAUPropsList(v287, 0xE74u, 0, 0, 4uLL, buf, 1);
            *(_DWORD *)v347 = *((_DWORD *)this + 129);
            AUPropAndParamHelper::AddItemToAUPropsList(v287, 0xEu, 0, 0, 4uLL, v347, 1);
            if (!*((_BYTE *)this + 4568))
            {
              v288 = (float *)*((_QWORD *)this + 266);
              v289 = (float *)*((_QWORD *)this + 267);
              if (v288 != v289)
              {
                v290 = v288 + 1;
                if (v288 + 1 != v289)
                {
                  v291 = *v288;
                  v292 = v288 + 1;
                  do
                  {
                    v293 = *v292++;
                    v294 = v293;
                    if (v293 < v291)
                    {
                      v291 = v294;
                      v288 = v290;
                    }
                    v290 = v292;
                  }
                  while (v292 != v289);
                }
                AUPropAndParamHelper::AddItemToAUParamList((uint64_t)this + 24 * a2 + 8848, 1, fmaxf(*v288, 0.0));
              }
            }
            goto LABEL_348;
          case 0x1Au:
            *(_DWORD *)buf = 1;
            AUPropAndParamHelper::AddItemToAUPropsList((AUPropertyItem **)this + 1441, 0x19CAu, 0, 0, 4uLL, buf, 1);
            *(_DWORD *)v347 = *((_DWORD *)this + 129);
            AUPropAndParamHelper::AddItemToAUPropsList((AUPropertyItem **)this + 1441, 0xEu, 0, 0, 4uLL, v347, 1);
            goto LABEL_348;
          case 0x20u:
            *(_DWORD *)buf = 1;
            AUPropAndParamHelper::AddItemToAUPropsList((AUPropertyItem **)this + 1459, 0xE74u, 0, 0, 4uLL, buf, 1);
            *(_DWORD *)v347 = *((_DWORD *)this + 129);
            AUPropAndParamHelper::AddItemToAUPropsList((AUPropertyItem **)this + 1459, 0xEu, 0, 0, 4uLL, v347, 1);
            goto LABEL_348;
          case 0x21u:
            *(_DWORD *)buf = 10;
            AUPropAndParamHelper::AddItemToAUPropsList((AUPropertyItem **)this + 1462, 0x898u, 0, 0, 4uLL, buf, 1);
            *(_DWORD *)v347 = *((_DWORD *)this + 121);
            AUPropAndParamHelper::AddItemToAUPropsList((AUPropertyItem **)this + 1462, 0xEu, 0, 0, 4uLL, v347, 1);
            goto LABEL_348;
          case 0x22u:
          case 0x23u:
          case 0x24u:
          case 0x25u:
          case 0x26u:
          case 0x27u:
          case 0x28u:
          case 0x29u:
          case 0x2Au:
          case 0x2Cu:
          case 0x2Eu:
          case 0x30u:
          case 0x31u:
          case 0x32u:
          case 0x34u:
          case 0x35u:
          case 0x36u:
          case 0x37u:
          case 0x39u:
          case 0x3Au:
          case 0x3Cu:
            *(_DWORD *)buf = *((_DWORD *)this + 121);
            AUPropAndParamHelper::AddItemToAUPropsList((AUPropertyItem **)this + 3 * a2 + 1363, 0xEu, 0, 0, 4uLL, buf, 1);
            goto LABEL_348;
          case 0x2Bu:
            *(_DWORD *)v347 = *((_DWORD *)this + 121);
            AUPropAndParamHelper::AddItemToAUPropsList((AUPropertyItem **)this + 1492, 0xEu, 0, 0, 4uLL, v347, 1);
            if (*((_BYTE *)this + 481))
            {
              *(_QWORD *)buf = *((_QWORD *)this + 103);
              AUPropAndParamHelper::AddItemToAUPropsList((AUPropertyItem **)this + 1492, 0xF3Du, 0, 0, 8uLL, buf, 1);
              LODWORD(v340) = *((_DWORD *)this + 127);
              AUPropAndParamHelper::AddItemToAUPropsList((AUPropertyItem **)this + 1492, 0xF3Eu, 0, 0, 4uLL, &v340, 1);
            }
            goto LABEL_348;
          case 0x2Du:
            LODWORD(v339) = 1;
            AUPropAndParamHelper::AddItemToAUPropsList((AUPropertyItem **)this + 1498, 0xE74u, 0, 0, 4uLL, &v339, 1);
            VoiceProcessorV2::GetRefPortUIDForPME((VoiceProcessorV2 *)buf, this);
            applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&v337, *(CFTypeRef *)buf);
            isPersonalMediaEnabled = va::PersonalAudioInterface::isPersonalMediaEnabled((NSString **)&v337);
            applesauce::CF::StringRef::~StringRef(&v337);
            if ((isPersonalMediaEnabled & 1) != 0)
            {
              v314 = (VoiceProcessorV2::GetRefPortHLC2chStateForPME(this) & 1) == 0;
              applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&v336, *(CFTypeRef *)buf);
              va::PersonalAudioInterface::getPreset((applesauce::CF::DictionaryRef *)v347, &v336);
              applesauce::CF::StringRef::~StringRef((const void **)&v336);
              if (*(_QWORD *)v347)
              {
                v340 = *(const void **)v347;
                AUPropAndParamHelper::AddItemToAUPropsList((AUPropertyItem **)this + 1498, 0, 0, 0, 8uLL, &v340, 1);
                goto LABEL_344;
              }
            }
            else
            {
              v314 = va::PersonalAudioInterface::isPersonalMediaEnabled(v313);
              va::PersonalAudioInterface::getPreset((va::PersonalAudioInterface *)v347);
              if (*(_QWORD *)v347)
              {
                v340 = *(const void **)v347;
                AUPropAndParamHelper::AddItemToAUPropsList((AUPropertyItem **)this + 1498, 0, 0, 0, 8uLL, &v340, 1);
                goto LABEL_344;
              }
            }
            v314 = 0;
LABEL_344:
            applesauce::CF::DictionaryRef::~DictionaryRef((const void **)v347);
            *(_DWORD *)v347 = v314 ^ 1;
            AUPropAndParamHelper::AddItemToAUPropsList((AUPropertyItem **)this + 1498, 0x15u, 0, 0, 4uLL, v347, 1);
            LODWORD(v340) = *((_DWORD *)this + 121);
            AUPropAndParamHelper::AddItemToAUPropsList((AUPropertyItem **)this + 1498, 0xEu, 0, 0, 4uLL, &v340, 1);
            applesauce::CF::StringRef::~StringRef((const void **)buf);
LABEL_348:
            v70 = 0;
            break;
          case 0x2Fu:
            v310 = *((_QWORD *)this + 1104);
            if ((v310 & 0x400000) != 0 && (*((_BYTE *)this + 8842) & 0x40) != 0 && *((_QWORD *)this + 459))
              goto LABEL_346;
            if ((v310 & 0x4000000) != 0 && (*((_BYTE *)this + 8843) & 4) != 0)
            {
              v311 = *((_QWORD *)this + 463);
              if (v311)
LABEL_346:
                LODWORD(v311) = *((_DWORD *)this + 89) > 1u;
            }
            else
            {
              LODWORD(v311) = 0;
            }
            *(_DWORD *)buf = v311;
            AUPropAndParamHelper::AddItemToAUPropsList((AUPropertyItem **)this + 1504, 0x19CAu, 0, 0, 4uLL, buf, 1);
            *(_DWORD *)v347 = *((_DWORD *)this + 121);
            AUPropAndParamHelper::AddItemToAUPropsList((AUPropertyItem **)this + 1504, 0xEu, 0, 0, 4uLL, v347, 1);
            goto LABEL_348;
          case 0x38u:
            *(_DWORD *)v347 = 0;
            AUPropAndParamHelper::AddItemToAUPropsList((AUPropertyItem **)this + 1531, 0x15u, 0, 0, 4uLL, v347, 1);
            v305 = *((_DWORD *)this + 548);
            if (v305)
              AUPropAndParamHelper::AddItemToAUPropsList((AUPropertyItem **)this + 1531, 0xFA05u, 0, 0, (4 * v305), *((void **)this + 273), 1);
            LODWORD(v340) = *((_DWORD *)this + 121);
            AUPropAndParamHelper::AddItemToAUPropsList((AUPropertyItem **)this + 1531, 0xEu, 0, 0, 4uLL, &v340, 1);
            if (*((_DWORD *)this + 1128) && *((_QWORD *)this + 269))
            {
              *(_QWORD *)buf = *((_QWORD *)this + 269);
              AUPropAndParamHelper::AddItemToAUPropsList((AUPropertyItem **)this + 1531, 0xFA09u, 0, 0, 8uLL, buf, 1);
            }
            v306 = *((_DWORD *)this + 542);
            if (v306)
            {
              v307 = (void *)*((_QWORD *)this + 270);
              if (v307)
                AUPropAndParamHelper::AddItemToAUPropsList((AUPropertyItem **)this + 1531, 0xFA0Au, 0, 0, (8 * v306), v307, 1);
            }
            v308 = *((_DWORD *)this + 18);
            if (v308 <= 0x34 && ((1 << v308) & 0x1FFFE33F3FFEF0) != 0 && *((_QWORD *)this + 278))
              AUPropAndParamHelper::AddItemToAUPropsList((AUPropertyItem **)this + 1531, 0xFA08u, 0, 0, 8uLL, (char *)this + 2224, 1);
            goto LABEL_348;
          default:
            goto LABEL_349;
        }
        break;
      case 0xEu:
        VPAUBusFormats::AllocateForFormats((VPAUBusFormats *)&v343, 1u, 1u);
        v106 = *((_QWORD *)this + 36);
        v107 = v344;
        *(_QWORD *)v344 = v106;
        *(_OWORD *)(v107 + 8) = xmmword_1B6626900;
        *(_OWORD *)(v107 + 24) = xmmword_1B6626910;
        v108 = v346;
        *(_QWORD *)v346 = v106;
        *(_OWORD *)(v108 + 8) = xmmword_1B6626900;
        *(_OWORD *)(v108 + 24) = xmmword_1B6626910;
        goto LABEL_201;
      case 0xFu:
        *(_QWORD *)buf = *((_QWORD *)this + 41);
        *(_OWORD *)&buf[8] = xmmword_1B6626900;
        *(_DWORD *)&buf[24] = 4;
        *(_DWORD *)&buf[28] = VoiceProcessorV2::GetFarEndVoiceMixChannelCount(this);
        *(_QWORD *)&buf[32] = 32;
        if (*((_BYTE *)this + 2244))
          v113 = 2;
        else
          v113 = 1;
        *(_QWORD *)v347 = *((_QWORD *)this + 41);
        *(_OWORD *)&v347[8] = xmmword_1B6626900;
        *(_DWORD *)&v347[24] = 4;
        *(_DWORD *)&v347[28] = v113;
        *(_QWORD *)&v347[32] = 32;
        VPAUBusFormats::AllocateForFormats((VPAUBusFormats *)&v343, 5u, 2u);
        v114 = v344;
        *(_OWORD *)v344 = *(_OWORD *)buf;
        *(_OWORD *)(v114 + 16) = *(_OWORD *)&buf[16];
        *(_QWORD *)(v114 + 32) = *(_QWORD *)&buf[32];
        v115 = *(_OWORD *)v347;
        v116 = *(_OWORD *)&v347[16];
        v117 = *(_OWORD *)v347;
        v118 = *(_OWORD *)&v347[16];
        *(_OWORD *)(v114 + 40) = *(_OWORD *)v347;
        *(_OWORD *)(v114 + 56) = v116;
        v119 = *(_QWORD *)&v347[32];
        v120 = *(_QWORD *)&v347[32];
        *(_QWORD *)(v114 + 72) = *(_QWORD *)&v347[32];
        *(_OWORD *)(v114 + 120) = v115;
        *(_OWORD *)(v114 + 80) = v115;
        *(_OWORD *)(v114 + 96) = v116;
        *(_QWORD *)(v114 + 112) = v119;
        *(_QWORD *)(v114 + 152) = v119;
        *(_OWORD *)(v114 + 136) = v116;
        *(_OWORD *)(v114 + 160) = v117;
        *(_OWORD *)(v114 + 176) = v118;
        *(_QWORD *)(v114 + 192) = v120;
        v121 = v347;
        if (!*((_BYTE *)this + 2244))
          v121 = buf;
        v122 = v346;
        *(_OWORD *)v346 = *(_OWORD *)v121;
        *(_OWORD *)(v122 + 16) = *((_OWORD *)v121 + 1);
        *(_QWORD *)(v122 + 32) = *((_QWORD *)v121 + 4);
        *(_QWORD *)(v122 + 72) = v120;
        *(_OWORD *)(v122 + 56) = v118;
        *(_OWORD *)(v122 + 40) = v117;
        goto LABEL_201;
      case 0x10u:
        *(_QWORD *)buf = *((_QWORD *)this + 41);
        *(_OWORD *)&buf[8] = xmmword_1B6626900;
        *(_OWORD *)&buf[24] = xmmword_1B66A0830;
        *(_QWORD *)v347 = *(_QWORD *)buf;
        *(_OWORD *)&v347[8] = xmmword_1B6626900;
        *(_OWORD *)&v347[24] = xmmword_1B66A0830;
        VPAUBusFormats::SetFormats((VPAUBusFormats *)&v343, (uint64_t)buf, 1, (uint64_t)v347, 1);
        goto LABEL_201;
      case 0x11u:
      case 0x12u:
      case 0x13u:
      case 0x14u:
      case 0x1Eu:
      case 0x1Fu:
      case 0x24u:
        v17 = *((_QWORD *)this + 41);
        VPAUBusFormats::AllocateForFormats((VPAUBusFormats *)&v343, 1u, 1u);
        v18 = v344;
        *(_QWORD *)v344 = v17;
        *(_OWORD *)(v18 + 8) = xmmword_1B6626900;
        *(_OWORD *)(v18 + 24) = xmmword_1B6626910;
        v19 = v346;
        *(_QWORD *)v346 = v17;
        *(_OWORD *)(v19 + 8) = xmmword_1B6626900;
        *(_OWORD *)(v19 + 24) = xmmword_1B6626910;
        goto LABEL_201;
      case 0x15u:
      case 0x16u:
      case 0x2Bu:
        v89 = *((_QWORD *)this + 41);
        VPAUBusFormats::AllocateForFormats((VPAUBusFormats *)&v343, 2u, 1u);
        v90 = v344;
        *(_QWORD *)v344 = v89;
        *(_OWORD *)(v90 + 8) = xmmword_1B6626900;
        *(_OWORD *)(v90 + 24) = xmmword_1B6626910;
        v91 = v344;
        v92 = v346;
        *(_QWORD *)(v344 + 40) = v89;
        *(_OWORD *)(v91 + 48) = xmmword_1B6626900;
        *(_OWORD *)(v91 + 64) = xmmword_1B6626910;
        *(_QWORD *)v92 = v89;
        *(_OWORD *)(v92 + 8) = xmmword_1B6626900;
        *(_OWORD *)(v92 + 24) = xmmword_1B6626910;
        goto LABEL_201;
      case 0x1Au:
      case 0x2Cu:
      case 0x2Du:
      case 0x2Eu:
      case 0x2Fu:
      case 0x32u:
      case 0x34u:
      case 0x35u:
      case 0x36u:
      case 0x37u:
      case 0x3Cu:
        *(_QWORD *)&buf[32] = *((_QWORD *)this + 45);
        v11 = *(_OWORD *)((char *)this + 344);
        *(_OWORD *)buf = *(_OWORD *)((char *)this + 328);
        *(_OWORD *)&buf[16] = v11;
        VPAUBusFormats::AllocateForFormats((VPAUBusFormats *)&v343, 1u, 1u);
        v12 = v344;
        v13 = *(_OWORD *)&buf[16];
        *(_OWORD *)(v344 + 16) = *(_OWORD *)&buf[16];
        v14 = *(_OWORD *)buf;
        *(_OWORD *)v12 = *(_OWORD *)buf;
        v15 = *(_QWORD *)&buf[32];
        *(_QWORD *)(v12 + 32) = *(_QWORD *)&buf[32];
        v16 = v346;
        *(_OWORD *)v346 = v14;
        *(_OWORD *)(v16 + 16) = v13;
        *(_QWORD *)(v16 + 32) = v15;
        goto LABEL_201;
      case 0x20u:
      case 0x21u:
      case 0x22u:
        goto LABEL_24;
      case 0x23u:
      case 0x25u:
        v53 = *((_QWORD *)this + 1104);
        if ((v53 & 0x400000) != 0 && (*((_BYTE *)this + 8842) & 0x40) != 0 && *((_QWORD *)this + 459)
          || (v53 & 0x4000000) != 0 && (*((_BYTE *)this + 8843) & 4) != 0 && *((_QWORD *)this + 463))
        {
LABEL_24:
          *(_QWORD *)buf = *((_QWORD *)this + 41);
          *(_OWORD *)&buf[8] = xmmword_1B6626900;
          *(_DWORD *)&buf[24] = 4;
          *(_DWORD *)&buf[28] = VoiceProcessorV2::GetDynamicsDSPChannelCount(this);
          *(_QWORD *)&buf[32] = 32;
          *(_QWORD *)v347 = *(_QWORD *)buf;
          *(_OWORD *)&v347[8] = xmmword_1B6626900;
          *(_QWORD *)&v347[24] = __PAIR64__(*(unsigned int *)&buf[28], 4);
          *(_QWORD *)&v347[32] = 32;
          VPAUBusFormats::SetFormats((VPAUBusFormats *)&v343, (uint64_t)buf, 1, (uint64_t)v347, 1);
        }
        else
        {
          *(_QWORD *)buf = *((_QWORD *)this + 41);
          *(_OWORD *)&buf[8] = xmmword_1B6626900;
          *(_OWORD *)&buf[24] = xmmword_1B66A0820;
          *(_QWORD *)v347 = *(_QWORD *)buf;
          *(_OWORD *)&v347[8] = xmmword_1B6626900;
          *(_OWORD *)&v347[24] = xmmword_1B66A0820;
          VPAUBusFormats::SetFormats((VPAUBusFormats *)&v343, (uint64_t)buf, 1, (uint64_t)v347, 1);
        }
        goto LABEL_201;
      case 0x26u:
        *(_QWORD *)buf = *((_QWORD *)this + 41);
        *(_OWORD *)&buf[8] = xmmword_1B6626900;
        *(_OWORD *)&buf[24] = xmmword_1B66A0820;
        v105 = *(_OWORD *)((char *)this + 344);
        *(_OWORD *)v347 = *(_OWORD *)((char *)this + 328);
        *(_OWORD *)&v347[16] = v105;
        *(_QWORD *)&v347[32] = *((_QWORD *)this + 45);
        VPAUBusFormats::SetFormats((VPAUBusFormats *)&v343, (uint64_t)buf, 1, (uint64_t)v347, 1);
        goto LABEL_201;
      case 0x27u:
        v126 = (_OWORD *)((char *)this + 328);
        *(_QWORD *)buf = *((_QWORD *)this + 41);
        *(_OWORD *)&buf[8] = xmmword_1B6626900;
        *(_DWORD *)&buf[24] = 4;
        *(_DWORD *)&buf[28] = VoiceProcessorV2::GetDynamicsDSPChannelCount(this);
        *(_QWORD *)&buf[32] = 32;
        v127 = *(_OWORD *)((char *)this + 344);
        *(_OWORD *)v347 = *v126;
        *(_OWORD *)&v347[16] = v127;
        *(_QWORD *)&v347[32] = *((_QWORD *)this + 45);
        VPAUBusFormats::SetFormats((VPAUBusFormats *)&v343, (uint64_t)buf, 1, (uint64_t)v347, 1);
        goto LABEL_201;
      case 0x29u:
        *(_QWORD *)&buf[32] = *((_QWORD *)this + 45);
        v103 = *(_OWORD *)((char *)this + 344);
        *(_OWORD *)buf = *(_OWORD *)((char *)this + 328);
        *(_OWORD *)&buf[16] = v103;
        v104 = *(_OWORD *)((char *)this + 344);
        *(_OWORD *)v347 = *(_OWORD *)((char *)this + 328);
        *(_OWORD *)&v347[16] = v104;
        *(_QWORD *)&v347[32] = *((_QWORD *)this + 45);
        VPAUBusFormats::SetFormats((VPAUBusFormats *)&v343, (uint64_t)buf, 1, (uint64_t)v347, 1);
        goto LABEL_201;
      case 0x2Au:
        v97 = *((_QWORD *)this + 41);
        DynamicsDSPChannelCount = VoiceProcessorV2::GetDynamicsDSPChannelCount(this);
        v99 = *((_DWORD *)this + 1073);
        *(_QWORD *)buf = v97;
        *(_OWORD *)&buf[8] = xmmword_1B6626900;
        *(_DWORD *)&buf[24] = 4;
        *(_DWORD *)&buf[28] = DynamicsDSPChannelCount;
        *(_QWORD *)&buf[32] = 32;
        *(_QWORD *)v347 = v97;
        *(_OWORD *)&v347[8] = xmmword_1B6626900;
        *(_DWORD *)&v347[24] = 4;
        *(_DWORD *)&v347[28] = v99;
        *(_QWORD *)&v347[32] = 32;
        VPAUBusFormats::SetFormats((VPAUBusFormats *)&v343, (uint64_t)buf, 1, (uint64_t)v347, 1);
        goto LABEL_201;
      case 0x30u:
      case 0x31u:
      case 0x39u:
        v109 = *((_QWORD *)this + 41);
        v110 = *((_DWORD *)this + 1073);
        VPAUBusFormats::AllocateForFormats((VPAUBusFormats *)&v343, 1u, 1u);
        v111 = v344;
        *(_QWORD *)v344 = v109;
        *(_OWORD *)(v111 + 8) = xmmword_1B6626900;
        *(_DWORD *)(v111 + 24) = 4;
        *(_DWORD *)(v111 + 28) = v110;
        *(_QWORD *)(v111 + 32) = 32;
        v112 = v346;
        *(_QWORD *)v346 = v109;
        *(_OWORD *)(v112 + 8) = xmmword_1B6626900;
        *(_DWORD *)(v112 + 24) = 4;
        *(_DWORD *)(v112 + 28) = v110;
        *(_QWORD *)(v112 + 32) = 32;
        goto LABEL_201;
      case 0x38u:
        *(_QWORD *)&buf[32] = *((_QWORD *)this + 45);
        v93 = *(_OWORD *)((char *)this + 344);
        *(_OWORD *)buf = *(_OWORD *)((char *)this + 328);
        *(_OWORD *)&buf[16] = v93;
        v94 = 1;
        if (*((_DWORD *)this + 1128) == 1)
        {
          v95 = *((_DWORD *)this + 379);
          v96 = v95 != 0;
          if (v95)
            v94 = 2;
          else
            v94 = 1;
        }
        else
        {
          v96 = 0;
        }
        VPAUBusFormats::AllocateForFormats((VPAUBusFormats *)&v343, v94, 1u);
        v259 = v344;
        v260 = *(_OWORD *)&buf[16];
        *(_OWORD *)(v344 + 16) = *(_OWORD *)&buf[16];
        v261 = *(_OWORD *)buf;
        *(_OWORD *)v259 = *(_OWORD *)buf;
        v262 = *(_QWORD *)&buf[32];
        *(_QWORD *)(v259 + 32) = *(_QWORD *)&buf[32];
        v263 = v346;
        *(_OWORD *)v346 = v261;
        *(_OWORD *)(v263 + 16) = v260;
        *(_QWORD *)(v263 + 32) = v262;
        if (v96)
        {
          v264 = *((_OWORD *)this + 93);
          v265 = *((_OWORD *)this + 94);
          *(_QWORD *)(v259 + 72) = *((_QWORD *)this + 190);
          *(_OWORD *)(v259 + 56) = v265;
          *(_OWORD *)(v259 + 40) = v264;
        }
        goto LABEL_201;
      case 0x3Au:
        v123 = 1;
        if (*((_DWORD *)this + 1128) == 1)
        {
          v124 = *((_DWORD *)this + 379);
          v125 = v124 != 0;
          if (v124)
            v123 = 2;
          else
            v123 = 1;
        }
        else
        {
          v125 = 0;
        }
        v266 = *((_QWORD *)this + 41);
        v267 = *((_DWORD *)this + 1073);
        VPAUBusFormats::AllocateForFormats((VPAUBusFormats *)&v343, v123, 1u);
        v268 = v344;
        *(_QWORD *)v344 = v266;
        *(_OWORD *)(v268 + 8) = xmmword_1B6626900;
        *(_DWORD *)(v268 + 24) = 4;
        *(_DWORD *)(v268 + 28) = v267;
        *(_QWORD *)(v268 + 32) = 32;
        v269 = v346;
        *(_QWORD *)v346 = v266;
        *(_OWORD *)(v269 + 8) = xmmword_1B6626900;
        *(_DWORD *)(v269 + 24) = 4;
        *(_DWORD *)(v269 + 28) = v267;
        *(_QWORD *)(v269 + 32) = 32;
        if (v125)
        {
          v270 = v344;
          v271 = *((_QWORD *)this + 190);
          v272 = *((_OWORD *)this + 94);
          *(_OWORD *)(v344 + 40) = *((_OWORD *)this + 93);
          *(_OWORD *)(v270 + 56) = v272;
          *(_QWORD *)(v270 + 72) = v271;
        }
        goto LABEL_201;
      default:
        VPAUBusFormats::AllocateForFormats((VPAUBusFormats *)&v343, 0, 0);
        goto LABEL_201;
    }
  }
LABEL_349:
  VPAUBusFormats::~VPAUBusFormats((VPAUBusFormats *)&v343);
  return v70;
}

void sub_1B63DAC10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  VPAUBusFormats::~VPAUBusFormats((VPAUBusFormats *)va);
  _Unwind_Resume(a1);
}

uint64_t applesauce::CF::at_or<applesauce::CF::StringRef,char const(&)[9]>(_QWORD *a1, const __CFDictionary *a2, _QWORD *a3)
{
  const void *v5;
  const void *v6;
  CFTypeID v7;
  const void *v9;
  char v10;

  v5 = applesauce::CF::details::at_key<char const(&)[9]>(a2, "cfobject");
  if (!v5)
    goto LABEL_5;
  v6 = v5;
  CFRetain(v5);
  v7 = CFGetTypeID(v6);
  if (v7 != CFStringGetTypeID())
  {
    CFRelease(v6);
LABEL_5:
    LOBYTE(v9) = 0;
    v10 = 0;
    *a1 = *a3;
    *a3 = 0;
    return std::__optional_destruct_base<applesauce::CF::StringRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v9);
  }
  v9 = v6;
  v10 = 1;
  CFRetain(v6);
  *a1 = v6;
  return std::__optional_destruct_base<applesauce::CF::StringRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v9);
}

CFNumberRef *applesauce::CF::NumberRef::NumberRef<AUBSS2Algorithm,void>(CFNumberRef *a1)
{
  CFNumberRef v2;
  std::runtime_error *exception;
  int valuePtr;

  valuePtr = 1;
  v2 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
  *a1 = v2;
  if (!v2)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
  }
  return a1;
}

void sub_1B63DB3F4(_Unwind_Exception *exception_object)
{
  CFTypeRef *v1;

  if (*v1)
    CFRelease(*v1);
  _Unwind_Resume(exception_object);
}

void VPAUBusFormats::~VPAUBusFormats(VPAUBusFormats *this)
{
  void *v2;
  void *v3;

  v2 = (void *)*((_QWORD *)this + 1);
  if (v2)
  {
    free(v2);
    *((_QWORD *)this + 1) = 0;
  }
  v3 = (void *)*((_QWORD *)this + 3);
  if (v3)
  {
    free(v3);
    *((_QWORD *)this + 3) = 0;
  }
  *((_DWORD *)this + 4) = 0;
  *(_DWORD *)this = 0;
}

void VoiceProcessorV2::InstantiateAndConfigureEffectAU(VoiceProcessorV2 *this, unsigned int a2, int a3)
{
  int v3;
  uint64_t v6;
  char v7;
  int *v8;
  uint64_t v9;
  int *v10;
  int v11;
  OSType v12;
  uint64_t v13;
  OpaqueAudioComponentInstance **v14;
  int InternalBuffers;
  _QWORD *v16;
  NSObject *v17;
  int *v18;
  uint64_t v19;
  int v20;
  const char *v21;
  char *v22;
  std::string *v23;
  uint64_t v24;
  char *v25;
  uint64_t **v26;
  uint64_t v27;
  std::string *v28;
  __int128 v29;
  std::string *v30;
  __int128 v31;
  std::string *v32;
  std::string::size_type size;
  std::string *v34;
  __int128 v35;
  std::string *v36;
  __int128 v37;
  size_t v38;
  std::string *v39;
  __int128 v40;
  void **v41;
  std::string::size_type v42;
  unint64_t v43;
  __int128 v44;
  std::string *v45;
  uint64_t v46;
  std::string::size_type v47;
  unint64_t v48;
  int v49;
  std::string::size_type v50;
  size_t v51;
  unsigned int v52;
  const void *v53;
  OpaqueAudioComponentInstance **v54;
  OpaqueAudioComponentInstance *v55;
  int data;
  double *v57;
  _QWORD *v58;
  NSObject *v59;
  uint64_t v60;
  int *v61;
  _QWORD *v62;
  NSObject *v63;
  int v64;
  int *v65;
  _QWORD *v66;
  NSObject *v67;
  uint64_t v68;
  int *v69;
  int v70;
  uint64_t v71;
  int v72;
  int v73;
  char v74;
  int *v75;
  uint64_t v76;
  int *v77;
  int v78;
  const char *v79;
  uint64_t v80;
  int *v81;
  int v82;
  const char *v83;
  std::string *v84;
  __int128 v85;
  std::string *v86;
  __int128 v87;
  void **v88;
  std::string::size_type v89;
  std::string *v90;
  __int128 v91;
  std::string *v92;
  __int128 v93;
  size_t v94;
  std::string *v95;
  __int128 v96;
  std::string *v97;
  std::string::size_type v98;
  unint64_t v99;
  __int128 v100;
  uint64_t v101;
  std::string *v102;
  __int128 v103;
  std::string *v104;
  std::string::size_type v105;
  std::string *v106;
  __int128 v107;
  std::string *v108;
  uint64_t v109;
  __int128 v110;
  int *v111;
  int v112;
  const char *v113;
  size_t v114;
  std::string *v115;
  std::string::size_type v116;
  char v117;
  std::pair<std::string, std::string> *v118;
  std::__split_buffer<std::pair<std::string, std::string>>::pointer v119;
  _BYTE *v120;
  _BYTE *v121;
  uint64_t v122;
  unsigned int v123;
  _DWORD *v124;
  _QWORD *v125;
  NSObject *v126;
  uint64_t v127;
  AudioUnitParameterID v128;
  int *v129;
  int v130;
  uint64_t v131;
  int *v132;
  uint64_t v133;
  int *v134;
  int v135;
  const char *v136;
  uint64_t v137;
  uint64_t v138;
  int *v139;
  int v140;
  const char *v141;
  std::string *v142;
  __int128 v143;
  std::string *v144;
  __int128 v145;
  std::string *v146;
  std::string::size_type v147;
  std::string *v148;
  __int128 v149;
  std::string *v150;
  __int128 v151;
  size_t v152;
  std::string *v153;
  __int128 v154;
  std::string *v155;
  std::string::size_type v156;
  unint64_t v157;
  __int128 v158;
  uint64_t v159;
  std::string *v160;
  __int128 v161;
  std::string *v162;
  std::string::size_type v163;
  std::string *v164;
  __int128 v165;
  std::string *v166;
  uint64_t v167;
  __int128 v168;
  int *v169;
  int v170;
  const char *v171;
  size_t v172;
  std::string *v173;
  std::string::size_type v174;
  char v175;
  std::pair<std::string, std::string> *v176;
  std::__split_buffer<std::pair<std::string, std::string>>::pointer v177;
  uint64_t v178;
  int *v179;
  int v180;
  const char *v181;
  unint64_t v182;
  __int128 v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  char *v187;
  NSObject *v188;
  NSObject *v189;
  int *v190;
  _QWORD *v191;
  NSObject *v192;
  int *v193;
  NSObject *v194;
  NSObject *v195;
  uint64_t v196;
  int *v197;
  int v198;
  uint64_t v199;
  int *v200;
  uint64_t v201;
  int *v202;
  int v203;
  const char *v204;
  BOOL v205;
  uint64_t v206;
  int *v207;
  int v208;
  const char *v209;
  std::string *v210;
  std::string::size_type v211;
  std::string *v212;
  __int128 v213;
  std::string *v214;
  std::string::size_type v215;
  uint64_t v216;
  int *v217;
  int v218;
  char *v219;
  OSType v220;
  int v221;
  AudioUnit *v222;
  _BYTE *v223;
  char v224;
  char *v225;
  int *v226;
  void *inData[2];
  unsigned __int8 v228;
  std::string v229;
  std::string v230;
  std::string v231;
  std::string v232;
  std::string v233;
  std::string v234;
  void *__p[2];
  int64_t v236;
  std::string v237;
  std::string v238;
  std::string v239;
  _BYTE buf[12];
  __int16 v241;
  int v242;
  __int16 v243;
  _BYTE v244[28];
  uint64_t v245;

  v3 = a3;
  v6 = 0;
  v245 = *MEMORY[0x1E0C80C00];
  v225 = (char *)this + 15897;
  v223 = (char *)this + 4530;
  if (a2 == 56)
    v7 = a3;
  else
    v7 = 1;
  v224 = v7;
  if (a3)
    v8 = VoiceProcessorV2::VPUplinkIndexToSubTypeArray;
  else
    v8 = VoiceProcessorV2::VPDownlinkIndexToSubTypeArray;
  v226 = v8;
  if (a3)
    v9 = 71;
  else
    v9 = 62;
  v10 = v8;
  while (1)
  {
    v11 = *v10;
    v10 += 18;
    if (v11 == a2)
      break;
    if (v9 == ++v6)
    {
      v12 = 0;
      goto LABEL_15;
    }
  }
  v12 = v8[18 * v6 + 1];
LABEL_15:
  v13 = 3496;
  if (a3)
    v13 = 2776;
  v14 = (OpaqueAudioComponentInstance **)((char *)this + 8 * a2 + v13);
  if (VoiceProcessorV2::InstantiateAU(this, 0x61756678u, v12, v14, v12 != 1685287015) || !*v14)
    return;
  InternalBuffers = VoiceProcessorV2::PopulateAUPropsAndParamsLists(this, a2, v3);
  if (InternalBuffers)
  {
LABEL_20:
    if (a2 == 6 && InternalBuffers == 1718772077 && (v3 & 1) == 0)
    {
      if (VPLogScope(void)::once != -1)
        dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
      v16 = (_QWORD *)VPLogScope(void)::scope;
      if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(5, VPLogScope(void)::scope, 0))
      {
        v17 = (*v16 ? *v16 : MEMORY[0x1E0C81028]);
        if (os_log_type_enabled(v17, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)buf = 136315906;
          *(_QWORD *)&buf[4] = "VoiceProcessor_v2.cpp";
          v241 = 1024;
          v242 = 5474;
          v243 = 2080;
          *(_QWORD *)v244 = "(DL-)OCNS";
          *(_WORD *)&v244[8] = 1024;
          *(_DWORD *)&v244[10] = 1718772077;
          _os_log_impl(&dword_1B5ED0000, v17, OS_LOG_TYPE_DEBUG, "%25s:%-5d  <vp> instantiateandconfigureeffectau (%s): warning %d due to non-FFT friendly blocksize", buf, 0x22u);
        }
      }
      v18 = (int *)*((_QWORD *)this + 1570);
      if (v18 && (*v225 || v225[1]))
      {
        if (VPLogScope(void)::once != -1)
          dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
        CALegacyLog::log(v18, 5, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/VoiceProcessor_v2.cpp", 5474, "InstantiateAndConfigureEffectAU", "instantiateandconfigureeffectau (%s): warning %d due to non-FFT friendly blocksize", "(DL-)OCNS", 1718772077);
      }
LABEL_387:
      VoiceProcessorV2::DisposeAU(this, 1635083896, v12, v14, 1);
      return;
    }
    v19 = 0;
    while (1)
    {
      v20 = *v8;
      v8 += 18;
      if (v20 == a2)
        break;
      if (v9 == ++v19)
      {
        v21 = 0;
        goto LABEL_47;
      }
    }
    v21 = (const char *)&v226[18 * v19 + 2];
LABEL_47:
    snprintf(buf, 0x80uLL, "instantiateandconfigureeffectau (%s): error %d", v21, InternalBuffers);
    std::string::basic_string[abi:ne180100]<0>(&v237, "VoiceProcessor_v2.cpp");
    std::to_string(&v230, 5478);
    v28 = std::string::insert(&v230, 0, ":", 1uLL);
    v29 = *(_OWORD *)&v28->__r_.__value_.__l.__data_;
    v231.__r_.__value_.__r.__words[2] = v28->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v231.__r_.__value_.__l.__data_ = v29;
    v28->__r_.__value_.__l.__size_ = 0;
    v28->__r_.__value_.__r.__words[2] = 0;
    v28->__r_.__value_.__r.__words[0] = 0;
    v30 = std::string::append(&v231, ":", 1uLL);
    v31 = *(_OWORD *)&v30->__r_.__value_.__l.__data_;
    v232.__r_.__value_.__r.__words[2] = v30->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v232.__r_.__value_.__l.__data_ = v31;
    v30->__r_.__value_.__l.__size_ = 0;
    v30->__r_.__value_.__r.__words[2] = 0;
    v30->__r_.__value_.__r.__words[0] = 0;
    std::string::basic_string[abi:ne180100]<0>(&v239, "InstantiateAndConfigureEffectAU");
    if ((v239.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v32 = &v239;
    else
      v32 = (std::string *)v239.__r_.__value_.__r.__words[0];
    if ((v239.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(v239.__r_.__value_.__r.__words[2]);
    else
      size = v239.__r_.__value_.__l.__size_;
    v34 = std::string::append(&v232, (const std::string::value_type *)v32, size);
    v35 = *(_OWORD *)&v34->__r_.__value_.__l.__data_;
    v233.__r_.__value_.__r.__words[2] = v34->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v233.__r_.__value_.__l.__data_ = v35;
    v34->__r_.__value_.__l.__size_ = 0;
    v34->__r_.__value_.__r.__words[2] = 0;
    v34->__r_.__value_.__r.__words[0] = 0;
    v36 = std::string::append(&v233, " ", 1uLL);
    v37 = *(_OWORD *)&v36->__r_.__value_.__l.__data_;
    v234.__r_.__value_.__r.__words[2] = v36->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v234.__r_.__value_.__l.__data_ = v37;
    v36->__r_.__value_.__l.__size_ = 0;
    v36->__r_.__value_.__r.__words[2] = 0;
    v36->__r_.__value_.__r.__words[0] = 0;
    v38 = strlen(buf);
    v39 = std::string::append(&v234, buf, v38);
    v40 = *(_OWORD *)&v39->__r_.__value_.__l.__data_;
    v236 = v39->__r_.__value_.__r.__words[2];
    *(_OWORD *)__p = v40;
    v39->__r_.__value_.__l.__size_ = 0;
    v39->__r_.__value_.__r.__words[2] = 0;
    v39->__r_.__value_.__r.__words[0] = 0;
    if (v236 >= 0)
      v41 = __p;
    else
      v41 = (void **)__p[0];
    if (v236 >= 0)
      v42 = HIBYTE(v236);
    else
      v42 = (std::string::size_type)__p[1];
    std::string::append(&v237, (const std::string::value_type *)v41, v42);
    if (SHIBYTE(v236) < 0)
      operator delete(__p[0]);
    if (SHIBYTE(v234.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v234.__r_.__value_.__l.__data_);
    if (SHIBYTE(v233.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v233.__r_.__value_.__l.__data_);
    if (SHIBYTE(v239.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v239.__r_.__value_.__l.__data_);
    if (SHIBYTE(v232.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v232.__r_.__value_.__l.__data_);
    if (SHIBYTE(v231.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v231.__r_.__value_.__l.__data_);
    if (SHIBYTE(v230.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v230.__r_.__value_.__l.__data_);
      if (v3)
        goto LABEL_73;
    }
    else if (v3)
    {
LABEL_73:
      v43 = *((_QWORD *)this + 1998);
      if (v43 >= *((_QWORD *)this + 1999))
      {
        v184 = std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)this + 1997, (__int128 *)&v237);
      }
      else
      {
        if (SHIBYTE(v237.__r_.__value_.__r.__words[2]) < 0)
        {
          std::string::__init_copy_ctor_external(*((std::string **)this + 1998), v237.__r_.__value_.__l.__data_, v237.__r_.__value_.__l.__size_);
        }
        else
        {
          v44 = *(_OWORD *)&v237.__r_.__value_.__l.__data_;
          *(_QWORD *)(v43 + 16) = *((_QWORD *)&v237.__r_.__value_.__l + 2);
          *(_OWORD *)v43 = v44;
        }
        v184 = v43 + 24;
        *((_QWORD *)this + 1998) = v43 + 24;
      }
      *((_QWORD *)this + 1998) = v184;
      goto LABEL_385;
    }
    v182 = *((_QWORD *)this + 2001);
    if (v182 >= *((_QWORD *)this + 2002))
    {
      v185 = std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)this + 2000, (__int128 *)&v237);
    }
    else
    {
      if (SHIBYTE(v237.__r_.__value_.__r.__words[2]) < 0)
      {
        std::string::__init_copy_ctor_external(*((std::string **)this + 2001), v237.__r_.__value_.__l.__data_, v237.__r_.__value_.__l.__size_);
      }
      else
      {
        v183 = *(_OWORD *)&v237.__r_.__value_.__l.__data_;
        *(_QWORD *)(v182 + 16) = *((_QWORD *)&v237.__r_.__value_.__l + 2);
        *(_OWORD *)v182 = v183;
      }
      v185 = v182 + 24;
      *((_QWORD *)this + 2001) = v182 + 24;
    }
    *((_QWORD *)this + 2001) = v185;
LABEL_385:
    if (SHIBYTE(v237.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v237.__r_.__value_.__l.__data_);
    goto LABEL_387;
  }
  memset(&v237, 0, sizeof(v237));
  __p[0] = 0;
  __p[1] = 0;
  v236 = 0;
  v22 = (char *)this + 24 * a2;
  if (v3)
  {
    v23 = (std::string *)(v22 + 7032);
    if (&v237 != v23)
    {
      v24 = *((_QWORD *)this + 3 * a2 + 880);
      std::vector<AUPropertyItem>::__assign_with_size[abi:ne180100]<AUPropertyItem*,AUPropertyItem*>((uint64_t)&v237, v23->__r_.__value_.__r.__words[0], v24, 0xAAAAAAAAAAAAAAABLL * ((int64_t)(v24 - v23->__r_.__value_.__r.__words[0]) >> 3));
    }
    v25 = (char *)this + 24 * a2;
    v26 = (uint64_t **)(v25 + 4688);
    v27 = 4696;
  }
  else
  {
    v45 = (std::string *)(v22 + 10904);
    if (&v237 != v45)
    {
      v46 = *((_QWORD *)this + 3 * a2 + 1364);
      std::vector<AUPropertyItem>::__assign_with_size[abi:ne180100]<AUPropertyItem*,AUPropertyItem*>((uint64_t)&v237, v45->__r_.__value_.__r.__words[0], v46, 0xAAAAAAAAAAAAAAABLL * ((int64_t)(v46 - v45->__r_.__value_.__r.__words[0]) >> 3));
    }
    v25 = (char *)this + 24 * a2;
    v26 = (uint64_t **)(v25 + 8848);
    v27 = 8856;
  }
  std::vector<std::pair<unsigned int,float>>::__assign_with_size[abi:ne180100]<std::pair<unsigned int,float>*,std::pair<unsigned int,float>*>(__p, *v26, *(uint64_t **)&v25[v27], (uint64_t)(*(_QWORD *)&v25[v27] - (_QWORD)*v26) >> 3);
  v220 = v12;
  if (a2 == 27)
  {
    *(_DWORD *)buf = 2;
    InternalBuffers = AudioUnitSetProperty(*v14, 0xBu, 1u, 0, buf, 4u);
  }
  else
  {
    InternalBuffers = 0;
  }
  v47 = v237.__r_.__value_.__r.__words[0];
  v221 = v3;
  if (v237.__r_.__value_.__l.__size_ != v237.__r_.__value_.__r.__words[0])
  {
    v48 = 0;
    v49 = 0;
    while (1)
    {
      v50 = v47 + 24 * v48;
      v52 = *(_DWORD *)(v50 + 8);
      v51 = *(unsigned int *)(v50 + 12);
      v53 = *(const void **)(v50 + 16);
      v234.__r_.__value_.__r.__words[0] = *(_QWORD *)v50;
      *(_OWORD *)&v234.__r_.__value_.__r.__words[1] = v52;
      AUPropertyItem::SetData((AUPropertyItem *)&v234, v51, v53);
      v54 = v14;
      v55 = *v14;
      data = (int)v234.__r_.__value_.__l.__data_;
      v57 = (double *)v234.__r_.__value_.__r.__words[2];
      InternalBuffers = AudioUnitSetProperty(v55, (AudioUnitPropertyID)v234.__r_.__value_.__l.__data_, HIDWORD(v234.__r_.__value_.__r.__words[0]), v234.__r_.__value_.__r.__words[1], (const void *)v234.__r_.__value_.__r.__words[2], HIDWORD(v234.__r_.__value_.__r.__words[1]));
      if (a2 == 43)
      {
        if (data == 3902)
        {
          if (VPLogScope(void)::once != -1)
            dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
          v62 = (_QWORD *)VPLogScope(void)::scope;
          if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(3, VPLogScope(void)::scope, 0))
          {
            v63 = (*v62 ? *v62 : MEMORY[0x1E0C81028]);
            if (os_log_type_enabled(v63, OS_LOG_TYPE_DEFAULT))
            {
              v64 = *(_DWORD *)v57;
              *(_DWORD *)buf = 136315906;
              *(_QWORD *)&buf[4] = "VoiceProcessor_v2.cpp";
              v241 = 1024;
              v242 = 5380;
              v243 = 1024;
              *(_DWORD *)v244 = 3902;
              *(_WORD *)&v244[4] = 1024;
              *(_DWORD *)&v244[6] = v64;
              _os_log_impl(&dword_1B5ED0000, v63, OS_LOG_TYPE_DEFAULT, "%25s:%-5d  <vp> Setting downlink TweakaLeakIR property ID: %d, value: %d", buf, 0x1Eu);
            }
          }
          v65 = (int *)*((_QWORD *)this + 1570);
          if (v65 && (*v225 || v225[1]))
          {
            if (VPLogScope(void)::once != -1)
              dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
            CALegacyLog::log(v65, 3, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/VoiceProcessor_v2.cpp", 5380, "InstantiateAndConfigureEffectAU", "Setting downlink TweakaLeakIR property ID: %d, value: %d", 3902, *(_DWORD *)v57);
          }
        }
        else if (data == 3901)
        {
          if (VPLogScope(void)::once != -1)
            dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
          v58 = (_QWORD *)VPLogScope(void)::scope;
          if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(3, VPLogScope(void)::scope, 0))
          {
            v59 = (*v58 ? *v58 : MEMORY[0x1E0C81028]);
            if (os_log_type_enabled(v59, OS_LOG_TYPE_DEFAULT))
            {
              v60 = *(_QWORD *)v57;
              *(_DWORD *)buf = 136315906;
              *(_QWORD *)&buf[4] = "VoiceProcessor_v2.cpp";
              v241 = 1024;
              v242 = 5376;
              v243 = 1024;
              *(_DWORD *)v244 = 3901;
              *(_WORD *)&v244[4] = 2048;
              *(_QWORD *)&v244[6] = v60;
              _os_log_impl(&dword_1B5ED0000, v59, OS_LOG_TYPE_DEFAULT, "%25s:%-5d  <vp> Setting downlink TweakaLeakIR property ID: %d, value: %f", buf, 0x22u);
            }
          }
          v61 = (int *)*((_QWORD *)this + 1570);
          if (v61 && (*v225 || v225[1]))
          {
            if (VPLogScope(void)::once != -1)
              dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
            CALegacyLog::log(v61, 3, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/VoiceProcessor_v2.cpp", 5376, "InstantiateAndConfigureEffectAU", "Setting downlink TweakaLeakIR property ID: %d, value: %f", 3901, *v57);
          }
        }
      }
      if (!InternalBuffers)
        break;
      if (VPLogScope(void)::once != -1)
        dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
      v66 = (_QWORD *)VPLogScope(void)::scope;
      if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(1, VPLogScope(void)::scope, 0))
      {
        v67 = (*v66 ? *v66 : MEMORY[0x1E0C81028]);
        if (os_log_type_enabled(v67, OS_LOG_TYPE_ERROR))
        {
          v68 = 0;
          v69 = v8;
          while (1)
          {
            v70 = *v69;
            v69 += 18;
            if (v70 == a2)
              break;
            if (v9 == ++v68)
            {
              v71 = 0;
              goto LABEL_132;
            }
          }
          v71 = (uint64_t)&v8[18 * v68 + 2];
LABEL_132:
          *(_DWORD *)buf = 136316162;
          *(_QWORD *)&buf[4] = "VoiceProcessor_v2.cpp";
          v241 = 1024;
          v242 = 5385;
          v243 = 1024;
          *(_DWORD *)v244 = data;
          *(_WORD *)&v244[4] = 2080;
          *(_QWORD *)&v244[6] = v71;
          *(_WORD *)&v244[14] = 1024;
          *(_DWORD *)&v244[16] = InternalBuffers;
          _os_log_impl(&dword_1B5ED0000, v67, OS_LOG_TYPE_ERROR, "%25s:%-5d  >vp> Error in setting proerty ID %u to AU %s error %d", buf, 0x28u);
        }
      }
      v75 = (int *)*((_QWORD *)this + 1570);
      if (v75 && (*v225 || v225[1]))
      {
        if (VPLogScope(void)::once != -1)
          dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
        v76 = 0;
        v77 = v8;
        while (1)
        {
          v78 = *v77;
          v77 += 18;
          if (v78 == a2)
            break;
          if (v9 == ++v76)
          {
            v79 = 0;
            goto LABEL_143;
          }
        }
        v79 = (const char *)&v8[18 * v76 + 2];
LABEL_143:
        CALegacyLog::log(v75, 1, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/VoiceProcessor_v2.cpp", 5385, "InstantiateAndConfigureEffectAU", "Error in setting proerty ID %u to AU %s error %d", data, v79, InternalBuffers);
      }
      if ((v224 & 1) != 0)
      {
        v72 = v49;
        v74 = 0;
        v73 = 21;
        goto LABEL_146;
      }
      v80 = 0;
      v81 = v8;
      v14 = v54;
      while (1)
      {
        v82 = *v81;
        v81 += 18;
        if (v82 == 56)
          break;
        if (v9 == ++v80)
        {
          v83 = 0;
          goto LABEL_152;
        }
      }
      v83 = (const char *)&v8[18 * v80 + 2];
LABEL_152:
      snprintf(buf, 0x80uLL, "_vp<SERIOUS ERROR>: (%d) error setting property %d on %s, attenuating the dl final gain by 20dB", InternalBuffers, LODWORD(v234.__r_.__value_.__l.__data_), v83);
      std::string::basic_string[abi:ne180100]<0>(&v233, "VoiceProcessor_v2.cpp");
      std::to_string(&v229, 5388);
      v84 = std::string::insert(&v229, 0, ":", 1uLL);
      v85 = *(_OWORD *)&v84->__r_.__value_.__l.__data_;
      v238.__r_.__value_.__r.__words[2] = v84->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v238.__r_.__value_.__l.__data_ = v85;
      v84->__r_.__value_.__l.__size_ = 0;
      v84->__r_.__value_.__r.__words[2] = 0;
      v84->__r_.__value_.__r.__words[0] = 0;
      v86 = std::string::append(&v238, ":", 1uLL);
      v87 = *(_OWORD *)&v86->__r_.__value_.__l.__data_;
      v239.__r_.__value_.__r.__words[2] = v86->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v239.__r_.__value_.__l.__data_ = v87;
      v86->__r_.__value_.__l.__size_ = 0;
      v86->__r_.__value_.__r.__words[2] = 0;
      v86->__r_.__value_.__r.__words[0] = 0;
      std::string::basic_string[abi:ne180100]<0>(inData, "InstantiateAndConfigureEffectAU");
      if ((v228 & 0x80u) == 0)
        v88 = inData;
      else
        v88 = (void **)inData[0];
      if ((v228 & 0x80u) == 0)
        v89 = v228;
      else
        v89 = (std::string::size_type)inData[1];
      v90 = std::string::append(&v239, (const std::string::value_type *)v88, v89);
      v91 = *(_OWORD *)&v90->__r_.__value_.__l.__data_;
      v230.__r_.__value_.__r.__words[2] = v90->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v230.__r_.__value_.__l.__data_ = v91;
      v90->__r_.__value_.__l.__size_ = 0;
      v90->__r_.__value_.__r.__words[2] = 0;
      v90->__r_.__value_.__r.__words[0] = 0;
      v92 = std::string::append(&v230, " ", 1uLL);
      v93 = *(_OWORD *)&v92->__r_.__value_.__l.__data_;
      v231.__r_.__value_.__r.__words[2] = v92->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v231.__r_.__value_.__l.__data_ = v93;
      v92->__r_.__value_.__l.__size_ = 0;
      v92->__r_.__value_.__r.__words[2] = 0;
      v92->__r_.__value_.__r.__words[0] = 0;
      v94 = strlen(buf);
      v95 = std::string::append(&v231, buf, v94);
      v96 = *(_OWORD *)&v95->__r_.__value_.__l.__data_;
      v232.__r_.__value_.__r.__words[2] = v95->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v232.__r_.__value_.__l.__data_ = v96;
      v95->__r_.__value_.__l.__size_ = 0;
      v95->__r_.__value_.__r.__words[2] = 0;
      v95->__r_.__value_.__r.__words[0] = 0;
      if ((v232.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v97 = &v232;
      else
        v97 = (std::string *)v232.__r_.__value_.__r.__words[0];
      if ((v232.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v98 = HIBYTE(v232.__r_.__value_.__r.__words[2]);
      else
        v98 = v232.__r_.__value_.__l.__size_;
      std::string::append(&v233, (const std::string::value_type *)v97, v98);
      if (SHIBYTE(v232.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v232.__r_.__value_.__l.__data_);
      if (SHIBYTE(v231.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v231.__r_.__value_.__l.__data_);
      if (SHIBYTE(v230.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v230.__r_.__value_.__l.__data_);
      if ((char)v228 < 0)
        operator delete(inData[0]);
      if (SHIBYTE(v239.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v239.__r_.__value_.__l.__data_);
      if (SHIBYTE(v238.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v238.__r_.__value_.__l.__data_);
      if (SHIBYTE(v229.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v229.__r_.__value_.__l.__data_);
      v99 = *((_QWORD *)this + 2001);
      if (v99 >= *((_QWORD *)this + 2002))
      {
        v101 = std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)this + 2000, (__int128 *)&v233);
      }
      else
      {
        if (SHIBYTE(v233.__r_.__value_.__r.__words[2]) < 0)
        {
          std::string::__init_copy_ctor_external(*((std::string **)this + 2001), v233.__r_.__value_.__l.__data_, v233.__r_.__value_.__l.__size_);
        }
        else
        {
          v100 = *(_OWORD *)&v233.__r_.__value_.__l.__data_;
          *(_QWORD *)(v99 + 16) = *((_QWORD *)&v233.__r_.__value_.__l + 2);
          *(_OWORD *)v99 = v100;
        }
        v101 = v99 + 24;
        *((_QWORD *)this + 2001) = v99 + 24;
      }
      *((_QWORD *)this + 2001) = v101;
      if (SHIBYTE(v233.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v233.__r_.__value_.__l.__data_);
      std::to_string(&v230, InternalBuffers);
      v102 = std::string::append(&v230, " error setting property ", 0x18uLL);
      v103 = *(_OWORD *)&v102->__r_.__value_.__l.__data_;
      v231.__r_.__value_.__r.__words[2] = v102->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v231.__r_.__value_.__l.__data_ = v103;
      v102->__r_.__value_.__l.__size_ = 0;
      v102->__r_.__value_.__r.__words[2] = 0;
      v102->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v239, (int)v234.__r_.__value_.__l.__data_);
      if ((v239.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v104 = &v239;
      else
        v104 = (std::string *)v239.__r_.__value_.__r.__words[0];
      if ((v239.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v105 = HIBYTE(v239.__r_.__value_.__r.__words[2]);
      else
        v105 = v239.__r_.__value_.__l.__size_;
      v106 = std::string::append(&v231, (const std::string::value_type *)v104, v105);
      v107 = *(_OWORD *)&v106->__r_.__value_.__l.__data_;
      v232.__r_.__value_.__r.__words[2] = v106->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v232.__r_.__value_.__l.__data_ = v107;
      v106->__r_.__value_.__l.__size_ = 0;
      v106->__r_.__value_.__r.__words[2] = 0;
      v106->__r_.__value_.__r.__words[0] = 0;
      v108 = std::string::append(&v232, " on ", 4uLL);
      v109 = 0;
      v110 = *(_OWORD *)&v108->__r_.__value_.__l.__data_;
      v233.__r_.__value_.__r.__words[2] = v108->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v233.__r_.__value_.__l.__data_ = v110;
      v108->__r_.__value_.__l.__size_ = 0;
      v108->__r_.__value_.__r.__words[2] = 0;
      v108->__r_.__value_.__r.__words[0] = 0;
      v111 = v8;
      while (1)
      {
        v112 = *v111;
        v111 += 18;
        if (v112 == 56)
          break;
        if (v9 == ++v109)
        {
          v113 = 0;
          goto LABEL_197;
        }
      }
      v113 = (const char *)&v8[18 * v109 + 2];
LABEL_197:
      v72 = v49;
      v114 = strlen(v113);
      v115 = std::string::append(&v233, v113, v114);
      v116 = v115->__r_.__value_.__r.__words[0];
      v238.__r_.__value_.__r.__words[0] = v115->__r_.__value_.__l.__size_;
      *(std::string::size_type *)((char *)v238.__r_.__value_.__r.__words + 7) = *(std::string::size_type *)((char *)&v115->__r_.__value_.__r.__words[1] + 7);
      v117 = HIBYTE(v115->__r_.__value_.__r.__words[2]);
      v115->__r_.__value_.__l.__size_ = 0;
      v115->__r_.__value_.__r.__words[2] = 0;
      v115->__r_.__value_.__r.__words[0] = 0;
      std::string::basic_string[abi:ne180100]<0>(buf, "vp_spp_error");
      *(_QWORD *)&v244[4] = v116;
      *(_QWORD *)&v244[12] = v238.__r_.__value_.__r.__words[0];
      *(_QWORD *)&v244[19] = *(std::string::size_type *)((char *)v238.__r_.__value_.__r.__words + 7);
      v244[27] = v117;
      if (SHIBYTE(v233.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v233.__r_.__value_.__l.__data_);
      if (SHIBYTE(v232.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v232.__r_.__value_.__l.__data_);
      if (SHIBYTE(v239.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v239.__r_.__value_.__l.__data_);
      if (SHIBYTE(v231.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v231.__r_.__value_.__l.__data_);
      if (SHIBYTE(v230.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v230.__r_.__value_.__l.__data_);
      v118 = (std::pair<std::string, std::string> *)*((_QWORD *)this + 2007);
      if ((unint64_t)v118 >= *((_QWORD *)this + 2008))
      {
        v119 = std::vector<std::pair<std::string,std::string>>::__push_back_slow_path<std::pair<std::string,std::string> const&>((std::__split_buffer<std::pair<std::string, std::string>>::pointer *)this + 2006, (__int128 *)buf);
      }
      else
      {
        std::pair<std::string,std::string>::pair[abi:ne180100](*((std::string **)this + 2007), (__int128 *)buf);
        v119 = v118 + 1;
        *((_QWORD *)this + 2007) = v118 + 1;
      }
      *((_QWORD *)this + 2007) = v119;
      if ((v244[27] & 0x80000000) != 0)
        operator delete(*(void **)&v244[4]);
      if ((v244[3] & 0x80000000) != 0)
        operator delete(*(void **)buf);
      v73 = 0;
      v74 = 1;
      *v223 = 1;
LABEL_215:
      if (v234.__r_.__value_.__r.__words[2])
        free((void *)v234.__r_.__value_.__r.__words[2]);
      if ((v74 & 1) == 0)
        goto LABEL_405;
      v48 = (v72 + 1);
      v47 = v237.__r_.__value_.__r.__words[0];
      v49 = v72 + 1;
      if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v237.__r_.__value_.__l.__size_ - v237.__r_.__value_.__r.__words[0]) >> 3) <= v48)
        goto LABEL_219;
    }
    v72 = v49;
    v73 = 0;
    v74 = 1;
LABEL_146:
    v14 = v54;
    goto LABEL_215;
  }
LABEL_219:
  v222 = v14;
  v120 = __p[0];
  v121 = __p[1];
  if (__p[1] != __p[0])
  {
    v122 = 0;
    v123 = 0;
    do
    {
      v124 = &v120[8 * v122];
      InternalBuffers = AudioUnitSetParameter(*v222, *v124, 0, 0, *((AudioUnitParameterValue *)v124 + 1), 0);
      if (InternalBuffers)
      {
        if (VPLogScope(void)::once != -1)
          dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
        v125 = (_QWORD *)VPLogScope(void)::scope;
        if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(1, VPLogScope(void)::scope, 0))
        {
          v126 = (*v125 ? *v125 : MEMORY[0x1E0C81028]);
          if (os_log_type_enabled(v126, OS_LOG_TYPE_ERROR))
          {
            v127 = 0;
            v128 = *v124;
            v129 = v8;
            while (1)
            {
              v130 = *v129;
              v129 += 18;
              if (v130 == a2)
                break;
              if (v9 == ++v127)
              {
                v131 = 0;
                goto LABEL_235;
              }
            }
            v131 = (uint64_t)&v8[18 * v127 + 2];
LABEL_235:
            *(_DWORD *)buf = 136316162;
            *(_QWORD *)&buf[4] = "VoiceProcessor_v2.cpp";
            v241 = 1024;
            v242 = 5402;
            v243 = 1024;
            *(_DWORD *)v244 = v128;
            *(_WORD *)&v244[4] = 2080;
            *(_QWORD *)&v244[6] = v131;
            *(_WORD *)&v244[14] = 1024;
            *(_DWORD *)&v244[16] = InternalBuffers;
            _os_log_impl(&dword_1B5ED0000, v126, OS_LOG_TYPE_ERROR, "%25s:%-5d  >vp> Error in setting parameter ID %u to AU %s error %d", buf, 0x28u);
          }
        }
        v132 = (int *)*((_QWORD *)this + 1570);
        if (v132 && (*v225 || v225[1]))
        {
          if (VPLogScope(void)::once != -1)
            dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
          v133 = 0;
          v134 = v8;
          while (1)
          {
            v135 = *v134;
            v134 += 18;
            if (v135 == a2)
              break;
            if (v9 == ++v133)
            {
              v136 = 0;
              goto LABEL_246;
            }
          }
          v136 = (const char *)&v8[18 * v133 + 2];
LABEL_246:
          CALegacyLog::log(v132, 1, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/VoiceProcessor_v2.cpp", 5402, "InstantiateAndConfigureEffectAU", "Error in setting parameter ID %u to AU %s error %d", *v124, v136, InternalBuffers);
        }
        if ((v224 & 1) != 0)
        {
          v73 = 21;
          v12 = v220;
          v14 = v222;
          goto LABEL_406;
        }
        v137 = 0;
        v138 = 8 * v122;
        v139 = v8;
        while (1)
        {
          v140 = *v139;
          v139 += 18;
          if (v140 == 56)
            break;
          if (v9 == ++v137)
          {
            v141 = 0;
            goto LABEL_253;
          }
        }
        v141 = (const char *)&v8[18 * v137 + 2];
LABEL_253:
        snprintf(buf, 0x80uLL, "_vp<SERIOUS ERROR>: (%d) error setting parameter %d on %s, attenuating the dl final gain by 20dB", InternalBuffers, *(_DWORD *)((char *)__p[0] + v138), v141);
        std::string::basic_string[abi:ne180100]<0>(&v234, "VoiceProcessor_v2.cpp");
        std::to_string(&v238, 5405);
        v142 = std::string::insert(&v238, 0, ":", 1uLL);
        v143 = *(_OWORD *)&v142->__r_.__value_.__l.__data_;
        v239.__r_.__value_.__r.__words[2] = v142->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v239.__r_.__value_.__l.__data_ = v143;
        v142->__r_.__value_.__l.__size_ = 0;
        v142->__r_.__value_.__r.__words[2] = 0;
        v142->__r_.__value_.__r.__words[0] = 0;
        v144 = std::string::append(&v239, ":", 1uLL);
        v145 = *(_OWORD *)&v144->__r_.__value_.__l.__data_;
        v230.__r_.__value_.__r.__words[2] = v144->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v230.__r_.__value_.__l.__data_ = v145;
        v144->__r_.__value_.__l.__size_ = 0;
        v144->__r_.__value_.__r.__words[2] = 0;
        v144->__r_.__value_.__r.__words[0] = 0;
        std::string::basic_string[abi:ne180100]<0>(&v229, "InstantiateAndConfigureEffectAU");
        if ((v229.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v146 = &v229;
        else
          v146 = (std::string *)v229.__r_.__value_.__r.__words[0];
        if ((v229.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v147 = HIBYTE(v229.__r_.__value_.__r.__words[2]);
        else
          v147 = v229.__r_.__value_.__l.__size_;
        v148 = std::string::append(&v230, (const std::string::value_type *)v146, v147);
        v149 = *(_OWORD *)&v148->__r_.__value_.__l.__data_;
        v231.__r_.__value_.__r.__words[2] = v148->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v231.__r_.__value_.__l.__data_ = v149;
        v148->__r_.__value_.__l.__size_ = 0;
        v148->__r_.__value_.__r.__words[2] = 0;
        v148->__r_.__value_.__r.__words[0] = 0;
        v150 = std::string::append(&v231, " ", 1uLL);
        v151 = *(_OWORD *)&v150->__r_.__value_.__l.__data_;
        v232.__r_.__value_.__r.__words[2] = v150->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v232.__r_.__value_.__l.__data_ = v151;
        v150->__r_.__value_.__l.__size_ = 0;
        v150->__r_.__value_.__r.__words[2] = 0;
        v150->__r_.__value_.__r.__words[0] = 0;
        v152 = strlen(buf);
        v153 = std::string::append(&v232, buf, v152);
        v154 = *(_OWORD *)&v153->__r_.__value_.__l.__data_;
        v233.__r_.__value_.__r.__words[2] = v153->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v233.__r_.__value_.__l.__data_ = v154;
        v153->__r_.__value_.__l.__size_ = 0;
        v153->__r_.__value_.__r.__words[2] = 0;
        v153->__r_.__value_.__r.__words[0] = 0;
        if ((v233.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v155 = &v233;
        else
          v155 = (std::string *)v233.__r_.__value_.__r.__words[0];
        if ((v233.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v156 = HIBYTE(v233.__r_.__value_.__r.__words[2]);
        else
          v156 = v233.__r_.__value_.__l.__size_;
        std::string::append(&v234, (const std::string::value_type *)v155, v156);
        if (SHIBYTE(v233.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v233.__r_.__value_.__l.__data_);
        if (SHIBYTE(v232.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v232.__r_.__value_.__l.__data_);
        if (SHIBYTE(v231.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v231.__r_.__value_.__l.__data_);
        if (SHIBYTE(v229.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v229.__r_.__value_.__l.__data_);
        if (SHIBYTE(v230.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v230.__r_.__value_.__l.__data_);
        if (SHIBYTE(v239.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v239.__r_.__value_.__l.__data_);
        if (SHIBYTE(v238.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v238.__r_.__value_.__l.__data_);
        v157 = *((_QWORD *)this + 2001);
        if (v157 >= *((_QWORD *)this + 2002))
        {
          v159 = std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)this + 2000, (__int128 *)&v234);
        }
        else
        {
          if (SHIBYTE(v234.__r_.__value_.__r.__words[2]) < 0)
          {
            std::string::__init_copy_ctor_external(*((std::string **)this + 2001), v234.__r_.__value_.__l.__data_, v234.__r_.__value_.__l.__size_);
          }
          else
          {
            v158 = *(_OWORD *)&v234.__r_.__value_.__l.__data_;
            *(_QWORD *)(v157 + 16) = *((_QWORD *)&v234.__r_.__value_.__l + 2);
            *(_OWORD *)v157 = v158;
          }
          v159 = v157 + 24;
          *((_QWORD *)this + 2001) = v157 + 24;
        }
        *((_QWORD *)this + 2001) = v159;
        if (SHIBYTE(v234.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v234.__r_.__value_.__l.__data_);
        std::to_string(&v231, InternalBuffers);
        v160 = std::string::append(&v231, " error setting parameter ", 0x19uLL);
        v161 = *(_OWORD *)&v160->__r_.__value_.__l.__data_;
        v232.__r_.__value_.__r.__words[2] = v160->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v232.__r_.__value_.__l.__data_ = v161;
        v160->__r_.__value_.__l.__size_ = 0;
        v160->__r_.__value_.__r.__words[2] = 0;
        v160->__r_.__value_.__r.__words[0] = 0;
        std::to_string(&v230, *(_DWORD *)((char *)__p[0] + v138));
        if ((v230.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v162 = &v230;
        else
          v162 = (std::string *)v230.__r_.__value_.__r.__words[0];
        if ((v230.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v163 = HIBYTE(v230.__r_.__value_.__r.__words[2]);
        else
          v163 = v230.__r_.__value_.__l.__size_;
        v164 = std::string::append(&v232, (const std::string::value_type *)v162, v163);
        v165 = *(_OWORD *)&v164->__r_.__value_.__l.__data_;
        v233.__r_.__value_.__r.__words[2] = v164->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v233.__r_.__value_.__l.__data_ = v165;
        v164->__r_.__value_.__l.__size_ = 0;
        v164->__r_.__value_.__r.__words[2] = 0;
        v164->__r_.__value_.__r.__words[0] = 0;
        v166 = std::string::append(&v233, " on ", 4uLL);
        v167 = 0;
        v168 = *(_OWORD *)&v166->__r_.__value_.__l.__data_;
        v234.__r_.__value_.__r.__words[2] = v166->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v234.__r_.__value_.__l.__data_ = v168;
        v166->__r_.__value_.__l.__size_ = 0;
        v166->__r_.__value_.__r.__words[2] = 0;
        v166->__r_.__value_.__r.__words[0] = 0;
        v169 = v8;
        while (1)
        {
          v170 = *v169;
          v169 += 18;
          if (v170 == 56)
            break;
          if (v9 == ++v167)
          {
            v171 = 0;
            goto LABEL_298;
          }
        }
        v171 = (const char *)&v8[18 * v167 + 2];
LABEL_298:
        v172 = strlen(v171);
        v173 = std::string::append(&v234, v171, v172);
        v174 = v173->__r_.__value_.__r.__words[0];
        v239.__r_.__value_.__r.__words[0] = v173->__r_.__value_.__l.__size_;
        *(std::string::size_type *)((char *)v239.__r_.__value_.__r.__words + 7) = *(std::string::size_type *)((char *)&v173->__r_.__value_.__r.__words[1] + 7);
        v175 = HIBYTE(v173->__r_.__value_.__r.__words[2]);
        v173->__r_.__value_.__l.__size_ = 0;
        v173->__r_.__value_.__r.__words[2] = 0;
        v173->__r_.__value_.__r.__words[0] = 0;
        std::string::basic_string[abi:ne180100]<0>(buf, "vp_spp_error");
        *(_QWORD *)&v244[4] = v174;
        *(_QWORD *)&v244[12] = v239.__r_.__value_.__r.__words[0];
        *(_QWORD *)&v244[19] = *(std::string::size_type *)((char *)v239.__r_.__value_.__r.__words + 7);
        v244[27] = v175;
        if (SHIBYTE(v234.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v234.__r_.__value_.__l.__data_);
        if (SHIBYTE(v233.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v233.__r_.__value_.__l.__data_);
        if (SHIBYTE(v230.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v230.__r_.__value_.__l.__data_);
        if (SHIBYTE(v232.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v232.__r_.__value_.__l.__data_);
        if (SHIBYTE(v231.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v231.__r_.__value_.__l.__data_);
        v176 = (std::pair<std::string, std::string> *)*((_QWORD *)this + 2007);
        if ((unint64_t)v176 >= *((_QWORD *)this + 2008))
        {
          v177 = std::vector<std::pair<std::string,std::string>>::__push_back_slow_path<std::pair<std::string,std::string> const&>((std::__split_buffer<std::pair<std::string, std::string>>::pointer *)this + 2006, (__int128 *)buf);
        }
        else
        {
          std::pair<std::string,std::string>::pair[abi:ne180100](*((std::string **)this + 2007), (__int128 *)buf);
          v177 = v176 + 1;
          *((_QWORD *)this + 2007) = v176 + 1;
        }
        *((_QWORD *)this + 2007) = v177;
        if ((v244[27] & 0x80000000) != 0)
          operator delete(*(void **)&v244[4]);
        if ((v244[3] & 0x80000000) != 0)
          operator delete(*(void **)buf);
        *v223 = 1;
        v120 = __p[0];
        v121 = __p[1];
      }
      v122 = ++v123;
    }
    while (v123 < (unint64_t)((v121 - v120) >> 3));
  }
  v178 = 0;
  v179 = v8;
  v14 = v222;
  while (1)
  {
    v180 = *v179;
    v179 += 18;
    if (v180 == a2)
      break;
    if (v9 == ++v178)
    {
      v181 = 0;
      goto LABEL_329;
    }
  }
  v181 = (const char *)&v8[18 * v178 + 2];
LABEL_329:
  inData[0] = 0;
  if (!v181)
    v181 = "?";
  inData[0] = (void *)CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, CFSTR("%s"), v181);
  if (inData[0])
  {
    AudioUnitSetProperty(*v222, 0x36u, 0, 0, inData, 8u);
    CFRelease(inData[0]);
    inData[0] = 0;
  }
  if (v221)
  {
    v186 = 0;
    while (dword_1B66A2B90[v186] != a2)
    {
      if (++v186 == 4)
        goto LABEL_342;
    }
    *(_QWORD *)buf = 0;
    v187 = (char *)this + 24 * v186;
    *(_QWORD *)buf = CFNumberCreate(0, kCFNumberSInt32Type, v187 + 8752);
    if (*(_QWORD *)buf)
    {
      InternalBuffers = AudioUnitSetProperty(*v222, 0x1199u, 0, 0, buf, 8u);
      CFRelease(*(CFTypeRef *)buf);
    }
    InternalBuffers |= AudioUnitSetProperty(*v222, 0x1198u, 0, 0, v187 + 8736, 8u);
LABEL_342:
    if (InternalBuffers)
    {
      if (VPLogScope(void)::once != -1)
        dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
      v188 = CALog::LogObjIfEnabled(1, VPLogScope(void)::scope);
      if (v188)
      {
        v189 = v188;
        if (os_log_type_enabled(v188, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136315650;
          *(_QWORD *)&buf[4] = "VoiceProcessor_v2.cpp";
          v241 = 1024;
          v242 = 5444;
          v243 = 1024;
          *(_DWORD *)v244 = InternalBuffers;
          _os_log_impl(&dword_1B5ED0000, v189, OS_LOG_TYPE_ERROR, "%25s:%-5d  >vp> instantiateandconfigureeffectau: error (%d) loading FIR coefficients!!! Setting FIR to passthrough", buf, 0x18u);
        }
      }
      v190 = (int *)*((_QWORD *)this + 1570);
      if (v190 && (*v225 || v225[1]))
      {
        if (VPLogScope(void)::once != -1)
          dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
        CALegacyLog::log(v190, 1, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/VoiceProcessor_v2.cpp", 5444, "InstantiateAndConfigureEffectAU", "instantiateandconfigureeffectau: error (%d) loading FIR coefficients!!! Setting FIR to passthrough", InternalBuffers);
      }
    }
  }
  InternalBuffers = SetDoNotAllocateInternalBuffers(*v222);
  if (InternalBuffers)
  {
    if (VPLogScope(void)::once != -1)
      dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
    v191 = (_QWORD *)VPLogScope(void)::scope;
    if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(1, VPLogScope(void)::scope, 0))
    {
      v192 = (*v191 ? *v191 : MEMORY[0x1E0C81028]);
      if (os_log_type_enabled(v192, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315650;
        *(_QWORD *)&buf[4] = "VoiceProcessor_v2.cpp";
        v241 = 1024;
        v242 = 5450;
        v243 = 1024;
        *(_DWORD *)v244 = InternalBuffers;
        _os_log_impl(&dword_1B5ED0000, v192, OS_LOG_TYPE_ERROR, "%25s:%-5d  >vp> Unable to set not to allocate internal AU buffers with error (%d)", buf, 0x18u);
      }
    }
    v193 = (int *)*((_QWORD *)this + 1570);
    if (v193 && (*v225 || v225[1]))
    {
      if (VPLogScope(void)::once != -1)
        dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
      CALegacyLog::log(v193, 1, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/VoiceProcessor_v2.cpp", 5450, "InstantiateAndConfigureEffectAU", "Unable to set not to allocate internal AU buffers with error (%d)", InternalBuffers);
    }
    goto LABEL_404;
  }
  InternalBuffers = AudioUnitInitialize(*v222);
  if (!InternalBuffers)
  {
    v73 = 0;
LABEL_405:
    v12 = v220;
    goto LABEL_406;
  }
  if (VPLogScope(void)::once != -1)
    dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
  v194 = CALog::LogObjIfEnabled(1, VPLogScope(void)::scope);
  if (v194)
  {
    v195 = v194;
    if (os_log_type_enabled(v194, OS_LOG_TYPE_ERROR))
    {
      v196 = 0;
      v197 = v8;
      while (1)
      {
        v198 = *v197;
        v197 += 18;
        if (v198 == a2)
          break;
        if (v9 == ++v196)
        {
          v199 = 0;
          goto LABEL_391;
        }
      }
      v199 = (uint64_t)&v8[18 * v196 + 2];
LABEL_391:
      *(_DWORD *)buf = 136315906;
      *(_QWORD *)&buf[4] = "VoiceProcessor_v2.cpp";
      v241 = 1024;
      v242 = 5457;
      v243 = 2080;
      *(_QWORD *)v244 = v199;
      *(_WORD *)&v244[8] = 1024;
      *(_DWORD *)&v244[10] = InternalBuffers;
      _os_log_impl(&dword_1B5ED0000, v195, OS_LOG_TYPE_ERROR, "%25s:%-5d  >vp> Error in initializing AU %s error %d", buf, 0x22u);
    }
  }
  v200 = (int *)*((_QWORD *)this + 1570);
  if (v200 && (*v225 || v225[1]))
  {
    if (VPLogScope(void)::once != -1)
      dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
    v201 = 0;
    v202 = v8;
    while (1)
    {
      v203 = *v202;
      v202 += 18;
      if (v203 == a2)
        break;
      if (v9 == ++v201)
      {
        v204 = 0;
        goto LABEL_402;
      }
    }
    v204 = (const char *)&v8[18 * v201 + 2];
LABEL_402:
    CALegacyLog::log(v200, 1, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/VoiceProcessor_v2.cpp", 5457, "InstantiateAndConfigureEffectAU", "Error in initializing AU %s error %d", v204, InternalBuffers);
  }
  if ((v224 & 1) != 0)
  {
LABEL_404:
    v73 = 21;
    goto LABEL_405;
  }
  v206 = 0;
  v207 = v8;
  v12 = v220;
  while (1)
  {
    v208 = *v207;
    v207 += 18;
    if (v208 == 56)
      break;
    if (v9 == ++v206)
    {
      v209 = 0;
      goto LABEL_418;
    }
  }
  v209 = (const char *)&v8[18 * v206 + 2];
LABEL_418:
  snprintf(buf, 0x80uLL, "_vp<SERIOUS ERROR>: (%d) error initializing %s, attenuating the dl final gain by 20dB", InternalBuffers, v209);
  std::string::basic_string[abi:ne180100]<0>(&v234, "VoiceProcessor_v2.cpp");
  std::to_string(&v238, 5460);
  std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(":", &v238, &v239);
  std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(":", &v239, &v230);
  std::string::basic_string[abi:ne180100]<0>(&v229, "InstantiateAndConfigureEffectAU");
  if ((v229.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v210 = &v229;
  else
    v210 = (std::string *)v229.__r_.__value_.__r.__words[0];
  if ((v229.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v211 = HIBYTE(v229.__r_.__value_.__r.__words[2]);
  else
    v211 = v229.__r_.__value_.__l.__size_;
  v212 = std::string::append(&v230, (const std::string::value_type *)v210, v211);
  v213 = *(_OWORD *)&v212->__r_.__value_.__l.__data_;
  v231.__r_.__value_.__r.__words[2] = v212->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v231.__r_.__value_.__l.__data_ = v213;
  v212->__r_.__value_.__l.__size_ = 0;
  v212->__r_.__value_.__r.__words[2] = 0;
  v212->__r_.__value_.__r.__words[0] = 0;
  std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(" ", &v231, &v232);
  std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(buf, &v232, &v233);
  if ((v233.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v214 = &v233;
  else
    v214 = (std::string *)v233.__r_.__value_.__r.__words[0];
  if ((v233.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v215 = HIBYTE(v233.__r_.__value_.__r.__words[2]);
  else
    v215 = v233.__r_.__value_.__l.__size_;
  std::string::append(&v234, (const std::string::value_type *)v214, v215);
  if (SHIBYTE(v233.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v233.__r_.__value_.__l.__data_);
  if (SHIBYTE(v232.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v232.__r_.__value_.__l.__data_);
  if (SHIBYTE(v231.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v231.__r_.__value_.__l.__data_);
  if (SHIBYTE(v229.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v229.__r_.__value_.__l.__data_);
  if (SHIBYTE(v230.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v230.__r_.__value_.__l.__data_);
  if (SHIBYTE(v239.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v239.__r_.__value_.__l.__data_);
  if (SHIBYTE(v238.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v238.__r_.__value_.__l.__data_);
  std::vector<std::string>::push_back[abi:ne180100]((uint64_t *)this + 2000, (__int128 *)&v234);
  if (SHIBYTE(v234.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v234.__r_.__value_.__l.__data_);
  std::to_string(&v232, InternalBuffers);
  std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(" error initializing ", &v232, &v233);
  v216 = 0;
  v217 = v8;
  while (1)
  {
    v218 = *v217;
    v217 += 18;
    if (v218 == 56)
      break;
    if (v9 == ++v216)
    {
      v219 = 0;
      goto LABEL_451;
    }
  }
  v219 = (char *)&v8[18 * v216 + 2];
LABEL_451:
  std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v219, &v233, &v234);
  std::string::basic_string[abi:ne180100]<0>(buf, "vp_spp_error");
  *(std::string *)&v244[4] = v234;
  memset(&v234, 0, sizeof(v234));
  if (SHIBYTE(v233.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v233.__r_.__value_.__l.__data_);
  if (SHIBYTE(v232.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v232.__r_.__value_.__l.__data_);
  std::vector<std::pair<std::string,std::string>>::push_back[abi:ne180100]((uint64_t)this + 16048, (__int128 *)buf);
  std::pair<std::string,std::string>::~pair((uint64_t)buf);
  v73 = 0;
  *v223 = 1;
LABEL_406:
  if (__p[0])
    operator delete(__p[0]);
  *(_QWORD *)buf = &v237;
  std::vector<AUPropertyItem>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
  if (v73)
  {
    v205 = v73 == 21;
    v3 = v221;
    if (v205)
      goto LABEL_20;
  }
  else
  {
    v3 = v221;
    if (InternalBuffers)
      goto LABEL_20;
  }
}

void sub_1B63DD4E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31,uint64_t a32,void *a33,uint64_t a34,uint64_t a35,uint64_t a36,void *a37,uint64_t a38,uint64_t a39,uint64_t a40,void *a41,uint64_t a42,uint64_t a43,uint64_t a44,void *a45,uint64_t a46,uint64_t a47,uint64_t a48,void *a49,uint64_t a50,uint64_t a51,uint64_t a52,void *__p,uint64_t a54,uint64_t a55,void *a56)
{
  uint64_t v56;

  std::pair<std::string,std::string>::~pair(v56 - 240);
  if (__p)
    operator delete(__p);
  *(_QWORD *)(v56 - 240) = &a56;
  std::vector<AUPropertyItem>::__destroy_vector::operator()[abi:ne180100]((void ***)(v56 - 240));
  _Unwind_Resume(a1);
}

void std::vector<AUPropertyItem>::__assign_with_size[abi:ne180100]<AUPropertyItem*,AUPropertyItem*>(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  AUPropertyItem *v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  AUPropertyItem *v14;
  uint64_t v15;
  AUPropertyItem *v16;
  uint64_t v17;
  AUPropertyItem *v18;

  v9 = a1 + 16;
  v8 = *(_QWORD *)(a1 + 16);
  v10 = *(AUPropertyItem **)a1;
  if (0xAAAAAAAAAAAAAAABLL * ((v8 - *(_QWORD *)a1) >> 3) < a4)
  {
    if (v10)
    {
      std::vector<AUPropertyItem>::__base_destruct_at_end[abi:ne180100](a1, *(_QWORD *)a1);
      operator delete(*(void **)a1);
      v8 = 0;
      *(_QWORD *)a1 = 0;
      *(_QWORD *)(a1 + 8) = 0;
      *(_QWORD *)(a1 + 16) = 0;
    }
    if (a4 > 0xAAAAAAAAAAAAAAALL)
      goto LABEL_16;
    v11 = 0xAAAAAAAAAAAAAAABLL * (v8 >> 3);
    v12 = 2 * v11;
    if (2 * v11 <= a4)
      v12 = a4;
    v13 = v11 >= 0x555555555555555 ? 0xAAAAAAAAAAAAAAALL : v12;
    if (v13 > 0xAAAAAAAAAAAAAAALL)
LABEL_16:
      std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
    v14 = (AUPropertyItem *)std::__allocate_at_least[abi:ne180100]<std::allocator<AUPropertyItem>>(v13);
    *(_QWORD *)a1 = v14;
    *(_QWORD *)(a1 + 8) = v14;
    *(_QWORD *)(a1 + 16) = (char *)v14 + 24 * v15;
    v16 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<AUPropertyItem>,AUPropertyItem*,AUPropertyItem*,AUPropertyItem*>(v9, a2, a3, v14);
    goto LABEL_14;
  }
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 8) - (_QWORD)v10) >> 3) < a4)
  {
    v17 = a2 + 8 * ((uint64_t)(*(_QWORD *)(a1 + 8) - (_QWORD)v10) >> 3);
    std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,AUPropertyItem *,AUPropertyItem *,AUPropertyItem *,0>(a2, v17, v10);
    v16 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<AUPropertyItem>,AUPropertyItem*,AUPropertyItem*,AUPropertyItem*>(v9, v17, a3, *(AUPropertyItem **)(a1 + 8));
LABEL_14:
    *(_QWORD *)(a1 + 8) = v16;
    return;
  }
  v18 = std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,AUPropertyItem *,AUPropertyItem *,AUPropertyItem *,0>(a2, a3, v10);
  std::vector<AUPropertyItem>::__base_destruct_at_end[abi:ne180100](a1, (uint64_t)v18);
}

void sub_1B63DDAF8(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_1B63DDB00(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

std::string *std::pair<std::string,std::string>::pair[abi:ne180100](std::string *this, __int128 *a2)
{
  __int128 v4;
  std::string *v5;
  __int128 v6;

  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v4 = *a2;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }
  v5 = this + 1;
  if (*((char *)a2 + 47) < 0)
  {
    std::string::__init_copy_ctor_external(v5, *((const std::string::value_type **)a2 + 3), *((_QWORD *)a2 + 4));
  }
  else
  {
    v6 = *(__int128 *)((char *)a2 + 24);
    this[1].__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 5);
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = v6;
  }
  return this;
}

void sub_1B63DDB80(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

std::__split_buffer<std::pair<std::string, std::string>>::pointer std::vector<std::pair<std::string,std::string>>::__push_back_slow_path<std::pair<std::string,std::string> const&>(std::__split_buffer<std::pair<std::string, std::string>>::pointer *a1, __int128 *a2)
{
  std::__split_buffer<std::pair<std::string, std::string>>::pointer v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  std::pair<std::string, std::string> *v10;
  unint64_t v11;
  std::__split_buffer<std::pair<std::string, std::string>>::pointer v12;
  std::__split_buffer<std::pair<std::string, std::string>>::pointer v13;
  std::__split_buffer<std::pair<std::string, std::string>>::pointer begin;
  __int128 v15;
  __int128 v16;
  int64x2_t v17;
  std::__split_buffer<std::pair<std::string, std::string>>::pointer v18;
  std::pair<std::string, std::string> *v19;
  std::__split_buffer<std::pair<std::string, std::string>> v21;

  v3 = *a1;
  v4 = 0xAAAAAAAAAAAAAAABLL * (((char *)a1[1] - (char *)*a1) >> 4);
  v5 = v4 + 1;
  if (v4 + 1 > 0x555555555555555)
    std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
  v7 = (uint64_t)(a1 + 2);
  v8 = 0xAAAAAAAAAAAAAAABLL * (((char *)a1[2] - (char *)v3) >> 4);
  if (2 * v8 > v5)
    v5 = 2 * v8;
  if (v8 >= 0x2AAAAAAAAAAAAAALL)
    v9 = 0x555555555555555;
  else
    v9 = v5;
  v21.__end_cap_.__value_ = (std::allocator<std::pair<std::string, std::string>> *)(a1 + 2);
  if (v9)
    v10 = (std::pair<std::string, std::string> *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<std::string,std::string>>>(v7, v9);
  else
    v10 = 0;
  v21.__first_ = v10;
  v21.__begin_ = v10 + v4;
  v21.__end_ = v21.__begin_;
  v21.__end_cap_.__value_ = &v10[v9];
  std::pair<std::string,std::string>::pair[abi:ne180100](&v21.__begin_->first, a2);
  v12 = *a1;
  v11 = (unint64_t)a1[1];
  begin = v21.__begin_;
  v13 = v21.__begin_;
  if ((std::__split_buffer<std::pair<std::string, std::string>>::pointer)v11 == *a1)
  {
    v17 = vdupq_n_s64(v11);
  }
  else
  {
    do
    {
      v15 = *(_OWORD *)(v11 - 48);
      begin[-1].first.__r_.__value_.__r.__words[2] = *(_QWORD *)(v11 - 32);
      *(_OWORD *)&begin[-1].first.__r_.__value_.__l.__data_ = v15;
      *(_QWORD *)(v11 - 40) = 0;
      *(_QWORD *)(v11 - 32) = 0;
      *(_QWORD *)(v11 - 48) = 0;
      v16 = *(_OWORD *)(v11 - 24);
      begin[-1].second.__r_.__value_.__r.__words[2] = *(_QWORD *)(v11 - 8);
      *(_OWORD *)&begin[-1].second.__r_.__value_.__l.__data_ = v16;
      --begin;
      *(_QWORD *)(v11 - 16) = 0;
      *(_QWORD *)(v11 - 8) = 0;
      *(_QWORD *)(v11 - 24) = 0;
      v11 -= 48;
    }
    while ((std::__split_buffer<std::pair<std::string, std::string>>::pointer)v11 != v12);
    v17 = *(int64x2_t *)a1;
  }
  v18 = v13 + 1;
  *a1 = begin;
  a1[1] = v13 + 1;
  *(int64x2_t *)&v21.__begin_ = v17;
  v19 = a1[2];
  a1[2] = v21.__end_cap_.__value_;
  v21.__end_cap_.__value_ = v19;
  v21.__first_ = (std::__split_buffer<std::pair<std::string, std::string>>::pointer)v17.i64[0];
  std::__split_buffer<std::pair<std::string,std::string>>::~__split_buffer(&v21);
  return v18;
}

void sub_1B63DDCF0(_Unwind_Exception *a1, std::__split_buffer<std::pair<std::string, std::string>> *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  std::__split_buffer<std::pair<std::string,std::string>>::~__split_buffer((std::__split_buffer<std::pair<std::string, std::string>> *)&a10);
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::string>::push_back[abi:ne180100](uint64_t *a1, __int128 *a2)
{
  unint64_t v3;
  uint64_t result;

  v3 = a1[1];
  if (v3 >= a1[2])
  {
    result = std::vector<std::string>::__push_back_slow_path<std::string const&>(a1, a2);
  }
  else
  {
    std::vector<std::string>::__construct_one_at_end[abi:ne180100]<std::string const&>((uint64_t)a1, a2);
    result = v3 + 24;
  }
  a1[1] = result;
  return result;
}

std::__split_buffer<std::pair<std::string, std::string>>::pointer std::vector<std::pair<std::string,std::string>>::push_back[abi:ne180100](uint64_t a1, __int128 *a2)
{
  std::pair<std::string, std::string> *v3;
  std::__split_buffer<std::pair<std::string, std::string>>::pointer result;

  v3 = *(std::pair<std::string, std::string> **)(a1 + 8);
  if ((unint64_t)v3 >= *(_QWORD *)(a1 + 16))
  {
    result = std::vector<std::pair<std::string,std::string>>::__push_back_slow_path<std::pair<std::string,std::string> const&>((std::__split_buffer<std::pair<std::string, std::string>>::pointer *)a1, a2);
  }
  else
  {
    std::pair<std::string,std::string>::pair[abi:ne180100](*(std::string **)(a1 + 8), a2);
    result = v3 + 1;
    *(_QWORD *)(a1 + 8) = v3 + 1;
  }
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

void sub_1B63DDD88(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

AUPropertyItem *std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,AUPropertyItem *,AUPropertyItem *,AUPropertyItem *,0>(uint64_t a1, uint64_t a2, AUPropertyItem *this)
{
  uint64_t v5;
  size_t v6;
  int v7;
  const void *v8;

  if (a1 != a2)
  {
    v5 = a1;
    do
    {
      if ((AUPropertyItem *)v5 != this)
      {
        v7 = *(_DWORD *)(v5 + 8);
        v6 = *(unsigned int *)(v5 + 12);
        v8 = *(const void **)(v5 + 16);
        *(_QWORD *)this = *(_QWORD *)v5;
        *((_DWORD *)this + 2) = v7;
        AUPropertyItem::SetData(this, v6, v8);
      }
      v5 += 24;
      this = (AUPropertyItem *)((char *)this + 24);
    }
    while (v5 != a2);
  }
  return this;
}

AUPropertyItem *std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<AUPropertyItem>,AUPropertyItem*,AUPropertyItem*,AUPropertyItem*>(uint64_t a1, uint64_t a2, uint64_t a3, AUPropertyItem *this)
{
  AUPropertyItem *v4;
  uint64_t v6;
  size_t v7;
  int v8;
  const void *v9;
  _QWORD v11[3];
  char v12;
  AUPropertyItem *v13;
  AUPropertyItem *v14;

  v4 = this;
  v13 = this;
  v14 = this;
  v11[0] = a1;
  v11[1] = &v13;
  v11[2] = &v14;
  v12 = 0;
  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      *((_DWORD *)v4 + 3) = 0;
      *((_QWORD *)v4 + 2) = 0;
      if ((AUPropertyItem *)v6 != v4)
      {
        v8 = *(_DWORD *)(v6 + 8);
        v7 = *(unsigned int *)(v6 + 12);
        v9 = *(const void **)(v6 + 16);
        *(_QWORD *)v4 = *(_QWORD *)v6;
        *((_DWORD *)v4 + 2) = v8;
        AUPropertyItem::SetData(v4, v7, v9);
        v4 = v14;
      }
      v6 += 24;
      v4 = (AUPropertyItem *)((char *)v4 + 24);
      v14 = v4;
    }
    while (v6 != a3);
  }
  v12 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<AUPropertyItem>,AUPropertyItem*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v11);
  return v4;
}

void sub_1B63DDEA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<AUPropertyItem>,AUPropertyItem*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<AUPropertyItem>,AUPropertyItem*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  uint64_t v3;
  uint64_t v4;
  void *v5;

  if (!*(_BYTE *)(a1 + 24))
  {
    v3 = **(_QWORD **)(a1 + 16);
    v4 = **(_QWORD **)(a1 + 8);
    while (v3 != v4)
    {
      v5 = *(void **)(v3 - 8);
      if (v5)
      {
        free(v5);
        *(_QWORD *)(v3 - 8) = 0;
      }
      *(_QWORD *)(v3 - 24) = 0;
      *(_QWORD *)(v3 - 16) = 0;
      v3 -= 24;
    }
  }
  return a1;
}

void VoiceProcessorV2::InstantiateAndConfigureAuxAU(VoiceProcessorV2 *this, int a2)
{
  AudioUnit *v4;
  int v5;
  _QWORD *v6;
  OpaqueAudioComponentInstance *v7;
  int v8;
  OpaqueAudioComponentInstance *v9;
  OpaqueAudioComponentInstance *v10;
  uint64_t v11;
  uint64_t v12;
  const char *v13;
  unsigned int v14;
  uint64_t v15;
  size_t v16;
  AudioUnitElement v17;
  const void *v18;
  void *v19;
  OSStatus v20;
  _QWORD *v21;
  NSObject *v22;
  int *v23;
  BOOL v24;
  char *v25;
  uint64_t v26;
  unint64_t v27;
  unsigned int v28;
  void (*v29)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, float);
  float *v30;
  uint64_t v31;
  unsigned int v32;
  int *v33;
  int v34;
  const char *v35;
  UInt32 ioDataSize[2];
  AudioUnitElement v37;
  UInt32 v38;
  void *v39;
  UInt32 inData[2];
  uint64_t (*v41)(VoiceProcessorV2 *, void *, OpaqueAudioComponentInstance *, AudioUnitParameterValue);
  void *__p;
  _BYTE *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  _BYTE outData[12];
  __int16 v49;
  int v50;
  __int16 v51;
  const char *v52;
  AudioUnitParameterValue v53;
  uint64_t v54;

  v54 = *MEMORY[0x1E0C80C00];
  v45 = 0;
  v46 = 0;
  v47 = 0;
  __p = 0;
  v43 = 0;
  v44 = 0;
  if (a2)
  {
    v4 = (AudioUnit *)((char *)this + 12400);
    v5 = VoiceProcessorV2::InstantiateAU(this, 0x61756178u, 0x61787675u, (OpaqueAudioComponentInstance **)this + 1550, 1);
    if (&v45 != (uint64_t *)((char *)this + 6960))
      std::vector<AUPropertyItem>::__assign_with_size[abi:ne180100]<AUPropertyItem*,AUPropertyItem*>((uint64_t)&v45, *((_QWORD *)this + 870), *((_QWORD *)this + 871), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)this + 871) - *((_QWORD *)this + 870)) >> 3));
    std::vector<std::pair<unsigned int,float>>::__assign_with_size[abi:ne180100]<std::pair<unsigned int,float>*,std::pair<unsigned int,float>*>(&__p, *((uint64_t **)this + 873), *((uint64_t **)this + 874), (uint64_t)(*((_QWORD *)this + 874) - *((_QWORD *)this + 873)) >> 3);
    if (v5)
      goto LABEL_57;
    v6 = (_QWORD *)((char *)this + 12416);
    ioDataSize[0] = 16;
    if (AudioUnitGetProperty(*v4, 0xF9Eu, 0, 0, (char *)this + 12416, ioDataSize))
    {
      *v6 = 0;
      *((_QWORD *)this + 1553) = 0;
    }
    v7 = 0;
    do
    {
      inData[0] = 104;
      if (!AudioUnitGetProperty(*v4, 4u, 0, (AudioUnitElement)v7, outData, inData))
        VoiceProcessorV2::VPAuxSetParameterAction(this, *((void **)this + 1550), v7, v53);
      v7 = (OpaqueAudioComponentInstance *)((_DWORD)v7 + 1);
    }
    while ((_DWORD)v7 != 19);
    (*((void (**)(_QWORD, uint64_t, _QWORD, _QWORD, _QWORD, float))this + 1553))(*((_QWORD *)this + 1552), 13, 0, 0, 0, (float)*((unsigned int *)this + 123));
    (*((void (**)(_QWORD, uint64_t, _QWORD, _QWORD, _QWORD, float))this + 1553))(*((_QWORD *)this + 1552), 14, 0, 0, 0, (float)*((unsigned int *)this + 124));
    (*((void (**)(_QWORD, uint64_t, _QWORD, _QWORD, _QWORD, float))this + 1553))(*((_QWORD *)this + 1552), 15, 0, 0, 0, (float)*((unsigned int *)this + 127));
    (*((void (**)(_QWORD, uint64_t, _QWORD, _QWORD, _QWORD, float))this + 1553))(*((_QWORD *)this + 1552), 16, 0, 0, 0, (float)*((unsigned int *)this + 131));
    AudioUnitSetProperty(*((AudioUnit *)this + 1550), 0x36u, 0, 0, (char *)this + 7016, 8u);
  }
  else
  {
    v4 = (AudioUnit *)((char *)this + 12408);
    v8 = VoiceProcessorV2::InstantiateAU(this, 0x61756178u, 0x61787664u, (OpaqueAudioComponentInstance **)this + 1551, 1);
    if (&v45 != (uint64_t *)((char *)this + 10832))
      std::vector<AUPropertyItem>::__assign_with_size[abi:ne180100]<AUPropertyItem*,AUPropertyItem*>((uint64_t)&v45, *((_QWORD *)this + 1354), *((_QWORD *)this + 1355), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)this + 1355) - *((_QWORD *)this + 1354)) >> 3));
    std::vector<std::pair<unsigned int,float>>::__assign_with_size[abi:ne180100]<std::pair<unsigned int,float>*,std::pair<unsigned int,float>*>(&__p, *((uint64_t **)this + 1357), *((uint64_t **)this + 1358), (uint64_t)(*((_QWORD *)this + 1358) - *((_QWORD *)this + 1357)) >> 3);
    if (v8)
      goto LABEL_57;
    v6 = (_QWORD *)((char *)this + 12432);
    ioDataSize[0] = 16;
    if (AudioUnitGetProperty(*v4, 0xF9Eu, 0, 0, (char *)this + 12432, ioDataSize))
    {
      *v6 = 0;
      *((_QWORD *)this + 1555) = 0;
    }
    v9 = 0;
    do
    {
      inData[0] = 104;
      if (!AudioUnitGetProperty(*v4, 4u, 0, (AudioUnitElement)v9, outData, inData))
        VoiceProcessorV2::VPAuxSetParameterAction(this, *((void **)this + 1551), v9, v53);
      v9 = (OpaqueAudioComponentInstance *)((_DWORD)v9 + 1);
    }
    while ((_DWORD)v9 != 16);
    (*((void (**)(_QWORD, uint64_t, _QWORD, _QWORD, _QWORD, float))this + 1555))(*((_QWORD *)this + 1554), 1, 0, 0, 0, (float)*((unsigned int *)this + 121));
    AudioUnitSetProperty(*((AudioUnit *)this + 1551), 0x36u, 0, 0, (char *)this + 10888, 8u);
  }
  v10 = *v4;
  if (!*v4)
    goto LABEL_52;
  *(_QWORD *)inData = this;
  v41 = VoiceProcessorV2::VPAuxSetParameterAction;
  AudioUnitSetProperty(v10, 0xF9Fu, 0, 0, inData, 0x10u);
  v11 = v45;
  if (v46 == v45)
  {
LABEL_47:
    v25 = (char *)__p;
    if (v43 != __p)
    {
      v26 = 0;
      v27 = (v43 - (_BYTE *)__p) >> 3;
      v28 = 1;
      do
      {
        v29 = (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, float))v6[1];
        if (v29)
        {
          v30 = (float *)&v25[8 * v26];
          v29(*v6, *(unsigned int *)v30, 0, 0, 0, v30[1]);
          VoiceProcessorV2::VPAuxSetParameterAction(this, *v4, (OpaqueAudioComponentInstance *)*(unsigned int *)v30, v30[1]);
        }
        v26 = v28;
        v24 = v27 > v28++;
      }
      while (v24);
    }
LABEL_52:
    v31 = 0;
    v32 = vcvtad_u64_f64(*((double *)this + 78));
    v33 = (int *)((char *)this + 4372);
    while (1)
    {
      v34 = *v33;
      v33 += 2;
      if (v34 == v32)
        break;
      if (++v31 == 9)
        goto LABEL_57;
    }
    *((_DWORD *)this + 1111) = *((_DWORD *)this + 2 * v31 + 1094);
    goto LABEL_57;
  }
  v12 = 0;
  v13 = "downlink";
  if (a2)
    v13 = "uplink";
  v35 = v13;
  v14 = 1;
  while (1)
  {
    v38 = 0;
    v39 = 0;
    v15 = v11 + 24 * v12;
    v17 = *(_DWORD *)(v15 + 8);
    v16 = *(unsigned int *)(v15 + 12);
    v18 = *(const void **)(v15 + 16);
    *(_QWORD *)ioDataSize = *(_QWORD *)v15;
    v37 = v17;
    AUPropertyItem::SetData((AUPropertyItem *)ioDataSize, v16, v18);
    v19 = v39;
    v20 = AudioUnitSetProperty(*v4, ioDataSize[0], ioDataSize[1], v37, v39, v38);
    if (v20)
    {
      if (VPLogScope(void)::once != -1)
        dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
      v21 = (_QWORD *)VPLogScope(void)::scope;
      if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(5, VPLogScope(void)::scope, 0))
      {
        v22 = (*v21 ? *v21 : MEMORY[0x1E0C81028]);
        if (os_log_type_enabled(v22, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)outData = 136315650;
          *(_QWORD *)&outData[4] = "VoiceProcessor_v2.cpp";
          v49 = 1024;
          v50 = 5578;
          v51 = 2080;
          v52 = v35;
          _os_log_impl(&dword_1B5ED0000, v22, OS_LOG_TYPE_DEBUG, "%25s:%-5d  <vp> InstantiateAndConfigureAuxAU: %s aux au failed to set property", outData, 0x1Cu);
        }
      }
      v23 = (int *)*((_QWORD *)this + 1570);
      if (v23 && (*((_BYTE *)this + 15897) || *((_BYTE *)this + 15898)))
      {
        if (VPLogScope(void)::once != -1)
          dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
        CALegacyLog::log(v23, 5, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/VoiceProcessor_v2.cpp", 5578, "InstantiateAndConfigureAuxAU", "InstantiateAndConfigureAuxAU: %s aux au failed to set property", v35);
      }
    }
    if (v19)
      free(v19);
    if (v20)
      break;
    v12 = v14;
    v11 = v45;
    v24 = 0xAAAAAAAAAAAAAAABLL * ((v46 - v45) >> 3) > v14++;
    if (!v24)
      goto LABEL_47;
  }
LABEL_57:
  if (__p)
    operator delete(__p);
  *(_QWORD *)outData = &v45;
  std::vector<AUPropertyItem>::__destroy_vector::operator()[abi:ne180100]((void ***)outData);
}

void sub_1B63DE588(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,char *a25)
{
  if (__p)
    operator delete(__p);
  a25 = &a22;
  std::vector<AUPropertyItem>::__destroy_vector::operator()[abi:ne180100]((void ***)&a25);
  _Unwind_Resume(a1);
}

uint64_t VoiceProcessorV2::VPAuxSetParameterAction(VoiceProcessorV2 *this, void *a2, OpaqueAudioComponentInstance *a3, AudioUnitParameterValue a4)
{
  OpaqueAudioComponentInstance *v6;
  OpaqueAudioComponentInstance *v7;
  uint64_t v8;
  OpaqueAudioComponentInstance *v9;
  OpaqueAudioComponentInstance *v10;
  OpaqueAudioComponentInstance *v11;
  OpaqueAudioComponentInstance *v12;
  OpaqueAudioComponentInstance *v13;
  OpaqueAudioComponentInstance *v14;
  OpaqueAudioComponentInstance *v15;
  OpaqueAudioComponentInstance *v16;
  OpaqueAudioComponentInstance *v17;
  OpaqueAudioComponentInstance *v18;
  OpaqueAudioComponentInstance *v19;
  OpaqueAudioComponentInstance *v20;
  AudioUnitParameterValue outValue;

  if (*((void **)this + 1550) == a2)
  {
    switch((int)a3)
    {
      case 0:
        *((AudioUnitParameterValue *)this + 1090) = a4;
        break;
      case 1:
        *((AudioUnitParameterValue *)this + 1091) = a4;
        if ((*((_BYTE *)this + 4664) & 2) != 0 && (*((_BYTE *)this + 4680) & 2) != 0)
        {
          v6 = (OpaqueAudioComponentInstance *)*((_QWORD *)this + 412);
          if (!v6
            || (AudioUnitSetParameter(v6, 0x1Bu, 0, 0, a4, 0), (*((_BYTE *)this + 4664) & 2) != 0)
            && (*((_BYTE *)this + 4680) & 2) != 0)
          {
            v7 = (OpaqueAudioComponentInstance *)*((_QWORD *)this + 412);
            if (v7)
            {
              outValue = 0.0;
              AudioUnitGetParameter(v7, 0x1Bu, 0, 0, &outValue);
              v8 = *((_QWORD *)this + 582);
              if ((v8 & 0x4000000000) != 0 && (*((_BYTE *)this + 4676) & 0x40) != 0)
              {
                v9 = (OpaqueAudioComponentInstance *)*((_QWORD *)this + 385);
                if (v9)
                {
                  AudioUnitSetParameter(v9, 5u, 0, 0, outValue, 0);
                  v8 = *((_QWORD *)this + 582);
                }
              }
              if ((v8 & 0x8000000000) != 0 && (*((_BYTE *)this + 4676) & 0x80) != 0)
              {
                v10 = (OpaqueAudioComponentInstance *)*((_QWORD *)this + 386);
                if (v10)
                {
                  AudioUnitSetParameter(v10, 5u, 0, 0, outValue, 0);
                  v8 = *((_QWORD *)this + 582);
                }
              }
              if ((v8 & 0x10000000000) != 0 && (*((_BYTE *)this + 4677) & 1) != 0)
              {
                v11 = (OpaqueAudioComponentInstance *)*((_QWORD *)this + 387);
                if (v11)
                {
                  AudioUnitSetParameter(v11, 5u, 0, 0, outValue, 0);
                  v8 = *((_QWORD *)this + 582);
                }
              }
              if ((v8 & 0x20000000000) != 0 && (*((_BYTE *)this + 4677) & 2) != 0)
              {
                v12 = (OpaqueAudioComponentInstance *)*((_QWORD *)this + 388);
                if (v12)
                {
                  AudioUnitSetParameter(v12, 5u, 0, 0, outValue, 0);
                  v8 = *((_QWORD *)this + 582);
                }
              }
              if ((v8 & 0x40000000000) != 0 && (*((_BYTE *)this + 4677) & 4) != 0)
              {
                v13 = (OpaqueAudioComponentInstance *)*((_QWORD *)this + 389);
                if (v13)
                {
                  AudioUnitSetParameter(v13, 5u, 0, 0, outValue, 0);
                  v8 = *((_QWORD *)this + 582);
                }
              }
              if ((v8 & 0x80000000000) != 0 && (*((_BYTE *)this + 4677) & 8) != 0)
              {
                v14 = (OpaqueAudioComponentInstance *)*((_QWORD *)this + 390);
                if (v14)
                {
                  AudioUnitSetParameter(v14, 5u, 0, 0, outValue, 0);
                  v8 = *((_QWORD *)this + 582);
                }
              }
              if ((v8 & 0x100000000000) != 0 && (*((_BYTE *)this + 4677) & 0x10) != 0)
              {
                v15 = (OpaqueAudioComponentInstance *)*((_QWORD *)this + 391);
                if (v15)
                {
                  AudioUnitSetParameter(v15, 5u, 0, 0, outValue, 0);
                  v8 = *((_QWORD *)this + 582);
                }
              }
              if ((v8 & 0x10000000000000) != 0 && (*((_BYTE *)this + 4678) & 0x10) != 0)
              {
                v16 = (OpaqueAudioComponentInstance *)*((_QWORD *)this + 399);
                if (v16)
                {
                  AudioUnitSetParameter(v16, 4u, 0, 0, outValue, 0);
                  v8 = *((_QWORD *)this + 582);
                }
              }
              if ((v8 & 0x20000000000000) != 0 && (*((_BYTE *)this + 4678) & 0x20) != 0)
              {
                v17 = (OpaqueAudioComponentInstance *)*((_QWORD *)this + 400);
                if (v17)
                {
                  AudioUnitSetParameter(v17, 4u, 0, 0, outValue, 0);
                  v8 = *((_QWORD *)this + 582);
                }
              }
              if ((v8 & 0x40000000000000) != 0 && (*((_BYTE *)this + 4678) & 0x40) != 0)
              {
                v18 = (OpaqueAudioComponentInstance *)*((_QWORD *)this + 401);
                if (v18)
                {
                  AudioUnitSetParameter(v18, 0xFu, 0, 0, outValue, 0);
                  v8 = *((_QWORD *)this + 582);
                }
              }
              if ((v8 & 0x80000000000000) != 0 && (*((_BYTE *)this + 4678) & 0x80) != 0)
              {
                v19 = (OpaqueAudioComponentInstance *)*((_QWORD *)this + 402);
                if (v19)
                {
                  AudioUnitSetParameter(v19, 0xFu, 0, 0, outValue, 0);
                  v8 = *((_QWORD *)this + 582);
                }
              }
              if ((v8 & 0x1000000000000000) != 0 && (*((_BYTE *)this + 4679) & 0x10) != 0)
              {
                v20 = (OpaqueAudioComponentInstance *)*((_QWORD *)this + 407);
                if (v20)
                  AudioUnitSetParameter(v20, 0x12u, 0, 0, outValue, 0);
              }
            }
          }
        }
        break;
      case 2:
        *((AudioUnitParameterValue *)this + 1092) = a4;
        break;
      case 3:
        *((AudioUnitParameterValue *)this + 1094) = a4;
        break;
      case 4:
        *((AudioUnitParameterValue *)this + 1096) = a4;
        break;
      case 5:
        *((AudioUnitParameterValue *)this + 1098) = a4;
        break;
      case 6:
        *((AudioUnitParameterValue *)this + 1100) = a4;
        break;
      case 7:
        *((AudioUnitParameterValue *)this + 1102) = a4;
        break;
      case 8:
        *((AudioUnitParameterValue *)this + 1104) = a4;
        break;
      case 9:
        *((AudioUnitParameterValue *)this + 1106) = a4;
        break;
      case 10:
        *((AudioUnitParameterValue *)this + 1108) = a4;
        break;
      case 11:
        *((AudioUnitParameterValue *)this + 1110) = a4;
        break;
      case 17:
        *((AudioUnitParameterValue *)this + 350) = a4;
        break;
      default:
        return 0;
    }
  }
  else
  {
    switch((int)a3)
    {
      case 0:
        if (*((_BYTE *)this + 4530))
          a4 = a4 + -20.0;
        *((AudioUnitParameterValue *)this + 1129) = a4;
        AudioIssueDetectorClientSetRouteSpecificDownlinkGainAdjustment(a4);
        break;
      case 2:
        *((AudioUnitParameterValue *)this + 1114) = a4;
        break;
      case 3:
        *((AudioUnitParameterValue *)this + 1115) = a4;
        break;
      case 4:
        *((AudioUnitParameterValue *)this + 1123) = a4;
        break;
      case 5:
        *((AudioUnitParameterValue *)this + 1124) = a4;
        break;
      case 6:
        *((AudioUnitParameterValue *)this + 1125) = a4;
        break;
      case 7:
        *((AudioUnitParameterValue *)this + 1126) = a4;
        break;
      case 8:
        if (*((_BYTE *)this + 4530))
          a4 = a4 + -20.0;
        *((AudioUnitParameterValue *)this + 1130) = a4;
        break;
      case 9:
        *((AudioUnitParameterValue *)this + 1116) = a4;
        break;
      case 10:
        *((AudioUnitParameterValue *)this + 1117) = a4;
        break;
      case 11:
        *((AudioUnitParameterValue *)this + 1118) = a4;
        break;
      case 12:
        *((AudioUnitParameterValue *)this + 1119) = a4;
        break;
      case 13:
        *((AudioUnitParameterValue *)this + 1120) = a4;
        break;
      case 14:
        *((AudioUnitParameterValue *)this + 1121) = a4;
        break;
      case 15:
        *((AudioUnitParameterValue *)this + 1122) = a4;
        *((_DWORD *)this + 563) = 0;
        break;
      default:
        return 0;
    }
  }
  return 0;
}

void AudioIssueDetectorClientSetRouteSpecificDownlinkGainAdjustment(float a1)
{
  if (AudioIssueDetectorLibraryLoader(void)::once != -1)
    dispatch_once(&AudioIssueDetectorLibraryLoader(void)::once, &__block_literal_global_12811);
  if (AudioIssueDetectorLibraryLoader(void)::libSym)
    AudioIssueDetectorLibraryLoader(void)::libSym(a1);
}

float VoiceProcessorV2::DetermineNoiseBasedVolume(VoiceProcessorV2 *this)
{
  uint64_t v2;
  OpaqueAudioComponentInstance *v3;
  AudioUnitParameterID v4;
  float v5;
  _DWORD *v6;
  float v7;
  float result;
  float v9;
  float v10;
  float v11;
  AudioUnitParameterValue outValue;

  outValue = 0.0;
  v2 = *((_QWORD *)this + 582);
  if ((v2 & 0x10000000000000) != 0
    && (*((_BYTE *)this + 4678) & 0x10) != 0
    && (v3 = (OpaqueAudioComponentInstance *)*((_QWORD *)this + 399)) != 0
    || (v2 & 0x20000000000000) != 0
    && (*((_BYTE *)this + 4678) & 0x20) != 0
    && (v3 = (OpaqueAudioComponentInstance *)*((_QWORD *)this + 400)) != 0)
  {
    v4 = 2;
LABEL_25:
    AudioUnitGetParameter(v3, v4, 0, 0, &outValue);
    goto LABEL_26;
  }
  if ((v2 & 0x40000000000000) != 0
    && (*((_BYTE *)this + 4678) & 0x40) != 0
    && (v3 = (OpaqueAudioComponentInstance *)*((_QWORD *)this + 401)) != 0
    || (v2 & 0x80000000000000) != 0
    && (*((_BYTE *)this + 4678) & 0x80) != 0
    && (v3 = (OpaqueAudioComponentInstance *)*((_QWORD *)this + 402)) != 0)
  {
    v4 = 9;
    goto LABEL_25;
  }
  if ((v2 & 0x4000000000) != 0
    && (*((_BYTE *)this + 4676) & 0x40) != 0
    && (v3 = (OpaqueAudioComponentInstance *)*((_QWORD *)this + 385)) != 0
    || (v2 & 0x10000000000) != 0
    && (*((_BYTE *)this + 4677) & 1) != 0
    && (v3 = (OpaqueAudioComponentInstance *)*((_QWORD *)this + 387)) != 0
    || (v2 & 0x40000000000) != 0
    && (*((_BYTE *)this + 4677) & 4) != 0
    && (v3 = (OpaqueAudioComponentInstance *)*((_QWORD *)this + 389)) != 0)
  {
    v4 = 35;
    goto LABEL_25;
  }
LABEL_26:
  v5 = (float)(int)(float)(outValue * 4.0) * 0.25;
  v6 = (_DWORD *)*((_QWORD *)this + 292);
  if (v6 == *((_DWORD **)this + 293))
  {
    v7 = 70.0;
  }
  else
  {
    v7 = 64.0;
    if (*v6 != 1885892727)
      v7 = 70.0;
  }
  result = *((float *)this + 3116);
  if (v5 >= v7)
    v5 = v7;
  v9 = *((float *)this + 1123);
  if (v5 <= v9)
  {
    result = result * *((float *)this + 1126);
  }
  else
  {
    v10 = (float)(v5 - v9) / (float)(v7 - v9);
    if (v10 > 1.0)
      v10 = 1.0;
    if (v10 < 0.0)
      v10 = 0.0;
    v11 = *((float *)this + 1124);
    if (result >= v11)
    {
      result = (float)(v10 * *((float *)this + 1125)) + (float)(result * *((float *)this + 1126));
    }
    else if (v11 > 0.0)
    {
      result = (float)((float)(1.0 - (float)((float)(v11 - result) / v11)) * (float)(v10 * *((float *)this + 1125)))
             + (float)(result * *((float *)this + 1126));
    }
  }
  if (result > 1.0)
    return 1.0;
  return result;
}

uint64_t VoiceProcessorV2::ShouldUseOptimizedBlockSizeForFacePlant(VoiceProcessorV2 *this)
{
  int v2;
  BOOL v3;
  unsigned int v4;
  uint64_t v6;
  _QWORD *v7;
  NSObject *v8;
  const char *v9;
  int *v10;
  const char *v11;
  uint8_t buf[4];
  const char *v14;
  __int16 v15;
  int v16;
  __int16 v17;
  const char *v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v2 = *((unsigned __int8 *)this + 60);
  if (*((_BYTE *)this + 60))
    v2 = *((_DWORD *)this + 14);
  v3 = v2 <= 0;
  v4 = v2 - 6001;
  v6 = !v3 && v4 < 0xFFFFF830;
  if (VPLogScope(void)::once != -1)
    dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
  v7 = (_QWORD *)VPLogScope(void)::scope;
  if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(4, VPLogScope(void)::scope, 0))
  {
    v8 = (*v7 ? *v7 : MEMORY[0x1E0C81028]);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
    {
      v9 = "false";
      v14 = "VoiceProcessor_v2.cpp";
      *(_DWORD *)buf = 136315650;
      if ((_DWORD)v6)
        v9 = "true";
      v15 = 1024;
      v16 = 5925;
      v17 = 2080;
      v18 = v9;
      _os_log_impl(&dword_1B5ED0000, v8, OS_LOG_TYPE_INFO, "%25s:%-5d  <vp> use optimized block size for face plant =  %s", buf, 0x1Cu);
    }
  }
  v10 = (int *)*((_QWORD *)this + 1570);
  if (v10 && (*((_BYTE *)this + 15897) || *((_BYTE *)this + 15898)))
  {
    if (VPLogScope(void)::once != -1)
      dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
    v11 = "false";
    if ((_DWORD)v6)
      v11 = "true";
    CALegacyLog::log(v10, 4, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/VoiceProcessor_v2.cpp", 5925, "ShouldUseOptimizedBlockSizeForFacePlant", "use optimized block size for face plant =  %s", v11);
  }
  return v6;
}

void VoiceProcessorV2::ReportMetrics(VoiceProcessorV2 *this)
{
  _OWORD *v2;
  void **v3;
  unsigned int *v4;
  _OWORD *v5;
  unsigned int *v6;
  _OWORD *v7;
  unsigned int v8;
  _OWORD *v9;
  _OWORD *v10;
  _OWORD *v11;
  void **v12;
  _OWORD *v13;
  void **v14;
  _OWORD *v15;
  void **v16;
  unsigned int ChatFlavor;
  const std::string::value_type *v18;
  _OWORD *v19;
  _OWORD *v20;
  void **v21;
  _OWORD *v22;
  void **v23;
  _OWORD *v24;
  void **v25;
  _OWORD *v26;
  void **v27;
  _OWORD *v28;
  void **v29;
  unsigned int v30;
  _OWORD *v31;
  void **v32;
  _OWORD *v33;
  void **v34;
  int v35;
  const std::string::value_type *v36;
  _OWORD *v37;
  _OWORD *v38;
  void **v39;
  std::string v40;
  uint64_t *v41;
  _QWORD *v42[2];
  std::string *v43;
  void *__p[2];
  char v45;
  uint64_t v46;

  v46 = *MEMORY[0x1E0C80C00];
  v42[0] = 0;
  v42[1] = 0;
  v41 = (uint64_t *)v42;
  std::to_string(&v40, *((_DWORD *)this + 19));
  std::string::basic_string[abi:ne180100]<0>(__p, "vp_config_operation_mode");
  v43 = (std::string *)__p;
  v2 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(&v41, __p, (_OWORD **)&v43);
  v3 = (void **)v2 + 7;
  if (*((char *)v2 + 79) < 0)
    operator delete(*v3);
  *(std::string *)v3 = v40;
  *((_BYTE *)&v40.__r_.__value_.__s + 23) = 0;
  v40.__r_.__value_.__s.__data_[0] = 0;
  if (v45 < 0)
  {
    operator delete(__p[0]);
    if (SHIBYTE(v40.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v40.__r_.__value_.__l.__data_);
  }
  v4 = (unsigned int *)*((_QWORD *)this + 295);
  if (v4 != *((unsigned int **)this + 296))
  {
    CAX4CCStringNoQuote::CAX4CCStringNoQuote((CAX4CCStringNoQuote *)__p, *v4);
    std::string::basic_string[abi:ne180100]<0>(&v40, "vp_config_input_port");
    v43 = &v40;
    v5 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(&v41, (void **)&v40.__r_.__value_.__l.__data_, (_OWORD **)&v43);
    std::string::__assign_external((std::string *)((char *)v5 + 56), (const std::string::value_type *)__p);
    if (SHIBYTE(v40.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v40.__r_.__value_.__l.__data_);
  }
  v6 = (unsigned int *)*((_QWORD *)this + 292);
  if (v6 != *((unsigned int **)this + 293))
  {
    CAX4CCStringNoQuote::CAX4CCStringNoQuote((CAX4CCStringNoQuote *)__p, *v6);
    std::string::basic_string[abi:ne180100]<0>(&v40, "vp_config_output_port");
    v43 = &v40;
    v7 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(&v41, (void **)&v40.__r_.__value_.__l.__data_, (_OWORD **)&v43);
    std::string::__assign_external((std::string *)((char *)v7 + 56), (const std::string::value_type *)__p);
    if (SHIBYTE(v40.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v40.__r_.__value_.__l.__data_);
  }
  v8 = *((_DWORD *)this + 596);
  if (v8)
  {
    CAX4CCStringNoQuote::CAX4CCStringNoQuote((CAX4CCStringNoQuote *)__p, v8);
    std::string::basic_string[abi:ne180100]<0>(&v40, "vp_config_ref_subport");
    v43 = &v40;
    v9 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(&v41, (void **)&v40.__r_.__value_.__l.__data_, (_OWORD **)&v43);
    std::string::__assign_external((std::string *)((char *)v9 + 56), (const std::string::value_type *)__p);
    if (SHIBYTE(v40.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v40.__r_.__value_.__l.__data_);
  }
  CAX4CCStringNoQuote::CAX4CCStringNoQuote((CAX4CCStringNoQuote *)__p, *((_DWORD *)this + 549));
  std::string::basic_string[abi:ne180100]<0>(&v40, "vp_config_primary_vocoder");
  v43 = &v40;
  v10 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(&v41, (void **)&v40.__r_.__value_.__l.__data_, (_OWORD **)&v43);
  std::string::__assign_external((std::string *)((char *)v10 + 56), (const std::string::value_type *)__p);
  if (SHIBYTE(v40.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v40.__r_.__value_.__l.__data_);
  std::to_string(&v40, *((float *)this + 550));
  std::string::basic_string[abi:ne180100]<0>(__p, "vp_config_primary_vocoderFs");
  v43 = (std::string *)__p;
  v11 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(&v41, __p, (_OWORD **)&v43);
  v12 = (void **)v11 + 7;
  if (*((char *)v11 + 79) < 0)
    operator delete(*v12);
  *(std::string *)v12 = v40;
  *((_BYTE *)&v40.__r_.__value_.__s + 23) = 0;
  v40.__r_.__value_.__s.__data_[0] = 0;
  if (v45 < 0)
  {
    operator delete(__p[0]);
    if (SHIBYTE(v40.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v40.__r_.__value_.__l.__data_);
  }
  std::to_string(&v40, *((unsigned __int8 *)this + 2245));
  std::string::basic_string[abi:ne180100]<0>(__p, "vp_spatial_chat_enabled");
  v43 = (std::string *)__p;
  v13 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(&v41, __p, (_OWORD **)&v43);
  v14 = (void **)v13 + 7;
  if (*((char *)v13 + 79) < 0)
    operator delete(*v14);
  *(std::string *)v14 = v40;
  *((_BYTE *)&v40.__r_.__value_.__s + 23) = 0;
  v40.__r_.__value_.__s.__data_[0] = 0;
  if (v45 < 0)
  {
    operator delete(__p[0]);
    if (SHIBYTE(v40.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v40.__r_.__value_.__l.__data_);
  }
  std::to_string(&v40, *((unsigned __int8 *)this + 2244));
  std::string::basic_string[abi:ne180100]<0>(__p, "vp_media_chat_enabled");
  v43 = (std::string *)__p;
  v15 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(&v41, __p, (_OWORD **)&v43);
  v16 = (void **)v15 + 7;
  if (*((char *)v15 + 79) < 0)
    operator delete(*v16);
  *(std::string *)v16 = v40;
  *((_BYTE *)&v40.__r_.__value_.__s + 23) = 0;
  v40.__r_.__value_.__s.__data_[0] = 0;
  if (v45 < 0)
  {
    operator delete(__p[0]);
    if (SHIBYTE(v40.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v40.__r_.__value_.__l.__data_);
  }
  ChatFlavor = VoiceProcessorV2::GetChatFlavor(this);
  if (ChatFlavor > 2)
    v18 = "unknown chat flavor";
  else
    v18 = off_1E69DA808[ChatFlavor];
  std::string::basic_string[abi:ne180100]<0>(&v40, "vp_chat_flavor");
  __p[0] = &v40;
  v19 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(&v41, (void **)&v40.__r_.__value_.__l.__data_, (_OWORD **)__p);
  std::string::__assign_external((std::string *)((char *)v19 + 56), v18);
  if (SHIBYTE(v40.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v40.__r_.__value_.__l.__data_);
  std::to_string(&v40, *((unsigned __int8 *)this + 2268));
  std::string::basic_string[abi:ne180100]<0>(__p, "vp_automatic_mic_mode_enabled");
  v43 = (std::string *)__p;
  v20 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(&v41, __p, (_OWORD **)&v43);
  v21 = (void **)v20 + 7;
  if (*((char *)v20 + 79) < 0)
    operator delete(*v21);
  *(std::string *)v21 = v40;
  *((_BYTE *)&v40.__r_.__value_.__s + 23) = 0;
  v40.__r_.__value_.__s.__data_[0] = 0;
  if (v45 < 0)
  {
    operator delete(__p[0]);
    if (SHIBYTE(v40.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v40.__r_.__value_.__l.__data_);
  }
  std::to_string(&v40, *((unsigned __int8 *)this + 472));
  std::string::basic_string[abi:ne180100]<0>(__p, "vp_bypass");
  v43 = (std::string *)__p;
  v22 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(&v41, __p, (_OWORD **)&v43);
  v23 = (void **)v22 + 7;
  if (*((char *)v22 + 79) < 0)
    operator delete(*v23);
  *(std::string *)v23 = v40;
  *((_BYTE *)&v40.__r_.__value_.__s + 23) = 0;
  v40.__r_.__value_.__s.__data_[0] = 0;
  if (v45 < 0)
  {
    operator delete(__p[0]);
    if (SHIBYTE(v40.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v40.__r_.__value_.__l.__data_);
  }
  std::to_string(&v40, *((unsigned __int8 *)this + 16396));
  std::string::basic_string[abi:ne180100]<0>(__p, "vp_spatial_head_tracking_enabled");
  v43 = (std::string *)__p;
  v24 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(&v41, __p, (_OWORD **)&v43);
  v25 = (void **)v24 + 7;
  if (*((char *)v24 + 79) < 0)
    operator delete(*v25);
  *(std::string *)v25 = v40;
  *((_BYTE *)&v40.__r_.__value_.__s + 23) = 0;
  v40.__r_.__value_.__s.__data_[0] = 0;
  if (v45 < 0)
  {
    operator delete(__p[0]);
    if (SHIBYTE(v40.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v40.__r_.__value_.__l.__data_);
  }
  std::to_string(&v40, *((_DWORD *)this + 4098));
  std::string::basic_string[abi:ne180100]<0>(__p, "vp_spatial_head_tracking_mode");
  v43 = (std::string *)__p;
  v26 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(&v41, __p, (_OWORD **)&v43);
  v27 = (void **)v26 + 7;
  if (*((char *)v26 + 79) < 0)
    operator delete(*v27);
  *(std::string *)v27 = v40;
  *((_BYTE *)&v40.__r_.__value_.__s + 23) = 0;
  v40.__r_.__value_.__s.__data_[0] = 0;
  if (v45 < 0)
  {
    operator delete(__p[0]);
    if (SHIBYTE(v40.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v40.__r_.__value_.__l.__data_);
  }
  std::to_string(&v40, *((unsigned __int8 *)this + 16296));
  std::string::basic_string[abi:ne180100]<0>(__p, "vp_mix_stereo_to_mono");
  v43 = (std::string *)__p;
  v28 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(&v41, __p, (_OWORD **)&v43);
  v29 = (void **)v28 + 7;
  if (*((char *)v28 + 79) < 0)
    operator delete(*v29);
  *(std::string *)v29 = v40;
  *((_BYTE *)&v40.__r_.__value_.__s + 23) = 0;
  v40.__r_.__value_.__s.__data_[0] = 0;
  if (v45 < 0)
  {
    operator delete(__p[0]);
    if (SHIBYTE(v40.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v40.__r_.__value_.__l.__data_);
  }
  v30 = (*(uint64_t (**)(VoiceProcessorV2 *))(*(_QWORD *)this + 112))(this);
  std::to_string(&v40, v30);
  std::string::basic_string[abi:ne180100]<0>(__p, "vp_version");
  v43 = (std::string *)__p;
  v31 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(&v41, __p, (_OWORD **)&v43);
  v32 = (void **)v31 + 7;
  if (*((char *)v31 + 79) < 0)
    operator delete(*v32);
  *(std::string *)v32 = v40;
  *((_BYTE *)&v40.__r_.__value_.__s + 23) = 0;
  v40.__r_.__value_.__s.__data_[0] = 0;
  if (v45 < 0)
  {
    operator delete(__p[0]);
    if (SHIBYTE(v40.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v40.__r_.__value_.__l.__data_);
  }
  std::to_string(&v40, *((unsigned __int8 *)this + 16560));
  std::string::basic_string[abi:ne180100]<0>(__p, "vp_other_audio_ducking_configuration_enable_advanced_ducking");
  v43 = (std::string *)__p;
  v33 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(&v41, __p, (_OWORD **)&v43);
  v34 = (void **)v33 + 7;
  if (*((char *)v33 + 79) < 0)
    operator delete(*v34);
  *(std::string *)v34 = v40;
  *((_BYTE *)&v40.__r_.__value_.__s + 23) = 0;
  v40.__r_.__value_.__s.__data_[0] = 0;
  if (v45 < 0)
  {
    operator delete(__p[0]);
    if (SHIBYTE(v40.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v40.__r_.__value_.__l.__data_);
  }
  v35 = *((_DWORD *)this + 4141);
  if (v35 > 19)
  {
    if (v35 == 20)
    {
      v36 = "Mid";
      goto LABEL_82;
    }
    if (v35 == 30)
    {
      v36 = "Max";
      goto LABEL_82;
    }
  }
  else
  {
    if (!v35)
    {
      v36 = "Default";
      goto LABEL_82;
    }
    if (v35 == 10)
    {
      v36 = "Min";
      goto LABEL_82;
    }
  }
  v36 = "unknown ducking level";
LABEL_82:
  std::string::basic_string[abi:ne180100]<0>(&v40, "vp_other_audio_ducking_configuration_ducking_level");
  __p[0] = &v40;
  v37 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(&v41, (void **)&v40.__r_.__value_.__l.__data_, (_OWORD **)__p);
  std::string::__assign_external((std::string *)((char *)v37 + 56), v36);
  if (SHIBYTE(v40.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v40.__r_.__value_.__l.__data_);
  std::to_string(&v40, *((unsigned __int8 *)this + 16596));
  std::string::basic_string[abi:ne180100]<0>(__p, "vp_offload_airpods_noise_suppression_enabled");
  v43 = (std::string *)__p;
  v38 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(&v41, __p, (_OWORD **)&v43);
  v39 = (void **)v38 + 7;
  if (*((char *)v38 + 79) < 0)
    operator delete(*v39);
  *(std::string *)v39 = v40;
  *((_BYTE *)&v40.__r_.__value_.__s + 23) = 0;
  v40.__r_.__value_.__s.__data_[0] = 0;
  if (v45 < 0)
  {
    operator delete(__p[0]);
    if (SHIBYTE(v40.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v40.__r_.__value_.__l.__data_);
  }
  AudioStatisticsHelperSendMessage(*((uint64_t **)this + 270), *((_DWORD *)this + 542), (const UInt8 **)&v41, 5);
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(v42[0]);
}

void sub_1B63DF7B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, _QWORD *a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(a17);
  _Unwind_Resume(a1);
}

void VoiceProcessorV2::CreateMessenger(VoiceProcessorV2 *this)
{
  std::__shared_weak_count *v2;
  __int128 *v3;
  __int128 v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  __int128 v16;
  std::string __p;
  char v18;
  _BYTE v19[29];
  uint64_t v20;
  std::__shared_weak_count *v21;

  v20 = 0;
  v21 = 0;
  v2 = (std::__shared_weak_count *)VoiceProcessorV2::CreateMessenger(void)::sMessenger;
  if (VoiceProcessorV2::CreateMessenger(void)::sMessenger
    && (v2 = std::__shared_weak_count::lock((std::__shared_weak_count *)VoiceProcessorV2::CreateMessenger(void)::sMessenger),
        (v21 = v2) != 0)
    && (v20 = VoiceProcessorV2::CreateMessenger(void)::sMessenger) != 0)
  {
    std::shared_ptr<vp::vx::IO_Node_Audio_Injector_Factory::Audio_Player>::operator=[abi:ne180100]((_QWORD *)this + 2027, &v20);
  }
  else
  {
    v3 = (__int128 *)caulk::concurrent::messenger::shared_high_priority((caulk::concurrent::messenger *)v2);
    std::__optional_copy_base<std::string,false>::__optional_copy_base[abi:ne180100](&__p, v3);
    v4 = v3[2];
    *(_OWORD *)&v19[13] = *(__int128 *)((char *)v3 + 45);
    *(_OWORD *)v19 = v4;
    std::optional<std::string>::operator=[abi:ne180100]<char const(&)[47],void>(&__p, "com.apple.coreaudio.VoiceProcessor");
    std::allocate_shared[abi:ne180100]<caulk::concurrent::messenger,std::allocator<caulk::concurrent::messenger>,caulk::concurrent::messenger::thread_strategy &,caulk::thread::attributes &,void>((uint64_t *)&v16, 1, (uint64_t)&__p);
    std::shared_ptr<vp::xml::_xmlNode const>::operator=[abi:ne180100]((uint64_t)this + 16216, &v16);
    v5 = (std::__shared_weak_count *)*((_QWORD *)&v16 + 1);
    if (*((_QWORD *)&v16 + 1))
    {
      v6 = (unint64_t *)(*((_QWORD *)&v16 + 1) + 8);
      do
        v7 = __ldaxr(v6);
      while (__stlxr(v7 - 1, v6));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
    v8 = *((_QWORD *)this + 2027);
    v9 = *((_QWORD *)this + 2028);
    if (v9)
    {
      v10 = (unint64_t *)(v9 + 16);
      do
        v11 = __ldxr(v10);
      while (__stxr(v11 + 1, v10));
    }
    VoiceProcessorV2::CreateMessenger(void)::sMessenger = v8;
    v12 = (std::__shared_weak_count *)VoiceProcessorV2::CreateMessenger(void)::sMessenger;
    VoiceProcessorV2::CreateMessenger(void)::sMessenger = v9;
    if (v12)
      std::__shared_weak_count::__release_weak(v12);
    if (v18 && SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
  v13 = v21;
  if (v21)
  {
    p_shared_owners = (unint64_t *)&v21->__shared_owners_;
    do
      v15 = __ldaxr(p_shared_owners);
    while (__stlxr(v15 - 1, p_shared_owners));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
}

void sub_1B63DFA3C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17)
{
  uint64_t v17;

  if (a17)
  {
    if (a16 < 0)
      operator delete(__p);
  }
  std::shared_ptr<vp::services::Telephony_Utility>::~shared_ptr[abi:ne180100](v17 - 48);
  _Unwind_Resume(a1);
}

OpaqueAudioComponentInstance *VoiceProcessorV2::LocalVoiceDuckingForMediaChatEnabled(VoiceProcessorV2 *this)
{
  OpaqueAudioComponentInstance *result;
  AudioUnitParameterValue outValue;

  if (!*((_BYTE *)this + 2244) && !*((_BYTE *)this + 16560)
    || (*((_BYTE *)this + 8833) & 0x80) == 0
    || (*((_BYTE *)this + 8841) & 0x80) == 0)
  {
    return 0;
  }
  result = (OpaqueAudioComponentInstance *)*((_QWORD *)this + 452);
  if (result)
  {
    outValue = 0.0;
    AudioUnitGetParameter(result, 0x11u, 0, 0, &outValue);
    return (OpaqueAudioComponentInstance *)(outValue == 1.0);
  }
  return result;
}

float VoiceProcessorV2::CalculateDownlinkMixGainDB(VoiceProcessorV2 *this)
{
  float v1;
  float v2;
  float v3;
  float result;
  int v5;
  float v6;
  float v7;
  float v8;
  float v9;
  float v10;
  float v11;

  v1 = *((float *)this + 1115);
  v2 = *((float *)this + 1114);
  v3 = 1.0;
  if (!*((_BYTE *)this + 2244))
    v3 = *((float *)this + 3119);
  result = v2 + (float)((float)(v1 - v2) * v3);
  v5 = *((_DWORD *)this + 4141);
  if (v5)
  {
    if (v5 == 30)
    {
      v6 = 1.3333;
    }
    else if (v5 == 20)
    {
      v6 = 0.66667;
    }
    else
    {
      v6 = 0.33333;
    }
    v7 = 1.0;
    if (v2 >= 0.0)
      v8 = 1.0;
    else
      v8 = v6;
    v9 = v2 * v8;
    if (v1 >= 0.0)
      v6 = 1.0;
    v10 = (float)(v1 * v6) - v9;
    if (!*((_BYTE *)this + 2244))
      v7 = *((float *)this + 3119);
    v11 = v9 + (float)(v10 * v7);
    if (result <= -7.0)
    {
      if (v11 <= -7.0)
        return v11;
      else
        return -7.0;
    }
    else
    {
      return v11;
    }
  }
  return result;
}

void VoiceProcessorV2::GetFarEndVoiceMixType(VoiceProcessorV2 *this, VoiceProcessorV2 *a2)
{
  unsigned int FarEndVoiceMixChannelCount;
  char *v4;
  std::string *v5;
  __int128 v6;
  std::string v7;

  FarEndVoiceMixChannelCount = VoiceProcessorV2::GetFarEndVoiceMixChannelCount(a2);
  if (FarEndVoiceMixChannelCount == 1)
  {
    v4 = "mono";
    goto LABEL_5;
  }
  if (FarEndVoiceMixChannelCount == 2)
  {
    v4 = "stereo";
LABEL_5:
    std::string::basic_string[abi:ne180100]<0>(this, v4);
    return;
  }
  std::to_string(&v7, FarEndVoiceMixChannelCount);
  v5 = std::string::append(&v7, "ch", 2uLL);
  v6 = *(_OWORD *)&v5->__r_.__value_.__l.__data_;
  *((_QWORD *)this + 2) = *((_QWORD *)&v5->__r_.__value_.__l + 2);
  *(_OWORD *)this = v6;
  v5->__r_.__value_.__l.__size_ = 0;
  v5->__r_.__value_.__r.__words[2] = 0;
  v5->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v7.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v7.__r_.__value_.__l.__data_);
}

void VoiceProcessorV2::GetFarEndVoiceMixGraphFileNamePrefix(VoiceProcessorV2 *this, uint64_t a2, char a3)
{
  std::string *v4;
  __int128 v5;
  std::string v6;

  if (!*(_BYTE *)(a2 + 60) || (a3 & 1) != 0)
  {
    VoiceProcessorV2::GetDeviceCodeNameForTuning((VoiceProcessorV2 *)&v6, a2, a3);
    v4 = std::string::append(&v6, "_far_end_voice_mix_", 0x13uLL);
    v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
    *((_QWORD *)this + 2) = *((_QWORD *)&v4->__r_.__value_.__l + 2);
    *(_OWORD *)this = v5;
    v4->__r_.__value_.__l.__size_ = 0;
    v4->__r_.__value_.__r.__words[2] = 0;
    v4->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v6.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v6.__r_.__value_.__l.__data_);
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(this, "far_end_voice_mix_");
  }
}

std::string *VoiceProcessorV2::GetDNNVADAUStripFilePath(std::string *this, uint64_t a2)
{
  _QWORD *v4;
  std::string __p;

  v4 = (_QWORD *)(a2 + 8);
  if (*(char *)(a2 + 31) < 0)
    v4 = (_QWORD *)*v4;
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v4;
  std::__fs::filesystem::path::path[abi:ne180100]<char const*,void>(this, &__p.__r_.__value_.__l.__data_);
  std::__fs::filesystem::path::append[abi:ne180100]<char [8]>(this, "Generic");
  VoiceProcessorV2::GetVersionNameForTuning(&__p, a2);
  std::__fs::filesystem::path::append[abi:ne180100]<std::string>(this, (uint64_t)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (std::__fs::filesystem::path::__filename((const std::__fs::filesystem::path *)this).__size_)
    std::string::push_back(this, 47);
  return std::string::append[abi:ne180100]<char const*,0>(this, "nnvad.austrip", "");
}

std::string *VoiceProcessorV2::GetAirPodsOffloadAUStripFilePath(std::string *this, char *a2)
{
  _QWORD *v4;
  char *v5;
  char *v6;
  std::string __p;

  v4 = a2 + 8;
  if (a2[31] < 0)
    v4 = (_QWORD *)*v4;
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v4;
  std::__fs::filesystem::path::path[abi:ne180100]<char const*,void>(this, &__p.__r_.__value_.__l.__data_);
  std::__fs::filesystem::path::append[abi:ne180100]<char [8]>(this, "Generic");
  VoiceProcessorV2::GetVersionNameForTuning(&__p, (uint64_t)a2);
  std::__fs::filesystem::path::append[abi:ne180100]<std::string>(this, (uint64_t)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (VoiceProcessorV2::GetChatFlavor((VoiceProcessorV2 *)a2) == 2 && (a2[16544] & 4) != 0)
  {
    v5 = "uplink_echo_airpods_offload_voice_isolation.austrip";
    v6 = "";
    if (std::__fs::filesystem::path::__filename((const std::__fs::filesystem::path *)this).__size_)
LABEL_10:
      std::string::push_back(this, 47);
  }
  else
  {
    v5 = "uplink_echo_airpods_offload.austrip";
    v6 = "";
    if (std::__fs::filesystem::path::__filename((const std::__fs::filesystem::path *)this).__size_)
      goto LABEL_10;
  }
  return std::string::append[abi:ne180100]<char const*,0>(this, v5, v6);
}

unint64_t VoiceProcessorV8::ProcessDownlinkAudio(VoiceProcessorV8 *this, AudioBufferList *a2, AudioBufferList *a3, AudioBufferList *a4, AudioBufferList *a5, uint64_t a6, const AudioTimeStamp *a7)
{
  char *v11;
  char *v12;
  unsigned int *v13;
  unsigned int v14;
  CADeprecated::CAMutex *v15;
  uint64_t v16;
  unint64_t v17;
  double v18;
  char *v19;
  double v20;
  double v21;
  _QWORD *v22;
  NSObject *v23;
  uint64_t v24;
  int *v25;
  double v26;
  double v27;
  _QWORD *v28;
  NSObject *v29;
  int *v30;
  char *v31;
  int v32;
  UInt32 v33;
  int v34;
  const CAStreamBasicDescription *v35;
  AudioBufferList *v36;
  UInt32 mNumberBuffers;
  unint64_t v38;
  void **p_mData;
  AudioBufferList *v40;
  unint64_t v41;
  void **v42;
  AudioBufferList *v43;
  AudioBufferList *v44;
  unint64_t v45;
  void **v46;
  AudioBufferList *v47;
  int v48;
  double v49;
  NSObject *v50;
  NSObject *v51;
  int *v52;
  NSObject *v53;
  NSObject *v54;
  int v55;
  int *v56;
  uint64_t v57;
  int v58;
  double v59;
  double v60;
  _QWORD *v61;
  NSObject *v62;
  int *v63;
  _QWORD *v64;
  NSObject *v65;
  UInt32 v66;
  int v67;
  int v68;
  int *v69;
  uint64_t v70;
  UInt32 v71;
  int v72;
  _QWORD *v73;
  NSObject *v74;
  UInt32 mDataByteSize;
  int v76;
  int *v77;
  int v78;
  uint64_t v79;
  _QWORD *v80;
  NSObject *v81;
  int *v82;
  _QWORD *v83;
  NSObject *v84;
  UInt32 v85;
  int v86;
  int v87;
  int *v88;
  uint64_t v89;
  UInt32 v90;
  int v91;
  NSObject *v92;
  NSObject *v93;
  int *v94;
  NSObject *v95;
  NSObject *v96;
  int v97;
  VoiceProcessor::SampleRateConverter **v98;
  unsigned int v99;
  unsigned int *v100;
  uint64_t v101;
  int v102;
  int *v103;
  uint64_t v104;
  unint64_t v105;
  const AudioBufferList *v106;
  uint64_t v107;
  UInt64 v108;
  UInt64 v109;
  Float64 mSampleTime;
  unsigned int frame_count;
  int v112;
  uint64_t v113;
  int *v114;
  int v115;
  uint64_t v116;
  size_t v117;
  unint64_t v118;
  uint64_t v119;
  unint64_t i;
  int v121;
  AudioBufferList *v122;
  int v123;
  uint64_t v124;
  size_t v125;
  uint64_t v126;
  unint64_t v127;
  const AudioBufferList *v128;
  unint64_t j;
  _DWORD *v130;
  unint64_t *v131;
  unint64_t v132;
  unint64_t v133;
  int v134;
  uint64_t v135;
  AudioUnit v136;
  CA::AudioSampleRateConverter **v137;
  uint64_t v138;
  float v139;
  unsigned int v140;
  unsigned int v141;
  unsigned int v142;
  unsigned int v143;
  double v144;
  uint64_t v145;
  AudioBufferList *v146;
  size_t v147;
  uint64_t v148;
  void **v149;
  void **v150;
  char *v151;
  uint64_t v152;
  OpaqueAudioComponentInstance *v153;
  OpaqueAudioComponentInstance *v154;
  __int128 v155;
  __int128 v156;
  _BOOL8 v157;
  uint64_t v158;
  int v159;
  int *v160;
  int v161;
  UInt64 v162;
  UInt64 v163;
  const AudioBufferList *v164;
  UInt64 v165;
  UInt64 v166;
  const float *data;
  const float *v168;
  float *v169;
  uint64_t v170;
  size_t v171;
  uint64_t v172;
  unint64_t v173;
  unint64_t v174;
  int v175;
  uint64_t v176;
  AudioBufferList *v177;
  AudioBufferList *v178;
  AudioBufferList *v179;
  unint64_t k;
  unint64_t v181;
  AudioBuffer *mBuffers;
  _OWORD *v183;
  unint64_t n;
  __int128 v185;
  unint64_t v186;
  int v187;
  uint64_t v188;
  unint64_t m;
  unsigned int v190;
  uint64_t v191;
  double v192;
  uint64_t v193;
  AudioBufferList *v194;
  int *v195;
  int v196;
  uint64_t v197;
  size_t v198;
  int v199;
  uint64_t v200;
  int *v201;
  size_t v202;
  uint64_t v203;
  UInt32 v204;
  uint64_t v205;
  UInt32 *v206;
  size_t v207;
  uint64_t v208;
  UInt32 v209;
  uint64_t v210;
  UInt32 *v211;
  size_t v212;
  uint64_t v213;
  _DWORD *v214;
  unint64_t v215;
  void **v216;
  unsigned int v217;
  uint64_t v218;
  UInt32 *v219;
  size_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  int *v224;
  size_t v225;
  uint64_t v226;
  int v227;
  uint64_t v228;
  _QWORD *v229;
  uint64_t *v230;
  uint64_t v231;
  uint64_t v232;
  AudioBufferList *v233;
  AudioBufferList *v234;
  AudioBufferList *v235;
  int v236;
  uint64_t v237;
  uint64_t *v238;
  void **v239;
  uint64_t v240;
  uint64_t v241;
  int v242;
  uint64_t v243;
  uint64_t *v244;
  void **v245;
  uint64_t v246;
  uint64_t v247;
  int v248;
  uint64_t v249;
  uint64_t *v250;
  void **v251;
  uint64_t v252;
  int v253;
  uint64_t v254;
  uint64_t *v255;
  void **v256;
  uint64_t v257;
  int v258;
  uint64_t v259;
  uint64_t v260;
  UInt32 *v261;
  _QWORD *v262;
  uint64_t v263;
  AudioBufferList *v264;
  AudioBufferList *MonoABL;
  AudioBufferList *v266;
  AudioBufferList *v267;
  AudioBufferList *v268;
  uint64_t v269;
  unsigned int *v270;
  uint64_t v271;
  AudioBufferList *v272;
  unint64_t v273;
  void **v274;
  _BOOL4 v275;
  _BOOL4 v276;
  uint64_t v277;
  uint64_t v278;
  uint64_t *v279;
  const AudioBufferList *v280;
  uint64_t v281;
  float v282;
  UInt64 v283;
  UInt64 v284;
  float *v285;
  Float64 v286;
  uint64_t v287;
  OpaqueAudioComponentInstance *v288;
  int v289;
  UInt64 v290;
  Float64 v291;
  UInt32 *p_mNumberBuffers;
  OpaqueAudioComponentInstance *v293;
  OSStatus Parameter;
  _BOOL4 v296;
  UInt64 v297;
  UInt64 v298;
  const float *v299;
  float *v300;
  UInt64 v301;
  UInt64 v302;
  const float *v303;
  float *v304;
  UInt64 v305;
  UInt64 v306;
  const float *v307;
  float *v308;
  uint64_t v309;
  OpaqueAudioComponentInstance *v310;
  OpaqueAudioComponentInstance *v311;
  int v312;
  OpaqueAudioComponentInstance *v313;
  OpaqueAudioComponentInstance *v314;
  AudioBufferList *v315;
  unsigned int v316;
  unsigned int v317;
  float v318;
  UInt64 v319;
  UInt64 v320;
  const float *v321;
  float *v322;
  unint64_t v323;
  uint64_t v324;
  int v325;
  int v326;
  unint64_t v327;
  unsigned int v328;
  uint64_t v329;
  int v330;
  uint64_t DynamicsDSPChannelCount;
  UInt32 v332;
  uint64_t v333;
  AudioBufferList *v334;
  size_t v335;
  unsigned int v336;
  unsigned int v337;
  uint64_t *v338;
  _DWORD *audio_buffer_list;
  unsigned int *v340;
  unint64_t v341;
  void **v342;
  char *v343;
  UInt32 v344;
  int v345;
  const float *v346;
  const float *mData;
  float *v348;
  uint64_t v349;
  UInt32 v350;
  uint64_t v351;
  OpaqueAudioComponentInstance *v352;
  uint64_t v353;
  AudioBufferList *v354;
  size_t v355;
  unsigned int v356;
  uint64_t v357;
  uint64_t v358;
  UInt32 *v359;
  size_t v360;
  unint64_t v361;
  uint64_t v362;
  uint64_t v363;
  void *v364;
  uint64_t v365;
  uint64_t v366;
  AudioBufferList *v367;
  size_t v368;
  uint64_t v369;
  AudioBufferList *v370;
  AudioBuffer v371;
  int v372;
  void **v373;
  unsigned int v374;
  unint64_t v375;
  char *v376;
  const void **v377;
  unsigned int *v378;
  uint64_t v379;
  UInt32 v380;
  void **v381;
  unint64_t v382;
  AudioBufferList *v383;
  unint64_t v384;
  uint64_t v385;
  int v386;
  AudioBuffer *v387;
  _OWORD *v388;
  unint64_t ii;
  __int128 v390;
  unint64_t v391;
  void **v392;
  unsigned int *v393;
  unint64_t v394;
  void **v395;
  unint64_t v396;
  uint64_t v397;
  uint64_t v398;
  float *v399;
  CA::AudioSampleRateConverter **v400;
  _BYTE *v401;
  vDSP_Length v402;
  AudioUnitParameterValue v403;
  OpaqueAudioComponentInstance *v404;
  OpaqueAudioComponentInstance *v405;
  unsigned int v406;
  uint64_t v407;
  uint64_t v408;
  UInt64 v409;
  uint64_t v410;
  uint64_t v411;
  const AudioBufferList *v412;
  const AudioBufferList **v413;
  __int128 v414;
  __int128 v415;
  __int128 v416;
  __int128 v417;
  uint64_t v418;
  OpaqueAudioComponentInstance *v419;
  uint64_t v420;
  uint64_t v421;
  AudioBufferList *v422;
  size_t v423;
  uint64_t v424;
  AudioBuffer *v425;
  AudioBuffer v426;
  OpaqueAudioComponentInstance *v427;
  uint64_t v428;
  uint64_t v429;
  AudioBufferList *v430;
  size_t v431;
  uint64_t v432;
  AudioBufferList *v433;
  AudioBuffer v434;
  char v435;
  float v436;
  float v437;
  float v438;
  float v439;
  BOOL v440;
  float v441;
  float v442;
  float v443;
  unint64_t v444;
  uint64_t v445;
  _DWORD *v446;
  UInt32 v447;
  UInt64 v448;
  OpaqueAudioComponentInstance *v449;
  uint64_t v450;
  uint64_t v451;
  AudioBufferList *v452;
  size_t v453;
  uint64_t v454;
  AudioBuffer *v455;
  AudioBuffer v456;
  UInt64 v457;
  _DWORD *v458;
  UInt32 v459;
  uint64_t v460;
  uint64_t v461;
  AudioBufferList *v462;
  size_t v463;
  uint64_t v464;
  AudioBufferList *v465;
  AudioBuffer v466;
  UInt64 v467;
  OpaqueAudioComponentInstance *v468;
  char v469;
  char *v470;
  OpaqueAudioComponentInstance *v471;
  OpaqueAudioComponentInstance *v472;
  OpaqueAudioComponentInstance *v473;
  unsigned int v474;
  uint64_t v475;
  uint64_t v476;
  int *v477;
  unsigned int v478;
  double v479;
  int *v480;
  uint64_t v481;
  unint64_t v482;
  void **v483;
  int v484;
  unsigned int v486;
  _DWORD *v488;
  _DWORD *v489;
  _DWORD *v490;
  _DWORD *v492;
  _DWORD *v494;
  _DWORD *v496;
  _DWORD *v498;
  _DWORD *v499;
  _DWORD *exception;
  _DWORD *v501;
  _DWORD *v502;
  _DWORD *v503;
  _DWORD *v504;
  _DWORD *v505;
  NSObject *v506;
  _DWORD *v507;
  _DWORD *v508;
  _DWORD *v509;
  uint64_t v510;
  __int128 v511;
  vp::Audio_Buffer *v512;
  char *v513;
  _BYTE *v514;
  const AudioTimeStamp *v515;
  void **v516;
  void **v517;
  void **v518;
  void **v519;
  uint64_t *v520;
  int v521;
  unsigned int v522;
  AudioBufferList *v523;
  uint64_t v524;
  AudioBufferList *v525;
  AudioBufferList *v526;
  UInt32 *v527;
  UInt32 *v528;
  int *v529;
  char *v530;
  void **v531;
  AudioBufferList *v532;
  AudioBufferList *v533;
  const AudioBufferList *v534;
  AudioBufferList *v535;
  AudioBufferList *v536;
  const AudioBufferList *v537;
  Float64 v538;
  float v539;
  AudioBufferList v540;
  UInt32 v541;
  UInt32 NumberOfSourceFrames;
  UInt32 v543;
  AudioTimeStamp v544;
  AudioBufferList *v545[2];
  AudioTimeStamp v546;
  AudioTimeStamp v547;
  AudioBufferList v548;
  AudioBufferList v549;
  AudioTimeStamp v550;
  AudioTimeStamp buf;
  uint64_t v552;

  v532 = a3;
  v533 = a4;
  v535 = a2;
  v552 = *MEMORY[0x1E0C80C00];
  v11 = (char *)this + 17032;
  v12 = (char *)this + 12488;
  v13 = (unsigned int *)((char *)this + 2484);
  do
    v14 = __ldaxr(v13);
  while (__stlxr(v14 + 1, v13));
  if (*((_DWORD *)this + 620))
  {
    VoiceProcessorV2::LogIOError((uint64_t)this, 23.006, (float)*((unsigned int *)this + 3114), 0.0, 0.0, "processdl: tryer failed to acquire lock");
    v15 = (VoiceProcessorV8 *)((char *)this + 2576);
    CADeprecated::CAMutex::Lock((VoiceProcessorV8 *)((char *)this + 2576));
LABEL_5:
    ++*((_DWORD *)this + 3114);
    CADeprecated::CAMutex::Unlock(v15);
    LOBYTE(v16) = 0;
    v17 = 1937006964;
    v18 = 0.0;
    goto LABEL_893;
  }
  if (!*((_BYTE *)this + 477))
  {
    VoiceProcessorV2::LogIOError((uint64_t)this, 23.005, (float)*((unsigned int *)this + 3114), 0.0, 0.0, "processdl: not ok to process?!");
    v15 = (VoiceProcessorV8 *)((char *)this + 2576);
    CADeprecated::CAMutex::Lock((VoiceProcessorV8 *)((char *)this + 2576));
    goto LABEL_5;
  }
  v18 = 0.0;
  if (*((_BYTE *)this + 15897) && *((_QWORD *)this + 1571))
  {
    v19 = (char *)this + 17032;
    v18 = (double)mach_absolute_time() * 0.0000000416666667;
    if (*((double *)this + 1986) == 0.0)
      *((double *)this + 1986) = v18;
    v11 = v19;
  }
  v514 = v11;
  (*(void (**)(AudioTimeStamp *__return_ptr, VoiceProcessorV8 *, const AudioTimeStamp *))(*(_QWORD *)this + 680))(&buf, this, a7);
  v544 = buf;
  if (v12[3409])
  {
    if (*v12)
    {
      v20 = *((double *)this + 1560);
      HIDWORD(v21) = HIDWORD(v544.mSampleTime);
      if (v20 != v544.mSampleTime)
      {
        VoiceProcessorV2::WriteTSOverload((std::chrono::duration<long long, std::ratio<1, 1000000>>::rep)this, v20, v544.mSampleTime, 2);
        v21 = *((double *)this + 1560);
        if (v544.mSampleTime < v21)
        {
          if (VPLogScope(void)::once != -1)
            dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
          v22 = (_QWORD *)VPLogScope(void)::scope;
          if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(1, VPLogScope(void)::scope, 0))
          {
            v23 = (*v22 ? *v22 : MEMORY[0x1E0C81028]);
            if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR))
            {
              v24 = *((_QWORD *)this + 1560);
              LODWORD(buf.mSampleTime) = 136316674;
              *(_QWORD *)((char *)&buf.mSampleTime + 4) = "vpProcessDownlink_v8.cpp";
              WORD2(buf.mHostTime) = 1024;
              *(_DWORD *)((char *)&buf.mHostTime + 6) = 76;
              WORD1(buf.mRateScalar) = 2048;
              *(_QWORD *)((char *)&buf.mRateScalar + 4) = v24;
              WORD2(buf.mWordClockTime) = 2048;
              *(UInt64 *)((char *)&buf.mWordClockTime + 6) = *(_QWORD *)&v544.mSampleTime;
              HIWORD(buf.mSMPTETime.mCounter) = 2048;
              *(_QWORD *)&buf.mSMPTETime.mType = v544.mHostTime;
              buf.mSMPTETime.mHours = 2048;
              *(Float64 *)&buf.mSMPTETime.mMinutes = v544.mRateScalar;
              HIWORD(buf.mFlags) = 1024;
              buf.mReserved = v544.mFlags;
              _os_log_impl(&dword_1B5ED0000, v23, OS_LOG_TYPE_ERROR, "%25s:%-5d  >vp> sprk sample time jumped backwards, expected sample time: %.2lf, input sample time: %.2lf, input host time: %lld, input rate scalar: %.2lf, input flag: %d", (uint8_t *)&buf, 0x40u);
            }
          }
          v25 = (int *)*((_QWORD *)this + 1570);
          if (v25 && (v12[3409] || v12[3410]))
          {
            if (VPLogScope(void)::once != -1)
              dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
            CALegacyLog::log(v25, 1, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v8/vpProcessDownlink_v8.cpp", 76, "ProcessDownlinkAudio", "sprk sample time jumped backwards, expected sample time: %.2lf, input sample time: %.2lf, input host time: %lld, input rate scalar: %.2lf, input flag: %d", *((double *)this + 1560), v544.mSampleTime, v544.mHostTime, v544.mRateScalar, v544.mFlags);
          }
          VoiceProcessorV2::LogIOError((uint64_t)this, 23.008, (float)*((unsigned int *)this + 3114), 0.0, 0.0, "sprk sample time jumped backwards");
        }
      }
    }
    else
    {
      *v12 = 1;
      VoiceProcessorV2::WriteTSOverload((std::chrono::duration<long long, std::ratio<1, 1000000>>::rep)this, 0.0, v544.mSampleTime, 2);
      v21 = *((double *)this + 215);
      v26 = v544.mSampleTime - v21;
      v27 = (float)((float)((float)(roundf(*((float *)this + 289) * (float)*((unsigned int *)this + 124))
                                  + (float)*((unsigned int *)this + 124))
                          + (float)*((unsigned int *)this + 293))
                  + (float)*((unsigned int *)this + 294));
      if (v544.mSampleTime - v21 != v27)
      {
        if (VPLogScope(void)::once != -1)
          dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
        v28 = (_QWORD *)VPLogScope(void)::scope;
        if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(1, VPLogScope(void)::scope, 0))
        {
          v29 = (*v28 ? *v28 : MEMORY[0x1E0C81028]);
          if (os_log_type_enabled(v29, OS_LOG_TYPE_ERROR))
          {
            LODWORD(buf.mSampleTime) = 136315906;
            *(_QWORD *)((char *)&buf.mSampleTime + 4) = "vpProcessDownlink_v8.cpp";
            WORD2(buf.mHostTime) = 1024;
            *(_DWORD *)((char *)&buf.mHostTime + 6) = 66;
            WORD1(buf.mRateScalar) = 2048;
            *(double *)((char *)&buf.mRateScalar + 4) = v27;
            WORD2(buf.mWordClockTime) = 2048;
            *(double *)((char *)&buf.mWordClockTime + 6) = v26;
            _os_log_impl(&dword_1B5ED0000, v29, OS_LOG_TYPE_ERROR, "%25s:%-5d  >vp> bad mic-speaker delay: expected sample time diff: %.1lf, actual sample time diff: %.1lf", (uint8_t *)&buf, 0x26u);
          }
        }
        v30 = (int *)*((_QWORD *)this + 1570);
        if (v30 && (v12[3409] || v12[3410]))
        {
          if (VPLogScope(void)::once != -1)
            dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
          CALegacyLog::log(v30, 1, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v8/vpProcessDownlink_v8.cpp", 66, "ProcessDownlinkAudio", "bad mic-speaker delay: expected sample time diff: %.1lf, actual sample time diff: %.1lf", v27, v26);
        }
        VoiceProcessorV2::LogIOError((uint64_t)this, 23.009, (float)*((unsigned int *)this + 3114), 0.0, 0.0, "bad relative mic-ref TS");
      }
    }
    LODWORD(v21) = *((_DWORD *)this + 121);
    *((double *)this + 1560) = v544.mSampleTime + (double)*(unint64_t *)&v21;
  }
  v515 = a7;
  v524 = a6;
  v31 = (char *)this + 2488;
  v32 = (*(uint64_t (**)(char *))(*((_QWORD *)this + 311) + 16))((char *)this + 2488);
  CADeprecated::CAMutex::Lock((VoiceProcessorV8 *)((char *)this + 2576));
  ++*((_DWORD *)this + 3114);
  CADeprecated::CAMutex::Unlock((VoiceProcessorV8 *)((char *)this + 2576));
  v521 = v32;
  v33 = *((_DWORD *)this + 121);
  NumberOfSourceFrames = v33;
  v543 = v33;
  v34 = v12[3409];
  if (v12[3409])
  {
    v12[385] = 1;
    if (a5->mNumberBuffers == *((_DWORD *)this + 89))
    {
      v35 = (VoiceProcessorV8 *)((char *)this + 328);
LABEL_56:
      if (!v535)
      {
        v36 = (AudioBufferList *)*((_QWORD *)this + 199);
        mNumberBuffers = v36->mNumberBuffers;
        v535 = v36;
        if (mNumberBuffers)
        {
          v38 = 0;
          p_mData = &v36->mBuffers[0].mData;
          do
          {
            bzero(*p_mData, *((unsigned int *)p_mData - 1));
            ++v38;
            p_mData += 2;
          }
          while (v38 < v535->mNumberBuffers);
          v34 = v12[3409];
        }
      }
      if (v34 && (VoiceProcessorV2::InjectionFilesReadSignal(this, 1, v524, v535), v12[3409]) || v12[3410])
        VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)this, 0x32u, v524, v535, &v544);
      v40 = v532;
      if (!v532)
      {
        v40 = (AudioBufferList *)*((_QWORD *)this + 200);
        if (v40->mNumberBuffers)
        {
          v41 = 0;
          v42 = &v40->mBuffers[0].mData;
          do
          {
            v43 = v40;
            bzero(*v42, *((unsigned int *)v42 - 1));
            v40 = v43;
            ++v41;
            v42 += 2;
          }
          while (v41 < v43->mNumberBuffers);
        }
      }
      v532 = v40;
      if (v12[3409] && (VoiceProcessorV2::InjectionFilesReadSignal(this, 10, v524, v532), v12[3409]) || v12[3410])
        VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)this, 0x53u, v524, v532, &v544);
      v44 = v533;
      if (!v533)
      {
        v44 = (AudioBufferList *)*((_QWORD *)this + 201);
        if (v44->mNumberBuffers)
        {
          v45 = 0;
          v46 = &v44->mBuffers[0].mData;
          do
          {
            v47 = v44;
            bzero(*v46, *((unsigned int *)v46 - 1));
            v44 = v47;
            ++v45;
            v46 += 2;
          }
          while (v45 < v47->mNumberBuffers);
        }
      }
      v533 = v44;
      if (v12[3409] && (VoiceProcessorV2::InjectionFilesReadSignal(this, 11, v524, v533), v12[3409]) || v12[3410])
        VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)this, 0x54u, v524, v533, &v544);
      v33 = *((_DWORD *)this + 121);
LABEL_82:
      v530 = v12;
      if (v33 == (_DWORD)v524)
      {
        if (a5->mBuffers[0].mDataByteSize == *((_DWORD *)this + 88) * (_DWORD)v524)
        {
          v48 = v12[3331];
          v513 = (char *)this + 2488;
          if (!v48)
            goto LABEL_230;
          v12[3331] = 0;
          v49 = (double)(mach_absolute_time() - *((_QWORD *)this + 1980)) * 0.0000000416666667;
          VoiceProcessorV2::LogIOError((uint64_t)this, 23.002, (float)*((unsigned int *)this + 3114), (float)*((unsigned int *)this + 121), (float)v524, "processdownlinkaudio: <block size no longer mismatched>");
          if (v49 <= 1.0)
          {
            if (VPLogScope(void)::once != -1)
              dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
            v92 = CALog::LogObjIfEnabled(2, VPLogScope(void)::scope);
            if (v92)
            {
              v93 = v92;
              if (os_log_type_enabled(v92, OS_LOG_TYPE_DEFAULT))
              {
                LODWORD(buf.mSampleTime) = 136315650;
                *(_QWORD *)((char *)&buf.mSampleTime + 4) = "vpProcessDownlink_v8.cpp";
                WORD2(buf.mHostTime) = 1024;
                *(_DWORD *)((char *)&buf.mHostTime + 6) = 206;
                WORD1(buf.mRateScalar) = 2048;
                *(double *)((char *)&buf.mRateScalar + 4) = v49;
                _os_log_impl(&dword_1B5ED0000, v93, OS_LOG_TYPE_DEFAULT, "%25s:%-5d  >vp> CoreAudio: ***** VP BLOCK WARNING: BAD BLOCK CONFIG CORRECTED after %.6f seconds *****\n", (uint8_t *)&buf, 0x1Cu);
              }
            }
            v94 = (int *)*((_QWORD *)this + 1570);
            if (v94 && (v12[3409] || v12[3410]))
            {
              if (VPLogScope(void)::once != -1)
                dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
              CALegacyLog::log(v94, 2, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v8/vpProcessDownlink_v8.cpp", 206, "ProcessDownlinkAudio", "CoreAudio: ***** VP BLOCK WARNING: BAD BLOCK CONFIG CORRECTED after %.6f seconds *****\n", v49);
            }
            if (VPLogScope(void)::once != -1)
              dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
            v95 = CALog::LogObjIfEnabled(2, VPLogScope(void)::scope);
            if (v95)
            {
              v96 = v95;
              if (os_log_type_enabled(v95, OS_LOG_TYPE_DEFAULT))
              {
                v97 = *((_DWORD *)this + 121);
                LODWORD(buf.mSampleTime) = 136315906;
                *(_QWORD *)((char *)&buf.mSampleTime + 4) = "vpProcessDownlink_v8.cpp";
                WORD2(buf.mHostTime) = 1024;
                *(_DWORD *)((char *)&buf.mHostTime + 6) = 207;
                WORD1(buf.mRateScalar) = 1024;
                HIDWORD(buf.mRateScalar) = v524;
                LOWORD(buf.mWordClockTime) = 1024;
                *(_DWORD *)((char *)&buf.mWordClockTime + 2) = v97;
                _os_log_impl(&dword_1B5ED0000, v96, OS_LOG_TYPE_DEFAULT, "%25s:%-5d  >vp> processdownlinkaudio: <block size no longer mismatched between expected and actual> num frames received = %u. hwio buff size = %u\n", (uint8_t *)&buf, 0x1Eu);
              }
            }
            v56 = (int *)*((_QWORD *)this + 1570);
            if (v56 && (v12[3409] || v12[3410]))
            {
              if (VPLogScope(void)::once != -1)
                dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
              v57 = 207;
              v58 = 2;
              goto LABEL_229;
            }
          }
          else
          {
            if (VPLogScope(void)::once != -1)
              dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
            v50 = CALog::LogObjIfEnabled(1, VPLogScope(void)::scope);
            if (v50)
            {
              v51 = v50;
              if (os_log_type_enabled(v50, OS_LOG_TYPE_ERROR))
              {
                LODWORD(buf.mSampleTime) = 136315650;
                *(_QWORD *)((char *)&buf.mSampleTime + 4) = "vpProcessDownlink_v8.cpp";
                WORD2(buf.mHostTime) = 1024;
                *(_DWORD *)((char *)&buf.mHostTime + 6) = 201;
                WORD1(buf.mRateScalar) = 2048;
                *(double *)((char *)&buf.mRateScalar + 4) = v49;
                _os_log_impl(&dword_1B5ED0000, v51, OS_LOG_TYPE_ERROR, "%25s:%-5d  >vp> CoreAudio: ***** VP BLOCK SERIOUS ERROR: BAD BLOCK CONFIG CORRECTED after %.6f seconds *****\n", (uint8_t *)&buf, 0x1Cu);
              }
            }
            v52 = (int *)*((_QWORD *)this + 1570);
            if (v52 && (v12[3409] || v12[3410]))
            {
              if (VPLogScope(void)::once != -1)
                dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
              CALegacyLog::log(v52, 1, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v8/vpProcessDownlink_v8.cpp", 201, "ProcessDownlinkAudio", "CoreAudio: ***** VP BLOCK SERIOUS ERROR: BAD BLOCK CONFIG CORRECTED after %.6f seconds *****\n", v49);
            }
            if (VPLogScope(void)::once != -1)
              dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
            v53 = CALog::LogObjIfEnabled(1, VPLogScope(void)::scope);
            if (v53)
            {
              v54 = v53;
              if (os_log_type_enabled(v53, OS_LOG_TYPE_ERROR))
              {
                v55 = *((_DWORD *)this + 121);
                LODWORD(buf.mSampleTime) = 136315906;
                *(_QWORD *)((char *)&buf.mSampleTime + 4) = "vpProcessDownlink_v8.cpp";
                WORD2(buf.mHostTime) = 1024;
                *(_DWORD *)((char *)&buf.mHostTime + 6) = 202;
                WORD1(buf.mRateScalar) = 1024;
                HIDWORD(buf.mRateScalar) = v524;
                LOWORD(buf.mWordClockTime) = 1024;
                *(_DWORD *)((char *)&buf.mWordClockTime + 2) = v55;
                _os_log_impl(&dword_1B5ED0000, v54, OS_LOG_TYPE_ERROR, "%25s:%-5d  >vp> processdownlinkaudio: <block size no longer mismatched between expected and actual> num frames received = %u. hwio buff size = %u\n", (uint8_t *)&buf, 0x1Eu);
              }
            }
            v56 = (int *)*((_QWORD *)this + 1570);
            if (v56 && (v12[3409] || v12[3410]))
            {
              if (VPLogScope(void)::once != -1)
                dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
              v57 = 202;
              v58 = 1;
LABEL_229:
              CALegacyLog::log(v56, v58, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v8/vpProcessDownlink_v8.cpp", v57, "ProcessDownlinkAudio", "processdownlinkaudio: <block size no longer mismatched between expected and actual> num frames received = %u. hwio buff size = %u\n", v524, *((_DWORD *)this + 121));
            }
          }
LABEL_230:
          v98 = (VoiceProcessor::SampleRateConverter **)*((_QWORD *)this + 48);
          v99 = *((_DWORD *)this + 121);
          if (*((_QWORD *)this + 47))
          {
            if (v98)
            {
              NumberOfSourceFrames = VoiceProcessor::SampleRateConverter::GetNumberOfSourceFrames(*v98);
              v98 = (VoiceProcessor::SampleRateConverter **)*((_QWORD *)this + 47);
LABEL_237:
              v99 = VoiceProcessor::SampleRateConverter::GetNumberOfSourceFrames(*v98);
              goto LABEL_238;
            }
            v98 = (VoiceProcessor::SampleRateConverter **)*((_QWORD *)this + 47);
          }
          else if (!v98)
          {
LABEL_238:
            v100 = (unsigned int *)*((_QWORD *)this + 13);
            v101 = *v100;
            if ((int)v101 >= 1)
            {
              v102 = v99 * *((_DWORD *)this + 58);
              v103 = (int *)(v100 + 3);
              do
              {
                *v103 = v102;
                v103 += 4;
                --v101;
              }
              while (v101);
            }
            v541 = v99;
            v104 = (*(uint64_t (**)(void))(*((_QWORD *)this + 12) + 16))();
            v105 = v541;
            v543 = v541;
            v106 = (const AudioBufferList *)*((_QWORD *)this + 13);
            if (v12[3409]
              && (VoiceProcessorV2::InjectionFilesReadSignal(this, 0, v541, *((AudioBufferList **)this + 13)),
                  v106 = (const AudioBufferList *)*((_QWORD *)this + 13),
                  v12[3409])
              || v12[3410])
            {
              v104 = VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)this, 0x33u, v541, v106, &v544);
              v106 = (const AudioBufferList *)*((_QWORD *)this + 13);
            }
            v107 = *((_QWORD *)this + 1995);
            if (AudioIssueDetectorLibraryLoader(void)::once != -1)
              dispatch_once(&AudioIssueDetectorLibraryLoader(void)::once, &__block_literal_global_13262);
            if (AudioIssueDetectorLibraryLoader(void)::libSym)
              v104 = AudioIssueDetectorLibraryLoader(void)::libSym(v107, 51, 0, v106, v541, &v544);
            if (*((_BYTE *)this + 2082) || *((_DWORD *)this + 19) == 7 && *((float *)this + 3116) == 0.0)
            {
              vp::Audio_Buffer_List_Ref::Audio_Buffer_List_Ref(&buf, *((const AudioBufferList **)this + 13));
              v547.mSampleTime = buf.mSampleTime;
              *(_QWORD *)&buf.mSampleTime = vp::Audio_Buffer_List_Ref::begin((vp::Audio_Buffer_List_Ref *)&v547);
              buf.mHostTime = v108;
              *(_QWORD *)&v550.mSampleTime = vp::Audio_Buffer_List_Ref::end((vp::Audio_Buffer_List_Ref *)&v547);
              v550.mHostTime = v109;
              while (1)
              {
                v104 = vp::Audio_Buffer_Iterator::operator!=(&buf, &v550);
                if ((v104 & 1) == 0)
                  break;
                mSampleTime = buf.mSampleTime;
                frame_count = vp::Audio_Buffer_Ref::get_frame_count((vp::Audio_Buffer_Ref *)&buf);
                vp::fill(*(float ***)&mSampleTime, frame_count, 0.0);
                vp::Audio_Buffer_Iterator::operator++((uint64_t)&buf);
              }
            }
            v112 = *((_DWORD *)this + 55);
            if ((v112 & 0x20) != 0)
            {
              v115 = *((_DWORD *)this + 59);
              if ((v115 - 65) <= 0xFFFFFFBF)
              {
                if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
                {
                  LODWORD(buf.mSampleTime) = 136315394;
                  *(_QWORD *)((char *)&buf.mSampleTime + 4) = "vpProcessDownlink_v8.cpp";
                  WORD2(buf.mHostTime) = 1024;
                  *(_DWORD *)((char *)&buf.mHostTime + 6) = 277;
                  _os_log_impl(&dword_1B5ED0000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  STACK_ABL: invalid number of buffers", (uint8_t *)&buf, 0x12u);
                }
                exception = __cxa_allocate_exception(0x10uLL);
                *(_QWORD *)exception = &off_1E69EE218;
                exception[2] = -50;
              }
              MEMORY[0x1E0C80A78](v104);
              v114 = (int *)((char *)&v512 - v116);
              bzero((char *)&v512 - v116, v117);
            }
            else
            {
              MEMORY[0x1E0C80A78](v104);
              v114 = (int *)&v510;
              v510 = 0;
              v511 = 0uLL;
              v115 = 1;
            }
            v118 = 0;
            *v114 = v115;
            v119 = 2;
            if ((v112 & 0x20) != 0)
              goto LABEL_261;
LABEL_260:
            for (i = 1; v118 < i; i = *((unsigned int *)this + 59))
            {
              *(_OWORD *)&v114[v119] = *(_OWORD *)(*((_QWORD *)this + 13) + v119 * 4);
              ++v118;
              v119 += 4;
              if ((v112 & 0x20) == 0)
                goto LABEL_260;
LABEL_261:
              ;
            }
            v121 = *((_DWORD *)this + 65);
            if ((v121 & 0x20) != 0)
            {
              v123 = *((_DWORD *)this + 69);
              if ((v123 - 65) <= 0xFFFFFFBF)
              {
                if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
                {
                  LODWORD(buf.mSampleTime) = 136315394;
                  *(_QWORD *)((char *)&buf.mSampleTime + 4) = "vpProcessDownlink_v8.cpp";
                  WORD2(buf.mHostTime) = 1024;
                  *(_DWORD *)((char *)&buf.mHostTime + 6) = 283;
                  _os_log_impl(&dword_1B5ED0000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  STACK_ABL: invalid number of buffers", (uint8_t *)&buf, 0x12u);
                }
                v501 = __cxa_allocate_exception(0x10uLL);
                *(_QWORD *)v501 = &off_1E69EE218;
                v501[2] = -50;
              }
              MEMORY[0x1E0C80A78](v113);
              v122 = (AudioBufferList *)((char *)&v512 - v124);
              bzero((char *)&v512 - v124, v125);
            }
            else
            {
              MEMORY[0x1E0C80A78](v113);
              v122 = (AudioBufferList *)&v510;
              v510 = 0;
              v511 = 0uLL;
              v123 = 1;
            }
            v126 = 0;
            v127 = 0;
            v122->mNumberBuffers = v123;
            v128 = v122;
            if ((v121 & 0x20) != 0)
              goto LABEL_271;
LABEL_270:
            for (j = 1; v127 < j; j = *((unsigned int *)this + 69))
            {
              v130 = (UInt32 *)((char *)&v122->mNumberBuffers + v126);
              *((_QWORD *)v130 + 2) = *(_QWORD *)(*((_QWORD *)this + 22) + v126 + 16);
              v130[2] = 1;
              v130[3] = 4 * v105;
              ++v127;
              v126 += 16;
              if ((v121 & 0x20) == 0)
                goto LABEL_270;
LABEL_271:
              ;
            }
            if ((*((_BYTE *)this + 8832) & 1) != 0 && (*((_BYTE *)this + 8840) & 1) != 0 && *((_QWORD *)this + 437))
            {
              v131 = (unint64_t *)((char *)this + 0x4000);
              v132 = atomic_load((unint64_t *)this + 2048);
              if (v132)
              {
                *(_QWORD *)&v547.mSampleTime = this;
                *(_QWORD *)&buf.mSampleTime = caulk::function_ref<void ()(unsigned char const*,unsigned long)>::functor_invoker<VoiceProcessorV8::ProcessDownlinkAudio(AudioBufferList *,AudioBufferList *,AudioBufferList *,AudioBufferList *,unsigned int,AudioTimeStamp const&)::$_0>;
                buf.mHostTime = (UInt64)&v547;
                *(_QWORD *)&v550.mSampleTime = &buf;
                caulk::concurrent::lf_read_synchronized_write<std::optional<std::vector<unsigned char>>>::access<vp::utility::Lock_Free_SRSW_Storage<unsigned char>::load(caulk::function_ref<void ()(unsigned char const*,unsigned long)>)::{lambda(std::optional<std::vector<unsigned char>> const&)#1}>((VoiceProcessorV8 *)((char *)this + 16304), &v550);
                do
                  v133 = __ldaxr(v131);
                while (__stlxr(v133 - v132, v131));
              }
              v134 = *((_DWORD *)this + 576);
              if (v134 != *((_DWORD *)this + 578))
                AudioUnitSetParameter(*((AudioUnit *)this + 437), 0x75696F72u, 0, 0, (float)v134, 0);
              buf = v544;
              LODWORD(v546.mSampleTime) = 512;
              *(_QWORD *)&v550.mSampleTime = v114;
              *(_QWORD *)&v547.mSampleTime = v122;
              LODWORD(v105) = v543;
              AudioUnitProcessMultiple(*((AudioUnit *)this + 437), (AudioUnitRenderActionFlags *)&v546, &buf, v543, 1u, (const AudioBufferList **)&v550, 1u, (AudioBufferList **)&v547);
            }
            else
            {
              *(_QWORD *)&v549.mNumberBuffers = v122;
              *(_QWORD *)&buf.mSampleTime = vp::Audio_Buffer_List_Ref::begin((vp::Audio_Buffer_List_Ref *)&v549);
              buf.mHostTime = v162;
              *(_QWORD *)&v550.mSampleTime = vp::Audio_Buffer_List_Ref::end((vp::Audio_Buffer_List_Ref *)&v549);
              v550.mHostTime = v163;
              while (vp::Audio_Buffer_Iterator::operator!=(&buf, &v550))
              {
                v164 = v128;
                vp::fill(*(float ***)&buf.mSampleTime, v105, 0.0);
                *(_QWORD *)&v548.mNumberBuffers = v114;
                *(_QWORD *)&v547.mSampleTime = vp::Audio_Buffer_List_Ref::begin((vp::Audio_Buffer_List_Ref *)&v548);
                v547.mHostTime = v165;
                *(_QWORD *)&v546.mSampleTime = vp::Audio_Buffer_List_Ref::end((vp::Audio_Buffer_List_Ref *)&v548);
                v546.mHostTime = v166;
                while (vp::Audio_Buffer_Iterator::operator!=(&v547, &v546))
                {
                  data = (const float *)vp::Audio_Buffer_Ref::get_data((vp::Audio_Buffer_Ref *)&buf);
                  v168 = (const float *)vp::Audio_Buffer_Ref::get_data((vp::Audio_Buffer_Ref *)&v547);
                  v169 = (float *)vp::Audio_Buffer_Ref::get_data((vp::Audio_Buffer_Ref *)&buf);
                  vDSP_vadd(data, 1, v168, 1, v169, 1, v105);
                  vp::Audio_Buffer_Iterator::operator++((uint64_t)&v547);
                }
                vp::Audio_Buffer_Iterator::operator++((uint64_t)&buf);
                v128 = v164;
              }
            }
            if ((*((_BYTE *)this + 8832) & 2) != 0 && (*((_BYTE *)this + 8840) & 2) != 0)
            {
              v135 = *((_QWORD *)this + 438);
              if (v135)
              {
                buf = v544;
                LODWORD(v547.mSampleTime) = 512;
                MEMORY[0x1E0C80A78](v135);
                v511 = 0uLL;
                v510 = 0;
                v511 = *(_OWORD *)(*((_QWORD *)this + 22) + 8);
                LODWORD(v510) = 1;
                *(_QWORD *)&v550.mSampleTime = &v510;
                AudioUnitProcessMultiple(v136, (AudioUnitRenderActionFlags *)&v547, &buf, v105, 1u, (const AudioBufferList **)&v550, 0, (AudioBufferList **)&v546);
              }
            }
            v137 = (CA::AudioSampleRateConverter **)*((_QWORD *)this + 47);
            v536 = a5;
            if (v137)
            {
              VoiceProcessor::SampleRateConverter::Convert(v137, &v543, &NumberOfSourceFrames, v128, *((const AudioBufferList **)this + 23));
              LODWORD(v105) = NumberOfSourceFrames;
              v543 = NumberOfSourceFrames;
              v128 = (const AudioBufferList *)*((_QWORD *)this + 23);
            }
            v139 = VoiceProcessorV2::DetermineNoiseBasedVolume(this);
            v140 = *((_DWORD *)this + 130);
            buf = v544;
            if (v140)
            {
              v141 = 0;
              v142 = 0;
              v143 = 4 * (v105 / v140);
              v531 = &v128->mBuffers[0].mData;
              LODWORD(v537) = v105 / v140;
              v144 = (double)(v105 / v140);
              v534 = v128;
              do
              {
                if (v128->mNumberBuffers - 65 <= 0xFFFFFFBF)
                {
                  if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
                  {
                    LODWORD(v550.mSampleTime) = 136315394;
                    *(_QWORD *)((char *)&v550.mSampleTime + 4) = "vpProcessDownlink_v8.cpp";
                    WORD2(v550.mHostTime) = 1024;
                    *(_DWORD *)((char *)&v550.mHostTime + 6) = 387;
                    _os_log_impl(&dword_1B5ED0000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  STACK_ABL: invalid number of buffers", (uint8_t *)&v550, 0x12u);
                  }
                  v488 = __cxa_allocate_exception(0x10uLL);
                  *(_QWORD *)v488 = &off_1E69EE218;
                  v488[2] = -50;
                }
                MEMORY[0x1E0C80A78](v138);
                v146 = (AudioBufferList *)((char *)&v512 - v145);
                bzero((char *)&v512 - v145, v147);
                v148 = v128->mNumberBuffers;
                v146->mNumberBuffers = v148;
                if ((_DWORD)v148)
                {
                  v149 = &v146->mBuffers[0].mData;
                  v150 = v531;
                  do
                  {
                    *((_DWORD *)v149 - 2) = 1;
                    *((_DWORD *)v149 - 1) = v143;
                    v151 = (char *)*v150;
                    v150 += 2;
                    *v149 = &v151[4 * v142];
                    v149 += 2;
                    --v148;
                  }
                  while (v148);
                }
                v152 = *((_QWORD *)this + 1104);
                if ((v152 & 8) != 0 && (*((_BYTE *)this + 8840) & 8) != 0)
                {
                  v153 = (OpaqueAudioComponentInstance *)*((_QWORD *)this + 440);
                  if (v153)
                  {
                    v550 = buf;
                    LODWORD(v547.mSampleTime) = 512;
                    AudioUnitProcess(v153, (AudioUnitRenderActionFlags *)&v547, &v550, (UInt32)v537, v146);
                    if (v530[3409] || v530[3410])
                      VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)this, 0x55u, v537, v146, &v550);
                    v152 = *((_QWORD *)this + 1104);
                  }
                }
                if ((v152 & 0x20) != 0 && (*((_BYTE *)this + 8840) & 0x20) != 0)
                {
                  v154 = (OpaqueAudioComponentInstance *)*((_QWORD *)this + 442);
                  if (v154)
                  {
                    v550 = buf;
                    LODWORD(v547.mSampleTime) = 512;
                    AudioUnitProcess(v154, (AudioUnitRenderActionFlags *)&v547, &v550, (UInt32)v537, v146);
                    if (v530[3409] || v530[3410])
                      VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)this, 0x56u, v537, v146, &v550);
                    v152 = *((_QWORD *)this + 1104);
                  }
                }
                v155 = *(_OWORD *)&buf.mRateScalar;
                *((_OWORD *)this + 1097) = *(_OWORD *)&buf.mSampleTime;
                *((_OWORD *)this + 1098) = v155;
                v156 = *(_OWORD *)&buf.mSMPTETime.mHours;
                *((_OWORD *)this + 1099) = *(_OWORD *)&buf.mSMPTETime.mSubframes;
                *((_OWORD *)this + 1100) = v156;
                if ((~(_BYTE)v152 & 0xC0) != 0
                  || ((*((_BYTE *)this + 8840) & 0x40) == 0 || !*((_QWORD *)this + 443)
                    ? ((*((_BYTE *)this + 8840) & 0x80) != 0
                     ? (v157 = *((_QWORD *)this + 444) != 0)
                     : (v157 = 0))
                    : (v157 = 1),
                      !*((_BYTE *)this + 480)
                    ? (v138 = (*(uint64_t (**)(VoiceProcessorV8 *, AudioBufferList *, AudioBufferList *, _BOOL8, _QWORD))(*(_QWORD *)this + 768))(this, v146, v146, v157, v537)): (*(_QWORD *)&v550.mSampleTime = v146, *(_QWORD *)&v547.mSampleTime = v146, v138 = BlockProcessor::Process(*((BlockProcessor **)this + 2193), v537, (const AudioBufferList **)&v550, (AudioBufferList **)&v547)), !v157))
                {
                  v138 = (*(uint64_t (**)(VoiceProcessorV8 *, AudioBufferList *, AudioBufferList *, _QWORD, _QWORD))(*(_QWORD *)this + 768))(this, v146, v146, 0, v537);
                }
                v158 = *((_QWORD *)this + 1104);
                if ((v158 & 0x100) != 0 && (*((_BYTE *)this + 8841) & 1) != 0)
                {
                  v138 = *((_QWORD *)this + 445);
                  if (v138)
                  {
                    v550 = buf;
                    AudioUnitSetParameter((AudioUnit)v138, 5u, 0, 0, v139, 0);
                    LODWORD(v547.mSampleTime) = 512;
                    v138 = AudioUnitProcess(*((AudioUnit *)this + 445), (AudioUnitRenderActionFlags *)&v547, &v550, (UInt32)v537, v146);
                    if (v530[3409] || v530[3410])
                      v138 = VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)this, 0x36u, v537, v146, &v550);
                    v158 = *((_QWORD *)this + 1104);
                  }
                }
                if ((v158 & 0x200) != 0 && (*((_BYTE *)this + 8841) & 2) != 0)
                {
                  v138 = *((_QWORD *)this + 446);
                  if (v138)
                  {
                    v550 = buf;
                    LODWORD(v547.mSampleTime) = 512;
                    v138 = AudioUnitProcess((AudioUnit)v138, (AudioUnitRenderActionFlags *)&v547, &v550, (UInt32)v537, v146);
                    if (v530[3409] || v530[3410])
                      v138 = VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)this, 0x57u, v537, v146, &v550);
                    v158 = *((_QWORD *)this + 1104);
                  }
                }
                if ((v158 & 0x4000) != 0 && (*((_BYTE *)this + 8841) & 0x40) != 0)
                {
                  if (*((_QWORD *)this + 451))
                  {
                    v138 = (*(uint64_t (**)(VoiceProcessorV8 *, AudioBufferList *, _QWORD, AudioTimeStamp *))(*(_QWORD *)this + 664))(this, v146, v537, &buf);
                    if (v530[3409] || v530[3410])
                      v138 = VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)this, 0x7Bu, v537, v146, &buf);
                  }
                }
                v142 += v537;
                buf.mSampleTime = buf.mSampleTime + v144;
                ++v141;
                v128 = v534;
              }
              while (v141 < *((_DWORD *)this + 130));
            }
            v159 = *((_DWORD *)this + 75);
            if ((v159 & 0x20) != 0)
            {
              v161 = *((_DWORD *)this + 79);
              a5 = v536;
              v12 = v530;
              if ((v161 - 65) <= 0xFFFFFFBF)
              {
                if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
                {
                  LODWORD(v550.mSampleTime) = 136315394;
                  *(_QWORD *)((char *)&v550.mSampleTime + 4) = "vpProcessDownlink_v8.cpp";
                  WORD2(v550.mHostTime) = 1024;
                  *(_DWORD *)((char *)&v550.mHostTime + 6) = 463;
                  _os_log_impl(&dword_1B5ED0000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  STACK_ABL: invalid number of buffers", (uint8_t *)&v550, 0x12u);
                }
                v502 = __cxa_allocate_exception(0x10uLL);
                *(_QWORD *)v502 = &off_1E69EE218;
                v502[2] = -50;
              }
              MEMORY[0x1E0C80A78](v138);
              v160 = (int *)((char *)&v512 - v170);
              bzero((char *)&v512 - v170, v171);
            }
            else
            {
              MEMORY[0x1E0C80A78](v138);
              v160 = (int *)&v510;
              v510 = 0;
              v511 = 0uLL;
              v161 = 1;
              a5 = v536;
              v12 = v530;
            }
            *v160 = v161;
            v173 = *((_QWORD *)this + 47);
            v172 = *((_QWORD *)this + 48);
            if (v172)
            {
              if (v173)
              {
                NumberOfSourceFrames = *((_DWORD *)this + 121);
                v172 = VoiceProcessor::SampleRateConverter::Convert((CA::AudioSampleRateConverter **)v172, &v543, &NumberOfSourceFrames, v128, *((const AudioBufferList **)this + 24));
                v174 = 0;
                v175 = *((_DWORD *)this + 75);
                v176 = 2;
                v178 = v532;
                v177 = v533;
                v179 = v535;
                if ((v175 & 0x20) != 0)
                  goto LABEL_357;
LABEL_356:
                for (k = 1; v174 < k; k = *((unsigned int *)this + 79))
                {
                  *(_OWORD *)&v160[v176] = *(_OWORD *)(*((_QWORD *)this + 24) + v176 * 4);
                  ++v174;
                  v176 += 4;
                  if ((v175 & 0x20) == 0)
                    goto LABEL_356;
LABEL_357:
                  ;
                }
              }
              else
              {
                v172 = VoiceProcessor::SampleRateConverter::Convert((CA::AudioSampleRateConverter **)v172, &v543, &NumberOfSourceFrames, v128, *((const AudioBufferList **)this + 24));
                v186 = 0;
                v187 = *((_DWORD *)this + 75);
                v188 = 2;
                v178 = v532;
                v177 = v533;
                v179 = v535;
                if ((v187 & 0x20) != 0)
                  goto LABEL_370;
LABEL_369:
                for (m = 1; v186 < m; m = *((unsigned int *)this + 79))
                {
                  *(_OWORD *)&v160[v188] = *(_OWORD *)(*((_QWORD *)this + 24) + v188 * 4);
                  ++v186;
                  v188 += 4;
                  if ((v187 & 0x20) == 0)
                    goto LABEL_369;
LABEL_370:
                  ;
                }
              }
              v543 = NumberOfSourceFrames;
            }
            else if (v173)
            {
              v181 = 0;
              mBuffers = v128->mBuffers;
              v183 = v160 + 2;
              v178 = v532;
              v177 = v533;
              v179 = v535;
              if ((v159 & 0x20) != 0)
                goto LABEL_364;
LABEL_363:
              for (n = 1; v181 < n; n = *((unsigned int *)this + 79))
              {
                v185 = (__int128)*mBuffers++;
                *v183++ = v185;
                ++v181;
                if ((v159 & 0x20) == 0)
                  goto LABEL_363;
LABEL_364:
                ;
              }
            }
            else
            {
              v387 = v128->mBuffers;
              v388 = v160 + 2;
              v178 = v532;
              v177 = v533;
              v179 = v535;
              if ((v159 & 0x20) != 0)
                goto LABEL_679;
LABEL_678:
              for (ii = 1; v173 < ii; ii = *((unsigned int *)this + 79))
              {
                v390 = (__int128)*v387++;
                *v388++ = v390;
                ++v173;
                if ((v159 & 0x20) == 0)
                  goto LABEL_678;
LABEL_679:
                ;
              }
            }
            v550 = v544;
            if (*((_DWORD *)this + 130))
            {
              v190 = 0;
              LODWORD(v534) = 0;
              v512 = (VoiceProcessorV8 *)((char *)this + 2744);
              v519 = &v178->mBuffers[0].mData;
              v520 = (uint64_t *)(v160 + 4);
              v517 = &v179->mBuffers[0].mData;
              v518 = &v177->mBuffers[0].mData;
              v516 = &a5->mBuffers[0].mData;
              v191 = 1;
              v192 = -8589940800.0;
              do
              {
                if ((*((_BYTE *)this + 300) & 0x20) != 0)
                {
                  v196 = *((_DWORD *)this + 79);
                  if ((v196 - 65) <= 0xFFFFFFBF)
                  {
                    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
                    {
                      LODWORD(v547.mSampleTime) = 136315394;
                      *(_QWORD *)((char *)&v547.mSampleTime + 4) = "vpProcessDownlink_v8.cpp";
                      WORD2(v547.mHostTime) = 1024;
                      *(_DWORD *)((char *)&v547.mHostTime + 6) = 512;
                      _os_log_impl(&dword_1B5ED0000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  STACK_ABL: invalid number of buffers", (uint8_t *)&v547, 0x12u);
                    }
                    v499 = __cxa_allocate_exception(0x10uLL);
                    *(_QWORD *)v499 = &off_1E69EE218;
                    v499[2] = -50;
                  }
                  MEMORY[0x1E0C80A78](v172);
                  v195 = (int *)((char *)&v512 - v197);
                  bzero((char *)&v512 - v197, v198);
                  v194 = v532;
                }
                else
                {
                  MEMORY[0x1E0C80A78](v172);
                  v195 = (int *)&v510;
                  v510 = 0;
                  v511 = 0uLL;
                  v196 = 1;
                }
                *v195 = v196;
                if (v194)
                {
                  v199 = v194->mNumberBuffers;
                  if (v194->mNumberBuffers - 65 <= 0xFFFFFFBF)
                  {
                    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
                    {
                      LODWORD(v547.mSampleTime) = 136315394;
                      *(_QWORD *)((char *)&v547.mSampleTime + 4) = "vpProcessDownlink_v8.cpp";
                      WORD2(v547.mHostTime) = 1024;
                      *(_DWORD *)((char *)&v547.mHostTime + 6) = 514;
                      _os_log_impl(&dword_1B5ED0000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  STACK_ABL: invalid number of buffers", (uint8_t *)&v547, 0x12u);
                    }
                    v496 = __cxa_allocate_exception(0x10uLL);
                    *(_QWORD *)v496 = &off_1E69EE218;
                    v496[2] = -50;
                  }
                }
                else
                {
                  v199 = 1;
                }
                MEMORY[0x1E0C80A78](v193);
                v201 = (int *)((char *)&v512 - v200);
                bzero((char *)&v512 - v200, v202);
                v529 = v201;
                *v201 = v199;
                if (v533)
                {
                  v204 = v533->mNumberBuffers;
                  if (v533->mNumberBuffers - 65 <= 0xFFFFFFBF)
                  {
                    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
                    {
                      LODWORD(v547.mSampleTime) = 136315394;
                      *(_QWORD *)((char *)&v547.mSampleTime + 4) = "vpProcessDownlink_v8.cpp";
                      WORD2(v547.mHostTime) = 1024;
                      *(_DWORD *)((char *)&v547.mHostTime + 6) = 516;
                      _os_log_impl(&dword_1B5ED0000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  STACK_ABL: invalid number of buffers", (uint8_t *)&v547, 0x12u);
                    }
                    v492 = __cxa_allocate_exception(0x10uLL);
                    *(_QWORD *)v492 = &off_1E69EE218;
                    v492[2] = -50;
                  }
                }
                else
                {
                  v204 = 1;
                }
                v531 = (void **)v195;
                MEMORY[0x1E0C80A78](v203);
                v206 = (UInt32 *)((char *)&v512 - v205);
                bzero((char *)&v512 - v205, v207);
                v528 = v206;
                *v206 = v204;
                v522 = v190;
                if (v535)
                {
                  v209 = v535->mNumberBuffers;
                  if (v535->mNumberBuffers - 65 <= 0xFFFFFFBF)
                  {
                    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
                    {
                      LODWORD(v547.mSampleTime) = 136315394;
                      *(_QWORD *)((char *)&v547.mSampleTime + 4) = "vpProcessDownlink_v8.cpp";
                      WORD2(v547.mHostTime) = 1024;
                      *(_DWORD *)((char *)&v547.mHostTime + 6) = 518;
                      _os_log_impl(&dword_1B5ED0000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  STACK_ABL: invalid number of buffers", (uint8_t *)&v547, 0x12u);
                    }
                    v494 = __cxa_allocate_exception(0x10uLL);
                    *(_QWORD *)v494 = &off_1E69EE218;
                    v494[2] = -50;
                  }
                }
                else
                {
                  v209 = 1;
                }
                MEMORY[0x1E0C80A78](v208);
                v211 = (UInt32 *)((char *)&v512 - v210);
                bzero((char *)&v512 - v210, v212);
                *v211 = v209;
                v214 = (_DWORD *)*((_QWORD *)this + 203);
                if (*((_BYTE *)this + 2244))
                {
                  if (!v214)
                    goto LABEL_402;
                  if (!*v214)
                    goto LABEL_400;
                  v215 = 0;
                  v216 = (void **)(v214 + 4);
                  do
                  {
                    bzero(*v216, *((unsigned int *)v216 - 1));
                    ++v215;
                    v216 += 2;
                  }
                  while (v215 < *v214);
                  v214 = (_DWORD *)*((_QWORD *)this + 203);
                }
                if (v214)
                {
LABEL_400:
                  v217 = *v214;
                  if ((*v214 - 65) <= 0xFFFFFFBF)
                  {
                    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
                    {
                      LODWORD(v547.mSampleTime) = 136315394;
                      *(_QWORD *)((char *)&v547.mSampleTime + 4) = "vpProcessDownlink_v8.cpp";
                      WORD2(v547.mHostTime) = 1024;
                      *(_DWORD *)((char *)&v547.mHostTime + 6) = 524;
                      _os_log_impl(&dword_1B5ED0000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  STACK_ABL: invalid number of buffers", (uint8_t *)&v547, 0x12u);
                    }
                    v498 = __cxa_allocate_exception(0x10uLL);
                    *(_QWORD *)v498 = &off_1E69EE218;
                    v498[2] = -50;
                  }
                  goto LABEL_403;
                }
LABEL_402:
                v217 = 1;
LABEL_403:
                MEMORY[0x1E0C80A78](v213);
                v219 = (UInt32 *)((char *)&v512 - v218);
                bzero((char *)&v512 - v218, v220);
                v527 = v219;
                *v219 = v217;
                v222 = a5->mNumberBuffers;
                if ((v222 - 65) <= 0xFFFFFFBF)
                {
                  if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
                  {
                    LODWORD(v547.mSampleTime) = 136315394;
                    *(_QWORD *)((char *)&v547.mSampleTime + 4) = "vpProcessDownlink_v8.cpp";
                    WORD2(v547.mHostTime) = 1024;
                    *(_DWORD *)((char *)&v547.mHostTime + 6) = 526;
                    _os_log_impl(&dword_1B5ED0000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  STACK_ABL: invalid number of buffers", (uint8_t *)&v547, 0x12u);
                  }
                  v489 = __cxa_allocate_exception(0x10uLL);
                  *(_QWORD *)v489 = &off_1E69EE218;
                  v489[2] = -50;
                }
                MEMORY[0x1E0C80A78](v221);
                v224 = (int *)((char *)&v512 - v223);
                bzero((char *)&v512 - v223, v225);
                *v224 = v222;
                v226 = *(unsigned int *)v531;
                if ((_DWORD)v226)
                {
                  v227 = 4 * *((_DWORD *)this + 129);
                  v228 = v534;
                  v229 = v531 + 2;
                  v230 = v520;
                  do
                  {
                    *((_DWORD *)v229 - 2) = 1;
                    *((_DWORD *)v229 - 1) = v227;
                    v231 = *v230;
                    v230 += 2;
                    *v229 = v231 + 4 * v228;
                    v229 += 2;
                    --v226;
                  }
                  while (v226);
                }
                v232 = *v529;
                v234 = v532;
                v233 = v533;
                v235 = v535;
                if ((_DWORD)v232)
                {
                  v236 = 4 * *((_DWORD *)this + 129);
                  v237 = v534;
                  v238 = (uint64_t *)(v529 + 4);
                  v239 = v519;
                  do
                  {
                    *((_DWORD *)v238 - 2) = 1;
                    *((_DWORD *)v238 - 1) = v236;
                    if (v234)
                      v240 = (uint64_t)*v239 + 4 * v237;
                    else
                      v240 = 0;
                    *v238 = v240;
                    v238 += 2;
                    v239 += 2;
                    --v232;
                  }
                  while (v232);
                }
                v241 = *v528;
                if ((_DWORD)v241)
                {
                  v242 = 4 * *((_DWORD *)this + 129);
                  v243 = v534;
                  v244 = (uint64_t *)(v528 + 4);
                  v245 = v518;
                  do
                  {
                    *((_DWORD *)v244 - 2) = 1;
                    *((_DWORD *)v244 - 1) = v242;
                    if (v233)
                      v246 = (uint64_t)*v245 + 4 * v243;
                    else
                      v246 = 0;
                    *v244 = v246;
                    v244 += 2;
                    v245 += 2;
                    --v241;
                  }
                  while (v241);
                }
                v247 = *v211;
                if ((_DWORD)v247)
                {
                  v248 = 4 * *((_DWORD *)this + 129);
                  v249 = v534;
                  v250 = (uint64_t *)(v211 + 4);
                  v251 = v517;
                  do
                  {
                    *((_DWORD *)v250 - 2) = 1;
                    *((_DWORD *)v250 - 1) = v248;
                    if (v235)
                      v252 = (uint64_t)*v251 + 4 * v249;
                    else
                      v252 = 0;
                    *v250 = v252;
                    v250 += 2;
                    v251 += 2;
                    --v247;
                  }
                  while (v247);
                }
                if ((_DWORD)v222)
                {
                  v253 = 4 * *((_DWORD *)this + 129);
                  v254 = v534;
                  v255 = (uint64_t *)(v224 + 4);
                  v256 = v516;
                  do
                  {
                    *((_DWORD *)v255 - 2) = 1;
                    *((_DWORD *)v255 - 1) = v253;
                    if (a5)
                      v257 = (uint64_t)*v256 + 4 * v254;
                    else
                      v257 = 0;
                    *v255 = v257;
                    v255 += 2;
                    v256 += 2;
                    --v222;
                  }
                  while (v222);
                }
                if (v217)
                {
                  v258 = 4 * *((_DWORD *)this + 129);
                  v259 = v534;
                  v260 = v217;
                  v261 = v527 + 4;
                  v262 = v214 + 4;
                  do
                  {
                    *(v261 - 2) = 1;
                    *(v261 - 1) = v258;
                    if (v214)
                      v263 = *v262 + 4 * v259;
                    else
                      v263 = 0;
                    *(_QWORD *)v261 = v263;
                    v261 += 4;
                    v262 += 2;
                    --v260;
                  }
                  while (v260);
                }
                if (v235 && *((_BYTE *)this + 2244))
                {
                  CopyAllBuffersABL(v527, v535);
                  v234 = v532;
                }
                if (v234)
                  v264 = (AudioBufferList *)v529;
                else
                  v264 = 0;
                MonoABL = GetMonoABL(v264, &v549, *((unsigned int *)this + 129));
                if (v533)
                  v266 = (AudioBufferList *)v528;
                else
                  v266 = 0;
                v526 = GetMonoABL(v266, &v548, *((unsigned int *)this + 129));
                if (v535)
                  v267 = (AudioBufferList *)v211;
                else
                  v267 = 0;
                v268 = GetMonoABL(v267, &v540, *((unsigned int *)this + 129));
                v269 = 0;
                *(_QWORD *)&v547.mSampleTime = 10;
                v547.mHostTime = (UInt64)v531;
                *(_QWORD *)&v547.mRateScalar = 11;
                v525 = v268;
                v547.mWordClockTime = (UInt64)v268;
                *(_QWORD *)&v547.mSMPTETime.mSubframes = 12;
                v523 = MonoABL;
                *(_QWORD *)&v547.mSMPTETime.mType = MonoABL;
                *(_QWORD *)&v547.mSMPTETime.mHours = 13;
                *(_QWORD *)&v547.mFlags = v526;
                do
                {
                  v270 = (unsigned int *)&v547 + 4 * v269;
                  v271 = *v270;
                  v272 = (AudioBufferList *)*((_QWORD *)v270 + 1);
                  if (!v272)
                  {
                    v272 = (AudioBufferList *)*((_QWORD *)this + 202);
                    if (v272->mNumberBuffers)
                    {
                      v273 = 0;
                      v274 = &v272->mBuffers[0].mData;
                      do
                      {
                        bzero(*v274, *((unsigned int *)v274 - 1));
                        ++v273;
                        v274 += 2;
                      }
                      while (v273 < v272->mNumberBuffers);
                      v272 = (AudioBufferList *)*((_QWORD *)this + 202);
                      a5 = v536;
                    }
                  }
                  v275 = VoiceProcessorV2::VPUseAUInProcess(this, v271, 0);
                  if (v272)
                    v276 = v275;
                  else
                    v276 = 0;
                  if (v276)
                  {
                    v546 = v550;
                    LODWORD(v545[0]) = 512;
                    AudioUnitProcess(*((AudioUnit *)this + v271 + 437), (AudioUnitRenderActionFlags *)v545, &v546, *((_DWORD *)this + 129), v272);
                  }
                  ++v269;
                }
                while (v269 != 4);
                v277 = *((_QWORD *)this + 1104);
                if ((v277 & 0x40000000) == 0)
                  goto LABEL_463;
                v278 = *((_QWORD *)this + 1105);
                if ((v278 & 0x40000000) == 0)
                  goto LABEL_463;
                v17 = 0;
                if (!*((_QWORD *)this + 467) || (v277 & v278 & 0x80000000) == 0)
                  goto LABEL_464;
                if (*((_QWORD *)this + 468) && (v338 = (uint64_t *)v512, vp::Audio_Buffer::get_audio_buffer_list(v512)))
                {
                  vp::Audio_Buffer::prepare(v338, *((_DWORD *)this + 129));
                  audio_buffer_list = (_DWORD *)vp::Audio_Buffer::get_audio_buffer_list((vp::Audio_Buffer *)v338);
                  if (*audio_buffer_list)
                  {
                    v340 = audio_buffer_list;
                    v341 = 0;
                    v342 = (void **)(audio_buffer_list + 4);
                    do
                    {
                      bzero(*v342, *((unsigned int *)v342 - 1));
                      ++v341;
                      v342 += 2;
                    }
                    while (v341 < *v340);
                  }
                  v17 = vp::Audio_Buffer::get_audio_buffer_list((vp::Audio_Buffer *)v338);
                  LODWORD(v546.mSampleTime) = 512;
                  v547 = v550;
                  AudioUnitSetParameter(*((AudioUnit *)this + 467), 1u, 0, 0, (float)(*((float *)this + 3116) + -1.0) * 24.0, 0);
                  v343 = v530;
                  AudioUnitProcess(*((AudioUnit *)this + 467), (AudioUnitRenderActionFlags *)&v546, &v547, *((_DWORD *)this + 129), (AudioBufferList *)v17);
                  v344 = *((_DWORD *)this + 129);
                  if (v343[3409] || v343[3410])
                  {
                    VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)this, 0x3Du, *((unsigned int *)this + 129), (const AudioBufferList *)v17, &v550);
                    v344 = *((_DWORD *)this + 129);
                  }
                  v547 = v550;
                  LODWORD(v546.mSampleTime) = 512;
                  AudioUnitProcess(*((AudioUnit *)this + 468), (AudioUnitRenderActionFlags *)&v546, &v547, v344, (AudioBufferList *)v17);
                  if (v343[3409] || v343[3410])
                  {
                    VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)this, 0x3Eu, *((unsigned int *)this + 129), (const AudioBufferList *)v17, &v547);
                    if (v343[3409] || v343[3410])
                      VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)this, 0x3Fu, *((unsigned int *)this + 129), (const AudioBufferList *)v17, &v547);
                  }
                }
                else
                {
LABEL_463:
                  v17 = 0;
                }
LABEL_464:
                if (*((_BYTE *)this + 2244))
                  v279 = (uint64_t *)v224;
                else
                  v279 = (uint64_t *)v531;
                if (*((_BYTE *)this + 2244))
                  v16 = (uint64_t)v527;
                else
                  v16 = (uint64_t)v525;
                if (v16)
                  v280 = (const AudioBufferList *)v16;
                else
                  v280 = (const AudioBufferList *)v17;
                v537 = v280;
                v281 = *((_QWORD *)this + 1104);
                if ((v281 & 0x8000000) != 0 && ((*((_BYTE *)this + 8843) & 8) != 0 || *((_BYTE *)this + 472)) && v16)
                {
                  v282 = VoiceProcessorV2::CalculateDownlinkMixGainDB(this);
                  *((float *)this + 1113) = v282;
                  LODWORD(v538) = 0;
                  LODWORD(v538) = __exp10f(v282 / 20.0);
                  v545[0] = (AudioBufferList *)v16;
                  *(_QWORD *)&v547.mSampleTime = vp::Audio_Buffer_List_Ref::begin((vp::Audio_Buffer_List_Ref *)v545);
                  v547.mHostTime = v283;
                  *(_QWORD *)&v546.mSampleTime = vp::Audio_Buffer_List_Ref::end((vp::Audio_Buffer_List_Ref *)v545);
                  v546.mHostTime = v284;
                  while (vp::Audio_Buffer_Iterator::operator!=(&v547, &v546))
                  {
                    v16 = vp::Audio_Buffer_Ref::get_data((vp::Audio_Buffer_Ref *)&v547);
                    v285 = (float *)vp::Audio_Buffer_Ref::get_data((vp::Audio_Buffer_Ref *)&v547);
                    vDSP_vsmul((const float *)v16, 1, (const float *)&v538, v285, 1, *((unsigned int *)this + 129));
                    vp::Audio_Buffer_Iterator::operator++((uint64_t)&v547);
                  }
                  v281 = *((_QWORD *)this + 1104);
                }
                if ((v281 & 0x10000000) != 0)
                {
                  v286 = *(double *)&v523;
                  if ((*((_BYTE *)this + 8843) & 0x10) != 0)
                  {
                    (*(void (**)(VoiceProcessorV8 *, void **, UInt32 *))(*(_QWORD *)this + 672))(this, v531, v527);
                    v281 = *((_QWORD *)this + 1104);
                  }
                }
                else
                {
                  v286 = *(double *)&v523;
                }
                if ((v281 & 0x8000) != 0
                  && (v287 = *((_QWORD *)this + 1105), (v287 & 0x8000) != 0)
                  && (v288 = (OpaqueAudioComponentInstance *)*((_QWORD *)this + 452)) != 0)
                {
                  v289 = *((unsigned __int8 *)this + 2244);
                  v547 = v550;
                  LODWORD(v538) = 512;
                  v290 = (UInt64)v529;
                  if (v532 == 0 || v289 == 0)
                    v290 = *(_QWORD *)&v286;
                  *(_QWORD *)&v546.mSampleTime = v531;
                  v546.mHostTime = v290;
                  v291 = *(double *)&v528;
                  if (v533 == 0 || v289 == 0)
                    v291 = *(double *)&v526;
                  p_mNumberBuffers = v527;
                  if (v535 == 0 || v289 == 0)
                    p_mNumberBuffers = &v525->mNumberBuffers;
                  v546.mRateScalar = v291;
                  v546.mWordClockTime = (UInt64)p_mNumberBuffers;
                  *(_QWORD *)&v546.mSMPTETime.mSubframes = v17;
                  if ((v281 & v287 & 2) != 0)
                  {
                    v293 = (OpaqueAudioComponentInstance *)*((_QWORD *)this + 438);
                    if (v293)
                    {
                      if (v289 || v530[4072])
                      {
                        LODWORD(v545[0]) = 0;
                        Parameter = AudioUnitGetParameter(v293, 0x73707062u, 0, 0, (AudioUnitParameterValue *)v545);
                        v296 = *(float *)v545 == 1.0 && Parameter == 0;
                        LODWORD(v539) = v296;
                        AudioUnitSetProperty(*((AudioUnit *)this + 452), 0x6164756Bu, 0, 0, &v539, 4u);
                        v288 = (OpaqueAudioComponentInstance *)*((_QWORD *)this + 452);
                      }
                    }
                  }
                  v545[0] = (AudioBufferList *)v279;
                  v545[1] = (AudioBufferList *)v537;
                  AudioUnitProcessMultiple(v288, (AudioUnitRenderActionFlags *)&v538, &v547, *((_DWORD *)this + 129), 5u, (const AudioBufferList **)&v546, 2u, v545);
                  if (v530[3409] || v530[3410])
                  {
                    VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)this, 0x59u, *((unsigned int *)this + 129), (const AudioBufferList *)v279, &v547);
                    if (v530[3409] || v530[3410])
                      VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)this, 0x76u, *((unsigned int *)this + 129), v537, &v547);
                  }
                }
                else
                {
                  if (v286 != 0.0)
                  {
                    v539 = 0.44668;
                    v547.mSampleTime = v286;
                    v545[0] = (AudioBufferList *)vp::Audio_Buffer_List_Ref::operator[](&v547, 0);
                    v538 = *(double *)&v279;
                    *(_QWORD *)&v547.mSampleTime = vp::Audio_Buffer_List_Ref::begin((vp::Audio_Buffer_List_Ref *)&v538);
                    v547.mHostTime = v297;
                    *(_QWORD *)&v546.mSampleTime = vp::Audio_Buffer_List_Ref::end((vp::Audio_Buffer_List_Ref *)&v538);
                    v546.mHostTime = v298;
                    while (vp::Audio_Buffer_Iterator::operator!=(&v547, &v546))
                    {
                      v299 = (const float *)vp::Audio_Buffer_Ref::get_data((vp::Audio_Buffer_Ref *)v545);
                      v16 = vp::Audio_Buffer_Ref::get_data((vp::Audio_Buffer_Ref *)&v547);
                      v300 = (float *)vp::Audio_Buffer_Ref::get_data((vp::Audio_Buffer_Ref *)&v547);
                      vDSP_vsma(v299, 1, &v539, (const float *)v16, 1, v300, 1, *((unsigned int *)this + 129));
                      vp::Audio_Buffer_Iterator::operator++((uint64_t)&v547);
                    }
                  }
                  if (v526)
                  {
                    *(_QWORD *)&v547.mSampleTime = v526;
                    v545[0] = (AudioBufferList *)vp::Audio_Buffer_List_Ref::operator[](&v547, 0);
                    v538 = *(double *)&v279;
                    *(_QWORD *)&v547.mSampleTime = vp::Audio_Buffer_List_Ref::begin((vp::Audio_Buffer_List_Ref *)&v538);
                    v547.mHostTime = v301;
                    *(_QWORD *)&v546.mSampleTime = vp::Audio_Buffer_List_Ref::end((vp::Audio_Buffer_List_Ref *)&v538);
                    v546.mHostTime = v302;
                    while (vp::Audio_Buffer_Iterator::operator!=(&v547, &v546))
                    {
                      v303 = (const float *)vp::Audio_Buffer_Ref::get_data((vp::Audio_Buffer_Ref *)v545);
                      v16 = vp::Audio_Buffer_Ref::get_data((vp::Audio_Buffer_Ref *)&v547);
                      v304 = (float *)vp::Audio_Buffer_Ref::get_data((vp::Audio_Buffer_Ref *)&v547);
                      vDSP_vadd(v303, 1, (const float *)v16, 1, v304, 1, *((unsigned int *)this + 129));
                      vp::Audio_Buffer_Iterator::operator++((uint64_t)&v547);
                    }
                  }
                  if (v17 && (const AudioBufferList *)v17 != v537)
                  {
                    *(_QWORD *)&v547.mSampleTime = v17;
                    v545[0] = (AudioBufferList *)vp::Audio_Buffer_List_Ref::operator[](&v547, 0);
                    vp::Audio_Buffer_List_Ref::Audio_Buffer_List_Ref(&v547, v537);
                    v538 = v547.mSampleTime;
                    *(_QWORD *)&v547.mSampleTime = vp::Audio_Buffer_List_Ref::begin((vp::Audio_Buffer_List_Ref *)&v538);
                    v547.mHostTime = v305;
                    *(_QWORD *)&v546.mSampleTime = vp::Audio_Buffer_List_Ref::end((vp::Audio_Buffer_List_Ref *)&v538);
                    v546.mHostTime = v306;
                    while (vp::Audio_Buffer_Iterator::operator!=(&v547, &v546))
                    {
                      v17 = vp::Audio_Buffer_Ref::get_data((vp::Audio_Buffer_Ref *)v545);
                      v307 = (const float *)vp::Audio_Buffer_Ref::get_data((vp::Audio_Buffer_Ref *)&v547);
                      v308 = (float *)vp::Audio_Buffer_Ref::get_data((vp::Audio_Buffer_Ref *)&v547);
                      vDSP_vadd((const float *)v17, 1, v307, 1, v308, 1, *((unsigned int *)this + 129));
                      vp::Audio_Buffer_Iterator::operator++((uint64_t)&v547);
                    }
                  }
                }
                v309 = *((_QWORD *)this + 1104);
                if ((v309 & 0x8000) != 0
                  && (*((_BYTE *)this + 8841) & 0x80) != 0
                  && *((_QWORD *)this + 452)
                  && *((_BYTE *)this + 2244))
                {
                  (*(void (**)(VoiceProcessorV8 *, uint64_t *, AudioTimeStamp *))(*(_QWORD *)this + 648))(this, v279, &v550);
                  v309 = *((_QWORD *)this + 1104);
                }
                if ((v309 & 0x800000) != 0 && (*((_BYTE *)this + 8842) & 0x80) != 0)
                {
                  v310 = (OpaqueAudioComponentInstance *)*((_QWORD *)this + 460);
                  if (v310)
                  {
                    v547 = v550;
                    LODWORD(v546.mSampleTime) = 512;
                    AudioUnitProcess(v310, (AudioUnitRenderActionFlags *)&v546, &v547, *((_DWORD *)this + 129), (AudioBufferList *)v279);
                    if (v530[3409] || v530[3410])
                      VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)this, 0x37u, *((unsigned int *)this + 129), (const AudioBufferList *)v279, &v547);
                    v309 = *((_QWORD *)this + 1104);
                  }
                }
                if ((v309 & 0x1000000) != 0 && (*((_BYTE *)this + 8843) & 1) != 0)
                {
                  v311 = (OpaqueAudioComponentInstance *)*((_QWORD *)this + 461);
                  if (v311)
                  {
                    v312 = *((_DWORD *)this + 576);
                    if (v312 != *((_DWORD *)this + 578))
                    {
                      AudioUnitSetParameter(v311, 1u, 0, 0, (float)v312, 0);
                      v311 = (OpaqueAudioComponentInstance *)*((_QWORD *)this + 461);
                    }
                    v547 = v550;
                    LODWORD(v546.mSampleTime) = 512;
                    AudioUnitProcess(v311, (AudioUnitRenderActionFlags *)&v546, &v547, *((_DWORD *)this + 129), (AudioBufferList *)v279);
                    v309 = *((_QWORD *)this + 1104);
                  }
                }
                if ((v309 & 0x2000000) != 0
                  && (*((_BYTE *)this + 8843) & 2) != 0
                  && (v313 = (OpaqueAudioComponentInstance *)*((_QWORD *)this + 462)) != 0)
                {
                  v547 = v550;
                  LODWORD(v546.mSampleTime) = 512;
                  AudioUnitProcess(v313, (AudioUnitRenderActionFlags *)&v546, &v547, *((_DWORD *)this + 129), (AudioBufferList *)v279);
                }
                else if ((v309 & 0x4000000) != 0
                       && (*((_BYTE *)this + 8843) & 4) != 0
                       && (v314 = (OpaqueAudioComponentInstance *)*((_QWORD *)this + 463)) != 0)
                {
                  v315 = (AudioBufferList *)*((_QWORD *)this + 198);
                  if (v315->mNumberBuffers)
                  {
                    v17 = 0;
                    v316 = *((_DWORD *)this + 79) - 1;
                    v16 = 16;
                    do
                    {
                      if (v316 >= v17)
                        v317 = v17;
                      else
                        v317 = v316;
                      memcpy(*(void **)((char *)&v315->mNumberBuffers + v16), (const void *)v279[2 * v317 + 2], 4 * *((unsigned int *)this + 129));
                      ++v17;
                      v315 = (AudioBufferList *)*((_QWORD *)this + 198);
                      v16 += 16;
                    }
                    while (v17 < v315->mNumberBuffers);
                    v314 = (OpaqueAudioComponentInstance *)*((_QWORD *)this + 463);
                  }
                  v547 = v550;
                  LODWORD(v546.mSampleTime) = 512;
                  AudioUnitProcess(v314, (AudioUnitRenderActionFlags *)&v546, &v547, *((_DWORD *)this + 129), v315);
                  v279 = (uint64_t *)*((_QWORD *)this + 198);
                  if (!v279)
                  {
                    _os_assert_log();
                    _os_crash();
                    __break(1u);
                    goto LABEL_924;
                  }
                }
                else
                {
                  LODWORD(v538) = 0;
                  v318 = 1.0;
                  if (!*((_BYTE *)this + 2244))
                    v318 = *((float *)this + 3119);
                  LODWORD(v538) = __exp10f((float)((float)(v318 * 32.0) + -32.0) / 20.0);
                  v545[0] = (AudioBufferList *)v279;
                  *(_QWORD *)&v547.mSampleTime = vp::Audio_Buffer_List_Ref::begin((vp::Audio_Buffer_List_Ref *)v545);
                  v547.mHostTime = v319;
                  *(_QWORD *)&v546.mSampleTime = vp::Audio_Buffer_List_Ref::end((vp::Audio_Buffer_List_Ref *)v545);
                  v546.mHostTime = v320;
                  while (vp::Audio_Buffer_Iterator::operator!=(&v547, &v546))
                  {
                    v321 = (const float *)vp::Audio_Buffer_Ref::get_data((vp::Audio_Buffer_Ref *)&v547);
                    v322 = (float *)vp::Audio_Buffer_Ref::get_data((vp::Audio_Buffer_Ref *)&v547);
                    vDSP_vsmul(v321, 1, (const float *)&v538, v322, 1, *((unsigned int *)this + 129));
                    vp::Audio_Buffer_Iterator::operator++((uint64_t)&v547);
                  }
                  if (v530[3409] || v530[3410])
                    VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)this, 0x37u, *((unsigned int *)this + 129), (const AudioBufferList *)v279, &v544);
                }
                if (!v537
                  || (*((_BYTE *)this + 8835) & 0x20) == 0
                  || (*((_BYTE *)this + 8843) & 0x20) == 0 && !*((_BYTE *)this + 472))
                {
                  if (*(_DWORD *)v279)
                  {
                    v323 = 0;
                    v324 = 16;
                    do
                    {
                      memcpy(*(void **)&v224[(unint64_t)v324 / 4], (const void *)v279[(unint64_t)v324 / 8], 4 * *((unsigned int *)this + 129));
                      ++v323;
                      v324 += 16;
                    }
                    while (v323 < *(unsigned int *)v279);
                  }
                  goto LABEL_581;
                }
                if (*((_BYTE *)this + 2244))
                {
                  v325 = *((_DWORD *)this + 89);
                  v326 = *(_DWORD *)v279;
LABEL_575:
                  if (v326)
                  {
                    v327 = 0;
                    v328 = v325 - 1;
                    v329 = 4;
                    do
                    {
                      if (v328 >= v327)
                        v330 = v327;
                      else
                        v330 = v328;
                      vDSP_vadd((const float *)v279[(unint64_t)v329 / 2], 1, (const float *)v537->mBuffers[v330].mData, 1, *(float **)&v224[v329], 1, *((unsigned int *)this + 129));
                      ++v327;
                      v329 += 4;
                    }
                    while (v327 < *(unsigned int *)v279);
                  }
                  goto LABEL_581;
                }
                v326 = *(_DWORD *)v279;
                v325 = 1;
                v345 = *(_DWORD *)v279 - 1;
                if (*(_DWORD *)v279 == 1)
                  goto LABEL_575;
                while ((v345 & 0x80000000) == 0)
                {
                  v346 = (const float *)v279[2 * v345 + 2];
                  mData = (const float *)v537->mBuffers[v345 & (v345 >> 31)].mData;
                  v348 = *(float **)&v224[4 * v345-- + 4];
                  vDSP_vadd(v346, 1, mData, 1, v348, 1, *((unsigned int *)this + 129));
                }
LABEL_581:
                DynamicsDSPChannelCount = VoiceProcessorV2::GetDynamicsDSPChannelCount(this);
                if ((DynamicsDSPChannelCount - 65) <= 0xFFFFFFBF)
                {
                  if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
                  {
                    LODWORD(v547.mSampleTime) = 136315394;
                    *(_QWORD *)((char *)&v547.mSampleTime + 4) = "vpProcessDownlink_v8.cpp";
                    WORD2(v547.mHostTime) = 1024;
                    *(_DWORD *)((char *)&v547.mHostTime + 6) = 808;
                    _os_log_impl(&dword_1B5ED0000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  STACK_ABL: invalid number of buffers", (uint8_t *)&v547, 0x12u);
                  }
                  v490 = __cxa_allocate_exception(0x10uLL);
                  *(_QWORD *)v490 = &off_1E69EE218;
                  v490[2] = -50;
                }
                v332 = DynamicsDSPChannelCount;
                MEMORY[0x1E0C80A78](DynamicsDSPChannelCount);
                v334 = (AudioBufferList *)((char *)&v512 - v333);
                bzero((char *)&v512 - v333, v335);
                v334->mNumberBuffers = v332;
                v172 = (uint64_t)memcpy(v334->mBuffers, v224 + 2, 16 * v332);
                v12 = v530;
                if (v530[3409] || v530[3410])
                  v172 = VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)this, 0x35u, *((unsigned int *)this + 129), v334, &v544);
                v336 = v522;
                if ((*((_BYTE *)this + 8836) & 1) != 0 && (*((_BYTE *)this + 8844) & 1) != 0)
                {
                  v172 = *((_QWORD *)this + 469);
                  if (v172)
                  {
                    v547 = v550;
                    LODWORD(v546.mSampleTime) = 512;
                    v172 = AudioUnitProcess((AudioUnit)v172, (AudioUnitRenderActionFlags *)&v546, &v547, *((_DWORD *)this + 129), v334);
                  }
                }
                v337 = *((_DWORD *)this + 129);
                v550.mSampleTime = v550.mSampleTime + (double)v337;
                LODWORD(v534) = v337 + (_DWORD)v534;
                v190 = v336 + 1;
              }
              while (v190 < *((_DWORD *)this + 130));
            }
            v349 = VoiceProcessorV2::GetDynamicsDSPChannelCount(this);
            v350 = v349;
            v351 = *((_QWORD *)this + 1104);
            if ((v351 & 0x400000000) != 0)
            {
              v31 = v513;
              if ((*((_BYTE *)this + 8844) & 4) != 0)
              {
                v352 = (OpaqueAudioComponentInstance *)*((_QWORD *)this + 471);
                if (v352)
                {
                  if ((v349 - 65) <= 0xFFFFFFBF)
                  {
                    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
                    {
                      LODWORD(v547.mSampleTime) = 136315394;
                      *(_QWORD *)((char *)&v547.mSampleTime + 4) = "vpProcessDownlink_v8.cpp";
                      WORD2(v547.mHostTime) = 1024;
                      *(_DWORD *)((char *)&v547.mHostTime + 6) = 833;
                      _os_log_impl(&dword_1B5ED0000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  STACK_ABL: invalid number of buffers", (uint8_t *)&v547, 0x12u);
                    }
                    v503 = __cxa_allocate_exception(0x10uLL);
                    *(_QWORD *)v503 = &off_1E69EE218;
                    v503[2] = -50;
                  }
                  MEMORY[0x1E0C80A78](v349);
                  v354 = (AudioBufferList *)((char *)&v512 - v353);
                  bzero((char *)&v512 - v353, v355);
                  v354->mNumberBuffers = v350;
                  memcpy(v354->mBuffers, a5->mBuffers, 16 * v350);
                  LODWORD(v547.mSampleTime) = 512;
                  v349 = AudioUnitProcess(v352, (AudioUnitRenderActionFlags *)&v547, &v544, *((_DWORD *)this + 121), v354);
                  if (v12[3409] || v12[3410])
                    v349 = VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)this, 0x40u, v524, v354, &v544);
                  v351 = *((_QWORD *)this + 1104);
                }
              }
            }
            else
            {
              v31 = v513;
            }
            if ((v351 & 0x2000000000) != 0 && (*((_BYTE *)this + 8844) & 0x20) != 0 && *((_QWORD *)this + 474)
              || (v351 & 0x800000000) != 0 && (*((_BYTE *)this + 8844) & 8) != 0 && *((_QWORD *)this + 472))
            {
              if ((v351 & 0x2000000000) != 0)
                v356 = 37;
              else
                v356 = 35;
              if (v350 == a5->mNumberBuffers)
              {
                v547 = v544;
                LODWORD(v546.mSampleTime) = 512;
                v349 = AudioUnitProcess(*((AudioUnit *)this + v356 + 437), (AudioUnitRenderActionFlags *)&v546, &v547, *((_DWORD *)this + 121), a5);
              }
              else
              {
                v383 = (AudioBufferList *)*((_QWORD *)this + 25);
                if (v383->mNumberBuffers)
                {
                  v384 = 0;
                  v385 = 16;
                  do
                  {
                    memcpy(*(void **)((char *)&v383->mNumberBuffers + v385), a5->mBuffers[0].mData, a5->mBuffers[0].mDataByteSize);
                    ++v384;
                    v383 = (AudioBufferList *)*((_QWORD *)this + 25);
                    v385 += 16;
                  }
                  while (v384 < v383->mNumberBuffers);
                }
                v547 = v544;
                v540.mNumberBuffers = 512;
                v349 = AudioUnitProcess(*((AudioUnit *)this + v356 + 437), &v540.mNumberBuffers, &v547, *((_DWORD *)this + 121), v383);
                if ((*((_BYTE *)this + 8836) & 0x40) != 0
                  && (*((_BYTE *)this + 8844) & 0x40) != 0
                  && (v349 = *((_QWORD *)this + 475)) != 0)
                {
                  v386 = *((_DWORD *)this + 576);
                  if (v386 != *((_DWORD *)this + 578))
                  {
                    AudioUnitSetParameter((AudioUnit)v349, 0, 0, 0, (float)v386, 0);
                    v349 = *((_QWORD *)this + 475);
                  }
                  *(_QWORD *)&v549.mNumberBuffers = *((_QWORD *)this + 25);
                  *(_QWORD *)&v548.mNumberBuffers = a5;
                  v546 = v544;
                  LODWORD(v545[0]) = 512;
                  v349 = AudioUnitProcessMultiple((AudioUnit)v349, (AudioUnitRenderActionFlags *)v545, &v546, *((_DWORD *)this + 121), 1u, (const AudioBufferList **)&v549, 1u, (AudioBufferList **)&v548);
                  if (v12[3409] || v12[3410])
                    v349 = VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)this, 0x7Du, v524, a5, &v546);
                }
                else if (a5->mNumberBuffers)
                {
                  v391 = 0;
                  v392 = &a5->mBuffers[0].mData;
                  do
                  {
                    v393 = (unsigned int *)*((_QWORD *)this + 25);
                    if (v391 >= *v393)
                      v394 = 0;
                    else
                      v394 = v391;
                    v349 = (uint64_t)memcpy(*v392, *(const void **)&v393[4 * v394 + 4], *((unsigned int *)v392 - 1));
                    ++v391;
                    v392 += 2;
                  }
                  while (v391 < a5->mNumberBuffers);
                }
              }
            }
            else if ((v351 & 0x20000000000) != 0
                   && (v357 = *((_QWORD *)this + 1105), (v357 & 0x20000000000) != 0)
                   && *((_QWORD *)this + 478))
            {
              if ((v351 & v357 & 0x40000000000) != 0 && *((_QWORD *)this + 479))
              {
                if (v350 - 65 <= 0xFFFFFFBF)
                {
                  if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
                  {
                    LODWORD(v547.mSampleTime) = 136315394;
                    *(_QWORD *)((char *)&v547.mSampleTime + 4) = "vpProcessDownlink_v8.cpp";
                    WORD2(v547.mHostTime) = 1024;
                    *(_DWORD *)((char *)&v547.mHostTime + 6) = 891;
                    _os_log_impl(&dword_1B5ED0000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  STACK_ABL: invalid number of buffers", (uint8_t *)&v547, 0x12u);
                  }
                  v508 = __cxa_allocate_exception(0x10uLL);
                  *(_QWORD *)v508 = &off_1E69EE218;
                  v508[2] = -50;
                }
                MEMORY[0x1E0C80A78](v349);
                v359 = (UInt32 *)((char *)&v512 - v358);
                bzero((char *)&v512 - v358, v360);
                v361 = 0;
                *v359 = v350;
                v362 = *((_QWORD *)this + 25);
                v363 = 16 * v350;
                do
                {
                  v364 = memcpy(*(void **)(v362 + v361 + 16), a5->mBuffers[v361 / 0x10].mData, *(unsigned int *)(v362 + v361 + 12));
                  v362 = *((_QWORD *)this + 25);
                  *(_OWORD *)&v359[v361 / 4 + 2] = *(_OWORD *)(v362 + v361 + 8);
                  v361 += 16;
                }
                while (v363 != v361);
                *(_QWORD *)&v546.mSampleTime = v359;
                v365 = *((unsigned int *)this + 1073);
                if ((v365 - 65) < 0xFFFFFFC0)
                {
                  if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
                  {
                    LODWORD(v547.mSampleTime) = 136315394;
                    *(_QWORD *)((char *)&v547.mSampleTime + 4) = "vpProcessDownlink_v8.cpp";
                    WORD2(v547.mHostTime) = 1024;
                    *(_DWORD *)((char *)&v547.mHostTime + 6) = 906;
                    _os_log_impl(&dword_1B5ED0000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  STACK_ABL: invalid number of buffers", (uint8_t *)&v547, 0x12u);
                  }
                  v509 = __cxa_allocate_exception(0x10uLL);
                  *(_QWORD *)v509 = &off_1E69EE218;
                  v509[2] = -50;
                }
                MEMORY[0x1E0C80A78](v364);
                v367 = (AudioBufferList *)((char *)&v512 - v366);
                bzero((char *)&v512 - v366, v368);
                v369 = 0;
                v367->mNumberBuffers = v365;
                v370 = a5 + 1;
                do
                {
                  v371 = *(AudioBuffer *)&v370->mNumberBuffers;
                  v370 = (AudioBufferList *)((char *)v370 + 32);
                  v367->mBuffers[v369++] = v371;
                }
                while (v365 != v369);
                *(_QWORD *)&v549.mNumberBuffers = v367;
                if (*((_BYTE *)this + 2245))
                {
                  v372 = *((_DWORD *)this + 576);
                  if (v372 != *((_DWORD *)this + 578))
                    AudioUnitSetParameter(*((AudioUnit *)this + 479), 0, 0, 0, (float)v372, 0);
                }
                v547 = v544;
                v548.mNumberBuffers = 512;
                AudioUnitProcessMultiple(*((AudioUnit *)this + 479), &v548.mNumberBuffers, &v547, *((_DWORD *)this + 121), 1u, (const AudioBufferList **)&v546, 1u, (AudioBufferList **)&v549);
                if (v12[3409] || v12[3410])
                  VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)this, 0x7Eu, v524, v367, &v547);
                v373 = &a5->mBuffers[0].mData;
                do
                {
                  memcpy(*v373, v373[2], *((unsigned int *)v373 - 1));
                  v373 += 4;
                  --v365;
                }
                while (v365);
              }
              else if (!*((_BYTE *)this + 2244) && a5->mNumberBuffers >= 2)
              {
                v395 = (void **)a5[1].mBuffers;
                v396 = 1;
                do
                {
                  memcpy(*v395, a5->mBuffers[0].mData, *((unsigned int *)v395 - 1));
                  ++v396;
                  v395 += 2;
                }
                while (v396 < a5->mNumberBuffers);
              }
              v547 = v544;
              LODWORD(v546.mSampleTime) = 512;
              v349 = AudioUnitProcess(*((AudioUnit *)this + 478), (AudioUnitRenderActionFlags *)&v546, &v547, *((_DWORD *)this + 121), a5);
            }
            else if ((v351 & 0x2000000000000000) != 0 && (*((_BYTE *)this + 8847) & 0x20) != 0)
            {
              v380 = a5->mNumberBuffers;
              if (a5->mNumberBuffers >= 2)
              {
                if (*((_DWORD *)this + 79) == 1)
                {
                  v349 = (uint64_t)memcpy(*(void **)&a5[1].mBuffers[0].mNumberChannels, a5->mBuffers[0].mData, a5->mBuffers[0].mDataByteSize);
                  v380 = a5->mNumberBuffers;
                }
                if (v380 >= 3)
                {
                  v381 = (void **)&a5[2];
                  v382 = 2;
                  do
                  {
                    bzero(*v381, *((unsigned int *)v381 - 1));
                    ++v382;
                    v381 += 2;
                  }
                  while (v382 < a5->mNumberBuffers);
                }
              }
            }
            else if (!*((_BYTE *)this + 2244))
            {
              v374 = *((_DWORD *)this + 79);
              v375 = v374 <= 1 ? 1 : v374;
              if (v375 < a5->mNumberBuffers)
              {
                v376 = (char *)a5 + 16 * (v375 - 1);
                v377 = (const void **)(v376 + 16);
                v378 = (unsigned int *)(v376 + 12);
                v379 = 16 * v375 + 16;
                do
                {
                  v349 = (uint64_t)memcpy(*(void **)((char *)&a5->mNumberBuffers + v379), *v377, *v378);
                  ++v375;
                  v379 += 16;
                }
                while (v375 < a5->mNumberBuffers);
              }
            }
            v397 = *((_QWORD *)this + 1104);
            if ((v397 & 0x80000000000) == 0 || (*((_BYTE *)this + 8845) & 8) == 0 || !*((_QWORD *)this + 480))
            {
LABEL_730:
              if ((v397 & 0x100000000000) != 0 && (*((_BYTE *)this + 8845) & 0x10) != 0)
              {
                v349 = *((_QWORD *)this + 481);
                if (v349)
                {
                  v414 = *(_OWORD *)&v515->mRateScalar;
                  *(_OWORD *)&v547.mSampleTime = *(_OWORD *)&v515->mSampleTime;
                  *(_OWORD *)&v547.mRateScalar = v414;
                  v415 = *(_OWORD *)&v515->mSMPTETime.mHours;
                  *(_OWORD *)&v547.mSMPTETime.mSubframes = *(_OWORD *)&v515->mSMPTETime.mSubframes;
                  *(_OWORD *)&v547.mSMPTETime.mHours = v415;
                  LODWORD(v546.mSampleTime) = 512;
                  v349 = AudioUnitProcess((AudioUnit)v349, (AudioUnitRenderActionFlags *)&v546, &v547, *((_DWORD *)this + 121), a5);
                  v397 = *((_QWORD *)this + 1104);
                }
              }
              if ((v397 & 0x200000000000) != 0 && (*((_BYTE *)this + 8845) & 0x20) != 0)
              {
                v349 = *((_QWORD *)this + 482);
                if (v349)
                {
                  *(_QWORD *)&v546.mSampleTime = a5;
                  *(_QWORD *)&v549.mNumberBuffers = a5;
                  v416 = *(_OWORD *)&v515->mRateScalar;
                  *(_OWORD *)&v547.mSampleTime = *(_OWORD *)&v515->mSampleTime;
                  *(_OWORD *)&v547.mRateScalar = v416;
                  v417 = *(_OWORD *)&v515->mSMPTETime.mHours;
                  *(_OWORD *)&v547.mSMPTETime.mSubframes = *(_OWORD *)&v515->mSMPTETime.mSubframes;
                  *(_OWORD *)&v547.mSMPTETime.mHours = v417;
                  v548.mNumberBuffers = 512;
                  v349 = AudioUnitProcessMultiple((AudioUnit)v349, &v548.mNumberBuffers, &v547, *((_DWORD *)this + 121), 1u, (const AudioBufferList **)&v546, 1u, (AudioBufferList **)&v549);
                  v397 = *((_QWORD *)this + 1104);
                }
              }
              if ((v397 & 0x100000000000000) == 0
                || (v418 = *((_QWORD *)this + 1105), (v418 & 0x100000000000000) == 0)
                || !*((_QWORD *)this + 493))
              {
                if ((v397 & 0x200000000000000) == 0
                  || (v418 = *((_QWORD *)this + 1105), (v418 & 0x200000000000000) == 0)
                  || !*((_QWORD *)this + 494))
                {
                  if ((v397 & 0x400000000000000) == 0
                    || (v418 = *((_QWORD *)this + 1105), (v418 & 0x400000000000000) == 0)
                    || !*((_QWORD *)this + 495))
                  {
                    v435 = 0;
LABEL_775:
                    if ((v397 & 0x40000000000000) != 0 && (*((_BYTE *)this + 8846) & 0x40) != 0)
                    {
                      v349 = *((_QWORD *)this + 491);
                      if (v349)
                      {
                        v547 = v544;
                        LODWORD(v546.mSampleTime) = 512;
                        v349 = AudioUnitProcess((AudioUnit)v349, (AudioUnitRenderActionFlags *)&v546, &v547, *((_DWORD *)this + 121), a5);
                        v397 = *((_QWORD *)this + 1104);
                      }
                    }
                    if ((v397 & 0x800000000000000) != 0
                      && ((*((_BYTE *)this + 8847) & 8) != 0 || *((_BYTE *)this + 472)))
                    {
                      LODWORD(v547.mSampleTime) = 1065353216;
                      LODWORD(v546.mSampleTime) = 1065353216;
                      if ((*((_BYTE *)this + 2083) || *((_BYTE *)this + 472))
                        && (v436 = *((float *)this + 1131), v436 != 0.0))
                      {
                        v437 = __exp10f(v436 / 20.0);
                        *(float *)&v546.mSampleTime = v437;
                        *(float *)&v547.mSampleTime = v437;
                      }
                      else
                      {
                        v438 = *((float *)this + 1129);
                        if (v438 >= -300.0)
                        {
                          if (v438 == 0.0)
                          {
                            v437 = 1.0;
                          }
                          else
                          {
                            v439 = v438 / 20.0;
                            v440 = v438 <= 60.0;
                            v441 = 3.0;
                            if (v440)
                              v441 = v439;
                            v437 = __exp10f(v441);
                            *(float *)&v547.mSampleTime = v437;
                          }
                        }
                        else
                        {
                          LODWORD(v547.mSampleTime) = 0;
                          v437 = 0.0;
                        }
                        v442 = *((float *)this + 1130);
                        if (v442 >= -300.0)
                        {
                          if (v442 != 0.0)
                          {
                            v443 = v442 / 20.0;
                            if (v442 > 60.0)
                              v443 = 3.0;
                            LODWORD(v546.mSampleTime) = __exp10f(v443);
                            v437 = *(float *)&v547.mSampleTime;
                          }
                        }
                        else
                        {
                          LODWORD(v546.mSampleTime) = 0;
                        }
                      }
                      if (v437 == 0.0)
                      {
                        bzero(a5->mBuffers[0].mData, 4 * *((unsigned int *)this + 121));
                        v31 = v513;
                        v12 = v530;
                      }
                      else
                      {
                        v31 = v513;
                        v12 = v530;
                        if (v437 != 1.0)
                          vDSP_vsmul((const float *)a5->mBuffers[0].mData, 1, (const float *)&v547, (float *)a5->mBuffers[0].mData, 1, *((unsigned int *)this + 121));
                      }
                      if (a5->mNumberBuffers >= 2)
                      {
                        v444 = 1;
                        v445 = 32;
                        do
                        {
                          if (*(float *)&v546.mSampleTime == 0.0)
                          {
                            bzero(*(void **)((char *)&a5->mNumberBuffers + v445), 4 * *((unsigned int *)this + 121));
                          }
                          else if (*(float *)&v546.mSampleTime != 1.0)
                          {
                            vDSP_vsmul(*(const float **)((char *)&a5->mNumberBuffers + v445), 1, (const float *)&v546, *(float **)((char *)&a5->mNumberBuffers + v445), 1, *((unsigned int *)this + 121));
                          }
                          ++v444;
                          v445 += 16;
                        }
                        while (v444 < a5->mNumberBuffers);
                      }
                      v397 = *((_QWORD *)this + 1104);
                    }
                    if ((v397 & 0x100000000000000) != 0 && (*((_BYTE *)this + 8847) & 1) != 0)
                    {
                      v349 = *((_QWORD *)this + 493);
                      if (v349)
                      {
                        if (*((_DWORD *)this + 1128) == 1 && (v446 = (_DWORD *)*((_QWORD *)this + 197)) != 0)
                        {
                          ABLRingBuffer<float>::ReadFrom((_DWORD *)this + 384, *((_DWORD *)this + 121), v446);
                          v349 = *((_QWORD *)this + 493);
                          v447 = 2;
                        }
                        else
                        {
                          v447 = 1;
                        }
                        v448 = *((_QWORD *)this + 197);
                        *(_QWORD *)&v546.mSampleTime = a5;
                        v546.mHostTime = v448;
                        *(_QWORD *)&v549.mNumberBuffers = a5;
                        v547 = v544;
                        v548.mNumberBuffers = 512;
                        v349 = AudioUnitProcessMultiple((AudioUnit)v349, &v548.mNumberBuffers, &v547, *((_DWORD *)this + 121), v447, (const AudioBufferList **)&v546, 1u, (AudioBufferList **)&v549);
                        if (v12[3409] || v12[3410])
                          v349 = VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)this, 0x41u, v524, a5, &v547);
                        v397 = *((_QWORD *)this + 1104);
                      }
                    }
                    if ((v397 & 0x200000000000000) != 0 && (*((_BYTE *)this + 8847) & 2) != 0)
                    {
                      v449 = (OpaqueAudioComponentInstance *)*((_QWORD *)this + 494);
                      if (v449)
                      {
                        v450 = *((unsigned int *)this + 1073);
                        if ((v450 - 65) <= 0xFFFFFFBF)
                        {
                          if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
                          {
                            LODWORD(v547.mSampleTime) = 136315394;
                            *(_QWORD *)((char *)&v547.mSampleTime + 4) = "vpProcessDownlink_v8.cpp";
                            WORD2(v547.mHostTime) = 1024;
                            *(_DWORD *)((char *)&v547.mHostTime + 6) = 1188;
                            _os_log_impl(&dword_1B5ED0000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  STACK_ABL: invalid number of buffers", (uint8_t *)&v547, 0x12u);
                          }
                          v504 = __cxa_allocate_exception(0x10uLL);
                          *(_QWORD *)v504 = &off_1E69EE218;
                          v504[2] = -50;
                        }
                        MEMORY[0x1E0C80A78](v349);
                        v452 = (AudioBufferList *)((char *)&v512 - v451);
                        bzero((char *)&v512 - v451, v453);
                        v454 = 0;
                        v452->mNumberBuffers = v450;
                        v455 = a5->mBuffers;
                        do
                        {
                          v456 = *v455;
                          v455 += 2;
                          v452->mBuffers[v454++] = v456;
                        }
                        while (v450 != v454);
                        v457 = *((_QWORD *)this + 197);
                        *(_QWORD *)&v546.mSampleTime = v452;
                        v546.mHostTime = v457;
                        *(_QWORD *)&v549.mNumberBuffers = v452;
                        v547 = v544;
                        v548.mNumberBuffers = 512;
                        v349 = AudioUnitProcessMultiple(v449, &v548.mNumberBuffers, &v547, *((_DWORD *)this + 121), 1u, (const AudioBufferList **)&v546, 1u, (AudioBufferList **)&v549);
                        if (v12[3409] || v12[3410])
                          v349 = VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)this, 0x42u, v524, v452, &v547);
                        v397 = *((_QWORD *)this + 1104);
                      }
                    }
                    if ((v397 & 0x400000000000000) != 0
                      && (*((_BYTE *)this + 8847) & 4) != 0
                      && *((_QWORD *)this + 495))
                    {
                      if (*((_DWORD *)this + 1128) == 1 && (v458 = (_DWORD *)*((_QWORD *)this + 197)) != 0)
                      {
                        v349 = (uint64_t)ABLRingBuffer<float>::ReadFrom((_DWORD *)this + 384, *((_DWORD *)this + 121), v458);
                        v459 = 2;
                      }
                      else
                      {
                        v459 = 1;
                      }
                      v460 = *((unsigned int *)this + 1073);
                      if ((v460 - 65) <= 0xFFFFFFBF)
                      {
                        if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
                        {
                          LODWORD(v547.mSampleTime) = 136315394;
                          *(_QWORD *)((char *)&v547.mSampleTime + 4) = "vpProcessDownlink_v8.cpp";
                          WORD2(v547.mHostTime) = 1024;
                          *(_DWORD *)((char *)&v547.mHostTime + 6) = 1213;
                          _os_log_impl(&dword_1B5ED0000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  STACK_ABL: invalid number of buffers", (uint8_t *)&v547, 0x12u);
                        }
                        v505 = __cxa_allocate_exception(0x10uLL);
                        *(_QWORD *)v505 = &off_1E69EE218;
                        v505[2] = -50;
                      }
                      MEMORY[0x1E0C80A78](v349);
                      v462 = (AudioBufferList *)((char *)&v512 - v461);
                      bzero((char *)&v512 - v461, v463);
                      v464 = 0;
                      v462->mNumberBuffers = v460;
                      v465 = a5 + 1;
                      do
                      {
                        v466 = *(AudioBuffer *)&v465->mNumberBuffers;
                        v465 = (AudioBufferList *)((char *)v465 + 32);
                        v462->mBuffers[v464++] = v466;
                      }
                      while (v460 != v464);
                      v467 = *((_QWORD *)this + 197);
                      *(_QWORD *)&v546.mSampleTime = v462;
                      v546.mHostTime = v467;
                      *(_QWORD *)&v549.mNumberBuffers = v462;
                      v547 = v544;
                      v548.mNumberBuffers = 512;
                      AudioUnitProcessMultiple(*((AudioUnit *)this + 495), &v548.mNumberBuffers, &v547, *((_DWORD *)this + 121), v459, (const AudioBufferList **)&v546, 1u, (AudioBufferList **)&v549);
                      if (v12[3409] || v12[3410])
                        VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)this, 0x43u, v524, v462, &v547);
                      v397 = *((_QWORD *)this + 1104);
                    }
                    if ((v397 & 0x400000000000) != 0 && (*((_BYTE *)this + 8845) & 0x40) != 0)
                    {
                      v468 = (OpaqueAudioComponentInstance *)*((_QWORD *)this + 483);
                      if (v468)
                      {
                        v547 = v544;
                        LODWORD(v546.mSampleTime) = 512;
                        AudioUnitProcess(v468, (AudioUnitRenderActionFlags *)&v546, &v547, *((_DWORD *)this + 121), a5);
                        v397 = *((_QWORD *)this + 1104);
                      }
                    }
                    if ((v397 & 0x800000000000) != 0)
                      v469 = v435;
                    else
                      v469 = 1;
                    if ((v469 & 1) != 0)
                    {
                      v470 = (_BYTE *)(&xmmword_1EF135FF8 + 8);
                    }
                    else
                    {
                      v470 = (char *)&xmmword_1EF135FF8 + 8;
                      if ((*((_BYTE *)this + 8845) & 0x80) != 0)
                      {
                        v471 = (OpaqueAudioComponentInstance *)*((_QWORD *)this + 484);
                        if (v471)
                        {
                          v547 = v544;
                          LODWORD(v546.mSampleTime) = 512;
                          AudioUnitProcess(v471, (AudioUnitRenderActionFlags *)&v546, &v547, *((_DWORD *)this + 121), a5);
                          if (v12[3409] || v12[3410])
                            VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)this, 0x39u, *((unsigned int *)this + 121), a5, &v547);
                          v397 = *((_QWORD *)this + 1104);
                        }
                      }
                    }
                    if ((v397 & 0x4000000000000) != 0 && (*((_BYTE *)this + 8846) & 4) != 0)
                    {
                      v472 = (OpaqueAudioComponentInstance *)*((_QWORD *)this + 487);
                      if (v472)
                      {
                        v547 = v544;
                        LODWORD(v546.mSampleTime) = 512;
                        AudioUnitProcess(v472, (AudioUnitRenderActionFlags *)&v546, &v547, *((_DWORD *)this + 121), a5);
                        if (v12[3409] || v12[3410])
                          VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)this, 0x75u, *((unsigned int *)this + 121), a5, &v547);
                        v397 = *((_QWORD *)this + 1104);
                      }
                    }
                    if ((v397 & 0x8000000000000) != 0 && (*((_BYTE *)this + 8846) & 8) != 0)
                    {
                      v473 = (OpaqueAudioComponentInstance *)*((_QWORD *)this + 488);
                      if (v473)
                      {
                        v474 = *((_DWORD *)this + 18);
                        if (v474 <= 0x34 && ((0x1FFFE33F3FFEF0uLL >> v474) & 1) != 0)
                        {
                          v547 = v544;
                          LODWORD(v546.mSampleTime) = 512;
                          AudioUnitProcess(v473, (AudioUnitRenderActionFlags *)&v546, &v547, *((_DWORD *)this + 121), a5);
                          if (v12[3409] || v12[3410])
                            VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)this, 0x73u, *((unsigned int *)this + 121), a5, &v547);
                        }
                      }
                    }
                    if (v12[3409] && (VoiceProcessorV2::InjectionFilesReadSignal(this, 2, v524, a5), v12[3409])
                      || v12[3410])
                    {
                      VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)this, 0x44u, v524, a5, &v544);
                    }
                    v475 = *((_QWORD *)this + 1995);
                    if (AudioIssueDetectorLibraryLoader(void)::once != -1)
                      dispatch_once(&AudioIssueDetectorLibraryLoader(void)::once, &__block_literal_global_13262);
                    if (*((_QWORD *)v470 + 499))
                      (*((void (**)(uint64_t, uint64_t, _QWORD, AudioBufferList *, uint64_t, AudioTimeStamp *))v470
                       + 499))(v475, 68, 0, a5, v524, &v544);
                    if (*((_DWORD *)this + 1127) == 1 && !v12[3688])
                      VoiceProcessorV2::AppendReferenceSignal(this, a5, (AudioBufferList *)&v544, 0);
                    if (v12[3409])
                      VoiceProcessorV2::LoopBackRead(this, v524, a5);
                    goto LABEL_890;
                  }
                }
              }
              if ((v397 & v418 & 0x800000000000) != 0)
              {
                v349 = *((_QWORD *)this + 484);
                if (v349)
                {
                  v547 = v544;
                  LODWORD(v546.mSampleTime) = 512;
                  v349 = AudioUnitProcess((AudioUnit)v349, (AudioUnitRenderActionFlags *)&v546, &v547, *((_DWORD *)this + 121), a5);
                  if (v12[3409] || v12[3410])
                    v349 = VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)this, 0x39u, *((unsigned int *)this + 121), a5, &v547);
                  v397 = *((_QWORD *)this + 1104);
                }
              }
              if ((v397 & 0x1000000000000) != 0 && (*((_BYTE *)this + 8846) & 1) != 0)
              {
                v419 = (OpaqueAudioComponentInstance *)*((_QWORD *)this + 485);
                if (v419)
                {
                  v420 = *((unsigned int *)this + 1073);
                  if ((v420 - 65) <= 0xFFFFFFBF)
                  {
                    if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
                      goto LABEL_972;
                    LODWORD(v547.mSampleTime) = 136315394;
                    *(_QWORD *)((char *)&v547.mSampleTime + 4) = "vpProcessDownlink_v8.cpp";
                    WORD2(v547.mHostTime) = 1024;
                    *(_DWORD *)((char *)&v547.mHostTime + 6) = 1085;
                    v506 = MEMORY[0x1E0C81028];
                    goto LABEL_971;
                  }
                  MEMORY[0x1E0C80A78](v349);
                  v422 = (AudioBufferList *)((char *)&v512 - v421);
                  bzero((char *)&v512 - v421, v423);
                  v424 = 0;
                  v422->mNumberBuffers = v420;
                  v425 = a5->mBuffers;
                  do
                  {
                    v426 = *v425;
                    v425 += 2;
                    v422->mBuffers[v424++] = v426;
                  }
                  while (v420 != v424);
                  v547 = v544;
                  LODWORD(v546.mSampleTime) = 512;
                  v349 = AudioUnitProcess(v419, (AudioUnitRenderActionFlags *)&v546, &v547, *((_DWORD *)this + 121), v422);
                  if (v12[3409] || v12[3410])
                    v349 = VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)this, 0x3Au, *((unsigned int *)this + 121), v422, &v547);
                  v397 = *((_QWORD *)this + 1104);
                }
              }
              if ((v397 & 0x2000000000000) == 0
                || (*((_BYTE *)this + 8846) & 2) == 0
                || (v427 = (OpaqueAudioComponentInstance *)*((_QWORD *)this + 486)) == 0)
              {
LABEL_773:
                v435 = 1;
                goto LABEL_775;
              }
              v428 = *((unsigned int *)this + 1073);
              if ((v428 - 65) > 0xFFFFFFBF)
              {
                MEMORY[0x1E0C80A78](v349);
                v430 = (AudioBufferList *)((char *)&v512 - v429);
                bzero((char *)&v512 - v429, v431);
                v432 = 0;
                v430->mNumberBuffers = v428;
                v433 = a5 + 1;
                do
                {
                  v434 = *(AudioBuffer *)&v433->mNumberBuffers;
                  v433 = (AudioBufferList *)((char *)v433 + 32);
                  v430->mBuffers[v432++] = v434;
                }
                while (v428 != v432);
                v547 = v544;
                LODWORD(v546.mSampleTime) = 512;
                v349 = AudioUnitProcess(v427, (AudioUnitRenderActionFlags *)&v546, &v547, *((_DWORD *)this + 121), v430);
                if (v12[3409] || v12[3410])
                  v349 = VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)this, 0x3Bu, *((unsigned int *)this + 121), v430, &v547);
                v397 = *((_QWORD *)this + 1104);
                goto LABEL_773;
              }
              if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
              {
LABEL_972:
                v507 = __cxa_allocate_exception(0x10uLL);
                *(_QWORD *)v507 = &off_1E69EE218;
                v507[2] = -50;
              }
              LODWORD(v547.mSampleTime) = 136315394;
              *(_QWORD *)((char *)&v547.mSampleTime + 4) = "vpProcessDownlink_v8.cpp";
              WORD2(v547.mHostTime) = 1024;
              *(_DWORD *)((char *)&v547.mHostTime + 6) = 1099;
              v506 = MEMORY[0x1E0C81028];
LABEL_971:
              _os_log_impl(&dword_1B5ED0000, v506, OS_LOG_TYPE_ERROR, "%25s:%-5d  STACK_ABL: invalid number of buffers", (uint8_t *)&v547, 0x12u);
              goto LABEL_972;
            }
            v398 = *((_QWORD *)this + 2128);
            v399 = *(float **)(v398 + 16);
            v548.mNumberBuffers = *((_DWORD *)this + 127);
            v400 = (CA::AudioSampleRateConverter **)*((_QWORD *)this + 49);
            if (v400)
            {
              v548.mNumberBuffers = CA::AudioSampleRateConverter::GetExpectedNumberOfOutputFrames(*v400);
              v398 = *((_QWORD *)this + 1988);
              v401 = v514;
              if (v548.mNumberBuffers <= *(_DWORD *)(v398 + 12) >> 2)
              {
                VoiceProcessor::SampleRateConverter::Convert(*((CA::AudioSampleRateConverter ***)this + 49), (unsigned int *)this + 127, &v548.mNumberBuffers, *((const AudioBufferList **)this + 2128), (const AudioBufferList *)v398);
                v398 = *((_QWORD *)this + 1988);
              }
              else
              {
                *v514 = 0;
              }
              v399 = *(float **)(v398 + 16);
            }
            else
            {
              v401 = v514;
            }
            v402 = (unint64_t)*(unsigned int *)(v398 + 12) >> 2;
            if (*v401)
            {
              v403 = 0.0;
              if (v402 > v548.mNumberBuffers)
                vDSP_vclr(&v399[v548.mNumberBuffers], 1, (v402 - v548.mNumberBuffers));
            }
            else
            {
              v403 = 1.0;
              vDSP_vclr(v399, 1, v402);
            }
            AudioUnitSetParameter(*((AudioUnit *)this + 480), 0x15u, 0, 0, v403, 0);
            if ((*((_BYTE *)this + 4662) & 0x80) != 0 && (*((_BYTE *)this + 4678) & 0x80) != 0)
            {
              v404 = (OpaqueAudioComponentInstance *)*((_QWORD *)this + 402);
              if (v404)
              {
                LODWORD(v547.mSampleTime) = 0;
                AudioUnitGetParameter(v404, 9u, 0, 0, (AudioUnitParameterValue *)&v547);
                AudioUnitSetParameter(*((AudioUnit *)this + 480), 0x17u, 0, 0, *(AudioUnitParameterValue *)&v547.mSampleTime, 0);
              }
            }
            v405 = (OpaqueAudioComponentInstance *)*((_QWORD *)this + 480);
            v406 = atomic_load(VoiceProcessorV4::mIsOnEar);
            AudioUnitSetParameter(v405, 0x16u, 0, 0, (float)v406, 0);
            v407 = *((_QWORD *)this + 49);
            v408 = 17024;
            if (v407)
              v408 = 15904;
            v409 = *(_QWORD *)((char *)this + v408);
            *(_QWORD *)&v546.mSampleTime = a5;
            v546.mHostTime = v409;
            v547 = v544;
            v540.mNumberBuffers = 512;
            *(_QWORD *)&v549.mNumberBuffers = a5;
            v410 = *((unsigned int *)this + 129);
            if (v12[3409] || v12[3410])
            {
              VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)this, 0x6Fu, v410, a5, &v547);
              v410 = *((unsigned int *)this + 129);
              v411 = 15904;
              if (!*((_QWORD *)this + 49))
                v411 = 17024;
              v412 = *(const AudioBufferList **)((char *)this + v411);
              if (v12[3409])
              {
LABEL_725:
                VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)this, 0x70u, v410, v412, &v547);
LABEL_726:
                AudioUnitProcessMultiple(*((AudioUnit *)this + 480), &v540.mNumberBuffers, &v547, *((_DWORD *)this + 121), 2u, (const AudioBufferList **)&v546, 1u, (AudioBufferList **)&v549);
                if (v12[3409] || v12[3410])
                  VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)this, 0x71u, *((unsigned int *)this + 129), a5, &v547);
                v349 = AudioUnitSetParameter(*((AudioUnit *)this + 480), 0x15u, 0, 0, 0.0, 0);
                v397 = *((_QWORD *)this + 1104);
                goto LABEL_730;
              }
            }
            else
            {
              if (v407)
                v413 = (const AudioBufferList **)((char *)this + 15904);
              else
                v413 = (const AudioBufferList **)((char *)this + 17024);
              v412 = *v413;
            }
            if (!v12[3410])
              goto LABEL_726;
            goto LABEL_725;
          }
          NumberOfSourceFrames = *((_DWORD *)this + 121);
          goto LABEL_237;
        }
        if (VPLogScope(void)::once != -1)
          dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
        v73 = (_QWORD *)VPLogScope(void)::scope;
        if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(1, VPLogScope(void)::scope, 0))
        {
          v74 = (*v73 ? *v73 : MEMORY[0x1E0C81028]);
          if (os_log_type_enabled(v74, OS_LOG_TYPE_ERROR))
          {
            mDataByteSize = a5->mBuffers[0].mDataByteSize;
            v76 = *((_DWORD *)this + 88) * v524;
            LODWORD(buf.mSampleTime) = 136315906;
            *(_QWORD *)((char *)&buf.mSampleTime + 4) = "vpProcessDownlink_v8.cpp";
            WORD2(buf.mHostTime) = 1024;
            *(_DWORD *)((char *)&buf.mHostTime + 6) = 183;
            WORD1(buf.mRateScalar) = 1024;
            HIDWORD(buf.mRateScalar) = mDataByteSize;
            LOWORD(buf.mWordClockTime) = 1024;
            *(_DWORD *)((char *)&buf.mWordClockTime + 2) = v76;
            _os_log_impl(&dword_1B5ED0000, v74, OS_LOG_TYPE_ERROR, "%25s:%-5d  >vp> processdownlinkaudio: SERIOUS ERROR: ioOutputData->mBuffers[0].mDataByteSize = %u, expected = %u", (uint8_t *)&buf, 0x1Eu);
          }
        }
        v77 = (int *)*((_QWORD *)this + 1570);
        v78 = v12[3409];
        if (v77)
        {
          if (!v12[3409] && !v12[3410])
            goto LABEL_159;
          if (VPLogScope(void)::once != -1)
            dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
          CALegacyLog::log(v77, 1, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v8/vpProcessDownlink_v8.cpp", 183, "ProcessDownlinkAudio", "processdownlinkaudio: SERIOUS ERROR: ioOutputData->mBuffers[0].mDataByteSize = %u, expected = %u", a5->mBuffers[0].mDataByteSize, *((_DWORD *)this + 88) * v524);
          v78 = v12[3409];
        }
        if (v78)
        {
          VoiceProcessorV2::InjectionFilesReadSignal(this, 2, v524, a5);
          if (v12[3409])
          {
LABEL_160:
            VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)this, 0x44u, v524, a5, &v544);
LABEL_161:
            v79 = *((_QWORD *)this + 1995);
            if (AudioIssueDetectorLibraryLoader(void)::once != -1)
              dispatch_once(&AudioIssueDetectorLibraryLoader(void)::once, &__block_literal_global_13262);
            if (!AudioIssueDetectorLibraryLoader(void)::libSym)
              goto LABEL_890;
            goto LABEL_206;
          }
        }
LABEL_159:
        if (!v12[3410])
          goto LABEL_161;
        goto LABEL_160;
      }
      if (v12[3331])
      {
        v59 = (double)(mach_absolute_time() - *((_QWORD *)this + 1980)) * 0.0000000416666667;
        v60 = *((double *)this + 1983);
        if (v59 > v60)
        {
          *((double *)this + 1983) = v60 + 10.0;
          VoiceProcessorV2::LogIOError((uint64_t)this, 23.002, (float)*((unsigned int *)this + 3114), (float)*((unsigned int *)this + 121), (float)v524, "processdownlinkaudio: <block size mismatch>");
          if (VPLogScope(void)::once != -1)
            dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
          v61 = (_QWORD *)VPLogScope(void)::scope;
          if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(1, VPLogScope(void)::scope, 0))
          {
            v62 = (*v61 ? *v61 : MEMORY[0x1E0C81028]);
            if (os_log_type_enabled(v62, OS_LOG_TYPE_ERROR))
            {
              LODWORD(buf.mSampleTime) = 136315650;
              *(_QWORD *)((char *)&buf.mSampleTime + 4) = "vpProcessDownlink_v8.cpp";
              WORD2(buf.mHostTime) = 1024;
              *(_DWORD *)((char *)&buf.mHostTime + 6) = 167;
              WORD1(buf.mRateScalar) = 2048;
              *(double *)((char *)&buf.mRateScalar + 4) = v59;
              _os_log_impl(&dword_1B5ED0000, v62, OS_LOG_TYPE_ERROR, "%25s:%-5d  >vp> CoreAudio: ***** VP BLOCK SERIOUS ERROR: PROCESSDLAUDIO BAD BLOCK CONFIG for over %.6f seconds *****\n", (uint8_t *)&buf, 0x1Cu);
            }
          }
          v63 = (int *)*((_QWORD *)this + 1570);
          if (v63 && (v12[3409] || v12[3410]))
          {
            if (VPLogScope(void)::once != -1)
              dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
            CALegacyLog::log(v63, 1, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v8/vpProcessDownlink_v8.cpp", 167, "ProcessDownlinkAudio", "CoreAudio: ***** VP BLOCK SERIOUS ERROR: PROCESSDLAUDIO BAD BLOCK CONFIG for over %.6f seconds *****\n", v59);
          }
          if (VPLogScope(void)::once != -1)
            dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
          v64 = (_QWORD *)VPLogScope(void)::scope;
          if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(1, VPLogScope(void)::scope, 0))
          {
            v65 = (*v64 ? *v64 : MEMORY[0x1E0C81028]);
            if (os_log_type_enabled(v65, OS_LOG_TYPE_ERROR))
            {
              v513 = (char *)this + 2488;
              v66 = a5->mBuffers[0].mDataByteSize;
              v67 = *((_DWORD *)this + 121);
              CAFormatter::CAFormatter((CAFormatter *)&v550, v35);
              v68 = *((_DWORD *)this + 3114);
              LODWORD(buf.mSampleTime) = 136316674;
              *(_QWORD *)((char *)&buf.mSampleTime + 4) = "vpProcessDownlink_v8.cpp";
              WORD2(buf.mHostTime) = 1024;
              *(_DWORD *)((char *)&buf.mHostTime + 6) = 171;
              WORD1(buf.mRateScalar) = 1024;
              HIDWORD(buf.mRateScalar) = v524;
              LOWORD(buf.mWordClockTime) = 1024;
              *(_DWORD *)((char *)&buf.mWordClockTime + 2) = v66;
              HIWORD(buf.mWordClockTime) = 1024;
              *(_DWORD *)&buf.mSMPTETime.mSubframes = v67;
              LOWORD(buf.mSMPTETime.mCounter) = 2080;
              *(Float64 *)((char *)&buf.mSMPTETime.mCounter + 2) = v550.mSampleTime;
              HIWORD(buf.mSMPTETime.mFlags) = 1024;
              *(_DWORD *)&buf.mSMPTETime.mHours = v68;
              _os_log_impl(&dword_1B5ED0000, v65, OS_LOG_TYPE_ERROR, "%25s:%-5d  >vp> processdownlinkaudio: <block size mismatch btwn expected and actual> num frames received  = %u (data byte size = %u).\tdl mix blk size = %u\n\tdl mix asbd = %s\n\t process dl callcount = %u\n", (uint8_t *)&buf, 0x34u);
              if (*(_QWORD *)&v550.mSampleTime)
                free(*(void **)&v550.mSampleTime);
              v31 = v513;
              v12 = v530;
            }
          }
          v69 = (int *)*((_QWORD *)this + 1570);
          if (v69)
          {
            if (v12[3409] || v12[3410])
            {
              if (VPLogScope(void)::once != -1)
                dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
              v70 = VPLogScope(void)::scope;
              v71 = a5->mBuffers[0].mDataByteSize;
              v72 = *((_DWORD *)this + 121);
              CAFormatter::CAFormatter((CAFormatter *)&buf, v35);
              CALegacyLog::log(v69, 1, v70, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v8/vpProcessDownlink_v8.cpp", 171, "ProcessDownlinkAudio", "processdownlinkaudio: <block size mismatch btwn expected and actual> num frames received  = %u (data byte size = %u).\tdl mix blk size = %u\n\tdl mix asbd = %s\n\t process dl callcount = %u\n", v524, v71, v72, *(const char **)&buf.mSampleTime, *((_DWORD *)this + 3114));
LABEL_197:
              v12 = v530;
              if (*(_QWORD *)&buf.mSampleTime)
                free(*(void **)&buf.mSampleTime);
            }
          }
        }
      }
      else
      {
        v12[3331] = 1;
        *((_QWORD *)this + 1980) = mach_absolute_time();
        *((_QWORD *)this + 1983) = 0x3FF0000000000000;
        VoiceProcessorV2::LogIOError((uint64_t)this, 23.002, (float)*((unsigned int *)this + 3114), (float)*((unsigned int *)this + 121), (float)v524, "processdl: <block size mismatch>");
        if (VPLogScope(void)::once != -1)
          dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
        v80 = (_QWORD *)VPLogScope(void)::scope;
        if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(2, VPLogScope(void)::scope, 0))
        {
          v81 = (*v80 ? *v80 : MEMORY[0x1E0C81028]);
          if (os_log_type_enabled(v81, OS_LOG_TYPE_DEFAULT))
          {
            LODWORD(buf.mSampleTime) = 136315394;
            *(_QWORD *)((char *)&buf.mSampleTime + 4) = "vpProcessDownlink_v8.cpp";
            WORD2(buf.mHostTime) = 1024;
            *(_DWORD *)((char *)&buf.mHostTime + 6) = 147;
            _os_log_impl(&dword_1B5ED0000, v81, OS_LOG_TYPE_DEFAULT, "%25s:%-5d  >vp> CoreAudio: ***** VP BLOCK WARNING: PROCESSDLAUDIO TRANSIENT INCORRECT BLOCK CONFIG", (uint8_t *)&buf, 0x12u);
          }
        }
        v82 = (int *)*((_QWORD *)this + 1570);
        if (v82 && (v12[3409] || v12[3410]))
        {
          if (VPLogScope(void)::once != -1)
            dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
          CALegacyLog::log(v82, 2, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v8/vpProcessDownlink_v8.cpp", 147, "ProcessDownlinkAudio", "CoreAudio: ***** VP BLOCK WARNING: PROCESSDLAUDIO TRANSIENT INCORRECT BLOCK CONFIG");
        }
        if (VPLogScope(void)::once != -1)
          dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
        v83 = (_QWORD *)VPLogScope(void)::scope;
        if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(2, VPLogScope(void)::scope, 0))
        {
          v84 = (*v83 ? *v83 : MEMORY[0x1E0C81028]);
          if (os_log_type_enabled(v84, OS_LOG_TYPE_DEFAULT))
          {
            v513 = (char *)this + 2488;
            v85 = a5->mBuffers[0].mDataByteSize;
            v86 = *((_DWORD *)this + 121);
            CAFormatter::CAFormatter((CAFormatter *)&v550, v35);
            v87 = *((_DWORD *)this + 3114);
            LODWORD(buf.mSampleTime) = 136316674;
            *(_QWORD *)((char *)&buf.mSampleTime + 4) = "vpProcessDownlink_v8.cpp";
            WORD2(buf.mHostTime) = 1024;
            *(_DWORD *)((char *)&buf.mHostTime + 6) = 151;
            WORD1(buf.mRateScalar) = 1024;
            HIDWORD(buf.mRateScalar) = v524;
            LOWORD(buf.mWordClockTime) = 1024;
            *(_DWORD *)((char *)&buf.mWordClockTime + 2) = v85;
            HIWORD(buf.mWordClockTime) = 1024;
            *(_DWORD *)&buf.mSMPTETime.mSubframes = v86;
            LOWORD(buf.mSMPTETime.mCounter) = 2080;
            *(Float64 *)((char *)&buf.mSMPTETime.mCounter + 2) = v550.mSampleTime;
            HIWORD(buf.mSMPTETime.mFlags) = 1024;
            *(_DWORD *)&buf.mSMPTETime.mHours = v87;
            _os_log_impl(&dword_1B5ED0000, v84, OS_LOG_TYPE_DEFAULT, "%25s:%-5d  >vp> warning: processdownlinkaudio: <transient block size mismatch btwn expected and actual> num frames received  = %u (data byte size = %u).\t dl mix buff size = %u\n\tdlmix asbd = %s\n\tprocess dl callcount = %u\n", (uint8_t *)&buf, 0x34u);
            if (*(_QWORD *)&v550.mSampleTime)
              free(*(void **)&v550.mSampleTime);
            v31 = v513;
            v12 = v530;
          }
        }
        v88 = (int *)*((_QWORD *)this + 1570);
        if (v88 && (v12[3409] || v12[3410]))
        {
          if (VPLogScope(void)::once != -1)
            dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
          v89 = VPLogScope(void)::scope;
          v90 = a5->mBuffers[0].mDataByteSize;
          v91 = *((_DWORD *)this + 121);
          CAFormatter::CAFormatter((CAFormatter *)&buf, v35);
          CALegacyLog::log(v88, 2, v89, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v8/vpProcessDownlink_v8.cpp", 151, "ProcessDownlinkAudio", "warning: processdownlinkaudio: <transient block size mismatch btwn expected and actual> num frames received  = %u (data byte size = %u).\t dl mix buff size = %u\n\tdlmix asbd = %s\n\tprocess dl callcount = %u\n", v524, v90, v91, *(const char **)&buf.mSampleTime, *((_DWORD *)this + 3114));
          goto LABEL_197;
        }
      }
      if (v12[3409] && (VoiceProcessorV2::InjectionFilesReadSignal(this, 2, v524, a5), v12[3409]) || v12[3410])
        VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)this, 0x44u, v524, a5, &v544);
      v79 = *((_QWORD *)this + 1995);
      if (AudioIssueDetectorLibraryLoader(void)::once != -1)
        dispatch_once(&AudioIssueDetectorLibraryLoader(void)::once, &__block_literal_global_13262);
      if (!AudioIssueDetectorLibraryLoader(void)::libSym)
        goto LABEL_890;
LABEL_206:
      AudioIssueDetectorLibraryLoader(void)::libSym(v79, 68, 0, a5, v524, &v544);
    }
  }
  else if (a5->mNumberBuffers == *((_DWORD *)this + 89))
  {
    v35 = (VoiceProcessorV8 *)((char *)this + 328);
    if (!v12[3410])
      goto LABEL_82;
    goto LABEL_56;
  }
LABEL_890:
  if (v521)
    (*(void (**)(char *))(*(_QWORD *)v31 + 24))(v31);
  v17 = 0;
  LOBYTE(v16) = 1;
LABEL_893:
  if (v12[3409] && *((_QWORD *)this + 1571))
  {
    v476 = mach_absolute_time();
    v477 = (int *)*((_QWORD *)this + 1571);
    v279 = &AudioDataAnalysisManagerLibraryLoader(void)::libSym;
    if (VPTimestampLogScope(void)::once != -1)
      dispatch_once(&VPTimestampLogScope(void)::once, &__block_literal_global_5_19938);
    v191 = (uint64_t)&AudioDataAnalysisManagerLibraryLoader(void)::libSym;
    v192 = (double)v476 * 0.0000000416666667 - v18;
    CALegacyLog::log(v477, 5, VPTimestampLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v8/vpProcessDownlink_v8.cpp", 1284, "ProcessDownlinkAudio", "DL %f %f %f", v544.mSampleTime, v18, v192);
    v478 = *((_DWORD *)this + 121);
    v479 = *((double *)this + 41);
    if (v192 >= (double)v478 / v479)
    {
      v224 = (int *)*((_QWORD *)this + 1571);
      if (VPTimestampLogScope(void)::once != -1)
LABEL_924:
        dispatch_once(&VPTimestampLogScope(void)::once, &__block_literal_global_5_19938);
      CALegacyLog::log(v224, 5, *(_QWORD *)(v191 + 360), "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v8/vpProcessDownlink_v8.cpp", 1286, "ProcessDownlinkAudio", "DL ERROR, processing slower than RT - %f", v192);
      v478 = *((_DWORD *)this + 121);
      v479 = *((double *)this + 41);
    }
    if (v18 - *((double *)this + 1986) > (double)(*((_DWORD *)this + 294) + v478) / v479)
    {
      v480 = (int *)*((_QWORD *)this + 1571);
      if (v279[44] != -1)
        dispatch_once(&VPTimestampLogScope(void)::once, &__block_literal_global_5_19938);
      CALegacyLog::log(v480, 5, *(_QWORD *)(v191 + 360), "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v8/vpProcessDownlink_v8.cpp", 1288, "ProcessDownlinkAudio", "DL ERROR, not being called in a timely manner - %f", v18 - *((double *)this + 1986));
    }
    *((double *)this + 1986) = v18;
  }
  if ((v16 & 1) != 0)
  {
    if (*((_DWORD *)this + 19) != 1)
    {
      if (*((_BYTE *)this + 1648)
        || (v481 = FadeInOverFewFrames(*((AudioBufferList **)this + 204), a5, *((unsigned int *)this + 410), *((_DWORD *)this + 411)), *((_BYTE *)this + 1648) = v481, *((_DWORD *)this + 410) = HIDWORD(v481), (_BYTE)v481))
      {
        CopyAllBuffersABL(*((UInt32 **)this + 204), a5);
      }
    }
  }
  else
  {
    if (*((_DWORD *)this + 20) == 1)
    {
      if (!a5->mNumberBuffers)
        goto LABEL_922;
      v482 = 0;
      v483 = &a5->mBuffers[0].mData;
      do
      {
        bzero(*v483, *((unsigned int *)v483 - 1));
        ++v482;
        v483 += 2;
      }
      while (v482 < a5->mNumberBuffers);
    }
    else
    {
      *((_DWORD *)this + 410) = 0;
      *((_BYTE *)this + 1648) = 0;
      FadeOutOverOneFrame(*((AudioBufferList **)this + 204), a5);
    }
    v484 = *((_DWORD *)this + 20);
    if (v484 == 2 || v484 == 4)
      v17 = 0;
  }
  do
LABEL_922:
    v486 = __ldaxr(v13);
  while (__stlxr(v486 - 1, v13));
  return v17;
}

void sub_1B63E5268(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  unsigned int *v2;
  unsigned int v4;

  if (*(_DWORD *)(v1 + 72))
    (*(void (**)(_QWORD))(**(_QWORD **)(v1 + 8) + 24))(*(_QWORD *)(v1 + 8));
  do
    v4 = __ldaxr(v2);
  while (__stlxr(v4 - 1, v2));
  _Unwind_Resume(exception_object);
}

uint64_t caulk::function_ref<void ()(unsigned char const*,unsigned long)>::functor_invoker<VoiceProcessorV8::ProcessDownlinkAudio(AudioBufferList *,AudioBufferList *,AudioBufferList *,AudioBufferList *,unsigned int,AudioTimeStamp const&)::$_0>(uint64_t a1, void *inData, UInt32 inDataSize)
{
  return AudioUnitSetProperty(*(AudioUnit *)(**(_QWORD **)a1 + 3496), 0x73706D64u, 0, 0, inData, inDataSize);
}

uint64_t VoiceProcessorV8::OCNSAndSpeechEnhanceDLProcess(uint64_t this, AudioBufferList *a2, AudioBufferList *a3, int a4, uint64_t inNumberFrames)
{
  AudioBufferList *v8;
  uint64_t v9;
  const float *mData;
  UInt64 v11;
  uint64_t v12;
  float *p_mNumberBuffers;
  AudioBufferList *v14;
  __int128 v15;
  __int128 v16;
  AudioBufferList *v17;
  __int128 v18;
  __int128 v19;
  _DWORD *v20;
  float *v21;
  float *v22;
  UInt64 v23;
  AudioUnitRenderActionFlags v24;
  AudioTimeStamp inTimeStamp;
  AudioUnitRenderActionFlags ioActionFlags[2];
  AudioBufferList *ioOutputBufferLists[2];
  DSPSplitComplex inInputBufferLists;
  uint64_t v29;

  v8 = a2;
  v9 = this;
  v29 = *MEMORY[0x1E0C80C00];
  if (a4)
  {
    this = *(_QWORD *)(this + 17424);
    mData = (const float *)a2->mBuffers[0].mData;
    v11 = *(_QWORD *)(*(_QWORD *)(v9 + 17416) + 16) + 4 * inNumberFrames;
    inTimeStamp.mSampleTime = *(Float64 *)(*(_QWORD *)(v9 + 17416) + 16);
    inTimeStamp.mHostTime = v11;
    if (this)
      this = VPTimeFreqConverter::Analyze((VPTimeFreqConverter *)this, mData, (DSPSplitComplex *)&inTimeStamp);
  }
  v12 = *(_QWORD *)(v9 + 8832);
  if ((v12 & 0x40) != 0 && (*(_BYTE *)(v9 + 8840) & 0x40) != 0)
  {
    this = *(_QWORD *)(v9 + 3544);
    if (this)
    {
      inInputBufferLists.imagp = 0;
      ioOutputBufferLists[1] = 0;
      p_mNumberBuffers = (float *)&v8->mNumberBuffers;
      v14 = a3;
      if (a4)
      {
        p_mNumberBuffers = *(float **)(v9 + 17416);
        v14 = (AudioBufferList *)p_mNumberBuffers;
      }
      inInputBufferLists.realp = p_mNumberBuffers;
      ioOutputBufferLists[0] = v14;
      v15 = *(_OWORD *)(v9 + 17568);
      *(_OWORD *)&inTimeStamp.mSampleTime = *(_OWORD *)(v9 + 17552);
      *(_OWORD *)&inTimeStamp.mRateScalar = v15;
      v16 = *(_OWORD *)(v9 + 17600);
      *(_OWORD *)&inTimeStamp.mSMPTETime.mSubframes = *(_OWORD *)(v9 + 17584);
      *(_OWORD *)&inTimeStamp.mSMPTETime.mHours = v16;
      ioActionFlags[0] = 512;
      AudioUnitProcessMultiple((AudioUnit)this, ioActionFlags, &inTimeStamp, inNumberFrames, 2u, (const AudioBufferList **)&inInputBufferLists, 2u, ioOutputBufferLists);
      this = AudioUnitGetParameter(*(AudioUnit *)(v9 + 3544), 1u, 0, 0, (AudioUnitParameterValue *)(v9 + 16688));
      v12 = *(_QWORD *)(v9 + 8832);
    }
  }
  if ((v12 & 0x80) != 0 && (*(_BYTE *)(v9 + 8840) & 0x80) != 0 && (this = *(_QWORD *)(v9 + 3552)) != 0)
  {
    v17 = a3;
    if (a4)
    {
      v8 = *(AudioBufferList **)(v9 + 17416);
      v17 = v8;
    }
    *(_QWORD *)ioActionFlags = v17;
    ioOutputBufferLists[0] = v8;
    v18 = *(_OWORD *)(v9 + 17568);
    *(_OWORD *)&inTimeStamp.mSampleTime = *(_OWORD *)(v9 + 17552);
    *(_OWORD *)&inTimeStamp.mRateScalar = v18;
    v19 = *(_OWORD *)(v9 + 17600);
    *(_OWORD *)&inTimeStamp.mSMPTETime.mSubframes = *(_OWORD *)(v9 + 17584);
    *(_OWORD *)&inTimeStamp.mSMPTETime.mHours = v19;
    v24 = 512;
    AudioUnitSetProperty((AudioUnit)this, 0x3E9u, 0, 0, *(const void **)(*(_QWORD *)(v9 + 17368) + 16), *(_DWORD *)(*(_QWORD *)(v9 + 17368) + 12));
    AudioUnitSetProperty(*(AudioUnit *)(v9 + 3552), 0x3EAu, 0, 0, (const void *)(v9 + 17408), 4u);
    v20 = *(_DWORD **)(v9 + 2336);
    if (v20 != *(_DWORD **)(v9 + 2344) && *v20 == 1886613611)
      AudioUnitSetParameter(*(AudioUnit *)(v9 + 3552), 0x34u, 0, 0, *(AudioUnitParameterValue *)(v9 + 17412), 0);
    this = AudioUnitProcessMultiple(*(AudioUnit *)(v9 + 3552), &v24, &inTimeStamp, inNumberFrames, 1u, (const AudioBufferList **)ioOutputBufferLists, 1u, (AudioBufferList **)ioActionFlags);
    if (a4)
    {
      this = *(_QWORD *)(v9 + 17424);
      v21 = (float *)a3->mBuffers[0].mData;
      inInputBufferLists.realp = *(float **)(*(_QWORD *)(v9 + 17416) + 16);
      inInputBufferLists.imagp = &inInputBufferLists.realp[inNumberFrames];
      if (this)
        this = VPTimeFreqConverter::Synthesize((VPTimeFreqConverter *)this, &inInputBufferLists, v21);
    }
    if (*(_BYTE *)(v9 + 15897) || *(_BYTE *)(v9 + 15898))
      return VoiceProcessorV2::SaveFilesWriteSignal(v9, 0x58u, inNumberFrames, a3, &inTimeStamp);
  }
  else if (a4)
  {
    this = *(_QWORD *)(v9 + 17424);
    v22 = (float *)a3->mBuffers[0].mData;
    v23 = *(_QWORD *)(*(_QWORD *)(v9 + 17416) + 16) + 4 * inNumberFrames;
    inTimeStamp.mSampleTime = *(Float64 *)(*(_QWORD *)(v9 + 17416) + 16);
    inTimeStamp.mHostTime = v23;
    if (this)
      return VPTimeFreqConverter::Synthesize((VPTimeFreqConverter *)this, (const DSPSplitComplex *)&inTimeStamp, v22);
  }
  return this;
}

float AUsubMAEC::dft::dftAnalysis(AUsubMAEC::dft *this, const float *__A, float *a3, float *a4, float *a5)
{
  float v9;
  uint64_t v10;
  float result;
  DSPSplitComplex __Z;
  uint64_t __C;

  __C = 0;
  vDSP_vmul(__A, 1, *((const float **)this + 9), 1, *((float **)this + 10), 1, *((int *)this + 2));
  vDSP_vclr(a3, 1, *((int *)this + 3));
  vDSP_vclr(a4, 1, *((int *)this + 3));
  __Z.realp = a3;
  __Z.imagp = a4;
  vDSP_ctoz(*((const DSPComplex **)this + 10), 2, &__Z, 1, *((int *)this + 3));
  __Z.realp = a3;
  __Z.imagp = a4;
  if (*(_QWORD *)this)
    MultiRadixRealFFT::RealInPlaceTransform(*(MultiRadixRealFFT **)this, &__Z, 1, v9);
  vDSP_vsmul(a3, 1, (const float *)this + 11, a3, 1, *((int *)this + 3));
  vDSP_vsmul(a4, 1, (const float *)this + 11, a4, 1, *((int *)this + 3));
  v10 = *((int *)this + 3);
  a3[v10] = *a4;
  *a4 = 0.0;
  a4[v10] = 0.0;
  vDSP_svesq(a3, 1, (float *)&__C + 1, *((int *)this + 6));
  vDSP_svesq(a4, 1, (float *)&__C, *((int *)this + 6));
  result = (float)(*((float *)&__C + 1) + *(float *)&__C) * (float)*((int *)this + 2);
  *a5 = result;
  return result;
}

double AUsubMAEC::Kalman::initKalman(uint64_t a1, _DWORD *a2, char a3)
{
  int v5;
  int v6;
  _QWORD *v7;
  int v8;
  void *v9;
  void *v10;
  int v11;
  int v12;
  int v13;
  _DWORD *v14;
  _DWORD *v15;
  _DWORD *v16;
  _DWORD *v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  int v21;
  int v22;
  char *v23;
  char *v25;
  int v26;
  int v27;
  uint64_t v28;
  int v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  int v34;
  uint64_t v35;
  int v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  int *v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  char *v46;
  char *v48;
  char *v49;
  char *v50;
  char *v51;
  char *v52;
  int v53;
  char *v54;
  char *v55;
  char *v56;
  char *v57;
  char *v58;
  int v59;
  char *v60;
  int v61;
  char *v62;
  char *v63;
  char *v64;
  double result;
  std::bad_alloc *exception;
  std::bad_alloc *v67;

  *(_DWORD *)(a1 + 48) = a2[12];
  *(_DWORD *)(a1 + 52) = a2[2];
  *(_DWORD *)(a1 + 56) = a2[3];
  v5 = a2[6];
  *(_DWORD *)(a1 + 60) = v5;
  *(_DWORD *)(a1 + 64) = a2[13];
  *(_DWORD *)(a1 + 68) = a2[14];
  v6 = a2[15];
  *(_DWORD *)(a1 + 72) = v6;
  *(_DWORD *)(a1 + 76) = a2[16];
  *(_DWORD *)(a1 + 80) = a2[7];
  *(_DWORD *)(a1 + 272) = a2[9];
  if ((a3 & 1) != 0)
  {
    v7 = 0;
    *(_QWORD *)a1 = 0;
  }
  else
  {
    *(_QWORD *)a1 = allocMatrix(v5, v6);
    v7 = allocMatrix(*(_DWORD *)(a1 + 60), *(_DWORD *)(a1 + 72));
    v5 = *(_DWORD *)(a1 + 60);
    v6 = *(_DWORD *)(a1 + 72);
  }
  *(_QWORD *)(a1 + 8) = v7;
  *(_QWORD *)(a1 + 16) = allocMatrix(v5, v6);
  *(_QWORD *)(a1 + 24) = allocMatrix(*(_DWORD *)(a1 + 60), *(_DWORD *)(a1 + 72));
  v8 = 4 * *(_DWORD *)(a1 + 60);
  v9 = malloc_type_malloc(v8, 0x2C8E6D5CuLL);
  v10 = v9;
  if (v8 && !v9)
    goto LABEL_52;
  bzero(v9, v8);
  *(_QWORD *)(a1 + 88) = v10;
  *(_OWORD *)(a1 + 96) = xmmword_1B66A2280;
  v11 = *(_DWORD *)(a1 + 76);
  *(_DWORD *)(a1 + 112) = v11;
  v12 = 4 * v11;
  v13 = 4 * v11;
  v14 = malloc_type_malloc(4 * v11, 0x2C8E6D5CuLL);
  v15 = v14;
  if (v12)
  {
    if (!v14)
      goto LABEL_52;
  }
  bzero(v14, v12);
  *(_QWORD *)(a1 + 120) = v15;
  *v15 = *(_DWORD *)(a1 + 48) * *(_DWORD *)(a1 + 64);
  if (*(int *)(a1 + 112) >= 2)
  {
    v15[1] = *(_DWORD *)(a1 + 48) * *(_DWORD *)(a1 + 68);
    if (*(int *)(a1 + 112) >= 3)
      v15[2] = *(_DWORD *)(a1 + 48) * *(_DWORD *)(a1 + 68);
  }
  v16 = malloc_type_malloc(v12, 0x2C8E6D5CuLL);
  v17 = v16;
  if (v13)
  {
    if (!v16)
      goto LABEL_52;
  }
  bzero(v16, v12);
  *(_QWORD *)(a1 + 128) = v17;
  *(_QWORD *)(a1 + 136) = 0;
  if (*(int *)(a1 + 112) < 1)
  {
    v22 = 0;
  }
  else
  {
    v18 = 0;
    v19 = *(_QWORD *)(a1 + 120);
    do
    {
      v17[v18] = *(_DWORD *)(a1 + 272) * *(_DWORD *)(v19 + 4 * v18);
      v20 = *(_DWORD *)(a1 + 140);
      v21 = *(_DWORD *)(v19 + 4 * v18) + *(_DWORD *)(a1 + 136);
      *(_DWORD *)(a1 + 136) = v21;
      *(_DWORD *)(a1 + 140) = v17[v18++] + v20;
    }
    while (v18 < *(int *)(a1 + 112));
    v22 = 4 * v21;
  }
  v23 = (char *)malloc_type_malloc(v22, 0x2C8E6D5CuLL);
  if (v22 && v23 == 0)
    goto LABEL_52;
  v25 = v23;
  bzero(v23, v22);
  *(_QWORD *)(a1 + 144) = v25;
  v26 = *(_DWORD *)(a1 + 112);
  v27 = *(_DWORD *)(a1 + 272);
  if (v26 >= 1)
  {
    v28 = 0;
    v29 = 0;
    v30 = 0;
    v31 = *(_QWORD *)(a1 + 120);
    v32 = *(_QWORD *)(a1 + 128);
    do
    {
      v33 = *(_DWORD *)(v31 + 4 * v28);
      if (v33 / v27 >= 1)
      {
        v34 = 0;
        do
        {
          if (v27 >= 1)
          {
            v35 = 0;
            v36 = v30;
            v37 = &v25[4 * v30];
            do
            {
              *(_DWORD *)&v37[4 * v35] = v29 + v35 + *(_DWORD *)(v31 + 4 * v28) * v35 + v34 * v27;
              ++v35;
              v27 = *(_DWORD *)(a1 + 272);
            }
            while ((int)v35 < v27);
            v30 = v36 + v35;
            v33 = *(_DWORD *)(v31 + 4 * v28);
          }
          ++v34;
        }
        while (v34 < v33 / v27);
        v26 = *(_DWORD *)(a1 + 112);
      }
      v29 += *(_DWORD *)(v32 + 4 * v28++);
    }
    while (v28 < v26);
  }
  *(_QWORD *)(a1 + 32) = allocMatrix(*(_DWORD *)(a1 + 60), v27 * *(_DWORD *)(a1 + 136));
  *(_QWORD *)(a1 + 40) = allocMatrix(*(_DWORD *)(a1 + 60), *(_DWORD *)(a1 + 272) * *(_DWORD *)(a1 + 136));
  v38 = *(unsigned int *)(a1 + 60);
  if ((int)v38 >= 1)
  {
    v39 = 0;
    v40 = *(unsigned int *)(a1 + 136);
    do
    {
      if ((int)v40 >= 1)
      {
        v41 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8 * v39);
        v42 = *(int **)(a1 + 144);
        v43 = v40;
        do
        {
          v44 = *v42++;
          *(_DWORD *)(v41 + 4 * v44) = 1008981770;
          --v43;
        }
        while (v43);
      }
      ++v39;
    }
    while (v39 != v38);
  }
  v45 = 8 * *(_DWORD *)(a1 + 72);
  v46 = (char *)malloc_type_malloc(v45, 0x2C8E6D5CuLL);
  if (v45 && v46 == 0)
    goto LABEL_52;
  v48 = v46;
  bzero(v46, v45);
  v49 = &v48[4 * *(int *)(a1 + 72)];
  *(_QWORD *)(a1 + 152) = v48;
  *(_QWORD *)(a1 + 160) = v49;
  v50 = (char *)malloc_type_malloc(v45, 0x2C8E6D5CuLL);
  v51 = v50;
  if (v45)
  {
    if (!v50)
      goto LABEL_52;
  }
  bzero(v50, v45);
  v52 = &v51[4 * *(int *)(a1 + 72)];
  *(_QWORD *)(a1 + 168) = v51;
  *(_QWORD *)(a1 + 176) = v52;
  v53 = 8 * *(_DWORD *)(a1 + 136);
  v54 = (char *)malloc_type_malloc(v53, 0x2C8E6D5CuLL);
  v55 = v54;
  if (v53)
  {
    if (!v54)
      goto LABEL_52;
  }
  bzero(v54, v53);
  v56 = &v55[4 * *(int *)(a1 + 136)];
  *(_QWORD *)(a1 + 184) = v55;
  *(_QWORD *)(a1 + 192) = v56;
  v57 = (char *)malloc_type_malloc(v53, 0x2C8E6D5CuLL);
  v58 = v57;
  if (v53)
  {
    if (!v57)
      goto LABEL_52;
  }
  bzero(v57, v53);
  v59 = *(_DWORD *)(a1 + 140);
  v60 = &v58[4 * *(int *)(a1 + 136)];
  *(_QWORD *)(a1 + 200) = v58;
  *(_QWORD *)(a1 + 208) = v60;
  v61 = 8 * v59;
  v62 = (char *)malloc_type_malloc(8 * v59, 0x2C8E6D5CuLL);
  v63 = v62;
  if (v61)
  {
    if (!v62)
    {
LABEL_52:
      exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
      v67 = std::bad_alloc::bad_alloc(exception);
    }
  }
  bzero(v62, v61);
  v64 = &v63[4 * *(int *)(a1 + 140)];
  *(_QWORD *)(a1 + 216) = v63;
  *(_QWORD *)(a1 + 224) = v64;
  *(_OWORD *)(a1 + 232) = xmmword_1B66A2290;
  *(_DWORD *)(a1 + 248) = 1148846080;
  *(float *)(a1 + 252) = *(float *)(a1 + 96) * 1000.0;
  result = 2.0615843e11;
  *(_OWORD *)(a1 + 256) = xmmword_1B66A22A0;
  return result;
}

void AUsubMAEC::Kalman::removeKalman(AUsubMAEC::Kalman *this, char a2)
{
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;

  freeMatrix(*((_DWORD *)this + 15), (float ***)this + 2);
  freeMatrix(*((_DWORD *)this + 15), (float ***)this + 3);
  if ((a2 & 1) == 0)
  {
    freeMatrix(*((_DWORD *)this + 15), (float ***)this);
    freeMatrix(*((_DWORD *)this + 15), (float ***)this + 1);
  }
  freeMatrix(*((_DWORD *)this + 15), (float ***)this + 4);
  freeMatrix(*((_DWORD *)this + 15), (float ***)this + 5);
  v4 = (void *)*((_QWORD *)this + 11);
  if (v4)
  {
    free(v4);
    *((_QWORD *)this + 11) = 0;
  }
  v5 = (void *)*((_QWORD *)this + 15);
  if (v5)
  {
    free(v5);
    *((_QWORD *)this + 15) = 0;
  }
  v6 = (void *)*((_QWORD *)this + 16);
  if (v6)
  {
    free(v6);
    *((_QWORD *)this + 16) = 0;
  }
  v7 = (void *)*((_QWORD *)this + 18);
  if (v7)
  {
    free(v7);
    *((_QWORD *)this + 18) = 0;
  }
  v8 = (void *)*((_QWORD *)this + 19);
  if (v8)
  {
    free(v8);
    *((_QWORD *)this + 19) = 0;
  }
  v9 = (void *)*((_QWORD *)this + 21);
  if (v9)
  {
    free(v9);
    *((_QWORD *)this + 21) = 0;
  }
  v10 = (void *)*((_QWORD *)this + 23);
  if (v10)
  {
    free(v10);
    *((_QWORD *)this + 23) = 0;
  }
  v11 = (void *)*((_QWORD *)this + 25);
  if (v11)
  {
    free(v11);
    *((_QWORD *)this + 25) = 0;
  }
  v12 = (void *)*((_QWORD *)this + 27);
  if (v12)
  {
    free(v12);
    *((_QWORD *)this + 27) = 0;
  }
}

void AUsubMAEC::Kalman::rearrangeX(AUsubMAEC::Kalman *this, AUsubMAEC::dftBuffer *a2, int a3, float *a4, float *a5)
{
  uint64_t v9;
  const vDSP_Length *v10;
  uint64_t v11;
  float *v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  const vDSP_Length *v16;
  int *v17;
  int v18;
  vDSP_Length *v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  float *v23;
  float *v24;
  const float *v25;
  int v26;
  int v27;
  int v28;
  int *v29;
  int v30;
  uint64_t v31;
  vDSP_Length *v32;
  int v33;
  int v34;
  uint64_t v35;
  float *v36;
  float *v37;
  const float *v38;
  int *v39;
  int v40;
  uint64_t v41;
  vDSP_Length *v42;
  int v43;
  uint64_t v44;
  int v45;
  float *v46;
  float *v47;
  const float *v48;
  _QWORD v49[2];

  v49[1] = *MEMORY[0x1E0C80C00];
  MEMORY[0x1E0C80A78](this);
  v10 = (_QWORD *)((char *)v49 - ((v9 + 15) & 0xFFFFFFFF0));
  MEMORY[0x1E0C80A78](v11);
  v16 = (_QWORD *)((char *)v49 - ((v15 + 15) & 0xFFFFFFFF0));
  if ((int)v14 >= 1)
  {
    v17 = (int *)*((_QWORD *)a2 + 4);
    v18 = *((_DWORD *)this + 15);
    v19 = (vDSP_Length *)v10;
    do
    {
      v20 = *v17++;
      *v19++ = a3 + 1 + v18 * v20;
      --v14;
    }
    while (v14);
  }
  LODWORD(v21) = *((_DWORD *)this + 12);
  v49[0] = v12;
  if ((int)v21 >= 1)
  {
    v22 = 0;
    v23 = a4;
    v24 = v12;
    do
    {
      v25 = *(const float **)(*((_QWORD *)a2 + 1) + 8 * v22);
      vDSP_vgathr(*(const float **)(*(_QWORD *)a2 + 8 * v22), v10, 1, v23, (int)v21, *((int *)this + 16));
      vDSP_vgathr(v25, v10, 1, v24, *((int *)this + 12), *((int *)this + 16));
      ++v22;
      v21 = *((int *)this + 12);
      ++v24;
      ++v23;
    }
    while (v22 < v21);
    v13 = *((_DWORD *)this + 17);
  }
  if (v13)
  {
    v26 = *((_DWORD *)this + 16);
    if (v13 >= 1)
    {
      v27 = *((_DWORD *)this + 15);
      v28 = a3 - 1;
      if (v27 - 1 > a3)
        v28 = a3 + 1;
      v29 = (int *)*((_QWORD *)a2 + 5);
      v30 = v28 + 1;
      v31 = v13;
      v32 = (vDSP_Length *)v16;
      do
      {
        v33 = *v29++;
        *v32++ = v30 + v33 * v27;
        --v31;
      }
      while (v31);
    }
    v34 = v26 * v21;
    if ((int)v21 >= 1)
    {
      v35 = 0;
      v36 = &a4[v34];
      v37 = (float *)(v49[0] + 4 * v34);
      do
      {
        v38 = *(const float **)(*((_QWORD *)a2 + 1) + 8 * v35);
        vDSP_vgathr(*(const float **)(*(_QWORD *)a2 + 8 * v35), v16, 1, v36, (int)v21, *((int *)this + 17));
        vDSP_vgathr(v38, v16, 1, v37, *((int *)this + 12), *((int *)this + 17));
        ++v35;
        v21 = *((int *)this + 12);
        ++v37;
        ++v36;
      }
      while (v35 < v21);
      v13 = *((_DWORD *)this + 17);
    }
    if (a3 < 1 || *((_DWORD *)this + 15) - 1 <= a3)
    {
      if (a3)
        --a3;
      else
        a3 = 3;
    }
    if (v13 >= 1)
    {
      v39 = (int *)*((_QWORD *)a2 + 5);
      v40 = *((_DWORD *)this + 15);
      v41 = v13;
      v42 = (vDSP_Length *)v16;
      do
      {
        v43 = *v39++;
        *v42++ = a3 + v40 * v43;
        --v41;
      }
      while (v41);
    }
    if ((int)v21 >= 1)
    {
      v44 = 0;
      v45 = v34 + v13 * v21;
      v46 = &a4[v45];
      v47 = (float *)(v49[0] + 4 * v45);
      do
      {
        v48 = *(const float **)(*((_QWORD *)a2 + 1) + 8 * v44);
        vDSP_vgathr(*(const float **)(*(_QWORD *)a2 + 8 * v44), v16, 1, v46, (int)v21, *((int *)this + 17));
        vDSP_vgathr(v48, v16, 1, v47, *((int *)this + 12), *((int *)this + 17));
        ++v44;
        ++v47;
        ++v46;
        v21 = *((int *)this + 12);
      }
      while (v44 < v21);
    }
  }
}

void AUsubMAEC::Kalman::runKFFilter(AUsubMAEC::Kalman *this, AUsubMAEC::dftBuffer *a2, DSPSplitComplex a3, DSPSplitComplex a4, int a5, int a6)
{
  float *imagp;
  float *realp;
  float *v9;
  float *v10;
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;
  float *v16;
  float *v17;
  float *v18;
  float *v19;
  int v20;
  DSPSplitComplex v21;
  DSPSplitComplex __C;
  DSPSplitComplex __B;
  DSPSplitComplex __A;

  imagp = a4.imagp;
  realp = a4.realp;
  v9 = a3.imagp;
  v10 = a3.realp;
  LODWORD(v12) = *((_DWORD *)this + 15);
  if (a5)
  {
    if ((int)v12 < 1)
      goto LABEL_10;
    v14 = 0;
    do
    {
      AUsubMAEC::Kalman::rearrangeX(this, a2, v14, *(float **)(*(_QWORD *)this + 8 * v14), *(float **)(*((_QWORD *)this + 1) + 8 * v14));
      ++v14;
      v12 = *((int *)this + 15);
    }
    while (v14 < v12);
  }
  if ((int)v12 >= 1)
  {
    v15 = 0;
    v16 = v9;
    v17 = imagp;
    do
    {
      v18 = *(float **)(*((_QWORD *)this + 1) + 8 * v15);
      __A.realp = *(float **)(*(_QWORD *)this + 8 * v15);
      __A.imagp = v18;
      v19 = *(float **)(*((_QWORD *)this + 3) + 8 * v15);
      __B.realp = *(float **)(*((_QWORD *)this + 2) + 8 * v15);
      __B.imagp = v19;
      __C.realp = v10;
      __C.imagp = v16;
      vDSP_zdotpr(&__A, 1, &__B, 1, &__C, *((int *)this + 18));
      if (a6)
      {
        v21.realp = realp;
        v21.imagp = v17;
        vDSP_zdotpr(&__A, 2, &__B, 2, &v21, *((_DWORD *)this + 18) / *((_DWORD *)this + 12));
      }
      ++v15;
      ++v17;
      v12 = *((int *)this + 15);
      ++realp;
      ++v16;
      ++v10;
    }
    while (v15 < v12);
  }
LABEL_10:
  *v9 = 0.0;
  v20 = v12 - 1;
  v9[v20] = 0.0;
  if (a6)
  {
    *imagp = 0.0;
    imagp[v20] = 0.0;
  }
}

void AUsubMAEC::Kalman::adaptKalmanFilter(AUsubMAEC::Kalman *this, DSPSplitComplex a2, float *a3)
{
  float *imagp;
  float *realp;
  int v6;
  uint64_t v7;
  uint64_t v8;
  float *v9;
  float *v10;
  float *v11;
  float *v12;
  float *v13;
  float *v14;
  float *v15;
  uint64_t v16;
  float v17;
  float *v18;
  float *v19;
  float *v20;
  uint64_t v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float *v29;
  float *v30;
  float *v31;
  float *v32;
  float *v33;
  float *v34;
  float *v35;
  uint64_t v36;
  float v37;
  float v38;
  float v39;
  float v40;
  float *v41;
  float *v42;
  float *v43;
  float *v44;
  float *v45;
  float *v46;
  uint64_t v47;
  float v48;
  float v49;
  float v50;
  float *v51;
  uint64_t v52;
  float v53;
  float v54;
  float *v55;
  uint64_t v56;
  float v57;
  float v58;
  float v59;
  float v60;
  float v61;
  float v62;
  float v63;
  uint64_t v64;
  float v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  float *v70;
  float *v71;
  uint64_t v72;
  int *v73;
  uint64_t v74;
  uint64_t v75;
  int v76;
  int v77;
  float v78;
  uint64_t v79;
  uint64_t v80;
  unint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  float *v86;
  float *v87;
  float *v88;
  uint64_t v89;
  float *v90;
  uint64_t v91;
  uint64_t v92;
  float *v93;
  float *v94;
  float v95;
  uint64_t v96;
  int v97;
  float v98;
  uint64_t v99;
  unint64_t v100;
  uint64_t v101;
  float *v102;
  uint64_t v103;
  uint64_t v104;
  float *v105;
  uint64_t v106;
  uint64_t v107;
  float *v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  float *v112;
  float v113;
  float *v114;
  float *v115;
  float *v116;
  float *v117;
  float *v118;
  float v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  float *v123;
  float *v124;
  uint64_t v125;
  int *v126;
  uint64_t v127;
  uint64_t v128;
  int v129;
  int v130;
  float v131;
  uint64_t v132;
  unint64_t v133;
  uint64_t v134;
  float *v135;
  uint64_t v136;
  float *v137;
  uint64_t v138;
  uint64_t v139;
  float *v140;
  uint64_t v141;
  uint64_t v142;
  float *v143;
  float *v144;
  float *v145;
  float *v146;
  float *v147;
  float *v148;
  float v149;
  float *v150;
  float v151;
  float *v152;
  float v153;
  uint64_t v154;
  float v155;
  uint64_t v156;
  unint64_t v157;
  uint64_t v158;
  int v159;
  uint64_t v160;
  float *v161;
  float *v162;
  float *v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  float *v167;
  float v168;
  float *v169;
  float *v170;
  float *v171;
  float *v172;
  float *v173;
  float *v174;
  float *v175;
  float *v176;
  float *v177;
  float *v178;
  float *v179;
  float v180;
  float v181;
  float v182;
  float *v183;
  uint64_t v185;
  uint64_t v186;
  float *v187;
  float *v188;
  float *v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  float *__B;
  float *__Ba;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  int v199;
  uint64_t v200;
  uint64_t v201;
  int v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  float *v206;
  float *v207;
  uint64_t v208;
  float *v209;
  float *v210;
  float *v211;
  uint64_t v212;
  float *v213;
  uint64_t v214;
  uint64_t v215;
  float *v216;
  uint64_t v217;
  float *v218;
  float *v219;
  const float *v220;
  uint64_t v221;
  uint64_t v222;
  const float *v223;
  int v224;
  uint64_t v225;
  float *v226;

  imagp = a2.imagp;
  realp = a2.realp;
  v6 = *((_DWORD *)this + 68);
  if (v6 == 1)
  {
    *((float *)this + 25) = *((float *)this + 24) + *((float *)this + 24);
    if (*((int *)this + 15) < 1)
      return;
    v7 = 0;
    v220 = (const float *)((char *)this + 104);
    v223 = (const float *)((char *)this + 108);
    LODWORD(v8) = *((_DWORD *)this + 34);
    do
    {
      v9 = *(float **)(*(_QWORD *)this + 8 * v7);
      v10 = *(float **)(*((_QWORD *)this + 1) + 8 * v7);
      v11 = *(float **)(*((_QWORD *)this + 2) + 8 * v7);
      v12 = *(float **)(*((_QWORD *)this + 3) + 8 * v7);
      v13 = *(float **)(*((_QWORD *)this + 4) + 8 * v7);
      v14 = *(float **)(*((_QWORD *)this + 5) + 8 * v7);
      vDSP_vsmul(v13, 1, v223, v13, 1, (int)v8);
      vDSP_vsmul(v14, 1, v223, v14, 1, *((int *)this + 34));
      vDSP_vsmul(v11, 1, v220, v11, 1, *((int *)this + 34));
      vDSP_vsmul(v12, 1, v220, v12, 1, *((int *)this + 34));
      v8 = *((unsigned int *)this + 34);
      if ((int)v8 < 1)
      {
        v17 = 0.0;
      }
      else
      {
        v15 = v13;
        v16 = *((unsigned int *)this + 34);
        do
        {
          *v15 = *v15 + *((float *)this + 25);
          ++v15;
          --v16;
        }
        while (v16);
        v17 = 0.0;
        v18 = v9;
        v19 = v10;
        v20 = v13;
        v21 = v8;
        do
        {
          v22 = *v18++;
          v23 = v22;
          v24 = *v19++;
          v25 = (float)(v24 * v24) + (float)(v23 * v23);
          v26 = *v20++;
          v17 = v17 + (float)(v25 * v26);
          --v21;
        }
        while (v21);
      }
      if ((int)v8 >= 1)
      {
        v27 = (float)(v17 + *(float *)(*((_QWORD *)this + 11) + 4 * v7)) + 1.0e-20;
        v28 = a3[v7] * (float)(1.0 / v27);
        v29 = v13;
        v30 = v9;
        v31 = (float *)*((_QWORD *)this + 19);
        v32 = (float *)*((_QWORD *)this + 20);
        v33 = v31;
        v34 = v10;
        v35 = v32;
        v36 = v8;
        do
        {
          v37 = *v30++;
          *v33++ = v28 * (float)(*v29 * v37);
          v38 = *v29++;
          v39 = v38;
          v40 = *v34++;
          *v35++ = v28 * (float)-(float)(v39 * v40);
          --v36;
        }
        while (v36);
        v41 = v31;
        v42 = (float *)*((_QWORD *)this + 25);
        v43 = (float *)*((_QWORD *)this + 26);
        v44 = v32;
        v45 = v42;
        v46 = v43;
        v47 = v8;
        do
        {
          *v45++ = (float)(*v41 * realp[v7]) - (float)(*v44 * imagp[v7]);
          v48 = *v41++;
          v49 = v48;
          v50 = *v44++;
          *v46++ = (float)(v50 * realp[v7]) + (float)(v49 * imagp[v7]);
          --v47;
        }
        while (v47);
        v51 = v42;
        v52 = v8;
        do
        {
          v53 = *v51++;
          *v11 = *v11 + v53;
          ++v11;
          v54 = *v43++;
          *v12 = *v12 + v54;
          ++v12;
          --v52;
        }
        while (v52);
        v55 = v42;
        v56 = v8;
        do
        {
          v57 = *v31++;
          v58 = v57;
          v59 = *v9++;
          v60 = v59;
          v61 = *v32++;
          v62 = v61;
          v63 = *v10++;
          *v55++ = (float)(v58 * v60) - (float)(v62 * v63);
          --v56;
        }
        while (v56);
        v64 = v8;
        do
        {
          v65 = *v42++;
          *v13 = *v13 - (float)(v65 * *v13);
          ++v13;
          *v14++ = 0.0;
          --v64;
        }
        while (v64);
      }
      ++v7;
    }
    while (v7 < *((int *)this + 15));
    v6 = *((_DWORD *)this + 68);
  }
  if (v6 == 2)
  {
    *((float *)this + 25) = *((float *)this + 24) + *((float *)this + 24);
    if (*((int *)this + 15) < 1)
      return;
    v66 = 0;
    v192 = *((_QWORD *)this + 25);
    __B = (float *)((char *)this + 108);
    v198 = *((_QWORD *)this + 26);
    do
    {
      v67 = *(_QWORD *)(*(_QWORD *)this + 8 * v66);
      v68 = *(_QWORD *)(*((_QWORD *)this + 1) + 8 * v66);
      v69 = *(_QWORD *)(*((_QWORD *)this + 2) + 8 * v66);
      v203 = *(_QWORD *)(*((_QWORD *)this + 3) + 8 * v66);
      v70 = *(float **)(*((_QWORD *)this + 4) + 8 * v66);
      v71 = *(float **)(*((_QWORD *)this + 5) + 8 * v66);
      vDSP_vsmul(v70, 1, __B, v70, 1, *((int *)this + 68) * (uint64_t)*((int *)this + 34));
      v213 = v71;
      vDSP_vsmul(v71, 1, __B, v71, 1, *((int *)this + 68) * (uint64_t)*((int *)this + 34));
      v72 = *((unsigned int *)this + 34);
      if ((int)v72 >= 1)
      {
        v73 = (int *)*((_QWORD *)this + 18);
        do
        {
          v74 = *v73++;
          v70[v74] = *((float *)this + 25) + v70[v74];
          --v72;
        }
        while (v72);
      }
      v221 = *((unsigned int *)this + 28);
      if ((int)v221 >= 1)
      {
        v200 = v69;
        v75 = 0;
        v76 = 0;
        v77 = 0;
        v78 = *(float *)(*((_QWORD *)this + 11) + 4 * v66) + 1.0e-20;
        v215 = *((_QWORD *)this + 16);
        v217 = *((_QWORD *)this + 15);
        v79 = v67 + 4;
        do
        {
          v80 = *(unsigned int *)(v217 + 4 * v75);
          if ((int)v80 >= 1)
          {
            v81 = 0;
            v82 = 0;
            v83 = v79 + 4 * v77;
            v84 = *((int *)this + 68);
            v85 = v80 + v76;
            v86 = &v71[v85];
            v87 = &v70[v85];
            v88 = &v71[v76];
            v89 = v192 + 4 * v77;
            v90 = &v70[v76];
            v91 = v198 + 4 * v77;
            v92 = v68 + 4 * v77;
            do
            {
              v93 = (float *)(v89 + v81);
              *v93 = (float)((float)(*(float *)(v83 + v81) * v90[v81 / 4 + 1])
                           + (float)(*(float *)(v83 + v81 - 4) * v90[v81 / 4]))
                   - (float)(*(float *)(v92 + v81 + 4) * v88[v81 / 4 + 1]);
              v94 = (float *)(v91 + v81);
              *v94 = (float)((float)(*(float *)(v83 + v81) * v88[v81 / 4 + 1])
                           + (float)(*(float *)(v92 + v81) * v90[v81 / 4]))
                   + (float)(*(float *)(v92 + v81 + 4) * v90[v81 / 4 + 1]);
              v93[1] = (float)((float)(*(float *)(v83 + v81 - 4) * v87[v81 / 4])
                             - (float)(*(float *)(v92 + v81) * v86[v81 / 4]))
                     + (float)(*(float *)(v83 + v81) * v87[v81 / 4 + 1]);
              v95 = (float)((float)(*(float *)(v92 + v81) * v87[v81 / 4])
                          + (float)(*(float *)(v83 + v81 - 4) * v86[v81 / 4]))
                  + (float)(*(float *)(v92 + v81 + 4) * v87[v81 / 4 + 1]);
              v94[1] = v95;
              v78 = (float)((float)((float)(v78 + (float)(*(float *)(v89 + v81) * *(float *)(v83 + v81 - 4)))
                                  + (float)(*(float *)(v91 + v81) * *(float *)(v92 + v81)))
                          + (float)(*(float *)(v89 + v81 + 4) * *(float *)(v83 + v81)))
                  + (float)(v95 * *(float *)(v92 + v81 + 4));
              v82 += v84;
              v81 += 4 * v84;
            }
            while (v82 < v80);
          }
          v77 += v80;
          v76 += *(_DWORD *)(v215 + 4 * v75++);
        }
        while (v75 != v221);
        v96 = 0;
        v224 = 0;
        v97 = 0;
        v98 = (float)(1.0 / v78) * a3[v66];
        v207 = v71 + 1;
        v210 = v70 + 1;
        v201 = v200 + 4;
        v204 = v203 + 4;
        do
        {
          v99 = *(unsigned int *)(v217 + 4 * v96);
          if ((int)v99 >= 1)
          {
            v100 = 0;
            v101 = 0;
            v102 = &v213[(int)v99 + v224];
            v103 = *((int *)this + 68);
            v104 = v192 + 4 + 4 * v97;
            v105 = &v210[(int)v99 + v224];
            v106 = *((_QWORD *)this + 20) + 4;
            v107 = *((_QWORD *)this + 19) + 4;
            v108 = &v210[v224];
            v109 = v204 + 4 * v97;
            v110 = v201 + 4 * v97;
            v111 = v198 + 4 + 4 * v97;
            do
            {
              v112 = (float *)(v107 + v100);
              *(v112 - 1) = v98 * *(float *)(v192 + 4 * v97 + v100);
              v113 = -(float)(*(float *)(v198 + 4 * v97 + v100) * v98);
              v114 = (float *)(v106 + v100);
              *(v114 - 1) = v113;
              v115 = (float *)(v110 + v100);
              *(v115 - 1) = (float)((float)(*(float *)(v107 + v100 - 4) * realp[v66])
                                  + (float)(*((float *)this + 26) * *(float *)(v110 + v100 - 4)))
                          - (float)(v113 * imagp[v66]);
              v116 = (float *)(v109 + v100);
              *(v116 - 1) = (float)((float)(*(float *)(v106 + v100 - 4) * realp[v66])
                                  + (float)(*((float *)this + 26) * *(float *)(v109 + v100 - 4)))
                          + (float)(*(float *)(v107 + v100 - 4) * imagp[v66]);
              v117 = &v108[v100 / 4];
              *(v117 - 1) = (float)(v108[v100 / 4 - 1]
                                  - (float)(*(float *)(v107 + v100 - 4) * *(float *)(v192 + 4 * v97 + v100)))
                          + (float)(*(float *)(v106 + v100 - 4) * *(float *)(v198 + 4 * v97 + v100));
              v118 = &v105[v100 / 4];
              *(v118 - 1) = (float)(v105[v100 / 4 - 1] - (float)(*(float *)(v107 + v100 - 4) * *(float *)(v104 + v100)))
                          + (float)(*(float *)(v106 + v100 - 4) * *(float *)(v111 + v100));
              v102[v100 / 4] = (float)(v102[v100 / 4] - (float)(*(float *)(v107 + v100 - 4) * *(float *)(v111 + v100)))
                             - (float)(*(float *)(v106 + v100 - 4) * *(float *)(v104 + v100));
              *v117 = v105[v100 / 4 - 1];
              v207[v224 + v100 / 4] = -v102[v100 / 4];
              *v112 = v98 * *(float *)(v104 + v100);
              v119 = -(float)(*(float *)(v111 + v100) * v98);
              *v114 = v119;
              *v115 = (float)((float)(*(float *)(v107 + v100) * realp[v66])
                            + (float)(*((float *)this + 26) * *(float *)(v110 + v100)))
                    - (float)(v119 * imagp[v66]);
              *v116 = (float)((float)(*(float *)(v106 + v100) * realp[v66])
                            + (float)(*((float *)this + 26) * *(float *)(v109 + v100)))
                    + (float)(*(float *)(v107 + v100) * imagp[v66]);
              *v118 = (float)(v105[v100 / 4] - (float)(*(float *)(v107 + v100) * *(float *)(v104 + v100)))
                    + (float)(*(float *)(v106 + v100) * *(float *)(v111 + v100));
              v101 += v103;
              v100 += 4 * v103;
            }
            while (v101 < v99);
          }
          v97 += v99;
          v224 += *(_DWORD *)(v215 + 4 * v96++);
        }
        while (v96 != v221);
      }
      ++v66;
    }
    while (v66 < *((int *)this + 15));
    v6 = *((_DWORD *)this + 68);
  }
  if (v6 == 4)
  {
    *((float *)this + 25) = *((float *)this + 24) + *((float *)this + 24);
    if (*((int *)this + 15) >= 1)
    {
      v120 = 0;
      v183 = (float *)((char *)this + 108);
      v193 = *((_QWORD *)this + 26) + 12;
      __Ba = (float *)(*((_QWORD *)this + 25) + 12);
      do
      {
        v121 = *(_QWORD *)(*(_QWORD *)this + 8 * v120);
        v122 = *(_QWORD *)(*((_QWORD *)this + 1) + 8 * v120);
        v205 = *(_QWORD *)(*((_QWORD *)this + 3) + 8 * v120);
        v208 = *(_QWORD *)(*((_QWORD *)this + 2) + 8 * v120);
        v123 = *(float **)(*((_QWORD *)this + 4) + 8 * v120);
        v124 = *(float **)(*((_QWORD *)this + 5) + 8 * v120);
        vDSP_vsmul(v123, 1, v183, v123, 1, *((int *)this + 68) * (uint64_t)*((int *)this + 34));
        v211 = v124;
        vDSP_vsmul(v124, 1, v183, v124, 1, *((int *)this + 68) * (uint64_t)*((int *)this + 34));
        v125 = *((unsigned int *)this + 34);
        if ((int)v125 >= 1)
        {
          v126 = (int *)*((_QWORD *)this + 18);
          do
          {
            v127 = *v126++;
            v123[v127] = *((float *)this + 25) + v123[v127];
            --v125;
          }
          while (v125);
        }
        v197 = *((unsigned int *)this + 28);
        if ((int)v197 >= 1)
        {
          v128 = 0;
          v129 = 0;
          v130 = 0;
          v131 = *(float *)(*((_QWORD *)this + 11) + 4 * v120) + 1.0e-20;
          v225 = *((_QWORD *)this + 15);
          v222 = *((_QWORD *)this + 16);
          v218 = v124 + 1;
          do
          {
            v132 = *(unsigned int *)(v225 + 4 * v128);
            if ((int)v132 >= 1)
            {
              v133 = 0;
              v134 = 0;
              v135 = &v218[v129];
              v136 = *((int *)this + 68);
              v137 = &v123[v129];
              v138 = v121 + 12 + 4 * v130;
              v139 = v122 + 12 + 4 * v130;
              v140 = &__Ba[v130];
              v141 = v132;
              v142 = v193 + 4 * v130;
              do
              {
                v143 = &v140[v133 / 4];
                *(v143 - 3) = (float)((float)((float)((float)((float)((float)(*(float *)(v138 + v133 - 8)
                                                                            * v137[v133 / 4 + 1])
                                                                    + (float)(*(float *)(v138 + v133 - 12)
                                                                            * v137[v133 / 4]))
                                                            - (float)(*(float *)(v139 + v133 - 8) * v135[v133 / 4]))
                                                    + (float)(*(float *)(v138 + v133 - 4) * v137[v133 / 4 + 2]))
                                            - (float)(*(float *)(v139 + v133 - 4) * v135[v133 / 4 + 1]))
                                    + (float)(*(float *)(v138 + v133) * v137[v133 / 4 + 3]))
                            - (float)(*(float *)(v139 + v133) * v135[v133 / 4 + 2]);
                v144 = (float *)(v142 + v133);
                *(v144 - 3) = (float)((float)((float)((float)((float)((float)(*(float *)(v138 + v133 - 8)
                                                                            * v135[v133 / 4])
                                                                    + (float)(*(float *)(v139 + v133 - 12)
                                                                            * v137[v133 / 4]))
                                                            + (float)(*(float *)(v139 + v133 - 8) * v137[v133 / 4 + 1]))
                                                    + (float)(*(float *)(v138 + v133 - 4) * v135[v133 / 4 + 1]))
                                            + (float)(*(float *)(v139 + v133 - 4) * v137[v133 / 4 + 2]))
                                    + (float)(*(float *)(v138 + v133) * v135[v133 / 4 + 2]))
                            + (float)(*(float *)(v139 + v133) * v137[v133 / 4 + 3]);
                v145 = &v135[v133 / 4 - 1 + v132];
                v146 = &v137[v133 / 4 + v141];
                *(v143 - 2) = (float)((float)((float)((float)((float)((float)(*(float *)(v138 + v133 - 12)
                                                                            * v137[v133 / 4 + v132])
                                                                    - (float)(*(float *)(v139 + v133 - 12) * *v145))
                                                            + (float)(*(float *)(v138 + v133 - 8) * v146[1]))
                                                    + (float)(*(float *)(v138 + v133 - 4) * v146[2]))
                                            - (float)(*(float *)(v139 + v133 - 4) * v145[2]))
                                    + (float)(*(float *)(v138 + v133) * v146[3]))
                            - (float)(*(float *)(v139 + v133) * v145[3]);
                *(v144 - 2) = (float)((float)((float)((float)((float)((float)(*(float *)(v139 + v133 - 12)
                                                                            * v137[v133 / 4 + v132])
                                                                    + (float)(*(float *)(v138 + v133 - 12) * *v145))
                                                            + (float)(*(float *)(v139 + v133 - 8) * v146[1]))
                                                    + (float)(*(float *)(v138 + v133 - 4) * v145[2]))
                                            + (float)(*(float *)(v139 + v133 - 4) * v146[2]))
                                    + (float)(*(float *)(v138 + v133) * v145[3]))
                            + (float)(*(float *)(v139 + v133) * v146[3]);
                v147 = &v146[v141];
                v148 = &v145[v141];
                *(v143 - 1) = (float)((float)((float)((float)((float)((float)(*(float *)(v138 + v133 - 12) * v146[v132])
                                                                    - (float)(*(float *)(v139 + v133 - 12) * v145[v132]))
                                                            + (float)(*(float *)(v138 + v133 - 8) * v146[v141 + 1]))
                                                    - (float)(*(float *)(v139 + v133 - 8) * v145[v141 + 1]))
                                            + (float)(*(float *)(v138 + v133 - 4) * v146[v141 + 2]))
                                    + (float)(*(float *)(v138 + v133) * v146[v141 + 3]))
                            - (float)(*(float *)(v139 + v133) * v145[v141 + 3]);
                *(v144 - 1) = (float)((float)((float)((float)((float)((float)(*(float *)(v139 + v133 - 12) * v146[v132])
                                                                    + (float)(*(float *)(v138 + v133 - 12) * v145[v132]))
                                                            + (float)(*(float *)(v138 + v133 - 8) * v145[v141 + 1]))
                                                    + (float)(*(float *)(v139 + v133 - 8) * v146[v141 + 1]))
                                            + (float)(*(float *)(v139 + v133 - 4) * v146[v141 + 2]))
                                    + (float)(*(float *)(v138 + v133) * v145[v141 + 3]))
                            + (float)(*(float *)(v139 + v133) * v146[v141 + 3]);
                v149 = v146[v132 + v132];
                v150 = &v146[v141 + v141];
                v151 = -(float)(*(float *)(v122 + 4 * v130 + v133) * v145[v132 + v132]);
                v152 = &v145[v141 + v141];
                *v143 = (float)((float)((float)((float)((float)(v151 + (float)(*(float *)(v138 + v133 - 12) * v149))
                                                      + (float)(*(float *)(v138 + v133 - 8) * v150[1]))
                                              - (float)(*(float *)(v139 + v133 - 8) * v152[1]))
                                      + (float)(*(float *)(v138 + v133 - 4) * v150[2]))
                              - (float)(*(float *)(v139 + v133 - 4) * v152[2]))
                      + (float)(*(float *)(v138 + v133) * v150[3]);
                v153 = (float)((float)((float)((float)((float)((float)(*(float *)(v139 + v133 - 12) * v147[v132])
                                                             + (float)(*(float *)(v138 + v133 - 12) * v148[v132]))
                                                     + (float)(*(float *)(v138 + v133 - 8) * v152[1]))
                                             + (float)(*(float *)(v139 + v133 - 8) * v150[1]))
                                     + (float)(*(float *)(v138 + v133 - 4) * v152[2]))
                             + (float)(*(float *)(v139 + v133 - 4) * v150[2]))
                     + (float)(*(float *)(v139 + v133) * v150[3]);
                *v144 = v153;
                v131 = (float)((float)((float)((float)((float)((float)((float)(v131
                                                                             + (float)(v140[v133 / 4 - 3]
                                                                                     * *(float *)(v138 + v133 - 12)))
                                                                     + (float)(*(float *)(v142 + v133 - 12)
                                                                             * *(float *)(v139 + v133 - 12)))
                                                             + (float)(v140[v133 / 4 - 2] * *(float *)(v138 + v133 - 8)))
                                                     + (float)(*(float *)(v142 + v133 - 8) * *(float *)(v139 + v133 - 8)))
                                             + (float)(v140[v133 / 4 - 1] * *(float *)(v138 + v133 - 4)))
                                     + (float)(*(float *)(v142 + v133 - 4) * *(float *)(v139 + v133 - 4)))
                             + (float)(v140[v133 / 4] * *(float *)(v138 + v133)))
                     + (float)(v153 * *(float *)(v139 + v133));
                v134 += v136;
                v133 += 4 * v136;
              }
              while (v134 < v132);
            }
            v130 += v132;
            v129 += *(_DWORD *)(v222 + 4 * v128++);
          }
          while (v128 != v197);
          v154 = 0;
          v202 = 0;
          v199 = 0;
          v155 = (float)(1.0 / v131) * a3[v120];
          v191 = *((_QWORD *)this + 15);
          v189 = v211 + 2;
          v190 = *((_QWORD *)this + 16);
          v187 = v211 + 3;
          v188 = v123 + 3;
          v185 = v208 + 12;
          v186 = v205 + 12;
          do
          {
            v196 = v154;
            v156 = *(unsigned int *)(v191 + 4 * v154);
            if ((int)v156 >= 1)
            {
              v157 = 0;
              v158 = 0;
              v159 = v202 + 2 * v156;
              v160 = *((int *)this + 68);
              v226 = &v189[v159 + (int)v156];
              v219 = &__Ba[v199];
              v216 = &v188[v159 + (int)v156];
              v212 = *((_QWORD *)this + 19) + 12;
              v214 = *((_QWORD *)this + 20) + 12;
              v206 = &v188[v159];
              v209 = &v187[v159];
              v161 = &v187[(int)v156 + v202];
              v162 = &v188[(int)v156 + v202];
              v163 = &v188[v202];
              v164 = v186 + 4 * v199;
              v165 = v185 + 4 * v199;
              v166 = v193 + 4 * v199;
              do
              {
                v167 = (float *)(v212 + v157);
                *(v167 - 3) = v155 * v219[v157 / 4 - 3];
                v168 = -(float)(*(float *)(v166 + v157 - 12) * v155);
                v169 = (float *)(v214 + v157);
                *(v169 - 3) = v168;
                v170 = (float *)(v165 + v157);
                *(v170 - 3) = (float)((float)(*(float *)(v212 + v157 - 12) * realp[v120])
                                    + (float)(*((float *)this + 26) * *(float *)(v165 + v157 - 12)))
                            - (float)(v168 * imagp[v120]);
                v171 = (float *)(v164 + v157);
                *(v171 - 3) = (float)((float)(*(float *)(v214 + v157 - 12) * realp[v120])
                                    + (float)(*((float *)this + 26) * *(float *)(v164 + v157 - 12)))
                            + (float)(*(float *)(v212 + v157 - 12) * imagp[v120]);
                v172 = &v163[v157 / 4];
                v173 = &v162[v157 / 4];
                *(v172 - 3) = (float)(v163[v157 / 4 - 3] - (float)(*(float *)(v212 + v157 - 12) * v219[v157 / 4 - 3]))
                            + (float)(*(float *)(v214 + v157 - 12) * *(float *)(v166 + v157 - 12));
                *(v173 - 3) = (float)(v162[v157 / 4 - 3] - (float)(*(float *)(v212 + v157 - 12) * v219[v157 / 4 - 2]))
                            + (float)(*(float *)(v214 + v157 - 12) * *(float *)(v166 + v157 - 8));
                v174 = &v161[v157 / 4];
                *(v174 - 3) = (float)(v161[v157 / 4 - 3]
                                    - (float)(*(float *)(v212 + v157 - 12) * *(float *)(v166 + v157 - 8)))
                            - (float)(*(float *)(v214 + v157 - 12) * v219[v157 / 4 - 2]);
                *(v172 - 2) = v162[v157 / 4 - 3];
                v175 = &v187[v202 + v157 / 4];
                v176 = &v206[v157 / 4];
                *(v175 - 2) = -v161[v157 / 4 - 3];
                *(v176 - 3) = (float)(*(v176 - 3) - (float)(*(float *)(v212 + v157 - 12) * v219[v157 / 4 - 1]))
                            + (float)(*(float *)(v214 + v157 - 12) * *(float *)(v166 + v157 - 4));
                v177 = &v209[v157 / 4];
                *(v177 - 3) = (float)(v209[v157 / 4 - 3]
                                    - (float)(*(float *)(v212 + v157 - 12) * *(float *)(v166 + v157 - 4)))
                            - (float)(*(float *)(v214 + v157 - 12) * v219[v157 / 4 - 1]);
                *(v172 - 1) = v206[v157 / 4 - 3];
                *(v175 - 1) = -v209[v157 / 4 - 3];
                v178 = &v216[v157 / 4];
                *(v178 - 3) = (float)(*(v178 - 3) - (float)(*(float *)(v212 + v157 - 12) * v219[v157 / 4]))
                            + (float)(*(float *)(v214 + v157 - 12) * *(float *)(v166 + v157));
                v179 = &v226[v157 / 4];
                *(v179 - 2) = (float)(*(v179 - 2) - (float)(*(float *)(v212 + v157 - 12) * *(float *)(v166 + v157)))
                            - (float)(*(float *)(v214 + v157 - 12) * v219[v157 / 4]);
                *v172 = v216[v157 / 4 - 3];
                *v175 = -v226[v157 / 4 - 2];
                *(v167 - 2) = v155 * v219[v157 / 4 - 2];
                v180 = -(float)(*(float *)(v166 + v157 - 8) * v155);
                *(v169 - 2) = v180;
                *(v170 - 2) = (float)((float)(*(float *)(v212 + v157 - 8) * realp[v120])
                                    + (float)(*((float *)this + 26) * *(float *)(v165 + v157 - 8)))
                            - (float)(v180 * imagp[v120]);
                *(v171 - 2) = (float)((float)(*(float *)(v214 + v157 - 8) * realp[v120])
                                    + (float)(*((float *)this + 26) * *(float *)(v164 + v157 - 8)))
                            + (float)(*(float *)(v212 + v157 - 8) * imagp[v120]);
                *(v173 - 2) = (float)(v162[v157 / 4 - 2] - (float)(*(float *)(v212 + v157 - 8) * v219[v157 / 4 - 2]))
                            + (float)(*(float *)(v214 + v157 - 8) * *(float *)(v166 + v157 - 8));
                *(v176 - 2) = (float)(*(v176 - 2) - (float)(*(float *)(v212 + v157 - 8) * v219[v157 / 4 - 1]))
                            + (float)(*(float *)(v214 + v157 - 8) * *(float *)(v166 + v157 - 4));
                *(v177 - 2) = (float)(*(v177 - 2) - (float)(*(float *)(v212 + v157 - 8) * *(float *)(v166 + v157 - 4)))
                            - (float)(*(float *)(v214 + v157 - 8) * v219[v157 / 4 - 1]);
                *(v173 - 1) = v206[v157 / 4 - 2];
                *(v174 - 1) = -v209[v157 / 4 - 2];
                *(v178 - 2) = (float)(*(v178 - 2) - (float)(*(float *)(v212 + v157 - 8) * v219[v157 / 4]))
                            + (float)(*(float *)(v214 + v157 - 8) * *(float *)(v166 + v157));
                *(v179 - 1) = (float)(*(v179 - 1) - (float)(*(float *)(v212 + v157 - 8) * *(float *)(v166 + v157)))
                            - (float)(*(float *)(v214 + v157 - 8) * v219[v157 / 4]);
                *v173 = v216[v157 / 4 - 2];
                *v174 = -v226[v157 / 4 - 1];
                *(v167 - 1) = v155 * v219[v157 / 4 - 1];
                v181 = -(float)(*(float *)(v166 + v157 - 4) * v155);
                *(v169 - 1) = v181;
                *(v170 - 1) = (float)((float)(*(float *)(v212 + v157 - 4) * realp[v120])
                                    + (float)(*((float *)this + 26) * *(float *)(v165 + v157 - 4)))
                            - (float)(v181 * imagp[v120]);
                *(v171 - 1) = (float)((float)(*(float *)(v214 + v157 - 4) * realp[v120])
                                    + (float)(*((float *)this + 26) * *(float *)(v164 + v157 - 4)))
                            + (float)(*(float *)(v212 + v157 - 4) * imagp[v120]);
                *(v176 - 1) = (float)(*(v176 - 1) - (float)(*(float *)(v212 + v157 - 4) * v219[v157 / 4 - 1]))
                            + (float)(*(float *)(v214 + v157 - 4) * *(float *)(v166 + v157 - 4));
                *(v178 - 1) = (float)(*(v178 - 1) - (float)(*(float *)(v212 + v157 - 4) * v219[v157 / 4]))
                            + (float)(*(float *)(v214 + v157 - 4) * *(float *)(v166 + v157));
                *v179 = (float)(*v179 - (float)(*(float *)(v212 + v157 - 4) * *(float *)(v166 + v157)))
                      - (float)(*(float *)(v214 + v157 - 4) * v219[v157 / 4]);
                *v176 = v216[v157 / 4 - 1];
                *v177 = -v226[v157 / 4];
                *v167 = v155 * v219[v157 / 4];
                v182 = -(float)(*(float *)(v166 + v157) * v155);
                *v169 = v182;
                *v170 = (float)((float)(*(float *)(v212 + v157) * realp[v120])
                              + (float)(*((float *)this + 26) * *(float *)(v165 + v157)))
                      - (float)(v182 * imagp[v120]);
                *v171 = (float)((float)(*(float *)(v214 + v157) * realp[v120])
                              + (float)(*((float *)this + 26) * *(float *)(v164 + v157)))
                      + (float)(*(float *)(v212 + v157) * imagp[v120]);
                *v178 = (float)(v216[v157 / 4] - (float)(*(float *)(v212 + v157) * v219[v157 / 4]))
                      + (float)(*(float *)(v214 + v157) * *(float *)(v166 + v157));
                v158 += v160;
                v157 += 4 * v160;
              }
              while (v158 < v156);
            }
            v199 += v156;
            v202 += *(_DWORD *)(v190 + 4 * v196);
            v154 = v196 + 1;
          }
          while (v196 + 1 != v197);
        }
        ++v120;
      }
      while (v120 < *((int *)this + 15));
    }
  }
}

uint64_t *ecRMGS::ec_state_reset(ecRMGS *this)
{
  unint64_t v2;
  unint64_t v3;
  void *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v19;
  int v20;

  v2 = *((_QWORD *)this + 13);
  if (v2)
  {
    v19 = *((_QWORD *)this + 12);
    v20 = 0;
    std::__fill_n[abi:ne180100]<true,std::vector<BOOL>>(&v19, v2);
  }
  v3 = *((_QWORD *)this + 16);
  if (v3)
  {
    v19 = *((_QWORD *)this + 15);
    v20 = 0;
    std::__fill_n[abi:ne180100]<true,std::vector<BOOL>>(&v19, v3);
  }
  v4 = (void *)*((_QWORD *)this + 18);
  v5 = *((_QWORD *)this + 19) - (_QWORD)v4;
  if (v5 >= 1)
    bzero(v4, 4 * (((unint64_t)v5 >> 2) - ((unint64_t)v5 > 3)) + 4);
  v6 = (void *)*((_QWORD *)this + 21);
  v7 = *((_QWORD *)this + 22) - (_QWORD)v6;
  if (v7 >= 1)
    bzero(v6, 4 * (((unint64_t)v7 >> 2) - ((unint64_t)v7 > 3)) + 4);
  ecutils::fcn_vector_fill<float>(*((_QWORD *)this + 24), *((_QWORD *)this + 25), 0.0);
  v8 = (void *)*((_QWORD *)this + 27);
  v9 = *((_QWORD *)this + 28) - (_QWORD)v8;
  if (v9 >= 1)
    bzero(v8, 4 * (((unint64_t)v9 >> 2) - ((unint64_t)v9 > 3)) + 4);
  v10 = (void *)*((_QWORD *)this + 30);
  v11 = *((_QWORD *)this + 31) - (_QWORD)v10;
  if (v11 >= 1)
    bzero(v10, 4 * (((unint64_t)v11 >> 2) - ((unint64_t)v11 > 3)) + 4);
  v12 = (void *)*((_QWORD *)this + 33);
  v13 = *((_QWORD *)this + 34) - (_QWORD)v12;
  if (v13 >= 1)
    memset_pattern16(v12, &unk_1B6627B80, 4 * (((unint64_t)v13 >> 2) - ((unint64_t)v13 > 3)) + 4);
  v14 = (void *)*((_QWORD *)this + 39);
  v15 = *((_QWORD *)this + 40) - (_QWORD)v14;
  if (v15 >= 1)
    bzero(v14, 4 * (((unint64_t)v15 >> 2) - ((unint64_t)v15 > 3)) + 4);
  ecutils::fcn_vector_fill<float>(*((_QWORD *)this + 45), *((_QWORD *)this + 46), 1.0);
  v16 = (void *)*((_QWORD *)this + 42);
  v17 = *((_QWORD *)this + 43) - (_QWORD)v16;
  if (v17 >= 1)
    memset_pattern16(v16, &unk_1B6627B80, 4 * (((unint64_t)v17 >> 2) - ((unint64_t)v17 > 3)) + 4);
  ecutils::fcn_vector_fill<float>(*((_QWORD *)this + 48), *((_QWORD *)this + 49), 0.0);
  ecutils::fcn_vector_fill<float>((uint64_t *)this + 51, 0.0);
  ecutils::fcn_vector_fill<float>((uint64_t *)this + 54, 0.0);
  ecutils::fcn_vector_fill<float>((uint64_t *)this + 57, 0.0);
  ecutils::fcn_vector_fill<float>(*((_QWORD *)this + 63), *((_QWORD *)this + 64), 0.0);
  ecutils::fcn_vector_fill<float>((uint64_t *)this + 60, 0.0);
  ecutils::fcn_vector_fill<float>((uint64_t *)this + 66);
  ecutils::fcn_vector_fill<float>((uint64_t *)this + 69);
  ecutils::fcn_vector_fill<float>((uint64_t *)this + 72);
  ecutils::fcn_vector_fill<float>((uint64_t *)this + 75);
  return ecutils::fcn_vector_fill<float>((uint64_t *)this + 78, *((float *)this + 4));
}

uint64_t ecutils::fcn_vector_fill<float>(uint64_t result, uint64_t a2, float a3)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  float *v6;
  uint64_t v7;
  unint64_t v8;

  if (a2 != result)
  {
    v3 = 0;
    v4 = (a2 - result) / 24;
    if (v4 <= 1)
      v4 = 1;
    do
    {
      v5 = result + 24 * v3;
      v6 = *(float **)v5;
      v7 = *(_QWORD *)(v5 + 8) - *(_QWORD *)v5;
      if (v7 >= 1)
      {
        v8 = ((unint64_t)v7 >> 2) + 1;
        do
        {
          *v6++ = a3;
          --v8;
        }
        while (v8 > 1);
      }
      ++v3;
    }
    while (v3 != v4);
  }
  return result;
}

uint64_t *ecutils::fcn_vector_fill<float>(uint64_t *result, float a2)
{
  uint64_t v2;
  uint64_t *v4;
  uint64_t v5;
  unint64_t v6;

  v2 = *result;
  if (result[1] != *result)
  {
    v4 = result;
    v5 = 0;
    v6 = 0;
    do
    {
      result = (uint64_t *)ecutils::fcn_vector_fill<float>(*(_QWORD *)(v2 + v5), *(_QWORD *)(v2 + v5 + 8), a2);
      ++v6;
      v2 = *v4;
      v5 += 24;
    }
    while (0xAAAAAAAAAAAAAAABLL * ((v4[1] - *v4) >> 3) > v6);
  }
  return result;
}

uint64_t *ecutils::fcn_vector_fill<float>(uint64_t *result)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  unint64_t v4;

  v1 = *result;
  if (result[1] != *result)
  {
    v2 = result;
    v3 = 0;
    v4 = 0;
    do
    {
      result = ecutils::fcn_vector_fill<float>((uint64_t *)(v1 + v3), 0.0);
      ++v4;
      v1 = *v2;
      v3 += 24;
    }
    while (0xAAAAAAAAAAAAAAABLL * ((v2[1] - *v2) >> 3) > v4);
  }
  return result;
}

void std::vector<std::shared_ptr<IR::SharedIRBuses::IRBus>>::resize(char **a1, unint64_t a2, _QWORD *a3)
{
  char *v5;
  char *v6;
  unint64_t v7;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  uint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  char *v20;
  char *v21;
  __int128 v22;
  int64x2_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  unint64_t *v27;
  unint64_t v28;
  uint64_t v29;
  void *v30;

  v5 = a1[1];
  v6 = *a1;
  v7 = (v5 - *a1) >> 4;
  if (a2 <= v7)
  {
    if (a2 < v7)
    {
      v24 = &v6[16 * a2];
      while (v5 != v24)
        v5 = (char *)std::shared_ptr<vp::services::Telephony_Utility>::~shared_ptr[abi:ne180100]((uint64_t)(v5 - 16));
      a1[1] = v24;
    }
  }
  else
  {
    v9 = a1[2];
    if (a2 - v7 <= (v9 - v5) >> 4)
    {
      v25 = &v5[16 * (a2 - v7)];
      do
      {
        v26 = a3[1];
        *(_QWORD *)v5 = *a3;
        *((_QWORD *)v5 + 1) = v26;
        if (v26)
        {
          v27 = (unint64_t *)(v26 + 8);
          do
            v28 = __ldxr(v27);
          while (__stxr(v28 + 1, v27));
        }
        v5 += 16;
      }
      while (v5 != v25);
      a1[1] = v25;
    }
    else
    {
      if (a2 >> 60)
        std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
      v10 = v9 - v6;
      v11 = v10 >> 3;
      if (v10 >> 3 <= a2)
        v11 = a2;
      if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF0)
        v12 = 0xFFFFFFFFFFFFFFFLL;
      else
        v12 = v11;
      if (v12 >> 60)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v13 = (char *)operator new(16 * v12);
      v14 = &v13[16 * v7];
      v15 = &v13[16 * a2];
      v16 = v14;
      do
      {
        v17 = a3[1];
        *(_QWORD *)v16 = *a3;
        *((_QWORD *)v16 + 1) = v17;
        if (v17)
        {
          v18 = (unint64_t *)(v17 + 8);
          do
            v19 = __ldxr(v18);
          while (__stxr(v19 + 1, v18));
        }
        v16 += 16;
      }
      while (v16 != v15);
      v21 = *a1;
      v20 = a1[1];
      if (v20 == *a1)
      {
        v23 = vdupq_n_s64((unint64_t)v20);
      }
      else
      {
        do
        {
          v22 = *((_OWORD *)v20 - 1);
          v20 -= 16;
          *((_OWORD *)v14 - 1) = v22;
          v14 -= 16;
          *(_QWORD *)v20 = 0;
          *((_QWORD *)v20 + 1) = 0;
        }
        while (v20 != v21);
        v23 = *(int64x2_t *)a1;
      }
      *a1 = v14;
      a1[1] = v15;
      a1[2] = &v13[16 * v12];
      v29 = v23.i64[1];
      v30 = (void *)v23.i64[0];
      while ((void *)v29 != v30)
        v29 = std::shared_ptr<vp::services::Telephony_Utility>::~shared_ptr[abi:ne180100](v29 - 16);
      if (v30)
        operator delete(v30);
    }
  }
}

void IR::SharedIRBuses::checkForAppliedChanges(IR::SharedIRBuses *this)
{
  char **v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unsigned __int8 v7;
  unsigned __int8 v8;
  uint64_t v9;
  IR::SharedIRBuses *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD v14[2];

  v3 = *((_QWORD *)this + 12);
  v4 = *((_QWORD *)this + 13);
  v2 = (char **)((char *)this + 96);
  v5 = (v4 - v3) >> 4;
  v6 = *((unsigned int *)v2 + 32);
  if (v5 != v6)
  {
    v14[0] = 0;
    v14[1] = 0;
    std::vector<std::shared_ptr<IR::SharedIRBuses::IRBus>>::resize(v2, v6, v14);
    v5 = *((unsigned int *)this + 56);
  }
  if (v5 != (uint64_t)(*((_QWORD *)this + 16) - *((_QWORD *)this + 15)) >> 2)
  {
    LODWORD(v14[0]) = 0;
    std::vector<float>::resize((uint64_t)this + 120, v5, v14);
  }
  v7 = atomic_load((unsigned __int8 *)this + 144);
  if ((v7 & 1) != 0)
  {
    v8 = atomic_load((unsigned __int8 *)this + 146);
    if ((v8 & 1) != 0)
      v9 = 48;
    else
      v9 = 0;
    if ((v8 & 1) != 0)
      v10 = (IR::SharedIRBuses *)((char *)this + 48);
    else
      v10 = this;
    v11 = *((_QWORD *)v10 + 1) - *(_QWORD *)((char *)this + v9);
    if ((uint64_t)(*((_QWORD *)this + 13) - *((_QWORD *)this + 12)) >> 4 >= (unint64_t)(v11 >> 4))
      v12 = v11 >> 4;
    else
      v12 = (uint64_t)(*((_QWORD *)this + 13) - *((_QWORD *)this + 12)) >> 4;
    if (v12)
    {
      v13 = 0;
      do
      {
        std::shared_ptr<clsp::CLSPKernel_Logs>::operator=[abi:ne180100]((_QWORD *)(*((_QWORD *)this + 12) + v13), *(_QWORD *)(*(_QWORD *)((char *)this + v9) + v13), *(_QWORD *)(*(_QWORD *)((char *)this + v9) + v13 + 8));
        v13 += 16;
        --v12;
      }
      while (v12);
    }
    atomic_store(0, (unsigned __int8 *)this + 144);
  }
}

void sub_1B63E7CC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<vp::services::Telephony_Utility>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t IR::SharedIRBuses::setNumInputChannels(uint64_t this, int a2)
{
  uint64_t v3;
  uint64_t v4;
  char v5;

  if (*(_DWORD *)(this + 224) != a2)
  {
    v3 = this;
    v4 = this + 148;
    v5 = 1;
    caulk::pooled_semaphore_mutex::_lock((caulk::pooled_semaphore_mutex *)(this + 148));
    *(_DWORD *)(v3 + 224) = a2;
    IR::SharedIRBuses::checkForAppliedChanges((IR::SharedIRBuses *)v3);
    atomic_store(1u, (unsigned __int8 *)(v3 + 145));
    return std::unique_lock<caulk::pooled_semaphore_mutex>::~unique_lock[abi:ne180100]((uint64_t)&v4);
  }
  return this;
}

void sub_1B63E7D44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::unique_lock<caulk::pooled_semaphore_mutex>::~unique_lock[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t IR::SharedIRBuses::reset(IR::SharedIRBuses *this)
{
  uint64_t *v2;
  uint64_t *i;
  uint64_t v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t *j;
  uint64_t v10;
  char *v12;
  char v13;

  v12 = (char *)this + 148;
  v13 = 1;
  caulk::pooled_semaphore_mutex::_lock((IR::SharedIRBuses *)((char *)this + 148));
  IR::SharedIRBuses::checkForAppliedChanges(this);
  IR::SharedIRBuses::markAllBusesAsNotProcessed((uint64_t *)this);
  v2 = (uint64_t *)*((_QWORD *)this + 12);
  for (i = (uint64_t *)*((_QWORD *)this + 13); v2 != i; v2 += 2)
  {
    v4 = *v2;
    if (*v2 && !*(_BYTE *)(v4 + 8))
    {
      IR::DynamicIRProcessor::reset((IR::DynamicIRProcessor *)(v4 + 16));
      IR::FixedIntegerDelay::reset((IR::FixedIntegerDelay *)(*v2 + 512));
      ParametricFilters::reset((ParametricFilters *)(*v2 + 312));
      *(_BYTE *)(*v2 + 8) = 1;
    }
  }
  v5 = *(uint64_t **)this;
  v6 = (uint64_t *)*((_QWORD *)this + 1);
  if (*(uint64_t **)this != v6)
  {
    do
    {
      v7 = *v5;
      if (*v5 && !*(_BYTE *)(v7 + 8))
      {
        IR::DynamicIRProcessor::reset((IR::DynamicIRProcessor *)(v7 + 16));
        IR::FixedIntegerDelay::reset((IR::FixedIntegerDelay *)(*v5 + 512));
        ParametricFilters::reset((ParametricFilters *)(*v5 + 312));
        *(_BYTE *)(*v5 + 8) = 1;
      }
      v5 += 2;
    }
    while (v5 != v6);
  }
  v8 = (uint64_t *)*((_QWORD *)this + 6);
  for (j = (uint64_t *)*((_QWORD *)this + 7); v8 != j; v8 += 2)
  {
    v10 = *v8;
    if (*v8 && !*(_BYTE *)(v10 + 8))
    {
      IR::DynamicIRProcessor::reset((IR::DynamicIRProcessor *)(v10 + 16));
      IR::FixedIntegerDelay::reset((IR::FixedIntegerDelay *)(*v8 + 512));
      ParametricFilters::reset((ParametricFilters *)(*v8 + 312));
      *(_BYTE *)(*v8 + 8) = 1;
    }
  }
  atomic_store(1u, (unsigned __int8 *)this + 145);
  *((_BYTE *)this + 229) = 1;
  return std::unique_lock<caulk::pooled_semaphore_mutex>::~unique_lock[abi:ne180100]((uint64_t)&v12);
}

void sub_1B63E7EBC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::unique_lock<caulk::pooled_semaphore_mutex>::~unique_lock[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t *IR::SharedIRBuses::markAllBusesAsNotProcessed(uint64_t *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = *this;
  v2 = this[1];
  while (v1 != v2)
  {
    if (*(_QWORD *)v1)
      *(_BYTE *)(*(_QWORD *)v1 + 8) = 0;
    v1 += 16;
  }
  v3 = this[25];
  v4 = this[26];
  while (v3 != v4)
  {
    if (*(_QWORD *)v3)
      *(_BYTE *)(*(_QWORD *)v3 + 8) = 0;
    v3 += 16;
  }
  v5 = this[6];
  v6 = this[7];
  while (v5 != v6)
  {
    if (*(_QWORD *)v5)
      *(_BYTE *)(*(_QWORD *)v5 + 8) = 0;
    v5 += 16;
  }
  return this;
}

void IR::DynamicIRProcessor::~DynamicIRProcessor(IR::DynamicIRProcessor *this)
{
  uint64_t v2;
  _QWORD *v3;

  std::shared_ptr<vp::services::Telephony_Utility>::~shared_ptr[abi:ne180100]((uint64_t)this + 248);
  std::__tree<std::__value_type<unsigned int,unsigned int>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,unsigned int>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,unsigned int>>>::destroy(*((_QWORD **)this + 24));
  IR::IRDataAttributes::~IRDataAttributes((IR::DynamicIRProcessor *)((char *)this + 24));
  v2 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = *(_QWORD **)this;
  *(_QWORD *)this = 0;
  if (v3)
    (*(void (**)(_QWORD *))(*v3 + 8))(v3);
}

void std::__shared_ptr_emplace<IR::SharedIRBuses::IRBus>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E69DA870;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<IR::SharedIRBuses::IRBus>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E69DA870;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1BCC95CECLL);
}

uint64_t std::__shared_ptr_emplace<IR::SharedIRBuses::IRBus>::__on_zero_shared(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  uint64_t v5;
  uint64_t result;

  v2 = *(void **)(a1 + 568);
  if (v2)
  {
    *(_QWORD *)(a1 + 576) = v2;
    operator delete(v2);
  }
  v3 = *(void **)(a1 + 544);
  if (v3)
  {
    *(_QWORD *)(a1 + 552) = v3;
    operator delete(v3);
  }
  ParametricFilters::~ParametricFilters((void **)(a1 + 336));
  v4 = *(void **)(a1 + 312);
  if (v4)
  {
    *(_QWORD *)(a1 + 320) = v4;
    operator delete(v4);
  }
  std::shared_ptr<vp::services::Telephony_Utility>::~shared_ptr[abi:ne180100](a1 + 288);
  std::__tree<std::__value_type<unsigned int,unsigned int>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,unsigned int>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,unsigned int>>>::destroy(*(_QWORD **)(a1 + 232));
  IR::IRDataAttributes::~IRDataAttributes((IR::IRDataAttributes *)(a1 + 64));
  v5 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 48) = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  result = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 40) = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t IR::SharedIRBuses::reconfigure(uint64_t a1, unsigned int a2, uint64_t *a3, const void **a4)
{
  unsigned __int8 v5;
  __int16 v6;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  int v13;
  uint64_t *v14;
  uint64_t *i;
  uint64_t v16;
  unsigned __int8 v17;
  uint64_t v18;
  int v19;
  int v20;
  uint64_t v21;
  char *v22;
  int v23;
  float v24;
  unint64_t v25;
  unsigned int v26;
  unsigned int v27;
  __int128 v28;
  std::__shared_weak_count *v29;
  unint64_t *p_shared_owners;
  unint64_t v31;
  const void *v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  CFTypeRef v37[2];
  char v38;
  CFTypeRef v39;
  CFTypeRef v40;
  CFTypeRef cf;
  __int128 v42;
  uint64_t v43;
  uint64_t v44;
  char v45;
  __int128 v46;
  CFTypeRef v47;
  __int16 v48;
  _BYTE v49[6];
  char v50;
  unsigned int v51;
  CFTypeRef v52;
  CFTypeRef v53;
  CFTypeRef v54;
  int v55;
  uint64_t v56;

  v56 = *MEMORY[0x1E0C80C00];
  if (*(_DWORD *)(a1 + 240))
  {
    v5 = atomic_load((unsigned __int8 *)(a1 + 228));
    if ((v5 & 1) != 0)
    {
      v44 = a1 + 148;
      v45 = 1;
      caulk::pooled_semaphore_mutex::_lock((caulk::pooled_semaphore_mutex *)(a1 + 148));
      v10 = *(_DWORD *)(a1 + 224);
      if (v10 <= a2)
      {
        if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
        {
          LODWORD(v47) = 67109376;
          HIDWORD(v47) = a2;
          v48 = 1024;
          *(_DWORD *)v49 = v10;
          _os_log_error_impl(&dword_1B5ED0000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "Reconfiguring non-existent SharedIRBus channel %u. Total number of channels = %u", (uint8_t *)&v47, 0xEu);
        }
        v6 = -10877;
      }
      else
      {
        IR::SharedIRBuses::checkForAppliedChanges((IR::SharedIRBuses *)a1);
        if (*a3)
        {
          IR::IRDataAttributes::IRDataAttributes((uint64_t)&v47, *a3);
        }
        else
        {
          v43 = 0;
          IR::IRDataAttributes::IRDataAttributes((uint64_t)&v47, 0, 128, 1, *(float *)(a1 + 236));
        }
        if (v50)
        {
          v11 = *(_DWORD *)&v49[2];
          if (*(_DWORD *)&v49[2])
          {
            if (v51 > *(_DWORD *)&v49[2])
            {
              v50 = 0;
              v12 = v51 >> 1;
              if (v51 >> 1 > 0x2000)
                v12 = 8193;
              if (*(_DWORD *)&v49[2] < v12)
              {
                v13 = v55;
                do
                {
                  v11 *= 2;
                  v13 *= 2;
                }
                while (v11 < v12);
                *(_DWORD *)&v49[2] = v11;
                v55 = v13;
              }
            }
          }
        }
        v42 = 0uLL;
        v14 = *(uint64_t **)(a1 + 96);
        for (i = *(uint64_t **)(a1 + 104); v14 != i; v14 += 2)
        {
          v16 = *v14;
          if (!*v14 || *(_DWORD *)(v16 + 504) != *(_DWORD *)(a1 + 232))
            continue;
          v37[0] = (CFTypeRef)(v16 + 280);
          LOBYTE(v37[1]) = 1;
          caulk::pooled_semaphore_mutex::_lock((caulk::pooled_semaphore_mutex *)(v16 + 280));
          v17 = atomic_load((unsigned __int8 *)(v16 + 248));
          if ((v17 & 1) != 0 && (v18 = *(_QWORD *)(v16 + 24)) != 0 || (v18 = *(_QWORD *)(v16 + 16)) != 0)
          {
            v19 = *(unsigned __int8 *)(v18 + 416);
            std::unique_lock<caulk::pooled_semaphore_mutex>::~unique_lock[abi:ne180100]((uint64_t)v37);
            if (!v19)
              continue;
          }
          else
          {
            std::unique_lock<caulk::pooled_semaphore_mutex>::~unique_lock[abi:ne180100]((uint64_t)v37);
          }
          IR::IRDataAttributes::IRDataAttributes((uint64_t)v37, *v14 + 40);
          v20 = IR::IRDataAttributes::operator==((uint64_t)v37, (uint64_t)&v47);
          if (cf)
            CFRelease(cf);
          if (v40)
            CFRelease(v40);
          if (v39)
            CFRelease(v39);
          if (v37[0])
            CFRelease(v37[0]);
          if (v20)
          {
            std::shared_ptr<clsp::CLSPKernel_Logs>::operator=[abi:ne180100](&v42, *v14, v14[1]);
            break;
          }
        }
        v21 = v42;
        if (!(_QWORD)v42)
        {
          v22 = (char *)operator new(0x250uLL);
          *(_OWORD *)(v22 + 8) = 0u;
          *(_QWORD *)v22 = &off_1E69DA870;
          v23 = *(_DWORD *)(a1 + 232);
          v24 = *(float *)(a1 + 236);
          v25 = *(unsigned int *)(a1 + 240);
          *((_QWORD *)v22 + 3) = 0;
          v22[32] = 0;
          v46 = 0u;
          IR::DynamicIRProcessor::DynamicIRProcessor((uint64_t)(v22 + 40), (uint64_t)&v47, 1, 0, 0, &v46, 0.0);
          *((_QWORD *)v22 + 39) = 0;
          *((_QWORD *)v22 + 40) = 0;
          *((_QWORD *)v22 + 41) = 0;
          std::string::basic_string[abi:ne180100]<0>(v37, "");
          ParametricFilters::ParametricFilters((uint64_t)(v22 + 336), v23, 1, 5, (__int128 *)v37, v24);
          if (v38 < 0)
            operator delete((void *)v37[0]);
          *((_DWORD *)v22 + 132) = v23;
          v26 = v51 - *(_DWORD *)&v49[2];
          if (v51 < *(_DWORD *)&v49[2])
            v26 = 0;
          if (v50)
            v27 = v51;
          else
            v27 = v26;
          IR::FixedIntegerDelay::FixedIntegerDelay((IR::FixedIntegerDelay *)(v22 + 536), v27, 1);
          std::vector<float>::resize((uint64_t)(v22 + 312), v25);
          IR::DynamicIRProcessor::initialize((IR::DynamicIRProcessor *)(v22 + 40), v24, v25);
          *(_QWORD *)&v28 = v22 + 24;
          *((_QWORD *)&v28 + 1) = v22;
          v29 = (std::__shared_weak_count *)*((_QWORD *)&v42 + 1);
          v42 = v28;
          if (v29)
          {
            p_shared_owners = (unint64_t *)&v29->__shared_owners_;
            do
              v31 = __ldaxr(p_shared_owners);
            while (__stlxr(v31 - 1, p_shared_owners));
            if (!v31)
            {
              ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
              std::__shared_weak_count::__release_weak(v29);
            }
          }
          v21 = v42;
        }
        v32 = *a4;
        if (v32)
          CFRetain(v32);
        IR::SharedIRBuses::IRBus::setParametricFiltersCoeffs(v21, v32);
        if (v32)
          CFRelease(v32);
        std::shared_ptr<clsp::CLSPKernel_Logs>::operator=[abi:ne180100]((_QWORD *)(*(_QWORD *)(a1 + 96) + 16 * a2), v42, *((uint64_t *)&v42 + 1));
        atomic_store(1u, (unsigned __int8 *)(a1 + 145));
        v33 = (std::__shared_weak_count *)*((_QWORD *)&v42 + 1);
        if (*((_QWORD *)&v42 + 1))
        {
          v34 = (unint64_t *)(*((_QWORD *)&v42 + 1) + 8);
          do
            v35 = __ldaxr(v34);
          while (__stlxr(v35 - 1, v34));
          if (!v35)
          {
            ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
            std::__shared_weak_count::__release_weak(v33);
          }
        }
        if (v54)
          CFRelease(v54);
        if (v53)
          CFRelease(v53);
        if (v52)
          CFRelease(v52);
        if (v47)
          CFRelease(v47);
        v6 = 0;
      }
      std::unique_lock<caulk::pooled_semaphore_mutex>::~unique_lock[abi:ne180100]((uint64_t)&v44);
      return v6;
    }
  }
  return -10867;
}

void sub_1B63E8528(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32,uint64_t a33,uint64_t a34,char a35,int a36,__int16 a37,char a38,char a39,uint64_t a40,char a41,uint64_t a42,char a43)
{
  std::__shared_weak_count *v43;
  IR::DynamicIRProcessor *v44;
  void **v45;
  void **v46;
  void *v48;
  void *v49;

  ParametricFilters::~ParametricFilters(v46);
  v48 = *v45;
  if (*v45)
  {
    v43[13].__shared_owners_ = (uint64_t)v48;
    operator delete(v48);
  }
  IR::DynamicIRProcessor::~DynamicIRProcessor(v44);
  std::__shared_weak_count::~__shared_weak_count(v43);
  operator delete(v49);
  std::shared_ptr<vp::services::Telephony_Utility>::~shared_ptr[abi:ne180100]((uint64_t)&a32);
  IR::IRDataAttributes::~IRDataAttributes((IR::IRDataAttributes *)&a43);
  std::unique_lock<caulk::pooled_semaphore_mutex>::~unique_lock[abi:ne180100]((uint64_t)&a37);
  _Unwind_Resume(a1);
}

void IR::SharedIRBuses::IRBus::setParametricFiltersCoeffs(uint64_t a1, const void *a2)
{
  _QWORD v4[3];
  CFDictionaryRef v5;

  if (a2)
  {
    CFRetain(a2);
    v5 = (CFDictionaryRef)a2;
    memset(v4, 0, sizeof(v4));
    ParametricFilters::setParametricFilters(a1 + 312, &v5, (uint64_t)v4);
    CFRelease(a2);
  }
  else
  {
    ParametricFilters::clear((ParametricFilters *)(a1 + 312));
  }
}

void sub_1B63E868C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  applesauce::CF::DictionaryRef::~DictionaryRef((const void **)va);
  _Unwind_Resume(a1);
}

void IR::SharedIRBuses::setParametricFiltersCoeffs(uint64_t a1, unsigned int a2, const void **a3)
{
  unsigned __int8 v4;
  uint64_t v7;
  const void *v8;
  uint8_t buf[8];
  char v10;

  if (*(_DWORD *)(a1 + 224))
  {
    if (*(_DWORD *)(a1 + 240))
    {
      v4 = atomic_load((unsigned __int8 *)(a1 + 228));
      if ((v4 & 1) != 0)
      {
        if (*(_DWORD *)(a1 + 224) <= a2)
        {
          if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
          {
            *(_WORD *)buf = 0;
            _os_log_error_impl(&dword_1B5ED0000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "Setting parametric filter coeffs on non-existent SharedIRBus channel", buf, 2u);
          }
        }
        else
        {
          *(_QWORD *)buf = a1 + 148;
          v10 = 1;
          caulk::pooled_semaphore_mutex::_lock((caulk::pooled_semaphore_mutex *)(a1 + 148));
          IR::SharedIRBuses::checkForAppliedChanges((IR::SharedIRBuses *)a1);
          v7 = *(_QWORD *)(*(_QWORD *)(a1 + 96) + 16 * a2);
          if (v7)
          {
            v8 = *a3;
            if (v8)
              CFRetain(v8);
            IR::SharedIRBuses::IRBus::setParametricFiltersCoeffs(v7, v8);
            if (v8)
              CFRelease(v8);
            atomic_store(1u, (unsigned __int8 *)(a1 + 145));
          }
          std::unique_lock<caulk::pooled_semaphore_mutex>::~unique_lock[abi:ne180100]((uint64_t)buf);
        }
      }
    }
  }
}

void sub_1B63E87BC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  const void *v3;
  va_list va;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, const void *);
  applesauce::CF::DictionaryRef::~DictionaryRef((const void **)va);
  std::unique_lock<caulk::pooled_semaphore_mutex>::~unique_lock[abi:ne180100]((uint64_t)va1);
  _Unwind_Resume(a1);
}

void IR::SharedIRBuses::sumToBus(IR::SharedIRBuses *this, const float *__A, unsigned int a3, vDSP_Length __N, float a5)
{
  unsigned __int8 v5;
  unsigned int v6;
  unint64_t v9;
  __int128 v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t v13;
  __int128 v14;
  unint64_t *v15;
  unint64_t v16;
  unsigned __int8 v17;
  uint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *p_shared_owners;
  unint64_t v21;
  unsigned __int8 v22;
  uint64_t v23;
  float v24;
  uint64_t v25;
  unint64_t *v26;
  unint64_t v27;
  unint64_t *v28;
  unint64_t v29;
  __int128 v30;
  __int128 v31;
  float __Step;
  float __B;

  v5 = atomic_load((unsigned __int8 *)this + 228);
  if ((v5 & 1) == 0)
    return;
  v6 = __N;
  v9 = a3;
  if (a3 >= (unint64_t)((uint64_t)(*((_QWORD *)this + 1) - *(_QWORD *)this) >> 4))
  {
    v31 = 0uLL;
  }
  else
  {
    v10 = *(_OWORD *)(*(_QWORD *)this + 16 * a3);
    v31 = v10;
    if (*((_QWORD *)&v10 + 1))
    {
      v11 = (unint64_t *)(*((_QWORD *)&v10 + 1) + 8);
      do
        v12 = __ldxr(v11);
      while (__stxr(v12 + 1, v11));
    }
  }
  v13 = *((_QWORD *)this + 6);
  if (a3 >= (unint64_t)((*((_QWORD *)this + 7) - v13) >> 4))
  {
    v30 = 0uLL;
  }
  else
  {
    v14 = *(_OWORD *)(v13 + 16 * a3);
    v30 = v14;
    if (*((_QWORD *)&v14 + 1))
    {
      v15 = (unint64_t *)(*((_QWORD *)&v14 + 1) + 8);
      do
        v16 = __ldxr(v15);
      while (__stxr(v16 + 1, v15));
    }
  }
  v17 = atomic_load((unsigned __int8 *)this + 146);
  if ((v17 & 1) != 0 && (_QWORD)v30)
  {
    if ((_QWORD)v30 == (_QWORD)v31)
      goto LABEL_26;
    v18 = *(_QWORD *)(*((_QWORD *)this + 6) + 16 * a3);
    if (*((_BYTE *)this + 229))
    {
      __B = 1.0;
      vDSP_vsma(__A, 1, &__B, *(const float **)(v18 + 288), 1, *(float **)(v18 + 288), 1, __N);
      v19 = (std::__shared_weak_count *)*((_QWORD *)&v31 + 1);
      v31 = 0uLL;
      if (v19)
      {
        p_shared_owners = (unint64_t *)&v19->__shared_owners_;
        do
          v21 = __ldaxr(p_shared_owners);
        while (__stlxr(v21 - 1, p_shared_owners));
        if (!v21)
        {
          ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
          std::__shared_weak_count::__release_weak(v19);
        }
      }
    }
    else
    {
      __B = 0.0;
      __Step = 1.0 / (float)__N;
      vDSP_vrampmuladd(__A, 1, &__B, &__Step, *(float **)(v18 + 288), 1, __N);
    }
    *(_DWORD *)(*((_QWORD *)this + 9) + 4 * v9) = 1065353216;
  }
  if ((_QWORD)v31)
  {
LABEL_26:
    v22 = atomic_load((unsigned __int8 *)this + 146);
    if ((v22 & 1) == 0)
    {
      v23 = v31;
      goto LABEL_32;
    }
    v23 = v31;
    if ((_QWORD)v30)
    {
      if ((_QWORD)v30 != (_QWORD)v31)
      {
        __B = *(float *)(*((_QWORD *)this + 3) + 4 * v9);
        __Step = (float)(0.0 - __B) / (float)v6;
        vDSP_vrampmuladd(__A, 1, &__B, &__Step, *(float **)(v31 + 288), 1, v6);
        goto LABEL_35;
      }
      v23 = v30;
    }
LABEL_32:
    v24 = *(float *)(*((_QWORD *)this + 3) + 4 * v9);
    if (v24 == 1.0)
    {
      __B = 1.0;
      vDSP_vsma(__A, 1, &__B, *(const float **)(v23 + 288), 1, *(float **)(v23 + 288), 1, v6);
    }
    else
    {
      __B = *(float *)(*((_QWORD *)this + 3) + 4 * v9);
      __Step = (float)(1.0 - v24) / (float)v6;
      vDSP_vrampmuladd(__A, 1, &__B, &__Step, *(float **)(v23 + 288), 1, v6);
    }
  }
LABEL_35:
  v25 = *((_QWORD *)this + 3);
  if (v9 < (*((_QWORD *)this + 4) - v25) >> 2)
    *(_DWORD *)(v25 + 4 * v9) = 1065353216;
  if (*((_QWORD *)&v30 + 1))
  {
    v26 = (unint64_t *)(*((_QWORD *)&v30 + 1) + 8);
    do
      v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
    if (!v27)
    {
      (*(void (**)(_QWORD))(**((_QWORD **)&v30 + 1) + 16))(*((_QWORD *)&v30 + 1));
      std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v30 + 1));
    }
  }
  if (*((_QWORD *)&v31 + 1))
  {
    v28 = (unint64_t *)(*((_QWORD *)&v31 + 1) + 8);
    do
      v29 = __ldaxr(v28);
    while (__stlxr(v29 - 1, v28));
    if (!v29)
    {
      (*(void (**)(_QWORD))(**((_QWORD **)&v31 + 1) + 16))(*((_QWORD *)&v31 + 1));
      std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v31 + 1));
    }
  }
}

void sub_1B63E8AFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  std::shared_ptr<vp::services::Telephony_Utility>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<vp::services::Telephony_Utility>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  _Unwind_Resume(a1);
}

uint64_t *IR::SharedIRBuses::processIndividualBus(uint64_t *result, float **a2, const float **a3, float **a4, uint64_t a5, vDSP_Length a6, unsigned int *a7)
{
  uint64_t v7;
  uint64_t *v14;
  const float *v15;
  const float *v16;
  float *v17;
  uint64_t v18;
  unsigned int v19;
  int v20;
  unsigned int v21;

  v7 = *result;
  if (*result && !*(_BYTE *)(v7 + 8))
  {
    v14 = result;
    IR::FixedIntegerDelay::process((IR::FixedIntegerDelay *)(v7 + 512), *(float **)(v7 + 288), *(float **)(v7 + 288), a6);
    IR::DynamicIRProcessor::processInternal((int8x16_t *)(v7 + 16), *(const float **)(v7 + 288), a3, a5, a6, 1.0, a2, 0, 0);
    ParametricFilters::process(v7 + 312, (float *const *)a3, 0, a6, a2);
    bzero(*(void **)(v7 + 288), 4 * a6);
    if ((_DWORD)a5)
    {
      a5 = a5;
      do
      {
        v16 = *a3++;
        v15 = v16;
        v17 = *a4++;
        vDSP_vadd(v15, 1, v17, 1, v17, 1, a6);
        --a5;
      }
      while (a5);
    }
    v18 = *v14;
    *(_BYTE *)(v18 + 8) = 1;
    v19 = atomic_load((unsigned int *)(v18 + 260));
    v20 = *(_DWORD *)(v18 + 512);
    result = (uint64_t *)ParametricFilters::getTailLength((ParametricFilters *)(v18 + 312));
    v21 = v20 + (_DWORD)result + v19;
    if (*a7 > v21)
      v21 = *a7;
    *a7 = v21;
  }
  return result;
}

void IR::SharedIRBuses::process(IR::SharedIRBuses *this, float **a2, uint64_t a3, vDSP_Length a4, float a5, unsigned int *a6)
{
  unsigned __int8 v7;
  unint64_t v11;
  uint64_t v12;
  size_t v13;
  uint64_t v14;
  const float **v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  size_t v19;
  _QWORD *v20;
  void **v21;
  void *v22;
  uint64_t *v23;
  uint64_t *v24;
  float **v25;
  vDSP_Length v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t *v29;
  uint64_t v30;
  unsigned __int8 v31;
  int v32;
  uint64_t *v33;
  uint64_t *v34;
  uint64_t *v35;
  uint64_t *v36;
  uint64_t v37;
  __int128 v38;
  _DWORD *v39;
  _QWORD *i;
  unsigned int v42;
  uint64_t *v43;
  uint64_t *v44;
  uint64_t v45;
  uint64_t v46;
  int *v47;
  _DWORD *v48;
  __int128 v49;
  __int128 v50;
  unint64_t v51;
  int v52;
  vDSP_Length v53;
  float v54;
  float v55;
  unsigned int v56;
  const float **v57;
  uint64_t v58;
  unsigned int v59;
  uint64_t v60;
  unsigned int *v61;
  uint64_t v62;
  char *v63;
  vDSP_Length v64;
  float __Start;
  float __Step;
  caulk::pooled_semaphore_mutex *v67;
  char v68;
  unsigned int v69;
  float __B;
  uint64_t v71;

  v71 = *MEMORY[0x1E0C80C00];
  __B = a5;
  v7 = atomic_load((unsigned __int8 *)this + 228);
  if ((v7 & 1) == 0)
  {
    if (a6)
      *a6 = 0;
    return;
  }
  v64 = a4;
  v69 = 0;
  v11 = 8 * a3;
  MEMORY[0x1E0C80A78](this);
  v12 = (v11 + 15) & 0xFFFFFFFF0;
  if (v11 >= 0x200)
    v13 = 512;
  else
    v13 = v11;
  v63 = (char *)&v60 - v12;
  bzero((char *)&v60 - v12, v13);
  MEMORY[0x1E0C80A78](v14);
  v15 = (const float **)((char *)&v60 - v12);
  bzero((char *)&v60 - v12, v13);
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)this + 20) - *((_QWORD *)this + 19)) >> 3) < a3)
    __assert_rtn("process", "SharedIRBuses.cpp", 408, "mScratchBuffers.size() >= inNumOutputChannels");
  v16 = a3;
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)this + 23) - *((_QWORD *)this + 22)) >> 3) < a3)
    __assert_rtn("process", "SharedIRBuses.cpp", 409, "mAccumulationBuffers.size() >= inNumOutputChannels");
  v60 = (uint64_t)&v60;
  v61 = a6;
  v62 = a3;
  if ((_DWORD)a3)
  {
    v17 = 0;
    v18 = v63;
    v19 = 4 * v64;
    v20 = (uint64_t *)((char *)&v60 - v12);
    v21 = (void **)a2;
    do
    {
      *v18++ = *(_QWORD *)(*((_QWORD *)this + 19) + v17);
      *v20++ = *(_QWORD *)(*((_QWORD *)this + 22) + v17);
      v22 = *v21++;
      bzero(v22, v19);
      v17 += 24;
    }
    while (24 * v16 != v17);
  }
  IR::SharedIRBuses::markAllBusesAsNotProcessed((uint64_t *)this);
  v24 = *(uint64_t **)this;
  v23 = (uint64_t *)*((_QWORD *)this + 1);
  v25 = (float **)v63;
  v26 = v64;
  v27 = v62;
  if (*(uint64_t **)this != v23)
  {
    do
    {
      IR::SharedIRBuses::processIndividualBus(v24, v25, v15, a2, v27, v26, &v69);
      v24 += 2;
    }
    while (v24 != v23);
  }
  v28 = (uint64_t *)*((_QWORD *)this + 25);
  v29 = (uint64_t *)*((_QWORD *)this + 26);
  while (v28 != v29)
  {
    v30 = *v28;
    if (*v28 && *(int *)(v30 + 4) >= 1 && !*(_BYTE *)(v30 + 8))
    {
      IR::SharedIRBuses::processIndividualBus(v28, v25, v15, a2, v27, v26, &v69);
      *(_DWORD *)(*v28 + 4) -= v26;
    }
    v28 += 2;
  }
  v67 = (IR::SharedIRBuses *)((char *)this + 148);
  v68 = 0;
  v31 = atomic_load((unsigned __int8 *)this + 146);
  if ((v31 & 1) != 0)
  {
    if (!v67)
    {
      std::__throw_system_error(1, "unique_lock::try_lock: references null mutex");
      __break(1u);
      return;
    }
    v32 = caulk::pooled_semaphore_mutex::try_lock(v67);
    v68 = v32;
    if (v32)
    {
      v34 = (uint64_t *)*((_QWORD *)this + 6);
      v33 = (uint64_t *)*((_QWORD *)this + 7);
      if (v34 == v33)
      {
        v35 = (uint64_t *)*((_QWORD *)this + 6);
      }
      else
      {
        do
        {
          IR::SharedIRBuses::processIndividualBus(v34, v25, v15, a2, v27, v26, &v69);
          v34 += 2;
        }
        while (v34 != v33);
        v35 = (uint64_t *)*((_QWORD *)this + 6);
        v34 = (uint64_t *)*((_QWORD *)this + 7);
      }
      v36 = *(uint64_t **)this;
      *((_QWORD *)this + 6) = *(_QWORD *)this;
      v37 = *((_QWORD *)this + 8);
      v38 = *(_OWORD *)((char *)this + 8);
      *(_QWORD *)this = v35;
      *((_QWORD *)this + 1) = v34;
      *((_QWORD *)this + 2) = v37;
      *(_OWORD *)((char *)this + 56) = v38;
      while (v35 != v34)
      {
        if (*v35)
          ++*(_DWORD *)*v35;
        v35 += 2;
      }
      while (v36 != (uint64_t *)v38)
      {
        v39 = (_DWORD *)*v36;
        if (*v36)
        {
          if ((*v39)-- == 1)
          {
            for (i = (_QWORD *)*((_QWORD *)this + 25); i != *((_QWORD **)this + 26); i += 2)
            {
              if ((_DWORD *)*i == v39)
                goto LABEL_36;
            }
            v42 = atomic_load(v39 + 65);
            *(_DWORD *)(*v36 + 4) = v42;
            v43 = (uint64_t *)*((_QWORD *)this + 25);
            v44 = (uint64_t *)*((_QWORD *)this + 26);
            while (v43 != v44)
            {
              v45 = *v43;
              *v43 = *v36;
              *v36 = v45;
              v46 = v43[1];
              v43[1] = v36[1];
              v36[1] = v46;
              v43 += 2;
            }
          }
        }
LABEL_36:
        v36 += 2;
      }
      v47 = (int *)*((_QWORD *)this + 3);
      v48 = (_DWORD *)*((_QWORD *)this + 9);
      *((_QWORD *)this + 3) = v48;
      *((_QWORD *)this + 9) = v47;
      v49 = *((_OWORD *)this + 5);
      v50 = *((_OWORD *)this + 2);
      *((_OWORD *)this + 2) = v49;
      *((_OWORD *)this + 5) = v50;
      v51 = (uint64_t)(v50 - (_QWORD)v47) >> 2;
      if (v51 >= (uint64_t)(v49 - (_QWORD)v48) >> 2)
        v51 = (uint64_t)(v49 - (_QWORD)v48) >> 2;
      for (; v51; --v51)
      {
        v52 = *v47++;
        *v48++ = v52;
      }
      atomic_store(0, (unsigned __int8 *)this + 146);
    }
  }
  if (*((_BYTE *)this + 229))
  {
    v53 = 0;
    *((float *)this + 62) = __B;
    if (!(_DWORD)v26)
      goto LABEL_64;
    goto LABEL_62;
  }
  v54 = *((float *)this + 62);
  v55 = __B;
  if (v54 != __B)
  {
    v56 = *((_DWORD *)this + 63);
    if (v56 >= v26)
      v53 = v26;
    else
      v53 = v56;
    __Step = (float)(__B - v54) / (float)v53;
    if ((_DWORD)v27)
    {
      v57 = (const float **)a2;
      v58 = v16;
      do
      {
        __Start = *((float *)this + 62);
        vDSP_vrampmul(*v57, 1, &__Start, &__Step, (float *)*v57, 1, v53);
        ++v57;
        --v58;
      }
      while (v58);
    }
    *((float *)this + 62) = v55;
    LODWORD(v26) = v26 - v53;
    LODWORD(v27) = v62;
    if (!(_DWORD)v26)
      goto LABEL_64;
    goto LABEL_62;
  }
  v53 = 0;
  if ((_DWORD)v26)
  {
LABEL_62:
    if ((_DWORD)v27)
    {
      do
      {
        vDSP_vsmul(&(*a2)[v53], 1, &__B, &(*a2)[v53], 1, v26);
        ++a2;
        --v16;
      }
      while (v16);
    }
  }
LABEL_64:
  v59 = v69;
  *((_DWORD *)this + 61) = v69;
  *((_BYTE *)this + 229) = 0;
  if (v61)
    *v61 = v59;
  std::unique_lock<caulk::pooled_semaphore_mutex>::~unique_lock[abi:ne180100]((uint64_t)&v67);
}

void sub_1B63E9198(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::unique_lock<caulk::pooled_semaphore_mutex>::~unique_lock[abi:ne180100](v1 - 128);
  _Unwind_Resume(a1);
}

_QWORD *std::vector<std::vector<DSPComplex>>::vector(_QWORD *a1, unint64_t a2, uint64_t a3)
{
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    v6 = std::__allocate_at_least[abi:ne180100]<std::allocator<std::__fs::filesystem::path>>((uint64_t)(a1 + 2), a2);
    *a1 = v6;
    a1[1] = v6;
    a1[2] = &v6[3 * v7];
    v8 = 3 * a2;
    v9 = &v6[3 * a2];
    v10 = 8 * v8;
    do
    {
      *v6 = 0;
      v6[1] = 0;
      v6[2] = 0;
      std::vector<DSPComplex>::__init_with_size[abi:ne180100]<DSPComplex*,DSPComplex*>(v6, *(const void **)a3, *(_QWORD *)(a3 + 8), (uint64_t)(*(_QWORD *)(a3 + 8) - *(_QWORD *)a3) >> 3);
      v6 += 3;
      v10 -= 24;
    }
    while (v10);
    a1[1] = v9;
  }
  return a1;
}

void sub_1B63E9268(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

void MCLP_FRLS_vDSP::ProcessBufferList(MCLP_FRLS_vDSP *this, const AudioBufferList *a2, const AudioBufferList *a3, AudioBufferList *a4, AudioBufferList *a5, int a6, int a7, int a8)
{
  unint64_t v13;
  unint64_t v14;
  void **p_mData;
  float v16;
  const float *v17;
  unint64_t v19;
  void **v20;
  void **v21;
  void *v22;
  void *v23;
  void *v24;
  unint64_t v25;
  unint64_t v27;
  void **v28;
  void **v29;
  void *v30;
  void *v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unsigned int v36;
  int v37;
  void **v38;
  float *v39;
  uint64_t v40;
  _DWORD *v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  unsigned int v45;
  unsigned int v46;
  char *v47;
  _DWORD *v48;
  _DWORD **v49;
  _DWORD *v50;
  uint64_t v51;
  uint64_t v52;
  int v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unsigned int v57;
  unsigned int v58;
  int v59;
  unsigned int v60;
  int v61;
  int v62;
  unsigned int v63;
  vDSP_Length v64;
  uint64_t v65;
  float *v66;
  float *v67;
  int v68;
  vDSP_Length v69;
  uint64_t v70;
  float *v71;
  vDSP_Length v72;
  uint64_t v73;
  uint64_t v74;
  float *v75;
  unsigned int v76;
  unsigned int v77;
  unsigned int i;
  vDSP_Length __N;
  uint64_t v80;
  int v81;
  unsigned int v82;
  uint64_t v83;
  int v84;
  vDSP_Length v85;
  uint64_t v86;
  float *v87;
  vDSP_Length v88;
  uint64_t v89;
  uint64_t v90;
  float *v91;
  unsigned int v92;
  unsigned int v93;
  unsigned int j;
  vDSP_Length v95;
  uint64_t v96;
  uint64_t v97;
  int v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  unsigned int v102;
  unsigned int v103;
  vDSP_Length v104;
  uint64_t v105;
  unsigned int v106;
  uint64_t v107;
  unsigned int v108;
  unint64_t v109;
  void **v110;
  char *v111;
  unint64_t v112;
  void **v113;
  char *v114;
  int v118;
  int v119;
  float *v120;
  float *__B;
  float *v122;
  DSPSplitComplex v123;
  DSPSplitComplex v124;
  DSPSplitComplex v125;
  DSPSplitComplex __D;
  DSPSplitComplex v127;
  DSPSplitComplex __C;
  DSPSplitComplex __A;

  LODWORD(v13) = *((_DWORD *)this + 7);
  if ((_DWORD)v13)
  {
    v14 = 0;
    p_mData = &a2->mBuffers[0].mData;
    v16 = 0.0;
    do
    {
      v17 = (const float *)*p_mData;
      p_mData += 2;
      v16 = cblas_sdsdot(2 * *((_DWORD *)this + 8) - 2, v16, v17, 1, v17, 1);
      ++v14;
      v13 = *((unsigned int *)this + 7);
    }
    while (v14 < v13);
  }
  else
  {
    v16 = 0.0;
  }
  if (v16 > *((float *)this + 4) && (LODWORD(v16) & 0x7FFFFFFFu) <= 0x7F7FFFFF)
  {
    v122 = (float *)((char *)this + 64);
    vDSP_vfill((const float *)this + 16, *((float **)this + 78), 1, *((unsigned int *)this + 8));
    memcpy((void *)(*((_QWORD *)this + 15) + 8 * (*((_DWORD *)this + 13) * *((_DWORD *)this + 23))), *(const void **)(*((_QWORD *)this + 12) + 24 * *((unsigned int *)this + 22)), 8 * *((unsigned int *)this + 13));
    v33 = *((unsigned int *)this + 22);
    v34 = *((_QWORD *)this + 12);
    if (*((_DWORD *)this + 7))
    {
      v35 = 0;
      v36 = *((_DWORD *)this + 8);
      v37 = *((_DWORD *)this + 10);
      v38 = &a2->mBuffers[0].mData;
      do
      {
        v39 = (float *)((char *)*v38 + 4 * v36);
        __A.realp = (float *)((char *)*v38 + 4);
        __A.imagp = v39;
        __C.realp = 0;
        __C.imagp = 0;
        v40 = *(_QWORD *)(v34 + 24 * v33);
        __C.realp = (float *)(v40 + 8 * v36 * v35 + 4);
        __C.imagp = (float *)(v40 + 8 * (v36 * v35 + v37 + 1));
        vDSP_zvmov(&__A, 1, &__C, 1, v36 - 2);
        v41 = *v38;
        v38 += 2;
        v33 = *((unsigned int *)this + 22);
        v34 = *((_QWORD *)this + 12);
        v36 = *((_DWORD *)this + 8);
        v42 = *(_QWORD *)(v34 + 24 * v33);
        *(_DWORD *)(v42 + 8 * v36 * v35) = *v41;
        v37 = *((_DWORD *)this + 10);
        *(_DWORD *)(v42 + 8 * (v37 + v36 * v35++)) = v41[v36 - 1];
      }
      while (v35 < *((unsigned int *)this + 7));
    }
    vDSP_vsmul(*(const float **)(v34 + 24 * v33), 1, (const float *)this + 19, *(float **)(v34 + 24 * v33), 1, (2 * *((_DWORD *)this + 13)));
    memcpy(*((void **)this + 45), *(const void **)(*((_QWORD *)this + 12) + 24 * *((unsigned int *)this + 22)), 8 * *((unsigned int *)this + 13));
    if ((a6 & 1) != 0)
    {
      memcpy((void *)(*((_QWORD *)this + 36) + 8 * (*((_DWORD *)this + 13) * *((_DWORD *)this + 23))), *(const void **)(*((_QWORD *)this + 33) + 24 * *((unsigned int *)this + 22)), 8 * *((unsigned int *)this + 13));
      v43 = *((unsigned int *)this + 7);
      if ((_DWORD)v43)
      {
        v44 = 0;
        v45 = *((_DWORD *)this + 8);
        do
        {
          if (v45)
          {
            v46 = 0;
            v47 = (char *)a3 + 16 * v44;
            v50 = (_DWORD *)*((_QWORD *)v47 + 2);
            v49 = (_DWORD **)(v47 + 16);
            v48 = v50;
            v51 = *((unsigned int *)this + 22);
            v52 = *((_QWORD *)this + 33);
            v53 = *((_DWORD *)this + 10);
            do
            {
              __A.realp = (float *)(v48 + 1);
              __A.imagp = (float *)&v48[v45];
              __C.realp = 0;
              __C.imagp = 0;
              v54 = *(_QWORD *)(v52 + 24 * v51);
              __C.realp = (float *)(v54 + 8 * v45 * v44 + 4);
              __C.imagp = (float *)(v54 + 8 * (v45 * v44 + v53 + 1));
              vDSP_zvmov(&__A, 1, &__C, 1, v45 - 2);
              v48 = *v49;
              v51 = *((unsigned int *)this + 22);
              v52 = *((_QWORD *)this + 33);
              v45 = *((_DWORD *)this + 8);
              v55 = *(_QWORD *)(v52 + 24 * v51);
              *(_DWORD *)(v55 + 8 * v45 * v44) = **v49;
              v53 = *((_DWORD *)this + 10);
              *(_DWORD *)(v55 + 8 * (v53 + v45 * v44)) = v48[v45 - 1];
              ++v46;
            }
            while (v46 < v45);
            v43 = *((unsigned int *)this + 7);
          }
          ++v44;
        }
        while (v44 < v43);
      }
      vDSP_vsmul(*(const float **)(*((_QWORD *)this + 33) + 24 * *((unsigned int *)this + 22)), 1, (const float *)this + 19, *(float **)(*((_QWORD *)this + 33) + 24 * *((unsigned int *)this + 22)), 1, (2 * *((_DWORD *)this + 13)));
      memcpy(*((void **)this + 87), *(const void **)(*((_QWORD *)this + 33) + 24 * *((unsigned int *)this + 22)), 8 * *((unsigned int *)this + 13));
    }
    v56 = *((unsigned int *)this + 10);
    __A.realp = (float *)*((_QWORD *)this + 60);
    __A.imagp = &__A.realp[2 * v56 + 1];
    __C.realp = (float *)*((_QWORD *)this + 63);
    __C.imagp = &__C.realp[2 * v56 + 1];
    v57 = *((_DWORD *)this + 21);
    v58 = *((_DWORD *)this + 12);
    if (v57 >= v58)
      v59 = *((_DWORD *)this + 12);
    else
      v59 = *((_DWORD *)this + 21);
    if (v59)
    {
      v60 = 0;
      v120 = (float *)((char *)this + 72);
      __B = (float *)((char *)this + 68);
      do
      {
        v61 = *((_DWORD *)this + 23);
        v62 = v61 - v60;
        if ((int)(v61 - v60) < 0)
          v62 = v61 + v58 + (int)v60 / (int)v58 * v58 - v60;
        v118 = v62;
        v119 = v58;
        if (*((_DWORD *)this + 7))
        {
          v63 = 0;
          do
          {
            v64 = *((unsigned int *)this + 8);
            v65 = *((_QWORD *)this + 45);
            v66 = (float *)(v65 + 8 * (*((_DWORD *)this + 10) + v64 * v63) + 4);
            v127.realp = (float *)(v65 + 8 * v64 * v63);
            v127.imagp = v66;
            v67 = (float *)*((_QWORD *)this + 72);
            if (v63)
              vDSP_zvmgsa(&v127, 1, v67, 1, *((float **)this + 72), 1, v64);
            else
              vDSP_zvmags(&v127, 1, v67, 1, v64);
            ++v63;
          }
          while (v63 < *((_DWORD *)this + 7));
        }
        vDSP_vsmul(*((const float **)this + 72), 1, __B, *((float **)this + 72), 1, *((unsigned int *)this + 8));
        vDSP_vthr(*((const float **)this + 72), 1, (const float *)this + 4, *((float **)this + 72), 1, *((unsigned int *)this + 8));
        vDSP_svdiv(v120, *((const float **)this + 72), 1, *((float **)this + 66), 1, *((unsigned int *)this + 8));
        vDSP_vfill(v122, *((float **)this + 81), 1, *((unsigned int *)this + 8));
        memcpy(*((void **)this + 48), *((const void **)this + 45), 8 * *((unsigned int *)this + 13));
        if (*((_DWORD *)this + 7))
        {
          v68 = 0;
          do
          {
            v69 = *((unsigned int *)this + 8);
            v70 = *((_QWORD *)this + 48);
            v71 = (float *)(v70 + 8 * (*((_DWORD *)this + 10) + v69 * v68) + 4);
            v127.realp = (float *)(v70 + 8 * (v69 * v68));
            v127.imagp = v71;
            vDSP_zvmags(&v127, 1, *((float **)this + 51), 1, v69);
            vDSP_vmul(*((const float **)this + 81), 1, *((const float **)this + 66), 1, *((float **)this + 84), 1, *((unsigned int *)this + 8));
            v72 = *((unsigned int *)this + 8);
            if (a7)
            {
              v73 = *((_DWORD *)this + 13) * v60 + (_DWORD)v72 * v68;
              v74 = *((_QWORD *)this + 27);
              v75 = (float *)(v74 + 4 * v73);
            }
            else
            {
              v75 = (float *)*((_QWORD *)this + 39);
              v74 = *((_QWORD *)this + 27);
              v73 = *((_DWORD *)this + 13) * v60 + (_DWORD)v72 * v68;
            }
            vDSP_vsmul((const float *)(v74 + 4 * v73), 1, (const float *)this + 5, v75, 1, v72);
            vDSP_vma(*((const float **)this + 51), 1, *((const float **)this + 84), 1, v75, 1, v75, 1, *((unsigned int *)this + 8));
            vDSP_vthr(v75, 1, (const float *)this + 4, v75, 1, *((unsigned int *)this + 8));
            vDSP_vdiv(v75, 1, *((const float **)this + 84), 1, *((float **)this + 84), 1, *((unsigned int *)this + 8));
            vDSP_vneg(*((const float **)this + 84), 1, *((float **)this + 84), 1, *((unsigned int *)this + 8));
            vDSP_zrvmul(&v127, 1, *((const float **)this + 84), 1, &__A, 1, *((unsigned int *)this + 8));
            vDSP_zvconj(&__A, 1, &__A, 1, *((unsigned int *)this + 8));
            vDSP_vmul(*((const float **)this + 84), 1, *((const float **)this + 51), 1, *((float **)this + 75), 1, *((unsigned int *)this + 8));
            vDSP_vsadd(*((const float **)this + 75), 1, v122, *((float **)this + 75), 1, *((unsigned int *)this + 8));
            vDSP_vthr(*((const float **)this + 75), 1, (const float *)this + 15, *((float **)this + 75), 1, *((unsigned int *)this + 8));
            vDSP_vmul(*((const float **)this + 81), 1, *((const float **)this + 75), 1, *((float **)this + 81), 1, *((unsigned int *)this + 8));
            v76 = v68 + 1;
            v77 = *((_DWORD *)this + 7);
            for (i = v68 + 1; i < v77; v77 = *((_DWORD *)this + 7))
            {
              __N = *((unsigned int *)this + 8);
              v80 = *((_QWORD *)this + 48);
              v81 = *((_DWORD *)this + 10);
              __D.realp = (float *)(v80 + 8 * __N * i);
              __D.imagp = (float *)(v80 + 8 * (v81 + __N * i) + 4);
              v82 = __N * i + *((_DWORD *)this + 14) * v60 + *((_DWORD *)this + 13) * v68;
              v83 = *((_QWORD *)this + 18);
              v125.realp = (float *)(v83 + 8 * v82);
              v125.imagp = (float *)(v83 + 8 * (v82 + v81) + 4);
              vDSP_zvma(&v125, 1, &v127, 1, &__D, 1, &__D, 1, __N);
              if (a7)
                vDSP_zvma(&__D, 1, &__A, 1, &v125, 1, &v125, 1, *((unsigned int *)this + 8));
              ++i;
            }
            ++v68;
          }
          while (v76 < v77);
        }
        vDSP_vneg(*((const float **)this + 81), 1, *((float **)this + 81), 1, *((unsigned int *)this + 8));
        vDSP_vsadd(*((const float **)this + 81), 1, v122, *((float **)this + 81), 1, *((unsigned int *)this + 8));
        vDSP_vmul(*((const float **)this + 72), 1, *((const float **)this + 81), 1, *((float **)this + 72), 1, *((unsigned int *)this + 8));
        vDSP_vsmul(*((const float **)this + 72), 1, __B, *((float **)this + 72), 1, *((unsigned int *)this + 8));
        vDSP_vsdiv(*((const float **)this + 72), 1, v120, *((float **)this + 72), 1, *((unsigned int *)this + 8));
        vDSP_vthr(*((const float **)this + 72), 1, (const float *)this + 4, *((float **)this + 72), 1, *((unsigned int *)this + 8));
        vDSP_svdiv(v120, *((const float **)this + 72), 1, *((float **)this + 66), 1, *((unsigned int *)this + 8));
        memcpy(*((void **)this + 54), (const void *)(*((_QWORD *)this + 15) + 8 * (*((_DWORD *)this + 13) * (v118 % v119))), 8 * *((unsigned int *)this + 13));
        memcpy((void *)(*((_QWORD *)this + 54) + 8 * *((unsigned int *)this + 13)), *((const void **)this + 45), 8 * *((unsigned int *)this + 13));
        if ((a6 & 1) != 0)
        {
          memcpy(*((void **)this + 90), (const void *)(*((_QWORD *)this + 36) + 8 * (*((_DWORD *)this + 13) * (v118 % v119))), 8 * *((unsigned int *)this + 13));
          memcpy((void *)(*((_QWORD *)this + 90) + 8 * *((unsigned int *)this + 13)), *((const void **)this + 87), 8 * *((unsigned int *)this + 13));
        }
        if (*((_DWORD *)this + 7))
        {
          v84 = 0;
          do
          {
            v85 = *((unsigned int *)this + 8);
            v86 = *((_QWORD *)this + 54);
            v87 = (float *)(v86 + 8 * (*((_DWORD *)this + 10) + v85 * v84) + 4);
            v127.realp = (float *)(v86 + 8 * (v85 * v84));
            v127.imagp = v87;
            vDSP_zvmags(&v127, 1, *((float **)this + 57), 1, v85);
            v88 = *((unsigned int *)this + 8);
            if (a7)
            {
              v89 = *((_DWORD *)this + 13) * v60 + (_DWORD)v88 * v84;
              v90 = *((_QWORD *)this + 30);
              v91 = (float *)(v90 + 4 * v89);
            }
            else
            {
              v91 = (float *)*((_QWORD *)this + 42);
              v90 = *((_QWORD *)this + 30);
              v89 = *((_DWORD *)this + 13) * v60 + (_DWORD)v88 * v84;
            }
            vDSP_vsmul((const float *)(v90 + 4 * v89), 1, (const float *)this + 5, v91, 1, v88);
            vDSP_vma(*((const float **)this + 57), 1, *((const float **)this + 66), 1, v91, 1, v91, 1, *((unsigned int *)this + 8));
            vDSP_vthr(v91, 1, (const float *)this + 4, v91, 1, *((unsigned int *)this + 8));
            vDSP_vdiv(v91, 1, *((const float **)this + 66), 1, *((float **)this + 69), 1, *((unsigned int *)this + 8));
            vDSP_vneg(*((const float **)this + 69), 1, *((float **)this + 69), 1, *((unsigned int *)this + 8));
            vDSP_zrvmul(&v127, 1, *((const float **)this + 69), 1, &__C, 1, *((unsigned int *)this + 8));
            vDSP_zvconj(&__C, 1, &__C, 1, *((unsigned int *)this + 8));
            vDSP_vmul(*((const float **)this + 69), 1, *((const float **)this + 57), 1, *((float **)this + 75), 1, *((unsigned int *)this + 8));
            vDSP_vsadd(*((const float **)this + 75), 1, v122, *((float **)this + 75), 1, *((unsigned int *)this + 8));
            vDSP_vthr(*((const float **)this + 75), 1, (const float *)this + 15, *((float **)this + 75), 1, *((unsigned int *)this + 8));
            vvsqrtf(*((float **)this + 75), *((const float **)this + 75), (const int *)this + 9);
            vDSP_vmul(*((const float **)this + 78), 1, *((const float **)this + 75), 1, *((float **)this + 78), 1, *((unsigned int *)this + 8));
            v92 = v84 + 1;
            v93 = *((_DWORD *)this + 7);
            for (j = v84 + 1; j < 2 * v93; v93 = *((_DWORD *)this + 7))
            {
              v95 = *((unsigned int *)this + 8);
              v96 = v95 * j;
              v97 = *((_QWORD *)this + 54);
              v98 = *((_DWORD *)this + 10);
              v99 = (v98 + v96);
              __D.realp = (float *)(v97 + 8 * v96);
              __D.imagp = (float *)(v97 + 8 * v99 + 4);
              LODWORD(v97) = v96 + 2 * (*((_DWORD *)this + 14) * v60 + *((_DWORD *)this + 13) * v84);
              v100 = *((_QWORD *)this + 21);
              v125.realp = (float *)(v100 + 8 * v97);
              v125.imagp = (float *)(v100 + 8 * (v97 + v98) + 4);
              if (a6)
              {
                v101 = *((_QWORD *)this + 90);
                v124.realp = (float *)(v101 + 8 * (v95 * v84));
                v124.imagp = (float *)(v101 + 8 * (v98 + v95 * v84) + 4);
                v123.realp = (float *)(v101 + 8 * v96);
                v123.imagp = (float *)(v101 + 8 * v99 + 4);
                vDSP_zvma(&v125, 1, &v124, 1, &v123, 1, &v123, 1, v95);
                vDSP_zrvmul(&v123, 1, *((const float **)this + 75), 1, &v123, 1, *((unsigned int *)this + 8));
                LODWORD(v95) = *((_DWORD *)this + 8);
              }
              vDSP_zvma(&v125, 1, &v127, 1, &__D, 1, &__D, 1, v95);
              if (a7)
                vDSP_zvma(&__D, 1, &__C, 1, &v125, 1, &v125, 1, *((unsigned int *)this + 8));
              vDSP_zrvmul(&__D, 1, *((const float **)this + 75), 1, &__D, 1, *((unsigned int *)this + 8));
              ++j;
            }
            ++v84;
          }
          while (v92 < v93);
        }
        memcpy(*((void **)this + 45), (const void *)(*((_QWORD *)this + 54) + 8 * *((unsigned int *)this + 13)), 8 * *((unsigned int *)this + 13));
        if ((a6 & 1) != 0)
          memcpy(*((void **)this + 87), (const void *)(*((_QWORD *)this + 90) + 8 * *((unsigned int *)this + 13)), 8 * *((unsigned int *)this + 13));
        ++v60;
        v57 = *((_DWORD *)this + 21);
        v58 = *((_DWORD *)this + 12);
        if (v57 >= v58)
          v102 = *((_DWORD *)this + 12);
        else
          v102 = *((_DWORD *)this + 21);
      }
      while (v60 < v102);
    }
    if (a8 && *((_DWORD *)this + 7))
    {
      v103 = 0;
      do
      {
        v104 = *((unsigned int *)this + 8);
        v105 = *((_QWORD *)this + 45);
        v106 = *((_DWORD *)this + 10) + v104 * v103;
        v127.realp = (float *)(v105 + 8 * v104 * v103);
        v127.imagp = (float *)(v105 + 8 * v106 + 4);
        v107 = *((_QWORD *)this + 87);
        __D.realp = (float *)(v107 + 8 * v104 * v103);
        __D.imagp = (float *)(v107 + 8 * v106 + 4);
        vDSP_zrvmul(&v127, 1, *((const float **)this + 78), 1, &v127, 1, v104);
        vDSP_zrvmul(&__D, 1, *((const float **)this + 78), 1, &__D, 1, *((unsigned int *)this + 8));
        ++v103;
      }
      while (v103 < *((_DWORD *)this + 7));
      v58 = *((_DWORD *)this + 12);
      v57 = *((_DWORD *)this + 21);
    }
    v108 = *((_DWORD *)this + 23) + 1;
    *((_DWORD *)this + 22) = (*((_DWORD *)this + 22) + 1) % *((_DWORD *)this + 11);
    *((_DWORD *)this + 23) = v108 % v58;
    if (v57 < v58)
      *((_DWORD *)this + 21) = v57 + 1;
    vDSP_vsmul(*((const float **)this + 45), 1, (const float *)this + 20, *((float **)this + 45), 1, (2 * *((_DWORD *)this + 13)));
    if (*((_DWORD *)this + 7))
    {
      v109 = 0;
      v110 = &a4->mBuffers[0].mData;
      do
      {
        memcpy(*v110, (const void *)(*((_QWORD *)this + 45) + 8 * (*((_DWORD *)this + 8) * v109)), 4 * *((unsigned int *)this + 8));
        v111 = (char *)*v110;
        v110 += 2;
        memcpy(&v111[4 * *((unsigned int *)this + 8)], (const void *)(*((_QWORD *)this + 45)+ 8 * (*((_DWORD *)this + 10) + *((_DWORD *)this + 8) * v109++ + 1)), 4 * (*((_DWORD *)this + 8) - 2));
      }
      while (v109 < *((unsigned int *)this + 7));
    }
    if ((a6 & 1) != 0)
    {
      vDSP_vsmul(*((const float **)this + 87), 1, (const float *)this + 20, *((float **)this + 87), 1, (2 * *((_DWORD *)this + 13)));
      if (*((_DWORD *)this + 7))
      {
        v112 = 0;
        v113 = &a5->mBuffers[0].mData;
        do
        {
          memcpy(*v113, (const void *)(*((_QWORD *)this + 87) + 8 * (*((_DWORD *)this + 8) * v112)), 4 * *((unsigned int *)this + 8));
          v114 = (char *)*v113;
          v113 += 2;
          memcpy(&v114[4 * *((unsigned int *)this + 8)], (const void *)(*((_QWORD *)this + 87)+ 8 * (*((_DWORD *)this + 10) + *((_DWORD *)this + 8) * v112++ + 1)), 4 * (*((_DWORD *)this + 8) - 2));
        }
        while (v112 < *((unsigned int *)this + 7));
      }
    }
  }
  else if ((_DWORD)v13)
  {
    v19 = 0;
    v20 = &a2->mBuffers[0].mData;
    v21 = &a4->mBuffers[0].mData;
    do
    {
      v23 = *v21;
      v21 += 2;
      v22 = v23;
      v24 = *v20;
      v20 += 2;
      memcpy(v22, v24, 4 * (2 * *((_DWORD *)this + 8) - 2));
      ++v19;
      v25 = *((unsigned int *)this + 7);
    }
    while (v19 < v25);
    if ((_DWORD)v25 && a6 != 0)
    {
      v27 = 0;
      v28 = &a3->mBuffers[0].mData;
      v29 = &a5->mBuffers[0].mData;
      do
      {
        v31 = *v29;
        v29 += 2;
        v30 = v31;
        v32 = *v28;
        v28 += 2;
        memcpy(v30, v32, 4 * (2 * *((_DWORD *)this + 8) - 2));
        ++v27;
      }
      while (v27 < *((unsigned int *)this + 7));
    }
  }
}

uint64_t *std::unique_ptr<clsp::SpeakerCalibrationProperties>::reset[abi:ne180100](uint64_t *result)
{
  uint64_t v1;

  v1 = *result;
  *result = 0;
  if (v1)
  {
    std::shared_ptr<vp::services::Telephony_Utility>::~shared_ptr[abi:ne180100](v1 + 40);
    std::shared_ptr<vp::services::Telephony_Utility>::~shared_ptr[abi:ne180100](v1 + 24);
    JUMPOUT(0x1BCC95CECLL);
  }
  return result;
}

void std::default_delete<clsp::ClosedLoopParameters>::operator()[abi:ne180100](uint64_t a1)
{
  std::unique_ptr<CACFDictionary>::reset[abi:ne180100]((CACFDictionary **)(a1 + 56), 0);
  std::unique_ptr<clsp::ConvoyParameters>::reset[abi:ne180100]((uint64_t *)(a1 + 48), 0);
  JUMPOUT(0x1BCC95CECLL);
}

CACFDictionary *std::unique_ptr<CACFDictionary>::reset[abi:ne180100](CACFDictionary **a1, CACFDictionary *a2)
{
  CACFDictionary *result;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    CACFDictionary::~CACFDictionary(result);
    JUMPOUT(0x1BCC95CECLL);
  }
  return result;
}

uint64_t *std::unique_ptr<clsp::ConvoyParameters>::reset[abi:ne180100](uint64_t *result, uint64_t a2)
{
  uint64_t v2;

  v2 = *result;
  *result = a2;
  if (v2)
  {
    std::unique_ptr<CACFArray>::reset[abi:ne180100]((CACFArray **)(v2 + 96), 0);
    JUMPOUT(0x1BCC95CECLL);
  }
  return result;
}

CACFArray *std::unique_ptr<CACFArray>::reset[abi:ne180100](CACFArray **a1, CACFArray *a2)
{
  CACFArray *result;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    CACFArray::~CACFArray(result);
    JUMPOUT(0x1BCC95CECLL);
  }
  return result;
}

uint64_t clsp::DelayLine<float,double>::DelayLine(uint64_t a1, unint64_t a2, double a3, double a4, double a5)
{
  *(double *)a1 = a3;
  *(_QWORD *)(a1 + 8) = 0;
  std::vector<float>::vector((_QWORD *)(a1 + 16), vcvtad_u64_f64(a5 * 0.001 * a4));
  std::vector<float>::vector((_QWORD *)(a1 + 40), a2);
  clsp::DelayLine<float,double>::calcCoeffs((double *)a1, a4);
  return a1;
}

void sub_1B63EA344(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void **v3;
  void **v4;
  void *v6;
  void *v7;

  v4 = v3;
  v6 = *v4;
  if (*v4)
  {
    *(_QWORD *)(v1 + 48) = v6;
    operator delete(v6);
  }
  v7 = *v2;
  if (*v2)
  {
    *(_QWORD *)(v1 + 24) = v7;
    operator delete(v7);
  }
  _Unwind_Resume(exception_object);
}

void std::allocate_shared[abi:ne180100]<clsp::ParameterUpdater,std::allocator<clsp::ParameterUpdater>,CACFDictionary &,void>(CFTypeRef **a1, uint64_t a2)
{
  char *v4;
  CFTypeRef *v5;
  CFTypeRef v6;
  int v7;
  double *v8;
  double *v9;
  double *v10;
  double *v11;
  double *v12;
  double *v13;
  double *v14;
  double *v15;
  double *v16;
  double *v17;
  double *v18;
  double *v19;
  void *v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  void *v24;
  uint64_t v25;
  std::logic_error *exception;
  double v27;

  v4 = (char *)operator new(0x438uLL);
  *((_QWORD *)v4 + 1) = 0;
  *((_QWORD *)v4 + 2) = 0;
  *(_QWORD *)v4 = &off_1E69DA8E0;
  v5 = (CFTypeRef *)(v4 + 24);
  *((_QWORD *)v4 + 3) = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  *((_WORD *)v4 + 16) = 257;
  std::vector<double>::vector((_QWORD *)v4 + 125, 0xBF80uLL);
  std::vector<double>::vector((_QWORD *)v4 + 128, 0xBF80uLL);
  std::vector<double>::vector((_QWORD *)v4 + 131, 0xBF80uLL);
  if (v4[32] && *v5)
    CFRelease(*v5);
  v6 = *(CFTypeRef *)a2;
  *((_QWORD *)v4 + 3) = *(_QWORD *)a2;
  v7 = *(unsigned __int8 *)(a2 + 8);
  v4[32] = v7;
  v4[33] = *(_BYTE *)(a2 + 9);
  if (v7 && v6)
  {
    CFRetain(v6);
    v6 = *v5;
  }
  v27 = 0.0;
  if (!CACFDictionary::GetFloat64((uint64_t)v6, CFSTR("Le_order"), &v27))
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Le_order not found in inConfig");
    goto LABEL_62;
  }
  *((_DWORD *)v4 + 56) = v27;
  if (!CACFDictionary::GetFloat64(*((_QWORD *)v4 + 3), CFSTR("Bl_order"), &v27))
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Bl_order not found in inConfig");
    goto LABEL_62;
  }
  *((_DWORD *)v4 + 57) = v27;
  if (!CACFDictionary::GetFloat64(*((_QWORD *)v4 + 3), CFSTR("Km_order"), &v27))
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Km_order not found in inConfig");
    goto LABEL_62;
  }
  *((_DWORD *)v4 + 58) = v27;
  if (!CACFDictionary::GetFloat64(*((_QWORD *)v4 + 3), CFSTR("Rm_order"), &v27))
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Rm_order not found in inConfig");
    goto LABEL_62;
  }
  *((_DWORD *)v4 + 59) = v27;
  if (!CACFDictionary::GetFloat64(*((_QWORD *)v4 + 3), CFSTR("Mms"), &v27))
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Mms not found in inConfig");
    goto LABEL_62;
  }
  *((double *)v4 + 5) = v27;
  if (!CACFDictionary::GetFloat64(*((_QWORD *)v4 + 3), CFSTR("Reb"), &v27))
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Reb not found in inConfig");
    goto LABEL_62;
  }
  *((double *)v4 + 30) = v27;
  clsp::ParameterUpdater::GetArraysData((CFDictionaryRef *)v4 + 3, (const CACFDictionary *)CFSTR("Le_x"), (const __CFString *)*((unsigned int *)v4 + 56), (uint64_t)(v4 + 248), v8);
  clsp::ParameterUpdater::GetArraysData((CFDictionaryRef *)v4 + 3, (const CACFDictionary *)CFSTR("Bl_x"), (const __CFString *)*((unsigned int *)v4 + 57), (uint64_t)(v4 + 288), v9);
  clsp::ParameterUpdater::GetArraysData((CFDictionaryRef *)v4 + 3, (const CACFDictionary *)CFSTR("Km_x"), (const __CFString *)*((unsigned int *)v4 + 58), (uint64_t)(v4 + 328), v10);
  clsp::ParameterUpdater::GetArraysData((CFDictionaryRef *)v4 + 3, (const CACFDictionary *)CFSTR("Rm_u"), (const __CFString *)*((unsigned int *)v4 + 59), (uint64_t)(v4 + 368), v11);
  if (!CACFDictionary::GetFloat64((uint64_t)*v5, CFSTR("Re0"), &v27))
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Re0 not found in inConfig");
    goto LABEL_62;
  }
  *((double *)v4 + 72) = v27;
  clsp::ParameterUpdater::GetArraysData((CFDictionaryRef *)v4 + 3, (const CACFDictionary *)CFSTR("Lex"), (const __CFString *)*((unsigned int *)v4 + 56), (uint64_t)(v4 + 584), v12);
  clsp::ParameterUpdater::GetArraysData((CFDictionaryRef *)v4 + 3, (const CACFDictionary *)CFSTR("Blx"), (const __CFString *)*((unsigned int *)v4 + 57), (uint64_t)(v4 + 624), v13);
  clsp::ParameterUpdater::GetArraysData((CFDictionaryRef *)v4 + 3, (const CACFDictionary *)CFSTR("Kmx"), (const __CFString *)*((unsigned int *)v4 + 58), (uint64_t)(v4 + 664), v14);
  clsp::ParameterUpdater::GetArraysData((CFDictionaryRef *)v4 + 3, (const CACFDictionary *)CFSTR("Rmu"), (const __CFString *)*((unsigned int *)v4 + 59), (uint64_t)(v4 + 704), v15);
  if (!CACFDictionary::GetFloat64((uint64_t)*v5, CFSTR("mu_Re"), &v27))
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "mu_Re not found in inConfig");
    goto LABEL_62;
  }
  *((double *)v4 + 93) = v27;
  if (!CACFDictionary::GetFloat64(*((_QWORD *)v4 + 3), CFSTR("mu_epsilon"), &v27))
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "epsilon_mu not found in inConfig");
    goto LABEL_62;
  }
  *((double *)v4 + 114) = v27;
  clsp::ParameterUpdater::GetArraysData((CFDictionaryRef *)v4 + 3, (const CACFDictionary *)CFSTR("mu_Le"), (const __CFString *)*((unsigned int *)v4 + 56), (uint64_t)(v4 + 752), v16);
  clsp::ParameterUpdater::GetArraysData((CFDictionaryRef *)v4 + 3, (const CACFDictionary *)CFSTR("mu_Bl"), (const __CFString *)*((unsigned int *)v4 + 57), (uint64_t)(v4 + 792), v17);
  clsp::ParameterUpdater::GetArraysData((CFDictionaryRef *)v4 + 3, (const CACFDictionary *)CFSTR("mu_Km"), (const __CFString *)*((unsigned int *)v4 + 58), (uint64_t)(v4 + 832), v18);
  clsp::ParameterUpdater::GetArraysData((CFDictionaryRef *)v4 + 3, (const CACFDictionary *)CFSTR("mu_Rm"), (const __CFString *)*((unsigned int *)v4 + 59), (uint64_t)(v4 + 872), v19);
  if (!CACFDictionary::GetFloat64((uint64_t)*v5, CFSTR("Reb_min"), &v27))
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Reb_min not found in inConfig");
    goto LABEL_62;
  }
  *((double *)v4 + 115) = v27;
  if (!CACFDictionary::GetFloat64(*((_QWORD *)v4 + 3), CFSTR("Le0_min"), &v27))
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Le0_min not found in inConfig");
    goto LABEL_62;
  }
  *((double *)v4 + 116) = v27;
  if (!CACFDictionary::GetFloat64(*((_QWORD *)v4 + 3), CFSTR("Bl0_min"), &v27))
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Bl0_min not found in inConfig");
    goto LABEL_62;
  }
  *((double *)v4 + 117) = v27;
  if (!CACFDictionary::GetFloat64(*((_QWORD *)v4 + 3), CFSTR("Km0_min"), &v27))
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Km0_min not found in inConfig");
    goto LABEL_62;
  }
  *((double *)v4 + 119) = v27;
  if (!CACFDictionary::GetFloat64(*((_QWORD *)v4 + 3), CFSTR("Rm0_min"), &v27))
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Rm0_min not found in inConfig");
    goto LABEL_62;
  }
  *((double *)v4 + 118) = v27;
  if (!CACFDictionary::GetFloat64(*((_QWORD *)v4 + 3), CFSTR("Reb_max"), &v27))
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Reb_max not found in inConfig");
    goto LABEL_62;
  }
  *((double *)v4 + 120) = v27;
  if (!CACFDictionary::GetFloat64(*((_QWORD *)v4 + 3), CFSTR("Le0_max"), &v27))
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Le0_max not found in inConfig");
    goto LABEL_62;
  }
  *((double *)v4 + 121) = v27;
  if (!CACFDictionary::GetFloat64(*((_QWORD *)v4 + 3), CFSTR("Bl0_max"), &v27))
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Bl0_max not found in inConfig");
    goto LABEL_62;
  }
  *((double *)v4 + 122) = v27;
  if (!CACFDictionary::GetFloat64(*((_QWORD *)v4 + 3), CFSTR("Km0_max"), &v27))
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Km0_max not found in inConfig");
    goto LABEL_62;
  }
  *((double *)v4 + 124) = v27;
  if (!CACFDictionary::GetFloat64(*((_QWORD *)v4 + 3), CFSTR("Rm0_max"), &v27))
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Rm0_max not found in inConfig");
    goto LABEL_62;
  }
  *((double *)v4 + 123) = v27;
  if (!CACFDictionary::GetFloat64(*((_QWORD *)v4 + 3), CFSTR("alpha"), &v27))
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "alpha not found in inConfig");
    goto LABEL_62;
  }
  *((double *)v4 + 19) = v27;
  if (!CACFDictionary::GetFloat64(*((_QWORD *)v4 + 3), CFSTR("En_frame_Th"), &v27))
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Threshold for frame energy not found in inConfig");
    goto LABEL_62;
  }
  *((double *)v4 + 20) = v27;
  if (!CACFDictionary::GetFloat64(*((_QWORD *)v4 + 3), CFSTR("En_Th"), &v27))
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Threshold for energy not found in inConfig");
    goto LABEL_62;
  }
  *((double *)v4 + 21) = v27;
  if (!CACFDictionary::GetFloat64(*((_QWORD *)v4 + 3), CFSTR("Timer"), &v27)
    || (*((double *)v4 + 25) = v27,
        !CACFDictionary::GetFloat64(*((_QWORD *)v4 + 3), CFSTR("snrv_Th"), &v27))
    || (*((double *)v4 + 26) = v27,
        !CACFDictionary::GetFloat64(*((_QWORD *)v4 + 3), CFSTR("snrx_Th"), &v27)))
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Timer not found in inConfig");
LABEL_62:
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5038] + 16);
  }
  *((double *)v4 + 27) = v27;
  *(_OWORD *)(v4 + 72) = 0u;
  *(_OWORD *)(v4 + 88) = 0u;
  *(_OWORD *)(v4 + 104) = 0u;
  *((_QWORD *)v4 + 17) = 0;
  *((_QWORD *)v4 + 18) = 0;
  *((_QWORD *)v4 + 23) = 0;
  *((_QWORD *)v4 + 24) = 0;
  *((_QWORD *)v4 + 22) = 0;
  v20 = (void *)*((_QWORD *)v4 + 125);
  v21 = *((_QWORD *)v4 + 126) - (_QWORD)v20;
  if (v21 >= 1)
    bzero(v20, 8 * (((unint64_t)v21 >> 3) - ((unint64_t)v21 > 7)) + 8);
  v22 = (void *)*((_QWORD *)v4 + 128);
  v23 = *((_QWORD *)v4 + 129) - (_QWORD)v22;
  if (v23 >= 1)
    bzero(v22, 8 * (((unint64_t)v23 >> 3) - ((unint64_t)v23 > 7)) + 8);
  v24 = (void *)*((_QWORD *)v4 + 131);
  v25 = *((_QWORD *)v4 + 132) - (_QWORD)v24;
  if (v25 >= 1)
    bzero(v24, 8 * (((unint64_t)v25 >> 3) - ((unint64_t)v25 > 7)) + 8);
  *((_DWORD *)v4 + 268) = 0;
  *a1 = v5;
  a1[1] = (CFTypeRef *)v4;
}

void sub_1B63EAC58(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  CACFDictionary *v2;
  void **v3;
  void **v4;
  void **v5;
  void *v6;
  std::__shared_weak_count_vtbl *v8;
  std::__shared_weak_count_vtbl *v9;
  std::__shared_weak_count_vtbl *v10;
  void *v11;

  __cxa_free_exception(v6);
  v8 = (std::__shared_weak_count_vtbl *)*v5;
  if (*v5)
  {
    v1[44].__vftable = v8;
    operator delete(v8);
  }
  v9 = (std::__shared_weak_count_vtbl *)*v4;
  if (*v4)
  {
    v1[43].__vftable = v9;
    operator delete(v9);
  }
  v10 = (std::__shared_weak_count_vtbl *)*v3;
  if (*v3)
  {
    v1[42].__vftable = v10;
    operator delete(v10);
  }
  CACFDictionary::~CACFDictionary(v2);
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v11);
  _Unwind_Resume(a1);
}

void std::default_delete<clsp::FirFilter>::operator()[abi:ne180100](uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;

  v2 = *(void **)(a1 + 48);
  if (v2)
  {
    *(_QWORD *)(a1 + 56) = v2;
    operator delete(v2);
  }
  v3 = *(void **)(a1 + 24);
  if (v3)
  {
    *(_QWORD *)(a1 + 32) = v3;
    operator delete(v3);
  }
  v4 = *(void **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)(a1 + 8) = v4;
    operator delete(v4);
  }
  JUMPOUT(0x1BCC95CECLL);
}

void std::default_delete<clsp::DelayLine<float,double>>::operator()[abi:ne180100](_QWORD *a1)
{
  void *v2;
  void *v3;

  v2 = (void *)a1[5];
  if (v2)
  {
    a1[6] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[2];
  if (v3)
  {
    a1[3] = v3;
    operator delete(v3);
  }
  JUMPOUT(0x1BCC95CECLL);
}

void clsp::CLSPKernel_v5::ProcessAdapt(clsp::CLSPKernel_v5 *this, const float *a2, float *a3, unsigned int a4, unsigned int a5)
{
  uint64_t v9;
  float *v10;
  vDSP_Length v11;
  uint64_t v12;
  unint64_t v13;
  size_t v14;
  void *v15;
  float *v16;
  float *v17;
  float *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  unint64_t v22;
  size_t v23;
  void *v24;
  char *v25;
  char *v26;
  char *v27;
  uint64_t v28;
  char *v29;
  unint64_t v30;
  void *v31;
  char *v32;
  size_t v33;
  char *v34;
  char *v35;
  unint64_t v36;
  float *v37;
  float *v38;
  float *v39;
  double v40;
  double v41;
  uint64_t v42;
  uint64_t v43;
  float v44;
  float v45;
  float v46;
  float v47;
  float v48;
  float v49;
  float v50;
  uint64_t v51;
  double v52;
  int v53;
  double *v54;
  double v55;
  double v56;
  double v57;
  double v58;
  double v59;
  double v60;
  double v61;
  double v62;
  double v63;
  long double v64;
  uint64_t v65;
  double v66;
  double v67;
  double v68;
  uint64_t v69;
  double v70;
  uint64_t v71;
  double v72;
  double *v73;
  uint64_t v74;
  double v75;
  double v76;
  uint64_t v77;
  double v78;
  uint64_t v79;
  double v80;
  double v81;
  double v82;
  long double v83;
  uint64_t v84;
  long double v85;
  long double v86;
  double v87;
  double v88;
  double v89;
  long double v90;
  uint64_t v91;
  double v92;
  double v93;
  long double v94;
  uint64_t v95;
  double v96;
  long double v97;
  double v98;
  double v99;
  uint64_t v100;
  double v101;
  long double v102;
  long double v103;
  long double v104;
  double v105;
  double v106;
  double v107;
  int v108;
  double *v109;
  double *v110;
  double *v111;
  double *v112;
  _QWORD *v113;
  double v114;
  double v115;
  double v116;
  double v117;
  long double v118;
  double *v119;
  double *v120;
  double *v121;
  double *v122;
  double v123;
  double v124;
  uint64_t v125;
  double v126;
  uint64_t v127;
  double v128;
  uint64_t v129;
  double v130;
  double v131;
  double v132;
  double v133;
  double v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  clsp::CLSP_Log *v139;
  float v140;
  uint64_t v141;
  double v142;
  double v143;
  double v144;
  double *v145;
  uint64_t v146;
  uint64_t v147;
  double v148;
  double v149;
  double v150;
  double v151;
  uint64_t v152;
  double *v153;
  uint64_t v154;
  double v155;
  uint64_t v156;
  double *v157;
  uint64_t v158;
  double v159;
  double v160;
  double v161;
  double v162;
  double v163;
  double v164;
  double v165;
  double v166;
  double v167;
  double v168;
  double *p_B;
  uint64_t v170;
  uint64_t v171;
  double v172;
  double v173;
  double v174;
  double v175;
  std::logic_error *exception;
  std::logic_error *v177;
  float v178;
  float v179;
  uint64_t v180;
  uint64_t v181;
  double *v182;
  uint64_t v183;
  uint64_t v184;
  double *v185;
  uint64_t v186;
  uint64_t v187;
  double *v188;
  uint64_t v189;
  uint64_t v190;
  double *v191;
  uint64_t v192;
  double v193;
  float v194;
  float v195;
  double v196;
  double v197;
  double v198;
  long double v199;
  long double v200;
  long double v201;
  float v202;
  clsp::CLSP_Log *v203;
  clsp::CLSP_Log *v204;
  float v205;
  float v206;
  float *v207;
  uint64_t v208;
  float *v209;
  vDSP_Length v210;
  uint64_t v211;
  clsp::CLSPKernel_v5 *v212;
  double v213;
  double v214;
  double v215;
  double v216;
  double v217;
  double v218;
  double v219;
  double v220;
  double v221;
  double v222;
  double v223;
  double v224;
  long double v226;
  _QWORD *v227;
  double v228;
  double v229;
  double v230;
  double __x;
  double v232;
  double v233;
  double v234;
  double v235;
  double v236;
  double v237;
  double v238;
  double v239;
  double v240;
  double v241;
  double v242;
  double v243;
  double v244;
  double v245;
  double v246;
  double v247;
  double v248;
  double v249;
  double v250;
  double v251;
  double v252;
  double v253;
  double v254;
  uint64_t v255;
  float v256;
  float v257;
  double v258;
  double v259;
  float *v260;
  float *v261;
  unint64_t v262;
  double *v263;
  double *v264;
  long double v265;
  double v266;
  uint64_t v267;
  double v268;
  double v269;
  double v270;
  double v271;
  float v272;
  double v273;
  double v274;
  int v275;
  float v276;
  double v277;
  double v278;
  float v279;
  double v280;
  double v281;
  double v282;
  double v283;
  double v284;
  double v285;
  int v286;
  int v287;
  double v288;
  double v289;
  float v290;
  double v291;
  double v292;
  double v293;
  _QWORD v294[4];
  double v295;
  _QWORD v296[4];
  _OWORD v297[2];
  uint64_t v298;
  double __B;
  _QWORD v300[6];

  v300[4] = *MEMORY[0x1E0C80C00];
  shouldTraceRender();
  if (*((_BYTE *)this + 1072))
  {
    clsp::CLSPKernel_v5::LogCoeffs(this);
    *((_BYTE *)this + 1072) = 0;
  }
  v9 = *((_QWORD *)this + 53);
  if (!v9 || !*((_QWORD *)this + 46) || *(_DWORD *)(v9 + 8) != 3)
  {
    LODWORD(__B) = 1036831949;
    vDSP_vsmul(a2, 1, (const float *)&__B, a3, 1, a4);
    return;
  }
  v10 = (float *)*((_QWORD *)this + 100);
  v11 = a4;
  vDSP_vclip(a2, 1, &clsp::CLSPKernel_v5::kClipLoThres, &clsp::CLSPKernel_v5::kClipHiThres, v10, 1, a4);
  v12 = *((_QWORD *)this + 97);
  shouldTraceRender();
  v13 = *(_QWORD *)(v12 + 8);
  if (v13 <= a4)
  {
    if (v13)
    {
      memmove(*(void **)(v12 + 40), *(const void **)(v12 + 16), 4 * v13);
      v13 = *(_QWORD *)(v12 + 8);
    }
    v17 = &v10[a4];
    v18 = &v17[-v13];
    if (v18 != v10)
    {
      memmove((void *)(*(_QWORD *)(v12 + 40) + 4 * v13), v10, (char *)v18 - (char *)v10);
      v13 = *(_QWORD *)(v12 + 8);
    }
    if (v13)
    {
      v14 = 4 * v13;
      v15 = *(void **)(v12 + 16);
      v16 = &v17[-v13];
      goto LABEL_20;
    }
  }
  else
  {
    if (a4)
    {
      memmove(*(void **)(v12 + 40), *(const void **)(v12 + 16), 4 * a4);
      v13 = *(_QWORD *)(v12 + 8);
    }
    if (v13 != a4)
      memmove(*(void **)(v12 + 16), (const void *)(*(_QWORD *)(v12 + 16) + 4 * a4), 4 * v13 - 4 * a4);
    if (a4)
    {
      v14 = 4 * a4;
      v15 = (void *)(*(_QWORD *)(v12 + 16) + 4 * *(_QWORD *)(v12 + 8) - v14);
      v16 = v10;
LABEL_20:
      memmove(v15, v16, v14);
    }
  }
  v19 = *((_QWORD *)this + 125);
  v20 = a5;
  v21 = (char *)(*((_QWORD *)this + 106) + 4 * a5);
  shouldTraceRender();
  v22 = *(_QWORD *)(v19 + 8);
  if (v22 <= a4)
  {
    if (v22)
    {
      memmove(*(void **)(v19 + 40), *(const void **)(v19 + 16), 4 * v22);
      v22 = *(_QWORD *)(v19 + 8);
    }
    v26 = &v21[4 * a4];
    v27 = &v26[-4 * v22];
    if (v27 != v21)
    {
      memmove((void *)(*(_QWORD *)(v19 + 40) + 4 * v22), v21, v27 - v21);
      v22 = *(_QWORD *)(v19 + 8);
    }
    if (v22)
    {
      v23 = 4 * v22;
      v24 = *(void **)(v19 + 16);
      v25 = &v26[-4 * v22];
      goto LABEL_34;
    }
  }
  else
  {
    if (a4)
    {
      memmove(*(void **)(v19 + 40), *(const void **)(v19 + 16), 4 * a4);
      v22 = *(_QWORD *)(v19 + 8);
    }
    if (v22 != a4)
      memmove(*(void **)(v19 + 16), (const void *)(*(_QWORD *)(v19 + 16) + 4 * a4), 4 * v22 - 4 * a4);
    if (a4)
    {
      v23 = 4 * a4;
      v24 = (void *)(*(_QWORD *)(v19 + 16) + 4 * *(_QWORD *)(v19 + 8) - v23);
      v25 = v21;
LABEL_34:
      memmove(v24, v25, v23);
    }
  }
  v28 = *((_QWORD *)this + 126);
  v29 = (char *)(*((_QWORD *)this + 109) + 4 * v20);
  shouldTraceRender();
  v30 = *(_QWORD *)(v28 + 8);
  if (v30 <= a4)
  {
    if (v30)
    {
      memmove(*(void **)(v28 + 40), *(const void **)(v28 + 16), 4 * v30);
      v30 = *(_QWORD *)(v28 + 8);
    }
    v34 = &v29[4 * a4];
    v35 = &v34[-4 * v30];
    if (v35 != v29)
    {
      memmove((void *)(*(_QWORD *)(v28 + 40) + 4 * v30), v29, v35 - v29);
      v30 = *(_QWORD *)(v28 + 8);
    }
    if (!v30)
      goto LABEL_49;
    v33 = 4 * v30;
    v31 = *(void **)(v28 + 16);
    v32 = &v34[-4 * v30];
  }
  else
  {
    if (a4)
    {
      memmove(*(void **)(v28 + 40), *(const void **)(v28 + 16), 4 * a4);
      v30 = *(_QWORD *)(v28 + 8);
    }
    if (v30 != a4)
      memmove(*(void **)(v28 + 16), (const void *)(*(_QWORD *)(v28 + 16) + 4 * a4), 4 * v30 - 4 * a4);
    if (!a4)
      goto LABEL_49;
    v31 = (void *)(*(_QWORD *)(v28 + 16) + 4 * *(_QWORD *)(v28 + 8) - 4 * a4);
    v32 = v29;
    v33 = 4 * a4;
  }
  memmove(v31, v32, v33);
LABEL_49:
  clsp::FirFilter::firlsfilter(*((clsp::FirFilter **)this + 127), (float *)(*((_QWORD *)this + 112) + 4 * v20), (float *)(*((_QWORD *)this + 112) + 4 * v20), a4);
  if (!a4)
  {
    v179 = 0.0;
    v290 = 0.0;
    goto LABEL_144;
  }
  v36 = 0;
  v37 = (float *)(*((_QWORD *)this + 112) + 4 * v20);
  v38 = *(float **)(*((_QWORD *)this + 126) + 40);
  v39 = *(float **)(*((_QWORD *)this + 125) + 40);
  v208 = MEMORY[0x1E0DE5038] + 16;
  v209 = v10;
  v40 = 0.0;
  v41 = 0.0;
  v210 = a4;
  v211 = v9;
  v212 = this;
  do
  {
    v42 = *((_QWORD *)this + 97);
    v43 = *(_QWORD *)(v42 + 40);
    if (v36 >= (*(_QWORD *)(v42 + 48) - v43) >> 2)
      std::vector<std::vector<float>>::__throw_out_of_range[abi:ne180100]();
    v44 = v10[v36];
    v45 = (*(float (**)(uint64_t, float, float))(*(_QWORD *)v9 + 184))(v9, v44, *(float *)(v43 + 4 * v36));
    *(float *)(*((_QWORD *)this + 103) + 4 * v36) = v45;
    v46 = *((float *)this + 173)
        + (float)(*((float *)this + 172) * (float)(*((float *)this + 166) - *((float *)this + 173)));
    *((float *)this + 173) = v46;
    v47 = *((float *)this + 177) + (float)(*((float *)this + 176) * (float)(v46 - *((float *)this + 177)));
    *((float *)this + 177) = v47;
    v48 = *((float *)this + 181)
        + (float)(*((float *)this + 180) * (float)(*((float *)this + 168) - *((float *)this + 181)));
    *((float *)this + 181) = v48;
    v49 = *((float *)this + 185) + (float)(*((float *)this + 184) * (float)(v48 - *((float *)this + 185)));
    *((float *)this + 185) = v49;
    v262 = v36;
    v258 = v41;
    v259 = v40;
    if (*((_BYTE *)this + 744))
    {
      if (v49 >= v47)
        v50 = v47;
      else
        v50 = v49;
      v256 = v45 * v50;
      v44 = v44 * (float)(v47 * v49);
    }
    else
    {
      v256 = v45;
    }
    v257 = v44;
    --*((_DWORD *)this + 137);
    v51 = *((_QWORD *)this + 46);
    v279 = *v39;
    v260 = v38;
    v261 = v37;
    v272 = *v38;
    v276 = *v37;
    v289 = *((double *)this + 3);
    v255 = *((_QWORD *)this + 48);
    v52 = *(double *)(v51 + 16);
    v53 = *(_DWORD *)(v51 + 204);
    v287 = *(_DWORD *)(v51 + 200);
    v286 = *(_DWORD *)(v51 + 208);
    v275 = *(_DWORD *)(v51 + 212);
    v285 = *(double *)(v51 + 552);
    v278 = *(double *)(v51 + 216);
    v54 = (double *)(v51 + 264);
    v263 = (double *)(v51 + 304);
    v264 = (double *)(v51 + 344);
    v221 = *(double *)(v51 + 720);
    v222 = *(double *)(v51 + 888);
    v223 = *(double *)(v51 + 896);
    v224 = *(double *)(v51 + 904);
    v214 = *(double *)(v51 + 928);
    v215 = *(double *)(v51 + 920);
    v216 = *(double *)(v51 + 936);
    v217 = *(double *)(v51 + 944);
    v213 = *(double *)(v51 + 952);
    v220 = *(double *)(v51 + 960);
    v218 = *(double *)(v51 + 912);
    v219 = *(double *)(v51 + 968);
    v281 = *(double *)(v51 + 56);
    v268 = *(double *)(v51 + 64);
    v270 = *(double *)(v51 + 48);
    v55 = *(double *)(v51 + 80);
    v226 = *(double *)(v51 + 72);
    memset(v300, 0, 32);
    v298 = 0;
    v56 = *(double *)(v51 + 344);
    v57 = *(double *)(v51 + 680);
    v58 = -(v56 * v57);
    v59 = (v289 + v289) * v52;
    memset(v297, 0, sizeof(v297));
    memset(v296, 0, sizeof(v296));
    memset(v294, 0, sizeof(v294));
    v274 = *(double *)(v51 + 128);
    v242 = *(double *)(v51 + 144);
    v240 = *(double *)(v51 + 112);
    v241 = *(double *)(v51 + 152);
    v227 = (_QWORD *)(v51 + 112);
    v252 = *(double *)(v51 + 120);
    v253 = *(double *)(v51 + 160);
    v230 = *(double *)(v51 + 176);
    v228 = *(double *)(v51 + 136);
    v229 = *(double *)(v51 + 184);
    v266 = *(double *)(v51 + 168);
    v267 = *(_QWORD *)(v51 + 192);
    v251 = *(double *)(v51 + 88);
    v235 = exp(v58 / v59);
    v60 = *(double *)(v51 + 640);
    v61 = *(double *)(v51 + 304);
    v237 = v56;
    v238 = v57;
    v233 = sqrt(v52 * 4.0 * v60 * v61 - v56 * v57 * (v56 * v57));
    __x = v233 / v59;
    v62 = cos(v233 / v59);
    v63 = v52 * v289;
    v64 = exp(v58 / v63);
    v65 = 0;
    v236 = v61;
    v234 = v60;
    v232 = v60 * v61;
    v254 = v235 * -2.0 * v62;
    v283 = (v64 + v254 + 1.0) / (v60 * v61);
    v284 = v64;
    v66 = v283 * v270 - v254 * v281 - v64 * v268;
    v248 = v66 - v281;
    v67 = 0.0;
    v282 = v66;
    v68 = v66 + 0.0;
    v69 = (v53 + 1);
    do
    {
      v70 = *(double *)(v51 + 8 * v65 + 600) * *(double *)(v51 + 8 * v65 + 264);
      v67 = v67 + v70 * pow(v68, (double)(int)v65++);
    }
    while (v69 != v65);
    v71 = 0;
    v72 = v272;
    v73 = (double *)(v51 + 224);
    v74 = (v287 + 1);
    v75 = 0.0;
    do
    {
      v76 = *(double *)(v51 + 8 * v71 + 560) * *(double *)(v51 + 8 * v71 + 224);
      v75 = v75 + v76 * pow(v68, (double)(int)v71++);
    }
    while (v74 != v71);
    v273 = v75;
    if (v287)
    {
      v77 = 0;
      v78 = 0.0;
      do
      {
        v79 = v77 + 1;
        v80 = *(double *)(v51 + 8 * v77 + 568) * (double)((int)v77 + 1) * *(double *)(v51 + 8 * v77 + 232);
        v78 = v78 + v80 * pow(v68, (double)(int)v77);
        v77 = v79;
      }
      while (v74 - 1 != v79);
    }
    else
    {
      v78 = 0.0;
    }
    v265 = v68;
    v271 = v279;
    v81 = v248 * v289;
    v249 = v276;
    v277 = v276 - v282;
    v280 = v81;
    v82 = v81 * v78;
    v247 = -v67;
    v244 = v82 * v72 + v285 * v278 * v72 + (v72 - v55) * v273 * v289;
    v246 = v82 + v278 * v285;
    v83 = sin(__x);
    v84 = 0;
    v85 = v237 * -(v238 * v238) / v63 * v235 * v83 / v233 + v238 / v63 * v235 * v62;
    v86 = (v234 + v234) / v289 * v235 / v233 * v83;
    v295 = v281 * v85 - v270 * ((-(v238 * v284) / v63 + v85) / v232) + v268 * (-(v238 * v284) / v63);
    v293 = v281 * v86 - v270 * (v86 / v232 - v283 / v236) + v268 * 0.0;
    v87 = v295 * v295 + v293 * v293;
    v88 = v281 + 0.0;
    do
    {
      v89 = v55 * -(*(double *)(v51 + 8 * v84 + 600) * v283);
      v90 = pow(v88, (double)(int)v84) * v89;
      *((long double *)v297 + v84) = v90;
      v87 = v87 + v90 * v90;
      ++v84;
    }
    while (v69 != v84);
    if (v286)
    {
      v91 = 0;
      v92 = v72 - v55;
      do
      {
        v93 = v283 * *(double *)(v51 + 648 + 8 * v91);
        v94 = pow(v88, (double)((int)v91 + 2)) * v93;
        *(long double *)&v294[v91] = v94;
        v87 = v87 + v94 * v94;
        ++v91;
      }
      while ((v286 + 1) - 1 != v91);
    }
    else
    {
      v92 = v72 - v55;
    }
    if (v275)
    {
      v95 = 0;
      do
      {
        v96 = v283 * *(double *)(v51 + 688 + 8 * v95);
        v97 = pow(v226, (double)((int)v95 + 2)) * v96;
        *(long double *)&v296[v95] = v97;
        v87 = v87 + v97 * v97;
        ++v95;
      }
      while ((v275 + 1) - 1 != v95);
    }
    v239 = -(v285 * v72);
    v98 = v289;
    __B = -(*(double *)(v51 + 560) * v92) * v289;
    v99 = v239 * v239 + __B * __B;
    v250 = v72;
    if (v287)
    {
      v100 = 0;
      do
      {
        v101 = *(double *)(v51 + 568 + 8 * v100);
        v102 = v92 * pow(v265, (double)((int)v100 + 1));
        v103 = v280 * v72 * (double)((int)v100 + 1) * pow(v265, (double)(int)v100) + v102 * v289;
        v98 = v289;
        v104 = -(v101 * v103);
        *(long double *)&v300[v100] = v104;
        v99 = v99 + v104 * v104;
        ++v100;
      }
      while (v74 - 1 != v100);
    }
    v245 = v244 + v67 * v280;
    v105 = v271 - v245;
    v106 = 1.0 - v274;
    v107 = v271 * v271 * v274 + (1.0 - v274) * v240;
    v288 = v274 * (v105 * v105) + v241 * (1.0 - v274);
    v269 = v107;
    if (v242 > v107 && v228 > 0.0)
    {
      v292 = 0.0;
      v108 = v275;
      if (!CACFDictionary::GetFloat64(*(_QWORD *)v51, CFSTR("Reb"), &v292))
      {
        exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
        std::logic_error::logic_error(exception, "Reb not found in inConfig");
        exception->__vftable = (std::logic_error_vtbl *)v208;
      }
      *(double *)(v51 + 384) = v292;
      clsp::ParameterUpdater::GetArraysData((CFDictionaryRef *)v51, (const CACFDictionary *)CFSTR("Le_x"), (const __CFString *)*(unsigned int *)(v51 + 200), v51 + 392, v109);
      clsp::ParameterUpdater::GetArraysData((CFDictionaryRef *)v51, (const CACFDictionary *)CFSTR("Bl_x"), (const __CFString *)*(unsigned int *)(v51 + 204), v51 + 432, v110);
      clsp::ParameterUpdater::GetArraysData((CFDictionaryRef *)v51, (const CACFDictionary *)CFSTR("Km_x"), (const __CFString *)*(unsigned int *)(v51 + 208), v51 + 472, v111);
      clsp::ParameterUpdater::GetArraysData((CFDictionaryRef *)v51, (const CACFDictionary *)CFSTR("Rm_u"), (const __CFString *)*(unsigned int *)(v51 + 212), v51 + 512, v112);
      *(_OWORD *)(v51 + 72) = 0u;
      *(_OWORD *)(v51 + 56) = 0u;
      *(_OWORD *)(v51 + 40) = 0u;
      *(_OWORD *)(v51 + 24) = 0u;
      *v227 = 0;
      *(_QWORD *)(v51 + 120) = 0;
      v113 = (_QWORD *)(v51 + 152);
      *(_QWORD *)(v51 + 168) = 0;
      v243 = 0.0;
      v267 = 0;
LABEL_90:
      *v113 = 0;
      v113[1] = 0;
      goto LABEL_91;
    }
    v114 = v266;
    v116 = v229;
    v115 = v230;
    v117 = v229;
    v108 = v275;
    if (v230 <= v266)
    {
      v118 = log10(v288 / v107);
      v116 = v229;
      v115 = v230;
      v117 = v118 * -10.0;
      v114 = v266;
    }
    v243 = v117;
    if (v116 > v117 && v114 > v115)
    {
      v291 = 0.0;
      if (!CACFDictionary::GetFloat64(*(_QWORD *)v51, CFSTR("Reb"), &v291))
      {
        v177 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
        std::logic_error::logic_error(v177, "Reb not found in inConfig");
        v177->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5038] + 16);
      }
      *(double *)(v51 + 216) = v291;
      clsp::ParameterUpdater::GetArraysData((CFDictionaryRef *)v51, (const CACFDictionary *)CFSTR("Le_x"), (const __CFString *)*(unsigned int *)(v51 + 200), v51 + 224, v119);
      clsp::ParameterUpdater::GetArraysData((CFDictionaryRef *)v51, (const CACFDictionary *)CFSTR("Bl_x"), (const __CFString *)*(unsigned int *)(v51 + 204), v51 + 264, v120);
      clsp::ParameterUpdater::GetArraysData((CFDictionaryRef *)v51, (const CACFDictionary *)CFSTR("Km_x"), (const __CFString *)*(unsigned int *)(v51 + 208), (uint64_t)v263, v121);
      clsp::ParameterUpdater::GetArraysData((CFDictionaryRef *)v51, (const CACFDictionary *)CFSTR("Rm_u"), (const __CFString *)*(unsigned int *)(v51 + 212), (uint64_t)v264, v122);
      *(_QWORD *)(v51 + 80) = 0;
      *(_OWORD *)(v51 + 48) = 0u;
      *(_OWORD *)(v51 + 64) = 0u;
      *v227 = 0;
      *(_QWORD *)(v51 + 120) = 0;
      v113 = (_QWORD *)(v51 + 152);
      *(_QWORD *)(v51 + 168) = 0;
      goto LABEL_90;
    }
    if (v114 <= v115)
      v266 = 1.0 / v98 + v114;
    v144 = v222 + v87;
    v145 = (double *)v297;
    v146 = v51;
    v147 = v69;
    do
    {
      v148 = *v145++;
      *(double *)(v146 + 264) = *(double *)(v146 + 264) - v277 * *(double *)(v146 + 768) * v148 / v144;
      v146 += 8;
      --v147;
    }
    while (v147);
    v149 = *(double *)(v51 + 264);
    v150 = *(double *)(v51 + 600);
    v151 = v218 / v150;
    if (v149 < v218 / v150 || (v151 = v213 / v150, v149 > v213 / v150))
      *v54 = v151;
    v152 = (v286 + 1);
    v153 = &v293;
    v154 = v51;
    do
    {
      v155 = *v153++;
      *(double *)(v154 + 304) = *(double *)(v154 + 304) - v277 * *(double *)(v154 + 808) * v155 / v144;
      v154 += 8;
      --v152;
    }
    while (v152);
    v156 = (v275 + 1);
    v157 = &v295;
    v158 = v51;
    do
    {
      v159 = *v157++;
      *(double *)(v158 + 344) = *(double *)(v158 + 344) - v277 * *(double *)(v158 + 848) * v159 / v144;
      v158 += 8;
      --v156;
    }
    while (v156);
    v160 = *(double *)(v51 + 304);
    v161 = *(double *)(v51 + 640);
    v162 = v219 / v161;
    if (v160 > v219 / v161 || (v162 = v214 / v161, v160 < v214 / v161))
      *v263 = v162;
    v163 = *(double *)(v51 + 344);
    v164 = *(double *)(v51 + 680);
    v165 = v220 / v164;
    if (v163 > v220 / v164 || (v165 = v215 / v164, v163 < v215 / v164))
      *v264 = v165;
    v166 = v222 + v99 + v271 * v271 * 0.0;
    v167 = v278 - v239 * (v221 * v105) / v166;
    v168 = v223 / v285;
    if (v167 >= v223 / v285)
    {
      v168 = v278 - v239 * (v221 * v105) / v166;
      if (v167 > v216 / v285)
        v168 = v216 / v285;
    }
    p_B = &__B;
    v170 = v51;
    v171 = v74;
    do
    {
      v172 = *p_B++;
      *(double *)(v170 + 224) = *(double *)(v170 + 224) - v105 * *(double *)(v170 + 728) * v172 / v166;
      v170 += 8;
      --v171;
    }
    while (v171);
    v173 = *(double *)(v51 + 224);
    v174 = *(double *)(v51 + 560);
    v278 = v168;
    if (v173 >= v224 / v174)
    {
      v175 = v217 / v174;
      if (v173 > v175)
        *v73 = v175;
    }
    else
    {
      *v73 = v224 / v174;
    }
LABEL_91:
    v123 = 0.0;
    v124 = 0.0;
    if (v108)
    {
      v125 = 0;
      do
      {
        v126 = *(double *)(v51 + 8 * v125 + 688) * *(double *)(v51 + 8 * v125 + 352);
        v124 = v124 + v126 * pow(v280, (double)(int)++v125);
      }
      while ((v108 + 1) - 1 != v125);
    }
    if (v286)
    {
      v127 = 0;
      v123 = 0.0;
      do
      {
        v128 = *(double *)(v51 + 8 * v127 + 648) * *(double *)(v51 + 8 * v127 + 312);
        v123 = v123 + v128 * pow(v265, (double)(int)++v127);
      }
      while ((v286 + 1) - 1 != v127);
    }
    v129 = 0;
    v130 = (v271 + v247 * v280 + v273 * v98 * v251) / (v246 + v273 * v98);
    v131 = v249 * v249 * v274 + v106 * v252;
    v132 = v274 * (v277 * v277) + v253 * v106;
    v133 = 0.0;
    do
    {
      v134 = *(double *)(v51 + 8 * v129 + 600) * *(double *)(v51 + 8 * v129 + 264);
      v133 = v133 + v134 * pow(v265, (double)(int)v129++);
    }
    while (v69 != v129);
    *(double *)(v51 + 24) = v254;
    *(double *)(v51 + 32) = v284;
    *(double *)(v51 + 56) = v282;
    *(double *)(v51 + 64) = v281;
    *(double *)(v51 + 72) = v280;
    *(double *)(v51 + 80) = v250;
    *(double *)(v51 + 88) = v130;
    *(double *)(v51 + 40) = v283;
    *(double *)(v51 + 48) = v133 * v250 - v123 * v282 - v124 * v280;
    *(double *)(v51 + 216) = v278;
    *(double *)(v51 + 112) = v269;
    *(double *)(v51 + 120) = v131;
    *(double *)(v51 + 152) = v288;
    *(double *)(v51 + 160) = v132;
    *(double *)(v51 + 168) = v266;
    this = v212;
    do
    {
      ++v73;
      --v74;
    }
    while (v74);
    v41 = v258;
    v40 = v259;
    v136 = v51 + 304;
    v135 = v51 + 344;
    do
    {
      ++v54;
      --v69;
    }
    while (v69);
    v137 = (v286 + 1);
    v10 = v209;
    do
    {
      v136 += 8;
      --v137;
    }
    while (v137);
    v138 = (v108 + 1);
    v11 = v210;
    v9 = v211;
    do
    {
      v135 += 8;
      --v138;
    }
    while (v138);
    *(double *)v255 = v282;
    *(double *)(v255 + 8) = v245;
    *(double *)(v255 + 16) = v271 - v245;
    *(double *)(v255 + 24) = v283;
    *(double *)(v255 + 32) = v254;
    *(double *)(v255 + 40) = v284;
    *(double *)(v255 + 48) = v285 * v278;
    *(double *)(v255 + 56) = *(double *)(v51 + 560) * *(double *)(v51 + 224);
    *(double *)(v255 + 64) = *(double *)(v51 + 568) * *(double *)(v51 + 232);
    *(double *)(v255 + 72) = *(double *)(v51 + 576) * *(double *)(v51 + 240);
    *(double *)(v255 + 80) = *(double *)(v51 + 584) * *(double *)(v51 + 248);
    *(double *)(v255 + 88) = *(double *)(v51 + 592) * *(double *)(v51 + 256);
    *(double *)(v255 + 96) = *(double *)(v51 + 600) * *(double *)(v51 + 264);
    *(double *)(v255 + 104) = *(double *)(v51 + 608) * *(double *)(v51 + 272);
    *(double *)(v255 + 112) = *(double *)(v51 + 616) * *(double *)(v51 + 280);
    *(double *)(v255 + 120) = *(double *)(v51 + 624) * *(double *)(v51 + 288);
    *(double *)(v255 + 128) = *(double *)(v51 + 632) * *(double *)(v51 + 296);
    *(double *)(v255 + 136) = *(double *)(v51 + 640) * *(double *)(v51 + 304);
    *(double *)(v255 + 144) = *(double *)(v51 + 648) * *(double *)(v51 + 312);
    *(double *)(v255 + 152) = *(double *)(v51 + 656) * *(double *)(v51 + 320);
    *(double *)(v255 + 160) = *(double *)(v51 + 664) * *(double *)(v51 + 328);
    *(double *)(v255 + 168) = *(double *)(v51 + 672) * *(double *)(v51 + 336);
    *(double *)(v255 + 176) = *(double *)(v51 + 680) * *(double *)(v51 + 344);
    *(double *)(v255 + 184) = *(double *)(v51 + 688) * *(double *)(v51 + 352);
    *(double *)(v255 + 192) = *(double *)(v51 + 696) * *(double *)(v51 + 360);
    *(double *)(v255 + 200) = *(double *)(v51 + 704) * *(double *)(v51 + 368);
    *(double *)(v255 + 208) = *(double *)(v51 + 712) * *(double *)(v51 + 376);
    *(double *)(v255 + 216) = v277;
    *(double *)(v255 + 224) = v293;
    *(double *)(v255 + 232) = v269;
    *(double *)(v255 + 240) = v243;
    *(_QWORD *)(v255 + 248) = v267;
    *(double *)(v255 + 256) = v130;
    v139 = *(clsp::CLSP_Log **)(*((_QWORD *)v212 + 135) + 16);
    if (v139)
    {
      v140 = **((double **)v212 + 48);
      *(float *)&__B = v140;
      clsp::CLSP_Log::LogCLSPData(v139, (const float *)&__B, 1);
    }
    v141 = *((_QWORD *)v212 + 48);
    v142 = fabs(*(double *)(v141 + 16));
    if (v259 < v142)
      v40 = v142;
    v143 = fabs(*(double *)(v141 + 216));
    if (v258 < v143)
      v41 = v143;
    (*(void (**)(uint64_t, float, float))(*(_QWORD *)v211 + 192))(v211, v257, v256);
    a3[v262] = v256;
    v36 = v262 + 1;
    ++v39;
    v38 = v260 + 1;
    v37 = v261 + 1;
  }
  while (v262 + 1 != v210);
  v178 = v40;
  v290 = v178;
  v179 = v41;
LABEL_144:
  clsp::ThermalController::postProcess((clsp::CLSPKernel_v5 *)((char *)this + 432), a3, *((const float **)this + 103), v11);
  v180 = *((_QWORD *)this + 51);
  v181 = *((_QWORD *)this + 46);
  *(_OWORD *)v180 = *(_OWORD *)(v181 + 24);
  *(_QWORD *)(v180 + 16) = *(_QWORD *)(v181 + 40);
  *(double *)(v180 + 32) = *(double *)(v181 + 552) * *(double *)(v181 + 216);
  *(_QWORD *)(v180 + 40) = *(_QWORD *)(v181 + 16);
  v182 = *(double **)(v180 + 48);
  v183 = (*(_DWORD *)(v181 + 200) + 1);
  v184 = v181;
  do
  {
    *v182++ = *(double *)(v184 + 560) * *(double *)(v184 + 224);
    v184 += 8;
    --v183;
  }
  while (v183);
  v185 = *(double **)(v180 + 120);
  v186 = (*(_DWORD *)(v181 + 204) + 1);
  do
  {
    v185[v183] = *(double *)(v181 + 8 * v183 + 600) * *(double *)(v181 + 8 * v183 + 264);
    ++v183;
  }
  while (v186 != v183);
  v187 = 0;
  v188 = *(double **)(v180 + 72);
  v189 = (*(_DWORD *)(v181 + 208) + 1);
  do
  {
    v188[v187] = *(double *)(v181 + 8 * v187 + 640) * *(double *)(v181 + 8 * v187 + 304);
    ++v187;
  }
  while (v189 != v187);
  v190 = 0;
  v191 = *(double **)(v180 + 96);
  v192 = (*(_DWORD *)(v181 + 212) + 1);
  do
  {
    v191[v190] = *(double *)(v181 + 8 * v190 + 680) * *(double *)(v181 + 8 * v190 + 344);
    ++v190;
  }
  while (v192 != v190);
  v193 = *(double *)(v180 + 40);
  v194 = sqrt(*v188 / v193);
  v195 = sqrt(*v188 * v193) / (*v191 + *v185 * *v185 / *(double *)(v180 + 32));
  v196 = v195;
  v197 = 1.0 / *(double *)(v180 + 24);
  v198 = -(v197 * v194);
  v199 = exp(v198 / (v196 + v196)) * -2.0;
  v200 = v199 * cos(v197 * v194 * sqrt(1.0 / (v196 * -4.0 * v196) + 1.0));
  v201 = exp(v198 / v196);
  v202 = v200;
  *(float *)&v201 = v201;
  *(_DWORD *)(v9 + 312) = 1065353216;
  *(float *)(v9 + 316) = v202;
  *(_DWORD *)(v9 + 320) = LODWORD(v201);
  *(float *)(v9 + 340) = 1.0 / (float)((float)(1.0 - v202) + *(float *)&v201);
  *(float *)(v9 + 344) = (float)(v194 / *(float *)(v9 + 348)) * (float)(v194 / *(float *)(v9 + 348));
  clsp::CLSPKernel_v5::ZapBadValues(this);
  v203 = *(clsp::CLSP_Log **)(*((_QWORD *)this + 135) + 48);
  if (v203)
  {
    *(float *)&__B = v290;
    clsp::CLSP_Log::LogCLSPData(v203, (const float *)&__B, 1);
    v204 = *(clsp::CLSP_Log **)(*((_QWORD *)this + 135) + 48);
    if (v204)
    {
      *(float *)&__B = v179;
      clsp::CLSP_Log::LogCLSPData(v204, (const float *)&__B, 1);
    }
  }
  v205 = *((float *)this + 257);
  if (v205 < v290)
    v205 = v290;
  *((float *)this + 257) = v205;
  v206 = *((float *)this + 258);
  if (v206 < v179)
    v206 = v179;
  *((float *)this + 258) = v206;
  v207 = (float *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 128))(v9);
  log10f(v207[21]* (float)((float)((float)((float)(1.0 - v207[12]) + v207[13]) * (float)((float)(v207[14] + v207[15]) + v207[16]))/ (float)((float)(v207[12] + 1.0) + v207[13])));
}

void clsp::CLSPKernel_v5::ProcessAdaptSimple(const float **this, const float *a2, float *a3, unsigned int a4)
{
  const float *v8;
  int v9;
  BOOL v10;
  float *v11;
  vDSP_Length v12;
  const float *v13;
  unint64_t v14;
  float *v15;
  float *v16;
  unint64_t v17;
  const float *v18;
  uint64_t v19;
  float v20;
  float v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float *v28;
  float __B;

  shouldTraceRender();
  if (*((_BYTE *)this + 1072))
  {
    clsp::CLSPKernel_v5::LogCoeffs((clsp::CLSPKernel_v5 *)this);
    *((_BYTE *)this + 1072) = 0;
  }
  v8 = this[53];
  if (!v8 || ((v9 = *((_DWORD *)v8 + 2), v9 != 1) ? (v10 = v9 == 4) : (v10 = 1), !v10))
  {
    __B = 0.1;
    vDSP_vsmul(a2, 1, &__B, a3, 1, a4);
    return;
  }
  v11 = (float *)this[100];
  v12 = a4;
  vDSP_vclip(a2, 1, &clsp::CLSPKernel_v5::kClipLoThres, &clsp::CLSPKernel_v5::kClipHiThres, v11, 1, a4);
  v13 = this[97];
  shouldTraceRender();
  v14 = *((_QWORD *)v13 + 1);
  if (v14 <= a4)
  {
    if (v14)
    {
      memmove(*((void **)v13 + 5), *((const void **)v13 + 2), 4 * v14);
      v14 = *((_QWORD *)v13 + 1);
    }
    v15 = &v11[a4];
    v16 = &v15[-v14];
    if (v16 != v11)
    {
      memmove((void *)(*((_QWORD *)v13 + 5) + 4 * v14), v11, (char *)v16 - (char *)v11);
      v14 = *((_QWORD *)v13 + 1);
    }
    if (v14)
      memmove(*((void **)v13 + 2), &v15[-v14], 4 * v14);
    if (!a4)
      goto LABEL_32;
  }
  else
  {
    if (a4)
    {
      memmove(*((void **)v13 + 5), *((const void **)v13 + 2), 4 * a4);
      v14 = *((_QWORD *)v13 + 1);
    }
    if (v14 != a4)
      memmove(*((void **)v13 + 2), (const void *)(*((_QWORD *)v13 + 2) + 4 * a4), 4 * v14 - 4 * a4);
    if (!a4)
      goto LABEL_32;
    memmove((void *)(*((_QWORD *)v13 + 2) + 4 * *((_QWORD *)v13 + 1) - 4 * a4), v11, 4 * a4);
  }
  v17 = 0;
  do
  {
    v18 = this[97];
    v19 = *((_QWORD *)v18 + 5);
    if (v17 >= (*((_QWORD *)v18 + 6) - v19) >> 2)
      std::vector<std::vector<float>>::__throw_out_of_range[abi:ne180100]();
    v20 = v11[v17];
    v21 = (*(float (**)(const float *, float, float))(*(_QWORD *)this[53] + 184))(this[53], v20, *(float *)(v19 + 4 * v17));
    this[103][v17] = v21;
    v22 = *((float *)this + 173)
        + (float)(*((float *)this + 172) * (float)(*((float *)this + 166) - *((float *)this + 173)));
    *((float *)this + 173) = v22;
    v23 = *((float *)this + 177) + (float)(*((float *)this + 176) * (float)(v22 - *((float *)this + 177)));
    *((float *)this + 177) = v23;
    v24 = *((float *)this + 181)
        + (float)(*((float *)this + 180) * (float)(*((float *)this + 168) - *((float *)this + 181)));
    *((float *)this + 181) = v24;
    v25 = *((float *)this + 185) + (float)(*((float *)this + 184) * (float)(v24 - *((float *)this + 185)));
    *((float *)this + 185) = v25;
    if (*((_BYTE *)this + 744))
    {
      if (v25 >= v23)
        v26 = v23;
      else
        v26 = v25;
      v21 = v21 * v26;
      v20 = v20 * (float)(v23 * v25);
    }
    --*((_DWORD *)this + 137);
    (*(void (**)(const float *, float, float))(*(_QWORD *)this[53] + 192))(this[53], v20, v21);
    a3[v17++] = v21;
  }
  while (v12 != v17);
LABEL_32:
  *((float *)this + 266) = (*(float (**)(const float *))(*(_QWORD *)this[53] + 248))(this[53]);
  *((float *)this + 267) = (*(float (**)(const float *))(*(_QWORD *)this[53] + 240))(this[53]);
  v27 = clsp::ThermalController::postProcess((clsp::ThermalController *)(this + 54), a3, this[103], v12);
  (*(void (**)(const float *, float))(*(_QWORD *)this[53] + 232))(this[53], v27);
  clsp::CLSPKernel_v5::ZapBadValues((clsp::CLSPKernel_v5 *)this);
  v28 = (float *)(*(uint64_t (**)(const float *))(*(_QWORD *)this[53] + 128))(this[53]);
  log10f(v28[21]* (float)((float)((float)((float)(1.0 - v28[12]) + v28[13]) * (float)((float)(v28[14] + v28[15]) + v28[16]))/ (float)((float)(v28[12] + 1.0) + v28[13])));
}

double clsp::DisplacementController::DisplacementController(uint64_t a1, uint64_t a2, double a3, double a4, double a5, double a6, double a7, double a8)
{
  float v8;
  float v9;
  double result;

  *(_DWORD *)(a1 + 8) = 0;
  *(_QWORD *)a1 = &off_1E69E0F80;
  *(double *)(a1 + 16) = a3;
  *(double *)(a1 + 24) = a4;
  *(double *)(a1 + 32) = a5;
  *(double *)(a1 + 40) = a6;
  *(double *)(a1 + 48) = a7;
  *(double *)(a1 + 56) = a8;
  *(_BYTE *)(a1 + 64) = 1;
  v8 = a4;
  v9 = 1.0 / a4;
  *(float *)(a1 + 68) = v8;
  *(float *)(a1 + 72) = v9;
  *(float *)(a1 + 76) = v8;
  result = 0.0;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_QWORD *)(a1 + 112) = 0;
  *(_QWORD *)(a1 + 120) = a2;
  *(double *)(a1 + 128) = a6;
  *(double *)(a1 + 136) = a7;
  *(_QWORD *)(a1 + 144) = 0;
  *(_DWORD *)(a1 + 160) = 0;
  *(double *)(a1 + 168) = a6;
  *(double *)(a1 + 176) = a7;
  *(_QWORD *)(a1 + 184) = 0;
  *(_DWORD *)(a1 + 200) = 0;
  *(_QWORD *)(a1 + 304) = 0;
  *(_OWORD *)(a1 + 272) = 0u;
  *(_OWORD *)(a1 + 288) = 0u;
  *(_OWORD *)(a1 + 256) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 236) = 0u;
  *(_DWORD *)(a1 + 312) = 1065353216;
  *(_DWORD *)(a1 + 332) = 0;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_QWORD *)(a1 + 316) = 0;
  *(_QWORD *)(a1 + 324) = 0;
  return result;
}

float clsp::ThermalController::resetThermalState(clsp::ThermalController *this)
{
  float v7;
  float v8;
  float v9;
  float v10;
  float result;

  *((_DWORD *)this + 58) = 1065353216;
  *((_DWORD *)this + 65) = 1065353216;
  *((_DWORD *)this + 69) = 1065353216;
  *((_DWORD *)this + 60) = 1065353216;
  *((_DWORD *)this + 73) = 1065353216;
  *((_DWORD *)this + 77) = 1065353216;
  __asm { FMOV            V0.2S, #1.0 }
  *(_QWORD *)((char *)this + 124) = _D0;
  *(_QWORD *)((char *)this + 188) = 0;
  *(_QWORD *)((char *)this + 148) = 0;
  *((_QWORD *)this + 21) = 0;
  v7 = *(float *)this - *((float *)this + 2);
  shouldTraceRender();
  v8 = *((double *)this + 7);
  v9 = *((double *)this + 9);
  v10 = v8 + v9;
  result = (float)(v7 * v8) / (float)(v8 + v9);
  *((float *)this + 38) = result;
  *((float *)this + 43) = (float)(v7 * v9) / v10;
  *((float *)this + 48) = result;
  return result;
}

float clsp::ClosedLoopThermalModule::reset(clsp::ClosedLoopThermalModule *this)
{
  uint64_t v2;
  uint64_t v3;
  float result;

  *((_DWORD *)this + 21) = 0;
  v2 = *((_QWORD *)this + 12);
  if (v2)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 48))(v2);
    *((float *)this + 20) = (*(float (**)(_QWORD))(**((_QWORD **)this + 12) + 56))(*((_QWORD *)this + 12));
  }
  v3 = *((_QWORD *)this + 13);
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 32))(v3);
  *((_DWORD *)this + 22) = 0;
  *((_DWORD *)this + 39) = 0;
  *((_DWORD *)this + 43) = 0;
  *((_DWORD *)this + 47) = 0;
  result = *((float *)this + 20);
  *((float *)this + 51) = result;
  return result;
}

float clsp::CLSPKernel_v5::LogCoeffs(clsp::CLSPKernel_v5 *this)
{
  uint64_t v2;
  clsp::CLSP_Log *v3;
  clsp::CLSP_Log *v4;
  float v5;
  clsp::CLSP_Log *v6;
  float v7;
  clsp::CLSP_Log *v8;
  clsp::CLSP_Log *v9;
  clsp::CLSP_Log *v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  float v14;
  float v15;
  float v16;
  unint64_t *v17;
  unint64_t v18;
  uint64_t v19;
  std::__shared_weak_count *v20;
  clsp::CLSP_Log *v21;
  unint64_t *v22;
  unint64_t v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  unint64_t *v29;
  unint64_t v30;
  uint64_t v31;
  clsp::CLSP_Log *v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  float v36;
  float v37;
  float v38;
  uint64_t v39;
  unint64_t *v40;
  unint64_t v41;
  std::__shared_weak_count *v42;
  unint64_t *v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t *v46;
  unint64_t v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  char *v51;
  uint64_t *v52;
  unint64_t v53;
  unint64_t v54;
  char *v55;
  uint64_t *v56;
  unint64_t v57;
  unint64_t v58;
  char *v59;
  uint64_t *v60;
  unint64_t v61;
  unint64_t v62;
  char *v63;
  uint64_t *v64;
  unint64_t v65;
  unint64_t v66;
  uint64_t *v67;
  unint64_t v68;
  uint64_t v69;
  std::__shared_weak_count *v70;
  clsp::CLSP_Log *v71;
  unint64_t *v72;
  unint64_t v73;
  float v74;
  float v75;
  clsp::CLSP_Log *v76;
  double *v77;
  unint64_t *v78;
  unint64_t v79;
  __n128 v80;
  unint64_t v81;
  unint64_t v82;
  __n128 v83;
  std::__shared_weak_count *v84;
  unint64_t *v85;
  unint64_t v86;
  double *v87;
  unint64_t *v88;
  unint64_t v89;
  __n128 v90;
  unint64_t v91;
  clsp::CLSP_Log *v92;
  float *v93;
  unint64_t *v94;
  unint64_t v95;
  unint64_t v96;
  unint64_t v97;
  std::__shared_weak_count *v98;
  unint64_t *v99;
  unint64_t v100;
  float *v101;
  unint64_t *v102;
  unint64_t v103;
  unint64_t v104;
  unint64_t v105;
  __n128 v106;
  std::__shared_weak_count *v107;
  unint64_t *v108;
  unint64_t v109;
  char *v110;
  unint64_t *v111;
  unint64_t v112;
  unint64_t v113;
  unint64_t v114;
  std::__shared_weak_count *v115;
  unint64_t *v116;
  unint64_t v117;
  char *v118;
  unint64_t *v119;
  unint64_t v120;
  unint64_t v121;
  unint64_t v122;
  std::__shared_weak_count *v123;
  unint64_t *v124;
  unint64_t v125;
  unint64_t *v126;
  unint64_t v127;
  uint64_t v128;
  uint64_t v129;
  std::__shared_weak_count *v130;
  uint64_t v131;
  unint64_t *v132;
  unint64_t v133;
  std::__shared_weak_count *v134;
  unint64_t *v135;
  unint64_t v136;
  uint64_t v137;
  uint64_t v138;
  clsp::CLSP_Log *v139;
  unint64_t *v140;
  unint64_t v141;
  __n128 v142;
  unint64_t v143;
  uint64_t v144;
  uint64_t v145;
  clsp::CLSP_Log *v146;
  unint64_t *v147;
  unint64_t v148;
  unint64_t v149;
  uint64_t v150;
  uint64_t v151;
  clsp::CLSP_Log *v152;
  unint64_t *v153;
  unint64_t v154;
  unint64_t v155;
  clsp::CLSP_Log *v157[2];
  clsp::CLSP_Log *v158[2];
  clsp::CLSP_Log *v159[2];
  uint64_t v160;
  std::__shared_weak_count *v161;
  clsp::CLSP_Log *v162;
  std::__shared_weak_count *v163;
  clsp::CLSP_Log *v164;
  std::__shared_weak_count *v165;
  clsp::CLSP_Log *v166[2];
  clsp::CLSP_Log *v167;
  std::__shared_weak_count *v168;
  clsp::CLSP_Log *v169[2];
  clsp::CLSP_Log *v170;
  std::__shared_weak_count *v171;
  clsp::CLSP_Log *v172;
  std::__shared_weak_count *v173;
  clsp::CLSP_Log *v174;
  std::__shared_weak_count *v175;
  clsp::CLSP_Log *v176;
  std::__shared_weak_count *v177;
  clsp::CLSP_Log *v178;
  std::__shared_weak_count *v179;
  clsp::CLSP_Log *v180;
  std::__shared_weak_count *v181;
  clsp::CLSP_Log *__src;
  std::__shared_weak_count *v183;

  v2 = *((_QWORD *)this + 135);
  v3 = *(clsp::CLSP_Log **)(v2 + 80);
  if (!v3)
    goto LABEL_9;
  *(float *)&__src = (float)*((unsigned int *)this + 4);
  clsp::CLSP_Log::LogCLSPData(v3, (const float *)&__src, 1);
  v2 = *((_QWORD *)this + 135);
  v4 = *(clsp::CLSP_Log **)(v2 + 80);
  if (!v4)
    goto LABEL_9;
  v5 = *((double *)this + 3);
  *(float *)&__src = v5;
  clsp::CLSP_Log::LogCLSPData(v4, (const float *)&__src, 1);
  v2 = *((_QWORD *)this + 135);
  v6 = *(clsp::CLSP_Log **)(v2 + 80);
  if (!v6)
    goto LABEL_9;
  v7 = 0.0;
  if (*((_BYTE *)this + 1073))
    v7 = 1.0;
  *(float *)&__src = v7;
  clsp::CLSP_Log::LogCLSPData(v6, (const float *)&__src, 1);
  v2 = *((_QWORD *)this + 135);
  v8 = *(clsp::CLSP_Log **)(v2 + 80);
  if (!v8)
    goto LABEL_9;
  *(float *)&__src = (float)(unint64_t)((uint64_t)(*((_QWORD *)this + 101) - *((_QWORD *)this + 100)) >> 2);
  clsp::CLSP_Log::LogCLSPData(v8, (const float *)&__src, 1);
  v2 = *((_QWORD *)this + 135);
  v9 = *(clsp::CLSP_Log **)(v2 + 80);
  if (v9)
  {
    *(float *)&__src = (float)(unint64_t)((uint64_t)(*((_QWORD *)this + 104) - *((_QWORD *)this + 103)) >> 2);
    clsp::CLSP_Log::LogCLSPData(v9, (const float *)&__src, 1);
    v2 = *((_QWORD *)this + 135);
    v10 = *(clsp::CLSP_Log **)(v2 + 80);
  }
  else
  {
LABEL_9:
    v10 = 0;
  }
  v11 = *(std::__shared_weak_count **)(v2 + 88);
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v13 = __ldxr(p_shared_owners);
    while (__stxr(v13 + 1, p_shared_owners));
  }
  if (v10)
  {
    v14 = *((double *)this + 7);
    *(float *)&__src = v14;
    clsp::CLSP_Log::LogCLSPData(v10, (const float *)&__src, 1);
    v15 = *((double *)this + 8);
    *(float *)&__src = v15;
    clsp::CLSP_Log::LogCLSPData(v10, (const float *)&__src, 1);
    v16 = *((double *)this + 9);
    *(float *)&__src = v16;
    clsp::CLSP_Log::LogCLSPData(v10, (const float *)&__src, 1);
    LODWORD(__src) = *((_DWORD *)this + 20);
    clsp::CLSP_Log::LogCLSPData(v10, (const float *)&__src, 1);
    LODWORD(__src) = *((_DWORD *)this + 21);
    clsp::CLSP_Log::LogCLSPData(v10, (const float *)&__src, 1);
    LODWORD(__src) = *((_DWORD *)this + 22);
    clsp::CLSP_Log::LogCLSPData(v10, (const float *)&__src, 1);
  }
  if (v11)
  {
    v17 = (unint64_t *)&v11->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  v19 = *((_QWORD *)this + 135);
  v21 = *(clsp::CLSP_Log **)(v19 + 80);
  v20 = *(std::__shared_weak_count **)(v19 + 88);
  if (v20)
  {
    v22 = (unint64_t *)&v20->__shared_owners_;
    do
      v23 = __ldxr(v22);
    while (__stxr(v23 + 1, v22));
  }
  if (v21)
  {
    v24 = *((double *)this + 14);
    *(float *)&__src = v24;
    clsp::CLSP_Log::LogCLSPData(v21, (const float *)&__src, 1);
    v25 = *((double *)this + 15);
    *(float *)&__src = v25;
    clsp::CLSP_Log::LogCLSPData(v21, (const float *)&__src, 1);
    v26 = *((double *)this + 16);
    *(float *)&__src = v26;
    clsp::CLSP_Log::LogCLSPData(v21, (const float *)&__src, 1);
    v27 = *((double *)this + 17);
    *(float *)&__src = v27;
    clsp::CLSP_Log::LogCLSPData(v21, (const float *)&__src, 1);
    v28 = *((double *)this + 18);
    *(float *)&__src = v28;
    clsp::CLSP_Log::LogCLSPData(v21, (const float *)&__src, 1);
  }
  if (v20)
  {
    v29 = (unint64_t *)&v20->__shared_owners_;
    do
      v30 = __ldaxr(v29);
    while (__stlxr(v30 - 1, v29));
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
  v31 = *((_QWORD *)this + 135);
  v32 = *(clsp::CLSP_Log **)(v31 + 80);
  v33 = *(std::__shared_weak_count **)(v31 + 88);
  v162 = v32;
  v163 = v33;
  if (v33)
  {
    v34 = (unint64_t *)&v33->__shared_owners_;
    do
      v35 = __ldxr(v34);
    while (__stxr(v35 + 1, v34));
  }
  if (v32)
  {
    v36 = *((double *)this + 19);
    *(float *)&__src = v36;
    clsp::CLSP_Log::LogCLSPData(v32, (const float *)&__src, 1);
    v37 = *((double *)this + 20);
    *(float *)&__src = v37;
    clsp::CLSP_Log::LogCLSPData(v32, (const float *)&__src, 1);
    LODWORD(__src) = *((_DWORD *)this + 42);
    clsp::CLSP_Log::LogCLSPData(v32, (const float *)&__src, 1);
    LODWORD(__src) = *((_DWORD *)this + 43);
    clsp::CLSP_Log::LogCLSPData(v32, (const float *)&__src, 1);
    LODWORD(__src) = *((_DWORD *)this + 44);
    clsp::CLSP_Log::LogCLSPData(v32, (const float *)&__src, 1);
    LODWORD(__src) = *((_DWORD *)this + 45);
    clsp::CLSP_Log::LogCLSPData(v32, (const float *)&__src, 1);
    LODWORD(__src) = *((_DWORD *)this + 46);
    clsp::CLSP_Log::LogCLSPData(v32, (const float *)&__src, 1);
    v38 = *((double *)this + 24);
    *(float *)&__src = v38;
    clsp::CLSP_Log::LogCLSPData(v32, (const float *)&__src, 1);
    LODWORD(__src) = *((_DWORD *)this + 55);
    clsp::CLSP_Log::LogCLSPData(v32, (const float *)&__src, 1);
    LODWORD(__src) = *((_DWORD *)this + 56);
    clsp::CLSP_Log::LogCLSPData(v32, (const float *)&__src, 1);
    LODWORD(__src) = *((_DWORD *)this + 57);
    clsp::CLSP_Log::LogCLSPData(v32, (const float *)&__src, 1);
  }
  v39 = *((_QWORD *)this + 31);
  if (v39)
  {
    __src = v32;
    v183 = v33;
    if (v33)
    {
      v40 = (unint64_t *)&v33->__shared_owners_;
      do
        v41 = __ldxr(v40);
      while (__stxr(v41 + 1, v40));
    }
    (*(void (**)(uint64_t, clsp::CLSP_Log **))(*(_QWORD *)v39 + 24))(v39, &__src);
    v42 = v183;
    if (v183)
    {
      v43 = (unint64_t *)&v183->__shared_owners_;
      do
        v44 = __ldaxr(v43);
      while (__stlxr(v44 - 1, v43));
      if (!v44)
      {
        ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
        std::__shared_weak_count::__release_weak(v42);
      }
    }
  }
  v45 = *((_QWORD *)this + 32);
  if (v45)
  {
    v180 = v162;
    v181 = v163;
    if (v163)
    {
      v46 = &v163->__shared_owners_;
      do
        v47 = __ldxr((unint64_t *)v46);
      while (__stxr(v47 + 1, (unint64_t *)v46));
    }
    (*(void (**)(uint64_t, clsp::CLSP_Log **))(*(_QWORD *)v45 + 24))(v45, &v180);
    v48 = v181;
    if (v181)
    {
      v49 = (unint64_t *)&v181->__shared_owners_;
      do
        v50 = __ldaxr(v49);
      while (__stlxr(v50 - 1, v49));
      if (!v50)
      {
        ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
        std::__shared_weak_count::__release_weak(v48);
      }
    }
  }
  v51 = (char *)this + 280;
  v178 = v162;
  v179 = v163;
  if (v163)
  {
    v52 = &v163->__shared_owners_;
    do
      v53 = __ldxr((unint64_t *)v52);
    while (__stxr(v53 + 1, (unint64_t *)v52));
    clsp::ExponentialSmoother<float,double>::logCoeffs((uint64_t)v51, &v178);
    do
      v54 = __ldaxr((unint64_t *)v52);
    while (__stlxr(v54 - 1, (unint64_t *)v52));
    if (!v54)
    {
      ((void (*)(std::__shared_weak_count *))v163->__on_zero_shared)(v163);
      std::__shared_weak_count::__release_weak(v163);
    }
  }
  else
  {
    clsp::ExponentialSmoother<float,double>::logCoeffs((uint64_t)v51, &v178);
  }
  v55 = (char *)this + 296;
  v176 = v162;
  v177 = v163;
  if (v163)
  {
    v56 = &v163->__shared_owners_;
    do
      v57 = __ldxr((unint64_t *)v56);
    while (__stxr(v57 + 1, (unint64_t *)v56));
    clsp::ExponentialSmoother<float,double>::logCoeffs((uint64_t)v55, &v176);
    do
      v58 = __ldaxr((unint64_t *)v56);
    while (__stlxr(v58 - 1, (unint64_t *)v56));
    if (!v58)
    {
      ((void (*)(std::__shared_weak_count *))v163->__on_zero_shared)(v163);
      std::__shared_weak_count::__release_weak(v163);
    }
  }
  else
  {
    clsp::ExponentialSmoother<float,double>::logCoeffs((uint64_t)v55, &v176);
  }
  v59 = (char *)this + 312;
  v174 = v162;
  v175 = v163;
  if (v163)
  {
    v60 = &v163->__shared_owners_;
    do
      v61 = __ldxr((unint64_t *)v60);
    while (__stxr(v61 + 1, (unint64_t *)v60));
    clsp::ExponentialSmoother<float,double>::logCoeffs((uint64_t)v59, &v174);
    do
      v62 = __ldaxr((unint64_t *)v60);
    while (__stlxr(v62 - 1, (unint64_t *)v60));
    if (!v62)
    {
      ((void (*)(std::__shared_weak_count *))v163->__on_zero_shared)(v163);
      std::__shared_weak_count::__release_weak(v163);
    }
  }
  else
  {
    clsp::ExponentialSmoother<float,double>::logCoeffs((uint64_t)v59, &v174);
  }
  v63 = (char *)this + 328;
  v172 = v162;
  v173 = v163;
  if (v163)
  {
    v64 = &v163->__shared_owners_;
    do
      v65 = __ldxr((unint64_t *)v64);
    while (__stxr(v65 + 1, (unint64_t *)v64));
    clsp::ExponentialSmoother<float,double>::logCoeffs((uint64_t)v63, &v172);
    do
      v66 = __ldaxr((unint64_t *)v64);
    while (__stlxr(v66 - 1, (unint64_t *)v64));
    if (!v66)
    {
      ((void (*)(std::__shared_weak_count *))v163->__on_zero_shared)(v163);
      std::__shared_weak_count::__release_weak(v163);
    }
  }
  else
  {
    clsp::ExponentialSmoother<float,double>::logCoeffs((uint64_t)v63, &v172);
  }
  if (v163)
  {
    v67 = &v163->__shared_owners_;
    do
      v68 = __ldaxr((unint64_t *)v67);
    while (__stlxr(v68 - 1, (unint64_t *)v67));
    if (!v68)
    {
      ((void (*)(std::__shared_weak_count *))v163->__on_zero_shared)(v163);
      std::__shared_weak_count::__release_weak(v163);
    }
  }
  v69 = *((_QWORD *)this + 135);
  v71 = *(clsp::CLSP_Log **)(v69 + 80);
  v70 = *(std::__shared_weak_count **)(v69 + 88);
  if (v70)
  {
    v72 = (unint64_t *)&v70->__shared_owners_;
    do
      v73 = __ldxr(v72);
    while (__stxr(v73 + 1, v72));
  }
  if (v71)
  {
    LODWORD(__src) = *((_DWORD *)this + 108);
    clsp::CLSP_Log::LogCLSPData(v71, (const float *)&__src, 1);
    LODWORD(__src) = *((_DWORD *)this + 109);
    clsp::CLSP_Log::LogCLSPData(v71, (const float *)&__src, 1);
    LODWORD(__src) = *((_DWORD *)this + 110);
    clsp::CLSP_Log::LogCLSPData(v71, (const float *)&__src, 1);
    v74 = *((double *)this + 56);
    *(float *)&__src = v74;
    clsp::CLSP_Log::LogCLSPData(v71, (const float *)&__src, 1);
    LODWORD(__src) = *((_DWORD *)this + 114);
    clsp::CLSP_Log::LogCLSPData(v71, (const float *)&__src, 1);
    v75 = *((double *)this + 58);
    *(float *)&__src = v75;
    clsp::CLSP_Log::LogCLSPData(v71, (const float *)&__src, 1);
    LODWORD(__src) = *((_DWORD *)this + 118);
    clsp::CLSP_Log::LogCLSPData(v71, (const float *)&__src, 1);
    v76 = v71;
  }
  else
  {
    v76 = 0;
  }
  v77 = (double *)((char *)this + 488);
  __src = v76;
  v183 = v70;
  if (v70)
  {
    v78 = (unint64_t *)&v70->__shared_owners_;
    do
      v79 = __ldxr(v78);
    while (__stxr(v79 + 1, v78));
    v80.n128_f32[0] = clsp::ThermalModelOrder1::logCoeffs(v77, &__src);
    do
      v81 = __ldaxr(v78);
    while (__stlxr(v81 - 1, v78));
    if (!v81)
    {
      ((void (*)(std::__shared_weak_count *, __n128))v70->__on_zero_shared)(v70, v80);
      std::__shared_weak_count::__release_weak(v70);
    }
    v180 = v71;
    v181 = v70;
    do
      v82 = __ldxr(v78);
    while (__stxr(v82 + 1, v78));
  }
  else
  {
    clsp::ThermalModelOrder1::logCoeffs(v77, &__src);
    v180 = v71;
    v181 = 0;
  }
  v83.n128_f32[0] = clsp::ThermalModelOrder1::logCoeffs((double *)this + 63, &v180);
  v84 = v181;
  if (v181)
  {
    v85 = (unint64_t *)&v181->__shared_owners_;
    do
      v86 = __ldaxr(v85);
    while (__stlxr(v86 - 1, v85));
    if (!v86)
    {
      ((void (*)(std::__shared_weak_count *, __n128))v84->__on_zero_shared)(v84, v83);
      std::__shared_weak_count::__release_weak(v84);
    }
  }
  v87 = (double *)((char *)this + 520);
  v178 = v71;
  v179 = v70;
  if (v70)
  {
    v88 = (unint64_t *)&v70->__shared_owners_;
    do
      v89 = __ldxr(v88);
    while (__stxr(v89 + 1, v88));
    v90.n128_f32[0] = clsp::ThermalModelOrder1::logCoeffs(v87, &v178);
    do
      v91 = __ldaxr(v88);
    while (__stlxr(v91 - 1, v88));
    if (!v91)
    {
      ((void (*)(std::__shared_weak_count *, __n128))v70->__on_zero_shared)(v70, v90);
      std::__shared_weak_count::__release_weak(v70);
    }
    if (v71)
      goto LABEL_120;
  }
  else
  {
    clsp::ThermalModelOrder1::logCoeffs(v87, &v178);
    if (v71)
    {
LABEL_120:
      *(float *)&v176 = (float)*((unsigned int *)this + 134);
      clsp::CLSP_Log::LogCLSPData(v71, (const float *)&v176, 1);
      *(float *)&v176 = (float)*((unsigned int *)this + 135);
      clsp::CLSP_Log::LogCLSPData(v71, (const float *)&v176, 1);
      *(float *)&v176 = (float)*((unsigned int *)this + 136);
      clsp::CLSP_Log::LogCLSPData(v71, (const float *)&v176, 1);
      v92 = v71;
      goto LABEL_123;
    }
  }
  v92 = 0;
LABEL_123:
  v93 = (float *)((char *)this + 568);
  v176 = v92;
  v177 = v70;
  if (v70)
  {
    v94 = (unint64_t *)&v70->__shared_owners_;
    do
      v95 = __ldxr(v94);
    while (__stxr(v95 + 1, v94));
    clsp::IIRTwoPole<float>::logCoeffs(v93, &v176);
    do
      v96 = __ldaxr(v94);
    while (__stlxr(v96 - 1, v94));
    if (!v96)
    {
      ((void (*)(std::__shared_weak_count *))v70->__on_zero_shared)(v70);
      std::__shared_weak_count::__release_weak(v70);
    }
    v174 = v71;
    v175 = v70;
    do
      v97 = __ldxr(v94);
    while (__stxr(v97 + 1, v94));
  }
  else
  {
    clsp::IIRTwoPole<float>::logCoeffs(v93, &v176);
    v174 = v71;
    v175 = 0;
  }
  clsp::IIRTwoPole<float>::logCoeffs((float *)this + 147, &v174);
  v98 = v175;
  if (v175)
  {
    v99 = (unint64_t *)&v175->__shared_owners_;
    do
      v100 = __ldaxr(v99);
    while (__stlxr(v100 - 1, v99));
    if (!v100)
    {
      ((void (*)(std::__shared_weak_count *))v98->__on_zero_shared)(v98);
      std::__shared_weak_count::__release_weak(v98);
    }
  }
  v101 = (float *)((char *)this + 608);
  v172 = v71;
  v173 = v70;
  if (v70)
  {
    v102 = (unint64_t *)&v70->__shared_owners_;
    do
      v103 = __ldxr(v102);
    while (__stxr(v103 + 1, v102));
    clsp::IIRTwoPole<float>::logCoeffs(v101, &v172);
    do
      v104 = __ldaxr(v102);
    while (__stlxr(v104 - 1, v102));
    if (!v104)
    {
      ((void (*)(std::__shared_weak_count *))v70->__on_zero_shared)(v70);
      std::__shared_weak_count::__release_weak(v70);
    }
    v170 = v71;
    v171 = v70;
    do
      v105 = __ldxr(v102);
    while (__stxr(v105 + 1, v102));
  }
  else
  {
    clsp::IIRTwoPole<float>::logCoeffs(v101, &v172);
    v170 = v71;
    v171 = 0;
  }
  v106.n128_f32[0] = clsp::AttackRelease<float,double>::logCoeffs((uint64_t)this + 632, &v170);
  v107 = v171;
  if (v171)
  {
    v108 = (unint64_t *)&v171->__shared_owners_;
    do
      v109 = __ldaxr(v108);
    while (__stlxr(v109 - 1, v108));
    if (!v109)
    {
      ((void (*)(std::__shared_weak_count *, __n128))v107->__on_zero_shared)(v107, v106);
      std::__shared_weak_count::__release_weak(v107);
    }
  }
  v110 = (char *)this + 680;
  v169[0] = v71;
  v169[1] = (clsp::CLSP_Log *)v70;
  if (v70)
  {
    v111 = (unint64_t *)&v70->__shared_owners_;
    do
      v112 = __ldxr(v111);
    while (__stxr(v112 + 1, v111));
    clsp::ExponentialSmoother<float,double>::logCoeffs((uint64_t)v110, v169);
    do
      v113 = __ldaxr(v111);
    while (__stlxr(v113 - 1, v111));
    if (!v113)
    {
      ((void (*)(std::__shared_weak_count *))v70->__on_zero_shared)(v70);
      std::__shared_weak_count::__release_weak(v70);
    }
    v167 = v71;
    v168 = v70;
    do
      v114 = __ldxr(v111);
    while (__stxr(v114 + 1, v111));
  }
  else
  {
    clsp::ExponentialSmoother<float,double>::logCoeffs((uint64_t)v110, v169);
    v167 = v71;
    v168 = 0;
  }
  clsp::ExponentialSmoother<float,double>::logCoeffs((uint64_t)this + 696, &v167);
  v115 = v168;
  if (v168)
  {
    v116 = (unint64_t *)&v168->__shared_owners_;
    do
      v117 = __ldaxr(v116);
    while (__stlxr(v117 - 1, v116));
    if (!v117)
    {
      ((void (*)(std::__shared_weak_count *))v115->__on_zero_shared)(v115);
      std::__shared_weak_count::__release_weak(v115);
    }
  }
  v118 = (char *)this + 712;
  v166[0] = v71;
  v166[1] = (clsp::CLSP_Log *)v70;
  if (v70)
  {
    v119 = (unint64_t *)&v70->__shared_owners_;
    do
      v120 = __ldxr(v119);
    while (__stxr(v120 + 1, v119));
    clsp::ExponentialSmoother<float,double>::logCoeffs((uint64_t)v118, v166);
    do
      v121 = __ldaxr(v119);
    while (__stlxr(v121 - 1, v119));
    if (!v121)
    {
      ((void (*)(std::__shared_weak_count *))v70->__on_zero_shared)(v70);
      std::__shared_weak_count::__release_weak(v70);
    }
    v164 = v71;
    v165 = v70;
    do
      v122 = __ldxr(v119);
    while (__stxr(v122 + 1, v119));
  }
  else
  {
    clsp::ExponentialSmoother<float,double>::logCoeffs((uint64_t)v118, v166);
    v164 = v71;
    v165 = 0;
  }
  clsp::ExponentialSmoother<float,double>::logCoeffs((uint64_t)this + 728, &v164);
  v123 = v165;
  if (v165)
  {
    v124 = (unint64_t *)&v165->__shared_owners_;
    do
      v125 = __ldaxr(v124);
    while (__stlxr(v125 - 1, v124));
    if (!v125)
    {
      ((void (*)(std::__shared_weak_count *))v123->__on_zero_shared)(v123);
      std::__shared_weak_count::__release_weak(v123);
    }
  }
  if (v70)
  {
    v126 = (unint64_t *)&v70->__shared_owners_;
    do
      v127 = __ldaxr(v126);
    while (__stlxr(v127 - 1, v126));
    if (!v127)
    {
      ((void (*)(std::__shared_weak_count *))v70->__on_zero_shared)(v70);
      std::__shared_weak_count::__release_weak(v70);
    }
  }
  v128 = *((_QWORD *)this + 53);
  v129 = *((_QWORD *)this + 135);
  v131 = *(_QWORD *)(v129 + 80);
  v130 = *(std::__shared_weak_count **)(v129 + 88);
  v160 = v131;
  v161 = v130;
  if (v130)
  {
    v132 = (unint64_t *)&v130->__shared_owners_;
    do
      v133 = __ldxr(v132);
    while (__stxr(v133 + 1, v132));
  }
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v128 + 24))(v128, &v160);
  v134 = v161;
  if (v161)
  {
    v135 = (unint64_t *)&v161->__shared_owners_;
    do
      v136 = __ldaxr(v135);
    while (__stlxr(v136 - 1, v135));
    if (!v136)
    {
      ((void (*)(std::__shared_weak_count *))v134->__on_zero_shared)(v134);
      std::__shared_weak_count::__release_weak(v134);
    }
  }
  v137 = *((_QWORD *)this + 97);
  v138 = *((_QWORD *)this + 135);
  v139 = *(clsp::CLSP_Log **)(v138 + 88);
  v159[0] = *(clsp::CLSP_Log **)(v138 + 80);
  v159[1] = v139;
  if (v139)
  {
    v140 = (unint64_t *)((char *)v139 + 8);
    do
      v141 = __ldxr(v140);
    while (__stxr(v141 + 1, v140));
    v142.n128_f32[0] = clsp::DelayLine<float,double>::logCoeffs(v137, v159);
    do
      v143 = __ldaxr(v140);
    while (__stlxr(v143 - 1, v140));
    if (!v143)
    {
      (*(void (**)(clsp::CLSP_Log *, __n128))(*(_QWORD *)v139 + 16))(v139, v142);
      std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v139);
    }
  }
  else
  {
    v142.n128_f32[0] = clsp::DelayLine<float,double>::logCoeffs(v137, v159);
  }
  v144 = *((_QWORD *)this + 125);
  if (v144)
  {
    v145 = *((_QWORD *)this + 135);
    v146 = *(clsp::CLSP_Log **)(v145 + 88);
    v158[0] = *(clsp::CLSP_Log **)(v145 + 80);
    v158[1] = v146;
    if (v146)
    {
      v147 = (unint64_t *)((char *)v146 + 8);
      do
        v148 = __ldxr(v147);
      while (__stxr(v148 + 1, v147));
      v142.n128_f32[0] = clsp::DelayLine<float,double>::logCoeffs(v144, v158);
      do
        v149 = __ldaxr(v147);
      while (__stlxr(v149 - 1, v147));
      if (!v149)
      {
        (*(void (**)(clsp::CLSP_Log *, __n128))(*(_QWORD *)v146 + 16))(v146, v142);
        std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v146);
      }
    }
    else
    {
      v142.n128_f32[0] = clsp::DelayLine<float,double>::logCoeffs(v144, v158);
    }
  }
  v150 = *((_QWORD *)this + 126);
  if (v150)
  {
    v151 = *((_QWORD *)this + 135);
    v152 = *(clsp::CLSP_Log **)(v151 + 88);
    v157[0] = *(clsp::CLSP_Log **)(v151 + 80);
    v157[1] = v152;
    if (v152)
    {
      v153 = (unint64_t *)((char *)v152 + 8);
      do
        v154 = __ldxr(v153);
      while (__stxr(v154 + 1, v153));
      v142.n128_f32[0] = clsp::DelayLine<float,double>::logCoeffs(v150, v157);
      do
        v155 = __ldaxr(v153);
      while (__stlxr(v155 - 1, v153));
      if (!v155)
      {
        (*(void (**)(clsp::CLSP_Log *, __n128))(*(_QWORD *)v152 + 16))(v152, v142);
        std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v152);
      }
    }
    else
    {
      v142.n128_f32[0] = clsp::DelayLine<float,double>::logCoeffs(v150, v157);
    }
  }
  return v142.n128_f32[0];
}

void sub_1B63ED7A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v9;
  va_list va;

  va_start(va, a9);
  std::shared_ptr<vp::services::Telephony_Utility>::~shared_ptr[abi:ne180100](v9 - 80);
  std::shared_ptr<vp::services::Telephony_Utility>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

float clsp::ThermalController::postProcess(clsp::ThermalController *this, float *a2, const float *__A, vDSP_Length __N)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  float *v14;
  vDSP_Length v15;
  float v16;
  float v17;
  float v18;
  float v19;
  float *v20;
  float result;

  v4 = *((_QWORD *)this + 6);
  if (!v4)
    __assert_rtn("postProcess", "CLSPBlocks.h", 1336, "mr_elecModel");
  v6 = *((_QWORD *)this + 40);
  if (!v6)
    __assert_rtn("postProcess", "CLSPBlocks.h", 1337, "mr_CLTModule");
  if (!*((_BYTE *)this + 313))
    goto LABEL_7;
  v10 = *(_QWORD *)(v6 + 96);
  if (!v10)
  {
    v11 = 0;
    goto LABEL_9;
  }
  if (*(_BYTE *)(v10 + 89))
  {
    v10 = *(unsigned int *)(v6 + 80);
    v11 = 0x100000000;
  }
  else
  {
LABEL_7:
    v11 = 0;
    v10 = 0;
  }
LABEL_9:
  v12 = v10 | v11;
  *(float *)(v4 + 44) = clsp::ElectricalModel::computePower(*((float **)this + 6), __A, __N, v10 | v11)
                      + *(float *)(v4 + 44);
  v13 = *((_QWORD *)this + 40);
  if (*(_BYTE *)(v13 + 112) && *(_QWORD *)(v13 + 104))
  {
    if (__N)
    {
      v14 = (float *)__A;
      v15 = __N;
      do
      {
        v16 = *(float *)(v13 + 172)
            + (float)(*(float *)(v13 + 168) * (float)(*(float *)(v13 + 156) - *(float *)(v13 + 172)));
        v17 = *(float *)(v13 + 184);
        v18 = *(float *)(v13 + 188);
        *(float *)(v13 + 172) = v16;
        v19 = v18 + (float)(v17 * (float)(v16 - v18));
        *(float *)(v13 + 188) = v19;
        *v14++ = v19;
        *(float *)(v13 + 204) = *(float *)(v13 + 204)
                              + (float)(*(float *)(v13 + 200) * (float)(*(float *)(v13 + 80) - *(float *)(v13 + 204)));
        --v15;
      }
      while (v15);
    }
    vDSP_vsmul(a2, 1, (const float *)(v13 + 76), a2, 1, __N);
    (*(void (**)(_QWORD, float *, const float *, vDSP_Length))(**(_QWORD **)(v13 + 104) + 56))(*(_QWORD *)(v13 + 104), a2, __A, __N);
  }
  v20 = (float *)*((_QWORD *)this + 6);
  result = clsp::ElectricalModel::computePower(v20, a2, __N, v12) + v20[9];
  v20[9] = result;
  return result;
}

uint64_t clsp::CLSPKernel_v5::ZapBadValues(clsp::CLSPKernel_v5 *this)
{
  float v2;
  double v3;
  float v5;
  double v6;
  uint64_t result;
  float v9;
  float v11;
  float v13;
  float v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float v19;
  float v20;
  float v21;
  float v22;
  float v23;

  v2 = *((float *)this + 23);
  v3 = fabsf(v2);
  if (v3 >= 1.0e15 || v3 <= 1.0e-15)
    v2 = 0.0;
  *((float *)this + 23) = v2;
  v5 = *((float *)this + 25);
  v6 = fabsf(v5);
  if (v6 >= 1.0e15 || v6 <= 1.0e-15)
    v5 = 0.0;
  *((float *)this + 25) = v5;
  result = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 53) + 224))(*((_QWORD *)this + 53));
  v9 = *((float *)this + 166);
  if (v9 < 0.01 || v9 > 1.0)
    *((_DWORD *)this + 166) = 1008981770;
  v11 = *((float *)this + 173);
  if (v11 < 0.01 || v11 > 1.0)
    *((_DWORD *)this + 173) = 1008981770;
  v13 = *((float *)this + 177);
  if (v13 < 0.01 || v13 > 1.0)
    *((_DWORD *)this + 177) = 1008981770;
  v14 = *((float *)this + 181);
  if (v14 < 0.01 || v14 > 1.0)
    *((_DWORD *)this + 181) = 1008981770;
  v15 = *((float *)this + 185);
  if (v15 < 0.01 || v15 > 1.0)
    *((_DWORD *)this + 185) = 1008981770;
  v16 = *((float *)this + 140);
  if (v16 < 0.01 || v16 > 1.0)
    *((_DWORD *)this + 140) = 1008981770;
  v17 = *((float *)this + 139);
  if (v17 < 0.01 || v17 > 1.0)
    *((_DWORD *)this + 139) = 1008981770;
  v18 = *((float *)this + 156);
  if (v18 < 0.0 || v18 > 1000.0)
  {
    v19 = *((float *)this + 108) - *((float *)this + 110);
    result = shouldTraceRender();
    v20 = *((double *)this + 61);
    v21 = *((double *)this + 63);
    v22 = v20 + v21;
    v23 = (float)(v19 * v20) / (float)(v20 + v21);
    *((float *)this + 146) = v23;
    *((float *)this + 151) = (float)(v19 * v21) / v22;
    *((float *)this + 156) = v23;
  }
  if (*((_DWORD *)this + 138) > *((_DWORD *)this + 135))
    *((_DWORD *)this + 138) = 0;
  return result;
}

float clsp::ElectricalModel::computePower(float *a1, const float *__A, vDSP_Length __N, uint64_t a4)
{
  float v6;
  float __C;

  __C = 0.0;
  vDSP_svesq(__A, 1, &__C, __N);
  if ((a4 & 0xFF00000000) != 0)
    v6 = 1.0 / *(float *)&a4;
  else
    v6 = a1[7];
  return a1[6] * a1[6] * v6 * a1[8] * __C;
}

float clsp::DelayLine<float,double>::logCoeffs(uint64_t a1, clsp::CLSP_Log **a2)
{
  clsp::CLSP_Log *v3;
  float v5;
  float result;
  clsp::CLSP_Log *v7;
  clsp::CLSP_Log *v8;
  clsp::CLSP_Log *v9;
  float __src;

  v3 = *a2;
  if (*a2)
  {
    v5 = *(double *)a1;
    __src = v5;
    clsp::CLSP_Log::LogCLSPData(v3, &__src, 1);
    v7 = *a2;
    if (*a2)
    {
      __src = (float)*(unint64_t *)(a1 + 8);
      clsp::CLSP_Log::LogCLSPData(v7, &__src, 1);
      v8 = *a2;
      if (*a2)
      {
        __src = (float)(unint64_t)((uint64_t)(*(_QWORD *)(a1 + 24) - *(_QWORD *)(a1 + 16)) >> 2);
        clsp::CLSP_Log::LogCLSPData(v8, &__src, 1);
        v9 = *a2;
        if (*a2)
        {
          __src = (float)(unint64_t)((uint64_t)(*(_QWORD *)(a1 + 48) - *(_QWORD *)(a1 + 40)) >> 2);
          clsp::CLSP_Log::LogCLSPData(v9, &__src, 1);
        }
      }
    }
  }
  return result;
}

float clsp::ThermalModelOrder1::logCoeffs(double *a1, clsp::CLSP_Log **a2)
{
  clsp::CLSP_Log *v3;
  float v5;
  float result;
  clsp::CLSP_Log *v7;
  float v8;
  float __src;
  float v10;

  v3 = *a2;
  if (*a2)
  {
    v5 = *a1;
    __src = v5;
    clsp::CLSP_Log::LogCLSPData(v3, &__src, 1);
    v7 = *a2;
    if (*a2)
    {
      v8 = a1[1];
      v10 = v8;
      clsp::CLSP_Log::LogCLSPData(v7, &v10, 1);
    }
  }
  return result;
}

void std::__shared_ptr_emplace<clsp::SpeakerModelNonlinearParams>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E69DA918;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<clsp::SpeakerModelNonlinearParams>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E69DA918;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1BCC95CECLL);
}

void std::__shared_ptr_emplace<clsp::SpeakerModelNonlinearParams>::__on_zero_shared(_QWORD *a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  v2 = (void *)a1[18];
  if (v2)
  {
    a1[19] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[15];
  if (v3)
  {
    a1[16] = v3;
    operator delete(v3);
  }
  v4 = (void *)a1[12];
  if (v4)
  {
    a1[13] = v4;
    operator delete(v4);
  }
  v5 = (void *)a1[9];
  if (v5)
  {
    a1[10] = v5;
    operator delete(v5);
  }
}

void std::__shared_ptr_emplace<clsp::ParameterUpdater>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E69DA8E0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<clsp::ParameterUpdater>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E69DA8E0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1BCC95CECLL);
}

void std::__shared_ptr_emplace<clsp::ParameterUpdater>::__on_zero_shared(_QWORD *a1)
{
  void *v2;
  void *v3;
  void *v4;

  v2 = (void *)a1[131];
  if (v2)
  {
    a1[132] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[128];
  if (v3)
  {
    a1[129] = v3;
    operator delete(v3);
  }
  v4 = (void *)a1[125];
  if (v4)
  {
    a1[126] = v4;
    operator delete(v4);
  }
  CACFDictionary::~CACFDictionary((CACFDictionary *)(a1 + 3));
}

void clsp::DelayLine<float,double>::calcCoeffs(double *a1, double a2)
{
  double v4;
  unint64_t v5;
  unint64_t v6;
  NSObject **v7;
  NSObject *v8;
  uint64_t v9;
  uint64_t v10;
  NSObject *v11;
  uint64_t v12;
  int v13;
  const char *v14;
  __int16 v15;
  int v16;
  __int16 v17;
  double v18;
  __int16 v19;
  double v20;
  __int16 v21;
  int v22;
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  v4 = *a1;
  v5 = vcvtad_u64_f64(*a1 * 0.001 * a2);
  v6 = (uint64_t)(*((_QWORD *)a1 + 3) - *((_QWORD *)a1 + 2)) >> 2;
  if (v6 >= v5)
  {
    *((_QWORD *)a1 + 1) = v5;
  }
  else
  {
    *((_QWORD *)a1 + 1) = v6;
    v7 = (NSObject **)spp3Subsystem();
    if (v7)
    {
      v8 = *v7;
      if (!*v7)
        goto LABEL_9;
    }
    else
    {
      v8 = MEMORY[0x1E0C81028];
    }
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      v9 = (*((_QWORD *)a1 + 3) - *((_QWORD *)a1 + 2)) >> 2;
      v13 = 136316162;
      v14 = "DSPBlocks.h";
      v15 = 1024;
      v16 = 945;
      v17 = 2048;
      v18 = v4;
      v19 = 2048;
      v20 = a2;
      v21 = 1024;
      v22 = v9;
      _os_log_impl(&dword_1B5ED0000, v8, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Delay %f ms at fs=%f is bigger than delay buffer of %u samples", (uint8_t *)&v13, 0x2Cu);
    }
  }
LABEL_9:
  v10 = spp3Subsystem();
  if (v10)
  {
    if ((*(_BYTE *)(v10 + 8) & 1) != 0)
    {
      v11 = *(NSObject **)v10;
      if (*(_QWORD *)v10)
      {
        if (os_log_type_enabled(*(os_log_t *)v10, OS_LOG_TYPE_DEBUG))
        {
          v12 = (*((_QWORD *)a1 + 3) - *((_QWORD *)a1 + 2)) >> 2;
          v13 = 136315650;
          v14 = "DSPBlocks.h";
          v15 = 1024;
          v16 = 949;
          v17 = 1024;
          LODWORD(v18) = v12;
          _os_log_impl(&dword_1B5ED0000, v11, OS_LOG_TYPE_DEBUG, "%25s:%-5d Size of delay line %d", (uint8_t *)&v13, 0x18u);
        }
      }
    }
  }
}

void clsp::ClosedLoopThermalModule::setPilotGenType(uint64_t a1, int a2, __int128 *a3, __int128 *a4, double a5)
{
  uint64_t v10;
  __int128 v11;
  unint64_t v12;
  double v13;
  double v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  __int128 v19;
  float v20;
  double v21;
  double v22;
  double v23;
  double v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  __int128 v29;
  __int128 v30;
  float v31;
  __double2 v32;
  float v33;
  float cosval;
  float sinval;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  NSObject **v39;
  NSObject *v40;
  int v41;
  const char *v42;
  __int16 v43;
  int v44;
  uint64_t v45;

  v45 = *MEMORY[0x1E0C80C00];
  if (a2)
  {
    if (a2 == 1)
    {
      v27 = operator new();
      *(_QWORD *)v27 = &off_1E69E0EB8;
      *(_OWORD *)(v27 + 8) = 0u;
      *(_OWORD *)(v27 + 24) = 0u;
      v28 = *(_QWORD *)(a1 + 104);
      *(_QWORD *)(a1 + 104) = v27;
      if (v28)
        (*(void (**)(uint64_t))(*(_QWORD *)v28 + 8))(v28);
      v17 = operator new();
      v29 = *a4;
      *(_OWORD *)(v17 + 24) = a4[1];
      *(_OWORD *)(v17 + 8) = v29;
      v30 = a4[3];
      *(_OWORD *)(v17 + 40) = a4[2];
      *(_OWORD *)(v17 + 56) = v30;
      *(_OWORD *)(v17 + 72) = a4[4];
      *(_WORD *)(v17 + 88) = 0;
      *(_QWORD *)v17 = &off_1E69E0F18;
      *(_DWORD *)(v17 + 92) = 1;
      *(_QWORD *)(v17 + 96) = 0x3F80000000000000;
      v31 = *(double *)(v17 + 32);
      *(float *)(v17 + 112) = v31;
      *(_DWORD *)(v17 + 116) = 0;
      v32 = __sincos_stret(*(double *)(v17 + 16));
      v33 = v32.__cosval + v32.__cosval;
      *(_QWORD *)(v17 + 124) = 0;
      *(float *)(v17 + 120) = v33;
      cosval = v32.__cosval;
      sinval = v32.__sinval;
      *(float *)(v17 + 132) = cosval;
      *(float *)(v17 + 136) = sinval;
      *(_QWORD *)(v17 + 144) = 0;
      *(float *)(v17 + 140) = v33;
      *(float *)(v17 + 152) = cosval;
      *(float *)(v17 + 156) = sinval;
      goto LABEL_24;
    }
    if (a2 == 2)
    {
      v10 = operator new();
      *(_OWORD *)(v10 + 40) = a3[2];
      v11 = *a3;
      *(_OWORD *)(v10 + 24) = a3[1];
      *(_QWORD *)v10 = &off_1E69E0DF8;
      *(_OWORD *)(v10 + 8) = v11;
      v12 = *((_QWORD *)a3 + 6);
      *(_QWORD *)(v10 + 56) = v12;
      *(float32x2_t *)(v10 + 64) = vcvt_f32_f64(*(float64x2_t *)(v10 + 40));
      *(_QWORD *)(v10 + 72) = 0;
      *(_DWORD *)(v10 + 80) = 0;
      LODWORD(v12) = vcvtpd_u64_f64(a5 / *(double *)(v10 + 24));
      std::vector<float>::vector((_QWORD *)(v10 + 88), ((*(_QWORD *)(v10 + 32) + v12 - 1) / v12));
      std::vector<float>::vector((_QWORD *)(v10 + 112), *(_QWORD *)(v10 + 32));
      *(_QWORD *)(v10 + 136) = 0x100000001;
      *(_QWORD *)(v10 + 144) = 9;
      *(_QWORD *)(v10 + 152) = 0;
      *(_QWORD *)(v10 + 160) = 0;
      *(_DWORD *)(v10 + 168) = 0;
      v13 = *(double *)(v10 + 24);
      if (v13 / a5 <= 1.0)
        v14 = 1.0;
      else
        v14 = 1.0 / (v13 / a5);
      AT::Resampler::createWithFilterSpecification((AT::Resampler *)0x6E6F726D, v13, a5, 60.0, v14 * ((*(double *)(v10 + 16) + *(double *)(v10 + 16)) / v13), 0.0);
      *(_QWORD *)(v10 + 184) = v10 + 136;
      *(_QWORD *)(v10 + 192) = v10 + 152;
      shouldTraceRender();
      (*(void (**)(_QWORD, float *(*)(float *, float *, int **, void *), uint64_t))(**(_QWORD **)(v10 + 176) + 64))(*(_QWORD *)(v10 + 176), clsp::LPMLSGen::generateMLS, v10 + 184);
      v15 = *(_QWORD *)(a1 + 104);
      *(_QWORD *)(a1 + 104) = v10;
      if (v15)
        (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
      v16 = operator new();
      v17 = v16;
      v18 = *a4;
      *(_OWORD *)(v16 + 24) = a4[1];
      v19 = a4[3];
      *(_OWORD *)(v16 + 40) = a4[2];
      *(_OWORD *)(v16 + 56) = v19;
      *(_OWORD *)(v16 + 72) = a4[4];
      *(_OWORD *)(v16 + 8) = v18;
      *(_WORD *)(v16 + 88) = 0;
      *(_QWORD *)v16 = &off_1E69E0E58;
      *(_DWORD *)(v16 + 92) = 1;
      *(_QWORD *)(v16 + 96) = 0x3F80000000000000;
      v20 = *(double *)(v16 + 32);
      *(float *)(v16 + 104) = v20;
      *(_OWORD *)(v16 + 108) = 0u;
      *(_OWORD *)(v16 + 124) = 0u;
      *(_OWORD *)(v16 + 140) = 0u;
      *(_DWORD *)(v16 + 156) = 0;
      v21 = *(double *)(v16 + 72);
      if (a5 / v21 <= 1.0)
        v22 = 1.0;
      else
        v22 = 1.0 / (a5 / v21);
      AT::Resampler::createWithFilterSpecification((AT::Resampler *)0x6E6F726D, a5, v21, 60.0, v22 * ((*(double *)(v16 + 16) + *(double *)(v16 + 16)) / v21), 0.0);
      v23 = *(double *)(v17 + 72);
      if (a5 / v23 <= 1.0)
        v24 = 1.0;
      else
        v24 = 1.0 / (a5 / v23);
      AT::Resampler::createWithFilterSpecification((AT::Resampler *)0x6E6F726D, a5, v23, 60.0, v24 * ((*(double *)(v17 + 16) + *(double *)(v17 + 16)) / v23), 0.0);
      std::vector<float>::vector((_QWORD *)(v17 + 176), (*(_DWORD *)(v17 + 64) - 1) / vcvtpd_u64_f64(a5 / *(double *)(v17 + 72)) + 1);
      std::vector<float>::vector((_QWORD *)(v17 + 200), (uint64_t)(*(_QWORD *)(v17 + 184) - *(_QWORD *)(v17 + 176)) >> 2);
LABEL_24:
      v36 = *(_QWORD *)(a1 + 96);
      *(_QWORD *)(a1 + 96) = v17;
      if (v36)
        (*(void (**)(uint64_t))(*(_QWORD *)v36 + 8))(v36);
      goto LABEL_36;
    }
    v37 = *(_QWORD *)(a1 + 104);
    *(_QWORD *)(a1 + 104) = 0;
    if (v37)
      (*(void (**)(uint64_t))(*(_QWORD *)v37 + 8))(v37);
    v38 = *(_QWORD *)(a1 + 96);
    *(_QWORD *)(a1 + 96) = 0;
    if (v38)
      (*(void (**)(uint64_t))(*(_QWORD *)v38 + 8))(v38);
    v39 = (NSObject **)spp3SubsystemAsync();
    if (v39)
    {
      v40 = *v39;
      if (!*v39)
        goto LABEL_36;
    }
    else
    {
      v40 = MEMORY[0x1E0C81028];
    }
    if (os_log_type_enabled(v40, OS_LOG_TYPE_ERROR))
    {
      v41 = 136315394;
      v42 = "CLSPBlocks.h";
      v43 = 1024;
      v44 = 708;
      _os_log_impl(&dword_1B5ED0000, v40, OS_LOG_TYPE_ERROR, "%25s:%-5d Acting on invalid ThermalMeasurementType", (uint8_t *)&v41, 0x12u);
    }
  }
  else
  {
    v25 = *(_QWORD *)(a1 + 104);
    *(_QWORD *)(a1 + 104) = 0;
    if (v25)
      (*(void (**)(uint64_t))(*(_QWORD *)v25 + 8))(v25);
    v26 = *(_QWORD *)(a1 + 96);
    *(_QWORD *)(a1 + 96) = 0;
    if (v26)
      (*(void (**)(uint64_t))(*(_QWORD *)v26 + 8))(v26);
    shouldTraceRender();
  }
LABEL_36:
  *(_DWORD *)(a1 + 64) = a2;
}

void sub_1B63EE534(_Unwind_Exception *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t *v3;
  void **v4;
  void *v6;
  uint64_t v7;
  uint64_t v8;

  v6 = *v4;
  if (*v4)
  {
    *(_QWORD *)(v2 + 184) = v6;
    operator delete(v6);
  }
  v7 = *v3;
  *v3 = 0;
  if (v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  v8 = *v1;
  *v1 = 0;
  if (v8)
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  MEMORY[0x1BCC95CEC](v2, 0x10A1C4074ECAE13);
  _Unwind_Resume(a1);
}

void clsp::PilotToneGen::~PilotToneGen(clsp::PilotToneGen *this)
{
  void *v2;

  *(_QWORD *)this = &off_1E69E0EB8;
  v2 = (void *)*((_QWORD *)this + 2);
  if (v2)
  {
    *((_QWORD *)this + 3) = v2;
    operator delete(v2);
  }
}

{
  void *v2;

  *(_QWORD *)this = &off_1E69E0EB8;
  v2 = (void *)*((_QWORD *)this + 2);
  if (v2)
  {
    *((_QWORD *)this + 3) = v2;
    operator delete(v2);
  }
  JUMPOUT(0x1BCC95CECLL);
}

_QWORD *clsp::PilotToneGen::dump(uint64_t a1, _QWORD *a2)
{
  _QWORD *v3;
  char v5;

  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"ptg buffer size = ", 18);
  v3 = (_QWORD *)std::ostream::operator<<();
  v5 = 10;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)&v5, 1);
  return a2;
}

float clsp::PilotToneGen::logCoeffs(uint64_t a1, clsp::CLSP_Log **a2)
{
  clsp::CLSP_Log *v3;
  float result;
  float __src;

  v3 = *a2;
  if (*a2)
  {
    __src = (float)(unint64_t)((uint64_t)(*(_QWORD *)(a1 + 24) - *(_QWORD *)(a1 + 16)) >> 2);
    clsp::CLSP_Log::LogCLSPData(v3, &__src, 1);
  }
  return result;
}

uint64_t clsp::PilotToneGen::reset(uint64_t this)
{
  *(_QWORD *)(this + 8) = 0;
  return this;
}

void clsp::PilotToneGen::calcCoeffs(uint64_t a1, double *a2, double a3)
{
  unint64_t v6;
  double v7;
  unint64_t v8;
  double v9;
  NSObject **v10;
  NSObject *v11;
  float *v12;
  uint64_t v13;
  uint64_t v14;
  double v15;
  unint64_t v16;
  uint64_t v17;
  double v18;
  float v19;
  long double __y;
  uint8_t buf[4];
  const char *v22;
  __int16 v23;
  int v24;
  __int16 v25;
  double v26;
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  v6 = *(unsigned int *)a2;
  *(_DWORD *)buf = 0;
  std::vector<float>::resize(a1 + 16, v6, buf);
  v7 = a2[1];
  LODWORD(v8) = *(_DWORD *)a2;
  v9 = v7 * (double)v8 / a3;
  if (modf(v9, &__y) > 0.000000999999997)
  {
    v10 = (NSObject **)spp3Subsystem();
    if (v10)
    {
      v11 = *v10;
      if (!*v10)
        goto LABEL_8;
    }
    else
    {
      v11 = MEMORY[0x1E0C81028];
    }
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136315650;
      v22 = "DSPBlocks.h";
      v23 = 1024;
      v24 = 1336;
      v25 = 2048;
      v26 = v9;
      _os_log_impl(&dword_1B5ED0000, v11, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Analysis period %f is not integer multiple of sine period", buf, 0x1Cu);
    }
  }
LABEL_8:
  v13 = a1 + 16;
  v12 = *(float **)(a1 + 16);
  v14 = *(_QWORD *)(v13 + 8) - (_QWORD)v12;
  if (v14)
  {
    v15 = v7 * 6.28318531 / a3;
    v16 = v14 >> 2;
    if (v16 <= 1)
      v17 = 1;
    else
      v17 = v16;
    v18 = 0.0;
    do
    {
      v19 = sin(v15 * v18);
      *v12++ = v19;
      v18 = v18 + 1.0;
      --v17;
    }
    while (v17);
  }
}

void clsp::PilotToneGen::envelopeAndAddToBuffer(clsp::PilotToneGen *this, float *__C, const float *__A, unint64_t a4)
{
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  vDSP_Length v12;
  vDSP_Length __N;

  if (a4)
  {
    v8 = 0;
    v9 = *((_QWORD *)this + 2);
    v10 = *((_QWORD *)this + 3);
    v11 = *((_QWORD *)this + 1);
    do
    {
      v12 = ((v10 - v9) >> 2) - v11;
      if (a4 - v8 >= v12)
        __N = v12;
      else
        __N = a4 - v8;
      vDSP_vma(__A, 1, (const float *)(v9 + 4 * v11), 1, __C, 1, __C, 1, __N);
      v9 = *((_QWORD *)this + 2);
      v11 = __N + *((_QWORD *)this + 1);
      v10 = *((_QWORD *)this + 3);
      if (v11 >= (v10 - v9) >> 2)
        v11 = 0;
      *((_QWORD *)this + 1) = v11;
      v8 += __N;
    }
    while (v8 < a4);
  }
}

float clsp::PilotGen::getPrePeak(clsp::PilotGen *this)
{
  return 0.0;
}

float *clsp::LPMLSGen::generateMLS(float *this, float *a2, int **a3, void *a4)
{
  int *v4;
  float *v5;
  int v6;
  unsigned int v7;
  int v8;
  uint64_t v9;
  int v10;
  float v11;
  float v12;

  if (this && a3 && (_DWORD)a2)
  {
    v4 = *a3;
    v5 = (float *)a3[1];
    v7 = (*a3)[1];
    v6 = (*a3)[2];
    v8 = **a3;
    v9 = a2;
    do
    {
      v10 = v7 & v8;
      v7 = ((((v8 & (v7 >> 1)) + (v7 & v8)) & v8) << v6) + (v7 >> 1);
      if (v10 == 1)
        v11 = 1.0;
      else
        v11 = -1.0;
      v12 = (float)((float)(v5[2] * v5[3]) + (float)(v11 * v5[1])) - (float)(v5[4] * *v5);
      v5[3] = v11;
      v5[4] = v12;
      *this++ = v12;
      --v9;
    }
    while (v9);
    v4[1] = v7;
  }
  return this;
}

void clsp::LPMLSGen::~LPMLSGen(clsp::LPMLSGen *this)
{
  uint64_t v2;
  void *v3;
  void *v4;

  *(_QWORD *)this = &off_1E69E0DF8;
  v2 = *((_QWORD *)this + 22);
  *((_QWORD *)this + 22) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = (void *)*((_QWORD *)this + 14);
  if (v3)
  {
    *((_QWORD *)this + 15) = v3;
    operator delete(v3);
  }
  v4 = (void *)*((_QWORD *)this + 11);
  if (v4)
  {
    *((_QWORD *)this + 12) = v4;
    operator delete(v4);
  }
}

{
  uint64_t v2;
  void *v3;
  void *v4;

  *(_QWORD *)this = &off_1E69E0DF8;
  v2 = *((_QWORD *)this + 22);
  *((_QWORD *)this + 22) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = (void *)*((_QWORD *)this + 14);
  if (v3)
  {
    *((_QWORD *)this + 15) = v3;
    operator delete(v3);
  }
  v4 = (void *)*((_QWORD *)this + 11);
  if (v4)
  {
    *((_QWORD *)this + 12) = v4;
    operator delete(v4);
  }
  JUMPOUT(0x1BCC95CECLL);
}

_QWORD *clsp::LPMLSGen::dump(uint64_t a1, _QWORD *a2)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  char v8;

  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"preGain = ", 10);
  v3 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"\npostGain = ", 12);
  v4 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"\nlr buffer size = ", 18);
  v5 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"\nng buffer size = ", 18);
  v6 = (_QWORD *)std::ostream::operator<<();
  v8 = 10;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)&v8, 1);
  return a2;
}

void clsp::LPMLSGen::logCoeffs(uint64_t a1, uint64_t a2)
{
  std::__shared_weak_count *v4;
  clsp::CLSP_Log *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  float v8;
  float v9;
  float v10;
  float v11;
  float v12;
  unint64_t *v13;
  unint64_t v14;
  clsp::CLSP_Log *v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  float __src;

  v5 = *(clsp::CLSP_Log **)a2;
  v4 = *(std::__shared_weak_count **)(a2 + 8);
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
  }
  if (v5)
  {
    __src = (float)*(unsigned int *)(a1 + 8);
    clsp::CLSP_Log::LogCLSPData(v5, &__src, 1);
    v8 = *(double *)(a1 + 16);
    __src = v8;
    clsp::CLSP_Log::LogCLSPData(v5, &__src, 1);
    v9 = *(double *)(a1 + 24);
    __src = v9;
    clsp::CLSP_Log::LogCLSPData(v5, &__src, 1);
    __src = (float)*(unint64_t *)(a1 + 32);
    clsp::CLSP_Log::LogCLSPData(v5, &__src, 1);
    v10 = *(double *)(a1 + 40);
    __src = v10;
    clsp::CLSP_Log::LogCLSPData(v5, &__src, 1);
    v11 = *(double *)(a1 + 48);
    __src = v11;
    clsp::CLSP_Log::LogCLSPData(v5, &__src, 1);
    v12 = *(double *)(a1 + 56);
    __src = v12;
    clsp::CLSP_Log::LogCLSPData(v5, &__src, 1);
  }
  if (v4)
  {
    v13 = (unint64_t *)&v4->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  v15 = *(clsp::CLSP_Log **)a2;
  if (*(_QWORD *)a2)
  {
    __src = *(float *)(a1 + 64);
    clsp::CLSP_Log::LogCLSPData(v15, &__src, 1);
    v15 = *(clsp::CLSP_Log **)a2;
    if (*(_QWORD *)a2)
    {
      __src = *(float *)(a1 + 68);
      clsp::CLSP_Log::LogCLSPData(v15, &__src, 1);
      v15 = *(clsp::CLSP_Log **)a2;
      if (*(_QWORD *)a2)
      {
        __src = (float)(unint64_t)((uint64_t)(*(_QWORD *)(a1 + 96) - *(_QWORD *)(a1 + 88)) >> 2);
        clsp::CLSP_Log::LogCLSPData(v15, &__src, 1);
        v15 = *(clsp::CLSP_Log **)a2;
        if (*(_QWORD *)a2)
        {
          __src = (float)(unint64_t)((uint64_t)(*(_QWORD *)(a1 + 120) - *(_QWORD *)(a1 + 112)) >> 2);
          clsp::CLSP_Log::LogCLSPData(v15, &__src, 1);
          v15 = *(clsp::CLSP_Log **)a2;
        }
      }
    }
  }
  v16 = *(std::__shared_weak_count **)(a2 + 8);
  if (v16)
  {
    v17 = (unint64_t *)&v16->__shared_owners_;
    do
      v18 = __ldxr(v17);
    while (__stxr(v18 + 1, v17));
  }
  if (v15)
  {
    __src = (float)*(unint64_t *)(a1 + 144);
    clsp::CLSP_Log::LogCLSPData(v15, &__src, 1);
  }
  if (v16)
  {
    v19 = (unint64_t *)&v16->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
}

char *clsp::LPMLSGen::reset(clsp::LPMLSGen *this)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  int v6;
  int v7;

  *((_QWORD *)this + 9) = 0;
  *((_DWORD *)this + 20) = 0;
  v2 = *((_QWORD *)this + 12);
  v3 = *((_QWORD *)this + 11);
  v7 = 0;
  std::vector<float>::assign((char **)this + 11, (v2 - v3) >> 2, &v7);
  v4 = (uint64_t)(*((_QWORD *)this + 15) - *((_QWORD *)this + 14)) >> 2;
  v6 = 0;
  return std::vector<float>::assign((char **)this + 14, v4, &v6);
}

double clsp::LPMLSGen::calcCoeffs(clsp::LPMLSGen *this, double a2)
{
  float v3;
  double result;

  *((float32x2_t *)this + 8) = vcvt_f32_f64(*(float64x2_t *)((char *)this + 40));
  v3 = exp(*((double *)this + 7) * -6.28318531 / *((double *)this + 3));
  *((float *)this + 38) = -v3;
  result = -0.00781250185;
  *(_QWORD *)((char *)this + 156) = 0xBF8000003F800000;
  return result;
}

uint64_t clsp::LPMLSGen::calcCoeffs(uint64_t a1, __int128 *a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;

  v2 = *a2;
  v3 = a2[1];
  v4 = a2[2];
  *(_QWORD *)(a1 + 56) = *((_QWORD *)a2 + 6);
  *(_OWORD *)(a1 + 40) = v4;
  *(_OWORD *)(a1 + 24) = v3;
  *(_OWORD *)(a1 + 8) = v2;
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
}

void clsp::LPMLSGen::envelopeAndAddToBuffer(clsp::LPMLSGen *this, float *a2, const float *a3, vDSP_Length a4)
{
  float v8;
  float *v9;
  float *v10;
  vDSP_Length v11;
  uint64_t __C;

  (*(void (**)(_QWORD, _QWORD, vDSP_Length, uint64_t))(**((_QWORD **)this + 22) + 40))(*((_QWORD *)this + 22), *((_QWORD *)this + 14), a4, 1);
  vDSP_vsmul(*((const float **)this + 14), 1, (const float *)this + 16, *((float **)this + 14), 1, a4);
  __C = 0;
  vDSP_maxv(*((const float **)this + 14), 1, (float *)&__C + 1, a4);
  vDSP_minv(*((const float **)this + 14), 1, (float *)&__C, a4);
  v8 = -*(float *)&__C;
  if (*((float *)&__C + 1) >= (float)-*(float *)&__C)
    v8 = *((float *)&__C + 1);
  *((float *)this + 20) = v8;
  v9 = (float *)*((_QWORD *)this + 14);
  if (a4)
  {
    v10 = (float *)*((_QWORD *)this + 14);
    v11 = a4;
    do
    {
      *v10 = tanhf(*v10);
      ++v10;
      --v11;
    }
    while (v11);
  }
  vDSP_vsmul(v9, 1, (const float *)this + 17, v9, 1, a4);
  vDSP_vma(a3, 1, *((const float **)this + 14), 1, a2, 1, a2, 1, a4);
}

__n128 clsp::LPMLSGen::setParams(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  v4 = *(_OWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 40) = v4;
  *(_OWORD *)(a1 + 24) = v3;
  *(__n128 *)(a1 + 8) = result;
  return result;
}

float clsp::LPMLSGen::getPrePeak(clsp::LPMLSGen *this)
{
  return *((float *)this + 20);
}

void std::__shared_ptr_emplace<clsp::CLSPKernel_v5>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E69DA8A8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<clsp::CLSPKernel_v5>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E69DA8A8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1BCC95CECLL);
}

uint64_t std::__shared_ptr_emplace<clsp::CLSPKernel_v5>::__on_zero_shared(_QWORD *a1)
{
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  uint64_t result;

  std::shared_ptr<vp::services::Telephony_Utility>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 138));
  v2 = a1[130];
  a1[130] = 0;
  if (v2)
    std::default_delete<clsp::FirFilter>::operator()[abi:ne180100](v2);
  v3 = (_QWORD *)a1[129];
  a1[129] = 0;
  if (v3)
    std::default_delete<clsp::DelayLine<float,double>>::operator()[abi:ne180100](v3);
  v4 = (_QWORD *)a1[128];
  a1[128] = 0;
  if (v4)
    std::default_delete<clsp::DelayLine<float,double>>::operator()[abi:ne180100](v4);
  v5 = (void *)a1[124];
  if (v5)
  {
    a1[125] = v5;
    operator delete(v5);
  }
  v6 = (void *)a1[121];
  if (v6)
  {
    a1[122] = v6;
    operator delete(v6);
  }
  v7 = (void *)a1[118];
  if (v7)
  {
    a1[119] = v7;
    operator delete(v7);
  }
  v8 = (void *)a1[115];
  if (v8)
  {
    a1[116] = v8;
    operator delete(v8);
  }
  v9 = (void *)a1[112];
  if (v9)
  {
    a1[113] = v9;
    operator delete(v9);
  }
  v10 = (void *)a1[109];
  if (v10)
  {
    a1[110] = v10;
    operator delete(v10);
  }
  v11 = (void *)a1[106];
  if (v11)
  {
    a1[107] = v11;
    operator delete(v11);
  }
  v12 = (void *)a1[103];
  if (v12)
  {
    a1[104] = v12;
    operator delete(v12);
  }
  v13 = a1[102];
  a1[102] = 0;
  if (v13)
    MEMORY[0x1BCC95CEC](v13, 0x1000C40A86A77D5);
  v14 = a1[101];
  a1[101] = 0;
  if (v14)
    MEMORY[0x1BCC95CEC](v14, 0x1000C40504FFAC1);
  v15 = (_QWORD *)a1[100];
  a1[100] = 0;
  if (v15)
    std::default_delete<clsp::DelayLine<float,double>>::operator()[abi:ne180100](v15);
  std::shared_ptr<vp::services::Telephony_Utility>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 98));
  v16 = a1[56];
  a1[56] = 0;
  if (v16)
    (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
  std::shared_ptr<vp::services::Telephony_Utility>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 54));
  v17 = (void *)a1[51];
  if (v17)
  {
    a1[52] = v17;
    operator delete(v17);
  }
  std::shared_ptr<vp::services::Telephony_Utility>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 49));
  v18 = a1[35];
  a1[35] = 0;
  if (v18)
    (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
  result = a1[34];
  a1[34] = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void clsp::CLSPKernel_v5PtrFactory(_QWORD *a1, int a2, unint64_t a3, int a4, __int128 *a5, __int128 *a6, uint64_t *a7, uint64_t a8, double a9, float a10, float a11, float a12, float a13, double a14, float a15, double a16, uint64_t a17, double a18, double a19, double a20,float a21,uint64_t a22,uint64_t a23,uint64_t a24,__int128 a25,double a26,double a27,double a28,uint64_t a29,double a30,uint64_t a31,uint64_t a32,double a33,uint64_t a34,double a35,double a36,int a37,int a38,double a39,uint64_t a40,uint64_t a41,double a42,double a43,double a44,double a45,double a46,__int128 a47,uint64_t a48,int a49)
{
  char *v57;
  uint64_t v58;
  float v59;
  float v64;
  float v65;
  float v66;
  float v67;
  float v68;
  float v69;
  _QWORD *v70;
  unsigned int **v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  int v75;
  uint64_t v76;
  NSObject *v77;
  uint64_t v78;
  float *v79;
  float v80;
  BOOL v81;
  float v82;
  BOOL v83;
  float v84;
  BOOL v85;
  BOOL v87;
  NSObject **v88;
  NSObject *v89;
  NSObject **v90;
  NSObject *v91;
  uint64_t v92;
  std::__shared_weak_count *v93;
  unint64_t *v94;
  unint64_t v95;
  NSObject **v96;
  int v97;
  const char *v98;
  NSObject **v99;
  NSObject *v100;
  int v101;
  float *v102;
  double v103;
  double v104;
  double v105;
  NSObject *v106;
  uint32_t v107;
  int v108;
  uint64_t v109;
  double v110;
  uint64_t v111;
  uint64_t v112;
  NSObject **v113;
  NSObject *v114;
  int v115;
  int v116;
  NSObject **v117;
  NSObject *v118;
  int v119;
  unsigned int *v120;
  double *v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  __int128 v126;
  std::__shared_weak_count *v127;
  unint64_t *p_shared_owners;
  unint64_t v129;
  uint64_t v130;
  _QWORD *v131;
  uint64_t v132;
  float v133;
  float v134;
  unint64_t *v135;
  unint64_t v136;
  uint64_t v137;
  uint64_t v138;
  unint64_t *v139;
  unint64_t v140;
  uint64_t v141;
  uint64_t v142;
  unint64_t *v143;
  unint64_t v144;
  uint64_t v145;
  CFArrayRef *v146;
  clsp::FirFilter *v147;
  uint64_t v148;
  double v149;
  uint64_t v150;
  uint64_t v151;
  float v152;
  uint64_t v153;
  double v154;
  _QWORD *v155;
  uint64_t v156;
  _QWORD *v157;
  NSObject **v158;
  NSObject *v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t *v162;
  uint64_t v163;
  CFArrayRef *v164;
  clsp::FirFilter *v165;
  uint64_t v166;
  double v167;
  uint64_t v168;
  uint64_t v169;
  float v170;
  uint64_t v171;
  double v172;
  _QWORD *v173;
  uint64_t v174;
  _QWORD *v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  CFArrayRef *v181;
  clsp::FirFilter *v182;
  uint64_t v183;
  double v184;
  uint64_t v185;
  uint64_t v186;
  float v187;
  uint64_t v188;
  double v189;
  _QWORD *v190;
  uint64_t v191;
  _QWORD *v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  int v197;
  uint64_t v199;
  uint64_t v206;
  double v207;
  double v208;
  uint64_t *v210;
  uint8_t buf[4];
  _BYTE v212[14];
  __int16 v213;
  int v214;
  __int16 v215;
  double v216;
  __int16 v217;
  double v218;
  __int16 v219;
  double v220;
  uint64_t v221;

  v221 = *MEMORY[0x1E0C80C00];
  v57 = (char *)operator new(0x460uLL);
  *(_OWORD *)(v57 + 8) = 0u;
  *(_QWORD *)v57 = &off_1E69DA8A8;
  *((_DWORD *)v57 + 10) = a2;
  *((double *)v57 + 6) = a9;
  v58 = *a7;
  *((_QWORD *)v57 + 7) = a3;
  *((_QWORD *)v57 + 8) = v58;
  *((_QWORD *)v57 + 9) = a8;
  *((double *)v57 + 10) = a26;
  *((_QWORD *)v57 + 11) = a22;
  *((_QWORD *)v57 + 12) = a23;
  v59 = a26;
  *((float *)v57 + 26) = v59;
  __asm { FMOV            V11.2S, #1.0 }
  *(_QWORD *)(v57 + 108) = _D11;
  *(_OWORD *)(v57 + 116) = 0u;
  *((double *)v57 + 17) = a21;
  v199 = (uint64_t)(v57 + 136);
  *((_QWORD *)v57 + 18) = a29;
  *((_QWORD *)v57 + 19) = a24;
  *((_OWORD *)v57 + 10) = a25;
  *((_QWORD *)v57 + 22) = a40;
  *((_QWORD *)v57 + 23) = a41;
  v64 = a42;
  v65 = a43;
  *((float *)v57 + 48) = v64;
  *((float *)v57 + 49) = v65;
  v66 = a44;
  v67 = a45;
  *((float *)v57 + 50) = v66;
  *((float *)v57 + 51) = v67;
  v68 = a46;
  *((float *)v57 + 52) = v68;
  *(_OWORD *)(v57 + 216) = a47;
  *((_QWORD *)v57 + 29) = a48;
  *((_DWORD *)v57 + 60) = a4;
  v69 = a39;
  *((_DWORD *)v57 + 61) = a38;
  *((float *)v57 + 62) = v69;
  *((_DWORD *)v57 + 63) = 1065353216;
  *((_DWORD *)v57 + 64) = a38;
  *((_DWORD *)v57 + 66) = 0;
  *((_DWORD *)v57 + 65) = 0;
  *((_OWORD *)v57 + 17) = 0u;
  *((_WORD *)v57 + 144) = 1;
  *((_QWORD *)v57 + 37) = v57 + 80;
  *((_DWORD *)v57 + 96) = 0;
  *((_OWORD *)v57 + 22) = 0u;
  *((_OWORD *)v57 + 23) = 0u;
  *((_OWORD *)v57 + 20) = 0u;
  *((_OWORD *)v57 + 21) = 0u;
  *((_OWORD *)v57 + 19) = 0u;
  clsp::ClosedLoopThermalModule::setPilotGenType((uint64_t)(v57 + 176), a4, a5, a6, a9);
  v70 = v57 + 24;
  v71 = (unsigned int **)(v57 + 392);
  *(_OWORD *)(v57 + 424) = 0u;
  *(_OWORD *)(v57 + 440) = 0u;
  *(_OWORD *)(v57 + 392) = 0u;
  *(_OWORD *)(v57 + 408) = 0u;
  *((float *)v57 + 114) = a10;
  *((float *)v57 + 115) = a11;
  *((float *)v57 + 116) = a12;
  *((double *)v57 + 59) = a36;
  *((float *)v57 + 120) = a13;
  *((double *)v57 + 61) = a14;
  *((float *)v57 + 124) = a15;
  *((_QWORD *)v57 + 63) = v57 + 80;
  *((_QWORD *)v57 + 64) = a31;
  *((double *)v57 + 65) = a33;
  *((_QWORD *)v57 + 66) = a32;
  *((_QWORD *)v57 + 67) = a34;
  *((_QWORD *)v57 + 68) = a31;
  *((double *)v57 + 69) = a33 * a36;
  *((_DWORD *)v57 + 140) = 1;
  *(_OWORD *)(v57 + 564) = 0u;
  *(_QWORD *)(v57 + 580) = _D11;
  *(_OWORD *)(v57 + 620) = 0u;
  *(_OWORD *)(v57 + 636) = 0u;
  *(_OWORD *)(v57 + 588) = 0u;
  *(_OWORD *)(v57 + 604) = 0u;
  *((_QWORD *)v57 + 82) = a17;
  *((double *)v57 + 83) = a16;
  *((_QWORD *)v57 + 84) = 0;
  *((_DWORD *)v57 + 172) = 0;
  *((_OWORD *)v57 + 44) = 0u;
  *((_OWORD *)v57 + 45) = 0u;
  *((_OWORD *)v57 + 46) = 0u;
  *((_OWORD *)v57 + 47) = 0u;
  *((_WORD *)v57 + 384) = 1;
  *((_QWORD *)v57 + 97) = v57 + 176;
  *((_OWORD *)v57 + 49) = 0u;
  v72 = operator new();
  clsp::DelayLine<float,double>::DelayLine(v72, a3, a35, a9, 2.0);
  *((_QWORD *)v57 + 100) = v72;
  v73 = operator new();
  *(_DWORD *)v73 = a37;
  *(_QWORD *)(v73 + 12) = 0;
  *(_QWORD *)(v73 + 4) = 0;
  *(_DWORD *)(v73 + 20) = 0;
  *((_QWORD *)v57 + 101) = v73;
  v74 = operator new();
  *(_DWORD *)v74 = a37;
  *(_QWORD *)(v74 + 12) = 0;
  *(_QWORD *)(v74 + 4) = 0;
  *((_QWORD *)v57 + 102) = v74;
  std::vector<float>::vector((_QWORD *)v57 + 103, a3);
  std::vector<float>::vector((_QWORD *)v57 + 106, a3);
  std::vector<float>::vector((_QWORD *)v57 + 109, a3);
  std::vector<float>::vector((_QWORD *)v57 + 112, a3);
  std::vector<float>::vector((_QWORD *)v57 + 115, a3);
  std::vector<float>::vector((_QWORD *)v57 + 118, a3);
  std::vector<float>::vector((_QWORD *)v57 + 121, a3);
  std::vector<float>::vector((_QWORD *)v57 + 124, a3);
  v75 = a49;
  *((_DWORD *)v57 + 254) = 65793;
  v210 = (uint64_t *)(v57 + 1024);
  *((_QWORD *)v57 + 128) = 0;
  *(_OWORD *)(v57 + 1032) = 0u;
  *((_DWORD *)v57 + 262) = a49;
  *(_QWORD *)(v57 + 1052) = 0;
  *(_OWORD *)(v57 + 1080) = xmmword_1B6629CD0;
  *((_WORD *)v57 + 548) = 1;
  *((_OWORD *)v57 + 69) = 0u;
  v76 = spp3Subsystem();
  if (v76)
  {
    if ((*(_BYTE *)(v76 + 8) & 1) != 0)
    {
      v77 = *(NSObject **)v76;
      if (*(_QWORD *)v76)
      {
        if (os_log_type_enabled(*(os_log_t *)v76, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)buf = 136315394;
          *(_QWORD *)v212 = "CLSPKernel_v5.cpp";
          *(_WORD *)&v212[8] = 1024;
          *(_DWORD *)&v212[10] = 343;
          _os_log_impl(&dword_1B5ED0000, v77, OS_LOG_TYPE_DEBUG, "%25s:%-5d CLSPKernel_v5::CLSPKernel_v5", buf, 0x12u);
        }
      }
    }
  }
  switch(a49)
  {
    case 1:
    case 4:
      goto LABEL_7;
    case 2:
      v92 = *a7;
      if (*a7 && *(_QWORD *)(v92 + 48))
      {
        std::allocate_shared[abi:ne180100]<clsp::ParameterUpdater,std::allocator<clsp::ParameterUpdater>,CACFDictionary &,void>((CFTypeRef **)buf, *(_QWORD *)(v92 + 56));
        std::shared_ptr<vp::xml::_xmlNode const>::operator=[abi:ne180100]((uint64_t)(v57 + 392), (__int128 *)buf);
        v93 = *(std::__shared_weak_count **)&v212[4];
        if (*(_QWORD *)&v212[4])
        {
          v94 = (unint64_t *)(*(_QWORD *)&v212[4] + 8);
          do
            v95 = __ldaxr(v94);
          while (__stlxr(v95 - 1, v94));
          if (!v95)
          {
            ((void (*)(std::__shared_weak_count *))v93->__on_zero_shared)(v93);
            std::__shared_weak_count::__release_weak(v93);
          }
        }
      }
      else
      {
        v99 = (NSObject **)spp3Subsystem();
        if (v99)
        {
          v100 = *v99;
          if (!*v99)
            goto LABEL_7;
        }
        else
        {
          v100 = MEMORY[0x1E0C81028];
        }
        if (os_log_type_enabled(v100, OS_LOG_TYPE_ERROR))
        {
          v116 = *((_DWORD *)v57 + 10);
          *(_DWORD *)buf = 136315650;
          *(_QWORD *)v212 = "CLSPKernel_v5.cpp";
          *(_WORD *)&v212[8] = 1024;
          *(_DWORD *)&v212[10] = 356;
          v213 = 1024;
          v214 = v116;
          _os_log_impl(&dword_1B5ED0000, v100, OS_LOG_TYPE_ERROR, "%25s:%-5d Ch %d, ConvoyAdaptiveDisplacement requested but configuration missing, defaulting to Open Loop", buf, 0x18u);
        }
      }
LABEL_7:
      v78 = *((_QWORD *)v57 + 9);
      if (!v78 || (v79 = *(float **)(v78 + 40)) == 0)
      {
        v90 = (NSObject **)spp3Subsystem();
        if (v90)
        {
          v91 = *v90;
          if (!*v90)
            goto LABEL_57;
        }
        else
        {
          v91 = MEMORY[0x1E0C81028];
        }
        if (os_log_type_enabled(v91, OS_LOG_TYPE_ERROR))
        {
          v97 = *((_DWORD *)v57 + 10);
          *(_DWORD *)buf = 136315650;
          *(_QWORD *)v212 = "CLSPKernel_v5.cpp";
          *(_WORD *)&v212[8] = 1024;
          *(_DWORD *)&v212[10] = 385;
          v213 = 1024;
          v214 = v97;
          v98 = "%25s:%-5d Ch %d, Convoy calibration parameters not present";
          goto LABEL_55;
        }
        goto LABEL_57;
      }
      v80 = v79[3];
      v81 = v80 < 0.001 || v80 > 1000.0;
      if (v81
        || ((v82 = v79[2], v82 >= 0.001) ? (v83 = v82 > 1000.0) : (v83 = 1),
            v83
         || ((v84 = v79[1], v84 >= 0.001) ? (v85 = v84 > 1000.0) : (v85 = 1),
             !v85 ? (_NF = v84 < v82) : (_NF = 0),
             _NF ? (v87 = v82 < v80) : (v87 = 0),
             !v87)))
      {
        v88 = (NSObject **)spp3Subsystem();
        if (v88)
        {
          v89 = *v88;
          if (!*v88)
            goto LABEL_57;
        }
        else
        {
          v89 = MEMORY[0x1E0C81028];
        }
        if (os_log_type_enabled(v89, OS_LOG_TYPE_ERROR))
        {
          v101 = *((_DWORD *)v57 + 10);
          v102 = *(float **)(*((_QWORD *)v57 + 9) + 40);
          v103 = v102[3];
          v104 = v102[2];
          v105 = v102[1];
          *(_DWORD *)buf = 136316418;
          *(_QWORD *)v212 = "CLSPKernel_v5.cpp";
          *(_WORD *)&v212[8] = 1024;
          *(_DWORD *)&v212[10] = 381;
          v213 = 1024;
          v214 = v101;
          v215 = 2048;
          v216 = v103;
          v217 = 2048;
          v218 = v104;
          v219 = 2048;
          v220 = v105;
          v98 = "%25s:%-5d Ch %d, Convoy calibration parameters out of range or not Coff < CMin < CMax. Defaulting to Ope"
                "n loop displacement. CMax=%f, CMin=%f, Coff=%f";
          v106 = v89;
          v107 = 54;
          goto LABEL_56;
        }
        goto LABEL_57;
      }
      v117 = (NSObject **)spp3Subsystem();
      if (v117)
      {
        v118 = *v117;
        if (!*v117)
          goto LABEL_76;
      }
      else
      {
        v118 = MEMORY[0x1E0C81028];
      }
      if (os_log_type_enabled(v118, OS_LOG_TYPE_DEBUG))
      {
        v119 = *((_DWORD *)v57 + 10);
        *(_DWORD *)buf = 136315650;
        *(_QWORD *)v212 = "CLSPKernel_v5.cpp";
        *(_WORD *)&v212[8] = 1024;
        *(_DWORD *)&v212[10] = 378;
        v213 = 1024;
        v214 = v119;
        _os_log_impl(&dword_1B5ED0000, v118, OS_LOG_TYPE_DEBUG, "%25s:%-5d Ch %d, Convoy calibration parameters within range", buf, 0x18u);
      }
LABEL_76:
      if ((a49 & 0xFFFFFFFE) == 2 && (v120 = *v71) != 0)
      {
        v206 = *a7;
        v121 = (double *)operator new(0xA8uLL);
        v121[1] = 0.0;
        v121[2] = 0.0;
        *(_QWORD *)v121 = &off_1E69DA918;
        v123 = v120[52];
        v122 = v120[53];
        v124 = v120[50];
        v125 = v120[51];
        v121[6] = a9;
        std::vector<double>::vector((_QWORD *)v121 + 9, v124 + 1);
        std::vector<double>::vector((_QWORD *)v121 + 12, v123 + 1);
        std::vector<double>::vector((_QWORD *)v121 + 15, v122 + 1);
        std::vector<double>::vector((_QWORD *)v121 + 18, v125 + 1);
        *(_QWORD *)&v126 = v121 + 3;
        *((_QWORD *)&v126 + 1) = v121;
        v127 = (std::__shared_weak_count *)*((_QWORD *)v57 + 55);
        *((_OWORD *)v57 + 27) = v126;
        if (v127)
        {
          p_shared_owners = (unint64_t *)&v127->__shared_owners_;
          do
            v129 = __ldaxr(p_shared_owners);
          while (__stlxr(v129 - 1, p_shared_owners));
          if (!v129)
          {
            ((void (*)(std::__shared_weak_count *))v127->__on_zero_shared)(v127);
            std::__shared_weak_count::__release_weak(v127);
          }
        }
        v130 = operator new();
        v131 = (_QWORD *)v130;
        *(_DWORD *)(v130 + 8) = 3;
        *(_QWORD *)v130 = &off_1E69C93A0;
        *(_BYTE *)(v130 + 64) = 1;
        v132 = *((_QWORD *)v57 + 55);
        *(_QWORD *)(v130 + 128) = *((_QWORD *)v57 + 54);
        *(_QWORD *)(v130 + 112) = 0;
        *(_QWORD *)(v130 + 120) = v199;
        *(double *)(v130 + 16) = a27;
        *(double *)(v130 + 24) = a30;
        *(double *)(v130 + 32) = a28;
        *(double *)(v130 + 40) = a18;
        *(double *)(v130 + 48) = a19;
        *(double *)(v130 + 56) = a20;
        v133 = a30;
        v134 = 1.0 / a30;
        *(float *)(v130 + 68) = v133;
        *(float *)(v130 + 72) = v134;
        *(float *)(v130 + 76) = v133;
        *(_OWORD *)(v130 + 80) = 0u;
        *(_OWORD *)(v130 + 96) = 0u;
        *(_QWORD *)(v130 + 136) = v132;
        if (v132)
        {
          v135 = (unint64_t *)(v132 + 8);
          do
            v136 = __ldxr(v135);
          while (__stxr(v136 + 1, v135));
        }
        *(_QWORD *)(v130 + 144) = 0;
        *(_QWORD *)(v130 + 152) = 0;
        *(double *)(v130 + 160) = a18;
        *(double *)(v130 + 168) = a19;
        *(_QWORD *)(v130 + 176) = 0;
        *(_DWORD *)(v130 + 192) = 0;
        *(double *)(v130 + 200) = a18;
        *(double *)(v130 + 208) = a19;
        *(_QWORD *)(v130 + 216) = 0;
        *(_OWORD *)(v130 + 288) = 0uLL;
        *(_DWORD *)(v130 + 232) = 0;
        *(_OWORD *)(v130 + 304) = 0uLL;
        *(_OWORD *)(v130 + 320) = 0uLL;
        *(_QWORD *)(v130 + 336) = 0;
        *(_OWORD *)(v130 + 240) = 0uLL;
        *(_OWORD *)(v130 + 256) = 0uLL;
        *(_OWORD *)(v130 + 268) = 0uLL;
        *(_DWORD *)(v130 + 344) = 1065353216;
        *(_DWORD *)(v130 + 364) = 0;
        *(_QWORD *)(v130 + 348) = 0;
        *(_QWORD *)(v130 + 356) = 0;
        v137 = operator new();
        v138 = v131[17];
        *(_QWORD *)v137 = v131[16];
        *(_QWORD *)(v137 + 8) = v138;
        if (v138)
        {
          v139 = (unint64_t *)(v138 + 8);
          do
            v140 = __ldxr(v139);
          while (__stxr(v140 + 1, v139));
        }
        *(float *)(v137 + 16) = v59;
        *(double *)(v137 + 24) = a9;
        *(_OWORD *)(v137 + 32) = 0u;
        *(_OWORD *)(v137 + 48) = 0u;
        std::unique_ptr<clsp::SpeakerModelNonlinear>::reset[abi:ne180100](v131 + 18, v137);
        v141 = operator new();
        v142 = v131[17];
        *(_QWORD *)v141 = v131[16];
        *(_QWORD *)(v141 + 8) = v142;
        if (v142)
        {
          v143 = (unint64_t *)(v142 + 8);
          do
            v144 = __ldxr(v143);
          while (__stxr(v144 + 1, v143));
        }
        *(float *)(v141 + 16) = v59;
        *(double *)(v141 + 24) = a9;
        *(_OWORD *)(v141 + 32) = 0u;
        *(_OWORD *)(v141 + 48) = 0u;
        std::unique_ptr<clsp::SpeakerModelNonlinear>::reset[abi:ne180100](v131 + 19, v141);
        v145 = *((_QWORD *)v57 + 56);
        *((_QWORD *)v57 + 56) = v131;
        if (v145)
          (*(void (**)(uint64_t))(*(_QWORD *)v145 + 8))(v145);
        v146 = *(CFArrayRef **)(*(_QWORD *)(v206 + 48) + 96);
        v147 = (clsp::FirFilter *)operator new();
        clsp::FirFilter::FirFilter(v147, v146, a9);
        v148 = *((_QWORD *)v57 + 130);
        *((_QWORD *)v57 + 130) = v147;
        if (v148)
          std::default_delete<clsp::FirFilter>::operator()[abi:ne180100](v148);
        v149 = *((double *)v57 + 6);
        v151 = *((_QWORD *)v147 + 3);
        v150 = *((_QWORD *)v147 + 4);
        v152 = *(float *)(*(_QWORD *)(v206 + 48) + 12);
        v153 = operator new();
        v154 = (double)((int)((unint64_t)(v150 - v151) >> 2) >> 1) * 1000.0 / v149 + v152;
        clsp::DelayLine<float,double>::DelayLine(v153, a3, v154, a9, v154);
        v155 = (_QWORD *)*v210;
        *v210 = v153;
        if (v155)
          std::default_delete<clsp::DelayLine<float,double>>::operator()[abi:ne180100](v155);
        v156 = operator new();
        clsp::DelayLine<float,double>::DelayLine(v156, a3, v154, a9, v154);
        v157 = (_QWORD *)*((_QWORD *)v57 + 129);
        *((_QWORD *)v57 + 129) = v156;
        if (v157)
          std::default_delete<clsp::DelayLine<float,double>>::operator()[abi:ne180100](v157);
        std::vector<double>::resize((uint64_t)(v57 + 408), 0x25uLL);
        *((_QWORD *)v57 + 3) = clsp::CLSPKernel_v5::ProcessAdapt;
        *((_QWORD *)v57 + 4) = 0;
        v158 = (NSObject **)spp3Subsystem();
        if (v158)
        {
          v159 = *v158;
          if (!*v158)
            goto LABEL_66;
        }
        else
        {
          v159 = MEMORY[0x1E0C81028];
        }
        if (os_log_type_enabled(v159, OS_LOG_TYPE_DEBUG))
        {
          v197 = *((_DWORD *)v57 + 10);
          *(_DWORD *)buf = 136315650;
          *(_QWORD *)v212 = "CLSPKernel_v5.cpp";
          *(_WORD *)&v212[8] = 1024;
          *(_DWORD *)&v212[10] = 401;
          v213 = 1024;
          v214 = v197;
          _os_log_impl(&dword_1B5ED0000, v159, OS_LOG_TYPE_DEBUG, "%25s:%-5d Ch %d, Set up for ConvoyAdaptiveDisplacement", buf, 0x18u);
        }
      }
      else if (a49 == 4)
      {
        v178 = *a7;
        if (!*a7)
          goto LABEL_57;
        v179 = *(_QWORD *)(v178 + 48);
        if (!v179)
          goto LABEL_57;
        v180 = *((_QWORD *)v57 + 9);
        if (!v180 || !*(_QWORD *)(v180 + 40))
          goto LABEL_57;
        v181 = *(CFArrayRef **)(v179 + 96);
        v182 = (clsp::FirFilter *)operator new();
        clsp::FirFilter::FirFilter(v182, v181, a9);
        v208 = a9;
        v183 = *((_QWORD *)v57 + 130);
        *((_QWORD *)v57 + 130) = v182;
        if (v183)
          std::default_delete<clsp::FirFilter>::operator()[abi:ne180100](v183);
        v184 = *((double *)v57 + 6);
        v186 = *((_QWORD *)v182 + 3);
        v185 = *((_QWORD *)v182 + 4);
        v187 = *(float *)(*(_QWORD *)(v178 + 48) + 12);
        v188 = operator new();
        v189 = (double)((int)((unint64_t)(v185 - v186) >> 2) >> 1) * 1000.0 / v184 + v187;
        clsp::DelayLine<float,double>::DelayLine(v188, a3, v189, v208, v189);
        v190 = (_QWORD *)*v210;
        *v210 = v188;
        if (v190)
          std::default_delete<clsp::DelayLine<float,double>>::operator()[abi:ne180100](v190);
        v191 = operator new();
        clsp::DelayLine<float,double>::DelayLine(v191, a3, v189, v208, v189);
        v192 = (_QWORD *)*((_QWORD *)v57 + 129);
        *((_QWORD *)v57 + 129) = v191;
        if (v192)
          std::default_delete<clsp::DelayLine<float,double>>::operator()[abi:ne180100](v192);
        *((_QWORD *)v57 + 3) = clsp::CLSPKernel_v5::ProcessAdaptSimple;
        *((_QWORD *)v57 + 4) = 0;
        v193 = *(_QWORD *)(v178 + 48);
        v194 = *(_QWORD *)(v180 + 40);
        v195 = operator new();
        clsp::ConvoyDisplacementControllerV2::ConvoyDisplacementControllerV2(v195, a3, v199, v193, v194, v208, a27, a30, a28, a18, a19, a20);
        v196 = *((_QWORD *)v57 + 56);
        *((_QWORD *)v57 + 56) = v195;
        if (v196)
          (*(void (**)(uint64_t))(*(_QWORD *)v196 + 8))(v196);
        v75 = 4;
      }
      else
      {
        if (a49 != 1)
          goto LABEL_57;
        v160 = *a7;
        if (!v160)
          goto LABEL_57;
        v163 = *(_QWORD *)(v160 + 48);
        v162 = (uint64_t *)(v160 + 48);
        v161 = v163;
        if (!v163)
          goto LABEL_57;
        v164 = *(CFArrayRef **)(v161 + 96);
        v165 = (clsp::FirFilter *)operator new();
        clsp::FirFilter::FirFilter(v165, v164, a9);
        v207 = a9;
        v166 = *((_QWORD *)v57 + 130);
        *((_QWORD *)v57 + 130) = v165;
        if (v166)
          std::default_delete<clsp::FirFilter>::operator()[abi:ne180100](v166);
        v167 = *((double *)v57 + 6);
        v169 = *((_QWORD *)v165 + 3);
        v168 = *((_QWORD *)v165 + 4);
        v170 = *(float *)(*v162 + 12);
        v171 = operator new();
        v172 = (double)((int)((unint64_t)(v168 - v169) >> 2) >> 1) * 1000.0 / v167 + v170;
        clsp::DelayLine<float,double>::DelayLine(v171, a3, v172, v207, v172);
        v173 = (_QWORD *)*v210;
        *v210 = v171;
        if (v173)
          std::default_delete<clsp::DelayLine<float,double>>::operator()[abi:ne180100](v173);
        v174 = operator new();
        clsp::DelayLine<float,double>::DelayLine(v174, a3, v172, v207, v172);
        v175 = (_QWORD *)*((_QWORD *)v57 + 129);
        *((_QWORD *)v57 + 129) = v174;
        if (v175)
          std::default_delete<clsp::DelayLine<float,double>>::operator()[abi:ne180100](v175);
        *((_QWORD *)v57 + 3) = clsp::CLSPKernel_v5::ProcessAdaptSimple;
        *((_QWORD *)v57 + 4) = 0;
        v176 = operator new();
        clsp::ConvoyDisplacementController::ConvoyDisplacementController(v176, a3, v199, v162, v207, a27, a30, a28, a18, a19, a20);
        v177 = *((_QWORD *)v57 + 56);
        *((_QWORD *)v57 + 56) = v176;
        if (v177)
          (*(void (**)(uint64_t))(*(_QWORD *)v177 + 8))(v177);
        v75 = 1;
      }
      goto LABEL_66;
    case 3:
      v96 = (NSObject **)spp3Subsystem();
      if (v96)
      {
        v91 = *v96;
        if (!*v96)
          goto LABEL_57;
      }
      else
      {
        v91 = MEMORY[0x1E0C81028];
      }
      if (os_log_type_enabled(v91, OS_LOG_TYPE_ERROR))
      {
        v108 = *((_DWORD *)v57 + 10);
        *(_DWORD *)buf = 136315650;
        *(_QWORD *)v212 = "CLSPKernel_v5.cpp";
        *(_WORD *)&v212[8] = 1024;
        *(_DWORD *)&v212[10] = 362;
        v213 = 1024;
        v214 = v108;
        v98 = "%25s:%-5d Ch %d, IV only AdaptiveDisplacement not supported, defaulting to Open Loop";
LABEL_55:
        v106 = v91;
        v107 = 24;
LABEL_56:
        _os_log_impl(&dword_1B5ED0000, v106, OS_LOG_TYPE_ERROR, v98, buf, v107);
      }
LABEL_57:
      v109 = operator new();
      v110 = clsp::DisplacementController::DisplacementController(v109, v199, a27, a30, a28, a18, a19, a20);
      v111 = *((_QWORD *)v57 + 56);
      *((_QWORD *)v57 + 56) = v112;
      if (v111)
        (*(void (**)(uint64_t, double))(*(_QWORD *)v111 + 8))(v111, v110);
      v113 = (NSObject **)spp3Subsystem();
      if (v113)
      {
        v114 = *v113;
        if (!*v113)
          goto LABEL_65;
      }
      else
      {
        v114 = MEMORY[0x1E0C81028];
      }
      if (os_log_type_enabled(v114, OS_LOG_TYPE_DEBUG))
      {
        v115 = *((_DWORD *)v57 + 10);
        *(_DWORD *)buf = 136315650;
        *(_QWORD *)v212 = "CLSPKernel_v5.cpp";
        *(_WORD *)&v212[8] = 1024;
        *(_DWORD *)&v212[10] = 432;
        v213 = 1024;
        v214 = v115;
        _os_log_impl(&dword_1B5ED0000, v114, OS_LOG_TYPE_DEBUG, "%25s:%-5d Ch %d, Set up for OpenLoopDisplacement", buf, 0x18u);
      }
LABEL_65:
      v75 = 0;
      *v70 = 0;
      *((_QWORD *)v57 + 4) = 0;
LABEL_66:
      clsp::ThermalController::resetThermalState((clsp::ThermalController *)(v57 + 456));
      *((_DWORD *)v57 + 30) = *((_DWORD *)v57 + 29);
      *((_DWORD *)v57 + 32) = *((_DWORD *)v57 + 31);
      *((_DWORD *)v57 + 29) = 0;
      *((_DWORD *)v57 + 31) = 0;
      clsp::ClosedLoopThermalModule::reset((clsp::ClosedLoopThermalModule *)(v57 + 176));
      *((_DWORD *)v57 + 262) = v75;
      *a1 = v70;
      a1[1] = v57;
      return;
    default:
      goto LABEL_76;
  }
}

void sub_1B63F0330(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, _Unwind_Exception *exception_objecta, void **a16, void **a17, uint64_t a18, void **a19, void **a20,void **a21,void **a22,void **a23,void **a24,uint64_t a25,uint64_t *a26,void **a27,uint64_t a28,_QWORD **a29)
{
  std::__shared_weak_count *v29;
  uint64_t v30;
  uint64_t shared_owners;
  std::__shared_weak_count_vtbl *v32;
  _QWORD *v33;
  void *v34;
  void *v35;
  void *v36;
  void *v37;
  void *v38;
  void *v39;
  void *v40;
  void *v41;
  std::__shared_weak_count_vtbl *v42;
  uint64_t shared_weak_owners;
  _QWORD *v44;
  uint64_t v45;
  void *v46;
  uint64_t v47;
  uint64_t v48;
  void *v49;

  MEMORY[0x1BCC95CEC](v30, 0x10E1C40F98757C4);
  std::shared_ptr<vp::services::Telephony_Utility>::~shared_ptr[abi:ne180100]((uint64_t)&v29[46]);
  shared_owners = v29[43].__shared_owners_;
  v29[43].__shared_owners_ = 0;
  if (shared_owners)
    std::default_delete<clsp::FirFilter>::operator()[abi:ne180100](shared_owners);
  v32 = v29[43].__vftable;
  v29[43].__vftable = 0;
  if (v32)
    std::default_delete<clsp::DelayLine<float,double>>::operator()[abi:ne180100](v32);
  v33 = *a29;
  *a29 = 0;
  if (v33)
    std::default_delete<clsp::DelayLine<float,double>>::operator()[abi:ne180100](v33);
  v34 = *a17;
  if (*a17)
  {
    v29[41].__shared_weak_owners_ = (uint64_t)v34;
    operator delete(v34);
  }
  v35 = *a19;
  if (*a19)
  {
    v29[40].__shared_weak_owners_ = (uint64_t)v35;
    operator delete(v35);
  }
  v36 = *a20;
  if (*a20)
  {
    v29[39].__shared_weak_owners_ = (uint64_t)v36;
    operator delete(v36);
  }
  v37 = *a21;
  if (*a21)
  {
    v29[38].__shared_weak_owners_ = (uint64_t)v37;
    operator delete(v37);
  }
  v38 = *a22;
  if (*a22)
  {
    v29[37].__shared_weak_owners_ = (uint64_t)v38;
    operator delete(v38);
  }
  v39 = *a23;
  if (*a23)
  {
    v29[36].__shared_weak_owners_ = (uint64_t)v39;
    operator delete(v39);
  }
  v40 = *a24;
  if (*a24)
  {
    v29[35].__shared_weak_owners_ = (uint64_t)v40;
    operator delete(v40);
  }
  v41 = *a16;
  if (*a16)
  {
    v29[34].__shared_weak_owners_ = (uint64_t)v41;
    operator delete(v41);
  }
  v42 = v29[34].__vftable;
  v29[34].__vftable = 0;
  if (v42)
    MEMORY[0x1BCC95CEC](v42, 0x1000C40A86A77D5);
  shared_weak_owners = v29[33].__shared_weak_owners_;
  v29[33].__shared_weak_owners_ = 0;
  if (shared_weak_owners)
    MEMORY[0x1BCC95CEC](shared_weak_owners, 0x1000C40504FFAC1);
  v44 = (_QWORD *)v29[33].__shared_owners_;
  v29[33].__shared_owners_ = 0;
  if (v44)
    std::default_delete<clsp::DelayLine<float,double>>::operator()[abi:ne180100](v44);
  std::shared_ptr<vp::services::Telephony_Utility>::~shared_ptr[abi:ne180100]((uint64_t)&v29[32].__shared_weak_owners_);
  v45 = v29[18].__shared_weak_owners_;
  v29[18].__shared_weak_owners_ = 0;
  if (v45)
    (*(void (**)(uint64_t))(*(_QWORD *)v45 + 8))(v45);
  std::shared_ptr<vp::services::Telephony_Utility>::~shared_ptr[abi:ne180100]((uint64_t)&v29[18]);
  v46 = *a27;
  if (*a27)
  {
    v29[17].__shared_owners_ = (uint64_t)v46;
    operator delete(v46);
  }
  std::shared_ptr<vp::services::Telephony_Utility>::~shared_ptr[abi:ne180100](a25);
  v47 = v29[11].__shared_weak_owners_;
  v29[11].__shared_weak_owners_ = 0;
  if (v47)
    (*(void (**)(uint64_t))(*(_QWORD *)v47 + 8))(v47);
  v48 = *a26;
  *a26 = 0;
  if (v48)
    (*(void (**)(uint64_t))(*(_QWORD *)v48 + 8))(v48);
  std::__shared_weak_count::~__shared_weak_count(v29);
  operator delete(v49);
  _Unwind_Resume(a1);
}

void clsp::CLSPKernel_v5::ProcessOpenLoop(const float **this, const float *a2, float *a3, unsigned int a4)
{
  vDSP_Length v8;
  float *v9;
  const float *v10;
  unint64_t v11;
  float *v12;
  float *v13;
  unint64_t v14;
  const float *v15;
  uint64_t v16;
  float v17;
  float v18;
  clsp::CLSP_Log *v19;
  float v20;
  float v21;
  float v22;
  float v23;
  float v24;
  float *v25;
  float __B;
  float __src;

  shouldTraceRender();
  if (*((_BYTE *)this + 1072))
  {
    clsp::CLSPKernel_v5::LogCoeffs((clsp::CLSPKernel_v5 *)this);
    *((_BYTE *)this + 1072) = 0;
  }
  v8 = a4;
  if (!this[53])
  {
    __B = 0.1;
    vDSP_vsmul(a2, 1, &__B, a3, 1, a4);
    return;
  }
  v9 = (float *)this[100];
  vDSP_vclip(a2, 1, &clsp::CLSPKernel_v5::kClipLoThres, &clsp::CLSPKernel_v5::kClipHiThres, v9, 1, a4);
  v10 = this[97];
  shouldTraceRender();
  v11 = *((_QWORD *)v10 + 1);
  if (v11 <= a4)
  {
    if (v11)
    {
      memmove(*((void **)v10 + 5), *((const void **)v10 + 2), 4 * v11);
      v11 = *((_QWORD *)v10 + 1);
    }
    v12 = &v9[a4];
    v13 = &v12[-v11];
    if (v13 != v9)
    {
      memmove((void *)(*((_QWORD *)v10 + 5) + 4 * v11), v9, (char *)v13 - (char *)v9);
      v11 = *((_QWORD *)v10 + 1);
    }
    if (v11)
      memmove(*((void **)v10 + 2), &v12[-v11], 4 * v11);
    if (!a4)
      goto LABEL_29;
  }
  else
  {
    if (a4)
    {
      memmove(*((void **)v10 + 5), *((const void **)v10 + 2), 4 * a4);
      v11 = *((_QWORD *)v10 + 1);
    }
    if (v11 != a4)
      memmove(*((void **)v10 + 2), (const void *)(*((_QWORD *)v10 + 2) + 4 * a4), 4 * v11 - 4 * a4);
    if (!a4)
      goto LABEL_29;
    memmove((void *)(*((_QWORD *)v10 + 2) + 4 * *((_QWORD *)v10 + 1) - 4 * a4), v9, 4 * a4);
  }
  v14 = 0;
  do
  {
    v15 = this[97];
    v16 = *((_QWORD *)v15 + 5);
    if (v14 >= (*((_QWORD *)v15 + 6) - v16) >> 2)
      std::vector<std::vector<float>>::__throw_out_of_range[abi:ne180100]();
    v17 = v9[v14];
    v18 = (*(float (**)(const float *, float, float))(*(_QWORD *)this[53] + 184))(this[53], v17, *(float *)(v16 + 4 * v14));
    v19 = (clsp::CLSP_Log *)*((_QWORD *)this[135] + 2);
    if (v19)
    {
      __src = v17;
      clsp::CLSP_Log::LogCLSPData(v19, &__src, 1);
    }
    this[103][v14] = v18;
    v20 = *((float *)this + 173)
        + (float)(*((float *)this + 172) * (float)(*((float *)this + 166) - *((float *)this + 173)));
    *((float *)this + 173) = v20;
    v21 = *((float *)this + 177) + (float)(*((float *)this + 176) * (float)(v20 - *((float *)this + 177)));
    *((float *)this + 177) = v21;
    v22 = *((float *)this + 181)
        + (float)(*((float *)this + 180) * (float)(*((float *)this + 168) - *((float *)this + 181)));
    *((float *)this + 181) = v22;
    v23 = *((float *)this + 185) + (float)(*((float *)this + 184) * (float)(v22 - *((float *)this + 185)));
    *((float *)this + 185) = v23;
    if (*((_BYTE *)this + 744))
    {
      if (v23 >= v21)
        v24 = v21;
      else
        v24 = v23;
      v18 = v18 * v24;
      v17 = v17 * (float)(v21 * v23);
    }
    --*((_DWORD *)this + 137);
    (*(void (**)(const float *, float, float))(*(_QWORD *)this[53] + 192))(this[53], v17, v18);
    a3[v14++] = v18;
  }
  while (v8 != v14);
LABEL_29:
  clsp::ThermalController::postProcess((clsp::ThermalController *)(this + 54), a3, this[103], v8);
  clsp::CLSPKernel_v5::ZapBadValues((clsp::CLSPKernel_v5 *)this);
  v25 = (float *)(*(uint64_t (**)(const float *))(*(_QWORD *)this[53] + 128))(this[53]);
  log10f(v25[21]* (float)((float)((float)((float)(1.0 - v25[12]) + v25[13]) * (float)((float)(v25[14] + v25[15]) + v25[16]))/ (float)((float)(v25[12] + 1.0) + v25[13])));
}

void clsp::CLSPKernel_v5::CalcCoeffs(uint64_t **a1, char a2, double a3)
{
  uint64_t *v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t v8;
  unsigned int v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  float v15;
  double v16;
  float v17;
  double v18;
  float v19;
  double v20;
  float v21;
  uint64_t v26;
  uint64_t v27;
  NSObject *v28;
  double v29;
  int v30;
  unsigned int v31;
  float64x2_t v32;
  float64x2_t v33;
  int v34;
  NSObject **v35;
  NSObject *v36;
  NSObject **v37;
  NSObject *v38;
  float v39;
  NSObject **v40;
  NSObject *v41;
  double v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  uint64_t v46;
  NSObject **v47;
  NSObject *v48;
  int v49;
  unsigned int v50;
  double v51;
  double v52;
  double v53;
  float v54;
  int v55;
  unsigned int v56;
  double v57;
  double v58;
  double v59;
  double v60;
  float v61;
  double v62;
  float v63;
  float v64;
  int v65;
  unsigned int v66;
  int v67;
  unsigned int v68;
  double v69;
  double v70;
  double v71;
  float v72;
  float v73;
  double v74;
  double v75;
  float v76;
  unint64_t v77;
  NSObject **v78;
  NSObject *v79;
  double v80;
  NSObject **v81;
  NSObject *v82;
  double v83;
  double v84;
  unint64_t v85;
  float v86;
  uint64_t v87;
  int v88;
  unsigned int v89;
  float v90;
  double *v91;
  double *v92;
  uint64_t *v93;
  uint64_t *v94;
  uint64_t v95;
  uint64_t v96;
  double v98;
  uint64_t v99;
  uint64_t *v100;
  uint64_t *v101;
  uint64_t v102;
  uint64_t v103;
  double v104;
  uint64_t *v105;
  double v106;
  uint64_t v107;
  double v108;
  uint64_t *v109;
  uint64_t *v110;
  uint64_t *v111;
  uint64_t *v112;
  uint64_t v113;
  double v114;
  double v115;
  uint64_t *v116;
  uint64_t *v117;
  uint64_t *v118;
  uint64_t *v119;
  uint64_t v120;
  double v121;
  double v122;
  uint64_t v123;
  NSObject *v124;
  uint64_t *v125;
  uint64_t *v126;
  uint64_t v127;
  uint64_t v128;
  NSObject *v129;
  float v131;
  float v132;
  float v133;
  float64_t v134;
  double v135;
  uint8_t buf[4];
  _BYTE v137[44];
  _BYTE v138[10];
  uint64_t v139;

  v139 = *MEMORY[0x1E0C80C00];
  v6 = *a1;
  v5 = a1[1];
  if (*a1 != v5)
  {
    v7 = *a1;
    do
    {
      v8 = *v7;
      v7 += 2;
      *(_BYTE *)(v8 + 1073) = a2;
    }
    while (v7 != v5);
    v9 = vcvtmd_u64_f64(a3 / 200.0 + 0.5);
    v10 = a3 * 10.0;
    v11 = exp(-4.60517019 / (a3 * 10.0));
    v12 = exp(-4.60517019 / (a3 * 0.00499999989));
    v13 = 0.5;
    v14 = exp(-4.60517019 / (a3 * 0.5));
    v15 = a3;
    v131 = v15;
    v16 = 1.0 - v11;
    if (v10 < 0.00001)
      v16 = 1.0;
    v17 = v16;
    v18 = 1.0 - v12;
    if (a3 * 0.00499999989 < 0.00001)
      v18 = 1.0;
    v19 = v18;
    v132 = v19;
    v133 = v17;
    v20 = 1.0 - v14;
    if (a3 * 0.5 < 0.00001)
      v20 = 1.0;
    v21 = v20;
    __asm { FMOV            V0.2D, #1.0 }
    v134 = *((double *)&_Q0 + 1);
    do
    {
      v26 = *v6;
      v27 = spp3Subsystem();
      if (v27)
      {
        if ((*(_BYTE *)(v27 + 8) & 1) != 0)
        {
          v28 = *(NSObject **)v27;
          if (*(_QWORD *)v27)
          {
            if (os_log_type_enabled(*(os_log_t *)v27, OS_LOG_TYPE_DEBUG))
            {
              *(_DWORD *)buf = 136315394;
              *(_QWORD *)v137 = "CLSPKernel_v5.cpp";
              *(_WORD *)&v137[8] = 1024;
              *(_DWORD *)&v137[10] = 863;
              _os_log_impl(&dword_1B5ED0000, v28, OS_LOG_TYPE_DEBUG, "%25s:%-5d CLSPKernel_v5::CalcCoeffs", buf, 0x12u);
            }
          }
        }
      }
      *(double *)(v26 + 24) = a3;
      v29 = *(double *)(v26 + 112);
      v30 = 1;
      do
        v31 = 1 << v30++;
      while (v31 < v9);
      v32.f64[0] = v29 + *(double *)(v26 + 72) + *(double *)(v26 + 64);
      v33.f64[1] = v134;
      v33.f64[0] = v29 * *(double *)(v26 + 56);
      v135 = *(double *)(v26 + 112);
      v32.f64[1] = v135;
      *(float32x2_t *)(v26 + 80) = vcvt_f32_f64(vdivq_f64(v33, v32));
      *(float *)v32.f64 = 1.0 / (double)v31;
      *(_DWORD *)(v26 + 88) = LODWORD(v32.f64[0]);
      v34 = *(_DWORD *)(v26 + 432);
      if (fabsf(*(float *)(v26 + 176)) > 0.3)
      {
        *(_DWORD *)(v26 + 176) = 1050253722;
        v35 = (NSObject **)spp3SubsystemAsync();
        if (v35)
        {
          v36 = *v35;
          if (!*v35)
            goto LABEL_25;
        }
        else
        {
          v36 = MEMORY[0x1E0C81028];
        }
        if (os_log_type_enabled(v36, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 136315650;
          *(_QWORD *)v137 = "CLSPBlocks.cpp";
          *(_WORD *)&v137[8] = 1024;
          *(_DWORD *)&v137[10] = 201;
          *(_WORD *)&v137[14] = 2048;
          *(_QWORD *)&v137[16] = 0x3FD3333333333333;
          _os_log_impl(&dword_1B5ED0000, v36, OS_LOG_TYPE_DEFAULT, "%25s:%-5d PilotAmplLo limited to %f", buf, 0x1Cu);
        }
      }
LABEL_25:
      if (fabsf(*(float *)(v26 + 172)) <= 0.3)
        goto LABEL_32;
      *(_DWORD *)(v26 + 172) = 1050253722;
      v37 = (NSObject **)spp3SubsystemAsync();
      if (v37)
      {
        v38 = *v37;
        if (!*v37)
          goto LABEL_32;
      }
      else
      {
        v38 = MEMORY[0x1E0C81028];
      }
      if (os_log_type_enabled(v38, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 136315650;
        *(_QWORD *)v137 = "CLSPBlocks.cpp";
        *(_WORD *)&v137[8] = 1024;
        *(_DWORD *)&v137[10] = 206;
        *(_WORD *)&v137[14] = 2048;
        *(_QWORD *)&v137[16] = 0x3FD3333333333333;
        _os_log_impl(&dword_1B5ED0000, v38, OS_LOG_TYPE_DEFAULT, "%25s:%-5d PilotAmplHi limited to %f", buf, 0x1Cu);
      }
LABEL_32:
      v39 = *(float *)(v26 + 180);
      if (*(float *)(v26 + 184) > v39)
      {
        *(float *)(v26 + 184) = v39;
        v40 = (NSObject **)spp3SubsystemAsync();
        if (v40)
        {
          v41 = *v40;
          if (!*v40)
            goto LABEL_39;
        }
        else
        {
          v41 = MEMORY[0x1E0C81028];
        }
        if (os_log_type_enabled(v41, OS_LOG_TYPE_DEFAULT))
        {
          v42 = *(float *)(v26 + 184);
          *(_DWORD *)buf = 136315650;
          *(_QWORD *)v137 = "CLSPBlocks.cpp";
          *(_WORD *)&v137[8] = 1024;
          *(_DWORD *)&v137[10] = 211;
          *(_WORD *)&v137[14] = 2048;
          *(double *)&v137[16] = v42;
          _os_log_impl(&dword_1B5ED0000, v41, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Parameter PilotLowerThres greater than PilotUpperThres. Set PilotLowerThres = %f", buf, 0x1Cu);
        }
      }
LABEL_39:
      v43 = *(_QWORD *)(v26 + 248);
      if (v43 && *(_QWORD *)(v26 + 256))
      {
        (*(void (**)(uint64_t, double))(*(_QWORD *)v43 + 40))(v43, a3);
        v45 = *(_DWORD *)(v26 + 216);
        if (v45 == 2)
        {
          (*(void (**)(_QWORD, double))(**(_QWORD **)(v26 + 256) + 40))(*(_QWORD *)(v26 + 256), a3);
        }
        else if (v45 == 1)
        {
          v46 = v44;
          *(_DWORD *)buf = (*(double (**)(_QWORD))(**(_QWORD **)(v26 + 248) + 72))(*(_QWORD *)(v26 + 248));
          *(_QWORD *)&v137[4] = v46;
          memset(&v137[12], 0, 32);
          *(_QWORD *)v138 = 0;
          (*(void (**)(_QWORD, uint8_t *, double))(**(_QWORD **)(v26 + 256) + 48))(*(_QWORD *)(v26 + 256), buf, a3);
        }
        else
        {
          v47 = (NSObject **)spp3SubsystemAsync();
          if (v47)
          {
            v48 = *v47;
            if (!*v47)
              goto LABEL_51;
          }
          else
          {
            v48 = MEMORY[0x1E0C81028];
          }
          if (os_log_type_enabled(v48, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 136315394;
            *(_QWORD *)v137 = "CLSPBlocks.cpp";
            *(_WORD *)&v137[8] = 1024;
            *(_DWORD *)&v137[10] = 234;
            _os_log_impl(&dword_1B5ED0000, v48, OS_LOG_TYPE_ERROR, "%25s:%-5d Acting on invalid ThermalMeasurementType", buf, 0x12u);
          }
        }
      }
LABEL_51:
      *(float *)(v26 + 228) = 1.0 - *(float *)(v26 + 172);
      v49 = 1;
      do
        v50 = 1 << v49++;
      while (v50 < v9);
      v51 = *(double *)(v26 + 160);
      *(double *)(v26 + 280) = v51;
      v52 = v51 * (a3 / (double)v50);
      v53 = 0.0;
      if (v52 >= 0.00001)
        v53 = exp(-4.60517019 / v52);
      v54 = 1.0 - v53;
      *(float *)(v26 + 288) = v54;
      *(_DWORD *)(v26 + 292) = v34;
      v55 = 1;
      do
        v56 = 1 << v55++;
      while (v56 < v9);
      v57 = *(double *)(v26 + 192);
      *(double *)(v26 + 296) = v57;
      v58 = v57 * (a3 / (double)v56);
      v59 = 0.0;
      v60 = 0.0;
      if (v58 >= 0.00001)
        v60 = exp(-4.60517019 / v58);
      v61 = 1.0 - v60;
      *(float *)(v26 + 304) = v61;
      v62 = *(double *)(v26 + 200) * v13;
      *(double *)(v26 + 312) = v62;
      v63 = 1.0;
      if (v62 * a3 >= 0.00001)
      {
        v59 = exp(-4.60517019 / (v62 * a3));
        v63 = 1.0 - v59;
      }
      *(float *)(v26 + 320) = v63;
      *(double *)(v26 + 328) = v62;
      v64 = 1.0 - v59;
      *(float *)(v26 + 336) = v64;
      *(_QWORD *)(v26 + 344) = 0x4024000000000000;
      *(float *)(v26 + 352) = v133;
      (*(void (**)(_QWORD, double, double))(**(_QWORD **)(v26 + 424) + 168))(*(_QWORD *)(v26 + 424), a3, v135 * *(double *)(v26 + 56) / (v135 + *(double *)(v26 + 72) + *(double *)(v26 + 64)));
      v65 = 1;
      do
        v66 = 1 << v65++;
      while (v66 < v9);
      *(_DWORD *)(v26 + 536) = v66;
      v67 = 1;
      do
        v68 = 1 << v67++;
      while (v68 < v9);
      v69 = a3 / (double)v68;
      v70 = *(double *)(v26 + 496);
      v71 = 1.0 / v69 / v70;
      v72 = *(double *)(v26 + 488) * 0.5 * v71;
      *(float *)(v26 + 572) = v72;
      *(float *)(v26 + 576) = v72;
      v73 = 1.0 - v71;
      *(float *)(v26 + 568) = -v73;
      v74 = 1.0 / v69 / *(double *)(v26 + 512);
      v13 = 0.5;
      *(float *)&v71 = v74 * (*(double *)(v26 + 504) * 0.5);
      *(_DWORD *)(v26 + 592) = LODWORD(v71);
      *(_DWORD *)(v26 + 596) = LODWORD(v71);
      *(float *)&v74 = 1.0 - v74;
      *(float *)(v26 + 588) = -*(float *)&v74;
      *(double *)(v26 + 528) = v70 * *(double *)(v26 + 448);
      shouldTraceRender();
      v75 = 1.0 / v69 / *(double *)(v26 + 528);
      v76 = v75 * (*(double *)(v26 + 520) * 0.5);
      *(float *)(v26 + 612) = v76;
      *(float *)(v26 + 616) = v76;
      *(float *)&v75 = 1.0 - v75;
      *(float *)(v26 + 608) = -*(float *)&v75;
      clsp::AttackRelease<float,double>::calcCoeffs(v26 + 632, v69);
      *(_QWORD *)(v26 + 680) = 0x3F747AE140000000;
      *(float *)(v26 + 688) = v132;
      *(_QWORD *)(v26 + 696) = 0x3F747AE140000000;
      *(float *)(v26 + 704) = v132;
      *(_QWORD *)(v26 + 712) = 0x3FE0000000000000;
      *(float *)(v26 + 720) = v21;
      *(_QWORD *)(v26 + 728) = 0x3FE0000000000000;
      *(float *)(v26 + 736) = v21;
      LODWORD(v77) = *(_DWORD *)(v26 + 536);
      *(float *)&v77 = a3 / (double)v77;
      *(_DWORD *)(v26 + 540) = vcvtps_u32_f32(*(float *)&v77);
      if (*(float *)(v26 + 472) > 0.0)
      {
        v78 = (NSObject **)spp3SubsystemAsync();
        if (v78)
        {
          v79 = *v78;
          if (!*v78)
          {
LABEL_72:
            *(_DWORD *)(v26 + 472) = 0;
            goto LABEL_73;
          }
        }
        else
        {
          v79 = MEMORY[0x1E0C81028];
        }
        if (os_log_type_enabled(v79, OS_LOG_TYPE_DEFAULT))
        {
          v80 = *(float *)(v26 + 472);
          *(_DWORD *)buf = 136315650;
          *(_QWORD *)v137 = "CLSPBlocks.h";
          *(_WORD *)&v137[8] = 1024;
          *(_DWORD *)&v137[10] = 1278;
          *(_WORD *)&v137[14] = 2048;
          *(double *)&v137[16] = v80;
          _os_log_impl(&dword_1B5ED0000, v79, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Safe limit offset = %f, should be negative. Setting to 0.", buf, 0x1Cu);
        }
        goto LABEL_72;
      }
LABEL_73:
      if (*(float *)(v26 + 456) <= *(float *)(v26 + 432))
        goto LABEL_81;
      v81 = (NSObject **)spp3SubsystemAsync();
      if (!v81)
      {
        v82 = MEMORY[0x1E0C81028];
LABEL_78:
        if (os_log_type_enabled(v82, OS_LOG_TYPE_DEFAULT))
        {
          v83 = *(float *)(v26 + 456);
          v84 = *(float *)(v26 + 432);
          *(_DWORD *)buf = 136315906;
          *(_QWORD *)v137 = "CLSPBlocks.h";
          *(_WORD *)&v137[8] = 1024;
          *(_DWORD *)&v137[10] = 1283;
          *(_WORD *)&v137[14] = 2048;
          *(double *)&v137[16] = v83;
          *(_WORD *)&v137[24] = 2048;
          *(double *)&v137[26] = v84;
          _os_log_impl(&dword_1B5ED0000, v82, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Safe limit %f > thermal limit %f. Setting Safe limit = thermal limit.", buf, 0x26u);
        }
        goto LABEL_80;
      }
      v82 = *v81;
      if (*v81)
        goto LABEL_78;
LABEL_80:
      *(_DWORD *)(v26 + 456) = *(_DWORD *)(v26 + 432);
LABEL_81:
      HIDWORD(v85) = 1078853632;
      LODWORD(v85) = *(_DWORD *)(v26 + 536);
      v86 = *(double *)(v26 + 464) * 60.0 * a3 / (double)v85;
      *(_DWORD *)(v26 + 544) = vcvtps_u32_f32(v86);
      clsp::DelayLine<float,double>::calcCoeffs(*(double **)(v26 + 776), a3);
      v87 = *(_QWORD *)(v26 + 784);
      v88 = 1;
      do
        v89 = 1 << v88++;
      while (v89 < v9);
      v90 = (float)(*(float *)v87 * v131) / (float)v89;
      *(_DWORD *)(v87 + 4) = vcvtas_u32_f32(v90);
      *(float *)(v87 + 8) = 1.0 / (float)roundf(v90);
      *(_DWORD *)(*(_QWORD *)(v26 + 792) + 4) = vcvtas_u32_f32(**(float **)(v26 + 792) * v131);
      v91 = *(double **)(v26 + 1000);
      if (v91)
        clsp::DelayLine<float,double>::calcCoeffs(v91, a3);
      v92 = *(double **)(v26 + 1008);
      if (v92)
        clsp::DelayLine<float,double>::calcCoeffs(v92, a3);
      v6 += 2;
    }
    while (v6 != v5);
  }
  if ((a2 & 1) != 0)
  {
    v93 = *a1;
    v94 = a1[1];
    v96 = (uint64_t)(*a1 + 2);
    v95 = **a1;
    if (*a1 == v94 || v96 == (_QWORD)v94)
    {
      v98 = sqrt(*(double *)(v95 + 144) / *(double *)(v95 + 128));
    }
    else
    {
      v99 = (uint64_t)(*a1 + 2);
      v100 = *a1;
      v101 = (uint64_t *)v99;
      do
      {
        v103 = *v101;
        v101 += 2;
        v102 = v103;
        if (sqrt(*(double *)(v95 + 144) / *(double *)(v95 + 128)) < sqrt(*(double *)(v103 + 144) / *(double *)(v103 + 128)))
        {
          v95 = v102;
          v100 = (uint64_t *)v99;
        }
        v99 = (uint64_t)v101;
      }
      while (v101 != v94);
      v104 = *(double *)(*v100 + 144) / *(double *)(*v100 + 128);
      v105 = *a1 + 2;
      do
      {
        v106 = clsp::CLSPKernel_v5::calc_x_ul_norm(*v93);
        v107 = *v105;
        v105 += 2;
        if (v106 < clsp::CLSPKernel_v5::calc_x_ul_norm(v107))
          v93 = (uint64_t *)v96;
        v96 = (uint64_t)v105;
      }
      while (v105 != v94);
      v95 = *v93;
      v98 = sqrt(v104);
    }
    v108 = clsp::CLSPKernel_v5::calc_x_ul_norm(v95);
    v109 = *a1;
    v110 = a1[1];
    if (*a1 != v110)
    {
      v111 = v109 + 2;
      if (v109 + 2 != v110)
      {
        v112 = v109 + 2;
        do
        {
          v113 = *v112;
          v112 += 2;
          v114 = (*(double (**)(_QWORD))(**(_QWORD **)(v113 + 424) + 72))(*(_QWORD *)(v113 + 424));
          if (v114 < (*(double (**)(_QWORD))(**(_QWORD **)(*v109 + 424) + 72))(*(_QWORD *)(*v109 + 424)))
            v109 = v111;
          v111 = v112;
        }
        while (v112 != v110);
      }
    }
    v115 = (*(double (**)(_QWORD))(**(_QWORD **)(*v109 + 424) + 72))(*(_QWORD *)(*v109 + 424));
    v116 = *a1;
    v117 = a1[1];
    if (*a1 != v117)
    {
      v118 = v116 + 2;
      if (v116 + 2 != v117)
      {
        v119 = v116 + 2;
        do
        {
          v120 = *v119;
          v119 += 2;
          v121 = (*(double (**)(_QWORD))(**(_QWORD **)(v120 + 424) + 40))(*(_QWORD *)(v120 + 424));
          if (v121 < (*(double (**)(_QWORD))(**(_QWORD **)(*v116 + 424) + 40))(*(_QWORD *)(*v116 + 424)))
            v116 = v118;
          v118 = v119;
        }
        while (v119 != v117);
      }
    }
    v122 = (*(double (**)(_QWORD))(**(_QWORD **)(*v116 + 424) + 40))(*(_QWORD *)(*v116 + 424));
    v123 = spp3Subsystem();
    if (v123)
    {
      if ((*(_BYTE *)(v123 + 8) & 1) != 0)
      {
        v124 = *(NSObject **)v123;
        if (*(_QWORD *)v123)
        {
          if (os_log_type_enabled(*(os_log_t *)v123, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)buf = 136316418;
            *(_QWORD *)v137 = "CLSPKernel_v5.cpp";
            *(_WORD *)&v137[8] = 1024;
            *(_DWORD *)&v137[10] = 1701;
            *(_WORD *)&v137[14] = 2048;
            *(double *)&v137[16] = v98;
            *(_WORD *)&v137[24] = 2048;
            *(double *)&v137[26] = v108;
            *(_WORD *)&v137[34] = 2048;
            *(double *)&v137[36] = v115;
            *(_WORD *)v138 = 2048;
            *(double *)&v138[2] = v122;
            _os_log_impl(&dword_1B5ED0000, v124, OS_LOG_TYPE_DEBUG, "%25s:%-5d Using synchronized worst case displacement controller values w_0=%f, x_ul_norm=%f, Q_d=%f, G_bw=%f", buf, 0x3Au);
          }
        }
      }
    }
    v125 = *a1;
    v126 = a1[1];
    if (*a1 != v126)
    {
      do
      {
        v127 = *v125;
        v128 = spp3Subsystem();
        if (v128)
        {
          if ((*(_BYTE *)(v128 + 8) & 1) != 0)
          {
            v129 = *(NSObject **)v128;
            if (*(_QWORD *)v128)
            {
              if (os_log_type_enabled(*(os_log_t *)v128, OS_LOG_TYPE_DEBUG))
              {
                *(_DWORD *)buf = 136315394;
                *(_QWORD *)v137 = "CLSPKernel_v5.cpp";
                *(_WORD *)&v137[8] = 1024;
                *(_DWORD *)&v137[10] = 910;
                _os_log_impl(&dword_1B5ED0000, v129, OS_LOG_TYPE_DEBUG, "%25s:%-5d CLSPKernel_v5::CalcCoeffsSyncDisp", buf, 0x12u);
              }
            }
          }
        }
        (*(void (**)(_QWORD, double, double, double, double, double, double))(**(_QWORD **)(v127 + 424)
                                                                                       + 176))(*(_QWORD *)(v127 + 424), a3, v98, v115, v122, v108, *(double *)(v127 + 112)* *(double *)(v127 + 56)/ (*(double *)(v127 + 112) + *(double *)(v127 + 72) + *(double *)(v127 + 64)));
        v125 += 2;
      }
      while (v125 != v126);
    }
  }
}

double clsp::CLSPKernel_v5::calc_x_ul_norm(uint64_t a1)
{
  double v1;
  double v2;
  double v3;
  double v4;
  double v5;
  double v6;
  double v7;

  v1 = *(double *)(a1 + 112);
  v2 = *(double *)(a1 + 120);
  v3 = v1 * *(double *)(a1 + 56) / (v1 + *(double *)(a1 + 72) + *(double *)(a1 + 64));
  v4 = *(double *)(a1 + 144);
  v5 = sqrt(v4 * *(double *)(a1 + 128)) / (v2 * v2 / v1 + *(double *)(a1 + 136));
  (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 424) + 56))(*(_QWORD *)(a1 + 424));
  v7 = 1.0;
  if (v5 >= 1.0)
    v7 = v5;
  return v2 * (v3 * 1000.0) * v7 / (v1 * v4) / v6;
}

void clsp::CLSPKernel_v5::PrintCoeffs(clsp::CLSPKernel_v5 *this)
{
  std::string *v2;
  __int128 v3;
  std::string *v4;
  __int128 v5;
  uint64_t v6;
  std::string *v7;
  uint64_t v8;
  _BYTE *v9;
  std::string *v10;
  __int128 v11;
  const std::string::value_type *v12;
  std::string::size_type v13;
  std::string *v14;
  __int128 v15;
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *v18;
  _QWORD *v19;
  _QWORD *v20;
  std::string *v21;
  __int128 v22;
  std::string *v23;
  __int128 v24;
  const std::string::value_type *p_p;
  std::string::size_type v26;
  std::string *v27;
  __int128 v28;
  std::string *v29;
  __int128 v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  const std::string::value_type *v34;
  std::string::size_type v35;
  std::string *v36;
  __int128 v37;
  _QWORD *v38;
  _QWORD *v39;
  _QWORD *v40;
  _QWORD *v41;
  std::string *v42;
  __int128 v43;
  std::string *v44;
  __int128 v45;
  const std::string::value_type *v46;
  std::string::size_type v47;
  std::string *v48;
  __int128 v49;
  std::string *v50;
  __int128 v51;
  const std::string::value_type *v52;
  std::string::size_type v53;
  std::string *v54;
  __int128 v55;
  _QWORD *v56;
  _QWORD *v57;
  _QWORD *v58;
  _QWORD *v59;
  _QWORD *v60;
  _QWORD *v61;
  _QWORD *v62;
  _QWORD *v63;
  _QWORD *v64;
  _QWORD *v65;
  _QWORD *v66;
  _QWORD *v67;
  _QWORD *v68;
  _QWORD *v69;
  _QWORD *v70;
  _QWORD *v71;
  _QWORD *v72;
  _QWORD *v73;
  _QWORD *v74;
  _QWORD *v75;
  std::string *v76;
  __int128 v77;
  std::string *v78;
  __int128 v79;
  const std::string::value_type *v80;
  std::string::size_type v81;
  std::string *v82;
  __int128 v83;
  std::string *v84;
  __int128 v85;
  const std::string::value_type *v86;
  std::string::size_type v87;
  std::string *v88;
  __int128 v89;
  uint64_t v90;
  std::string *v91;
  __int128 v92;
  std::string *v93;
  __int128 v94;
  const std::string::value_type *v95;
  std::string::size_type v96;
  std::string *v97;
  __int128 v98;
  std::string *v99;
  __int128 v100;
  const std::string::value_type *v101;
  std::string::size_type v102;
  std::string *v103;
  __int128 v104;
  _QWORD *v105;
  _QWORD *v106;
  _QWORD *v107;
  _QWORD *v108;
  _QWORD *v109;
  _QWORD *v110;
  _QWORD *v111;
  _QWORD *v112;
  _QWORD *v113;
  _QWORD *v114;
  _QWORD *v115;
  _QWORD *v116;
  _QWORD *v117;
  _QWORD *v118;
  _QWORD *v119;
  _QWORD *v120;
  _QWORD *v121;
  _QWORD *v122;
  _QWORD *v123;
  _QWORD *v124;
  _QWORD *v125;
  std::string *v126;
  __int128 v127;
  std::string *v128;
  __int128 v129;
  const std::string::value_type *v130;
  std::string::size_type v131;
  std::string *v132;
  __int128 v133;
  std::string *v134;
  __int128 v135;
  const std::string::value_type *v136;
  std::string::size_type v137;
  std::string *v138;
  __int128 v139;
  void **v140;
  std::string::size_type v141;
  std::string *v142;
  __int128 v143;
  std::string *v144;
  __int128 v145;
  std::string *v146;
  std::string::size_type size;
  std::string *v148;
  __int128 v149;
  std::string *v150;
  __int128 v151;
  std::string *v152;
  std::string::size_type v153;
  std::string *v154;
  __int128 v155;
  std::string *v156;
  __int128 v157;
  void **v158;
  std::string::size_type v159;
  std::string *v160;
  __int128 v161;
  void **v162;
  std::string::size_type v163;
  std::string *v164;
  __int128 v165;
  _QWORD *v166;
  _QWORD *v167;
  std::string *v168;
  __int128 v169;
  std::string *v170;
  __int128 v171;
  const std::string::value_type *v172;
  std::string::size_type v173;
  std::string *v174;
  __int128 v175;
  std::string *v176;
  __int128 v177;
  void **v178;
  std::string::size_type v179;
  std::string *v180;
  __int128 v181;
  _QWORD *v182;
  std::string *v183;
  __int128 v184;
  std::string *v185;
  __int128 v186;
  const std::string::value_type *v187;
  std::string::size_type v188;
  std::string *v189;
  __int128 v190;
  std::string *v191;
  __int128 v192;
  void **v193;
  std::string::size_type v194;
  std::string *v195;
  std::string *v196;
  __int128 v197;
  const std::string::value_type *v198;
  std::string::size_type v199;
  std::string *v200;
  __int128 v201;
  NSObject **v202;
  NSObject *v203;
  __int128 *v204;
  void *v205;
  char v206;
  void *v207[2];
  int64_t v208;
  void *v209;
  char v210;
  void *v211[2];
  int64_t v212;
  void *v213[2];
  char v214;
  void *v215[2];
  unsigned __int8 v216;
  void *v217[2];
  char v218;
  void *v219[2];
  unsigned __int8 v220;
  std::string v221;
  std::string v222;
  void *v223[2];
  char v224;
  void *v225[2];
  unsigned __int8 v226;
  void *v227;
  char v228;
  __int128 v229;
  int64_t v230;
  void *v231;
  char v232;
  __int128 v233;
  int64_t v234;
  void *v235;
  char v236;
  __int128 v237;
  int64_t v238;
  void *v239;
  char v240;
  __int128 v241;
  int64_t v242;
  void *v243;
  char v244;
  __int128 v245;
  int64_t v246;
  std::string v247;
  std::string v248;
  std::string v249;
  std::string v250;
  std::string v251;
  std::string v252;
  std::string v253;
  std::string v254;
  std::string v255;
  std::string v256;
  std::string v257;
  std::string v258;
  std::string v259;
  std::string v260;
  std::string v261;
  std::string v262;
  std::string v263;
  std::string v264;
  __int128 v265;
  int64_t v266;
  std::string v267;
  std::string v268;
  std::string v269;
  __int128 v270;
  int64_t v271;
  void *v272[2];
  char v273;
  __int128 __p;
  int64_t v275;
  std::string v276;
  std::string v277;
  std::string v278;
  std::string v279;
  _BYTE v280[56];
  void *v281;
  char v282;
  _QWORD v283[20];

  v283[19] = *MEMORY[0x1E0C80C00];
  std::to_string(&v267, *((_DWORD *)this + 4));
  v2 = std::string::insert(&v267, 0, "\n[Channel ", 0xAuLL);
  v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
  v268.__r_.__value_.__r.__words[2] = v2->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v268.__r_.__value_.__l.__data_ = v3;
  v2->__r_.__value_.__l.__size_ = 0;
  v2->__r_.__value_.__r.__words[2] = 0;
  v2->__r_.__value_.__r.__words[0] = 0;
  v4 = std::string::append(&v268, "]\n", 2uLL);
  v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
  v269.__r_.__value_.__r.__words[2] = v4->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v269.__r_.__value_.__l.__data_ = v5;
  v4->__r_.__value_.__l.__size_ = 0;
  v4->__r_.__value_.__r.__words[2] = 0;
  v4->__r_.__value_.__r.__words[0] = 0;
  std::to_string(&v279, *((double *)this + 3));
  while ((SHIBYTE(v279.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if (*((_BYTE *)&v278.__r_.__value_.__r.__words[2] + HIBYTE(v279.__r_.__value_.__r.__words[2]) + 7) != 48)
      goto LABEL_8;
    v6 = HIBYTE(v279.__r_.__value_.__r.__words[2]) - 1;
    *((_BYTE *)&v279.__r_.__value_.__s + 23) = (*((_BYTE *)&v279.__r_.__value_.__s + 23) - 1) & 0x7F;
    v7 = &v279;
LABEL_7:
    v7->__r_.__value_.__s.__data_[v6] = 0;
  }
  v7 = (std::string *)v279.__r_.__value_.__r.__words[0];
  if (*(_BYTE *)(v279.__r_.__value_.__r.__words[0] + v279.__r_.__value_.__l.__size_ - 1) == 48)
  {
    v6 = --v279.__r_.__value_.__l.__size_;
    goto LABEL_7;
  }
LABEL_8:
  *(std::string *)v280 = v279;
  memset(&v279, 0, sizeof(v279));
  while ((v280[23] & 0x80000000) == 0)
  {
    if (*((_BYTE *)&v279.__r_.__value_.__r.__words[2] + v280[23] + 7) != 46)
      goto LABEL_15;
    v8 = v280[23] - 1;
    v280[23] = (v280[23] - 1) & 0x7F;
    v9 = v280;
LABEL_14:
    v9[v8] = 0;
  }
  v9 = *(_BYTE **)v280;
  if (*(_BYTE *)(*(_QWORD *)v280 + *(_QWORD *)&v280[8] - 1) == 46)
  {
    v8 = --*(_QWORD *)&v280[8];
    goto LABEL_14;
  }
LABEL_15:
  v247 = *(std::string *)v280;
  if (SHIBYTE(v279.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v279.__r_.__value_.__l.__data_);
  v10 = std::string::insert(&v247, 0, "\nSample rate: ", 0xEuLL);
  v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
  v248.__r_.__value_.__r.__words[2] = v10->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v248.__r_.__value_.__l.__data_ = v11;
  v10->__r_.__value_.__l.__size_ = 0;
  v10->__r_.__value_.__r.__words[2] = 0;
  v10->__r_.__value_.__r.__words[0] = 0;
  if (*((_BYTE *)this + 1073))
    v12 = "\nVP mode: on\n";
  else
    v12 = "\nVP mode: off\n";
  if (*((_BYTE *)this + 1073))
    v13 = 13;
  else
    v13 = 14;
  v14 = std::string::append(&v248, v12, v13);
  v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
  v249.__r_.__value_.__r.__words[2] = v14->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v249.__r_.__value_.__l.__data_ = v15;
  v14->__r_.__value_.__l.__size_ = 0;
  v14->__r_.__value_.__r.__words[2] = 0;
  v14->__r_.__value_.__r.__words[0] = 0;
  std::string::basic_string[abi:ne180100]<0>(&v243, "ElecModel");
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v280);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v280, (uint64_t)"ag = ", 5);
  v16 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)", Rshunt = ", 11);
  v17 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)", Rampout = ", 12);
  v18 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)"mc_ageff = ", 11);
  v19 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)", invRt = ", 10);
  v20 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)", invThermalPeriod = ", 21);
  std::ostream::operator<<();
  std::operator+<char>();
  v21 = std::string::append(&v276, "]\n", 2uLL);
  v22 = *(_OWORD *)&v21->__r_.__value_.__l.__data_;
  v277.__r_.__value_.__r.__words[2] = v21->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v277.__r_.__value_.__l.__data_ = v22;
  v21->__r_.__value_.__l.__size_ = 0;
  v21->__r_.__value_.__r.__words[2] = 0;
  v21->__r_.__value_.__r.__words[0] = 0;
  std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)&v280[8], v272);
  AUT::ReplaceAll(&v279, (uint64_t)v272, "\n", 1, "\n  ", 3uLL);
  v23 = std::string::insert(&v279, 0, "  ", 2uLL);
  v24 = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
  v275 = v23->__r_.__value_.__r.__words[2];
  __p = v24;
  v23->__r_.__value_.__l.__size_ = 0;
  v23->__r_.__value_.__r.__words[2] = 0;
  v23->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v279.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v279.__r_.__value_.__l.__data_);
  if (v275 >= 0)
    p_p = (const std::string::value_type *)&__p;
  else
    p_p = (const std::string::value_type *)__p;
  if (v275 >= 0)
    v26 = HIBYTE(v275);
  else
    v26 = *((_QWORD *)&__p + 1);
  v27 = std::string::append(&v277, p_p, v26);
  v28 = *(_OWORD *)&v27->__r_.__value_.__l.__data_;
  v278.__r_.__value_.__r.__words[2] = v27->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v278.__r_.__value_.__l.__data_ = v28;
  v27->__r_.__value_.__l.__size_ = 0;
  v27->__r_.__value_.__r.__words[2] = 0;
  v27->__r_.__value_.__r.__words[0] = 0;
  v29 = std::string::append(&v278, "\n", 1uLL);
  v30 = *(_OWORD *)&v29->__r_.__value_.__l.__data_;
  v246 = v29->__r_.__value_.__r.__words[2];
  v245 = v30;
  v29->__r_.__value_.__l.__size_ = 0;
  v29->__r_.__value_.__r.__words[2] = 0;
  v29->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v278.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v278.__r_.__value_.__l.__data_);
  if (SHIBYTE(v275) < 0)
    operator delete((void *)__p);
  if (v273 < 0)
    operator delete(v272[0]);
  if (SHIBYTE(v277.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v277.__r_.__value_.__l.__data_);
  if (SHIBYTE(v276.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v276.__r_.__value_.__l.__data_);
  v31 = *MEMORY[0x1E0DE4F60];
  *(_QWORD *)v280 = v31;
  v32 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
  *(_QWORD *)&v280[*(_QWORD *)(v31 - 24)] = v32;
  v33 = MEMORY[0x1E0DE4FB8];
  *(_QWORD *)&v280[8] = MEMORY[0x1E0DE4FB8] + 16;
  if (v282 < 0)
    operator delete(v281);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x1BCC95BE4](v283);
  if (v246 >= 0)
    v34 = (const std::string::value_type *)&v245;
  else
    v34 = (const std::string::value_type *)v245;
  if (v246 >= 0)
    v35 = HIBYTE(v246);
  else
    v35 = *((_QWORD *)&v245 + 1);
  v36 = std::string::append(&v249, v34, v35);
  v37 = *(_OWORD *)&v36->__r_.__value_.__l.__data_;
  v250.__r_.__value_.__r.__words[2] = v36->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v250.__r_.__value_.__l.__data_ = v37;
  v36->__r_.__value_.__l.__size_ = 0;
  v36->__r_.__value_.__r.__words[2] = 0;
  v36->__r_.__value_.__r.__words[0] = 0;
  std::string::basic_string[abi:ne180100]<0>(&v239, "DispModel");
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v280);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v280, (uint64_t)"Reb = ", 6);
  v38 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v38, (uint64_t)", phi = ", 8);
  v39 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v39, (uint64_t)", mt = ", 7);
  v40 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v40, (uint64_t)", ct = ", 7);
  v41 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v41, (uint64_t)", kt = ", 7);
  std::ostream::operator<<();
  std::operator+<char>();
  v42 = std::string::append(&v276, "]\n", 2uLL);
  v43 = *(_OWORD *)&v42->__r_.__value_.__l.__data_;
  v277.__r_.__value_.__r.__words[2] = v42->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v277.__r_.__value_.__l.__data_ = v43;
  v42->__r_.__value_.__l.__size_ = 0;
  v42->__r_.__value_.__r.__words[2] = 0;
  v42->__r_.__value_.__r.__words[0] = 0;
  std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)&v280[8], v272);
  AUT::ReplaceAll(&v279, (uint64_t)v272, "\n", 1, "\n  ", 3uLL);
  v44 = std::string::insert(&v279, 0, "  ", 2uLL);
  v45 = *(_OWORD *)&v44->__r_.__value_.__l.__data_;
  v275 = v44->__r_.__value_.__r.__words[2];
  __p = v45;
  v44->__r_.__value_.__l.__size_ = 0;
  v44->__r_.__value_.__r.__words[2] = 0;
  v44->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v279.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v279.__r_.__value_.__l.__data_);
  if (v275 >= 0)
    v46 = (const std::string::value_type *)&__p;
  else
    v46 = (const std::string::value_type *)__p;
  if (v275 >= 0)
    v47 = HIBYTE(v275);
  else
    v47 = *((_QWORD *)&__p + 1);
  v48 = std::string::append(&v277, v46, v47);
  v49 = *(_OWORD *)&v48->__r_.__value_.__l.__data_;
  v278.__r_.__value_.__r.__words[2] = v48->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v278.__r_.__value_.__l.__data_ = v49;
  v48->__r_.__value_.__l.__size_ = 0;
  v48->__r_.__value_.__r.__words[2] = 0;
  v48->__r_.__value_.__r.__words[0] = 0;
  v50 = std::string::append(&v278, "\n", 1uLL);
  v51 = *(_OWORD *)&v50->__r_.__value_.__l.__data_;
  v242 = v50->__r_.__value_.__r.__words[2];
  v241 = v51;
  v50->__r_.__value_.__l.__size_ = 0;
  v50->__r_.__value_.__r.__words[2] = 0;
  v50->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v278.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v278.__r_.__value_.__l.__data_);
  if (SHIBYTE(v275) < 0)
    operator delete((void *)__p);
  if (v273 < 0)
    operator delete(v272[0]);
  if (SHIBYTE(v277.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v277.__r_.__value_.__l.__data_);
  if (SHIBYTE(v276.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v276.__r_.__value_.__l.__data_);
  *(_QWORD *)v280 = v31;
  *(_QWORD *)&v280[*(_QWORD *)(v31 - 24)] = v32;
  *(_QWORD *)&v280[8] = v33 + 16;
  if (v282 < 0)
    operator delete(v281);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x1BCC95BE4](v283);
  if (v242 >= 0)
    v52 = (const std::string::value_type *)&v241;
  else
    v52 = (const std::string::value_type *)v241;
  if (v242 >= 0)
    v53 = HIBYTE(v242);
  else
    v53 = *((_QWORD *)&v241 + 1);
  v54 = std::string::append(&v250, v52, v53);
  v55 = *(_OWORD *)&v54->__r_.__value_.__l.__data_;
  v251.__r_.__value_.__r.__words[2] = v54->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v251.__r_.__value_.__l.__data_ = v55;
  v54->__r_.__value_.__l.__size_ = 0;
  v54->__r_.__value_.__r.__words[2] = 0;
  v54->__r_.__value_.__r.__words[0] = 0;
  std::string::basic_string[abi:ne180100]<0>(&v235, "CLTModule");
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v280);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v280, (uint64_t)"a_t_inv = ", 10);
  v56 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v56, (uint64_t)", TlimErrDecayTime = ", 21);
  v57 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v57, (uint64_t)", TlimAdjCap = ", 15);
  v58 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v58, (uint64_t)", pilotAmplHi = ", 16);
  v59 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v59, (uint64_t)", pilotAmplLo = ", 16);
  v60 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v60, (uint64_t)"\npilotAmplUpperThres = ", 23);
  v61 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v61, (uint64_t)", pilotAmplLowerThres = ", 24);
  v62 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v62, (uint64_t)", pilotDecayTime = ", 19);
  v63 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v63, (uint64_t)", pilotDecayTimeStage2 = ", 25);
  v64 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v64, (uint64_t)", pilotEnableThres = ", 21);
  v65 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v65, (uint64_t)", RebRef = ", 11);
  v66 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v66, (uint64_t)"\nRebRefTemp = ", 14);
  v67 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v67, (uint64_t)", mc_gain = ", 12);
  v68 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v68, (uint64_t)"\n", 1);
  if (*((_QWORD *)this + 31))
  {
    v69 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v280, (uint64_t)"\nPilotTempSensor:\n", 18);
    v70 = (_QWORD *)(*(uint64_t (**)(_QWORD, _QWORD *))(**((_QWORD **)this + 31) + 16))(*((_QWORD *)this + 31), v69);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v70, (uint64_t)"\n", 1);
  }
  if (*((_QWORD *)this + 32))
  {
    v71 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v280, (uint64_t)"\nPilotGen:\n", 11);
    (*(void (**)(_QWORD, _QWORD *))(**((_QWORD **)this + 32) + 16))(*((_QWORD *)this + 32), v71);
  }
  v72 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v280, (uint64_t)"\nTLimErrSmoother:\n", 18);
  clsp::ExponentialSmoother<float,double>::dump((uint64_t)this + 280, v72);
  v73 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v72, (uint64_t)"\npilotToneGain:\n", 16);
  clsp::ExponentialSmoother<float,double>::dump((uint64_t)this + 296, v73);
  v74 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v73, (uint64_t)"\nptInterp1:\n", 12);
  clsp::ExponentialSmoother<float,double>::dump((uint64_t)this + 312, v74);
  v75 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v74, (uint64_t)"\nptInterp2:\n", 12);
  clsp::ExponentialSmoother<float,double>::dump((uint64_t)this + 328, v75);
  std::operator+<char>();
  v76 = std::string::append(&v276, "]\n", 2uLL);
  v77 = *(_OWORD *)&v76->__r_.__value_.__l.__data_;
  v277.__r_.__value_.__r.__words[2] = v76->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v277.__r_.__value_.__l.__data_ = v77;
  v76->__r_.__value_.__l.__size_ = 0;
  v76->__r_.__value_.__r.__words[2] = 0;
  v76->__r_.__value_.__r.__words[0] = 0;
  std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)&v280[8], v272);
  AUT::ReplaceAll(&v279, (uint64_t)v272, "\n", 1, "\n  ", 3uLL);
  v78 = std::string::insert(&v279, 0, "  ", 2uLL);
  v79 = *(_OWORD *)&v78->__r_.__value_.__l.__data_;
  v275 = v78->__r_.__value_.__r.__words[2];
  __p = v79;
  v78->__r_.__value_.__l.__size_ = 0;
  v78->__r_.__value_.__r.__words[2] = 0;
  v78->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v279.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v279.__r_.__value_.__l.__data_);
  if (v275 >= 0)
    v80 = (const std::string::value_type *)&__p;
  else
    v80 = (const std::string::value_type *)__p;
  if (v275 >= 0)
    v81 = HIBYTE(v275);
  else
    v81 = *((_QWORD *)&__p + 1);
  v82 = std::string::append(&v277, v80, v81);
  v83 = *(_OWORD *)&v82->__r_.__value_.__l.__data_;
  v278.__r_.__value_.__r.__words[2] = v82->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v278.__r_.__value_.__l.__data_ = v83;
  v82->__r_.__value_.__l.__size_ = 0;
  v82->__r_.__value_.__r.__words[2] = 0;
  v82->__r_.__value_.__r.__words[0] = 0;
  v84 = std::string::append(&v278, "\n", 1uLL);
  v85 = *(_OWORD *)&v84->__r_.__value_.__l.__data_;
  v238 = v84->__r_.__value_.__r.__words[2];
  v237 = v85;
  v84->__r_.__value_.__l.__size_ = 0;
  v84->__r_.__value_.__r.__words[2] = 0;
  v84->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v278.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v278.__r_.__value_.__l.__data_);
  if (SHIBYTE(v275) < 0)
    operator delete((void *)__p);
  if (v273 < 0)
    operator delete(v272[0]);
  if (SHIBYTE(v277.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v277.__r_.__value_.__l.__data_);
  if (SHIBYTE(v276.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v276.__r_.__value_.__l.__data_);
  *(_QWORD *)v280 = v31;
  *(_QWORD *)&v280[*(_QWORD *)(v31 - 24)] = v32;
  *(_QWORD *)&v280[8] = v33 + 16;
  if (v282 < 0)
    operator delete(v281);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x1BCC95BE4](v283);
  if (v238 >= 0)
    v86 = (const std::string::value_type *)&v237;
  else
    v86 = (const std::string::value_type *)v237;
  if (v238 >= 0)
    v87 = HIBYTE(v238);
  else
    v87 = *((_QWORD *)&v237 + 1);
  v88 = std::string::append(&v251, v86, v87);
  v89 = *(_OWORD *)&v88->__r_.__value_.__l.__data_;
  v252.__r_.__value_.__r.__words[2] = v88->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v252.__r_.__value_.__l.__data_ = v89;
  v88->__r_.__value_.__l.__size_ = 0;
  v88->__r_.__value_.__r.__words[2] = 0;
  v88->__r_.__value_.__r.__words[0] = 0;
  std::string::basic_string[abi:ne180100]<0>(&v231, "DispCtlr");
  v90 = *((_QWORD *)this + 53);
  if (v90)
  {
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v280);
    (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v90 + 16))(v90, v280);
    std::operator+<char>();
    v91 = std::string::append(&v276, "]\n", 2uLL);
    v92 = *(_OWORD *)&v91->__r_.__value_.__l.__data_;
    v277.__r_.__value_.__r.__words[2] = v91->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v277.__r_.__value_.__l.__data_ = v92;
    v91->__r_.__value_.__l.__size_ = 0;
    v91->__r_.__value_.__r.__words[2] = 0;
    v91->__r_.__value_.__r.__words[0] = 0;
    std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)&v280[8], v272);
    AUT::ReplaceAll(&v279, (uint64_t)v272, "\n", 1, "\n  ", 3uLL);
    v93 = std::string::insert(&v279, 0, "  ", 2uLL);
    v94 = *(_OWORD *)&v93->__r_.__value_.__l.__data_;
    v275 = v93->__r_.__value_.__r.__words[2];
    __p = v94;
    v93->__r_.__value_.__l.__size_ = 0;
    v93->__r_.__value_.__r.__words[2] = 0;
    v93->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v279.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v279.__r_.__value_.__l.__data_);
    if (v275 >= 0)
      v95 = (const std::string::value_type *)&__p;
    else
      v95 = (const std::string::value_type *)__p;
    if (v275 >= 0)
      v96 = HIBYTE(v275);
    else
      v96 = *((_QWORD *)&__p + 1);
    v97 = std::string::append(&v277, v95, v96);
    v98 = *(_OWORD *)&v97->__r_.__value_.__l.__data_;
    v278.__r_.__value_.__r.__words[2] = v97->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v278.__r_.__value_.__l.__data_ = v98;
    v97->__r_.__value_.__l.__size_ = 0;
    v97->__r_.__value_.__r.__words[2] = 0;
    v97->__r_.__value_.__r.__words[0] = 0;
    v99 = std::string::append(&v278, "\n", 1uLL);
    v100 = *(_OWORD *)&v99->__r_.__value_.__l.__data_;
    v234 = v99->__r_.__value_.__r.__words[2];
    v233 = v100;
    v99->__r_.__value_.__l.__size_ = 0;
    v99->__r_.__value_.__r.__words[2] = 0;
    v99->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v278.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v278.__r_.__value_.__l.__data_);
    if (SHIBYTE(v275) < 0)
      operator delete((void *)__p);
    if (v273 < 0)
      operator delete(v272[0]);
    if (SHIBYTE(v277.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v277.__r_.__value_.__l.__data_);
    if (SHIBYTE(v276.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v276.__r_.__value_.__l.__data_);
    *(_QWORD *)v280 = v31;
    *(_QWORD *)&v280[*(_QWORD *)(v31 - 24)] = v32;
    *(_QWORD *)&v280[8] = v33 + 16;
    if (v282 < 0)
      operator delete(v281);
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    MEMORY[0x1BCC95BE4](v283);
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(&v233, "");
  }
  if (v234 >= 0)
    v101 = (const std::string::value_type *)&v233;
  else
    v101 = (const std::string::value_type *)v233;
  if (v234 >= 0)
    v102 = HIBYTE(v234);
  else
    v102 = *((_QWORD *)&v233 + 1);
  v103 = std::string::append(&v252, v101, v102);
  v104 = *(_OWORD *)&v103->__r_.__value_.__l.__data_;
  v253.__r_.__value_.__r.__words[2] = v103->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v253.__r_.__value_.__l.__data_ = v104;
  v103->__r_.__value_.__l.__size_ = 0;
  v103->__r_.__value_.__r.__words[2] = 0;
  v103->__r_.__value_.__r.__words[0] = 0;
  std::string::basic_string[abi:ne180100]<0>(&v227, "ThermCtlr");
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v280);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v280, (uint64_t)"thermalLimit = ", 15);
  v105 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v105, (uint64_t)"\nHardLimitHeadroom = ", 21);
  v106 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v106, (uint64_t)"\nAmbientTemp = ", 15);
  v107 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v107, (uint64_t)"\nFFSpeedupFactor = ", 19);
  v108 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v108, (uint64_t)"\nsafeLimit = ", 13);
  v109 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v109, (uint64_t)"\nsafeLimitTimeMin = ", 20);
  v110 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v110, (uint64_t)"\nsafeLimitOffset = ", 19);
  v111 = (_QWORD *)std::ostream::operator<<();
  v112 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v111, (uint64_t)"\n\nm_vc:\n", 8);
  clsp::ThermalModelOrder1::dump((uint64_t)this + 488, v112);
  v113 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v112, (uint64_t)"\nm_vg:\n", 7);
  clsp::ThermalModelOrder1::dump((uint64_t)this + 504, v113);
  v114 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v113, (uint64_t)"\nm_vcff:\n", 9);
  clsp::ThermalModelOrder1::dump((uint64_t)this + 520, v114);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v114, (uint64_t)"\nthermalPeriod = ", 17);
  v115 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v115, (uint64_t)"\nthermalGainTimerInitVal = ", 27);
  v116 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v116, (uint64_t)"\nsafeLimitTimerInitVal = ", 25);
  v117 = (_QWORD *)std::ostream::operator<<();
  v118 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v117, (uint64_t)"\n\nvcFilt:\n", 10);
  clsp::IIROrder1<float>::dump((uint64_t)this + 568, v118);
  v119 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v118, (uint64_t)"\nmgFilt:\n", 9);
  clsp::IIROrder1<float>::dump((uint64_t)this + 588, v119);
  v120 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v119, (uint64_t)"\nvcffFilt:\n", 11);
  clsp::IIROrder1<float>::dump((uint64_t)this + 608, v120);
  v121 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v120, (uint64_t)"\nthermalGain:\n", 14);
  clsp::AttackRelease<float,double>::dump((uint64_t)this + 632, v121);
  v122 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v121, (uint64_t)"\nsThermalGain1:\n", 16);
  clsp::ExponentialSmoother<float,double>::dump((uint64_t)this + 680, v122);
  v123 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v122, (uint64_t)"\nsThermalGain2:\n", 16);
  clsp::ExponentialSmoother<float,double>::dump((uint64_t)this + 696, v123);
  v124 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v123, (uint64_t)"\nsPowerCtrlGain1:\n", 18);
  clsp::ExponentialSmoother<float,double>::dump((uint64_t)this + 712, v124);
  v125 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v124, (uint64_t)"\nsPowerCtrlGain2:\n", 18);
  clsp::ExponentialSmoother<float,double>::dump((uint64_t)this + 728, v125);
  std::operator+<char>();
  v126 = std::string::append(&v276, "]\n", 2uLL);
  v127 = *(_OWORD *)&v126->__r_.__value_.__l.__data_;
  v277.__r_.__value_.__r.__words[2] = v126->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v277.__r_.__value_.__l.__data_ = v127;
  v126->__r_.__value_.__l.__size_ = 0;
  v126->__r_.__value_.__r.__words[2] = 0;
  v126->__r_.__value_.__r.__words[0] = 0;
  std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)&v280[8], v272);
  AUT::ReplaceAll(&v279, (uint64_t)v272, "\n", 1, "\n  ", 3uLL);
  v128 = std::string::insert(&v279, 0, "  ", 2uLL);
  v129 = *(_OWORD *)&v128->__r_.__value_.__l.__data_;
  v275 = v128->__r_.__value_.__r.__words[2];
  __p = v129;
  v128->__r_.__value_.__l.__size_ = 0;
  v128->__r_.__value_.__r.__words[2] = 0;
  v128->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v279.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v279.__r_.__value_.__l.__data_);
  if (v275 >= 0)
    v130 = (const std::string::value_type *)&__p;
  else
    v130 = (const std::string::value_type *)__p;
  if (v275 >= 0)
    v131 = HIBYTE(v275);
  else
    v131 = *((_QWORD *)&__p + 1);
  v132 = std::string::append(&v277, v130, v131);
  v133 = *(_OWORD *)&v132->__r_.__value_.__l.__data_;
  v278.__r_.__value_.__r.__words[2] = v132->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v278.__r_.__value_.__l.__data_ = v133;
  v132->__r_.__value_.__l.__size_ = 0;
  v132->__r_.__value_.__r.__words[2] = 0;
  v132->__r_.__value_.__r.__words[0] = 0;
  v134 = std::string::append(&v278, "\n", 1uLL);
  v135 = *(_OWORD *)&v134->__r_.__value_.__l.__data_;
  v230 = v134->__r_.__value_.__r.__words[2];
  v229 = v135;
  v134->__r_.__value_.__l.__size_ = 0;
  v134->__r_.__value_.__r.__words[2] = 0;
  v134->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v278.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v278.__r_.__value_.__l.__data_);
  if (SHIBYTE(v275) < 0)
    operator delete((void *)__p);
  if (v273 < 0)
    operator delete(v272[0]);
  if (SHIBYTE(v277.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v277.__r_.__value_.__l.__data_);
  if (SHIBYTE(v276.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v276.__r_.__value_.__l.__data_);
  *(_QWORD *)v280 = v31;
  *(_QWORD *)&v280[*(_QWORD *)(v31 - 24)] = v32;
  *(_QWORD *)&v280[8] = v33 + 16;
  if (v282 < 0)
    operator delete(v281);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x1BCC95BE4](v283);
  if (v230 >= 0)
    v136 = (const std::string::value_type *)&v229;
  else
    v136 = (const std::string::value_type *)v229;
  if (v230 >= 0)
    v137 = HIBYTE(v230);
  else
    v137 = *((_QWORD *)&v229 + 1);
  v138 = std::string::append(&v253, v136, v137);
  v139 = *(_OWORD *)&v138->__r_.__value_.__l.__data_;
  v254.__r_.__value_.__r.__words[2] = v138->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v254.__r_.__value_.__l.__data_ = v139;
  v138->__r_.__value_.__l.__size_ = 0;
  v138->__r_.__value_.__r.__words[2] = 0;
  v138->__r_.__value_.__r.__words[0] = 0;
  std::string::basic_string[abi:ne180100]<0>(v223, "DelayLine");
  DumpViaStream<clsp::DelayLine<float,double>>(v225, (uint64_t)v223, *((_QWORD *)this + 97));
  if ((v226 & 0x80u) == 0)
    v140 = v225;
  else
    v140 = (void **)v225[0];
  if ((v226 & 0x80u) == 0)
    v141 = v226;
  else
    v141 = (std::string::size_type)v225[1];
  v142 = std::string::append(&v254, (const std::string::value_type *)v140, v141);
  v143 = *(_OWORD *)&v142->__r_.__value_.__l.__data_;
  v255.__r_.__value_.__r.__words[2] = v142->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v255.__r_.__value_.__l.__data_ = v143;
  v142->__r_.__value_.__l.__size_ = 0;
  v142->__r_.__value_.__r.__words[2] = 0;
  v142->__r_.__value_.__r.__words[0] = 0;
  v144 = std::string::append(&v255, "\nClipBuffer.size = ", 0x13uLL);
  v145 = *(_OWORD *)&v144->__r_.__value_.__l.__data_;
  v256.__r_.__value_.__r.__words[2] = v144->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v256.__r_.__value_.__l.__data_ = v145;
  v144->__r_.__value_.__l.__size_ = 0;
  v144->__r_.__value_.__r.__words[2] = 0;
  v144->__r_.__value_.__r.__words[0] = 0;
  std::to_string(&v222, (uint64_t)(*((_QWORD *)this + 101) - *((_QWORD *)this + 100)) >> 2);
  if ((v222.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v146 = &v222;
  else
    v146 = (std::string *)v222.__r_.__value_.__r.__words[0];
  if ((v222.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(v222.__r_.__value_.__r.__words[2]);
  else
    size = v222.__r_.__value_.__l.__size_;
  v148 = std::string::append(&v256, (const std::string::value_type *)v146, size);
  v149 = *(_OWORD *)&v148->__r_.__value_.__l.__data_;
  v257.__r_.__value_.__r.__words[2] = v148->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v257.__r_.__value_.__l.__data_ = v149;
  v148->__r_.__value_.__l.__size_ = 0;
  v148->__r_.__value_.__r.__words[2] = 0;
  v148->__r_.__value_.__r.__words[0] = 0;
  v150 = std::string::append(&v257, "\nscratch buffer.size = ", 0x17uLL);
  v151 = *(_OWORD *)&v150->__r_.__value_.__l.__data_;
  v258.__r_.__value_.__r.__words[2] = v150->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v258.__r_.__value_.__l.__data_ = v151;
  v150->__r_.__value_.__l.__size_ = 0;
  v150->__r_.__value_.__r.__words[2] = 0;
  v150->__r_.__value_.__r.__words[0] = 0;
  std::to_string(&v221, (uint64_t)(*((_QWORD *)this + 104) - *((_QWORD *)this + 103)) >> 2);
  if ((v221.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v152 = &v221;
  else
    v152 = (std::string *)v221.__r_.__value_.__r.__words[0];
  if ((v221.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v153 = HIBYTE(v221.__r_.__value_.__r.__words[2]);
  else
    v153 = v221.__r_.__value_.__l.__size_;
  v154 = std::string::append(&v258, (const std::string::value_type *)v152, v153);
  v155 = *(_OWORD *)&v154->__r_.__value_.__l.__data_;
  v259.__r_.__value_.__r.__words[2] = v154->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v259.__r_.__value_.__l.__data_ = v155;
  v154->__r_.__value_.__l.__size_ = 0;
  v154->__r_.__value_.__r.__words[2] = 0;
  v154->__r_.__value_.__r.__words[0] = 0;
  v156 = std::string::append(&v259, "\n", 1uLL);
  v157 = *(_OWORD *)&v156->__r_.__value_.__l.__data_;
  v260.__r_.__value_.__r.__words[2] = v156->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v260.__r_.__value_.__l.__data_ = v157;
  v156->__r_.__value_.__l.__size_ = 0;
  v156->__r_.__value_.__r.__words[2] = 0;
  v156->__r_.__value_.__r.__words[0] = 0;
  std::string::basic_string[abi:ne180100]<0>(v217, "vDelayLine");
  DumpViaStream<clsp::DelayLine<float,double>>(v219, (uint64_t)v217, *((_QWORD *)this + 125));
  if ((v220 & 0x80u) == 0)
    v158 = v219;
  else
    v158 = (void **)v219[0];
  if ((v220 & 0x80u) == 0)
    v159 = v220;
  else
    v159 = (std::string::size_type)v219[1];
  v160 = std::string::append(&v260, (const std::string::value_type *)v158, v159);
  v161 = *(_OWORD *)&v160->__r_.__value_.__l.__data_;
  v261.__r_.__value_.__r.__words[2] = v160->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v261.__r_.__value_.__l.__data_ = v161;
  v160->__r_.__value_.__l.__size_ = 0;
  v160->__r_.__value_.__r.__words[2] = 0;
  v160->__r_.__value_.__r.__words[0] = 0;
  std::string::basic_string[abi:ne180100]<0>(v213, "iDelayLine");
  DumpViaStream<clsp::DelayLine<float,double>>(v215, (uint64_t)v213, *((_QWORD *)this + 126));
  if ((v216 & 0x80u) == 0)
    v162 = v215;
  else
    v162 = (void **)v215[0];
  if ((v216 & 0x80u) == 0)
    v163 = v216;
  else
    v163 = (std::string::size_type)v215[1];
  v164 = std::string::append(&v261, (const std::string::value_type *)v162, v163);
  v165 = *(_OWORD *)&v164->__r_.__value_.__l.__data_;
  v262.__r_.__value_.__r.__words[2] = v164->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v262.__r_.__value_.__l.__data_ = v165;
  v164->__r_.__value_.__l.__size_ = 0;
  v164->__r_.__value_.__r.__words[2] = 0;
  v164->__r_.__value_.__r.__words[0] = 0;
  std::string::basic_string[abi:ne180100]<0>(&v209, "SpeakerPowerModel");
  if (*((_QWORD *)this + 98))
  {
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v280);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v280, (uint64_t)"pwrAvgWinSec = ", 15);
    v166 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v166, (uint64_t)"\nrelativeSpkPwrPeriod = ", 24);
    v167 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v167, (uint64_t)"\ninvRelSpkPwrPeriod = ", 22);
    std::ostream::operator<<();
    std::operator+<char>();
    v168 = std::string::append(&v276, "]\n", 2uLL);
    v169 = *(_OWORD *)&v168->__r_.__value_.__l.__data_;
    v277.__r_.__value_.__r.__words[2] = v168->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v277.__r_.__value_.__l.__data_ = v169;
    v168->__r_.__value_.__l.__size_ = 0;
    v168->__r_.__value_.__r.__words[2] = 0;
    v168->__r_.__value_.__r.__words[0] = 0;
    std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)&v280[8], v272);
    AUT::ReplaceAll(&v279, (uint64_t)v272, "\n", 1, "\n  ", 3uLL);
    v170 = std::string::insert(&v279, 0, "  ", 2uLL);
    v171 = *(_OWORD *)&v170->__r_.__value_.__l.__data_;
    v275 = v170->__r_.__value_.__r.__words[2];
    __p = v171;
    v170->__r_.__value_.__l.__size_ = 0;
    v170->__r_.__value_.__r.__words[2] = 0;
    v170->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v279.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v279.__r_.__value_.__l.__data_);
    if (v275 >= 0)
      v172 = (const std::string::value_type *)&__p;
    else
      v172 = (const std::string::value_type *)__p;
    if (v275 >= 0)
      v173 = HIBYTE(v275);
    else
      v173 = *((_QWORD *)&__p + 1);
    v174 = std::string::append(&v277, v172, v173);
    v175 = *(_OWORD *)&v174->__r_.__value_.__l.__data_;
    v278.__r_.__value_.__r.__words[2] = v174->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v278.__r_.__value_.__l.__data_ = v175;
    v174->__r_.__value_.__l.__size_ = 0;
    v174->__r_.__value_.__r.__words[2] = 0;
    v174->__r_.__value_.__r.__words[0] = 0;
    v176 = std::string::append(&v278, "\n", 1uLL);
    v177 = *(_OWORD *)&v176->__r_.__value_.__l.__data_;
    v212 = v176->__r_.__value_.__r.__words[2];
    *(_OWORD *)v211 = v177;
    v176->__r_.__value_.__l.__size_ = 0;
    v176->__r_.__value_.__r.__words[2] = 0;
    v176->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v278.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v278.__r_.__value_.__l.__data_);
    if (SHIBYTE(v275) < 0)
      operator delete((void *)__p);
    if (v273 < 0)
      operator delete(v272[0]);
    if (SHIBYTE(v277.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v277.__r_.__value_.__l.__data_);
    if (SHIBYTE(v276.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v276.__r_.__value_.__l.__data_);
    *(_QWORD *)v280 = v31;
    *(_QWORD *)&v280[*(_QWORD *)(v31 - 24)] = v32;
    *(_QWORD *)&v280[8] = v33 + 16;
    if (v282 < 0)
      operator delete(v281);
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    MEMORY[0x1BCC95BE4](v283);
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(v211, "");
  }
  if (v212 >= 0)
    v178 = v211;
  else
    v178 = (void **)v211[0];
  if (v212 >= 0)
    v179 = HIBYTE(v212);
  else
    v179 = (std::string::size_type)v211[1];
  v180 = std::string::append(&v262, (const std::string::value_type *)v178, v179);
  v181 = *(_OWORD *)&v180->__r_.__value_.__l.__data_;
  v263.__r_.__value_.__r.__words[2] = v180->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v263.__r_.__value_.__l.__data_ = v181;
  v180->__r_.__value_.__l.__size_ = 0;
  v180->__r_.__value_.__r.__words[2] = 0;
  v180->__r_.__value_.__r.__words[0] = 0;
  std::string::basic_string[abi:ne180100]<0>(&v205, "SpeakerPowerMeas");
  if (*((_QWORD *)this + 99))
  {
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v280);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v280, (uint64_t)"pwrAvgWinSec = ", 15);
    v182 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v182, (uint64_t)"\nspkPwrPeriod = ", 16);
    std::ostream::operator<<();
    std::operator+<char>();
    v183 = std::string::append(&v276, "]\n", 2uLL);
    v184 = *(_OWORD *)&v183->__r_.__value_.__l.__data_;
    v277.__r_.__value_.__r.__words[2] = v183->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v277.__r_.__value_.__l.__data_ = v184;
    v183->__r_.__value_.__l.__size_ = 0;
    v183->__r_.__value_.__r.__words[2] = 0;
    v183->__r_.__value_.__r.__words[0] = 0;
    std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)&v280[8], v272);
    AUT::ReplaceAll(&v279, (uint64_t)v272, "\n", 1, "\n  ", 3uLL);
    v185 = std::string::insert(&v279, 0, "  ", 2uLL);
    v186 = *(_OWORD *)&v185->__r_.__value_.__l.__data_;
    v275 = v185->__r_.__value_.__r.__words[2];
    __p = v186;
    v185->__r_.__value_.__l.__size_ = 0;
    v185->__r_.__value_.__r.__words[2] = 0;
    v185->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v279.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v279.__r_.__value_.__l.__data_);
    if (v275 >= 0)
      v187 = (const std::string::value_type *)&__p;
    else
      v187 = (const std::string::value_type *)__p;
    if (v275 >= 0)
      v188 = HIBYTE(v275);
    else
      v188 = *((_QWORD *)&__p + 1);
    v189 = std::string::append(&v277, v187, v188);
    v190 = *(_OWORD *)&v189->__r_.__value_.__l.__data_;
    v278.__r_.__value_.__r.__words[2] = v189->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v278.__r_.__value_.__l.__data_ = v190;
    v189->__r_.__value_.__l.__size_ = 0;
    v189->__r_.__value_.__r.__words[2] = 0;
    v189->__r_.__value_.__r.__words[0] = 0;
    v191 = std::string::append(&v278, "\n", 1uLL);
    v192 = *(_OWORD *)&v191->__r_.__value_.__l.__data_;
    v208 = v191->__r_.__value_.__r.__words[2];
    *(_OWORD *)v207 = v192;
    v191->__r_.__value_.__l.__size_ = 0;
    v191->__r_.__value_.__r.__words[2] = 0;
    v191->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v278.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v278.__r_.__value_.__l.__data_);
    if (SHIBYTE(v275) < 0)
      operator delete((void *)__p);
    if (v273 < 0)
      operator delete(v272[0]);
    if (SHIBYTE(v277.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v277.__r_.__value_.__l.__data_);
    if (SHIBYTE(v276.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v276.__r_.__value_.__l.__data_);
    *(_QWORD *)v280 = v31;
    *(_QWORD *)&v280[*(_QWORD *)(v31 - 24)] = v32;
    *(_QWORD *)&v280[8] = v33 + 16;
    if (v282 < 0)
      operator delete(v281);
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    MEMORY[0x1BCC95BE4](v283);
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(v207, "");
  }
  if (v208 >= 0)
    v193 = v207;
  else
    v193 = (void **)v207[0];
  if (v208 >= 0)
    v194 = HIBYTE(v208);
  else
    v194 = (std::string::size_type)v207[1];
  v195 = std::string::append(&v263, (const std::string::value_type *)v193, v194);
  v264 = *v195;
  v195->__r_.__value_.__l.__size_ = 0;
  v195->__r_.__value_.__r.__words[2] = 0;
  v195->__r_.__value_.__r.__words[0] = 0;
  AUT::ReplaceAll((std::string *)v280, (uint64_t)&v264, "\n", 1, "\n  ", 3uLL);
  v196 = std::string::insert((std::string *)v280, 0, "  ", 2uLL);
  v197 = *(_OWORD *)&v196->__r_.__value_.__l.__data_;
  v266 = v196->__r_.__value_.__r.__words[2];
  v265 = v197;
  v196->__r_.__value_.__l.__size_ = 0;
  v196->__r_.__value_.__r.__words[2] = 0;
  v196->__r_.__value_.__r.__words[0] = 0;
  if ((v280[23] & 0x80000000) != 0)
    operator delete(*(void **)v280);
  if (v266 >= 0)
    v198 = (const std::string::value_type *)&v265;
  else
    v198 = (const std::string::value_type *)v265;
  if (v266 >= 0)
    v199 = HIBYTE(v266);
  else
    v199 = *((_QWORD *)&v265 + 1);
  v200 = std::string::append(&v269, v198, v199);
  v201 = *(_OWORD *)&v200->__r_.__value_.__l.__data_;
  v271 = v200->__r_.__value_.__r.__words[2];
  v270 = v201;
  v200->__r_.__value_.__l.__size_ = 0;
  v200->__r_.__value_.__r.__words[2] = 0;
  v200->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v266) < 0)
    operator delete((void *)v265);
  if (SHIBYTE(v264.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v264.__r_.__value_.__l.__data_);
  if (SHIBYTE(v208) < 0)
    operator delete(v207[0]);
  if (v206 < 0)
    operator delete(v205);
  if (SHIBYTE(v263.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v263.__r_.__value_.__l.__data_);
  if (SHIBYTE(v212) < 0)
    operator delete(v211[0]);
  if (v210 < 0)
    operator delete(v209);
  if (SHIBYTE(v262.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v262.__r_.__value_.__l.__data_);
  if ((char)v216 < 0)
    operator delete(v215[0]);
  if (v214 < 0)
    operator delete(v213[0]);
  if (SHIBYTE(v261.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v261.__r_.__value_.__l.__data_);
  if ((char)v220 < 0)
    operator delete(v219[0]);
  if (v218 < 0)
    operator delete(v217[0]);
  if (SHIBYTE(v260.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v260.__r_.__value_.__l.__data_);
  if (SHIBYTE(v259.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v259.__r_.__value_.__l.__data_);
  if (SHIBYTE(v221.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v221.__r_.__value_.__l.__data_);
  if (SHIBYTE(v258.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v258.__r_.__value_.__l.__data_);
  if (SHIBYTE(v257.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v257.__r_.__value_.__l.__data_);
  if (SHIBYTE(v222.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v222.__r_.__value_.__l.__data_);
  if (SHIBYTE(v256.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v256.__r_.__value_.__l.__data_);
  if (SHIBYTE(v255.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v255.__r_.__value_.__l.__data_);
  if ((char)v226 < 0)
    operator delete(v225[0]);
  if (v224 < 0)
    operator delete(v223[0]);
  if (SHIBYTE(v254.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v254.__r_.__value_.__l.__data_);
  if (SHIBYTE(v230) < 0)
    operator delete((void *)v229);
  if (v228 < 0)
    operator delete(v227);
  if (SHIBYTE(v253.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v253.__r_.__value_.__l.__data_);
  if (SHIBYTE(v234) < 0)
    operator delete((void *)v233);
  if (v232 < 0)
    operator delete(v231);
  if (SHIBYTE(v252.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v252.__r_.__value_.__l.__data_);
  if (SHIBYTE(v238) < 0)
    operator delete((void *)v237);
  if (v236 < 0)
    operator delete(v235);
  if (SHIBYTE(v251.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v251.__r_.__value_.__l.__data_);
  if (SHIBYTE(v242) < 0)
    operator delete((void *)v241);
  if (v240 < 0)
    operator delete(v239);
  if (SHIBYTE(v250.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v250.__r_.__value_.__l.__data_);
  if (SHIBYTE(v246) < 0)
    operator delete((void *)v245);
  if (v244 < 0)
    operator delete(v243);
  if (SHIBYTE(v249.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v249.__r_.__value_.__l.__data_);
  if (SHIBYTE(v248.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v248.__r_.__value_.__l.__data_);
  if (SHIBYTE(v247.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v247.__r_.__value_.__l.__data_);
  if (SHIBYTE(v269.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v269.__r_.__value_.__l.__data_);
  if (SHIBYTE(v268.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v268.__r_.__value_.__l.__data_);
  if (SHIBYTE(v267.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v267.__r_.__value_.__l.__data_);
  v202 = (NSObject **)spp3Subsystem();
  if (v202)
  {
    v203 = *v202;
    if (!*v202)
      goto LABEL_352;
  }
  else
  {
    v203 = MEMORY[0x1E0C81028];
  }
  if (os_log_type_enabled(v203, OS_LOG_TYPE_DEBUG))
  {
    v204 = &v270;
    if (v271 < 0)
      v204 = (__int128 *)v270;
    *(_DWORD *)v280 = 136315650;
    *(_QWORD *)&v280[4] = "CLSPKernel_v5.cpp";
    *(_WORD *)&v280[12] = 1024;
    *(_DWORD *)&v280[14] = 1620;
    *(_WORD *)&v280[18] = 2080;
    *(_QWORD *)&v280[20] = v204;
    _os_log_impl(&dword_1B5ED0000, v203, OS_LOG_TYPE_DEBUG, "%25s:%-5d %s", v280, 0x1Cu);
  }
LABEL_352:
  if (SHIBYTE(v271) < 0)
    operator delete((void *)v270);
}

void sub_1B63F36C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,void *a31,uint64_t a32,int a33,__int16 a34,char a35,char a36,void *a37,uint64_t a38,int a39,__int16 a40,char a41,char a42,void *a43,uint64_t a44,int a45,__int16 a46,char a47,char a48,void *a49,uint64_t a50,int a51,__int16 a52,char a53,char a54,void *a55,uint64_t a56,int a57,__int16 a58,char a59,char a60,void *a61,uint64_t a62,int a63)
{
  char a66;
  void *a67;
  char a72;
  void *a73;
  char a74;
  void *a75;
  char a76;
  void *a77;
  char a78;
  void *a79;
  char a80;
  void *a81;
  char a82;
  void *a83;
  char a84;
  void *a85;
  char a86;
  void *a87;
  char a88;
  void *a89;
  char a90;
  void *a91;
  char a92;
  uint64_t v92;
  unint64_t v93;
  unint64_t v94;

  if (SLOBYTE(STACK[0x567]) < 0)
    operator delete((void *)STACK[0x550]);
  if (SLOBYTE(STACK[0x517]) < 0)
    operator delete((void *)STACK[0x500]);
  if (SLOBYTE(STACK[0x4FF]) < 0)
    operator delete((void *)STACK[0x4E8]);
  if (SLOBYTE(STACK[0x547]) < 0)
    operator delete((void *)STACK[0x530]);
  if (SLOBYTE(STACK[0x52F]) < 0)
    operator delete((void *)STACK[0x518]);
  STACK[0x580] = v94;
  *(unint64_t *)((char *)&STACK[0x580] + *(_QWORD *)(v94 - 24)) = v93;
  STACK[0x588] = v92 + 16;
  if (SLOBYTE(STACK[0x5DF]) < 0)
    operator delete((void *)STACK[0x5C8]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x1BCC95BE4](&STACK[0x5F0]);
  if (a15 < 0)
    operator delete(a10);
  if (SLOBYTE(STACK[0x437]) < 0)
    operator delete((void *)STACK[0x420]);
  if (a30 < 0)
    operator delete(a25);
  if (a24 < 0)
    operator delete(a19);
  if (SLOBYTE(STACK[0x417]) < 0)
    operator delete((void *)STACK[0x400]);
  if (a42 < 0)
    operator delete(a37);
  if (a36 < 0)
    operator delete(a31);
  if (SLOBYTE(STACK[0x3F7]) < 0)
    operator delete((void *)STACK[0x3E0]);
  if (a54 < 0)
    operator delete(a49);
  if (a48 < 0)
    operator delete(a43);
  if (SLOBYTE(STACK[0x3D7]) < 0)
    operator delete((void *)STACK[0x3C0]);
  if (SLOBYTE(STACK[0x3B7]) < 0)
    operator delete((void *)STACK[0x3A0]);
  if (a60 < 0)
    operator delete(a55);
  if (SLOBYTE(STACK[0x397]) < 0)
    operator delete((void *)STACK[0x380]);
  if (SLOBYTE(STACK[0x377]) < 0)
    operator delete((void *)STACK[0x360]);
  if (a66 < 0)
    operator delete(a61);
  if (SLOBYTE(STACK[0x357]) < 0)
    operator delete((void *)STACK[0x340]);
  if (SLOBYTE(STACK[0x337]) < 0)
    operator delete((void *)STACK[0x320]);
  if (a74 < 0)
    operator delete(a73);
  if (a72 < 0)
    operator delete(a67);
  if (SLOBYTE(STACK[0x317]) < 0)
    operator delete((void *)STACK[0x300]);
  if (a78 < 0)
    operator delete(a77);
  if (a76 < 0)
    operator delete(a75);
  if (SLOBYTE(STACK[0x2F7]) < 0)
    operator delete((void *)STACK[0x2E0]);
  if (a82 < 0)
    operator delete(a81);
  if (a80 < 0)
    operator delete(a79);
  if (SLOBYTE(STACK[0x2D7]) < 0)
    operator delete((void *)STACK[0x2C0]);
  if (a86 < 0)
    operator delete(a85);
  if (a84 < 0)
    operator delete(a83);
  if (SLOBYTE(STACK[0x2B7]) < 0)
    operator delete((void *)STACK[0x2A0]);
  if (a90 < 0)
    operator delete(a89);
  if (a88 < 0)
    operator delete(a87);
  if (SLOBYTE(STACK[0x297]) < 0)
    operator delete((void *)STACK[0x280]);
  if (SLOBYTE(STACK[0x217]) < 0)
    operator delete((void *)STACK[0x200]);
  if (a92 < 0)
    operator delete(a91);
  if (SLOBYTE(STACK[0x277]) < 0)
    operator delete((void *)STACK[0x260]);
  if (SLOBYTE(STACK[0x257]) < 0)
    operator delete((void *)STACK[0x240]);
  if (SLOBYTE(STACK[0x237]) < 0)
    operator delete((void *)STACK[0x220]);
  if (SLOBYTE(STACK[0x4C7]) < 0)
    operator delete((void *)STACK[0x4B0]);
  if (SLOBYTE(STACK[0x4A7]) < 0)
    operator delete((void *)STACK[0x490]);
  if (SLOBYTE(STACK[0x48F]) < 0)
    operator delete((void *)STACK[0x478]);
  _Unwind_Resume(a1);
}

_QWORD *DumpViaStream<clsp::DelayLine<float,double>>(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  std::string *v7;
  __int128 v8;
  std::string *v9;
  __int128 v10;
  void **v11;
  std::string::size_type v12;
  std::string *v13;
  __int128 v14;
  std::string *v15;
  __int128 v16;
  void *v18[2];
  char v19;
  void *__p[2];
  int64_t v21;
  std::string v22;
  std::string v23;
  std::string v24;
  uint64_t v25;
  _QWORD v26[10];
  char v27;
  uint64_t v28;
  std::string v29;

  if (!a3)
    return std::string::basic_string[abi:ne180100]<0>(a1, "");
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v25);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v25, (uint64_t)"DelayTime = ", 12);
  v4 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"\nDelaySamples = ", 16);
  v5 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"\ndelayBuffer.size = ", 20);
  v6 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"\ndelayedInput.size = ", 21);
  std::ostream::operator<<();
  std::operator+<char>();
  v7 = std::string::append(&v22, "]\n", 2uLL);
  v8 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
  v23.__r_.__value_.__r.__words[2] = v7->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v23.__r_.__value_.__l.__data_ = v8;
  v7->__r_.__value_.__l.__size_ = 0;
  v7->__r_.__value_.__r.__words[2] = 0;
  v7->__r_.__value_.__r.__words[0] = 0;
  std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)v26, v18);
  AUT::ReplaceAll(&v29, (uint64_t)v18, "\n", 1, "\n  ", 3uLL);
  v9 = std::string::insert(&v29, 0, "  ", 2uLL);
  v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
  v21 = v9->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = v10;
  v9->__r_.__value_.__l.__size_ = 0;
  v9->__r_.__value_.__r.__words[2] = 0;
  v9->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v29.__r_.__value_.__l.__data_);
  if (v21 >= 0)
    v11 = __p;
  else
    v11 = (void **)__p[0];
  if (v21 >= 0)
    v12 = HIBYTE(v21);
  else
    v12 = (std::string::size_type)__p[1];
  v13 = std::string::append(&v23, (const std::string::value_type *)v11, v12);
  v14 = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
  v24.__r_.__value_.__r.__words[2] = v13->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v24.__r_.__value_.__l.__data_ = v14;
  v13->__r_.__value_.__l.__size_ = 0;
  v13->__r_.__value_.__r.__words[2] = 0;
  v13->__r_.__value_.__r.__words[0] = 0;
  v15 = std::string::append(&v24, "\n", 1uLL);
  v16 = *(_OWORD *)&v15->__r_.__value_.__l.__data_;
  a1[2] = *((_QWORD *)&v15->__r_.__value_.__l + 2);
  *(_OWORD *)a1 = v16;
  v15->__r_.__value_.__l.__size_ = 0;
  v15->__r_.__value_.__r.__words[2] = 0;
  v15->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v24.__r_.__value_.__l.__data_);
  if (SHIBYTE(v21) < 0)
    operator delete(__p[0]);
  if (v19 < 0)
    operator delete(v18[0]);
  if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v23.__r_.__value_.__l.__data_);
  if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v22.__r_.__value_.__l.__data_);
  v25 = *MEMORY[0x1E0DE4F60];
  *(_QWORD *)((char *)&v26[-1] + *(_QWORD *)(v25 - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
  v26[0] = MEMORY[0x1E0DE4FB8] + 16;
  if (v27 < 0)
    operator delete((void *)v26[8]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return (_QWORD *)MEMORY[0x1BCC95BE4](&v28);
}

void sub_1B63F42E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,void *__p,uint64_t a36,int a37,__int16 a38,char a39,char a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,void *a51,uint64_t a52,int a53,__int16 a54,char a55,char a56,uint64_t a57,uint64_t a58,uint64_t a59)
{
  if (a40 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  if (a15 < 0)
    operator delete(a10);
  if (a33 < 0)
    operator delete(a28);
  if (a27 < 0)
    operator delete(a22);
  a42 = *MEMORY[0x1E0DE4F60];
  *(uint64_t *)((char *)&a42 + *(_QWORD *)(a42 - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
  a43 = MEMORY[0x1E0DE4FB8] + 16;
  if (a56 < 0)
    operator delete(a51);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x1BCC95BE4](&a59);
  _Unwind_Resume(a1);
}

double AUT::ReplaceAll(std::string *a1, uint64_t a2, char *a3, int64_t __n1, std::string::value_type *__s, std::string::size_type __n2)
{
  std::string::size_type v11;
  std::string::size_type size;
  std::string *v13;
  char *v14;
  char *v15;
  int64_t v16;
  int v17;
  int64_t v18;
  char *v19;
  char *v20;
  double result;
  std::string v22;

  if (*(char *)(a2 + 23) < 0)
    std::string::__init_copy_ctor_external(&v22, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  else
    v22 = *(std::string *)a2;
  v11 = 0;
  size = HIBYTE(v22.__r_.__value_.__r.__words[2]);
  if ((v22.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
  {
    v13 = &v22;
  }
  else
  {
    size = v22.__r_.__value_.__l.__size_;
    v13 = (std::string *)v22.__r_.__value_.__r.__words[0];
  }
  while (!__n1)
  {
LABEL_17:
    if (v11 != -1)
    {
      std::string::replace(&v22, v11, __n1, __s, __n2);
      v11 += __n2;
      size = HIBYTE(v22.__r_.__value_.__r.__words[2]);
      v13 = (v22.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
          ? &v22
          : (std::string *)v22.__r_.__value_.__r.__words[0];
      if ((v22.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        size = v22.__r_.__value_.__l.__size_;
      if (size >= v11)
        continue;
    }
    goto LABEL_24;
  }
  v14 = (char *)v13 + v11;
  v15 = (char *)v13 + size;
  v16 = size - v11;
  if (v16 >= __n1)
  {
    v17 = *a3;
    do
    {
      v18 = v16 - __n1;
      if (v18 == -1)
        break;
      v19 = (char *)memchr(v14, v17, v18 + 1);
      if (!v19)
        break;
      v20 = v19;
      if (!memcmp(v19, a3, __n1))
      {
        if (v20 == v15)
          break;
        v11 = v20 - (char *)v13;
        goto LABEL_17;
      }
      v14 = v20 + 1;
      v16 = v15 - (v20 + 1);
    }
    while (v16 >= __n1);
  }
LABEL_24:
  result = *(double *)&v22.__r_.__value_.__l.__data_;
  *a1 = v22;
  return result;
}

void sub_1B63F4540(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *clsp::ThermalModelOrder1::dump(uint64_t a1, _QWORD *a2)
{
  _QWORD *v3;
  _QWORD *v4;
  char v6;

  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"T_sett = ", 9);
  v3 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"\ntau = ", 7);
  v4 = (_QWORD *)std::ostream::operator<<();
  v6 = 10;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)&v6, 1);
  return a2;
}

_QWORD *clsp::IIROrder1<float>::dump(uint64_t a1, _QWORD *a2)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  char v7;

  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"a1 = ", 5);
  v3 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"\nb0 = ", 6);
  v4 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"\nb1 = ", 6);
  v5 = (_QWORD *)std::ostream::operator<<();
  v7 = 10;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)&v7, 1);
  return a2;
}

void ConvoyToExcursion(float *a1, float *__A, vDSP_Length __N, char a4, int a5, float a6, float a7)
{
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;
  float v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float v19;
  int v20;
  float __B;
  float v22;
  float __Aa;

  v10 = a1[2];
  v9 = a1[3];
  v12 = *a1;
  v11 = a1[1];
  v13 = v10 - v11;
  v14 = v9 - v11;
  v15 = (float)(a6 * (float)(v10 - v11)) - (float)(a7 * (float)(v9 - v11));
  v16 = v10 - v9;
  v17 = v15 / v16;
  v18 = (float)(v13 * (float)(v14 * (float)(a7 - a6))) / v16;
  __Aa = v18;
  v19 = 0.0;
  if (a5)
    v19 = v17 + (float)(v18 / (float)(v12 - v11));
  __B = -v11;
  v22 = v17 - v19;
  if ((a4 & 1) != 0)
  {
    v20 = 0;
    vDSP_vfill((const float *)&v20, __A, 1, __N);
  }
  else
  {
    vDSP_vsadd(__A, 1, &__B, __A, 1, __N);
    vDSP_svdiv(&__Aa, __A, 1, __A, 1, __N);
    vDSP_vsadd(__A, 1, &v22, __A, 1, __N);
  }
}

void clsp::CLSPKernel_v5::ProcessByThermalBlock(const float ****a1, uint64_t ***a2, uint64_t *a3, uint64_t *a4, uint64_t *a5, int a6, unint64_t a7)
{
  const float ***v7;
  const float ***v8;
  const float ****v9;
  const float **v10;
  unint64_t v11;
  float v12;
  const float ***v13;
  const float ***v14;
  vDSP_Length v15;
  unint64_t v16;
  unint64_t v17;
  char *v18;
  uint64_t v19;
  unint64_t v20;
  size_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  const float ***v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  _QWORD *v29;
  const float **v30;
  uint64_t v31;
  const float ***v32;
  const float ***v33;
  const float ***v34;
  const float ***v35;
  const float ***v36;
  uint64_t v37;
  unint64_t v38;
  size_t v39;
  float *v40;
  const float *v41;
  vDSP_Length v42;
  vDSP_Length v43;
  void *v44;
  float *v45;
  size_t v46;
  float *v47;
  float *v48;
  const float **v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t i;
  const float ***v54;
  const float ***v55;
  float v56;
  uint64_t *v57;
  const float **v58;
  const float *v59;
  uint64_t v60;
  float v61;
  uint64_t v62;
  float v63;
  const float **v64;
  clsp::CLSP_Log *v65;
  float v66;
  float v67;
  float v68;
  float v69;
  float v70;
  const float ***v71;
  const float ***v72;
  uint64_t v73;
  unint64_t v74;
  unint64_t v75;
  const float *v76;
  float *v77;
  uint64_t **v78;
  uint64_t **v79;
  uint64_t *v80;
  uint64_t *v81;
  float v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  float v86;
  float v87;
  float v88;
  float v89;
  float v90;
  float v91;
  float v92;
  float Temperature;
  uint64_t v94;
  float v95;
  float v96;
  float v97;
  float v98;
  float v99;
  float v100;
  float v101;
  int v102;
  int v103;
  float v104;
  float v105;
  float v106;
  float v107;
  uint64_t v108;
  float v109;
  int v110;
  uint64_t v111;
  float v112;
  float v113;
  uint64_t v114;
  clsp::CLSP_Log *v115;
  uint64_t v116;
  uint64_t v117;
  float v118;
  float v119;
  _DWORD *v120;
  uint64_t v121;
  float v122;
  unsigned int v123;
  unsigned int v124;
  uint64_t v125;
  float v126;
  uint64_t *v127;
  uint64_t *v128;
  uint64_t v129;
  unint64_t v130;
  __n128 v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  const float ***v135;
  uint64_t v136;
  _DWORD *v137;
  const float **v138;
  uint64_t v139;
  uint64_t (**v140)();
  uint64_t v141;
  _QWORD *v142;
  BOOL v143;
  uint64_t v144;
  unint64_t v145;
  unint64_t v146;
  unsigned int v147;
  float v148;
  uint64_t v149;
  _QWORD *v150;
  BOOL v151;
  float v152;
  _QWORD *v153;
  float v154;
  unint64_t v155;
  uint8x8_t v156;
  unint64_t v157;
  uint64_t **v158;
  uint64_t *j;
  unint64_t v160;
  float v161;
  uint64_t v162;
  float v163;
  float *v164;
  float v165;
  float v166;
  BOOL v167;
  float v168;
  float v169;
  float *v170;
  float v171;
  uint64_t v172;
  _QWORD *v173;
  _QWORD *v174;
  unint64_t v175;
  unint64_t v176;
  uint64_t *v177;
  float v178;
  clsp::CLSP_Log *v179;
  unint64_t v180;
  unsigned int v181;
  clsp::CLSP_Log *v182;
  clsp::CLSP_Log *v184;
  float v185;
  const float ***v186;
  const float ***v187;
  const float **v188;
  uint64_t ***v189;
  uint64_t *v190;
  uint64_t *v191;
  unint64_t v192;
  int v193;
  uint64_t v194;
  uint64_t *v195;
  uint64_t *v196;
  uint64_t v197;
  float v198;
  float __B;
  uint64_t v200;

  v193 = a6;
  v195 = a4;
  v196 = a5;
  v189 = a2;
  v190 = a3;
  v200 = *MEMORY[0x1E0C80C00];
  v8 = *a1;
  v7 = a1[1];
  if (v7 != *a1)
  {
    v9 = a1;
    do
    {
      v10 = *v8;
      v8 += 2;
      *(const float **)((char *)v10 + 1028) = 0;
    }
    while (v8 != v7);
    if (a7)
    {
      v11 = 0;
      v12 = 1.0;
      v192 = a7;
      do
      {
        v13 = *v9;
        v14 = v9[1];
        if (a7 - v11 >= *((unsigned int *)**v9 + 137))
          v15 = *((unsigned int *)**v9 + 137);
        else
          v15 = a7 - v11;
        v197 = v15;
        if ((v193 & 1) == 0)
        {
          for (; v13 != v14; v15 = v197)
          {
            v49 = *v13;
            v50 = *((unsigned int *)*v13 + 4);
            v51 = *(_QWORD *)(*v195 + 16 * v50 + 16);
            v52 = *(_QWORD *)(*v196 + 16 * v50 + 16);
            switch(*((_DWORD *)*v13 + 256))
            {
              case 0:
                clsp::CLSPKernel_v5::ProcessOpenLoop(v49, (const float *)(v51 + 4 * v11), (float *)(v52 + 4 * v11), v15);
                break;
              case 1:
              case 4:
                clsp::CLSPKernel_v5::ProcessAdaptSimple(v49, (const float *)(v51 + 4 * v11), (float *)(v52 + 4 * v11), v15);
                break;
              case 3:
                clsp::CLSPKernel_v5::ProcessAdapt((clsp::CLSPKernel_v5 *)v49, (const float *)(v51 + 4 * v11), (float *)(v52 + 4 * v11), v15, v11);
                break;
              default:
                __B = 0.1;
                vDSP_vsmul((const float *)(v51 + 4 * v11), 1, &__B, (float *)(v52 + 4 * v11), 1, v15);
                break;
            }
            v13 += 2;
          }
          goto LABEL_79;
        }
        v191 = (uint64_t *)&v189;
        v16 = ((char *)v14 - (char *)v13) >> 4;
        MEMORY[0x1E0C80A78](a1);
        v17 = (8 * v16 + 15) & 0xFFFFFFFFFFFFFFF0;
        v18 = (char *)&v189 - v17;
        v20 = v19 >> 1;
        if (v20 >= 0x200)
          v21 = 512;
        else
          v21 = v20;
        bzero((char *)&v189 - v17, v21);
        MEMORY[0x1E0C80A78](v22);
        v23 = (char *)&v189 - v17;
        bzero((char *)&v189 - v17, v21);
        if (v14 != v13)
        {
          v24 = *v195;
          v25 = *v9;
          v26 = *v196;
          if (v16 <= 1)
            v27 = 1;
          else
            v27 = ((char *)v14 - (char *)v13) >> 4;
          v28 = (uint64_t ****)((char *)&v189 - v17);
          v29 = (uint64_t ****)((char *)&v189 - v17);
          do
          {
            v30 = *v25;
            v25 += 2;
            v31 = *((unsigned int *)v30 + 4);
            *v28++ = *(_QWORD *)(v24 + 16 * v31 + 16) + 4 * v11;
            *v29++ = *(_QWORD *)(v26 + 16 * v31 + 16) + 4 * v11;
            --v27;
          }
          while (v27);
        }
        a1 = (const float ****)shouldTraceRender();
        v33 = *v9;
        v32 = v9[1];
        v34 = *v9;
        if (*v9 != v32)
        {
          do
          {
            a1 = (const float ****)*v33;
            if (*((_BYTE *)*v33 + 1072))
            {
              clsp::CLSPKernel_v5::LogCoeffs((clsp::CLSPKernel_v5 *)a1);
              *((_BYTE *)*v33 + 1072) = 0;
            }
            v33 += 2;
          }
          while (v33 != v32);
          v33 = *v9;
          v35 = v9[1];
          v36 = *v9;
          if (*v9 != v35)
          {
            while ((*v36)[53])
            {
              v36 += 2;
              if (v36 == v35)
              {
                v37 = 0;
                v38 = 0;
                v39 = 4 * v197;
                v194 = -v197;
                while (1)
                {
                  v40 = (float *)v33[v37][100];
                  vDSP_vclip(*(const float **)&v18[8 * v38], 1, &clsp::CLSPKernel_v5::kClipLoThres, &clsp::CLSPKernel_v5::kClipHiThres, v40, 1, v197);
                  v41 = (*v9)[v37][97];
                  a1 = (const float ****)shouldTraceRender();
                  v42 = *((_QWORD *)v41 + 1);
                  if (v42 <= v197)
                  {
                    if (v42)
                    {
                      a1 = (const float ****)memmove(*((void **)v41 + 5), *((const void **)v41 + 2), 4 * v42);
                      v42 = *((_QWORD *)v41 + 1);
                    }
                    v47 = &v40[v197];
                    v48 = &v47[-v42];
                    if (v48 != v40)
                    {
                      a1 = (const float ****)memmove((void *)(*((_QWORD *)v41 + 5) + 4 * v42), v40, (char *)v48 - (char *)v40);
                      v42 = *((_QWORD *)v41 + 1);
                    }
                    if (!v42)
                      goto LABEL_41;
                    v46 = 4 * v42;
                    v44 = (void *)*((_QWORD *)v41 + 2);
                    v45 = &v47[-v42];
                  }
                  else
                  {
                    if (v197)
                    {
                      a1 = (const float ****)memmove(*((void **)v41 + 5), *((const void **)v41 + 2), v39);
                      v42 = *((_QWORD *)v41 + 1);
                    }
                    v43 = v197;
                    if (v42 != v197)
                      a1 = (const float ****)memmove(*((void **)v41 + 2), (const void *)(*((_QWORD *)v41 + 2) + 4 * v197), 4 * v42 - 4 * v197);
                    if (!v43)
                      goto LABEL_41;
                    v44 = (void *)(*((_QWORD *)v41 + 2) + 4 * *((_QWORD *)v41 + 1) + 4 * v194);
                    v45 = v40;
                    v46 = v39;
                  }
                  a1 = (const float ****)memmove(v44, v45, v46);
LABEL_41:
                  ++v38;
                  v33 = *v9;
                  v34 = v9[1];
                  v37 += 2;
                  if (v38 >= ((char *)v34 - (char *)*v9) >> 4)
                    goto LABEL_52;
                }
              }
            }
            v75 = 0;
            do
            {
              v76 = *(const float **)&v18[8 * v75];
              v77 = *(float **)&v23[8 * v75];
              __B = 0.1;
              vDSP_vsmul(v76, 1, &__B, v77, 1, v197);
              ++v75;
            }
            while (v75 < ((char *)v9[1] - (char *)*v9) >> 4);
            goto LABEL_78;
          }
          v34 = *v9;
        }
LABEL_52:
        if (v197)
        {
          for (i = 0; i != v197; ++i)
          {
            v54 = *v9;
            v55 = v9[1];
            if (*v9 != v55)
            {
              v56 = 1.0;
              v57 = (uint64_t *)v23;
              do
              {
                v58 = *v54;
                v59 = (*v54)[97];
                v60 = *((_QWORD *)v59 + 5);
                if (i >= (*((_QWORD *)v59 + 6) - v60) >> 2)
                  std::vector<std::vector<float>>::__throw_out_of_range[abi:ne180100]();
                v61 = v58[100][i];
                v62 = *v57;
                v63 = (*(float (**)(const float *, float, float))(*(_QWORD *)v58[53] + 184))(v58[53], v61, *(float *)(v60 + 4 * i));
                v64 = *v54;
                (*v54)[103][i] = v63;
                v65 = (clsp::CLSP_Log *)*((_QWORD *)v64[135] + 2);
                if (v65)
                {
                  __B = v61;
                  clsp::CLSP_Log::LogCLSPData(v65, &__B, 1);
                  v64 = *v54;
                }
                v66 = *((float *)v64 + 173)
                    + (float)(*((float *)v64 + 172) * (float)(*((float *)v64 + 166) - *((float *)v64 + 173)));
                *((float *)v64 + 173) = v66;
                v67 = *((float *)v64 + 177) + (float)(*((float *)v64 + 176) * (float)(v66 - *((float *)v64 + 177)));
                *((float *)v64 + 177) = v67;
                v68 = *((float *)v64 + 181)
                    + (float)(*((float *)v64 + 180) * (float)(*((float *)v64 + 168) - *((float *)v64 + 181)));
                *((float *)v64 + 181) = v68;
                v69 = *((float *)v64 + 185) + (float)(*((float *)v64 + 184) * (float)(v68 - *((float *)v64 + 185)));
                *((float *)v64 + 185) = v69;
                if (*((_BYTE *)v64 + 744))
                {
                  if (v69 < v67)
                    v67 = v69;
                  v63 = v63 * v67;
                  --*((_DWORD *)v64 + 137);
                  *(float *)(v62 + 4 * i) = v63;
                  v61 = v61 * (float)(*((float *)v64 + 177) * *((float *)v64 + 185));
                }
                else
                {
                  --*((_DWORD *)v64 + 137);
                  *(float *)(v62 + 4 * i) = v63;
                }
                (*(void (**)(const float *, float, float))(*(_QWORD *)v64[53] + 192))(v64[53], v61, v63);
                v70 = (*(float (**)(const float *))(*(_QWORD *)(*v54)[53] + 200))((*v54)[53]);
                if (v56 < v70)
                  v56 = v70;
                v54 += 2;
                ++v57;
              }
              while (v54 != v55);
              v71 = *v9;
              v72 = v9[1];
              while (v71 != v72)
              {
                a1 = (const float ****)(*(uint64_t (**)(const float *, float))(*(_QWORD *)(*v71)[53] + 152))((*v71)[53], v56);
                v71 += 2;
              }
            }
          }
          v33 = *v9;
          v34 = v9[1];
        }
        if (v34 != v33)
        {
          v73 = 0;
          v74 = 0;
          do
          {
            clsp::ThermalController::postProcess((clsp::ThermalController *)(v33[v73] + 54), *(float **)&v23[8 * v74], v33[v73][103], v197);
            a1 = (const float ****)clsp::CLSPKernel_v5::ZapBadValues((clsp::CLSPKernel_v5 *)v33[v73]);
            ++v74;
            v33 = *v9;
            v73 += 2;
          }
          while (v74 < ((char *)v9[1] - (char *)*v9) >> 4);
        }
LABEL_78:
        v15 = v197;
LABEL_79:
        if (*((_DWORD *)**v9 + 137))
          goto LABEL_80;
        v79 = *v189;
        v78 = v189[1];
LABEL_83:
        if (v79 != v78)
        {
          v81 = *v79;
          v80 = v79[1];
          if (*v79 == v80)
            goto LABEL_170;
          v82 = 1.0;
          while (1)
          {
            v83 = *v81;
            v84 = *(_QWORD *)(*v81 + 480);
            if (!v84)
              __assert_rtn("analyzeTargetGain", "CLSPBlocks.h", 1364, "mr_elecModel");
            v85 = *(_QWORD *)(v83 + 752);
            if (!v85)
              __assert_rtn("analyzeTargetGain", "CLSPBlocks.h", 1365, "mr_CLTModule");
            v86 = *(float *)(v84 + 36);
            v87 = (float)((float)(*(float *)(v83 + 576) * *(float *)(v83 + 580)) + (float)(v86 * *(float *)(v83 + 572)))
                - (float)(*(float *)(v83 + 584) * *(float *)(v83 + 568));
            *(float *)(v83 + 580) = v86;
            *(float *)(v83 + 584) = v87;
            v88 = (float)((float)(*(float *)(v83 + 596) * *(float *)(v83 + 600)) + (float)(v86 * *(float *)(v83 + 592)))
                - (float)(*(float *)(v83 + 604) * *(float *)(v83 + 588));
            *(float *)(v83 + 600) = v86;
            *(float *)(v83 + 604) = v88;
            v89 = *(float *)(v84 + 44);
            v90 = (float)((float)(*(float *)(v83 + 616) * *(float *)(v83 + 620)) + (float)(v89 * *(float *)(v83 + 612)))
                - (float)(*(float *)(v83 + 624) * *(float *)(v83 + 608));
            *(float *)(v83 + 620) = v89;
            *(float *)(v83 + 624) = v90;
            v91 = *(float *)(v83 + 440);
            v92 = *(float *)(v83 + 432);
            *(float *)(v85 + 208) = v92;
            if (*(_BYTE *)(v85 + 113))
            {
              Temperature = clsp::ClosedLoopThermalModule::getTemperature((clsp::ClosedLoopThermalModule *)v85);
              v94 = *(_QWORD *)(v85 + 96);
              if (v94 && *(_BYTE *)(v94 + 88))
              {
                v95 = v92 - Temperature;
                *(float *)(v85 + 84) = v95 + *(float *)(v85 + 84);
                v96 = v95 + (float)(v91 + (float)(v87 + v88));
                if (!*(_BYTE *)(v94 + 89))
                  v96 = v92;
                if (v96 <= v92)
                  v96 = v92;
                if (v96 >= (float)(*(float *)(v85 + 16) + v92))
                  v97 = *(float *)(v85 + 16) + v92;
                else
                  v97 = v96;
                v92 = *(float *)(v85 + 140) + (float)(*(float *)(v85 + 136) * (float)(v97 - *(float *)(v85 + 140)));
                *(float *)(v85 + 140) = v92;
                shouldTraceRender();
                *(float *)(v85 + 208) = v97;
              }
              else
              {
                shouldTraceRender();
              }
            }
            v98 = *(float *)(v83 + 440);
            v99 = (float)((float)(v92 - v98) - v88) / (float)(v90 + 1.0);
            v12 = 1.0;
            if (v99 > 1.0)
              v99 = 1.0;
            if (v99 < 0.0001)
              v99 = 0.0001;
            v100 = sqrtf(v99);
            v101 = *(float *)(v83 + 664);
            if (v100 < v101)
              break;
            v103 = *(_DWORD *)(v83 + 552);
            if (v103)
            {
              v102 = v103 - 1;
              goto LABEL_108;
            }
            *(float *)(v83 + 556) = v100;
LABEL_109:
            v104 = v88 + (float)(v87 + v98);
            v105 = 1.0;
            if (v104 < v92)
              goto LABEL_117;
            if (v104 > (float)(v92 + *(float *)(v83 + 436)) || (v105 = 1.0, *(float *)(v83 + 560) != 1.0))
            {
              v106 = (float)((float)((float)(v92 + -5.0) - v98) - v88) / (float)(v90 + 1.0);
              if (v106 > 1.0)
                v106 = 1.0;
              if (v106 < 0.0001)
                v106 = 0.0001;
              v105 = sqrtf(v106);
LABEL_117:
              *(float *)(v83 + 560) = v105;
            }
            v107 = *(float *)(v83 + 556);
            v108 = 652;
            if (v101 < v107)
              v108 = 648;
            v109 = v101 + (float)(*(float *)(v83 + v108) * (float)(v107 - v101));
            if (v109 >= v105)
              v109 = v105;
            *(float *)(v83 + 664) = v109;
            if (v104 <= (float)(v92 + *(float *)(v83 + 472)))
              v110 = *(_DWORD *)(v83 + 544);
            else
              v110 = *(_DWORD *)(v83 + 564) - 1;
            *(_DWORD *)(v83 + 564) = v110;
            if (!v110)
            {
              shouldTraceRender();
              *(_DWORD *)(v83 + 432) = *(_DWORD *)(v83 + 456);
              v98 = *(float *)(v83 + 440);
            }
            v111 = *(_QWORD *)(v83 + 752);
            if (*(double *)(v111 + 56) <= v89)
            {
              v113 = v98 + (float)(*(float *)(v83 + 584) + *(float *)(v83 + 604));
              if (*(float *)(v111 + 28) < v113)
              {
                v112 = *(float *)(v111 + 20);
LABEL_134:
                *(float *)(v111 + 88) = v112;
                goto LABEL_135;
              }
              if (*(float *)(v111 + 32) > v113 || (v112 = *(float *)(v111 + 88), v112 == 0.0))
              {
                v112 = *(float *)(v111 + 24);
                goto LABEL_134;
              }
            }
            else
            {
              *(_DWORD *)(v111 + 88) = 0;
              v112 = 0.0;
            }
LABEL_135:
            *(float *)(v111 + 156) = *(float *)(v111 + 156)
                                   + (float)(*(float *)(v111 + 152) * (float)(v112 - *(float *)(v111 + 156)));
            shouldTraceRender();
            v114 = *(_QWORD *)(v83 + 760);
            a1 = *(const float *****)(v114 + 32);
            if (a1)
            {
              __B = *(float *)(v83 + 556);
              clsp::CLSP_Log::LogCLSPData((clsp::CLSP_Log *)a1, &__B, 1);
              v114 = *(_QWORD *)(v83 + 760);
              a1 = *(const float *****)(v114 + 32);
              if (a1)
              {
                __B = *(float *)(v83 + 560);
                clsp::CLSP_Log::LogCLSPData((clsp::CLSP_Log *)a1, &__B, 1);
                v114 = *(_QWORD *)(v83 + 760);
                a1 = *(const float *****)(v114 + 32);
                if (a1)
                {
                  __B = *(float *)(v83 + 664);
                  clsp::CLSP_Log::LogCLSPData((clsp::CLSP_Log *)a1, &__B, 1);
                  v114 = *(_QWORD *)(v83 + 760);
                  a1 = *(const float *****)(v114 + 32);
                  if (a1)
                  {
                    __B = v92;
                    clsp::CLSP_Log::LogCLSPData((clsp::CLSP_Log *)a1, &__B, 1);
                    v114 = *(_QWORD *)(v83 + 760);
                    a1 = *(const float *****)(v114 + 32);
                    if (a1)
                    {
                      __B = v90;
                      clsp::CLSP_Log::LogCLSPData((clsp::CLSP_Log *)a1, &__B, 1);
                      v114 = *(_QWORD *)(v83 + 760);
                      a1 = *(const float *****)(v114 + 32);
                      if (a1)
                      {
                        __B = v87;
                        clsp::CLSP_Log::LogCLSPData((clsp::CLSP_Log *)a1, &__B, 1);
                        v114 = *(_QWORD *)(v83 + 760);
                        a1 = *(const float *****)(v114 + 32);
                        if (a1)
                        {
                          __B = v88;
                          clsp::CLSP_Log::LogCLSPData((clsp::CLSP_Log *)a1, &__B, 1);
                          v114 = *(_QWORD *)(v83 + 760);
                          a1 = *(const float *****)(v114 + 32);
                          if (a1)
                          {
                            __B = v86;
                            clsp::CLSP_Log::LogCLSPData((clsp::CLSP_Log *)a1, &__B, 1);
                            v114 = *(_QWORD *)(v83 + 760);
                            a1 = *(const float *****)(v114 + 32);
                            if (a1)
                            {
                              __B = v89;
                              clsp::CLSP_Log::LogCLSPData((clsp::CLSP_Log *)a1, &__B, 1);
                              v114 = *(_QWORD *)(v83 + 760);
                              v115 = *(clsp::CLSP_Log **)(v114 + 32);
                              if (v115)
                              {
                                __B = clsp::ClosedLoopThermalModule::getTemperature(*(clsp::ClosedLoopThermalModule **)(v83 + 752));
                                clsp::CLSP_Log::LogCLSPData(v115, &__B, 1);
                                v114 = *(_QWORD *)(v83 + 760);
                                a1 = *(const float *****)(v114 + 32);
                                if (a1)
                                {
                                  __B = *(float *)(*(_QWORD *)(v83 + 752) + 208);
                                  clsp::CLSP_Log::LogCLSPData((clsp::CLSP_Log *)a1, &__B, 1);
                                  v114 = *(_QWORD *)(v83 + 760);
                                  a1 = *(const float *****)(v114 + 32);
                                }
                              }
                              else
                              {
                                a1 = 0;
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
            v116 = *(_QWORD *)(v83 + 752);
            v117 = *(_QWORD *)(v116 + 96);
            if (v117)
            {
              if (!a1)
                goto LABEL_159;
              v118 = 0.0;
              if (*(_BYTE *)(v117 + 88))
                v118 = 1.0;
              __B = v118;
              clsp::CLSP_Log::LogCLSPData((clsp::CLSP_Log *)a1, &__B, 1);
              a1 = *(const float *****)(v114 + 32);
              if (!a1)
                goto LABEL_159;
              v119 = 0.0;
              if (*(_BYTE *)(*(_QWORD *)(v116 + 96) + 89))
                v119 = 1.0;
              __B = v119;
              clsp::CLSP_Log::LogCLSPData((clsp::CLSP_Log *)a1, &__B, 1);
              a1 = *(const float *****)(v114 + 32);
            }
            if (a1)
            {
              __B = *(float *)(v116 + 88);
              clsp::CLSP_Log::LogCLSPData((clsp::CLSP_Log *)a1, &__B, 1);
            }
LABEL_159:
            *(_DWORD *)(v83 + 548) = *(_DWORD *)(v83 + 536);
            v120 = *(_DWORD **)(v83 + 480);
            v120[10] = v120[9];
            v120[12] = v120[11];
            v120[9] = 0;
            v120[11] = 0;
            v121 = *(_QWORD *)(v83 + 784);
            v122 = *(float *)(v83 + 96) + *(float *)(v121 + 12);
            *(float *)(v121 + 12) = v122;
            v123 = *(_DWORD *)(v121 + 20);
            if (v123 >= *(_DWORD *)(v121 + 4))
            {
              v124 = 0;
              *(float *)(v121 + 16) = v122 * *(float *)(v121 + 8);
              *(_DWORD *)(v121 + 12) = 0;
            }
            else
            {
              v124 = v123 + 1;
            }
            *(_DWORD *)(v121 + 20) = v124;
            v125 = *v81;
            v81 += 2;
            v126 = *(float *)(v125 + 664);
            if (v126 < v82)
              v82 = v126;
            if (v81 == v80)
            {
              v127 = *v79;
              v128 = v79[1];
              while (v127 != v128)
              {
                v129 = *v127;
                *(float *)(v129 + 664) = v82;
                a1 = *(const float *****)(v129 + 256);
                if (a1)
                  a1 = (const float ****)((uint64_t (*)(const float ****))(*a1)[9])(a1);
                v127 += 2;
              }
LABEL_170:
              v79 += 3;
              goto LABEL_83;
            }
          }
          *(float *)(v83 + 556) = v100;
          v102 = *(_DWORD *)(v83 + 540);
LABEL_108:
          *(_DWORD *)(v83 + 552) = v102;
          goto LABEL_109;
        }
        v15 = v197;
        if (*v190)
        {
          v191 = (uint64_t *)&v189;
          v131.n128_f64[0] = MEMORY[0x1E0C80A78](a1);
          v194 = (uint64_t)&v189 - v132;
          if (v133 != v134)
          {
            v135 = *v9;
            if (v130 <= 1)
              v136 = 1;
            else
              v136 = v130;
            v137 = (_DWORD *)v194;
            do
            {
              v138 = *v135;
              v135 += 2;
              v131.n128_u32[0] = *((_DWORD *)v138 + 26);
              *v137++ = v131.n128_u32[0];
              --v136;
            }
            while (v136);
          }
          v139 = *v190;
          if (*(_QWORD *)(*v190 + 552))
            v140 = *(uint64_t (***)())(v139 + 552);
          else
            v140 = &cpms::controllers::Power<float,cpms::smoothers::Exponential,clsp::AttackRelease>::GetAmpModel(void)const::sAmpModelDummy;
          v142 = *(_QWORD **)(v139 + 216);
          v141 = *(_QWORD *)(v139 + 224);
          if (v142)
            v143 = 1;
          else
            v143 = v141 == 0;
          if (!v143)
            __assert_rtn("operator+=", "vector.hpp", 181, "m_ptr || !off");
          if (v141)
          {
            v144 = 48 * v141;
            do
            {
              if (!v142)
                __assert_rtn("operator*", "vector.hpp", 156, "!!m_ptr");
              a1 = (const float ****)(*(uint64_t (**)(_QWORD, uint64_t (**)(), uint64_t, __n128))(*(_QWORD *)*v142 + 16))(*v142, v140, v194, v131);
              v142 += 6;
              v144 -= 48;
            }
            while (v144);
          }
          v145 = *(_QWORD *)(v139 + 32);
          if (v145)
          {
            v146 = 0;
            v147 = 0;
            v148 = 1.0;
            do
            {
              if (*(_QWORD *)(v139 + 184) <= v146)
                __assert_rtn("operator[]", "vector.hpp", 1655, "this->m_holder.m_size > n");
              v150 = *(_QWORD **)(v139 + 216);
              v149 = *(_QWORD *)(v139 + 224);
              if (v150)
                v151 = 1;
              else
                v151 = v149 == 0;
              if (!v151)
                __assert_rtn("operator+=", "vector.hpp", 181, "m_ptr || !off");
              if (v149)
              {
                v152 = *(float *)(*(_QWORD *)(v139 + 176) + 4 * v146);
                v153 = &v150[6 * v149];
                v154 = 1.0;
                do
                {
                  if (!v150)
                    __assert_rtn("operator*", "vector.hpp", 156, "!!m_ptr");
                  v155 = v150[2];
                  if (v155)
                  {
                    v156 = (uint8x8_t)vcnt_s8((int8x8_t)v155);
                    v156.i16[0] = vaddlv_u8(v156);
                    if (v156.u32[0] > 1uLL)
                    {
                      v157 = v147;
                      if (v155 <= v147)
                        v157 = v147 % v155;
                    }
                    else
                    {
                      v157 = ((_DWORD)v155 - 1) & v147;
                    }
                    v158 = *(uint64_t ***)(v150[1] + 8 * v157);
                    if (v158)
                    {
                      for (j = *v158; j; j = (uint64_t *)*j)
                      {
                        v160 = j[1];
                        if (v160 == v147)
                        {
                          if (*((_DWORD *)j + 4) == v147)
                          {
                            (*(void (**)(_QWORD, uint64_t (**)(), _QWORD, uint64_t))(*(_QWORD *)*v150 + 24))(*v150, v140, *((unsigned int *)j + 5), v194);
                            break;
                          }
                        }
                        else
                        {
                          if (v156.u32[0] > 1uLL)
                          {
                            if (v160 >= v155)
                              v160 %= v155;
                          }
                          else
                          {
                            v160 &= v155 - 1;
                          }
                          if (v160 != v157)
                            break;
                        }
                      }
                    }
                  }
                  a1 = (const float ****)std::__hash_table<std::__hash_value_type<unsigned int,std::tuple<__CFString const*,float,float,float,AudioUnitParameterUnit,unsigned int>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::tuple<__CFString const*,float,float,float,AudioUnitParameterUnit,unsigned int>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::tuple<__CFString const*,float,float,float,AudioUnitParameterUnit,unsigned int>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::tuple<__CFString const*,float,float,float,AudioUnitParameterUnit,unsigned int>>>>::find<unsigned int>(v150 + 1, v147);
                  if (a1)
                  {
                    v161 = (*(float (**)(_QWORD, uint64_t (**)(), _QWORD, float))(*(_QWORD *)*v150 + 32))(*v150, v140, *((unsigned int *)a1 + 5), v152);
                    if (v161 > 1.0)
                      v161 = 1.0;
                    if (v154 > v161)
                      v154 = v161;
                  }
                  v150 += 6;
                }
                while (v150 != v153);
              }
              else
              {
                v154 = 1.0;
              }
              if (*(_QWORD *)(v139 + 440) <= v146)
                __assert_rtn("operator[]", "vector.hpp", 1655, "this->m_holder.m_size > n");
              v162 = *(_QWORD *)(v139 + 432) + 24 * v146;
              v163 = *(float *)(v162 + 20);
              v164 = (float *)(v162 + 8);
              if (v163 >= v154)
                v164 = (float *)(v162 + 12);
              v165 = v163 + (float)(*v164 * (float)(v154 - v163));
              *(float *)(v162 + 20) = v165;
              v166 = 1.0;
              v12 = 1.0;
              if (v165 <= 1.0)
                v166 = v165;
              v167 = v165 < 0.0;
              v168 = 0.0;
              if (!v167)
                v168 = v166;
              if (v168 < v148)
                v148 = v168;
              v145 = *(_QWORD *)(v139 + 32);
              v146 = ++v147;
            }
            while (v145 > v147);
          }
          else
          {
            v148 = 1.0;
          }
          v169 = *(float *)(v139 + 12);
          v198 = v148;
          v170 = (float *)(v139 + 16);
          if (*(float *)(v139 + 16) >= v148)
            v170 = &v198;
          if (v148 < v169)
            v170 = (float *)(v139 + 12);
          v171 = sqrtf(*v170);
          if (*(_QWORD *)(v139 + 568))
          {
            v173 = *(_QWORD **)(v139 + 216);
            v172 = *(_QWORD *)(v139 + 224);
            if (!v173 && v172)
              __assert_rtn("operator+=", "vector.hpp", 181, "m_ptr || !off");
            if (v172)
            {
              v174 = &v173[6 * v172];
              v175 = v145;
              do
              {
                if (!v173)
                  __assert_rtn("operator*", "vector.hpp", 156, "!!m_ptr");
                if (v175)
                {
                  LODWORD(v176) = 0;
                  do
                  {
                    v177 = std::__hash_table<std::__hash_value_type<unsigned int,std::tuple<__CFString const*,float,float,float,AudioUnitParameterUnit,unsigned int>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::tuple<__CFString const*,float,float,float,AudioUnitParameterUnit,unsigned int>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::tuple<__CFString const*,float,float,float,AudioUnitParameterUnit,unsigned int>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::tuple<__CFString const*,float,float,float,AudioUnitParameterUnit,unsigned int>>>>::find<unsigned int>(v173 + 1, v176);
                    if (v177)
                    {
                      v178 = (*(float (**)(_QWORD, uint64_t (**)(), _QWORD))(*(_QWORD *)*v173 + 40))(*v173, v140, *((unsigned int *)v177 + 5));
                      if (v178 < 0.0)
                        v178 = 0.0;
                      v179 = *(clsp::CLSP_Log **)(v139 + 568);
                      __B = v178;
                      clsp::CLSP_Log::LogCLSPData(v179, &__B, 1);
                    }
                    v176 = (v176 + 1);
                    v145 = *(_QWORD *)(v139 + 32);
                  }
                  while (v145 > v176);
                  v175 = *(_QWORD *)(v139 + 32);
                }
                v173 += 6;
              }
              while (v173 != v174);
            }
            if (v145)
            {
              v180 = 0;
              v181 = 1;
              do
              {
                if (*(_QWORD *)(v139 + 184) <= v180)
                  __assert_rtn("operator[]", "vector.hpp", 1655, "this->m_holder.m_size > n");
                v182 = *(clsp::CLSP_Log **)(v139 + 568);
                __B = *(float *)(*(_QWORD *)(v139 + 176) + 4 * v180);
                clsp::CLSP_Log::LogCLSPData(v182, &__B, 1);
                v180 = v181;
              }
              while (*(_QWORD *)(v139 + 32) > (unint64_t)v181++);
            }
            v184 = *(clsp::CLSP_Log **)(v139 + 568);
            __B = log10f(v171) * 20.0;
            clsp::CLSP_Log::LogCLSPData(v184, &__B, 1);
          }
          if (*(_BYTE *)(v139 + 8))
            v185 = v171;
          else
            v185 = v12;
          v186 = *v9;
          v187 = v9[1];
          while (v186 != v187)
          {
            v188 = *v186;
            v186 += 2;
            *((float *)v188 + 168) = v185;
          }
          v15 = v197;
        }
LABEL_80:
        v11 += v15;
        a7 = v192;
      }
      while (v11 < v192);
    }
  }
}

void sub_1B63F5930(_Unwind_Exception *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  _Unwind_Resume(a1);
}

float clsp::ClosedLoopThermalModule::getTemperature(clsp::ClosedLoopThermalModule *this)
{
  uint64_t v1;
  float v2;

  v1 = *((_QWORD *)this + 15);
  if (!v1)
    __assert_rtn("getTemperature", "CLSPBlocks.h", 650, "mr_elecModel");
  v2 = *(double *)(v1 + 8);
  return *((float *)this + 18)
       + *(double *)this
       * (float)((float)((float)(*((float *)this + 20) - v2) / (float)(*((float *)this + 17) - v2)) + -1.0);
}

char *clsp::CLSPKernel_v5::Reset(clsp::CLSPKernel_v5 *this)
{
  uint64_t v2;
  NSObject *v3;
  float v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  char *result;
  int v17;
  const char *v18;
  __int16 v19;
  int v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  v2 = spp3Subsystem();
  if (v2)
  {
    if ((*(_BYTE *)(v2 + 8) & 1) != 0)
    {
      v3 = *(NSObject **)v2;
      if (*(_QWORD *)v2)
      {
        if (os_log_type_enabled(*(os_log_t *)v2, OS_LOG_TYPE_DEBUG))
        {
          v17 = 136315394;
          v18 = "CLSPKernel_v5.cpp";
          v19 = 1024;
          v20 = 1440;
          _os_log_impl(&dword_1B5ED0000, v3, OS_LOG_TYPE_DEBUG, "%25s:%-5d CLSPKernel_v5::Reset", (uint8_t *)&v17, 0x12u);
        }
      }
    }
  }
  *((_DWORD *)this + 24) = *((_DWORD *)this + 23);
  *((_DWORD *)this + 26) = *((_DWORD *)this + 25);
  *((_DWORD *)this + 23) = 0;
  *((_DWORD *)this + 25) = 0;
  v4 = clsp::ClosedLoopThermalModule::reset((clsp::CLSPKernel_v5 *)((char *)this + 152));
  v5 = *((_QWORD *)this + 53);
  if (v5)
    (*(void (**)(uint64_t, float))(*(_QWORD *)v5 + 216))(v5, v4);
  *((_DWORD *)this + 137) = *((_DWORD *)this + 134);
  *((_DWORD *)this + 138) = 0;
  *((_DWORD *)this + 141) = *((_DWORD *)this + 136);
  *(_QWORD *)((char *)this + 556) = 0x3F8000003F800000;
  *((_DWORD *)this + 173) = 1065353216;
  *((_DWORD *)this + 177) = 1065353216;
  *((_DWORD *)this + 181) = 1065353216;
  *((_DWORD *)this + 185) = 1065353216;
  v6 = *((_QWORD *)this + 97);
  if (v6)
    clsp::DelayLine<float,double>::reset(v6);
  v7 = *((_QWORD *)this + 98);
  if (v7)
  {
    *(_QWORD *)(v7 + 16) = 0;
    *(_DWORD *)(v7 + 12) = 0;
  }
  v8 = *((_QWORD *)this + 99);
  if (v8)
  {
    *(_QWORD *)(v8 + 8) = 0;
    *(_DWORD *)(v8 + 16) = 0;
  }
  v9 = *((_QWORD *)this + 125);
  if (v9)
    clsp::DelayLine<float,double>::reset(v9);
  v10 = *((_QWORD *)this + 126);
  if (v10)
    clsp::DelayLine<float,double>::reset(v10);
  v11 = *((_QWORD *)this + 127);
  if (v11)
  {
    v12 = *(_QWORD *)(v11 + 48);
    v13 = *(_QWORD *)(v11 + 56);
    v17 = 0;
    std::vector<float>::assign((char **)(v11 + 48), (v13 - v12) >> 2, &v17);
  }
  v14 = (uint64_t)(*((_QWORD *)this + 101) - *((_QWORD *)this + 100)) >> 2;
  v17 = 0;
  std::vector<float>::assign((char **)this + 100, v14, &v17);
  v15 = (uint64_t)(*((_QWORD *)this + 104) - *((_QWORD *)this + 103)) >> 2;
  v17 = 0;
  result = std::vector<float>::assign((char **)this + 103, v15, &v17);
  *((_BYTE *)this + 1072) = 1;
  return result;
}

char *clsp::DelayLine<float,double>::reset(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  int v6;
  int v7;

  v2 = *(_QWORD *)(a1 + 24);
  v3 = *(_QWORD *)(a1 + 16);
  v7 = 0;
  std::vector<float>::assign((char **)(a1 + 16), (v2 - v3) >> 2, &v7);
  v4 = (uint64_t)(*(_QWORD *)(a1 + 48) - *(_QWORD *)(a1 + 40)) >> 2;
  v6 = 0;
  return std::vector<float>::assign((char **)(a1 + 40), v4, &v6);
}

uint64_t DNNVAD_CreateInstance(uint64_t *a1)
{
  uint64_t v2;
  uint64_t result;
  NSObject *v4;
  uint8_t v5[1032];
  uint64_t v6;

  v6 = *MEMORY[0x1E0C80C00];
  if (!a1)
    return 4294967246;
  v2 = operator new();
  *(_OWORD *)(v2 + 448) = 0u;
  *(_OWORD *)(v2 + 464) = 0u;
  *(_OWORD *)(v2 + 416) = 0u;
  *(_OWORD *)(v2 + 432) = 0u;
  *(_OWORD *)(v2 + 384) = 0u;
  *(_OWORD *)(v2 + 400) = 0u;
  *(_OWORD *)(v2 + 352) = 0u;
  *(_OWORD *)(v2 + 368) = 0u;
  *(_OWORD *)(v2 + 320) = 0u;
  *(_OWORD *)(v2 + 336) = 0u;
  *(_OWORD *)(v2 + 288) = 0u;
  *(_OWORD *)(v2 + 304) = 0u;
  *(_OWORD *)(v2 + 256) = 0u;
  *(_OWORD *)(v2 + 272) = 0u;
  *(_OWORD *)(v2 + 224) = 0u;
  *(_OWORD *)(v2 + 240) = 0u;
  *(_OWORD *)(v2 + 192) = 0u;
  *(_OWORD *)(v2 + 208) = 0u;
  *(_OWORD *)(v2 + 160) = 0u;
  *(_OWORD *)(v2 + 176) = 0u;
  *(_OWORD *)(v2 + 128) = 0u;
  *(_OWORD *)(v2 + 144) = 0u;
  *(_OWORD *)(v2 + 96) = 0u;
  *(_OWORD *)(v2 + 112) = 0u;
  *(_OWORD *)(v2 + 64) = 0u;
  *(_OWORD *)(v2 + 80) = 0u;
  *(_OWORD *)(v2 + 32) = 0u;
  *(_OWORD *)(v2 + 48) = 0u;
  *(_OWORD *)v2 = 0u;
  *(_OWORD *)(v2 + 16) = 0u;
  *(_OWORD *)(v2 + 8) = xmmword_1B66A05F0;
  *(_OWORD *)(v2 + 24) = xmmword_1B66A0600;
  *(_BYTE *)(v2 + 56) = 0;
  *(_QWORD *)(v2 + 80) = 0;
  *(_QWORD *)(v2 + 88) = 0;
  *(_DWORD *)(v2 + 96) = 0;
  *(_QWORD *)(v2 + 112) = 0;
  *(_QWORD *)(v2 + 120) = 0;
  *(_QWORD *)(v2 + 104) = 0;
  *(_QWORD *)(v2 + 40) = 0x3F90624DD2F1A9FCLL;
  *(_QWORD *)(v2 + 48) = 0xFFFFFFFFLL;
  *(_QWORD *)(v2 + 128) = &off_1E69ED658;
  *(_QWORD *)(v2 + 144) = 0;
  *(_QWORD *)(v2 + 149) = 0;
  *(_QWORD *)(v2 + 164) = 0xFFFFFFFF00000001;
  *(_QWORD *)(v2 + 184) = 0;
  *(_QWORD *)(v2 + 192) = 0;
  *(_QWORD *)(v2 + 176) = 0;
  if (DSPGraph::ABIVersion((DSPGraph *)v2) != 4)
  {
    if (DSPGraph::getLog(void)::onceToken != -1)
      dispatch_once(&DSPGraph::getLog(void)::onceToken, &__block_literal_global_8881);
    v4 = (id)DSPGraph::getLog(void)::gLog;
    if (os_log_type_enabled(v4, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)v5 = 0;
      _os_log_fault_impl(&dword_1B5ED0000, v4, OS_LOG_TYPE_FAULT, "DSPGraph assertion failure: DSPGraph ABI runtime/compile-time mismatch", v5, 2u);
    }

    qword_1EF134C88 = (uint64_t)v5;
    __break(1u);
  }
  result = 0;
  *(_QWORD *)(v2 + 248) = 0;
  *(_OWORD *)(v2 + 232) = 0u;
  *(_OWORD *)(v2 + 216) = 0u;
  *(_OWORD *)(v2 + 200) = 0u;
  *(_DWORD *)(v2 + 256) = 1;
  *(_BYTE *)(v2 + 272) = 0;
  *(_BYTE *)(v2 + 464) = 0;
  *a1 = v2;
  return result;
}

void sub_1B63F5E04(_Unwind_Exception *a1, int a2)
{
  if (a2)
  {
    __cxa_begin_catch(a1);
    __cxa_end_catch();
    JUMPOUT(0x1B63F5D54);
  }
  _Unwind_Resume(a1);
}

uint64_t DNNVAD_EnableLegacyVAD(uint64_t a1)
{
  _OWORD *v2;
  _OWORD *v3;
  uint64_t v4;
  uint64_t result;

  if (!a1)
    return 4294967246;
  v2 = (_OWORD *)(a1 + 280);
  v3 = (_OWORD *)(a1 + 272);
  if (*(_BYTE *)(a1 + 464))
  {
    v4 = *(_QWORD *)(a1 + 408);
    *(_QWORD *)(a1 + 400) = &off_1E69ED658;
    *(_QWORD *)(a1 + 408) = 0;
    if (v4)
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  }
  result = 0;
  v3[10] = 0u;
  v3[11] = 0u;
  v3[8] = 0u;
  v3[9] = 0u;
  v3[6] = 0u;
  v3[7] = 0u;
  v3[4] = 0u;
  v3[5] = 0u;
  v3[2] = 0u;
  v3[3] = 0u;
  *v3 = 0u;
  v3[1] = 0u;
  *v2 = xmmword_1B66A05F0;
  v2[1] = xmmword_1B66A0600;
  *(_BYTE *)(a1 + 328) = 0;
  *(_QWORD *)(a1 + 352) = 0;
  *(_QWORD *)(a1 + 360) = 0;
  *(_DWORD *)(a1 + 368) = 0;
  *(_QWORD *)(a1 + 376) = 0;
  *(_QWORD *)(a1 + 384) = 0;
  *(_QWORD *)(a1 + 312) = 0x3F90624DD2F1A9FCLL;
  *(_QWORD *)(a1 + 320) = 0xFFFFFFFFLL;
  *(_QWORD *)(a1 + 392) = 0;
  *(_QWORD *)(a1 + 400) = &off_1E69ED658;
  *(_QWORD *)(a1 + 421) = 0;
  *(_DWORD *)(a1 + 436) = 1;
  *(_QWORD *)(a1 + 416) = 0;
  *(_DWORD *)(a1 + 440) = -1;
  *(_BYTE *)(a1 + 464) = 1;
  return result;
}

uint64_t DNNVAD_IsInitialized(uint64_t a1, BOOL *a2)
{
  uint64_t result;

  result = 4294967246;
  if (a1)
  {
    if (a2)
    {
      result = 0;
      *a2 = *(_QWORD *)(a1 + 176) != 0;
    }
  }
  return result;
}

uint64_t DNNVAD_Initialize(uint64_t a1, unsigned int a2, unsigned int a3)
{
  DSPGraph::Graph **v6;
  uint64_t v7;
  NSString *v8;
  const __CFDictionary *PropertyList;
  NSString *v10;
  const __CFDictionary *v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  uint64_t v17;
  int v18;
  unsigned int v19;
  BOOL v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  MultiRadixRealFFT *v24;
  std::__shared_weak_count *v25;
  unint64_t *p_shared_owners;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  float v30;
  uint64_t v31;
  float v32;
  float v33;
  uint64_t v34;
  float v35;
  float v36;
  float v37;
  float v38;
  float v39;
  float v40;
  int v41;
  float v42;
  uint64_t v43;
  uint64_t v44;
  _DWORD *v45;
  int *v46;
  int *v47;
  uint64_t v48;
  _DWORD *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  float32x4_t *v54;
  uint64_t v55;
  float32x4_t *v56;
  uint64_t v62;
  float32x4_t v63;
  uint64_t v64;
  float *v65;
  _DWORD *v66;
  _DWORD *v67;
  uint64_t v68;
  uint64_t v69;
  int v70;
  uint64_t v71;
  uint64_t v72;
  float v73;
  uint64_t v74;
  uint64_t v75;
  float v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t i;
  float v80;
  int v81;
  float v82;
  float v83;
  int v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  _OWORD *v88;
  _OWORD *v89;
  uint64_t v91;
  uint64_t v92;
  _DWORD *v93;
  _DWORD *v94;
  uint64_t v95;
  uint64_t v96;
  _OWORD *v97;
  _OWORD *v98;
  uint64_t v99;
  uint64_t v100;
  _DWORD *v101;
  _DWORD *v102;
  uint64_t v103;
  float v105;
  uint64_t v106;
  _QWORD v107[3];
  std::string v108;
  _BYTE v109[40];
  uint64_t v110;
  void **v111;
  void *v112[2];
  char v113;
  std::string __p;
  uint8_t buf[32];
  __int128 v116;
  __int128 v117;
  __int128 v118;
  __int128 v119;
  __int128 v120;
  __int128 v121;
  __int128 v122;
  __int128 v123;
  __int128 v124;
  __int128 v125;
  __int128 v126;
  uint64_t v127;
  uint64_t v128;

  v128 = *MEMORY[0x1E0C80C00];
  if (DNNVAD_Initialize::onceToken == -1)
  {
    if (a1)
      goto LABEL_3;
    return 4294967246;
  }
  dispatch_once(&DNNVAD_Initialize::onceToken, &__block_literal_global_13573);
  if (!a1)
    return 4294967246;
LABEL_3:
  v127 = 0;
  v6 = (DSPGraph::Graph **)(a1 + 176);
  v125 = 0u;
  v126 = 0u;
  v123 = 0u;
  v124 = 0u;
  v121 = 0u;
  v122 = 0u;
  v119 = 0u;
  v120 = 0u;
  v117 = 0u;
  v118 = 0u;
  v116 = 0u;
  memset(buf, 0, sizeof(buf));
  DSPGraph::Interpreter::Interpreter((DSPGraph::Interpreter *)buf);
  std::to_string(&v108, a3);
  std::string::basic_string[abi:ne180100]<0>(v112, "inputSampleRate");
  __p = v108;
  memset(&v108, 0, sizeof(v108));
  std::unordered_map<std::string,std::string>::unordered_map((uint64_t)v109, (unsigned __int8 *)v112, 1);
  memset(v107, 0, sizeof(v107));
  DSPGraph::Interpreter::compileFile();
  std::shared_ptr<DSPGraph::Graph>::operator=[abi:ne180100]<DSPGraph::Graph,std::default_delete<DSPGraph::Graph>,void>((_QWORD *)(a1 + 176), &v110);
  v7 = v110;
  v110 = 0;
  if (v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  v111 = (void **)v107;
  std::vector<std::__fs::filesystem::path>::__destroy_vector::operator()[abi:ne180100](&v111);
  std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::~__hash_table((uint64_t)v109);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (v113 < 0)
    operator delete(v112[0]);
  if (SHIBYTE(v108.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v108.__r_.__value_.__l.__data_);
  MEMORY[0x1BCC95158](buf);
  if (*v6)
  {
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "/Library/Audio/Tunings/Generic/VAD/nnvad.propstrip");
    v8 = (NSString *)objc_claimAutoreleasedReturnValue();
    PropertyList = (const __CFDictionary *)MetadataDNNVAD_LoadPropertyList(v8);

    DSPGraph::Graph::setPropertyStrip(*v6, PropertyList);
    DSPGraph::Graph::setSliceDuration();
    DSPGraph::Graph::configure(*v6);
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "/Library/Audio/Tunings/Generic/VAD/nnvad.austrip");
    v10 = (NSString *)objc_claimAutoreleasedReturnValue();
    v11 = (const __CFDictionary *)MetadataDNNVAD_LoadPropertyList(v10);

    DSPGraph::Graph::setAUStrip(*v6, v11);
    DSPGraph::Graph::initialize(*v6);
    *(_DWORD *)(a1 + 264) = a3;

    if (*(_BYTE *)(a1 + 464))
    {
      v12 = (double)a3;
      *(double *)(a1 + 280) = (double)a3;
      if ((double)a3 * 2.5 >= 2.22507386e-308)
        v13 = -2.76310211 / (double)a3;
      else
        v13 = -INFINITY;
      v14 = exp(v13);
      if (v13 < -708.4)
        v14 = 0.0;
      *(double *)(a1 + 288) = v14;
      if (v12 * 1.24 >= 2.22507386e-308)
        v15 = -5.57077039 / v12;
      else
        v15 = -INFINITY;
      v16 = exp(v15);
      if (v15 < -708.4)
        v16 = 0.0;
      *(double *)(a1 + 304) = v16;
      *(_QWORD *)(a1 + 336) = 0;
      *(_WORD *)(a1 + 328) = 0;
      *(_QWORD *)(a1 + 352) = 0;
      *(_QWORD *)(a1 + 360) = 0;
      *(_QWORD *)(a1 + 368) = 0;
      *(_QWORD *)(a1 + 376) = 0;
      *(_QWORD *)(a1 + 384) = 0;
      *(_QWORD *)(a1 + 392) = 0;
      *(_QWORD *)(a1 + 320) = 0xFFFFFFFFLL;
      v17 = 0xFFFFFFFFLL;
      if (a3 > 0xBB80)
        goto LABEL_104;
      v18 = 1;
      if (a2 >= 0x401)
      {
        v19 = a2;
        do
        {
          a2 = v19 >> 1;
          ++v18;
          v20 = v19 > 0x801;
          v19 >>= 1;
        }
        while (v20);
      }
      *(_DWORD *)(a1 + 436) = v18;
      v21 = operator new();
      v22 = v21;
      *(_QWORD *)v21 = &off_1E69ED580;
      *(_DWORD *)(v21 + 24) = a3;
      if (a2 < 8)
        goto LABEL_28;
      if (a2 <= 0x800)
      {
        if (a2 < 9)
        {
LABEL_28:
          v23 = 8;
          goto LABEL_35;
        }
        if (a2 < 0x11)
        {
          v23 = 16;
        }
        else if (a2 < 0x19)
        {
          v23 = 24;
        }
        else if (a2 < 0x21)
        {
          v23 = 32;
        }
        else if (a2 < 0x29)
        {
          v23 = 40;
        }
        else if (a2 < 0x31)
        {
          v23 = 48;
        }
        else if (a2 < 0x3D)
        {
          v23 = 60;
        }
        else if (a2 < 0x41)
        {
          v23 = 64;
        }
        else if (a2 < 0x51)
        {
          v23 = 80;
        }
        else if (a2 < 0x61)
        {
          v23 = 96;
        }
        else if (a2 < 0x79)
        {
          v23 = 120;
        }
        else if (a2 < 0x81)
        {
          v23 = 128;
        }
        else if (a2 < 0xA1)
        {
          v23 = 160;
        }
        else if (a2 < 0xC1)
        {
          v23 = 192;
        }
        else if (a2 < 0xF1)
        {
          v23 = 240;
        }
        else if (a2 < 0x101)
        {
          v23 = 256;
        }
        else if (a2 < 0x141)
        {
          v23 = 320;
        }
        else if (a2 < 0x181)
        {
          v23 = 384;
        }
        else if (a2 < 0x1E1)
        {
          v23 = 480;
        }
        else if (a2 < 0x201)
        {
          v23 = 512;
        }
        else if (a2 < 0x281)
        {
          v23 = 640;
        }
        else if (a2 < 0x301)
        {
          v23 = 768;
        }
        else if (a2 < 0x3C1)
        {
          v23 = 960;
        }
        else if (a2 < 0x401)
        {
          v23 = 1024;
        }
        else if (a2 < 0x501)
        {
          v23 = 1280;
        }
        else if (a2 < 0x601)
        {
          v23 = 1536;
        }
        else if (a2 <= 0x780)
        {
          v23 = 1920;
        }
        else
        {
          v23 = 2048;
        }
      }
      else
      {
        v23 = 2048;
      }
LABEL_35:
      *(_DWORD *)(v21 + 16) = v23;
      *(_DWORD *)(v21 + 20) = v23;
      v24 = (MultiRadixRealFFT *)operator new();
      *(_QWORD *)v24 = 0;
      *((_QWORD *)v24 + 1) = 0;
      if (MultiRadixRealFFT::Initialize(v24, 2 * v23))
      {
        v25 = (std::__shared_weak_count *)*((_QWORD *)v24 + 1);
        if (v25)
        {
          p_shared_owners = (unint64_t *)&v25->__shared_owners_;
          do
            v27 = __ldaxr(p_shared_owners);
          while (__stlxr(v27 - 1, p_shared_owners));
          if (!v27)
          {
            ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
            std::__shared_weak_count::__release_weak(v25);
          }
        }
        MEMORY[0x1BCC95CEC](v24, 0x20C40A4A59CD2);
      }
      else
      {
        *(_QWORD *)(v22 + 40) = v24;
      }
      *(_QWORD *)(v22 + 48) = operator new[]();
      *(_QWORD *)(v22 + 56) = operator new[]();
      bzero(*(void **)(v22 + 48), 4 * *(unsigned int *)(v22 + 20));
      bzero(*(void **)(v22 + 56), 4 * *(unsigned int *)(v22 + 20));
      *(_DWORD *)(v22 + 28) = 24;
      v28 = operator new();
      *(_OWORD *)(v28 + 8) = 0u;
      *(_QWORD *)v28 = &off_1E69ED6E0;
      *(_OWORD *)(v28 + 24) = 0u;
      *(_OWORD *)(v28 + 40) = 0u;
      *(_OWORD *)(v28 + 56) = 0u;
      *(_QWORD *)(v22 + 32) = v28;
      v29 = *(unsigned int *)(v22 + 28);
      v30 = (float)*(unsigned int *)(v22 + 24);
      v31 = *(unsigned int *)(v22 + 20);
      v32 = atanf(v30 * 0.00037);
      v105 = v30;
      v33 = atanf((float)(v30 * v30) * 0.000000004625);
      *(_DWORD *)(v28 + 48) = v29;
      *(_DWORD *)(v28 + 52) = v31;
      *(_QWORD *)(v28 + 8) = operator new[]();
      *(_QWORD *)(v28 + 16) = operator new[]();
      *(_QWORD *)(v28 + 24) = operator new[]();
      *(_QWORD *)(v28 + 32) = operator new[]();
      *(_QWORD *)(v28 + 56) = operator new[]();
      *(_QWORD *)(v28 + 64) = operator new[]();
      *(_QWORD *)(v28 + 40) = operator new[]();
      bzero(*(void **)(v28 + 8), 4 * v31);
      bzero(*(void **)(v28 + 16), 4 * v31);
      bzero(*(void **)(v28 + 24), 4 * v31);
      bzero(*(void **)(v28 + 32), 4 * v31);
      bzero(*(void **)(v28 + 56), 4 * v29);
      bzero(*(void **)(v28 + 64), 4 * v29);
      bzero(*(void **)(v28 + 40), 4 * v29);
      if ((_DWORD)v31)
      {
        v34 = 0;
        v35 = (float)((float)(v105 * 0.00005) + (float)(v32 * 13.1)) + (float)(v33 * 2.24);
        v36 = v35 / (float)(v29 - 1);
        v37 = 1.0 / v36;
        do
        {
          v38 = (float)((float)v34 * v105) * (float)(1.0 / (float)(2 * v31));
          v39 = atanf(v38 * 0.00074);
          v40 = (float)((float)(v38 * 0.0001) + (float)(v39 * 13.1))
              + (float)(atanf((float)(v38 * v38) * 0.0000000185) * 2.24);
          if (v40 > v35)
            break;
          v41 = vcvtms_s32_f32(v40 * v37);
          v42 = (float)(v40 - (float)(v36 * (float)(int)floorf(v40 * v37))) * v37;
          if ((int)v29 - 2 < v41)
          {
            v41 = v29 - 2;
            v42 = 1.0;
          }
          *(_DWORD *)(*(_QWORD *)(v28 + 8) + 4 * v34) = v41;
          *(float *)(*(_QWORD *)(v28 + 24) + 4 * v34) = 1.0 - v42;
          *(_DWORD *)(*(_QWORD *)(v28 + 16) + 4 * v34) = v41 + 1;
          *(float *)(*(_QWORD *)(v28 + 32) + 4 * v34++) = v42;
        }
        while (v31 != v34);
      }
      v43 = *(unsigned int *)(v28 + 48);
      if ((_DWORD)v43)
        bzero(*(void **)(v28 + 40), 4 * v43);
      if ((_DWORD)v31)
      {
        v45 = *(_DWORD **)(v28 + 32);
        v44 = *(_QWORD *)(v28 + 40);
        v46 = *(int **)(v28 + 8);
        v47 = *(int **)(v28 + 16);
        v48 = v31;
        v49 = *(_DWORD **)(v28 + 24);
        do
        {
          v51 = *v46++;
          v50 = v51;
          LODWORD(v51) = *v49++;
          *(float *)(v44 + 4 * v50) = *(float *)(v44 + 4 * v50) + *(float *)&v51;
          v53 = *v47++;
          v52 = v53;
          LODWORD(v53) = *v45++;
          *(float *)(v44 + 4 * v52) = *(float *)(v44 + 4 * v52) + *(float *)&v53;
          --v48;
        }
        while (v48);
      }
      if ((_DWORD)v43)
      {
        v54 = *(float32x4_t **)(v28 + 40);
        if (v43 <= 7)
        {
          v55 = 0;
LABEL_60:
          v64 = v43 - v55;
          v65 = &v54->f32[v55];
          do
          {
            *v65 = 1.0 / *v65;
            ++v65;
            --v64;
          }
          while (v64);
          goto LABEL_62;
        }
        v55 = v43 & 0xFFFFFFF8;
        v56 = v54 + 1;
        __asm { FMOV            V0.4S, #1.0 }
        v62 = v55;
        do
        {
          v63 = vdivq_f32(_Q0, *v56);
          v56[-1] = vdivq_f32(_Q0, v56[-1]);
          *v56 = v63;
          v56 += 2;
          v62 -= 8;
        }
        while (v62);
        if (v55 != v43)
          goto LABEL_60;
      }
LABEL_62:
      v66 = *(_DWORD **)(v28 + 56);
      *v66 = 0;
      v67 = *(_DWORD **)(v28 + 64);
      *v67 = 0;
      if ((_DWORD)v31)
      {
        v68 = 0;
        LODWORD(v69) = 0;
        v70 = 0;
        v71 = *(_QWORD *)(v28 + 8);
        do
        {
          if (*(_DWORD *)(v71 + 4 * v68) == v70)
          {
            ++v67[(int)v69];
          }
          else
          {
            v69 = (int)v69 + 1;
            ++v70;
            v66[v69] = v68;
            v67[v69] = 1;
          }
          ++v68;
        }
        while (v31 != v68);
      }
      v72 = operator new();
      *(_QWORD *)(v22 + 8) = v72;
      v73 = (float)*(unsigned int *)(v22 + 24);
      v74 = *(unsigned int *)(v22 + 16);
      *(_DWORD *)(v22 + 20) = v74;
      v75 = (2 * v74);
      *(_DWORD *)v72 = 1;
      *(_QWORD *)(v72 + 4) = 0x3ECCCCCD3F333333;
      *(_DWORD *)(v22 + 28) = 24;
      v76 = 1.0 / (float)(v73 / (float)v74);
      *(float *)(v72 + 156) = expf(v76 * -25.0);
      *(float *)(v72 + 160) = expf(v76 * -66.667);
      *(float *)(v72 + 164) = expf(v76 * -40.0);
      *(float *)(v72 + 168) = expf(v76 * -200.0);
      *(float *)(v72 + 172) = 1.0 - expf(v76 * -10.0);
      *(float *)(v72 + 176) = 1.0 - expf(v76 * -20.0);
      *(_QWORD *)(v72 + 40) = operator new[]();
      *(_QWORD *)(v72 + 80) = operator new[]();
      *(_QWORD *)(v72 + 48) = operator new[]();
      v106 = (v74 + 24);
      *(_QWORD *)(v72 + 56) = operator new[]();
      *(_QWORD *)(v72 + 64) = operator new[]();
      *(_QWORD *)(v72 + 88) = operator new[]();
      *(_QWORD *)(v72 + 96) = operator new[]();
      *(_QWORD *)(v72 + 104) = operator new[]();
      *(_QWORD *)(v72 + 112) = operator new[]();
      *(_QWORD *)(v72 + 120) = operator new[]();
      *(_QWORD *)(v72 + 128) = operator new[]();
      *(_QWORD *)(v72 + 136) = operator new[]();
      bzero(*(void **)(v72 + 40), 4 * v75);
      bzero(*(void **)(v72 + 80), 4 * v75);
      bzero(*(void **)(v72 + 48), 4 * v75);
      bzero(*(void **)(v72 + 56), 4 * v106);
      bzero(*(void **)(v72 + 64), 4 * v106);
      bzero(*(void **)(v72 + 88), 4 * v106);
      bzero(*(void **)(v72 + 96), 4 * v106);
      bzero(*(void **)(v72 + 104), 4 * v106);
      bzero(*(void **)(v72 + 112), 0x60uLL);
      bzero(*(void **)(v72 + 120), 0x60uLL);
      bzero(*(void **)(v72 + 128), 0x60uLL);
      bzero(*(void **)(v72 + 136), 0x60uLL);
      *(_QWORD *)(v72 + 184) = operator new[]();
      v77 = operator new[]();
      *(_QWORD *)(v72 + 192) = v77;
      v78 = *(_QWORD *)(v72 + 80);
      if ((int)v75 >= 1)
      {
        for (i = 0; v75 != i; ++i)
        {
          v80 = (float)((float)(int)i * 4.0) * (float)(1.0 / (float)(int)v75);
          if (v80 >= 1.0)
          {
            if (v80 < 2.0)
            {
              v81 = 0;
              v80 = 2.0 - v80;
              goto LABEL_76;
            }
            if (v80 < 3.0)
            {
              v81 = 0;
              v80 = v80 + -2.0;
              goto LABEL_76;
            }
            v80 = 4.0 - v80;
          }
          v81 = 1;
LABEL_76:
          v82 = cosf(v80 * 1.9979);
          v83 = (float)(0.5 - (float)(v82 * 0.5)) * (float)(0.5 - (float)(v82 * 0.5));
          if (!v81)
            v83 = 1.0 - v83;
          *(float *)(v78 + 4 * i) = sqrtf(v83);
        }
      }
      v84 = *(_DWORD *)(v22 + 20);
      if (v75 < 2 * v84)
        memset_pattern16((void *)(v78 + 4 * (2 * v74)), &unk_1B6627B80, 4 * (2 * v84 - v75 - 2) + 8);
      if ((_DWORD)v106)
      {
        v85 = 0;
        v86 = *(_QWORD *)(v72 + 88);
        v87 = *(_QWORD *)(v72 + 96);
        if (v106 < 8)
          goto LABEL_89;
        if ((unint64_t)(v87 - v86) <= 0x1F)
          goto LABEL_89;
        v85 = v106 & 0xFFFFFFF8;
        v88 = (_OWORD *)(v87 + 16);
        v89 = (_OWORD *)(v86 + 16);
        __asm { FMOV            V0.4S, #1.0 }
        v91 = v85;
        do
        {
          *(v89 - 1) = _Q0;
          *v89 = _Q0;
          *(v88 - 1) = _Q0;
          *v88 = _Q0;
          v88 += 2;
          v89 += 2;
          v91 -= 8;
        }
        while (v91);
        if (v85 != v106)
        {
LABEL_89:
          v92 = v106 - v85;
          v93 = (_DWORD *)(v87 + 4 * v85);
          v94 = (_DWORD *)(v86 + 4 * v85);
          do
          {
            *v94++ = 1065353216;
            *v93++ = 1065353216;
            --v92;
          }
          while (v92);
        }
        memset_pattern16(*(void **)(v72 + 136), &unk_1B6627B80, 0x60uLL);
        if (!(_DWORD)v74)
          goto LABEL_101;
      }
      else
      {
        memset_pattern16(*(void **)(v72 + 136), &unk_1B6627B80, 0x60uLL);
      }
      v95 = 0;
      v96 = *(_QWORD *)(v72 + 184);
      if (v74 < 8)
        goto LABEL_99;
      if ((unint64_t)(v77 - v96) < 0x20)
        goto LABEL_99;
      v95 = v74 & 0xFFFFFFF8;
      v97 = *(_OWORD **)(v72 + 184);
      v98 = (_OWORD *)v77;
      v99 = v95;
      do
      {
        *v97 = 0uLL;
        v97[1] = 0uLL;
        v97 += 2;
        *v98 = 0uLL;
        v98[1] = 0uLL;
        v98 += 2;
        v99 -= 8;
      }
      while (v99);
      if (v95 != v74)
      {
LABEL_99:
        v100 = v74 - v95;
        v101 = (_DWORD *)(v77 + 4 * v95);
        v102 = (_DWORD *)(v96 + 4 * v95);
        do
        {
          *v102++ = 0;
          *v101++ = 0;
          --v100;
        }
        while (v100);
      }
LABEL_101:
      *(_DWORD *)(v72 + 152) = 0;
      *(_DWORD *)(v72 + 208) = 0;
      *(_QWORD *)(v72 + 200) = 0;
      *(_DWORD *)(v72 + 72) = 0;
      v103 = *(_QWORD *)(a1 + 408);
      *(_QWORD *)(a1 + 408) = v22;
      if (v103)
        (*(void (**)(uint64_t))(*(_QWORD *)v103 + 8))(v103);
      v17 = 0;
LABEL_104:
      *(_DWORD *)(a1 + 440) = -1;
      return v17;
    }
    return 0;
  }
  else
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      *(_QWORD *)&buf[4] = "Initialize";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 67;
      _os_log_error_impl(&dword_1B5ED0000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "MetadataDNNVAD:%s:%d: couldn't initialize due to null dspgraph", buf, 0x12u);
    }
    return 4294956421;
  }
}

void sub_1B63F6F04(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,std::string **a28,void *__p,uint64_t a30,int __pa,__int16 __p_4,char __p_6,char __p_7,uint8_t buf,uint64_t a36,__int128 bufa,__int16 a38,__int16 a39,int a40,int a41,__int16 a42)
{
  uint64_t v42;
  void *v43;
  void *v44;
  uint64_t v45;
  _DWORD *v48;
  std::__shared_weak_count *v49;
  unint64_t *v50;
  unint64_t v51;
  int v52;
  void *v53;
  _BOOL4 v54;
  uint64_t v55;
  NSObject *v56;
  const char *v57;
  uint32_t v58;
  unsigned int v59;
  int v60;
  std::string **v61;
  uint64_t v62;

  if (!a2)
    _Unwind_Resume(exception_object);

  if (a2 == 3)
  {
    v48 = __cxa_begin_catch(exception_object);
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      v59 = v48[2];
      v60 = bswap32(v59);
      *(_DWORD *)(v45 + 49) = v60;
      if (((char)v60 - 32) > 0x5E
        || (((__int16)v60 >> 8) - 32) > 0x5E
        || ((v60 << 8 >> 24) - 32) > 0x5E
        || ((v60 >> 24) - 32) > 0x5E)
      {
        std::to_string((std::string *)&a28, v59);
      }
      else
      {
        *(_WORD *)(v45 + 53) = 39;
        LOBYTE(bufa) = 39;
        std::string::basic_string[abi:ne180100]<0>(&a28, (char *)&bufa);
      }
      v61 = a30 >= 0 ? (std::string **)&a28 : a28;
      v62 = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v48 + 16))(v48);
      LODWORD(bufa) = 136315906;
      *(_QWORD *)(v45 + 52) = "Initialize";
      WORD6(bufa) = 1024;
      *(_DWORD *)(v45 + 62) = 71;
      a39 = 2080;
      *(_QWORD *)(v45 + 68) = v61;
      a42 = 2080;
      *(_QWORD *)(v45 + 78) = v62;
      _os_log_error_impl(&dword_1B5ED0000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "MetadataDNNVAD:%s:%d: couldn't initialize due to DSPG exception %s: %s", (uint8_t *)&bufa, 0x26u);
      if (SHIBYTE(a30) < 0)
        operator delete(a28);
    }
    bufa = 0uLL;
    std::shared_ptr<vp::xml::_xmlNode const>::operator=[abi:ne180100](v42, &bufa);
    v49 = (std::__shared_weak_count *)*((_QWORD *)&bufa + 1);
    if (*((_QWORD *)&bufa + 1))
    {
      v50 = (unint64_t *)(*((_QWORD *)&bufa + 1) + 8);
      do
        v51 = __ldaxr(v50);
      while (__stlxr(v51 - 1, v50));
      if (!v51)
      {
        ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
        std::__shared_weak_count::__release_weak(v49);
      }
    }
    v52 = v48[2];
    __cxa_end_catch();
    if (!v52)
      JUMPOUT(0x1B63F6138);
LABEL_32:
    JUMPOUT(0x1B63F6E0CLL);
  }
  v53 = __cxa_begin_catch(exception_object);
  v54 = os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR);
  if (a2 == 2)
  {
    if (v54)
    {
      v55 = (*(uint64_t (**)(void *))(*(_QWORD *)v53 + 16))(v53);
      LODWORD(bufa) = 136315650;
      *(_QWORD *)(v45 + 52) = "Initialize";
      WORD6(bufa) = 1024;
      *(_DWORD *)(v45 + 62) = 75;
      a39 = 2080;
      *(_QWORD *)(v45 + 68) = v55;
      v56 = MEMORY[0x1E0C81028];
      v57 = "MetadataDNNVAD:%s:%d: couldn't initialize due to exception: %s";
      v58 = 28;
LABEL_28:
      _os_log_error_impl(&dword_1B5ED0000, v56, OS_LOG_TYPE_ERROR, v57, (uint8_t *)&bufa, v58);
    }
  }
  else if (v54)
  {
    LODWORD(bufa) = 136315394;
    *(_QWORD *)(v45 + 52) = "Initialize";
    WORD6(bufa) = 1024;
    *(_DWORD *)(v45 + 62) = 78;
    v56 = MEMORY[0x1E0C81028];
    v57 = "MetadataDNNVAD:%s:%d: unknown exception";
    v58 = 18;
    goto LABEL_28;
  }
  __cxa_end_catch();
  goto LABEL_32;
}

void sub_1B63F72D8(uint64_t a1, int a2)
{
  uint64_t v2;

  if (a2)
  {
    MEMORY[0x1BCC95CEC](v2, 0x10A1C40BDDD2F36);
    JUMPOUT(0x1B63F72F8);
  }
  JUMPOUT(0x1B63F72D0);
}

uint64_t DNNVAD_Uninitialize(uint64_t a1)
{
  if (a1)
    return MetadataDNNVAD::Uninitialize((DSPGraph::Graph **)(a1 + 176));
  else
    return 4294967246;
}

void sub_1B63F73A4(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1B63F739CLL);
}

uint64_t DNNVAD_Process(uint64_t a1, const float *a2, unsigned int a3)
{
  uint64_t v4;
  uint64_t result;
  __int128 v8;
  __int128 v9;
  VoiceActivityDetector *v10;
  _BOOL4 v11;
  _BOOL4 v12;
  double v13;
  float v14;
  uint64_t v15;
  char v16;
  char v17;
  int v18;
  _DWORD v19[4];
  const float *v20;
  uint64_t v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  _DWORD *v26;
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  if (!a1)
    return 4294967246;
  v4 = *(_QWORD *)(a1 + 176);
  result = 1;
  if (v4)
  {
    v20 = a2;
    v19[2] = 1;
    v19[3] = 4 * a3;
    v19[0] = 1;
    v21 = a3;
    v8 = *(_OWORD *)(a1 + 216);
    v22 = *(_OWORD *)(a1 + 200);
    v23 = v8;
    v9 = *(_OWORD *)(a1 + 248);
    v24 = *(_OWORD *)(a1 + 232);
    v25 = v9;
    v26 = v19;
    DSPGraph::Graph::preflight();
    DSPGraph::Graph::processMultiple();
    if (*(_BYTE *)(a1 + 464))
    {
      PowerMeter::Process((unsigned __int8 *)(a1 + 272), a2, a3);
      v10 = *(VoiceActivityDetector **)(a1 + 408);
      if (v10)
        v11 = VoiceActivityDetector::VADProcess<float>(v10, a2, a3, *(_DWORD *)(a1 + 436)) != 0;
      else
        v11 = 0;
      if (*(_DWORD *)(a1 + 440))
        v12 = v11;
      else
        v12 = 0;
      *(_DWORD *)(a1 + 440) = v12;
      HIDWORD(v22) = 0;
      *(_QWORD *)((char *)&v22 + 4) = 0;
      v13 = *(double *)(a1 + 384);
      if (v13 <= 0.000001)
        v14 = -120.0;
      else
        v14 = log10(fmax(v13, 2.22507386e-308)) * 20.0;
      v15 = 0;
      v21 = 0x4706F6462;
      *(float *)&v22 = v14;
      *(_QWORD *)((char *)&v22 + 4) = 0x473616432;
      v16 = 1;
      HIDWORD(v22) = v12;
      *(_DWORD *)(a1 + 440) = -1;
      do
      {
        v17 = v16;
        v18 = *((_DWORD *)&v21 + 3 * v15);
        if (v18 == 1935762482)
        {
          *(float *)(a1 + 448) = (float)*((unsigned int *)&v21 + 3 * v15 + 2);
        }
        else if (v18 == 1886348386)
        {
          *(_DWORD *)(a1 + 444) = *((_DWORD *)&v21 + 3 * v15 + 2);
        }
        v16 = 0;
        v15 = 1;
      }
      while ((v17 & 1) != 0);
    }
    return 0;
  }
  return result;
}

void sub_1B63F75B8(_Unwind_Exception *a1, int a2)
{
  _DWORD *v3;
  int v4;

  if (a2)
  {
    v3 = __cxa_begin_catch(a1);
    if (a2 == 2)
    {
      v4 = v3[2];
      __cxa_end_catch();
      if (!v4)
        JUMPOUT(0x1B63F7458);
    }
    else
    {
      __cxa_end_catch();
    }
    JUMPOUT(0x1B63F7588);
  }
  _Unwind_Resume(a1);
}

uint64_t DNNVAD_GetPowerMeterValue(uint64_t a1, float *a2)
{
  uint64_t result;
  float v4;

  result = 4294967246;
  if (a1 && a2)
  {
    result = 0;
    v4 = *(float *)(a1 + 444);
    if (!*(_BYTE *)(a1 + 464))
      v4 = 0.0;
    *a2 = v4;
  }
  return result;
}

uint64_t DNNVAD_GetSoundActivityValue(uint64_t a1, float *a2)
{
  uint64_t result;
  float v4;

  result = 4294967246;
  if (a1 && a2)
  {
    result = 0;
    v4 = *(float *)(a1 + 448);
    if (!*(_BYTE *)(a1 + 464))
      v4 = 0.0;
    *a2 = v4;
  }
  return result;
}

uint64_t DNNVAD_GetSpeechProbabilitySoftValue(uint64_t a1, _DWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  int v6;

  result = 4294967246;
  if (a1 && a2)
  {
    v5 = *(_QWORD *)(a1 + 176);
    if (v5)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v5 + 48))(v5, 1936748646);
    else
      v6 = 0;
    result = 0;
    *a2 = v6;
  }
  return result;
}

void sub_1B63F76C4(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1B63F76B8);
}

uint64_t DNNVAD_GetSpeechProbabilityHardValue(uint64_t a1, _DWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  int v6;

  result = 4294967246;
  if (a1 && a2)
  {
    v5 = *(_QWORD *)(a1 + 176);
    if (v5)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v5 + 48))(v5, 1936748642);
    else
      v6 = 0;
    result = 0;
    *a2 = v6;
  }
  return result;
}

void sub_1B63F7730(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1B63F7724);
}

uint64_t DNNVAD_DestroyInstance(MetadataDNNVAD *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  if (this)
  {
    if (*((_BYTE *)this + 464))
    {
      v2 = *((_QWORD *)this + 51);
      *((_QWORD *)this + 50) = &off_1E69ED658;
      *((_QWORD *)this + 51) = 0;
      if (v2)
        (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
    }
    if (*((_QWORD *)this + 22))
      MetadataDNNVAD::Uninitialize((DSPGraph::Graph **)this + 22);
    v3 = *((_QWORD *)this + 24);
    *((_QWORD *)this + 24) = 0;
    if (v3)
      (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
    std::shared_ptr<vp::services::Telephony_Utility>::~shared_ptr[abi:ne180100]((uint64_t)this + 176);
    v4 = *((_QWORD *)this + 17);
    *((_QWORD *)this + 16) = &off_1E69ED658;
    *((_QWORD *)this + 17) = 0;
    if (v4)
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
    MEMORY[0x1BCC95CEC](this, 0x10A0C404F70B4CBLL);
  }
  return 0;
}

void AUFTSpatialAC::~AUFTSpatialAC(AUFTSpatialAC *this)
{
  AUFTSpatialAC::~AUFTSpatialAC(this);
  JUMPOUT(0x1BCC95CECLL);
}

{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t *v5;
  uint64_t *v6;
  NSObject *v7;
  uint64_t *v8;
  uint64_t *v9;
  void **v10[2];

  *(_QWORD *)this = &off_1E69DA9D0;
  if (GetSpatialMetadataSPI(void)::sSpatialMetadataSPIOnce != -1)
    dispatch_once(&GetSpatialMetadataSPI(void)::sSpatialMetadataSPIOnce, &__block_literal_global_128);
  if (GetSpatialMetadataSPI(void)::sSpatialMetadataSPI)
    (*(void (**)(_QWORD))(GetSpatialMetadataSPI(void)::sSpatialMetadataSPI + 16))(*((_QWORD *)this + 66));
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 669);
  *((_OWORD *)this + 334) = 0u;
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  v5 = (uint64_t *)*((_QWORD *)this + 101);
  *((_QWORD *)this + 101) = 0;
  if (v5)
    std::default_delete<AUFTSpatialAC::AURealTimeDebugLog<AUFTSpatialAC::AUFTOrientationParams,256ul>>::operator()[abi:ne180100](v5);
  v6 = (uint64_t *)*((_QWORD *)this + 127);
  *((_QWORD *)this + 127) = 0;
  if (v6)
    std::default_delete<AUFTSpatialAC::AURealTimeDebugLog<AUFTSpatialAC::AUFTWindowParams,256ul>>::operator()[abi:ne180100](v6);
  if (*((_BYTE *)this + 2464))
  {
    v10[0] = (void **)((char *)this + 2440);
    std::vector<std::unique_ptr<AUFTSpatialAC::AURealTimeDebugLog<AUFTSpatialAC::AUFTSpatAUInStreamParams,256ul>>>::__destroy_vector::operator()[abi:ne180100](v10);
    *((_BYTE *)this + 2464) = 0;
  }
  if (*((_BYTE *)this + 3264))
  {
    v10[0] = (void **)((char *)this + 3240);
    std::vector<std::unique_ptr<AUFTSpatialAC::AURealTimeDebugLog<AUFTSpatialAC::AUFTSpatAUOutStreamParams,256ul>>>::__destroy_vector::operator()[abi:ne180100](v10);
    *((_BYTE *)this + 3264) = 0;
  }
  if (AUFTSpatialACLog(void)::onceToken != -1)
    dispatch_once(&AUFTSpatialACLog(void)::onceToken, &__block_literal_global_132_13838);
  v7 = AUFTSpatialACLog(void)::gLog;
  if (os_log_type_enabled((os_log_t)AUFTSpatialACLog(void)::gLog, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(v10[0]) = 0;
    _os_log_impl(&dword_1B5ED0000, v7, OS_LOG_TYPE_DEFAULT, "destroyed", (uint8_t *)v10, 2u);
  }
  std::shared_ptr<vp::services::Telephony_Utility>::~shared_ptr[abi:ne180100]((uint64_t)this + 5344);
  if (*((_BYTE *)this + 3264))
  {
    v10[0] = (void **)((char *)this + 3240);
    std::vector<std::unique_ptr<AUFTSpatialAC::AURealTimeDebugLog<AUFTSpatialAC::AUFTSpatAUOutStreamParams,256ul>>>::__destroy_vector::operator()[abi:ne180100](v10);
  }
  if (*((_BYTE *)this + 2464))
  {
    v10[0] = (void **)((char *)this + 2440);
    std::vector<std::unique_ptr<AUFTSpatialAC::AURealTimeDebugLog<AUFTSpatialAC::AUFTSpatAUInStreamParams,256ul>>>::__destroy_vector::operator()[abi:ne180100](v10);
  }
  v8 = (uint64_t *)*((_QWORD *)this + 127);
  *((_QWORD *)this + 127) = 0;
  if (v8)
    std::default_delete<AUFTSpatialAC::AURealTimeDebugLog<AUFTSpatialAC::AUFTWindowParams,256ul>>::operator()[abi:ne180100](v8);
  v9 = (uint64_t *)*((_QWORD *)this + 101);
  *((_QWORD *)this + 101) = 0;
  if (v9)
    std::default_delete<AUFTSpatialAC::AURealTimeDebugLog<AUFTSpatialAC::AUFTOrientationParams,256ul>>::operator()[abi:ne180100](v9);
  v10[0] = (void **)((char *)this + 720);
  std::vector<std::unique_ptr<DspLib::AlgorithmBaseNewParameters>>::__destroy_vector::operator()[abi:ne180100](v10);
  v10[0] = (void **)((char *)this + 672);
  std::vector<std::unique_ptr<DspLib::AlgorithmBaseNewParameters>>::__destroy_vector::operator()[abi:ne180100](v10);
  ausdk::AUBase::~AUBase(this);
}

void AUFTSpatialAC::CreateExtendedElements(int64x2_t *this)
{
  unint64_t i;
  std::string *v3;
  __int128 v4;
  void **v5;
  CFStringRef v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t j;
  std::string *v11;
  __int128 v12;
  void **v13;
  CFStringRef v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  std::string v18;
  void *__p[2];
  int64_t v20;

  ausdk::AUScope::Initialize(this + 41, (ausdk::AUBase *)this, 1, 32);
  for (i = 0; i != 32; ++i)
  {
    std::to_string(&v18, i);
    v3 = std::string::insert(&v18, 0, "In", 2uLL);
    v4 = *(_OWORD *)&v3->__r_.__value_.__l.__data_;
    v20 = v3->__r_.__value_.__r.__words[2];
    *(_OWORD *)__p = v4;
    v3->__r_.__value_.__l.__size_ = 0;
    v3->__r_.__value_.__r.__words[2] = 0;
    v3->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v18.__r_.__value_.__l.__data_);
    if (v20 >= 0)
      v5 = __p;
    else
      v5 = (void **)__p[0];
    v6 = CFStringCreateWithCString(0, (const char *)v5, 0x8000100u);
    v7 = this[43].i64[1];
    if (v7)
    {
      v8 = (*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)v7 + 32))(v7, i);
    }
    else
    {
      v9 = this[42].i64[0];
      if (i >= (this[42].i64[1] - v9) >> 3)
        v8 = 0;
      else
        v8 = *(_QWORD *)(v9 + 8 * i);
    }
    ausdk::Owned<__CFString const*>::operator=((const void **)(v8 + 72), v6);
    CFRelease(v6);
    if (SHIBYTE(v20) < 0)
      operator delete(__p[0]);
  }
  ausdk::AUScope::Initialize(this + 44, (ausdk::AUBase *)this, 2, 32);
  for (j = 0; j != 32; ++j)
  {
    std::to_string(&v18, j);
    v11 = std::string::insert(&v18, 0, "Out", 3uLL);
    v12 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
    v20 = v11->__r_.__value_.__r.__words[2];
    *(_OWORD *)__p = v12;
    v11->__r_.__value_.__l.__size_ = 0;
    v11->__r_.__value_.__r.__words[2] = 0;
    v11->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v18.__r_.__value_.__l.__data_);
    if (v20 >= 0)
      v13 = __p;
    else
      v13 = (void **)__p[0];
    v14 = CFStringCreateWithCString(0, (const char *)v13, 0x8000100u);
    v15 = this[46].i64[1];
    if (v15)
    {
      v16 = (*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)v15 + 32))(v15, j);
    }
    else
    {
      v17 = this[45].i64[0];
      if (j >= (this[45].i64[1] - v17) >> 3)
        v16 = 0;
      else
        v16 = *(_QWORD *)(v17 + 8 * j);
    }
    ausdk::Owned<__CFString const*>::operator=((const void **)(v16 + 72), v14);
    CFRelease(v14);
    if (SHIBYTE(v20) < 0)
      operator delete(__p[0]);
  }
}

void sub_1B63F7A54(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t AUFTSpatialAC::Initialize(AUFTSpatialAC *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  float v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  int v11;
  int v12;

  *((_BYTE *)this + 752) = 1;
  v2 = *((_QWORD *)this + 21);
  if (v2)
    LODWORD(v3) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 24))(v2);
  else
    v3 = (*((_QWORD *)this + 19) - *((_QWORD *)this + 18)) >> 3;
  *((_DWORD *)this + 158) = v3;
  v4 = *((_QWORD *)this + 15);
  if (v4)
  {
    LODWORD(v5) = (*(uint64_t (**)(_QWORD))(*(_QWORD *)v4 + 24))(*((_QWORD *)this + 15));
    LODWORD(v3) = *((_DWORD *)this + 158);
  }
  else
  {
    v5 = (*((_QWORD *)this + 13) - *((_QWORD *)this + 12)) >> 3;
  }
  *((_DWORD *)this + 159) = v5;
  if (v5 >= v3)
    LODWORD(v5) = v3;
  *((_DWORD *)this + 160) = v5;
  v6 = *(double *)(ausdk::AUScope::SafeGetElement((AUFTSpatialAC *)((char *)this + 80), 0) + 80);
  *((float *)this + 135) = v6;
  *((_DWORD *)this + 1331) = 1112014848;
  (*(void (**)(AUFTSpatialAC *, _QWORD, _QWORD))(*(_QWORD *)this + 72))(this, 0, 0);
  AUFTSpatialAC::UpdateState(this);
  *(_OWORD *)((char *)this + 600) = 0u;
  *(_OWORD *)((char *)this + 616) = 0u;
  *((_QWORD *)this + 70) = *((_QWORD *)this + 69);
  *((_QWORD *)this + 72) = *((_QWORD *)this + 71);
  *((_QWORD *)this + 74) = *((_QWORD *)this + 73);
  v7 = 940;
  if (!*((_BYTE *)this + 783))
    v7 = 884;
  v8 = 944;
  v9 = 948;
  if (!*((_BYTE *)this + 783))
    v9 = 952;
  v10 = *(_DWORD *)((char *)this + v9);
  if (!*((_BYTE *)this + 783))
    v8 = 888;
  v11 = *(_DWORD *)((char *)this + v8);
  v12 = *(_DWORD *)((char *)this + v7);
  *((_DWORD *)this + 1328) = v12;
  *((_DWORD *)this + 1329) = v11;
  *((_DWORD *)this + 1330) = v10;
  *((_DWORD *)this + 1325) = v12;
  *((_DWORD *)this + 1326) = v11;
  *((_DWORD *)this + 1327) = v10;
  return 0;
}

uint64_t AUFTSpatialAC::Reset(AUFTSpatialAC *this)
{
  __int128 v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  int v7;
  int v8;

  *((_BYTE *)this + 752) = 1;
  *((_QWORD *)this + 69) = 1;
  *((_OWORD *)this + 35) = xmmword_1B6626830;
  *((_OWORD *)this + 36) = xmmword_1B6626830;
  *((_QWORD *)this + 74) = 0;
  *(_QWORD *)&v2 = 0x101010101010101;
  *((_QWORD *)&v2 + 1) = 0x101010101010101;
  *(_OWORD *)((char *)this + 600) = v2;
  *(_OWORD *)((char *)this + 616) = v2;
  AUFTSpatialAC::SetOutputParamsToDefaults(this);
  v3 = 940;
  if (!*((_BYTE *)this + 783))
    v3 = 884;
  v4 = 944;
  if (!*((_BYTE *)this + 783))
    v4 = 888;
  v5 = 948;
  if (!*((_BYTE *)this + 783))
    v5 = 952;
  v6 = *(_DWORD *)((char *)this + v5);
  v7 = *(_DWORD *)((char *)this + v4);
  v8 = *(_DWORD *)((char *)this + v3);
  *((_DWORD *)this + 1328) = v8;
  *((_DWORD *)this + 1329) = v7;
  *((_DWORD *)this + 1330) = v6;
  *((_DWORD *)this + 1325) = v8;
  *((_DWORD *)this + 1326) = v7;
  *((_DWORD *)this + 1327) = v6;
  memset_pattern16((char *)this + 4116, &unk_1B66A2B20, 0x80uLL);
  memset_pattern16((char *)this + 4244, &unk_1B66A2B20, 0x80uLL);
  vDSP_vfill((const float *)this + 161, (float *)this + 1197, 1, 0x20uLL);
  return 0;
}

uint64_t AUFTSpatialAC::GetPropertyInfo(AUFTSpatialAC *this, int a2, int a3, unsigned int a4, unsigned int *a5, BOOL *a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  unsigned int v11;
  void *v12;
  void *__p;
  void *v14;
  uint64_t v15;
  uint64_t v16;

  if (a3)
    return 4294956417;
  v15 = v6;
  v16 = v7;
  result = 4294956417;
  if (a2 <= 4000)
  {
    if (a2 > 3699)
    {
      if (a2 != 3700 && a2 != 4000)
        return result;
    }
    else if (a2 != 21)
    {
      if (a2 != 3000)
        return result;
      result = 0;
      *a6 = 0;
      goto LABEL_19;
    }
LABEL_18:
    result = 0;
    *a6 = 1;
LABEL_19:
    v11 = 4;
LABEL_20:
    *a5 = v11;
    return result;
  }
  if (a2 <= 5999)
  {
    if (a2 != 4001)
    {
      if (a2 != 5000)
        return result;
      result = 0;
      *a6 = 1;
      v11 = *((_DWORD *)this + 134);
      goto LABEL_20;
    }
    goto LABEL_18;
  }
  if (a2 != 6000)
  {
    if (a2 != 7000)
    {
      if (a2 != 105000)
        return result;
      result = 0;
      *a6 = 1;
      v11 = 8;
      goto LABEL_20;
    }
    goto LABEL_18;
  }
  *a6 = 1;
  AU::FTSpatialAC::MetricsReporter::getCAReporterIDs((AU::FTSpatialAC::MetricsReporter *)&__p, *((_QWORD *)this + 668));
  v12 = __p;
  *a5 = ((_DWORD)v14 - (_DWORD)__p) & 0xFFFFFFF8;
  if (v12)
  {
    v14 = v12;
    operator delete(v12);
  }
  return 0;
}

uint64_t AUFTSpatialAC::GetProperty(AUFTSpatialAC *this, int a2, int a3, unsigned int a4, float *a5)
{
  uint64_t v5;
  __CFData *Mutable;
  UInt8 *MutableBytePtr;
  NSObject *v11;
  int v12;
  NSObject *v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  float v17;
  _DWORD length[3];
  void *v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  if (a3)
    return 4294956417;
  v5 = 4294956417;
  if (a2 <= 4000)
  {
    if (a2 > 3699)
    {
      if (a2 != 3700)
      {
        if (a2 != 4000)
          return v5;
        v5 = 0;
        v14 = *((_QWORD *)this + 120);
LABEL_45:
        *(_DWORD *)a5 = v14;
        return v5;
      }
      v5 = 0;
      v12 = *((unsigned __int8 *)this + 376);
    }
    else if (a2 == 21)
    {
      v5 = 0;
      v12 = *((unsigned __int8 *)this + 544);
    }
    else
    {
      if (a2 != 3000)
        return v5;
      v5 = 0;
      v12 = *((_DWORD *)this + 201);
    }
    *(_DWORD *)a5 = v12;
    return v5;
  }
  if (a2 > 5999)
  {
    switch(a2)
    {
      case 6000:
        AU::FTSpatialAC::MetricsReporter::getCAReporterIDs((AU::FTSpatialAC::MetricsReporter *)&length[1], *((_QWORD *)this + 668));
        v15 = *(void **)&length[1];
        memcpy(a5, *(const void **)&length[1], (size_t)v19 - *(_QWORD *)&length[1]);
        if (v15)
        {
          v19 = v15;
          operator delete(v15);
        }
        return 0;
      case 7000:
        v16 = *((_QWORD *)this + 668);
        std::mutex::lock((std::mutex *)(v16 + 48));
        v17 = (float)*(uint64_t *)(v16 + 136);
        std::mutex::unlock((std::mutex *)(v16 + 48));
        v5 = 0;
        *a5 = v17;
        break;
      case 105000:
        if (GetSpatialMetadataSPI(void)::sSpatialMetadataSPIOnce != -1)
          dispatch_once(&GetSpatialMetadataSPI(void)::sSpatialMetadataSPIOnce, &__block_literal_global_128);
        if (GetSpatialMetadataSPI(void)::sSpatialMetadataSPI)
        {
          AUFTSpatialAC::StoreSpatialMetadataProperties(this);
          length[0] = *((_DWORD *)this + 134);
          Mutable = CFDataCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], length[0]);
          MutableBytePtr = CFDataGetMutableBytePtr(Mutable);
          if (GetSpatialMetadataSPI(void)::sSpatialMetadataSPIOnce != -1)
            dispatch_once(&GetSpatialMetadataSPI(void)::sSpatialMetadataSPIOnce, &__block_literal_global_128);
          v5 = (*(uint64_t (**)(_QWORD, UInt8 *, _DWORD *))(GetSpatialMetadataSPI(void)::sSpatialMetadataSPI
                                                                    + 48))(*((_QWORD *)this + 66), MutableBytePtr, length);
          if ((_DWORD)v5)
          {
            if (AUFTSpatialAC::getAUSLog(void)::onceToken != -1)
              dispatch_once(&AUFTSpatialAC::getAUSLog(void)::onceToken, &__block_literal_global_13833);
            v11 = AUFTSpatialAC::getAUSLog(void)::gLog;
            if (os_log_type_enabled((os_log_t)AUFTSpatialAC::getAUSLog(void)::gLog, OS_LOG_TYPE_ERROR))
            {
              length[1] = 67109120;
              length[2] = v5;
              _os_log_error_impl(&dword_1B5ED0000, v11, OS_LOG_TYPE_ERROR, "failed to set spatial metadata with status %u", (uint8_t *)&length[1], 8u);
            }
            *(_QWORD *)a5 = 0;
            CFRelease(Mutable);
          }
          else
          {
            CFDataSetLength(Mutable, length[0]);
            *(_QWORD *)a5 = Mutable;
          }
        }
        break;
    }
    return v5;
  }
  if (a2 == 4001)
  {
    v5 = 0;
    v14 = *((_QWORD *)this + 121);
    goto LABEL_45;
  }
  if (a2 != 5000)
    return v5;
  if (GetSpatialMetadataSPI(void)::sSpatialMetadataSPIOnce != -1)
    dispatch_once(&GetSpatialMetadataSPI(void)::sSpatialMetadataSPIOnce, &__block_literal_global_128);
  if (!GetSpatialMetadataSPI(void)::sSpatialMetadataSPI)
    return 4294956417;
  AUFTSpatialAC::StoreSpatialMetadataProperties(this);
  length[0] = *((_DWORD *)this + 134);
  if (GetSpatialMetadataSPI(void)::sSpatialMetadataSPIOnce != -1)
    dispatch_once(&GetSpatialMetadataSPI(void)::sSpatialMetadataSPIOnce, &__block_literal_global_128);
  v5 = (*(uint64_t (**)(_QWORD, float *, _DWORD *))(GetSpatialMetadataSPI(void)::sSpatialMetadataSPI + 48))(*((_QWORD *)this + 66), a5, length);
  if ((_DWORD)v5)
  {
    if (AUFTSpatialAC::getAUSLog(void)::onceToken != -1)
      dispatch_once(&AUFTSpatialAC::getAUSLog(void)::onceToken, &__block_literal_global_13833);
    v13 = AUFTSpatialAC::getAUSLog(void)::gLog;
    if (os_log_type_enabled((os_log_t)AUFTSpatialAC::getAUSLog(void)::gLog, OS_LOG_TYPE_ERROR))
    {
      length[1] = 67109120;
      length[2] = v5;
      _os_log_error_impl(&dword_1B5ED0000, v13, OS_LOG_TYPE_ERROR, "failed to set spatial metadata with status %u", (uint8_t *)&length[1], 8u);
    }
  }
  return v5;
}

uint64_t AUFTSpatialAC::SetProperty(AUFTSpatialAC *this, int a2, int a3, unsigned int a4, CFDataRef *a5, uint64_t a6)
{
  uint64_t v6;
  NSObject *v7;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  NSObject *v13;
  void **v14;
  unsigned int v15;
  uint64_t *v16;
  const __CFData *v17;
  const UInt8 *BytePtr;
  NSObject *v19;
  float v20;
  uint64_t v21;
  NSObject *v22;
  CFDataRef *v23;
  CFDataRef *v24;
  uint64_t v25;
  __int128 v26;
  void *__p[2];
  char v28;
  unsigned __int8 v29[8];
  uint64_t *v30;
  _BYTE buf[12];
  uint8_t v32[16];
  uint64_t v33;
  uint64_t v34;

  v34 = *MEMORY[0x1E0C80C00];
  if (!a5)
  {
    if (AUFTSpatialAC::getAUSLog(void)::onceToken != -1)
      dispatch_once(&AUFTSpatialAC::getAUSLog(void)::onceToken, &__block_literal_global_13833);
    v7 = AUFTSpatialAC::getAUSLog(void)::gLog;
    if (os_log_type_enabled((os_log_t)AUFTSpatialAC::getAUSLog(void)::gLog, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)v32 = 0;
      _os_log_error_impl(&dword_1B5ED0000, v7, OS_LOG_TYPE_ERROR, "The inData passed to SetProperty is null.", v32, 2u);
    }
    return 4294956445;
  }
  if (a3)
    return 4294956417;
  v6 = 4294956417;
  if (a2 > 4999)
  {
    if (a2 > 6999)
    {
      if (a2 == 7000)
      {
        v20 = *(float *)a5;
        v21 = *((_QWORD *)this + 668);
        std::mutex::lock((std::mutex *)(v21 + 48));
        *(_QWORD *)(v21 + 136) = (uint64_t)v20;
        std::mutex::unlock((std::mutex *)(v21 + 48));
        if (AUFTSpatialACLog(void)::onceToken != -1)
          dispatch_once(&AUFTSpatialACLog(void)::onceToken, &__block_literal_global_132_13838);
        v22 = AUFTSpatialACLog(void)::gLog;
        if (os_log_type_enabled((os_log_t)AUFTSpatialACLog(void)::gLog, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)v32 = 134217984;
          *(double *)&v32[4] = v20;
          _os_log_impl(&dword_1B5ED0000, v22, OS_LOG_TYPE_INFO, "set CoreAudio reporter time period - %f", v32, 0xCu);
        }
        return 0;
      }
      if (a2 != 105000)
        return v6;
      if (GetSpatialMetadataSPI(void)::sSpatialMetadataSPIOnce != -1)
      {
        v23 = a5;
        dispatch_once(&GetSpatialMetadataSPI(void)::sSpatialMetadataSPIOnce, &__block_literal_global_128);
        a5 = v23;
      }
      if (!GetSpatialMetadataSPI(void)::sSpatialMetadataSPI)
        return 4294956417;
      v17 = *a5;
      BytePtr = CFDataGetBytePtr(*a5);
      CFDataGetLength(v17);
      if (GetSpatialMetadataSPI(void)::sSpatialMetadataSPIOnce != -1)
        dispatch_once(&GetSpatialMetadataSPI(void)::sSpatialMetadataSPIOnce, &__block_literal_global_128);
      v6 = (*(uint64_t (**)(_QWORD, const UInt8 *))(GetSpatialMetadataSPI(void)::sSpatialMetadataSPI + 56))(*((_QWORD *)this + 66), BytePtr);
      if ((_DWORD)v6)
      {
        if (AUFTSpatialAC::getAUSLog(void)::onceToken != -1)
          dispatch_once(&AUFTSpatialAC::getAUSLog(void)::onceToken, &__block_literal_global_13833);
        v19 = AUFTSpatialAC::getAUSLog(void)::gLog;
        if (!os_log_type_enabled((os_log_t)AUFTSpatialAC::getAUSLog(void)::gLog, OS_LOG_TYPE_ERROR))
          return v6;
        *(_DWORD *)v32 = 67109120;
        *(_DWORD *)&v32[4] = v6;
LABEL_57:
        _os_log_error_impl(&dword_1B5ED0000, v19, OS_LOG_TYPE_ERROR, "failed to set spatial metadata with status %d", v32, 8u);
        return v6;
      }
    }
    else
    {
      if (a2 != 5000)
      {
        if (a2 != 6000)
          return v6;
        memset(v32, 0, sizeof(v32));
        v33 = 0;
        std::vector<long long>::__init_with_size[abi:ne180100]<long long const*,long long const*>(v32, a5, (uint64_t)&a5[a6 >> 3], a6 >> 3);
        v29[0] = 2;
        __p[0] = *(void **)v32;
        *(_QWORD *)buf = *(_QWORD *)&v32[8];
        v30 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::create<std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__wrap_iter<long long const*>,std::__wrap_iter<long long const*>>((uint64_t **)__p, (uint64_t **)buf);
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v29);
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v29);
        v10 = *((_QWORD *)this + 668);
        v26 = *(_OWORD *)v32;
        v11 = v33;
        v33 = 0;
        memset(v32, 0, sizeof(v32));
        std::mutex::lock((std::mutex *)(v10 + 48));
        v12 = *(void **)(v10 + 112);
        if (v12)
        {
          *(_QWORD *)(v10 + 120) = v12;
          operator delete(v12);
          *(_QWORD *)(v10 + 112) = 0;
          *(_QWORD *)(v10 + 120) = 0;
          *(_QWORD *)(v10 + 128) = 0;
        }
        *(_OWORD *)(v10 + 112) = v26;
        *(_QWORD *)(v10 + 128) = v11;
        std::mutex::unlock((std::mutex *)(v10 + 48));
        if (AUFTSpatialACLog(void)::onceToken != -1)
          dispatch_once(&AUFTSpatialACLog(void)::onceToken, &__block_literal_global_132_13838);
        v13 = AUFTSpatialACLog(void)::gLog;
        if (os_log_type_enabled((os_log_t)AUFTSpatialACLog(void)::gLog, OS_LOG_TYPE_INFO))
        {
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::dump((uint64_t)v29, -1, 0x20u, 0, 0, __p);
          v14 = v28 >= 0 ? __p : (void **)__p[0];
          *(_DWORD *)buf = 136315138;
          *(_QWORD *)&buf[4] = v14;
          _os_log_impl(&dword_1B5ED0000, v13, OS_LOG_TYPE_INFO, "set CoreAudio reporter IDs - %s", buf, 0xCu);
          if (v28 < 0)
            operator delete(__p[0]);
        }
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v29);
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v30, v29[0]);
        if (*(_QWORD *)v32)
        {
          *(_QWORD *)&v32[8] = *(_QWORD *)v32;
          operator delete(*(void **)v32);
        }
        return 0;
      }
      if (GetSpatialMetadataSPI(void)::sSpatialMetadataSPIOnce != -1)
      {
        v24 = a5;
        v25 = a6;
        dispatch_once(&GetSpatialMetadataSPI(void)::sSpatialMetadataSPIOnce, &__block_literal_global_128);
        a6 = v25;
        a5 = v24;
      }
      if (!GetSpatialMetadataSPI(void)::sSpatialMetadataSPI)
        return 4294956417;
      v6 = (*(uint64_t (**)(_QWORD, CFDataRef *, uint64_t))(GetSpatialMetadataSPI(void)::sSpatialMetadataSPI
                                                                   + 56))(*((_QWORD *)this + 66), a5, a6);
      if ((_DWORD)v6)
      {
        if (AUFTSpatialAC::getAUSLog(void)::onceToken != -1)
          dispatch_once(&AUFTSpatialAC::getAUSLog(void)::onceToken, &__block_literal_global_13833);
        v19 = AUFTSpatialAC::getAUSLog(void)::gLog;
        if (!os_log_type_enabled((os_log_t)AUFTSpatialAC::getAUSLog(void)::gLog, OS_LOG_TYPE_ERROR))
          return v6;
        *(_DWORD *)v32 = 67109120;
        *(_DWORD *)&v32[4] = v6;
        goto LABEL_57;
      }
    }
    AUFTSpatialAC::LoadSpatialMetadataProperties(this);
    return v6;
  }
  if (a2 > 3999)
  {
    if (a2 == 4000)
    {
      if ((_DWORD)a6 == 4)
      {
        v15 = *(_DWORD *)a5;
        if (*(_DWORD *)a5 <= 0x7Fu)
        {
          v16 = (uint64_t *)((char *)this + 960);
          goto LABEL_61;
        }
      }
    }
    else
    {
      if (a2 != 4001)
        return v6;
      if ((_DWORD)a6 == 4)
      {
        v15 = *(_DWORD *)a5;
        if (*(_DWORD *)a5 <= 0x7Fu)
        {
          v16 = (uint64_t *)((char *)this + 968);
LABEL_61:
          AUFTSpatialAC::SetOrientationFlagsFromBitMask(v16, v15);
          return 0;
        }
      }
    }
    return 4294956445;
  }
  if (a2 == 21)
  {
    v6 = 0;
    *((_BYTE *)this + 544) = *(_DWORD *)a5 != 0;
    return v6;
  }
  if (a2 == 3700)
  {
    if ((_DWORD)a6 == 4)
    {
      v6 = 0;
      *((_BYTE *)this + 376) = *(_DWORD *)a5 == 1;
      return v6;
    }
    return 4294956445;
  }
  return v6;
}

void sub_1B63F87C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, __int128 a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t *a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19)
{
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::~basic_json(&a14);
  if (__p)
  {
    a19 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t AUFTSpatialAC::GetParameter(AUFTSpatialAC *this, unsigned int a2, int a3, uint64_t a4, float *a5)
{
  uint64_t v7;
  ausdk::AUElement *Element;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  float Parameter;

  v7 = 4294956418;
  switch(a3)
  {
    case 2:
      if (a2 - 812 >= 0xFFFFFFF4)
        LODWORD(v7) = 0;
      else
        LODWORD(v7) = -10878;
      if (a4 <= 0x1F)
        v7 = v7;
      else
        v7 = 4294956419;
      if ((_DWORD)v7)
        return v7;
      v9 = *((_QWORD *)this + 93);
      if (v9)
      {
LABEL_22:
        Element = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v9 + 32))(v9, a4);
        goto LABEL_27;
      }
      v10 = a4;
      v11 = *((_QWORD *)this + 91);
      v12 = *((_QWORD *)this + 90);
LABEL_24:
      if (v10 >= (v11 - v12) >> 3)
        Element = 0;
      else
        Element = *(ausdk::AUElement **)(v12 + 8 * v10);
      goto LABEL_27;
    case 1:
      if (a2 - 609 >= 0xFFFFFFF7)
        LODWORD(v7) = 0;
      else
        LODWORD(v7) = -10878;
      if (a4 <= 0x1F)
        v7 = v7;
      else
        v7 = 4294956419;
      if ((_DWORD)v7)
        return v7;
      v9 = *((_QWORD *)this + 87);
      if (v9)
        goto LABEL_22;
      v10 = a4;
      v11 = *((_QWORD *)this + 85);
      v12 = *((_QWORD *)this + 84);
      goto LABEL_24;
    case 0:
      Element = (ausdk::AUElement *)ausdk::AUScope::SafeGetElement((AUFTSpatialAC *)((char *)this + 32), a4);
LABEL_27:
      Parameter = ausdk::AUElement::GetParameter(Element, a2);
      v7 = 0;
      *a5 = Parameter;
      break;
  }
  return v7;
}

uint64_t AUFTSpatialAC::SetParameter(AUFTSpatialAC *this, unsigned int a2, int a3, uint64_t a4, float a5)
{
  unsigned int v6;
  uint64_t result;
  ausdk::AUElement *Element;
  unsigned int v11;
  uint64_t v12;
  ausdk::AUElement *v13;
  unsigned int v14;
  uint64_t v15;
  ausdk::AUElement *v16;
  uint64_t v17;
  uint64_t v18;

  v6 = a4;
  result = 4294956418;
  switch(a3)
  {
    case 2:
      if (a2 - 812 >= 0xFFFFFFF4)
        v11 = 0;
      else
        v11 = -10878;
      if (a4 <= 0x1F)
        result = v11;
      else
        result = 4294956419;
      if (!(_DWORD)result)
      {
        v12 = *((_QWORD *)this + 93);
        if (v12)
        {
          v13 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v12 + 32))(v12, a4);
        }
        else
        {
          v18 = *((_QWORD *)this + 90);
          if (a4 >= (unint64_t)((*((_QWORD *)this + 91) - v18) >> 3))
            v13 = 0;
          else
            v13 = *(ausdk::AUElement **)(v18 + 8 * a4);
        }
        ausdk::AUElement::SetParameter(v13, a2, a5, 0);
        return 0;
      }
      break;
    case 1:
      if (a2 - 609 >= 0xFFFFFFF7)
        v14 = 0;
      else
        v14 = -10878;
      if (a4 <= 0x1F)
        result = v14;
      else
        result = 4294956419;
      if (!(_DWORD)result)
      {
        v15 = *((_QWORD *)this + 87);
        if (v15)
        {
          v16 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v15 + 32))(v15, a4);
        }
        else
        {
          v17 = *((_QWORD *)this + 84);
          v16 = a4 >= (unint64_t)((*((_QWORD *)this + 85) - v17) >> 3)
              ? 0
              : *(ausdk::AUElement **)(v17 + 8 * a4);
        }
        ausdk::AUElement::SetParameter(v16, a2, a5, 0);
        result = 0;
        if (a2 != 600)
        {
          result = 0;
          ++*((_QWORD *)this + 73);
          *((_BYTE *)this + v6 + 600) = 1;
        }
      }
      break;
    case 0:
      Element = (ausdk::AUElement *)ausdk::AUScope::SafeGetElement((AUFTSpatialAC *)((char *)this + 32), a4);
      ausdk::AUElement::SetParameter(Element, a2, a5, 0);
      if (a2 == 213 || a2 == 200 || a2 - 206 <= 5)
      {
        result = 0;
        ++*((_QWORD *)this + 71);
      }
      else
      {
        result = 0;
        ++*((_QWORD *)this + 69);
      }
      break;
  }
  return result;
}

uint64_t AUFTSpatialAC::CanScheduleParameters(AUFTSpatialAC *this)
{
  return 0;
}

uint64_t AUFTSpatialAC::ProcessMultipleBufferLists(AUFTSpatialAC *this, unsigned int *a2, vDSP_Length __N, unsigned int a4, const AudioBufferList **a5, unsigned int a6, AudioBufferList **a7)
{
  unsigned int v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  float v14;
  uint64_t v15;
  unsigned __int8 *v16;
  int v17;
  int v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _BOOL4 v23;
  _BOOL4 v24;
  float v25;
  uint64_t v26;
  ausdk::AUElement *v27;
  ausdk::AUElement **v28;
  float Parameter;
  uint64_t v30;
  ausdk::AUElement *v31;
  ausdk::AUElement **v32;
  float v33;
  int v34;
  unsigned __int8 *v35;
  uint8_t *v36;
  uint64_t v37;
  unint64_t v38;
  _BOOL4 v39;
  float *v40;
  int v41;
  uint64_t *v42;
  std::chrono::system_clock::time_point v43;
  int v44;
  BOOL v45;
  int v46;
  uint64_t v47;
  uint64_t v48;
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep rep;
  std::__shared_weak_count *v50;
  std::__shared_weak_count *v51;
  __int128 v52;
  uint64_t v53;
  uint64_t result;
  NSObject *v55;
  const char *v56;
  NSObject *v57;
  NSObject *v58;
  unint64_t v59;
  unint64_t i;
  AudioBufferList *v61;
  char *v62;
  float v63;
  float v64;
  float v65;
  uint64_t v66;
  _BYTE *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  unsigned int v71;
  unsigned int v72;
  _BYTE *v73;
  uint64_t v74;
  char *v75;
  int v76;
  uint64_t v77;
  unint64_t v78;
  char *v79;
  float v80;
  float v81;
  const AudioBufferList *v82;
  uint64_t v83;
  float v84;
  _DWORD *v85;
  float *v86;
  float v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  _DWORD *v91;
  char *v92;
  uint64_t v93;
  _BYTE *v94;
  _DWORD *v95;
  char *v96;
  _DWORD *v97;
  uint64_t v98;
  int v99;
  _DWORD *v100;
  unsigned __int8 *v101;
  uint64_t v102;
  int v103;
  uint64_t v104;
  uint64_t v105;
  unsigned int v106;
  unsigned int v107;
  char *v108;
  uint64_t v109;
  uint64_t v110;
  unsigned int v111;
  uint64_t v112;
  uint64_t v113;
  unsigned int v114;
  unsigned __int8 v115;
  unsigned int v116;
  unsigned int v117;
  BOOL v118;
  BOOL v119;
  unsigned int v120;
  float *v121;
  int *v122;
  float v123;
  uint64_t v124;
  float v125;
  int v126;
  int v127;
  unsigned int v128;
  float v129;
  float v130;
  float v131;
  float *v132;
  uint64_t v133;
  unsigned int v134;
  char *v135;
  unsigned int v136;
  char *v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  char *v141;
  float v142;
  float v143;
  float v144;
  char *v145;
  float v146;
  uint64_t v147;
  int v148;
  float v149;
  float v150;
  BOOL v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  char *v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  char *v159;
  float v160;
  float v161;
  unsigned int *v162;
  uint64_t v163;
  unsigned int v164;
  float *v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  char v169;
  float v170;
  float *v171;
  float v172;
  float v173;
  uint64_t v174;
  uint64_t v175;
  _DWORD *v176;
  _BYTE *v177;
  _BYTE *v178;
  _DWORD *v179;
  uint64_t v180;
  int v182;
  unsigned __int8 *v183;
  uint64_t v184;
  int v185;
  int v186;
  BOOL v187;
  char *v188;
  uint64_t v189;
  BOOL v190;
  unsigned __int8 *v191;
  int v192;
  float v193;
  float v194;
  float *v195;
  float v196;
  float v197;
  float v198;
  float v199;
  float v200;
  float v201;
  float v202;
  float v203;
  float v204;
  float v205;
  _DWORD *v206;
  int *v207;
  uint64_t v208;
  char v209;
  int v210;
  uint64_t v211;
  float v212;
  int v213;
  char *v214;
  int v215;
  uint64_t v216;
  float *v218;
  uint64_t v219;
  uint64_t v220;
  float *v221;
  _DWORD *v222;
  uint64_t v223;
  unint64_t v224;
  char v225;
  char *v226;
  const AudioBufferList **v227;
  const AudioBufferList *v228;
  uint64_t v229;
  AudioBufferList *v230;
  char *v231;
  float *mData;
  const float *v233;
  const AudioBufferList **v234;
  AudioBufferList **v235;
  _BYTE *v236;
  int v237;
  uint64_t v238;
  float *v239;
  float v240;
  float v241;
  float v242;
  uint64_t v243;
  _DWORD *v244;
  float v245;
  float v246;
  float v247;
  float v248;
  int v249;
  int v250;
  unsigned int v251;
  float v252;
  uint64_t v253;
  float *v254;
  float *v255;
  float v256;
  float v257;
  float v258;
  float v259;
  float v260;
  float v261;
  float v262;
  unint64_t v263;
  unint64_t j;
  AudioBufferList *v265;
  _QWORD **v266;
  _QWORD **v267;
  uint64_t v268;
  ausdk::AUElement *v269;
  ausdk::AUElement **v270;
  uint64_t v271;
  ausdk::AUElement *v272;
  ausdk::AUElement **v273;
  uint64_t v274;
  ausdk::AUElement *v275;
  ausdk::AUElement **v276;
  uint64_t v277;
  ausdk::AUElement *v278;
  ausdk::AUElement **v279;
  uint64_t v280;
  ausdk::AUElement *v281;
  ausdk::AUElement **v282;
  float v283;
  uint64_t v284;
  ausdk::AUElement *v285;
  ausdk::AUElement **v286;
  uint64_t v287;
  ausdk::AUElement *v288;
  ausdk::AUElement **v289;
  unint64_t v290;
  float *v291;
  uint64_t v292;
  ausdk::AUElement *v293;
  uint64_t v294;
  float v295;
  uint64_t v296;
  ausdk::AUElement *v297;
  uint64_t v298;
  ausdk::AUElement *v299;
  uint64_t v300;
  uint64_t v301;
  ausdk::AUElement *v302;
  uint64_t v303;
  float *v304;
  uint64_t v305;
  uint64_t v306;
  uint64_t v307;
  uint64_t v308;
  ausdk::AUElement *v309;
  uint64_t v310;
  uint64_t v311;
  ausdk::AUElement *v312;
  uint64_t v313;
  uint64_t v314;
  ausdk::AUElement *v315;
  uint64_t v316;
  uint64_t v317;
  unsigned int *v318;
  int *v319;
  _DWORD *v320;
  int v321;
  unint64_t v322;
  unsigned int v323;
  uint64_t v324;
  ausdk::AUElement *v325;
  uint64_t v326;
  uint64_t v327;
  float v328;
  uint64_t v329;
  float *v330;
  float *v331;
  float v332;
  float v333;
  float v334;
  uint64_t v335;
  float *v336;
  uint64_t v337;
  float v338;
  float v339;
  float v340;
  float *v341;
  unsigned __int8 *v342;
  int v343;
  uint64_t v344;
  char *v345;
  float v346;
  uint64_t v347;
  uint64_t v348;
  float *v349;
  float v350;
  float *v351;
  float v352;
  int v353;
  char v354;
  float *v355;
  float *v356;
  int *v357;
  _DWORD *v358;
  uint64_t v359;
  float v361;
  int v362;
  int v363;
  uint64_t v364;
  uint64_t v365;
  unint64_t v366;
  __int128 *v367;
  _QWORD **v368;
  uint64_t v369;
  uint64_t v370;
  unint64_t v371;
  __int128 *v372;
  _QWORD **v373;
  float v374;
  float v375;
  float v376;
  BOOL v377;
  AudioBufferList **v378;
  AudioBufferList **v379;
  unsigned int v380;
  unsigned int v381;
  const AudioBufferList **v382;
  const AudioBufferList **v383;
  uint64_t __Na;
  vDSP_Length __Nc[2];
  float __Nb;
  float __C;
  unsigned __int8 v388;
  int v389;
  unsigned __int8 v390;
  uint8_t buf[16];

  v9 = __N;
  __C = 0.0;
  v11 = *((_QWORD *)this + 69);
  if (*((_QWORD *)this + 70) != v11)
  {
    AUFTSpatialAC::UpdateGlobalVariableState(this);
    *((_QWORD *)this + 70) = v11;
    *((_QWORD *)this + 72) = *((_QWORD *)this + 71);
    *((_BYTE *)this + 752) = 1;
    v13 = *((_QWORD *)this + 73);
    if (*((_QWORD *)this + 74) == v13)
    {
LABEL_79:
      AUFTSpatialAC::MakeDependentPositionData((float32x2_t *)this);
      goto LABEL_80;
    }
    goto LABEL_8;
  }
  v12 = *((_QWORD *)this + 71);
  if (*((_QWORD *)this + 72) != v12)
  {
    AUFTSpatialAC::UpdateGlobalMetaVariableState(this);
    *((_QWORD *)this + 72) = v12;
    *((_BYTE *)this + 752) = 1;
    v13 = *((_QWORD *)this + 73);
    if (*((_QWORD *)this + 74) == v13)
      goto LABEL_9;
    goto LABEL_8;
  }
  v13 = *((_QWORD *)this + 73);
  if (*((_QWORD *)this + 74) != v13)
  {
LABEL_8:
    AUFTSpatialAC::UpdateInputVariableState(this);
    *(_OWORD *)((char *)this + 600) = 0u;
    *(_OWORD *)((char *)this + 616) = 0u;
    *((_QWORD *)this + 74) = v13;
    *((_BYTE *)this + 752) = 1;
LABEL_9:
    buf[0] = 0;
    v390 = 0;
    LOBYTE(v389) = 0;
    v388 = 0;
    v14 = 0.0;
    v15 = *((unsigned int *)this + 159);
    v378 = a7;
    v380 = v9;
    v382 = a5;
    if (!(_DWORD)v15)
    {
LABEL_13:
      v18 = 0;
      v19 = 0;
      v20 = 0;
      v21 = 0;
      v22 = 0;
      v23 = 0;
      v24 = 0;
      v25 = 0.0;
LABEL_61:
      v42 = (uint64_t *)*((_QWORD *)this + 668);
      v43.__d_.__rep_ = std::chrono::system_clock::now().__d_.__rep_;
      v44 = v24 | 2;
      v377 = v23;
      v187 = !v23;
      v45 = v24;
      if (v187)
        v44 = v24;
      if (v19)
        v44 |= 4u;
      if (v18)
        v44 |= 8u;
      if ((_DWORD)v20)
        v44 |= 0x10u;
      if ((_DWORD)v21)
        v44 |= 0x20u;
      if ((_DWORD)v22)
        v46 = v44 | 0x40;
      else
        v46 = v44;
      if (v46)
      {
        v47 = v20;
        v48 = v21;
        rep = v43.__d_.__rep_;
        AU::FTSpatialAC::GetMessenger((AU::FTSpatialAC *)v43.__d_.__rep_);
        v50 = (std::__shared_weak_count *)v42[1];
        if (!v50 || (__Na = *v42, (v51 = std::__shared_weak_count::lock(v50)) == 0))
          std::__throw_bad_weak_ptr[abi:ne180100]();
        *(_QWORD *)&v52 = __Na;
        *((_QWORD *)&v52 + 1) = v51;
        *(_OWORD *)__Nc = v52;
        v53 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)*MEMORY[0x1E0DDB688] + 16))(*MEMORY[0x1E0DDB688], 112, 8);
        *(_DWORD *)(v53 + 16) = 0;
        *(_OWORD *)(v53 + 24) = *(_OWORD *)__Nc;
        *(float *)(v53 + 40) = v14;
        *(_BYTE *)(v53 + 44) = v45;
        *(float *)(v53 + 48) = v25;
        *(_BYTE *)(v53 + 52) = v377;
        *(_DWORD *)(v53 + 56) = *(_DWORD *)buf;
        *(_BYTE *)(v53 + 60) = v19;
        *(_DWORD *)(v53 + 64) = v389;
        *(_BYTE *)(v53 + 68) = v18;
        *(_QWORD *)(v53 + 72) = v47;
        *(_QWORD *)(v53 + 80) = v48;
        *(_QWORD *)(v53 + 88) = v22;
        *(_DWORD *)(v53 + 96) = v46;
        *(_QWORD *)(v53 + 104) = rep;
        *(_QWORD *)v53 = &off_1E69CB0C0;
        *(_QWORD *)(v53 + 8) = 0;
        caulk::concurrent::messenger::enqueue((caulk::concurrent::messenger *)&AU::FTSpatialAC::GetMessenger(void)::sMessenger, (caulk::concurrent::message *)v53);
      }
      a7 = v378;
      v9 = v380;
      a5 = v382;
      goto LABEL_79;
    }
    v16 = (unsigned __int8 *)this + 1040;
    while (1)
    {
      v17 = *v16;
      v16 += 44;
      if (v17)
        break;
      if (!--v15)
        goto LABEL_13;
    }
    v26 = *((_QWORD *)this + 9);
    if (v26)
    {
      v27 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v26 + 32))(v26, 0);
    }
    else
    {
      v28 = (ausdk::AUElement **)*((_QWORD *)this + 6);
      if (*((ausdk::AUElement ***)this + 7) == v28)
        v27 = 0;
      else
        v27 = *v28;
    }
    Parameter = ausdk::AUElement::GetParameter(v27, 0xD2u);
    v30 = *((_QWORD *)this + 9);
    if (v30)
    {
      v31 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v30 + 32))(v30, 0);
    }
    else
    {
      v32 = (ausdk::AUElement **)*((_QWORD *)this + 6);
      if (*((ausdk::AUElement ***)this + 7) == v32)
        v31 = 0;
      else
        v31 = *v32;
    }
    v33 = ausdk::AUElement::GetParameter(v31, 0xD3u);
    v24 = Parameter <= 0.0;
    if (Parameter > 0.0)
      v14 = 0.0;
    else
      v14 = Parameter;
    v23 = v33 <= 0.0;
    if (v33 > 0.0)
      v25 = 0.0;
    else
      v25 = v33;
    if ((*((_DWORD *)this + 230) & 0x80000000) != 0 && v33 > 0.0 && Parameter > 0.0)
    {
      v34 = *((_DWORD *)this + 200);
      if ((v34 - 1) > 1)
      {
        if ((v34 - 3) > 1 || v33 <= Parameter)
          goto LABEL_40;
        v35 = &v388;
        v36 = (uint8_t *)&v389;
        goto LABEL_39;
      }
      if (Parameter > v33)
      {
        v35 = &v390;
        v36 = buf;
LABEL_39:
        *(float *)v36 = v33 / Parameter;
        *v35 = 1;
      }
    }
LABEL_40:
    v37 = *((unsigned int *)this + 159);
    if ((_DWORD)v37)
    {
      v38 = 0;
      v20 = 0;
      v22 = 0;
      v21 = 0;
      v39 = Parameter <= 0.0;
      if (v33 <= 0.0)
        v39 = 1;
      v40 = (float *)((char *)this + 1052);
      do
      {
        if (*((_BYTE *)v40 - 12))
        {
          if (Parameter <= 0.0 || *(v40 - 1) <= Parameter)
          {
            v41 = 0;
          }
          else
          {
            if (v38 >= 0x20)
              goto LABEL_576;
            v41 = 1;
            v20 |= 1 << v38;
          }
          if (v33 > 0.0)
          {
            if (*v40 <= v33)
            {
              if (((v41 | v39) & 1) == 0)
              {
                if (v38 >= 0x20)
LABEL_576:
                  std::__throw_out_of_range[abi:ne180100]("bitset set argument out of range");
                v22 |= 1 << v38;
              }
            }
            else
            {
              if (v38 >= 0x20)
                goto LABEL_576;
              v21 |= 1 << v38;
            }
          }
        }
        ++v38;
        v40 += 11;
      }
      while (v37 != v38);
    }
    else
    {
      v21 = 0;
      v22 = 0;
      v20 = 0;
    }
    v19 = v390;
    v18 = v388;
    goto LABEL_61;
  }
LABEL_80:
  if (*((_DWORD *)this + 84) < v9)
    return 4294956422;
  if (*a5)
  {
    if ((*a5)->mNumberBuffers != 1)
    {
      if (AUFTSpatialAC::getAUSLog(void)::onceToken != -1)
        dispatch_once(&AUFTSpatialAC::getAUSLog(void)::onceToken, &__block_literal_global_13833);
      v55 = AUFTSpatialAC::getAUSLog(void)::gLog;
      if (!os_log_type_enabled((os_log_t)AUFTSpatialAC::getAUSLog(void)::gLog, OS_LOG_TYPE_ERROR))
        return 4294956428;
      *(_WORD *)buf = 0;
      v56 = "Input bus must be mono\n";
      goto LABEL_288;
    }
    v383 = a5;
    if (*a7)
    {
      if ((*a7)->mNumberBuffers != 1)
      {
        if (AUFTSpatialAC::getAUSLog(void)::onceToken != -1)
          dispatch_once(&AUFTSpatialAC::getAUSLog(void)::onceToken, &__block_literal_global_13833);
        v55 = AUFTSpatialAC::getAUSLog(void)::gLog;
        if (!os_log_type_enabled((os_log_t)AUFTSpatialAC::getAUSLog(void)::gLog, OS_LOG_TYPE_ERROR))
          return 4294956428;
        *(_WORD *)buf = 0;
        v56 = "Output bus must be mono\n";
LABEL_288:
        _os_log_error_impl(&dword_1B5ED0000, v55, OS_LOG_TYPE_ERROR, v56, buf, 2u);
        return 4294956428;
      }
    }
    else
    {
      if (AUFTSpatialAC::getAUSLog(void)::onceToken != -1)
        dispatch_once(&AUFTSpatialAC::getAUSLog(void)::onceToken, &__block_literal_global_13833);
      v58 = AUFTSpatialAC::getAUSLog(void)::gLog;
      if (os_log_type_enabled((os_log_t)AUFTSpatialAC::getAUSLog(void)::gLog, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)buf = 0;
        _os_log_error_impl(&dword_1B5ED0000, v58, OS_LOG_TYPE_ERROR, "At least one output bus, bus1, is need. It is a required output\n", buf, 2u);
      }
    }
    if (*((_BYTE *)this + 752))
    {
      v59 = *((unsigned int *)this + 194);
      for (i = *((unsigned int *)this + 158); v59 < i; ++v59)
      {
        v61 = a7[v59];
        if (v61)
        {
          vDSP_vfill((const float *)this + 161, (float *)v61->mBuffers[0].mData, 1, v9);
          i = *((unsigned int *)this + 158);
        }
      }
    }
    v62 = (char *)this + 2472;
    v63 = *((float *)this + 135);
    if (v63 == 0.0)
    {
      v65 = 50.0;
    }
    else
    {
      v64 = (float)v9;
      if ((float)v9 < 1.0)
        v64 = 1.0;
      v65 = v63 / v64;
    }
    *((float *)this + 1331) = v65;
    v381 = v9;
    if (*((_BYTE *)this + 544))
    {
      LODWORD(v66) = *((_DWORD *)this + 158);
      if ((_DWORD)v66)
      {
        v67 = (char *)this + 2488;
        v68 = *((unsigned int *)this + 158);
        do
        {
          *v67 = 0;
          v67 += 24;
          --v68;
        }
        while (v68);
      }
      v69 = *((unsigned int *)this + 159);
      if ((_DWORD)v69)
      {
        v70 = 0;
        v71 = 0;
        v72 = *((_DWORD *)this + 194);
        v73 = (char *)this + 1040;
        do
        {
          if (v71 >= v72)
            v71 = 0;
          *((_DWORD *)this + v70 + 1029) = v71;
          *((_DWORD *)v73 - 1) = v70;
          *v73 = 1;
          v73 += 44;
          *((_BYTE *)this + 24 * v71++ + 2488) = 1;
          ++v70;
        }
        while (v69 != v70);
      }
      if (v69 >= v66)
        v74 = v66;
      else
        v74 = v69;
      if ((_DWORD)v74)
      {
        do
        {
          v62[16] = 1;
          *(_OWORD *)v62 = xmmword_1B6629CD0;
          v62 += 24;
          --v74;
        }
        while (v74);
      }
      if (v66 > v69)
      {
        v75 = (char *)this + 24 * v69 + 2472;
        v76 = v66;
        do
        {
          v75[16] = 0;
          *(_OWORD *)v75 = xmmword_1B66A22C0;
          v75 += 24;
          --v76;
        }
        while ((_DWORD)v69 != v76);
      }
      goto LABEL_329;
    }
    if (*((float *)this + 223) == 0.0)
    {
      vDSP_vfill((const float *)this + 162, (float *)this + 1197, 1, 0x20uLL);
    }
    else if (*((_DWORD *)this + 159))
    {
      v77 = 0;
      v78 = 0;
      v79 = (char *)this + 4788;
      do
      {
        v80 = 0.0;
        v81 = 0.0;
        if (v79[v77 - 3748])
        {
          v82 = v383[v78];
          if (v82)
          {
            vDSP_svesq((const float *)v82->mBuffers[0].mData, 1, &__C, v9);
            v81 = powf(__C, *((float *)this + 223));
          }
        }
        __C = v81;
        if ((LODWORD(v81) & 0x7FFFFFFFu) <= 0x7F7FFFFF)
          v80 = (float)(v81 * 0.4) + (float)(*(float *)&v79[4 * v78] * 0.6);
        *(float *)&v79[4 * v78++] = v80;
        v77 += 44;
      }
      while (v78 < *((unsigned int *)this + 159));
    }
    if (*((_BYTE *)this + 760))
    {
      if (*((_BYTE *)this + 752))
      {
        v83 = *((unsigned int *)this + 211);
        if ((_DWORD)v83)
        {
          v84 = *((float *)this + 250) / (float)v83;
          v85 = (_DWORD *)((char *)this + 4116);
          v86 = (float *)((char *)this + 1040);
          v87 = v84 * 0.5;
          v88 = *((unsigned int *)this + 211);
          do
          {
            *(_WORD *)v86 = 257;
            *((_BYTE *)v86 + 32) = 1;
            *((_BYTE *)v86 + 2) = 1;
            v86[2] = v87;
            v87 = v84 + v87;
            v86[3] = 0.0;
            v86[4] = 0.0;
            v86 += 11;
            *v85++ = 32;
            --v88;
          }
          while (v88);
        }
        v89 = *((unsigned int *)this + 159);
        if (v83 < v89)
        {
          v90 = v89 - v83;
          v91 = (_DWORD *)((char *)this + 4 * v83 + 4116);
          v92 = (char *)this + 44 * v83 + 1040;
          do
          {
            *(_WORD *)v92 = 0;
            v92[32] = 0;
            v92[2] = 0;
            *((_QWORD *)v92 + 1) = 0;
            *((_DWORD *)v92 + 4) = 0;
            v92 += 44;
            *v91++ = 32;
            --v90;
          }
          while (v90);
        }
      }
      *((_BYTE *)this + 752) = 0;
    }
    v93 = *((unsigned int *)this + 158);
    if ((_DWORD)v93)
    {
      v94 = (char *)this + 2488;
      v95 = (_DWORD *)((char *)this + 3464);
      do
      {
        *(v95 - 32) = 0;
        *v95++ = 0;
        *v94 = 0;
        v94 += 24;
        --v93;
      }
      while (v93);
    }
    v69 = *((unsigned int *)this + 159);
    if ((_DWORD)v69)
    {
      v96 = (char *)this + 4372;
      v97 = (_DWORD *)((char *)this + 4660);
      v98 = *((unsigned int *)this + 159);
      do
      {
        *(v97 - 64) = 32;
        *(v97 - 32) = 32;
        *v97++ = 32;
        *v96++ = 0;
        --v98;
      }
      while (v98);
      v99 = 0;
      *((_DWORD *)this + 1026) = 0;
      v100 = (_DWORD *)((char *)this + 4116);
      v101 = (unsigned __int8 *)this + 1040;
      v102 = v69;
      do
      {
        v103 = *v101;
        v101 += 44;
        if (v103)
          *((_DWORD *)this + 1026) = ++v99;
        else
          *v100 = 32;
        ++v100;
        --v102;
      }
      while (v102);
      v104 = 0;
      v105 = 0;
      v106 = 0;
      v107 = 0;
      v108 = (char *)this + 4372;
      do
      {
        if (*((_BYTE *)this + v104 + 1040) && *((_BYTE *)this + v104 + 1072))
        {
          *((_DWORD *)this + v102 + 1101) = v105;
          LODWORD(v102) = v102 + 1;
          v109 = *(unsigned int *)&v108[4 * v105 - 256];
          if (v109 >= *((_DWORD *)this + 191))
          {
            *((_DWORD *)this + v106++ + 1133) = v105;
          }
          else
          {
            v108[v105] = 1;
            ++*((_DWORD *)this + v109 + 834);
            *((_DWORD *)this + v107++ + 1165) = v105;
          }
        }
        ++v105;
        v104 += 44;
      }
      while (v69 != v105);
    }
    else
    {
      v107 = 0;
      v106 = 0;
      *((_DWORD *)this + 1026) = 0;
    }
    v110 = *((unsigned int *)this + 191);
    v111 = 0;
    v112 = (v110 - 1);
    if ((int)v110 - 1 >= 0)
    {
      do
      {
        if (!*((_DWORD *)this + v112 + 834))
          *((_DWORD *)this + v111++ + 866) = v112;
        v151 = v112-- <= 0;
      }
      while (!v151);
      if (!v106 && v111)
      {
        if ((_DWORD)v110)
        {
          v113 = 0;
          v114 = 0;
          v115 = 0;
          v116 = 0;
          do
          {
            v117 = *((_DWORD *)this + v113 + 834);
            v118 = v117 >= v116;
            v119 = v117 >= v116;
            if (v117 > v116)
              v116 = *((_DWORD *)this + v113 + 834);
            v115 |= v119;
            if (v118)
              v114 = v113;
            ++v113;
          }
          while (v110 != v113);
          if (((v116 > 1) & v115) != 0)
          {
            if (!(_DWORD)v69)
              goto LABEL_248;
            v120 = 0;
            v121 = (float *)((char *)this + 1052);
            v122 = (int *)((char *)this + 4116);
            v123 = 0.0;
            v124 = v69;
            v125 = 0.0;
            do
            {
              v126 = *v122++;
              if (v126 == v114)
              {
                v125 = v125 + *(v121 - 1);
                v123 = v123 + *v121;
                ++v120;
              }
              v121 += 11;
              --v124;
            }
            while (v124);
            v127 = 0;
            v128 = 0;
            v129 = 1.0 / (float)v120;
            v130 = v125 * v129;
            v131 = v123 * v129;
            v132 = (float *)((char *)this + 1052);
            do
            {
              if (*((_BYTE *)v132 - 12) && *((_DWORD *)this + v124 + 1029) == v114)
              {
                if (((float)((float)((float)(v131 - *v132) * (float)(v131 - *v132))
                            + (float)((float)(v130 - *(v132 - 1)) * (float)(v130 - *(v132 - 1)))) >= -1.0) | (v127 ^ 1) & 1)
                  v128 = v124;
                v127 |= ((float)((float)((float)(v131 - *v132) * (float)(v131 - *v132))
                               + (float)((float)(v130 - *(v132 - 1)) * (float)(v130 - *(v132 - 1)))) >= -1.0) | v127 ^ 1;
              }
              ++v124;
              v132 += 11;
            }
            while (v69 != v124);
            if ((v127 & 1) != 0)
            {
              v133 = *((unsigned int *)this + v111 + 865);
              *((_DWORD *)this + v128 + 1029) = v133;
              ++*((_DWORD *)this + v133 + 834);
              --*((_DWORD *)this + v114 + 834);
            }
          }
        }
LABEL_242:
        if ((_DWORD)v69)
        {
          v174 = *((unsigned int *)this + 193);
          v175 = v69;
          v176 = (_DWORD *)((char *)this + 4116);
          v177 = (char *)this + 1072;
          do
          {
            if (*(v177 - 32) && !*v177)
            {
              *v176 = v174;
              ++*((_DWORD *)this + v174 + 834);
            }
            ++v176;
            v177 += 44;
            --v175;
          }
          while (v175);
        }
LABEL_248:
        v66 = *((unsigned int *)this + 158);
        if ((_DWORD)v66)
        {
          v178 = (char *)this + 2488;
          v179 = (_DWORD *)((char *)this + 3336);
          v180 = *((unsigned int *)this + 158);
          do
          {
            if (*v179++)
              *v178 = 1;
            v178 += 24;
            --v180;
          }
          while (v180);
          v182 = 0;
          *((_DWORD *)this + 1027) = 0;
          v183 = (unsigned __int8 *)this + 2488;
          v184 = v66;
          do
          {
            v185 = *v183;
            v183 += 24;
            if (v185)
              *((_DWORD *)this + 1027) = ++v182;
            --v184;
          }
          while (v184);
        }
        else
        {
          v182 = 0;
          *((_DWORD *)this + 1027) = 0;
        }
        v186 = *((_DWORD *)this + 1026);
        v187 = v186 == 1 || v182 == 1;
        if (v187)
        {
          *((_DWORD *)this + 256) = *((_DWORD *)this + 224);
          v188 = (char *)this + 900;
        }
        else
        {
          *((_DWORD *)this + 256) = *((_DWORD *)this + 226);
          v188 = (char *)this + 908;
        }
        *((_DWORD *)this + 257) = *(_DWORD *)v188;
        if ((_DWORD)v69)
        {
          v189 = 0;
          v190 = 0;
          v191 = (unsigned __int8 *)this + 1040;
          do
          {
            v192 = *v191;
            v191 += 44;
            if (v192 && ((*((_QWORD *)this + 123) >> v189) & 1) != 0)
              break;
            v190 = ++v189 >= (unint64_t)v69;
          }
          while (v69 != v189);
        }
        else
        {
          v190 = 1;
        }
        *((_BYTE *)this + 4112) = 0;
        if (*((_BYTE *)this + 783)
          && (*((_BYTE *)this + 784) == 0 || !v190)
          && (*((_BYTE *)this + 4112) = 1, v186 == 1))
        {
          v193 = *((float *)this + 235);
          *((float *)this + 1325) = v193;
          v194 = *((float *)this + 236);
          *((float *)this + 1326) = v194;
          v195 = (float *)((char *)this + 948);
        }
        else
        {
          v193 = *((float *)this + 221);
          *((float *)this + 1325) = v193;
          v194 = *((float *)this + 222);
          *((float *)this + 1326) = v194;
          v195 = (float *)((char *)this + 952);
        }
        v196 = *v195;
        *((float *)this + 1327) = *v195;
        if (!*((_BYTE *)this + 785))
        {
          *((float *)this + 1328) = v193;
          *((float *)this + 1329) = v194;
          *((float *)this + 1330) = v196;
          goto LABEL_307;
        }
        v197 = *((float *)this + 1330);
        if (v197 >= v196)
        {
          if (v197 <= v196)
          {
            v196 = *((float *)this + 1330);
LABEL_290:
            v200 = *((float *)this + 1328);
            if (v200 >= v193)
            {
              if (v200 <= v193)
              {
                v193 = *((float *)this + 1328);
LABEL_299:
                v203 = *((float *)this + 1329);
                if (v203 >= v194)
                {
                  if (v203 <= v194)
                    goto LABEL_307;
                  v205 = v203 - *((float *)this + 1333);
                  if (v205 > v194)
                    v194 = v205;
                }
                else
                {
                  v204 = v203 + *((float *)this + 1333);
                  if (v204 < v194)
                    v194 = v204;
                }
                *((float *)this + 1329) = v194;
LABEL_307:
                if (!*((_DWORD *)this + 189)
                  || *((_BYTE *)this + 781) && v186 == 1
                  || *((_BYTE *)this + 782) && v182 == 1)
                {
                  if ((_DWORD)v66)
                  {
                    v206 = (_DWORD *)((char *)this + 2492);
                    v207 = (int *)((char *)this + 3336);
                    v208 = v66;
                    do
                    {
                      v210 = *v207++;
                      v209 = v210;
                      if (v210)
                      {
                        v211 = *(_QWORD *)((char *)this + 828);
                        v209 = 1;
                        v212 = v193;
                        v213 = LODWORD(v196);
                        v214 = (char *)this + 5316;
                      }
                      else
                      {
                        v212 = 1.0;
                        v211 = 0;
                        v213 = -1024458752;
                        v214 = (char *)this + 888;
                      }
                      *((_BYTE *)v206 - 4) = v209;
                      *(_QWORD *)(v206 - 5) = v211;
                      *((float *)v206 - 3) = v212;
                      *(v206 - 2) = v213;
                      *v206 = *(_DWORD *)v214;
                      v206 += 6;
                      --v208;
                    }
                    while (v208);
                  }
                  goto LABEL_318;
                }
                AUFTSpatialAC::SetRenderTuningValsToUse((uint64_t)this);
                v237 = *((_DWORD *)this + 189);
                v238 = *((unsigned int *)this + 159);
                if ((_DWORD)v238)
                {
                  v239 = (float *)((char *)this + 1064);
                  do
                  {
                    v240 = *(v239 - 1);
                    v241 = 1.0;
                    if (v240 > 1.0 || (v241 = 0.0, v240 < 0.0))
                      *(v239 - 1) = v241;
                    v242 = 1.0;
                    if (*v239 > 1.0 || (v242 = 0.0, *v239 < 0.0))
                      *v239 = v242;
                    v239 += 11;
                    --v238;
                  }
                  while (v238);
                }
                v243 = *((unsigned int *)this + 158);
                if ((_DWORD)v243)
                {
                  v244 = (_DWORD *)((char *)this + 3336);
                  do
                  {
                    *v244 = 0;
                    v244[64] = 0;
                    v244[96] = 0;
                    ++v244;
                    --v243;
                  }
                  while (v243);
                }
                vDSP_vfill((const float *)this + 161, (float *)this + 994, 1, *((unsigned int *)this + 194));
                v245 = *((float *)this + 819);
                v246 = *((float *)this + 818);
                v247 = *((float *)this + 821);
                v248 = *((float *)this + 820);
                v249 = *((_DWORD *)this + 233);
                v250 = *((unsigned __int8 *)this + 936);
                v251 = (v249 - 1) & 0xFFFFFFFD;
                if (v237 == 1)
                {
                  v69 = *((unsigned int *)this + 159);
                  if ((_DWORD)v69)
                  {
                    v329 = 0;
                    v330 = (float *)((char *)this + 5044);
                    v331 = (float *)((char *)this + 1064);
                    do
                    {
                      if (v249 && (v250 || !v251 && (*((_QWORD *)this + 122) & (1 << v329)) != 0))
                      {
                        *v330 = 0.0;
                        v332 = 0.0;
                      }
                      else
                      {
                        v333 = *(v331 - 1);
                        if (v333 < 0.0)
                          v333 = 0.0;
                        if (v333 > 1.0)
                          v333 = 1.0;
                        *v330 = v246 + (float)(v333 * (float)(v245 - v246));
                        v334 = 1.0 - *v331;
                        if (v334 < 0.0)
                          v334 = 0.0;
                        if (v334 > 1.0)
                          v334 = 1.0;
                        v332 = v248 + (float)(v334 * (float)(v247 - v248));
                      }
                      v330[32] = v332;
                      ++v329;
                      ++v330;
                      v331 += 11;
                    }
                    while (v69 != v329);
                    goto LABEL_534;
                  }
                }
                else
                {
                  if (v237 != 2)
                  {
                    LODWORD(v69) = *((_DWORD *)this + 159);
LABEL_534:
                    if ((_DWORD)v69)
                    {
                      v335 = v69;
                      v336 = (float *)((char *)this + 5172);
                      v337 = v69;
                      do
                      {
                        v338 = *(v336 - 32);
                        v339 = v245;
                        if (v338 > v245 || (v339 = v246, v338 < v246))
                          *(v336 - 32) = v339;
                        v340 = v247;
                        if (*v336 > v247 || (v340 = v248, *v336 < v248))
                          *v336 = v340;
                        ++v336;
                        --v337;
                      }
                      while (v337);
                      v341 = (float *)((char *)this + 4116);
                      v342 = (unsigned __int8 *)this + 1040;
                      do
                      {
                        v343 = *v342;
                        v342 += 44;
                        if (v343)
                        {
                          v344 = *(unsigned int *)v341;
                          if (v344 < *((_DWORD *)this + 194))
                          {
                            v345 = (char *)this + 4 * v344;
                            ++*((_DWORD *)v345 + 834);
                            v346 = v341[168] + 1.0e-20;
                            *((float *)v345 + 994) = *((float *)v345 + 994) + v346;
                            *((float *)v345 + 898) = *((float *)v345 + 898) + (float)(v346 * v341[232]);
                            *((float *)v345 + 930) = *((float *)v345 + 930) + (float)(v346 * v341[264]);
                          }
                        }
                        ++v341;
                        --v335;
                      }
                      while (v335);
                    }
                    goto LABEL_548;
                  }
                  __Nb = *((float *)this + 822);
                  v252 = *((float *)this + 206);
                  v376 = atanf((float)(__Nb * 0.5) / v252);
                  v375 = *((float *)this + 823);
                  v374 = atanf((float)(v375 * 0.5) / v252);
                  v69 = *((unsigned int *)this + 159);
                  if ((_DWORD)v69)
                  {
                    v253 = 0;
                    v254 = (float *)((char *)this + 5044);
                    v255 = (float *)((char *)this + 1064);
                    do
                    {
                      if (v249 && (v250 || !v251 && (*((_QWORD *)this + 122) & (1 << v253)) != 0))
                      {
                        *v254 = 0.0;
                        v256 = 0.0;
                      }
                      else
                      {
                        v257 = *(v255 - 1);
                        if (v257 < 0.0)
                          v257 = 0.0;
                        if (v257 <= 1.0)
                          v258 = v257 + -0.5;
                        else
                          v258 = 0.5;
                        v259 = (float)((float)(v376 + atanf((float)(__Nb * v258) / v252)) * 0.5) / v376;
                        if (v259 < 0.0)
                          v259 = 0.0;
                        if (v259 > 1.0)
                          v259 = 1.0;
                        *v254 = v246 + (float)(v259 * (float)(v245 - v246));
                        v260 = 1.0 - *v255;
                        if (v260 < 0.0)
                          v260 = 0.0;
                        if (v260 <= 1.0)
                          v261 = v260 + -0.5;
                        else
                          v261 = 0.5;
                        v262 = (float)((float)(v374 + atanf((float)(v375 * v261) / v252)) * 0.5) / v374;
                        if (v262 < 0.0)
                          v262 = 0.0;
                        if (v262 > 1.0)
                          v262 = 1.0;
                        v256 = v248 + (float)(v262 * (float)(v247 - v248));
                      }
                      v254[32] = v256;
                      ++v253;
                      ++v254;
                      v255 += 11;
                    }
                    while (v69 != v253);
                    goto LABEL_534;
                  }
                }
LABEL_548:
                v66 = *((unsigned int *)this + 158);
                if ((_DWORD)v66)
                {
                  v347 = 0;
                  v348 = 0;
                  do
                  {
                    v349 = (float *)((char *)this + v347);
                    if (*(_DWORD *)((char *)this + v347 + 3336))
                    {
                      v350 = 1.0 / v349[994];
                      v351 = (float *)((char *)this + v348);
                      v351[618] = *((float *)this + 207) + (float)((float)(v349[898] * v350) * *((float *)this + 824));
                      v351[619] = *((float *)this + 208) + (float)((float)(v350 * v349[930]) * *((float *)this + 825));
                      v352 = *((float *)this + 1328);
                      v353 = *((_DWORD *)this + 1330);
                      v354 = 1;
                      v355 = (float *)((char *)this + 5316);
                    }
                    else
                    {
                      v354 = 0;
                      *(_QWORD *)((char *)this + v348 + 2472) = 0;
                      v352 = 1.0;
                      v353 = -1024458752;
                      v355 = (float *)((char *)this + 888);
                    }
                    v356 = (float *)((char *)this + v348);
                    v356[620] = v352;
                    *((_DWORD *)v356 + 621) = v353;
                    *((_BYTE *)v356 + 2488) = v354;
                    v356[623] = *v355;
                    v348 += 24;
                    v347 += 4;
                  }
                  while (24 * v66 != v348);
                  v357 = (int *)((char *)this + 2476);
                  v358 = (_DWORD *)((char *)this + 3336);
                  v359 = v66;
                  do
                  {
                    if (*v358++)
                    {
                      v361 = *((float *)v357 - 1);
                      v362 = 1127481344;
                      if (v361 > 180.0 || (v362 = -1020002304, v361 < -180.0))
                        *(v357 - 1) = v362;
                      v363 = 1119092736;
                      if (*(float *)v357 > 90.0 || (v363 = -1028390912, *(float *)v357 < -90.0))
                        *v357 = v363;
                    }
                    v357 += 6;
                    --v359;
                  }
                  while (v359);
                }
LABEL_318:
                v215 = *((_DWORD *)this + 201);
                if (v215 <= 6)
                {
                  v216 = 1 << v215;
                  if ((*((_QWORD *)this + 120) & v216) != 0 && (_DWORD)v66 != 0)
                  {
                    v218 = (float *)((char *)this + 2472);
                    v219 = v66;
                    do
                    {
                      *v218 = -*v218;
                      v218 += 6;
                      --v219;
                    }
                    while (v219);
                  }
                  if ((*((_QWORD *)this + 121) & v216) != 0)
                  {
                    if (!(_DWORD)v66)
                    {
                      v222 = (_DWORD *)((char *)this + 632);
                      if ((_DWORD)v69)
                      {
LABEL_332:
                        v223 = 0;
                        v224 = 0;
                        v225 = 0;
                        v226 = (char *)this + 4116;
                        v227 = v383;
                        do
                        {
                          if (v226[v223 - 3076])
                          {
                            v228 = v227[v224];
                            if (v228)
                            {
                              v229 = *(unsigned int *)&v226[4 * v224];
                              if (v229 < *((_DWORD *)this + 194))
                              {
                                if (*((_BYTE *)this + 24 * v229 + 2488))
                                {
                                  v230 = a7[v229];
                                  if (v230)
                                  {
                                    v231 = (char *)this + v229;
                                    mData = (float *)v230->mBuffers[0].mData;
                                    v233 = (const float *)v228->mBuffers[0].mData;
                                    if (v231[3304])
                                    {
                                      v225 = 1;
                                      vDSP_vadd(mData, 1, v233, 1, (float *)v230->mBuffers[0].mData, 1, v381);
                                    }
                                    else
                                    {
                                      v234 = v227;
                                      v235 = a7;
                                      v236 = v231 + 3304;
                                      memcpy(mData, v233, v228->mBuffers[0].mDataByteSize);
                                      v225 = 1;
                                      *v236 = 1;
                                      a7 = v235;
                                      v227 = v234;
                                    }
                                  }
                                }
                              }
                            }
                          }
                          ++v224;
                          v223 += 44;
                        }
                        while (v224 < *((unsigned int *)this + 159));
LABEL_387:
                        v263 = *((unsigned int *)this + 194);
                        if ((_DWORD)v263)
                        {
                          for (j = 0; j < v263; ++j)
                          {
                            if (!*((_BYTE *)this + j + 3304))
                            {
                              v265 = a7[j];
                              if (v265)
                              {
                                vDSP_vfill((const float *)this + 161, (float *)v265->mBuffers[0].mData, 1, v381);
                                v263 = *((unsigned int *)this + 194);
                              }
                            }
                          }
                        }
                        if ((v225 & 1) == 0)
                          *((_BYTE *)this + 2488) = 1;
                        v266 = (_QWORD **)*((_QWORD *)this + 101);
                        if (v266)
                          AUFTSpatialAC::AURealTimeDebugLog<AUFTSpatialAC::AUFTOrientationParams,256ul>::Buffer::Write(*v266, (__int128 *)((char *)this + 792));
                        v267 = (_QWORD **)*((_QWORD *)this + 127);
                        if (v267)
                          AUFTSpatialAC::AURealTimeDebugLog<AUFTSpatialAC::AUFTWindowParams,256ul>::Buffer::Write(*v267, (__int128 *)this + 62);
                        v268 = *((_QWORD *)this + 9);
                        if (v268)
                        {
                          v269 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v268 + 32))(v268, 0);
                        }
                        else
                        {
                          v270 = (ausdk::AUElement **)*((_QWORD *)this + 6);
                          if (*((ausdk::AUElement ***)this + 7) == v270)
                            v269 = 0;
                          else
                            v269 = *v270;
                        }
                        ausdk::AUElement::SetParameter(v269, 0x190u, (float)*((unsigned int *)this + 256), 0);
                        v271 = *((_QWORD *)this + 9);
                        if (v271)
                        {
                          v272 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v271 + 32))(v271, 0);
                        }
                        else
                        {
                          v273 = (ausdk::AUElement **)*((_QWORD *)this + 6);
                          if (*((ausdk::AUElement ***)this + 7) == v273)
                            v272 = 0;
                          else
                            v272 = *v273;
                        }
                        ausdk::AUElement::SetParameter(v272, 0x191u, (float)*((unsigned int *)this + 257), 0);
                        v274 = *((_QWORD *)this + 9);
                        if (v274)
                        {
                          v275 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v274 + 32))(v274, 0);
                        }
                        else
                        {
                          v276 = (ausdk::AUElement **)*((_QWORD *)this + 6);
                          if (*((ausdk::AUElement ***)this + 7) == v276)
                            v275 = 0;
                          else
                            v275 = *v276;
                        }
                        ausdk::AUElement::SetParameter(v275, 0x192u, (float)*((unsigned int *)this + 200), 0);
                        v277 = *((_QWORD *)this + 9);
                        if (v277)
                        {
                          v278 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v277 + 32))(v277, 0);
                        }
                        else
                        {
                          v279 = (ausdk::AUElement **)*((_QWORD *)this + 6);
                          if (*((ausdk::AUElement ***)this + 7) == v279)
                            v278 = 0;
                          else
                            v278 = *v279;
                        }
                        ausdk::AUElement::SetParameter(v278, 0x193u, (float)*((unsigned int *)this + 1026), 0);
                        v280 = *((_QWORD *)this + 9);
                        if (v280)
                        {
                          v281 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v280 + 32))(v280, 0);
                        }
                        else
                        {
                          v282 = (ausdk::AUElement **)*((_QWORD *)this + 6);
                          if (*((ausdk::AUElement ***)this + 7) == v282)
                            v281 = 0;
                          else
                            v281 = *v282;
                        }
                        ausdk::AUElement::SetParameter(v281, 0x196u, (float)*((unsigned int *)this + 201), 0);
                        if (*((_BYTE *)this + 916))
                        {
                          if (*((_DWORD *)this + 1026) >= 2u)
                            v283 = 1.0;
                          else
                            v283 = 0.0;
                          v284 = *((_QWORD *)this + 9);
                          if (v284)
                          {
                            v285 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v284
                                                                                                  + 32))(v284, 0);
                          }
                          else
                          {
                            v286 = (ausdk::AUElement **)*((_QWORD *)this + 6);
                            if (*((ausdk::AUElement ***)this + 7) == v286)
                              v285 = 0;
                            else
                              v285 = *v286;
                          }
                          ausdk::AUElement::SetParameter(v285, 0x194u, v283, 0);
                          if (!*((_BYTE *)this + 917))
                            goto LABEL_444;
                        }
                        else
                        {
                          if (!*((_BYTE *)this + 917))
                          {
LABEL_444:
                            if (*v222)
                            {
                              v290 = 0;
                              v291 = (float *)((char *)this + 2472);
                              do
                              {
                                v292 = *((_QWORD *)this + 93);
                                if (v292)
                                {
                                  v293 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)v292 + 32))(v292, v290);
                                }
                                else
                                {
                                  v294 = *((_QWORD *)this + 90);
                                  if (v290 >= (*((_QWORD *)this + 91) - v294) >> 3)
                                    v293 = 0;
                                  else
                                    v293 = *(ausdk::AUElement **)(v294 + 8 * v290);
                                }
                                if (*((_BYTE *)v291 + 16))
                                  v295 = 1.0;
                                else
                                  v295 = 0.0;
                                ausdk::AUElement::SetParameter(v293, 0x325u, v295, 0);
                                if (*((_BYTE *)this + 918) && (*((_DWORD *)this + 200) - 1) <= 1)
                                {
                                  v296 = *((_QWORD *)this + 93);
                                  if (v296)
                                  {
                                    v297 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)v296 + 32))(v296, v290);
                                  }
                                  else
                                  {
                                    v305 = *((_QWORD *)this + 90);
                                    if (v290 >= (*((_QWORD *)this + 91) - v305) >> 3)
                                      v297 = 0;
                                    else
                                      v297 = *(ausdk::AUElement **)(v305 + 8 * v290);
                                  }
                                  ausdk::AUElement::SetParameter(v297, 0x320u, v291[1], 0);
                                  v306 = *((_QWORD *)this + 93);
                                  if (v306)
                                  {
                                    v302 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)v306 + 32))(v306, v290);
                                  }
                                  else
                                  {
                                    v307 = *((_QWORD *)this + 90);
                                    if (v290 >= (*((_QWORD *)this + 91) - v307) >> 3)
                                      v302 = 0;
                                    else
                                      v302 = *(ausdk::AUElement **)(v307 + 8 * v290);
                                  }
                                  v304 = v291;
                                }
                                else
                                {
                                  v298 = *((_QWORD *)this + 93);
                                  if (v298)
                                  {
                                    v299 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)v298 + 32))(v298, v290);
                                  }
                                  else
                                  {
                                    v300 = *((_QWORD *)this + 90);
                                    if (v290 >= (*((_QWORD *)this + 91) - v300) >> 3)
                                      v299 = 0;
                                    else
                                      v299 = *(ausdk::AUElement **)(v300 + 8 * v290);
                                  }
                                  ausdk::AUElement::SetParameter(v299, 0x320u, *v291, 0);
                                  v301 = *((_QWORD *)this + 93);
                                  if (v301)
                                  {
                                    v302 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)v301 + 32))(v301, v290);
                                  }
                                  else
                                  {
                                    v303 = *((_QWORD *)this + 90);
                                    if (v290 >= (*((_QWORD *)this + 91) - v303) >> 3)
                                      v302 = 0;
                                    else
                                      v302 = *(ausdk::AUElement **)(v303 + 8 * v290);
                                  }
                                  v304 = (float *)((char *)this + 24 * v290 + 2476);
                                }
                                ausdk::AUElement::SetParameter(v302, 0x321u, *v304, 0);
                                v308 = *((_QWORD *)this + 93);
                                if (v308)
                                {
                                  v309 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)v308 + 32))(v308, v290);
                                }
                                else
                                {
                                  v310 = *((_QWORD *)this + 90);
                                  if (v290 >= (*((_QWORD *)this + 91) - v310) >> 3)
                                    v309 = 0;
                                  else
                                    v309 = *(ausdk::AUElement **)(v310 + 8 * v290);
                                }
                                ausdk::AUElement::SetParameter(v309, 0x322u, v291[2], 0);
                                v311 = *((_QWORD *)this + 93);
                                if (v311)
                                {
                                  v312 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)v311 + 32))(v311, v290);
                                }
                                else
                                {
                                  v313 = *((_QWORD *)this + 90);
                                  if (v290 >= (*((_QWORD *)this + 91) - v313) >> 3)
                                    v312 = 0;
                                  else
                                    v312 = *(ausdk::AUElement **)(v313 + 8 * v290);
                                }
                                ausdk::AUElement::SetParameter(v312, 0x323u, v291[3], 0);
                                v314 = *((_QWORD *)this + 93);
                                if (v314)
                                {
                                  v315 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)v314 + 32))(v314, v290);
                                }
                                else
                                {
                                  v316 = *((_QWORD *)this + 90);
                                  if (v290 >= (*((_QWORD *)this + 91) - v316) >> 3)
                                    v315 = 0;
                                  else
                                    v315 = *(ausdk::AUElement **)(v316 + 8 * v290);
                                }
                                ausdk::AUElement::SetParameter(v315, 0x328u, v291[5], 0);
                                ++v290;
                                v291 += 6;
                              }
                              while (v290 < *v222);
                            }
                            if (*((_BYTE *)this + 3264))
                            {
                              v364 = *((_QWORD *)this + 406);
                              v365 = *((_QWORD *)this + 405);
                              if (v364 != v365)
                              {
                                v366 = 0;
                                v367 = (__int128 *)((char *)this + 2472);
                                do
                                {
                                  v368 = *(_QWORD ***)(v365 + 8 * v366);
                                  if (v368)
                                  {
                                    AUFTSpatialAC::AURealTimeDebugLog<AUFTSpatialAC::AUFTSpatAUOutStreamParams,256ul>::Buffer::Write(*v368, v367);
                                    v364 = *((_QWORD *)this + 406);
                                    v365 = *((_QWORD *)this + 405);
                                  }
                                  ++v366;
                                  v367 = (__int128 *)((char *)v367 + 24);
                                }
                                while (v366 < (v364 - v365) >> 3);
                              }
                            }
                            v317 = *((unsigned int *)this + 159);
                            if ((_DWORD)v317)
                            {
                              v318 = (unsigned int *)((char *)this + 1032);
                              v319 = (int *)((char *)this + 4116);
                              v320 = (_DWORD *)((char *)this + 1032);
                              do
                              {
                                v321 = *v319++;
                                *v320 = v321;
                                v320 += 11;
                                --v317;
                              }
                              while (v317);
                              v322 = 0;
                              do
                              {
                                v323 = *v318;
                                v324 = *((_QWORD *)this + 87);
                                if (*v318 >= *((_DWORD *)this + 194))
                                {
                                  if (v324)
                                  {
                                    v325 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)v324 + 32))(v324, v322);
                                  }
                                  else
                                  {
                                    v327 = *((_QWORD *)this + 84);
                                    if (v322 >= (*((_QWORD *)this + 85) - v327) >> 3)
                                      v325 = 0;
                                    else
                                      v325 = *(ausdk::AUElement **)(v327 + 8 * v322);
                                  }
                                  v328 = -1.0;
                                }
                                else
                                {
                                  if (v324)
                                  {
                                    v325 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)v324 + 32))(v324, v322);
                                    v323 = *v318;
                                  }
                                  else
                                  {
                                    v326 = *((_QWORD *)this + 84);
                                    if (v322 >= (*((_QWORD *)this + 85) - v326) >> 3)
                                      v325 = 0;
                                    else
                                      v325 = *(ausdk::AUElement **)(v326 + 8 * v322);
                                  }
                                  v328 = (float)v323;
                                }
                                ausdk::AUElement::SetParameter(v325, 0x258u, v328, 0);
                                ++v322;
                                v318 += 11;
                              }
                              while (v322 < *((unsigned int *)this + 159));
                            }
                            if (!*((_BYTE *)this + 2464))
                              return 0;
                            v369 = *((_QWORD *)this + 306);
                            v370 = *((_QWORD *)this + 305);
                            if (v369 == v370)
                              return 0;
                            v371 = 0;
                            v372 = (__int128 *)((char *)this + 1032);
                            do
                            {
                              v373 = *(_QWORD ***)(v370 + 8 * v371);
                              if (v373)
                              {
                                AUFTSpatialAC::AURealTimeDebugLog<AUFTSpatialAC::AUFTSpatAUInStreamParams,256ul>::Buffer::Write(*v373, v372);
                                v369 = *((_QWORD *)this + 306);
                                v370 = *((_QWORD *)this + 305);
                              }
                              result = 0;
                              ++v371;
                              v372 = (__int128 *)((char *)v372 + 44);
                            }
                            while (v371 < (v369 - v370) >> 3);
                            return result;
                          }
                          if (*((_DWORD *)this + 1026) >= 2u)
                            v283 = 1.0;
                          else
                            v283 = 0.0;
                        }
                        v287 = *((_QWORD *)this + 9);
                        if (v287)
                        {
                          v288 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v287 + 32))(v287, 0);
                        }
                        else
                        {
                          v289 = (ausdk::AUElement **)*((_QWORD *)this + 6);
                          if (*((ausdk::AUElement ***)this + 7) == v289)
                            v288 = 0;
                          else
                            v288 = *v289;
                        }
                        ausdk::AUElement::SetParameter(v288, 0x195u, v283, 0);
                        goto LABEL_444;
                      }
LABEL_386:
                      v225 = 0;
                      goto LABEL_387;
                    }
                    v220 = v66;
                    v221 = (float *)((char *)this + 2476);
                    do
                    {
                      *v221 = -*v221;
                      v221 += 6;
                      --v220;
                    }
                    while (v220);
                  }
                }
LABEL_329:
                v222 = (_DWORD *)((char *)this + 632);
                if ((_DWORD)v66)
                  bzero((char *)this + 3304, v66);
                if ((_DWORD)v69)
                  goto LABEL_332;
                goto LABEL_386;
              }
              v202 = v200 - *((float *)this + 1332);
              if (v202 > v193)
                v193 = v202;
            }
            else
            {
              v201 = v200 + *((float *)this + 1332);
              if (v201 < v193)
                v193 = v201;
            }
            *((float *)this + 1328) = v193;
            goto LABEL_299;
          }
          v199 = v197 - *((float *)this + 1334);
          if (v199 > v196)
            v196 = v199;
        }
        else
        {
          v198 = v197 + *((float *)this + 1334);
          if (v198 < v196)
            v196 = v198;
        }
        *((float *)this + 1330) = v196;
        goto LABEL_290;
      }
    }
    if (v111 >= v106)
      v134 = v106;
    else
      v134 = v111;
    if (v134)
    {
      v135 = (char *)this + 1032;
      v136 = v107 + v134;
      v137 = (char *)this + 4532;
      do
      {
        if (v106 >= 2 && v106 > v111 && v107)
        {
          v138 = 0;
          v139 = v107;
          do
          {
            v140 = 0;
            v141 = &v135[44 * *((unsigned int *)this + v138 + 1133)];
            v142 = *((float *)v141 + 4);
            v143 = *((float *)v141 + 5);
            v144 = 0.0;
            do
            {
              v145 = &v135[44 * *(unsigned int *)((char *)this + v140 + 4660)];
              v146 = (float)(v143 - *((float *)v145 + 5)) * (float)(v143 - *((float *)v145 + 5));
              if (!v140
                || (float)(v146 + (float)((float)(v142 - *((float *)v145 + 4)) * (float)(v142 - *((float *)v145 + 4)))) < v144)
              {
                v144 = v146 + (float)((float)(v142 - *((float *)v145 + 4)) * (float)(v142 - *((float *)v145 + 4)));
              }
              v140 += 4;
            }
            while (4 * v107 != v140);
            *((float *)this + v138++ + 1229) = v144;
          }
          while (v138 != v106);
          v147 = 0;
          v148 = 0;
          v149 = *((float *)this + 1229);
          do
          {
            v150 = *((float *)this + v147 + 1230);
            v151 = v150 <= v149;
            if (v150 > v149)
              v149 = *((float *)this + v147 + 1230);
            ++v147;
            if (!v151)
              v148 = v147;
          }
          while (v106 - 1 != v147);
          v152 = *(unsigned int *)&v137[4 * v148];
          *(_DWORD *)&v137[4 * v148] = *(_DWORD *)&v137[4 * --v106];
          *(_DWORD *)&v137[4 * v106] = v152;
        }
        else
        {
          --v106;
          v139 = v107;
          v152 = *((unsigned int *)this + v106 + 1133);
        }
        v153 = *((unsigned int *)this + --v111 + 866);
        *((_DWORD *)this + v152 + 1029) = v153;
        ++*((_DWORD *)this + v153 + 834);
        *((_DWORD *)this + v139 + 1165) = v152;
        ++v107;
      }
      while (v107 != v136);
      v107 = v136;
    }
    if (!v106)
      goto LABEL_242;
    v379 = a7;
    v154 = 0;
    v155 = (char *)this + 1032;
    v156 = v106;
    while (1)
    {
      v157 = v107;
      v158 = *((unsigned int *)this + v154 + 1133);
      if (*((_DWORD *)this + 191) != 1)
      {
        v159 = &v155[44 * v158];
        v160 = *((float *)v159 + 4);
        v161 = *((float *)v159 + 5);
        vDSP_vfill((const float *)this + 161, (float *)this + 962, 1, *((unsigned int *)this + 194));
        vDSP_vfill((const float *)this + 161, (float *)this + 994, 1, *((unsigned int *)this + 194));
        v162 = (unsigned int *)((char *)this + 4660);
        v163 = v157;
        if ((_DWORD)v157)
        {
          do
          {
            v164 = *v162++;
            v165 = (float *)((char *)this + 4 * *((unsigned int *)this + v164 + 1029));
            v165[962] = v165[962]
                      + (float)((float)((float)(v160 - *(float *)&v155[44 * v164 + 16])
                                      * (float)(v160 - *(float *)&v155[44 * v164 + 16]))
                              + (float)((float)(v161 - *(float *)&v155[44 * v164 + 20])
                                      * (float)(v161 - *(float *)&v155[44 * v164 + 20])));
            v165[994] = v165[994] + 1.0;
            --v163;
          }
          while (v163);
        }
        v166 = *((unsigned int *)this + 194);
        if ((_DWORD)v166)
          break;
      }
      v168 = 0;
LABEL_240:
      *((_DWORD *)this + v158 + 1029) = v168;
      ++*((_DWORD *)this + v168 + 834);
      *((_DWORD *)this + v157 + 1165) = v158;
      v107 = v157 + 1;
      if (++v154 == v156)
      {
        LODWORD(v69) = *((_DWORD *)this + 159);
        a7 = v379;
        goto LABEL_242;
      }
    }
    v167 = 0;
    v168 = 0;
    v169 = 0;
    v170 = 1.0e20;
    while (1)
    {
      v171 = (float *)((char *)this + 4 * v167);
      v172 = v171[994];
      if (v172 <= 0.0)
        goto LABEL_236;
      v173 = v171[962] / v172;
      if ((v169 & 1) != 0 && v173 >= v170)
        break;
      v168 = v167;
      v169 = 1;
LABEL_237:
      ++v167;
      v170 = v173;
      if (v166 == v167)
        goto LABEL_240;
    }
    v169 = 1;
LABEL_236:
    v173 = v170;
    goto LABEL_237;
  }
  if (AUFTSpatialAC::getAUSLog(void)::onceToken != -1)
    dispatch_once(&AUFTSpatialAC::getAUSLog(void)::onceToken, &__block_literal_global_13833);
  v57 = AUFTSpatialAC::getAUSLog(void)::gLog;
  if (os_log_type_enabled((os_log_t)AUFTSpatialAC::getAUSLog(void)::gLog, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)buf = 0;
    _os_log_error_impl(&dword_1B5ED0000, v57, OS_LOG_TYPE_ERROR, "At least one input bus, bus1, is need. It is a required input\n", buf, 2u);
  }
  return 4294956420;
}

uint64_t AUFTSpatialAC::Render(AUFTSpatialAC *this, unsigned int *a2, const AudioTimeStamp *a3, uint64_t a4)
{
  char v8;
  uint64_t v9;
  ausdk::AUScope *v10;
  uint64_t v11;
  uint64_t v12;
  ausdk::AUInputElement *Element;
  uint64_t result;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  ausdk::AUIOElement *v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t BufferList;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _OWORD v29[16];
  _OWORD v30[16];
  uint64_t v31;

  v8 = 0;
  v9 = 0;
  v31 = *MEMORY[0x1E0C80C00];
  v10 = (AUFTSpatialAC *)((char *)this + 80);
  while (1)
  {
    v11 = *((_QWORD *)this + 15);
    if (v11)
      LODWORD(v12) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 24))(v11);
    else
      v12 = (*((_QWORD *)this + 13) - *((_QWORD *)this + 12)) >> 3;
    if (v9 >= v12)
      break;
    if (ausdk::AUBase::HasInput(this, v9))
    {
      Element = (ausdk::AUInputElement *)ausdk::AUScope::SafeGetElement(v10, v9);
      result = ausdk::AUInputElement::PullInput(Element, a2, a3, v9, a4);
      if ((_DWORD)result)
        return result;
    }
    else
    {
      v8 = 1;
    }
    v9 = (v9 + 1);
  }
  v15 = 0;
  memset(v30, 0, sizeof(v30));
  do
  {
    v16 = *((_QWORD *)this + 21);
    if (v16)
      LODWORD(v17) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v16 + 24))(v16);
    else
      v17 = (*((_QWORD *)this + 19) - *((_QWORD *)this + 18)) >> 3;
    if (v15 >= v17)
    {
      v19 = 0;
    }
    else
    {
      v18 = (ausdk::AUIOElement *)ausdk::AUScope::SafeGetElement((AUFTSpatialAC *)((char *)this + 128), v15);
      v19 = ausdk::AUIOElement::PrepareBuffer(v18, a4);
    }
    *((_QWORD *)v30 + v15++) = v19;
  }
  while (v15 != 32);
  if ((v8 & 1) != 0)
    return 0;
  v20 = 0;
  memset(v29, 0, sizeof(v29));
  do
  {
    v21 = *((_QWORD *)this + 15);
    if (v21)
      LODWORD(v22) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v21 + 24))(v21);
    else
      v22 = (*((_QWORD *)this + 13) - *((_QWORD *)this + 12)) >> 3;
    if (v20 >= v22)
    {
      BufferList = 0;
    }
    else
    {
      v23 = ausdk::AUScope::SafeGetElement(v10, v20);
      BufferList = ausdk::AUBufferList::GetBufferList((ausdk::AUBufferList *)(v23 + 144));
    }
    *((_QWORD *)v29 + v20++) = BufferList;
  }
  while (v20 != 32);
  v25 = *((_QWORD *)this + 15);
  if (v25)
    v26 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v25 + 24))(v25);
  else
    v26 = (*((_QWORD *)this + 13) - *((_QWORD *)this + 12)) >> 3;
  v27 = *((_QWORD *)this + 21);
  if (v27)
    v28 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v27 + 24))(v27);
  else
    v28 = (*((_QWORD *)this + 19) - *((_QWORD *)this + 18)) >> 3;
  return (*(uint64_t (**)(AUFTSpatialAC *, unsigned int *, uint64_t, uint64_t, _OWORD *, uint64_t, _OWORD *))(*(_QWORD *)this + 184))(this, a2, a4, v26, v29, v28, v30);
}

BOOL AUFTSpatialAC::BusCountWritable(AUFTSpatialAC *this, int a2)
{
  return (a2 - 1) <= 1 && *((_BYTE *)this + 17) == 0;
}

uint64_t AUFTSpatialAC::SetBusCount(AUFTSpatialAC *this, int a2, unsigned int a3)
{
  unsigned int v3;
  int64x2_t *v4;
  uint64_t v5;

  v3 = a3 - 1;
  if (a2 == 1 && v3 <= 0x1F)
  {
    v4 = (int64x2_t *)((char *)this + 80);
LABEL_7:
    ausdk::AUScope::SetNumberOfElements(v4, a3);
    return 0;
  }
  v5 = 4294956445;
  if (a2 == 2 && v3 <= 0x1F)
  {
    v4 = (int64x2_t *)((char *)this + 128);
    goto LABEL_7;
  }
  return v5;
}

uint64_t AUFTSpatialAC::GetParameterList(AUFTSpatialAC *this, int a2, unsigned int *a3, unsigned int *a4)
{
  unsigned int v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t result;

  switch(a2)
  {
    case 0:
      if (!a3)
      {
        v4 = 62;
        goto LABEL_11;
      }
      *(_OWORD *)a3 = xmmword_1B6626920;
      *((_OWORD *)a3 + 1) = xmmword_1B66A0770;
      *((_OWORD *)a3 + 2) = xmmword_1B66A07D0;
      *((_OWORD *)a3 + 3) = xmmword_1B66A07E0;
      *((_OWORD *)a3 + 4) = xmmword_1B66A07F0;
      *((_OWORD *)a3 + 5) = xmmword_1B66A0800;
      *((_OWORD *)a3 + 6) = xmmword_1B66A1320;
      *((_OWORD *)a3 + 7) = xmmword_1B66A13B0;
      *((_OWORD *)a3 + 8) = xmmword_1B66A1FD0;
      *((_OWORD *)a3 + 9) = xmmword_1B66A1FE0;
      v4 = 62;
      v5 = 406;
      v6 = 405;
      v7 = 404;
      v8 = 403;
      v9 = 402;
      v10 = 401;
      v11 = 400;
      *((_OWORD *)a3 + 10) = xmmword_1B66A22E0;
      *((_OWORD *)a3 + 11) = xmmword_1B66A22F0;
      v12 = 213;
      v13 = 61;
      v14 = 60;
      v15 = 59;
      *((_OWORD *)a3 + 12) = xmmword_1B66A2300;
      v16 = 58;
      v17 = 57;
      v18 = 56;
      v19 = 55;
      v20 = 54;
      *((_QWORD *)a3 + 26) = 0xD4000000D3;
      goto LABEL_10;
    case 2:
      if (!a3)
      {
        v4 = 12;
        goto LABEL_11;
      }
      v4 = 12;
      v5 = 811;
      v6 = 810;
      *(_OWORD *)a3 = xmmword_1B66A22D0;
      v7 = 809;
      v8 = 808;
      v9 = 807;
      v10 = 806;
      v11 = 805;
      v12 = 804;
      v13 = 11;
      v14 = 10;
      v15 = 9;
      v16 = 8;
      v17 = 7;
      v18 = 6;
      v19 = 5;
      v20 = 4;
      goto LABEL_10;
    case 1:
      if (!a3)
      {
        v4 = 9;
        goto LABEL_11;
      }
      v4 = 9;
      *a3 = 600;
      v5 = 608;
      v6 = 607;
      v7 = 606;
      v8 = 605;
      v9 = 604;
      v10 = 603;
      v11 = 602;
      v12 = 601;
      v13 = 8;
      v14 = 7;
      v15 = 6;
      v16 = 5;
      v17 = 4;
      v18 = 3;
      v19 = 2;
      v20 = 1;
LABEL_10:
      a3[v20] = v12;
      a3[v19] = v11;
      a3[v18] = v10;
      a3[v17] = v9;
      a3[v16] = v8;
      a3[v15] = v7;
      a3[v14] = v6;
      a3[v13] = v5;
LABEL_11:
      result = 0;
      *a4 = v4;
      return result;
  }
  return 4294956430;
}

uint64_t AUFTSpatialAC::GetParameterInfo(AUFTSpatialAC *this, int a2, int a3, AudioUnitParameterInfo *buffer)
{
  AudioUnitParameterValue v5;
  int v6;
  AudioUnitParameterValue v7;
  const __CFString *v8;
  AudioUnitParameterUnit v9;
  AudioUnitParameterValue v10;
  int v11;
  int v12;
  uint64_t result;
  int v14;
  int v15;
  int v16;
  int v17;
  AudioUnitParameterOptions flags;

  buffer->flags = 0;
  buffer->unitName = 0;
  if (a2 != 2)
  {
    if (a2 != 1)
    {
      if (a2)
        return 4294956430;
      v5 = 0.0;
      v6 = -1072693248;
      v7 = 2.0;
      v8 = CFSTR("(GW) Mode AU is using the drive spatialization");
      v9 = kAudioUnitParameterUnit_Indexed;
      v10 = 2.0;
      switch(a3)
      {
        case 0:
          goto LABEL_86;
        case 1:
          v10 = 1.0;
          v9 = kAudioUnitParameterUnit_Boolean;
          v8 = CFSTR("(GW) (TEST ONLY, false for ship) Inject fake meta data");
          goto LABEL_82;
        case 2:
          v7 = 1.0;
          v8 = CFSTR("(GW) (TEST ONLY) num of users to inject fake meta data");
          goto LABEL_20;
        case 3:
          v10 = 1.0;
          v9 = kAudioUnitParameterUnit_Boolean;
          v8 = CFSTR("(GW) Go to neutral az and el if only one active input stream");
          goto LABEL_85;
        case 4:
          v10 = 1.0;
          v9 = kAudioUnitParameterUnit_Boolean;
          v8 = CFSTR("(GW) Go to neutral az and el if only one active output stream");
          goto LABEL_85;
        case 5:
          v7 = 6.0;
          v5 = 1.0;
          v8 = CFSTR("(GW) Max number of streams assigned to main canvas");
LABEL_20:
          v10 = 32.0;
          goto LABEL_86;
        case 6:
          v10 = 1.0;
          v8 = CFSTR("(GW) Max number of streams assigned to list/roster");
          goto LABEL_85;
        case 7:
          v10 = 1.0;
          v9 = kAudioUnitParameterUnit_Boolean;
          v8 = CFSTR("(GW) Enable pan to adapt to FT window aspect ratio");
          goto LABEL_85;
        case 8:
          v10 = 1.0;
          v9 = kAudioUnitParameterUnit_Boolean;
          v8 = CFSTR("(GW) Enable Azimuth panning when in portrait");
          goto LABEL_85;
        case 9:
          v10 = 1.0;
          v9 = kAudioUnitParameterUnit_Boolean;
          v8 = CFSTR("(GW) Enable Elevation panning when in landscape");
          goto LABEL_85;
        case 10:
          v9 = kAudioUnitParameterUnit_Generic;
          v7 = 0.0;
          v8 = CFSTR("(GW) Minimum azimuth for pan when in portrait");
          goto LABEL_29;
        case 11:
          v9 = kAudioUnitParameterUnit_Generic;
          v7 = 0.0;
          v8 = CFSTR("(GW) Maximum azimuth for pan when in portrait");
          goto LABEL_29;
        case 12:
          v9 = kAudioUnitParameterUnit_Generic;
          v7 = -15.0;
          v8 = CFSTR("(GW) Minimum azimuth for pan when in landscape");
          goto LABEL_29;
        case 13:
          v9 = kAudioUnitParameterUnit_Generic;
          v7 = 15.0;
          v8 = CFSTR("(GW) Maximum azimuth for pan when in landscape");
LABEL_29:
          v10 = 180.0;
          v14 = -1020002304;
          goto LABEL_67;
        case 14:
          v9 = kAudioUnitParameterUnit_Generic;
          v7 = -15.0;
          v8 = CFSTR("(GW) Minimum elevation for pan when in portrait");
          goto LABEL_66;
        case 15:
          v9 = kAudioUnitParameterUnit_Generic;
          v7 = 15.0;
          v8 = CFSTR("(GW) Maximum elevation for pan when in portrait");
          goto LABEL_66;
        case 16:
          v9 = kAudioUnitParameterUnit_Generic;
          v7 = 0.0;
          v8 = CFSTR("(GW) Minimum elevation for pan when in landscape");
          goto LABEL_66;
        case 17:
          v9 = kAudioUnitParameterUnit_Generic;
          v7 = 0.0;
          v8 = CFSTR("(GW) Maximum elevation for pan when in landscape");
LABEL_66:
          v10 = 90.0;
          v14 = -1028390912;
LABEL_67:
          v5 = *(float *)&v14;
          goto LABEL_86;
        case 18:
          v9 = kAudioUnitParameterUnit_Generic;
          v7 = 1.0;
          v10 = 10.0;
          v8 = CFSTR("(GW) Desired render distance (m)");
          goto LABEL_86;
        case 19:
          v9 = kAudioUnitParameterUnit_Generic;
          v7 = 20.0;
          v8 = CFSTR("(GW) Desired reverb-blend (shared with all users)");
          goto LABEL_55;
        case 20:
          v9 = kAudioUnitParameterUnit_Generic;
          v10 = 4.0;
          v8 = CFSTR("(GW) Exponent for energy values for (X,Y) weighting");
          goto LABEL_86;
        case 21:
          v10 = 1.0;
          v8 = CFSTR("(GW) Enable(true)/disable(false) single-user decorrelation, left channel");
          goto LABEL_82;
        case 22:
          v10 = 1.0;
          v8 = CFSTR("(GW) Enable(true)/disable(false) single-user decorrelation, right channel");
          goto LABEL_82;
        case 23:
          v10 = 1.0;
          v8 = CFSTR("(GW) Enable(true)/disable(false) multi-user decorrelation, left channel");
          goto LABEL_82;
        case 24:
          v10 = 1.0;
          v8 = CFSTR("(GW) Enable(true)/disable(false) multi-user decorrelation, right channel");
          goto LABEL_82;
        case 25:
          v7 = -1.0;
          v10 = 6.0;
          v5 = -2.0;
          v8 = CFSTR("(GW) Playback output orientation control (-1==use param 200, -2==use param 213)");
          goto LABEL_86;
        case 26:
          v10 = 1.0;
          v9 = kAudioUnitParameterUnit_Boolean;
          v8 = CFSTR("(GW) (true) Enable switching off 2nd EC ref in 1:1 FaceTime");
          goto LABEL_82;
        case 27:
          v10 = 1.0;
          v9 = kAudioUnitParameterUnit_Boolean;
          v8 = CFSTR("(GW) (true) Enable switching off 3rd EC ref in 1:1 FaceTime");
          goto LABEL_82;
        case 28:
          v6 = 1074790400;
          v10 = 1.0;
          v9 = kAudioUnitParameterUnit_Boolean;
          v8 = CFSTR("(GW) Fake portrait panning with landscape (some iPhones)");
          goto LABEL_82;
        case 29:
          v7 = -1.0;
          v10 = 6.0;
          v5 = -2.0;
          v8 = CFSTR("(GW) Screen orientation value used for panning control (-1==use param 200, -2==use param 213)");
          goto LABEL_86;
        case 30:
          v7 = 1.0;
          v10 = 3.0;
          v8 = CFSTR("(GW) Use prominence in canvas/grid assignments (0=no, 1=AND InCanvas, 2=OR InCanvas, 3=OnlyProm ");
          goto LABEL_86;
        case 31:
          v7 = 8.0;
          v8 = CFSTR("(GW) Max prominence value for a stream to be assigned to canvas/grid");
          v15 = 1148846080;
          goto LABEL_56;
        case 32:
          v10 = 3.0;
          v8 = CFSTR("(GW) Center client on missing meta:0:ignore, 1:Cx=Cy=0, 2=XorY=0, 3:Cx=Cy=0||(X==0)||(Y==0).");
          v7 = 3.0;
          goto LABEL_86;
        case 33:
          v10 = 1.0;
          v9 = kAudioUnitParameterUnit_Boolean;
          v8 = CFSTR("(GW) Use U+1 specific tuning values for gain, reverb and distance");
          goto LABEL_82;
        case 34:
          v10 = 1.0;
          v9 = kAudioUnitParameterUnit_Boolean;
          v8 = CFSTR("(GW) Use U+1 specific tuning only if Cx=Cy=0");
LABEL_82:
          v7 = 0.0;
          break;
        case 35:
          v10 = 1.0;
          v9 = kAudioUnitParameterUnit_Boolean;
          v8 = CFSTR("(GW) If using U+1 tuning, interpolate U++/U+1 in transitions");
LABEL_85:
          v7 = 1.0;
          break;
        case 36:
          v9 = kAudioUnitParameterUnit_Generic;
          v7 = 0.5;
          v10 = 5.0;
          v8 = CFSTR("(GW) Interpolation time in transitons (sec)");
          break;
        case 37:
          v9 = kAudioUnitParameterUnit_Generic;
          v7 = 1.0;
          v10 = 10.0;
          v8 = CFSTR("(GW) U+1 specific render distance (m)");
          break;
        case 38:
          v9 = kAudioUnitParameterUnit_Generic;
          v7 = 20.0;
          v8 = CFSTR("(GW) U+1 reverb-blend");
LABEL_55:
          v15 = 1120403456;
LABEL_56:
          v10 = *(float *)&v15;
          break;
        case 39:
          v9 = kAudioUnitParameterUnit_Generic;
          v7 = 0.0;
          v10 = 20.0;
          v5 = -20.0;
          v8 = CFSTR("(GW) U+1 specific gain (dB)");
          break;
        case 40:
          v9 = kAudioUnitParameterUnit_Generic;
          v7 = 0.0;
          v10 = 20.0;
          v5 = -20.0;
          v8 = CFSTR("(GW) U++ specific gain (dB)");
          break;
        default:
          switch(a3)
          {
            case 200:
              v7 = 1.0;
              v10 = 6.0;
              v9 = kAudioUnitParameterUnit_Indexed;
              v8 = CFSTR("(GW) Assumed orientation of device ");
              goto LABEL_86;
            case 201:
              v9 = kAudioUnitParameterUnit_Generic;
              v8 = CFSTR("(GW) Geo model screen width in cm landscape (cm)");
              v16 = 1107951616;
              goto LABEL_61;
            case 202:
              v9 = kAudioUnitParameterUnit_Generic;
              v8 = CFSTR("(GW) Geo model screen height in cm in landscape (cm)");
              v16 = 1101791232;
LABEL_61:
              v7 = *(float *)&v16;
              v17 = 1140457472;
              goto LABEL_63;
            case 203:
              v9 = kAudioUnitParameterUnit_Generic;
              v8 = CFSTR("(GW) Geo model user viewing distance from screen (cm)");
              v7 = 60.0;
              v17 = 1148846080;
LABEL_63:
              v10 = *(float *)&v17;
              v5 = 0.01;
              goto LABEL_86;
            case 204:
              v9 = kAudioUnitParameterUnit_Generic;
              v7 = 0.0;
              v8 = CFSTR("(GW) Rel az of eye->screen plane to speaker 0 deg az(deg)");
              goto LABEL_66;
            case 205:
              v9 = kAudioUnitParameterUnit_Generic;
              v7 = 0.0;
              v8 = CFSTR("(GW) Rel el of eye->screen plane to speaker 0 deg el(deg)");
              goto LABEL_66;
            case 206:
              v9 = kAudioUnitParameterUnit_Generic;
              v5 = 1.0;
              v8 = CFSTR("(GW) Device screen width in points ");
              v7 = 3450.0;
              goto LABEL_70;
            case 207:
              v9 = kAudioUnitParameterUnit_Generic;
              v5 = 1.0;
              v8 = CFSTR("(GW) Device screen height in points ");
              v7 = 2150.0;
LABEL_70:
              v10 = 10000.0;
              goto LABEL_86;
            case 208:
              v9 = kAudioUnitParameterUnit_Generic;
              v8 = CFSTR("(GW) FT window x-position in points (from top left corner)");
              goto LABEL_73;
            case 209:
              v9 = kAudioUnitParameterUnit_Generic;
              v8 = CFSTR("(GW) FT window y-position in points  (from top left corner)");
LABEL_73:
              v10 = 10000.0;
              goto LABEL_82;
            case 210:
              v9 = kAudioUnitParameterUnit_Generic;
              v8 = CFSTR("(GW) FT window width in points ");
              v7 = 345.0;
              goto LABEL_76;
            case 211:
              v9 = kAudioUnitParameterUnit_Generic;
              v8 = CFSTR("(GW) FT window height in points ");
              v7 = 215.0;
LABEL_76:
              v10 = 10000.0;
              v5 = 0.001;
              goto LABEL_86;
            case 212:
              v10 = 1.0;
              v9 = kAudioUnitParameterUnit_Boolean;
              v8 = CFSTR("(G) Voice activity");
              goto LABEL_82;
            case 213:
              v7 = 1.0;
              v10 = 6.0;
              v9 = kAudioUnitParameterUnit_Indexed;
              v8 = CFSTR("(GW) Assumed orientation of user interface ");
              goto LABEL_86;
            default:
              switch(a3)
              {
                case 400:
                  v9 = kAudioUnitParameterUnit_Generic;
                  v6 = 1074790400;
                  v10 = 1.0;
                  v8 = CFSTR("(GR) Control output for decorrelator, left channel");
                  goto LABEL_82;
                case 401:
                  v9 = kAudioUnitParameterUnit_Generic;
                  v6 = 1074790400;
                  v10 = 1.0;
                  v8 = CFSTR("(GR) Control output for decorrelator, right channel");
                  goto LABEL_82;
                case 402:
                  v9 = kAudioUnitParameterUnit_Generic;
                  v6 = 1074790400;
                  v7 = 1.0;
                  v10 = 6.0;
                  v8 = CFSTR("(GR) Monitor of internal screen orientation within controller");
                  goto LABEL_86;
                case 403:
                  v9 = kAudioUnitParameterUnit_Generic;
                  v6 = 1074790400;
                  v8 = CFSTR("(GR) Numer of active streams detected");
                  v10 = 33.0;
                  goto LABEL_82;
                case 404:
                  v6 = 1074790400;
                  v10 = 1.0;
                  v9 = kAudioUnitParameterUnit_Boolean;
                  v8 = CFSTR("(GR) Enable(true)/disable(false) the 2nd EC ref");
                  goto LABEL_85;
                case 405:
                  v6 = 1074790400;
                  v10 = 1.0;
                  v9 = kAudioUnitParameterUnit_Boolean;
                  v8 = CFSTR("(GR) Enable(true)/disable(false) the 3rd EC ref");
                  goto LABEL_85;
                case 406:
                  v9 = kAudioUnitParameterUnit_Generic;
                  v6 = 1074790400;
                  v7 = 1.0;
                  v10 = 6.0;
                  v8 = CFSTR("(GR) Monitor of internal audio render orientation within controller");
                  goto LABEL_86;
                default:
                  return 4294956418;
              }
          }
      }
      goto LABEL_86;
    }
    v12 = a3 - 600;
    if ((a3 - 600) < 9)
    {
      v8 = off_1E69DB160[v12];
      v9 = dword_1B666198C[v12];
      v5 = flt_1B66619B0[v12];
      v10 = flt_1B66619D4[v12];
      v7 = flt_1B66619F8[v12];
      v6 = dword_1B6661A1C[v12];
      goto LABEL_86;
    }
    return 4294956418;
  }
  v11 = a3 - 800;
  if ((a3 - 800) >= 0xC)
    return 4294956418;
  v8 = off_1E69DB1A8[v11];
  v9 = dword_1B6661A40[v11];
  v5 = flt_1B6661A70[v11];
  v10 = flt_1B6661AA0[v11];
  v7 = flt_1B6661AD0[v11];
  v6 = 1074790400;
LABEL_86:
  buffer->cfNameString = v8;
  buffer->flags = 0x8000000;
  CFStringGetCString(v8, buffer->name, 52, 0x8000100u);
  result = 0;
  buffer->clumpID = 0;
  flags = buffer->flags;
  buffer->unit = v9;
  buffer->minValue = v5;
  buffer->maxValue = v10;
  buffer->defaultValue = v7;
  buffer->flags = flags | v6;
  return result;
}

UInt8 *AUFTSpatialAC::SaveExtendedScopes(AUFTSpatialAC *this, __CFData *a2)
{
  ausdk::AUScope::SaveState((AUFTSpatialAC *)((char *)this + 80), a2);
  return ausdk::AUScope::SaveState((AUFTSpatialAC *)((char *)this + 128), a2);
}

__n128 AUFTSpatialAC::RestoreState(AUFTSpatialAC *this, const void *a2)
{
  __n128 result;

  if (!ausdk::AUBase::RestoreState((OpaqueAudioComponentInstance **)this, a2))
  {
    ++*((_QWORD *)this + 69);
    ++*((_QWORD *)this + 71);
    ++*((_QWORD *)this + 73);
    result.n128_u64[0] = 0x101010101010101;
    result.n128_u64[1] = 0x101010101010101;
    *(__n128 *)((char *)this + 600) = result;
    *(__n128 *)((char *)this + 616) = result;
  }
  return result;
}

uint64_t AUFTSpatialAC::GetParameterValueStrings(AUFTSpatialAC *this, int a2, int a3, const __CFArray **a4)
{
  uint64_t result;
  CFArrayRef CFArray;
  const __CFArray *v7;
  void **v8;
  uint64_t v9;
  void *values[34];

  result = 0;
  values[33] = *(void **)MEMORY[0x1E0C80C00];
  if (!a2 && a4)
  {
    result = 4294956417;
    if (a3 <= 20)
    {
      switch(a3)
      {
        case 0:
          *(_OWORD *)values = xmmword_1E69DAC18;
          values[2] = CFSTR("LinearMapByGeometry");
          CFArray = CFArrayCreate(0, (const void **)values, 3, 0);
          goto LABEL_17;
        case 2:
          memcpy(values, &off_1E69DAC30, 0x108uLL);
          CFArray = CFArrayCreate(0, (const void **)values, 33, 0);
          goto LABEL_17;
        case 5:
          *(_OWORD *)&values[24] = xmmword_1E69DAEA8;
          *(_OWORD *)&values[26] = *(_OWORD *)&off_1E69DAEB8;
          *(_OWORD *)&values[28] = xmmword_1E69DAEC8;
          *(_OWORD *)&values[30] = *(_OWORD *)&off_1E69DAED8;
          *(_OWORD *)&values[16] = xmmword_1E69DAE68;
          *(_OWORD *)&values[18] = *(_OWORD *)&off_1E69DAE78;
          *(_OWORD *)&values[20] = xmmword_1E69DAE88;
          *(_OWORD *)&values[22] = *(_OWORD *)&off_1E69DAE98;
          *(_OWORD *)&values[8] = xmmword_1E69DAE28;
          *(_OWORD *)&values[10] = *(_OWORD *)&off_1E69DAE38;
          *(_OWORD *)&values[12] = xmmword_1E69DAE48;
          *(_OWORD *)&values[14] = *(_OWORD *)&off_1E69DAE58;
          *(_OWORD *)values = xmmword_1E69DADE8;
          *(_OWORD *)&values[2] = *(_OWORD *)&off_1E69DADF8;
          *(_OWORD *)&values[4] = xmmword_1E69DAE08;
          *(_OWORD *)&values[6] = *(_OWORD *)&off_1E69DAE18;
          CFArray = CFArrayCreate(0, (const void **)values, 32, 0);
          goto LABEL_17;
        case 6:
          *(_OWORD *)values = xmmword_1E69DAEE8;
          CFArray = CFArrayCreate(0, (const void **)values, 2, 0);
          goto LABEL_17;
        default:
          return result;
      }
    }
    else
    {
      switch(a3)
      {
        case 21:
        case 22:
        case 23:
        case 24:
          *(_OWORD *)values = xmmword_1E69DAD38;
          CFArray = CFArrayCreate(0, (const void **)values, 2, 0);
          break;
        case 25:
        case 29:
          *(_OWORD *)&values[4] = xmmword_1E69DADA0;
          *(_OWORD *)&values[6] = *(_OWORD *)&off_1E69DADB0;
          values[8] = "Fixed to FaceDown";
          *(_OWORD *)values = xmmword_1E69DAD80;
          *(_OWORD *)&values[2] = *(_OWORD *)&off_1E69DAD90;
          v8 = values;
          v9 = 9;
          CFArray = applesauce::CF::details::make_CFArrayRef<char const*>((uint64_t)&v8);
          break;
        case 26:
        case 27:
        case 28:
        case 31:
          return result;
        case 30:
          *(_OWORD *)values = xmmword_1E69DADC8;
          *(_OWORD *)&values[2] = *(_OWORD *)&off_1E69DADD8;
          v8 = values;
          v9 = 4;
          CFArray = applesauce::CF::details::make_CFArrayRef<char const*>((uint64_t)&v8);
          break;
        case 32:
          *(_OWORD *)values = xmmword_1E69DAEF8;
          *(_OWORD *)&values[2] = *(_OWORD *)off_1E69DAF08;
          CFArray = CFArrayCreate(0, (const void **)values, 4, 0);
          break;
        default:
          if (a3 != 200 && a3 != 213)
            return result;
          *(_OWORD *)values = xmmword_1E69DAD48;
          *(_OWORD *)&values[2] = *(_OWORD *)&off_1E69DAD58;
          *(_OWORD *)&values[4] = xmmword_1E69DAD68;
          values[6] = "FaceDown";
          v8 = values;
          v9 = 7;
          CFArray = applesauce::CF::details::make_CFArrayRef<char const*>((uint64_t)&v8);
          break;
      }
LABEL_17:
      v7 = CFArray;
      result = 0;
      *a4 = v7;
    }
  }
  return result;
}

double AUFTSpatialAC::GetLatency(AUFTSpatialAC *this)
{
  return 0.0;
}

double AUFTSpatialAC::GetTailTime(AUFTSpatialAC *this)
{
  return 0.02;
}

uint64_t AUFTSpatialAC::SupportsTail(AUFTSpatialAC *this)
{
  return 1;
}

BOOL AUFTSpatialAC::StreamFormatWritable(AUFTSpatialAC *this)
{
  return *((_BYTE *)this + 17) == 0;
}

uint64_t AUFTSpatialAC::SupportedNumChannels(AUFTSpatialAC *this, const AUChannelInfo **a2)
{
  if (a2)
    *a2 = (const AUChannelInfo *)&AUFTSpatialAC::SupportedNumChannels(AUChannelInfo const**)::sSupportedChannelConfigs;
  return 1;
}

uint64_t AUFTSpatialAC::ValidFormat(AUFTSpatialAC *this, unsigned int a2, unsigned int a3, const AudioStreamBasicDescription *a4)
{
  BOOL v4;
  unsigned int v5;

  v4 = a4->mBitsPerChannel == 32 && a4->mFormatID == 1819304813;
  v5 = (LOBYTE(a4->mFormatFlags) >> 5) & 1;
  if (!v4)
    v5 = 0;
  if (a4->mChannelsPerFrame == 1)
    return v5;
  else
    return 0;
}

char *AUFTSpatialAC::GetScopeExtended(AUFTSpatialAC *this, int a2)
{
  char *v2;

  v2 = (char *)this + 656;
  if (a2 != 1)
    v2 = 0;
  if (a2 == 2)
    return (char *)this + 704;
  else
    return v2;
}

uint64_t AUFTSpatialAC::Version(AUFTSpatialAC *this)
{
  return 67072;
}

uint64_t AUFTSpatialAC::UpdateGlobalMetaVariableState(AUFTSpatialAC *this)
{
  uint64_t v2;
  ausdk::AUElement *v3;
  ausdk::AUElement **v4;
  unsigned int Parameter;
  uint64_t v6;
  ausdk::AUElement *v7;
  ausdk::AUElement **v8;
  unsigned int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  uint64_t v14;
  ausdk::AUElement *v15;
  ausdk::AUElement **v16;
  float v17;
  float *v18;
  uint64_t v19;
  ausdk::AUElement *v20;
  ausdk::AUElement **v21;
  float v22;
  float *v23;
  uint64_t v24;
  ausdk::AUElement *v25;
  ausdk::AUElement **v26;
  float v27;
  float *v28;
  uint64_t v29;
  ausdk::AUElement *v30;
  ausdk::AUElement **v31;
  float v32;
  float *v33;
  uint64_t v34;
  ausdk::AUElement *v35;
  ausdk::AUElement **v36;
  float v37;
  float v38;
  _DWORD *v39;
  uint64_t v40;
  ausdk::AUElement *v41;
  ausdk::AUElement **v42;
  float v43;
  float *v44;
  BOOL v45;
  float v46;
  float v47;

  v2 = *((_QWORD *)this + 9);
  if (v2)
  {
    v3 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v2 + 32))(v2, 0);
  }
  else
  {
    v4 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v4)
      v3 = 0;
    else
      v3 = *v4;
  }
  Parameter = ausdk::AUElement::GetParameter(v3, 0xC8u);
  if (Parameter - 1 <= 3)
    *((_DWORD *)this + 198) = Parameter;
  v6 = *((_QWORD *)this + 9);
  if (v6)
  {
    v7 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v6 + 32))(v6, 0);
  }
  else
  {
    v8 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v8)
      v7 = 0;
    else
      v7 = *v8;
  }
  v9 = ausdk::AUElement::GetParameter(v7, 0xD5u);
  if (v9 - 1 <= 3)
    *((_DWORD *)this + 199) = v9;
  v10 = *((_DWORD *)this + 230);
  if (v10 == -2)
  {
    v10 = *((_DWORD *)this + 199);
  }
  else if (v10 == -1)
  {
    v10 = *((_DWORD *)this + 198);
  }
  else if ((v10 - 1) > 3)
  {
    goto LABEL_21;
  }
  *((_DWORD *)this + 200) = v10;
LABEL_21:
  v11 = *((_DWORD *)this + 228);
  if (v11 == -2)
  {
    v11 = *((_DWORD *)this + 199);
  }
  else if (v11 == -1)
  {
    v11 = *((_DWORD *)this + 198);
  }
  else if ((v11 - 1) > 3)
  {
    goto LABEL_27;
  }
  *((_DWORD *)this + 201) = v11;
LABEL_27:
  if (!*((_BYTE *)this + 918))
    goto LABEL_33;
  v12 = *((_DWORD *)this + 201);
  if (v12 == 1)
  {
    v13 = 4;
  }
  else
  {
    if (v12 != 2)
      goto LABEL_33;
    v13 = 3;
  }
  *((_DWORD *)this + 201) = v13;
LABEL_33:
  v14 = *((_QWORD *)this + 9);
  if (v14)
  {
    v15 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v14 + 32))(v14, 0);
  }
  else
  {
    v16 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v16)
      v15 = 0;
    else
      v15 = *v16;
  }
  v17 = ausdk::AUElement::GetParameter(v15, 0xCEu);
  v18 = (float *)((char *)this + 836);
  *((float *)this + 209) = v17;
  if (v17 > 10000.0)
    v18 = (float *)&AUFTSpatialAC::kFTSpatialMax_XY_points;
  if (v17 < 1.0)
    v18 = &AUSpeechLevelEstimator::kVAD_Max;
  *((float *)this + 209) = *v18;
  v19 = *((_QWORD *)this + 9);
  if (v19)
  {
    v20 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v19 + 32))(v19, 0);
  }
  else
  {
    v21 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v21)
      v20 = 0;
    else
      v20 = *v21;
  }
  v22 = ausdk::AUElement::GetParameter(v20, 0xCFu);
  v23 = (float *)((char *)this + 840);
  *((float *)this + 210) = v22;
  if (v22 > 10000.0)
    v23 = (float *)&AUFTSpatialAC::kFTSpatialMax_XY_points;
  if (v22 < 1.0)
    v23 = &AUSpeechLevelEstimator::kVAD_Max;
  *((float *)this + 210) = *v23;
  v24 = *((_QWORD *)this + 9);
  if (v24)
  {
    v25 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v24 + 32))(v24, 0);
  }
  else
  {
    v26 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v26)
      v25 = 0;
    else
      v25 = *v26;
  }
  v27 = ausdk::AUElement::GetParameter(v25, 0xD0u);
  v28 = (float *)((char *)this + 992);
  *((float *)this + 248) = v27;
  if (v27 > 10000.0)
    v28 = (float *)&AUFTSpatialAC::kFTSpatialMax_XY_points;
  if (v27 < 0.0)
    v28 = &AUSpeechLevelEstimator::kVAD_Min;
  *((float *)this + 248) = *v28;
  v29 = *((_QWORD *)this + 9);
  if (v29)
  {
    v30 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v29 + 32))(v29, 0);
  }
  else
  {
    v31 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v31)
      v30 = 0;
    else
      v30 = *v31;
  }
  v32 = ausdk::AUElement::GetParameter(v30, 0xD1u);
  v33 = (float *)((char *)this + 996);
  *((float *)this + 249) = v32;
  if (v32 > 10000.0)
    v33 = (float *)&AUFTSpatialAC::kFTSpatialMax_XY_points;
  if (v32 < 0.0)
    v33 = &AUSpeechLevelEstimator::kVAD_Min;
  *((float *)this + 249) = *v33;
  v34 = *((_QWORD *)this + 9);
  if (v34)
  {
    v35 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v34 + 32))(v34, 0);
  }
  else
  {
    v36 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v36)
      v35 = 0;
    else
      v35 = *v36;
  }
  v37 = ausdk::AUElement::GetParameter(v35, 0xD2u);
  v38 = v37;
  v39 = (_DWORD *)((char *)this + 1000);
  *((float *)this + 250) = v37;
  if (v37 > 10000.0)
    v39 = &AUFTSpatialAC::kFTSpatialMax_XY_points;
  if (v37 < 0.001)
    v39 = &AUFTSpatialAC::kFTSpatialMinWindow_XY_size;
  *((_DWORD *)this + 250) = *v39;
  v40 = *((_QWORD *)this + 9);
  if (v40)
  {
    v41 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v40 + 32))(v40, 0);
  }
  else
  {
    v42 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v42)
      v41 = 0;
    else
      v41 = *v42;
  }
  v43 = ausdk::AUElement::GetParameter(v41, 0xD3u);
  v44 = (float *)((char *)this + 1004);
  *((float *)this + 251) = v43;
  v45 = v43 == 0.0 || v38 == 0.0;
  if (v43 > 10000.0)
    v44 = (float *)&AUFTSpatialAC::kFTSpatialMax_XY_points;
  if (v43 < 0.001)
    v44 = (float *)&AUFTSpatialAC::kFTSpatialMinWindow_XY_size;
  v46 = *v44;
  *((float *)this + 251) = *v44;
  *((_BYTE *)this + 936) = v45;
  v47 = *((float *)this + 250) / (v46 + 1.0e-20);
  *((float *)this + 252) = v47;
  return AUFTSpatialAC::SetRenderTuningValsToUse((uint64_t)this);
}

uint64_t AUFTSpatialAC::UpdateGlobalVariableState(AUFTSpatialAC *this)
{
  uint64_t v2;
  ausdk::AUElement *v3;
  ausdk::AUElement **v4;
  uint64_t v5;
  ausdk::AUElement *v6;
  ausdk::AUElement **v7;
  uint64_t v8;
  ausdk::AUElement *v9;
  ausdk::AUElement **v10;
  unsigned int Parameter;
  uint64_t v12;
  ausdk::AUElement *v13;
  ausdk::AUElement **v14;
  uint64_t v15;
  ausdk::AUElement *v16;
  ausdk::AUElement **v17;
  uint64_t v18;
  ausdk::AUElement *v19;
  ausdk::AUElement **v20;
  _QWORD *v21;
  uint64_t v22;
  ausdk::AUElement *v23;
  ausdk::AUElement **v24;
  unsigned int v25;
  unsigned int v26;
  unsigned int v27;
  uint64_t v28;
  ausdk::AUElement *v29;
  ausdk::AUElement **v30;
  float v31;
  _DWORD *v32;
  uint64_t v33;
  ausdk::AUElement *v34;
  ausdk::AUElement **v35;
  float v36;
  _DWORD *v37;
  uint64_t v38;
  ausdk::AUElement *v39;
  ausdk::AUElement **v40;
  float v41;
  _DWORD *v42;
  uint64_t v43;
  ausdk::AUElement *v44;
  ausdk::AUElement **v45;
  uint64_t v46;
  ausdk::AUElement *v47;
  ausdk::AUElement **v48;
  uint64_t v49;
  ausdk::AUElement *v50;
  ausdk::AUElement **v51;
  uint64_t v52;
  ausdk::AUElement *v53;
  ausdk::AUElement **v54;
  uint64_t v55;
  ausdk::AUElement *v56;
  ausdk::AUElement **v57;
  uint64_t v58;
  ausdk::AUElement *v59;
  ausdk::AUElement **v60;
  float v61;
  _DWORD *v62;
  uint64_t v63;
  ausdk::AUElement *v64;
  ausdk::AUElement **v65;
  float v66;
  _DWORD *v67;
  uint64_t v68;
  ausdk::AUElement *v69;
  ausdk::AUElement **v70;
  float v71;
  float *v72;
  _DWORD *v73;
  uint64_t v74;
  ausdk::AUElement *v75;
  ausdk::AUElement **v76;
  float v77;
  float *v78;
  float v79;
  float v80;
  uint64_t v81;
  ausdk::AUElement *v82;
  ausdk::AUElement **v83;
  float v84;
  unsigned __int32 *v85;
  _DWORD *v86;
  uint64_t v87;
  ausdk::AUElement *v88;
  ausdk::AUElement **v89;
  float v90;
  unsigned __int32 *v91;
  _DWORD *v92;
  uint64_t v93;
  ausdk::AUElement *v94;
  ausdk::AUElement **v95;
  float v96;
  _DWORD *v97;
  uint64_t v98;
  ausdk::AUElement *v99;
  ausdk::AUElement **v100;
  __n128 v101;
  __n128 v102;
  float *v103;
  float v104;
  uint64_t v105;
  ausdk::AUElement *v106;
  ausdk::AUElement **v107;
  float v108;
  float *v109;
  uint64_t v110;
  ausdk::AUElement *v111;
  ausdk::AUElement **v112;
  float v113;
  float *v114;
  uint64_t v115;
  ausdk::AUElement *v116;
  ausdk::AUElement **v117;
  uint64_t v118;
  ausdk::AUElement *v119;
  ausdk::AUElement **v120;
  uint64_t v121;
  ausdk::AUElement *v122;
  ausdk::AUElement **v123;
  uint64_t v124;
  ausdk::AUElement *v125;
  ausdk::AUElement **v126;
  uint64_t v127;
  ausdk::AUElement *v128;
  ausdk::AUElement **v129;
  uint64_t v130;
  ausdk::AUElement *v131;
  ausdk::AUElement **v132;
  int v133;
  char *v134;
  _DWORD *v135;
  uint64_t v136;
  ausdk::AUElement *v137;
  ausdk::AUElement **v138;
  uint64_t v139;
  ausdk::AUElement *v140;
  ausdk::AUElement **v141;
  uint64_t v142;
  ausdk::AUElement *v143;
  ausdk::AUElement **v144;
  uint64_t v145;
  ausdk::AUElement *v146;
  ausdk::AUElement **v147;
  int v148;
  char *v149;
  _DWORD *v150;
  uint64_t v151;
  ausdk::AUElement *v152;
  ausdk::AUElement **v153;
  unsigned int v154;
  uint64_t v155;
  ausdk::AUElement *v156;
  ausdk::AUElement **v157;
  unsigned int v158;
  uint64_t v159;
  ausdk::AUElement *v160;
  ausdk::AUElement **v161;
  unsigned int v162;
  uint64_t v163;
  ausdk::AUElement *v164;
  ausdk::AUElement **v165;
  uint64_t v166;
  ausdk::AUElement *v167;
  ausdk::AUElement **v168;
  uint64_t v169;
  ausdk::AUElement *v170;
  ausdk::AUElement **v171;
  uint64_t v172;
  ausdk::AUElement *v173;
  ausdk::AUElement **v174;
  float v175;
  float *v176;
  float *v177;
  uint64_t v178;
  ausdk::AUElement *v179;
  ausdk::AUElement **v180;
  float v181;
  float *v182;
  uint64_t v183;
  ausdk::AUElement *v184;
  ausdk::AUElement **v185;
  float v186;
  float *v187;
  uint64_t v188;
  ausdk::AUElement *v189;
  ausdk::AUElement **v190;
  float v191;
  _DWORD *v192;
  uint64_t v193;
  ausdk::AUElement *v194;
  ausdk::AUElement **v195;
  float v196;
  int32x2_t v197;
  float *v198;
  float v199;
  float v200;
  _BOOL4 v201;
  _BOOL4 v202;
  uint64_t v203;
  ausdk::AUElement *v204;
  ausdk::AUElement **v205;
  uint64_t v206;
  ausdk::AUElement *v207;
  ausdk::AUElement **v208;

  *((_BYTE *)this + 752) = 1;
  v2 = *((_QWORD *)this + 9);
  if (v2)
  {
    v3 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v2 + 32))(v2, 0);
  }
  else
  {
    v4 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v4)
      v3 = 0;
    else
      v3 = *v4;
  }
  *((_DWORD *)this + 189) = ausdk::AUElement::GetParameter(v3, 0);
  v5 = *((_QWORD *)this + 9);
  if (v5)
  {
    v6 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v5 + 32))(v5, 0);
  }
  else
  {
    v7 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v7)
      v6 = 0;
    else
      v6 = *v7;
  }
  *((_BYTE *)this + 760) = ausdk::AUElement::GetParameter(v6, 1u) != 0.0;
  v8 = *((_QWORD *)this + 9);
  if (v8)
  {
    v9 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v8 + 32))(v8, 0);
  }
  else
  {
    v10 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v10)
      v9 = 0;
    else
      v9 = *v10;
  }
  Parameter = ausdk::AUElement::GetParameter(v9, 2u);
  if (*((_DWORD *)this + 160) < Parameter)
    Parameter = *((_DWORD *)this + 160);
  if (Parameter <= 1)
    Parameter = 1;
  *((_DWORD *)this + 211) = Parameter;
  v12 = *((_QWORD *)this + 9);
  if (v12)
  {
    v13 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v12 + 32))(v12, 0);
  }
  else
  {
    v14 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v14)
      v13 = 0;
    else
      v13 = *v14;
  }
  *((_BYTE *)this + 781) = ausdk::AUElement::GetParameter(v13, 3u) != 0.0;
  v15 = *((_QWORD *)this + 9);
  if (v15)
  {
    v16 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v15 + 32))(v15, 0);
  }
  else
  {
    v17 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v17)
      v16 = 0;
    else
      v16 = *v17;
  }
  *((_BYTE *)this + 782) = ausdk::AUElement::GetParameter(v16, 4u) != 0.0;
  v18 = *((_QWORD *)this + 9);
  if (v18)
  {
    v19 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v18 + 32))(v18, 0);
  }
  else
  {
    v20 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v20)
      v19 = 0;
    else
      v19 = *v20;
  }
  v21 = (_QWORD *)((char *)this + 764);
  *((_DWORD *)this + 191) = ausdk::AUElement::GetParameter(v19, 5u);
  v22 = *((_QWORD *)this + 9);
  if (v22)
  {
    v23 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v22 + 32))(v22, 0);
  }
  else
  {
    v24 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v24)
      v23 = 0;
    else
      v23 = *v24;
  }
  v25 = ausdk::AUElement::GetParameter(v23, 6u);
  *((_DWORD *)this + 192) = v25;
  if (!*((_DWORD *)this + 189))
  {
    *v21 = 1;
    v26 = 1;
    *((_DWORD *)this + 194) = 1;
    *((_BYTE *)this + 780) = 0;
LABEL_50:
    --v26;
    goto LABEL_51;
  }
  v26 = *((_DWORD *)this + 191);
  v27 = *((_DWORD *)this + 160);
  if (v26 + v25 <= v27)
  {
    v27 = v26 + v25;
  }
  else
  {
    if (v26 >= v27)
    {
      v26 = v27 - 1;
      if (v27 - 1 <= 1)
        v26 = 1;
      *(_DWORD *)v21 = v26;
    }
    v25 = v27 - v26;
    *((_DWORD *)this + 192) = v27 - v26;
  }
  *((_DWORD *)this + 194) = v27;
  *((_BYTE *)this + 780) = v25 != 0;
  if (!v25)
    goto LABEL_50;
LABEL_51:
  *((_DWORD *)this + 193) = v26;
  v28 = *((_QWORD *)this + 9);
  if (v28)
  {
    v29 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v28 + 32))(v28, 0);
  }
  else
  {
    v30 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v30)
      v29 = 0;
    else
      v29 = *v30;
  }
  v31 = ausdk::AUElement::GetParameter(v29, 0xC9u);
  v32 = (_DWORD *)((char *)this + 816);
  *((float *)this + 204) = v31;
  if (v31 > 500.0)
    v32 = &AUFTSpatialAC::kFTSpatialMax_dim_cm;
  if (v31 < 0.01)
    v32 = &AUFTSpatialAC::kFTSpatialMin_dim_cm;
  *((_DWORD *)this + 204) = *v32;
  v33 = *((_QWORD *)this + 9);
  if (v33)
  {
    v34 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v33 + 32))(v33, 0);
  }
  else
  {
    v35 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v35)
      v34 = 0;
    else
      v34 = *v35;
  }
  v36 = ausdk::AUElement::GetParameter(v34, 0xCAu);
  v37 = (_DWORD *)((char *)this + 820);
  *((float *)this + 205) = v36;
  if (v36 > 500.0)
    v37 = &AUFTSpatialAC::kFTSpatialMax_dim_cm;
  if (v36 < 0.01)
    v37 = &AUFTSpatialAC::kFTSpatialMin_dim_cm;
  *((_DWORD *)this + 205) = *v37;
  v38 = *((_QWORD *)this + 9);
  if (v38)
  {
    v39 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v38 + 32))(v38, 0);
  }
  else
  {
    v40 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v40)
      v39 = 0;
    else
      v39 = *v40;
  }
  v41 = ausdk::AUElement::GetParameter(v39, 0xCBu);
  v42 = (_DWORD *)((char *)this + 824);
  *((float *)this + 206) = v41;
  if (v41 > 1000.0)
    v42 = &AUFTSpatialAC::kFTSpatialMax_dist_cm;
  if (v41 < 0.01)
    v42 = &AUFTSpatialAC::kFTSpatialMin_dim_cm;
  *((_DWORD *)this + 206) = *v42;
  v43 = *((_QWORD *)this + 9);
  if (v43)
  {
    v44 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v43 + 32))(v43, 0);
  }
  else
  {
    v45 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v45)
      v44 = 0;
    else
      v44 = *v45;
  }
  *((float *)this + 207) = ausdk::AUElement::GetParameter(v44, 0xCCu);
  v46 = *((_QWORD *)this + 9);
  if (v46)
  {
    v47 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v46 + 32))(v46, 0);
  }
  else
  {
    v48 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v48)
      v47 = 0;
    else
      v47 = *v48;
  }
  *((float *)this + 208) = ausdk::AUElement::GetParameter(v47, 0xCDu);
  v49 = *((_QWORD *)this + 9);
  if (v49)
  {
    v50 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v49 + 32))(v49, 0);
  }
  else
  {
    v51 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v51)
      v50 = 0;
    else
      v50 = *v51;
  }
  *((_BYTE *)this + 848) = ausdk::AUElement::GetParameter(v50, 7u) != 0.0;
  v52 = *((_QWORD *)this + 9);
  if (v52)
  {
    v53 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v52 + 32))(v52, 0);
  }
  else
  {
    v54 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v54)
      v53 = 0;
    else
      v53 = *v54;
  }
  *((_BYTE *)this + 849) = ausdk::AUElement::GetParameter(v53, 8u) != 0.0;
  v55 = *((_QWORD *)this + 9);
  if (v55)
  {
    v56 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v55 + 32))(v55, 0);
  }
  else
  {
    v57 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v57)
      v56 = 0;
    else
      v56 = *v57;
  }
  *((_BYTE *)this + 850) = ausdk::AUElement::GetParameter(v56, 9u) != 0.0;
  v58 = *((_QWORD *)this + 9);
  if (v58)
  {
    v59 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v58 + 32))(v58, 0);
  }
  else
  {
    v60 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v60)
      v59 = 0;
    else
      v59 = *v60;
  }
  v61 = ausdk::AUElement::GetParameter(v59, 0xCu);
  *((float *)this + 217) = v61;
  if (v61 <= 180.0)
    v62 = (_DWORD *)((char *)this + 868);
  else
    v62 = &kParamValue_Mode1Azimuth_Max;
  if (v61 < -180.0)
    v62 = &kParamValue_Mode1Azimuth_Min;
  *((_DWORD *)this + 217) = *v62;
  v63 = *((_QWORD *)this + 9);
  if (v63)
  {
    v64 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v63 + 32))(v63, 0);
  }
  else
  {
    v65 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v65)
      v64 = 0;
    else
      v64 = *v65;
  }
  v66 = ausdk::AUElement::GetParameter(v64, 0xDu);
  *((float *)this + 218) = v66;
  if (v66 <= 180.0)
    v67 = (_DWORD *)((char *)this + 872);
  else
    v67 = &kParamValue_Mode1Azimuth_Max;
  if (v66 < -180.0)
    v67 = &kParamValue_Mode1Azimuth_Min;
  *((_DWORD *)this + 218) = *v67;
  v68 = *((_QWORD *)this + 9);
  if (v68)
  {
    v69 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v68 + 32))(v68, 0);
  }
  else
  {
    v70 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v70)
      v69 = 0;
    else
      v69 = *v70;
  }
  v71 = ausdk::AUElement::GetParameter(v69, 0xAu);
  v72 = (float *)((char *)this + 852);
  *((float *)this + 213) = v71;
  if (v71 <= 180.0)
    v73 = (_DWORD *)((char *)this + 852);
  else
    v73 = &kParamValue_Mode1Azimuth_Max;
  if (v71 < -180.0)
    v73 = &kParamValue_Mode1Azimuth_Min;
  *((_DWORD *)this + 213) = *v73;
  v74 = *((_QWORD *)this + 9);
  if (v74)
  {
    v75 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v74 + 32))(v74, 0);
  }
  else
  {
    v76 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v76)
      v75 = 0;
    else
      v75 = *v76;
  }
  v77 = ausdk::AUElement::GetParameter(v75, 0xBu);
  v78 = (float *)((char *)this + 856);
  *((float *)this + 214) = v77;
  if (v77 > 180.0)
    v78 = (float *)&kParamValue_Mode1Azimuth_Max;
  if (v77 < -180.0)
    v78 = (float *)&kParamValue_Mode1Azimuth_Min;
  v79 = *v78;
  *((float *)this + 214) = *v78;
  v80 = *((float *)this + 218);
  if (*((float *)this + 217) >= v80)
  {
    if (v80 == -180.0)
      *((_DWORD *)this + 218) = -1020002959;
    else
      *((float *)this + 217) = fmaxf(v80 + -0.01, -180.0);
  }
  if (*v72 >= v79)
    *v72 = v79;
  v81 = *((_QWORD *)this + 9);
  if (v81)
  {
    v82 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v81 + 32))(v81, 0);
  }
  else
  {
    v83 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v83)
      v82 = 0;
    else
      v82 = *v83;
  }
  v84 = ausdk::AUElement::GetParameter(v82, 0x10u);
  v85 = (unsigned __int32 *)((char *)this + 876);
  *((float *)this + 219) = v84;
  if (v84 <= 90.0)
    v86 = (_DWORD *)((char *)this + 876);
  else
    v86 = &kParamValue_Mode1Elevation_Max;
  if (v84 < -90.0)
    v86 = &kParamValue_Mode1Elevation_Min;
  *((_DWORD *)this + 219) = *v86;
  v87 = *((_QWORD *)this + 9);
  if (v87)
  {
    v88 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v87 + 32))(v87, 0);
  }
  else
  {
    v89 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v89)
      v88 = 0;
    else
      v88 = *v89;
  }
  v90 = ausdk::AUElement::GetParameter(v88, 0x11u);
  v91 = (unsigned __int32 *)((char *)this + 880);
  *((float *)this + 220) = v90;
  if (v90 <= 90.0)
    v92 = (_DWORD *)((char *)this + 880);
  else
    v92 = &kParamValue_Mode1Elevation_Max;
  if (v90 < -90.0)
    v92 = &kParamValue_Mode1Elevation_Min;
  *((_DWORD *)this + 220) = *v92;
  v93 = *((_QWORD *)this + 9);
  if (v93)
  {
    v94 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v93 + 32))(v93, 0);
  }
  else
  {
    v95 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v95)
      v94 = 0;
    else
      v94 = *v95;
  }
  v96 = ausdk::AUElement::GetParameter(v94, 0xEu);
  *((float *)this + 215) = v96;
  if (v96 <= 90.0)
    v97 = (_DWORD *)((char *)this + 860);
  else
    v97 = &kParamValue_Mode1Elevation_Max;
  if (v96 < -90.0)
    v97 = &kParamValue_Mode1Elevation_Min;
  *((_DWORD *)this + 215) = *v97;
  v98 = *((_QWORD *)this + 9);
  if (v98)
  {
    v99 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v98 + 32))(v98, 0);
  }
  else
  {
    v100 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v100)
      v99 = 0;
    else
      v99 = *v100;
  }
  v101.n128_f32[0] = ausdk::AUElement::GetParameter(v99, 0xFu);
  *((_DWORD *)this + 216) = v101.n128_u32[0];
  if (v101.n128_f32[0] <= 90.0)
    v103 = (float *)((char *)this + 864);
  else
    v103 = (float *)&kParamValue_Mode1Elevation_Max;
  if (v101.n128_f32[0] < -90.0)
    v103 = (float *)&kParamValue_Mode1Elevation_Min;
  v104 = *v103;
  *((float *)this + 216) = *v103;
  if (*((float *)this + 215) >= v104)
  {
    if (v104 == -90.0)
      *((_DWORD *)this + 216) = -1028392223;
    else
      *((float *)this + 215) = fmaxf(v104 + -0.01, -90.0);
  }
  v102.n128_u32[0] = *v85;
  v101.n128_u32[0] = *v91;
  if (*(float *)v85 >= *(float *)v91)
    *v85 = v101.n128_u32[0];
  v105 = *((_QWORD *)this + 9);
  if (v105)
  {
    v106 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD, __n128, __n128))(*(_QWORD *)v105 + 32))(v105, 0, v101, v102);
  }
  else
  {
    v107 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v107)
      v106 = 0;
    else
      v106 = *v107;
  }
  v108 = ausdk::AUElement::GetParameter(v106, 0x12u);
  *((float *)this + 221) = v108;
  if (v108 <= 10.0)
    v109 = (float *)((char *)this + 884);
  else
    v109 = (float *)&kParamValue_Mode1Distance_Max;
  if (v108 < 0.0)
    v109 = &AUSpeechLevelEstimator::kVAD_Min;
  *((float *)this + 221) = *v109;
  v110 = *((_QWORD *)this + 9);
  if (v110)
  {
    v111 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v110 + 32))(v110, 0);
  }
  else
  {
    v112 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v112)
      v111 = 0;
    else
      v111 = *v112;
  }
  v113 = ausdk::AUElement::GetParameter(v111, 0x13u);
  v114 = (float *)((char *)this + 888);
  *((float *)this + 222) = v113;
  if (v113 > 100.0)
    v114 = &kParamValue_Mode1ReverbBlend_Max;
  if (v113 < 0.0)
    v114 = &AUSpeechLevelEstimator::kVAD_Min;
  *((float *)this + 222) = *v114;
  v115 = *((_QWORD *)this + 9);
  if (v115)
  {
    v116 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v115 + 32))(v115, 0);
  }
  else
  {
    v117 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v117)
      v116 = 0;
    else
      v116 = *v117;
  }
  *((float *)this + 223) = ausdk::AUElement::GetParameter(v116, 0x14u) * 0.5;
  v118 = *((_QWORD *)this + 9);
  if (v118)
  {
    v119 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v118 + 32))(v118, 0);
  }
  else
  {
    v120 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v120)
      v119 = 0;
    else
      v119 = *v120;
  }
  *((_DWORD *)this + 224) = ausdk::AUElement::GetParameter(v119, 0x15u);
  v121 = *((_QWORD *)this + 9);
  if (v121)
  {
    v122 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v121 + 32))(v121, 0);
  }
  else
  {
    v123 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v123)
      v122 = 0;
    else
      v122 = *v123;
  }
  *((_DWORD *)this + 225) = ausdk::AUElement::GetParameter(v122, 0x16u);
  v124 = *((_QWORD *)this + 9);
  if (v124)
  {
    v125 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v124 + 32))(v124, 0);
  }
  else
  {
    v126 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v126)
      v125 = 0;
    else
      v125 = *v126;
  }
  *((_DWORD *)this + 226) = ausdk::AUElement::GetParameter(v125, 0x17u);
  v127 = *((_QWORD *)this + 9);
  if (v127)
  {
    v128 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v127 + 32))(v127, 0);
  }
  else
  {
    v129 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v129)
      v128 = 0;
    else
      v128 = *v129;
  }
  *((_DWORD *)this + 227) = ausdk::AUElement::GetParameter(v128, 0x18u);
  v130 = *((_QWORD *)this + 9);
  if (v130)
  {
    v131 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v130 + 32))(v130, 0);
  }
  else
  {
    v132 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v132)
      v131 = 0;
    else
      v131 = *v132;
  }
  v133 = (int)ausdk::AUElement::GetParameter(v131, 0x19u);
  v134 = (char *)this + 912;
  *((_DWORD *)this + 228) = v133;
  if (v133 > 6)
    v134 = (char *)&kParamValue_ScreenOrientationControl_Max;
  if (v133 >= -2)
    v135 = v134;
  else
    v135 = &kParamValue_ScreenOrientationControl_Min;
  *((_DWORD *)this + 228) = *v135;
  v136 = *((_QWORD *)this + 9);
  if (v136)
  {
    v137 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v136 + 32))(v136, 0);
  }
  else
  {
    v138 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v138)
      v137 = 0;
    else
      v137 = *v138;
  }
  *((_BYTE *)this + 916) = ausdk::AUElement::GetParameter(v137, 0x1Au) != 0.0;
  v139 = *((_QWORD *)this + 9);
  if (v139)
  {
    v140 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v139 + 32))(v139, 0);
  }
  else
  {
    v141 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v141)
      v140 = 0;
    else
      v140 = *v141;
  }
  *((_BYTE *)this + 917) = ausdk::AUElement::GetParameter(v140, 0x1Bu) != 0.0;
  v142 = *((_QWORD *)this + 9);
  if (v142)
  {
    v143 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v142 + 32))(v142, 0);
  }
  else
  {
    v144 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v144)
      v143 = 0;
    else
      v143 = *v144;
  }
  *((_BYTE *)this + 918) = ausdk::AUElement::GetParameter(v143, 0x1Cu) != 0.0;
  v145 = *((_QWORD *)this + 9);
  if (v145)
  {
    v146 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v145 + 32))(v145, 0);
  }
  else
  {
    v147 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v147)
      v146 = 0;
    else
      v146 = *v147;
  }
  v148 = (int)ausdk::AUElement::GetParameter(v146, 0x1Du);
  v149 = (char *)this + 920;
  *((_DWORD *)this + 230) = v148;
  if (v148 > 6)
    v149 = (char *)&kParamValue_ScreenOrientationControl_Max;
  if (v148 >= -2)
    v150 = v149;
  else
    v150 = &kParamValue_ScreenOrientationControl_Min;
  *((_DWORD *)this + 230) = *v150;
  v151 = *((_QWORD *)this + 9);
  if (v151)
  {
    v152 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v151 + 32))(v151, 0);
  }
  else
  {
    v153 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v153)
      v152 = 0;
    else
      v152 = *v153;
  }
  v154 = ausdk::AUElement::GetParameter(v152, 0x1Eu);
  if (v154 >= 3)
    v154 = 3;
  *((_DWORD *)this + 231) = v154;
  v155 = *((_QWORD *)this + 9);
  if (v155)
  {
    v156 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v155 + 32))(v155, 0);
  }
  else
  {
    v157 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v157)
      v156 = 0;
    else
      v156 = *v157;
  }
  v158 = ausdk::AUElement::GetParameter(v156, 0x1Fu);
  if (v158 >= 0x3E8)
    v158 = 1000;
  *((_DWORD *)this + 232) = v158;
  v159 = *((_QWORD *)this + 9);
  if (v159)
  {
    v160 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v159 + 32))(v159, 0);
  }
  else
  {
    v161 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v161)
      v160 = 0;
    else
      v160 = *v161;
  }
  v162 = ausdk::AUElement::GetParameter(v160, 0x20u);
  if (v162 >= 3)
    v162 = 3;
  *((_DWORD *)this + 233) = v162;
  v163 = *((_QWORD *)this + 9);
  if (v163)
  {
    v164 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v163 + 32))(v163, 0);
  }
  else
  {
    v165 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v165)
      v164 = 0;
    else
      v164 = *v165;
  }
  *((_BYTE *)this + 783) = ausdk::AUElement::GetParameter(v164, 0x21u) != 0.0;
  v166 = *((_QWORD *)this + 9);
  if (v166)
  {
    v167 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v166 + 32))(v166, 0);
  }
  else
  {
    v168 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v168)
      v167 = 0;
    else
      v167 = *v168;
  }
  *((_BYTE *)this + 784) = ausdk::AUElement::GetParameter(v167, 0x22u) != 0.0;
  v169 = *((_QWORD *)this + 9);
  if (v169)
  {
    v170 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v169 + 32))(v169, 0);
  }
  else
  {
    v171 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v171)
      v170 = 0;
    else
      v170 = *v171;
  }
  *((_BYTE *)this + 785) = ausdk::AUElement::GetParameter(v170, 0x23u) != 0.0;
  v172 = *((_QWORD *)this + 9);
  if (v172)
  {
    v173 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v172 + 32))(v172, 0);
  }
  else
  {
    v174 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v174)
      v173 = 0;
    else
      v173 = *v174;
  }
  v175 = ausdk::AUElement::GetParameter(v173, 0x24u);
  v176 = (float *)((char *)this + 788);
  *((float *)this + 197) = v175;
  v177 = (float *)&kParamValue_InterpTime_Max;
  if (v175 <= 5.0)
    v177 = (float *)((char *)this + 788);
  if (v175 < 0.0)
    v177 = &AUSpeechLevelEstimator::kVAD_Min;
  *((float *)this + 197) = *v177;
  v178 = *((_QWORD *)this + 9);
  if (v178)
  {
    v179 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v178 + 32))(v178, 0);
  }
  else
  {
    v180 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v180)
      v179 = 0;
    else
      v179 = *v180;
  }
  v181 = ausdk::AUElement::GetParameter(v179, 0x25u);
  *((float *)this + 235) = v181;
  if (v181 <= 10.0)
    v182 = (float *)((char *)this + 940);
  else
    v182 = (float *)&kParamValue_Mode1Distance_Max;
  if (v181 < 0.0)
    v182 = &AUSpeechLevelEstimator::kVAD_Min;
  *((float *)this + 235) = *v182;
  v183 = *((_QWORD *)this + 9);
  if (v183)
  {
    v184 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v183 + 32))(v183, 0);
  }
  else
  {
    v185 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v185)
      v184 = 0;
    else
      v184 = *v185;
  }
  v186 = ausdk::AUElement::GetParameter(v184, 0x26u);
  v187 = (float *)((char *)this + 944);
  *((float *)this + 236) = v186;
  if (v186 > 100.0)
    v187 = &kParamValue_Mode1ReverbBlend_Max;
  if (v186 < 0.0)
    v187 = &AUSpeechLevelEstimator::kVAD_Min;
  *((float *)this + 236) = *v187;
  v188 = *((_QWORD *)this + 9);
  if (v188)
  {
    v189 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v188 + 32))(v188, 0);
  }
  else
  {
    v190 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v190)
      v189 = 0;
    else
      v189 = *v190;
  }
  v191 = ausdk::AUElement::GetParameter(v189, 0x27u);
  v192 = (_DWORD *)((char *)this + 948);
  *((float *)this + 237) = v191;
  if (v191 > 20.0)
    v192 = &kParamValue_UppGain_Max;
  if (v191 < -20.0)
    v192 = &kParamValue_UppGain_Min;
  *((_DWORD *)this + 237) = *v192;
  v193 = *((_QWORD *)this + 9);
  if (v193)
  {
    v194 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v193 + 32))(v193, 0);
  }
  else
  {
    v195 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v195)
      v194 = 0;
    else
      v194 = *v195;
  }
  v196 = ausdk::AUElement::GetParameter(v194, 0x28u);
  v198 = (float *)((char *)this + 952);
  *((float *)this + 238) = v196;
  if (v196 > 20.0)
    v198 = (float *)&kParamValue_UppGain_Max;
  if (v196 < -20.0)
    v198 = (float *)&kParamValue_UppGain_Min;
  v199 = *v198;
  *((float *)this + 238) = *v198;
  v197.i32[0] = 1.0;
  if (*((_BYTE *)this + 785) && *v176 > 0.0)
  {
    *(float *)v197.i32 = *v176 * *((float *)this + 1331);
    v200 = 1.0;
    v201 = *(float *)v197.i32 <= 1.0;
    v202 = *(float *)v197.i32 < 200.0 || *(float *)v197.i32 <= 1.0;
    if (*(float *)v197.i32 >= 200.0)
      v201 = 1;
    if (!v202)
      v200 = 200.0;
    if (v201)
      *(float *)v197.i32 = v200;
  }
  *((float32x2_t *)this + 666) = vdiv_f32(vabd_f32(*(float32x2_t *)((char *)this + 884), *(float32x2_t *)((char *)this + 940)), (float32x2_t)vdup_lane_s32(v197, 0));
  *((float *)this + 1334) = vabds_f32(v199, *((float *)this + 237)) / *(float *)v197.i32;
  if (!*((_BYTE *)this + 916))
  {
    v203 = *((_QWORD *)this + 9);
    if (v203)
    {
      v204 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v203 + 32))(v203, 0);
    }
    else
    {
      v205 = (ausdk::AUElement **)*((_QWORD *)this + 6);
      if (*((ausdk::AUElement ***)this + 7) == v205)
        v204 = 0;
      else
        v204 = *v205;
    }
    ausdk::AUElement::SetParameter(v204, 0x194u, 1.0, 0);
  }
  if (!*((_BYTE *)this + 917))
  {
    v206 = *((_QWORD *)this + 9);
    if (v206)
    {
      v207 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v206 + 32))(v206, 0);
    }
    else
    {
      v208 = (ausdk::AUElement **)*((_QWORD *)this + 6);
      if (*((ausdk::AUElement ***)this + 7) == v208)
        v207 = 0;
      else
        v207 = *v208;
    }
    ausdk::AUElement::SetParameter(v207, 0x195u, 1.0, 0);
  }
  return AUFTSpatialAC::UpdateGlobalMetaVariableState(this);
}

uint64_t AUFTSpatialAC::UpdateInputVariableState(AUFTSpatialAC *this)
{
  unint64_t v2;
  float *i;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  ausdk::AUElement *v7;
  uint64_t v8;
  uint64_t v9;
  ausdk::AUElement *v10;
  uint64_t v11;
  uint64_t v12;
  ausdk::AUElement *v13;
  uint64_t v14;
  uint64_t v15;
  ausdk::AUElement *v16;
  uint64_t v17;
  uint64_t v18;
  ausdk::AUElement *v19;
  uint64_t v20;
  uint64_t v21;
  ausdk::AUElement *v22;
  uint64_t v23;
  uint64_t v24;
  ausdk::AUElement *v25;
  uint64_t v26;
  uint64_t v27;
  ausdk::AUElement *v28;
  uint64_t v29;

  v2 = 0;
  for (i = (float *)((char *)this + 1056); ; i += 11)
  {
    v4 = *((_QWORD *)this + 87);
    result = v4
           ? (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 24))(v4)
           : (*((_QWORD *)this + 85) - *((_QWORD *)this + 84)) >> 3;
    if (v2 >= result)
      break;
    if (*((_BYTE *)this + v2 + 600))
    {
      v6 = *((_QWORD *)this + 87);
      if (v6)
      {
        v7 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)v6 + 32))(v6, v2);
      }
      else
      {
        v8 = *((_QWORD *)this + 84);
        if (v2 >= (*((_QWORD *)this + 85) - v8) >> 3)
          v7 = 0;
        else
          v7 = *(ausdk::AUElement **)(v8 + 8 * v2);
      }
      *((_DWORD *)i - 5) = ausdk::AUElement::GetParameter(v7, 0x259u);
      v9 = *((_QWORD *)this + 87);
      if (v9)
      {
        v10 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)v9 + 32))(v9, v2);
      }
      else
      {
        v11 = *((_QWORD *)this + 84);
        if (v2 >= (*((_QWORD *)this + 85) - v11) >> 3)
          v10 = 0;
        else
          v10 = *(ausdk::AUElement **)(v11 + 8 * v2);
      }
      *((_BYTE *)i - 16) = ausdk::AUElement::GetParameter(v10, 0x25Au) != 0.0;
      v12 = *((_QWORD *)this + 87);
      if (v12)
      {
        v13 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)v12 + 32))(v12, v2);
      }
      else
      {
        v14 = *((_QWORD *)this + 84);
        if (v2 >= (*((_QWORD *)this + 85) - v14) >> 3)
          v13 = 0;
        else
          v13 = *(ausdk::AUElement **)(v14 + 8 * v2);
      }
      *((_BYTE *)i - 15) = ausdk::AUElement::GetParameter(v13, 0x25Bu) != 0.0;
      v15 = *((_QWORD *)this + 87);
      if (v15)
      {
        v16 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)v15 + 32))(v15, v2);
      }
      else
      {
        v17 = *((_QWORD *)this + 84);
        if (v2 >= (*((_QWORD *)this + 85) - v17) >> 3)
          v16 = 0;
        else
          v16 = *(ausdk::AUElement **)(v17 + 8 * v2);
      }
      *((_BYTE *)i - 14) = ausdk::AUElement::GetParameter(v16, 0x25Cu) != 0.0;
      v18 = *((_QWORD *)this + 87);
      if (v18)
      {
        v19 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)v18 + 32))(v18, v2);
      }
      else
      {
        v20 = *((_QWORD *)this + 84);
        if (v2 >= (*((_QWORD *)this + 85) - v20) >> 3)
          v19 = 0;
        else
          v19 = *(ausdk::AUElement **)(v20 + 8 * v2);
      }
      *((_DWORD *)i - 3) = ausdk::AUElement::GetParameter(v19, 0x25Du);
      v21 = *((_QWORD *)this + 87);
      if (v21)
      {
        v22 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)v21 + 32))(v21, v2);
      }
      else
      {
        v23 = *((_QWORD *)this + 84);
        if (v2 >= (*((_QWORD *)this + 85) - v23) >> 3)
          v22 = 0;
        else
          v22 = *(ausdk::AUElement **)(v23 + 8 * v2);
      }
      *(i - 2) = ausdk::AUElement::GetParameter(v22, 0x25Eu);
      v24 = *((_QWORD *)this + 87);
      if (v24)
      {
        v25 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)v24 + 32))(v24, v2);
      }
      else
      {
        v26 = *((_QWORD *)this + 84);
        if (v2 >= (*((_QWORD *)this + 85) - v26) >> 3)
          v25 = 0;
        else
          v25 = *(ausdk::AUElement **)(v26 + 8 * v2);
      }
      *(i - 1) = ausdk::AUElement::GetParameter(v25, 0x25Fu);
      v27 = *((_QWORD *)this + 87);
      if (v27)
      {
        v28 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)v27 + 32))(v27, v2);
      }
      else
      {
        v29 = *((_QWORD *)this + 84);
        if (v2 >= (*((_QWORD *)this + 85) - v29) >> 3)
          v28 = 0;
        else
          v28 = *(ausdk::AUElement **)(v29 + 8 * v2);
      }
      *i = ausdk::AUElement::GetParameter(v28, 0x260u);
    }
    ++v2;
  }
  return result;
}

float32x2_t *AUFTSpatialAC::MakeDependentPositionData(float32x2_t *this)
{
  float32x2_t *v1;
  uint64_t v2;
  uint64_t v3;
  float32x2_t v9;
  uint64_t v10;
  uint64_t v11;
  float32x2_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  float32x2_t v16;
  uint64_t v17;
  __int32 v18;
  unint64_t v19;
  float32x2_t *k;
  float32x2_t v21;
  BOOL v22;
  unint64_t v23;
  float32x2_t *i;
  float32x2_t v25;
  __int8 v26;
  unint64_t v27;
  char *j;
  float32x2_t v29;

  v1 = this;
  v2 = this[79].u32[1];
  if ((_DWORD)v2)
  {
    v3 = 0;
    __asm { FMOV            V2.2S, #1.0 }
    v9 = (float32x2_t)vand_s8((int8x8_t)vdiv_f32(_D2, this[125]), (int8x8_t)vcgtz_f32(this[125]));
    v10 = (uint64_t)this[122];
    v11 = (uint64_t)this[123];
    v12 = this + 134;
    do
    {
      v13 = 1 << v3;
      v14 = v10 & ~(1 << v3);
      v15 = v11 & ~(1 << v3);
      if (v12[-4].i8[0])
      {
        v16 = v12[-3];
        if (v16.f32[0] == 0.0 && v16.f32[1] == 0.0)
        {
          v15 = v11 | v13;
          v17 = v10 | v13;
          if (this[116].i32[1])
            v14 = v17;
        }
        *(float32x2_t *)((char *)v12 - 12) = vmul_f32(v9, v16);
        v12[-1].i32[1] = v12[-2].i32[0];
        v12->i8[0] = v12[-4].i8[1];
      }
      else
      {
        *(float32x2_t *)((char *)&v12[-1] + 1) = 0;
        *(float32x2_t *)((char *)&v12[-2] + 4) = 0;
      }
      v11 = v15;
      v10 = v14;
      ++v3;
      v12 = (float32x2_t *)((char *)v12 + 44);
    }
    while (v2 != v3);
    this[122] = (float32x2_t)v14;
    this[123] = (float32x2_t)v15;
  }
  v18 = this[115].i32[1];
  switch(v18)
  {
    case 1:
      v23 = 0;
      for (i = this + 134; ; i = (float32x2_t *)((char *)i + 44))
      {
        v25 = v1[87];
        this = (float32x2_t *)(*(_QWORD *)&v25
                             ? (*(uint64_t (**)(float32x2_t))(**(_QWORD **)&v25 + 24))(v25)
                             : (*(_QWORD *)&v1[85] - *(_QWORD *)&v1[84]) >> 3);
        if (v23 >= this)
          break;
        v26 = i->i8[0];
        if (i->i8[0])
          v26 = i[-4].i32[1] <= (unsigned __int32)v1[116].i32[0];
        i->i8[0] = v26;
        ++v23;
      }
      break;
    case 3:
      v27 = 0;
      for (j = (char *)&this[130] + 4; ; j += 44)
      {
        v29 = v1[87];
        this = (float32x2_t *)(*(_QWORD *)&v29
                             ? (*(uint64_t (**)(float32x2_t))(**(_QWORD **)&v29 + 24))(v29)
                             : (*(_QWORD *)&v1[85] - *(_QWORD *)&v1[84]) >> 3);
        if (v27 >= this)
          break;
        j[28] = *(_DWORD *)j <= v1[116].i32[0];
        ++v27;
      }
      break;
    case 2:
      v19 = 0;
      for (k = this + 134; ; k = (float32x2_t *)((char *)k + 44))
      {
        v21 = v1[87];
        this = (float32x2_t *)(*(_QWORD *)&v21
                             ? (*(uint64_t (**)(float32x2_t))(**(_QWORD **)&v21 + 24))(v21)
                             : (*(_QWORD *)&v1[85] - *(_QWORD *)&v1[84]) >> 3);
        if (v19 >= this)
          break;
        if (k->i8[0])
          v22 = 1;
        else
          v22 = k[-4].i32[1] <= (unsigned __int32)v1[116].i32[0];
        k->i8[0] = v22;
        ++v19;
      }
      break;
  }
  return this;
}

std::chrono::steady_clock::time_point AUFTSpatialAC::AURealTimeDebugLog<AUFTSpatialAC::AUFTOrientationParams,256ul>::Buffer::Write(_QWORD *a1, __int128 *a2)
{
  unint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  unint64_t v7;
  BOOL v8;
  uint64_t v9;
  std::chrono::steady_clock::time_point result;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  uint64_t v24;
  __int128 v25;

  v4 = a1[85];
  v5 = a1 + 93;
  v6 = atomic_load(a1 + 93);
  v7 = v6 + ~v4;
  v8 = v4 >= v6;
  v9 = -257;
  if (!v8)
    v9 = 0;
  if (v7 == v9)
    AUFTSpatialAC::AURealTimeDebugLog<AUFTSpatialAC::AUFTOrientationParams,256ul>::Buffer::Flush((uint64_t)a1);
  result.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  v25 = *a2;
  v11 = a1[85];
  v12 = 256;
  if ((unint64_t)(v11 + 1) < 0x100)
    v12 = v11 + 1;
  v13 = (v11 - v12 + 257) % 0x101uLL - (257 - v12) + 1;
  v14 = atomic_load(v5);
  if (v13 == v14)
  {
    _os_assert_log();
    result.__d_.__rep_ = _os_crash();
    __break(1u);
  }
  else
  {
    v15 = (uint64_t)&a1[3 * v11 + 85];
    *(std::chrono::steady_clock::time_point *)(v15 + 72) = result;
    *(_OWORD *)(v15 + 80) = v25;
    atomic_store(v13, a1 + 85);
    v16 = a1[85];
    v17 = atomic_load(a1 + 93);
    v18 = v17 + ~v16;
    v8 = v16 >= v17;
    v19 = 257;
    if (!v8)
      v19 = 0;
    if (v18 + v19 <= 0x7F)
    {
      AU::FTSpatialAC::GetMessenger((AU::FTSpatialAC *)result.__d_.__rep_);
      v21 = *a1;
      v20 = a1[1];
      if (v20)
      {
        v22 = (unint64_t *)(v20 + 16);
        do
          v23 = __ldxr(v22);
        while (__stxr(v23 + 1, v22));
      }
      v24 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)*MEMORY[0x1E0DDB688] + 16))(*MEMORY[0x1E0DDB688], 40, 8);
      *(_DWORD *)(v24 + 16) = 0;
      *(_QWORD *)(v24 + 24) = v21;
      *(_QWORD *)(v24 + 32) = v20;
      *(_QWORD *)v24 = &off_1E69DAFA8;
      *(_QWORD *)(v24 + 8) = 0;
      return (std::chrono::steady_clock::time_point)caulk::concurrent::messenger::enqueue((caulk::concurrent::messenger *)&AU::FTSpatialAC::GetMessenger(void)::sMessenger, (caulk::concurrent::message *)v24);
    }
  }
  return result;
}

std::chrono::steady_clock::time_point AUFTSpatialAC::AURealTimeDebugLog<AUFTSpatialAC::AUFTWindowParams,256ul>::Buffer::Write(_QWORD *a1, __int128 *a2)
{
  unint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  unint64_t v7;
  BOOL v8;
  uint64_t v9;
  std::chrono::steady_clock::time_point result;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  uint64_t v24;
  __int128 v25;
  int v26;

  v4 = a1[85];
  v5 = a1 + 93;
  v6 = atomic_load(a1 + 93);
  v7 = v6 + ~v4;
  v8 = v4 >= v6;
  v9 = -257;
  if (!v8)
    v9 = 0;
  if (v7 == v9)
    AUFTSpatialAC::AURealTimeDebugLog<AUFTSpatialAC::AUFTWindowParams,256ul>::Buffer::Flush((uint64_t)a1);
  result.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  v25 = *a2;
  v26 = *((_DWORD *)a2 + 4);
  v11 = a1[85];
  v12 = 256;
  if ((unint64_t)(v11 + 1) < 0x100)
    v12 = v11 + 1;
  v13 = (v11 - v12 + 257) % 0x101uLL - (257 - v12) + 1;
  v14 = atomic_load(v5);
  if (v13 == v14)
  {
    _os_assert_log();
    result.__d_.__rep_ = _os_crash();
    __break(1u);
  }
  else
  {
    v15 = (uint64_t)&a1[4 * v11 + 85];
    *(std::chrono::steady_clock::time_point *)(v15 + 72) = result;
    *(_OWORD *)(v15 + 80) = v25;
    *(_DWORD *)(v15 + 96) = v26;
    atomic_store(v13, a1 + 85);
    v16 = a1[85];
    v17 = atomic_load(a1 + 93);
    v18 = v17 + ~v16;
    v8 = v16 >= v17;
    v19 = 257;
    if (!v8)
      v19 = 0;
    if (v18 + v19 <= 0x7F)
    {
      AU::FTSpatialAC::GetMessenger((AU::FTSpatialAC *)result.__d_.__rep_);
      v21 = *a1;
      v20 = a1[1];
      if (v20)
      {
        v22 = (unint64_t *)(v20 + 16);
        do
          v23 = __ldxr(v22);
        while (__stxr(v23 + 1, v22));
      }
      v24 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)*MEMORY[0x1E0DDB688] + 16))(*MEMORY[0x1E0DDB688], 40, 8);
      *(_DWORD *)(v24 + 16) = 0;
      *(_QWORD *)(v24 + 24) = v21;
      *(_QWORD *)(v24 + 32) = v20;
      *(_QWORD *)v24 = &off_1E69DAFF8;
      *(_QWORD *)(v24 + 8) = 0;
      return (std::chrono::steady_clock::time_point)caulk::concurrent::messenger::enqueue((caulk::concurrent::messenger *)&AU::FTSpatialAC::GetMessenger(void)::sMessenger, (caulk::concurrent::message *)v24);
    }
  }
  return result;
}

std::chrono::steady_clock::time_point AUFTSpatialAC::AURealTimeDebugLog<AUFTSpatialAC::AUFTSpatAUInStreamParams,256ul>::Buffer::Write(_QWORD *a1, __int128 *a2)
{
  unint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  unint64_t v7;
  BOOL v8;
  uint64_t v9;
  std::chrono::steady_clock::time_point result;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  uint64_t v24;
  __int128 v25;
  _BYTE v26[28];

  v4 = a1[85];
  v5 = a1 + 93;
  v6 = atomic_load(a1 + 93);
  v7 = v6 + ~v4;
  v8 = v4 >= v6;
  v9 = -257;
  if (!v8)
    v9 = 0;
  if (v7 == v9)
    AUFTSpatialAC::AURealTimeDebugLog<AUFTSpatialAC::AUFTSpatAUInStreamParams,256ul>::Buffer::Flush((uint64_t)a1);
  result.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  v25 = *a2;
  *(_OWORD *)v26 = a2[1];
  *(_OWORD *)&v26[12] = *(__int128 *)((char *)a2 + 28);
  v11 = a1[85];
  v12 = 256;
  if ((unint64_t)(v11 + 1) < 0x100)
    v12 = v11 + 1;
  v13 = (v11 - v12 + 257) % 0x101uLL - (257 - v12) + 1;
  v14 = atomic_load(v5);
  if (v13 == v14)
  {
    _os_assert_log();
    result.__d_.__rep_ = _os_crash();
    __break(1u);
  }
  else
  {
    v15 = (uint64_t)&a1[7 * v11 + 85];
    *(std::chrono::steady_clock::time_point *)(v15 + 72) = result;
    *(_OWORD *)(v15 + 80) = v25;
    *(_OWORD *)(v15 + 96) = *(_OWORD *)v26;
    *(_OWORD *)(v15 + 108) = *(_OWORD *)&v26[12];
    atomic_store(v13, a1 + 85);
    v16 = a1[85];
    v17 = atomic_load(a1 + 93);
    v18 = v17 + ~v16;
    v8 = v16 >= v17;
    v19 = 257;
    if (!v8)
      v19 = 0;
    if (v18 + v19 <= 0x7F)
    {
      AU::FTSpatialAC::GetMessenger((AU::FTSpatialAC *)result.__d_.__rep_);
      v21 = *a1;
      v20 = a1[1];
      if (v20)
      {
        v22 = (unint64_t *)(v20 + 16);
        do
          v23 = __ldxr(v22);
        while (__stxr(v23 + 1, v22));
      }
      v24 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)*MEMORY[0x1E0DDB688] + 16))(*MEMORY[0x1E0DDB688], 40, 8);
      *(_DWORD *)(v24 + 16) = 0;
      *(_QWORD *)(v24 + 24) = v21;
      *(_QWORD *)(v24 + 32) = v20;
      *(_QWORD *)v24 = &off_1E69DB048;
      *(_QWORD *)(v24 + 8) = 0;
      return (std::chrono::steady_clock::time_point)caulk::concurrent::messenger::enqueue((caulk::concurrent::messenger *)&AU::FTSpatialAC::GetMessenger(void)::sMessenger, (caulk::concurrent::message *)v24);
    }
  }
  return result;
}

void AUFTSpatialAC::AURealTimeDebugLog<AUFTSpatialAC::AUFTSpatAUInStreamParams,256ul>::Buffer::Flush(uint64_t a1)
{
  std::mutex *v2;
  unint64_t v3;
  unint64_t v4;
  BOOL v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  _QWORD v16[12];

  v16[3] = *MEMORY[0x1E0C80C00];
  v2 = (std::mutex *)(a1 + 16);
  std::mutex::lock((std::mutex *)(a1 + 16));
  v3 = atomic_load((unint64_t *)(a1 + 680));
  v4 = *(_QWORD *)(a1 + 744);
  v5 = v3 >= v4;
  v6 = v3 - v4;
  v7 = -257;
  if (v5)
    v7 = 0;
  if (v6 != v7)
  {
    if (!*(_BYTE *)(a1 + 648))
    {
      std::__optional_destruct_base<std::ofstream,false>::reset[abi:ne180100](a1 + 80);
      std::ofstream::basic_ofstream((_QWORD *)(a1 + 80));
      *(_BYTE *)(a1 + 648) = 1;
    }
    v16[0] = a1;
    v8 = atomic_load((unint64_t *)(a1 + 680));
    v9 = *(_QWORD *)(a1 + 744);
    v10 = 257;
    if (v8 >= v9)
      v10 = 0;
    v11 = v10 + v8 - v9;
    if (v11)
    {
      v12 = a1 + 752;
      v13 = v10 + v8;
      if (v10 + v8 < 0x102)
      {
        _ZN5boost8lockfree6detail15ringbuffer_baseINSt3__15tupleIJNS3_6chrono10time_pointINS5_12steady_clockENS5_8durationIxNS3_5ratioILl1ELl1000000000EEEEEEEN13AUFTSpatialAC24AUFTSpatAUInStreamParamsEEEEE22run_functor_and_deleteIZNSD_18AURealTimeDebugLogISE_Lm256EE6Buffer5FlushEvEUlRKT_E_EEvPSF_SP_SN_(v12 + 56 * v9, v12 + 56 * v9 + 56 * v11, v16);
        if (v13 == 257)
          v15 = 0;
        else
          v15 = v13;
      }
      else
      {
        v14 = v10 + v8;
        _ZN5boost8lockfree6detail15ringbuffer_baseINSt3__15tupleIJNS3_6chrono10time_pointINS5_12steady_clockENS5_8durationIxNS3_5ratioILl1ELl1000000000EEEEEEEN13AUFTSpatialAC24AUFTSpatAUInStreamParamsEEEEE22run_functor_and_deleteIZNSD_18AURealTimeDebugLogISE_Lm256EE6Buffer5FlushEvEUlRKT_E_EEvPSF_SP_SN_(v12 + 56 * v9, a1 + 15144, v16);
        _ZN5boost8lockfree6detail15ringbuffer_baseINSt3__15tupleIJNS3_6chrono10time_pointINS5_12steady_clockENS5_8durationIxNS3_5ratioILl1ELl1000000000EEEEEEEN13AUFTSpatialAC24AUFTSpatAUInStreamParamsEEEEE22run_functor_and_deleteIZNSD_18AURealTimeDebugLogISE_Lm256EE6Buffer5FlushEvEUlRKT_E_EEvPSF_SP_SN_(a1 + 752, v12 + 56 * v14 - 14392, v16);
        v15 = v13 - 257;
      }
      atomic_store(v15, (unint64_t *)(a1 + 744));
    }
  }
  std::mutex::unlock(v2);
}

void sub_1B63FDC78(void *a1, int a2)
{
  if (!a2)
    JUMPOUT(0x1B63FDC80);
  __clang_call_terminate(a1);
}

void _ZN5caulk10concurrent7details15rt_message_callIZN13AUFTSpatialAC18AURealTimeDebugLogINS3_24AUFTSpatAUInStreamParamsELm256EE6Buffer5WriteERKS5_EUlT_E_JNSt3__18weak_ptrIS7_EEEED1Ev(caulk::concurrent::message *this)
{
  std::__shared_weak_count *v2;

  *(_QWORD *)this = &off_1E69DB070;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 4);
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  caulk::concurrent::message::~message(this);
}

void _ZN5caulk10concurrent7details15rt_message_callIZN13AUFTSpatialAC18AURealTimeDebugLogINS3_24AUFTSpatAUInStreamParamsELm256EE6Buffer5WriteERKS5_EUlT_E_JNSt3__18weak_ptrIS7_EEEED0Ev(caulk::concurrent::message *this)
{
  std::__shared_weak_count *v2;

  *(_QWORD *)this = &off_1E69DB070;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 4);
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  caulk::concurrent::message::~message(this);
  JUMPOUT(0x1BCC95CECLL);
}

caulk::concurrent::message **_ZN5caulk10concurrent7details15rt_message_callIZN13AUFTSpatialAC18AURealTimeDebugLogINS3_24AUFTSpatAUInStreamParamsELm256EE6Buffer5WriteERKS5_EUlT_E_JNSt3__18weak_ptrIS7_EEEE7performEv(caulk::concurrent::message *a1)
{
  caulk::concurrent::message *v2;

  v2 = a1;
  _ZN5caulk10concurrent7details12message_callIZN13AUFTSpatialAC18AURealTimeDebugLogINS3_24AUFTSpatAUInStreamParamsELm256EE6Buffer5WriteERKS5_EUlT_E_JNSt3__18weak_ptrIS7_EEEE7performEv((uint64_t)a1);
  return _ZN5caulk10concurrent7details15rt_message_callIZN13AUFTSpatialAC18AURealTimeDebugLogINS3_24AUFTSpatAUInStreamParamsELm256EE6Buffer5WriteERKS5_EUlT_E_JNSt3__18weak_ptrIS7_EEEE10rt_cleanupD2Ev(&v2);
}

void sub_1B63FDD44(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  _ZN5caulk10concurrent7details15rt_message_callIZN13AUFTSpatialAC18AURealTimeDebugLogINS3_24AUFTSpatAUInStreamParamsELm256EE6Buffer5WriteERKS5_EUlT_E_JNSt3__18weak_ptrIS7_EEEE10rt_cleanupD2Ev((caulk::concurrent::message **)va);
  _Unwind_Resume(a1);
}

void _ZN5caulk10concurrent7details12message_callIZN13AUFTSpatialAC18AURealTimeDebugLogINS3_24AUFTSpatAUInStreamParamsELm256EE6Buffer5WriteERKS5_EUlT_E_JNSt3__18weak_ptrIS7_EEEE7performEv(uint64_t a1)
{
  std::__shared_weak_count *v1;
  uint64_t v2;
  unint64_t *p_shared_weak_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;

  v1 = *(std::__shared_weak_count **)(a1 + 32);
  if (v1)
  {
    v2 = *(_QWORD *)(a1 + 24);
    p_shared_weak_owners = (unint64_t *)&v1->__shared_weak_owners_;
    do
      v4 = __ldxr(p_shared_weak_owners);
    while (__stxr(v4 + 1, p_shared_weak_owners));
    v5 = std::__shared_weak_count::lock(v1);
    if (v5)
    {
      v6 = v5;
      if (v2)
        AUFTSpatialAC::AURealTimeDebugLog<AUFTSpatialAC::AUFTSpatAUInStreamParams,256ul>::Buffer::Flush(v2);
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v8 = __ldaxr(p_shared_owners);
      while (__stlxr(v8 - 1, p_shared_owners));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
    std::__shared_weak_count::__release_weak(v1);
  }
}

caulk::concurrent::message **_ZN5caulk10concurrent7details15rt_message_callIZN13AUFTSpatialAC18AURealTimeDebugLogINS3_24AUFTSpatAUInStreamParamsELm256EE6Buffer5WriteERKS5_EUlT_E_JNSt3__18weak_ptrIS7_EEEE10rt_cleanupD2Ev(caulk::concurrent::message **a1)
{
  caulk::concurrent::message *v2;
  std::__shared_weak_count *v3;

  v2 = *a1;
  *(_QWORD *)v2 = &off_1E69DB070;
  v3 = (std::__shared_weak_count *)*((_QWORD *)v2 + 4);
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  caulk::concurrent::message::~message(v2);
  (*(void (**)(_QWORD, caulk::concurrent::message *, uint64_t, uint64_t))(*(_QWORD *)*MEMORY[0x1E0DDB688] + 24))(*MEMORY[0x1E0DDB688], v2, 40, 8);
  return a1;
}

void _ZN5caulk10concurrent7details12message_callIZN13AUFTSpatialAC18AURealTimeDebugLogINS3_24AUFTSpatAUInStreamParamsELm256EE6Buffer5WriteERKS5_EUlT_E_JNSt3__18weak_ptrIS7_EEEED1Ev(caulk::concurrent::message *this)
{
  std::__shared_weak_count *v2;

  *(_QWORD *)this = &off_1E69DB070;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 4);
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  caulk::concurrent::message::~message(this);
}

void _ZN5caulk10concurrent7details12message_callIZN13AUFTSpatialAC18AURealTimeDebugLogINS3_24AUFTSpatAUInStreamParamsELm256EE6Buffer5WriteERKS5_EUlT_E_JNSt3__18weak_ptrIS7_EEEED0Ev(caulk::concurrent::message *this)
{
  std::__shared_weak_count *v2;

  *(_QWORD *)this = &off_1E69DB070;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 4);
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  caulk::concurrent::message::~message(this);
  JUMPOUT(0x1BCC95CECLL);
}

uint64_t std::__optional_destruct_base<std::ofstream,false>::reset[abi:ne180100](uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  if (*(_BYTE *)(result + 568))
  {
    v1 = result;
    v2 = MEMORY[0x1E0DE4F48];
    v3 = *MEMORY[0x1E0DE4F48];
    *(_QWORD *)result = *MEMORY[0x1E0DE4F48];
    *(_QWORD *)(result + *(_QWORD *)(v3 - 24)) = *(_QWORD *)(v2 + 24);
    MEMORY[0x1BCC95788](result + 8);
    std::ostream::~ostream();
    result = MEMORY[0x1BCC95BE4](v1 + 416);
    *(_BYTE *)(v1 + 568) = 0;
  }
  return result;
}

os_log_t ___Z16AUFTSpatialACLogv_block_invoke()
{
  os_log_t result;

  result = os_log_create("com.apple.coreaudio", "AUFTSpatialAC");
  AUFTSpatialACLog(void)::gLog = (uint64_t)result;
  return result;
}

void _ZN5boost8lockfree6detail15ringbuffer_baseINSt3__15tupleIJNS3_6chrono10time_pointINS5_12steady_clockENS5_8durationIxNS3_5ratioILl1ELl1000000000EEEEEEEN13AUFTSpatialAC24AUFTSpatAUInStreamParamsEEEEE22run_functor_and_deleteIZNSD_18AURealTimeDebugLogISE_Lm256EE6Buffer5FlushEvEUlRKT_E_EEvPSF_SP_SN_(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;

  if (a1 != a2)
  {
    v5 = a1;
    do
    {
      v6 = (_QWORD *)(*a3 + 80);
      AUFTSpatialAC::Log(v6, (uint64_t *)v5);
      AUFTSpatialACLogCSV<unsigned int>(v6, *(_DWORD *)(v5 + 8));
      AUFTSpatialACLogCSV<unsigned int>(v6, *(_DWORD *)(v5 + 12));
      AUFTSpatialACLogCSV<BOOL>(v6, *(_BYTE *)(v5 + 16), ", ");
      AUFTSpatialACLogCSV<BOOL>(v6, *(_BYTE *)(v5 + 17), ", ");
      AUFTSpatialACLogCSV<BOOL>(v6, *(_BYTE *)(v5 + 18), ", ");
      AUFTSpatialACLogCSV<unsigned int>(v6, *(_DWORD *)(v5 + 20));
      v7 = v5 + 24;
      AUFTSpatialACLogCSV<float>(v6, (float *)v7, ", ");
      v7 += 4;
      AUFTSpatialACLogCSV<float>(v6, (float *)v7, ", ");
      v7 += 4;
      AUFTSpatialACLogCSV<float>(v6, (float *)v7, ", ");
      v7 += 4;
      AUFTSpatialACLogCSV<float>(v6, (float *)v7, ", ");
      v7 += 4;
      AUFTSpatialACLogCSV<float>(v6, (float *)v7, ", ");
      v7 += 4;
      AUFTSpatialACLogCSV<float>(v6, (float *)v7, ", ");
      AUFTSpatialACLogCSV<BOOL>(v6, *(_BYTE *)(v7 + 4), "\n");
      v5 = v7 + 12;
    }
    while (v5 != a2);
  }
}

_QWORD *AUFTSpatialAC::Log(_QWORD *a1, uint64_t *a2)
{
  uint64_t v4;
  tm *v5;
  size_t v6;
  size_t v7;
  _QWORD *v8;
  std::chrono::system_clock::time_point __t;
  char __s[16];
  __int128 v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v13 = 0u;
  v14 = 0u;
  *(_OWORD *)__s = 0u;
  v12 = 0u;
  __t.__d_.__rep_ = std::chrono::system_clock::now().__d_.__rep_;
  __t.__d_.__rep_ = std::chrono::system_clock::to_time_t(&__t);
  v4 = *a2;
  v5 = localtime(&__t.__d_.__rep_);
  v6 = strftime(__s, 0x40uLL, "%T", v5);
  sprintf(&__s[v6], ":%03lld", v4 / 1000000 % 1000);
  v7 = strlen(__s);
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)__s, v7);
  return std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)", ", 2);
}

void sub_1B63FE1E0(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

void AUFTSpatialACLogCSV<unsigned int>(_QWORD *a1, int a2)
{
  std::string *p_p;
  std::string::size_type size;
  _QWORD *v5;
  std::string __p;
  int v7;
  std::string::value_type *v8;
  char v9;
  int v10;
  _BYTE v11[6];
  std::string::value_type v12[2];
  std::string::value_type *v13;
  std::string::value_type *v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  memset(&__p, 0, sizeof(__p));
  v13 = v11;
  v14 = v12;
  v7 = a2;
  v8 = v12;
  v9 = 48;
  v10 = 48;
  v13 = (std::string::value_type *)boost::detail::lcast_put_unsigned<std::char_traits<char>,unsigned int,char>::convert((uint64_t)&v7);
  v14 = v12;
  std::string::__assign_trivial[abi:ne180100]<char const*,char const*>(&__p, v13, v12, v12 - v13);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_p = &__p;
  else
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    size = __p.__r_.__value_.__l.__size_;
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)p_p, size);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)", ", 2);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_1B63FE2D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void AUFTSpatialACLogCSV<BOOL>(_QWORD *a1, char a2, const char *a3)
{
  std::string::value_type v5;
  std::string *p_p;
  std::string::size_type size;
  _QWORD *v8;
  size_t v9;
  std::string __p;
  std::string::value_type v11;
  std::string::value_type v12[5];
  std::string::value_type *v13;
  std::string::value_type *v14;

  memset(&__p, 0, sizeof(__p));
  if (a2)
    v5 = 49;
  else
    v5 = 48;
  v11 = v5;
  v13 = &v11;
  v14 = v12;
  std::string::__assign_trivial[abi:ne180100]<char const*,char const*>(&__p, &v11, v12, 1uLL);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_p = &__p;
  else
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    size = __p.__r_.__value_.__l.__size_;
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)p_p, size);
  v9 = strlen(a3);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)a3, v9);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_1B63FE3AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void AUFTSpatialACLogCSV<float>(_QWORD *a1, float *a2, const char *a3)
{
  std::string *p_p;
  std::string::size_type size;
  _QWORD *v7;
  size_t v8;
  std::string __p;
  std::bad_cast v10;

  memset(&__p, 0, sizeof(__p));
  if (!boost::conversion::detail::try_lexical_convert<std::string,float>(a2, &__p))
  {
    std::bad_cast::bad_cast(&v10);
    v10.__vftable = (std::bad_cast_vtbl *)&unk_1E69B5650;
    boost::throw_exception<boost::bad_lexical_cast>();
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_p = &__p;
  else
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    size = __p.__r_.__value_.__l.__size_;
  v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)p_p, size);
  v8 = strlen(a3);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)a3, v8);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_1B63FE484(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, std::exception a15)
{
  std::exception::~exception(&a15);
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

std::chrono::steady_clock::time_point AUFTSpatialAC::AURealTimeDebugLog<AUFTSpatialAC::AUFTSpatAUOutStreamParams,256ul>::Buffer::Write(_QWORD *a1, __int128 *a2)
{
  unint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  unint64_t v7;
  BOOL v8;
  uint64_t v9;
  std::chrono::steady_clock::time_point result;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  uint64_t v24;
  __int128 v25;
  uint64_t v26;

  v4 = a1[85];
  v5 = a1 + 93;
  v6 = atomic_load(a1 + 93);
  v7 = v6 + ~v4;
  v8 = v4 >= v6;
  v9 = -257;
  if (!v8)
    v9 = 0;
  if (v7 == v9)
    AUFTSpatialAC::AURealTimeDebugLog<AUFTSpatialAC::AUFTSpatAUOutStreamParams,256ul>::Buffer::Flush((uint64_t)a1);
  result.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  v25 = *a2;
  v26 = *((_QWORD *)a2 + 2);
  v11 = a1[85];
  v12 = 256;
  if ((unint64_t)(v11 + 1) < 0x100)
    v12 = v11 + 1;
  v13 = (v11 - v12 + 257) % 0x101uLL - (257 - v12) + 1;
  v14 = atomic_load(v5);
  if (v13 == v14)
  {
    _os_assert_log();
    result.__d_.__rep_ = _os_crash();
    __break(1u);
  }
  else
  {
    v15 = (uint64_t)&a1[4 * v11 + 85];
    *(std::chrono::steady_clock::time_point *)(v15 + 72) = result;
    *(_OWORD *)(v15 + 80) = v25;
    *(_QWORD *)(v15 + 96) = v26;
    atomic_store(v13, a1 + 85);
    v16 = a1[85];
    v17 = atomic_load(a1 + 93);
    v18 = v17 + ~v16;
    v8 = v16 >= v17;
    v19 = 257;
    if (!v8)
      v19 = 0;
    if (v18 + v19 <= 0x7F)
    {
      AU::FTSpatialAC::GetMessenger((AU::FTSpatialAC *)result.__d_.__rep_);
      v21 = *a1;
      v20 = a1[1];
      if (v20)
      {
        v22 = (unint64_t *)(v20 + 16);
        do
          v23 = __ldxr(v22);
        while (__stxr(v23 + 1, v22));
      }
      v24 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)*MEMORY[0x1E0DDB688] + 16))(*MEMORY[0x1E0DDB688], 40, 8);
      *(_DWORD *)(v24 + 16) = 0;
      *(_QWORD *)(v24 + 24) = v21;
      *(_QWORD *)(v24 + 32) = v20;
      *(_QWORD *)v24 = &off_1E69DB098;
      *(_QWORD *)(v24 + 8) = 0;
      return (std::chrono::steady_clock::time_point)caulk::concurrent::messenger::enqueue((caulk::concurrent::messenger *)&AU::FTSpatialAC::GetMessenger(void)::sMessenger, (caulk::concurrent::message *)v24);
    }
  }
  return result;
}

void AUFTSpatialAC::AURealTimeDebugLog<AUFTSpatialAC::AUFTSpatAUOutStreamParams,256ul>::Buffer::Flush(uint64_t a1)
{
  std::mutex *v2;
  unint64_t v3;
  unint64_t v4;
  BOOL v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  _QWORD v16[12];

  v16[3] = *MEMORY[0x1E0C80C00];
  v2 = (std::mutex *)(a1 + 16);
  std::mutex::lock((std::mutex *)(a1 + 16));
  v3 = atomic_load((unint64_t *)(a1 + 680));
  v4 = *(_QWORD *)(a1 + 744);
  v5 = v3 >= v4;
  v6 = v3 - v4;
  v7 = -257;
  if (v5)
    v7 = 0;
  if (v6 != v7)
  {
    if (!*(_BYTE *)(a1 + 648))
    {
      std::__optional_destruct_base<std::ofstream,false>::reset[abi:ne180100](a1 + 80);
      std::ofstream::basic_ofstream((_QWORD *)(a1 + 80));
      *(_BYTE *)(a1 + 648) = 1;
    }
    v16[0] = a1;
    v8 = atomic_load((unint64_t *)(a1 + 680));
    v9 = *(_QWORD *)(a1 + 744);
    v10 = 257;
    if (v8 >= v9)
      v10 = 0;
    v11 = v10 + v8 - v9;
    if (v11)
    {
      v12 = a1 + 752;
      v13 = v10 + v8;
      if (v10 + v8 < 0x102)
      {
        _ZN5boost8lockfree6detail15ringbuffer_baseINSt3__15tupleIJNS3_6chrono10time_pointINS5_12steady_clockENS5_8durationIxNS3_5ratioILl1ELl1000000000EEEEEEEN13AUFTSpatialAC25AUFTSpatAUOutStreamParamsEEEEE22run_functor_and_deleteIZNSD_18AURealTimeDebugLogISE_Lm256EE6Buffer5FlushEvEUlRKT_E_EEvPSF_SP_SN_((uint64_t *)(v12 + 32 * v9), (uint64_t *)(v12 + 32 * v9 + 32 * v11), v16);
        if (v13 == 257)
          v15 = 0;
        else
          v15 = v13;
      }
      else
      {
        v14 = v10 + v8;
        _ZN5boost8lockfree6detail15ringbuffer_baseINSt3__15tupleIJNS3_6chrono10time_pointINS5_12steady_clockENS5_8durationIxNS3_5ratioILl1ELl1000000000EEEEEEEN13AUFTSpatialAC25AUFTSpatAUOutStreamParamsEEEEE22run_functor_and_deleteIZNSD_18AURealTimeDebugLogISE_Lm256EE6Buffer5FlushEvEUlRKT_E_EEvPSF_SP_SN_((uint64_t *)(v12 + 32 * v9), (uint64_t *)(a1 + 8976), v16);
        _ZN5boost8lockfree6detail15ringbuffer_baseINSt3__15tupleIJNS3_6chrono10time_pointINS5_12steady_clockENS5_8durationIxNS3_5ratioILl1ELl1000000000EEEEEEEN13AUFTSpatialAC25AUFTSpatAUOutStreamParamsEEEEE22run_functor_and_deleteIZNSD_18AURealTimeDebugLogISE_Lm256EE6Buffer5FlushEvEUlRKT_E_EEvPSF_SP_SN_((uint64_t *)(a1 + 752), (uint64_t *)(v12 + 32 * v14 - 8224), v16);
        v15 = v13 - 257;
      }
      atomic_store(v15, (unint64_t *)(a1 + 744));
    }
  }
  std::mutex::unlock(v2);
}

void sub_1B63FE874(void *a1, int a2)
{
  if (!a2)
    JUMPOUT(0x1B63FE87CLL);
  __clang_call_terminate(a1);
}

void _ZN5caulk10concurrent7details15rt_message_callIZN13AUFTSpatialAC18AURealTimeDebugLogINS3_25AUFTSpatAUOutStreamParamsELm256EE6Buffer5WriteERKS5_EUlT_E_JNSt3__18weak_ptrIS7_EEEED1Ev(caulk::concurrent::message *this)
{
  std::__shared_weak_count *v2;

  *(_QWORD *)this = &off_1E69DB0C0;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 4);
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  caulk::concurrent::message::~message(this);
}

void _ZN5caulk10concurrent7details15rt_message_callIZN13AUFTSpatialAC18AURealTimeDebugLogINS3_25AUFTSpatAUOutStreamParamsELm256EE6Buffer5WriteERKS5_EUlT_E_JNSt3__18weak_ptrIS7_EEEED0Ev(caulk::concurrent::message *this)
{
  std::__shared_weak_count *v2;

  *(_QWORD *)this = &off_1E69DB0C0;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 4);
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  caulk::concurrent::message::~message(this);
  JUMPOUT(0x1BCC95CECLL);
}

caulk::concurrent::message **_ZN5caulk10concurrent7details15rt_message_callIZN13AUFTSpatialAC18AURealTimeDebugLogINS3_25AUFTSpatAUOutStreamParamsELm256EE6Buffer5WriteERKS5_EUlT_E_JNSt3__18weak_ptrIS7_EEEE7performEv(caulk::concurrent::message *a1)
{
  caulk::concurrent::message *v2;

  v2 = a1;
  _ZN5caulk10concurrent7details12message_callIZN13AUFTSpatialAC18AURealTimeDebugLogINS3_25AUFTSpatAUOutStreamParamsELm256EE6Buffer5WriteERKS5_EUlT_E_JNSt3__18weak_ptrIS7_EEEE7performEv((uint64_t)a1);
  return _ZN5caulk10concurrent7details15rt_message_callIZN13AUFTSpatialAC18AURealTimeDebugLogINS3_25AUFTSpatAUOutStreamParamsELm256EE6Buffer5WriteERKS5_EUlT_E_JNSt3__18weak_ptrIS7_EEEE10rt_cleanupD2Ev(&v2);
}

void sub_1B63FE940(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  _ZN5caulk10concurrent7details15rt_message_callIZN13AUFTSpatialAC18AURealTimeDebugLogINS3_25AUFTSpatAUOutStreamParamsELm256EE6Buffer5WriteERKS5_EUlT_E_JNSt3__18weak_ptrIS7_EEEE10rt_cleanupD2Ev((caulk::concurrent::message **)va);
  _Unwind_Resume(a1);
}

void _ZN5caulk10concurrent7details12message_callIZN13AUFTSpatialAC18AURealTimeDebugLogINS3_25AUFTSpatAUOutStreamParamsELm256EE6Buffer5WriteERKS5_EUlT_E_JNSt3__18weak_ptrIS7_EEEE7performEv(uint64_t a1)
{
  std::__shared_weak_count *v1;
  uint64_t v2;
  unint64_t *p_shared_weak_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;

  v1 = *(std::__shared_weak_count **)(a1 + 32);
  if (v1)
  {
    v2 = *(_QWORD *)(a1 + 24);
    p_shared_weak_owners = (unint64_t *)&v1->__shared_weak_owners_;
    do
      v4 = __ldxr(p_shared_weak_owners);
    while (__stxr(v4 + 1, p_shared_weak_owners));
    v5 = std::__shared_weak_count::lock(v1);
    if (v5)
    {
      v6 = v5;
      if (v2)
        AUFTSpatialAC::AURealTimeDebugLog<AUFTSpatialAC::AUFTSpatAUOutStreamParams,256ul>::Buffer::Flush(v2);
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v8 = __ldaxr(p_shared_owners);
      while (__stlxr(v8 - 1, p_shared_owners));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
    std::__shared_weak_count::__release_weak(v1);
  }
}

caulk::concurrent::message **_ZN5caulk10concurrent7details15rt_message_callIZN13AUFTSpatialAC18AURealTimeDebugLogINS3_25AUFTSpatAUOutStreamParamsELm256EE6Buffer5WriteERKS5_EUlT_E_JNSt3__18weak_ptrIS7_EEEE10rt_cleanupD2Ev(caulk::concurrent::message **a1)
{
  caulk::concurrent::message *v2;
  std::__shared_weak_count *v3;

  v2 = *a1;
  *(_QWORD *)v2 = &off_1E69DB0C0;
  v3 = (std::__shared_weak_count *)*((_QWORD *)v2 + 4);
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  caulk::concurrent::message::~message(v2);
  (*(void (**)(_QWORD, caulk::concurrent::message *, uint64_t, uint64_t))(*(_QWORD *)*MEMORY[0x1E0DDB688] + 24))(*MEMORY[0x1E0DDB688], v2, 40, 8);
  return a1;
}

void _ZN5caulk10concurrent7details12message_callIZN13AUFTSpatialAC18AURealTimeDebugLogINS3_25AUFTSpatAUOutStreamParamsELm256EE6Buffer5WriteERKS5_EUlT_E_JNSt3__18weak_ptrIS7_EEEED1Ev(caulk::concurrent::message *this)
{
  std::__shared_weak_count *v2;

  *(_QWORD *)this = &off_1E69DB0C0;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 4);
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  caulk::concurrent::message::~message(this);
}

void _ZN5caulk10concurrent7details12message_callIZN13AUFTSpatialAC18AURealTimeDebugLogINS3_25AUFTSpatAUOutStreamParamsELm256EE6Buffer5WriteERKS5_EUlT_E_JNSt3__18weak_ptrIS7_EEEED0Ev(caulk::concurrent::message *this)
{
  std::__shared_weak_count *v2;

  *(_QWORD *)this = &off_1E69DB0C0;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 4);
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  caulk::concurrent::message::~message(this);
  JUMPOUT(0x1BCC95CECLL);
}

void _ZN5boost8lockfree6detail15ringbuffer_baseINSt3__15tupleIJNS3_6chrono10time_pointINS5_12steady_clockENS5_8durationIxNS3_5ratioILl1ELl1000000000EEEEEEEN13AUFTSpatialAC25AUFTSpatAUOutStreamParamsEEEEE22run_functor_and_deleteIZNSD_18AURealTimeDebugLogISE_Lm256EE6Buffer5FlushEvEUlRKT_E_EEvPSF_SP_SN_(uint64_t *a1, uint64_t *a2, _QWORD *a3)
{
  uint64_t *v5;
  _QWORD *v6;
  uint64_t *v7;

  if (a1 != a2)
  {
    v5 = a1;
    do
    {
      v6 = (_QWORD *)(*a3 + 80);
      AUFTSpatialAC::Log(v6, v5);
      v7 = v5 + 1;
      AUFTSpatialACLogCSV<float>(v6, (float *)v7, ", ");
      v7 = (uint64_t *)((char *)v7 + 4);
      AUFTSpatialACLogCSV<float>(v6, (float *)v7, ", ");
      v7 = (uint64_t *)((char *)v7 + 4);
      AUFTSpatialACLogCSV<float>(v6, (float *)v7, ", ");
      v7 = (uint64_t *)((char *)v7 + 4);
      AUFTSpatialACLogCSV<float>(v6, (float *)v7, ", ");
      AUFTSpatialACLogCSV<BOOL>(v6, *((_BYTE *)v7++ + 4), ", ");
      AUFTSpatialACLogCSV<float>(v6, (float *)v7, "\n");
      v5 = (uint64_t *)((char *)v7 + 4);
    }
    while (v5 != a2);
  }
}

void AUFTSpatialAC::AURealTimeDebugLog<AUFTSpatialAC::AUFTWindowParams,256ul>::Buffer::Flush(uint64_t a1)
{
  std::mutex *v2;
  unint64_t v3;
  unint64_t v4;
  BOOL v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  _QWORD v16[12];

  v16[3] = *MEMORY[0x1E0C80C00];
  v2 = (std::mutex *)(a1 + 16);
  std::mutex::lock((std::mutex *)(a1 + 16));
  v3 = atomic_load((unint64_t *)(a1 + 680));
  v4 = *(_QWORD *)(a1 + 744);
  v5 = v3 >= v4;
  v6 = v3 - v4;
  v7 = -257;
  if (v5)
    v7 = 0;
  if (v6 != v7)
  {
    if (!*(_BYTE *)(a1 + 648))
    {
      std::__optional_destruct_base<std::ofstream,false>::reset[abi:ne180100](a1 + 80);
      std::ofstream::basic_ofstream((_QWORD *)(a1 + 80));
      *(_BYTE *)(a1 + 648) = 1;
    }
    v16[0] = a1;
    v8 = atomic_load((unint64_t *)(a1 + 680));
    v9 = *(_QWORD *)(a1 + 744);
    v10 = 257;
    if (v8 >= v9)
      v10 = 0;
    v11 = v10 + v8 - v9;
    if (v11)
    {
      v12 = a1 + 752;
      v13 = v10 + v8;
      if (v10 + v8 < 0x102)
      {
        _ZN5boost8lockfree6detail15ringbuffer_baseINSt3__15tupleIJNS3_6chrono10time_pointINS5_12steady_clockENS5_8durationIxNS3_5ratioILl1ELl1000000000EEEEEEEN13AUFTSpatialAC16AUFTWindowParamsEEEEE22run_functor_and_deleteIZNSD_18AURealTimeDebugLogISE_Lm256EE6Buffer5FlushEvEUlRKT_E_EEvPSF_SP_SN_((uint64_t *)(v12 + 32 * v9), (uint64_t *)(v12 + 32 * v9 + 32 * v11), v16);
        if (v13 == 257)
          v15 = 0;
        else
          v15 = v13;
      }
      else
      {
        v14 = v10 + v8;
        _ZN5boost8lockfree6detail15ringbuffer_baseINSt3__15tupleIJNS3_6chrono10time_pointINS5_12steady_clockENS5_8durationIxNS3_5ratioILl1ELl1000000000EEEEEEEN13AUFTSpatialAC16AUFTWindowParamsEEEEE22run_functor_and_deleteIZNSD_18AURealTimeDebugLogISE_Lm256EE6Buffer5FlushEvEUlRKT_E_EEvPSF_SP_SN_((uint64_t *)(v12 + 32 * v9), (uint64_t *)(a1 + 8976), v16);
        _ZN5boost8lockfree6detail15ringbuffer_baseINSt3__15tupleIJNS3_6chrono10time_pointINS5_12steady_clockENS5_8durationIxNS3_5ratioILl1ELl1000000000EEEEEEEN13AUFTSpatialAC16AUFTWindowParamsEEEEE22run_functor_and_deleteIZNSD_18AURealTimeDebugLogISE_Lm256EE6Buffer5FlushEvEUlRKT_E_EEvPSF_SP_SN_((uint64_t *)(a1 + 752), (uint64_t *)(v12 + 32 * v14 - 8224), v16);
        v15 = v13 - 257;
      }
      atomic_store(v15, (unint64_t *)(a1 + 744));
    }
  }
  std::mutex::unlock(v2);
}

void sub_1B63FEE00(void *a1, int a2)
{
  if (!a2)
    JUMPOUT(0x1B63FEE08);
  __clang_call_terminate(a1);
}

void _ZN5caulk10concurrent7details15rt_message_callIZN13AUFTSpatialAC18AURealTimeDebugLogINS3_16AUFTWindowParamsELm256EE6Buffer5WriteERKS5_EUlT_E_JNSt3__18weak_ptrIS7_EEEED1Ev(caulk::concurrent::message *this)
{
  std::__shared_weak_count *v2;

  *(_QWORD *)this = &off_1E69DB020;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 4);
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  caulk::concurrent::message::~message(this);
}

void _ZN5caulk10concurrent7details15rt_message_callIZN13AUFTSpatialAC18AURealTimeDebugLogINS3_16AUFTWindowParamsELm256EE6Buffer5WriteERKS5_EUlT_E_JNSt3__18weak_ptrIS7_EEEED0Ev(caulk::concurrent::message *this)
{
  std::__shared_weak_count *v2;

  *(_QWORD *)this = &off_1E69DB020;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 4);
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  caulk::concurrent::message::~message(this);
  JUMPOUT(0x1BCC95CECLL);
}

caulk::concurrent::message **_ZN5caulk10concurrent7details15rt_message_callIZN13AUFTSpatialAC18AURealTimeDebugLogINS3_16AUFTWindowParamsELm256EE6Buffer5WriteERKS5_EUlT_E_JNSt3__18weak_ptrIS7_EEEE7performEv(caulk::concurrent::message *a1)
{
  caulk::concurrent::message *v2;

  v2 = a1;
  _ZN5caulk10concurrent7details12message_callIZN13AUFTSpatialAC18AURealTimeDebugLogINS3_16AUFTWindowParamsELm256EE6Buffer5WriteERKS5_EUlT_E_JNSt3__18weak_ptrIS7_EEEE7performEv((uint64_t)a1);
  return _ZN5caulk10concurrent7details15rt_message_callIZN13AUFTSpatialAC18AURealTimeDebugLogINS3_16AUFTWindowParamsELm256EE6Buffer5WriteERKS5_EUlT_E_JNSt3__18weak_ptrIS7_EEEE10rt_cleanupD2Ev(&v2);
}

void sub_1B63FEECC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  _ZN5caulk10concurrent7details15rt_message_callIZN13AUFTSpatialAC18AURealTimeDebugLogINS3_16AUFTWindowParamsELm256EE6Buffer5WriteERKS5_EUlT_E_JNSt3__18weak_ptrIS7_EEEE10rt_cleanupD2Ev((caulk::concurrent::message **)va);
  _Unwind_Resume(a1);
}

void _ZN5caulk10concurrent7details12message_callIZN13AUFTSpatialAC18AURealTimeDebugLogINS3_16AUFTWindowParamsELm256EE6Buffer5WriteERKS5_EUlT_E_JNSt3__18weak_ptrIS7_EEEE7performEv(uint64_t a1)
{
  std::__shared_weak_count *v1;
  uint64_t v2;
  unint64_t *p_shared_weak_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;

  v1 = *(std::__shared_weak_count **)(a1 + 32);
  if (v1)
  {
    v2 = *(_QWORD *)(a1 + 24);
    p_shared_weak_owners = (unint64_t *)&v1->__shared_weak_owners_;
    do
      v4 = __ldxr(p_shared_weak_owners);
    while (__stxr(v4 + 1, p_shared_weak_owners));
    v5 = std::__shared_weak_count::lock(v1);
    if (v5)
    {
      v6 = v5;
      if (v2)
        AUFTSpatialAC::AURealTimeDebugLog<AUFTSpatialAC::AUFTWindowParams,256ul>::Buffer::Flush(v2);
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v8 = __ldaxr(p_shared_owners);
      while (__stlxr(v8 - 1, p_shared_owners));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
    std::__shared_weak_count::__release_weak(v1);
  }
}

caulk::concurrent::message **_ZN5caulk10concurrent7details15rt_message_callIZN13AUFTSpatialAC18AURealTimeDebugLogINS3_16AUFTWindowParamsELm256EE6Buffer5WriteERKS5_EUlT_E_JNSt3__18weak_ptrIS7_EEEE10rt_cleanupD2Ev(caulk::concurrent::message **a1)
{
  caulk::concurrent::message *v2;
  std::__shared_weak_count *v3;

  v2 = *a1;
  *(_QWORD *)v2 = &off_1E69DB020;
  v3 = (std::__shared_weak_count *)*((_QWORD *)v2 + 4);
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  caulk::concurrent::message::~message(v2);
  (*(void (**)(_QWORD, caulk::concurrent::message *, uint64_t, uint64_t))(*(_QWORD *)*MEMORY[0x1E0DDB688] + 24))(*MEMORY[0x1E0DDB688], v2, 40, 8);
  return a1;
}

void _ZN5caulk10concurrent7details12message_callIZN13AUFTSpatialAC18AURealTimeDebugLogINS3_16AUFTWindowParamsELm256EE6Buffer5WriteERKS5_EUlT_E_JNSt3__18weak_ptrIS7_EEEED1Ev(caulk::concurrent::message *this)
{
  std::__shared_weak_count *v2;

  *(_QWORD *)this = &off_1E69DB020;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 4);
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  caulk::concurrent::message::~message(this);
}

void _ZN5caulk10concurrent7details12message_callIZN13AUFTSpatialAC18AURealTimeDebugLogINS3_16AUFTWindowParamsELm256EE6Buffer5WriteERKS5_EUlT_E_JNSt3__18weak_ptrIS7_EEEED0Ev(caulk::concurrent::message *this)
{
  std::__shared_weak_count *v2;

  *(_QWORD *)this = &off_1E69DB020;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 4);
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  caulk::concurrent::message::~message(this);
  JUMPOUT(0x1BCC95CECLL);
}

void _ZN5boost8lockfree6detail15ringbuffer_baseINSt3__15tupleIJNS3_6chrono10time_pointINS5_12steady_clockENS5_8durationIxNS3_5ratioILl1ELl1000000000EEEEEEEN13AUFTSpatialAC16AUFTWindowParamsEEEEE22run_functor_and_deleteIZNSD_18AURealTimeDebugLogISE_Lm256EE6Buffer5FlushEvEUlRKT_E_EEvPSF_SP_SN_(uint64_t *a1, uint64_t *a2, _QWORD *a3)
{
  uint64_t *v5;
  _QWORD *v6;
  float *v7;

  if (a1 != a2)
  {
    v5 = a1;
    do
    {
      v6 = (_QWORD *)(*a3 + 80);
      AUFTSpatialAC::Log(v6, v5);
      v7 = (float *)(v5 + 1);
      AUFTSpatialACLogCSV<float>(v6, v7++, ", ");
      AUFTSpatialACLogCSV<float>(v6, v7++, ", ");
      AUFTSpatialACLogCSV<float>(v6, v7++, ", ");
      AUFTSpatialACLogCSV<float>(v6, v7++, ", ");
      AUFTSpatialACLogCSV<float>(v6, v7, "\n");
      v5 = (uint64_t *)(v7 + 2);
    }
    while (v5 != a2);
  }
}

void AUFTSpatialAC::AURealTimeDebugLog<AUFTSpatialAC::AUFTOrientationParams,256ul>::Buffer::Flush(uint64_t a1)
{
  std::mutex *v2;
  unint64_t v3;
  unint64_t v4;
  BOOL v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  _QWORD v16[12];

  v16[3] = *MEMORY[0x1E0C80C00];
  v2 = (std::mutex *)(a1 + 16);
  std::mutex::lock((std::mutex *)(a1 + 16));
  v3 = atomic_load((unint64_t *)(a1 + 680));
  v4 = *(_QWORD *)(a1 + 744);
  v5 = v3 >= v4;
  v6 = v3 - v4;
  v7 = -257;
  if (v5)
    v7 = 0;
  if (v6 != v7)
  {
    if (!*(_BYTE *)(a1 + 648))
    {
      std::__optional_destruct_base<std::ofstream,false>::reset[abi:ne180100](a1 + 80);
      std::ofstream::basic_ofstream((_QWORD *)(a1 + 80));
      *(_BYTE *)(a1 + 648) = 1;
    }
    v16[0] = a1;
    v8 = atomic_load((unint64_t *)(a1 + 680));
    v9 = *(_QWORD *)(a1 + 744);
    v10 = 257;
    if (v8 >= v9)
      v10 = 0;
    v11 = v10 + v8 - v9;
    if (v11)
    {
      v12 = a1 + 752;
      v13 = v10 + v8;
      if (v10 + v8 < 0x102)
      {
        _ZN5boost8lockfree6detail15ringbuffer_baseINSt3__15tupleIJNS3_6chrono10time_pointINS5_12steady_clockENS5_8durationIxNS3_5ratioILl1ELl1000000000EEEEEEEN13AUFTSpatialAC21AUFTOrientationParamsEEEEE22run_functor_and_deleteIZNSD_18AURealTimeDebugLogISE_Lm256EE6Buffer5FlushEvEUlRKT_E_EEvPSF_SP_SN_((uint64_t *)(v12 + 24 * v9), (uint64_t *)(v12 + 24 * v9 + 24 * v11), v16);
        if (v13 == 257)
          v15 = 0;
        else
          v15 = v13;
      }
      else
      {
        v14 = v10 + v8;
        _ZN5boost8lockfree6detail15ringbuffer_baseINSt3__15tupleIJNS3_6chrono10time_pointINS5_12steady_clockENS5_8durationIxNS3_5ratioILl1ELl1000000000EEEEEEEN13AUFTSpatialAC21AUFTOrientationParamsEEEEE22run_functor_and_deleteIZNSD_18AURealTimeDebugLogISE_Lm256EE6Buffer5FlushEvEUlRKT_E_EEvPSF_SP_SN_((uint64_t *)(v12 + 24 * v9), (uint64_t *)(a1 + 6920), v16);
        _ZN5boost8lockfree6detail15ringbuffer_baseINSt3__15tupleIJNS3_6chrono10time_pointINS5_12steady_clockENS5_8durationIxNS3_5ratioILl1ELl1000000000EEEEEEEN13AUFTSpatialAC21AUFTOrientationParamsEEEEE22run_functor_and_deleteIZNSD_18AURealTimeDebugLogISE_Lm256EE6Buffer5FlushEvEUlRKT_E_EEvPSF_SP_SN_((uint64_t *)(a1 + 752), (uint64_t *)(v12 + 24 * v14 - 6168), v16);
        v15 = v13 - 257;
      }
      atomic_store(v15, (unint64_t *)(a1 + 744));
    }
  }
  std::mutex::unlock(v2);
}

void sub_1B63FF384(void *a1, int a2)
{
  if (!a2)
    JUMPOUT(0x1B63FF38CLL);
  __clang_call_terminate(a1);
}

void _ZN5caulk10concurrent7details15rt_message_callIZN13AUFTSpatialAC18AURealTimeDebugLogINS3_21AUFTOrientationParamsELm256EE6Buffer5WriteERKS5_EUlT_E_JNSt3__18weak_ptrIS7_EEEED1Ev(caulk::concurrent::message *this)
{
  std::__shared_weak_count *v2;

  *(_QWORD *)this = &off_1E69DAFD0;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 4);
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  caulk::concurrent::message::~message(this);
}

void _ZN5caulk10concurrent7details15rt_message_callIZN13AUFTSpatialAC18AURealTimeDebugLogINS3_21AUFTOrientationParamsELm256EE6Buffer5WriteERKS5_EUlT_E_JNSt3__18weak_ptrIS7_EEEED0Ev(caulk::concurrent::message *this)
{
  std::__shared_weak_count *v2;

  *(_QWORD *)this = &off_1E69DAFD0;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 4);
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  caulk::concurrent::message::~message(this);
  JUMPOUT(0x1BCC95CECLL);
}

caulk::concurrent::message **_ZN5caulk10concurrent7details15rt_message_callIZN13AUFTSpatialAC18AURealTimeDebugLogINS3_21AUFTOrientationParamsELm256EE6Buffer5WriteERKS5_EUlT_E_JNSt3__18weak_ptrIS7_EEEE7performEv(caulk::concurrent::message *a1)
{
  caulk::concurrent::message *v2;

  v2 = a1;
  _ZN5caulk10concurrent7details12message_callIZN13AUFTSpatialAC18AURealTimeDebugLogINS3_21AUFTOrientationParamsELm256EE6Buffer5WriteERKS5_EUlT_E_JNSt3__18weak_ptrIS7_EEEE7performEv((uint64_t)a1);
  return _ZN5caulk10concurrent7details15rt_message_callIZN13AUFTSpatialAC18AURealTimeDebugLogINS3_21AUFTOrientationParamsELm256EE6Buffer5WriteERKS5_EUlT_E_JNSt3__18weak_ptrIS7_EEEE10rt_cleanupD2Ev(&v2);
}

void sub_1B63FF450(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  _ZN5caulk10concurrent7details15rt_message_callIZN13AUFTSpatialAC18AURealTimeDebugLogINS3_21AUFTOrientationParamsELm256EE6Buffer5WriteERKS5_EUlT_E_JNSt3__18weak_ptrIS7_EEEE10rt_cleanupD2Ev((caulk::concurrent::message **)va);
  _Unwind_Resume(a1);
}

void _ZN5caulk10concurrent7details12message_callIZN13AUFTSpatialAC18AURealTimeDebugLogINS3_21AUFTOrientationParamsELm256EE6Buffer5WriteERKS5_EUlT_E_JNSt3__18weak_ptrIS7_EEEE7performEv(uint64_t a1)
{
  std::__shared_weak_count *v1;
  uint64_t v2;
  unint64_t *p_shared_weak_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;

  v1 = *(std::__shared_weak_count **)(a1 + 32);
  if (v1)
  {
    v2 = *(_QWORD *)(a1 + 24);
    p_shared_weak_owners = (unint64_t *)&v1->__shared_weak_owners_;
    do
      v4 = __ldxr(p_shared_weak_owners);
    while (__stxr(v4 + 1, p_shared_weak_owners));
    v5 = std::__shared_weak_count::lock(v1);
    if (v5)
    {
      v6 = v5;
      if (v2)
        AUFTSpatialAC::AURealTimeDebugLog<AUFTSpatialAC::AUFTOrientationParams,256ul>::Buffer::Flush(v2);
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v8 = __ldaxr(p_shared_owners);
      while (__stlxr(v8 - 1, p_shared_owners));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
    std::__shared_weak_count::__release_weak(v1);
  }
}

caulk::concurrent::message **_ZN5caulk10concurrent7details15rt_message_callIZN13AUFTSpatialAC18AURealTimeDebugLogINS3_21AUFTOrientationParamsELm256EE6Buffer5WriteERKS5_EUlT_E_JNSt3__18weak_ptrIS7_EEEE10rt_cleanupD2Ev(caulk::concurrent::message **a1)
{
  caulk::concurrent::message *v2;
  std::__shared_weak_count *v3;

  v2 = *a1;
  *(_QWORD *)v2 = &off_1E69DAFD0;
  v3 = (std::__shared_weak_count *)*((_QWORD *)v2 + 4);
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  caulk::concurrent::message::~message(v2);
  (*(void (**)(_QWORD, caulk::concurrent::message *, uint64_t, uint64_t))(*(_QWORD *)*MEMORY[0x1E0DDB688] + 24))(*MEMORY[0x1E0DDB688], v2, 40, 8);
  return a1;
}

void _ZN5caulk10concurrent7details12message_callIZN13AUFTSpatialAC18AURealTimeDebugLogINS3_21AUFTOrientationParamsELm256EE6Buffer5WriteERKS5_EUlT_E_JNSt3__18weak_ptrIS7_EEEED1Ev(caulk::concurrent::message *this)
{
  std::__shared_weak_count *v2;

  *(_QWORD *)this = &off_1E69DAFD0;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 4);
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  caulk::concurrent::message::~message(this);
}

void _ZN5caulk10concurrent7details12message_callIZN13AUFTSpatialAC18AURealTimeDebugLogINS3_21AUFTOrientationParamsELm256EE6Buffer5WriteERKS5_EUlT_E_JNSt3__18weak_ptrIS7_EEEED0Ev(caulk::concurrent::message *this)
{
  std::__shared_weak_count *v2;

  *(_QWORD *)this = &off_1E69DAFD0;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 4);
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  caulk::concurrent::message::~message(this);
  JUMPOUT(0x1BCC95CECLL);
}

void _ZN5boost8lockfree6detail15ringbuffer_baseINSt3__15tupleIJNS3_6chrono10time_pointINS5_12steady_clockENS5_8durationIxNS3_5ratioILl1ELl1000000000EEEEEEEN13AUFTSpatialAC21AUFTOrientationParamsEEEEE22run_functor_and_deleteIZNSD_18AURealTimeDebugLogISE_Lm256EE6Buffer5FlushEvEUlRKT_E_EEvPSF_SP_SN_(uint64_t *a1, uint64_t *a2, _QWORD *a3)
{
  uint64_t *v5;
  _QWORD *v6;
  uint64_t v7;

  if (a1 != a2)
  {
    v5 = a1;
    do
    {
      v6 = (_QWORD *)(*a3 + 80);
      AUFTSpatialAC::Log(v6, v5);
      v7 = (uint64_t)(v5 + 1);
      AUFTSpatialACLogCSV<CAOrientation>(v6, v7, ", ");
      v7 += 4;
      AUFTSpatialACLogCSV<CAOrientation>(v6, v7, ", ");
      v7 += 4;
      AUFTSpatialACLogCSV<CAOrientation>(v6, v7, ", ");
      v7 += 4;
      AUFTSpatialACLogCSV<CAOrientation>(v6, v7, "\n");
      v5 = (uint64_t *)(v7 + 4);
    }
    while (v5 != a2);
  }
}

void AUFTSpatialACLogCSV<CAOrientation>(_QWORD *a1, uint64_t a2, const char *a3)
{
  std::ios_base *v5;
  _QWORD *v6;
  int v7;
  __int128 v8;
  char v9;
  std::string *v10;
  std::string::size_type size;
  _QWORD *v12;
  size_t v13;
  std::string v14;
  _OWORD __sb[2];
  __int128 v16;
  __int128 v17;
  void *__p[2];
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  std::ios_base v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  __int128 v26;

  memset(&v14, 0, sizeof(v14));
  v16 = 0u;
  v17 = 0u;
  memset(__sb, 0, sizeof(__sb));
  std::streambuf::basic_streambuf();
  *(_OWORD *)__p = 0u;
  v19 = 0u;
  v20 = 24;
  *(_QWORD *)&v16 = 0;
  *(_QWORD *)&__sb[0] = off_1E69B54A8;
  v21 = MEMORY[0x1E0DE4FA0] + 24;
  v22.__vftable = (std::ios_base_vtbl *)(MEMORY[0x1E0DE4FA0] + 64);
  std::ios_base::init(&v22, __sb);
  v23 = 0;
  v24 = -1;
  *(_QWORD *)&v26 = &v25;
  *((_QWORD *)&v26 + 1) = (char *)&v25 + 2;
  v5 = (std::ios_base *)((char *)&v21 + *(_QWORD *)(v21 - 24));
  v5->__exceptions_ = 1;
  std::ios_base::clear(v5, v5->__rdstate_);
  v6 = (_QWORD *)std::ostream::operator<<();
  v7 = *(_DWORD *)((char *)v6 + *(_QWORD *)(*v6 - 24) + 32);
  v8 = *(_OWORD *)(*(_QWORD *)((char *)&v22.__rdstate_ + *(_QWORD *)(v21 - 24)) + 40);
  v26 = v8;
  if ((v7 & 5) != 0)
  {
    v9 = 0;
  }
  else
  {
    std::string::__assign_trivial[abi:ne180100]<char const*,char const*>(&v14, (std::string::value_type *)v8, *((std::string::value_type **)&v8 + 1), *((_QWORD *)&v8 + 1) - v8);
    v9 = 1;
  }
  std::ostream::~ostream();
  *(_QWORD *)&__sb[0] = MEMORY[0x1E0DE4FB8] + 16;
  if (SBYTE7(v19) < 0)
    operator delete(__p[0]);
  std::streambuf::~streambuf();
  if ((v9 & 1) == 0)
  {
    std::bad_cast::bad_cast((std::bad_cast *)__sb);
    *(_QWORD *)&__sb[0] = &unk_1E69B5650;
    boost::throw_exception<boost::bad_lexical_cast>();
  }
  if ((v14.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v10 = &v14;
  else
    v10 = (std::string *)v14.__r_.__value_.__r.__words[0];
  if ((v14.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(v14.__r_.__value_.__r.__words[2]);
  else
    size = v14.__r_.__value_.__l.__size_;
  v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)v10, size);
  v13 = strlen(a3);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)a3, v13);
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v14.__r_.__value_.__l.__data_);
}

void sub_1B63FF8A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, std::exception a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  std::ostream::~ostream();
  if (a29 < 0)
    operator delete(__p);
  std::streambuf::~streambuf();
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(a1);
}

uint64_t AUFTSpatialAC::SetRenderTuningValsToUse(uint64_t this)
{
  float v1;
  float v2;
  int v3;
  unsigned int v4;
  float v5;
  unsigned int v6;
  float v7;

  v1 = *(float *)(this + 816);
  v2 = *(float *)(this + 820);
  v3 = *(_DWORD *)(this + 800);
  v4 = v3 - 1;
  v5 = v2 / v1;
  v6 = v3 - 3;
  if (v4 >= 2)
    v5 = v1 / v2;
  v7 = *(float *)(this + 1008);
  if (v7 == v5 || v7 == 0.0 || !*(_BYTE *)(this + 848))
  {
    __asm { FMOV            V2.2S, #1.0 }
    *(_QWORD *)(this + 3296) = _D2;
  }
  else if (v7 <= v5)
  {
    *(_DWORD *)(this + 3300) = 1065353216;
    *(float *)(this + 3296) = v7 / v5;
  }
  else
  {
    *(float *)(this + 3300) = v5 / v7;
    *(_DWORD *)(this + 3296) = 1065353216;
  }
  if (v4 < 2)
  {
    *(_OWORD *)(this + 3272) = *(_OWORD *)(this + 852);
    *(float *)(this + 3288) = v2;
    *(float *)(this + 3292) = v1;
    if (!*(_BYTE *)(this + 849))
      *(_DWORD *)(this + 3296) = 0;
  }
  else if (v6 > 1)
  {
    *(_OWORD *)(this + 3272) = *(_OWORD *)(this + 868);
    *(float *)(this + 3288) = v1;
    *(float *)(this + 3292) = v2;
  }
  else
  {
    *(_OWORD *)(this + 3272) = *(_OWORD *)(this + 868);
    *(float *)(this + 3288) = v1;
    *(float *)(this + 3292) = v2;
    if (!*(_BYTE *)(this + 850))
      *(_DWORD *)(this + 3300) = 0;
  }
  return this;
}

os_log_t ___ZN13AUFTSpatialAC9getAUSLogEv_block_invoke()
{
  os_log_t result;

  result = os_log_create("com.apple.coreaudio", "AUFTSpatialAC");
  AUFTSpatialAC::getAUSLog(void)::gLog = (uint64_t)result;
  return result;
}

uint64_t *AUFTSpatialAC::SetOrientationFlagsFromBitMask(uint64_t *result, unsigned int a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = 0;
  v3 = *result;
  do
  {
    v4 = v3 | (1 << v2);
    v3 &= ~(1 << v2);
    if ((a2 & 1) != 0)
      v3 = v4;
    a2 >>= 1;
    ++v2;
  }
  while (v2 != 7);
  *result = v3;
  return result;
}

void AUFTSpatialAC::LoadSpatialMetadataProperties(AUFTSpatialAC *this)
{
  uint64_t v2;
  int v3;
  unsigned int v4;

  if (GetSpatialMetadataSPI(void)::sSpatialMetadataSPIOnce != -1)
    dispatch_once(&GetSpatialMetadataSPI(void)::sSpatialMetadataSPIOnce, &__block_literal_global_128);
  if (GetSpatialMetadataSPI(void)::sSpatialMetadataSPI)
  {
    v3 = 4;
    v4 = 0;
    if (!(*(unsigned int (**)(_QWORD, uint64_t, _QWORD, unsigned int *, int *))(GetSpatialMetadataSPI(void)::sSpatialMetadataSPI
                                                                                         + 24))(*((_QWORD *)this + 66), 3, 0, &v4, &v3))(*(void (**)(AUFTSpatialAC *, uint64_t, _QWORD, _QWORD, _QWORD, float))(*(_QWORD *)this + 152))(this, 200, 0, 0, 0, (float)v4);
  }
  AUFTSpatialAC::LoadSpatialMetadataPropertyAs<float,float>(this, 4, 0, 206, 0, 0);
  AUFTSpatialAC::LoadSpatialMetadataPropertyAs<float,float>(this, 5, 0, 207, 0, 0);
  AUFTSpatialAC::LoadSpatialMetadataPropertyAs<float,float>(this, 6, 0, 210, 0, 0);
  AUFTSpatialAC::LoadSpatialMetadataPropertyAs<float,float>(this, 7, 0, 211, 0, 0);
  AUFTSpatialAC::LoadSpatialMetadataPropertyAs<float,float>(this, 8, 0, 208, 0, 0);
  AUFTSpatialAC::LoadSpatialMetadataPropertyAs<float,float>(this, 9, 0, 209, 0, 0);
  AUFTSpatialAC::LoadSpatialMetadataPropertyAs<unsigned int,BOOL>(this, 17, 0, 212, 0, 0);
  v2 = 0;
  do
  {
    AUFTSpatialAC::LoadSpatialMetadataPropertyAs<unsigned int,BOOL>(this, 10, v2, 602, 1, v2);
    AUFTSpatialAC::LoadSpatialMetadataPropertyAs<unsigned int,BOOL>(this, 11, v2, 603, 1, v2);
    AUFTSpatialAC::LoadSpatialMetadataPropertyAs<unsigned int,BOOL>(this, 12, v2, 604, 1, v2);
    if (GetSpatialMetadataSPI(void)::sSpatialMetadataSPIOnce != -1)
      dispatch_once(&GetSpatialMetadataSPI(void)::sSpatialMetadataSPIOnce, &__block_literal_global_128);
    if (GetSpatialMetadataSPI(void)::sSpatialMetadataSPI)
    {
      v3 = 4;
      v4 = 0;
      if (!(*(unsigned int (**)(_QWORD, uint64_t, uint64_t, unsigned int *, int *))(GetSpatialMetadataSPI(void)::sSpatialMetadataSPI
                                                                                            + 24))(*((_QWORD *)this + 66), 16, v2, &v4, &v3))(*(void (**)(AUFTSpatialAC *, uint64_t, uint64_t, uint64_t, _QWORD, float))(*(_QWORD *)this + 152))(this, 605, 1, v2, 0, (float)v4);
    }
    AUFTSpatialAC::LoadSpatialMetadataPropertyAs<float,float>(this, 13, v2, 606, 1, v2);
    AUFTSpatialAC::LoadSpatialMetadataPropertyAs<float,float>(this, 14, v2, 607, 1, v2);
    AUFTSpatialAC::LoadSpatialMetadataPropertyAs<float,float>(this, 15, v2, 608, 1, v2);
    v2 = (v2 + 1);
  }
  while ((_DWORD)v2 != 32);
}

void AUFTSpatialAC::LoadSpatialMetadataPropertyAs<float,float>(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  int v12;
  float v13;

  if (GetSpatialMetadataSPI(void)::sSpatialMetadataSPIOnce != -1)
    dispatch_once(&GetSpatialMetadataSPI(void)::sSpatialMetadataSPIOnce, &__block_literal_global_128);
  if (GetSpatialMetadataSPI(void)::sSpatialMetadataSPI)
  {
    v12 = 4;
    v13 = 0.0;
    if (!(*(unsigned int (**)(_QWORD, uint64_t, uint64_t, float *, int *))(GetSpatialMetadataSPI(void)::sSpatialMetadataSPI
                                                                                   + 24))(a1[66], a2, a3, &v13, &v12))(*(void (**)(_QWORD *, uint64_t, uint64_t, uint64_t, _QWORD, float))(*a1 + 152))(a1, a4, a5, a6, 0, v13);
  }
}

void AUFTSpatialAC::LoadSpatialMetadataPropertyAs<unsigned int,BOOL>(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  __n128 v12;
  int v13;
  int v14;

  if (GetSpatialMetadataSPI(void)::sSpatialMetadataSPIOnce != -1)
    dispatch_once(&GetSpatialMetadataSPI(void)::sSpatialMetadataSPIOnce, &__block_literal_global_128);
  if (GetSpatialMetadataSPI(void)::sSpatialMetadataSPI)
  {
    v13 = 4;
    v14 = 0;
    if (!(*(unsigned int (**)(_QWORD, uint64_t, uint64_t, int *, int *))(GetSpatialMetadataSPI(void)::sSpatialMetadataSPI
                                                                                 + 24))(a1[66], a2, a3, &v14, &v13))
    {
      v12.n128_u32[0] = 0;
      if (v14)
        v12.n128_f32[0] = 1.0;
      (*(void (**)(_QWORD *, uint64_t, uint64_t, uint64_t, _QWORD, __n128))(*a1 + 152))(a1, a4, a5, a6, 0, v12);
    }
  }
}

void AUFTSpatialAC::StoreSpatialMetadataProperties(AUFTSpatialAC *this)
{
  uint64_t v2;
  unsigned int v3;
  float v4;

  if (GetSpatialMetadataSPI(void)::sSpatialMetadataSPIOnce != -1)
    dispatch_once(&GetSpatialMetadataSPI(void)::sSpatialMetadataSPIOnce, &__block_literal_global_128);
  if (GetSpatialMetadataSPI(void)::sSpatialMetadataSPI)
  {
    v4 = 0.0;
    if (!(*(unsigned int (**)(AUFTSpatialAC *, uint64_t, _QWORD, _QWORD, float *))(*(_QWORD *)this + 144))(this, 200, 0, 0, &v4))
    {
      v3 = v4;
      if (GetSpatialMetadataSPI(void)::sSpatialMetadataSPIOnce != -1)
        dispatch_once(&GetSpatialMetadataSPI(void)::sSpatialMetadataSPIOnce, &__block_literal_global_128);
      (*(void (**)(_QWORD, uint64_t, _QWORD, unsigned int *, uint64_t))(GetSpatialMetadataSPI(void)::sSpatialMetadataSPI
                                                                               + 32))(*((_QWORD *)this + 66), 3, 0, &v3, 4);
    }
  }
  AUFTSpatialAC::StoreSpatialMetadataPropertyAs<float,float>(this, 4, 0, 206, 0, 0);
  AUFTSpatialAC::StoreSpatialMetadataPropertyAs<float,float>(this, 5, 0, 207, 0, 0);
  AUFTSpatialAC::StoreSpatialMetadataPropertyAs<float,float>(this, 6, 0, 210, 0, 0);
  AUFTSpatialAC::StoreSpatialMetadataPropertyAs<float,float>(this, 7, 0, 211, 0, 0);
  AUFTSpatialAC::StoreSpatialMetadataPropertyAs<float,float>(this, 8, 0, 208, 0, 0);
  AUFTSpatialAC::StoreSpatialMetadataPropertyAs<float,float>(this, 9, 0, 209, 0, 0);
  AUFTSpatialAC::StoreSpatialMetadataPropertyAs<unsigned int,BOOL>(this, 17, 0, 212, 0, 0);
  v2 = 0;
  do
  {
    AUFTSpatialAC::StoreSpatialMetadataPropertyAs<unsigned int,BOOL>(this, 10, v2, 602, 1, v2);
    AUFTSpatialAC::StoreSpatialMetadataPropertyAs<unsigned int,BOOL>(this, 11, v2, 603, 1, v2);
    AUFTSpatialAC::StoreSpatialMetadataPropertyAs<unsigned int,BOOL>(this, 12, v2, 604, 1, v2);
    if (GetSpatialMetadataSPI(void)::sSpatialMetadataSPIOnce != -1)
      dispatch_once(&GetSpatialMetadataSPI(void)::sSpatialMetadataSPIOnce, &__block_literal_global_128);
    if (GetSpatialMetadataSPI(void)::sSpatialMetadataSPI)
    {
      v4 = 0.0;
      if (!(*(unsigned int (**)(AUFTSpatialAC *, uint64_t, uint64_t, uint64_t, float *))(*(_QWORD *)this + 144))(this, 605, 1, v2, &v4))
      {
        v3 = v4;
        if (GetSpatialMetadataSPI(void)::sSpatialMetadataSPIOnce != -1)
          dispatch_once(&GetSpatialMetadataSPI(void)::sSpatialMetadataSPIOnce, &__block_literal_global_128);
        (*(void (**)(_QWORD, uint64_t, uint64_t, unsigned int *, uint64_t))(GetSpatialMetadataSPI(void)::sSpatialMetadataSPI
                                                                                  + 32))(*((_QWORD *)this + 66), 16, v2, &v3, 4);
      }
    }
    AUFTSpatialAC::StoreSpatialMetadataPropertyAs<float,float>(this, 13, v2, 606, 1, v2);
    AUFTSpatialAC::StoreSpatialMetadataPropertyAs<float,float>(this, 14, v2, 607, 1, v2);
    AUFTSpatialAC::StoreSpatialMetadataPropertyAs<float,float>(this, 15, v2, 608, 1, v2);
    v2 = (v2 + 1);
  }
  while ((_DWORD)v2 != 32);
}

void AUFTSpatialAC::StoreSpatialMetadataPropertyAs<float,float>(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  int v12;
  int v13;

  if (GetSpatialMetadataSPI(void)::sSpatialMetadataSPIOnce != -1)
    dispatch_once(&GetSpatialMetadataSPI(void)::sSpatialMetadataSPIOnce, &__block_literal_global_128);
  if (GetSpatialMetadataSPI(void)::sSpatialMetadataSPI)
  {
    v13 = 0;
    if (!(*(unsigned int (**)(_QWORD *, uint64_t, uint64_t, uint64_t, int *))(*a1 + 144))(a1, a4, a5, a6, &v13))
    {
      v12 = v13;
      if (GetSpatialMetadataSPI(void)::sSpatialMetadataSPIOnce != -1)
        dispatch_once(&GetSpatialMetadataSPI(void)::sSpatialMetadataSPIOnce, &__block_literal_global_128);
      (*(void (**)(_QWORD, uint64_t, uint64_t, int *, uint64_t))(GetSpatialMetadataSPI(void)::sSpatialMetadataSPI
                                                                       + 32))(a1[66], a2, a3, &v12, 4);
    }
  }
}

void AUFTSpatialAC::StoreSpatialMetadataPropertyAs<unsigned int,BOOL>(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _BOOL4 v12;
  float v13;

  if (GetSpatialMetadataSPI(void)::sSpatialMetadataSPIOnce != -1)
    dispatch_once(&GetSpatialMetadataSPI(void)::sSpatialMetadataSPIOnce, &__block_literal_global_128);
  if (GetSpatialMetadataSPI(void)::sSpatialMetadataSPI)
  {
    v13 = 0.0;
    if (!(*(unsigned int (**)(_QWORD *, uint64_t, uint64_t, uint64_t, float *))(*a1 + 144))(a1, a4, a5, a6, &v13))
    {
      v12 = v13 != 0.0;
      if (GetSpatialMetadataSPI(void)::sSpatialMetadataSPIOnce != -1)
        dispatch_once(&GetSpatialMetadataSPI(void)::sSpatialMetadataSPIOnce, &__block_literal_global_128);
      (*(void (**)(_QWORD, uint64_t, uint64_t, _BOOL4 *, uint64_t))(GetSpatialMetadataSPI(void)::sSpatialMetadataSPI
                                                                          + 32))(a1[66], a2, a3, &v12, 4);
    }
  }
}

uint64_t AUFTSpatialAC::SetOutputParamsToDefaults(AUFTSpatialAC *this)
{
  uint64_t v2;
  ausdk::AUElement *v3;
  ausdk::AUElement **v4;
  uint64_t v5;
  ausdk::AUElement *v6;
  ausdk::AUElement **v7;
  uint64_t v8;
  ausdk::AUElement *v9;
  ausdk::AUElement **v10;
  uint64_t v11;
  ausdk::AUElement *v12;
  ausdk::AUElement **v13;
  uint64_t v14;
  ausdk::AUElement *v15;
  ausdk::AUElement **v16;
  uint64_t v17;
  ausdk::AUElement *v18;
  ausdk::AUElement **v19;
  uint64_t v20;
  ausdk::AUElement *v21;
  ausdk::AUElement **v22;
  unint64_t i;
  uint64_t v24;
  uint64_t result;
  uint64_t v26;
  ausdk::AUElement *v27;
  uint64_t v28;
  uint64_t v29;
  ausdk::AUElement *v30;
  uint64_t v31;
  uint64_t v32;
  ausdk::AUElement *v33;
  uint64_t v34;
  uint64_t v35;
  ausdk::AUElement *v36;
  uint64_t v37;
  uint64_t v38;
  ausdk::AUElement *v39;
  uint64_t v40;
  uint64_t v41;
  ausdk::AUElement *v42;
  uint64_t v43;
  uint64_t v44;
  ausdk::AUElement *v45;
  uint64_t v46;
  uint64_t v47;
  ausdk::AUElement *v48;
  uint64_t v49;
  uint64_t v50;
  ausdk::AUElement *v51;
  uint64_t v52;
  uint64_t v53;
  ausdk::AUElement *v54;
  uint64_t v55;
  uint64_t v56;
  ausdk::AUElement *v57;
  uint64_t v58;
  uint64_t v59;
  ausdk::AUElement *v60;
  uint64_t v61;

  v2 = *((_QWORD *)this + 9);
  if (v2)
  {
    v3 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v2 + 32))(v2, 0);
  }
  else
  {
    v4 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v4)
      v3 = 0;
    else
      v3 = *v4;
  }
  ausdk::AUElement::SetParameter(v3, 0x190u, 0.0, 0);
  v5 = *((_QWORD *)this + 9);
  if (v5)
  {
    v6 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v5 + 32))(v5, 0);
  }
  else
  {
    v7 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v7)
      v6 = 0;
    else
      v6 = *v7;
  }
  ausdk::AUElement::SetParameter(v6, 0x191u, 0.0, 0);
  v8 = *((_QWORD *)this + 9);
  if (v8)
  {
    v9 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v8 + 32))(v8, 0);
  }
  else
  {
    v10 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v10)
      v9 = 0;
    else
      v9 = *v10;
  }
  ausdk::AUElement::SetParameter(v9, 0x192u, 1.0, 0);
  v11 = *((_QWORD *)this + 9);
  if (v11)
  {
    v12 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v11 + 32))(v11, 0);
  }
  else
  {
    v13 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v13)
      v12 = 0;
    else
      v12 = *v13;
  }
  ausdk::AUElement::SetParameter(v12, 0x193u, 0.0, 0);
  v14 = *((_QWORD *)this + 9);
  if (v14)
  {
    v15 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v14 + 32))(v14, 0);
  }
  else
  {
    v16 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v16)
      v15 = 0;
    else
      v15 = *v16;
  }
  ausdk::AUElement::SetParameter(v15, 0x194u, 1.0, 0);
  v17 = *((_QWORD *)this + 9);
  if (v17)
  {
    v18 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v17 + 32))(v17, 0);
  }
  else
  {
    v19 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v19)
      v18 = 0;
    else
      v18 = *v19;
  }
  ausdk::AUElement::SetParameter(v18, 0x195u, 1.0, 0);
  v20 = *((_QWORD *)this + 9);
  if (v20)
  {
    v21 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v20 + 32))(v20, 0);
  }
  else
  {
    v22 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v22)
      v21 = 0;
    else
      v21 = *v22;
  }
  ausdk::AUElement::SetParameter(v21, 0x196u, 1.0, 0);
  for (i = 0; ; ++i)
  {
    v24 = *((_QWORD *)this + 93);
    result = v24
           ? (*(uint64_t (**)(uint64_t))(*(_QWORD *)v24 + 24))(v24)
           : (*((_QWORD *)this + 91) - *((_QWORD *)this + 90)) >> 3;
    if (i >= result)
      break;
    v26 = *((_QWORD *)this + 93);
    if (v26)
    {
      v27 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)v26 + 32))(v26, i);
    }
    else
    {
      v28 = *((_QWORD *)this + 90);
      if (i >= (*((_QWORD *)this + 91) - v28) >> 3)
        v27 = 0;
      else
        v27 = *(ausdk::AUElement **)(v28 + 8 * i);
    }
    ausdk::AUElement::SetParameter(v27, 0x320u, 0.0, 0);
    v29 = *((_QWORD *)this + 93);
    if (v29)
    {
      v30 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)v29 + 32))(v29, i);
    }
    else
    {
      v31 = *((_QWORD *)this + 90);
      if (i >= (*((_QWORD *)this + 91) - v31) >> 3)
        v30 = 0;
      else
        v30 = *(ausdk::AUElement **)(v31 + 8 * i);
    }
    ausdk::AUElement::SetParameter(v30, 0x321u, 0.0, 0);
    v32 = *((_QWORD *)this + 93);
    if (v32)
    {
      v33 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)v32 + 32))(v32, i);
    }
    else
    {
      v34 = *((_QWORD *)this + 90);
      if (i >= (*((_QWORD *)this + 91) - v34) >> 3)
        v33 = 0;
      else
        v33 = *(ausdk::AUElement **)(v34 + 8 * i);
    }
    ausdk::AUElement::SetParameter(v33, 0x322u, 2.0, 0);
    v35 = *((_QWORD *)this + 93);
    if (v35)
    {
      v36 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)v35 + 32))(v35, i);
    }
    else
    {
      v37 = *((_QWORD *)this + 90);
      if (i >= (*((_QWORD *)this + 91) - v37) >> 3)
        v36 = 0;
      else
        v36 = *(ausdk::AUElement **)(v37 + 8 * i);
    }
    ausdk::AUElement::SetParameter(v36, 0x323u, 0.0, 0);
    v38 = *((_QWORD *)this + 93);
    if (v38)
    {
      v39 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)v38 + 32))(v38, i);
    }
    else
    {
      v40 = *((_QWORD *)this + 90);
      if (i >= (*((_QWORD *)this + 91) - v40) >> 3)
        v39 = 0;
      else
        v39 = *(ausdk::AUElement **)(v40 + 8 * i);
    }
    ausdk::AUElement::SetParameter(v39, 0x324u, 1.0, 0);
    v41 = *((_QWORD *)this + 93);
    if (v41)
    {
      v42 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)v41 + 32))(v41, i);
    }
    else
    {
      v43 = *((_QWORD *)this + 90);
      if (i >= (*((_QWORD *)this + 91) - v43) >> 3)
        v42 = 0;
      else
        v42 = *(ausdk::AUElement **)(v43 + 8 * i);
    }
    ausdk::AUElement::SetParameter(v42, 0x325u, 0.0, 0);
    v44 = *((_QWORD *)this + 93);
    if (v44)
    {
      v45 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)v44 + 32))(v44, i);
    }
    else
    {
      v46 = *((_QWORD *)this + 90);
      if (i >= (*((_QWORD *)this + 91) - v46) >> 3)
        v45 = 0;
      else
        v45 = *(ausdk::AUElement **)(v46 + 8 * i);
    }
    ausdk::AUElement::SetParameter(v45, 0x326u, 0.0, 0);
    v47 = *((_QWORD *)this + 93);
    if (v47)
    {
      v48 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)v47 + 32))(v47, i);
    }
    else
    {
      v49 = *((_QWORD *)this + 90);
      if (i >= (*((_QWORD *)this + 91) - v49) >> 3)
        v48 = 0;
      else
        v48 = *(ausdk::AUElement **)(v49 + 8 * i);
    }
    ausdk::AUElement::SetParameter(v48, 0x327u, 10.0, 0);
    v50 = *((_QWORD *)this + 93);
    if (v50)
    {
      v51 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)v50 + 32))(v50, i);
    }
    else
    {
      v52 = *((_QWORD *)this + 90);
      if (i >= (*((_QWORD *)this + 91) - v52) >> 3)
        v51 = 0;
      else
        v51 = *(ausdk::AUElement **)(v52 + 8 * i);
    }
    ausdk::AUElement::SetParameter(v51, 0x328u, 9.0, 0);
    v53 = *((_QWORD *)this + 93);
    if (v53)
    {
      v54 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)v53 + 32))(v53, i);
    }
    else
    {
      v55 = *((_QWORD *)this + 90);
      if (i >= (*((_QWORD *)this + 91) - v55) >> 3)
        v54 = 0;
      else
        v54 = *(ausdk::AUElement **)(v55 + 8 * i);
    }
    ausdk::AUElement::SetParameter(v54, 0x329u, 0.0, 0);
    v56 = *((_QWORD *)this + 93);
    if (v56)
    {
      v57 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)v56 + 32))(v56, i);
    }
    else
    {
      v58 = *((_QWORD *)this + 90);
      if (i >= (*((_QWORD *)this + 91) - v58) >> 3)
        v57 = 0;
      else
        v57 = *(ausdk::AUElement **)(v58 + 8 * i);
    }
    ausdk::AUElement::SetParameter(v57, 0x32Au, 0.0, 0);
    v59 = *((_QWORD *)this + 93);
    if (v59)
    {
      v60 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)v59 + 32))(v59, i);
    }
    else
    {
      v61 = *((_QWORD *)this + 90);
      if (i >= (*((_QWORD *)this + 91) - v61) >> 3)
        v60 = 0;
      else
        v60 = *(ausdk::AUElement **)(v61 + 8 * i);
    }
    ausdk::AUElement::SetParameter(v60, 0x32Bu, 0.0, 0);
  }
  return result;
}

float32x2_t *AUFTSpatialAC::UpdateState(AUFTSpatialAC *this)
{
  unint64_t v2;
  float *i;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  ausdk::AUElement *v7;
  uint64_t v8;
  uint64_t v9;
  ausdk::AUElement *v10;
  uint64_t v11;
  uint64_t v12;
  ausdk::AUElement *v13;
  uint64_t v14;
  uint64_t v15;
  ausdk::AUElement *v16;
  uint64_t v17;
  uint64_t v18;
  ausdk::AUElement *v19;
  uint64_t v20;
  uint64_t v21;
  ausdk::AUElement *v22;
  uint64_t v23;

  AUFTSpatialAC::UpdateGlobalVariableState(this);
  AUFTSpatialAC::UpdateInputVariableState(this);
  v2 = 0;
  for (i = (float *)((char *)this + 2492); ; i += 6)
  {
    v4 = *((_QWORD *)this + 93);
    if (v4)
      LODWORD(v5) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 24))(v4);
    else
      v5 = (*((_QWORD *)this + 91) - *((_QWORD *)this + 90)) >> 3;
    if (v2 >= v5)
      break;
    v6 = *((_QWORD *)this + 93);
    if (v6)
    {
      v7 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)v6 + 32))(v6, v2);
    }
    else
    {
      v8 = *((_QWORD *)this + 90);
      if (v2 >= (*((_QWORD *)this + 91) - v8) >> 3)
        v7 = 0;
      else
        v7 = *(ausdk::AUElement **)(v8 + 8 * v2);
    }
    *(i - 5) = ausdk::AUElement::GetParameter(v7, 0x320u);
    v9 = *((_QWORD *)this + 93);
    if (v9)
    {
      v10 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)v9 + 32))(v9, v2);
    }
    else
    {
      v11 = *((_QWORD *)this + 90);
      if (v2 >= (*((_QWORD *)this + 91) - v11) >> 3)
        v10 = 0;
      else
        v10 = *(ausdk::AUElement **)(v11 + 8 * v2);
    }
    *(i - 4) = ausdk::AUElement::GetParameter(v10, 0x321u);
    v12 = *((_QWORD *)this + 93);
    if (v12)
    {
      v13 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)v12 + 32))(v12, v2);
    }
    else
    {
      v14 = *((_QWORD *)this + 90);
      if (v2 >= (*((_QWORD *)this + 91) - v14) >> 3)
        v13 = 0;
      else
        v13 = *(ausdk::AUElement **)(v14 + 8 * v2);
    }
    *(i - 3) = ausdk::AUElement::GetParameter(v13, 0x322u);
    v15 = *((_QWORD *)this + 93);
    if (v15)
    {
      v16 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)v15 + 32))(v15, v2);
    }
    else
    {
      v17 = *((_QWORD *)this + 90);
      if (v2 >= (*((_QWORD *)this + 91) - v17) >> 3)
        v16 = 0;
      else
        v16 = *(ausdk::AUElement **)(v17 + 8 * v2);
    }
    *(i - 2) = ausdk::AUElement::GetParameter(v16, 0x323u);
    v18 = *((_QWORD *)this + 93);
    if (v18)
    {
      v19 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)v18 + 32))(v18, v2);
    }
    else
    {
      v20 = *((_QWORD *)this + 90);
      if (v2 >= (*((_QWORD *)this + 91) - v20) >> 3)
        v19 = 0;
      else
        v19 = *(ausdk::AUElement **)(v20 + 8 * v2);
    }
    *((_BYTE *)i - 4) = ausdk::AUElement::GetParameter(v19, 0x325u) == 1.0;
    v21 = *((_QWORD *)this + 93);
    if (v21)
    {
      v22 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)v21 + 32))(v21, v2);
    }
    else
    {
      v23 = *((_QWORD *)this + 90);
      if (v2 >= (*((_QWORD *)this + 91) - v23) >> 3)
        v22 = 0;
      else
        v22 = *(ausdk::AUElement **)(v23 + 8 * v2);
    }
    *i = ausdk::AUElement::GetParameter(v22, 0x328u);
    ++v2;
  }
  return AUFTSpatialAC::MakeDependentPositionData((float32x2_t *)this);
}

void std::vector<std::unique_ptr<AUFTSpatialAC::AURealTimeDebugLog<AUFTSpatialAC::AUFTSpatAUOutStreamParams,256ul>>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  _QWORD *v2;
  _QWORD *v4;
  void *v5;
  uint64_t *v6;
  uint64_t *v7;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v7 = (uint64_t *)*--v4;
        v6 = v7;
        *v4 = 0;
        if (v7)
          std::default_delete<AUFTSpatialAC::AURealTimeDebugLog<AUFTSpatialAC::AUFTSpatAUOutStreamParams,256ul>>::operator()[abi:ne180100](v6);
      }
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::vector<std::unique_ptr<AUFTSpatialAC::AURealTimeDebugLog<AUFTSpatialAC::AUFTSpatAUInStreamParams,256ul>>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  _QWORD *v2;
  _QWORD *v4;
  void *v5;
  uint64_t *v6;
  uint64_t *v7;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v7 = (uint64_t *)*--v4;
        v6 = v7;
        *v4 = 0;
        if (v7)
          std::default_delete<AUFTSpatialAC::AURealTimeDebugLog<AUFTSpatialAC::AUFTSpatAUInStreamParams,256ul>>::operator()[abi:ne180100](v6);
      }
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::default_delete<AUFTSpatialAC::AURealTimeDebugLog<AUFTSpatialAC::AUFTWindowParams,256ul>>::operator()[abi:ne180100](uint64_t *a1)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  BOOL v8;
  unint64_t v9;
  std::__shared_weak_count *v10;

  AUFTSpatialAC::AURealTimeDebugLog<AUFTSpatialAC::AUFTWindowParams,256ul>::Buffer::Flush(*a1);
  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    AUFTSpatialAC::AURealTimeDebugLog<AUFTSpatialAC::AUFTWindowParams,256ul>::Buffer::Flush(v2);
    v3 = atomic_load((unint64_t *)(v2 + 680));
    v4 = *(_QWORD *)(v2 + 744);
    v5 = v4 - v3;
    v8 = v4 > v3;
    v6 = 257;
    if (!v8)
      v6 = 0;
    if (v6 != v5)
    {
      v7 = v6 + v3;
      v9 = v7 - 257;
      v8 = v7 > 0x101;
      if (v7 == 257)
        v7 = 0;
      if (v8)
        v7 = v9;
      atomic_store(v7, (unint64_t *)(v2 + 744));
    }
    if (*(char *)(v2 + 679) < 0)
      operator delete(*(void **)(v2 + 656));
    std::__optional_destruct_base<std::ofstream,false>::~__optional_destruct_base[abi:ne180100](v2 + 80);
    std::mutex::~mutex((std::mutex *)(v2 + 16));
    v10 = *(std::__shared_weak_count **)(v2 + 8);
    if (v10)
      std::__shared_weak_count::__release_weak(v10);
    MEMORY[0x1BCC95CEC](v2, 0x10F2C40CC79D655);
  }
  JUMPOUT(0x1BCC95CECLL);
}

void std::default_delete<AUFTSpatialAC::AURealTimeDebugLog<AUFTSpatialAC::AUFTOrientationParams,256ul>>::operator()[abi:ne180100](uint64_t *a1)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  BOOL v8;
  unint64_t v9;
  std::__shared_weak_count *v10;

  AUFTSpatialAC::AURealTimeDebugLog<AUFTSpatialAC::AUFTOrientationParams,256ul>::Buffer::Flush(*a1);
  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    AUFTSpatialAC::AURealTimeDebugLog<AUFTSpatialAC::AUFTOrientationParams,256ul>::Buffer::Flush(v2);
    v3 = atomic_load((unint64_t *)(v2 + 680));
    v4 = *(_QWORD *)(v2 + 744);
    v5 = v4 - v3;
    v8 = v4 > v3;
    v6 = 257;
    if (!v8)
      v6 = 0;
    if (v6 != v5)
    {
      v7 = v6 + v3;
      v9 = v7 - 257;
      v8 = v7 > 0x101;
      if (v7 == 257)
        v7 = 0;
      if (v8)
        v7 = v9;
      atomic_store(v7, (unint64_t *)(v2 + 744));
    }
    if (*(char *)(v2 + 679) < 0)
      operator delete(*(void **)(v2 + 656));
    std::__optional_destruct_base<std::ofstream,false>::~__optional_destruct_base[abi:ne180100](v2 + 80);
    std::mutex::~mutex((std::mutex *)(v2 + 16));
    v10 = *(std::__shared_weak_count **)(v2 + 8);
    if (v10)
      std::__shared_weak_count::__release_weak(v10);
    MEMORY[0x1BCC95CEC](v2, 0x10F2C40C449EA7FLL);
  }
  JUMPOUT(0x1BCC95CECLL);
}

uint64_t std::__optional_destruct_base<std::ofstream,false>::~__optional_destruct_base[abi:ne180100](uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  if (*(_BYTE *)(a1 + 568))
  {
    v2 = MEMORY[0x1E0DE4F48];
    v3 = *MEMORY[0x1E0DE4F48];
    *(_QWORD *)a1 = *MEMORY[0x1E0DE4F48];
    *(_QWORD *)(a1 + *(_QWORD *)(v3 - 24)) = *(_QWORD *)(v2 + 24);
    MEMORY[0x1BCC95788](a1 + 8);
    std::ostream::~ostream();
    MEMORY[0x1BCC95BE4](a1 + 416);
  }
  return a1;
}

void std::default_delete<AUFTSpatialAC::AURealTimeDebugLog<AUFTSpatialAC::AUFTSpatAUInStreamParams,256ul>>::operator()[abi:ne180100](uint64_t *a1)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  BOOL v8;
  unint64_t v9;
  std::__shared_weak_count *v10;

  AUFTSpatialAC::AURealTimeDebugLog<AUFTSpatialAC::AUFTSpatAUInStreamParams,256ul>::Buffer::Flush(*a1);
  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    AUFTSpatialAC::AURealTimeDebugLog<AUFTSpatialAC::AUFTSpatAUInStreamParams,256ul>::Buffer::Flush(v2);
    v3 = atomic_load((unint64_t *)(v2 + 680));
    v4 = *(_QWORD *)(v2 + 744);
    v5 = v4 - v3;
    v8 = v4 > v3;
    v6 = 257;
    if (!v8)
      v6 = 0;
    if (v6 != v5)
    {
      v7 = v6 + v3;
      v9 = v7 - 257;
      v8 = v7 > 0x101;
      if (v7 == 257)
        v7 = 0;
      if (v8)
        v7 = v9;
      atomic_store(v7, (unint64_t *)(v2 + 744));
    }
    if (*(char *)(v2 + 679) < 0)
      operator delete(*(void **)(v2 + 656));
    std::__optional_destruct_base<std::ofstream,false>::~__optional_destruct_base[abi:ne180100](v2 + 80);
    std::mutex::~mutex((std::mutex *)(v2 + 16));
    v10 = *(std::__shared_weak_count **)(v2 + 8);
    if (v10)
      std::__shared_weak_count::__release_weak(v10);
    MEMORY[0x1BCC95CEC](v2, 0x10F2C407FE28AF6);
  }
  JUMPOUT(0x1BCC95CECLL);
}

void std::default_delete<AUFTSpatialAC::AURealTimeDebugLog<AUFTSpatialAC::AUFTSpatAUOutStreamParams,256ul>>::operator()[abi:ne180100](uint64_t *a1)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  BOOL v8;
  unint64_t v9;
  std::__shared_weak_count *v10;

  AUFTSpatialAC::AURealTimeDebugLog<AUFTSpatialAC::AUFTSpatAUOutStreamParams,256ul>::Buffer::Flush(*a1);
  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    AUFTSpatialAC::AURealTimeDebugLog<AUFTSpatialAC::AUFTSpatAUOutStreamParams,256ul>::Buffer::Flush(v2);
    v3 = atomic_load((unint64_t *)(v2 + 680));
    v4 = *(_QWORD *)(v2 + 744);
    v5 = v4 - v3;
    v8 = v4 > v3;
    v6 = 257;
    if (!v8)
      v6 = 0;
    if (v6 != v5)
    {
      v7 = v6 + v3;
      v9 = v7 - 257;
      v8 = v7 > 0x101;
      if (v7 == 257)
        v7 = 0;
      if (v8)
        v7 = v9;
      atomic_store(v7, (unint64_t *)(v2 + 744));
    }
    if (*(char *)(v2 + 679) < 0)
      operator delete(*(void **)(v2 + 656));
    std::__optional_destruct_base<std::ofstream,false>::~__optional_destruct_base[abi:ne180100](v2 + 80);
    std::mutex::~mutex((std::mutex *)(v2 + 16));
    v10 = *(std::__shared_weak_count **)(v2 + 8);
    if (v10)
      std::__shared_weak_count::__release_weak(v10);
    MEMORY[0x1BCC95CEC](v2, 0x10F2C40CC79D655);
  }
  JUMPOUT(0x1BCC95CECLL);
}

void AUFTSpatialAC::AUFTSpatialAC(AUFTSpatialAC *this, OpaqueAudioComponentInstance *a2)
{
  _OWORD *v3;
  ausdk::AUBase *v4;
  uint64_t v5;
  char *v6;
  const float *v7;
  __int128 v8;
  char *v9;
  _QWORD *v10;
  uint64_t v11;
  ausdk::AUElement *v12;
  ausdk::AUElement **v13;
  uint64_t v14;
  ausdk::AUElement *v15;
  ausdk::AUElement **v16;
  uint64_t v17;
  ausdk::AUElement *v18;
  ausdk::AUElement **v19;
  uint64_t v20;
  ausdk::AUElement *v21;
  ausdk::AUElement **v22;
  uint64_t v23;
  ausdk::AUElement *v24;
  ausdk::AUElement **v25;
  uint64_t v26;
  ausdk::AUElement *v27;
  ausdk::AUElement **v28;
  uint64_t v29;
  ausdk::AUElement *v30;
  ausdk::AUElement **v31;
  uint64_t v32;
  ausdk::AUElement *v33;
  ausdk::AUElement **v34;
  uint64_t v35;
  ausdk::AUElement *v36;
  ausdk::AUElement **v37;
  uint64_t v38;
  ausdk::AUElement *v39;
  ausdk::AUElement **v40;
  uint64_t v41;
  ausdk::AUElement *v42;
  ausdk::AUElement **v43;
  uint64_t v44;
  ausdk::AUElement *v45;
  ausdk::AUElement **v46;
  uint64_t v47;
  ausdk::AUElement *v48;
  ausdk::AUElement **v49;
  uint64_t v50;
  ausdk::AUElement *v51;
  ausdk::AUElement **v52;
  uint64_t v53;
  ausdk::AUElement *v54;
  ausdk::AUElement **v55;
  uint64_t v56;
  ausdk::AUElement *v57;
  ausdk::AUElement **v58;
  uint64_t v59;
  ausdk::AUElement *v60;
  ausdk::AUElement **v61;
  uint64_t v62;
  ausdk::AUElement *v63;
  ausdk::AUElement **v64;
  uint64_t v65;
  ausdk::AUElement *v66;
  ausdk::AUElement **v67;
  uint64_t v68;
  ausdk::AUElement *v69;
  ausdk::AUElement **v70;
  uint64_t v71;
  ausdk::AUElement *v72;
  ausdk::AUElement **v73;
  uint64_t v74;
  ausdk::AUElement *v75;
  ausdk::AUElement **v76;
  uint64_t v77;
  ausdk::AUElement *v78;
  ausdk::AUElement **v79;
  uint64_t v80;
  ausdk::AUElement *v81;
  ausdk::AUElement **v82;
  uint64_t v83;
  ausdk::AUElement *v84;
  ausdk::AUElement **v85;
  uint64_t v86;
  ausdk::AUElement *v87;
  ausdk::AUElement **v88;
  uint64_t v89;
  ausdk::AUElement *v90;
  ausdk::AUElement **v91;
  uint64_t v92;
  ausdk::AUElement *v93;
  ausdk::AUElement **v94;
  uint64_t v95;
  ausdk::AUElement *v96;
  ausdk::AUElement **v97;
  uint64_t v98;
  ausdk::AUElement *v99;
  ausdk::AUElement **v100;
  uint64_t v101;
  ausdk::AUElement *v102;
  ausdk::AUElement **v103;
  uint64_t v104;
  ausdk::AUElement *v105;
  ausdk::AUElement **v106;
  uint64_t v107;
  ausdk::AUElement *v108;
  ausdk::AUElement **v109;
  uint64_t v110;
  ausdk::AUElement *v111;
  ausdk::AUElement **v112;
  uint64_t v113;
  ausdk::AUElement *v114;
  ausdk::AUElement **v115;
  uint64_t v116;
  ausdk::AUElement *v117;
  ausdk::AUElement **v118;
  uint64_t v119;
  ausdk::AUElement *v120;
  ausdk::AUElement **v121;
  uint64_t v122;
  ausdk::AUElement *v123;
  ausdk::AUElement **v124;
  uint64_t v125;
  ausdk::AUElement *v126;
  ausdk::AUElement **v127;
  uint64_t v128;
  ausdk::AUElement *v129;
  ausdk::AUElement **v130;
  uint64_t v131;
  ausdk::AUElement *v132;
  ausdk::AUElement **v133;
  uint64_t v134;
  ausdk::AUElement *v135;
  ausdk::AUElement **v136;
  uint64_t v137;
  ausdk::AUElement *v138;
  ausdk::AUElement **v139;
  uint64_t v140;
  ausdk::AUElement *v141;
  ausdk::AUElement **v142;
  uint64_t v143;
  ausdk::AUElement *v144;
  ausdk::AUElement **v145;
  uint64_t v146;
  ausdk::AUElement *v147;
  ausdk::AUElement **v148;
  uint64_t v149;
  ausdk::AUElement *v150;
  ausdk::AUElement **v151;
  uint64_t v152;
  ausdk::AUElement *v153;
  ausdk::AUElement **v154;
  uint64_t v155;
  ausdk::AUElement *v156;
  ausdk::AUElement **v157;
  uint64_t v158;
  ausdk::AUElement *v159;
  ausdk::AUElement **v160;
  uint64_t v161;
  ausdk::AUElement *v162;
  ausdk::AUElement **v163;
  uint64_t v164;
  ausdk::AUElement *v165;
  ausdk::AUElement **v166;
  uint64_t v167;
  ausdk::AUElement *v168;
  ausdk::AUElement **v169;
  uint64_t v170;
  ausdk::AUElement *v171;
  ausdk::AUElement **v172;
  uint64_t v173;
  ausdk::AUElement *v174;
  ausdk::AUElement **v175;
  unint64_t i;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  ausdk::AUElement *v180;
  uint64_t v181;
  uint64_t v182;
  ausdk::AUElement *v183;
  uint64_t v184;
  uint64_t v185;
  ausdk::AUElement *v186;
  uint64_t v187;
  uint64_t v188;
  ausdk::AUElement *v189;
  uint64_t v190;
  uint64_t v191;
  ausdk::AUElement *v192;
  uint64_t v193;
  uint64_t v194;
  ausdk::AUElement *v195;
  uint64_t v196;
  uint64_t v197;
  ausdk::AUElement *v198;
  uint64_t v199;
  uint64_t v200;
  ausdk::AUElement *v201;
  uint64_t v202;
  uint64_t v203;
  ausdk::AUElement *v204;
  uint64_t v205;
  unsigned int v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t Element;
  unsigned int j;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  __int128 v214;
  CFPropertyListRef v215;
  const void *v216;
  CFTypeID v217;
  CFTypeID TypeID;
  CFTypeID v219;
  unsigned __int16 v220;
  int v221;
  NSObject *v222;
  std::__fs::filesystem::path *v223;
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep rep;
  tm *v225;
  size_t v226;
  NSObject *v227;
  _QWORD *v228;
  std::string::size_type v229;
  char v230;
  uint64_t v231;
  uint64_t *v232;
  uint64_t *v233;
  std::string::size_type v234;
  char v235;
  uint64_t v236;
  uint64_t *v237;
  unint64_t v238;
  uint64_t v239;
  uint64_t v240;
  std::string *v241;
  __int128 v242;
  _QWORD *v243;
  std::string::size_type v244;
  char v245;
  uint64_t v246;
  _QWORD *v247;
  unint64_t v248;
  _QWORD *v249;
  _QWORD *v250;
  uint64_t v251;
  unint64_t v252;
  uint64_t v253;
  unint64_t v254;
  char *v255;
  char *v256;
  char *v257;
  uint64_t v258;
  _QWORD *v259;
  uint64_t *v260;
  uint64_t *v261;
  unint64_t v262;
  uint64_t v263;
  uint64_t v264;
  std::string *v265;
  __int128 v266;
  _QWORD *v267;
  std::string::size_type v268;
  char v269;
  uint64_t v270;
  _QWORD *v271;
  unint64_t v272;
  _QWORD *v273;
  _QWORD *v274;
  uint64_t v275;
  unint64_t v276;
  uint64_t v277;
  unint64_t v278;
  char *v279;
  char *v280;
  char *v281;
  uint64_t v282;
  _QWORD *v283;
  uint64_t *v284;
  uint64_t *v285;
  uint64_t v286;
  std::__shared_weak_count *v287;
  unint64_t *p_shared_owners;
  __int128 v289;
  std::__shared_weak_count *v290;
  unint64_t v291;
  unint64_t *p_shared_weak_owners;
  unint64_t v293;
  unint64_t v294;
  unint64_t *v295;
  unint64_t v296;
  unint64_t v297;
  std::__fs::filesystem::path *data;
  uint64_t v299;
  std::__shared_weak_count *v300;
  unint64_t *v301;
  unint64_t v302;
  std::__fs::filesystem::path *v303;
  uint64_t v304;
  NSObject *v305;
  uint64_t **v306;
  _QWORD *v307;
  uint64_t v308;
  __int128 v309;
  void *v310[2];
  std::string::size_type v311;
  time_t v312;
  std::chrono::system_clock::time_point __t;
  std::string __p;
  std::string v315;
  std::__fs::filesystem::path buf;
  std::__fs::filesystem::path v317[2];
  __int128 v318;
  _QWORD v319[2];
  std::__fs::filesystem::path v320;
  std::__fs::filesystem::path *v321;
  uint64_t v322;

  v322 = *MEMORY[0x1E0C80C00];
  v3 = (_OWORD *)((char *)this + 792);
  v4 = ausdk::AUBase::AUBase(this, a2, 32, 32);
  v5 = 0;
  *(_QWORD *)v4 = &off_1E69DA9D0;
  *((_QWORD *)v4 + 66) = 0;
  v6 = (char *)v4 + 528;
  *((_DWORD *)v4 + 135) = 1186693120;
  *((_BYTE *)v4 + 544) = 0;
  *((_QWORD *)v4 + 69) = 1;
  *((_OWORD *)v4 + 35) = xmmword_1B6626830;
  *((_OWORD *)v4 + 36) = xmmword_1B6626830;
  *((_QWORD *)v4 + 74) = 0;
  *((_QWORD *)v4 + 79) = 0x2000000020;
  v7 = (const float *)((char *)v4 + 644);
  *(_QWORD *)((char *)v4 + 644) = 0x3F80000000000000;
  *((_QWORD *)v4 + 82) = 0;
  *((_DWORD *)v4 + 166) = 0;
  *((_OWORD *)v4 + 45) = 0u;
  *((_OWORD *)v4 + 46) = 0u;
  *((_OWORD *)v4 + 42) = 0u;
  *((_OWORD *)v4 + 43) = 0u;
  *(_OWORD *)((char *)v4 + 700) = 0u;
  *((_BYTE *)v4 + 752) = 1;
  *((_DWORD *)v4 + 189) = 0;
  *((_BYTE *)v4 + 760) = 0;
  *((_DWORD *)v4 + 191) = 6;
  *((_QWORD *)v4 + 96) = 0x100000001;
  *((_DWORD *)v4 + 195) = 65793;
  *((_WORD *)v4 + 392) = 256;
  *((_DWORD *)v4 + 197) = 1056964608;
  *(_QWORD *)&v8 = 0x100000001;
  *((_QWORD *)&v8 + 1) = 0x100000001;
  *v3 = v8;
  *((_QWORD *)v4 + 101) = 0;
  *((_OWORD *)v4 + 51) = xmmword_1B66A2310;
  *((_QWORD *)v4 + 104) = 0x4557A00000000000;
  *((_QWORD *)v4 + 105) = 0x645066000;
  *((_WORD *)v4 + 424) = 257;
  *((_BYTE *)v4 + 850) = 1;
  *(_OWORD *)((char *)v3 + 60) = xmmword_1B66A2320;
  *(_OWORD *)((char *)v3 + 76) = xmmword_1B66A2330;
  *((_DWORD *)v4 + 221) = 1061158912;
  *((_QWORD *)v4 + 111) = 0x3F80000041200000;
  *((_OWORD *)v4 + 56) = xmmword_1B66A2340;
  *((_DWORD *)v4 + 228) = -1;
  *((_WORD *)v4 + 458) = 0;
  *((_BYTE *)v4 + 918) = 0;
  v3[8] = xmmword_1B66A2350;
  *((_BYTE *)v4 + 936) = 0;
  *(_OWORD *)((char *)v3 + 148) = xmmword_1B66A2360;
  *((_QWORD *)v4 + 124) = 0;
  *((_OWORD *)v4 + 60) = 0u;
  *((_OWORD *)v4 + 61) = 0u;
  *((_QWORD *)v4 + 125) = 0x4357000043AC8000;
  *((_DWORD *)v4 + 252) = 1070386381;
  v306 = (uint64_t **)((char *)v4 + 1016);
  v307 = (_QWORD *)((char *)v4 + 2440);
  *((_BYTE *)v4 + 2440) = 0;
  *((_BYTE *)v4 + 2464) = 0;
  *(_OWORD *)((char *)v4 + 1016) = 0u;
  do
  {
    v9 = (char *)this + v5;
    *(_OWORD *)((char *)this + v5 + 2472) = xmmword_1B66A2370;
    v9[2488] = 0;
    *((_DWORD *)v9 + 623) = 0;
    v5 += 24;
  }
  while (v5 != 768);
  v10 = (_QWORD *)((char *)this + 3240);
  *((_BYTE *)this + 3240) = 0;
  *((_BYTE *)this + 3264) = 0;
  v3[155] = xmmword_1B66A2330;
  v3[156] = xmmword_1B66A2380;
  *(_OWORD *)((char *)v3 + 4508) = xmmword_1B66A2390;
  *(_OWORD *)((char *)v3 + 4524) = xmmword_1B66A23A0;
  *((_QWORD *)this + 513) = 0;
  *((_BYTE *)this + 4112) = 0;
  *(_QWORD *)((char *)this + 5332) = 0;
  *((_OWORD *)this + 334) = 0u;
  AU::FTSpatialAC::GetMessenger(v4);
  ausdk::AUBase::CreateElements((int64x2_t *)this);
  *((_BYTE *)this + 752) = 1;
  *((_QWORD *)this + 79) = 0x2000000020;
  *((_DWORD *)this + 160) = 32;
  vDSP_vfill(v7, (float *)this + 1197, 1, 0x20uLL);
  v11 = *((_QWORD *)this + 9);
  if (v11)
  {
    v12 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v11 + 32))(v11, 0);
  }
  else
  {
    v13 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v13)
      v12 = 0;
    else
      v12 = *v13;
  }
  ausdk::AUElement::SetParameter(v12, 0, 2.0, 0);
  v14 = *((_QWORD *)this + 9);
  if (v14)
  {
    v15 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v14 + 32))(v14, 0);
  }
  else
  {
    v16 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v16)
      v15 = 0;
    else
      v15 = *v16;
  }
  ausdk::AUElement::SetParameter(v15, 1u, 0.0, 0);
  v17 = *((_QWORD *)this + 9);
  if (v17)
  {
    v18 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v17 + 32))(v17, 0);
  }
  else
  {
    v19 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v19)
      v18 = 0;
    else
      v18 = *v19;
  }
  ausdk::AUElement::SetParameter(v18, 2u, 1.0, 0);
  v20 = *((_QWORD *)this + 9);
  if (v20)
  {
    v21 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v20 + 32))(v20, 0);
  }
  else
  {
    v22 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v22)
      v21 = 0;
    else
      v21 = *v22;
  }
  ausdk::AUElement::SetParameter(v21, 3u, 1.0, 0);
  v23 = *((_QWORD *)this + 9);
  if (v23)
  {
    v24 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v23 + 32))(v23, 0);
  }
  else
  {
    v25 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v25)
      v24 = 0;
    else
      v24 = *v25;
  }
  ausdk::AUElement::SetParameter(v24, 4u, 1.0, 0);
  v26 = *((_QWORD *)this + 9);
  if (v26)
  {
    v27 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v26 + 32))(v26, 0);
  }
  else
  {
    v28 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v28)
      v27 = 0;
    else
      v27 = *v28;
  }
  ausdk::AUElement::SetParameter(v27, 5u, 6.0, 0);
  v29 = *((_QWORD *)this + 9);
  if (v29)
  {
    v30 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v29 + 32))(v29, 0);
  }
  else
  {
    v31 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v31)
      v30 = 0;
    else
      v30 = *v31;
  }
  ausdk::AUElement::SetParameter(v30, 6u, 1.0, 0);
  v32 = *((_QWORD *)this + 9);
  if (v32)
  {
    v33 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v32 + 32))(v32, 0);
  }
  else
  {
    v34 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v34)
      v33 = 0;
    else
      v33 = *v34;
  }
  ausdk::AUElement::SetParameter(v33, 7u, 1.0, 0);
  v35 = *((_QWORD *)this + 9);
  if (v35)
  {
    v36 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v35 + 32))(v35, 0);
  }
  else
  {
    v37 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v37)
      v36 = 0;
    else
      v36 = *v37;
  }
  ausdk::AUElement::SetParameter(v36, 8u, 1.0, 0);
  v38 = *((_QWORD *)this + 9);
  if (v38)
  {
    v39 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v38 + 32))(v38, 0);
  }
  else
  {
    v40 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v40)
      v39 = 0;
    else
      v39 = *v40;
  }
  ausdk::AUElement::SetParameter(v39, 9u, 1.0, 0);
  v41 = *((_QWORD *)this + 9);
  if (v41)
  {
    v42 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v41 + 32))(v41, 0);
  }
  else
  {
    v43 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v43)
      v42 = 0;
    else
      v42 = *v43;
  }
  ausdk::AUElement::SetParameter(v42, 0xCu, -15.0, 0);
  v44 = *((_QWORD *)this + 9);
  if (v44)
  {
    v45 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v44 + 32))(v44, 0);
  }
  else
  {
    v46 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v46)
      v45 = 0;
    else
      v45 = *v46;
  }
  ausdk::AUElement::SetParameter(v45, 0xDu, 15.0, 0);
  v47 = *((_QWORD *)this + 9);
  if (v47)
  {
    v48 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v47 + 32))(v47, 0);
  }
  else
  {
    v49 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v49)
      v48 = 0;
    else
      v48 = *v49;
  }
  ausdk::AUElement::SetParameter(v48, 0xAu, 0.0, 0);
  v50 = *((_QWORD *)this + 9);
  if (v50)
  {
    v51 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v50 + 32))(v50, 0);
  }
  else
  {
    v52 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v52)
      v51 = 0;
    else
      v51 = *v52;
  }
  ausdk::AUElement::SetParameter(v51, 0xBu, 0.0, 0);
  v53 = *((_QWORD *)this + 9);
  if (v53)
  {
    v54 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v53 + 32))(v53, 0);
  }
  else
  {
    v55 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v55)
      v54 = 0;
    else
      v54 = *v55;
  }
  ausdk::AUElement::SetParameter(v54, 0x10u, 0.0, 0);
  v56 = *((_QWORD *)this + 9);
  if (v56)
  {
    v57 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v56 + 32))(v56, 0);
  }
  else
  {
    v58 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v58)
      v57 = 0;
    else
      v57 = *v58;
  }
  ausdk::AUElement::SetParameter(v57, 0x11u, 0.0, 0);
  v59 = *((_QWORD *)this + 9);
  if (v59)
  {
    v60 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v59 + 32))(v59, 0);
  }
  else
  {
    v61 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v61)
      v60 = 0;
    else
      v60 = *v61;
  }
  ausdk::AUElement::SetParameter(v60, 0xEu, -15.0, 0);
  v62 = *((_QWORD *)this + 9);
  if (v62)
  {
    v63 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v62 + 32))(v62, 0);
  }
  else
  {
    v64 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v64)
      v63 = 0;
    else
      v63 = *v64;
  }
  ausdk::AUElement::SetParameter(v63, 0xFu, 15.0, 0);
  v65 = *((_QWORD *)this + 9);
  if (v65)
  {
    v66 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v65 + 32))(v65, 0);
  }
  else
  {
    v67 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v67)
      v66 = 0;
    else
      v66 = *v67;
  }
  ausdk::AUElement::SetParameter(v66, 0x12u, 1.0, 0);
  v68 = *((_QWORD *)this + 9);
  if (v68)
  {
    v69 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v68 + 32))(v68, 0);
  }
  else
  {
    v70 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v70)
      v69 = 0;
    else
      v69 = *v70;
  }
  ausdk::AUElement::SetParameter(v69, 0x13u, 20.0, 0);
  v71 = *((_QWORD *)this + 9);
  if (v71)
  {
    v72 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v71 + 32))(v71, 0);
  }
  else
  {
    v73 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v73)
      v72 = 0;
    else
      v72 = *v73;
  }
  ausdk::AUElement::SetParameter(v72, 0x14u, 2.0, 0);
  v74 = *((_QWORD *)this + 9);
  if (v74)
  {
    v75 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v74 + 32))(v74, 0);
  }
  else
  {
    v76 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v76)
      v75 = 0;
    else
      v75 = *v76;
  }
  ausdk::AUElement::SetParameter(v75, 0x15u, 0.0, 0);
  v77 = *((_QWORD *)this + 9);
  if (v77)
  {
    v78 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v77 + 32))(v77, 0);
  }
  else
  {
    v79 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v79)
      v78 = 0;
    else
      v78 = *v79;
  }
  ausdk::AUElement::SetParameter(v78, 0x16u, 0.0, 0);
  v80 = *((_QWORD *)this + 9);
  if (v80)
  {
    v81 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v80 + 32))(v80, 0);
  }
  else
  {
    v82 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v82)
      v81 = 0;
    else
      v81 = *v82;
  }
  ausdk::AUElement::SetParameter(v81, 0x17u, 0.0, 0);
  v83 = *((_QWORD *)this + 9);
  if (v83)
  {
    v84 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v83 + 32))(v83, 0);
  }
  else
  {
    v85 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v85)
      v84 = 0;
    else
      v84 = *v85;
  }
  ausdk::AUElement::SetParameter(v84, 0x18u, 0.0, 0);
  v86 = *((_QWORD *)this + 9);
  if (v86)
  {
    v87 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v86 + 32))(v86, 0);
  }
  else
  {
    v88 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v88)
      v87 = 0;
    else
      v87 = *v88;
  }
  ausdk::AUElement::SetParameter(v87, 0x19u, -1.0, 0);
  v89 = *((_QWORD *)this + 9);
  if (v89)
  {
    v90 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v89 + 32))(v89, 0);
  }
  else
  {
    v91 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v91)
      v90 = 0;
    else
      v90 = *v91;
  }
  ausdk::AUElement::SetParameter(v90, 0x1Au, 0.0, 0);
  v92 = *((_QWORD *)this + 9);
  if (v92)
  {
    v93 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v92 + 32))(v92, 0);
  }
  else
  {
    v94 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v94)
      v93 = 0;
    else
      v93 = *v94;
  }
  ausdk::AUElement::SetParameter(v93, 0x1Bu, 0.0, 0);
  v95 = *((_QWORD *)this + 9);
  if (v95)
  {
    v96 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v95 + 32))(v95, 0);
  }
  else
  {
    v97 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v97)
      v96 = 0;
    else
      v96 = *v97;
  }
  ausdk::AUElement::SetParameter(v96, 0x1Cu, 0.0, 0);
  v98 = *((_QWORD *)this + 9);
  if (v98)
  {
    v99 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v98 + 32))(v98, 0);
  }
  else
  {
    v100 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v100)
      v99 = 0;
    else
      v99 = *v100;
  }
  ausdk::AUElement::SetParameter(v99, 0x1Du, -1.0, 0);
  v101 = *((_QWORD *)this + 9);
  if (v101)
  {
    v102 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v101 + 32))(v101, 0);
  }
  else
  {
    v103 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v103)
      v102 = 0;
    else
      v102 = *v103;
  }
  ausdk::AUElement::SetParameter(v102, 0x1Eu, 1.0, 0);
  v104 = *((_QWORD *)this + 9);
  if (v104)
  {
    v105 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v104 + 32))(v104, 0);
  }
  else
  {
    v106 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v106)
      v105 = 0;
    else
      v105 = *v106;
  }
  ausdk::AUElement::SetParameter(v105, 0x1Fu, 8.0, 0);
  v107 = *((_QWORD *)this + 9);
  if (v107)
  {
    v108 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v107 + 32))(v107, 0);
  }
  else
  {
    v109 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v109)
      v108 = 0;
    else
      v108 = *v109;
  }
  ausdk::AUElement::SetParameter(v108, 0x20u, 3.0, 0);
  v110 = *((_QWORD *)this + 9);
  if (v110)
  {
    v111 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v110 + 32))(v110, 0);
  }
  else
  {
    v112 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v112)
      v111 = 0;
    else
      v111 = *v112;
  }
  ausdk::AUElement::SetParameter(v111, 0x21u, 0.0, 0);
  v113 = *((_QWORD *)this + 9);
  if (v113)
  {
    v114 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v113 + 32))(v113, 0);
  }
  else
  {
    v115 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v115)
      v114 = 0;
    else
      v114 = *v115;
  }
  ausdk::AUElement::SetParameter(v114, 0x22u, 0.0, 0);
  v116 = *((_QWORD *)this + 9);
  if (v116)
  {
    v117 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v116 + 32))(v116, 0);
  }
  else
  {
    v118 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v118)
      v117 = 0;
    else
      v117 = *v118;
  }
  ausdk::AUElement::SetParameter(v117, 0x23u, 1.0, 0);
  v119 = *((_QWORD *)this + 9);
  if (v119)
  {
    v120 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v119 + 32))(v119, 0);
  }
  else
  {
    v121 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v121)
      v120 = 0;
    else
      v120 = *v121;
  }
  ausdk::AUElement::SetParameter(v120, 0x24u, 0.5, 0);
  v122 = *((_QWORD *)this + 9);
  if (v122)
  {
    v123 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v122 + 32))(v122, 0);
  }
  else
  {
    v124 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v124)
      v123 = 0;
    else
      v123 = *v124;
  }
  ausdk::AUElement::SetParameter(v123, 0x25u, 1.0, 0);
  v125 = *((_QWORD *)this + 9);
  if (v125)
  {
    v126 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v125 + 32))(v125, 0);
  }
  else
  {
    v127 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v127)
      v126 = 0;
    else
      v126 = *v127;
  }
  ausdk::AUElement::SetParameter(v126, 0x26u, 20.0, 0);
  v128 = *((_QWORD *)this + 9);
  if (v128)
  {
    v129 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v128 + 32))(v128, 0);
  }
  else
  {
    v130 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v130)
      v129 = 0;
    else
      v129 = *v130;
  }
  ausdk::AUElement::SetParameter(v129, 0x27u, 0.0, 0);
  v131 = *((_QWORD *)this + 9);
  if (v131)
  {
    v132 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v131 + 32))(v131, 0);
  }
  else
  {
    v133 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v133)
      v132 = 0;
    else
      v132 = *v133;
  }
  ausdk::AUElement::SetParameter(v132, 0x28u, 0.0, 0);
  v134 = *((_QWORD *)this + 9);
  if (v134)
  {
    v135 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v134 + 32))(v134, 0);
  }
  else
  {
    v136 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v136)
      v135 = 0;
    else
      v135 = *v136;
  }
  ausdk::AUElement::SetParameter(v135, 0xC8u, 1.0, 0);
  v137 = *((_QWORD *)this + 9);
  if (v137)
  {
    v138 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v137 + 32))(v137, 0);
  }
  else
  {
    v139 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v139)
      v138 = 0;
    else
      v138 = *v139;
  }
  ausdk::AUElement::SetParameter(v138, 0xC9u, 34.5, 0);
  v140 = *((_QWORD *)this + 9);
  if (v140)
  {
    v141 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v140 + 32))(v140, 0);
  }
  else
  {
    v142 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v142)
      v141 = 0;
    else
      v141 = *v142;
  }
  ausdk::AUElement::SetParameter(v141, 0xCAu, 21.5, 0);
  v143 = *((_QWORD *)this + 9);
  if (v143)
  {
    v144 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v143 + 32))(v143, 0);
  }
  else
  {
    v145 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v145)
      v144 = 0;
    else
      v144 = *v145;
  }
  ausdk::AUElement::SetParameter(v144, 0xCBu, 60.0, 0);
  v146 = *((_QWORD *)this + 9);
  if (v146)
  {
    v147 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v146 + 32))(v146, 0);
  }
  else
  {
    v148 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v148)
      v147 = 0;
    else
      v147 = *v148;
  }
  ausdk::AUElement::SetParameter(v147, 0xCCu, 0.0, 0);
  v149 = *((_QWORD *)this + 9);
  if (v149)
  {
    v150 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v149 + 32))(v149, 0);
  }
  else
  {
    v151 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v151)
      v150 = 0;
    else
      v150 = *v151;
  }
  ausdk::AUElement::SetParameter(v150, 0xCDu, 0.0, 0);
  v152 = *((_QWORD *)this + 9);
  if (v152)
  {
    v153 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v152 + 32))(v152, 0);
  }
  else
  {
    v154 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v154)
      v153 = 0;
    else
      v153 = *v154;
  }
  ausdk::AUElement::SetParameter(v153, 0xCEu, 3450.0, 0);
  v155 = *((_QWORD *)this + 9);
  if (v155)
  {
    v156 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v155 + 32))(v155, 0);
  }
  else
  {
    v157 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v157)
      v156 = 0;
    else
      v156 = *v157;
  }
  ausdk::AUElement::SetParameter(v156, 0xCFu, 2150.0, 0);
  v158 = *((_QWORD *)this + 9);
  if (v158)
  {
    v159 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v158 + 32))(v158, 0);
  }
  else
  {
    v160 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v160)
      v159 = 0;
    else
      v159 = *v160;
  }
  ausdk::AUElement::SetParameter(v159, 0xD0u, 0.0, 0);
  v161 = *((_QWORD *)this + 9);
  if (v161)
  {
    v162 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v161 + 32))(v161, 0);
  }
  else
  {
    v163 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v163)
      v162 = 0;
    else
      v162 = *v163;
  }
  ausdk::AUElement::SetParameter(v162, 0xD1u, 0.0, 0);
  v164 = *((_QWORD *)this + 9);
  if (v164)
  {
    v165 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v164 + 32))(v164, 0);
  }
  else
  {
    v166 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v166)
      v165 = 0;
    else
      v165 = *v166;
  }
  ausdk::AUElement::SetParameter(v165, 0xD2u, 345.0, 0);
  v167 = *((_QWORD *)this + 9);
  if (v167)
  {
    v168 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v167 + 32))(v167, 0);
  }
  else
  {
    v169 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v169)
      v168 = 0;
    else
      v168 = *v169;
  }
  ausdk::AUElement::SetParameter(v168, 0xD3u, 215.0, 0);
  v170 = *((_QWORD *)this + 9);
  if (v170)
  {
    v171 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v170 + 32))(v170, 0);
  }
  else
  {
    v172 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v172)
      v171 = 0;
    else
      v171 = *v172;
  }
  ausdk::AUElement::SetParameter(v171, 0xD4u, 0.0, 0);
  v173 = *((_QWORD *)this + 9);
  if (v173)
  {
    v174 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v173 + 32))(v173, 0);
  }
  else
  {
    v175 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v175)
      v174 = 0;
    else
      v174 = *v175;
  }
  ausdk::AUElement::SetParameter(v174, 0xD5u, 1.0, 0);
  for (i = 0; ; ++i)
  {
    v177 = *((_QWORD *)this + 87);
    if (v177)
      LODWORD(v178) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v177 + 24))(v177);
    else
      v178 = (*((_QWORD *)this + 85) - *((_QWORD *)this + 84)) >> 3;
    if (i >= v178)
      break;
    v179 = *((_QWORD *)this + 87);
    if (v179)
    {
      v180 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)v179 + 32))(v179, i);
    }
    else
    {
      v181 = *((_QWORD *)this + 84);
      if (i >= (*((_QWORD *)this + 85) - v181) >> 3)
        v180 = 0;
      else
        v180 = *(ausdk::AUElement **)(v181 + 8 * i);
    }
    ausdk::AUElement::SetParameter(v180, 0x258u, -1.0, 0);
    v182 = *((_QWORD *)this + 87);
    if (v182)
    {
      v183 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)v182 + 32))(v182, i);
    }
    else
    {
      v184 = *((_QWORD *)this + 84);
      if (i >= (*((_QWORD *)this + 85) - v184) >> 3)
        v183 = 0;
      else
        v183 = *(ausdk::AUElement **)(v184 + 8 * i);
    }
    ausdk::AUElement::SetParameter(v183, 0x259u, (float)i, 0);
    v185 = *((_QWORD *)this + 87);
    if (v185)
    {
      v186 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)v185 + 32))(v185, i);
    }
    else
    {
      v187 = *((_QWORD *)this + 84);
      if (i >= (*((_QWORD *)this + 85) - v187) >> 3)
        v186 = 0;
      else
        v186 = *(ausdk::AUElement **)(v187 + 8 * i);
    }
    ausdk::AUElement::SetParameter(v186, 0x25Au, 0.0, 0);
    v188 = *((_QWORD *)this + 87);
    if (v188)
    {
      v189 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)v188 + 32))(v188, i);
    }
    else
    {
      v190 = *((_QWORD *)this + 84);
      if (i >= (*((_QWORD *)this + 85) - v190) >> 3)
        v189 = 0;
      else
        v189 = *(ausdk::AUElement **)(v190 + 8 * i);
    }
    ausdk::AUElement::SetParameter(v189, 0x25Bu, 1.0, 0);
    v191 = *((_QWORD *)this + 87);
    if (v191)
    {
      v192 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)v191 + 32))(v191, i);
    }
    else
    {
      v193 = *((_QWORD *)this + 84);
      if (i >= (*((_QWORD *)this + 85) - v193) >> 3)
        v192 = 0;
      else
        v192 = *(ausdk::AUElement **)(v193 + 8 * i);
    }
    ausdk::AUElement::SetParameter(v192, 0x25Cu, 1.0, 0);
    v194 = *((_QWORD *)this + 87);
    if (v194)
    {
      v195 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)v194 + 32))(v194, i);
    }
    else
    {
      v196 = *((_QWORD *)this + 84);
      if (i >= (*((_QWORD *)this + 85) - v196) >> 3)
        v195 = 0;
      else
        v195 = *(ausdk::AUElement **)(v196 + 8 * i);
    }
    ausdk::AUElement::SetParameter(v195, 0x25Du, 0.0, 0);
    v197 = *((_QWORD *)this + 87);
    if (v197)
    {
      v198 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)v197 + 32))(v197, i);
    }
    else
    {
      v199 = *((_QWORD *)this + 84);
      if (i >= (*((_QWORD *)this + 85) - v199) >> 3)
        v198 = 0;
      else
        v198 = *(ausdk::AUElement **)(v199 + 8 * i);
    }
    ausdk::AUElement::SetParameter(v198, 0x25Eu, 0.0, 0);
    v200 = *((_QWORD *)this + 87);
    if (v200)
    {
      v201 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)v200 + 32))(v200, i);
    }
    else
    {
      v202 = *((_QWORD *)this + 84);
      if (i >= (*((_QWORD *)this + 85) - v202) >> 3)
        v201 = 0;
      else
        v201 = *(ausdk::AUElement **)(v202 + 8 * i);
    }
    ausdk::AUElement::SetParameter(v201, 0x25Fu, 0.0, 0);
    v203 = *((_QWORD *)this + 87);
    if (v203)
    {
      v204 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)v203 + 32))(v203, i);
    }
    else
    {
      v205 = *((_QWORD *)this + 84);
      if (i >= (*((_QWORD *)this + 85) - v205) >> 3)
        v204 = 0;
      else
        v204 = *(ausdk::AUElement **)(v205 + 8 * i);
    }
    ausdk::AUElement::SetParameter(v204, 0x260u, 0.0, 0);
  }
  AUFTSpatialAC::SetOutputParamsToDefaults(this);
  v206 = 0;
  v317[0].__pn_.__r_.__value_.__r.__words[0] = 0x40D7700000000000;
  *(_OWORD *)&v317[0].__pn_.__r_.__value_.__r.__words[1] = xmmword_1B6626900;
  *(_OWORD *)&v317[1].__pn_.__r_.__value_.__l.__data_ = xmmword_1B6626910;
  while (1)
  {
    v207 = *((_QWORD *)this + 15);
    if (v207)
      LODWORD(v208) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v207 + 24))(v207);
    else
      v208 = (*((_QWORD *)this + 13) - *((_QWORD *)this + 12)) >> 3;
    if (v206 >= v208)
      break;
    Element = ausdk::AUScope::SafeGetElement((AUFTSpatialAC *)((char *)this + 80), v206);
    (*(void (**)(uint64_t, std::__fs::filesystem::path *))(*(_QWORD *)Element + 56))(Element, v317);
    ++v206;
  }
  for (j = 0; ; ++j)
  {
    v211 = *((_QWORD *)this + 21);
    if (v211)
      LODWORD(v212) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v211 + 24))(v211);
    else
      v212 = (*((_QWORD *)this + 19) - *((_QWORD *)this + 18)) >> 3;
    if (j >= v212)
      break;
    v213 = ausdk::AUScope::SafeGetElement((AUFTSpatialAC *)((char *)this + 128), j);
    (*(void (**)(uint64_t, std::__fs::filesystem::path *))(*(_QWORD *)v213 + 56))(v213, v317);
  }
  memset_pattern16((char *)this + 4116, &unk_1B66A2B20, 0x80uLL);
  memset_pattern16((char *)this + 4244, &unk_1B66A2B20, 0x80uLL);
  *(_QWORD *)&v214 = 0x101010101010101;
  *((_QWORD *)&v214 + 1) = 0x101010101010101;
  *(_OWORD *)((char *)this + 600) = v214;
  *(_OWORD *)((char *)this + 616) = v214;
  AUFTSpatialAC::UpdateState(this);
  if (GetSpatialMetadataSPI(void)::sSpatialMetadataSPIOnce != -1)
    dispatch_once(&GetSpatialMetadataSPI(void)::sSpatialMetadataSPIOnce, &__block_literal_global_128);
  if (GetSpatialMetadataSPI(void)::sSpatialMetadataSPI)
  {
    (*(void (**)(char *, uint64_t))(GetSpatialMetadataSPI(void)::sSpatialMetadataSPI + 8))(v6, 32);
    if (GetSpatialMetadataSPI(void)::sSpatialMetadataSPIOnce != -1)
      dispatch_once(&GetSpatialMetadataSPI(void)::sSpatialMetadataSPIOnce, &__block_literal_global_128);
    (*(void (**)(_QWORD, char *))(GetSpatialMetadataSPI(void)::sSpatialMetadataSPI + 40))(*((_QWORD *)this + 66), (char *)this + 536);
  }
  v215 = CFPreferencesCopyAppValue(CFSTR("AUFTSpatialACEnableRealTimeLogs"), CFSTR("com.apple.coreaudio"));
  v216 = v215;
  if (v215)
  {
    v217 = CFGetTypeID(v215);
    if (v217 != CFBooleanGetTypeID())
    {
      CFRelease(v216);
      goto LABEL_468;
    }
    TypeID = CFBooleanGetTypeID();
    if (TypeID == CFGetTypeID(v216))
    {
      if (!CFBooleanGetValue((CFBooleanRef)v216))
        goto LABEL_357;
    }
    else
    {
      v219 = CFNumberGetTypeID();
      if (v219 != CFGetTypeID(v216))
      {
LABEL_357:
        v221 = 0;
        goto LABEL_358;
      }
      v220 = applesauce::CF::details::number_convert_as<BOOL>((const __CFNumber *)v216);
      v221 = 0;
      if (v220 < 0x100u || !(_BYTE)v220)
        goto LABEL_358;
    }
    v221 = 1;
LABEL_358:
    CFRelease(v216);
    if (!v221)
      goto LABEL_468;
    std::__fs::filesystem::__temp_directory_path(v317, 0);
    memset(&__p, 0, sizeof(__p));
    std::string::append[abi:ne180100]<char const*,0>(&__p, "AUFTSpatialAC", "");
    std::__fs::filesystem::operator/[abi:ne180100]((std::__fs::filesystem::path *)&__p, (uint64_t)v317, &v320);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (SHIBYTE(v317[0].__pn_.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v317[0].__pn_.__r_.__value_.__l.__data_);
    if (AUFTSpatialAC::getAUSLog(void)::onceToken != -1)
      dispatch_once(&AUFTSpatialAC::getAUSLog(void)::onceToken, &__block_literal_global_13833);
    v222 = AUFTSpatialAC::getAUSLog(void)::gLog;
    if (os_log_type_enabled((os_log_t)AUFTSpatialAC::getAUSLog(void)::gLog, OS_LOG_TYPE_DEFAULT))
    {
      v223 = &v320;
      if ((v320.__pn_.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v223 = (std::__fs::filesystem::path *)v320.__pn_.__r_.__value_.__r.__words[0];
      LODWORD(v317[0].__pn_.__r_.__value_.__l.__data_) = 136315138;
      *(std::string::size_type *)((char *)v317[0].__pn_.__r_.__value_.__r.__words + 4) = (std::string::size_type)v223;
      _os_log_impl(&dword_1B5ED0000, v222, OS_LOG_TYPE_DEFAULT, "set up logs in \"%s\"", (uint8_t *)v317, 0xCu);
    }
    std::__fs::filesystem::__status(&v320, 0);
    if (__p.__r_.__value_.__s.__data_[0] == 255 || !__p.__r_.__value_.__s.__data_[0])
      std::__fs::filesystem::__create_directory(&v320, 0);
    v318 = 0u;
    memset(v317, 0, sizeof(v317));
    __t.__d_.__rep_ = std::chrono::system_clock::now().__d_.__rep_;
    v312 = std::chrono::system_clock::to_time_t(&__t);
    rep = __t.__d_.__rep_;
    v225 = localtime(&v312);
    v226 = strftime((char *)v317, 0x40uLL, "%T", v225);
    sprintf((char *)v317 + v226, ":%03lld", rep / 1000 % 1000);
    std::string::basic_string[abi:ne180100]<0>(&__p, (char *)v317);
    if (AUFTSpatialAC::getAUSLog(void)::onceToken != -1)
      dispatch_once(&AUFTSpatialAC::getAUSLog(void)::onceToken, &__block_literal_global_13833);
    v227 = AUFTSpatialAC::getAUSLog(void)::gLog;
    if (os_log_type_enabled((os_log_t)AUFTSpatialAC::getAUSLog(void)::gLog, OS_LOG_TYPE_DEFAULT))
    {
      LODWORD(buf.__pn_.__r_.__value_.__l.__data_) = 136315138;
      *(std::string::size_type *)((char *)buf.__pn_.__r_.__value_.__r.__words + 4) = (std::string::size_type)v317;
      _os_log_impl(&dword_1B5ED0000, v227, OS_LOG_TYPE_DEFAULT, "set up logs with time stamp \"%s\"", (uint8_t *)&buf, 0xCu);
    }
    std::string::basic_string[abi:ne180100]<0>(v310, "OrientationParams");
    AUFTSpatialAC::SetUpLogs(void)::$_0::operator()(&buf, (uint64_t)&v320, (uint64_t)&__p, (uint64_t)v310);
    v228 = (_QWORD *)operator new();
    v315.__r_.__value_.__r.__words[0] = buf.__pn_.__r_.__value_.__l.__size_;
    v229 = buf.__pn_.__r_.__value_.__r.__words[0];
    *(std::string::size_type *)((char *)v315.__r_.__value_.__r.__words + 7) = *(std::string::size_type *)((char *)&buf.__pn_.__r_.__value_.__r.__words[1] + 7);
    v230 = HIBYTE(buf.__pn_.__r_.__value_.__r.__words[2]);
    memset(&buf, 0, sizeof(buf));
    v231 = operator new();
    *(_QWORD *)(v231 + 664) = v315.__r_.__value_.__r.__words[0];
    *(_QWORD *)(v231 + 671) = *(std::string::size_type *)((char *)v315.__r_.__value_.__r.__words + 7);
    *(_QWORD *)v231 = 0;
    *(_QWORD *)(v231 + 8) = 0;
    *(_QWORD *)(v231 + 16) = 850045863;
    *(_BYTE *)(v231 + 648) = 0;
    *(_OWORD *)(v231 + 24) = 0u;
    *(_OWORD *)(v231 + 40) = 0u;
    *(_OWORD *)(v231 + 56) = 0u;
    *(_OWORD *)(v231 + 65) = 0u;
    *(_QWORD *)(v231 + 656) = v229;
    *(_BYTE *)(v231 + 679) = v230;
    *(_QWORD *)(v231 + 680) = 0;
    *(_QWORD *)(v231 + 744) = 0;
    *v228 = v231;
    v232 = (uint64_t *)*((_QWORD *)this + 101);
    *((_QWORD *)this + 101) = v228;
    if (v232)
      std::default_delete<AUFTSpatialAC::AURealTimeDebugLog<AUFTSpatialAC::AUFTOrientationParams,256ul>>::operator()[abi:ne180100](v232);
    if (SHIBYTE(buf.__pn_.__r_.__value_.__r.__words[2]) < 0)
      operator delete(buf.__pn_.__r_.__value_.__l.__data_);
    if (SHIBYTE(v311) < 0)
      operator delete(v310[0]);
    std::string::basic_string[abi:ne180100]<0>(v310, "WindowParams");
    AUFTSpatialAC::SetUpLogs(void)::$_0::operator()(&buf, (uint64_t)&v320, (uint64_t)&__p, (uint64_t)v310);
    v233 = (uint64_t *)operator new();
    v315.__r_.__value_.__r.__words[0] = buf.__pn_.__r_.__value_.__l.__size_;
    v234 = buf.__pn_.__r_.__value_.__r.__words[0];
    *(std::string::size_type *)((char *)v315.__r_.__value_.__r.__words + 7) = *(std::string::size_type *)((char *)&buf.__pn_.__r_.__value_.__r.__words[1] + 7);
    v235 = HIBYTE(buf.__pn_.__r_.__value_.__r.__words[2]);
    memset(&buf, 0, sizeof(buf));
    v236 = operator new();
    *(_QWORD *)(v236 + 664) = v315.__r_.__value_.__r.__words[0];
    *(_QWORD *)(v236 + 671) = *(std::string::size_type *)((char *)v315.__r_.__value_.__r.__words + 7);
    *(_QWORD *)v236 = 0;
    *(_QWORD *)(v236 + 8) = 0;
    *(_QWORD *)(v236 + 16) = 850045863;
    *(_BYTE *)(v236 + 648) = 0;
    *(_OWORD *)(v236 + 24) = 0u;
    *(_OWORD *)(v236 + 40) = 0u;
    *(_OWORD *)(v236 + 56) = 0u;
    *(_OWORD *)(v236 + 65) = 0u;
    *(_QWORD *)(v236 + 656) = v234;
    *(_BYTE *)(v236 + 679) = v235;
    *(_QWORD *)(v236 + 680) = 0;
    *(_QWORD *)(v236 + 744) = 0;
    *v233 = v236;
    v237 = *v306;
    *v306 = v233;
    if (v237)
      std::default_delete<AUFTSpatialAC::AURealTimeDebugLog<AUFTSpatialAC::AUFTWindowParams,256ul>>::operator()[abi:ne180100](v237);
    if (SHIBYTE(buf.__pn_.__r_.__value_.__r.__words[2]) < 0)
      operator delete(buf.__pn_.__r_.__value_.__l.__data_);
    if (SHIBYTE(v311) < 0)
      operator delete(v310[0]);
    if (*((_BYTE *)this + 2464))
    {
      buf.__pn_.__r_.__value_.__r.__words[0] = (std::string::size_type)v307;
      std::vector<std::unique_ptr<AUFTSpatialAC::AURealTimeDebugLog<AUFTSpatialAC::AUFTSpatAUInStreamParams,256ul>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&buf);
    }
    v238 = 0;
    *v307 = 0;
    v307[1] = 0;
    v307[2] = 0;
    *((_BYTE *)this + 2464) = 1;
    while (1)
    {
      v239 = *((_QWORD *)this + 15);
      if (v239)
        LODWORD(v240) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v239 + 24))(v239);
      else
        v240 = (*((_QWORD *)this + 13) - *((_QWORD *)this + 12)) >> 3;
      if (v238 >= v240)
      {
        if (*((_BYTE *)this + 3264))
        {
          buf.__pn_.__r_.__value_.__r.__words[0] = (std::string::size_type)v10;
          std::vector<std::unique_ptr<AUFTSpatialAC::AURealTimeDebugLog<AUFTSpatialAC::AUFTSpatAUOutStreamParams,256ul>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&buf);
        }
        v262 = 0;
        *v10 = 0;
        v10[1] = 0;
        v10[2] = 0;
        *((_BYTE *)this + 3264) = 1;
        while (2)
        {
          v263 = *((_QWORD *)this + 21);
          if (v263)
            LODWORD(v264) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v263 + 24))(v263);
          else
            v264 = (*((_QWORD *)this + 19) - *((_QWORD *)this + 18)) >> 3;
          if (v262 >= v264)
          {
            if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
              operator delete(__p.__r_.__value_.__l.__data_);
            if (SHIBYTE(v320.__pn_.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v320.__pn_.__r_.__value_.__l.__data_);
            goto LABEL_468;
          }
          std::to_string(&v315, v262);
          v265 = std::string::insert(&v315, 0, "OutStreamParams.", 0x10uLL);
          v266 = *(_OWORD *)&v265->__r_.__value_.__l.__data_;
          v311 = v265->__r_.__value_.__r.__words[2];
          *(_OWORD *)v310 = v266;
          v265->__r_.__value_.__l.__size_ = 0;
          v265->__r_.__value_.__r.__words[2] = 0;
          v265->__r_.__value_.__r.__words[0] = 0;
          AUFTSpatialAC::SetUpLogs(void)::$_0::operator()(&buf, (uint64_t)&v320, (uint64_t)&__p, (uint64_t)v310);
          v267 = (_QWORD *)operator new();
          v319[0] = buf.__pn_.__r_.__value_.__l.__size_;
          v268 = buf.__pn_.__r_.__value_.__r.__words[0];
          *(_QWORD *)((char *)v319 + 7) = *(std::string::size_type *)((char *)&buf.__pn_.__r_.__value_.__r.__words[1] + 7);
          v269 = HIBYTE(buf.__pn_.__r_.__value_.__r.__words[2]);
          memset(&buf, 0, sizeof(buf));
          v270 = operator new();
          *(_QWORD *)(v270 + 664) = v319[0];
          *(_QWORD *)(v270 + 671) = *(_QWORD *)((char *)v319 + 7);
          *(_QWORD *)v270 = 0;
          *(_QWORD *)(v270 + 8) = 0;
          *(_QWORD *)(v270 + 16) = 850045863;
          *(_BYTE *)(v270 + 648) = 0;
          *(_OWORD *)(v270 + 24) = 0u;
          *(_OWORD *)(v270 + 40) = 0u;
          *(_OWORD *)(v270 + 56) = 0u;
          *(_OWORD *)(v270 + 65) = 0u;
          *(_QWORD *)(v270 + 656) = v268;
          *(_BYTE *)(v270 + 679) = v269;
          *(_QWORD *)(v270 + 680) = 0;
          *(_QWORD *)(v270 + 744) = 0;
          *v267 = v270;
          v271 = (_QWORD *)*((_QWORD *)this + 406);
          v272 = *((_QWORD *)this + 407);
          if ((unint64_t)v271 >= v272)
          {
            v274 = (_QWORD *)*v10;
            v275 = v271 - v274;
            v276 = v275 + 1;
            if ((unint64_t)(v275 + 1) >> 61)
              std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
            v277 = v272 - (_QWORD)v274;
            if (v277 >> 2 > v276)
              v276 = v277 >> 2;
            if ((unint64_t)v277 >= 0x7FFFFFFFFFFFFFF8)
              v278 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v278 = v276;
            if (v278)
            {
              if (v278 >> 61)
                std::__throw_bad_array_new_length[abi:ne180100]();
              v279 = (char *)operator new(8 * v278);
            }
            else
            {
              v279 = 0;
            }
            v280 = &v279[8 * v275];
            v281 = &v279[8 * v278];
            *(_QWORD *)v280 = v267;
            v273 = v280 + 8;
            if (v271 == v274)
            {
              *((_QWORD *)this + 405) = v280;
              *((_QWORD *)this + 406) = v273;
              *((_QWORD *)this + 407) = v281;
              v10 = (_QWORD *)((char *)this + 3240);
              if (!v271)
                goto LABEL_455;
            }
            else
            {
              do
              {
                v282 = *--v271;
                *v271 = 0;
                *((_QWORD *)v280 - 1) = v282;
                v280 -= 8;
              }
              while (v271 != v274);
              v283 = (_QWORD *)*((_QWORD *)this + 405);
              v271 = (_QWORD *)*((_QWORD *)this + 406);
              *((_QWORD *)this + 405) = v280;
              *((_QWORD *)this + 406) = v273;
              *((_QWORD *)this + 407) = v281;
              v10 = (_QWORD *)((char *)this + 3240);
              if (v271 != v283)
              {
                do
                {
                  v285 = (uint64_t *)*--v271;
                  v284 = v285;
                  *v271 = 0;
                  if (v285)
                    std::default_delete<AUFTSpatialAC::AURealTimeDebugLog<AUFTSpatialAC::AUFTSpatAUOutStreamParams,256ul>>::operator()[abi:ne180100](v284);
                }
                while (v271 != v283);
                v271 = v283;
              }
              if (!v271)
                goto LABEL_455;
            }
            operator delete(v271);
          }
          else
          {
            *v271 = v267;
            v273 = v271 + 1;
          }
LABEL_455:
          *((_QWORD *)this + 406) = v273;
          if (SHIBYTE(buf.__pn_.__r_.__value_.__r.__words[2]) < 0)
            operator delete(buf.__pn_.__r_.__value_.__l.__data_);
          if (SHIBYTE(v311) < 0)
            operator delete(v310[0]);
          if (SHIBYTE(v315.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v315.__r_.__value_.__l.__data_);
          ++v262;
          continue;
        }
      }
      std::to_string(&v315, v238);
      v241 = std::string::insert(&v315, 0, "InStreamParams.", 0xFuLL);
      v242 = *(_OWORD *)&v241->__r_.__value_.__l.__data_;
      v311 = v241->__r_.__value_.__r.__words[2];
      *(_OWORD *)v310 = v242;
      v241->__r_.__value_.__l.__size_ = 0;
      v241->__r_.__value_.__r.__words[2] = 0;
      v241->__r_.__value_.__r.__words[0] = 0;
      AUFTSpatialAC::SetUpLogs(void)::$_0::operator()(&buf, (uint64_t)&v320, (uint64_t)&__p, (uint64_t)v310);
      v243 = (_QWORD *)operator new();
      v319[0] = buf.__pn_.__r_.__value_.__l.__size_;
      v244 = buf.__pn_.__r_.__value_.__r.__words[0];
      *(_QWORD *)((char *)v319 + 7) = *(std::string::size_type *)((char *)&buf.__pn_.__r_.__value_.__r.__words[1] + 7);
      v245 = HIBYTE(buf.__pn_.__r_.__value_.__r.__words[2]);
      memset(&buf, 0, sizeof(buf));
      v246 = operator new();
      *(_QWORD *)(v246 + 664) = v319[0];
      *(_QWORD *)(v246 + 671) = *(_QWORD *)((char *)v319 + 7);
      *(_QWORD *)v246 = 0;
      *(_QWORD *)(v246 + 8) = 0;
      *(_QWORD *)(v246 + 16) = 850045863;
      *(_BYTE *)(v246 + 648) = 0;
      *(_OWORD *)(v246 + 24) = 0u;
      *(_OWORD *)(v246 + 40) = 0u;
      *(_OWORD *)(v246 + 56) = 0u;
      *(_OWORD *)(v246 + 65) = 0u;
      *(_QWORD *)(v246 + 656) = v244;
      *(_BYTE *)(v246 + 679) = v245;
      *(_QWORD *)(v246 + 680) = 0;
      *(_QWORD *)(v246 + 744) = 0;
      *v243 = v246;
      v247 = (_QWORD *)*((_QWORD *)this + 306);
      v248 = *((_QWORD *)this + 307);
      if ((unint64_t)v247 < v248)
      {
        *v247 = v243;
        v249 = v247 + 1;
        goto LABEL_418;
      }
      v250 = (_QWORD *)*v307;
      v251 = ((uint64_t)v247 - *v307) >> 3;
      v252 = v251 + 1;
      if ((unint64_t)(v251 + 1) >> 61)
        std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
      v253 = v248 - (_QWORD)v250;
      if (v253 >> 2 > v252)
        v252 = v253 >> 2;
      v254 = (unint64_t)v253 >= 0x7FFFFFFFFFFFFFF8 ? 0x1FFFFFFFFFFFFFFFLL : v252;
      if (v254)
      {
        if (v254 >> 61)
          std::__throw_bad_array_new_length[abi:ne180100]();
        v255 = (char *)operator new(8 * v254);
      }
      else
      {
        v255 = 0;
      }
      v256 = &v255[8 * v251];
      v257 = &v255[8 * v254];
      *(_QWORD *)v256 = v243;
      v249 = v256 + 8;
      if (v247 == v250)
        break;
      do
      {
        v258 = *--v247;
        *v247 = 0;
        *((_QWORD *)v256 - 1) = v258;
        v256 -= 8;
      }
      while (v247 != v250);
      v259 = (_QWORD *)*((_QWORD *)this + 305);
      v247 = (_QWORD *)*((_QWORD *)this + 306);
      *((_QWORD *)this + 305) = v256;
      *((_QWORD *)this + 306) = v249;
      *((_QWORD *)this + 307) = v257;
      if (v247 == v259)
      {
        v10 = (_QWORD *)((char *)this + 3240);
        if (v247)
          goto LABEL_417;
      }
      else
      {
        v10 = (_QWORD *)((char *)this + 3240);
        do
        {
          v261 = (uint64_t *)*--v247;
          v260 = v261;
          *v247 = 0;
          if (v261)
            std::default_delete<AUFTSpatialAC::AURealTimeDebugLog<AUFTSpatialAC::AUFTSpatAUInStreamParams,256ul>>::operator()[abi:ne180100](v260);
        }
        while (v247 != v259);
        v247 = v259;
        if (v259)
          goto LABEL_417;
      }
LABEL_418:
      *((_QWORD *)this + 306) = v249;
      if (SHIBYTE(buf.__pn_.__r_.__value_.__r.__words[2]) < 0)
        operator delete(buf.__pn_.__r_.__value_.__l.__data_);
      if (SHIBYTE(v311) < 0)
        operator delete(v310[0]);
      if (SHIBYTE(v315.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v315.__r_.__value_.__l.__data_);
      ++v238;
    }
    *((_QWORD *)this + 305) = v256;
    *((_QWORD *)this + 306) = v249;
    *((_QWORD *)this + 307) = v257;
    v10 = (_QWORD *)((char *)this + 3240);
    if (!v247)
      goto LABEL_418;
LABEL_417:
    operator delete(v247);
    goto LABEL_418;
  }
LABEL_468:
  v320.__pn_.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_1E69DB0E8;
  v321 = &v320;
  v286 = operator new();
  std::__function::__value_func<void ()(long long,applesauce::CF::DictionaryRef)>::__value_func[abi:ne180100]((uint64_t)v317, (uint64_t)&v320);
  *(_QWORD *)v286 = 0;
  *(_QWORD *)(v286 + 8) = 0;
  std::__function::__value_func<void ()(long long,applesauce::CF::DictionaryRef)>::__value_func[abi:ne180100](v286 + 16, (uint64_t)v317);
  *(_QWORD *)(v286 + 48) = 850045863;
  *(_OWORD *)(v286 + 56) = 0u;
  *(_OWORD *)(v286 + 72) = 0u;
  *(_OWORD *)(v286 + 88) = 0u;
  *(_OWORD *)(v286 + 104) = 0u;
  *(_OWORD *)(v286 + 120) = 0u;
  *(_QWORD *)(v286 + 136) = 30;
  *(_OWORD *)(v286 + 144) = 0u;
  *(_OWORD *)(v286 + 160) = 0u;
  *(_DWORD *)(v286 + 176) = 1065353216;
  v287 = (std::__shared_weak_count *)operator new();
  v287->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v287->__shared_owners_;
  v287->__vftable = (std::__shared_weak_count_vtbl *)&off_1E69CB088;
  v287->__shared_weak_owners_ = 0;
  v287[1].__vftable = (std::__shared_weak_count_vtbl *)v286;
  *(_QWORD *)&v289 = v286;
  v290 = *(std::__shared_weak_count **)(v286 + 8);
  if (v290)
  {
    if (v290->__shared_owners_ != -1)
      goto LABEL_481;
    do
      v291 = __ldxr(p_shared_owners);
    while (__stxr(v291 + 1, p_shared_owners));
    p_shared_weak_owners = (unint64_t *)&v287->__shared_weak_owners_;
    do
      v293 = __ldxr(p_shared_weak_owners);
    while (__stxr(v293 + 1, p_shared_weak_owners));
    *(_QWORD *)v286 = v286;
    *(_QWORD *)(v286 + 8) = v287;
    std::__shared_weak_count::__release_weak(v290);
    *(_QWORD *)&v289 = v286;
  }
  else
  {
    do
      v294 = __ldxr(p_shared_owners);
    while (__stxr(v294 + 1, p_shared_owners));
    v295 = (unint64_t *)&v287->__shared_weak_owners_;
    do
      v296 = __ldxr(v295);
    while (__stxr(v296 + 1, v295));
    *(_QWORD *)v286 = v286;
    *(_QWORD *)(v286 + 8) = v287;
  }
  do
    v297 = __ldaxr(p_shared_owners);
  while (__stlxr(v297 - 1, p_shared_owners));
  if (!v297)
  {
    v308 = v289;
    ((void (*)(std::__shared_weak_count *))v287->__on_zero_shared)(v287);
    std::__shared_weak_count::__release_weak(v287);
    *(_QWORD *)&v289 = v308;
  }
LABEL_481:
  *((_QWORD *)&v289 + 1) = v287;
  data = (std::__fs::filesystem::path *)v317[1].__pn_.__r_.__value_.__l.__data_;
  if ((std::__fs::filesystem::path *)v317[1].__pn_.__r_.__value_.__l.__data_ == v317)
  {
    v309 = v289;
    v299 = 4;
    data = v317;
    goto LABEL_485;
  }
  if (v317[1].__pn_.__r_.__value_.__r.__words[0])
  {
    v309 = v289;
    v299 = 5;
LABEL_485:
    (*(void (**)(void))(data->__pn_.__r_.__value_.__r.__words[0] + 8 * v299))();
    v289 = v309;
  }
  v300 = (std::__shared_weak_count *)*((_QWORD *)this + 669);
  *((_OWORD *)this + 334) = v289;
  if (v300)
  {
    v301 = (unint64_t *)&v300->__shared_owners_;
    do
      v302 = __ldaxr(v301);
    while (__stlxr(v302 - 1, v301));
    if (!v302)
    {
      ((void (*)(std::__shared_weak_count *))v300->__on_zero_shared)(v300);
      std::__shared_weak_count::__release_weak(v300);
    }
  }
  v303 = v321;
  if (v321 == &v320)
  {
    v304 = 4;
    v303 = &v320;
  }
  else
  {
    if (!v321)
      goto LABEL_496;
    v304 = 5;
  }
  (*(void (**)(void))(v303->__pn_.__r_.__value_.__r.__words[0] + 8 * v304))();
LABEL_496:
  if (AUFTSpatialACLog(void)::onceToken != -1)
    dispatch_once(&AUFTSpatialACLog(void)::onceToken, &__block_literal_global_132_13838);
  v305 = AUFTSpatialACLog(void)::gLog;
  if (os_log_type_enabled((os_log_t)AUFTSpatialACLog(void)::gLog, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(v317[0].__pn_.__r_.__value_.__l.__data_) = 0;
    _os_log_impl(&dword_1B5ED0000, v305, OS_LOG_TYPE_DEFAULT, "created", (uint8_t *)v317, 2u);
  }
}

void sub_1B6403598(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,int a34,__int16 a35,char a36,char a37,void *__p,uint64_t a39,int a40,__int16 a41,char a42,char a43,uint64_t a44,uint64_t buf,uint64_t a46,int a47,__int16 a48,char a49,char a50,uint64_t a51)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

void std::__function::__func<AUFTSpatialAC::SetUpMetricsReporter(void)::$_0,std::allocator<AUFTSpatialAC::SetUpMetricsReporter(void)::$_0>,void ()(long long,applesauce::CF::DictionaryRef)>::~__func()
{
  JUMPOUT(0x1BCC95CECLL);
}

_QWORD *std::__function::__func<AUFTSpatialAC::SetUpMetricsReporter(void)::$_0,std::allocator<AUFTSpatialAC::SetUpMetricsReporter(void)::$_0>,void ()(long long,applesauce::CF::DictionaryRef)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E69DB0E8;
  return result;
}

void std::__function::__func<AUFTSpatialAC::SetUpMetricsReporter(void)::$_0,std::allocator<AUFTSpatialAC::SetUpMetricsReporter(void)::$_0>,void ()(long long,applesauce::CF::DictionaryRef)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E69DB0E8;
}

void std::__function::__func<AUFTSpatialAC::SetUpMetricsReporter(void)::$_0,std::allocator<AUFTSpatialAC::SetUpMetricsReporter(void)::$_0>,void ()(long long,applesauce::CF::DictionaryRef)>::operator()(uint64_t a1, uint64_t *a2, const void **a3)
{
  uint64_t v3;
  const void *v4;

  v3 = *a2;
  v4 = *a3;
  *a3 = 0;
  if (AudioStatisticsLibraryLoader(void)::once != -1)
    dispatch_once(&AudioStatisticsLibraryLoader(void)::once, &__block_literal_global_394);
  if (AudioStatisticsLibraryLoader(void)::libSym)
    AudioStatisticsLibraryLoader(void)::libSym(v3, v4, 268435467, 0);
  if (v4)
    CFRelease(v4);
}

void sub_1B6403994(_Unwind_Exception *exception_object)
{
  const void *v1;

  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

void AUFTSpatialAC::SetUpLogs(void)::$_0::operator()(std::__fs::filesystem::path *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  std::string *v7;
  __int128 v8;
  int v9;
  const std::string::value_type *v10;
  std::string::size_type v11;
  std::string *v12;
  __int128 v13;
  std::string *v14;
  std::string::size_type v15;
  char v16;
  std::string v17;
  std::string v18;
  std::string v19;
  std::__fs::filesystem::path v20;
  _QWORD v21[3];

  v21[2] = *MEMORY[0x1E0C80C00];
  std::operator+<char>();
  v7 = std::string::append(&v17, ".", 1uLL);
  v8 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
  v18.__r_.__value_.__r.__words[2] = v7->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v18.__r_.__value_.__l.__data_ = v8;
  v7->__r_.__value_.__l.__size_ = 0;
  v7->__r_.__value_.__r.__words[2] = 0;
  v7->__r_.__value_.__r.__words[0] = 0;
  v9 = *(char *)(a4 + 23);
  if (v9 >= 0)
    v10 = (const std::string::value_type *)a4;
  else
    v10 = *(const std::string::value_type **)a4;
  if (v9 >= 0)
    v11 = *(unsigned __int8 *)(a4 + 23);
  else
    v11 = *(_QWORD *)(a4 + 8);
  v12 = std::string::append(&v18, v10, v11);
  v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
  v19.__r_.__value_.__r.__words[2] = v12->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v19.__r_.__value_.__l.__data_ = v13;
  v12->__r_.__value_.__l.__size_ = 0;
  v12->__r_.__value_.__r.__words[2] = 0;
  v12->__r_.__value_.__r.__words[0] = 0;
  v14 = std::string::append(&v19, ".csv", 4uLL);
  v15 = v14->__r_.__value_.__r.__words[0];
  v21[0] = v14->__r_.__value_.__l.__size_;
  *(_QWORD *)((char *)v21 + 7) = *(std::string::size_type *)((char *)&v14->__r_.__value_.__r.__words[1] + 7);
  v16 = HIBYTE(v14->__r_.__value_.__r.__words[2]);
  v14->__r_.__value_.__l.__size_ = 0;
  v14->__r_.__value_.__r.__words[2] = 0;
  v14->__r_.__value_.__r.__words[0] = 0;
  *(std::string::size_type *)((char *)&v20.__pn_.__r_.__value_.__r.__words[1] + 7) = *(_QWORD *)((char *)v21 + 7);
  v20.__pn_.__r_.__value_.__r.__words[0] = v15;
  v20.__pn_.__r_.__value_.__l.__size_ = v21[0];
  *((_BYTE *)&v20.__pn_.__r_.__value_.__s + 23) = v16;
  std::__fs::filesystem::operator/[abi:ne180100](&v20, a2, a1);
  if (SHIBYTE(v20.__pn_.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v20.__pn_.__r_.__value_.__l.__data_);
  if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v19.__r_.__value_.__l.__data_);
  if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v18.__r_.__value_.__l.__data_);
  if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v17.__r_.__value_.__l.__data_);
}

void sub_1B6403C98(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  uint64_t v28;

  if (*(char *)(v28 - 57) < 0)
    operator delete(*(void **)(v28 - 80));
  if (a28 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(exception_object);
}

void AUSpeakerProtectionV3::~AUSpeakerProtectionV3(AUSpeakerProtectionV3 *this)
{
  AUSpeakerProtectionV3::~AUSpeakerProtectionV3(this);
  JUMPOUT(0x1BCC95CECLL);
}

{
  uint64_t v2;
  NSObject *v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  uint64_t v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  _BYTE v22[12];
  __int16 v23;
  int v24;
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)this = &off_1E69DB218;
  v2 = spp3Subsystem();
  if (v2)
  {
    if ((*(_BYTE *)(v2 + 8) & 1) != 0)
    {
      v3 = *(NSObject **)v2;
      if (*(_QWORD *)v2)
      {
        if (os_log_type_enabled(*(os_log_t *)v2, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)v22 = 136315394;
          *(_QWORD *)&v22[4] = "AUSpeakerProtectionV3.cpp";
          v23 = 1024;
          v24 = 168;
          _os_log_impl(&dword_1B5ED0000, v3, OS_LOG_TYPE_DEBUG, "%25s:%-5d AUSpeakerProtectionV3::~AUSpeakerProtectionV3", v22, 0x12u);
        }
      }
    }
  }
  (*(void (**)(AUSpeakerProtectionV3 *))(*(_QWORD *)this + 64))(this);
  v4 = (_QWORD *)*((_QWORD *)this + 84);
  v5 = (_QWORD *)*((_QWORD *)this + 85);
  while (v5 != v4)
  {
    v7 = *--v5;
    v6 = v7;
    *v5 = 0;
    if (v7)
      std::default_delete<clsp::ClosedLoopParameters>::operator()[abi:ne180100](v6);
  }
  *((_QWORD *)this + 85) = v4;
  v8 = (uint64_t *)*((_QWORD *)this + 88);
  v9 = (uint64_t *)*((_QWORD *)this + 87);
  while (v8 != v9)
    std::unique_ptr<clsp::SpeakerCalibrationProperties>::reset[abi:ne180100](--v8);
  *((_QWORD *)this + 88) = v9;
  std::shared_ptr<vp::services::Telephony_Utility>::~shared_ptr[abi:ne180100]((uint64_t)this + 1360);
  v10 = (void *)*((_QWORD *)this + 167);
  if (v10)
  {
    *((_QWORD *)this + 168) = v10;
    operator delete(v10);
  }
  v11 = (void *)*((_QWORD *)this + 152);
  if (v11)
  {
    *((_QWORD *)this + 153) = v11;
    operator delete(v11);
  }
  v12 = (void *)*((_QWORD *)this + 149);
  if (v12)
  {
    *((_QWORD *)this + 150) = v12;
    operator delete(v12);
  }
  *(_QWORD *)v22 = (char *)this + 1136;
  std::vector<std::shared_ptr<vp::vx::io::Node_Terminal>>::__destroy_vector::operator()[abi:ne180100]((void ***)v22);
  *((_QWORD *)this + 140) = &off_1E69DC350;
  CAExtAudioFile::Close((AUSpeakerProtectionV3 *)((char *)this + 1120));
  *((_QWORD *)this + 138) = &off_1E69DC350;
  CAExtAudioFile::Close((AUSpeakerProtectionV3 *)((char *)this + 1104));
  *((_QWORD *)this + 136) = &off_1E69DC350;
  CAExtAudioFile::Close((AUSpeakerProtectionV3 *)((char *)this + 1088));
  *(_QWORD *)v22 = (char *)this + 1064;
  std::vector<std::__fs::filesystem::path>::__destroy_vector::operator()[abi:ne180100]((void ***)v22);
  v13 = (void *)*((_QWORD *)this + 130);
  if (v13)
  {
    *((_QWORD *)this + 131) = v13;
    operator delete(v13);
  }
  v14 = (void *)*((_QWORD *)this + 127);
  if (v14)
  {
    *((_QWORD *)this + 128) = v14;
    operator delete(v14);
  }
  *(_QWORD *)v22 = (char *)this + 992;
  std::vector<cpms::TimeScale<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)v22);
  v15 = (void *)*((_QWORD *)this + 121);
  if (v15)
  {
    *((_QWORD *)this + 122) = v15;
    operator delete(v15);
  }
  if (*((_BYTE *)this + 944))
  {
    *(_QWORD *)v22 = (char *)this + 920;
    std::vector<cpms::controllers::Power<float,cpms::smoothers::Exponential,clsp::AttackRelease>::GainGroupDescription,std::allocator<cpms::controllers::Power<float,cpms::smoothers::Exponential,clsp::AttackRelease>::GainGroupDescription>>::__destroy_vector::operator()[abi:ne180100]((void ***)v22);
  }
  std::shared_ptr<vp::services::Telephony_Utility>::~shared_ptr[abi:ne180100]((uint64_t)this + 896);
  v16 = *((_QWORD *)this + 111);
  *((_QWORD *)this + 111) = 0;
  if (v16)
    std::default_delete<cpms::controllers::Power<float,cpms::smoothers::Exponential,clsp::AttackRelease>>::operator()[abi:ne180100](v16);
  *(_QWORD *)v22 = (char *)this + 864;
  std::vector<std::vector<std::shared_ptr<clsp::CLSPKernel_v5>>>::__destroy_vector::operator()[abi:ne180100]((void ***)v22);
  *(_QWORD *)v22 = (char *)this + 840;
  std::vector<std::shared_ptr<vp::vx::io::Node_Terminal>>::__destroy_vector::operator()[abi:ne180100]((void ***)v22);
  *(_QWORD *)v22 = (char *)this + 808;
  std::vector<std::unique_ptr<DspLib::AlgorithmBaseNewParameters>>::__destroy_vector::operator()[abi:ne180100]((void ***)v22);
  if (*((_BYTE *)this + 776))
  {
    v17 = (void *)*((_QWORD *)this + 94);
    if (v17)
    {
      *((_QWORD *)this + 95) = v17;
      operator delete(v17);
    }
  }
  v18 = (void *)*((_QWORD *)this + 91);
  if (v18)
  {
    *((_QWORD *)this + 92) = v18;
    operator delete(v18);
  }
  *(_QWORD *)v22 = (char *)this + 696;
  std::vector<std::unique_ptr<clsp::SpeakerCalibrationProperties>>::__destroy_vector::operator()[abi:ne180100]((void ***)v22);
  *(_QWORD *)v22 = (char *)this + 672;
  std::vector<std::unique_ptr<clsp::ClosedLoopParameters>>::__destroy_vector::operator()[abi:ne180100]((void ***)v22);
  CACFDictionary::~CACFDictionary((AUSpeakerProtectionV3 *)((char *)this + 656));
  if (*((_BYTE *)this + 616))
  {
    v19 = (void *)*((_QWORD *)this + 74);
    if (v19)
      operator delete(v19);
  }
  if (*((_BYTE *)this + 584))
  {
    v20 = (void *)*((_QWORD *)this + 70);
    if (v20)
      operator delete(v20);
  }
  v21 = (void *)*((_QWORD *)this + 67);
  if (v21)
    operator delete(v21);
  ausdk::AUBase::~AUBase(this);
}

uint64_t AUSpeakerProtectionV3::CreateExtendedElements(AUSpeakerProtectionV3 *this)
{
  uint64_t i;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;

  ausdk::AUScope::Initialize((int64x2_t *)((char *)this + 792), this, 4, 8);
  for (i = 0; i != 8; ++i)
  {
    v3 = *((_QWORD *)this + 104);
    if (v3)
      v4 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v3 + 32))(v3, i);
    else
      v4 = *(_QWORD *)(*((_QWORD *)this + 101) + 8 * i);
    result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v4 + 40))(v4, 69);
  }
  return result;
}

uint64_t AUSpeakerProtectionV3::Initialize(AUSpeakerProtectionV3 *this)
{
  uint64_t v1;
  NSObject *v2;
  AUSpeakerProtectionV3 *v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  double v7;
  unsigned int v8;
  NSObject **v9;
  NSObject *v10;
  uint64_t Element;
  int16x8_t v12;
  std::string *v13;
  uint64_t v14;
  __int128 v15;
  uint64_t v16;
  __int128 v17;
  const AudioStreamBasicDescription *v18;
  int v19;
  char v20;
  char v21;
  NSObject **v22;
  NSObject *v23;
  NSObject **v24;
  NSObject *v25;
  NSObject **v26;
  const char *v27;
  uint64_t v28;
  int v29;
  NSObject **v30;
  NSObject *v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  CATimeUtilities *v35;
  uint64_t CurrentGregorianDate;
  uint64_t v37;
  uint64_t v38;
  unsigned int v39;
  char *jj;
  uint64_t v41;
  std::string *v42;
  __int128 v43;
  Float64 mSampleRate;
  std::string::size_type mFramesPerPacket_high;
  std::string *v46;
  __int128 v47;
  std::string *v48;
  __int128 v49;
  std::string *v50;
  __int128 v51;
  uint64_t v52;
  _QWORD *v53;
  _QWORD *v54;
  _QWORD *v55;
  const std::locale::facet *v56;
  NSObject **v57;
  NSObject *v58;
  NSObject **v59;
  NSObject *v60;
  uint64_t v61;
  uint64_t v62;
  char *v63;
  char *v64;
  unint64_t v65;
  uint64_t v66;
  char *v67;
  _QWORD *v68;
  uint64_t v69;
  unint64_t v70;
  _QWORD *v71;
  char *v72;
  char *v73;
  uint64_t v74;
  char *v75;
  unint64_t v76;
  char *v77;
  uint64_t v78;
  uint64_t *v79;
  int64x2_t v80;
  _BYTE *v81;
  _QWORD *v82;
  _QWORD *v83;
  _QWORD *v84;
  const std::locale::facet *v85;
  NSObject **v86;
  unint64_t v87;
  char *v88;
  uint64_t v89;
  uint64_t v90;
  char *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t *v94;
  uint64_t *v95;
  void *v96;
  uint64_t v97;
  unint64_t v98;
  unint64_t v99;
  uint64_t v100;
  _QWORD *v101;
  uint64_t i;
  uint64_t v103;
  uint64_t *v104;
  uint64_t v105;
  unint64_t v106;
  unint64_t v107;
  uint64_t v108;
  uint64_t *v109;
  uint64_t v110;
  void *v111;
  int64x2_t *v112;
  NSObject **v113;
  NSObject *v114;
  NSObject **v115;
  NSObject *v116;
  _BYTE *v117;
  char *j;
  uint64_t v119;
  NSObject **v120;
  NSObject *v121;
  AudioStreamBasicDescription *v122;
  unint64_t v123;
  AUSpeakerProtectionV3 *v124;
  uint64_t v125;
  unint64_t v126;
  const char *v127;
  CFStringRef v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  unint64_t v132;
  char *v133;
  std::string *v134;
  __int128 v135;
  Float64 v136;
  CFStringRef v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  NSObject **v141;
  NSObject *v142;
  NSObject **v143;
  NSObject *v144;
  AudioStreamBasicDescription *v145;
  std::vector<unsigned int>::size_type v146;
  unsigned int *v147;
  unsigned int *v148;
  unsigned int *v149;
  ausdk::AUScope *v150;
  uint64_t **v151;
  unsigned int v152;
  unsigned int *v153;
  unsigned int v154;
  unsigned int v155;
  BOOL v156;
  std::string::size_type v157;
  _QWORD *v158;
  AUSpeakerProtectionV3 *v159;
  unint64_t v160;
  _QWORD *v161;
  unint64_t v162;
  unint64_t v163;
  uint64_t v164;
  unint64_t v165;
  unint64_t v166;
  unint64_t v167;
  char *v168;
  char *v169;
  char *v170;
  char *v171;
  __int128 v172;
  _QWORD *v173;
  _QWORD *v174;
  PlatformUtilities_iOS *v175;
  int ProductType;
  NSObject **v177;
  NSObject *v178;
  NSObject **v179;
  NSObject **v180;
  uint64_t **v181;
  NSObject *v182;
  const char *v183;
  _QWORD *v184;
  unint64_t v185;
  _QWORD *v186;
  _QWORD *v187;
  NSObject **v188;
  NSObject *v189;
  _BYTE *v190;
  _QWORD *v191;
  _QWORD *v192;
  uint64_t v193;
  NSObject *v194;
  AudioStreamBasicDescription *v195;
  char v196;
  NSObject **v197;
  NSObject *v198;
  _QWORD *v199;
  _QWORD *v200;
  _QWORD *v201;
  NSObject **v202;
  NSObject *v203;
  unsigned int mm;
  uint64_t v205;
  uint64_t v206;
  AudioStreamBasicDescription *v207;
  NSObject **v208;
  NSObject *v209;
  NSObject **v210;
  NSObject *v211;
  unint64_t v212;
  int v213;
  _BYTE *v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t k;
  unint64_t v218;
  int v219;
  _BYTE *v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t m;
  clsp::CLSPKernel_v5 **v224;
  clsp::CLSPKernel_v5 **v225;
  uint64_t v226;
  ausdk::AUElement *v227;
  ausdk::AUElement **v228;
  float Parameter;
  uint64_t v230;
  ausdk::AUElement *v231;
  ausdk::AUElement **v232;
  float v233;
  const char *v234;
  uint64_t v235;
  int v236;
  char *v237;
  void **v238;
  uint64_t v239;
  uint64_t v240;
  size_t v241;
  uint64_t v242;
  char *v243;
  char *v244;
  uint64_t v245;
  CFTypeRef *v246;
  char *v247;
  CFTypeRef v248;
  __int128 v249;
  uint64_t v250;
  uint64_t v251;
  CFTypeRef v252;
  __int128 v253;
  uint64_t v254;
  uint64_t v255;
  _QWORD *v256;
  _QWORD *v257;
  uint64_t v258;
  uint64_t n;
  uint64_t v260;
  uint64_t v261;
  std::string::size_type v262;
  float v263;
  float v264;
  double v265;
  double v266;
  double v267;
  float v268;
  double v269;
  float v270;
  uint64_t v271;
  uint64_t v272;
  ausdk::AUElement *v273;
  ausdk::AUElement **v274;
  float v275;
  NSObject **v276;
  NSObject *v277;
  const char *v278;
  uint64_t v279;
  ausdk::AUElement *v280;
  ausdk::AUElement **v281;
  float v282;
  NSObject **v283;
  NSObject *v284;
  const char *v285;
  float v286;
  NSObject **v287;
  NSObject *v288;
  uint64_t v289;
  float v290;
  float v291;
  BOOL v292;
  float v293;
  unint64_t v294;
  unsigned int v295;
  NSObject *v296;
  NSObject **v297;
  NSObject *v298;
  const void *v299;
  Float64 v300;
  double v301;
  NSObject **v302;
  NSObject *v303;
  NSObject **v304;
  NSObject *v305;
  AudioStreamBasicDescription *v306;
  uint64_t v307;
  __int128 v308;
  uint64_t v309;
  unint64_t *v310;
  unint64_t v311;
  std::__shared_weak_count *v312;
  unint64_t *p_shared_owners;
  unint64_t v314;
  unsigned int **v315;
  unsigned int **v316;
  int v317;
  std::vector<unsigned int>::size_type v318;
  unint64_t v319;
  std::string::size_type v320;
  std::vector<unsigned int>::size_type v321;
  uint64_t v322;
  uint64_t v323;
  unint64_t v324;
  std::string::pointer data;
  int v326;
  NSObject **v327;
  NSObject *v328;
  NSObject **v329;
  NSObject *v330;
  uint64_t v331;
  dispatch_object_t *v332;
  unint64_t v333;
  void **v334;
  NSObject **v335;
  NSObject *v336;
  unint64_t v337;
  void **v338;
  NSObject **v339;
  NSObject *v340;
  unint64_t v341;
  unint64_t v342;
  unint64_t v343;
  unint64_t v344;
  unint64_t v345;
  unint64_t v346;
  unint64_t v347;
  uint64_t v348;
  Float64 v349;
  unsigned int v350;
  _QWORD *v351;
  unint64_t v352;
  uint64_t v353;
  uint64_t *v354;
  uint64_t v355;
  uint64_t v356;
  void *v358;
  uint64_t v359;
  NSObject **v360;
  NSObject *v361;
  unint64_t v362;
  AudioStreamBasicDescription *v363;
  unint64_t ii;
  char *v365;
  char *v366;
  char *v367;
  char *v368;
  unint64_t v369;
  _QWORD *v370;
  char *v371;
  char *v372;
  uint64_t v373;
  unint64_t v374;
  uint64_t v375;
  unint64_t v376;
  char *v377;
  char *v378;
  char *v379;
  __int128 v380;
  AUSpeakerProtectionV3 *v381;
  int64x2_t v382;
  uint64_t v383;
  void *v384;
  int v385;
  uint64_t v386;
  std::string *v387;
  __int128 v388;
  void **v389;
  std::string::size_type v390;
  std::string *v391;
  __int128 v392;
  std::__shared_weak_count *v393;
  unint64_t *v394;
  unint64_t v395;
  std::string *v396;
  __int128 v397;
  void **v398;
  std::string::size_type v399;
  std::string *v400;
  __int128 v401;
  std::__shared_weak_count *v402;
  unint64_t *v403;
  unint64_t v404;
  std::string *v405;
  __int128 v406;
  void **v407;
  std::string::size_type v408;
  std::string *v409;
  __int128 v410;
  std::__shared_weak_count *v411;
  unint64_t *v412;
  unint64_t v413;
  std::string *v414;
  __int128 v415;
  void **v416;
  std::string::size_type v417;
  std::string *v418;
  __int128 v419;
  std::__shared_weak_count *v420;
  unint64_t *v421;
  unint64_t v422;
  std::string *v423;
  __int128 v424;
  void **v425;
  std::string::size_type v426;
  std::string *v427;
  __int128 v428;
  std::__shared_weak_count *v429;
  unint64_t *v430;
  unint64_t v431;
  std::string *v432;
  __int128 v433;
  void **v434;
  std::string::size_type v435;
  std::string *v436;
  __int128 v437;
  std::__shared_weak_count *v438;
  unint64_t *v439;
  unint64_t v440;
  std::string *v441;
  __int128 v442;
  void **v443;
  std::string::size_type v444;
  std::string *v445;
  __int128 v446;
  std::__shared_weak_count *v447;
  unint64_t *v448;
  unint64_t v449;
  std::string *v450;
  __int128 v451;
  void **v452;
  std::string::size_type v453;
  std::string *v454;
  __int128 v455;
  std::__shared_weak_count *v456;
  unint64_t *v457;
  unint64_t v458;
  std::string *v459;
  __int128 v460;
  void **v461;
  std::string::size_type v462;
  std::string *v463;
  __int128 v464;
  std::__shared_weak_count *v465;
  unint64_t *v466;
  unint64_t v467;
  std::string *v468;
  __int128 v469;
  void **v470;
  std::string::size_type v471;
  std::string *v472;
  __int128 v473;
  std::__shared_weak_count *v474;
  unint64_t *v475;
  unint64_t v476;
  std::string *v477;
  __int128 v478;
  void **v479;
  std::string::size_type v480;
  std::string *v481;
  __int128 v482;
  std::__shared_weak_count *v483;
  unint64_t *v484;
  unint64_t v485;
  std::string *v486;
  __int128 v487;
  void **v488;
  std::string::size_type v489;
  std::string *v490;
  __int128 v491;
  std::__shared_weak_count *v492;
  unint64_t *v493;
  unint64_t v494;
  uint64_t v495;
  _BOOL4 AppBooleanValue;
  _BOOL4 v497;
  const __CFString *v498;
  const char *CStringPtr;
  const char *v500;
  uint64_t v501;
  std::string *v502;
  uint64_t v503;
  const AudioStreamBasicDescription *v504;
  const AudioChannelLayout *v505;
  __int128 v506;
  __int128 v507;
  UInt32 mChannelsPerFrame;
  UInt32 v509;
  char *v510;
  uint64_t v511;
  uint64_t v512;
  uint64_t v513;
  uint64_t v514;
  const char *v515;
  uint64_t v516;
  const AudioStreamBasicDescription *v517;
  const AudioChannelLayout *v518;
  __int128 v519;
  __int128 v520;
  unsigned int v521;
  UInt32 v522;
  char *v523;
  uint64_t v524;
  uint64_t v525;
  std::string *v526;
  uint64_t v527;
  const AudioStreamBasicDescription *v528;
  const AudioChannelLayout *v529;
  __int128 v530;
  __int128 v531;
  UInt32 v532;
  UInt32 v533;
  char *v534;
  uint64_t v535;
  uint64_t v536;
  uint64_t v537;
  uint64_t v538;
  std::string::size_type v539;
  uint64_t v540;
  int v541;
  int v542;
  uint64_t v543;
  uint64_t v544;
  CFDictionaryRef CFDictionaryRef;
  uint64_t *v546;
  uint64_t *v547;
  uint64_t v548;
  uint64_t v549;
  uint64_t kk;
  const void *v551;
  const void *v552;
  uint64_t v553;
  std::runtime_error *v555;
  std::runtime_error *exception;
  std::runtime_error *v557;
  std::runtime_error *v558;
  uint64_t v559;
  int64x2_t v560;
  int64x2_t v561;
  ausdk::AUScope *v562;
  unsigned __int8 v564;
  void *v565[3];
  void *v566;
  std::string::size_type v567;
  void *v568[3];
  unsigned __int8 v569;
  BOOL v570;
  void *v571[2];
  int64_t v572;
  std::string v573;
  void *v574[2];
  char v575;
  AudioStreamBasicDescription v576;
  __int128 v577;
  __int128 v578;
  uint64_t v579;
  void *v580[2];
  __int128 v581;
  std::string::size_type v582;
  AudioStreamBasicDescription v583;
  uint8_t v584[12];
  __int16 v585;
  _BYTE v586[10];
  _QWORD v587[10];
  char v588;
  uint64_t v589;
  _BYTE buf[32];
  uint64_t v591;
  uint64_t v592;
  std::string __p[2];
  _QWORD v594[2];
  uint64_t v595;
  void *v596;
  uint64_t v597;
  uint64_t v598;
  _BYTE v599[8];
  _QWORD v600[21];
  uint64_t v601;
  _BYTE inPropertyData[32];
  std::string::size_type size;
  AudioStreamBasicDescription v604;
  uint64_t v605;

  v605 = *MEMORY[0x1E0C80C00];
  v1 = spp3Subsystem();
  if (v1)
  {
    if ((*(_BYTE *)(v1 + 8) & 1) != 0)
    {
      v2 = *(NSObject **)v1;
      if (*(_QWORD *)v1)
      {
        if (os_log_type_enabled(*(os_log_t *)v1, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)buf = 136315394;
          *(_QWORD *)&buf[4] = "AUSpeakerProtectionV3.cpp";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = 373;
          _os_log_impl(&dword_1B5ED0000, v2, OS_LOG_TYPE_DEBUG, "%25s:%-5d AUSpeakerProtectionV3::Initialize\n", buf, 0x12u);
        }
      }
    }
  }
  v3 = this;
  *((_BYTE *)this + 1184) = 1;
  v4 = *((_QWORD *)this + 15);
  if (v4)
  {
    LODWORD(v5) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 24))(v4);
    v3 = this;
  }
  else
  {
    v5 = (*((_QWORD *)this + 13) - *((_QWORD *)this + 12)) >> 3;
  }
  v562 = (AUSpeakerProtectionV3 *)((char *)v3 + 80);
  if (v5 >= 2)
  {
    v6 = 1;
    while (1)
    {
      v7 = *(double *)(ausdk::AUScope::SafeGetElement(v562, v6 - 1) + 80);
      if (v7 != *(double *)(ausdk::AUScope::SafeGetElement(v562, v6) + 80))
        break;
      if ((_DWORD)v5 == ++v6)
        goto LABEL_13;
    }
    v26 = (NSObject **)spp3Subsystem();
    if (v26)
    {
      v25 = *v26;
      if (!*v26)
        return 4294956428;
    }
    else
    {
      v25 = MEMORY[0x1E0C81028];
    }
    if (os_log_type_enabled(v25, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      *(_QWORD *)&buf[4] = "AUSpeakerProtectionV3.cpp";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 385;
      v27 = "%25s:%-5d sample rate of input buses doesn't match";
      goto LABEL_48;
    }
    return 4294956428;
  }
LABEL_13:
  if ((_DWORD)v5)
  {
    v8 = 0;
    while (1)
    {
      v9 = (NSObject **)spp3Subsystem();
      if (!v9)
        break;
      v10 = *v9;
      if (*v9)
        goto LABEL_19;
LABEL_24:
      if ((_DWORD)v5 == ++v8)
        goto LABEL_25;
    }
    v10 = MEMORY[0x1E0C81028];
LABEL_19:
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG))
    {
      Element = ausdk::AUScope::SafeGetElement(v562, v8);
      v12 = *(int16x8_t *)(Element + 96);
      *(_OWORD *)buf = *(_OWORD *)(Element + 80);
      *(int16x8_t *)&buf[16] = v12;
      v591 = *(_QWORD *)(Element + 112);
      CA::StreamDescription::AsString((CA::StreamDescription *)buf, (uint64_t)__p, v12);
      v13 = __p;
      if ((__p[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v13 = (std::string *)__p[0].__r_.__value_.__r.__words[0];
      *(_DWORD *)v584 = 136315906;
      *(_QWORD *)&v584[4] = "AUSpeakerProtectionV3.cpp";
      v585 = 1024;
      *(_DWORD *)v586 = 394;
      *(_WORD *)&v586[4] = 1024;
      *(_DWORD *)&v586[6] = v8;
      LOWORD(v587[0]) = 2080;
      *(_QWORD *)((char *)v587 + 2) = v13;
      _os_log_impl(&dword_1B5ED0000, v10, OS_LOG_TYPE_DEBUG, "%25s:%-5d Fmt%u: %s", v584, 0x22u);
      if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p[0].__r_.__value_.__l.__data_);
    }
    goto LABEL_24;
  }
LABEL_25:
  v14 = ausdk::AUScope::SafeGetElement(v562, 0);
  v15 = *(_OWORD *)(v14 + 96);
  v577 = *(_OWORD *)(v14 + 80);
  v578 = v15;
  v579 = *(_QWORD *)(v14 + 112);
  v16 = ausdk::AUScope::SafeGetElement((AUSpeakerProtectionV3 *)((char *)this + 128), 0);
  v17 = *(_OWORD *)(v16 + 96);
  *(_OWORD *)&v576.mSampleRate = *(_OWORD *)(v16 + 80);
  *(_OWORD *)&v576.mBytesPerPacket = v17;
  *(_QWORD *)&v576.mBitsPerChannel = *(_QWORD *)(v16 + 112);
  if (!CAStreamBasicDescription::IsEquivalent((CAStreamBasicDescription *)&v577, &v576, v18))
  {
    v24 = (NSObject **)spp3Subsystem();
    if (v24)
    {
      v25 = *v24;
      if (!*v24)
        return 4294956428;
    }
    else
    {
      v25 = MEMORY[0x1E0C81028];
    }
    if (os_log_type_enabled(v25, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      *(_QWORD *)&buf[4] = "AUSpeakerProtectionV3.cpp";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 402;
      v27 = "%25s:%-5d Input and output audio formats don't match.";
LABEL_48:
      _os_log_impl(&dword_1B5ED0000, v25, OS_LOG_TYPE_ERROR, v27, buf, 0x12u);
    }
    return 4294956428;
  }
  applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)buf, CFSTR("com.apple.coreaudio"));
  if (!*(_QWORD *)buf)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
  }
  applesauce::CF::convert_to<std::string,0>(*(const __CFString **)buf, (uint64_t)v574);
  if (*(_QWORD *)buf)
    CFRelease(*(CFTypeRef *)buf);
  std::string::basic_string[abi:ne180100]<0>(buf, "clsp_logging_level");
  v19 = GetPreference<long long>((const UInt8 *)v574, buf);
  v21 = v20;
  if ((buf[23] & 0x80000000) != 0)
    operator delete(*(void **)buf);
  if (!v21)
  {
    *((_DWORD *)this + 294) = 0;
    goto LABEL_53;
  }
  *((_DWORD *)this + 294) = v19;
  v22 = (NSObject **)spp3Subsystem();
  if (v22)
  {
    v23 = *v22;
    if (!*v22)
      goto LABEL_53;
  }
  else
  {
    v23 = MEMORY[0x1E0C81028];
  }
  if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
  {
    v29 = *((_DWORD *)this + 294);
    *(_DWORD *)buf = 136315650;
    *(_QWORD *)&buf[4] = "AUSpeakerProtectionV3.cpp";
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = 411;
    *(_WORD *)&buf[18] = 1024;
    *(_DWORD *)&buf[20] = v29;
    _os_log_impl(&dword_1B5ED0000, v23, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Using defaults write logging level: %d", buf, 0x18u);
  }
LABEL_53:
  v30 = (NSObject **)spp3Subsystem();
  if (v30)
  {
    v31 = *v30;
    if (!*v30)
      goto LABEL_59;
  }
  else
  {
    v31 = MEMORY[0x1E0C81028];
  }
  if (os_log_type_enabled(v31, OS_LOG_TYPE_DEFAULT))
  {
    v32 = *((_DWORD *)this + 294);
    *(_DWORD *)buf = 136315650;
    *(_QWORD *)&buf[4] = "AUSpeakerProtectionV3.cpp";
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = 415;
    *(_WORD *)&buf[18] = 1024;
    *(_DWORD *)&buf[20] = v32;
    _os_log_impl(&dword_1B5ED0000, v31, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Logging level set to: %d", buf, 0x18u);
  }
LABEL_59:
  v33 = *((_QWORD *)this + 143);
  v34 = *((_QWORD *)this + 142);
  while (v33 != v34)
    v33 = std::shared_ptr<vp::services::Telephony_Utility>::~shared_ptr[abi:ne180100](v33 - 16);
  *((_QWORD *)this + 143) = v34;
  v35 = CFTimeZoneCopySystem();
  CurrentGregorianDate = CATimeUtilities::GetCurrentGregorianDate(v35);
  v38 = v37;
  CFRelease(v35);
  v39 = this;
  jj = (char *)this + 1160;
  *((_QWORD *)this + 145) = CurrentGregorianDate;
  *((_QWORD *)this + 146) = v38;
  v41 = 1;
  *(_DWORD *)buf = (_DWORD)this;
  do
  {
    v39 = v41 + 1812433253 * (v39 ^ (v39 >> 30));
    *(_DWORD *)&buf[4 * v41++] = v39;
  }
  while (v41 != 624);
  v592 = 0;
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v584);
  *(_DWORD *)&v586[*(_QWORD *)(*(_QWORD *)&v586[2] - 24) + 10] = *(_DWORD *)&v586[*(_QWORD *)(*(_QWORD *)&v586[2]
                                                                                              - 24)
                                                                                  + 10] & 0xFFFFFFB5 | 8;
  std::__independent_bits_engine<std::mersenne_twister_engine<unsigned int,32ul,624ul,397ul,31ul,2567483615u,11ul,4294967295u,7ul,2636928640u,15ul,4022730752u,18ul,1812433253u>,unsigned long>::__independent_bits_engine((uint64_t)__p, (uint64_t)buf, 0x40uLL);
  std::__independent_bits_engine<std::mersenne_twister_engine<unsigned int,32ul,624ul,397ul,31ul,2567483615u,11ul,4294967295u,7ul,2636928640u,15ul,4022730752u,18ul,1812433253u>,unsigned long>::__eval((uint64_t)__p);
  std::ostream::operator<<();
  std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)v587, __p);
  std::string::basic_string(&v573, __p, 0, 6uLL, (std::allocator<char> *)&v604);
  if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p[0].__r_.__value_.__l.__data_);
  if (*((_BYTE *)this + 533) && *((_BYTE *)this + 529))
  {
    std::operator+<char>();
    v42 = std::string::append((std::string *)inPropertyData, "_(closedloop_", 0xDuLL);
    v43 = *(_OWORD *)&v42->__r_.__value_.__l.__data_;
    *(_QWORD *)&v604.mBytesPerPacket = *((_QWORD *)&v42->__r_.__value_.__l + 2);
    *(_OWORD *)&v604.mSampleRate = v43;
    v42->__r_.__value_.__l.__size_ = 0;
    v42->__r_.__value_.__r.__words[2] = 0;
    v42->__r_.__value_.__r.__words[0] = 0;
    std::to_string((std::string *)&v583, *((_DWORD *)this + 158));
    if ((v583.mFramesPerPacket & 0x80000000) == 0)
      mSampleRate = COERCE_DOUBLE(&v583);
    else
      mSampleRate = v583.mSampleRate;
    if ((v583.mFramesPerPacket & 0x80000000) == 0)
      mFramesPerPacket_high = HIBYTE(v583.mFramesPerPacket);
    else
      mFramesPerPacket_high = *(_QWORD *)&v583.mFormatID;
  }
  else
  {
    std::operator+<char>();
    v46 = std::string::append((std::string *)inPropertyData, "_(openloop_", 0xBuLL);
    v47 = *(_OWORD *)&v46->__r_.__value_.__l.__data_;
    *(_QWORD *)&v604.mBytesPerPacket = *((_QWORD *)&v46->__r_.__value_.__l + 2);
    *(_OWORD *)&v604.mSampleRate = v47;
    v46->__r_.__value_.__l.__size_ = 0;
    v46->__r_.__value_.__r.__words[2] = 0;
    v46->__r_.__value_.__r.__words[0] = 0;
    std::to_string((std::string *)&v583, *((_DWORD *)this + 158));
    if ((v583.mFramesPerPacket & 0x80000000) == 0)
      mSampleRate = COERCE_DOUBLE(&v583);
    else
      mSampleRate = v583.mSampleRate;
    if ((v583.mFramesPerPacket & 0x80000000) == 0)
      mFramesPerPacket_high = HIBYTE(v583.mFramesPerPacket);
    else
      mFramesPerPacket_high = *(_QWORD *)&v583.mFormatID;
  }
  v48 = std::string::append((std::string *)&v604, *(const std::string::value_type **)&mSampleRate, mFramesPerPacket_high);
  v49 = *(_OWORD *)&v48->__r_.__value_.__l.__data_;
  __p[0].__r_.__value_.__r.__words[2] = v48->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__p[0].__r_.__value_.__l.__data_ = v49;
  v48->__r_.__value_.__l.__size_ = 0;
  v48->__r_.__value_.__r.__words[2] = 0;
  v48->__r_.__value_.__r.__words[0] = 0;
  v50 = std::string::append(__p, "ch)", 3uLL);
  v51 = *(_OWORD *)&v50->__r_.__value_.__l.__data_;
  v572 = v50->__r_.__value_.__r.__words[2];
  *(_OWORD *)v571 = v51;
  v50->__r_.__value_.__l.__size_ = 0;
  v50->__r_.__value_.__r.__words[2] = 0;
  v50->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p[0].__r_.__value_.__l.__data_);
  if (SHIBYTE(v583.mFramesPerPacket) < 0)
    operator delete(*(void **)&v583.mSampleRate);
  if (SHIBYTE(v604.mFramesPerPacket) < 0)
    operator delete(*(void **)&v604.mSampleRate);
  if ((inPropertyData[23] & 0x80000000) != 0)
    operator delete(*(void **)inPropertyData);
  v570 = 0;
  if (!*((_BYTE *)this + 528))
  {
    v59 = (NSObject **)spp3Subsystem();
    if (v59)
    {
      v60 = *v59;
      if (!*v59)
        goto LABEL_651;
    }
    else
    {
      v60 = MEMORY[0x1E0C81028];
    }
    if (os_log_type_enabled(v60, OS_LOG_TYPE_ERROR))
    {
      LODWORD(__p[0].__r_.__value_.__l.__data_) = 136315394;
      *(std::string::size_type *)((char *)__p[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)"AUSpeakerProtectionV3.cpp";
      WORD2(__p[0].__r_.__value_.__r.__words[1]) = 1024;
      *(_DWORD *)((char *)&__p[0].__r_.__value_.__r.__words[1] + 6) = 720;
      _os_log_impl(&dword_1B5ED0000, v60, OS_LOG_TYPE_ERROR, "%25s:%-5d Could not create kernels, because no plist has been successfully applied. (You must set a plist and re-initialize, or we will apply 20dB of attenuation during processing.)", (uint8_t *)__p, 0x12u);
    }
    goto LABEL_651;
  }
  v52 = *((unsigned int *)this + 158);
  if (HIDWORD(v578) > v52)
  {
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Audio input bus channel-count (", 31);
    v53 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v53, (uint64_t)") is greater than the number of channels configured by the plist (", 66);
    v54 = (_QWORD *)std::ostream::operator<<();
    v55 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v54, (uint64_t)"). Cannot initialize.", 21);
    std::ios_base::getloc((const std::ios_base *)((char *)v55 + *(_QWORD *)(*v55 - 24)));
    v56 = std::locale::use_facet((const std::locale *)&v604, MEMORY[0x1E0DE4A90]);
    ((void (*)(const std::locale::facet *, uint64_t))v56->__vftable[2].~facet_0)(v56, 10);
    std::locale::~locale((std::locale *)&v604);
    std::ostream::put();
    std::ostream::flush();
    v57 = (NSObject **)spp3Subsystem();
    if (v57)
    {
      v58 = *v57;
      if (!*v57)
        goto LABEL_191;
    }
    else
    {
      v58 = MEMORY[0x1E0C81028];
    }
    if (os_log_type_enabled(v58, OS_LOG_TYPE_ERROR))
    {
      std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)&__p[0].__r_.__value_.__l.__size_, inPropertyData);
      if (inPropertyData[23] >= 0)
        v81 = inPropertyData;
      else
        v81 = *(_BYTE **)inPropertyData;
      LODWORD(v604.mSampleRate) = 136315650;
      *(_QWORD *)((char *)&v604.mSampleRate + 4) = "AUSpeakerProtectionV3.cpp";
      LOWORD(v604.mFormatFlags) = 1024;
      *(AudioFormatFlags *)((char *)&v604.mFormatFlags + 2) = 457;
      HIWORD(v604.mBytesPerPacket) = 2080;
      *(_QWORD *)&v604.mFramesPerPacket = v81;
      goto LABEL_189;
    }
    goto LABEL_191;
  }
  if (!*((_BYTE *)this + 776))
  {
    v76 = (2 * v52);
    if ((_DWORD)v76)
    {
      v77 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<SlidingWindowDTFT<float> *>>(v76);
      v79 = (uint64_t *)&v77[8 * v78];
      v80 = vdupq_n_s64((unint64_t)v77);
    }
    else
    {
      v79 = 0;
      v80 = 0uLL;
    }
    v561 = v80;
    if ((_DWORD)v52)
    {
      v93 = 0;
      v94 = (uint64_t *)v80.i64[1];
      do
      {
        if (v94 >= v79)
        {
          v96 = (void *)v561.i64[0];
          v97 = ((uint64_t)v94 - v561.i64[0]) >> 3;
          v98 = v97 + 1;
          if ((unint64_t)(v97 + 1) >> 61)
            std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
          if (((uint64_t)v79 - v561.i64[0]) >> 2 > v98)
            v98 = ((uint64_t)v79 - v561.i64[0]) >> 2;
          if ((unint64_t)v79 - v561.i64[0] >= 0x7FFFFFFFFFFFFFF8)
            v99 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v99 = v98;
          if (v99)
            v99 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<SlidingWindowDTFT<float> *>>(v99);
          else
            v100 = 0;
          v101 = (_QWORD *)(v99 + 8 * v97);
          *v101 = v93 << 32;
          v95 = v101 + 1;
          for (i = v561.i64[1]; i != v561.i64[0]; i -= 8)
          {
            v103 = *(_QWORD *)(i - 8);
            *--v101 = v103;
          }
          v79 = (uint64_t *)(v99 + 8 * v100);
          v561.i64[0] = (uint64_t)v101;
          if (v96)
            operator delete(v96);
        }
        else
        {
          *v94 = v93 << 32;
          v95 = v94 + 1;
        }
        v559 = v561.i64[0];
        if (v95 >= v79)
        {
          v104 = (uint64_t *)v561.i64[0];
          v105 = ((uint64_t)v95 - v561.i64[0]) >> 3;
          v106 = v105 + 1;
          if ((unint64_t)(v105 + 1) >> 61)
            std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
          if (((uint64_t)v79 - v561.i64[0]) >> 2 > v106)
            v106 = ((uint64_t)v79 - v561.i64[0]) >> 2;
          if ((unint64_t)v79 - v561.i64[0] >= 0x7FFFFFFFFFFFFFF8)
            v107 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v107 = v106;
          if (v107)
            v107 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<SlidingWindowDTFT<float> *>>(v107);
          else
            v108 = 0;
          v109 = (uint64_t *)(v107 + 8 * v105);
          v79 = (uint64_t *)(v107 + 8 * v108);
          *v109 = (v93 << 32) | 1;
          v94 = v109 + 1;
          if (v95 == (uint64_t *)v561.i64[0])
          {
            v80.i64[0] = (uint64_t)v109;
            v104 = v95;
          }
          else
          {
            do
            {
              v110 = *--v95;
              *--v109 = v110;
            }
            while (v95 != (uint64_t *)v561.i64[0]);
            v80.i64[0] = (uint64_t)v109;
            if (!v561.i64[0])
              goto LABEL_169;
          }
          v559 = v80.i64[0];
          operator delete(v104);
        }
        else
        {
          *v95 = (v93 << 32) | 1;
          v94 = v95 + 1;
        }
        v80.i64[0] = v559;
LABEL_169:
        v80.i64[1] = (uint64_t)v94;
        ++v93;
        v561 = v80;
      }
      while (v93 != v52);
    }
    v112 = (int64x2_t *)((char *)this + 728);
    v111 = (void *)*((_QWORD *)this + 91);
    if (v111)
    {
      *((_QWORD *)this + 92) = v111;
      v560 = v80;
      operator delete(v111);
      v80 = v560;
      v112->i64[0] = 0;
      *((_QWORD *)this + 92) = 0;
      *((_QWORD *)this + 93) = 0;
    }
    *v112 = v80;
    *((_QWORD *)this + 93) = v79;
    v113 = (NSObject **)spp3Subsystem();
    if (v113)
    {
      v114 = *v113;
      if (!*v113)
        goto LABEL_178;
    }
    else
    {
      v114 = MEMORY[0x1E0C81028];
    }
    if (os_log_type_enabled(v114, OS_LOG_TYPE_INFO))
    {
      LODWORD(__p[0].__r_.__value_.__l.__data_) = 136315394;
      *(std::string::size_type *)((char *)__p[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)"AUSpeakerProtectionV3.cpp";
      WORD2(__p[0].__r_.__value_.__r.__words[1]) = 1024;
      *(_DWORD *)((char *)&__p[0].__r_.__value_.__r.__words[1] + 6) = 488;
      _os_log_impl(&dword_1B5ED0000, v114, OS_LOG_TYPE_INFO, "%25s:%-5d Speaker telemetry data order not provided from property; assuming the default layout.",
        (uint8_t *)__p,
        0x12u);
    }
LABEL_178:
    if (*((_DWORD *)this + 158) != 2 || *((_DWORD *)this + 180) != 2)
      goto LABEL_203;
    v115 = (NSObject **)spp3Subsystem();
    if (v115)
    {
      v116 = *v115;
      if (!*v115)
      {
LABEL_202:
        __p[0].__r_.__value_.__r.__words[0] = 0x100000002;
        std::vector<clsp::telemetry::Item>::push_back[abi:ne180100]((void **)this + 91, __p);
        goto LABEL_203;
      }
    }
    else
    {
      v116 = MEMORY[0x1E0C81028];
    }
    if (os_log_type_enabled(v116, OS_LOG_TYPE_INFO))
    {
      LODWORD(__p[0].__r_.__value_.__l.__data_) = 136315394;
      *(std::string::size_type *)((char *)__p[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)"AUSpeakerProtectionV3.cpp";
      WORD2(__p[0].__r_.__value_.__r.__words[1]) = 1024;
      *(_DWORD *)((char *)&__p[0].__r_.__value_.__r.__words[1] + 6) = 492;
      _os_log_impl(&dword_1B5ED0000, v116, OS_LOG_TYPE_INFO, "%25s:%-5d kConvoyExpect5Streams is signalled; adding the Convoy PDM signal to the layout.",
        (uint8_t *)__p,
        0x12u);
    }
    goto LABEL_202;
  }
  v61 = *((_QWORD *)this + 95);
  v62 = *((_QWORD *)this + 94);
  if (*(_DWORD *)(ausdk::AUScope::SafeGetElement(v562, 1u) + 108) == (v61 - v62) >> 3)
  {
    v63 = (char *)*((_QWORD *)this + 94);
    v64 = (char *)*((_QWORD *)this + 95);
    v65 = (v64 - v63) >> 3;
    v66 = *((_QWORD *)this + 93);
    v67 = (char *)*((_QWORD *)this + 91);
    if (v65 <= (v66 - (uint64_t)v67) >> 3)
    {
      v71 = (_QWORD *)((char *)this + 736);
      v72 = (char *)*((_QWORD *)this + 92);
      v87 = (v72 - v67) >> 3;
      if (v87 >= v65)
      {
        for (j = (char *)*((_QWORD *)this + 91); v63 != v64; j += 8)
        {
          v119 = *(_QWORD *)v63;
          v63 += 8;
          *(_QWORD *)j = v119;
        }
        v75 = (char *)(j - v67);
        v72 = v67;
      }
      else
      {
        v88 = &v63[8 * v87];
        if (v72 != v67)
        {
          v89 = 8 * v87;
          do
          {
            v90 = *(_QWORD *)v63;
            v63 += 8;
            *(_QWORD *)v67 = v90;
            v67 += 8;
            v89 -= 8;
          }
          while (v89);
        }
        v91 = v72;
        while (v88 != v64)
        {
          v92 = *(_QWORD *)v88;
          v88 += 8;
          *(_QWORD *)v91 = v92;
          v91 += 8;
        }
        v75 = (char *)(v91 - v72);
      }
    }
    else
    {
      v68 = (_QWORD *)((char *)this + 728);
      if (v67)
      {
        *((_QWORD *)this + 92) = v67;
        operator delete(v67);
        v66 = 0;
        *v68 = 0;
        *((_QWORD *)this + 92) = 0;
        *((_QWORD *)this + 93) = 0;
      }
      if (v64 - v63 < 0)
        std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
      v69 = v66 >> 2;
      if (v66 >> 2 <= v65)
        v69 = (v64 - v63) >> 3;
      if ((unint64_t)v66 >= 0x7FFFFFFFFFFFFFF8)
        v70 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v70 = v69;
      std::vector<std::pair<unsigned int,float>>::__vallocate[abi:ne180100](v68, v70);
      v71 = (_QWORD *)((char *)this + 736);
      v72 = (char *)*((_QWORD *)this + 92);
      v73 = v72;
      if (v63 != v64)
      {
        v73 = (char *)*((_QWORD *)this + 92);
        do
        {
          v74 = *(_QWORD *)v63;
          v63 += 8;
          *(_QWORD *)v73 = v74;
          v73 += 8;
        }
        while (v63 != v64);
      }
      v75 = (char *)(v73 - v72);
    }
    *v71 = &v75[(_QWORD)v72];
LABEL_203:
    v120 = (NSObject **)spp3Subsystem();
    if (v120)
    {
      v121 = *v120;
      if (!*v120)
      {
LABEL_213:
        LODWORD(v123) = *((_DWORD *)this + 158);
        if (*((_QWORD *)this + 133) != *((_QWORD *)this + 134))
        {
          v124 = this;
          if ((_DWORD)v123)
          {
            v125 = 0;
            v126 = 0;
            do
            {
              v127 = (const char *)(*((_QWORD *)v124 + 133) + v125);
              if (v127[23] < 0)
                v127 = *(const char **)v127;
              v128 = CFStringCreateWithCString(0, v127, 0x8000100u);
              v129 = *((_QWORD *)this + 104);
              if (v129)
              {
                v130 = (*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)v129 + 32))(v129, v126);
              }
              else
              {
                v131 = *((_QWORD *)this + 101);
                if (v126 >= (*((_QWORD *)this + 102) - v131) >> 3)
                  v130 = 0;
                else
                  v130 = *(_QWORD *)(v131 + 8 * v126);
              }
              ausdk::Owned<__CFString const*>::operator=((const void **)(v130 + 72), v128);
              CFRelease(v128);
              ++v126;
              v124 = this;
              v125 += 24;
            }
            while (v126 < *((unsigned int *)this + 158));
          }
LABEL_249:
          if (*((_QWORD *)v124 + 130) != *((_QWORD *)v124 + 131))
          {
            v141 = (NSObject **)spp3Subsystem();
            if (v141)
            {
              v142 = *v141;
              if (!*v141)
              {
LABEL_263:
                std::vector<float>::__assign_with_size[abi:ne180100]<float const*,float const*>((char *)this + 1016, *((char **)this + 130), *((_QWORD *)this + 131), (uint64_t)(*((_QWORD *)this + 131) - *((_QWORD *)this + 130)) >> 2);
                goto LABEL_268;
              }
            }
            else
            {
              v142 = MEMORY[0x1E0C81028];
            }
            if (os_log_type_enabled(v142, OS_LOG_TYPE_DEBUG))
            {
              *(_QWORD *)inPropertyData = *((_QWORD *)this + 130);
              v583.mSampleRate = *((Float64 *)this + 131);
              clsp::telemetry::utils::PrintNumericVector_impl<std::__wrap_iter<unsigned int const*>,std::__wrap_iter<unsigned int const*>>((std::string *)&v604, (unsigned int **)inPropertyData, &v583);
              v145 = (v604.mFramesPerPacket & 0x80000000) == 0
                   ? &v604
                   : *(AudioStreamBasicDescription **)&v604.mSampleRate;
              LODWORD(__p[0].__r_.__value_.__l.__data_) = 136315650;
              *(std::string::size_type *)((char *)__p[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)"AUSpeakerProtectionV3.cpp";
              WORD2(__p[0].__r_.__value_.__r.__words[1]) = 1024;
              *(_DWORD *)((char *)&__p[0].__r_.__value_.__r.__words[1] + 6) = 523;
              WORD1(__p[0].__r_.__value_.__r.__words[2]) = 2080;
              *(std::string::size_type *)((char *)&__p[0].__r_.__value_.__r.__words[2] + 4) = (std::string::size_type)v145;
              _os_log_impl(&dword_1B5ED0000, v142, OS_LOG_TYPE_DEBUG, "%25s:%-5d Using speaker gain-link grouping from the plist: [ %s ]", (uint8_t *)__p, 0x1Cu);
              if (SHIBYTE(v604.mFramesPerPacket) < 0)
                operator delete(*(void **)&v604.mSampleRate);
            }
            goto LABEL_263;
          }
          v143 = (NSObject **)spp3Subsystem();
          if (v143)
          {
            v144 = *v143;
            if (!*v143)
            {
LABEL_267:
              v146 = *((unsigned int *)this + 158);
              LODWORD(__p[0].__r_.__value_.__l.__data_) = 0;
              std::vector<unsigned int>::assign((std::vector<unsigned int> *)((char *)this + 1016), v146, (std::vector<unsigned int>::const_reference)__p);
LABEL_268:
              v147 = (unsigned int *)*((_QWORD *)this + 127);
              v148 = (unsigned int *)*((_QWORD *)this + 128);
              if (v147 == v148)
              {
                v151 = (uint64_t **)((char *)this + 696);
                v150 = (AUSpeakerProtectionV3 *)((char *)this + 128);
              }
              else
              {
                v149 = v147 + 1;
                v150 = (AUSpeakerProtectionV3 *)((char *)this + 128);
                v151 = (uint64_t **)((char *)this + 696);
                if (v147 + 1 != v148)
                {
                  v152 = *v147;
                  v153 = v147 + 1;
                  do
                  {
                    v155 = *v153++;
                    v154 = v155;
                    v156 = v152 >= v155;
                    if (v152 <= v155)
                      v152 = v154;
                    if (!v156)
                      v147 = v149;
                    v149 = v153;
                  }
                  while (v153 != v148);
                }
              }
              v157 = *((_QWORD *)this + 109);
              v158 = (_QWORD *)*((_QWORD *)this + 108);
              if ((_QWORD *)v157 == v158)
              {
                v159 = this;
              }
              else
              {
                do
                {
                  v157 -= 24;
                  __p[0].__r_.__value_.__r.__words[0] = v157;
                  std::vector<std::shared_ptr<vp::vx::io::Node_Terminal>>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
                }
                while ((_QWORD *)v157 != v158);
                v159 = this;
                v148 = (unsigned int *)*((_QWORD *)this + 128);
              }
              *((_QWORD *)v159 + 109) = v158;
              if (v147 != v148)
              {
                v160 = *v147 + 1;
                v161 = (_QWORD *)*((_QWORD *)this + 108);
                v162 = 0xAAAAAAAAAAAAAAABLL * (v158 - v161);
                v163 = v160 - v162;
                if (v160 <= v162)
                {
                  v150 = (AUSpeakerProtectionV3 *)((char *)this + 128);
                  if (v160 < v162)
                  {
                    v174 = &v161[3 * v160];
                    while (v158 != v174)
                    {
                      v158 -= 3;
                      __p[0].__r_.__value_.__r.__words[0] = (std::string::size_type)v158;
                      std::vector<std::shared_ptr<vp::vx::io::Node_Terminal>>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
                    }
                    *((_QWORD *)this + 109) = v174;
                  }
                }
                else
                {
                  v164 = *((_QWORD *)this + 110);
                  if (0xAAAAAAAAAAAAAAABLL * ((v164 - (uint64_t)v158) >> 3) >= v163)
                  {
                    bzero(v158, 24 * ((24 * v163 - 24) / 0x18) + 24);
                    *((_QWORD *)this + 109) = &v158[3 * ((24 * v163 - 24) / 0x18) + 3];
                    v150 = (AUSpeakerProtectionV3 *)((char *)this + 128);
                  }
                  else
                  {
                    v165 = 0xAAAAAAAAAAAAAAABLL * ((v164 - (uint64_t)v161) >> 3);
                    v166 = 0x5555555555555556 * ((v164 - (uint64_t)v161) >> 3);
                    if (v166 > v160)
                      v160 = v166;
                    if (v165 >= 0x555555555555555)
                      v167 = 0xAAAAAAAAAAAAAAALL;
                    else
                      v167 = v160;
                    if (v167 > 0xAAAAAAAAAAAAAAALL)
                      std::__throw_bad_array_new_length[abi:ne180100]();
                    v168 = (char *)operator new(24 * v167);
                    v169 = &v168[8 * (v158 - v161)];
                    v170 = &v168[24 * v167];
                    bzero(v169, 24 * ((24 * v163 - 24) / 0x18) + 24);
                    v171 = &v169[24 * ((24 * v163 - 24) / 0x18) + 24];
                    if (v158 == v161)
                    {
                      *((_QWORD *)this + 108) = v169;
                      *((_QWORD *)this + 109) = v171;
                      *((_QWORD *)this + 110) = v170;
                      v150 = (AUSpeakerProtectionV3 *)((char *)this + 128);
                    }
                    else
                    {
                      do
                      {
                        *((_QWORD *)v169 - 3) = 0;
                        *((_QWORD *)v169 - 2) = 0;
                        v169 -= 24;
                        *((_QWORD *)v169 + 2) = 0;
                        v172 = *(_OWORD *)(v158 - 3);
                        v158 -= 3;
                        *(_OWORD *)v169 = v172;
                        *((_QWORD *)v169 + 2) = v158[2];
                        *v158 = 0;
                        v158[1] = 0;
                        v158[2] = 0;
                      }
                      while (v158 != v161);
                      v173 = (_QWORD *)*((_QWORD *)this + 108);
                      v158 = (_QWORD *)*((_QWORD *)this + 109);
                      *((_QWORD *)this + 108) = v169;
                      *((_QWORD *)this + 109) = v171;
                      *((_QWORD *)this + 110) = v170;
                      v150 = (AUSpeakerProtectionV3 *)((char *)this + 128);
                      if (v158 != v173)
                      {
                        do
                        {
                          v158 -= 3;
                          __p[0].__r_.__value_.__r.__words[0] = (std::string::size_type)v158;
                          std::vector<std::shared_ptr<vp::vx::io::Node_Terminal>>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
                        }
                        while (v158 != v173);
                        v158 = v173;
                      }
                    }
                    if (v158)
                      operator delete(v158);
                  }
                }
              }
              v175 = (PlatformUtilities_iOS *)ausdk::AUScope::SafeGetElement(v150, 0);
              *((_QWORD *)this + 78) = *((_QWORD *)v175 + 10);
              if (!*((_BYTE *)this + 533)
                || ((ProductType = PlatformUtilities_iOS::GetProductType(v175), (ProductType - 24) > 0x3C)
                 || ((1 << (ProductType - 24)) & 0x186300000040001BLL) == 0)
                && ((ProductType - 87) > 0x26
                 || ((1 << (ProductType - 87)) & 0x4000000603) == 0))
              {
                v179 = (NSObject **)spp3Subsystem();
                if (v179)
                {
                  v178 = *v179;
                  if (!*v179)
                    goto LABEL_385;
                }
                else
                {
                  v178 = MEMORY[0x1E0C81028];
                }
                if (!os_log_type_enabled(v178, OS_LOG_TYPE_DEBUG))
                  goto LABEL_385;
                LODWORD(__p[0].__r_.__value_.__l.__data_) = 136315394;
                *(std::string::size_type *)((char *)__p[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)"AUSpeakerProtectionV3.cpp";
                WORD2(__p[0].__r_.__value_.__r.__words[1]) = 1024;
                *(_DWORD *)((char *)&__p[0].__r_.__value_.__r.__words[1] + 6) = 636;
                v183 = "%25s:%-5d We are all-open loop, or this device does not use SpTS for speaker calibration. MG not queried.";
                goto LABEL_363;
              }
              if (*((_BYTE *)this + 1328)
                && *((_DWORD *)this + 158) == (uint64_t)(*((_QWORD *)this + 88) - *((_QWORD *)this + 87)) >> 3)
              {
                v177 = (NSObject **)spp3Subsystem();
                if (v177)
                {
                  v178 = *v177;
                  if (!*v177)
                    goto LABEL_385;
                }
                else
                {
                  v178 = MEMORY[0x1E0C81028];
                }
                if (!os_log_type_enabled(v178, OS_LOG_TYPE_DEBUG))
                  goto LABEL_385;
                LODWORD(__p[0].__r_.__value_.__l.__data_) = 136315394;
                *(std::string::size_type *)((char *)__p[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)"AUSpeakerProtectionV3.cpp";
                WORD2(__p[0].__r_.__value_.__r.__words[1]) = 1024;
                *(_DWORD *)((char *)&__p[0].__r_.__value_.__r.__words[1] + 6) = 574;
                v183 = "%25s:%-5d This device uses SpTS for speaker calibration, but it has already been applied. Omittin"
                       "g another application.\n";
LABEL_363:
                _os_log_impl(&dword_1B5ED0000, v178, OS_LOG_TYPE_DEBUG, v183, (uint8_t *)__p, 0x12u);
                goto LABEL_385;
              }
              v180 = (NSObject **)spp3Subsystem();
              v181 = v151;
              if (v180)
              {
                v182 = *v180;
                if (!*v180)
                  goto LABEL_327;
              }
              else
              {
                v182 = MEMORY[0x1E0C81028];
              }
              if (os_log_type_enabled(v182, OS_LOG_TYPE_DEBUG))
              {
                LODWORD(__p[0].__r_.__value_.__l.__data_) = 136315394;
                *(std::string::size_type *)((char *)__p[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)"AUSpeakerProtectionV3.cpp";
                WORD2(__p[0].__r_.__value_.__r.__words[1]) = 1024;
                *(_DWORD *)((char *)&__p[0].__r_.__value_.__r.__words[1] + 6) = 578;
                _os_log_impl(&dword_1B5ED0000, v182, OS_LOG_TYPE_DEBUG, "%25s:%-5d This device uses SpTS for speaker calibration, and it has not been applied yet. Will attempt to fetch it.\n", (uint8_t *)__p, 0x12u);
              }
LABEL_327:
              if (*((_QWORD *)this + 87) == *((_QWORD *)this + 88))
                goto LABEL_342;
              std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)__p);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"mSpeakerCalProps is not empty as expected. Instead, it already contains ", 72);
              v184 = (_QWORD *)std::ostream::operator<<();
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v184, (uint64_t)" entries:\n", 10);
              if (*((_QWORD *)this + 88) != *((_QWORD *)this + 87))
              {
                v185 = 0;
                do
                {
                  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Speaker ", 8);
                  v186 = (_QWORD *)std::ostream::operator<<();
                  v187 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v186, (uint64_t)"\n", 1);
                  clsp::SpeakerCalibrationProperties::dump((*v181)[v185], v187);
                  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v187, (uint64_t)"\n", 1);
                  ++v185;
                }
                while (v185 < (uint64_t)(*((_QWORD *)this + 88) - *((_QWORD *)this + 87)) >> 3);
              }
              v188 = (NSObject **)spp3Subsystem();
              if (v188)
              {
                v189 = *v188;
                if (!*v188)
                {
LABEL_341:
                  std::ostringstream::~ostringstream((uint64_t)__p);
LABEL_342:
                  FetchAndInterpretSpTS((uint64_t)&v604);
                  if (LOBYTE(v604.mBytesPerFrame))
                  {
                    if (*((_DWORD *)this + 158) == (uint64_t)(*(_QWORD *)&v604.mFormatID - *(_QWORD *)&v604.mSampleRate) >> 3)
                    {
                      std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)__p);
                      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"SpTS key contained ", 19);
                      v191 = (_QWORD *)std::ostream::operator<<();
                      v192 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v191, (uint64_t)", as expected.", 14);
                      std::endl[abi:ne180100]<char,std::char_traits<char>>(v192);
                      v193 = spp3Subsystem();
                      if (v193)
                      {
                        if ((*(_BYTE *)(v193 + 8) & 1) != 0)
                        {
                          v194 = *(NSObject **)v193;
                          if (*(_QWORD *)v193)
                          {
                            if (os_log_type_enabled(*(os_log_t *)v193, OS_LOG_TYPE_DEBUG))
                            {
                              std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)&__p[0].__r_.__value_.__l.__size_, &v583);
                              v195 = (v583.mFramesPerPacket & 0x80000000) == 0
                                   ? &v583
                                   : *(AudioStreamBasicDescription **)&v583.mSampleRate;
                              *(_DWORD *)inPropertyData = 136315650;
                              *(_QWORD *)&inPropertyData[4] = "AUSpeakerProtectionV3.cpp";
                              *(_WORD *)&inPropertyData[12] = 1024;
                              *(_DWORD *)&inPropertyData[14] = 620;
                              *(_WORD *)&inPropertyData[18] = 2080;
                              *(_QWORD *)&inPropertyData[20] = v195;
                              _os_log_impl(&dword_1B5ED0000, v194, OS_LOG_TYPE_DEBUG, "%25s:%-5d %s", inPropertyData, 0x1Cu);
                              if (SHIBYTE(v583.mFramesPerPacket) < 0)
                                operator delete(*(void **)&v583.mSampleRate);
                            }
                          }
                        }
                      }
                      std::ostringstream::~ostringstream((uint64_t)__p);
                      std::vector<std::unique_ptr<clsp::SpeakerCalibrationProperties>>::__vdeallocate(v181);
                      *(_OWORD *)v181 = *(_OWORD *)&v604.mSampleRate;
                      *((_QWORD *)this + 89) = *(_QWORD *)&v604.mBytesPerPacket;
                      memset(&v604, 0, 24);
                      v196 = 1;
                      *((_BYTE *)this + 1328) = 1;
                      v28 = 4294956428;
LABEL_382:
                      if (LOBYTE(v604.mBytesPerFrame))
                      {
                        __p[0].__r_.__value_.__r.__words[0] = (std::string::size_type)&v604;
                        std::vector<std::unique_ptr<clsp::SpeakerCalibrationProperties>>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
                      }
                      if ((v196 & 1) == 0)
                        goto LABEL_962;
LABEL_385:
                      if (*((_BYTE *)this + 1329))
                      {
                        v208 = (NSObject **)spp3Subsystem();
                        if (v208)
                        {
                          v209 = *v208;
                          if (!*v208)
                          {
LABEL_395:
                            v212 = *((unsigned int *)this + 158);
                            v213 = *((_DWORD *)this + 196);
                            clsp::ThermalStateVector_v3_separate<clsp::CL>::TheInstance();
                            if (byte_1EF136BD8)
                            {
                              std::vector<clsp::ThermalState_v3>::resize((void **)&clsp::ThermalStateVector_v3_separate<clsp::CL>::TheInstance(void)::inst, v212);
                              byte_1EF136BD8 = 0;
                            }
                            if (v213 == 2)
                            {
                              std::vector<clsp::ThermalState_v3>::resize((void **)&clsp::ThermalStateVector_v3_separate<clsp::CL>::TheInstance(void)::inst, v212);
                              v216 = clsp::ThermalStateVector_v3_separate<clsp::CL>::TheInstance(void)::inst;
                              for (k = qword_1EF136BC8; v216 != k; v216 += 24)
                              {
                                *(_OWORD *)(v216 + 4) = xmmword_1B6629CC0;
                                *(_DWORD *)(v216 + 20) = 1065353216;
                                *(_BYTE *)v216 = 1;
                              }
                            }
                            else if (v213 == 1)
                            {
                              std::vector<clsp::ThermalState_v3>::resize((void **)&clsp::ThermalStateVector_v3_separate<clsp::CL>::TheInstance(void)::inst, v212);
                              v214 = (_BYTE *)clsp::ThermalStateVector_v3_separate<clsp::CL>::TheInstance(void)::inst;
                              v215 = qword_1EF136BC8;
                              while (v214 != (_BYTE *)v215)
                              {
                                *v214 = 0;
                                v214 += 24;
                              }
                            }
                            goto LABEL_417;
                          }
                        }
                        else
                        {
                          v209 = MEMORY[0x1E0C81028];
                        }
                        if (os_log_type_enabled(v209, OS_LOG_TYPE_DEBUG))
                        {
                          LODWORD(__p[0].__r_.__value_.__l.__data_) = 136315394;
                          *(std::string::size_type *)((char *)__p[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)"AUSpeakerProtectionV3.cpp";
                          WORD2(__p[0].__r_.__value_.__r.__words[1]) = 1024;
                          *(_DWORD *)((char *)&__p[0].__r_.__value_.__r.__words[1] + 6) = 640;
                          _os_log_impl(&dword_1B5ED0000, v209, OS_LOG_TYPE_DEBUG, "%25s:%-5d This instance is ideally closed-loop; setting up the closed-loop ThermalStateVector_v3.",
                            (uint8_t *)__p,
                            0x12u);
                        }
                        goto LABEL_395;
                      }
                      v210 = (NSObject **)spp3Subsystem();
                      if (v210)
                      {
                        v211 = *v210;
                        if (!*v210)
                        {
LABEL_408:
                          v218 = *((unsigned int *)this + 158);
                          v219 = *((_DWORD *)this + 196);
                          clsp::ThermalStateVector_v3_separate<clsp::OL>::TheInstance();
                          if (byte_1EF136C08)
                          {
                            std::vector<clsp::ThermalState_v3>::resize((void **)&clsp::ThermalStateVector_v3_separate<clsp::OL>::TheInstance(void)::inst, v218);
                            byte_1EF136C08 = 0;
                          }
                          if (v219 == 2)
                          {
                            std::vector<clsp::ThermalState_v3>::resize((void **)&clsp::ThermalStateVector_v3_separate<clsp::OL>::TheInstance(void)::inst, v218);
                            v222 = clsp::ThermalStateVector_v3_separate<clsp::OL>::TheInstance(void)::inst;
                            for (m = qword_1EF136BF8; v222 != m; v222 += 24)
                            {
                              *(_OWORD *)(v222 + 4) = xmmword_1B6629CC0;
                              *(_DWORD *)(v222 + 20) = 1065353216;
                              *(_BYTE *)v222 = 1;
                            }
                          }
                          else if (v219 == 1)
                          {
                            std::vector<clsp::ThermalState_v3>::resize((void **)&clsp::ThermalStateVector_v3_separate<clsp::OL>::TheInstance(void)::inst, v218);
                            v220 = (_BYTE *)clsp::ThermalStateVector_v3_separate<clsp::OL>::TheInstance(void)::inst;
                            v221 = qword_1EF136BF8;
                            while (v220 != (_BYTE *)v221)
                            {
                              *v220 = 0;
                              v220 += 24;
                            }
                          }
LABEL_417:
                          AUSpeakerProtectionV3::InitializeKernels(this, *(double *)&v577, *((unsigned int *)this + 158), &v570);
                          clsp::CLSPKernel_v5::CalcCoeffs((uint64_t **)this + 105, *((_BYTE *)this + 532), *((double *)this + 78));
                          v224 = (clsp::CLSPKernel_v5 **)*((_QWORD *)this + 105);
                          v225 = (clsp::CLSPKernel_v5 **)*((_QWORD *)this + 106);
                          while (v224 != v225)
                          {
                            clsp::CLSPKernel_v5::PrintCoeffs(*v224);
                            v224 += 2;
                          }
                          v226 = *((_QWORD *)this + 9);
                          if (v226)
                          {
                            v227 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v226
                                                                                                  + 32))(v226, 0);
                          }
                          else
                          {
                            v228 = (ausdk::AUElement **)*((_QWORD *)this + 6);
                            if (*((ausdk::AUElement ***)this + 7) == v228)
                              v227 = 0;
                            else
                              v227 = *v228;
                          }
                          Parameter = ausdk::AUElement::GetParameter(v227, 2u);
                          v230 = *((_QWORD *)this + 9);
                          if (v230)
                          {
                            v231 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v230
                                                                                                  + 32))(v230, 0);
                          }
                          else
                          {
                            v232 = (ausdk::AUElement **)*((_QWORD *)this + 6);
                            if (*((ausdk::AUElement ***)this + 7) == v232)
                              v231 = 0;
                            else
                              v231 = *v232;
                          }
                          v233 = ausdk::AUElement::GetParameter(v231, 3u);
                          v235 = operator new();
                          v236 = *((_DWORD *)this + 158);
                          *(_DWORD *)v235 = 1128792064;
                          *(_DWORD *)(v235 + 4) = v236;
                          *(_BYTE *)(v235 + 8) = 0;
                          *(_QWORD *)(v235 + 12) = 0x3F8000003F000000;
                          v237 = (char *)(v235 + 48);
                          *(_QWORD *)(v235 + 24) = v235 + 48;
                          v238 = (void **)(v235 + 24);
                          v239 = *((_QWORD *)this + 124);
                          v240 = *((_QWORD *)this + 125);
                          *(_OWORD *)(v235 + 32) = xmmword_1B6626850;
                          v241 = v240 - v239;
                          v242 = (v240 - v239) >> 5;
                          if ((unint64_t)(v240 - v239) < 0x81)
                          {
                            if (v240 != v239)
                            {
                              v251 = (v240 - v239) >> 5;
                              do
                              {
                                v252 = *(CFTypeRef *)v239;
                                if (*(_QWORD *)v239)
                                  CFRetain(*(CFTypeRef *)v239);
                                *(_QWORD *)v237 = v252;
                                v253 = *(_OWORD *)(v239 + 8);
                                *(_QWORD *)(v237 + 21) = *(_QWORD *)(v239 + 21);
                                *(_OWORD *)(v237 + 8) = v253;
                                v239 += 32;
                                v237 += 32;
                                --v251;
                              }
                              while (v251);
                            }
                          }
                          else
                          {
                            if (v241 >= 0x7FFFFFFFFFFFFFE1)
                              boost::container::throw_length_error((boost::container *)"get_next_capacity, allocator's max size reached", v234);
                            v243 = (char *)operator new(v241);
                            v244 = (char *)*v238;
                            if (*v238)
                            {
                              v245 = *(_QWORD *)(v235 + 32);
                              if (v245)
                              {
                                v246 = (CFTypeRef *)*v238;
                                do
                                {
                                  if (*v246)
                                    CFRelease(*v246);
                                  v246 += 4;
                                  --v245;
                                }
                                while (v245);
                              }
                              *(_QWORD *)(v235 + 32) = 0;
                              if (v237 != v244)
                                operator delete(v244);
                            }
                            *(_QWORD *)(v235 + 32) = 0;
                            *(_QWORD *)(v235 + 40) = v242;
                            *(_QWORD *)(v235 + 24) = v243;
                            if (v239 == v240)
                            {
                              v250 = 0;
                              v247 = v243;
                            }
                            else
                            {
                              v247 = v243;
                              do
                              {
                                v248 = *(CFTypeRef *)v239;
                                if (*(_QWORD *)v239)
                                  CFRetain(*(CFTypeRef *)v239);
                                *(_QWORD *)v247 = v248;
                                v249 = *(_OWORD *)(v239 + 8);
                                *(_QWORD *)(v247 + 21) = *(_QWORD *)(v239 + 21);
                                *(_OWORD *)(v247 + 8) = v249;
                                v247 += 32;
                                v239 += 32;
                              }
                              while (v239 != v240);
                              v250 = *(_QWORD *)(v235 + 32);
                            }
                            v242 = v250 + ((v247 - v243) >> 5);
                          }
                          *(_QWORD *)(v235 + 32) = v242;
                          v254 = *((_QWORD *)this + 125);
                          v255 = *((_QWORD *)this + 124);
                          *(_QWORD *)(v235 + 176) = v235 + 200;
                          LODWORD(__p[0].__r_.__value_.__l.__data_) = 0;
                          *(_OWORD *)(v235 + 184) = xmmword_1B6626850;
                          boost::container::vector<float,boost::container::small_vector_allocator<float,boost::container::new_allocator<void>,void>,void>::priv_resize<float,boost::move_detail::integral_constant<unsigned int,1u>>(v235 + 176, (v254 - v255) >> 5, (int *)__p);
                          *(_QWORD *)(v235 + 216) = v235 + 240;
                          *(_OWORD *)(v235 + 224) = xmmword_1B6626850;
                          *(_QWORD *)(v235 + 432) = v235 + 456;
                          *(_OWORD *)(v235 + 440) = xmmword_1B6626850;
                          v256 = (_QWORD *)operator new();
                          *v256 = &off_1E69E4EE8;
                          *(_QWORD *)(v235 + 552) = v256;
                          v257 = (_QWORD *)operator new();
                          *v257 = &off_1E69DB5A0;
                          v257[1] = 0;
                          v257[2] = 0;
                          v257[3] = v256;
                          *(_QWORD *)(v235 + 560) = v257;
                          *(_QWORD *)(v235 + 568) = 0;
                          v258 = *((_QWORD *)this + 124);
                          for (n = *((_QWORD *)this + 125); v258 != n; v258 += 32)
                          {
                            v260 = *(_QWORD *)(v235 + 432);
                            v261 = *(_QWORD *)(v235 + 440);
                            v262 = v260 + 24 * v261;
                            if (v261 == *(_QWORD *)(v235 + 448))
                            {
                              boost::container::vector<clsp::AttackRelease<float,float>,boost::container::small_vector_allocator<clsp::AttackRelease<float,float>,boost::container::new_allocator<void>,void>,void>::priv_insert_forward_range_no_capacity<boost::container::dtl::insert_emplace_proxy<boost::container::small_vector_allocator<clsp::AttackRelease<float,float>,boost::container::new_allocator<void>,void>,clsp::AttackRelease<float,float>*>>(__p, (char *)(v235 + 432), (uint64_t *)(v260 + 24 * v261));
                              v262 = __p[0].__r_.__value_.__r.__words[0];
                              boost::container::vec_iterator<clsp::AttackRelease<float,float> *,false>::operator*((uint64_t)__p[0].__r_.__value_.__l.__data_);
                            }
                            else
                            {
                              *(_DWORD *)(v260 + 24 * v261 + 20) = 0;
                              *(_QWORD *)v262 = 0;
                              *(_QWORD *)(v262 + 8) = 0;
                              ++*(_QWORD *)(v235 + 440);
                            }
                            if (*(_BYTE *)(v258 + 20))
                              v263 = *(float *)(v258 + 16);
                            else
                              v263 = v233;
                            *(float *)v262 = v263;
                            v264 = *(float *)(v258 + 8);
                            if (!*(_BYTE *)(v258 + 12))
                              v264 = Parameter;
                            *(float *)(v262 + 4) = v264;
                            *(_DWORD *)(v262 + 16) = 1128792064;
                            v265 = v264 * 200.0;
                            v266 = 0.0;
                            v267 = 0.0;
                            if (v265 >= 0.00001)
                              v267 = exp(-4.60517019 / v265);
                            v268 = v267;
                            *(float *)(v262 + 12) = 1.0 - v268;
                            v269 = v263 * 200.0;
                            if (v269 >= 0.00001)
                              v266 = exp(-4.60517019 / v269);
                            v270 = v266;
                            *(float *)(v262 + 8) = 1.0 - v270;
                            *(_DWORD *)(v262 + 20) = 1065353216;
                          }
                          v271 = *((_QWORD *)this + 111);
                          *((_QWORD *)this + 111) = v235;
                          if (v271)
                            std::default_delete<cpms::controllers::Power<float,cpms::smoothers::Exponential,clsp::AttackRelease>>::operator()[abi:ne180100](v271);
                          v272 = *((_QWORD *)this + 9);
                          jj = (char *)this + 1160;
                          if (v272)
                          {
                            v273 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v272
                                                                                                  + 32))(v272, 0);
                          }
                          else
                          {
                            v274 = (ausdk::AUElement **)*((_QWORD *)this + 6);
                            if (*((ausdk::AUElement ***)this + 7) == v274)
                              v273 = 0;
                            else
                              v273 = *v274;
                          }
                          v275 = ausdk::AUElement::GetParameter(v273, 0x12u);
                          v276 = (NSObject **)spp3Subsystem();
                          if (v276)
                          {
                            v277 = *v276;
                            if (!*v276)
                              goto LABEL_484;
                          }
                          else
                          {
                            v277 = MEMORY[0x1E0C81028];
                          }
                          if (os_log_type_enabled(v277, OS_LOG_TYPE_INFO))
                          {
                            v278 = "disabled";
                            *(std::string::size_type *)((char *)__p[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)"AUSpeakerProtectionV3.cpp";
                            LODWORD(__p[0].__r_.__value_.__l.__data_) = 136315650;
                            if (v275 != 0.0)
                              v278 = "enabled";
                            WORD2(__p[0].__r_.__value_.__r.__words[1]) = 1024;
                            *(_DWORD *)((char *)&__p[0].__r_.__value_.__r.__words[1] + 6) = 661;
                            WORD1(__p[0].__r_.__value_.__r.__words[2]) = 2080;
                            *(std::string::size_type *)((char *)&__p[0].__r_.__value_.__r.__words[2] + 4) = (std::string::size_type)v278;
                            _os_log_impl(&dword_1B5ED0000, v277, OS_LOG_TYPE_INFO, "%25s:%-5d CPMS power controller is %s", (uint8_t *)__p, 0x1Cu);
                          }
LABEL_484:
                          *(_BYTE *)(*((_QWORD *)this + 111) + 8) = v275 != 0.0;
                          v279 = *((_QWORD *)this + 9);
                          if (v279)
                          {
                            v280 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v279
                                                                                                  + 32))(v279, 0);
                          }
                          else
                          {
                            v281 = (ausdk::AUElement **)*((_QWORD *)this + 6);
                            if (*((ausdk::AUElement ***)this + 7) == v281)
                              v280 = 0;
                            else
                              v280 = *v281;
                          }
                          v282 = ausdk::AUElement::GetParameter(v280, 0x13u);
                          v283 = (NSObject **)spp3Subsystem();
                          if (v283)
                          {
                            v284 = *v283;
                            if (!*v283)
                              goto LABEL_497;
                          }
                          else
                          {
                            v284 = MEMORY[0x1E0C81028];
                          }
                          if (os_log_type_enabled(v284, OS_LOG_TYPE_INFO))
                          {
                            LODWORD(__p[0].__r_.__value_.__l.__data_) = 136315650;
                            v285 = "open";
                            *(std::string::size_type *)((char *)__p[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)"AUSpeakerProtectionV3.cpp";
                            if (v282 != 0.0)
                              v285 = "closed";
                            WORD2(__p[0].__r_.__value_.__r.__words[1]) = 1024;
                            *(_DWORD *)((char *)&__p[0].__r_.__value_.__r.__words[1] + 6) = 665;
                            WORD1(__p[0].__r_.__value_.__r.__words[2]) = 2080;
                            *(std::string::size_type *)((char *)&__p[0].__r_.__value_.__r.__words[2] + 4) = (std::string::size_type)v285;
                            _os_log_impl(&dword_1B5ED0000, v284, OS_LOG_TYPE_INFO, "%25s:%-5d CPMS power control is %s loop", (uint8_t *)__p, 0x1Cu);
                          }
LABEL_497:
                          if (*((_BYTE *)this + 956))
                            v286 = *((float *)this + 238);
                          else
                            v286 = -3.0;
                          v287 = (NSObject **)spp3Subsystem();
                          if (v287)
                          {
                            v288 = *v287;
                            if (!*v287)
                              goto LABEL_506;
                          }
                          else
                          {
                            v288 = MEMORY[0x1E0C81028];
                          }
                          if (os_log_type_enabled(v288, OS_LOG_TYPE_DEBUG))
                          {
                            LODWORD(__p[0].__r_.__value_.__l.__data_) = 136315650;
                            *(std::string::size_type *)((char *)__p[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)"AUSpeakerProtectionV3.cpp";
                            WORD2(__p[0].__r_.__value_.__r.__words[1]) = 1024;
                            *(_DWORD *)((char *)&__p[0].__r_.__value_.__r.__words[1] + 6) = 668;
                            WORD1(__p[0].__r_.__value_.__r.__words[2]) = 2048;
                            *(double *)((char *)&__p[0].__r_.__value_.__r.__words[2] + 4) = v286;
                            _os_log_impl(&dword_1B5ED0000, v288, OS_LOG_TYPE_DEBUG, "%25s:%-5d CPMS power gain limit is %f dB", (uint8_t *)__p, 0x1Cu);
                          }
LABEL_506:
                          v289 = *((_QWORD *)this + 111);
                          v290 = __exp10f(v286 / 10.0);
                          v291 = 1.0;
                          if (v290 <= 1.0)
                            v291 = v290;
                          v292 = v290 < 0.0;
                          v293 = 0.0;
                          if (!v292)
                            v293 = v291;
                          *(float *)(v289 + 12) = v293;
                          if (*((_QWORD *)this + 125) != *((_QWORD *)this + 124))
                          {
                            v294 = 0;
                            v295 = 1;
                            v296 = MEMORY[0x1E0C81028];
                            while (1)
                            {
                              v297 = (NSObject **)spp3Subsystem();
                              if (!v297)
                                break;
                              v298 = *v297;
                              if (*v297)
                                goto LABEL_516;
LABEL_523:
                              v294 = v295++;
                              if (v294 >= (uint64_t)(*((_QWORD *)this + 125) - *((_QWORD *)this + 124)) >> 5)
                                goto LABEL_524;
                            }
                            v298 = v296;
LABEL_516:
                            if (os_log_type_enabled(v298, OS_LOG_TYPE_DEBUG))
                            {
                              cpms::TimeScale<float>::getKey(inPropertyData, *(CFTypeRef *)(*((_QWORD *)this + 124) + 32 * v294));
                              v299 = *(const void **)inPropertyData;
                              if (!*(_QWORD *)inPropertyData)
                              {
                                v555 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                                std::runtime_error::runtime_error(v555, "Could not construct");
                              }
                              applesauce::CF::convert_to<std::string,0>(*(const __CFString **)inPropertyData, (uint64_t)&v604);
                              v300 = COERCE_DOUBLE(&v604);
                              if ((v604.mFramesPerPacket & 0x80000000) != 0)
                                v300 = v604.mSampleRate;
                              v301 = *(float *)(*((_QWORD *)this + 121) + 4 * v294);
                              LODWORD(__p[0].__r_.__value_.__l.__data_) = 136315906;
                              *(std::string::size_type *)((char *)__p[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)"AUSpeakerProtectionV3.cpp";
                              WORD2(__p[0].__r_.__value_.__r.__words[1]) = 1024;
                              *(_DWORD *)((char *)&__p[0].__r_.__value_.__r.__words[1] + 6) = 674;
                              WORD1(__p[0].__r_.__value_.__r.__words[2]) = 2080;
                              *(Float64 *)((char *)&__p[0].__r_.__value_.__r.__words[2] + 4) = v300;
                              WORD2(__p[1].__r_.__value_.__r.__words[0]) = 2048;
                              *(double *)((char *)__p[1].__r_.__value_.__r.__words + 6) = v301;
                              _os_log_impl(&dword_1B5ED0000, v298, OS_LOG_TYPE_DEBUG, "%25s:%-5d CPMS power budget '%s' is %f", (uint8_t *)__p, 0x26u);
                              if (SHIBYTE(v604.mFramesPerPacket) < 0)
                                operator delete(*(void **)&v604.mSampleRate);
                              CFRelease(v299);
                            }
                            goto LABEL_523;
                          }
LABEL_524:
                          cpms::controllers::Power<float,cpms::smoothers::Exponential,clsp::AttackRelease>::SetPowerBudgets(*((_QWORD **)this + 111), *((_QWORD *)this + 121), (*((_QWORD *)this + 122) - *((_QWORD *)this + 121)) >> 2);
                          if (*((_QWORD *)this + 112))
                          {
                            v302 = (NSObject **)spp3Subsystem();
                            if (v302)
                            {
                              v303 = *v302;
                              if (!*v302)
                                goto LABEL_541;
                            }
                            else
                            {
                              v303 = MEMORY[0x1E0C81028];
                            }
                            if (os_log_type_enabled(v303, OS_LOG_TYPE_DEBUG))
                            {
                              (*(void (**)(AudioStreamBasicDescription *__return_ptr))(**((_QWORD **)this + 112)
                                                                                                + 40))(&v604);
                              v306 = (v604.mFramesPerPacket & 0x80000000) == 0
                                   ? &v604
                                   : *(AudioStreamBasicDescription **)&v604.mSampleRate;
                              LODWORD(__p[0].__r_.__value_.__l.__data_) = 136315650;
                              *(std::string::size_type *)((char *)__p[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)"AUSpeakerProtectionV3.cpp";
                              WORD2(__p[0].__r_.__value_.__r.__words[1]) = 1024;
                              *(_DWORD *)((char *)&__p[0].__r_.__value_.__r.__words[1] + 6) = 679;
                              WORD1(__p[0].__r_.__value_.__r.__words[2]) = 2080;
                              *(std::string::size_type *)((char *)&__p[0].__r_.__value_.__r.__words[2] + 4) = (std::string::size_type)v306;
                              _os_log_impl(&dword_1B5ED0000, v303, OS_LOG_TYPE_DEBUG, "%25s:%-5d CPMS amplifier model: [ %s ]", (uint8_t *)__p, 0x1Cu);
                              if (SHIBYTE(v604.mFramesPerPacket) < 0)
                                operator delete(*(void **)&v604.mSampleRate);
                            }
                          }
                          else
                          {
                            v304 = (NSObject **)spp3Subsystem();
                            if (v304)
                            {
                              v305 = *v304;
                              if (!*v304)
                                goto LABEL_541;
                            }
                            else
                            {
                              v305 = MEMORY[0x1E0C81028];
                            }
                            if (os_log_type_enabled(v305, OS_LOG_TYPE_DEBUG))
                            {
                              LODWORD(__p[0].__r_.__value_.__l.__data_) = 136315394;
                              *(std::string::size_type *)((char *)__p[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)"AUSpeakerProtectionV3.cpp";
                              WORD2(__p[0].__r_.__value_.__r.__words[1]) = 1024;
                              *(_DWORD *)((char *)&__p[0].__r_.__value_.__r.__words[1] + 6) = 681;
                              _os_log_impl(&dword_1B5ED0000, v305, OS_LOG_TYPE_DEBUG, "%25s:%-5d CPMS amplifier model: [ default ]", (uint8_t *)__p, 0x12u);
                            }
                          }
LABEL_541:
                          v307 = *((_QWORD *)this + 111);
                          v308 = *((_OWORD *)this + 56);
                          v309 = *((_QWORD *)this + 113);
                          if (v309)
                          {
                            v310 = (unint64_t *)(v309 + 8);
                            do
                              v311 = __ldxr(v310);
                            while (__stxr(v311 + 1, v310));
                          }
                          v312 = *(std::__shared_weak_count **)(v307 + 560);
                          *(_OWORD *)(v307 + 552) = v308;
                          if (v312)
                          {
                            p_shared_owners = (unint64_t *)&v312->__shared_owners_;
                            do
                              v314 = __ldaxr(p_shared_owners);
                            while (__stlxr(v314 - 1, p_shared_owners));
                            if (!v314)
                            {
                              ((void (*)(std::__shared_weak_count *))v312->__on_zero_shared)(v312);
                              std::__shared_weak_count::__release_weak(v312);
                            }
                          }
                          if (*((_BYTE *)this + 944))
                          {
                            v315 = (unsigned int **)*((_QWORD *)this + 115);
                            v316 = (unsigned int **)*((_QWORD *)this + 116);
                            while (v315 != v316)
                            {
                              if (*((_BYTE *)this + 916))
                                v317 = *((_DWORD *)this + 228);
                              else
                                v317 = 0;
                              cpms::controllers::Power<float,cpms::smoothers::Exponential,clsp::AttackRelease>::AddGainGroup(*((_QWORD *)this + 111), v315, v317);
                              v315 += 6;
                            }
                            goto LABEL_575;
                          }
                          memset(__p, 0, sizeof(__p));
                          v318 = *((unsigned int *)this + 158);
                          LODWORD(v604.mSampleRate) = 0;
                          std::vector<unsigned int>::assign((std::vector<unsigned int> *)__p, v318, (std::vector<unsigned int>::const_reference)&v604);
                          if (*((_DWORD *)this + 158))
                          {
                            v319 = 0;
                            v320 = __p[0].__r_.__value_.__r.__words[0];
                            do
                            {
                              *(_DWORD *)(v320 + 4 * v319) = v319;
                              ++v319;
                            }
                            while (v319 < *((unsigned int *)this + 158));
                          }
                          v321 = (uint64_t)(*((_QWORD *)this + 125) - *((_QWORD *)this + 124)) >> 5;
                          LODWORD(v604.mSampleRate) = 0;
                          std::vector<unsigned int>::assign((std::vector<unsigned int> *)&__p[1], v321, (std::vector<unsigned int>::const_reference)&v604);
                          v322 = *((_QWORD *)this + 125) - *((_QWORD *)this + 124);
                          if (v322)
                          {
                            v323 = 0;
                            v324 = v322 >> 5;
                            data = __p[1].__r_.__value_.__l.__data_;
                            do
                            {
                              *(_DWORD *)&data[4 * v323] = v323;
                              ++v323;
                            }
                            while (v324 > v323);
                          }
                          if (*((_BYTE *)this + 916))
                            v326 = *((_DWORD *)this + 228);
                          else
                            v326 = 0;
                          cpms::controllers::Power<float,cpms::smoothers::Exponential,clsp::AttackRelease>::AddGainGroup(*((_QWORD *)this + 111), (unsigned int **)__p, v326);
                          v327 = (NSObject **)spp3Subsystem();
                          if (v327)
                          {
                            v328 = *v327;
                            if (!*v327)
                            {
LABEL_571:
                              if (__p[1].__r_.__value_.__r.__words[0])
                              {
                                __p[1].__r_.__value_.__l.__size_ = __p[1].__r_.__value_.__r.__words[0];
                                operator delete(__p[1].__r_.__value_.__l.__data_);
                              }
                              if (__p[0].__r_.__value_.__r.__words[0])
                              {
                                __p[0].__r_.__value_.__l.__size_ = __p[0].__r_.__value_.__r.__words[0];
                                operator delete(__p[0].__r_.__value_.__l.__data_);
                              }
LABEL_575:
                              if ((*((_BYTE *)this + 1177) & 1) == 0)
                                goto LABEL_584;
                              v329 = (NSObject **)spp3Subsystem();
                              if (v329)
                              {
                                v330 = *v329;
                                if (!*v329)
                                {
LABEL_582:
                                  v331 = *((_QWORD *)this + 111);
                                  std::operator+<char>();
                                  v332 = (dispatch_object_t *)operator new();
                                  clsp::CLSP_Log::CLSP_Log((uint64_t)v332, (uint64_t)__p, (uint64_t)this + 1160);
                                  std::unique_ptr<clsp::CLSP_Log>::reset[abi:ne180100]((dispatch_object_t **)(v331 + 568), v332);
                                  if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
                                    operator delete(__p[0].__r_.__value_.__l.__data_);
LABEL_584:
                                  v333 = *((unsigned int *)this + 158);
                                  v569 = 0;
                                  std::vector<BOOL>::vector(v580, v333, &v569);
                                  if (*((_BYTE *)this + 584))
                                    v334 = (void **)((char *)this + 560);
                                  else
                                    v334 = v580;
                                  std::vector<BOOL>::vector(&v583, (uint64_t)v334);
                                  if (*(_QWORD *)&v583.mFormatID == v333)
                                  {
                                    std::vector<BOOL>::vector(inPropertyData, (uint64_t)&v583);
                                    goto LABEL_596;
                                  }
                                  v335 = (NSObject **)spp3Subsystem();
                                  if (v335)
                                  {
                                    v336 = *v335;
                                    if (!*v335)
                                    {
LABEL_595:
                                      __p[0].__r_.__value_.__s.__data_[0] = 1;
                                      std::vector<BOOL>::vector(inPropertyData, v333, (unsigned __int8 *)__p);
LABEL_596:
                                      v337 = *((unsigned int *)this + 158);
                                      v564 = 0;
                                      std::vector<BOOL>::vector(v565, v337, &v564);
                                      if (*((_BYTE *)this + 616))
                                        v338 = (void **)((char *)this + 592);
                                      else
                                        v338 = v565;
                                      std::vector<BOOL>::vector(&v566, (uint64_t)v338);
                                      if (v567 == v337)
                                      {
                                        std::vector<BOOL>::vector(v568, (uint64_t)&v566);
                                        goto LABEL_608;
                                      }
                                      v339 = (NSObject **)spp3Subsystem();
                                      if (v339)
                                      {
                                        v340 = *v339;
                                        if (!*v339)
                                        {
LABEL_607:
                                          __p[0].__r_.__value_.__s.__data_[0] = 1;
                                          std::vector<BOOL>::vector(v568, v337, (unsigned __int8 *)__p);
LABEL_608:
                                          v341 = *(_QWORD *)&inPropertyData[8];
                                          memset(&v604, 0, 24);
                                          if (!*(_QWORD *)&inPropertyData[8])
                                          {
LABEL_626:
                                            v356 = 0;
LABEL_627:
                                            v358 = (void *)*((_QWORD *)this + 67);
                                            if (v358)
                                            {
                                              operator delete(v358);
                                              *((_QWORD *)this + 67) = 0;
                                              *((_QWORD *)this + 68) = 0;
                                              *((_QWORD *)this + 69) = 0;
                                              v356 = *(_QWORD *)&v604.mFormatID;
                                            }
                                            v359 = *(_QWORD *)&v604.mBytesPerPacket;
                                            *((_QWORD *)this + 67) = *(_QWORD *)&v604.mSampleRate;
                                            *((_QWORD *)this + 68) = v356;
                                            *((_QWORD *)this + 69) = v359;
                                            memset(&v604, 0, 24);
                                            if (v568[0])
                                              operator delete(v568[0]);
                                            if (v566)
                                              operator delete(v566);
                                            if (v565[0])
                                              operator delete(v565[0]);
                                            if (*(_QWORD *)inPropertyData)
                                              operator delete(*(void **)inPropertyData);
                                            if (*(_QWORD *)&v583.mSampleRate)
                                              operator delete(*(void **)&v583.mSampleRate);
                                            if (v580[0])
                                              operator delete(v580[0]);
                                            v360 = (NSObject **)spp3Subsystem();
                                            if (v360)
                                            {
                                              v361 = *v360;
                                              if (!*v360)
                                                goto LABEL_651;
                                            }
                                            else
                                            {
                                              v361 = MEMORY[0x1E0C81028];
                                            }
                                            if (os_log_type_enabled(v361, OS_LOG_TYPE_DEBUG))
                                            {
                                              *(_OWORD *)inPropertyData = *((unint64_t *)this + 67);
                                              v362 = *((_QWORD *)this + 68);
                                              *(_QWORD *)&v583.mSampleRate = *(_QWORD *)inPropertyData + 8 * (v362 >> 6);
                                              *(_QWORD *)&v583.mFormatID = v362 & 0x3F;
                                              clsp::telemetry::utils::PrintBoolVector_impl<std::__bit_iterator<std::vector<BOOL>,true,0ul>,std::__bit_iterator<std::vector<BOOL>,true,0ul>>(&v604, (uint64_t)inPropertyData, &v583);
                                              v363 = (v604.mFramesPerPacket & 0x80000000) == 0
                                                   ? &v604
                                                   : *(AudioStreamBasicDescription **)&v604.mSampleRate;
                                              LODWORD(__p[0].__r_.__value_.__l.__data_) = 136315650;
                                              *(std::string::size_type *)((char *)__p[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)"AUSpeakerProtectionV3.cpp";
                                              WORD2(__p[0].__r_.__value_.__r.__words[1]) = 1024;
                                              *(_DWORD *)((char *)&__p[0].__r_.__value_.__r.__words[1] + 6) = 717;
                                              WORD1(__p[0].__r_.__value_.__r.__words[2]) = 2080;
                                              *(std::string::size_type *)((char *)&__p[0].__r_.__value_.__r.__words[2]
                                                                        + 4) = (std::string::size_type)v363;
                                              _os_log_impl(&dword_1B5ED0000, v361, OS_LOG_TYPE_DEBUG, "%25s:%-5d Ignoring telemetry, as: [ %s ]", (uint8_t *)__p, 0x1Cu);
                                              if (SHIBYTE(v604.mFramesPerPacket) < 0)
                                                operator delete(*(void **)&v604.mSampleRate);
                                            }
LABEL_651:
                                            SimpleMeters::Initialize((AUSpeakerProtectionV3 *)((char *)this + 1192), (const CAStreamBasicDescription *)&v577, (const CAStreamBasicDescription *)&v576);
                                            if (*((_QWORD *)this + 106) != *((_QWORD *)this + 105))
                                            {
                                              for (ii = 0;
                                                    ii < (uint64_t)(*((_QWORD *)this + 106) - *((_QWORD *)this + 105)) >> 4;
                                                    ++ii)
                                              {
                                                v365 = (char *)operator new(0xD8uLL);
                                                v366 = v365;
                                                *((_QWORD *)v365 + 1) = 0;
                                                *((_QWORD *)v365 + 2) = 0;
                                                *(_QWORD *)v365 = &off_1E69DB658;
                                                *(_OWORD *)(v365 + 24) = 0u;
                                                v367 = v365 + 24;
                                                *(_OWORD *)(v365 + 40) = 0u;
                                                *(_OWORD *)(v365 + 56) = 0u;
                                                *(_OWORD *)(v365 + 72) = 0u;
                                                *(_OWORD *)(v365 + 88) = 0u;
                                                *(_OWORD *)(v365 + 104) = 0u;
                                                *(_OWORD *)(v365 + 120) = 0u;
                                                *(_OWORD *)(v365 + 136) = 0u;
                                                *(_OWORD *)(v365 + 152) = 0u;
                                                *(_OWORD *)(v365 + 168) = 0u;
                                                *(_OWORD *)(v365 + 184) = 0u;
                                                *(_OWORD *)(v365 + 200) = 0u;
                                                __p[0].__r_.__value_.__r.__words[0] = (std::string::size_type)(v365 + 24);
                                                __p[0].__r_.__value_.__l.__size_ = (std::string::size_type)v365;
                                                v368 = (char *)*((_QWORD *)this + 143);
                                                v369 = *((_QWORD *)this + 144);
                                                if ((unint64_t)v368 >= v369)
                                                {
                                                  v371 = jj;
                                                  v372 = (char *)*((_QWORD *)this + 142);
                                                  v373 = (v368 - v372) >> 4;
                                                  v374 = v373 + 1;
                                                  if ((unint64_t)(v373 + 1) >> 60)
                                                    std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
                                                  v375 = v369 - (_QWORD)v372;
                                                  if (v375 >> 3 > v374)
                                                    v374 = v375 >> 3;
                                                  if ((unint64_t)v375 >= 0x7FFFFFFFFFFFFFF0)
                                                    v376 = 0xFFFFFFFFFFFFFFFLL;
                                                  else
                                                    v376 = v374;
                                                  if (v376 >> 60)
                                                    std::__throw_bad_array_new_length[abi:ne180100]();
                                                  v377 = (char *)operator new(16 * v376);
                                                  v378 = &v377[16 * v373];
                                                  *(_QWORD *)v378 = v367;
                                                  *((_QWORD *)v378 + 1) = v366;
                                                  if (v368 == v372)
                                                  {
                                                    v382 = vdupq_n_s64((unint64_t)v368);
                                                    v379 = &v377[16 * v373];
                                                    v381 = this;
                                                  }
                                                  else
                                                  {
                                                    v379 = &v377[16 * v373];
                                                    do
                                                    {
                                                      v380 = *((_OWORD *)v368 - 1);
                                                      v368 -= 16;
                                                      *((_OWORD *)v379 - 1) = v380;
                                                      v379 -= 16;
                                                      *(_QWORD *)v368 = 0;
                                                      *((_QWORD *)v368 + 1) = 0;
                                                    }
                                                    while (v368 != v372);
                                                    v381 = this;
                                                    v382 = *((int64x2_t *)this + 71);
                                                  }
                                                  v370 = v378 + 16;
                                                  *((_QWORD *)v381 + 142) = v379;
                                                  *((_QWORD *)v381 + 143) = v378 + 16;
                                                  *((_QWORD *)v381 + 144) = &v377[16 * v376];
                                                  v383 = v382.i64[1];
                                                  v384 = (void *)v382.i64[0];
                                                  for (jj = v371;
                                                        (void *)v383 != v384;
                                                  if (v384)
                                                    operator delete(v384);
                                                }
                                                else
                                                {
                                                  *(_QWORD *)v368 = v367;
                                                  *((_QWORD *)v368 + 1) = v365;
                                                  v370 = v368 + 16;
                                                }
                                                *((_QWORD *)this + 143) = v370;
                                                v385 = *((_DWORD *)this + 294);
                                                v386 = *(v370 - 2);
                                                if ((v385 & 4) == 0)
                                                  goto LABEL_688;
                                                std::to_string((std::string *)inPropertyData, ii);
                                                v387 = std::string::insert((std::string *)inPropertyData, 0, "PredDisp_Data_ch", 0x10uLL);
                                                v388 = *(_OWORD *)&v387->__r_.__value_.__l.__data_;
                                                *(_QWORD *)&v604.mBytesPerPacket = *((_QWORD *)&v387->__r_.__value_.__l
                                                                                   + 2);
                                                *(_OWORD *)&v604.mSampleRate = v388;
                                                v387->__r_.__value_.__l.__size_ = 0;
                                                v387->__r_.__value_.__r.__words[2] = 0;
                                                v387->__r_.__value_.__r.__words[0] = 0;
                                                if (v572 >= 0)
                                                  v389 = v571;
                                                else
                                                  v389 = (void **)v571[0];
                                                if (v572 >= 0)
                                                  v390 = HIBYTE(v572);
                                                else
                                                  v390 = (std::string::size_type)v571[1];
                                                v391 = std::string::append((std::string *)&v604, (const std::string::value_type *)v389, v390);
                                                v392 = *(_OWORD *)&v391->__r_.__value_.__l.__data_;
                                                __p[0].__r_.__value_.__r.__words[2] = v391->__r_.__value_.__r.__words[2];
                                                *(_OWORD *)&__p[0].__r_.__value_.__l.__data_ = v392;
                                                v391->__r_.__value_.__l.__size_ = 0;
                                                v391->__r_.__value_.__r.__words[2] = 0;
                                                v391->__r_.__value_.__r.__words[0] = 0;
                                                std::allocate_shared[abi:ne180100]<clsp::CLSP_Log,std::allocator<clsp::CLSP_Log>,std::string,CATimeUtilities::GregorianDate const&,void>((uint64_t *)&v583, (uint64_t)__p, (uint64_t)jj);
                                                std::shared_ptr<vp::xml::_xmlNode const>::operator=[abi:ne180100](v386, (__int128 *)&v583);
                                                v393 = *(std::__shared_weak_count **)&v583.mFormatID;
                                                if (*(_QWORD *)&v583.mFormatID)
                                                {
                                                  v394 = (unint64_t *)(*(_QWORD *)&v583.mFormatID + 8);
                                                  do
                                                    v395 = __ldaxr(v394);
                                                  while (__stlxr(v395 - 1, v394));
                                                  if (!v395)
                                                  {
                                                    ((void (*)(std::__shared_weak_count *))v393->__on_zero_shared)(v393);
                                                    std::__shared_weak_count::__release_weak(v393);
                                                  }
                                                }
                                                if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
                                                  operator delete(__p[0].__r_.__value_.__l.__data_);
                                                if (SHIBYTE(v604.mFramesPerPacket) < 0)
                                                  operator delete(*(void **)&v604.mSampleRate);
                                                if ((inPropertyData[23] & 0x80000000) != 0)
                                                {
                                                  operator delete(*(void **)inPropertyData);
                                                  if ((v385 & 0x20) == 0)
                                                    goto LABEL_707;
                                                }
                                                else
                                                {
LABEL_688:
                                                  if ((v385 & 0x20) == 0)
                                                    goto LABEL_707;
                                                }
                                                std::to_string((std::string *)inPropertyData, ii);
                                                v396 = std::string::insert((std::string *)inPropertyData, 0, "PredDispMore_Data_ch", 0x14uLL);
                                                v397 = *(_OWORD *)&v396->__r_.__value_.__l.__data_;
                                                *(_QWORD *)&v604.mBytesPerPacket = *((_QWORD *)&v396->__r_.__value_.__l
                                                                                   + 2);
                                                *(_OWORD *)&v604.mSampleRate = v397;
                                                v396->__r_.__value_.__l.__size_ = 0;
                                                v396->__r_.__value_.__r.__words[2] = 0;
                                                v396->__r_.__value_.__r.__words[0] = 0;
                                                if (v572 >= 0)
                                                  v398 = v571;
                                                else
                                                  v398 = (void **)v571[0];
                                                if (v572 >= 0)
                                                  v399 = HIBYTE(v572);
                                                else
                                                  v399 = (std::string::size_type)v571[1];
                                                v400 = std::string::append((std::string *)&v604, (const std::string::value_type *)v398, v399);
                                                v401 = *(_OWORD *)&v400->__r_.__value_.__l.__data_;
                                                __p[0].__r_.__value_.__r.__words[2] = v400->__r_.__value_.__r.__words[2];
                                                *(_OWORD *)&__p[0].__r_.__value_.__l.__data_ = v401;
                                                v400->__r_.__value_.__l.__size_ = 0;
                                                v400->__r_.__value_.__r.__words[2] = 0;
                                                v400->__r_.__value_.__r.__words[0] = 0;
                                                std::allocate_shared[abi:ne180100]<clsp::CLSP_Log,std::allocator<clsp::CLSP_Log>,std::string,CATimeUtilities::GregorianDate const&,void>((uint64_t *)&v583, (uint64_t)__p, (uint64_t)jj);
                                                std::shared_ptr<vp::xml::_xmlNode const>::operator=[abi:ne180100](v386 + 16, (__int128 *)&v583);
                                                v402 = *(std::__shared_weak_count **)&v583.mFormatID;
                                                if (*(_QWORD *)&v583.mFormatID)
                                                {
                                                  v403 = (unint64_t *)(*(_QWORD *)&v583.mFormatID + 8);
                                                  do
                                                    v404 = __ldaxr(v403);
                                                  while (__stlxr(v404 - 1, v403));
                                                  if (!v404)
                                                  {
                                                    ((void (*)(std::__shared_weak_count *))v402->__on_zero_shared)(v402);
                                                    std::__shared_weak_count::__release_weak(v402);
                                                  }
                                                }
                                                if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
                                                  operator delete(__p[0].__r_.__value_.__l.__data_);
                                                if (SHIBYTE(v604.mFramesPerPacket) < 0)
                                                  operator delete(*(void **)&v604.mSampleRate);
                                                if ((inPropertyData[23] & 0x80000000) != 0)
                                                  operator delete(*(void **)inPropertyData);
                                                if ((v385 & 8) == 0)
                                                  goto LABEL_758;
LABEL_707:
                                                std::to_string((std::string *)inPropertyData, ii);
                                                v405 = std::string::insert((std::string *)inPropertyData, 0, "Reb_Data_ch", 0xBuLL);
                                                v406 = *(_OWORD *)&v405->__r_.__value_.__l.__data_;
                                                *(_QWORD *)&v604.mBytesPerPacket = *((_QWORD *)&v405->__r_.__value_.__l
                                                                                   + 2);
                                                *(_OWORD *)&v604.mSampleRate = v406;
                                                v405->__r_.__value_.__l.__size_ = 0;
                                                v405->__r_.__value_.__r.__words[2] = 0;
                                                v405->__r_.__value_.__r.__words[0] = 0;
                                                if (v572 >= 0)
                                                  v407 = v571;
                                                else
                                                  v407 = (void **)v571[0];
                                                if (v572 >= 0)
                                                  v408 = HIBYTE(v572);
                                                else
                                                  v408 = (std::string::size_type)v571[1];
                                                v409 = std::string::append((std::string *)&v604, (const std::string::value_type *)v407, v408);
                                                v410 = *(_OWORD *)&v409->__r_.__value_.__l.__data_;
                                                __p[0].__r_.__value_.__r.__words[2] = v409->__r_.__value_.__r.__words[2];
                                                *(_OWORD *)&__p[0].__r_.__value_.__l.__data_ = v410;
                                                v409->__r_.__value_.__l.__size_ = 0;
                                                v409->__r_.__value_.__r.__words[2] = 0;
                                                v409->__r_.__value_.__r.__words[0] = 0;
                                                std::allocate_shared[abi:ne180100]<clsp::CLSP_Log,std::allocator<clsp::CLSP_Log>,std::string,CATimeUtilities::GregorianDate const&,void>((uint64_t *)&v583, (uint64_t)__p, (uint64_t)jj);
                                                std::shared_ptr<vp::xml::_xmlNode const>::operator=[abi:ne180100](v386 + 32, (__int128 *)&v583);
                                                v411 = *(std::__shared_weak_count **)&v583.mFormatID;
                                                if (*(_QWORD *)&v583.mFormatID)
                                                {
                                                  v412 = (unint64_t *)(*(_QWORD *)&v583.mFormatID + 8);
                                                  do
                                                    v413 = __ldaxr(v412);
                                                  while (__stlxr(v413 - 1, v412));
                                                  if (!v413)
                                                  {
                                                    ((void (*)(std::__shared_weak_count *))v411->__on_zero_shared)(v411);
                                                    std::__shared_weak_count::__release_weak(v411);
                                                  }
                                                }
                                                if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
                                                  operator delete(__p[0].__r_.__value_.__l.__data_);
                                                if (SHIBYTE(v604.mFramesPerPacket) < 0)
                                                  operator delete(*(void **)&v604.mSampleRate);
                                                if ((inPropertyData[23] & 0x80000000) != 0)
                                                  operator delete(*(void **)inPropertyData);
                                                std::to_string((std::string *)inPropertyData, ii);
                                                v414 = std::string::insert((std::string *)inPropertyData, 0, "Err_Data_ch", 0xBuLL);
                                                v415 = *(_OWORD *)&v414->__r_.__value_.__l.__data_;
                                                *(_QWORD *)&v604.mBytesPerPacket = *((_QWORD *)&v414->__r_.__value_.__l
                                                                                   + 2);
                                                *(_OWORD *)&v604.mSampleRate = v415;
                                                v414->__r_.__value_.__l.__size_ = 0;
                                                v414->__r_.__value_.__r.__words[2] = 0;
                                                v414->__r_.__value_.__r.__words[0] = 0;
                                                if (v572 >= 0)
                                                  v416 = v571;
                                                else
                                                  v416 = (void **)v571[0];
                                                if (v572 >= 0)
                                                  v417 = HIBYTE(v572);
                                                else
                                                  v417 = (std::string::size_type)v571[1];
                                                v418 = std::string::append((std::string *)&v604, (const std::string::value_type *)v416, v417);
                                                v419 = *(_OWORD *)&v418->__r_.__value_.__l.__data_;
                                                __p[0].__r_.__value_.__r.__words[2] = v418->__r_.__value_.__r.__words[2];
                                                *(_OWORD *)&__p[0].__r_.__value_.__l.__data_ = v419;
                                                v418->__r_.__value_.__l.__size_ = 0;
                                                v418->__r_.__value_.__r.__words[2] = 0;
                                                v418->__r_.__value_.__r.__words[0] = 0;
                                                std::allocate_shared[abi:ne180100]<clsp::CLSP_Log,std::allocator<clsp::CLSP_Log>,std::string,CATimeUtilities::GregorianDate const&,void>((uint64_t *)&v583, (uint64_t)__p, (uint64_t)jj);
                                                std::shared_ptr<vp::xml::_xmlNode const>::operator=[abi:ne180100](v386 + 48, (__int128 *)&v583);
                                                v420 = *(std::__shared_weak_count **)&v583.mFormatID;
                                                if (*(_QWORD *)&v583.mFormatID)
                                                {
                                                  v421 = (unint64_t *)(*(_QWORD *)&v583.mFormatID + 8);
                                                  do
                                                    v422 = __ldaxr(v421);
                                                  while (__stlxr(v422 - 1, v421));
                                                  if (!v422)
                                                  {
                                                    ((void (*)(std::__shared_weak_count *))v420->__on_zero_shared)(v420);
                                                    std::__shared_weak_count::__release_weak(v420);
                                                  }
                                                }
                                                if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
                                                  operator delete(__p[0].__r_.__value_.__l.__data_);
                                                if (SHIBYTE(v604.mFramesPerPacket) < 0)
                                                  operator delete(*(void **)&v604.mSampleRate);
                                                if ((inPropertyData[23] & 0x80000000) != 0)
                                                  operator delete(*(void **)inPropertyData);
                                                std::to_string((std::string *)inPropertyData, ii);
                                                v423 = std::string::insert((std::string *)inPropertyData, 0, "CLDisp_Data_ch", 0xEuLL);
                                                v424 = *(_OWORD *)&v423->__r_.__value_.__l.__data_;
                                                *(_QWORD *)&v604.mBytesPerPacket = *((_QWORD *)&v423->__r_.__value_.__l
                                                                                   + 2);
                                                *(_OWORD *)&v604.mSampleRate = v424;
                                                v423->__r_.__value_.__l.__size_ = 0;
                                                v423->__r_.__value_.__r.__words[2] = 0;
                                                v423->__r_.__value_.__r.__words[0] = 0;
                                                if (v572 >= 0)
                                                  v425 = v571;
                                                else
                                                  v425 = (void **)v571[0];
                                                if (v572 >= 0)
                                                  v426 = HIBYTE(v572);
                                                else
                                                  v426 = (std::string::size_type)v571[1];
                                                v427 = std::string::append((std::string *)&v604, (const std::string::value_type *)v425, v426);
                                                v428 = *(_OWORD *)&v427->__r_.__value_.__l.__data_;
                                                __p[0].__r_.__value_.__r.__words[2] = v427->__r_.__value_.__r.__words[2];
                                                *(_OWORD *)&__p[0].__r_.__value_.__l.__data_ = v428;
                                                v427->__r_.__value_.__l.__size_ = 0;
                                                v427->__r_.__value_.__r.__words[2] = 0;
                                                v427->__r_.__value_.__r.__words[0] = 0;
                                                std::allocate_shared[abi:ne180100]<clsp::CLSP_Log,std::allocator<clsp::CLSP_Log>,std::string,CATimeUtilities::GregorianDate const&,void>((uint64_t *)&v583, (uint64_t)__p, (uint64_t)jj);
                                                std::shared_ptr<vp::xml::_xmlNode const>::operator=[abi:ne180100](v386 + 64, (__int128 *)&v583);
                                                v429 = *(std::__shared_weak_count **)&v583.mFormatID;
                                                if (*(_QWORD *)&v583.mFormatID)
                                                {
                                                  v430 = (unint64_t *)(*(_QWORD *)&v583.mFormatID + 8);
                                                  do
                                                    v431 = __ldaxr(v430);
                                                  while (__stlxr(v431 - 1, v430));
                                                  if (!v431)
                                                  {
                                                    ((void (*)(std::__shared_weak_count *))v429->__on_zero_shared)(v429);
                                                    std::__shared_weak_count::__release_weak(v429);
                                                  }
                                                }
                                                if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
                                                  operator delete(__p[0].__r_.__value_.__l.__data_);
                                                if (SHIBYTE(v604.mFramesPerPacket) < 0)
                                                  operator delete(*(void **)&v604.mSampleRate);
                                                if ((inPropertyData[23] & 0x80000000) != 0)
                                                {
                                                  operator delete(*(void **)inPropertyData);
                                                  if ((v385 & 0x10) == 0)
                                                    goto LABEL_777;
                                                }
                                                else
                                                {
LABEL_758:
                                                  if ((v385 & 0x10) == 0)
                                                    goto LABEL_777;
                                                }
                                                std::to_string((std::string *)inPropertyData, ii);
                                                v432 = std::string::insert((std::string *)inPropertyData, 0, "CoeffLog_ch", 0xBuLL);
                                                v433 = *(_OWORD *)&v432->__r_.__value_.__l.__data_;
                                                *(_QWORD *)&v604.mBytesPerPacket = *((_QWORD *)&v432->__r_.__value_.__l
                                                                                   + 2);
                                                *(_OWORD *)&v604.mSampleRate = v433;
                                                v432->__r_.__value_.__l.__size_ = 0;
                                                v432->__r_.__value_.__r.__words[2] = 0;
                                                v432->__r_.__value_.__r.__words[0] = 0;
                                                if (v572 >= 0)
                                                  v434 = v571;
                                                else
                                                  v434 = (void **)v571[0];
                                                if (v572 >= 0)
                                                  v435 = HIBYTE(v572);
                                                else
                                                  v435 = (std::string::size_type)v571[1];
                                                v436 = std::string::append((std::string *)&v604, (const std::string::value_type *)v434, v435);
                                                v437 = *(_OWORD *)&v436->__r_.__value_.__l.__data_;
                                                __p[0].__r_.__value_.__r.__words[2] = v436->__r_.__value_.__r.__words[2];
                                                *(_OWORD *)&__p[0].__r_.__value_.__l.__data_ = v437;
                                                v436->__r_.__value_.__l.__size_ = 0;
                                                v436->__r_.__value_.__r.__words[2] = 0;
                                                v436->__r_.__value_.__r.__words[0] = 0;
                                                std::allocate_shared[abi:ne180100]<clsp::CLSP_Log,std::allocator<clsp::CLSP_Log>,std::string,CATimeUtilities::GregorianDate const&,void>((uint64_t *)&v583, (uint64_t)__p, (uint64_t)jj);
                                                std::shared_ptr<vp::xml::_xmlNode const>::operator=[abi:ne180100](v386 + 80, (__int128 *)&v583);
                                                v438 = *(std::__shared_weak_count **)&v583.mFormatID;
                                                if (*(_QWORD *)&v583.mFormatID)
                                                {
                                                  v439 = (unint64_t *)(*(_QWORD *)&v583.mFormatID + 8);
                                                  do
                                                    v440 = __ldaxr(v439);
                                                  while (__stlxr(v440 - 1, v439));
                                                  if (!v440)
                                                  {
                                                    ((void (*)(std::__shared_weak_count *))v438->__on_zero_shared)(v438);
                                                    std::__shared_weak_count::__release_weak(v438);
                                                  }
                                                }
                                                if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
                                                  operator delete(__p[0].__r_.__value_.__l.__data_);
                                                if (SHIBYTE(v604.mFramesPerPacket) < 0)
                                                  operator delete(*(void **)&v604.mSampleRate);
                                                if ((inPropertyData[23] & 0x80000000) != 0)
                                                  operator delete(*(void **)inPropertyData);
                                                if ((v385 & 2) == 0)
                                                  goto LABEL_794;
LABEL_777:
                                                std::to_string((std::string *)inPropertyData, ii);
                                                v441 = std::string::insert((std::string *)inPropertyData, 0, "T_Coil_ch", 9uLL);
                                                v442 = *(_OWORD *)&v441->__r_.__value_.__l.__data_;
                                                *(_QWORD *)&v604.mBytesPerPacket = *((_QWORD *)&v441->__r_.__value_.__l
                                                                                   + 2);
                                                *(_OWORD *)&v604.mSampleRate = v442;
                                                v441->__r_.__value_.__l.__size_ = 0;
                                                v441->__r_.__value_.__r.__words[2] = 0;
                                                v441->__r_.__value_.__r.__words[0] = 0;
                                                if (v572 >= 0)
                                                  v443 = v571;
                                                else
                                                  v443 = (void **)v571[0];
                                                if (v572 >= 0)
                                                  v444 = HIBYTE(v572);
                                                else
                                                  v444 = (std::string::size_type)v571[1];
                                                v445 = std::string::append((std::string *)&v604, (const std::string::value_type *)v443, v444);
                                                v446 = *(_OWORD *)&v445->__r_.__value_.__l.__data_;
                                                __p[0].__r_.__value_.__r.__words[2] = v445->__r_.__value_.__r.__words[2];
                                                *(_OWORD *)&__p[0].__r_.__value_.__l.__data_ = v446;
                                                v445->__r_.__value_.__l.__size_ = 0;
                                                v445->__r_.__value_.__r.__words[2] = 0;
                                                v445->__r_.__value_.__r.__words[0] = 0;
                                                std::allocate_shared[abi:ne180100]<clsp::CLSP_Log,std::allocator<clsp::CLSP_Log>,std::string,CATimeUtilities::GregorianDate const&,void>((uint64_t *)&v583, (uint64_t)__p, (uint64_t)jj);
                                                std::shared_ptr<vp::xml::_xmlNode const>::operator=[abi:ne180100](v386 + 96, (__int128 *)&v583);
                                                v447 = *(std::__shared_weak_count **)&v583.mFormatID;
                                                if (*(_QWORD *)&v583.mFormatID)
                                                {
                                                  v448 = (unint64_t *)(*(_QWORD *)&v583.mFormatID + 8);
                                                  do
                                                    v449 = __ldaxr(v448);
                                                  while (__stlxr(v449 - 1, v448));
                                                  if (!v449)
                                                  {
                                                    ((void (*)(std::__shared_weak_count *))v447->__on_zero_shared)(v447);
                                                    std::__shared_weak_count::__release_weak(v447);
                                                  }
                                                }
                                                if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
                                                  operator delete(__p[0].__r_.__value_.__l.__data_);
                                                if (SHIBYTE(v604.mFramesPerPacket) < 0)
                                                  operator delete(*(void **)&v604.mSampleRate);
                                                if ((inPropertyData[23] & 0x80000000) != 0)
                                                {
                                                  operator delete(*(void **)inPropertyData);
                                                  if ((v385 & 1) == 0)
                                                    goto LABEL_830;
                                                }
                                                else
                                                {
LABEL_794:
                                                  if ((v385 & 1) == 0)
                                                    goto LABEL_830;
                                                }
                                                std::to_string((std::string *)inPropertyData, ii);
                                                v450 = std::string::insert((std::string *)inPropertyData, 0, "I_Data_ch", 9uLL);
                                                v451 = *(_OWORD *)&v450->__r_.__value_.__l.__data_;
                                                *(_QWORD *)&v604.mBytesPerPacket = *((_QWORD *)&v450->__r_.__value_.__l
                                                                                   + 2);
                                                *(_OWORD *)&v604.mSampleRate = v451;
                                                v450->__r_.__value_.__l.__size_ = 0;
                                                v450->__r_.__value_.__r.__words[2] = 0;
                                                v450->__r_.__value_.__r.__words[0] = 0;
                                                if (v572 >= 0)
                                                  v452 = v571;
                                                else
                                                  v452 = (void **)v571[0];
                                                if (v572 >= 0)
                                                  v453 = HIBYTE(v572);
                                                else
                                                  v453 = (std::string::size_type)v571[1];
                                                v454 = std::string::append((std::string *)&v604, (const std::string::value_type *)v452, v453);
                                                v455 = *(_OWORD *)&v454->__r_.__value_.__l.__data_;
                                                __p[0].__r_.__value_.__r.__words[2] = v454->__r_.__value_.__r.__words[2];
                                                *(_OWORD *)&__p[0].__r_.__value_.__l.__data_ = v455;
                                                v454->__r_.__value_.__l.__size_ = 0;
                                                v454->__r_.__value_.__r.__words[2] = 0;
                                                v454->__r_.__value_.__r.__words[0] = 0;
                                                std::allocate_shared[abi:ne180100]<clsp::CLSP_Log,std::allocator<clsp::CLSP_Log>,std::string,CATimeUtilities::GregorianDate const&,void>((uint64_t *)&v583, (uint64_t)__p, (uint64_t)jj);
                                                std::shared_ptr<vp::xml::_xmlNode const>::operator=[abi:ne180100](v386 + 112, (__int128 *)&v583);
                                                v456 = *(std::__shared_weak_count **)&v583.mFormatID;
                                                if (*(_QWORD *)&v583.mFormatID)
                                                {
                                                  v457 = (unint64_t *)(*(_QWORD *)&v583.mFormatID + 8);
                                                  do
                                                    v458 = __ldaxr(v457);
                                                  while (__stlxr(v458 - 1, v457));
                                                  if (!v458)
                                                  {
                                                    ((void (*)(std::__shared_weak_count *))v456->__on_zero_shared)(v456);
                                                    std::__shared_weak_count::__release_weak(v456);
                                                  }
                                                }
                                                if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
                                                  operator delete(__p[0].__r_.__value_.__l.__data_);
                                                if (SHIBYTE(v604.mFramesPerPacket) < 0)
                                                  operator delete(*(void **)&v604.mSampleRate);
                                                if ((inPropertyData[23] & 0x80000000) != 0)
                                                  operator delete(*(void **)inPropertyData);
                                                std::to_string((std::string *)inPropertyData, ii);
                                                v459 = std::string::insert((std::string *)inPropertyData, 0, "V_Data_ch", 9uLL);
                                                v460 = *(_OWORD *)&v459->__r_.__value_.__l.__data_;
                                                *(_QWORD *)&v604.mBytesPerPacket = *((_QWORD *)&v459->__r_.__value_.__l
                                                                                   + 2);
                                                *(_OWORD *)&v604.mSampleRate = v460;
                                                v459->__r_.__value_.__l.__size_ = 0;
                                                v459->__r_.__value_.__r.__words[2] = 0;
                                                v459->__r_.__value_.__r.__words[0] = 0;
                                                if (v572 >= 0)
                                                  v461 = v571;
                                                else
                                                  v461 = (void **)v571[0];
                                                if (v572 >= 0)
                                                  v462 = HIBYTE(v572);
                                                else
                                                  v462 = (std::string::size_type)v571[1];
                                                v463 = std::string::append((std::string *)&v604, (const std::string::value_type *)v461, v462);
                                                v464 = *(_OWORD *)&v463->__r_.__value_.__l.__data_;
                                                __p[0].__r_.__value_.__r.__words[2] = v463->__r_.__value_.__r.__words[2];
                                                *(_OWORD *)&__p[0].__r_.__value_.__l.__data_ = v464;
                                                v463->__r_.__value_.__l.__size_ = 0;
                                                v463->__r_.__value_.__r.__words[2] = 0;
                                                v463->__r_.__value_.__r.__words[0] = 0;
                                                std::allocate_shared[abi:ne180100]<clsp::CLSP_Log,std::allocator<clsp::CLSP_Log>,std::string,CATimeUtilities::GregorianDate const&,void>((uint64_t *)&v583, (uint64_t)__p, (uint64_t)jj);
                                                std::shared_ptr<vp::xml::_xmlNode const>::operator=[abi:ne180100](v386 + 128, (__int128 *)&v583);
                                                v465 = *(std::__shared_weak_count **)&v583.mFormatID;
                                                if (*(_QWORD *)&v583.mFormatID)
                                                {
                                                  v466 = (unint64_t *)(*(_QWORD *)&v583.mFormatID + 8);
                                                  do
                                                    v467 = __ldaxr(v466);
                                                  while (__stlxr(v467 - 1, v466));
                                                  if (!v467)
                                                  {
                                                    ((void (*)(std::__shared_weak_count *))v465->__on_zero_shared)(v465);
                                                    std::__shared_weak_count::__release_weak(v465);
                                                  }
                                                }
                                                if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
                                                  operator delete(__p[0].__r_.__value_.__l.__data_);
                                                if (SHIBYTE(v604.mFramesPerPacket) < 0)
                                                  operator delete(*(void **)&v604.mSampleRate);
                                                if ((inPropertyData[23] & 0x80000000) != 0)
                                                  operator delete(*(void **)inPropertyData);
                                                if ((v385 & 0x40) == 0)
                                                  goto LABEL_847;
LABEL_830:
                                                std::to_string((std::string *)inPropertyData, ii);
                                                v468 = std::string::insert((std::string *)inPropertyData, 0, "Convoy_Data_ch", 0xEuLL);
                                                v469 = *(_OWORD *)&v468->__r_.__value_.__l.__data_;
                                                *(_QWORD *)&v604.mBytesPerPacket = *((_QWORD *)&v468->__r_.__value_.__l
                                                                                   + 2);
                                                *(_OWORD *)&v604.mSampleRate = v469;
                                                v468->__r_.__value_.__l.__size_ = 0;
                                                v468->__r_.__value_.__r.__words[2] = 0;
                                                v468->__r_.__value_.__r.__words[0] = 0;
                                                if (v572 >= 0)
                                                  v470 = v571;
                                                else
                                                  v470 = (void **)v571[0];
                                                if (v572 >= 0)
                                                  v471 = HIBYTE(v572);
                                                else
                                                  v471 = (std::string::size_type)v571[1];
                                                v472 = std::string::append((std::string *)&v604, (const std::string::value_type *)v470, v471);
                                                v473 = *(_OWORD *)&v472->__r_.__value_.__l.__data_;
                                                __p[0].__r_.__value_.__r.__words[2] = v472->__r_.__value_.__r.__words[2];
                                                *(_OWORD *)&__p[0].__r_.__value_.__l.__data_ = v473;
                                                v472->__r_.__value_.__l.__size_ = 0;
                                                v472->__r_.__value_.__r.__words[2] = 0;
                                                v472->__r_.__value_.__r.__words[0] = 0;
                                                std::allocate_shared[abi:ne180100]<clsp::CLSP_Log,std::allocator<clsp::CLSP_Log>,std::string,CATimeUtilities::GregorianDate const&,void>((uint64_t *)&v583, (uint64_t)__p, (uint64_t)jj);
                                                std::shared_ptr<vp::xml::_xmlNode const>::operator=[abi:ne180100](v386 + 144, (__int128 *)&v583);
                                                v474 = *(std::__shared_weak_count **)&v583.mFormatID;
                                                if (*(_QWORD *)&v583.mFormatID)
                                                {
                                                  v475 = (unint64_t *)(*(_QWORD *)&v583.mFormatID + 8);
                                                  do
                                                    v476 = __ldaxr(v475);
                                                  while (__stlxr(v476 - 1, v475));
                                                  if (!v476)
                                                  {
                                                    ((void (*)(std::__shared_weak_count *))v474->__on_zero_shared)(v474);
                                                    std::__shared_weak_count::__release_weak(v474);
                                                  }
                                                }
                                                if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
                                                  operator delete(__p[0].__r_.__value_.__l.__data_);
                                                if (SHIBYTE(v604.mFramesPerPacket) < 0)
                                                  operator delete(*(void **)&v604.mSampleRate);
                                                if ((inPropertyData[23] & 0x80000000) != 0)
                                                {
                                                  operator delete(*(void **)inPropertyData);
                                                  if ((v385 & 0x80) != 0)
                                                  {
LABEL_848:
                                                    std::to_string((std::string *)inPropertyData, ii);
                                                    v477 = std::string::insert((std::string *)inPropertyData, 0, "Convoy_CapData_ch", 0x11uLL);
                                                    v478 = *(_OWORD *)&v477->__r_.__value_.__l.__data_;
                                                    *(_QWORD *)&v604.mBytesPerPacket = *((_QWORD *)&v477->__r_.__value_.__l
                                                                                       + 2);
                                                    *(_OWORD *)&v604.mSampleRate = v478;
                                                    v477->__r_.__value_.__l.__size_ = 0;
                                                    v477->__r_.__value_.__r.__words[2] = 0;
                                                    v477->__r_.__value_.__r.__words[0] = 0;
                                                    if (v572 >= 0)
                                                      v479 = v571;
                                                    else
                                                      v479 = (void **)v571[0];
                                                    if (v572 >= 0)
                                                      v480 = HIBYTE(v572);
                                                    else
                                                      v480 = (std::string::size_type)v571[1];
                                                    v481 = std::string::append((std::string *)&v604, (const std::string::value_type *)v479, v480);
                                                    v482 = *(_OWORD *)&v481->__r_.__value_.__l.__data_;
                                                    __p[0].__r_.__value_.__r.__words[2] = v481->__r_.__value_.__r.__words[2];
                                                    *(_OWORD *)&__p[0].__r_.__value_.__l.__data_ = v482;
                                                    v481->__r_.__value_.__l.__size_ = 0;
                                                    v481->__r_.__value_.__r.__words[2] = 0;
                                                    v481->__r_.__value_.__r.__words[0] = 0;
                                                    std::allocate_shared[abi:ne180100]<clsp::CLSP_Log,std::allocator<clsp::CLSP_Log>,std::string,CATimeUtilities::GregorianDate const&,void>((uint64_t *)&v583, (uint64_t)__p, (uint64_t)jj);
                                                    std::shared_ptr<vp::xml::_xmlNode const>::operator=[abi:ne180100](v386 + 160, (__int128 *)&v583);
                                                    v483 = *(std::__shared_weak_count **)&v583.mFormatID;
                                                    if (*(_QWORD *)&v583.mFormatID)
                                                    {
                                                      v484 = (unint64_t *)(*(_QWORD *)&v583.mFormatID + 8);
                                                      do
                                                        v485 = __ldaxr(v484);
                                                      while (__stlxr(v485 - 1, v484));
                                                      if (!v485)
                                                      {
                                                        ((void (*)(std::__shared_weak_count *))v483->__on_zero_shared)(v483);
                                                        std::__shared_weak_count::__release_weak(v483);
                                                      }
                                                    }
                                                    if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
                                                      operator delete(__p[0].__r_.__value_.__l.__data_);
                                                    if (SHIBYTE(v604.mFramesPerPacket) < 0)
                                                      operator delete(*(void **)&v604.mSampleRate);
                                                    if ((inPropertyData[23] & 0x80000000) != 0)
                                                      operator delete(*(void **)inPropertyData);
                                                    std::to_string((std::string *)inPropertyData, ii);
                                                    v486 = std::string::insert((std::string *)inPropertyData, 0, "Convoy_DataFiltered_ch", 0x16uLL);
                                                    v487 = *(_OWORD *)&v486->__r_.__value_.__l.__data_;
                                                    *(_QWORD *)&v604.mBytesPerPacket = *((_QWORD *)&v486->__r_.__value_.__l
                                                                                       + 2);
                                                    *(_OWORD *)&v604.mSampleRate = v487;
                                                    v486->__r_.__value_.__l.__size_ = 0;
                                                    v486->__r_.__value_.__r.__words[2] = 0;
                                                    v486->__r_.__value_.__r.__words[0] = 0;
                                                    if (v572 >= 0)
                                                      v488 = v571;
                                                    else
                                                      v488 = (void **)v571[0];
                                                    if (v572 >= 0)
                                                      v489 = HIBYTE(v572);
                                                    else
                                                      v489 = (std::string::size_type)v571[1];
                                                    v490 = std::string::append((std::string *)&v604, (const std::string::value_type *)v488, v489);
                                                    v491 = *(_OWORD *)&v490->__r_.__value_.__l.__data_;
                                                    __p[0].__r_.__value_.__r.__words[2] = v490->__r_.__value_.__r.__words[2];
                                                    *(_OWORD *)&__p[0].__r_.__value_.__l.__data_ = v491;
                                                    v490->__r_.__value_.__l.__size_ = 0;
                                                    v490->__r_.__value_.__r.__words[2] = 0;
                                                    v490->__r_.__value_.__r.__words[0] = 0;
                                                    std::allocate_shared[abi:ne180100]<clsp::CLSP_Log,std::allocator<clsp::CLSP_Log>,std::string,CATimeUtilities::GregorianDate const&,void>((uint64_t *)&v583, (uint64_t)__p, (uint64_t)jj);
                                                    std::shared_ptr<vp::xml::_xmlNode const>::operator=[abi:ne180100](v386 + 176, (__int128 *)&v583);
                                                    v492 = *(std::__shared_weak_count **)&v583.mFormatID;
                                                    if (*(_QWORD *)&v583.mFormatID)
                                                    {
                                                      v493 = (unint64_t *)(*(_QWORD *)&v583.mFormatID + 8);
                                                      do
                                                        v494 = __ldaxr(v493);
                                                      while (__stlxr(v494 - 1, v493));
                                                      if (!v494)
                                                      {
                                                        ((void (*)(std::__shared_weak_count *))v492->__on_zero_shared)(v492);
                                                        std::__shared_weak_count::__release_weak(v492);
                                                      }
                                                    }
                                                    if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
                                                      operator delete(__p[0].__r_.__value_.__l.__data_);
                                                    if (SHIBYTE(v604.mFramesPerPacket) < 0)
                                                      operator delete(*(void **)&v604.mSampleRate);
                                                    if ((inPropertyData[23] & 0x80000000) != 0)
                                                      operator delete(*(void **)inPropertyData);
                                                  }
                                                }
                                                else
                                                {
LABEL_847:
                                                  if ((v385 & 0x80) != 0)
                                                    goto LABEL_848;
                                                }
                                                v495 = *(_QWORD *)(*((_QWORD *)this + 105) + 16 * ii);
                                                std::shared_ptr<clsp::CLSPKernel_Logs>::operator=[abi:ne180100]((_QWORD *)(v495 + 1080), *(_QWORD *)(*((_QWORD *)this + 143) - 16), *(_QWORD *)(*((_QWORD *)this + 143) - 8));
                                                (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(v495 + 424)
                                                                                        + 256))(*(_QWORD *)(v495 + 424), v495 + 1080);
                                                std::shared_ptr<clsp::CLSPKernel_Logs>::operator=[abi:ne180100]((_QWORD *)(v495 + 760), *(_QWORD *)(v495 + 1080), *(_QWORD *)(v495 + 1088));
                                              }
                                            }
                                            AppBooleanValue = CACFPreferencesGetAppBooleanValue(CFSTR("clsp_log_input_stream"), CFSTR("com.apple.coreaudio"), 0);
                                            v497 = CACFPreferencesGetAppBooleanValue(CFSTR("clsp_log_output_stream"), CFSTR("com.apple.coreaudio"), 0);
                                            if (!AppBooleanValue && !v497)
                                            {
LABEL_927:
                                              applesauce::CF::TypeRefPair::TypeRefPair<char const(&)[20],unsigned int &>((applesauce::CF::TypeRef *)__p, "sppv3_channel_count", (int *)this + 158);
                                              applesauce::CF::TypeRef::TypeRef((applesauce::CF::TypeRef *)&__p[0].__r_.__value_.__r.__words[2], "sppv3_sample_rate");
                                              *(_QWORD *)inPropertyData = *((_QWORD *)this + 78);
                                              __p[1].__r_.__value_.__r.__words[0] = (std::string::size_type)CFNumberCreate(0, kCFNumberDoubleType, inPropertyData);
                                              if (!__p[1].__r_.__value_.__r.__words[0])
                                              {
                                                v557 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                                                std::runtime_error::runtime_error(v557, "Could not construct");
                                              }
                                              applesauce::CF::TypeRef::TypeRef((applesauce::CF::TypeRef *)&__p[1].__r_.__value_.__r.__words[1], "sppv3_closed_loop_enabled");
                                              v537 = *MEMORY[0x1E0C9AE50];
                                              v538 = *MEMORY[0x1E0C9AE40];
                                              if (*((_BYTE *)this + 533))
                                                v539 = *MEMORY[0x1E0C9AE50];
                                              else
                                                v539 = *MEMORY[0x1E0C9AE40];
                                              __p[1].__r_.__value_.__r.__words[2] = v539;
                                              applesauce::CF::TypeRef::TypeRef((applesauce::CF::TypeRef *)v594, "sppv3_voice_processor_mode");
                                              if (*((_BYTE *)this + 532))
                                                v540 = v537;
                                              else
                                                v540 = v538;
                                              v594[1] = v540;
                                              v541 = *((_DWORD *)this + 84);
                                              applesauce::CF::TypeRef::TypeRef((applesauce::CF::TypeRef *)&v595, "sppv3_max_frames_per_slice");
                                              *(_DWORD *)inPropertyData = v541;
                                              v596 = CFNumberCreate(0, kCFNumberIntType, inPropertyData);
                                              if (!v596)
                                              {
                                                v558 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                                                std::runtime_error::runtime_error(v558, "Could not construct");
                                              }
                                              v542 = *((unsigned __int8 *)this + 376);
                                              applesauce::CF::TypeRef::TypeRef((applesauce::CF::TypeRef *)&v597, "sppv3_uses_fixed_block_size");
                                              if (v542)
                                                v543 = v537;
                                              else
                                                v543 = v538;
                                              v598 = v543;
                                              applesauce::CF::TypeRef::TypeRef((applesauce::CF::TypeRef *)v599, "sppv3_uses_closed_loop");
                                              if (v570)
                                                v544 = v537;
                                              else
                                                v544 = v538;
                                              v600[0] = v544;
                                              *(_QWORD *)&v604.mSampleRate = __p;
                                              *(_QWORD *)&v604.mFormatID = 7;
                                              CFDictionaryRef = applesauce::CF::details::make_CFDictionaryRef((uint64_t)&v604);
                                              v546 = (uint64_t *)*((_QWORD *)this + 167);
                                              v547 = (uint64_t *)*((_QWORD *)this + 168);
                                              v548 = AudioStatisticsLibraryLoader(void)::once;
                                              if (v546 == v547)
                                              {
                                                if (AudioStatisticsLibraryLoader(void)::once != -1)
                                                  dispatch_once(&AudioStatisticsLibraryLoader(void)::once, &__block_literal_global_14325);
                                                if (AudioStatisticsLibraryLoader(void)::libSym)
                                                  AudioStatisticsLibraryLoader(void)::libSym(CFDictionaryRef, 0x10000000, 5);
                                              }
                                              else
                                              {
                                                do
                                                {
                                                  v549 = *v546;
                                                  if (v548 != -1)
                                                    dispatch_once(&AudioStatisticsLibraryLoader(void)::once, &__block_literal_global_14325);
                                                  if (AudioStatisticsLibraryLoader(void)::libSym)
                                                  {
                                                    AudioStatisticsLibraryLoader(void)::libSym(v549, CFDictionaryRef, 0x10000000, 5);
                                                    v548 = AudioStatisticsLibraryLoader(void)::once;
                                                  }
                                                  else
                                                  {
                                                    v548 = -1;
                                                  }
                                                  ++v546;
                                                }
                                                while (v546 != v547);
                                              }
                                              if (CFDictionaryRef)
                                                CFRelease(CFDictionaryRef);
                                              for (kk = 0; kk != -14; kk -= 2)
                                              {
                                                v551 = (const void *)v600[kk];
                                                if (v551)
                                                  CFRelease(v551);
                                                v552 = *(const void **)&v599[kk * 8];
                                                if (v552)
                                                  CFRelease(v552);
                                              }
                                              v28 = (*(uint64_t (**)(AUSpeakerProtectionV3 *, _QWORD, _QWORD))(*(_QWORD *)this + 72))(this, 0, 0);
                                              goto LABEL_962;
                                            }
                                            v498 = (const __CFString *)MGGetStringAnswer();
                                            CStringPtr = CFStringGetCStringPtr(v498, 0x8000100u);
                                            if (CStringPtr)
                                              v500 = CStringPtr;
                                            else
                                              v500 = "";
                                            v501 = operator new[]();
                                            *(_OWORD *)(v501 + 224) = 0u;
                                            *(_OWORD *)(v501 + 240) = 0u;
                                            *(_OWORD *)(v501 + 192) = 0u;
                                            *(_OWORD *)(v501 + 208) = 0u;
                                            *(_OWORD *)(v501 + 160) = 0u;
                                            *(_OWORD *)(v501 + 176) = 0u;
                                            *(_OWORD *)(v501 + 128) = 0u;
                                            *(_OWORD *)(v501 + 144) = 0u;
                                            *(_OWORD *)(v501 + 96) = 0u;
                                            *(_OWORD *)(v501 + 112) = 0u;
                                            *(_OWORD *)(v501 + 64) = 0u;
                                            *(_OWORD *)(v501 + 80) = 0u;
                                            *(_OWORD *)(v501 + 32) = 0u;
                                            *(_OWORD *)(v501 + 48) = 0u;
                                            *(_OWORD *)v501 = 0u;
                                            *(_OWORD *)(v501 + 16) = 0u;
                                            if (!AppBooleanValue)
                                              goto LABEL_914;
                                            clsp::CLSP_Log::getLogDirectory((std::__fs::filesystem::path *)__p);
                                            if ((__p[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                                              v502 = __p;
                                            else
                                              v502 = (std::string *)__p[0].__r_.__value_.__r.__words[0];
                                            snprintf((char *)v501, 0x100uLL, "%s%s_%04d%02d%02d_%02d%02d%02d_%s", (const char *)v502, v500, *((_DWORD *)this + 290), *((char *)this + 1164), *((char *)this + 1165), *((char *)this + 1166), *((char *)this + 1167), llround(*((double *)this + 146)), "audioIn.caf");
                                            if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
                                              operator delete(__p[0].__r_.__value_.__l.__data_);
                                            v503 = ausdk::AUScope::SafeGetElement(v562, 0);
                                            v506 = *(_OWORD *)(v503 + 96);
                                            *(_OWORD *)&__p[0].__r_.__value_.__l.__data_ = *(_OWORD *)(v503 + 80);
                                            *(_OWORD *)&__p[0].__r_.__value_.__r.__words[2] = v506;
                                            __p[1].__r_.__value_.__l.__size_ = *(_QWORD *)(v503 + 112);
                                            v507 = *(_OWORD *)(v503 + 96);
                                            *(_OWORD *)&v604.mSampleRate = *(_OWORD *)(v503 + 80);
                                            *(_OWORD *)&v604.mBytesPerPacket = v507;
                                            *(_QWORD *)&v604.mBitsPerChannel = *(_QWORD *)(v503 + 112);
                                            if ((v604.mFormatFlags & 0x20) != 0)
                                            {
                                              mChannelsPerFrame = 1;
                                            }
                                            else
                                            {
                                              mChannelsPerFrame = v604.mChannelsPerFrame;
                                              if (!HIDWORD(v507))
                                              {
                                                v509 = (v604.mBitsPerChannel + 7) >> 3;
                                                goto LABEL_899;
                                              }
                                            }
                                            v509 = v604.mBytesPerFrame / mChannelsPerFrame;
LABEL_899:
                                            v604.mFramesPerPacket = 1;
                                            v604.mBytesPerFrame = v509 * HIDWORD(v507);
                                            v604.mFormatFlags &= ~0x20u;
                                            v604.mBytesPerPacket = v509 * HIDWORD(v507);
                                            v510 = (char *)this + 1088;
                                            CAExtAudioFile::Create((ExtAudioFileRef *)this + 136, (const char *)v501, &v604, v504, v505);
                                            *(_OWORD *)inPropertyData = *(_OWORD *)&__p[0].__r_.__value_.__l.__data_;
                                            *(_OWORD *)&inPropertyData[16] = *(_OWORD *)&__p[0].__r_.__value_.__r.__words[2];
                                            size = __p[1].__r_.__value_.__l.__size_;
                                            v511 = ExtAudioFileSetProperty(*((ExtAudioFileRef *)this + 137), 0x63666D74u, 0x28u, inPropertyData);
                                            (*(void (**)(char *, uint64_t, const char *, uint64_t))(*(_QWORD *)v510 + 24))(v510, v511, "ExtAudioFileSetProperty", 1667657076);
                                            v512 = ExtAudioFileWriteAsync(*((ExtAudioFileRef *)this + 137), 0, 0);
                                            (*(void (**)(char *, uint64_t, const char *))(*(_QWORD *)v510
                                                                                                  + 16))(v510, v512, "ExtAudioFileWriteAsync");
                                            v513 = *((_QWORD *)this + 15);
                                            if (v513)
                                              LODWORD(v514) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v513 + 24))(v513);
                                            else
                                              v514 = (*((_QWORD *)this + 13) - *((_QWORD *)this + 12)) >> 3;
                                            if (v514 >= 2)
                                            {
                                              clsp::CLSP_Log::getLogDirectory((std::__fs::filesystem::path *)inPropertyData);
                                              if (inPropertyData[23] >= 0)
                                                v515 = inPropertyData;
                                              else
                                                v515 = *(const char **)inPropertyData;
                                              snprintf((char *)v501, 0x100uLL, "%s%s_%04d%02d%02d_%02d%02d%02d_%s", v515, v500, *((_DWORD *)this + 290), *((char *)this + 1164), *((char *)this + 1165), *((char *)this + 1166), *((char *)this + 1167), llround(*((double *)this + 146)), "telemetryIn.caf");
                                              if ((inPropertyData[23] & 0x80000000) != 0)
                                                operator delete(*(void **)inPropertyData);
                                              v516 = ausdk::AUScope::SafeGetElement(v562, 1u);
                                              v519 = *(_OWORD *)(v516 + 96);
                                              *(_OWORD *)inPropertyData = *(_OWORD *)(v516 + 80);
                                              *(_OWORD *)&inPropertyData[16] = v519;
                                              size = *(_QWORD *)(v516 + 112);
                                              v520 = *(_OWORD *)(v516 + 96);
                                              *(_OWORD *)&v583.mSampleRate = *(_OWORD *)(v516 + 80);
                                              *(_OWORD *)&v583.mBytesPerPacket = v520;
                                              *(_QWORD *)&v583.mBitsPerChannel = *(_QWORD *)(v516 + 112);
                                              if ((v583.mFormatFlags & 0x20) != 0)
                                              {
                                                v521 = 1;
                                              }
                                              else
                                              {
                                                v521 = HIDWORD(v520);
                                                if (!HIDWORD(v520))
                                                {
                                                  v522 = (v583.mBitsPerChannel + 7) >> 3;
LABEL_913:
                                                  v583.mFramesPerPacket = 1;
                                                  v583.mBytesPerFrame = v522 * HIDWORD(v520);
                                                  v583.mBytesPerPacket = v522 * HIDWORD(v520);
                                                  v583.mFormatFlags &= ~0x20u;
                                                  v523 = (char *)this + 1104;
                                                  CAExtAudioFile::Create((ExtAudioFileRef *)this + 138, (const char *)v501, &v583, v517, v518);
                                                  *(_OWORD *)v580 = *(_OWORD *)inPropertyData;
                                                  v581 = *(_OWORD *)&inPropertyData[16];
                                                  v582 = size;
                                                  v524 = ExtAudioFileSetProperty(*((ExtAudioFileRef *)this + 139), 0x63666D74u, 0x28u, v580);
                                                  (*(void (**)(char *, uint64_t, const char *, uint64_t))(*(_QWORD *)v523 + 24))(v523, v524, "ExtAudioFileSetProperty", 1667657076);
                                                  v525 = ExtAudioFileWriteAsync(*((ExtAudioFileRef *)this + 139), 0, 0);
                                                  (*(void (**)(char *, uint64_t, const char *))(*(_QWORD *)v523 + 16))(v523, v525, "ExtAudioFileWriteAsync");
                                                  goto LABEL_914;
                                                }
                                              }
                                              v522 = v583.mBytesPerFrame / v521;
                                              goto LABEL_913;
                                            }
LABEL_914:
                                            if (!v497)
                                            {
LABEL_926:
                                              MEMORY[0x1BCC95CC8](v501, 0x1000C8077774924);
                                              goto LABEL_927;
                                            }
                                            clsp::CLSP_Log::getLogDirectory((std::__fs::filesystem::path *)__p);
                                            if ((__p[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                                              v526 = __p;
                                            else
                                              v526 = (std::string *)__p[0].__r_.__value_.__r.__words[0];
                                            snprintf((char *)v501, 0x100uLL, "%s%s_%04d%02d%02d_%02d%02d%02d_%s", (const char *)v526, v500, *((_DWORD *)this + 290), *((char *)this + 1164), *((char *)this + 1165), *((char *)this + 1166), *((char *)this + 1167), llround(*((double *)this + 146)), "audioOut.caf");
                                            if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
                                              operator delete(__p[0].__r_.__value_.__l.__data_);
                                            v527 = ausdk::AUScope::SafeGetElement((AUSpeakerProtectionV3 *)((char *)this + 128), 0);
                                            v530 = *(_OWORD *)(v527 + 96);
                                            *(_OWORD *)&__p[0].__r_.__value_.__l.__data_ = *(_OWORD *)(v527 + 80);
                                            *(_OWORD *)&__p[0].__r_.__value_.__r.__words[2] = v530;
                                            __p[1].__r_.__value_.__l.__size_ = *(_QWORD *)(v527 + 112);
                                            v531 = *(_OWORD *)(v527 + 96);
                                            *(_OWORD *)&v604.mSampleRate = *(_OWORD *)(v527 + 80);
                                            *(_OWORD *)&v604.mBytesPerPacket = v531;
                                            *(_QWORD *)&v604.mBitsPerChannel = *(_QWORD *)(v527 + 112);
                                            if ((v604.mFormatFlags & 0x20) != 0)
                                            {
                                              v532 = 1;
                                            }
                                            else
                                            {
                                              v532 = v604.mChannelsPerFrame;
                                              if (!HIDWORD(v531))
                                              {
                                                v533 = (v604.mBitsPerChannel + 7) >> 3;
LABEL_925:
                                                v604.mFramesPerPacket = 1;
                                                v604.mBytesPerFrame = v533 * HIDWORD(v531);
                                                v604.mFormatFlags &= ~0x20u;
                                                v604.mBytesPerPacket = v533 * HIDWORD(v531);
                                                v534 = (char *)this + 1120;
                                                CAExtAudioFile::Create((ExtAudioFileRef *)this + 140, (const char *)v501, &v604, v528, v529);
                                                *(_OWORD *)inPropertyData = *(_OWORD *)&__p[0].__r_.__value_.__l.__data_;
                                                *(_OWORD *)&inPropertyData[16] = *(_OWORD *)&__p[0].__r_.__value_.__r.__words[2];
                                                size = __p[1].__r_.__value_.__l.__size_;
                                                v535 = ExtAudioFileSetProperty(*((ExtAudioFileRef *)this + 141), 0x63666D74u, 0x28u, inPropertyData);
                                                (*(void (**)(char *, uint64_t, const char *, uint64_t))(*(_QWORD *)v534 + 24))(v534, v535, "ExtAudioFileSetProperty", 1667657076);
                                                v536 = ExtAudioFileWriteAsync(*((ExtAudioFileRef *)this + 141), 0, 0);
                                                (*(void (**)(char *, uint64_t, const char *))(*(_QWORD *)v534 + 16))(v534, v536, "ExtAudioFileWriteAsync");
                                                goto LABEL_926;
                                              }
                                            }
                                            v533 = v604.mBytesPerFrame / v532;
                                            goto LABEL_925;
                                          }
                                          std::vector<BOOL>::__vallocate[abi:ne180100](&v604, *(uint64_t *)&inPropertyData[8]);
                                          v342 = *(_QWORD *)&v604.mFormatID;
                                          v343 = *(_QWORD *)&v604.mFormatID + v341;
                                          *(_QWORD *)&v604.mFormatID += v341;
                                          if (v342)
                                          {
                                            v344 = v343 - 1;
                                            if (((v343 - 1) ^ (v342 - 1)) < 0x40)
                                              goto LABEL_617;
                                          }
                                          else
                                          {
                                            v344 = v343 - 1;
                                          }
                                          v345 = v344 >> 6;
                                          if (v343 >= 0x41)
                                            v346 = v345;
                                          else
                                            v346 = 0;
                                          *(_QWORD *)(*(_QWORD *)&v604.mSampleRate + 8 * v346) = 0;
LABEL_617:
                                          __p[0].__r_.__value_.__r.__words[0] = *(_QWORD *)&v604.mSampleRate
                                                                              + 8 * (v342 >> 6);
                                          LODWORD(__p[0].__r_.__value_.__r.__words[1]) = v342 & 0x3F;
                                          std::__fill_n[abi:ne180100]<false,std::__bitset<1ul,8ul>>((uint64_t)__p, v341);
                                          if (*(_QWORD *)&v604.mFormatID)
                                          {
                                            v347 = 0;
                                            v348 = *(_QWORD *)inPropertyData;
                                            v349 = v604.mSampleRate;
                                            v350 = 1;
                                            v351 = v568[0];
                                            while (1)
                                            {
                                              v352 = v347 >> 6;
                                              v353 = 1 << v347;
                                              if ((*(_QWORD *)(v348 + 8 * (v347 >> 6)) & (1 << v347)) != 0)
                                              {
                                                v354 = (uint64_t *)(*(_QWORD *)&v349 + 8 * v352);
                                              }
                                              else
                                              {
                                                v354 = (uint64_t *)(*(_QWORD *)&v349 + 8 * v352);
                                                if ((v351[v352] & v353) == 0)
                                                {
                                                  v355 = *v354 & ~v353;
                                                  goto LABEL_623;
                                                }
                                              }
                                              v355 = *v354 | v353;
LABEL_623:
                                              *v354 = v355;
                                              v347 = v350;
                                              v356 = *(_QWORD *)&v604.mFormatID;
                                              if (*(_QWORD *)&v604.mFormatID <= (unint64_t)v350++)
                                                goto LABEL_627;
                                            }
                                          }
                                          goto LABEL_626;
                                        }
                                      }
                                      else
                                      {
                                        v340 = MEMORY[0x1E0C81028];
                                      }
                                      if (os_log_type_enabled(v340, OS_LOG_TYPE_ERROR))
                                      {
                                        LODWORD(__p[0].__r_.__value_.__l.__data_) = 136315906;
                                        *(std::string::size_type *)((char *)__p[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)"Telemetry.h";
                                        WORD2(__p[0].__r_.__value_.__r.__words[1]) = 1024;
                                        *(_DWORD *)((char *)&__p[0].__r_.__value_.__r.__words[1] + 6) = 212;
                                        WORD1(__p[0].__r_.__value_.__r.__words[2]) = 2048;
                                        *(std::string::size_type *)((char *)&__p[0].__r_.__value_.__r.__words[2] + 4) = v567;
                                        WORD2(__p[1].__r_.__value_.__r.__words[0]) = 1024;
                                        *(_DWORD *)((char *)__p[1].__r_.__value_.__r.__words + 6) = v337;
                                        _os_log_impl(&dword_1B5ED0000, v340, OS_LOG_TYPE_ERROR, "%25s:%-5d IgnoreTelemetry property length (%lu) doesn't match channel count (%u). Ignoring telemetry.", (uint8_t *)__p, 0x22u);
                                      }
                                      goto LABEL_607;
                                    }
                                  }
                                  else
                                  {
                                    v336 = MEMORY[0x1E0C81028];
                                  }
                                  if (os_log_type_enabled(v336, OS_LOG_TYPE_ERROR))
                                  {
                                    LODWORD(__p[0].__r_.__value_.__l.__data_) = 136315906;
                                    *(std::string::size_type *)((char *)__p[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)"Telemetry.h";
                                    WORD2(__p[0].__r_.__value_.__r.__words[1]) = 1024;
                                    *(_DWORD *)((char *)&__p[0].__r_.__value_.__r.__words[1] + 6) = 212;
                                    WORD1(__p[0].__r_.__value_.__r.__words[2]) = 2048;
                                    *(std::string::size_type *)((char *)&__p[0].__r_.__value_.__r.__words[2] + 4) = *(_QWORD *)&v583.mFormatID;
                                    WORD2(__p[1].__r_.__value_.__r.__words[0]) = 1024;
                                    *(_DWORD *)((char *)__p[1].__r_.__value_.__r.__words + 6) = v333;
                                    _os_log_impl(&dword_1B5ED0000, v336, OS_LOG_TYPE_ERROR, "%25s:%-5d IgnoreTelemetry property length (%lu) doesn't match channel count (%u). Ignoring telemetry.", (uint8_t *)__p, 0x22u);
                                  }
                                  goto LABEL_595;
                                }
                              }
                              else
                              {
                                v330 = MEMORY[0x1E0C81028];
                              }
                              if (os_log_type_enabled(v330, OS_LOG_TYPE_INFO))
                              {
                                LODWORD(__p[0].__r_.__value_.__l.__data_) = 136315394;
                                *(std::string::size_type *)((char *)__p[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)"AUSpeakerProtectionV3.cpp";
                                WORD2(__p[0].__r_.__value_.__r.__words[1]) = 1024;
                                *(_DWORD *)((char *)&__p[0].__r_.__value_.__r.__words[1] + 6) = 706;
                                _os_log_impl(&dword_1B5ED0000, v330, OS_LOG_TYPE_INFO, "%25s:%-5d CPMS file logging is enabled.", (uint8_t *)__p, 0x12u);
                              }
                              goto LABEL_582;
                            }
                          }
                          else
                          {
                            v328 = MEMORY[0x1E0C81028];
                          }
                          if (os_log_type_enabled(v328, OS_LOG_TYPE_DEBUG))
                          {
                            LODWORD(v604.mSampleRate) = 136315394;
                            *(_QWORD *)((char *)&v604.mSampleRate + 4) = "AUSpeakerProtectionV3.cpp";
                            LOWORD(v604.mFormatFlags) = 1024;
                            *(AudioFormatFlags *)((char *)&v604.mFormatFlags + 2) = 702;
                            _os_log_impl(&dword_1B5ED0000, v328, OS_LOG_TYPE_DEBUG, "%25s:%-5d CPMS power gain group: [ default ]", (uint8_t *)&v604, 0x12u);
                          }
                          goto LABEL_571;
                        }
                      }
                      else
                      {
                        v211 = MEMORY[0x1E0C81028];
                      }
                      if (os_log_type_enabled(v211, OS_LOG_TYPE_DEBUG))
                      {
                        LODWORD(__p[0].__r_.__value_.__l.__data_) = 136315394;
                        *(std::string::size_type *)((char *)__p[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)"AUSpeakerProtectionV3.cpp";
                        WORD2(__p[0].__r_.__value_.__r.__words[1]) = 1024;
                        *(_DWORD *)((char *)&__p[0].__r_.__value_.__r.__words[1] + 6) = 643;
                        _os_log_impl(&dword_1B5ED0000, v211, OS_LOG_TYPE_DEBUG, "%25s:%-5d This instance is ideally open-loop; setting up the open-loop ThermalStateVector_v3.",
                          (uint8_t *)__p,
                          0x12u);
                      }
                      goto LABEL_408;
                    }
                    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)__p);
                    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"SpTS key described ", 19);
                    v199 = (_QWORD *)std::ostream::operator<<();
                    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v199, (uint64_t)" channels, but ", 15);
                    v200 = (_QWORD *)std::ostream::operator<<();
                    v201 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v200, (uint64_t)" of calibration were expected. Calibration configuration has been left unchanged.", 81);
                    std::endl[abi:ne180100]<char,std::char_traits<char>>(v201);
                    v202 = (NSObject **)spp3Subsystem();
                    if (v202)
                    {
                      v203 = *v202;
                      if (!*v202)
                      {
LABEL_381:
                        std::ostringstream::~ostringstream((uint64_t)__p);
                        v196 = 0;
                        v28 = 4294956421;
                        goto LABEL_382;
                      }
                    }
                    else
                    {
                      v203 = MEMORY[0x1E0C81028];
                    }
                    if (os_log_type_enabled(v203, OS_LOG_TYPE_ERROR))
                    {
                      std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)&__p[0].__r_.__value_.__l.__size_, &v583);
                      v207 = (v583.mFramesPerPacket & 0x80000000) == 0
                           ? &v583
                           : *(AudioStreamBasicDescription **)&v583.mSampleRate;
                      *(_DWORD *)inPropertyData = 136315650;
                      *(_QWORD *)&inPropertyData[4] = "AUSpeakerProtectionV3.cpp";
                      *(_WORD *)&inPropertyData[12] = 1024;
                      *(_DWORD *)&inPropertyData[14] = 615;
                      *(_WORD *)&inPropertyData[18] = 2080;
                      *(_QWORD *)&inPropertyData[20] = v207;
                      _os_log_impl(&dword_1B5ED0000, v203, OS_LOG_TYPE_ERROR, "%25s:%-5d %s", inPropertyData, 0x1Cu);
                      if (SHIBYTE(v583.mFramesPerPacket) < 0)
                        operator delete(*(void **)&v583.mSampleRate);
                    }
                    goto LABEL_381;
                  }
                  v197 = (NSObject **)spp3Subsystem();
                  if (v197)
                  {
                    v198 = *v197;
                    if (!*v197)
                    {
LABEL_367:
                      for (mm = 0; ; ++mm)
                      {
                        v205 = *((_QWORD *)this + 104);
                        if (v205)
                          LODWORD(v206) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v205 + 24))(v205);
                        else
                          v206 = (*((_QWORD *)this + 102) - *((_QWORD *)this + 101)) >> 3;
                        if (mm >= v206)
                          break;
                        AUSpeakerProtectionV3::SetClosedLoopEnabled(this, mm, 0);
                      }
                      v28 = 4294956428;
                      v196 = 1;
                      goto LABEL_382;
                    }
                  }
                  else
                  {
                    v198 = MEMORY[0x1E0C81028];
                  }
                  if (os_log_type_enabled(v198, OS_LOG_TYPE_ERROR))
                  {
                    LODWORD(__p[0].__r_.__value_.__l.__data_) = 136315394;
                    *(std::string::size_type *)((char *)__p[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)"AUSpeakerProtectionV3.cpp";
                    WORD2(__p[0].__r_.__value_.__r.__words[1]) = 1024;
                    *(_DWORD *)((char *)&__p[0].__r_.__value_.__r.__words[1] + 6) = 600;
                    _os_log_impl(&dword_1B5ED0000, v198, OS_LOG_TYPE_ERROR, "%25s:%-5d *** BIG PROBLEM ***: SpTS data should be present on this device, but we failed to fetch it. Failing back to open-loop.\n", (uint8_t *)__p, 0x12u);
                  }
                  goto LABEL_367;
                }
              }
              else
              {
                v189 = MEMORY[0x1E0C81028];
              }
              if (os_log_type_enabled(v189, OS_LOG_TYPE_DEFAULT))
              {
                std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)&__p[0].__r_.__value_.__l.__size_, inPropertyData);
                v190 = inPropertyData[23] >= 0 ? inPropertyData : *(_BYTE **)inPropertyData;
                LODWORD(v604.mSampleRate) = 136315650;
                *(_QWORD *)((char *)&v604.mSampleRate + 4) = "AUSpeakerProtectionV3.cpp";
                LOWORD(v604.mFormatFlags) = 1024;
                *(AudioFormatFlags *)((char *)&v604.mFormatFlags + 2) = 588;
                HIWORD(v604.mBytesPerPacket) = 2080;
                *(_QWORD *)&v604.mFramesPerPacket = v190;
                _os_log_impl(&dword_1B5ED0000, v189, OS_LOG_TYPE_DEFAULT, "%25s:%-5d %s", (uint8_t *)&v604, 0x1Cu);
                if ((inPropertyData[23] & 0x80000000) != 0)
                  operator delete(*(void **)inPropertyData);
              }
              goto LABEL_341;
            }
          }
          else
          {
            v144 = MEMORY[0x1E0C81028];
          }
          if (os_log_type_enabled(v144, OS_LOG_TYPE_DEBUG))
          {
            LODWORD(__p[0].__r_.__value_.__l.__data_) = 136315394;
            *(std::string::size_type *)((char *)__p[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)"AUSpeakerProtectionV3.cpp";
            WORD2(__p[0].__r_.__value_.__r.__words[1]) = 1024;
            *(_DWORD *)((char *)&__p[0].__r_.__value_.__r.__words[1] + 6) = 527;
            _os_log_impl(&dword_1B5ED0000, v144, OS_LOG_TYPE_DEBUG, "%25s:%-5d Speaker gain-link grouping not set; using default (all in group 0).",
              (uint8_t *)__p,
              0x12u);
          }
          goto LABEL_267;
        }
        v124 = this;
        if (!(_DWORD)v123)
          goto LABEL_249;
        v132 = 0;
        while (1)
        {
          if ((int)v123 <= (int)v132)
            __assert_rtn("SpeakerDefaultName", "AUSpeakerProtectionV3.cpp", 351, "index < numSpeakers");
          if ((_DWORD)v123 == 2)
          {
            if ((_DWORD)v132)
            {
              if ((_DWORD)v132 != 1)
              {
LABEL_234:
                std::to_string(__p, v132 + 1);
                v134 = std::string::insert(__p, 0, "Speaker ", 8uLL);
                v135 = *(_OWORD *)&v134->__r_.__value_.__l.__data_;
                *(_QWORD *)&v604.mBytesPerPacket = *((_QWORD *)&v134->__r_.__value_.__l + 2);
                *(_OWORD *)&v604.mSampleRate = v135;
                v134->__r_.__value_.__l.__size_ = 0;
                v134->__r_.__value_.__r.__words[2] = 0;
                v134->__r_.__value_.__r.__words[0] = 0;
                if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
                  operator delete(__p[0].__r_.__value_.__l.__data_);
                goto LABEL_238;
              }
              v133 = "Right Speaker Settings";
            }
            else
            {
              v133 = "Left Speaker Settings";
            }
          }
          else
          {
            v133 = "Speaker settings";
            if ((_DWORD)v123 != 1)
              goto LABEL_234;
          }
          std::string::basic_string[abi:ne180100]<0>(&v604, v133);
LABEL_238:
          if ((v604.mFramesPerPacket & 0x80000000) == 0)
            v136 = COERCE_DOUBLE(&v604);
          else
            v136 = v604.mSampleRate;
          v137 = CFStringCreateWithCString(0, *(const char **)&v136, 0x8000100u);
          if (SHIBYTE(v604.mFramesPerPacket) < 0)
            operator delete(*(void **)&v604.mSampleRate);
          v138 = *((_QWORD *)this + 104);
          if (v138)
          {
            v139 = (*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)v138 + 32))(v138, v132);
          }
          else
          {
            v140 = *((_QWORD *)this + 101);
            if (v132 >= (*((_QWORD *)this + 102) - v140) >> 3)
              v139 = 0;
            else
              v139 = *(_QWORD *)(v140 + 8 * v132);
          }
          ausdk::Owned<__CFString const*>::operator=((const void **)(v139 + 72), v137);
          CFRelease(v137);
          ++v132;
          v124 = this;
          v123 = *((unsigned int *)this + 158);
          if (v132 >= v123)
            goto LABEL_249;
        }
      }
    }
    else
    {
      v121 = MEMORY[0x1E0C81028];
    }
    if (os_log_type_enabled(v121, OS_LOG_TYPE_INFO))
    {
      *(_QWORD *)inPropertyData = *((_QWORD *)this + 91);
      v583.mSampleRate = *((Float64 *)this + 92);
      clsp::telemetry::utils::PrintTelemetryVector_impl<std::__wrap_iter<clsp::telemetry::Item const*>,std::__wrap_iter<clsp::telemetry::Item const*>>((std::string *)&v604, (uint64_t)inPropertyData, &v583);
      v122 = (v604.mFramesPerPacket & 0x80000000) == 0 ? &v604 : *(AudioStreamBasicDescription **)&v604.mSampleRate;
      LODWORD(__p[0].__r_.__value_.__l.__data_) = 136315650;
      *(std::string::size_type *)((char *)__p[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)"AUSpeakerProtectionV3.cpp";
      WORD2(__p[0].__r_.__value_.__r.__words[1]) = 1024;
      *(_DWORD *)((char *)&__p[0].__r_.__value_.__r.__words[1] + 6) = 498;
      WORD1(__p[0].__r_.__value_.__r.__words[2]) = 2080;
      *(std::string::size_type *)((char *)&__p[0].__r_.__value_.__r.__words[2] + 4) = (std::string::size_type)v122;
      _os_log_impl(&dword_1B5ED0000, v121, OS_LOG_TYPE_INFO, "%25s:%-5d Telemetry bus layout: [ %s ]", (uint8_t *)__p, 0x1Cu);
      if (SHIBYTE(v604.mFramesPerPacket) < 0)
        operator delete(*(void **)&v604.mSampleRate);
    }
    goto LABEL_213;
  }
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Telemetry input bus channel-count (", 35);
  ausdk::AUScope::SafeGetElement(v562, 1u);
  v82 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v82, (uint64_t)") does not match the telemetry order set via the property (", 59);
  v83 = (_QWORD *)std::ostream::operator<<();
  v84 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v83, (uint64_t)" elements).", 11);
  std::ios_base::getloc((const std::ios_base *)((char *)v84 + *(_QWORD *)(*v84 - 24)));
  v85 = std::locale::use_facet((const std::locale *)&v604, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v85->__vftable[2].~facet_0)(v85, 10);
  std::locale::~locale((std::locale *)&v604);
  std::ostream::put();
  std::ostream::flush();
  v86 = (NSObject **)spp3Subsystem();
  if (v86)
  {
    v58 = *v86;
    if (!*v86)
      goto LABEL_191;
  }
  else
  {
    v58 = MEMORY[0x1E0C81028];
  }
  if (os_log_type_enabled(v58, OS_LOG_TYPE_ERROR))
  {
    std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)&__p[0].__r_.__value_.__l.__size_, inPropertyData);
    if (inPropertyData[23] >= 0)
      v117 = inPropertyData;
    else
      v117 = *(_BYTE **)inPropertyData;
    LODWORD(v604.mSampleRate) = 136315650;
    *(_QWORD *)((char *)&v604.mSampleRate + 4) = "AUSpeakerProtectionV3.cpp";
    LOWORD(v604.mFormatFlags) = 1024;
    *(AudioFormatFlags *)((char *)&v604.mFormatFlags + 2) = 478;
    HIWORD(v604.mBytesPerPacket) = 2080;
    *(_QWORD *)&v604.mFramesPerPacket = v117;
LABEL_189:
    _os_log_impl(&dword_1B5ED0000, v58, OS_LOG_TYPE_ERROR, "%25s:%-5d %s", (uint8_t *)&v604, 0x1Cu);
    if ((inPropertyData[23] & 0x80000000) != 0)
      operator delete(*(void **)inPropertyData);
  }
LABEL_191:
  __p[0].__r_.__value_.__r.__words[0] = *MEMORY[0x1E0DE4F60];
  *(std::string::size_type *)((char *)__p[0].__r_.__value_.__r.__words
                            + *(_QWORD *)(__p[0].__r_.__value_.__r.__words[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60]
                                                                                                 + 24);
  __p[0].__r_.__value_.__l.__size_ = MEMORY[0x1E0DE4FB8] + 16;
  if (SHIBYTE(v598) < 0)
    operator delete(v596);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x1BCC95BE4](&v601);
  v28 = 4294956421;
LABEL_962:
  if (SHIBYTE(v572) < 0)
    operator delete(v571[0]);
  if (SHIBYTE(v573.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v573.__r_.__value_.__l.__data_);
  *(_QWORD *)v584 = *MEMORY[0x1E0DE4F50];
  v553 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 72);
  *(_QWORD *)&v584[*(_QWORD *)(*(_QWORD *)v584 - 24)] = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 64);
  *(_QWORD *)&v586[2] = v553;
  v587[0] = MEMORY[0x1E0DE4FB8] + 16;
  if (v588 < 0)
    operator delete((void *)v587[8]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x1BCC95BE4](&v589);
  if (v575 < 0)
    operator delete(v574[0]);
  return v28;
}

void sub_1B6408774(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,void **a21,void *a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void **a27,uint64_t a28,dispatch_object_t **a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,void *a35,uint64_t a36,uint64_t a37,void *a38,uint64_t a39,uint64_t a40,void *a41,uint64_t a42,uint64_t a43,uint64_t a44,void *__p,uint64_t a46,int a47,__int16 a48,char a49,char a50,uint64_t a51,void *a52,uint64_t a53,int a54,__int16 a55,char a56,char a57,void *a58,uint64_t a59,int a60,__int16 a61,char a62,char a63)
{
  uint64_t v63;
  uint64_t v64;

  std::unique_ptr<clsp::CLSP_Log>::reset[abi:ne180100](a29, 0);
  std::shared_ptr<vp::services::Telephony_Utility>::~shared_ptr[abi:ne180100](v63);
  if (*(_QWORD *)(v64 + 448) && a19 != *a27)
    operator delete(*a27);
  boost::container::vector<cpms::controllers::Power<float,cpms::smoothers::Exponential,clsp::AttackRelease>::GainGroup,boost::container::small_vector_allocator<cpms::controllers::Power<float,cpms::smoothers::Exponential,clsp::AttackRelease>::GainGroup,boost::container::new_allocator<void>,void>,void>::~vector(a20);
  if (*(_QWORD *)(v64 + 192) && a22 != *a21)
    operator delete(*a21);
  boost::container::vector<cpms::TimeScale<float>,boost::container::small_vector_allocator<cpms::TimeScale<float>,boost::container::new_allocator<void>,void>,void>::~vector(a23);
  MEMORY[0x1BCC95CEC](v64, 0x10A0C4052718BC5);
  if (a50 < 0)
    operator delete(__p);
  if (a57 < 0)
    operator delete(a52);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&STACK[0x230]);
  if (a63 < 0)
    operator delete(a58);
  _Unwind_Resume(a1);
}

OpaqueExtAudioFile *AUSpeakerProtectionV3::Cleanup(AUSpeakerProtectionV3 *this)
{
  uint64_t v2;
  NSObject *v3;
  uint64_t v4;
  uint64_t v5;
  __int128 *v6;
  __int128 v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  uint64_t v11;
  int v13;
  const char *v14;
  __int16 v15;
  int v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v2 = spp3Subsystem();
  if (v2)
  {
    if ((*(_BYTE *)(v2 + 8) & 1) != 0)
    {
      v3 = *(NSObject **)v2;
      if (*(_QWORD *)v2)
      {
        if (os_log_type_enabled(*(os_log_t *)v2, OS_LOG_TYPE_DEBUG))
        {
          v13 = 136315394;
          v14 = "AUSpeakerProtectionV3.cpp";
          v15 = 1024;
          v16 = 1114;
          _os_log_impl(&dword_1B5ED0000, v3, OS_LOG_TYPE_DEBUG, "%25s:%-5d AUSpeakerProtectionV3::Cleanup", (uint8_t *)&v13, 0x12u);
        }
      }
    }
  }
  v4 = *((_QWORD *)this + 106);
  v5 = *((_QWORD *)this + 105);
  if (v4 != v5)
  {
    do
    {
      v6 = (__int128 *)(v5 + 16);
      if (v5 + 16 != v4)
      {
        do
        {
          v7 = *v6;
          *(_QWORD *)v6 = 0;
          *((_QWORD *)v6 + 1) = 0;
          v8 = *(std::__shared_weak_count **)(v5 + 8);
          *(_OWORD *)v5 = v7;
          if (v8)
          {
            p_shared_owners = (unint64_t *)&v8->__shared_owners_;
            do
              v10 = __ldaxr(p_shared_owners);
            while (__stlxr(v10 - 1, p_shared_owners));
            if (!v10)
            {
              ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
              std::__shared_weak_count::__release_weak(v8);
            }
          }
          ++v6;
          v5 += 16;
        }
        while (v6 != (__int128 *)v4);
        v4 = *((_QWORD *)this + 106);
      }
      v11 = v5;
      while (v4 != v5)
      {
        v4 -= 16;
        std::shared_ptr<vp::services::Telephony_Utility>::~shared_ptr[abi:ne180100](v4);
      }
      *((_QWORD *)this + 106) = v5;
      v5 = *((_QWORD *)this + 105);
      v4 = v11;
    }
    while (v11 != v5);
  }
  *((_QWORD *)this + 150) = *((_QWORD *)this + 149);
  *((_QWORD *)this + 153) = *((_QWORD *)this + 152);
  CAExtAudioFile::Close((AUSpeakerProtectionV3 *)((char *)this + 1088));
  CAExtAudioFile::Close((AUSpeakerProtectionV3 *)((char *)this + 1104));
  return CAExtAudioFile::Close((AUSpeakerProtectionV3 *)((char *)this + 1120));
}

uint64_t AUSpeakerProtectionV3::Reset(AUSpeakerProtectionV3 *this)
{
  uint64_t v2;
  NSObject *v3;
  clsp::CLSPKernel_v5 **v4;
  clsp::CLSPKernel_v5 **v5;
  clsp::CLSPKernel_v5 *v6;
  clsp::CLSP_Log ***v7;
  clsp::CLSP_Log ***i;
  uint64_t v9;
  NSObject *v10;
  clsp::CLSP_Log **v11;
  clsp::CLSP_Log *v12;
  clsp::CLSP_Log *v13;
  clsp::CLSP_Log *v14;
  clsp::CLSP_Log *v15;
  clsp::CLSP_Log *v16;
  clsp::CLSP_Log *v17;
  clsp::CLSP_Log *v18;
  clsp::CLSP_Log *v19;
  clsp::CLSP_Log *v20;
  clsp::CLSP_Log *v21;
  clsp::CLSP_Log *v22;
  clsp::CLSP_Log *v23;
  uint8_t buf[4];
  const char *v26;
  __int16 v27;
  int v28;
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  v2 = spp3Subsystem();
  if (v2)
  {
    if ((*(_BYTE *)(v2 + 8) & 1) != 0)
    {
      v3 = *(NSObject **)v2;
      if (*(_QWORD *)v2)
      {
        if (os_log_type_enabled(*(os_log_t *)v2, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)buf = 136315394;
          v26 = "AUSpeakerProtectionV3.cpp";
          v27 = 1024;
          v28 = 1131;
          _os_log_impl(&dword_1B5ED0000, v3, OS_LOG_TYPE_DEBUG, "%25s:%-5d AUSpeakerProtectionV3::Reset", buf, 0x12u);
        }
      }
    }
  }
  v4 = (clsp::CLSPKernel_v5 **)*((_QWORD *)this + 105);
  v5 = (clsp::CLSPKernel_v5 **)*((_QWORD *)this + 106);
  while (v4 != v5)
  {
    v6 = *v4;
    v4 += 2;
    clsp::CLSPKernel_v5::Reset(v6);
  }
  SimpleMeters::Reset((uint64_t)this + 1192);
  v7 = (clsp::CLSP_Log ***)*((_QWORD *)this + 142);
  for (i = (clsp::CLSP_Log ***)*((_QWORD *)this + 143); v7 != i; v7 += 2)
  {
    v9 = spp3Subsystem();
    if (v9)
    {
      if ((*(_BYTE *)(v9 + 8) & 1) != 0)
      {
        v10 = *(NSObject **)v9;
        if (*(_QWORD *)v9)
        {
          if (os_log_type_enabled(*(os_log_t *)v9, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)buf = 136315394;
            v26 = "AUSpeakerProtectionV3.cpp";
            v27 = 1024;
            v28 = 1175;
            _os_log_impl(&dword_1B5ED0000, v10, OS_LOG_TYPE_DEBUG, "%25s:%-5d Flushing a log.", buf, 0x12u);
          }
        }
      }
    }
    v11 = *v7;
    v12 = **v7;
    if (v12)
      clsp::CLSP_Log::FlushLog(v12);
    v13 = v11[2];
    if (v13)
      clsp::CLSP_Log::FlushLog(v13);
    v14 = v11[4];
    if (v14)
      clsp::CLSP_Log::FlushLog(v14);
    v15 = v11[6];
    if (v15)
      clsp::CLSP_Log::FlushLog(v15);
    v16 = v11[8];
    if (v16)
      clsp::CLSP_Log::FlushLog(v16);
    v17 = v11[10];
    if (v17)
      clsp::CLSP_Log::FlushLog(v17);
    v18 = v11[12];
    if (v18)
      clsp::CLSP_Log::FlushLog(v18);
    v19 = v11[14];
    if (v19)
      clsp::CLSP_Log::FlushLog(v19);
    v20 = v11[16];
    if (v20)
      clsp::CLSP_Log::FlushLog(v20);
    v21 = v11[18];
    if (v21)
      clsp::CLSP_Log::FlushLog(v21);
    v22 = v11[20];
    if (v22)
      clsp::CLSP_Log::FlushLog(v22);
    v23 = v11[22];
    if (v23)
      clsp::CLSP_Log::FlushLog(v23);
  }
  return 0;
}

uint64_t AUSpeakerProtectionV3::GetPropertyInfo(AUSpeakerProtectionV3 *this, int a2, unsigned int a3, unsigned int a4, unsigned int *a5, BOOL *a6)
{
  uint64_t v7;
  BOOL v8;
  unsigned int v9;
  uint64_t result;
  uint64_t v11;

  if (a2 == 3007)
  {
    v8 = 1;
    v9 = 4;
    goto LABEL_12;
  }
  if (a2 == 3099)
  {
    if (a3 > 1)
      v7 = 0;
    else
      v7 = (uint64_t)(*((_QWORD *)this + 150) - *((_QWORD *)this + 149)) >> 7;
    if ((a3 & 0xFFFFFFFD) == 0)
      v7 += (uint64_t)(*((_QWORD *)this + 153) - *((_QWORD *)this + 152)) >> 7;
    v8 = 0;
    v9 = 16 * v7;
LABEL_12:
    result = 0;
    *a5 = v9;
LABEL_13:
    *a6 = v8;
    return result;
  }
  if (a3)
    return 4294956417;
  switch(a2)
  {
    case 64001:
    case 64003:
    case 64008:
    case 64009:
      result = 0;
      *a6 = 1;
      LODWORD(v11) = 8;
      break;
    case 64002:
    case 64004:
    case 64007:
      goto LABEL_17;
    case 64005:
      *a6 = 1;
      if (!*((_BYTE *)this + 776))
        goto LABEL_23;
      v11 = ((*((_QWORD *)this + 95) - *((_QWORD *)this + 94)) >> 1) & 0xFFFFFFFCLL;
      goto LABEL_24;
    case 64006:
      *a6 = 1;
      if (*((_BYTE *)this + 584))
        LODWORD(v11) = 4 * *((_DWORD *)this + 142);
      else
LABEL_23:
        LODWORD(v11) = 0;
LABEL_24:
      result = 0;
      break;
    case 64010:
      result = 0;
      *a5 = (*((_DWORD *)this + 336) - *((_DWORD *)this + 334)) & 0xFFFFFFF8;
      v8 = 1;
      goto LABEL_13;
    default:
      if (a2 != 21)
        return 4294956417;
LABEL_17:
      result = 0;
      *a6 = 1;
      LODWORD(v11) = 4;
      break;
  }
  *a5 = v11;
  return result;
}

uint64_t AUSpeakerProtectionV3::GetProperty(AUSpeakerProtectionV3 *this, int a2, unsigned int a3, unsigned int a4, CFArrayRef *a5, int *a6)
{
  CFArrayRef *v6;
  unsigned int v10;
  uint64_t result;
  CFArrayRef SpeakerCalibrationDictionary;
  int v13;
  int *v14;
  int *v15;
  int v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  _QWORD *v20;
  unint64_t v21;
  int v22;
  int v23;
  _QWORD *v24;
  const __CFArray *v25;
  const __CFArray *v26;
  unsigned int v27;

  v6 = a5;
  v27 = 0;
  if (SimpleMeters::HandleGetProperty((AUSpeakerProtectionV3 *)((char *)this + 1192), a2, a3, a5, &v27, a6))return v27;
  result = 4294956417;
  if (!a3)
  {
    switch(a2)
    {
      case 64001:
      case 64009:
        SpeakerCalibrationDictionary = AUSpeakerProtectionV3::CreateSpeakerCalibrationDictionary(*((int ***)this + 87), *((int ***)this + 88));
        result = 0;
        *v6 = SpeakerCalibrationDictionary;
        return result;
      case 64002:
        result = 0;
        v13 = *((unsigned __int8 *)this + 532);
        goto LABEL_37;
      case 64003:
        return result;
      case 64004:
        v13 = *((unsigned __int8 *)this + 533);
        if (*((_BYTE *)this + 533))
          v13 = *((unsigned __int8 *)this + 529);
        goto LABEL_12;
      case 64005:
        if (!*((_BYTE *)this + 776))
          return 0;
        v14 = (int *)*((_QWORD *)this + 94);
        v15 = (int *)*((_QWORD *)this + 95);
        if (v14 == v15)
          return 0;
        break;
      case 64006:
        if (!*((_BYTE *)this + 584))
          return 0;
        v20 = (_QWORD *)*((_QWORD *)this + 70);
        v21 = *((_QWORD *)this + 71);
        v22 = v21 & 0x3F;
        if (v21 <= 0x3F && (v21 & 0x3F) == 0)
          return 0;
        v23 = 0;
        v24 = &v20[v21 >> 6];
        while (1)
        {
          *(_DWORD *)v6 = (*v20 >> v23) & 1;
          v6 = (CFArrayRef *)((char *)v6 + 4);
          v20 += v23 == 63;
          if (v23 == 63)
            v23 = 0;
          else
            ++v23;
          if (v23 == v22)
          {
            result = 0;
            if (v20 == v24)
              break;
          }
        }
        return result;
      case 64007:
        result = 0;
        v13 = *((_DWORD *)this + 196);
        goto LABEL_37;
      case 64008:
        AUSpeakerProtectionV3::GetPowerBudgetProperty(&v26, (uint64_t)this);
        v25 = v26;
        v26 = 0;
        *v6 = v25;
        applesauce::CF::DictionaryRef::~DictionaryRef((const void **)&v26);
        return 0;
      case 64010:
        memcpy(v6, *((const void **)this + 167), *((_QWORD *)this + 168) - *((_QWORD *)this + 167));
        return 0;
      default:
        if (a2 == 21)
        {
          v13 = (*(uint64_t (**)(AUSpeakerProtectionV3 *))(*(_QWORD *)this + 576))(this);
LABEL_12:
          result = 0;
LABEL_37:
          *(_DWORD *)v6 = v13;
        }
        return result;
    }
    do
    {
      v16 = *v14;
      if (*v14 == 2)
      {
        v18 = v14[1];
        if (v18 >= 8)
          goto LABEL_41;
        v10 = v18 + 1934640176;
      }
      else if (v16 == 1)
      {
        v19 = v14[1];
        if (v19 >= 8)
LABEL_41:
          __cxa_rethrow();
        v10 = v19 + 1936738608;
      }
      else if (!v16)
      {
        v17 = v14[1];
        if (v17 >= 8)
          goto LABEL_41;
        v10 = v17 + 1936741936;
      }
      result = 0;
      *(_DWORD *)v6 = v10;
      v6 = (CFArrayRef *)((char *)v6 + 4);
      v14 += 2;
    }
    while (v14 != v15);
  }
  return result;
}

uint64_t AUSpeakerProtectionV3::SetProperty(AUSpeakerProtectionV3 *this, int a2, int a3, unsigned int a4, int *a5, void *a6, int *a7)
{
  unsigned int v7;
  uint64_t v12;
  NSObject **v14;
  NSObject *v15;
  int v16;
  NSObject **v17;
  NSObject *v18;
  uint64_t *v19;
  NSObject **v20;
  NSObject *v21;
  int v22;
  NSObject **v23;
  NSObject *v24;
  uint64_t *v25;
  int v26;
  NSObject **v27;
  NSObject *v28;
  NSObject **v29;
  NSObject *v30;
  void *v31;
  void *v32;
  int v33;
  NSObject **v34;
  NSObject *v35;
  const char *v36;
  NSObject **v37;
  uint64_t v38;
  std::string *v39;
  const char *v40;
  std::string *v41;
  int v42;
  const char *v43;
  const char *v44;
  const char *v45;
  int v46;
  const char *v47;
  int v48;
  NSObject **v49;
  NSObject *v50;
  const char *v51;
  const char *v52;
  unsigned int i;
  uint64_t v54;
  uint64_t v55;
  const void *v56;
  std::string v57;
  unsigned int v58;
  uint64_t v59;
  uint64_t v60;
  _BYTE __p[30];
  const char *v62;
  uint64_t v63;

  v7 = a6;
  v63 = *MEMORY[0x1E0C80C00];
  v58 = 0;
  if (SimpleMeters::HandleSetProperty((AUSpeakerProtectionV3 *)((char *)this + 1192), a2, a3, a5, a6, (int *)&v58, a7))
    return v58;
  if (a3)
    return 4294956417;
  switch(a2)
  {
    case 64001:
      if (!*((_BYTE *)this + 1328))
        goto LABEL_74;
      v14 = (NSObject **)spp3Subsystem();
      if (v14)
      {
        v15 = *v14;
        if (!*v14)
          goto LABEL_74;
      }
      else
      {
        v15 = MEMORY[0x1E0C81028];
      }
      if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)__p = 136315394;
        *(_QWORD *)&__p[4] = "AUSpeakerProtectionV3.cpp";
        *(_WORD *)&__p[12] = 1024;
        *(_DWORD *)&__p[14] = 2967;
        _os_log_impl(&dword_1B5ED0000, v15, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Set SpeakerCalibration property: Applying calibration data on top of SpTS. Not as intended.", __p, 0x12u);
      }
LABEL_74:
      v12 = AUSpeakerProtectionV3::InterpretSpeakerCalibration(this, (unsigned __int16 *)a5, v7);
      v34 = (NSObject **)spp3Subsystem();
      if (v34)
      {
        v35 = *v34;
        if (!*v34)
          return v12;
      }
      else
      {
        v35 = MEMORY[0x1E0C81028];
      }
      if (os_log_type_enabled(v35, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)__p = 136315394;
        *(_QWORD *)&__p[4] = "AUSpeakerProtectionV3.cpp";
        *(_WORD *)&__p[12] = 1024;
        *(_DWORD *)&__p[14] = 2970;
        v36 = "%25s:%-5d Set TransducerCalibration property";
        goto LABEL_108;
      }
      return v12;
    case 64002:
      if (v7 < 4)
        return 4294956445;
      v22 = *a5;
      if ((v22 != 0) == (*((_BYTE *)this + 532) != 0))
        return 0;
      v23 = (NSObject **)spp3Subsystem();
      if (v23)
      {
        v24 = *v23;
        if (!*v23)
          goto LABEL_127;
      }
      else
      {
        v24 = MEMORY[0x1E0C81028];
      }
      if (os_log_type_enabled(v24, OS_LOG_TYPE_DEBUG))
      {
        v45 = "on";
        v46 = *((unsigned __int8 *)this + 532);
        *(_QWORD *)&__p[4] = "AUSpeakerProtectionV3.cpp";
        *(_WORD *)&__p[12] = 1024;
        *(_DWORD *)&__p[14] = 2993;
        if (v46)
          v47 = "on";
        else
          v47 = "off";
        *(_DWORD *)__p = 136315906;
        if (!v22)
          v45 = "off";
        *(_WORD *)&__p[18] = 2080;
        *(_QWORD *)&__p[20] = v47;
        *(_WORD *)&__p[28] = 2080;
        v62 = v45;
        _os_log_impl(&dword_1B5ED0000, v24, OS_LOG_TYPE_DEBUG, "%25s:%-5d AUSpeakerProtectionV3::SetProperty - VP Mode %s->%s\n", __p, 0x26u);
      }
LABEL_127:
      v12 = 0;
      *((_BYTE *)this + 532) = v22 != 0;
      return v12;
    case 64003:
      CACFDictionary::operator=((uint64_t)this + 656, *(const void **)a5);
      return AUSpeakerProtectionV3::InitParamsFromPlist(this, (AUSpeakerProtectionV3 *)((char *)this + 656));
    case 64004:
      v57.__r_.__value_.__s.__data_[0] = 0;
      CACFPreferencesGetAppBooleanValue(CFSTR("clsp_enable_closed_loop"), CFSTR("com.apple.coreaudio"), (BOOL *)&v57);
      if (!v57.__r_.__value_.__s.__data_[0])
      {
        if (v7 < 4)
          return 4294956445;
        v33 = *a5;
        *((_BYTE *)this + 1329) = v33 != 0;
        if (*((_BYTE *)this + 533))
        {
          if ((v33 != 0) == (*((_BYTE *)this + 529) != 0))
            return 0;
        }
        else if (!v33)
        {
          return 0;
        }
        v49 = (NSObject **)spp3Subsystem();
        if (v49)
        {
          v50 = *v49;
          if (!*v49)
          {
LABEL_146:
            for (i = 0; ; ++i)
            {
              v54 = *((_QWORD *)this + 104);
              if (v54)
                LODWORD(v55) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v54 + 24))(v54);
              else
                v55 = (*((_QWORD *)this + 102) - *((_QWORD *)this + 101)) >> 3;
              if (i >= v55)
                break;
              AUSpeakerProtectionV3::SetClosedLoopEnabled(this, i, v33 != 0);
            }
            return 0;
          }
        }
        else
        {
          v50 = MEMORY[0x1E0C81028];
        }
        if (os_log_type_enabled(v50, OS_LOG_TYPE_DEBUG))
        {
          v51 = "off";
          if (*((_BYTE *)this + 533))
          {
            if (*((_BYTE *)this + 529))
              v52 = "on";
            else
              v52 = "off";
          }
          else
          {
            v52 = "off";
          }
          if (v33)
            v51 = "on";
          *(_DWORD *)__p = 136315906;
          *(_QWORD *)&__p[4] = "AUSpeakerProtectionV3.cpp";
          *(_WORD *)&__p[12] = 1024;
          *(_DWORD *)&__p[14] = 3026;
          *(_WORD *)&__p[18] = 2080;
          *(_QWORD *)&__p[20] = v52;
          *(_WORD *)&__p[28] = 2080;
          v62 = v51;
          _os_log_impl(&dword_1B5ED0000, v50, OS_LOG_TYPE_DEBUG, "%25s:%-5d AUSpeakerProtectionV3::SetProperty - EnableClosedLoop %s->%s\n", __p, 0x26u);
        }
        goto LABEL_146;
      }
      v20 = (NSObject **)spp3Subsystem();
      if (v20)
      {
        v21 = *v20;
        if (!*v20)
          return 0;
      }
      else
      {
        v21 = MEMORY[0x1E0C81028];
      }
      if (os_log_type_enabled(v21, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)__p = 136315394;
        *(_QWORD *)&__p[4] = "AUSpeakerProtectionV3.cpp";
        *(_WORD *)&__p[12] = 1024;
        *(_DWORD *)&__p[14] = 3011;
        _os_log_impl(&dword_1B5ED0000, v21, OS_LOG_TYPE_DEBUG, "%25s:%-5d clsp_enable_closed_loop default exists. Ignoring set property for EnableClosedLoop", __p, 0x12u);
      }
      return 0;
    case 64005:
      if (!a5 || v7 < 4)
      {
        if (!*((_BYTE *)this + 776))
          return 0;
        v31 = (void *)*((_QWORD *)this + 94);
        if (v31)
        {
          *((_QWORD *)this + 95) = v31;
          operator delete(v31);
        }
        v12 = 0;
        *((_BYTE *)this + 776) = 0;
        return v12;
      }
      memset(&v57, 0, sizeof(v57));
      std::vector<clsp::telemetry::Item>::__init_with_size[abi:ne180100]<unsigned int const*,unsigned int const*>(&v57, a5, &a5[v7 >> 2], v7 >> 2);
      *(std::string *)__p = v57;
      __p[24] = 1;
      std::__optional_storage_base<std::vector<clsp::telemetry::Item>,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::vector<clsp::telemetry::Item>,false>>((uint64_t)this + 752, (__n128 *)__p);
      if (__p[24] && *(_QWORD *)__p)
        operator delete(*(void **)__p);
      v19 = (uint64_t *)spp3Subsystem();
      if (v19)
      {
        v12 = *v19;
        if (!*v19)
          return v12;
      }
      else
      {
        v12 = MEMORY[0x1E0C81028];
      }
      if (os_log_type_enabled((os_log_t)v12, OS_LOG_TYPE_DEBUG))
      {
        v38 = *((_QWORD *)this + 94);
        v59 = *((_QWORD *)this + 95);
        v60 = v38;
        clsp::telemetry::utils::PrintTelemetryVector_impl<std::__wrap_iter<clsp::telemetry::Item const*>,std::__wrap_iter<clsp::telemetry::Item const*>>(&v57, (uint64_t)&v60, &v59);
        if ((v57.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v39 = &v57;
        else
          v39 = (std::string *)v57.__r_.__value_.__r.__words[0];
        *(_DWORD *)__p = 136315650;
        *(_QWORD *)&__p[4] = "AUSpeakerProtectionV3.cpp";
        *(_WORD *)&__p[12] = 1024;
        *(_DWORD *)&__p[14] = 3042;
        *(_WORD *)&__p[18] = 2080;
        *(_QWORD *)&__p[20] = v39;
        v40 = "%25s:%-5d AUSpeakerProtectionV3::SetProperty - Telemetry data order. Set as: [ %s ]\n";
        goto LABEL_103;
      }
      return 0;
    case 64006:
      if (a5 && v7 >= 4)
      {
        memset(&v57, 0, sizeof(v57));
        std::vector<BOOL>::__init_with_size[abi:ne180100]<unsigned int const*,unsigned int const*>(&v57, a5, &a5[v7 >> 2], v7 >> 2);
        *(std::string *)__p = v57;
        memset(&v57, 0, sizeof(v57));
        __p[24] = 1;
        std::__optional_storage_base<std::vector<BOOL>,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::vector<BOOL>,false>>((uint64_t)this + 560, (uint64_t)__p);
        if (__p[24] && *(_QWORD *)__p)
          operator delete(*(void **)__p);
        if (v57.__r_.__value_.__r.__words[0])
          operator delete(v57.__r_.__value_.__l.__data_);
        v25 = (uint64_t *)spp3Subsystem();
        if (v25)
        {
          v12 = *v25;
          if (!*v25)
            return v12;
        }
        else
        {
          v12 = MEMORY[0x1E0C81028];
        }
        if (os_log_type_enabled((os_log_t)v12, OS_LOG_TYPE_DEBUG))
        {
          clsp::telemetry::utils::PrintBoolVector(&v57, *((_QWORD *)this + 70), *((_QWORD *)this + 71));
          if ((v57.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v41 = &v57;
          else
            v41 = (std::string *)v57.__r_.__value_.__r.__words[0];
          *(_DWORD *)__p = 136315650;
          *(_QWORD *)&__p[4] = "AUSpeakerProtectionV3.cpp";
          *(_WORD *)&__p[12] = 1024;
          *(_DWORD *)&__p[14] = 3062;
          *(_WORD *)&__p[18] = 2080;
          *(_QWORD *)&__p[20] = v41;
          v40 = "%25s:%-5d AUSpeakerProtectionV3::SetProperty - IgnoreTelemetry. Set as: [ %s ].\n";
LABEL_103:
          _os_log_impl(&dword_1B5ED0000, (os_log_t)v12, OS_LOG_TYPE_DEBUG, v40, __p, 0x1Cu);
          if (SHIBYTE(v57.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v57.__r_.__value_.__l.__data_);
        }
        return 0;
      }
      if (!*((_BYTE *)this + 584))
        return 0;
      v32 = (void *)*((_QWORD *)this + 70);
      if (v32)
        operator delete(v32);
      v12 = 0;
      *((_BYTE *)this + 584) = 0;
      return v12;
    case 64007:
      if (v7 < 4)
        return 4294956445;
      v26 = *a5;
      if (v26 == *((_DWORD *)this + 196))
        return 0;
      v27 = (NSObject **)spp3Subsystem();
      if (v27)
      {
        v28 = *v27;
        if (!*v27)
          goto LABEL_131;
      }
      else
      {
        v28 = MEMORY[0x1E0C81028];
      }
      if (os_log_type_enabled(v28, OS_LOG_TYPE_DEBUG))
      {
        v48 = *((_DWORD *)this + 196);
        *(_DWORD *)__p = 136315906;
        *(_QWORD *)&__p[4] = "AUSpeakerProtectionV3.cpp";
        *(_WORD *)&__p[12] = 1024;
        *(_DWORD *)&__p[14] = 3084;
        *(_WORD *)&__p[18] = 1024;
        *(_DWORD *)&__p[20] = v48;
        *(_WORD *)&__p[24] = 1024;
        *(_DWORD *)&__p[26] = v26;
        _os_log_impl(&dword_1B5ED0000, v28, OS_LOG_TYPE_DEBUG, "%25s:%-5d AUSpeakerProtectionV3::SetProperty - Thermal State Override %u->%u\n", __p, 0x1Eu);
      }
LABEL_131:
      v12 = 0;
      *((_DWORD *)this + 196) = v26;
      return v12;
    case 64008:
      v12 = 4294956445;
      if (!a5 || v7 != 8)
        return v12;
      applesauce::CF::DictionaryRef::from_get((applesauce::CF::DictionaryRef *)&v56, *(CFTypeRef *)a5);
      AUSpeakerProtectionV3::SetPowerBudgetProperty((uint64_t)this, (const __CFDictionary **)&v56);
      applesauce::CF::DictionaryRef::~DictionaryRef(&v56);
      return 0;
    case 64009:
      if (!*((_BYTE *)this + 1328))
        goto LABEL_83;
      v29 = (NSObject **)spp3Subsystem();
      if (v29)
      {
        v30 = *v29;
        if (!*v29)
          goto LABEL_83;
      }
      else
      {
        v30 = MEMORY[0x1E0C81028];
      }
      if (os_log_type_enabled(v30, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)__p = 136315394;
        *(_QWORD *)&__p[4] = "AUSpeakerProtectionV3.cpp";
        *(_WORD *)&__p[12] = 1024;
        *(_DWORD *)&__p[14] = 2976;
        _os_log_impl(&dword_1B5ED0000, v30, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Set SpeakerCalibration property: Applying calibration data on top of SpTS. Not as intended.", __p, 0x12u);
      }
LABEL_83:
      if (v7 < 8)
        return 4294956445;
      v12 = AUSpeakerProtectionV3::InterpretSpeakerCalibration(this, *(CFTypeRef *)a5);
      v37 = (NSObject **)spp3Subsystem();
      if (v37)
      {
        v35 = *v37;
        if (!*v37)
          return v12;
      }
      else
      {
        v35 = MEMORY[0x1E0C81028];
      }
      if (os_log_type_enabled(v35, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)__p = 136315394;
        *(_QWORD *)&__p[4] = "AUSpeakerProtectionV3.cpp";
        *(_WORD *)&__p[12] = 1024;
        *(_DWORD *)&__p[14] = 2982;
        v36 = "%25s:%-5d Set TransducerCalibrationCF property";
LABEL_108:
        _os_log_impl(&dword_1B5ED0000, v35, OS_LOG_TYPE_DEBUG, v36, __p, 0x12u);
      }
      return v12;
    case 64010:
      if (!a5)
        return 4294956445;
      std::vector<long long>::__assign_with_size[abi:ne180100]<long long const*,long long const*>((char *)this + 1336, (char *)a5, (uint64_t)&a5[2 * (v7 >> 3)], v7 >> 3);
      return 0;
    default:
      if (a2 != 21)
        return 4294956417;
      if (v7 < 4)
        return 4294956445;
      v16 = *a5;
      if ((v16 != 0) == (*(unsigned int (**)(AUSpeakerProtectionV3 *))(*(_QWORD *)this + 576))(this))
        return 0;
      v17 = (NSObject **)spp3Subsystem();
      if (v17)
      {
        v18 = *v17;
        if (!*v17)
          goto LABEL_117;
      }
      else
      {
        v18 = MEMORY[0x1E0C81028];
      }
      if (os_log_type_enabled(v18, OS_LOG_TYPE_DEBUG))
      {
        v42 = (*(uint64_t (**)(AUSpeakerProtectionV3 *))(*(_QWORD *)this + 576))(this);
        v43 = "off";
        *(_QWORD *)&__p[4] = "AUSpeakerProtectionV3.cpp";
        *(_WORD *)&__p[12] = 1024;
        *(_DWORD *)&__p[14] = 2959;
        if (v42)
          v44 = "on";
        else
          v44 = "off";
        *(_DWORD *)__p = 136315906;
        *(_QWORD *)&__p[20] = v44;
        *(_WORD *)&__p[18] = 2080;
        if (v16)
          v43 = "on";
        *(_WORD *)&__p[28] = 2080;
        v62 = v43;
        _os_log_impl(&dword_1B5ED0000, v18, OS_LOG_TYPE_DEBUG, "%25s:%-5d AUSpeakerProtectionV3::SetProperty - Bypass %s->%s\n", __p, 0x26u);
      }
LABEL_117:
      (*(void (**)(AUSpeakerProtectionV3 *, BOOL))(*(_QWORD *)this + 584))(this, v16 != 0);
      return 0;
  }
}

void sub_1B640A158(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, __int128 buf)
{
  NSObject **v17;
  NSObject *v18;

  if (!a2)
    _Unwind_Resume(exception_object);
  __cxa_begin_catch(exception_object);
  v17 = (NSObject **)spp3Subsystem();
  if (v17)
  {
    v18 = *v17;
    if (!*v17)
      goto LABEL_8;
  }
  else
  {
    v18 = MEMORY[0x1E0C81028];
  }
  if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
  {
    LODWORD(buf) = 136315394;
    *(_QWORD *)((char *)&buf + 4) = "AUSpeakerProtectionV3.cpp";
    WORD6(buf) = 1024;
    *(_DWORD *)((char *)&buf + 14) = 3064;
    _os_log_impl(&dword_1B5ED0000, v18, OS_LOG_TYPE_ERROR, "%25s:%-5d AUSpeakerProtectionV3::SetProperty - IgnoreTelemetry. Could not be fully parsed (invalid data?).\n", (uint8_t *)&buf, 0x12u);
  }
LABEL_8:
  __cxa_end_catch();
  JUMPOUT(0x1B6409C10);
}

uint64_t AUSpeakerProtectionV3::SetParameter(AUSpeakerProtectionV3 *this, unsigned int a2, int a3, uint64_t a4, float a5)
{
  NSObject **v8;
  NSObject *v9;
  NSObject **v11;
  NSObject *v12;
  uint64_t result;
  uint64_t v14;
  ausdk::AUElement *v15;
  uint64_t v16;
  ausdk::AUElement *v17;
  ausdk::AUElement **v18;
  uint64_t v19;
  uint64_t v20;
  ausdk::AUElement *v21;
  uint64_t v22;
  NSObject **v23;
  NSObject *v24;
  uint64_t v25;
  ausdk::AUElement **v26;
  int v27;
  const char *v28;
  __int16 v29;
  int v30;
  __int16 v31;
  unsigned int v32;
  __int16 v33;
  double Parameter;
  __int16 v35;
  double v36;
  uint64_t v37;

  v37 = *MEMORY[0x1E0C80C00];
  if (a3 != 4)
  {
    if (a3)
      return 4294956430;
    v8 = (NSObject **)spp3Subsystem();
    if (v8)
    {
      v9 = *v8;
      if (!*v8)
      {
LABEL_37:
        v25 = *((_QWORD *)this + 9);
        if (v25)
        {
          v21 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v25 + 32))(v25, 0);
        }
        else
        {
          v26 = (ausdk::AUElement **)*((_QWORD *)this + 6);
          if (*((ausdk::AUElement ***)this + 7) == v26)
            v21 = 0;
          else
            v21 = *v26;
        }
        goto LABEL_42;
      }
    }
    else
    {
      v9 = MEMORY[0x1E0C81028];
    }
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG))
    {
      v14 = *((_QWORD *)this + 9);
      if (v14)
      {
        v15 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v14 + 32))(v14, 0);
      }
      else
      {
        v18 = (ausdk::AUElement **)*((_QWORD *)this + 6);
        if (*((ausdk::AUElement ***)this + 7) == v18)
          v15 = 0;
        else
          v15 = *v18;
      }
      v27 = 136316162;
      v28 = "AUSpeakerProtectionV3.cpp";
      v29 = 1024;
      v30 = 2382;
      v31 = 1024;
      v32 = a2;
      v33 = 2048;
      Parameter = ausdk::AUElement::GetParameter(v15, a2);
      v35 = 2048;
      v36 = a5;
      _os_log_impl(&dword_1B5ED0000, v9, OS_LOG_TYPE_DEBUG, "%25s:%-5d AUSpeakerProtectionV3::SetParameter(%d): %f -> %f\n", (uint8_t *)&v27, 0x2Cu);
    }
    goto LABEL_37;
  }
  v11 = (NSObject **)spp3Subsystem();
  if (v11)
  {
    v12 = *v11;
    if (!*v11)
      goto LABEL_24;
  }
  else
  {
    v12 = MEMORY[0x1E0C81028];
  }
  if (os_log_type_enabled(v12, OS_LOG_TYPE_DEBUG))
  {
    v16 = *((_QWORD *)this + 104);
    if (v16)
    {
      v17 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v16 + 32))(v16, a4);
    }
    else
    {
      v19 = *((_QWORD *)this + 101);
      if (a4 >= (unint64_t)((*((_QWORD *)this + 102) - v19) >> 3))
        v17 = 0;
      else
        v17 = *(ausdk::AUElement **)(v19 + 8 * a4);
    }
    v27 = 136316162;
    v28 = "AUSpeakerProtectionV3.cpp";
    v29 = 1024;
    v30 = 2387;
    v31 = 1024;
    v32 = a2;
    v33 = 2048;
    Parameter = ausdk::AUElement::GetParameter(v17, a2);
    v35 = 2048;
    v36 = a5;
    _os_log_impl(&dword_1B5ED0000, v12, OS_LOG_TYPE_DEBUG, "%25s:%-5d Part AUSpeakerProtectionV3::SetParameter(%d): %f -> %f\n", (uint8_t *)&v27, 0x2Cu);
  }
LABEL_24:
  v20 = *((_QWORD *)this + 104);
  if (!v20)
  {
    v22 = *((_QWORD *)this + 101);
    if (a4 < (unint64_t)((*((_QWORD *)this + 102) - v22) >> 3))
    {
      v21 = *(ausdk::AUElement **)(v22 + 8 * a4);
      if (v21)
        goto LABEL_42;
    }
LABEL_29:
    v23 = (NSObject **)spp3Subsystem();
    if (v23)
    {
      v24 = *v23;
      if (!*v23)
        goto LABEL_43;
    }
    else
    {
      v24 = MEMORY[0x1E0C81028];
    }
    if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR))
    {
      v27 = 136315650;
      v28 = "AUSpeakerProtectionV3.cpp";
      v29 = 1024;
      v30 = 2392;
      v31 = 1024;
      v32 = a2;
      _os_log_impl(&dword_1B5ED0000, v24, OS_LOG_TYPE_ERROR, "%25s:%-5d Part AUSpeakerProtectionV3::SetParameter(%d): partElement is null\n", (uint8_t *)&v27, 0x18u);
    }
    goto LABEL_43;
  }
  v21 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v20 + 32))(v20, a4);
  if (!v21)
    goto LABEL_29;
LABEL_42:
  ausdk::AUElement::SetParameter(v21, a2, a5, 0);
LABEL_43:
  result = 0;
  ++*((_DWORD *)this + 159);
  return result;
}

uint64_t AUSpeakerProtectionV3::CanScheduleParameters(AUSpeakerProtectionV3 *this)
{
  return 0;
}

uint64_t AUSpeakerProtectionV3::ProcessMultipleBufferLists(AUSpeakerProtectionV3 *this, unsigned int *a2, unsigned int a3, unsigned int a4, const AudioBufferList **a5, unsigned int a6, AudioBufferList **a7)
{
  OpaqueExtAudioFile *v12;
  uint64_t v13;
  OpaqueExtAudioFile *v14;
  const AudioBufferList *v15;
  uint64_t v16;
  uint64_t v17;
  float v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t message;
  caulk::concurrent::message *v25;
  char *v26;
  uint64_t v27;
  const char *v28;
  char *v29;
  char *v30;
  const char *v31;
  float v32;
  uint64_t Element;
  AudioBufferList *v34;
  unint64_t mNumberBuffers;
  unint64_t v36;
  size_t v37;
  uint64_t v38;
  const void *v39;
  void *v40;
  uint64_t v41;
  NSObject *v42;
  uint64_t v43;
  uint64_t v44;
  __int128 v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  vDSP_Stride v49;
  uint64_t v50;
  uint64_t v51;
  float *v52;
  float v53;
  const __int16 *v54;
  float *v55;
  float *v56;
  uint64_t v57;
  clsp::CLSP_Log *v58;
  clsp::CLSP_Log *v59;
  uint64_t v60;
  uint64_t v61;
  caulk::concurrent::message *v62;
  uint64_t v63;
  uint64_t v64;
  int v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  caulk::concurrent::message *v69;
  char *v70;
  uint64_t v71;
  const char *v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t v75;
  BOOL v76;
  unint64_t v77;
  uint64_t v78;
  ausdk::AUElement *v79;
  uint64_t v80;
  float Parameter;
  uint64_t v82;
  uint64_t v83;
  caulk::concurrent::message *v84;
  uint64_t v85;
  unint64_t v86;
  uint64_t v87;
  ausdk::AUElement *v88;
  uint64_t v89;
  uint64_t v90;
  ausdk::AUElement *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  unint64_t v97;
  uint64_t v98;
  uint64_t v99;
  caulk::concurrent::message *v100;
  uint64_t v101;
  uint64_t v102;
  unint64_t v103;
  uint64_t v104;
  double v105;
  char *v106;
  char *v107;
  char *v108;
  unint64_t v109;
  uint64_t v110;
  ausdk::AUElement *v111;
  uint64_t v112;
  uint64_t v113;
  ausdk::AUElement *v114;
  uint64_t v115;
  unint64_t v116;
  uint64_t v117;
  ausdk::AUElement *v118;
  uint64_t v119;
  uint64_t v120;
  ausdk::AUElement *v121;
  uint64_t v122;
  double v123;
  char *v124;
  uint64_t v125;
  uint64_t v126;
  char *v127;
  uint64_t v128;
  int v129;
  uint64_t v130;
  unint64_t v131;
  char *v132;
  unint64_t v133;
  float v134;
  uint64_t v135;
  ausdk::AUElement *v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  const float **v142;
  const float *v143;
  vDSP_Length v144;
  int v145;
  const float *v146;
  const float *v147;
  unint64_t v148;
  uint64_t v149;
  const float **v150;
  void *v151;
  char *v152;
  size_t v153;
  uint64_t v154;
  const float **v155;
  const float *v156;
  int v157;
  float v158;
  float v159;
  float v160;
  float v161;
  float v162;
  float v163;
  float v164;
  float v165;
  const float *v166;
  const float *v167;
  unint64_t v168;
  uint64_t v169;
  const float **v170;
  void *v171;
  char *v172;
  size_t v173;
  char *v174;
  char *v175;
  const float *v176;
  char *v177;
  unint64_t v178;
  vDSP_Length v179;
  const float **v180;
  void *v181;
  char *v182;
  size_t v183;
  char *v184;
  char *v185;
  const float *v186;
  char *v187;
  unint64_t v188;
  vDSP_Length v189;
  float *v190;
  const float **v191;
  void *v192;
  char *v193;
  size_t v194;
  char *v195;
  char *v196;
  clsp::CLSP_Log *v197;
  const float **v198;
  clsp::CLSP_Log *v199;
  const float *v200;
  float *v201;
  int v202;
  float *v203;
  int v204;
  char *v205;
  char *v206;
  const float *v207;
  float v208;
  float v209;
  unint64_t v210;
  float v211;
  BOOL v212;
  clsp::CLSP_Log *v213;
  clsp::CLSP_Log *v214;
  uint64_t v215;
  int v216;
  const float *v217;
  int v218;
  float *v219;
  float v220;
  float v221;
  float v222;
  float v223;
  float v224;
  float v225;
  float v226;
  float v227;
  const float **v228;
  const float **v229;
  const float *v230;
  clsp::CLSP_Log *v231;
  clsp::CLSP_Log *v232;
  clsp::CLSP_Log *v233;
  clsp::CLSP_Log *v234;
  clsp::CLSP_Log *v235;
  clsp::CLSP_Log *v236;
  clsp::CLSP_Log *v237;
  clsp::CLSP_Log *v238;
  clsp::CLSP_Log *v239;
  clsp::CLSP_Log *v240;
  clsp::CLSP_Log *v241;
  clsp::CLSP_Log *v242;
  float v243;
  clsp::CLSP_Log *v244;
  float v245;
  clsp::CLSP_Log *v246;
  clsp::CLSP_Log *v247;
  clsp::CLSP_Log *v248;
  clsp::CLSP_Log *v249;
  clsp::CLSP_Log *v250;
  clsp::CLSP_Log *v251;
  clsp::CLSP_Log *v252;
  clsp::CLSP_Log *v253;
  clsp::CLSP_Log *v254;
  float v255;
  clsp::CLSP_Log *v256;
  clsp::CLSP_Log *v257;
  clsp::CLSP_Log *v258;
  clsp::CLSP_Log *v259;
  clsp::CLSP_Log *v260;
  float v261;
  float32x2_t *v262;
  uint64_t v263;
  float32x2_t v264;
  float v265;
  float v266;
  float v267;
  float v268;
  float v269;
  float v270;
  float v271;
  float v272;
  const float *v273;
  clsp::CLSP_Log *v274;
  clsp::CLSP_Log *v275;
  clsp::CLSP_Log *v276;
  clsp::CLSP_Log *v277;
  clsp::CLSP_Log *v278;
  clsp::CLSP_Log *v279;
  clsp::CLSP_Log *v280;
  clsp::CLSP_Log *v281;
  clsp::CLSP_Log *v282;
  clsp::CLSP_Log *v283;
  clsp::CLSP_Log *v284;
  clsp::CLSP_Log *v285;
  float v286;
  clsp::CLSP_Log *v287;
  float v288;
  clsp::CLSP_Log *v289;
  clsp::CLSP_Log *v290;
  clsp::CLSP_Log *v291;
  clsp::CLSP_Log *v292;
  clsp::CLSP_Log *v293;
  clsp::CLSP_Log *v294;
  clsp::CLSP_Log *v295;
  clsp::CLSP_Log *v296;
  clsp::CLSP_Log *v297;
  float v298;
  clsp::CLSP_Log *v299;
  clsp::CLSP_Log *v300;
  float32x2_t v301;
  const float **v302;
  const float *v303;
  unsigned int v304;
  float v305;
  char *v306;
  float v307;
  float v308;
  float v309;
  float v310;
  float v311;
  float v312;
  double *v313;
  double *v314;
  _DWORD *v315;
  float *v316;
  double *v317;
  _DWORD *v318;
  float *v319;
  uint64_t v320;
  _DWORD *v321;
  double v322;
  double v323;
  double v324;
  double v325;
  float v326;
  double v327;
  double v328;
  double v329;
  float v330;
  double v331;
  double v332;
  double v333;
  float v334;
  float v335;
  unint64_t v336;
  unint64_t v337;
  char *v338;
  _BYTE *v339;
  char *v340;
  char *v341;
  _BYTE *v342;
  char *v343;
  const float *v344;
  uint64_t v345;
  uint64_t v346;
  float v347;
  float v348;
  float v349;
  float v350;
  float v351;
  float v352;
  float v353;
  uint64_t v354;
  float v355;
  uint64_t v356;
  float v357;
  uint64_t v358;
  double v359;
  double v360;
  double v361;
  double v362;
  double v363;
  _BOOL4 v364;
  BOOL v365;
  _BOOL4 v366;
  BOOL v367;
  float v368;
  double v369;
  float v370;
  BOOL v371;
  float v372;
  float v373;
  _BOOL4 v374;
  float v375;
  float v376;
  double v377;
  double v378;
  double v379;
  double v380;
  BOOL v381;
  BOOL v382;
  float v383;
  float v384;
  float v385;
  float v386;
  float v387;
  float v388;
  float v389;
  unint64_t v390;
  double *v391;
  double *v392;
  uint64_t v393;
  uint64_t v394;
  double *v395;
  uint64_t v396;
  uint64_t v397;
  double v398;
  double v399;
  double v400;
  double v401;
  double v402;
  double v403;
  double v404;
  double v405;
  double v406;
  double v407;
  double v408;
  double v409;
  float v410;
  float v411;
  unint64_t v412;
  unint64_t v413;
  char *v414;
  _BYTE *v415;
  char *v416;
  char *v417;
  _BYTE *v418;
  char *v419;
  const float *v420;
  uint64_t v421;
  uint64_t v422;
  float v423;
  float v424;
  float v425;
  float v426;
  float v427;
  float v428;
  float v429;
  float v430;
  float v431;
  float v432;
  float v433;
  float v434;
  float v435;
  uint64_t v436;
  float v437;
  uint64_t v438;
  float v439;
  uint64_t v440;
  double v441;
  double v442;
  double v443;
  double v444;
  double v445;
  _BOOL4 v446;
  BOOL v447;
  _BOOL4 v448;
  BOOL v449;
  float v450;
  float v451;
  float v452;
  double v453;
  float32x2_t v454;
  double v455;
  double v456;
  float v457;
  _BOOL4 v458;
  float v459;
  _BOOL4 v460;
  _BOOL4 v461;
  _BOOL4 v462;
  float v463;
  double v464;
  BOOL v465;
  float v466;
  float v467;
  _BOOL4 v468;
  float v469;
  float v470;
  _DWORD *v471;
  unsigned int v472;
  BOOL v473;
  float v474;
  float v475;
  BOOL v476;
  int8x8_t v477;
  int8x8_t v478;
  int8x8_t v479;
  float32x2_t v480;
  float v481;
  unsigned int v482;
  unsigned int v483;
  unsigned int v484;
  float v485;
  uint64_t v486;
  uint64_t v487;
  ausdk::AUElement *v488;
  ausdk::AUElement **v489;
  uint64_t v490;
  unint64_t v491;
  uint64_t v492;
  uint64_t v493;
  ausdk::AUElement *v494;
  ausdk::AUElement **v495;
  uint64_t v496;
  uint64_t v497;
  ausdk::AUElement *v498;
  ausdk::AUElement **v499;
  uint64_t v500;
  uint64_t v501;
  ausdk::AUElement *v502;
  ausdk::AUElement **v503;
  _BOOL8 v504;
  uint64_t v505;
  uint64_t v506;
  ausdk::AUElement *v507;
  uint64_t v508;
  uint64_t v509;
  uint64_t v510;
  ausdk::AUElement *v511;
  uint64_t v512;
  uint64_t v513;
  uint64_t v514;
  ausdk::AUElement *v515;
  ausdk::AUElement **v516;
  double v517;
  unint64_t v518;
  uint64_t *v519;
  double v520;
  double v521;
  uint64_t v522;
  NSObject *v523;
  double v524;
  uint64_t *v525;
  uint64_t v526;
  uint64_t v527;
  uint64_t v528;
  uint64_t v529;
  unint64_t v530;
  float v531;
  uint64_t v532;
  char *v533;
  uint64_t v534;
  uint64_t v535;
  uint64_t v536;
  uint64_t v537;
  uint64_t v538;
  unint64_t v539;
  float v540;
  uint64_t v541;
  char *v542;
  uint64_t v543;
  uint64_t v544;
  uint64_t i;
  uint64_t *v546;
  uint64_t *v547;
  float v548;
  uint64_t v549;
  uint64_t v550;
  uint64_t j;
  uint64_t *v552;
  uint64_t *v553;
  float v554;
  uint64_t v555;
  uint64_t v556;
  uint64_t v557;
  uint64_t v558;
  uint64_t v559;
  unint64_t v560;
  _DWORD *v561;
  char *v562;
  int v563;
  int v564;
  int v565;
  int v566;
  uint64_t v567;
  uint64_t v568;
  uint64_t v569;
  uint64_t v570;
  unint64_t v571;
  _DWORD *v572;
  char *v573;
  int v574;
  int v575;
  int v576;
  int v577;
  unint64_t v578;
  unint64_t v579;
  float v580;
  float v581;
  float v582;
  NSObject **v583;
  NSObject *v584;
  float Temperature;
  const float **v586;
  float v587;
  float v588;
  float v589;
  float v590;
  float DisplacementFilterGain;
  float *v592;
  double v593;
  double v594;
  double v595;
  double v596;
  uint64_t v597;
  ausdk::AUElement *v598;
  uint64_t v599;
  float v600;
  uint64_t v601;
  ausdk::AUElement *v602;
  uint64_t v603;
  uint64_t v604;
  ausdk::AUElement *v605;
  uint64_t v606;
  const float *v607;
  float v608;
  uint64_t v609;
  ausdk::AUElement *v610;
  uint64_t v611;
  uint64_t v612;
  ausdk::AUElement *v613;
  uint64_t v614;
  uint64_t v615;
  ausdk::AUElement *v616;
  uint64_t v617;
  const float *v618;
  float v619;
  int v620;
  float *v621;
  uint64_t v622;
  ausdk::AUElement *v623;
  uint64_t v624;
  const float *v625;
  float v626;
  int v627;
  uint64_t v628;
  ausdk::AUElement *v629;
  uint64_t v630;
  const float *v631;
  float v632;
  int v633;
  float v634;
  float v635;
  float v636;
  uint64_t v637;
  ausdk::AUElement *v638;
  uint64_t v639;
  const float *v640;
  float v641;
  int v642;
  float *v643;
  uint64_t v644;
  ausdk::AUElement *v645;
  uint64_t v646;
  float v647;
  uint64_t v648;
  ausdk::AUElement *v649;
  uint64_t v650;
  float v651;
  uint64_t v652;
  ausdk::AUElement *v653;
  uint64_t v654;
  float v655;
  uint64_t v656;
  float v657;
  clsp::CLSP_Log *v658;
  clsp::CLSP_Log *v659;
  uint64_t *v660;
  float v661;
  clsp::CLSP_Log *v662;
  clsp::CLSP_Log *v663;
  clsp::CLSP_Log *v664;
  clsp::CLSP_Log *v665;
  clsp::CLSP_Log *v666;
  clsp::CLSP_Log *v667;
  clsp::CLSP_Log *v668;
  clsp::CLSP_Log *v669;
  uint64_t v670;
  float v671;
  float v672;
  float v673;
  uint64_t v674;
  ausdk::AUElement *v675;
  ausdk::AUElement **v676;
  float **v677;
  float **v678;
  float **v679;
  float *v680;
  float **v681;
  float *v682;
  float *v683;
  unint64_t k;
  float *v685;
  char *v686;
  int v687;
  int v688;
  int v689;
  int v690;
  uint64_t v691;
  ausdk::AUElement *v692;
  ausdk::AUElement **v693;
  float v694;
  uint64_t v695;
  ausdk::AUElement *v696;
  ausdk::AUElement **v697;
  float v698;
  uint64_t v699;
  ausdk::AUElement *v700;
  ausdk::AUElement **v701;
  OpaqueExtAudioFile *v702;
  OSStatus v703;
  float **v705;
  float **v706;
  float **v707;
  float *v708;
  float **v709;
  float *v710;
  float *v711;
  unint64_t m;
  float *v713;
  char *v714;
  int v715;
  int v716;
  int v717;
  int v718;
  uint64_t v719;
  int *v720;
  uint64_t __len;
  float *__A;
  float *__Aa;
  const float **v724;
  SimpleMeters *v725;
  const float ****v726;
  float v727;
  float __B;
  _BYTE buf[44];
  __int16 v730;
  double v731;
  __int16 v732;
  double v733;
  __int16 v734;
  double v735;
  __int16 v736;
  double v737;
  __int16 v738;
  double v739;
  __int16 v740;
  double v741;
  uint64_t v742;

  v742 = *MEMORY[0x1E0C80C00];
  shouldTraceRender();
  v12 = (OpaqueExtAudioFile *)*((_QWORD *)this + 137);
  if (v12)
  {
    v13 = ExtAudioFileWriteAsync(v12, a3, *a5);
    (*(void (**)(char *, uint64_t, const char *))(*((_QWORD *)this + 136) + 16))((char *)this + 1088, v13, "ExtAudioFileWriteAsync");
  }
  if (a4 >= 2)
  {
    v14 = (OpaqueExtAudioFile *)*((_QWORD *)this + 139);
    if (v14)
    {
      v15 = a5[1];
      if (v15)
      {
        v16 = ExtAudioFileWriteAsync(v14, a3, v15);
        (*(void (**)(char *, uint64_t, const char *))(*((_QWORD *)this + 138) + 16))((char *)this + 1104, v16, "ExtAudioFileWriteAsync");
      }
    }
  }
  v17 = SimpleMeters::ProcessInputBufferList((AUSpeakerProtectionV3 *)((char *)this + 1192), a3, *a5);
  if ((_DWORD)v17)
  {
    v19 = v17;
    if (!*((_DWORD *)this + 295))
    {
      v20 = 2;
      if (!*((_BYTE *)this + 17))
        v20 = 6;
      v21 = 5;
      if (!*((_BYTE *)this + 528))
        v21 = 9;
      v22 = v20 + v21;
      v23 = _os_log_pack_size() + 88;
      message = caulk::deferred_logger::create_message(*((caulk::deferred_logger **)this + 170), v22 + v23, 16);
      if (message)
      {
        v25 = (caulk::concurrent::message *)message;
        v26 = (char *)(message + v23);
        v27 = _os_log_pack_fill();
        if (*((_BYTE *)this + 528))
          v28 = "was";
        else
          v28 = "was not";
        v29 = stpcpy(v26, v28);
        v30 = v29 + 1;
        if (*((_BYTE *)this + 17))
          v31 = "is";
        else
          v31 = "is not";
        stpcpy(v29 + 1, v31);
        *(_DWORD *)v27 = 136315394;
        *(_QWORD *)(v27 + 4) = v26;
        *(_WORD *)(v27 + 12) = 2080;
        *(_QWORD *)(v27 + 14) = v30;
        caulk::concurrent::messenger::enqueue(*(caulk::concurrent::messenger **)(*((_QWORD *)this + 170) + 16), v25);
      }
    }
    AUSpeakerProtectionV3::AttenuateInputToOutput(this, a3, a5, a7, v18);
    return v19;
  }
  v725 = (AUSpeakerProtectionV3 *)((char *)this + 1192);
  if ((*(unsigned int (**)(AUSpeakerProtectionV3 *))(*(_QWORD *)this + 576))(this))
  {
    Element = ausdk::AUScope::SafeGetElement((AUSpeakerProtectionV3 *)((char *)this + 128), 0);
    v34 = *a7;
    mNumberBuffers = (*a7)->mNumberBuffers;
    if ((_DWORD)mNumberBuffers)
    {
      v36 = 0;
      v37 = *(_DWORD *)(Element + 104) * a3;
      v38 = 16;
      do
      {
        v39 = *(const void **)((char *)&(*a5)->mNumberBuffers + v38);
        v40 = *(void **)((char *)&v34->mNumberBuffers + v38);
        if (v39 != v40)
        {
          memcpy(v40, v39, v37);
          v34 = *a7;
          mNumberBuffers = (*a7)->mNumberBuffers;
        }
        ++v36;
        v38 += 16;
      }
      while (v36 < mNumberBuffers);
    }
    *((_BYTE *)this + 531) = 1;
    if ((shouldTraceRender() & 1) != 0)
    {
      v41 = spp3SubsystemAsync();
      if (v41)
      {
        if ((*(_BYTE *)(v41 + 8) & 1) != 0)
        {
          v42 = *(NSObject **)v41;
          if (*(_QWORD *)v41)
          {
            if (os_log_type_enabled(*(os_log_t *)v41, OS_LOG_TYPE_DEBUG))
            {
              *(_DWORD *)buf = 136315394;
              *(_QWORD *)&buf[4] = "AUSpeakerProtectionV3.cpp";
              *(_WORD *)&buf[12] = 1024;
              *(_DWORD *)&buf[14] = 4277;
              _os_log_impl(&dword_1B5ED0000, v42, OS_LOG_TYPE_DEBUG, "%25s:%-5d AUSpeakerProtectionV3 bypassed!", buf, 0x12u);
            }
          }
        }
      }
    }
LABEL_826:
    v702 = (OpaqueExtAudioFile *)*((_QWORD *)this + 141);
    if (v702)
    {
      v703 = ExtAudioFileWrite(v702, a3, *a7);
      if ((v703 + 66560) >= 2)
      {
        if (v703)
          (*(void (**)(char *))(*((_QWORD *)this + 140) + 16))((char *)this + 1120);
      }
    }
    v19 = SimpleMeters::ProcessOutputBufferList(v725, a3, *a7);
    if (!(_DWORD)v19)
      *((_DWORD *)this + 295) = (*((_DWORD *)this + 295) + 1);
    return v19;
  }
  if (*((_BYTE *)this + 531))
  {
    (*(void (**)(AUSpeakerProtectionV3 *, _QWORD, _QWORD))(*(_QWORD *)this + 72))(this, 0, 0);
    *((_BYTE *)this + 531) = 0;
  }
  if (!*((_BYTE *)this + 528))
  {
    if (*((_BYTE *)this + 1184))
    {
      if (*((_BYTE *)this + 17))
        v66 = 3;
      else
        v66 = 7;
      v67 = _os_log_pack_size() + 88;
      v68 = caulk::deferred_logger::create_message(*((caulk::deferred_logger **)this + 170), v67 + v66, 16);
      if (v68)
      {
        v69 = (caulk::concurrent::message *)v68;
        v70 = (char *)(v68 + v67);
        v71 = _os_log_pack_fill();
        if (*((_BYTE *)this + 17))
          v72 = "is";
        else
          v72 = "is not";
        stpcpy(v70, v72);
        *(_DWORD *)v71 = 136315138;
        *(_QWORD *)(v71 + 4) = v70;
        caulk::concurrent::messenger::enqueue(*(caulk::concurrent::messenger **)(*((_QWORD *)this + 170) + 16), v69);
      }
      *((_BYTE *)this + 1184) = 0;
    }
    goto LABEL_66;
  }
  v43 = *(unsigned int *)(ausdk::AUScope::SafeGetElement((AUSpeakerProtectionV3 *)((char *)this + 80), 0) + 108);
  if (v43 != (uint64_t)(*((_QWORD *)this + 106) - *((_QWORD *)this + 105)) >> 4
    || (_DWORD)v43 != *((_DWORD *)this + 158))
  {
    if (!*((_DWORD *)this + 295))
    {
      v60 = _os_log_pack_size();
      v61 = caulk::deferred_logger::create_message(*((caulk::deferred_logger **)this + 170), v60 + 88, 16);
      if (v61)
      {
        v62 = (caulk::concurrent::message *)v61;
        v63 = _os_log_pack_fill();
        v64 = (uint64_t)(*((_QWORD *)this + 106) - *((_QWORD *)this + 105)) >> 4;
        v65 = *((_DWORD *)this + 158);
        *(_DWORD *)v63 = 134218496;
        *(_QWORD *)(v63 + 4) = v64;
        *(_WORD *)(v63 + 12) = 1024;
        *(_DWORD *)(v63 + 14) = v65;
        *(_WORD *)(v63 + 18) = 1024;
        *(_DWORD *)(v63 + 20) = v43;
        caulk::concurrent::messenger::enqueue(*(caulk::concurrent::messenger **)(*((_QWORD *)this + 170) + 16), v62);
      }
    }
LABEL_66:
    AUSpeakerProtectionV3::AttenuateInputToOutput(this, a3, a5, a7, v32);
    SimpleMeters::ProcessOutputBufferList(v725, a3, *a7);
    return 0;
  }
  v726 = (const float ****)((char *)this + 840);
  AUSpeakerProtectionV3::ApplyParameters(this);
  if (!*((_BYTE *)this + 533)
    || !*((_BYTE *)this + 529)
    || !AUSpeakerProtectionV3::ClosedLoopInputsOK(this, a3, a4, a5))
  {
    v73 = *((_QWORD *)this + 106);
    v74 = *((_QWORD *)this + 105);
    if (v73 == v74)
      goto LABEL_622;
    v75 = 0;
    v76 = 0;
    do
    {
      v77 = (v73 - v74) >> 4;
      while (v76)
      {
        ++v75;
        v76 = 1;
        if (v77 <= v75)
          goto LABEL_80;
      }
      v78 = *((_QWORD *)this + 104);
      if (v78)
      {
        v79 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)v78 + 32))(v78, v75);
      }
      else
      {
        v80 = *((_QWORD *)this + 101);
        if (v75 >= (*((_QWORD *)this + 102) - v80) >> 3)
          v79 = 0;
        else
          v79 = *(ausdk::AUElement **)(v80 + 8 * v75);
      }
      Parameter = ausdk::AUElement::GetParameter(v79, 0x16u);
      v76 = Parameter != 0.0;
      v73 = *((_QWORD *)this + 106);
      v74 = *((_QWORD *)this + 105);
      ++v75;
    }
    while (v75 < (v73 - v74) >> 4);
    if (Parameter == 0.0)
      goto LABEL_594;
LABEL_80:
    if (!*((_DWORD *)this + 295))
    {
      v82 = _os_log_pack_size();
      v83 = caulk::deferred_logger::create_message(*((caulk::deferred_logger **)this + 170), v82 + 88, 16);
      if (v83)
      {
        v84 = (caulk::concurrent::message *)v83;
        *(_WORD *)_os_log_pack_fill() = 0;
        caulk::concurrent::messenger::enqueue(*(caulk::concurrent::messenger **)(*((_QWORD *)this + 170) + 16), v84);
      }
    }
    if (*((_QWORD *)this + 106) != *((_QWORD *)this + 105))
    {
      v85 = 0;
      v86 = 0;
      do
      {
        v87 = *((_QWORD *)this + 104);
        if (v87)
        {
          v88 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)v87 + 32))(v87, v86);
        }
        else
        {
          v89 = *((_QWORD *)this + 101);
          if (v86 >= (*((_QWORD *)this + 102) - v89) >> 3)
            v88 = 0;
          else
            v88 = *(ausdk::AUElement **)(v89 + 8 * v86);
        }
        ausdk::AUElement::SetParameter(v88, 0x16u, 0.0, 0);
        v90 = *((_QWORD *)this + 104);
        if (v90)
        {
          v91 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)v90 + 32))(v90, v86);
        }
        else
        {
          v92 = *((_QWORD *)this + 101);
          if (v86 >= (*((_QWORD *)this + 102) - v92) >> 3)
            v91 = 0;
          else
            v91 = *(ausdk::AUElement **)(v92 + 8 * v86);
        }
        ausdk::AUElement::SetParameter(v91, 0x15u, 0.0, 0);
        v74 = *((_QWORD *)this + 105);
        v93 = *(_QWORD *)(v74 + v85);
        *(_WORD *)(v93 + 992) = 257;
        *(_BYTE *)(v93 + 994) = 1;
        ++v86;
        v73 = *((_QWORD *)this + 106);
        v85 += 16;
      }
      while (v86 < (v73 - v74) >> 4);
      goto LABEL_594;
    }
    goto LABEL_622;
  }
  v44 = ausdk::AUScope::SafeGetElement((AUSpeakerProtectionV3 *)((char *)this + 80), 1u);
  v45 = *(_OWORD *)(v44 + 96);
  *(_OWORD *)buf = *(_OWORD *)(v44 + 80);
  *(_OWORD *)&buf[16] = v45;
  *(_QWORD *)&buf[32] = *(_QWORD *)(v44 + 112);
  __B = 0.0;
  if (CAStreamBasicDescription::IdentifyCommonPCMFormat(buf, (int *)&__B, 0) && LODWORD(__B) == 2)
  {
    v46 = *((_QWORD *)this + 105);
    if (*((_QWORD *)this + 106) != v46)
    {
      v47 = 0;
      v48 = 0;
      v49 = (2 * v43);
      v50 = 2;
      do
      {
        v51 = *((_QWORD *)this + 84);
        if (v48 >= (*((_QWORD *)this + 85) - v51) >> 3)
          std::vector<std::vector<float>>::__throw_out_of_range[abi:ne180100]();
        v52 = *(float **)(v51 + 8 * v48);
        v53 = *v52 * 0.000030518;
        v727 = v52[1] * 0.000030518;
        __B = v53;
        v54 = (const __int16 *)((char *)a5[1]->mBuffers[0].mData + v50);
        vDSP_vflt16(v54 - 1, v49, *(float **)(*(_QWORD *)(v46 + v47) + 848), 1, a3);
        vDSP_vflt16(v54, v49, *(float **)(*(_QWORD *)(*((_QWORD *)this + 105) + v47) + 872), 1, a3);
        v55 = *(float **)(*(_QWORD *)(*((_QWORD *)this + 105) + v47) + 848);
        vDSP_vsmul(v55, 1, &__B, v55, 1, a3);
        v56 = *(float **)(*(_QWORD *)(*((_QWORD *)this + 105) + v47) + 872);
        vDSP_vsmul(v56, 1, &v727, v56, 1, a3);
        v57 = *(_QWORD *)(*((_QWORD *)this + 142) + v47);
        v58 = *(clsp::CLSP_Log **)(v57 + 112);
        if (v58)
        {
          clsp::CLSP_Log::LogCLSPData(v58, *(const float **)(*(_QWORD *)(*((_QWORD *)this + 105) + v47) + 872), a3);
          v57 = *(_QWORD *)(*((_QWORD *)this + 142) + v47);
        }
        v59 = *(clsp::CLSP_Log **)(v57 + 128);
        if (v59)
          clsp::CLSP_Log::LogCLSPData(v59, (*v726)[v47 / 8][106], a3);
        ++v48;
        v46 = *((_QWORD *)this + 105);
        v50 += 4;
        v47 += 16;
      }
      while (v48 < (*((_QWORD *)this + 106) - v46) >> 4);
    }
    goto LABEL_114;
  }
  __B = 0.0;
  if (CAStreamBasicDescription::IdentifyCommonPCMFormat(buf, (int *)&__B, 0)
    && LODWORD(__B) == 1
    && (buf[12] & 0x20) == 0)
  {
    v94 = *((_QWORD *)this + 92);
    v95 = *((_QWORD *)this + 91);
    if (v94 != v95)
    {
      v96 = 0;
      v97 = 0;
      do
      {
        AUSpeakerProtectionV3::ParseSpeakerTelemetryBuffer(this, (const telemetry::Item *)*(unsigned int *)(v95 + v96), *(_DWORD *)(v95 + v96 + 4), v97++, (v94 - v95) >> 3, (uint64_t)a5[1]->mBuffers[0].mData, a3);
        v94 = *((_QWORD *)this + 92);
        v95 = *((_QWORD *)this + 91);
        v96 += 8;
      }
      while (v97 < (v94 - v95) >> 3);
    }
    goto LABEL_114;
  }
  __B = 0.0;
  if (CAStreamBasicDescription::IdentifyCommonPCMFormat(buf, (int *)&__B, 0)
    && LODWORD(__B) == 1
    && (buf[12] & 0x20) != 0)
  {
    v101 = *((_QWORD *)this + 91);
    if (*((_QWORD *)this + 92) != v101)
    {
      v102 = 0;
      v103 = 0;
      v104 = 16;
      do
      {
        AUSpeakerProtectionV3::ParseSpeakerTelemetryBuffer(this, (const telemetry::Item *)*(unsigned int *)(v101 + v102), *(_DWORD *)(v101 + v102 + 4), 0, 1, *(_QWORD *)((char *)&a5[1]->mNumberBuffers + v104), a3);
        ++v103;
        v101 = *((_QWORD *)this + 91);
        v102 += 8;
        v104 += 16;
      }
      while (v103 < (*((_QWORD *)this + 92) - v101) >> 3);
    }
LABEL_114:
    v105 = (double)a3;
    v106 = (char *)*((_QWORD *)this + 106);
    v107 = (char *)*((_QWORD *)this + 105);
    v108 = v106;
    if ((double)a3 / *((double *)this + 78) <= 0.093)
    {
      if (v106 != v107)
      {
        v116 = 0;
        do
        {
          v117 = *((_QWORD *)this + 104);
          if (v117)
          {
            v118 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)v117 + 32))(v117, v116);
          }
          else
          {
            v119 = *((_QWORD *)this + 101);
            if (v116 >= (*((_QWORD *)this + 102) - v119) >> 3)
              v118 = 0;
            else
              v118 = *(ausdk::AUElement **)(v119 + 8 * v116);
          }
          ausdk::AUElement::SetParameter(v118, 0x16u, 1.0, 0);
          v120 = *((_QWORD *)this + 104);
          if (v120)
          {
            v121 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)v120 + 32))(v120, v116);
          }
          else
          {
            v122 = *((_QWORD *)this + 101);
            if (v116 >= (*((_QWORD *)this + 102) - v122) >> 3)
              v121 = 0;
            else
              v121 = *(ausdk::AUElement **)(v122 + 8 * v116);
          }
          ausdk::AUElement::SetParameter(v121, 0x15u, 1.0, 0);
          ++v116;
          v108 = (char *)*((_QWORD *)this + 106);
          v106 = (char *)*((_QWORD *)this + 105);
        }
        while (v116 < (v108 - v106) >> 4);
      }
    }
    else if (v106 != v107)
    {
      v109 = 0;
      do
      {
        v110 = *((_QWORD *)this + 104);
        if (v110)
        {
          v111 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)v110 + 32))(v110, v109);
        }
        else
        {
          v112 = *((_QWORD *)this + 101);
          if (v109 >= (*((_QWORD *)this + 102) - v112) >> 3)
            v111 = 0;
          else
            v111 = *(ausdk::AUElement **)(v112 + 8 * v109);
        }
        ausdk::AUElement::SetParameter(v111, 0x16u, 0.0, 0);
        v113 = *((_QWORD *)this + 104);
        if (v113)
        {
          v114 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)v113 + 32))(v113, v109);
        }
        else
        {
          v115 = *((_QWORD *)this + 101);
          if (v109 >= (*((_QWORD *)this + 102) - v115) >> 3)
            v114 = 0;
          else
            v114 = *(ausdk::AUElement **)(v115 + 8 * v109);
        }
        ausdk::AUElement::SetParameter(v114, 0x15u, 0.0, 0);
        ++v109;
        v108 = (char *)*((_QWORD *)this + 106);
        v106 = (char *)*((_QWORD *)this + 105);
      }
      while (v109 < (v108 - v106) >> 4);
    }
    v123 = *((double *)this + 78);
    if ((v105 / v123 < 0.005 || v105 / v123 > 0.093) && (a3 != 192 || v123 != 16000.0))
    {
      v124 = v106;
      v125 = v108 - v106;
      if (v108 == v106)
      {
LABEL_152:
        if (*((_DWORD *)this + 162) == a3)
        {
          v129 = *((_DWORD *)this + 161);
        }
        else
        {
          v129 = 2;
          *((_DWORD *)this + 161) = 2;
        }
        if (v124 == v106)
        {
          v132 = v106;
        }
        else
        {
          v130 = 0;
          v131 = 0;
          do
          {
            (*(void (**)(_QWORD, BOOL))(**(_QWORD **)(*(_QWORD *)&v106[v130] + 424) + 208))(*(_QWORD *)(*(_QWORD *)&v106[v130] + 424), v129 > 0);
            ++v131;
            v132 = (char *)*((_QWORD *)this + 106);
            v106 = (char *)*((_QWORD *)this + 105);
            v130 += 16;
          }
          while (v131 < (v132 - v106) >> 4);
        }
        *((_DWORD *)this + 162) = a3;
        if (v129 > 0)
          --*((_DWORD *)this + 161);
        if (v132 == v106)
          goto LABEL_587;
        v133 = 0;
        v134 = (float)a3;
        v719 = a3 - 1;
        __len = 4 * a3;
        while (1)
        {
          if (((*(_QWORD *)(*((_QWORD *)this + 67) + ((v133 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v133) & 1) == 0)
          {
            v137 = *(_QWORD *)&v106[16 * v133];
            v138 = *(_QWORD *)(v137 + 848);
            v139 = *(_QWORD *)(v137 + 872);
            shouldTraceRender();
            v140 = *(_QWORD *)(v137 + 248);
            if (v140)
              *(float *)(v137 + 232) = (*(float (**)(uint64_t, uint64_t, uint64_t, _QWORD))(*(_QWORD *)v140
                                                                                                  + 32))(v140, v138, v139, a3);
            v141 = 2 * v133;
            v142 = (*v726)[2 * v133];
            v143 = v142[53];
            v144 = a3;
            if (!v143)
              goto LABEL_355;
            v145 = *((_DWORD *)v143 + 2);
            v724 = (*v726)[2 * v133];
            if (v145 != 4)
            {
              if (v145 == 1)
              {
                v146 = v142[125];
                v147 = v142[106];
                shouldTraceRender();
                v148 = *((_QWORD *)v146 + 1);
                v149 = a3;
                if (v148 <= a3)
                {
                  if (v148)
                  {
                    memmove(*((void **)v146 + 5), *((const void **)v146 + 2), 4 * v148);
                    v149 = a3;
                    v148 = *((_QWORD *)v146 + 1);
                  }
                  v150 = v724;
                  v174 = (char *)&v147[v149];
                  v175 = &v174[-4 * v148];
                  if (v175 != (char *)v147)
                  {
                    memmove((void *)(*((_QWORD *)v146 + 5) + 4 * v148), v147, v175 - (char *)v147);
                    v148 = *((_QWORD *)v146 + 1);
                  }
                  if (v148)
                  {
                    v153 = 4 * v148;
                    v151 = (void *)*((_QWORD *)v146 + 2);
                    v152 = &v174[-4 * v148];
LABEL_205:
                    memmove(v151, v152, v153);
                  }
                }
                else
                {
                  if (a3)
                  {
                    memmove(*((void **)v146 + 5), *((const void **)v146 + 2), __len);
                    v149 = a3;
                    v148 = *((_QWORD *)v146 + 1);
                  }
                  v150 = v724;
                  if (v148 != v149)
                    memmove(*((void **)v146 + 2), (const void *)(*((_QWORD *)v146 + 2) + 4 * a3), 4 * v148 - 4 * a3);
                  if (a3)
                  {
                    v151 = (void *)(*((_QWORD *)v146 + 2) + 4 * *((_QWORD *)v146 + 1) - 4 * a3);
                    v152 = (char *)v147;
                    v153 = 4 * a3;
                    goto LABEL_205;
                  }
                }
                v176 = v150[126];
                v177 = (char *)v150[109];
                shouldTraceRender();
                v178 = *((_QWORD *)v176 + 1);
                v179 = a3;
                if (v178 <= a3)
                {
                  if (v178)
                  {
                    memmove(*((void **)v176 + 5), *((const void **)v176 + 2), 4 * v178);
                    v179 = a3;
                    v178 = *((_QWORD *)v176 + 1);
                  }
                  v180 = v724;
                  v195 = &v177[4 * v179];
                  v196 = &v195[-4 * v178];
                  if (v196 != v177)
                  {
                    memmove((void *)(*((_QWORD *)v176 + 5) + 4 * v178), v177, v196 - v177);
                    v179 = a3;
                    v178 = *((_QWORD *)v176 + 1);
                  }
                  if (v178)
                  {
                    v183 = 4 * v178;
                    v181 = (void *)*((_QWORD *)v176 + 2);
                    v182 = &v195[-4 * v178];
LABEL_233:
                    memmove(v181, v182, v183);
                    v179 = a3;
                  }
                }
                else
                {
                  if (a3)
                  {
                    memmove(*((void **)v176 + 5), *((const void **)v176 + 2), __len);
                    v179 = a3;
                    v178 = *((_QWORD *)v176 + 1);
                  }
                  v180 = v724;
                  if (v178 != v179)
                  {
                    memmove(*((void **)v176 + 2), (const void *)(*((_QWORD *)v176 + 2) + 4 * v179), 4 * v178 - 4 * v179);
                    v179 = a3;
                  }
                  if (a3)
                  {
                    v181 = (void *)(*((_QWORD *)v176 + 2) + 4 * *((_QWORD *)v176 + 1) - 4 * a3);
                    v182 = v177;
                    v183 = 4 * a3;
                    goto LABEL_233;
                  }
                }
                ConvoyToExcursion(*((float **)v180[6] + 5), (float *)v180[112], v179, *((_BYTE *)v180 + 995) == 0, 1, *(float *)(*((_QWORD *)v180[5] + 6) + 4), *(float *)(*((_QWORD *)v180[5] + 6) + 8));
                v197 = (clsp::CLSP_Log *)*((_QWORD *)v724[135] + 18);
                if (v197)
                  clsp::CLSP_Log::LogCLSPData(v197, v724[112], a3);
                clsp::FirFilter::firlsfilter((clsp::FirFilter *)v724[127], (float *)v724[112], (float *)v724[112], a3);
                v198 = v724;
                v199 = (clsp::CLSP_Log *)*((_QWORD *)v724[135] + 22);
                if (v199)
                  clsp::CLSP_Log::LogCLSPData(v199, v724[112], a3);
                v200 = v724[53];
                v201 = (float *)*((_QWORD *)v724[125] + 5);
                v202 = *((unsigned __int8 *)v724 + 992);
                v203 = (float *)v724[112];
                v204 = *((unsigned __int8 *)v724 + 994);
                *((_QWORD *)v200 + 64) = a3;
                if (*((_BYTE *)v200 + 508))
                {
                  shouldTraceRender();
                  v141 = 2 * v133;
                  v198 = v724;
                  goto LABEL_319;
                }
                if (v200[126] == 1.0)
                {
                  *((_QWORD *)v200 + 52) = 0;
                  *((_QWORD *)v200 + 53) = 0;
                  v200[114] = 1.0;
                  v200[184] = 1.0;
                  v220 = v200[99];
                  v221 = fabsf(v200[95]);
                  v222 = fabsf(v200[96]);
                  if (v222 < v221)
                    v221 = v222;
                  v223 = v220 * v221;
                  *((float *)v200 + 19) = v223;
                  *((float *)v200 + 20) = 1.0 / v223;
                  *((float *)v200 + 103) = v223;
                  *((float *)v200 + 194) = v223;
                  *((float *)v200 + 102) = v220;
                  v141 = 2 * v133;
                  goto LABEL_319;
                }
                if (v202 | v204)
                {
                  shouldTraceRender();
                  v265 = v200[125] + v134;
                  *((float *)v200 + 125) = v265;
                  goto LABEL_314;
                }
                if (v200[125] == 0.0)
                {
                  v200[125] = 0.0;
                  if (a3)
                  {
                    v314 = (double *)*((_QWORD *)v200 + 18);
                    v313 = (double *)*((_QWORD *)v200 + 19);
                    v315 = (_DWORD *)*((_QWORD *)v200 + 29);
                    v316 = (float *)*((_QWORD *)v200 + 23);
                    v317 = (double *)*((_QWORD *)v200 + 17);
                    v318 = (_DWORD *)*((_QWORD *)v200 + 26);
                    v319 = v203;
                    v320 = a3;
                    v321 = (_DWORD *)*((_QWORD *)v200 + 32);
                    do
                    {
                      v322 = *v319;
                      v323 = v313[5];
                      v324 = v313[7];
                      v325 = v313[3] * v323 + v322 * v313[2] + v313[6] * v313[4] - v324 * *v313 - v313[8] * v313[1];
                      v313[5] = v322;
                      v313[6] = v323;
                      v313[7] = v325;
                      v313[8] = v324;
                      *(float *)&v322 = v325;
                      *v315++ = LODWORD(v322);
                      v326 = *v201++;
                      v327 = v317[5];
                      v328 = v317[7];
                      v329 = v317[3] * v327 + v326 * v317[2] + v317[6] * v317[4] - v328 * *v317 - v317[8] * v317[1];
                      v317[5] = v326;
                      v317[6] = v327;
                      v317[7] = v329;
                      v317[8] = v328;
                      *(float *)&v322 = v329;
                      *v316 = *(float *)&v322;
                      v330 = *v319++;
                      v331 = v314[5];
                      v332 = v314[7];
                      v333 = v314[3] * v331 + v330 * v314[2] + v314[6] * v314[4] - v332 * *v314 - v314[8] * v314[1];
                      v314[5] = v330;
                      v314[6] = v331;
                      v314[7] = v333;
                      v314[8] = v332;
                      *(float *)&v322 = v333;
                      *v318++ = LODWORD(v322);
                      v334 = *v316++;
                      v335 = v200[43];
                      *(float *)&v322 = (float)((float)(v334 * v200[42]) - (float)(v335 * v200[40]))
                                      - (float)(v200[44] * v200[41]);
                      v200[43] = *(const float *)&v322;
                      *((float *)v200 + 44) = v335;
                      *v321++ = LODWORD(v322);
                      --v320;
                    }
                    while (v320);
                  }
                  __Aa = v203;
                  v336 = *((_QWORD *)v200 + 45);
                  v337 = v336 - a3;
                  if (v336 <= a3)
                  {
                    vDSP_maxv(*((const float **)v200 + 32), 1, (float *)v200 + 108, a3);
                    vDSP_minv(*((const float **)v200 + 32), 1, (float *)v200 + 109, a3);
                    vDSP_maxv(*((const float **)v200 + 26), 1, (float *)v200 + 110, a3);
                    vDSP_minv(*((const float **)v200 + 26), 1, (float *)v200 + 111, a3);
                    v345 = *((_QWORD *)v200 + 45);
                    if (v345)
                    {
                      v346 = a3 - v345;
                      memmove(*((void **)v200 + 35), (const void *)(*((_QWORD *)v200 + 32) + 4 * v346), 4 * a3 - 4 * v346);
                      memmove(*((void **)v200 + 38), (const void *)(*((_QWORD *)v200 + 26) + 4 * v346), 4 * a3 - 4 * v346);
                    }
                  }
                  else
                  {
                    v338 = (char *)*((_QWORD *)v200 + 35);
                    v339 = (_BYTE *)*((_QWORD *)v200 + 36);
                    v340 = &v338[4 * a3];
                    if (v339 != v340)
                      memmove(v338, v340, v339 - v340);
                    v341 = (char *)*((_QWORD *)v200 + 38);
                    v342 = (_BYTE *)*((_QWORD *)v200 + 39);
                    v343 = &v341[4 * a3];
                    if (v342 != v343)
                      memmove(v341, v343, v342 - v343);
                    v344 = (const float *)*((_QWORD *)v200 + 35);
                    if (a3)
                    {
                      memmove((void *)&v344[v337], *((const void **)v200 + 32), __len);
                      memmove((void *)(*((_QWORD *)v200 + 38) + 4 * v337), *((const void **)v200 + 26), __len);
                      v344 = (const float *)*((_QWORD *)v200 + 35);
                    }
                    vDSP_maxv(v344, 1, (float *)v200 + 108, a3);
                    vDSP_minv(*((const float **)v200 + 35), 1, (float *)v200 + 109, a3);
                    vDSP_maxv(*((const float **)v200 + 38), 1, (float *)v200 + 110, a3);
                    vDSP_minv(*((const float **)v200 + 38), 1, (float *)v200 + 111, a3);
                  }
                  v347 = v200[110];
                  v348 = v200[92];
                  if (v347 < v348 && v200[108] < v348)
                  {
                    *((float *)v200 + 110) = v348;
                    *((float *)v200 + 108) = v348;
                    v347 = v348;
                  }
                  v349 = v200[111];
                  v350 = v200[93];
                  if (v349 > v350 && v200[109] > v350)
                  {
                    *((float *)v200 + 111) = v350;
                    *((float *)v200 + 109) = v350;
                    v349 = v350;
                  }
                  v351 = v200[165];
                  v352 = v200[175];
                  if (a3)
                  {
                    v353 = v347 / v200[108];
                    v354 = 162;
                    if (v200[164] == v353)
                      v354 = 163;
                    v355 = v349 / v200[109];
                    v356 = 172;
                    if (v200[174] == v355)
                      v356 = 173;
                    v357 = v200[v354];
                    v358 = a3;
                    do
                    {
                      v351 = v351 + (float)(v357 * (float)(v353 - v351));
                      v352 = v352 + (float)(v200[v356] * (float)(v355 - v352));
                      --v358;
                    }
                    while (v358);
                    *((float *)v200 + 165) = v351;
                    *((float *)v200 + 175) = v352;
                  }
                  v359 = v351;
                  v360 = v200[122] / 100.0;
                  v361 = 1.0 - v360;
                  v362 = v360 + 1.0;
                  v363 = v352;
                  v364 = v361 <= v352;
                  if (v362 < v352)
                    v364 = 0;
                  v365 = v362 >= v359 && v361 <= v359;
                  if (!v365 && !v364)
                    goto LABEL_411;
                  v366 = v362 < v359;
                  if (v361 > v359)
                    v366 = 1;
                  if (v366 || (v362 >= v363 ? (v367 = v361 > v363) : (v367 = 1), v367))
                  {
                    if (v366 || v364)
                      v368 = v351;
                    else
                      v368 = v352;
                  }
                  else
                  {
LABEL_411:
                    if (v351 >= v352)
                      v368 = v351;
                    else
                      v368 = v352;
                  }
                  if (v200[115] < v368)
                    v368 = v200[115];
                  if (v368 < v200[116])
                    v368 = v200[116];
                  *((float *)v200 + 114) = v368;
                  if (v351 <= v200[117] || v352 <= v200[118])
                  {
                    v200[119] = 1.0;
                    v200[114] = 1.0;
                    v369 = 1.0;
                    v370 = 1.0;
                    v200[121] = 0.0;
                  }
                  else
                  {
                    v200[119] = 0.0;
                    v369 = v368;
                    v370 = 0.0;
                  }
                  v371 = v362 < v369 || v361 > v369;
                  if (v371 || (v375 = v200[121], v376 = v200[120], v375 > v376) || v370 != 0.0)
                  {
                    v200[121] = 0.0;
                  }
                  else
                  {
                    *((float *)v200 + 121) = v375 + 1.0;
                    if ((float)(v375 + 1.0) >= v376)
                      *((float *)v200 + 121) = v376;
                  }
                  vDSP_maxv(__Aa, 1, (float *)v200 + 112, a3);
                  vDSP_minv(__Aa, 1, (float *)v200 + 113, a3);
                  v372 = v200[97];
                  v373 = v200[96];
                  v374 = v200[112] > (float)(v372 * v373) || v200[113] < (float)(v372 * v200[95]);
                  *((_BYTE *)v200 + 888) = v374;
                  v377 = v200[114];
                  v378 = v200[122] / 100.0;
                  v379 = v378 + 1.0;
                  v380 = 1.0 - v378;
                  v381 = v379 > v377 && v380 < v377;
                  if (!v381 && v200[119] == 0.0
                    || (v379 > v377 ? (v382 = v380 < v377) : (v382 = 0),
                        v382 && v200[121] < v200[120] && v200[119] == 0.0))
                  {
                    v383 = v200[98];
                    v384 = 1.0;
                    if (v374)
                    {
                      v383 = v383 * v200[94];
                      if (v383 < v200[99])
                        v383 = v200[99];
                      *((float *)v200 + 98) = v383;
                    }
                  }
                  else
                  {
                    v383 = v200[99];
                    v384 = 0.0;
                  }
                  v141 = 2 * v133;
                  v198 = v724;
                  *((float *)v200 + 102) = v383;
                  *((float *)v200 + 220) = v384;
                  *((float *)v200 + 221) = v384;
                  v385 = v200[95];
                  v386 = *(float *)(*((_QWORD *)v200 + 29) + 4 * v719);
                  v387 = -(float)(v386 - (float)(v383 * v385));
                  v388 = -(float)(v386 - (float)(v383 * v373));
                  if (v387 <= 0.0)
                    v389 = v387;
                  else
                    v389 = 0.0;
                  if (v389 >= v385)
                    v385 = v389;
                  if (v388 < 0.0)
                    v388 = 0.0;
                  if (v373 >= v388)
                    v373 = v388;
                  if (v373 > (float)-v385)
                    v373 = -v385;
                  *((float *)v200 + 103) = v373;
                }
                else
                {
                  shouldTraceRender();
                  v200[125] = 0.0;
                  v265 = 0.0;
LABEL_314:
                  v267 = v200[124];
                  v268 = 0.0;
                  v141 = 2 * v133;
                  v198 = v724;
                  if (v265 >= v267)
                  {
                    *((float *)v200 + 125) = v267;
                    v268 = 1.0;
                  }
                  *((float *)v200 + 126) = v268;
                  *((_QWORD *)v200 + 52) = 0;
                  *((_QWORD *)v200 + 53) = 0;
                  v200[114] = 1.0;
                  v200[184] = 1.0;
                  v269 = v200[99];
                  v270 = fabsf(v200[95]);
                  v271 = fabsf(v200[96]);
                  if (v271 < v270)
                    v270 = v271;
                  v272 = v269 * v270;
                  *((float *)v200 + 19) = v272;
                  *((float *)v200 + 20) = 1.0 / v272;
                  *((float *)v200 + 103) = v272;
                  *((float *)v200 + 194) = v272;
                  *((float *)v200 + 102) = v269;
                }
LABEL_319:
                v273 = (const float *)*((_QWORD *)v200 + 56);
                v198[132] = v273;
                v274 = (clsp::CLSP_Log *)*((_QWORD *)v198[135] + 6);
                if (v274)
                {
                  __B = *(float *)&v273;
                  clsp::CLSP_Log::LogCLSPData(v274, &__B, 1);
                  v275 = (clsp::CLSP_Log *)*((_QWORD *)v198[135] + 6);
                  if (v275)
                  {
                    __B = *((float *)v198 + 265);
                    clsp::CLSP_Log::LogCLSPData(v275, &__B, 1);
                    v276 = (clsp::CLSP_Log *)*((_QWORD *)v198[135] + 6);
                    if (v276)
                    {
                      __B = v200[184];
                      clsp::CLSP_Log::LogCLSPData(v276, &__B, 1);
                      v277 = (clsp::CLSP_Log *)*((_QWORD *)v198[135] + 6);
                      if (v277)
                      {
                        __B = v200[19];
                        clsp::CLSP_Log::LogCLSPData(v277, &__B, 1);
                        v278 = (clsp::CLSP_Log *)*((_QWORD *)v198[135] + 6);
                        if (v278)
                        {
                          __B = v200[165];
                          clsp::CLSP_Log::LogCLSPData(v278, &__B, 1);
                          v279 = (clsp::CLSP_Log *)*((_QWORD *)v198[135] + 6);
                          if (v279)
                          {
                            __B = v200[175];
                            clsp::CLSP_Log::LogCLSPData(v279, &__B, 1);
                            v280 = (clsp::CLSP_Log *)*((_QWORD *)v198[135] + 6);
                            if (v280)
                            {
                              __B = v200[110];
                              clsp::CLSP_Log::LogCLSPData(v280, &__B, 1);
                              v281 = (clsp::CLSP_Log *)*((_QWORD *)v198[135] + 6);
                              if (v281)
                              {
                                __B = v200[111];
                                clsp::CLSP_Log::LogCLSPData(v281, &__B, 1);
                                v282 = (clsp::CLSP_Log *)*((_QWORD *)v198[135] + 6);
                                if (v282)
                                {
                                  __B = v200[108];
                                  clsp::CLSP_Log::LogCLSPData(v282, &__B, 1);
                                  v283 = (clsp::CLSP_Log *)*((_QWORD *)v198[135] + 6);
                                  if (v283)
                                  {
                                    __B = v200[109];
                                    clsp::CLSP_Log::LogCLSPData(v283, &__B, 1);
                                    v284 = (clsp::CLSP_Log *)*((_QWORD *)v198[135] + 6);
                                    if (v284)
                                    {
                                      __B = v200[103];
                                      clsp::CLSP_Log::LogCLSPData(v284, &__B, 1);
                                      v285 = (clsp::CLSP_Log *)*((_QWORD *)v198[135] + 6);
                                      if (v285)
                                      {
                                        v286 = *((_BYTE *)v198 + 994) ? 1.0 : 0.0;
                                        __B = v286;
                                        clsp::CLSP_Log::LogCLSPData(v285, &__B, 1);
                                        v287 = (clsp::CLSP_Log *)*((_QWORD *)v198[135] + 6);
                                        if (v287)
                                        {
                                          v288 = *((_BYTE *)v198 + 992) ? 1.0 : 0.0;
                                          __B = v288;
                                          clsp::CLSP_Log::LogCLSPData(v287, &__B, 1);
                                          v289 = (clsp::CLSP_Log *)*((_QWORD *)v198[135] + 6);
                                          if (v289)
                                          {
                                            __B = v200[119];
                                            clsp::CLSP_Log::LogCLSPData(v289, &__B, 1);
                                            v290 = (clsp::CLSP_Log *)*((_QWORD *)v198[135] + 6);
                                            if (v290)
                                            {
                                              __B = v200[121];
                                              clsp::CLSP_Log::LogCLSPData(v290, &__B, 1);
                                              v291 = (clsp::CLSP_Log *)*((_QWORD *)v198[135] + 6);
                                              if (v291)
                                              {
                                                __B = v200[102];
                                                clsp::CLSP_Log::LogCLSPData(v291, &__B, 1);
                                                v292 = (clsp::CLSP_Log *)*((_QWORD *)v198[135] + 6);
                                                if (v292)
                                                {
                                                  __B = v200[125];
                                                  clsp::CLSP_Log::LogCLSPData(v292, &__B, 1);
                                                  v293 = (clsp::CLSP_Log *)*((_QWORD *)v198[135] + 6);
                                                  if (v293)
                                                  {
                                                    __B = v200[126];
                                                    clsp::CLSP_Log::LogCLSPData(v293, &__B, 1);
                                                    v294 = (clsp::CLSP_Log *)*((_QWORD *)v198[135] + 6);
                                                    if (v294)
                                                    {
                                                      __B = (float)a3;
                                                      clsp::CLSP_Log::LogCLSPData(v294, &__B, 1);
                                                      v295 = (clsp::CLSP_Log *)*((_QWORD *)v198[135] + 6);
                                                      if (v295)
                                                      {
                                                        __B = *((float *)v198 + 266);
                                                        clsp::CLSP_Log::LogCLSPData(v295, &__B, 1);
                                                        v296 = (clsp::CLSP_Log *)*((_QWORD *)v198[135] + 6);
                                                        if (v296)
                                                        {
                                                          __B = *((float *)v198 + 267);
                                                          clsp::CLSP_Log::LogCLSPData(v296, &__B, 1);
                                                          v297 = (clsp::CLSP_Log *)*((_QWORD *)v198[135] + 6);
                                                          if (v297)
                                                          {
                                                            v298 = *((_BYTE *)v200 + 888) ? 1.0 : 0.0;
                                                            __B = v298;
                                                            clsp::CLSP_Log::LogCLSPData(v297, &__B, 1);
                                                            v299 = (clsp::CLSP_Log *)*((_QWORD *)v198[135] + 6);
                                                            if (v299)
                                                            {
                                                              __B = v200[112];
                                                              clsp::CLSP_Log::LogCLSPData(v299, &__B, 1);
                                                              v300 = (clsp::CLSP_Log *)*((_QWORD *)v198[135] + 6);
                                                              if (v300)
                                                              {
                                                                __B = v200[113];
                                                                clsp::CLSP_Log::LogCLSPData(v300, &__B, 1);
                                                              }
                                                            }
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
                v262 = (float32x2_t *)((char *)v198 + 1028);
                v263 = *((_QWORD *)v198[5] + 6);
                v264 = (float32x2_t)v198[132];
LABEL_354:
                v301 = vdiv_f32(v264, (float32x2_t)vrev64_s32(*(int32x2_t *)(v263 + 4)));
                *v262 = (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(v301, *v262), (int8x8_t)v301, (int8x8_t)*v262);
                v144 = a3;
              }
LABEL_355:
              v302 = (*v726)[v141];
              v303 = v302[99];
              __B = 0.0;
              vDSP_dotpr(v302[106], 1, v302[109], 1, &__B, v144);
              v304 = *((_DWORD *)v303 + 4) + a3;
              *((_DWORD *)v303 + 4) = v304;
              v305 = __B + v303[2];
              *((float *)v303 + 2) = v305;
              if (v304 > *((_DWORD *)v303 + 1))
              {
                *((float *)v303 + 3) = v305 / (float)v304;
                v303[4] = 0.0;
                v303[2] = 0.0;
              }
              goto LABEL_357;
            }
            __A = (float *)v142[53];
            v166 = v142[125];
            v167 = v142[106];
            shouldTraceRender();
            v168 = *((_QWORD *)v166 + 1);
            v169 = a3;
            if (v168 <= a3)
            {
              if (v168)
              {
                memmove(*((void **)v166 + 5), *((const void **)v166 + 2), 4 * v168);
                v169 = a3;
                v168 = *((_QWORD *)v166 + 1);
              }
              v170 = v724;
              v184 = (char *)&v167[v169];
              v185 = &v184[-4 * v168];
              if (v185 != (char *)v167)
              {
                memmove((void *)(*((_QWORD *)v166 + 5) + 4 * v168), v167, v185 - (char *)v167);
                v168 = *((_QWORD *)v166 + 1);
              }
              if (v168)
              {
                v173 = 4 * v168;
                v171 = (void *)*((_QWORD *)v166 + 2);
                v172 = &v184[-4 * v168];
LABEL_219:
                memmove(v171, v172, v173);
              }
            }
            else
            {
              if (a3)
              {
                memmove(*((void **)v166 + 5), *((const void **)v166 + 2), __len);
                v169 = a3;
                v168 = *((_QWORD *)v166 + 1);
              }
              v170 = v724;
              if (v168 != v169)
                memmove(*((void **)v166 + 2), (const void *)(*((_QWORD *)v166 + 2) + 4 * a3), 4 * v168 - 4 * a3);
              if (a3)
              {
                v171 = (void *)(*((_QWORD *)v166 + 2) + 4 * *((_QWORD *)v166 + 1) - 4 * a3);
                v172 = (char *)v167;
                v173 = 4 * a3;
                goto LABEL_219;
              }
            }
            v186 = v170[126];
            v187 = (char *)v170[109];
            shouldTraceRender();
            v188 = *((_QWORD *)v186 + 1);
            v189 = a3;
            if (v188 <= a3)
            {
              if (v188)
              {
                memmove(*((void **)v186 + 5), *((const void **)v186 + 2), 4 * v188);
                v189 = a3;
                v188 = *((_QWORD *)v186 + 1);
              }
              v190 = __A;
              v191 = v724;
              v205 = &v187[4 * v189];
              v206 = &v205[-4 * v188];
              if (v206 != v187)
              {
                memmove((void *)(*((_QWORD *)v186 + 5) + 4 * v188), v187, v206 - v187);
                v189 = a3;
                v188 = *((_QWORD *)v186 + 1);
              }
              if (v188)
              {
                v194 = 4 * v188;
                v192 = (void *)*((_QWORD *)v186 + 2);
                v193 = &v205[-4 * v188];
LABEL_246:
                memmove(v192, v193, v194);
                v189 = a3;
              }
            }
            else
            {
              if (a3)
              {
                memmove(*((void **)v186 + 5), *((const void **)v186 + 2), __len);
                v189 = a3;
                v188 = *((_QWORD *)v186 + 1);
              }
              v190 = __A;
              v191 = v724;
              if (v188 != v189)
              {
                memmove(*((void **)v186 + 2), (const void *)(*((_QWORD *)v186 + 2) + 4 * v189), 4 * v188 - 4 * v189);
                v189 = a3;
              }
              if (a3)
              {
                v192 = (void *)(*((_QWORD *)v186 + 2) + 4 * *((_QWORD *)v186 + 1) - 4 * a3);
                v193 = v187;
                v194 = 4 * a3;
                goto LABEL_246;
              }
            }
            v207 = v191[112];
            v208 = **((float **)v190 + 11);
            __B = 0.0;
            vDSP_sve(v207, 1, &__B, v189);
            v209 = __B + __A[148];
            __A[148] = v209;
            v210 = *((_QWORD *)__A + 75) + a3;
            *((_QWORD *)__A + 75) = v210;
            if (v210 > *((_QWORD *)__A + 73))
            {
              v211 = v209 / (float)v210;
              v212 = v211 > (float)(v208 * 1.15);
              if (v211 < (float)(v208 * 0.9))
                v212 = 1;
              *((_BYTE *)__A + 608) = v212;
              __A[148] = 0.0;
              *((_QWORD *)__A + 75) = 0;
            }
            ConvoyToExcursion(*((float **)v724[6] + 5), (float *)v724[112], a3, *((_BYTE *)v724 + 995) == 0, 0, *(float *)(*((_QWORD *)v724[5] + 6) + 4), *(float *)(*((_QWORD *)v724[5] + 6) + 8));
            v213 = (clsp::CLSP_Log *)*((_QWORD *)v724[135] + 18);
            if (v213)
              clsp::CLSP_Log::LogCLSPData(v213, v724[112], a3);
            clsp::FirFilter::firlsfilter((clsp::FirFilter *)v724[127], (float *)v724[112], (float *)v724[112], a3);
            v214 = (clsp::CLSP_Log *)*((_QWORD *)v724[135] + 22);
            if (v214)
              clsp::CLSP_Log::LogCLSPData(v214, v724[112], a3);
            v215 = *((_QWORD *)v724[125] + 5);
            v216 = *((unsigned __int8 *)v724 + 992);
            v217 = v724[112];
            v218 = *((unsigned __int8 *)v724 + 994);
            *((_QWORD *)__A + 71) = a3;
            vDSP_maxv(v217, 1, __A + 118, a3);
            v720 = (int *)(__A + 119);
            vDSP_minv(v217, 1, __A + 119, a3);
            v219 = __A;
            if (*((_BYTE *)__A + 560))
            {
              shouldTraceRender();
              v219 = __A;
              v141 = 2 * v133;
              goto LABEL_266;
            }
            if (__A[138] == 1.0)
            {
              *((_QWORD *)__A + 55) = 0;
              *((_QWORD *)__A + 56) = 0;
              __A[120] = 1.0;
              __A[206] = 1.0;
              v224 = __A[105];
              v225 = fabsf(__A[94]);
              v226 = fabsf(__A[95]);
              if (v226 < v225)
                v225 = v226;
              v227 = v224 * v225;
              __A[24] = v227;
              __A[25] = 1.0 / v227;
              __A[109] = v227;
              __A[216] = v227;
              __A[108] = v224;
              __A[187] = __A[186];
              __A[197] = __A[196];
              goto LABEL_265;
            }
            if (v216 | v218)
            {
              shouldTraceRender();
              v219 = __A;
              v266 = __A[137] + v134;
              __A[137] = v266;
              goto LABEL_361;
            }
            if (__A[137] != 0.0)
            {
              shouldTraceRender();
              v219 = __A;
              __A[137] = 0.0;
              v266 = 0.0;
LABEL_361:
              v307 = v219[136];
              v308 = 0.0;
              v141 = 2 * v133;
              v229 = v724;
              v228 = (const float **)(__A + 118);
              if (v266 >= v307)
              {
                v219[137] = v307;
                v308 = 1.0;
              }
              v219[138] = v308;
              *((_QWORD *)v219 + 55) = 0;
              *((_QWORD *)v219 + 56) = 0;
              v219[120] = 1.0;
              v219[206] = 1.0;
              v309 = v219[105];
              v310 = fabsf(v219[94]);
              v311 = fabsf(v219[95]);
              if (v311 < v310)
                v310 = v311;
              v312 = v309 * v310;
              v219[24] = v312;
              v219[25] = 1.0 / v312;
              v219[109] = v312;
              v219[216] = v312;
              v219[108] = v309;
              v219[187] = v219[186];
              v219[197] = v219[196];
LABEL_267:
              v230 = *v228;
              v229[132] = *v228;
              v231 = (clsp::CLSP_Log *)*((_QWORD *)v229[135] + 6);
              if (v231)
              {
                __B = *(float *)&v230;
                clsp::CLSP_Log::LogCLSPData(v231, &__B, 1);
                v232 = (clsp::CLSP_Log *)*((_QWORD *)v229[135] + 6);
                if (v232)
                {
                  __B = *((float *)v229 + 265);
                  clsp::CLSP_Log::LogCLSPData(v232, &__B, 1);
                  v233 = (clsp::CLSP_Log *)*((_QWORD *)v229[135] + 6);
                  if (v233)
                  {
                    __B = v219[206];
                    clsp::CLSP_Log::LogCLSPData(v233, &__B, 1);
                    v234 = (clsp::CLSP_Log *)*((_QWORD *)v229[135] + 6);
                    if (v234)
                    {
                      __B = v219[24];
                      clsp::CLSP_Log::LogCLSPData(v234, &__B, 1);
                      v235 = (clsp::CLSP_Log *)*((_QWORD *)v229[135] + 6);
                      if (v235)
                      {
                        __B = v219[187];
                        clsp::CLSP_Log::LogCLSPData(v235, &__B, 1);
                        v236 = (clsp::CLSP_Log *)*((_QWORD *)v229[135] + 6);
                        if (v236)
                        {
                          __B = v219[197];
                          clsp::CLSP_Log::LogCLSPData(v236, &__B, 1);
                          v237 = (clsp::CLSP_Log *)*((_QWORD *)v229[135] + 6);
                          if (v237)
                          {
                            __B = v219[116];
                            clsp::CLSP_Log::LogCLSPData(v237, &__B, 1);
                            v238 = (clsp::CLSP_Log *)*((_QWORD *)v229[135] + 6);
                            if (v238)
                            {
                              __B = v219[117];
                              clsp::CLSP_Log::LogCLSPData(v238, &__B, 1);
                              v239 = (clsp::CLSP_Log *)*((_QWORD *)v229[135] + 6);
                              if (v239)
                              {
                                __B = v219[114];
                                clsp::CLSP_Log::LogCLSPData(v239, &__B, 1);
                                v240 = (clsp::CLSP_Log *)*((_QWORD *)v229[135] + 6);
                                if (v240)
                                {
                                  __B = v219[115];
                                  clsp::CLSP_Log::LogCLSPData(v240, &__B, 1);
                                  v241 = (clsp::CLSP_Log *)*((_QWORD *)v229[135] + 6);
                                  if (v241)
                                  {
                                    __B = v219[109];
                                    clsp::CLSP_Log::LogCLSPData(v241, &__B, 1);
                                    v242 = (clsp::CLSP_Log *)*((_QWORD *)v229[135] + 6);
                                    if (v242)
                                    {
                                      v243 = *((_BYTE *)v229 + 994) ? 1.0 : 0.0;
                                      __B = v243;
                                      clsp::CLSP_Log::LogCLSPData(v242, &__B, 1);
                                      v244 = (clsp::CLSP_Log *)*((_QWORD *)v229[135] + 6);
                                      if (v244)
                                      {
                                        v245 = *((_BYTE *)v229 + 992) ? 1.0 : 0.0;
                                        __B = v245;
                                        clsp::CLSP_Log::LogCLSPData(v244, &__B, 1);
                                        v246 = (clsp::CLSP_Log *)*((_QWORD *)v229[135] + 6);
                                        if (v246)
                                        {
                                          __B = v219[128];
                                          clsp::CLSP_Log::LogCLSPData(v246, &__B, 1);
                                          v247 = (clsp::CLSP_Log *)*((_QWORD *)v229[135] + 6);
                                          if (v247)
                                          {
                                            __B = v219[133];
                                            clsp::CLSP_Log::LogCLSPData(v247, &__B, 1);
                                            v248 = (clsp::CLSP_Log *)*((_QWORD *)v229[135] + 6);
                                            if (v248)
                                            {
                                              __B = v219[108];
                                              clsp::CLSP_Log::LogCLSPData(v248, &__B, 1);
                                              v249 = (clsp::CLSP_Log *)*((_QWORD *)v229[135] + 6);
                                              if (v249)
                                              {
                                                __B = v219[137];
                                                clsp::CLSP_Log::LogCLSPData(v249, &__B, 1);
                                                v250 = (clsp::CLSP_Log *)*((_QWORD *)v229[135] + 6);
                                                if (v250)
                                                {
                                                  __B = v219[138];
                                                  clsp::CLSP_Log::LogCLSPData(v250, &__B, 1);
                                                  v251 = (clsp::CLSP_Log *)*((_QWORD *)v229[135] + 6);
                                                  if (v251)
                                                  {
                                                    __B = (float)a3;
                                                    clsp::CLSP_Log::LogCLSPData(v251, &__B, 1);
                                                    v252 = (clsp::CLSP_Log *)*((_QWORD *)v229[135] + 6);
                                                    if (v252)
                                                    {
                                                      __B = *((float *)v229 + 266);
                                                      clsp::CLSP_Log::LogCLSPData(v252, &__B, 1);
                                                      v253 = (clsp::CLSP_Log *)*((_QWORD *)v229[135] + 6);
                                                      if (v253)
                                                      {
                                                        __B = *((float *)v229 + 267);
                                                        clsp::CLSP_Log::LogCLSPData(v253, &__B, 1);
                                                        v254 = (clsp::CLSP_Log *)*((_QWORD *)v229[135] + 6);
                                                        if (v254)
                                                        {
                                                          v255 = *((_BYTE *)v219 + 976) ? 1.0 : 0.0;
                                                          __B = v255;
                                                          clsp::CLSP_Log::LogCLSPData(v254, &__B, 1);
                                                          v256 = (clsp::CLSP_Log *)*((_QWORD *)v229[135] + 6);
                                                          if (v256)
                                                          {
                                                            __B = *(float *)v228;
                                                            clsp::CLSP_Log::LogCLSPData(v256, &__B, 1);
                                                            v257 = (clsp::CLSP_Log *)*((_QWORD *)v229[135] + 6);
                                                            if (v257)
                                                            {
                                                              __B = *(float *)v720;
                                                              clsp::CLSP_Log::LogCLSPData(v257, &__B, 1);
                                                              v258 = (clsp::CLSP_Log *)*((_QWORD *)v229[135] + 6);
                                                              if (v258)
                                                              {
                                                                __B = v219[139];
                                                                clsp::CLSP_Log::LogCLSPData(v258, &__B, 1);
                                                                v259 = (clsp::CLSP_Log *)*((_QWORD *)v229[135] + 6);
                                                                if (v259)
                                                                {
                                                                  __B = (float)*((unsigned int *)v219 + 130);
                                                                  clsp::CLSP_Log::LogCLSPData(v259, &__B, 1);
                                                                  v260 = (clsp::CLSP_Log *)*((_QWORD *)v229[135] + 6);
                                                                  if (v260)
                                                                  {
                                                                    if (*((_BYTE *)v219 + 608))
                                                                      v261 = 1.0;
                                                                    else
                                                                      v261 = 0.0;
                                                                    __B = v261;
                                                                    clsp::CLSP_Log::LogCLSPData(v260, &__B, 1);
                                                                  }
                                                                }
                                                              }
                                                            }
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
              v262 = (float32x2_t *)((char *)v229 + 1028);
              v263 = *((_QWORD *)v229[5] + 6);
              v264 = (float32x2_t)v229[132];
              goto LABEL_354;
            }
            if (*((_BYTE *)__A + 608))
            {
LABEL_380:
              clsp::ConvoyDisplacementControllerV2::resetToOpenLoop((clsp::ConvoyDisplacementControllerV2 *)v219);
LABEL_265:
              v141 = 2 * v133;
LABEL_266:
              v228 = (const float **)(__A + 118);
              v229 = v724;
              goto LABEL_267;
            }
            if (__A[104] == __A[105])
            {
              v219 = __A;
              goto LABEL_380;
            }
            __A[137] = 0.0;
            if (a3)
            {
              v390 = 0;
              v392 = (double *)*((_QWORD *)__A + 21);
              v391 = (double *)*((_QWORD *)__A + 22);
              v393 = *((_QWORD *)__A + 32);
              v394 = *((_QWORD *)__A + 26);
              v395 = (double *)*((_QWORD *)__A + 20);
              v396 = *((_QWORD *)__A + 29);
              v397 = *((_QWORD *)__A + 35);
              do
              {
                v398 = v217[v390 / 4];
                v399 = v391[5];
                v400 = v391[7];
                v401 = v391[3] * v399 + v398 * v391[2] + v391[6] * v391[4] - v400 * *v391 - v391[8] * v391[1];
                v391[5] = v398;
                v391[6] = v399;
                v391[7] = v401;
                v391[8] = v400;
                *(float *)&v398 = v401;
                *(_DWORD *)(v393 + v390) = LODWORD(v398);
                v402 = *(float *)(v215 + v390);
                v403 = v395[5];
                v404 = v395[7];
                v405 = v395[3] * v403 + v402 * v395[2] + v395[6] * v395[4] - v404 * *v395 - v395[8] * v395[1];
                v395[5] = v402;
                v395[6] = v403;
                v395[7] = v405;
                v395[8] = v404;
                *(float *)&v402 = v405;
                *(_DWORD *)(v394 + v390) = LODWORD(v402);
                v406 = v217[v390 / 4];
                v407 = v392[5];
                v408 = v392[7];
                v409 = v392[3] * v407 + v406 * v392[2] + v392[6] * v392[4] - v408 * *v392 - v392[8] * v392[1];
                v392[5] = v406;
                v392[6] = v407;
                v392[7] = v409;
                v392[8] = v408;
                *(float *)&v406 = v409;
                *(_DWORD *)(v396 + v390) = LODWORD(v406);
                v410 = __A[49];
                *(float *)&v406 = (float)((float)(*(float *)(v394 + v390) * __A[48]) - (float)(v410 * __A[46]))
                                - (float)(__A[50] * __A[47]);
                __A[49] = *(float *)&v406;
                __A[50] = v410;
                *(_DWORD *)(v397 + v390) = LODWORD(v406);
                v390 += 4;
              }
              while (__len != v390);
            }
            else
            {
              v393 = *((_QWORD *)__A + 32);
            }
            v411 = *(float *)(v393 + 4 * v719);
            v412 = *((_QWORD *)__A + 49);
            v413 = v412 - a3;
            if (v412 <= a3)
            {
              vDSP_maxv(*((const float **)__A + 35), 1, __A + 114, a3);
              vDSP_minv(*((const float **)__A + 35), 1, __A + 115, a3);
              vDSP_maxv(*((const float **)__A + 29), 1, __A + 116, a3);
              vDSP_minv(*((const float **)__A + 29), 1, __A + 117, a3);
              v421 = *((_QWORD *)__A + 49);
              if (v421)
              {
                v422 = a3 - v421;
                memmove(*((void **)__A + 38), (const void *)(*((_QWORD *)__A + 35) + 4 * v422), 4 * a3 - 4 * v422);
                memmove(*((void **)__A + 41), (const void *)(*((_QWORD *)__A + 29) + 4 * v422), 4 * a3 - 4 * v422);
              }
            }
            else
            {
              v414 = (char *)*((_QWORD *)__A + 38);
              v415 = (_BYTE *)*((_QWORD *)__A + 39);
              v416 = &v414[4 * a3];
              if (v415 != v416)
                memmove(v414, v416, v415 - v416);
              v417 = (char *)*((_QWORD *)__A + 41);
              v418 = (_BYTE *)*((_QWORD *)__A + 42);
              v419 = &v417[4 * a3];
              if (v418 != v419)
                memmove(v417, v419, v418 - v419);
              v420 = (const float *)*((_QWORD *)__A + 38);
              if (a3)
              {
                memmove((void *)&v420[v413], *((const void **)__A + 35), __len);
                memmove((void *)(*((_QWORD *)__A + 41) + 4 * v413), *((const void **)__A + 29), __len);
                v420 = (const float *)*((_QWORD *)__A + 38);
              }
              vDSP_maxv(v420, 1, __A + 114, a3);
              vDSP_minv(*((const float **)__A + 38), 1, __A + 115, a3);
              vDSP_maxv(*((const float **)__A + 41), 1, __A + 116, a3);
              vDSP_minv(*((const float **)__A + 41), 1, __A + 117, a3);
            }
            v423 = __A[114];
            v424 = __A[115];
            v425 = __A[116];
            v426 = __A[117];
            v427 = __A[100];
            v428 = v423;
            v429 = v425;
            if (v425 < v427)
            {
              v428 = __A[114];
              v429 = __A[116];
              if (v423 < v427)
              {
                __A[116] = v427;
                __A[114] = v427;
                v428 = v427;
                v429 = v427;
              }
            }
            v430 = __A[101];
            v431 = v424;
            v432 = v426;
            if (v426 > v430)
            {
              v431 = v424;
              v432 = v426;
              if (v424 > v430)
              {
                __A[117] = v430;
                __A[115] = v430;
                v431 = v430;
                v432 = v430;
              }
            }
            v433 = __A[187];
            v434 = __A[197];
            if (a3)
            {
              v435 = v429 / v428;
              v436 = 184;
              if (__A[186] == v435)
                v436 = 185;
              v437 = v432 / v431;
              v438 = 194;
              if (__A[196] == (float)(v432 / v431))
                v438 = 195;
              v439 = __A[v436];
              v440 = a3;
              do
              {
                v433 = v433 + (float)(v439 * (float)(v435 - v433));
                v434 = v434 + (float)(__A[v438] * (float)(v437 - v434));
                --v440;
              }
              while (v440);
              __A[187] = v433;
              __A[197] = v434;
            }
            v441 = v433;
            v442 = __A[134] / 100.0;
            v443 = 1.0 - v442;
            v444 = v442 + 1.0;
            v445 = v434;
            v446 = v443 <= v434;
            if (v444 < v434)
              v446 = 0;
            v447 = v444 >= v441 && v443 <= v441;
            if (!v447 && !v446)
              goto LABEL_511;
            v448 = v444 < v441;
            if (v443 > v441)
              v448 = 1;
            if (v448 || (v444 >= v445 ? (v449 = v443 > v445) : (v449 = 1), v449))
            {
              if (!v448 && !v446)
                v433 = v434;
            }
            else
            {
LABEL_511:
              if (v433 < v434)
                v433 = v434;
            }
            v450 = v425 / v423;
            v451 = v426 / v424;
            v452 = __A[121];
            if (v452 >= v433)
              v452 = v433;
            if (v452 < __A[122])
              v452 = __A[122];
            v453 = v423;
            v454 = *(float32x2_t *)(__A + 94);
            v455 = v454.f32[1] * 0.1;
            v456 = v454.f32[0] * 0.1;
            v457 = __A[123];
            v458 = v450 <= v457;
            v459 = __A[124];
            v460 = v451 <= v459;
            if (v456 <= v424)
              v460 = 0;
            if (v455 >= v453)
              v458 = 0;
            __A[120] = v452;
            if (v450 <= v457 || v455 >= v453)
            {
              v461 = v451 > v459;
              if (v456 <= v424)
                v461 = 0;
            }
            else
            {
              v461 = 1;
            }
            v462 = v411 >= v454.f32[1];
            if (v411 <= v454.f32[0])
              v462 = 1;
            if (*((_BYTE *)__A + 524))
            {
              __A[130] = __A[127];
              __A[128] = 1.0;
              goto LABEL_533;
            }
            v463 = __A[128];
            if (v463 == 1.0)
            {
              v471 = __A + 129;
              if (!v461 || v462)
                v472 = 0;
              else
                v472 = *v471 + a3;
              *((_DWORD *)__A + 129) = v472;
              v483 = *((_DWORD *)__A + 130) + a3;
              *((_DWORD *)__A + 130) = v483;
              v484 = *((_DWORD *)__A + 127);
              if (v483 < v484)
              {
                v463 = 1.0;
                if (v472 > *((_DWORD *)__A + 126))
                {
                  __A[128] = 0.0;
                  v463 = 0.0;
                  *(_QWORD *)v471 = 0;
                }
                goto LABEL_534;
              }
              *((_DWORD *)__A + 130) = v484;
              *((_BYTE *)__A + 524) = 1;
LABEL_533:
              v463 = 1.0;
            }
            else if (v458 || v460 || v462)
            {
              v482 = *((_DWORD *)__A + 129) + a3;
              *((_DWORD *)__A + 129) = v482;
              if (v482 > *((_DWORD *)__A + 125))
              {
                *((_QWORD *)__A + 64) = 1065353216;
                goto LABEL_533;
              }
            }
            else
            {
              __A[129] = 0.0;
            }
LABEL_534:
            v464 = v452;
            v465 = v444 < v464 || v443 > v464;
            if (v465 || (v469 = __A[133], v470 = __A[132], v469 > v470) || v463 != 0.0)
            {
              __A[133] = 0.0;
              v466 = 0.0;
            }
            else
            {
              v466 = v469 + 1.0;
              __A[133] = v466;
              if (v466 >= v470)
              {
                __A[133] = v470;
                v466 = v470;
              }
            }
            v467 = __A[103];
            v468 = __A[118] > (float)(v454.f32[1] * v467) || *(float *)v720 < (float)(v454.f32[0] * v467);
            *((_BYTE *)__A + 976) = v468;
            v473 = v443 < v464 && v444 > v464;
            if (!v473 && v463 == 0.0
              || (v444 > v464 ? (v476 = v443 < v464) : (v476 = 0), v476 && v466 < __A[132] && v463 == 0.0))
            {
              v474 = __A[104];
              v475 = 1.0;
              if (v468)
              {
                v474 = v474 * __A[102];
                if (v474 < __A[105])
                  v474 = __A[105];
                __A[104] = v474;
              }
            }
            else
            {
              v474 = __A[105];
              v475 = 0.0;
            }
            __A[108] = v474;
            __A[242] = v475;
            __A[243] = v475;
            if (v463 == 0.0)
            {
              *(float *)&v444 = -v411;
              v477 = (int8x8_t)vmul_f32(v454, (float32x2_t)vdup_n_s32(0x3DCCCCCDu));
              v478 = (int8x8_t)vmla_n_f32((float32x2_t)vdup_lane_s32(*(int32x2_t *)&v444, 0), v454, v474);
              v479 = vbsl_s8((int8x8_t)vcgt_f32((float32x2_t)__PAIR64__(v477.u32[1], v478.u32[0]), (float32x2_t)__PAIR64__(v478.u32[1], v477.u32[0])), v477, v478);
              v480 = (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32((float32x2_t)__PAIR64__(v479.u32[1], v454.u32[0]), (float32x2_t)__PAIR64__(v454.u32[1], v479.u32[0])), (int8x8_t)v454, v479);
            }
            else
            {
              __A[120] = 1.0;
              __A[206] = 1.0;
              __A[187] = __A[186];
              __A[197] = __A[196];
              v480 = vmul_n_f32(v454, __A[105]);
            }
            v481 = -v480.f32[0];
            v480.i32[0] = v480.i32[1];
            if (v480.f32[1] > v481)
              v480.f32[0] = v481;
            v219 = __A;
            __A[109] = v480.f32[0];
            __A[139] = v411;
            goto LABEL_265;
          }
          v135 = *((_QWORD *)this + 104);
          if (v135)
          {
            v136 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)v135 + 32))(v135, v133);
          }
          else
          {
            v154 = *((_QWORD *)this + 101);
            if (v133 >= (unint64_t)((*((_QWORD *)this + 102) - v154) >> 3))
              v136 = 0;
            else
              v136 = *(ausdk::AUElement **)(v154 + 8 * v133);
          }
          ausdk::AUElement::SetParameter(v136, 0x16u, 0.0, 0);
          v155 = (*v726)[2 * v133];
          *((_WORD *)v155 + 496) = 257;
          *((_BYTE *)v155 + 994) = 1;
          v156 = v155[53];
          if (v156)
          {
            v157 = *((_DWORD *)v156 + 2);
            if (v157 == 1)
            {
              *((_QWORD *)v156 + 52) = 0;
              *((_QWORD *)v156 + 53) = 0;
              v156[114] = 1.0;
              v156[184] = 1.0;
              v158 = v156[99];
              v159 = fabsf(v156[95]);
              v160 = fabsf(v156[96]);
              if (v160 < v159)
                v159 = v160;
              v161 = v158 * v159;
              *((float *)v156 + 19) = v161;
              *((float *)v156 + 20) = 1.0 / v161;
              *((float *)v156 + 103) = v161;
              *((float *)v156 + 194) = v161;
              *((float *)v156 + 102) = v158;
              v156 = v155[53];
              if (!v156)
                goto LABEL_357;
              v157 = *((_DWORD *)v156 + 2);
            }
            if (v157 == 4)
            {
              *((_QWORD *)v156 + 55) = 0;
              *((_QWORD *)v156 + 56) = 0;
              v156[120] = 1.0;
              v156[206] = 1.0;
              v162 = v156[105];
              v163 = fabsf(v156[94]);
              v164 = fabsf(v156[95]);
              if (v164 < v163)
                v163 = v164;
              v165 = v162 * v163;
              *((float *)v156 + 24) = v165;
              *((float *)v156 + 25) = 1.0 / v165;
              *((float *)v156 + 109) = v165;
              *((float *)v156 + 216) = v165;
              *((float *)v156 + 108) = v162;
              v156[187] = v156[186];
              v156[197] = v156[196];
            }
          }
LABEL_357:
          ++v133;
          v306 = (char *)*((_QWORD *)this + 106);
          v106 = (char *)*((_QWORD *)this + 105);
          if (v133 >= (v306 - v106) >> 4)
          {
            if (v106 != v306)
            {
              v485 = 0.0;
              do
              {
                v486 = *(_QWORD *)v106;
                v106 += 16;
                v485 = v485 + *(float *)(*(_QWORD *)(v486 + 792) + 12);
              }
              while (v106 != v306);
              goto LABEL_588;
            }
LABEL_587:
            v485 = 0.0;
LABEL_588:
            v487 = *((_QWORD *)this + 9);
            if (v487)
            {
              v488 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v487 + 32))(v487, 0);
            }
            else
            {
              v489 = (ausdk::AUElement **)*((_QWORD *)this + 6);
              if (*((ausdk::AUElement ***)this + 7) == v489)
                v488 = 0;
              else
                v488 = *v489;
            }
            ausdk::AUElement::SetParameter(v488, 0x10u, v485, 0);
            v73 = *((_QWORD *)this + 106);
            v74 = *((_QWORD *)this + 105);
LABEL_594:
            if (v73 != v74)
            {
              v490 = 0;
              v491 = 0;
              do
              {
                v492 = *(_QWORD *)(v74 + v490);
                v493 = *((_QWORD *)this + 9);
                if (v493)
                {
                  v494 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v493 + 32))(v493, 0);
                }
                else
                {
                  v495 = (ausdk::AUElement **)*((_QWORD *)this + 6);
                  if (*((ausdk::AUElement ***)this + 7) == v495)
                    v494 = 0;
                  else
                    v494 = *v495;
                }
                *(_BYTE *)(v492 + 744) = ausdk::AUElement::GetParameter(v494, 0) != 0.0;
                v496 = *(_QWORD *)(*((_QWORD *)this + 105) + v490);
                v497 = *((_QWORD *)this + 9);
                if (v497)
                {
                  v498 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v497 + 32))(v497, 0);
                }
                else
                {
                  v499 = (ausdk::AUElement **)*((_QWORD *)this + 6);
                  if (*((ausdk::AUElement ***)this + 7) == v499)
                    v498 = 0;
                  else
                    v498 = *v499;
                }
                *(_BYTE *)(v496 + 745) = ausdk::AUElement::GetParameter(v498, 0x13u) != 0.0;
                v500 = *(_QWORD *)(*((_QWORD *)this + 105) + v490);
                v501 = *((_QWORD *)this + 9);
                if (v501)
                {
                  v502 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v501 + 32))(v501, 0);
                }
                else
                {
                  v503 = (ausdk::AUElement **)*((_QWORD *)this + 6);
                  if (*((ausdk::AUElement ***)this + 7) == v503)
                    v502 = 0;
                  else
                    v502 = *v503;
                }
                v504 = ausdk::AUElement::GetParameter(v502, 1u) != 0.0;
                (*(void (**)(_QWORD, _BOOL8))(**(_QWORD **)(v500 + 424) + 136))(*(_QWORD *)(v500 + 424), v504);
                v505 = *(_QWORD *)(*((_QWORD *)this + 105) + v490);
                v506 = *((_QWORD *)this + 104);
                if (v506)
                {
                  v507 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)v506
                                                                                                  + 32))(v506, v491);
                }
                else
                {
                  v508 = *((_QWORD *)this + 101);
                  if (v491 >= (unint64_t)((*((_QWORD *)this + 102) - v508) >> 3))
                    v507 = 0;
                  else
                    v507 = *(ausdk::AUElement **)(v508 + 8 * v491);
                }
                *(_BYTE *)(v505 + 264) = ausdk::AUElement::GetParameter(v507, 0x15u) != 0.0;
                v509 = *(_QWORD *)(*((_QWORD *)this + 105) + v490);
                v510 = *((_QWORD *)this + 104);
                if (v510)
                {
                  v511 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)v510
                                                                                                  + 32))(v510, v491);
                }
                else
                {
                  v512 = *((_QWORD *)this + 101);
                  if (v491 >= (unint64_t)((*((_QWORD *)this + 102) - v512) >> 3))
                    v511 = 0;
                  else
                    v511 = *(ausdk::AUElement **)(v512 + 8 * v491);
                }
                *(_BYTE *)(v509 + 265) = ausdk::AUElement::GetParameter(v511, 0x16u) != 0.0;
                ++v491;
                v74 = *((_QWORD *)this + 105);
                v490 += 16;
              }
              while (v491 < (*((_QWORD *)this + 106) - v74) >> 4);
            }
LABEL_622:
            v513 = *((_QWORD *)this + 111);
            if (v513)
            {
              v514 = *((_QWORD *)this + 9);
              if (v514)
              {
                v515 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v514 + 32))(v514, 0);
              }
              else
              {
                v516 = (ausdk::AUElement **)*((_QWORD *)this + 6);
                if (*((ausdk::AUElement ***)this + 7) == v516)
                  v515 = 0;
                else
                  v515 = *v516;
              }
              *(_BYTE *)(v513 + 8) = ausdk::AUElement::GetParameter(v515, 0x12u) != 0.0;
            }
            v517 = *((double *)this + 34);
            v518 = *((_QWORD *)this + 35);
            if (*((_BYTE *)this + 1329))
            {
              clsp::ThermalStateVector_v3_separate<clsp::CL>::TheInstance();
              v519 = &qword_1EF136BE0;
            }
            else
            {
              clsp::ThermalStateVector_v3_separate<clsp::OL>::TheInstance();
              v519 = &qword_1EF136C10;
            }
            v520 = (double)v518 * 0.0000000416666667;
            v521 = v520 - *(double *)v519;
            if (shouldTraceRender())
            {
              v522 = spp3SubsystemAsync();
              if (v522)
              {
                if ((*(_BYTE *)(v522 + 8) & 1) != 0)
                {
                  v523 = *(NSObject **)v522;
                  if (*(_QWORD *)v522)
                  {
                    if (os_log_type_enabled(*(os_log_t *)v522, OS_LOG_TYPE_DEBUG))
                    {
                      *(_DWORD *)buf = 136316162;
                      *(_QWORD *)&buf[4] = "AUSpeakerProtectionV3.cpp";
                      *(_WORD *)&buf[12] = 1024;
                      *(_DWORD *)&buf[14] = 4578;
                      *(_WORD *)&buf[18] = 1024;
                      *(_DWORD *)&buf[20] = (int)v517;
                      *(_WORD *)&buf[24] = 2048;
                      *(double *)&buf[26] = v521;
                      *(_WORD *)&buf[34] = 2048;
                      *(double *)&buf[36] = (double)v518 * 0.0000000416666667;
                      _os_log_impl(&dword_1B5ED0000, v523, OS_LOG_TYPE_DEBUG, "%25s:%-5d RenderTime %d, RenderTimeDelta %f, HostTime %f", buf, 0x2Cu);
                    }
                  }
                }
              }
            }
            v524 = *((double *)this + 78);
            if (*((_BYTE *)this + 1329))
            {
              clsp::ThermalStateVector_v3_separate<clsp::CL>::TheInstance();
              v525 = &qword_1EF136BE0;
            }
            else
            {
              clsp::ThermalStateVector_v3_separate<clsp::OL>::TheInstance();
              v525 = &qword_1EF136C10;
            }
            *(double *)v525 = v520 + (double)a3 / v524;
            if (*((_BYTE *)this + 1329))
            {
              if (*((_BYTE *)this + 532)
                && (v526 = *((_QWORD *)this + 106),
                    v527 = *((_QWORD *)this + 105),
                    clsp::ThermalStateVector_v3_separate<clsp::CL>::TheInstance(),
                    (v526 - v527) >> 4 != 0xAAAAAAAAAAAAAAABLL
                                        * ((qword_1EF136BC8
                                          - clsp::ThermalStateVector_v3_separate<clsp::CL>::TheInstance(void)::inst) >> 3)))
              {
                clsp::ThermalStateVector_v3_separate<clsp::CL>::TheInstance();
                v544 = clsp::ThermalStateVector_v3_separate<clsp::CL>::TheInstance(void)::inst;
                clsp::ThermalStateVector_v3_separate<clsp::CL>::TheInstance();
                if (v544 != qword_1EF136BC8)
                {
                  for (i = v544 + 24; i != qword_1EF136BC8; i += 24)
                  {
                    if ((float)(*(float *)(v544 + 12) + *(float *)(v544 + 8)) < (float)(*(float *)(i + 12)
                                                                                       + *(float *)(i + 8)))
                      v544 = i;
                  }
                }
                v546 = (uint64_t *)*((_QWORD *)this + 105);
                v547 = (uint64_t *)*((_QWORD *)this + 106);
                if (v546 != v547)
                {
                  v548 = v521;
                  do
                  {
                    clsp::ThermalController::restoreThermalState(*v546 + 432, v544);
                    v549 = *v546;
                    shouldTraceRender();
                    clsp::ThermalController::updateThermalState((clsp::ThermalController *)(v549 + 432), v548);
                    v546 += 2;
                  }
                  while (v546 != v547);
                }
              }
              else
              {
                v528 = *((_QWORD *)this + 105);
                if (*((_QWORD *)this + 106) != v528)
                {
                  v529 = 0;
                  v530 = 0;
                  v531 = v521;
                  do
                  {
                    v532 = *(_QWORD *)(v528 + v529);
                    v533 = clsp::ThermalStateVector_v3_separate<clsp::CL>::ThermalState(v530);
                    clsp::ThermalController::restoreThermalState(v532 + 432, (uint64_t)v533);
                    v534 = *(_QWORD *)(*((_QWORD *)this + 105) + v529);
                    shouldTraceRender();
                    clsp::ThermalController::updateThermalState((clsp::ThermalController *)(v534 + 432), v531);
                    ++v530;
                    v528 = *((_QWORD *)this + 105);
                    v529 += 16;
                  }
                  while (v530 < (*((_QWORD *)this + 106) - v528) >> 4);
                }
              }
            }
            else if (*((_BYTE *)this + 532)
                   && (v535 = *((_QWORD *)this + 106),
                       v536 = *((_QWORD *)this + 105),
                       clsp::ThermalStateVector_v3_separate<clsp::OL>::TheInstance(),
                       (v535 - v536) >> 4 != 0xAAAAAAAAAAAAAAABLL
                                           * ((qword_1EF136BF8
                                             - clsp::ThermalStateVector_v3_separate<clsp::OL>::TheInstance(void)::inst) >> 3)))
            {
              clsp::ThermalStateVector_v3_separate<clsp::OL>::TheInstance();
              v550 = clsp::ThermalStateVector_v3_separate<clsp::OL>::TheInstance(void)::inst;
              clsp::ThermalStateVector_v3_separate<clsp::OL>::TheInstance();
              if (v550 != qword_1EF136BF8)
              {
                for (j = v550 + 24; j != qword_1EF136BF8; j += 24)
                {
                  if ((float)(*(float *)(v550 + 12) + *(float *)(v550 + 8)) < (float)(*(float *)(j + 12)
                                                                                     + *(float *)(j + 8)))
                    v550 = j;
                }
              }
              v552 = (uint64_t *)*((_QWORD *)this + 105);
              v553 = (uint64_t *)*((_QWORD *)this + 106);
              if (v552 != v553)
              {
                v554 = v521;
                do
                {
                  clsp::ThermalController::restoreThermalState(*v552 + 432, v550);
                  v555 = *v552;
                  shouldTraceRender();
                  clsp::ThermalController::updateThermalState((clsp::ThermalController *)(v555 + 432), v554);
                  v552 += 2;
                }
                while (v552 != v553);
              }
            }
            else
            {
              v537 = *((_QWORD *)this + 105);
              if (*((_QWORD *)this + 106) != v537)
              {
                v538 = 0;
                v539 = 0;
                v540 = v521;
                do
                {
                  v541 = *(_QWORD *)(v537 + v538);
                  v542 = clsp::ThermalStateVector_v3_separate<clsp::OL>::ThermalState(v539);
                  clsp::ThermalController::restoreThermalState(v541 + 432, (uint64_t)v542);
                  v543 = *(_QWORD *)(*((_QWORD *)this + 105) + v538);
                  shouldTraceRender();
                  clsp::ThermalController::updateThermalState((clsp::ThermalController *)(v543 + 432), v540);
                  ++v539;
                  v537 = *((_QWORD *)this + 105);
                  v538 += 16;
                }
                while (v539 < (*((_QWORD *)this + 106) - v537) >> 4);
              }
            }
            clsp::CLSPKernel_v5::ProcessByThermalBlock(v726, (uint64_t ***)this + 108, (uint64_t *)this + 111, (uint64_t *)a5, (uint64_t *)a7, *((unsigned __int8 *)this + 532), a3);
            if (*((_BYTE *)this + 1329))
            {
              if (*((_BYTE *)this + 532)
                && (v556 = *((_QWORD *)this + 106),
                    v557 = *((_QWORD *)this + 105),
                    clsp::ThermalStateVector_v3_separate<clsp::CL>::TheInstance(),
                    (v556 - v557) >> 4 != 0xAAAAAAAAAAAAAAABLL
                                        * ((qword_1EF136BC8
                                          - clsp::ThermalStateVector_v3_separate<clsp::CL>::TheInstance(void)::inst) >> 3)))
              {
                v677 = (float **)*((_QWORD *)this + 105);
                v678 = (float **)*((_QWORD *)this + 106);
                if (v677 != v678)
                {
                  v679 = v677 + 2;
                  if (v677 + 2 != v678)
                  {
                    v680 = *v677;
                    v681 = v677 + 2;
                    do
                    {
                      v683 = *v681;
                      v681 += 2;
                      v682 = v683;
                      if ((float)(v680[110] + (float)(v680[146] + v680[151])) < (float)(v683[110]
                                                                                       + (float)(v683[146] + v683[151])))
                      {
                        v680 = v682;
                        v677 = v679;
                      }
                      v679 = v681;
                    }
                    while (v681 != v678);
                  }
                }
                for (k = 0; ; ++k)
                {
                  clsp::ThermalStateVector_v3_separate<clsp::CL>::TheInstance();
                  if (k >= 0xAAAAAAAAAAAAAAABLL
                          * ((qword_1EF136BC8 - clsp::ThermalStateVector_v3_separate<clsp::CL>::TheInstance(void)::inst) >> 3))
                    break;
                  v685 = *v677;
                  v686 = clsp::ThermalStateVector_v3_separate<clsp::CL>::ThermalState(k);
                  shouldTraceRender();
                  v687 = *((_DWORD *)v685 + 146);
                  v688 = *((_DWORD *)v685 + 151);
                  v689 = *((_DWORD *)v685 + 166);
                  v690 = *((_DWORD *)v685 + 139);
                  *((float *)v686 + 1) = v685[156];
                  *((_DWORD *)v686 + 2) = v687;
                  *((_DWORD *)v686 + 3) = v688;
                  *((_DWORD *)v686 + 4) = v689;
                  *((_DWORD *)v686 + 5) = v690;
                  *v686 = 1;
                }
              }
              else
              {
                v558 = *((_QWORD *)this + 105);
                if (*((_QWORD *)this + 106) != v558)
                {
                  v559 = 0;
                  v560 = 0;
                  do
                  {
                    v561 = *(_DWORD **)(v558 + v559);
                    v562 = clsp::ThermalStateVector_v3_separate<clsp::CL>::ThermalState(v560);
                    shouldTraceRender();
                    v563 = v561[146];
                    v564 = v561[151];
                    v565 = v561[166];
                    v566 = v561[139];
                    *((_DWORD *)v562 + 1) = v561[156];
                    *((_DWORD *)v562 + 2) = v563;
                    *((_DWORD *)v562 + 3) = v564;
                    *((_DWORD *)v562 + 4) = v565;
                    *((_DWORD *)v562 + 5) = v566;
                    *v562 = 1;
                    ++v560;
                    v558 = *((_QWORD *)this + 105);
                    v559 += 16;
                  }
                  while (v560 < (*((_QWORD *)this + 106) - v558) >> 4);
                }
              }
            }
            else if (*((_BYTE *)this + 532)
                   && (v567 = *((_QWORD *)this + 106),
                       v568 = *((_QWORD *)this + 105),
                       clsp::ThermalStateVector_v3_separate<clsp::OL>::TheInstance(),
                       (v567 - v568) >> 4 != 0xAAAAAAAAAAAAAAABLL
                                           * ((qword_1EF136BF8
                                             - clsp::ThermalStateVector_v3_separate<clsp::OL>::TheInstance(void)::inst) >> 3)))
            {
              v705 = (float **)*((_QWORD *)this + 105);
              v706 = (float **)*((_QWORD *)this + 106);
              if (v705 != v706)
              {
                v707 = v705 + 2;
                if (v705 + 2 != v706)
                {
                  v708 = *v705;
                  v709 = v705 + 2;
                  do
                  {
                    v711 = *v709;
                    v709 += 2;
                    v710 = v711;
                    if ((float)(v708[110] + (float)(v708[146] + v708[151])) < (float)(v711[110]
                                                                                     + (float)(v711[146] + v711[151])))
                    {
                      v708 = v710;
                      v705 = v707;
                    }
                    v707 = v709;
                  }
                  while (v709 != v706);
                }
              }
              for (m = 0; ; ++m)
              {
                clsp::ThermalStateVector_v3_separate<clsp::OL>::TheInstance();
                if (m >= 0xAAAAAAAAAAAAAAABLL
                        * ((qword_1EF136BF8 - clsp::ThermalStateVector_v3_separate<clsp::OL>::TheInstance(void)::inst) >> 3))
                  break;
                v713 = *v705;
                v714 = clsp::ThermalStateVector_v3_separate<clsp::OL>::ThermalState(m);
                shouldTraceRender();
                v715 = *((_DWORD *)v713 + 146);
                v716 = *((_DWORD *)v713 + 151);
                v717 = *((_DWORD *)v713 + 166);
                v718 = *((_DWORD *)v713 + 139);
                *((float *)v714 + 1) = v713[156];
                *((_DWORD *)v714 + 2) = v715;
                *((_DWORD *)v714 + 3) = v716;
                *((_DWORD *)v714 + 4) = v717;
                *((_DWORD *)v714 + 5) = v718;
                *v714 = 1;
              }
            }
            else
            {
              v569 = *((_QWORD *)this + 105);
              if (*((_QWORD *)this + 106) != v569)
              {
                v570 = 0;
                v571 = 0;
                do
                {
                  v572 = *(_DWORD **)(v569 + v570);
                  v573 = clsp::ThermalStateVector_v3_separate<clsp::OL>::ThermalState(v571);
                  shouldTraceRender();
                  v574 = v572[146];
                  v575 = v572[151];
                  v576 = v572[166];
                  v577 = v572[139];
                  *((_DWORD *)v573 + 1) = v572[156];
                  *((_DWORD *)v573 + 2) = v574;
                  *((_DWORD *)v573 + 3) = v575;
                  *((_DWORD *)v573 + 4) = v576;
                  *((_DWORD *)v573 + 5) = v577;
                  *v573 = 1;
                  ++v571;
                  v569 = *((_QWORD *)this + 105);
                  v570 += 16;
                }
                while (v571 < (*((_QWORD *)this + 106) - v569) >> 4);
              }
            }
            if (*((_QWORD *)this + 106) == *((_QWORD *)this + 105))
            {
              v672 = 1.0;
              v582 = 0.0;
              v581 = 1.3333;
              v580 = 0.0;
LABEL_796:
              v674 = *((_QWORD *)this + 9);
              if (v674)
              {
                v675 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v674 + 32))(v674, 0);
              }
              else
              {
                v676 = (ausdk::AUElement **)*((_QWORD *)this + 6);
                if (*((ausdk::AUElement ***)this + 7) == v676)
                  v675 = 0;
                else
                  v675 = *v676;
              }
              ausdk::AUElement::SetParameter(v675, 0xFu, v580, 0);
              v691 = *((_QWORD *)this + 9);
              if (v691)
              {
                v692 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v691 + 32))(v691, 0);
              }
              else
              {
                v693 = (ausdk::AUElement **)*((_QWORD *)this + 6);
                if (*((ausdk::AUElement ***)this + 7) == v693)
                  v692 = 0;
                else
                  v692 = *v693;
              }
              v694 = log10f(v581);
              ausdk::AUElement::SetParameter(v692, 0xCu, v694 * 20.0, 0);
              v695 = *((_QWORD *)this + 9);
              if (v695)
              {
                v696 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v695 + 32))(v695, 0);
              }
              else
              {
                v697 = (ausdk::AUElement **)*((_QWORD *)this + 6);
                if (*((ausdk::AUElement ***)this + 7) == v697)
                  v696 = 0;
                else
                  v696 = *v697;
              }
              v698 = log10f(v672);
              ausdk::AUElement::SetParameter(v696, 0x11u, v698 * 20.0, 0);
              v699 = *((_QWORD *)this + 9);
              if (v699)
              {
                v700 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v699 + 32))(v699, 0);
              }
              else
              {
                v701 = (ausdk::AUElement **)*((_QWORD *)this + 6);
                if (*((ausdk::AUElement ***)this + 7) == v701)
                  v700 = 0;
                else
                  v700 = *v701;
              }
              ausdk::AUElement::SetParameter(v700, 0xDu, v582, 0);
              goto LABEL_826;
            }
            v578 = 0;
            v579 = 0;
            v580 = 0.0;
            v581 = 1.3333;
            v582 = 0.0;
            while (2)
            {
              if (shouldTraceRender())
              {
                v583 = (NSObject **)spp3SubsystemAsync();
                if (v583)
                {
                  v584 = *v583;
                  if (!*v583)
                    goto LABEL_694;
                }
                else
                {
                  v584 = MEMORY[0x1E0C81028];
                }
                if (os_log_type_enabled(v584, OS_LOG_TYPE_DEBUG))
                {
                  Temperature = clsp::ClosedLoopThermalModule::getTemperature((clsp::ClosedLoopThermalModule *)((*v726)[v578 / 8] + 19));
                  v586 = (*v726)[v578 / 8];
                  v587 = *((float *)v586 + 146);
                  v588 = *((float *)v586 + 151);
                  v589 = *((float *)v586 + 110);
                  v590 = *((float *)v586 + 73);
                  DisplacementFilterGain = clsp::CLSPKernel_v5::GetDisplacementFilterGain((clsp::CLSPKernel_v5 *)v586[53]);
                  v592 = (float *)(*v726)[v578 / 8];
                  v593 = v592[177];
                  v594 = v592[166];
                  v595 = v592[140];
                  v596 = v592[89];
                  *(_DWORD *)buf = 136317698;
                  *(_QWORD *)&buf[4] = "AUSpeakerProtectionV3.cpp";
                  *(_WORD *)&buf[12] = 1024;
                  *(_DWORD *)&buf[14] = 4461;
                  *(_WORD *)&buf[18] = 1024;
                  *(_DWORD *)&buf[20] = v579;
                  *(_WORD *)&buf[24] = 2048;
                  *(double *)&buf[26] = Temperature;
                  *(_WORD *)&buf[34] = 2048;
                  *(double *)&buf[36] = (float)(v589 + (float)(v587 + v588));
                  v730 = 2048;
                  v731 = v590;
                  v732 = 2048;
                  v733 = DisplacementFilterGain;
                  v734 = 2048;
                  v735 = v593;
                  v736 = 2048;
                  v737 = v594;
                  v738 = 2048;
                  v739 = v595;
                  v740 = 2048;
                  v741 = v596;
                  _os_log_impl(&dword_1B5ED0000, v584, OS_LOG_TYPE_DEBUG, "%25s:%-5d Ch %d; T_CL=%6.2f; T_OL=%6.2f; TlimAdj=%6.2f; DGain=%5.2f; TGain=%6.4f; tgtgain=%4.2f, hli"
                    "mgain=%f, sReb=%f",
                    buf,
                    0x68u);
                }
              }
LABEL_694:
              v597 = *((_QWORD *)this + 104);
              if (v597)
              {
                v598 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)v597 + 32))(v597, v579);
              }
              else
              {
                v599 = *((_QWORD *)this + 101);
                if (v579 >= (unint64_t)((*((_QWORD *)this + 102) - v599) >> 3))
                  v598 = 0;
                else
                  v598 = *(ausdk::AUElement **)(v599 + 8 * v579);
              }
              v600 = clsp::ClosedLoopThermalModule::getTemperature((clsp::ClosedLoopThermalModule *)(*(_QWORD *)(*((_QWORD *)this + 105) + v578) + 152));
              ausdk::AUElement::SetParameter(v598, 7u, v600, 0);
              v601 = *((_QWORD *)this + 104);
              if (v601)
              {
                v602 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)v601 + 32))(v601, v579);
              }
              else
              {
                v603 = *((_QWORD *)this + 101);
                if (v579 >= (unint64_t)((*((_QWORD *)this + 102) - v603) >> 3))
                  v602 = 0;
                else
                  v602 = *(ausdk::AUElement **)(v603 + 8 * v579);
              }
              ausdk::AUElement::SetParameter(v602, 8u, *(float *)(*(_QWORD *)(*((_QWORD *)this + 105) + v578) + 440)+ (float)(*(float *)(*(_QWORD *)(*((_QWORD *)this + 105) + v578) + 584)+ *(float *)(*(_QWORD *)(*((_QWORD *)this + 105) + v578) + 604)), 0);
              v604 = *((_QWORD *)this + 104);
              if (v604)
              {
                v605 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)v604 + 32))(v604, v579);
              }
              else
              {
                v606 = *((_QWORD *)this + 101);
                if (v579 >= (unint64_t)((*((_QWORD *)this + 102) - v606) >> 3))
                  v605 = 0;
                else
                  v605 = *(ausdk::AUElement **)(v606 + 8 * v579);
              }
              v607 = (*v726)[v578 / 8][32];
              if (v607)
                (*(void (**)(const float *))(*(_QWORD *)v607 + 72))(v607);
              else
                v608 = 0.0;
              ausdk::AUElement::SetParameter(v605, 0x24u, v608, 0);
              v609 = *((_QWORD *)this + 104);
              if (v609)
              {
                v610 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)v609 + 32))(v609, v579);
              }
              else
              {
                v611 = *((_QWORD *)this + 101);
                if (v579 >= (unint64_t)((*((_QWORD *)this + 102) - v611) >> 3))
                  v610 = 0;
                else
                  v610 = *(ausdk::AUElement **)(v611 + 8 * v579);
              }
              ausdk::AUElement::SetParameter(v610, 0x28u, *(float *)(*(_QWORD *)(*((_QWORD *)this + 105) + v578) + 1028), 0);
              v612 = *((_QWORD *)this + 104);
              if (v612)
              {
                v613 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)v612 + 32))(v612, v579);
              }
              else
              {
                v614 = *((_QWORD *)this + 101);
                if (v579 >= (unint64_t)((*((_QWORD *)this + 102) - v614) >> 3))
                  v613 = 0;
                else
                  v613 = *(ausdk::AUElement **)(v614 + 8 * v579);
              }
              ausdk::AUElement::SetParameter(v613, 0x29u, *(float *)(*(_QWORD *)(*((_QWORD *)this + 105) + v578) + 1032), 0);
              v615 = *((_QWORD *)this + 104);
              if (v615)
              {
                v616 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)v615 + 32))(v615, v579);
              }
              else
              {
                v617 = *((_QWORD *)this + 101);
                if (v579 >= (unint64_t)((*((_QWORD *)this + 102) - v617) >> 3))
                  v616 = 0;
                else
                  v616 = *(ausdk::AUElement **)(v617 + 8 * v579);
              }
              v618 = (*v726)[v578 / 8][53];
              v619 = -1.0;
              if (v618)
              {
                v620 = *((_DWORD *)v618 + 2);
                if (v620 == 4)
                {
                  v621 = (float *)(v618 + 138);
LABEL_732:
                  v619 = *v621;
                }
                else if (v620 == 1)
                {
                  v621 = (float *)(v618 + 126);
                  goto LABEL_732;
                }
              }
              ausdk::AUElement::SetParameter(v616, 0x2Bu, v619, 0);
              v622 = *((_QWORD *)this + 104);
              if (v622)
              {
                v623 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)v622 + 32))(v622, v579);
              }
              else
              {
                v624 = *((_QWORD *)this + 101);
                if (v579 >= (unint64_t)((*((_QWORD *)this + 102) - v624) >> 3))
                  v623 = 0;
                else
                  v623 = *(ausdk::AUElement **)(v624 + 8 * v579);
              }
              v625 = (*v726)[v578 / 8][53];
              v626 = -1.0;
              if (v625)
              {
                v627 = *((_DWORD *)v625 + 2);
                if (v627 == 4)
                {
                  v626 = v625[128];
                }
                else if (v627 == 1)
                {
                  v626 = v625[119];
                }
              }
              ausdk::AUElement::SetParameter(v623, 0x2Cu, v626, 0);
              v628 = *((_QWORD *)this + 104);
              if (v628)
              {
                v629 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)v628 + 32))(v628, v579);
              }
              else
              {
                v630 = *((_QWORD *)this + 101);
                if (v579 >= (unint64_t)((*((_QWORD *)this + 102) - v630) >> 3))
                  v629 = 0;
                else
                  v629 = *(ausdk::AUElement **)(v630 + 8 * v579);
              }
              v631 = (*v726)[v578 / 8][53];
              v632 = -1.0;
              if (v631)
              {
                v633 = *((_DWORD *)v631 + 2);
                if (v633 == 4)
                {
                  v634 = v631[109];
                  v635 = -v631[94];
                  v636 = v631[95];
LABEL_753:
                  if (v636 <= v635)
                    v635 = v636;
                  v632 = (float)(v634 / v635) * 100.0;
                }
                else if (v633 == 1)
                {
                  v634 = v631[103];
                  v635 = -v631[95];
                  v636 = v631[96];
                  goto LABEL_753;
                }
              }
              ausdk::AUElement::SetParameter(v629, 0x2Du, v632, 0);
              v637 = *((_QWORD *)this + 104);
              if (v637)
              {
                v638 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)v637 + 32))(v637, v579);
              }
              else
              {
                v639 = *((_QWORD *)this + 101);
                if (v579 >= (unint64_t)((*((_QWORD *)this + 102) - v639) >> 3))
                  v638 = 0;
                else
                  v638 = *(ausdk::AUElement **)(v639 + 8 * v579);
              }
              v640 = (*v726)[v578 / 8][53];
              v641 = -1.0;
              if (v640)
              {
                v642 = *((_DWORD *)v640 + 2);
                if (v642 == 4)
                {
                  v643 = (float *)(v640 + 206);
LABEL_766:
                  v641 = *v643;
                }
                else if (v642 == 1)
                {
                  v643 = (float *)(v640 + 184);
                  goto LABEL_766;
                }
              }
              ausdk::AUElement::SetParameter(v638, 0x2Eu, v641, 0);
              v644 = *((_QWORD *)this + 104);
              if (v644)
              {
                v645 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)v644 + 32))(v644, v579);
              }
              else
              {
                v646 = *((_QWORD *)this + 101);
                if (v579 >= (unint64_t)((*((_QWORD *)this + 102) - v646) >> 3))
                  v645 = 0;
                else
                  v645 = *(ausdk::AUElement **)(v646 + 8 * v579);
              }
              v647 = log10f(*(float *)(*(_QWORD *)(*((_QWORD *)this + 105) + v578) + 708));
              ausdk::AUElement::SetParameter(v645, 0x40u, v647 * 20.0, 0);
              v648 = *((_QWORD *)this + 104);
              if (v648)
              {
                v649 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)v648 + 32))(v648, v579);
              }
              else
              {
                v650 = *((_QWORD *)this + 101);
                if (v579 >= (unint64_t)((*((_QWORD *)this + 102) - v650) >> 3))
                  v649 = 0;
                else
                  v649 = *(ausdk::AUElement **)(v650 + 8 * v579);
              }
              v651 = log10f(*(float *)(*(_QWORD *)(*((_QWORD *)this + 105) + v578) + 740));
              ausdk::AUElement::SetParameter(v649, 0x42u, v651 * 20.0, 0);
              v652 = *((_QWORD *)this + 104);
              if (v652)
              {
                v653 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)v652 + 32))(v652, v579);
              }
              else
              {
                v654 = *((_QWORD *)this + 101);
                if (v579 >= (unint64_t)((*((_QWORD *)this + 102) - v654) >> 3))
                  v653 = 0;
                else
                  v653 = *(ausdk::AUElement **)(v654 + 8 * v579);
              }
              v655 = clsp::CLSPKernel_v5::GetDisplacementFilterGain(*(clsp::CLSPKernel_v5 **)(*(_QWORD *)(*((_QWORD *)this + 105) + v578)
                                                                                            + 424));
              ausdk::AUElement::SetParameter(v653, 0x41u, v655, 0);
              v656 = *(_QWORD *)(*((_QWORD *)this + 105) + v578);
              v657 = *(float *)(*(_QWORD *)(v656 + 784) + 16);
              v658 = *(clsp::CLSP_Log **)(*(_QWORD *)(*((_QWORD *)this + 142) + v578) + 96);
              if (v658)
              {
                *(float *)buf = (float)a3;
                clsp::CLSP_Log::LogCLSPData(v658, (const float *)buf, 1);
                v659 = *(clsp::CLSP_Log **)(*(_QWORD *)(*((_QWORD *)this + 142) + v578) + 96);
                if (*((_BYTE *)this + 1329))
                {
                  clsp::ThermalStateVector_v3_separate<clsp::CL>::TheInstance();
                  v660 = &qword_1EF136BE0;
                }
                else
                {
                  clsp::ThermalStateVector_v3_separate<clsp::OL>::TheInstance();
                  v660 = &qword_1EF136C10;
                }
                v661 = *(double *)v660;
                *(float *)buf = v661;
                clsp::CLSP_Log::LogCLSPData(v659, (const float *)buf, 1);
                v662 = *(clsp::CLSP_Log **)(*(_QWORD *)(*((_QWORD *)this + 142) + v578) + 96);
                *(float *)buf = *(float *)(*(_QWORD *)(*((_QWORD *)this + 105) + v578) + 440)
                              + (float)(*(float *)(*(_QWORD *)(*((_QWORD *)this + 105) + v578) + 584)
                                      + *(float *)(*(_QWORD *)(*((_QWORD *)this + 105) + v578) + 604));
                clsp::CLSP_Log::LogCLSPData(v662, (const float *)buf, 1);
                v663 = *(clsp::CLSP_Log **)(*(_QWORD *)(*((_QWORD *)this + 142) + v578) + 96);
                *(_DWORD *)buf = *(_DWORD *)(*(_QWORD *)(*((_QWORD *)this + 105) + v578) + 96);
                clsp::CLSP_Log::LogCLSPData(v663, (const float *)buf, 1);
                v664 = *(clsp::CLSP_Log **)(*(_QWORD *)(*((_QWORD *)this + 142) + v578) + 96);
                *(float *)buf = log10f(*(float *)(*(_QWORD *)(*((_QWORD *)this + 105) + v578) + 708)) * 20.0;
                clsp::CLSP_Log::LogCLSPData(v664, (const float *)buf, 1);
                v665 = *(clsp::CLSP_Log **)(*(_QWORD *)(*((_QWORD *)this + 142) + v578) + 96);
                *(_DWORD *)buf = clsp::ClosedLoopThermalModule::getTemperature((clsp::ClosedLoopThermalModule *)(*(_QWORD *)(*((_QWORD *)this + 105) + v578) + 152));
                clsp::CLSP_Log::LogCLSPData(v665, (const float *)buf, 1);
                v666 = *(clsp::CLSP_Log **)(*(_QWORD *)(*((_QWORD *)this + 142) + v578) + 96);
                *(_DWORD *)buf = *(_DWORD *)(*(_QWORD *)(*((_QWORD *)this + 105) + v578) + 232);
                clsp::CLSP_Log::LogCLSPData(v666, (const float *)buf, 1);
                v667 = *(clsp::CLSP_Log **)(*(_QWORD *)(*((_QWORD *)this + 142) + v578) + 96);
                *(_DWORD *)buf = *(_DWORD *)(*(_QWORD *)(*((_QWORD *)this + 105) + v578) + 356);
                clsp::CLSP_Log::LogCLSPData(v667, (const float *)buf, 1);
                v668 = *(clsp::CLSP_Log **)(*(_QWORD *)(*((_QWORD *)this + 142) + v578) + 96);
                *(_DWORD *)buf = *(_DWORD *)(*(_QWORD *)(*((_QWORD *)this + 105) + v578) + 292);
                clsp::CLSP_Log::LogCLSPData(v668, (const float *)buf, 1);
                v669 = *(clsp::CLSP_Log **)(*(_QWORD *)(*((_QWORD *)this + 142) + v578) + 96);
                v670 = *(_QWORD *)(*((_QWORD *)this + 105) + v578);
                v671 = *(float *)(v670 + 708);
                if (*(float *)(v670 + 740) < v671)
                  v671 = *(float *)(v670 + 740);
                *(float *)buf = log10f(v671) * 20.0;
                clsp::CLSP_Log::LogCLSPData(v669, (const float *)buf, 1);
                v656 = *(_QWORD *)(*((_QWORD *)this + 105) + v578);
              }
              if (*(float *)(v656 + 708) < v581)
                v581 = *(float *)(v656 + 708);
              v672 = *(float *)(v656 + 740);
              v673 = clsp::CLSPKernel_v5::GetDisplacementFilterGain(*(clsp::CLSPKernel_v5 **)(v656 + 424));
              v580 = v580 + v657;
              if (v673 < v582)
                v582 = v673;
              ++v579;
              v578 += 16;
              if (v579 >= (uint64_t)(*((_QWORD *)this + 106) - *((_QWORD *)this + 105)) >> 4)
                goto LABEL_796;
              continue;
            }
          }
        }
      }
      v126 = v125 >> 4;
      if ((unint64_t)(v125 >> 4) <= 1)
        v126 = 1;
      v127 = v106;
      do
      {
        v128 = *(_QWORD *)v127;
        v127 += 16;
        *(_WORD *)(v128 + 992) = 257;
        *(_BYTE *)(v128 + 994) = 1;
        --v126;
      }
      while (v126);
    }
    v124 = v108;
    goto LABEL_152;
  }
  if (!*((_DWORD *)this + 295))
  {
    v98 = _os_log_pack_size();
    v99 = caulk::deferred_logger::create_message(*((caulk::deferred_logger **)this + 170), v98 + 88, 16);
    if (v99)
    {
      v100 = (caulk::concurrent::message *)v99;
      *(_WORD *)_os_log_pack_fill() = 0;
      caulk::concurrent::messenger::enqueue(*(caulk::concurrent::messenger **)(*((_QWORD *)this + 170) + 16), v100);
    }
  }
  return 4294956428;
}

uint64_t AUSpeakerProtectionV3::Render(AUSpeakerProtectionV3 *this, unsigned int *a2, const AudioTimeStamp *a3, uint64_t a4)
{
  ausdk::AUScope *v8;
  uint64_t Element;
  uint64_t v10;
  ausdk::AUInputElement *v11;
  uint64_t result;
  uint64_t BufferList;
  ausdk::AUInputElement *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD v18[3];

  v18[2] = *MEMORY[0x1E0C80C00];
  v8 = (AUSpeakerProtectionV3 *)((char *)this + 80);
  Element = ausdk::AUScope::SafeGetElement((AUSpeakerProtectionV3 *)((char *)this + 80), 0);
  v10 = ausdk::AUScope::SafeGetElement((AUSpeakerProtectionV3 *)((char *)this + 128), 0);
  if (!ausdk::AUBase::HasInput(this, 0))
    return 4294956420;
  v11 = (ausdk::AUInputElement *)ausdk::AUScope::SafeGetElement(v8, 0);
  result = ausdk::AUInputElement::PullInput(v11, a2, a3, 0, a4);
  if ((_DWORD)result)
    return result;
  BufferList = ausdk::AUBufferList::GetBufferList((ausdk::AUBufferList *)(Element + 144));
  if (ausdk::AUBase::HasInput(this, 1u))
  {
    v14 = (ausdk::AUInputElement *)ausdk::AUScope::SafeGetElement(v8, 1u);
    result = ausdk::AUInputElement::PullInput(v14, a2, a3, 1, a4);
    if ((_DWORD)result)
      return result;
    v15 = ausdk::AUScope::SafeGetElement(v8, 1u);
    v16 = ausdk::AUBufferList::GetBufferList((ausdk::AUBufferList *)(v15 + 144));
  }
  else
  {
    v16 = 0;
  }
  v18[0] = BufferList;
  v18[1] = v16;
  v17 = ausdk::AUBufferList::GetBufferList((ausdk::AUBufferList *)(v10 + 144));
  return (*(uint64_t (**)(AUSpeakerProtectionV3 *, unsigned int *, uint64_t, uint64_t, _QWORD *, uint64_t, uint64_t *))(*(_QWORD *)this + 184))(this, a2, a4, 2, v18, 1, &v17);
}

BOOL AUSpeakerProtectionV3::BusCountWritable(AUSpeakerProtectionV3 *this, int a2)
{
  return (a2 - 1) < 2;
}

uint64_t AUSpeakerProtectionV3::SetBusCount(AUSpeakerProtectionV3 *this, int a2, unsigned int a3)
{
  int64x2_t *v3;
  unsigned int v4;

  if (a2 == 2)
  {
    if (a3 == 1)
    {
      v3 = (int64x2_t *)((char *)this + 128);
      v4 = 1;
      goto LABEL_7;
    }
    return 4294956445;
  }
  if (a2 == 1)
  {
    if (a3 - 1 <= 1)
    {
      v3 = (int64x2_t *)((char *)this + 80);
      v4 = a3;
LABEL_7:
      ausdk::AUScope::SetNumberOfElements(v3, v4);
      return 0;
    }
    return 4294956445;
  }
  return 4294956430;
}

uint64_t AUSpeakerProtectionV3::GetParameterList(AUSpeakerProtectionV3 *this, int a2, unsigned int *a3, unsigned int *a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int v27;
  unsigned int v28;
  unsigned int v29;
  unsigned int v30;
  unsigned int v32;
  unsigned int v33;
  unsigned int v34;
  unsigned int v35;
  unsigned int v36;
  unsigned int v37;
  unsigned int v38;
  unsigned int v39;
  unsigned int v40;
  unsigned int v41;
  unsigned int v42;
  unsigned int v43;

  if (a2 == 4)
  {
    if (!a3)
    {
      v30 = 48;
      goto LABEL_10;
    }
    *(_OWORD *)a3 = xmmword_1B66A23B0;
    *((_OWORD *)a3 + 1) = xmmword_1B66A23C0;
    v30 = 48;
    v43 = 65;
    v42 = 66;
    v29 = 64;
    v39 = 40;
    v40 = 41;
    v41 = 38;
    *((_OWORD *)a3 + 2) = xmmword_1B66A23D0;
    *((_OWORD *)a3 + 3) = xmmword_1B66A23E0;
    v37 = 37;
    v38 = 39;
    v28 = 42;
    v36 = 36;
    v27 = 35;
    v34 = 33;
    v35 = 34;
    v32 = 20;
    v33 = 32;
    *((_OWORD *)a3 + 4) = xmmword_1B66A21F0;
    *((_OWORD *)a3 + 5) = xmmword_1B66A23F0;
    v9 = 68;
    v10 = 67;
    v11 = 31;
    v12 = 30;
    *((_OWORD *)a3 + 6) = xmmword_1B66A2400;
    v13 = 47;
    v14 = 46;
    a3[28] = 29;
    v15 = 45;
    v16 = 44;
    v17 = 43;
    v18 = 42;
    v19 = 41;
    v20 = 40;
    v21 = 39;
    v22 = 38;
    v23 = 37;
    v24 = 36;
    v25 = 35;
    v26 = 34;
    v5 = 33;
    v7 = 32;
    v6 = 31;
    v8 = 30;
    v4 = 29;
    goto LABEL_7;
  }
  if (!a2)
  {
    if (!a3)
    {
      v30 = 20;
      goto LABEL_10;
    }
    v4 = 1;
    *a3 = 4;
    v5 = 5;
    v43 = 13;
    v41 = 0;
    v42 = 17;
    v6 = 3;
    v39 = 19;
    v40 = 1;
    v37 = 15;
    v38 = 18;
    v7 = 4;
    v8 = 2;
    v35 = 11;
    v36 = 14;
    v33 = 9;
    v34 = 10;
    v32 = 3;
    v9 = 2;
    v10 = 7;
    v11 = 6;
    v12 = 5;
    v13 = 19;
    v14 = 18;
    v15 = 17;
    v16 = 16;
    v17 = 15;
    v18 = 14;
    v19 = 13;
    v20 = 12;
    v21 = 11;
    v22 = 10;
    v23 = 9;
    v24 = 8;
    v25 = 7;
    v26 = 6;
    v27 = 8;
    v28 = 16;
    v29 = 12;
    v30 = 20;
LABEL_7:
    a3[v4] = v12;
    a3[v8] = v11;
    a3[v6] = v10;
    a3[v7] = v9;
    a3[v5] = v32;
    a3[v26] = v33;
    a3[v25] = v34;
    a3[v24] = v35;
    a3[v23] = v27;
    a3[v22] = v36;
    a3[v21] = v28;
    a3[v20] = v37;
    a3[v19] = v41;
    a3[v18] = v38;
    a3[v17] = v39;
    a3[v16] = v40;
    a3[v15] = v29;
    a3[v14] = v42;
    a3[v13] = v43;
LABEL_10:
    *a4 = v30;
  }
  return 0;
}

uint64_t AUSpeakerProtectionV3::GetParameterInfo(AUSpeakerProtectionV3 *this, int a2, int a3, AudioUnitParameterInfo *a4)
{
  uint64_t v7;
  NSObject *v8;
  const __CFString *v9;
  const __CFString *v10;
  uint64_t result;
  uint64_t v12;
  AudioUnitParameterValue v13;
  uint64_t v14;
  const __CFString *v15;
  uint64_t v16;
  uint64_t v17;
  AudioUnitParameterValue v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  const __CFString *v24;
  AudioUnitParameterOptions v25;
  const __CFString *v26;
  uint64_t v27;
  AudioUnitParameterValue v28;
  const __CFString *v29;
  uint64_t v30;
  uint64_t v31;
  AudioUnitParameterValue v32;
  AudioUnitParameterValue v33;
  const __CFString *v34;
  const __CFString *v35;
  const __CFString *v36;
  const __CFString *v37;
  const __CFString *v38;
  AudioUnitParameterOptions flags;
  int v40;
  const __CFString *v41;
  const __CFString *v42;
  int v43;
  const char *v44;
  __int16 v45;
  int v46;
  uint64_t v47;

  v47 = *MEMORY[0x1E0C80C00];
  v7 = spp3Subsystem();
  if (v7)
  {
    if ((*(_BYTE *)(v7 + 8) & 1) != 0)
    {
      v8 = *(NSObject **)v7;
      if (*(_QWORD *)v7)
      {
        if (os_log_type_enabled(*(os_log_t *)v7, OS_LOG_TYPE_DEBUG))
        {
          v43 = 136315394;
          v44 = "AUSpeakerProtectionV3.cpp";
          v45 = 1024;
          v46 = 1306;
          _os_log_impl(&dword_1B5ED0000, v8, OS_LOG_TYPE_DEBUG, "%25s:%-5d AUSpeakerProtectionV3::GetParameterInfo", (uint8_t *)&v43, 0x12u);
        }
      }
    }
  }
  a4->flags = 0;
  a4->unitName = 0;
  if (a2 == 4)
  {
    switch(a3)
    {
      case 0:
        v10 = CFSTR("temperature limit");
LABEL_21:
        a4->cfNameString = v10;
        a4->flags = 0x8000000;
        CFStringGetCString(v10, a4->name, 52, 0x8000100u);
        a4->unit = kAudioUnitParameterUnit_Generic;
        v17 = 0x4316000000000000;
        goto LABEL_72;
      case 1:
        a4->cfNameString = CFSTR("hard temp limit headroom");
        a4->flags = 0x8000000;
        CFStringGetCString(CFSTR("hard temp limit headroom"), a4->name, 52, 0x8000100u);
        a4->unit = kAudioUnitParameterUnit_Generic;
        *(_QWORD *)&a4->minValue = 0x41A0000000000000;
        v18 = 10.0;
        goto LABEL_124;
      case 2:
        v26 = CFSTR("T_sett_vc");
        goto LABEL_71;
      case 3:
        a4->cfNameString = CFSTR("T_sett_mg");
        a4->flags = 0x8000000;
        CFStringGetCString(CFSTR("T_sett_mg"), a4->name, 52, 0x8000100u);
        a4->unit = kAudioUnitParameterUnit_Generic;
        v27 = 0x4348000000000000;
        goto LABEL_123;
      case 4:
        a4->cfNameString = CFSTR("tau_Tvc");
        a4->flags = 0x8000000;
        CFStringGetCString(CFSTR("tau_Tvc"), a4->name, 52, 0x8000100u);
        a4->unit = kAudioUnitParameterUnit_Generic;
        *(_QWORD *)&a4->minValue = 0x42C800003DCCCCCDLL;
        v28 = 3.0;
        goto LABEL_86;
      case 5:
        a4->cfNameString = CFSTR("tau_Tmg");
        a4->flags = 0x8000000;
        CFStringGetCString(CFSTR("tau_Tmg"), a4->name, 52, 0x8000100u);
        a4->unit = kAudioUnitParameterUnit_Generic;
        *(_QWORD *)&a4->minValue = 0x43FA00003DCCCCCDLL;
        v28 = 180.0;
        goto LABEL_86;
      case 6:
        a4->cfNameString = CFSTR("ThermalFFSpeedupFactor");
        a4->flags = 0x8000000;
        CFStringGetCString(CFSTR("ThermalFFSpeedupFactor"), a4->name, 52, 0x8000100u);
        a4->unit = kAudioUnitParameterUnit_Generic;
        *(_QWORD *)&a4->minValue = 0x3F80000000000000;
        v18 = 0.25;
        goto LABEL_124;
      case 7:
        v29 = CFSTR("temperature");
        goto LABEL_43;
      case 8:
        v29 = CFSTR("OL temperature");
LABEL_43:
        a4->cfNameString = v29;
        a4->flags = 0x8000000;
        CFStringGetCString(v29, a4->name, 52, 0x8000100u);
        a4->unit = kAudioUnitParameterUnit_Generic;
        *(_QWORD *)&a4->minValue = 0x4302000041200000;
        v13 = 50.0;
        goto LABEL_98;
      case 9:
        a4->cfNameString = CFSTR("Reb_ref");
        a4->flags = 0x8000000;
        CFStringGetCString(CFSTR("Reb_ref"), a4->name, 52, 0x8000100u);
        a4->unit = kAudioUnitParameterUnit_Generic;
        v30 = 0x4120000000000000;
        goto LABEL_51;
      case 10:
        a4->cfNameString = CFSTR("Rshunt");
        a4->flags = 0x8000000;
        CFStringGetCString(CFSTR("Rshunt"), a4->name, 52, 0x8000100u);
        a4->unit = kAudioUnitParameterUnit_Generic;
        *(_QWORD *)&a4->minValue = 0x4000000000000000;
        v28 = 0.1;
        goto LABEL_86;
      case 11:
        a4->cfNameString = CFSTR("Rampout");
        a4->flags = 0x8000000;
        CFStringGetCString(CFSTR("Rampout"), a4->name, 52, 0x8000100u);
        a4->unit = kAudioUnitParameterUnit_Generic;
        *(_QWORD *)&a4->minValue = 0x3FC0000000000000;
        v28 = 0.4;
        goto LABEL_86;
      case 12:
        a4->cfNameString = CFSTR("mt");
        a4->flags = 0x8000000;
        CFStringGetCString(CFSTR("mt"), a4->name, 52, 0x8000100u);
        a4->unit = kAudioUnitParameterUnit_Generic;
        *(_QWORD *)&a4->minValue = 0x3A83126F00000000;
        v28 = 0.000059;
        goto LABEL_86;
      case 13:
        a4->cfNameString = CFSTR("ct");
        a4->flags = 0x8000000;
        CFStringGetCString(CFSTR("ct"), a4->name, 52, 0x8000100u);
        a4->unit = kAudioUnitParameterUnit_Generic;
        *(_QWORD *)&a4->minValue = 0x412000003A83126FLL;
        v28 = 0.31552;
        goto LABEL_86;
      case 14:
        a4->cfNameString = CFSTR("kt");
        a4->flags = 0x8000000;
        CFStringGetCString(CFSTR("kt"), a4->name, 52, 0x8000100u);
        a4->unit = kAudioUnitParameterUnit_Generic;
        *(_QWORD *)&a4->minValue = 0x45DAC00042C80000;
        v28 = 1876.2;
        goto LABEL_86;
      case 15:
        a4->cfNameString = CFSTR("ag");
        a4->flags = 0x8000000;
        CFStringGetCString(CFSTR("ag"), a4->name, 52, 0x8000100u);
        a4->unit = kAudioUnitParameterUnit_Generic;
        v30 = 0x4170000040A00000;
LABEL_51:
        *(_QWORD *)&a4->minValue = v30;
        v18 = 8.0;
        goto LABEL_124;
      case 16:
        a4->cfNameString = CFSTR("g_bw");
        a4->flags = 0x8000000;
        CFStringGetCString(CFSTR("g_bw"), a4->name, 52, 0x8000100u);
        a4->unit = kAudioUnitParameterUnit_Generic;
        v20 = 0x400000003E800000;
        goto LABEL_60;
      case 17:
        a4->cfNameString = CFSTR("Q_d");
        a4->flags = 0x8000000;
        CFStringGetCString(CFSTR("Q_d"), a4->name, 52, 0x8000100u);
        a4->unit = kAudioUnitParameterUnit_Generic;
        v31 = 0x404000003F000000;
        goto LABEL_85;
      case 18:
        a4->cfNameString = CFSTR("phi");
        a4->flags = 0x8000000;
        CFStringGetCString(CFSTR("phi"), a4->name, 52, 0x8000100u);
        a4->unit = kAudioUnitParameterUnit_Generic;
        *(_QWORD *)&a4->minValue = 0x412000003DCCCCCDLL;
        v28 = 1.09;
        goto LABEL_86;
      case 19:
        a4->cfNameString = CFSTR("x_lim");
        a4->flags = 0x8000000;
        CFStringGetCString(CFSTR("x_lim"), a4->name, 52, 0x8000100u);
        a4->unit = kAudioUnitParameterUnit_Generic;
        *(_QWORD *)&a4->minValue = 0x3F800000358637BDLL;
        v28 = 0.3;
        goto LABEL_86;
      case 20:
        a4->cfNameString = CFSTR("ThermalMeasurementMethod");
        a4->flags = 0x8000000;
        CFStringGetCString(CFSTR("ThermalMeasurementMethod"), a4->name, 52, 0x8000100u);
        a4->unit = kAudioUnitParameterUnit_Indexed;
        *(_QWORD *)&a4->minValue = 0x4000000000000000;
        v32 = 1.0;
        goto LABEL_101;
      case 21:
        v9 = CFSTR("pilot tone enabled");
        goto LABEL_59;
      case 22:
        v9 = CFSTR("CL thermal feedback enabled");
LABEL_59:
        a4->cfNameString = v9;
        a4->flags = 0x8000000;
        CFStringGetCString(v9, a4->name, 52, 0x8000100u);
        a4->unit = kAudioUnitParameterUnit_Boolean;
        v20 = 0x3F80000000000000;
        goto LABEL_60;
      case 23:
        v15 = CFSTR("TlimErrDecayTime");
LABEL_62:
        a4->cfNameString = v15;
        a4->flags = 0x8000000;
        CFStringGetCString(v15, a4->name, 52, 0x8000100u);
        a4->unit = kAudioUnitParameterUnit_Seconds;
        *(_QWORD *)&a4->minValue = 0x4496000038D1B717;
        v33 = 1.0;
        goto LABEL_130;
      case 24:
        a4->cfNameString = CFSTR("TempSenseWindowTime");
        a4->flags = 0x8000000;
        CFStringGetCString(CFSTR("TempSenseWindowTime"), a4->name, 52, 0x8000100u);
        a4->unit = kAudioUnitParameterUnit_Seconds;
        *(_QWORD *)&a4->minValue = 0x40A0000000000000;
        a4->defaultValue = 0.18;
        v25 = a4->flags - 1069547520;
        goto LABEL_133;
      case 25:
        a4->cfNameString = CFSTR("TempSenseSmoothingTau");
        a4->flags = 0x8000000;
        CFStringGetCString(CFSTR("TempSenseSmoothingTau"), a4->name, 52, 0x8000100u);
        a4->unit = kAudioUnitParameterUnit_Seconds;
        *(_QWORD *)&a4->minValue = 0x4120000000000000;
        a4->defaultValue = 0.0;
        goto LABEL_131;
      case 26:
        a4->cfNameString = CFSTR("a_t_inv");
        a4->flags = 0x8000000;
        CFStringGetCString(CFSTR("a_t_inv"), a4->name, 52, 0x8000100u);
        a4->unit = kAudioUnitParameterUnit_Generic;
        *(_QWORD *)&a4->minValue = 0x43E1000000000000;
        v28 = 300.0;
        goto LABEL_86;
      case 27:
        v34 = CFSTR("PilotAmplHi_dB");
        goto LABEL_68;
      case 28:
        v34 = CFSTR("PilotAmplLo_dB");
LABEL_68:
        a4->cfNameString = v34;
        a4->flags = 0x8000000;
        CFStringGetCString(v34, a4->name, 52, 0x8000100u);
        a4->unit = kAudioUnitParameterUnit_Decibels;
        *(_QWORD *)&a4->minValue = 0xC1200000C2A00000;
        v18 = -40.0;
        goto LABEL_124;
      case 29:
        v26 = CFSTR("PilotUpperThres");
        goto LABEL_71;
      case 30:
        v26 = CFSTR("PilotLowerThres");
LABEL_71:
        a4->cfNameString = v26;
        a4->flags = 0x8000000;
        CFStringGetCString(v26, a4->name, 52, 0x8000100u);
        a4->unit = kAudioUnitParameterUnit_Generic;
        v17 = 0x4348000000000000;
LABEL_72:
        *(_QWORD *)&a4->minValue = v17;
        v18 = 100.0;
        goto LABEL_124;
      case 31:
        a4->cfNameString = CFSTR("PilotDecayTime");
        a4->flags = 0x8000000;
        CFStringGetCString(CFSTR("PilotDecayTime"), a4->name, 52, 0x8000100u);
        a4->unit = kAudioUnitParameterUnit_Seconds;
        v22 = 0x427000003A83126FLL;
LABEL_74:
        *(_QWORD *)&a4->minValue = v22;
        v33 = 0.5;
        goto LABEL_130;
      case 32:
        a4->cfNameString = CFSTR("PilotFreq");
        a4->flags = 0x8000000;
        CFStringGetCString(CFSTR("PilotFreq"), a4->name, 52, 0x8000100u);
        a4->unit = kAudioUnitParameterUnit_Hertz;
        *(_QWORD *)&a4->minValue = 0x461C40003F800000;
        v33 = 43.066;
        goto LABEL_130;
      case 33:
        v35 = CFSTR("LPMLSPreGain");
        goto LABEL_78;
      case 34:
        v35 = CFSTR("LPMLSPostGain");
LABEL_78:
        a4->cfNameString = v35;
        a4->flags = 0x8000000;
        CFStringGetCString(v35, a4->name, 52, 0x8000100u);
        a4->unit = kAudioUnitParameterUnit_LinearGain;
        v20 = 0x4120000000000000;
        goto LABEL_60;
      case 35:
        a4->cfNameString = CFSTR("LPMLSLowerCorner");
        a4->flags = 0x8000000;
        CFStringGetCString(CFSTR("LPMLSLowerCorner"), a4->name, 52, 0x8000100u);
        a4->unit = kAudioUnitParameterUnit_Hertz;
        v14 = 0x42C8000038D1B717;
        goto LABEL_127;
      case 36:
        a4->cfNameString = CFSTR("LPMLS pre clip level");
        a4->flags = 0x8000000;
        CFStringGetCString(CFSTR("LPMLS pre clip level"), a4->name, 52, 0x8000100u);
        a4->unit = kAudioUnitParameterUnit_Generic;
        goto LABEL_97;
      case 37:
        v36 = CFSTR("mu_Re");
        goto LABEL_84;
      case 38:
        v36 = CFSTR("mu_Le");
        goto LABEL_84;
      case 39:
        v36 = CFSTR("mu mechanical (PU)");
LABEL_84:
        a4->cfNameString = v36;
        a4->flags = 0x8000000;
        CFStringGetCString(v36, a4->name, 52, 0x8000100u);
        a4->unit = kAudioUnitParameterUnit_Generic;
        v31 = 0x4120000000000000;
LABEL_85:
        *(_QWORD *)&a4->minValue = v31;
        v28 = 1.0;
LABEL_86:
        a4->defaultValue = v28;
        v25 = a4->flags - 1065353216;
        goto LABEL_133;
      case 40:
        v37 = CFSTR("Max relative displacement");
        goto LABEL_89;
      case 41:
        v37 = CFSTR("abs(Min relative displacement)");
LABEL_89:
        a4->cfNameString = v37;
        a4->flags = 0x8000000;
        CFStringGetCString(v37, a4->name, 52, 0x8000100u);
        a4->unit = kAudioUnitParameterUnit_Generic;
        v12 = 0x3FAA9FBE00000000;
        goto LABEL_94;
      case 42:
        a4->cfNameString = CFSTR("DisplacementProtectionType");
        a4->flags = 0x8000000;
        CFStringGetCString(CFSTR("DisplacementProtectionType"), a4->name, 52, 0x8000100u);
        a4->unit = kAudioUnitParameterUnit_Indexed;
        *(_QWORD *)&a4->minValue = 0x4080000000000000;
        a4->defaultValue = 0.0;
        goto LABEL_102;
      case 43:
        v38 = CFSTR("Convoy Dirty Buffer Sticky Flag");
        goto LABEL_93;
      case 44:
        v38 = CFSTR("Convoy Block Flag");
LABEL_93:
        a4->cfNameString = v38;
        a4->flags = 0x8000000;
        CFStringGetCString(v38, a4->name, 52, 0x8000100u);
        a4->unit = kAudioUnitParameterUnit_Generic;
        v12 = 0x3F80000000000000;
        goto LABEL_94;
      case 45:
        a4->cfNameString = CFSTR("Convoy X Limit Relative (%)");
        a4->flags = 0x8000000;
        CFStringGetCString(CFSTR("Convoy X Limit Relative (%)"), a4->name, 52, 0x8000100u);
        a4->unit = kAudioUnitParameterUnit_Percent;
        *(_QWORD *)&a4->minValue = 0x42C8000042700000;
        v13 = 70.0;
        goto LABEL_98;
      case 46:
        a4->cfNameString = CFSTR("Convoy Norm Factor");
        a4->flags = 0x8000000;
        CFStringGetCString(CFSTR("Convoy Norm Factor"), a4->name, 52, 0x8000100u);
        a4->unit = kAudioUnitParameterUnit_Ratio;
LABEL_97:
        *(_QWORD *)&a4->minValue = 0x4000000000000000;
        v13 = 1.0;
        goto LABEL_98;
      case 47:
        a4->cfNameString = CFSTR("Convoy PeakFinder Threshold Upper");
        a4->flags = 0x8000000;
        CFStringGetCString(CFSTR("Convoy PeakFinder Threshold Upper"), a4->name, 52, 0x8000100u);
        a4->unit = kAudioUnitParameterUnit_Generic;
        *(_QWORD *)&a4->minValue = 0x3F80000000000000;
        v32 = 0.6;
LABEL_101:
        a4->defaultValue = v32;
LABEL_102:
        v25 = a4->flags | 0xC0000000;
        goto LABEL_133;
      case 48:
        a4->cfNameString = CFSTR("Convoy PeakFinder Threshold Lower");
        a4->flags = 0x8000000;
        CFStringGetCString(CFSTR("Convoy PeakFinder Threshold Lower"), a4->name, 52, 0x8000100u);
        a4->unit = kAudioUnitParameterUnit_Generic;
        *(_QWORD *)&a4->minValue = 0x3F80000000000000;
        v18 = 0.6;
        goto LABEL_124;
      case 49:
        a4->cfNameString = CFSTR("Convoy Peak Detector Attack Time");
        a4->flags = 0x8000000;
        CFStringGetCString(CFSTR("Convoy Peak Detector Attack Time"), a4->name, 52, 0x8000100u);
        a4->unit = kAudioUnitParameterUnit_Seconds;
        v21 = 0x42C8000000000000;
        goto LABEL_111;
      case 50:
        a4->cfNameString = CFSTR("Convoy Peak Detector Release Time");
        a4->flags = 0x8000000;
        CFStringGetCString(CFSTR("Convoy Peak Detector Release Time"), a4->name, 52, 0x8000100u);
        a4->unit = kAudioUnitParameterUnit_Seconds;
        *(_QWORD *)&a4->minValue = 0x42C8000000000000;
        v33 = 4.0;
        goto LABEL_130;
      case 51:
        a4->cfNameString = CFSTR("Convoy Norm Factor Cap Upper");
        a4->flags = 0x8000000;
        CFStringGetCString(CFSTR("Convoy Norm Factor Cap Upper"), a4->name, 52, 0x8000100u);
        a4->unit = kAudioUnitParameterUnit_Ratio;
        *(_QWORD *)&a4->minValue = 0x40A000003F800000;
        v18 = 2.0;
        goto LABEL_124;
      case 52:
        a4->cfNameString = CFSTR("Convoy Norm Factor Cap Lower");
        a4->flags = 0x8000000;
        CFStringGetCString(CFSTR("Convoy Norm Factor Cap Lower"), a4->name, 52, 0x8000100u);
        a4->unit = kAudioUnitParameterUnit_Ratio;
        *(_QWORD *)&a4->minValue = 0x3F80000000000000;
        v18 = 0.2;
        goto LABEL_124;
      case 53:
        v41 = CFSTR("Convoy Norm Factor Attack");
        goto LABEL_110;
      case 54:
        v41 = CFSTR("Convoy Norm Factor Release");
LABEL_110:
        a4->cfNameString = v41;
        a4->flags = 0x8000000;
        CFStringGetCString(v41, a4->name, 52, 0x8000100u);
        a4->unit = kAudioUnitParameterUnit_Seconds;
        v21 = 0x3F80000000000000;
LABEL_111:
        *(_QWORD *)&a4->minValue = v21;
        v33 = 0.0001;
        goto LABEL_130;
      case 55:
        v42 = CFSTR("Convoy Peak Ratio Positive Block Threshold");
        goto LABEL_116;
      case 56:
        v42 = CFSTR("Convoy Peak Ratio Negative Block Threshold");
        goto LABEL_116;
      case 57:
        a4->cfNameString = CFSTR("Convoy Min Excursion");
        a4->flags = 0x8000000;
        CFStringGetCString(CFSTR("Convoy Min Excursion"), a4->name, 52, 0x8000100u);
        a4->unit = kAudioUnitParameterUnit_Generic;
        *(_QWORD *)&a4->minValue = 3212836864;
        v18 = -0.5;
        goto LABEL_124;
      case 58:
        v42 = CFSTR("Convoy Max Excursion");
LABEL_116:
        a4->cfNameString = v42;
        a4->flags = 0x8000000;
        CFStringGetCString(v42, a4->name, 52, 0x8000100u);
        a4->unit = kAudioUnitParameterUnit_Generic;
        *(_QWORD *)&a4->minValue = 0x3F80000000000000;
        v18 = 0.5;
        goto LABEL_124;
      case 59:
        a4->cfNameString = CFSTR("Convoy Relative X Limit Upper");
        a4->flags = 0x8000000;
        CFStringGetCString(CFSTR("Convoy Relative X Limit Upper"), a4->name, 52, 0x8000100u);
        a4->unit = kAudioUnitParameterUnit_Generic;
        *(_QWORD *)&a4->minValue = 0x3F8000003F333333;
        v18 = 0.9;
        goto LABEL_124;
      case 60:
        a4->cfNameString = CFSTR("Convoy Relative X Limit Lower");
        a4->flags = 0x8000000;
        CFStringGetCString(CFSTR("Convoy Relative X Limit Lower"), a4->name, 52, 0x8000100u);
        a4->unit = kAudioUnitParameterUnit_Generic;
        *(_QWORD *)&a4->minValue = 0x3F33333300000000;
        v18 = 0.7;
        goto LABEL_124;
      case 61:
        a4->cfNameString = CFSTR("Convoy Peak Ratios InWindow Count Threshold");
        a4->flags = 0x8000000;
        CFStringGetCString(CFSTR("Convoy Peak Ratios InWindow Count Threshold"), a4->name, 52, 0x8000100u);
        a4->unit = kAudioUnitParameterUnit_Generic;
        v16 = 0x4348000000000000;
LABEL_120:
        *(_QWORD *)&a4->minValue = v16;
        v18 = 50.0;
        goto LABEL_124;
      case 62:
        a4->cfNameString = CFSTR("Convoy Norm Factor Threshold in %");
        a4->flags = 0x8000000;
        CFStringGetCString(CFSTR("Convoy Norm Factor Threshold in %"), a4->name, 52, 0x8000100u);
        a4->unit = kAudioUnitParameterUnit_Percent;
        v20 = 0x40A0000000000000;
LABEL_60:
        *(_QWORD *)&a4->minValue = v20;
        v18 = 1.0;
        goto LABEL_124;
      case 63:
        a4->cfNameString = CFSTR("Convoy Buffer Dirty Count Threshold");
        a4->flags = 0x8000000;
        CFStringGetCString(CFSTR("Convoy Buffer Dirty Count Threshold"), a4->name, 52, 0x8000100u);
        a4->unit = kAudioUnitParameterUnit_Generic;
        v27 = 0x42C8000000000000;
LABEL_123:
        *(_QWORD *)&a4->minValue = v27;
        v18 = 20.0;
LABEL_124:
        a4->defaultValue = v18;
LABEL_125:
        flags = a4->flags;
        v40 = -1073741824;
        goto LABEL_132;
      case 64:
LABEL_13:
        a4->cfNameString = CFSTR("thermal gain");
        a4->flags = 0x8000000;
        CFStringGetCString(CFSTR("thermal gain"), a4->name, 52, 0x8000100u);
        a4->unit = kAudioUnitParameterUnit_Decibels;
        v12 = 0x40600000C1A00000;
        goto LABEL_94;
      case 65:
LABEL_14:
        a4->cfNameString = CFSTR("displacement gain");
        a4->flags = 0x8000000;
        CFStringGetCString(CFSTR("displacement gain"), a4->name, 52, 0x8000100u);
        a4->unit = kAudioUnitParameterUnit_Decibels;
        *(_QWORD *)&a4->minValue = 0x40800000C1400000;
        v13 = -12.0;
LABEL_98:
        a4->defaultValue = v13;
        goto LABEL_99;
      case 66:
LABEL_15:
        a4->cfNameString = CFSTR("power control gain");
        a4->flags = 0x8000000;
        CFStringGetCString(CFSTR("power control gain"), a4->name, 52, 0x8000100u);
        a4->unit = kAudioUnitParameterUnit_Decibels;
        v12 = 3248488448;
LABEL_94:
        *(_QWORD *)&a4->minValue = v12;
        a4->defaultValue = 0.0;
LABEL_99:
        flags = a4->flags;
        v40 = 1073782784;
        goto LABEL_132;
      case 67:
        a4->cfNameString = CFSTR("PilotDecayTimeStage2");
        a4->flags = 0x8000000;
        CFStringGetCString(CFSTR("PilotDecayTimeStage2"), a4->name, 52, 0x8000100u);
        a4->unit = kAudioUnitParameterUnit_Seconds;
        v14 = 0x3F8000003A83126FLL;
LABEL_127:
        *(_QWORD *)&a4->minValue = v14;
        v33 = 0.01;
        goto LABEL_130;
      case 68:
        a4->cfNameString = CFSTR("PilotEnableThres");
        a4->flags = 0x8000000;
        CFStringGetCString(CFSTR("PilotEnableThres"), a4->name, 52, 0x8000100u);
        a4->unit = kAudioUnitParameterUnit_Generic;
        v23 = 0x3F80000033D6BF95;
LABEL_129:
        *(_QWORD *)&a4->minValue = v23;
        v33 = 0.00001;
LABEL_130:
        a4->defaultValue = v33;
LABEL_131:
        flags = a4->flags;
        v40 = -1061158912;
LABEL_132:
        v25 = flags + v40;
LABEL_133:
        result = 0;
        a4->flags = v25;
        break;
      default:
        return 4294956418;
    }
  }
  else
  {
    if (!a2)
    {
      switch(a3)
      {
        case 0:
          v9 = CFSTR("thermal protection enabled");
          goto LABEL_59;
        case 1:
          v9 = CFSTR("displacement protection enabled");
          goto LABEL_59;
        case 2:
          a4->cfNameString = CFSTR("thermal/power control gain attack time");
          a4->flags = 0x8000000;
          CFStringGetCString(CFSTR("thermal/power control gain attack time"), a4->name, 52, 0x8000100u);
          a4->unit = kAudioUnitParameterUnit_Seconds;
          v14 = 0x4496000038D1B717;
          goto LABEL_127;
        case 3:
          v15 = CFSTR("thermal/power control gain release time");
          goto LABEL_62;
        case 4:
          a4->cfNameString = CFSTR("ambient temperature");
          a4->flags = 0x8000000;
          CFStringGetCString(CFSTR("ambient temperature"), a4->name, 52, 0x8000100u);
          a4->unit = kAudioUnitParameterUnit_Generic;
          v16 = 0x42C8000000000000;
          goto LABEL_120;
        case 5:
          v10 = CFSTR("SafeTlim");
          goto LABEL_21;
        case 6:
          a4->cfNameString = CFSTR("SafeTlimTimeMin");
          a4->flags = 0x8000000;
          CFStringGetCString(CFSTR("SafeTlimTimeMin"), a4->name, 52, 0x8000100u);
          a4->unit = kAudioUnitParameterUnit_Generic;
          *(_QWORD *)&a4->minValue = 0x4416000000000000;
          v18 = 600.0;
          goto LABEL_124;
        case 7:
          a4->cfNameString = CFSTR("SafeTlimOffset");
          a4->flags = 0x8000000;
          CFStringGetCString(CFSTR("SafeTlimOffset"), a4->name, 52, 0x8000100u);
          a4->unit = kAudioUnitParameterUnit_Generic;
          v19 = 3267887104;
          goto LABEL_34;
        case 8:
          a4->cfNameString = CFSTR("LookaheadDelay_ms");
          a4->flags = 0x8000000;
          CFStringGetCString(CFSTR("LookaheadDelay_ms"), a4->name, 52, 0x8000100u);
          a4->unit = kAudioUnitParameterUnit_Generic;
          v20 = 0x4000000000000000;
          goto LABEL_60;
        case 9:
          a4->cfNameString = CFSTR("peak attack time");
          a4->flags = 0x8000000;
          CFStringGetCString(CFSTR("peak attack time"), a4->name, 52, 0x8000100u);
          a4->unit = kAudioUnitParameterUnit_Seconds;
          v21 = 0x3F000000358637BDLL;
          goto LABEL_111;
        case 10:
          a4->cfNameString = CFSTR("peak decay time");
          a4->flags = 0x8000000;
          CFStringGetCString(CFSTR("peak decay time"), a4->name, 52, 0x8000100u);
          a4->unit = kAudioUnitParameterUnit_Seconds;
          v22 = 0x43B4000038D1B717;
          goto LABEL_74;
        case 11:
          a4->cfNameString = CFSTR("feedback integration time");
          a4->flags = 0x8000000;
          CFStringGetCString(CFSTR("feedback integration time"), a4->name, 52, 0x8000100u);
          a4->unit = kAudioUnitParameterUnit_Seconds;
          v23 = 0x43B40000358637BDLL;
          goto LABEL_129;
        case 12:
          goto LABEL_13;
        case 13:
          goto LABEL_14;
        case 14:
          a4->cfNameString = CFSTR("spk pwr averaging window time");
          a4->flags = 0x8000000;
          CFStringGetCString(CFSTR("spk pwr averaging window time"), a4->name, 52, 0x8000100u);
          a4->unit = kAudioUnitParameterUnit_Seconds;
          *(_QWORD *)&a4->minValue = 0x41F000003DCCCCCDLL;
          v18 = 5.0;
          goto LABEL_124;
        case 15:
          v24 = CFSTR("modeled speaker power");
          goto LABEL_31;
        case 16:
          v24 = CFSTR("measured speaker power");
LABEL_31:
          a4->cfNameString = v24;
          a4->flags = 0x8000000;
          CFStringGetCString(v24, a4->name, 52, 0x8000100u);
          a4->unit = kAudioUnitParameterUnit_Generic;
          *(_QWORD *)&a4->minValue = 0x41A0000000000000;
          a4->defaultValue = 0.0;
          v25 = a4->flags + 1077977088;
          goto LABEL_133;
        case 17:
          goto LABEL_15;
        case 18:
          v9 = CFSTR("CPMS power control enabled");
          goto LABEL_59;
        case 19:
          a4->cfNameString = CFSTR("CPMS power control closed loop");
          a4->flags = 0x8000000;
          CFStringGetCString(CFSTR("CPMS power control closed loop"), a4->name, 52, 0x8000100u);
          a4->unit = kAudioUnitParameterUnit_Boolean;
          v19 = 0x3F80000000000000;
LABEL_34:
          *(_QWORD *)&a4->minValue = v19;
          a4->defaultValue = 0.0;
          goto LABEL_125;
        default:
          return 4294956418;
      }
    }
    return 4294956418;
  }
  return result;
}

uint64_t AUSpeakerProtectionV3::SaveState(AUSpeakerProtectionV3 *this, ausdk **a2)
{
  __CFDictionary *v3;
  CFNumberRef v4;
  int valuePtr;

  ausdk::AUBase::SaveState(this, a2);
  if (a2)
  {
    v3 = *a2;
    if (v3)
    {
      valuePtr = 65537;
      v4 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
      CFDictionarySetValue(v3, CFSTR("auversion"), v4);
      CFRelease(v4);
    }
  }
  return 0;
}

UInt8 *AUSpeakerProtectionV3::SaveExtendedScopes(AUSpeakerProtectionV3 *this, __CFData *a2)
{
  ausdk::AUScope *Scope;

  Scope = (ausdk::AUScope *)ausdk::AUBase::GetScope(this, 4u);
  return ausdk::AUScope::SaveState(Scope, a2);
}

uint64_t AUSpeakerProtectionV3::RestoreState(AUSpeakerProtectionV3 *this, CFTypeRef cf)
{
  CFTypeID v4;
  uint64_t result;
  NSObject **v6;
  NSObject *v7;
  _BOOL4 v8;
  int valuePtr;
  uint8_t buf[4];
  const char *v11;
  __int16 v12;
  int v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  if (!*((_BYTE *)this + 1185))
    return 0;
  v4 = CFGetTypeID(cf);
  if (v4 != CFDictionaryGetTypeID())
    return 4294956445;
  valuePtr = 0;
  result = (uint64_t)CFDictionaryGetValue((CFDictionaryRef)cf, CFSTR("auversion"));
  if (!result)
    return result;
  if (CFNumberGetValue((CFNumberRef)result, kCFNumberSInt32Type, &valuePtr) && valuePtr == 65537)
  {
    result = ausdk::AUBase::RestoreState((OpaqueAudioComponentInstance **)this, cf);
    ++*((_DWORD *)this + 159);
    return result;
  }
  v6 = (NSObject **)spp3Subsystem();
  if (v6)
  {
    v7 = *v6;
    if (!*v6)
      return 0;
  }
  else
  {
    v7 = MEMORY[0x1E0C81028];
  }
  v8 = os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT);
  result = 0;
  if (!v8)
    return result;
  *(_DWORD *)buf = 136315394;
  v11 = "AUSpeakerProtectionV3.cpp";
  v12 = 1024;
  v13 = 2746;
  _os_log_impl(&dword_1B5ED0000, v7, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Preset does not match AU version. Skipping RestoreState", buf, 0x12u);
  return 0;
}

uint64_t AUSpeakerProtectionV3::GetParameterValueStrings(AUSpeakerProtectionV3 *this, int a2, int a3, const __CFArray **a4)
{
  uint64_t result;
  const __CFArray *v6;
  const __CFString *v7;
  const __CFString *v8;
  const __CFString *v9;
  const __CFString *v10;
  const __CFString *v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  if (a2 != 4)
    return 4294956418;
  if (a3 == 42)
  {
    if (a4)
    {
      v7 = CFSTR("Open Loop");
      v8 = CFSTR("Convoy Limit");
      v9 = CFSTR("Convoy Adaptive");
      v10 = CFSTR("Adaptive");
      v11 = CFSTR("Convoy Limit v2");
      v6 = CFArrayCreate(0, (const void **)&v7, 5, 0);
      result = 0;
      *a4 = v6;
      return result;
    }
    return 4294956445;
  }
  if (a3 == 20)
  {
    if (a4)
    {
      v7 = CFSTR("None   ");
      v8 = CFSTR("Pilot Tone");
      v9 = CFSTR("LP MLS");
      *a4 = CFArrayCreate(0, (const void **)&v7, 3, 0);
      return 4294956418;
    }
    return 4294956445;
  }
  return 4294956418;
}

double AUSpeakerProtectionV3::GetLatency(AUSpeakerProtectionV3 *this)
{
  return 0.0;
}

double AUSpeakerProtectionV3::GetTailTime(AUSpeakerProtectionV3 *this)
{
  return 0.0;
}

uint64_t AUSpeakerProtectionV3::SupportsTail(AUSpeakerProtectionV3 *this)
{
  return 1;
}

BOOL AUSpeakerProtectionV3::StreamFormatWritable(AUSpeakerProtectionV3 *this)
{
  return *((_BYTE *)this + 17) == 0;
}

uint64_t AUSpeakerProtectionV3::SupportedNumChannels(AUSpeakerProtectionV3 *this, const AUChannelInfo **a2)
{
  if (a2)
    *a2 = (const AUChannelInfo *)&AUSpeakerProtectionV3::SupportedNumChannels(AUChannelInfo const**)::sSupportedChannelConfigs;
  return 8;
}

BOOL AUSpeakerProtectionV3::ValidFormat(AUSpeakerProtectionV3 *this, int a2, int a3, const AudioStreamBasicDescription *a4)
{
  _BOOL8 result;
  __int128 v6;
  int v7;
  _OWORD v8[2];
  uint64_t v9;
  int v10;

  if (a2 == 2 || (result = 1, a2 == 1) && !a3)
  {
    v6 = *(_OWORD *)&a4->mBytesPerPacket;
    v8[0] = *(_OWORD *)&a4->mSampleRate;
    v8[1] = v6;
    v9 = *(_QWORD *)&a4->mBitsPerChannel;
    v10 = 0;
    v7 = CAStreamBasicDescription::IdentifyCommonPCMFormat(v8, &v10, 0);
    result = 0;
    if (v7)
    {
      if (v10 == 1)
        return a4->mChannelsPerFrame - 1 < 8;
    }
  }
  return result;
}

uint64_t AUSpeakerProtectionV3::ChangeStreamFormat(AUSpeakerProtectionV3 *this, uint64_t a2, uint64_t a3, const AudioStreamBasicDescription *__s2, const AudioStreamBasicDescription *__s1)
{
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  UInt32 *p_mChannelsPerFrame;
  uint32x2_t v16;
  uint32x2_t v17;
  uint64_t Element;
  _QWORD v19[2];
  __int32 v20;
  int v21;
  uint32x2_t v22;
  uint64_t v23;

  if ((_DWORD)a2 != 1)
  {
    ausdk::AUBase::ChangeStreamFormat(this, a2, a3, __s2, __s1);
    return 0;
  }
  if ((_DWORD)a3 == 1)
  {
    v11 = *((_QWORD *)this + 15);
    if (v11)
      LODWORD(v12) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 24))(v11);
    else
      v12 = (*((_QWORD *)this + 13) - *((_QWORD *)this + 12)) >> 3;
    if (v12 >= 2)
    {
      ausdk::AUBase::ChangeStreamFormat(this, 1, 1, __s2, __s1);
      result = 0;
      *((_BYTE *)this + 1330) = 1;
      return result;
    }
    return 4294956419;
  }
  if ((_DWORD)a3)
    return 4294956419;
  ausdk::AUBase::ChangeStreamFormat(this, 1, a3, __s2, __s1);
  result = 0;
  if (*((_BYTE *)this + 1330))
    return result;
  v9 = *((_QWORD *)this + 15);
  if (v9)
    LODWORD(v10) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 24))(v9);
  else
    v10 = (*((_QWORD *)this + 13) - *((_QWORD *)this + 12)) >> 3;
  if (v10 < 2)
    return 0;
  v13 = *((_QWORD *)this + 15);
  if (v13)
  {
    result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v13 + 32))(v13, 1);
    goto LABEL_22;
  }
  v14 = *((_QWORD *)this + 12);
  if ((unint64_t)(*((_QWORD *)this + 13) - v14) < 9)
    return 0;
  result = *(_QWORD *)(v14 + 8);
LABEL_22:
  if (result)
  {
    p_mChannelsPerFrame = &__s1->mChannelsPerFrame;
    v16 = (uint32x2_t)vld1_dup_f32((const float *)p_mChannelsPerFrame);
    v19[0] = *(_QWORD *)&__s1->mSampleRate;
    v19[1] = 0x96C70636DLL;
    v21 = 1;
    v17 = vshl_u32(v16, (uint32x2_t)0x100000003);
    v20 = v17.i32[0];
    v22 = v17;
    v23 = 32;
    Element = ausdk::AUScope::SafeGetElement((AUSpeakerProtectionV3 *)((char *)this + 80), 1u);
    return (*(uint64_t (**)(uint64_t, _QWORD *))(*(_QWORD *)Element + 56))(Element, v19);
  }
  return result;
}

uint64_t AUSpeakerProtectionV3::GetScopeExtended(AUSpeakerProtectionV3 *this, int a2)
{
  if (a2 == 4)
    return (uint64_t)this + 792;
  else
    return 0;
}

uint64_t AUSpeakerProtectionV3::ShouldBypassEffect(AUSpeakerProtectionV3 *this)
{
  return *((unsigned __int8 *)this + 530);
}

uint64_t AUSpeakerProtectionV3::SetBypassEffect(uint64_t this, char a2)
{
  *(_BYTE *)(this + 530) = a2;
  return this;
}

void AUSpeakerProtectionV3::AttenuateInputToOutput(AUSpeakerProtectionV3 *this, uint64_t a2, const AudioBufferList **a3, AudioBufferList **a4, float a5)
{
  uint64_t Element;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  float *v13;
  uint64_t v14;
  float __B;

  __B = 0.1;
  Element = ausdk::AUScope::SafeGetElement((AUSpeakerProtectionV3 *)((char *)this + 128), 0);
  v9 = (uint64_t)*a4;
  if ((*a4)->mNumberBuffers)
  {
    v10 = Element;
    v11 = 0;
    v12 = 16;
    do
    {
      v13 = *(float **)(v9 + v12);
      if ((*(_DWORD *)(v10 + 92) & 0x20) != 0)
        v14 = 1;
      else
        v14 = *(unsigned int *)(v10 + 108);
      vDSP_vsmul(*(const float **)((char *)&(*a3)->mNumberBuffers + v12), 1, &__B, v13, 1, v14 * a2);
      ++v11;
      v9 = (uint64_t)*a4;
      v12 += 16;
    }
    while (v11 < (*a4)->mNumberBuffers);
  }
}

void AUSpeakerProtectionV3::ApplyParameters(AUSpeakerProtectionV3 *this)
{
  int v2;
  uint64_t v3;
  NSObject *v4;
  int v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  ausdk::AUElement *v11;
  uint64_t v12;
  int Parameter;
  std::exception_vtbl *v14;
  uint64_t v15;
  ausdk::AUElement *v16;
  uint64_t v17;
  float v18;
  uint64_t v19;
  ausdk::AUElement *v20;
  uint64_t v21;
  float v22;
  uint64_t v23;
  ausdk::AUElement *v24;
  uint64_t v25;
  float v26;
  uint64_t v27;
  ausdk::AUElement *v28;
  uint64_t v29;
  float v30;
  uint64_t v31;
  ausdk::AUElement *v32;
  uint64_t v33;
  float v34;
  uint64_t v35;
  ausdk::AUElement *v36;
  uint64_t v37;
  float v38;
  uint64_t v39;
  ausdk::AUElement *v40;
  uint64_t v41;
  float v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  ausdk::AUElement *v47;
  uint64_t v48;
  float v49;
  uint64_t v50;
  ausdk::AUElement *v51;
  uint64_t v52;
  float v53;
  uint64_t v54;
  ausdk::AUElement *v55;
  uint64_t v56;
  float v57;
  uint64_t v58;
  float v59;
  uint64_t v60;
  int v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  ausdk::AUElement *v65;
  uint64_t v66;
  float v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t v70;
  uint64_t v71;
  ausdk::AUElement *v72;
  ausdk::AUElement **v73;
  uint64_t v74;
  uint64_t v75;
  ausdk::AUElement *v76;
  ausdk::AUElement **v77;
  uint64_t v78;
  uint64_t v79;
  ausdk::AUElement *v80;
  ausdk::AUElement **v81;
  uint64_t v82;
  uint64_t v83;
  ausdk::AUElement *v84;
  ausdk::AUElement **v85;
  uint64_t v86;
  uint64_t v87;
  ausdk::AUElement *v88;
  ausdk::AUElement **v89;
  uint64_t v90;
  uint64_t v91;
  ausdk::AUElement *v92;
  ausdk::AUElement **v93;
  uint64_t v94;
  uint64_t v95;
  ausdk::AUElement *v96;
  ausdk::AUElement **v97;
  float v98;
  uint64_t v99;
  uint64_t v100;
  ausdk::AUElement *v101;
  ausdk::AUElement **v102;
  float v103;
  uint64_t v104;
  uint64_t v105;
  ausdk::AUElement *v106;
  ausdk::AUElement **v107;
  float v108;
  uint64_t v109;
  uint64_t v110;
  ausdk::AUElement *v111;
  ausdk::AUElement **v112;
  uint64_t v113;
  uint64_t v114;
  ausdk::AUElement *v115;
  ausdk::AUElement **v116;
  float v117;
  uint64_t v118;
  uint64_t v119;
  ausdk::AUElement *v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  ausdk::AUElement *v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  ausdk::AUElement *v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  ausdk::AUElement *v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  ausdk::AUElement *v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  ausdk::AUElement *v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  ausdk::AUElement *v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  ausdk::AUElement *v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  ausdk::AUElement *v152;
  uint64_t v153;
  float v154;
  uint64_t v155;
  uint64_t v156;
  ausdk::AUElement *v157;
  uint64_t v158;
  float v159;
  uint64_t v160;
  uint64_t v161;
  ausdk::AUElement *v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  ausdk::AUElement *v166;
  uint64_t v167;
  float v168;
  uint64_t v169;
  uint64_t v170;
  ausdk::AUElement *v171;
  uint64_t v172;
  double v173;
  uint64_t v174;
  uint64_t v175;
  ausdk::AUElement *v176;
  uint64_t v177;
  double *v178;
  uint64_t v179;
  ausdk::AUElement *v180;
  uint64_t v181;
  double v182;
  uint64_t v183;
  uint64_t v184;
  ausdk::AUElement *v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  ausdk::AUElement *v189;
  uint64_t v190;
  double *v191;
  uint64_t v192;
  ausdk::AUElement *v193;
  uint64_t v194;
  double v195;
  uint64_t v196;
  uint64_t v197;
  ausdk::AUElement *v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  ausdk::AUElement *v202;
  uint64_t v203;
  uint64_t v204;
  ausdk::AUElement *v205;
  uint64_t v206;
  float v207;
  uint64_t v208;
  ausdk::AUElement *v209;
  uint64_t v210;
  float v211;
  uint64_t v212;
  float v213;
  uint64_t v214;
  float v215;
  uint64_t v216;
  uint64_t v217;
  ausdk::AUElement *v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  ausdk::AUElement *v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  ausdk::AUElement *v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  ausdk::AUElement *v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  ausdk::AUElement *v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  ausdk::AUElement *v238;
  uint64_t v239;
  float v240;
  uint64_t v241;
  ausdk::AUElement *v242;
  uint64_t v243;
  float v244;
  uint64_t v245;
  ausdk::AUElement *v246;
  uint64_t v247;
  float v248;
  uint64_t v249;
  ausdk::AUElement *v250;
  uint64_t v251;
  __n128 v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  ausdk::AUElement *v257;
  uint64_t v258;
  float v259;
  uint64_t v260;
  ausdk::AUElement *v261;
  uint64_t v262;
  float v263;
  uint64_t v264;
  ausdk::AUElement *v265;
  uint64_t v266;
  float v267;
  uint64_t v268;
  float v269;
  uint64_t v270;
  int v271;
  uint64_t v272;
  uint64_t v273;
  uint64_t v274;
  ausdk::AUElement *v275;
  uint64_t v276;
  uint64_t v277;
  uint64_t v278;
  uint64_t v279;
  ausdk::AUElement *v280;
  uint64_t v281;
  __n128 v282;
  uint64_t v283;
  uint64_t v284;
  uint64_t v285;
  ausdk::AUElement *v286;
  uint64_t v287;
  __n128 v288;
  uint64_t v289;
  uint64_t v290;
  _QWORD *v291;
  unint64_t v292;
  uint64_t v293;
  uint64_t v294;
  ausdk::AUElement *v295;
  uint64_t v296;
  __n128 v297;
  unsigned int *v298;
  uint64_t v299;
  _QWORD *v300;
  unint64_t v301;
  uint64_t v302;
  _QWORD *v303;
  unint64_t v304;
  uint64_t v305;
  _QWORD *v306;
  unint64_t v307;
  uint64_t v308;
  uint64_t v309;
  ausdk::AUElement *v310;
  uint64_t v311;
  __n128 v312;
  _DWORD *v313;
  int v314;
  _DWORD *v315;
  uint64_t v316;
  uint64_t v317;
  ausdk::AUElement *v318;
  uint64_t v319;
  __n128 v320;
  _DWORD *v321;
  int v322;
  _DWORD *v323;
  uint64_t v324;
  uint64_t v325;
  ausdk::AUElement *v326;
  uint64_t v327;
  __n128 v328;
  uint64_t v329;
  int v330;
  uint64_t v331;
  uint64_t v332;
  ausdk::AUElement *v333;
  uint64_t v334;
  __n128 v335;
  uint64_t v336;
  int v337;
  uint64_t v338;
  uint64_t v339;
  ausdk::AUElement *v340;
  uint64_t v341;
  __n128 v342;
  _DWORD *v343;
  int v344;
  _DWORD *v345;
  uint64_t v346;
  uint64_t v347;
  ausdk::AUElement *v348;
  uint64_t v349;
  __n128 v350;
  _DWORD *v351;
  int v352;
  _DWORD *v353;
  uint64_t v354;
  uint64_t v355;
  ausdk::AUElement *v356;
  uint64_t v357;
  __n128 v358;
  uint64_t v359;
  int v360;
  uint64_t v361;
  uint64_t v362;
  ausdk::AUElement *v363;
  uint64_t v364;
  __n128 v365;
  uint64_t v366;
  int v367;
  uint64_t v368;
  uint64_t v369;
  ausdk::AUElement *v370;
  uint64_t v371;
  __n128 v372;
  _DWORD *v373;
  int v374;
  _DWORD *v375;
  uint64_t v376;
  uint64_t v377;
  ausdk::AUElement *v378;
  uint64_t v379;
  __n128 v380;
  _DWORD *v381;
  int v382;
  _DWORD *v383;
  uint64_t v384;
  uint64_t v385;
  ausdk::AUElement *v386;
  uint64_t v387;
  __n128 v388;
  _DWORD *v389;
  int v390;
  uint64_t v391;
  uint64_t v392;
  ausdk::AUElement *v393;
  uint64_t v394;
  __n128 v395;
  _DWORD *v396;
  int v397;
  uint64_t v398;
  uint64_t v399;
  ausdk::AUElement *v400;
  uint64_t v401;
  __n128 v402;
  _DWORD *v403;
  int v404;
  _DWORD *v405;
  uint64_t v406;
  uint64_t v407;
  ausdk::AUElement *v408;
  uint64_t v409;
  __n128 v410;
  _DWORD *v411;
  int v412;
  _DWORD *v413;
  uint64_t v414;
  uint64_t v415;
  ausdk::AUElement *v416;
  uint64_t v417;
  __n128 v418;
  _DWORD *v419;
  int v420;
  _DWORD *v421;
  uint64_t v422;
  uint64_t v423;
  ausdk::AUElement *v424;
  uint64_t v425;
  __n128 v426;
  _DWORD *v427;
  int v428;
  _DWORD *v429;
  uint64_t v430;
  uint64_t v431;
  ausdk::AUElement *v432;
  uint64_t v433;
  float v434;
  uint64_t v435;
  int v436;
  float *v437;
  uint64_t v438;
  unint64_t v439;
  uint64_t v440;
  ausdk::AUElement *v441;
  uint64_t v442;
  NSObject *v443;
  uint64_t v444;
  uint64_t v445;
  uint64_t v446;
  float *v447;
  float v448;
  BOOL v449;
  float v450;
  BOOL v451;
  float v452;
  BOOL v453;
  BOOL v454;
  BOOL v455;
  NSObject **v456;
  NSObject **v457;
  NSObject *v458;
  uint64_t v459;
  std::__shared_weak_count *v460;
  unint64_t *v461;
  unint64_t v462;
  NSObject **v463;
  NSObject *v464;
  int v465;
  NSObject *v466;
  const char *v467;
  NSObject **v468;
  NSObject *v469;
  int v470;
  float *v471;
  double v472;
  double v473;
  double v474;
  uint32_t v475;
  int v476;
  double v477;
  _QWORD *v478;
  double v479;
  double v480;
  double v481;
  double v482;
  double v483;
  uint64_t v484;
  uint64_t v485;
  uint64_t *v486;
  uint64_t v487;
  CFArrayRef *v488;
  clsp::FirFilter *v489;
  uint64_t v490;
  float v491;
  double v492;
  uint64_t v493;
  uint64_t v494;
  uint64_t v495;
  double v496;
  _QWORD *v497;
  uint64_t v498;
  _QWORD *v499;
  uint64_t v500;
  uint64_t v501;
  int v502;
  uint64_t v503;
  uint64_t v504;
  uint64_t v505;
  CFArrayRef *v506;
  clsp::FirFilter *v507;
  uint64_t v508;
  float v509;
  double v510;
  uint64_t v511;
  uint64_t v512;
  uint64_t v513;
  double v514;
  _QWORD *v515;
  uint64_t v516;
  _QWORD *v517;
  uint64_t v518;
  uint64_t v519;
  uint64_t v520;
  uint64_t v521;
  uint64_t v522;
  double v523;
  uint64_t v524;
  uint64_t v525;
  int v526;
  NSObject **v527;
  NSObject *v528;
  int v529;
  clsp::CLSPKernel_v5 **v530;
  clsp::CLSPKernel_v5 **v531;
  int v532;
  std::exception v533[7];
  _BYTE buf[24];
  _BYTE v535[32];
  uint64_t v536;
  __int128 v537;
  uint64_t v538;

  v538 = *MEMORY[0x1E0C80C00];
  shouldTraceRender();
  v2 = *((_DWORD *)this + 159);
  if (shouldTraceRender())
  {
    v3 = spp3SubsystemAsync();
    if (v3)
    {
      if ((*(_BYTE *)(v3 + 8) & 1) != 0)
      {
        v4 = *(NSObject **)v3;
        if (*(_QWORD *)v3)
        {
          if (os_log_type_enabled(*(os_log_t *)v3, OS_LOG_TYPE_DEBUG))
          {
            v5 = *((_DWORD *)this + 160);
            *(_DWORD *)buf = 136315906;
            *(_QWORD *)&buf[4] = "AUSpeakerProtectionV3.cpp";
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = 2530;
            *(_WORD *)&buf[18] = 1024;
            *(_DWORD *)&buf[20] = v2;
            *(_WORD *)v535 = 1024;
            *(_DWORD *)&v535[2] = v5;
            _os_log_impl(&dword_1B5ED0000, v4, OS_LOG_TYPE_DEBUG, "%25s:%-5d AUSpeakerProtectionV3::ApplyParameters(): Params up to date. paramSeed=%d; mParamsUpdated=%d",
              buf,
              0x1Eu);
          }
        }
      }
    }
  }
  if (v2 != *((_DWORD *)this + 160))
  {
    v6 = (uint64_t *)((char *)this + 840);
    v7 = *((_QWORD *)this + 106);
    v532 = v2;
    if (v7 != *((_QWORD *)this + 105))
    {
      v8 = 0;
      v9 = 0;
      do
      {
        v10 = *((_QWORD *)this + 104);
        if (v10)
        {
          v11 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)v10 + 32))(v10, v9);
        }
        else
        {
          v12 = *((_QWORD *)this + 101);
          if (v9 >= (*((_QWORD *)this + 102) - v12) >> 3)
            v11 = 0;
          else
            v11 = *(ausdk::AUElement **)(v12 + 8 * v9);
        }
        Parameter = ausdk::AUElement::GetParameter(v11, 0x14u);
        if (*((_DWORD *)this + 163) != Parameter)
        {
          v14 = (std::exception_vtbl *)*((unsigned int *)this + 84);
          v15 = *((_QWORD *)this + 104);
          if (v15)
          {
            v16 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)v15 + 32))(v15, v9);
          }
          else
          {
            v17 = *((_QWORD *)this + 101);
            if (v9 >= (*((_QWORD *)this + 102) - v17) >> 3)
              v16 = 0;
            else
              v16 = *(ausdk::AUElement **)(v17 + 8 * v9);
          }
          v18 = ausdk::AUElement::GetParameter(v16, 0x21u);
          v19 = *((_QWORD *)this + 104);
          if (v19)
          {
            v20 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)v19 + 32))(v19, v9);
          }
          else
          {
            v21 = *((_QWORD *)this + 101);
            if (v9 >= (*((_QWORD *)this + 102) - v21) >> 3)
              v20 = 0;
            else
              v20 = *(ausdk::AUElement **)(v21 + 8 * v9);
          }
          v22 = ausdk::AUElement::GetParameter(v20, 0x22u);
          v23 = *((_QWORD *)this + 104);
          if (v23)
          {
            v24 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)v23 + 32))(v23, v9);
          }
          else
          {
            v25 = *((_QWORD *)this + 101);
            if (v9 >= (*((_QWORD *)this + 102) - v25) >> 3)
              v24 = 0;
            else
              v24 = *(ausdk::AUElement **)(v25 + 8 * v9);
          }
          v26 = ausdk::AUElement::GetParameter(v24, 0x23u);
          v27 = *((_QWORD *)this + 104);
          if (v27)
          {
            v28 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)v27 + 32))(v27, v9);
          }
          else
          {
            v29 = *((_QWORD *)this + 101);
            if (v9 >= (*((_QWORD *)this + 102) - v29) >> 3)
              v28 = 0;
            else
              v28 = *(ausdk::AUElement **)(v29 + 8 * v9);
          }
          v30 = ausdk::AUElement::GetParameter(v28, 0x20u);
          LODWORD(v533[0].__vftable) = 1;
          *(double *)&v533[1].__vftable = v30;
          v533[2].__vftable = (std::exception_vtbl *)0x4059000000000000;
          v533[3].__vftable = v14;
          *(double *)&v533[4].__vftable = v18;
          *(double *)&v533[5].__vftable = v22;
          *(double *)&v533[6].__vftable = v26;
          v31 = *((_QWORD *)this + 104);
          if (v31)
          {
            v32 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)v31 + 32))(v31, v9);
          }
          else
          {
            v33 = *((_QWORD *)this + 101);
            if (v9 >= (*((_QWORD *)this + 102) - v33) >> 3)
              v32 = 0;
            else
              v32 = *(ausdk::AUElement **)(v33 + 8 * v9);
          }
          v34 = ausdk::AUElement::GetParameter(v32, 0x20u);
          v35 = *((_QWORD *)this + 104);
          if (v35)
          {
            v36 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)v35 + 32))(v35, v9);
          }
          else
          {
            v37 = *((_QWORD *)this + 101);
            if (v9 >= (*((_QWORD *)this + 102) - v37) >> 3)
              v36 = 0;
            else
              v36 = *(ausdk::AUElement **)(v37 + 8 * v9);
          }
          v38 = ausdk::AUElement::GetParameter(v36, 0x19u);
          v39 = *((_QWORD *)this + 104);
          if (v39)
          {
            v40 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)v39 + 32))(v39, v9);
          }
          else
          {
            v41 = *((_QWORD *)this + 101);
            if (v9 >= (*((_QWORD *)this + 102) - v41) >> 3)
              v40 = 0;
            else
              v40 = *(ausdk::AUElement **)(v41 + 8 * v9);
          }
          v42 = ausdk::AUElement::GetParameter(v40, 9u);
          v43 = *((unsigned int *)this + 84);
          *(_QWORD *)buf = 0x3FC70A3D80000000;
          *(double *)&buf[8] = v34;
          *(double *)&buf[16] = v38;
          *(double *)v535 = v42;
          *(_OWORD *)&v535[8] = xmmword_1B66A2410;
          *(_DWORD *)&v535[24] = 925353388;
          v536 = v43;
          v537 = xmmword_1B66A2420;
          v44 = (uint64_t)(*((_QWORD *)this + 88) - *((_QWORD *)this + 87)) >> 3;
          v45 = *((_QWORD *)this + 105);
          if (v44 == (*((_QWORD *)this + 106) - v45) >> 4
            && v44 == (uint64_t)(*((_QWORD *)this + 85) - *((_QWORD *)this + 84)) >> 3)
          {
            v46 = *((_QWORD *)this + 104);
            if (v46)
            {
              v47 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)v46 + 32))(v46, v9);
            }
            else
            {
              v48 = *((_QWORD *)this + 101);
              if (v9 >= (*((_QWORD *)this + 102) - v48) >> 3)
                v47 = 0;
              else
                v47 = *(ausdk::AUElement **)(v48 + 8 * v9);
            }
            v49 = ausdk::AUElement::GetParameter(v47, 0x18u);
            v50 = *((_QWORD *)this + 104);
            if (v50)
            {
              v51 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)v50 + 32))(v50, v9);
            }
            else
            {
              v52 = *((_QWORD *)this + 101);
              if (v9 >= (*((_QWORD *)this + 102) - v52) >> 3)
                v51 = 0;
              else
                v51 = *(ausdk::AUElement **)(v52 + 8 * v9);
            }
            v53 = ausdk::AUElement::GetParameter(v51, 0x20u);
            v54 = *((_QWORD *)this + 104);
            if (v54)
            {
              v55 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)v54 + 32))(v54, v9);
            }
            else
            {
              v56 = *((_QWORD *)this + 101);
              if (v9 >= (*((_QWORD *)this + 102) - v56) >> 3)
                v55 = 0;
              else
                v55 = *(ausdk::AUElement **)(v56 + 8 * v9);
            }
            v57 = ausdk::AUElement::GetParameter(v55, 0x19u);
            v58 = *(_QWORD *)(*((_QWORD *)this + 84) + 8 * v9);
            v59 = **(float **)(*((_QWORD *)this + 87) + 8 * v9);
            v60 = *(_QWORD *)(v58 + 20);
            v61 = *(_DWORD *)(v58 + 8);
            v62 = *(_QWORD *)(v58 + 40);
            v63 = *((unsigned int *)this + 84);
            v64 = *((_QWORD *)this + 104);
            if (v64)
            {
              v65 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)v64 + 32))(v64, v9);
            }
            else
            {
              v66 = *((_QWORD *)this + 101);
              if (v9 >= (*((_QWORD *)this + 102) - v66) >> 3)
                v65 = 0;
              else
                v65 = *(ausdk::AUElement **)(v66 + 8 * v9);
            }
            v67 = ausdk::AUElement::GetParameter(v65, 0x23u);
            *(double *)buf = v49;
            *(double *)&buf[8] = v53;
            *(double *)&buf[16] = v57;
            *(double *)v535 = v59;
            *(_QWORD *)&v535[8] = v60;
            *(_DWORD *)&v535[16] = v61;
            *(_QWORD *)&v535[20] = v62;
            v536 = v63;
            *((double *)&v537 + 1) = v67;
            v45 = *v6;
          }
          clsp::ClosedLoopThermalModule::setPilotGenType(*(_QWORD *)(v45 + v8) + 152, Parameter, (__int128 *)v533, (__int128 *)buf, *((double *)this + 78));
        }
        ++v9;
        v68 = *((_QWORD *)this + 106);
        v7 = *((_QWORD *)this + 105);
        v8 += 16;
      }
      while (v9 < (v68 - v7) >> 4);
      if (v68 != v7)
      {
        v69 = 0;
        while (1)
        {
          v70 = *(_QWORD *)(v7 + 16 * v69);
          v71 = *((_QWORD *)this + 9);
          if (v71)
          {
            v72 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v71 + 32))(v71, 0);
          }
          else
          {
            v73 = (ausdk::AUElement **)*((_QWORD *)this + 6);
            if (*((ausdk::AUElement ***)this + 7) == v73)
              v72 = 0;
            else
              v72 = *v73;
          }
          *(float *)(v70 + 440) = ausdk::AUElement::GetParameter(v72, 4u);
          v74 = *(_QWORD *)(*((_QWORD *)this + 105) + 16 * v69);
          v75 = *((_QWORD *)this + 9);
          if (v75)
          {
            v76 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v75 + 32))(v75, 0);
          }
          else
          {
            v77 = (ausdk::AUElement **)*((_QWORD *)this + 6);
            if (*((ausdk::AUElement ***)this + 7) == v77)
              v76 = 0;
            else
              v76 = *v77;
          }
          *(float *)(v74 + 456) = ausdk::AUElement::GetParameter(v76, 5u);
          v78 = *(_QWORD *)(*((_QWORD *)this + 105) + 16 * v69);
          v79 = *((_QWORD *)this + 9);
          if (v79)
          {
            v80 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v79 + 32))(v79, 0);
          }
          else
          {
            v81 = (ausdk::AUElement **)*((_QWORD *)this + 6);
            if (*((ausdk::AUElement ***)this + 7) == v81)
              v80 = 0;
            else
              v80 = *v81;
          }
          *(double *)(v78 + 464) = ausdk::AUElement::GetParameter(v80, 6u);
          v82 = *(_QWORD *)(*((_QWORD *)this + 105) + 16 * v69);
          v83 = *((_QWORD *)this + 9);
          if (v83)
          {
            v84 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v83 + 32))(v83, 0);
          }
          else
          {
            v85 = (ausdk::AUElement **)*((_QWORD *)this + 6);
            if (*((ausdk::AUElement ***)this + 7) == v85)
              v84 = 0;
            else
              v84 = *v85;
          }
          *(float *)(v82 + 472) = ausdk::AUElement::GetParameter(v84, 7u);
          v86 = *(_QWORD *)(*((_QWORD *)this + 105) + 16 * v69);
          v87 = *((_QWORD *)this + 9);
          if (v87)
          {
            v88 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v87 + 32))(v87, 0);
          }
          else
          {
            v89 = (ausdk::AUElement **)*((_QWORD *)this + 6);
            if (*((ausdk::AUElement ***)this + 7) == v89)
              v88 = 0;
            else
              v88 = *v89;
          }
          *(double *)(v86 + 640) = ausdk::AUElement::GetParameter(v88, 2u);
          v90 = *(_QWORD *)(*((_QWORD *)this + 105) + 16 * v69);
          v91 = *((_QWORD *)this + 9);
          if (v91)
          {
            v92 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v91 + 32))(v91, 0);
          }
          else
          {
            v93 = (ausdk::AUElement **)*((_QWORD *)this + 6);
            if (*((ausdk::AUElement ***)this + 7) == v93)
              v92 = 0;
            else
              v92 = *v93;
          }
          *(double *)(v90 + 632) = ausdk::AUElement::GetParameter(v92, 3u);
          v94 = *(_QWORD *)(*((_QWORD *)this + 105) + 16 * v69);
          v95 = *((_QWORD *)this + 9);
          if (v95)
          {
            v96 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v95 + 32))(v95, 0);
          }
          else
          {
            v97 = (ausdk::AUElement **)*((_QWORD *)this + 6);
            if (*((ausdk::AUElement ***)this + 7) == v97)
              v96 = 0;
            else
              v96 = *v97;
          }
          v98 = ausdk::AUElement::GetParameter(v96, 9u);
          (*(void (**)(_QWORD, double))(**(_QWORD **)(v94 + 424) + 80))(*(_QWORD *)(v94 + 424), v98);
          v99 = *(_QWORD *)(*((_QWORD *)this + 105) + 16 * v69);
          v100 = *((_QWORD *)this + 9);
          if (v100)
          {
            v101 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v100 + 32))(v100, 0);
          }
          else
          {
            v102 = (ausdk::AUElement **)*((_QWORD *)this + 6);
            if (*((ausdk::AUElement ***)this + 7) == v102)
              v101 = 0;
            else
              v101 = *v102;
          }
          v103 = ausdk::AUElement::GetParameter(v101, 0xAu);
          (*(void (**)(_QWORD, double))(**(_QWORD **)(v99 + 424) + 96))(*(_QWORD *)(v99 + 424), v103);
          v104 = *(_QWORD *)(*((_QWORD *)this + 105) + 16 * v69);
          v105 = *((_QWORD *)this + 9);
          if (v105)
          {
            v106 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v105 + 32))(v105, 0);
          }
          else
          {
            v107 = (ausdk::AUElement **)*((_QWORD *)this + 6);
            if (*((ausdk::AUElement ***)this + 7) == v107)
              v106 = 0;
            else
              v106 = *v107;
          }
          v108 = ausdk::AUElement::GetParameter(v106, 0xBu);
          (*(void (**)(_QWORD, double))(**(_QWORD **)(v104 + 424) + 112))(*(_QWORD *)(v104 + 424), v108);
          v109 = *(_QWORD *)(*((_QWORD *)this + 105) + 16 * v69);
          v110 = *((_QWORD *)this + 9);
          if (v110)
          {
            v111 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v110 + 32))(v110, 0);
          }
          else
          {
            v112 = (ausdk::AUElement **)*((_QWORD *)this + 6);
            if (*((ausdk::AUElement ***)this + 7) == v112)
              v111 = 0;
            else
              v111 = *v112;
          }
          **(double **)(v109 + 776) = ausdk::AUElement::GetParameter(v111, 8u);
          v113 = *(_QWORD *)(*((_QWORD *)this + 105) + 16 * v69);
          v114 = *((_QWORD *)this + 9);
          if (v114)
          {
            v115 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v114 + 32))(v114, 0);
          }
          else
          {
            v116 = (ausdk::AUElement **)*((_QWORD *)this + 6);
            if (*((ausdk::AUElement ***)this + 7) == v116)
              v115 = 0;
            else
              v115 = *v116;
          }
          v117 = ausdk::AUElement::GetParameter(v115, 0xEu);
          **(float **)(v113 + 784) = v117;
          **(float **)(v113 + 792) = v117;
          v118 = *(_QWORD *)(*((_QWORD *)this + 105) + 16 * v69);
          v119 = *((_QWORD *)this + 104);
          if (v119)
          {
            v120 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)v119 + 32))(v119, v69);
          }
          else
          {
            v121 = *((_QWORD *)this + 101);
            if (v69 >= (unint64_t)((*((_QWORD *)this + 102) - v121) >> 3))
              v120 = 0;
            else
              v120 = *(ausdk::AUElement **)(v121 + 8 * v69);
          }
          *(float *)(v118 + 432) = ausdk::AUElement::GetParameter(v120, 0);
          v122 = *(_QWORD *)(*((_QWORD *)this + 105) + 16 * v69);
          v123 = *((_QWORD *)this + 104);
          if (v123)
          {
            v124 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)v123 + 32))(v123, v69);
          }
          else
          {
            v125 = *((_QWORD *)this + 101);
            if (v69 >= (unint64_t)((*((_QWORD *)this + 102) - v125) >> 3))
              v124 = 0;
            else
              v124 = *(ausdk::AUElement **)(v125 + 8 * v69);
          }
          *(float *)(v122 + 436) = ausdk::AUElement::GetParameter(v124, 1u);
          v126 = *(_QWORD *)(*((_QWORD *)this + 105) + 16 * v69);
          v127 = *((_QWORD *)this + 104);
          if (v127)
          {
            v128 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)v127 + 32))(v127, v69);
          }
          else
          {
            v129 = *((_QWORD *)this + 101);
            if (v69 >= (unint64_t)((*((_QWORD *)this + 102) - v129) >> 3))
              v128 = 0;
            else
              v128 = *(ausdk::AUElement **)(v129 + 8 * v69);
          }
          *(double *)(v126 + 64) = ausdk::AUElement::GetParameter(v128, 0xAu);
          v130 = *(_QWORD *)(*((_QWORD *)this + 105) + 16 * v69);
          v131 = *((_QWORD *)this + 104);
          if (v131)
          {
            v132 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)v131 + 32))(v131, v69);
          }
          else
          {
            v133 = *((_QWORD *)this + 101);
            if (v69 >= (unint64_t)((*((_QWORD *)this + 102) - v133) >> 3))
              v132 = 0;
            else
              v132 = *(ausdk::AUElement **)(v133 + 8 * v69);
          }
          *(double *)(v130 + 72) = ausdk::AUElement::GetParameter(v132, 0xBu);
          v134 = *(_QWORD *)(*((_QWORD *)this + 105) + 16 * v69);
          v135 = *((_QWORD *)this + 104);
          if (v135)
          {
            v136 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)v135 + 32))(v135, v69);
          }
          else
          {
            v137 = *((_QWORD *)this + 101);
            if (v69 >= (unint64_t)((*((_QWORD *)this + 102) - v137) >> 3))
              v136 = 0;
            else
              v136 = *(ausdk::AUElement **)(v137 + 8 * v69);
          }
          *(double *)(v134 + 128) = ausdk::AUElement::GetParameter(v136, 0xCu);
          v138 = *(_QWORD *)(*((_QWORD *)this + 105) + 16 * v69);
          v139 = *((_QWORD *)this + 104);
          if (v139)
          {
            v140 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)v139 + 32))(v139, v69);
          }
          else
          {
            v141 = *((_QWORD *)this + 101);
            if (v69 >= (unint64_t)((*((_QWORD *)this + 102) - v141) >> 3))
              v140 = 0;
            else
              v140 = *(ausdk::AUElement **)(v141 + 8 * v69);
          }
          *(double *)(v138 + 136) = ausdk::AUElement::GetParameter(v140, 0xDu);
          v142 = *(_QWORD *)(*((_QWORD *)this + 105) + 16 * v69);
          v143 = *((_QWORD *)this + 104);
          if (v143)
          {
            v144 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)v143 + 32))(v143, v69);
          }
          else
          {
            v145 = *((_QWORD *)this + 101);
            if (v69 >= (unint64_t)((*((_QWORD *)this + 102) - v145) >> 3))
              v144 = 0;
            else
              v144 = *(ausdk::AUElement **)(v145 + 8 * v69);
          }
          *(double *)(v142 + 144) = ausdk::AUElement::GetParameter(v144, 0xEu);
          v146 = *(_QWORD *)(*((_QWORD *)this + 105) + 16 * v69);
          v147 = *((_QWORD *)this + 104);
          if (v147)
          {
            v148 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)v147 + 32))(v147, v69);
          }
          else
          {
            v149 = *((_QWORD *)this + 101);
            if (v69 >= (unint64_t)((*((_QWORD *)this + 102) - v149) >> 3))
              v148 = 0;
            else
              v148 = *(ausdk::AUElement **)(v149 + 8 * v69);
          }
          *(double *)(v146 + 56) = ausdk::AUElement::GetParameter(v148, 0xFu);
          v150 = *(_QWORD *)(*((_QWORD *)this + 105) + 16 * v69);
          v151 = *((_QWORD *)this + 104);
          if (v151)
          {
            v152 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)v151 + 32))(v151, v69);
          }
          else
          {
            v153 = *((_QWORD *)this + 101);
            if (v69 >= (unint64_t)((*((_QWORD *)this + 102) - v153) >> 3))
              v152 = 0;
            else
              v152 = *(ausdk::AUElement **)(v153 + 8 * v69);
          }
          v154 = ausdk::AUElement::GetParameter(v152, 0x10u);
          (*(void (**)(_QWORD, double))(**(_QWORD **)(v150 + 424) + 32))(*(_QWORD *)(v150 + 424), v154);
          v155 = *(_QWORD *)(*((_QWORD *)this + 105) + 16 * v69);
          v156 = *((_QWORD *)this + 104);
          if (v156)
          {
            v157 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)v156 + 32))(v156, v69);
          }
          else
          {
            v158 = *((_QWORD *)this + 101);
            if (v69 >= (unint64_t)((*((_QWORD *)this + 102) - v158) >> 3))
              v157 = 0;
            else
              v157 = *(ausdk::AUElement **)(v158 + 8 * v69);
          }
          v159 = ausdk::AUElement::GetParameter(v157, 0x11u);
          (*(void (**)(_QWORD, double))(**(_QWORD **)(v155 + 424) + 64))(*(_QWORD *)(v155 + 424), v159);
          v160 = *(_QWORD *)(*((_QWORD *)this + 105) + 16 * v69);
          v161 = *((_QWORD *)this + 104);
          if (v161)
          {
            v162 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)v161 + 32))(v161, v69);
          }
          else
          {
            v163 = *((_QWORD *)this + 101);
            if (v69 >= (unint64_t)((*((_QWORD *)this + 102) - v163) >> 3))
              v162 = 0;
            else
              v162 = *(ausdk::AUElement **)(v163 + 8 * v69);
          }
          *(double *)(v160 + 120) = ausdk::AUElement::GetParameter(v162, 0x12u);
          v164 = *(_QWORD *)(*((_QWORD *)this + 105) + 16 * v69);
          v165 = *((_QWORD *)this + 104);
          if (v165)
          {
            v166 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)v165 + 32))(v165, v69);
          }
          else
          {
            v167 = *((_QWORD *)this + 101);
            if (v69 >= (unint64_t)((*((_QWORD *)this + 102) - v167) >> 3))
              v166 = 0;
            else
              v166 = *(ausdk::AUElement **)(v167 + 8 * v69);
          }
          v168 = ausdk::AUElement::GetParameter(v166, 0x13u);
          (*(void (**)(_QWORD, double))(**(_QWORD **)(v164 + 424) + 48))(*(_QWORD *)(v164 + 424), v168);
          v169 = *(_QWORD *)(*((_QWORD *)this + 105) + 16 * v69);
          v170 = *((_QWORD *)this + 104);
          if (v170)
          {
            v171 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)v170 + 32))(v170, v69);
          }
          else
          {
            v172 = *((_QWORD *)this + 101);
            if (v69 >= (unint64_t)((*((_QWORD *)this + 102) - v172) >> 3))
              v171 = 0;
            else
              v171 = *(ausdk::AUElement **)(v172 + 8 * v69);
          }
          v173 = ausdk::AUElement::GetParameter(v171, 2u);
          *(double *)(v169 + 488) = v173;
          *(double *)(v169 + 520) = v173;
          v174 = *(_QWORD *)(*((_QWORD *)this + 105) + 16 * v69);
          v175 = *((_QWORD *)this + 104);
          if (v175)
          {
            v176 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)v175 + 32))(v175, v69);
          }
          else
          {
            v177 = *((_QWORD *)this + 101);
            if (v69 >= (unint64_t)((*((_QWORD *)this + 102) - v177) >> 3))
              v176 = 0;
            else
              v176 = *(ausdk::AUElement **)(v177 + 8 * v69);
          }
          *(double *)(v174 + 504) = ausdk::AUElement::GetParameter(v176, 3u);
          v178 = *(double **)(*((_QWORD *)this + 105) + 16 * v69);
          v179 = *((_QWORD *)this + 104);
          if (v179)
          {
            v180 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)v179 + 32))(v179, v69);
          }
          else
          {
            v181 = *((_QWORD *)this + 101);
            if (v69 >= (unint64_t)((*((_QWORD *)this + 102) - v181) >> 3))
              v180 = 0;
            else
              v180 = *(ausdk::AUElement **)(v181 + 8 * v69);
          }
          v182 = ausdk::AUElement::GetParameter(v180, 4u);
          v178[62] = v182;
          v178[66] = v178[56] * v182;
          v183 = *(_QWORD *)(*((_QWORD *)this + 105) + 16 * v69);
          v184 = *((_QWORD *)this + 104);
          if (v184)
          {
            v185 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)v184 + 32))(v184, v69);
          }
          else
          {
            v186 = *((_QWORD *)this + 101);
            if (v69 >= (unint64_t)((*((_QWORD *)this + 102) - v186) >> 3))
              v185 = 0;
            else
              v185 = *(ausdk::AUElement **)(v186 + 8 * v69);
          }
          *(double *)(v183 + 512) = ausdk::AUElement::GetParameter(v185, 5u);
          v187 = *(_QWORD *)(*((_QWORD *)this + 105) + 16 * v69);
          v188 = *((_QWORD *)this + 104);
          if (v188)
          {
            v189 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)v188 + 32))(v188, v69);
          }
          else
          {
            v190 = *((_QWORD *)this + 101);
            if (v69 >= (unint64_t)((*((_QWORD *)this + 102) - v190) >> 3))
              v189 = 0;
            else
              v189 = *(ausdk::AUElement **)(v190 + 8 * v69);
          }
          *(double *)(v187 + 112) = ausdk::AUElement::GetParameter(v189, 9u);
          v191 = *(double **)(*((_QWORD *)this + 105) + 16 * v69);
          v192 = *((_QWORD *)this + 104);
          if (v192)
          {
            v193 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)v192 + 32))(v192, v69);
          }
          else
          {
            v194 = *((_QWORD *)this + 101);
            if (v69 >= (unint64_t)((*((_QWORD *)this + 102) - v194) >> 3))
              v193 = 0;
            else
              v193 = *(ausdk::AUElement **)(v194 + 8 * v69);
          }
          v195 = ausdk::AUElement::GetParameter(v193, 6u);
          v191[56] = v195;
          v191[66] = v191[62] * v195;
          v196 = *(_QWORD *)(*((_QWORD *)this + 105) + 16 * v69);
          v197 = *((_QWORD *)this + 104);
          if (v197)
          {
            v198 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)v197 + 32))(v197, v69);
          }
          else
          {
            v199 = *((_QWORD *)this + 101);
            if (v69 >= (unint64_t)((*((_QWORD *)this + 102) - v199) >> 3))
              v198 = 0;
            else
              v198 = *(ausdk::AUElement **)(v199 + 8 * v69);
          }
          *(double *)(v196 + 160) = ausdk::AUElement::GetParameter(v198, 0x17u);
          v200 = *(_QWORD *)(*((_QWORD *)this + 105) + 16 * v69);
          v201 = *((_QWORD *)this + 104);
          if (v201)
          {
            v202 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)v201 + 32))(v201, v69);
          }
          else
          {
            v203 = *((_QWORD *)this + 101);
            if (v69 >= (unint64_t)((*((_QWORD *)this + 102) - v203) >> 3))
              v202 = 0;
            else
              v202 = *(ausdk::AUElement **)(v203 + 8 * v69);
          }
          *(double *)(v200 + 152) = ausdk::AUElement::GetParameter(v202, 0x1Au);
          v204 = *((_QWORD *)this + 104);
          if (v204)
          {
            v205 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)v204 + 32))(v204, v69);
          }
          else
          {
            v206 = *((_QWORD *)this + 101);
            if (v69 >= (unint64_t)((*((_QWORD *)this + 102) - v206) >> 3))
              v205 = 0;
            else
              v205 = *(ausdk::AUElement **)(v206 + 8 * v69);
          }
          v207 = ausdk::AUElement::GetParameter(v205, 0x1Bu);
          v208 = *((_QWORD *)this + 104);
          if (v208)
          {
            v209 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)v208 + 32))(v208, v69);
          }
          else
          {
            v210 = *((_QWORD *)this + 101);
            if (v69 >= (unint64_t)((*((_QWORD *)this + 102) - v210) >> 3))
              v209 = 0;
            else
              v209 = *(ausdk::AUElement **)(v210 + 8 * v69);
          }
          v211 = ausdk::AUElement::GetParameter(v209, 0x1Cu);
          v212 = *(_QWORD *)(*((_QWORD *)this + 105) + 16 * v69);
          v213 = __exp10(v207 / 20.0);
          *(float *)(v212 + 172) = v213;
          v214 = *(_QWORD *)(*((_QWORD *)this + 105) + 16 * v69);
          v215 = __exp10(v211 / 20.0);
          *(float *)(v214 + 176) = v215;
          v216 = *(_QWORD *)(*((_QWORD *)this + 105) + 16 * v69);
          v217 = *((_QWORD *)this + 104);
          if (v217)
          {
            v218 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)v217 + 32))(v217, v69);
          }
          else
          {
            v219 = *((_QWORD *)this + 101);
            if (v69 >= (unint64_t)((*((_QWORD *)this + 102) - v219) >> 3))
              v218 = 0;
            else
              v218 = *(ausdk::AUElement **)(v219 + 8 * v69);
          }
          *(float *)(v216 + 180) = ausdk::AUElement::GetParameter(v218, 0x1Du);
          v220 = *(_QWORD *)(*((_QWORD *)this + 105) + 16 * v69);
          v221 = *((_QWORD *)this + 104);
          if (v221)
          {
            v222 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)v221 + 32))(v221, v69);
          }
          else
          {
            v223 = *((_QWORD *)this + 101);
            if (v69 >= (unint64_t)((*((_QWORD *)this + 102) - v223) >> 3))
              v222 = 0;
            else
              v222 = *(ausdk::AUElement **)(v223 + 8 * v69);
          }
          *(float *)(v220 + 184) = ausdk::AUElement::GetParameter(v222, 0x1Eu);
          v224 = *(_QWORD *)(*((_QWORD *)this + 105) + 16 * v69);
          v225 = *((_QWORD *)this + 104);
          if (v225)
          {
            v226 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)v225 + 32))(v225, v69);
          }
          else
          {
            v227 = *((_QWORD *)this + 101);
            if (v69 >= (unint64_t)((*((_QWORD *)this + 102) - v227) >> 3))
              v226 = 0;
            else
              v226 = *(ausdk::AUElement **)(v227 + 8 * v69);
          }
          *(double *)(v224 + 192) = ausdk::AUElement::GetParameter(v226, 0x1Fu);
          v228 = *(_QWORD *)(*((_QWORD *)this + 105) + 16 * v69);
          v229 = *((_QWORD *)this + 104);
          if (v229)
          {
            v230 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)v229 + 32))(v229, v69);
          }
          else
          {
            v231 = *((_QWORD *)this + 101);
            if (v69 >= (unint64_t)((*((_QWORD *)this + 102) - v231) >> 3))
              v230 = 0;
            else
              v230 = *(ausdk::AUElement **)(v231 + 8 * v69);
          }
          *(double *)(v228 + 200) = ausdk::AUElement::GetParameter(v230, 0x43u);
          v232 = *(_QWORD *)(*((_QWORD *)this + 105) + 16 * v69);
          v233 = *((_QWORD *)this + 104);
          if (v233)
          {
            v234 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)v233 + 32))(v233, v69);
          }
          else
          {
            v235 = *((_QWORD *)this + 101);
            if (v69 >= (unint64_t)((*((_QWORD *)this + 102) - v235) >> 3))
              v234 = 0;
            else
              v234 = *(ausdk::AUElement **)(v235 + 8 * v69);
          }
          *(double *)(v232 + 208) = ausdk::AUElement::GetParameter(v234, 0x44u);
          v236 = *((unsigned int *)this + 84);
          v237 = *((_QWORD *)this + 104);
          if (v237)
          {
            v238 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)v237 + 32))(v237, v69);
          }
          else
          {
            v239 = *((_QWORD *)this + 101);
            if (v69 >= (unint64_t)((*((_QWORD *)this + 102) - v239) >> 3))
              v238 = 0;
            else
              v238 = *(ausdk::AUElement **)(v239 + 8 * v69);
          }
          v240 = ausdk::AUElement::GetParameter(v238, 0x21u);
          v241 = *((_QWORD *)this + 104);
          if (v241)
          {
            v242 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)v241 + 32))(v241, v69);
          }
          else
          {
            v243 = *((_QWORD *)this + 101);
            if (v69 >= (unint64_t)((*((_QWORD *)this + 102) - v243) >> 3))
              v242 = 0;
            else
              v242 = *(ausdk::AUElement **)(v243 + 8 * v69);
          }
          v244 = ausdk::AUElement::GetParameter(v242, 0x22u);
          v245 = *((_QWORD *)this + 104);
          if (v245)
          {
            v246 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)v245 + 32))(v245, v69);
          }
          else
          {
            v247 = *((_QWORD *)this + 101);
            if (v69 >= (unint64_t)((*((_QWORD *)this + 102) - v247) >> 3))
              v246 = 0;
            else
              v246 = *(ausdk::AUElement **)(v247 + 8 * v69);
          }
          v248 = ausdk::AUElement::GetParameter(v246, 0x23u);
          v249 = *((_QWORD *)this + 104);
          if (v249)
          {
            v250 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)v249 + 32))(v249, v69);
          }
          else
          {
            v251 = *((_QWORD *)this + 101);
            if (v69 >= (unint64_t)((*((_QWORD *)this + 102) - v251) >> 3))
              v250 = 0;
            else
              v250 = *(ausdk::AUElement **)(v251 + 8 * v69);
          }
          v252.n128_f64[0] = ausdk::AUElement::GetParameter(v250, 0x20u);
          *(_DWORD *)buf = 1;
          *(_QWORD *)&buf[8] = v252.n128_u64[0];
          *(_QWORD *)&buf[16] = 0x4059000000000000;
          *(_QWORD *)v535 = v236;
          *(double *)&v535[8] = v240;
          *(double *)&v535[16] = v244;
          *(double *)&v535[24] = v248;
          v253 = *v6;
          v254 = *(_QWORD *)(*(_QWORD *)(*v6 + 16 * v69) + 256);
          if (v254)
          {
            (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v254 + 64))(v254, buf);
            v253 = *v6;
          }
          v255 = (uint64_t)(*((_QWORD *)this + 88) - *((_QWORD *)this + 87)) >> 3;
          if (v255 == (*((_QWORD *)this + 106) - v253) >> 4
            && v255 == (uint64_t)(*((_QWORD *)this + 85) - *((_QWORD *)this + 84)) >> 3)
          {
            v256 = *((_QWORD *)this + 104);
            if (v256)
            {
              v257 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)v256 + 32))(v256, v69);
            }
            else
            {
              v258 = *((_QWORD *)this + 101);
              v257 = v69 >= (unint64_t)((*((_QWORD *)this + 102) - v258) >> 3)
                   ? 0
                   : *(ausdk::AUElement **)(v258 + 8 * v69);
            }
            v259 = ausdk::AUElement::GetParameter(v257, 0x18u);
            v260 = *((_QWORD *)this + 104);
            if (v260)
            {
              v261 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)v260 + 32))(v260, v69);
            }
            else
            {
              v262 = *((_QWORD *)this + 101);
              v261 = v69 >= (unint64_t)((*((_QWORD *)this + 102) - v262) >> 3)
                   ? 0
                   : *(ausdk::AUElement **)(v262 + 8 * v69);
            }
            v263 = ausdk::AUElement::GetParameter(v261, 0x20u);
            v264 = *((_QWORD *)this + 104);
            if (v264)
            {
              v265 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)v264 + 32))(v264, v69);
            }
            else
            {
              v266 = *((_QWORD *)this + 101);
              v265 = v69 >= (unint64_t)((*((_QWORD *)this + 102) - v266) >> 3)
                   ? 0
                   : *(ausdk::AUElement **)(v266 + 8 * v69);
            }
            v267 = ausdk::AUElement::GetParameter(v265, 0x19u);
            v268 = *(_QWORD *)(*((_QWORD *)this + 84) + 8 * v69);
            v269 = **(float **)(*((_QWORD *)this + 87) + 8 * v69);
            v270 = *(_QWORD *)(v268 + 20);
            v271 = *(_DWORD *)(v268 + 8);
            v272 = *(_QWORD *)(v268 + 40);
            v273 = *((unsigned int *)this + 84);
            v274 = *((_QWORD *)this + 104);
            if (v274)
            {
              v275 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)v274 + 32))(v274, v69);
            }
            else
            {
              v276 = *((_QWORD *)this + 101);
              v275 = v69 >= (unint64_t)((*((_QWORD *)this + 102) - v276) >> 3)
                   ? 0
                   : *(ausdk::AUElement **)(v276 + 8 * v69);
            }
            v252.n128_f32[0] = ausdk::AUElement::GetParameter(v275, 0x23u);
            v253 = *v6;
            v277 = *(_QWORD *)(*(_QWORD *)(*v6 + 16 * v69) + 248);
            if (v277)
            {
              v252.n128_f64[0] = v252.n128_f32[0];
              *(double *)(v277 + 8) = v259;
              *(double *)(v277 + 16) = v263;
              *(double *)(v277 + 24) = v267;
              *(double *)(v277 + 32) = v269;
              *(_QWORD *)(v277 + 40) = v270;
              *(_DWORD *)(v277 + 48) = v271;
              *(_QWORD *)(v277 + 52) = v272;
              *(_QWORD *)(v277 + 64) = v273;
              *(_QWORD *)(v277 + 72) = 0x4059000000000000;
              *(_QWORD *)(v277 + 80) = v252.n128_u64[0];
              v253 = *v6;
            }
          }
          v278 = *(_QWORD *)(v253 + 16 * v69);
          v279 = *((_QWORD *)this + 104);
          if (v279)
          {
            v280 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, unint64_t, __n128))(*(_QWORD *)v279 + 32))(v279, v69, v252);
          }
          else
          {
            v281 = *((_QWORD *)this + 101);
            if (v69 >= (unint64_t)((*((_QWORD *)this + 102) - v281) >> 3))
              v280 = 0;
            else
              v280 = *(ausdk::AUElement **)(v281 + 8 * v69);
          }
          v282.n128_f32[0] = ausdk::AUElement::GetParameter(v280, 0x25u);
          v283 = *(_QWORD *)(v278 + 368);
          if (v283)
          {
            v282.n128_f64[0] = v282.n128_f32[0];
            *(_QWORD *)(v283 + 720) = v282.n128_u64[0];
          }
          v284 = *(_QWORD *)(*((_QWORD *)this + 105) + 16 * v69);
          v285 = *((_QWORD *)this + 104);
          if (v285)
          {
            v286 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, unint64_t, __n128))(*(_QWORD *)v285 + 32))(v285, v69, v282);
          }
          else
          {
            v287 = *((_QWORD *)this + 101);
            if (v69 >= (unint64_t)((*((_QWORD *)this + 102) - v287) >> 3))
              v286 = 0;
            else
              v286 = *(ausdk::AUElement **)(v287 + 8 * v69);
          }
          v288.n128_f32[0] = ausdk::AUElement::GetParameter(v286, 0x26u);
          v289 = *(_QWORD *)(v284 + 368);
          if (v289)
          {
            v290 = *(unsigned int *)(v289 + 200);
            if (8 * v290 + 8 >= 1)
            {
              v288.n128_f64[0] = v288.n128_f32[0];
              v291 = (_QWORD *)(v289 + 728);
              v292 = v290 + 2;
              do
              {
                *v291++ = v288.n128_u64[0];
                --v292;
              }
              while (v292 > 1);
            }
          }
          v293 = *(_QWORD *)(*((_QWORD *)this + 105) + 16 * v69);
          v294 = *((_QWORD *)this + 104);
          if (v294)
          {
            v295 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, unint64_t, __n128))(*(_QWORD *)v294 + 32))(v294, v69, v288);
          }
          else
          {
            v296 = *((_QWORD *)this + 101);
            if (v69 >= (unint64_t)((*((_QWORD *)this + 102) - v296) >> 3))
              v295 = 0;
            else
              v295 = *(ausdk::AUElement **)(v296 + 8 * v69);
          }
          v297.n128_f32[0] = ausdk::AUElement::GetParameter(v295, 0x27u);
          v298 = *(unsigned int **)(v293 + 368);
          if (v298)
          {
            v297.n128_f64[0] = v297.n128_f32[0];
            v299 = v298[51];
            if (8 * v299 + 8 >= 1)
            {
              v300 = v298 + 192;
              v301 = v299 + 2;
              do
              {
                *v300++ = v297.n128_u64[0];
                --v301;
              }
              while (v301 > 1);
            }
            v302 = v298[52];
            if (8 * v302 + 8 >= 1)
            {
              v303 = v298 + 202;
              v304 = v302 + 2;
              do
              {
                *v303++ = v297.n128_u64[0];
                --v304;
              }
              while (v304 > 1);
            }
            v305 = v298[53];
            if (8 * v305 + 8 >= 1)
            {
              v306 = v298 + 212;
              v307 = v305 + 2;
              do
              {
                *v306++ = v297.n128_u64[0];
                --v307;
              }
              while (v307 > 1);
            }
          }
          v308 = *(_QWORD *)(*((_QWORD *)this + 105) + 16 * v69);
          v309 = *((_QWORD *)this + 104);
          if (v309)
          {
            v310 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, unint64_t, __n128))(*(_QWORD *)v309 + 32))(v309, v69, v297);
          }
          else
          {
            v311 = *((_QWORD *)this + 101);
            if (v69 >= (unint64_t)((*((_QWORD *)this + 102) - v311) >> 3))
              v310 = 0;
            else
              v310 = *(ausdk::AUElement **)(v311 + 8 * v69);
          }
          v312.n128_f32[0] = ausdk::AUElement::GetParameter(v310, 0x2Fu);
          v313 = *(_DWORD **)(v308 + 424);
          if (v313)
          {
            v314 = v313[2];
            if (v314 == 4)
            {
              v315 = v313 + 96;
            }
            else
            {
              if (v314 != 1)
                goto LABEL_356;
              v315 = v313 + 88;
            }
            *v315 = v312.n128_u32[0];
          }
LABEL_356:
          v316 = *(_QWORD *)(*((_QWORD *)this + 105) + 16 * v69);
          v317 = *((_QWORD *)this + 104);
          if (v317)
          {
            v318 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, unint64_t, __n128))(*(_QWORD *)v317 + 32))(v317, v69, v312);
          }
          else
          {
            v319 = *((_QWORD *)this + 101);
            if (v69 >= (unint64_t)((*((_QWORD *)this + 102) - v319) >> 3))
              v318 = 0;
            else
              v318 = *(ausdk::AUElement **)(v319 + 8 * v69);
          }
          v320.n128_f32[0] = ausdk::AUElement::GetParameter(v318, 0x30u);
          v321 = *(_DWORD **)(v316 + 424);
          if (v321)
          {
            v322 = v321[2];
            if (v322 == 4)
            {
              v323 = v321 + 97;
            }
            else
            {
              if (v322 != 1)
                goto LABEL_367;
              v323 = v321 + 89;
            }
            *v323 = v320.n128_u32[0];
          }
LABEL_367:
          v324 = *(_QWORD *)(*((_QWORD *)this + 105) + 16 * v69);
          v325 = *((_QWORD *)this + 104);
          if (v325)
          {
            v326 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, unint64_t, __n128))(*(_QWORD *)v325 + 32))(v325, v69, v320);
          }
          else
          {
            v327 = *((_QWORD *)this + 101);
            if (v69 >= (unint64_t)((*((_QWORD *)this + 102) - v327) >> 3))
              v326 = 0;
            else
              v326 = *(ausdk::AUElement **)(v327 + 8 * v69);
          }
          v328.n128_f32[0] = ausdk::AUElement::GetParameter(v326, 0x31u);
          v329 = *(_QWORD *)(v324 + 424);
          if (v329)
          {
            v330 = *(_DWORD *)(v329 + 8);
            if (v330 == 4)
            {
              v328.n128_f64[0] = v328.n128_f32[0];
              *(_QWORD *)(v329 + 712) = v328.n128_u64[0];
              *(_QWORD *)(v329 + 752) = v328.n128_u64[0];
            }
            else if (v330 == 1)
            {
              v328.n128_f64[0] = v328.n128_f32[0];
              *(_QWORD *)(v329 + 624) = v328.n128_u64[0];
              *(_QWORD *)(v329 + 664) = v328.n128_u64[0];
            }
          }
          v331 = *(_QWORD *)(*((_QWORD *)this + 105) + 16 * v69);
          v332 = *((_QWORD *)this + 104);
          if (v332)
          {
            v333 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, unint64_t, __n128))(*(_QWORD *)v332 + 32))(v332, v69, v328);
          }
          else
          {
            v334 = *((_QWORD *)this + 101);
            if (v69 >= (unint64_t)((*((_QWORD *)this + 102) - v334) >> 3))
              v333 = 0;
            else
              v333 = *(ausdk::AUElement **)(v334 + 8 * v69);
          }
          v335.n128_f32[0] = ausdk::AUElement::GetParameter(v333, 0x32u);
          v336 = *(_QWORD *)(v331 + 424);
          if (v336)
          {
            v337 = *(_DWORD *)(v336 + 8);
            if (v337 == 4)
            {
              v335.n128_f64[0] = v335.n128_f32[0];
              *(_QWORD *)(v336 + 720) = v335.n128_u64[0];
              *(_QWORD *)(v336 + 760) = v335.n128_u64[0];
            }
            else if (v337 == 1)
            {
              v335.n128_f64[0] = v335.n128_f32[0];
              *(_QWORD *)(v336 + 632) = v335.n128_u64[0];
              *(_QWORD *)(v336 + 672) = v335.n128_u64[0];
            }
          }
          v338 = *(_QWORD *)(*((_QWORD *)this + 105) + 16 * v69);
          v339 = *((_QWORD *)this + 104);
          if (v339)
          {
            v340 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, unint64_t, __n128))(*(_QWORD *)v339 + 32))(v339, v69, v335);
          }
          else
          {
            v341 = *((_QWORD *)this + 101);
            if (v69 >= (unint64_t)((*((_QWORD *)this + 102) - v341) >> 3))
              v340 = 0;
            else
              v340 = *(ausdk::AUElement **)(v341 + 8 * v69);
          }
          v342.n128_f32[0] = ausdk::AUElement::GetParameter(v340, 0x33u);
          v343 = *(_DWORD **)(v338 + 424);
          if (v343)
          {
            v344 = v343[2];
            if (v344 == 4)
            {
              v345 = v343 + 121;
            }
            else
            {
              if (v344 != 1)
                goto LABEL_398;
              v345 = v343 + 115;
            }
            *v345 = v342.n128_u32[0];
          }
LABEL_398:
          v346 = *(_QWORD *)(*((_QWORD *)this + 105) + 16 * v69);
          v347 = *((_QWORD *)this + 104);
          if (v347)
          {
            v348 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, unint64_t, __n128))(*(_QWORD *)v347 + 32))(v347, v69, v342);
          }
          else
          {
            v349 = *((_QWORD *)this + 101);
            if (v69 >= (unint64_t)((*((_QWORD *)this + 102) - v349) >> 3))
              v348 = 0;
            else
              v348 = *(ausdk::AUElement **)(v349 + 8 * v69);
          }
          v350.n128_f32[0] = ausdk::AUElement::GetParameter(v348, 0x34u);
          v351 = *(_DWORD **)(v346 + 424);
          if (v351)
          {
            v352 = v351[2];
            if (v352 == 4)
            {
              v353 = v351 + 122;
            }
            else
            {
              if (v352 != 1)
                goto LABEL_409;
              v353 = v351 + 116;
            }
            *v353 = v350.n128_u32[0];
          }
LABEL_409:
          v354 = *(_QWORD *)(*((_QWORD *)this + 105) + 16 * v69);
          v355 = *((_QWORD *)this + 104);
          if (v355)
          {
            v356 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, unint64_t, __n128))(*(_QWORD *)v355 + 32))(v355, v69, v350);
          }
          else
          {
            v357 = *((_QWORD *)this + 101);
            if (v69 >= (unint64_t)((*((_QWORD *)this + 102) - v357) >> 3))
              v356 = 0;
            else
              v356 = *(ausdk::AUElement **)(v357 + 8 * v69);
          }
          v358.n128_f32[0] = ausdk::AUElement::GetParameter(v356, 0x35u);
          v359 = *(_QWORD *)(v354 + 424);
          if (v359)
          {
            v360 = *(_DWORD *)(v359 + 8);
            if (v360 == 4)
            {
              v358.n128_f64[0] = v358.n128_f32[0];
              *(_QWORD *)(v359 + 792) = v358.n128_u64[0];
            }
            else if (v360 == 1)
            {
              v358.n128_f64[0] = v358.n128_f32[0];
              *(_QWORD *)(v359 + 704) = v358.n128_u64[0];
            }
          }
          v361 = *(_QWORD *)(*((_QWORD *)this + 105) + 16 * v69);
          v362 = *((_QWORD *)this + 104);
          if (v362)
          {
            v363 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, unint64_t, __n128))(*(_QWORD *)v362 + 32))(v362, v69, v358);
          }
          else
          {
            v364 = *((_QWORD *)this + 101);
            if (v69 >= (unint64_t)((*((_QWORD *)this + 102) - v364) >> 3))
              v363 = 0;
            else
              v363 = *(ausdk::AUElement **)(v364 + 8 * v69);
          }
          v365.n128_f32[0] = ausdk::AUElement::GetParameter(v363, 0x36u);
          v366 = *(_QWORD *)(v361 + 424);
          if (v366)
          {
            v367 = *(_DWORD *)(v366 + 8);
            if (v367 == 4)
            {
              v365.n128_f64[0] = v365.n128_f32[0];
              *(_QWORD *)(v366 + 800) = v365.n128_u64[0];
            }
            else if (v367 == 1)
            {
              v365.n128_f64[0] = v365.n128_f32[0];
              *(_QWORD *)(v366 + 712) = v365.n128_u64[0];
            }
          }
          v368 = *(_QWORD *)(*((_QWORD *)this + 105) + 16 * v69);
          v369 = *((_QWORD *)this + 104);
          if (v369)
          {
            v370 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, unint64_t, __n128))(*(_QWORD *)v369 + 32))(v369, v69, v365);
          }
          else
          {
            v371 = *((_QWORD *)this + 101);
            if (v69 >= (unint64_t)((*((_QWORD *)this + 102) - v371) >> 3))
              v370 = 0;
            else
              v370 = *(ausdk::AUElement **)(v371 + 8 * v69);
          }
          v372.n128_f32[0] = ausdk::AUElement::GetParameter(v370, 0x37u);
          v373 = *(_DWORD **)(v368 + 424);
          if (v373)
          {
            v374 = v373[2];
            if (v374 == 4)
            {
              v375 = v373 + 123;
            }
            else
            {
              if (v374 != 1)
                goto LABEL_440;
              v375 = v373 + 117;
            }
            *v375 = v372.n128_u32[0];
          }
LABEL_440:
          v376 = *(_QWORD *)(*((_QWORD *)this + 105) + 16 * v69);
          v377 = *((_QWORD *)this + 104);
          if (v377)
          {
            v378 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, unint64_t, __n128))(*(_QWORD *)v377 + 32))(v377, v69, v372);
          }
          else
          {
            v379 = *((_QWORD *)this + 101);
            if (v69 >= (unint64_t)((*((_QWORD *)this + 102) - v379) >> 3))
              v378 = 0;
            else
              v378 = *(ausdk::AUElement **)(v379 + 8 * v69);
          }
          v380.n128_f32[0] = ausdk::AUElement::GetParameter(v378, 0x38u);
          v381 = *(_DWORD **)(v376 + 424);
          if (v381)
          {
            v382 = v381[2];
            if (v382 == 4)
            {
              v383 = v381 + 124;
            }
            else
            {
              if (v382 != 1)
                goto LABEL_451;
              v383 = v381 + 118;
            }
            *v383 = v380.n128_u32[0];
          }
LABEL_451:
          v384 = *(_QWORD *)(*((_QWORD *)this + 105) + 16 * v69);
          v385 = *((_QWORD *)this + 104);
          if (v385)
          {
            v386 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, unint64_t, __n128))(*(_QWORD *)v385 + 32))(v385, v69, v380);
          }
          else
          {
            v387 = *((_QWORD *)this + 101);
            if (v69 >= (unint64_t)((*((_QWORD *)this + 102) - v387) >> 3))
              v386 = 0;
            else
              v386 = *(ausdk::AUElement **)(v387 + 8 * v69);
          }
          v388.n128_f32[0] = ausdk::AUElement::GetParameter(v386, 0x39u);
          v389 = *(_DWORD **)(v384 + 424);
          if (v389)
          {
            v390 = v389[2];
            if (v390 == 4)
            {
              v389[94] = v388.n128_u32[0];
            }
            else if (v390 == 1)
            {
              v389[95] = v388.n128_u32[0];
            }
          }
          v391 = *(_QWORD *)(*((_QWORD *)this + 105) + 16 * v69);
          v392 = *((_QWORD *)this + 104);
          if (v392)
          {
            v393 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, unint64_t, __n128))(*(_QWORD *)v392 + 32))(v392, v69, v388);
          }
          else
          {
            v394 = *((_QWORD *)this + 101);
            if (v69 >= (unint64_t)((*((_QWORD *)this + 102) - v394) >> 3))
              v393 = 0;
            else
              v393 = *(ausdk::AUElement **)(v394 + 8 * v69);
          }
          v395.n128_f32[0] = ausdk::AUElement::GetParameter(v393, 0x3Au);
          v396 = *(_DWORD **)(v391 + 424);
          if (v396)
          {
            v397 = v396[2];
            if (v397 == 4)
            {
              v396[95] = v395.n128_u32[0];
            }
            else if (v397 == 1)
            {
              v396[96] = v395.n128_u32[0];
            }
          }
          v398 = *(_QWORD *)(*((_QWORD *)this + 105) + 16 * v69);
          v399 = *((_QWORD *)this + 104);
          if (v399)
          {
            v400 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, unint64_t, __n128))(*(_QWORD *)v399 + 32))(v399, v69, v395);
          }
          else
          {
            v401 = *((_QWORD *)this + 101);
            if (v69 >= (unint64_t)((*((_QWORD *)this + 102) - v401) >> 3))
              v400 = 0;
            else
              v400 = *(ausdk::AUElement **)(v401 + 8 * v69);
          }
          v402.n128_f32[0] = ausdk::AUElement::GetParameter(v400, 0x3Bu);
          v403 = *(_DWORD **)(v398 + 424);
          if (v403)
          {
            v404 = v403[2];
            if (v404 == 4)
            {
              v405 = v403 + 103;
            }
            else
            {
              if (v404 != 1)
                goto LABEL_482;
              v405 = v403 + 97;
            }
            *v405 = v402.n128_u32[0];
          }
LABEL_482:
          v406 = *(_QWORD *)(*((_QWORD *)this + 105) + 16 * v69);
          v407 = *((_QWORD *)this + 104);
          if (v407)
          {
            v408 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, unint64_t, __n128))(*(_QWORD *)v407 + 32))(v407, v69, v402);
          }
          else
          {
            v409 = *((_QWORD *)this + 101);
            if (v69 >= (unint64_t)((*((_QWORD *)this + 102) - v409) >> 3))
              v408 = 0;
            else
              v408 = *(ausdk::AUElement **)(v409 + 8 * v69);
          }
          v410.n128_f32[0] = ausdk::AUElement::GetParameter(v408, 0x3Cu);
          v411 = *(_DWORD **)(v406 + 424);
          if (v411)
          {
            v412 = v411[2];
            if (v412 == 4)
            {
              v413 = v411 + 105;
            }
            else
            {
              if (v412 != 1)
                goto LABEL_493;
              v413 = v411 + 99;
            }
            *v413 = v410.n128_u32[0];
          }
LABEL_493:
          v414 = *(_QWORD *)(*((_QWORD *)this + 105) + 16 * v69);
          v415 = *((_QWORD *)this + 104);
          if (v415)
          {
            v416 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, unint64_t, __n128))(*(_QWORD *)v415 + 32))(v415, v69, v410);
          }
          else
          {
            v417 = *((_QWORD *)this + 101);
            if (v69 >= (unint64_t)((*((_QWORD *)this + 102) - v417) >> 3))
              v416 = 0;
            else
              v416 = *(ausdk::AUElement **)(v417 + 8 * v69);
          }
          v418.n128_f32[0] = ausdk::AUElement::GetParameter(v416, 0x3Du);
          v419 = *(_DWORD **)(v414 + 424);
          if (v419)
          {
            v420 = v419[2];
            if (v420 == 4)
            {
              v421 = v419 + 132;
            }
            else
            {
              if (v420 != 1)
                goto LABEL_504;
              v421 = v419 + 120;
            }
            *v421 = v418.n128_u32[0];
          }
LABEL_504:
          v422 = *(_QWORD *)(*((_QWORD *)this + 105) + 16 * v69);
          v423 = *((_QWORD *)this + 104);
          if (v423)
          {
            v424 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, unint64_t, __n128))(*(_QWORD *)v423 + 32))(v423, v69, v418);
          }
          else
          {
            v425 = *((_QWORD *)this + 101);
            if (v69 >= (unint64_t)((*((_QWORD *)this + 102) - v425) >> 3))
              v424 = 0;
            else
              v424 = *(ausdk::AUElement **)(v425 + 8 * v69);
          }
          v426.n128_f32[0] = ausdk::AUElement::GetParameter(v424, 0x3Eu);
          v427 = *(_DWORD **)(v422 + 424);
          if (v427)
          {
            v428 = v427[2];
            if (v428 == 4)
            {
              v429 = v427 + 134;
            }
            else
            {
              if (v428 != 1)
                goto LABEL_515;
              v429 = v427 + 122;
            }
            *v429 = v426.n128_u32[0];
          }
LABEL_515:
          v430 = *(_QWORD *)(*((_QWORD *)this + 105) + 16 * v69);
          v431 = *((_QWORD *)this + 104);
          if (v431)
          {
            v432 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, unint64_t, __n128))(*(_QWORD *)v431 + 32))(v431, v69, v426);
          }
          else
          {
            v433 = *((_QWORD *)this + 101);
            if (v69 >= (unint64_t)((*((_QWORD *)this + 102) - v433) >> 3))
              v432 = 0;
            else
              v432 = *(ausdk::AUElement **)(v433 + 8 * v69);
          }
          v434 = ausdk::AUElement::GetParameter(v432, 0x3Fu);
          v435 = *(_QWORD *)(v430 + 424);
          if (!v435)
            goto LABEL_526;
          v436 = *(_DWORD *)(v435 + 8);
          if (v436 == 4)
          {
            v437 = (float *)(v435 + 540);
            goto LABEL_525;
          }
          if (v436 == 1)
          {
            v437 = (float *)(v435 + 492);
LABEL_525:
            *v437 = v434;
          }
LABEL_526:
          ++v69;
          v438 = *((_QWORD *)this + 106);
          v7 = *((_QWORD *)this + 105);
          if (v69 >= (v438 - v7) >> 4)
            goto LABEL_529;
        }
      }
    }
    v438 = v7;
LABEL_529:
    if (*((_BYTE *)this + 533) && *((_BYTE *)this + 529) && v438 != v7)
    {
      v439 = 0;
      while (2)
      {
        v440 = *((_QWORD *)this + 104);
        if (v440)
        {
          v441 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)v440 + 32))(v440, v439);
        }
        else
        {
          v442 = *((_QWORD *)this + 101);
          if (v439 >= (*((_QWORD *)this + 102) - v442) >> 3)
            v441 = 0;
          else
            v441 = *(ausdk::AUElement **)(v442 + 8 * v439);
        }
        LODWORD(v443) = ausdk::AUElement::GetParameter(v441, 0x2Au);
        v444 = *(_QWORD *)(*((_QWORD *)this + 105) + 16 * v439);
        v445 = *((_QWORD *)this + 84);
        switch((int)v443)
        {
          case 1:
          case 4:
            goto LABEL_539;
          case 2:
            v459 = *(_QWORD *)(v445 + 8 * v439);
            if (v459 && *(_QWORD *)(v459 + 48))
            {
              std::allocate_shared[abi:ne180100]<clsp::ParameterUpdater,std::allocator<clsp::ParameterUpdater>,CACFDictionary &,void>((CFTypeRef **)buf, *(_QWORD *)(v459 + 56));
              std::shared_ptr<vp::xml::_xmlNode const>::operator=[abi:ne180100](v444 + 368, (__int128 *)buf);
              v460 = *(std::__shared_weak_count **)&buf[8];
              if (*(_QWORD *)&buf[8])
              {
                v461 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
                do
                  v462 = __ldaxr(v461);
                while (__stlxr(v462 - 1, v461));
                if (!v462)
                {
                  ((void (*)(std::__shared_weak_count *))v460->__on_zero_shared)(v460);
                  std::__shared_weak_count::__release_weak(v460);
                }
              }
            }
            else
            {
              v468 = (NSObject **)spp3Subsystem();
              if (v468)
              {
                v469 = *v468;
                if (!*v468)
                  goto LABEL_539;
              }
              else
              {
                v469 = MEMORY[0x1E0C81028];
              }
              if (os_log_type_enabled(v469, OS_LOG_TYPE_ERROR))
              {
                v526 = *(_DWORD *)(v444 + 16);
                *(_DWORD *)buf = 136315650;
                *(_QWORD *)&buf[4] = "CLSPKernel_v5.cpp";
                *(_WORD *)&buf[12] = 1024;
                *(_DWORD *)&buf[14] = 461;
                *(_WORD *)&buf[18] = 1024;
                *(_DWORD *)&buf[20] = v526;
                _os_log_impl(&dword_1B5ED0000, v469, OS_LOG_TYPE_ERROR, "%25s:%-5d Ch %d, ConvoyAdaptiveDisplacement requested but configuration missing, defaulting to Open Loop", buf, 0x18u);
              }
            }
LABEL_539:
            v446 = *(_QWORD *)(v444 + 48);
            if (!v446 || (v447 = *(float **)(v446 + 40)) == 0)
            {
              v457 = (NSObject **)spp3Subsystem();
              if (v457)
              {
                v458 = *v457;
                if (!*v457)
                  goto LABEL_589;
              }
              else
              {
                v458 = MEMORY[0x1E0C81028];
              }
              if (os_log_type_enabled(v458, OS_LOG_TYPE_ERROR))
              {
                v465 = *(_DWORD *)(v444 + 16);
                *(_DWORD *)buf = 136315650;
                *(_QWORD *)&buf[4] = "CLSPKernel_v5.cpp";
                *(_WORD *)&buf[12] = 1024;
                *(_DWORD *)&buf[14] = 489;
                *(_WORD *)&buf[18] = 1024;
                *(_DWORD *)&buf[20] = v465;
                v466 = v458;
                v467 = "%25s:%-5d Ch %d, Convoy calibration parameters not present";
                goto LABEL_587;
              }
              goto LABEL_589;
            }
            v448 = v447[3];
            v449 = v448 < 0.001 || v448 > 1000.0;
            if (v449
              || ((v450 = v447[2], v450 >= 0.001) ? (v451 = v450 > 1000.0) : (v451 = 1),
                  v451
               || ((v452 = v447[1], v452 >= 0.001) ? (v453 = v452 > 1000.0) : (v453 = 1),
                   !v453 ? (v454 = v452 < v450) : (v454 = 0),
                   v454 ? (v455 = v450 < v448) : (v455 = 0),
                   !v455)))
            {
              v456 = (NSObject **)spp3Subsystem();
              if (v456)
              {
                v443 = *v456;
                if (!*v456)
                  goto LABEL_590;
              }
              else
              {
                v443 = MEMORY[0x1E0C81028];
              }
              if (os_log_type_enabled(v443, OS_LOG_TYPE_ERROR))
              {
                v470 = *(_DWORD *)(v444 + 16);
                v471 = *(float **)(*(_QWORD *)(v444 + 48) + 40);
                v472 = v471[3];
                v473 = v471[2];
                v474 = v471[1];
                *(_DWORD *)buf = 136316418;
                *(_QWORD *)&buf[4] = "CLSPKernel_v5.cpp";
                *(_WORD *)&buf[12] = 1024;
                *(_DWORD *)&buf[14] = 485;
                *(_WORD *)&buf[18] = 1024;
                *(_DWORD *)&buf[20] = v470;
                *(_WORD *)v535 = 2048;
                *(double *)&v535[2] = v472;
                *(_WORD *)&v535[10] = 2048;
                *(double *)&v535[12] = v473;
                *(_WORD *)&v535[20] = 2048;
                *(double *)&v535[22] = v474;
                v466 = v443;
                v467 = "%25s:%-5d Ch %d, Convoy calibration parameters out of range or not Coff < CMin < CMax. Defaulting"
                       " to Open loop displacement. CMax=%f, CMin=%f, Coff=%f";
                v475 = 54;
                goto LABEL_588;
              }
              goto LABEL_589;
            }
            v527 = (NSObject **)spp3Subsystem();
            if (v527)
            {
              v528 = *v527;
              if (!*v527)
                goto LABEL_590;
            }
            else
            {
              v528 = MEMORY[0x1E0C81028];
            }
            if (os_log_type_enabled(v528, OS_LOG_TYPE_DEBUG))
            {
              v529 = *(_DWORD *)(v444 + 16);
              *(_DWORD *)buf = 136315650;
              *(_QWORD *)&buf[4] = "CLSPKernel_v5.cpp";
              *(_WORD *)&buf[12] = 1024;
              *(_DWORD *)&buf[14] = 482;
              *(_WORD *)&buf[18] = 1024;
              *(_DWORD *)&buf[20] = v529;
              _os_log_impl(&dword_1B5ED0000, v528, OS_LOG_TYPE_DEBUG, "%25s:%-5d Ch %d, Convoy calibration parameters within range", buf, 0x18u);
            }
            goto LABEL_590;
          case 3:
            v463 = (NSObject **)spp3Subsystem();
            if (v463)
            {
              v464 = *v463;
              if (!*v463)
                goto LABEL_589;
            }
            else
            {
              v464 = MEMORY[0x1E0C81028];
            }
            if (os_log_type_enabled(v464, OS_LOG_TYPE_ERROR))
            {
              v476 = *(_DWORD *)(v444 + 16);
              *(_DWORD *)buf = 136315650;
              *(_QWORD *)&buf[4] = "CLSPKernel_v5.cpp";
              *(_WORD *)&buf[12] = 1024;
              *(_DWORD *)&buf[14] = 467;
              *(_WORD *)&buf[18] = 1024;
              *(_DWORD *)&buf[20] = v476;
              v466 = v464;
              v467 = "%25s:%-5d Ch %d, IV only AdaptiveDisplacement not supported, defaulting to Open Loop";
LABEL_587:
              v475 = 24;
LABEL_588:
              _os_log_impl(&dword_1B5ED0000, v466, OS_LOG_TYPE_ERROR, v467, buf, v475);
            }
LABEL_589:
            LODWORD(v443) = 0;
LABEL_590:
            if ((_DWORD)v443 == *(_DWORD *)(v444 + 1024))
              goto LABEL_621;
            v477 = (*(double (**)(_QWORD))(**(_QWORD **)(v444 + 424) + 40))(*(_QWORD *)(v444 + 424));
            v478 = (_QWORD *)(v444 + 424);
            v479 = (*(double (**)(_QWORD))(**(_QWORD **)(v444 + 424) + 56))(*(_QWORD *)(v444 + 424));
            v480 = (*(double (**)(_QWORD))(*(_QWORD *)*v478 + 72))(*v478);
            v481 = (*(double (**)(_QWORD))(*(_QWORD *)*v478 + 88))(*v478);
            v482 = (*(double (**)(_QWORD))(*(_QWORD *)*v478 + 104))(*v478);
            v483 = (*(double (**)(_QWORD))(*(_QWORD *)*v478 + 120))(*v478);
            if ((_DWORD)v443 != 4)
            {
              if ((_DWORD)v443 == 1)
              {
                v484 = *(_QWORD *)(v445 + 8 * v439);
                if (v484)
                {
                  v487 = *(_QWORD *)(v484 + 48);
                  v486 = (uint64_t *)(v484 + 48);
                  v485 = v487;
                  if (v487)
                  {
                    v488 = *(CFArrayRef **)(v485 + 96);
                    v489 = (clsp::FirFilter *)operator new();
                    clsp::FirFilter::FirFilter(v489, v488, *(double *)(v444 + 24));
                    v490 = *(_QWORD *)(v444 + 1016);
                    *(_QWORD *)(v444 + 1016) = v489;
                    if (v490)
                      std::default_delete<clsp::FirFilter>::operator()[abi:ne180100](v490);
                    v491 = *(float *)(*v486 + 12);
                    v492 = *(double *)(v444 + 24);
                    v493 = *((_QWORD *)v489 + 3);
                    v494 = *((_QWORD *)v489 + 4);
                    v495 = operator new();
                    v496 = (double)((int)((unint64_t)(v494 - v493) >> 2) >> 1) * 1000.0 / v492 + v491;
                    clsp::DelayLine<float,double>::DelayLine(v495, *(_QWORD *)(v444 + 32), v496, *(double *)(v444 + 24), v496);
                    v497 = *(_QWORD **)(v444 + 1000);
                    *(_QWORD *)(v444 + 1000) = v495;
                    if (v497)
                      std::default_delete<clsp::DelayLine<float,double>>::operator()[abi:ne180100](v497);
                    v498 = operator new();
                    clsp::DelayLine<float,double>::DelayLine(v498, *(_QWORD *)(v444 + 32), v496, *(double *)(v444 + 24), v496);
                    v499 = *(_QWORD **)(v444 + 1008);
                    *(_QWORD *)(v444 + 1008) = v498;
                    if (v499)
                      std::default_delete<clsp::DelayLine<float,double>>::operator()[abi:ne180100](v499);
                    *(_QWORD *)v444 = clsp::CLSPKernel_v5::ProcessAdaptSimple;
                    *(_QWORD *)(v444 + 8) = 0;
                    v500 = operator new();
                    clsp::ConvoyDisplacementController::ConvoyDisplacementController(v500, *(_QWORD *)(v444 + 32), v444 + 112, v486, *(double *)(v444 + 24), v477, v479, v480, v481, v482, v483);
                    v501 = *(_QWORD *)(v444 + 424);
                    *(_QWORD *)(v444 + 424) = v500;
                    if (v501)
                      (*(void (**)(uint64_t))(*(_QWORD *)v501 + 8))(v501);
                    v502 = 1;
                    goto LABEL_620;
                  }
                }
              }
LABEL_617:
              v522 = operator new();
              v523 = clsp::DisplacementController::DisplacementController(v522, v444 + 112, v477, v479, v480, v481, v482, v483);
              v524 = *(_QWORD *)(v444 + 424);
              *(_QWORD *)(v444 + 424) = v525;
              if (v524)
                (*(void (**)(uint64_t, double))(*(_QWORD *)v524 + 8))(v524, v523);
              v502 = 0;
              *(_QWORD *)v444 = clsp::CLSPKernel_v5::ProcessOpenLoop;
              *(_QWORD *)(v444 + 8) = 0;
              goto LABEL_620;
            }
            v503 = *(_QWORD *)(v445 + 8 * v439);
            if (!v503)
              goto LABEL_617;
            v504 = *(_QWORD *)(v503 + 48);
            if (!v504)
              goto LABEL_617;
            v505 = *(_QWORD *)(v444 + 48);
            if (!v505 || !*(_QWORD *)(v505 + 40))
              goto LABEL_617;
            v506 = *(CFArrayRef **)(v504 + 96);
            v507 = (clsp::FirFilter *)operator new();
            clsp::FirFilter::FirFilter(v507, v506, *(double *)(v444 + 24));
            v508 = *(_QWORD *)(v444 + 1016);
            *(_QWORD *)(v444 + 1016) = v507;
            if (v508)
              std::default_delete<clsp::FirFilter>::operator()[abi:ne180100](v508);
            v509 = *(float *)(*(_QWORD *)(v503 + 48) + 12);
            v510 = *(double *)(v444 + 24);
            v511 = *((_QWORD *)v507 + 3);
            v512 = *((_QWORD *)v507 + 4);
            v513 = operator new();
            v514 = (double)((int)((unint64_t)(v512 - v511) >> 2) >> 1) * 1000.0 / v510 + v509;
            clsp::DelayLine<float,double>::DelayLine(v513, *(_QWORD *)(v444 + 32), v514, *(double *)(v444 + 24), v514);
            v515 = *(_QWORD **)(v444 + 1000);
            *(_QWORD *)(v444 + 1000) = v513;
            if (v515)
              std::default_delete<clsp::DelayLine<float,double>>::operator()[abi:ne180100](v515);
            v516 = operator new();
            clsp::DelayLine<float,double>::DelayLine(v516, *(_QWORD *)(v444 + 32), v514, *(double *)(v444 + 24), v514);
            v517 = *(_QWORD **)(v444 + 1008);
            *(_QWORD *)(v444 + 1008) = v516;
            if (v517)
              std::default_delete<clsp::DelayLine<float,double>>::operator()[abi:ne180100](v517);
            *(_QWORD *)v444 = clsp::CLSPKernel_v5::ProcessAdaptSimple;
            *(_QWORD *)(v444 + 8) = 0;
            v518 = *(_QWORD *)(v503 + 48);
            v519 = *(_QWORD *)(v505 + 40);
            v520 = operator new();
            clsp::ConvoyDisplacementControllerV2::ConvoyDisplacementControllerV2(v520, *(_QWORD *)(v444 + 32), v444 + 112, v518, v519, *(double *)(v444 + 24), v477, v479, v480, v481, v482, v483);
            v521 = *(_QWORD *)(v444 + 424);
            *(_QWORD *)(v444 + 424) = v520;
            if (v521)
              (*(void (**)(uint64_t))(*(_QWORD *)v521 + 8))(v521);
            v502 = 4;
LABEL_620:
            *(_DWORD *)(v444 + 1024) = v502;
            (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(v444 + 424) + 256))(*(_QWORD *)(v444 + 424), v444 + 1080);
LABEL_621:
            if (++v439 >= (uint64_t)(*((_QWORD *)this + 106) - *((_QWORD *)this + 105)) >> 4)
              break;
            continue;
          default:
            goto LABEL_590;
        }
        break;
      }
    }
    clsp::CLSPKernel_v5::CalcCoeffs((uint64_t **)this + 105, *((_BYTE *)this + 532), *((double *)this + 78));
    v530 = (clsp::CLSPKernel_v5 **)*((_QWORD *)this + 105);
    v531 = (clsp::CLSPKernel_v5 **)*((_QWORD *)this + 106);
    while (v530 != v531)
    {
      clsp::CLSPKernel_v5::Reset(*v530);
      v530 += 2;
    }
    *((_DWORD *)this + 160) = v532;
    shouldTraceRender();
  }
}

void sub_1B6412EA0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,std::exception a22)
{
  std::exception::~exception(&a22);
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void sub_1B6412EB4(_Unwind_Exception *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  _Unwind_Resume(a1);
}

void sub_1B6412EC4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1BCC95CEC](v1, 0x10E1C40F98757C4);
  _Unwind_Resume(a1);
}

uint64_t AUSpeakerProtectionV3::ClosedLoopInputsOK(AUSpeakerProtectionV3 *this, int a2, unsigned int a3, const AudioBufferList **a4)
{
  const AudioBufferList *v6;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  NSObject *v12;
  const AudioBufferList *v13;
  uint64_t v14;
  uint64_t v15;
  caulk::concurrent::messenger *v16;
  caulk::concurrent::message *v17;
  uint64_t Element;
  __int128 v19;
  uint64_t v20;
  __int128 v21;
  uint64_t v22;
  const AudioBufferList *v23;
  char v24;
  uint64_t v25;
  int v26;
  unsigned __int8 v27;
  int v28;
  unsigned int v29;
  uint64_t v30;
  UInt32 *p_mDataByteSize;
  unsigned int v32;
  unsigned int v33;
  BOOL v34;
  unint64_t i;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  ausdk::AUElement *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  UInt32 mNumberBuffers;
  UInt32 mNumberChannels;
  UInt32 mDataByteSize;
  uint64_t v48;
  _OWORD v49[2];
  uint64_t v50;
  int v51;
  _BYTE buf[40];
  uint64_t v53;

  v53 = *MEMORY[0x1E0C80C00];
  if (a3 >= 2)
  {
    v6 = a4[1];
    if (v6)
    {
      v9 = *((_QWORD *)this + 15);
      if (v9)
        LODWORD(v10) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 24))(v9);
      else
        v10 = (*((_QWORD *)this + 13) - *((_QWORD *)this + 12)) >> 3;
      if (v10 <= 1)
      {
        if (!*((_DWORD *)this + 295))
        {
          v14 = _os_log_pack_size();
          result = caulk::deferred_logger::create_message(*((caulk::deferred_logger **)this + 170), v14 + 88, 16);
          if (!result)
            return result;
          v15 = result;
          *(_WORD *)_os_log_pack_fill() = 0;
          v16 = *(caulk::concurrent::messenger **)(*((_QWORD *)this + 170) + 16);
          v17 = (caulk::concurrent::message *)v15;
          goto LABEL_60;
        }
        return 0;
      }
      Element = ausdk::AUScope::SafeGetElement((AUSpeakerProtectionV3 *)((char *)this + 80), 1u);
      v19 = *(_OWORD *)(Element + 96);
      *(_OWORD *)buf = *(_OWORD *)(Element + 80);
      *(_OWORD *)&buf[16] = v19;
      *(_QWORD *)&buf[32] = *(_QWORD *)(Element + 112);
      LODWORD(v49[0]) = 0;
      if (CAStreamBasicDescription::IdentifyCommonPCMFormat(buf, (int *)v49, 0) && LODWORD(v49[0]) == 2
        || (LODWORD(v49[0]) = 0, CAStreamBasicDescription::IdentifyCommonPCMFormat(buf, (int *)v49, 0))
        && LODWORD(v49[0]) == 1)
      {
        v20 = ausdk::AUScope::SafeGetElement((AUSpeakerProtectionV3 *)((char *)this + 80), 1u);
        v21 = *(_OWORD *)(v20 + 96);
        v49[0] = *(_OWORD *)(v20 + 80);
        v49[1] = v21;
        v50 = *(_QWORD *)(v20 + 112);
        v22 = (*((_QWORD *)this + 92) - *((_QWORD *)this + 91)) >> 3;
        v23 = a4[1];
        v24 = BYTE12(v49[0]);
        if ((BYTE12(v49[0]) & 0x20) != 0)
          v25 = v22;
        else
          v25 = 1;
        v51 = 0;
        if (!CAStreamBasicDescription::IdentifyCommonPCMFormat(v49, &v51, 0) || (v26 = v51, v51 != 2))
        {
          v51 = 0;
          v27 = CAStreamBasicDescription::IdentifyCommonPCMFormat(v49, &v51, 0);
          if ((v27 & (v51 == 1)) != 0)
            v26 = 4;
          else
            v26 = 0;
        }
        if (v23->mNumberBuffers >= v25)
        {
          v28 = (v24 & 0x20) != 0 ? 1 : v22;
          if (!(_DWORD)v25)
            return 1;
          v29 = v28 * v26 * a2;
          v30 = 16 * v25 - 16;
          p_mDataByteSize = &v23->mBuffers[0].mDataByteSize;
          do
          {
            v33 = *p_mDataByteSize;
            p_mDataByteSize += 4;
            v32 = v33;
            v34 = v33 < v29 || v30 == 0;
            v30 -= 16;
          }
          while (!v34);
          if (v32 >= v29)
            return 1;
        }
        for (i = 0; ; ++i)
        {
          v36 = *((_QWORD *)this + 104);
          if (v36)
            LODWORD(v37) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v36 + 24))(v36);
          else
            v37 = (*((_QWORD *)this + 102) - *((_QWORD *)this + 101)) >> 3;
          if (i >= v37)
            break;
          v38 = *((_QWORD *)this + 104);
          if (v38)
          {
            v39 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)v38 + 32))(v38, i);
          }
          else
          {
            v40 = *((_QWORD *)this + 101);
            if (i >= (*((_QWORD *)this + 102) - v40) >> 3)
              v39 = 0;
            else
              v39 = *(ausdk::AUElement **)(v40 + 8 * i);
          }
          ausdk::AUElement::SetParameter(v39, 0x16u, 0.0, 0);
        }
        if (*((_DWORD *)this + 295))
          return 0;
        v41 = _os_log_pack_size();
        result = caulk::deferred_logger::create_message(*((caulk::deferred_logger **)this + 170), v41 + 88, 16);
        if (!result)
          return result;
        v42 = result;
        v43 = (char *)this + 1360;
        v44 = _os_log_pack_fill();
        mNumberBuffers = v6->mNumberBuffers;
        mNumberChannels = v6->mBuffers[0].mNumberChannels;
        mDataByteSize = v6->mBuffers[0].mDataByteSize;
        *(_DWORD *)v44 = 67109888;
        *(_DWORD *)(v44 + 4) = mNumberBuffers;
        *(_WORD *)(v44 + 8) = 1024;
        *(_DWORD *)(v44 + 10) = mNumberChannels;
        *(_WORD *)(v44 + 14) = 1024;
        *(_DWORD *)(v44 + 16) = mDataByteSize;
        *(_WORD *)(v44 + 20) = 1024;
        *(_DWORD *)(v44 + 22) = a2;
      }
      else
      {
        if (*((_DWORD *)this + 295))
          return 0;
        v48 = _os_log_pack_size();
        result = caulk::deferred_logger::create_message(*((caulk::deferred_logger **)this + 170), v48 + 88, 16);
        if (!result)
          return result;
        v42 = result;
        v43 = (char *)this + 1360;
        *(_WORD *)_os_log_pack_fill() = 0;
      }
      v16 = *(caulk::concurrent::messenger **)(*(_QWORD *)v43 + 16);
      v17 = (caulk::concurrent::message *)v42;
LABEL_60:
      caulk::concurrent::messenger::enqueue(v16, v17);
      return 0;
    }
  }
  result = shouldTraceRender();
  if ((_DWORD)result)
  {
    result = spp3SubsystemAsync();
    if (result)
    {
      if ((*(_BYTE *)(result + 8) & 1) != 0)
      {
        v12 = *(NSObject **)result;
        if (*(_QWORD *)result)
        {
          result = os_log_type_enabled(*(os_log_t *)result, OS_LOG_TYPE_DEBUG);
          if (!(_DWORD)result)
            return result;
          if (a3 < 2)
            v13 = 0;
          else
            v13 = a4[1];
          *(_DWORD *)buf = 136315906;
          *(_QWORD *)&buf[4] = "AUSpeakerProtectionV3.cpp";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = 4205;
          *(_WORD *)&buf[18] = 1024;
          *(_DWORD *)&buf[20] = a3;
          *(_WORD *)&buf[24] = 2048;
          *(_QWORD *)&buf[26] = v13;
          _os_log_impl(&dword_1B5ED0000, v12, OS_LOG_TYPE_DEBUG, "%25s:%-5d No Closed Loop inputs: numberInputBufferLists=%u, inputBufferList[1]=%p", buf, 0x22u);
        }
      }
      return 0;
    }
  }
  return result;
}

void AUSpeakerProtectionV3::ParseSpeakerTelemetryBuffer(AUSpeakerProtectionV3 *this, const telemetry::Item *a2, unsigned int a3, uint64_t a4, vDSP_Stride __IA, uint64_t a6, vDSP_Length a7)
{
  uint64_t v8;
  float *v9;
  clsp::CLSP_Log *v10;
  const float *v11;
  uint64_t v12;
  uint64_t v13;
  float *v14;
  uint64_t v15;
  clsp::CLSP_Log *v16;
  uint64_t v17;
  float v18;
  BOOL v19;
  BOOL v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  NSObject *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  float v29;
  float __C;
  float __B;
  const char *v32;
  __int16 v33;
  int v34;
  __int16 v35;
  uint64_t v36;
  __int16 v37;
  uint64_t v38;
  __int16 v39;
  uint64_t v40;
  __int16 v41;
  uint64_t v42;
  uint64_t v43;

  v43 = *MEMORY[0x1E0C80C00];
  switch((_DWORD)a2)
  {
    case 2:
      v12 = *(_QWORD *)(*((_QWORD *)this + 105) + 16 * a3);
      *(_BYTE *)(v12 + 994) = 1;
      v13 = *(_QWORD *)(v12 + 40);
      if (v13 && (v14 = *(float **)(v13 + 48)) != 0 && (v15 = *(_QWORD *)(v12 + 48)) != 0 && *(_QWORD *)(v15 + 40))
      {
        __B = *v14;
        vDSP_vsmul((const float *)(a6 + 4 * a4), __IA, &__B, *(float **)(v12 + 896), 1, a7);
        __C = 0.0;
        vDSP_minv(*(const float **)(v12 + 896), 1, &__C, a7);
        v29 = 0.0;
        vDSP_maxv(*(const float **)(v12 + 896), 1, &v29, a7);
        v16 = *(clsp::CLSP_Log **)(*(_QWORD *)(v12 + 1080) + 160);
        if (v16)
          clsp::CLSP_Log::LogCLSPData(v16, *(const float **)(v12 + 896), a7);
        v17 = *(_QWORD *)(*(_QWORD *)(v12 + 48) + 40);
        v18 = *(float *)(v17 + 4);
        v19 = __C > v18;
        v20 = __C <= v18 || *(float *)(v17 + 12) * 1.2 <= v29;
        *(_BYTE *)(v12 + 994) = v20;
        *(_BYTE *)(v12 + 995) = v19;
      }
      else if (shouldTraceRender())
      {
        v23 = spp3SubsystemAsync();
        if (v23)
        {
          if ((*(_BYTE *)(v23 + 8) & 1) != 0)
          {
            v24 = *(NSObject **)v23;
            if (*(_QWORD *)v23)
            {
              if (os_log_type_enabled(*(os_log_t *)v23, OS_LOG_TYPE_DEBUG))
              {
                v25 = *(_QWORD *)(v12 + 40);
                if (v25)
                  v26 = *(_QWORD *)(v25 + 48);
                else
                  v26 = 0;
                v27 = *(_QWORD *)(v12 + 48);
                if (v27)
                  v28 = *(_QWORD *)(v27 + 40);
                else
                  v28 = 0;
                __B = 4.8155e-34;
                v32 = "CLSPKernel_v5.cpp";
                v33 = 1024;
                v34 = 1577;
                v35 = 2048;
                v36 = v25;
                v37 = 2048;
                v38 = v26;
                v39 = 2048;
                v40 = v27;
                v41 = 2048;
                v42 = v28;
                _os_log_impl(&dword_1B5ED0000, v24, OS_LOG_TYPE_DEBUG, "%25s:%-5d System not configured properly for Convoy input stream, clParams=%p, convoyParams=%p, cal=%p, ConvoyCal=%p", (uint8_t *)&__B, 0x3Au);
              }
            }
          }
        }
      }
      break;
    case 1:
      v21 = *(_QWORD *)(*((_QWORD *)this + 105) + 16 * a3);
      *(_BYTE *)(v21 + 993) = 1;
      v22 = *(_QWORD *)(v21 + 40);
      if (v22)
      {
        __B = *(float *)(v22 + 4);
        vDSP_vsmul((const float *)(a6 + 4 * a4), __IA, &__B, *(float **)(v21 + 872), 1, a7);
        *(_BYTE *)(v21 + 993) = 0;
        v10 = *(clsp::CLSP_Log **)(*(_QWORD *)(v21 + 1080) + 112);
        if (v10)
        {
          v11 = *(const float **)(v21 + 872);
          goto LABEL_19;
        }
      }
      break;
    case 0:
      v8 = *(_QWORD *)(*((_QWORD *)this + 105) + 16 * a3);
      *(_BYTE *)(v8 + 992) = 1;
      v9 = *(float **)(v8 + 40);
      if (v9)
      {
        __B = *v9;
        vDSP_vsmul((const float *)(a6 + 4 * a4), __IA, &__B, *(float **)(v8 + 848), 1, a7);
        *(_BYTE *)(v8 + 992) = 0;
        v10 = *(clsp::CLSP_Log **)(*(_QWORD *)(v8 + 1080) + 128);
        if (v10)
        {
          v11 = *(const float **)(v8 + 848);
LABEL_19:
          clsp::CLSP_Log::LogCLSPData(v10, v11, a7);
        }
      }
      break;
  }
}

float clsp::CLSPKernel_v5::GetDisplacementFilterGain(clsp::CLSPKernel_v5 *this)
{
  float *v1;

  v1 = (float *)(*(uint64_t (**)(clsp::CLSPKernel_v5 *))(*(_QWORD *)this + 128))(this);
  return log10f(v1[21]* (float)((float)((float)((float)(1.0 - v1[12]) + v1[13]) * (float)((float)(v1[14] + v1[15]) + v1[16]))/ (float)((float)(v1[12] + 1.0) + v1[13])))* 20.0;
}

void clsp::ThermalStateVector_v3_separate<clsp::CL>::TheInstance()
{
  unsigned __int8 v0;

  if ((v0 & 1) == 0)
  {
    {
      clsp::ThermalStateVector_v3_separate<clsp::CL>::ThermalStateVector_v3_separate();
      __cxa_atexit((void (*)(void *))clsp::ThermalStateVector_v3_separate<clsp::CL>::~ThermalStateVector_v3_separate, &clsp::ThermalStateVector_v3_separate<clsp::CL>::TheInstance(void)::inst, &dword_1B5ED0000);
    }
  }
}

void sub_1B641376C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void clsp::ThermalStateVector_v3_separate<clsp::OL>::TheInstance()
{
  unsigned __int8 v0;

  if ((v0 & 1) == 0)
  {
    {
      clsp::ThermalStateVector_v3_separate<clsp::OL>::ThermalStateVector_v3_separate();
      __cxa_atexit((void (*)(void *))clsp::ThermalStateVector_v3_separate<clsp::OL>::~ThermalStateVector_v3_separate, &clsp::ThermalStateVector_v3_separate<clsp::OL>::TheInstance(void)::inst, &dword_1B5ED0000);
    }
  }
}

void sub_1B64137F0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

_QWORD *clsp::ThermalStateVector_v3_separate<clsp::OL>::ThermalStateVector_v3_separate()
{
  _QWORD *result;
  uint64_t v1;
  _QWORD v2[5];
  _QWORD v3[3];
  _QWORD *v4;
  uint64_t v5;

  v5 = *MEMORY[0x1E0C80C00];
  std::vector<clsp::ThermalState_v3>::vector(&clsp::ThermalStateVector_v3_separate<clsp::OL>::TheInstance(void)::inst);
  byte_1EF136C08 = 1;
  qword_1EF136C10 = 0x7FF0000000000000;
  *(double *)&qword_1EF136C10 = (double)mach_absolute_time() * 0.0000000416666667;
  v2[0] = MEMORY[0x1E0C809B0];
  v2[1] = 0x40000000;
  v2[2] = ___ZN4clsp30ThermalStateVector_v3_separateINS_2OLEEC2Ev_block_invoke;
  v2[3] = &__block_descriptor_tmp_584;
  v4 = 0;
  v2[4] = &clsp::ThermalStateVector_v3_separate<clsp::OL>::TheInstance(void)::inst;
  v3[0] = &off_1E69E2828;
  v3[1] = _Block_copy(v2);
  v4 = v3;
  CASmartPreferences::AddHandler<BOOL>((CASmartPreferences *)CFSTR("clsp_resetThermalState"), CFSTR("com.apple.coreaudio"), (uint64_t)CASmartPreferences::InterpretBoolean, (uint64_t)v3);
  result = v4;
  if (v4 == v3)
  {
    v1 = 4;
    result = v3;
  }
  else
  {
    if (!v4)
      return result;
    v1 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v1))();
}

void sub_1B6413928(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, char *a17)
{
  char *v18;
  uint64_t v19;

  v18 = a17;
  if (a17 == &a14)
  {
    v19 = 4;
    v18 = &a14;
  }
  else
  {
    if (!a17)
      goto LABEL_6;
    v19 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v18 + 8 * v19))();
LABEL_6:
  if (clsp::ThermalStateVector_v3_separate<clsp::OL>::TheInstance(void)::inst)
  {
    qword_1EF136BF8 = clsp::ThermalStateVector_v3_separate<clsp::OL>::TheInstance(void)::inst;
    operator delete((void *)clsp::ThermalStateVector_v3_separate<clsp::OL>::TheInstance(void)::inst);
  }
  _Unwind_Resume(exception_object);
}

uint64_t clsp::ThermalStateVector_v3_separate<clsp::OL>::~ThermalStateVector_v3_separate(uint64_t a1)
{
  void *v2;

  v2 = *(void **)a1;
  if (v2)
  {
    *(_QWORD *)(a1 + 8) = v2;
    operator delete(v2);
  }
  return a1;
}

_QWORD *std::vector<clsp::ThermalState_v3>::vector(_QWORD *a1)
{
  char *v2;
  uint64_t v3;
  char *v4;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  v2 = (char *)operator new(0x30uLL);
  v3 = 0;
  *a1 = v2;
  a1[1] = v2;
  a1[2] = v2 + 48;
  do
  {
    v4 = &v2[v3];
    *v4 = 0;
    *(_QWORD *)(v4 + 12) = 0;
    *(_QWORD *)(v4 + 4) = 0;
    *((_DWORD *)v4 + 5) = 0;
    v3 += 24;
  }
  while (v3 != 48);
  a1[1] = v2 + 48;
  return a1;
}

uint64_t ___ZN4clsp30ThermalStateVector_v3_separateINS_2OLEEC2Ev_block_invoke(uint64_t result, int a2)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t i;

  if (a2)
  {
    v2 = *(uint64_t **)(result + 32);
    v3 = *v2;
    for (i = v2[1]; v3 != i; v3 += 24)
    {
      *(_OWORD *)(v3 + 4) = xmmword_1B6629CC0;
      *(_DWORD *)(v3 + 20) = 1065353216;
      *(_BYTE *)v3 = 1;
    }
  }
  return result;
}

void std::__function::__func<void({block_pointer})(BOOL),std::allocator<void({block_pointer})(BOOL)>,void ()(BOOL)>::~__func()
{
  JUMPOUT(0x1BCC95CECLL);
}

uint64_t std::__function::__func<void({block_pointer})(BOOL),std::allocator<void({block_pointer})(BOOL)>,void ()(BOOL)>::__clone()
{
  return 0;
}

void *std::__function::__func<void({block_pointer})(BOOL),std::allocator<void({block_pointer})(BOOL)>,void ()(BOOL)>::__clone(uint64_t a1, _QWORD *a2)
{
  void *result;

  *a2 = &off_1E69E2828;
  result = *(void **)(a1 + 8);
  if (result)
    result = _Block_copy(result);
  a2[1] = result;
  return result;
}

void std::__function::__func<void({block_pointer})(BOOL),std::allocator<void({block_pointer})(BOOL)>,void ()(BOOL)>::destroy(uint64_t a1)
{
  const void *v2;

  v2 = *(const void **)(a1 + 8);
  if (v2)
    _Block_release(v2);
  *(_QWORD *)(a1 + 8) = 0;
}

uint64_t std::__function::__func<void({block_pointer})(BOOL),std::allocator<void({block_pointer})(BOOL)>,void ()(BOOL)>::operator()(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 8) + 16))();
}

_QWORD *clsp::ThermalStateVector_v3_separate<clsp::CL>::ThermalStateVector_v3_separate()
{
  _QWORD *result;
  uint64_t v1;
  _QWORD v2[5];
  _QWORD v3[3];
  _QWORD *v4;
  uint64_t v5;

  v5 = *MEMORY[0x1E0C80C00];
  std::vector<clsp::ThermalState_v3>::vector(&clsp::ThermalStateVector_v3_separate<clsp::CL>::TheInstance(void)::inst);
  byte_1EF136BD8 = 1;
  qword_1EF136BE0 = 0x7FF0000000000000;
  *(double *)&qword_1EF136BE0 = (double)mach_absolute_time() * 0.0000000416666667;
  v2[0] = MEMORY[0x1E0C809B0];
  v2[1] = 0x40000000;
  v2[2] = ___ZN4clsp30ThermalStateVector_v3_separateINS_2CLEEC2Ev_block_invoke;
  v2[3] = &__block_descriptor_tmp_583;
  v4 = 0;
  v2[4] = &clsp::ThermalStateVector_v3_separate<clsp::CL>::TheInstance(void)::inst;
  v3[0] = &off_1E69E2828;
  v3[1] = _Block_copy(v2);
  v4 = v3;
  CASmartPreferences::AddHandler<BOOL>((CASmartPreferences *)CFSTR("clsp_resetThermalState"), CFSTR("com.apple.coreaudio"), (uint64_t)CASmartPreferences::InterpretBoolean, (uint64_t)v3);
  result = v4;
  if (v4 == v3)
  {
    v1 = 4;
    result = v3;
  }
  else
  {
    if (!v4)
      return result;
    v1 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v1))();
}

void sub_1B6413C10(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, char *a17)
{
  char *v18;
  uint64_t v19;

  v18 = a17;
  if (a17 == &a14)
  {
    v19 = 4;
    v18 = &a14;
  }
  else
  {
    if (!a17)
      goto LABEL_6;
    v19 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v18 + 8 * v19))();
LABEL_6:
  if (clsp::ThermalStateVector_v3_separate<clsp::CL>::TheInstance(void)::inst)
  {
    qword_1EF136BC8 = clsp::ThermalStateVector_v3_separate<clsp::CL>::TheInstance(void)::inst;
    operator delete((void *)clsp::ThermalStateVector_v3_separate<clsp::CL>::TheInstance(void)::inst);
  }
  _Unwind_Resume(exception_object);
}

uint64_t clsp::ThermalStateVector_v3_separate<clsp::CL>::~ThermalStateVector_v3_separate(uint64_t a1)
{
  void *v2;

  v2 = *(void **)a1;
  if (v2)
  {
    *(_QWORD *)(a1 + 8) = v2;
    operator delete(v2);
  }
  return a1;
}

uint64_t ___ZN4clsp30ThermalStateVector_v3_separateINS_2CLEEC2Ev_block_invoke(uint64_t result, int a2)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t i;

  if (a2)
  {
    v2 = *(uint64_t **)(result + 32);
    v3 = *v2;
    for (i = v2[1]; v3 != i; v3 += 24)
    {
      *(_OWORD *)(v3 + 4) = xmmword_1B6629CC0;
      *(_DWORD *)(v3 + 20) = 1065353216;
      *(_BYTE *)v3 = 1;
    }
  }
  return result;
}

char *clsp::ThermalStateVector_v3_separate<clsp::CL>::ThermalState(unsigned int a1)
{
  char *result;
  unsigned __int8 v3;
  int v4;

  clsp::ThermalStateVector_v3_separate<clsp::CL>::TheInstance();
  if (0xAAAAAAAAAAAAAAABLL
     * ((qword_1EF136BC8 - clsp::ThermalStateVector_v3_separate<clsp::CL>::TheInstance(void)::inst) >> 3) <= a1)
  {
    result = &clsp::ThermalStateVector_v3_separate<clsp::CL>::ThermalState::unInitState;
    if ((v3 & 1) == 0)
    {
      result = &clsp::ThermalStateVector_v3_separate<clsp::CL>::ThermalState::unInitState;
      if (v4)
      {
        clsp::ThermalStateVector_v3_separate<clsp::CL>::ThermalState::unInitState = 0;
        unk_1EF136C2C = 0;
        unk_1EF136C24 = 0;
        dword_1EF136C34 = 0;
        result = &clsp::ThermalStateVector_v3_separate<clsp::CL>::ThermalState::unInitState;
      }
    }
    clsp::ThermalStateVector_v3_separate<clsp::CL>::ThermalState::unInitState = 0;
  }
  else
  {
    clsp::ThermalStateVector_v3_separate<clsp::CL>::TheInstance();
    if (0xAAAAAAAAAAAAAAABLL
       * ((qword_1EF136BC8 - clsp::ThermalStateVector_v3_separate<clsp::CL>::TheInstance(void)::inst) >> 3) <= a1)
      std::vector<std::vector<float>>::__throw_out_of_range[abi:ne180100]();
    return (char *)(clsp::ThermalStateVector_v3_separate<clsp::CL>::TheInstance(void)::inst + 24 * a1);
  }
  return result;
}

char *clsp::ThermalStateVector_v3_separate<clsp::OL>::ThermalState(unsigned int a1)
{
  char *result;
  unsigned __int8 v3;
  int v4;

  clsp::ThermalStateVector_v3_separate<clsp::OL>::TheInstance();
  if (0xAAAAAAAAAAAAAAABLL
     * ((qword_1EF136BF8 - clsp::ThermalStateVector_v3_separate<clsp::OL>::TheInstance(void)::inst) >> 3) <= a1)
  {
    result = &clsp::ThermalStateVector_v3_separate<clsp::OL>::ThermalState::unInitState;
    if ((v3 & 1) == 0)
    {
      result = &clsp::ThermalStateVector_v3_separate<clsp::OL>::ThermalState::unInitState;
      if (v4)
      {
        clsp::ThermalStateVector_v3_separate<clsp::OL>::ThermalState::unInitState = 0;
        unk_1EF136C4C = 0;
        unk_1EF136C44 = 0;
        dword_1EF136C54 = 0;
        result = &clsp::ThermalStateVector_v3_separate<clsp::OL>::ThermalState::unInitState;
      }
    }
    clsp::ThermalStateVector_v3_separate<clsp::OL>::ThermalState::unInitState = 0;
  }
  else
  {
    clsp::ThermalStateVector_v3_separate<clsp::OL>::TheInstance();
    if (0xAAAAAAAAAAAAAAABLL
       * ((qword_1EF136BF8 - clsp::ThermalStateVector_v3_separate<clsp::OL>::TheInstance(void)::inst) >> 3) <= a1)
      std::vector<std::vector<float>>::__throw_out_of_range[abi:ne180100]();
    return (char *)(clsp::ThermalStateVector_v3_separate<clsp::OL>::TheInstance(void)::inst + 24 * a1);
  }
  return result;
}

float clsp::ThermalController::restoreThermalState(uint64_t a1, uint64_t a2)
{
  int v4;
  int v5;
  float result;

  shouldTraceRender();
  if (!*(_BYTE *)a2)
    return clsp::ThermalController::resetThermalState((clsp::ThermalController *)a1);
  v4 = *(_DWORD *)(a2 + 4);
  *(_DWORD *)(a1 + 152) = *(_DWORD *)(a2 + 8);
  v5 = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 172) = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(a1 + 192) = v4;
  *(_DWORD *)(a1 + 232) = v5;
  *(_DWORD *)(a1 + 260) = v5;
  *(_DWORD *)(a1 + 276) = v5;
  result = *(float *)(a2 + 20);
  *(float *)(a1 + 124) = result;
  return result;
}

void clsp::ThermalController::updateThermalState(clsp::ThermalController *this, float a2)
{
  uint64_t v2;
  double v4;
  float v5;
  float v6;
  float v7;
  float v8;
  float v9;
  float v10;
  float v11;
  float v12;
  uint64_t v13;
  double v14;
  float v15;
  double v16;
  double v17;
  float v18;

  v2 = *((_QWORD *)this + 40);
  if (!v2)
    __assert_rtn("updateThermalState", "CLSPBlocks.h", 1589, "mr_CLTModule");
  if (a2 >= 0.5)
  {
    v4 = a2;
    v5 = *((double *)this + 8);
    v6 = *((float *)this + 38);
    v7 = -a2;
    *((float *)this + 38) = v6 * expf((float)-a2 / v5);
    v8 = *((double *)this + 10);
    v9 = *((float *)this + 43);
    *((float *)this + 43) = v9 * expf(v7 / v8);
    v10 = *((double *)this + 12);
    v11 = *((float *)this + 48);
    *((float *)this + 48) = v11 * expf(v7 / v10);
    v12 = *((float *)this + 58);
    v13 = 208;
    if (v12 < 1.0)
      v13 = 200;
    v14 = -v4;
    v15 = (float)(v12 + -1.0) * exp(v14 / (*(double *)((char *)this + v13) / 4.60517019)) + 1.0;
    *((float *)this + 58) = v15;
    v16 = *(float *)this;
    v17 = (float)(*(float *)(v2 + 140) - *(float *)this);
    v18 = v16 + v17 * exp(v14 / (*(double *)(v2 + 128) / 4.60517019));
    *(float *)(v2 + 140) = v18;
  }
}

uint64_t AUSpeakerProtectionV3::InterpretSpeakerCalibration(AUSpeakerProtectionV3 *this, unsigned __int16 *a2, unsigned int a3)
{
  NSObject **v4;
  NSObject *v5;
  int v8;
  NSObject **v9;
  NSObject *v10;
  const char *v11;
  NSObject *v12;
  uint32_t v13;
  NSObject **v14;
  NSObject *v15;
  unint64_t v16;
  NSObject **v17;
  unint64_t v18;
  NSObject **v19;
  NSObject **v20;
  NSObject **v21;
  NSObject *v22;
  NSObject **v23;
  NSObject *v24;
  NSObject **v25;
  NSObject *v26;
  unsigned int v27;
  uint64_t result;
  __int16 v29;
  uint64_t v30;
  uint16x4_t v31;
  _QWORD *v32;
  _QWORD *v33;
  const std::locale::facet *v34;
  NSObject **v35;
  NSObject *v36;
  void **v37;
  uint64_t *v38;
  unint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t *v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  int32x4_t v54;
  _QWORD *v55;
  _QWORD *v56;
  const std::locale::facet *v57;
  NSObject **v58;
  NSObject *v59;
  void **v60;
  uint64_t *v61;
  unint64_t v62;
  _QWORD *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t v68;
  uint64_t *v69;
  unint64_t v70;
  _QWORD *v71;
  _QWORD *v72;
  uint64_t v73;
  int64x2_t v74;
  uint64_t v75;
  uint64_t *v76;
  unint64_t v77;
  _QWORD *v78;
  _QWORD *v79;
  uint64_t v80;
  int64x2_t v81;
  uint64_t v82;
  uint64_t *v83;
  uint64_t *v84;
  uint64_t v85;
  char *v86;
  char *v87;
  char *v88;
  unsigned int v89;
  uint16x4_t v90;
  std::__shared_weak_count *v91;
  uint16x4_t *v92;
  unint64_t *p_shared_owners;
  uint16x4_t v94;
  uint16x4_t v95;
  int8x16_t *v96;
  int32x4_t v97;
  _QWORD *v98;
  _QWORD *v99;
  const std::locale::facet *v100;
  NSObject **v101;
  NSObject *v102;
  void **v103;
  int8x16_t **v104;
  unint64_t v105;
  _QWORD *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  unint64_t v110;
  uint64_t v111;
  int8x16_t **v112;
  unint64_t v113;
  _QWORD *v114;
  _QWORD *v115;
  int8x16_t *v116;
  int64x2_t v117;
  uint64_t v118;
  unint64_t v119;
  std::__shared_weak_count *v120;
  unint64_t *v121;
  unint64_t v122;
  int64x2_t *v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  int64x2_t *v127;
  float32x4_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132[3];
  char *v133;
  std::__shared_weak_count *v134;
  void *__p[2];
  char v136;
  _BYTE buf[18];
  __int16 v138;
  unsigned int v139;
  __int16 v140;
  int v141;
  void *v142;
  char v143;
  _BYTE v144[160];
  _BYTE v145[32];
  char *v146;
  uint64_t v147;

  v147 = *MEMORY[0x1E0C80C00];
  if (a3 <= 3)
  {
    v4 = (NSObject **)spp3Subsystem();
    if (v4)
    {
      v5 = *v4;
      if (!*v4)
        return 4294956445;
    }
    else
    {
      v5 = MEMORY[0x1E0C81028];
    }
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315906;
      *(_QWORD *)&buf[4] = "AUSpeakerProtectionV3.cpp";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 3115;
      v138 = 1024;
      v139 = a3;
      v140 = 1024;
      v141 = 4;
      v11 = "%25s:%-5d SpCl property size %d less than expected SpCl header size %d";
LABEL_16:
      v12 = v5;
      v13 = 30;
LABEL_55:
      _os_log_impl(&dword_1B5ED0000, v12, OS_LOG_TYPE_ERROR, v11, buf, v13);
      return 4294956445;
    }
    return 4294956445;
  }
  if (!a2)
  {
    v14 = (NSObject **)spp3Subsystem();
    if (v14)
    {
      v15 = *v14;
      if (!*v14)
        return 4294956445;
    }
    else
    {
      v15 = MEMORY[0x1E0C81028];
    }
    if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      *(_QWORD *)&buf[4] = "AUSpeakerProtectionV3.cpp";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 3120;
      v11 = "%25s:%-5d SpCl property data is null";
      v12 = v15;
      v13 = 18;
      goto LABEL_55;
    }
    return 4294956445;
  }
  v8 = a2[1];
  if (v8 == 3)
  {
    v130 = *(unsigned __int8 *)a2;
    v16 = (8 * v130) | 4;
    if (v16 > a3)
    {
      v17 = (NSObject **)spp3Subsystem();
      if (v17)
      {
        v5 = *v17;
        if (!*v17)
          return 4294956445;
      }
      else
      {
        v5 = MEMORY[0x1E0C81028];
      }
      if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315906;
        *(_QWORD *)&buf[4] = "AUSpeakerProtectionV3.cpp";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 3156;
        v138 = 1024;
        v139 = a3;
        v140 = 1024;
        v141 = (8 * v130) | 4;
        v11 = "%25s:%-5d inDataSize %d < expected size %d";
        goto LABEL_16;
      }
      return 4294956445;
    }
    if (v16 == a3)
      goto LABEL_83;
    v21 = (NSObject **)spp3Subsystem();
    if (v21)
    {
      v22 = *v21;
      if (!*v21)
      {
LABEL_83:
        v47 = (uint64_t *)*((_QWORD *)this + 88);
        v48 = (uint64_t *)*((_QWORD *)this + 87);
        while (v47 != v48)
          std::unique_ptr<clsp::SpeakerCalibrationProperties>::reset[abi:ne180100](--v47);
        *((_QWORD *)this + 88) = v48;
        if (!(_DWORD)v130)
          return 0;
        v49 = 0;
        v127 = (int64x2_t *)((char *)this + 696);
        v50 = *MEMORY[0x1E0DE4F60];
        v51 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
        v52 = MEMORY[0x1E0DE4FB8] + 16;
        while (1)
        {
          v53 = operator new();
          *(_WORD *)(v53 + 16) = 0;
          *(_OWORD *)(v53 + 24) = 0u;
          *(_OWORD *)(v53 + 40) = 0u;
          v54 = (int32x4_t)vdivq_f32(vcvtq_f32_u32(vmovl_u16(*(uint16x4_t *)&a2[4 * v49 + 2])), (float32x4_t)xmmword_1B66A2430);
          *(int8x16_t *)v53 = vextq_s8((int8x16_t)vrev64q_s32(v54), (int8x16_t)v54, 8uLL);
          v133 = (char *)v53;
          std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)buf);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(buf, (uint64_t)"SpeakerCalibrationProperty Ch = ", 32);
          v55 = (_QWORD *)std::ostream::operator<<();
          v56 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v55, (uint64_t)"\n", 1);
          clsp::SpeakerCalibrationProperties::dump(v53, v56);
          std::ios_base::getloc((const std::ios_base *)((char *)v56 + *(_QWORD *)(*v56 - 24)));
          v57 = std::locale::use_facet((const std::locale *)v145, MEMORY[0x1E0DE4A90]);
          ((void (*)(const std::locale::facet *, uint64_t))v57->__vftable[2].~facet_0)(v57, 10);
          std::locale::~locale((std::locale *)v145);
          std::ostream::put();
          std::ostream::flush();
          v58 = (NSObject **)spp3Subsystem();
          if (!v58)
            break;
          v59 = *v58;
          if (*v58)
            goto LABEL_92;
LABEL_97:
          v61 = (uint64_t *)*((_QWORD *)this + 88);
          v62 = *((_QWORD *)this + 89);
          if ((unint64_t)v61 >= v62)
          {
            v64 = ((uint64_t)v61 - v127->i64[0]) >> 3;
            if ((unint64_t)(v64 + 1) >> 61)
              std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
            v65 = v62 - v127->i64[0];
            v66 = v65 >> 2;
            if (v65 >> 2 <= (unint64_t)(v64 + 1))
              v66 = v64 + 1;
            if ((unint64_t)v65 >= 0x7FFFFFFFFFFFFFF8)
              v67 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v67 = v66;
            v146 = (char *)this + 712;
            if (v67)
              v67 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<SlidingWindowDTFT<float> *>>(v67);
            else
              v68 = 0;
            v69 = (uint64_t *)(v67 + 8 * v64);
            v70 = v67 + 8 * v68;
            *(_QWORD *)&v145[24] = v70;
            v133 = 0;
            *v69 = v53;
            v63 = v69 + 1;
            *(_QWORD *)&v145[16] = v69 + 1;
            v71 = (_QWORD *)*((_QWORD *)this + 88);
            v72 = (_QWORD *)*((_QWORD *)this + 87);
            if (v71 == v72)
            {
              v74 = vdupq_n_s64((unint64_t)v71);
            }
            else
            {
              do
              {
                v73 = *--v71;
                *v71 = 0;
                *--v69 = v73;
              }
              while (v71 != v72);
              v74 = *v127;
              v63 = *(_QWORD **)&v145[16];
              v70 = *(_QWORD *)&v145[24];
            }
            *((_QWORD *)this + 87) = v69;
            *((_QWORD *)this + 88) = v63;
            *(int64x2_t *)&v145[8] = v74;
            v75 = *((_QWORD *)this + 89);
            *((_QWORD *)this + 89) = v70;
            *(_QWORD *)&v145[24] = v75;
            *(_QWORD *)v145 = v74.i64[0];
            std::__split_buffer<std::unique_ptr<clsp::SpeakerCalibrationProperties>>::~__split_buffer((uint64_t)v145);
          }
          else
          {
            v133 = 0;
            *v61 = v53;
            v63 = v61 + 1;
          }
          *((_QWORD *)this + 88) = v63;
          *(_QWORD *)buf = v50;
          *(_QWORD *)&buf[*(_QWORD *)(v50 - 24)] = v51;
          *(_QWORD *)&buf[8] = v52;
          if (v143 < 0)
            operator delete(v142);
          std::streambuf::~streambuf();
          std::ostream::~ostream();
          MEMORY[0x1BCC95BE4](v144);
          std::unique_ptr<clsp::SpeakerCalibrationProperties>::reset[abi:ne180100]((uint64_t *)&v133);
          if (++v49 == v130)
            return 0;
        }
        v59 = MEMORY[0x1E0C81028];
LABEL_92:
        if (os_log_type_enabled(v59, OS_LOG_TYPE_DEBUG))
        {
          std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)&buf[8], __p);
          v60 = __p;
          if (v136 < 0)
            v60 = (void **)__p[0];
          *(_DWORD *)v145 = 136315650;
          *(_QWORD *)&v145[4] = "AUSpeakerProtectionV3.cpp";
          *(_WORD *)&v145[12] = 1024;
          *(_DWORD *)&v145[14] = 3175;
          *(_WORD *)&v145[18] = 2080;
          *(_QWORD *)&v145[20] = v60;
          _os_log_impl(&dword_1B5ED0000, v59, OS_LOG_TYPE_DEBUG, "%25s:%-5d %s", v145, 0x1Cu);
          if (v136 < 0)
            operator delete(__p[0]);
        }
        goto LABEL_97;
      }
    }
    else
    {
      v22 = MEMORY[0x1E0C81028];
    }
    if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136315906;
      *(_QWORD *)&buf[4] = "AUSpeakerProtectionV3.cpp";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 3160;
      v138 = 1024;
      v139 = a3;
      v140 = 1024;
      v141 = (8 * v130) | 4;
      _os_log_impl(&dword_1B5ED0000, v22, OS_LOG_TYPE_DEFAULT, "%25s:%-5d inDataSize %d does not match expected size %d", buf, 0x1Eu);
    }
    goto LABEL_83;
  }
  if (v8 == 2)
  {
    if (a3 <= 0xB)
    {
      v20 = (NSObject **)spp3Subsystem();
      if (v20)
      {
        v5 = *v20;
        if (!*v20)
          return 4294956445;
      }
      else
      {
        v5 = MEMORY[0x1E0C81028];
      }
      if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315906;
        *(_QWORD *)&buf[4] = "AUSpeakerProtectionV3.cpp";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 3132;
        v138 = 1024;
        v139 = a3;
        v140 = 1024;
        v141 = 12;
        v11 = "%25s:%-5d inDataSize %d < expected size %d";
        goto LABEL_16;
      }
      return 4294956445;
    }
    if (a3 != 12)
    {
      v9 = (NSObject **)spp3Subsystem();
      if (v9)
      {
        v10 = *v9;
        if (!*v9)
          goto LABEL_60;
      }
      else
      {
        v10 = MEMORY[0x1E0C81028];
      }
      if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 136315906;
        *(_QWORD *)&buf[4] = "AUSpeakerProtectionV3.cpp";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 3136;
        v138 = 1024;
        v139 = a3;
        v140 = 1024;
        v141 = 12;
        _os_log_impl(&dword_1B5ED0000, v10, OS_LOG_TYPE_DEFAULT, "%25s:%-5d inDataSize %d does not match expected size %d", buf, 0x1Eu);
      }
    }
LABEL_60:
    v131 = *(_QWORD *)(a2 + 2);
    v29 = *a2;
    v30 = operator new();
    v31.i16[0] = v131;
    *(_WORD *)(v30 + 16) = 0;
    *(_OWORD *)(v30 + 24) = 0u;
    v31.i16[1] = HIWORD(v131);
    *(_OWORD *)(v30 + 40) = 0u;
    v31.i16[2] = WORD1(v131);
    v31.i16[3] = v29;
    *(float32x4_t *)v30 = vdivq_f32(vcvtq_f32_u32(vmovl_u16(v31)), (float32x4_t)xmmword_1B66A2440);
    v133 = (char *)v30;
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)buf);
    v32 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(buf, (uint64_t)"SpeakerCalibrationProperty:", 27);
    v33 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)"\n", 1);
    clsp::SpeakerCalibrationProperties::dump(v30, v33);
    std::ios_base::getloc((const std::ios_base *)((char *)v33 + *(_QWORD *)(*v33 - 24)));
    v34 = std::locale::use_facet((const std::locale *)v145, MEMORY[0x1E0DE4A90]);
    ((void (*)(const std::locale::facet *, uint64_t))v34->__vftable[2].~facet_0)(v34, 10);
    std::locale::~locale((std::locale *)v145);
    std::ostream::put();
    std::ostream::flush();
    v35 = (NSObject **)spp3Subsystem();
    if (v35)
    {
      v36 = *v35;
      if (!*v35)
      {
LABEL_70:
        v38 = (uint64_t *)*((_QWORD *)this + 88);
        v39 = *((_QWORD *)this + 89);
        if ((unint64_t)v38 >= v39)
        {
          v41 = *((_QWORD *)this + 87);
          v42 = ((uint64_t)v38 - v41) >> 3;
          if ((unint64_t)(v42 + 1) >> 61)
            std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
          v43 = v39 - v41;
          v44 = v43 >> 2;
          if (v43 >> 2 <= (unint64_t)(v42 + 1))
            v44 = v42 + 1;
          if ((unint64_t)v43 >= 0x7FFFFFFFFFFFFFF8)
            v45 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v45 = v44;
          v146 = (char *)this + 712;
          if (v45)
            v45 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<SlidingWindowDTFT<float> *>>(v45);
          else
            v46 = 0;
          v76 = (uint64_t *)(v45 + 8 * v42);
          v77 = v45 + 8 * v46;
          *(_QWORD *)&v145[24] = v77;
          v133 = 0;
          *v76 = v30;
          v40 = v76 + 1;
          *(_QWORD *)&v145[16] = v76 + 1;
          v78 = (_QWORD *)*((_QWORD *)this + 88);
          v79 = (_QWORD *)*((_QWORD *)this + 87);
          if (v78 == v79)
          {
            v81 = vdupq_n_s64((unint64_t)v78);
          }
          else
          {
            do
            {
              v80 = *--v78;
              *v78 = 0;
              *--v76 = v80;
            }
            while (v78 != v79);
            v81 = *(int64x2_t *)((char *)this + 696);
            v40 = *(_QWORD **)&v145[16];
            v77 = *(_QWORD *)&v145[24];
          }
          *((_QWORD *)this + 87) = v76;
          *((_QWORD *)this + 88) = v40;
          *(int64x2_t *)&v145[8] = v81;
          v82 = *((_QWORD *)this + 89);
          *((_QWORD *)this + 89) = v77;
          *(_QWORD *)&v145[24] = v82;
          *(_QWORD *)v145 = v81.i64[0];
          std::__split_buffer<std::unique_ptr<clsp::SpeakerCalibrationProperties>>::~__split_buffer((uint64_t)v145);
        }
        else
        {
          v133 = 0;
          *v38 = v30;
          v40 = v38 + 1;
        }
        *((_QWORD *)this + 88) = v40;
        *(_QWORD *)buf = *MEMORY[0x1E0DE4F60];
        *(_QWORD *)&buf[*(_QWORD *)(*(_QWORD *)buf - 24)] = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
        *(_QWORD *)&buf[8] = MEMORY[0x1E0DE4FB8] + 16;
        if (v143 < 0)
          operator delete(v142);
        std::streambuf::~streambuf();
        std::ostream::~ostream();
        MEMORY[0x1BCC95BE4](v144);
        std::unique_ptr<clsp::SpeakerCalibrationProperties>::reset[abi:ne180100]((uint64_t *)&v133);
        return 0;
      }
    }
    else
    {
      v36 = MEMORY[0x1E0C81028];
    }
    if (os_log_type_enabled(v36, OS_LOG_TYPE_DEBUG))
    {
      std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)&buf[8], __p);
      v37 = v136 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)v145 = 136315650;
      *(_QWORD *)&v145[4] = "AUSpeakerProtectionV3.cpp";
      *(_WORD *)&v145[12] = 1024;
      *(_DWORD *)&v145[14] = 3147;
      *(_WORD *)&v145[18] = 2080;
      *(_QWORD *)&v145[20] = v37;
      _os_log_impl(&dword_1B5ED0000, v36, OS_LOG_TYPE_DEBUG, "%25s:%-5d %s", v145, 0x1Cu);
      if (v136 < 0)
        operator delete(__p[0]);
    }
    goto LABEL_70;
  }
  if ((v8 & 0xFFFE) != 6)
  {
    v23 = (NSObject **)spp3Subsystem();
    if (v23)
    {
      v24 = *v23;
      if (!*v23)
        return 4294956445;
    }
    else
    {
      v24 = MEMORY[0x1E0C81028];
    }
    if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR))
    {
      v27 = *(_DWORD *)a2;
      *(_DWORD *)buf = 136315650;
      *(_QWORD *)&buf[4] = "AUSpeakerProtectionV3.cpp";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 3213;
      v138 = 1024;
      v139 = v27;
      v11 = "%25s:%-5d SpCl version not recognized in SpCl header: 0x%x";
      v12 = v24;
      v13 = 24;
      goto LABEL_55;
    }
    return 4294956445;
  }
  v129 = *(unsigned __int8 *)a2;
  v18 = 28 * v129 + 4;
  if (v18 > a3)
  {
    v19 = (NSObject **)spp3Subsystem();
    if (v19)
    {
      v5 = *v19;
      if (!*v19)
        return 4294956445;
    }
    else
    {
      v5 = MEMORY[0x1E0C81028];
    }
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315906;
      *(_QWORD *)&buf[4] = "AUSpeakerProtectionV3.cpp";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 3186;
      v138 = 1024;
      v139 = a3;
      v140 = 1024;
      v141 = 28 * v129 + 4;
      v11 = "%25s:%-5d inDataSize %d < expected size %d";
      goto LABEL_16;
    }
    return 4294956445;
  }
  if (v18 != a3)
  {
    v25 = (NSObject **)spp3Subsystem();
    if (v25)
    {
      v26 = *v25;
      if (!*v25)
        goto LABEL_133;
    }
    else
    {
      v26 = MEMORY[0x1E0C81028];
    }
    if (os_log_type_enabled(v26, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136315906;
      *(_QWORD *)&buf[4] = "AUSpeakerProtectionV3.cpp";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 3190;
      v138 = 1024;
      v139 = a3;
      v140 = 1024;
      v141 = 28 * v129 + 4;
      _os_log_impl(&dword_1B5ED0000, v26, OS_LOG_TYPE_DEFAULT, "%25s:%-5d inDataSize %d does not match expected size %d", buf, 0x1Eu);
    }
  }
LABEL_133:
  v83 = (uint64_t *)*((_QWORD *)this + 88);
  v84 = (uint64_t *)*((_QWORD *)this + 87);
  while (v83 != v84)
    std::unique_ptr<clsp::SpeakerCalibrationProperties>::reset[abi:ne180100](--v83);
  *((_QWORD *)this + 88) = v84;
  if ((_DWORD)v129)
  {
    v85 = 0;
    v86 = (char *)(a2 + 2);
    v123 = (int64x2_t *)((char *)this + 696);
    v125 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
    v126 = *MEMORY[0x1E0DE4F60];
    v128 = (float32x4_t)vdupq_n_s32(0x3A83126Fu);
    v124 = MEMORY[0x1E0DE4FB8] + 16;
    while (1)
    {
      v87 = (char *)operator new(0x30uLL);
      *((_QWORD *)v87 + 1) = 0;
      *((_QWORD *)v87 + 2) = 0;
      *(_QWORD *)v87 = &off_1E69DB478;
      v88 = &v86[28 * v85];
      LOWORD(v89) = *((_WORD *)v88 + 4);
      *((float *)v87 + 6) = (float)v89;
      v90.i32[0] = *(_DWORD *)(v88 + 10);
      v90.i16[2] = *((_WORD *)v88 + 7);
      v90.i16[3] = *((_WORD *)v88 + 9);
      *(float32x4_t *)(v87 + 28) = vmulq_f32(vcvtq_f32_u32(vmovl_u16(v90)), (float32x4_t)xmmword_1B66A2450);
      v133 = v87 + 24;
      v134 = (std::__shared_weak_count *)v87;
      v91 = (std::__shared_weak_count *)operator new(0x28uLL);
      v92 = (uint16x4_t *)&v86[28 * v85];
      v91->__shared_owners_ = 0;
      p_shared_owners = (unint64_t *)&v91->__shared_owners_;
      v91->__shared_weak_owners_ = 0;
      v91->__vftable = (std::__shared_weak_count_vtbl *)&off_1E69DB4B0;
      v94.i16[0] = v92[2].i16[0];
      v94.i16[1] = v92[2].i16[3];
      v94.i16[2] = v92[2].i16[2];
      v94.i16[3] = v92[3].i16[1];
      v91[1].std::__shared_count = (std::__shared_count)vmulq_f32(vcvtq_f32_u32(vmovl_u16(v94)), v128);
      v132[1] = (uint64_t)&v91[1];
      v132[2] = (uint64_t)v91;
      v95 = *v92;
      v96 = (int8x16_t *)operator new();
      v96[1].i16[0] = *(_WORD *)&v86[28 * v85 + 24];
      *(int8x16_t *)((char *)&v96[2] + 8) = 0u;
      *(int8x16_t *)((char *)&v96[1] + 8) = 0u;
      v97 = (int32x4_t)vdivq_f32(vcvtq_f32_u32(vmovl_u16(v95)), (float32x4_t)xmmword_1B66A2430);
      *v96 = vextq_s8((int8x16_t)vrev64q_s32(v97), (int8x16_t)v97, 8uLL);
      std::shared_ptr<clsp::CLSPKernel_Logs>::operator=[abi:ne180100](&v96[1].i64[1], (uint64_t)(v87 + 24), (uint64_t)v87);
      std::shared_ptr<clsp::CLSPKernel_Logs>::operator=[abi:ne180100](&v96[2].i64[1], (uint64_t)&v91[1], (uint64_t)v91);
      v132[0] = (uint64_t)v96;
      std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)buf);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(buf, (uint64_t)"SpeakerCalibrationProperty Ch = ", 32);
      v98 = (_QWORD *)std::ostream::operator<<();
      v99 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v98, (uint64_t)"\n", 1);
      clsp::SpeakerCalibrationProperties::dump((uint64_t)v96, v99);
      std::ios_base::getloc((const std::ios_base *)((char *)v99 + *(_QWORD *)(*v99 - 24)));
      v100 = std::locale::use_facet((const std::locale *)v145, MEMORY[0x1E0DE4A90]);
      ((void (*)(const std::locale::facet *, uint64_t))v100->__vftable[2].~facet_0)(v100, 10);
      std::locale::~locale((std::locale *)v145);
      std::ostream::put();
      std::ostream::flush();
      v101 = (NSObject **)spp3Subsystem();
      if (!v101)
        break;
      v102 = *v101;
      if (*v101)
        goto LABEL_142;
LABEL_147:
      v104 = (int8x16_t **)*((_QWORD *)this + 88);
      v105 = *((_QWORD *)this + 89);
      if ((unint64_t)v104 >= v105)
      {
        v107 = ((uint64_t)v104 - v123->i64[0]) >> 3;
        if ((unint64_t)(v107 + 1) >> 61)
          std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
        v108 = v105 - v123->i64[0];
        v109 = v108 >> 2;
        if (v108 >> 2 <= (unint64_t)(v107 + 1))
          v109 = v107 + 1;
        if ((unint64_t)v108 >= 0x7FFFFFFFFFFFFFF8)
          v110 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v110 = v109;
        v146 = (char *)this + 712;
        if (v110)
          v110 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<SlidingWindowDTFT<float> *>>(v110);
        else
          v111 = 0;
        v112 = (int8x16_t **)(v110 + 8 * v107);
        v113 = v110 + 8 * v111;
        *(_QWORD *)&v145[24] = v113;
        v132[0] = 0;
        *v112 = v96;
        v106 = v112 + 1;
        *(_QWORD *)&v145[16] = v112 + 1;
        v114 = (_QWORD *)*((_QWORD *)this + 88);
        v115 = (_QWORD *)*((_QWORD *)this + 87);
        if (v114 == v115)
        {
          v117 = vdupq_n_s64((unint64_t)v114);
        }
        else
        {
          do
          {
            v116 = (int8x16_t *)*--v114;
            *v114 = 0;
            *--v112 = v116;
          }
          while (v114 != v115);
          v117 = *v123;
          v106 = *(_QWORD **)&v145[16];
          v113 = *(_QWORD *)&v145[24];
        }
        *((_QWORD *)this + 87) = v112;
        *((_QWORD *)this + 88) = v106;
        *(int64x2_t *)&v145[8] = v117;
        v118 = *((_QWORD *)this + 89);
        *((_QWORD *)this + 89) = v113;
        *(_QWORD *)&v145[24] = v118;
        *(_QWORD *)v145 = v117.i64[0];
        std::__split_buffer<std::unique_ptr<clsp::SpeakerCalibrationProperties>>::~__split_buffer((uint64_t)v145);
      }
      else
      {
        v132[0] = 0;
        *v104 = v96;
        v106 = v104 + 1;
      }
      *((_QWORD *)this + 88) = v106;
      *(_QWORD *)buf = v126;
      *(_QWORD *)&buf[*(_QWORD *)(v126 - 24)] = v125;
      *(_QWORD *)&buf[8] = v124;
      if (v143 < 0)
        operator delete(v142);
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      MEMORY[0x1BCC95BE4](v144);
      std::unique_ptr<clsp::SpeakerCalibrationProperties>::reset[abi:ne180100](v132);
      do
        v119 = __ldaxr(p_shared_owners);
      while (__stlxr(v119 - 1, p_shared_owners));
      if (!v119)
      {
        ((void (*)(std::__shared_weak_count *))v91->__on_zero_shared)(v91);
        std::__shared_weak_count::__release_weak(v91);
      }
      v120 = v134;
      if (v134)
      {
        v121 = (unint64_t *)&v134->__shared_owners_;
        do
          v122 = __ldaxr(v121);
        while (__stlxr(v122 - 1, v121));
        if (!v122)
        {
          ((void (*)(std::__shared_weak_count *))v120->__on_zero_shared)(v120);
          std::__shared_weak_count::__release_weak(v120);
        }
      }
      result = 0;
      if (++v85 == v129)
        return result;
    }
    v102 = MEMORY[0x1E0C81028];
LABEL_142:
    if (os_log_type_enabled(v102, OS_LOG_TYPE_DEBUG))
    {
      std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)&buf[8], __p);
      v103 = __p;
      if (v136 < 0)
        v103 = (void **)__p[0];
      *(_DWORD *)v145 = 136315650;
      *(_QWORD *)&v145[4] = "AUSpeakerProtectionV3.cpp";
      *(_WORD *)&v145[12] = 1024;
      *(_DWORD *)&v145[14] = 3207;
      *(_WORD *)&v145[18] = 2080;
      *(_QWORD *)&v145[20] = v103;
      _os_log_impl(&dword_1B5ED0000, v102, OS_LOG_TYPE_DEBUG, "%25s:%-5d %s", v145, 0x1Cu);
      if (v136 < 0)
        operator delete(__p[0]);
    }
    goto LABEL_147;
  }
  return 0;
}

void sub_1B64151B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39)
{
  std::ostringstream::~ostringstream((uint64_t)&a39);
  std::unique_ptr<clsp::SpeakerCalibrationProperties>::reset[abi:ne180100](&a33);
  _Unwind_Resume(a1);
}

uint64_t AUSpeakerProtectionV3::InterpretSpeakerCalibration(AUSpeakerProtectionV3 *this, CFTypeRef cf)
{
  const __CFArray *v4;
  const __CFArray *v5;
  unint64_t v6;
  char *v7;
  const char *v8;
  const __CFDictionary *v9;
  unint64_t v10;
  const __CFArray *v11;
  const char *v12;
  float *v13;
  char *v14;
  _BOOL4 v15;
  _BOOL4 v16;
  _BOOL4 v17;
  uint64_t v18;
  std::__shared_weak_count *v19;
  uint64_t v20;
  unint64_t *p_shared_owners;
  unint64_t v22;
  std::__shared_weak_count *size;
  unint64_t *v24;
  unint64_t v25;
  uint64_t *v26;
  unint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t *v35;
  char *v36;
  uint64_t v37;
  _QWORD *v38;
  _QWORD *v39;
  uint64_t v40;
  int64x2_t v41;
  char *v42;
  _QWORD *v43;
  _QWORD *v44;
  NSObject **v45;
  NSObject *v46;
  std::string *v47;
  std::runtime_error *v49;
  std::runtime_error *v50;
  std::runtime_error *v51;
  std::runtime_error *v52;
  std::runtime_error *v53;
  std::runtime_error *v54;
  std::runtime_error *exception;
  std::runtime_error *v56;
  std::runtime_error *v57;
  std::runtime_error *v58;
  std::runtime_error *v59;
  char *v60;
  int32x4_t v61;
  CFIndex v62;
  int64x2_t *v63;
  std::string::size_type v64;
  std::string::size_type v65;
  std::string::size_type v66;
  AUSpeakerProtectionV3 *v67;
  const __CFArray *v68;
  CFIndex Count;
  std::string v70;
  char *v71;
  char *v72;
  void *__p;
  char v74;
  uint64_t v75;
  const __CFDictionary *v76;
  uint64_t v77;
  const __CFDictionary *v78;
  const __CFArray *v79;
  std::string v80;
  _BYTE buf[18];
  __int16 v82;
  std::string *v83;
  uint64_t v84;

  v84 = *MEMORY[0x1E0C80C00];
  if (cf)
    CFRetain(cf);
  applesauce::CF::ArrayRef::ArrayRef((applesauce::CF::ArrayRef *)&v79, cf);
  v4 = v79;
  if (v79)
  {
    Count = CFArrayGetCount(v79);
    v5 = v79;
    if (v79)
      v62 = CFArrayGetCount(v79);
    else
      v62 = 0;
    if (Count)
    {
      v6 = 0;
      v63 = (int64x2_t *)((char *)this + 696);
      v60 = (char *)this + 712;
      v65 = *MEMORY[0x1E0DE4F60];
      v66 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
      v7 = "thiele_small_kms";
      v61 = vdupq_n_s32(0x7FC00000u);
      v8 = "\n";
      v64 = MEMORY[0x1E0DE4FB8] + 16;
      v67 = this;
      v68 = v5;
      while (1)
      {
        if (v4 == v5 && v6 == v62)
          goto LABEL_67;
        applesauce::CF::details::at_to<applesauce::CF::DictionaryRef>(v4, v6, (applesauce::CF::DictionaryRef *)&v78);
        v9 = v78;
        if (!v78)
        {
          v76 = 0;
          exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(exception, "Could not construct");
        }
        CFRetain(v78);
        v76 = v9;
        if (((unint64_t)applesauce::CF::DictionaryRef_proxy::at_as<unsigned int,char const*&>(v9, "thiele_small_data_source_id") & 0xFF00000000) == 0)
        {
          v51 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::string::basic_string[abi:ne180100]<0>(&v80, "thiele_small_data_source_id");
          std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>("Speaker calibration data is missing '", &v80, (std::string *)buf);
          std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>("' key", (std::string *)buf, &v70);
          std::runtime_error::runtime_error(v51, &v70);
        }
        if (!SpTS::v2::Speaker::has<float>(&v76, "thiele_small_fs"))
        {
          v52 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::string::basic_string[abi:ne180100]<0>(&v80, "thiele_small_fs");
          std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>("Speaker calibration data is missing '", &v80, (std::string *)buf);
          std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>("' key", (std::string *)buf, &v70);
          std::runtime_error::runtime_error(v52, &v70);
        }
        if (!SpTS::v2::Speaker::has<float>(&v76, "thiele_small_qts"))
        {
          v56 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::string::basic_string[abi:ne180100]<0>(&v80, "thiele_small_qts");
          std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>("Speaker calibration data is missing '", &v80, (std::string *)buf);
          std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>("' key", (std::string *)buf, &v70);
          std::runtime_error::runtime_error(v56, &v70);
        }
        if (!SpTS::v2::Speaker::has<float>(&v76, "thiele_small_re"))
        {
          v50 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::string::basic_string[abi:ne180100]<0>(&v80, "thiele_small_re");
          std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>("Speaker calibration data is missing '", &v80, (std::string *)buf);
          std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>("' key", (std::string *)buf, &v70);
          std::runtime_error::runtime_error(v50, &v70);
        }
        if (!SpTS::v2::Speaker::has<float>(&v76, "thiele_small_t"))
        {
          v54 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::string::basic_string[abi:ne180100]<0>(&v80, "thiele_small_t");
          std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>("Speaker calibration data is missing '", &v80, (std::string *)buf);
          std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>("' key", (std::string *)buf, &v70);
          std::runtime_error::runtime_error(v54, &v70);
        }
        if (!SpTS::v2::Speaker::has<float>(&v76, "thiele_small_le"))
        {
          v49 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::string::basic_string[abi:ne180100]<0>(&v80, "thiele_small_le");
          std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>("Speaker calibration data is missing '", &v80, (std::string *)buf);
          std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>("' key", (std::string *)buf, &v70);
          std::runtime_error::runtime_error(v49, &v70);
        }
        if (!SpTS::v2::Speaker::has<float>(&v76, v7))
        {
          v53 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::string::basic_string[abi:ne180100]<0>(&v80, "thiele_small_kms");
          std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>("Speaker calibration data is missing '", &v80, (std::string *)buf);
          std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>("' key", (std::string *)buf, &v70);
          std::runtime_error::runtime_error(v53, &v70);
        }
        if (!SpTS::v2::Speaker::has<float>(&v76, "thiele_small_mms"))
        {
          v57 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::string::basic_string[abi:ne180100]<0>(&v80, "thiele_small_mms");
          std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>("Speaker calibration data is missing '", &v80, (std::string *)buf);
          std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>("' key", (std::string *)buf, &v70);
          std::runtime_error::runtime_error(v57, &v70);
        }
        if (!SpTS::v2::Speaker::has<float>(&v76, "thiele_small_bi"))
        {
          v59 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::string::basic_string[abi:ne180100]<0>(&v80, "thiele_small_bi");
          std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>("Speaker calibration data is missing '", &v80, (std::string *)buf);
          std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>("' key", (std::string *)buf, &v70);
          std::runtime_error::runtime_error(v59, &v70);
        }
        if (!SpTS::v2::Speaker::has<float>(&v76, "thiele_small_rms"))
        {
          v58 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::string::basic_string[abi:ne180100]<0>(&v80, "thiele_small_rms");
          std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>("Speaker calibration data is missing '", &v80, (std::string *)buf);
          std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>("' key", (std::string *)buf, &v70);
          std::runtime_error::runtime_error(v58, &v70);
        }
        v10 = v6;
        v11 = v4;
        v12 = v8;
        v13 = (float *)operator new(0x30uLL);
        *((_QWORD *)v13 + 1) = 0;
        *((_QWORD *)v13 + 2) = 0;
        *(_QWORD *)v13 = &off_1E69DB478;
        v14 = v7;
        v13[6] = SpTS::v2::Speaker::get<float>(&v76, v7);
        v13[7] = SpTS::v2::Speaker::get<float>(&v76, "thiele_small_le");
        v13[8] = SpTS::v2::Speaker::get<float>(&v76, "thiele_small_bi");
        v13[9] = SpTS::v2::Speaker::get<float>(&v76, "thiele_small_mms");
        v13[10] = SpTS::v2::Speaker::get<float>(&v76, "thiele_small_rms");
        v70.__r_.__value_.__r.__words[0] = (std::string::size_type)(v13 + 6);
        v70.__r_.__value_.__l.__size_ = (std::string::size_type)v13;
        v15 = SpTS::v2::Speaker::has<float>(&v76, "thiele_small_crest");
        v16 = SpTS::v2::Speaker::has<float>(&v76, "thiele_small_coffset");
        v17 = SpTS::v2::Speaker::has<float>(&v76, "thiele_small_cmin");
        if (((v15 && v16) & v17 & SpTS::v2::Speaker::has<float>(&v76, "thiele_small_cmax") & 1) != 0)
        {
          v18 = operator new();
          *(int32x4_t *)v18 = v61;
          *(float *)v18 = SpTS::v2::Speaker::get<float>(&v76, "thiele_small_crest");
          *(float *)(v18 + 4) = SpTS::v2::Speaker::get<float>(&v76, "thiele_small_coffset");
          *(float *)(v18 + 8) = SpTS::v2::Speaker::get<float>(&v76, "thiele_small_cmin");
          *(float *)(v18 + 12) = SpTS::v2::Speaker::get<float>(&v76, "thiele_small_cmax");
          *(_QWORD *)buf = v18;
          v19 = (std::__shared_weak_count *)operator new();
          v19->__vftable = (std::__shared_weak_count_vtbl *)&off_1E69DB4E8;
          v19->__shared_owners_ = 0;
          v19->__shared_weak_owners_ = 0;
          v19[1].__vftable = (std::__shared_weak_count_vtbl *)v18;
        }
        else
        {
          v18 = 0;
          v19 = 0;
          *(_QWORD *)buf = 0;
        }
        *(_QWORD *)&buf[8] = v19;
        v20 = operator new();
        *(float *)v20 = SpTS::v2::Speaker::get<float>(&v76, "thiele_small_re");
        *(float *)(v20 + 4) = SpTS::v2::Speaker::get<float>(&v76, "thiele_small_t");
        *(float *)(v20 + 8) = SpTS::v2::Speaker::get<float>(&v76, "thiele_small_qts");
        *(float *)(v20 + 12) = SpTS::v2::Speaker::get<float>(&v76, "thiele_small_fs");
        *(_WORD *)(v20 + 16) = 0;
        *(_OWORD *)(v20 + 40) = 0u;
        *(_OWORD *)(v20 + 24) = 0u;
        std::shared_ptr<clsp::CLSPKernel_Logs>::operator=[abi:ne180100]((_QWORD *)(v20 + 24), (uint64_t)(v13 + 6), (uint64_t)v13);
        std::shared_ptr<clsp::CLSPKernel_Logs>::operator=[abi:ne180100]((_QWORD *)(v20 + 40), v18, (uint64_t)v19);
        v77 = v20;
        v7 = v14;
        v8 = v12;
        v4 = v11;
        v5 = v68;
        if (v19)
        {
          p_shared_owners = (unint64_t *)&v19->__shared_owners_;
          do
            v22 = __ldaxr(p_shared_owners);
          while (__stlxr(v22 - 1, p_shared_owners));
          if (!v22)
          {
            ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
            std::__shared_weak_count::__release_weak(v19);
          }
        }
        size = (std::__shared_weak_count *)v70.__r_.__value_.__l.__size_;
        if (v70.__r_.__value_.__l.__size_)
        {
          v24 = (unint64_t *)(v70.__r_.__value_.__l.__size_ + 8);
          do
            v25 = __ldaxr(v24);
          while (__stlxr(v25 - 1, v24));
          if (!v25)
          {
            ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
            std::__shared_weak_count::__release_weak(size);
          }
        }
        v26 = (uint64_t *)*((_QWORD *)v67 + 88);
        v27 = *((_QWORD *)v67 + 89);
        if ((unint64_t)v26 >= v27)
        {
          v30 = ((uint64_t)v26 - v63->i64[0]) >> 3;
          if ((unint64_t)(v30 + 1) >> 61)
            std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
          v31 = v27 - v63->i64[0];
          v32 = v31 >> 2;
          if (v31 >> 2 <= (unint64_t)(v30 + 1))
            v32 = v30 + 1;
          v33 = (char *)((unint64_t)v31 >= 0x7FFFFFFFFFFFFFF8 ? 0x1FFFFFFFFFFFFFFFLL : v32);
          v72 = v60;
          if (v33)
            v33 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<SlidingWindowDTFT<float> *>>((unint64_t)v33);
          else
            v34 = 0;
          v35 = (uint64_t *)&v33[8 * v30];
          v36 = &v33[8 * v34];
          v71 = v36;
          v37 = v77;
          v77 = 0;
          *v35 = v37;
          v29 = v35 + 1;
          v70.__r_.__value_.__r.__words[2] = (std::string::size_type)(v35 + 1);
          v38 = (_QWORD *)*((_QWORD *)v67 + 88);
          v39 = (_QWORD *)*((_QWORD *)v67 + 87);
          if (v38 == v39)
          {
            v41 = vdupq_n_s64((unint64_t)v38);
          }
          else
          {
            do
            {
              v40 = *--v38;
              *v38 = 0;
              *--v35 = v40;
            }
            while (v38 != v39);
            v41 = *v63;
            v29 = (_QWORD *)v70.__r_.__value_.__r.__words[2];
            v36 = v71;
          }
          *((_QWORD *)v67 + 87) = v35;
          *((_QWORD *)v67 + 88) = v29;
          *(int64x2_t *)&v70.__r_.__value_.__r.__words[1] = v41;
          v42 = (char *)*((_QWORD *)v67 + 89);
          *((_QWORD *)v67 + 89) = v36;
          v71 = v42;
          v70.__r_.__value_.__r.__words[0] = v41.i64[0];
          std::__split_buffer<std::unique_ptr<clsp::SpeakerCalibrationProperties>>::~__split_buffer((uint64_t)&v70);
        }
        else
        {
          v28 = v77;
          v77 = 0;
          *v26 = v28;
          v29 = v26 + 1;
        }
        *((_QWORD *)v67 + 88) = v29;
        std::unique_ptr<clsp::SpeakerCalibrationProperties>::reset[abi:ne180100](&v77);
        if (v76)
          CFRelease(v76);
        std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v70);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v70, (uint64_t)"SpeakerCalibrationProperty Ch ", 30);
        v43 = (_QWORD *)std::ostream::operator<<();
        v44 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)v8, 1);
        clsp::SpeakerCalibrationProperties::dump(*(_QWORD *)(*((_QWORD *)v67 + 88) - 8), v44);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v44, (uint64_t)v8, 1);
        v45 = (NSObject **)spp3Subsystem();
        if (!v45)
          break;
        v46 = *v45;
        if (*v45)
          goto LABEL_57;
LABEL_62:
        v70.__r_.__value_.__r.__words[0] = v65;
        *(std::string::size_type *)((char *)v70.__r_.__value_.__r.__words + *(_QWORD *)(v65 - 24)) = v66;
        v70.__r_.__value_.__l.__size_ = v64;
        if (v74 < 0)
          operator delete(__p);
        std::streambuf::~streambuf();
        std::ostream::~ostream();
        MEMORY[0x1BCC95BE4](&v75);
        if (v78)
          CFRelease(v78);
        v6 = v10 + 1;
        if (v10 + 1 == Count)
          goto LABEL_67;
      }
      v46 = MEMORY[0x1E0C81028];
LABEL_57:
      if (os_log_type_enabled(v46, OS_LOG_TYPE_DEBUG))
      {
        std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)&v70.__r_.__value_.__l.__size_, &v80);
        v47 = &v80;
        if ((v80.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          v47 = (std::string *)v80.__r_.__value_.__r.__words[0];
        *(_DWORD *)buf = 136315650;
        *(_QWORD *)&buf[4] = "AUSpeakerProtectionV3.cpp";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 3230;
        v82 = 2080;
        v83 = v47;
        _os_log_impl(&dword_1B5ED0000, v46, OS_LOG_TYPE_DEBUG, "%25s:%-5d %s", buf, 0x1Cu);
        if (SHIBYTE(v80.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v80.__r_.__value_.__l.__data_);
      }
      goto LABEL_62;
    }
LABEL_67:
    if (v79)
      CFRelease(v79);
  }
  return 0;
}

void sub_1B6415EDC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

void sub_1B6416080(uint64_t a1, int a2)
{
  if (!a2)
    JUMPOUT(0x1B6416070);
  JUMPOUT(0x1B641613CLL);
}

void sub_1B64160B0(uint64_t a1, int a2)
{
  uint64_t v2;

  if (a2)
  {
    MEMORY[0x1BCC95CEC](v2, 0x1020C4058DE0928);
    JUMPOUT(0x1B64160D0);
  }
  JUMPOUT(0x1B6416070);
}

void sub_1B64160DC(uint64_t a1, int a2)
{
  if (a2)
    JUMPOUT(0x1B64160E4);
  JUMPOUT(0x1B6416070);
}

void sub_1B6416104(uint64_t a1, int a2)
{
  std::__shared_weak_count *v2;
  void *v3;

  if (a2)
  {
    std::__shared_weak_count::~__shared_weak_count(v2);
    operator delete(v3);
    JUMPOUT(0x1B6416118);
  }
  JUMPOUT(0x1B6416070);
}

void sub_1B64161D4()
{
  JUMPOUT(0x1B6416070);
}

void sub_1B64161DC()
{
  __cxa_end_catch();
  JUMPOUT(0x1B6416070);
}

uint64_t AUSpeakerProtectionV3::InitParamsFromPlist(AUSpeakerProtectionV3 *this, CACFDictionary *a2)
{
  int v4;
  int v5;
  NSObject **v6;
  NSObject *v7;
  NSObject **v9;
  NSObject *v10;
  NSObject **v11;
  NSObject *v12;
  int SInt32;
  int v14;
  _QWORD *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  char *v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  char *v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  char *v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  char *v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  uint64_t v48;
  _QWORD *v49;
  char *v50;
  uint64_t v51;
  unint64_t v52;
  unint64_t v53;
  uint64_t v54;
  _QWORD *v55;
  char *v56;
  uint64_t v57;
  unint64_t v58;
  unint64_t v59;
  uint64_t v60;
  _QWORD *v61;
  char *v62;
  uint64_t v63;
  unint64_t v64;
  unint64_t v65;
  _QWORD *v66;
  _QWORD *v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  char *v71;
  uint64_t v72;
  unint64_t v73;
  uint64_t v74;
  _QWORD *v75;
  char *v76;
  uint64_t v77;
  uint64_t v78;
  char *v79;
  char *v80;
  char *v81;
  uint64_t v82;
  unint64_t v83;
  uint64_t v84;
  uint64_t v85;
  char *v86;
  uint64_t v87;
  unint64_t v88;
  unint64_t v89;
  uint64_t v90;
  _QWORD *v91;
  char *v92;
  uint64_t v93;
  unint64_t v94;
  unint64_t v95;
  uint64_t v96;
  _QWORD *v97;
  char *v98;
  uint64_t v99;
  unint64_t v100;
  unint64_t v101;
  uint64_t v102;
  _QWORD *v103;
  char *v104;
  uint64_t v105;
  unint64_t v106;
  unint64_t v107;
  uint64_t v108;
  _QWORD *v109;
  char *v110;
  uint64_t v111;
  unint64_t v112;
  unint64_t v113;
  uint64_t v114;
  _QWORD *v115;
  char *v116;
  uint64_t v117;
  unint64_t v118;
  unint64_t v119;
  uint64_t v120;
  _QWORD *v121;
  char *v122;
  uint64_t v123;
  unint64_t v124;
  unint64_t v125;
  uint64_t v126;
  _QWORD *v127;
  char *v128;
  uint64_t v129;
  unint64_t v130;
  unint64_t v131;
  uint64_t v132;
  _QWORD *v133;
  char *v134;
  uint64_t v135;
  unint64_t v136;
  unint64_t v137;
  uint64_t v138;
  _QWORD *v139;
  char *v140;
  uint64_t v141;
  unint64_t v142;
  unint64_t v143;
  uint64_t v144;
  _QWORD *v145;
  char *v146;
  uint64_t v147;
  unint64_t v148;
  unint64_t v149;
  uint64_t v150;
  _QWORD *v151;
  __int128 *v152;
  char *v153;
  uint64_t v154;
  unint64_t v155;
  unint64_t v156;
  _QWORD *v157;
  uint64_t v158;
  unsigned int *v159;
  uint64_t v160;
  ausdk::AUElement *v161;
  ausdk::AUElement **v162;
  unint64_t v163;
  unint64_t v164;
  uint64_t v165;
  char *v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  ausdk::AUElement *v170;
  uint64_t v171;
  char *v172;
  uint64_t v173;
  NSObject *v174;
  unint64_t v175;
  int v176;
  uint64_t v177;
  ausdk::AUElement *v178;
  uint64_t v179;
  NSObject **v180;
  NSObject *v181;
  uint64_t *v182;
  int v183;
  uint64_t v184;
  uint64_t v185;
  NSObject **v186;
  NSObject *v187;
  void **v188;
  int v189;
  unsigned int v190;
  int v191;
  char *v192;
  unsigned int v193;
  char *v194;
  uint64_t v195;
  char *v196;
  uint64_t *v197;
  int v198;
  void *__p[3];
  int v200;
  int v201;
  void *v202[2];
  char v203;
  CFMutableDictionaryRef Mutable;
  __int16 v205;
  uint8_t v206[4];
  const char *v207;
  __int16 v208;
  int v209;
  __int16 v210;
  int v211;
  __int16 v212;
  void **v213;
  uint8_t buf[18];
  __int16 v215;
  int v216;
  void *v217;
  char v218;
  _QWORD v219[22];

  v219[19] = *MEMORY[0x1E0C80C00];
  v198 = 0;
  if (!CACFDictionary::GetSInt32(*(_QWORD *)a2, CFSTR("Version"), &v198))
  {
    v6 = (NSObject **)spp3Subsystem();
    if (v6)
    {
      v7 = *v6;
      if (!*v6)
        return 4294967093;
    }
    else
    {
      v7 = MEMORY[0x1E0C81028];
    }
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      *(_QWORD *)&buf[4] = "AUSpeakerProtectionV3.cpp";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 3550;
      _os_log_impl(&dword_1B5ED0000, v7, OS_LOG_TYPE_ERROR, "%25s:%-5d Failed to get Version key.", buf, 0x12u);
    }
    return 4294967093;
  }
  if (v198 == 9)
    return AUSpeakerProtectionV3::InitParamsFromPlistV9(this, *(CFTypeRef *)a2);
  if (v198 == 8)
    return AUSpeakerProtectionV3::InitParamsFromPlistV8(this, a2);
  if (v198 != 7)
  {
    v9 = (NSObject **)spp3Subsystem();
    if (v9)
    {
      v10 = *v9;
      if (!*v9)
        return 4294967091;
    }
    else
    {
      v10 = MEMORY[0x1E0C81028];
    }
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315650;
      *(_QWORD *)&buf[4] = "AUSpeakerProtectionV3.cpp";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 3546;
      v215 = 1024;
      v216 = v198;
      _os_log_impl(&dword_1B5ED0000, v10, OS_LOG_TYPE_ERROR, "%25s:%-5d SPP plist version %d is not supported.", buf, 0x18u);
    }
    return 4294967091;
  }
  v201 = -1;
  if ((CACFDictionary::GetSInt32(*(_QWORD *)a2, CFSTR("NumChannels"), &v201) & 1) != 0)
  {
    v4 = 0;
    v5 = 0;
    *((_DWORD *)this + 158) = v201;
    goto LABEL_30;
  }
  v11 = (NSObject **)spp3Subsystem();
  if (!v11)
  {
    v12 = MEMORY[0x1E0C81028];
LABEL_27:
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      *(_QWORD *)&buf[4] = "AUSpeakerProtectionV3.cpp";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 3568;
      _os_log_impl(&dword_1B5ED0000, v12, OS_LOG_TYPE_ERROR, "%25s:%-5d Cannot get NumChannels Key", buf, 0x12u);
    }
    goto LABEL_29;
  }
  v12 = *v11;
  if (*v11)
    goto LABEL_27;
LABEL_29:
  v5 = 1;
  v4 = -203;
LABEL_30:
  v200 = 0;
  SInt32 = CACFDictionary::GetSInt32(*(_QWORD *)a2, CFSTR("ConvoyDataSourceOverride"), &v200);
  v14 = v200;
  if (!SInt32)
    v14 = 0;
  *((_DWORD *)this + 180) = v14;
  v15 = operator new(0x10uLL);
  *v15 = CFSTR("AmbientTemp");
  v15[1] = 4;
  v16 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float (ASAFeatures::*)(ASAFrontEndInputState const*)>>(2uLL);
  v18 = v17;
  v19 = &v16[16 * v17];
  *((_QWORD *)v16 + 2) = CFSTR("ThermalGainAttackTime");
  *((_QWORD *)v16 + 3) = 2;
  *(_OWORD *)v16 = *(_OWORD *)v15;
  operator delete(v15);
  if (v18 < 3)
  {
    v22 = 3;
    if ((unint64_t)((v19 - v16) >> 3) > 3)
      v22 = (v19 - v16) >> 3;
    if ((unint64_t)(v19 - v16) >= 0x7FFFFFFFFFFFFFF0)
      v23 = 0xFFFFFFFFFFFFFFFLL;
    else
      v23 = v22;
    if (v23)
      v23 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<float (ASAFeatures::*)(ASAFrontEndInputState const*)>>(v23);
    else
      v24 = 0;
    v25 = 0;
    v19 = (char *)(v23 + 16 * v24);
    *(_QWORD *)(v23 + 32) = CFSTR("ThermalGainReleaseTime");
    *(_QWORD *)(v23 + 40) = 3;
    v20 = (char *)(v23 + 48);
    do
    {
      *(_OWORD *)(v23 + 32 + v25 - 16) = *(_OWORD *)&v16[v25 + 16];
      v25 -= 16;
    }
    while (v25 != -32);
    v21 = (char *)v23;
    if (v16)
      operator delete(v16);
  }
  else
  {
    *((_QWORD *)v16 + 4) = CFSTR("ThermalGainReleaseTime");
    *((_QWORD *)v16 + 5) = 3;
    v20 = v16 + 48;
    v21 = v16;
  }
  if (v20 >= v19)
  {
    v27 = (v20 - v21) >> 4;
    v28 = v27 + 1;
    if ((unint64_t)(v27 + 1) >> 60)
      std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
    if ((v19 - v21) >> 3 > v28)
      v28 = (v19 - v21) >> 3;
    if ((unint64_t)(v19 - v21) >= 0x7FFFFFFFFFFFFFF0)
      v29 = 0xFFFFFFFFFFFFFFFLL;
    else
      v29 = v28;
    if (v29)
      v29 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<float (ASAFeatures::*)(ASAFrontEndInputState const*)>>(v29);
    else
      v30 = 0;
    v31 = (_QWORD *)(v29 + 16 * v27);
    v19 = (char *)(v29 + 16 * v30);
    *v31 = CFSTR("PeakDispAttackTime");
    v31[1] = 9;
    v26 = (char *)(v31 + 2);
    if (v20 == v21)
      goto LABEL_60;
    do
    {
      *((_OWORD *)v31 - 1) = *((_OWORD *)v20 - 1);
      v31 -= 2;
      v20 -= 16;
    }
    while (v20 != v21);
    if (v21)
LABEL_60:
      operator delete(v21);
    v21 = (char *)v31;
  }
  else
  {
    *(_QWORD *)v20 = CFSTR("PeakDispAttackTime");
    *((_QWORD *)v20 + 1) = 9;
    v26 = v20 + 16;
  }
  if (v26 >= v19)
  {
    v33 = (v26 - v21) >> 4;
    v34 = v33 + 1;
    if ((unint64_t)(v33 + 1) >> 60)
      std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
    if ((v19 - v21) >> 3 > v34)
      v34 = (v19 - v21) >> 3;
    if ((unint64_t)(v19 - v21) >= 0x7FFFFFFFFFFFFFF0)
      v35 = 0xFFFFFFFFFFFFFFFLL;
    else
      v35 = v34;
    if (v35)
      v35 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<float (ASAFeatures::*)(ASAFrontEndInputState const*)>>(v35);
    else
      v36 = 0;
    v37 = (_QWORD *)(v35 + 16 * v33);
    v19 = (char *)(v35 + 16 * v36);
    *v37 = CFSTR("PeakDispDecayTime");
    v37[1] = 10;
    v32 = (char *)(v37 + 2);
    if (v26 == v21)
      goto LABEL_76;
    do
    {
      *((_OWORD *)v37 - 1) = *((_OWORD *)v26 - 1);
      v37 -= 2;
      v26 -= 16;
    }
    while (v26 != v21);
    if (v21)
LABEL_76:
      operator delete(v21);
    v21 = (char *)v37;
  }
  else
  {
    *(_QWORD *)v26 = CFSTR("PeakDispDecayTime");
    *((_QWORD *)v26 + 1) = 10;
    v32 = v26 + 16;
  }
  if (v32 >= v19)
  {
    v39 = (v32 - v21) >> 4;
    v40 = v39 + 1;
    if ((unint64_t)(v39 + 1) >> 60)
      std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
    if ((v19 - v21) >> 3 > v40)
      v40 = (v19 - v21) >> 3;
    if ((unint64_t)(v19 - v21) >= 0x7FFFFFFFFFFFFFF0)
      v41 = 0xFFFFFFFFFFFFFFFLL;
    else
      v41 = v40;
    if (v41)
      v41 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<float (ASAFeatures::*)(ASAFrontEndInputState const*)>>(v41);
    else
      v42 = 0;
    v43 = (_QWORD *)(v41 + 16 * v39);
    v19 = (char *)(v41 + 16 * v42);
    *v43 = CFSTR("DispFBIntegrationTime");
    v43[1] = 11;
    v38 = (char *)(v43 + 2);
    if (v32 == v21)
      goto LABEL_92;
    do
    {
      *((_OWORD *)v43 - 1) = *((_OWORD *)v32 - 1);
      v43 -= 2;
      v32 -= 16;
    }
    while (v32 != v21);
    if (v21)
LABEL_92:
      operator delete(v21);
    v21 = (char *)v43;
  }
  else
  {
    *(_QWORD *)v32 = CFSTR("DispFBIntegrationTime");
    *((_QWORD *)v32 + 1) = 11;
    v38 = v32 + 16;
  }
  if (v38 >= v19)
  {
    v45 = (v38 - v21) >> 4;
    v46 = v45 + 1;
    if ((unint64_t)(v45 + 1) >> 60)
      std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
    if ((v19 - v21) >> 3 > v46)
      v46 = (v19 - v21) >> 3;
    if ((unint64_t)(v19 - v21) >= 0x7FFFFFFFFFFFFFF0)
      v47 = 0xFFFFFFFFFFFFFFFLL;
    else
      v47 = v46;
    if (v47)
      v47 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<float (ASAFeatures::*)(ASAFrontEndInputState const*)>>(v47);
    else
      v48 = 0;
    v49 = (_QWORD *)(v47 + 16 * v45);
    v19 = (char *)(v47 + 16 * v48);
    *v49 = CFSTR("LookaheadDelay_ms");
    v49[1] = 8;
    v44 = (char *)(v49 + 2);
    if (v38 == v21)
      goto LABEL_108;
    do
    {
      *((_OWORD *)v49 - 1) = *((_OWORD *)v38 - 1);
      v49 -= 2;
      v38 -= 16;
    }
    while (v38 != v21);
    if (v21)
LABEL_108:
      operator delete(v21);
    v21 = (char *)v49;
  }
  else
  {
    *(_QWORD *)v38 = CFSTR("LookaheadDelay_ms");
    *((_QWORD *)v38 + 1) = 8;
    v44 = v38 + 16;
  }
  if (v44 >= v19)
  {
    v51 = (v44 - v21) >> 4;
    v52 = v51 + 1;
    if ((unint64_t)(v51 + 1) >> 60)
      std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
    if ((v19 - v21) >> 3 > v52)
      v52 = (v19 - v21) >> 3;
    if ((unint64_t)(v19 - v21) >= 0x7FFFFFFFFFFFFFF0)
      v53 = 0xFFFFFFFFFFFFFFFLL;
    else
      v53 = v52;
    if (v53)
      v53 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<float (ASAFeatures::*)(ASAFrontEndInputState const*)>>(v53);
    else
      v54 = 0;
    v55 = (_QWORD *)(v53 + 16 * v51);
    v19 = (char *)(v53 + 16 * v54);
    *v55 = CFSTR("SafeTlim");
    v55[1] = 5;
    v50 = (char *)(v55 + 2);
    if (v44 == v21)
      goto LABEL_124;
    do
    {
      *((_OWORD *)v55 - 1) = *((_OWORD *)v44 - 1);
      v55 -= 2;
      v44 -= 16;
    }
    while (v44 != v21);
    if (v21)
LABEL_124:
      operator delete(v21);
    v21 = (char *)v55;
  }
  else
  {
    *(_QWORD *)v44 = CFSTR("SafeTlim");
    *((_QWORD *)v44 + 1) = 5;
    v50 = v44 + 16;
  }
  if (v50 >= v19)
  {
    v57 = (v50 - v21) >> 4;
    v58 = v57 + 1;
    if ((unint64_t)(v57 + 1) >> 60)
      std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
    if ((v19 - v21) >> 3 > v58)
      v58 = (v19 - v21) >> 3;
    if ((unint64_t)(v19 - v21) >= 0x7FFFFFFFFFFFFFF0)
      v59 = 0xFFFFFFFFFFFFFFFLL;
    else
      v59 = v58;
    if (v59)
      v59 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<float (ASAFeatures::*)(ASAFrontEndInputState const*)>>(v59);
    else
      v60 = 0;
    v61 = (_QWORD *)(v59 + 16 * v57);
    v19 = (char *)(v59 + 16 * v60);
    *v61 = CFSTR("SafeTlimTimeMin");
    v61[1] = 6;
    v56 = (char *)(v61 + 2);
    if (v50 == v21)
      goto LABEL_140;
    do
    {
      *((_OWORD *)v61 - 1) = *((_OWORD *)v50 - 1);
      v61 -= 2;
      v50 -= 16;
    }
    while (v50 != v21);
    if (v21)
LABEL_140:
      operator delete(v21);
    v21 = (char *)v61;
  }
  else
  {
    *(_QWORD *)v50 = CFSTR("SafeTlimTimeMin");
    *((_QWORD *)v50 + 1) = 6;
    v56 = v50 + 16;
  }
  if (v56 >= v19)
  {
    v63 = (v56 - v21) >> 4;
    v64 = v63 + 1;
    if ((unint64_t)(v63 + 1) >> 60)
      std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
    if ((v19 - v21) >> 3 > v64)
      v64 = (v19 - v21) >> 3;
    if ((unint64_t)(v19 - v21) >= 0x7FFFFFFFFFFFFFF0)
      v65 = 0xFFFFFFFFFFFFFFFLL;
    else
      v65 = v64;
    if (v65)
      v65 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<float (ASAFeatures::*)(ASAFrontEndInputState const*)>>(v65);
    v66 = (_QWORD *)(v65 + 16 * v63);
    *v66 = CFSTR("SafeTlimOffset");
    v66[1] = 7;
    v62 = (char *)(v66 + 2);
    if (v56 == v21)
      goto LABEL_155;
    do
    {
      *((_OWORD *)v66 - 1) = *((_OWORD *)v56 - 1);
      v66 -= 2;
      v56 -= 16;
    }
    while (v56 != v21);
    if (v21)
LABEL_155:
      operator delete(v21);
    v21 = (char *)v66;
  }
  else
  {
    *(_QWORD *)v56 = CFSTR("SafeTlimOffset");
    *((_QWORD *)v56 + 1) = 7;
    v62 = v56 + 16;
  }
  v67 = operator new(0x10uLL);
  *v67 = CFSTR("TemperatureLimit");
  v67[1] = 0;
  v192 = v21;
  v68 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float (ASAFeatures::*)(ASAFrontEndInputState const*)>>(2uLL);
  v70 = v69;
  *((_QWORD *)v68 + 2) = CFSTR("HardTempLimitHeadroom");
  *((_QWORD *)v68 + 3) = 1;
  *(_OWORD *)v68 = *(_OWORD *)v67;
  operator delete(v67);
  if (v70 < 3)
  {
    v72 = 3;
    if ((unint64_t)((16 * v70) >> 3) > 3)
      v72 = (16 * v70) >> 3;
    if ((unint64_t)(16 * v70) >= 0x7FFFFFFFFFFFFFF0)
      v73 = 0xFFFFFFFFFFFFFFFLL;
    else
      v73 = v72;
    if (v73)
      v73 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<float (ASAFeatures::*)(ASAFrontEndInputState const*)>>(v73);
    v74 = 0;
    *(_QWORD *)(v73 + 32) = CFSTR("ThermalFFSpeedupFactor");
    *(_QWORD *)(v73 + 40) = 6;
    v196 = (char *)(v73 + 48);
    do
    {
      *(_OWORD *)(v73 + 32 + v74 - 16) = *(_OWORD *)&v68[v74 + 16];
      v74 -= 16;
    }
    while (v74 != -32);
    v71 = (char *)v73;
    if (v68)
      operator delete(v68);
  }
  else
  {
    *((_QWORD *)v68 + 4) = CFSTR("ThermalFFSpeedupFactor");
    *((_QWORD *)v68 + 5) = 6;
    v196 = v68 + 48;
    v71 = v68;
  }
  v193 = v4;
  v75 = operator new(0x10uLL);
  v194 = v62;
  *v75 = CFSTR("Rshunt");
  v75[1] = 10;
  v76 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float (ASAFeatures::*)(ASAFrontEndInputState const*)>>(2uLL);
  v78 = v77;
  v79 = &v76[16 * v77];
  *((_QWORD *)v76 + 2) = CFSTR("Rampout");
  *((_QWORD *)v76 + 3) = 11;
  *(_OWORD *)v76 = *(_OWORD *)v75;
  operator delete(v75);
  if (v78 < 3)
  {
    v82 = 3;
    if ((unint64_t)((v79 - v76) >> 3) > 3)
      v82 = (v79 - v76) >> 3;
    if ((unint64_t)(v79 - v76) >= 0x7FFFFFFFFFFFFFF0)
      v83 = 0xFFFFFFFFFFFFFFFLL;
    else
      v83 = v82;
    if (v83)
      v83 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<float (ASAFeatures::*)(ASAFrontEndInputState const*)>>(v83);
    else
      v84 = 0;
    v85 = 0;
    v79 = (char *)(v83 + 16 * v84);
    *(_QWORD *)(v83 + 32) = CFSTR("mt");
    *(_QWORD *)(v83 + 40) = 12;
    v80 = (char *)(v83 + 48);
    do
    {
      *(_OWORD *)(v83 + 32 + v85 - 16) = *(_OWORD *)&v76[v85 + 16];
      v85 -= 16;
    }
    while (v85 != -32);
    v81 = (char *)v83;
    if (v76)
      operator delete(v76);
  }
  else
  {
    *((_QWORD *)v76 + 4) = CFSTR("mt");
    *((_QWORD *)v76 + 5) = 12;
    v80 = v76 + 48;
    v81 = v76;
  }
  if (v80 >= v79)
  {
    v87 = (v80 - v81) >> 4;
    v88 = v87 + 1;
    if ((unint64_t)(v87 + 1) >> 60)
      std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
    if ((v79 - v81) >> 3 > v88)
      v88 = (v79 - v81) >> 3;
    if ((unint64_t)(v79 - v81) >= 0x7FFFFFFFFFFFFFF0)
      v89 = 0xFFFFFFFFFFFFFFFLL;
    else
      v89 = v88;
    if (v89)
      v89 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<float (ASAFeatures::*)(ASAFrontEndInputState const*)>>(v89);
    else
      v90 = 0;
    v91 = (_QWORD *)(v89 + 16 * v87);
    v79 = (char *)(v89 + 16 * v90);
    *v91 = CFSTR("ct");
    v91[1] = 13;
    v86 = (char *)(v91 + 2);
    if (v80 == v81)
      goto LABEL_198;
    do
    {
      *((_OWORD *)v91 - 1) = *((_OWORD *)v80 - 1);
      v91 -= 2;
      v80 -= 16;
    }
    while (v80 != v81);
    if (v81)
LABEL_198:
      operator delete(v81);
    v81 = (char *)v91;
  }
  else
  {
    *(_QWORD *)v80 = CFSTR("ct");
    *((_QWORD *)v80 + 1) = 13;
    v86 = v80 + 16;
  }
  if (v86 >= v79)
  {
    v93 = (v86 - v81) >> 4;
    v94 = v93 + 1;
    if ((unint64_t)(v93 + 1) >> 60)
      std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
    if ((v79 - v81) >> 3 > v94)
      v94 = (v79 - v81) >> 3;
    if ((unint64_t)(v79 - v81) >= 0x7FFFFFFFFFFFFFF0)
      v95 = 0xFFFFFFFFFFFFFFFLL;
    else
      v95 = v94;
    if (v95)
      v95 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<float (ASAFeatures::*)(ASAFrontEndInputState const*)>>(v95);
    else
      v96 = 0;
    v97 = (_QWORD *)(v95 + 16 * v93);
    v79 = (char *)(v95 + 16 * v96);
    *v97 = CFSTR("kt");
    v97[1] = 14;
    v92 = (char *)(v97 + 2);
    if (v86 == v81)
      goto LABEL_214;
    do
    {
      *((_OWORD *)v97 - 1) = *((_OWORD *)v86 - 1);
      v97 -= 2;
      v86 -= 16;
    }
    while (v86 != v81);
    if (v81)
LABEL_214:
      operator delete(v81);
    v81 = (char *)v97;
  }
  else
  {
    *(_QWORD *)v86 = CFSTR("kt");
    *((_QWORD *)v86 + 1) = 14;
    v92 = v86 + 16;
  }
  if (v92 >= v79)
  {
    v99 = (v92 - v81) >> 4;
    v100 = v99 + 1;
    if ((unint64_t)(v99 + 1) >> 60)
      std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
    if ((v79 - v81) >> 3 > v100)
      v100 = (v79 - v81) >> 3;
    if ((unint64_t)(v79 - v81) >= 0x7FFFFFFFFFFFFFF0)
      v101 = 0xFFFFFFFFFFFFFFFLL;
    else
      v101 = v100;
    if (v101)
      v101 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<float (ASAFeatures::*)(ASAFrontEndInputState const*)>>(v101);
    else
      v102 = 0;
    v103 = (_QWORD *)(v101 + 16 * v99);
    v79 = (char *)(v101 + 16 * v102);
    *v103 = CFSTR("ag");
    v103[1] = 15;
    v98 = (char *)(v103 + 2);
    if (v92 == v81)
      goto LABEL_230;
    do
    {
      *((_OWORD *)v103 - 1) = *((_OWORD *)v92 - 1);
      v103 -= 2;
      v92 -= 16;
    }
    while (v92 != v81);
    if (v81)
LABEL_230:
      operator delete(v81);
    v81 = (char *)v103;
  }
  else
  {
    *(_QWORD *)v92 = CFSTR("ag");
    *((_QWORD *)v92 + 1) = 15;
    v98 = v92 + 16;
  }
  if (v98 >= v79)
  {
    v105 = (v98 - v81) >> 4;
    v106 = v105 + 1;
    if ((unint64_t)(v105 + 1) >> 60)
      std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
    if ((v79 - v81) >> 3 > v106)
      v106 = (v79 - v81) >> 3;
    if ((unint64_t)(v79 - v81) >= 0x7FFFFFFFFFFFFFF0)
      v107 = 0xFFFFFFFFFFFFFFFLL;
    else
      v107 = v106;
    if (v107)
      v107 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<float (ASAFeatures::*)(ASAFrontEndInputState const*)>>(v107);
    else
      v108 = 0;
    v109 = (_QWORD *)(v107 + 16 * v105);
    v79 = (char *)(v107 + 16 * v108);
    *v109 = CFSTR("g_bw");
    v109[1] = 16;
    v104 = (char *)(v109 + 2);
    if (v98 == v81)
      goto LABEL_246;
    do
    {
      *((_OWORD *)v109 - 1) = *((_OWORD *)v98 - 1);
      v109 -= 2;
      v98 -= 16;
    }
    while (v98 != v81);
    if (v81)
LABEL_246:
      operator delete(v81);
    v81 = (char *)v109;
  }
  else
  {
    *(_QWORD *)v98 = CFSTR("g_bw");
    *((_QWORD *)v98 + 1) = 16;
    v104 = v98 + 16;
  }
  if (v104 >= v79)
  {
    v111 = (v104 - v81) >> 4;
    v112 = v111 + 1;
    if ((unint64_t)(v111 + 1) >> 60)
      std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
    if ((v79 - v81) >> 3 > v112)
      v112 = (v79 - v81) >> 3;
    if ((unint64_t)(v79 - v81) >= 0x7FFFFFFFFFFFFFF0)
      v113 = 0xFFFFFFFFFFFFFFFLL;
    else
      v113 = v112;
    if (v113)
      v113 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<float (ASAFeatures::*)(ASAFrontEndInputState const*)>>(v113);
    else
      v114 = 0;
    v115 = (_QWORD *)(v113 + 16 * v111);
    v79 = (char *)(v113 + 16 * v114);
    *v115 = CFSTR("Q_d");
    v115[1] = 17;
    v110 = (char *)(v115 + 2);
    if (v104 == v81)
      goto LABEL_262;
    do
    {
      *((_OWORD *)v115 - 1) = *((_OWORD *)v104 - 1);
      v115 -= 2;
      v104 -= 16;
    }
    while (v104 != v81);
    if (v81)
LABEL_262:
      operator delete(v81);
    v81 = (char *)v115;
  }
  else
  {
    *(_QWORD *)v104 = CFSTR("Q_d");
    *((_QWORD *)v104 + 1) = 17;
    v110 = v104 + 16;
  }
  if (v110 >= v79)
  {
    v117 = (v110 - v81) >> 4;
    v118 = v117 + 1;
    if ((unint64_t)(v117 + 1) >> 60)
      std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
    if ((v79 - v81) >> 3 > v118)
      v118 = (v79 - v81) >> 3;
    if ((unint64_t)(v79 - v81) >= 0x7FFFFFFFFFFFFFF0)
      v119 = 0xFFFFFFFFFFFFFFFLL;
    else
      v119 = v118;
    if (v119)
      v119 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<float (ASAFeatures::*)(ASAFrontEndInputState const*)>>(v119);
    else
      v120 = 0;
    v121 = (_QWORD *)(v119 + 16 * v117);
    v79 = (char *)(v119 + 16 * v120);
    *v121 = CFSTR("phi");
    v121[1] = 18;
    v116 = (char *)(v121 + 2);
    if (v110 == v81)
      goto LABEL_278;
    do
    {
      *((_OWORD *)v121 - 1) = *((_OWORD *)v110 - 1);
      v121 -= 2;
      v110 -= 16;
    }
    while (v110 != v81);
    if (v81)
LABEL_278:
      operator delete(v81);
    v81 = (char *)v121;
  }
  else
  {
    *(_QWORD *)v110 = CFSTR("phi");
    *((_QWORD *)v110 + 1) = 18;
    v116 = v110 + 16;
  }
  if (v116 >= v79)
  {
    v123 = (v116 - v81) >> 4;
    v124 = v123 + 1;
    if ((unint64_t)(v123 + 1) >> 60)
      std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
    if ((v79 - v81) >> 3 > v124)
      v124 = (v79 - v81) >> 3;
    if ((unint64_t)(v79 - v81) >= 0x7FFFFFFFFFFFFFF0)
      v125 = 0xFFFFFFFFFFFFFFFLL;
    else
      v125 = v124;
    if (v125)
      v125 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<float (ASAFeatures::*)(ASAFrontEndInputState const*)>>(v125);
    else
      v126 = 0;
    v127 = (_QWORD *)(v125 + 16 * v123);
    v79 = (char *)(v125 + 16 * v126);
    *v127 = CFSTR("x_lim");
    v127[1] = 19;
    v122 = (char *)(v127 + 2);
    if (v116 == v81)
      goto LABEL_294;
    do
    {
      *((_OWORD *)v127 - 1) = *((_OWORD *)v116 - 1);
      v127 -= 2;
      v116 -= 16;
    }
    while (v116 != v81);
    if (v81)
LABEL_294:
      operator delete(v81);
    v81 = (char *)v127;
  }
  else
  {
    *(_QWORD *)v116 = CFSTR("x_lim");
    *((_QWORD *)v116 + 1) = 19;
    v122 = v116 + 16;
  }
  if (v122 >= v79)
  {
    v129 = (v122 - v81) >> 4;
    v130 = v129 + 1;
    if ((unint64_t)(v129 + 1) >> 60)
      std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
    if ((v79 - v81) >> 3 > v130)
      v130 = (v79 - v81) >> 3;
    if ((unint64_t)(v79 - v81) >= 0x7FFFFFFFFFFFFFF0)
      v131 = 0xFFFFFFFFFFFFFFFLL;
    else
      v131 = v130;
    if (v131)
      v131 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<float (ASAFeatures::*)(ASAFrontEndInputState const*)>>(v131);
    else
      v132 = 0;
    v133 = (_QWORD *)(v131 + 16 * v129);
    v79 = (char *)(v131 + 16 * v132);
    *v133 = CFSTR("Reb_ref");
    v133[1] = 9;
    v128 = (char *)(v133 + 2);
    if (v122 == v81)
      goto LABEL_310;
    do
    {
      *((_OWORD *)v133 - 1) = *((_OWORD *)v122 - 1);
      v133 -= 2;
      v122 -= 16;
    }
    while (v122 != v81);
    if (v81)
LABEL_310:
      operator delete(v81);
    v81 = (char *)v133;
  }
  else
  {
    *(_QWORD *)v122 = CFSTR("Reb_ref");
    *((_QWORD *)v122 + 1) = 9;
    v128 = v122 + 16;
  }
  if (v128 >= v79)
  {
    v135 = (v128 - v81) >> 4;
    v136 = v135 + 1;
    if ((unint64_t)(v135 + 1) >> 60)
      std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
    if ((v79 - v81) >> 3 > v136)
      v136 = (v79 - v81) >> 3;
    if ((unint64_t)(v79 - v81) >= 0x7FFFFFFFFFFFFFF0)
      v137 = 0xFFFFFFFFFFFFFFFLL;
    else
      v137 = v136;
    if (v137)
      v137 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<float (ASAFeatures::*)(ASAFrontEndInputState const*)>>(v137);
    else
      v138 = 0;
    v139 = (_QWORD *)(v137 + 16 * v135);
    v79 = (char *)(v137 + 16 * v138);
    *v139 = CFSTR("T_sett_vc");
    v139[1] = 2;
    v134 = (char *)(v139 + 2);
    if (v128 == v81)
      goto LABEL_326;
    do
    {
      *((_OWORD *)v139 - 1) = *((_OWORD *)v128 - 1);
      v139 -= 2;
      v128 -= 16;
    }
    while (v128 != v81);
    if (v81)
LABEL_326:
      operator delete(v81);
    v81 = (char *)v139;
  }
  else
  {
    *(_QWORD *)v128 = CFSTR("T_sett_vc");
    *((_QWORD *)v128 + 1) = 2;
    v134 = v128 + 16;
  }
  if (v134 >= v79)
  {
    v141 = (v134 - v81) >> 4;
    v142 = v141 + 1;
    if ((unint64_t)(v141 + 1) >> 60)
      std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
    if ((v79 - v81) >> 3 > v142)
      v142 = (v79 - v81) >> 3;
    if ((unint64_t)(v79 - v81) >= 0x7FFFFFFFFFFFFFF0)
      v143 = 0xFFFFFFFFFFFFFFFLL;
    else
      v143 = v142;
    if (v143)
      v143 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<float (ASAFeatures::*)(ASAFrontEndInputState const*)>>(v143);
    else
      v144 = 0;
    v145 = (_QWORD *)(v143 + 16 * v141);
    v79 = (char *)(v143 + 16 * v144);
    *v145 = CFSTR("T_sett_mg");
    v145[1] = 3;
    v140 = (char *)(v145 + 2);
    if (v134 == v81)
      goto LABEL_342;
    do
    {
      *((_OWORD *)v145 - 1) = *((_OWORD *)v134 - 1);
      v145 -= 2;
      v134 -= 16;
    }
    while (v134 != v81);
    if (v81)
LABEL_342:
      operator delete(v81);
    v81 = (char *)v145;
  }
  else
  {
    *(_QWORD *)v134 = CFSTR("T_sett_mg");
    *((_QWORD *)v134 + 1) = 3;
    v140 = v134 + 16;
  }
  if (v140 >= v79)
  {
    v147 = (v140 - v81) >> 4;
    v148 = v147 + 1;
    if ((unint64_t)(v147 + 1) >> 60)
      std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
    if ((v79 - v81) >> 3 > v148)
      v148 = (v79 - v81) >> 3;
    if ((unint64_t)(v79 - v81) >= 0x7FFFFFFFFFFFFFF0)
      v149 = 0xFFFFFFFFFFFFFFFLL;
    else
      v149 = v148;
    if (v149)
      v149 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<float (ASAFeatures::*)(ASAFrontEndInputState const*)>>(v149);
    else
      v150 = 0;
    v151 = (_QWORD *)(v149 + 16 * v147);
    v79 = (char *)(v149 + 16 * v150);
    *v151 = CFSTR("tau_Tvc");
    v151[1] = 4;
    v146 = (char *)(v151 + 2);
    if (v140 == v81)
      goto LABEL_358;
    do
    {
      *((_OWORD *)v151 - 1) = *((_OWORD *)v140 - 1);
      v151 -= 2;
      v140 -= 16;
    }
    while (v140 != v81);
    if (v81)
LABEL_358:
      operator delete(v81);
    v81 = (char *)v151;
  }
  else
  {
    *(_QWORD *)v140 = CFSTR("tau_Tvc");
    *((_QWORD *)v140 + 1) = 4;
    v146 = v140 + 16;
  }
  if (v146 >= v79)
  {
    v154 = (v146 - v81) >> 4;
    v155 = v154 + 1;
    if ((unint64_t)(v154 + 1) >> 60)
      std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
    if ((v79 - v81) >> 3 > v155)
      v155 = (v79 - v81) >> 3;
    if ((unint64_t)(v79 - v81) >= 0x7FFFFFFFFFFFFFF0)
      v156 = 0xFFFFFFFFFFFFFFFLL;
    else
      v156 = v155;
    if (v156)
      v156 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<float (ASAFeatures::*)(ASAFrontEndInputState const*)>>(v156);
    v153 = v194;
    v157 = (_QWORD *)(v156 + 16 * v154);
    *v157 = CFSTR("tau_Tmg");
    v157[1] = 5;
    v152 = (__int128 *)(v157 + 2);
    if (v146 == v81)
      goto LABEL_373;
    do
    {
      *((_OWORD *)v157 - 1) = *((_OWORD *)v146 - 1);
      v157 -= 2;
      v146 -= 16;
    }
    while (v146 != v81);
    if (v81)
LABEL_373:
      operator delete(v81);
    v81 = (char *)v157;
  }
  else
  {
    *(_QWORD *)v146 = CFSTR("tau_Tmg");
    *((_QWORD *)v146 + 1) = 5;
    v152 = (__int128 *)(v146 + 16);
    v153 = v194;
  }
  if (v153 != v21)
  {
    if ((unint64_t)((v153 - v21) >> 4) <= 1)
      v158 = 1;
    else
      v158 = (v153 - v21) >> 4;
    v159 = (unsigned int *)(v21 + 8);
    do
    {
      v160 = *((_QWORD *)this + 9);
      if (v160)
      {
        v161 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v160 + 32))(v160, 0);
      }
      else
      {
        v162 = (ausdk::AUElement **)*((_QWORD *)this + 6);
        if (*((ausdk::AUElement ***)this + 7) == v162)
          v161 = 0;
        else
          v161 = *v162;
      }
      v5 += AUSpeakerProtectionV3::SetParamFromPair((uint64_t)this, v161, *((__CFString **)v159 - 1), *v159, *(CACFDictionary **)a2);
      v159 += 4;
      --v158;
    }
    while (v158);
  }
  v163 = *((unsigned int *)this + 158);
  if ((_DWORD)v163)
  {
    v164 = 0;
    if ((unint64_t)((v196 - v71) >> 4) <= 1)
      v165 = 1;
    else
      v165 = (v196 - v71) >> 4;
    v166 = v196;
    do
    {
      if (v166 == v71)
      {
        v166 = v71;
      }
      else
      {
        v167 = 0;
        v168 = v165;
        do
        {
          v169 = *((_QWORD *)this + 104);
          if (v169)
          {
            v170 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)v169 + 32))(v169, v164);
          }
          else
          {
            v171 = *((_QWORD *)this + 101);
            if (v164 >= (*((_QWORD *)this + 102) - v171) >> 3)
              v170 = 0;
            else
              v170 = *(ausdk::AUElement **)(v171 + 8 * v164);
          }
          v5 += AUSpeakerProtectionV3::SetParamFromPair((uint64_t)this, v170, *(__CFString **)&v71[v167], *(_DWORD *)&v71[v167 + 8], *(CACFDictionary **)a2);
          v167 += 16;
          --v168;
        }
        while (v168);
        v163 = *((unsigned int *)this + 158);
        v166 = v196;
      }
      ++v164;
    }
    while (v164 < v163);
  }
  memset(__p, 0, sizeof(__p));
  std::vector<std::pair<__CFString const*,AUSPV3PartParams>>::__init_with_size[abi:ne180100]<std::pair<__CFString const*,AUSPV3PartParams>*,std::pair<__CFString const*,AUSPV3PartParams>*>(__p, (__int128 *)v81, v152, ((char *)v152 - v81) >> 4);
  v172 = v192;
  v191 = AUSpeakerProtectionV3::SetChannelParamsFromPlist((uint64_t)this, (uint64_t *)__p, (const __CFDictionary **)a2);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  v173 = spp3Subsystem();
  if (v173)
  {
    if ((*(_BYTE *)(v173 + 8) & 1) != 0)
    {
      v174 = *(NSObject **)v173;
      if (*(_QWORD *)v173)
      {
        if (os_log_type_enabled(*(os_log_t *)v173, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)buf = 136315394;
          *(_QWORD *)&buf[4] = "AUSpeakerProtectionV3.cpp";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = 3409;
          _os_log_impl(&dword_1B5ED0000, v174, OS_LOG_TYPE_DEBUG, "%25s:%-5d InitCLParamsFromPlistV7", buf, 0x12u);
        }
      }
    }
  }
  Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  v205 = 257;
  CACFDictionary::GetCACFDictionary((const __CFDictionary **)a2, CFSTR("CLParams"), (CACFDictionary *)&Mutable);
  if (!Mutable)
  {
    v180 = (NSObject **)spp3Subsystem();
    if (v180)
    {
      v181 = *v180;
      if (!*v180)
        goto LABEL_442;
    }
    else
    {
      v181 = MEMORY[0x1E0C81028];
    }
    if (os_log_type_enabled(v181, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136315394;
      *(_QWORD *)&buf[4] = "AUSpeakerProtectionV3.cpp";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 3416;
      _os_log_impl(&dword_1B5ED0000, v181, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Cannot get CLParams Key", buf, 0x12u);
    }
    goto LABEL_442;
  }
  if (*((_DWORD *)this + 158))
  {
    v175 = 0;
    v176 = 0;
    do
    {
      v177 = *((_QWORD *)this + 104);
      if (v177)
      {
        v178 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)v177 + 32))(v177, v175);
      }
      else
      {
        v179 = *((_QWORD *)this + 101);
        if (v175 >= (*((_QWORD *)this + 102) - v179) >> 3)
          v178 = 0;
        else
          v178 = *(ausdk::AUElement **)(v179 + 8 * v175);
      }
      v176 += AUSpeakerProtectionV3::InitCLParamsFromPlist(this, v178, &Mutable);
      ++v175;
    }
    while (v175 < *((unsigned int *)this + 158));
  }
  else
  {
    v176 = 0;
  }
  if (AUSpeakerProtectionV3::SetCLChannelParamsFromPlist(this, &Mutable) + v176)
  {
LABEL_442:
    CACFDictionary::~CACFDictionary((CACFDictionary *)&Mutable);
    v189 = *((_DWORD *)this + 158);
    if (v189)
    {
      v190 = 0;
      do
        AUSpeakerProtectionV3::SetClosedLoopEnabled(this, v190++, 0);
      while (v190 < *((_DWORD *)this + 158));
      LOBYTE(v189) = 0;
    }
    goto LABEL_446;
  }
  v182 = (uint64_t *)*((_QWORD *)this + 84);
  v197 = (uint64_t *)*((_QWORD *)this + 85);
  if (v182 != v197)
  {
    v183 = 0;
    v184 = *MEMORY[0x1E0DE4F60];
    v195 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
    v185 = MEMORY[0x1E0DE4FB8] + 16;
    while (1)
    {
      std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)buf);
      clsp::ClosedLoopParameters::dump(*v182, buf);
      v186 = (NSObject **)spp3Subsystem();
      if (!v186)
        break;
      v187 = *v186;
      if (*v186)
        goto LABEL_430;
LABEL_435:
      *(_QWORD *)buf = v184;
      *(_QWORD *)&buf[*(_QWORD *)(v184 - 24)] = v195;
      *(_QWORD *)&buf[8] = v185;
      if (v218 < 0)
        operator delete(v217);
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      MEMORY[0x1BCC95BE4](v219);
      ++v182;
      ++v183;
      if (v182 == v197)
        goto LABEL_438;
    }
    v187 = MEMORY[0x1E0C81028];
LABEL_430:
    if (os_log_type_enabled(v187, OS_LOG_TYPE_DEBUG))
    {
      std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)&buf[8], v202);
      v188 = v202;
      if (v203 < 0)
        v188 = (void **)v202[0];
      *(_DWORD *)v206 = 136315906;
      v207 = "AUSpeakerProtectionV3.cpp";
      v208 = 1024;
      v209 = 3432;
      v210 = 1024;
      v211 = v183;
      v212 = 2080;
      v213 = v188;
      _os_log_impl(&dword_1B5ED0000, v187, OS_LOG_TYPE_DEBUG, "%25s:%-5d Ch %d, CLParams:\n%s", v206, 0x22u);
      if (v203 < 0)
        operator delete(v202[0]);
    }
    goto LABEL_435;
  }
LABEL_438:
  CACFDictionary::~CACFDictionary((CACFDictionary *)&Mutable);
  LOBYTE(v189) = 1;
  v172 = v192;
LABEL_446:
  *((_BYTE *)this + 529) = v189;
  if (v5 + v191)
  {
    v193 = -50;
    if (!v81)
      goto LABEL_449;
    goto LABEL_448;
  }
  *((_BYTE *)this + 528) = 1;
  ausdk::AUScope::SetNumberOfElements((int64x2_t *)((char *)this + 792), *((_DWORD *)this + 158));
  if (v81)
LABEL_448:
    operator delete(v81);
LABEL_449:
  if (v71)
    operator delete(v71);
  if (v172)
    operator delete(v172);
  return v193;
}

void sub_1B6417B2C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35)
{
  void *v35;
  void *v36;

  CACFDictionary::~CACFDictionary((CACFDictionary *)&a26);
  if (v36)
  {
    operator delete(v36);
    if (!v35)
      goto LABEL_6;
  }
  else if (!v35)
  {
    goto LABEL_6;
  }
  operator delete(v35);
LABEL_6:
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void AUSpeakerProtectionV3::SetClosedLoopEnabled(AUSpeakerProtectionV3 *this, unsigned int a2, int a3)
{
  uint64_t v4;
  ausdk::AUElement *v5;
  uint64_t v6;
  float v7;
  NSObject **v8;
  NSObject *v9;
  const char *v10;
  int v11;
  const char *v12;
  __int16 v13;
  int v14;
  __int16 v15;
  const char *v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  *((_BYTE *)this + 533) = a3;
  v4 = *((_QWORD *)this + 104);
  if (v4)
  {
    v5 = (ausdk::AUElement *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)v4 + 32))(*((_QWORD *)this + 104));
    if (!v5)
      goto LABEL_18;
  }
  else
  {
    v6 = *((_QWORD *)this + 101);
    if (a2 >= (unint64_t)((*((_QWORD *)this + 102) - v6) >> 3)
      || (v5 = *(ausdk::AUElement **)(v6 + 8 * a2)) == 0)
    {
LABEL_18:
      __assert_rtn("SetClosedLoopEnabled", "AUSpeakerProtectionV3.cpp", 1150, "part");
    }
  }
  if (a3)
    v7 = 1.0;
  else
    v7 = 0.0;
  ausdk::AUElement::SetParameter(v5, 0x16u, v7, 0);
  ausdk::AUElement::SetParameter(v5, 0x15u, v7, 0);
  v8 = (NSObject **)spp3Subsystem();
  if (v8)
  {
    v9 = *v8;
    if (!*v8)
      return;
  }
  else
  {
    v9 = MEMORY[0x1E0C81028];
  }
  if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
  {
    v10 = "false";
    v12 = "AUSpeakerProtectionV3.cpp";
    v11 = 136315650;
    if (a3)
      v10 = "true";
    v13 = 1024;
    v14 = 1153;
    v15 = 2080;
    v16 = v10;
    _os_log_impl(&dword_1B5ED0000, v9, OS_LOG_TYPE_INFO, "%25s:%-5d Enable CL -> CLThermalEnabled, PilotToneEnabled: %s", (uint8_t *)&v11, 0x1Cu);
  }
}

char *std::vector<clsp::telemetry::Item>::__init_with_size[abi:ne180100]<unsigned int const*,unsigned int const*>(_QWORD *a1, int *a2, int *a3, unint64_t a4)
{
  char *result;
  uint64_t *v8;
  int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;

  result = std::vector<std::pair<unsigned int,float>>::__vallocate[abi:ne180100](a1, a4);
  if (a2 == a3)
  {
    v8 = (uint64_t *)a1[1];
  }
  else
  {
    v8 = (uint64_t *)a1[1];
    do
    {
      v9 = *a2;
      switch(*a2)
      {
        case 1934640176:
          v12 = 0;
          goto LABEL_28;
        case 1934640177:
          v12 = 0x100000000;
          goto LABEL_28;
        case 1934640178:
          v12 = 0x200000000;
          goto LABEL_28;
        case 1934640179:
          v12 = 0x300000000;
          goto LABEL_28;
        case 1934640180:
          v12 = 0x400000000;
          goto LABEL_28;
        case 1934640181:
          v12 = 0x500000000;
          goto LABEL_28;
        case 1934640182:
          v12 = 0x600000000;
          goto LABEL_28;
        case 1934640183:
          v12 = 0x700000000;
LABEL_28:
          v11 = 2;
          break;
        default:
          switch(v9)
          {
            case 1936738608:
              v12 = 0;
              goto LABEL_30;
            case 1936738609:
              v12 = 0x100000000;
              goto LABEL_30;
            case 1936738610:
              v12 = 0x200000000;
              goto LABEL_30;
            case 1936738611:
              v12 = 0x300000000;
              goto LABEL_30;
            case 1936738612:
              v12 = 0x400000000;
              goto LABEL_30;
            case 1936738613:
              v12 = 0x500000000;
              goto LABEL_30;
            case 1936738614:
              v12 = 0x600000000;
              goto LABEL_30;
            case 1936738615:
              v12 = 0x700000000;
LABEL_30:
              v11 = 1;
              break;
            default:
              v10 = v9 - 1936741936;
              v11 = 0;
              v12 = 0;
              switch(v10)
              {
                case 0:
                  goto LABEL_31;
                case 1:
                  v11 = 0;
                  v12 = 0x100000000;
                  break;
                case 2:
                  v11 = 0;
                  v12 = 0x200000000;
                  break;
                case 3:
                  v11 = 0;
                  v12 = 0x300000000;
                  break;
                case 4:
                  v11 = 0;
                  v12 = 0x400000000;
                  break;
                case 5:
                  v11 = 0;
                  v12 = 0x500000000;
                  break;
                case 6:
                  v11 = 0;
                  v12 = 0x600000000;
                  break;
                case 7:
                  v11 = 0;
                  v12 = 0x700000000;
                  break;
                default:
                  __cxa_rethrow();
              }
              return result;
          }
          return result;
      }
LABEL_31:
      *v8++ = v12 | v11;
      ++a2;
    }
    while (a2 != a3);
  }
  a1[1] = v8;
  return result;
}

void sub_1B6417FD0(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  uint64_t v2;
  void *v4;

  *(_QWORD *)(v1 + 8) = v2;
  v4 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

__n128 std::__optional_storage_base<std::vector<clsp::telemetry::Item>,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::vector<clsp::telemetry::Item>,false>>(uint64_t a1, __n128 *a2)
{
  void *v4;
  __n128 result;
  void *v6;

  if (*(unsigned __int8 *)(a1 + 24) == a2[1].n128_u8[8])
  {
    if (*(_BYTE *)(a1 + 24))
    {
      v4 = *(void **)a1;
      if (*(_QWORD *)a1)
      {
        *(_QWORD *)(a1 + 8) = v4;
        operator delete(v4);
        *(_QWORD *)a1 = 0;
        *(_QWORD *)(a1 + 8) = 0;
        *(_QWORD *)(a1 + 16) = 0;
      }
      result = *a2;
      *(__n128 *)a1 = *a2;
      *(_QWORD *)(a1 + 16) = a2[1].n128_u64[0];
      a2->n128_u64[0] = 0;
      a2->n128_u64[1] = 0;
      a2[1].n128_u64[0] = 0;
    }
  }
  else if (*(_BYTE *)(a1 + 24))
  {
    v6 = *(void **)a1;
    if (*(_QWORD *)a1)
    {
      *(_QWORD *)(a1 + 8) = v6;
      operator delete(v6);
    }
    *(_BYTE *)(a1 + 24) = 0;
  }
  else
  {
    *(_QWORD *)a1 = 0;
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    result = *a2;
    *(__n128 *)a1 = *a2;
    *(_QWORD *)(a1 + 16) = a2[1].n128_u64[0];
    a2->n128_u64[0] = 0;
    a2->n128_u64[1] = 0;
    a2[1].n128_u64[0] = 0;
    *(_BYTE *)(a1 + 24) = 1;
  }
  return result;
}

void clsp::telemetry::utils::PrintTelemetryVector_impl<std::__wrap_iter<clsp::telemetry::Item const*>,std::__wrap_iter<clsp::telemetry::Item const*>>(std::string *a1, uint64_t a2, _QWORD *a3)
{
  _DWORD *v5;
  std::string *v7;
  __int128 v8;
  std::string *p_p;
  std::string::size_type size;
  std::string *v11;
  _DWORD *v12;
  std::string __p;
  std::string v14;
  std::string v15;

  v5 = *(_DWORD **)a2;
  if (v5 == (_DWORD *)(*a3 - 8))
  {
    clsp::telemetry::Item::operator std::string((uint64_t)a1, (_DWORD *)(*a3 - 8));
  }
  else
  {
    clsp::telemetry::Item::operator std::string((uint64_t)&v14, v5);
    v7 = std::string::append(&v14, ", ", 2uLL);
    v8 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
    v15.__r_.__value_.__r.__words[2] = v7->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v15.__r_.__value_.__l.__data_ = v8;
    v7->__r_.__value_.__l.__size_ = 0;
    v7->__r_.__value_.__r.__words[2] = 0;
    v7->__r_.__value_.__r.__words[0] = 0;
    v12 = (_DWORD *)(*(_QWORD *)a2 + 8);
    clsp::telemetry::utils::PrintTelemetryVector_impl<std::__wrap_iter<clsp::telemetry::Item const*>,std::__wrap_iter<clsp::telemetry::Item const*>&>(&__p, &v12, a3);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      p_p = &__p;
    else
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    else
      size = __p.__r_.__value_.__l.__size_;
    v11 = std::string::append(&v15, (const std::string::value_type *)p_p, size);
    *a1 = *v11;
    v11->__r_.__value_.__l.__size_ = 0;
    v11->__r_.__value_.__r.__words[2] = 0;
    v11->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v15.__r_.__value_.__l.__data_);
    if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v14.__r_.__value_.__l.__data_);
  }
}

void sub_1B64181C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a16 < 0)
    operator delete(__p);
  if (a28 < 0)
    operator delete(a23);
  if (a22 < 0)
    operator delete(a17);
  _Unwind_Resume(exception_object);
}

void *std::vector<BOOL>::__init_with_size[abi:ne180100]<unsigned int const*,unsigned int const*>(_QWORD *a1, _DWORD *a2, _DWORD *a3, uint64_t a4)
{
  void *result;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  int v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;

  result = std::vector<BOOL>::__vallocate[abi:ne180100](a1, a4);
  v9 = a1[1];
  v10 = v9 + a4;
  a1[1] = v9 + a4;
  if (v9)
  {
    v11 = v10 - 1;
    if (((v10 - 1) ^ (v9 - 1)) < 0x40)
      goto LABEL_9;
  }
  else
  {
    v11 = v10 - 1;
  }
  v12 = v11 >> 6;
  if (v10 >= 0x41)
    v13 = v12;
  else
    v13 = 0;
  *(_QWORD *)(*a1 + 8 * v13) = 0;
LABEL_9:
  if (a2 != a3)
  {
    v14 = v9 & 0x3F;
    v15 = (uint64_t *)(*a1 + 8 * (v9 >> 6));
    do
    {
      v16 = 1 << v14;
      if (*a2)
        v17 = *v15 | v16;
      else
        v17 = *v15 & ~v16;
      *v15 = v17;
      ++a2;
      v15 += v14 == 63;
      if (v14 == 63)
        v14 = 0;
      else
        ++v14;
    }
    while (a2 != a3);
  }
  return result;
}

void sub_1B64182E4(_Unwind_Exception *exception_object)
{
  void **v1;

  if (*v1)
    operator delete(*v1);
  _Unwind_Resume(exception_object);
}

void std::__optional_storage_base<std::vector<BOOL>,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::vector<BOOL>,false>>(uint64_t a1, uint64_t a2)
{
  void *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;

  if (*(unsigned __int8 *)(a1 + 24) == *(unsigned __int8 *)(a2 + 24))
  {
    if (*(_BYTE *)(a1 + 24))
    {
      v4 = *(void **)a1;
      if (*(_QWORD *)a1)
      {
        operator delete(v4);
        *(_QWORD *)a1 = 0;
        *(_QWORD *)(a1 + 8) = 0;
        *(_QWORD *)(a1 + 16) = 0;
      }
      v5 = *(_QWORD *)(a2 + 8);
      *(_QWORD *)a1 = *(_QWORD *)a2;
      *(_QWORD *)(a1 + 8) = v5;
      *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
      *(_QWORD *)a2 = 0;
      *(_QWORD *)(a2 + 8) = 0;
      *(_QWORD *)(a2 + 16) = 0;
    }
  }
  else if (*(_BYTE *)(a1 + 24))
  {
    v6 = *(void **)a1;
    if (*(_QWORD *)a1)
      operator delete(v6);
    *(_BYTE *)(a1 + 24) = 0;
  }
  else
  {
    v7 = *(_QWORD *)(a2 + 8);
    *(_QWORD *)a1 = *(_QWORD *)a2;
    *(_QWORD *)(a1 + 8) = v7;
    *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
    *(_QWORD *)(a2 + 16) = 0;
    *(_BYTE *)(a1 + 24) = 1;
  }
}

void clsp::telemetry::utils::PrintBoolVector(_QWORD *a1, uint64_t a2, unint64_t a3)
{
  _QWORD v3[2];
  _QWORD v4[2];

  v4[0] = a2;
  v4[1] = 0;
  v3[0] = a2 + 8 * (a3 >> 6);
  v3[1] = a3 & 0x3F;
  clsp::telemetry::utils::PrintBoolVector_impl<std::__bit_iterator<std::vector<BOOL>,true,0ul>,std::__bit_iterator<std::vector<BOOL>,true,0ul>>(a1, (uint64_t)v4, v3);
}

void AUSpeakerProtectionV3::SetPowerBudgetProperty(uint64_t a1, const __CFDictionary **a2)
{
  uint64_t v2;
  uint64_t v5;
  char v6;
  unsigned int v7;
  const __CFDictionary *v8;
  float v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unsigned int v13;
  NSObject **v14;
  NSObject *v15;
  const __CFString *v16;
  void **v17;
  double v18;
  _QWORD *v19;
  std::runtime_error *exception;
  std::runtime_error *v21;
  const __CFString *v22;
  void *__p[2];
  char v24;
  _BYTE cf[12];
  __int16 v26;
  int v27;
  __int16 v28;
  void **v29;
  __int16 v30;
  double v31;
  uint64_t v32;

  v32 = *MEMORY[0x1E0C80C00];
  v2 = *(_QWORD *)(a1 + 992);
  if (*(_QWORD *)(a1 + 1000) != v2)
  {
    v5 = 0;
    v6 = 0;
    v7 = 0;
    do
    {
      while (1)
      {
        if (!*a2)
        {
          exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          applesauce::CF::construct_error(exception);
        }
        cpms::TimeScale<float>::getKey(cf, *(CFTypeRef *)(v2 + 32 * v5));
        v8 = applesauce::CF::DictionaryRef_proxy::at_as<float,applesauce::CF::StringRef>(*a2, (const void **)cf);
        if (*(_QWORD *)cf)
          CFRelease(*(CFTypeRef *)cf);
        if (((unint64_t)v8 & 0xFF00000000) == 0)
          break;
        v9 = *(float *)&v8 / *(float *)(a1 + 960);
        v10 = *(_QWORD *)(a1 + 968);
        if (*(float *)(v10 + 4 * v5) == v9)
          break;
        *(float *)(v10 + 4 * v5) = v9;
        v11 = *(_QWORD *)(a1 + 1000);
        v2 = *(_QWORD *)(a1 + 992);
        v6 = 1;
        v5 = ++v7;
        if (v7 >= (unint64_t)((v11 - v2) >> 5))
          goto LABEL_13;
      }
      v11 = *(_QWORD *)(a1 + 1000);
      v2 = *(_QWORD *)(a1 + 992);
      v5 = ++v7;
    }
    while (v7 < (unint64_t)((v11 - v2) >> 5));
    if ((v6 & 1) != 0)
    {
LABEL_13:
      if (v11 != v2)
      {
        v12 = 0;
        v13 = 1;
        while (1)
        {
          v14 = (NSObject **)spp3Subsystem();
          if (!v14)
            break;
          v15 = *v14;
          if (*v14)
            goto LABEL_19;
LABEL_26:
          v12 = v13++;
          if (v12 >= (uint64_t)(*(_QWORD *)(a1 + 1000) - *(_QWORD *)(a1 + 992)) >> 5)
            goto LABEL_27;
        }
        v15 = MEMORY[0x1E0C81028];
LABEL_19:
        if (os_log_type_enabled(v15, OS_LOG_TYPE_DEBUG))
        {
          cpms::TimeScale<float>::getKey(&v22, *(CFTypeRef *)(*(_QWORD *)(a1 + 992) + 32 * v12));
          v16 = v22;
          if (!v22)
          {
            v21 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
            std::runtime_error::runtime_error(v21, "Could not construct");
          }
          applesauce::CF::convert_to<std::string,0>(v22, (uint64_t)__p);
          v17 = __p;
          if (v24 < 0)
            v17 = (void **)__p[0];
          v18 = *(float *)(*(_QWORD *)(a1 + 968) + 4 * v12);
          *(_DWORD *)cf = 136315906;
          *(_QWORD *)&cf[4] = "AUSpeakerProtectionV3.cpp";
          v26 = 1024;
          v27 = 2845;
          v28 = 2080;
          v29 = v17;
          v30 = 2048;
          v31 = v18;
          _os_log_impl(&dword_1B5ED0000, v15, OS_LOG_TYPE_DEBUG, "%25s:%-5d CPMS power budget '%s' is %f", cf, 0x26u);
          if (v24 < 0)
            operator delete(__p[0]);
          CFRelease(v16);
        }
        goto LABEL_26;
      }
LABEL_27:
      v19 = *(_QWORD **)(a1 + 888);
      if (v19)
        cpms::controllers::Power<float,cpms::smoothers::Exponential,clsp::AttackRelease>::SetPowerBudgets(v19, *(_QWORD *)(a1 + 968), (*(_QWORD *)(a1 + 976) - *(_QWORD *)(a1 + 968)) >> 2);
    }
  }
}

void sub_1B64186B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  applesauce::CF::StringRef::~StringRef((const void **)va);
  _Unwind_Resume(a1);
}

char *std::vector<long long>::__assign_with_size[abi:ne180100]<long long const*,long long const*>(char *result, char *__src, uint64_t a3, unint64_t a4)
{
  _QWORD *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  unint64_t v11;
  void **v12;
  char *v13;
  _BYTE *v14;
  unint64_t v15;
  char *v16;
  size_t v17;
  void *v18;
  char *v19;

  v7 = result;
  v8 = *((_QWORD *)result + 2);
  v9 = *(char **)result;
  if (a4 > (v8 - *(_QWORD *)result) >> 3)
  {
    if (v9)
    {
      *((_QWORD *)result + 1) = v9;
      operator delete(v9);
      v8 = 0;
      *v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    v10 = v8 >> 2;
    if (v8 >> 2 <= a4)
      v10 = a4;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v11 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v11 = v10;
    result = std::vector<std::tuple<unsigned int,float>>::__vallocate[abi:ne180100](v7, v11);
    v13 = (char *)v7[1];
    v12 = (void **)(v7 + 1);
    v9 = v13;
LABEL_15:
    v17 = a3 - (_QWORD)__src;
    if (v17)
    {
      v18 = v9;
      v19 = __src;
      goto LABEL_17;
    }
    goto LABEL_18;
  }
  v12 = (void **)(result + 8);
  v14 = (_BYTE *)*((_QWORD *)result + 1);
  v15 = (v14 - v9) >> 3;
  if (v15 >= a4)
    goto LABEL_15;
  v16 = &__src[8 * v15];
  if (v14 != v9)
  {
    result = (char *)memmove(*(void **)result, __src, v14 - v9);
    v9 = (char *)*v12;
  }
  v17 = a3 - (_QWORD)v16;
  if (v17)
  {
    v18 = v9;
    v19 = v16;
LABEL_17:
    result = (char *)memmove(v18, v19, v17);
  }
LABEL_18:
  *v12 = &v9[v17];
  return result;
}

_QWORD *cpms::TimeScale<float>::getKey(_QWORD *result, CFTypeRef cf)
{
  _QWORD *v3;

  v3 = result;
  if (cf)
    result = CFRetain(cf);
  *v3 = cf;
  return result;
}

const __CFDictionary *applesauce::CF::DictionaryRef_proxy::at_as<float,applesauce::CF::StringRef>(const __CFDictionary *a1, const void **a2)
{
  const __CFDictionary *result;

  result = applesauce::CF::details::at_key<applesauce::CF::StringRef>(a1, a2);
  if (result)
    return (const __CFDictionary *)applesauce::CF::convert_as<float,0>(result);
  return result;
}

_QWORD *cpms::controllers::Power<float,cpms::smoothers::Exponential,clsp::AttackRelease>::SetPowerBudgets(_QWORD *result, uint64_t a2, unsigned int a3)
{
  unint64_t v3;
  unint64_t v4;
  unsigned int v5;

  v3 = result[4];
  if (v3)
  {
    v4 = 0;
    v5 = 1;
    do
    {
      if (v5 - 1 < a3)
      {
        if (result[23] <= v4)
          __assert_rtn("operator[]", "vector.hpp", 1655, "this->m_holder.m_size > n");
        *(_DWORD *)(result[22] + 4 * v4) = *(_DWORD *)(a2 + 4 * v4);
      }
      v4 = v5;
    }
    while (v3 > v5++);
  }
  return result;
}

void clsp::telemetry::utils::PrintBoolVector_impl<std::__bit_iterator<std::vector<BOOL>,true,0ul>,std::__bit_iterator<std::vector<BOOL>,true,0ul>>(_QWORD *a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t *v7;
  int v8;
  int v9;
  uint64_t v10;
  uint64_t v12;
  unint64_t v13;
  const std::string::value_type *v14;
  std::string::size_type v15;
  std::string *v16;
  __int128 v17;
  char *v18;
  _QWORD v19[2];
  std::string v20;

  v4 = a3[1];
  v5 = v4 - 1;
  if (v4 >= 0x40uLL)
    v5 = v4 - 64;
  v6 = (_QWORD *)(*a3 + 8 * (v5 >> 6));
  v7 = *(uint64_t **)a2;
  v8 = *(_DWORD *)(a2 + 8);
  v9 = ((_BYTE)v4 - 1) & 0x3F;
  v10 = 1 << v8;
  if (*(_QWORD **)a2 == v6 && v8 == v9)
  {
    if ((*v6 & v10) != 0)
      v18 = "Yes";
    else
      v18 = "No";
    std::string::basic_string[abi:ne180100]<0>(a1, v18);
  }
  else
  {
    v12 = *v7;
    v13 = *(_QWORD *)(a2 + 8) & 0xFFFFFFFF00000000 | (*(_QWORD *)(a2 + 8) + 1) & 0x3FLL;
    v19[0] = (char *)v7 + ((((unint64_t)*(_QWORD *)(a2 + 8) + 1) >> 3) & 0x3FFFFFF8);
    v19[1] = v13;
    clsp::telemetry::utils::PrintBoolVector_impl<std::__bit_iterator<std::vector<BOOL>,true,0ul>,std::__bit_iterator<std::vector<BOOL>,true,0ul>&>(&v20, (uint64_t)v19, a3);
    if ((v12 & v10) != 0)
      v14 = "Yes, ";
    else
      v14 = "No, ";
    if ((v12 & v10) != 0)
      v15 = 5;
    else
      v15 = 4;
    v16 = std::string::insert(&v20, 0, v14, v15);
    v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
    a1[2] = *((_QWORD *)&v16->__r_.__value_.__l + 2);
    *(_OWORD *)a1 = v17;
    v16->__r_.__value_.__l.__size_ = 0;
    v16->__r_.__value_.__r.__words[2] = 0;
    v16->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v20.__r_.__value_.__l.__data_);
  }
}

void sub_1B6418A04(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void clsp::telemetry::utils::PrintBoolVector_impl<std::__bit_iterator<std::vector<BOOL>,true,0ul>,std::__bit_iterator<std::vector<BOOL>,true,0ul>&>(_QWORD *a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t *v7;
  int v8;
  int v9;
  uint64_t v10;
  uint64_t v12;
  unint64_t v13;
  const std::string::value_type *v14;
  std::string::size_type v15;
  std::string *v16;
  __int128 v17;
  char *v18;
  _QWORD v19[2];
  std::string v20;

  v4 = a3[1];
  v5 = v4 - 1;
  if (v4 >= 0x40uLL)
    v5 = v4 - 64;
  v6 = (_QWORD *)(*a3 + 8 * (v5 >> 6));
  v7 = *(uint64_t **)a2;
  v8 = *(_DWORD *)(a2 + 8);
  v9 = ((_BYTE)v4 - 1) & 0x3F;
  v10 = 1 << v8;
  if (*(_QWORD **)a2 == v6 && v8 == v9)
  {
    if ((*v6 & v10) != 0)
      v18 = "Yes";
    else
      v18 = "No";
    std::string::basic_string[abi:ne180100]<0>(a1, v18);
  }
  else
  {
    v12 = *v7;
    v13 = *(_QWORD *)(a2 + 8) & 0xFFFFFFFF00000000 | (*(_QWORD *)(a2 + 8) + 1) & 0x3FLL;
    v19[0] = (char *)v7 + ((((unint64_t)*(_QWORD *)(a2 + 8) + 1) >> 3) & 0x3FFFFFF8);
    v19[1] = v13;
    clsp::telemetry::utils::PrintBoolVector_impl<std::__bit_iterator<std::vector<BOOL>,true,0ul>,std::__bit_iterator<std::vector<BOOL>,true,0ul>&>(&v20, v19);
    if ((v12 & v10) != 0)
      v14 = "Yes, ";
    else
      v14 = "No, ";
    if ((v12 & v10) != 0)
      v15 = 5;
    else
      v15 = 4;
    v16 = std::string::insert(&v20, 0, v14, v15);
    v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
    a1[2] = *((_QWORD *)&v16->__r_.__value_.__l + 2);
    *(_OWORD *)a1 = v17;
    v16->__r_.__value_.__l.__size_ = 0;
    v16->__r_.__value_.__r.__words[2] = 0;
    v16->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v20.__r_.__value_.__l.__data_);
  }
}

void sub_1B6418B58(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void clsp::telemetry::Item::operator std::string(uint64_t a1, _DWORD *a2)
{
  std::string *v3;
  __int128 v4;
  std::string *v5;
  std::string *v6;
  __int128 v7;
  std::string *v8;
  __int128 v9;
  std::string v10;
  std::string v11;

  if (*a2 == 2)
  {
    std::to_string(&v10, a2[1]);
    v6 = std::string::insert(&v10, 0, "Ch", 2uLL);
    v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
    v11.__r_.__value_.__r.__words[2] = v6->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v11.__r_.__value_.__l.__data_ = v7;
    v6->__r_.__value_.__l.__size_ = 0;
    v6->__r_.__value_.__r.__words[2] = 0;
    v6->__r_.__value_.__r.__words[0] = 0;
    v5 = std::string::append(&v11, " PDM", 4uLL);
  }
  else if (*a2 == 1)
  {
    std::to_string(&v10, a2[1]);
    v3 = std::string::insert(&v10, 0, "Ch", 2uLL);
    v4 = *(_OWORD *)&v3->__r_.__value_.__l.__data_;
    v11.__r_.__value_.__r.__words[2] = v3->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v11.__r_.__value_.__l.__data_ = v4;
    v3->__r_.__value_.__l.__size_ = 0;
    v3->__r_.__value_.__r.__words[2] = 0;
    v3->__r_.__value_.__r.__words[0] = 0;
    v5 = std::string::append(&v11, " current", 8uLL);
  }
  else
  {
    std::to_string(&v10, a2[1]);
    v8 = std::string::insert(&v10, 0, "Ch", 2uLL);
    v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
    v11.__r_.__value_.__r.__words[2] = v8->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v11.__r_.__value_.__l.__data_ = v9;
    v8->__r_.__value_.__l.__size_ = 0;
    v8->__r_.__value_.__r.__words[2] = 0;
    v8->__r_.__value_.__r.__words[0] = 0;
    v5 = std::string::append(&v11, " voltage", 8uLL);
  }
  *(_OWORD *)a1 = *(_OWORD *)&v5->__r_.__value_.__l.__data_;
  *(_QWORD *)(a1 + 16) = *((_QWORD *)&v5->__r_.__value_.__l + 2);
  v5->__r_.__value_.__l.__size_ = 0;
  v5->__r_.__value_.__r.__words[2] = 0;
  v5->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v11.__r_.__value_.__l.__data_);
  if (SHIBYTE(v10.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v10.__r_.__value_.__l.__data_);
}

void sub_1B6418CDC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(exception_object);
}

void clsp::telemetry::utils::PrintTelemetryVector_impl<std::__wrap_iter<clsp::telemetry::Item const*>,std::__wrap_iter<clsp::telemetry::Item const*>&>(std::string *a1, _DWORD **a2, _QWORD *a3)
{
  _DWORD *v5;
  std::string *v7;
  __int128 v8;
  void **v9;
  std::string::size_type v10;
  std::string *v11;
  uint64_t v12;
  void *__p[2];
  unsigned __int8 v14;
  std::string v15;
  std::string v16;

  v5 = *a2;
  if (v5 == (_DWORD *)(*a3 - 8))
  {
    clsp::telemetry::Item::operator std::string((uint64_t)a1, (_DWORD *)(*a3 - 8));
  }
  else
  {
    clsp::telemetry::Item::operator std::string((uint64_t)&v15, v5);
    v7 = std::string::append(&v15, ", ", 2uLL);
    v8 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
    v16.__r_.__value_.__r.__words[2] = v7->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v16.__r_.__value_.__l.__data_ = v8;
    v7->__r_.__value_.__l.__size_ = 0;
    v7->__r_.__value_.__r.__words[2] = 0;
    v7->__r_.__value_.__r.__words[0] = 0;
    v12 = (uint64_t)(*a2 + 2);
    clsp::telemetry::utils::PrintTelemetryVector_impl<std::__wrap_iter<clsp::telemetry::Item const*>,std::__wrap_iter<clsp::telemetry::Item const*>&>(__p, &v12, a3);
    if ((v14 & 0x80u) == 0)
      v9 = __p;
    else
      v9 = (void **)__p[0];
    if ((v14 & 0x80u) == 0)
      v10 = v14;
    else
      v10 = (std::string::size_type)__p[1];
    v11 = std::string::append(&v16, (const std::string::value_type *)v9, v10);
    *a1 = *v11;
    v11->__r_.__value_.__l.__size_ = 0;
    v11->__r_.__value_.__r.__words[2] = 0;
    v11->__r_.__value_.__r.__words[0] = 0;
    if ((char)v14 < 0)
      operator delete(__p[0]);
    if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v16.__r_.__value_.__l.__data_);
    if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v15.__r_.__value_.__l.__data_);
  }
}

void sub_1B6418E40(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a16 < 0)
    operator delete(__p);
  if (a28 < 0)
    operator delete(a23);
  if (a22 < 0)
    operator delete(a17);
  _Unwind_Resume(exception_object);
}

uint64_t AUSpeakerProtectionV3::InitParamsFromPlistV8(AUSpeakerProtectionV3 *this, CACFDictionary *a2)
{
  NSObject **v4;
  NSObject *v5;
  int SInt32;
  int v7;
  _QWORD *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  char *v24;
  char *v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  char *v31;
  char *v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  char *v38;
  char *v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  _QWORD *v44;
  char *v45;
  char *v46;
  uint64_t v47;
  unint64_t v48;
  unint64_t v49;
  uint64_t v50;
  _QWORD *v51;
  char *v52;
  char *v53;
  uint64_t v54;
  unint64_t v55;
  unint64_t v56;
  uint64_t v57;
  _QWORD *v58;
  char *v59;
  char *v60;
  uint64_t v61;
  unint64_t v62;
  unint64_t v63;
  _QWORD *v64;
  char *v65;
  _QWORD *v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  char *v70;
  char *v71;
  char *v72;
  uint64_t v73;
  unint64_t v74;
  uint64_t v75;
  uint64_t v76;
  char *v77;
  uint64_t v78;
  unint64_t v79;
  unint64_t v80;
  uint64_t v81;
  _QWORD *v82;
  char *v83;
  uint64_t v84;
  unint64_t v85;
  unint64_t v86;
  uint64_t v87;
  _QWORD *v88;
  char *v89;
  uint64_t v90;
  unint64_t v91;
  unint64_t v92;
  uint64_t v93;
  _QWORD *v94;
  char *v95;
  uint64_t v96;
  unint64_t v97;
  unint64_t v98;
  uint64_t v99;
  _QWORD *v100;
  char *v101;
  uint64_t v102;
  unint64_t v103;
  unint64_t v104;
  uint64_t v105;
  _QWORD *v106;
  char *v107;
  uint64_t v108;
  unint64_t v109;
  unint64_t v110;
  uint64_t v111;
  _QWORD *v112;
  char *v113;
  uint64_t v114;
  unint64_t v115;
  unint64_t v116;
  uint64_t v117;
  _QWORD *v118;
  char *v119;
  uint64_t v120;
  unint64_t v121;
  unint64_t v122;
  uint64_t v123;
  _QWORD *v124;
  char *v125;
  uint64_t v126;
  unint64_t v127;
  unint64_t v128;
  uint64_t v129;
  _QWORD *v130;
  char *v131;
  uint64_t v132;
  unint64_t v133;
  unint64_t v134;
  uint64_t v135;
  _QWORD *v136;
  char *v137;
  uint64_t v138;
  unint64_t v139;
  unint64_t v140;
  uint64_t v141;
  _QWORD *v142;
  char *v143;
  uint64_t v144;
  unint64_t v145;
  unint64_t v146;
  uint64_t v147;
  _QWORD *v148;
  char *v149;
  uint64_t v150;
  unint64_t v151;
  unint64_t v152;
  uint64_t v153;
  _QWORD *v154;
  char *v155;
  uint64_t v156;
  unint64_t v157;
  unint64_t v158;
  uint64_t v159;
  _QWORD *v160;
  __int128 *v161;
  uint64_t v162;
  unint64_t v163;
  unint64_t v164;
  _QWORD *v165;
  uint64_t v166;
  unsigned int *v167;
  uint64_t v168;
  ausdk::AUElement *v169;
  ausdk::AUElement **v170;
  uint64_t v171;
  NSObject *v172;
  int v173;
  uint64_t v174;
  uint64_t v175;
  unint64_t v176;
  uint64_t v177;
  _QWORD *v178;
  _QWORD *v179;
  uint64_t v180;
  uint64_t v181;
  _QWORD *v182;
  uint64_t v183;
  unint64_t v184;
  uint64_t v185;
  unint64_t v186;
  _QWORD *v187;
  uint64_t v188;
  ausdk::AUElement *v189;
  uint64_t v190;
  int Count;
  unint64_t v192;
  uint64_t v193;
  ausdk::AUElement *v194;
  uint64_t v195;
  int inited;
  char *v197;
  uint64_t v198;
  char *v199;
  char *v200;
  char *v201;
  char *v202;
  uint64_t v203;
  char *v204;
  uint64_t v205;
  uint64_t v206;
  char *v207;
  char *v208;
  uint64_t v209;
  unint64_t v210;
  char *v211;
  uint64_t v212;
  char *v213;
  char *v214;
  char *v215;
  char *v216;
  uint64_t v217;
  unint64_t v218;
  char *v219;
  uint64_t v220;
  char *v221;
  char *v222;
  char *v223;
  char *v224;
  uint64_t v225;
  unint64_t v226;
  char *v227;
  uint64_t v228;
  char *v229;
  char *v230;
  char *v231;
  char *v232;
  uint64_t v233;
  unint64_t v234;
  unint64_t v235;
  uint64_t v236;
  _QWORD *v237;
  char *v238;
  uint64_t v239;
  unint64_t v240;
  unint64_t v241;
  uint64_t v242;
  _QWORD *v243;
  char *v244;
  uint64_t v245;
  unint64_t v246;
  unint64_t v247;
  uint64_t v248;
  _QWORD *v249;
  char *v250;
  uint64_t v251;
  unint64_t v252;
  unint64_t v253;
  uint64_t v254;
  _QWORD *v255;
  char *v256;
  uint64_t v257;
  unint64_t v258;
  unint64_t v259;
  uint64_t v260;
  _QWORD *v261;
  char *v262;
  uint64_t v263;
  unint64_t v264;
  unint64_t v265;
  uint64_t v266;
  _QWORD *v267;
  char *v268;
  uint64_t v269;
  unint64_t v270;
  unint64_t v271;
  uint64_t v272;
  _QWORD *v273;
  char *v274;
  uint64_t v275;
  unint64_t v276;
  unint64_t v277;
  uint64_t v278;
  _QWORD *v279;
  char *v280;
  uint64_t v281;
  unint64_t v282;
  unint64_t v283;
  uint64_t v284;
  _QWORD *v285;
  char *v286;
  uint64_t v287;
  unint64_t v288;
  unint64_t v289;
  uint64_t v290;
  _QWORD *v291;
  char *v292;
  uint64_t v293;
  unint64_t v294;
  unint64_t v295;
  uint64_t v296;
  _QWORD *v297;
  char *v298;
  uint64_t v299;
  unint64_t v300;
  unint64_t v301;
  uint64_t v302;
  _QWORD *v303;
  uint64_t v304;
  unint64_t v305;
  unint64_t v306;
  _QWORD *v307;
  char *v308;
  uint64_t v309;
  ausdk::AUElement *v310;
  uint64_t v311;
  NSObject **v312;
  NSObject *v313;
  uint64_t *v314;
  uint64_t *v315;
  int v316;
  uint64_t v317;
  uint64_t v318;
  NSObject **v319;
  NSObject *v320;
  void **v321;
  int v322;
  unsigned int v323;
  int v325;
  unsigned int v326;
  uint64_t v327;
  char *__p;
  int v329;
  void *v330[3];
  int v331;
  int v332;
  void *v333[2];
  char v334;
  CFArrayRef theArray;
  __int16 v336;
  CFMutableDictionaryRef Mutable;
  __int16 v338;
  uint8_t v339[4];
  const char *v340;
  __int16 v341;
  int v342;
  __int16 v343;
  int v344;
  __int16 v345;
  void **v346;
  _BYTE buf[72];
  void *v348;
  char v349;
  _QWORD v350[22];

  v350[19] = *MEMORY[0x1E0C80C00];
  v332 = -1;
  if ((CACFDictionary::GetSInt32(*(_QWORD *)a2, CFSTR("NumChannels"), &v332) & 1) != 0)
  {
    v326 = 0;
    v329 = 0;
    *((_DWORD *)this + 158) = v332;
    goto LABEL_10;
  }
  v4 = (NSObject **)spp3Subsystem();
  if (!v4)
  {
    v5 = MEMORY[0x1E0C81028];
LABEL_7:
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      *(_QWORD *)&buf[4] = "AUSpeakerProtectionV3.cpp";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 3675;
      _os_log_impl(&dword_1B5ED0000, v5, OS_LOG_TYPE_ERROR, "%25s:%-5d Cannot get NumChannels Key", buf, 0x12u);
    }
    goto LABEL_9;
  }
  v5 = *v4;
  if (*v4)
    goto LABEL_7;
LABEL_9:
  v329 = 1;
  v326 = -203;
LABEL_10:
  v331 = 0;
  SInt32 = CACFDictionary::GetSInt32(*(_QWORD *)a2, CFSTR("ConvoyDataSourceOverride"), &v331);
  v7 = v331;
  if (!SInt32)
    v7 = 0;
  *((_DWORD *)this + 180) = v7;
  v8 = operator new(0x10uLL);
  *v8 = CFSTR("AmbientTemp");
  v8[1] = 4;
  v9 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float (ASAFeatures::*)(ASAFrontEndInputState const*)>>(2uLL);
  v11 = v10;
  v12 = &v9[16 * v10];
  *((_QWORD *)v9 + 2) = CFSTR("ThermalGainAttackTime");
  *((_QWORD *)v9 + 3) = 2;
  *(_OWORD *)v9 = *(_OWORD *)v8;
  operator delete(v8);
  if (v11 < 3)
  {
    v14 = 3;
    if ((unint64_t)((v12 - v9) >> 3) > 3)
      v14 = (v12 - v9) >> 3;
    if ((unint64_t)(v12 - v9) >= 0x7FFFFFFFFFFFFFF0)
      v15 = 0xFFFFFFFFFFFFFFFLL;
    else
      v15 = v14;
    if (v15)
      v15 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<float (ASAFeatures::*)(ASAFrontEndInputState const*)>>(v15);
    else
      v16 = 0;
    v17 = 0;
    v12 = (char *)(v15 + 16 * v16);
    *(_QWORD *)(v15 + 32) = CFSTR("ThermalGainReleaseTime");
    *(_QWORD *)(v15 + 40) = 3;
    v13 = (char *)(v15 + 48);
    do
    {
      *(_OWORD *)(v15 + 32 + v17 - 16) = *(_OWORD *)&v9[v17 + 16];
      v17 -= 16;
    }
    while (v17 != -32);
    __p = (char *)v15;
    if (v9)
      operator delete(v9);
  }
  else
  {
    *((_QWORD *)v9 + 4) = CFSTR("ThermalGainReleaseTime");
    *((_QWORD *)v9 + 5) = 3;
    v13 = v9 + 48;
    __p = v9;
  }
  if (v13 < v12)
  {
    *(_QWORD *)v13 = CFSTR("PeakDispAttackTime");
    *((_QWORD *)v13 + 1) = 9;
    v18 = v13 + 16;
    goto LABEL_45;
  }
  v19 = (v13 - __p) >> 4;
  v20 = v19 + 1;
  if ((unint64_t)(v19 + 1) >> 60)
    std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
  if ((v12 - __p) >> 3 > v20)
    v20 = (v12 - __p) >> 3;
  if ((unint64_t)(v12 - __p) >= 0x7FFFFFFFFFFFFFF0)
    v21 = 0xFFFFFFFFFFFFFFFLL;
  else
    v21 = v20;
  if (v21)
    v21 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<float (ASAFeatures::*)(ASAFrontEndInputState const*)>>(v21);
  else
    v22 = 0;
  v23 = (_QWORD *)(v21 + 16 * v19);
  v12 = (char *)(v21 + 16 * v22);
  *v23 = CFSTR("PeakDispAttackTime");
  v23[1] = 9;
  v18 = (char *)(v23 + 2);
  if (v13 == __p)
  {
    v24 = __p;
  }
  else
  {
    v24 = __p;
    do
    {
      *((_OWORD *)v23 - 1) = *((_OWORD *)v13 - 1);
      v23 -= 2;
      v13 -= 16;
    }
    while (v13 != __p);
    if (!__p)
      goto LABEL_44;
  }
  operator delete(v24);
LABEL_44:
  __p = (char *)v23;
LABEL_45:
  if (v18 < v12)
  {
    *(_QWORD *)v18 = CFSTR("PeakDispDecayTime");
    *((_QWORD *)v18 + 1) = 10;
    v25 = v18 + 16;
    goto LABEL_64;
  }
  v26 = (v18 - __p) >> 4;
  v27 = v26 + 1;
  if ((unint64_t)(v26 + 1) >> 60)
    std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
  if ((v12 - __p) >> 3 > v27)
    v27 = (v12 - __p) >> 3;
  if ((unint64_t)(v12 - __p) >= 0x7FFFFFFFFFFFFFF0)
    v28 = 0xFFFFFFFFFFFFFFFLL;
  else
    v28 = v27;
  if (v28)
    v28 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<float (ASAFeatures::*)(ASAFrontEndInputState const*)>>(v28);
  else
    v29 = 0;
  v30 = (_QWORD *)(v28 + 16 * v26);
  v12 = (char *)(v28 + 16 * v29);
  *v30 = CFSTR("PeakDispDecayTime");
  v30[1] = 10;
  v25 = (char *)(v30 + 2);
  if (v18 == __p)
  {
    v31 = __p;
  }
  else
  {
    v31 = __p;
    do
    {
      *((_OWORD *)v30 - 1) = *((_OWORD *)v18 - 1);
      v30 -= 2;
      v18 -= 16;
    }
    while (v18 != __p);
    if (!__p)
      goto LABEL_63;
  }
  operator delete(v31);
LABEL_63:
  __p = (char *)v30;
LABEL_64:
  if (v25 < v12)
  {
    *(_QWORD *)v25 = CFSTR("DispFBIntegrationTime");
    *((_QWORD *)v25 + 1) = 11;
    v32 = v25 + 16;
    goto LABEL_83;
  }
  v33 = (v25 - __p) >> 4;
  v34 = v33 + 1;
  if ((unint64_t)(v33 + 1) >> 60)
    std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
  if ((v12 - __p) >> 3 > v34)
    v34 = (v12 - __p) >> 3;
  if ((unint64_t)(v12 - __p) >= 0x7FFFFFFFFFFFFFF0)
    v35 = 0xFFFFFFFFFFFFFFFLL;
  else
    v35 = v34;
  if (v35)
    v35 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<float (ASAFeatures::*)(ASAFrontEndInputState const*)>>(v35);
  else
    v36 = 0;
  v37 = (_QWORD *)(v35 + 16 * v33);
  v12 = (char *)(v35 + 16 * v36);
  *v37 = CFSTR("DispFBIntegrationTime");
  v37[1] = 11;
  v32 = (char *)(v37 + 2);
  if (v25 == __p)
  {
    v38 = __p;
  }
  else
  {
    v38 = __p;
    do
    {
      *((_OWORD *)v37 - 1) = *((_OWORD *)v25 - 1);
      v37 -= 2;
      v25 -= 16;
    }
    while (v25 != __p);
    if (!__p)
      goto LABEL_82;
  }
  operator delete(v38);
LABEL_82:
  __p = (char *)v37;
LABEL_83:
  if (v32 < v12)
  {
    *(_QWORD *)v32 = CFSTR("LookaheadDelay_ms");
    *((_QWORD *)v32 + 1) = 8;
    v39 = v32 + 16;
    goto LABEL_102;
  }
  v40 = (v32 - __p) >> 4;
  v41 = v40 + 1;
  if ((unint64_t)(v40 + 1) >> 60)
    std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
  if ((v12 - __p) >> 3 > v41)
    v41 = (v12 - __p) >> 3;
  if ((unint64_t)(v12 - __p) >= 0x7FFFFFFFFFFFFFF0)
    v42 = 0xFFFFFFFFFFFFFFFLL;
  else
    v42 = v41;
  if (v42)
    v42 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<float (ASAFeatures::*)(ASAFrontEndInputState const*)>>(v42);
  else
    v43 = 0;
  v44 = (_QWORD *)(v42 + 16 * v40);
  v12 = (char *)(v42 + 16 * v43);
  *v44 = CFSTR("LookaheadDelay_ms");
  v44[1] = 8;
  v39 = (char *)(v44 + 2);
  if (v32 == __p)
  {
    v45 = __p;
  }
  else
  {
    v45 = __p;
    do
    {
      *((_OWORD *)v44 - 1) = *((_OWORD *)v32 - 1);
      v44 -= 2;
      v32 -= 16;
    }
    while (v32 != __p);
    if (!__p)
      goto LABEL_101;
  }
  operator delete(v45);
LABEL_101:
  __p = (char *)v44;
LABEL_102:
  if (v39 < v12)
  {
    *(_QWORD *)v39 = CFSTR("SafeTlim");
    *((_QWORD *)v39 + 1) = 5;
    v46 = v39 + 16;
    goto LABEL_121;
  }
  v47 = (v39 - __p) >> 4;
  v48 = v47 + 1;
  if ((unint64_t)(v47 + 1) >> 60)
    std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
  if ((v12 - __p) >> 3 > v48)
    v48 = (v12 - __p) >> 3;
  if ((unint64_t)(v12 - __p) >= 0x7FFFFFFFFFFFFFF0)
    v49 = 0xFFFFFFFFFFFFFFFLL;
  else
    v49 = v48;
  if (v49)
    v49 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<float (ASAFeatures::*)(ASAFrontEndInputState const*)>>(v49);
  else
    v50 = 0;
  v51 = (_QWORD *)(v49 + 16 * v47);
  v12 = (char *)(v49 + 16 * v50);
  *v51 = CFSTR("SafeTlim");
  v51[1] = 5;
  v46 = (char *)(v51 + 2);
  if (v39 == __p)
  {
    v52 = __p;
  }
  else
  {
    v52 = __p;
    do
    {
      *((_OWORD *)v51 - 1) = *((_OWORD *)v39 - 1);
      v51 -= 2;
      v39 -= 16;
    }
    while (v39 != __p);
    if (!__p)
      goto LABEL_120;
  }
  operator delete(v52);
LABEL_120:
  __p = (char *)v51;
LABEL_121:
  if (v46 < v12)
  {
    *(_QWORD *)v46 = CFSTR("SafeTlimTimeMin");
    *((_QWORD *)v46 + 1) = 6;
    v53 = v46 + 16;
    goto LABEL_140;
  }
  v54 = (v46 - __p) >> 4;
  v55 = v54 + 1;
  if ((unint64_t)(v54 + 1) >> 60)
    std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
  if ((v12 - __p) >> 3 > v55)
    v55 = (v12 - __p) >> 3;
  if ((unint64_t)(v12 - __p) >= 0x7FFFFFFFFFFFFFF0)
    v56 = 0xFFFFFFFFFFFFFFFLL;
  else
    v56 = v55;
  if (v56)
    v56 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<float (ASAFeatures::*)(ASAFrontEndInputState const*)>>(v56);
  else
    v57 = 0;
  v58 = (_QWORD *)(v56 + 16 * v54);
  v12 = (char *)(v56 + 16 * v57);
  *v58 = CFSTR("SafeTlimTimeMin");
  v58[1] = 6;
  v53 = (char *)(v58 + 2);
  if (v46 == __p)
  {
    v59 = __p;
  }
  else
  {
    v59 = __p;
    do
    {
      *((_OWORD *)v58 - 1) = *((_OWORD *)v46 - 1);
      v58 -= 2;
      v46 -= 16;
    }
    while (v46 != __p);
    if (!__p)
      goto LABEL_139;
  }
  operator delete(v59);
LABEL_139:
  __p = (char *)v58;
LABEL_140:
  if (v53 < v12)
  {
    *(_QWORD *)v53 = CFSTR("SafeTlimOffset");
    *((_QWORD *)v53 + 1) = 7;
    v60 = v53 + 16;
    goto LABEL_158;
  }
  v61 = (v53 - __p) >> 4;
  v62 = v61 + 1;
  if ((unint64_t)(v61 + 1) >> 60)
    std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
  if ((v12 - __p) >> 3 > v62)
    v62 = (v12 - __p) >> 3;
  if ((unint64_t)(v12 - __p) >= 0x7FFFFFFFFFFFFFF0)
    v63 = 0xFFFFFFFFFFFFFFFLL;
  else
    v63 = v62;
  if (v63)
    v63 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<float (ASAFeatures::*)(ASAFrontEndInputState const*)>>(v63);
  v64 = (_QWORD *)(v63 + 16 * v61);
  *v64 = CFSTR("SafeTlimOffset");
  v64[1] = 7;
  v60 = (char *)(v64 + 2);
  if (v53 == __p)
  {
    v65 = __p;
  }
  else
  {
    v65 = __p;
    do
    {
      *((_OWORD *)v64 - 1) = *((_OWORD *)v53 - 1);
      v64 -= 2;
      v53 -= 16;
    }
    while (v53 != __p);
    if (!__p)
      goto LABEL_157;
  }
  operator delete(v65);
LABEL_157:
  __p = (char *)v64;
LABEL_158:
  v66 = operator new(0x10uLL);
  *v66 = CFSTR("TemperatureLimit");
  v66[1] = 0;
  v67 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float (ASAFeatures::*)(ASAFrontEndInputState const*)>>(2uLL);
  v69 = v68;
  v70 = &v67[16 * v68];
  *((_QWORD *)v67 + 2) = CFSTR("HardTempLimitHeadroom");
  *((_QWORD *)v67 + 3) = 1;
  *(_OWORD *)v67 = *(_OWORD *)v66;
  operator delete(v66);
  if (v69 < 3)
  {
    v73 = 3;
    if ((unint64_t)((v70 - v67) >> 3) > 3)
      v73 = (v70 - v67) >> 3;
    if ((unint64_t)(v70 - v67) >= 0x7FFFFFFFFFFFFFF0)
      v74 = 0xFFFFFFFFFFFFFFFLL;
    else
      v74 = v73;
    if (v74)
      v74 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<float (ASAFeatures::*)(ASAFrontEndInputState const*)>>(v74);
    else
      v75 = 0;
    v76 = 0;
    v70 = (char *)(v74 + 16 * v75);
    *(_QWORD *)(v74 + 32) = CFSTR("ThermalFFSpeedupFactor");
    *(_QWORD *)(v74 + 40) = 6;
    v71 = (char *)(v74 + 48);
    do
    {
      *(_OWORD *)(v74 + 32 + v76 - 16) = *(_OWORD *)&v67[v76 + 16];
      v76 -= 16;
    }
    while (v76 != -32);
    v72 = (char *)v74;
    if (v67)
      operator delete(v67);
  }
  else
  {
    *((_QWORD *)v67 + 4) = CFSTR("ThermalFFSpeedupFactor");
    *((_QWORD *)v67 + 5) = 6;
    v71 = v67 + 48;
    v72 = v67;
  }
  if (v71 >= v70)
  {
    v78 = (v71 - v72) >> 4;
    v79 = v78 + 1;
    if ((unint64_t)(v78 + 1) >> 60)
      std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
    if ((v70 - v72) >> 3 > v79)
      v79 = (v70 - v72) >> 3;
    if ((unint64_t)(v70 - v72) >= 0x7FFFFFFFFFFFFFF0)
      v80 = 0xFFFFFFFFFFFFFFFLL;
    else
      v80 = v79;
    if (v80)
      v80 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<float (ASAFeatures::*)(ASAFrontEndInputState const*)>>(v80);
    else
      v81 = 0;
    v82 = (_QWORD *)(v80 + 16 * v78);
    v70 = (char *)(v80 + 16 * v81);
    *v82 = CFSTR("Rshunt");
    v82[1] = 10;
    v77 = (char *)(v82 + 2);
    if (v71 == v72)
      goto LABEL_186;
    do
    {
      *((_OWORD *)v82 - 1) = *((_OWORD *)v71 - 1);
      v82 -= 2;
      v71 -= 16;
    }
    while (v71 != v72);
    if (v72)
LABEL_186:
      operator delete(v72);
    v72 = (char *)v82;
  }
  else
  {
    *(_QWORD *)v71 = CFSTR("Rshunt");
    *((_QWORD *)v71 + 1) = 10;
    v77 = v71 + 16;
  }
  if (v77 >= v70)
  {
    v84 = (v77 - v72) >> 4;
    v85 = v84 + 1;
    if ((unint64_t)(v84 + 1) >> 60)
      std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
    if ((v70 - v72) >> 3 > v85)
      v85 = (v70 - v72) >> 3;
    if ((unint64_t)(v70 - v72) >= 0x7FFFFFFFFFFFFFF0)
      v86 = 0xFFFFFFFFFFFFFFFLL;
    else
      v86 = v85;
    if (v86)
      v86 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<float (ASAFeatures::*)(ASAFrontEndInputState const*)>>(v86);
    else
      v87 = 0;
    v88 = (_QWORD *)(v86 + 16 * v84);
    v70 = (char *)(v86 + 16 * v87);
    *v88 = CFSTR("Rampout");
    v88[1] = 11;
    v83 = (char *)(v88 + 2);
    if (v77 == v72)
      goto LABEL_202;
    do
    {
      *((_OWORD *)v88 - 1) = *((_OWORD *)v77 - 1);
      v88 -= 2;
      v77 -= 16;
    }
    while (v77 != v72);
    if (v72)
LABEL_202:
      operator delete(v72);
    v72 = (char *)v88;
  }
  else
  {
    *(_QWORD *)v77 = CFSTR("Rampout");
    *((_QWORD *)v77 + 1) = 11;
    v83 = v77 + 16;
  }
  if (v83 >= v70)
  {
    v90 = (v83 - v72) >> 4;
    v91 = v90 + 1;
    if ((unint64_t)(v90 + 1) >> 60)
      std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
    if ((v70 - v72) >> 3 > v91)
      v91 = (v70 - v72) >> 3;
    if ((unint64_t)(v70 - v72) >= 0x7FFFFFFFFFFFFFF0)
      v92 = 0xFFFFFFFFFFFFFFFLL;
    else
      v92 = v91;
    if (v92)
      v92 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<float (ASAFeatures::*)(ASAFrontEndInputState const*)>>(v92);
    else
      v93 = 0;
    v94 = (_QWORD *)(v92 + 16 * v90);
    v70 = (char *)(v92 + 16 * v93);
    *v94 = CFSTR("mt");
    v94[1] = 12;
    v89 = (char *)(v94 + 2);
    if (v83 == v72)
      goto LABEL_218;
    do
    {
      *((_OWORD *)v94 - 1) = *((_OWORD *)v83 - 1);
      v94 -= 2;
      v83 -= 16;
    }
    while (v83 != v72);
    if (v72)
LABEL_218:
      operator delete(v72);
    v72 = (char *)v94;
  }
  else
  {
    *(_QWORD *)v83 = CFSTR("mt");
    *((_QWORD *)v83 + 1) = 12;
    v89 = v83 + 16;
  }
  if (v89 >= v70)
  {
    v96 = (v89 - v72) >> 4;
    v97 = v96 + 1;
    if ((unint64_t)(v96 + 1) >> 60)
      std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
    if ((v70 - v72) >> 3 > v97)
      v97 = (v70 - v72) >> 3;
    if ((unint64_t)(v70 - v72) >= 0x7FFFFFFFFFFFFFF0)
      v98 = 0xFFFFFFFFFFFFFFFLL;
    else
      v98 = v97;
    if (v98)
      v98 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<float (ASAFeatures::*)(ASAFrontEndInputState const*)>>(v98);
    else
      v99 = 0;
    v100 = (_QWORD *)(v98 + 16 * v96);
    v70 = (char *)(v98 + 16 * v99);
    *v100 = CFSTR("ct");
    v100[1] = 13;
    v95 = (char *)(v100 + 2);
    if (v89 == v72)
      goto LABEL_234;
    do
    {
      *((_OWORD *)v100 - 1) = *((_OWORD *)v89 - 1);
      v100 -= 2;
      v89 -= 16;
    }
    while (v89 != v72);
    if (v72)
LABEL_234:
      operator delete(v72);
    v72 = (char *)v100;
  }
  else
  {
    *(_QWORD *)v89 = CFSTR("ct");
    *((_QWORD *)v89 + 1) = 13;
    v95 = v89 + 16;
  }
  if (v95 >= v70)
  {
    v102 = (v95 - v72) >> 4;
    v103 = v102 + 1;
    if ((unint64_t)(v102 + 1) >> 60)
      std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
    if ((v70 - v72) >> 3 > v103)
      v103 = (v70 - v72) >> 3;
    if ((unint64_t)(v70 - v72) >= 0x7FFFFFFFFFFFFFF0)
      v104 = 0xFFFFFFFFFFFFFFFLL;
    else
      v104 = v103;
    if (v104)
      v104 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<float (ASAFeatures::*)(ASAFrontEndInputState const*)>>(v104);
    else
      v105 = 0;
    v106 = (_QWORD *)(v104 + 16 * v102);
    v70 = (char *)(v104 + 16 * v105);
    *v106 = CFSTR("kt");
    v106[1] = 14;
    v101 = (char *)(v106 + 2);
    if (v95 == v72)
      goto LABEL_250;
    do
    {
      *((_OWORD *)v106 - 1) = *((_OWORD *)v95 - 1);
      v106 -= 2;
      v95 -= 16;
    }
    while (v95 != v72);
    if (v72)
LABEL_250:
      operator delete(v72);
    v72 = (char *)v106;
  }
  else
  {
    *(_QWORD *)v95 = CFSTR("kt");
    *((_QWORD *)v95 + 1) = 14;
    v101 = v95 + 16;
  }
  if (v101 >= v70)
  {
    v108 = (v101 - v72) >> 4;
    v109 = v108 + 1;
    if ((unint64_t)(v108 + 1) >> 60)
      std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
    if ((v70 - v72) >> 3 > v109)
      v109 = (v70 - v72) >> 3;
    if ((unint64_t)(v70 - v72) >= 0x7FFFFFFFFFFFFFF0)
      v110 = 0xFFFFFFFFFFFFFFFLL;
    else
      v110 = v109;
    if (v110)
      v110 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<float (ASAFeatures::*)(ASAFrontEndInputState const*)>>(v110);
    else
      v111 = 0;
    v112 = (_QWORD *)(v110 + 16 * v108);
    v70 = (char *)(v110 + 16 * v111);
    *v112 = CFSTR("ag");
    v112[1] = 15;
    v107 = (char *)(v112 + 2);
    if (v101 == v72)
      goto LABEL_266;
    do
    {
      *((_OWORD *)v112 - 1) = *((_OWORD *)v101 - 1);
      v112 -= 2;
      v101 -= 16;
    }
    while (v101 != v72);
    if (v72)
LABEL_266:
      operator delete(v72);
    v72 = (char *)v112;
  }
  else
  {
    *(_QWORD *)v101 = CFSTR("ag");
    *((_QWORD *)v101 + 1) = 15;
    v107 = v101 + 16;
  }
  if (v107 >= v70)
  {
    v114 = (v107 - v72) >> 4;
    v115 = v114 + 1;
    if ((unint64_t)(v114 + 1) >> 60)
      std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
    if ((v70 - v72) >> 3 > v115)
      v115 = (v70 - v72) >> 3;
    if ((unint64_t)(v70 - v72) >= 0x7FFFFFFFFFFFFFF0)
      v116 = 0xFFFFFFFFFFFFFFFLL;
    else
      v116 = v115;
    if (v116)
      v116 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<float (ASAFeatures::*)(ASAFrontEndInputState const*)>>(v116);
    else
      v117 = 0;
    v118 = (_QWORD *)(v116 + 16 * v114);
    v70 = (char *)(v116 + 16 * v117);
    *v118 = CFSTR("g_bw");
    v118[1] = 16;
    v113 = (char *)(v118 + 2);
    if (v107 == v72)
      goto LABEL_282;
    do
    {
      *((_OWORD *)v118 - 1) = *((_OWORD *)v107 - 1);
      v118 -= 2;
      v107 -= 16;
    }
    while (v107 != v72);
    if (v72)
LABEL_282:
      operator delete(v72);
    v72 = (char *)v118;
  }
  else
  {
    *(_QWORD *)v107 = CFSTR("g_bw");
    *((_QWORD *)v107 + 1) = 16;
    v113 = v107 + 16;
  }
  if (v113 >= v70)
  {
    v120 = (v113 - v72) >> 4;
    v121 = v120 + 1;
    if ((unint64_t)(v120 + 1) >> 60)
      std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
    if ((v70 - v72) >> 3 > v121)
      v121 = (v70 - v72) >> 3;
    if ((unint64_t)(v70 - v72) >= 0x7FFFFFFFFFFFFFF0)
      v122 = 0xFFFFFFFFFFFFFFFLL;
    else
      v122 = v121;
    if (v122)
      v122 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<float (ASAFeatures::*)(ASAFrontEndInputState const*)>>(v122);
    else
      v123 = 0;
    v124 = (_QWORD *)(v122 + 16 * v120);
    v70 = (char *)(v122 + 16 * v123);
    *v124 = CFSTR("Q_d");
    v124[1] = 17;
    v119 = (char *)(v124 + 2);
    if (v113 == v72)
      goto LABEL_298;
    do
    {
      *((_OWORD *)v124 - 1) = *((_OWORD *)v113 - 1);
      v124 -= 2;
      v113 -= 16;
    }
    while (v113 != v72);
    if (v72)
LABEL_298:
      operator delete(v72);
    v72 = (char *)v124;
  }
  else
  {
    *(_QWORD *)v113 = CFSTR("Q_d");
    *((_QWORD *)v113 + 1) = 17;
    v119 = v113 + 16;
  }
  if (v119 >= v70)
  {
    v126 = (v119 - v72) >> 4;
    v127 = v126 + 1;
    if ((unint64_t)(v126 + 1) >> 60)
      std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
    if ((v70 - v72) >> 3 > v127)
      v127 = (v70 - v72) >> 3;
    if ((unint64_t)(v70 - v72) >= 0x7FFFFFFFFFFFFFF0)
      v128 = 0xFFFFFFFFFFFFFFFLL;
    else
      v128 = v127;
    if (v128)
      v128 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<float (ASAFeatures::*)(ASAFrontEndInputState const*)>>(v128);
    else
      v129 = 0;
    v130 = (_QWORD *)(v128 + 16 * v126);
    v70 = (char *)(v128 + 16 * v129);
    *v130 = CFSTR("phi");
    v130[1] = 18;
    v125 = (char *)(v130 + 2);
    if (v119 == v72)
      goto LABEL_314;
    do
    {
      *((_OWORD *)v130 - 1) = *((_OWORD *)v119 - 1);
      v130 -= 2;
      v119 -= 16;
    }
    while (v119 != v72);
    if (v72)
LABEL_314:
      operator delete(v72);
    v72 = (char *)v130;
  }
  else
  {
    *(_QWORD *)v119 = CFSTR("phi");
    *((_QWORD *)v119 + 1) = 18;
    v125 = v119 + 16;
  }
  if (v125 >= v70)
  {
    v132 = (v125 - v72) >> 4;
    v133 = v132 + 1;
    if ((unint64_t)(v132 + 1) >> 60)
      std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
    if ((v70 - v72) >> 3 > v133)
      v133 = (v70 - v72) >> 3;
    if ((unint64_t)(v70 - v72) >= 0x7FFFFFFFFFFFFFF0)
      v134 = 0xFFFFFFFFFFFFFFFLL;
    else
      v134 = v133;
    if (v134)
      v134 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<float (ASAFeatures::*)(ASAFrontEndInputState const*)>>(v134);
    else
      v135 = 0;
    v136 = (_QWORD *)(v134 + 16 * v132);
    v70 = (char *)(v134 + 16 * v135);
    *v136 = CFSTR("x_lim");
    v136[1] = 19;
    v131 = (char *)(v136 + 2);
    if (v125 == v72)
      goto LABEL_330;
    do
    {
      *((_OWORD *)v136 - 1) = *((_OWORD *)v125 - 1);
      v136 -= 2;
      v125 -= 16;
    }
    while (v125 != v72);
    if (v72)
LABEL_330:
      operator delete(v72);
    v72 = (char *)v136;
  }
  else
  {
    *(_QWORD *)v125 = CFSTR("x_lim");
    *((_QWORD *)v125 + 1) = 19;
    v131 = v125 + 16;
  }
  if (v131 >= v70)
  {
    v138 = (v131 - v72) >> 4;
    v139 = v138 + 1;
    if ((unint64_t)(v138 + 1) >> 60)
      std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
    if ((v70 - v72) >> 3 > v139)
      v139 = (v70 - v72) >> 3;
    if ((unint64_t)(v70 - v72) >= 0x7FFFFFFFFFFFFFF0)
      v140 = 0xFFFFFFFFFFFFFFFLL;
    else
      v140 = v139;
    if (v140)
      v140 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<float (ASAFeatures::*)(ASAFrontEndInputState const*)>>(v140);
    else
      v141 = 0;
    v142 = (_QWORD *)(v140 + 16 * v138);
    v70 = (char *)(v140 + 16 * v141);
    *v142 = CFSTR("Reb_ref");
    v142[1] = 9;
    v137 = (char *)(v142 + 2);
    if (v131 == v72)
      goto LABEL_346;
    do
    {
      *((_OWORD *)v142 - 1) = *((_OWORD *)v131 - 1);
      v142 -= 2;
      v131 -= 16;
    }
    while (v131 != v72);
    if (v72)
LABEL_346:
      operator delete(v72);
    v72 = (char *)v142;
  }
  else
  {
    *(_QWORD *)v131 = CFSTR("Reb_ref");
    *((_QWORD *)v131 + 1) = 9;
    v137 = v131 + 16;
  }
  if (v137 >= v70)
  {
    v144 = (v137 - v72) >> 4;
    v145 = v144 + 1;
    if ((unint64_t)(v144 + 1) >> 60)
      std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
    if ((v70 - v72) >> 3 > v145)
      v145 = (v70 - v72) >> 3;
    if ((unint64_t)(v70 - v72) >= 0x7FFFFFFFFFFFFFF0)
      v146 = 0xFFFFFFFFFFFFFFFLL;
    else
      v146 = v145;
    if (v146)
      v146 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<float (ASAFeatures::*)(ASAFrontEndInputState const*)>>(v146);
    else
      v147 = 0;
    v148 = (_QWORD *)(v146 + 16 * v144);
    v70 = (char *)(v146 + 16 * v147);
    *v148 = CFSTR("T_sett_vc");
    v148[1] = 2;
    v143 = (char *)(v148 + 2);
    if (v137 == v72)
      goto LABEL_362;
    do
    {
      *((_OWORD *)v148 - 1) = *((_OWORD *)v137 - 1);
      v148 -= 2;
      v137 -= 16;
    }
    while (v137 != v72);
    if (v72)
LABEL_362:
      operator delete(v72);
    v72 = (char *)v148;
  }
  else
  {
    *(_QWORD *)v137 = CFSTR("T_sett_vc");
    *((_QWORD *)v137 + 1) = 2;
    v143 = v137 + 16;
  }
  if (v143 >= v70)
  {
    v150 = (v143 - v72) >> 4;
    v151 = v150 + 1;
    if ((unint64_t)(v150 + 1) >> 60)
      std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
    if ((v70 - v72) >> 3 > v151)
      v151 = (v70 - v72) >> 3;
    if ((unint64_t)(v70 - v72) >= 0x7FFFFFFFFFFFFFF0)
      v152 = 0xFFFFFFFFFFFFFFFLL;
    else
      v152 = v151;
    if (v152)
      v152 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<float (ASAFeatures::*)(ASAFrontEndInputState const*)>>(v152);
    else
      v153 = 0;
    v154 = (_QWORD *)(v152 + 16 * v150);
    v70 = (char *)(v152 + 16 * v153);
    *v154 = CFSTR("T_sett_mg");
    v154[1] = 3;
    v149 = (char *)(v154 + 2);
    if (v143 == v72)
      goto LABEL_378;
    do
    {
      *((_OWORD *)v154 - 1) = *((_OWORD *)v143 - 1);
      v154 -= 2;
      v143 -= 16;
    }
    while (v143 != v72);
    if (v72)
LABEL_378:
      operator delete(v72);
    v72 = (char *)v154;
  }
  else
  {
    *(_QWORD *)v143 = CFSTR("T_sett_mg");
    *((_QWORD *)v143 + 1) = 3;
    v149 = v143 + 16;
  }
  if (v149 >= v70)
  {
    v156 = (v149 - v72) >> 4;
    v157 = v156 + 1;
    if ((unint64_t)(v156 + 1) >> 60)
      std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
    if ((v70 - v72) >> 3 > v157)
      v157 = (v70 - v72) >> 3;
    if ((unint64_t)(v70 - v72) >= 0x7FFFFFFFFFFFFFF0)
      v158 = 0xFFFFFFFFFFFFFFFLL;
    else
      v158 = v157;
    if (v158)
      v158 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<float (ASAFeatures::*)(ASAFrontEndInputState const*)>>(v158);
    else
      v159 = 0;
    v160 = (_QWORD *)(v158 + 16 * v156);
    v70 = (char *)(v158 + 16 * v159);
    *v160 = CFSTR("tau_Tvc");
    v160[1] = 4;
    v155 = (char *)(v160 + 2);
    if (v149 == v72)
      goto LABEL_394;
    do
    {
      *((_OWORD *)v160 - 1) = *((_OWORD *)v149 - 1);
      v160 -= 2;
      v149 -= 16;
    }
    while (v149 != v72);
    if (v72)
LABEL_394:
      operator delete(v72);
    v72 = (char *)v160;
  }
  else
  {
    *(_QWORD *)v149 = CFSTR("tau_Tvc");
    *((_QWORD *)v149 + 1) = 4;
    v155 = v149 + 16;
  }
  if (v155 >= v70)
  {
    v162 = (v155 - v72) >> 4;
    v163 = v162 + 1;
    if ((unint64_t)(v162 + 1) >> 60)
      std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
    if ((v70 - v72) >> 3 > v163)
      v163 = (v70 - v72) >> 3;
    if ((unint64_t)(v70 - v72) >= 0x7FFFFFFFFFFFFFF0)
      v164 = 0xFFFFFFFFFFFFFFFLL;
    else
      v164 = v163;
    if (v164)
      v164 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<float (ASAFeatures::*)(ASAFrontEndInputState const*)>>(v164);
    v165 = (_QWORD *)(v164 + 16 * v162);
    *v165 = CFSTR("tau_Tmg");
    v165[1] = 5;
    v161 = (__int128 *)(v165 + 2);
    if (v155 == v72)
      goto LABEL_409;
    do
    {
      *((_OWORD *)v165 - 1) = *((_OWORD *)v155 - 1);
      v165 -= 2;
      v155 -= 16;
    }
    while (v155 != v72);
    if (v72)
LABEL_409:
      operator delete(v72);
    v72 = (char *)v165;
  }
  else
  {
    *(_QWORD *)v155 = CFSTR("tau_Tmg");
    *((_QWORD *)v155 + 1) = 5;
    v161 = (__int128 *)(v155 + 16);
  }
  if (v60 != __p)
  {
    if ((unint64_t)((v60 - __p) >> 4) <= 1)
      v166 = 1;
    else
      v166 = (v60 - __p) >> 4;
    v167 = (unsigned int *)(__p + 8);
    do
    {
      v168 = *((_QWORD *)this + 9);
      if (v168)
      {
        v169 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v168 + 32))(v168, 0);
      }
      else
      {
        v170 = (ausdk::AUElement **)*((_QWORD *)this + 6);
        if (*((ausdk::AUElement ***)this + 7) == v170)
          v169 = 0;
        else
          v169 = *v170;
      }
      v329 += AUSpeakerProtectionV3::SetParamFromPair((uint64_t)this, v169, *((__CFString **)v167 - 1), *v167, *(CACFDictionary **)a2);
      v167 += 4;
      --v166;
    }
    while (v166);
  }
  memset(v330, 0, sizeof(v330));
  std::vector<std::pair<__CFString const*,AUSPV3PartParams>>::__init_with_size[abi:ne180100]<std::pair<__CFString const*,AUSPV3PartParams>*,std::pair<__CFString const*,AUSPV3PartParams>*>(v330, (__int128 *)v72, v161, ((char *)v161 - v72) >> 4);
  v325 = AUSpeakerProtectionV3::SetChannelParamsFromPlist((uint64_t)this, (uint64_t *)v330, (const __CFDictionary **)a2);
  if (v330[0])
  {
    v330[1] = v330[0];
    operator delete(v330[0]);
  }
  v171 = spp3Subsystem();
  if (v171)
  {
    if ((*(_BYTE *)(v171 + 8) & 1) != 0)
    {
      v172 = *(NSObject **)v171;
      if (*(_QWORD *)v171)
      {
        if (os_log_type_enabled(*(os_log_t *)v171, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)buf = 136315394;
          *(_QWORD *)&buf[4] = "AUSpeakerProtectionV3.cpp";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = 3443;
          _os_log_impl(&dword_1B5ED0000, v172, OS_LOG_TYPE_DEBUG, "%25s:%-5d InitCLParamsFromPlistV8", buf, 0x12u);
        }
      }
    }
  }
  Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  v338 = 257;
  CACFDictionary::GetCACFDictionary((const __CFDictionary **)a2, CFSTR("CLParams"), (CACFDictionary *)&Mutable);
  if (Mutable)
  {
    v173 = AUSpeakerProtectionV3::SetCLChannelParamsFromPlist(this, &Mutable);
    v174 = *((_QWORD *)this + 85);
    v175 = *((_QWORD *)this + 84);
    if (v174 != v175)
    {
      v176 = 0;
      while (1)
      {
        v177 = *(_QWORD *)(v175 + 8 * v176);
        if (*(_QWORD *)(v177 + 56))
          break;
LABEL_457:
        if (++v176 >= (v174 - v175) >> 3)
          goto LABEL_458;
      }
      v178 = operator new(0x10uLL);
      *v178 = CFSTR("mu_Re");
      v178[1] = 37;
      v179 = std::__allocate_at_least[abi:ne180100]<std::allocator<float (ASAFeatures::*)(ASAFrontEndInputState const*)>>(2uLL);
      v181 = v180;
      v179[2] = CFSTR("mu_LeUni");
      v179[3] = 38;
      *(_OWORD *)v179 = *(_OWORD *)v178;
      operator delete(v178);
      if (v181 < 3)
      {
        v183 = 3;
        if ((unint64_t)((16 * v181) >> 3) > 3)
          v183 = (16 * v181) >> 3;
        if ((unint64_t)(16 * v181) >= 0x7FFFFFFFFFFFFFF0)
          v184 = 0xFFFFFFFFFFFFFFFLL;
        else
          v184 = v183;
        if (v184)
          v184 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<float (ASAFeatures::*)(ASAFrontEndInputState const*)>>(v184);
        v185 = 0;
        v186 = v184 + 32;
        *(_QWORD *)(v184 + 32) = CFSTR("mu_Mechanical");
        *(_QWORD *)(v184 + 40) = 39;
        v182 = (_QWORD *)(v184 + 48);
        do
        {
          *(_OWORD *)(v186 + v185 * 8 - 16) = *(_OWORD *)&v179[v185 + 2];
          v185 -= 2;
        }
        while (v185 != -4);
        if (v179)
          operator delete(v179);
        v179 = (_QWORD *)(v186 - 32);
        if ((_QWORD *)(v186 - 32) == v182)
        {
LABEL_455:
          operator delete(v179);
LABEL_456:
          v174 = *((_QWORD *)this + 85);
          v175 = *((_QWORD *)this + 84);
          goto LABEL_457;
        }
      }
      else
      {
        v179[4] = CFSTR("mu_Mechanical");
        v179[5] = 39;
        v182 = v179 + 6;
      }
      v187 = v179;
      do
      {
        v188 = *((_QWORD *)this + 104);
        if (v188)
        {
          v189 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)v188 + 32))(v188, v176);
        }
        else
        {
          v190 = *((_QWORD *)this + 101);
          if (v176 >= (*((_QWORD *)this + 102) - v190) >> 3)
            v189 = 0;
          else
            v189 = *(ausdk::AUElement **)(v190 + 8 * v176);
        }
        v173 += AUSpeakerProtectionV3::SetParamFromPair((uint64_t)this, v189, (__CFString *)*v187, *((_DWORD *)v187 + 2), **(CACFDictionary ***)(v177 + 56));
        v187 += 2;
      }
      while (v187 != v182);
      if (!v179)
        goto LABEL_456;
      goto LABEL_455;
    }
LABEL_458:
    theArray = CFArrayCreateMutable(0, 0, MEMORY[0x1E0C9B378]);
    v336 = 257;
    CACFDictionary::GetCACFArray(&Mutable, CFSTR("ChannelSpecificParams"), (CACFArray *)&theArray);
    Count = (int)theArray;
    if (theArray)
      Count = CFArrayGetCount(theArray);
    if (Count == *((_DWORD *)this + 158))
    {
      *(_QWORD *)buf = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
      *(_WORD *)&buf[8] = 257;
      if (*((_DWORD *)this + 158))
      {
        v192 = 0;
        do
        {
          CACFArray::GetCACFDictionary(&theArray, v192, (CACFDictionary *)buf);
          *(_DWORD *)v339 = -1;
          CACFDictionary::GetSInt32(*(uint64_t *)buf, CFSTR("ChannelID"), (int *)v339);
          if (v192 == *(int *)v339)
          {
            v193 = *((_QWORD *)this + 104);
            if (v193)
            {
              v194 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)v193 + 32))(v193, v192);
            }
            else
            {
              v195 = *((_QWORD *)this + 101);
              if (v192 >= (*((_QWORD *)this + 102) - v195) >> 3)
                v194 = 0;
              else
                v194 = *(ausdk::AUElement **)(v195 + 8 * v192);
            }
            inited = AUSpeakerProtectionV3::InitCLParamsFromPlist(this, v194, (CACFDictionary **)buf);
            LODWORD(v333[0]) = 0;
            v173 += inited;
            if ((CACFDictionary::GetSInt32(*(uint64_t *)buf, CFSTR("DisplacementProtectionType"), (int *)v333) & 1) != 0)
            {
              v197 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float (ASAFeatures::*)(ASAFrontEndInputState const*)>>(1uLL);
              v199 = v197;
              *(_QWORD *)v197 = CFSTR("DisplacementProtectionType");
              *((_QWORD *)v197 + 1) = 42;
              v200 = v197 + 16;
              if (LODWORD(v333[0]) == 4 || LODWORD(v333[0]) == 1)
              {
                v201 = &v197[16 * v198];
                if (v198 < 2)
                {
                  v203 = 2;
                  if ((unint64_t)((16 * v198) >> 3) > 2)
                    v203 = (16 * v198) >> 3;
                  v204 = (char *)((unint64_t)(16 * v198) >= 0x7FFFFFFFFFFFFFF0 ? 0xFFFFFFFFFFFFFFFLL : v203);
                  if (v204)
                    v204 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float (ASAFeatures::*)(ASAFrontEndInputState const*)>>((unint64_t)v204);
                  else
                    v205 = 0;
                  v206 = 0;
                  v201 = &v204[16 * v205];
                  *((_QWORD *)v204 + 2) = CFSTR("ConvoyPeakFinderThresholdUpper");
                  *((_QWORD *)v204 + 3) = 47;
                  v202 = v204 + 32;
                  do
                  {
                    *(_OWORD *)&v204[v206] = *(_OWORD *)&v199[v206];
                    v206 -= 16;
                  }
                  while (v206 != -16);
                  v207 = v204;
                  operator delete(v199);
                  v199 = v207;
                }
                else
                {
                  *((_QWORD *)v197 + 2) = CFSTR("ConvoyPeakFinderThresholdUpper");
                  *((_QWORD *)v197 + 3) = 47;
                  v202 = v197 + 32;
                }
                if (v202 >= v201)
                {
                  v209 = (v202 - v199) >> 4;
                  v210 = v209 + 1;
                  if ((unint64_t)(v209 + 1) >> 60)
                    std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
                  if ((v201 - v199) >> 3 > v210)
                    v210 = (v201 - v199) >> 3;
                  v211 = (char *)((unint64_t)(v201 - v199) >= 0x7FFFFFFFFFFFFFF0 ? 0xFFFFFFFFFFFFFFFLL : v210);
                  if (v211)
                    v211 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float (ASAFeatures::*)(ASAFrontEndInputState const*)>>((unint64_t)v211);
                  else
                    v212 = 0;
                  v213 = &v211[16 * v209];
                  *(_QWORD *)v213 = CFSTR("ConvoyPeakFinderThresholdLower");
                  *((_QWORD *)v213 + 1) = 48;
                  if (v202 == v199)
                  {
                    v215 = &v211[16 * v209];
                  }
                  else
                  {
                    v214 = &v211[16 * v209];
                    do
                    {
                      v215 = v214 - 16;
                      *((_OWORD *)v214 - 1) = *((_OWORD *)v202 - 1);
                      v202 -= 16;
                      v214 -= 16;
                    }
                    while (v202 != v199);
                  }
                  v201 = &v211[16 * v212];
                  v208 = v213 + 16;
                  operator delete(v199);
                  v199 = v215;
                }
                else
                {
                  *(_QWORD *)v202 = CFSTR("ConvoyPeakFinderThresholdLower");
                  *((_QWORD *)v202 + 1) = 48;
                  v208 = v202 + 16;
                }
                if (v208 >= v201)
                {
                  v217 = (v208 - v199) >> 4;
                  v218 = v217 + 1;
                  if ((unint64_t)(v217 + 1) >> 60)
                    std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
                  if ((v201 - v199) >> 3 > v218)
                    v218 = (v201 - v199) >> 3;
                  v219 = (char *)((unint64_t)(v201 - v199) >= 0x7FFFFFFFFFFFFFF0 ? 0xFFFFFFFFFFFFFFFLL : v218);
                  if (v219)
                    v219 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float (ASAFeatures::*)(ASAFrontEndInputState const*)>>((unint64_t)v219);
                  else
                    v220 = 0;
                  v221 = &v219[16 * v217];
                  *(_QWORD *)v221 = CFSTR("ConvoyPeakDetectorAtkTime");
                  *((_QWORD *)v221 + 1) = 49;
                  if (v208 == v199)
                  {
                    v223 = &v219[16 * v217];
                  }
                  else
                  {
                    v222 = &v219[16 * v217];
                    do
                    {
                      v223 = v222 - 16;
                      *((_OWORD *)v222 - 1) = *((_OWORD *)v208 - 1);
                      v208 -= 16;
                      v222 -= 16;
                    }
                    while (v208 != v199);
                  }
                  v201 = &v219[16 * v220];
                  v216 = v221 + 16;
                  operator delete(v199);
                  v199 = v223;
                }
                else
                {
                  *(_QWORD *)v208 = CFSTR("ConvoyPeakDetectorAtkTime");
                  *((_QWORD *)v208 + 1) = 49;
                  v216 = v208 + 16;
                }
                if (v216 >= v201)
                {
                  v225 = (v216 - v199) >> 4;
                  v226 = v225 + 1;
                  if ((unint64_t)(v225 + 1) >> 60)
                    std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
                  if ((v201 - v199) >> 3 > v226)
                    v226 = (v201 - v199) >> 3;
                  v227 = (char *)((unint64_t)(v201 - v199) >= 0x7FFFFFFFFFFFFFF0 ? 0xFFFFFFFFFFFFFFFLL : v226);
                  if (v227)
                    v227 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float (ASAFeatures::*)(ASAFrontEndInputState const*)>>((unint64_t)v227);
                  else
                    v228 = 0;
                  v229 = &v227[16 * v225];
                  *(_QWORD *)v229 = CFSTR("ConvoyPeakDetectorRelTime");
                  *((_QWORD *)v229 + 1) = 50;
                  if (v216 == v199)
                  {
                    v231 = &v227[16 * v225];
                  }
                  else
                  {
                    v230 = &v227[16 * v225];
                    do
                    {
                      v231 = v230 - 16;
                      *((_OWORD *)v230 - 1) = *((_OWORD *)v216 - 1);
                      v216 -= 16;
                      v230 -= 16;
                    }
                    while (v216 != v199);
                  }
                  v201 = &v227[16 * v228];
                  v224 = v229 + 16;
                  operator delete(v199);
                  v199 = v231;
                }
                else
                {
                  *(_QWORD *)v216 = CFSTR("ConvoyPeakDetectorRelTime");
                  *((_QWORD *)v216 + 1) = 50;
                  v224 = v216 + 16;
                }
                if (v224 >= v201)
                {
                  v233 = (v224 - v199) >> 4;
                  v234 = v233 + 1;
                  if ((unint64_t)(v233 + 1) >> 60)
                    std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
                  if ((v201 - v199) >> 3 > v234)
                    v234 = (v201 - v199) >> 3;
                  if ((unint64_t)(v201 - v199) >= 0x7FFFFFFFFFFFFFF0)
                    v235 = 0xFFFFFFFFFFFFFFFLL;
                  else
                    v235 = v234;
                  if (v235)
                    v235 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<float (ASAFeatures::*)(ASAFrontEndInputState const*)>>(v235);
                  else
                    v236 = 0;
                  v237 = (_QWORD *)(v235 + 16 * v233);
                  v201 = (char *)(v235 + 16 * v236);
                  *v237 = CFSTR("ConvoyNormFactorCapUpper");
                  v237[1] = 51;
                  v232 = (char *)(v237 + 2);
                  if (v224 == v199)
                    goto LABEL_551;
                  do
                  {
                    *((_OWORD *)v237 - 1) = *((_OWORD *)v224 - 1);
                    v237 -= 2;
                    v224 -= 16;
                  }
                  while (v224 != v199);
                  if (v199)
LABEL_551:
                    operator delete(v199);
                  v199 = (char *)v237;
                }
                else
                {
                  *(_QWORD *)v224 = CFSTR("ConvoyNormFactorCapUpper");
                  *((_QWORD *)v224 + 1) = 51;
                  v232 = v224 + 16;
                }
                if (v232 >= v201)
                {
                  v239 = (v232 - v199) >> 4;
                  v240 = v239 + 1;
                  if ((unint64_t)(v239 + 1) >> 60)
                    std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
                  if ((v201 - v199) >> 3 > v240)
                    v240 = (v201 - v199) >> 3;
                  if ((unint64_t)(v201 - v199) >= 0x7FFFFFFFFFFFFFF0)
                    v241 = 0xFFFFFFFFFFFFFFFLL;
                  else
                    v241 = v240;
                  if (v241)
                    v241 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<float (ASAFeatures::*)(ASAFrontEndInputState const*)>>(v241);
                  else
                    v242 = 0;
                  v243 = (_QWORD *)(v241 + 16 * v239);
                  v201 = (char *)(v241 + 16 * v242);
                  *v243 = CFSTR("ConvoyNormFactorCapLower");
                  v243[1] = 52;
                  v238 = (char *)(v243 + 2);
                  if (v232 == v199)
                    goto LABEL_567;
                  do
                  {
                    *((_OWORD *)v243 - 1) = *((_OWORD *)v232 - 1);
                    v243 -= 2;
                    v232 -= 16;
                  }
                  while (v232 != v199);
                  if (v199)
LABEL_567:
                    operator delete(v199);
                  v199 = (char *)v243;
                }
                else
                {
                  *(_QWORD *)v232 = CFSTR("ConvoyNormFactorCapLower");
                  *((_QWORD *)v232 + 1) = 52;
                  v238 = v232 + 16;
                }
                if (v238 >= v201)
                {
                  v245 = (v238 - v199) >> 4;
                  v246 = v245 + 1;
                  if ((unint64_t)(v245 + 1) >> 60)
                    std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
                  if ((v201 - v199) >> 3 > v246)
                    v246 = (v201 - v199) >> 3;
                  if ((unint64_t)(v201 - v199) >= 0x7FFFFFFFFFFFFFF0)
                    v247 = 0xFFFFFFFFFFFFFFFLL;
                  else
                    v247 = v246;
                  if (v247)
                    v247 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<float (ASAFeatures::*)(ASAFrontEndInputState const*)>>(v247);
                  else
                    v248 = 0;
                  v249 = (_QWORD *)(v247 + 16 * v245);
                  v201 = (char *)(v247 + 16 * v248);
                  *v249 = CFSTR("ConvoyNormFactorAttack");
                  v249[1] = 53;
                  v244 = (char *)(v249 + 2);
                  if (v238 == v199)
                    goto LABEL_583;
                  do
                  {
                    *((_OWORD *)v249 - 1) = *((_OWORD *)v238 - 1);
                    v249 -= 2;
                    v238 -= 16;
                  }
                  while (v238 != v199);
                  if (v199)
LABEL_583:
                    operator delete(v199);
                  v199 = (char *)v249;
                }
                else
                {
                  *(_QWORD *)v238 = CFSTR("ConvoyNormFactorAttack");
                  *((_QWORD *)v238 + 1) = 53;
                  v244 = v238 + 16;
                }
                if (v244 >= v201)
                {
                  v251 = (v244 - v199) >> 4;
                  v252 = v251 + 1;
                  if ((unint64_t)(v251 + 1) >> 60)
                    std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
                  if ((v201 - v199) >> 3 > v252)
                    v252 = (v201 - v199) >> 3;
                  if ((unint64_t)(v201 - v199) >= 0x7FFFFFFFFFFFFFF0)
                    v253 = 0xFFFFFFFFFFFFFFFLL;
                  else
                    v253 = v252;
                  if (v253)
                    v253 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<float (ASAFeatures::*)(ASAFrontEndInputState const*)>>(v253);
                  else
                    v254 = 0;
                  v255 = (_QWORD *)(v253 + 16 * v251);
                  v201 = (char *)(v253 + 16 * v254);
                  *v255 = CFSTR("ConvoyNormFactorRelease");
                  v255[1] = 54;
                  v250 = (char *)(v255 + 2);
                  if (v244 == v199)
                    goto LABEL_599;
                  do
                  {
                    *((_OWORD *)v255 - 1) = *((_OWORD *)v244 - 1);
                    v255 -= 2;
                    v244 -= 16;
                  }
                  while (v244 != v199);
                  if (v199)
LABEL_599:
                    operator delete(v199);
                  v199 = (char *)v255;
                }
                else
                {
                  *(_QWORD *)v244 = CFSTR("ConvoyNormFactorRelease");
                  *((_QWORD *)v244 + 1) = 54;
                  v250 = v244 + 16;
                }
                if (v250 >= v201)
                {
                  v257 = (v250 - v199) >> 4;
                  v258 = v257 + 1;
                  if ((unint64_t)(v257 + 1) >> 60)
                    std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
                  if ((v201 - v199) >> 3 > v258)
                    v258 = (v201 - v199) >> 3;
                  if ((unint64_t)(v201 - v199) >= 0x7FFFFFFFFFFFFFF0)
                    v259 = 0xFFFFFFFFFFFFFFFLL;
                  else
                    v259 = v258;
                  if (v259)
                    v259 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<float (ASAFeatures::*)(ASAFrontEndInputState const*)>>(v259);
                  else
                    v260 = 0;
                  v261 = (_QWORD *)(v259 + 16 * v257);
                  v201 = (char *)(v259 + 16 * v260);
                  *v261 = CFSTR("ConvoyPeakRatioPosBlockThreshold");
                  v261[1] = 55;
                  v256 = (char *)(v261 + 2);
                  if (v250 == v199)
                    goto LABEL_615;
                  do
                  {
                    *((_OWORD *)v261 - 1) = *((_OWORD *)v250 - 1);
                    v261 -= 2;
                    v250 -= 16;
                  }
                  while (v250 != v199);
                  if (v199)
LABEL_615:
                    operator delete(v199);
                  v199 = (char *)v261;
                }
                else
                {
                  *(_QWORD *)v250 = CFSTR("ConvoyPeakRatioPosBlockThreshold");
                  *((_QWORD *)v250 + 1) = 55;
                  v256 = v250 + 16;
                }
                if (v256 >= v201)
                {
                  v263 = (v256 - v199) >> 4;
                  v264 = v263 + 1;
                  if ((unint64_t)(v263 + 1) >> 60)
                    std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
                  if ((v201 - v199) >> 3 > v264)
                    v264 = (v201 - v199) >> 3;
                  if ((unint64_t)(v201 - v199) >= 0x7FFFFFFFFFFFFFF0)
                    v265 = 0xFFFFFFFFFFFFFFFLL;
                  else
                    v265 = v264;
                  if (v265)
                    v265 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<float (ASAFeatures::*)(ASAFrontEndInputState const*)>>(v265);
                  else
                    v266 = 0;
                  v267 = (_QWORD *)(v265 + 16 * v263);
                  v201 = (char *)(v265 + 16 * v266);
                  *v267 = CFSTR("ConvoyPeakRatioNegBlockThreshold");
                  v267[1] = 56;
                  v262 = (char *)(v267 + 2);
                  if (v256 == v199)
                    goto LABEL_631;
                  do
                  {
                    *((_OWORD *)v267 - 1) = *((_OWORD *)v256 - 1);
                    v267 -= 2;
                    v256 -= 16;
                  }
                  while (v256 != v199);
                  if (v199)
LABEL_631:
                    operator delete(v199);
                  v199 = (char *)v267;
                }
                else
                {
                  *(_QWORD *)v256 = CFSTR("ConvoyPeakRatioNegBlockThreshold");
                  *((_QWORD *)v256 + 1) = 56;
                  v262 = v256 + 16;
                }
                if (v262 >= v201)
                {
                  v269 = (v262 - v199) >> 4;
                  v270 = v269 + 1;
                  if ((unint64_t)(v269 + 1) >> 60)
                    std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
                  if ((v201 - v199) >> 3 > v270)
                    v270 = (v201 - v199) >> 3;
                  if ((unint64_t)(v201 - v199) >= 0x7FFFFFFFFFFFFFF0)
                    v271 = 0xFFFFFFFFFFFFFFFLL;
                  else
                    v271 = v270;
                  if (v271)
                    v271 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<float (ASAFeatures::*)(ASAFrontEndInputState const*)>>(v271);
                  else
                    v272 = 0;
                  v273 = (_QWORD *)(v271 + 16 * v269);
                  v201 = (char *)(v271 + 16 * v272);
                  *v273 = CFSTR("ConvoyMinExcursion");
                  v273[1] = 57;
                  v268 = (char *)(v273 + 2);
                  if (v262 == v199)
                    goto LABEL_647;
                  do
                  {
                    *((_OWORD *)v273 - 1) = *((_OWORD *)v262 - 1);
                    v273 -= 2;
                    v262 -= 16;
                  }
                  while (v262 != v199);
                  if (v199)
LABEL_647:
                    operator delete(v199);
                  v199 = (char *)v273;
                }
                else
                {
                  *(_QWORD *)v262 = CFSTR("ConvoyMinExcursion");
                  *((_QWORD *)v262 + 1) = 57;
                  v268 = v262 + 16;
                }
                if (v268 >= v201)
                {
                  v275 = (v268 - v199) >> 4;
                  v276 = v275 + 1;
                  if ((unint64_t)(v275 + 1) >> 60)
                    std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
                  if ((v201 - v199) >> 3 > v276)
                    v276 = (v201 - v199) >> 3;
                  if ((unint64_t)(v201 - v199) >= 0x7FFFFFFFFFFFFFF0)
                    v277 = 0xFFFFFFFFFFFFFFFLL;
                  else
                    v277 = v276;
                  if (v277)
                    v277 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<float (ASAFeatures::*)(ASAFrontEndInputState const*)>>(v277);
                  else
                    v278 = 0;
                  v279 = (_QWORD *)(v277 + 16 * v275);
                  v201 = (char *)(v277 + 16 * v278);
                  *v279 = CFSTR("ConvoyMaxExcursion");
                  v279[1] = 58;
                  v274 = (char *)(v279 + 2);
                  if (v268 == v199)
                    goto LABEL_663;
                  do
                  {
                    *((_OWORD *)v279 - 1) = *((_OWORD *)v268 - 1);
                    v279 -= 2;
                    v268 -= 16;
                  }
                  while (v268 != v199);
                  if (v199)
LABEL_663:
                    operator delete(v199);
                  v199 = (char *)v279;
                }
                else
                {
                  *(_QWORD *)v268 = CFSTR("ConvoyMaxExcursion");
                  *((_QWORD *)v268 + 1) = 58;
                  v274 = v268 + 16;
                }
                if (v274 >= v201)
                {
                  v281 = (v274 - v199) >> 4;
                  v282 = v281 + 1;
                  if ((unint64_t)(v281 + 1) >> 60)
                    std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
                  if ((v201 - v199) >> 3 > v282)
                    v282 = (v201 - v199) >> 3;
                  if ((unint64_t)(v201 - v199) >= 0x7FFFFFFFFFFFFFF0)
                    v283 = 0xFFFFFFFFFFFFFFFLL;
                  else
                    v283 = v282;
                  if (v283)
                    v283 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<float (ASAFeatures::*)(ASAFrontEndInputState const*)>>(v283);
                  else
                    v284 = 0;
                  v285 = (_QWORD *)(v283 + 16 * v281);
                  v201 = (char *)(v283 + 16 * v284);
                  *v285 = CFSTR("ConvoyRelXLimUpper");
                  v285[1] = 59;
                  v280 = (char *)(v285 + 2);
                  if (v274 == v199)
                    goto LABEL_679;
                  do
                  {
                    *((_OWORD *)v285 - 1) = *((_OWORD *)v274 - 1);
                    v285 -= 2;
                    v274 -= 16;
                  }
                  while (v274 != v199);
                  if (v199)
LABEL_679:
                    operator delete(v199);
                  v199 = (char *)v285;
                }
                else
                {
                  *(_QWORD *)v274 = CFSTR("ConvoyRelXLimUpper");
                  *((_QWORD *)v274 + 1) = 59;
                  v280 = v274 + 16;
                }
                if (v280 >= v201)
                {
                  v287 = (v280 - v199) >> 4;
                  v288 = v287 + 1;
                  if ((unint64_t)(v287 + 1) >> 60)
                    std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
                  if ((v201 - v199) >> 3 > v288)
                    v288 = (v201 - v199) >> 3;
                  if ((unint64_t)(v201 - v199) >= 0x7FFFFFFFFFFFFFF0)
                    v289 = 0xFFFFFFFFFFFFFFFLL;
                  else
                    v289 = v288;
                  if (v289)
                    v289 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<float (ASAFeatures::*)(ASAFrontEndInputState const*)>>(v289);
                  else
                    v290 = 0;
                  v291 = (_QWORD *)(v289 + 16 * v287);
                  v201 = (char *)(v289 + 16 * v290);
                  *v291 = CFSTR("ConvoyRelXLimLower");
                  v291[1] = 60;
                  v286 = (char *)(v291 + 2);
                  if (v280 == v199)
                    goto LABEL_695;
                  do
                  {
                    *((_OWORD *)v291 - 1) = *((_OWORD *)v280 - 1);
                    v291 -= 2;
                    v280 -= 16;
                  }
                  while (v280 != v199);
                  if (v199)
LABEL_695:
                    operator delete(v199);
                  v199 = (char *)v291;
                }
                else
                {
                  *(_QWORD *)v280 = CFSTR("ConvoyRelXLimLower");
                  *((_QWORD *)v280 + 1) = 60;
                  v286 = v280 + 16;
                }
                if (v286 >= v201)
                {
                  v293 = (v286 - v199) >> 4;
                  v294 = v293 + 1;
                  if ((unint64_t)(v293 + 1) >> 60)
                    std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
                  if ((v201 - v199) >> 3 > v294)
                    v294 = (v201 - v199) >> 3;
                  if ((unint64_t)(v201 - v199) >= 0x7FFFFFFFFFFFFFF0)
                    v295 = 0xFFFFFFFFFFFFFFFLL;
                  else
                    v295 = v294;
                  if (v295)
                    v295 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<float (ASAFeatures::*)(ASAFrontEndInputState const*)>>(v295);
                  else
                    v296 = 0;
                  v297 = (_QWORD *)(v295 + 16 * v293);
                  v201 = (char *)(v295 + 16 * v296);
                  *v297 = CFSTR("ConvoyPeakRatiosInWindowCountThreshold");
                  v297[1] = 61;
                  v292 = (char *)(v297 + 2);
                  if (v286 == v199)
                    goto LABEL_711;
                  do
                  {
                    *((_OWORD *)v297 - 1) = *((_OWORD *)v286 - 1);
                    v297 -= 2;
                    v286 -= 16;
                  }
                  while (v286 != v199);
                  if (v199)
LABEL_711:
                    operator delete(v199);
                  v199 = (char *)v297;
                }
                else
                {
                  *(_QWORD *)v286 = CFSTR("ConvoyPeakRatiosInWindowCountThreshold");
                  *((_QWORD *)v286 + 1) = 61;
                  v292 = v286 + 16;
                }
                if (v292 >= v201)
                {
                  v299 = (v292 - v199) >> 4;
                  v300 = v299 + 1;
                  if ((unint64_t)(v299 + 1) >> 60)
                    std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
                  if ((v201 - v199) >> 3 > v300)
                    v300 = (v201 - v199) >> 3;
                  if ((unint64_t)(v201 - v199) >= 0x7FFFFFFFFFFFFFF0)
                    v301 = 0xFFFFFFFFFFFFFFFLL;
                  else
                    v301 = v300;
                  if (v301)
                    v301 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<float (ASAFeatures::*)(ASAFrontEndInputState const*)>>(v301);
                  else
                    v302 = 0;
                  v303 = (_QWORD *)(v301 + 16 * v299);
                  v201 = (char *)(v301 + 16 * v302);
                  *v303 = CFSTR("ConvoyNormFactorThreshold");
                  v303[1] = 62;
                  v298 = (char *)(v303 + 2);
                  if (v292 == v199)
                    goto LABEL_727;
                  do
                  {
                    *((_OWORD *)v303 - 1) = *((_OWORD *)v292 - 1);
                    v303 -= 2;
                    v292 -= 16;
                  }
                  while (v292 != v199);
                  if (v199)
LABEL_727:
                    operator delete(v199);
                  v199 = (char *)v303;
                }
                else
                {
                  *(_QWORD *)v292 = CFSTR("ConvoyNormFactorThreshold");
                  *((_QWORD *)v292 + 1) = 62;
                  v298 = v292 + 16;
                }
                if (v298 >= v201)
                {
                  v304 = (v298 - v199) >> 4;
                  v305 = v304 + 1;
                  if ((unint64_t)(v304 + 1) >> 60)
                    std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
                  if ((v201 - v199) >> 3 > v305)
                    v305 = (v201 - v199) >> 3;
                  if ((unint64_t)(v201 - v199) >= 0x7FFFFFFFFFFFFFF0)
                    v306 = 0xFFFFFFFFFFFFFFFLL;
                  else
                    v306 = v305;
                  if (v306)
                    v306 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<float (ASAFeatures::*)(ASAFrontEndInputState const*)>>(v306);
                  v307 = (_QWORD *)(v306 + 16 * v304);
                  *v307 = CFSTR("ConvoyBufferDirtyCountThreshold_ms");
                  v307[1] = 63;
                  v200 = (char *)(v307 + 2);
                  if (v298 == v199)
                    goto LABEL_742;
                  do
                  {
                    *((_OWORD *)v307 - 1) = *((_OWORD *)v298 - 1);
                    v307 -= 2;
                    v298 -= 16;
                  }
                  while (v298 != v199);
                  if (v199)
LABEL_742:
                    operator delete(v199);
                  v199 = (char *)v307;
                }
                else
                {
                  *(_QWORD *)v298 = CFSTR("ConvoyBufferDirtyCountThreshold_ms");
                  *((_QWORD *)v298 + 1) = 63;
                  v200 = v298 + 16;
                }
                if (v199 == v200)
                  goto LABEL_753;
              }
              v308 = v199;
              do
              {
                v309 = *((_QWORD *)this + 104);
                if (v309)
                {
                  v310 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)v309
                                                                                                  + 32))(v309, v192);
                }
                else
                {
                  v311 = *((_QWORD *)this + 101);
                  if (v192 >= (*((_QWORD *)this + 102) - v311) >> 3)
                    v310 = 0;
                  else
                    v310 = *(ausdk::AUElement **)(v311 + 8 * v192);
                }
                v173 += AUSpeakerProtectionV3::SetParamFromPair((uint64_t)this, v310, *(__CFString **)v308, *((_DWORD *)v308 + 2), *(CACFDictionary **)buf);
                v308 += 16;
              }
              while (v308 != v200);
              if (v199)
LABEL_753:
                operator delete(v199);
            }
          }
          else
          {
            ++v173;
          }
          ++v192;
        }
        while (v192 < *((unsigned int *)this + 158));
      }
      CACFDictionary::~CACFDictionary((CACFDictionary *)buf);
    }
    if (v173)
    {
      CACFArray::~CACFArray((CACFArray *)&theArray);
      goto LABEL_779;
    }
    v314 = (uint64_t *)*((_QWORD *)this + 84);
    v315 = (uint64_t *)*((_QWORD *)this + 85);
    if (v314 == v315)
    {
LABEL_775:
      CACFArray::~CACFArray((CACFArray *)&theArray);
      CACFDictionary::~CACFDictionary((CACFDictionary *)&Mutable);
      LOBYTE(v322) = 1;
      goto LABEL_783;
    }
    v316 = 0;
    v317 = *MEMORY[0x1E0DE4F60];
    v327 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
    v318 = MEMORY[0x1E0DE4FB8] + 16;
    while (1)
    {
      std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)buf);
      clsp::ClosedLoopParameters::dump(*v314, buf);
      v319 = (NSObject **)spp3Subsystem();
      if (!v319)
        break;
      v320 = *v319;
      if (*v319)
        goto LABEL_767;
LABEL_772:
      *(_QWORD *)buf = v317;
      *(_QWORD *)&buf[*(_QWORD *)(v317 - 24)] = v327;
      *(_QWORD *)&buf[8] = v318;
      if (v349 < 0)
        operator delete(v348);
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      MEMORY[0x1BCC95BE4](v350);
      ++v314;
      ++v316;
      if (v314 == v315)
        goto LABEL_775;
    }
    v320 = MEMORY[0x1E0C81028];
LABEL_767:
    if (os_log_type_enabled(v320, OS_LOG_TYPE_DEBUG))
    {
      std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)&buf[8], v333);
      v321 = v333;
      if (v334 < 0)
        v321 = (void **)v333[0];
      *(_DWORD *)v339 = 136315906;
      v340 = "AUSpeakerProtectionV3.cpp";
      v341 = 1024;
      v342 = 3525;
      v343 = 1024;
      v344 = v316;
      v345 = 2080;
      v346 = v321;
      _os_log_impl(&dword_1B5ED0000, v320, OS_LOG_TYPE_DEBUG, "%25s:%-5d Ch %d, CLParams:\n%s", v339, 0x22u);
      if (v334 < 0)
        operator delete(v333[0]);
    }
    goto LABEL_772;
  }
  v312 = (NSObject **)spp3Subsystem();
  if (!v312)
  {
    v313 = MEMORY[0x1E0C81028];
LABEL_777:
    if (os_log_type_enabled(v313, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136315394;
      *(_QWORD *)&buf[4] = "AUSpeakerProtectionV3.cpp";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 3450;
      _os_log_impl(&dword_1B5ED0000, v313, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Cannot get CLParams Key", buf, 0x12u);
    }
    goto LABEL_779;
  }
  v313 = *v312;
  if (*v312)
    goto LABEL_777;
LABEL_779:
  CACFDictionary::~CACFDictionary((CACFDictionary *)&Mutable);
  v322 = *((_DWORD *)this + 158);
  if (v322)
  {
    v323 = 0;
    do
      AUSpeakerProtectionV3::SetClosedLoopEnabled(this, v323++, 0);
    while (v323 < *((_DWORD *)this + 158));
    LOBYTE(v322) = 0;
  }
LABEL_783:
  *((_BYTE *)this + 529) = v322;
  if (!(v329 + v325))
  {
    *((_BYTE *)this + 528) = 1;
    ausdk::AUScope::SetNumberOfElements((int64x2_t *)((char *)this + 792), *((_DWORD *)this + 158));
    if (!v72)
      goto LABEL_786;
    goto LABEL_785;
  }
  v326 = -50;
  if (v72)
LABEL_785:
    operator delete(v72);
LABEL_786:
  if (__p)
    operator delete(__p);
  return v326;
}

void sub_1B641B704(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
  void *v33;

  CACFArray::~CACFArray((CACFArray *)&a22);
  CACFDictionary::~CACFDictionary((CACFDictionary *)&a24);
  if (v33)
    operator delete(v33);
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t AUSpeakerProtectionV3::InitParamsFromPlistV9(AUSpeakerProtectionV3 *this, CFTypeRef cf)
{
  const __CFNumber *v3;
  uint64_t v4;
  int v5;
  NSObject **v6;
  NSObject *v7;
  int v8;
  unsigned int *v9;
  unsigned int *v10;
  unsigned int v11;
  std::string *v12;
  __int128 v13;
  NSObject **v14;
  NSObject *v15;
  float v16;
  float v17;
  float v18;
  float v19;
  float v20;
  float v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float v29;
  float v30;
  unint64_t v31;
  unint64_t v32;
  char *v33;
  unsigned int *v34;
  char *v35;
  unsigned int *v36;
  __int128 v37;
  __int128 v38;
  char *v39;
  NSObject **v40;
  NSObject *v41;
  NSObject **v42;
  NSObject *v43;
  int v44;
  char *v45;
  float *v46;
  unsigned int v47;
  std::string *v48;
  __int128 v49;
  NSObject **v50;
  NSObject *v51;
  float v52;
  float v53;
  float v54;
  float v55;
  float v56;
  float v57;
  float v58;
  float v59;
  float v60;
  float v61;
  float v62;
  float v63;
  float v64;
  float v65;
  float v66;
  float v67;
  unint64_t v68;
  unint64_t v69;
  char *v70;
  unsigned int *v71;
  char *v72;
  char *v73;
  __int128 v74;
  __int128 v75;
  char *v76;
  NSObject **v77;
  NSObject *v78;
  NSObject **v79;
  NSObject *v80;
  NSObject **v81;
  NSObject *v82;
  std::string *v83;
  __int128 v84;
  uint64_t v85;
  std::string *p_cfa;
  std::__split_buffer<std::string>::pointer v87;
  void *first;
  const std::string::value_type *v89;
  std::string::size_type v90;
  std::string *v91;
  __int128 v92;
  std::string *v93;
  __int128 v94;
  std::string *v95;
  __int128 v96;
  uint64_t v97;
  std::string *v98;
  std::__split_buffer<std::string>::pointer v99;
  void *v100;
  const std::string::value_type *v101;
  std::string::size_type v102;
  std::string *v103;
  __int128 v104;
  std::string *v105;
  __int128 v106;
  std::string *v107;
  __int128 v108;
  uint64_t v109;
  std::string *v110;
  std::__split_buffer<std::string>::pointer v111;
  void *v112;
  const std::string::value_type *v113;
  std::string::size_type v114;
  std::string *v115;
  __int128 v116;
  std::string *v117;
  __int128 v118;
  std::string *v119;
  __int128 v120;
  uint64_t v121;
  std::string *v122;
  std::__split_buffer<std::string>::pointer v123;
  void *v124;
  const std::string::value_type *v125;
  std::string::size_type v126;
  std::string *v127;
  __int128 v128;
  std::string *v129;
  __int128 v130;
  std::string *v131;
  __int128 v132;
  uint64_t v133;
  std::string *v134;
  std::__split_buffer<std::string>::pointer v135;
  void *v136;
  const std::string::value_type *v137;
  std::string::size_type v138;
  std::string *v139;
  __int128 v140;
  std::string *v141;
  __int128 v142;
  std::string *v143;
  __int128 v144;
  uint64_t v145;
  std::string *v146;
  std::__split_buffer<std::string>::pointer v147;
  void *v148;
  const std::string::value_type *v149;
  std::string::size_type v150;
  std::string *v151;
  __int128 v152;
  std::string *v153;
  __int128 v154;
  std::string *v155;
  __int128 v156;
  uint64_t v157;
  std::string *v158;
  std::__split_buffer<std::string>::pointer v159;
  void *v160;
  const std::string::value_type *v161;
  std::string::size_type v162;
  std::string *v163;
  __int128 v164;
  std::string *v165;
  __int128 v166;
  std::string *v167;
  __int128 v168;
  uint64_t v169;
  std::string *v170;
  std::__split_buffer<std::string>::pointer v171;
  void *v172;
  const std::string::value_type *v173;
  std::string::size_type v174;
  std::string *v175;
  __int128 v176;
  std::string *v177;
  __int128 v178;
  std::string *v179;
  __int128 v180;
  uint64_t v181;
  std::string *v182;
  std::__split_buffer<std::string>::pointer v183;
  void *v184;
  const std::string::value_type *v185;
  std::string::size_type v186;
  std::string *v187;
  __int128 v188;
  std::string *v189;
  __int128 v190;
  std::string *v191;
  __int128 v192;
  uint64_t v193;
  std::string *v194;
  std::__split_buffer<std::string>::pointer v195;
  void *v196;
  const std::string::value_type *v197;
  std::string::size_type v198;
  std::string *v199;
  __int128 v200;
  std::string *v201;
  std::string::size_type size;
  std::string *v203;
  __int128 v204;
  std::string *v205;
  std::string::size_type v206;
  std::string *v207;
  __int128 v208;
  std::string *v209;
  std::string::size_type v210;
  std::string *v211;
  __int128 v212;
  std::string *v213;
  std::string::size_type v214;
  std::string *v215;
  __int128 v216;
  std::string *v217;
  std::string::size_type v218;
  std::string *v219;
  __int128 v220;
  std::string *v221;
  std::string::size_type v222;
  std::string *v223;
  __int128 v224;
  std::string *v225;
  std::string::size_type v226;
  std::string *v227;
  __int128 v228;
  const std::string::value_type *v229;
  std::string::size_type v230;
  std::string *v231;
  __int128 v232;
  void **v233;
  std::string::size_type v234;
  std::string *v235;
  std::string *v236;
  __int128 v237;
  void **v238;
  uint64_t v239;
  ausdk::AUElement *v240;
  ausdk::AUElement **v241;
  float *v242;
  NSObject **v243;
  NSObject *v244;
  float v245;
  float v246;
  float v247;
  float v248;
  float v249;
  float v250;
  float v251;
  float v252;
  float v253;
  std::string *v254;
  __int128 v255;
  uint64_t v256;
  std::string *v257;
  std::__split_buffer<std::string>::pointer v258;
  void *v259;
  const std::string::value_type *v260;
  std::string::size_type v261;
  std::string *v262;
  __int128 v263;
  std::string *v264;
  __int128 v265;
  std::string *v266;
  __int128 v267;
  uint64_t v268;
  std::string *v269;
  std::__split_buffer<std::string>::pointer v270;
  void *v271;
  const std::string::value_type *v272;
  std::string::size_type v273;
  std::string *v274;
  __int128 v275;
  std::string *v276;
  __int128 v277;
  std::string *v278;
  __int128 v279;
  uint64_t v280;
  std::string *v281;
  std::__split_buffer<std::string>::pointer v282;
  void *v283;
  const std::string::value_type *v284;
  std::string::size_type v285;
  std::string *v286;
  __int128 v287;
  std::string *v288;
  __int128 v289;
  std::string *v290;
  __int128 v291;
  uint64_t v292;
  std::string *v293;
  std::__split_buffer<std::string>::pointer v294;
  void *v295;
  const std::string::value_type *v296;
  std::string::size_type v297;
  std::string *v298;
  __int128 v299;
  std::string *v300;
  __int128 v301;
  std::string *v302;
  __int128 v303;
  uint64_t v304;
  std::string *v305;
  std::__split_buffer<std::string>::pointer v306;
  void *v307;
  const std::string::value_type *v308;
  std::string::size_type v309;
  std::string *v310;
  __int128 v311;
  std::string *v312;
  __int128 v313;
  std::string *v314;
  __int128 v315;
  uint64_t v316;
  std::string *v317;
  std::__split_buffer<std::string>::pointer v318;
  void *v319;
  const std::string::value_type *v320;
  std::string::size_type v321;
  std::string *v322;
  __int128 v323;
  std::string *v324;
  __int128 v325;
  std::string *v326;
  __int128 v327;
  uint64_t v328;
  std::string *v329;
  std::__split_buffer<std::string>::pointer v330;
  void *v331;
  const std::string::value_type *v332;
  std::string::size_type v333;
  std::string *v334;
  __int128 v335;
  std::string *v336;
  __int128 v337;
  std::string *v338;
  __int128 v339;
  uint64_t v340;
  std::string *v341;
  std::__split_buffer<std::string>::pointer v342;
  void *v343;
  const std::string::value_type *v344;
  std::string::size_type v345;
  std::string *v346;
  __int128 v347;
  std::string *v348;
  __int128 v349;
  std::string *v350;
  __int128 v351;
  uint64_t v352;
  std::string *v353;
  std::__split_buffer<std::string>::pointer v354;
  void *v355;
  const std::string::value_type *v356;
  std::string::size_type v357;
  std::string *v358;
  __int128 v359;
  std::string *v360;
  __int128 v361;
  std::string *v362;
  __int128 v363;
  uint64_t v364;
  std::string *v365;
  std::__split_buffer<std::string>::pointer v366;
  void *v367;
  const std::string::value_type *v368;
  std::string::size_type v369;
  std::string *v370;
  __int128 v371;
  std::string *v372;
  std::string::size_type v373;
  std::string *v374;
  __int128 v375;
  std::string *v376;
  std::string::size_type v377;
  std::string *v378;
  __int128 v379;
  std::string *v380;
  std::string::size_type v381;
  std::string *v382;
  __int128 v383;
  std::string *v384;
  std::string::size_type v385;
  std::string *v386;
  __int128 v387;
  std::string *v388;
  std::string::size_type v389;
  std::string *v390;
  __int128 v391;
  std::string *v392;
  std::string::size_type v393;
  std::string *v394;
  __int128 v395;
  std::string *v396;
  std::string::size_type v397;
  std::string *v398;
  __int128 v399;
  const std::string::value_type *v400;
  std::string::size_type v401;
  std::string *v402;
  __int128 v403;
  void **v404;
  std::string::size_type v405;
  std::string *v406;
  std::string *v407;
  __int128 v408;
  void **v409;
  float v410;
  float v411;
  float v412;
  float v413;
  float v414;
  float v415;
  float v416;
  float v417;
  unint64_t v418;
  uint64_t v419;
  ausdk::AUElement *v420;
  uint64_t v421;
  float *v422;
  NSObject **v423;
  NSObject *v424;
  float v425;
  float v426;
  float v427;
  float v428;
  float v429;
  float v430;
  float v431;
  float v432;
  float v433;
  std::string *v434;
  __int128 v435;
  uint64_t v436;
  std::string *v437;
  std::__split_buffer<std::string>::pointer v438;
  void *v439;
  const std::string::value_type *v440;
  std::string::size_type v441;
  std::string *v442;
  __int128 v443;
  std::string *v444;
  __int128 v445;
  std::string *v446;
  __int128 v447;
  uint64_t v448;
  std::string *v449;
  std::__split_buffer<std::string>::pointer v450;
  void *v451;
  const std::string::value_type *v452;
  std::string::size_type v453;
  std::string *v454;
  __int128 v455;
  std::string *v456;
  __int128 v457;
  std::string *v458;
  __int128 v459;
  uint64_t v460;
  std::string *v461;
  std::__split_buffer<std::string>::pointer v462;
  void *v463;
  const std::string::value_type *v464;
  std::string::size_type v465;
  std::string *v466;
  __int128 v467;
  std::string *v468;
  __int128 v469;
  std::string *v470;
  __int128 v471;
  uint64_t v472;
  std::string *v473;
  std::__split_buffer<std::string>::pointer v474;
  void *v475;
  const std::string::value_type *v476;
  std::string::size_type v477;
  std::string *v478;
  __int128 v479;
  std::string *v480;
  __int128 v481;
  std::string *v482;
  __int128 v483;
  uint64_t v484;
  std::string *v485;
  std::__split_buffer<std::string>::pointer v486;
  void *v487;
  const std::string::value_type *v488;
  std::string::size_type v489;
  std::string *v490;
  __int128 v491;
  std::string *v492;
  __int128 v493;
  std::string *v494;
  __int128 v495;
  uint64_t v496;
  std::string *v497;
  std::__split_buffer<std::string>::pointer v498;
  void *v499;
  const std::string::value_type *v500;
  std::string::size_type v501;
  std::string *v502;
  __int128 v503;
  std::string *v504;
  __int128 v505;
  std::string *v506;
  __int128 v507;
  uint64_t v508;
  std::string *v509;
  std::__split_buffer<std::string>::pointer v510;
  void *v511;
  const std::string::value_type *v512;
  std::string::size_type v513;
  std::string *v514;
  __int128 v515;
  std::string *v516;
  __int128 v517;
  std::string *v518;
  __int128 v519;
  uint64_t v520;
  std::string *v521;
  std::__split_buffer<std::string>::pointer v522;
  void *v523;
  const std::string::value_type *v524;
  std::string::size_type v525;
  std::string *v526;
  __int128 v527;
  std::string *v528;
  std::string::size_type v529;
  std::string *v530;
  __int128 v531;
  std::string *v532;
  std::string::size_type v533;
  std::string *v534;
  __int128 v535;
  std::string *v536;
  std::string::size_type v537;
  std::string *v538;
  __int128 v539;
  std::string *v540;
  std::string::size_type v541;
  std::string *v542;
  __int128 v543;
  std::string *v544;
  std::string::size_type v545;
  std::string *v546;
  __int128 v547;
  std::string *v548;
  std::string::size_type v549;
  std::string *v550;
  __int128 v551;
  std::string *v552;
  std::string::size_type v553;
  std::string *v554;
  std::string *v555;
  __int128 v556;
  std::string *v557;
  float v558;
  float v559;
  float v560;
  float v561;
  float v562;
  float v563;
  float v564;
  float v565;
  unint64_t v566;
  uint64_t v567;
  ausdk::AUElement *v568;
  uint64_t v569;
  char *v570;
  unsigned int *v571;
  unsigned int *v572;
  unsigned int v573;
  std::string *v574;
  __int128 v575;
  NSObject **v576;
  NSObject *v577;
  float v578;
  float v579;
  float v580;
  float v581;
  float v582;
  float v583;
  unsigned int v584;
  unsigned int v585;
  float v586;
  unsigned int v587;
  unint64_t v588;
  float v589;
  float v590;
  float v591;
  float v592;
  float v593;
  unint64_t v594;
  unint64_t v595;
  char *v596;
  char *v597;
  char *v598;
  __int128 v599;
  __int128 v600;
  __int128 v601;
  __int128 v602;
  __int128 v603;
  __int128 v604;
  char *v605;
  NSObject **v606;
  NSObject *v607;
  std::runtime_error *v608;
  std::runtime_error *v609;
  std::runtime_error *v610;
  std::runtime_error *v611;
  std::runtime_error *v612;
  std::runtime_error *v613;
  std::runtime_error *v614;
  std::runtime_error *v615;
  std::runtime_error *v616;
  std::runtime_error *v617;
  std::runtime_error *v618;
  std::runtime_error *v619;
  std::runtime_error *v620;
  std::runtime_error *v621;
  std::runtime_error *v622;
  std::runtime_error *v623;
  std::runtime_error *v624;
  std::runtime_error *v625;
  NSObject **v626;
  NSObject *v627;
  int v628;
  unsigned int v629;
  const std::string::value_type *v630;
  std::string *v631;
  __int128 v632;
  NSObject **v633;
  NSObject *v634;
  uint64_t v635;
  _QWORD *v636;
  const std::string::value_type *v637;
  std::string::size_type v638;
  uint64_t v639;
  unint64_t v640;
  int64_t v641;
  unint64_t v642;
  void *v643;
  std::string::size_type v644;
  std::string::size_type v645;
  int v646;
  uint64_t v647;
  std::string::size_type v648;
  uint64_t v649;
  NSObject **v650;
  NSObject *v651;
  NSObject **v652;
  NSObject *v653;
  unsigned int *v654;
  NSObject **v655;
  NSObject *v656;
  unsigned int v657;
  __int128 v658;
  __int128 v659;
  __int128 v660;
  __int128 v661;
  __int128 v662;
  __int128 v663;
  std::string *v664;
  __int128 v665;
  uint64_t v666;
  std::string *v667;
  uint64_t v668;
  std::string *v669;
  const std::string::value_type *v670;
  std::string::size_type v671;
  std::string *v672;
  __int128 v673;
  std::string *v674;
  __int128 v675;
  std::string *v676;
  std::string::size_type v677;
  std::string *v678;
  __int128 v679;
  int v680;
  std::string *v681;
  __int128 v682;
  uint64_t v683;
  std::string *v684;
  uint64_t v685;
  std::string *v686;
  const std::string::value_type *v687;
  std::string::size_type v688;
  std::string *v689;
  __int128 v690;
  std::string *v691;
  __int128 v692;
  std::string *v693;
  __int128 v694;
  uint64_t v695;
  std::string *v696;
  uint64_t v697;
  std::string *v698;
  const std::string::value_type *v699;
  std::string::size_type v700;
  std::string *v701;
  __int128 v702;
  std::string *v703;
  __int128 v704;
  std::string *v705;
  __int128 v706;
  uint64_t v707;
  std::string *v708;
  uint64_t v709;
  std::string *v710;
  const std::string::value_type *v711;
  std::string::size_type v712;
  std::string *v713;
  __int128 v714;
  std::string *v715;
  __int128 v716;
  std::string *v717;
  __int128 v718;
  uint64_t v719;
  std::string *v720;
  uint64_t v721;
  std::string *v722;
  const std::string::value_type *v723;
  std::string::size_type v724;
  std::string *v725;
  __int128 v726;
  std::string *v727;
  __int128 v728;
  std::string *v729;
  __int128 v730;
  uint64_t v731;
  std::string *v732;
  uint64_t v733;
  std::string *v734;
  const std::string::value_type *v735;
  std::string::size_type v736;
  std::string *v737;
  __int128 v738;
  std::string *v739;
  __int128 v740;
  std::string *v741;
  std::string::size_type v742;
  std::string *v743;
  __int128 v744;
  std::string *v745;
  std::string::size_type v746;
  std::string *v747;
  __int128 v748;
  const std::string::value_type *v749;
  std::string::size_type v750;
  std::string *v751;
  __int128 v752;
  std::string *v753;
  std::string::size_type v754;
  std::string *v755;
  __int128 v756;
  std::string *v757;
  std::string::size_type v758;
  std::string *v759;
  __int128 v760;
  std::string *v761;
  __int128 v762;
  std::string *v763;
  std::string::size_type v764;
  std::string *v765;
  std::string *v766;
  __int128 v767;
  std::string *v768;
  float v769;
  float v770;
  float v771;
  float v772;
  float v773;
  float v774;
  float v775;
  float v776;
  int v777;
  int v778;
  int v779;
  int v780;
  unint64_t v781;
  uint64_t v782;
  ausdk::AUElement *v783;
  uint64_t v784;
  NSObject **v785;
  NSObject *v786;
  std::string *v787;
  __int128 v788;
  uint64_t v789;
  std::string *v790;
  uint64_t v791;
  std::string *v792;
  std::string *v793;
  std::string::size_type v794;
  std::string *v795;
  __int128 v796;
  std::string *v797;
  __int128 v798;
  std::string *v799;
  __int128 v800;
  uint64_t v801;
  std::string *v802;
  uint64_t v803;
  std::string *v804;
  std::string *v805;
  std::string::size_type v806;
  std::string *v807;
  __int128 v808;
  const std::string::value_type *v809;
  std::string::size_type end_high;
  std::string *v811;
  __int128 v812;
  std::string *v813;
  _QWORD *v814;
  _QWORD *v815;
  uint64_t v816;
  uint64_t v817;
  std::string::size_type v818;
  std::string::size_type v819;
  _QWORD *v820;
  _QWORD *v821;
  uint64_t v822;
  AUSpeakerProtectionV3 *v823;
  uint64_t v824;
  uint64_t v825;
  uint64_t v826;
  unint64_t v827;
  uint64_t v828;
  _QWORD *v829;
  int v830;
  unsigned int i;
  std::string *v832;
  __int128 v833;
  const __CFString *v834;
  NSObject **v835;
  NSObject *v836;
  uint64_t v837;
  __int128 v838;
  uint64_t v839;
  uint64_t v840;
  unint64_t v841;
  uint64_t v842;
  unint64_t v843;
  char *v844;
  char *v845;
  char *v846;
  char *v847;
  int v848;
  __int128 v849;
  uint64_t v850;
  NSObject **v851;
  NSObject *v852;
  NSObject **v853;
  NSObject *v854;
  std::vector<std::string> *v855;
  uint64_t v856;
  uint64_t j;
  __int128 v858;
  unint64_t v859;
  unint64_t v860;
  __int128 v861;
  unint64_t v862;
  unint64_t v863;
  unint64_t v864;
  unint64_t v865;
  std::string *v866;
  std::string *v867;
  __int128 v868;
  uint64_t v869;
  int v870;
  int v871;
  unsigned int *v872;
  unsigned int *v873;
  unsigned int *v874;
  unsigned int v875;
  std::string *v876;
  __int128 v877;
  const __CFNumber *v878;
  unsigned int v879;
  NSObject **v880;
  NSObject *v881;
  uint64_t v882;
  unint64_t v883;
  unint64_t v884;
  char *v885;
  unsigned int *v886;
  unsigned int *v887;
  uint64_t v888;
  NSObject **v889;
  NSObject *v890;
  NSObject **v891;
  NSObject *v892;
  char *v893;
  void **v894;
  _QWORD *v895;
  unsigned int *v896;
  unsigned int v897;
  char *v898;
  char *v899;
  uint64_t v900;
  unint64_t v901;
  uint64_t v902;
  unint64_t v903;
  char *v904;
  char *v905;
  int v906;
  int v907;
  char *v908;
  char *v909;
  char *v910;
  unsigned int v911;
  std::string *v912;
  __int128 v913;
  BOOL v914;
  NSObject **v915;
  NSObject *v916;
  uint64_t v917;
  unint64_t v918;
  unint64_t v919;
  char *v920;
  char *v921;
  char *v922;
  int v923;
  char v924;
  NSObject **v925;
  NSObject *v926;
  NSObject **v927;
  NSObject *v928;
  void **v929;
  __int128 v930;
  char *v931;
  std::string::size_type v932;
  std::string::size_type v933;
  _QWORD *v934;
  std::__shared_weak_count *v935;
  unint64_t *p_shared_owners;
  unint64_t v937;
  std::string::size_type v938;
  NSObject **v939;
  NSObject *v940;
  _BYTE *v941;
  const __CFArray *v942;
  CFIndex Count;
  CFIndex v944;
  std::string::size_type v945;
  CFIndex v946;
  unint64_t v947;
  const void *v948;
  const void *v949;
  CFTypeRef v950;
  CFTypeRef v951;
  const __CFNumber *v952;
  const __CFNumber *v953;
  const __CFNumber *v954;
  NSObject **v955;
  NSObject *v956;
  const __CFString *v957;
  __int128 *v958;
  AUSpeakerProtectionV3 *v959;
  uint64_t v960;
  void **v961;
  uint64_t v962;
  void *v963;
  const void *v964;
  NSObject **v965;
  NSObject *v966;
  const void *v967;
  const void *v968;
  const __CFArray *v969;
  unint64_t v970;
  unsigned int v971;
  unint64_t v972;
  uint64_t v973;
  float v974;
  uint64_t v975;
  std::runtime_error *v976;
  NSObject **v977;
  NSObject *v978;
  const __CFString *v979;
  _BYTE *v980;
  const __CFString *v981;
  std::string::size_type v982;
  std::string *v983;
  std::string::size_type v984;
  std::string::size_type v985;
  std::string::size_type v986;
  BOOL v987;
  std::string::size_type v989;
  std::string *v990;
  std::string::size_type v991;
  std::string::size_type v992;
  uint64_t v993;
  BOOL v994;
  int v996;
  NSObject **v997;
  NSObject *v998;
  std::string *v999;
  const __CFArray *v1000;
  unint64_t v1001;
  const void *v1002;
  int *v1003;
  std::string::size_type v1004;
  _DWORD *v1005;
  int v1006;
  std::string::size_type v1007;
  _DWORD *v1008;
  uint64_t v1009;
  unint64_t v1010;
  int64_t v1011;
  unint64_t v1012;
  char *v1013;
  char *v1014;
  int v1015;
  const void *v1016;
  int *v1017;
  std::string::size_type v1018;
  _DWORD *v1019;
  int v1020;
  std::string::size_type v1021;
  std::string::pointer data;
  uint64_t v1023;
  unint64_t v1024;
  int64_t v1025;
  unint64_t v1026;
  char *v1027;
  char *v1028;
  int v1029;
  std::string *v1030;
  std::string *v1031;
  unint64_t v1032;
  unint64_t v1033;
  unint64_t v1034;
  char *v1035;
  std::string::size_type v1036;
  char *v1037;
  char *v1038;
  char *v1039;
  uint64_t v1040;
  char *v1041;
  std::string::__raw *v1042;
  std::string *v1043;
  AUSpeakerProtectionV3 *v1044;
  void **v1045;
  void *v1046;
  uint64_t v1047;
  void *v1048;
  NSObject **v1049;
  NSObject *v1050;
  NSObject **v1051;
  NSObject *v1052;
  double v1053;
  _BOOL4 v1054;
  NSObject **v1055;
  NSObject *v1056;
  std::string *v1057;
  __int128 v1058;
  char *v1059;
  const std::string::value_type *v1060;
  std::string::size_type v1061;
  std::string *v1062;
  __int128 v1063;
  std::string *v1064;
  uint64_t v1065;
  ausdk::AUElement *v1066;
  ausdk::AUElement **v1067;
  _BOOL4 v1068;
  NSObject **v1069;
  NSObject *v1070;
  std::string *v1071;
  __int128 v1072;
  char *v1073;
  const std::string::value_type *v1074;
  std::string::size_type v1075;
  std::string *v1076;
  __int128 v1077;
  std::string *v1078;
  uint64_t v1079;
  ausdk::AUElement *v1080;
  ausdk::AUElement **v1081;
  _BOOL4 v1082;
  NSObject **v1083;
  NSObject *v1084;
  std::string *v1085;
  __int128 v1086;
  char *v1087;
  const std::string::value_type *v1088;
  std::string::size_type v1089;
  std::string *v1090;
  __int128 v1091;
  std::string *v1092;
  uint64_t v1093;
  ausdk::AUElement *v1094;
  ausdk::AUElement **v1095;
  _BOOL4 v1096;
  NSObject **v1097;
  NSObject *v1098;
  std::string *v1099;
  __int128 v1100;
  char *v1101;
  const std::string::value_type *v1102;
  std::string::size_type v1103;
  std::string *v1104;
  __int128 v1105;
  std::string *v1106;
  uint64_t v1107;
  ausdk::AUElement *v1108;
  ausdk::AUElement **v1109;
  std::runtime_error *v1111;
  std::runtime_error *v1112;
  std::runtime_error *v1113;
  std::runtime_error *v1114;
  std::runtime_error *v1115;
  std::runtime_error *v1116;
  std::runtime_error *v1117;
  std::runtime_error *v1118;
  std::runtime_error *v1119;
  std::runtime_error *v1120;
  std::runtime_error *v1121;
  std::runtime_error *v1122;
  std::runtime_error *v1123;
  std::runtime_error *v1124;
  std::runtime_error *v1125;
  std::runtime_error *v1126;
  std::runtime_error *v1127;
  std::runtime_error *v1128;
  std::runtime_error *v1129;
  std::runtime_error *v1130;
  std::runtime_error *v1131;
  std::runtime_error *v1132;
  std::runtime_error *v1133;
  std::runtime_error *v1134;
  std::runtime_error *v1135;
  std::runtime_error *v1136;
  std::runtime_error *v1137;
  std::runtime_error *v1138;
  std::runtime_error *v1139;
  std::runtime_error *v1140;
  std::runtime_error *exception;
  std::runtime_error *v1142;
  std::runtime_error *v1143;
  std::runtime_error *v1144;
  std::runtime_error *v1145;
  std::runtime_error *v1146;
  std::runtime_error *v1147;
  std::runtime_error *v1148;
  std::runtime_error *v1149;
  std::runtime_error *v1150;
  std::runtime_error *v1151;
  std::runtime_error *v1152;
  std::runtime_error *v1153;
  std::runtime_error *v1154;
  std::runtime_error *v1155;
  std::runtime_error *v1156;
  std::runtime_error *v1157;
  std::runtime_error *v1158;
  std::runtime_error *v1159;
  std::runtime_error *v1160;
  int v1161;
  float v1162;
  unsigned int v1163;
  float v1164;
  float v1165;
  float v1166;
  float v1167;
  float v1168;
  float v1169;
  float v1170;
  float v1171;
  float v1172;
  unsigned int *v1173;
  float v1174;
  float v1175;
  float v1176;
  float v1177;
  float v1178;
  float v1179;
  float v1180;
  float v1181;
  float v1182;
  float v1183;
  float v1184;
  float v1185;
  float v1186;
  float v1187;
  float v1188;
  float v1189;
  float v1190;
  float v1191;
  float v1192;
  float v1193;
  float v1194;
  float v1195;
  float v1196;
  float v1197;
  float v1198;
  float v1200;
  float v1201;
  float v1202;
  float v1203;
  float v1204;
  float v1205;
  float v1206;
  float v1207;
  float v1208;
  float v1209;
  float __val;
  float __vala;
  float __valb;
  float v1213;
  float v1214;
  float v1215;
  CFIndex v1216;
  float v1217;
  float v1218;
  float v1219;
  float v1220;
  float v1221;
  float v1222;
  char *v1223;
  float v1224;
  const __CFArray *v1225;
  unsigned int *__p;
  float __pa;
  float __pb;
  CFIndex __pc;
  CFTypeRef v1230;
  std::string v1231;
  void *v1232[2];
  int64_t v1233;
  CFTypeRef v1234;
  std::string cfa;
  unint64_t v1236;
  char *v1237;
  void *v1238[2];
  int64_t v1239;
  std::string v1240;
  std::string v1241;
  __int128 v1242;
  int64_t v1243;
  std::string v1244;
  std::string v1245;
  std::string v1246;
  std::string v1247;
  std::string v1248;
  std::string v1249;
  std::string v1250;
  std::string v1251;
  std::string v1252;
  std::string v1253;
  std::string v1254;
  std::string v1255;
  std::string v1256;
  std::string v1257;
  std::string v1258;
  std::string v1259;
  char v1260;
  std::string v1261;
  std::string v1262;
  std::string v1263;
  std::string v1264;
  std::string v1265;
  std::string v1266;
  std::string v1267;
  __int128 v1268;
  std::__split_buffer<std::string>::pointer end;
  std::string v1270;
  _BYTE v1271[28];
  std::string buf[2];
  __int128 v1273;
  __int128 v1274;
  _OWORD v1275[2];
  _BYTE v1276[28];
  char v1277;
  std::__split_buffer<std::string> v1278;
  uint64_t v1279;

  v1279 = *MEMORY[0x1E0C80C00];
  if (!cf)
  {
    v1234 = 0;
LABEL_2489:
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
  }
  CFRetain(cf);
  applesauce::CF::DictionaryRef::DictionaryRef((applesauce::CF::DictionaryRef *)&v1234, cf);
  if (!v1234)
    goto LABEL_2489;
  *((_DWORD *)this + 158) = applesauce::CF::details::find_at_key<unsigned int,__CFString const* const&>((const __CFDictionary *)v1234, CFSTR("NumChannels"));
  if (!v1234)
  {
    v1142 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v1142, "Could not construct");
  }
  v3 = (const __CFNumber *)applesauce::CF::details::at_key<__CFString const* const&>((CFDictionaryRef)v1234, CFSTR("ConvoyDataSourceOverride"));
  if (v3)
  {
    v4 = applesauce::CF::convert_as<unsigned int,0>(v3);
    if ((v4 & 0xFF00000000) != 0)
      v5 = v4;
    else
      v5 = 0;
  }
  else
  {
    v5 = 0;
  }
  *((_DWORD *)this + 180) = v5;
  clsp::ThermalStateVector_v3_separate<clsp::EL>::SetNumChannels(*((_DWORD *)this + 158), *((_DWORD *)this + 196));
  if (!v1234)
    goto LABEL_2491;
  __val = applesauce::CF::details::find_at_key<float,char const* const&>((const __CFDictionary *)v1234, clsp::plistV9::Thermal_LookaheadDelay_ms::key);
  if (!v1234)
    goto LABEL_2491;
  v1208 = applesauce::CF::details::find_at_key<float,char const* const&>((const __CFDictionary *)v1234, clsp::plistV9::Thermal_SafeTlim::key);
  if (!v1234
    || (v1205 = applesauce::CF::details::find_at_key<float,char const* const&>((const __CFDictionary *)v1234, clsp::plistV9::Thermal_SafeTlimTimeMin::key), !v1234)|| (v1203 = applesauce::CF::details::find_at_key<float,char const* const&>((const __CFDictionary *)v1234, clsp::plistV9::Thermal_SafeTlimOffset::key), !v1234)|| (v1200 = applesauce::CF::details::find_at_key<float,char const* const&>((const __CFDictionary *)v1234, clsp::plistV9::Thermal_AmbientTemp::key), !v1234)|| (v1197 = applesauce::CF::details::find_at_key<float,char const* const&>((const __CFDictionary *)v1234, clsp::plistV9::Thermal_GainAttackTime_s::key), !v1234)|| (v1194 = applesauce::CF::details::find_at_key<float,char const* const&>((const __CFDictionary *)v1234, clsp::plistV9::Thermal_GainReleaseTime_s::key), !v1234)
    || (v1192 = applesauce::CF::details::find_at_key<float,char const* const&>((const __CFDictionary *)v1234, clsp::plistV9::Disp_PeakAttackTime_s::key), !v1234)|| (v1189 = applesauce::CF::details::find_at_key<float,char const* const&>((const __CFDictionary *)v1234, clsp::plistV9::Disp_PeakDecayTime_s::key), !v1234))
  {
LABEL_2491:
    v1143 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v1143, "Could not construct");
  }
  v1187 = applesauce::CF::details::find_at_key<float,char const* const&>((const __CFDictionary *)v1234, clsp::plistV9::Disp_FBIntegrationTime_s::key);
  v6 = (NSObject **)spp3Subsystem();
  if (v6)
  {
    v7 = *v6;
    if (!*v6)
      goto LABEL_25;
  }
  else
  {
    v7 = MEMORY[0x1E0C81028];
  }
  if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
  {
    LODWORD(buf[0].__r_.__value_.__l.__data_) = 136315394;
    *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)"AUSpeakerProtectionV3.cpp";
    WORD2(buf[0].__r_.__value_.__r.__words[1]) = 1024;
    *(_DWORD *)((char *)&buf[0].__r_.__value_.__r.__words[1] + 6) = 3835;
    _os_log_impl(&dword_1B5ED0000, v7, OS_LOG_TYPE_INFO, "%25s:%-5d Successfully parsed the system plist params.", (uint8_t *)buf, 0x12u);
  }
LABEL_25:
  if (!v1234)
  {
    v1144 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v1144, "Could not construct");
  }
  applesauce::CF::details::find_at_key<applesauce::CF::DictionaryRef,char const(&)[22]>((applesauce::CF::DictionaryRef *)v1271, (const __CFDictionary *)v1234);
  v8 = *((_DWORD *)this + 158);
  if (v8)
  {
    v9 = 0;
    v10 = 0;
    __p = 0;
    v11 = 0;
    while (1)
    {
      if (!*(_QWORD *)v1271)
      {
        v1112 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v1112, "Could not construct");
      }
      std::to_string((std::string *)&v1278, v11);
      v12 = std::string::insert((std::string *)&v1278, 0, "Channel", 7uLL);
      v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
      buf[0].__r_.__value_.__r.__words[2] = v12->__r_.__value_.__r.__words[2];
      *(_OWORD *)&buf[0].__r_.__value_.__l.__data_ = v13;
      v12->__r_.__value_.__l.__size_ = 0;
      v12->__r_.__value_.__r.__words[2] = 0;
      v12->__r_.__value_.__r.__words[0] = 0;
      applesauce::CF::details::find_at_key<applesauce::CF::DictionaryRef,std::string>((applesauce::CF::DictionaryRef *)&cfa, *(const __CFDictionary **)v1271, (uint64_t)buf);
      if (SHIBYTE(buf[0].__r_.__value_.__r.__words[2]) < 0)
        operator delete(buf[0].__r_.__value_.__l.__data_);
      if (SHIBYTE(v1278.__end_) < 0)
        operator delete(v1278.__first_);
      if (!cfa.__r_.__value_.__r.__words[0])
      {
        v1113 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v1113, "Could not construct");
      }
      applesauce::CF::details::find_at_key<applesauce::CF::DictionaryRef,char const* const&>((applesauce::CF::DictionaryRef *)&v1278, (const __CFDictionary *)cfa.__r_.__value_.__l.__data_, clsp::plistV9::OLThermalParamStruct::key);
      v14 = (NSObject **)spp3Subsystem();
      if (v14)
      {
        v15 = *v14;
        if (!*v14)
          goto LABEL_40;
      }
      else
      {
        v15 = MEMORY[0x1E0C81028];
      }
      if (os_log_type_enabled(v15, OS_LOG_TYPE_DEBUG))
      {
        LODWORD(buf[0].__r_.__value_.__l.__data_) = 136315906;
        *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)"AUSpeakerProtectionV3.cpp";
        WORD2(buf[0].__r_.__value_.__r.__words[1]) = 1024;
        *(_DWORD *)((char *)&buf[0].__r_.__value_.__r.__words[1] + 6) = 3784;
        WORD1(buf[0].__r_.__value_.__r.__words[2]) = 2080;
        *(std::string::size_type *)((char *)&buf[0].__r_.__value_.__r.__words[2] + 4) = (std::string::size_type)"OL_thermal";
        WORD2(buf[1].__r_.__value_.__r.__words[0]) = 1024;
        *(_DWORD *)((char *)buf[1].__r_.__value_.__r.__words + 6) = v11;
        _os_log_impl(&dword_1B5ED0000, v15, OS_LOG_TYPE_DEBUG, "%25s:%-5d Found the %s plist entry for channel %i.", (uint8_t *)buf, 0x22u);
      }
LABEL_40:
      if (!v1278.__first_)
        goto LABEL_2441;
      v1222 = applesauce::CF::details::find_at_key<float,char const* const&>((const __CFDictionary *)v1278.__first_, clsp::plistV9::Rshunt::key);
      if (!v1278.__first_)
        goto LABEL_2441;
      v1217 = applesauce::CF::details::find_at_key<float,char const* const&>((const __CFDictionary *)v1278.__first_, clsp::plistV9::Reb_ref::key);
      if (!v1278.__first_)
        goto LABEL_2441;
      v16 = applesauce::CF::details::find_at_key<float,char const* const&>((const __CFDictionary *)v1278.__first_, clsp::plistV9::Rampout::key);
      if (!v1278.__first_)
        goto LABEL_2441;
      v17 = v16;
      v18 = applesauce::CF::details::find_at_key<float,char const* const&>((const __CFDictionary *)v1278.__first_, clsp::plistV9::T_sett_vc::key);
      if (!v1278.__first_)
        goto LABEL_2441;
      v19 = v18;
      v20 = applesauce::CF::details::find_at_key<float,char const* const&>((const __CFDictionary *)v1278.__first_, clsp::plistV9::tau_Tvc::key);
      if (!v1278.__first_)
        goto LABEL_2441;
      v21 = v20;
      v22 = applesauce::CF::details::find_at_key<float,char const* const&>((const __CFDictionary *)v1278.__first_, clsp::plistV9::T_sett_mg::key);
      if (!v1278.__first_
        || (v23 = v22,
            v24 = applesauce::CF::details::find_at_key<float,char const* const&>((const __CFDictionary *)v1278.__first_, clsp::plistV9::tau_Tmg::key), !v1278.__first_)|| (v25 = v24, v26 = applesauce::CF::details::find_at_key<float,char const* const&>((const __CFDictionary *)v1278.__first_, clsp::plistV9::ThermalFFSpeedupFactor::key), !v1278.__first_)|| (v27 = v26, v28 = applesauce::CF::details::find_at_key<float,char const* const&>((const __CFDictionary *)v1278.__first_, clsp::plistV9::HardTempLimitHeadroom::key), !v1278.__first_))
      {
LABEL_2441:
        v1114 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v1114, "Could not construct");
      }
      v29 = v28;
      v30 = applesauce::CF::details::find_at_key<float,char const* const&>((const __CFDictionary *)v1278.__first_, clsp::plistV9::TemperatureLimit::key);
      if (v10 >= v9)
      {
        v31 = 0x2E8BA2E8BA2E8BA3 * (v10 - __p) + 1;
        if (v31 > 0x5D1745D1745D174)
          std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
        if (0x5D1745D1745D1746 * (v9 - __p) > v31)
          v31 = 0x5D1745D1745D1746 * (v9 - __p);
        if ((unint64_t)(0x2E8BA2E8BA2E8BA3 * (v9 - __p)) >= 0x2E8BA2E8BA2E8BALL)
          v32 = 0x5D1745D1745D174;
        else
          v32 = v31;
        if (v32 > 0x5D1745D1745D174)
          std::__throw_bad_array_new_length[abi:ne180100]();
        v33 = (char *)operator new(44 * v32);
        v34 = (unsigned int *)&v33[4 * (v10 - __p)];
        *v34 = v11;
        *((float *)v34 + 1) = v1222;
        *((float *)v34 + 2) = v1217;
        *((float *)v34 + 3) = v17;
        *((float *)v34 + 4) = v19;
        *((float *)v34 + 5) = v21;
        *((float *)v34 + 6) = v23;
        *((float *)v34 + 7) = v25;
        *((float *)v34 + 8) = v27;
        *((float *)v34 + 9) = v29;
        *((float *)v34 + 10) = v30;
        if (v10 == __p)
        {
          v39 = &v33[4 * (v10 - __p)];
          v36 = __p;
        }
        else
        {
          v35 = &v33[4 * (v10 - __p)];
          v36 = __p;
          do
          {
            v37 = *(_OWORD *)(v10 - 11);
            v38 = *(_OWORD *)(v10 - 7);
            v39 = v35 - 44;
            *((_OWORD *)v35 - 1) = *((_OWORD *)v10 - 1);
            *(_OWORD *)(v35 - 28) = v38;
            *(_OWORD *)(v35 - 44) = v37;
            v10 -= 11;
            v35 -= 44;
          }
          while (v10 != __p);
        }
        v9 = (unsigned int *)&v33[44 * v32];
        v10 = v34 + 11;
        if (v36)
          operator delete(v36);
        __p = (unsigned int *)v39;
      }
      else
      {
        *v10 = v11;
        *((float *)v10 + 1) = v1222;
        *((float *)v10 + 2) = v1217;
        *((float *)v10 + 3) = v17;
        *((float *)v10 + 4) = v19;
        *((float *)v10 + 5) = v21;
        *((float *)v10 + 6) = v23;
        *((float *)v10 + 7) = v25;
        *((float *)v10 + 8) = v27;
        *((float *)v10 + 9) = v29;
        *((float *)v10 + 10) = v30;
        v10 += 11;
      }
      v40 = (NSObject **)spp3Subsystem();
      if (!v40)
      {
        v41 = MEMORY[0x1E0C81028];
LABEL_71:
        if (os_log_type_enabled(v41, OS_LOG_TYPE_DEBUG))
        {
          LODWORD(buf[0].__r_.__value_.__l.__data_) = 136315906;
          *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)"AUSpeakerProtectionV3.cpp";
          WORD2(buf[0].__r_.__value_.__r.__words[1]) = 1024;
          *(_DWORD *)((char *)&buf[0].__r_.__value_.__r.__words[1] + 6) = 3789;
          WORD1(buf[0].__r_.__value_.__r.__words[2]) = 2080;
          *(std::string::size_type *)((char *)&buf[0].__r_.__value_.__r.__words[2] + 4) = (std::string::size_type)"OL_thermal";
          WORD2(buf[1].__r_.__value_.__r.__words[0]) = 1024;
          *(_DWORD *)((char *)buf[1].__r_.__value_.__r.__words + 6) = v11;
          _os_log_impl(&dword_1B5ED0000, v41, OS_LOG_TYPE_DEBUG, "%25s:%-5d Successfully parsed the %s plist entry for channel %i.", (uint8_t *)buf, 0x22u);
        }
        goto LABEL_73;
      }
      v41 = *v40;
      if (*v40)
        goto LABEL_71;
LABEL_73:
      if (v1278.__first_)
        CFRelease(v1278.__first_);
      if (cfa.__r_.__value_.__r.__words[0])
        CFRelease(cfa.__r_.__value_.__l.__data_);
      if (++v11 == v8)
        goto LABEL_80;
    }
  }
  v10 = 0;
  __p = 0;
LABEL_80:
  if (*(_QWORD *)v1271)
    CFRelease(*(CFTypeRef *)v1271);
  v42 = (NSObject **)spp3Subsystem();
  if (v42)
  {
    v43 = *v42;
    if (!*v42)
      goto LABEL_88;
  }
  else
  {
    v43 = MEMORY[0x1E0C81028];
  }
  if (os_log_type_enabled(v43, OS_LOG_TYPE_INFO))
  {
    LODWORD(buf[0].__r_.__value_.__l.__data_) = 136315394;
    *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)"AUSpeakerProtectionV3.cpp";
    WORD2(buf[0].__r_.__value_.__r.__words[1]) = 1024;
    *(_DWORD *)((char *)&buf[0].__r_.__value_.__r.__words[1] + 6) = 3840;
    _os_log_impl(&dword_1B5ED0000, v43, OS_LOG_TYPE_INFO, "%25s:%-5d Successfully parsed all the per-speaker OL thermal params.", (uint8_t *)buf, 0x12u);
  }
LABEL_88:
  if (!v1234)
  {
    v1145 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v1145, "Could not construct");
  }
  applesauce::CF::details::find_at_key<applesauce::CF::DictionaryRef,char const(&)[22]>((applesauce::CF::DictionaryRef *)v1271, (const __CFDictionary *)v1234);
  v44 = *((_DWORD *)this + 158);
  if (v44)
  {
    v45 = 0;
    v46 = 0;
    v1223 = 0;
    v47 = 0;
    while (1)
    {
      if (!*(_QWORD *)v1271)
      {
        v1115 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v1115, "Could not construct");
      }
      std::to_string((std::string *)&v1278, v47);
      v48 = std::string::insert((std::string *)&v1278, 0, "Channel", 7uLL);
      v49 = *(_OWORD *)&v48->__r_.__value_.__l.__data_;
      buf[0].__r_.__value_.__r.__words[2] = v48->__r_.__value_.__r.__words[2];
      *(_OWORD *)&buf[0].__r_.__value_.__l.__data_ = v49;
      v48->__r_.__value_.__l.__size_ = 0;
      v48->__r_.__value_.__r.__words[2] = 0;
      v48->__r_.__value_.__r.__words[0] = 0;
      applesauce::CF::details::find_at_key<applesauce::CF::DictionaryRef,std::string>((applesauce::CF::DictionaryRef *)&cfa, *(const __CFDictionary **)v1271, (uint64_t)buf);
      if (SHIBYTE(buf[0].__r_.__value_.__r.__words[2]) < 0)
        operator delete(buf[0].__r_.__value_.__l.__data_);
      if (SHIBYTE(v1278.__end_) < 0)
        operator delete(v1278.__first_);
      if (!cfa.__r_.__value_.__r.__words[0])
      {
        v1116 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v1116, "Could not construct");
      }
      applesauce::CF::details::find_at_key<applesauce::CF::DictionaryRef,char const* const&>((applesauce::CF::DictionaryRef *)&v1278, (const __CFDictionary *)cfa.__r_.__value_.__l.__data_, clsp::plistV9::OLDisplacementParamStruct::key);
      v50 = (NSObject **)spp3Subsystem();
      if (v50)
      {
        v51 = *v50;
        if (!*v50)
          goto LABEL_103;
      }
      else
      {
        v51 = MEMORY[0x1E0C81028];
      }
      if (os_log_type_enabled(v51, OS_LOG_TYPE_DEBUG))
      {
        LODWORD(buf[0].__r_.__value_.__l.__data_) = 136315906;
        *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)"AUSpeakerProtectionV3.cpp";
        WORD2(buf[0].__r_.__value_.__r.__words[1]) = 1024;
        *(_DWORD *)((char *)&buf[0].__r_.__value_.__r.__words[1] + 6) = 3784;
        WORD1(buf[0].__r_.__value_.__r.__words[2]) = 2080;
        *(std::string::size_type *)((char *)&buf[0].__r_.__value_.__r.__words[2] + 4) = (std::string::size_type)"OL_disp";
        WORD2(buf[1].__r_.__value_.__r.__words[0]) = 1024;
        *(_DWORD *)((char *)buf[1].__r_.__value_.__r.__words + 6) = v47;
        _os_log_impl(&dword_1B5ED0000, v51, OS_LOG_TYPE_DEBUG, "%25s:%-5d Found the %s plist entry for channel %i.", (uint8_t *)buf, 0x22u);
      }
LABEL_103:
      if (!v1278.__first_)
        goto LABEL_2444;
      v52 = applesauce::CF::details::find_at_key<float,char const* const&>((const __CFDictionary *)v1278.__first_, clsp::plistV9::Q_d::key);
      if (!v1278.__first_)
        goto LABEL_2444;
      v53 = v52;
      v54 = applesauce::CF::details::find_at_key<float,char const* const&>((const __CFDictionary *)v1278.__first_, clsp::plistV9::kt::key);
      if (!v1278.__first_)
        goto LABEL_2444;
      v55 = v54;
      v56 = applesauce::CF::details::find_at_key<float,char const* const&>((const __CFDictionary *)v1278.__first_, clsp::plistV9::ct::key);
      if (!v1278.__first_)
        goto LABEL_2444;
      v57 = v56;
      v58 = applesauce::CF::details::find_at_key<float,char const* const&>((const __CFDictionary *)v1278.__first_, clsp::plistV9::phi::key);
      if (!v1278.__first_
        || (v59 = v58,
            v60 = applesauce::CF::details::find_at_key<float,char const* const&>((const __CFDictionary *)v1278.__first_, clsp::plistV9::x_lim::key), !v1278.__first_)|| (v61 = v60, v62 = applesauce::CF::details::find_at_key<float,char const* const&>((const __CFDictionary *)v1278.__first_, clsp::plistV9::ag::key), !v1278.__first_)|| (v63 = v62, v64 = applesauce::CF::details::find_at_key<float,char const* const&>((const __CFDictionary *)v1278.__first_, clsp::plistV9::mt::key), !v1278.__first_))
      {
LABEL_2444:
        v1117 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v1117, "Could not construct");
      }
      v65 = v64;
      v66 = applesauce::CF::details::find_at_key<float,char const* const&>((const __CFDictionary *)v1278.__first_, clsp::plistV9::g_bw::key);
      v67 = v66;
      if (v46 >= (float *)v45)
      {
        v68 = 0x8E38E38E38E38E39 * (((char *)v46 - v1223) >> 2) + 1;
        if (v68 > 0x71C71C71C71C71CLL)
          std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
        if (0x1C71C71C71C71C72 * ((v45 - v1223) >> 2) > v68)
          v68 = 0x1C71C71C71C71C72 * ((v45 - v1223) >> 2);
        if (0x8E38E38E38E38E39 * ((v45 - v1223) >> 2) >= 0x38E38E38E38E38ELL)
          v69 = 0x71C71C71C71C71CLL;
        else
          v69 = v68;
        if (v69 > 0x71C71C71C71C71CLL)
          std::__throw_bad_array_new_length[abi:ne180100]();
        v70 = (char *)operator new(36 * v69);
        v71 = (unsigned int *)&v70[4 * (((char *)v46 - v1223) >> 2)];
        *v71 = v47;
        *((float *)v71 + 1) = v53;
        *((float *)v71 + 2) = v55;
        *((float *)v71 + 3) = v57;
        *((float *)v71 + 4) = v59;
        *((float *)v71 + 5) = v61;
        *((float *)v71 + 6) = v63;
        *((float *)v71 + 7) = v65;
        *((float *)v71 + 8) = v67;
        if (v46 == (float *)v1223)
        {
          v76 = &v70[4 * (((char *)v46 - v1223) >> 2)];
          v73 = v1223;
        }
        else
        {
          v72 = &v70[4 * (((char *)v46 - v1223) >> 2)];
          v73 = v1223;
          do
          {
            v74 = *(_OWORD *)(v46 - 9);
            v75 = *(_OWORD *)(v46 - 5);
            v76 = v72 - 36;
            *((float *)v72 - 1) = *(v46 - 1);
            *(_OWORD *)(v72 - 20) = v75;
            *(_OWORD *)(v72 - 36) = v74;
            v46 -= 9;
            v72 -= 36;
          }
          while (v46 != (float *)v1223);
        }
        v45 = &v70[36 * v69];
        v46 = (float *)(v71 + 9);
        if (v73)
          operator delete(v73);
        v1223 = v76;
      }
      else
      {
        *(_DWORD *)v46 = v47;
        v46[1] = v53;
        v46[2] = v55;
        v46[3] = v57;
        v46[4] = v59;
        v46[5] = v61;
        v46[6] = v63;
        v46[7] = v65;
        v46[8] = v66;
        v46 += 9;
      }
      v77 = (NSObject **)spp3Subsystem();
      if (!v77)
      {
        v78 = MEMORY[0x1E0C81028];
LABEL_132:
        if (os_log_type_enabled(v78, OS_LOG_TYPE_DEBUG))
        {
          LODWORD(buf[0].__r_.__value_.__l.__data_) = 136315906;
          *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)"AUSpeakerProtectionV3.cpp";
          WORD2(buf[0].__r_.__value_.__r.__words[1]) = 1024;
          *(_DWORD *)((char *)&buf[0].__r_.__value_.__r.__words[1] + 6) = 3789;
          WORD1(buf[0].__r_.__value_.__r.__words[2]) = 2080;
          *(std::string::size_type *)((char *)&buf[0].__r_.__value_.__r.__words[2] + 4) = (std::string::size_type)"OL_disp";
          WORD2(buf[1].__r_.__value_.__r.__words[0]) = 1024;
          *(_DWORD *)((char *)buf[1].__r_.__value_.__r.__words + 6) = v47;
          _os_log_impl(&dword_1B5ED0000, v78, OS_LOG_TYPE_DEBUG, "%25s:%-5d Successfully parsed the %s plist entry for channel %i.", (uint8_t *)buf, 0x22u);
        }
        goto LABEL_134;
      }
      v78 = *v77;
      if (*v77)
        goto LABEL_132;
LABEL_134:
      if (v1278.__first_)
        CFRelease(v1278.__first_);
      if (cfa.__r_.__value_.__r.__words[0])
        CFRelease(cfa.__r_.__value_.__l.__data_);
      if (++v47 == v44)
        goto LABEL_141;
    }
  }
  v46 = 0;
  v1223 = 0;
LABEL_141:
  if (*(_QWORD *)v1271)
    CFRelease(*(CFTypeRef *)v1271);
  v79 = (NSObject **)spp3Subsystem();
  if (v79)
  {
    v80 = *v79;
    if (!*v79)
      goto LABEL_149;
  }
  else
  {
    v80 = MEMORY[0x1E0C81028];
  }
  if (os_log_type_enabled(v80, OS_LOG_TYPE_INFO))
  {
    LODWORD(buf[0].__r_.__value_.__l.__data_) = 136315394;
    *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)"AUSpeakerProtectionV3.cpp";
    WORD2(buf[0].__r_.__value_.__r.__words[1]) = 1024;
    *(_DWORD *)((char *)&buf[0].__r_.__value_.__r.__words[1] + 6) = 3845;
    _os_log_impl(&dword_1B5ED0000, v80, OS_LOG_TYPE_INFO, "%25s:%-5d Successfully parsed all the per-speaker OL displacement params.", (uint8_t *)buf, 0x12u);
  }
LABEL_149:
  v81 = (NSObject **)spp3Subsystem();
  if (v81)
  {
    v82 = *v81;
    if (!*v81)
      goto LABEL_550;
  }
  else
  {
    v82 = MEMORY[0x1E0C81028];
  }
  if (!os_log_type_enabled(v82, OS_LOG_TYPE_DEBUG))
    goto LABEL_550;
  std::string::basic_string[abi:ne180100]<0>(&v1270, "Thermal_LookaheadDelay_ms");
  v83 = std::string::append(&v1270, ": ", 2uLL);
  v84 = *(_OWORD *)&v83->__r_.__value_.__l.__data_;
  *(_QWORD *)&v1271[16] = *((_QWORD *)&v83->__r_.__value_.__l + 2);
  *(_OWORD *)v1271 = v84;
  v83->__r_.__value_.__l.__size_ = 0;
  v83->__r_.__value_.__r.__words[2] = 0;
  v83->__r_.__value_.__r.__words[0] = 0;
  std::to_string(&cfa, __val);
  while ((SHIBYTE(cfa.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if (*((_BYTE *)&v1234 + HIBYTE(cfa.__r_.__value_.__r.__words[2]) + 7) != 48)
      goto LABEL_161;
    v85 = HIBYTE(cfa.__r_.__value_.__r.__words[2]) - 1;
    *((_BYTE *)&cfa.__r_.__value_.__s + 23) = (*((_BYTE *)&cfa.__r_.__value_.__s + 23) - 1) & 0x7F;
    p_cfa = &cfa;
LABEL_160:
    p_cfa->__r_.__value_.__s.__data_[v85] = 0;
  }
  p_cfa = (std::string *)cfa.__r_.__value_.__r.__words[0];
  if (*(_BYTE *)(cfa.__r_.__value_.__r.__words[0] + cfa.__r_.__value_.__l.__size_ - 1) == 48)
  {
    v85 = --cfa.__r_.__value_.__l.__size_;
    goto LABEL_160;
  }
LABEL_161:
  *(_OWORD *)&v1278.__first_ = *(_OWORD *)&cfa.__r_.__value_.__l.__data_;
  v1278.__end_ = (std::__split_buffer<std::string>::pointer)cfa.__r_.__value_.__r.__words[2];
  memset(&cfa, 0, sizeof(cfa));
  while ((SHIBYTE(v1278.__end_) & 0x80000000) == 0)
  {
    if (*(&v1277 + HIBYTE(v1278.__end_)) != 46)
      goto LABEL_168;
    v87 = (std::__split_buffer<std::string>::pointer)(HIBYTE(v1278.__end_) - 1);
    HIBYTE(v1278.__end_) = (HIBYTE(v1278.__end_) - 1) & 0x7F;
    first = &v1278;
LABEL_167:
    v87->__r_.__value_.__s.__data_[(_QWORD)first] = 0;
  }
  first = v1278.__first_;
  if (v1278.__first_->__r_.__value_.__s.__data_[(unint64_t)v1278.__begin_ - 1] == 46)
  {
    v87 = --v1278.__begin_;
    goto LABEL_167;
  }
LABEL_168:
  v1268 = *(_OWORD *)&v1278.__first_;
  end = v1278.__end_;
  if (SHIBYTE(cfa.__r_.__value_.__r.__words[2]) < 0)
    operator delete(cfa.__r_.__value_.__l.__data_);
  if (SHIBYTE(end) >= 0)
    v89 = (const std::string::value_type *)&v1268;
  else
    v89 = (const std::string::value_type *)v1268;
  if (SHIBYTE(end) >= 0)
    v90 = HIBYTE(end);
  else
    v90 = *((_QWORD *)&v1268 + 1);
  v91 = std::string::append((std::string *)v1271, v89, v90);
  v92 = *(_OWORD *)&v91->__r_.__value_.__l.__data_;
  v1240.__r_.__value_.__r.__words[2] = v91->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v1240.__r_.__value_.__l.__data_ = v92;
  v91->__r_.__value_.__l.__size_ = 0;
  v91->__r_.__value_.__r.__words[2] = 0;
  v91->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(end) < 0)
    operator delete((void *)v1268);
  if ((v1271[23] & 0x80000000) != 0)
    operator delete(*(void **)v1271);
  if (SHIBYTE(v1270.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v1270.__r_.__value_.__l.__data_);
  v93 = std::string::append(&v1240, ",\n", 2uLL);
  v94 = *(_OWORD *)&v93->__r_.__value_.__l.__data_;
  v1241.__r_.__value_.__r.__words[2] = v93->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v1241.__r_.__value_.__l.__data_ = v94;
  v93->__r_.__value_.__l.__size_ = 0;
  v93->__r_.__value_.__r.__words[2] = 0;
  v93->__r_.__value_.__r.__words[0] = 0;
  std::string::basic_string[abi:ne180100]<0>(&v1270, "Thermal_SafeTlim");
  v95 = std::string::append(&v1270, ": ", 2uLL);
  v96 = *(_OWORD *)&v95->__r_.__value_.__l.__data_;
  *(_QWORD *)&v1271[16] = *((_QWORD *)&v95->__r_.__value_.__l + 2);
  *(_OWORD *)v1271 = v96;
  v95->__r_.__value_.__l.__size_ = 0;
  v95->__r_.__value_.__r.__words[2] = 0;
  v95->__r_.__value_.__r.__words[0] = 0;
  std::to_string(&cfa, v1208);
  while (2)
  {
    if ((SHIBYTE(cfa.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      if (*((_BYTE *)&v1234 + HIBYTE(cfa.__r_.__value_.__r.__words[2]) + 7) != 48)
        break;
      v97 = HIBYTE(cfa.__r_.__value_.__r.__words[2]) - 1;
      *((_BYTE *)&cfa.__r_.__value_.__s + 23) = (*((_BYTE *)&cfa.__r_.__value_.__s + 23) - 1) & 0x7F;
      v98 = &cfa;
      goto LABEL_188;
    }
    v98 = (std::string *)cfa.__r_.__value_.__r.__words[0];
    if (*(_BYTE *)(cfa.__r_.__value_.__r.__words[0] + cfa.__r_.__value_.__l.__size_ - 1) == 48)
    {
      v97 = --cfa.__r_.__value_.__l.__size_;
LABEL_188:
      v98->__r_.__value_.__s.__data_[v97] = 0;
      continue;
    }
    break;
  }
  *(_OWORD *)&v1278.__first_ = *(_OWORD *)&cfa.__r_.__value_.__l.__data_;
  v1278.__end_ = (std::__split_buffer<std::string>::pointer)cfa.__r_.__value_.__r.__words[2];
  memset(&cfa, 0, sizeof(cfa));
  while (2)
  {
    if ((SHIBYTE(v1278.__end_) & 0x80000000) == 0)
    {
      if (*(&v1277 + HIBYTE(v1278.__end_)) != 46)
        break;
      v99 = (std::__split_buffer<std::string>::pointer)(HIBYTE(v1278.__end_) - 1);
      HIBYTE(v1278.__end_) = (HIBYTE(v1278.__end_) - 1) & 0x7F;
      v100 = &v1278;
      goto LABEL_195;
    }
    v100 = v1278.__first_;
    if (v1278.__first_->__r_.__value_.__s.__data_[(unint64_t)v1278.__begin_ - 1] == 46)
    {
      v99 = --v1278.__begin_;
LABEL_195:
      v99->__r_.__value_.__s.__data_[(_QWORD)v100] = 0;
      continue;
    }
    break;
  }
  v1268 = *(_OWORD *)&v1278.__first_;
  end = v1278.__end_;
  if (SHIBYTE(cfa.__r_.__value_.__r.__words[2]) < 0)
    operator delete(cfa.__r_.__value_.__l.__data_);
  if (SHIBYTE(end) >= 0)
    v101 = (const std::string::value_type *)&v1268;
  else
    v101 = (const std::string::value_type *)v1268;
  if (SHIBYTE(end) >= 0)
    v102 = HIBYTE(end);
  else
    v102 = *((_QWORD *)&v1268 + 1);
  v103 = std::string::append((std::string *)v1271, v101, v102);
  v104 = *(_OWORD *)&v103->__r_.__value_.__l.__data_;
  v1244.__r_.__value_.__r.__words[2] = v103->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v1244.__r_.__value_.__l.__data_ = v104;
  v103->__r_.__value_.__l.__size_ = 0;
  v103->__r_.__value_.__r.__words[2] = 0;
  v103->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(end) < 0)
    operator delete((void *)v1268);
  if ((v1271[23] & 0x80000000) != 0)
    operator delete(*(void **)v1271);
  if (SHIBYTE(v1270.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v1270.__r_.__value_.__l.__data_);
  v105 = std::string::append(&v1244, ",\n", 2uLL);
  v106 = *(_OWORD *)&v105->__r_.__value_.__l.__data_;
  v1245.__r_.__value_.__r.__words[2] = v105->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v1245.__r_.__value_.__l.__data_ = v106;
  v105->__r_.__value_.__l.__size_ = 0;
  v105->__r_.__value_.__r.__words[2] = 0;
  v105->__r_.__value_.__r.__words[0] = 0;
  std::string::basic_string[abi:ne180100]<0>(&v1270, "Thermal_SafeTlimTimeMin");
  v107 = std::string::append(&v1270, ": ", 2uLL);
  v108 = *(_OWORD *)&v107->__r_.__value_.__l.__data_;
  *(_QWORD *)&v1271[16] = *((_QWORD *)&v107->__r_.__value_.__l + 2);
  *(_OWORD *)v1271 = v108;
  v107->__r_.__value_.__l.__size_ = 0;
  v107->__r_.__value_.__r.__words[2] = 0;
  v107->__r_.__value_.__r.__words[0] = 0;
  std::to_string(&cfa, v1205);
  while (2)
  {
    if ((SHIBYTE(cfa.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      if (*((_BYTE *)&v1234 + HIBYTE(cfa.__r_.__value_.__r.__words[2]) + 7) != 48)
        break;
      v109 = HIBYTE(cfa.__r_.__value_.__r.__words[2]) - 1;
      *((_BYTE *)&cfa.__r_.__value_.__s + 23) = (*((_BYTE *)&cfa.__r_.__value_.__s + 23) - 1) & 0x7F;
      v110 = &cfa;
      goto LABEL_216;
    }
    v110 = (std::string *)cfa.__r_.__value_.__r.__words[0];
    if (*(_BYTE *)(cfa.__r_.__value_.__r.__words[0] + cfa.__r_.__value_.__l.__size_ - 1) == 48)
    {
      v109 = --cfa.__r_.__value_.__l.__size_;
LABEL_216:
      v110->__r_.__value_.__s.__data_[v109] = 0;
      continue;
    }
    break;
  }
  *(_OWORD *)&v1278.__first_ = *(_OWORD *)&cfa.__r_.__value_.__l.__data_;
  v1278.__end_ = (std::__split_buffer<std::string>::pointer)cfa.__r_.__value_.__r.__words[2];
  memset(&cfa, 0, sizeof(cfa));
  while (2)
  {
    if ((SHIBYTE(v1278.__end_) & 0x80000000) == 0)
    {
      if (*(&v1277 + HIBYTE(v1278.__end_)) != 46)
        break;
      v111 = (std::__split_buffer<std::string>::pointer)(HIBYTE(v1278.__end_) - 1);
      HIBYTE(v1278.__end_) = (HIBYTE(v1278.__end_) - 1) & 0x7F;
      v112 = &v1278;
      goto LABEL_223;
    }
    v112 = v1278.__first_;
    if (v1278.__first_->__r_.__value_.__s.__data_[(unint64_t)v1278.__begin_ - 1] == 46)
    {
      v111 = --v1278.__begin_;
LABEL_223:
      v111->__r_.__value_.__s.__data_[(_QWORD)v112] = 0;
      continue;
    }
    break;
  }
  v1268 = *(_OWORD *)&v1278.__first_;
  end = v1278.__end_;
  if (SHIBYTE(cfa.__r_.__value_.__r.__words[2]) < 0)
    operator delete(cfa.__r_.__value_.__l.__data_);
  if (SHIBYTE(end) >= 0)
    v113 = (const std::string::value_type *)&v1268;
  else
    v113 = (const std::string::value_type *)v1268;
  if (SHIBYTE(end) >= 0)
    v114 = HIBYTE(end);
  else
    v114 = *((_QWORD *)&v1268 + 1);
  v115 = std::string::append((std::string *)v1271, v113, v114);
  v116 = *(_OWORD *)&v115->__r_.__value_.__l.__data_;
  v1247.__r_.__value_.__r.__words[2] = v115->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v1247.__r_.__value_.__l.__data_ = v116;
  v115->__r_.__value_.__l.__size_ = 0;
  v115->__r_.__value_.__r.__words[2] = 0;
  v115->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(end) < 0)
    operator delete((void *)v1268);
  if ((v1271[23] & 0x80000000) != 0)
    operator delete(*(void **)v1271);
  if (SHIBYTE(v1270.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v1270.__r_.__value_.__l.__data_);
  v117 = std::string::append(&v1247, ",\n", 2uLL);
  v118 = *(_OWORD *)&v117->__r_.__value_.__l.__data_;
  v1248.__r_.__value_.__r.__words[2] = v117->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v1248.__r_.__value_.__l.__data_ = v118;
  v117->__r_.__value_.__l.__size_ = 0;
  v117->__r_.__value_.__r.__words[2] = 0;
  v117->__r_.__value_.__r.__words[0] = 0;
  std::string::basic_string[abi:ne180100]<0>(&v1270, "Thermal_SafeTlimOffset");
  v119 = std::string::append(&v1270, ": ", 2uLL);
  v120 = *(_OWORD *)&v119->__r_.__value_.__l.__data_;
  *(_QWORD *)&v1271[16] = *((_QWORD *)&v119->__r_.__value_.__l + 2);
  *(_OWORD *)v1271 = v120;
  v119->__r_.__value_.__l.__size_ = 0;
  v119->__r_.__value_.__r.__words[2] = 0;
  v119->__r_.__value_.__r.__words[0] = 0;
  std::to_string(&cfa, v1203);
  while (2)
  {
    if ((SHIBYTE(cfa.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      if (*((_BYTE *)&v1234 + HIBYTE(cfa.__r_.__value_.__r.__words[2]) + 7) != 48)
        break;
      v121 = HIBYTE(cfa.__r_.__value_.__r.__words[2]) - 1;
      *((_BYTE *)&cfa.__r_.__value_.__s + 23) = (*((_BYTE *)&cfa.__r_.__value_.__s + 23) - 1) & 0x7F;
      v122 = &cfa;
      goto LABEL_244;
    }
    v122 = (std::string *)cfa.__r_.__value_.__r.__words[0];
    if (*(_BYTE *)(cfa.__r_.__value_.__r.__words[0] + cfa.__r_.__value_.__l.__size_ - 1) == 48)
    {
      v121 = --cfa.__r_.__value_.__l.__size_;
LABEL_244:
      v122->__r_.__value_.__s.__data_[v121] = 0;
      continue;
    }
    break;
  }
  *(_OWORD *)&v1278.__first_ = *(_OWORD *)&cfa.__r_.__value_.__l.__data_;
  v1278.__end_ = (std::__split_buffer<std::string>::pointer)cfa.__r_.__value_.__r.__words[2];
  memset(&cfa, 0, sizeof(cfa));
  while (2)
  {
    if ((SHIBYTE(v1278.__end_) & 0x80000000) == 0)
    {
      if (*(&v1277 + HIBYTE(v1278.__end_)) != 46)
        break;
      v123 = (std::__split_buffer<std::string>::pointer)(HIBYTE(v1278.__end_) - 1);
      HIBYTE(v1278.__end_) = (HIBYTE(v1278.__end_) - 1) & 0x7F;
      v124 = &v1278;
      goto LABEL_251;
    }
    v124 = v1278.__first_;
    if (v1278.__first_->__r_.__value_.__s.__data_[(unint64_t)v1278.__begin_ - 1] == 46)
    {
      v123 = --v1278.__begin_;
LABEL_251:
      v123->__r_.__value_.__s.__data_[(_QWORD)v124] = 0;
      continue;
    }
    break;
  }
  v1268 = *(_OWORD *)&v1278.__first_;
  end = v1278.__end_;
  if (SHIBYTE(cfa.__r_.__value_.__r.__words[2]) < 0)
    operator delete(cfa.__r_.__value_.__l.__data_);
  if (SHIBYTE(end) >= 0)
    v125 = (const std::string::value_type *)&v1268;
  else
    v125 = (const std::string::value_type *)v1268;
  if (SHIBYTE(end) >= 0)
    v126 = HIBYTE(end);
  else
    v126 = *((_QWORD *)&v1268 + 1);
  v127 = std::string::append((std::string *)v1271, v125, v126);
  v128 = *(_OWORD *)&v127->__r_.__value_.__l.__data_;
  v1250.__r_.__value_.__r.__words[2] = v127->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v1250.__r_.__value_.__l.__data_ = v128;
  v127->__r_.__value_.__l.__size_ = 0;
  v127->__r_.__value_.__r.__words[2] = 0;
  v127->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(end) < 0)
    operator delete((void *)v1268);
  if ((v1271[23] & 0x80000000) != 0)
    operator delete(*(void **)v1271);
  if (SHIBYTE(v1270.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v1270.__r_.__value_.__l.__data_);
  v129 = std::string::append(&v1250, ",\n", 2uLL);
  v130 = *(_OWORD *)&v129->__r_.__value_.__l.__data_;
  v1251.__r_.__value_.__r.__words[2] = v129->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v1251.__r_.__value_.__l.__data_ = v130;
  v129->__r_.__value_.__l.__size_ = 0;
  v129->__r_.__value_.__r.__words[2] = 0;
  v129->__r_.__value_.__r.__words[0] = 0;
  std::string::basic_string[abi:ne180100]<0>(&v1270, "Thermal_AmbientTemp");
  v131 = std::string::append(&v1270, ": ", 2uLL);
  v132 = *(_OWORD *)&v131->__r_.__value_.__l.__data_;
  *(_QWORD *)&v1271[16] = *((_QWORD *)&v131->__r_.__value_.__l + 2);
  *(_OWORD *)v1271 = v132;
  v131->__r_.__value_.__l.__size_ = 0;
  v131->__r_.__value_.__r.__words[2] = 0;
  v131->__r_.__value_.__r.__words[0] = 0;
  std::to_string(&cfa, v1200);
  while (2)
  {
    if ((SHIBYTE(cfa.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      if (*((_BYTE *)&v1234 + HIBYTE(cfa.__r_.__value_.__r.__words[2]) + 7) != 48)
        break;
      v133 = HIBYTE(cfa.__r_.__value_.__r.__words[2]) - 1;
      *((_BYTE *)&cfa.__r_.__value_.__s + 23) = (*((_BYTE *)&cfa.__r_.__value_.__s + 23) - 1) & 0x7F;
      v134 = &cfa;
      goto LABEL_272;
    }
    v134 = (std::string *)cfa.__r_.__value_.__r.__words[0];
    if (*(_BYTE *)(cfa.__r_.__value_.__r.__words[0] + cfa.__r_.__value_.__l.__size_ - 1) == 48)
    {
      v133 = --cfa.__r_.__value_.__l.__size_;
LABEL_272:
      v134->__r_.__value_.__s.__data_[v133] = 0;
      continue;
    }
    break;
  }
  *(_OWORD *)&v1278.__first_ = *(_OWORD *)&cfa.__r_.__value_.__l.__data_;
  v1278.__end_ = (std::__split_buffer<std::string>::pointer)cfa.__r_.__value_.__r.__words[2];
  memset(&cfa, 0, sizeof(cfa));
  while (2)
  {
    if ((SHIBYTE(v1278.__end_) & 0x80000000) == 0)
    {
      if (*(&v1277 + HIBYTE(v1278.__end_)) != 46)
        break;
      v135 = (std::__split_buffer<std::string>::pointer)(HIBYTE(v1278.__end_) - 1);
      HIBYTE(v1278.__end_) = (HIBYTE(v1278.__end_) - 1) & 0x7F;
      v136 = &v1278;
      goto LABEL_279;
    }
    v136 = v1278.__first_;
    if (v1278.__first_->__r_.__value_.__s.__data_[(unint64_t)v1278.__begin_ - 1] == 46)
    {
      v135 = --v1278.__begin_;
LABEL_279:
      v135->__r_.__value_.__s.__data_[(_QWORD)v136] = 0;
      continue;
    }
    break;
  }
  v1268 = *(_OWORD *)&v1278.__first_;
  end = v1278.__end_;
  if (SHIBYTE(cfa.__r_.__value_.__r.__words[2]) < 0)
    operator delete(cfa.__r_.__value_.__l.__data_);
  if (SHIBYTE(end) >= 0)
    v137 = (const std::string::value_type *)&v1268;
  else
    v137 = (const std::string::value_type *)v1268;
  if (SHIBYTE(end) >= 0)
    v138 = HIBYTE(end);
  else
    v138 = *((_QWORD *)&v1268 + 1);
  v139 = std::string::append((std::string *)v1271, v137, v138);
  v140 = *(_OWORD *)&v139->__r_.__value_.__l.__data_;
  v1253.__r_.__value_.__r.__words[2] = v139->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v1253.__r_.__value_.__l.__data_ = v140;
  v139->__r_.__value_.__l.__size_ = 0;
  v139->__r_.__value_.__r.__words[2] = 0;
  v139->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(end) < 0)
    operator delete((void *)v1268);
  if ((v1271[23] & 0x80000000) != 0)
    operator delete(*(void **)v1271);
  if (SHIBYTE(v1270.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v1270.__r_.__value_.__l.__data_);
  v141 = std::string::append(&v1253, ",\n", 2uLL);
  v142 = *(_OWORD *)&v141->__r_.__value_.__l.__data_;
  v1254.__r_.__value_.__r.__words[2] = v141->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v1254.__r_.__value_.__l.__data_ = v142;
  v141->__r_.__value_.__l.__size_ = 0;
  v141->__r_.__value_.__r.__words[2] = 0;
  v141->__r_.__value_.__r.__words[0] = 0;
  std::string::basic_string[abi:ne180100]<0>(&v1270, "Thermal_GainAttackTime_s");
  v143 = std::string::append(&v1270, ": ", 2uLL);
  v144 = *(_OWORD *)&v143->__r_.__value_.__l.__data_;
  *(_QWORD *)&v1271[16] = *((_QWORD *)&v143->__r_.__value_.__l + 2);
  *(_OWORD *)v1271 = v144;
  v143->__r_.__value_.__l.__size_ = 0;
  v143->__r_.__value_.__r.__words[2] = 0;
  v143->__r_.__value_.__r.__words[0] = 0;
  std::to_string(&cfa, v1197);
  while (2)
  {
    if ((SHIBYTE(cfa.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      if (*((_BYTE *)&v1234 + HIBYTE(cfa.__r_.__value_.__r.__words[2]) + 7) != 48)
        break;
      v145 = HIBYTE(cfa.__r_.__value_.__r.__words[2]) - 1;
      *((_BYTE *)&cfa.__r_.__value_.__s + 23) = (*((_BYTE *)&cfa.__r_.__value_.__s + 23) - 1) & 0x7F;
      v146 = &cfa;
      goto LABEL_300;
    }
    v146 = (std::string *)cfa.__r_.__value_.__r.__words[0];
    if (*(_BYTE *)(cfa.__r_.__value_.__r.__words[0] + cfa.__r_.__value_.__l.__size_ - 1) == 48)
    {
      v145 = --cfa.__r_.__value_.__l.__size_;
LABEL_300:
      v146->__r_.__value_.__s.__data_[v145] = 0;
      continue;
    }
    break;
  }
  *(_OWORD *)&v1278.__first_ = *(_OWORD *)&cfa.__r_.__value_.__l.__data_;
  v1278.__end_ = (std::__split_buffer<std::string>::pointer)cfa.__r_.__value_.__r.__words[2];
  memset(&cfa, 0, sizeof(cfa));
  while (2)
  {
    if ((SHIBYTE(v1278.__end_) & 0x80000000) == 0)
    {
      if (*(&v1277 + HIBYTE(v1278.__end_)) != 46)
        break;
      v147 = (std::__split_buffer<std::string>::pointer)(HIBYTE(v1278.__end_) - 1);
      HIBYTE(v1278.__end_) = (HIBYTE(v1278.__end_) - 1) & 0x7F;
      v148 = &v1278;
      goto LABEL_307;
    }
    v148 = v1278.__first_;
    if (v1278.__first_->__r_.__value_.__s.__data_[(unint64_t)v1278.__begin_ - 1] == 46)
    {
      v147 = --v1278.__begin_;
LABEL_307:
      v147->__r_.__value_.__s.__data_[(_QWORD)v148] = 0;
      continue;
    }
    break;
  }
  v1268 = *(_OWORD *)&v1278.__first_;
  end = v1278.__end_;
  if (SHIBYTE(cfa.__r_.__value_.__r.__words[2]) < 0)
    operator delete(cfa.__r_.__value_.__l.__data_);
  if (SHIBYTE(end) >= 0)
    v149 = (const std::string::value_type *)&v1268;
  else
    v149 = (const std::string::value_type *)v1268;
  if (SHIBYTE(end) >= 0)
    v150 = HIBYTE(end);
  else
    v150 = *((_QWORD *)&v1268 + 1);
  v151 = std::string::append((std::string *)v1271, v149, v150);
  v152 = *(_OWORD *)&v151->__r_.__value_.__l.__data_;
  v1256.__r_.__value_.__r.__words[2] = v151->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v1256.__r_.__value_.__l.__data_ = v152;
  v151->__r_.__value_.__l.__size_ = 0;
  v151->__r_.__value_.__r.__words[2] = 0;
  v151->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(end) < 0)
    operator delete((void *)v1268);
  if ((v1271[23] & 0x80000000) != 0)
    operator delete(*(void **)v1271);
  if (SHIBYTE(v1270.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v1270.__r_.__value_.__l.__data_);
  v153 = std::string::append(&v1256, ",\n", 2uLL);
  v154 = *(_OWORD *)&v153->__r_.__value_.__l.__data_;
  v1257.__r_.__value_.__r.__words[2] = v153->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v1257.__r_.__value_.__l.__data_ = v154;
  v153->__r_.__value_.__l.__size_ = 0;
  v153->__r_.__value_.__r.__words[2] = 0;
  v153->__r_.__value_.__r.__words[0] = 0;
  std::string::basic_string[abi:ne180100]<0>(&v1270, "Thermal_GainReleaseTime_s");
  v155 = std::string::append(&v1270, ": ", 2uLL);
  v156 = *(_OWORD *)&v155->__r_.__value_.__l.__data_;
  *(_QWORD *)&v1271[16] = *((_QWORD *)&v155->__r_.__value_.__l + 2);
  *(_OWORD *)v1271 = v156;
  v155->__r_.__value_.__l.__size_ = 0;
  v155->__r_.__value_.__r.__words[2] = 0;
  v155->__r_.__value_.__r.__words[0] = 0;
  std::to_string(&cfa, v1194);
  while (2)
  {
    if ((SHIBYTE(cfa.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      if (*((_BYTE *)&v1234 + HIBYTE(cfa.__r_.__value_.__r.__words[2]) + 7) != 48)
        break;
      v157 = HIBYTE(cfa.__r_.__value_.__r.__words[2]) - 1;
      *((_BYTE *)&cfa.__r_.__value_.__s + 23) = (*((_BYTE *)&cfa.__r_.__value_.__s + 23) - 1) & 0x7F;
      v158 = &cfa;
      goto LABEL_328;
    }
    v158 = (std::string *)cfa.__r_.__value_.__r.__words[0];
    if (*(_BYTE *)(cfa.__r_.__value_.__r.__words[0] + cfa.__r_.__value_.__l.__size_ - 1) == 48)
    {
      v157 = --cfa.__r_.__value_.__l.__size_;
LABEL_328:
      v158->__r_.__value_.__s.__data_[v157] = 0;
      continue;
    }
    break;
  }
  *(_OWORD *)&v1278.__first_ = *(_OWORD *)&cfa.__r_.__value_.__l.__data_;
  v1278.__end_ = (std::__split_buffer<std::string>::pointer)cfa.__r_.__value_.__r.__words[2];
  memset(&cfa, 0, sizeof(cfa));
  while (2)
  {
    if ((SHIBYTE(v1278.__end_) & 0x80000000) == 0)
    {
      if (*(&v1277 + HIBYTE(v1278.__end_)) != 46)
        break;
      v159 = (std::__split_buffer<std::string>::pointer)(HIBYTE(v1278.__end_) - 1);
      HIBYTE(v1278.__end_) = (HIBYTE(v1278.__end_) - 1) & 0x7F;
      v160 = &v1278;
      goto LABEL_335;
    }
    v160 = v1278.__first_;
    if (v1278.__first_->__r_.__value_.__s.__data_[(unint64_t)v1278.__begin_ - 1] == 46)
    {
      v159 = --v1278.__begin_;
LABEL_335:
      v159->__r_.__value_.__s.__data_[(_QWORD)v160] = 0;
      continue;
    }
    break;
  }
  v1268 = *(_OWORD *)&v1278.__first_;
  end = v1278.__end_;
  if (SHIBYTE(cfa.__r_.__value_.__r.__words[2]) < 0)
    operator delete(cfa.__r_.__value_.__l.__data_);
  if (SHIBYTE(end) >= 0)
    v161 = (const std::string::value_type *)&v1268;
  else
    v161 = (const std::string::value_type *)v1268;
  if (SHIBYTE(end) >= 0)
    v162 = HIBYTE(end);
  else
    v162 = *((_QWORD *)&v1268 + 1);
  v163 = std::string::append((std::string *)v1271, v161, v162);
  v164 = *(_OWORD *)&v163->__r_.__value_.__l.__data_;
  v1259.__r_.__value_.__r.__words[2] = v163->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v1259.__r_.__value_.__l.__data_ = v164;
  v163->__r_.__value_.__l.__size_ = 0;
  v163->__r_.__value_.__r.__words[2] = 0;
  v163->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(end) < 0)
    operator delete((void *)v1268);
  if ((v1271[23] & 0x80000000) != 0)
    operator delete(*(void **)v1271);
  if (SHIBYTE(v1270.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v1270.__r_.__value_.__l.__data_);
  v165 = std::string::append(&v1259, ",\n", 2uLL);
  v166 = *(_OWORD *)&v165->__r_.__value_.__l.__data_;
  v1261.__r_.__value_.__r.__words[2] = v165->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v1261.__r_.__value_.__l.__data_ = v166;
  v165->__r_.__value_.__l.__size_ = 0;
  v165->__r_.__value_.__r.__words[2] = 0;
  v165->__r_.__value_.__r.__words[0] = 0;
  std::string::basic_string[abi:ne180100]<0>(&v1270, "Disp_PeakAttackTime_s");
  v167 = std::string::append(&v1270, ": ", 2uLL);
  v168 = *(_OWORD *)&v167->__r_.__value_.__l.__data_;
  *(_QWORD *)&v1271[16] = *((_QWORD *)&v167->__r_.__value_.__l + 2);
  *(_OWORD *)v1271 = v168;
  v167->__r_.__value_.__l.__size_ = 0;
  v167->__r_.__value_.__r.__words[2] = 0;
  v167->__r_.__value_.__r.__words[0] = 0;
  std::to_string(&cfa, v1192);
  while (2)
  {
    if ((SHIBYTE(cfa.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      if (*((_BYTE *)&v1234 + HIBYTE(cfa.__r_.__value_.__r.__words[2]) + 7) != 48)
        break;
      v169 = HIBYTE(cfa.__r_.__value_.__r.__words[2]) - 1;
      *((_BYTE *)&cfa.__r_.__value_.__s + 23) = (*((_BYTE *)&cfa.__r_.__value_.__s + 23) - 1) & 0x7F;
      v170 = &cfa;
      goto LABEL_356;
    }
    v170 = (std::string *)cfa.__r_.__value_.__r.__words[0];
    if (*(_BYTE *)(cfa.__r_.__value_.__r.__words[0] + cfa.__r_.__value_.__l.__size_ - 1) == 48)
    {
      v169 = --cfa.__r_.__value_.__l.__size_;
LABEL_356:
      v170->__r_.__value_.__s.__data_[v169] = 0;
      continue;
    }
    break;
  }
  *(_OWORD *)&v1278.__first_ = *(_OWORD *)&cfa.__r_.__value_.__l.__data_;
  v1278.__end_ = (std::__split_buffer<std::string>::pointer)cfa.__r_.__value_.__r.__words[2];
  memset(&cfa, 0, sizeof(cfa));
  while (2)
  {
    if ((SHIBYTE(v1278.__end_) & 0x80000000) == 0)
    {
      if (*(&v1277 + HIBYTE(v1278.__end_)) != 46)
        break;
      v171 = (std::__split_buffer<std::string>::pointer)(HIBYTE(v1278.__end_) - 1);
      HIBYTE(v1278.__end_) = (HIBYTE(v1278.__end_) - 1) & 0x7F;
      v172 = &v1278;
      goto LABEL_363;
    }
    v172 = v1278.__first_;
    if (v1278.__first_->__r_.__value_.__s.__data_[(unint64_t)v1278.__begin_ - 1] == 46)
    {
      v171 = --v1278.__begin_;
LABEL_363:
      v171->__r_.__value_.__s.__data_[(_QWORD)v172] = 0;
      continue;
    }
    break;
  }
  v1268 = *(_OWORD *)&v1278.__first_;
  end = v1278.__end_;
  if (SHIBYTE(cfa.__r_.__value_.__r.__words[2]) < 0)
    operator delete(cfa.__r_.__value_.__l.__data_);
  if (SHIBYTE(end) >= 0)
    v173 = (const std::string::value_type *)&v1268;
  else
    v173 = (const std::string::value_type *)v1268;
  if (SHIBYTE(end) >= 0)
    v174 = HIBYTE(end);
  else
    v174 = *((_QWORD *)&v1268 + 1);
  v175 = std::string::append((std::string *)v1271, v173, v174);
  v176 = *(_OWORD *)&v175->__r_.__value_.__l.__data_;
  v1263.__r_.__value_.__r.__words[2] = v175->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v1263.__r_.__value_.__l.__data_ = v176;
  v175->__r_.__value_.__l.__size_ = 0;
  v175->__r_.__value_.__r.__words[2] = 0;
  v175->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(end) < 0)
    operator delete((void *)v1268);
  if ((v1271[23] & 0x80000000) != 0)
    operator delete(*(void **)v1271);
  if (SHIBYTE(v1270.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v1270.__r_.__value_.__l.__data_);
  v177 = std::string::append(&v1263, ",\n", 2uLL);
  v178 = *(_OWORD *)&v177->__r_.__value_.__l.__data_;
  v1264.__r_.__value_.__r.__words[2] = v177->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v1264.__r_.__value_.__l.__data_ = v178;
  v177->__r_.__value_.__l.__size_ = 0;
  v177->__r_.__value_.__r.__words[2] = 0;
  v177->__r_.__value_.__r.__words[0] = 0;
  std::string::basic_string[abi:ne180100]<0>(&v1270, "Disp_PeakDecayTime_s");
  v179 = std::string::append(&v1270, ": ", 2uLL);
  v180 = *(_OWORD *)&v179->__r_.__value_.__l.__data_;
  *(_QWORD *)&v1271[16] = *((_QWORD *)&v179->__r_.__value_.__l + 2);
  *(_OWORD *)v1271 = v180;
  v179->__r_.__value_.__l.__size_ = 0;
  v179->__r_.__value_.__r.__words[2] = 0;
  v179->__r_.__value_.__r.__words[0] = 0;
  std::to_string(&cfa, v1189);
  while (2)
  {
    if ((SHIBYTE(cfa.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      if (*((_BYTE *)&v1234 + HIBYTE(cfa.__r_.__value_.__r.__words[2]) + 7) != 48)
        break;
      v181 = HIBYTE(cfa.__r_.__value_.__r.__words[2]) - 1;
      *((_BYTE *)&cfa.__r_.__value_.__s + 23) = (*((_BYTE *)&cfa.__r_.__value_.__s + 23) - 1) & 0x7F;
      v182 = &cfa;
      goto LABEL_384;
    }
    v182 = (std::string *)cfa.__r_.__value_.__r.__words[0];
    if (*(_BYTE *)(cfa.__r_.__value_.__r.__words[0] + cfa.__r_.__value_.__l.__size_ - 1) == 48)
    {
      v181 = --cfa.__r_.__value_.__l.__size_;
LABEL_384:
      v182->__r_.__value_.__s.__data_[v181] = 0;
      continue;
    }
    break;
  }
  *(_OWORD *)&v1278.__first_ = *(_OWORD *)&cfa.__r_.__value_.__l.__data_;
  v1278.__end_ = (std::__split_buffer<std::string>::pointer)cfa.__r_.__value_.__r.__words[2];
  memset(&cfa, 0, sizeof(cfa));
  while (2)
  {
    if ((SHIBYTE(v1278.__end_) & 0x80000000) == 0)
    {
      if (*(&v1277 + HIBYTE(v1278.__end_)) != 46)
        break;
      v183 = (std::__split_buffer<std::string>::pointer)(HIBYTE(v1278.__end_) - 1);
      HIBYTE(v1278.__end_) = (HIBYTE(v1278.__end_) - 1) & 0x7F;
      v184 = &v1278;
      goto LABEL_391;
    }
    v184 = v1278.__first_;
    if (v1278.__first_->__r_.__value_.__s.__data_[(unint64_t)v1278.__begin_ - 1] == 46)
    {
      v183 = --v1278.__begin_;
LABEL_391:
      v183->__r_.__value_.__s.__data_[(_QWORD)v184] = 0;
      continue;
    }
    break;
  }
  v1268 = *(_OWORD *)&v1278.__first_;
  end = v1278.__end_;
  if (SHIBYTE(cfa.__r_.__value_.__r.__words[2]) < 0)
    operator delete(cfa.__r_.__value_.__l.__data_);
  if (SHIBYTE(end) >= 0)
    v185 = (const std::string::value_type *)&v1268;
  else
    v185 = (const std::string::value_type *)v1268;
  if (SHIBYTE(end) >= 0)
    v186 = HIBYTE(end);
  else
    v186 = *((_QWORD *)&v1268 + 1);
  v187 = std::string::append((std::string *)v1271, v185, v186);
  v188 = *(_OWORD *)&v187->__r_.__value_.__l.__data_;
  v1266.__r_.__value_.__r.__words[2] = v187->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v1266.__r_.__value_.__l.__data_ = v188;
  v187->__r_.__value_.__l.__size_ = 0;
  v187->__r_.__value_.__r.__words[2] = 0;
  v187->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(end) < 0)
    operator delete((void *)v1268);
  if ((v1271[23] & 0x80000000) != 0)
    operator delete(*(void **)v1271);
  if (SHIBYTE(v1270.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v1270.__r_.__value_.__l.__data_);
  v189 = std::string::append(&v1266, ",\n", 2uLL);
  v190 = *(_OWORD *)&v189->__r_.__value_.__l.__data_;
  v1267.__r_.__value_.__r.__words[2] = v189->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v1267.__r_.__value_.__l.__data_ = v190;
  v189->__r_.__value_.__l.__size_ = 0;
  v189->__r_.__value_.__r.__words[2] = 0;
  v189->__r_.__value_.__r.__words[0] = 0;
  std::string::basic_string[abi:ne180100]<0>(&v1270, "Disp_FBIntegrationTime_s");
  v191 = std::string::append(&v1270, ": ", 2uLL);
  v192 = *(_OWORD *)&v191->__r_.__value_.__l.__data_;
  *(_QWORD *)&v1271[16] = *((_QWORD *)&v191->__r_.__value_.__l + 2);
  *(_OWORD *)v1271 = v192;
  v191->__r_.__value_.__l.__size_ = 0;
  v191->__r_.__value_.__r.__words[2] = 0;
  v191->__r_.__value_.__r.__words[0] = 0;
  std::to_string(&cfa, v1187);
  while (2)
  {
    if ((SHIBYTE(cfa.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      if (*((_BYTE *)&v1234 + HIBYTE(cfa.__r_.__value_.__r.__words[2]) + 7) != 48)
        break;
      v193 = HIBYTE(cfa.__r_.__value_.__r.__words[2]) - 1;
      *((_BYTE *)&cfa.__r_.__value_.__s + 23) = (*((_BYTE *)&cfa.__r_.__value_.__s + 23) - 1) & 0x7F;
      v194 = &cfa;
      goto LABEL_412;
    }
    v194 = (std::string *)cfa.__r_.__value_.__r.__words[0];
    if (*(_BYTE *)(cfa.__r_.__value_.__r.__words[0] + cfa.__r_.__value_.__l.__size_ - 1) == 48)
    {
      v193 = --cfa.__r_.__value_.__l.__size_;
LABEL_412:
      v194->__r_.__value_.__s.__data_[v193] = 0;
      continue;
    }
    break;
  }
  *(_OWORD *)&v1278.__first_ = *(_OWORD *)&cfa.__r_.__value_.__l.__data_;
  v1278.__end_ = (std::__split_buffer<std::string>::pointer)cfa.__r_.__value_.__r.__words[2];
  memset(&cfa, 0, sizeof(cfa));
  while (2)
  {
    if ((SHIBYTE(v1278.__end_) & 0x80000000) == 0)
    {
      if (*(&v1277 + HIBYTE(v1278.__end_)) != 46)
        break;
      v195 = (std::__split_buffer<std::string>::pointer)(HIBYTE(v1278.__end_) - 1);
      HIBYTE(v1278.__end_) = (HIBYTE(v1278.__end_) - 1) & 0x7F;
      v196 = &v1278;
      goto LABEL_419;
    }
    v196 = v1278.__first_;
    if (v1278.__first_->__r_.__value_.__s.__data_[(unint64_t)v1278.__begin_ - 1] == 46)
    {
      v195 = --v1278.__begin_;
LABEL_419:
      v195->__r_.__value_.__s.__data_[(_QWORD)v196] = 0;
      continue;
    }
    break;
  }
  v1268 = *(_OWORD *)&v1278.__first_;
  end = v1278.__end_;
  if (SHIBYTE(cfa.__r_.__value_.__r.__words[2]) < 0)
    operator delete(cfa.__r_.__value_.__l.__data_);
  if (SHIBYTE(end) >= 0)
    v197 = (const std::string::value_type *)&v1268;
  else
    v197 = (const std::string::value_type *)v1268;
  if (SHIBYTE(end) >= 0)
    v198 = HIBYTE(end);
  else
    v198 = *((_QWORD *)&v1268 + 1);
  v199 = std::string::append((std::string *)v1271, v197, v198);
  v200 = *(_OWORD *)&v199->__r_.__value_.__l.__data_;
  v1265.__r_.__value_.__r.__words[2] = v199->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v1265.__r_.__value_.__l.__data_ = v200;
  v199->__r_.__value_.__l.__size_ = 0;
  v199->__r_.__value_.__r.__words[2] = 0;
  v199->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(end) < 0)
    operator delete((void *)v1268);
  if ((v1271[23] & 0x80000000) != 0)
    operator delete(*(void **)v1271);
  if (SHIBYTE(v1270.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v1270.__r_.__value_.__l.__data_);
  if ((v1265.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v201 = &v1265;
  else
    v201 = (std::string *)v1265.__r_.__value_.__r.__words[0];
  if ((v1265.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(v1265.__r_.__value_.__r.__words[2]);
  else
    size = v1265.__r_.__value_.__l.__size_;
  v203 = std::string::append(&v1267, (const std::string::value_type *)v201, size);
  v204 = *(_OWORD *)&v203->__r_.__value_.__l.__data_;
  v1262.__r_.__value_.__r.__words[2] = v203->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v1262.__r_.__value_.__l.__data_ = v204;
  v203->__r_.__value_.__l.__size_ = 0;
  v203->__r_.__value_.__r.__words[2] = 0;
  v203->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v1265.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v1265.__r_.__value_.__l.__data_);
  if (SHIBYTE(v1267.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v1267.__r_.__value_.__l.__data_);
  if (SHIBYTE(v1266.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v1266.__r_.__value_.__l.__data_);
  if ((v1262.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v205 = &v1262;
  else
    v205 = (std::string *)v1262.__r_.__value_.__r.__words[0];
  if ((v1262.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v206 = HIBYTE(v1262.__r_.__value_.__r.__words[2]);
  else
    v206 = v1262.__r_.__value_.__l.__size_;
  v207 = std::string::append(&v1264, (const std::string::value_type *)v205, v206);
  v208 = *(_OWORD *)&v207->__r_.__value_.__l.__data_;
  v1258.__r_.__value_.__r.__words[2] = v207->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v1258.__r_.__value_.__l.__data_ = v208;
  v207->__r_.__value_.__l.__size_ = 0;
  v207->__r_.__value_.__r.__words[2] = 0;
  v207->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v1262.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v1262.__r_.__value_.__l.__data_);
  if (SHIBYTE(v1264.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v1264.__r_.__value_.__l.__data_);
  if (SHIBYTE(v1263.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v1263.__r_.__value_.__l.__data_);
  if ((v1258.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v209 = &v1258;
  else
    v209 = (std::string *)v1258.__r_.__value_.__r.__words[0];
  if ((v1258.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v210 = HIBYTE(v1258.__r_.__value_.__r.__words[2]);
  else
    v210 = v1258.__r_.__value_.__l.__size_;
  v211 = std::string::append(&v1261, (const std::string::value_type *)v209, v210);
  v212 = *(_OWORD *)&v211->__r_.__value_.__l.__data_;
  v1255.__r_.__value_.__r.__words[2] = v211->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v1255.__r_.__value_.__l.__data_ = v212;
  v211->__r_.__value_.__l.__size_ = 0;
  v211->__r_.__value_.__r.__words[2] = 0;
  v211->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v1258.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v1258.__r_.__value_.__l.__data_);
  if (SHIBYTE(v1261.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v1261.__r_.__value_.__l.__data_);
  if (SHIBYTE(v1259.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v1259.__r_.__value_.__l.__data_);
  if ((v1255.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v213 = &v1255;
  else
    v213 = (std::string *)v1255.__r_.__value_.__r.__words[0];
  if ((v1255.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v214 = HIBYTE(v1255.__r_.__value_.__r.__words[2]);
  else
    v214 = v1255.__r_.__value_.__l.__size_;
  v215 = std::string::append(&v1257, (const std::string::value_type *)v213, v214);
  v216 = *(_OWORD *)&v215->__r_.__value_.__l.__data_;
  v1252.__r_.__value_.__r.__words[2] = v215->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v1252.__r_.__value_.__l.__data_ = v216;
  v215->__r_.__value_.__l.__size_ = 0;
  v215->__r_.__value_.__r.__words[2] = 0;
  v215->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v1255.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v1255.__r_.__value_.__l.__data_);
  if (SHIBYTE(v1257.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v1257.__r_.__value_.__l.__data_);
  if (SHIBYTE(v1256.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v1256.__r_.__value_.__l.__data_);
  if ((v1252.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v217 = &v1252;
  else
    v217 = (std::string *)v1252.__r_.__value_.__r.__words[0];
  if ((v1252.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v218 = HIBYTE(v1252.__r_.__value_.__r.__words[2]);
  else
    v218 = v1252.__r_.__value_.__l.__size_;
  v219 = std::string::append(&v1254, (const std::string::value_type *)v217, v218);
  v220 = *(_OWORD *)&v219->__r_.__value_.__l.__data_;
  v1249.__r_.__value_.__r.__words[2] = v219->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v1249.__r_.__value_.__l.__data_ = v220;
  v219->__r_.__value_.__l.__size_ = 0;
  v219->__r_.__value_.__r.__words[2] = 0;
  v219->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v1252.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v1252.__r_.__value_.__l.__data_);
  if (SHIBYTE(v1254.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v1254.__r_.__value_.__l.__data_);
  if (SHIBYTE(v1253.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v1253.__r_.__value_.__l.__data_);
  if ((v1249.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v221 = &v1249;
  else
    v221 = (std::string *)v1249.__r_.__value_.__r.__words[0];
  if ((v1249.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v222 = HIBYTE(v1249.__r_.__value_.__r.__words[2]);
  else
    v222 = v1249.__r_.__value_.__l.__size_;
  v223 = std::string::append(&v1251, (const std::string::value_type *)v221, v222);
  v224 = *(_OWORD *)&v223->__r_.__value_.__l.__data_;
  v1246.__r_.__value_.__r.__words[2] = v223->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v1246.__r_.__value_.__l.__data_ = v224;
  v223->__r_.__value_.__l.__size_ = 0;
  v223->__r_.__value_.__r.__words[2] = 0;
  v223->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v1249.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v1249.__r_.__value_.__l.__data_);
  if (SHIBYTE(v1251.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v1251.__r_.__value_.__l.__data_);
  if (SHIBYTE(v1250.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v1250.__r_.__value_.__l.__data_);
  if ((v1246.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v225 = &v1246;
  else
    v225 = (std::string *)v1246.__r_.__value_.__r.__words[0];
  if ((v1246.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v226 = HIBYTE(v1246.__r_.__value_.__r.__words[2]);
  else
    v226 = v1246.__r_.__value_.__l.__size_;
  v227 = std::string::append(&v1248, (const std::string::value_type *)v225, v226);
  v228 = *(_OWORD *)&v227->__r_.__value_.__l.__data_;
  v1243 = v227->__r_.__value_.__r.__words[2];
  v1242 = v228;
  v227->__r_.__value_.__l.__size_ = 0;
  v227->__r_.__value_.__r.__words[2] = 0;
  v227->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v1246.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v1246.__r_.__value_.__l.__data_);
  if (SHIBYTE(v1248.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v1248.__r_.__value_.__l.__data_);
  if (SHIBYTE(v1247.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v1247.__r_.__value_.__l.__data_);
  if (v1243 >= 0)
    v229 = (const std::string::value_type *)&v1242;
  else
    v229 = (const std::string::value_type *)v1242;
  if (v1243 >= 0)
    v230 = HIBYTE(v1243);
  else
    v230 = *((_QWORD *)&v1242 + 1);
  v231 = std::string::append(&v1245, v229, v230);
  v232 = *(_OWORD *)&v231->__r_.__value_.__l.__data_;
  v1239 = v231->__r_.__value_.__r.__words[2];
  *(_OWORD *)v1238 = v232;
  v231->__r_.__value_.__l.__size_ = 0;
  v231->__r_.__value_.__r.__words[2] = 0;
  v231->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v1243) < 0)
    operator delete((void *)v1242);
  if (SHIBYTE(v1245.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v1245.__r_.__value_.__l.__data_);
  if (SHIBYTE(v1244.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v1244.__r_.__value_.__l.__data_);
  if (v1239 >= 0)
    v233 = v1238;
  else
    v233 = (void **)v1238[0];
  if (v1239 >= 0)
    v234 = HIBYTE(v1239);
  else
    v234 = (std::string::size_type)v1238[1];
  v235 = std::string::append(&v1241, (const std::string::value_type *)v233, v234);
  v1231 = *v235;
  v235->__r_.__value_.__l.__size_ = 0;
  v235->__r_.__value_.__r.__words[2] = 0;
  v235->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v1239) < 0)
    operator delete(v1238[0]);
  if (SHIBYTE(v1241.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v1241.__r_.__value_.__l.__data_);
  if (SHIBYTE(v1240.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v1240.__r_.__value_.__l.__data_);
  AUT::ReplaceAll((std::string *)&v1278, (uint64_t)&v1231, "\n", 1, "\n  ┣ ", 7uLL);
  v236 = std::string::insert((std::string *)&v1278, 0, "\n  ┏ ", 7uLL);
  v237 = *(_OWORD *)&v236->__r_.__value_.__l.__data_;
  v1233 = v236->__r_.__value_.__r.__words[2];
  *(_OWORD *)v1232 = v237;
  v236->__r_.__value_.__l.__size_ = 0;
  v236->__r_.__value_.__r.__words[2] = 0;
  v236->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v1278.__end_) < 0)
    operator delete(v1278.__first_);
  v238 = v1232;
  if (v1233 < 0)
    v238 = (void **)v1232[0];
  LODWORD(buf[0].__r_.__value_.__l.__data_) = 136315650;
  *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)"AUSpeakerProtectionV3.cpp";
  WORD2(buf[0].__r_.__value_.__r.__words[1]) = 1024;
  *(_DWORD *)((char *)&buf[0].__r_.__value_.__r.__words[1] + 6) = 3852;
  WORD1(buf[0].__r_.__value_.__r.__words[2]) = 2080;
  *(std::string::size_type *)((char *)&buf[0].__r_.__value_.__r.__words[2] + 4) = (std::string::size_type)v238;
  _os_log_impl(&dword_1B5ED0000, v82, OS_LOG_TYPE_DEBUG, "%25s:%-5d Applying system params:%s", (uint8_t *)buf, 0x1Cu);
  if (SHIBYTE(v1233) < 0)
    operator delete(v1232[0]);
  if (SHIBYTE(v1231.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v1231.__r_.__value_.__l.__data_);
LABEL_550:
  v239 = *((_QWORD *)this + 9);
  if (v239)
  {
    v240 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v239 + 32))(v239, 0);
  }
  else
  {
    v241 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v241)
      v240 = 0;
    else
      v240 = *v241;
  }
  ausdk::AUElement::SetParameter(v240, 8u, __val, 0);
  ausdk::AUElement::SetParameter(v240, 5u, v1208, 0);
  ausdk::AUElement::SetParameter(v240, 6u, v1205, 0);
  ausdk::AUElement::SetParameter(v240, 7u, v1203, 0);
  ausdk::AUElement::SetParameter(v240, 4u, v1200, 0);
  ausdk::AUElement::SetParameter(v240, 2u, v1197, 0);
  ausdk::AUElement::SetParameter(v240, 3u, v1194, 0);
  ausdk::AUElement::SetParameter(v240, 9u, v1192, 0);
  ausdk::AUElement::SetParameter(v240, 0xAu, v1189, 0);
  ausdk::AUElement::SetParameter(v240, 0xBu, v1187, 0);
  if (__p == v10)
    goto LABEL_964;
  v242 = (float *)__p;
  while (2)
  {
    v243 = (NSObject **)spp3Subsystem();
    if (v243)
    {
      v244 = *v243;
      if (!*v243)
        goto LABEL_958;
    }
    else
    {
      v244 = MEMORY[0x1E0C81028];
    }
    if (!os_log_type_enabled(v244, OS_LOG_TYPE_DEBUG))
      goto LABEL_958;
    v245 = *v242;
    v247 = v242[1];
    v246 = v242[2];
    v249 = v242[3];
    v248 = v242[4];
    v251 = v242[5];
    v250 = v242[6];
    v253 = v242[7];
    v252 = v242[8];
    v1218 = v242[9];
    v1213 = v242[10];
    std::string::basic_string[abi:ne180100]<0>(&v1270, "Rshunt");
    v254 = std::string::append(&v1270, ": ", 2uLL);
    v255 = *(_OWORD *)&v254->__r_.__value_.__l.__data_;
    *(_QWORD *)&v1271[16] = *((_QWORD *)&v254->__r_.__value_.__l + 2);
    *(_OWORD *)v1271 = v255;
    v254->__r_.__value_.__l.__size_ = 0;
    v254->__r_.__value_.__r.__words[2] = 0;
    v254->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&cfa, v247);
    while (2)
    {
      if ((SHIBYTE(cfa.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
        if (*((_BYTE *)&v1234 + HIBYTE(cfa.__r_.__value_.__r.__words[2]) + 7) != 48)
          break;
        v256 = HIBYTE(cfa.__r_.__value_.__r.__words[2]) - 1;
        *((_BYTE *)&cfa.__r_.__value_.__s + 23) = (*((_BYTE *)&cfa.__r_.__value_.__s + 23) - 1) & 0x7F;
        v257 = &cfa;
        goto LABEL_568;
      }
      v257 = (std::string *)cfa.__r_.__value_.__r.__words[0];
      if (*(_BYTE *)(cfa.__r_.__value_.__r.__words[0] + cfa.__r_.__value_.__l.__size_ - 1) == 48)
      {
        v256 = --cfa.__r_.__value_.__l.__size_;
LABEL_568:
        v257->__r_.__value_.__s.__data_[v256] = 0;
        continue;
      }
      break;
    }
    *(_OWORD *)&v1278.__first_ = *(_OWORD *)&cfa.__r_.__value_.__l.__data_;
    v1278.__end_ = (std::__split_buffer<std::string>::pointer)cfa.__r_.__value_.__r.__words[2];
    memset(&cfa, 0, sizeof(cfa));
    while (2)
    {
      if ((SHIBYTE(v1278.__end_) & 0x80000000) == 0)
      {
        if (*(&v1277 + HIBYTE(v1278.__end_)) != 46)
          break;
        v258 = (std::__split_buffer<std::string>::pointer)(HIBYTE(v1278.__end_) - 1);
        HIBYTE(v1278.__end_) = (HIBYTE(v1278.__end_) - 1) & 0x7F;
        v259 = &v1278;
        goto LABEL_575;
      }
      v259 = v1278.__first_;
      if (v1278.__first_->__r_.__value_.__s.__data_[(unint64_t)v1278.__begin_ - 1] == 46)
      {
        v258 = --v1278.__begin_;
LABEL_575:
        v258->__r_.__value_.__s.__data_[(_QWORD)v259] = 0;
        continue;
      }
      break;
    }
    v1268 = *(_OWORD *)&v1278.__first_;
    end = v1278.__end_;
    if (SHIBYTE(cfa.__r_.__value_.__r.__words[2]) < 0)
      operator delete(cfa.__r_.__value_.__l.__data_);
    if (SHIBYTE(end) >= 0)
      v260 = (const std::string::value_type *)&v1268;
    else
      v260 = (const std::string::value_type *)v1268;
    if (SHIBYTE(end) >= 0)
      v261 = HIBYTE(end);
    else
      v261 = *((_QWORD *)&v1268 + 1);
    v262 = std::string::append((std::string *)v1271, v260, v261);
    v263 = *(_OWORD *)&v262->__r_.__value_.__l.__data_;
    v1240.__r_.__value_.__r.__words[2] = v262->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v1240.__r_.__value_.__l.__data_ = v263;
    v262->__r_.__value_.__l.__size_ = 0;
    v262->__r_.__value_.__r.__words[2] = 0;
    v262->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(end) < 0)
      operator delete((void *)v1268);
    if ((v1271[23] & 0x80000000) != 0)
      operator delete(*(void **)v1271);
    if (SHIBYTE(v1270.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v1270.__r_.__value_.__l.__data_);
    v264 = std::string::append(&v1240, ",\n", 2uLL);
    v265 = *(_OWORD *)&v264->__r_.__value_.__l.__data_;
    v1241.__r_.__value_.__r.__words[2] = v264->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v1241.__r_.__value_.__l.__data_ = v265;
    v264->__r_.__value_.__l.__size_ = 0;
    v264->__r_.__value_.__r.__words[2] = 0;
    v264->__r_.__value_.__r.__words[0] = 0;
    std::string::basic_string[abi:ne180100]<0>(&v1270, "Reb_ref");
    v266 = std::string::append(&v1270, ": ", 2uLL);
    v267 = *(_OWORD *)&v266->__r_.__value_.__l.__data_;
    *(_QWORD *)&v1271[16] = *((_QWORD *)&v266->__r_.__value_.__l + 2);
    *(_OWORD *)v1271 = v267;
    v266->__r_.__value_.__l.__size_ = 0;
    v266->__r_.__value_.__r.__words[2] = 0;
    v266->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&cfa, v246);
    while (2)
    {
      if ((SHIBYTE(cfa.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
        if (*((_BYTE *)&v1234 + HIBYTE(cfa.__r_.__value_.__r.__words[2]) + 7) != 48)
          break;
        v268 = HIBYTE(cfa.__r_.__value_.__r.__words[2]) - 1;
        *((_BYTE *)&cfa.__r_.__value_.__s + 23) = (*((_BYTE *)&cfa.__r_.__value_.__s + 23) - 1) & 0x7F;
        v269 = &cfa;
        goto LABEL_596;
      }
      v269 = (std::string *)cfa.__r_.__value_.__r.__words[0];
      if (*(_BYTE *)(cfa.__r_.__value_.__r.__words[0] + cfa.__r_.__value_.__l.__size_ - 1) == 48)
      {
        v268 = --cfa.__r_.__value_.__l.__size_;
LABEL_596:
        v269->__r_.__value_.__s.__data_[v268] = 0;
        continue;
      }
      break;
    }
    *(_OWORD *)&v1278.__first_ = *(_OWORD *)&cfa.__r_.__value_.__l.__data_;
    v1278.__end_ = (std::__split_buffer<std::string>::pointer)cfa.__r_.__value_.__r.__words[2];
    memset(&cfa, 0, sizeof(cfa));
    while (2)
    {
      if ((SHIBYTE(v1278.__end_) & 0x80000000) == 0)
      {
        if (*(&v1277 + HIBYTE(v1278.__end_)) != 46)
          break;
        v270 = (std::__split_buffer<std::string>::pointer)(HIBYTE(v1278.__end_) - 1);
        HIBYTE(v1278.__end_) = (HIBYTE(v1278.__end_) - 1) & 0x7F;
        v271 = &v1278;
        goto LABEL_603;
      }
      v271 = v1278.__first_;
      if (v1278.__first_->__r_.__value_.__s.__data_[(unint64_t)v1278.__begin_ - 1] == 46)
      {
        v270 = --v1278.__begin_;
LABEL_603:
        v270->__r_.__value_.__s.__data_[(_QWORD)v271] = 0;
        continue;
      }
      break;
    }
    v1268 = *(_OWORD *)&v1278.__first_;
    end = v1278.__end_;
    if (SHIBYTE(cfa.__r_.__value_.__r.__words[2]) < 0)
      operator delete(cfa.__r_.__value_.__l.__data_);
    if (SHIBYTE(end) >= 0)
      v272 = (const std::string::value_type *)&v1268;
    else
      v272 = (const std::string::value_type *)v1268;
    if (SHIBYTE(end) >= 0)
      v273 = HIBYTE(end);
    else
      v273 = *((_QWORD *)&v1268 + 1);
    v274 = std::string::append((std::string *)v1271, v272, v273);
    v275 = *(_OWORD *)&v274->__r_.__value_.__l.__data_;
    v1244.__r_.__value_.__r.__words[2] = v274->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v1244.__r_.__value_.__l.__data_ = v275;
    v274->__r_.__value_.__l.__size_ = 0;
    v274->__r_.__value_.__r.__words[2] = 0;
    v274->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(end) < 0)
      operator delete((void *)v1268);
    if ((v1271[23] & 0x80000000) != 0)
      operator delete(*(void **)v1271);
    if (SHIBYTE(v1270.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v1270.__r_.__value_.__l.__data_);
    v276 = std::string::append(&v1244, ",\n", 2uLL);
    v277 = *(_OWORD *)&v276->__r_.__value_.__l.__data_;
    v1245.__r_.__value_.__r.__words[2] = v276->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v1245.__r_.__value_.__l.__data_ = v277;
    v276->__r_.__value_.__l.__size_ = 0;
    v276->__r_.__value_.__r.__words[2] = 0;
    v276->__r_.__value_.__r.__words[0] = 0;
    std::string::basic_string[abi:ne180100]<0>(&v1270, "Rampout");
    v278 = std::string::append(&v1270, ": ", 2uLL);
    v279 = *(_OWORD *)&v278->__r_.__value_.__l.__data_;
    *(_QWORD *)&v1271[16] = *((_QWORD *)&v278->__r_.__value_.__l + 2);
    *(_OWORD *)v1271 = v279;
    v278->__r_.__value_.__l.__size_ = 0;
    v278->__r_.__value_.__r.__words[2] = 0;
    v278->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&cfa, v249);
    while (2)
    {
      if ((SHIBYTE(cfa.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
        if (*((_BYTE *)&v1234 + HIBYTE(cfa.__r_.__value_.__r.__words[2]) + 7) != 48)
          break;
        v280 = HIBYTE(cfa.__r_.__value_.__r.__words[2]) - 1;
        *((_BYTE *)&cfa.__r_.__value_.__s + 23) = (*((_BYTE *)&cfa.__r_.__value_.__s + 23) - 1) & 0x7F;
        v281 = &cfa;
        goto LABEL_624;
      }
      v281 = (std::string *)cfa.__r_.__value_.__r.__words[0];
      if (*(_BYTE *)(cfa.__r_.__value_.__r.__words[0] + cfa.__r_.__value_.__l.__size_ - 1) == 48)
      {
        v280 = --cfa.__r_.__value_.__l.__size_;
LABEL_624:
        v281->__r_.__value_.__s.__data_[v280] = 0;
        continue;
      }
      break;
    }
    *(_OWORD *)&v1278.__first_ = *(_OWORD *)&cfa.__r_.__value_.__l.__data_;
    v1278.__end_ = (std::__split_buffer<std::string>::pointer)cfa.__r_.__value_.__r.__words[2];
    memset(&cfa, 0, sizeof(cfa));
    while (2)
    {
      if ((SHIBYTE(v1278.__end_) & 0x80000000) == 0)
      {
        if (*(&v1277 + HIBYTE(v1278.__end_)) != 46)
          break;
        v282 = (std::__split_buffer<std::string>::pointer)(HIBYTE(v1278.__end_) - 1);
        HIBYTE(v1278.__end_) = (HIBYTE(v1278.__end_) - 1) & 0x7F;
        v283 = &v1278;
        goto LABEL_631;
      }
      v283 = v1278.__first_;
      if (v1278.__first_->__r_.__value_.__s.__data_[(unint64_t)v1278.__begin_ - 1] == 46)
      {
        v282 = --v1278.__begin_;
LABEL_631:
        v282->__r_.__value_.__s.__data_[(_QWORD)v283] = 0;
        continue;
      }
      break;
    }
    v1268 = *(_OWORD *)&v1278.__first_;
    end = v1278.__end_;
    if (SHIBYTE(cfa.__r_.__value_.__r.__words[2]) < 0)
      operator delete(cfa.__r_.__value_.__l.__data_);
    if (SHIBYTE(end) >= 0)
      v284 = (const std::string::value_type *)&v1268;
    else
      v284 = (const std::string::value_type *)v1268;
    if (SHIBYTE(end) >= 0)
      v285 = HIBYTE(end);
    else
      v285 = *((_QWORD *)&v1268 + 1);
    v286 = std::string::append((std::string *)v1271, v284, v285);
    v287 = *(_OWORD *)&v286->__r_.__value_.__l.__data_;
    v1247.__r_.__value_.__r.__words[2] = v286->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v1247.__r_.__value_.__l.__data_ = v287;
    v286->__r_.__value_.__l.__size_ = 0;
    v286->__r_.__value_.__r.__words[2] = 0;
    v286->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(end) < 0)
      operator delete((void *)v1268);
    if ((v1271[23] & 0x80000000) != 0)
      operator delete(*(void **)v1271);
    if (SHIBYTE(v1270.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v1270.__r_.__value_.__l.__data_);
    v288 = std::string::append(&v1247, ",\n", 2uLL);
    v289 = *(_OWORD *)&v288->__r_.__value_.__l.__data_;
    v1248.__r_.__value_.__r.__words[2] = v288->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v1248.__r_.__value_.__l.__data_ = v289;
    v288->__r_.__value_.__l.__size_ = 0;
    v288->__r_.__value_.__r.__words[2] = 0;
    v288->__r_.__value_.__r.__words[0] = 0;
    std::string::basic_string[abi:ne180100]<0>(&v1270, "T_sett_vc");
    v290 = std::string::append(&v1270, ": ", 2uLL);
    v291 = *(_OWORD *)&v290->__r_.__value_.__l.__data_;
    *(_QWORD *)&v1271[16] = *((_QWORD *)&v290->__r_.__value_.__l + 2);
    *(_OWORD *)v1271 = v291;
    v290->__r_.__value_.__l.__size_ = 0;
    v290->__r_.__value_.__r.__words[2] = 0;
    v290->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&cfa, v248);
    while (2)
    {
      if ((SHIBYTE(cfa.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
        if (*((_BYTE *)&v1234 + HIBYTE(cfa.__r_.__value_.__r.__words[2]) + 7) != 48)
          break;
        v292 = HIBYTE(cfa.__r_.__value_.__r.__words[2]) - 1;
        *((_BYTE *)&cfa.__r_.__value_.__s + 23) = (*((_BYTE *)&cfa.__r_.__value_.__s + 23) - 1) & 0x7F;
        v293 = &cfa;
        goto LABEL_652;
      }
      v293 = (std::string *)cfa.__r_.__value_.__r.__words[0];
      if (*(_BYTE *)(cfa.__r_.__value_.__r.__words[0] + cfa.__r_.__value_.__l.__size_ - 1) == 48)
      {
        v292 = --cfa.__r_.__value_.__l.__size_;
LABEL_652:
        v293->__r_.__value_.__s.__data_[v292] = 0;
        continue;
      }
      break;
    }
    *(_OWORD *)&v1278.__first_ = *(_OWORD *)&cfa.__r_.__value_.__l.__data_;
    v1278.__end_ = (std::__split_buffer<std::string>::pointer)cfa.__r_.__value_.__r.__words[2];
    memset(&cfa, 0, sizeof(cfa));
    while (2)
    {
      if ((SHIBYTE(v1278.__end_) & 0x80000000) == 0)
      {
        if (*(&v1277 + HIBYTE(v1278.__end_)) != 46)
          break;
        v294 = (std::__split_buffer<std::string>::pointer)(HIBYTE(v1278.__end_) - 1);
        HIBYTE(v1278.__end_) = (HIBYTE(v1278.__end_) - 1) & 0x7F;
        v295 = &v1278;
        goto LABEL_659;
      }
      v295 = v1278.__first_;
      if (v1278.__first_->__r_.__value_.__s.__data_[(unint64_t)v1278.__begin_ - 1] == 46)
      {
        v294 = --v1278.__begin_;
LABEL_659:
        v294->__r_.__value_.__s.__data_[(_QWORD)v295] = 0;
        continue;
      }
      break;
    }
    v1268 = *(_OWORD *)&v1278.__first_;
    end = v1278.__end_;
    if (SHIBYTE(cfa.__r_.__value_.__r.__words[2]) < 0)
      operator delete(cfa.__r_.__value_.__l.__data_);
    if (SHIBYTE(end) >= 0)
      v296 = (const std::string::value_type *)&v1268;
    else
      v296 = (const std::string::value_type *)v1268;
    if (SHIBYTE(end) >= 0)
      v297 = HIBYTE(end);
    else
      v297 = *((_QWORD *)&v1268 + 1);
    v298 = std::string::append((std::string *)v1271, v296, v297);
    v299 = *(_OWORD *)&v298->__r_.__value_.__l.__data_;
    v1250.__r_.__value_.__r.__words[2] = v298->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v1250.__r_.__value_.__l.__data_ = v299;
    v298->__r_.__value_.__l.__size_ = 0;
    v298->__r_.__value_.__r.__words[2] = 0;
    v298->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(end) < 0)
      operator delete((void *)v1268);
    if ((v1271[23] & 0x80000000) != 0)
      operator delete(*(void **)v1271);
    if (SHIBYTE(v1270.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v1270.__r_.__value_.__l.__data_);
    v300 = std::string::append(&v1250, ",\n", 2uLL);
    v301 = *(_OWORD *)&v300->__r_.__value_.__l.__data_;
    v1251.__r_.__value_.__r.__words[2] = v300->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v1251.__r_.__value_.__l.__data_ = v301;
    v300->__r_.__value_.__l.__size_ = 0;
    v300->__r_.__value_.__r.__words[2] = 0;
    v300->__r_.__value_.__r.__words[0] = 0;
    std::string::basic_string[abi:ne180100]<0>(&v1270, "tau_Tvc");
    v302 = std::string::append(&v1270, ": ", 2uLL);
    v303 = *(_OWORD *)&v302->__r_.__value_.__l.__data_;
    *(_QWORD *)&v1271[16] = *((_QWORD *)&v302->__r_.__value_.__l + 2);
    *(_OWORD *)v1271 = v303;
    v302->__r_.__value_.__l.__size_ = 0;
    v302->__r_.__value_.__r.__words[2] = 0;
    v302->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&cfa, v251);
    while (2)
    {
      if ((SHIBYTE(cfa.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
        if (*((_BYTE *)&v1234 + HIBYTE(cfa.__r_.__value_.__r.__words[2]) + 7) != 48)
          break;
        v304 = HIBYTE(cfa.__r_.__value_.__r.__words[2]) - 1;
        *((_BYTE *)&cfa.__r_.__value_.__s + 23) = (*((_BYTE *)&cfa.__r_.__value_.__s + 23) - 1) & 0x7F;
        v305 = &cfa;
        goto LABEL_680;
      }
      v305 = (std::string *)cfa.__r_.__value_.__r.__words[0];
      if (*(_BYTE *)(cfa.__r_.__value_.__r.__words[0] + cfa.__r_.__value_.__l.__size_ - 1) == 48)
      {
        v304 = --cfa.__r_.__value_.__l.__size_;
LABEL_680:
        v305->__r_.__value_.__s.__data_[v304] = 0;
        continue;
      }
      break;
    }
    *(_OWORD *)&v1278.__first_ = *(_OWORD *)&cfa.__r_.__value_.__l.__data_;
    v1278.__end_ = (std::__split_buffer<std::string>::pointer)cfa.__r_.__value_.__r.__words[2];
    memset(&cfa, 0, sizeof(cfa));
    while (2)
    {
      if ((SHIBYTE(v1278.__end_) & 0x80000000) == 0)
      {
        if (*(&v1277 + HIBYTE(v1278.__end_)) != 46)
          break;
        v306 = (std::__split_buffer<std::string>::pointer)(HIBYTE(v1278.__end_) - 1);
        HIBYTE(v1278.__end_) = (HIBYTE(v1278.__end_) - 1) & 0x7F;
        v307 = &v1278;
        goto LABEL_687;
      }
      v307 = v1278.__first_;
      if (v1278.__first_->__r_.__value_.__s.__data_[(unint64_t)v1278.__begin_ - 1] == 46)
      {
        v306 = --v1278.__begin_;
LABEL_687:
        v306->__r_.__value_.__s.__data_[(_QWORD)v307] = 0;
        continue;
      }
      break;
    }
    v1268 = *(_OWORD *)&v1278.__first_;
    end = v1278.__end_;
    if (SHIBYTE(cfa.__r_.__value_.__r.__words[2]) < 0)
      operator delete(cfa.__r_.__value_.__l.__data_);
    if (SHIBYTE(end) >= 0)
      v308 = (const std::string::value_type *)&v1268;
    else
      v308 = (const std::string::value_type *)v1268;
    if (SHIBYTE(end) >= 0)
      v309 = HIBYTE(end);
    else
      v309 = *((_QWORD *)&v1268 + 1);
    v310 = std::string::append((std::string *)v1271, v308, v309);
    v311 = *(_OWORD *)&v310->__r_.__value_.__l.__data_;
    v1253.__r_.__value_.__r.__words[2] = v310->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v1253.__r_.__value_.__l.__data_ = v311;
    v310->__r_.__value_.__l.__size_ = 0;
    v310->__r_.__value_.__r.__words[2] = 0;
    v310->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(end) < 0)
      operator delete((void *)v1268);
    if ((v1271[23] & 0x80000000) != 0)
      operator delete(*(void **)v1271);
    if (SHIBYTE(v1270.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v1270.__r_.__value_.__l.__data_);
    v312 = std::string::append(&v1253, ",\n", 2uLL);
    v313 = *(_OWORD *)&v312->__r_.__value_.__l.__data_;
    v1254.__r_.__value_.__r.__words[2] = v312->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v1254.__r_.__value_.__l.__data_ = v313;
    v312->__r_.__value_.__l.__size_ = 0;
    v312->__r_.__value_.__r.__words[2] = 0;
    v312->__r_.__value_.__r.__words[0] = 0;
    std::string::basic_string[abi:ne180100]<0>(&v1270, "T_sett_mg");
    v314 = std::string::append(&v1270, ": ", 2uLL);
    v315 = *(_OWORD *)&v314->__r_.__value_.__l.__data_;
    *(_QWORD *)&v1271[16] = *((_QWORD *)&v314->__r_.__value_.__l + 2);
    *(_OWORD *)v1271 = v315;
    v314->__r_.__value_.__l.__size_ = 0;
    v314->__r_.__value_.__r.__words[2] = 0;
    v314->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&cfa, v250);
    while (2)
    {
      if ((SHIBYTE(cfa.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
        if (*((_BYTE *)&v1234 + HIBYTE(cfa.__r_.__value_.__r.__words[2]) + 7) != 48)
          break;
        v316 = HIBYTE(cfa.__r_.__value_.__r.__words[2]) - 1;
        *((_BYTE *)&cfa.__r_.__value_.__s + 23) = (*((_BYTE *)&cfa.__r_.__value_.__s + 23) - 1) & 0x7F;
        v317 = &cfa;
        goto LABEL_708;
      }
      v317 = (std::string *)cfa.__r_.__value_.__r.__words[0];
      if (*(_BYTE *)(cfa.__r_.__value_.__r.__words[0] + cfa.__r_.__value_.__l.__size_ - 1) == 48)
      {
        v316 = --cfa.__r_.__value_.__l.__size_;
LABEL_708:
        v317->__r_.__value_.__s.__data_[v316] = 0;
        continue;
      }
      break;
    }
    *(_OWORD *)&v1278.__first_ = *(_OWORD *)&cfa.__r_.__value_.__l.__data_;
    v1278.__end_ = (std::__split_buffer<std::string>::pointer)cfa.__r_.__value_.__r.__words[2];
    memset(&cfa, 0, sizeof(cfa));
    while (2)
    {
      if ((SHIBYTE(v1278.__end_) & 0x80000000) == 0)
      {
        if (*(&v1277 + HIBYTE(v1278.__end_)) != 46)
          break;
        v318 = (std::__split_buffer<std::string>::pointer)(HIBYTE(v1278.__end_) - 1);
        HIBYTE(v1278.__end_) = (HIBYTE(v1278.__end_) - 1) & 0x7F;
        v319 = &v1278;
        goto LABEL_715;
      }
      v319 = v1278.__first_;
      if (v1278.__first_->__r_.__value_.__s.__data_[(unint64_t)v1278.__begin_ - 1] == 46)
      {
        v318 = --v1278.__begin_;
LABEL_715:
        v318->__r_.__value_.__s.__data_[(_QWORD)v319] = 0;
        continue;
      }
      break;
    }
    v1268 = *(_OWORD *)&v1278.__first_;
    end = v1278.__end_;
    if (SHIBYTE(cfa.__r_.__value_.__r.__words[2]) < 0)
      operator delete(cfa.__r_.__value_.__l.__data_);
    if (SHIBYTE(end) >= 0)
      v320 = (const std::string::value_type *)&v1268;
    else
      v320 = (const std::string::value_type *)v1268;
    if (SHIBYTE(end) >= 0)
      v321 = HIBYTE(end);
    else
      v321 = *((_QWORD *)&v1268 + 1);
    v322 = std::string::append((std::string *)v1271, v320, v321);
    v323 = *(_OWORD *)&v322->__r_.__value_.__l.__data_;
    v1256.__r_.__value_.__r.__words[2] = v322->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v1256.__r_.__value_.__l.__data_ = v323;
    v322->__r_.__value_.__l.__size_ = 0;
    v322->__r_.__value_.__r.__words[2] = 0;
    v322->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(end) < 0)
      operator delete((void *)v1268);
    if ((v1271[23] & 0x80000000) != 0)
      operator delete(*(void **)v1271);
    if (SHIBYTE(v1270.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v1270.__r_.__value_.__l.__data_);
    v324 = std::string::append(&v1256, ",\n", 2uLL);
    v325 = *(_OWORD *)&v324->__r_.__value_.__l.__data_;
    v1257.__r_.__value_.__r.__words[2] = v324->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v1257.__r_.__value_.__l.__data_ = v325;
    v324->__r_.__value_.__l.__size_ = 0;
    v324->__r_.__value_.__r.__words[2] = 0;
    v324->__r_.__value_.__r.__words[0] = 0;
    std::string::basic_string[abi:ne180100]<0>(&v1270, "tau_Tmg");
    v326 = std::string::append(&v1270, ": ", 2uLL);
    v327 = *(_OWORD *)&v326->__r_.__value_.__l.__data_;
    *(_QWORD *)&v1271[16] = *((_QWORD *)&v326->__r_.__value_.__l + 2);
    *(_OWORD *)v1271 = v327;
    v326->__r_.__value_.__l.__size_ = 0;
    v326->__r_.__value_.__r.__words[2] = 0;
    v326->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&cfa, v253);
    while (2)
    {
      if ((SHIBYTE(cfa.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
        if (*((_BYTE *)&v1234 + HIBYTE(cfa.__r_.__value_.__r.__words[2]) + 7) != 48)
          break;
        v328 = HIBYTE(cfa.__r_.__value_.__r.__words[2]) - 1;
        *((_BYTE *)&cfa.__r_.__value_.__s + 23) = (*((_BYTE *)&cfa.__r_.__value_.__s + 23) - 1) & 0x7F;
        v329 = &cfa;
        goto LABEL_736;
      }
      v329 = (std::string *)cfa.__r_.__value_.__r.__words[0];
      if (*(_BYTE *)(cfa.__r_.__value_.__r.__words[0] + cfa.__r_.__value_.__l.__size_ - 1) == 48)
      {
        v328 = --cfa.__r_.__value_.__l.__size_;
LABEL_736:
        v329->__r_.__value_.__s.__data_[v328] = 0;
        continue;
      }
      break;
    }
    *(_OWORD *)&v1278.__first_ = *(_OWORD *)&cfa.__r_.__value_.__l.__data_;
    v1278.__end_ = (std::__split_buffer<std::string>::pointer)cfa.__r_.__value_.__r.__words[2];
    memset(&cfa, 0, sizeof(cfa));
    while (2)
    {
      if ((SHIBYTE(v1278.__end_) & 0x80000000) == 0)
      {
        if (*(&v1277 + HIBYTE(v1278.__end_)) != 46)
          break;
        v330 = (std::__split_buffer<std::string>::pointer)(HIBYTE(v1278.__end_) - 1);
        HIBYTE(v1278.__end_) = (HIBYTE(v1278.__end_) - 1) & 0x7F;
        v331 = &v1278;
        goto LABEL_743;
      }
      v331 = v1278.__first_;
      if (v1278.__first_->__r_.__value_.__s.__data_[(unint64_t)v1278.__begin_ - 1] == 46)
      {
        v330 = --v1278.__begin_;
LABEL_743:
        v330->__r_.__value_.__s.__data_[(_QWORD)v331] = 0;
        continue;
      }
      break;
    }
    v1268 = *(_OWORD *)&v1278.__first_;
    end = v1278.__end_;
    if (SHIBYTE(cfa.__r_.__value_.__r.__words[2]) < 0)
      operator delete(cfa.__r_.__value_.__l.__data_);
    if (SHIBYTE(end) >= 0)
      v332 = (const std::string::value_type *)&v1268;
    else
      v332 = (const std::string::value_type *)v1268;
    if (SHIBYTE(end) >= 0)
      v333 = HIBYTE(end);
    else
      v333 = *((_QWORD *)&v1268 + 1);
    v334 = std::string::append((std::string *)v1271, v332, v333);
    v335 = *(_OWORD *)&v334->__r_.__value_.__l.__data_;
    v1259.__r_.__value_.__r.__words[2] = v334->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v1259.__r_.__value_.__l.__data_ = v335;
    v334->__r_.__value_.__l.__size_ = 0;
    v334->__r_.__value_.__r.__words[2] = 0;
    v334->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(end) < 0)
      operator delete((void *)v1268);
    if ((v1271[23] & 0x80000000) != 0)
      operator delete(*(void **)v1271);
    if (SHIBYTE(v1270.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v1270.__r_.__value_.__l.__data_);
    v336 = std::string::append(&v1259, ",\n", 2uLL);
    v337 = *(_OWORD *)&v336->__r_.__value_.__l.__data_;
    v1261.__r_.__value_.__r.__words[2] = v336->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v1261.__r_.__value_.__l.__data_ = v337;
    v336->__r_.__value_.__l.__size_ = 0;
    v336->__r_.__value_.__r.__words[2] = 0;
    v336->__r_.__value_.__r.__words[0] = 0;
    std::string::basic_string[abi:ne180100]<0>(&v1270, "ThermalFFSpeedupFactor");
    v338 = std::string::append(&v1270, ": ", 2uLL);
    v339 = *(_OWORD *)&v338->__r_.__value_.__l.__data_;
    *(_QWORD *)&v1271[16] = *((_QWORD *)&v338->__r_.__value_.__l + 2);
    *(_OWORD *)v1271 = v339;
    v338->__r_.__value_.__l.__size_ = 0;
    v338->__r_.__value_.__r.__words[2] = 0;
    v338->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&cfa, v252);
    while (2)
    {
      if ((SHIBYTE(cfa.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
        if (*((_BYTE *)&v1234 + HIBYTE(cfa.__r_.__value_.__r.__words[2]) + 7) != 48)
          break;
        v340 = HIBYTE(cfa.__r_.__value_.__r.__words[2]) - 1;
        *((_BYTE *)&cfa.__r_.__value_.__s + 23) = (*((_BYTE *)&cfa.__r_.__value_.__s + 23) - 1) & 0x7F;
        v341 = &cfa;
        goto LABEL_764;
      }
      v341 = (std::string *)cfa.__r_.__value_.__r.__words[0];
      if (*(_BYTE *)(cfa.__r_.__value_.__r.__words[0] + cfa.__r_.__value_.__l.__size_ - 1) == 48)
      {
        v340 = --cfa.__r_.__value_.__l.__size_;
LABEL_764:
        v341->__r_.__value_.__s.__data_[v340] = 0;
        continue;
      }
      break;
    }
    *(_OWORD *)&v1278.__first_ = *(_OWORD *)&cfa.__r_.__value_.__l.__data_;
    v1278.__end_ = (std::__split_buffer<std::string>::pointer)cfa.__r_.__value_.__r.__words[2];
    memset(&cfa, 0, sizeof(cfa));
    while (2)
    {
      if ((SHIBYTE(v1278.__end_) & 0x80000000) == 0)
      {
        if (*(&v1277 + HIBYTE(v1278.__end_)) != 46)
          break;
        v342 = (std::__split_buffer<std::string>::pointer)(HIBYTE(v1278.__end_) - 1);
        HIBYTE(v1278.__end_) = (HIBYTE(v1278.__end_) - 1) & 0x7F;
        v343 = &v1278;
        goto LABEL_771;
      }
      v343 = v1278.__first_;
      if (v1278.__first_->__r_.__value_.__s.__data_[(unint64_t)v1278.__begin_ - 1] == 46)
      {
        v342 = --v1278.__begin_;
LABEL_771:
        v342->__r_.__value_.__s.__data_[(_QWORD)v343] = 0;
        continue;
      }
      break;
    }
    v1268 = *(_OWORD *)&v1278.__first_;
    end = v1278.__end_;
    if (SHIBYTE(cfa.__r_.__value_.__r.__words[2]) < 0)
      operator delete(cfa.__r_.__value_.__l.__data_);
    if (SHIBYTE(end) >= 0)
      v344 = (const std::string::value_type *)&v1268;
    else
      v344 = (const std::string::value_type *)v1268;
    if (SHIBYTE(end) >= 0)
      v345 = HIBYTE(end);
    else
      v345 = *((_QWORD *)&v1268 + 1);
    v346 = std::string::append((std::string *)v1271, v344, v345);
    v347 = *(_OWORD *)&v346->__r_.__value_.__l.__data_;
    v1263.__r_.__value_.__r.__words[2] = v346->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v1263.__r_.__value_.__l.__data_ = v347;
    v346->__r_.__value_.__l.__size_ = 0;
    v346->__r_.__value_.__r.__words[2] = 0;
    v346->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(end) < 0)
      operator delete((void *)v1268);
    if ((v1271[23] & 0x80000000) != 0)
      operator delete(*(void **)v1271);
    if (SHIBYTE(v1270.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v1270.__r_.__value_.__l.__data_);
    v348 = std::string::append(&v1263, ",\n", 2uLL);
    v349 = *(_OWORD *)&v348->__r_.__value_.__l.__data_;
    v1264.__r_.__value_.__r.__words[2] = v348->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v1264.__r_.__value_.__l.__data_ = v349;
    v348->__r_.__value_.__l.__size_ = 0;
    v348->__r_.__value_.__r.__words[2] = 0;
    v348->__r_.__value_.__r.__words[0] = 0;
    std::string::basic_string[abi:ne180100]<0>(&v1270, "HardTempLimitHeadroom");
    v350 = std::string::append(&v1270, ": ", 2uLL);
    v351 = *(_OWORD *)&v350->__r_.__value_.__l.__data_;
    *(_QWORD *)&v1271[16] = *((_QWORD *)&v350->__r_.__value_.__l + 2);
    *(_OWORD *)v1271 = v351;
    v350->__r_.__value_.__l.__size_ = 0;
    v350->__r_.__value_.__r.__words[2] = 0;
    v350->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&cfa, v1218);
    while (2)
    {
      if ((SHIBYTE(cfa.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
        if (*((_BYTE *)&v1234 + HIBYTE(cfa.__r_.__value_.__r.__words[2]) + 7) != 48)
          break;
        v352 = HIBYTE(cfa.__r_.__value_.__r.__words[2]) - 1;
        *((_BYTE *)&cfa.__r_.__value_.__s + 23) = (*((_BYTE *)&cfa.__r_.__value_.__s + 23) - 1) & 0x7F;
        v353 = &cfa;
        goto LABEL_792;
      }
      v353 = (std::string *)cfa.__r_.__value_.__r.__words[0];
      if (*(_BYTE *)(cfa.__r_.__value_.__r.__words[0] + cfa.__r_.__value_.__l.__size_ - 1) == 48)
      {
        v352 = --cfa.__r_.__value_.__l.__size_;
LABEL_792:
        v353->__r_.__value_.__s.__data_[v352] = 0;
        continue;
      }
      break;
    }
    *(_OWORD *)&v1278.__first_ = *(_OWORD *)&cfa.__r_.__value_.__l.__data_;
    v1278.__end_ = (std::__split_buffer<std::string>::pointer)cfa.__r_.__value_.__r.__words[2];
    memset(&cfa, 0, sizeof(cfa));
    while (2)
    {
      if ((SHIBYTE(v1278.__end_) & 0x80000000) == 0)
      {
        if (*(&v1277 + HIBYTE(v1278.__end_)) != 46)
          break;
        v354 = (std::__split_buffer<std::string>::pointer)(HIBYTE(v1278.__end_) - 1);
        HIBYTE(v1278.__end_) = (HIBYTE(v1278.__end_) - 1) & 0x7F;
        v355 = &v1278;
        goto LABEL_799;
      }
      v355 = v1278.__first_;
      if (v1278.__first_->__r_.__value_.__s.__data_[(unint64_t)v1278.__begin_ - 1] == 46)
      {
        v354 = --v1278.__begin_;
LABEL_799:
        v354->__r_.__value_.__s.__data_[(_QWORD)v355] = 0;
        continue;
      }
      break;
    }
    v1268 = *(_OWORD *)&v1278.__first_;
    end = v1278.__end_;
    if (SHIBYTE(cfa.__r_.__value_.__r.__words[2]) < 0)
      operator delete(cfa.__r_.__value_.__l.__data_);
    if (SHIBYTE(end) >= 0)
      v356 = (const std::string::value_type *)&v1268;
    else
      v356 = (const std::string::value_type *)v1268;
    if (SHIBYTE(end) >= 0)
      v357 = HIBYTE(end);
    else
      v357 = *((_QWORD *)&v1268 + 1);
    v358 = std::string::append((std::string *)v1271, v356, v357);
    v359 = *(_OWORD *)&v358->__r_.__value_.__l.__data_;
    v1266.__r_.__value_.__r.__words[2] = v358->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v1266.__r_.__value_.__l.__data_ = v359;
    v358->__r_.__value_.__l.__size_ = 0;
    v358->__r_.__value_.__r.__words[2] = 0;
    v358->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(end) < 0)
      operator delete((void *)v1268);
    if ((v1271[23] & 0x80000000) != 0)
      operator delete(*(void **)v1271);
    if (SHIBYTE(v1270.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v1270.__r_.__value_.__l.__data_);
    v360 = std::string::append(&v1266, ",\n", 2uLL);
    v361 = *(_OWORD *)&v360->__r_.__value_.__l.__data_;
    v1267.__r_.__value_.__r.__words[2] = v360->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v1267.__r_.__value_.__l.__data_ = v361;
    v360->__r_.__value_.__l.__size_ = 0;
    v360->__r_.__value_.__r.__words[2] = 0;
    v360->__r_.__value_.__r.__words[0] = 0;
    std::string::basic_string[abi:ne180100]<0>(&v1270, "TemperatureLimit");
    v362 = std::string::append(&v1270, ": ", 2uLL);
    v363 = *(_OWORD *)&v362->__r_.__value_.__l.__data_;
    *(_QWORD *)&v1271[16] = *((_QWORD *)&v362->__r_.__value_.__l + 2);
    *(_OWORD *)v1271 = v363;
    v362->__r_.__value_.__l.__size_ = 0;
    v362->__r_.__value_.__r.__words[2] = 0;
    v362->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&cfa, v1213);
    while (2)
    {
      if ((SHIBYTE(cfa.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
        if (*((_BYTE *)&v1234 + HIBYTE(cfa.__r_.__value_.__r.__words[2]) + 7) != 48)
          break;
        v364 = HIBYTE(cfa.__r_.__value_.__r.__words[2]) - 1;
        *((_BYTE *)&cfa.__r_.__value_.__s + 23) = (*((_BYTE *)&cfa.__r_.__value_.__s + 23) - 1) & 0x7F;
        v365 = &cfa;
        goto LABEL_820;
      }
      v365 = (std::string *)cfa.__r_.__value_.__r.__words[0];
      if (*(_BYTE *)(cfa.__r_.__value_.__r.__words[0] + cfa.__r_.__value_.__l.__size_ - 1) == 48)
      {
        v364 = --cfa.__r_.__value_.__l.__size_;
LABEL_820:
        v365->__r_.__value_.__s.__data_[v364] = 0;
        continue;
      }
      break;
    }
    *(_OWORD *)&v1278.__first_ = *(_OWORD *)&cfa.__r_.__value_.__l.__data_;
    v1278.__end_ = (std::__split_buffer<std::string>::pointer)cfa.__r_.__value_.__r.__words[2];
    memset(&cfa, 0, sizeof(cfa));
    while (2)
    {
      if ((SHIBYTE(v1278.__end_) & 0x80000000) == 0)
      {
        if (*(&v1277 + HIBYTE(v1278.__end_)) != 46)
          break;
        v366 = (std::__split_buffer<std::string>::pointer)(HIBYTE(v1278.__end_) - 1);
        HIBYTE(v1278.__end_) = (HIBYTE(v1278.__end_) - 1) & 0x7F;
        v367 = &v1278;
        goto LABEL_827;
      }
      v367 = v1278.__first_;
      if (v1278.__first_->__r_.__value_.__s.__data_[(unint64_t)v1278.__begin_ - 1] == 46)
      {
        v366 = --v1278.__begin_;
LABEL_827:
        v366->__r_.__value_.__s.__data_[(_QWORD)v367] = 0;
        continue;
      }
      break;
    }
    v1268 = *(_OWORD *)&v1278.__first_;
    end = v1278.__end_;
    if (SHIBYTE(cfa.__r_.__value_.__r.__words[2]) < 0)
      operator delete(cfa.__r_.__value_.__l.__data_);
    if (SHIBYTE(end) >= 0)
      v368 = (const std::string::value_type *)&v1268;
    else
      v368 = (const std::string::value_type *)v1268;
    if (SHIBYTE(end) >= 0)
      v369 = HIBYTE(end);
    else
      v369 = *((_QWORD *)&v1268 + 1);
    v370 = std::string::append((std::string *)v1271, v368, v369);
    v371 = *(_OWORD *)&v370->__r_.__value_.__l.__data_;
    v1265.__r_.__value_.__r.__words[2] = v370->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v1265.__r_.__value_.__l.__data_ = v371;
    v370->__r_.__value_.__l.__size_ = 0;
    v370->__r_.__value_.__r.__words[2] = 0;
    v370->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(end) < 0)
      operator delete((void *)v1268);
    if ((v1271[23] & 0x80000000) != 0)
      operator delete(*(void **)v1271);
    if (SHIBYTE(v1270.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v1270.__r_.__value_.__l.__data_);
    if ((v1265.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v372 = &v1265;
    else
      v372 = (std::string *)v1265.__r_.__value_.__r.__words[0];
    if ((v1265.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v373 = HIBYTE(v1265.__r_.__value_.__r.__words[2]);
    else
      v373 = v1265.__r_.__value_.__l.__size_;
    v374 = std::string::append(&v1267, (const std::string::value_type *)v372, v373);
    v375 = *(_OWORD *)&v374->__r_.__value_.__l.__data_;
    v1262.__r_.__value_.__r.__words[2] = v374->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v1262.__r_.__value_.__l.__data_ = v375;
    v374->__r_.__value_.__l.__size_ = 0;
    v374->__r_.__value_.__r.__words[2] = 0;
    v374->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v1265.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v1265.__r_.__value_.__l.__data_);
    if (SHIBYTE(v1267.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v1267.__r_.__value_.__l.__data_);
    if (SHIBYTE(v1266.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v1266.__r_.__value_.__l.__data_);
    if ((v1262.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v376 = &v1262;
    else
      v376 = (std::string *)v1262.__r_.__value_.__r.__words[0];
    if ((v1262.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v377 = HIBYTE(v1262.__r_.__value_.__r.__words[2]);
    else
      v377 = v1262.__r_.__value_.__l.__size_;
    v378 = std::string::append(&v1264, (const std::string::value_type *)v376, v377);
    v379 = *(_OWORD *)&v378->__r_.__value_.__l.__data_;
    v1258.__r_.__value_.__r.__words[2] = v378->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v1258.__r_.__value_.__l.__data_ = v379;
    v378->__r_.__value_.__l.__size_ = 0;
    v378->__r_.__value_.__r.__words[2] = 0;
    v378->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v1262.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v1262.__r_.__value_.__l.__data_);
    if (SHIBYTE(v1264.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v1264.__r_.__value_.__l.__data_);
    if (SHIBYTE(v1263.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v1263.__r_.__value_.__l.__data_);
    if ((v1258.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v380 = &v1258;
    else
      v380 = (std::string *)v1258.__r_.__value_.__r.__words[0];
    if ((v1258.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v381 = HIBYTE(v1258.__r_.__value_.__r.__words[2]);
    else
      v381 = v1258.__r_.__value_.__l.__size_;
    v382 = std::string::append(&v1261, (const std::string::value_type *)v380, v381);
    v383 = *(_OWORD *)&v382->__r_.__value_.__l.__data_;
    v1255.__r_.__value_.__r.__words[2] = v382->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v1255.__r_.__value_.__l.__data_ = v383;
    v382->__r_.__value_.__l.__size_ = 0;
    v382->__r_.__value_.__r.__words[2] = 0;
    v382->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v1258.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v1258.__r_.__value_.__l.__data_);
    if (SHIBYTE(v1261.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v1261.__r_.__value_.__l.__data_);
    if (SHIBYTE(v1259.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v1259.__r_.__value_.__l.__data_);
    if ((v1255.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v384 = &v1255;
    else
      v384 = (std::string *)v1255.__r_.__value_.__r.__words[0];
    if ((v1255.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v385 = HIBYTE(v1255.__r_.__value_.__r.__words[2]);
    else
      v385 = v1255.__r_.__value_.__l.__size_;
    v386 = std::string::append(&v1257, (const std::string::value_type *)v384, v385);
    v387 = *(_OWORD *)&v386->__r_.__value_.__l.__data_;
    v1252.__r_.__value_.__r.__words[2] = v386->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v1252.__r_.__value_.__l.__data_ = v387;
    v386->__r_.__value_.__l.__size_ = 0;
    v386->__r_.__value_.__r.__words[2] = 0;
    v386->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v1255.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v1255.__r_.__value_.__l.__data_);
    if (SHIBYTE(v1257.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v1257.__r_.__value_.__l.__data_);
    if (SHIBYTE(v1256.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v1256.__r_.__value_.__l.__data_);
    if ((v1252.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v388 = &v1252;
    else
      v388 = (std::string *)v1252.__r_.__value_.__r.__words[0];
    if ((v1252.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v389 = HIBYTE(v1252.__r_.__value_.__r.__words[2]);
    else
      v389 = v1252.__r_.__value_.__l.__size_;
    v390 = std::string::append(&v1254, (const std::string::value_type *)v388, v389);
    v391 = *(_OWORD *)&v390->__r_.__value_.__l.__data_;
    v1249.__r_.__value_.__r.__words[2] = v390->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v1249.__r_.__value_.__l.__data_ = v391;
    v390->__r_.__value_.__l.__size_ = 0;
    v390->__r_.__value_.__r.__words[2] = 0;
    v390->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v1252.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v1252.__r_.__value_.__l.__data_);
    if (SHIBYTE(v1254.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v1254.__r_.__value_.__l.__data_);
    if (SHIBYTE(v1253.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v1253.__r_.__value_.__l.__data_);
    if ((v1249.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v392 = &v1249;
    else
      v392 = (std::string *)v1249.__r_.__value_.__r.__words[0];
    if ((v1249.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v393 = HIBYTE(v1249.__r_.__value_.__r.__words[2]);
    else
      v393 = v1249.__r_.__value_.__l.__size_;
    v394 = std::string::append(&v1251, (const std::string::value_type *)v392, v393);
    v395 = *(_OWORD *)&v394->__r_.__value_.__l.__data_;
    v1246.__r_.__value_.__r.__words[2] = v394->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v1246.__r_.__value_.__l.__data_ = v395;
    v394->__r_.__value_.__l.__size_ = 0;
    v394->__r_.__value_.__r.__words[2] = 0;
    v394->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v1249.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v1249.__r_.__value_.__l.__data_);
    if (SHIBYTE(v1251.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v1251.__r_.__value_.__l.__data_);
    if (SHIBYTE(v1250.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v1250.__r_.__value_.__l.__data_);
    if ((v1246.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v396 = &v1246;
    else
      v396 = (std::string *)v1246.__r_.__value_.__r.__words[0];
    if ((v1246.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v397 = HIBYTE(v1246.__r_.__value_.__r.__words[2]);
    else
      v397 = v1246.__r_.__value_.__l.__size_;
    v398 = std::string::append(&v1248, (const std::string::value_type *)v396, v397);
    v399 = *(_OWORD *)&v398->__r_.__value_.__l.__data_;
    v1243 = v398->__r_.__value_.__r.__words[2];
    v1242 = v399;
    v398->__r_.__value_.__l.__size_ = 0;
    v398->__r_.__value_.__r.__words[2] = 0;
    v398->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v1246.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v1246.__r_.__value_.__l.__data_);
    if (SHIBYTE(v1248.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v1248.__r_.__value_.__l.__data_);
    if (SHIBYTE(v1247.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v1247.__r_.__value_.__l.__data_);
    if (v1243 >= 0)
      v400 = (const std::string::value_type *)&v1242;
    else
      v400 = (const std::string::value_type *)v1242;
    if (v1243 >= 0)
      v401 = HIBYTE(v1243);
    else
      v401 = *((_QWORD *)&v1242 + 1);
    v402 = std::string::append(&v1245, v400, v401);
    v403 = *(_OWORD *)&v402->__r_.__value_.__l.__data_;
    v1239 = v402->__r_.__value_.__r.__words[2];
    *(_OWORD *)v1238 = v403;
    v402->__r_.__value_.__l.__size_ = 0;
    v402->__r_.__value_.__r.__words[2] = 0;
    v402->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v1243) < 0)
      operator delete((void *)v1242);
    if (SHIBYTE(v1245.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v1245.__r_.__value_.__l.__data_);
    if (SHIBYTE(v1244.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v1244.__r_.__value_.__l.__data_);
    if (v1239 >= 0)
      v404 = v1238;
    else
      v404 = (void **)v1238[0];
    if (v1239 >= 0)
      v405 = HIBYTE(v1239);
    else
      v405 = (std::string::size_type)v1238[1];
    v406 = std::string::append(&v1241, (const std::string::value_type *)v404, v405);
    v1231 = *v406;
    v406->__r_.__value_.__l.__size_ = 0;
    v406->__r_.__value_.__r.__words[2] = 0;
    v406->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v1239) < 0)
      operator delete(v1238[0]);
    if (SHIBYTE(v1241.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v1241.__r_.__value_.__l.__data_);
    if (SHIBYTE(v1240.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v1240.__r_.__value_.__l.__data_);
    AUT::ReplaceAll((std::string *)&v1278, (uint64_t)&v1231, "\n", 1, "\n  ┣ ", 7uLL);
    v407 = std::string::insert((std::string *)&v1278, 0, "\n  ┏ ", 7uLL);
    v408 = *(_OWORD *)&v407->__r_.__value_.__l.__data_;
    v1233 = v407->__r_.__value_.__r.__words[2];
    *(_OWORD *)v1232 = v408;
    v407->__r_.__value_.__l.__size_ = 0;
    v407->__r_.__value_.__r.__words[2] = 0;
    v407->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v1278.__end_) < 0)
      operator delete(v1278.__first_);
    v409 = v1232;
    if (v1233 < 0)
      v409 = (void **)v1232[0];
    LODWORD(buf[0].__r_.__value_.__l.__data_) = 136315906;
    *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)"AUSpeakerProtectionV3.cpp";
    WORD2(buf[0].__r_.__value_.__r.__words[1]) = 1024;
    *(_DWORD *)((char *)&buf[0].__r_.__value_.__r.__words[1] + 6) = 3857;
    WORD1(buf[0].__r_.__value_.__r.__words[2]) = 1024;
    *((float *)&buf[0].__r_.__value_.__r.__words[2] + 1) = v245;
    LOWORD(buf[1].__r_.__value_.__l.__data_) = 2080;
    *(std::string::size_type *)((char *)buf[1].__r_.__value_.__r.__words + 2) = (std::string::size_type)v409;
    _os_log_impl(&dword_1B5ED0000, v244, OS_LOG_TYPE_DEBUG, "%25s:%-5d Applying OL thermal params to channel %i:%s", (uint8_t *)buf, 0x22u);
    if (SHIBYTE(v1233) < 0)
      operator delete(v1232[0]);
    if (SHIBYTE(v1231.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v1231.__r_.__value_.__l.__data_);
LABEL_958:
    v411 = v242[1];
    v410 = v242[2];
    v413 = v242[3];
    v412 = v242[4];
    v415 = v242[5];
    v414 = v242[6];
    v417 = v242[7];
    v416 = v242[8];
    v1219 = v242[9];
    v1214 = v242[10];
    v418 = *(unsigned int *)v242;
    v419 = *((_QWORD *)this + 104);
    if (v419)
    {
      v420 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)v419 + 32))(v419, v418);
    }
    else
    {
      v421 = *((_QWORD *)this + 101);
      if (v418 >= (*((_QWORD *)this + 102) - v421) >> 3)
        v420 = 0;
      else
        v420 = *(ausdk::AUElement **)(v421 + 8 * v418);
    }
    ausdk::AUElement::SetParameter(v420, 0xAu, v411, 0);
    ausdk::AUElement::SetParameter(v420, 9u, v410, 0);
    ausdk::AUElement::SetParameter(v420, 0xBu, v413, 0);
    ausdk::AUElement::SetParameter(v420, 2u, v412, 0);
    ausdk::AUElement::SetParameter(v420, 4u, v415, 0);
    ausdk::AUElement::SetParameter(v420, 3u, v414, 0);
    ausdk::AUElement::SetParameter(v420, 5u, v417, 0);
    ausdk::AUElement::SetParameter(v420, 6u, v416, 0);
    ausdk::AUElement::SetParameter(v420, 1u, v1219, 0);
    ausdk::AUElement::SetParameter(v420, 0, v1214, 0);
    v242 += 11;
    if (v242 != (float *)v10)
      continue;
    break;
  }
LABEL_964:
  if (v1223 == (char *)v46)
    goto LABEL_1293;
  v422 = (float *)v1223;
  while (2)
  {
    v423 = (NSObject **)spp3Subsystem();
    if (v423)
    {
      v424 = *v423;
      if (!*v423)
        goto LABEL_1287;
    }
    else
    {
      v424 = MEMORY[0x1E0C81028];
    }
    if (!os_log_type_enabled(v424, OS_LOG_TYPE_DEBUG))
      goto LABEL_1287;
    v425 = *v422;
    v427 = v422[1];
    v426 = v422[2];
    v429 = v422[3];
    v428 = v422[4];
    v431 = v422[5];
    v430 = v422[6];
    v433 = v422[7];
    v432 = v422[8];
    std::string::basic_string[abi:ne180100]<0>(&v1270, "Q_d");
    v434 = std::string::append(&v1270, ": ", 2uLL);
    v435 = *(_OWORD *)&v434->__r_.__value_.__l.__data_;
    *(_QWORD *)&v1271[16] = *((_QWORD *)&v434->__r_.__value_.__l + 2);
    *(_OWORD *)v1271 = v435;
    v434->__r_.__value_.__l.__size_ = 0;
    v434->__r_.__value_.__r.__words[2] = 0;
    v434->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&cfa, v427);
    while (2)
    {
      if ((SHIBYTE(cfa.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
        if (*((_BYTE *)&v1234 + HIBYTE(cfa.__r_.__value_.__r.__words[2]) + 7) != 48)
          break;
        v436 = HIBYTE(cfa.__r_.__value_.__r.__words[2]) - 1;
        *((_BYTE *)&cfa.__r_.__value_.__s + 23) = (*((_BYTE *)&cfa.__r_.__value_.__s + 23) - 1) & 0x7F;
        v437 = &cfa;
        goto LABEL_977;
      }
      v437 = (std::string *)cfa.__r_.__value_.__r.__words[0];
      if (*(_BYTE *)(cfa.__r_.__value_.__r.__words[0] + cfa.__r_.__value_.__l.__size_ - 1) == 48)
      {
        v436 = --cfa.__r_.__value_.__l.__size_;
LABEL_977:
        v437->__r_.__value_.__s.__data_[v436] = 0;
        continue;
      }
      break;
    }
    *(_OWORD *)&v1278.__first_ = *(_OWORD *)&cfa.__r_.__value_.__l.__data_;
    v1278.__end_ = (std::__split_buffer<std::string>::pointer)cfa.__r_.__value_.__r.__words[2];
    memset(&cfa, 0, sizeof(cfa));
    while (2)
    {
      if ((SHIBYTE(v1278.__end_) & 0x80000000) == 0)
      {
        if (*(&v1277 + HIBYTE(v1278.__end_)) != 46)
          break;
        v438 = (std::__split_buffer<std::string>::pointer)(HIBYTE(v1278.__end_) - 1);
        HIBYTE(v1278.__end_) = (HIBYTE(v1278.__end_) - 1) & 0x7F;
        v439 = &v1278;
        goto LABEL_984;
      }
      v439 = v1278.__first_;
      if (v1278.__first_->__r_.__value_.__s.__data_[(unint64_t)v1278.__begin_ - 1] == 46)
      {
        v438 = --v1278.__begin_;
LABEL_984:
        v438->__r_.__value_.__s.__data_[(_QWORD)v439] = 0;
        continue;
      }
      break;
    }
    v1268 = *(_OWORD *)&v1278.__first_;
    end = v1278.__end_;
    if (SHIBYTE(cfa.__r_.__value_.__r.__words[2]) < 0)
      operator delete(cfa.__r_.__value_.__l.__data_);
    if (SHIBYTE(end) >= 0)
      v440 = (const std::string::value_type *)&v1268;
    else
      v440 = (const std::string::value_type *)v1268;
    if (SHIBYTE(end) >= 0)
      v441 = HIBYTE(end);
    else
      v441 = *((_QWORD *)&v1268 + 1);
    v442 = std::string::append((std::string *)v1271, v440, v441);
    v443 = *(_OWORD *)&v442->__r_.__value_.__l.__data_;
    v1247.__r_.__value_.__r.__words[2] = v442->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v1247.__r_.__value_.__l.__data_ = v443;
    v442->__r_.__value_.__l.__size_ = 0;
    v442->__r_.__value_.__r.__words[2] = 0;
    v442->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(end) < 0)
      operator delete((void *)v1268);
    if ((v1271[23] & 0x80000000) != 0)
      operator delete(*(void **)v1271);
    if (SHIBYTE(v1270.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v1270.__r_.__value_.__l.__data_);
    v444 = std::string::append(&v1247, ",\n", 2uLL);
    v445 = *(_OWORD *)&v444->__r_.__value_.__l.__data_;
    v1248.__r_.__value_.__r.__words[2] = v444->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v1248.__r_.__value_.__l.__data_ = v445;
    v444->__r_.__value_.__l.__size_ = 0;
    v444->__r_.__value_.__r.__words[2] = 0;
    v444->__r_.__value_.__r.__words[0] = 0;
    std::string::basic_string[abi:ne180100]<0>(&v1270, "kt");
    v446 = std::string::append(&v1270, ": ", 2uLL);
    v447 = *(_OWORD *)&v446->__r_.__value_.__l.__data_;
    *(_QWORD *)&v1271[16] = *((_QWORD *)&v446->__r_.__value_.__l + 2);
    *(_OWORD *)v1271 = v447;
    v446->__r_.__value_.__l.__size_ = 0;
    v446->__r_.__value_.__r.__words[2] = 0;
    v446->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&cfa, v426);
    while (2)
    {
      if ((SHIBYTE(cfa.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
        if (*((_BYTE *)&v1234 + HIBYTE(cfa.__r_.__value_.__r.__words[2]) + 7) != 48)
          break;
        v448 = HIBYTE(cfa.__r_.__value_.__r.__words[2]) - 1;
        *((_BYTE *)&cfa.__r_.__value_.__s + 23) = (*((_BYTE *)&cfa.__r_.__value_.__s + 23) - 1) & 0x7F;
        v449 = &cfa;
        goto LABEL_1005;
      }
      v449 = (std::string *)cfa.__r_.__value_.__r.__words[0];
      if (*(_BYTE *)(cfa.__r_.__value_.__r.__words[0] + cfa.__r_.__value_.__l.__size_ - 1) == 48)
      {
        v448 = --cfa.__r_.__value_.__l.__size_;
LABEL_1005:
        v449->__r_.__value_.__s.__data_[v448] = 0;
        continue;
      }
      break;
    }
    *(_OWORD *)&v1278.__first_ = *(_OWORD *)&cfa.__r_.__value_.__l.__data_;
    v1278.__end_ = (std::__split_buffer<std::string>::pointer)cfa.__r_.__value_.__r.__words[2];
    memset(&cfa, 0, sizeof(cfa));
    while (2)
    {
      if ((SHIBYTE(v1278.__end_) & 0x80000000) == 0)
      {
        if (*(&v1277 + HIBYTE(v1278.__end_)) != 46)
          break;
        v450 = (std::__split_buffer<std::string>::pointer)(HIBYTE(v1278.__end_) - 1);
        HIBYTE(v1278.__end_) = (HIBYTE(v1278.__end_) - 1) & 0x7F;
        v451 = &v1278;
        goto LABEL_1012;
      }
      v451 = v1278.__first_;
      if (v1278.__first_->__r_.__value_.__s.__data_[(unint64_t)v1278.__begin_ - 1] == 46)
      {
        v450 = --v1278.__begin_;
LABEL_1012:
        v450->__r_.__value_.__s.__data_[(_QWORD)v451] = 0;
        continue;
      }
      break;
    }
    v1268 = *(_OWORD *)&v1278.__first_;
    end = v1278.__end_;
    if (SHIBYTE(cfa.__r_.__value_.__r.__words[2]) < 0)
      operator delete(cfa.__r_.__value_.__l.__data_);
    if (SHIBYTE(end) >= 0)
      v452 = (const std::string::value_type *)&v1268;
    else
      v452 = (const std::string::value_type *)v1268;
    if (SHIBYTE(end) >= 0)
      v453 = HIBYTE(end);
    else
      v453 = *((_QWORD *)&v1268 + 1);
    v454 = std::string::append((std::string *)v1271, v452, v453);
    v455 = *(_OWORD *)&v454->__r_.__value_.__l.__data_;
    v1250.__r_.__value_.__r.__words[2] = v454->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v1250.__r_.__value_.__l.__data_ = v455;
    v454->__r_.__value_.__l.__size_ = 0;
    v454->__r_.__value_.__r.__words[2] = 0;
    v454->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(end) < 0)
      operator delete((void *)v1268);
    if ((v1271[23] & 0x80000000) != 0)
      operator delete(*(void **)v1271);
    if (SHIBYTE(v1270.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v1270.__r_.__value_.__l.__data_);
    v456 = std::string::append(&v1250, ",\n", 2uLL);
    v457 = *(_OWORD *)&v456->__r_.__value_.__l.__data_;
    v1251.__r_.__value_.__r.__words[2] = v456->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v1251.__r_.__value_.__l.__data_ = v457;
    v456->__r_.__value_.__l.__size_ = 0;
    v456->__r_.__value_.__r.__words[2] = 0;
    v456->__r_.__value_.__r.__words[0] = 0;
    std::string::basic_string[abi:ne180100]<0>(&v1270, "ct");
    v458 = std::string::append(&v1270, ": ", 2uLL);
    v459 = *(_OWORD *)&v458->__r_.__value_.__l.__data_;
    *(_QWORD *)&v1271[16] = *((_QWORD *)&v458->__r_.__value_.__l + 2);
    *(_OWORD *)v1271 = v459;
    v458->__r_.__value_.__l.__size_ = 0;
    v458->__r_.__value_.__r.__words[2] = 0;
    v458->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&cfa, v429);
    while (2)
    {
      if ((SHIBYTE(cfa.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
        if (*((_BYTE *)&v1234 + HIBYTE(cfa.__r_.__value_.__r.__words[2]) + 7) != 48)
          break;
        v460 = HIBYTE(cfa.__r_.__value_.__r.__words[2]) - 1;
        *((_BYTE *)&cfa.__r_.__value_.__s + 23) = (*((_BYTE *)&cfa.__r_.__value_.__s + 23) - 1) & 0x7F;
        v461 = &cfa;
        goto LABEL_1033;
      }
      v461 = (std::string *)cfa.__r_.__value_.__r.__words[0];
      if (*(_BYTE *)(cfa.__r_.__value_.__r.__words[0] + cfa.__r_.__value_.__l.__size_ - 1) == 48)
      {
        v460 = --cfa.__r_.__value_.__l.__size_;
LABEL_1033:
        v461->__r_.__value_.__s.__data_[v460] = 0;
        continue;
      }
      break;
    }
    *(_OWORD *)&v1278.__first_ = *(_OWORD *)&cfa.__r_.__value_.__l.__data_;
    v1278.__end_ = (std::__split_buffer<std::string>::pointer)cfa.__r_.__value_.__r.__words[2];
    memset(&cfa, 0, sizeof(cfa));
    while (2)
    {
      if ((SHIBYTE(v1278.__end_) & 0x80000000) == 0)
      {
        if (*(&v1277 + HIBYTE(v1278.__end_)) != 46)
          break;
        v462 = (std::__split_buffer<std::string>::pointer)(HIBYTE(v1278.__end_) - 1);
        HIBYTE(v1278.__end_) = (HIBYTE(v1278.__end_) - 1) & 0x7F;
        v463 = &v1278;
        goto LABEL_1040;
      }
      v463 = v1278.__first_;
      if (v1278.__first_->__r_.__value_.__s.__data_[(unint64_t)v1278.__begin_ - 1] == 46)
      {
        v462 = --v1278.__begin_;
LABEL_1040:
        v462->__r_.__value_.__s.__data_[(_QWORD)v463] = 0;
        continue;
      }
      break;
    }
    v1268 = *(_OWORD *)&v1278.__first_;
    end = v1278.__end_;
    if (SHIBYTE(cfa.__r_.__value_.__r.__words[2]) < 0)
      operator delete(cfa.__r_.__value_.__l.__data_);
    if (SHIBYTE(end) >= 0)
      v464 = (const std::string::value_type *)&v1268;
    else
      v464 = (const std::string::value_type *)v1268;
    if (SHIBYTE(end) >= 0)
      v465 = HIBYTE(end);
    else
      v465 = *((_QWORD *)&v1268 + 1);
    v466 = std::string::append((std::string *)v1271, v464, v465);
    v467 = *(_OWORD *)&v466->__r_.__value_.__l.__data_;
    v1253.__r_.__value_.__r.__words[2] = v466->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v1253.__r_.__value_.__l.__data_ = v467;
    v466->__r_.__value_.__l.__size_ = 0;
    v466->__r_.__value_.__r.__words[2] = 0;
    v466->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(end) < 0)
      operator delete((void *)v1268);
    if ((v1271[23] & 0x80000000) != 0)
      operator delete(*(void **)v1271);
    if (SHIBYTE(v1270.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v1270.__r_.__value_.__l.__data_);
    v468 = std::string::append(&v1253, ",\n", 2uLL);
    v469 = *(_OWORD *)&v468->__r_.__value_.__l.__data_;
    v1254.__r_.__value_.__r.__words[2] = v468->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v1254.__r_.__value_.__l.__data_ = v469;
    v468->__r_.__value_.__l.__size_ = 0;
    v468->__r_.__value_.__r.__words[2] = 0;
    v468->__r_.__value_.__r.__words[0] = 0;
    std::string::basic_string[abi:ne180100]<0>(&v1270, "phi");
    v470 = std::string::append(&v1270, ": ", 2uLL);
    v471 = *(_OWORD *)&v470->__r_.__value_.__l.__data_;
    *(_QWORD *)&v1271[16] = *((_QWORD *)&v470->__r_.__value_.__l + 2);
    *(_OWORD *)v1271 = v471;
    v470->__r_.__value_.__l.__size_ = 0;
    v470->__r_.__value_.__r.__words[2] = 0;
    v470->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&cfa, v428);
    while (2)
    {
      if ((SHIBYTE(cfa.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
        if (*((_BYTE *)&v1234 + HIBYTE(cfa.__r_.__value_.__r.__words[2]) + 7) != 48)
          break;
        v472 = HIBYTE(cfa.__r_.__value_.__r.__words[2]) - 1;
        *((_BYTE *)&cfa.__r_.__value_.__s + 23) = (*((_BYTE *)&cfa.__r_.__value_.__s + 23) - 1) & 0x7F;
        v473 = &cfa;
        goto LABEL_1061;
      }
      v473 = (std::string *)cfa.__r_.__value_.__r.__words[0];
      if (*(_BYTE *)(cfa.__r_.__value_.__r.__words[0] + cfa.__r_.__value_.__l.__size_ - 1) == 48)
      {
        v472 = --cfa.__r_.__value_.__l.__size_;
LABEL_1061:
        v473->__r_.__value_.__s.__data_[v472] = 0;
        continue;
      }
      break;
    }
    *(_OWORD *)&v1278.__first_ = *(_OWORD *)&cfa.__r_.__value_.__l.__data_;
    v1278.__end_ = (std::__split_buffer<std::string>::pointer)cfa.__r_.__value_.__r.__words[2];
    memset(&cfa, 0, sizeof(cfa));
    while (2)
    {
      if ((SHIBYTE(v1278.__end_) & 0x80000000) == 0)
      {
        if (*(&v1277 + HIBYTE(v1278.__end_)) != 46)
          break;
        v474 = (std::__split_buffer<std::string>::pointer)(HIBYTE(v1278.__end_) - 1);
        HIBYTE(v1278.__end_) = (HIBYTE(v1278.__end_) - 1) & 0x7F;
        v475 = &v1278;
        goto LABEL_1068;
      }
      v475 = v1278.__first_;
      if (v1278.__first_->__r_.__value_.__s.__data_[(unint64_t)v1278.__begin_ - 1] == 46)
      {
        v474 = --v1278.__begin_;
LABEL_1068:
        v474->__r_.__value_.__s.__data_[(_QWORD)v475] = 0;
        continue;
      }
      break;
    }
    v1268 = *(_OWORD *)&v1278.__first_;
    end = v1278.__end_;
    if (SHIBYTE(cfa.__r_.__value_.__r.__words[2]) < 0)
      operator delete(cfa.__r_.__value_.__l.__data_);
    if (SHIBYTE(end) >= 0)
      v476 = (const std::string::value_type *)&v1268;
    else
      v476 = (const std::string::value_type *)v1268;
    if (SHIBYTE(end) >= 0)
      v477 = HIBYTE(end);
    else
      v477 = *((_QWORD *)&v1268 + 1);
    v478 = std::string::append((std::string *)v1271, v476, v477);
    v479 = *(_OWORD *)&v478->__r_.__value_.__l.__data_;
    v1256.__r_.__value_.__r.__words[2] = v478->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v1256.__r_.__value_.__l.__data_ = v479;
    v478->__r_.__value_.__l.__size_ = 0;
    v478->__r_.__value_.__r.__words[2] = 0;
    v478->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(end) < 0)
      operator delete((void *)v1268);
    if ((v1271[23] & 0x80000000) != 0)
      operator delete(*(void **)v1271);
    if (SHIBYTE(v1270.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v1270.__r_.__value_.__l.__data_);
    v480 = std::string::append(&v1256, ",\n", 2uLL);
    v481 = *(_OWORD *)&v480->__r_.__value_.__l.__data_;
    v1257.__r_.__value_.__r.__words[2] = v480->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v1257.__r_.__value_.__l.__data_ = v481;
    v480->__r_.__value_.__l.__size_ = 0;
    v480->__r_.__value_.__r.__words[2] = 0;
    v480->__r_.__value_.__r.__words[0] = 0;
    std::string::basic_string[abi:ne180100]<0>(&v1270, "x_lim");
    v482 = std::string::append(&v1270, ": ", 2uLL);
    v483 = *(_OWORD *)&v482->__r_.__value_.__l.__data_;
    *(_QWORD *)&v1271[16] = *((_QWORD *)&v482->__r_.__value_.__l + 2);
    *(_OWORD *)v1271 = v483;
    v482->__r_.__value_.__l.__size_ = 0;
    v482->__r_.__value_.__r.__words[2] = 0;
    v482->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&cfa, v431);
    while (2)
    {
      if ((SHIBYTE(cfa.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
        if (*((_BYTE *)&v1234 + HIBYTE(cfa.__r_.__value_.__r.__words[2]) + 7) != 48)
          break;
        v484 = HIBYTE(cfa.__r_.__value_.__r.__words[2]) - 1;
        *((_BYTE *)&cfa.__r_.__value_.__s + 23) = (*((_BYTE *)&cfa.__r_.__value_.__s + 23) - 1) & 0x7F;
        v485 = &cfa;
        goto LABEL_1089;
      }
      v485 = (std::string *)cfa.__r_.__value_.__r.__words[0];
      if (*(_BYTE *)(cfa.__r_.__value_.__r.__words[0] + cfa.__r_.__value_.__l.__size_ - 1) == 48)
      {
        v484 = --cfa.__r_.__value_.__l.__size_;
LABEL_1089:
        v485->__r_.__value_.__s.__data_[v484] = 0;
        continue;
      }
      break;
    }
    *(_OWORD *)&v1278.__first_ = *(_OWORD *)&cfa.__r_.__value_.__l.__data_;
    v1278.__end_ = (std::__split_buffer<std::string>::pointer)cfa.__r_.__value_.__r.__words[2];
    memset(&cfa, 0, sizeof(cfa));
    while (2)
    {
      if ((SHIBYTE(v1278.__end_) & 0x80000000) == 0)
      {
        if (*(&v1277 + HIBYTE(v1278.__end_)) != 46)
          break;
        v486 = (std::__split_buffer<std::string>::pointer)(HIBYTE(v1278.__end_) - 1);
        HIBYTE(v1278.__end_) = (HIBYTE(v1278.__end_) - 1) & 0x7F;
        v487 = &v1278;
        goto LABEL_1096;
      }
      v487 = v1278.__first_;
      if (v1278.__first_->__r_.__value_.__s.__data_[(unint64_t)v1278.__begin_ - 1] == 46)
      {
        v486 = --v1278.__begin_;
LABEL_1096:
        v486->__r_.__value_.__s.__data_[(_QWORD)v487] = 0;
        continue;
      }
      break;
    }
    v1268 = *(_OWORD *)&v1278.__first_;
    end = v1278.__end_;
    if (SHIBYTE(cfa.__r_.__value_.__r.__words[2]) < 0)
      operator delete(cfa.__r_.__value_.__l.__data_);
    if (SHIBYTE(end) >= 0)
      v488 = (const std::string::value_type *)&v1268;
    else
      v488 = (const std::string::value_type *)v1268;
    if (SHIBYTE(end) >= 0)
      v489 = HIBYTE(end);
    else
      v489 = *((_QWORD *)&v1268 + 1);
    v490 = std::string::append((std::string *)v1271, v488, v489);
    v491 = *(_OWORD *)&v490->__r_.__value_.__l.__data_;
    v1259.__r_.__value_.__r.__words[2] = v490->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v1259.__r_.__value_.__l.__data_ = v491;
    v490->__r_.__value_.__l.__size_ = 0;
    v490->__r_.__value_.__r.__words[2] = 0;
    v490->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(end) < 0)
      operator delete((void *)v1268);
    if ((v1271[23] & 0x80000000) != 0)
      operator delete(*(void **)v1271);
    if (SHIBYTE(v1270.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v1270.__r_.__value_.__l.__data_);
    v492 = std::string::append(&v1259, ",\n", 2uLL);
    v493 = *(_OWORD *)&v492->__r_.__value_.__l.__data_;
    v1261.__r_.__value_.__r.__words[2] = v492->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v1261.__r_.__value_.__l.__data_ = v493;
    v492->__r_.__value_.__l.__size_ = 0;
    v492->__r_.__value_.__r.__words[2] = 0;
    v492->__r_.__value_.__r.__words[0] = 0;
    std::string::basic_string[abi:ne180100]<0>(&v1270, "ag");
    v494 = std::string::append(&v1270, ": ", 2uLL);
    v495 = *(_OWORD *)&v494->__r_.__value_.__l.__data_;
    *(_QWORD *)&v1271[16] = *((_QWORD *)&v494->__r_.__value_.__l + 2);
    *(_OWORD *)v1271 = v495;
    v494->__r_.__value_.__l.__size_ = 0;
    v494->__r_.__value_.__r.__words[2] = 0;
    v494->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&cfa, v430);
    while (2)
    {
      if ((SHIBYTE(cfa.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
        if (*((_BYTE *)&v1234 + HIBYTE(cfa.__r_.__value_.__r.__words[2]) + 7) != 48)
          break;
        v496 = HIBYTE(cfa.__r_.__value_.__r.__words[2]) - 1;
        *((_BYTE *)&cfa.__r_.__value_.__s + 23) = (*((_BYTE *)&cfa.__r_.__value_.__s + 23) - 1) & 0x7F;
        v497 = &cfa;
        goto LABEL_1117;
      }
      v497 = (std::string *)cfa.__r_.__value_.__r.__words[0];
      if (*(_BYTE *)(cfa.__r_.__value_.__r.__words[0] + cfa.__r_.__value_.__l.__size_ - 1) == 48)
      {
        v496 = --cfa.__r_.__value_.__l.__size_;
LABEL_1117:
        v497->__r_.__value_.__s.__data_[v496] = 0;
        continue;
      }
      break;
    }
    *(_OWORD *)&v1278.__first_ = *(_OWORD *)&cfa.__r_.__value_.__l.__data_;
    v1278.__end_ = (std::__split_buffer<std::string>::pointer)cfa.__r_.__value_.__r.__words[2];
    memset(&cfa, 0, sizeof(cfa));
    while (2)
    {
      if ((SHIBYTE(v1278.__end_) & 0x80000000) == 0)
      {
        if (*(&v1277 + HIBYTE(v1278.__end_)) != 46)
          break;
        v498 = (std::__split_buffer<std::string>::pointer)(HIBYTE(v1278.__end_) - 1);
        HIBYTE(v1278.__end_) = (HIBYTE(v1278.__end_) - 1) & 0x7F;
        v499 = &v1278;
        goto LABEL_1124;
      }
      v499 = v1278.__first_;
      if (v1278.__first_->__r_.__value_.__s.__data_[(unint64_t)v1278.__begin_ - 1] == 46)
      {
        v498 = --v1278.__begin_;
LABEL_1124:
        v498->__r_.__value_.__s.__data_[(_QWORD)v499] = 0;
        continue;
      }
      break;
    }
    v1268 = *(_OWORD *)&v1278.__first_;
    end = v1278.__end_;
    if (SHIBYTE(cfa.__r_.__value_.__r.__words[2]) < 0)
      operator delete(cfa.__r_.__value_.__l.__data_);
    if (SHIBYTE(end) >= 0)
      v500 = (const std::string::value_type *)&v1268;
    else
      v500 = (const std::string::value_type *)v1268;
    if (SHIBYTE(end) >= 0)
      v501 = HIBYTE(end);
    else
      v501 = *((_QWORD *)&v1268 + 1);
    v502 = std::string::append((std::string *)v1271, v500, v501);
    v503 = *(_OWORD *)&v502->__r_.__value_.__l.__data_;
    v1263.__r_.__value_.__r.__words[2] = v502->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v1263.__r_.__value_.__l.__data_ = v503;
    v502->__r_.__value_.__l.__size_ = 0;
    v502->__r_.__value_.__r.__words[2] = 0;
    v502->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(end) < 0)
      operator delete((void *)v1268);
    if ((v1271[23] & 0x80000000) != 0)
      operator delete(*(void **)v1271);
    if (SHIBYTE(v1270.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v1270.__r_.__value_.__l.__data_);
    v504 = std::string::append(&v1263, ",\n", 2uLL);
    v505 = *(_OWORD *)&v504->__r_.__value_.__l.__data_;
    v1264.__r_.__value_.__r.__words[2] = v504->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v1264.__r_.__value_.__l.__data_ = v505;
    v504->__r_.__value_.__l.__size_ = 0;
    v504->__r_.__value_.__r.__words[2] = 0;
    v504->__r_.__value_.__r.__words[0] = 0;
    std::string::basic_string[abi:ne180100]<0>(&v1270, "mt");
    v506 = std::string::append(&v1270, ": ", 2uLL);
    v507 = *(_OWORD *)&v506->__r_.__value_.__l.__data_;
    *(_QWORD *)&v1271[16] = *((_QWORD *)&v506->__r_.__value_.__l + 2);
    *(_OWORD *)v1271 = v507;
    v506->__r_.__value_.__l.__size_ = 0;
    v506->__r_.__value_.__r.__words[2] = 0;
    v506->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&cfa, v433);
    while (2)
    {
      if ((SHIBYTE(cfa.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
        if (*((_BYTE *)&v1234 + HIBYTE(cfa.__r_.__value_.__r.__words[2]) + 7) != 48)
          break;
        v508 = HIBYTE(cfa.__r_.__value_.__r.__words[2]) - 1;
        *((_BYTE *)&cfa.__r_.__value_.__s + 23) = (*((_BYTE *)&cfa.__r_.__value_.__s + 23) - 1) & 0x7F;
        v509 = &cfa;
        goto LABEL_1145;
      }
      v509 = (std::string *)cfa.__r_.__value_.__r.__words[0];
      if (*(_BYTE *)(cfa.__r_.__value_.__r.__words[0] + cfa.__r_.__value_.__l.__size_ - 1) == 48)
      {
        v508 = --cfa.__r_.__value_.__l.__size_;
LABEL_1145:
        v509->__r_.__value_.__s.__data_[v508] = 0;
        continue;
      }
      break;
    }
    *(_OWORD *)&v1278.__first_ = *(_OWORD *)&cfa.__r_.__value_.__l.__data_;
    v1278.__end_ = (std::__split_buffer<std::string>::pointer)cfa.__r_.__value_.__r.__words[2];
    memset(&cfa, 0, sizeof(cfa));
    while (2)
    {
      if ((SHIBYTE(v1278.__end_) & 0x80000000) == 0)
      {
        if (*(&v1277 + HIBYTE(v1278.__end_)) != 46)
          break;
        v510 = (std::__split_buffer<std::string>::pointer)(HIBYTE(v1278.__end_) - 1);
        HIBYTE(v1278.__end_) = (HIBYTE(v1278.__end_) - 1) & 0x7F;
        v511 = &v1278;
        goto LABEL_1152;
      }
      v511 = v1278.__first_;
      if (v1278.__first_->__r_.__value_.__s.__data_[(unint64_t)v1278.__begin_ - 1] == 46)
      {
        v510 = --v1278.__begin_;
LABEL_1152:
        v510->__r_.__value_.__s.__data_[(_QWORD)v511] = 0;
        continue;
      }
      break;
    }
    v1268 = *(_OWORD *)&v1278.__first_;
    end = v1278.__end_;
    if (SHIBYTE(cfa.__r_.__value_.__r.__words[2]) < 0)
      operator delete(cfa.__r_.__value_.__l.__data_);
    if (SHIBYTE(end) >= 0)
      v512 = (const std::string::value_type *)&v1268;
    else
      v512 = (const std::string::value_type *)v1268;
    if (SHIBYTE(end) >= 0)
      v513 = HIBYTE(end);
    else
      v513 = *((_QWORD *)&v1268 + 1);
    v514 = std::string::append((std::string *)v1271, v512, v513);
    v515 = *(_OWORD *)&v514->__r_.__value_.__l.__data_;
    v1266.__r_.__value_.__r.__words[2] = v514->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v1266.__r_.__value_.__l.__data_ = v515;
    v514->__r_.__value_.__l.__size_ = 0;
    v514->__r_.__value_.__r.__words[2] = 0;
    v514->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(end) < 0)
      operator delete((void *)v1268);
    if ((v1271[23] & 0x80000000) != 0)
      operator delete(*(void **)v1271);
    if (SHIBYTE(v1270.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v1270.__r_.__value_.__l.__data_);
    v516 = std::string::append(&v1266, ",\n", 2uLL);
    v517 = *(_OWORD *)&v516->__r_.__value_.__l.__data_;
    v1267.__r_.__value_.__r.__words[2] = v516->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v1267.__r_.__value_.__l.__data_ = v517;
    v516->__r_.__value_.__l.__size_ = 0;
    v516->__r_.__value_.__r.__words[2] = 0;
    v516->__r_.__value_.__r.__words[0] = 0;
    std::string::basic_string[abi:ne180100]<0>(&v1270, "g_bw");
    v518 = std::string::append(&v1270, ": ", 2uLL);
    v519 = *(_OWORD *)&v518->__r_.__value_.__l.__data_;
    *(_QWORD *)&v1271[16] = *((_QWORD *)&v518->__r_.__value_.__l + 2);
    *(_OWORD *)v1271 = v519;
    v518->__r_.__value_.__l.__size_ = 0;
    v518->__r_.__value_.__r.__words[2] = 0;
    v518->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&cfa, v432);
    while (2)
    {
      if ((SHIBYTE(cfa.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
        if (*((_BYTE *)&v1234 + HIBYTE(cfa.__r_.__value_.__r.__words[2]) + 7) != 48)
          break;
        v520 = HIBYTE(cfa.__r_.__value_.__r.__words[2]) - 1;
        *((_BYTE *)&cfa.__r_.__value_.__s + 23) = (*((_BYTE *)&cfa.__r_.__value_.__s + 23) - 1) & 0x7F;
        v521 = &cfa;
        goto LABEL_1173;
      }
      v521 = (std::string *)cfa.__r_.__value_.__r.__words[0];
      if (*(_BYTE *)(cfa.__r_.__value_.__r.__words[0] + cfa.__r_.__value_.__l.__size_ - 1) == 48)
      {
        v520 = --cfa.__r_.__value_.__l.__size_;
LABEL_1173:
        v521->__r_.__value_.__s.__data_[v520] = 0;
        continue;
      }
      break;
    }
    *(_OWORD *)&v1278.__first_ = *(_OWORD *)&cfa.__r_.__value_.__l.__data_;
    v1278.__end_ = (std::__split_buffer<std::string>::pointer)cfa.__r_.__value_.__r.__words[2];
    memset(&cfa, 0, sizeof(cfa));
    while (2)
    {
      if ((SHIBYTE(v1278.__end_) & 0x80000000) == 0)
      {
        if (*(&v1277 + HIBYTE(v1278.__end_)) != 46)
          break;
        v522 = (std::__split_buffer<std::string>::pointer)(HIBYTE(v1278.__end_) - 1);
        HIBYTE(v1278.__end_) = (HIBYTE(v1278.__end_) - 1) & 0x7F;
        v523 = &v1278;
        goto LABEL_1180;
      }
      v523 = v1278.__first_;
      if (v1278.__first_->__r_.__value_.__s.__data_[(unint64_t)v1278.__begin_ - 1] == 46)
      {
        v522 = --v1278.__begin_;
LABEL_1180:
        v522->__r_.__value_.__s.__data_[(_QWORD)v523] = 0;
        continue;
      }
      break;
    }
    v1268 = *(_OWORD *)&v1278.__first_;
    end = v1278.__end_;
    if (SHIBYTE(cfa.__r_.__value_.__r.__words[2]) < 0)
      operator delete(cfa.__r_.__value_.__l.__data_);
    if (SHIBYTE(end) >= 0)
      v524 = (const std::string::value_type *)&v1268;
    else
      v524 = (const std::string::value_type *)v1268;
    if (SHIBYTE(end) >= 0)
      v525 = HIBYTE(end);
    else
      v525 = *((_QWORD *)&v1268 + 1);
    v526 = std::string::append((std::string *)v1271, v524, v525);
    v527 = *(_OWORD *)&v526->__r_.__value_.__l.__data_;
    v1265.__r_.__value_.__r.__words[2] = v526->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v1265.__r_.__value_.__l.__data_ = v527;
    v526->__r_.__value_.__l.__size_ = 0;
    v526->__r_.__value_.__r.__words[2] = 0;
    v526->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(end) < 0)
      operator delete((void *)v1268);
    if ((v1271[23] & 0x80000000) != 0)
      operator delete(*(void **)v1271);
    if (SHIBYTE(v1270.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v1270.__r_.__value_.__l.__data_);
    if ((v1265.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v528 = &v1265;
    else
      v528 = (std::string *)v1265.__r_.__value_.__r.__words[0];
    if ((v1265.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v529 = HIBYTE(v1265.__r_.__value_.__r.__words[2]);
    else
      v529 = v1265.__r_.__value_.__l.__size_;
    v530 = std::string::append(&v1267, (const std::string::value_type *)v528, v529);
    v531 = *(_OWORD *)&v530->__r_.__value_.__l.__data_;
    v1262.__r_.__value_.__r.__words[2] = v530->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v1262.__r_.__value_.__l.__data_ = v531;
    v530->__r_.__value_.__l.__size_ = 0;
    v530->__r_.__value_.__r.__words[2] = 0;
    v530->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v1265.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v1265.__r_.__value_.__l.__data_);
    if (SHIBYTE(v1267.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v1267.__r_.__value_.__l.__data_);
    if (SHIBYTE(v1266.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v1266.__r_.__value_.__l.__data_);
    if ((v1262.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v532 = &v1262;
    else
      v532 = (std::string *)v1262.__r_.__value_.__r.__words[0];
    if ((v1262.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v533 = HIBYTE(v1262.__r_.__value_.__r.__words[2]);
    else
      v533 = v1262.__r_.__value_.__l.__size_;
    v534 = std::string::append(&v1264, (const std::string::value_type *)v532, v533);
    v535 = *(_OWORD *)&v534->__r_.__value_.__l.__data_;
    v1258.__r_.__value_.__r.__words[2] = v534->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v1258.__r_.__value_.__l.__data_ = v535;
    v534->__r_.__value_.__l.__size_ = 0;
    v534->__r_.__value_.__r.__words[2] = 0;
    v534->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v1262.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v1262.__r_.__value_.__l.__data_);
    if (SHIBYTE(v1264.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v1264.__r_.__value_.__l.__data_);
    if (SHIBYTE(v1263.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v1263.__r_.__value_.__l.__data_);
    if ((v1258.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v536 = &v1258;
    else
      v536 = (std::string *)v1258.__r_.__value_.__r.__words[0];
    if ((v1258.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v537 = HIBYTE(v1258.__r_.__value_.__r.__words[2]);
    else
      v537 = v1258.__r_.__value_.__l.__size_;
    v538 = std::string::append(&v1261, (const std::string::value_type *)v536, v537);
    v539 = *(_OWORD *)&v538->__r_.__value_.__l.__data_;
    v1255.__r_.__value_.__r.__words[2] = v538->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v1255.__r_.__value_.__l.__data_ = v539;
    v538->__r_.__value_.__l.__size_ = 0;
    v538->__r_.__value_.__r.__words[2] = 0;
    v538->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v1258.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v1258.__r_.__value_.__l.__data_);
    if (SHIBYTE(v1261.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v1261.__r_.__value_.__l.__data_);
    if (SHIBYTE(v1259.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v1259.__r_.__value_.__l.__data_);
    if ((v1255.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v540 = &v1255;
    else
      v540 = (std::string *)v1255.__r_.__value_.__r.__words[0];
    if ((v1255.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v541 = HIBYTE(v1255.__r_.__value_.__r.__words[2]);
    else
      v541 = v1255.__r_.__value_.__l.__size_;
    v542 = std::string::append(&v1257, (const std::string::value_type *)v540, v541);
    v543 = *(_OWORD *)&v542->__r_.__value_.__l.__data_;
    v1252.__r_.__value_.__r.__words[2] = v542->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v1252.__r_.__value_.__l.__data_ = v543;
    v542->__r_.__value_.__l.__size_ = 0;
    v542->__r_.__value_.__r.__words[2] = 0;
    v542->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v1255.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v1255.__r_.__value_.__l.__data_);
    if (SHIBYTE(v1257.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v1257.__r_.__value_.__l.__data_);
    if (SHIBYTE(v1256.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v1256.__r_.__value_.__l.__data_);
    if ((v1252.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v544 = &v1252;
    else
      v544 = (std::string *)v1252.__r_.__value_.__r.__words[0];
    if ((v1252.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v545 = HIBYTE(v1252.__r_.__value_.__r.__words[2]);
    else
      v545 = v1252.__r_.__value_.__l.__size_;
    v546 = std::string::append(&v1254, (const std::string::value_type *)v544, v545);
    v547 = *(_OWORD *)&v546->__r_.__value_.__l.__data_;
    v1249.__r_.__value_.__r.__words[2] = v546->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v1249.__r_.__value_.__l.__data_ = v547;
    v546->__r_.__value_.__l.__size_ = 0;
    v546->__r_.__value_.__r.__words[2] = 0;
    v546->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v1252.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v1252.__r_.__value_.__l.__data_);
    if (SHIBYTE(v1254.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v1254.__r_.__value_.__l.__data_);
    if (SHIBYTE(v1253.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v1253.__r_.__value_.__l.__data_);
    if ((v1249.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v548 = &v1249;
    else
      v548 = (std::string *)v1249.__r_.__value_.__r.__words[0];
    if ((v1249.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v549 = HIBYTE(v1249.__r_.__value_.__r.__words[2]);
    else
      v549 = v1249.__r_.__value_.__l.__size_;
    v550 = std::string::append(&v1251, (const std::string::value_type *)v548, v549);
    v551 = *(_OWORD *)&v550->__r_.__value_.__l.__data_;
    v1246.__r_.__value_.__r.__words[2] = v550->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v1246.__r_.__value_.__l.__data_ = v551;
    v550->__r_.__value_.__l.__size_ = 0;
    v550->__r_.__value_.__r.__words[2] = 0;
    v550->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v1249.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v1249.__r_.__value_.__l.__data_);
    if (SHIBYTE(v1251.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v1251.__r_.__value_.__l.__data_);
    if (SHIBYTE(v1250.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v1250.__r_.__value_.__l.__data_);
    if ((v1246.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v552 = &v1246;
    else
      v552 = (std::string *)v1246.__r_.__value_.__r.__words[0];
    if ((v1246.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v553 = HIBYTE(v1246.__r_.__value_.__r.__words[2]);
    else
      v553 = v1246.__r_.__value_.__l.__size_;
    v554 = std::string::append(&v1248, (const std::string::value_type *)v552, v553);
    v1244 = *v554;
    v554->__r_.__value_.__l.__size_ = 0;
    v554->__r_.__value_.__r.__words[2] = 0;
    v554->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v1246.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v1246.__r_.__value_.__l.__data_);
    if (SHIBYTE(v1248.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v1248.__r_.__value_.__l.__data_);
    if (SHIBYTE(v1247.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v1247.__r_.__value_.__l.__data_);
    AUT::ReplaceAll((std::string *)&v1278, (uint64_t)&v1244, "\n", 1, "\n  ┣ ", 7uLL);
    v555 = std::string::insert((std::string *)&v1278, 0, "\n  ┏ ", 7uLL);
    v556 = *(_OWORD *)&v555->__r_.__value_.__l.__data_;
    v1245.__r_.__value_.__r.__words[2] = v555->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v1245.__r_.__value_.__l.__data_ = v556;
    v555->__r_.__value_.__l.__size_ = 0;
    v555->__r_.__value_.__r.__words[2] = 0;
    v555->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v1278.__end_) < 0)
      operator delete(v1278.__first_);
    v557 = &v1245;
    if ((v1245.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v557 = (std::string *)v1245.__r_.__value_.__r.__words[0];
    LODWORD(buf[0].__r_.__value_.__l.__data_) = 136315906;
    *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)"AUSpeakerProtectionV3.cpp";
    WORD2(buf[0].__r_.__value_.__r.__words[1]) = 1024;
    *(_DWORD *)((char *)&buf[0].__r_.__value_.__r.__words[1] + 6) = 3863;
    WORD1(buf[0].__r_.__value_.__r.__words[2]) = 1024;
    *((float *)&buf[0].__r_.__value_.__r.__words[2] + 1) = v425;
    LOWORD(buf[1].__r_.__value_.__l.__data_) = 2080;
    *(std::string::size_type *)((char *)buf[1].__r_.__value_.__r.__words + 2) = (std::string::size_type)v557;
    _os_log_impl(&dword_1B5ED0000, v424, OS_LOG_TYPE_DEBUG, "%25s:%-5d Applying OL displacement params to channel %i:%s", (uint8_t *)buf, 0x22u);
    if (SHIBYTE(v1245.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v1245.__r_.__value_.__l.__data_);
    if (SHIBYTE(v1244.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v1244.__r_.__value_.__l.__data_);
LABEL_1287:
    v559 = v422[1];
    v558 = v422[2];
    v561 = v422[3];
    v560 = v422[4];
    v563 = v422[5];
    v562 = v422[6];
    v565 = v422[7];
    v564 = v422[8];
    v566 = *(unsigned int *)v422;
    v567 = *((_QWORD *)this + 104);
    if (v567)
    {
      v568 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)v567 + 32))(v567, v566);
    }
    else
    {
      v569 = *((_QWORD *)this + 101);
      if (v566 >= (*((_QWORD *)this + 102) - v569) >> 3)
        v568 = 0;
      else
        v568 = *(ausdk::AUElement **)(v569 + 8 * v566);
    }
    ausdk::AUElement::SetParameter(v568, 0x11u, v559, 0);
    ausdk::AUElement::SetParameter(v568, 0xEu, v558, 0);
    ausdk::AUElement::SetParameter(v568, 0xDu, v561, 0);
    ausdk::AUElement::SetParameter(v568, 0x12u, v560, 0);
    ausdk::AUElement::SetParameter(v568, 0x13u, v563, 0);
    ausdk::AUElement::SetParameter(v568, 0xFu, v562, 0);
    ausdk::AUElement::SetParameter(v568, 0xCu, v565, 0);
    ausdk::AUElement::SetParameter(v568, 0x10u, v564, 0);
    v422 += 9;
    if (v422 != v46)
      continue;
    break;
  }
LABEL_1293:
  *((_BYTE *)this + 528) = 1;
  ausdk::AUScope::SetNumberOfElements((int64x2_t *)((char *)this + 792), *((_DWORD *)this + 158));
  if (v1223)
    operator delete(v1223);
  if (__p)
    operator delete(__p);
  if (!v1234)
  {
    v1146 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v1146, "Could not construct");
  }
  applesauce::CF::details::find_at_key<applesauce::CF::DictionaryRef,char const(&)[22]>((applesauce::CF::DictionaryRef *)v1271, (const __CFDictionary *)v1234);
  v1161 = *((_DWORD *)this + 158);
  if (v1161)
  {
    v570 = 0;
    v571 = 0;
    v572 = 0;
    v573 = 0;
    while (1)
    {
      if (!*(_QWORD *)v1271)
      {
        v1128 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v1128, "Could not construct");
      }
      std::to_string((std::string *)&v1278, v573);
      v574 = std::string::insert((std::string *)&v1278, 0, "Channel", 7uLL);
      v575 = *(_OWORD *)&v574->__r_.__value_.__l.__data_;
      buf[0].__r_.__value_.__r.__words[2] = v574->__r_.__value_.__r.__words[2];
      *(_OWORD *)&buf[0].__r_.__value_.__l.__data_ = v575;
      v574->__r_.__value_.__l.__size_ = 0;
      v574->__r_.__value_.__r.__words[2] = 0;
      v574->__r_.__value_.__r.__words[0] = 0;
      applesauce::CF::details::find_at_key<applesauce::CF::DictionaryRef,std::string>((applesauce::CF::DictionaryRef *)&cfa, *(const __CFDictionary **)v1271, (uint64_t)buf);
      if (SHIBYTE(buf[0].__r_.__value_.__r.__words[2]) < 0)
        operator delete(buf[0].__r_.__value_.__l.__data_);
      if (SHIBYTE(v1278.__end_) < 0)
        operator delete(v1278.__first_);
      if (!cfa.__r_.__value_.__r.__words[0])
      {
        v1129 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v1129, "Could not construct");
      }
      applesauce::CF::details::find_at_key<applesauce::CF::DictionaryRef,char const* const&>((applesauce::CF::DictionaryRef *)&v1278, (const __CFDictionary *)cfa.__r_.__value_.__l.__data_, clsp::plistV9::CLParamStruct::key);
      v576 = (NSObject **)spp3Subsystem();
      if (v576)
      {
        v577 = *v576;
        if (!*v576)
          goto LABEL_1312;
      }
      else
      {
        v577 = MEMORY[0x1E0C81028];
      }
      if (os_log_type_enabled(v577, OS_LOG_TYPE_DEBUG))
      {
        LODWORD(buf[0].__r_.__value_.__l.__data_) = 136315906;
        *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)"AUSpeakerProtectionV3.cpp";
        WORD2(buf[0].__r_.__value_.__r.__words[1]) = 1024;
        *(_DWORD *)((char *)&buf[0].__r_.__value_.__r.__words[1] + 6) = 3784;
        WORD1(buf[0].__r_.__value_.__r.__words[2]) = 2080;
        *(std::string::size_type *)((char *)&buf[0].__r_.__value_.__r.__words[2] + 4) = (std::string::size_type)"CL";
        WORD2(buf[1].__r_.__value_.__r.__words[0]) = 1024;
        *(_DWORD *)((char *)buf[1].__r_.__value_.__r.__words + 6) = v573;
        _os_log_impl(&dword_1B5ED0000, v577, OS_LOG_TYPE_DEBUG, "%25s:%-5d Found the %s plist entry for channel %i.", (uint8_t *)buf, 0x22u);
      }
LABEL_1312:
      if (!v1278.__first_)
        goto LABEL_2458;
      v578 = applesauce::CF::details::find_at_key<float,char const* const&>((const __CFDictionary *)v1278.__first_, clsp::plistV9::TempSenseWindowTime::key);
      if (!v1278.__first_)
        goto LABEL_2458;
      v579 = v578;
      v580 = applesauce::CF::details::find_at_key<float,char const* const&>((const __CFDictionary *)v1278.__first_, clsp::plistV9::TempSenseSmoothingTau::key);
      if (!v1278.__first_)
        goto LABEL_2458;
      v581 = v580;
      v582 = applesauce::CF::details::find_at_key<float,char const* const&>((const __CFDictionary *)v1278.__first_, clsp::plistV9::TlimErrDecayTime::key);
      if (!v1278.__first_)
        goto LABEL_2458;
      v583 = v582;
      v1172 = applesauce::CF::details::find_at_key<float,char const* const&>((const __CFDictionary *)v1278.__first_, clsp::plistV9::PilotAmplHi_dB::key);
      if (!v1278.__first_)
        goto LABEL_2458;
      v1171 = applesauce::CF::details::find_at_key<float,char const* const&>((const __CFDictionary *)v1278.__first_, clsp::plistV9::PilotAmplLo_dB::key);
      if (!v1278.__first_)
        goto LABEL_2458;
      v1170 = applesauce::CF::details::find_at_key<float,char const* const&>((const __CFDictionary *)v1278.__first_, clsp::plistV9::PilotUpperThres::key);
      if (!v1278.__first_
        || (v1169 = applesauce::CF::details::find_at_key<float,char const* const&>((const __CFDictionary *)v1278.__first_, clsp::plistV9::PilotLowerThres::key), !v1278.__first_)|| (v1168 = applesauce::CF::details::find_at_key<float,char const* const&>((const __CFDictionary *)v1278.__first_, clsp::plistV9::PilotDecayTime::key), !v1278.__first_)|| (v1167 = applesauce::CF::details::find_at_key<float,char const* const&>((const __CFDictionary *)v1278.__first_, clsp::plistV9::PilotFreq::key), !v1278.__first_)|| (v1166 = applesauce::CF::details::find_at_key<float,char const* const&>((const __CFDictionary *)v1278.__first_, clsp::plistV9::LPMLSPreGain::key), !v1278.__first_)|| (v1165 = applesauce::CF::details::find_at_key<float,char const* const&>((const __CFDictionary *)v1278.__first_, clsp::plistV9::LPMLSPostGain::key), !v1278.__first_)
        || (v1164 = applesauce::CF::details::find_at_key<float,char const* const&>((const __CFDictionary *)v1278.__first_, clsp::plistV9::LPMLSLowerCorner::key), !v1278.__first_)|| (v584 = applesauce::CF::details::find_at_key<int,char const* const&>((const __CFDictionary *)v1278.__first_, clsp::plistV9::ThermalMeasurementMethod::key), !v1278.__first_))
      {
LABEL_2458:
        v1130 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v1130, "Could not construct");
      }
      v585 = applesauce::CF::details::find_at_key<int,char const* const&>((const __CFDictionary *)v1278.__first_, clsp::plistV9::DisplacementProtectionType::key);
      if (!v1278.__first_
        || (v586 = applesauce::CF::details::find_at_key<float,char const* const&>((const __CFDictionary *)v1278.__first_, clsp::plistV9::PilotDecayTimeStage2::key), !v1278.__first_))
      {
        v609 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v609, "Could not construct");
      }
      v587 = v1163 & 0xFFFFFF00 | 1;
      v588 = LODWORD(v586) | ((unint64_t)COERCE_UNSIGNED_INT(applesauce::CF::details::find_at_key<float,char const* const&>((const __CFDictionary *)v1278.__first_, clsp::plistV9::PilotEnableThres::key)) << 32);
      v1163 = v587;
      if (!v1278.__first_)
      {
        v608 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v608, "Could not construct");
      }
      __pa = applesauce::CF::details::find_at_key<float,char const* const&>((const __CFDictionary *)v1278.__first_, clsp::plistV9::ConvoyMinExcursion::key);
      if (!v1278.__first_)
      {
        v610 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v610, "Could not construct");
      }
      v589 = applesauce::CF::details::find_at_key<float,char const* const&>((const __CFDictionary *)v1278.__first_, clsp::plistV9::ConvoyMaxExcursion::key);
      if (!v1278.__first_)
      {
        v611 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v611, "Could not construct");
      }
      v590 = applesauce::CF::details::find_at_key<float,char const* const&>((const __CFDictionary *)v1278.__first_, clsp::plistV9::ConvoyPeakFinderThresholdUpper::key);
      if (!v1278.__first_)
      {
        v612 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v612, "Could not construct");
      }
      v1220 = applesauce::CF::details::find_at_key<float,char const* const&>((const __CFDictionary *)v1278.__first_, clsp::plistV9::ConvoyPeakFinderThresholdLower::key);
      if (!v1278.__first_)
      {
        v613 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v613, "Could not construct");
      }
      __vala = applesauce::CF::details::find_at_key<float,char const* const&>((const __CFDictionary *)v1278.__first_, clsp::plistV9::ConvoyNormFactorCapUpper::key);
      if (!v1278.__first_)
      {
        v614 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v614, "Could not construct");
      }
      v1206 = applesauce::CF::details::find_at_key<float,char const* const&>((const __CFDictionary *)v1278.__first_, clsp::plistV9::ConvoyNormFactorCapLower::key);
      if (!v1278.__first_)
      {
        v615 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v615, "Could not construct");
      }
      v1201 = applesauce::CF::details::find_at_key<float,char const* const&>((const __CFDictionary *)v1278.__first_, clsp::plistV9::ConvoyPeakRatioPosBlockThreshold::key);
      if (!v1278.__first_)
      {
        v616 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v616, "Could not construct");
      }
      v1195 = applesauce::CF::details::find_at_key<float,char const* const&>((const __CFDictionary *)v1278.__first_, clsp::plistV9::ConvoyPeakRatioNegBlockThreshold::key);
      if (!v1278.__first_)
      {
        v617 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v617, "Could not construct");
      }
      v1190 = applesauce::CF::details::find_at_key<float,char const* const&>((const __CFDictionary *)v1278.__first_, clsp::plistV9::ConvoyRelXLimUpper::key);
      if (!v1278.__first_)
      {
        v618 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v618, "Could not construct");
      }
      v1185 = applesauce::CF::details::find_at_key<float,char const* const&>((const __CFDictionary *)v1278.__first_, clsp::plistV9::ConvoyRelXLimLower::key);
      if (!v1278.__first_)
      {
        v619 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v619, "Could not construct");
      }
      v1182 = applesauce::CF::details::find_at_key<float,char const* const&>((const __CFDictionary *)v1278.__first_, clsp::plistV9::ConvoyNormFactorAttack::key);
      if (!v1278.__first_)
      {
        v620 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v620, "Could not construct");
      }
      v1180 = applesauce::CF::details::find_at_key<float,char const* const&>((const __CFDictionary *)v1278.__first_, clsp::plistV9::ConvoyNormFactorRelease::key);
      if (!v1278.__first_)
      {
        v621 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v621, "Could not construct");
      }
      v1177 = applesauce::CF::details::find_at_key<float,char const* const&>((const __CFDictionary *)v1278.__first_, clsp::plistV9::ConvoyPeakDetectorAtkTime::key);
      if (!v1278.__first_)
      {
        v622 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v622, "Could not construct");
      }
      v591 = applesauce::CF::details::find_at_key<float,char const* const&>((const __CFDictionary *)v1278.__first_, clsp::plistV9::ConvoyPeakDetectorRelTime::key);
      if (!v1278.__first_)
      {
        v623 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v623, "Could not construct");
      }
      v592 = applesauce::CF::details::find_at_key<float,char const* const&>((const __CFDictionary *)v1278.__first_, clsp::plistV9::ConvoyPeakRatiosInWindowCountThreshold::key);
      if (!v1278.__first_)
      {
        v624 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v624, "Could not construct");
      }
      v593 = applesauce::CF::details::find_at_key<float,char const* const&>((const __CFDictionary *)v1278.__first_, clsp::plistV9::ConvoyNormFactorThreshold::key);
      if (!v1278.__first_)
      {
        v625 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v625, "Could not construct");
      }
      v1162 = applesauce::CF::details::find_at_key<float,char const* const&>((const __CFDictionary *)v1278.__first_, clsp::plistV9::ConvoyBufferDirtyCountThreshold_ms::key);
      if (v571 >= (unsigned int *)v570)
      {
        v594 = 0x8E38E38E38E38E39 * (((char *)v571 - (char *)v572) >> 4) + 1;
        if (v594 > 0x1C71C71C71C71C7)
          std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
        if (0x1C71C71C71C71C72 * ((v570 - (char *)v572) >> 4) > v594)
          v594 = 0x1C71C71C71C71C72 * ((v570 - (char *)v572) >> 4);
        if (0x8E38E38E38E38E39 * ((v570 - (char *)v572) >> 4) >= 0xE38E38E38E38E3)
          v595 = 0x1C71C71C71C71C7;
        else
          v595 = v594;
        if (v595)
        {
          if (v595 > 0x1C71C71C71C71C7)
            std::__throw_bad_array_new_length[abi:ne180100]();
          v596 = (char *)operator new(144 * v595);
        }
        else
        {
          v596 = 0;
        }
        v597 = &v596[16 * (((char *)v571 - (char *)v572) >> 4)];
        *(_DWORD *)v597 = v573;
        *((float *)v597 + 1) = v579;
        *((float *)v597 + 2) = v581;
        *((float *)v597 + 3) = v583;
        *((float *)v597 + 4) = v1172;
        *((float *)v597 + 5) = v1171;
        *((float *)v597 + 6) = v1170;
        *((float *)v597 + 7) = v1169;
        *((float *)v597 + 8) = v1168;
        *((float *)v597 + 9) = v1167;
        *((float *)v597 + 10) = v1166;
        *((float *)v597 + 11) = v1165;
        *((float *)v597 + 12) = v1164;
        *((_DWORD *)v597 + 13) = v584;
        *((_DWORD *)v597 + 14) = v585;
        *(_QWORD *)(v597 + 60) = v588;
        *((_DWORD *)v597 + 17) = v587;
        *((float *)v597 + 18) = __pa;
        *((float *)v597 + 19) = v589;
        *((float *)v597 + 20) = v590;
        *((float *)v597 + 21) = v1220;
        *((float *)v597 + 22) = __vala;
        *((float *)v597 + 23) = v1206;
        *((float *)v597 + 24) = v1201;
        *((float *)v597 + 25) = v1195;
        *((float *)v597 + 26) = v1190;
        *((float *)v597 + 27) = v1185;
        *((float *)v597 + 28) = v1182;
        *((float *)v597 + 29) = v1180;
        *((float *)v597 + 30) = v1177;
        *((float *)v597 + 31) = v591;
        *((float *)v597 + 32) = v592;
        *((float *)v597 + 33) = v593;
        *((float *)v597 + 34) = v1162;
        v597[140] = 1;
        v597[143] = buf[0].__r_.__value_.__s.__data_[2];
        *(_WORD *)(v597 + 141) = buf[0].__r_.__value_.__l.__data_;
        if (v571 == v572)
        {
          v605 = &v596[16 * (((char *)v571 - (char *)v572) >> 4)];
        }
        else
        {
          v598 = &v596[16 * (((char *)v571 - (char *)v572) >> 4)];
          do
          {
            *((_OWORD *)v598 - 9) = *((_OWORD *)v571 - 9);
            v599 = *((_OWORD *)v571 - 8);
            v600 = *((_OWORD *)v571 - 7);
            v601 = *((_OWORD *)v571 - 5);
            *((_OWORD *)v598 - 6) = *((_OWORD *)v571 - 6);
            *((_OWORD *)v598 - 5) = v601;
            *((_OWORD *)v598 - 8) = v599;
            *((_OWORD *)v598 - 7) = v600;
            v602 = *((_OWORD *)v571 - 4);
            v603 = *((_OWORD *)v571 - 3);
            v604 = *((_OWORD *)v571 - 1);
            v605 = v598 - 144;
            *((_OWORD *)v598 - 2) = *((_OWORD *)v571 - 2);
            *((_OWORD *)v598 - 1) = v604;
            *((_OWORD *)v598 - 4) = v602;
            *((_OWORD *)v598 - 3) = v603;
            v571 -= 36;
            v598 -= 144;
          }
          while (v571 != v572);
        }
        v570 = &v596[144 * v595];
        v571 = (unsigned int *)(v597 + 144);
        if (v572)
          operator delete(v572);
        v572 = (unsigned int *)v605;
      }
      else
      {
        *v571 = v573;
        *((float *)v571 + 1) = v579;
        *((float *)v571 + 2) = v581;
        *((float *)v571 + 3) = v583;
        *((float *)v571 + 4) = v1172;
        *((float *)v571 + 5) = v1171;
        *((float *)v571 + 6) = v1170;
        *((float *)v571 + 7) = v1169;
        *((float *)v571 + 8) = v1168;
        *((float *)v571 + 9) = v1167;
        *((float *)v571 + 10) = v1166;
        *((float *)v571 + 11) = v1165;
        *((float *)v571 + 12) = v1164;
        v571[13] = v584;
        v571[14] = v585;
        *(_QWORD *)(v571 + 15) = v588;
        v571[17] = v587;
        *((float *)v571 + 18) = __pa;
        *((float *)v571 + 19) = v589;
        *((float *)v571 + 20) = v590;
        *((float *)v571 + 21) = v1220;
        *((float *)v571 + 22) = __vala;
        *((float *)v571 + 23) = v1206;
        *((float *)v571 + 24) = v1201;
        *((float *)v571 + 25) = v1195;
        *((float *)v571 + 26) = v1190;
        *((float *)v571 + 27) = v1185;
        *((float *)v571 + 28) = v1182;
        *((float *)v571 + 29) = v1180;
        *((float *)v571 + 30) = v1177;
        *((float *)v571 + 31) = v591;
        *((float *)v571 + 32) = v592;
        *((float *)v571 + 33) = v593;
        *((float *)v571 + 34) = v1162;
        *((_BYTE *)v571 + 140) = 1;
        *((_BYTE *)v571 + 143) = buf[0].__r_.__value_.__s.__data_[2];
        *(_WORD *)((char *)v571 + 141) = buf[0].__r_.__value_.__l.__data_;
        v571 += 36;
      }
      v606 = (NSObject **)spp3Subsystem();
      if (!v606)
      {
        v607 = MEMORY[0x1E0C81028];
LABEL_1369:
        if (os_log_type_enabled(v607, OS_LOG_TYPE_DEBUG))
        {
          LODWORD(buf[0].__r_.__value_.__l.__data_) = 136315906;
          *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)"AUSpeakerProtectionV3.cpp";
          WORD2(buf[0].__r_.__value_.__r.__words[1]) = 1024;
          *(_DWORD *)((char *)&buf[0].__r_.__value_.__r.__words[1] + 6) = 3789;
          WORD1(buf[0].__r_.__value_.__r.__words[2]) = 2080;
          *(std::string::size_type *)((char *)&buf[0].__r_.__value_.__r.__words[2] + 4) = (std::string::size_type)"CL";
          WORD2(buf[1].__r_.__value_.__r.__words[0]) = 1024;
          *(_DWORD *)((char *)buf[1].__r_.__value_.__r.__words + 6) = v573;
          _os_log_impl(&dword_1B5ED0000, v607, OS_LOG_TYPE_DEBUG, "%25s:%-5d Successfully parsed the %s plist entry for channel %i.", (uint8_t *)buf, 0x22u);
        }
        goto LABEL_1371;
      }
      v607 = *v606;
      if (*v606)
        goto LABEL_1369;
LABEL_1371:
      if (v1278.__first_)
        CFRelease(v1278.__first_);
      if (cfa.__r_.__value_.__r.__words[0])
        CFRelease(cfa.__r_.__value_.__l.__data_);
      if (++v573 == v1161)
        goto LABEL_1397;
    }
  }
  v571 = 0;
  v572 = 0;
LABEL_1397:
  if (*(_QWORD *)v1271)
    CFRelease(*(CFTypeRef *)v1271);
  v1173 = v572;
  v626 = (NSObject **)spp3Subsystem();
  if (v626)
  {
    v627 = *v626;
    if (!*v626)
      goto LABEL_1405;
  }
  else
  {
    v627 = MEMORY[0x1E0C81028];
  }
  if (os_log_type_enabled(v627, OS_LOG_TYPE_INFO))
  {
    LODWORD(buf[0].__r_.__value_.__l.__data_) = 136315650;
    *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)"AUSpeakerProtectionV3.cpp";
    WORD2(buf[0].__r_.__value_.__r.__words[1]) = 1024;
    *(_DWORD *)((char *)&buf[0].__r_.__value_.__r.__words[1] + 6) = 3888;
    WORD1(buf[0].__r_.__value_.__r.__words[2]) = 2048;
    *(std::string::size_type *)((char *)&buf[0].__r_.__value_.__r.__words[2] + 4) = 0x8E38E38E38E38E39
                                                                                  * (((char *)v571 - (char *)v572) >> 4);
    _os_log_impl(&dword_1B5ED0000, v627, OS_LOG_TYPE_INFO, "%25s:%-5d Successfully parsed all %lu the per-speaker CL params.", (uint8_t *)buf, 0x1Cu);
  }
LABEL_1405:
  if (!v1234)
  {
    v1149 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v1149, "Could not construct");
  }
  applesauce::CF::details::find_at_key<applesauce::CF::DictionaryRef,char const(&)[22]>((applesauce::CF::DictionaryRef *)&v1270, (const __CFDictionary *)v1234);
  v628 = *((_DWORD *)this + 158);
  memset(&v1264, 0, sizeof(v1264));
  if (v628)
  {
    v629 = 0;
    v630 = "Channel";
    do
    {
      if (!v1270.__r_.__value_.__r.__words[0])
      {
        v1126 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v1126, "Could not construct");
      }
      std::to_string((std::string *)&v1278, v629);
      v631 = std::string::insert((std::string *)&v1278, 0, v630, 7uLL);
      v632 = *(_OWORD *)&v631->__r_.__value_.__l.__data_;
      buf[0].__r_.__value_.__r.__words[2] = v631->__r_.__value_.__r.__words[2];
      *(_OWORD *)&buf[0].__r_.__value_.__l.__data_ = v632;
      v631->__r_.__value_.__l.__size_ = 0;
      v631->__r_.__value_.__r.__words[2] = 0;
      v631->__r_.__value_.__r.__words[0] = 0;
      applesauce::CF::details::find_at_key<applesauce::CF::DictionaryRef,std::string>((applesauce::CF::DictionaryRef *)&cfa, (const __CFDictionary *)v1270.__r_.__value_.__l.__data_, (uint64_t)buf);
      if (SHIBYTE(buf[0].__r_.__value_.__r.__words[2]) < 0)
        operator delete(buf[0].__r_.__value_.__l.__data_);
      if (SHIBYTE(v1278.__end_) < 0)
        operator delete(v1278.__first_);
      if (!cfa.__r_.__value_.__r.__words[0])
      {
        v1127 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v1127, "Could not construct");
      }
      applesauce::CF::details::find_at_key<applesauce::CF::DictionaryRef,char const* const&>((applesauce::CF::DictionaryRef *)&v1278, (const __CFDictionary *)cfa.__r_.__value_.__l.__data_, clsp::plistV9::ClosedLoopParametersStruct::key);
      v633 = (NSObject **)spp3Subsystem();
      if (v633)
      {
        v634 = *v633;
        if (!*v633)
          goto LABEL_1420;
      }
      else
      {
        v634 = MEMORY[0x1E0C81028];
      }
      if (os_log_type_enabled(v634, OS_LOG_TYPE_DEBUG))
      {
        LODWORD(buf[0].__r_.__value_.__l.__data_) = 136315906;
        *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)"AUSpeakerProtectionV3.cpp";
        WORD2(buf[0].__r_.__value_.__r.__words[1]) = 1024;
        *(_DWORD *)((char *)&buf[0].__r_.__value_.__r.__words[1] + 6) = 3784;
        WORD1(buf[0].__r_.__value_.__r.__words[2]) = 2080;
        *(std::string::size_type *)((char *)&buf[0].__r_.__value_.__r.__words[2] + 4) = (std::string::size_type)"CL";
        WORD2(buf[1].__r_.__value_.__r.__words[0]) = 1024;
        *(_DWORD *)((char *)buf[1].__r_.__value_.__r.__words + 6) = v629;
        _os_log_impl(&dword_1B5ED0000, v634, OS_LOG_TYPE_DEBUG, "%25s:%-5d Found the %s plist entry for channel %i.", (uint8_t *)buf, 0x22u);
      }
LABEL_1420:
      buf[0].__r_.__value_.__r.__words[0] = (std::string::size_type)v1278.__first_;
      LOWORD(buf[0].__r_.__value_.__r.__words[1]) = 0;
      clsp::ClosedLoopParameters::Create((clsp::ClosedLoopParameters *)v1271, (clsp **)buf);
      CACFDictionary::~CACFDictionary((CACFDictionary *)buf);
      v635 = *(_QWORD *)v1271;
      if (!*(_QWORD *)v1271)
        __cxa_rethrow();
      v636 = (_QWORD *)v1264.__r_.__value_.__l.__size_;
      if (v1264.__r_.__value_.__l.__size_ < v1264.__r_.__value_.__r.__words[2])
      {
        *(_DWORD *)v1264.__r_.__value_.__l.__size_ = v629;
        v636[1] = v635;
        v1264.__r_.__value_.__l.__size_ = (std::string::size_type)(v636 + 2);
        goto LABEL_1443;
      }
      v637 = v630;
      v638 = v1264.__r_.__value_.__r.__words[0];
      v639 = (uint64_t)(v1264.__r_.__value_.__l.__size_ - v1264.__r_.__value_.__r.__words[0]) >> 4;
      v640 = v639 + 1;
      if ((unint64_t)(v639 + 1) >> 60)
        std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
      v641 = v1264.__r_.__value_.__r.__words[2] - v1264.__r_.__value_.__r.__words[0];
      if ((uint64_t)(v1264.__r_.__value_.__r.__words[2] - v1264.__r_.__value_.__r.__words[0]) >> 3 > v640)
        v640 = v641 >> 3;
      if ((unint64_t)v641 >= 0x7FFFFFFFFFFFFFF0)
        v642 = 0xFFFFFFFFFFFFFFFLL;
      else
        v642 = v640;
      if (v642 >> 60)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v643 = operator new(16 * v642);
      v644 = (std::string::size_type)v643 + 16 * v639;
      *(_DWORD *)v644 = v629;
      *(_QWORD *)v1271 = 0;
      *(_QWORD *)(v644 + 8) = v635;
      v645 = v644 + 16;
      if (v636 == (_QWORD *)v638)
      {
        v1264.__r_.__value_.__r.__words[0] = (std::string::size_type)v643 + 16 * v639;
        v1264.__r_.__value_.__l.__size_ = v644 + 16;
        v1264.__r_.__value_.__r.__words[2] = (std::string::size_type)v643 + 16 * v642;
        v630 = v637;
        v572 = v1173;
        if (!v636)
          goto LABEL_1442;
      }
      else
      {
        v630 = v637;
        do
        {
          v646 = *((_DWORD *)v636 - 4);
          v636 -= 2;
          *(_DWORD *)(v644 - 16) = v646;
          v644 -= 16;
          v647 = v636[1];
          v636[1] = 0;
          *(_QWORD *)(v644 + 8) = v647;
        }
        while (v636 != (_QWORD *)v638);
        v636 = (_QWORD *)v1264.__r_.__value_.__l.__size_;
        v648 = v1264.__r_.__value_.__r.__words[0];
        v1264.__r_.__value_.__r.__words[0] = v644;
        v1264.__r_.__value_.__l.__size_ = v645;
        v1264.__r_.__value_.__r.__words[2] = (std::string::size_type)v643 + 16 * v642;
        v572 = v1173;
        if (v636 != (_QWORD *)v648)
        {
          do
          {
            v649 = *(v636 - 1);
            *(v636 - 1) = 0;
            if (v649)
              std::default_delete<clsp::ClosedLoopParameters>::operator()[abi:ne180100](v649);
            v636 -= 2;
          }
          while (v636 != (_QWORD *)v648);
          v636 = (_QWORD *)v648;
        }
        if (!v636)
        {
LABEL_1442:
          v1264.__r_.__value_.__l.__size_ = v645;
          goto LABEL_1443;
        }
      }
      operator delete(v636);
      v1264.__r_.__value_.__l.__size_ = v645;
      if (*(_QWORD *)v1271)
        std::default_delete<clsp::ClosedLoopParameters>::operator()[abi:ne180100](*(uint64_t *)v1271);
LABEL_1443:
      v650 = (NSObject **)spp3Subsystem();
      if (!v650)
      {
        v651 = MEMORY[0x1E0C81028];
LABEL_1447:
        if (os_log_type_enabled(v651, OS_LOG_TYPE_DEBUG))
        {
          LODWORD(buf[0].__r_.__value_.__l.__data_) = 136315906;
          *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)"AUSpeakerProtectionV3.cpp";
          WORD2(buf[0].__r_.__value_.__r.__words[1]) = 1024;
          *(_DWORD *)((char *)&buf[0].__r_.__value_.__r.__words[1] + 6) = 3789;
          WORD1(buf[0].__r_.__value_.__r.__words[2]) = 2080;
          *(std::string::size_type *)((char *)&buf[0].__r_.__value_.__r.__words[2] + 4) = (std::string::size_type)"CL";
          WORD2(buf[1].__r_.__value_.__r.__words[0]) = 1024;
          *(_DWORD *)((char *)buf[1].__r_.__value_.__r.__words + 6) = v629;
          _os_log_impl(&dword_1B5ED0000, v651, OS_LOG_TYPE_DEBUG, "%25s:%-5d Successfully parsed the %s plist entry for channel %i.", (uint8_t *)buf, 0x22u);
        }
        goto LABEL_1449;
      }
      v651 = *v650;
      if (*v650)
        goto LABEL_1447;
LABEL_1449:
      if (v1278.__first_)
        CFRelease(v1278.__first_);
      if (cfa.__r_.__value_.__r.__words[0])
        CFRelease(cfa.__r_.__value_.__l.__data_);
      ++v629;
    }
    while (v629 != v628);
  }
  if (v1270.__r_.__value_.__r.__words[0])
    CFRelease(v1270.__r_.__value_.__l.__data_);
  v652 = (NSObject **)spp3Subsystem();
  if (!v652)
  {
    v653 = MEMORY[0x1E0C81028];
LABEL_1460:
    if (os_log_type_enabled(v653, OS_LOG_TYPE_INFO))
    {
      LODWORD(buf[0].__r_.__value_.__l.__data_) = 136315650;
      *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)"AUSpeakerProtectionV3.cpp";
      WORD2(buf[0].__r_.__value_.__r.__words[1]) = 1024;
      *(_DWORD *)((char *)&buf[0].__r_.__value_.__r.__words[1] + 6) = 3895;
      WORD1(buf[0].__r_.__value_.__r.__words[2]) = 2048;
      *(std::string::size_type *)((char *)&buf[0].__r_.__value_.__r.__words[2] + 4) = (uint64_t)(v1264.__r_.__value_.__l.__size_
                                                                                              - v1264.__r_.__value_.__r.__words[0]) >> 4;
      _os_log_impl(&dword_1B5ED0000, v653, OS_LOG_TYPE_INFO, "%25s:%-5d Successfully parsed all %lu ClosedLoopParameters structures.", (uint8_t *)buf, 0x1Cu);
    }
    goto LABEL_1462;
  }
  v653 = *v652;
  if (*v652)
    goto LABEL_1460;
LABEL_1462:
  if (v572 == v571)
    goto LABEL_1821;
  v654 = v572;
  do
  {
    v655 = (NSObject **)spp3Subsystem();
    if (v655)
    {
      v656 = *v655;
      if (!*v655)
        goto LABEL_1734;
    }
    else
    {
      v656 = MEMORY[0x1E0C81028];
    }
    if (!os_log_type_enabled(v656, OS_LOG_TYPE_DEBUG))
      goto LABEL_1734;
    v657 = *v654;
    *(_OWORD *)&buf[0].__r_.__value_.__l.__data_ = *(_OWORD *)(v654 + 1);
    v658 = *(_OWORD *)(v654 + 5);
    v659 = *(_OWORD *)(v654 + 9);
    v660 = *(_OWORD *)(v654 + 17);
    v1273 = *(_OWORD *)(v654 + 13);
    v1274 = v660;
    *(_OWORD *)&buf[0].__r_.__value_.__r.__words[2] = v658;
    *(_OWORD *)&buf[1].__r_.__value_.__r.__words[1] = v659;
    v661 = *(_OWORD *)(v654 + 21);
    v662 = *(_OWORD *)(v654 + 25);
    v663 = *(_OWORD *)(v654 + 29);
    *(_OWORD *)&v1276[12] = *((_OWORD *)v654 + 8);
    v1275[1] = v662;
    *(_OWORD *)v1276 = v663;
    v1275[0] = v661;
    std::string::basic_string[abi:ne180100]<0>(&v1258, "TempSenseWindowTime");
    v664 = std::string::append(&v1258, ": ", 2uLL);
    v665 = *(_OWORD *)&v664->__r_.__value_.__l.__data_;
    v1259.__r_.__value_.__r.__words[2] = v664->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v1259.__r_.__value_.__l.__data_ = v665;
    v664->__r_.__value_.__l.__size_ = 0;
    v664->__r_.__value_.__r.__words[2] = 0;
    v664->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v1261, *(float *)&buf[0].__r_.__value_.__l.__data_);
    while ((SHIBYTE(v1261.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      if (*(&v1260 + HIBYTE(v1261.__r_.__value_.__r.__words[2])) != 48)
        goto LABEL_1476;
      v666 = HIBYTE(v1261.__r_.__value_.__r.__words[2]) - 1;
      *((_BYTE *)&v1261.__r_.__value_.__s + 23) = (*((_BYTE *)&v1261.__r_.__value_.__s + 23) - 1) & 0x7F;
      v667 = &v1261;
LABEL_1475:
      v667->__r_.__value_.__s.__data_[v666] = 0;
    }
    v667 = (std::string *)v1261.__r_.__value_.__r.__words[0];
    if (*(_BYTE *)(v1261.__r_.__value_.__r.__words[0] + v1261.__r_.__value_.__l.__size_ - 1) == 48)
    {
      v666 = --v1261.__r_.__value_.__l.__size_;
      goto LABEL_1475;
    }
LABEL_1476:
    cfa = v1261;
    memset(&v1261, 0, sizeof(v1261));
    while ((SHIBYTE(cfa.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      if (*((_BYTE *)&v1234 + HIBYTE(cfa.__r_.__value_.__r.__words[2]) + 7) != 46)
        goto LABEL_1483;
      v668 = HIBYTE(cfa.__r_.__value_.__r.__words[2]) - 1;
      *((_BYTE *)&cfa.__r_.__value_.__s + 23) = (*((_BYTE *)&cfa.__r_.__value_.__s + 23) - 1) & 0x7F;
      v669 = &cfa;
LABEL_1482:
      v669->__r_.__value_.__s.__data_[v668] = 0;
    }
    v669 = (std::string *)cfa.__r_.__value_.__r.__words[0];
    if (*(_BYTE *)(cfa.__r_.__value_.__r.__words[0] + cfa.__r_.__value_.__l.__size_ - 1) == 46)
    {
      v668 = --cfa.__r_.__value_.__l.__size_;
      goto LABEL_1482;
    }
LABEL_1483:
    *(std::string *)v1271 = cfa;
    if (SHIBYTE(v1261.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v1261.__r_.__value_.__l.__data_);
    if (v1271[23] >= 0)
      v670 = v1271;
    else
      v670 = *(const std::string::value_type **)v1271;
    if (v1271[23] >= 0)
      v671 = v1271[23];
    else
      v671 = *(_QWORD *)&v1271[8];
    v672 = std::string::append(&v1259, v670, v671);
    v673 = *(_OWORD *)&v672->__r_.__value_.__l.__data_;
    v1256.__r_.__value_.__r.__words[2] = v672->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v1256.__r_.__value_.__l.__data_ = v673;
    v672->__r_.__value_.__l.__size_ = 0;
    v672->__r_.__value_.__r.__words[2] = 0;
    v672->__r_.__value_.__r.__words[0] = 0;
    if ((v1271[23] & 0x80000000) != 0)
      operator delete(*(void **)v1271);
    if (SHIBYTE(v1259.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v1259.__r_.__value_.__l.__data_);
    if (SHIBYTE(v1258.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v1258.__r_.__value_.__l.__data_);
    v674 = std::string::append(&v1256, ",\n", 2uLL);
    v675 = *(_OWORD *)&v674->__r_.__value_.__l.__data_;
    v1257.__r_.__value_.__r.__words[2] = v674->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v1257.__r_.__value_.__l.__data_ = v675;
    v674->__r_.__value_.__l.__size_ = 0;
    v674->__r_.__value_.__r.__words[2] = 0;
    v674->__r_.__value_.__r.__words[0] = 0;
    clsp::ScopedParamStruct<clsp::plistV9::TempSenseSmoothingTau,clsp::plistV9::TlimErrDecayTime,clsp::plistV9::PilotAmplHi_dB,clsp::plistV9::PilotAmplLo_dB,clsp::plistV9::PilotUpperThres,clsp::plistV9::PilotLowerThres,clsp::plistV9::PilotDecayTime,clsp::plistV9::PilotFreq,clsp::plistV9::LPMLSPreGain,clsp::plistV9::LPMLSPostGain,clsp::plistV9::LPMLSLowerCorner,clsp::plistV9::ThermalMeasurementMethod,clsp::plistV9::DisplacementProtectionType>::toString(&cfa, (uint64_t)buf[0].__r_.__value_.__r.__words + 4);
    if ((cfa.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v676 = &cfa;
    else
      v676 = (std::string *)cfa.__r_.__value_.__r.__words[0];
    if ((cfa.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v677 = HIBYTE(cfa.__r_.__value_.__r.__words[2]);
    else
      v677 = cfa.__r_.__value_.__l.__size_;
    v678 = std::string::append(&v1257, (const std::string::value_type *)v676, v677);
    v679 = *(_OWORD *)&v678->__r_.__value_.__l.__data_;
    v1247.__r_.__value_.__r.__words[2] = v678->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v1247.__r_.__value_.__l.__data_ = v679;
    v678->__r_.__value_.__l.__size_ = 0;
    v678->__r_.__value_.__r.__words[2] = 0;
    v678->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(cfa.__r_.__value_.__r.__words[2]) < 0)
      operator delete(cfa.__r_.__value_.__l.__data_);
    if (SHIBYTE(v1257.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v1257.__r_.__value_.__l.__data_);
    if (SHIBYTE(v1256.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v1256.__r_.__value_.__l.__data_);
    v680 = v1276[24];
    if (!v1276[24])
    {
      std::string::basic_string[abi:ne180100]<0>(&v1265, "");
      goto LABEL_1712;
    }
    std::string::basic_string[abi:ne180100]<0>(&v1258, "ConvoyMinExcursion");
    v681 = std::string::append(&v1258, ": ", 2uLL);
    v682 = *(_OWORD *)&v681->__r_.__value_.__l.__data_;
    v1259.__r_.__value_.__r.__words[2] = v681->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v1259.__r_.__value_.__l.__data_ = v682;
    v681->__r_.__value_.__l.__size_ = 0;
    v681->__r_.__value_.__r.__words[2] = 0;
    v681->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v1261, *((float *)&v1274 + 1));
    while (2)
    {
      if ((SHIBYTE(v1261.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
        if (*(&v1260 + HIBYTE(v1261.__r_.__value_.__r.__words[2])) != 48)
          break;
        v683 = HIBYTE(v1261.__r_.__value_.__r.__words[2]) - 1;
        *((_BYTE *)&v1261.__r_.__value_.__s + 23) = (*((_BYTE *)&v1261.__r_.__value_.__s + 23) - 1) & 0x7F;
        v684 = &v1261;
        goto LABEL_1516;
      }
      v684 = (std::string *)v1261.__r_.__value_.__r.__words[0];
      if (*(_BYTE *)(v1261.__r_.__value_.__r.__words[0] + v1261.__r_.__value_.__l.__size_ - 1) == 48)
      {
        v683 = --v1261.__r_.__value_.__l.__size_;
LABEL_1516:
        v684->__r_.__value_.__s.__data_[v683] = 0;
        continue;
      }
      break;
    }
    cfa = v1261;
    memset(&v1261, 0, sizeof(v1261));
    while (2)
    {
      if ((SHIBYTE(cfa.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
        if (*((_BYTE *)&v1234 + HIBYTE(cfa.__r_.__value_.__r.__words[2]) + 7) != 46)
          break;
        v685 = HIBYTE(cfa.__r_.__value_.__r.__words[2]) - 1;
        *((_BYTE *)&cfa.__r_.__value_.__s + 23) = (*((_BYTE *)&cfa.__r_.__value_.__s + 23) - 1) & 0x7F;
        v686 = &cfa;
        goto LABEL_1523;
      }
      v686 = (std::string *)cfa.__r_.__value_.__r.__words[0];
      if (*(_BYTE *)(cfa.__r_.__value_.__r.__words[0] + cfa.__r_.__value_.__l.__size_ - 1) == 46)
      {
        v685 = --cfa.__r_.__value_.__l.__size_;
LABEL_1523:
        v686->__r_.__value_.__s.__data_[v685] = 0;
        continue;
      }
      break;
    }
    *(std::string *)v1271 = cfa;
    if (SHIBYTE(v1261.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v1261.__r_.__value_.__l.__data_);
    if (v1271[23] >= 0)
      v687 = v1271;
    else
      v687 = *(const std::string::value_type **)v1271;
    if (v1271[23] >= 0)
      v688 = v1271[23];
    else
      v688 = *(_QWORD *)&v1271[8];
    v689 = std::string::append(&v1259, v687, v688);
    v690 = *(_OWORD *)&v689->__r_.__value_.__l.__data_;
    v1248.__r_.__value_.__r.__words[2] = v689->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v1248.__r_.__value_.__l.__data_ = v690;
    v689->__r_.__value_.__l.__size_ = 0;
    v689->__r_.__value_.__r.__words[2] = 0;
    v689->__r_.__value_.__r.__words[0] = 0;
    if ((v1271[23] & 0x80000000) != 0)
      operator delete(*(void **)v1271);
    if (SHIBYTE(v1259.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v1259.__r_.__value_.__l.__data_);
    if (SHIBYTE(v1258.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v1258.__r_.__value_.__l.__data_);
    v691 = std::string::append(&v1248, ",\n", 2uLL);
    v692 = *(_OWORD *)&v691->__r_.__value_.__l.__data_;
    v1249.__r_.__value_.__r.__words[2] = v691->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v1249.__r_.__value_.__l.__data_ = v692;
    v691->__r_.__value_.__l.__size_ = 0;
    v691->__r_.__value_.__r.__words[2] = 0;
    v691->__r_.__value_.__r.__words[0] = 0;
    std::string::basic_string[abi:ne180100]<0>(&v1258, "ConvoyMaxExcursion");
    v693 = std::string::append(&v1258, ": ", 2uLL);
    v694 = *(_OWORD *)&v693->__r_.__value_.__l.__data_;
    v1259.__r_.__value_.__r.__words[2] = v693->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v1259.__r_.__value_.__l.__data_ = v694;
    v693->__r_.__value_.__l.__size_ = 0;
    v693->__r_.__value_.__r.__words[2] = 0;
    v693->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v1261, *((float *)&v1274 + 2));
    while (2)
    {
      if ((SHIBYTE(v1261.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
        if (*(&v1260 + HIBYTE(v1261.__r_.__value_.__r.__words[2])) != 48)
          break;
        v695 = HIBYTE(v1261.__r_.__value_.__r.__words[2]) - 1;
        *((_BYTE *)&v1261.__r_.__value_.__s + 23) = (*((_BYTE *)&v1261.__r_.__value_.__s + 23) - 1) & 0x7F;
        v696 = &v1261;
        goto LABEL_1544;
      }
      v696 = (std::string *)v1261.__r_.__value_.__r.__words[0];
      if (*(_BYTE *)(v1261.__r_.__value_.__r.__words[0] + v1261.__r_.__value_.__l.__size_ - 1) == 48)
      {
        v695 = --v1261.__r_.__value_.__l.__size_;
LABEL_1544:
        v696->__r_.__value_.__s.__data_[v695] = 0;
        continue;
      }
      break;
    }
    cfa = v1261;
    memset(&v1261, 0, sizeof(v1261));
    while (2)
    {
      if ((SHIBYTE(cfa.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
        if (*((_BYTE *)&v1234 + HIBYTE(cfa.__r_.__value_.__r.__words[2]) + 7) != 46)
          break;
        v697 = HIBYTE(cfa.__r_.__value_.__r.__words[2]) - 1;
        *((_BYTE *)&cfa.__r_.__value_.__s + 23) = (*((_BYTE *)&cfa.__r_.__value_.__s + 23) - 1) & 0x7F;
        v698 = &cfa;
        goto LABEL_1551;
      }
      v698 = (std::string *)cfa.__r_.__value_.__r.__words[0];
      if (*(_BYTE *)(cfa.__r_.__value_.__r.__words[0] + cfa.__r_.__value_.__l.__size_ - 1) == 46)
      {
        v697 = --cfa.__r_.__value_.__l.__size_;
LABEL_1551:
        v698->__r_.__value_.__s.__data_[v697] = 0;
        continue;
      }
      break;
    }
    *(std::string *)v1271 = cfa;
    if (SHIBYTE(v1261.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v1261.__r_.__value_.__l.__data_);
    if (v1271[23] >= 0)
      v699 = v1271;
    else
      v699 = *(const std::string::value_type **)v1271;
    if (v1271[23] >= 0)
      v700 = v1271[23];
    else
      v700 = *(_QWORD *)&v1271[8];
    v701 = std::string::append(&v1259, v699, v700);
    v702 = *(_OWORD *)&v701->__r_.__value_.__l.__data_;
    v1250.__r_.__value_.__r.__words[2] = v701->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v1250.__r_.__value_.__l.__data_ = v702;
    v701->__r_.__value_.__l.__size_ = 0;
    v701->__r_.__value_.__r.__words[2] = 0;
    v701->__r_.__value_.__r.__words[0] = 0;
    if ((v1271[23] & 0x80000000) != 0)
      operator delete(*(void **)v1271);
    if (SHIBYTE(v1259.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v1259.__r_.__value_.__l.__data_);
    if (SHIBYTE(v1258.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v1258.__r_.__value_.__l.__data_);
    v703 = std::string::append(&v1250, ",\n", 2uLL);
    v704 = *(_OWORD *)&v703->__r_.__value_.__l.__data_;
    v1251.__r_.__value_.__r.__words[2] = v703->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v1251.__r_.__value_.__l.__data_ = v704;
    v703->__r_.__value_.__l.__size_ = 0;
    v703->__r_.__value_.__r.__words[2] = 0;
    v703->__r_.__value_.__r.__words[0] = 0;
    std::string::basic_string[abi:ne180100]<0>(&v1258, "ConvoyPeakFinderThresholdUpper");
    v705 = std::string::append(&v1258, ": ", 2uLL);
    v706 = *(_OWORD *)&v705->__r_.__value_.__l.__data_;
    v1259.__r_.__value_.__r.__words[2] = v705->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v1259.__r_.__value_.__l.__data_ = v706;
    v705->__r_.__value_.__l.__size_ = 0;
    v705->__r_.__value_.__r.__words[2] = 0;
    v705->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v1261, *((float *)&v1274 + 3));
    while (2)
    {
      if ((SHIBYTE(v1261.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
        if (*(&v1260 + HIBYTE(v1261.__r_.__value_.__r.__words[2])) != 48)
          break;
        v707 = HIBYTE(v1261.__r_.__value_.__r.__words[2]) - 1;
        *((_BYTE *)&v1261.__r_.__value_.__s + 23) = (*((_BYTE *)&v1261.__r_.__value_.__s + 23) - 1) & 0x7F;
        v708 = &v1261;
        goto LABEL_1572;
      }
      v708 = (std::string *)v1261.__r_.__value_.__r.__words[0];
      if (*(_BYTE *)(v1261.__r_.__value_.__r.__words[0] + v1261.__r_.__value_.__l.__size_ - 1) == 48)
      {
        v707 = --v1261.__r_.__value_.__l.__size_;
LABEL_1572:
        v708->__r_.__value_.__s.__data_[v707] = 0;
        continue;
      }
      break;
    }
    cfa = v1261;
    memset(&v1261, 0, sizeof(v1261));
    while (2)
    {
      if ((SHIBYTE(cfa.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
        if (*((_BYTE *)&v1234 + HIBYTE(cfa.__r_.__value_.__r.__words[2]) + 7) != 46)
          break;
        v709 = HIBYTE(cfa.__r_.__value_.__r.__words[2]) - 1;
        *((_BYTE *)&cfa.__r_.__value_.__s + 23) = (*((_BYTE *)&cfa.__r_.__value_.__s + 23) - 1) & 0x7F;
        v710 = &cfa;
        goto LABEL_1579;
      }
      v710 = (std::string *)cfa.__r_.__value_.__r.__words[0];
      if (*(_BYTE *)(cfa.__r_.__value_.__r.__words[0] + cfa.__r_.__value_.__l.__size_ - 1) == 46)
      {
        v709 = --cfa.__r_.__value_.__l.__size_;
LABEL_1579:
        v710->__r_.__value_.__s.__data_[v709] = 0;
        continue;
      }
      break;
    }
    *(std::string *)v1271 = cfa;
    if (SHIBYTE(v1261.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v1261.__r_.__value_.__l.__data_);
    if (v1271[23] >= 0)
      v711 = v1271;
    else
      v711 = *(const std::string::value_type **)v1271;
    if (v1271[23] >= 0)
      v712 = v1271[23];
    else
      v712 = *(_QWORD *)&v1271[8];
    v713 = std::string::append(&v1259, v711, v712);
    v714 = *(_OWORD *)&v713->__r_.__value_.__l.__data_;
    v1252.__r_.__value_.__r.__words[2] = v713->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v1252.__r_.__value_.__l.__data_ = v714;
    v713->__r_.__value_.__l.__size_ = 0;
    v713->__r_.__value_.__r.__words[2] = 0;
    v713->__r_.__value_.__r.__words[0] = 0;
    if ((v1271[23] & 0x80000000) != 0)
      operator delete(*(void **)v1271);
    if (SHIBYTE(v1259.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v1259.__r_.__value_.__l.__data_);
    if (SHIBYTE(v1258.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v1258.__r_.__value_.__l.__data_);
    v715 = std::string::append(&v1252, ",\n", 2uLL);
    v716 = *(_OWORD *)&v715->__r_.__value_.__l.__data_;
    v1253.__r_.__value_.__r.__words[2] = v715->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v1253.__r_.__value_.__l.__data_ = v716;
    v715->__r_.__value_.__l.__size_ = 0;
    v715->__r_.__value_.__r.__words[2] = 0;
    v715->__r_.__value_.__r.__words[0] = 0;
    std::string::basic_string[abi:ne180100]<0>(&v1258, "ConvoyPeakFinderThresholdLower");
    v717 = std::string::append(&v1258, ": ", 2uLL);
    v718 = *(_OWORD *)&v717->__r_.__value_.__l.__data_;
    v1259.__r_.__value_.__r.__words[2] = v717->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v1259.__r_.__value_.__l.__data_ = v718;
    v717->__r_.__value_.__l.__size_ = 0;
    v717->__r_.__value_.__r.__words[2] = 0;
    v717->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v1261, *(float *)v1275);
    while (2)
    {
      if ((SHIBYTE(v1261.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
        if (*(&v1260 + HIBYTE(v1261.__r_.__value_.__r.__words[2])) != 48)
          break;
        v719 = HIBYTE(v1261.__r_.__value_.__r.__words[2]) - 1;
        *((_BYTE *)&v1261.__r_.__value_.__s + 23) = (*((_BYTE *)&v1261.__r_.__value_.__s + 23) - 1) & 0x7F;
        v720 = &v1261;
        goto LABEL_1600;
      }
      v720 = (std::string *)v1261.__r_.__value_.__r.__words[0];
      if (*(_BYTE *)(v1261.__r_.__value_.__r.__words[0] + v1261.__r_.__value_.__l.__size_ - 1) == 48)
      {
        v719 = --v1261.__r_.__value_.__l.__size_;
LABEL_1600:
        v720->__r_.__value_.__s.__data_[v719] = 0;
        continue;
      }
      break;
    }
    cfa = v1261;
    memset(&v1261, 0, sizeof(v1261));
    while (2)
    {
      if ((SHIBYTE(cfa.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
        if (*((_BYTE *)&v1234 + HIBYTE(cfa.__r_.__value_.__r.__words[2]) + 7) != 46)
          break;
        v721 = HIBYTE(cfa.__r_.__value_.__r.__words[2]) - 1;
        *((_BYTE *)&cfa.__r_.__value_.__s + 23) = (*((_BYTE *)&cfa.__r_.__value_.__s + 23) - 1) & 0x7F;
        v722 = &cfa;
        goto LABEL_1607;
      }
      v722 = (std::string *)cfa.__r_.__value_.__r.__words[0];
      if (*(_BYTE *)(cfa.__r_.__value_.__r.__words[0] + cfa.__r_.__value_.__l.__size_ - 1) == 46)
      {
        v721 = --cfa.__r_.__value_.__l.__size_;
LABEL_1607:
        v722->__r_.__value_.__s.__data_[v721] = 0;
        continue;
      }
      break;
    }
    *(std::string *)v1271 = cfa;
    if (SHIBYTE(v1261.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v1261.__r_.__value_.__l.__data_);
    if (v1271[23] >= 0)
      v723 = v1271;
    else
      v723 = *(const std::string::value_type **)v1271;
    if (v1271[23] >= 0)
      v724 = v1271[23];
    else
      v724 = *(_QWORD *)&v1271[8];
    v725 = std::string::append(&v1259, v723, v724);
    v726 = *(_OWORD *)&v725->__r_.__value_.__l.__data_;
    v1254.__r_.__value_.__r.__words[2] = v725->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v1254.__r_.__value_.__l.__data_ = v726;
    v725->__r_.__value_.__l.__size_ = 0;
    v725->__r_.__value_.__r.__words[2] = 0;
    v725->__r_.__value_.__r.__words[0] = 0;
    if ((v1271[23] & 0x80000000) != 0)
      operator delete(*(void **)v1271);
    if (SHIBYTE(v1259.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v1259.__r_.__value_.__l.__data_);
    if (SHIBYTE(v1258.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v1258.__r_.__value_.__l.__data_);
    v727 = std::string::append(&v1254, ",\n", 2uLL);
    v728 = *(_OWORD *)&v727->__r_.__value_.__l.__data_;
    v1255.__r_.__value_.__r.__words[2] = v727->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v1255.__r_.__value_.__l.__data_ = v728;
    v727->__r_.__value_.__l.__size_ = 0;
    v727->__r_.__value_.__r.__words[2] = 0;
    v727->__r_.__value_.__r.__words[0] = 0;
    std::string::basic_string[abi:ne180100]<0>(&v1258, "ConvoyNormFactorCapUpper");
    v729 = std::string::append(&v1258, ": ", 2uLL);
    v730 = *(_OWORD *)&v729->__r_.__value_.__l.__data_;
    v1259.__r_.__value_.__r.__words[2] = v729->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v1259.__r_.__value_.__l.__data_ = v730;
    v729->__r_.__value_.__l.__size_ = 0;
    v729->__r_.__value_.__r.__words[2] = 0;
    v729->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v1261, *((float *)v1275 + 1));
    while (2)
    {
      if ((SHIBYTE(v1261.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
        if (*(&v1260 + HIBYTE(v1261.__r_.__value_.__r.__words[2])) != 48)
          break;
        v731 = HIBYTE(v1261.__r_.__value_.__r.__words[2]) - 1;
        *((_BYTE *)&v1261.__r_.__value_.__s + 23) = (*((_BYTE *)&v1261.__r_.__value_.__s + 23) - 1) & 0x7F;
        v732 = &v1261;
        goto LABEL_1628;
      }
      v732 = (std::string *)v1261.__r_.__value_.__r.__words[0];
      if (*(_BYTE *)(v1261.__r_.__value_.__r.__words[0] + v1261.__r_.__value_.__l.__size_ - 1) == 48)
      {
        v731 = --v1261.__r_.__value_.__l.__size_;
LABEL_1628:
        v732->__r_.__value_.__s.__data_[v731] = 0;
        continue;
      }
      break;
    }
    cfa = v1261;
    memset(&v1261, 0, sizeof(v1261));
    while (2)
    {
      if ((SHIBYTE(cfa.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
        if (*((_BYTE *)&v1234 + HIBYTE(cfa.__r_.__value_.__r.__words[2]) + 7) != 46)
          break;
        v733 = HIBYTE(cfa.__r_.__value_.__r.__words[2]) - 1;
        *((_BYTE *)&cfa.__r_.__value_.__s + 23) = (*((_BYTE *)&cfa.__r_.__value_.__s + 23) - 1) & 0x7F;
        v734 = &cfa;
        goto LABEL_1635;
      }
      v734 = (std::string *)cfa.__r_.__value_.__r.__words[0];
      if (*(_BYTE *)(cfa.__r_.__value_.__r.__words[0] + cfa.__r_.__value_.__l.__size_ - 1) == 46)
      {
        v733 = --cfa.__r_.__value_.__l.__size_;
LABEL_1635:
        v734->__r_.__value_.__s.__data_[v733] = 0;
        continue;
      }
      break;
    }
    *(std::string *)v1271 = cfa;
    if (SHIBYTE(v1261.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v1261.__r_.__value_.__l.__data_);
    if (v1271[23] >= 0)
      v735 = v1271;
    else
      v735 = *(const std::string::value_type **)v1271;
    if (v1271[23] >= 0)
      v736 = v1271[23];
    else
      v736 = *(_QWORD *)&v1271[8];
    v737 = std::string::append(&v1259, v735, v736);
    v738 = *(_OWORD *)&v737->__r_.__value_.__l.__data_;
    v1256.__r_.__value_.__r.__words[2] = v737->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v1256.__r_.__value_.__l.__data_ = v738;
    v737->__r_.__value_.__l.__size_ = 0;
    v737->__r_.__value_.__r.__words[2] = 0;
    v737->__r_.__value_.__r.__words[0] = 0;
    if ((v1271[23] & 0x80000000) != 0)
      operator delete(*(void **)v1271);
    if (SHIBYTE(v1259.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v1259.__r_.__value_.__l.__data_);
    if (SHIBYTE(v1258.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v1258.__r_.__value_.__l.__data_);
    v739 = std::string::append(&v1256, ",\n", 2uLL);
    v740 = *(_OWORD *)&v739->__r_.__value_.__l.__data_;
    v1257.__r_.__value_.__r.__words[2] = v739->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v1257.__r_.__value_.__l.__data_ = v740;
    v739->__r_.__value_.__l.__size_ = 0;
    v739->__r_.__value_.__r.__words[2] = 0;
    v739->__r_.__value_.__r.__words[0] = 0;
    clsp::ScopedParamStruct<clsp::plistV9::ConvoyNormFactorCapLower,clsp::plistV9::ConvoyPeakRatioPosBlockThreshold,clsp::plistV9::ConvoyPeakRatioNegBlockThreshold,clsp::plistV9::ConvoyRelXLimUpper,clsp::plistV9::ConvoyRelXLimLower,clsp::plistV9::ConvoyNormFactorAttack,clsp::plistV9::ConvoyNormFactorRelease,clsp::plistV9::ConvoyPeakDetectorAtkTime,clsp::plistV9::ConvoyPeakDetectorRelTime,clsp::plistV9::ConvoyPeakRatiosInWindowCountThreshold,clsp::plistV9::ConvoyNormFactorThreshold,clsp::plistV9::ConvoyBufferDirtyCountThreshold_ms>::toString(&cfa, (float *)v1275 + 2);
    if ((cfa.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v741 = &cfa;
    else
      v741 = (std::string *)cfa.__r_.__value_.__r.__words[0];
    if ((cfa.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v742 = HIBYTE(cfa.__r_.__value_.__r.__words[2]);
    else
      v742 = cfa.__r_.__value_.__l.__size_;
    v743 = std::string::append(&v1257, (const std::string::value_type *)v741, v742);
    v744 = *(_OWORD *)&v743->__r_.__value_.__l.__data_;
    v1270.__r_.__value_.__r.__words[2] = v743->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v1270.__r_.__value_.__l.__data_ = v744;
    v743->__r_.__value_.__l.__size_ = 0;
    v743->__r_.__value_.__r.__words[2] = 0;
    v743->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(cfa.__r_.__value_.__r.__words[2]) < 0)
      operator delete(cfa.__r_.__value_.__l.__data_);
    if (SHIBYTE(v1257.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v1257.__r_.__value_.__l.__data_);
    if (SHIBYTE(v1256.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v1256.__r_.__value_.__l.__data_);
    if ((v1270.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v745 = &v1270;
    else
      v745 = (std::string *)v1270.__r_.__value_.__r.__words[0];
    if ((v1270.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v746 = HIBYTE(v1270.__r_.__value_.__r.__words[2]);
    else
      v746 = v1270.__r_.__value_.__l.__size_;
    v747 = std::string::append(&v1255, (const std::string::value_type *)v745, v746);
    v748 = *(_OWORD *)&v747->__r_.__value_.__l.__data_;
    end = (std::__split_buffer<std::string>::pointer)v747->__r_.__value_.__r.__words[2];
    v1268 = v748;
    v747->__r_.__value_.__l.__size_ = 0;
    v747->__r_.__value_.__r.__words[2] = 0;
    v747->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v1270.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v1270.__r_.__value_.__l.__data_);
    if (SHIBYTE(v1255.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v1255.__r_.__value_.__l.__data_);
    if (SHIBYTE(v1254.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v1254.__r_.__value_.__l.__data_);
    if (SHIBYTE(end) >= 0)
      v749 = (const std::string::value_type *)&v1268;
    else
      v749 = (const std::string::value_type *)v1268;
    if (SHIBYTE(end) >= 0)
      v750 = HIBYTE(end);
    else
      v750 = *((_QWORD *)&v1268 + 1);
    v751 = std::string::append(&v1253, v749, v750);
    v752 = *(_OWORD *)&v751->__r_.__value_.__l.__data_;
    v1267.__r_.__value_.__r.__words[2] = v751->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v1267.__r_.__value_.__l.__data_ = v752;
    v751->__r_.__value_.__l.__size_ = 0;
    v751->__r_.__value_.__r.__words[2] = 0;
    v751->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(end) < 0)
      operator delete((void *)v1268);
    if (SHIBYTE(v1253.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v1253.__r_.__value_.__l.__data_);
    if (SHIBYTE(v1252.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v1252.__r_.__value_.__l.__data_);
    if ((v1267.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v753 = &v1267;
    else
      v753 = (std::string *)v1267.__r_.__value_.__r.__words[0];
    if ((v1267.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v754 = HIBYTE(v1267.__r_.__value_.__r.__words[2]);
    else
      v754 = v1267.__r_.__value_.__l.__size_;
    v755 = std::string::append(&v1251, (const std::string::value_type *)v753, v754);
    v756 = *(_OWORD *)&v755->__r_.__value_.__l.__data_;
    v1266.__r_.__value_.__r.__words[2] = v755->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v1266.__r_.__value_.__l.__data_ = v756;
    v755->__r_.__value_.__l.__size_ = 0;
    v755->__r_.__value_.__r.__words[2] = 0;
    v755->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v1267.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v1267.__r_.__value_.__l.__data_);
    if (SHIBYTE(v1251.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v1251.__r_.__value_.__l.__data_);
    if (SHIBYTE(v1250.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v1250.__r_.__value_.__l.__data_);
    if ((v1266.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v757 = &v1266;
    else
      v757 = (std::string *)v1266.__r_.__value_.__r.__words[0];
    if ((v1266.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v758 = HIBYTE(v1266.__r_.__value_.__r.__words[2]);
    else
      v758 = v1266.__r_.__value_.__l.__size_;
    v759 = std::string::append(&v1249, (const std::string::value_type *)v757, v758);
    v760 = *(_OWORD *)&v759->__r_.__value_.__l.__data_;
    v1246.__r_.__value_.__r.__words[2] = v759->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v1246.__r_.__value_.__l.__data_ = v760;
    v759->__r_.__value_.__l.__size_ = 0;
    v759->__r_.__value_.__r.__words[2] = 0;
    v759->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v1266.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v1266.__r_.__value_.__l.__data_);
    if (SHIBYTE(v1249.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v1249.__r_.__value_.__l.__data_);
    if (SHIBYTE(v1248.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v1248.__r_.__value_.__l.__data_);
    v761 = std::string::insert(&v1246, 0, "\n", 1uLL);
    v762 = *(_OWORD *)&v761->__r_.__value_.__l.__data_;
    v1265.__r_.__value_.__r.__words[2] = v761->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v1265.__r_.__value_.__l.__data_ = v762;
    v761->__r_.__value_.__l.__size_ = 0;
    v761->__r_.__value_.__r.__words[2] = 0;
    v761->__r_.__value_.__r.__words[0] = 0;
LABEL_1712:
    if ((v1265.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v763 = &v1265;
    else
      v763 = (std::string *)v1265.__r_.__value_.__r.__words[0];
    if ((v1265.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v764 = HIBYTE(v1265.__r_.__value_.__r.__words[2]);
    else
      v764 = v1265.__r_.__value_.__l.__size_;
    v765 = std::string::append(&v1247, (const std::string::value_type *)v763, v764);
    v1262 = *v765;
    v765->__r_.__value_.__l.__size_ = 0;
    v765->__r_.__value_.__r.__words[2] = 0;
    v765->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v1265.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v1265.__r_.__value_.__l.__data_);
      if (!v680)
        goto LABEL_1724;
    }
    else if (!v680)
    {
      goto LABEL_1724;
    }
    if (SHIBYTE(v1246.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v1246.__r_.__value_.__l.__data_);
LABEL_1724:
    if (SHIBYTE(v1247.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v1247.__r_.__value_.__l.__data_);
    AUT::ReplaceAll(&cfa, (uint64_t)&v1262, "\n", 1, "\n  ┣ ", 7uLL);
    v766 = std::string::insert(&cfa, 0, "\n  ┏ ", 7uLL);
    v767 = *(_OWORD *)&v766->__r_.__value_.__l.__data_;
    v1263.__r_.__value_.__r.__words[2] = v766->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v1263.__r_.__value_.__l.__data_ = v767;
    v766->__r_.__value_.__l.__size_ = 0;
    v766->__r_.__value_.__r.__words[2] = 0;
    v766->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(cfa.__r_.__value_.__r.__words[2]) < 0)
      operator delete(cfa.__r_.__value_.__l.__data_);
    v768 = &v1263;
    if ((v1263.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v768 = (std::string *)v1263.__r_.__value_.__r.__words[0];
    LODWORD(v1278.__first_) = 136315906;
    *(std::__split_buffer<std::string>::pointer *)((char *)&v1278.__first_ + 4) = (std::__split_buffer<std::string>::pointer)"AUSpeakerProtectionV3.cpp";
    WORD2(v1278.__begin_) = 1024;
    *(_DWORD *)((char *)&v1278.__begin_ + 6) = 3906;
    WORD1(v1278.__end_) = 1024;
    HIDWORD(v1278.__end_) = v657;
    LOWORD(v1278.__end_cap_.__value_) = 2080;
    *(std::string **)((char *)&v1278.__end_cap_.__value_ + 2) = v768;
    _os_log_impl(&dword_1B5ED0000, v656, OS_LOG_TYPE_DEBUG, "%25s:%-5d Applying CL params to channel %i:%s", (uint8_t *)&v1278, 0x22u);
    if (SHIBYTE(v1263.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v1263.__r_.__value_.__l.__data_);
    if (SHIBYTE(v1262.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v1262.__r_.__value_.__l.__data_);
LABEL_1734:
    v770 = *((float *)v654 + 1);
    v769 = *((float *)v654 + 2);
    v772 = *((float *)v654 + 3);
    v771 = *((float *)v654 + 4);
    v774 = *((float *)v654 + 5);
    v773 = *((float *)v654 + 6);
    v775 = *((float *)v654 + 7);
    v776 = *((float *)v654 + 8);
    __pb = *((float *)v654 + 9);
    v1224 = *((float *)v654 + 10);
    v1221 = *((float *)v654 + 11);
    v1215 = *((float *)v654 + 12);
    v777 = v654[13];
    v778 = v654[14];
    v1209 = *((float *)v654 + 16);
    __valb = *((float *)v654 + 15);
    v779 = *((unsigned __int8 *)v654 + 68);
    v1204 = *((float *)v654 + 19);
    v1207 = *((float *)v654 + 18);
    v1202 = *((float *)v654 + 20);
    v1196 = *((float *)v654 + 22);
    v1198 = *((float *)v654 + 21);
    v1191 = *((float *)v654 + 24);
    v1193 = *((float *)v654 + 23);
    v1186 = *((float *)v654 + 26);
    v1188 = *((float *)v654 + 25);
    v1183 = *((float *)v654 + 28);
    v1184 = *((float *)v654 + 27);
    v1179 = *((float *)v654 + 30);
    v1181 = *((float *)v654 + 29);
    v1176 = *((float *)v654 + 32);
    v1178 = *((float *)v654 + 31);
    v1174 = *((float *)v654 + 34);
    v1175 = *((float *)v654 + 33);
    v780 = *((unsigned __int8 *)v654 + 140);
    v781 = *v654;
    v782 = *((_QWORD *)this + 104);
    if (v782)
    {
      v783 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)v782 + 32))(v782, v781);
    }
    else
    {
      v784 = *((_QWORD *)this + 101);
      if (v781 >= (*((_QWORD *)this + 102) - v784) >> 3)
        v783 = 0;
      else
        v783 = *(ausdk::AUElement **)(v784 + 8 * v781);
    }
    ausdk::AUElement::SetParameter(v783, 0x18u, v770, 0);
    ausdk::AUElement::SetParameter(v783, 0x19u, v769, 0);
    ausdk::AUElement::SetParameter(v783, 0x17u, v772, 0);
    ausdk::AUElement::SetParameter(v783, 0x1Bu, v771, 0);
    ausdk::AUElement::SetParameter(v783, 0x1Cu, v774, 0);
    ausdk::AUElement::SetParameter(v783, 0x1Du, v773, 0);
    ausdk::AUElement::SetParameter(v783, 0x1Eu, v775, 0);
    ausdk::AUElement::SetParameter(v783, 0x1Fu, v776, 0);
    ausdk::AUElement::SetParameter(v783, 0x20u, __pb, 0);
    ausdk::AUElement::SetParameter(v783, 0x21u, v1224, 0);
    ausdk::AUElement::SetParameter(v783, 0x22u, v1221, 0);
    ausdk::AUElement::SetParameter(v783, 0x23u, v1215, 0);
    ausdk::AUElement::SetParameter(v783, 0x14u, (float)v777, 0);
    ausdk::AUElement::SetParameter(v783, 0x2Au, (float)v778, 0);
    if (v780)
    {
      ausdk::AUElement::SetParameter(v783, 0x39u, v1207, 0);
      ausdk::AUElement::SetParameter(v783, 0x3Au, v1204, 0);
      ausdk::AUElement::SetParameter(v783, 0x2Fu, v1202, 0);
      ausdk::AUElement::SetParameter(v783, 0x30u, v1198, 0);
      ausdk::AUElement::SetParameter(v783, 0x33u, v1196, 0);
      ausdk::AUElement::SetParameter(v783, 0x34u, v1193, 0);
      ausdk::AUElement::SetParameter(v783, 0x37u, v1191, 0);
      ausdk::AUElement::SetParameter(v783, 0x38u, v1188, 0);
      ausdk::AUElement::SetParameter(v783, 0x3Bu, v1186, 0);
      ausdk::AUElement::SetParameter(v783, 0x3Cu, v1184, 0);
      ausdk::AUElement::SetParameter(v783, 0x35u, v1183, 0);
      ausdk::AUElement::SetParameter(v783, 0x36u, v1181, 0);
      ausdk::AUElement::SetParameter(v783, 0x31u, v1179, 0);
      ausdk::AUElement::SetParameter(v783, 0x32u, v1178, 0);
      ausdk::AUElement::SetParameter(v783, 0x3Du, v1176, 0);
      ausdk::AUElement::SetParameter(v783, 0x3Eu, v1175, 0);
      ausdk::AUElement::SetParameter(v783, 0x3Fu, v1174, 0);
    }
    if (!v779)
      goto LABEL_1820;
    v785 = (NSObject **)spp3Subsystem();
    if (v785)
    {
      v786 = *v785;
      if (!*v785)
        goto LABEL_1819;
    }
    else
    {
      v786 = MEMORY[0x1E0C81028];
    }
    if (!os_log_type_enabled(v786, OS_LOG_TYPE_DEFAULT))
      goto LABEL_1819;
    std::string::basic_string[abi:ne180100]<0>(&v1258, "PilotDecayTimeStage2");
    v787 = std::string::append(&v1258, ": ", 2uLL);
    v788 = *(_OWORD *)&v787->__r_.__value_.__l.__data_;
    v1259.__r_.__value_.__r.__words[2] = v787->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v1259.__r_.__value_.__l.__data_ = v788;
    v787->__r_.__value_.__l.__size_ = 0;
    v787->__r_.__value_.__r.__words[2] = 0;
    v787->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v1261, __valb);
    while (2)
    {
      if ((SHIBYTE(v1261.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
        if (*(&v1260 + HIBYTE(v1261.__r_.__value_.__r.__words[2])) != 48)
          break;
        v789 = HIBYTE(v1261.__r_.__value_.__r.__words[2]) - 1;
        *((_BYTE *)&v1261.__r_.__value_.__s + 23) = (*((_BYTE *)&v1261.__r_.__value_.__s + 23) - 1) & 0x7F;
        v790 = &v1261;
        goto LABEL_1753;
      }
      v790 = (std::string *)v1261.__r_.__value_.__r.__words[0];
      if (*(_BYTE *)(v1261.__r_.__value_.__r.__words[0] + v1261.__r_.__value_.__l.__size_ - 1) == 48)
      {
        v789 = --v1261.__r_.__value_.__l.__size_;
LABEL_1753:
        v790->__r_.__value_.__s.__data_[v789] = 0;
        continue;
      }
      break;
    }
    cfa = v1261;
    memset(&v1261, 0, sizeof(v1261));
    while (2)
    {
      if ((SHIBYTE(cfa.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
        if (*((_BYTE *)&v1234 + HIBYTE(cfa.__r_.__value_.__r.__words[2]) + 7) != 46)
          break;
        v791 = HIBYTE(cfa.__r_.__value_.__r.__words[2]) - 1;
        *((_BYTE *)&cfa.__r_.__value_.__s + 23) = (*((_BYTE *)&cfa.__r_.__value_.__s + 23) - 1) & 0x7F;
        v792 = &cfa;
        goto LABEL_1760;
      }
      v792 = (std::string *)cfa.__r_.__value_.__r.__words[0];
      if (*(_BYTE *)(cfa.__r_.__value_.__r.__words[0] + cfa.__r_.__value_.__l.__size_ - 1) == 46)
      {
        v791 = --cfa.__r_.__value_.__l.__size_;
LABEL_1760:
        v792->__r_.__value_.__s.__data_[v791] = 0;
        continue;
      }
      break;
    }
    buf[0] = cfa;
    if (SHIBYTE(v1261.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v1261.__r_.__value_.__l.__data_);
    if ((buf[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v793 = buf;
    else
      v793 = (std::string *)buf[0].__r_.__value_.__r.__words[0];
    if ((buf[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v794 = HIBYTE(buf[0].__r_.__value_.__r.__words[2]);
    else
      v794 = buf[0].__r_.__value_.__l.__size_;
    v795 = std::string::append(&v1259, (const std::string::value_type *)v793, v794);
    v796 = *(_OWORD *)&v795->__r_.__value_.__l.__data_;
    v1256.__r_.__value_.__r.__words[2] = v795->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v1256.__r_.__value_.__l.__data_ = v796;
    v795->__r_.__value_.__l.__size_ = 0;
    v795->__r_.__value_.__r.__words[2] = 0;
    v795->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(buf[0].__r_.__value_.__r.__words[2]) < 0)
      operator delete(buf[0].__r_.__value_.__l.__data_);
    if (SHIBYTE(v1259.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v1259.__r_.__value_.__l.__data_);
    if (SHIBYTE(v1258.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v1258.__r_.__value_.__l.__data_);
    v797 = std::string::append(&v1256, ",\n", 2uLL);
    v798 = *(_OWORD *)&v797->__r_.__value_.__l.__data_;
    v1257.__r_.__value_.__r.__words[2] = v797->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v1257.__r_.__value_.__l.__data_ = v798;
    v797->__r_.__value_.__l.__size_ = 0;
    v797->__r_.__value_.__r.__words[2] = 0;
    v797->__r_.__value_.__r.__words[0] = 0;
    std::string::basic_string[abi:ne180100]<0>(&v1258, "PilotEnableThres");
    v799 = std::string::append(&v1258, ": ", 2uLL);
    v800 = *(_OWORD *)&v799->__r_.__value_.__l.__data_;
    v1259.__r_.__value_.__r.__words[2] = v799->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v1259.__r_.__value_.__l.__data_ = v800;
    v799->__r_.__value_.__l.__size_ = 0;
    v799->__r_.__value_.__r.__words[2] = 0;
    v799->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v1261, v1209);
    while (2)
    {
      if ((SHIBYTE(v1261.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
        if (*(&v1260 + HIBYTE(v1261.__r_.__value_.__r.__words[2])) != 48)
          break;
        v801 = HIBYTE(v1261.__r_.__value_.__r.__words[2]) - 1;
        *((_BYTE *)&v1261.__r_.__value_.__s + 23) = (*((_BYTE *)&v1261.__r_.__value_.__s + 23) - 1) & 0x7F;
        v802 = &v1261;
        goto LABEL_1781;
      }
      v802 = (std::string *)v1261.__r_.__value_.__r.__words[0];
      if (*(_BYTE *)(v1261.__r_.__value_.__r.__words[0] + v1261.__r_.__value_.__l.__size_ - 1) == 48)
      {
        v801 = --v1261.__r_.__value_.__l.__size_;
LABEL_1781:
        v802->__r_.__value_.__s.__data_[v801] = 0;
        continue;
      }
      break;
    }
    cfa = v1261;
    memset(&v1261, 0, sizeof(v1261));
    while (2)
    {
      if ((SHIBYTE(cfa.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
        if (*((_BYTE *)&v1234 + HIBYTE(cfa.__r_.__value_.__r.__words[2]) + 7) != 46)
          break;
        v803 = HIBYTE(cfa.__r_.__value_.__r.__words[2]) - 1;
        *((_BYTE *)&cfa.__r_.__value_.__s + 23) = (*((_BYTE *)&cfa.__r_.__value_.__s + 23) - 1) & 0x7F;
        v804 = &cfa;
        goto LABEL_1788;
      }
      v804 = (std::string *)cfa.__r_.__value_.__r.__words[0];
      if (*(_BYTE *)(cfa.__r_.__value_.__r.__words[0] + cfa.__r_.__value_.__l.__size_ - 1) == 46)
      {
        v803 = --cfa.__r_.__value_.__l.__size_;
LABEL_1788:
        v804->__r_.__value_.__s.__data_[v803] = 0;
        continue;
      }
      break;
    }
    buf[0] = cfa;
    if (SHIBYTE(v1261.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v1261.__r_.__value_.__l.__data_);
    if ((buf[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v805 = buf;
    else
      v805 = (std::string *)buf[0].__r_.__value_.__r.__words[0];
    if ((buf[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v806 = HIBYTE(buf[0].__r_.__value_.__r.__words[2]);
    else
      v806 = buf[0].__r_.__value_.__l.__size_;
    v807 = std::string::append(&v1259, (const std::string::value_type *)v805, v806);
    v808 = *(_OWORD *)&v807->__r_.__value_.__l.__data_;
    v1278.__end_ = (std::__split_buffer<std::string>::pointer)v807->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v1278.__first_ = v808;
    v807->__r_.__value_.__l.__size_ = 0;
    v807->__r_.__value_.__r.__words[2] = 0;
    v807->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(buf[0].__r_.__value_.__r.__words[2]) < 0)
      operator delete(buf[0].__r_.__value_.__l.__data_);
    if (SHIBYTE(v1259.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v1259.__r_.__value_.__l.__data_);
    if (SHIBYTE(v1258.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v1258.__r_.__value_.__l.__data_);
    if (SHIBYTE(v1278.__end_) >= 0)
      v809 = (const std::string::value_type *)&v1278;
    else
      v809 = (const std::string::value_type *)v1278.__first_;
    if (SHIBYTE(v1278.__end_) >= 0)
      end_high = HIBYTE(v1278.__end_);
    else
      end_high = (std::string::size_type)v1278.__begin_;
    v811 = std::string::append(&v1257, v809, end_high);
    v812 = *(_OWORD *)&v811->__r_.__value_.__l.__data_;
    cfa.__r_.__value_.__r.__words[2] = v811->__r_.__value_.__r.__words[2];
    *(_OWORD *)&cfa.__r_.__value_.__l.__data_ = v812;
    v811->__r_.__value_.__l.__size_ = 0;
    v811->__r_.__value_.__r.__words[2] = 0;
    v811->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v1278.__end_) < 0)
      operator delete(v1278.__first_);
    if (SHIBYTE(v1257.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v1257.__r_.__value_.__l.__data_);
    if (SHIBYTE(v1256.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v1256.__r_.__value_.__l.__data_);
    v813 = &cfa;
    if ((cfa.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v813 = (std::string *)cfa.__r_.__value_.__r.__words[0];
    LODWORD(buf[0].__r_.__value_.__l.__data_) = 136315650;
    *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)"ParamStructWrappers.h";
    WORD2(buf[0].__r_.__value_.__r.__words[1]) = 1024;
    *(_DWORD *)((char *)&buf[0].__r_.__value_.__r.__words[1] + 6) = 372;
    WORD1(buf[0].__r_.__value_.__r.__words[2]) = 2080;
    *(std::string::size_type *)((char *)&buf[0].__r_.__value_.__r.__words[2] + 4) = (std::string::size_type)v813;
    _os_log_impl(&dword_1B5ED0000, v786, OS_LOG_TYPE_DEFAULT, "%25s:%-5d AUSpeakerProtectionV3:: Found additional pilot tone params %s, applying to scope", (uint8_t *)buf, 0x1Cu);
    if (SHIBYTE(cfa.__r_.__value_.__r.__words[2]) < 0)
      operator delete(cfa.__r_.__value_.__l.__data_);
LABEL_1819:
    ausdk::AUElement::SetParameter(v783, 0x43u, __valb, 0);
    ausdk::AUElement::SetParameter(v783, 0x44u, v1209, 0);
LABEL_1820:
    v654 += 36;
  }
  while (v654 != v571);
LABEL_1821:
  v814 = (_QWORD *)*((_QWORD *)this + 84);
  v815 = (_QWORD *)*((_QWORD *)this + 85);
  while (v815 != v814)
  {
    v817 = *--v815;
    v816 = v817;
    *v815 = 0;
    if (v817)
      std::default_delete<clsp::ClosedLoopParameters>::operator()[abi:ne180100](v816);
  }
  *((_QWORD *)this + 85) = v814;
  v819 = v1264.__r_.__value_.__l.__size_;
  v818 = v1264.__r_.__value_.__r.__words[0];
  if (v1264.__r_.__value_.__r.__words[0] != v1264.__r_.__value_.__l.__size_)
  {
    v820 = (_QWORD *)((char *)this + 672);
    v821 = (_QWORD *)((char *)this + 688);
    do
    {
      v822 = *(_QWORD *)(v818 + 8);
      if (v822)
      {
        *(_QWORD *)(v818 + 8) = 0;
        v814 = (_QWORD *)*((_QWORD *)this + 85);
      }
      if ((unint64_t)v814 >= *v821)
      {
        v824 = ((uint64_t)v814 - *v820) >> 3;
        if ((unint64_t)(v824 + 1) >> 61)
          std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
        v825 = *v821 - *v820;
        v826 = v825 >> 2;
        if (v825 >> 2 <= (unint64_t)(v824 + 1))
          v826 = v824 + 1;
        if ((unint64_t)v825 >= 0x7FFFFFFFFFFFFFF8)
          v827 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v827 = v826;
        v1237 = (char *)this + 688;
        if (v827)
          v827 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<SlidingWindowDTFT<float> *>>(v827);
        else
          v828 = 0;
        v829 = (_QWORD *)(v827 + 8 * v824);
        cfa.__r_.__value_.__r.__words[0] = v827;
        cfa.__r_.__value_.__l.__size_ = (std::string::size_type)v829;
        v1236 = v827 + 8 * v828;
        *v829 = v822;
        cfa.__r_.__value_.__r.__words[2] = (std::string::size_type)(v829 + 1);
        std::vector<std::unique_ptr<AllPassComb>>::__swap_out_circular_buffer(v820, &cfa);
        v823 = this;
        v814 = (_QWORD *)*((_QWORD *)this + 85);
        std::__split_buffer<std::unique_ptr<clsp::ClosedLoopParameters>>::~__split_buffer((uint64_t)&cfa);
      }
      else
      {
        *v814++ = v822;
        v823 = this;
        *((_QWORD *)this + 85) = v814;
      }
      *((_QWORD *)v823 + 85) = v814;
      v818 += 16;
    }
    while (v818 != v819);
  }
  *((_BYTE *)this + 529) = 1;
  buf[0].__r_.__value_.__r.__words[0] = (std::string::size_type)&v1264;
  std::vector<clsp::plistV9::PerSpeakerParamMapper<clsp::plistV9::ClosedLoopParametersStruct>>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
  if (v572)
    operator delete(v572);
  if (!v1234)
  {
    v1147 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v1147, "Could not construct");
  }
  applesauce::CF::details::find_at_key<applesauce::CF::DictionaryRef,char const(&)[22]>((applesauce::CF::DictionaryRef *)&v1268, (const __CFDictionary *)v1234);
  v830 = *((_DWORD *)this + 158);
  memset(v1271, 0, 24);
  if (v830)
  {
    for (i = 0; i != v830; ++i)
    {
      if (!(_QWORD)v1268)
      {
        v1118 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v1118, "Could not construct");
      }
      std::to_string((std::string *)&v1278, i);
      v832 = std::string::insert((std::string *)&v1278, 0, "Channel", 7uLL);
      v833 = *(_OWORD *)&v832->__r_.__value_.__l.__data_;
      buf[0].__r_.__value_.__r.__words[2] = v832->__r_.__value_.__r.__words[2];
      *(_OWORD *)&buf[0].__r_.__value_.__l.__data_ = v833;
      v832->__r_.__value_.__l.__size_ = 0;
      v832->__r_.__value_.__r.__words[2] = 0;
      v832->__r_.__value_.__r.__words[0] = 0;
      applesauce::CF::details::find_at_key<applesauce::CF::DictionaryRef,std::string>((applesauce::CF::DictionaryRef *)&v1270, (const __CFDictionary *)v1268, (uint64_t)buf);
      if (SHIBYTE(buf[0].__r_.__value_.__r.__words[2]) < 0)
        operator delete(buf[0].__r_.__value_.__l.__data_);
      if (SHIBYTE(v1278.__end_) < 0)
        operator delete(v1278.__first_);
      if (!v1270.__r_.__value_.__r.__words[0])
      {
        v1119 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v1119, "Could not construct");
      }
      v834 = (const __CFString *)applesauce::CF::details::at_key<char const* const&>((const __CFDictionary *)v1270.__r_.__value_.__l.__data_, clsp::plistV9::SpeakerNameStruct::key);
      if (!v834)
      {
        v1120 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v1120, "Could not find item");
      }
      applesauce::CF::convert_to<std::string,0>(v834, (uint64_t)&v1278);
      v835 = (NSObject **)spp3Subsystem();
      if (v835)
      {
        v836 = *v835;
        if (!*v835)
          goto LABEL_1860;
      }
      else
      {
        v836 = MEMORY[0x1E0C81028];
      }
      if (os_log_type_enabled(v836, OS_LOG_TYPE_DEBUG))
      {
        LODWORD(buf[0].__r_.__value_.__l.__data_) = 136315906;
        *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)"AUSpeakerProtectionV3.cpp";
        WORD2(buf[0].__r_.__value_.__r.__words[1]) = 1024;
        *(_DWORD *)((char *)&buf[0].__r_.__value_.__r.__words[1] + 6) = 3784;
        WORD1(buf[0].__r_.__value_.__r.__words[2]) = 2080;
        *(std::string::size_type *)((char *)&buf[0].__r_.__value_.__r.__words[2] + 4) = (std::string::size_type)"SpeakerName";
        WORD2(buf[1].__r_.__value_.__r.__words[0]) = 1024;
        *(_DWORD *)((char *)buf[1].__r_.__value_.__r.__words + 6) = i;
        _os_log_impl(&dword_1B5ED0000, v836, OS_LOG_TYPE_DEBUG, "%25s:%-5d Found the %s plist entry for channel %i.", (uint8_t *)buf, 0x22u);
      }
LABEL_1860:
      if (SHIBYTE(v1278.__end_) < 0)
      {
        std::string::__init_copy_ctor_external(buf, (const std::string::value_type *)v1278.__first_, (std::string::size_type)v1278.__begin_);
      }
      else
      {
        *(_OWORD *)&buf[0].__r_.__value_.__l.__data_ = *(_OWORD *)&v1278.__first_;
        buf[0].__r_.__value_.__r.__words[2] = (std::string::size_type)v1278.__end_;
      }
      v837 = *(_QWORD *)&v1271[8];
      if (*(_QWORD *)&v1271[8] < *(_QWORD *)&v1271[16])
      {
        **(_DWORD **)&v1271[8] = i;
        v838 = *(_OWORD *)&buf[0].__r_.__value_.__l.__data_;
        *(_QWORD *)(v837 + 24) = *((_QWORD *)&buf[0].__r_.__value_.__l + 2);
        *(_OWORD *)(v837 + 8) = v838;
        *(_QWORD *)&v1271[8] = v837 + 32;
        goto LABEL_1886;
      }
      v839 = *(_QWORD *)v1271;
      v840 = (uint64_t)(*(_QWORD *)&v1271[8] - *(_QWORD *)v1271) >> 5;
      v841 = v840 + 1;
      if ((unint64_t)(v840 + 1) >> 59)
        std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
      v842 = *(_QWORD *)&v1271[16] - *(_QWORD *)v1271;
      if ((uint64_t)(*(_QWORD *)&v1271[16] - *(_QWORD *)v1271) >> 4 > v841)
        v841 = v842 >> 4;
      if ((unint64_t)v842 >= 0x7FFFFFFFFFFFFFE0)
        v843 = 0x7FFFFFFFFFFFFFFLL;
      else
        v843 = v841;
      if (v843)
      {
        if (v843 >> 59)
          std::__throw_bad_array_new_length[abi:ne180100]();
        v844 = (char *)operator new(32 * v843);
      }
      else
      {
        v844 = 0;
      }
      v845 = &v844[32 * v840];
      *(_DWORD *)v845 = i;
      *(std::string *)(v845 + 8) = buf[0];
      v846 = &v844[32 * v843];
      memset(buf, 0, 24);
      v847 = v845 + 32;
      if (v837 != v839)
      {
        do
        {
          v848 = *(_DWORD *)(v837 - 32);
          v837 -= 32;
          *((_DWORD *)v845 - 8) = v848;
          v845 -= 32;
          v849 = *(_OWORD *)(v837 + 8);
          *((_QWORD *)v845 + 3) = *(_QWORD *)(v837 + 24);
          *(_OWORD *)(v845 + 8) = v849;
          *(_QWORD *)(v837 + 16) = 0;
          *(_QWORD *)(v837 + 24) = 0;
          *(_QWORD *)(v837 + 8) = 0;
        }
        while (v837 != v839);
        v850 = *(_QWORD *)v1271;
        v837 = *(_QWORD *)&v1271[8];
        *(_QWORD *)v1271 = v845;
        *(_QWORD *)&v1271[8] = v847;
        *(_QWORD *)&v1271[16] = v846;
        if (v837 != v850)
        {
          do
          {
            if (*(char *)(v837 - 1) < 0)
              operator delete(*(void **)(v837 - 24));
            v837 -= 32;
          }
          while (v837 != v850);
          v837 = v850;
        }
        if (!v837)
          goto LABEL_1884;
LABEL_1883:
        operator delete((void *)v837);
        goto LABEL_1884;
      }
      *(_QWORD *)v1271 = v845;
      *(_QWORD *)&v1271[8] = v845 + 32;
      *(_QWORD *)&v1271[16] = &v844[32 * v843];
      if (v837)
        goto LABEL_1883;
LABEL_1884:
      *(_QWORD *)&v1271[8] = v847;
      if (SHIBYTE(buf[0].__r_.__value_.__r.__words[2]) < 0)
        operator delete(buf[0].__r_.__value_.__l.__data_);
LABEL_1886:
      v851 = (NSObject **)spp3Subsystem();
      if (!v851)
      {
        v852 = MEMORY[0x1E0C81028];
LABEL_1890:
        if (os_log_type_enabled(v852, OS_LOG_TYPE_DEBUG))
        {
          LODWORD(buf[0].__r_.__value_.__l.__data_) = 136315906;
          *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)"AUSpeakerProtectionV3.cpp";
          WORD2(buf[0].__r_.__value_.__r.__words[1]) = 1024;
          *(_DWORD *)((char *)&buf[0].__r_.__value_.__r.__words[1] + 6) = 3789;
          WORD1(buf[0].__r_.__value_.__r.__words[2]) = 2080;
          *(std::string::size_type *)((char *)&buf[0].__r_.__value_.__r.__words[2] + 4) = (std::string::size_type)"SpeakerName";
          WORD2(buf[1].__r_.__value_.__r.__words[0]) = 1024;
          *(_DWORD *)((char *)buf[1].__r_.__value_.__r.__words + 6) = i;
          _os_log_impl(&dword_1B5ED0000, v852, OS_LOG_TYPE_DEBUG, "%25s:%-5d Successfully parsed the %s plist entry for channel %i.", (uint8_t *)buf, 0x22u);
        }
        goto LABEL_1892;
      }
      v852 = *v851;
      if (*v851)
        goto LABEL_1890;
LABEL_1892:
      if (SHIBYTE(v1278.__end_) < 0)
        operator delete(v1278.__first_);
      if (v1270.__r_.__value_.__r.__words[0])
        CFRelease(v1270.__r_.__value_.__l.__data_);
    }
  }
  if ((_QWORD)v1268)
    CFRelease((CFTypeRef)v1268);
  v853 = (NSObject **)spp3Subsystem();
  if (v853)
  {
    v854 = *v853;
    if (!*v853)
      goto LABEL_1908;
  }
  else
  {
    v854 = MEMORY[0x1E0C81028];
  }
  if (os_log_type_enabled(v854, OS_LOG_TYPE_INFO))
  {
    LODWORD(buf[0].__r_.__value_.__l.__data_) = 136315650;
    *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)"AUSpeakerProtectionV3.cpp";
    WORD2(buf[0].__r_.__value_.__r.__words[1]) = 1024;
    *(_DWORD *)((char *)&buf[0].__r_.__value_.__r.__words[1] + 6) = 3931;
    WORD1(buf[0].__r_.__value_.__r.__words[2]) = 2048;
    *(std::string::size_type *)((char *)&buf[0].__r_.__value_.__r.__words[2] + 4) = (uint64_t)(*(_QWORD *)&v1271[8]
                                                                                            - *(_QWORD *)v1271) >> 5;
    _os_log_impl(&dword_1B5ED0000, v854, OS_LOG_TYPE_INFO, "%25s:%-5d Successfully parsed all %lu speaker name params.", (uint8_t *)buf, 0x1Cu);
  }
LABEL_1908:
  v855 = (std::vector<std::string> *)((char *)this + 1064);
  std::vector<std::__fs::filesystem::path>::__clear[abi:ne180100]((uint64_t *)this + 133);
  v856 = *(_QWORD *)v1271;
  for (j = *(_QWORD *)&v1271[8]; v856 != j; v856 += 32)
  {
    if (*(char *)(v856 + 31) < 0)
    {
      std::string::__init_copy_ctor_external(&v1270, *(const std::string::value_type **)(v856 + 8), *(_QWORD *)(v856 + 16));
    }
    else
    {
      v858 = *(_OWORD *)(v856 + 8);
      v1270.__r_.__value_.__r.__words[2] = *(_QWORD *)(v856 + 24);
      *(_OWORD *)&v1270.__r_.__value_.__l.__data_ = v858;
    }
    if (SHIBYTE(v1270.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(buf, v1270.__r_.__value_.__l.__data_, v1270.__r_.__value_.__l.__size_);
    else
      buf[0] = v1270;
    v859 = *((_QWORD *)this + 134);
    v860 = *((_QWORD *)this + 135);
    if (v859 >= v860)
    {
      v862 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v859 - (unint64_t)v855->__begin_) >> 3);
      v863 = v862 + 1;
      if (v862 + 1 > 0xAAAAAAAAAAAAAAALL)
        std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
      v864 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v860 - (unint64_t)v855->__begin_) >> 3);
      if (2 * v864 > v863)
        v863 = 2 * v864;
      if (v864 >= 0x555555555555555)
        v865 = 0xAAAAAAAAAAAAAAALL;
      else
        v865 = v863;
      v1278.__end_cap_.__value_ = (std::allocator<std::string> *)((char *)this + 1080);
      if (v865)
        v866 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::__fs::filesystem::path>>((uint64_t)this + 1080, v865);
      else
        v866 = 0;
      v867 = v866 + v862;
      v1278.__first_ = v866;
      v1278.__begin_ = v867;
      v1278.__end_cap_.__value_ = &v866[v865];
      v868 = *(_OWORD *)&buf[0].__r_.__value_.__l.__data_;
      v867->__r_.__value_.__r.__words[2] = buf[0].__r_.__value_.__r.__words[2];
      *(_OWORD *)&v867->__r_.__value_.__l.__data_ = v868;
      memset(buf, 0, 24);
      v1278.__end_ = v867 + 1;
      std::vector<std::string>::__swap_out_circular_buffer(v855, &v1278);
      v869 = *((_QWORD *)this + 134);
      std::__split_buffer<std::string>::~__split_buffer(&v1278);
      v870 = SHIBYTE(buf[0].__r_.__value_.__r.__words[2]);
      *((_QWORD *)this + 134) = v869;
      if (v870 < 0)
        operator delete(buf[0].__r_.__value_.__l.__data_);
    }
    else
    {
      v861 = *(_OWORD *)&buf[0].__r_.__value_.__l.__data_;
      *(_QWORD *)(v859 + 16) = *((_QWORD *)&buf[0].__r_.__value_.__l + 2);
      *(_OWORD *)v859 = v861;
      memset(buf, 0, 24);
      *((_QWORD *)this + 134) = v859 + 24;
    }
    if (SHIBYTE(v1270.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v1270.__r_.__value_.__l.__data_);
  }
  buf[0].__r_.__value_.__r.__words[0] = (std::string::size_type)v1271;
  std::vector<clsp::plistV9::PerSpeakerParamMapper<clsp::plistV9::SpeakerNameStruct>>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
  if (!v1234)
  {
    v1148 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v1148, "Could not construct");
  }
  applesauce::CF::details::find_at_key<applesauce::CF::DictionaryRef,char const(&)[22]>((applesauce::CF::DictionaryRef *)&v1268, (const __CFDictionary *)v1234);
  v871 = *((_DWORD *)this + 158);
  if (v871)
  {
    v872 = 0;
    v873 = 0;
    v874 = 0;
    v875 = 0;
    while (1)
    {
      if (!(_QWORD)v1268)
      {
        v1121 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v1121, "Could not construct");
      }
      std::to_string((std::string *)v1271, v875);
      v876 = std::string::insert((std::string *)v1271, 0, "Channel", 7uLL);
      v877 = *(_OWORD *)&v876->__r_.__value_.__l.__data_;
      buf[0].__r_.__value_.__r.__words[2] = v876->__r_.__value_.__r.__words[2];
      *(_OWORD *)&buf[0].__r_.__value_.__l.__data_ = v877;
      v876->__r_.__value_.__l.__size_ = 0;
      v876->__r_.__value_.__r.__words[2] = 0;
      v876->__r_.__value_.__r.__words[0] = 0;
      applesauce::CF::details::find_at_key<applesauce::CF::DictionaryRef,std::string>((applesauce::CF::DictionaryRef *)&v1270, (const __CFDictionary *)v1268, (uint64_t)buf);
      if (SHIBYTE(buf[0].__r_.__value_.__r.__words[2]) < 0)
        operator delete(buf[0].__r_.__value_.__l.__data_);
      if ((v1271[23] & 0x80000000) != 0)
        operator delete(*(void **)v1271);
      if (!v1270.__r_.__value_.__r.__words[0])
      {
        v1122 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v1122, "Could not construct");
      }
      v878 = (const __CFNumber *)applesauce::CF::details::at_key<char const* const&>((const __CFDictionary *)v1270.__r_.__value_.__l.__data_, clsp::plistV9::SpeakerGroupStruct::key);
      if (!v878)
      {
        v1123 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v1123, "Could not find item");
      }
      v879 = applesauce::CF::convert_to<unsigned int,0>(v878);
      v880 = (NSObject **)spp3Subsystem();
      if (v880)
      {
        v881 = *v880;
        if (!*v880)
          goto LABEL_1947;
      }
      else
      {
        v881 = MEMORY[0x1E0C81028];
      }
      if (os_log_type_enabled(v881, OS_LOG_TYPE_DEBUG))
      {
        LODWORD(buf[0].__r_.__value_.__l.__data_) = 136315906;
        *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)"AUSpeakerProtectionV3.cpp";
        WORD2(buf[0].__r_.__value_.__r.__words[1]) = 1024;
        *(_DWORD *)((char *)&buf[0].__r_.__value_.__r.__words[1] + 6) = 3784;
        WORD1(buf[0].__r_.__value_.__r.__words[2]) = 2080;
        *(std::string::size_type *)((char *)&buf[0].__r_.__value_.__r.__words[2] + 4) = (std::string::size_type)"SpeakerGroup";
        WORD2(buf[1].__r_.__value_.__r.__words[0]) = 1024;
        *(_DWORD *)((char *)buf[1].__r_.__value_.__r.__words + 6) = v875;
        _os_log_impl(&dword_1B5ED0000, v881, OS_LOG_TYPE_DEBUG, "%25s:%-5d Found the %s plist entry for channel %i.", (uint8_t *)buf, 0x22u);
      }
LABEL_1947:
      if (v873 >= v874)
      {
        v882 = ((char *)v873 - (char *)v872) >> 3;
        v883 = v882 + 1;
        if ((unint64_t)(v882 + 1) >> 61)
          std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
        if (v874 - v872 > v883)
          v883 = v874 - v872;
        if ((unint64_t)((char *)v874 - (char *)v872) >= 0x7FFFFFFFFFFFFFF8)
          v884 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v884 = v883;
        if (v884 >> 61)
          std::__throw_bad_array_new_length[abi:ne180100]();
        v885 = (char *)operator new(8 * v884);
        v886 = (unsigned int *)&v885[8 * v882];
        *v886 = v875;
        v886[1] = v879;
        v887 = v886;
        while (v873 != v872)
        {
          v888 = *((_QWORD *)v873 - 1);
          v873 -= 2;
          *((_QWORD *)v887 - 1) = v888;
          v887 -= 2;
        }
        v874 = (unsigned int *)&v885[8 * v884];
        v873 = v886 + 2;
        if (v872)
          operator delete(v872);
        v872 = v887;
      }
      else
      {
        *v873 = v875;
        v873[1] = v879;
        v873 += 2;
      }
      v889 = (NSObject **)spp3Subsystem();
      if (!v889)
      {
        v890 = MEMORY[0x1E0C81028];
LABEL_1966:
        if (os_log_type_enabled(v890, OS_LOG_TYPE_DEBUG))
        {
          LODWORD(buf[0].__r_.__value_.__l.__data_) = 136315906;
          *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)"AUSpeakerProtectionV3.cpp";
          WORD2(buf[0].__r_.__value_.__r.__words[1]) = 1024;
          *(_DWORD *)((char *)&buf[0].__r_.__value_.__r.__words[1] + 6) = 3789;
          WORD1(buf[0].__r_.__value_.__r.__words[2]) = 2080;
          *(std::string::size_type *)((char *)&buf[0].__r_.__value_.__r.__words[2] + 4) = (std::string::size_type)"SpeakerGroup";
          WORD2(buf[1].__r_.__value_.__r.__words[0]) = 1024;
          *(_DWORD *)((char *)buf[1].__r_.__value_.__r.__words + 6) = v875;
          _os_log_impl(&dword_1B5ED0000, v890, OS_LOG_TYPE_DEBUG, "%25s:%-5d Successfully parsed the %s plist entry for channel %i.", (uint8_t *)buf, 0x22u);
        }
        goto LABEL_1968;
      }
      v890 = *v889;
      if (*v889)
        goto LABEL_1966;
LABEL_1968:
      if (v1270.__r_.__value_.__r.__words[0])
        CFRelease(v1270.__r_.__value_.__l.__data_);
      if (++v875 == v871)
        goto LABEL_1973;
    }
  }
  v872 = 0;
  v873 = 0;
LABEL_1973:
  if ((_QWORD)v1268)
    CFRelease((CFTypeRef)v1268);
  v891 = (NSObject **)spp3Subsystem();
  if (v891)
  {
    v892 = *v891;
    if (!*v891)
      goto LABEL_1981;
  }
  else
  {
    v892 = MEMORY[0x1E0C81028];
  }
  if (os_log_type_enabled(v892, OS_LOG_TYPE_INFO))
  {
    LODWORD(buf[0].__r_.__value_.__l.__data_) = 136315650;
    *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)"AUSpeakerProtectionV3.cpp";
    WORD2(buf[0].__r_.__value_.__r.__words[1]) = 1024;
    *(_DWORD *)((char *)&buf[0].__r_.__value_.__r.__words[1] + 6) = 3950;
    WORD1(buf[0].__r_.__value_.__r.__words[2]) = 2048;
    *(std::string::size_type *)((char *)&buf[0].__r_.__value_.__r.__words[2] + 4) = ((char *)v873 - (char *)v872) >> 3;
    _os_log_impl(&dword_1B5ED0000, v892, OS_LOG_TYPE_INFO, "%25s:%-5d Successfully parsed all %lu gain-link group params.", (uint8_t *)buf, 0x1Cu);
  }
LABEL_1981:
  v893 = (char *)*((_QWORD *)this + 130);
  *((_QWORD *)this + 131) = v893;
  if (v872 != v873)
  {
    v894 = (void **)((char *)this + 1040);
    v895 = (_QWORD *)((char *)this + 1056);
    v896 = v872;
    do
    {
      v897 = v896[1];
      if ((unint64_t)v893 >= *v895)
      {
        v899 = (char *)*v894;
        v900 = (v893 - (_BYTE *)*v894) >> 2;
        v901 = v900 + 1;
        if ((unint64_t)(v900 + 1) >> 62)
          std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
        v902 = *v895 - (_QWORD)v899;
        if (v902 >> 1 > v901)
          v901 = v902 >> 1;
        if ((unint64_t)v902 >= 0x7FFFFFFFFFFFFFFCLL)
          v903 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v903 = v901;
        if (v903)
        {
          v904 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>((uint64_t)v895, v903);
          v893 = (char *)*((_QWORD *)this + 131);
          v899 = (char *)*((_QWORD *)this + 130);
        }
        else
        {
          v904 = 0;
        }
        v905 = &v904[4 * v900];
        *(_DWORD *)v905 = v897;
        v898 = v905 + 4;
        while (v893 != v899)
        {
          v906 = *((_DWORD *)v893 - 1);
          v893 -= 4;
          *((_DWORD *)v905 - 1) = v906;
          v905 -= 4;
        }
        *((_QWORD *)this + 130) = v905;
        *((_QWORD *)this + 131) = v898;
        *((_QWORD *)this + 132) = &v904[4 * v903];
        if (v899)
          operator delete(v899);
      }
      else
      {
        *(_DWORD *)v893 = v897;
        v898 = v893 + 4;
      }
      *((_QWORD *)this + 131) = v898;
      v896 += 2;
      v893 = v898;
    }
    while (v896 != v873);
  }
  if (v872)
    operator delete(v872);
  if (!v1234)
  {
    v1150 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v1150, "Could not construct");
  }
  applesauce::CF::details::find_at_key<applesauce::CF::DictionaryRef,char const(&)[22]>((applesauce::CF::DictionaryRef *)&v1268, (const __CFDictionary *)v1234);
  v907 = *((_DWORD *)this + 158);
  if (v907)
  {
    v908 = 0;
    v909 = 0;
    v910 = 0;
    v911 = 0;
    while (1)
    {
      if (!(_QWORD)v1268)
      {
        v1124 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v1124, "Could not construct");
      }
      std::to_string((std::string *)v1271, v911);
      v912 = std::string::insert((std::string *)v1271, 0, "Channel", 7uLL);
      v913 = *(_OWORD *)&v912->__r_.__value_.__l.__data_;
      buf[0].__r_.__value_.__r.__words[2] = v912->__r_.__value_.__r.__words[2];
      *(_OWORD *)&buf[0].__r_.__value_.__l.__data_ = v913;
      v912->__r_.__value_.__l.__size_ = 0;
      v912->__r_.__value_.__r.__words[2] = 0;
      v912->__r_.__value_.__r.__words[0] = 0;
      applesauce::CF::details::find_at_key<applesauce::CF::DictionaryRef,std::string>((applesauce::CF::DictionaryRef *)&v1270, (const __CFDictionary *)v1268, (uint64_t)buf);
      if (SHIBYTE(buf[0].__r_.__value_.__r.__words[2]) < 0)
        operator delete(buf[0].__r_.__value_.__l.__data_);
      if ((v1271[23] & 0x80000000) != 0)
        operator delete(*(void **)v1271);
      if (!v1270.__r_.__value_.__r.__words[0])
      {
        v1125 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v1125, "Could not construct");
      }
      v914 = applesauce::CF::details::find_at_key<BOOL,char const* const&>((const __CFDictionary *)v1270.__r_.__value_.__l.__data_, &clsp::plistV9::IgnoreTelemetryStruct::key);
      v915 = (NSObject **)spp3Subsystem();
      if (v915)
      {
        v916 = *v915;
        if (!*v915)
          goto LABEL_2017;
      }
      else
      {
        v916 = MEMORY[0x1E0C81028];
      }
      if (os_log_type_enabled(v916, OS_LOG_TYPE_DEBUG))
      {
        LODWORD(buf[0].__r_.__value_.__l.__data_) = 136315906;
        *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)"AUSpeakerProtectionV3.cpp";
        WORD2(buf[0].__r_.__value_.__r.__words[1]) = 1024;
        *(_DWORD *)((char *)&buf[0].__r_.__value_.__r.__words[1] + 6) = 3784;
        WORD1(buf[0].__r_.__value_.__r.__words[2]) = 2080;
        *(std::string::size_type *)((char *)&buf[0].__r_.__value_.__r.__words[2] + 4) = (std::string::size_type)"IgnoreTelemetry";
        WORD2(buf[1].__r_.__value_.__r.__words[0]) = 1024;
        *(_DWORD *)((char *)buf[1].__r_.__value_.__r.__words + 6) = v911;
        _os_log_impl(&dword_1B5ED0000, v916, OS_LOG_TYPE_DEBUG, "%25s:%-5d Found the %s plist entry for channel %i.", (uint8_t *)buf, 0x22u);
      }
LABEL_2017:
      if (v909 >= v910)
      {
        v917 = (v909 - v908) >> 3;
        v918 = v917 + 1;
        if ((unint64_t)(v917 + 1) >> 61)
          std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
        if ((v910 - v908) >> 2 > v918)
          v918 = (v910 - v908) >> 2;
        if ((unint64_t)(v910 - v908) >= 0x7FFFFFFFFFFFFFF8)
          v919 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v919 = v918;
        if (v919 >> 61)
          std::__throw_bad_array_new_length[abi:ne180100]();
        v920 = (char *)operator new(8 * v919);
        v921 = &v920[8 * v917];
        *(_DWORD *)v921 = v911;
        v921[4] = v914;
        v922 = v921;
        while (v909 != v908)
        {
          v923 = *((_DWORD *)v909 - 2);
          v909 -= 8;
          v924 = v909[4];
          *((_DWORD *)v922 - 2) = v923;
          v922 -= 8;
          v922[4] = v924;
        }
        v910 = &v920[8 * v919];
        v909 = v921 + 8;
        if (v908)
          operator delete(v908);
        v908 = v922;
      }
      else
      {
        *(_DWORD *)v909 = v911;
        v909[4] = v914;
        v909 += 8;
      }
      v925 = (NSObject **)spp3Subsystem();
      if (!v925)
      {
        v926 = MEMORY[0x1E0C81028];
LABEL_2036:
        if (os_log_type_enabled(v926, OS_LOG_TYPE_DEBUG))
        {
          LODWORD(buf[0].__r_.__value_.__l.__data_) = 136315906;
          *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)"AUSpeakerProtectionV3.cpp";
          WORD2(buf[0].__r_.__value_.__r.__words[1]) = 1024;
          *(_DWORD *)((char *)&buf[0].__r_.__value_.__r.__words[1] + 6) = 3789;
          WORD1(buf[0].__r_.__value_.__r.__words[2]) = 2080;
          *(std::string::size_type *)((char *)&buf[0].__r_.__value_.__r.__words[2] + 4) = (std::string::size_type)"IgnoreTelemetry";
          WORD2(buf[1].__r_.__value_.__r.__words[0]) = 1024;
          *(_DWORD *)((char *)buf[1].__r_.__value_.__r.__words + 6) = v911;
          _os_log_impl(&dword_1B5ED0000, v926, OS_LOG_TYPE_DEBUG, "%25s:%-5d Successfully parsed the %s plist entry for channel %i.", (uint8_t *)buf, 0x22u);
        }
        goto LABEL_2038;
      }
      v926 = *v925;
      if (*v925)
        goto LABEL_2036;
LABEL_2038:
      if (v1270.__r_.__value_.__r.__words[0])
        CFRelease(v1270.__r_.__value_.__l.__data_);
      if (++v911 == v907)
        goto LABEL_2043;
    }
  }
  v908 = 0;
  v909 = 0;
LABEL_2043:
  if ((_QWORD)v1268)
    CFRelease((CFTypeRef)v1268);
  v927 = (NSObject **)spp3Subsystem();
  if (v927)
  {
    v928 = *v927;
    if (!*v927)
      goto LABEL_2051;
  }
  else
  {
    v928 = MEMORY[0x1E0C81028];
  }
  if (os_log_type_enabled(v928, OS_LOG_TYPE_INFO))
  {
    LODWORD(buf[0].__r_.__value_.__l.__data_) = 136315650;
    *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)"AUSpeakerProtectionV3.cpp";
    WORD2(buf[0].__r_.__value_.__r.__words[1]) = 1024;
    *(_DWORD *)((char *)&buf[0].__r_.__value_.__r.__words[1] + 6) = 3969;
    WORD1(buf[0].__r_.__value_.__r.__words[2]) = 2048;
    *(std::string::size_type *)((char *)&buf[0].__r_.__value_.__r.__words[2] + 4) = (v909 - v908) >> 3;
    _os_log_impl(&dword_1B5ED0000, v928, OS_LOG_TYPE_INFO, "%25s:%-5d Successfully parsed all %lu ignore-telemetry params.", (uint8_t *)buf, 0x1Cu);
  }
LABEL_2051:
  v929 = (void **)((char *)this + 592);
  if (*((_BYTE *)this + 616))
  {
    if (*v929)
      operator delete(*v929);
    *((_BYTE *)this + 616) = 0;
  }
  v930 = 0uLL;
  memset(v1271, 0, 24);
  if (v908 == v909)
  {
    v932 = 0;
  }
  else
  {
    v931 = v908;
    do
    {
      buf[0].__r_.__value_.__s.__data_[0] = v931[4] != 0;
      std::vector<BOOL>::push_back((uint64_t)v1271, buf);
      v931 += 8;
    }
    while (v931 != v909);
    v932 = *(_QWORD *)v1271;
    v930 = *(_OWORD *)&v1271[8];
  }
  buf[0].__r_.__value_.__r.__words[0] = v932;
  *(_OWORD *)&buf[0].__r_.__value_.__r.__words[1] = v930;
  memset(v1271, 0, 24);
  buf[1].__r_.__value_.__s.__data_[0] = 1;
  std::__optional_storage_base<std::vector<BOOL>,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::vector<BOOL>,false>>((uint64_t)v929, (uint64_t)buf);
  if (buf[1].__r_.__value_.__s.__data_[0] && buf[0].__r_.__value_.__r.__words[0])
    operator delete(buf[0].__r_.__value_.__l.__data_);
  if (*(_QWORD *)v1271)
    operator delete(*(void **)v1271);
  if (v908)
    operator delete(v908);
  if (!v1234)
  {
    v1151 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v1151, "Could not construct");
  }
  applesauce::CF::details::find_at_key<applesauce::CF::DictionaryRef,char const(&)[19]>((applesauce::CF::DictionaryRef *)v1271, (const __CFDictionary *)v1234, "AmpEfficiencyCoefs");
  cpms::efficiency::AmpModelFactory((cpms::efficiency *)buf, (const __CFDictionary **)v1271);
  v933 = buf[0].__r_.__value_.__r.__words[0];
  if (buf[0].__r_.__value_.__r.__words[0])
  {
    v934 = (_QWORD *)operator new();
    *v934 = &off_1E69DB8D0;
    v934[1] = 0;
    v934[2] = 0;
    v934[3] = v933;
  }
  else
  {
    v934 = 0;
  }
  buf[0].__r_.__value_.__r.__words[0] = 0;
  *((_QWORD *)this + 112) = v933;
  v935 = (std::__shared_weak_count *)*((_QWORD *)this + 113);
  *((_QWORD *)this + 113) = v934;
  if (v935)
  {
    p_shared_owners = (unint64_t *)&v935->__shared_owners_;
    do
      v937 = __ldaxr(p_shared_owners);
    while (__stlxr(v937 - 1, p_shared_owners));
    if (!v937)
    {
      ((void (*)(std::__shared_weak_count *))v935->__on_zero_shared)(v935);
      std::__shared_weak_count::__release_weak(v935);
    }
  }
  v938 = buf[0].__r_.__value_.__r.__words[0];
  buf[0].__r_.__value_.__r.__words[0] = 0;
  if (v938)
    (*(void (**)(std::string::size_type))(*(_QWORD *)v938 + 8))(v938);
  if (*(_QWORD *)v1271)
    CFRelease(*(CFTypeRef *)v1271);
  v939 = (NSObject **)spp3Subsystem();
  if (v939)
  {
    v940 = *v939;
    if (!*v939)
      goto LABEL_2090;
  }
  else
  {
    v940 = MEMORY[0x1E0C81028];
  }
  if (os_log_type_enabled(v940, OS_LOG_TYPE_INFO))
  {
    (*(void (**)(_BYTE *__return_ptr))(**((_QWORD **)this + 112) + 40))(v1271);
    v941 = v1271[23] >= 0 ? v1271 : *(_BYTE **)v1271;
    LODWORD(buf[0].__r_.__value_.__l.__data_) = 136315650;
    *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)"AUSpeakerProtectionV3.cpp";
    WORD2(buf[0].__r_.__value_.__r.__words[1]) = 1024;
    *(_DWORD *)((char *)&buf[0].__r_.__value_.__r.__words[1] + 6) = 3988;
    WORD1(buf[0].__r_.__value_.__r.__words[2]) = 2080;
    *(std::string::size_type *)((char *)&buf[0].__r_.__value_.__r.__words[2] + 4) = (std::string::size_type)v941;
    _os_log_impl(&dword_1B5ED0000, v940, OS_LOG_TYPE_INFO, "%25s:%-5d Successfully parsed the power amp efficiency model: [ %s ]", (uint8_t *)buf, 0x1Cu);
    if ((v1271[23] & 0x80000000) != 0)
      operator delete(*(void **)v1271);
  }
LABEL_2090:
  memset(&v1270, 0, sizeof(v1270));
  if (!v1234)
  {
    v1152 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v1152, "Could not construct");
  }
  applesauce::CF::details::find_at_key<applesauce::CF::ArrayRef,char const(&)[16]>((applesauce::CF::ArrayRef *)&v1267, (const __CFDictionary *)v1234, "PowerTimeScales");
  v942 = (const __CFArray *)v1267.__r_.__value_.__r.__words[0];
  if (v1267.__r_.__value_.__r.__words[0])
  {
    Count = CFArrayGetCount((CFArrayRef)v1267.__r_.__value_.__l.__data_);
    v944 = Count;
    v945 = v1267.__r_.__value_.__r.__words[0];
    if (v1267.__r_.__value_.__r.__words[0])
    {
      v946 = CFArrayGetCount((CFArrayRef)v1267.__r_.__value_.__l.__data_);
      if (!v944)
        goto LABEL_2126;
    }
    else
    {
      v946 = 0;
      if (!Count)
        goto LABEL_2126;
    }
    v947 = 0;
    while (1)
    {
      if (v942 == (const __CFArray *)v945 && v946 == v947)
        goto LABEL_2126;
      applesauce::CF::details::at_to<applesauce::CF::DictionaryRef>(v942, v947, (applesauce::CF::DictionaryRef *)&v1266);
      if (!v1266.__r_.__value_.__r.__words[0])
      {
        v1131 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v1131, "Could not construct");
      }
      v948 = applesauce::CF::details::at_key<char const(&)[4]>((const __CFDictionary *)v1266.__r_.__value_.__l.__data_, "Key");
      if (!v948)
      {
        v1134 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v1134, "Could not find item");
      }
      v949 = v948;
      CFRetain(v948);
      applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&v1230, v949);
      v950 = v1230;
      if (v1230)
      {
        CFRetain(v1230);
        v951 = v1230;
      }
      else
      {
        v951 = 0;
      }
      buf[0].__r_.__value_.__r.__words[0] = (std::string::size_type)v950;
      buf[0].__r_.__value_.__s.__data_[8] = 0;
      buf[0].__r_.__value_.__s.__data_[12] = 0;
      buf[0].__r_.__value_.__s.__data_[16] = 0;
      buf[0].__r_.__value_.__s.__data_[20] = 0;
      buf[1].__r_.__value_.__s.__data_[0] = 0;
      buf[1].__r_.__value_.__s.__data_[4] = 0;
      if (v951)
        CFRelease(v951);
      if (!v1266.__r_.__value_.__r.__words[0])
      {
        v1132 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v1132, "Could not construct");
      }
      v952 = applesauce::CF::DictionaryRef_proxy::at_as<float,char const(&)[15]>((const __CFDictionary *)v1266.__r_.__value_.__l.__data_, "GainAttackTime");
      LODWORD(buf[0].__r_.__value_.__r.__words[1]) = (_DWORD)v952;
      buf[0].__r_.__value_.__s.__data_[12] = BYTE4(v952);
      if (!v1266.__r_.__value_.__r.__words[0])
      {
        v1135 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v1135, "Could not construct");
      }
      v953 = applesauce::CF::DictionaryRef_proxy::at_as<float,char const(&)[16]>((const __CFDictionary *)v1266.__r_.__value_.__l.__data_, "GainReleaseTime");
      LODWORD(buf[0].__r_.__value_.__r.__words[1]) = (_DWORD)v953;
      buf[0].__r_.__value_.__s.__data_[12] = BYTE4(v953);
      if (!v1266.__r_.__value_.__r.__words[0])
      {
        v1133 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v1133, "Could not construct");
      }
      v954 = applesauce::CF::DictionaryRef_proxy::at_as<float,char const(&)[23]>((const __CFDictionary *)v1266.__r_.__value_.__l.__data_, "PowerSmootherTimeCoeff");
      LODWORD(buf[1].__r_.__value_.__l.__data_) = (_DWORD)v954;
      buf[1].__r_.__value_.__s.__data_[4] = BYTE4(v954);
      std::vector<cpms::TimeScale<float>>::push_back[abi:ne180100]((uint64_t *)&v1270, (uint64_t)buf);
      v955 = (NSObject **)spp3Subsystem();
      if (!v955)
        break;
      v956 = *v955;
      if (*v955)
        goto LABEL_2113;
LABEL_2121:
      if (buf[0].__r_.__value_.__r.__words[0])
        CFRelease(buf[0].__r_.__value_.__l.__data_);
      if (v1266.__r_.__value_.__r.__words[0])
        CFRelease(v1266.__r_.__value_.__l.__data_);
      if (v944 == ++v947)
        goto LABEL_2126;
    }
    v956 = MEMORY[0x1E0C81028];
LABEL_2113:
    if (os_log_type_enabled(v956, OS_LOG_TYPE_INFO))
    {
      v957 = (const __CFString *)buf[0].__r_.__value_.__r.__words[0];
      if (!buf[0].__r_.__value_.__r.__words[0])
      {
        v1265.__r_.__value_.__r.__words[0] = 0;
        v1140 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v1140, "Could not construct");
      }
      CFRetain(buf[0].__r_.__value_.__l.__data_);
      v1265.__r_.__value_.__r.__words[0] = (std::string::size_type)v957;
      applesauce::CF::convert_to<std::string,0>(v957, (uint64_t)&v1268);
      v958 = &v1268;
      if (SHIBYTE(end) < 0)
        v958 = (__int128 *)v1268;
      *(_DWORD *)v1271 = 136315650;
      *(_QWORD *)&v1271[4] = "AUSpeakerProtectionV3.cpp";
      *(_WORD *)&v1271[12] = 1024;
      *(_DWORD *)&v1271[14] = 4003;
      *(_WORD *)&v1271[18] = 2080;
      *(_QWORD *)&v1271[20] = v958;
      _os_log_impl(&dword_1B5ED0000, v956, OS_LOG_TYPE_INFO, "%25s:%-5d Successfully parsed the power smoothing '%s' time scale.", v1271, 0x1Cu);
      if (SHIBYTE(end) < 0)
        operator delete((void *)v1268);
      if (v1265.__r_.__value_.__r.__words[0])
        CFRelease(v1265.__r_.__value_.__l.__data_);
    }
    goto LABEL_2121;
  }
LABEL_2126:
  v959 = this;
  v960 = *((_QWORD *)this + 124);
  if (v960)
  {
    v961 = (void **)((char *)this + 992);
    v962 = *((_QWORD *)this + 125);
    v963 = (void *)*((_QWORD *)this + 124);
    if (v962 != v960)
    {
      do
      {
        v964 = *(const void **)(v962 - 32);
        v962 -= 32;
        std::__destroy_at[abi:ne180100]<cpms::TimeScale<float>,0>(v964);
      }
      while (v962 != v960);
      v963 = *v961;
    }
    v959 = this;
    *((_QWORD *)this + 125) = v960;
    operator delete(v963);
    *v961 = 0;
    *((_QWORD *)this + 125) = 0;
    *((_QWORD *)this + 126) = 0;
  }
  *(std::string *)((char *)v959 + 992) = v1270;
  memset(&v1270, 0, sizeof(v1270));
  v965 = (NSObject **)spp3Subsystem();
  if (v965)
  {
    v966 = *v965;
    if (!*v965)
      goto LABEL_2137;
  }
  else
  {
    v966 = MEMORY[0x1E0C81028];
  }
  if (os_log_type_enabled(v966, OS_LOG_TYPE_INFO))
  {
    LODWORD(buf[0].__r_.__value_.__l.__data_) = 136315394;
    *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)"AUSpeakerProtectionV3.cpp";
    WORD2(buf[0].__r_.__value_.__r.__words[1]) = 1024;
    *(_DWORD *)((char *)&buf[0].__r_.__value_.__r.__words[1] + 6) = 4006;
    _os_log_impl(&dword_1B5ED0000, v966, OS_LOG_TYPE_INFO, "%25s:%-5d Successfully parsed the power smoothing time scales.", (uint8_t *)buf, 0x12u);
  }
LABEL_2137:
  if (v1267.__r_.__value_.__r.__words[0])
    CFRelease(v1267.__r_.__value_.__l.__data_);
  buf[0].__r_.__value_.__r.__words[0] = (std::string::size_type)&v1270;
  std::vector<cpms::TimeScale<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
  if (!v1234)
  {
    v1153 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v1153, "Could not construct");
    goto LABEL_2503;
  }
  v967 = applesauce::CF::details::at_key<char const(&)[23]>((const __CFDictionary *)v1234, "PowerSmootherTimeCoefs");
  if (!v967)
  {
    v1153 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v1153, "Could not find item");
LABEL_2503:
  }
  v968 = v967;
  CFRetain(v967);
  applesauce::CF::ArrayRef::ArrayRef((applesauce::CF::ArrayRef *)&v1270, v968);
  v969 = (const __CFArray *)v1270.__r_.__value_.__r.__words[0];
  if (!v1270.__r_.__value_.__r.__words[0])
  {
LABEL_2147:
    v976 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v976, "Could not construct");
  }
  v970 = 0;
  v971 = 1;
  while (CFArrayGetCount(v969) > v970)
  {
    v972 = v971;
    v973 = *((_QWORD *)this + 124);
    if (v971 >= (unint64_t)((*((_QWORD *)this + 125) - v973) >> 5))
      std::vector<std::vector<float>>::__throw_out_of_range[abi:ne180100]();
    if (!v1270.__r_.__value_.__r.__words[0])
    {
      v1111 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v1111, "Could not construct");
    }
    v974 = applesauce::CF::details::at_to<float>((const __CFArray *)v1270.__r_.__value_.__l.__data_, v970);
    v975 = v973 + 32 * v971;
    *(_BYTE *)(v975 + 28) = 1;
    *(float *)(v975 + 24) = v974 / 1000.0;
    v969 = (const __CFArray *)v1270.__r_.__value_.__r.__words[0];
    ++v971;
    v970 = v972;
    if (!v1270.__r_.__value_.__r.__words[0])
      goto LABEL_2147;
  }
  v977 = (NSObject **)spp3Subsystem();
  if (v977)
  {
    v978 = *v977;
    if (!*v977)
      goto LABEL_2159;
  }
  else
  {
    v978 = MEMORY[0x1E0C81028];
  }
  if (os_log_type_enabled(v978, OS_LOG_TYPE_INFO))
  {
    v979 = CFCopyDescription(v1270.__r_.__value_.__l.__data_);
    applesauce::CF::details::CFString_get_value<true>(v979, (uint64_t)v1271);
    if (v979)
      CFRelease(v979);
    v980 = v1271;
    if (v1271[23] < 0)
      v980 = *(_BYTE **)v1271;
    LODWORD(buf[0].__r_.__value_.__l.__data_) = 136315650;
    *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)"AUSpeakerProtectionV3.cpp";
    WORD2(buf[0].__r_.__value_.__r.__words[1]) = 1024;
    *(_DWORD *)((char *)&buf[0].__r_.__value_.__r.__words[1] + 6) = 4018;
    WORD1(buf[0].__r_.__value_.__r.__words[2]) = 2080;
    *(std::string::size_type *)((char *)&buf[0].__r_.__value_.__r.__words[2] + 4) = (std::string::size_type)v980;
    _os_log_impl(&dword_1B5ED0000, v978, OS_LOG_TYPE_INFO, "%25s:%-5d Successfully parsed the power smoothing time constants: %s", (uint8_t *)buf, 0x1Cu);
    if ((v1271[23] & 0x80000000) != 0)
      operator delete(*(void **)v1271);
  }
LABEL_2159:
  if (v1270.__r_.__value_.__r.__words[0])
    CFRelease(v1270.__r_.__value_.__l.__data_);
  if (!v1234)
  {
    v1154 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v1154, "Could not construct");
  }
  v981 = (const __CFString *)applesauce::CF::details::at_key<char const(&)[23]>((const __CFDictionary *)v1234, "PowerSmoothingStrategy");
  if (!v981)
  {
    buf[0].__r_.__value_.__s.__data_[0] = 0;
    buf[1].__r_.__value_.__s.__data_[0] = 0;
    goto LABEL_2204;
  }
  applesauce::CF::convert_as<std::string,0>((uint64_t)buf, v981);
  if (!buf[1].__r_.__value_.__s.__data_[0])
    goto LABEL_2204;
  v982 = HIBYTE(buf[0].__r_.__value_.__r.__words[2]);
  if ((buf[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v982 = buf[0].__r_.__value_.__l.__size_;
  if (v982 == 24)
  {
    v983 = buf;
    if ((buf[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v983 = (std::string *)buf[0].__r_.__value_.__r.__words[0];
    v984 = v983->__r_.__value_.__r.__words[0];
    v985 = v983->__r_.__value_.__l.__size_;
    v986 = v983->__r_.__value_.__r.__words[2];
    v987 = v984 == 0x6D4165726F666542 && v985 == 0x6569636966664570;
    if (v987 && v986 == 0x6C65646F4D79636ELL)
    {
      v996 = 0;
      goto LABEL_2192;
    }
  }
  v989 = HIBYTE(buf[0].__r_.__value_.__r.__words[2]);
  if ((buf[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v989 = buf[0].__r_.__value_.__l.__size_;
  if (v989 == 23)
  {
    v990 = buf;
    if ((buf[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v990 = (std::string *)buf[0].__r_.__value_.__r.__words[0];
    v991 = v990->__r_.__value_.__r.__words[0];
    v992 = v990->__r_.__value_.__l.__size_;
    v993 = *(std::string::size_type *)((char *)&v990->__r_.__value_.__r.__words[1] + 7);
    v994 = v991 == 0x706D417265746641 && v992 == 0x6E65696369666645;
    if (v994 && v993 == 0x6C65646F4D79636ELL)
    {
      v996 = 1;
LABEL_2192:
      *((_DWORD *)this + 228) = v996;
      *((_BYTE *)this + 916) = 1;
    }
  }
  v997 = (NSObject **)spp3Subsystem();
  if (!v997)
  {
    v998 = MEMORY[0x1E0C81028];
LABEL_2197:
    if (os_log_type_enabled(v998, OS_LOG_TYPE_INFO))
    {
      v999 = buf;
      if ((buf[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v999 = (std::string *)buf[0].__r_.__value_.__r.__words[0];
      *(_DWORD *)v1271 = 136315650;
      *(_QWORD *)&v1271[4] = "AUSpeakerProtectionV3.cpp";
      *(_WORD *)&v1271[12] = 1024;
      *(_DWORD *)&v1271[14] = 4031;
      *(_WORD *)&v1271[18] = 2080;
      *(_QWORD *)&v1271[20] = v999;
      _os_log_impl(&dword_1B5ED0000, v998, OS_LOG_TYPE_INFO, "%25s:%-5d Successfully parsed the smoothing strategy: [ %s ]", v1271, 0x1Cu);
    }
    goto LABEL_2201;
  }
  v998 = *v997;
  if (*v997)
    goto LABEL_2197;
LABEL_2201:
  if (buf[1].__r_.__value_.__s.__data_[0] && SHIBYTE(buf[0].__r_.__value_.__r.__words[2]) < 0)
    operator delete(buf[0].__r_.__value_.__l.__data_);
LABEL_2204:
  memset(v1271, 0, 24);
  if (!v1234)
  {
    v1155 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v1155, "Could not construct");
  }
  applesauce::CF::details::find_at_key<applesauce::CF::ArrayRef,char const(&)[16]>((applesauce::CF::ArrayRef *)&v1270, (const __CFDictionary *)v1234, "PowerGainGroups");
  v1000 = (const __CFArray *)v1270.__r_.__value_.__r.__words[0];
  if (v1270.__r_.__value_.__r.__words[0])
  {
    __pc = CFArrayGetCount((CFArrayRef)v1270.__r_.__value_.__l.__data_);
    v1225 = (const __CFArray *)v1270.__r_.__value_.__r.__words[0];
    if (v1270.__r_.__value_.__r.__words[0])
      v1216 = CFArrayGetCount((CFArrayRef)v1270.__r_.__value_.__l.__data_);
    else
      v1216 = 0;
    if (__pc)
    {
      v1001 = 0;
      while (1)
      {
        if (v1000 == v1225 && v1001 == v1216)
          goto LABEL_2288;
        applesauce::CF::details::at_to<applesauce::CF::DictionaryRef>(v1000, v1001, (applesauce::CF::DictionaryRef *)&v1268);
        memset(buf, 0, sizeof(buf));
        if (!(_QWORD)v1268)
        {
          v1137 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(v1137, "Could not construct");
        }
        v1002 = applesauce::CF::details::at_key<char const(&)[9]>((const __CFDictionary *)v1268, "Channels");
        if (!v1002)
        {
          v1136 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(v1136, "Could not find item");
        }
        applesauce::CF::convert_to<std::vector<unsigned int>,0>((std::vector<unsigned int> *)&v1245, v1002);
        v1004 = v1245.__r_.__value_.__l.__size_;
        v1003 = (int *)v1245.__r_.__value_.__r.__words[0];
        if (v1245.__r_.__value_.__r.__words[0] != v1245.__r_.__value_.__l.__size_)
        {
          v1005 = (_DWORD *)buf[0].__r_.__value_.__l.__size_;
          do
          {
            v1006 = *v1003;
            if ((unint64_t)v1005 >= buf[0].__r_.__value_.__r.__words[2])
            {
              v1008 = (_DWORD *)buf[0].__r_.__value_.__r.__words[0];
              v1009 = (uint64_t)((uint64_t)v1005 - buf[0].__r_.__value_.__r.__words[0]) >> 2;
              v1010 = v1009 + 1;
              if ((unint64_t)(v1009 + 1) >> 62)
                std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
              v1011 = buf[0].__r_.__value_.__r.__words[2] - buf[0].__r_.__value_.__r.__words[0];
              if ((uint64_t)(buf[0].__r_.__value_.__r.__words[2] - buf[0].__r_.__value_.__r.__words[0]) >> 1 > v1010)
                v1010 = v1011 >> 1;
              if ((unint64_t)v1011 >= 0x7FFFFFFFFFFFFFFCLL)
                v1012 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v1012 = v1010;
              if (v1012)
              {
                v1013 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>((uint64_t)&buf[0].__r_.__value_.__r.__words[2], v1012);
                v1005 = (_DWORD *)buf[0].__r_.__value_.__l.__size_;
                v1008 = (_DWORD *)buf[0].__r_.__value_.__r.__words[0];
              }
              else
              {
                v1013 = 0;
              }
              v1014 = &v1013[4 * v1009];
              *(_DWORD *)v1014 = v1006;
              v1007 = (std::string::size_type)(v1014 + 4);
              while (v1005 != v1008)
              {
                v1015 = *--v1005;
                *((_DWORD *)v1014 - 1) = v1015;
                v1014 -= 4;
              }
              buf[0].__r_.__value_.__r.__words[0] = (std::string::size_type)v1014;
              buf[0].__r_.__value_.__l.__size_ = v1007;
              buf[0].__r_.__value_.__r.__words[2] = (std::string::size_type)&v1013[4 * v1012];
              if (v1008)
                operator delete(v1008);
            }
            else
            {
              *v1005 = v1006;
              v1007 = (std::string::size_type)(v1005 + 1);
            }
            buf[0].__r_.__value_.__l.__size_ = v1007;
            ++v1003;
            v1005 = (_DWORD *)v1007;
          }
          while (v1003 != (int *)v1004);
          v1003 = (int *)v1245.__r_.__value_.__r.__words[0];
        }
        if (v1003)
        {
          v1245.__r_.__value_.__l.__size_ = (std::string::size_type)v1003;
          operator delete(v1003);
        }
        if (!(_QWORD)v1268)
        {
          v1139 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(v1139, "Could not construct");
        }
        v1016 = applesauce::CF::details::at_key<char const(&)[11]>((const __CFDictionary *)v1268, "TimeScales");
        if (!v1016)
        {
          v1138 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(v1138, "Could not find item");
        }
        applesauce::CF::convert_to<std::vector<unsigned int>,0>((std::vector<unsigned int> *)&v1245, v1016);
        v1018 = v1245.__r_.__value_.__l.__size_;
        v1017 = (int *)v1245.__r_.__value_.__r.__words[0];
        if (v1245.__r_.__value_.__r.__words[0] != v1245.__r_.__value_.__l.__size_)
        {
          v1019 = (_DWORD *)buf[1].__r_.__value_.__l.__size_;
          do
          {
            v1020 = *v1017;
            if ((unint64_t)v1019 >= buf[1].__r_.__value_.__r.__words[2])
            {
              data = buf[1].__r_.__value_.__l.__data_;
              v1023 = (uint64_t)((uint64_t)v1019 - buf[1].__r_.__value_.__r.__words[0]) >> 2;
              v1024 = v1023 + 1;
              if ((unint64_t)(v1023 + 1) >> 62)
                std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
              v1025 = buf[1].__r_.__value_.__r.__words[2] - buf[1].__r_.__value_.__r.__words[0];
              if ((uint64_t)(buf[1].__r_.__value_.__r.__words[2] - buf[1].__r_.__value_.__r.__words[0]) >> 1 > v1024)
                v1024 = v1025 >> 1;
              if ((unint64_t)v1025 >= 0x7FFFFFFFFFFFFFFCLL)
                v1026 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v1026 = v1024;
              if (v1026)
              {
                v1027 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>((uint64_t)&buf[1].__r_.__value_.__r.__words[2], v1026);
                v1019 = (_DWORD *)buf[1].__r_.__value_.__l.__size_;
                data = buf[1].__r_.__value_.__l.__data_;
              }
              else
              {
                v1027 = 0;
              }
              v1028 = &v1027[4 * v1023];
              *(_DWORD *)v1028 = v1020;
              v1021 = (std::string::size_type)(v1028 + 4);
              while (v1019 != (_DWORD *)data)
              {
                v1029 = *--v1019;
                *((_DWORD *)v1028 - 1) = v1029;
                v1028 -= 4;
              }
              buf[1].__r_.__value_.__r.__words[0] = (std::string::size_type)v1028;
              buf[1].__r_.__value_.__l.__size_ = v1021;
              buf[1].__r_.__value_.__r.__words[2] = (std::string::size_type)&v1027[4 * v1026];
              if (data)
                operator delete(data);
            }
            else
            {
              *v1019 = v1020;
              v1021 = (std::string::size_type)(v1019 + 1);
            }
            buf[1].__r_.__value_.__l.__size_ = v1021;
            ++v1017;
            v1019 = (_DWORD *)v1021;
          }
          while (v1017 != (int *)v1018);
          v1017 = (int *)v1245.__r_.__value_.__r.__words[0];
        }
        if (v1017)
        {
          v1245.__r_.__value_.__l.__size_ = (std::string::size_type)v1017;
          operator delete(v1017);
        }
        v1030 = *(std::string **)&v1271[8];
        if (*(_QWORD *)&v1271[8] >= *(_QWORD *)&v1271[16])
          break;
        *(_QWORD *)(*(_QWORD *)&v1271[8] + 16) = 0;
        v1030[1].__r_.__value_.__r.__words[0] = 0;
        v1030->__r_.__value_.__r.__words[0] = 0;
        v1030->__r_.__value_.__l.__size_ = 0;
        *v1030 = buf[0];
        memset(buf, 0, 24);
        v1030[1].__r_.__value_.__l.__size_ = 0;
        v1030[1].__r_.__value_.__r.__words[2] = 0;
        v1030[1] = buf[1];
        memset(&buf[1], 0, sizeof(std::string));
        *(_QWORD *)&v1271[8] = v1030 + 2;
LABEL_2280:
        if (buf[0].__r_.__value_.__r.__words[0])
        {
          buf[0].__r_.__value_.__l.__size_ = buf[0].__r_.__value_.__r.__words[0];
          operator delete(buf[0].__r_.__value_.__l.__data_);
        }
        if ((_QWORD)v1268)
          CFRelease((CFTypeRef)v1268);
        if (++v1001 == __pc)
          goto LABEL_2288;
      }
      v1031 = *(std::string **)v1271;
      v1032 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)&v1271[8] - *(_QWORD *)v1271) >> 4);
      v1033 = v1032 + 1;
      if (v1032 + 1 > 0x555555555555555)
        std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
      if (0x5555555555555556 * ((uint64_t)(*(_QWORD *)&v1271[16] - *(_QWORD *)v1271) >> 4) > v1033)
        v1033 = 0x5555555555555556 * ((uint64_t)(*(_QWORD *)&v1271[16] - *(_QWORD *)v1271) >> 4);
      if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)&v1271[16] - *(_QWORD *)v1271) >> 4) >= 0x2AAAAAAAAAAAAAALL)
        v1034 = 0x555555555555555;
      else
        v1034 = v1033;
      if (v1034 > 0x555555555555555)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v1035 = (char *)operator new(48 * v1034);
      v1036 = buf[1].__r_.__value_.__r.__words[2];
      v1037 = &v1035[48 * v1032];
      *(std::string *)v1037 = buf[0];
      v1038 = &v1035[48 * v1034];
      memset(buf, 0, 24);
      *(_OWORD *)(v1037 + 24) = *(_OWORD *)&buf[1].__r_.__value_.__l.__data_;
      *((_QWORD *)v1037 + 5) = v1036;
      v1039 = v1037 + 48;
      memset(&buf[1], 0, sizeof(std::string));
      if (v1030 == v1031)
      {
        *(_QWORD *)v1271 = &v1035[48 * v1032];
        *(_QWORD *)&v1271[8] = v1037 + 48;
        *(_QWORD *)&v1271[16] = v1038;
        if (!v1030)
        {
LABEL_2278:
          *(_QWORD *)&v1271[8] = v1039;
          if (buf[1].__r_.__value_.__r.__words[0])
          {
            buf[1].__r_.__value_.__l.__size_ = buf[1].__r_.__value_.__r.__words[0];
            operator delete(buf[1].__r_.__value_.__l.__data_);
          }
          goto LABEL_2280;
        }
      }
      else
      {
        v1040 = 0;
        do
        {
          v1041 = &v1037[v1040 * 24];
          v1042 = (std::string::__raw *)&v1030[v1040];
          *((_QWORD *)v1041 - 6) = 0;
          *((_QWORD *)v1041 - 5) = 0;
          *((_QWORD *)v1041 - 4) = 0;
          *((_OWORD *)v1041 - 3) = *(_OWORD *)&v1030[v1040 - 2].__r_.__value_.__l.__data_;
          *((_QWORD *)v1041 - 4) = *((_QWORD *)&v1030[v1040 - 1] - 1);
          v1042[-2].__words[0] = 0;
          v1042[-2].__words[1] = 0;
          v1042[-2].__words[2] = 0;
          *((_QWORD *)v1041 - 3) = 0;
          *((_QWORD *)v1041 - 2) = 0;
          *((_QWORD *)v1041 - 1) = 0;
          *(_OWORD *)(v1041 - 24) = *(_OWORD *)&v1030[v1040 - 1].__r_.__value_.__l.__data_;
          *((_QWORD *)v1041 - 1) = *((_QWORD *)&v1030[v1040 - 1].__r_.__value_.__l + 2);
          v1042[-1].__words[0] = 0;
          v1042[-1].__words[1] = 0;
          v1042[-1].__words[2] = 0;
          v1040 -= 2;
        }
        while (&v1030[v1040] != v1031);
        v1043 = *(std::string **)v1271;
        v1030 = *(std::string **)&v1271[8];
        *(_QWORD *)v1271 = &v1037[v1040 * 24];
        *(_QWORD *)&v1271[8] = v1037 + 48;
        *(_QWORD *)&v1271[16] = v1038;
        if (v1030 != v1043)
        {
          do
          {
            v1030 -= 2;
            std::__destroy_at[abi:ne180100]<cpms::controllers::Power<float,cpms::smoothers::Exponential,clsp::AttackRelease>::GainGroupDescription,0>((uint64_t)v1030);
          }
          while (v1030 != v1043);
          v1030 = v1043;
        }
        if (!v1030)
          goto LABEL_2278;
      }
      operator delete(v1030);
      goto LABEL_2278;
    }
LABEL_2288:
    if (v1270.__r_.__value_.__r.__words[0])
      CFRelease(v1270.__r_.__value_.__l.__data_);
  }
  v1044 = this;
  v1045 = (void **)((char *)this + 920);
  if (*((_BYTE *)this + 944))
  {
    v1046 = *v1045;
    if (*v1045)
    {
      v1047 = *((_QWORD *)this + 116);
      v1048 = *v1045;
      if ((void *)v1047 != v1046)
      {
        do
        {
          v1047 -= 48;
          std::__destroy_at[abi:ne180100]<cpms::controllers::Power<float,cpms::smoothers::Exponential,clsp::AttackRelease>::GainGroupDescription,0>(v1047);
        }
        while ((void *)v1047 != v1046);
        v1048 = *v1045;
      }
      v1044 = this;
      *((_QWORD *)this + 116) = v1046;
      operator delete(v1048);
      *v1045 = 0;
      *((_QWORD *)this + 116) = 0;
      *((_QWORD *)this + 117) = 0;
    }
    *(_OWORD *)v1045 = *(_OWORD *)v1271;
    *((_QWORD *)v1044 + 117) = *(_QWORD *)&v1271[16];
    memset(v1271, 0, 24);
  }
  else
  {
    *(_OWORD *)v1045 = *(_OWORD *)v1271;
    *((_QWORD *)this + 117) = *(_QWORD *)&v1271[16];
    memset(v1271, 0, 24);
    *((_BYTE *)this + 944) = 1;
  }
  v1049 = (NSObject **)spp3Subsystem();
  if (v1049)
  {
    v1050 = *v1049;
    if (!*v1049)
      goto LABEL_2304;
  }
  else
  {
    v1050 = MEMORY[0x1E0C81028];
  }
  if (os_log_type_enabled(v1050, OS_LOG_TYPE_INFO))
  {
    LODWORD(buf[0].__r_.__value_.__l.__data_) = 136315394;
    *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)"AUSpeakerProtectionV3.cpp";
    WORD2(buf[0].__r_.__value_.__r.__words[1]) = 1024;
    *(_DWORD *)((char *)&buf[0].__r_.__value_.__r.__words[1] + 6) = 4053;
    _os_log_impl(&dword_1B5ED0000, v1050, OS_LOG_TYPE_INFO, "%25s:%-5d Successfully parsed the power group descriptions.", (uint8_t *)buf, 0x12u);
  }
LABEL_2304:
  buf[0].__r_.__value_.__r.__words[0] = (std::string::size_type)v1271;
  std::vector<cpms::controllers::Power<float,cpms::smoothers::Exponential,clsp::AttackRelease>::GainGroupDescription,std::allocator<cpms::controllers::Power<float,cpms::smoothers::Exponential,clsp::AttackRelease>::GainGroupDescription>>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
  if (!v1234)
  {
    v1156 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v1156, "Could not construct");
  }
  *((float *)this + 238) = applesauce::CF::details::find_at_key<float,char const(&)[18]>((const __CFDictionary *)v1234, "PowerGainLimit_dB");
  *((_BYTE *)this + 956) = 1;
  v1051 = (NSObject **)spp3Subsystem();
  if (v1051)
  {
    v1052 = *v1051;
    if (!*v1051)
      goto LABEL_2312;
  }
  else
  {
    v1052 = MEMORY[0x1E0C81028];
  }
  if (os_log_type_enabled(v1052, OS_LOG_TYPE_INFO))
  {
    if (!*((_BYTE *)this + 956))
      std::__throw_bad_optional_access[abi:ne180100]();
    v1053 = *((float *)this + 238);
    LODWORD(buf[0].__r_.__value_.__l.__data_) = 136315650;
    *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)"AUSpeakerProtectionV3.cpp";
    WORD2(buf[0].__r_.__value_.__r.__words[1]) = 1024;
    *(_DWORD *)((char *)&buf[0].__r_.__value_.__r.__words[1] + 6) = 4061;
    WORD1(buf[0].__r_.__value_.__r.__words[2]) = 2048;
    *(double *)((char *)&buf[0].__r_.__value_.__r.__words[2] + 4) = v1053;
    _os_log_impl(&dword_1B5ED0000, v1052, OS_LOG_TYPE_INFO, "%25s:%-5d Successfully parsed the power gain limit: %f", (uint8_t *)buf, 0x1Cu);
  }
LABEL_2312:
  if (!v1234)
  {
    v1157 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v1157, "Could not construct");
  }
  v1054 = applesauce::CF::details::find_at_key<BOOL,char const* const&>((const __CFDictionary *)v1234, clsp::plistV9::DisplacementEnable::key);
  v1055 = (NSObject **)spp3Subsystem();
  if (v1055)
  {
    v1056 = *v1055;
    if (!*v1055)
      goto LABEL_2337;
  }
  else
  {
    v1056 = MEMORY[0x1E0C81028];
  }
  if (os_log_type_enabled(v1056, OS_LOG_TYPE_INFO))
  {
    std::string::basic_string[abi:ne180100]<0>(&v1262, "EnableDisplacementControl");
    v1057 = std::string::append(&v1262, ": ", 2uLL);
    v1058 = *(_OWORD *)&v1057->__r_.__value_.__l.__data_;
    v1263.__r_.__value_.__r.__words[2] = v1057->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v1263.__r_.__value_.__l.__data_ = v1058;
    v1057->__r_.__value_.__l.__size_ = 0;
    v1057->__r_.__value_.__r.__words[2] = 0;
    v1057->__r_.__value_.__r.__words[0] = 0;
    if (v1054)
      v1059 = "true";
    else
      v1059 = "false";
    std::string::basic_string[abi:ne180100]<0>(v1271, v1059);
    if (v1271[23] >= 0)
      v1060 = v1271;
    else
      v1060 = *(const std::string::value_type **)v1271;
    if (v1271[23] >= 0)
      v1061 = v1271[23];
    else
      v1061 = *(_QWORD *)&v1271[8];
    v1062 = std::string::append(&v1263, v1060, v1061);
    v1063 = *(_OWORD *)&v1062->__r_.__value_.__l.__data_;
    v1270.__r_.__value_.__r.__words[2] = v1062->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v1270.__r_.__value_.__l.__data_ = v1063;
    v1062->__r_.__value_.__l.__size_ = 0;
    v1062->__r_.__value_.__r.__words[2] = 0;
    v1062->__r_.__value_.__r.__words[0] = 0;
    if ((v1271[23] & 0x80000000) != 0)
      operator delete(*(void **)v1271);
    if (SHIBYTE(v1263.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v1263.__r_.__value_.__l.__data_);
    if (SHIBYTE(v1262.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v1262.__r_.__value_.__l.__data_);
    v1064 = &v1270;
    if ((v1270.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v1064 = (std::string *)v1270.__r_.__value_.__r.__words[0];
    LODWORD(buf[0].__r_.__value_.__l.__data_) = 136315650;
    *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)"AUSpeakerProtectionV3.cpp";
    WORD2(buf[0].__r_.__value_.__r.__words[1]) = 1024;
    *(_DWORD *)((char *)&buf[0].__r_.__value_.__r.__words[1] + 6) = 4069;
    WORD1(buf[0].__r_.__value_.__r.__words[2]) = 2080;
    *(std::string::size_type *)((char *)&buf[0].__r_.__value_.__r.__words[2] + 4) = (std::string::size_type)v1064;
    _os_log_impl(&dword_1B5ED0000, v1056, OS_LOG_TYPE_INFO, "%25s:%-5d Successfully parsed the EnableDisplacementControl param: [ %s ]", (uint8_t *)buf, 0x1Cu);
    if (SHIBYTE(v1270.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v1270.__r_.__value_.__l.__data_);
  }
LABEL_2337:
  v1065 = *((_QWORD *)this + 9);
  if (v1065)
  {
    v1066 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v1065 + 32))(v1065, 0);
  }
  else
  {
    v1067 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v1067)
      v1066 = 0;
    else
      v1066 = *v1067;
  }
  ausdk::AUElement::SetParameter(v1066, 1u, (float)v1054, 0);
  if (!v1234)
  {
    v1158 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v1158, "Could not construct");
  }
  v1068 = applesauce::CF::details::find_at_key<BOOL,char const* const&>((const __CFDictionary *)v1234, clsp::plistV9::ThermalEnable::key);
  v1069 = (NSObject **)spp3Subsystem();
  if (v1069)
  {
    v1070 = *v1069;
    if (!*v1069)
      goto LABEL_2367;
  }
  else
  {
    v1070 = MEMORY[0x1E0C81028];
  }
  if (os_log_type_enabled(v1070, OS_LOG_TYPE_INFO))
  {
    std::string::basic_string[abi:ne180100]<0>(&v1264, "EnableThermalControl");
    v1071 = std::string::append(&v1264, ": ", 2uLL);
    v1072 = *(_OWORD *)&v1071->__r_.__value_.__l.__data_;
    v1265.__r_.__value_.__r.__words[2] = v1071->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v1265.__r_.__value_.__l.__data_ = v1072;
    v1071->__r_.__value_.__l.__size_ = 0;
    v1071->__r_.__value_.__r.__words[2] = 0;
    v1071->__r_.__value_.__r.__words[0] = 0;
    if (v1068)
      v1073 = "true";
    else
      v1073 = "false";
    std::string::basic_string[abi:ne180100]<0>(v1271, v1073);
    if (v1271[23] >= 0)
      v1074 = v1271;
    else
      v1074 = *(const std::string::value_type **)v1271;
    if (v1271[23] >= 0)
      v1075 = v1271[23];
    else
      v1075 = *(_QWORD *)&v1271[8];
    v1076 = std::string::append(&v1265, v1074, v1075);
    v1077 = *(_OWORD *)&v1076->__r_.__value_.__l.__data_;
    v1270.__r_.__value_.__r.__words[2] = v1076->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v1270.__r_.__value_.__l.__data_ = v1077;
    v1076->__r_.__value_.__l.__size_ = 0;
    v1076->__r_.__value_.__r.__words[2] = 0;
    v1076->__r_.__value_.__r.__words[0] = 0;
    if ((v1271[23] & 0x80000000) != 0)
      operator delete(*(void **)v1271);
    if (SHIBYTE(v1265.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v1265.__r_.__value_.__l.__data_);
    if (SHIBYTE(v1264.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v1264.__r_.__value_.__l.__data_);
    v1078 = &v1270;
    if ((v1270.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v1078 = (std::string *)v1270.__r_.__value_.__r.__words[0];
    LODWORD(buf[0].__r_.__value_.__l.__data_) = 136315650;
    *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)"AUSpeakerProtectionV3.cpp";
    WORD2(buf[0].__r_.__value_.__r.__words[1]) = 1024;
    *(_DWORD *)((char *)&buf[0].__r_.__value_.__r.__words[1] + 6) = 4077;
    WORD1(buf[0].__r_.__value_.__r.__words[2]) = 2080;
    *(std::string::size_type *)((char *)&buf[0].__r_.__value_.__r.__words[2] + 4) = (std::string::size_type)v1078;
    _os_log_impl(&dword_1B5ED0000, v1070, OS_LOG_TYPE_INFO, "%25s:%-5d Successfully parsed the EnableThermalControl param: [ %s ]", (uint8_t *)buf, 0x1Cu);
    if (SHIBYTE(v1270.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v1270.__r_.__value_.__l.__data_);
  }
LABEL_2367:
  v1079 = *((_QWORD *)this + 9);
  if (v1079)
  {
    v1080 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v1079 + 32))(v1079, 0);
  }
  else
  {
    v1081 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v1081)
      v1080 = 0;
    else
      v1080 = *v1081;
  }
  ausdk::AUElement::SetParameter(v1080, 0, (float)v1068, 0);
  if (!v1234)
  {
    v1159 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v1159, "Could not construct");
  }
  v1082 = applesauce::CF::details::find_at_key<BOOL,char const* const&>((const __CFDictionary *)v1234, clsp::plistV9::CPMSEnable::key);
  v1083 = (NSObject **)spp3Subsystem();
  if (v1083)
  {
    v1084 = *v1083;
    if (!*v1083)
      goto LABEL_2397;
  }
  else
  {
    v1084 = MEMORY[0x1E0C81028];
  }
  if (os_log_type_enabled(v1084, OS_LOG_TYPE_INFO))
  {
    std::string::basic_string[abi:ne180100]<0>(&v1266, "EnableCPMSControl");
    v1085 = std::string::append(&v1266, ": ", 2uLL);
    v1086 = *(_OWORD *)&v1085->__r_.__value_.__l.__data_;
    v1267.__r_.__value_.__r.__words[2] = v1085->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v1267.__r_.__value_.__l.__data_ = v1086;
    v1085->__r_.__value_.__l.__size_ = 0;
    v1085->__r_.__value_.__r.__words[2] = 0;
    v1085->__r_.__value_.__r.__words[0] = 0;
    if (v1082)
      v1087 = "true";
    else
      v1087 = "false";
    std::string::basic_string[abi:ne180100]<0>(v1271, v1087);
    if (v1271[23] >= 0)
      v1088 = v1271;
    else
      v1088 = *(const std::string::value_type **)v1271;
    if (v1271[23] >= 0)
      v1089 = v1271[23];
    else
      v1089 = *(_QWORD *)&v1271[8];
    v1090 = std::string::append(&v1267, v1088, v1089);
    v1091 = *(_OWORD *)&v1090->__r_.__value_.__l.__data_;
    v1270.__r_.__value_.__r.__words[2] = v1090->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v1270.__r_.__value_.__l.__data_ = v1091;
    v1090->__r_.__value_.__l.__size_ = 0;
    v1090->__r_.__value_.__r.__words[2] = 0;
    v1090->__r_.__value_.__r.__words[0] = 0;
    if ((v1271[23] & 0x80000000) != 0)
      operator delete(*(void **)v1271);
    if (SHIBYTE(v1267.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v1267.__r_.__value_.__l.__data_);
    if (SHIBYTE(v1266.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v1266.__r_.__value_.__l.__data_);
    v1092 = &v1270;
    if ((v1270.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v1092 = (std::string *)v1270.__r_.__value_.__r.__words[0];
    LODWORD(buf[0].__r_.__value_.__l.__data_) = 136315650;
    *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)"AUSpeakerProtectionV3.cpp";
    WORD2(buf[0].__r_.__value_.__r.__words[1]) = 1024;
    *(_DWORD *)((char *)&buf[0].__r_.__value_.__r.__words[1] + 6) = 4085;
    WORD1(buf[0].__r_.__value_.__r.__words[2]) = 2080;
    *(std::string::size_type *)((char *)&buf[0].__r_.__value_.__r.__words[2] + 4) = (std::string::size_type)v1092;
    _os_log_impl(&dword_1B5ED0000, v1084, OS_LOG_TYPE_INFO, "%25s:%-5d Successfully parsed the EnableCPMSControl param: [ %s ]", (uint8_t *)buf, 0x1Cu);
    if (SHIBYTE(v1270.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v1270.__r_.__value_.__l.__data_);
  }
LABEL_2397:
  v1093 = *((_QWORD *)this + 9);
  if (v1093)
  {
    v1094 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v1093 + 32))(v1093, 0);
  }
  else
  {
    v1095 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v1095)
      v1094 = 0;
    else
      v1094 = *v1095;
  }
  ausdk::AUElement::SetParameter(v1094, 0x12u, (float)v1082, 0);
  if (!v1234)
  {
    v1160 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v1160, "Could not construct");
  }
  v1096 = applesauce::CF::details::find_at_key<BOOL,char const* const&>((const __CFDictionary *)v1234, &clsp::plistV9::CPMSClosedLoopEnable::key);
  v1097 = (NSObject **)spp3Subsystem();
  if (v1097)
  {
    v1098 = *v1097;
    if (!*v1097)
      goto LABEL_2427;
  }
  else
  {
    v1098 = MEMORY[0x1E0C81028];
  }
  if (os_log_type_enabled(v1098, OS_LOG_TYPE_INFO))
  {
    std::string::basic_string[abi:ne180100]<0>(&v1270, "EnableCPMSClosedLoopControl");
    v1099 = std::string::append(&v1270, ": ", 2uLL);
    v1100 = *(_OWORD *)&v1099->__r_.__value_.__l.__data_;
    *(_QWORD *)&v1271[16] = *((_QWORD *)&v1099->__r_.__value_.__l + 2);
    *(_OWORD *)v1271 = v1100;
    v1099->__r_.__value_.__l.__size_ = 0;
    v1099->__r_.__value_.__r.__words[2] = 0;
    v1099->__r_.__value_.__r.__words[0] = 0;
    if (v1096)
      v1101 = "true";
    else
      v1101 = "false";
    std::string::basic_string[abi:ne180100]<0>(&v1268, v1101);
    if (SHIBYTE(end) >= 0)
      v1102 = (const std::string::value_type *)&v1268;
    else
      v1102 = (const std::string::value_type *)v1268;
    if (SHIBYTE(end) >= 0)
      v1103 = HIBYTE(end);
    else
      v1103 = *((_QWORD *)&v1268 + 1);
    v1104 = std::string::append((std::string *)v1271, v1102, v1103);
    v1105 = *(_OWORD *)&v1104->__r_.__value_.__l.__data_;
    v1244.__r_.__value_.__r.__words[2] = v1104->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v1244.__r_.__value_.__l.__data_ = v1105;
    v1104->__r_.__value_.__l.__size_ = 0;
    v1104->__r_.__value_.__r.__words[2] = 0;
    v1104->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(end) < 0)
      operator delete((void *)v1268);
    if ((v1271[23] & 0x80000000) != 0)
      operator delete(*(void **)v1271);
    if (SHIBYTE(v1270.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v1270.__r_.__value_.__l.__data_);
    v1106 = &v1244;
    if ((v1244.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v1106 = (std::string *)v1244.__r_.__value_.__r.__words[0];
    LODWORD(buf[0].__r_.__value_.__l.__data_) = 136315650;
    *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)"AUSpeakerProtectionV3.cpp";
    WORD2(buf[0].__r_.__value_.__r.__words[1]) = 1024;
    *(_DWORD *)((char *)&buf[0].__r_.__value_.__r.__words[1] + 6) = 4093;
    WORD1(buf[0].__r_.__value_.__r.__words[2]) = 2080;
    *(std::string::size_type *)((char *)&buf[0].__r_.__value_.__r.__words[2] + 4) = (std::string::size_type)v1106;
    _os_log_impl(&dword_1B5ED0000, v1098, OS_LOG_TYPE_INFO, "%25s:%-5d Successfully parsed the EnableCPMSClosedLoopControl param: [ %s ]", (uint8_t *)buf, 0x1Cu);
    if (SHIBYTE(v1244.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v1244.__r_.__value_.__l.__data_);
  }
LABEL_2427:
  v1107 = *((_QWORD *)this + 9);
  if (v1107)
  {
    v1108 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v1107 + 32))(v1107, 0);
  }
  else
  {
    v1109 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v1109)
      v1108 = 0;
    else
      v1108 = *v1109;
  }
  ausdk::AUElement::SetParameter(v1108, 0x13u, (float)v1096, 0);
  if (v1234)
    CFRelease(v1234);
  return 0;
}

void sub_1B64275C4(_Unwind_Exception *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  _Unwind_Resume(a1);
}

void sub_1B6429C3C(_Unwind_Exception *a1, int a2)
{
  void *v2;

  if (a2)
  {
    __cxa_end_catch();
    if (v2)
      operator delete(v2);
    applesauce::CF::DictionaryRef::~DictionaryRef((const void **)&STACK[0x4F0]);
    JUMPOUT(0x1B6429C60);
  }
  _Unwind_Resume(a1);
}

void sub_1B6429D10(uint64_t a1, int a2)
{
  if (a2)
    JUMPOUT(0x1B64295ACLL);
  JUMPOUT(0x1B6429C2CLL);
}

void sub_1B6429D18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,const void *a52)
{
  __cxa_end_catch();
  applesauce::CF::DictionaryRef::~DictionaryRef(&a52);
  _Unwind_Resume(a1);
}

void sub_1B6429D24(_Unwind_Exception *a1, int a2)
{
  void *v2;

  if (a2)
  {
    __cxa_end_catch();
    if (v2)
      operator delete(v2);
    applesauce::CF::DictionaryRef::~DictionaryRef((const void **)&STACK[0x4F0]);
    JUMPOUT(0x1B6429D48);
  }
  _Unwind_Resume(a1);
}

void sub_1B6429DE0(uint64_t a1, int a2)
{
  if (a2)
    JUMPOUT(0x1B64295ACLL);
  JUMPOUT(0x1B6429C2CLL);
}

void sub_1B6429DE8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,const void *a52)
{
  __cxa_end_catch();
  applesauce::CF::DictionaryRef::~DictionaryRef(&a52);
  JUMPOUT(0x1B642A280);
}

void sub_1B6429DF4(_Unwind_Exception *a1, int a2)
{
  if (a2)
  {
    __cxa_end_catch();
    STACK[0x550] = (unint64_t)&STACK[0x530];
    std::vector<clsp::plistV9::PerSpeakerParamMapper<clsp::plistV9::SpeakerNameStruct>>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x550]);
    applesauce::CF::DictionaryRef::~DictionaryRef((const void **)&STACK[0x4F0]);
    JUMPOUT(0x1B6429E1CLL);
  }
  _Unwind_Resume(a1);
}

void sub_1B6429EB4(uint64_t a1, int a2)
{
  if (a2)
    JUMPOUT(0x1B64295ACLL);
  JUMPOUT(0x1B6429C2CLL);
}

void sub_1B6429EBC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,const void *a52)
{
  __cxa_end_catch();
  applesauce::CF::DictionaryRef::~DictionaryRef(&a52);
  JUMPOUT(0x1B642A280);
}

void sub_1B6429EC8(_Unwind_Exception *a1, int a2)
{
  if (a2)
  {
    __cxa_end_catch();
    STACK[0x550] = (unint64_t)&STACK[0x470];
    std::vector<clsp::plistV9::PerSpeakerParamMapper<clsp::plistV9::ClosedLoopParametersStruct>>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x550]);
    applesauce::CF::DictionaryRef::~DictionaryRef((const void **)&STACK[0x510]);
    JUMPOUT(0x1B6429EF0);
  }
  _Unwind_Resume(a1);
}

void sub_1B6429EF8(uint64_t a1, int a2)
{
  if (a2)
    JUMPOUT(0x1B64295ACLL);
  JUMPOUT(0x1B6429C2CLL);
}

void sub_1B6429F04(_Unwind_Exception *a1, int a2)
{
  void *v3;
  NSObject **v4;
  NSObject *v5;

  if (!a2)
    _Unwind_Resume(a1);
  v3 = (void *)STACK[0x230];
  if (STACK[0x230])
  {
    STACK[0x238] = (unint64_t)v3;
    operator delete(v3);
  }
  vp::vx::io::Direction_Pair<std::vector<std::tuple<unsigned int,vp::services::Audio_Issue_Detector_Node_ID>>>::~Direction_Pair((uint64_t)&STACK[0x550]);
  applesauce::CF::DictionaryRef::~DictionaryRef((const void **)&STACK[0x4F0]);
  applesauce::CF::ArrayRef::~ArrayRef((const void **)&STACK[0x510]);
  STACK[0x550] = (unint64_t)&STACK[0x530];
  std::vector<cpms::controllers::Power<float,cpms::smoothers::Exponential,clsp::AttackRelease>::GainGroupDescription,std::allocator<cpms::controllers::Power<float,cpms::smoothers::Exponential,clsp::AttackRelease>::GainGroupDescription>>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x550]);
  __cxa_begin_catch(a1);
  v4 = (NSObject **)spp3Subsystem();
  if (v4)
  {
    v5 = *v4;
    if (!*v4)
      goto LABEL_10;
  }
  else
  {
    v5 = MEMORY[0x1E0C81028];
  }
  if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
  {
    LODWORD(STACK[0x550]) = 136315394;
    STACK[0x554] = (unint64_t)"AUSpeakerProtectionV3.cpp";
    LOWORD(STACK[0x55C]) = 1024;
    LODWORD(STACK[0x55E]) = 4055;
    _os_log_impl(&dword_1B5ED0000, v5, OS_LOG_TYPE_INFO, "%25s:%-5d Could not fully parse the power group descriptions. Will use the default", (uint8_t *)&STACK[0x550], 0x12u);
  }
LABEL_10:
  __cxa_end_catch();
  JUMPOUT(0x1B6425DD0);
}

void sub_1B6429FD0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,const void *a52)
{
  __cxa_end_catch();
  applesauce::CF::DictionaryRef::~DictionaryRef(&a52);
  JUMPOUT(0x1B642A280);
}

void sub_1B6429FE8(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,int a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,const void *a53)
{
  int v53;
  uint64_t v54;
  NSObject **v56;
  NSObject *v57;

  if (!a2)
    _Unwind_Resume(a1);
  applesauce::CF::DictionaryRef::~DictionaryRef((const void **)(v54 - 208));
  applesauce::CF::DictionaryRef::~DictionaryRef(&a53);
  __cxa_begin_catch(a1);
  v56 = (NSObject **)spp3Subsystem();
  if (v56)
  {
    v57 = *v56;
    if (!*v56)
      goto LABEL_7;
  }
  else
  {
    v57 = MEMORY[0x1E0C81028];
  }
  if (os_log_type_enabled(v57, OS_LOG_TYPE_ERROR))
  {
    LODWORD(STACK[0x550]) = a37;
    STACK[0x554] = (unint64_t)"AUSpeakerProtectionV3.cpp";
    LOWORD(STACK[0x55C]) = 1024;
    LODWORD(STACK[0x55E]) = 3792;
    LOWORD(STACK[0x562]) = 2080;
    STACK[0x564] = (unint64_t)"OL_disp";
    LOWORD(STACK[0x56C]) = 1024;
    LODWORD(STACK[0x56E]) = v53;
    _os_log_impl(&dword_1B5ED0000, v57, OS_LOG_TYPE_ERROR, "%25s:%-5d Failed to fully parse the %s plist entry for channel %i.", (uint8_t *)&STACK[0x550], 0x22u);
  }
LABEL_7:
  __cxa_rethrow();
}

void sub_1B642A0A4(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,void *__p)
{
  if (a2)
  {
    __cxa_end_catch();
    if (__p)
      operator delete(__p);
    applesauce::CF::DictionaryRef::~DictionaryRef((const void **)&STACK[0x530]);
    JUMPOUT(0x1B642A1D0);
  }
  _Unwind_Resume(a1);
}

void sub_1B642A0D4(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,int a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,const void *a53)
{
  int v53;
  uint64_t v54;
  NSObject **v56;
  NSObject *v57;

  if (!a2)
    _Unwind_Resume(a1);
  applesauce::CF::DictionaryRef::~DictionaryRef((const void **)(v54 - 208));
  applesauce::CF::DictionaryRef::~DictionaryRef(&a53);
  __cxa_begin_catch(a1);
  v56 = (NSObject **)spp3Subsystem();
  if (v56)
  {
    v57 = *v56;
    if (!*v56)
      goto LABEL_7;
  }
  else
  {
    v57 = MEMORY[0x1E0C81028];
  }
  if (os_log_type_enabled(v57, OS_LOG_TYPE_ERROR))
  {
    LODWORD(STACK[0x550]) = a35;
    STACK[0x554] = (unint64_t)"AUSpeakerProtectionV3.cpp";
    LOWORD(STACK[0x55C]) = 1024;
    LODWORD(STACK[0x55E]) = 3792;
    LOWORD(STACK[0x562]) = 2080;
    STACK[0x564] = (unint64_t)"OL_thermal";
    LOWORD(STACK[0x56C]) = 1024;
    LODWORD(STACK[0x56E]) = v53;
    _os_log_impl(&dword_1B5ED0000, v57, OS_LOG_TYPE_ERROR, "%25s:%-5d Failed to fully parse the %s plist entry for channel %i.", (uint8_t *)&STACK[0x550], 0x22u);
  }
LABEL_7:
  __cxa_rethrow();
}

void sub_1B642A190(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,void *__p)
{
  if (a2)
  {
    __cxa_end_catch();
    if (__p)
      operator delete(__p);
    applesauce::CF::DictionaryRef::~DictionaryRef((const void **)&STACK[0x530]);
    JUMPOUT(0x1B642A1DCLL);
  }
  _Unwind_Resume(a1);
}

void sub_1B642A1BC(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,void *__p,void *a41)
{
  NSObject **v42;
  NSObject *v43;

  if (!a2)
    _Unwind_Resume(a1);
  if (__p)
    operator delete(__p);
  if (a41)
    operator delete(a41);
  __cxa_begin_catch(a1);
  v42 = (NSObject **)spp3Subsystem();
  if (v42)
  {
    v43 = *v42;
    if (!*v42)
      goto LABEL_12;
  }
  else
  {
    v43 = MEMORY[0x1E0C81028];
  }
  if (os_log_type_enabled(v43, OS_LOG_TYPE_ERROR))
  {
    LODWORD(STACK[0x550]) = 136315394;
    STACK[0x554] = (unint64_t)"AUSpeakerProtectionV3.cpp";
    LOWORD(STACK[0x55C]) = 1024;
    LODWORD(STACK[0x55E]) = 3876;
    _os_log_impl(&dword_1B5ED0000, v43, OS_LOG_TYPE_ERROR, "%25s:%-5d Could not fully parse all essential plist params.", (uint8_t *)&STACK[0x550], 0x12u);
  }
LABEL_12:
  __cxa_end_catch();
  JUMPOUT(0x1B6426614);
}

void sub_1B642A26C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,const void *a52)
{
  __cxa_end_catch();
  applesauce::CF::DictionaryRef::~DictionaryRef(&a52);
  JUMPOUT(0x1B642A280);
}

void sub_1B642A278(void *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,const void *a53)
{
  int v53;
  uint64_t v54;
  NSObject **v56;
  NSObject *v57;

  if (!a2)
    JUMPOUT(0x1B642A280);
  applesauce::CF::DictionaryRef::~DictionaryRef((const void **)(v54 - 208));
  applesauce::CF::DictionaryRef::~DictionaryRef(&a53);
  __cxa_begin_catch(a1);
  v56 = (NSObject **)spp3Subsystem();
  if (v56)
  {
    v57 = *v56;
    if (!*v56)
      goto LABEL_8;
  }
  else
  {
    v57 = MEMORY[0x1E0C81028];
  }
  if (os_log_type_enabled(v57, OS_LOG_TYPE_ERROR))
  {
    LODWORD(STACK[0x550]) = a9;
    STACK[0x554] = (unint64_t)"AUSpeakerProtectionV3.cpp";
    LOWORD(STACK[0x55C]) = 1024;
    LODWORD(STACK[0x55E]) = 3792;
    LOWORD(STACK[0x562]) = 2080;
    STACK[0x564] = (unint64_t)"CL";
    LOWORD(STACK[0x56C]) = 1024;
    LODWORD(STACK[0x56E]) = v53;
    _os_log_impl(&dword_1B5ED0000, v57, OS_LOG_TYPE_ERROR, "%25s:%-5d Failed to fully parse the %s plist entry for channel %i.", (uint8_t *)&STACK[0x550], 0x22u);
  }
LABEL_8:
  __cxa_rethrow();
}

void sub_1B642A33C(_Unwind_Exception *a1, int a2)
{
  void *v2;

  if (a2)
  {
    __cxa_end_catch();
    if (v2)
      operator delete(v2);
    applesauce::CF::DictionaryRef::~DictionaryRef((const void **)&STACK[0x530]);
    JUMPOUT(0x1B642A390);
  }
  _Unwind_Resume(a1);
}

void sub_1B642A364(uint64_t a1, int a2)
{
  if (a2)
    JUMPOUT(0x1B64295ACLL);
  JUMPOUT(0x1B6429C2CLL);
}

void sub_1B642A36C(_Unwind_Exception *a1, int a2)
{
  if (a2)
    JUMPOUT(0x1B642A374);
  _Unwind_Resume(a1);
}

void sub_1B642A3D4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52)
{
  applesauce::CF::DictionaryRef::~DictionaryRef((applesauce::CF::DictionaryRef *)&a52);
  JUMPOUT(0x1B642A280);
}

void sub_1B642A3DC()
{
  __cxa_end_catch();
  JUMPOUT(0x1B642A3E4);
}

void sub_1B642A3F0(uint64_t a1, int a2)
{
  if (a2)
    JUMPOUT(0x1B64295ACLL);
  JUMPOUT(0x1B6429C2CLL);
}

void clsp::ThermalStateVector_v3_separate<clsp::EL>::SetNumChannels(unsigned int a1, int a2)
{
  _BYTE *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t i;

  clsp::ThermalStateVector_v3_separate<clsp::EL>::TheInstance();
  if (byte_1EF136E80)
  {
    std::vector<clsp::ThermalState_v3>::resize((void **)&clsp::ThermalStateVector_v3_separate<clsp::EL>::TheInstance(void)::inst, a1);
    byte_1EF136E80 = 0;
  }
  if (a2 == 2)
  {
    std::vector<clsp::ThermalState_v3>::resize((void **)&clsp::ThermalStateVector_v3_separate<clsp::EL>::TheInstance(void)::inst, a1);
    v6 = clsp::ThermalStateVector_v3_separate<clsp::EL>::TheInstance(void)::inst;
    for (i = qword_1EF136E70; v6 != i; v6 += 24)
    {
      *(_OWORD *)(v6 + 4) = xmmword_1B6629CC0;
      *(_DWORD *)(v6 + 20) = 1065353216;
      *(_BYTE *)v6 = 1;
    }
  }
  else if (a2 == 1)
  {
    std::vector<clsp::ThermalState_v3>::resize((void **)&clsp::ThermalStateVector_v3_separate<clsp::EL>::TheInstance(void)::inst, a1);
    v4 = (_BYTE *)clsp::ThermalStateVector_v3_separate<clsp::EL>::TheInstance(void)::inst;
    v5 = qword_1EF136E70;
    while (v4 != (_BYTE *)v5)
    {
      *v4 = 0;
      v4 += 24;
    }
  }
}

applesauce::CF::DictionaryRef *applesauce::CF::details::find_at_key<applesauce::CF::DictionaryRef,char const(&)[22]>(applesauce::CF::DictionaryRef *a1, const __CFDictionary *a2)
{
  const void *v3;
  const void *v4;
  std::runtime_error *exception;

  v3 = applesauce::CF::details::at_key<char const(&)[22]>(a2, "ChannelSpecificParams");
  if (!v3)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    applesauce::CF::not_found(exception);
  }
  v4 = v3;
  CFRetain(v3);
  return applesauce::CF::DictionaryRef::DictionaryRef(a1, v4);
}

void sub_1B642A534(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void std::vector<clsp::plistV9::PerSpeakerParamMapper<clsp::plistV9::ClosedLoopParametersStruct>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  char *v2;
  char *v4;
  void *v5;
  uint64_t v6;

  v1 = *a1;
  v2 = (char *)**a1;
  if (v2)
  {
    v4 = (char *)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v6 = *((_QWORD *)v4 - 1);
        *((_QWORD *)v4 - 1) = 0;
        if (v6)
          std::default_delete<clsp::ClosedLoopParameters>::operator()[abi:ne180100](v6);
        v4 -= 16;
      }
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t std::__split_buffer<std::unique_ptr<clsp::ClosedLoopParameters>>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 8;
    v4 = *(_QWORD *)(i - 8);
    *(_QWORD *)(i - 8) = 0;
    if (v4)
      std::default_delete<clsp::ClosedLoopParameters>::operator()[abi:ne180100](v4);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void std::vector<clsp::plistV9::PerSpeakerParamMapper<clsp::plistV9::SpeakerNameStruct>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  void **v2;
  void **v4;
  void *v5;

  v1 = *a1;
  v2 = (void **)**a1;
  if (v2)
  {
    v4 = (void **)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        if (*((char *)v4 - 1) < 0)
          operator delete(*(v4 - 3));
        v4 -= 4;
      }
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

applesauce::CF::ArrayRef *applesauce::CF::details::find_at_key<applesauce::CF::ArrayRef,char const(&)[16]>(applesauce::CF::ArrayRef *a1, const __CFDictionary *a2, char *a3)
{
  const void *v4;
  const void *v5;
  std::runtime_error *exception;

  v4 = applesauce::CF::details::at_key<char const(&)[16]>(a2, a3);
  if (!v4)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    applesauce::CF::not_found(exception);
  }
  v5 = v4;
  CFRetain(v4);
  return applesauce::CF::ArrayRef::ArrayRef(a1, v5);
}

void sub_1B642A6FC(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void std::vector<cpms::TimeScale<float>>::push_back[abi:ne180100](uint64_t *a1, uint64_t a2)
{
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  int64x2_t v18;
  char *v19;
  char *v20;
  const void *v21;

  v4 = a1[1];
  v5 = a1[2];
  if (v4 >= v5)
  {
    v7 = (uint64_t)(v4 - *a1) >> 5;
    if ((unint64_t)(v7 + 1) >> 59)
      std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
    v8 = v5 - *a1;
    v9 = v8 >> 4;
    if (v8 >> 4 <= (unint64_t)(v7 + 1))
      v9 = v7 + 1;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFE0)
      v10 = 0x7FFFFFFFFFFFFFFLL;
    else
      v10 = v9;
    if (v10)
    {
      if (v10 >> 59)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v11 = (char *)operator new(32 * v10);
    }
    else
    {
      v11 = 0;
    }
    v12 = &v11[32 * v10];
    v13 = std::construct_at[abi:ne180100]<cpms::TimeScale<float>,cpms::TimeScale<float> const&,cpms::TimeScale<float>*>((uint64_t)&v11[32 * v7], a2);
    v6 = v13 + 32;
    v15 = *a1;
    v14 = a1[1];
    if (v14 == *a1)
    {
      v18 = vdupq_n_s64(v14);
    }
    else
    {
      do
      {
        v16 = *(_QWORD *)(v14 - 32);
        v14 -= 32;
        *(_QWORD *)(v13 - 32) = v16;
        v13 -= 32;
        *(_QWORD *)v14 = 0;
        v17 = *(_OWORD *)(v14 + 8);
        *(_QWORD *)(v13 + 21) = *(_QWORD *)(v14 + 21);
        *(_OWORD *)(v13 + 8) = v17;
      }
      while (v14 != v15);
      v18 = *(int64x2_t *)a1;
    }
    *a1 = v13;
    a1[1] = v6;
    a1[2] = (uint64_t)v12;
    v20 = (char *)v18.i64[1];
    v19 = (char *)v18.i64[0];
    while (v20 != v19)
    {
      v21 = (const void *)*((_QWORD *)v20 - 4);
      v20 -= 32;
      std::__destroy_at[abi:ne180100]<cpms::TimeScale<float>,0>(v21);
    }
    if (v19)
      operator delete(v19);
  }
  else
  {
    v6 = std::construct_at[abi:ne180100]<cpms::TimeScale<float>,cpms::TimeScale<float> const&,cpms::TimeScale<float>*>(v4, a2)+ 32;
  }
  a1[1] = v6;
}

const void **cpms::TimeScale<float>::~TimeScale(const void **a1)
{
  const void *v2;

  v2 = *a1;
  if (v2)
    CFRelease(v2);
  return a1;
}

void std::vector<cpms::TimeScale<float>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  char *v2;
  char *v4;
  void *v5;
  const void *v6;

  v1 = *a1;
  v2 = (char *)**a1;
  if (v2)
  {
    v4 = (char *)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v6 = (const void *)*((_QWORD *)v4 - 4);
        v4 -= 32;
        std::__destroy_at[abi:ne180100]<cpms::TimeScale<float>,0>(v6);
      }
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::vector<cpms::controllers::Power<float,cpms::smoothers::Exponential,clsp::AttackRelease>::GainGroupDescription,std::allocator<cpms::controllers::Power<float,cpms::smoothers::Exponential,clsp::AttackRelease>::GainGroupDescription>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  void *v2;
  uint64_t v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = (uint64_t)v1[1];
    v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 48;
        std::__destroy_at[abi:ne180100]<cpms::controllers::Power<float,cpms::smoothers::Exponential,clsp::AttackRelease>::GainGroupDescription,0>(v4);
      }
      while ((void *)v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

BOOL applesauce::CF::details::find_at_key<BOOL,char const* const&>(const __CFDictionary *a1, char **a2)
{
  const __CFNumber *v2;
  std::runtime_error *exception;

  v2 = (const __CFNumber *)applesauce::CF::details::at_key<char const* const&>(a1, a2);
  if (!v2)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    applesauce::CF::not_found(exception);
  }
  return applesauce::CF::convert_to<BOOL,0>(v2);
}

void sub_1B642A998(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void std::__destroy_at[abi:ne180100]<cpms::controllers::Power<float,cpms::smoothers::Exponential,clsp::AttackRelease>::GainGroupDescription,0>(uint64_t a1)
{
  void *v2;
  void *v3;

  v2 = *(void **)(a1 + 24);
  if (v2)
  {
    *(_QWORD *)(a1 + 32) = v2;
    operator delete(v2);
  }
  v3 = *(void **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)(a1 + 8) = v3;
    operator delete(v3);
  }
}

void applesauce::CF::convert_to<std::vector<unsigned int>,0>(std::vector<unsigned int> *a1, const void *a2)
{
  CFTypeID TypeID;
  int Count;
  CFIndex v6;
  uint64_t v7;
  const __CFNumber *ValueAtIndex;
  unsigned int v9;
  unsigned int v10;
  unsigned int *value;
  std::vector<unsigned int>::pointer end;
  unsigned int *v13;
  std::vector<unsigned int>::pointer begin;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char *v19;
  unsigned int *v20;
  unsigned int v21;
  std::runtime_error *exception;

  TypeID = CFArrayGetTypeID();
  if (TypeID != CFGetTypeID(a2))
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    applesauce::CF::convert_error(exception);
  }
  Count = CFArrayGetCount((CFArrayRef)a2);
  a1->__end_ = 0;
  a1->__end_cap_.__value_ = 0;
  a1->__begin_ = 0;
  std::vector<unsigned int>::reserve(a1, Count);
  if (Count >= 1)
  {
    v6 = 0;
    v7 = Count;
    do
    {
      ValueAtIndex = (const __CFNumber *)CFArrayGetValueAtIndex((CFArrayRef)a2, v6);
      v9 = applesauce::CF::convert_to<unsigned int,0>(ValueAtIndex);
      v10 = v9;
      end = a1->__end_;
      value = a1->__end_cap_.__value_;
      if (end >= value)
      {
        begin = a1->__begin_;
        v15 = end - a1->__begin_;
        v16 = v15 + 1;
        if ((unint64_t)(v15 + 1) >> 62)
          std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
        v17 = (char *)value - (char *)begin;
        if (v17 >> 1 > v16)
          v16 = v17 >> 1;
        if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFFCLL)
          v18 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v18 = v16;
        if (v18)
        {
          v19 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>((uint64_t)&a1->__end_cap_, v18);
          begin = a1->__begin_;
          end = a1->__end_;
        }
        else
        {
          v19 = 0;
        }
        v20 = (unsigned int *)&v19[4 * v15];
        *v20 = v10;
        v13 = v20 + 1;
        while (end != begin)
        {
          v21 = *--end;
          *--v20 = v21;
        }
        a1->__begin_ = v20;
        a1->__end_ = v13;
        a1->__end_cap_.__value_ = (unsigned int *)&v19[4 * v18];
        if (begin)
          operator delete(begin);
      }
      else
      {
        *end = v9;
        v13 = end + 1;
      }
      a1->__end_ = v13;
      ++v6;
    }
    while (v6 != v7);
  }
}

void sub_1B642AB78(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void std::__destroy_at[abi:ne180100]<cpms::TimeScale<float>,0>(const void *a1)
{
  if (a1)
    CFRelease(a1);
}

uint64_t std::construct_at[abi:ne180100]<cpms::TimeScale<float>,cpms::TimeScale<float> const&,cpms::TimeScale<float>*>(uint64_t a1, uint64_t a2)
{
  CFTypeRef v4;
  __int128 v5;

  v4 = *(CFTypeRef *)a2;
  if (*(_QWORD *)a2)
    CFRetain(*(CFTypeRef *)a2);
  *(_QWORD *)a1 = v4;
  v5 = *(_OWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 21) = *(_QWORD *)(a2 + 21);
  *(_OWORD *)(a1 + 8) = v5;
  return a1;
}

void std::__shared_ptr_pointer<cpms::efficiency::AmpModelBase<float> *>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1BCC95CECLL);
}

uint64_t std::__shared_ptr_pointer<cpms::efficiency::AmpModelBase<float> *>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

applesauce::CF::DictionaryRef *applesauce::CF::details::find_at_key<applesauce::CF::DictionaryRef,std::string>(applesauce::CF::DictionaryRef *a1, const __CFDictionary *a2, uint64_t a3)
{
  const void *Value;
  int v6;
  const UInt8 *v7;
  CFIndex v8;
  CFStringRef v9;
  std::runtime_error *exception;
  std::runtime_error *v12;

  v6 = *(char *)(a3 + 23);
  if (v6 >= 0)
    v7 = (const UInt8 *)a3;
  else
    v7 = *(const UInt8 **)a3;
  if (v6 >= 0)
    v8 = *(unsigned __int8 *)(a3 + 23);
  else
    v8 = *(_QWORD *)(a3 + 8);
  v9 = CFStringCreateWithBytes(0, v7, v8, 0x8000100u, 0);
  if (!v9)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
  }
  if (a2)
    Value = CFDictionaryGetValue(a2, v9);
  CFRelease(v9);
  if (!a2 || !Value)
  {
    v12 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    applesauce::CF::not_found(v12);
  }
  CFRetain(Value);
  return applesauce::CF::DictionaryRef::DictionaryRef(a1, Value);
}

void sub_1B642AD9C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void clsp::ScopedParamStruct<clsp::plistV9::ConvoyNormFactorCapLower,clsp::plistV9::ConvoyPeakRatioPosBlockThreshold,clsp::plistV9::ConvoyPeakRatioNegBlockThreshold,clsp::plistV9::ConvoyRelXLimUpper,clsp::plistV9::ConvoyRelXLimLower,clsp::plistV9::ConvoyNormFactorAttack,clsp::plistV9::ConvoyNormFactorRelease,clsp::plistV9::ConvoyPeakDetectorAtkTime,clsp::plistV9::ConvoyPeakDetectorRelTime,clsp::plistV9::ConvoyPeakRatiosInWindowCountThreshold,clsp::plistV9::ConvoyNormFactorThreshold,clsp::plistV9::ConvoyBufferDirtyCountThreshold_ms>::toString(std::string *a1, float *a2)
{
  std::string *v4;
  std::string *v5;
  __int128 v6;
  uint64_t v7;
  std::string *v8;
  uint64_t v9;
  std::string *v10;
  std::string *v11;
  std::string::size_type size;
  std::string *v13;
  __int128 v14;
  std::string *v15;
  __int128 v16;
  std::string *v17;
  std::string *v18;
  __int128 v19;
  uint64_t v20;
  std::string *v21;
  uint64_t v22;
  std::string *v23;
  std::string *v24;
  std::string::size_type v25;
  std::string *v26;
  __int128 v27;
  std::string *v28;
  __int128 v29;
  std::string *v30;
  std::string *v31;
  __int128 v32;
  uint64_t v33;
  std::string *v34;
  uint64_t v35;
  std::string *v36;
  std::string *v37;
  std::string::size_type v38;
  std::string *v39;
  __int128 v40;
  std::string *v41;
  __int128 v42;
  std::string *v43;
  std::string *v44;
  __int128 v45;
  uint64_t v46;
  std::string *v47;
  uint64_t v48;
  std::string *v49;
  std::string *v50;
  std::string::size_type v51;
  std::string *v52;
  __int128 v53;
  std::string *v54;
  __int128 v55;
  std::string *v56;
  std::string *v57;
  __int128 v58;
  uint64_t v59;
  std::string *v60;
  uint64_t v61;
  std::string *v62;
  std::string *v63;
  std::string::size_type v64;
  std::string *v65;
  __int128 v66;
  std::string *v67;
  __int128 v68;
  std::string *v69;
  std::string *v70;
  __int128 v71;
  uint64_t v72;
  std::string *v73;
  uint64_t v74;
  std::string *v75;
  std::string *v76;
  std::string::size_type v77;
  std::string *v78;
  __int128 v79;
  std::string *v80;
  __int128 v81;
  std::string *v82;
  std::string *v83;
  __int128 v84;
  uint64_t v85;
  std::string *v86;
  uint64_t v87;
  std::string *v88;
  std::string *v89;
  std::string::size_type v90;
  std::string *v91;
  __int128 v92;
  std::string *v93;
  __int128 v94;
  std::string *v95;
  std::string *v96;
  __int128 v97;
  uint64_t v98;
  std::string *v99;
  uint64_t v100;
  std::string *v101;
  std::string *v102;
  std::string::size_type v103;
  std::string *v104;
  __int128 v105;
  std::string *v106;
  __int128 v107;
  std::string *v108;
  std::string *v109;
  __int128 v110;
  uint64_t v111;
  std::string *v112;
  uint64_t v113;
  std::string *v114;
  std::string *v115;
  std::string::size_type v116;
  std::string *v117;
  __int128 v118;
  std::string *v119;
  __int128 v120;
  std::string *v121;
  std::string *v122;
  __int128 v123;
  uint64_t v124;
  std::string *v125;
  uint64_t v126;
  std::string *v127;
  std::string *v128;
  std::string::size_type v129;
  std::string *v130;
  __int128 v131;
  std::string *v132;
  __int128 v133;
  std::string *v134;
  std::string *v135;
  __int128 v136;
  uint64_t v137;
  std::string *v138;
  uint64_t v139;
  std::string *v140;
  std::string *v141;
  std::string::size_type v142;
  std::string *v143;
  __int128 v144;
  std::string *v145;
  __int128 v146;
  std::string *v147;
  std::string *v148;
  __int128 v149;
  uint64_t v150;
  std::string *v151;
  uint64_t v152;
  std::string *v153;
  std::string *v154;
  std::string::size_type v155;
  std::string *v156;
  __int128 v157;
  void **v158;
  std::string::size_type v159;
  std::string *v160;
  __int128 v161;
  void **v162;
  std::string::size_type v163;
  std::string *v164;
  __int128 v165;
  void **v166;
  std::string::size_type v167;
  std::string *v168;
  __int128 v169;
  void **v170;
  std::string::size_type v171;
  std::string *v172;
  __int128 v173;
  void **v174;
  std::string::size_type v175;
  std::string *v176;
  __int128 v177;
  void **v178;
  std::string::size_type v179;
  std::string *v180;
  __int128 v181;
  void **v182;
  std::string::size_type v183;
  std::string *v184;
  __int128 v185;
  void **v186;
  std::string::size_type v187;
  std::string *v188;
  __int128 v189;
  void **v190;
  std::string::size_type v191;
  std::string *v192;
  __int128 v193;
  void **v194;
  std::string::size_type v195;
  std::string *v196;
  __int128 v197;
  void **v198;
  std::string::size_type v199;
  std::string *v200;
  void *v201[2];
  int64_t v202;
  std::string v203;
  std::string v204;
  void *v205[2];
  int64_t v206;
  std::string v207;
  std::string v208;
  void *v209[2];
  int64_t v210;
  std::string v211;
  std::string v212;
  void *v213[2];
  int64_t v214;
  std::string v215;
  std::string v216;
  void *v217[2];
  int64_t v218;
  std::string v219;
  std::string v220;
  void *v221[2];
  int64_t v222;
  std::string v223;
  std::string v224;
  void *v225[2];
  int64_t v226;
  std::string v227;
  std::string v228;
  void *v229[2];
  int64_t v230;
  std::string v231;
  std::string v232;
  void *v233[2];
  int64_t v234;
  std::string v235;
  std::string v236;
  void *v237[2];
  int64_t v238;
  std::string v239;
  std::string v240;
  void *__p[2];
  int64_t v242;
  std::string v243;
  std::string v244;
  std::string v245;
  void *v246[2];
  char v247;
  std::string v248;
  std::string v249;
  std::string v250;

  v4 = (std::string *)std::string::basic_string[abi:ne180100]<0>(v246, "ConvoyNormFactorCapLower");
  v5 = std::string::append(v4, ": ", 2uLL);
  v6 = *(_OWORD *)&v5->__r_.__value_.__l.__data_;
  v248.__r_.__value_.__r.__words[2] = v5->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v248.__r_.__value_.__l.__data_ = v6;
  v5->__r_.__value_.__l.__size_ = 0;
  v5->__r_.__value_.__r.__words[2] = 0;
  v5->__r_.__value_.__r.__words[0] = 0;
  std::to_string(&v249, *a2);
  while ((SHIBYTE(v249.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if (*((_BYTE *)&v248.__r_.__value_.__r.__words[2] + HIBYTE(v249.__r_.__value_.__r.__words[2]) + 7) != 48)
      goto LABEL_8;
    v7 = HIBYTE(v249.__r_.__value_.__r.__words[2]) - 1;
    *((_BYTE *)&v249.__r_.__value_.__s + 23) = (*((_BYTE *)&v249.__r_.__value_.__s + 23) - 1) & 0x7F;
    v8 = &v249;
LABEL_7:
    v8->__r_.__value_.__s.__data_[v7] = 0;
  }
  v8 = (std::string *)v249.__r_.__value_.__r.__words[0];
  if (*(_BYTE *)(v249.__r_.__value_.__r.__words[0] + v249.__r_.__value_.__l.__size_ - 1) == 48)
  {
    v7 = --v249.__r_.__value_.__l.__size_;
    goto LABEL_7;
  }
LABEL_8:
  v250 = v249;
  memset(&v249, 0, sizeof(v249));
  while ((SHIBYTE(v250.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if (*((_BYTE *)&v249.__r_.__value_.__r.__words[2] + HIBYTE(v250.__r_.__value_.__r.__words[2]) + 7) != 46)
      goto LABEL_15;
    v9 = HIBYTE(v250.__r_.__value_.__r.__words[2]) - 1;
    *((_BYTE *)&v250.__r_.__value_.__s + 23) = (*((_BYTE *)&v250.__r_.__value_.__s + 23) - 1) & 0x7F;
    v10 = &v250;
LABEL_14:
    v10->__r_.__value_.__s.__data_[v9] = 0;
  }
  v10 = (std::string *)v250.__r_.__value_.__r.__words[0];
  if (*(_BYTE *)(v250.__r_.__value_.__r.__words[0] + v250.__r_.__value_.__l.__size_ - 1) == 46)
  {
    v9 = --v250.__r_.__value_.__l.__size_;
    goto LABEL_14;
  }
LABEL_15:
  v245 = v250;
  if (SHIBYTE(v249.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v249.__r_.__value_.__l.__data_);
  if ((v245.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v11 = &v245;
  else
    v11 = (std::string *)v245.__r_.__value_.__r.__words[0];
  if ((v245.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(v245.__r_.__value_.__r.__words[2]);
  else
    size = v245.__r_.__value_.__l.__size_;
  v13 = std::string::append(&v248, (const std::string::value_type *)v11, size);
  v14 = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
  v203.__r_.__value_.__r.__words[2] = v13->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v203.__r_.__value_.__l.__data_ = v14;
  v13->__r_.__value_.__l.__size_ = 0;
  v13->__r_.__value_.__r.__words[2] = 0;
  v13->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v245.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v245.__r_.__value_.__l.__data_);
  if (SHIBYTE(v248.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v248.__r_.__value_.__l.__data_);
  if (v247 < 0)
    operator delete(v246[0]);
  v15 = std::string::append(&v203, ",\n", 2uLL);
  v16 = *(_OWORD *)&v15->__r_.__value_.__l.__data_;
  v204.__r_.__value_.__r.__words[2] = v15->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v204.__r_.__value_.__l.__data_ = v16;
  v15->__r_.__value_.__l.__size_ = 0;
  v15->__r_.__value_.__r.__words[2] = 0;
  v15->__r_.__value_.__r.__words[0] = 0;
  v17 = (std::string *)std::string::basic_string[abi:ne180100]<0>(v246, "ConvoyPeakRatioPosBlockThreshold");
  v18 = std::string::append(v17, ": ", 2uLL);
  v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
  v248.__r_.__value_.__r.__words[2] = v18->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v248.__r_.__value_.__l.__data_ = v19;
  v18->__r_.__value_.__l.__size_ = 0;
  v18->__r_.__value_.__r.__words[2] = 0;
  v18->__r_.__value_.__r.__words[0] = 0;
  std::to_string(&v249, a2[1]);
  while (2)
  {
    if ((SHIBYTE(v249.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      if (*((_BYTE *)&v248.__r_.__value_.__r.__words[2] + HIBYTE(v249.__r_.__value_.__r.__words[2]) + 7) != 48)
        break;
      v20 = HIBYTE(v249.__r_.__value_.__r.__words[2]) - 1;
      *((_BYTE *)&v249.__r_.__value_.__s + 23) = (*((_BYTE *)&v249.__r_.__value_.__s + 23) - 1) & 0x7F;
      v21 = &v249;
      goto LABEL_35;
    }
    v21 = (std::string *)v249.__r_.__value_.__r.__words[0];
    if (*(_BYTE *)(v249.__r_.__value_.__r.__words[0] + v249.__r_.__value_.__l.__size_ - 1) == 48)
    {
      v20 = --v249.__r_.__value_.__l.__size_;
LABEL_35:
      v21->__r_.__value_.__s.__data_[v20] = 0;
      continue;
    }
    break;
  }
  v250 = v249;
  memset(&v249, 0, sizeof(v249));
  while (2)
  {
    if ((SHIBYTE(v250.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      if (*((_BYTE *)&v249.__r_.__value_.__r.__words[2] + HIBYTE(v250.__r_.__value_.__r.__words[2]) + 7) != 46)
        break;
      v22 = HIBYTE(v250.__r_.__value_.__r.__words[2]) - 1;
      *((_BYTE *)&v250.__r_.__value_.__s + 23) = (*((_BYTE *)&v250.__r_.__value_.__s + 23) - 1) & 0x7F;
      v23 = &v250;
      goto LABEL_42;
    }
    v23 = (std::string *)v250.__r_.__value_.__r.__words[0];
    if (*(_BYTE *)(v250.__r_.__value_.__r.__words[0] + v250.__r_.__value_.__l.__size_ - 1) == 46)
    {
      v22 = --v250.__r_.__value_.__l.__size_;
LABEL_42:
      v23->__r_.__value_.__s.__data_[v22] = 0;
      continue;
    }
    break;
  }
  v245 = v250;
  if (SHIBYTE(v249.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v249.__r_.__value_.__l.__data_);
  if ((v245.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v24 = &v245;
  else
    v24 = (std::string *)v245.__r_.__value_.__r.__words[0];
  if ((v245.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v25 = HIBYTE(v245.__r_.__value_.__r.__words[2]);
  else
    v25 = v245.__r_.__value_.__l.__size_;
  v26 = std::string::append(&v248, (const std::string::value_type *)v24, v25);
  v27 = *(_OWORD *)&v26->__r_.__value_.__l.__data_;
  v207.__r_.__value_.__r.__words[2] = v26->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v207.__r_.__value_.__l.__data_ = v27;
  v26->__r_.__value_.__l.__size_ = 0;
  v26->__r_.__value_.__r.__words[2] = 0;
  v26->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v245.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v245.__r_.__value_.__l.__data_);
  if (SHIBYTE(v248.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v248.__r_.__value_.__l.__data_);
  if (v247 < 0)
    operator delete(v246[0]);
  v28 = std::string::append(&v207, ",\n", 2uLL);
  v29 = *(_OWORD *)&v28->__r_.__value_.__l.__data_;
  v208.__r_.__value_.__r.__words[2] = v28->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v208.__r_.__value_.__l.__data_ = v29;
  v28->__r_.__value_.__l.__size_ = 0;
  v28->__r_.__value_.__r.__words[2] = 0;
  v28->__r_.__value_.__r.__words[0] = 0;
  v30 = (std::string *)std::string::basic_string[abi:ne180100]<0>(v246, "ConvoyPeakRatioNegBlockThreshold");
  v31 = std::string::append(v30, ": ", 2uLL);
  v32 = *(_OWORD *)&v31->__r_.__value_.__l.__data_;
  v248.__r_.__value_.__r.__words[2] = v31->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v248.__r_.__value_.__l.__data_ = v32;
  v31->__r_.__value_.__l.__size_ = 0;
  v31->__r_.__value_.__r.__words[2] = 0;
  v31->__r_.__value_.__r.__words[0] = 0;
  std::to_string(&v249, a2[2]);
  while (2)
  {
    if ((SHIBYTE(v249.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      if (*((_BYTE *)&v248.__r_.__value_.__r.__words[2] + HIBYTE(v249.__r_.__value_.__r.__words[2]) + 7) != 48)
        break;
      v33 = HIBYTE(v249.__r_.__value_.__r.__words[2]) - 1;
      *((_BYTE *)&v249.__r_.__value_.__s + 23) = (*((_BYTE *)&v249.__r_.__value_.__s + 23) - 1) & 0x7F;
      v34 = &v249;
      goto LABEL_63;
    }
    v34 = (std::string *)v249.__r_.__value_.__r.__words[0];
    if (*(_BYTE *)(v249.__r_.__value_.__r.__words[0] + v249.__r_.__value_.__l.__size_ - 1) == 48)
    {
      v33 = --v249.__r_.__value_.__l.__size_;
LABEL_63:
      v34->__r_.__value_.__s.__data_[v33] = 0;
      continue;
    }
    break;
  }
  v250 = v249;
  memset(&v249, 0, sizeof(v249));
  while (2)
  {
    if ((SHIBYTE(v250.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      if (*((_BYTE *)&v249.__r_.__value_.__r.__words[2] + HIBYTE(v250.__r_.__value_.__r.__words[2]) + 7) != 46)
        break;
      v35 = HIBYTE(v250.__r_.__value_.__r.__words[2]) - 1;
      *((_BYTE *)&v250.__r_.__value_.__s + 23) = (*((_BYTE *)&v250.__r_.__value_.__s + 23) - 1) & 0x7F;
      v36 = &v250;
      goto LABEL_70;
    }
    v36 = (std::string *)v250.__r_.__value_.__r.__words[0];
    if (*(_BYTE *)(v250.__r_.__value_.__r.__words[0] + v250.__r_.__value_.__l.__size_ - 1) == 46)
    {
      v35 = --v250.__r_.__value_.__l.__size_;
LABEL_70:
      v36->__r_.__value_.__s.__data_[v35] = 0;
      continue;
    }
    break;
  }
  v245 = v250;
  if (SHIBYTE(v249.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v249.__r_.__value_.__l.__data_);
  if ((v245.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v37 = &v245;
  else
    v37 = (std::string *)v245.__r_.__value_.__r.__words[0];
  if ((v245.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v38 = HIBYTE(v245.__r_.__value_.__r.__words[2]);
  else
    v38 = v245.__r_.__value_.__l.__size_;
  v39 = std::string::append(&v248, (const std::string::value_type *)v37, v38);
  v40 = *(_OWORD *)&v39->__r_.__value_.__l.__data_;
  v211.__r_.__value_.__r.__words[2] = v39->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v211.__r_.__value_.__l.__data_ = v40;
  v39->__r_.__value_.__l.__size_ = 0;
  v39->__r_.__value_.__r.__words[2] = 0;
  v39->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v245.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v245.__r_.__value_.__l.__data_);
  if (SHIBYTE(v248.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v248.__r_.__value_.__l.__data_);
  if (v247 < 0)
    operator delete(v246[0]);
  v41 = std::string::append(&v211, ",\n", 2uLL);
  v42 = *(_OWORD *)&v41->__r_.__value_.__l.__data_;
  v212.__r_.__value_.__r.__words[2] = v41->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v212.__r_.__value_.__l.__data_ = v42;
  v41->__r_.__value_.__l.__size_ = 0;
  v41->__r_.__value_.__r.__words[2] = 0;
  v41->__r_.__value_.__r.__words[0] = 0;
  v43 = (std::string *)std::string::basic_string[abi:ne180100]<0>(v246, "ConvoyRelXLimUpper");
  v44 = std::string::append(v43, ": ", 2uLL);
  v45 = *(_OWORD *)&v44->__r_.__value_.__l.__data_;
  v248.__r_.__value_.__r.__words[2] = v44->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v248.__r_.__value_.__l.__data_ = v45;
  v44->__r_.__value_.__l.__size_ = 0;
  v44->__r_.__value_.__r.__words[2] = 0;
  v44->__r_.__value_.__r.__words[0] = 0;
  std::to_string(&v249, a2[3]);
  while (2)
  {
    if ((SHIBYTE(v249.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      if (*((_BYTE *)&v248.__r_.__value_.__r.__words[2] + HIBYTE(v249.__r_.__value_.__r.__words[2]) + 7) != 48)
        break;
      v46 = HIBYTE(v249.__r_.__value_.__r.__words[2]) - 1;
      *((_BYTE *)&v249.__r_.__value_.__s + 23) = (*((_BYTE *)&v249.__r_.__value_.__s + 23) - 1) & 0x7F;
      v47 = &v249;
      goto LABEL_91;
    }
    v47 = (std::string *)v249.__r_.__value_.__r.__words[0];
    if (*(_BYTE *)(v249.__r_.__value_.__r.__words[0] + v249.__r_.__value_.__l.__size_ - 1) == 48)
    {
      v46 = --v249.__r_.__value_.__l.__size_;
LABEL_91:
      v47->__r_.__value_.__s.__data_[v46] = 0;
      continue;
    }
    break;
  }
  v250 = v249;
  memset(&v249, 0, sizeof(v249));
  while (2)
  {
    if ((SHIBYTE(v250.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      if (*((_BYTE *)&v249.__r_.__value_.__r.__words[2] + HIBYTE(v250.__r_.__value_.__r.__words[2]) + 7) != 46)
        break;
      v48 = HIBYTE(v250.__r_.__value_.__r.__words[2]) - 1;
      *((_BYTE *)&v250.__r_.__value_.__s + 23) = (*((_BYTE *)&v250.__r_.__value_.__s + 23) - 1) & 0x7F;
      v49 = &v250;
      goto LABEL_98;
    }
    v49 = (std::string *)v250.__r_.__value_.__r.__words[0];
    if (*(_BYTE *)(v250.__r_.__value_.__r.__words[0] + v250.__r_.__value_.__l.__size_ - 1) == 46)
    {
      v48 = --v250.__r_.__value_.__l.__size_;
LABEL_98:
      v49->__r_.__value_.__s.__data_[v48] = 0;
      continue;
    }
    break;
  }
  v245 = v250;
  if (SHIBYTE(v249.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v249.__r_.__value_.__l.__data_);
  if ((v245.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v50 = &v245;
  else
    v50 = (std::string *)v245.__r_.__value_.__r.__words[0];
  if ((v245.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v51 = HIBYTE(v245.__r_.__value_.__r.__words[2]);
  else
    v51 = v245.__r_.__value_.__l.__size_;
  v52 = std::string::append(&v248, (const std::string::value_type *)v50, v51);
  v53 = *(_OWORD *)&v52->__r_.__value_.__l.__data_;
  v215.__r_.__value_.__r.__words[2] = v52->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v215.__r_.__value_.__l.__data_ = v53;
  v52->__r_.__value_.__l.__size_ = 0;
  v52->__r_.__value_.__r.__words[2] = 0;
  v52->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v245.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v245.__r_.__value_.__l.__data_);
  if (SHIBYTE(v248.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v248.__r_.__value_.__l.__data_);
  if (v247 < 0)
    operator delete(v246[0]);
  v54 = std::string::append(&v215, ",\n", 2uLL);
  v55 = *(_OWORD *)&v54->__r_.__value_.__l.__data_;
  v216.__r_.__value_.__r.__words[2] = v54->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v216.__r_.__value_.__l.__data_ = v55;
  v54->__r_.__value_.__l.__size_ = 0;
  v54->__r_.__value_.__r.__words[2] = 0;
  v54->__r_.__value_.__r.__words[0] = 0;
  v56 = (std::string *)std::string::basic_string[abi:ne180100]<0>(v246, "ConvoyRelXLimLower");
  v57 = std::string::append(v56, ": ", 2uLL);
  v58 = *(_OWORD *)&v57->__r_.__value_.__l.__data_;
  v248.__r_.__value_.__r.__words[2] = v57->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v248.__r_.__value_.__l.__data_ = v58;
  v57->__r_.__value_.__l.__size_ = 0;
  v57->__r_.__value_.__r.__words[2] = 0;
  v57->__r_.__value_.__r.__words[0] = 0;
  std::to_string(&v249, a2[4]);
  while (2)
  {
    if ((SHIBYTE(v249.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      if (*((_BYTE *)&v248.__r_.__value_.__r.__words[2] + HIBYTE(v249.__r_.__value_.__r.__words[2]) + 7) != 48)
        break;
      v59 = HIBYTE(v249.__r_.__value_.__r.__words[2]) - 1;
      *((_BYTE *)&v249.__r_.__value_.__s + 23) = (*((_BYTE *)&v249.__r_.__value_.__s + 23) - 1) & 0x7F;
      v60 = &v249;
      goto LABEL_119;
    }
    v60 = (std::string *)v249.__r_.__value_.__r.__words[0];
    if (*(_BYTE *)(v249.__r_.__value_.__r.__words[0] + v249.__r_.__value_.__l.__size_ - 1) == 48)
    {
      v59 = --v249.__r_.__value_.__l.__size_;
LABEL_119:
      v60->__r_.__value_.__s.__data_[v59] = 0;
      continue;
    }
    break;
  }
  v250 = v249;
  memset(&v249, 0, sizeof(v249));
  while (2)
  {
    if ((SHIBYTE(v250.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      if (*((_BYTE *)&v249.__r_.__value_.__r.__words[2] + HIBYTE(v250.__r_.__value_.__r.__words[2]) + 7) != 46)
        break;
      v61 = HIBYTE(v250.__r_.__value_.__r.__words[2]) - 1;
      *((_BYTE *)&v250.__r_.__value_.__s + 23) = (*((_BYTE *)&v250.__r_.__value_.__s + 23) - 1) & 0x7F;
      v62 = &v250;
      goto LABEL_126;
    }
    v62 = (std::string *)v250.__r_.__value_.__r.__words[0];
    if (*(_BYTE *)(v250.__r_.__value_.__r.__words[0] + v250.__r_.__value_.__l.__size_ - 1) == 46)
    {
      v61 = --v250.__r_.__value_.__l.__size_;
LABEL_126:
      v62->__r_.__value_.__s.__data_[v61] = 0;
      continue;
    }
    break;
  }
  v245 = v250;
  if (SHIBYTE(v249.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v249.__r_.__value_.__l.__data_);
  if ((v245.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v63 = &v245;
  else
    v63 = (std::string *)v245.__r_.__value_.__r.__words[0];
  if ((v245.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v64 = HIBYTE(v245.__r_.__value_.__r.__words[2]);
  else
    v64 = v245.__r_.__value_.__l.__size_;
  v65 = std::string::append(&v248, (const std::string::value_type *)v63, v64);
  v66 = *(_OWORD *)&v65->__r_.__value_.__l.__data_;
  v219.__r_.__value_.__r.__words[2] = v65->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v219.__r_.__value_.__l.__data_ = v66;
  v65->__r_.__value_.__l.__size_ = 0;
  v65->__r_.__value_.__r.__words[2] = 0;
  v65->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v245.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v245.__r_.__value_.__l.__data_);
  if (SHIBYTE(v248.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v248.__r_.__value_.__l.__data_);
  if (v247 < 0)
    operator delete(v246[0]);
  v67 = std::string::append(&v219, ",\n", 2uLL);
  v68 = *(_OWORD *)&v67->__r_.__value_.__l.__data_;
  v220.__r_.__value_.__r.__words[2] = v67->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v220.__r_.__value_.__l.__data_ = v68;
  v67->__r_.__value_.__l.__size_ = 0;
  v67->__r_.__value_.__r.__words[2] = 0;
  v67->__r_.__value_.__r.__words[0] = 0;
  v69 = (std::string *)std::string::basic_string[abi:ne180100]<0>(v246, "ConvoyNormFactorAttack");
  v70 = std::string::append(v69, ": ", 2uLL);
  v71 = *(_OWORD *)&v70->__r_.__value_.__l.__data_;
  v248.__r_.__value_.__r.__words[2] = v70->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v248.__r_.__value_.__l.__data_ = v71;
  v70->__r_.__value_.__l.__size_ = 0;
  v70->__r_.__value_.__r.__words[2] = 0;
  v70->__r_.__value_.__r.__words[0] = 0;
  std::to_string(&v249, a2[5]);
  while (2)
  {
    if ((SHIBYTE(v249.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      if (*((_BYTE *)&v248.__r_.__value_.__r.__words[2] + HIBYTE(v249.__r_.__value_.__r.__words[2]) + 7) != 48)
        break;
      v72 = HIBYTE(v249.__r_.__value_.__r.__words[2]) - 1;
      *((_BYTE *)&v249.__r_.__value_.__s + 23) = (*((_BYTE *)&v249.__r_.__value_.__s + 23) - 1) & 0x7F;
      v73 = &v249;
      goto LABEL_147;
    }
    v73 = (std::string *)v249.__r_.__value_.__r.__words[0];
    if (*(_BYTE *)(v249.__r_.__value_.__r.__words[0] + v249.__r_.__value_.__l.__size_ - 1) == 48)
    {
      v72 = --v249.__r_.__value_.__l.__size_;
LABEL_147:
      v73->__r_.__value_.__s.__data_[v72] = 0;
      continue;
    }
    break;
  }
  v250 = v249;
  memset(&v249, 0, sizeof(v249));
  while (2)
  {
    if ((SHIBYTE(v250.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      if (*((_BYTE *)&v249.__r_.__value_.__r.__words[2] + HIBYTE(v250.__r_.__value_.__r.__words[2]) + 7) != 46)
        break;
      v74 = HIBYTE(v250.__r_.__value_.__r.__words[2]) - 1;
      *((_BYTE *)&v250.__r_.__value_.__s + 23) = (*((_BYTE *)&v250.__r_.__value_.__s + 23) - 1) & 0x7F;
      v75 = &v250;
      goto LABEL_154;
    }
    v75 = (std::string *)v250.__r_.__value_.__r.__words[0];
    if (*(_BYTE *)(v250.__r_.__value_.__r.__words[0] + v250.__r_.__value_.__l.__size_ - 1) == 46)
    {
      v74 = --v250.__r_.__value_.__l.__size_;
LABEL_154:
      v75->__r_.__value_.__s.__data_[v74] = 0;
      continue;
    }
    break;
  }
  v245 = v250;
  if (SHIBYTE(v249.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v249.__r_.__value_.__l.__data_);
  if ((v245.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v76 = &v245;
  else
    v76 = (std::string *)v245.__r_.__value_.__r.__words[0];
  if ((v245.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v77 = HIBYTE(v245.__r_.__value_.__r.__words[2]);
  else
    v77 = v245.__r_.__value_.__l.__size_;
  v78 = std::string::append(&v248, (const std::string::value_type *)v76, v77);
  v79 = *(_OWORD *)&v78->__r_.__value_.__l.__data_;
  v223.__r_.__value_.__r.__words[2] = v78->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v223.__r_.__value_.__l.__data_ = v79;
  v78->__r_.__value_.__l.__size_ = 0;
  v78->__r_.__value_.__r.__words[2] = 0;
  v78->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v245.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v245.__r_.__value_.__l.__data_);
  if (SHIBYTE(v248.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v248.__r_.__value_.__l.__data_);
  if (v247 < 0)
    operator delete(v246[0]);
  v80 = std::string::append(&v223, ",\n", 2uLL);
  v81 = *(_OWORD *)&v80->__r_.__value_.__l.__data_;
  v224.__r_.__value_.__r.__words[2] = v80->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v224.__r_.__value_.__l.__data_ = v81;
  v80->__r_.__value_.__l.__size_ = 0;
  v80->__r_.__value_.__r.__words[2] = 0;
  v80->__r_.__value_.__r.__words[0] = 0;
  v82 = (std::string *)std::string::basic_string[abi:ne180100]<0>(v246, "ConvoyNormFactorRelease");
  v83 = std::string::append(v82, ": ", 2uLL);
  v84 = *(_OWORD *)&v83->__r_.__value_.__l.__data_;
  v248.__r_.__value_.__r.__words[2] = v83->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v248.__r_.__value_.__l.__data_ = v84;
  v83->__r_.__value_.__l.__size_ = 0;
  v83->__r_.__value_.__r.__words[2] = 0;
  v83->__r_.__value_.__r.__words[0] = 0;
  std::to_string(&v249, a2[6]);
  while (2)
  {
    if ((SHIBYTE(v249.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      if (*((_BYTE *)&v248.__r_.__value_.__r.__words[2] + HIBYTE(v249.__r_.__value_.__r.__words[2]) + 7) != 48)
        break;
      v85 = HIBYTE(v249.__r_.__value_.__r.__words[2]) - 1;
      *((_BYTE *)&v249.__r_.__value_.__s + 23) = (*((_BYTE *)&v249.__r_.__value_.__s + 23) - 1) & 0x7F;
      v86 = &v249;
      goto LABEL_175;
    }
    v86 = (std::string *)v249.__r_.__value_.__r.__words[0];
    if (*(_BYTE *)(v249.__r_.__value_.__r.__words[0] + v249.__r_.__value_.__l.__size_ - 1) == 48)
    {
      v85 = --v249.__r_.__value_.__l.__size_;
LABEL_175:
      v86->__r_.__value_.__s.__data_[v85] = 0;
      continue;
    }
    break;
  }
  v250 = v249;
  memset(&v249, 0, sizeof(v249));
  while (2)
  {
    if ((SHIBYTE(v250.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      if (*((_BYTE *)&v249.__r_.__value_.__r.__words[2] + HIBYTE(v250.__r_.__value_.__r.__words[2]) + 7) != 46)
        break;
      v87 = HIBYTE(v250.__r_.__value_.__r.__words[2]) - 1;
      *((_BYTE *)&v250.__r_.__value_.__s + 23) = (*((_BYTE *)&v250.__r_.__value_.__s + 23) - 1) & 0x7F;
      v88 = &v250;
      goto LABEL_182;
    }
    v88 = (std::string *)v250.__r_.__value_.__r.__words[0];
    if (*(_BYTE *)(v250.__r_.__value_.__r.__words[0] + v250.__r_.__value_.__l.__size_ - 1) == 46)
    {
      v87 = --v250.__r_.__value_.__l.__size_;
LABEL_182:
      v88->__r_.__value_.__s.__data_[v87] = 0;
      continue;
    }
    break;
  }
  v245 = v250;
  if (SHIBYTE(v249.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v249.__r_.__value_.__l.__data_);
  if ((v245.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v89 = &v245;
  else
    v89 = (std::string *)v245.__r_.__value_.__r.__words[0];
  if ((v245.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v90 = HIBYTE(v245.__r_.__value_.__r.__words[2]);
  else
    v90 = v245.__r_.__value_.__l.__size_;
  v91 = std::string::append(&v248, (const std::string::value_type *)v89, v90);
  v92 = *(_OWORD *)&v91->__r_.__value_.__l.__data_;
  v227.__r_.__value_.__r.__words[2] = v91->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v227.__r_.__value_.__l.__data_ = v92;
  v91->__r_.__value_.__l.__size_ = 0;
  v91->__r_.__value_.__r.__words[2] = 0;
  v91->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v245.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v245.__r_.__value_.__l.__data_);
  if (SHIBYTE(v248.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v248.__r_.__value_.__l.__data_);
  if (v247 < 0)
    operator delete(v246[0]);
  v93 = std::string::append(&v227, ",\n", 2uLL);
  v94 = *(_OWORD *)&v93->__r_.__value_.__l.__data_;
  v228.__r_.__value_.__r.__words[2] = v93->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v228.__r_.__value_.__l.__data_ = v94;
  v93->__r_.__value_.__l.__size_ = 0;
  v93->__r_.__value_.__r.__words[2] = 0;
  v93->__r_.__value_.__r.__words[0] = 0;
  v95 = (std::string *)std::string::basic_string[abi:ne180100]<0>(v246, "ConvoyPeakDetectorAtkTime");
  v96 = std::string::append(v95, ": ", 2uLL);
  v97 = *(_OWORD *)&v96->__r_.__value_.__l.__data_;
  v248.__r_.__value_.__r.__words[2] = v96->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v248.__r_.__value_.__l.__data_ = v97;
  v96->__r_.__value_.__l.__size_ = 0;
  v96->__r_.__value_.__r.__words[2] = 0;
  v96->__r_.__value_.__r.__words[0] = 0;
  std::to_string(&v249, a2[7]);
  while (2)
  {
    if ((SHIBYTE(v249.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      if (*((_BYTE *)&v248.__r_.__value_.__r.__words[2] + HIBYTE(v249.__r_.__value_.__r.__words[2]) + 7) != 48)
        break;
      v98 = HIBYTE(v249.__r_.__value_.__r.__words[2]) - 1;
      *((_BYTE *)&v249.__r_.__value_.__s + 23) = (*((_BYTE *)&v249.__r_.__value_.__s + 23) - 1) & 0x7F;
      v99 = &v249;
      goto LABEL_203;
    }
    v99 = (std::string *)v249.__r_.__value_.__r.__words[0];
    if (*(_BYTE *)(v249.__r_.__value_.__r.__words[0] + v249.__r_.__value_.__l.__size_ - 1) == 48)
    {
      v98 = --v249.__r_.__value_.__l.__size_;
LABEL_203:
      v99->__r_.__value_.__s.__data_[v98] = 0;
      continue;
    }
    break;
  }
  v250 = v249;
  memset(&v249, 0, sizeof(v249));
  while (2)
  {
    if ((SHIBYTE(v250.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      if (*((_BYTE *)&v249.__r_.__value_.__r.__words[2] + HIBYTE(v250.__r_.__value_.__r.__words[2]) + 7) != 46)
        break;
      v100 = HIBYTE(v250.__r_.__value_.__r.__words[2]) - 1;
      *((_BYTE *)&v250.__r_.__value_.__s + 23) = (*((_BYTE *)&v250.__r_.__value_.__s + 23) - 1) & 0x7F;
      v101 = &v250;
      goto LABEL_210;
    }
    v101 = (std::string *)v250.__r_.__value_.__r.__words[0];
    if (*(_BYTE *)(v250.__r_.__value_.__r.__words[0] + v250.__r_.__value_.__l.__size_ - 1) == 46)
    {
      v100 = --v250.__r_.__value_.__l.__size_;
LABEL_210:
      v101->__r_.__value_.__s.__data_[v100] = 0;
      continue;
    }
    break;
  }
  v245 = v250;
  if (SHIBYTE(v249.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v249.__r_.__value_.__l.__data_);
  if ((v245.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v102 = &v245;
  else
    v102 = (std::string *)v245.__r_.__value_.__r.__words[0];
  if ((v245.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v103 = HIBYTE(v245.__r_.__value_.__r.__words[2]);
  else
    v103 = v245.__r_.__value_.__l.__size_;
  v104 = std::string::append(&v248, (const std::string::value_type *)v102, v103);
  v105 = *(_OWORD *)&v104->__r_.__value_.__l.__data_;
  v231.__r_.__value_.__r.__words[2] = v104->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v231.__r_.__value_.__l.__data_ = v105;
  v104->__r_.__value_.__l.__size_ = 0;
  v104->__r_.__value_.__r.__words[2] = 0;
  v104->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v245.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v245.__r_.__value_.__l.__data_);
  if (SHIBYTE(v248.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v248.__r_.__value_.__l.__data_);
  if (v247 < 0)
    operator delete(v246[0]);
  v106 = std::string::append(&v231, ",\n", 2uLL);
  v107 = *(_OWORD *)&v106->__r_.__value_.__l.__data_;
  v232.__r_.__value_.__r.__words[2] = v106->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v232.__r_.__value_.__l.__data_ = v107;
  v106->__r_.__value_.__l.__size_ = 0;
  v106->__r_.__value_.__r.__words[2] = 0;
  v106->__r_.__value_.__r.__words[0] = 0;
  v108 = (std::string *)std::string::basic_string[abi:ne180100]<0>(v246, "ConvoyPeakDetectorRelTime");
  v109 = std::string::append(v108, ": ", 2uLL);
  v110 = *(_OWORD *)&v109->__r_.__value_.__l.__data_;
  v248.__r_.__value_.__r.__words[2] = v109->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v248.__r_.__value_.__l.__data_ = v110;
  v109->__r_.__value_.__l.__size_ = 0;
  v109->__r_.__value_.__r.__words[2] = 0;
  v109->__r_.__value_.__r.__words[0] = 0;
  std::to_string(&v249, a2[8]);
  while (2)
  {
    if ((SHIBYTE(v249.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      if (*((_BYTE *)&v248.__r_.__value_.__r.__words[2] + HIBYTE(v249.__r_.__value_.__r.__words[2]) + 7) != 48)
        break;
      v111 = HIBYTE(v249.__r_.__value_.__r.__words[2]) - 1;
      *((_BYTE *)&v249.__r_.__value_.__s + 23) = (*((_BYTE *)&v249.__r_.__value_.__s + 23) - 1) & 0x7F;
      v112 = &v249;
      goto LABEL_231;
    }
    v112 = (std::string *)v249.__r_.__value_.__r.__words[0];
    if (*(_BYTE *)(v249.__r_.__value_.__r.__words[0] + v249.__r_.__value_.__l.__size_ - 1) == 48)
    {
      v111 = --v249.__r_.__value_.__l.__size_;
LABEL_231:
      v112->__r_.__value_.__s.__data_[v111] = 0;
      continue;
    }
    break;
  }
  v250 = v249;
  memset(&v249, 0, sizeof(v249));
  while (2)
  {
    if ((SHIBYTE(v250.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      if (*((_BYTE *)&v249.__r_.__value_.__r.__words[2] + HIBYTE(v250.__r_.__value_.__r.__words[2]) + 7) != 46)
        break;
      v113 = HIBYTE(v250.__r_.__value_.__r.__words[2]) - 1;
      *((_BYTE *)&v250.__r_.__value_.__s + 23) = (*((_BYTE *)&v250.__r_.__value_.__s + 23) - 1) & 0x7F;
      v114 = &v250;
      goto LABEL_238;
    }
    v114 = (std::string *)v250.__r_.__value_.__r.__words[0];
    if (*(_BYTE *)(v250.__r_.__value_.__r.__words[0] + v250.__r_.__value_.__l.__size_ - 1) == 46)
    {
      v113 = --v250.__r_.__value_.__l.__size_;
LABEL_238:
      v114->__r_.__value_.__s.__data_[v113] = 0;
      continue;
    }
    break;
  }
  v245 = v250;
  if (SHIBYTE(v249.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v249.__r_.__value_.__l.__data_);
  if ((v245.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v115 = &v245;
  else
    v115 = (std::string *)v245.__r_.__value_.__r.__words[0];
  if ((v245.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v116 = HIBYTE(v245.__r_.__value_.__r.__words[2]);
  else
    v116 = v245.__r_.__value_.__l.__size_;
  v117 = std::string::append(&v248, (const std::string::value_type *)v115, v116);
  v118 = *(_OWORD *)&v117->__r_.__value_.__l.__data_;
  v235.__r_.__value_.__r.__words[2] = v117->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v235.__r_.__value_.__l.__data_ = v118;
  v117->__r_.__value_.__l.__size_ = 0;
  v117->__r_.__value_.__r.__words[2] = 0;
  v117->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v245.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v245.__r_.__value_.__l.__data_);
  if (SHIBYTE(v248.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v248.__r_.__value_.__l.__data_);
  if (v247 < 0)
    operator delete(v246[0]);
  v119 = std::string::append(&v235, ",\n", 2uLL);
  v120 = *(_OWORD *)&v119->__r_.__value_.__l.__data_;
  v236.__r_.__value_.__r.__words[2] = v119->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v236.__r_.__value_.__l.__data_ = v120;
  v119->__r_.__value_.__l.__size_ = 0;
  v119->__r_.__value_.__r.__words[2] = 0;
  v119->__r_.__value_.__r.__words[0] = 0;
  v121 = (std::string *)std::string::basic_string[abi:ne180100]<0>(v246, "ConvoyPeakRatiosInWindowCountThreshold");
  v122 = std::string::append(v121, ": ", 2uLL);
  v123 = *(_OWORD *)&v122->__r_.__value_.__l.__data_;
  v248.__r_.__value_.__r.__words[2] = v122->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v248.__r_.__value_.__l.__data_ = v123;
  v122->__r_.__value_.__l.__size_ = 0;
  v122->__r_.__value_.__r.__words[2] = 0;
  v122->__r_.__value_.__r.__words[0] = 0;
  std::to_string(&v249, a2[9]);
  while (2)
  {
    if ((SHIBYTE(v249.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      if (*((_BYTE *)&v248.__r_.__value_.__r.__words[2] + HIBYTE(v249.__r_.__value_.__r.__words[2]) + 7) != 48)
        break;
      v124 = HIBYTE(v249.__r_.__value_.__r.__words[2]) - 1;
      *((_BYTE *)&v249.__r_.__value_.__s + 23) = (*((_BYTE *)&v249.__r_.__value_.__s + 23) - 1) & 0x7F;
      v125 = &v249;
      goto LABEL_259;
    }
    v125 = (std::string *)v249.__r_.__value_.__r.__words[0];
    if (*(_BYTE *)(v249.__r_.__value_.__r.__words[0] + v249.__r_.__value_.__l.__size_ - 1) == 48)
    {
      v124 = --v249.__r_.__value_.__l.__size_;
LABEL_259:
      v125->__r_.__value_.__s.__data_[v124] = 0;
      continue;
    }
    break;
  }
  v250 = v249;
  memset(&v249, 0, sizeof(v249));
  while (2)
  {
    if ((SHIBYTE(v250.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      if (*((_BYTE *)&v249.__r_.__value_.__r.__words[2] + HIBYTE(v250.__r_.__value_.__r.__words[2]) + 7) != 46)
        break;
      v126 = HIBYTE(v250.__r_.__value_.__r.__words[2]) - 1;
      *((_BYTE *)&v250.__r_.__value_.__s + 23) = (*((_BYTE *)&v250.__r_.__value_.__s + 23) - 1) & 0x7F;
      v127 = &v250;
      goto LABEL_266;
    }
    v127 = (std::string *)v250.__r_.__value_.__r.__words[0];
    if (*(_BYTE *)(v250.__r_.__value_.__r.__words[0] + v250.__r_.__value_.__l.__size_ - 1) == 46)
    {
      v126 = --v250.__r_.__value_.__l.__size_;
LABEL_266:
      v127->__r_.__value_.__s.__data_[v126] = 0;
      continue;
    }
    break;
  }
  v245 = v250;
  if (SHIBYTE(v249.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v249.__r_.__value_.__l.__data_);
  if ((v245.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v128 = &v245;
  else
    v128 = (std::string *)v245.__r_.__value_.__r.__words[0];
  if ((v245.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v129 = HIBYTE(v245.__r_.__value_.__r.__words[2]);
  else
    v129 = v245.__r_.__value_.__l.__size_;
  v130 = std::string::append(&v248, (const std::string::value_type *)v128, v129);
  v131 = *(_OWORD *)&v130->__r_.__value_.__l.__data_;
  v239.__r_.__value_.__r.__words[2] = v130->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v239.__r_.__value_.__l.__data_ = v131;
  v130->__r_.__value_.__l.__size_ = 0;
  v130->__r_.__value_.__r.__words[2] = 0;
  v130->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v245.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v245.__r_.__value_.__l.__data_);
  if (SHIBYTE(v248.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v248.__r_.__value_.__l.__data_);
  if (v247 < 0)
    operator delete(v246[0]);
  v132 = std::string::append(&v239, ",\n", 2uLL);
  v133 = *(_OWORD *)&v132->__r_.__value_.__l.__data_;
  v240.__r_.__value_.__r.__words[2] = v132->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v240.__r_.__value_.__l.__data_ = v133;
  v132->__r_.__value_.__l.__size_ = 0;
  v132->__r_.__value_.__r.__words[2] = 0;
  v132->__r_.__value_.__r.__words[0] = 0;
  v134 = (std::string *)std::string::basic_string[abi:ne180100]<0>(v246, "ConvoyNormFactorThreshold");
  v135 = std::string::append(v134, ": ", 2uLL);
  v136 = *(_OWORD *)&v135->__r_.__value_.__l.__data_;
  v248.__r_.__value_.__r.__words[2] = v135->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v248.__r_.__value_.__l.__data_ = v136;
  v135->__r_.__value_.__l.__size_ = 0;
  v135->__r_.__value_.__r.__words[2] = 0;
  v135->__r_.__value_.__r.__words[0] = 0;
  std::to_string(&v249, a2[10]);
  while (2)
  {
    if ((SHIBYTE(v249.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      if (*((_BYTE *)&v248.__r_.__value_.__r.__words[2] + HIBYTE(v249.__r_.__value_.__r.__words[2]) + 7) != 48)
        break;
      v137 = HIBYTE(v249.__r_.__value_.__r.__words[2]) - 1;
      *((_BYTE *)&v249.__r_.__value_.__s + 23) = (*((_BYTE *)&v249.__r_.__value_.__s + 23) - 1) & 0x7F;
      v138 = &v249;
      goto LABEL_287;
    }
    v138 = (std::string *)v249.__r_.__value_.__r.__words[0];
    if (*(_BYTE *)(v249.__r_.__value_.__r.__words[0] + v249.__r_.__value_.__l.__size_ - 1) == 48)
    {
      v137 = --v249.__r_.__value_.__l.__size_;
LABEL_287:
      v138->__r_.__value_.__s.__data_[v137] = 0;
      continue;
    }
    break;
  }
  v250 = v249;
  memset(&v249, 0, sizeof(v249));
  while (2)
  {
    if ((SHIBYTE(v250.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      if (*((_BYTE *)&v249.__r_.__value_.__r.__words[2] + HIBYTE(v250.__r_.__value_.__r.__words[2]) + 7) != 46)
        break;
      v139 = HIBYTE(v250.__r_.__value_.__r.__words[2]) - 1;
      *((_BYTE *)&v250.__r_.__value_.__s + 23) = (*((_BYTE *)&v250.__r_.__value_.__s + 23) - 1) & 0x7F;
      v140 = &v250;
      goto LABEL_294;
    }
    v140 = (std::string *)v250.__r_.__value_.__r.__words[0];
    if (*(_BYTE *)(v250.__r_.__value_.__r.__words[0] + v250.__r_.__value_.__l.__size_ - 1) == 46)
    {
      v139 = --v250.__r_.__value_.__l.__size_;
LABEL_294:
      v140->__r_.__value_.__s.__data_[v139] = 0;
      continue;
    }
    break;
  }
  v245 = v250;
  if (SHIBYTE(v249.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v249.__r_.__value_.__l.__data_);
  if ((v245.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v141 = &v245;
  else
    v141 = (std::string *)v245.__r_.__value_.__r.__words[0];
  if ((v245.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v142 = HIBYTE(v245.__r_.__value_.__r.__words[2]);
  else
    v142 = v245.__r_.__value_.__l.__size_;
  v143 = std::string::append(&v248, (const std::string::value_type *)v141, v142);
  v144 = *(_OWORD *)&v143->__r_.__value_.__l.__data_;
  v243.__r_.__value_.__r.__words[2] = v143->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v243.__r_.__value_.__l.__data_ = v144;
  v143->__r_.__value_.__l.__size_ = 0;
  v143->__r_.__value_.__r.__words[2] = 0;
  v143->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v245.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v245.__r_.__value_.__l.__data_);
  if (SHIBYTE(v248.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v248.__r_.__value_.__l.__data_);
  if (v247 < 0)
    operator delete(v246[0]);
  v145 = std::string::append(&v243, ",\n", 2uLL);
  v146 = *(_OWORD *)&v145->__r_.__value_.__l.__data_;
  v244.__r_.__value_.__r.__words[2] = v145->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v244.__r_.__value_.__l.__data_ = v146;
  v145->__r_.__value_.__l.__size_ = 0;
  v145->__r_.__value_.__r.__words[2] = 0;
  v145->__r_.__value_.__r.__words[0] = 0;
  v147 = (std::string *)std::string::basic_string[abi:ne180100]<0>(v246, "ConvoyBufferDirtyCountThreshold_ms");
  v148 = std::string::append(v147, ": ", 2uLL);
  v149 = *(_OWORD *)&v148->__r_.__value_.__l.__data_;
  v248.__r_.__value_.__r.__words[2] = v148->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v248.__r_.__value_.__l.__data_ = v149;
  v148->__r_.__value_.__l.__size_ = 0;
  v148->__r_.__value_.__r.__words[2] = 0;
  v148->__r_.__value_.__r.__words[0] = 0;
  std::to_string(&v249, a2[11]);
  while (2)
  {
    if ((SHIBYTE(v249.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      if (*((_BYTE *)&v248.__r_.__value_.__r.__words[2] + HIBYTE(v249.__r_.__value_.__r.__words[2]) + 7) != 48)
        break;
      v150 = HIBYTE(v249.__r_.__value_.__r.__words[2]) - 1;
      *((_BYTE *)&v249.__r_.__value_.__s + 23) = (*((_BYTE *)&v249.__r_.__value_.__s + 23) - 1) & 0x7F;
      v151 = &v249;
      goto LABEL_315;
    }
    v151 = (std::string *)v249.__r_.__value_.__r.__words[0];
    if (*(_BYTE *)(v249.__r_.__value_.__r.__words[0] + v249.__r_.__value_.__l.__size_ - 1) == 48)
    {
      v150 = --v249.__r_.__value_.__l.__size_;
LABEL_315:
      v151->__r_.__value_.__s.__data_[v150] = 0;
      continue;
    }
    break;
  }
  v250 = v249;
  memset(&v249, 0, sizeof(v249));
  while (2)
  {
    if ((SHIBYTE(v250.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      if (*((_BYTE *)&v249.__r_.__value_.__r.__words[2] + HIBYTE(v250.__r_.__value_.__r.__words[2]) + 7) != 46)
        break;
      v152 = HIBYTE(v250.__r_.__value_.__r.__words[2]) - 1;
      *((_BYTE *)&v250.__r_.__value_.__s + 23) = (*((_BYTE *)&v250.__r_.__value_.__s + 23) - 1) & 0x7F;
      v153 = &v250;
      goto LABEL_322;
    }
    v153 = (std::string *)v250.__r_.__value_.__r.__words[0];
    if (*(_BYTE *)(v250.__r_.__value_.__r.__words[0] + v250.__r_.__value_.__l.__size_ - 1) == 46)
    {
      v152 = --v250.__r_.__value_.__l.__size_;
LABEL_322:
      v153->__r_.__value_.__s.__data_[v152] = 0;
      continue;
    }
    break;
  }
  v245 = v250;
  if (SHIBYTE(v249.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v249.__r_.__value_.__l.__data_);
  if ((v245.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v154 = &v245;
  else
    v154 = (std::string *)v245.__r_.__value_.__r.__words[0];
  if ((v245.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v155 = HIBYTE(v245.__r_.__value_.__r.__words[2]);
  else
    v155 = v245.__r_.__value_.__l.__size_;
  v156 = std::string::append(&v248, (const std::string::value_type *)v154, v155);
  v157 = *(_OWORD *)&v156->__r_.__value_.__l.__data_;
  v242 = v156->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = v157;
  v156->__r_.__value_.__l.__size_ = 0;
  v156->__r_.__value_.__r.__words[2] = 0;
  v156->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v245.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v245.__r_.__value_.__l.__data_);
  if (SHIBYTE(v248.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v248.__r_.__value_.__l.__data_);
  if (v247 < 0)
    operator delete(v246[0]);
  if (v242 >= 0)
    v158 = __p;
  else
    v158 = (void **)__p[0];
  if (v242 >= 0)
    v159 = HIBYTE(v242);
  else
    v159 = (std::string::size_type)__p[1];
  v160 = std::string::append(&v244, (const std::string::value_type *)v158, v159);
  v161 = *(_OWORD *)&v160->__r_.__value_.__l.__data_;
  v238 = v160->__r_.__value_.__r.__words[2];
  *(_OWORD *)v237 = v161;
  v160->__r_.__value_.__l.__size_ = 0;
  v160->__r_.__value_.__r.__words[2] = 0;
  v160->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v242) < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v244.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v244.__r_.__value_.__l.__data_);
  if (SHIBYTE(v243.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v243.__r_.__value_.__l.__data_);
  if (v238 >= 0)
    v162 = v237;
  else
    v162 = (void **)v237[0];
  if (v238 >= 0)
    v163 = HIBYTE(v238);
  else
    v163 = (std::string::size_type)v237[1];
  v164 = std::string::append(&v240, (const std::string::value_type *)v162, v163);
  v165 = *(_OWORD *)&v164->__r_.__value_.__l.__data_;
  v234 = v164->__r_.__value_.__r.__words[2];
  *(_OWORD *)v233 = v165;
  v164->__r_.__value_.__l.__size_ = 0;
  v164->__r_.__value_.__r.__words[2] = 0;
  v164->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v238) < 0)
    operator delete(v237[0]);
  if (SHIBYTE(v240.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v240.__r_.__value_.__l.__data_);
  if (SHIBYTE(v239.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v239.__r_.__value_.__l.__data_);
  if (v234 >= 0)
    v166 = v233;
  else
    v166 = (void **)v233[0];
  if (v234 >= 0)
    v167 = HIBYTE(v234);
  else
    v167 = (std::string::size_type)v233[1];
  v168 = std::string::append(&v236, (const std::string::value_type *)v166, v167);
  v169 = *(_OWORD *)&v168->__r_.__value_.__l.__data_;
  v230 = v168->__r_.__value_.__r.__words[2];
  *(_OWORD *)v229 = v169;
  v168->__r_.__value_.__l.__size_ = 0;
  v168->__r_.__value_.__r.__words[2] = 0;
  v168->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v234) < 0)
    operator delete(v233[0]);
  if (SHIBYTE(v236.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v236.__r_.__value_.__l.__data_);
  if (SHIBYTE(v235.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v235.__r_.__value_.__l.__data_);
  if (v230 >= 0)
    v170 = v229;
  else
    v170 = (void **)v229[0];
  if (v230 >= 0)
    v171 = HIBYTE(v230);
  else
    v171 = (std::string::size_type)v229[1];
  v172 = std::string::append(&v232, (const std::string::value_type *)v170, v171);
  v173 = *(_OWORD *)&v172->__r_.__value_.__l.__data_;
  v226 = v172->__r_.__value_.__r.__words[2];
  *(_OWORD *)v225 = v173;
  v172->__r_.__value_.__l.__size_ = 0;
  v172->__r_.__value_.__r.__words[2] = 0;
  v172->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v230) < 0)
    operator delete(v229[0]);
  if (SHIBYTE(v232.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v232.__r_.__value_.__l.__data_);
  if (SHIBYTE(v231.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v231.__r_.__value_.__l.__data_);
  if (v226 >= 0)
    v174 = v225;
  else
    v174 = (void **)v225[0];
  if (v226 >= 0)
    v175 = HIBYTE(v226);
  else
    v175 = (std::string::size_type)v225[1];
  v176 = std::string::append(&v228, (const std::string::value_type *)v174, v175);
  v177 = *(_OWORD *)&v176->__r_.__value_.__l.__data_;
  v222 = v176->__r_.__value_.__r.__words[2];
  *(_OWORD *)v221 = v177;
  v176->__r_.__value_.__l.__size_ = 0;
  v176->__r_.__value_.__r.__words[2] = 0;
  v176->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v226) < 0)
    operator delete(v225[0]);
  if (SHIBYTE(v228.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v228.__r_.__value_.__l.__data_);
  if (SHIBYTE(v227.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v227.__r_.__value_.__l.__data_);
  if (v222 >= 0)
    v178 = v221;
  else
    v178 = (void **)v221[0];
  if (v222 >= 0)
    v179 = HIBYTE(v222);
  else
    v179 = (std::string::size_type)v221[1];
  v180 = std::string::append(&v224, (const std::string::value_type *)v178, v179);
  v181 = *(_OWORD *)&v180->__r_.__value_.__l.__data_;
  v218 = v180->__r_.__value_.__r.__words[2];
  *(_OWORD *)v217 = v181;
  v180->__r_.__value_.__l.__size_ = 0;
  v180->__r_.__value_.__r.__words[2] = 0;
  v180->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v222) < 0)
    operator delete(v221[0]);
  if (SHIBYTE(v224.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v224.__r_.__value_.__l.__data_);
  if (SHIBYTE(v223.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v223.__r_.__value_.__l.__data_);
  if (v218 >= 0)
    v182 = v217;
  else
    v182 = (void **)v217[0];
  if (v218 >= 0)
    v183 = HIBYTE(v218);
  else
    v183 = (std::string::size_type)v217[1];
  v184 = std::string::append(&v220, (const std::string::value_type *)v182, v183);
  v185 = *(_OWORD *)&v184->__r_.__value_.__l.__data_;
  v214 = v184->__r_.__value_.__r.__words[2];
  *(_OWORD *)v213 = v185;
  v184->__r_.__value_.__l.__size_ = 0;
  v184->__r_.__value_.__r.__words[2] = 0;
  v184->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v218) < 0)
    operator delete(v217[0]);
  if (SHIBYTE(v220.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v220.__r_.__value_.__l.__data_);
  if (SHIBYTE(v219.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v219.__r_.__value_.__l.__data_);
  if (v214 >= 0)
    v186 = v213;
  else
    v186 = (void **)v213[0];
  if (v214 >= 0)
    v187 = HIBYTE(v214);
  else
    v187 = (std::string::size_type)v213[1];
  v188 = std::string::append(&v216, (const std::string::value_type *)v186, v187);
  v189 = *(_OWORD *)&v188->__r_.__value_.__l.__data_;
  v210 = v188->__r_.__value_.__r.__words[2];
  *(_OWORD *)v209 = v189;
  v188->__r_.__value_.__l.__size_ = 0;
  v188->__r_.__value_.__r.__words[2] = 0;
  v188->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v214) < 0)
    operator delete(v213[0]);
  if (SHIBYTE(v216.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v216.__r_.__value_.__l.__data_);
  if (SHIBYTE(v215.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v215.__r_.__value_.__l.__data_);
  if (v210 >= 0)
    v190 = v209;
  else
    v190 = (void **)v209[0];
  if (v210 >= 0)
    v191 = HIBYTE(v210);
  else
    v191 = (std::string::size_type)v209[1];
  v192 = std::string::append(&v212, (const std::string::value_type *)v190, v191);
  v193 = *(_OWORD *)&v192->__r_.__value_.__l.__data_;
  v206 = v192->__r_.__value_.__r.__words[2];
  *(_OWORD *)v205 = v193;
  v192->__r_.__value_.__l.__size_ = 0;
  v192->__r_.__value_.__r.__words[2] = 0;
  v192->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v210) < 0)
    operator delete(v209[0]);
  if (SHIBYTE(v212.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v212.__r_.__value_.__l.__data_);
  if (SHIBYTE(v211.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v211.__r_.__value_.__l.__data_);
  if (v206 >= 0)
    v194 = v205;
  else
    v194 = (void **)v205[0];
  if (v206 >= 0)
    v195 = HIBYTE(v206);
  else
    v195 = (std::string::size_type)v205[1];
  v196 = std::string::append(&v208, (const std::string::value_type *)v194, v195);
  v197 = *(_OWORD *)&v196->__r_.__value_.__l.__data_;
  v202 = v196->__r_.__value_.__r.__words[2];
  *(_OWORD *)v201 = v197;
  v196->__r_.__value_.__l.__size_ = 0;
  v196->__r_.__value_.__r.__words[2] = 0;
  v196->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v206) < 0)
    operator delete(v205[0]);
  if (SHIBYTE(v208.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v208.__r_.__value_.__l.__data_);
  if (SHIBYTE(v207.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v207.__r_.__value_.__l.__data_);
  if (v202 >= 0)
    v198 = v201;
  else
    v198 = (void **)v201[0];
  if (v202 >= 0)
    v199 = HIBYTE(v202);
  else
    v199 = (std::string::size_type)v201[1];
  v200 = std::string::append(&v204, (const std::string::value_type *)v198, v199);
  *a1 = *v200;
  v200->__r_.__value_.__l.__size_ = 0;
  v200->__r_.__value_.__r.__words[2] = 0;
  v200->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v202) < 0)
    operator delete(v201[0]);
  if (SHIBYTE(v204.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v204.__r_.__value_.__l.__data_);
  if (SHIBYTE(v203.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v203.__r_.__value_.__l.__data_);
}

void sub_1B642C7AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a14 < 0)
    operator delete(__p);
  if (a28 < 0)
    operator delete(a23);
  if (a21 < 0)
    operator delete(a16);
  _Unwind_Resume(a1);
}

void sub_1B642CADC()
{
  JUMPOUT(0x1B642C9B4);
}

void sub_1B642CAE4()
{
  JUMPOUT(0x1B642C9C4);
}

void sub_1B642CAEC()
{
  uint64_t v0;

  if (*(char *)(v0 - 153) < 0)
    operator delete(*(void **)(v0 - 176));
  if (*(char *)(v0 - 105) < 0)
    operator delete(*(void **)(v0 - 128));
  if (*(char *)(v0 - 129) < 0)
    JUMPOUT(0x1B642C9D0);
  JUMPOUT(0x1B642C9D4);
}

void sub_1B642CB30()
{
  JUMPOUT(0x1B642C9D4);
}

void sub_1B642CB38()
{
  JUMPOUT(0x1B642C9E4);
}

void sub_1B642CB40()
{
  uint64_t v0;

  if (*(char *)(v0 - 153) < 0)
    operator delete(*(void **)(v0 - 176));
  if (*(char *)(v0 - 105) < 0)
    operator delete(*(void **)(v0 - 128));
  if (*(char *)(v0 - 129) < 0)
    JUMPOUT(0x1B642C9F0);
  JUMPOUT(0x1B642C9F4);
}

void sub_1B642CB84()
{
  JUMPOUT(0x1B642C9F4);
}

void sub_1B642CB8C()
{
  JUMPOUT(0x1B642CA04);
}

void sub_1B642CB94()
{
  uint64_t v0;

  if (*(char *)(v0 - 153) < 0)
    operator delete(*(void **)(v0 - 176));
  if (*(char *)(v0 - 105) < 0)
    operator delete(*(void **)(v0 - 128));
  if (*(char *)(v0 - 129) < 0)
    JUMPOUT(0x1B642CA10);
  JUMPOUT(0x1B642CA14);
}

void sub_1B642CBD8()
{
  JUMPOUT(0x1B642CA14);
}

void sub_1B642CBE0()
{
  JUMPOUT(0x1B642CA24);
}

void sub_1B642CBE8()
{
  uint64_t v0;

  if (*(char *)(v0 - 153) < 0)
    operator delete(*(void **)(v0 - 176));
  if (*(char *)(v0 - 105) < 0)
    operator delete(*(void **)(v0 - 128));
  if (*(char *)(v0 - 129) < 0)
    JUMPOUT(0x1B642CA30);
  JUMPOUT(0x1B642CA34);
}

void sub_1B642CC2C()
{
  JUMPOUT(0x1B642CA34);
}

void sub_1B642CC34()
{
  JUMPOUT(0x1B642CA44);
}

void sub_1B642CC3C()
{
  uint64_t v0;

  if (*(char *)(v0 - 153) < 0)
    operator delete(*(void **)(v0 - 176));
  if (*(char *)(v0 - 105) < 0)
    operator delete(*(void **)(v0 - 128));
  if (*(char *)(v0 - 129) < 0)
    JUMPOUT(0x1B642CA50);
  JUMPOUT(0x1B642CA54);
}

void sub_1B642CC80()
{
  JUMPOUT(0x1B642CA54);
}

void sub_1B642CC88()
{
  JUMPOUT(0x1B642CA64);
}

void sub_1B642CC90()
{
  uint64_t v0;

  if (*(char *)(v0 - 153) < 0)
    operator delete(*(void **)(v0 - 176));
  if (*(char *)(v0 - 105) < 0)
    operator delete(*(void **)(v0 - 128));
  if (*(char *)(v0 - 129) < 0)
    JUMPOUT(0x1B642CA70);
  JUMPOUT(0x1B642CA74);
}

void sub_1B642CCD4()
{
  JUMPOUT(0x1B642CA74);
}

void sub_1B642CCDC()
{
  JUMPOUT(0x1B642CA84);
}

void sub_1B642CCE4()
{
  uint64_t v0;

  if (*(char *)(v0 - 153) < 0)
    operator delete(*(void **)(v0 - 176));
  if (*(char *)(v0 - 105) < 0)
    operator delete(*(void **)(v0 - 128));
  if (*(char *)(v0 - 129) < 0)
    JUMPOUT(0x1B642CA90);
  JUMPOUT(0x1B642CA94);
}

void sub_1B642CD28()
{
  JUMPOUT(0x1B642CA94);
}

void sub_1B642CD30()
{
  JUMPOUT(0x1B642CAA4);
}

void sub_1B642CD38()
{
  uint64_t v0;

  if (*(char *)(v0 - 153) < 0)
    operator delete(*(void **)(v0 - 176));
  if (*(char *)(v0 - 105) < 0)
    operator delete(*(void **)(v0 - 128));
  if (*(char *)(v0 - 129) < 0)
    JUMPOUT(0x1B642CAB0);
  JUMPOUT(0x1B642CAB4);
}

void sub_1B642CD7C()
{
  JUMPOUT(0x1B642CAB4);
}

void sub_1B642CD84()
{
  JUMPOUT(0x1B642CAC4);
}

void sub_1B642CD8C()
{
  uint64_t v0;

  if (*(char *)(v0 - 153) < 0)
    operator delete(*(void **)(v0 - 176));
  if (*(char *)(v0 - 105) < 0)
    operator delete(*(void **)(v0 - 128));
  if (*(char *)(v0 - 129) < 0)
    JUMPOUT(0x1B642CAD0);
  JUMPOUT(0x1B642CAD4);
}

void clsp::ScopedParamStruct<clsp::plistV9::TempSenseSmoothingTau,clsp::plistV9::TlimErrDecayTime,clsp::plistV9::PilotAmplHi_dB,clsp::plistV9::PilotAmplLo_dB,clsp::plistV9::PilotUpperThres,clsp::plistV9::PilotLowerThres,clsp::plistV9::PilotDecayTime,clsp::plistV9::PilotFreq,clsp::plistV9::LPMLSPreGain,clsp::plistV9::LPMLSPostGain,clsp::plistV9::LPMLSLowerCorner,clsp::plistV9::ThermalMeasurementMethod,clsp::plistV9::DisplacementProtectionType>::toString(std::string *a1, uint64_t a2)
{
  std::string *v4;
  std::string *v5;
  __int128 v6;
  uint64_t v7;
  std::string *v8;
  uint64_t v9;
  std::string *v10;
  std::string *v11;
  std::string::size_type size;
  std::string *v13;
  __int128 v14;
  std::string *v15;
  __int128 v16;
  std::string *v17;
  std::string *v18;
  __int128 v19;
  uint64_t v20;
  std::string *v21;
  uint64_t v22;
  std::string *v23;
  std::string *v24;
  std::string::size_type v25;
  std::string *v26;
  __int128 v27;
  std::string *v28;
  __int128 v29;
  std::string *v30;
  std::string *v31;
  __int128 v32;
  uint64_t v33;
  std::string *v34;
  uint64_t v35;
  std::string *v36;
  std::string *v37;
  std::string::size_type v38;
  std::string *v39;
  __int128 v40;
  std::string *v41;
  __int128 v42;
  std::string *v43;
  std::string *v44;
  __int128 v45;
  uint64_t v46;
  std::string *v47;
  uint64_t v48;
  std::string *v49;
  std::string *v50;
  std::string::size_type v51;
  std::string *v52;
  __int128 v53;
  std::string *v54;
  __int128 v55;
  std::string *v56;
  std::string *v57;
  __int128 v58;
  uint64_t v59;
  std::string *v60;
  uint64_t v61;
  std::string *v62;
  std::string *v63;
  std::string::size_type v64;
  std::string *v65;
  __int128 v66;
  std::string *v67;
  __int128 v68;
  std::string *v69;
  std::string *v70;
  __int128 v71;
  uint64_t v72;
  std::string *v73;
  uint64_t v74;
  std::string *v75;
  std::string *v76;
  std::string::size_type v77;
  std::string *v78;
  __int128 v79;
  std::string *v80;
  __int128 v81;
  std::string *v82;
  std::string *v83;
  __int128 v84;
  uint64_t v85;
  std::string *v86;
  uint64_t v87;
  std::string *v88;
  std::string *v89;
  std::string::size_type v90;
  std::string *v91;
  __int128 v92;
  std::string *v93;
  __int128 v94;
  std::string *v95;
  std::string *v96;
  __int128 v97;
  uint64_t v98;
  std::string *v99;
  uint64_t v100;
  std::string *v101;
  std::string *v102;
  std::string::size_type v103;
  std::string *v104;
  __int128 v105;
  std::string *v106;
  __int128 v107;
  std::string *v108;
  std::string *v109;
  __int128 v110;
  uint64_t v111;
  std::string *v112;
  uint64_t v113;
  std::string *v114;
  std::string *v115;
  std::string::size_type v116;
  std::string *v117;
  __int128 v118;
  std::string *v119;
  __int128 v120;
  std::string *v121;
  std::string *v122;
  __int128 v123;
  uint64_t v124;
  std::string *v125;
  uint64_t v126;
  std::string *v127;
  std::string *v128;
  std::string::size_type v129;
  std::string *v130;
  __int128 v131;
  std::string *v132;
  __int128 v133;
  std::string *v134;
  std::string *v135;
  __int128 v136;
  uint64_t v137;
  std::string *v138;
  uint64_t v139;
  std::string *v140;
  std::string *v141;
  std::string::size_type v142;
  std::string *v143;
  __int128 v144;
  std::string *v145;
  __int128 v146;
  std::string *v147;
  std::string *v148;
  __int128 v149;
  std::string *v150;
  std::string::size_type v151;
  std::string *v152;
  __int128 v153;
  std::string *v154;
  __int128 v155;
  std::string *v156;
  std::string *v157;
  __int128 v158;
  std::string *v159;
  std::string::size_type v160;
  std::string *v161;
  __int128 v162;
  const std::string::value_type *v163;
  std::string::size_type v164;
  std::string *v165;
  __int128 v166;
  void **v167;
  std::string::size_type v168;
  std::string *v169;
  __int128 v170;
  void **v171;
  std::string::size_type v172;
  std::string *v173;
  __int128 v174;
  void **v175;
  std::string::size_type v176;
  std::string *v177;
  __int128 v178;
  void **v179;
  std::string::size_type v180;
  std::string *v181;
  __int128 v182;
  void **v183;
  std::string::size_type v184;
  std::string *v185;
  __int128 v186;
  void **v187;
  std::string::size_type v188;
  std::string *v189;
  __int128 v190;
  void **v191;
  std::string::size_type v192;
  std::string *v193;
  __int128 v194;
  void **v195;
  std::string::size_type v196;
  std::string *v197;
  __int128 v198;
  void **v199;
  std::string::size_type v200;
  std::string *v201;
  __int128 v202;
  void **v203;
  std::string::size_type v204;
  std::string *v205;
  __int128 v206;
  void **v207;
  std::string::size_type v208;
  std::string *v209;
  void *v210[2];
  int64_t v211;
  std::string v212;
  std::string v213;
  void *v214[2];
  int64_t v215;
  std::string v216;
  std::string v217;
  void *v218[2];
  int64_t v219;
  std::string v220;
  std::string v221;
  void *v222[2];
  int64_t v223;
  std::string v224;
  std::string v225;
  void *v226[2];
  int64_t v227;
  std::string v228;
  std::string v229;
  void *v230[2];
  int64_t v231;
  std::string v232;
  std::string v233;
  void *v234[2];
  int64_t v235;
  std::string v236;
  std::string v237;
  void *v238[2];
  int64_t v239;
  std::string v240;
  std::string v241;
  void *v242[2];
  int64_t v243;
  std::string v244;
  std::string v245;
  void *v246[2];
  int64_t v247;
  std::string v248;
  std::string v249;
  void *__p[2];
  int64_t v251;
  std::string v252;
  std::string v253;
  __int128 v254;
  int64_t v255;
  std::string v256;
  std::string v257;
  std::string v258;
  std::string v259;
  std::string v260;

  v4 = (std::string *)std::string::basic_string[abi:ne180100]<0>(&v257, "TempSenseSmoothingTau");
  v5 = std::string::append(v4, ": ", 2uLL);
  v6 = *(_OWORD *)&v5->__r_.__value_.__l.__data_;
  v258.__r_.__value_.__r.__words[2] = v5->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v258.__r_.__value_.__l.__data_ = v6;
  v5->__r_.__value_.__l.__size_ = 0;
  v5->__r_.__value_.__r.__words[2] = 0;
  v5->__r_.__value_.__r.__words[0] = 0;
  std::to_string(&v259, *(float *)a2);
  while ((SHIBYTE(v259.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if (*((_BYTE *)&v258.__r_.__value_.__r.__words[2] + HIBYTE(v259.__r_.__value_.__r.__words[2]) + 7) != 48)
      goto LABEL_8;
    v7 = HIBYTE(v259.__r_.__value_.__r.__words[2]) - 1;
    *((_BYTE *)&v259.__r_.__value_.__s + 23) = (*((_BYTE *)&v259.__r_.__value_.__s + 23) - 1) & 0x7F;
    v8 = &v259;
LABEL_7:
    v8->__r_.__value_.__s.__data_[v7] = 0;
  }
  v8 = (std::string *)v259.__r_.__value_.__r.__words[0];
  if (*(_BYTE *)(v259.__r_.__value_.__r.__words[0] + v259.__r_.__value_.__l.__size_ - 1) == 48)
  {
    v7 = --v259.__r_.__value_.__l.__size_;
    goto LABEL_7;
  }
LABEL_8:
  v260 = v259;
  memset(&v259, 0, sizeof(v259));
  while ((SHIBYTE(v260.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if (*((_BYTE *)&v259.__r_.__value_.__r.__words[2] + HIBYTE(v260.__r_.__value_.__r.__words[2]) + 7) != 46)
      goto LABEL_15;
    v9 = HIBYTE(v260.__r_.__value_.__r.__words[2]) - 1;
    *((_BYTE *)&v260.__r_.__value_.__s + 23) = (*((_BYTE *)&v260.__r_.__value_.__s + 23) - 1) & 0x7F;
    v10 = &v260;
LABEL_14:
    v10->__r_.__value_.__s.__data_[v9] = 0;
  }
  v10 = (std::string *)v260.__r_.__value_.__r.__words[0];
  if (*(_BYTE *)(v260.__r_.__value_.__r.__words[0] + v260.__r_.__value_.__l.__size_ - 1) == 46)
  {
    v9 = --v260.__r_.__value_.__l.__size_;
    goto LABEL_14;
  }
LABEL_15:
  v256 = v260;
  if (SHIBYTE(v259.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v259.__r_.__value_.__l.__data_);
  if ((v256.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v11 = &v256;
  else
    v11 = (std::string *)v256.__r_.__value_.__r.__words[0];
  if ((v256.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(v256.__r_.__value_.__r.__words[2]);
  else
    size = v256.__r_.__value_.__l.__size_;
  v13 = std::string::append(&v258, (const std::string::value_type *)v11, size);
  v14 = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
  v212.__r_.__value_.__r.__words[2] = v13->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v212.__r_.__value_.__l.__data_ = v14;
  v13->__r_.__value_.__l.__size_ = 0;
  v13->__r_.__value_.__r.__words[2] = 0;
  v13->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v256.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v256.__r_.__value_.__l.__data_);
  if (SHIBYTE(v258.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v258.__r_.__value_.__l.__data_);
  if (SHIBYTE(v257.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v257.__r_.__value_.__l.__data_);
  v15 = std::string::append(&v212, ",\n", 2uLL);
  v16 = *(_OWORD *)&v15->__r_.__value_.__l.__data_;
  v213.__r_.__value_.__r.__words[2] = v15->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v213.__r_.__value_.__l.__data_ = v16;
  v15->__r_.__value_.__l.__size_ = 0;
  v15->__r_.__value_.__r.__words[2] = 0;
  v15->__r_.__value_.__r.__words[0] = 0;
  v17 = (std::string *)std::string::basic_string[abi:ne180100]<0>(&v257, "TlimErrDecayTime");
  v18 = std::string::append(v17, ": ", 2uLL);
  v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
  v258.__r_.__value_.__r.__words[2] = v18->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v258.__r_.__value_.__l.__data_ = v19;
  v18->__r_.__value_.__l.__size_ = 0;
  v18->__r_.__value_.__r.__words[2] = 0;
  v18->__r_.__value_.__r.__words[0] = 0;
  std::to_string(&v259, *(float *)(a2 + 4));
  while (2)
  {
    if ((SHIBYTE(v259.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      if (*((_BYTE *)&v258.__r_.__value_.__r.__words[2] + HIBYTE(v259.__r_.__value_.__r.__words[2]) + 7) != 48)
        break;
      v20 = HIBYTE(v259.__r_.__value_.__r.__words[2]) - 1;
      *((_BYTE *)&v259.__r_.__value_.__s + 23) = (*((_BYTE *)&v259.__r_.__value_.__s + 23) - 1) & 0x7F;
      v21 = &v259;
      goto LABEL_35;
    }
    v21 = (std::string *)v259.__r_.__value_.__r.__words[0];
    if (*(_BYTE *)(v259.__r_.__value_.__r.__words[0] + v259.__r_.__value_.__l.__size_ - 1) == 48)
    {
      v20 = --v259.__r_.__value_.__l.__size_;
LABEL_35:
      v21->__r_.__value_.__s.__data_[v20] = 0;
      continue;
    }
    break;
  }
  v260 = v259;
  memset(&v259, 0, sizeof(v259));
  while (2)
  {
    if ((SHIBYTE(v260.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      if (*((_BYTE *)&v259.__r_.__value_.__r.__words[2] + HIBYTE(v260.__r_.__value_.__r.__words[2]) + 7) != 46)
        break;
      v22 = HIBYTE(v260.__r_.__value_.__r.__words[2]) - 1;
      *((_BYTE *)&v260.__r_.__value_.__s + 23) = (*((_BYTE *)&v260.__r_.__value_.__s + 23) - 1) & 0x7F;
      v23 = &v260;
      goto LABEL_42;
    }
    v23 = (std::string *)v260.__r_.__value_.__r.__words[0];
    if (*(_BYTE *)(v260.__r_.__value_.__r.__words[0] + v260.__r_.__value_.__l.__size_ - 1) == 46)
    {
      v22 = --v260.__r_.__value_.__l.__size_;
LABEL_42:
      v23->__r_.__value_.__s.__data_[v22] = 0;
      continue;
    }
    break;
  }
  v256 = v260;
  if (SHIBYTE(v259.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v259.__r_.__value_.__l.__data_);
  if ((v256.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v24 = &v256;
  else
    v24 = (std::string *)v256.__r_.__value_.__r.__words[0];
  if ((v256.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v25 = HIBYTE(v256.__r_.__value_.__r.__words[2]);
  else
    v25 = v256.__r_.__value_.__l.__size_;
  v26 = std::string::append(&v258, (const std::string::value_type *)v24, v25);
  v27 = *(_OWORD *)&v26->__r_.__value_.__l.__data_;
  v216.__r_.__value_.__r.__words[2] = v26->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v216.__r_.__value_.__l.__data_ = v27;
  v26->__r_.__value_.__l.__size_ = 0;
  v26->__r_.__value_.__r.__words[2] = 0;
  v26->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v256.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v256.__r_.__value_.__l.__data_);
  if (SHIBYTE(v258.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v258.__r_.__value_.__l.__data_);
  if (SHIBYTE(v257.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v257.__r_.__value_.__l.__data_);
  v28 = std::string::append(&v216, ",\n", 2uLL);
  v29 = *(_OWORD *)&v28->__r_.__value_.__l.__data_;
  v217.__r_.__value_.__r.__words[2] = v28->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v217.__r_.__value_.__l.__data_ = v29;
  v28->__r_.__value_.__l.__size_ = 0;
  v28->__r_.__value_.__r.__words[2] = 0;
  v28->__r_.__value_.__r.__words[0] = 0;
  v30 = (std::string *)std::string::basic_string[abi:ne180100]<0>(&v257, "PilotAmplHi_dB");
  v31 = std::string::append(v30, ": ", 2uLL);
  v32 = *(_OWORD *)&v31->__r_.__value_.__l.__data_;
  v258.__r_.__value_.__r.__words[2] = v31->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v258.__r_.__value_.__l.__data_ = v32;
  v31->__r_.__value_.__l.__size_ = 0;
  v31->__r_.__value_.__r.__words[2] = 0;
  v31->__r_.__value_.__r.__words[0] = 0;
  std::to_string(&v259, *(float *)(a2 + 8));
  while (2)
  {
    if ((SHIBYTE(v259.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      if (*((_BYTE *)&v258.__r_.__value_.__r.__words[2] + HIBYTE(v259.__r_.__value_.__r.__words[2]) + 7) != 48)
        break;
      v33 = HIBYTE(v259.__r_.__value_.__r.__words[2]) - 1;
      *((_BYTE *)&v259.__r_.__value_.__s + 23) = (*((_BYTE *)&v259.__r_.__value_.__s + 23) - 1) & 0x7F;
      v34 = &v259;
      goto LABEL_63;
    }
    v34 = (std::string *)v259.__r_.__value_.__r.__words[0];
    if (*(_BYTE *)(v259.__r_.__value_.__r.__words[0] + v259.__r_.__value_.__l.__size_ - 1) == 48)
    {
      v33 = --v259.__r_.__value_.__l.__size_;
LABEL_63:
      v34->__r_.__value_.__s.__data_[v33] = 0;
      continue;
    }
    break;
  }
  v260 = v259;
  memset(&v259, 0, sizeof(v259));
  while (2)
  {
    if ((SHIBYTE(v260.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      if (*((_BYTE *)&v259.__r_.__value_.__r.__words[2] + HIBYTE(v260.__r_.__value_.__r.__words[2]) + 7) != 46)
        break;
      v35 = HIBYTE(v260.__r_.__value_.__r.__words[2]) - 1;
      *((_BYTE *)&v260.__r_.__value_.__s + 23) = (*((_BYTE *)&v260.__r_.__value_.__s + 23) - 1) & 0x7F;
      v36 = &v260;
      goto LABEL_70;
    }
    v36 = (std::string *)v260.__r_.__value_.__r.__words[0];
    if (*(_BYTE *)(v260.__r_.__value_.__r.__words[0] + v260.__r_.__value_.__l.__size_ - 1) == 46)
    {
      v35 = --v260.__r_.__value_.__l.__size_;
LABEL_70:
      v36->__r_.__value_.__s.__data_[v35] = 0;
      continue;
    }
    break;
  }
  v256 = v260;
  if (SHIBYTE(v259.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v259.__r_.__value_.__l.__data_);
  if ((v256.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v37 = &v256;
  else
    v37 = (std::string *)v256.__r_.__value_.__r.__words[0];
  if ((v256.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v38 = HIBYTE(v256.__r_.__value_.__r.__words[2]);
  else
    v38 = v256.__r_.__value_.__l.__size_;
  v39 = std::string::append(&v258, (const std::string::value_type *)v37, v38);
  v40 = *(_OWORD *)&v39->__r_.__value_.__l.__data_;
  v220.__r_.__value_.__r.__words[2] = v39->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v220.__r_.__value_.__l.__data_ = v40;
  v39->__r_.__value_.__l.__size_ = 0;
  v39->__r_.__value_.__r.__words[2] = 0;
  v39->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v256.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v256.__r_.__value_.__l.__data_);
  if (SHIBYTE(v258.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v258.__r_.__value_.__l.__data_);
  if (SHIBYTE(v257.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v257.__r_.__value_.__l.__data_);
  v41 = std::string::append(&v220, ",\n", 2uLL);
  v42 = *(_OWORD *)&v41->__r_.__value_.__l.__data_;
  v221.__r_.__value_.__r.__words[2] = v41->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v221.__r_.__value_.__l.__data_ = v42;
  v41->__r_.__value_.__l.__size_ = 0;
  v41->__r_.__value_.__r.__words[2] = 0;
  v41->__r_.__value_.__r.__words[0] = 0;
  v43 = (std::string *)std::string::basic_string[abi:ne180100]<0>(&v257, "PilotAmplLo_dB");
  v44 = std::string::append(v43, ": ", 2uLL);
  v45 = *(_OWORD *)&v44->__r_.__value_.__l.__data_;
  v258.__r_.__value_.__r.__words[2] = v44->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v258.__r_.__value_.__l.__data_ = v45;
  v44->__r_.__value_.__l.__size_ = 0;
  v44->__r_.__value_.__r.__words[2] = 0;
  v44->__r_.__value_.__r.__words[0] = 0;
  std::to_string(&v259, *(float *)(a2 + 12));
  while (2)
  {
    if ((SHIBYTE(v259.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      if (*((_BYTE *)&v258.__r_.__value_.__r.__words[2] + HIBYTE(v259.__r_.__value_.__r.__words[2]) + 7) != 48)
        break;
      v46 = HIBYTE(v259.__r_.__value_.__r.__words[2]) - 1;
      *((_BYTE *)&v259.__r_.__value_.__s + 23) = (*((_BYTE *)&v259.__r_.__value_.__s + 23) - 1) & 0x7F;
      v47 = &v259;
      goto LABEL_91;
    }
    v47 = (std::string *)v259.__r_.__value_.__r.__words[0];
    if (*(_BYTE *)(v259.__r_.__value_.__r.__words[0] + v259.__r_.__value_.__l.__size_ - 1) == 48)
    {
      v46 = --v259.__r_.__value_.__l.__size_;
LABEL_91:
      v47->__r_.__value_.__s.__data_[v46] = 0;
      continue;
    }
    break;
  }
  v260 = v259;
  memset(&v259, 0, sizeof(v259));
  while (2)
  {
    if ((SHIBYTE(v260.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      if (*((_BYTE *)&v259.__r_.__value_.__r.__words[2] + HIBYTE(v260.__r_.__value_.__r.__words[2]) + 7) != 46)
        break;
      v48 = HIBYTE(v260.__r_.__value_.__r.__words[2]) - 1;
      *((_BYTE *)&v260.__r_.__value_.__s + 23) = (*((_BYTE *)&v260.__r_.__value_.__s + 23) - 1) & 0x7F;
      v49 = &v260;
      goto LABEL_98;
    }
    v49 = (std::string *)v260.__r_.__value_.__r.__words[0];
    if (*(_BYTE *)(v260.__r_.__value_.__r.__words[0] + v260.__r_.__value_.__l.__size_ - 1) == 46)
    {
      v48 = --v260.__r_.__value_.__l.__size_;
LABEL_98:
      v49->__r_.__value_.__s.__data_[v48] = 0;
      continue;
    }
    break;
  }
  v256 = v260;
  if (SHIBYTE(v259.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v259.__r_.__value_.__l.__data_);
  if ((v256.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v50 = &v256;
  else
    v50 = (std::string *)v256.__r_.__value_.__r.__words[0];
  if ((v256.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v51 = HIBYTE(v256.__r_.__value_.__r.__words[2]);
  else
    v51 = v256.__r_.__value_.__l.__size_;
  v52 = std::string::append(&v258, (const std::string::value_type *)v50, v51);
  v53 = *(_OWORD *)&v52->__r_.__value_.__l.__data_;
  v224.__r_.__value_.__r.__words[2] = v52->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v224.__r_.__value_.__l.__data_ = v53;
  v52->__r_.__value_.__l.__size_ = 0;
  v52->__r_.__value_.__r.__words[2] = 0;
  v52->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v256.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v256.__r_.__value_.__l.__data_);
  if (SHIBYTE(v258.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v258.__r_.__value_.__l.__data_);
  if (SHIBYTE(v257.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v257.__r_.__value_.__l.__data_);
  v54 = std::string::append(&v224, ",\n", 2uLL);
  v55 = *(_OWORD *)&v54->__r_.__value_.__l.__data_;
  v225.__r_.__value_.__r.__words[2] = v54->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v225.__r_.__value_.__l.__data_ = v55;
  v54->__r_.__value_.__l.__size_ = 0;
  v54->__r_.__value_.__r.__words[2] = 0;
  v54->__r_.__value_.__r.__words[0] = 0;
  v56 = (std::string *)std::string::basic_string[abi:ne180100]<0>(&v257, "PilotUpperThres");
  v57 = std::string::append(v56, ": ", 2uLL);
  v58 = *(_OWORD *)&v57->__r_.__value_.__l.__data_;
  v258.__r_.__value_.__r.__words[2] = v57->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v258.__r_.__value_.__l.__data_ = v58;
  v57->__r_.__value_.__l.__size_ = 0;
  v57->__r_.__value_.__r.__words[2] = 0;
  v57->__r_.__value_.__r.__words[0] = 0;
  std::to_string(&v259, *(float *)(a2 + 16));
  while (2)
  {
    if ((SHIBYTE(v259.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      if (*((_BYTE *)&v258.__r_.__value_.__r.__words[2] + HIBYTE(v259.__r_.__value_.__r.__words[2]) + 7) != 48)
        break;
      v59 = HIBYTE(v259.__r_.__value_.__r.__words[2]) - 1;
      *((_BYTE *)&v259.__r_.__value_.__s + 23) = (*((_BYTE *)&v259.__r_.__value_.__s + 23) - 1) & 0x7F;
      v60 = &v259;
      goto LABEL_119;
    }
    v60 = (std::string *)v259.__r_.__value_.__r.__words[0];
    if (*(_BYTE *)(v259.__r_.__value_.__r.__words[0] + v259.__r_.__value_.__l.__size_ - 1) == 48)
    {
      v59 = --v259.__r_.__value_.__l.__size_;
LABEL_119:
      v60->__r_.__value_.__s.__data_[v59] = 0;
      continue;
    }
    break;
  }
  v260 = v259;
  memset(&v259, 0, sizeof(v259));
  while (2)
  {
    if ((SHIBYTE(v260.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      if (*((_BYTE *)&v259.__r_.__value_.__r.__words[2] + HIBYTE(v260.__r_.__value_.__r.__words[2]) + 7) != 46)
        break;
      v61 = HIBYTE(v260.__r_.__value_.__r.__words[2]) - 1;
      *((_BYTE *)&v260.__r_.__value_.__s + 23) = (*((_BYTE *)&v260.__r_.__value_.__s + 23) - 1) & 0x7F;
      v62 = &v260;
      goto LABEL_126;
    }
    v62 = (std::string *)v260.__r_.__value_.__r.__words[0];
    if (*(_BYTE *)(v260.__r_.__value_.__r.__words[0] + v260.__r_.__value_.__l.__size_ - 1) == 46)
    {
      v61 = --v260.__r_.__value_.__l.__size_;
LABEL_126:
      v62->__r_.__value_.__s.__data_[v61] = 0;
      continue;
    }
    break;
  }
  v256 = v260;
  if (SHIBYTE(v259.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v259.__r_.__value_.__l.__data_);
  if ((v256.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v63 = &v256;
  else
    v63 = (std::string *)v256.__r_.__value_.__r.__words[0];
  if ((v256.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v64 = HIBYTE(v256.__r_.__value_.__r.__words[2]);
  else
    v64 = v256.__r_.__value_.__l.__size_;
  v65 = std::string::append(&v258, (const std::string::value_type *)v63, v64);
  v66 = *(_OWORD *)&v65->__r_.__value_.__l.__data_;
  v228.__r_.__value_.__r.__words[2] = v65->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v228.__r_.__value_.__l.__data_ = v66;
  v65->__r_.__value_.__l.__size_ = 0;
  v65->__r_.__value_.__r.__words[2] = 0;
  v65->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v256.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v256.__r_.__value_.__l.__data_);
  if (SHIBYTE(v258.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v258.__r_.__value_.__l.__data_);
  if (SHIBYTE(v257.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v257.__r_.__value_.__l.__data_);
  v67 = std::string::append(&v228, ",\n", 2uLL);
  v68 = *(_OWORD *)&v67->__r_.__value_.__l.__data_;
  v229.__r_.__value_.__r.__words[2] = v67->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v229.__r_.__value_.__l.__data_ = v68;
  v67->__r_.__value_.__l.__size_ = 0;
  v67->__r_.__value_.__r.__words[2] = 0;
  v67->__r_.__value_.__r.__words[0] = 0;
  v69 = (std::string *)std::string::basic_string[abi:ne180100]<0>(&v257, "PilotLowerThres");
  v70 = std::string::append(v69, ": ", 2uLL);
  v71 = *(_OWORD *)&v70->__r_.__value_.__l.__data_;
  v258.__r_.__value_.__r.__words[2] = v70->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v258.__r_.__value_.__l.__data_ = v71;
  v70->__r_.__value_.__l.__size_ = 0;
  v70->__r_.__value_.__r.__words[2] = 0;
  v70->__r_.__value_.__r.__words[0] = 0;
  std::to_string(&v259, *(float *)(a2 + 20));
  while (2)
  {
    if ((SHIBYTE(v259.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      if (*((_BYTE *)&v258.__r_.__value_.__r.__words[2] + HIBYTE(v259.__r_.__value_.__r.__words[2]) + 7) != 48)
        break;
      v72 = HIBYTE(v259.__r_.__value_.__r.__words[2]) - 1;
      *((_BYTE *)&v259.__r_.__value_.__s + 23) = (*((_BYTE *)&v259.__r_.__value_.__s + 23) - 1) & 0x7F;
      v73 = &v259;
      goto LABEL_147;
    }
    v73 = (std::string *)v259.__r_.__value_.__r.__words[0];
    if (*(_BYTE *)(v259.__r_.__value_.__r.__words[0] + v259.__r_.__value_.__l.__size_ - 1) == 48)
    {
      v72 = --v259.__r_.__value_.__l.__size_;
LABEL_147:
      v73->__r_.__value_.__s.__data_[v72] = 0;
      continue;
    }
    break;
  }
  v260 = v259;
  memset(&v259, 0, sizeof(v259));
  while (2)
  {
    if ((SHIBYTE(v260.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      if (*((_BYTE *)&v259.__r_.__value_.__r.__words[2] + HIBYTE(v260.__r_.__value_.__r.__words[2]) + 7) != 46)
        break;
      v74 = HIBYTE(v260.__r_.__value_.__r.__words[2]) - 1;
      *((_BYTE *)&v260.__r_.__value_.__s + 23) = (*((_BYTE *)&v260.__r_.__value_.__s + 23) - 1) & 0x7F;
      v75 = &v260;
      goto LABEL_154;
    }
    v75 = (std::string *)v260.__r_.__value_.__r.__words[0];
    if (*(_BYTE *)(v260.__r_.__value_.__r.__words[0] + v260.__r_.__value_.__l.__size_ - 1) == 46)
    {
      v74 = --v260.__r_.__value_.__l.__size_;
LABEL_154:
      v75->__r_.__value_.__s.__data_[v74] = 0;
      continue;
    }
    break;
  }
  v256 = v260;
  if (SHIBYTE(v259.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v259.__r_.__value_.__l.__data_);
  if ((v256.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v76 = &v256;
  else
    v76 = (std::string *)v256.__r_.__value_.__r.__words[0];
  if ((v256.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v77 = HIBYTE(v256.__r_.__value_.__r.__words[2]);
  else
    v77 = v256.__r_.__value_.__l.__size_;
  v78 = std::string::append(&v258, (const std::string::value_type *)v76, v77);
  v79 = *(_OWORD *)&v78->__r_.__value_.__l.__data_;
  v232.__r_.__value_.__r.__words[2] = v78->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v232.__r_.__value_.__l.__data_ = v79;
  v78->__r_.__value_.__l.__size_ = 0;
  v78->__r_.__value_.__r.__words[2] = 0;
  v78->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v256.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v256.__r_.__value_.__l.__data_);
  if (SHIBYTE(v258.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v258.__r_.__value_.__l.__data_);
  if (SHIBYTE(v257.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v257.__r_.__value_.__l.__data_);
  v80 = std::string::append(&v232, ",\n", 2uLL);
  v81 = *(_OWORD *)&v80->__r_.__value_.__l.__data_;
  v233.__r_.__value_.__r.__words[2] = v80->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v233.__r_.__value_.__l.__data_ = v81;
  v80->__r_.__value_.__l.__size_ = 0;
  v80->__r_.__value_.__r.__words[2] = 0;
  v80->__r_.__value_.__r.__words[0] = 0;
  v82 = (std::string *)std::string::basic_string[abi:ne180100]<0>(&v257, "PilotDecayTime");
  v83 = std::string::append(v82, ": ", 2uLL);
  v84 = *(_OWORD *)&v83->__r_.__value_.__l.__data_;
  v258.__r_.__value_.__r.__words[2] = v83->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v258.__r_.__value_.__l.__data_ = v84;
  v83->__r_.__value_.__l.__size_ = 0;
  v83->__r_.__value_.__r.__words[2] = 0;
  v83->__r_.__value_.__r.__words[0] = 0;
  std::to_string(&v259, *(float *)(a2 + 24));
  while (2)
  {
    if ((SHIBYTE(v259.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      if (*((_BYTE *)&v258.__r_.__value_.__r.__words[2] + HIBYTE(v259.__r_.__value_.__r.__words[2]) + 7) != 48)
        break;
      v85 = HIBYTE(v259.__r_.__value_.__r.__words[2]) - 1;
      *((_BYTE *)&v259.__r_.__value_.__s + 23) = (*((_BYTE *)&v259.__r_.__value_.__s + 23) - 1) & 0x7F;
      v86 = &v259;
      goto LABEL_175;
    }
    v86 = (std::string *)v259.__r_.__value_.__r.__words[0];
    if (*(_BYTE *)(v259.__r_.__value_.__r.__words[0] + v259.__r_.__value_.__l.__size_ - 1) == 48)
    {
      v85 = --v259.__r_.__value_.__l.__size_;
LABEL_175:
      v86->__r_.__value_.__s.__data_[v85] = 0;
      continue;
    }
    break;
  }
  v260 = v259;
  memset(&v259, 0, sizeof(v259));
  while (2)
  {
    if ((SHIBYTE(v260.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      if (*((_BYTE *)&v259.__r_.__value_.__r.__words[2] + HIBYTE(v260.__r_.__value_.__r.__words[2]) + 7) != 46)
        break;
      v87 = HIBYTE(v260.__r_.__value_.__r.__words[2]) - 1;
      *((_BYTE *)&v260.__r_.__value_.__s + 23) = (*((_BYTE *)&v260.__r_.__value_.__s + 23) - 1) & 0x7F;
      v88 = &v260;
      goto LABEL_182;
    }
    v88 = (std::string *)v260.__r_.__value_.__r.__words[0];
    if (*(_BYTE *)(v260.__r_.__value_.__r.__words[0] + v260.__r_.__value_.__l.__size_ - 1) == 46)
    {
      v87 = --v260.__r_.__value_.__l.__size_;
LABEL_182:
      v88->__r_.__value_.__s.__data_[v87] = 0;
      continue;
    }
    break;
  }
  v256 = v260;
  if (SHIBYTE(v259.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v259.__r_.__value_.__l.__data_);
  if ((v256.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v89 = &v256;
  else
    v89 = (std::string *)v256.__r_.__value_.__r.__words[0];
  if ((v256.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v90 = HIBYTE(v256.__r_.__value_.__r.__words[2]);
  else
    v90 = v256.__r_.__value_.__l.__size_;
  v91 = std::string::append(&v258, (const std::string::value_type *)v89, v90);
  v92 = *(_OWORD *)&v91->__r_.__value_.__l.__data_;
  v236.__r_.__value_.__r.__words[2] = v91->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v236.__r_.__value_.__l.__data_ = v92;
  v91->__r_.__value_.__l.__size_ = 0;
  v91->__r_.__value_.__r.__words[2] = 0;
  v91->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v256.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v256.__r_.__value_.__l.__data_);
  if (SHIBYTE(v258.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v258.__r_.__value_.__l.__data_);
  if (SHIBYTE(v257.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v257.__r_.__value_.__l.__data_);
  v93 = std::string::append(&v236, ",\n", 2uLL);
  v94 = *(_OWORD *)&v93->__r_.__value_.__l.__data_;
  v237.__r_.__value_.__r.__words[2] = v93->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v237.__r_.__value_.__l.__data_ = v94;
  v93->__r_.__value_.__l.__size_ = 0;
  v93->__r_.__value_.__r.__words[2] = 0;
  v93->__r_.__value_.__r.__words[0] = 0;
  v95 = (std::string *)std::string::basic_string[abi:ne180100]<0>(&v257, "PilotFreq");
  v96 = std::string::append(v95, ": ", 2uLL);
  v97 = *(_OWORD *)&v96->__r_.__value_.__l.__data_;
  v258.__r_.__value_.__r.__words[2] = v96->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v258.__r_.__value_.__l.__data_ = v97;
  v96->__r_.__value_.__l.__size_ = 0;
  v96->__r_.__value_.__r.__words[2] = 0;
  v96->__r_.__value_.__r.__words[0] = 0;
  std::to_string(&v259, *(float *)(a2 + 28));
  while (2)
  {
    if ((SHIBYTE(v259.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      if (*((_BYTE *)&v258.__r_.__value_.__r.__words[2] + HIBYTE(v259.__r_.__value_.__r.__words[2]) + 7) != 48)
        break;
      v98 = HIBYTE(v259.__r_.__value_.__r.__words[2]) - 1;
      *((_BYTE *)&v259.__r_.__value_.__s + 23) = (*((_BYTE *)&v259.__r_.__value_.__s + 23) - 1) & 0x7F;
      v99 = &v259;
      goto LABEL_203;
    }
    v99 = (std::string *)v259.__r_.__value_.__r.__words[0];
    if (*(_BYTE *)(v259.__r_.__value_.__r.__words[0] + v259.__r_.__value_.__l.__size_ - 1) == 48)
    {
      v98 = --v259.__r_.__value_.__l.__size_;
LABEL_203:
      v99->__r_.__value_.__s.__data_[v98] = 0;
      continue;
    }
    break;
  }
  v260 = v259;
  memset(&v259, 0, sizeof(v259));
  while (2)
  {
    if ((SHIBYTE(v260.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      if (*((_BYTE *)&v259.__r_.__value_.__r.__words[2] + HIBYTE(v260.__r_.__value_.__r.__words[2]) + 7) != 46)
        break;
      v100 = HIBYTE(v260.__r_.__value_.__r.__words[2]) - 1;
      *((_BYTE *)&v260.__r_.__value_.__s + 23) = (*((_BYTE *)&v260.__r_.__value_.__s + 23) - 1) & 0x7F;
      v101 = &v260;
      goto LABEL_210;
    }
    v101 = (std::string *)v260.__r_.__value_.__r.__words[0];
    if (*(_BYTE *)(v260.__r_.__value_.__r.__words[0] + v260.__r_.__value_.__l.__size_ - 1) == 46)
    {
      v100 = --v260.__r_.__value_.__l.__size_;
LABEL_210:
      v101->__r_.__value_.__s.__data_[v100] = 0;
      continue;
    }
    break;
  }
  v256 = v260;
  if (SHIBYTE(v259.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v259.__r_.__value_.__l.__data_);
  if ((v256.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v102 = &v256;
  else
    v102 = (std::string *)v256.__r_.__value_.__r.__words[0];
  if ((v256.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v103 = HIBYTE(v256.__r_.__value_.__r.__words[2]);
  else
    v103 = v256.__r_.__value_.__l.__size_;
  v104 = std::string::append(&v258, (const std::string::value_type *)v102, v103);
  v105 = *(_OWORD *)&v104->__r_.__value_.__l.__data_;
  v240.__r_.__value_.__r.__words[2] = v104->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v240.__r_.__value_.__l.__data_ = v105;
  v104->__r_.__value_.__l.__size_ = 0;
  v104->__r_.__value_.__r.__words[2] = 0;
  v104->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v256.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v256.__r_.__value_.__l.__data_);
  if (SHIBYTE(v258.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v258.__r_.__value_.__l.__data_);
  if (SHIBYTE(v257.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v257.__r_.__value_.__l.__data_);
  v106 = std::string::append(&v240, ",\n", 2uLL);
  v107 = *(_OWORD *)&v106->__r_.__value_.__l.__data_;
  v241.__r_.__value_.__r.__words[2] = v106->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v241.__r_.__value_.__l.__data_ = v107;
  v106->__r_.__value_.__l.__size_ = 0;
  v106->__r_.__value_.__r.__words[2] = 0;
  v106->__r_.__value_.__r.__words[0] = 0;
  v108 = (std::string *)std::string::basic_string[abi:ne180100]<0>(&v257, "LPMLSPreGain");
  v109 = std::string::append(v108, ": ", 2uLL);
  v110 = *(_OWORD *)&v109->__r_.__value_.__l.__data_;
  v258.__r_.__value_.__r.__words[2] = v109->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v258.__r_.__value_.__l.__data_ = v110;
  v109->__r_.__value_.__l.__size_ = 0;
  v109->__r_.__value_.__r.__words[2] = 0;
  v109->__r_.__value_.__r.__words[0] = 0;
  std::to_string(&v259, *(float *)(a2 + 32));
  while (2)
  {
    if ((SHIBYTE(v259.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      if (*((_BYTE *)&v258.__r_.__value_.__r.__words[2] + HIBYTE(v259.__r_.__value_.__r.__words[2]) + 7) != 48)
        break;
      v111 = HIBYTE(v259.__r_.__value_.__r.__words[2]) - 1;
      *((_BYTE *)&v259.__r_.__value_.__s + 23) = (*((_BYTE *)&v259.__r_.__value_.__s + 23) - 1) & 0x7F;
      v112 = &v259;
      goto LABEL_231;
    }
    v112 = (std::string *)v259.__r_.__value_.__r.__words[0];
    if (*(_BYTE *)(v259.__r_.__value_.__r.__words[0] + v259.__r_.__value_.__l.__size_ - 1) == 48)
    {
      v111 = --v259.__r_.__value_.__l.__size_;
LABEL_231:
      v112->__r_.__value_.__s.__data_[v111] = 0;
      continue;
    }
    break;
  }
  v260 = v259;
  memset(&v259, 0, sizeof(v259));
  while (2)
  {
    if ((SHIBYTE(v260.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      if (*((_BYTE *)&v259.__r_.__value_.__r.__words[2] + HIBYTE(v260.__r_.__value_.__r.__words[2]) + 7) != 46)
        break;
      v113 = HIBYTE(v260.__r_.__value_.__r.__words[2]) - 1;
      *((_BYTE *)&v260.__r_.__value_.__s + 23) = (*((_BYTE *)&v260.__r_.__value_.__s + 23) - 1) & 0x7F;
      v114 = &v260;
      goto LABEL_238;
    }
    v114 = (std::string *)v260.__r_.__value_.__r.__words[0];
    if (*(_BYTE *)(v260.__r_.__value_.__r.__words[0] + v260.__r_.__value_.__l.__size_ - 1) == 46)
    {
      v113 = --v260.__r_.__value_.__l.__size_;
LABEL_238:
      v114->__r_.__value_.__s.__data_[v113] = 0;
      continue;
    }
    break;
  }
  v256 = v260;
  if (SHIBYTE(v259.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v259.__r_.__value_.__l.__data_);
  if ((v256.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v115 = &v256;
  else
    v115 = (std::string *)v256.__r_.__value_.__r.__words[0];
  if ((v256.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v116 = HIBYTE(v256.__r_.__value_.__r.__words[2]);
  else
    v116 = v256.__r_.__value_.__l.__size_;
  v117 = std::string::append(&v258, (const std::string::value_type *)v115, v116);
  v118 = *(_OWORD *)&v117->__r_.__value_.__l.__data_;
  v244.__r_.__value_.__r.__words[2] = v117->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v244.__r_.__value_.__l.__data_ = v118;
  v117->__r_.__value_.__l.__size_ = 0;
  v117->__r_.__value_.__r.__words[2] = 0;
  v117->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v256.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v256.__r_.__value_.__l.__data_);
  if (SHIBYTE(v258.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v258.__r_.__value_.__l.__data_);
  if (SHIBYTE(v257.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v257.__r_.__value_.__l.__data_);
  v119 = std::string::append(&v244, ",\n", 2uLL);
  v120 = *(_OWORD *)&v119->__r_.__value_.__l.__data_;
  v245.__r_.__value_.__r.__words[2] = v119->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v245.__r_.__value_.__l.__data_ = v120;
  v119->__r_.__value_.__l.__size_ = 0;
  v119->__r_.__value_.__r.__words[2] = 0;
  v119->__r_.__value_.__r.__words[0] = 0;
  v121 = (std::string *)std::string::basic_string[abi:ne180100]<0>(&v257, "LPMLSPostGain");
  v122 = std::string::append(v121, ": ", 2uLL);
  v123 = *(_OWORD *)&v122->__r_.__value_.__l.__data_;
  v258.__r_.__value_.__r.__words[2] = v122->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v258.__r_.__value_.__l.__data_ = v123;
  v122->__r_.__value_.__l.__size_ = 0;
  v122->__r_.__value_.__r.__words[2] = 0;
  v122->__r_.__value_.__r.__words[0] = 0;
  std::to_string(&v259, *(float *)(a2 + 36));
  while (2)
  {
    if ((SHIBYTE(v259.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      if (*((_BYTE *)&v258.__r_.__value_.__r.__words[2] + HIBYTE(v259.__r_.__value_.__r.__words[2]) + 7) != 48)
        break;
      v124 = HIBYTE(v259.__r_.__value_.__r.__words[2]) - 1;
      *((_BYTE *)&v259.__r_.__value_.__s + 23) = (*((_BYTE *)&v259.__r_.__value_.__s + 23) - 1) & 0x7F;
      v125 = &v259;
      goto LABEL_259;
    }
    v125 = (std::string *)v259.__r_.__value_.__r.__words[0];
    if (*(_BYTE *)(v259.__r_.__value_.__r.__words[0] + v259.__r_.__value_.__l.__size_ - 1) == 48)
    {
      v124 = --v259.__r_.__value_.__l.__size_;
LABEL_259:
      v125->__r_.__value_.__s.__data_[v124] = 0;
      continue;
    }
    break;
  }
  v260 = v259;
  memset(&v259, 0, sizeof(v259));
  while (2)
  {
    if ((SHIBYTE(v260.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      if (*((_BYTE *)&v259.__r_.__value_.__r.__words[2] + HIBYTE(v260.__r_.__value_.__r.__words[2]) + 7) != 46)
        break;
      v126 = HIBYTE(v260.__r_.__value_.__r.__words[2]) - 1;
      *((_BYTE *)&v260.__r_.__value_.__s + 23) = (*((_BYTE *)&v260.__r_.__value_.__s + 23) - 1) & 0x7F;
      v127 = &v260;
      goto LABEL_266;
    }
    v127 = (std::string *)v260.__r_.__value_.__r.__words[0];
    if (*(_BYTE *)(v260.__r_.__value_.__r.__words[0] + v260.__r_.__value_.__l.__size_ - 1) == 46)
    {
      v126 = --v260.__r_.__value_.__l.__size_;
LABEL_266:
      v127->__r_.__value_.__s.__data_[v126] = 0;
      continue;
    }
    break;
  }
  v256 = v260;
  if (SHIBYTE(v259.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v259.__r_.__value_.__l.__data_);
  if ((v256.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v128 = &v256;
  else
    v128 = (std::string *)v256.__r_.__value_.__r.__words[0];
  if ((v256.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v129 = HIBYTE(v256.__r_.__value_.__r.__words[2]);
  else
    v129 = v256.__r_.__value_.__l.__size_;
  v130 = std::string::append(&v258, (const std::string::value_type *)v128, v129);
  v131 = *(_OWORD *)&v130->__r_.__value_.__l.__data_;
  v248.__r_.__value_.__r.__words[2] = v130->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v248.__r_.__value_.__l.__data_ = v131;
  v130->__r_.__value_.__l.__size_ = 0;
  v130->__r_.__value_.__r.__words[2] = 0;
  v130->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v256.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v256.__r_.__value_.__l.__data_);
  if (SHIBYTE(v258.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v258.__r_.__value_.__l.__data_);
  if (SHIBYTE(v257.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v257.__r_.__value_.__l.__data_);
  v132 = std::string::append(&v248, ",\n", 2uLL);
  v133 = *(_OWORD *)&v132->__r_.__value_.__l.__data_;
  v249.__r_.__value_.__r.__words[2] = v132->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v249.__r_.__value_.__l.__data_ = v133;
  v132->__r_.__value_.__l.__size_ = 0;
  v132->__r_.__value_.__r.__words[2] = 0;
  v132->__r_.__value_.__r.__words[0] = 0;
  v134 = (std::string *)std::string::basic_string[abi:ne180100]<0>(&v257, "LPMLSLowerCorner");
  v135 = std::string::append(v134, ": ", 2uLL);
  v136 = *(_OWORD *)&v135->__r_.__value_.__l.__data_;
  v258.__r_.__value_.__r.__words[2] = v135->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v258.__r_.__value_.__l.__data_ = v136;
  v135->__r_.__value_.__l.__size_ = 0;
  v135->__r_.__value_.__r.__words[2] = 0;
  v135->__r_.__value_.__r.__words[0] = 0;
  std::to_string(&v259, *(float *)(a2 + 40));
  while (2)
  {
    if ((SHIBYTE(v259.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      if (*((_BYTE *)&v258.__r_.__value_.__r.__words[2] + HIBYTE(v259.__r_.__value_.__r.__words[2]) + 7) != 48)
        break;
      v137 = HIBYTE(v259.__r_.__value_.__r.__words[2]) - 1;
      *((_BYTE *)&v259.__r_.__value_.__s + 23) = (*((_BYTE *)&v259.__r_.__value_.__s + 23) - 1) & 0x7F;
      v138 = &v259;
      goto LABEL_287;
    }
    v138 = (std::string *)v259.__r_.__value_.__r.__words[0];
    if (*(_BYTE *)(v259.__r_.__value_.__r.__words[0] + v259.__r_.__value_.__l.__size_ - 1) == 48)
    {
      v137 = --v259.__r_.__value_.__l.__size_;
LABEL_287:
      v138->__r_.__value_.__s.__data_[v137] = 0;
      continue;
    }
    break;
  }
  v260 = v259;
  memset(&v259, 0, sizeof(v259));
  while (2)
  {
    if ((SHIBYTE(v260.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      if (*((_BYTE *)&v259.__r_.__value_.__r.__words[2] + HIBYTE(v260.__r_.__value_.__r.__words[2]) + 7) != 46)
        break;
      v139 = HIBYTE(v260.__r_.__value_.__r.__words[2]) - 1;
      *((_BYTE *)&v260.__r_.__value_.__s + 23) = (*((_BYTE *)&v260.__r_.__value_.__s + 23) - 1) & 0x7F;
      v140 = &v260;
      goto LABEL_294;
    }
    v140 = (std::string *)v260.__r_.__value_.__r.__words[0];
    if (*(_BYTE *)(v260.__r_.__value_.__r.__words[0] + v260.__r_.__value_.__l.__size_ - 1) == 46)
    {
      v139 = --v260.__r_.__value_.__l.__size_;
LABEL_294:
      v140->__r_.__value_.__s.__data_[v139] = 0;
      continue;
    }
    break;
  }
  v256 = v260;
  if (SHIBYTE(v259.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v259.__r_.__value_.__l.__data_);
  if ((v256.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v141 = &v256;
  else
    v141 = (std::string *)v256.__r_.__value_.__r.__words[0];
  if ((v256.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v142 = HIBYTE(v256.__r_.__value_.__r.__words[2]);
  else
    v142 = v256.__r_.__value_.__l.__size_;
  v143 = std::string::append(&v258, (const std::string::value_type *)v141, v142);
  v144 = *(_OWORD *)&v143->__r_.__value_.__l.__data_;
  v252.__r_.__value_.__r.__words[2] = v143->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v252.__r_.__value_.__l.__data_ = v144;
  v143->__r_.__value_.__l.__size_ = 0;
  v143->__r_.__value_.__r.__words[2] = 0;
  v143->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v256.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v256.__r_.__value_.__l.__data_);
  if (SHIBYTE(v258.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v258.__r_.__value_.__l.__data_);
  if (SHIBYTE(v257.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v257.__r_.__value_.__l.__data_);
  v145 = std::string::append(&v252, ",\n", 2uLL);
  v146 = *(_OWORD *)&v145->__r_.__value_.__l.__data_;
  v253.__r_.__value_.__r.__words[2] = v145->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v253.__r_.__value_.__l.__data_ = v146;
  v145->__r_.__value_.__l.__size_ = 0;
  v145->__r_.__value_.__r.__words[2] = 0;
  v145->__r_.__value_.__r.__words[0] = 0;
  v147 = (std::string *)std::string::basic_string[abi:ne180100]<0>(&v259, "ThermalMeasurementMethod");
  v148 = std::string::append(v147, ": ", 2uLL);
  v149 = *(_OWORD *)&v148->__r_.__value_.__l.__data_;
  v260.__r_.__value_.__r.__words[2] = v148->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v260.__r_.__value_.__l.__data_ = v149;
  v148->__r_.__value_.__l.__size_ = 0;
  v148->__r_.__value_.__r.__words[2] = 0;
  v148->__r_.__value_.__r.__words[0] = 0;
  std::to_string(&v258, *(_DWORD *)(a2 + 44));
  if ((v258.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v150 = &v258;
  else
    v150 = (std::string *)v258.__r_.__value_.__r.__words[0];
  if ((v258.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v151 = HIBYTE(v258.__r_.__value_.__r.__words[2]);
  else
    v151 = v258.__r_.__value_.__l.__size_;
  v152 = std::string::append(&v260, (const std::string::value_type *)v150, v151);
  v153 = *(_OWORD *)&v152->__r_.__value_.__l.__data_;
  v256.__r_.__value_.__r.__words[2] = v152->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v256.__r_.__value_.__l.__data_ = v153;
  v152->__r_.__value_.__l.__size_ = 0;
  v152->__r_.__value_.__r.__words[2] = 0;
  v152->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v258.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v258.__r_.__value_.__l.__data_);
  if (SHIBYTE(v260.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v260.__r_.__value_.__l.__data_);
  if (SHIBYTE(v259.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v259.__r_.__value_.__l.__data_);
  v154 = std::string::append(&v256, ",\n", 2uLL);
  v155 = *(_OWORD *)&v154->__r_.__value_.__l.__data_;
  v257.__r_.__value_.__r.__words[2] = v154->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v257.__r_.__value_.__l.__data_ = v155;
  v154->__r_.__value_.__l.__size_ = 0;
  v154->__r_.__value_.__r.__words[2] = 0;
  v154->__r_.__value_.__r.__words[0] = 0;
  v156 = (std::string *)std::string::basic_string[abi:ne180100]<0>(&v259, "DisplacementProtectionType");
  v157 = std::string::append(v156, ": ", 2uLL);
  v158 = *(_OWORD *)&v157->__r_.__value_.__l.__data_;
  v260.__r_.__value_.__r.__words[2] = v157->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v260.__r_.__value_.__l.__data_ = v158;
  v157->__r_.__value_.__l.__size_ = 0;
  v157->__r_.__value_.__r.__words[2] = 0;
  v157->__r_.__value_.__r.__words[0] = 0;
  std::to_string(&v258, *(_DWORD *)(a2 + 48));
  if ((v258.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v159 = &v258;
  else
    v159 = (std::string *)v258.__r_.__value_.__r.__words[0];
  if ((v258.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v160 = HIBYTE(v258.__r_.__value_.__r.__words[2]);
  else
    v160 = v258.__r_.__value_.__l.__size_;
  v161 = std::string::append(&v260, (const std::string::value_type *)v159, v160);
  v162 = *(_OWORD *)&v161->__r_.__value_.__l.__data_;
  v255 = v161->__r_.__value_.__r.__words[2];
  v254 = v162;
  v161->__r_.__value_.__l.__size_ = 0;
  v161->__r_.__value_.__r.__words[2] = 0;
  v161->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v258.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v258.__r_.__value_.__l.__data_);
  if (SHIBYTE(v260.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v260.__r_.__value_.__l.__data_);
  if (SHIBYTE(v259.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v259.__r_.__value_.__l.__data_);
  if (v255 >= 0)
    v163 = (const std::string::value_type *)&v254;
  else
    v163 = (const std::string::value_type *)v254;
  if (v255 >= 0)
    v164 = HIBYTE(v255);
  else
    v164 = *((_QWORD *)&v254 + 1);
  v165 = std::string::append(&v257, v163, v164);
  v166 = *(_OWORD *)&v165->__r_.__value_.__l.__data_;
  v251 = v165->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = v166;
  v165->__r_.__value_.__l.__size_ = 0;
  v165->__r_.__value_.__r.__words[2] = 0;
  v165->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v255) < 0)
    operator delete((void *)v254);
  if (SHIBYTE(v257.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v257.__r_.__value_.__l.__data_);
  if (SHIBYTE(v256.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v256.__r_.__value_.__l.__data_);
  if (v251 >= 0)
    v167 = __p;
  else
    v167 = (void **)__p[0];
  if (v251 >= 0)
    v168 = HIBYTE(v251);
  else
    v168 = (std::string::size_type)__p[1];
  v169 = std::string::append(&v253, (const std::string::value_type *)v167, v168);
  v170 = *(_OWORD *)&v169->__r_.__value_.__l.__data_;
  v247 = v169->__r_.__value_.__r.__words[2];
  *(_OWORD *)v246 = v170;
  v169->__r_.__value_.__l.__size_ = 0;
  v169->__r_.__value_.__r.__words[2] = 0;
  v169->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v251) < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v253.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v253.__r_.__value_.__l.__data_);
  if (SHIBYTE(v252.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v252.__r_.__value_.__l.__data_);
  if (v247 >= 0)
    v171 = v246;
  else
    v171 = (void **)v246[0];
  if (v247 >= 0)
    v172 = HIBYTE(v247);
  else
    v172 = (std::string::size_type)v246[1];
  v173 = std::string::append(&v249, (const std::string::value_type *)v171, v172);
  v174 = *(_OWORD *)&v173->__r_.__value_.__l.__data_;
  v243 = v173->__r_.__value_.__r.__words[2];
  *(_OWORD *)v242 = v174;
  v173->__r_.__value_.__l.__size_ = 0;
  v173->__r_.__value_.__r.__words[2] = 0;
  v173->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v247) < 0)
    operator delete(v246[0]);
  if (SHIBYTE(v249.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v249.__r_.__value_.__l.__data_);
  if (SHIBYTE(v248.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v248.__r_.__value_.__l.__data_);
  if (v243 >= 0)
    v175 = v242;
  else
    v175 = (void **)v242[0];
  if (v243 >= 0)
    v176 = HIBYTE(v243);
  else
    v176 = (std::string::size_type)v242[1];
  v177 = std::string::append(&v245, (const std::string::value_type *)v175, v176);
  v178 = *(_OWORD *)&v177->__r_.__value_.__l.__data_;
  v239 = v177->__r_.__value_.__r.__words[2];
  *(_OWORD *)v238 = v178;
  v177->__r_.__value_.__l.__size_ = 0;
  v177->__r_.__value_.__r.__words[2] = 0;
  v177->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v243) < 0)
    operator delete(v242[0]);
  if (SHIBYTE(v245.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v245.__r_.__value_.__l.__data_);
  if (SHIBYTE(v244.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v244.__r_.__value_.__l.__data_);
  if (v239 >= 0)
    v179 = v238;
  else
    v179 = (void **)v238[0];
  if (v239 >= 0)
    v180 = HIBYTE(v239);
  else
    v180 = (std::string::size_type)v238[1];
  v181 = std::string::append(&v241, (const std::string::value_type *)v179, v180);
  v182 = *(_OWORD *)&v181->__r_.__value_.__l.__data_;
  v235 = v181->__r_.__value_.__r.__words[2];
  *(_OWORD *)v234 = v182;
  v181->__r_.__value_.__l.__size_ = 0;
  v181->__r_.__value_.__r.__words[2] = 0;
  v181->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v239) < 0)
    operator delete(v238[0]);
  if (SHIBYTE(v241.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v241.__r_.__value_.__l.__data_);
  if (SHIBYTE(v240.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v240.__r_.__value_.__l.__data_);
  if (v235 >= 0)
    v183 = v234;
  else
    v183 = (void **)v234[0];
  if (v235 >= 0)
    v184 = HIBYTE(v235);
  else
    v184 = (std::string::size_type)v234[1];
  v185 = std::string::append(&v237, (const std::string::value_type *)v183, v184);
  v186 = *(_OWORD *)&v185->__r_.__value_.__l.__data_;
  v231 = v185->__r_.__value_.__r.__words[2];
  *(_OWORD *)v230 = v186;
  v185->__r_.__value_.__l.__size_ = 0;
  v185->__r_.__value_.__r.__words[2] = 0;
  v185->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v235) < 0)
    operator delete(v234[0]);
  if (SHIBYTE(v237.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v237.__r_.__value_.__l.__data_);
  if (SHIBYTE(v236.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v236.__r_.__value_.__l.__data_);
  if (v231 >= 0)
    v187 = v230;
  else
    v187 = (void **)v230[0];
  if (v231 >= 0)
    v188 = HIBYTE(v231);
  else
    v188 = (std::string::size_type)v230[1];
  v189 = std::string::append(&v233, (const std::string::value_type *)v187, v188);
  v190 = *(_OWORD *)&v189->__r_.__value_.__l.__data_;
  v227 = v189->__r_.__value_.__r.__words[2];
  *(_OWORD *)v226 = v190;
  v189->__r_.__value_.__l.__size_ = 0;
  v189->__r_.__value_.__r.__words[2] = 0;
  v189->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v231) < 0)
    operator delete(v230[0]);
  if (SHIBYTE(v233.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v233.__r_.__value_.__l.__data_);
  if (SHIBYTE(v232.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v232.__r_.__value_.__l.__data_);
  if (v227 >= 0)
    v191 = v226;
  else
    v191 = (void **)v226[0];
  if (v227 >= 0)
    v192 = HIBYTE(v227);
  else
    v192 = (std::string::size_type)v226[1];
  v193 = std::string::append(&v229, (const std::string::value_type *)v191, v192);
  v194 = *(_OWORD *)&v193->__r_.__value_.__l.__data_;
  v223 = v193->__r_.__value_.__r.__words[2];
  *(_OWORD *)v222 = v194;
  v193->__r_.__value_.__l.__size_ = 0;
  v193->__r_.__value_.__r.__words[2] = 0;
  v193->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v227) < 0)
    operator delete(v226[0]);
  if (SHIBYTE(v229.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v229.__r_.__value_.__l.__data_);
  if (SHIBYTE(v228.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v228.__r_.__value_.__l.__data_);
  if (v223 >= 0)
    v195 = v222;
  else
    v195 = (void **)v222[0];
  if (v223 >= 0)
    v196 = HIBYTE(v223);
  else
    v196 = (std::string::size_type)v222[1];
  v197 = std::string::append(&v225, (const std::string::value_type *)v195, v196);
  v198 = *(_OWORD *)&v197->__r_.__value_.__l.__data_;
  v219 = v197->__r_.__value_.__r.__words[2];
  *(_OWORD *)v218 = v198;
  v197->__r_.__value_.__l.__size_ = 0;
  v197->__r_.__value_.__r.__words[2] = 0;
  v197->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v223) < 0)
    operator delete(v222[0]);
  if (SHIBYTE(v225.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v225.__r_.__value_.__l.__data_);
  if (SHIBYTE(v224.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v224.__r_.__value_.__l.__data_);
  if (v219 >= 0)
    v199 = v218;
  else
    v199 = (void **)v218[0];
  if (v219 >= 0)
    v200 = HIBYTE(v219);
  else
    v200 = (std::string::size_type)v218[1];
  v201 = std::string::append(&v221, (const std::string::value_type *)v199, v200);
  v202 = *(_OWORD *)&v201->__r_.__value_.__l.__data_;
  v215 = v201->__r_.__value_.__r.__words[2];
  *(_OWORD *)v214 = v202;
  v201->__r_.__value_.__l.__size_ = 0;
  v201->__r_.__value_.__r.__words[2] = 0;
  v201->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v219) < 0)
    operator delete(v218[0]);
  if (SHIBYTE(v221.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v221.__r_.__value_.__l.__data_);
  if (SHIBYTE(v220.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v220.__r_.__value_.__l.__data_);
  if (v215 >= 0)
    v203 = v214;
  else
    v203 = (void **)v214[0];
  if (v215 >= 0)
    v204 = HIBYTE(v215);
  else
    v204 = (std::string::size_type)v214[1];
  v205 = std::string::append(&v217, (const std::string::value_type *)v203, v204);
  v206 = *(_OWORD *)&v205->__r_.__value_.__l.__data_;
  v211 = v205->__r_.__value_.__r.__words[2];
  *(_OWORD *)v210 = v206;
  v205->__r_.__value_.__l.__size_ = 0;
  v205->__r_.__value_.__r.__words[2] = 0;
  v205->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v215) < 0)
    operator delete(v214[0]);
  if (SHIBYTE(v217.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v217.__r_.__value_.__l.__data_);
  if (SHIBYTE(v216.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v216.__r_.__value_.__l.__data_);
  if (v211 >= 0)
    v207 = v210;
  else
    v207 = (void **)v210[0];
  if (v211 >= 0)
    v208 = HIBYTE(v211);
  else
    v208 = (std::string::size_type)v210[1];
  v209 = std::string::append(&v213, (const std::string::value_type *)v207, v208);
  *a1 = *v209;
  v209->__r_.__value_.__l.__size_ = 0;
  v209->__r_.__value_.__r.__words[2] = 0;
  v209->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v211) < 0)
    operator delete(v210[0]);
  if (SHIBYTE(v213.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v213.__r_.__value_.__l.__data_);
  if (SHIBYTE(v212.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v212.__r_.__value_.__l.__data_);
}

