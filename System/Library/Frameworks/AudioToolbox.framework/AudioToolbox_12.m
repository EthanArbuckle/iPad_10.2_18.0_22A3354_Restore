void sub_1B642E828(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a14 < 0)
    operator delete(__p);
  if (a28 < 0)
    operator delete(a23);
  if (a21 < 0)
    operator delete(a16);
  _Unwind_Resume(a1);
}

void sub_1B642EB8C()
{
  JUMPOUT(0x1B642EA44);
}

void sub_1B642EB94()
{
  JUMPOUT(0x1B642EA54);
}

void sub_1B642EB9C()
{
  uint64_t v0;

  if (*(char *)(v0 - 169) < 0)
    operator delete(*(void **)(v0 - 192));
  if (*(char *)(v0 - 105) < 0)
    operator delete(*(void **)(v0 - 128));
  if (*(char *)(v0 - 137) < 0)
    JUMPOUT(0x1B642EA60);
  JUMPOUT(0x1B642EA64);
}

void sub_1B642EBE0()
{
  JUMPOUT(0x1B642EA64);
}

void sub_1B642EBE8()
{
  JUMPOUT(0x1B642EA74);
}

void sub_1B642EBF0()
{
  uint64_t v0;

  if (*(char *)(v0 - 169) < 0)
    operator delete(*(void **)(v0 - 192));
  if (*(char *)(v0 - 105) < 0)
    operator delete(*(void **)(v0 - 128));
  if (*(char *)(v0 - 137) < 0)
    JUMPOUT(0x1B642EA80);
  JUMPOUT(0x1B642EA84);
}

void sub_1B642EC34()
{
  JUMPOUT(0x1B642EA84);
}

void sub_1B642EC3C()
{
  JUMPOUT(0x1B642EA94);
}

void sub_1B642EC44()
{
  uint64_t v0;

  if (*(char *)(v0 - 169) < 0)
    operator delete(*(void **)(v0 - 192));
  if (*(char *)(v0 - 105) < 0)
    operator delete(*(void **)(v0 - 128));
  if (*(char *)(v0 - 137) < 0)
    JUMPOUT(0x1B642EAA0);
  JUMPOUT(0x1B642EAA4);
}

void sub_1B642EC88()
{
  JUMPOUT(0x1B642EAA4);
}

void sub_1B642EC90()
{
  JUMPOUT(0x1B642EAB4);
}

void sub_1B642EC98()
{
  uint64_t v0;

  if (*(char *)(v0 - 169) < 0)
    operator delete(*(void **)(v0 - 192));
  if (*(char *)(v0 - 105) < 0)
    operator delete(*(void **)(v0 - 128));
  if (*(char *)(v0 - 137) < 0)
    JUMPOUT(0x1B642EAC0);
  JUMPOUT(0x1B642EAC4);
}

void sub_1B642ECDC()
{
  JUMPOUT(0x1B642EAC4);
}

void sub_1B642ECE4()
{
  JUMPOUT(0x1B642EAD4);
}

void sub_1B642ECEC()
{
  uint64_t v0;

  if (*(char *)(v0 - 169) < 0)
    operator delete(*(void **)(v0 - 192));
  if (*(char *)(v0 - 105) < 0)
    operator delete(*(void **)(v0 - 128));
  if (*(char *)(v0 - 137) < 0)
    JUMPOUT(0x1B642EAE0);
  JUMPOUT(0x1B642EAE4);
}

void sub_1B642ED30()
{
  JUMPOUT(0x1B642EAE4);
}

void sub_1B642ED38()
{
  JUMPOUT(0x1B642EAF4);
}

void sub_1B642ED40()
{
  uint64_t v0;

  if (*(char *)(v0 - 169) < 0)
    operator delete(*(void **)(v0 - 192));
  if (*(char *)(v0 - 105) < 0)
    operator delete(*(void **)(v0 - 128));
  if (*(char *)(v0 - 137) < 0)
    JUMPOUT(0x1B642EB00);
  JUMPOUT(0x1B642EB04);
}

void sub_1B642ED84()
{
  JUMPOUT(0x1B642EB04);
}

void sub_1B642ED8C()
{
  JUMPOUT(0x1B642EB14);
}

void sub_1B642ED94()
{
  uint64_t v0;

  if (*(char *)(v0 - 169) < 0)
    operator delete(*(void **)(v0 - 192));
  if (*(char *)(v0 - 105) < 0)
    operator delete(*(void **)(v0 - 128));
  if (*(char *)(v0 - 137) < 0)
    JUMPOUT(0x1B642EB20);
  JUMPOUT(0x1B642EB24);
}

void sub_1B642EDD8()
{
  JUMPOUT(0x1B642EB24);
}

void sub_1B642EDE0()
{
  JUMPOUT(0x1B642EB34);
}

void sub_1B642EDE8()
{
  uint64_t v0;

  if (*(char *)(v0 - 169) < 0)
    operator delete(*(void **)(v0 - 192));
  if (*(char *)(v0 - 105) < 0)
    operator delete(*(void **)(v0 - 128));
  if (*(char *)(v0 - 137) < 0)
    JUMPOUT(0x1B642EB40);
  JUMPOUT(0x1B642EB44);
}

void sub_1B642EE2C()
{
  JUMPOUT(0x1B642EB44);
}

void sub_1B642EE34()
{
  JUMPOUT(0x1B642EB54);
}

void sub_1B642EE3C()
{
  uint64_t v0;

  if (*(char *)(v0 - 169) < 0)
    operator delete(*(void **)(v0 - 192));
  if (*(char *)(v0 - 105) < 0)
    operator delete(*(void **)(v0 - 128));
  if (*(char *)(v0 - 137) < 0)
    JUMPOUT(0x1B642EB60);
  JUMPOUT(0x1B642EB64);
}

void sub_1B642EE80()
{
  JUMPOUT(0x1B642EB64);
}

void sub_1B642EE88()
{
  JUMPOUT(0x1B642EB74);
}

void sub_1B642EE90()
{
  uint64_t v0;

  if (*(char *)(v0 - 169) < 0)
    operator delete(*(void **)(v0 - 192));
  if (*(char *)(v0 - 105) < 0)
    operator delete(*(void **)(v0 - 128));
  if (*(char *)(v0 - 137) < 0)
    JUMPOUT(0x1B642EB80);
  JUMPOUT(0x1B642EB84);
}

applesauce::CF::DictionaryRef *applesauce::CF::details::find_at_key<applesauce::CF::DictionaryRef,char const* const&>(applesauce::CF::DictionaryRef *a1, const __CFDictionary *a2, char **a3)
{
  const void *v4;
  const void *v5;
  std::runtime_error *exception;

  v4 = applesauce::CF::details::at_key<char const* const&>(a2, a3);
  if (!v4)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    applesauce::CF::not_found(exception);
  }
  v5 = v4;
  CFRetain(v4);
  return applesauce::CF::DictionaryRef::DictionaryRef(a1, v5);
}

void sub_1B642EF3C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void clsp::ThermalStateVector_v3_separate<clsp::EL>::TheInstance()
{
  unsigned __int8 v0;

  if ((v0 & 1) == 0)
  {
    {
      clsp::ThermalStateVector_v3_separate<clsp::EL>::ThermalStateVector_v3_separate();
      __cxa_atexit((void (*)(void *))clsp::ThermalStateVector_v3_separate<clsp::EL>::~ThermalStateVector_v3_separate, &clsp::ThermalStateVector_v3_separate<clsp::EL>::TheInstance(void)::inst, &dword_1B5ED0000);
    }
  }
}

void sub_1B642EFC0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void std::vector<clsp::ThermalState_v3>::resize(void **a1, unint64_t a2)
{
  char *v4;
  char *v5;
  unint64_t v6;
  unint64_t v7;
  _BYTE *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  __int128 v19;
  char *v20;

  v5 = (char *)*a1;
  v4 = (char *)a1[1];
  v6 = 0xAAAAAAAAAAAAAAABLL * ((v4 - (_BYTE *)*a1) >> 3);
  v7 = a2 - v6;
  if (a2 <= v6)
  {
    if (a2 < v6)
      a1[1] = &v5[24 * a2];
  }
  else
  {
    v8 = a1[2];
    if (0xAAAAAAAAAAAAAAABLL * ((v8 - v4) >> 3) >= v7)
    {
      v20 = &v4[24 * v7];
      do
      {
        *v4 = 0;
        *(_QWORD *)(v4 + 12) = 0;
        *(_QWORD *)(v4 + 4) = 0;
        *((_DWORD *)v4 + 5) = 0;
        v4 += 24;
      }
      while (v4 != v20);
      a1[1] = v20;
    }
    else
    {
      if (a2 > 0xAAAAAAAAAAAAAAALL)
        std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
      v9 = 0xAAAAAAAAAAAAAAABLL * ((v8 - v5) >> 3);
      v10 = 2 * v9;
      if (2 * v9 <= a2)
        v10 = a2;
      if (v9 >= 0x555555555555555)
        v11 = 0xAAAAAAAAAAAAAAALL;
      else
        v11 = v10;
      if (v11 > 0xAAAAAAAAAAAAAAALL)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v12 = (char *)operator new(24 * v11);
      v13 = &v12[24 * v6];
      v14 = &v12[24 * a2];
      v15 = v13;
      do
      {
        *v15 = 0;
        *(_QWORD *)(v15 + 12) = 0;
        *(_QWORD *)(v15 + 4) = 0;
        *((_DWORD *)v15 + 5) = 0;
        v15 += 24;
      }
      while (v15 != v14);
      v16 = &v12[24 * v11];
      v18 = (char *)*a1;
      v17 = (char *)a1[1];
      if (v17 != *a1)
      {
        do
        {
          v19 = *(_OWORD *)(v17 - 24);
          *((_QWORD *)v13 - 1) = *((_QWORD *)v17 - 1);
          *(_OWORD *)(v13 - 24) = v19;
          v13 -= 24;
          v17 -= 24;
        }
        while (v17 != v18);
        v17 = (char *)*a1;
      }
      *a1 = v13;
      a1[1] = v14;
      a1[2] = v16;
      if (v17)
        operator delete(v17);
    }
  }
}

_QWORD *clsp::ThermalStateVector_v3_separate<clsp::EL>::ThermalStateVector_v3_separate()
{
  _QWORD *result;
  uint64_t v1;
  _QWORD v2[5];
  _QWORD v3[3];
  _QWORD *v4;
  uint64_t v5;

  v5 = *MEMORY[0x1E0C80C00];
  std::vector<clsp::ThermalState_v3>::vector(&clsp::ThermalStateVector_v3_separate<clsp::EL>::TheInstance(void)::inst);
  byte_1EF136E80 = 1;
  qword_1EF136E88 = 0x7FF0000000000000;
  *(double *)&qword_1EF136E88 = (double)mach_absolute_time() * 0.0000000416666667;
  v2[0] = MEMORY[0x1E0C809B0];
  v2[1] = 0x40000000;
  v2[2] = ___ZN4clsp30ThermalStateVector_v3_separateINS_2ELEEC2Ev_block_invoke;
  v2[3] = &__block_descriptor_tmp_602;
  v4 = 0;
  v2[4] = &clsp::ThermalStateVector_v3_separate<clsp::EL>::TheInstance(void)::inst;
  v3[0] = &off_1E69E2828;
  v3[1] = _Block_copy(v2);
  v4 = v3;
  CASmartPreferences::AddHandler<BOOL>((CASmartPreferences *)CFSTR("clsp_resetThermalState"), CFSTR("com.apple.coreaudio"), (uint64_t)CASmartPreferences::InterpretBoolean, (uint64_t)v3);
  result = v4;
  if (v4 == v3)
  {
    v1 = 4;
    result = v3;
  }
  else
  {
    if (!v4)
      return result;
    v1 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v1))();
}

void sub_1B642F274(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, char *a17)
{
  char *v18;
  uint64_t v19;

  v18 = a17;
  if (a17 == &a14)
  {
    v19 = 4;
    v18 = &a14;
  }
  else
  {
    if (!a17)
      goto LABEL_6;
    v19 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v18 + 8 * v19))();
LABEL_6:
  if (clsp::ThermalStateVector_v3_separate<clsp::EL>::TheInstance(void)::inst)
  {
    qword_1EF136E70 = clsp::ThermalStateVector_v3_separate<clsp::EL>::TheInstance(void)::inst;
    operator delete((void *)clsp::ThermalStateVector_v3_separate<clsp::EL>::TheInstance(void)::inst);
  }
  _Unwind_Resume(exception_object);
}

uint64_t clsp::ThermalStateVector_v3_separate<clsp::EL>::~ThermalStateVector_v3_separate(uint64_t a1)
{
  void *v2;

  v2 = *(void **)a1;
  if (v2)
  {
    *(_QWORD *)(a1 + 8) = v2;
    operator delete(v2);
  }
  return a1;
}

uint64_t ___ZN4clsp30ThermalStateVector_v3_separateINS_2ELEEC2Ev_block_invoke(uint64_t result, int a2)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t i;

  if (a2)
  {
    v2 = *(uint64_t **)(result + 32);
    v3 = *v2;
    for (i = v2[1]; v3 != i; v3 += 24)
    {
      *(_OWORD *)(v3 + 4) = xmmword_1B6629CC0;
      *(_DWORD *)(v3 + 20) = 1065353216;
      *(_BYTE *)v3 = 1;
    }
  }
  return result;
}

_OWORD *std::vector<std::pair<__CFString const*,AUSPV3PartParams>>::__init_with_size[abi:ne180100]<std::pair<__CFString const*,AUSPV3PartParams>*,std::pair<__CFString const*,AUSPV3PartParams>*>(_OWORD *result, __int128 *a2, __int128 *a3, unint64_t a4)
{
  _QWORD *v4;
  uint64_t v7;
  __int128 v8;

  if (a4)
  {
    v4 = result;
    if (a4 >> 60)
      std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
    result = std::__allocate_at_least[abi:ne180100]<std::allocator<float (ASAFeatures::*)(ASAFrontEndInputState const*)>>(a4);
    *v4 = result;
    v4[1] = result;
    v4[2] = &result[v7];
    while (a2 != a3)
    {
      v8 = *a2++;
      *result++ = v8;
    }
    v4[1] = result;
  }
  return result;
}

void sub_1B642F3A8(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t AUSpeakerProtectionV3::SetParamFromPair(uint64_t a1, ausdk::AUElement *a2, __CFString *a3, unsigned int a4, CACFDictionary *this)
{
  uint64_t v9;
  NSObject **v10;
  NSObject *v11;
  const char *CStringPtr;
  NSObject **v13;
  NSObject *v14;
  float v16;
  uint8_t buf[4];
  const char *v18;
  __int16 v19;
  int v20;
  __int16 v21;
  const char *v22;
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  v16 = 0.0;
  v9 = 0;
  if ((CACFDictionary::GetFloat32((uint64_t)this, a3, &v16) & 1) == 0)
  {
    v10 = (NSObject **)spp3Subsystem();
    if (v10)
    {
      v11 = *v10;
      if (!*v10)
      {
LABEL_8:
        v9 = 1;
        goto LABEL_9;
      }
    }
    else
    {
      v11 = MEMORY[0x1E0C81028];
    }
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
    {
      CStringPtr = CFStringGetCStringPtr(a3, 0x8000100u);
      *(_DWORD *)buf = 136315650;
      v18 = "AUSpeakerProtectionV3.cpp";
      v19 = 1024;
      v20 = 3254;
      v21 = 2080;
      v22 = CStringPtr;
      _os_log_impl(&dword_1B5ED0000, v11, OS_LOG_TYPE_ERROR, "%25s:%-5d Cannot get HWParam key: %s", buf, 0x1Cu);
    }
    goto LABEL_8;
  }
LABEL_9:
  if (!a2)
  {
    v13 = (NSObject **)spp3Subsystem();
    if (v13)
    {
      v14 = *v13;
      if (!*v13)
        return (v9 + 1);
    }
    else
    {
      v14 = MEMORY[0x1E0C81028];
    }
    if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      v18 = "AUSpeakerProtectionV3.cpp";
      v19 = 1024;
      v20 = 3262;
      _os_log_impl(&dword_1B5ED0000, v14, OS_LOG_TYPE_ERROR, "%25s:%-5d scope is null", buf, 0x12u);
    }
    return (v9 + 1);
  }
  ausdk::AUElement::SetParameter(a2, a4, v16, 0);
  ++*(_DWORD *)(a1 + 636);
  return v9;
}

{
  uint64_t v9;
  NSObject **v10;
  NSObject *v11;
  const char *CStringPtr;
  NSObject **v13;
  NSObject *v14;
  float v16;
  uint8_t buf[4];
  const char *v18;
  __int16 v19;
  int v20;
  __int16 v21;
  const char *v22;
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  v16 = 0.0;
  v9 = 0;
  if ((CACFDictionary::GetFloat32((uint64_t)this, a3, &v16) & 1) == 0)
  {
    v10 = (NSObject **)spp3Subsystem();
    if (v10)
    {
      v11 = *v10;
      if (!*v10)
      {
LABEL_8:
        v9 = 1;
        goto LABEL_9;
      }
    }
    else
    {
      v11 = MEMORY[0x1E0C81028];
    }
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
    {
      CStringPtr = CFStringGetCStringPtr(a3, 0x8000100u);
      *(_DWORD *)buf = 136315650;
      v18 = "AUSpeakerProtectionV3.cpp";
      v19 = 1024;
      v20 = 3284;
      v21 = 2080;
      v22 = CStringPtr;
      _os_log_impl(&dword_1B5ED0000, v11, OS_LOG_TYPE_ERROR, "%25s:%-5d Cannot get HWParam key: %s", buf, 0x1Cu);
    }
    goto LABEL_8;
  }
LABEL_9:
  if (!a2)
  {
    v13 = (NSObject **)spp3Subsystem();
    if (v13)
    {
      v14 = *v13;
      if (!*v13)
        return (v9 + 1);
    }
    else
    {
      v14 = MEMORY[0x1E0C81028];
    }
    if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      v18 = "AUSpeakerProtectionV3.cpp";
      v19 = 1024;
      v20 = 3292;
      _os_log_impl(&dword_1B5ED0000, v14, OS_LOG_TYPE_ERROR, "%25s:%-5d scope is null", buf, 0x12u);
    }
    return (v9 + 1);
  }
  ausdk::AUElement::SetParameter(a2, a4, v16, 0);
  ++*(_DWORD *)(a1 + 636);
  return v9;
}

uint64_t AUSpeakerProtectionV3::SetChannelParamsFromPlist(uint64_t a1, uint64_t *a2, const __CFDictionary **a3)
{
  int Count;
  uint64_t v7;
  NSObject **v8;
  NSObject *v9;
  unint64_t v10;
  const CFDictionaryKeyCallBacks *v11;
  const CFDictionaryValueCallBacks *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  ausdk::AUElement *v17;
  uint64_t v18;
  NSObject **v19;
  NSObject *v20;
  int v22;
  CACFDictionary *Mutable;
  __int16 v24;
  CFArrayRef theArray;
  __int16 v26;
  uint8_t buf[4];
  const char *v28;
  __int16 v29;
  int v30;
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  theArray = CFArrayCreateMutable(0, 0, MEMORY[0x1E0C9B378]);
  v26 = 257;
  CACFDictionary::GetCACFArray(a3, CFSTR("ChannelSpecificParams"), (CACFArray *)&theArray);
  Count = (int)theArray;
  if (theArray)
    Count = CFArrayGetCount(theArray);
  if (Count == *(_DWORD *)(a1 + 632))
  {
    v7 = 0;
    if (!Count)
      goto LABEL_31;
    goto LABEL_13;
  }
  v8 = (NSObject **)spp3Subsystem();
  if (v8)
  {
    v9 = *v8;
    if (!*v8)
      goto LABEL_12;
  }
  else
  {
    v9 = MEMORY[0x1E0C81028];
  }
  if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 136315394;
    v28 = "AUSpeakerProtectionV3.cpp";
    v29 = 1024;
    v30 = 3309;
    _os_log_impl(&dword_1B5ED0000, v9, OS_LOG_TYPE_ERROR, "%25s:%-5d Number of channels key does not match plist number channels", buf, 0x12u);
  }
LABEL_12:
  v7 = 1;
  if (*(_DWORD *)(a1 + 632))
  {
LABEL_13:
    v10 = 0;
    v11 = (const CFDictionaryKeyCallBacks *)MEMORY[0x1E0C9B390];
    v12 = (const CFDictionaryValueCallBacks *)MEMORY[0x1E0C9B3A0];
    do
    {
      Mutable = CFDictionaryCreateMutable(0, 0, v11, v12);
      v24 = 257;
      CACFArray::GetCACFDictionary(&theArray, v10, (CACFDictionary *)&Mutable);
      v22 = -1;
      CACFDictionary::GetSInt32((uint64_t)Mutable, CFSTR("ChannelID"), &v22);
      if (v10 == v22)
      {
        v13 = *a2;
        if (a2[1] != *a2)
        {
          v14 = 0;
          v15 = 0;
          do
          {
            v16 = *(_QWORD *)(a1 + 832);
            if (v16)
            {
              v17 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)v16 + 32))(v16, v10);
              v13 = *a2;
            }
            else
            {
              v18 = *(_QWORD *)(a1 + 808);
              if (v10 >= (*(_QWORD *)(a1 + 816) - v18) >> 3)
                v17 = 0;
              else
                v17 = *(ausdk::AUElement **)(v18 + 8 * v10);
            }
            v7 = AUSpeakerProtectionV3::SetParamFromPair(a1, v17, *(__CFString **)(v13 + v14), *(_DWORD *)(v13 + v14 + 8), Mutable)+ v7;
            ++v15;
            v13 = *a2;
            v14 += 16;
          }
          while (v15 < (a2[1] - *a2) >> 4);
        }
      }
      else
      {
        v19 = (NSObject **)spp3Subsystem();
        v7 = (v7 + 1);
        if (!v19)
        {
          v20 = MEMORY[0x1E0C81028];
LABEL_28:
          if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 136315394;
            v28 = "AUSpeakerProtectionV3.cpp";
            v29 = 1024;
            v30 = 3328;
            _os_log_impl(&dword_1B5ED0000, v20, OS_LOG_TYPE_ERROR, "%25s:%-5d ChannelID key does not match channel order", buf, 0x12u);
          }
          goto LABEL_30;
        }
        v20 = *v19;
        if (*v19)
          goto LABEL_28;
      }
LABEL_30:
      CACFDictionary::~CACFDictionary((CACFDictionary *)&Mutable);
      ++v10;
    }
    while (v10 < *(unsigned int *)(a1 + 632));
  }
LABEL_31:
  CACFArray::~CACFArray((CACFArray *)&theArray);
  return v7;
}

void sub_1B642F888(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  CACFArray::~CACFArray((CACFArray *)va);
  _Unwind_Resume(a1);
}

uint64_t AUSpeakerProtectionV3::SetCLChannelParamsFromPlist(AUSpeakerProtectionV3 *this, const __CFDictionary **a2)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  int Count;
  uint64_t v9;
  NSObject **v10;
  NSObject *v11;
  unint64_t v12;
  const CFDictionaryKeyCallBacks *v13;
  const CFDictionaryValueCallBacks *v14;
  uint64_t v15;
  uint64_t *v16;
  unint64_t v17;
  _QWORD *v18;
  NSObject **v19;
  NSObject *v20;
  NSObject **v21;
  NSObject *v22;
  NSObject *v23;
  const char *v24;
  uint32_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  _QWORD *v33;
  uint64_t v34;
  int v35;
  CACFDictionary *Mutable;
  __int16 v37;
  CFArrayRef theArray;
  __int16 v39;
  _BYTE buf[32];
  char *v41;
  uint64_t v42;

  v42 = *MEMORY[0x1E0C80C00];
  theArray = CFArrayCreateMutable(0, 0, MEMORY[0x1E0C9B378]);
  v39 = 257;
  CACFDictionary::GetCACFArray(a2, CFSTR("ChannelSpecificParams"), (CACFArray *)&theArray);
  v4 = (_QWORD *)*((_QWORD *)this + 84);
  v5 = (_QWORD *)*((_QWORD *)this + 85);
  while (v5 != v4)
  {
    v7 = *--v5;
    v6 = v7;
    *v5 = 0;
    if (v7)
      std::default_delete<clsp::ClosedLoopParameters>::operator()[abi:ne180100](v6);
  }
  *((_QWORD *)this + 85) = v4;
  Count = (int)theArray;
  if (theArray)
    Count = CFArrayGetCount(theArray);
  if (Count == *((_DWORD *)this + 158))
  {
    v9 = 0;
    if (!Count)
      goto LABEL_49;
    goto LABEL_17;
  }
  v10 = (NSObject **)spp3Subsystem();
  if (v10)
  {
    v11 = *v10;
    if (!*v10)
      goto LABEL_16;
  }
  else
  {
    v11 = MEMORY[0x1E0C81028];
  }
  if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 136315394;
    *(_QWORD *)&buf[4] = "AUSpeakerProtectionV3.cpp";
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = 3345;
    _os_log_impl(&dword_1B5ED0000, v11, OS_LOG_TYPE_ERROR, "%25s:%-5d Number of channels key does not match plist number channels", buf, 0x12u);
  }
LABEL_16:
  v9 = 1;
  if (*((_DWORD *)this + 158))
  {
LABEL_17:
    v12 = 0;
    v33 = (_QWORD *)((char *)this + 672);
    v13 = (const CFDictionaryKeyCallBacks *)MEMORY[0x1E0C9B390];
    v14 = (const CFDictionaryValueCallBacks *)MEMORY[0x1E0C9B3A0];
    do
    {
      Mutable = CFDictionaryCreateMutable(0, 0, v13, v14);
      v37 = 257;
      CACFArray::GetCACFDictionary(&theArray, v12, (CACFDictionary *)&Mutable);
      v35 = -1;
      CACFDictionary::GetSInt32((uint64_t)Mutable, CFSTR("ChannelID"), &v35);
      clsp::ClosedLoopParameters::Create((clsp::ClosedLoopParameters *)&v34, &Mutable);
      if (v12 == v35)
      {
        v15 = v34;
        if (v34)
        {
          v16 = (uint64_t *)*((_QWORD *)this + 85);
          v17 = *((_QWORD *)this + 86);
          if ((unint64_t)v16 >= v17)
          {
            v26 = ((uint64_t)v16 - *v33) >> 3;
            if ((unint64_t)(v26 + 1) >> 61)
              std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
            v27 = v17 - *v33;
            v28 = v27 >> 2;
            if (v27 >> 2 <= (unint64_t)(v26 + 1))
              v28 = v26 + 1;
            if ((unint64_t)v27 >= 0x7FFFFFFFFFFFFFF8)
              v29 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v29 = v28;
            v41 = (char *)this + 688;
            if (v29)
              v29 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<SlidingWindowDTFT<float> *>>(v29);
            else
              v30 = 0;
            v31 = (uint64_t *)(v29 + 8 * v26);
            *(_QWORD *)buf = v29;
            *(_QWORD *)&buf[8] = v31;
            *(_QWORD *)&buf[24] = v29 + 8 * v30;
            v34 = 0;
            *v31 = v15;
            *(_QWORD *)&buf[16] = v31 + 1;
            std::vector<std::unique_ptr<AllPassComb>>::__swap_out_circular_buffer(v33, buf);
            v18 = (_QWORD *)*((_QWORD *)this + 85);
            std::__split_buffer<std::unique_ptr<clsp::ClosedLoopParameters>>::~__split_buffer((uint64_t)buf);
          }
          else
          {
            v34 = 0;
            *v16 = v15;
            v18 = v16 + 1;
            *((_QWORD *)this + 85) = v18;
          }
          *((_QWORD *)this + 85) = v18;
          goto LABEL_46;
        }
        v21 = (NSObject **)spp3Subsystem();
        v9 = (v9 + 1);
        if (v21)
        {
          v22 = *v21;
          if (!*v21)
            goto LABEL_46;
        }
        else
        {
          v22 = MEMORY[0x1E0C81028];
        }
        if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136315650;
          *(_QWORD *)&buf[4] = "AUSpeakerProtectionV3.cpp";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = 3365;
          *(_WORD *)&buf[18] = 2048;
          *(_QWORD *)&buf[20] = v12;
          v23 = v22;
          v24 = "%25s:%-5d Could not read CLParams for ch %zul";
          v25 = 28;
          goto LABEL_42;
        }
      }
      else
      {
        v19 = (NSObject **)spp3Subsystem();
        v9 = (v9 + 1);
        if (v19)
        {
          v20 = *v19;
          if (!*v19)
            goto LABEL_46;
        }
        else
        {
          v20 = MEMORY[0x1E0C81028];
        }
        if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136315394;
          *(_QWORD *)&buf[4] = "AUSpeakerProtectionV3.cpp";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = 3370;
          v23 = v20;
          v24 = "%25s:%-5d ChannelID key does not match channel order";
          v25 = 18;
LABEL_42:
          _os_log_impl(&dword_1B5ED0000, v23, OS_LOG_TYPE_ERROR, v24, buf, v25);
        }
      }
LABEL_46:
      if (v34)
        std::default_delete<clsp::ClosedLoopParameters>::operator()[abi:ne180100](v34);
      CACFDictionary::~CACFDictionary((CACFDictionary *)&Mutable);
      ++v12;
    }
    while (v12 < *((unsigned int *)this + 158));
  }
LABEL_49:
  CACFArray::~CACFArray((CACFArray *)&theArray);
  return v9;
}

void sub_1B642FCC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  CACFArray::~CACFArray((CACFArray *)va);
  _Unwind_Resume(a1);
}

uint64_t AUSpeakerProtectionV3::InitCLParamsFromPlist(AUSpeakerProtectionV3 *this, ausdk::AUElement *a2, CACFDictionary **a3)
{
  _QWORD *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  char *v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  char *v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  char *v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  char *v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t v45;
  _QWORD *v46;
  char *v47;
  uint64_t v48;
  unint64_t v49;
  unint64_t v50;
  uint64_t v51;
  _QWORD *v52;
  char *v53;
  uint64_t v54;
  unint64_t v55;
  unint64_t v56;
  uint64_t v57;
  _QWORD *v58;
  char *v59;
  uint64_t v60;
  unint64_t v61;
  unint64_t v62;
  uint64_t v63;
  _QWORD *v64;
  char *v65;
  uint64_t v66;
  unint64_t v67;
  unint64_t v68;
  uint64_t v69;
  _QWORD *v70;
  char *v71;
  uint64_t v72;
  unint64_t v73;
  unint64_t v74;
  _QWORD *v75;
  uint64_t v76;
  char *v77;

  v6 = operator new(0x10uLL);
  *v6 = CFSTR("TempSenseWindowTime");
  v6[1] = 24;
  v7 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float (ASAFeatures::*)(ASAFrontEndInputState const*)>>(2uLL);
  v9 = v8;
  v10 = &v7[16 * v8];
  *((_QWORD *)v7 + 2) = CFSTR("TempSenseSmoothingTau");
  *((_QWORD *)v7 + 3) = 25;
  *(_OWORD *)v7 = *(_OWORD *)v6;
  operator delete(v6);
  if (v9 < 3)
  {
    v13 = 3;
    if ((unint64_t)((v10 - v7) >> 3) > 3)
      v13 = (v10 - v7) >> 3;
    if ((unint64_t)(v10 - v7) >= 0x7FFFFFFFFFFFFFF0)
      v14 = 0xFFFFFFFFFFFFFFFLL;
    else
      v14 = v13;
    if (v14)
      v14 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<float (ASAFeatures::*)(ASAFrontEndInputState const*)>>(v14);
    else
      v15 = 0;
    v16 = 0;
    v10 = (char *)(v14 + 16 * v15);
    *(_QWORD *)(v14 + 32) = CFSTR("TlimErrDecayTime");
    *(_QWORD *)(v14 + 40) = 23;
    v11 = (char *)(v14 + 48);
    do
    {
      *(_OWORD *)(v14 + 32 + v16 - 16) = *(_OWORD *)&v7[v16 + 16];
      v16 -= 16;
    }
    while (v16 != -32);
    v12 = (char *)v14;
    if (v7)
      operator delete(v7);
  }
  else
  {
    *((_QWORD *)v7 + 4) = CFSTR("TlimErrDecayTime");
    *((_QWORD *)v7 + 5) = 23;
    v11 = v7 + 48;
    v12 = v7;
  }
  if (v11 >= v10)
  {
    v18 = (v11 - v12) >> 4;
    v19 = v18 + 1;
    if ((unint64_t)(v18 + 1) >> 60)
      std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
    if ((v10 - v12) >> 3 > v19)
      v19 = (v10 - v12) >> 3;
    if ((unint64_t)(v10 - v12) >= 0x7FFFFFFFFFFFFFF0)
      v20 = 0xFFFFFFFFFFFFFFFLL;
    else
      v20 = v19;
    if (v20)
      v20 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<float (ASAFeatures::*)(ASAFrontEndInputState const*)>>(v20);
    else
      v21 = 0;
    v22 = (_QWORD *)(v20 + 16 * v18);
    v10 = (char *)(v20 + 16 * v21);
    *v22 = CFSTR("PilotAmplHi_dB");
    v22[1] = 27;
    v17 = (char *)(v22 + 2);
    if (v11 == v12)
      goto LABEL_29;
    do
    {
      *((_OWORD *)v22 - 1) = *((_OWORD *)v11 - 1);
      v22 -= 2;
      v11 -= 16;
    }
    while (v11 != v12);
    if (v12)
LABEL_29:
      operator delete(v12);
    v12 = (char *)v22;
  }
  else
  {
    *(_QWORD *)v11 = CFSTR("PilotAmplHi_dB");
    *((_QWORD *)v11 + 1) = 27;
    v17 = v11 + 16;
  }
  if (v17 >= v10)
  {
    v24 = (v17 - v12) >> 4;
    v25 = v24 + 1;
    if ((unint64_t)(v24 + 1) >> 60)
      std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
    if ((v10 - v12) >> 3 > v25)
      v25 = (v10 - v12) >> 3;
    if ((unint64_t)(v10 - v12) >= 0x7FFFFFFFFFFFFFF0)
      v26 = 0xFFFFFFFFFFFFFFFLL;
    else
      v26 = v25;
    if (v26)
      v26 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<float (ASAFeatures::*)(ASAFrontEndInputState const*)>>(v26);
    else
      v27 = 0;
    v28 = (_QWORD *)(v26 + 16 * v24);
    v10 = (char *)(v26 + 16 * v27);
    *v28 = CFSTR("PilotAmplLo_dB");
    v28[1] = 28;
    v23 = (char *)(v28 + 2);
    if (v17 == v12)
      goto LABEL_45;
    do
    {
      *((_OWORD *)v28 - 1) = *((_OWORD *)v17 - 1);
      v28 -= 2;
      v17 -= 16;
    }
    while (v17 != v12);
    if (v12)
LABEL_45:
      operator delete(v12);
    v12 = (char *)v28;
  }
  else
  {
    *(_QWORD *)v17 = CFSTR("PilotAmplLo_dB");
    *((_QWORD *)v17 + 1) = 28;
    v23 = v17 + 16;
  }
  if (v23 >= v10)
  {
    v30 = (v23 - v12) >> 4;
    v31 = v30 + 1;
    if ((unint64_t)(v30 + 1) >> 60)
      std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
    if ((v10 - v12) >> 3 > v31)
      v31 = (v10 - v12) >> 3;
    if ((unint64_t)(v10 - v12) >= 0x7FFFFFFFFFFFFFF0)
      v32 = 0xFFFFFFFFFFFFFFFLL;
    else
      v32 = v31;
    if (v32)
      v32 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<float (ASAFeatures::*)(ASAFrontEndInputState const*)>>(v32);
    else
      v33 = 0;
    v34 = (_QWORD *)(v32 + 16 * v30);
    v10 = (char *)(v32 + 16 * v33);
    *v34 = CFSTR("PilotUpperThres");
    v34[1] = 29;
    v29 = (char *)(v34 + 2);
    if (v23 == v12)
      goto LABEL_61;
    do
    {
      *((_OWORD *)v34 - 1) = *((_OWORD *)v23 - 1);
      v34 -= 2;
      v23 -= 16;
    }
    while (v23 != v12);
    if (v12)
LABEL_61:
      operator delete(v12);
    v12 = (char *)v34;
  }
  else
  {
    *(_QWORD *)v23 = CFSTR("PilotUpperThres");
    *((_QWORD *)v23 + 1) = 29;
    v29 = v23 + 16;
  }
  if (v29 >= v10)
  {
    v36 = (v29 - v12) >> 4;
    v37 = v36 + 1;
    if ((unint64_t)(v36 + 1) >> 60)
      std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
    if ((v10 - v12) >> 3 > v37)
      v37 = (v10 - v12) >> 3;
    if ((unint64_t)(v10 - v12) >= 0x7FFFFFFFFFFFFFF0)
      v38 = 0xFFFFFFFFFFFFFFFLL;
    else
      v38 = v37;
    if (v38)
      v38 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<float (ASAFeatures::*)(ASAFrontEndInputState const*)>>(v38);
    else
      v39 = 0;
    v40 = (_QWORD *)(v38 + 16 * v36);
    v10 = (char *)(v38 + 16 * v39);
    *v40 = CFSTR("PilotLowerThres");
    v40[1] = 30;
    v35 = (char *)(v40 + 2);
    if (v29 == v12)
      goto LABEL_77;
    do
    {
      *((_OWORD *)v40 - 1) = *((_OWORD *)v29 - 1);
      v40 -= 2;
      v29 -= 16;
    }
    while (v29 != v12);
    if (v12)
LABEL_77:
      operator delete(v12);
    v12 = (char *)v40;
  }
  else
  {
    *(_QWORD *)v29 = CFSTR("PilotLowerThres");
    *((_QWORD *)v29 + 1) = 30;
    v35 = v29 + 16;
  }
  if (v35 >= v10)
  {
    v42 = (v35 - v12) >> 4;
    v43 = v42 + 1;
    if ((unint64_t)(v42 + 1) >> 60)
      std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
    if ((v10 - v12) >> 3 > v43)
      v43 = (v10 - v12) >> 3;
    if ((unint64_t)(v10 - v12) >= 0x7FFFFFFFFFFFFFF0)
      v44 = 0xFFFFFFFFFFFFFFFLL;
    else
      v44 = v43;
    if (v44)
      v44 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<float (ASAFeatures::*)(ASAFrontEndInputState const*)>>(v44);
    else
      v45 = 0;
    v46 = (_QWORD *)(v44 + 16 * v42);
    v10 = (char *)(v44 + 16 * v45);
    *v46 = CFSTR("PilotDecayTime");
    v46[1] = 31;
    v41 = (char *)(v46 + 2);
    if (v35 == v12)
      goto LABEL_93;
    do
    {
      *((_OWORD *)v46 - 1) = *((_OWORD *)v35 - 1);
      v46 -= 2;
      v35 -= 16;
    }
    while (v35 != v12);
    if (v12)
LABEL_93:
      operator delete(v12);
    v12 = (char *)v46;
  }
  else
  {
    *(_QWORD *)v35 = CFSTR("PilotDecayTime");
    *((_QWORD *)v35 + 1) = 31;
    v41 = v35 + 16;
  }
  if (v41 >= v10)
  {
    v48 = (v41 - v12) >> 4;
    v49 = v48 + 1;
    if ((unint64_t)(v48 + 1) >> 60)
      std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
    if ((v10 - v12) >> 3 > v49)
      v49 = (v10 - v12) >> 3;
    if ((unint64_t)(v10 - v12) >= 0x7FFFFFFFFFFFFFF0)
      v50 = 0xFFFFFFFFFFFFFFFLL;
    else
      v50 = v49;
    if (v50)
      v50 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<float (ASAFeatures::*)(ASAFrontEndInputState const*)>>(v50);
    else
      v51 = 0;
    v52 = (_QWORD *)(v50 + 16 * v48);
    v10 = (char *)(v50 + 16 * v51);
    *v52 = CFSTR("PilotFreq");
    v52[1] = 32;
    v47 = (char *)(v52 + 2);
    if (v41 == v12)
      goto LABEL_109;
    do
    {
      *((_OWORD *)v52 - 1) = *((_OWORD *)v41 - 1);
      v52 -= 2;
      v41 -= 16;
    }
    while (v41 != v12);
    if (v12)
LABEL_109:
      operator delete(v12);
    v12 = (char *)v52;
  }
  else
  {
    *(_QWORD *)v41 = CFSTR("PilotFreq");
    *((_QWORD *)v41 + 1) = 32;
    v47 = v41 + 16;
  }
  if (v47 >= v10)
  {
    v54 = (v47 - v12) >> 4;
    v55 = v54 + 1;
    if ((unint64_t)(v54 + 1) >> 60)
      std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
    if ((v10 - v12) >> 3 > v55)
      v55 = (v10 - v12) >> 3;
    if ((unint64_t)(v10 - v12) >= 0x7FFFFFFFFFFFFFF0)
      v56 = 0xFFFFFFFFFFFFFFFLL;
    else
      v56 = v55;
    if (v56)
      v56 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<float (ASAFeatures::*)(ASAFrontEndInputState const*)>>(v56);
    else
      v57 = 0;
    v58 = (_QWORD *)(v56 + 16 * v54);
    v10 = (char *)(v56 + 16 * v57);
    *v58 = CFSTR("LPMLSPreGain");
    v58[1] = 33;
    v53 = (char *)(v58 + 2);
    if (v47 == v12)
      goto LABEL_125;
    do
    {
      *((_OWORD *)v58 - 1) = *((_OWORD *)v47 - 1);
      v58 -= 2;
      v47 -= 16;
    }
    while (v47 != v12);
    if (v12)
LABEL_125:
      operator delete(v12);
    v12 = (char *)v58;
  }
  else
  {
    *(_QWORD *)v47 = CFSTR("LPMLSPreGain");
    *((_QWORD *)v47 + 1) = 33;
    v53 = v47 + 16;
  }
  if (v53 >= v10)
  {
    v60 = (v53 - v12) >> 4;
    v61 = v60 + 1;
    if ((unint64_t)(v60 + 1) >> 60)
      std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
    if ((v10 - v12) >> 3 > v61)
      v61 = (v10 - v12) >> 3;
    if ((unint64_t)(v10 - v12) >= 0x7FFFFFFFFFFFFFF0)
      v62 = 0xFFFFFFFFFFFFFFFLL;
    else
      v62 = v61;
    if (v62)
      v62 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<float (ASAFeatures::*)(ASAFrontEndInputState const*)>>(v62);
    else
      v63 = 0;
    v64 = (_QWORD *)(v62 + 16 * v60);
    v10 = (char *)(v62 + 16 * v63);
    *v64 = CFSTR("ThermalMeasurementMethod");
    v64[1] = 20;
    v59 = (char *)(v64 + 2);
    if (v53 == v12)
      goto LABEL_141;
    do
    {
      *((_OWORD *)v64 - 1) = *((_OWORD *)v53 - 1);
      v64 -= 2;
      v53 -= 16;
    }
    while (v53 != v12);
    if (v12)
LABEL_141:
      operator delete(v12);
    v12 = (char *)v64;
  }
  else
  {
    *(_QWORD *)v53 = CFSTR("ThermalMeasurementMethod");
    *((_QWORD *)v53 + 1) = 20;
    v59 = v53 + 16;
  }
  if (v59 >= v10)
  {
    v66 = (v59 - v12) >> 4;
    v67 = v66 + 1;
    if ((unint64_t)(v66 + 1) >> 60)
      std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
    if ((v10 - v12) >> 3 > v67)
      v67 = (v10 - v12) >> 3;
    if ((unint64_t)(v10 - v12) >= 0x7FFFFFFFFFFFFFF0)
      v68 = 0xFFFFFFFFFFFFFFFLL;
    else
      v68 = v67;
    if (v68)
      v68 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<float (ASAFeatures::*)(ASAFrontEndInputState const*)>>(v68);
    else
      v69 = 0;
    v70 = (_QWORD *)(v68 + 16 * v66);
    v10 = (char *)(v68 + 16 * v69);
    *v70 = CFSTR("LPMLSPostGain");
    v70[1] = 34;
    v65 = (char *)(v70 + 2);
    if (v59 == v12)
      goto LABEL_157;
    do
    {
      *((_OWORD *)v70 - 1) = *((_OWORD *)v59 - 1);
      v70 -= 2;
      v59 -= 16;
    }
    while (v59 != v12);
    if (v12)
LABEL_157:
      operator delete(v12);
    v12 = (char *)v70;
  }
  else
  {
    *(_QWORD *)v59 = CFSTR("LPMLSPostGain");
    *((_QWORD *)v59 + 1) = 34;
    v65 = v59 + 16;
  }
  if (v65 >= v10)
  {
    v72 = (v65 - v12) >> 4;
    v73 = v72 + 1;
    if ((unint64_t)(v72 + 1) >> 60)
      std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
    if ((v10 - v12) >> 3 > v73)
      v73 = (v10 - v12) >> 3;
    if ((unint64_t)(v10 - v12) >= 0x7FFFFFFFFFFFFFF0)
      v74 = 0xFFFFFFFFFFFFFFFLL;
    else
      v74 = v73;
    if (v74)
      v74 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<float (ASAFeatures::*)(ASAFrontEndInputState const*)>>(v74);
    v75 = (_QWORD *)(v74 + 16 * v72);
    *v75 = CFSTR("LPMLSLowerCorner");
    v75[1] = 35;
    v71 = (char *)(v75 + 2);
    if (v65 == v12)
      goto LABEL_172;
    do
    {
      *((_OWORD *)v75 - 1) = *((_OWORD *)v65 - 1);
      v75 -= 2;
      v65 -= 16;
    }
    while (v65 != v12);
    if (v12)
LABEL_172:
      operator delete(v12);
    v12 = (char *)v75;
  }
  else
  {
    *(_QWORD *)v65 = CFSTR("LPMLSLowerCorner");
    *((_QWORD *)v65 + 1) = 35;
    v71 = v65 + 16;
  }
  if (v12 == v71)
  {
    v76 = 0;
LABEL_180:
    operator delete(v12);
    return v76;
  }
  LODWORD(v76) = 0;
  v77 = v12;
  do
  {
    v76 = AUSpeakerProtectionV3::SetParamFromPair((uint64_t)this, a2, *(__CFString **)v77, *((_DWORD *)v77 + 2), *a3)+ v76;
    v77 += 16;
  }
  while (v77 != v71);
  if (v12)
    goto LABEL_180;
  return v76;
}

void sub_1B64307D4(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__split_buffer<std::unique_ptr<clsp::SpeakerCalibrationProperties>>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 8;
    std::unique_ptr<clsp::SpeakerCalibrationProperties>::reset[abi:ne180100]((uint64_t *)(i - 8));
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

_QWORD *clsp::SpeakerCalibrationProperties::dump(uint64_t a1, _QWORD *a2)
{
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *v18;
  _QWORD *v19;
  const char *v20;
  uint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  _QWORD *v24;
  _QWORD *v25;
  _QWORD *v26;
  _QWORD *v27;
  _QWORD *v28;
  const char *v29;
  uint64_t v30;

  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"┏ DCR = ", 10);
  v4 = (_QWORD *)std::ostream::operator<<();
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)" (Ω)  ━━━━━  SpeakerCalibration\n", 43);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"┣ CalTemp = ", 14);
  v6 = (_QWORD *)std::ostream::operator<<();
  v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)" (˚C)\n", 7);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"┣ Q = ", 8);
  v8 = (_QWORD *)std::ostream::operator<<();
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"\n", 1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"┗ f₀ = ", 11);
  v10 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)" (Hz)\n", 6);
  if (*(_QWORD *)(a1 + 24))
  {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"┏ Kms = ", 10);
    v11 = (_QWORD *)std::ostream::operator<<();
    v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)" (N/m)  ━━━━━  DisplacementCalibration\n", 49);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)"┣ Le = ", 9);
    v13 = (_QWORD *)std::ostream::operator<<();
    v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)" (µH)\n", 7);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)"┣ Bl = ", 9);
    v15 = (_QWORD *)std::ostream::operator<<();
    v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)" (N/A)\n", 7);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"┣ Mms = ", 10);
    v17 = (_QWORD *)std::ostream::operator<<();
    v18 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)" (g)\n", 5);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)"┗ Rms = ", 10);
    v19 = (_QWORD *)std::ostream::operator<<();
    v20 = " (kg/s)\n";
    v21 = 8;
  }
  else
  {
    v20 = "┗ [DisplacementCalibration not present]\n";
    v19 = a2;
    v21 = 42;
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)v20, v21);
  if (*(_QWORD *)(a1 + 40))
  {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"┏ C₀ = ", 11);
    v22 = (_QWORD *)std::ostream::operator<<();
    v23 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)" (pF)  ━━━━━  ConvoyCalibration\n", 42);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)"┣ Coffset = ", 14);
    v24 = (_QWORD *)std::ostream::operator<<();
    v25 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)" (pF)\n", 6);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)"┣ Cmin = ", 11);
    v26 = (_QWORD *)std::ostream::operator<<();
    v27 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, (uint64_t)" (pF)\n", 6);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)"┗ Cmax = ", 11);
    v28 = (_QWORD *)std::ostream::operator<<();
    v29 = " (pF)\n";
    v30 = 6;
  }
  else
  {
    v29 = "┗ [ConvoyCalibration not present]\n";
    v28 = a2;
    v30 = 36;
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, (uint64_t)v29, v30);
  return a2;
}

void SpTS::v2::Speaker::~Speaker(const void **this)
{
  const void *v1;

  v1 = *this;
  if (v1)
    CFRelease(v1);
}

float SpTS::v2::Speaker::get<float>(const __CFDictionary **a1, char *a2)
{
  const __CFDictionary *v2;
  const __CFNumber *v3;
  std::runtime_error *exception;

  v2 = *a1;
  if (!v2)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    applesauce::CF::construct_error(exception);
  }
  v3 = applesauce::CF::DictionaryRef_proxy::at_as<float,char const*&>(v2, a2);
  if (((unint64_t)v3 & 0xFF00000000) == 0)
    std::__throw_bad_optional_access[abi:ne180100]();
  return *(float *)&v3;
}

void sub_1B6430B78(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

const __CFNumber *applesauce::CF::DictionaryRef_proxy::at_as<float,char const*&>(const __CFDictionary *a1, char *a2)
{
  const __CFNumber *result;

  result = (const __CFNumber *)applesauce::CF::details::at_key<char const*&>(a1, a2);
  if (result)
    return (const __CFNumber *)applesauce::CF::convert_as<float,0>(result);
  return result;
}

const void *applesauce::CF::details::at_key<char const*&>(const __CFDictionary *a1, char *a2)
{
  const void *Value;
  void *key;

  applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&key, a2);
  if (a1)
    Value = CFDictionaryGetValue(a1, key);
  if (key)
    CFRelease(key);
  if (!a1)
    return 0;
  return Value;
}

void sub_1B6430C0C(void *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  applesauce::CF::StringRef::~StringRef((const void **)va);
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1B6430BF0);
}

void std::__shared_ptr_pointer<clsp::ConvoyCalibrationProperties  *>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1BCC95CECLL);
}

uint64_t std::__shared_ptr_pointer<clsp::ConvoyCalibrationProperties  *>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    JUMPOUT(0x1BCC95CECLL);
  return result;
}

BOOL SpTS::v2::Speaker::has<float>(const __CFDictionary **a1, char *a2)
{
  const __CFDictionary *v2;
  std::runtime_error *exception;

  v2 = *a1;
  if (!v2)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    applesauce::CF::construct_error(exception);
  }
  return ((unint64_t)applesauce::CF::DictionaryRef_proxy::at_as<float,char const*&>(v2, a2) & 0xFF00000000) != 0;
}

void sub_1B6430CD8(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<clsp::DispCalibrationProperties>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E69DB478;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<clsp::DispCalibrationProperties>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E69DB478;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1BCC95CECLL);
}

const __CFNumber *applesauce::CF::DictionaryRef_proxy::at_as<unsigned int,char const*&>(const __CFDictionary *a1, char *a2)
{
  const __CFNumber *result;

  result = (const __CFNumber *)applesauce::CF::details::at_key<char const*&>(a1, a2);
  if (result)
    return (const __CFNumber *)applesauce::CF::convert_as<unsigned int,0>(result);
  return result;
}

_QWORD *std::endl[abi:ne180100]<char,std::char_traits<char>>(_QWORD *a1)
{
  const std::locale::facet *v2;
  std::locale v4;

  std::ios_base::getloc((const std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)));
  v2 = std::locale::use_facet(&v4, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v2->__vftable[2].~facet_0)(v2, 10);
  std::locale::~locale(&v4);
  std::ostream::put();
  std::ostream::flush();
  return a1;
}

void sub_1B6430DD0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10)
{
  std::locale::~locale(&a10);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<clsp::ConvoyCalibrationProperties>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E69DB4B0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<clsp::ConvoyCalibrationProperties>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E69DB4B0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1BCC95CECLL);
}

CFArrayRef AUSpeakerProtectionV3::CreateSpeakerCalibrationDictionary(int **a1, int **a2)
{
  int **v2;
  const __CFString *v3;
  const __CFString *v4;
  const __CFString *v5;
  const __CFString *v6;
  const __CFString *v7;
  const __CFString *v8;
  const __CFString *v9;
  const __CFString *v10;
  int *v11;
  const __CFString *v12;
  const __CFString *v13;
  const __CFString *v14;
  const __CFString *v15;
  const __CFString *v16;
  const __CFString *v17;
  const __CFString *v18;
  const __CFString *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  _QWORD *v28;
  uint64_t v29;
  int64x2_t v30;
  unint64_t v31;
  CFArrayRef v32;
  _OWORD v35[2];
  int v36;
  int64x2_t v37;
  unint64_t v38;
  CFTypeRef cf;
  int64x2_t v40;
  unint64_t v41;
  unint64_t *v42;

  v37 = 0uLL;
  v38 = 0;
  if (a1 != a2)
  {
    v2 = a1;
    v3 = CFSTR("f0");
    v4 = CFSTR("Q");
    v5 = CFSTR("Rdc");
    v6 = CFSTR("Tcal");
    v7 = CFSTR("C0");
    v8 = CFSTR("Coffset");
    v9 = CFSTR("Cmin");
    v10 = CFSTR("Cmax");
    do
    {
      memset(v35, 0, sizeof(v35));
      v36 = 1065353216;
      CFRetain(v3);
      applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&cf, v3);
      std::__hash_table<std::__hash_value_type<applesauce::CF::StringRef,applesauce::CF::NumberRef>,std::__unordered_map_hasher<applesauce::CF::StringRef,std::__hash_value_type<applesauce::CF::StringRef,applesauce::CF::NumberRef>,std::hash<applesauce::CF::StringRef>,std::equal_to<applesauce::CF::StringRef>,true>,std::__unordered_map_equal<applesauce::CF::StringRef,std::__hash_value_type<applesauce::CF::StringRef,applesauce::CF::NumberRef>,std::equal_to<applesauce::CF::StringRef>,std::hash<applesauce::CF::StringRef>,true>,std::allocator<std::__hash_value_type<applesauce::CF::StringRef,applesauce::CF::NumberRef>>>::__emplace_unique_key_args<applesauce::CF::StringRef,applesauce::CF::StringRef,float &>((uint64_t)v35, &cf, &cf, *v2 + 3);
      if (cf)
        CFRelease(cf);
      CFRetain(v4);
      applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&cf, v4);
      std::__hash_table<std::__hash_value_type<applesauce::CF::StringRef,applesauce::CF::NumberRef>,std::__unordered_map_hasher<applesauce::CF::StringRef,std::__hash_value_type<applesauce::CF::StringRef,applesauce::CF::NumberRef>,std::hash<applesauce::CF::StringRef>,std::equal_to<applesauce::CF::StringRef>,true>,std::__unordered_map_equal<applesauce::CF::StringRef,std::__hash_value_type<applesauce::CF::StringRef,applesauce::CF::NumberRef>,std::equal_to<applesauce::CF::StringRef>,std::hash<applesauce::CF::StringRef>,true>,std::allocator<std::__hash_value_type<applesauce::CF::StringRef,applesauce::CF::NumberRef>>>::__emplace_unique_key_args<applesauce::CF::StringRef,applesauce::CF::StringRef,float &>((uint64_t)v35, &cf, &cf, *v2 + 2);
      if (cf)
        CFRelease(cf);
      CFRetain(v5);
      applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&cf, v5);
      std::__hash_table<std::__hash_value_type<applesauce::CF::StringRef,applesauce::CF::NumberRef>,std::__unordered_map_hasher<applesauce::CF::StringRef,std::__hash_value_type<applesauce::CF::StringRef,applesauce::CF::NumberRef>,std::hash<applesauce::CF::StringRef>,std::equal_to<applesauce::CF::StringRef>,true>,std::__unordered_map_equal<applesauce::CF::StringRef,std::__hash_value_type<applesauce::CF::StringRef,applesauce::CF::NumberRef>,std::equal_to<applesauce::CF::StringRef>,std::hash<applesauce::CF::StringRef>,true>,std::allocator<std::__hash_value_type<applesauce::CF::StringRef,applesauce::CF::NumberRef>>>::__emplace_unique_key_args<applesauce::CF::StringRef,applesauce::CF::StringRef,float &>((uint64_t)v35, &cf, &cf, *v2);
      if (cf)
        CFRelease(cf);
      CFRetain(v6);
      applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&cf, v6);
      std::__hash_table<std::__hash_value_type<applesauce::CF::StringRef,applesauce::CF::NumberRef>,std::__unordered_map_hasher<applesauce::CF::StringRef,std::__hash_value_type<applesauce::CF::StringRef,applesauce::CF::NumberRef>,std::hash<applesauce::CF::StringRef>,std::equal_to<applesauce::CF::StringRef>,true>,std::__unordered_map_equal<applesauce::CF::StringRef,std::__hash_value_type<applesauce::CF::StringRef,applesauce::CF::NumberRef>,std::equal_to<applesauce::CF::StringRef>,std::hash<applesauce::CF::StringRef>,true>,std::allocator<std::__hash_value_type<applesauce::CF::StringRef,applesauce::CF::NumberRef>>>::__emplace_unique_key_args<applesauce::CF::StringRef,applesauce::CF::StringRef,float &>((uint64_t)v35, &cf, &cf, *v2 + 1);
      if (cf)
        CFRelease(cf);
      v11 = *v2;
      if (*((_QWORD *)*v2 + 3))
      {
        CFRetain(CFSTR("Km"));
        applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&cf, CFSTR("Km"));
        std::__hash_table<std::__hash_value_type<applesauce::CF::StringRef,applesauce::CF::NumberRef>,std::__unordered_map_hasher<applesauce::CF::StringRef,std::__hash_value_type<applesauce::CF::StringRef,applesauce::CF::NumberRef>,std::hash<applesauce::CF::StringRef>,std::equal_to<applesauce::CF::StringRef>,true>,std::__unordered_map_equal<applesauce::CF::StringRef,std::__hash_value_type<applesauce::CF::StringRef,applesauce::CF::NumberRef>,std::equal_to<applesauce::CF::StringRef>,std::hash<applesauce::CF::StringRef>,true>,std::allocator<std::__hash_value_type<applesauce::CF::StringRef,applesauce::CF::NumberRef>>>::__emplace_unique_key_args<applesauce::CF::StringRef,applesauce::CF::StringRef,float &>((uint64_t)v35, &cf, &cf, *((int **)*v2 + 3));
        if (cf)
          CFRelease(cf);
        CFRetain(CFSTR("Le"));
        applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&cf, CFSTR("Le"));
        std::__hash_table<std::__hash_value_type<applesauce::CF::StringRef,applesauce::CF::NumberRef>,std::__unordered_map_hasher<applesauce::CF::StringRef,std::__hash_value_type<applesauce::CF::StringRef,applesauce::CF::NumberRef>,std::hash<applesauce::CF::StringRef>,std::equal_to<applesauce::CF::StringRef>,true>,std::__unordered_map_equal<applesauce::CF::StringRef,std::__hash_value_type<applesauce::CF::StringRef,applesauce::CF::NumberRef>,std::equal_to<applesauce::CF::StringRef>,std::hash<applesauce::CF::StringRef>,true>,std::allocator<std::__hash_value_type<applesauce::CF::StringRef,applesauce::CF::NumberRef>>>::__emplace_unique_key_args<applesauce::CF::StringRef,applesauce::CF::StringRef,float &>((uint64_t)v35, &cf, &cf, (int *)(*((_QWORD *)*v2 + 3) + 4));
        if (cf)
          CFRelease(cf);
        CFRetain(CFSTR("Bl"));
        applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&cf, CFSTR("Bl"));
        std::__hash_table<std::__hash_value_type<applesauce::CF::StringRef,applesauce::CF::NumberRef>,std::__unordered_map_hasher<applesauce::CF::StringRef,std::__hash_value_type<applesauce::CF::StringRef,applesauce::CF::NumberRef>,std::hash<applesauce::CF::StringRef>,std::equal_to<applesauce::CF::StringRef>,true>,std::__unordered_map_equal<applesauce::CF::StringRef,std::__hash_value_type<applesauce::CF::StringRef,applesauce::CF::NumberRef>,std::equal_to<applesauce::CF::StringRef>,std::hash<applesauce::CF::StringRef>,true>,std::allocator<std::__hash_value_type<applesauce::CF::StringRef,applesauce::CF::NumberRef>>>::__emplace_unique_key_args<applesauce::CF::StringRef,applesauce::CF::StringRef,float &>((uint64_t)v35, &cf, &cf, (int *)(*((_QWORD *)*v2 + 3) + 8));
        if (cf)
          CFRelease(cf);
        CFRetain(CFSTR("Mms"));
        applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&cf, CFSTR("Mms"));
        std::__hash_table<std::__hash_value_type<applesauce::CF::StringRef,applesauce::CF::NumberRef>,std::__unordered_map_hasher<applesauce::CF::StringRef,std::__hash_value_type<applesauce::CF::StringRef,applesauce::CF::NumberRef>,std::hash<applesauce::CF::StringRef>,std::equal_to<applesauce::CF::StringRef>,true>,std::__unordered_map_equal<applesauce::CF::StringRef,std::__hash_value_type<applesauce::CF::StringRef,applesauce::CF::NumberRef>,std::equal_to<applesauce::CF::StringRef>,std::hash<applesauce::CF::StringRef>,true>,std::allocator<std::__hash_value_type<applesauce::CF::StringRef,applesauce::CF::NumberRef>>>::__emplace_unique_key_args<applesauce::CF::StringRef,applesauce::CF::StringRef,float &>((uint64_t)v35, &cf, &cf, (int *)(*((_QWORD *)*v2 + 3) + 12));
        if (cf)
          CFRelease(cf);
        CFRetain(CFSTR("Rm"));
        applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&cf, CFSTR("Rm"));
        std::__hash_table<std::__hash_value_type<applesauce::CF::StringRef,applesauce::CF::NumberRef>,std::__unordered_map_hasher<applesauce::CF::StringRef,std::__hash_value_type<applesauce::CF::StringRef,applesauce::CF::NumberRef>,std::hash<applesauce::CF::StringRef>,std::equal_to<applesauce::CF::StringRef>,true>,std::__unordered_map_equal<applesauce::CF::StringRef,std::__hash_value_type<applesauce::CF::StringRef,applesauce::CF::NumberRef>,std::equal_to<applesauce::CF::StringRef>,std::hash<applesauce::CF::StringRef>,true>,std::allocator<std::__hash_value_type<applesauce::CF::StringRef,applesauce::CF::NumberRef>>>::__emplace_unique_key_args<applesauce::CF::StringRef,applesauce::CF::StringRef,float &>((uint64_t)v35, &cf, &cf, (int *)(*((_QWORD *)*v2 + 3) + 16));
        if (cf)
          CFRelease(cf);
        v11 = *v2;
      }
      if (*((_QWORD *)v11 + 5))
      {
        CFRetain(v7);
        applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&cf, v7);
        std::__hash_table<std::__hash_value_type<applesauce::CF::StringRef,applesauce::CF::NumberRef>,std::__unordered_map_hasher<applesauce::CF::StringRef,std::__hash_value_type<applesauce::CF::StringRef,applesauce::CF::NumberRef>,std::hash<applesauce::CF::StringRef>,std::equal_to<applesauce::CF::StringRef>,true>,std::__unordered_map_equal<applesauce::CF::StringRef,std::__hash_value_type<applesauce::CF::StringRef,applesauce::CF::NumberRef>,std::equal_to<applesauce::CF::StringRef>,std::hash<applesauce::CF::StringRef>,true>,std::allocator<std::__hash_value_type<applesauce::CF::StringRef,applesauce::CF::NumberRef>>>::__emplace_unique_key_args<applesauce::CF::StringRef,applesauce::CF::StringRef,float &>((uint64_t)v35, &cf, &cf, *((int **)*v2 + 5));
        if (cf)
          CFRelease(cf);
        CFRetain(v8);
        applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&cf, v8);
        std::__hash_table<std::__hash_value_type<applesauce::CF::StringRef,applesauce::CF::NumberRef>,std::__unordered_map_hasher<applesauce::CF::StringRef,std::__hash_value_type<applesauce::CF::StringRef,applesauce::CF::NumberRef>,std::hash<applesauce::CF::StringRef>,std::equal_to<applesauce::CF::StringRef>,true>,std::__unordered_map_equal<applesauce::CF::StringRef,std::__hash_value_type<applesauce::CF::StringRef,applesauce::CF::NumberRef>,std::equal_to<applesauce::CF::StringRef>,std::hash<applesauce::CF::StringRef>,true>,std::allocator<std::__hash_value_type<applesauce::CF::StringRef,applesauce::CF::NumberRef>>>::__emplace_unique_key_args<applesauce::CF::StringRef,applesauce::CF::StringRef,float &>((uint64_t)v35, &cf, &cf, (int *)(*((_QWORD *)*v2 + 5) + 4));
        if (cf)
          CFRelease(cf);
        CFRetain(v9);
        applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&cf, v9);
        std::__hash_table<std::__hash_value_type<applesauce::CF::StringRef,applesauce::CF::NumberRef>,std::__unordered_map_hasher<applesauce::CF::StringRef,std::__hash_value_type<applesauce::CF::StringRef,applesauce::CF::NumberRef>,std::hash<applesauce::CF::StringRef>,std::equal_to<applesauce::CF::StringRef>,true>,std::__unordered_map_equal<applesauce::CF::StringRef,std::__hash_value_type<applesauce::CF::StringRef,applesauce::CF::NumberRef>,std::equal_to<applesauce::CF::StringRef>,std::hash<applesauce::CF::StringRef>,true>,std::allocator<std::__hash_value_type<applesauce::CF::StringRef,applesauce::CF::NumberRef>>>::__emplace_unique_key_args<applesauce::CF::StringRef,applesauce::CF::StringRef,float &>((uint64_t)v35, &cf, &cf, (int *)(*((_QWORD *)*v2 + 5) + 8));
        if (cf)
          CFRelease(cf);
        CFRetain(v10);
        applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&cf, v10);
        std::__hash_table<std::__hash_value_type<applesauce::CF::StringRef,applesauce::CF::NumberRef>,std::__unordered_map_hasher<applesauce::CF::StringRef,std::__hash_value_type<applesauce::CF::StringRef,applesauce::CF::NumberRef>,std::hash<applesauce::CF::StringRef>,std::equal_to<applesauce::CF::StringRef>,true>,std::__unordered_map_equal<applesauce::CF::StringRef,std::__hash_value_type<applesauce::CF::StringRef,applesauce::CF::NumberRef>,std::equal_to<applesauce::CF::StringRef>,std::hash<applesauce::CF::StringRef>,true>,std::allocator<std::__hash_value_type<applesauce::CF::StringRef,applesauce::CF::NumberRef>>>::__emplace_unique_key_args<applesauce::CF::StringRef,applesauce::CF::StringRef,float &>((uint64_t)v35, &cf, &cf, (int *)(*((_QWORD *)*v2 + 5) + 12));
        if (cf)
          CFRelease(cf);
      }
      v12 = v6;
      v13 = v5;
      v14 = v4;
      v15 = v3;
      v16 = v10;
      v17 = v9;
      v18 = v8;
      v19 = v7;
      v20 = v37.i64[1];
      if (v37.i64[1] >= v38)
      {
        v22 = (v37.i64[1] - v37.i64[0]) >> 3;
        if ((unint64_t)(v22 + 1) >> 61)
          std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
        v23 = (uint64_t)(v38 - v37.i64[0]) >> 2;
        if (v23 <= v22 + 1)
          v23 = v22 + 1;
        if (v38 - v37.i64[0] >= 0x7FFFFFFFFFFFFFF8)
          v24 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v24 = v23;
        v42 = &v38;
        if (v24)
          v24 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<SlidingWindowDTFT<float> *>>(v24);
        else
          v25 = 0;
        cf = (CFTypeRef)v24;
        v40.i64[0] = v24 + 8 * v22;
        v40.i64[1] = v40.i64[0];
        v41 = v24 + 8 * v25;
        std::construct_at[abi:ne180100]<applesauce::CF::DictionaryRef,std::unordered_map<applesauce::CF::StringRef,applesauce::CF::NumberRef> &,applesauce::CF::DictionaryRef*>((CFDictionaryRef *)v40.i64[0], (uint64_t)v35);
        v26 = v40.i64[0];
        v21 = v40.i64[1] + 8;
        v40.i64[1] += 8;
        v27 = (_QWORD *)v37.i64[1];
        v28 = (_QWORD *)v37.i64[0];
        if (v37.i64[1] == v37.i64[0])
        {
          v30 = vdupq_n_s64(v37.u64[1]);
        }
        else
        {
          do
          {
            v29 = *--v27;
            *(_QWORD *)(v26 - 8) = v29;
            v26 -= 8;
            *v27 = 0;
          }
          while (v27 != v28);
          v30 = v37;
          v21 = v40.i64[1];
        }
        v37.i64[0] = v26;
        v37.i64[1] = v21;
        v40 = v30;
        v31 = v38;
        v38 = v41;
        v41 = v31;
        cf = (CFTypeRef)v30.i64[0];
        std::__split_buffer<applesauce::CF::DictionaryRef>::~__split_buffer((uint64_t)&cf);
      }
      else
      {
        std::construct_at[abi:ne180100]<applesauce::CF::DictionaryRef,std::unordered_map<applesauce::CF::StringRef,applesauce::CF::NumberRef> &,applesauce::CF::DictionaryRef*>((CFDictionaryRef *)v37.i64[1], (uint64_t)v35);
        v21 = v20 + 8;
      }
      v37.i64[1] = v21;
      std::__hash_table<std::__hash_value_type<applesauce::CF::StringRef,applesauce::CF::NumberRef>,std::__unordered_map_hasher<applesauce::CF::StringRef,std::__hash_value_type<applesauce::CF::StringRef,applesauce::CF::NumberRef>,std::hash<applesauce::CF::StringRef>,std::equal_to<applesauce::CF::StringRef>,true>,std::__unordered_map_equal<applesauce::CF::StringRef,std::__hash_value_type<applesauce::CF::StringRef,applesauce::CF::NumberRef>,std::equal_to<applesauce::CF::StringRef>,std::hash<applesauce::CF::StringRef>,true>,std::allocator<std::__hash_value_type<applesauce::CF::StringRef,applesauce::CF::NumberRef>>>::~__hash_table((uint64_t)v35);
      ++v2;
      v7 = v19;
      v8 = v18;
      v9 = v17;
      v10 = v16;
      v3 = v15;
      v4 = v14;
      v5 = v13;
      v6 = v12;
    }
    while (v2 != a2);
  }
  v32 = applesauce::CF::details::make_CFArrayRef<applesauce::CF::DictionaryRef>((uint64_t **)&v37);
  cf = &v37;
  std::vector<applesauce::CF::DictionaryRef>::__destroy_vector::operator()[abi:ne180100]((void ***)&cf);
  return v32;
}

void sub_1B6431388(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void **a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17)
{
  a11 = (void **)&a17;
  std::vector<applesauce::CF::DictionaryRef>::__destroy_vector::operator()[abi:ne180100](&a11);
  _Unwind_Resume(a1);
}

uint64_t AUSpeakerProtectionV3::GetPowerBudgetProperty(CFDictionaryRef *this, uint64_t a2)
{
  uint64_t v3;
  unint64_t v5;
  unsigned int v6;
  float v7;
  float v8;
  CFTypeRef cf;
  _OWORD v11[2];
  int v12;
  CFTypeRef *p_cf;

  memset(v11, 0, sizeof(v11));
  v12 = 1065353216;
  v3 = *(_QWORD *)(a2 + 992);
  if (*(_QWORD *)(a2 + 1000) != v3)
  {
    v5 = 0;
    v6 = 1;
    do
    {
      v7 = *(float *)(*(_QWORD *)(a2 + 968) + 4 * v5);
      v8 = *(float *)(a2 + 960);
      cpms::TimeScale<float>::getKey(&cf, *(CFTypeRef *)(v3 + 32 * v5));
      p_cf = &cf;
      *((float *)std::__hash_table<std::__hash_value_type<applesauce::CF::StringRef,float>,std::__unordered_map_hasher<applesauce::CF::StringRef,std::__hash_value_type<applesauce::CF::StringRef,float>,std::hash<applesauce::CF::StringRef>,std::equal_to<applesauce::CF::StringRef>,true>,std::__unordered_map_equal<applesauce::CF::StringRef,std::__hash_value_type<applesauce::CF::StringRef,float>,std::equal_to<applesauce::CF::StringRef>,std::hash<applesauce::CF::StringRef>,true>,std::allocator<std::__hash_value_type<applesauce::CF::StringRef,float>>>::__emplace_unique_key_args<applesauce::CF::StringRef,std::piecewise_construct_t const&,std::tuple<applesauce::CF::StringRef&&>,std::tuple<>>((uint64_t)v11, &cf, &p_cf)+ 6) = v7 * v8;
      if (cf)
        CFRelease(cf);
      v5 = v6;
      v3 = *(_QWORD *)(a2 + 992);
      ++v6;
    }
    while (v5 < (*(_QWORD *)(a2 + 1000) - v3) >> 5);
  }
  applesauce::CF::make_DictionaryRef<applesauce::CF::StringRef,float>(this, (uint64_t)v11);
  return std::__hash_table<std::__hash_value_type<applesauce::CF::StringRef,float>,std::__unordered_map_hasher<applesauce::CF::StringRef,std::__hash_value_type<applesauce::CF::StringRef,float>,std::hash<applesauce::CF::StringRef>,std::equal_to<applesauce::CF::StringRef>,true>,std::__unordered_map_equal<applesauce::CF::StringRef,std::__hash_value_type<applesauce::CF::StringRef,float>,std::equal_to<applesauce::CF::StringRef>,std::hash<applesauce::CF::StringRef>,true>,std::allocator<std::__hash_value_type<applesauce::CF::StringRef,float>>>::~__hash_table((uint64_t)v11);
}

void sub_1B6431588(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  std::__hash_table<std::__hash_value_type<applesauce::CF::StringRef,float>,std::__unordered_map_hasher<applesauce::CF::StringRef,std::__hash_value_type<applesauce::CF::StringRef,float>,std::hash<applesauce::CF::StringRef>,std::equal_to<applesauce::CF::StringRef>,true>,std::__unordered_map_equal<applesauce::CF::StringRef,std::__hash_value_type<applesauce::CF::StringRef,float>,std::equal_to<applesauce::CF::StringRef>,std::hash<applesauce::CF::StringRef>,true>,std::allocator<std::__hash_value_type<applesauce::CF::StringRef,float>>>::~__hash_table((uint64_t)va);
  _Unwind_Resume(a1);
}

void applesauce::CF::make_DictionaryRef<applesauce::CF::StringRef,float>(CFDictionaryRef *a1, uint64_t a2)
{
  int *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  void **v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  int64x2_t v15;
  void **v16;
  CFDictionaryRef CFDictionaryRef;
  int64x2_t v18;
  _QWORD v19[3];
  void **v20;
  int64x2_t v21;
  void **v22;
  _QWORD *v23;

  v18 = 0uLL;
  v19[0] = 0;
  std::vector<applesauce::CF::TypeRefPair>::reserve(&v18, *(_QWORD *)(a2 + 24));
  v4 = (int *)(a2 + 16);
  while (1)
  {
    v4 = *(int **)v4;
    if (!v4)
      break;
    v5 = v18.i64[1];
    if (v18.i64[1] >= v19[0])
    {
      v7 = (v18.i64[1] - v18.i64[0]) >> 4;
      if ((unint64_t)(v7 + 1) >> 60)
        std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
      v8 = (v19[0] - v18.i64[0]) >> 3;
      if (v8 <= v7 + 1)
        v8 = v7 + 1;
      if (v19[0] - v18.i64[0] >= 0x7FFFFFFFFFFFFFF0uLL)
        v9 = 0xFFFFFFFFFFFFFFFLL;
      else
        v9 = v8;
      v23 = v19;
      if (v9)
        v10 = (void **)std::__allocate_at_least[abi:ne180100]<std::allocator<std::tuple<unsigned int,applesauce::CF::DictionaryRef>>>((uint64_t)v19, v9);
      else
        v10 = 0;
      v20 = v10;
      v21.i64[0] = (uint64_t)&v10[2 * v7];
      v21.i64[1] = v21.i64[0];
      v22 = &v10[2 * v9];
      applesauce::CF::TypeRefPair::TypeRefPair<applesauce::CF::StringRef const&,float const&>(v21.i64[0], *((CFTypeRef *)v4 + 2), v4 + 6);
      v11 = v21.i64[0];
      v6 = v21.i64[1] + 16;
      v21.i64[1] += 16;
      v12 = (_QWORD *)v18.i64[1];
      v13 = (_QWORD *)v18.i64[0];
      if (v18.i64[1] == v18.i64[0])
      {
        v15 = vdupq_n_s64(v18.u64[1]);
      }
      else
      {
        do
        {
          v14 = *(v12 - 2);
          v12 -= 2;
          *(_QWORD *)(v11 - 16) = v14;
          v11 -= 16;
          *v12 = 0;
          *(_QWORD *)(v11 + 8) = v12[1];
          v12[1] = 0;
        }
        while (v12 != v13);
        v15 = v18;
        v6 = v21.i64[1];
      }
      v18.i64[0] = v11;
      v18.i64[1] = v6;
      v21 = v15;
      v16 = (void **)v19[0];
      v19[0] = v22;
      v22 = v16;
      v20 = (void **)v15.i64[0];
      std::__split_buffer<applesauce::CF::TypeRefPair>::~__split_buffer((uint64_t)&v20);
    }
    else
    {
      applesauce::CF::TypeRefPair::TypeRefPair<applesauce::CF::StringRef const&,float const&>((_QWORD *)v18.i64[1], *((CFTypeRef *)v4 + 2), v4 + 6);
      v6 = v5 + 16;
    }
    v18.i64[1] = v6;
  }
  CFDictionaryRef = applesauce::CF::details::make_CFDictionaryRef((void ***)&v18);
  v20 = (void **)&v18;
  std::vector<applesauce::CF::TypeRefPair>::__destroy_vector::operator()[abi:ne180100](&v20);
  *a1 = CFDictionaryRef;
}

void sub_1B6431750(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void **a13)
{
  a13 = (void **)&a9;
  std::vector<applesauce::CF::TypeRefPair>::__destroy_vector::operator()[abi:ne180100](&a13);
  _Unwind_Resume(a1);
}

CFTypeRef *std::__hash_table<std::__hash_value_type<applesauce::CF::StringRef,float>,std::__unordered_map_hasher<applesauce::CF::StringRef,std::__hash_value_type<applesauce::CF::StringRef,float>,std::hash<applesauce::CF::StringRef>,std::equal_to<applesauce::CF::StringRef>,true>,std::__unordered_map_equal<applesauce::CF::StringRef,std::__hash_value_type<applesauce::CF::StringRef,float>,std::equal_to<applesauce::CF::StringRef>,std::hash<applesauce::CF::StringRef>,true>,std::allocator<std::__hash_value_type<applesauce::CF::StringRef,float>>>::__emplace_unique_key_args<applesauce::CF::StringRef,std::piecewise_construct_t const&,std::tuple<applesauce::CF::StringRef&&>,std::tuple<>>(uint64_t a1, CFTypeRef *a2, _QWORD **a3)
{
  CFHashCode v3;
  _QWORD *v7;
  CFHashCode v8;
  CFHashCode v9;
  unint64_t v10;
  uint8x8_t v11;
  unint64_t v12;
  CFTypeRef **v13;
  CFTypeRef *i;
  unint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *v18;
  float v19;
  float v20;
  _BOOL8 v21;
  unint64_t v22;
  unint64_t v23;
  int8x8_t prime;
  void *v25;
  void *v26;
  uint64_t v27;
  _QWORD *v28;
  unint64_t v29;
  uint8x8_t v30;
  unint64_t v31;
  uint8x8_t v32;
  uint64_t v33;
  _QWORD *v34;
  unint64_t v35;
  CFTypeRef **v36;
  unint64_t v37;
  void *v39;
  _QWORD v40[2];
  char v41;

  v7 = (_QWORD *)(a1 + 24);
  v8 = std::hash<applesauce::CF::StringRef>::operator()(a1 + 24, a2);
  v9 = v8;
  v10 = *(_QWORD *)(a1 + 8);
  if (v10)
  {
    v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    v12 = v11.u32[0];
    if (v11.u32[0] > 1uLL)
    {
      v3 = v8;
      if (v8 >= v10)
        v3 = v8 % v10;
    }
    else
    {
      v3 = (v10 - 1) & v8;
    }
    v13 = *(CFTypeRef ***)(*(_QWORD *)a1 + 8 * v3);
    if (v13)
    {
      for (i = *v13; i; i = (CFTypeRef *)*i)
      {
        v15 = (unint64_t)i[1];
        if (v15 == v9)
        {
          if (applesauce::CF::compare<applesauce::CF::StringRef,0,applesauce::CF::StringRef,0>(i + 2, (const __CFString **)a2) == kCFCompareEqualTo)return i;
        }
        else
        {
          if (v12 > 1)
          {
            if (v15 >= v10)
              v15 %= v10;
          }
          else
          {
            v15 &= v10 - 1;
          }
          if (v15 != v3)
            break;
        }
      }
    }
  }
  v16 = (_QWORD *)(a1 + 16);
  v17 = operator new(0x20uLL);
  v40[0] = v17;
  v40[1] = a1 + 16;
  *v17 = 0;
  v17[1] = v9;
  v18 = *a3;
  v17[2] = **a3;
  *v18 = 0;
  *((_DWORD *)v17 + 6) = 0;
  v41 = 1;
  v19 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v20 = *(float *)(a1 + 32);
  if (!v10 || (float)(v20 * (float)v10) < v19)
  {
    v21 = 1;
    if (v10 >= 3)
      v21 = (v10 & (v10 - 1)) != 0;
    v22 = v21 | (2 * v10);
    v23 = vcvtps_u32_f32(v19 / v20);
    if (v22 <= v23)
      prime = (int8x8_t)v23;
    else
      prime = (int8x8_t)v22;
    if (*(_QWORD *)&prime == 1)
    {
      prime = (int8x8_t)2;
    }
    else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
    {
      prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
    }
    v10 = *(_QWORD *)(a1 + 8);
    if (*(_QWORD *)&prime > v10)
      goto LABEL_30;
    if (*(_QWORD *)&prime < v10)
    {
      v31 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v10 < 3 || (v32 = (uint8x8_t)vcnt_s8((int8x8_t)v10), v32.i16[0] = vaddlv_u8(v32), v32.u32[0] > 1uLL))
      {
        v31 = std::__next_prime(v31);
      }
      else
      {
        v33 = 1 << -(char)__clz(v31 - 1);
        if (v31 >= 2)
          v31 = v33;
      }
      if (*(_QWORD *)&prime <= v31)
        prime = (int8x8_t)v31;
      if (*(_QWORD *)&prime >= v10)
      {
        v10 = *(_QWORD *)(a1 + 8);
      }
      else
      {
        if (prime)
        {
LABEL_30:
          if (*(_QWORD *)&prime >> 61)
            std::__throw_bad_array_new_length[abi:ne180100]();
          v25 = operator new(8 * *(_QWORD *)&prime);
          v26 = *(void **)a1;
          *(_QWORD *)a1 = v25;
          if (v26)
            operator delete(v26);
          v27 = 0;
          *(int8x8_t *)(a1 + 8) = prime;
          do
            *(_QWORD *)(*(_QWORD *)a1 + 8 * v27++) = 0;
          while (*(_QWORD *)&prime != v27);
          v28 = (_QWORD *)*v16;
          if (*v16)
          {
            v29 = v28[1];
            v30 = (uint8x8_t)vcnt_s8(prime);
            v30.i16[0] = vaddlv_u8(v30);
            if (v30.u32[0] > 1uLL)
            {
              if (v29 >= *(_QWORD *)&prime)
                v29 %= *(_QWORD *)&prime;
            }
            else
            {
              v29 &= *(_QWORD *)&prime - 1;
            }
            *(_QWORD *)(*(_QWORD *)a1 + 8 * v29) = v16;
            v34 = (_QWORD *)*v28;
            if (*v28)
            {
              do
              {
                v35 = v34[1];
                if (v30.u32[0] > 1uLL)
                {
                  if (v35 >= *(_QWORD *)&prime)
                    v35 %= *(_QWORD *)&prime;
                }
                else
                {
                  v35 &= *(_QWORD *)&prime - 1;
                }
                if (v35 != v29)
                {
                  if (!*(_QWORD *)(*(_QWORD *)a1 + 8 * v35))
                  {
                    *(_QWORD *)(*(_QWORD *)a1 + 8 * v35) = v28;
                    goto LABEL_55;
                  }
                  *v28 = *v34;
                  *v34 = **(_QWORD **)(*(_QWORD *)a1 + 8 * v35);
                  **(_QWORD **)(*(_QWORD *)a1 + 8 * v35) = v34;
                  v34 = v28;
                }
                v35 = v29;
LABEL_55:
                v28 = v34;
                v34 = (_QWORD *)*v34;
                v29 = v35;
              }
              while (v34);
            }
          }
          v10 = (unint64_t)prime;
          goto LABEL_59;
        }
        v39 = *(void **)a1;
        *(_QWORD *)a1 = 0;
        if (v39)
          operator delete(v39);
        v10 = 0;
        *(_QWORD *)(a1 + 8) = 0;
      }
    }
LABEL_59:
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10)
        v3 = v9 % v10;
      else
        v3 = v9;
    }
    else
    {
      v3 = (v10 - 1) & v9;
    }
  }
  v36 = *(CFTypeRef ***)(*(_QWORD *)a1 + 8 * v3);
  i = (CFTypeRef *)v40[0];
  if (v36)
  {
    *(_QWORD *)v40[0] = *v36;
LABEL_72:
    *v36 = i;
    goto LABEL_73;
  }
  *(_QWORD *)v40[0] = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = i;
  *(_QWORD *)(*(_QWORD *)a1 + 8 * v3) = v16;
  if (*i)
  {
    v37 = *((_QWORD *)*i + 1);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v37 >= v10)
        v37 %= v10;
    }
    else
    {
      v37 &= v10 - 1;
    }
    v36 = (CFTypeRef **)(*(_QWORD *)a1 + 8 * v37);
    goto LABEL_72;
  }
LABEL_73:
  v40[0] = 0;
  ++*v7;
  std::unique_ptr<std::__hash_node<std::__hash_value_type<applesauce::CF::StringRef,float>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<applesauce::CF::StringRef,float>,void *>>>>::reset[abi:ne180100]((uint64_t)v40);
  return i;
}

void sub_1B6431BB4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<applesauce::CF::StringRef,float>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<applesauce::CF::StringRef,float>,void *>>>>::reset[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::__hash_table<std::__hash_value_type<applesauce::CF::StringRef,float>,std::__unordered_map_hasher<applesauce::CF::StringRef,std::__hash_value_type<applesauce::CF::StringRef,float>,std::hash<applesauce::CF::StringRef>,std::equal_to<applesauce::CF::StringRef>,true>,std::__unordered_map_equal<applesauce::CF::StringRef,std::__hash_value_type<applesauce::CF::StringRef,float>,std::equal_to<applesauce::CF::StringRef>,std::hash<applesauce::CF::StringRef>,true>,std::allocator<std::__hash_value_type<applesauce::CF::StringRef,float>>>::~__hash_table(uint64_t a1)
{
  const void **v2;
  const void **v3;
  void *v4;

  v2 = *(const void ***)(a1 + 16);
  if (v2)
  {
    do
    {
      v3 = (const void **)*v2;
      std::__destroy_at[abi:ne180100]<std::pair<applesauce::CF::StringRef const,float>,0>(v2[2]);
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
  v4 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v4)
    operator delete(v4);
  return a1;
}

void std::__destroy_at[abi:ne180100]<std::pair<applesauce::CF::StringRef const,float>,0>(const void *a1)
{
  if (a1)
    CFRelease(a1);
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<applesauce::CF::StringRef,float>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<applesauce::CF::StringRef,float>,void *>>>>::reset[abi:ne180100](uint64_t a1)
{
  const void **v1;

  v1 = *(const void ***)a1;
  *(_QWORD *)a1 = 0;
  if (v1)
  {
    if (*(_BYTE *)(a1 + 16))
      std::__destroy_at[abi:ne180100]<std::pair<applesauce::CF::StringRef const,float>,0>(v1[2]);
    operator delete(v1);
  }
}

_QWORD *applesauce::CF::TypeRefPair::TypeRefPair<applesauce::CF::StringRef const&,float const&>(_QWORD *a1, CFTypeRef cf, int *a3)
{
  CFNumberRef v6;
  std::runtime_error *exception;
  int valuePtr;

  if (cf)
    CFRetain(cf);
  *a1 = cf;
  valuePtr = *a3;
  v6 = CFNumberCreate(0, kCFNumberFloatType, &valuePtr);
  a1[1] = v6;
  if (!v6)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
  }
  return a1;
}

void sub_1B6431D20(_Unwind_Exception *a1)
{
  uint64_t v1;
  const void *v3;

  v3 = *(const void **)(v1 + 8);
  if (v3)
    CFRelease(v3);
  applesauce::CF::TypeRef::~TypeRef((const void **)v1);
  _Unwind_Resume(a1);
}

void std::__hash_table<std::__hash_value_type<applesauce::CF::StringRef,applesauce::CF::NumberRef>,std::__unordered_map_hasher<applesauce::CF::StringRef,std::__hash_value_type<applesauce::CF::StringRef,applesauce::CF::NumberRef>,std::hash<applesauce::CF::StringRef>,std::equal_to<applesauce::CF::StringRef>,true>,std::__unordered_map_equal<applesauce::CF::StringRef,std::__hash_value_type<applesauce::CF::StringRef,applesauce::CF::NumberRef>,std::equal_to<applesauce::CF::StringRef>,std::hash<applesauce::CF::StringRef>,true>,std::allocator<std::__hash_value_type<applesauce::CF::StringRef,applesauce::CF::NumberRef>>>::__emplace_unique_key_args<applesauce::CF::StringRef,applesauce::CF::StringRef,float &>(uint64_t a1, CFTypeRef *a2, _QWORD *a3, int *a4)
{
  CFHashCode v4;
  _QWORD *v9;
  CFHashCode v10;
  CFHashCode v11;
  unint64_t v12;
  uint8x8_t v13;
  unint64_t v14;
  CFTypeRef **v15;
  CFTypeRef *i;
  unint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  CFNumberRef v20;
  float v21;
  float v22;
  _BOOL8 v23;
  unint64_t v24;
  unint64_t v25;
  size_t v26;
  uint64_t v27;
  _QWORD *v28;
  unint64_t v29;
  std::runtime_error *exception;
  _QWORD v31[2];
  char v32;
  int valuePtr;

  v9 = (_QWORD *)(a1 + 24);
  v10 = std::hash<applesauce::CF::StringRef>::operator()(a1 + 24, a2);
  v11 = v10;
  v12 = *(_QWORD *)(a1 + 8);
  if (v12)
  {
    v13 = (uint8x8_t)vcnt_s8((int8x8_t)v12);
    v13.i16[0] = vaddlv_u8(v13);
    v14 = v13.u32[0];
    if (v13.u32[0] > 1uLL)
    {
      v4 = v10;
      if (v10 >= v12)
        v4 = v10 % v12;
    }
    else
    {
      v4 = (v12 - 1) & v10;
    }
    v15 = *(CFTypeRef ***)(*(_QWORD *)a1 + 8 * v4);
    if (v15)
    {
      for (i = *v15; i; i = (CFTypeRef *)*i)
      {
        v17 = (unint64_t)i[1];
        if (v17 == v11)
        {
          if (applesauce::CF::compare<applesauce::CF::StringRef,0,applesauce::CF::StringRef,0>(i + 2, (const __CFString **)a2) == kCFCompareEqualTo)return;
        }
        else
        {
          if (v14 > 1)
          {
            if (v17 >= v12)
              v17 %= v12;
          }
          else
          {
            v17 &= v12 - 1;
          }
          if (v17 != v4)
            break;
        }
      }
    }
  }
  v18 = (_QWORD *)(a1 + 16);
  v19 = operator new(0x20uLL);
  v31[0] = v19;
  v31[1] = a1 + 16;
  v32 = 0;
  *v19 = 0;
  v19[1] = v11;
  v19[2] = *a3;
  *a3 = 0;
  valuePtr = *a4;
  v20 = CFNumberCreate(0, kCFNumberFloatType, &valuePtr);
  v19[3] = v20;
  if (!v20)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
  }
  v32 = 1;
  v21 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v22 = *(float *)(a1 + 32);
  if (!v12 || (float)(v22 * (float)v12) < v21)
  {
    v23 = 1;
    if (v12 >= 3)
      v23 = (v12 & (v12 - 1)) != 0;
    v24 = v23 | (2 * v12);
    v25 = vcvtps_u32_f32(v21 / v22);
    if (v24 <= v25)
      v26 = v25;
    else
      v26 = v24;
    std::__hash_table<std::__hash_value_type<unsigned int,std::tuple<__CFString const*,float,float,float,AudioUnitParameterUnit,unsigned int>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::tuple<__CFString const*,float,float,float,AudioUnitParameterUnit,unsigned int>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::tuple<__CFString const*,float,float,float,AudioUnitParameterUnit,unsigned int>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::tuple<__CFString const*,float,float,float,AudioUnitParameterUnit,unsigned int>>>>::__rehash<true>(a1, v26);
    v12 = *(_QWORD *)(a1 + 8);
    if ((v12 & (v12 - 1)) != 0)
    {
      if (v11 >= v12)
        v4 = v11 % v12;
      else
        v4 = v11;
    }
    else
    {
      v4 = (v12 - 1) & v11;
    }
  }
  v27 = *(_QWORD *)a1;
  v28 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v28)
  {
    *v19 = *v28;
LABEL_39:
    *v28 = v19;
    goto LABEL_40;
  }
  *v19 = *v18;
  *v18 = v19;
  *(_QWORD *)(v27 + 8 * v4) = v18;
  if (*v19)
  {
    v29 = *(_QWORD *)(*v19 + 8);
    if ((v12 & (v12 - 1)) != 0)
    {
      if (v29 >= v12)
        v29 %= v12;
    }
    else
    {
      v29 &= v12 - 1;
    }
    v28 = (_QWORD *)(*(_QWORD *)a1 + 8 * v29);
    goto LABEL_39;
  }
LABEL_40:
  v31[0] = 0;
  ++*v9;
  std::unique_ptr<std::__hash_node<std::__hash_value_type<applesauce::CF::StringRef,applesauce::CF::NumberRef>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<applesauce::CF::StringRef,applesauce::CF::NumberRef>,void *>>>>::reset[abi:ne180100]((uint64_t)v31);
}

void sub_1B6432004(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<applesauce::CF::StringRef,applesauce::CF::NumberRef>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<applesauce::CF::StringRef,applesauce::CF::NumberRef>,void *>>>>::reset[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

CFDictionaryRef *std::construct_at[abi:ne180100]<applesauce::CF::DictionaryRef,std::unordered_map<applesauce::CF::StringRef,applesauce::CF::NumberRef> &,applesauce::CF::DictionaryRef*>(CFDictionaryRef *a1, uint64_t a2)
{
  const void **v4;
  _QWORD *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  void **v9;
  void **v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  int64x2_t v15;
  void **v16;
  CFDictionaryRef CFDictionaryRef;
  int64x2_t v19;
  _QWORD v20[3];
  void **v21;
  int64x2_t v22;
  void **v23;
  _QWORD *v24;

  v19 = 0uLL;
  v20[0] = 0;
  std::vector<applesauce::CF::TypeRefPair>::reserve(&v19, *(_QWORD *)(a2 + 24));
  v4 = (const void **)(a2 + 16);
  while (1)
  {
    v4 = (const void **)*v4;
    if (!v4)
      break;
    if (v19.i64[1] >= v20[0])
    {
      v6 = (v19.i64[1] - v19.i64[0]) >> 4;
      if ((unint64_t)(v6 + 1) >> 60)
        std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
      v7 = (v20[0] - v19.i64[0]) >> 3;
      if (v7 <= v6 + 1)
        v7 = v6 + 1;
      if (v20[0] - v19.i64[0] >= 0x7FFFFFFFFFFFFFF0uLL)
        v8 = 0xFFFFFFFFFFFFFFFLL;
      else
        v8 = v7;
      v24 = v20;
      if (v8)
        v9 = (void **)std::__allocate_at_least[abi:ne180100]<std::allocator<std::tuple<unsigned int,applesauce::CF::DictionaryRef>>>((uint64_t)v20, v8);
      else
        v9 = 0;
      v10 = &v9[2 * v6];
      v21 = v9;
      v22.i64[0] = (uint64_t)v10;
      v23 = &v9[2 * v8];
      applesauce::CF::TypeRefPair::TypeRefPair<applesauce::CF::StringRef const&,applesauce::CF::NumberRef const&>(v10, v4[2], v4 + 3);
      v5 = v10 + 2;
      v22.i64[1] = (uint64_t)(v10 + 2);
      v11 = (_QWORD *)v19.i64[1];
      v12 = (_QWORD *)v19.i64[0];
      v13 = v22.i64[0];
      if (v19.i64[1] == v19.i64[0])
      {
        v15 = vdupq_n_s64(v19.u64[1]);
      }
      else
      {
        do
        {
          v14 = *(v11 - 2);
          v11 -= 2;
          *(_QWORD *)(v13 - 16) = v14;
          v13 -= 16;
          *v11 = 0;
          *(_QWORD *)(v13 + 8) = v11[1];
          v11[1] = 0;
        }
        while (v11 != v12);
        v15 = v19;
        v5 = (_QWORD *)v22.i64[1];
      }
      v19.i64[0] = v13;
      v19.i64[1] = (uint64_t)v5;
      v22 = v15;
      v16 = (void **)v20[0];
      v20[0] = v23;
      v23 = v16;
      v21 = (void **)v15.i64[0];
      std::__split_buffer<applesauce::CF::TypeRefPair>::~__split_buffer((uint64_t)&v21);
    }
    else
    {
      v5 = applesauce::CF::TypeRefPair::TypeRefPair<applesauce::CF::StringRef const&,applesauce::CF::NumberRef const&>((_QWORD *)v19.i64[1], v4[2], v4 + 3)+ 2;
    }
    v19.i64[1] = (uint64_t)v5;
  }
  CFDictionaryRef = applesauce::CF::details::make_CFDictionaryRef((void ***)&v19);
  v21 = (void **)&v19;
  std::vector<applesauce::CF::TypeRefPair>::__destroy_vector::operator()[abi:ne180100](&v21);
  *a1 = CFDictionaryRef;
  return a1;
}

void sub_1B64321F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void **a13)
{
  a13 = (void **)&a9;
  std::vector<applesauce::CF::TypeRefPair>::__destroy_vector::operator()[abi:ne180100](&a13);
  _Unwind_Resume(a1);
}

uint64_t std::__hash_table<std::__hash_value_type<applesauce::CF::StringRef,applesauce::CF::NumberRef>,std::__unordered_map_hasher<applesauce::CF::StringRef,std::__hash_value_type<applesauce::CF::StringRef,applesauce::CF::NumberRef>,std::hash<applesauce::CF::StringRef>,std::equal_to<applesauce::CF::StringRef>,true>,std::__unordered_map_equal<applesauce::CF::StringRef,std::__hash_value_type<applesauce::CF::StringRef,applesauce::CF::NumberRef>,std::equal_to<applesauce::CF::StringRef>,std::hash<applesauce::CF::StringRef>,true>,std::allocator<std::__hash_value_type<applesauce::CF::StringRef,applesauce::CF::NumberRef>>>::~__hash_table(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;

  v2 = *(_QWORD **)(a1 + 16);
  if (v2)
  {
    do
    {
      v3 = (_QWORD *)*v2;
      std::__destroy_at[abi:ne180100]<std::pair<applesauce::CF::StringRef const,applesauce::CF::NumberRef>,0>((uint64_t)(v2 + 2));
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
  v4 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v4)
    operator delete(v4);
  return a1;
}

void std::__destroy_at[abi:ne180100]<std::pair<applesauce::CF::StringRef const,applesauce::CF::NumberRef>,0>(uint64_t a1)
{
  const void *v2;

  v2 = *(const void **)(a1 + 8);
  if (v2)
    CFRelease(v2);
  if (*(_QWORD *)a1)
    CFRelease(*(CFTypeRef *)a1);
}

_QWORD *applesauce::CF::TypeRefPair::TypeRefPair<applesauce::CF::StringRef const&,applesauce::CF::NumberRef const&>(_QWORD *a1, CFTypeRef cf, const void **a3)
{
  const void *v6;

  if (cf)
    CFRetain(cf);
  *a1 = cf;
  v6 = *a3;
  if (v6)
    CFRetain(v6);
  a1[1] = v6;
  return a1;
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<applesauce::CF::StringRef,applesauce::CF::NumberRef>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<applesauce::CF::StringRef,applesauce::CF::NumberRef>,void *>>>>::reset[abi:ne180100](uint64_t a1)
{
  void *v1;

  v1 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v1)
  {
    if (*(_BYTE *)(a1 + 16))
      std::__destroy_at[abi:ne180100]<std::pair<applesauce::CF::StringRef const,applesauce::CF::NumberRef>,0>((uint64_t)v1 + 16);
    operator delete(v1);
  }
}

OpaqueExtAudioFile *CAExtAudioFile::Close(CAExtAudioFile *this)
{
  OpaqueExtAudioFile *result;
  uint64_t v3;

  result = (OpaqueExtAudioFile *)*((_QWORD *)this + 1);
  if (result)
  {
    *((_QWORD *)this + 1) = 0;
    v3 = ExtAudioFileDispose(result);
    return (OpaqueExtAudioFile *)(*(uint64_t (**)(CAExtAudioFile *, uint64_t, const char *))(*(_QWORD *)this + 16))(this, v3, "ExtAudioFileClose");
  }
  return result;
}

unint64_t GetPreference<long long>(const UInt8 *a1, const UInt8 *a2)
{
  int v4;
  const UInt8 *v5;
  CFIndex v6;
  const __CFString *v7;
  int v8;
  const UInt8 *v9;
  CFIndex v10;
  const __CFString *v11;
  const __CFString *v12;
  const __CFNumber *v13;
  CFTypeID TypeID;
  int Value;
  const UInt8 *v16;
  const UInt8 *v17;
  uint64_t v18;
  unint64_t v19;
  CFTypeID v20;
  int v21;
  uint64_t v22;
  int v23;
  unsigned __int8 v24;
  uint64_t v25;
  unsigned __int8 v26;
  uint64_t v28;
  const UInt8 *v29;
  const UInt8 *v30;
  unint64_t v31;
  const std::locale *v32;
  std::string::value_type *v33;
  BOOL v34;
  const std::locale::facet *v35;
  unsigned __int8 v36;
  unint64_t v37;
  char *p_p;
  std::string::value_type v39;
  uint64_t v40;
  _BYTE *v41;
  int v42;
  char v43;
  void **v44;
  std::string *v45;
  unint64_t v47;
  std::runtime_error *v48;
  std::runtime_error *exception;
  std::runtime_error *v50;
  std::string v51;
  const __CFNumber *v52;
  void *__p;
  unint64_t v54;
  unsigned __int8 v55;
  std::locale v56;
  _BYTE buf[12];
  __int16 v58;
  int v59;
  __int16 v60;
  const UInt8 *v61;
  __int16 v62;
  const UInt8 *v63;
  __int16 v64;
  std::string *v65;
  _BYTE valuePtr[12];
  __int16 v67;
  int v68;
  __int16 v69;
  const UInt8 *v70;
  __int16 v71;
  const UInt8 *v72;
  std::string::value_type v73[7];
  _BYTE *v74;
  std::string::value_type *v75;
  uint64_t v76;

  v76 = *MEMORY[0x1E0C80C00];
  v4 = *((char *)a1 + 23);
  if (v4 >= 0)
    v5 = a1;
  else
    v5 = *(const UInt8 **)a1;
  if (v4 >= 0)
    v6 = a1[23];
  else
    v6 = *((_QWORD *)a1 + 1);
  v7 = CFStringCreateWithBytes(0, v5, v6, 0x8000100u, 0);
  *(_QWORD *)valuePtr = v7;
  if (!v7)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
  }
  v8 = *((char *)a2 + 23);
  if (v8 >= 0)
    v9 = a2;
  else
    v9 = *(const UInt8 **)a2;
  if (v8 >= 0)
    v10 = a2[23];
  else
    v10 = *((_QWORD *)a2 + 1);
  v11 = CFStringCreateWithBytes(0, v9, v10, 0x8000100u, 0);
  v12 = v11;
  *(_QWORD *)buf = v11;
  if (!v11)
  {
    v50 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v50, "Could not construct");
  }
  v13 = (const __CFNumber *)CFPreferencesCopyAppValue(v11, v7);
  v52 = v13;
  CFRelease(v12);
  CFRelease(v7);
  if (v13)
  {
    TypeID = CFNumberGetTypeID();
    if (TypeID == CFGetTypeID(v13))
    {
      switch(CFNumberGetType(v13))
      {
        case kCFNumberSInt8Type:
          valuePtr[0] = 0;
          Value = CFNumberGetValue(v13, kCFNumberSInt8Type, valuePtr);
          goto LABEL_46;
        case kCFNumberSInt16Type:
          *(_WORD *)valuePtr = 0;
          v23 = CFNumberGetValue(v13, kCFNumberSInt16Type, valuePtr);
          goto LABEL_41;
        case kCFNumberSInt32Type:
          *(_DWORD *)valuePtr = 0;
          v23 = CFNumberGetValue(v13, kCFNumberSInt32Type, valuePtr);
          goto LABEL_111;
        case kCFNumberSInt64Type:
          *(_QWORD *)valuePtr = 0;
          v21 = CFNumberGetValue(v13, kCFNumberSInt64Type, valuePtr);
          goto LABEL_58;
        case kCFNumberFloat32Type:
          *(_DWORD *)valuePtr = 0;
          v21 = CFNumberGetValue(v13, kCFNumberFloat32Type, valuePtr);
          goto LABEL_33;
        case kCFNumberFloat64Type:
          *(_QWORD *)valuePtr = 0;
          v21 = CFNumberGetValue(v13, kCFNumberFloat64Type, valuePtr);
          goto LABEL_43;
        case kCFNumberCharType:
          valuePtr[0] = 0;
          Value = CFNumberGetValue(v13, kCFNumberCharType, valuePtr);
LABEL_46:
          if (Value)
            v26 = valuePtr[0];
          else
            v26 = 0;
          if (valuePtr[0] >= 0 || Value == 0)
            v28 = 0;
          else
            v28 = -256;
          if (!Value)
            goto LABEL_116;
          v18 = v28 & 0xFFFFFFFFFFFFFF00 | v26;
          goto LABEL_63;
        case kCFNumberShortType:
          *(_WORD *)valuePtr = 0;
          v23 = CFNumberGetValue(v13, kCFNumberShortType, valuePtr);
LABEL_41:
          v24 = valuePtr[0];
          v25 = *(__int16 *)valuePtr;
          goto LABEL_112;
        case kCFNumberIntType:
          *(_DWORD *)valuePtr = 0;
          v23 = CFNumberGetValue(v13, kCFNumberIntType, valuePtr);
LABEL_111:
          v24 = valuePtr[0];
          v25 = *(int *)valuePtr;
LABEL_112:
          v47 = v25 & 0xFFFFFFFFFFFFFF00 | v24;
          if (v23)
            v18 = v47;
          else
            v18 = 0;
          if (!v23)
            goto LABEL_116;
          goto LABEL_63;
        case kCFNumberLongType:
          *(_QWORD *)valuePtr = 0;
          v21 = CFNumberGetValue(v13, kCFNumberLongType, valuePtr);
          goto LABEL_58;
        case kCFNumberLongLongType:
          *(_QWORD *)valuePtr = 0;
          v21 = CFNumberGetValue(v13, kCFNumberLongLongType, valuePtr);
          goto LABEL_58;
        case kCFNumberFloatType:
          *(_DWORD *)valuePtr = 0;
          v21 = CFNumberGetValue(v13, kCFNumberFloatType, valuePtr);
LABEL_33:
          v22 = (uint64_t)*(float *)valuePtr;
          goto LABEL_59;
        case kCFNumberDoubleType:
          *(_QWORD *)valuePtr = 0;
          v21 = CFNumberGetValue(v13, kCFNumberDoubleType, valuePtr);
          goto LABEL_43;
        case kCFNumberCFIndexType:
          *(_QWORD *)valuePtr = 0;
          v21 = CFNumberGetValue(v13, kCFNumberCFIndexType, valuePtr);
          goto LABEL_58;
        case kCFNumberNSIntegerType:
          *(_QWORD *)valuePtr = 0;
          v21 = CFNumberGetValue(v13, kCFNumberNSIntegerType, valuePtr);
LABEL_58:
          v22 = *(_QWORD *)valuePtr;
          goto LABEL_59;
        case kCFNumberCGFloatType:
          *(_QWORD *)valuePtr = 0;
          v21 = CFNumberGetValue(v13, kCFNumberCGFloatType, valuePtr);
LABEL_43:
          v22 = (uint64_t)*(double *)valuePtr;
LABEL_59:
          if (v21)
            v18 = v22;
          else
            v18 = 0;
          if (v21)
            goto LABEL_63;
          goto LABEL_116;
        default:
          goto LABEL_116;
      }
    }
    v20 = CFBooleanGetTypeID();
    if (v20 != CFGetTypeID(v13))
    {
LABEL_116:
      v48 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v48, "Could not convert");
    }
    v18 = CFBooleanGetValue(v13);
LABEL_63:
    if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
      goto LABEL_108;
    if (*((char *)a1 + 23) >= 0)
      v29 = a1;
    else
      v29 = *(const UInt8 **)a1;
    if (*((char *)a2 + 23) >= 0)
      v30 = a2;
    else
      v30 = *(const UInt8 **)a2;
    memset(&v51, 0, sizeof(v51));
    v74 = &valuePtr[2];
    v75 = v73;
    if (v18 >= 0)
      v31 = v18;
    else
      v31 = -v18;
    MEMORY[0x1BCC95B24](&v56);
    v32 = std::locale::classic();
    if (std::locale::operator==(&v56, v32))
    {
      v33 = v73;
      do
      {
        *--v33 = (v31 % 0xA) | 0x30;
        v34 = v31 > 9;
        v31 /= 0xAuLL;
      }
      while (v34);
LABEL_101:
      std::locale::~locale(&v56);
      if (v18 < 0)
        *--v33 = 45;
      v74 = v33;
      v75 = v73;
      std::string::__assign_trivial[abi:ne180100]<char const*,char const*>(&v51, v33, v73, v73 - v33);
      if ((v51.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v45 = &v51;
      else
        v45 = (std::string *)v51.__r_.__value_.__r.__words[0];
      *(_DWORD *)buf = 136316162;
      *(_QWORD *)&buf[4] = "CFPrefHelper.h";
      v58 = 1024;
      v59 = 124;
      v60 = 2080;
      v61 = v29;
      v62 = 2080;
      v63 = v30;
      v64 = 2080;
      v65 = v45;
      _os_log_impl(&dword_1B5ED0000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "%25s:%-5d Preference '%s %s' retrieved as %s", buf, 0x30u);
      if (SHIBYTE(v51.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v51.__r_.__value_.__l.__data_);
LABEL_108:
      v19 = v18 & 0xFFFFFFFFFFFFFF00;
      CFRelease(v13);
      return v19 & 0xFFFFFFFFFFFFFF00 | v18;
    }
    v35 = std::locale::use_facet(&v56, MEMORY[0x1E0DE4CC0]);
    ((void (*)(void **__return_ptr))v35->__vftable[1].__on_zero_shared)(&__p);
    v36 = v55;
    if ((char)v55 < 0)
    {
      v37 = v54;
      if (!v54)
        goto LABEL_97;
      p_p = (char *)__p;
    }
    else
    {
      if (!v55)
        goto LABEL_97;
      v37 = v55;
      p_p = (char *)&__p;
    }
    if (*p_p > 0)
    {
      v39 = ((uint64_t (*)(const std::locale::facet *))v35->__vftable[1].~facet_0)(v35);
      v40 = 0;
      if ((v55 & 0x80u) == 0)
        v41 = &__p;
      else
        v41 = __p;
      LOBYTE(v42) = *v41;
      v33 = v73;
      v43 = *v41;
      do
      {
        if (!v43)
        {
          if (++v40 < v37)
          {
            v44 = (v55 & 0x80u) == 0 ? &__p : (void **)__p;
            v42 = *((char *)v44 + v40);
            if (v42 < 1)
              LOBYTE(v42) = 127;
          }
          *--v33 = v39;
          v43 = v42;
        }
        --v43;
        *--v33 = (v31 % 0xA) | 0x30;
        v34 = v31 > 9;
        v31 /= 0xAuLL;
      }
      while (v34);
      v36 = v55;
      goto LABEL_99;
    }
LABEL_97:
    v33 = v73;
    do
    {
      *--v33 = (v31 % 0xA) | 0x30;
      v34 = v31 > 9;
      v31 /= 0xAuLL;
    }
    while (v34);
LABEL_99:
    if ((v36 & 0x80) != 0)
      operator delete(__p);
    goto LABEL_101;
  }
  if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEBUG))
  {
    if (*((char *)a1 + 23) >= 0)
      v16 = a1;
    else
      v16 = *(const UInt8 **)a1;
    if (*((char *)a2 + 23) >= 0)
      v17 = a2;
    else
      v17 = *(const UInt8 **)a2;
    *(_DWORD *)valuePtr = 136315906;
    *(_QWORD *)&valuePtr[4] = "CFPrefHelper.h";
    v67 = 1024;
    v68 = 133;
    v69 = 2080;
    v70 = v16;
    v71 = 2080;
    v72 = v17;
    _os_log_impl(&dword_1B5ED0000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEBUG, "%25s:%-5d Preference: '%s %s' does not exist.", valuePtr, 0x26u);
  }
  LOBYTE(v18) = 0;
  v19 = 0;
  return v19 & 0xFFFFFFFFFFFFFF00 | v18;
}

void sub_1B6432AEC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,std::locale a22,__int128 buf,__int128 a24)
{
  uint64_t *v24;
  uint64_t *v25;
  uint64_t *v27;
  uint64_t *v28;

  if (a2)
  {
    if (a21 < 0)
      operator delete(__p);
    std::locale::~locale(&a22);
    __cxa_begin_catch(exception_object);
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      if (*((char *)v25 + 23) >= 0)
        v27 = v25;
      else
        v27 = (uint64_t *)*v25;
      if (*((char *)v24 + 23) >= 0)
        v28 = v24;
      else
        v28 = (uint64_t *)*v24;
      LODWORD(buf) = 136315906;
      *(_QWORD *)((char *)&buf + 4) = "CFPrefHelper.h";
      WORD6(buf) = 1024;
      *(_DWORD *)((char *)&buf + 14) = 128;
      WORD1(a24) = 2080;
      *(_QWORD *)((char *)&a24 + 4) = v27;
      WORD6(a24) = 2080;
      *(_QWORD *)((char *)&a24 + 14) = v28;
      _os_log_impl(&dword_1B5ED0000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d Failed to get Preference: '%s %s'. It exists, but is it the right type?", (uint8_t *)&buf, 0x26u);
    }
    __cxa_end_catch();
    if (!a15)
      JUMPOUT(0x1B64329DCLL);
    JUMPOUT(0x1B64329D4);
  }
  _Unwind_Resume(exception_object);
}

void std::vector<clsp::telemetry::Item>::push_back[abi:ne180100](void **a1, _QWORD *a2)
{
  unint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  unint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;

  v5 = a1[1];
  v4 = (unint64_t)a1[2];
  if ((unint64_t)v5 >= v4)
  {
    v7 = ((char *)v5 - (_BYTE *)*a1) >> 3;
    if ((unint64_t)(v7 + 1) >> 61)
      std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
    v8 = v4 - (_QWORD)*a1;
    v9 = v8 >> 2;
    if (v8 >> 2 <= (unint64_t)(v7 + 1))
      v9 = v7 + 1;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v10 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v10 = v9;
    if (v10)
      v10 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<SlidingWindowDTFT<float> *>>(v10);
    else
      v11 = 0;
    v12 = (_QWORD *)(v10 + 8 * v7);
    v13 = v10 + 8 * v11;
    *v12 = *a2;
    v6 = v12 + 1;
    v15 = (char *)*a1;
    v14 = (char *)a1[1];
    if (v14 != *a1)
    {
      do
      {
        v16 = *((_QWORD *)v14 - 1);
        v14 -= 8;
        *--v12 = v16;
      }
      while (v14 != v15);
      v14 = (char *)*a1;
    }
    *a1 = v12;
    a1[1] = v6;
    a1[2] = (void *)v13;
    if (v14)
      operator delete(v14);
  }
  else
  {
    *v5 = *a2;
    v6 = v5 + 1;
  }
  a1[1] = v6;
}

void clsp::telemetry::utils::PrintNumericVector_impl<std::__wrap_iter<unsigned int const*>,std::__wrap_iter<unsigned int const*>>(std::string *retstr, unsigned int **a2, _QWORD *a3)
{
  unsigned int *v4;
  std::string *v7;
  __int128 v8;
  std::string *p_p;
  std::string::size_type size;
  std::string *v11;
  __int128 v12;
  unsigned int *v13;
  std::string __p;
  std::string v15;
  std::string v16;

  v4 = (unsigned int *)(*a3 - 4);
  if (*a2 == v4)
  {
    std::to_string(retstr, *v4);
  }
  else
  {
    std::to_string(&v15, **a2);
    v7 = std::string::append(&v15, ", ", 2uLL);
    v8 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
    v16.__r_.__value_.__r.__words[2] = v7->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v16.__r_.__value_.__l.__data_ = v8;
    v7->__r_.__value_.__l.__size_ = 0;
    v7->__r_.__value_.__r.__words[2] = 0;
    v7->__r_.__value_.__r.__words[0] = 0;
    v13 = *a2 + 1;
    clsp::telemetry::utils::PrintNumericVector_impl<std::__wrap_iter<unsigned int const*>,std::__wrap_iter<unsigned int const*>&>(&__p, &v13, a3);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      p_p = &__p;
    else
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    else
      size = __p.__r_.__value_.__l.__size_;
    v11 = std::string::append(&v16, (const std::string::value_type *)p_p, size);
    v12 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
    retstr->__r_.__value_.__r.__words[2] = v11->__r_.__value_.__r.__words[2];
    *(_OWORD *)&retstr->__r_.__value_.__l.__data_ = v12;
    v11->__r_.__value_.__l.__size_ = 0;
    v11->__r_.__value_.__r.__words[2] = 0;
    v11->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v16.__r_.__value_.__l.__data_);
    if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v15.__r_.__value_.__l.__data_);
  }
}

void sub_1B6432F64(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a16 < 0)
    operator delete(__p);
  if (a28 < 0)
    operator delete(a23);
  if (a22 < 0)
    operator delete(a17);
  _Unwind_Resume(exception_object);
}

void FetchAndInterpretSpTS(uint64_t a1)
{
  const void *v2;
  unsigned __int8 *v3;
  unsigned __int8 *v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int *v7;
  unint64_t v8;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  NSObject **v13;
  NSObject *v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *v18;
  const std::locale::facet *v19;
  NSObject **v20;
  NSObject *v21;
  _BYTE *v22;
  _BYTE *v23;
  char *v24;
  uint64_t v25;
  _QWORD *v26;
  _QWORD *v27;
  char *v28;
  uint64_t v29;
  int64x2_t v30;
  _QWORD *v31;
  const void *v32;
  char *v33;
  uint64_t v34;
  const char *v35;
  const char *v36;
  const void *v37;
  uint64_t v38;
  int8x8_t *v39;
  int8x8_t v40;
  __int16 v41;
  unsigned int v42;
  __int16 v43;
  __int16 v44;
  __int16 v45;
  std::__shared_weak_count *v46;
  int8x8_t v47;
  unsigned int v48;
  unint64_t *p_shared_owners;
  int8x16_t *v50;
  int32x4_t v51;
  unint64_t v52;
  uint64_t v53;
  void *v54;
  _QWORD *v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  unint64_t v59;
  uint64_t v60;
  _QWORD *v61;
  unint64_t v62;
  void *v63;
  _QWORD *v64;
  _QWORD *v65;
  uint64_t v66;
  int64x2_t v67;
  char *v68;
  _QWORD *v69;
  _QWORD *v70;
  NSObject **v71;
  NSObject *v72;
  void **v73;
  std::runtime_error *exception;
  std::runtime_error *v75;
  NSObject **v76;
  NSObject *v77;
  _BYTE *v78;
  unsigned __int8 *v79;
  uint64_t v80;
  uint64_t v81;
  _QWORD *v82;
  unsigned __int8 *v83;
  void *v84[2];
  char v85;
  int64x2_t v86;
  char *v87;
  void *v88;
  uint64_t v89;
  char v90;
  _BYTE __p[18];
  __int16 v92;
  void **v93;
  _BYTE v94[32];
  char **v95;
  void *v96;
  char v97;
  uint64_t v98;
  CFTypeRef cf;
  unsigned __int8 *v100;
  uint64_t v101;
  void *v102;
  char v103;
  _QWORD v104[22];

  v104[19] = *MEMORY[0x1E0C80C00];
  v2 = (const void *)MGCopyAnswer();
  applesauce::CF::DataRef::DataRef((applesauce::CF::DataRef *)&cf, v2);
  if (!cf)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
  }
  applesauce::CF::convert_as<std::vector<unsigned char>,0>((uint64_t)&v88, cf);
  if (cf)
    CFRelease(cf);
  if (!v90)
  {
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&cf);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&cf, (uint64_t)"Failed to fetch MG data.\n", 25);
    v76 = (NSObject **)spp3Subsystem();
    if (v76)
    {
      v77 = *v76;
      if (!*v76)
      {
LABEL_98:
        *(_BYTE *)a1 = 0;
        *(_BYTE *)(a1 + 24) = 0;
        cf = (CFTypeRef)*MEMORY[0x1E0DE4F60];
        *(CFTypeRef *)((char *)&cf + *((_QWORD *)cf - 3)) = *(CFTypeRef *)(MEMORY[0x1E0DE4F60] + 24);
        v100 = (unsigned __int8 *)(MEMORY[0x1E0DE4FB8] + 16);
        if (v103 < 0)
          operator delete(v102);
        std::streambuf::~streambuf();
        std::ostream::~ostream();
        MEMORY[0x1BCC95BE4](v104);
        goto LABEL_101;
      }
    }
    else
    {
      v77 = MEMORY[0x1E0C81028];
    }
    if (os_log_type_enabled(v77, OS_LOG_TYPE_ERROR))
    {
      std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)&v100, __p);
      v78 = SBYTE3(v93) >= 0 ? __p : *(_BYTE **)__p;
      *(_DWORD *)v94 = 136315650;
      *(_QWORD *)&v94[4] = "AUSpeakerProtectionV3.cpp";
      *(_WORD *)&v94[12] = 1024;
      *(_DWORD *)&v94[14] = 266;
      *(_WORD *)&v94[18] = 2080;
      *(_QWORD *)&v94[20] = v78;
      _os_log_impl(&dword_1B5ED0000, v77, OS_LOG_TYPE_ERROR, "%25s:%-5d %s", v94, 0x1Cu);
      if (SBYTE3(v93) < 0)
        operator delete(*(void **)__p);
    }
    goto LABEL_98;
  }
  if (((v89 - (_QWORD)v88) & 3) != 0)
  {
    v75 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v75, "de-serialization data size mismatch");
  }
  v100 = 0;
  cf = 0;
  v101 = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int const*,unsigned int const*>(&cf, v88, (uint64_t)v88 + ((v89 - (_QWORD)v88) & 0xFFFFFFFFFFFFFFFCLL), (v89 - (uint64_t)v88) >> 2);
  v3 = (unsigned __int8 *)cf;
  v4 = v100;
  v101 = 0;
  cf = 0;
  v100 = 0;
  v5 = v4 - v3;
  if (v4 != v3)
  {
    v6 = v5 >> 2;
    if ((unint64_t)(v5 >> 2) <= 1)
      v6 = 1;
    v7 = (unsigned int *)v3;
    do
    {
      *v7 = bswap32(*v7);
      ++v7;
      --v6;
    }
    while (v6);
    if (cf)
    {
      v100 = (unsigned __int8 *)cf;
      operator delete((void *)cf);
    }
  }
  v8 = v3[3];
  if (v5 != (_DWORD)v8 * v3[2] + 4 || v5 != 20 * v3[3] + 4)
  {
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&cf);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&cf, (uint64_t)"Actual size of key structure (", 30);
    v10 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)" bytes) is either not what it describes itself to be (", 54);
    v11 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)" bytes), or what it ought to be (", 33);
    v12 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)" bytes).\n", 9);
    v13 = (NSObject **)spp3Subsystem();
    if (v13)
    {
      v14 = *v13;
      if (!*v13)
      {
LABEL_30:
        *(_BYTE *)a1 = 0;
        *(_BYTE *)(a1 + 24) = 0;
        cf = (CFTypeRef)*MEMORY[0x1E0DE4F60];
        *(CFTypeRef *)((char *)&cf + *((_QWORD *)cf - 3)) = *(CFTypeRef *)(MEMORY[0x1E0DE4F60] + 24);
        v100 = (unsigned __int8 *)(MEMORY[0x1E0DE4FB8] + 16);
        if (v103 < 0)
          operator delete(v102);
        std::streambuf::~streambuf();
        std::ostream::~ostream();
        goto LABEL_84;
      }
    }
    else
    {
      v14 = MEMORY[0x1E0C81028];
    }
    if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
    {
      std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)&v100, __p);
      v22 = SBYTE3(v93) >= 0 ? __p : *(_BYTE **)__p;
      *(_DWORD *)v94 = 136315650;
      *(_QWORD *)&v94[4] = "AUSpeakerProtectionV3.cpp";
      *(_WORD *)&v94[12] = 1024;
      *(_DWORD *)&v94[14] = 301;
      *(_WORD *)&v94[18] = 2080;
      *(_QWORD *)&v94[20] = v22;
      _os_log_impl(&dword_1B5ED0000, v14, OS_LOG_TYPE_ERROR, "%25s:%-5d %s", v94, 0x1Cu);
      if (SBYTE3(v93) < 0)
        operator delete(*(void **)__p);
    }
    goto LABEL_30;
  }
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&cf);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&cf, (uint64_t)"SpTSv", 5);
  v15 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)" key, describing ", 17);
  v16 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)", ", 2);
  v17 = (_QWORD *)std::ostream::operator<<();
  v18 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)"-byte speaker structures.", 25);
  std::ios_base::getloc((const std::ios_base *)((char *)v18 + *(_QWORD *)(*v18 - 24)));
  v19 = std::locale::use_facet((const std::locale *)v94, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v19->__vftable[2].~facet_0)(v19, 10);
  std::locale::~locale((std::locale *)v94);
  std::ostream::put();
  std::ostream::flush();
  v20 = (NSObject **)spp3Subsystem();
  if (!v20)
  {
    v21 = MEMORY[0x1E0C81028];
    goto LABEL_34;
  }
  v21 = *v20;
  if (*v20)
  {
LABEL_34:
    if (os_log_type_enabled(v21, OS_LOG_TYPE_DEBUG))
    {
      std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)&v100, __p);
      v23 = SBYTE3(v93) >= 0 ? __p : *(_BYTE **)__p;
      *(_DWORD *)v94 = 136315650;
      *(_QWORD *)&v94[4] = "AUSpeakerProtectionV3.cpp";
      *(_WORD *)&v94[12] = 1024;
      *(_DWORD *)&v94[14] = 312;
      *(_WORD *)&v94[18] = 2080;
      *(_QWORD *)&v94[20] = v23;
      _os_log_impl(&dword_1B5ED0000, v21, OS_LOG_TYPE_DEBUG, "%25s:%-5d %s", v94, 0x1Cu);
      if (SBYTE3(v93) < 0)
        operator delete(*(void **)__p);
    }
  }
  v86 = 0uLL;
  v87 = 0;
  if (!(_DWORD)v8)
  {
    v31 = (_QWORD *)*MEMORY[0x1E0DE4F60];
    v32 = *(const void **)(MEMORY[0x1E0DE4F60] + 24);
    goto LABEL_81;
  }
  v95 = &v87;
  v24 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<SlidingWindowDTFT<float> *>>(v8);
  v26 = (_QWORD *)v86.i64[1];
  v27 = (_QWORD *)v86.i64[0];
  v80 = a1;
  if (v86.i64[1] == v86.i64[0])
  {
    v30 = vdupq_n_s64(v86.u64[1]);
    v28 = v24;
  }
  else
  {
    v28 = v24;
    do
    {
      v29 = *--v26;
      *v26 = 0;
      *((_QWORD *)v28 - 1) = v29;
      v28 -= 8;
    }
    while (v26 != v27);
    v30 = v86;
  }
  v86.i64[0] = (uint64_t)v28;
  v86.i64[1] = (uint64_t)v24;
  *(int64x2_t *)&v94[8] = v30;
  v33 = v87;
  v87 = &v24[8 * v25];
  *(_QWORD *)&v94[24] = v33;
  *(_QWORD *)v94 = v30.i64[0];
  std::__split_buffer<std::unique_ptr<clsp::SpeakerCalibrationProperties>>::~__split_buffer((uint64_t)v94);
  v32 = *(const void **)(MEMORY[0x1E0DE4F60] + 24);
  v34 = 0;
  v79 = v3;
  v83 = v3 + 4;
  v35 = "\n";
  v81 = MEMORY[0x1E0DE4FB8] + 16;
  v82 = (_QWORD *)*MEMORY[0x1E0DE4F60];
  do
  {
    v36 = v35;
    v37 = v32;
    v38 = v34;
    v39 = (int8x8_t *)&v83[20 * v34];
    v40 = *v39;
    v41 = v39[1].i16[0];
    v42 = v39[1].u16[1];
    v43 = v39[1].i16[2];
    v44 = v39[1].i16[3];
    v45 = v39[2].i16[0];
    v46 = (std::__shared_weak_count *)operator new(0x30uLL);
    v47.i16[0] = v41;
    v47.i16[1] = v44;
    v47.i16[2] = v43;
    v47.i16[3] = v45;
    v48 = __rev16(v42);
    v46->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v46->__shared_owners_;
    v46->__shared_weak_owners_ = 0;
    v46->__vftable = (std::__shared_weak_count_vtbl *)&off_1E69DB478;
    *(float *)&v46[1].__vftable = (float)v48;
    *(float32x4_t *)((char *)&v46[1].std::__shared_count + 4) = vmulq_f32(vcvtq_f32_u32(vmovl_u16((uint16x4_t)vrev16_s8(v47))), (float32x4_t)xmmword_1B66A2450);
    *(_QWORD *)v94 = v46 + 1;
    *(_QWORD *)&v94[8] = v46;
    *(_QWORD *)__p = 0;
    *(_QWORD *)&__p[8] = 0;
    v50 = (int8x16_t *)operator new();
    v51 = (int32x4_t)vmulq_f32(vcvtq_f32_u32(vmovl_u16((uint16x4_t)vrev16_s8(v40))), (float32x4_t)xmmword_1B66A2460);
    *v50 = vextq_s8((int8x16_t)v51, (int8x16_t)vrev64q_s32(v51), 8uLL);
    v50[1].i16[0] = 0;
    *(int8x16_t *)((char *)&v50[2] + 8) = 0u;
    *(int8x16_t *)((char *)&v50[1] + 8) = 0u;
    std::shared_ptr<clsp::CLSPKernel_Logs>::operator=[abi:ne180100](&v50[1].i64[1], (uint64_t)&v46[1], (uint64_t)v46);
    std::shared_ptr<clsp::CLSPKernel_Logs>::operator=[abi:ne180100](&v50[2].i64[1], 0, 0);
    v84[0] = v50;
    v32 = v37;
    do
      v52 = __ldaxr(p_shared_owners);
    while (__stlxr(v52 - 1, p_shared_owners));
    if (!v52)
    {
      ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
      std::__shared_weak_count::__release_weak(v46);
    }
    v53 = v86.i64[1];
    if (v86.i64[1] >= (unint64_t)v87)
    {
      v57 = (v86.i64[1] - v86.i64[0]) >> 3;
      if ((unint64_t)(v57 + 1) >> 61)
        std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
      v35 = v36;
      v56 = v38;
      v58 = (uint64_t)&v87[-v86.i64[0]] >> 2;
      if (v58 <= v57 + 1)
        v58 = v57 + 1;
      if ((unint64_t)&v87[-v86.i64[0]] >= 0x7FFFFFFFFFFFFFF8)
        v59 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v59 = v58;
      v95 = &v87;
      v31 = v82;
      if (v59)
        v59 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<SlidingWindowDTFT<float> *>>(v59);
      else
        v60 = 0;
      v61 = (_QWORD *)(v59 + 8 * v57);
      v62 = v59 + 8 * v60;
      *(_QWORD *)&v94[24] = v62;
      v63 = v84[0];
      v84[0] = 0;
      *v61 = v63;
      v55 = v61 + 1;
      *(_QWORD *)&v94[16] = v61 + 1;
      v64 = (_QWORD *)v86.i64[1];
      v65 = (_QWORD *)v86.i64[0];
      if (v86.i64[1] == v86.i64[0])
      {
        v67 = vdupq_n_s64(v86.u64[1]);
      }
      else
      {
        do
        {
          v66 = *--v64;
          *v64 = 0;
          *--v61 = v66;
        }
        while (v64 != v65);
        v67 = v86;
        v55 = *(_QWORD **)&v94[16];
        v62 = *(_QWORD *)&v94[24];
      }
      v86.i64[0] = (uint64_t)v61;
      v86.i64[1] = (uint64_t)v55;
      *(int64x2_t *)&v94[8] = v67;
      v68 = v87;
      v87 = (char *)v62;
      *(_QWORD *)&v94[24] = v68;
      *(_QWORD *)v94 = v67.i64[0];
      std::__split_buffer<std::unique_ptr<clsp::SpeakerCalibrationProperties>>::~__split_buffer((uint64_t)v94);
    }
    else
    {
      v54 = v84[0];
      v84[0] = 0;
      *(_QWORD *)v86.i64[1] = v54;
      v55 = (_QWORD *)(v53 + 8);
      v35 = v36;
      v31 = v82;
      v56 = v38;
    }
    v86.i64[1] = (uint64_t)v55;
    std::unique_ptr<clsp::SpeakerCalibrationProperties>::reset[abi:ne180100]((uint64_t *)v84);
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v94);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v94, (uint64_t)"SpeakerCalibrationProperty Ch ", 30);
    v69 = (_QWORD *)std::ostream::operator<<();
    v70 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v69, (uint64_t)v35, 1);
    clsp::SpeakerCalibrationProperties::dump(*(_QWORD *)(v86.i64[1] - 8), v70);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v70, (uint64_t)v35, 1);
    v71 = (NSObject **)spp3Subsystem();
    if (v71)
    {
      v72 = *v71;
      if (!*v71)
        goto LABEL_77;
    }
    else
    {
      v72 = MEMORY[0x1E0C81028];
    }
    if (os_log_type_enabled(v72, OS_LOG_TYPE_DEBUG))
    {
      std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)&v94[8], v84);
      v73 = v84;
      if (v85 < 0)
        v73 = (void **)v84[0];
      *(_DWORD *)__p = 136315650;
      *(_QWORD *)&__p[4] = "AUSpeakerProtectionV3.cpp";
      *(_WORD *)&__p[12] = 1024;
      *(_DWORD *)&__p[14] = 331;
      v92 = 2080;
      v93 = v73;
      _os_log_impl(&dword_1B5ED0000, v72, OS_LOG_TYPE_DEBUG, "%25s:%-5d %s", __p, 0x1Cu);
      if (v85 < 0)
        operator delete(v84[0]);
    }
LABEL_77:
    *(_QWORD *)v94 = v31;
    *(_QWORD *)&v94[*(v31 - 3)] = v37;
    *(_QWORD *)&v94[8] = v81;
    if (v97 < 0)
      operator delete(v96);
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    MEMORY[0x1BCC95BE4](&v98);
    v34 = v56 + 1;
  }
  while (v34 != v8);
  v3 = v79;
  a1 = v80;
LABEL_81:
  *(int64x2_t *)a1 = v86;
  *(_QWORD *)(a1 + 16) = v87;
  v87 = 0;
  v86 = 0uLL;
  *(_BYTE *)(a1 + 24) = 1;
  *(_QWORD *)v94 = &v86;
  std::vector<std::unique_ptr<clsp::SpeakerCalibrationProperties>>::__destroy_vector::operator()[abi:ne180100]((void ***)v94);
  cf = v31;
  *(CFTypeRef *)((char *)&cf + *(v31 - 3)) = v32;
  v100 = (unsigned __int8 *)(MEMORY[0x1E0DE4FB8] + 16);
  if (v103 < 0)
    operator delete(v102);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
LABEL_84:
  MEMORY[0x1BCC95BE4](v104);
  operator delete(v3);
LABEL_101:
  if (v90)
  {
    if (v88)
      operator delete(v88);
  }
}

void sub_1B6433C74()
{
  std::ostringstream::~ostringstream((uint64_t)&STACK[0x210]);
  JUMPOUT(0x1B6433CF8);
}

void sub_1B6433C94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *__p, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *a32,uint64_t a33,uint64_t a34,char a35)
{
  void *v35;

  std::ostringstream::~ostringstream((uint64_t)&STACK[0x210]);
  operator delete(v35);
  if (a35)
  {
    if (a32)
      operator delete(a32);
  }
  _Unwind_Resume(a1);
}

void sub_1B6433CA8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,void **a37,uint64_t a38,uint64_t a39,uint64_t a40,char a41)
{
  std::shared_ptr<vp::services::Telephony_Utility>::~shared_ptr[abi:ne180100]((uint64_t)&a37);
  std::shared_ptr<vp::services::Telephony_Utility>::~shared_ptr[abi:ne180100]((uint64_t)&a41);
  a37 = (void **)&a29;
  std::vector<std::unique_ptr<clsp::SpeakerCalibrationProperties>>::__destroy_vector::operator()[abi:ne180100](&a37);
  JUMPOUT(0x1B6433CE8);
}

void sub_1B6433CC0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,void **a37)
{
  a37 = (void **)&a29;
  std::vector<std::unique_ptr<clsp::SpeakerCalibrationProperties>>::__destroy_vector::operator()[abi:ne180100](&a37);
  JUMPOUT(0x1B6433CE8);
}

void sub_1B6433CC8()
{
  uint64_t v0;

  std::ostringstream::~ostringstream(&v0);
  JUMPOUT(0x1B6433CD8);
}

void std::vector<std::unique_ptr<clsp::SpeakerCalibrationProperties>>::__vdeallocate(uint64_t **a1)
{
  uint64_t *v1;
  uint64_t *v3;
  uint64_t *v4;

  v1 = *a1;
  if (*a1)
  {
    v3 = a1[1];
    v4 = *a1;
    if (v3 != v1)
    {
      do
        std::unique_ptr<clsp::SpeakerCalibrationProperties>::reset[abi:ne180100](--v3);
      while (v3 != v1);
      v4 = *a1;
    }
    a1[1] = v1;
    operator delete(v4);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

void std::vector<std::unique_ptr<clsp::SpeakerCalibrationProperties>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  uint64_t *v2;
  uint64_t *v4;
  void *v5;

  v1 = *a1;
  v2 = (uint64_t *)**a1;
  if (v2)
  {
    v4 = (uint64_t *)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
        std::unique_ptr<clsp::SpeakerCalibrationProperties>::reset[abi:ne180100](--v4);
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void AUSpeakerProtectionV3::InitializeKernels(AUSpeakerProtectionV3 *this, double a2, unint64_t a3, BOOL *a4)
{
  double AppFloatValue;
  float v7;
  float **v8;
  NSObject **v9;
  NSObject *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  unint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  unint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  uint64_t v26;
  int64x2_t v27;
  uint64_t v28;
  NSObject **v29;
  NSObject *v30;
  double v31;
  uint64_t v32;
  float v33;
  NSObject **v34;
  NSObject *v35;
  double v36;
  float v37;
  uint64_t v38;
  NSObject **v39;
  NSObject *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t *v43;
  unint64_t v44;
  _QWORD *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t *v52;
  unint64_t v53;
  _QWORD *v54;
  _QWORD *v55;
  uint64_t v56;
  int64x2_t v57;
  uint64_t v58;
  NSObject **v59;
  NSObject *v60;
  double v61;
  uint64_t v62;
  float v63;
  NSObject **v64;
  NSObject *v65;
  int v66;
  unint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  float *v72;
  uint64_t v73;
  float *v74;
  float v76;
  NSObject **v78;
  NSObject *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  NSObject **v84;
  NSObject *v85;
  _BYTE *v86;
  uint64_t v87;
  uint64_t v88;
  NSObject **v89;
  NSObject *v90;
  _BYTE *v91;
  uint64_t v92;
  NSObject *v93;
  uint64_t v94;
  uint64_t v95;
  unint64_t v96;
  unint64_t v97;
  float *v98;
  float v99;
  float v100;
  uint64_t v101;
  float v102;
  float v103;
  uint64_t v104;
  ausdk::AUElement *v105;
  NSObject **v106;
  NSObject *v107;
  uint64_t v108;
  unint64_t v109;
  uint64_t v110;
  ausdk::AUElement *v111;
  uint64_t v112;
  double v113;
  float v114;
  NSObject **v115;
  NSObject *v116;
  uint64_t v117;
  ausdk::AUElement *v118;
  uint64_t v119;
  uint64_t v120;
  ausdk::AUElement *v121;
  uint64_t v122;
  uint64_t v123;
  ausdk::AUElement *v124;
  ausdk::AUElement **v125;
  uint64_t v126;
  ausdk::AUElement *v127;
  ausdk::AUElement **v128;
  uint64_t v129;
  ausdk::AUElement *v130;
  ausdk::AUElement **v131;
  float v132;
  uint64_t v133;
  ausdk::AUElement *v134;
  ausdk::AUElement **v135;
  uint64_t v136;
  ausdk::AUElement *v137;
  ausdk::AUElement **v138;
  float v139;
  uint64_t v140;
  ausdk::AUElement *v141;
  ausdk::AUElement **v142;
  float v143;
  uint64_t v144;
  ausdk::AUElement *v145;
  ausdk::AUElement **v146;
  float v147;
  uint64_t v148;
  ausdk::AUElement *v149;
  ausdk::AUElement **v150;
  float v151;
  uint64_t v152;
  ausdk::AUElement *v153;
  ausdk::AUElement **v154;
  uint64_t v155;
  ausdk::AUElement *v156;
  uint64_t v157;
  uint64_t v158;
  ausdk::AUElement *v159;
  uint64_t v160;
  uint64_t v161;
  ausdk::AUElement *v162;
  uint64_t v163;
  uint64_t v164;
  ausdk::AUElement *v165;
  uint64_t v166;
  uint64_t v167;
  ausdk::AUElement *v168;
  uint64_t v169;
  uint64_t v170;
  ausdk::AUElement *v171;
  uint64_t v172;
  uint64_t v173;
  ausdk::AUElement *v174;
  uint64_t v175;
  uint64_t v176;
  ausdk::AUElement *v177;
  uint64_t v178;
  uint64_t v179;
  ausdk::AUElement *v180;
  uint64_t v181;
  uint64_t v182;
  ausdk::AUElement *v183;
  uint64_t v184;
  uint64_t v185;
  ausdk::AUElement *v186;
  uint64_t v187;
  uint64_t v188;
  ausdk::AUElement *v189;
  uint64_t v190;
  uint64_t v191;
  ausdk::AUElement *v192;
  uint64_t v193;
  uint64_t v194;
  ausdk::AUElement *v195;
  uint64_t v196;
  uint64_t v197;
  ausdk::AUElement *v198;
  uint64_t v199;
  uint64_t v200;
  ausdk::AUElement *v201;
  ausdk::AUElement **v202;
  uint64_t v203;
  ausdk::AUElement *v204;
  uint64_t v205;
  float v206;
  uint64_t v207;
  ausdk::AUElement *v208;
  ausdk::AUElement **v209;
  int v210;
  uint64_t v211;
  ausdk::AUElement *v212;
  uint64_t v213;
  int v214;
  double v215;
  double v216;
  double v217;
  uint64_t v218;
  ausdk::AUElement *v219;
  uint64_t v220;
  uint64_t v221;
  ausdk::AUElement *v222;
  uint64_t v223;
  std::__shared_weak_count *v224;
  unint64_t *v225;
  unint64_t v226;
  float v227;
  uint64_t v228;
  ausdk::AUElement *v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  ausdk::AUElement *v233;
  uint64_t v234;
  float v235;
  uint64_t v236;
  ausdk::AUElement *v237;
  uint64_t v238;
  float v239;
  uint64_t v240;
  ausdk::AUElement *v241;
  uint64_t v242;
  float v243;
  uint64_t v244;
  ausdk::AUElement *v245;
  uint64_t v246;
  float v247;
  uint64_t v248;
  ausdk::AUElement *v249;
  uint64_t v250;
  float v251;
  uint64_t v252;
  ausdk::AUElement *v253;
  uint64_t v254;
  float v255;
  uint64_t v256;
  ausdk::AUElement *v257;
  uint64_t v258;
  float v259;
  uint64_t v260;
  uint64_t v261;
  int v262;
  uint64_t v263;
  unint64_t v264;
  uint64_t v265;
  ausdk::AUElement *v266;
  uint64_t v267;
  float v268;
  uint64_t v269;
  ausdk::AUElement *v270;
  uint64_t v271;
  unsigned int v272;
  NSObject **v273;
  NSObject *v274;
  NSObject **v275;
  NSObject *v276;
  uint64_t v277;
  ausdk::AUElement *v278;
  uint64_t v279;
  uint64_t v280;
  ausdk::AUElement *v281;
  uint64_t v282;
  unsigned int v283;
  uint64_t i;
  NSObject **v285;
  NSObject *v286;
  uint64_t v287;
  uint64_t v288;
  ausdk::AUElement *v289;
  uint64_t v290;
  uint64_t v291;
  ausdk::AUElement *v292;
  uint64_t v293;
  uint64_t v294;
  ausdk::AUElement *v295;
  uint64_t v296;
  uint64_t v297;
  ausdk::AUElement *v298;
  uint64_t v299;
  uint64_t v300;
  ausdk::AUElement *v301;
  uint64_t v302;
  uint64_t v303;
  ausdk::AUElement *v304;
  uint64_t v305;
  uint64_t v306;
  ausdk::AUElement *v307;
  uint64_t v308;
  uint64_t v309;
  ausdk::AUElement *v310;
  uint64_t v311;
  uint64_t v312;
  ausdk::AUElement *v313;
  uint64_t v314;
  uint64_t v315;
  ausdk::AUElement *v316;
  uint64_t v317;
  uint64_t v318;
  ausdk::AUElement *v319;
  uint64_t v320;
  uint64_t v321;
  ausdk::AUElement *v322;
  uint64_t v323;
  uint64_t v324;
  ausdk::AUElement *v325;
  uint64_t v326;
  uint64_t v327;
  ausdk::AUElement *v328;
  uint64_t v329;
  uint64_t v330;
  ausdk::AUElement *v331;
  uint64_t v332;
  uint64_t v333;
  ausdk::AUElement *v334;
  uint64_t v335;
  uint64_t v336;
  ausdk::AUElement *v337;
  uint64_t v338;
  unint64_t v339;
  uint64_t v340;
  ausdk::AUElement *v341;
  uint64_t v342;
  uint64_t v343;
  ausdk::AUElement *v344;
  uint64_t v345;
  uint64_t v346;
  ausdk::AUElement *v347;
  ausdk::AUElement **v348;
  uint64_t v349;
  ausdk::AUElement *v350;
  ausdk::AUElement **v351;
  uint64_t v352;
  ausdk::AUElement *v353;
  ausdk::AUElement **v354;
  uint64_t v355;
  ausdk::AUElement *v356;
  ausdk::AUElement **v357;
  uint64_t v358;
  ausdk::AUElement *v359;
  ausdk::AUElement **v360;
  uint64_t v361;
  ausdk::AUElement *v362;
  ausdk::AUElement **v363;
  uint64_t v364;
  ausdk::AUElement *v365;
  ausdk::AUElement **v366;
  uint64_t v367;
  ausdk::AUElement *v368;
  ausdk::AUElement **v369;
  uint64_t v370;
  ausdk::AUElement *v371;
  ausdk::AUElement **v372;
  uint64_t v373;
  ausdk::AUElement *v374;
  uint64_t v375;
  uint64_t v376;
  ausdk::AUElement *v377;
  uint64_t v378;
  uint64_t v379;
  ausdk::AUElement *v380;
  uint64_t v381;
  uint64_t v382;
  ausdk::AUElement *v383;
  uint64_t v384;
  uint64_t v385;
  ausdk::AUElement *v386;
  uint64_t v387;
  uint64_t v388;
  ausdk::AUElement *v389;
  uint64_t v390;
  uint64_t v391;
  ausdk::AUElement *v392;
  uint64_t v393;
  uint64_t v394;
  ausdk::AUElement *v395;
  uint64_t v396;
  uint64_t v397;
  ausdk::AUElement *v398;
  uint64_t v399;
  uint64_t v400;
  ausdk::AUElement *v401;
  uint64_t v402;
  uint64_t v403;
  ausdk::AUElement *v404;
  uint64_t v405;
  uint64_t v406;
  ausdk::AUElement *v407;
  uint64_t v408;
  uint64_t v409;
  ausdk::AUElement *v410;
  uint64_t v411;
  uint64_t v412;
  ausdk::AUElement *v413;
  uint64_t v414;
  uint64_t v415;
  ausdk::AUElement *v416;
  uint64_t v417;
  uint64_t v418;
  ausdk::AUElement *v419;
  ausdk::AUElement **v420;
  uint64_t v421;
  ausdk::AUElement *v422;
  uint64_t v423;
  uint64_t v424;
  ausdk::AUElement *v425;
  ausdk::AUElement **v426;
  uint64_t v427;
  ausdk::AUElement *v428;
  uint64_t v429;
  float v430;
  uint64_t v431;
  ausdk::AUElement *v432;
  uint64_t v433;
  float v434;
  float v435;
  uint64_t v436;
  ausdk::AUElement *v437;
  uint64_t v438;
  float v439;
  uint64_t v440;
  ausdk::AUElement *v441;
  uint64_t v442;
  float v443;
  double v444;
  uint64_t v445;
  double v446;
  ausdk::AUElement *v447;
  uint64_t v448;
  float v449;
  uint64_t v450;
  ausdk::AUElement *v451;
  uint64_t v452;
  float v453;
  uint64_t v454;
  ausdk::AUElement *v455;
  uint64_t v456;
  float v457;
  uint64_t v458;
  ausdk::AUElement *v459;
  uint64_t v460;
  float v461;
  uint64_t v462;
  ausdk::AUElement *v463;
  uint64_t v464;
  float v465;
  uint64_t v466;
  ausdk::AUElement *v467;
  uint64_t v468;
  uint64_t v469;
  ausdk::AUElement *v470;
  uint64_t v471;
  unint64_t *v472;
  __int128 v473;
  __int128 v474;
  __int128 v475;
  __int128 v476;
  double v478;
  int v479;
  float v480;
  float v481;
  float v482;
  float v483;
  float v484;
  float v485;
  float v486;
  float v487;
  double v488;
  float v489;
  float v490;
  float v491;
  float v492;
  float v493;
  float v494;
  float v495;
  float v496;
  float v497;
  float v498;
  float v499;
  float v500;
  float v501;
  float v502;
  float v503;
  float v504;
  float v505;
  float v506;
  float v507;
  float v508;
  float v509;
  float v510;
  float v511;
  float v512;
  float v513;
  float v514;
  float v515;
  float v516;
  float v517;
  float v518;
  float v519;
  float v520;
  float v521;
  float v522;
  float v523;
  float v524;
  float v525;
  float v526;
  float v527;
  float v528;
  double v529;
  float v530;
  int v531;
  float Parameter;
  float v533;
  uint64_t v535;
  uint64_t v536;
  _BYTE __p[18];
  __int16 v538;
  signed int v539;
  __int16 v540;
  int v541;
  _BYTE v542[24];
  __int128 v543;
  __int128 v544;
  uint8_t buf[56];
  unint64_t v546;
  void *v547[2];
  char v548;
  _QWORD v549[22];

  v549[19] = *MEMORY[0x1E0C80C00];
  __p[0] = 0;
  AppFloatValue = CACFPreferencesGetAppFloatValue(CFSTR("clsp_srdc"), CFSTR("com.apple.coreaudio"), __p);
  if (!__p[0])
    goto LABEL_32;
  v7 = AppFloatValue;
  v8 = (float **)*((_QWORD *)this + 87);
  if (*((float ***)this + 88) == v8)
  {
    v11 = operator new();
    v12 = v11;
    *(_DWORD *)(v11 + 12) = 2143289344;
    *(_WORD *)(v11 + 16) = 0;
    *(_OWORD *)(v11 + 24) = 0u;
    *(_OWORD *)(v11 + 40) = 0u;
    *(_QWORD *)v542 = v11;
    *(float *)v11 = v7;
    *(_QWORD *)(v11 + 4) = 0x7FC0000041A00000;
    v13 = (uint64_t *)*((_QWORD *)this + 88);
    v14 = *((_QWORD *)this + 89);
    if ((unint64_t)v13 >= v14)
    {
      v16 = *((_QWORD *)this + 87);
      v17 = ((uint64_t)v13 - v16) >> 3;
      if ((unint64_t)(v17 + 1) >> 61)
        std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
      v18 = v14 - v16;
      v19 = v18 >> 2;
      if (v18 >> 2 <= (unint64_t)(v17 + 1))
        v19 = v17 + 1;
      if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFF8)
        v20 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v20 = v19;
      *(_QWORD *)&buf[32] = (char *)this + 712;
      if (v20)
        v20 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<SlidingWindowDTFT<float> *>>(v20);
      else
        v21 = 0;
      v22 = (uint64_t *)(v20 + 8 * v17);
      v23 = v20 + 8 * v21;
      *(_QWORD *)&buf[24] = v23;
      *(_QWORD *)v542 = 0;
      *v22 = v12;
      v15 = v22 + 1;
      *(_QWORD *)&buf[16] = v22 + 1;
      v24 = (_QWORD *)*((_QWORD *)this + 88);
      v25 = (_QWORD *)*((_QWORD *)this + 87);
      if (v24 == v25)
      {
        v27 = vdupq_n_s64((unint64_t)v24);
      }
      else
      {
        do
        {
          v26 = *--v24;
          *v24 = 0;
          *--v22 = v26;
        }
        while (v24 != v25);
        v27 = *(int64x2_t *)((char *)this + 696);
        v15 = *(_QWORD **)&buf[16];
        v23 = *(_QWORD *)&buf[24];
      }
      *((_QWORD *)this + 87) = v22;
      *((_QWORD *)this + 88) = v15;
      *(int64x2_t *)&buf[8] = v27;
      v28 = *((_QWORD *)this + 89);
      *((_QWORD *)this + 89) = v23;
      *(_QWORD *)&buf[24] = v28;
      *(_QWORD *)buf = v27.i64[0];
      std::__split_buffer<std::unique_ptr<clsp::SpeakerCalibrationProperties>>::~__split_buffer((uint64_t)buf);
    }
    else
    {
      *(_QWORD *)v542 = 0;
      *v13 = v11;
      v15 = v13 + 1;
    }
    *((_QWORD *)this + 88) = v15;
    v29 = (NSObject **)spp3Subsystem();
    if (v29)
    {
      v30 = *v29;
      if (!*v29)
      {
LABEL_31:
        std::unique_ptr<clsp::SpeakerCalibrationProperties>::reset[abi:ne180100]((uint64_t *)v542);
        goto LABEL_32;
      }
    }
    else
    {
      v30 = MEMORY[0x1E0C81028];
    }
    if (os_log_type_enabled(v30, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 136315650;
      *(_QWORD *)&buf[4] = "AUSpeakerProtectionV3.cpp";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 829;
      *(_WORD *)&buf[18] = 2048;
      *(double *)&buf[20] = v7;
      _os_log_impl(&dword_1B5ED0000, v30, OS_LOG_TYPE_DEBUG, "%25s:%-5d Override missing SpCl Property with defaults clsp_srdc %f", buf, 0x1Cu);
    }
    goto LABEL_31;
  }
  **v8 = v7;
  v9 = (NSObject **)spp3Subsystem();
  if (v9)
  {
    v10 = *v9;
    if (!*v9)
      goto LABEL_32;
  }
  else
  {
    v10 = MEMORY[0x1E0C81028];
  }
  if (os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 136315650;
    *(_QWORD *)&buf[4] = "AUSpeakerProtectionV3.cpp";
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = 822;
    *(_WORD *)&buf[18] = 2048;
    *(double *)&buf[20] = v7;
    _os_log_impl(&dword_1B5ED0000, v10, OS_LOG_TYPE_DEBUG, "%25s:%-5d Override SpCl Property with defaults clsp_srdc %f", buf, 0x1Cu);
  }
LABEL_32:
  __p[0] = 0;
  v31 = CACFPreferencesGetAppFloatValue(CFSTR("clsp_caltemp"), CFSTR("com.apple.coreaudio"), __p);
  if (__p[0])
  {
    v32 = *((_QWORD *)this + 87);
    if (*((_QWORD *)this + 88) != v32)
    {
      v33 = v31;
      *(float *)(*(_QWORD *)v32 + 4) = v33;
      v34 = (NSObject **)spp3Subsystem();
      if (v34)
      {
        v35 = *v34;
        if (!*v34)
          goto LABEL_40;
      }
      else
      {
        v35 = MEMORY[0x1E0C81028];
      }
      if (os_log_type_enabled(v35, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 136315650;
        *(_QWORD *)&buf[4] = "AUSpeakerProtectionV3.cpp";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 837;
        *(_WORD *)&buf[18] = 2048;
        *(double *)&buf[20] = v33;
        _os_log_impl(&dword_1B5ED0000, v35, OS_LOG_TYPE_DEBUG, "%25s:%-5d Override SpCl Property with defaults clsp_caltemp %f", buf, 0x1Cu);
      }
    }
  }
LABEL_40:
  if (*((_DWORD *)this + 158) < 2u)
    goto LABEL_80;
  __p[0] = 0;
  v36 = CACFPreferencesGetAppFloatValue(CFSTR("clsp_srdc_r"), CFSTR("com.apple.coreaudio"), __p);
  if (!__p[0])
    goto LABEL_72;
  v37 = v36;
  v38 = *((_QWORD *)this + 87);
  if ((unint64_t)(*((_QWORD *)this + 88) - v38) < 9)
  {
    v41 = operator new();
    v42 = v41;
    *(_DWORD *)(v41 + 12) = 2143289344;
    *(_WORD *)(v41 + 16) = 0;
    *(_OWORD *)(v41 + 24) = 0u;
    *(_OWORD *)(v41 + 40) = 0u;
    *(_QWORD *)v542 = v41;
    *(float *)v41 = v37;
    *(_QWORD *)(v41 + 4) = 0x7FC0000041A00000;
    v43 = (uint64_t *)*((_QWORD *)this + 88);
    v44 = *((_QWORD *)this + 89);
    if ((unint64_t)v43 >= v44)
    {
      v46 = *((_QWORD *)this + 87);
      v47 = ((uint64_t)v43 - v46) >> 3;
      if ((unint64_t)(v47 + 1) >> 61)
        std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
      v48 = v44 - v46;
      v49 = v48 >> 2;
      if (v48 >> 2 <= (unint64_t)(v47 + 1))
        v49 = v47 + 1;
      if ((unint64_t)v48 >= 0x7FFFFFFFFFFFFFF8)
        v50 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v50 = v49;
      *(_QWORD *)&buf[32] = (char *)this + 712;
      if (v50)
        v50 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<SlidingWindowDTFT<float> *>>(v50);
      else
        v51 = 0;
      v52 = (uint64_t *)(v50 + 8 * v47);
      v53 = v50 + 8 * v51;
      *(_QWORD *)&buf[24] = v53;
      *(_QWORD *)v542 = 0;
      *v52 = v42;
      v45 = v52 + 1;
      *(_QWORD *)&buf[16] = v52 + 1;
      v54 = (_QWORD *)*((_QWORD *)this + 88);
      v55 = (_QWORD *)*((_QWORD *)this + 87);
      if (v54 == v55)
      {
        v57 = vdupq_n_s64((unint64_t)v54);
      }
      else
      {
        do
        {
          v56 = *--v54;
          *v54 = 0;
          *--v52 = v56;
        }
        while (v54 != v55);
        v57 = *(int64x2_t *)((char *)this + 696);
        v45 = *(_QWORD **)&buf[16];
        v53 = *(_QWORD *)&buf[24];
      }
      *((_QWORD *)this + 87) = v52;
      *((_QWORD *)this + 88) = v45;
      *(int64x2_t *)&buf[8] = v57;
      v58 = *((_QWORD *)this + 89);
      *((_QWORD *)this + 89) = v53;
      *(_QWORD *)&buf[24] = v58;
      *(_QWORD *)buf = v57.i64[0];
      std::__split_buffer<std::unique_ptr<clsp::SpeakerCalibrationProperties>>::~__split_buffer((uint64_t)buf);
    }
    else
    {
      *(_QWORD *)v542 = 0;
      *v43 = v41;
      v45 = v43 + 1;
    }
    *((_QWORD *)this + 88) = v45;
    v59 = (NSObject **)spp3Subsystem();
    if (v59)
    {
      v60 = *v59;
      if (!*v59)
      {
LABEL_71:
        std::unique_ptr<clsp::SpeakerCalibrationProperties>::reset[abi:ne180100]((uint64_t *)v542);
        goto LABEL_72;
      }
    }
    else
    {
      v60 = MEMORY[0x1E0C81028];
    }
    if (os_log_type_enabled(v60, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 136315650;
      *(_QWORD *)&buf[4] = "AUSpeakerProtectionV3.cpp";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 853;
      *(_WORD *)&buf[18] = 2048;
      *(double *)&buf[20] = v37;
      _os_log_impl(&dword_1B5ED0000, v60, OS_LOG_TYPE_DEBUG, "%25s:%-5d Override missing SpCl Property with defaults clsp_srdc_r %f", buf, 0x1Cu);
    }
    goto LABEL_71;
  }
  **(float **)(v38 + 8) = v37;
  v39 = (NSObject **)spp3Subsystem();
  if (v39)
  {
    v40 = *v39;
    if (!*v39)
      goto LABEL_72;
  }
  else
  {
    v40 = MEMORY[0x1E0C81028];
  }
  if (os_log_type_enabled(v40, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 136315650;
    *(_QWORD *)&buf[4] = "AUSpeakerProtectionV3.cpp";
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = 846;
    *(_WORD *)&buf[18] = 2048;
    *(double *)&buf[20] = v37;
    _os_log_impl(&dword_1B5ED0000, v40, OS_LOG_TYPE_DEBUG, "%25s:%-5d Override SpCl Property with defaults clsp_srdc_r %f", buf, 0x1Cu);
  }
LABEL_72:
  __p[0] = 0;
  v61 = CACFPreferencesGetAppFloatValue(CFSTR("clsp_caltemp_r"), CFSTR("com.apple.coreaudio"), __p);
  if (__p[0])
  {
    v62 = *((_QWORD *)this + 87);
    if (*((_QWORD *)this + 88) != v62)
    {
      v63 = v61;
      *(float *)(*(_QWORD *)(v62 + 8) + 4) = v63;
      v64 = (NSObject **)spp3Subsystem();
      if (v64)
      {
        v65 = *v64;
        if (!*v64)
          goto LABEL_80;
      }
      else
      {
        v65 = MEMORY[0x1E0C81028];
      }
      if (os_log_type_enabled(v65, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 136315650;
        *(_QWORD *)&buf[4] = "AUSpeakerProtectionV3.cpp";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 861;
        *(_WORD *)&buf[18] = 2048;
        *(double *)&buf[20] = v63;
        _os_log_impl(&dword_1B5ED0000, v65, OS_LOG_TYPE_DEBUG, "%25s:%-5d Override SpCl Property with defaults clsp_caltemp_r %f", buf, 0x1Cu);
      }
    }
  }
LABEL_80:
  if (*((_BYTE *)this + 533))
  {
    v66 = *((unsigned __int8 *)this + 529);
    *a4 = v66;
    if (v66 && a3)
    {
      v67 = 0;
      v68 = *MEMORY[0x1E0DE4F60];
      v69 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
      v70 = MEMORY[0x1E0DE4FB8] + 16;
      do
      {
        v71 = *((_QWORD *)this + 84);
        if (a3 == (*((_QWORD *)this + 85) - v71) >> 3)
        {
          v72 = *(float **)(v71 + 8 * v67);
          if (v72)
          {
            v73 = *((_QWORD *)this + 87);
            if (a3 == (*((_QWORD *)this + 88) - v73) >> 3)
            {
              v74 = *(float **)(v73 + 8 * v67);
              if (*v74 >= v72[5] && *v74 <= v72[6])
              {
                v76 = v74[1];
                if (v76 >= v72[7] && v76 <= v72[8])
                {
                  v92 = spp3Subsystem();
                  if (v92)
                  {
                    if ((*(_BYTE *)(v92 + 8) & 1) != 0)
                    {
                      v93 = *(NSObject **)v92;
                      if (*(_QWORD *)v92)
                      {
                        if (os_log_type_enabled(*(os_log_t *)v92, OS_LOG_TYPE_DEBUG))
                        {
                          v94 = (*((_QWORD *)this + 85) - *((_QWORD *)this + 84)) >> 3;
                          v95 = (*((_QWORD *)this + 88) - *((_QWORD *)this + 87)) >> 3;
                          *(_DWORD *)buf = 136316418;
                          *(_QWORD *)&buf[4] = "AUSpeakerProtectionV3.cpp";
                          *(_WORD *)&buf[12] = 1024;
                          *(_DWORD *)&buf[14] = 888;
                          *(_WORD *)&buf[18] = 1024;
                          *(_DWORD *)&buf[20] = v67;
                          *(_WORD *)&buf[24] = 1024;
                          *(_DWORD *)&buf[26] = v94;
                          *(_WORD *)&buf[30] = 1024;
                          *(_DWORD *)&buf[32] = a3;
                          *(_WORD *)&buf[36] = 1024;
                          *(_DWORD *)&buf[38] = v95;
                          _os_log_impl(&dword_1B5ED0000, v93, OS_LOG_TYPE_DEBUG, "%25s:%-5d Closed loop checks Ch %d passed: mCLParams.size=%d, nKern=%d, SpClProps.size=%d", buf, 0x2Au);
                        }
                      }
                    }
                  }
                  goto LABEL_133;
                }
              }
            }
          }
        }
        v78 = (NSObject **)spp3Subsystem();
        if (v78)
        {
          v79 = *v78;
          if (!*v78)
            goto LABEL_102;
        }
        else
        {
          v79 = MEMORY[0x1E0C81028];
        }
        if (os_log_type_enabled(v79, OS_LOG_TYPE_DEFAULT))
        {
          v80 = (*((_QWORD *)this + 85) - *((_QWORD *)this + 84)) >> 3;
          v81 = (*((_QWORD *)this + 88) - *((_QWORD *)this + 87)) >> 3;
          *(_DWORD *)buf = 136316162;
          *(_QWORD *)&buf[4] = "AUSpeakerProtectionV3.cpp";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = 891;
          *(_WORD *)&buf[18] = 1024;
          *(_DWORD *)&buf[20] = v80;
          *(_WORD *)&buf[24] = 1024;
          *(_DWORD *)&buf[26] = a3;
          *(_WORD *)&buf[30] = 1024;
          *(_DWORD *)&buf[32] = v81;
          _os_log_impl(&dword_1B5ED0000, v79, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Closed loop checks failed: mCLParams.size=%d, nKern=%d, SpClProps.size=%d", buf, 0x24u);
        }
LABEL_102:
        v82 = *((_QWORD *)this + 84);
        if (a3 != (*((_QWORD *)this + 85) - v82) >> 3 || !*(_QWORD *)(v82 + 8 * v67))
          goto LABEL_117;
        std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)buf);
        v83 = *((_QWORD *)this + 84);
        if (v67 >= (*((_QWORD *)this + 85) - v83) >> 3)
          std::vector<std::vector<float>>::__throw_out_of_range[abi:ne180100]();
        clsp::ClosedLoopParameters::dump(*(_QWORD *)(v83 + 8 * v67), buf);
        v84 = (NSObject **)spp3Subsystem();
        if (!v84)
        {
          v85 = MEMORY[0x1E0C81028];
LABEL_109:
          if (os_log_type_enabled(v85, OS_LOG_TYPE_DEBUG))
          {
            std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)&buf[8], __p);
            v86 = __p;
            if (v539 < 0)
              v86 = *(_BYTE **)__p;
            *(_DWORD *)v542 = 136315906;
            *(_QWORD *)&v542[4] = "AUSpeakerProtectionV3.cpp";
            *(_WORD *)&v542[12] = 1024;
            *(_DWORD *)&v542[14] = 895;
            *(_WORD *)&v542[18] = 1024;
            *(_DWORD *)&v542[20] = v67;
            LOWORD(v543) = 2080;
            *(_QWORD *)((char *)&v543 + 2) = v86;
            _os_log_impl(&dword_1B5ED0000, v85, OS_LOG_TYPE_DEBUG, "%25s:%-5d Ch %d, CLParams:\n%s", v542, 0x22u);
            if (SHIBYTE(v539) < 0)
              operator delete(*(void **)__p);
          }
          goto LABEL_114;
        }
        v85 = *v84;
        if (*v84)
          goto LABEL_109;
LABEL_114:
        *(_QWORD *)buf = v68;
        *(_QWORD *)&buf[*(_QWORD *)(v68 - 24)] = v69;
        *(_QWORD *)&buf[8] = v70;
        if (v548 < 0)
          operator delete(v547[1]);
        std::streambuf::~streambuf();
        std::ostream::~ostream();
        MEMORY[0x1BCC95BE4](v549);
LABEL_117:
        v87 = *((_QWORD *)this + 87);
        if (a3 == (*((_QWORD *)this + 88) - v87) >> 3 && *(_QWORD *)(v87 + 8 * v67))
        {
          std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)buf);
          v88 = *((_QWORD *)this + 87);
          if (v67 >= (*((_QWORD *)this + 88) - v88) >> 3)
            std::vector<std::vector<float>>::__throw_out_of_range[abi:ne180100]();
          clsp::SpeakerCalibrationProperties::dump(*(_QWORD *)(v88 + 8 * v67), buf);
          v89 = (NSObject **)spp3Subsystem();
          if (v89)
          {
            v90 = *v89;
            if (!*v89)
            {
LABEL_129:
              *(_QWORD *)buf = v68;
              *(_QWORD *)&buf[*(_QWORD *)(v68 - 24)] = v69;
              *(_QWORD *)&buf[8] = MEMORY[0x1E0DE4FB8] + 16;
              if (v548 < 0)
                operator delete(v547[1]);
              std::streambuf::~streambuf();
              std::ostream::~ostream();
              MEMORY[0x1BCC95BE4](v549);
              goto LABEL_132;
            }
          }
          else
          {
            v90 = MEMORY[0x1E0C81028];
          }
          if (os_log_type_enabled(v90, OS_LOG_TYPE_DEBUG))
          {
            std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)&buf[8], __p);
            v91 = __p;
            if (v539 < 0)
              v91 = *(_BYTE **)__p;
            *(_DWORD *)v542 = 136315906;
            *(_QWORD *)&v542[4] = "AUSpeakerProtectionV3.cpp";
            *(_WORD *)&v542[12] = 1024;
            *(_DWORD *)&v542[14] = 900;
            *(_WORD *)&v542[18] = 1024;
            *(_DWORD *)&v542[20] = v67;
            LOWORD(v543) = 2080;
            *(_QWORD *)((char *)&v543 + 2) = v91;
            _os_log_impl(&dword_1B5ED0000, v90, OS_LOG_TYPE_DEBUG, "%25s:%-5d Ch %d, SpClProps:\n%s", v542, 0x22u);
            if (SHIBYTE(v539) < 0)
              operator delete(*(void **)__p);
          }
          goto LABEL_129;
        }
LABEL_132:
        *a4 = 0;
LABEL_133:
        ++v67;
      }
      while (a3 != v67);
    }
  }
  else
  {
    *a4 = 0;
  }
  if (a3)
  {
    v96 = 0;
    v97 = 0;
    do
    {
      if (!*a4)
      {
        v106 = (NSObject **)spp3Subsystem();
        if (v106)
        {
          v107 = *v106;
          if (!*v106)
          {
LABEL_154:
            *(_DWORD *)v542 = 0;
            *(_OWORD *)&v542[8] = 0u;
            v543 = 0u;
            v544 = 0u;
            v109 = *((unsigned int *)this + 84);
            memset(buf, 0, 52);
            v546 = v109;
            *(_OWORD *)v547 = xmmword_1B66A2420;
            v110 = *((_QWORD *)this + 104);
            if (v110)
            {
              v111 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)v110 + 32))(v110, v97);
            }
            else
            {
              v112 = *((_QWORD *)this + 101);
              if (v96 >= (*((_QWORD *)this + 102) - v112) >> 3)
                v111 = 0;
              else
                v111 = *(ausdk::AUElement **)(v112 + 8 * v96);
            }
            Parameter = ausdk::AUElement::GetParameter(v111, 0);
            v120 = *((_QWORD *)this + 104);
            if (v120)
            {
              v121 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)v120 + 32))(v120, v97);
            }
            else
            {
              v122 = *((_QWORD *)this + 101);
              if (v96 >= (*((_QWORD *)this + 102) - v122) >> 3)
                v121 = 0;
              else
                v121 = *(ausdk::AUElement **)(v122 + 8 * v96);
            }
            v530 = ausdk::AUElement::GetParameter(v121, 1u);
            v123 = *((_QWORD *)this + 9);
            if (v123)
            {
              v124 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v123 + 32))(v123, 0);
            }
            else
            {
              v125 = (ausdk::AUElement **)*((_QWORD *)this + 6);
              if (*((ausdk::AUElement ***)this + 7) == v125)
                v124 = 0;
              else
                v124 = *v125;
            }
            v528 = ausdk::AUElement::GetParameter(v124, 4u);
            v126 = *((_QWORD *)this + 9);
            if (v126)
            {
              v127 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v126 + 32))(v126, 0);
            }
            else
            {
              v128 = (ausdk::AUElement **)*((_QWORD *)this + 6);
              if (*((ausdk::AUElement ***)this + 7) == v128)
                v127 = 0;
              else
                v127 = *v128;
            }
            v526 = ausdk::AUElement::GetParameter(v127, 5u);
            v129 = *((_QWORD *)this + 9);
            if (v129)
            {
              v130 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v129 + 32))(v129, 0);
            }
            else
            {
              v131 = (ausdk::AUElement **)*((_QWORD *)this + 6);
              if (*((ausdk::AUElement ***)this + 7) == v131)
                v130 = 0;
              else
                v130 = *v131;
            }
            v132 = ausdk::AUElement::GetParameter(v130, 6u);
            v133 = *((_QWORD *)this + 9);
            if (v133)
            {
              v134 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v133 + 32))(v133, 0);
            }
            else
            {
              v135 = (ausdk::AUElement **)*((_QWORD *)this + 6);
              if (*((ausdk::AUElement ***)this + 7) == v135)
                v134 = 0;
              else
                v134 = *v135;
            }
            v524 = ausdk::AUElement::GetParameter(v134, 7u);
            v136 = *((_QWORD *)this + 9);
            if (v136)
            {
              v137 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v136 + 32))(v136, 0);
            }
            else
            {
              v138 = (ausdk::AUElement **)*((_QWORD *)this + 6);
              if (*((ausdk::AUElement ***)this + 7) == v138)
                v137 = 0;
              else
                v137 = *v138;
            }
            v139 = ausdk::AUElement::GetParameter(v137, 2u);
            v140 = *((_QWORD *)this + 9);
            if (v140)
            {
              v141 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v140 + 32))(v140, 0);
            }
            else
            {
              v142 = (ausdk::AUElement **)*((_QWORD *)this + 6);
              if (*((ausdk::AUElement ***)this + 7) == v142)
                v141 = 0;
              else
                v141 = *v142;
            }
            v143 = ausdk::AUElement::GetParameter(v141, 3u);
            v144 = *((_QWORD *)this + 9);
            if (v144)
            {
              v145 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v144 + 32))(v144, 0);
            }
            else
            {
              v146 = (ausdk::AUElement **)*((_QWORD *)this + 6);
              if (*((ausdk::AUElement ***)this + 7) == v146)
                v145 = 0;
              else
                v145 = *v146;
            }
            v147 = ausdk::AUElement::GetParameter(v145, 9u);
            v148 = *((_QWORD *)this + 9);
            if (v148)
            {
              v149 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v148 + 32))(v148, 0);
            }
            else
            {
              v150 = (ausdk::AUElement **)*((_QWORD *)this + 6);
              if (*((ausdk::AUElement ***)this + 7) == v150)
                v149 = 0;
              else
                v149 = *v150;
            }
            v151 = ausdk::AUElement::GetParameter(v149, 0xAu);
            v152 = *((_QWORD *)this + 9);
            if (v152)
            {
              v153 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v152 + 32))(v152, 0);
            }
            else
            {
              v154 = (ausdk::AUElement **)*((_QWORD *)this + 6);
              if (*((ausdk::AUElement ***)this + 7) == v154)
                v153 = 0;
              else
                v153 = *v154;
            }
            v522 = ausdk::AUElement::GetParameter(v153, 0xBu);
            v155 = *((_QWORD *)this + 104);
            if (v155)
            {
              v156 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)v155 + 32))(v155, v97);
            }
            else
            {
              v157 = *((_QWORD *)this + 101);
              if (v96 >= (*((_QWORD *)this + 102) - v157) >> 3)
                v156 = 0;
              else
                v156 = *(ausdk::AUElement **)(v157 + 8 * v96);
            }
            v520 = ausdk::AUElement::GetParameter(v156, 9u);
            v158 = *((_QWORD *)this + 104);
            if (v158)
            {
              v159 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)v158 + 32))(v158, v97);
            }
            else
            {
              v160 = *((_QWORD *)this + 101);
              if (v96 >= (*((_QWORD *)this + 102) - v160) >> 3)
                v159 = 0;
              else
                v159 = *(ausdk::AUElement **)(v160 + 8 * v96);
            }
            v518 = ausdk::AUElement::GetParameter(v159, 0xAu);
            v161 = *((_QWORD *)this + 104);
            if (v161)
            {
              v162 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)v161 + 32))(v161, v97);
            }
            else
            {
              v163 = *((_QWORD *)this + 101);
              if (v96 >= (*((_QWORD *)this + 102) - v163) >> 3)
                v162 = 0;
              else
                v162 = *(ausdk::AUElement **)(v163 + 8 * v96);
            }
            v516 = ausdk::AUElement::GetParameter(v162, 0xBu);
            v164 = *((_QWORD *)this + 104);
            if (v164)
            {
              v165 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)v164 + 32))(v164, v97);
            }
            else
            {
              v166 = *((_QWORD *)this + 101);
              if (v96 >= (*((_QWORD *)this + 102) - v166) >> 3)
                v165 = 0;
              else
                v165 = *(ausdk::AUElement **)(v166 + 8 * v96);
            }
            v514 = ausdk::AUElement::GetParameter(v165, 0xCu);
            v167 = *((_QWORD *)this + 104);
            if (v167)
            {
              v168 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)v167 + 32))(v167, v97);
            }
            else
            {
              v169 = *((_QWORD *)this + 101);
              if (v96 >= (*((_QWORD *)this + 102) - v169) >> 3)
                v168 = 0;
              else
                v168 = *(ausdk::AUElement **)(v169 + 8 * v96);
            }
            v512 = ausdk::AUElement::GetParameter(v168, 0xDu);
            v170 = *((_QWORD *)this + 104);
            if (v170)
            {
              v171 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)v170 + 32))(v170, v97);
            }
            else
            {
              v172 = *((_QWORD *)this + 101);
              if (v96 >= (*((_QWORD *)this + 102) - v172) >> 3)
                v171 = 0;
              else
                v171 = *(ausdk::AUElement **)(v172 + 8 * v96);
            }
            v510 = ausdk::AUElement::GetParameter(v171, 0xEu);
            v173 = *((_QWORD *)this + 104);
            if (v173)
            {
              v174 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)v173 + 32))(v173, v97);
            }
            else
            {
              v175 = *((_QWORD *)this + 101);
              if (v96 >= (*((_QWORD *)this + 102) - v175) >> 3)
                v174 = 0;
              else
                v174 = *(ausdk::AUElement **)(v175 + 8 * v96);
            }
            v508 = ausdk::AUElement::GetParameter(v174, 0xFu);
            v176 = *((_QWORD *)this + 104);
            if (v176)
            {
              v177 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)v176 + 32))(v176, v97);
            }
            else
            {
              v178 = *((_QWORD *)this + 101);
              if (v96 >= (*((_QWORD *)this + 102) - v178) >> 3)
                v177 = 0;
              else
                v177 = *(ausdk::AUElement **)(v178 + 8 * v96);
            }
            v506 = ausdk::AUElement::GetParameter(v177, 0x10u);
            v179 = *((_QWORD *)this + 104);
            if (v179)
            {
              v180 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)v179 + 32))(v179, v97);
            }
            else
            {
              v181 = *((_QWORD *)this + 101);
              if (v96 >= (*((_QWORD *)this + 102) - v181) >> 3)
                v180 = 0;
              else
                v180 = *(ausdk::AUElement **)(v181 + 8 * v96);
            }
            v504 = ausdk::AUElement::GetParameter(v180, 0x11u);
            v182 = *((_QWORD *)this + 104);
            if (v182)
            {
              v183 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)v182 + 32))(v182, v97);
            }
            else
            {
              v184 = *((_QWORD *)this + 101);
              if (v96 >= (*((_QWORD *)this + 102) - v184) >> 3)
                v183 = 0;
              else
                v183 = *(ausdk::AUElement **)(v184 + 8 * v96);
            }
            v502 = ausdk::AUElement::GetParameter(v183, 0x12u);
            v185 = *((_QWORD *)this + 104);
            if (v185)
            {
              v186 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)v185 + 32))(v185, v97);
            }
            else
            {
              v187 = *((_QWORD *)this + 101);
              if (v96 >= (*((_QWORD *)this + 102) - v187) >> 3)
                v186 = 0;
              else
                v186 = *(ausdk::AUElement **)(v187 + 8 * v96);
            }
            v500 = ausdk::AUElement::GetParameter(v186, 0x13u);
            v188 = *((_QWORD *)this + 104);
            if (v188)
            {
              v189 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)v188 + 32))(v188, v97);
            }
            else
            {
              v190 = *((_QWORD *)this + 101);
              if (v96 >= (*((_QWORD *)this + 102) - v190) >> 3)
                v189 = 0;
              else
                v189 = *(ausdk::AUElement **)(v190 + 8 * v96);
            }
            v498 = ausdk::AUElement::GetParameter(v189, 2u);
            v191 = *((_QWORD *)this + 104);
            if (v191)
            {
              v192 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)v191 + 32))(v191, v97);
            }
            else
            {
              v193 = *((_QWORD *)this + 101);
              if (v96 >= (*((_QWORD *)this + 102) - v193) >> 3)
                v192 = 0;
              else
                v192 = *(ausdk::AUElement **)(v193 + 8 * v96);
            }
            v496 = ausdk::AUElement::GetParameter(v192, 3u);
            v194 = *((_QWORD *)this + 104);
            if (v194)
            {
              v195 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)v194 + 32))(v194, v97);
            }
            else
            {
              v196 = *((_QWORD *)this + 101);
              if (v96 >= (*((_QWORD *)this + 102) - v196) >> 3)
                v195 = 0;
              else
                v195 = *(ausdk::AUElement **)(v196 + 8 * v96);
            }
            v494 = ausdk::AUElement::GetParameter(v195, 4u);
            v197 = *((_QWORD *)this + 104);
            if (v197)
            {
              v198 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)v197 + 32))(v197, v97);
            }
            else
            {
              v199 = *((_QWORD *)this + 101);
              if (v96 >= (*((_QWORD *)this + 102) - v199) >> 3)
                v198 = 0;
              else
                v198 = *(ausdk::AUElement **)(v199 + 8 * v96);
            }
            v492 = ausdk::AUElement::GetParameter(v198, 5u);
            v200 = *((_QWORD *)this + 9);
            if (v200)
            {
              v201 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v200 + 32))(v200, 0);
            }
            else
            {
              v202 = (ausdk::AUElement **)*((_QWORD *)this + 6);
              if (*((ausdk::AUElement ***)this + 7) == v202)
                v201 = 0;
              else
                v201 = *v202;
            }
            v490 = ausdk::AUElement::GetParameter(v201, 8u);
            v203 = *((_QWORD *)this + 104);
            if (v203)
            {
              v204 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)v203 + 32))(v203, v97);
            }
            else
            {
              v205 = *((_QWORD *)this + 101);
              if (v96 >= (*((_QWORD *)this + 102) - v205) >> 3)
                v204 = 0;
              else
                v204 = *(ausdk::AUElement **)(v205 + 8 * v96);
            }
            v206 = ausdk::AUElement::GetParameter(v204, 6u);
            v207 = *((_QWORD *)this + 9);
            if (v207)
            {
              v208 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v207 + 32))(v207, 0);
            }
            else
            {
              v209 = (ausdk::AUElement **)*((_QWORD *)this + 6);
              if (*((ausdk::AUElement ***)this + 7) == v209)
                v208 = 0;
              else
                v208 = *v209;
            }
            v210 = ausdk::AUElement::GetParameter(v208, 0xEu);
            v211 = *((_QWORD *)this + 104);
            if (v211)
            {
              v212 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)v211 + 32))(v211, v97);
            }
            else
            {
              v213 = *((_QWORD *)this + 101);
              if (v96 >= (*((_QWORD *)this + 102) - v213) >> 3)
                v212 = 0;
              else
                v212 = *(ausdk::AUElement **)(v213 + 8 * v96);
            }
            v214 = ausdk::AUElement::GetParameter(v212, 9u);
            v488 = v132;
            v215 = v206;
            v216 = __exp10(-2.0);
            v217 = __exp10(-2.0);
            v536 = 0;
            v535 = 0;
            *((double *)&v473 + 1) = v510;
            *(double *)&v473 = v512;
            *((_QWORD *)&v475 + 1) = 0x3F847AE140000000;
            *(_QWORD *)&v475 = 0x3FE0000000000000;
            clsp::CLSPKernel_v5PtrFactory(__p, v97, v109, 1, (__int128 *)v542, (__int128 *)buf, &v536, 0, a2, Parameter, v530, v528, v526, v488, v524, v139, COERCE__INT64(v143), v147, v151,
              v522,
              v520,
              COERCE__INT64(v518),
              COERCE__INT64(v516),
              COERCE__INT64(v514),
              v473,
              v508,
              v506,
              v504,
              COERCE__INT64(v502),
              v500,
              COERCE__INT64(v498),
              COERCE__INT64(v496),
              v494,
              COERCE__INT64(v492),
              v490,
              v215,
              v210,
              v214,
              20.0,
              0x4071F5C28F5C28F6,
              0x403E000000000000,
              60.0,
              v216,
              v217,
              100.0,
              100.0,
              v475,
              0x3EE4F8B580000000,
              0);
            std::unique_ptr<clsp::SpeakerCalibrationProperties>::reset[abi:ne180100](&v535);
            std::vector<std::shared_ptr<clsp::CLSPKernel_v5>>::push_back[abi:ne180100]((char **)this + 105, (__int128 *)__p);
            std::vector<std::shared_ptr<clsp::CLSPKernel_v5>>::push_back[abi:ne180100]((char **)(*((_QWORD *)this + 108) + 24 * *(unsigned int *)(*((_QWORD *)this + 127) + 4 * v96)), (__int128 *)__p);
            v218 = *((_QWORD *)this + 104);
            if (v218)
            {
              v219 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)v218 + 32))(v218, v97);
            }
            else
            {
              v220 = *((_QWORD *)this + 101);
              if (v96 >= (*((_QWORD *)this + 102) - v220) >> 3)
                v219 = 0;
              else
                v219 = *(ausdk::AUElement **)(v220 + 8 * v96);
            }
            ausdk::AUElement::SetParameter(v219, 0x15u, 0.0, 0);
            v221 = *((_QWORD *)this + 104);
            if (v221)
            {
              v222 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)v221 + 32))(v221, v97);
            }
            else
            {
              v223 = *((_QWORD *)this + 101);
              if (v96 >= (*((_QWORD *)this + 102) - v223) >> 3)
                v222 = 0;
              else
                v222 = *(ausdk::AUElement **)(v223 + 8 * v96);
            }
            ausdk::AUElement::SetParameter(v222, 0x16u, 0.0, 0);
            v224 = *(std::__shared_weak_count **)&__p[8];
            if (!*(_QWORD *)&__p[8])
              goto LABEL_710;
            v225 = (unint64_t *)(*(_QWORD *)&__p[8] + 8);
            do
              v226 = __ldaxr(v225);
            while (__stlxr(v226 - 1, v225));
            goto LABEL_708;
          }
        }
        else
        {
          v107 = MEMORY[0x1E0C81028];
        }
        if (os_log_type_enabled(v107, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)buf = 136315650;
          *(_QWORD *)&buf[4] = "AUSpeakerProtectionV3.cpp";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = 1044;
          *(_WORD *)&buf[18] = 1024;
          *(_DWORD *)&buf[20] = v97;
          _os_log_impl(&dword_1B5ED0000, v107, OS_LOG_TYPE_DEBUG, "%25s:%-5d Ch %d, Using open loop kernel", buf, 0x18u);
        }
        goto LABEL_154;
      }
      v98 = *(float **)(*((_QWORD *)this + 87) + 8 * v96);
      v100 = *v98;
      v99 = v98[1];
      v101 = *(_QWORD *)(*((_QWORD *)this + 84) + 8 * v96);
      v102 = *(float *)(v101 + 12);
      v103 = *(float *)(v101 + 16);
      v104 = *((_QWORD *)this + 104);
      if (v104)
      {
        v105 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)v104 + 32))(v104, v97);
      }
      else
      {
        v108 = *((_QWORD *)this + 101);
        if (v96 >= (*((_QWORD *)this + 102) - v108) >> 3)
          v105 = 0;
        else
          v105 = *(ausdk::AUElement **)(v108 + 8 * v96);
      }
      v113 = v99;
      v114 = 1.0 / ((v99 + -20.0) * (v103 - v102) / 15.0 + v102);
      ausdk::AUElement::SetParameter(v105, 0x1Au, v114, 0);
      v115 = (NSObject **)spp3Subsystem();
      if (v115)
      {
        v116 = *v115;
        if (!*v115)
          goto LABEL_330;
      }
      else
      {
        v116 = MEMORY[0x1E0C81028];
      }
      if (os_log_type_enabled(v116, OS_LOG_TYPE_DEBUG))
      {
        v117 = *((_QWORD *)this + 104);
        if (v117)
        {
          v118 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)v117 + 32))(v117, v97);
        }
        else
        {
          v119 = *((_QWORD *)this + 101);
          if (v96 >= (*((_QWORD *)this + 102) - v119) >> 3)
            v118 = 0;
          else
            v118 = *(ausdk::AUElement **)(v119 + 8 * v96);
        }
        v227 = ausdk::AUElement::GetParameter(v118, 0x1Au);
        *(_DWORD *)buf = 136316418;
        *(_QWORD *)&buf[4] = "AUSpeakerProtectionV3.cpp";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 918;
        *(_WORD *)&buf[18] = 1024;
        *(_DWORD *)&buf[20] = v97;
        *(_WORD *)&buf[24] = 2048;
        *(double *)&buf[26] = v99;
        *(_WORD *)&buf[34] = 2048;
        *(double *)&buf[36] = v227;
        *(_WORD *)&buf[44] = 2048;
        *(double *)&buf[46] = v100;
        _os_log_impl(&dword_1B5ED0000, v116, OS_LOG_TYPE_DEBUG, "%25s:%-5d Ch %d, Using closed loop parameters refTemp=%f, invTempCo=%f, RebRef=%f", buf, 0x36u);
      }
LABEL_330:
      v228 = *((_QWORD *)this + 104);
      if (v228)
      {
        v229 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)v228 + 32))(v228, v97);
      }
      else
      {
        v230 = *((_QWORD *)this + 101);
        if (v96 >= (*((_QWORD *)this + 102) - v230) >> 3)
          v229 = 0;
        else
          v229 = *(ausdk::AUElement **)(v230 + 8 * v96);
      }
      v533 = ausdk::AUElement::GetParameter(v229, 0x14u);
      v231 = *((unsigned int *)this + 84);
      v232 = *((_QWORD *)this + 104);
      if (v232)
      {
        v233 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)v232 + 32))(v232, v97);
      }
      else
      {
        v234 = *((_QWORD *)this + 101);
        if (v96 >= (*((_QWORD *)this + 102) - v234) >> 3)
          v233 = 0;
        else
          v233 = *(ausdk::AUElement **)(v234 + 8 * v96);
      }
      v235 = ausdk::AUElement::GetParameter(v233, 0x21u);
      v236 = *((_QWORD *)this + 104);
      if (v236)
      {
        v237 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)v236 + 32))(v236, v97);
      }
      else
      {
        v238 = *((_QWORD *)this + 101);
        if (v96 >= (*((_QWORD *)this + 102) - v238) >> 3)
          v237 = 0;
        else
          v237 = *(ausdk::AUElement **)(v238 + 8 * v96);
      }
      v239 = ausdk::AUElement::GetParameter(v237, 0x22u);
      v240 = *((_QWORD *)this + 104);
      if (v240)
      {
        v241 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)v240 + 32))(v240, v97);
      }
      else
      {
        v242 = *((_QWORD *)this + 101);
        if (v96 >= (*((_QWORD *)this + 102) - v242) >> 3)
          v241 = 0;
        else
          v241 = *(ausdk::AUElement **)(v242 + 8 * v96);
      }
      v243 = ausdk::AUElement::GetParameter(v241, 0x23u);
      v244 = *((_QWORD *)this + 104);
      if (v244)
      {
        v245 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)v244 + 32))(v244, v97);
      }
      else
      {
        v246 = *((_QWORD *)this + 101);
        if (v96 >= (*((_QWORD *)this + 102) - v246) >> 3)
          v245 = 0;
        else
          v245 = *(ausdk::AUElement **)(v246 + 8 * v96);
      }
      v247 = ausdk::AUElement::GetParameter(v245, 0x20u);
      *(_DWORD *)v542 = 1;
      *(double *)&v542[8] = v247;
      *(_QWORD *)&v542[16] = 0x4059000000000000;
      *(_QWORD *)&v543 = v231;
      *((double *)&v543 + 1) = v235;
      *(double *)&v544 = v239;
      *((double *)&v544 + 1) = v243;
      v248 = *((_QWORD *)this + 104);
      if (v248)
      {
        v249 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)v248 + 32))(v248, v97);
      }
      else
      {
        v250 = *((_QWORD *)this + 101);
        if (v96 >= (*((_QWORD *)this + 102) - v250) >> 3)
          v249 = 0;
        else
          v249 = *(ausdk::AUElement **)(v250 + 8 * v96);
      }
      v251 = ausdk::AUElement::GetParameter(v249, 0x18u);
      v252 = *((_QWORD *)this + 104);
      if (v252)
      {
        v253 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)v252 + 32))(v252, v97);
      }
      else
      {
        v254 = *((_QWORD *)this + 101);
        if (v96 >= (*((_QWORD *)this + 102) - v254) >> 3)
          v253 = 0;
        else
          v253 = *(ausdk::AUElement **)(v254 + 8 * v96);
      }
      v255 = ausdk::AUElement::GetParameter(v253, 0x20u);
      v256 = *((_QWORD *)this + 104);
      if (v256)
      {
        v257 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)v256 + 32))(v256, v97);
      }
      else
      {
        v258 = *((_QWORD *)this + 101);
        if (v96 >= (*((_QWORD *)this + 102) - v258) >> 3)
          v257 = 0;
        else
          v257 = *(ausdk::AUElement **)(v258 + 8 * v96);
      }
      v259 = ausdk::AUElement::GetParameter(v257, 0x19u);
      v260 = *(_QWORD *)(*((_QWORD *)this + 84) + 8 * v96);
      v261 = *(_QWORD *)(v260 + 20);
      v262 = *(_DWORD *)(v260 + 8);
      v263 = *(_QWORD *)(v260 + 40);
      v264 = *((unsigned int *)this + 84);
      v265 = *((_QWORD *)this + 104);
      if (v265)
      {
        v266 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)v265 + 32))(v265, v97);
      }
      else
      {
        v267 = *((_QWORD *)this + 101);
        if (v96 >= (*((_QWORD *)this + 102) - v267) >> 3)
          v266 = 0;
        else
          v266 = *(ausdk::AUElement **)(v267 + 8 * v96);
      }
      v268 = ausdk::AUElement::GetParameter(v266, 0x23u);
      *(double *)buf = v251;
      *(double *)&buf[8] = v255;
      *(double *)&buf[16] = v259;
      *(double *)&buf[24] = v100;
      *(_QWORD *)&buf[32] = v261;
      *(_DWORD *)&buf[40] = v262;
      *(_QWORD *)&buf[44] = v263;
      v546 = v264;
      v547[0] = (void *)0x4059000000000000;
      *(double *)&v547[1] = v268;
      if (*((_BYTE *)this + 1328))
      {
        v269 = *((_QWORD *)this + 104);
        if (v269)
        {
          v270 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)v269 + 32))(v269, v97);
        }
        else
        {
          v271 = *((_QWORD *)this + 101);
          if (v96 >= (*((_QWORD *)this + 102) - v271) >> 3)
            v270 = 0;
          else
            v270 = *(ausdk::AUElement **)(v271 + 8 * v96);
        }
        v272 = ausdk::AUElement::GetParameter(v270, 0x2Au);
        if (v272)
        {
          v273 = (NSObject **)spp3Subsystem();
          if (v273)
          {
            v274 = *v273;
            if (!*v273)
            {
LABEL_391:
              v277 = *((_QWORD *)this + 104);
              if (v277)
              {
                v278 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)v277 + 32))(v277, v97);
              }
              else
              {
                v279 = *((_QWORD *)this + 101);
                if (v96 >= (*((_QWORD *)this + 102) - v279) >> 3)
                  v278 = 0;
                else
                  v278 = *(ausdk::AUElement **)(v279 + 8 * v96);
              }
              ausdk::AUElement::SetParameter(v278, 0x2Au, 0.0, 0);
              goto LABEL_400;
            }
          }
          else
          {
            v274 = MEMORY[0x1E0C81028];
          }
          if (os_log_type_enabled(v274, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)__p = 136315906;
            *(_QWORD *)&__p[4] = "AUSpeakerProtectionV3.cpp";
            *(_WORD *)&__p[12] = 1024;
            *(_DWORD *)&__p[14] = 949;
            v538 = 1024;
            v539 = v272;
            v540 = 1024;
            v541 = v97;
            _os_log_impl(&dword_1B5ED0000, v274, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Using SpTS calibration: Requested displacement controller type (%u) for Ch %u is overridden to kOpenLoopDisplacement.\n", __p, 0x1Eu);
          }
          goto LABEL_391;
        }
        v275 = (NSObject **)spp3Subsystem();
        if (v275)
        {
          v276 = *v275;
          if (!*v275)
            goto LABEL_400;
        }
        else
        {
          v276 = MEMORY[0x1E0C81028];
        }
        if (os_log_type_enabled(v276, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)__p = 136315650;
          *(_QWORD *)&__p[4] = "AUSpeakerProtectionV3.cpp";
          *(_WORD *)&__p[12] = 1024;
          *(_DWORD *)&__p[14] = 952;
          v538 = 1024;
          v539 = v97;
          _os_log_impl(&dword_1B5ED0000, v276, OS_LOG_TYPE_DEBUG, "%25s:%-5d Using SpTS calibration: Requested displacement controller for Ch %u was already kOpenLoopDisplacement, as needed.\n", __p, 0x18u);
        }
      }
LABEL_400:
      v280 = *((_QWORD *)this + 104);
      if (v280)
      {
        v281 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)v280 + 32))(v280, v97);
      }
      else
      {
        v282 = *((_QWORD *)this + 101);
        if (v96 >= (*((_QWORD *)this + 102) - v282) >> 3)
          v281 = 0;
        else
          v281 = *(ausdk::AUElement **)(v282 + 8 * v96);
      }
      v283 = ausdk::AUElement::GetParameter(v281, 0x2Au);
      if (v283 <= 4 && ((1 << v283) & 0x16) != 0)
      {
        for (i = *((_QWORD *)this + 87); ; i += 8)
        {
          if (i == *((_QWORD *)this + 88))
            goto LABEL_418;
          if (*(_WORD *)(*(_QWORD *)i + 16))
            break;
        }
        v285 = (NSObject **)spp3Subsystem();
        if (v285)
        {
          v286 = *v285;
          if (!*v285)
          {
LABEL_417:
            v283 = 0;
            goto LABEL_418;
          }
        }
        else
        {
          v286 = MEMORY[0x1E0C81028];
        }
        if (os_log_type_enabled(v286, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)__p = 136315394;
          *(_QWORD *)&__p[4] = "AUSpeakerProtectionV3.cpp";
          *(_WORD *)&__p[12] = 1024;
          *(_DWORD *)&__p[14] = 964;
          _os_log_impl(&dword_1B5ED0000, v286, OS_LOG_TYPE_DEBUG, "%25s:%-5d Repair flag is true. Disable closed loop.", __p, 0x12u);
        }
        goto LABEL_417;
      }
LABEL_418:
      v287 = *(_QWORD *)(*((_QWORD *)this + 84) + 8 * v96);
      if (*(_QWORD *)(v287 + 48))
      {
        v288 = *((_QWORD *)this + 104);
        if (v288)
        {
          v289 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)v288 + 32))(v288, v97);
        }
        else
        {
          v290 = *((_QWORD *)this + 101);
          if (v96 >= (*((_QWORD *)this + 102) - v290) >> 3)
            v289 = 0;
          else
            v289 = *(ausdk::AUElement **)(v290 + 8 * v96);
        }
        *(float *)(*(_QWORD *)(v287 + 48) + 20) = ausdk::AUElement::GetParameter(v289, 0x2Fu);
        v291 = *((_QWORD *)this + 104);
        if (v291)
        {
          v292 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)v291 + 32))(v291, v97);
        }
        else
        {
          v293 = *((_QWORD *)this + 101);
          if (v96 >= (*((_QWORD *)this + 102) - v293) >> 3)
            v292 = 0;
          else
            v292 = *(ausdk::AUElement **)(v293 + 8 * v96);
        }
        *(float *)(*(_QWORD *)(v287 + 48) + 24) = ausdk::AUElement::GetParameter(v292, 0x30u);
        v294 = *((_QWORD *)this + 104);
        if (v294)
        {
          v295 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)v294 + 32))(v294, v97);
        }
        else
        {
          v296 = *((_QWORD *)this + 101);
          if (v96 >= (*((_QWORD *)this + 102) - v296) >> 3)
            v295 = 0;
          else
            v295 = *(ausdk::AUElement **)(v296 + 8 * v96);
        }
        *(float *)(*(_QWORD *)(v287 + 48) + 76) = ausdk::AUElement::GetParameter(v295, 0x31u);
        v297 = *((_QWORD *)this + 104);
        if (v297)
        {
          v298 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)v297 + 32))(v297, v97);
        }
        else
        {
          v299 = *((_QWORD *)this + 101);
          if (v96 >= (*((_QWORD *)this + 102) - v299) >> 3)
            v298 = 0;
          else
            v298 = *(ausdk::AUElement **)(v299 + 8 * v96);
        }
        *(float *)(*(_QWORD *)(v287 + 48) + 80) = ausdk::AUElement::GetParameter(v298, 0x32u);
        v300 = *((_QWORD *)this + 104);
        if (v300)
        {
          v301 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)v300 + 32))(v300, v97);
        }
        else
        {
          v302 = *((_QWORD *)this + 101);
          if (v96 >= (*((_QWORD *)this + 102) - v302) >> 3)
            v301 = 0;
          else
            v301 = *(ausdk::AUElement **)(v302 + 8 * v96);
        }
        *(float *)(*(_QWORD *)(v287 + 48) + 52) = ausdk::AUElement::GetParameter(v301, 0x33u);
        v303 = *((_QWORD *)this + 104);
        if (v303)
        {
          v304 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)v303 + 32))(v303, v97);
        }
        else
        {
          v305 = *((_QWORD *)this + 101);
          if (v96 >= (*((_QWORD *)this + 102) - v305) >> 3)
            v304 = 0;
          else
            v304 = *(ausdk::AUElement **)(v305 + 8 * v96);
        }
        *(float *)(*(_QWORD *)(v287 + 48) + 56) = ausdk::AUElement::GetParameter(v304, 0x34u);
        v306 = *((_QWORD *)this + 104);
        if (v306)
        {
          v307 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)v306 + 32))(v306, v97);
        }
        else
        {
          v308 = *((_QWORD *)this + 101);
          if (v96 >= (*((_QWORD *)this + 102) - v308) >> 3)
            v307 = 0;
          else
            v307 = *(ausdk::AUElement **)(v308 + 8 * v96);
        }
        *(float *)(*(_QWORD *)(v287 + 48) + 44) = ausdk::AUElement::GetParameter(v307, 0x35u);
        v309 = *((_QWORD *)this + 104);
        if (v309)
        {
          v310 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)v309 + 32))(v309, v97);
        }
        else
        {
          v311 = *((_QWORD *)this + 101);
          if (v96 >= (*((_QWORD *)this + 102) - v311) >> 3)
            v310 = 0;
          else
            v310 = *(ausdk::AUElement **)(v311 + 8 * v96);
        }
        *(float *)(*(_QWORD *)(v287 + 48) + 48) = ausdk::AUElement::GetParameter(v310, 0x36u);
        v312 = *((_QWORD *)this + 104);
        if (v312)
        {
          v313 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)v312 + 32))(v312, v97);
        }
        else
        {
          v314 = *((_QWORD *)this + 101);
          if (v96 >= (*((_QWORD *)this + 102) - v314) >> 3)
            v313 = 0;
          else
            v313 = *(ausdk::AUElement **)(v314 + 8 * v96);
        }
        *(float *)(*(_QWORD *)(v287 + 48) + 60) = ausdk::AUElement::GetParameter(v313, 0x37u);
        v315 = *((_QWORD *)this + 104);
        if (v315)
        {
          v316 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)v315 + 32))(v315, v97);
        }
        else
        {
          v317 = *((_QWORD *)this + 101);
          if (v96 >= (*((_QWORD *)this + 102) - v317) >> 3)
            v316 = 0;
          else
            v316 = *(ausdk::AUElement **)(v317 + 8 * v96);
        }
        *(float *)(*(_QWORD *)(v287 + 48) + 64) = ausdk::AUElement::GetParameter(v316, 0x38u);
        v318 = *((_QWORD *)this + 104);
        if (v318)
        {
          v319 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)v318 + 32))(v318, v97);
        }
        else
        {
          v320 = *((_QWORD *)this + 101);
          if (v96 >= (*((_QWORD *)this + 102) - v320) >> 3)
            v319 = 0;
          else
            v319 = *(ausdk::AUElement **)(v320 + 8 * v96);
        }
        *(float *)(*(_QWORD *)(v287 + 48) + 8) = ausdk::AUElement::GetParameter(v319, 0x3Au);
        v321 = *((_QWORD *)this + 104);
        if (v321)
        {
          v322 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)v321 + 32))(v321, v97);
        }
        else
        {
          v323 = *((_QWORD *)this + 101);
          if (v96 >= (*((_QWORD *)this + 102) - v323) >> 3)
            v322 = 0;
          else
            v322 = *(ausdk::AUElement **)(v323 + 8 * v96);
        }
        *(float *)(*(_QWORD *)(v287 + 48) + 4) = ausdk::AUElement::GetParameter(v322, 0x39u);
        v324 = *((_QWORD *)this + 104);
        if (v324)
        {
          v325 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)v324 + 32))(v324, v97);
        }
        else
        {
          v326 = *((_QWORD *)this + 101);
          if (v96 >= (*((_QWORD *)this + 102) - v326) >> 3)
            v325 = 0;
          else
            v325 = *(ausdk::AUElement **)(v326 + 8 * v96);
        }
        *(float *)(*(_QWORD *)(v287 + 48) + 28) = ausdk::AUElement::GetParameter(v325, 0x3Bu);
        v327 = *((_QWORD *)this + 104);
        if (v327)
        {
          v328 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)v327 + 32))(v327, v97);
        }
        else
        {
          v329 = *((_QWORD *)this + 101);
          if (v96 >= (*((_QWORD *)this + 102) - v329) >> 3)
            v328 = 0;
          else
            v328 = *(ausdk::AUElement **)(v329 + 8 * v96);
        }
        *(float *)(*(_QWORD *)(v287 + 48) + 36) = ausdk::AUElement::GetParameter(v328, 0x3Cu);
        v330 = *((_QWORD *)this + 104);
        if (v330)
        {
          v331 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)v330 + 32))(v330, v97);
        }
        else
        {
          v332 = *((_QWORD *)this + 101);
          if (v96 >= (*((_QWORD *)this + 102) - v332) >> 3)
            v331 = 0;
          else
            v331 = *(ausdk::AUElement **)(v332 + 8 * v96);
        }
        *(float *)(*(_QWORD *)(v287 + 48) + 84) = ausdk::AUElement::GetParameter(v331, 0x3Du);
        v333 = *((_QWORD *)this + 104);
        if (v333)
        {
          v334 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)v333 + 32))(v333, v97);
        }
        else
        {
          v335 = *((_QWORD *)this + 101);
          if (v96 >= (*((_QWORD *)this + 102) - v335) >> 3)
            v334 = 0;
          else
            v334 = *(ausdk::AUElement **)(v335 + 8 * v96);
        }
        *(float *)(*(_QWORD *)(v287 + 48) + 88) = ausdk::AUElement::GetParameter(v334, 0x3Eu);
        v336 = *((_QWORD *)this + 104);
        if (v336)
        {
          v337 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)v336 + 32))(v336, v97);
        }
        else
        {
          v338 = *((_QWORD *)this + 101);
          if (v96 >= (*((_QWORD *)this + 102) - v338) >> 3)
            v337 = 0;
          else
            v337 = *(ausdk::AUElement **)(v338 + 8 * v96);
        }
        *(float *)(*(_QWORD *)(v287 + 48) + 92) = ausdk::AUElement::GetParameter(v337, 0x3Fu);
      }
      v339 = *((unsigned int *)this + 84);
      v340 = *((_QWORD *)this + 104);
      v531 = LODWORD(v100);
      v529 = v113;
      if (v340)
      {
        v341 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)v340 + 32))(v340, v97);
      }
      else
      {
        v342 = *((_QWORD *)this + 101);
        if (v96 >= (*((_QWORD *)this + 102) - v342) >> 3)
          v341 = 0;
        else
          v341 = *(ausdk::AUElement **)(v342 + 8 * v96);
      }
      v527 = ausdk::AUElement::GetParameter(v341, 0);
      v343 = *((_QWORD *)this + 104);
      if (v343)
      {
        v344 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)v343 + 32))(v343, v97);
      }
      else
      {
        v345 = *((_QWORD *)this + 101);
        if (v96 >= (*((_QWORD *)this + 102) - v345) >> 3)
          v344 = 0;
        else
          v344 = *(ausdk::AUElement **)(v345 + 8 * v96);
      }
      v525 = ausdk::AUElement::GetParameter(v344, 1u);
      v346 = *((_QWORD *)this + 9);
      if (v346)
      {
        v347 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v346 + 32))(v346, 0);
      }
      else
      {
        v348 = (ausdk::AUElement **)*((_QWORD *)this + 6);
        if (*((ausdk::AUElement ***)this + 7) == v348)
          v347 = 0;
        else
          v347 = *v348;
      }
      v523 = ausdk::AUElement::GetParameter(v347, 4u);
      v349 = *((_QWORD *)this + 9);
      if (v349)
      {
        v350 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v349 + 32))(v349, 0);
      }
      else
      {
        v351 = (ausdk::AUElement **)*((_QWORD *)this + 6);
        if (*((ausdk::AUElement ***)this + 7) == v351)
          v350 = 0;
        else
          v350 = *v351;
      }
      v521 = ausdk::AUElement::GetParameter(v350, 5u);
      v352 = *((_QWORD *)this + 9);
      if (v352)
      {
        v353 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v352 + 32))(v352, 0);
      }
      else
      {
        v354 = (ausdk::AUElement **)*((_QWORD *)this + 6);
        if (*((ausdk::AUElement ***)this + 7) == v354)
          v353 = 0;
        else
          v353 = *v354;
      }
      v519 = ausdk::AUElement::GetParameter(v353, 6u);
      v355 = *((_QWORD *)this + 9);
      if (v355)
      {
        v356 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v355 + 32))(v355, 0);
      }
      else
      {
        v357 = (ausdk::AUElement **)*((_QWORD *)this + 6);
        if (*((ausdk::AUElement ***)this + 7) == v357)
          v356 = 0;
        else
          v356 = *v357;
      }
      v517 = ausdk::AUElement::GetParameter(v356, 7u);
      v358 = *((_QWORD *)this + 9);
      if (v358)
      {
        v359 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v358 + 32))(v358, 0);
      }
      else
      {
        v360 = (ausdk::AUElement **)*((_QWORD *)this + 6);
        if (*((ausdk::AUElement ***)this + 7) == v360)
          v359 = 0;
        else
          v359 = *v360;
      }
      v515 = ausdk::AUElement::GetParameter(v359, 2u);
      v361 = *((_QWORD *)this + 9);
      if (v361)
      {
        v362 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v361 + 32))(v361, 0);
      }
      else
      {
        v363 = (ausdk::AUElement **)*((_QWORD *)this + 6);
        if (*((ausdk::AUElement ***)this + 7) == v363)
          v362 = 0;
        else
          v362 = *v363;
      }
      v513 = ausdk::AUElement::GetParameter(v362, 3u);
      v364 = *((_QWORD *)this + 9);
      if (v364)
      {
        v365 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v364 + 32))(v364, 0);
      }
      else
      {
        v366 = (ausdk::AUElement **)*((_QWORD *)this + 6);
        if (*((ausdk::AUElement ***)this + 7) == v366)
          v365 = 0;
        else
          v365 = *v366;
      }
      v511 = ausdk::AUElement::GetParameter(v365, 9u);
      v367 = *((_QWORD *)this + 9);
      if (v367)
      {
        v368 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v367 + 32))(v367, 0);
      }
      else
      {
        v369 = (ausdk::AUElement **)*((_QWORD *)this + 6);
        if (*((ausdk::AUElement ***)this + 7) == v369)
          v368 = 0;
        else
          v368 = *v369;
      }
      v509 = ausdk::AUElement::GetParameter(v368, 0xAu);
      v370 = *((_QWORD *)this + 9);
      if (v370)
      {
        v371 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v370 + 32))(v370, 0);
      }
      else
      {
        v372 = (ausdk::AUElement **)*((_QWORD *)this + 6);
        if (*((ausdk::AUElement ***)this + 7) == v372)
          v371 = 0;
        else
          v371 = *v372;
      }
      v507 = ausdk::AUElement::GetParameter(v371, 0xBu);
      v373 = *((_QWORD *)this + 104);
      if (v373)
      {
        v374 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)v373 + 32))(v373, v97);
      }
      else
      {
        v375 = *((_QWORD *)this + 101);
        if (v96 >= (*((_QWORD *)this + 102) - v375) >> 3)
          v374 = 0;
        else
          v374 = *(ausdk::AUElement **)(v375 + 8 * v96);
      }
      v505 = ausdk::AUElement::GetParameter(v374, 9u);
      v376 = *((_QWORD *)this + 104);
      if (v376)
      {
        v377 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)v376 + 32))(v376, v97);
      }
      else
      {
        v378 = *((_QWORD *)this + 101);
        if (v96 >= (*((_QWORD *)this + 102) - v378) >> 3)
          v377 = 0;
        else
          v377 = *(ausdk::AUElement **)(v378 + 8 * v96);
      }
      v503 = ausdk::AUElement::GetParameter(v377, 0xAu);
      v379 = *((_QWORD *)this + 104);
      if (v379)
      {
        v380 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)v379 + 32))(v379, v97);
      }
      else
      {
        v381 = *((_QWORD *)this + 101);
        if (v96 >= (*((_QWORD *)this + 102) - v381) >> 3)
          v380 = 0;
        else
          v380 = *(ausdk::AUElement **)(v381 + 8 * v96);
      }
      v501 = ausdk::AUElement::GetParameter(v380, 0xBu);
      v382 = *((_QWORD *)this + 104);
      if (v382)
      {
        v383 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)v382 + 32))(v382, v97);
      }
      else
      {
        v384 = *((_QWORD *)this + 101);
        if (v96 >= (*((_QWORD *)this + 102) - v384) >> 3)
          v383 = 0;
        else
          v383 = *(ausdk::AUElement **)(v384 + 8 * v96);
      }
      v499 = ausdk::AUElement::GetParameter(v383, 0xCu);
      v385 = *((_QWORD *)this + 104);
      if (v385)
      {
        v386 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)v385 + 32))(v385, v97);
      }
      else
      {
        v387 = *((_QWORD *)this + 101);
        if (v96 >= (*((_QWORD *)this + 102) - v387) >> 3)
          v386 = 0;
        else
          v386 = *(ausdk::AUElement **)(v387 + 8 * v96);
      }
      v497 = ausdk::AUElement::GetParameter(v386, 0xDu);
      v388 = *((_QWORD *)this + 104);
      if (v388)
      {
        v389 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)v388 + 32))(v388, v97);
      }
      else
      {
        v390 = *((_QWORD *)this + 101);
        if (v96 >= (*((_QWORD *)this + 102) - v390) >> 3)
          v389 = 0;
        else
          v389 = *(ausdk::AUElement **)(v390 + 8 * v96);
      }
      v495 = ausdk::AUElement::GetParameter(v389, 0xEu);
      v391 = *((_QWORD *)this + 104);
      if (v391)
      {
        v392 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)v391 + 32))(v391, v97);
      }
      else
      {
        v393 = *((_QWORD *)this + 101);
        if (v96 >= (*((_QWORD *)this + 102) - v393) >> 3)
          v392 = 0;
        else
          v392 = *(ausdk::AUElement **)(v393 + 8 * v96);
      }
      v493 = ausdk::AUElement::GetParameter(v392, 0xFu);
      v394 = *((_QWORD *)this + 104);
      if (v394)
      {
        v395 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)v394 + 32))(v394, v97);
      }
      else
      {
        v396 = *((_QWORD *)this + 101);
        if (v96 >= (*((_QWORD *)this + 102) - v396) >> 3)
          v395 = 0;
        else
          v395 = *(ausdk::AUElement **)(v396 + 8 * v96);
      }
      v491 = ausdk::AUElement::GetParameter(v395, 0x10u);
      v397 = *((_QWORD *)this + 104);
      if (v397)
      {
        v398 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)v397 + 32))(v397, v97);
      }
      else
      {
        v399 = *((_QWORD *)this + 101);
        if (v96 >= (*((_QWORD *)this + 102) - v399) >> 3)
          v398 = 0;
        else
          v398 = *(ausdk::AUElement **)(v399 + 8 * v96);
      }
      v489 = ausdk::AUElement::GetParameter(v398, 0x11u);
      v400 = *((_QWORD *)this + 104);
      if (v400)
      {
        v401 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)v400 + 32))(v400, v97);
      }
      else
      {
        v402 = *((_QWORD *)this + 101);
        if (v96 >= (*((_QWORD *)this + 102) - v402) >> 3)
          v401 = 0;
        else
          v401 = *(ausdk::AUElement **)(v402 + 8 * v96);
      }
      v487 = ausdk::AUElement::GetParameter(v401, 0x12u);
      v403 = *((_QWORD *)this + 104);
      if (v403)
      {
        v404 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)v403 + 32))(v403, v97);
      }
      else
      {
        v405 = *((_QWORD *)this + 101);
        if (v96 >= (*((_QWORD *)this + 102) - v405) >> 3)
          v404 = 0;
        else
          v404 = *(ausdk::AUElement **)(v405 + 8 * v96);
      }
      v486 = ausdk::AUElement::GetParameter(v404, 0x13u);
      v406 = *((_QWORD *)this + 104);
      if (v406)
      {
        v407 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)v406 + 32))(v406, v97);
      }
      else
      {
        v408 = *((_QWORD *)this + 101);
        if (v96 >= (*((_QWORD *)this + 102) - v408) >> 3)
          v407 = 0;
        else
          v407 = *(ausdk::AUElement **)(v408 + 8 * v96);
      }
      v485 = ausdk::AUElement::GetParameter(v407, 2u);
      v409 = *((_QWORD *)this + 104);
      if (v409)
      {
        v410 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)v409 + 32))(v409, v97);
      }
      else
      {
        v411 = *((_QWORD *)this + 101);
        if (v96 >= (*((_QWORD *)this + 102) - v411) >> 3)
          v410 = 0;
        else
          v410 = *(ausdk::AUElement **)(v411 + 8 * v96);
      }
      v484 = ausdk::AUElement::GetParameter(v410, 3u);
      v412 = *((_QWORD *)this + 104);
      if (v412)
      {
        v413 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)v412 + 32))(v412, v97);
      }
      else
      {
        v414 = *((_QWORD *)this + 101);
        if (v96 >= (*((_QWORD *)this + 102) - v414) >> 3)
          v413 = 0;
        else
          v413 = *(ausdk::AUElement **)(v414 + 8 * v96);
      }
      v483 = ausdk::AUElement::GetParameter(v413, 4u);
      v415 = *((_QWORD *)this + 104);
      if (v415)
      {
        v416 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)v415 + 32))(v415, v97);
      }
      else
      {
        v417 = *((_QWORD *)this + 101);
        if (v96 >= (*((_QWORD *)this + 102) - v417) >> 3)
          v416 = 0;
        else
          v416 = *(ausdk::AUElement **)(v417 + 8 * v96);
      }
      v482 = ausdk::AUElement::GetParameter(v416, 5u);
      v418 = *((_QWORD *)this + 9);
      if (v418)
      {
        v419 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v418 + 32))(v418, 0);
      }
      else
      {
        v420 = (ausdk::AUElement **)*((_QWORD *)this + 6);
        if (*((ausdk::AUElement ***)this + 7) == v420)
          v419 = 0;
        else
          v419 = *v420;
      }
      v481 = ausdk::AUElement::GetParameter(v419, 8u);
      v421 = *((_QWORD *)this + 104);
      if (v421)
      {
        v422 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)v421 + 32))(v421, v97);
      }
      else
      {
        v423 = *((_QWORD *)this + 101);
        if (v96 >= (*((_QWORD *)this + 102) - v423) >> 3)
          v422 = 0;
        else
          v422 = *(ausdk::AUElement **)(v423 + 8 * v96);
      }
      v480 = ausdk::AUElement::GetParameter(v422, 6u);
      v424 = *((_QWORD *)this + 9);
      if (v424)
      {
        v425 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v424 + 32))(v424, 0);
      }
      else
      {
        v426 = (ausdk::AUElement **)*((_QWORD *)this + 6);
        if (*((ausdk::AUElement ***)this + 7) == v426)
          v425 = 0;
        else
          v425 = *v426;
      }
      v479 = ausdk::AUElement::GetParameter(v425, 0xEu);
      v427 = *((_QWORD *)this + 104);
      if (v427)
      {
        v428 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)v427 + 32))(v427, v97);
      }
      else
      {
        v429 = *((_QWORD *)this + 101);
        if (v96 >= (*((_QWORD *)this + 102) - v429) >> 3)
          v428 = 0;
        else
          v428 = *(ausdk::AUElement **)(v429 + 8 * v96);
      }
      v430 = ausdk::AUElement::GetParameter(v428, 0x1Au);
      v431 = *((_QWORD *)this + 104);
      if (v431)
      {
        v432 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)v431 + 32))(v431, v97);
      }
      else
      {
        v433 = *((_QWORD *)this + 101);
        if (v96 >= (*((_QWORD *)this + 102) - v433) >> 3)
          v432 = 0;
        else
          v432 = *(ausdk::AUElement **)(v433 + 8 * v96);
      }
      v434 = ausdk::AUElement::GetParameter(v432, 0x17u);
      v435 = *(float *)(*(_QWORD *)(*((_QWORD *)this + 84) + 8 * v96) + 36);
      v436 = *((_QWORD *)this + 104);
      if (v436)
      {
        v437 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)v436 + 32))(v436, v97);
      }
      else
      {
        v438 = *((_QWORD *)this + 101);
        if (v96 >= (*((_QWORD *)this + 102) - v438) >> 3)
          v437 = 0;
        else
          v437 = *(ausdk::AUElement **)(v438 + 8 * v96);
      }
      v439 = ausdk::AUElement::GetParameter(v437, 0x1Bu);
      v478 = __exp10(v439 / 20.0);
      v440 = *((_QWORD *)this + 104);
      if (v440)
      {
        v441 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)v440 + 32))(v440, v97);
      }
      else
      {
        v442 = *((_QWORD *)this + 101);
        if (v96 >= (*((_QWORD *)this + 102) - v442) >> 3)
          v441 = 0;
        else
          v441 = *(ausdk::AUElement **)(v442 + 8 * v96);
      }
      v443 = ausdk::AUElement::GetParameter(v441, 0x1Cu);
      v444 = __exp10(v443 / 20.0);
      v445 = *((_QWORD *)this + 104);
      if (v445)
      {
        v446 = v444;
        v447 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)v445 + 32))(v445, v97);
      }
      else
      {
        v446 = v444;
        v448 = *((_QWORD *)this + 101);
        if (v96 >= (*((_QWORD *)this + 102) - v448) >> 3)
          v447 = 0;
        else
          v447 = *(ausdk::AUElement **)(v448 + 8 * v96);
      }
      v449 = ausdk::AUElement::GetParameter(v447, 0x1Du);
      v450 = *((_QWORD *)this + 104);
      if (v450)
      {
        v451 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)v450 + 32))(v450, v97);
      }
      else
      {
        v452 = *((_QWORD *)this + 101);
        if (v96 >= (*((_QWORD *)this + 102) - v452) >> 3)
          v451 = 0;
        else
          v451 = *(ausdk::AUElement **)(v452 + 8 * v96);
      }
      v453 = ausdk::AUElement::GetParameter(v451, 0x1Eu);
      v454 = *((_QWORD *)this + 104);
      if (v454)
      {
        v455 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)v454 + 32))(v454, v97);
      }
      else
      {
        v456 = *((_QWORD *)this + 101);
        if (v96 >= (*((_QWORD *)this + 102) - v456) >> 3)
          v455 = 0;
        else
          v455 = *(ausdk::AUElement **)(v456 + 8 * v96);
      }
      v457 = ausdk::AUElement::GetParameter(v455, 0x1Fu);
      v458 = *((_QWORD *)this + 104);
      if (v458)
      {
        v459 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)v458 + 32))(v458, v97);
      }
      else
      {
        v460 = *((_QWORD *)this + 101);
        if (v96 >= (*((_QWORD *)this + 102) - v460) >> 3)
          v459 = 0;
        else
          v459 = *(ausdk::AUElement **)(v460 + 8 * v96);
      }
      v461 = ausdk::AUElement::GetParameter(v459, 0x43u);
      v462 = *((_QWORD *)this + 104);
      if (v462)
      {
        v463 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)v462 + 32))(v462, v97);
      }
      else
      {
        v464 = *((_QWORD *)this + 101);
        if (v96 >= (*((_QWORD *)this + 102) - v464) >> 3)
          v463 = 0;
        else
          v463 = *(ausdk::AUElement **)(v464 + 8 * v96);
      }
      v465 = ausdk::AUElement::GetParameter(v463, 0x44u);
      *((double *)&v476 + 1) = v461;
      *(double *)&v476 = v457;
      *((double *)&v474 + 1) = v495;
      *(double *)&v474 = v497;
      clsp::CLSPKernel_v5PtrFactory(__p, v97, v339, v533, (__int128 *)v542, (__int128 *)buf, (uint64_t *)(*((_QWORD *)this + 84) + 8 * v96), *(_QWORD *)(*((_QWORD *)this + 87) + 8 * v96), a2, v527, v525, v523, v521, v519, v517, v515, COERCE__INT64(v513), v511, v509,
        v507,
        v505,
        COERCE__INT64(v503),
        COERCE__INT64(v501),
        COERCE__INT64(v499),
        v474,
        v493,
        v491,
        v489,
        COERCE__INT64(v487),
        v486,
        COERCE__INT64(v485),
        COERCE__INT64(v484),
        v483,
        COERCE__INT64(v482),
        v481,
        v480,
        v479,
        v531,
        v529,
        COERCE__INT64(v430),
        COERCE__INT64(v434),
        v435,
        v478,
        v446,
        v449,
        v453,
        v476,
        COERCE__INT64(v465),
        v283);
      std::vector<std::shared_ptr<clsp::CLSPKernel_v5>>::push_back[abi:ne180100]((char **)this + 105, (__int128 *)__p);
      std::vector<std::shared_ptr<clsp::CLSPKernel_v5>>::push_back[abi:ne180100]((char **)(*((_QWORD *)this + 108) + 24 * *(unsigned int *)(*((_QWORD *)this + 127) + 4 * v96)), (__int128 *)__p);
      v466 = *((_QWORD *)this + 104);
      if (v466)
      {
        v467 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)v466 + 32))(v466, v97);
      }
      else
      {
        v468 = *((_QWORD *)this + 101);
        if (v96 >= (*((_QWORD *)this + 102) - v468) >> 3)
          v467 = 0;
        else
          v467 = *(ausdk::AUElement **)(v468 + 8 * v96);
      }
      ausdk::AUElement::SetParameter(v467, 0x15u, 1.0, 0);
      v469 = *((_QWORD *)this + 104);
      if (v469)
      {
        v470 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)v469 + 32))(v469, v97);
      }
      else
      {
        v471 = *((_QWORD *)this + 101);
        if (v96 >= (*((_QWORD *)this + 102) - v471) >> 3)
          v470 = 0;
        else
          v470 = *(ausdk::AUElement **)(v471 + 8 * v96);
      }
      ausdk::AUElement::SetParameter(v470, 0x16u, 1.0, 0);
      v224 = *(std::__shared_weak_count **)&__p[8];
      if (*(_QWORD *)&__p[8])
      {
        v472 = (unint64_t *)(*(_QWORD *)&__p[8] + 8);
        do
          v226 = __ldaxr(v472);
        while (__stlxr(v226 - 1, v472));
LABEL_708:
        if (!v226)
        {
          ((void (*)(std::__shared_weak_count *))v224->__on_zero_shared)(v224);
          std::__shared_weak_count::__release_weak(v224);
        }
      }
LABEL_710:
      v96 = (v97 + 1);
      v97 = v96;
    }
    while (v96 < a3);
  }
}

void sub_1B6437024(_Unwind_Exception *a1)
{
  std::unique_ptr<clsp::SpeakerCalibrationProperties>::reset[abi:ne180100]((uint64_t *)&STACK[0x270]);
  _Unwind_Resume(a1);
}

void std::default_delete<cpms::controllers::Power<float,cpms::smoothers::Exponential,clsp::AttackRelease>>::operator()[abi:ne180100](uint64_t a1)
{
  void *v2;
  void *v3;

  std::unique_ptr<clsp::CLSP_Log>::reset[abi:ne180100]((dispatch_object_t **)(a1 + 568), 0);
  std::shared_ptr<vp::services::Telephony_Utility>::~shared_ptr[abi:ne180100](a1 + 552);
  if (*(_QWORD *)(a1 + 448))
  {
    v2 = *(void **)(a1 + 432);
    if ((void *)(a1 + 456) != v2)
      operator delete(v2);
  }
  boost::container::vector<cpms::controllers::Power<float,cpms::smoothers::Exponential,clsp::AttackRelease>::GainGroup,boost::container::small_vector_allocator<cpms::controllers::Power<float,cpms::smoothers::Exponential,clsp::AttackRelease>::GainGroup,boost::container::new_allocator<void>,void>,void>::~vector(a1 + 216);
  if (*(_QWORD *)(a1 + 192))
  {
    v3 = *(void **)(a1 + 176);
    if ((void *)(a1 + 200) != v3)
      operator delete(v3);
  }
  boost::container::vector<cpms::TimeScale<float>,boost::container::small_vector_allocator<cpms::TimeScale<float>,boost::container::new_allocator<void>,void>,void>::~vector(a1 + 24);
  JUMPOUT(0x1BCC95CECLL);
}

void cpms::controllers::Power<float,cpms::smoothers::Exponential,clsp::AttackRelease>::AddGainGroup(uint64_t a1, unsigned int **a2, int a3)
{
  unsigned int *v6;
  unsigned int *v7;
  uint64_t v8;
  unsigned int *v9;
  unsigned int *v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  std::runtime_error *exception;
  uint64_t v15;
  std::runtime_error *v16;
  uint64_t v17[3];
  int v18;
  std::string v19;
  int *v20;
  uint64_t v21;
  uint64_t v22;

  v18 = a3;
  v6 = *a2;
  v7 = a2[1];
  if (*a2 != v7)
  {
    do
    {
      v8 = *v6;
      if (v8 >= *(_DWORD *)(a1 + 4))
      {
        exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        caulk::make_string((caulk *)"channel index %u is out of [0, %u) range", (uint64_t)&v19, v8, *(unsigned int *)(a1 + 4));
        std::runtime_error::runtime_error(exception, &v19);
      }
      ++v6;
    }
    while (v6 != v7);
  }
  memset(v17, 0, sizeof(v17));
  v9 = a2[3];
  v10 = a2[4];
  while (v9 != v10)
  {
    v11 = *v9;
    if (*(_QWORD *)(a1 + 32) <= v11)
    {
      v15 = *v9;
      v16 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      caulk::make_string((caulk *)"time scale index %u is out of [0, %lu) range", (uint64_t)&v19, v15, *(_QWORD *)(a1 + 32));
      std::runtime_error::runtime_error(v16, &v19);
    }
    std::vector<cpms::TimeScale<float>>::push_back[abi:ne180100](v17, *(_QWORD *)(a1 + 24) + 32 * v11);
    ++v9;
  }
  v12 = *(_QWORD *)(a1 + 216);
  v13 = *(_QWORD *)(a1 + 224);
  if (v13 == *(_QWORD *)(a1 + 232))
  {
    v19.__r_.__value_.__r.__words[0] = (std::string::size_type)(a2 + 3);
    v19.__r_.__value_.__l.__size_ = (std::string::size_type)v17;
    v19.__r_.__value_.__r.__words[2] = (std::string::size_type)a2;
    v20 = &v18;
    v21 = a1;
    boost::container::vector<cpms::controllers::Power<float,cpms::smoothers::Exponential,clsp::AttackRelease>::GainGroup,boost::container::small_vector_allocator<cpms::controllers::Power<float,cpms::smoothers::Exponential,clsp::AttackRelease>::GainGroup,boost::container::new_allocator<void>,void>,void>::priv_insert_forward_range_no_capacity<boost::container::dtl::insert_emplace_proxy<boost::container::small_vector_allocator<cpms::controllers::Power<float,cpms::smoothers::Exponential,clsp::AttackRelease>::GainGroup,boost::container::new_allocator<void>,void>,cpms::controllers::Power<float,cpms::smoothers::Exponential,clsp::AttackRelease>::GainGroup*,float const&,cpms::controllers::Power<float,cpms::smoothers::Exponential,clsp::AttackRelease>::SmoothingStrategy &,std::vector<unsigned int> const&,std::vector<cpms::TimeScale<float>> &,std::vector<unsigned int> const&>>(&v22, (uint64_t **)(a1 + 216), (uint64_t *)(v12 + 48 * v13), (uint64_t)&v19);
    boost::container::vec_iterator<cpms::controllers::Power<float,cpms::smoothers::Exponential,clsp::AttackRelease>::GainGroup *,false>::operator*(v22);
  }
  else
  {
    cpms::controllers::Power<float,cpms::smoothers::Exponential,clsp::AttackRelease>::GainGroup::GainGroup(v12 + 48 * v13, a3, (uint64_t)a2, v17, a2 + 3, *(float *)a1);
    ++*(_QWORD *)(a1 + 224);
  }
  v19.__r_.__value_.__r.__words[0] = (std::string::size_type)v17;
  std::vector<cpms::TimeScale<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v19);
}

void sub_1B64373F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  uint64_t v21;

  *(_QWORD *)(v21 - 56) = &a12;
  std::vector<cpms::TimeScale<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v21 - 56));
  _Unwind_Resume(a1);
}

void sub_1B6437434(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  void *v21;
  int v22;

  if (a21 < 0)
    operator delete(__p);
  if (v22)
    __cxa_free_exception(v21);
  JUMPOUT(0x1B643742CLL);
}

dispatch_object_t *std::unique_ptr<clsp::CLSP_Log>::reset[abi:ne180100](dispatch_object_t **a1, dispatch_object_t *a2)
{
  dispatch_object_t *result;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    clsp::CLSP_Log::~CLSP_Log(result);
    JUMPOUT(0x1BCC95CECLL);
  }
  return result;
}

void std::__shared_ptr_emplace<clsp::CLSPKernel_Logs>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E69DB658;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<clsp::CLSPKernel_Logs>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E69DB658;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1BCC95CECLL);
}

uint64_t std::__shared_ptr_emplace<clsp::CLSPKernel_Logs>::__on_zero_shared(uint64_t a1)
{
  uint64_t v2;

  v2 = a1 + 24;
  std::shared_ptr<vp::services::Telephony_Utility>::~shared_ptr[abi:ne180100](a1 + 200);
  std::shared_ptr<vp::services::Telephony_Utility>::~shared_ptr[abi:ne180100](a1 + 184);
  std::shared_ptr<vp::services::Telephony_Utility>::~shared_ptr[abi:ne180100](a1 + 168);
  std::shared_ptr<vp::services::Telephony_Utility>::~shared_ptr[abi:ne180100](a1 + 152);
  std::shared_ptr<vp::services::Telephony_Utility>::~shared_ptr[abi:ne180100](a1 + 136);
  std::shared_ptr<vp::services::Telephony_Utility>::~shared_ptr[abi:ne180100](a1 + 120);
  std::shared_ptr<vp::services::Telephony_Utility>::~shared_ptr[abi:ne180100](a1 + 104);
  std::shared_ptr<vp::services::Telephony_Utility>::~shared_ptr[abi:ne180100](a1 + 88);
  std::shared_ptr<vp::services::Telephony_Utility>::~shared_ptr[abi:ne180100](a1 + 72);
  std::shared_ptr<vp::services::Telephony_Utility>::~shared_ptr[abi:ne180100](a1 + 56);
  std::shared_ptr<vp::services::Telephony_Utility>::~shared_ptr[abi:ne180100](a1 + 40);
  return std::shared_ptr<vp::services::Telephony_Utility>::~shared_ptr[abi:ne180100](v2);
}

void CAExtAudioFile::Create(ExtAudioFileRef *this, const char *__s, const AudioStreamBasicDescription *a3, const AudioStreamBasicDescription *a4, const AudioChannelLayout *a5)
{
  CFIndex v8;
  CFURLRef v9;
  const __CFURL *v10;
  uint64_t v11;
  CAXException *exception;
  _BYTE v13[16];
  uint8_t buf[4];
  const char *v15;
  __int16 v16;
  int v17;
  __int16 v18;
  _BYTE *v19;
  __int16 v20;
  const char *v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  v8 = strlen(__s);
  v9 = CFURLCreateFromFileSystemRepresentation(0, (const UInt8 *)__s, v8, 0);
  if (!v9)
  {
    if (os_log_type_enabled(0, OS_LOG_TYPE_ERROR))
    {
      CAX4CCString::CAX4CCString((CAX4CCString *)v13, 0xFFFFFFFF);
      *(_DWORD *)buf = 136315906;
      v15 = "CAExtAudioFile.h";
      v16 = 1024;
      v17 = 65;
      v18 = 2080;
      v19 = v13;
      v20 = 2080;
      v21 = "couldn't convert path to CFURLRef";
      _os_log_impl(&dword_1B5ED0000, 0, OS_LOG_TYPE_ERROR, "%25s:%-5d about to throw %s: %s", buf, 0x26u);
    }
    exception = (CAXException *)__cxa_allocate_exception(0x110uLL);
    CAXException::CAXException(exception, "couldn't convert path to CFURLRef", -1);
  }
  v10 = v9;
  CAExtAudioFile::Close((CAExtAudioFile *)this);
  v11 = ExtAudioFileCreateWithURL(v10, 0x63616666u, a3, 0, 1u, this + 1);
  if ((_DWORD)v11)
    CFRelease(v10);
  (*((void (**)(ExtAudioFileRef *, uint64_t, const char *))*this + 2))(this, v11, "ExtAudioFileCreateWithURL");
  CFRelease(v10);
}

void sub_1B6437868(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

char *CAXException::FormatError(CAXException *this, char *a2, size_t a3)
{
  char __source[16];
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  CAX4CCString::CAX4CCString((CAX4CCString *)__source, this);
  strlcpy(a2, __source, a3);
  return a2;
}

uint64_t *cpms::controllers::Power<float,cpms::smoothers::Exponential,clsp::AttackRelease>::GainGroup::GainGroup(uint64_t a1, int a2, uint64_t a3, uint64_t *a4, _QWORD *a5, float a6)
{
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  _QWORD *v15;
  char **v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  char *v21;
  char *v22;
  unint64_t v23;
  _BYTE *v24;
  _BYTE *v25;
  _BYTE *v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  char *v31;
  char *v32;
  char *v33;
  uint64_t v34;
  char *v35;
  _BYTE *v36;
  _QWORD *v37;
  _BYTE *v38;
  void *v39;
  void **v40;
  float v41;
  void *v42;
  char *v43;
  char *v44;
  float v45;
  char *v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  char *v52;
  float *v53;
  char *v54;
  char *v55;
  float *v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  uint64_t *v61;
  void **v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  char *v66;
  _DWORD *v67;
  char *v68;
  uint64_t v69;
  unint64_t v70;
  uint64_t v71;
  unint64_t v72;
  char *v73;
  char *v74;
  int v75;
  float v76;
  float v77;
  unint64_t v78;
  char *v79;
  _BYTE *v80;
  unint64_t v81;
  _BYTE *v82;
  char *v83;
  unint64_t v84;
  unint64_t v85;
  unint64_t v86;
  unint64_t v87;
  uint64_t v88;
  uint64_t v89;
  unint64_t v90;
  unint64_t v91;
  unint64_t v92;
  unint64_t v93;
  uint64_t v94;
  unint64_t v95;
  unint64_t v96;
  __int128 v97;
  _BYTE *v98;
  char *v99;
  char *v100;
  _BYTE *v101;
  __int128 v102;
  uint64_t v103;
  uint64_t v104;
  unint64_t v105;
  unsigned int v106;
  uint64_t *v108;
  _QWORD *v109;
  uint64_t v110;
  _QWORD *v111;
  uint64_t v112;
  uint64_t *v113;
  void *v114;
  char *v115;
  uint64_t v116;
  void *__p;
  _BYTE *v118;
  _QWORD *v119;
  char *v120;
  uint64_t v121;

  v10 = (uint64_t *)a1;
  v11 = a1 + 8;
  *(_QWORD *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 40) = 1065353216;
  if (a2 == 1)
  {
    v60 = operator new();
    __p = 0;
    v118 = 0;
    v119 = 0;
    v110 = v11;
    std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&__p, *(const void **)a3, *(_QWORD *)(a3 + 8), (uint64_t)(*(_QWORD *)(a3 + 8) - *(_QWORD *)a3) >> 2);
    *(_QWORD *)v60 = &off_1E69DB618;
    *(_QWORD *)(v60 + 8) = 0;
    *(_QWORD *)(v60 + 16) = 0;
    *(_QWORD *)(v60 + 24) = 0;
    std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>((_QWORD *)(v60 + 8), __p, (uint64_t)v118, (v118 - (_BYTE *)__p) >> 2);
    v109 = a5;
    v61 = v10;
    *(_QWORD *)(v60 + 32) = 0;
    *(_QWORD *)(v60 + 40) = 0;
    *(_QWORD *)(v60 + 48) = 0;
    *(_OWORD *)(v60 + 64) = 0u;
    v62 = (void **)(v60 + 64);
    *(_OWORD *)(v60 + 80) = 0u;
    *(_OWORD *)(v60 + 96) = 0u;
    LODWORD(v114) = 0;
    std::vector<float>::assign((char **)(v60 + 32), (v118 - (_BYTE *)__p) >> 2, &v114);
    v63 = *a4;
    v64 = a4[1];
    if (*a4 == v64)
    {
LABEL_119:
      if (__p)
      {
        v118 = __p;
        operator delete(__p);
      }
      v10 = v61;
      v103 = *v61;
      *v61 = v60;
      goto LABEL_125;
    }
    while (1)
    {
      v66 = *(char **)(v60 + 72);
      v65 = *(_QWORD *)(v60 + 80);
      if ((unint64_t)v66 >= v65)
      {
        v68 = (char *)*v62;
        v69 = (v66 - (_BYTE *)*v62) >> 2;
        v70 = v69 + 1;
        if ((unint64_t)(v69 + 1) >> 62)
          std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
        v71 = v65 - (_QWORD)v68;
        if (v71 >> 1 > v70)
          v70 = v71 >> 1;
        if ((unint64_t)v71 >= 0x7FFFFFFFFFFFFFFCLL)
          v72 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v72 = v70;
        if (v72)
        {
          v73 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v60 + 80, v72);
          v68 = *(char **)(v60 + 64);
          v66 = *(char **)(v60 + 72);
        }
        else
        {
          v73 = 0;
        }
        v74 = &v73[4 * v69];
        *(_DWORD *)v74 = 0;
        v67 = v74 + 4;
        while (v66 != v68)
        {
          v75 = *((_DWORD *)v66 - 1);
          v66 -= 4;
          *((_DWORD *)v74 - 1) = v75;
          v74 -= 4;
        }
        *(_QWORD *)(v60 + 64) = v74;
        *(_QWORD *)(v60 + 72) = v67;
        *(_QWORD *)(v60 + 80) = &v73[4 * v72];
        if (v68)
          operator delete(v68);
      }
      else
      {
        *(_DWORD *)v66 = 0;
        v67 = v66 + 4;
      }
      *(_QWORD *)(v60 + 72) = v67;
      if (*(_BYTE *)(v63 + 28))
      {
        v76 = expf(-1.0 / (float)(*(float *)(v63 + 24) * a6));
        v77 = v76;
        v79 = *(char **)(v60 + 96);
        v78 = *(_QWORD *)(v60 + 104);
        if ((unint64_t)v79 >= v78)
        {
          v83 = *(char **)(v60 + 88);
          v84 = 0xCCCCCCCCCCCCCCCDLL * ((v79 - v83) >> 2);
          v85 = v84 + 1;
          if (v84 + 1 > 0xCCCCCCCCCCCCCCCLL)
            std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
          v86 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v78 - (_QWORD)v83) >> 2);
          if (2 * v86 > v85)
            v85 = 2 * v86;
          if (v86 >= 0x666666666666666)
            v87 = 0xCCCCCCCCCCCCCCCLL;
          else
            v87 = v85;
          if (v87)
          {
            v87 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::optional<cpms::smoothers::Exponential<float>>>>(v87);
            v83 = *(char **)(v60 + 88);
            v79 = *(char **)(v60 + 96);
          }
          else
          {
            v88 = 0;
          }
          v95 = v87 + 20 * v84;
          *(_DWORD *)v95 = 0;
          *(float *)(v95 + 4) = v77;
          *(float *)(v95 + 8) = a6;
          *(_BYTE *)(v95 + 12) = 1;
          *(_BYTE *)(v95 + 16) = 1;
          v96 = v95;
          if (v79 != v83)
          {
            do
            {
              v97 = *(_OWORD *)(v79 - 20);
              *(_BYTE *)(v96 - 4) = *(v79 - 4);
              *(_OWORD *)(v96 - 20) = v97;
              v96 -= 20;
              v79 -= 20;
            }
            while (v79 != v83);
            v83 = *(char **)(v60 + 88);
          }
          v80 = (_BYTE *)(v95 + 20);
          *(_QWORD *)(v60 + 88) = v96;
          *(_QWORD *)(v60 + 96) = v95 + 20;
          *(_QWORD *)(v60 + 104) = v87 + 20 * v88;
          if (!v83)
            goto LABEL_118;
          goto LABEL_117;
        }
        *(_DWORD *)v79 = 0;
        *((float *)v79 + 1) = v76;
        *((float *)v79 + 2) = a6;
        v79[12] = 1;
        v80 = v79 + 20;
        v79[16] = 1;
      }
      else
      {
        v82 = *(_BYTE **)(v60 + 96);
        v81 = *(_QWORD *)(v60 + 104);
        if ((unint64_t)v82 >= v81)
        {
          v89 = *(_QWORD *)(v60 + 88);
          v90 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)&v82[-v89] >> 2);
          v91 = v90 + 1;
          if (v90 + 1 > 0xCCCCCCCCCCCCCCCLL)
            std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
          v92 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v81 - v89) >> 2);
          if (2 * v92 > v91)
            v91 = 2 * v92;
          if (v92 >= 0x666666666666666)
            v93 = 0xCCCCCCCCCCCCCCCLL;
          else
            v93 = v91;
          if (v93)
            v93 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::optional<cpms::smoothers::Exponential<float>>>>(v93);
          else
            v94 = 0;
          v98 = (_BYTE *)(v93 + 20 * v90);
          *v98 = 0;
          v98[16] = 0;
          v100 = *(char **)(v60 + 88);
          v99 = *(char **)(v60 + 96);
          v101 = v98;
          if (v99 != v100)
          {
            do
            {
              v102 = *(_OWORD *)(v99 - 20);
              *(v101 - 4) = *(v99 - 4);
              *(_OWORD *)(v101 - 20) = v102;
              v101 -= 20;
              v99 -= 20;
            }
            while (v99 != v100);
            v99 = *(char **)(v60 + 88);
          }
          v80 = v98 + 20;
          *(_QWORD *)(v60 + 88) = v101;
          *(_QWORD *)(v60 + 96) = v98 + 20;
          *(_QWORD *)(v60 + 104) = v93 + 20 * v94;
          if (!v99)
            goto LABEL_118;
          v83 = v99;
LABEL_117:
          operator delete(v83);
          goto LABEL_118;
        }
        *v82 = 0;
        v82[16] = 0;
        v80 = v82 + 20;
      }
LABEL_118:
      *(_QWORD *)(v60 + 96) = v80;
      v63 += 32;
      if (v63 == v64)
        goto LABEL_119;
    }
  }
  if (a2)
    goto LABEL_127;
  v12 = operator new();
  v114 = 0;
  v115 = 0;
  v116 = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v114, *(const void **)a3, *(_QWORD *)(a3 + 8), (uint64_t)(*(_QWORD *)(a3 + 8) - *(_QWORD *)a3) >> 2);
  v109 = a5;
  v110 = v11;
  *(_QWORD *)v12 = off_1E69DB5D8;
  *(_QWORD *)(v12 + 8) = 0;
  *(_QWORD *)(v12 + 16) = 0;
  *(_QWORD *)(v12 + 24) = 0;
  v108 = v10;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>((_QWORD *)(v12 + 8), v114, (uint64_t)v115, (v115 - (_BYTE *)v114) >> 2);
  *(_OWORD *)(v12 + 32) = 0u;
  *(_OWORD *)(v12 + 48) = 0u;
  *(_OWORD *)(v12 + 64) = 0u;
  v113 = (uint64_t *)(v12 + 32);
  v13 = *a4;
  v112 = a4[1];
  if (*a4 != v112)
  {
    v111 = (_QWORD *)(v12 + 56);
    do
    {
      v15 = *(_QWORD **)(v12 + 40);
      v14 = *(_QWORD *)(v12 + 48);
      if ((unint64_t)v15 >= v14)
      {
        v17 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v15 - *v113) >> 3);
        v18 = v17 + 1;
        if (v17 + 1 > 0xAAAAAAAAAAAAAAALL)
          std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
        v19 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v14 - *v113) >> 3);
        if (2 * v19 > v18)
          v18 = 2 * v19;
        if (v19 >= 0x555555555555555)
          v20 = 0xAAAAAAAAAAAAAAALL;
        else
          v20 = v18;
        v121 = v12 + 48;
        if (v20)
          v21 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::__fs::filesystem::path>>(v12 + 48, v20);
        else
          v21 = 0;
        v22 = &v21[24 * v17];
        __p = v21;
        v118 = v22;
        v120 = &v21[24 * v20];
        *(_QWORD *)v22 = 0;
        *((_QWORD *)v22 + 1) = 0;
        *((_QWORD *)v22 + 2) = 0;
        v119 = v22 + 24;
        std::vector<std::vector<float>>::__swap_out_circular_buffer(v113, &__p);
        v16 = *(char ***)(v12 + 40);
        std::__split_buffer<std::vector<float>>::~__split_buffer((uint64_t)&__p);
      }
      else
      {
        *v15 = 0;
        v15[1] = 0;
        v15[2] = 0;
        v16 = (char **)(v15 + 3);
        *(_QWORD *)(v12 + 40) = v15 + 3;
      }
      *(_QWORD *)(v12 + 40) = v16;
      LODWORD(__p) = 0;
      std::vector<float>::assign(v16 - 3, (v115 - (_BYTE *)v114) >> 2, &__p);
      v24 = *(_BYTE **)(v12 + 64);
      v23 = *(_QWORD *)(v12 + 72);
      if ((unint64_t)v24 >= v23)
      {
        v26 = (_BYTE *)*v111;
        v27 = (uint64_t)&v24[-*v111] >> 5;
        v28 = v27 + 1;
        if ((unint64_t)(v27 + 1) >> 59)
          std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
        v29 = v23 - (_QWORD)v26;
        if (v29 >> 4 > v28)
          v28 = v29 >> 4;
        if ((unint64_t)v29 >= 0x7FFFFFFFFFFFFFE0)
          v30 = 0x7FFFFFFFFFFFFFFLL;
        else
          v30 = v28;
        if (v30)
        {
          if (v30 >> 59)
            std::__throw_bad_array_new_length[abi:ne180100]();
          v31 = (char *)operator new(32 * v30);
        }
        else
        {
          v31 = 0;
        }
        v32 = &v31[32 * v27];
        v33 = &v31[32 * v30];
        *v32 = 0;
        v32[24] = 0;
        v25 = v32 + 32;
        if (v24 == v26)
        {
          *(_QWORD *)(v12 + 56) = v32;
          *(_QWORD *)(v12 + 64) = v25;
          *(_QWORD *)(v12 + 72) = v33;
          if (!v24)
            goto LABEL_42;
        }
        else
        {
          v34 = 0;
          do
          {
            v35 = &v32[v34];
            v32[v34 - 32] = 0;
            v36 = &v24[v34];
            v32[v34 - 8] = 0;
            if (v24[v34 - 8])
            {
              v37 = v36 - 32;
              *(_QWORD *)&v32[v34 - 32] = 0;
              *(_QWORD *)&v32[v34 - 24] = 0;
              *(_QWORD *)&v32[v34 - 16] = 0;
              *((_OWORD *)v35 - 2) = *((_OWORD *)v36 - 2);
              *((_QWORD *)v35 - 2) = *((_QWORD *)v36 - 2);
              *v37 = 0;
              v37[1] = 0;
              v37[2] = 0;
              *(v35 - 8) = 1;
            }
            v34 -= 32;
          }
          while (&v24[v34] != v26);
          v38 = *(_BYTE **)(v12 + 56);
          v24 = *(_BYTE **)(v12 + 64);
          *(_QWORD *)(v12 + 56) = &v32[v34];
          *(_QWORD *)(v12 + 64) = v25;
          *(_QWORD *)(v12 + 72) = v33;
          if (v24 != v38)
          {
            do
            {
              if (*(v24 - 8))
              {
                v39 = (void *)*((_QWORD *)v24 - 4);
                if (v39)
                {
                  *((_QWORD *)v24 - 3) = v39;
                  operator delete(v39);
                }
              }
              v24 -= 32;
            }
            while (v24 != v38);
            v24 = v38;
          }
          if (!v24)
            goto LABEL_42;
        }
        operator delete(v24);
      }
      else
      {
        *v24 = 0;
        v24[24] = 0;
        v25 = v24 + 32;
        *(_QWORD *)(v12 + 64) = v24 + 32;
      }
LABEL_42:
      *(_QWORD *)(v12 + 64) = v25;
      if (*(_BYTE *)(v13 + 28))
      {
        v40 = (void **)(v25 - 32);
        v41 = *(float *)(v13 + 24);
        if (*(v25 - 8))
        {
          v42 = *v40;
          if (*v40)
          {
            *((_QWORD *)v25 - 3) = v42;
            operator delete(v42);
          }
        }
        *v40 = 0;
        *((_QWORD *)v25 - 3) = 0;
        *((_QWORD *)v25 - 2) = 0;
        *(v25 - 8) = 1;
        v43 = (char *)v114;
        v44 = v115;
        if (v114 != v115)
        {
          v45 = expf(-1.0 / (float)(v41 * a6));
          v46 = 0;
          do
          {
            v47 = *((_QWORD *)v25 - 2);
            if ((unint64_t)v46 >= v47)
            {
              v48 = (v46 - (_BYTE *)*v40) >> 4;
              if ((unint64_t)(v48 + 1) >> 60)
                std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
              v49 = v47 - (_QWORD)*v40;
              v50 = v49 >> 3;
              if (v49 >> 3 <= (unint64_t)(v48 + 1))
                v50 = v48 + 1;
              if ((unint64_t)v49 >= 0x7FFFFFFFFFFFFFF0)
                v51 = 0xFFFFFFFFFFFFFFFLL;
              else
                v51 = v50;
              if (v51 >> 60)
                std::__throw_bad_array_new_length[abi:ne180100]();
              v52 = (char *)operator new(16 * v51);
              v53 = (float *)&v52[16 * v48];
              *v53 = 0.0;
              v53[1] = v45;
              v53[2] = a6;
              *((_BYTE *)v53 + 12) = 1;
              v55 = (char *)*((_QWORD *)v25 - 4);
              v54 = (char *)*((_QWORD *)v25 - 3);
              v56 = v53;
              if (v54 != v55)
              {
                do
                {
                  v57 = *((_QWORD *)v54 - 2);
                  v54 -= 16;
                  v58 = *(_QWORD *)(v54 + 5);
                  *((_QWORD *)v56 - 2) = v57;
                  v56 -= 4;
                  *(_QWORD *)((char *)v56 + 5) = v58;
                }
                while (v54 != v55);
                v54 = (char *)*v40;
              }
              v59 = &v52[16 * v51];
              v46 = (char *)(v53 + 4);
              *((_QWORD *)v25 - 4) = v56;
              *((_QWORD *)v25 - 3) = v53 + 4;
              *((_QWORD *)v25 - 2) = v59;
              if (v54)
                operator delete(v54);
            }
            else
            {
              *(_DWORD *)v46 = 0;
              *((float *)v46 + 1) = v45;
              *((float *)v46 + 2) = a6;
              v46[12] = 1;
              v46 += 16;
            }
            *((_QWORD *)v25 - 3) = v46;
            v43 += 4;
          }
          while (v43 != v44);
        }
      }
      v13 += 32;
    }
    while (v13 != v112);
  }
  if (v114)
  {
    v115 = (char *)v114;
    operator delete(v114);
  }
  v10 = v108;
  v103 = *v108;
  *v108 = v12;
LABEL_125:
  a5 = v109;
  v11 = v110;
  if (v103)
    (*(void (**)(uint64_t))(*(_QWORD *)v103 + 8))(v103);
LABEL_127:
  v104 = *a5;
  if (a5[1] != *a5)
  {
    v105 = 0;
    v106 = 1;
    do
    {
      __p = (void *)(v104 + 4 * v105);
      *((_DWORD *)std::__hash_table<std::__hash_value_type<unsigned int,unsigned int>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,unsigned int>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>(v11, (unsigned int *)__p, (uint64_t)&std::piecewise_construct, (_DWORD **)&__p)+ 5) = v106 - 1;
      v105 = v106;
      v104 = *a5;
      ++v106;
    }
    while (v105 < (uint64_t)(a5[1] - *a5) >> 2);
  }
  return v10;
}

void sub_1B64381F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void **a14, void **a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25)
{
  uint64_t *v25;
  _QWORD *v26;
  void **v27;
  void *v29;
  void *v30;
  void *v31;
  void *v32;
  uint64_t v33;

  v29 = (void *)v26[11];
  if (v29)
  {
    v26[12] = v29;
    operator delete(v29);
  }
  v30 = *v27;
  if (*v27)
  {
    v26[9] = v30;
    operator delete(v30);
  }
  v31 = *a14;
  if (*a14)
  {
    v26[5] = v31;
    operator delete(v31);
  }
  v32 = *a15;
  if (*a15)
  {
    v26[2] = v32;
    operator delete(v32);
  }
  if (__p)
    operator delete(__p);
  MEMORY[0x1BCC95CEC](v26, 0x10B1C40C9592582);
  std::__hash_table<vp::vx::io::Object_ID<vp::vx::io::Node>,std::hash<vp::vx::io::Object_ID<vp::vx::io::Node>>,std::equal_to<vp::vx::io::Object_ID<vp::vx::io::Node>>,std::allocator<vp::vx::io::Object_ID<vp::vx::io::Node>>>::~__hash_table(a12);
  v33 = *v25;
  *v25 = 0;
  if (v33)
    (*(void (**)(uint64_t))(*(_QWORD *)v33 + 8))(v33);
  _Unwind_Resume(a1);
}

void boost::container::vector<cpms::controllers::Power<float,cpms::smoothers::Exponential,clsp::AttackRelease>::GainGroup,boost::container::small_vector_allocator<cpms::controllers::Power<float,cpms::smoothers::Exponential,clsp::AttackRelease>::GainGroup,boost::container::new_allocator<void>,void>,void>::priv_insert_forward_range_no_capacity<boost::container::dtl::insert_emplace_proxy<boost::container::small_vector_allocator<cpms::controllers::Power<float,cpms::smoothers::Exponential,clsp::AttackRelease>::GainGroup,boost::container::new_allocator<void>,void>,cpms::controllers::Power<float,cpms::smoothers::Exponential,clsp::AttackRelease>::GainGroup*,float const&,cpms::controllers::Power<float,cpms::smoothers::Exponential,clsp::AttackRelease>::SmoothingStrategy &,std::vector<unsigned int> const&,std::vector<cpms::TimeScale<float>> &,std::vector<unsigned int> const&>>(_QWORD *a1, uint64_t **a2, uint64_t *a3, uint64_t a4)
{
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t v13;
  float *v14;
  int *v15;
  uint64_t *v16;
  uint64_t *v17;
  uint64_t *v18;
  uint64_t *v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  unint64_t v33;
  uint64_t *v35;
  _QWORD *v36;
  uint64_t *v37;
  uint64_t *v38;
  uint64_t **v39;

  v4 = (unint64_t)a2[2];
  if ((uint64_t *)v4 != a2[1])
    __assert_rtn("next_capacity", "vector.hpp", 473, "additional_objects > size_type(this->m_capacity - this->m_size)");
  if (v4 == 0x2AAAAAAAAAAAAAALL)
    goto LABEL_31;
  if (v4 >> 61 > 4)
    v5 = -1;
  else
    v5 = 8 * v4;
  if (v4 >> 61)
    v6 = v5;
  else
    v6 = 8 * v4 / 5;
  if (v6 >= 0x2AAAAAAAAAAAAAALL)
    v6 = 0x2AAAAAAAAAAAAAALL;
  v7 = v4 + 1 > v6 ? v4 + 1 : v6;
  if (v7 > 0x2AAAAAAAAAAAAAALL)
LABEL_31:
    boost::container::throw_length_error((boost::container *)"get_next_capacity, allocator's max size reached", (const char *)a2);
  v33 = v7;
  v32 = *a2;
  v11 = (uint64_t *)operator new(48 * v7);
  v12 = v11;
  v13 = *(_QWORD *)(a4 + 16);
  v35 = *(uint64_t **)(a4 + 8);
  v36 = *(_QWORD **)a4;
  v15 = *(int **)(a4 + 24);
  v14 = *(float **)(a4 + 32);
  v17 = *a2;
  v16 = a2[1];
  v37 = v11;
  v39 = a2;
  v18 = v11;
  if (v17 != a3)
  {
    v19 = v17;
    v18 = v11;
    do
    {
      v20 = v19 + 1;
      v21 = *v19;
      *v19 = 0;
      v19 += 6;
      v22 = (uint64_t)(v18 + 1);
      *v18 = v21;
      v18 += 6;
      std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__hash_table(v22, v20);
    }
    while (v19 != a3);
  }
  v38 = v18;
  cpms::controllers::Power<float,cpms::smoothers::Exponential,clsp::AttackRelease>::GainGroup::GainGroup((uint64_t)v18, *v15, v13, v35, v36, *v14);
  v23 = &v17[6 * (_QWORD)v16];
  if (v23 != a3)
  {
    v24 = (uint64_t)(v18 + 7);
    v25 = a3;
    do
    {
      v26 = v25 + 1;
      v27 = *v25;
      *v25 = 0;
      v25 += 6;
      *(_QWORD *)(v24 - 8) = v27;
      v24 = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__hash_table(v24, v26)+ 48;
    }
    while (v25 != v23);
  }
  v37 = 0;
  v38 = 0;
  boost::container::dtl::scoped_destructor_range<boost::container::small_vector_allocator<cpms::controllers::Power<float,cpms::smoothers::Exponential,clsp::AttackRelease>::GainGroup,boost::container::new_allocator<void>,void>>::~scoped_destructor_range(&v37);
  if (v17)
  {
    v28 = a2[1];
    if (v28)
    {
      v29 = (uint64_t)(v17 + 1);
      do
      {
        std::__hash_table<vp::vx::io::Object_ID<vp::vx::io::Node>,std::hash<vp::vx::io::Object_ID<vp::vx::io::Node>>,std::equal_to<vp::vx::io::Object_ID<vp::vx::io::Node>>,std::allocator<vp::vx::io::Object_ID<vp::vx::io::Node>>>::~__hash_table(v29);
        v30 = *(_QWORD *)(v29 - 8);
        *(_QWORD *)(v29 - 8) = 0;
        if (v30)
          (*(void (**)(uint64_t))(*(_QWORD *)v30 + 8))(v30);
        v29 += 48;
        v28 = (uint64_t *)((char *)v28 - 1);
      }
      while (v28);
    }
    if (a2 + 3 != (uint64_t **)*a2)
      operator delete(*a2);
  }
  v31 = (uint64_t)a2[1] + 1;
  *a2 = v12;
  a2[1] = (uint64_t *)v31;
  a2[2] = (uint64_t *)v33;
  *a1 = (char *)v12 + (char *)a3 - (char *)v32;
}

void sub_1B64385A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  uint64_t v6;
  void *v7;
  va_list va;

  va_start(va, a6);
  boost::container::dtl::scoped_destructor_range<boost::container::small_vector_allocator<cpms::controllers::Power<float,cpms::smoothers::Exponential,clsp::AttackRelease>::GainGroup,boost::container::new_allocator<void>,void>>::~scoped_destructor_range((uint64_t **)va);
  if ((void *)(v6 + 24) != v7)
    operator delete(v7);
  _Unwind_Resume(a1);
}

uint64_t boost::container::vec_iterator<cpms::controllers::Power<float,cpms::smoothers::Exponential,clsp::AttackRelease>::GainGroup *,false>::operator*(uint64_t result)
{
  if (!result)
    __assert_rtn("operator*", "vector.hpp", 156, "!!m_ptr");
  return result;
}

uint64_t **boost::container::dtl::scoped_destructor_range<boost::container::small_vector_allocator<cpms::controllers::Power<float,cpms::smoothers::Exponential,clsp::AttackRelease>::GainGroup,boost::container::new_allocator<void>,void>>::~scoped_destructor_range(uint64_t **a1)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t *v4;

  v2 = *a1;
  if (*a1 != a1[1])
  {
    do
    {
      std::__hash_table<vp::vx::io::Object_ID<vp::vx::io::Node>,std::hash<vp::vx::io::Object_ID<vp::vx::io::Node>>,std::equal_to<vp::vx::io::Object_ID<vp::vx::io::Node>>,std::allocator<vp::vx::io::Object_ID<vp::vx::io::Node>>>::~__hash_table((uint64_t)(v2 + 1));
      v3 = *v2;
      *v2 = 0;
      if (v3)
        (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
      v4 = a1[1];
      v2 = *a1 + 6;
      *a1 = v2;
    }
    while (v2 != v4);
  }
  return a1;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<std::optional<cpms::smoothers::Exponential<float>>>>(unint64_t a1)
{
  if (a1 >= 0xCCCCCCCCCCCCCCDLL)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(20 * a1);
}

_QWORD *cpms::controllers::Power<float,cpms::smoothers::Exponential,clsp::AttackRelease>::PostSmoothedGainModel::~PostSmoothedGainModel(_QWORD *a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  *a1 = &off_1E69DB618;
  v2 = (void *)a1[11];
  if (v2)
  {
    a1[12] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[8];
  if (v3)
  {
    a1[9] = v3;
    operator delete(v3);
  }
  v4 = (void *)a1[4];
  if (v4)
  {
    a1[5] = v4;
    operator delete(v4);
  }
  v5 = (void *)a1[1];
  if (v5)
  {
    a1[2] = v5;
    operator delete(v5);
  }
  return a1;
}

void cpms::controllers::Power<float,cpms::smoothers::Exponential,clsp::AttackRelease>::PostSmoothedGainModel::~PostSmoothedGainModel(_QWORD *a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  *a1 = &off_1E69DB618;
  v2 = (void *)a1[11];
  if (v2)
  {
    a1[12] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[8];
  if (v3)
  {
    a1[9] = v3;
    operator delete(v3);
  }
  v4 = (void *)a1[4];
  if (v4)
  {
    a1[5] = v4;
    operator delete(v4);
  }
  v5 = (void *)a1[1];
  if (v5)
  {
    a1[2] = v5;
    operator delete(v5);
  }
  JUMPOUT(0x1BCC95CECLL);
}

void cpms::controllers::Power<float,cpms::smoothers::Exponential,clsp::AttackRelease>::PostSmoothedGainModel::preProcess(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;

  v3 = *(_QWORD *)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 16);
  v5 = v4 - v3;
  if (v4 != v3)
  {
    v6 = 0;
    v7 = v5 >> 2;
    v8 = *(_QWORD *)(a1 + 32);
    do
    {
      *(float *)(v8 + 4 * v6) = fmaxf(*(float *)(a3 + 4 * *(unsigned int *)(v3 + 4 * v6)), 0.0);
      ++v6;
    }
    while (v7 > v6);
  }
  *(float *)(a1 + 56) = (*(float (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 16))(a2, a1 + 32);
}

uint64_t cpms::controllers::Power<float,cpms::smoothers::Exponential,clsp::AttackRelease>::PostSmoothedGainModel::postProcess(uint64_t result, uint64_t a2, unsigned int a3)
{
  float v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *(float *)(result + 56);
  v4 = *(_QWORD *)(result + 64);
  v5 = *(_QWORD *)(result + 88) + 20 * a3;
  if (*(_BYTE *)(v5 + 16))
  {
    if (*(_BYTE *)(v5 + 12))
      *(_BYTE *)(v5 + 12) = 0;
    else
      v3 = (float)(*(float *)(v5 + 4) * *(float *)v5) + (float)((float)(1.0 - *(float *)(v5 + 4)) * v3);
    *(float *)v5 = v3;
  }
  *(float *)(v4 + 4 * a3) = v3;
  return result;
}

float cpms::controllers::Power<float,cpms::smoothers::Exponential,clsp::AttackRelease>::PostSmoothedGainModel::computeGain(uint64_t a1, float a2, uint64_t a3, unsigned int a4)
{
  uint64_t v4;

  v4 = *(_QWORD *)(a1 + 64);
  if (a4 >= (unint64_t)((*(_QWORD *)(a1 + 72) - v4) >> 2))
    std::vector<std::vector<float>>::__throw_out_of_range[abi:ne180100]();
  return a2 / *(float *)(v4 + 4 * a4);
}

float cpms::controllers::Power<float,cpms::smoothers::Exponential,clsp::AttackRelease>::PostSmoothedGainModel::computePower(uint64_t a1, uint64_t a2, unsigned int a3)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 64);
  if (a3 >= (unint64_t)((*(_QWORD *)(a1 + 72) - v3) >> 2))
    std::vector<std::vector<float>>::__throw_out_of_range[abi:ne180100]();
  return *(float *)(v3 + 4 * a3);
}

void std::vector<std::optional<std::vector<cpms::smoothers::Exponential<float>>>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  char *v2;
  char *v4;
  void *v5;
  void *v6;

  v1 = *a1;
  v2 = (char *)**a1;
  if (v2)
  {
    v4 = (char *)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        if (*(v4 - 8))
        {
          v6 = (void *)*((_QWORD *)v4 - 4);
          if (v6)
          {
            *((_QWORD *)v4 - 3) = v6;
            operator delete(v6);
          }
        }
        v4 -= 32;
      }
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t cpms::controllers::Power<float,cpms::smoothers::Exponential,clsp::AttackRelease>::PreSmoothedGainModel::~PreSmoothedGainModel(uint64_t a1)
{
  void *v2;
  void **v4;

  v4 = (void **)(a1 + 56);
  std::vector<std::optional<std::vector<cpms::smoothers::Exponential<float>>>>::__destroy_vector::operator()[abi:ne180100](&v4);
  v4 = (void **)(a1 + 32);
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v4);
  v2 = *(void **)(a1 + 8);
  if (v2)
  {
    *(_QWORD *)(a1 + 16) = v2;
    operator delete(v2);
  }
  return a1;
}

{
  void *v2;
  void **v4;

  v4 = (void **)(a1 + 56);
  std::vector<std::optional<std::vector<cpms::smoothers::Exponential<float>>>>::__destroy_vector::operator()[abi:ne180100](&v4);
  v4 = (void **)(a1 + 32);
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v4);
  v2 = *(void **)(a1 + 8);
  if (v2)
  {
    *(_QWORD *)(a1 + 16) = v2;
    operator delete(v2);
  }
  return MEMORY[0x1BCC95CEC](a1, 0xB1C402726C036);
}

_QWORD *cpms::controllers::Power<float,cpms::smoothers::Exponential,clsp::AttackRelease>::PreSmoothedGainModel::postProcess(_QWORD *result, uint64_t a2, unsigned int a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unsigned int v7;
  float v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v5 = result[1];
  v4 = result[2];
  if (v4 != v5)
  {
    v6 = 0;
    v7 = 1;
    do
    {
      v8 = fmaxf(*(float *)(a4 + 4 * *(unsigned int *)(v5 + 4 * v6)), 0.0);
      v9 = *(_QWORD *)(result[4] + 24 * a3);
      v10 = result[7] + 32 * a3;
      if (*(_BYTE *)(v10 + 24))
      {
        if (v6 >= (uint64_t)(*(_QWORD *)(v10 + 8) - *(_QWORD *)v10) >> 4)
          std::vector<std::vector<float>>::__throw_out_of_range[abi:ne180100]();
        v11 = *(_QWORD *)v10 + 16 * v6;
        if (*(_BYTE *)(v11 + 12))
          *(_BYTE *)(v11 + 12) = 0;
        else
          v8 = (float)(*(float *)(v11 + 4) * *(float *)v11) + (float)((float)(1.0 - *(float *)(v11 + 4)) * v8);
        *(float *)v11 = v8;
        v5 = result[1];
        v4 = result[2];
      }
      *(float *)(v9 + 4 * v6) = v8;
      v6 = v7++;
    }
    while (v6 < (v4 - v5) >> 2);
  }
  return result;
}

uint64_t cpms::controllers::Power<float,cpms::smoothers::Exponential,clsp::AttackRelease>::PreSmoothedGainModel::computeGain(uint64_t a1, uint64_t a2, unsigned int a3, float a4)
{
  uint64_t v4;
  float v6;

  v6 = a4;
  v4 = *(_QWORD *)(a1 + 32);
  if (0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(a1 + 40) - v4) >> 3) <= a3)
    std::vector<std::vector<float>>::__throw_out_of_range[abi:ne180100]();
  return (*(uint64_t (**)(uint64_t, float *, uint64_t))(*(_QWORD *)a2 + 24))(a2, &v6, v4 + 24 * a3);
}

uint64_t cpms::controllers::Power<float,cpms::smoothers::Exponential,clsp::AttackRelease>::PreSmoothedGainModel::computePower(uint64_t a1, uint64_t a2, unsigned int a3)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 32);
  if (0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(a1 + 40) - v3) >> 3) <= a3)
    std::vector<std::vector<float>>::__throw_out_of_range[abi:ne180100]();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 16))(a2, v3 + 24 * a3);
}

uint64_t boost::container::vector<cpms::controllers::Power<float,cpms::smoothers::Exponential,clsp::AttackRelease>::GainGroup,boost::container::small_vector_allocator<cpms::controllers::Power<float,cpms::smoothers::Exponential,clsp::AttackRelease>::GainGroup,boost::container::new_allocator<void>,void>,void>::~vector(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *(_QWORD *)(a1 + 8);
  if (v2)
  {
    v3 = *(_QWORD *)a1 + 8;
    do
    {
      std::__hash_table<vp::vx::io::Object_ID<vp::vx::io::Node>,std::hash<vp::vx::io::Object_ID<vp::vx::io::Node>>,std::equal_to<vp::vx::io::Object_ID<vp::vx::io::Node>>,std::allocator<vp::vx::io::Object_ID<vp::vx::io::Node>>>::~__hash_table(v3);
      v4 = *(_QWORD *)(v3 - 8);
      *(_QWORD *)(v3 - 8) = 0;
      if (v4)
        (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
      v3 += 48;
      --v2;
    }
    while (v2);
  }
  if (*(_QWORD *)(a1 + 16) && a1 + 24 != *(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t boost::container::vector<cpms::TimeScale<float>,boost::container::small_vector_allocator<cpms::TimeScale<float>,boost::container::new_allocator<void>,void>,void>::~vector(uint64_t a1)
{
  uint64_t v2;
  CFTypeRef *v3;

  v2 = *(_QWORD *)(a1 + 8);
  if (v2)
  {
    v3 = *(CFTypeRef **)a1;
    do
    {
      if (*v3)
        CFRelease(*v3);
      v3 += 4;
      --v2;
    }
    while (v2);
  }
  if (*(_QWORD *)(a1 + 16) && a1 + 24 != *(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void boost::container::vector<clsp::AttackRelease<float,float>,boost::container::small_vector_allocator<clsp::AttackRelease<float,float>,boost::container::new_allocator<void>,void>,void>::priv_insert_forward_range_no_capacity<boost::container::dtl::insert_emplace_proxy<boost::container::small_vector_allocator<clsp::AttackRelease<float,float>,boost::container::new_allocator<void>,void>,clsp::AttackRelease<float,float>*>>(_QWORD *a1, char *a2, uint64_t *a3)
{
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t *v10;
  char *v11;
  char *v12;
  uint64_t *v13;
  uint64_t v14;
  char *v15;
  char *v16;

  v3 = *((_QWORD *)a2 + 2);
  if (v3 != *((_QWORD *)a2 + 1))
    __assert_rtn("next_capacity", "vector.hpp", 473, "additional_objects > size_type(this->m_capacity - this->m_size)");
  if (v3 == 0x555555555555555)
    goto LABEL_26;
  if (v3 >> 61 > 4)
    v4 = -1;
  else
    v4 = 8 * v3;
  if (v3 >> 61)
    v5 = v4;
  else
    v5 = 8 * v3 / 5;
  if (v5 >= 0x555555555555555)
    v5 = 0x555555555555555;
  v6 = v3 + 1 > v5 ? v3 + 1 : v5;
  if (v6 > 0x555555555555555)
LABEL_26:
    boost::container::throw_length_error((boost::container *)"get_next_capacity, allocator's max size reached", a2);
  v10 = *(uint64_t **)a2;
  v11 = (char *)operator new(24 * v6);
  v12 = v11;
  v13 = *(uint64_t **)a2;
  v14 = *((_QWORD *)a2 + 1);
  v15 = v11;
  if (*(_QWORD *)a2)
  {
    v15 = v11;
    if (v13 != a3)
    {
      memmove(v11, *(const void **)a2, (char *)a3 - (char *)v13);
      v15 = &v12[(char *)a3 - (char *)v13];
    }
  }
  *((_DWORD *)v15 + 5) = 0;
  *(_QWORD *)v15 = 0;
  *((_QWORD *)v15 + 1) = 0;
  if (a3)
  {
    v16 = (char *)&v13[3 * v14];
    if (v16 != (char *)a3)
      memmove(v15 + 24, a3, v16 - (char *)a3);
  }
  if (v13 && a2 + 24 != (char *)v13)
  {
    operator delete(v13);
    v14 = *((_QWORD *)a2 + 1);
  }
  *(_QWORD *)a2 = v12;
  *((_QWORD *)a2 + 1) = v14 + 1;
  *((_QWORD *)a2 + 2) = v6;
  *a1 = &v12[(char *)a3 - (char *)v10];
}

uint64_t boost::container::vec_iterator<clsp::AttackRelease<float,float> *,false>::operator*(uint64_t result)
{
  if (!result)
    __assert_rtn("operator*", "vector.hpp", 156, "!!m_ptr");
  return result;
}

void std::__shared_ptr_pointer<cpms::efficiency::Dummy<float> *>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1BCC95CECLL);
}

uint64_t std::__shared_ptr_pointer<cpms::efficiency::Dummy<float> *>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void std::vector<std::shared_ptr<clsp::CLSPKernel_v5>>::push_back[abi:ne180100](char **a1, __int128 *a2)
{
  unint64_t v4;
  char *v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  char *v16;
  __int128 v17;
  unint64_t *v18;
  unint64_t v19;
  char *v20;
  __int128 v21;
  int64x2_t v22;
  uint64_t v23;
  void *v24;

  v5 = a1[1];
  v4 = (unint64_t)a1[2];
  if ((unint64_t)v5 >= v4)
  {
    v10 = *a1;
    v11 = (v5 - *a1) >> 4;
    v12 = v11 + 1;
    if ((unint64_t)(v11 + 1) >> 60)
      std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
    v13 = v4 - (_QWORD)v10;
    if (v13 >> 3 > v12)
      v12 = v13 >> 3;
    if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF0)
      v14 = 0xFFFFFFFFFFFFFFFLL;
    else
      v14 = v12;
    if (v14 >> 60)
      std::__throw_bad_array_new_length[abi:ne180100]();
    v15 = (char *)operator new(16 * v14);
    v16 = &v15[16 * v11];
    v17 = *a2;
    *(_OWORD *)v16 = *a2;
    if (*((_QWORD *)&v17 + 1))
    {
      v18 = (unint64_t *)(*((_QWORD *)&v17 + 1) + 8);
      do
        v19 = __ldxr(v18);
      while (__stxr(v19 + 1, v18));
      v10 = *a1;
      v5 = a1[1];
    }
    if (v5 == v10)
    {
      v22 = vdupq_n_s64((unint64_t)v5);
      v20 = &v15[16 * v11];
    }
    else
    {
      v20 = &v15[16 * v11];
      do
      {
        v21 = *((_OWORD *)v5 - 1);
        v5 -= 16;
        *((_OWORD *)v20 - 1) = v21;
        v20 -= 16;
        *(_QWORD *)v5 = 0;
        *((_QWORD *)v5 + 1) = 0;
      }
      while (v5 != v10);
      v22 = *(int64x2_t *)a1;
    }
    v9 = v16 + 16;
    *a1 = v20;
    a1[1] = v16 + 16;
    a1[2] = &v15[16 * v14];
    v23 = v22.i64[1];
    v24 = (void *)v22.i64[0];
    while ((void *)v23 != v24)
      v23 = std::shared_ptr<vp::services::Telephony_Utility>::~shared_ptr[abi:ne180100](v23 - 16);
    if (v24)
      operator delete(v24);
  }
  else
  {
    v6 = *((_QWORD *)a2 + 1);
    *(_QWORD *)v5 = *(_QWORD *)a2;
    *((_QWORD *)v5 + 1) = v6;
    if (v6)
    {
      v7 = (unint64_t *)(v6 + 8);
      do
        v8 = __ldxr(v7);
      while (__stxr(v8 + 1, v7));
    }
    v9 = v5 + 16;
  }
  a1[1] = v9;
}

void clsp::telemetry::utils::PrintNumericVector_impl<std::__wrap_iter<unsigned int const*>,std::__wrap_iter<unsigned int const*>&>(std::string *a1, unsigned int **a2, _QWORD *a3)
{
  unsigned int *v4;
  std::string *v7;
  __int128 v8;
  void **v9;
  std::string::size_type v10;
  std::string *v11;
  __int128 v12;
  uint64_t v13;
  void *__p[2];
  unsigned __int8 v15;
  std::string v16;
  std::string v17;

  v4 = (unsigned int *)(*a3 - 4);
  if (*a2 == v4)
  {
    std::to_string(a1, *v4);
  }
  else
  {
    std::to_string(&v16, **a2);
    v7 = std::string::append(&v16, ", ", 2uLL);
    v8 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
    v17.__r_.__value_.__r.__words[2] = v7->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v17.__r_.__value_.__l.__data_ = v8;
    v7->__r_.__value_.__l.__size_ = 0;
    v7->__r_.__value_.__r.__words[2] = 0;
    v7->__r_.__value_.__r.__words[0] = 0;
    v13 = (uint64_t)(*a2 + 1);
    clsp::telemetry::utils::PrintNumericVector_impl<std::__wrap_iter<unsigned int const*>,std::__wrap_iter<unsigned int const*>&>(__p, &v13, a3);
    if ((v15 & 0x80u) == 0)
      v9 = __p;
    else
      v9 = (void **)__p[0];
    if ((v15 & 0x80u) == 0)
      v10 = v15;
    else
      v10 = (std::string::size_type)__p[1];
    v11 = std::string::append(&v17, (const std::string::value_type *)v9, v10);
    v12 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
    a1->__r_.__value_.__r.__words[2] = v11->__r_.__value_.__r.__words[2];
    *(_OWORD *)&a1->__r_.__value_.__l.__data_ = v12;
    v11->__r_.__value_.__l.__size_ = 0;
    v11->__r_.__value_.__r.__words[2] = 0;
    v11->__r_.__value_.__r.__words[0] = 0;
    if ((char)v15 < 0)
      operator delete(__p[0]);
    if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v17.__r_.__value_.__l.__data_);
    if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v16.__r_.__value_.__l.__data_);
  }
}

void sub_1B64390B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a16 < 0)
    operator delete(__p);
  if (a28 < 0)
    operator delete(a23);
  if (a22 < 0)
    operator delete(a17);
  _Unwind_Resume(exception_object);
}

uint64_t std::__independent_bits_engine<std::mersenne_twister_engine<unsigned int,32ul,624ul,397ul,31ul,2567483615u,11ul,4294967295u,7ul,2636928640u,15ul,4022730752u,18ul,1812433253u>,unsigned long>::__independent_bits_engine(uint64_t result, uint64_t a2, unint64_t a3)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unsigned int v6;
  unsigned int v7;

  *(_QWORD *)result = a2;
  *(_QWORD *)(result + 8) = a3;
  if ((a3 & 0x1F) != 0)
    v3 = (a3 >> 5) + 1;
  else
    v3 = a3 >> 5;
  v4 = a3 / v3;
  *(_QWORD *)(result + 16) = a3 / v3;
  *(_QWORD *)(result + 24) = v3;
  v5 = (-1 << (a3 / v3)) & 0x100000000;
  if (a3 / v3 >= 0x40)
    v5 = 0;
  *(_QWORD *)(result + 40) = v5;
  if ((v5 ^ 0x100000000) > v5 / v3)
  {
    ++v3;
    v4 = a3 / v3;
    *(_QWORD *)(result + 16) = a3 / v3;
    *(_QWORD *)(result + 24) = v3;
    if (a3 / v3 > 0x3F)
    {
      *(_QWORD *)(result + 32) = v3 - a3 + (v3 << 6);
      *(_QWORD *)(result + 40) = 0;
      LOBYTE(v4) = 64;
      goto LABEL_15;
    }
    *(_QWORD *)(result + 40) = (-1 << v4) & 0x100000000;
  }
  *(_QWORD *)(result + 32) = v3 + a3 / v3 * v3 - a3;
  if (v4 >= 0x3F)
  {
LABEL_15:
    *(_QWORD *)(result + 48) = 0;
    v6 = -1;
    *(_DWORD *)(result + 56) = 0xFFFFFFFF >> -(char)v4;
    goto LABEL_16;
  }
  *(_QWORD *)(result + 48) = 0x80000000uLL >> v4 << (v4 + 1);
  v6 = -1;
  v7 = 0xFFFFFFFF >> -(char)v4;
  if (!v4)
    v7 = 0;
  *(_DWORD *)(result + 56) = v7;
  if (v4 <= 0x1E)
    v6 = 0xFFFFFFFF >> ~(_BYTE)v4;
LABEL_16:
  *(_DWORD *)(result + 60) = v6;
  return result;
}

uint64_t std::__independent_bits_engine<std::mersenne_twister_engine<unsigned int,32ul,624ul,397ul,31ul,2567483615u,11ul,4294967295u,7ul,2636928640u,15ul,4022730752u,18ul,1812433253u>,unsigned long>::__eval(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  std::mersenne_twister_engine<unsigned int, 32, 624, 397, 31, 2567483615, 11, 4294967295, 7, 2636928640, 15, 4022730752, 18, 1812433253>::result_type v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  std::mersenne_twister_engine<unsigned int, 32, 624, 397, 31, 2567483615, 11, 4294967295, 7, 2636928640, 15, 4022730752, 18, 1812433253>::result_type v8;
  unint64_t v9;
  uint64_t v10;

  if (*(_QWORD *)(a1 + 32))
  {
    v2 = 0;
    v3 = 0;
    do
    {
      do
        v4 = std::mersenne_twister_engine<unsigned int,32ul,624ul,397ul,31ul,2567483615u,11ul,4294967295u,7ul,2636928640u,15ul,4022730752u,18ul,1812433253u>::operator()(*(std::mersenne_twister_engine<unsigned int, 32, 624, 397, 31, 2567483615, 11, 4294967295, 7, 2636928640, 15, 4022730752, 18, 1812433253> **)a1);
      while (*(_QWORD *)(a1 + 40) <= (unint64_t)v4);
      v5 = *(_QWORD *)(a1 + 16);
      if (v5 >= 0x40)
        v6 = 0;
      else
        v6 = v2 << v5;
      v2 = v6 + (*(_DWORD *)(a1 + 56) & v4);
      ++v3;
      v7 = *(_QWORD *)(a1 + 32);
    }
    while (v3 < v7);
  }
  else
  {
    v2 = 0;
    v7 = 0;
  }
  for (; v7 < *(_QWORD *)(a1 + 24); ++v7)
  {
    do
      v8 = std::mersenne_twister_engine<unsigned int,32ul,624ul,397ul,31ul,2567483615u,11ul,4294967295u,7ul,2636928640u,15ul,4022730752u,18ul,1812433253u>::operator()(*(std::mersenne_twister_engine<unsigned int, 32, 624, 397, 31, 2567483615, 11, 4294967295, 7, 2636928640, 15, 4022730752, 18, 1812433253> **)a1);
    while (*(_QWORD *)(a1 + 48) <= (unint64_t)v8);
    v9 = *(_QWORD *)(a1 + 16);
    if (v9 >= 0x3F)
      v10 = 0;
    else
      v10 = v2 << (v9 + 1);
    v2 = v10 + (*(_DWORD *)(a1 + 60) & v8);
  }
  return v2;
}

void sub_1B64395A0(_Unwind_Exception *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  _Unwind_Resume(a1);
}

void std::vector<std::vector<std::shared_ptr<clsp::CLSPKernel_v5>>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  void **v2;
  void **v4;
  void *v5;
  void **v6;

  v1 = *a1;
  v2 = (void **)**a1;
  if (v2)
  {
    v4 = (void **)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v4 -= 3;
        v6 = v4;
        std::vector<std::shared_ptr<vp::vx::io::Node_Terminal>>::__destroy_vector::operator()[abi:ne180100](&v6);
      }
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::vector<std::unique_ptr<clsp::ClosedLoopParameters>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  _QWORD *v2;
  _QWORD *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v7 = *--v4;
        v6 = v7;
        *v4 = 0;
        if (v7)
          std::default_delete<clsp::ClosedLoopParameters>::operator()[abi:ne180100](v6);
      }
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void CAExtAudioFile::~CAExtAudioFile(CAExtAudioFile *this)
{
  *(_QWORD *)this = &off_1E69DC350;
  CAExtAudioFile::Close(this);
}

{
  *(_QWORD *)this = &off_1E69DC350;
  CAExtAudioFile::Close(this);
  JUMPOUT(0x1BCC95CECLL);
}

void CAExtAudioFile::Check(CAExtAudioFile *this, int a2, const char *a3)
{
  CAXException *exception;
  char __str[128];
  uint64_t v6;

  v6 = *MEMORY[0x1E0C80C00];
  if (a2)
  {
    snprintf(__str, 0x80uLL, "%s failed", a3);
    exception = (CAXException *)__cxa_allocate_exception(0x110uLL);
    CAXException::CAXException(exception, __str, a2);
  }
}

void sub_1B64397CC(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

void CAExtAudioFile::CheckProperty(CAExtAudioFile *this, int a2, const char *a3, int a4)
{
  CAXException *exception;
  char v6[5];
  char __str[128];
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  if (a2)
  {
    v6[0] = HIBYTE(a4);
    v6[1] = BYTE2(a4);
    v6[2] = BYTE1(a4);
    v6[3] = a4;
    v6[4] = 0;
    snprintf(__str, 0x80uLL, "%s ('%s') failed", a3, v6);
    exception = (CAXException *)__cxa_allocate_exception(0x110uLL);
    CAXException::CAXException(exception, __str, a2);
  }
}

void sub_1B64398AC(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

void AUSpeakerProtectionV3::AUSpeakerProtectionV3(AUSpeakerProtectionV3 *this, OpaqueAudioComponentInstance *a2)
{
  ausdk::AUBase *v3;
  int32x4_t *v4;
  CFTypeRef v5;
  CFTypeRef v6;
  CFTypeRef v7;
  char *v8;
  uint64_t v9;
  uint64_t i;
  const void *v11;
  caulk::deferred_logger **v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  NSObject *v17;
  _BOOL4 AppBooleanValue;
  unsigned int j;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  NSObject *v23;
  uint64_t Element;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  NSObject *v28;
  uint64_t v29;
  ausdk::AUElement *v30;
  ausdk::AUElement **v31;
  uint64_t v32;
  ausdk::AUElement *v33;
  ausdk::AUElement **v34;
  uint64_t v35;
  ausdk::AUElement *v36;
  ausdk::AUElement **v37;
  uint64_t v38;
  ausdk::AUElement *v39;
  ausdk::AUElement **v40;
  uint64_t v41;
  ausdk::AUElement *v42;
  ausdk::AUElement **v43;
  uint64_t v44;
  ausdk::AUElement *v45;
  ausdk::AUElement **v46;
  uint64_t v47;
  ausdk::AUElement *v48;
  ausdk::AUElement **v49;
  uint64_t v50;
  ausdk::AUElement *v51;
  ausdk::AUElement **v52;
  uint64_t v53;
  ausdk::AUElement *v54;
  ausdk::AUElement **v55;
  uint64_t v56;
  ausdk::AUElement *v57;
  ausdk::AUElement **v58;
  uint64_t v59;
  ausdk::AUElement *v60;
  ausdk::AUElement **v61;
  uint64_t v62;
  ausdk::AUElement *v63;
  ausdk::AUElement **v64;
  uint64_t v65;
  ausdk::AUElement *v66;
  ausdk::AUElement **v67;
  uint64_t v68;
  ausdk::AUElement *v69;
  ausdk::AUElement **v70;
  uint64_t v71;
  ausdk::AUElement *v72;
  ausdk::AUElement **v73;
  uint64_t v74;
  ausdk::AUElement *v75;
  ausdk::AUElement **v76;
  uint64_t v77;
  ausdk::AUElement *v78;
  ausdk::AUElement **v79;
  uint64_t v80;
  ausdk::AUElement *v81;
  ausdk::AUElement **v82;
  uint64_t v83;
  ausdk::AUElement *v84;
  ausdk::AUElement **v85;
  uint64_t v86;
  ausdk::AUElement *v87;
  ausdk::AUElement **v88;
  unint64_t k;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  ausdk::AUElement *v93;
  uint64_t v94;
  uint64_t v95;
  ausdk::AUElement *v96;
  uint64_t v97;
  uint64_t v98;
  ausdk::AUElement *v99;
  uint64_t v100;
  uint64_t v101;
  ausdk::AUElement *v102;
  uint64_t v103;
  uint64_t v104;
  ausdk::AUElement *v105;
  uint64_t v106;
  uint64_t v107;
  ausdk::AUElement *v108;
  uint64_t v109;
  uint64_t v110;
  ausdk::AUElement *v111;
  uint64_t v112;
  uint64_t v113;
  ausdk::AUElement *v114;
  uint64_t v115;
  uint64_t v116;
  ausdk::AUElement *v117;
  uint64_t v118;
  uint64_t v119;
  ausdk::AUElement *v120;
  uint64_t v121;
  uint64_t v122;
  ausdk::AUElement *v123;
  uint64_t v124;
  uint64_t v125;
  ausdk::AUElement *v126;
  uint64_t v127;
  uint64_t v128;
  ausdk::AUElement *v129;
  uint64_t v130;
  uint64_t v131;
  ausdk::AUElement *v132;
  uint64_t v133;
  uint64_t v134;
  ausdk::AUElement *v135;
  uint64_t v136;
  uint64_t v137;
  ausdk::AUElement *v138;
  uint64_t v139;
  uint64_t v140;
  ausdk::AUElement *v141;
  uint64_t v142;
  uint64_t v143;
  ausdk::AUElement *v144;
  uint64_t v145;
  uint64_t v146;
  ausdk::AUElement *v147;
  uint64_t v148;
  uint64_t v149;
  ausdk::AUElement *v150;
  uint64_t v151;
  uint64_t v152;
  ausdk::AUElement *v153;
  uint64_t v154;
  uint64_t v155;
  ausdk::AUElement *v156;
  uint64_t v157;
  uint64_t v158;
  ausdk::AUElement *v159;
  uint64_t v160;
  uint64_t v161;
  ausdk::AUElement *v162;
  uint64_t v163;
  float v164;
  uint64_t v165;
  ausdk::AUElement *v166;
  uint64_t v167;
  uint64_t v168;
  ausdk::AUElement *v169;
  uint64_t v170;
  uint64_t v171;
  ausdk::AUElement *v172;
  uint64_t v173;
  uint64_t v174;
  ausdk::AUElement *v175;
  uint64_t v176;
  uint64_t v177;
  ausdk::AUElement *v178;
  uint64_t v179;
  uint64_t v180;
  ausdk::AUElement *v181;
  uint64_t v182;
  uint64_t v183;
  ausdk::AUElement *v184;
  uint64_t v185;
  uint64_t v186;
  ausdk::AUElement *v187;
  uint64_t v188;
  uint64_t v189;
  ausdk::AUElement *v190;
  uint64_t v191;
  uint64_t v192;
  ausdk::AUElement *v193;
  uint64_t v194;
  uint64_t v195;
  ausdk::AUElement *v196;
  uint64_t v197;
  uint64_t v198;
  ausdk::AUElement *v199;
  uint64_t v200;
  uint64_t v201;
  ausdk::AUElement *v202;
  uint64_t v203;
  uint64_t v204;
  ausdk::AUElement *v205;
  uint64_t v206;
  uint64_t v207;
  ausdk::AUElement *v208;
  uint64_t v209;
  uint64_t v210;
  ausdk::AUElement *v211;
  uint64_t v212;
  uint64_t v213;
  ausdk::AUElement *v214;
  uint64_t v215;
  uint64_t v216;
  ausdk::AUElement *v217;
  uint64_t v218;
  uint64_t v219;
  ausdk::AUElement *v220;
  uint64_t v221;
  uint64_t v222;
  ausdk::AUElement *v223;
  uint64_t v224;
  uint64_t v225;
  ausdk::AUElement *v226;
  uint64_t v227;
  uint64_t v228;
  ausdk::AUElement *v229;
  uint64_t v230;
  uint64_t v231;
  ausdk::AUElement *v232;
  uint64_t v233;
  uint64_t v234;
  ausdk::AUElement *v235;
  uint64_t v236;
  uint64_t v237;
  ausdk::AUElement *v238;
  uint64_t v239;
  uint64_t v240;
  ausdk::AUElement *v241;
  uint64_t v242;
  uint64_t v243;
  ausdk::AUElement *v244;
  uint64_t v245;
  uint64_t v246;
  ausdk::AUElement *v247;
  uint64_t v248;
  uint64_t v249;
  ausdk::AUElement *v250;
  uint64_t v251;
  uint64_t v252;
  ausdk::AUElement *v253;
  uint64_t v254;
  uint64_t v255;
  ausdk::AUElement *v256;
  uint64_t v257;
  uint64_t v258;
  ausdk::AUElement *v259;
  uint64_t v260;
  uint64_t v261;
  ausdk::AUElement *v262;
  uint64_t v263;
  uint64_t v264;
  ausdk::AUElement *v265;
  uint64_t v266;
  uint64_t v267;
  ausdk::AUElement *v268;
  uint64_t v269;
  uint64_t v270;
  ausdk::AUElement *v271;
  uint64_t v272;
  uint64_t v273;
  ausdk::AUElement *v274;
  uint64_t v275;
  uint64_t v276;
  ausdk::AUElement *v277;
  uint64_t v278;
  uint64_t v279;
  ausdk::AUElement *v280;
  uint64_t v281;
  uint64_t v282;
  ausdk::AUElement *v283;
  uint64_t v284;
  uint64_t v285;
  ausdk::AUElement *v286;
  uint64_t v287;
  uint64_t v288;
  ausdk::AUElement *v289;
  uint64_t v290;
  uint64_t v291;
  ausdk::AUElement *v292;
  uint64_t v293;
  uint64_t v294;
  ausdk::AUElement *v295;
  uint64_t v296;
  uint64_t v297;
  ausdk::AUElement *v298;
  uint64_t v299;
  CFTypeRef v300;
  __int128 v301;
  char v302;
  char v303;
  CFTypeRef v304;
  __int128 v305;
  char v306;
  char v307;
  char *v308;
  char v309;
  CFTypeRef cf;
  __int128 v311;
  __int128 v312;
  _BYTE buf[24];
  __int128 v314;
  __int128 v315;
  int v316;
  char v317;
  CFTypeRef v318;
  __int128 v319;
  int v320;
  char v321;
  CFTypeRef v322;
  __int128 v323;
  int v324;
  char v325;
  uint64_t v326;

  v326 = *MEMORY[0x1E0C80C00];
  v3 = ausdk::AUBase::AUBase(this, a2, 2, 1);
  *(_QWORD *)v3 = &off_1E69DB218;
  *((_BYTE *)v3 + 584) = 0;
  *((_BYTE *)v3 + 592) = 0;
  *((_BYTE *)v3 + 616) = 0;
  *((_DWORD *)v3 + 132) = 0;
  *((_WORD *)v3 + 266) = 0;
  *((_QWORD *)v3 + 67) = 0;
  *((_OWORD *)v3 + 34) = 0u;
  *((_BYTE *)v3 + 560) = 0;
  *((_OWORD *)v3 + 39) = 0u;
  *((_OWORD *)v3 + 40) = xmmword_1B66A2470;
  *((_QWORD *)this + 82) = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  *((_WORD *)this + 332) = 257;
  *((_BYTE *)this + 776) = 0;
  *((_DWORD *)this + 196) = 0;
  *((_QWORD *)this + 99) = 0;
  *((_DWORD *)this + 200) = 0;
  *((_BYTE *)this + 916) = 0;
  *((_BYTE *)this + 920) = 0;
  *((_BYTE *)this + 944) = 0;
  *((_BYTE *)this + 952) = 0;
  *((_BYTE *)this + 956) = 0;
  *((_OWORD *)this + 42) = 0u;
  *((_OWORD *)this + 43) = 0u;
  *((_OWORD *)this + 44) = 0u;
  *((_DWORD *)this + 180) = 0;
  *((_QWORD *)this + 91) = 0;
  *((_OWORD *)this + 46) = 0u;
  *(_OWORD *)((char *)this + 808) = 0u;
  *((_BYTE *)this + 752) = 0;
  *(_OWORD *)((char *)this + 897) = 0u;
  *(_OWORD *)((char *)this + 872) = 0u;
  *(_OWORD *)((char *)this + 888) = 0u;
  *(_OWORD *)((char *)this + 840) = 0u;
  *(_OWORD *)((char *)this + 856) = 0u;
  *(_OWORD *)((char *)this + 824) = 0u;
  *((_DWORD *)this + 240) = 1148846080;
  *((_QWORD *)this + 123) = 0;
  *(_OWORD *)((char *)this + 968) = 0u;
  v4 = (int32x4_t *)operator new(0x10uLL);
  *((_QWORD *)this + 121) = v4;
  *v4++ = vdupq_n_s32(0x42480000u);
  *((_QWORD *)this + 123) = v4;
  *((_QWORD *)this + 122) = v4;
  applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)buf, "cpms_ts_i");
  buf[8] = 0;
  buf[12] = 0;
  buf[16] = 0;
  buf[20] = 0;
  LOBYTE(v314) = 0;
  BYTE4(v314) = 0;
  applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&cf, "cpms_ts_100");
  LOBYTE(v311) = 0;
  BYTE4(v311) = 0;
  BYTE8(v311) = 0;
  BYTE12(v311) = 0;
  LOBYTE(v312) = 0;
  BYTE4(v312) = 0;
  v5 = cf;
  if (cf)
    CFRetain(cf);
  *((_QWORD *)&v314 + 1) = v5;
  v315 = v311;
  v317 = 1;
  v316 = 1036831949;
  applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&v304, "cpms_ts_1000");
  LOBYTE(v305) = 0;
  BYTE4(v305) = 0;
  BYTE8(v305) = 0;
  BYTE12(v305) = 0;
  v306 = 0;
  v307 = 0;
  v6 = v304;
  if (v304)
    CFRetain(v304);
  v318 = v6;
  v319 = v305;
  v321 = 1;
  v320 = 1065353216;
  applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&v300, "cpms_ts_thermal");
  LOBYTE(v301) = 0;
  BYTE4(v301) = 0;
  BYTE8(v301) = 0;
  BYTE12(v301) = 0;
  v302 = 0;
  v303 = 0;
  v7 = v300;
  if (v300)
    CFRetain(v300);
  v322 = v7;
  v323 = v301;
  v325 = 1;
  v324 = 1114636288;
  *((_QWORD *)this + 125) = 0;
  *((_QWORD *)this + 126) = 0;
  *((_QWORD *)this + 124) = 0;
  v308 = (char *)this + 992;
  v309 = 0;
  v8 = (char *)operator new(0x80uLL);
  v9 = 0;
  *((_QWORD *)this + 124) = v8;
  *((_QWORD *)this + 125) = v8;
  *((_QWORD *)this + 126) = v8 + 128;
  do
  {
    std::construct_at[abi:ne180100]<cpms::TimeScale<float>,cpms::TimeScale<float> const&,cpms::TimeScale<float>*>((uint64_t)&v8[v9], (uint64_t)&buf[v9]);
    v9 += 32;
  }
  while (v9 != 128);
  *((_QWORD *)this + 125) = v8 + 128;
  for (i = 96; i != -32; i -= 32)
  {
    v11 = *(const void **)&buf[i];
    if (v11)
      CFRelease(v11);
  }
  if (v300)
    CFRelease(v300);
  if (v304)
    CFRelease(v304);
  if (cf)
    CFRelease(cf);
  *((_QWORD *)this + 135) = 0;
  *(_OWORD *)((char *)this + 1048) = 0u;
  *(_OWORD *)((char *)this + 1064) = 0u;
  *(_OWORD *)((char *)this + 1016) = 0u;
  *(_OWORD *)((char *)this + 1032) = 0u;
  *((_QWORD *)this + 136) = &off_1E69DC350;
  *((_QWORD *)this + 137) = 0;
  *((_QWORD *)this + 138) = &off_1E69DC350;
  *((_QWORD *)this + 139) = 0;
  *((_QWORD *)this + 140) = &off_1E69DC350;
  *((_QWORD *)this + 147) = 0;
  *(_OWORD *)((char *)this + 1128) = 0u;
  *(_OWORD *)((char *)this + 1144) = 0u;
  *((_WORD *)this + 592) = 1;
  *((_QWORD *)this + 167) = 0;
  *((_QWORD *)this + 169) = 0;
  *((_QWORD *)this + 168) = 0;
  *(_OWORD *)((char *)this + 1315) = 0u;
  *(_OWORD *)((char *)this + 1288) = 0u;
  *(_OWORD *)((char *)this + 1304) = 0u;
  *(_OWORD *)((char *)this + 1256) = 0u;
  *(_OWORD *)((char *)this + 1272) = 0u;
  *(_OWORD *)((char *)this + 1224) = 0u;
  *(_OWORD *)((char *)this + 1240) = 0u;
  *(_OWORD *)((char *)this + 1192) = 0u;
  *(_OWORD *)((char *)this + 1208) = 0u;
  v12 = (caulk::deferred_logger **)spp3Subsystem();
  caulk::deferred_logger::create_v(*v12, v13);
  v14 = *((_QWORD *)this + 9);
  if (v14)
    v15 = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v14 + 32))(v14, 0);
  else
    v15 = **((_QWORD **)this + 6);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v15 + 40))(v15, 20);
  v16 = spp3Subsystem();
  if (v16)
  {
    if ((*(_BYTE *)(v16 + 8) & 1) != 0)
    {
      v17 = *(NSObject **)v16;
      if (*(_QWORD *)v16)
      {
        if (os_log_type_enabled(*(os_log_t *)v16, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)buf = 136315394;
          *(_QWORD *)&buf[4] = "AUSpeakerProtectionV3.cpp";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = 159;
          _os_log_impl(&dword_1B5ED0000, v17, OS_LOG_TYPE_DEBUG, "%25s:%-5d AUSpeakerProtectionV3::AUSpeakerProtectionV3", buf, 0x12u);
        }
      }
    }
  }
  ausdk::AUBase::CreateElements((int64x2_t *)this);
  *((_BYTE *)this + 1185) = CACFPreferencesGetAppBooleanValue(CFSTR("clsp_allow_restore"), CFSTR("com.apple.coreaudio"), 0);
  AppBooleanValue = CACFPreferencesGetAppBooleanValue(CFSTR("clsp_enable_closed_loop"), CFSTR("com.apple.coreaudio"), 0);
  for (j = 0; ; ++j)
  {
    v20 = *((_QWORD *)this + 104);
    if (v20)
      LODWORD(v21) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v20 + 24))(v20);
    else
      v21 = (*((_QWORD *)this + 102) - *((_QWORD *)this + 101)) >> 3;
    if (j >= v21)
      break;
    AUSpeakerProtectionV3::SetClosedLoopEnabled(this, j, AppBooleanValue);
  }
  v22 = spp3Subsystem();
  if (v22)
  {
    if ((*(_BYTE *)(v22 + 8) & 1) != 0)
    {
      v23 = *(NSObject **)v22;
      if (*(_QWORD *)v22)
      {
        if (os_log_type_enabled(*(os_log_t *)v22, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)buf = 136315394;
          *(_QWORD *)&buf[4] = "AUSpeakerProtectionV3.cpp";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = 1261;
          _os_log_impl(&dword_1B5ED0000, v23, OS_LOG_TYPE_DEBUG, "%25s:%-5d AUSpeakerProtectionV3::SetDefaultFormats\n", buf, 0x12u);
        }
      }
    }
  }
  *(_QWORD *)buf = 0x40E5888000000000;
  *(_OWORD *)&buf[8] = xmmword_1B6626900;
  v314 = xmmword_1B6626910;
  Element = ausdk::AUScope::SafeGetElement((AUSpeakerProtectionV3 *)((char *)this + 80), 0);
  (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)Element + 56))(Element, buf);
  v25 = ausdk::AUScope::SafeGetElement((AUSpeakerProtectionV3 *)((char *)this + 128), 0);
  (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v25 + 56))(v25, buf);
  cf = (CFTypeRef)0x40E5888000000000;
  v311 = xmmword_1B66A10C0;
  v312 = xmmword_1B66A10D0;
  v26 = ausdk::AUScope::SafeGetElement((AUSpeakerProtectionV3 *)((char *)this + 80), 1u);
  (*(void (**)(uint64_t, CFTypeRef *))(*(_QWORD *)v26 + 56))(v26, &cf);
  v27 = spp3Subsystem();
  if (v27)
  {
    if ((*(_BYTE *)(v27 + 8) & 1) != 0)
    {
      v28 = *(NSObject **)v27;
      if (*(_QWORD *)v27)
      {
        if (os_log_type_enabled(*(os_log_t *)v27, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)buf = 136315394;
          *(_QWORD *)&buf[4] = "AUSpeakerProtectionV3.cpp";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = 2408;
          _os_log_impl(&dword_1B5ED0000, v28, OS_LOG_TYPE_DEBUG, "%25s:%-5d AUSpeakerProtectionV3::SetParamDefaults", buf, 0x12u);
        }
      }
    }
  }
  v29 = *((_QWORD *)this + 9);
  if (v29)
  {
    v30 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v29 + 32))(v29, 0);
  }
  else
  {
    v31 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v31)
      v30 = 0;
    else
      v30 = *v31;
  }
  ausdk::AUElement::SetParameter(v30, 0, 1.0, 0);
  v32 = *((_QWORD *)this + 9);
  if (v32)
  {
    v33 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v32 + 32))(v32, 0);
  }
  else
  {
    v34 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v34)
      v33 = 0;
    else
      v33 = *v34;
  }
  ausdk::AUElement::SetParameter(v33, 0x12u, 1.0, 0);
  v35 = *((_QWORD *)this + 9);
  if (v35)
  {
    v36 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v35 + 32))(v35, 0);
  }
  else
  {
    v37 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v37)
      v36 = 0;
    else
      v36 = *v37;
  }
  ausdk::AUElement::SetParameter(v36, 0x13u, 0.0, 0);
  v38 = *((_QWORD *)this + 9);
  if (v38)
  {
    v39 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v38 + 32))(v38, 0);
  }
  else
  {
    v40 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v40)
      v39 = 0;
    else
      v39 = *v40;
  }
  ausdk::AUElement::SetParameter(v39, 1u, 1.0, 0);
  v41 = *((_QWORD *)this + 9);
  if (v41)
  {
    v42 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v41 + 32))(v41, 0);
  }
  else
  {
    v43 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v43)
      v42 = 0;
    else
      v42 = *v43;
  }
  ausdk::AUElement::SetParameter(v42, 4u, 0.0, 0);
  v44 = *((_QWORD *)this + 9);
  if (v44)
  {
    v45 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v44 + 32))(v44, 0);
  }
  else
  {
    v46 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v46)
      v45 = 0;
    else
      v45 = *v46;
  }
  ausdk::AUElement::SetParameter(v45, 5u, 0.0, 0);
  v47 = *((_QWORD *)this + 9);
  if (v47)
  {
    v48 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v47 + 32))(v47, 0);
  }
  else
  {
    v49 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v49)
      v48 = 0;
    else
      v48 = *v49;
  }
  ausdk::AUElement::SetParameter(v48, 6u, 0.0, 0);
  v50 = *((_QWORD *)this + 9);
  if (v50)
  {
    v51 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v50 + 32))(v50, 0);
  }
  else
  {
    v52 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v52)
      v51 = 0;
    else
      v51 = *v52;
  }
  ausdk::AUElement::SetParameter(v51, 7u, 0.0, 0);
  v53 = *((_QWORD *)this + 9);
  if (v53)
  {
    v54 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v53 + 32))(v53, 0);
  }
  else
  {
    v55 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v55)
      v54 = 0;
    else
      v54 = *v55;
  }
  ausdk::AUElement::SetParameter(v54, 2u, 0.0, 0);
  v56 = *((_QWORD *)this + 9);
  if (v56)
  {
    v57 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v56 + 32))(v56, 0);
  }
  else
  {
    v58 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v58)
      v57 = 0;
    else
      v57 = *v58;
  }
  ausdk::AUElement::SetParameter(v57, 3u, 0.0, 0);
  v59 = *((_QWORD *)this + 9);
  if (v59)
  {
    v60 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v59 + 32))(v59, 0);
  }
  else
  {
    v61 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v61)
      v60 = 0;
    else
      v60 = *v61;
  }
  ausdk::AUElement::SetParameter(v60, 8u, 0.0, 0);
  v62 = *((_QWORD *)this + 9);
  if (v62)
  {
    v63 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v62 + 32))(v62, 0);
  }
  else
  {
    v64 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v64)
      v63 = 0;
    else
      v63 = *v64;
  }
  ausdk::AUElement::SetParameter(v63, 9u, 0.0, 0);
  v65 = *((_QWORD *)this + 9);
  if (v65)
  {
    v66 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v65 + 32))(v65, 0);
  }
  else
  {
    v67 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v67)
      v66 = 0;
    else
      v66 = *v67;
  }
  ausdk::AUElement::SetParameter(v66, 0xAu, 0.0, 0);
  v68 = *((_QWORD *)this + 9);
  if (v68)
  {
    v69 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v68 + 32))(v68, 0);
  }
  else
  {
    v70 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v70)
      v69 = 0;
    else
      v69 = *v70;
  }
  ausdk::AUElement::SetParameter(v69, 0xBu, 0.0, 0);
  v71 = *((_QWORD *)this + 9);
  if (v71)
  {
    v72 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v71 + 32))(v71, 0);
  }
  else
  {
    v73 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v73)
      v72 = 0;
    else
      v72 = *v73;
  }
  ausdk::AUElement::SetParameter(v72, 0xCu, 0.0, 0);
  v74 = *((_QWORD *)this + 9);
  if (v74)
  {
    v75 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v74 + 32))(v74, 0);
  }
  else
  {
    v76 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v76)
      v75 = 0;
    else
      v75 = *v76;
  }
  ausdk::AUElement::SetParameter(v75, 0x11u, 0.0, 0);
  v77 = *((_QWORD *)this + 9);
  if (v77)
  {
    v78 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v77 + 32))(v77, 0);
  }
  else
  {
    v79 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v79)
      v78 = 0;
    else
      v78 = *v79;
  }
  ausdk::AUElement::SetParameter(v78, 0xDu, 0.0, 0);
  v80 = *((_QWORD *)this + 9);
  if (v80)
  {
    v81 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v80 + 32))(v80, 0);
  }
  else
  {
    v82 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v82)
      v81 = 0;
    else
      v81 = *v82;
  }
  ausdk::AUElement::SetParameter(v81, 0xEu, 5.0, 0);
  v83 = *((_QWORD *)this + 9);
  if (v83)
  {
    v84 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v83 + 32))(v83, 0);
  }
  else
  {
    v85 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v85)
      v84 = 0;
    else
      v84 = *v85;
  }
  ausdk::AUElement::SetParameter(v84, 0xFu, 0.0, 0);
  v86 = *((_QWORD *)this + 9);
  if (v86)
  {
    v87 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v86 + 32))(v86, 0);
  }
  else
  {
    v88 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v88)
      v87 = 0;
    else
      v87 = *v88;
  }
  ausdk::AUElement::SetParameter(v87, 0x10u, 0.0, 0);
  for (k = 0; ; ++k)
  {
    v90 = *((_QWORD *)this + 104);
    if (v90)
      LODWORD(v91) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v90 + 24))(v90);
    else
      v91 = (*((_QWORD *)this + 102) - *((_QWORD *)this + 101)) >> 3;
    if (k >= v91)
      break;
    v92 = *((_QWORD *)this + 104);
    if (v92)
    {
      v93 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)v92 + 32))(v92, k);
    }
    else
    {
      v94 = *((_QWORD *)this + 101);
      if (k >= (*((_QWORD *)this + 102) - v94) >> 3)
        v93 = 0;
      else
        v93 = *(ausdk::AUElement **)(v94 + 8 * k);
    }
    ausdk::AUElement::SetParameter(v93, 0, 0.0, 0);
    v95 = *((_QWORD *)this + 104);
    if (v95)
    {
      v96 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)v95 + 32))(v95, k);
    }
    else
    {
      v97 = *((_QWORD *)this + 101);
      if (k >= (*((_QWORD *)this + 102) - v97) >> 3)
        v96 = 0;
      else
        v96 = *(ausdk::AUElement **)(v97 + 8 * k);
    }
    ausdk::AUElement::SetParameter(v96, 1u, 0.0, 0);
    v98 = *((_QWORD *)this + 104);
    if (v98)
    {
      v99 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)v98 + 32))(v98, k);
    }
    else
    {
      v100 = *((_QWORD *)this + 101);
      if (k >= (*((_QWORD *)this + 102) - v100) >> 3)
        v99 = 0;
      else
        v99 = *(ausdk::AUElement **)(v100 + 8 * k);
    }
    ausdk::AUElement::SetParameter(v99, 6u, 0.0, 0);
    v101 = *((_QWORD *)this + 104);
    if (v101)
    {
      v102 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)v101 + 32))(v101, k);
    }
    else
    {
      v103 = *((_QWORD *)this + 101);
      if (k >= (*((_QWORD *)this + 102) - v103) >> 3)
        v102 = 0;
      else
        v102 = *(ausdk::AUElement **)(v103 + 8 * k);
    }
    ausdk::AUElement::SetParameter(v102, 8u, 50.0, 0);
    v104 = *((_QWORD *)this + 104);
    if (v104)
    {
      v105 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)v104 + 32))(v104, k);
    }
    else
    {
      v106 = *((_QWORD *)this + 101);
      if (k >= (*((_QWORD *)this + 102) - v106) >> 3)
        v105 = 0;
      else
        v105 = *(ausdk::AUElement **)(v106 + 8 * k);
    }
    ausdk::AUElement::SetParameter(v105, 7u, 50.0, 0);
    v107 = *((_QWORD *)this + 104);
    if (v107)
    {
      v108 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)v107 + 32))(v107, k);
    }
    else
    {
      v109 = *((_QWORD *)this + 101);
      if (k >= (*((_QWORD *)this + 102) - v109) >> 3)
        v108 = 0;
      else
        v108 = *(ausdk::AUElement **)(v109 + 8 * k);
    }
    ausdk::AUElement::SetParameter(v108, 9u, 0.0, 0);
    v110 = *((_QWORD *)this + 104);
    if (v110)
    {
      v111 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)v110 + 32))(v110, k);
    }
    else
    {
      v112 = *((_QWORD *)this + 101);
      if (k >= (*((_QWORD *)this + 102) - v112) >> 3)
        v111 = 0;
      else
        v111 = *(ausdk::AUElement **)(v112 + 8 * k);
    }
    ausdk::AUElement::SetParameter(v111, 0xAu, 0.0, 0);
    v113 = *((_QWORD *)this + 104);
    if (v113)
    {
      v114 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)v113 + 32))(v113, k);
    }
    else
    {
      v115 = *((_QWORD *)this + 101);
      if (k >= (*((_QWORD *)this + 102) - v115) >> 3)
        v114 = 0;
      else
        v114 = *(ausdk::AUElement **)(v115 + 8 * k);
    }
    ausdk::AUElement::SetParameter(v114, 0xBu, 0.0, 0);
    v116 = *((_QWORD *)this + 104);
    if (v116)
    {
      v117 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)v116 + 32))(v116, k);
    }
    else
    {
      v118 = *((_QWORD *)this + 101);
      if (k >= (*((_QWORD *)this + 102) - v118) >> 3)
        v117 = 0;
      else
        v117 = *(ausdk::AUElement **)(v118 + 8 * k);
    }
    ausdk::AUElement::SetParameter(v117, 0xCu, 0.0, 0);
    v119 = *((_QWORD *)this + 104);
    if (v119)
    {
      v120 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)v119 + 32))(v119, k);
    }
    else
    {
      v121 = *((_QWORD *)this + 101);
      if (k >= (*((_QWORD *)this + 102) - v121) >> 3)
        v120 = 0;
      else
        v120 = *(ausdk::AUElement **)(v121 + 8 * k);
    }
    ausdk::AUElement::SetParameter(v120, 0xDu, 0.0, 0);
    v122 = *((_QWORD *)this + 104);
    if (v122)
    {
      v123 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)v122 + 32))(v122, k);
    }
    else
    {
      v124 = *((_QWORD *)this + 101);
      if (k >= (*((_QWORD *)this + 102) - v124) >> 3)
        v123 = 0;
      else
        v123 = *(ausdk::AUElement **)(v124 + 8 * k);
    }
    ausdk::AUElement::SetParameter(v123, 0xEu, 0.0, 0);
    v125 = *((_QWORD *)this + 104);
    if (v125)
    {
      v126 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)v125 + 32))(v125, k);
    }
    else
    {
      v127 = *((_QWORD *)this + 101);
      if (k >= (*((_QWORD *)this + 102) - v127) >> 3)
        v126 = 0;
      else
        v126 = *(ausdk::AUElement **)(v127 + 8 * k);
    }
    ausdk::AUElement::SetParameter(v126, 0xFu, 0.0, 0);
    v128 = *((_QWORD *)this + 104);
    if (v128)
    {
      v129 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)v128 + 32))(v128, k);
    }
    else
    {
      v130 = *((_QWORD *)this + 101);
      if (k >= (*((_QWORD *)this + 102) - v130) >> 3)
        v129 = 0;
      else
        v129 = *(ausdk::AUElement **)(v130 + 8 * k);
    }
    ausdk::AUElement::SetParameter(v129, 0x10u, 0.0, 0);
    v131 = *((_QWORD *)this + 104);
    if (v131)
    {
      v132 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)v131 + 32))(v131, k);
    }
    else
    {
      v133 = *((_QWORD *)this + 101);
      if (k >= (*((_QWORD *)this + 102) - v133) >> 3)
        v132 = 0;
      else
        v132 = *(ausdk::AUElement **)(v133 + 8 * k);
    }
    ausdk::AUElement::SetParameter(v132, 0x11u, 0.0, 0);
    v134 = *((_QWORD *)this + 104);
    if (v134)
    {
      v135 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)v134 + 32))(v134, k);
    }
    else
    {
      v136 = *((_QWORD *)this + 101);
      if (k >= (*((_QWORD *)this + 102) - v136) >> 3)
        v135 = 0;
      else
        v135 = *(ausdk::AUElement **)(v136 + 8 * k);
    }
    ausdk::AUElement::SetParameter(v135, 0x12u, 0.0, 0);
    v137 = *((_QWORD *)this + 104);
    if (v137)
    {
      v138 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)v137 + 32))(v137, k);
    }
    else
    {
      v139 = *((_QWORD *)this + 101);
      if (k >= (*((_QWORD *)this + 102) - v139) >> 3)
        v138 = 0;
      else
        v138 = *(ausdk::AUElement **)(v139 + 8 * k);
    }
    ausdk::AUElement::SetParameter(v138, 0x13u, 0.0, 0);
    v140 = *((_QWORD *)this + 104);
    if (v140)
    {
      v141 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)v140 + 32))(v140, k);
    }
    else
    {
      v142 = *((_QWORD *)this + 101);
      if (k >= (*((_QWORD *)this + 102) - v142) >> 3)
        v141 = 0;
      else
        v141 = *(ausdk::AUElement **)(v142 + 8 * k);
    }
    ausdk::AUElement::SetParameter(v141, 2u, 0.0, 0);
    v143 = *((_QWORD *)this + 104);
    if (v143)
    {
      v144 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)v143 + 32))(v143, k);
    }
    else
    {
      v145 = *((_QWORD *)this + 101);
      if (k >= (*((_QWORD *)this + 102) - v145) >> 3)
        v144 = 0;
      else
        v144 = *(ausdk::AUElement **)(v145 + 8 * k);
    }
    ausdk::AUElement::SetParameter(v144, 3u, 0.0, 0);
    v146 = *((_QWORD *)this + 104);
    if (v146)
    {
      v147 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)v146 + 32))(v146, k);
    }
    else
    {
      v148 = *((_QWORD *)this + 101);
      if (k >= (*((_QWORD *)this + 102) - v148) >> 3)
        v147 = 0;
      else
        v147 = *(ausdk::AUElement **)(v148 + 8 * k);
    }
    ausdk::AUElement::SetParameter(v147, 4u, 0.0, 0);
    v149 = *((_QWORD *)this + 104);
    if (v149)
    {
      v150 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)v149 + 32))(v149, k);
    }
    else
    {
      v151 = *((_QWORD *)this + 101);
      if (k >= (*((_QWORD *)this + 102) - v151) >> 3)
        v150 = 0;
      else
        v150 = *(ausdk::AUElement **)(v151 + 8 * k);
    }
    ausdk::AUElement::SetParameter(v150, 5u, 0.0, 0);
    v152 = *((_QWORD *)this + 104);
    if (v152)
    {
      v153 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)v152 + 32))(v152, k);
    }
    else
    {
      v154 = *((_QWORD *)this + 101);
      if (k >= (*((_QWORD *)this + 102) - v154) >> 3)
        v153 = 0;
      else
        v153 = *(ausdk::AUElement **)(v154 + 8 * k);
    }
    ausdk::AUElement::SetParameter(v153, 0x1Au, 0.0, 0);
    v155 = *((_QWORD *)this + 104);
    if (v155)
    {
      v156 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)v155 + 32))(v155, k);
    }
    else
    {
      v157 = *((_QWORD *)this + 101);
      if (k >= (*((_QWORD *)this + 102) - v157) >> 3)
        v156 = 0;
      else
        v156 = *(ausdk::AUElement **)(v157 + 8 * k);
    }
    ausdk::AUElement::SetParameter(v156, 0x18u, 0.18, 0);
    v158 = *((_QWORD *)this + 104);
    if (v158)
    {
      v159 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)v158 + 32))(v158, k);
    }
    else
    {
      v160 = *((_QWORD *)this + 101);
      if (k >= (*((_QWORD *)this + 102) - v160) >> 3)
        v159 = 0;
      else
        v159 = *(ausdk::AUElement **)(v160 + 8 * k);
    }
    ausdk::AUElement::SetParameter(v159, 0x19u, 0.0, 0);
    v161 = *((_QWORD *)this + 104);
    if (v161)
    {
      v162 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)v161 + 32))(v161, k);
    }
    else
    {
      v163 = *((_QWORD *)this + 101);
      if (k >= (*((_QWORD *)this + 102) - v163) >> 3)
        v162 = 0;
      else
        v162 = *(ausdk::AUElement **)(v163 + 8 * k);
    }
    ausdk::AUElement::SetParameter(v162, 0x17u, 0.0, 0);
    if (*((_BYTE *)this + 533))
      v164 = 1.0;
    else
      v164 = 0.0;
    v165 = *((_QWORD *)this + 104);
    if (v165)
    {
      v166 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)v165 + 32))(v165, k);
    }
    else
    {
      v167 = *((_QWORD *)this + 101);
      if (k >= (*((_QWORD *)this + 102) - v167) >> 3)
        v166 = 0;
      else
        v166 = *(ausdk::AUElement **)(v167 + 8 * k);
    }
    ausdk::AUElement::SetParameter(v166, 0x16u, v164, 0);
    v168 = *((_QWORD *)this + 104);
    if (v168)
    {
      v169 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)v168 + 32))(v168, k);
    }
    else
    {
      v170 = *((_QWORD *)this + 101);
      if (k >= (*((_QWORD *)this + 102) - v170) >> 3)
        v169 = 0;
      else
        v169 = *(ausdk::AUElement **)(v170 + 8 * k);
    }
    ausdk::AUElement::SetParameter(v169, 0x15u, v164, 0);
    v171 = *((_QWORD *)this + 104);
    if (v171)
    {
      v172 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)v171 + 32))(v171, k);
    }
    else
    {
      v173 = *((_QWORD *)this + 101);
      if (k >= (*((_QWORD *)this + 102) - v173) >> 3)
        v172 = 0;
      else
        v172 = *(ausdk::AUElement **)(v173 + 8 * k);
    }
    ausdk::AUElement::SetParameter(v172, 0x1Bu, -40.0, 0);
    v174 = *((_QWORD *)this + 104);
    if (v174)
    {
      v175 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)v174 + 32))(v174, k);
    }
    else
    {
      v176 = *((_QWORD *)this + 101);
      if (k >= (*((_QWORD *)this + 102) - v176) >> 3)
        v175 = 0;
      else
        v175 = *(ausdk::AUElement **)(v176 + 8 * k);
    }
    ausdk::AUElement::SetParameter(v175, 0x1Cu, -40.0, 0);
    v177 = *((_QWORD *)this + 104);
    if (v177)
    {
      v178 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)v177 + 32))(v177, k);
    }
    else
    {
      v179 = *((_QWORD *)this + 101);
      if (k >= (*((_QWORD *)this + 102) - v179) >> 3)
        v178 = 0;
      else
        v178 = *(ausdk::AUElement **)(v179 + 8 * k);
    }
    ausdk::AUElement::SetParameter(v178, 0x1Du, 100.0, 0);
    v180 = *((_QWORD *)this + 104);
    if (v180)
    {
      v181 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)v180 + 32))(v180, k);
    }
    else
    {
      v182 = *((_QWORD *)this + 101);
      if (k >= (*((_QWORD *)this + 102) - v182) >> 3)
        v181 = 0;
      else
        v181 = *(ausdk::AUElement **)(v182 + 8 * k);
    }
    ausdk::AUElement::SetParameter(v181, 0x1Eu, 100.0, 0);
    v183 = *((_QWORD *)this + 104);
    if (v183)
    {
      v184 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)v183 + 32))(v183, k);
    }
    else
    {
      v185 = *((_QWORD *)this + 101);
      if (k >= (*((_QWORD *)this + 102) - v185) >> 3)
        v184 = 0;
      else
        v184 = *(ausdk::AUElement **)(v185 + 8 * k);
    }
    ausdk::AUElement::SetParameter(v184, 0x1Fu, 0.5, 0);
    v186 = *((_QWORD *)this + 104);
    if (v186)
    {
      v187 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)v186 + 32))(v186, k);
    }
    else
    {
      v188 = *((_QWORD *)this + 101);
      if (k >= (*((_QWORD *)this + 102) - v188) >> 3)
        v187 = 0;
      else
        v187 = *(ausdk::AUElement **)(v188 + 8 * k);
    }
    ausdk::AUElement::SetParameter(v187, 0x43u, 0.01, 0);
    v189 = *((_QWORD *)this + 104);
    if (v189)
    {
      v190 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)v189 + 32))(v189, k);
    }
    else
    {
      v191 = *((_QWORD *)this + 101);
      if (k >= (*((_QWORD *)this + 102) - v191) >> 3)
        v190 = 0;
      else
        v190 = *(ausdk::AUElement **)(v191 + 8 * k);
    }
    ausdk::AUElement::SetParameter(v190, 0x44u, 0.00001, 0);
    v192 = *((_QWORD *)this + 104);
    if (v192)
    {
      v193 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)v192 + 32))(v192, k);
    }
    else
    {
      v194 = *((_QWORD *)this + 101);
      if (k >= (*((_QWORD *)this + 102) - v194) >> 3)
        v193 = 0;
      else
        v193 = *(ausdk::AUElement **)(v194 + 8 * k);
    }
    ausdk::AUElement::SetParameter(v193, 0x20u, 43.066, 0);
    v195 = *((_QWORD *)this + 104);
    if (v195)
    {
      v196 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)v195 + 32))(v195, k);
    }
    else
    {
      v197 = *((_QWORD *)this + 101);
      if (k >= (*((_QWORD *)this + 102) - v197) >> 3)
        v196 = 0;
      else
        v196 = *(ausdk::AUElement **)(v197 + 8 * k);
    }
    ausdk::AUElement::SetParameter(v196, 0x14u, 1.0, 0);
    v198 = *((_QWORD *)this + 104);
    if (v198)
    {
      v199 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)v198 + 32))(v198, k);
    }
    else
    {
      v200 = *((_QWORD *)this + 101);
      if (k >= (*((_QWORD *)this + 102) - v200) >> 3)
        v199 = 0;
      else
        v199 = *(ausdk::AUElement **)(v200 + 8 * k);
    }
    ausdk::AUElement::SetParameter(v199, 0x21u, 1.0, 0);
    v201 = *((_QWORD *)this + 104);
    if (v201)
    {
      v202 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)v201 + 32))(v201, k);
    }
    else
    {
      v203 = *((_QWORD *)this + 101);
      if (k >= (*((_QWORD *)this + 102) - v203) >> 3)
        v202 = 0;
      else
        v202 = *(ausdk::AUElement **)(v203 + 8 * k);
    }
    ausdk::AUElement::SetParameter(v202, 0x22u, 1.0, 0);
    v204 = *((_QWORD *)this + 104);
    if (v204)
    {
      v205 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)v204 + 32))(v204, k);
    }
    else
    {
      v206 = *((_QWORD *)this + 101);
      if (k >= (*((_QWORD *)this + 102) - v206) >> 3)
        v205 = 0;
      else
        v205 = *(ausdk::AUElement **)(v206 + 8 * k);
    }
    ausdk::AUElement::SetParameter(v205, 0x23u, 0.01, 0);
    v207 = *((_QWORD *)this + 104);
    if (v207)
    {
      v208 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)v207 + 32))(v207, k);
    }
    else
    {
      v209 = *((_QWORD *)this + 101);
      if (k >= (*((_QWORD *)this + 102) - v209) >> 3)
        v208 = 0;
      else
        v208 = *(ausdk::AUElement **)(v209 + 8 * k);
    }
    ausdk::AUElement::SetParameter(v208, 0x24u, 1.0, 0);
    v210 = *((_QWORD *)this + 104);
    if (v210)
    {
      v211 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)v210 + 32))(v210, k);
    }
    else
    {
      v212 = *((_QWORD *)this + 101);
      if (k >= (*((_QWORD *)this + 102) - v212) >> 3)
        v211 = 0;
      else
        v211 = *(ausdk::AUElement **)(v212 + 8 * k);
    }
    ausdk::AUElement::SetParameter(v211, 0x25u, 0.0, 0);
    v213 = *((_QWORD *)this + 104);
    if (v213)
    {
      v214 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)v213 + 32))(v213, k);
    }
    else
    {
      v215 = *((_QWORD *)this + 101);
      if (k >= (*((_QWORD *)this + 102) - v215) >> 3)
        v214 = 0;
      else
        v214 = *(ausdk::AUElement **)(v215 + 8 * k);
    }
    ausdk::AUElement::SetParameter(v214, 0x26u, 0.0, 0);
    v216 = *((_QWORD *)this + 104);
    if (v216)
    {
      v217 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)v216 + 32))(v216, k);
    }
    else
    {
      v218 = *((_QWORD *)this + 101);
      if (k >= (*((_QWORD *)this + 102) - v218) >> 3)
        v217 = 0;
      else
        v217 = *(ausdk::AUElement **)(v218 + 8 * k);
    }
    ausdk::AUElement::SetParameter(v217, 0x27u, 0.0, 0);
    v219 = *((_QWORD *)this + 104);
    if (v219)
    {
      v220 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)v219 + 32))(v219, k);
    }
    else
    {
      v221 = *((_QWORD *)this + 101);
      if (k >= (*((_QWORD *)this + 102) - v221) >> 3)
        v220 = 0;
      else
        v220 = *(ausdk::AUElement **)(v221 + 8 * k);
    }
    ausdk::AUElement::SetParameter(v220, 0x28u, 0.0, 0);
    v222 = *((_QWORD *)this + 104);
    if (v222)
    {
      v223 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)v222 + 32))(v222, k);
    }
    else
    {
      v224 = *((_QWORD *)this + 101);
      if (k >= (*((_QWORD *)this + 102) - v224) >> 3)
        v223 = 0;
      else
        v223 = *(ausdk::AUElement **)(v224 + 8 * k);
    }
    ausdk::AUElement::SetParameter(v223, 0x29u, 0.0, 0);
    v225 = *((_QWORD *)this + 104);
    if (v225)
    {
      v226 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)v225 + 32))(v225, k);
    }
    else
    {
      v227 = *((_QWORD *)this + 101);
      if (k >= (*((_QWORD *)this + 102) - v227) >> 3)
        v226 = 0;
      else
        v226 = *(ausdk::AUElement **)(v227 + 8 * k);
    }
    ausdk::AUElement::SetParameter(v226, 0x2Au, 0.0, 0);
    v228 = *((_QWORD *)this + 104);
    if (v228)
    {
      v229 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)v228 + 32))(v228, k);
    }
    else
    {
      v230 = *((_QWORD *)this + 101);
      if (k >= (*((_QWORD *)this + 102) - v230) >> 3)
        v229 = 0;
      else
        v229 = *(ausdk::AUElement **)(v230 + 8 * k);
    }
    ausdk::AUElement::SetParameter(v229, 0x2Bu, 0.0, 0);
    v231 = *((_QWORD *)this + 104);
    if (v231)
    {
      v232 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)v231 + 32))(v231, k);
    }
    else
    {
      v233 = *((_QWORD *)this + 101);
      if (k >= (*((_QWORD *)this + 102) - v233) >> 3)
        v232 = 0;
      else
        v232 = *(ausdk::AUElement **)(v233 + 8 * k);
    }
    ausdk::AUElement::SetParameter(v232, 0x2Cu, 0.0, 0);
    v234 = *((_QWORD *)this + 104);
    if (v234)
    {
      v235 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)v234 + 32))(v234, k);
    }
    else
    {
      v236 = *((_QWORD *)this + 101);
      if (k >= (*((_QWORD *)this + 102) - v236) >> 3)
        v235 = 0;
      else
        v235 = *(ausdk::AUElement **)(v236 + 8 * k);
    }
    ausdk::AUElement::SetParameter(v235, 0x2Du, 70.0, 0);
    v237 = *((_QWORD *)this + 104);
    if (v237)
    {
      v238 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)v237 + 32))(v237, k);
    }
    else
    {
      v239 = *((_QWORD *)this + 101);
      if (k >= (*((_QWORD *)this + 102) - v239) >> 3)
        v238 = 0;
      else
        v238 = *(ausdk::AUElement **)(v239 + 8 * k);
    }
    ausdk::AUElement::SetParameter(v238, 0x2Eu, 1.0, 0);
    v240 = *((_QWORD *)this + 104);
    if (v240)
    {
      v241 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)v240 + 32))(v240, k);
    }
    else
    {
      v242 = *((_QWORD *)this + 101);
      if (k >= (*((_QWORD *)this + 102) - v242) >> 3)
        v241 = 0;
      else
        v241 = *(ausdk::AUElement **)(v242 + 8 * k);
    }
    ausdk::AUElement::SetParameter(v241, 0x2Fu, 0.6, 0);
    v243 = *((_QWORD *)this + 104);
    if (v243)
    {
      v244 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)v243 + 32))(v243, k);
    }
    else
    {
      v245 = *((_QWORD *)this + 101);
      if (k >= (*((_QWORD *)this + 102) - v245) >> 3)
        v244 = 0;
      else
        v244 = *(ausdk::AUElement **)(v245 + 8 * k);
    }
    ausdk::AUElement::SetParameter(v244, 0x30u, 0.6, 0);
    v246 = *((_QWORD *)this + 104);
    if (v246)
    {
      v247 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)v246 + 32))(v246, k);
    }
    else
    {
      v248 = *((_QWORD *)this + 101);
      if (k >= (*((_QWORD *)this + 102) - v248) >> 3)
        v247 = 0;
      else
        v247 = *(ausdk::AUElement **)(v248 + 8 * k);
    }
    ausdk::AUElement::SetParameter(v247, 0x31u, 0.0001, 0);
    v249 = *((_QWORD *)this + 104);
    if (v249)
    {
      v250 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)v249 + 32))(v249, k);
    }
    else
    {
      v251 = *((_QWORD *)this + 101);
      if (k >= (*((_QWORD *)this + 102) - v251) >> 3)
        v250 = 0;
      else
        v250 = *(ausdk::AUElement **)(v251 + 8 * k);
    }
    ausdk::AUElement::SetParameter(v250, 0x32u, 4.0, 0);
    v252 = *((_QWORD *)this + 104);
    if (v252)
    {
      v253 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)v252 + 32))(v252, k);
    }
    else
    {
      v254 = *((_QWORD *)this + 101);
      if (k >= (*((_QWORD *)this + 102) - v254) >> 3)
        v253 = 0;
      else
        v253 = *(ausdk::AUElement **)(v254 + 8 * k);
    }
    ausdk::AUElement::SetParameter(v253, 0x33u, 2.0, 0);
    v255 = *((_QWORD *)this + 104);
    if (v255)
    {
      v256 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)v255 + 32))(v255, k);
    }
    else
    {
      v257 = *((_QWORD *)this + 101);
      if (k >= (*((_QWORD *)this + 102) - v257) >> 3)
        v256 = 0;
      else
        v256 = *(ausdk::AUElement **)(v257 + 8 * k);
    }
    ausdk::AUElement::SetParameter(v256, 0x34u, 0.2, 0);
    v258 = *((_QWORD *)this + 104);
    if (v258)
    {
      v259 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)v258 + 32))(v258, k);
    }
    else
    {
      v260 = *((_QWORD *)this + 101);
      if (k >= (*((_QWORD *)this + 102) - v260) >> 3)
        v259 = 0;
      else
        v259 = *(ausdk::AUElement **)(v260 + 8 * k);
    }
    ausdk::AUElement::SetParameter(v259, 0x35u, 0.0001, 0);
    v261 = *((_QWORD *)this + 104);
    if (v261)
    {
      v262 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)v261 + 32))(v261, k);
    }
    else
    {
      v263 = *((_QWORD *)this + 101);
      if (k >= (*((_QWORD *)this + 102) - v263) >> 3)
        v262 = 0;
      else
        v262 = *(ausdk::AUElement **)(v263 + 8 * k);
    }
    ausdk::AUElement::SetParameter(v262, 0x35u, 0.0001, 0);
    v264 = *((_QWORD *)this + 104);
    if (v264)
    {
      v265 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)v264 + 32))(v264, k);
    }
    else
    {
      v266 = *((_QWORD *)this + 101);
      if (k >= (*((_QWORD *)this + 102) - v266) >> 3)
        v265 = 0;
      else
        v265 = *(ausdk::AUElement **)(v266 + 8 * k);
    }
    ausdk::AUElement::SetParameter(v265, 0x37u, 0.5, 0);
    v267 = *((_QWORD *)this + 104);
    if (v267)
    {
      v268 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)v267 + 32))(v267, k);
    }
    else
    {
      v269 = *((_QWORD *)this + 101);
      if (k >= (*((_QWORD *)this + 102) - v269) >> 3)
        v268 = 0;
      else
        v268 = *(ausdk::AUElement **)(v269 + 8 * k);
    }
    ausdk::AUElement::SetParameter(v268, 0x38u, 0.5, 0);
    v270 = *((_QWORD *)this + 104);
    if (v270)
    {
      v271 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)v270 + 32))(v270, k);
    }
    else
    {
      v272 = *((_QWORD *)this + 101);
      if (k >= (*((_QWORD *)this + 102) - v272) >> 3)
        v271 = 0;
      else
        v271 = *(ausdk::AUElement **)(v272 + 8 * k);
    }
    ausdk::AUElement::SetParameter(v271, 0x39u, -0.5, 0);
    v273 = *((_QWORD *)this + 104);
    if (v273)
    {
      v274 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)v273 + 32))(v273, k);
    }
    else
    {
      v275 = *((_QWORD *)this + 101);
      if (k >= (*((_QWORD *)this + 102) - v275) >> 3)
        v274 = 0;
      else
        v274 = *(ausdk::AUElement **)(v275 + 8 * k);
    }
    ausdk::AUElement::SetParameter(v274, 0x3Au, 0.5, 0);
    v276 = *((_QWORD *)this + 104);
    if (v276)
    {
      v277 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)v276 + 32))(v276, k);
    }
    else
    {
      v278 = *((_QWORD *)this + 101);
      if (k >= (*((_QWORD *)this + 102) - v278) >> 3)
        v277 = 0;
      else
        v277 = *(ausdk::AUElement **)(v278 + 8 * k);
    }
    ausdk::AUElement::SetParameter(v277, 0x3Bu, 0.9, 0);
    v279 = *((_QWORD *)this + 104);
    if (v279)
    {
      v280 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)v279 + 32))(v279, k);
    }
    else
    {
      v281 = *((_QWORD *)this + 101);
      if (k >= (*((_QWORD *)this + 102) - v281) >> 3)
        v280 = 0;
      else
        v280 = *(ausdk::AUElement **)(v281 + 8 * k);
    }
    ausdk::AUElement::SetParameter(v280, 0x3Cu, 0.7, 0);
    v282 = *((_QWORD *)this + 104);
    if (v282)
    {
      v283 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)v282 + 32))(v282, k);
    }
    else
    {
      v284 = *((_QWORD *)this + 101);
      if (k >= (*((_QWORD *)this + 102) - v284) >> 3)
        v283 = 0;
      else
        v283 = *(ausdk::AUElement **)(v284 + 8 * k);
    }
    ausdk::AUElement::SetParameter(v283, 0x3Du, 50.0, 0);
    v285 = *((_QWORD *)this + 104);
    if (v285)
    {
      v286 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)v285 + 32))(v285, k);
    }
    else
    {
      v287 = *((_QWORD *)this + 101);
      if (k >= (*((_QWORD *)this + 102) - v287) >> 3)
        v286 = 0;
      else
        v286 = *(ausdk::AUElement **)(v287 + 8 * k);
    }
    ausdk::AUElement::SetParameter(v286, 0x3Eu, 1.0, 0);
    v288 = *((_QWORD *)this + 104);
    if (v288)
    {
      v289 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)v288 + 32))(v288, k);
    }
    else
    {
      v290 = *((_QWORD *)this + 101);
      if (k >= (*((_QWORD *)this + 102) - v290) >> 3)
        v289 = 0;
      else
        v289 = *(ausdk::AUElement **)(v290 + 8 * k);
    }
    ausdk::AUElement::SetParameter(v289, 0x3Fu, 20.0, 0);
    v291 = *((_QWORD *)this + 104);
    if (v291)
    {
      v292 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)v291 + 32))(v291, k);
    }
    else
    {
      v293 = *((_QWORD *)this + 101);
      if (k >= (*((_QWORD *)this + 102) - v293) >> 3)
        v292 = 0;
      else
        v292 = *(ausdk::AUElement **)(v293 + 8 * k);
    }
    ausdk::AUElement::SetParameter(v292, 0x40u, 0.0, 0);
    v294 = *((_QWORD *)this + 104);
    if (v294)
    {
      v295 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)v294 + 32))(v294, k);
    }
    else
    {
      v296 = *((_QWORD *)this + 101);
      if (k >= (*((_QWORD *)this + 102) - v296) >> 3)
        v295 = 0;
      else
        v295 = *(ausdk::AUElement **)(v296 + 8 * k);
    }
    ausdk::AUElement::SetParameter(v295, 0x42u, 0.0, 0);
    v297 = *((_QWORD *)this + 104);
    if (v297)
    {
      v298 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)v297 + 32))(v297, k);
    }
    else
    {
      v299 = *((_QWORD *)this + 101);
      if (k >= (*((_QWORD *)this + 102) - v299) >> 3)
        v298 = 0;
      else
        v298 = *(ausdk::AUElement **)(v299 + 8 * k);
    }
    ausdk::AUElement::SetParameter(v298, 0x41u, 0.0, 0);
  }
  ++*((_DWORD *)this + 159);
}

void sub_1B643BA10(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, CAExtAudioFile *a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

void AUControlFreak::~AUControlFreak(AUControlFreak *this)
{
  AUDspLib::~AUDspLib(this);
  JUMPOUT(0x1BCC95CECLL);
}

uint64_t AUControlFreak::Reset(AUControlFreak *this)
{
  caulk::pooled_semaphore_mutex *v2;
  uint64_t v3;
  char *v4;
  DspLib::ControlFreak::Algorithm *v5;

  if (*((_BYTE *)this + 17))
  {
    v2 = (AUControlFreak *)((char *)this + 1824);
    caulk::pooled_semaphore_mutex::_lock((AUControlFreak *)((char *)this + 1824));
    v3 = 0;
    v4 = (char *)this + 528;
    do
    {
      v5 = *(DspLib::ControlFreak::Algorithm **)&v4[v3];
      if (v5)
        DspLib::ControlFreak::Algorithm::clearAudioBuffers(v5);
      v3 += 56;
    }
    while (v3 != 1008);
    caulk::pooled_semaphore_mutex::_unlock(v2);
  }
  return 0;
}

void sub_1B643BD2C(_Unwind_Exception *a1)
{
  caulk::pooled_semaphore_mutex *v1;

  caulk::pooled_semaphore_mutex::_unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t AUControlFreak::GetParameterValueStrings(AUControlFreak *this, unsigned int a2, unsigned int a3, const __CFArray **a4)
{
  const __CFAllocator *v5;
  __CFArray *Mutable;
  uint64_t i;
  CFStringRef v8;
  uint64_t result;

  if (!a4)
    return 4294956418;
  if (*(_DWORD *)(*((_QWORD *)this + 211) + 4 * a3) != 12)
    return 4294956418;
  v5 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, 0);
  for (i = 0; i != 5; ++i)
  {
    v8 = CFStringCreateWithCString(v5, _ZGRN6DspLib10SaturationL22kSaturationFlavorNamesE_[i], 0x8000100u);
    CFArrayAppendValue(Mutable, v8);
  }
  result = 0;
  *a4 = Mutable;
  return result;
}

uint64_t AUControlFreak::SupportedNumChannels(AUControlFreak *this, const AUChannelInfo **a2)
{
  if (a2)
    *a2 = (const AUChannelInfo *)&AUControlFreak::SupportedNumChannels(AUChannelInfo const**)::kSupportedNumChannels;
  return 32;
}

uint64_t AUControlFreak::Version(AUControlFreak *this)
{
  return 262913;
}

DspLib::ControlFreak::Algorithm *AUControlFreak::newDspLibAlgorithm(AUControlFreak *this)
{
  DspLib::ControlFreak::Algorithm *v1;

  v1 = (DspLib::ControlFreak::Algorithm *)operator new();
  DspLib::ControlFreak::Algorithm::Algorithm(v1);
  return v1;
}

void sub_1B643BE54(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1BCC95CEC](v1, 0x10E1C403DC45B21);
  _Unwind_Resume(a1);
}

void sub_1B643C730(_Unwind_Exception *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  _Unwind_Resume(a1);
}

void sub_1B643CD90(_Unwind_Exception *exception_object, int a2)
{
  uint64_t v2;
  _DWORD *v4;
  const char *v5;
  size_t v6;
  uint64_t v7;
  uint64_t message;
  caulk::concurrent::message *v9;
  char *v10;
  uint64_t v11;
  id v12;
  const char *v13;
  int v14;
  void *v15;
  void *v16;
  const char *v17;
  size_t v18;
  uint64_t v19;
  uint64_t v20;
  caulk::concurrent::message *v21;
  char *v22;
  uint64_t v23;
  id v24;
  const char *v25;
  uint64_t v26;
  uint64_t v27;
  caulk::concurrent::message *v28;
  uint64_t v29;
  void *v30;
  caulk::concurrent::messenger *v31;
  id v32;

  if (a2)
  {
    if (a2 == 3)
    {
      v4 = __cxa_begin_catch(exception_object);
      v5 = (const char *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)v4 + 16))(v4);
      v6 = strlen(v5);
      v7 = _os_log_pack_size() + 88;
      message = caulk::deferred_logger::create_message(*(caulk::deferred_logger **)(*(_QWORD *)(v2 + 32) + 152), v6 + v7 + 1, 16);
      if (message)
      {
        v9 = (caulk::concurrent::message *)message;
        v10 = (char *)(message + v7);
        v11 = _os_log_pack_fill();
        v12 = *(id *)(v2 + 32);
        v13 = (const char *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)v4 + 16))(v4);
        stpcpy(v10, v13);
        v14 = v4[2];
        *(_DWORD *)v11 = 134218498;
        *(_QWORD *)(v11 + 4) = v12;
        *(_WORD *)(v11 + 12) = 2080;
        *(_QWORD *)(v11 + 14) = v10;
        *(_WORD *)(v11 + 22) = 1024;
        *(_DWORD *)(v11 + 24) = v14;
        caulk::concurrent::messenger::enqueue(*(caulk::concurrent::messenger **)(*(_QWORD *)(*(_QWORD *)(v2 + 32) + 152) + 16), v9);

      }
    }
    else
    {
      v15 = __cxa_begin_catch(exception_object);
      if (a2 == 2)
      {
        v16 = v15;
        v17 = (const char *)(*(uint64_t (**)(void *))(*(_QWORD *)v15 + 16))(v15);
        v18 = strlen(v17);
        v19 = _os_log_pack_size() + 88;
        v20 = caulk::deferred_logger::create_message(*(caulk::deferred_logger **)(*(_QWORD *)(v2 + 32) + 152), v18 + v19 + 1, 16);
        if (v20)
        {
          v21 = (caulk::concurrent::message *)v20;
          v22 = (char *)(v20 + v19);
          v23 = _os_log_pack_fill();
          v24 = *(id *)(v2 + 32);
          v25 = (const char *)(*(uint64_t (**)(void *))(*(_QWORD *)v16 + 16))(v16);
          stpcpy(v22, v25);
          *(_DWORD *)v23 = 134218242;
          *(_QWORD *)(v23 + 4) = v24;
          *(_WORD *)(v23 + 12) = 2080;
          *(_QWORD *)(v23 + 14) = v22;
          caulk::concurrent::messenger::enqueue(*(caulk::concurrent::messenger **)(*(_QWORD *)(*(_QWORD *)(v2 + 32) + 152) + 16), v21);

        }
      }
      else
      {
        v26 = _os_log_pack_size();
        v27 = caulk::deferred_logger::create_message(*(caulk::deferred_logger **)(*(_QWORD *)(v2 + 32) + 152), v26 + 88, 16);
        if (v27)
        {
          v28 = (caulk::concurrent::message *)v27;
          v29 = _os_log_pack_fill();
          v30 = *(void **)(v2 + 32);
          *(_DWORD *)v29 = 134217984;
          *(_QWORD *)(v29 + 4) = v30;
          v31 = *(caulk::concurrent::messenger **)(*(_QWORD *)(*(_QWORD *)(v2 + 32) + 152) + 16);
          v32 = v30;
          caulk::concurrent::messenger::enqueue(v31, v28);

        }
      }
    }
    __cxa_end_catch();
    JUMPOUT(0x1B643CD58);
  }
  _Unwind_Resume(exception_object);
}

void AUADAMSink::~AUADAMSink(AUADAMSink *this)
{
  AUADAMSink::~AUADAMSink(this);
  JUMPOUT(0x1BCC95CECLL);
}

{
  unsigned __int8 v2;
  NSObject *v3;
  const void *v4;
  int v5;
  const char *v6;
  __int16 v7;
  int v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  {
    AU::ADAMSink::get_log(void)::auadam_os_log = (uint64_t)os_log_create("com.apple.coreaudio", "AUADAMSink");
  }
  v3 = AU::ADAMSink::get_log(void)::auadam_os_log;
  if (os_log_type_enabled((os_log_t)AU::ADAMSink::get_log(void)::auadam_os_log, OS_LOG_TYPE_INFO))
  {
    v5 = 136315394;
    v6 = "AUADAMSink.cpp";
    v7 = 1024;
    v8 = 36;
    _os_log_impl(&dword_1B5ED0000, v3, OS_LOG_TYPE_INFO, "%s:%-5d destroyed", (uint8_t *)&v5, 0x12u);
  }
  v4 = (const void *)*((_QWORD *)this + 68);
  if (v4)
    CFRelease(v4);
  ausdk::AUBase::~AUBase(this);
}

uint64_t AUADAMSink::Initialize(AUADAMSink *this)
{
  uint64_t v2;
  uint64_t v3;
  double *v4;
  const AudioStreamBasicDescription *v5;
  const __CFString *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t Element;
  uint64_t v10;
  uint64_t v11;
  unsigned __int8 v12;
  NSObject *v13;
  unsigned __int8 v14;
  NSObject *v15;
  uint64_t v16;
  unsigned int v18;
  uint64_t v19;
  _BYTE buf[12];
  __int16 v21;
  int v22;
  __int16 v23;
  uint64_t v24;
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  v2 = *((_QWORD *)this + 21);
  if (v2)
    LODWORD(v3) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 24))(v2);
  else
    v3 = (*((_QWORD *)this + 19) - *((_QWORD *)this + 18)) >> 3;
  if ((_DWORD)v3 != 1
    || (v4 = (double *)ausdk::AUScope::SafeGetElement((AUADAMSink *)((char *)this + 80), 0),
        v5 = (const AudioStreamBasicDescription *)ausdk::AUScope::SafeGetElement((AUADAMSink *)((char *)this + 128), 0),
        v4[10] == v5[2].mSampleRate)
    && *((_DWORD *)v4 + 22) == v5[2].mFormatID
    && *((_DWORD *)v4 + 24) == v5[2].mBytesPerPacket
    && *((_DWORD *)v4 + 25) == v5[2].mFramesPerPacket
    && *((_DWORD *)v4 + 27) == v5[2].mChannelsPerFrame
    && *((_DWORD *)v4 + 28) == v5[2].mBitsPerChannel
    && CA::Implementation::EquivalentFormatFlags((CA::Implementation *)(v4 + 10), v5 + 2, 0, 0))
  {
    v6 = (const __CFString *)*((_QWORD *)this + 68);
    if (*((_BYTE *)this + 540))
    {
      if (v6)
      {
        v7 = *((_QWORD *)this + 66);
        v8 = *((unsigned int *)this + 134);
        applesauce::CF::convert_to<std::string,0>(v6, (uint64_t)buf);
        Element = ausdk::AUScope::SafeGetElement((AUADAMSink *)((char *)this + 80), 0);
        v10 = *((unsigned int *)this + 84);
        if (AudioDataAnalysisManagerLibraryLoader(void)::once != -1)
        {
          v19 = Element;
          v18 = *((_DWORD *)this + 84);
          dispatch_once(&AudioDataAnalysisManagerLibraryLoader(void)::once, &__block_literal_global_14513);
          Element = v19;
          v10 = v18;
        }
        if (AudioDataAnalysisManagerLibraryLoader(void)::libSym)
          v11 = AudioDataAnalysisManagerLibraryLoader(void)::libSym(v7, v8, buf, Element + 80, v10, 0);
        else
          v11 = 560033897;
        if (SBYTE3(v24) < 0)
          operator delete(*(void **)buf);
        if ((_DWORD)v11)
        {
          {
            AU::ADAMSink::get_log(void)::auadam_os_log = (uint64_t)os_log_create("com.apple.coreaudio", "AUADAMSink");
          }
          v15 = AU::ADAMSink::get_log(void)::auadam_os_log;
          if (os_log_type_enabled((os_log_t)AU::ADAMSink::get_log(void)::auadam_os_log, OS_LOG_TYPE_ERROR))
          {
            v16 = *((_QWORD *)this + 66);
            *(_DWORD *)buf = 136315650;
            *(_QWORD *)&buf[4] = "AUADAMSink.cpp";
            v21 = 1024;
            v22 = 75;
            v23 = 2048;
            v24 = v16;
            _os_log_impl(&dword_1B5ED0000, v15, OS_LOG_TYPE_ERROR, "%s:%-5d error creating PCM node with session ID: %llu", buf, 0x1Cu);
          }
        }
        return v11;
      }
    }
    else if (!v6)
    {
      return 0;
    }
    return 4294956445;
  }
  {
    AU::ADAMSink::get_log(void)::auadam_os_log = (uint64_t)os_log_create("com.apple.coreaudio", "AUADAMSink");
  }
  v13 = AU::ADAMSink::get_log(void)::auadam_os_log;
  if (os_log_type_enabled((os_log_t)AU::ADAMSink::get_log(void)::auadam_os_log, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 136315394;
    *(_QWORD *)&buf[4] = "AUADAMSink.cpp";
    v21 = 1024;
    v22 = 54;
    _os_log_impl(&dword_1B5ED0000, v13, OS_LOG_TYPE_ERROR, "%s:%-5d input and output formats do not match", buf, 0x12u);
  }
  return 4294956428;
}

void sub_1B643D4CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  _Unwind_Resume(exception_object);
}

uint64_t AUADAMSink::GetPropertyInfo(AUADAMSink *this, int a2, int a3, unsigned int a4, unsigned int *a5, BOOL *a6)
{
  uint64_t v6;
  unsigned int v7;
  char v8;

  v6 = 4294956417;
  if (!a3)
  {
    if (a2 > 1936158316)
    {
      if (a2 == 1936158317 || a2 == 1936943460)
      {
        v7 = 8;
        goto LABEL_9;
      }
    }
    else
    {
      if (a2 == 21)
      {
        *a5 = 4;
        v8 = 1;
        goto LABEL_11;
      }
      if (a2 == 1936157028)
      {
        v7 = 4;
LABEL_9:
        *a5 = v7;
        v8 = *((_BYTE *)this + 17) ^ 1;
LABEL_11:
        v6 = 0;
        *a6 = v8;
      }
    }
  }
  return v6;
}

uint64_t AUADAMSink::GetProperty(AUADAMSink *this, int a2, int a3, unsigned int a4, _QWORD *a5)
{
  uint64_t result;
  int v8;
  uint64_t v9;

  if (a3)
    return 4294956417;
  result = 4294956417;
  if (a2 > 1936158316)
  {
    if (a2 == 1936158317)
    {
      v9 = *((_QWORD *)this + 68);
      if (v9)
        CFRetain(*((CFTypeRef *)this + 68));
      result = 0;
      *a5 = v9;
    }
    else if (a2 == 1936943460)
    {
      result = 0;
      *a5 = *((_QWORD *)this + 66);
    }
  }
  else
  {
    if (a2 == 21)
    {
      result = 0;
      v8 = *((unsigned __int8 *)this + 552);
LABEL_18:
      *(_DWORD *)a5 = v8;
      return result;
    }
    if (a2 == 1936157028)
    {
      if (*((_BYTE *)this + 540))
        v8 = *((_DWORD *)this + 134);
      else
        v8 = 0;
      result = 0;
      goto LABEL_18;
    }
  }
  return result;
}

uint64_t AUADAMSink::SetProperty(AUADAMSink *this, int a2, int a3, unsigned int a4, CFTypeRef *a5, int a6)
{
  uint64_t result;
  NSObject *log;
  int v9;
  const char *v10;
  NSObject *v11;
  uint32_t v12;
  NSObject *v13;
  void **v14;
  uint64_t v15;
  AU::ADAMSink *v16;
  NSObject *v17;
  const __CFString **v18;
  void **v19;
  void *__p[2];
  char v21;
  _BYTE buf[12];
  __int16 v23;
  int v24;
  __int16 v25;
  void **v26;
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  if (a3)
    return 4294956417;
  result = 4294956417;
  if (a2 <= 1936158316)
  {
    if (a2 == 21)
    {
      if (a6 == 4)
      {
        result = 0;
        *((_BYTE *)this + 552) = *(_DWORD *)a5 != 0;
        return result;
      }
      return 4294956445;
    }
    if (a2 != 1936157028)
      return result;
    if (!*((_BYTE *)this + 17))
    {
      if (a6 == 4)
      {
        *((_DWORD *)this + 134) = *(_DWORD *)a5;
        *((_BYTE *)this + 540) = 1;
        log = AU::ADAMSink::get_log((AU::ADAMSink *)0xFFFFD581);
        result = os_log_type_enabled(log, OS_LOG_TYPE_INFO);
        if ((_DWORD)result)
        {
          if (!*((_BYTE *)this + 540))
            std::__throw_bad_optional_access[abi:ne180100]();
          v9 = *((_DWORD *)this + 134);
          *(_DWORD *)buf = 136315650;
          *(_QWORD *)&buf[4] = "AUADAMSink.cpp";
          v23 = 1024;
          v24 = 216;
          v25 = 1024;
          LODWORD(v26) = v9;
          v10 = "%s:%-5d Signal index set by user : %u";
          v11 = log;
          v12 = 24;
          goto LABEL_18;
        }
        return result;
      }
      return 4294956445;
    }
    return 4294956447;
  }
  if (a2 == 1936158317)
  {
    if (!*((_BYTE *)this + 17))
    {
      result = 4294956445;
      if (a5)
      {
        if (a6 == 8)
        {
          applesauce::CF::StringRef::from_get((applesauce::CF::StringRef *)buf, *a5);
          v15 = *((_QWORD *)this + 68);
          *((_QWORD *)this + 68) = *(_QWORD *)buf;
          *(_QWORD *)buf = v15;
          applesauce::CF::StringRef::~StringRef((const void **)buf);
          v17 = AU::ADAMSink::get_log(v16);
          result = os_log_type_enabled(v17, OS_LOG_TYPE_INFO);
          if ((_DWORD)result)
          {
            v18 = (const __CFString **)applesauce::CF::StringRef::operator->((_QWORD *)this + 68);
            applesauce::CF::convert_to<std::string,0>(*v18, (uint64_t)__p);
            if (v21 >= 0)
              v19 = __p;
            else
              v19 = (void **)__p[0];
            *(_DWORD *)buf = 136315650;
            *(_QWORD *)&buf[4] = "AUADAMSink.cpp";
            v23 = 1024;
            v24 = 225;
            v25 = 2080;
            v26 = v19;
            _os_log_impl(&dword_1B5ED0000, v17, OS_LOG_TYPE_INFO, "%s:%-5d Signal name set by user : %s", buf, 0x1Cu);
            if (v21 < 0)
              operator delete(__p[0]);
            return 0;
          }
        }
      }
      return result;
    }
    return 4294956447;
  }
  if (a2 != 1936943460)
    return result;
  if (*((_BYTE *)this + 17))
    return 4294956447;
  if (a6 != 8)
    return 4294956445;
  *((_QWORD *)this + 66) = *a5;
  v13 = AU::ADAMSink::get_log((AU::ADAMSink *)0xFFFFD581);
  result = os_log_type_enabled(v13, OS_LOG_TYPE_INFO);
  if ((_DWORD)result)
  {
    v14 = (void **)*((_QWORD *)this + 66);
    *(_DWORD *)buf = 136315650;
    *(_QWORD *)&buf[4] = "AUADAMSink.cpp";
    v23 = 1024;
    v24 = 208;
    v25 = 2048;
    v26 = v14;
    v10 = "%s:%-5d Session ID set by user : %llu";
    v11 = v13;
    v12 = 28;
LABEL_18:
    _os_log_impl(&dword_1B5ED0000, v11, OS_LOG_TYPE_INFO, v10, buf, v12);
    return 0;
  }
  return result;
}

uint64_t AUADAMSink::CanScheduleParameters(AUADAMSink *this)
{
  return 0;
}

uint64_t AUADAMSink::ProcessMultipleBufferLists(AUADAMSink *this, unsigned int *a2, uint64_t a3, unsigned int a4, const AudioBufferList **a5, int a6, AudioBufferList **a7)
{
  unint64_t v12;
  uint64_t v13;
  const void *v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  if (*((_DWORD *)this + 84) < a3)
    return 4294956422;
  if (a6 == 1)
  {
    v12 = 0;
    v13 = 16;
    while (v12 < *(unsigned int *)(ausdk::AUScope::SafeGetElement((AUADAMSink *)((char *)this + 80), 0) + 108))
    {
      v14 = *(const void **)((char *)&(*a5)->mNumberBuffers + v13);
      v15 = *(void **)((char *)&(*a7)->mNumberBuffers + v13);
      if (v14 != v15)
        memcpy(v15, v14, 4 * a3);
      ++v12;
      v13 += 16;
    }
  }
  if (*((_BYTE *)this + 552) || !*((_BYTE *)this + 540))
    return 0;
  v16 = *((_QWORD *)this + 66);
  v17 = *((unsigned int *)this + 134);
  v18 = (uint64_t)*a5;
  if (AudioDataAnalysisManagerLibraryLoader(void)::once != -1)
    dispatch_once(&AudioDataAnalysisManagerLibraryLoader(void)::once, &__block_literal_global_14513);
  if (AudioDataAnalysisManagerLibraryLoader(void)::libSym)
    return AudioDataAnalysisManagerLibraryLoader(void)::libSym(v16, v17, v18, a3, (char *)this + 272);
  else
    return 560033897;
}

BOOL AUADAMSink::BusCountWritable(AUADAMSink *this, int a2)
{
  return a2 == 2;
}

uint64_t AUADAMSink::SetBusCount(int64x2_t *this, int a2, unsigned int a3)
{
  if (this[1].i8[1])
    return 4294956447;
  if (a2 != 2)
    return 4294956430;
  if (a3 > 1)
    return 4294956445;
  ausdk::AUScope::SetNumberOfElements(this + 8, a3);
  return 0;
}

double AUADAMSink::GetTailTime(AUADAMSink *this)
{
  return 0.0;
}

uint64_t AUADAMSink::SupportsTail(AUADAMSink *this)
{
  return 1;
}

BOOL AUADAMSink::StreamFormatWritable(AUADAMSink *this)
{
  return *((_BYTE *)this + 17) == 0;
}

uint64_t AUADAMSink::SupportedNumChannels(AUADAMSink *this, const AUChannelInfo **a2)
{
  if (a2)
    *a2 = (const AUChannelInfo *)&AUADAMSink::SupportedNumChannels(AUChannelInfo const**)::sSupportedChannels;
  return 1;
}

void ___Z37AudioDataAnalysisManagerLibraryLoaderv_block_invoke_14514()
{
  void *v0;
  char *v1;
  int v2;
  char *v3;
  uint64_t v4;

  v4 = *MEMORY[0x1E0C80C00];
  v0 = dlopen("/usr/lib/libAudioIssueDetector.dylib", 1);
  if (v0)
    goto LABEL_5;
  if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
  {
    v2 = 136315138;
    v3 = dlerror();
    _os_log_error_impl(&dword_1B5ED0000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "dlerror : libAudioIssueDetector ADAM: %s", (uint8_t *)&v2, 0xCu);
  }
  v0 = dlopen("/usr/local/lib/libAudioIssueDetector.dylib", 1);
  if (v0)
  {
LABEL_5:
    AudioDataAnalysisManagerLibraryLoader(void)::libSym = (uint64_t (*)(_QWORD, _QWORD))dlsym(v0, "AudioDataAnalysisManagerCreate");
    AudioDataAnalysisManagerLibraryLoader(void)::libSym = (uint64_t (*)(_QWORD))dlsym(v0, "AudioDataAnalysisManagerDispose");
    AudioDataAnalysisManagerLibraryLoader(void)::libSym = (uint64_t)dlsym(v0, "AudioDataAnalysisManagerReset");
    AudioDataAnalysisManagerLibraryLoader(void)::libSym = (uint64_t (*)(_QWORD, _QWORD))dlsym(v0, "AudioDataAnalysisManagerUpdateReportingSessions");
    AudioDataAnalysisManagerLibraryLoader(void)::libSym = (uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))dlsym(v0, "AudioDataAnalysisManagerCreateNodePCM");
    AudioDataAnalysisManagerLibraryLoader(void)::libSym = (uint64_t)dlsym(v0, "AudioDataAnalysisManagerCreateNodeSPL");
    AudioDataAnalysisManagerLibraryLoader(void)::libSym = (uint64_t)dlsym(v0, "AudioDataAnalysisManagerRemoveNode");
    AudioDataAnalysisManagerLibraryLoader(void)::libSym = (uint64_t (*)(_QWORD))dlsym(v0, "AudioDataAnalysisManagerInitialize");
    AudioDataAnalysisManagerLibraryLoader(void)::libSym = (uint64_t)dlsym(v0, "AudioDataAnalysisManagerIsSessionInitialized");
    AudioDataAnalysisManagerLibraryLoader(void)::libSym = (uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))dlsym(v0, "AudioDataAnalysisManagerProcessAudio");
    AudioDataAnalysisManagerLibraryLoader(void)::libSym = (uint64_t)dlsym(v0, "AudioDataAnalysisManagerProcessSPL");
    AudioDataAnalysisManagerLibraryLoader(void)::libSym = (uint64_t)dlsym(v0, "AudioDataAnalysisManagerCreateNodeEnvSPL");
    AudioDataAnalysisManagerLibraryLoader(void)::libSym = (uint64_t)dlsym(v0, "AudioDataAnalysisManagerCreateNodeEnvSoundClass");
    AudioDataAnalysisManagerLibraryLoader(void)::libSym = (uint64_t)dlsym(v0, "AudioDataAnalysisManagerProcessEnvSPL");
    AudioDataAnalysisManagerLibraryLoader(void)::libSym = (uint64_t)dlsym(v0, "AudioDataAnalysisManagerProcessEnvSoundClass");
    AudioDataAnalysisManagerLibraryLoader(void)::libSym = (uint64_t)dlsym(v0, "AudioDataAnalysisManagerSetDeviceInfo");
    AudioDataAnalysisManagerLibraryLoader(void)::libSym = (uint64_t)dlsym(v0, "AudioDataAnalysisManagerRegisterDeviceInfo");
    AudioDataAnalysisManagerLibraryLoader(void)::libSym = (uint64_t)dlsym(v0, "AudioDataAnalysisManagerSetDeviceConnectionState");
    AudioDataAnalysisManagerLibraryLoader(void)::libSym = (uint64_t)dlsym(v0, "AudioDataAnalysisManagerStartServices");
    AudioDataAnalysisManagerLibraryLoader(void)::libSym = (uint64_t)dlsym(v0, "AudioDataAnalysisManagerConnectedWiredDeviceIsHeadphone");
    AudioDataAnalysisManagerLibraryLoader(void)::libSym = (uint64_t (*)(_QWORD, _QWORD))dlsym(v0, "AudioDataAnalysisManagerSetApplicationBundleID");
  }
  else if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
  {
    v1 = dlerror();
    v2 = 136315138;
    v3 = v1;
    _os_log_error_impl(&dword_1B5ED0000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "dlerror : libAudioIssueDetector ADAM: %s", (uint8_t *)&v2, 0xCu);
  }
}

uint64_t AU::ADAMSink::get_log(AU::ADAMSink *this)
{
  unsigned __int8 v1;
  char *v2;
  int v4;

  v2 = (char *)&xmmword_1EF135FF8 + 8;
  if ((v1 & 1) == 0)
  {
    v2 = (_BYTE *)(&xmmword_1EF135FF8 + 8);
    if (v4)
    {
      AU::ADAMSink::get_log(void)::auadam_os_log = (uint64_t)os_log_create("com.apple.coreaudio", "AUADAMSink");
      v2 = (_BYTE *)(&xmmword_1EF135FF8 + 8);
    }
  }
  return *((_QWORD *)v2 + 396);
}

void sub_1B643DFA4(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

void VoiceProcessorV3::~VoiceProcessorV3(VoiceProcessorV3 *this)
{
  VoiceProcessorV3::~VoiceProcessorV3(this);
  JUMPOUT(0x1BCC95CECLL);
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  *(_QWORD *)this = &off_1E69DC050;
  caulk::details::lifetime_guard_base<VoiceProcessorV2>::invalidate((uint64_t)this + 16600);
  v2 = *((_QWORD *)this + 2087);
  std::mutex::lock((std::mutex *)(v2 + 88));
  *(_BYTE *)(v2 + 80) = 0;
  std::mutex::unlock((std::mutex *)(v2 + 88));
  v3 = *((_QWORD *)this + 2089);
  std::mutex::lock((std::mutex *)(v3 + 88));
  *(_BYTE *)(v3 + 80) = 0;
  std::mutex::unlock((std::mutex *)(v3 + 88));
  v4 = *((_QWORD *)this + 2091);
  std::mutex::lock((std::mutex *)(v4 + 88));
  *(_BYTE *)(v4 + 80) = 0;
  std::mutex::unlock((std::mutex *)(v4 + 88));
  v5 = *((_QWORD *)this + 2093);
  std::mutex::lock((std::mutex *)(v5 + 88));
  *(_BYTE *)(v5 + 80) = 0;
  std::mutex::unlock((std::mutex *)(v5 + 88));
  std::shared_ptr<vp::services::Telephony_Utility>::~shared_ptr[abi:ne180100]((uint64_t)this + 16744);
  std::shared_ptr<vp::services::Telephony_Utility>::~shared_ptr[abi:ne180100]((uint64_t)this + 16728);
  std::shared_ptr<vp::services::Telephony_Utility>::~shared_ptr[abi:ne180100]((uint64_t)this + 16712);
  std::shared_ptr<vp::services::Telephony_Utility>::~shared_ptr[abi:ne180100]((uint64_t)this + 16696);
  VoiceProcessorV2::~VoiceProcessorV2(this);
}

uint64_t VoiceProcessorV3::GetVersion(VoiceProcessorV3 *this)
{
  return 3;
}

void VoiceProcessorV3::SetupUplinkBasicAUChain(VoiceProcessorV3 *this)
{
  char *v2;
  unint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  int v7;
  char *v9;
  int v10;

  v2 = (char *)this + 4528;
  v3 = (unint64_t *)((char *)this + 4656);
  v9 = (char *)this + 4656;
  v10 = 0;
  std::__fill_n[abi:ne180100]<false,std::__bitset<2ul,71ul>>((uint64_t)&v9);
  v4 = *((_QWORD *)this + 582);
  v5 = *((_QWORD *)this + 583);
  *((_QWORD *)this + 583) = v5 | 0x11;
  v6 = v4 | 0xC010004000001040;
  *((_QWORD *)this + 582) = v4 | 0xC010004000001040;
  if (*((_BYTE *)this + 1676))
  {
    v6 = v4 | 0xD010004000001040;
    *v3 = v4 | 0xD010004000001040;
  }
  v7 = *((_DWORD *)this + 571);
  if (v7 == 1 || v7 == -1)
    *((_QWORD *)this + 583) = v5 | 0x13;
  if (*v2)
  {
    v6 |= 0x8000000000000uLL;
    *v3 = v6;
  }
  if (v2[1])
    *v3 = v6 | 0x20;
}

void VoiceProcessorV3::SetupUplinkLiteAUChain(VoiceProcessorV3 *this)
{
  unint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  char *v7;
  int v8;

  v2 = (unint64_t *)((char *)this + 4656);
  v7 = (char *)this + 4656;
  v8 = 0;
  std::__fill_n[abi:ne180100]<false,std::__bitset<2ul,71ul>>((uint64_t)&v7);
  v3 = *((_QWORD *)this + 582);
  v4 = *((_QWORD *)this + 583);
  *((_QWORD *)this + 583) = v4 | 0x10;
  *((_QWORD *)this + 582) = v3 | 0xC000004000001040;
  if (*((_BYTE *)this + 1676))
    *v2 = v3 | 0xD000004000001040;
  v5 = *((_DWORD *)this + 571);
  if (v5 == 1 || v5 == -1)
    *((_QWORD *)this + 583) = v4 | 0x12;
}

uint64_t VoiceProcessorV3::SetupUplink_MMNS(uint64_t this, unsigned int a2)
{
  unint64_t v2;

  if (a2 != 1)
  {
    v2 = *(_QWORD *)(this + 4656) & 0xFFAFFF7FFFFFDF7FLL;
    *(_QWORD *)(this + 4656) = v2 | 0x40008000002080;
    if (a2)
    {
      *(_QWORD *)(this + 4656) = v2 | 0x40008000002086;
      if (a2 >= 3)
        *(_QWORD *)(this + 4656) = v2 | 0x4000800000208ELL;
    }
  }
  return this;
}

uint64_t VoiceProcessorV3::SetupUplink_BF_MS(uint64_t this, unsigned int a2, char a3)
{
  uint64_t v3;
  uint64_t v4;

  if (a2 < 2)
  {
    if (a2 && (a3 & 1) == 0)
    {
      v4 = *(_QWORD *)(this + 4656) | 2;
      goto LABEL_8;
    }
  }
  else
  {
    v3 = *(_QWORD *)(this + 4656);
    *(_QWORD *)(this + 4656) = v3 | 0x60002080;
    if ((a3 & 1) == 0)
    {
      *(_QWORD *)(this + 4656) = v3 | 0x60002086;
      if (a2 != 2)
      {
        v4 = v3 | 0x6000208E;
LABEL_8:
        *(_QWORD *)(this + 4656) = v4;
      }
    }
  }
  return this;
}

uint64_t VoiceProcessorV3::SetupUplink_MS(uint64_t this, unsigned int a2)
{
  uint64_t v2;

  if (a2 != 1)
  {
    v2 = *(_QWORD *)(this + 4656);
    *(_QWORD *)(this + 4656) = v2 | 0x20002080;
    if (a2)
    {
      *(_QWORD *)(this + 4656) = v2 | 0x20002086;
      if (a2 >= 3)
        *(_QWORD *)(this + 4656) = v2 | 0x2000208E;
    }
  }
  return this;
}

void VoiceProcessorV3::SetupDownlinkBasicAUChain(VoiceProcessorV3 *this)
{
  uint64_t v2;
  uint64_t v3;
  _BOOL4 AppBooleanValue;
  unint64_t v6;
  BOOL v7;

  v2 = *((_QWORD *)this + 1104);
  if (*((_BYTE *)this + 2084))
  {
    v3 = 671088640;
  }
  else
  {
    *((_QWORD *)this + 1104) = v2 | 0x100;
    v7 = 0;
    CFRetain(CFSTR("com.apple.coreaudio"));
    AppBooleanValue = CACFPreferencesGetAppBooleanValue(CFSTR("vp_use_vareq"), CFSTR("com.apple.coreaudio"), &v7);
    if (!v7 || AppBooleanValue)
      v6 = *((_QWORD *)this + 1104);
    else
      v6 = *((_QWORD *)this + 1104) & 0xFFFFFFFFFFDF7EBBLL;
    *((_QWORD *)this + 1104) = v6 | 0x208044;
    AUPropAndParamHelper::AddItemToAUParamList((uint64_t)this + 9352, 0, *((float *)this + 3119));
    v2 = *((_QWORD *)this + 1104);
    v3 = 0x3E8000000;
  }
  *((_QWORD *)this + 1104) = v2 | v3 & 0xFFFFFFFFFFFFLL | 0x1800000000000000;
}

uint64_t VoiceProcessorV3::SetupDownlinkLiteAUChain(VoiceProcessorV3 *this)
{
  uint64_t result;

  result = (*(uint64_t (**)(VoiceProcessorV3 *))(*(_QWORD *)this + 400))(this);
  *((_QWORD *)this + 1104) &= 0xFFFFFFFF3FFFFFBFLL;
  return result;
}

void VoiceProcessorV3::ApplyCustomTelephonyDSPOverrides(int8x16_t *this, CFDictionaryRef theDict, int a3)
{
  const __CFNumber *Value;
  const __CFNumber *v7;
  uint64_t v8;
  const __CFNumber *v9;
  const __CFNumber *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  const __CFNumber *v15;
  const __CFNumber *v16;
  __int8 *v17;
  float v18;
  int v19;
  const __CFArray *v20;
  const __CFArray *v21;
  unsigned int Count;
  uint64_t v23;
  int8x16_t *v24;
  uint64_t v25;
  uint64_t v26;
  CFIndex v27;
  __int8 *v28;
  const __CFDictionary *ValueAtIndex;
  const __CFDictionary *v30;
  const __CFNumber *v31;
  const __CFNumber *v32;
  const __CFNumber *v33;
  const __CFNumber *v34;
  const __CFNumber *v35;
  const __CFNumber *v36;
  const void *v37;
  float valuePtr;

  if (theDict && CFDictionaryGetCount(theDict))
  {
    if (a3)
    {
      if (CFDictionaryContainsKey(theDict, CFSTR("noise suppression")))
      {
        Value = (const __CFNumber *)CFDictionaryGetValue(theDict, CFSTR("noise suppression"));
        if (Value)
        {
          v7 = Value;
          CFRetain(Value);
          valuePtr = 0.0;
          CFNumberGetValue(v7, kCFNumberFloat32Type, &valuePtr);
          CFRelease(v7);
          v8 = this[291].i64[0];
          this[291].i64[1] |= 0x10uLL;
          this[291].i64[0] = v8 & 0xFFAFFFFFFFFFFFFFLL | 0x10000000000000;
          AUPropAndParamHelper::AddItemToAUParamList((uint64_t)this[371].i64, 0, valuePtr);
        }
      }
      if (CFDictionaryContainsKey(theDict, CFSTR("agc")))
      {
        v9 = (const __CFNumber *)CFDictionaryGetValue(theDict, CFSTR("agc"));
        if (v9)
        {
          v10 = v9;
          CFRetain(v9);
          valuePtr = 0.0;
          CFNumberGetValue(v10, kCFNumberIntType, &valuePtr);
          CFRelease(v10);
          v11 = this[291].i64[1];
          v12 = v11 & 0xFFFFFFFFFFFFFFFDLL;
          v13 = v11 | 0x12;
          if (LODWORD(valuePtr) == 1)
            v14 = v13;
          else
            v14 = v12;
          this[291].i64[1] = v14;
        }
      }
    }
    if (CFDictionaryContainsKey(theDict, CFSTR("gain")))
    {
      v15 = (const __CFNumber *)CFDictionaryGetValue(theDict, CFSTR("gain"));
      if (v15)
      {
        v16 = v15;
        CFRetain(v15);
        valuePtr = 0.0;
        CFNumberGetValue(v16, kCFNumberFloat32Type, &valuePtr);
        CFRelease(v16);
        if (a3)
        {
          this[291] = vorrq_s8(this[291], (int8x16_t)xmmword_1B66A0610);
          v17 = &this[436].i8[8];
          v18 = valuePtr;
          v19 = 1;
        }
        else
        {
          this[552].i64[0] |= 0x1800000000000000uLL;
          AUPropAndParamHelper::AddItemToAUParamList((uint64_t)&this[678].i64[1], 0, valuePtr);
          v18 = valuePtr;
          v17 = &this[678].i8[8];
          v19 = 8;
        }
        AUPropAndParamHelper::AddItemToAUParamList((uint64_t)v17, v19, v18);
      }
    }
    if (CFDictionaryContainsKey(theDict, CFSTR("eq")))
    {
      v20 = (const __CFArray *)CFDictionaryGetValue(theDict, CFSTR("eq"));
      if (v20)
      {
        v21 = v20;
        CFRetain(v20);
        Count = CFArrayGetCount(v21);
        v23 = 9640;
        if (a3)
        {
          v23 = 6200;
          this[291].i64[0] |= 0x8000000000000000;
          v24 = (int8x16_t *)((char *)this + 4664);
          v25 = 16;
        }
        else
        {
          v24 = this + 552;
          v25 = 0x1000000200000000;
        }
        v24->i64[0] |= v25;
        if (Count >= 0xA)
          v26 = 10;
        else
          v26 = Count;
        if ((_DWORD)v26)
        {
          v27 = 0;
          v28 = &this->i8[v23];
          do
          {
            ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(v21, v27);
            if (ValueAtIndex)
            {
              v30 = ValueAtIndex;
              CFRetain(ValueAtIndex);
              if (CFDictionaryContainsKey(v30, CFSTR("AUNBandEQ_FilterType"))
                && CFDictionaryContainsKey(v30, CFSTR("AUNBandEQ_FilterFrequency")))
              {
                AUPropAndParamHelper::AddItemToAUParamList((uint64_t)v28, v27 + 1000, 0.0);
                v31 = (const __CFNumber *)CFDictionaryGetValue(v30, CFSTR("AUNBandEQ_FilterType"));
                if (v31)
                {
                  v32 = v31;
                  CFRetain(v31);
                  valuePtr = 0.0;
                  CFNumberGetValue(v32, kCFNumberIntType, &valuePtr);
                  CFRelease(v32);
                  AUPropAndParamHelper::AddItemToAUParamList((uint64_t)v28, v27 + 2000, (float)LODWORD(valuePtr));
                }
                v33 = (const __CFNumber *)CFDictionaryGetValue(v30, CFSTR("AUNBandEQ_FilterFrequency"));
                if (v33)
                {
                  v34 = v33;
                  CFRetain(v33);
                  valuePtr = 0.0;
                  CFNumberGetValue(v34, kCFNumberFloat32Type, &valuePtr);
                  CFRelease(v34);
                  AUPropAndParamHelper::AddItemToAUParamList((uint64_t)v28, v27 + 3000, valuePtr);
                }
              }
              if (CFDictionaryContainsKey(v30, CFSTR("AUNBandEQ_FilterGain")))
              {
                v35 = (const __CFNumber *)CFDictionaryGetValue(v30, CFSTR("AUNBandEQ_FilterGain"));
                if (v35)
                {
                  v36 = v35;
                  CFRetain(v35);
                  valuePtr = 0.0;
                  CFNumberGetValue(v36, kCFNumberFloat32Type, &valuePtr);
                  CFRelease(v36);
                  AUPropAndParamHelper::AddItemToAUParamList((uint64_t)v28, v27 + 4000, valuePtr);
                }
              }
              if (CFDictionaryContainsKey(v30, CFSTR("AUNBandEQ_FilterBandwidth")))
              {
                v37 = CFDictionaryGetValue(v30, CFSTR("AUNBandEQ_FilterBandwidth"));
                CFRetain(v37);
                valuePtr = 0.0;
                CFNumberGetValue((CFNumberRef)v37, kCFNumberFloat32Type, &valuePtr);
                CFRelease(v37);
                AUPropAndParamHelper::AddItemToAUParamList((uint64_t)v28, v27 + 5000, valuePtr);
              }
              CFRelease(v30);
            }
            ++v27;
          }
          while (v26 != v27);
        }
        CFRelease(v21);
      }
    }
  }
}

void VoiceProcessorV3::VoiceProcessorV3(VoiceProcessorV3 *this, const vp::Context *a2)
{
  char *v4;
  __int128 v5;
  __int128 v6;
  int v7;
  int VPProductFamilyType;
  __int128 v9;
  _QWORD *v14;
  char *v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t i;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  __int128 v25;
  std::__shared_weak_count *v26;
  std::__shared_weak_count *v27;
  unint64_t *p_shared_owners;
  unint64_t v29;
  unint64_t *p_shared_weak_owners;
  unint64_t v31;
  unint64_t v32;
  unsigned __int8 *v33;
  unsigned __int8 *v34;
  _QWORD *v35;
  NSObject *v36;
  int *v37;
  unsigned __int8 *v38;
  unsigned __int8 *v39;
  BOOL v41;
  BOOL v42;
  _QWORD *v43;
  NSObject *v44;
  const char *v45;
  int v46;
  int *v47;
  const char *v48;
  void *v49;
  void *v50;
  uint64_t v51;
  const char *v52;
  const __CFAllocator *v53;
  uint64_t v54;
  const CFDictionaryKeyCallBacks *v55;
  const CFDictionaryValueCallBacks *v56;
  unsigned __int8 *v57;
  int v58;
  int v59;
  int v60;
  unsigned int v61;
  int v62;
  AUProcessingBlockBase *v64;
  AUProcessingBlockBase *v65;
  unsigned __int8 *v66;
  unsigned __int8 *v67;
  unsigned __int8 *v68;
  unsigned int v69;
  _OWORD *v70;
  void **v71;
  uint64_t v72;
  NSObject *global_queue;
  NSObject *v74;
  uint64_t v75;
  _QWORD *v76;
  NSObject *v77;
  int *v78;
  std::__shared_weak_count *size;
  unint64_t *v80;
  unint64_t v81;
  _QWORD *v82;
  uint64_t v83;
  std::__shared_weak_count *v84;
  unint64_t *v85;
  unint64_t v86;
  _QWORD *v87;
  uint64_t v88;
  std::__shared_weak_count *v89;
  unint64_t *v90;
  unint64_t v91;
  _QWORD *v92;
  uint64_t v93;
  std::__shared_weak_count *v94;
  unint64_t *v95;
  unint64_t v96;
  _QWORD *v97;
  uint64_t v98;
  float *v99;
  BOOL *v100;
  int **v101;
  BOOL v102;
  BOOL v103;
  BOOL v104;
  int v105;
  void *__p[2];
  char v107;
  void **v108;
  _QWORD v109[3];
  _QWORD *v110;
  _QWORD v111[3];
  _QWORD *v112;
  _QWORD v113[3];
  _QWORD *v114;
  _QWORD v115[3];
  _QWORD *v116;
  _BYTE buf[32];
  VoiceProcessorV3 *v118;
  std::string v119;
  uint64_t v120;

  v120 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)this = off_1E69DA348;
  v4 = (char *)this + 8;
  if (*((char *)a2 + 47) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)((char *)this + 8), *((const std::string::value_type **)a2 + 3), *((_QWORD *)a2 + 4));
  }
  else
  {
    v5 = *(_OWORD *)((char *)a2 + 24);
    *((_QWORD *)this + 3) = *((_QWORD *)a2 + 5);
    *(_OWORD *)v4 = v5;
  }
  if (*((char *)a2 + 127) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)((char *)this + 32), *((const std::string::value_type **)a2 + 13), *((_QWORD *)a2 + 14));
  }
  else
  {
    v6 = *(_OWORD *)((char *)a2 + 104);
    *((_QWORD *)this + 6) = *((_QWORD *)a2 + 15);
    *((_OWORD *)this + 2) = v6;
  }
  *((_QWORD *)this + 7) = *(_QWORD *)((char *)a2 + 148);
  *((_DWORD *)this + 16) = *((_DWORD *)a2 + 36);
  if (*((_BYTE *)a2 + 140))
    v7 = *((_DWORD *)a2 + 34);
  else
    v7 = 0;
  *((_DWORD *)this + 17) = v7;
  VPProductFamilyType = GetVPProductFamilyType(v7);
  *(_OWORD *)((char *)this + 92) = 0u;
  *((_DWORD *)this + 18) = VPProductFamilyType;
  *(_OWORD *)((char *)this + 76) = xmmword_1B66A2490;
  *(_OWORD *)((char *)this + 108) = 0u;
  *(_OWORD *)((char *)this + 124) = 0u;
  *(_OWORD *)((char *)this + 140) = 0u;
  *(_OWORD *)((char *)this + 156) = 0u;
  *(_OWORD *)((char *)this + 172) = 0u;
  *(_OWORD *)((char *)this + 188) = 0u;
  *(_OWORD *)((char *)this + 204) = 0u;
  *(_OWORD *)((char *)this + 220) = 0u;
  *(_OWORD *)((char *)this + 236) = 0u;
  *(_OWORD *)((char *)this + 252) = 0u;
  *(_OWORD *)((char *)this + 268) = 0u;
  *(_OWORD *)((char *)this + 284) = 0u;
  *(_OWORD *)((char *)this + 300) = 0u;
  *(_OWORD *)((char *)this + 316) = 0u;
  *(_OWORD *)((char *)this + 332) = 0u;
  *(_OWORD *)((char *)this + 348) = 0u;
  *(_QWORD *)((char *)this + 364) = 0;
  *((_QWORD *)this + 49) = 0;
  *(_OWORD *)((char *)this + 376) = 0u;
  *(_QWORD *)&v9 = 0x100000001;
  *((_QWORD *)&v9 + 1) = 0x100000001;
  *((_OWORD *)this + 25) = v9;
  *((_QWORD *)this + 52) = 1;
  *((_DWORD *)this + 106) = 1;
  *((_QWORD *)this + 54) = 0;
  *((_DWORD *)this + 110) = 0;
  *((_QWORD *)this + 54) = strdup("primary mic only");
  *((_DWORD *)this + 112) = 1;
  *((_QWORD *)this + 57) = 0;
  *((_DWORD *)this + 116) = 0;
  *((_QWORD *)this + 57) = strdup("primary mic only");
  *((_QWORD *)this + 59) = 0;
  *((_WORD *)this + 240) = 0;
  *(_OWORD *)((char *)this + 484) = 0u;
  *(_OWORD *)((char *)this + 500) = 0u;
  *(_OWORD *)((char *)this + 516) = 0u;
  *((_OWORD *)this + 33) = 0u;
  *((_OWORD *)this + 64) = 0u;
  *((_OWORD *)this + 65) = 0u;
  *((_OWORD *)this + 66) = 0u;
  *((_OWORD *)this + 67) = 0u;
  *((_OWORD *)this + 68) = 0u;
  *((_OWORD *)this + 69) = 0u;
  *((_OWORD *)this + 70) = 0u;
  *((_OWORD *)this + 71) = 0u;
  *((_DWORD *)this + 288) = 0;
  *(_QWORD *)((char *)this + 1156) = 0x3F8000003F800000;
  *(_OWORD *)((char *)this + 1240) = 0u;
  *(_OWORD *)((char *)this + 1180) = 0u;
  *(_OWORD *)((char *)this + 1164) = 0u;
  *((_DWORD *)this + 304) = 0;
  *((_OWORD *)this + 75) = 0u;
  *(_OWORD *)((char *)this + 1220) = xmmword_1B66A0DC0;
  *(_OWORD *)((char *)this + 1256) = 0u;
  *((_BYTE *)this + 1272) = 1;
  *(_QWORD *)((char *)this + 1276) = 0xC00000000;
  *((_OWORD *)this + 82) = 0u;
  *((_DWORD *)this + 326) = 0;
  *(_OWORD *)((char *)this + 1288) = xmmword_1B66A0CF0;
  *(_OWORD *)((char *)this + 1352) = 0u;
  *((_DWORD *)this + 336) = 0;
  *((_OWORD *)this + 83) = xmmword_1B66A0CF0;
  *((_BYTE *)this + 1368) = 0;
  *((_BYTE *)this + 1392) = 0;
  *((_DWORD *)this + 350) = 0;
  *((_BYTE *)this + 1404) = 0;
  *(_OWORD *)((char *)this + 1464) = 0u;
  *((_DWORD *)this + 360) = 0;
  *((_OWORD *)this + 89) = 0u;
  *((_OWORD *)this + 88) = 0u;
  *(_OWORD *)((char *)this + 1444) = xmmword_1B66A0DC0;
  *(_OWORD *)((char *)this + 1560) = 0u;
  *(_OWORD *)((char *)this + 1480) = 0u;
  *(_OWORD *)((char *)this + 1496) = 0u;
  *(_OWORD *)((char *)this + 1512) = 0u;
  *((_DWORD *)this + 382) = 0;
  *((_DWORD *)this + 388) = 0;
  *((_OWORD *)this + 96) = xmmword_1B66A0CF0;
  *(_OWORD *)((char *)this + 1608) = 0u;
  *(_OWORD *)((char *)this + 1624) = 0u;
  *(_OWORD *)((char *)this + 1576) = 0u;
  *(_OWORD *)((char *)this + 1592) = 0u;
  *((_QWORD *)this + 205) = 0xC00000000;
  *((_BYTE *)this + 1648) = 1;
  *((_DWORD *)this + 413) = -1041235968;
  *(_OWORD *)((char *)this + 1656) = 0u;
  *((_DWORD *)this + 418) = 9;
  *((_BYTE *)this + 1676) = 0;
  *((_BYTE *)this + 1792) = 0;
  *((_BYTE *)this + 1856) = 0;
  *((_BYTE *)this + 1864) = 0;
  *((_BYTE *)this + 1904) = 0;
  *((_BYTE *)this + 1952) = 0;
  *((_BYTE *)this + 1960) = 0;
  *((_BYTE *)this + 1984) = 0;
  *((_QWORD *)this + 249) = 0;
  *((_BYTE *)this + 2000) = 0;
  *((_BYTE *)this + 2064) = 0;
  *((_BYTE *)this + 2072) = 0;
  *((_BYTE *)this + 2076) = 0;
  *((_WORD *)this + 844) = 0;
  *((_QWORD *)this + 210) = 0;
  *((_OWORD *)this + 107) = 0u;
  *((_OWORD *)this + 106) = 0u;
  *((_BYTE *)this + 1928) = 0;
  *(_OWORD *)((char *)this + 1912) = 0u;
  *((_WORD *)this + 1042) = 0;
  *((_DWORD *)this + 520) = 0;
  *((_DWORD *)this + 542) = 0;
  *(_OWORD *)((char *)this + 2136) = 0u;
  *(_OWORD *)((char *)this + 2152) = 0u;
  *(_OWORD *)((char *)this + 2104) = 0u;
  *(_OWORD *)((char *)this + 2120) = 0u;
  *(_OWORD *)((char *)this + 2088) = 0u;
  *((_DWORD *)this + 550) = 0;
  *((_QWORD *)this + 274) = 0;
  *((_OWORD *)this + 136) = 0u;
  *(_QWORD *)((char *)this + 2239) = 0;
  *((_OWORD *)this + 139) = 0u;
  *((_OWORD *)this + 138) = 0u;
  *((_BYTE *)this + 2247) = 1;
  __asm { FMOV            V0.4S, #1.0 }
  *(_OWORD *)((char *)this + 2248) = _Q0;
  *((_DWORD *)this + 566) = 0;
  *((_BYTE *)this + 2268) = 0;
  *((_DWORD *)this + 568) = 0;
  *(_QWORD *)((char *)this + 2276) = 0xC2040000C1200000;
  *(_QWORD *)((char *)this + 2284) = 0xC2C60000FFFFFFFFLL;
  v14 = CAAudioChannelLayout::RefCountedLayout::operator new((CAAudioChannelLayout::RefCountedLayout *)0xC);
  *v14 = off_1E69EE240;
  v14[1] = 0xC00000001;
  v14[2] = 0;
  *((_DWORD *)v14 + 6) = 0;
  *((_QWORD *)this + 287) = v14;
  *((_QWORD *)this + 288) = 0;
  *((_QWORD *)this + 290) = 0;
  *((_QWORD *)this + 289) = 0;
  *((_DWORD *)this + 582) = 0;
  *((_OWORD *)this + 146) = 0u;
  *((_OWORD *)this + 147) = 0u;
  *((_OWORD *)this + 148) = 0u;
  *((_QWORD *)this + 298) = 0;
  CADeprecated::CAMutex::CAMutex((VoiceProcessorV3 *)((char *)this + 2392), "VoiceProcessor.mInitLock");
  *((_QWORD *)this + 310) = 0;
  CADeprecated::CAMutex::CAMutex((VoiceProcessorV3 *)((char *)this + 2488), "VoiceProcessor.mVolumeLock");
  CADeprecated::CAMutex::CAMutex((VoiceProcessorV3 *)((char *)this + 2576), "VoiceProcessor.mProcessCountLock");
  *((_QWORD *)this + 333) = 850045863;
  *((_OWORD *)this + 167) = 0u;
  *((_OWORD *)this + 168) = 0u;
  *((_OWORD *)this + 169) = 0u;
  *((_OWORD *)this + 170) = 0u;
  *((_DWORD *)this + 684) = 0;
  vp::Audio_File::Audio_File((_QWORD *)this + 343);
  vp::Audio_File::Audio_File((_QWORD *)this + 344);
  vp::Audio_File::Audio_File((_QWORD *)this + 345);
  vp::Audio_File::Audio_File((_QWORD *)this + 346);
  *((_QWORD *)this + 436) = 0;
  *((_OWORD *)this + 217) = 0u;
  *((_OWORD *)this + 216) = 0u;
  *((_OWORD *)this + 215) = 0u;
  *((_OWORD *)this + 214) = 0u;
  *((_OWORD *)this + 213) = 0u;
  *((_OWORD *)this + 212) = 0u;
  *((_OWORD *)this + 211) = 0u;
  *((_OWORD *)this + 210) = 0u;
  *((_OWORD *)this + 209) = 0u;
  *(_OWORD *)((char *)this + 3992) = 0u;
  *(_OWORD *)((char *)this + 4008) = 0u;
  *(_OWORD *)((char *)this + 4024) = 0u;
  *(_OWORD *)((char *)this + 4040) = 0u;
  *(_OWORD *)((char *)this + 4056) = 0u;
  *(_OWORD *)((char *)this + 4072) = 0u;
  *(_OWORD *)((char *)this + 4088) = 0u;
  *(_OWORD *)((char *)this + 4104) = 0u;
  *(_OWORD *)((char *)this + 4120) = 0u;
  *(_OWORD *)((char *)this + 4136) = 0u;
  *(_OWORD *)((char *)this + 4148) = 0u;
  *(_OWORD *)((char *)this + 4164) = xmmword_1B66A24A0;
  *((_DWORD *)this + 1045) = 1;
  *(_OWORD *)((char *)this + 4184) = 0u;
  *(_OWORD *)((char *)this + 4200) = 0u;
  *(_OWORD *)((char *)this + 4216) = 0u;
  *(_OWORD *)((char *)this + 4232) = 0u;
  *(_OWORD *)((char *)this + 4248) = 0u;
  *(_OWORD *)((char *)this + 4264) = 0u;
  *(_OWORD *)((char *)this + 4280) = 0u;
  *(_OWORD *)((char *)this + 4296) = 0u;
  *(_OWORD *)((char *)this + 4312) = 0u;
  *((_QWORD *)this + 541) = 0;
  *((_DWORD *)this + 1084) = 1065353216;
  *((_QWORD *)this + 543) = 0;
  *((_DWORD *)this + 1131) = 0;
  *((_QWORD *)this + 567) = 0;
  *((_BYTE *)this + 4544) = 1;
  *((_QWORD *)this + 569) = 0;
  *((_BYTE *)this + 4560) = 1;
  *((_OWORD *)this + 287) = 0u;
  *((_OWORD *)this + 286) = 0u;
  *((_DWORD *)this + 1152) = 1065353216;
  *((_DWORD *)this + 1162) = 1065353216;
  *(_OWORD *)((char *)this + 4616) = 0u;
  *(_OWORD *)((char *)this + 4632) = 0u;
  bzero((char *)this + 4656, 0x6C8uLL);
  *((_OWORD *)this + 438) = 0u;
  *((_OWORD *)this + 437) = 0u;
  *((_OWORD *)this + 436) = 0u;
  *((_OWORD *)this + 435) = 0u;
  *((_BYTE *)this + 7024) = 1;
  bzero((char *)this + 7032, 0x6A8uLL);
  v15 = (char *)this + 8832;
  v16 = 8736;
  do
  {
    v17 = (char *)this + v16;
    *(_QWORD *)v17 = 0;
    v17[8] = 1;
    *((_DWORD *)v17 + 4) = 0;
    v16 += 24;
  }
  while (v17 + 24 != v15);
  bzero(v15, 0x5E0uLL);
  *((_OWORD *)this + 680) = 0u;
  *((_OWORD *)this + 679) = 0u;
  *((_OWORD *)this + 678) = 0u;
  *((_OWORD *)this + 677) = 0u;
  *((_BYTE *)this + 10896) = 1;
  bzero((char *)this + 10904, 0x5D0uLL);
  *((_BYTE *)this + 4568) = 0;
  *((_QWORD *)this + 545) = 0;
  bzero((char *)this + 6392, 0x238uLL);
  bzero((char *)this + 10336, 0x1F0uLL);
  VoiceProcessorV2::VPEchoProcessingParams::Reset((VoiceProcessorV3 *)((char *)this + 4352));
  v18 = 0;
  *((_QWORD *)this + 1549) = 0x1500000001;
  *((_OWORD *)this + 775) = 0u;
  *((_QWORD *)this + 1556) = 0;
  *(_QWORD *)((char *)this + 12453) = 0;
  *((_OWORD *)this + 779) = xmmword_1B6627DC0;
  *((_QWORD *)this + 1560) = 0;
  *((_BYTE *)this + 12488) = 0;
  *((_QWORD *)this + 1562) = 0;
  *((_BYTE *)this + 12504) = 0;
  v101 = (int **)((char *)this + 12560);
  *(_OWORD *)((char *)this + 12856) = 0u;
  *(_DWORD *)((char *)this + 12871) = 0;
  *((_OWORD *)this + 782) = 0u;
  *((_OWORD *)this + 783) = 0u;
  *((_OWORD *)this + 784) = 0u;
  *((_OWORD *)this + 785) = 0u;
  *((_QWORD *)this + 1572) = 0;
  do
  {
    vp::Audio_File::Audio_File((VoiceProcessorV3 *)((char *)this + v18 + 12880));
    v18 += 8;
  }
  while (v18 != 1072);
  *((_QWORD *)this + 1744) = 0;
  *((_QWORD *)this + 1745) = 0;
  *((_QWORD *)this + 1746) = 0;
  v19 = operator new[]();
  for (i = 0; i != 0x40000; i += 32)
  {
    v21 = v19 + i;
    *(_DWORD *)v21 = 0;
    *(_QWORD *)(v21 + 16) = 0;
    *(_QWORD *)(v21 + 24) = 0;
    *(_QWORD *)(v21 + 8) = 0;
  }
  *((_QWORD *)this + 1881) = v19;
  *((_DWORD *)this + 3764) = 0;
  *(_OWORD *)((char *)this + 15064) = 0u;
  *((_QWORD *)this + 1885) = 0x4000003E8;
  *((_QWORD *)this + 1886) = 0;
  *((_DWORD *)this + 3774) = 0;
  *((_QWORD *)this + 1888) = 0;
  *((_DWORD *)this + 3778) = 0;
  *((_BYTE *)this + 15116) = 0;
  *((_QWORD *)this + 1890) = 0;
  *((_DWORD *)this + 3782) = 0;
  *((_WORD *)this + 7566) = 256;
  *((_QWORD *)this + 1969) = 0;
  *((_DWORD *)this + 3940) = 0;
  *((_QWORD *)this + 1971) = 0;
  *(_OWORD *)((char *)this + 15800) = 0u;
  *((_OWORD *)this + 946) = 0u;
  *((_DWORD *)this + 3788) = 0;
  *((_DWORD *)this + 3862) = 0;
  *(_OWORD *)((char *)this + 15416) = 0u;
  *(_OWORD *)((char *)this + 15432) = 0u;
  *(_OWORD *)((char *)this + 15384) = 0u;
  *(_OWORD *)((char *)this + 15400) = 0u;
  *(_OWORD *)((char *)this + 15352) = 0u;
  *(_OWORD *)((char *)this + 15368) = 0u;
  *(_OWORD *)((char *)this + 15320) = 0u;
  *(_OWORD *)((char *)this + 15336) = 0u;
  *(_OWORD *)((char *)this + 15288) = 0u;
  *(_OWORD *)((char *)this + 15304) = 0u;
  *(_OWORD *)((char *)this + 15256) = 0u;
  *(_OWORD *)((char *)this + 15272) = 0u;
  *(_OWORD *)((char *)this + 15224) = 0u;
  *(_OWORD *)((char *)this + 15240) = 0u;
  *(_OWORD *)((char *)this + 15192) = 0u;
  *(_OWORD *)((char *)this + 15208) = 0u;
  *(_OWORD *)((char *)this + 15160) = 0u;
  *(_OWORD *)((char *)this + 15176) = 0u;
  *((_BYTE *)this + 15744) = 0;
  *((_OWORD *)this + 983) = 0u;
  *((_OWORD *)this + 982) = 0u;
  *((_OWORD *)this + 981) = 0u;
  *((_OWORD *)this + 980) = 0u;
  *((_OWORD *)this + 979) = 0u;
  *((_OWORD *)this + 978) = 0u;
  *((_OWORD *)this + 977) = 0u;
  *((_OWORD *)this + 976) = 0u;
  *((_OWORD *)this + 975) = 0u;
  *((_OWORD *)this + 974) = 0u;
  *((_OWORD *)this + 973) = 0u;
  *((_OWORD *)this + 972) = 0u;
  *((_OWORD *)this + 971) = 0u;
  *((_OWORD *)this + 970) = 0u;
  *((_OWORD *)this + 969) = 0u;
  *((_OWORD *)this + 968) = 0u;
  *((_OWORD *)this + 967) = 0u;
  *((_OWORD *)this + 966) = 0u;
  *((_DWORD *)this + 3948) = 0;
  *((_OWORD *)this + 986) = xmmword_1B66A0CF0;
  *((_DWORD *)this + 3954) = 0;
  *((_OWORD *)this + 989) = 0u;
  *((_OWORD *)this + 990) = 0u;
  *((_OWORD *)this + 991) = 0u;
  *((_OWORD *)this + 992) = 0u;
  *(_OWORD *)((char *)this + 15884) = 0u;
  *((_OWORD *)this + 994) = 0u;
  *((_OWORD *)this + 995) = 0u;
  *((_OWORD *)this + 996) = 0u;
  memset(buf, 0, 24);
  if (AudioIssueDetectorLibraryLoader(void)::once != -1)
    dispatch_once(&AudioIssueDetectorLibraryLoader(void)::once, &__block_literal_global_12811);
  if (AudioIssueDetectorLibraryLoader(void)::libSym)
  {
    v22 = AudioIssueDetectorLibraryLoader(void)::libSym(3, buf);
    if (*(_QWORD *)buf)
    {
      *(_QWORD *)&buf[8] = *(_QWORD *)buf;
      operator delete(*(void **)buf);
    }
    v23 = AudioIssueDetectorLibraryLoader(void)::once;
    *((_QWORD *)this + 1994) = v22;
    memset(buf, 0, 24);
    if (v23 != -1)
      dispatch_once(&AudioIssueDetectorLibraryLoader(void)::once, &__block_literal_global_12811);
  }
  else
  {
    *((_QWORD *)this + 1994) = 0;
    memset(buf, 0, 24);
  }
  if (AudioIssueDetectorLibraryLoader(void)::libSym)
    v24 = AudioIssueDetectorLibraryLoader(void)::libSym(3, buf);
  else
    v24 = 0;
  if (*(_QWORD *)buf)
  {
    *(_QWORD *)&buf[8] = *(_QWORD *)buf;
    operator delete(*(void **)buf);
  }
  *((_QWORD *)this + 1995) = v24;
  *((_QWORD *)this + 1996) = 561211748;
  *((_BYTE *)this + 16076) = 0;
  *((_BYTE *)this + 16080) = 0;
  *((_BYTE *)this + 16084) = 0;
  *((_BYTE *)this + 16088) = 0;
  *((_BYTE *)this + 16112) = 0;
  *((_BYTE *)this + 16120) = 0;
  *((_BYTE *)this + 16144) = 0;
  *((_BYTE *)this + 16152) = 0;
  *((_BYTE *)this + 16156) = 0;
  *((_BYTE *)this + 16160) = 0;
  *((_BYTE *)this + 16164) = 0;
  *((_BYTE *)this + 16168) = 0;
  *((_BYTE *)this + 16172) = 0;
  *(_OWORD *)((char *)this + 15976) = 0u;
  *(_OWORD *)((char *)this + 15992) = 0u;
  *(_OWORD *)((char *)this + 16008) = 0u;
  *(_OWORD *)((char *)this + 16024) = 0u;
  *(_OWORD *)((char *)this + 16040) = 0u;
  *(_OWORD *)((char *)this + 16056) = 0u;
  *((_BYTE *)this + 16072) = 0;
  *((_WORD *)this + 8088) = *((_WORD *)a2 + 48);
  if (*((char *)a2 + 71) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)((char *)this + 16184), *((const std::string::value_type **)a2 + 6), *((_QWORD *)a2 + 7));
  }
  else
  {
    v25 = *((_OWORD *)a2 + 3);
    *((_QWORD *)this + 2025) = *((_QWORD *)a2 + 8);
    *(_OWORD *)((char *)this + 16184) = v25;
  }
  *((_OWORD *)this + 1017) = 0u;
  *((_OWORD *)this + 1016) = 0u;
  *((_OWORD *)this + 1015) = 0u;
  *((_OWORD *)this + 1014) = 0u;
  *((_OWORD *)this + 1013) = 0u;
  *(_OWORD *)((char *)this + 16281) = 0u;
  caulk::concurrent::details::lf_read_sync_write_impl::lf_read_sync_write_impl((VoiceProcessorV3 *)((char *)this + 16304));
  *((_WORD *)this + 8156) = 1;
  *((_BYTE *)this + 16320) = 0;
  *((_BYTE *)this + 16344) = 0;
  *((_QWORD *)this + 2048) = 0;
  *((_DWORD *)this + 4098) = 0;
  *((_BYTE *)this + 16396) = 0;
  *((_DWORD *)this + 4141) = 0;
  *((_BYTE *)this + 16568) = 0;
  *((_BYTE *)this + 16576) = 0;
  *((_BYTE *)this + 16584) = 0;
  *((_DWORD *)this + 4148) = 0;
  *((_BYTE *)this + 16596) = 0;
  *((_OWORD *)this + 1025) = 0u;
  *((_OWORD *)this + 1026) = 0u;
  *(_OWORD *)((char *)this + 16428) = 0u;
  *((_OWORD *)this + 1028) = 0u;
  *((_OWORD *)this + 1029) = 0u;
  *((_OWORD *)this + 1030) = 0u;
  *((_OWORD *)this + 1031) = 0u;
  *((_OWORD *)this + 1032) = 0u;
  *((_OWORD *)this + 1033) = 0u;
  *((_OWORD *)this + 1034) = 0u;
  *((_BYTE *)this + 16560) = 0;
  *((_QWORD *)this + 2075) = this;
  v26 = (std::__shared_weak_count *)operator new(0x30uLL);
  v27 = v26;
  v26->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v26->__shared_owners_;
  v26->__shared_weak_owners_ = 0;
  v26->__vftable = (std::__shared_weak_count_vtbl *)&off_1E69DA7A8;
  v26[1].__vftable = 0;
  v26[1].__shared_owners_ = 0;
  v26[1].__shared_weak_owners_ = (uint64_t)this + 16600;
  v100 = (BOOL *)this + 15448;
  v99 = (float *)((char *)this + 15744);
  *((_QWORD *)this + 2076) = v26 + 1;
  *((_QWORD *)this + 2077) = v26;
  do
    v29 = __ldxr(p_shared_owners);
  while (__stxr(v29 + 1, p_shared_owners));
  p_shared_weak_owners = (unint64_t *)&v26->__shared_weak_owners_;
  do
    v31 = __ldxr(p_shared_weak_owners);
  while (__stxr(v31 + 1, p_shared_weak_owners));
  v26[1].__vftable = (std::__shared_weak_count_vtbl *)&v26[1];
  v26[1].__shared_owners_ = (uint64_t)v26;
  do
    v32 = __ldaxr(p_shared_owners);
  while (__stlxr(v32 - 1, p_shared_owners));
  if (!v32)
  {
    ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
    std::__shared_weak_count::__release_weak(v27);
  }
  *((_BYTE *)this + 16624) = 0;
  *((_BYTE *)this + 16640) = 0;
  *((_QWORD *)this + 2085) = 0;
  *(_OWORD *)((char *)this + 16648) = 0u;
  *(_OWORD *)((char *)this + 16664) = 0u;
  bzero((char *)this + 12584, 0x100uLL);
  bzero((char *)this + 12840, 0x10uLL);
  bzero((char *)this + 13976, 0x430uLL);
  v105 = 0;
  VoiceProcessorV2::ReadDefaultsOverride(CFSTR("vp_console_msgs"), (const __CFString *)1, (BOOL *)&v105, 0, v33);
  *((_BYTE *)this + 15816) = v105 != 0;
  if (VPLogScope(void)::once != -1)
    dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
  v35 = (_QWORD *)VPLogScope(void)::scope;
  if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(5, VPLogScope(void)::scope, 0))
  {
    v36 = (*v35 ? *v35 : MEMORY[0x1E0C81028]);
    if (os_log_type_enabled(v36, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 136315394;
      *(_QWORD *)&buf[4] = "VoiceProcessor_v2.cpp";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 117;
      _os_log_impl(&dword_1B5ED0000, v36, OS_LOG_TYPE_DEBUG, "%25s:%-5d  <vp> Starting ... ", buf, 0x12u);
    }
  }
  v37 = *v101;
  if (*v101 && (*((_BYTE *)this + 15897) || *((_BYTE *)this + 15898)))
  {
    if (VPLogScope(void)::once != -1)
      dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
    CALegacyLog::log(v37, 5, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/VoiceProcessor_v2.cpp", 117, "VoiceProcessorV2", "Starting ... ");
  }
  v104 = 0;
  VoiceProcessorV2::ReadDefaultsOverride(CFSTR("EnableVPTelephonyMonitor"), 0, &v104, 0, v34);
  v103 = 0;
  VoiceProcessorV2::ReadDefaultsOverride(CFSTR("EnableTelephonyMonitor"), 0, &v103, 0, v38);
  v41 = v104 && v103;
  *((_BYTE *)this + 15897) |= v41;
  v102 = 0;
  VoiceProcessorV2::ReadDefaultsOverride(CFSTR("vp_enable_debug_features"), 0, &v102, 0, v39);
  *((_BYTE *)this + 15897) |= v102;
  if (queryBuildType(void)::once != -1)
    dispatch_once(&queryBuildType(void)::once, &__block_literal_global_67);
  if (gIsInternal)
    v42 = 1;
  else
    v42 = gIsCarrier != 0;
  if (!*((_BYTE *)this + 15897))
    v42 = 0;
  *((_BYTE *)this + 15897) = *((_BYTE *)this + 16176) | v42;
  if (VPLogScope(void)::once != -1)
    dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
  v43 = (_QWORD *)VPLogScope(void)::scope;
  if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(5, VPLogScope(void)::scope, 0))
  {
    v44 = (*v43 ? *v43 : MEMORY[0x1E0C81028]);
    if (os_log_type_enabled(v44, OS_LOG_TYPE_DEBUG))
    {
      v45 = "enabled";
      v46 = *((unsigned __int8 *)this + 15897);
      *(_QWORD *)&buf[4] = "VoiceProcessor_v2.cpp";
      *(_DWORD *)buf = 136315650;
      if (!v46)
        v45 = "disabled";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 143;
      *(_WORD *)&buf[18] = 2080;
      *(_QWORD *)&buf[20] = v45;
      _os_log_impl(&dword_1B5ED0000, v44, OS_LOG_TYPE_DEBUG, "%25s:%-5d  <vp> vp debug features are %s", buf, 0x1Cu);
    }
  }
  v47 = *v101;
  if (*v101 && (*((_BYTE *)this + 15897) || *((_BYTE *)this + 15898)))
  {
    if (VPLogScope(void)::once != -1)
      dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
    if (*((_BYTE *)this + 15897))
      v48 = "enabled";
    else
      v48 = "disabled";
    CALegacyLog::log(v47, 5, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/VoiceProcessor_v2.cpp", 143, "VoiceProcessorV2", "vp debug features are %s", v48);
  }
  v49 = (void *)*((_QWORD *)this + 270);
  if (v49)
  {
    free(v49);
    *((_QWORD *)this + 270) = 0;
  }
  v50 = (void *)*((_QWORD *)this + 273);
  if (v50)
  {
    free(v50);
    *((_QWORD *)this + 273) = 0;
  }
  *((_QWORD *)this + 73) = 0;
  *((_OWORD *)this + 37) = xmmword_1B6626900;
  *((_OWORD *)this + 38) = xmmword_1B6626910;
  *((_QWORD *)this + 78) = 0;
  *(_OWORD *)((char *)this + 632) = xmmword_1B6626900;
  *(_OWORD *)((char *)this + 648) = xmmword_1B6626910;
  *((_QWORD *)this + 88) = 0;
  *(_OWORD *)((char *)this + 712) = xmmword_1B6626900;
  *(_OWORD *)((char *)this + 728) = xmmword_1B6626910;
  *((_QWORD *)this + 93) = 0;
  *((_OWORD *)this + 47) = xmmword_1B6626900;
  *((_OWORD *)this + 48) = xmmword_1B6626910;
  *((_QWORD *)this + 98) = 0;
  *(_OWORD *)((char *)this + 792) = xmmword_1B6626900;
  *(_OWORD *)((char *)this + 808) = xmmword_1B6626910;
  *((_QWORD *)this + 103) = 0;
  *((_OWORD *)this + 52) = xmmword_1B6626900;
  *((_OWORD *)this + 53) = xmmword_1B6626910;
  *((_QWORD *)this + 113) = 0;
  *((_OWORD *)this + 57) = xmmword_1B6626900;
  *((_OWORD *)this + 58) = xmmword_1B6626910;
  *((_QWORD *)this + 118) = 0;
  *(_OWORD *)((char *)this + 952) = xmmword_1B6626900;
  *(_OWORD *)((char *)this + 968) = xmmword_1B6626910;
  *((_QWORD *)this + 123) = 0;
  *((_OWORD *)this + 62) = xmmword_1B6626900;
  *((_OWORD *)this + 63) = xmmword_1B6626910;
  bzero((char *)this + 2776, 0x238uLL);
  *((_OWORD *)this + 260) = xmmword_1B66A24B0;
  *((_QWORD *)this + 522) = 1;
  *(_OWORD *)((char *)this + 3496) = 0u;
  *(_OWORD *)((char *)this + 3512) = 0u;
  *(_OWORD *)((char *)this + 3528) = 0u;
  *(_OWORD *)((char *)this + 3544) = 0u;
  *(_OWORD *)((char *)this + 3560) = 0u;
  *(_OWORD *)((char *)this + 3576) = 0u;
  *(_OWORD *)((char *)this + 3592) = 0u;
  *(_OWORD *)((char *)this + 3608) = 0u;
  *(_OWORD *)((char *)this + 3624) = 0u;
  *(_OWORD *)((char *)this + 3640) = 0u;
  *(_OWORD *)((char *)this + 3656) = 0u;
  *(_OWORD *)((char *)this + 3672) = 0u;
  *(_OWORD *)((char *)this + 3688) = 0u;
  *(_OWORD *)((char *)this + 3704) = 0u;
  *(_OWORD *)((char *)this + 3720) = 0u;
  *(_OWORD *)((char *)this + 3736) = 0u;
  *(_OWORD *)((char *)this + 3752) = 0u;
  *(_OWORD *)((char *)this + 3768) = 0u;
  *(_OWORD *)((char *)this + 3784) = 0u;
  *(_OWORD *)((char *)this + 3800) = 0u;
  *(_OWORD *)((char *)this + 3816) = 0u;
  *(_OWORD *)((char *)this + 3832) = 0u;
  *(_OWORD *)((char *)this + 3848) = 0u;
  *(_OWORD *)((char *)this + 3864) = 0u;
  *(_OWORD *)((char *)this + 3880) = 0u;
  *(_OWORD *)((char *)this + 3896) = 0u;
  *(_OWORD *)((char *)this + 3912) = 0u;
  *(_OWORD *)((char *)this + 3928) = 0u;
  *(_OWORD *)((char *)this + 3944) = 0u;
  *(_OWORD *)((char *)this + 3960) = 0u;
  *(_OWORD *)((char *)this + 3976) = 0u;
  v51 = operator new();
  v52 = v4;
  if (*((char *)this + 31) < 0)
    v52 = *(const char **)v4;
  *(_QWORD *)v51 = CFStringCreateWithCString(0, v52, 0x600u);
  *(_BYTE *)(v51 + 8) = 1;
  *(_QWORD *)(v51 + 48) = 0;
  v53 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  v54 = 16;
  v55 = (const CFDictionaryKeyCallBacks *)MEMORY[0x1E0C9B390];
  v56 = (const CFDictionaryValueCallBacks *)MEMORY[0x1E0C9B3A0];
  do
  {
    *(_QWORD *)(v51 + v54) = CFDictionaryCreateMutable(v53, 0, v55, v56);
    v54 += 8;
  }
  while (v54 != 48);
  std::unique_ptr<TuningPListMgr>::reset[abi:ne180100]((PListLogger ***)this + 341, (PListLogger **)v51);
  *((_OWORD *)this + 777) = 0u;
  *((_OWORD *)this + 776) = 0u;
  VPChannelConfig::SetChConfig((VoiceProcessorV3 *)((char *)this + 424), 1, "main", 0);
  VPChannelConfig::SetChConfig((VoiceProcessorV3 *)((char *)this + 448), 1, "main", 0);
  v58 = 0;
  v59 = 0;
  v60 = 0;
  v61 = *((_DWORD *)this + 112);
  v62 = *((_DWORD *)this + 106);
  do
  {
    if (((1 << v58) & v61) == 0 || ((1 << v58) & v62) == 0)
      v59 += ((v62 | v61) >> v58) & 1;
    else
      v60 |= 1 << v59++;
    ++v58;
  }
  while (v58 != 32);
  *((_DWORD *)this + 105) = v60;
  VoiceProcessorV2::ReadDefaultsOverride(CFSTR("vp_disable_downlink"), 0, (BOOL *)this + 2084, 0, v57);
  if (*((_BYTE *)this + 15897))
  {
    v64 = (AUProcessingBlockBase *)operator new();
    AUProcessingBlockBase::AUProcessingBlockBase(v64, CFSTR("VP Uplink"));
    *(_QWORD *)v64 = &off_1E69DA668;
    *((_QWORD *)this + 1564) = v64;
    v65 = (AUProcessingBlockBase *)operator new();
    AUProcessingBlockBase::AUProcessingBlockBase(v65, CFSTR("VP Downlink"));
    *(_QWORD *)v65 = &off_1E69DA668;
    *((_QWORD *)this + 1565) = v65;
  }
  *((_OWORD *)this + 111) = 0u;
  *((_OWORD *)this + 110) = 0u;
  *((_OWORD *)this + 109) = 0u;
  *((_OWORD *)this + 108) = 0u;
  VoiceProcessorV2::SaveFilesPrepare(this);
  if (*((_BYTE *)this + 15897))
  {
    *((_DWORD *)this + 3788) = 0;
    VoiceProcessorV2::ReadDefaultsOverride(CFSTR("vp_inject_files"), (const __CFString *)1, (BOOL *)this + 15152, 0, v66);
    *(_DWORD *)v100 = 0;
    VoiceProcessorV2::ReadDefaultsOverride(CFSTR("vp_add_files"), (const __CFString *)1, v100, 0, v67);
    v69 = *((_DWORD *)this + 3788);
    if (v69)
    {
      *(_QWORD *)&buf[8] = 0;
      *(_QWORD *)&buf[16] = 0;
      *(_QWORD *)buf = &buf[8];
      std::to_string(&v119, v69);
      std::string::basic_string[abi:ne180100]<0>(__p, "vp_inject_files");
      v108 = __p;
      v70 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)buf, __p, (_OWORD **)&v108);
      v71 = (void **)v70 + 7;
      if (*((char *)v70 + 79) < 0)
        operator delete(*v71);
      *(std::string *)v71 = v119;
      *((_BYTE *)&v119.__r_.__value_.__s + 23) = 0;
      v119.__r_.__value_.__s.__data_[0] = 0;
      if (v107 < 0)
      {
        operator delete(__p[0]);
        if (SHIBYTE(v119.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v119.__r_.__value_.__l.__data_);
      }
      AudioStatisticsHelperSendMessage(*((uint64_t **)this + 270), *((_DWORD *)this + 542), (const UInt8 **)buf, 5);
      std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(*(_QWORD **)&buf[8]);
    }
    *(_OWORD *)((char *)this + 15416) = 0u;
    *(_OWORD *)((char *)this + 15432) = 0u;
    *(_OWORD *)((char *)this + 15384) = 0u;
    *(_OWORD *)((char *)this + 15400) = 0u;
    *(_OWORD *)((char *)this + 15352) = 0u;
    *(_OWORD *)((char *)this + 15368) = 0u;
    *(_OWORD *)((char *)this + 15320) = 0u;
    *(_OWORD *)((char *)this + 15336) = 0u;
    *(_OWORD *)((char *)this + 15288) = 0u;
    *(_OWORD *)((char *)this + 15304) = 0u;
    *(_OWORD *)((char *)this + 15256) = 0u;
    *(_OWORD *)((char *)this + 15272) = 0u;
    *(_OWORD *)((char *)this + 15224) = 0u;
    *(_OWORD *)((char *)this + 15240) = 0u;
    *(_OWORD *)((char *)this + 15192) = 0u;
    *(_OWORD *)((char *)this + 15208) = 0u;
    *(_OWORD *)((char *)this + 15160) = 0u;
    *(_OWORD *)((char *)this + 15176) = 0u;
    *((_OWORD *)this + 982) = 0u;
    *((_OWORD *)this + 983) = 0u;
    *((_OWORD *)this + 980) = 0u;
    *((_OWORD *)this + 981) = 0u;
    *((_OWORD *)this + 978) = 0u;
    *((_OWORD *)this + 979) = 0u;
    *((_OWORD *)this + 976) = 0u;
    *((_OWORD *)this + 977) = 0u;
    *((_OWORD *)this + 974) = 0u;
    *((_OWORD *)this + 975) = 0u;
    *((_OWORD *)this + 972) = 0u;
    *((_OWORD *)this + 973) = 0u;
    *((_OWORD *)this + 970) = 0u;
    *((_OWORD *)this + 971) = 0u;
    *((_OWORD *)this + 968) = 0u;
    *((_OWORD *)this + 969) = 0u;
    *((_OWORD *)this + 966) = 0u;
    *((_OWORD *)this + 967) = 0u;
    *((_QWORD *)this + 1892) = 0;
    *((_QWORD *)this + 1893) = 0;
    if (*((_BYTE *)this + 15897))
    {
      *(_BYTE *)v99 = 0;
      VoiceProcessorV2::ReadAndApplyDefaultsOverride(this, CFSTR("vp_loopback"), 0, v99, v68);
      v72 = *((_QWORD *)this + 1969);
      *((_QWORD *)this + 1969) = 0;
      if (v72)
        std::default_delete<VoiceProcessor::SampleRateConverter>::operator()[abi:ne180100]();
      *((_DWORD *)this + 3940) = 0;
      *((_QWORD *)this + 1971) = 0;
    }
  }
  global_queue = dispatch_get_global_queue(0, 0);
  v74 = dispatch_source_create(MEMORY[0x1E0C80DC0], 1uLL, 0, global_queue);
  v75 = MEMORY[0x1E0C809B0];
  *((_QWORD *)this + 1993) = v74;
  *(_QWORD *)buf = v75;
  *(_QWORD *)&buf[8] = 0x40000000;
  *(_QWORD *)&buf[16] = ___ZN16VoiceProcessorV2C2ERKN2vp7ContextE_block_invoke;
  *(_QWORD *)&buf[24] = &__block_descriptor_tmp_12855;
  v118 = this;
  dispatch_source_set_event_handler(v74, buf);
  dispatch_resume(*((dispatch_object_t *)this + 1993));
  if (VPLogScope(void)::once != -1)
    dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
  v76 = (_QWORD *)VPLogScope(void)::scope;
  if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(5, VPLogScope(void)::scope, 0))
  {
    v77 = (*v76 ? *v76 : MEMORY[0x1E0C81028]);
    if (os_log_type_enabled(v77, OS_LOG_TYPE_DEBUG))
    {
      LODWORD(v119.__r_.__value_.__l.__data_) = 136315394;
      *(std::string::size_type *)((char *)v119.__r_.__value_.__r.__words + 4) = (std::string::size_type)"VoiceProcessor_v2.cpp";
      WORD2(v119.__r_.__value_.__r.__words[1]) = 1024;
      *(_DWORD *)((char *)&v119.__r_.__value_.__r.__words[1] + 6) = 237;
      _os_log_impl(&dword_1B5ED0000, v77, OS_LOG_TYPE_DEBUG, "%25s:%-5d  <vp> Constructed!\n", (uint8_t *)&v119, 0x12u);
    }
  }
  v78 = *v101;
  if (*v101 && (*((_BYTE *)this + 15897) || *((_BYTE *)this + 15898)))
  {
    if (VPLogScope(void)::once != -1)
      dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
    CALegacyLog::log(v78, 5, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/VoiceProcessor_v2.cpp", 237, "VoiceProcessorV2", "Constructed!\n");
  }
  *(_QWORD *)this = &off_1E69DC050;
  *((_DWORD *)this + 4172) = 0;
  *(_OWORD *)((char *)this + 16696) = 0u;
  *(_OWORD *)((char *)this + 16712) = 0u;
  *(_OWORD *)((char *)this + 16728) = 0u;
  *(_OWORD *)((char *)this + 16744) = 0u;
  *((_DWORD *)this + 4190) = 1065353216;
  std::string::basic_string[abi:ne180100]<0>(buf, "_AXNotification_PersonalMediaEnabled");
  v115[0] = &off_1E69DC308;
  v115[1] = this;
  v116 = v115;
  vp::NotificationHandler::create((uint64_t *)&v119, (uint64_t)buf, v115);
  std::shared_ptr<vp::xml::_xmlNode const>::operator=[abi:ne180100]((uint64_t)this + 16696, (__int128 *)&v119);
  size = (std::__shared_weak_count *)v119.__r_.__value_.__l.__size_;
  if (v119.__r_.__value_.__l.__size_)
  {
    v80 = (unint64_t *)(v119.__r_.__value_.__l.__size_ + 8);
    do
      v81 = __ldaxr(v80);
    while (__stlxr(v81 - 1, v80));
    if (!v81)
    {
      ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
      std::__shared_weak_count::__release_weak(size);
    }
  }
  v82 = v116;
  if (v116 == v115)
  {
    v83 = 4;
    v82 = v115;
  }
  else
  {
    if (!v116)
      goto LABEL_143;
    v83 = 5;
  }
  (*(void (**)(void))(*v82 + 8 * v83))();
LABEL_143:
  if ((buf[23] & 0x80000000) != 0)
    operator delete(*(void **)buf);
  std::string::basic_string[abi:ne180100]<0>(buf, "_AXNotification_personalAudioAccommodationTypes");
  v113[0] = &off_1E69DC308;
  v113[1] = this;
  v114 = v113;
  vp::NotificationHandler::create((uint64_t *)&v119, (uint64_t)buf, v113);
  std::shared_ptr<vp::xml::_xmlNode const>::operator=[abi:ne180100]((uint64_t)this + 16712, (__int128 *)&v119);
  v84 = (std::__shared_weak_count *)v119.__r_.__value_.__l.__size_;
  if (v119.__r_.__value_.__l.__size_)
  {
    v85 = (unint64_t *)(v119.__r_.__value_.__l.__size_ + 8);
    do
      v86 = __ldaxr(v85);
    while (__stlxr(v86 - 1, v85));
    if (!v86)
    {
      ((void (*)(std::__shared_weak_count *))v84->__on_zero_shared)(v84);
      std::__shared_weak_count::__release_weak(v84);
    }
  }
  v87 = v114;
  if (v114 == v113)
  {
    v88 = 4;
    v87 = v113;
  }
  else
  {
    if (!v114)
      goto LABEL_155;
    v88 = 5;
  }
  (*(void (**)(void))(*v87 + 8 * v88))();
LABEL_155:
  if ((buf[23] & 0x80000000) != 0)
    operator delete(*(void **)buf);
  std::string::basic_string[abi:ne180100]<0>(buf, "_AXNotification_personalMediaEnabledByRouteUID");
  v111[0] = &off_1E69DC308;
  v111[1] = this;
  v112 = v111;
  vp::NotificationHandler::create((uint64_t *)&v119, (uint64_t)buf, v111);
  std::shared_ptr<vp::xml::_xmlNode const>::operator=[abi:ne180100]((uint64_t)this + 16728, (__int128 *)&v119);
  v89 = (std::__shared_weak_count *)v119.__r_.__value_.__l.__size_;
  if (v119.__r_.__value_.__l.__size_)
  {
    v90 = (unint64_t *)(v119.__r_.__value_.__l.__size_ + 8);
    do
      v91 = __ldaxr(v90);
    while (__stlxr(v91 - 1, v90));
    if (!v91)
    {
      ((void (*)(std::__shared_weak_count *))v89->__on_zero_shared)(v89);
      std::__shared_weak_count::__release_weak(v89);
    }
  }
  v92 = v112;
  if (v112 == v111)
  {
    v93 = 4;
    v92 = v111;
  }
  else
  {
    if (!v112)
      goto LABEL_167;
    v93 = 5;
  }
  (*(void (**)(void))(*v92 + 8 * v93))();
LABEL_167:
  if ((buf[23] & 0x80000000) != 0)
    operator delete(*(void **)buf);
  std::string::basic_string[abi:ne180100]<0>(buf, "_AXNotification_accommodationTypesByRouteUID");
  v109[0] = &off_1E69DC308;
  v109[1] = this;
  v110 = v109;
  vp::NotificationHandler::create((uint64_t *)&v119, (uint64_t)buf, v109);
  std::shared_ptr<vp::xml::_xmlNode const>::operator=[abi:ne180100]((uint64_t)this + 16744, (__int128 *)&v119);
  v94 = (std::__shared_weak_count *)v119.__r_.__value_.__l.__size_;
  if (v119.__r_.__value_.__l.__size_)
  {
    v95 = (unint64_t *)(v119.__r_.__value_.__l.__size_ + 8);
    do
      v96 = __ldaxr(v95);
    while (__stlxr(v96 - 1, v95));
    if (!v96)
    {
      ((void (*)(std::__shared_weak_count *))v94->__on_zero_shared)(v94);
      std::__shared_weak_count::__release_weak(v94);
    }
  }
  v97 = v110;
  if (v110 == v109)
  {
    v98 = 4;
    v97 = v109;
  }
  else
  {
    if (!v110)
      goto LABEL_179;
    v98 = 5;
  }
  (*(void (**)(void))(*v97 + 8 * v98))();
LABEL_179:
  if ((buf[23] & 0x80000000) != 0)
    operator delete(*(void **)buf);
}

void sub_1B644023C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, applesauce::CF::DictionaryRef *a10, applesauce::CF::DictionaryRef *a11, applesauce::CF::StringRef *a12, applesauce::CF::StringRef *a13, void **a14, void **a15, const void **a16, applesauce::CF::DictionaryRef *a17, const void **a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,VoiceProcessorV2::VPEchoProcessingParams *a23,vp::Audio_Buffer *a24,vp::Audio_Buffer *a25,vp::Audio_Buffer *a26,vp::Audio_Buffer *a27,std::mutex *a28,CADeprecated::CAMutex *a29,CADeprecated::CAMutex *a30,CADeprecated::CAMutex *a31,const void **a32,const void **a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,_QWORD **a38,_QWORD **a39,uint64_t *a40,_QWORD *a41,applesauce::CF::StringRef *a42,applesauce::CF::DictionaryRef *a43,applesauce::CF::DictionaryRef *a44,applesauce::CF::DictionaryRef *a45,applesauce::CF::DictionaryRef *a46,applesauce::CF::DictionaryRef *a47,applesauce::CF::DictionaryRef *a48,_Unwind_Exception *exception_objecta,uint64_t a50,PListLogger ***a51,uint64_t a52,uint64_t a53,void **a54,CACFString *a55,applesauce::CF::StringRef *a56,uint64_t a57)
{
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t i;
  void **v68;
  void *v69;
  void *v70;
  void *v71;
  void *v72;
  void *v73;
  void *v74;
  uint64_t v75;
  void *v76;
  void *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;

  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(*(_QWORD **)(v58 + 40));
  applesauce::CF::DictionaryRef::~DictionaryRef((const void **)(v57 + 16680));
  applesauce::CF::DictionaryRef::~DictionaryRef((const void **)(v57 + 16672));
  applesauce::CF::DictionaryRef::~DictionaryRef((const void **)(v57 + 16664));
  applesauce::CF::StringRef::~StringRef((const void **)(v57 + 16656));
  applesauce::CF::StringRef::~StringRef(a16);
  caulk::details::lifetime_guard_base<VoiceProcessorV2>::~lifetime_guard_base((uint64_t)a17);
  if (*((_BYTE *)a56 + 8))
    vp::objc::ID::~ID((id *)a56);
  applesauce::CF::StringRef::~StringRef((const void **)(v57 + 16552));
  applesauce::CF::DictionaryRef::~DictionaryRef((const void **)(v57 + 16520));
  applesauce::CF::DictionaryRef::~DictionaryRef((const void **)(v57 + 16512));
  applesauce::CF::DictionaryRef::~DictionaryRef((const void **)(v57 + 16504));
  applesauce::CF::StringRef::~StringRef((const void **)(v57 + 16496));
  applesauce::CF::StringRef::~StringRef((const void **)(v57 + 16488));
  applesauce::CF::DictionaryRef::~DictionaryRef((const void **)(v57 + 16480));
  applesauce::CF::DictionaryRef::~DictionaryRef((const void **)(v57 + 16472));
  applesauce::CF::StringRef::~StringRef((const void **)(v57 + 16464));
  applesauce::CF::StringRef::~StringRef((const void **)(v57 + 16456));
  vp::Block<void({block_pointer})(AUVoiceIOSpeechActivityEvent)>::~Block((const void **)(v57 + 16432));
  applesauce::CF::DictionaryRef::~DictionaryRef((const void **)(v57 + 16424));
  applesauce::CF::DictionaryRef::~DictionaryRef((const void **)(v57 + 16416));
  applesauce::CF::StringRef::~StringRef((const void **)(v57 + 16408));
  applesauce::CF::StringRef::~StringRef(a18);
  caulk::concurrent::lf_read_synchronized_write<std::optional<std::vector<unsigned char>>>::~lf_read_synchronized_write(a19);
  applesauce::CF::DictionaryRef::~DictionaryRef((const void **)(v57 + 16288));
  applesauce::CF::DictionaryRef::~DictionaryRef((const void **)(v57 + 16280));
  applesauce::CF::DictionaryRef::~DictionaryRef((const void **)(v57 + 16272));
  applesauce::CF::DictionaryRef::~DictionaryRef((const void **)(v57 + 16264));
  applesauce::CF::DictionaryRef::~DictionaryRef((const void **)(v57 + 16256));
  applesauce::CF::DictionaryRef::~DictionaryRef((const void **)(v57 + 16248));
  applesauce::CF::StringRef::~StringRef((const void **)(v57 + 16240));
  applesauce::CF::StringRef::~StringRef((const void **)(v57 + 16232));
  std::shared_ptr<vp::services::Telephony_Utility>::~shared_ptr[abi:ne180100](v57 + 16216);
  if (*(char *)(a52 + 119) < 0)
    operator delete(*a14);
  VoiceProcessor::ConfigInfo::~ConfigInfo((VoiceProcessor::ConfigInfo *)(v57 + 16072));
  *(_QWORD *)(v60 - 144) = v57 + 16048;
  std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v60 - 144));
  *(_QWORD *)(v60 - 144) = v57 + 16024;
  std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v60 - 144));
  *(_QWORD *)(v60 - 144) = v57 + 16000;
  std::vector<std::__fs::filesystem::path>::__destroy_vector::operator()[abi:ne180100]((void ***)(v60 - 144));
  *(_QWORD *)(v60 - 144) = a20;
  std::vector<std::__fs::filesystem::path>::__destroy_vector::operator()[abi:ne180100]((void ***)(v60 - 144));
  std::shared_ptr<vp::services::Telephony_Utility>::~shared_ptr[abi:ne180100](v57 + 15912);
  ABLRingBuffer<float>::~ABLRingBuffer(a21);
  v61 = *(_QWORD *)(v57 + 15752);
  *(_QWORD *)(v57 + 15752) = 0;
  if (v61)
    std::default_delete<VoiceProcessor::SampleRateConverter>::operator()[abi:ne180100]();
  v62 = 0;
  v63 = v57 + 15720;
  do
  {
    myFreeABLDynamic((AudioBufferList **)(v63 + v62));
    *(_QWORD *)(v63 + v62) = 0;
    v62 -= 24;
  }
  while (v62 != -288);
  v64 = 0;
  v65 = v57 + 15424;
  do
  {
    myFreeABLDynamic((AudioBufferList **)(v65 + v64));
    *(_QWORD *)(v65 + v64) = 0;
    v64 -= 24;
  }
  while (v64 != -288);
  v66 = *(_QWORD *)(v57 + 15048);
  *(_QWORD *)(v57 + 15048) = 0;
  if (v66)
    MEMORY[0x1BCC95CEC](v66, 0x1000C4089CA3EB1);
  *(_QWORD *)(v60 - 144) = a22;
  std::vector<std::vector<std::unique_ptr<VPTimeFreqConverter>>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v60 - 144));
  for (i = 0; i != -1072; i -= 8)
    vp::Audio_Capture::~Audio_Capture((vp::Audio_Capture *)(v57 + 13944 + i));
  CADeprecated::CAAutoDelete<CALegacyLog>::set((_QWORD *)(v57 + 12568), 0);
  CADeprecated::CAAutoDelete<CALegacyLog>::set(a55, 0);
  if (*(char *)(a57 + 71) < 0)
    operator delete(*(void **)(v57 + 12536));
  VoiceProcessorV2::VPEchoProcessingParams::~VPEchoProcessingParams(a23);
  std::__hash_table<std::__hash_value_type<unsigned int,std::vector<VoiceProcessorV2::VoiceProcessorPropertyListenerBlockInfo>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::vector<VoiceProcessorV2::VoiceProcessorPropertyListenerBlockInfo>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::vector<VoiceProcessorV2::VoiceProcessorPropertyListenerBlockInfo>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::vector<VoiceProcessorV2::VoiceProcessorPropertyListenerBlockInfo>>>>::~__hash_table(v57 + 4304);
  vp::Audio_Buffer::~Audio_Buffer(a24);
  vp::Audio_Buffer::~Audio_Buffer(a25);
  vp::Audio_Buffer::~Audio_Buffer(a26);
  vp::Audio_Buffer::~Audio_Buffer(a27);
  std::unique_ptr<TuningPListMgr>::reset[abi:ne180100](a51, 0);
  std::mutex::~mutex(a28);
  CADeprecated::CAMutex::~CAMutex(a29);
  CADeprecated::CAMutex::~CAMutex(a30);
  CADeprecated::CAMutex::~CAMutex(a31);
  v68 = (void **)(v57 + 2336);
  v69 = *(void **)(v57 + 2360);
  if (v69)
  {
    *(_QWORD *)(v57 + 2368) = v69;
    operator delete(v69);
  }
  v70 = *v68;
  if (*v68)
  {
    *(_QWORD *)(v57 + 2344) = v70;
    operator delete(v70);
  }
  CAAudioChannelLayout::~CAAudioChannelLayout((unsigned int **)(v59 + 2204));
  applesauce::CF::DictionaryRef::~DictionaryRef((const void **)(v59 + 2140));
  v71 = *(void **)(v57 + 2184);
  if (v71)
  {
    free(v71);
    *(_QWORD *)(v57 + 2184) = 0;
  }
  applesauce::CF::StringRef::~StringRef(a32);
  v72 = *(void **)(v57 + 2160);
  if (v72)
  {
    free(v72);
    *(_QWORD *)(v57 + 2160) = 0;
  }
  applesauce::CF::ArrayRef::~ArrayRef((const void **)(v59 + 2060));
  v73 = *(void **)(v57 + 2128);
  if (v73)
  {
    *(_QWORD *)(v57 + 2136) = v73;
    operator delete(v73);
  }
  applesauce::CF::ArrayRef::~ArrayRef((const void **)(v59 + 2028));
  v74 = *(void **)(v57 + 2096);
  if (v74)
  {
    *(_QWORD *)(v57 + 2104) = v74;
    operator delete(v74);
  }
  applesauce::CF::ArrayRef::~ArrayRef(a33);
  std::__optional_destruct_base<vp::utility::Audio_Buffer_Mixer,false>::~__optional_destruct_base[abi:ne180100](v59 + 1908);
  v75 = *(_QWORD *)(v57 + 1992);
  *(_QWORD *)(v57 + 1992) = 0;
  if (v75)
    std::default_delete<VoiceProcessor::SampleRateConverter>::operator()[abi:ne180100]();
  if (*(_BYTE *)(v57 + 1984))
  {
    *(_QWORD *)(v60 - 144) = v59 + 1868;
    std::vector<std::unique_ptr<VoiceProcessor::SampleRateConverter>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v60 - 144));
  }
  if (*(_BYTE *)(v57 + 1952))
  {
    *(_QWORD *)(v60 - 144) = v59 + 1836;
    std::vector<std::unique_ptr<VoiceProcessor::SampleRateConverter>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v60 - 144));
  }
  ABLRingBuffer<float>::~ABLRingBuffer(a34);
  ABLRingBuffer<float>::~ABLRingBuffer(a35);
  if (*(_BYTE *)(v57 + 1392))
  {
    *(_QWORD *)(v60 - 144) = v59 + 1276;
    std::vector<std::unique_ptr<VoiceProcessor::SampleRateConverter>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v60 - 144));
  }
  ABLRingBuffer<float>::~ABLRingBuffer(a36);
  ABLRingBuffer<float>::~ABLRingBuffer(a53);
  ABLRingBuffer<float>::~ABLRingBuffer(a37);
  if (*a41)
  {
    (*(void (**)(_QWORD))(*(_QWORD *)*a41 + 8))(*a41);
    *a41 = 0;
  }
  CADeprecated::CAAutoDelete<CADeprecated::CABufferList>::set((_QWORD **)(v59 + 1036), 0);
  CADeprecated::CAAutoDelete<CADeprecated::CABufferList>::set(a38, 0);
  CADeprecated::CAAutoDelete<CADeprecated::CABufferList>::set((_QWORD **)(v59 + 1020), 0);
  CADeprecated::CAAutoDelete<CADeprecated::CABufferList>::set(a39, 0);
  v76 = *(void **)(v57 + 456);
  if (v76)
    free(v76);
  v77 = *(void **)(v57 + 432);
  if (v77)
    free(v77);
  v78 = *(_QWORD *)(v57 + 392);
  *(_QWORD *)(v57 + 392) = 0;
  if (v78)
    std::default_delete<VoiceProcessor::SampleRateConverter>::operator()[abi:ne180100]();
  v79 = *(_QWORD *)(v57 + 384);
  *(_QWORD *)(v57 + 384) = 0;
  if (v79)
    std::default_delete<VoiceProcessor::SampleRateConverter>::operator()[abi:ne180100]();
  v80 = *a40;
  *a40 = 0;
  if (v80)
    std::default_delete<VoiceProcessor::SampleRateConverter>::operator()[abi:ne180100]();
  vp::Block<int({block_pointer})(AudioBufferList *,AudioTimeStamp *,unsigned int *)>::~Block((const void **)(v59 + 4));
  if (*(char *)(v57 + 55) < 0)
    operator delete(*a15);
  if (*(char *)(v57 + 31) < 0)
    operator delete(*a54);
  _Unwind_Resume(a1);
}

void std::__function::__func<VoiceProcessorV3::VoiceProcessorV3(vp::Context const&)::$_0,std::allocator<VoiceProcessorV3::VoiceProcessorV3(vp::Context const&)::$_0>,void ()(std::optional<unsigned long long>)>::~__func()
{
  JUMPOUT(0x1BCC95CECLL);
}

_QWORD *std::__function::__func<VoiceProcessorV3::VoiceProcessorV3(vp::Context const&)::$_0,std::allocator<VoiceProcessorV3::VoiceProcessorV3(vp::Context const&)::$_0>,void ()(std::optional<unsigned long long>)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E69DC308;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<VoiceProcessorV3::VoiceProcessorV3(vp::Context const&)::$_0,std::allocator<VoiceProcessorV3::VoiceProcessorV3(vp::Context const&)::$_0>,void ()(std::optional<unsigned long long>)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E69DC308;
  a2[1] = v2;
  return result;
}

void std::__function::__func<VoiceProcessorV3::VoiceProcessorV3(vp::Context const&)::$_0,std::allocator<VoiceProcessorV3::VoiceProcessorV3(vp::Context const&)::$_0>,void ()(std::optional<unsigned long long>)>::operator()(uint64_t a1)
{
  uint64_t v1;
  NSString *v2;
  unint64_t isPersonalMediaEnabled;
  int v4;
  _BOOL4 v5;
  int v6;
  int v7;
  NSString *v8;
  int v9;
  CFTypeRef v10;
  CFNumberRef v11;
  CFDictionaryRef CFDictionaryRef;
  const void *v13;
  uint64_t i;
  const void *v15;
  const void *v16;
  const void *v17;
  std::runtime_error *exception;
  CFNumberRef v19;
  const void *v20;
  _QWORD v21[2];
  int v22;
  NSString *v23;
  CFTypeRef v24;
  NSString *v25;
  CFTypeRef cf;
  int valuePtr;
  _QWORD inData[2];
  _QWORD v29[3];

  v29[2] = *MEMORY[0x1E0C80C00];
  v1 = *(_QWORD *)(a1 + 8);
  VoiceProcessorV2::GetRefPortUIDForPME((VoiceProcessorV2 *)&cf, (VoiceProcessorV2 *)v1);
  v2 = (NSString *)cf;
  if (cf)
    CFRetain(cf);
  v25 = v2;
  isPersonalMediaEnabled = va::PersonalAudioInterface::isPersonalMediaEnabled(&v25);
  v4 = isPersonalMediaEnabled;
  if (v2)
    CFRelease(v2);
  if (v4)
  {
    isPersonalMediaEnabled = VoiceProcessorV2::GetRefPortHLC2chStateForPME((VoiceProcessorV2 *)v1);
    v5 = (isPersonalMediaEnabled & 1) == 0;
  }
  else
  {
    v5 = 1;
  }
  v6 = va::PersonalAudioInterface::isPersonalMediaEnabled((va::PersonalAudioInterface *)isPersonalMediaEnabled);
  if ((*(_BYTE *)(v1 + 8837) & 0x20) != 0 && (*(_BYTE *)(v1 + 8845) & 0x20) != 0 && *(_QWORD *)(v1 + 3856))
  {
    v7 = v6;
    if (v4)
    {
      v8 = (NSString *)cf;
      if (cf)
        CFRetain(cf);
      v23 = v8;
      va::PersonalAudioInterface::getPreset((applesauce::CF::DictionaryRef *)&v24, &v23);
      if (v8)
        CFRelease(v8);
    }
    else
    {
      va::PersonalAudioInterface::getPreset((va::PersonalAudioInterface *)&v24);
    }
    if (v24)
    {
      inData[0] = v24;
      AudioUnitSetProperty(*(AudioUnit *)(v1 + 3856), 0, 0, 0, inData, 8u);
    }
    v9 = (v7 | v4) & v5;
    v22 = v9 ^ 1;
    AudioUnitSetProperty(*(AudioUnit *)(v1 + 3856), 0x15u, 0, 0, &v22, 4u);
    if (*(_BYTE *)(v1 + 15897))
    {
      v10 = v24;
      if (!v24)
        goto LABEL_36;
      CFRetain(v24);
      v20 = v10;
      applesauce::CF::TypeRefPair::TypeRefPair<char const* const&,applesauce::CF::DictionaryRef>((applesauce::CF::TypeRef *)inData, "hlc_paconfig", &v20);
      valuePtr = v9;
      v11 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
      v19 = v11;
      if (!v11)
      {
        exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(exception, "Could not construct");
      }
      applesauce::CF::TypeRefPair::TypeRefPair<char const* const&,applesauce::CF::NumberRef>((applesauce::CF::TypeRef *)v29, "hlc_enable", (const void **)&v19);
      v21[0] = inData;
      v21[1] = 2;
      CFDictionaryRef = applesauce::CF::details::make_CFDictionaryRef((uint64_t)v21);
      v13 = *(const void **)(v1 + 2232);
      *(_QWORD *)(v1 + 2232) = CFDictionaryRef;
      if (v13)
        CFRelease(v13);
      for (i = 0; i != -4; i -= 2)
      {
        v15 = (const void *)v29[i + 1];
        if (v15)
          CFRelease(v15);
        v16 = (const void *)inData[i + 2];
        if (v16)
          CFRelease(v16);
      }
      CFRelease(v11);
      CFRelease(v10);
      if (*(_BYTE *)(v1 + 15897))
        VoiceProcessorV2::PListWriteSetPropertyParameters((VoiceProcessorV2 *)v1, 1751933808);
      v17 = *(const void **)(v1 + 2232);
      *(_QWORD *)(v1 + 2232) = 0;
      if (v17)
        CFRelease(v17);
    }
    if (v24)
      CFRelease(v24);
  }
LABEL_36:
  if (cf)
    CFRelease(cf);
}

void sub_1B6440EB4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, CFTypeRef a16, uint64_t a17, CFTypeRef a18, uint64_t a19, CFTypeRef a20,CFTypeRef cf)
{
  const void *v21;

  CFRelease(v21);
  if (cf)
    CFRelease(cf);
  if (a20)
    CFRelease(a20);
  if (a16)
    CFRelease(a16);
  if (a18)
    CFRelease(a18);
  _Unwind_Resume(a1);
}

void vp::v3::create(vp::v3 *this@<X0>, VoiceProcessorV3 **a2@<X8>)
{
  VoiceProcessorV3 *v5;

  v5 = (VoiceProcessorV3 *)operator new();
  VoiceProcessorV3::VoiceProcessorV3(v5, this);
  *a2 = v5;
}

void sub_1B6441084(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1BCC95CEC](v1, 0x10F3C40F76DA194);
  _Unwind_Resume(a1);
}

Beamformer_BeamNF::CmhBEAM *Beamformer_BeamNF::CmhBEAM::CmhBEAM(Beamformer_BeamNF::CmhBEAM *this)
{
  char *v2;

  v2 = (char *)this + 88;
  Beamformer_BeamNF::CmhBEAM2NOpt::CmhBEAM2NOpt((Beamformer_BeamNF::CmhBEAM *)((char *)this + 272));
  *((_DWORD *)this + 298) = 1182400512;
  *(_QWORD *)(v2 + 1108) = 0x8000000040;
  *((_DWORD *)this + 307) = 0;
  *((_DWORD *)this + 310) = 1;
  *((_DWORD *)this + 301) = 2;
  *((_OWORD *)v2 + 68) = 0u;
  *(_OWORD *)(v2 + 1176) = 0u;
  *(_OWORD *)(v2 + 1192) = 0u;
  *(_OWORD *)(v2 + 1208) = 0u;
  *(_OWORD *)(v2 + 1224) = 0u;
  *(_OWORD *)(v2 + 1240) = 0u;
  *(_OWORD *)(v2 + 1256) = 0u;
  *(_OWORD *)(v2 + 1272) = 0u;
  *(_OWORD *)(v2 + 1288) = 0u;
  *(_OWORD *)(v2 + 1304) = 0u;
  *(_OWORD *)(v2 + 1320) = 0u;
  *(_OWORD *)(v2 + 1336) = 0u;
  *(_OWORD *)(v2 + 1160) = 0u;
  *((_QWORD *)this + 188) = 0;
  *(_OWORD *)(v2 + 1352) = 0u;
  *(_OWORD *)(v2 + 1368) = 0u;
  *(_OWORD *)(v2 + 1384) = 0u;
  *(_OWORD *)(v2 + 1400) = 0u;
  *((_QWORD *)this + 189) = &off_1E69CA758;
  *((_OWORD *)this + 95) = 0u;
  *((_OWORD *)this + 96) = 0u;
  *((_OWORD *)this + 97) = 0u;
  *((_OWORD *)this + 98) = 0u;
  *((_QWORD *)this + 198) = 0;
  *((_DWORD *)this + 27) = 0;
  *(_QWORD *)((char *)this + 124) = 0;
  *(_QWORD *)((char *)this + 116) = 0;
  *((_QWORD *)this + 18) = 2;
  *((_QWORD *)this + 10) = 0;
  *((_QWORD *)this + 11) = 0;
  *(_QWORD *)((char *)this + 100) = 2;
  *(_OWORD *)((char *)this + 180) = 0u;
  *(_OWORD *)((char *)this + 196) = 0u;
  *((_QWORD *)this + 27) = 0;
  *((_QWORD *)this + 28) = 0;
  *((_QWORD *)this + 31) = 0;
  *((_QWORD *)this + 32) = 0;
  *((_QWORD *)this + 33) = 0;
  *((_OWORD *)this + 3) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *(_OWORD *)this = 0u;
  return this;
}

uint64_t Beamformer_BeamNF::CmhBEAM::initialize(int32x2_t *this, int a2, __int32 a3, int a4)
{
  int32x2_t v8;
  int32x2_t v9;
  int32x2_t v10;
  int32x2_t v11;
  int32x2_t v12;
  int32x2_t v13;
  int32x2_t v14;
  __int32 v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t i;
  uint64_t v20;
  int v21;
  uint64_t j;
  uint64_t v23;
  int32x2_t v24;
  int32x2_t v25;
  int32x2_t v26;
  uint64_t result;
  int v28;
  int v29;
  unsigned int v30;
  unsigned int v31;
  unsigned int v32;
  int v33;
  unsigned int v34;
  int v35;
  int v36;
  unsigned __int16 v37;
  int v38;
  signed int v39;
  uint64_t v40;
  uint64_t v41;
  __int32 v42;
  __int32 v43;
  float v44;
  __int32 v45;
  float v46;
  double v47;
  _BOOL4 v48;
  _BOOL4 v49;
  float v50;
  float v51;
  void *v52;
  size_t v53;
  void *v54;
  void *v55;
  _QWORD *v56;
  void *v57;
  uint64_t v58;
  uint64_t v59;
  size_t v60;
  size_t v61;
  const std::nothrow_t *v62;
  void *v63;
  uint64_t v64;
  const std::nothrow_t *v65;
  void *v66;
  uint64_t v67;
  const std::nothrow_t *v68;
  void *v69;
  size_t v70;
  void *v71;
  uint64_t v72;
  const std::nothrow_t *v73;
  uint64_t v74;
  size_t v75;
  size_t v76;
  void *v77;
  size_t v78;
  size_t v79;
  void *v80;
  void *v81;
  size_t v82;
  void *v83;
  uint64_t v84;
  const std::nothrow_t *v85;
  uint64_t v86;
  size_t v87;
  size_t v88;
  void *v89;
  int v90;
  size_t v91;
  char *v92;
  uint64_t v93;
  size_t v94;
  uint64_t v95;
  uint64_t v96;
  _QWORD *v97;
  char *v98;
  size_t v99;
  char *v100;
  int v101;
  size_t v102;
  int v103;
  uint64_t v104;
  uint64_t v105;
  _QWORD *v106;
  char *v107;
  size_t v108;
  size_t v109;
  void *v110;
  size_t v111;
  void *v112;
  size_t v113;
  void *v114;
  uint64_t v115;
  void *v116;
  uint64_t v117;
  const std::nothrow_t *v118;
  uint64_t v119;
  size_t v120;
  size_t v121;
  void *v122;
  uint64_t v124;
  int v125;
  uint64_t v126;

  v8 = this[4];
  if (v8)
  {
    MEMORY[0x1BCC95CC8](*(_QWORD *)&v8, 0x80C80B8603338);
    this[4] = 0;
  }
  v9 = this[5];
  if (v9)
  {
    MEMORY[0x1BCC95CC8](*(_QWORD *)&v9, 0x80C80B8603338);
    this[5] = 0;
  }
  v10 = this[6];
  if (v10)
  {
    MEMORY[0x1BCC95CC8](*(_QWORD *)&v10, 0x80C80B8603338);
    this[6] = 0;
  }
  v11 = this[10];
  if (v11)
  {
    MEMORY[0x1BCC95CC8](*(_QWORD *)&v11, 0x1000C8052888210);
    this[10] = 0;
  }
  v12 = this[7];
  if (v12)
  {
    MEMORY[0x1BCC95CC8](*(_QWORD *)&v12, 0x80C80B8603338);
    this[7] = 0;
  }
  v13 = this[8];
  if (v13)
  {
    MEMORY[0x1BCC95CC8](*(_QWORD *)&v13, 0x80C80B8603338);
    this[8] = 0;
  }
  v14 = this[9];
  if (v14)
  {
    MEMORY[0x1BCC95CC8](*(_QWORD *)&v14, 0x80C80B8603338);
    this[9] = 0;
  }
  if (this[15].i32[1])
  {
    if (this[7])
    {
      v15 = this->i32[0];
      if (this->i32[0] >= 1)
      {
        v16 = 0;
        do
        {
          v17 = *(_QWORD *)(*(_QWORD *)&this[7] + 8 * v16);
          if (v17)
          {
            MEMORY[0x1BCC95CC8](v17, 0x1000C8052888210);
            v15 = this->i32[0];
          }
          ++v16;
        }
        while (v16 < v15);
      }
    }
    if (this[8])
    {
      v18 = this[1].i32[0];
      if (v18 >= 1)
      {
        for (i = 0; i < v18; ++i)
        {
          v20 = *(_QWORD *)(*(_QWORD *)&this[8] + 8 * i);
          if (v20)
          {
            MEMORY[0x1BCC95CC8](v20, 0x1000C8052888210);
            v18 = this[1].i32[0];
          }
        }
      }
    }
    if (this[9])
    {
      v21 = this->i32[1];
      if (v21 >= 1)
      {
        for (j = 0; j < v21; ++j)
        {
          v23 = *(_QWORD *)(*(_QWORD *)&this[9] + 8 * j);
          if (v23)
          {
            MEMORY[0x1BCC95CC8](v23, 0x1000C8052888210);
            v21 = this->i32[1];
          }
        }
      }
    }
  }
  v24 = this[7];
  if (v24)
  {
    MEMORY[0x1BCC95CC8](*(_QWORD *)&v24, 0x80C80B8603338);
    this[7] = 0;
  }
  v25 = this[8];
  if (v25)
  {
    MEMORY[0x1BCC95CC8](*(_QWORD *)&v25, 0x80C80B8603338);
    this[8] = 0;
  }
  if (this->i32[1] >= 1)
  {
    v26 = this[9];
    if (v26)
    {
      MEMORY[0x1BCC95CC8](*(_QWORD *)&v26, 0x80C80B8603338);
      this[9] = 0;
    }
  }
  if ((a4 - 3) < 0xFFFFFFFE)
    return 5;
  if ((a3 - 46) < 0xFFFFFFDC)
    return 6;
  if (a2 > 23999)
  {
    if (a2 > 47999)
    {
      if (a2 != 48000)
      {
        if (a2 != 88200 && a2 != 96000)
          goto LABEL_182;
        v30 = 1024;
        v28 = 1;
        goto LABEL_64;
      }
LABEL_63:
      v28 = 0;
      v30 = 512;
LABEL_64:
      v29 = 1;
      goto LABEL_66;
    }
    if (a2 != 24000 && a2 != 32000)
    {
      if (a2 != 44100)
        goto LABEL_182;
      goto LABEL_63;
    }
    goto LABEL_55;
  }
  if (a2 <= 11999)
  {
    if (a2 == 8000)
    {
      v28 = 0;
      v29 = 0;
      v30 = 64;
      goto LABEL_66;
    }
    if (a2 != 11025)
    {
LABEL_182:
      this[13] = 0;
      return 1;
    }
LABEL_62:
    v28 = 0;
    v29 = 0;
    v30 = 128;
    goto LABEL_66;
  }
  if (a2 == 12000 || a2 == 16000)
    goto LABEL_62;
  if (a2 != 22050)
    goto LABEL_182;
LABEL_55:
  v28 = 0;
  v29 = 0;
  v30 = 256;
LABEL_66:
  this[13].i32[0] = a2;
  this[13].i32[1] = v30;
  v31 = v30 >> 1;
  v32 = (5 * v30) >> 3;
  this[14].i32[1] = 0;
  this[16].i32[0] = 0;
  if (!v28 || !v29)
  {
    if (((v31 - 1) & 0x100) != 0)
    {
      if (0x100 % v32)
        return 2;
      v33 = 4;
    }
    else
    {
      v33 = 3;
      v32 = v30 >> 1;
    }
    this[14].i32[1] = v32;
    this[15].i32[1] = 0;
    this[16].i32[0] = v33;
    v34 = 0x100 / v32;
    goto LABEL_79;
  }
  if ((v30 & 0x1C0) == 0)
  {
    v33 = 3;
    v32 = v30 >> 1;
    goto LABEL_76;
  }
  if (((5 * (_WORD)v30) & 0x7C0) != 0)
    return 2;
  v33 = 4;
LABEL_76:
  v34 = 0;
  this[14].i32[1] = v32;
  this[15].i32[1] = v32 >> 8;
  this[16].i32[0] = v33;
LABEL_79:
  this[15].i32[0] = v34;
  this[18].i32[1] = a3;
  this[17] = vadd_s32(vdup_n_s32(v31), (int32x2_t)0x1FFFFFFFFLL);
  v35 = -1;
  LOWORD(v31) = v30;
  do
  {
    v31 = (unsigned __int16)v31 >> 1;
    ++v35;
  }
  while (v31);
  this[14].i32[0] = v35;
  this[16].i32[1] = v33 * v30;
  CmhBEAMprocOpt::deallocate_memory(&this[11]);
  this[12].i32[1] = a4;
  v36 = this[14].i32[0];
  if (v36 < 1)
  {
    v38 = 1;
  }
  else
  {
    v37 = 1;
    do
    {
      v37 *= 2;
      --v36;
    }
    while (v36);
    v38 = v37;
  }
  v39 = this[13].i32[1];
  this[22].i32[0] = v39 != v38;
  if (this[11].i32[0])
  {
    LODWORD(v40) = this[18].i32[0];
    LODWORD(v41) = a4;
  }
  else
  {
    this[11].i32[0] = 1;
    v40 = this[18].i32[0];
    if ((int)v40 < 0)
      v70 = -1;
    else
      v70 = 8 * v40;
    v71 = operator new[](v70, MEMORY[0x1E0DE4E10]);
    this[28] = (int32x2_t)v71;
    if (!v71)
      return 4;
    bzero(v71, 8 * (int)v40);
    if ((int)v40 >= 1)
    {
      v72 = 0;
      v73 = (const std::nothrow_t *)MEMORY[0x1E0DE4E10];
      while (1)
      {
        v74 = this[13].i32[1];
        v75 = 4 * v74;
        v76 = (int)v74 < 0 ? -1 : 4 * v74;
        *(_QWORD *)(*(_QWORD *)&this[28] + 8 * v72) = operator new[](v76, v73);
        v77 = *(void **)(*(_QWORD *)&this[28] + 8 * v72);
        if (!v77)
          return 4;
        bzero(v77, v75);
        ++v72;
        v40 = this[18].i32[0];
        if (v72 >= v40)
        {
          v39 = this[13].i32[1];
          break;
        }
      }
    }
    v78 = 4 * v39;
    v79 = v39 < 0 ? -1 : 4 * v39;
    v80 = operator new[](v79, MEMORY[0x1E0DE4E10]);
    this[31] = (int32x2_t)v80;
    if (!v80)
      return 4;
    bzero(v80, v78);
    v81 = operator new[](v79, MEMORY[0x1E0DE4E10]);
    this[32] = (int32x2_t)v81;
    if (!v81)
      return 4;
    bzero(v81, v78);
    v41 = this[12].i32[1];
    v82 = (int)v41 < 0 ? -1 : 8 * v41;
    v83 = operator new[](v82, MEMORY[0x1E0DE4E10]);
    this[27] = (int32x2_t)v83;
    if (!v83)
      return 4;
    bzero(v83, 8 * (int)v41);
    if ((int)v41 >= 1)
    {
      v84 = 0;
      v85 = (const std::nothrow_t *)MEMORY[0x1E0DE4E10];
      while (1)
      {
        v86 = this[13].i32[1];
        v87 = 4 * v86;
        v88 = (int)v86 < 0 ? -1 : 4 * v86;
        *(_QWORD *)(*(_QWORD *)&this[27] + 8 * v84) = operator new[](v88, v85);
        v89 = *(void **)(*(_QWORD *)&this[27] + 8 * v84);
        if (!v89)
          return 4;
        bzero(v89, v87);
        if (++v84 >= this[12].i32[1])
        {
          LODWORD(v40) = this[18].i32[0];
          LODWORD(v41) = this[12].i32[1];
          break;
        }
      }
    }
    v90 = v40 + 1;
    v91 = (int)v40 < -1 ? -1 : 16 * v90;
    v92 = (char *)operator new[](v91, MEMORY[0x1E0DE4E10]);
    this[30] = (int32x2_t)v92;
    if (!v92)
      return 4;
    v126 = v90;
    if ((v40 & 0x80000000) == 0)
    {
      v93 = this[13].i32[1];
      if ((int)v93 < 0)
        v94 = -1;
      else
        v94 = 4 * v93;
      v95 = (uint64_t)(int)(v93 + ((int)v93 < 0)) >> 1;
      v96 = v126;
      v97 = v92 + 8;
      do
      {
        v98 = (char *)operator new[](v94, MEMORY[0x1E0DE4E10]);
        *(v97 - 1) = v98;
        if (!v98)
          return 4;
        *v97 = &v98[4 * v95];
        v97 += 2;
      }
      while (--v96);
    }
    v99 = (int)v41 < 0 ? -1 : 16 * (int)v41;
    v100 = (char *)operator new[](v99, MEMORY[0x1E0DE4E10]);
    this[29] = (int32x2_t)v100;
    if (!v100)
      return 4;
    v101 = this[13].i32[1];
    if ((int)v41 > 0)
    {
      v124 = 4 * v101;
      v125 = this[13].i32[1];
      if (v101 < 0)
        v102 = -1;
      else
        v102 = 4 * v101;
      if (v101 >= 0)
        v103 = this[13].i32[1];
      else
        v103 = v101 + 1;
      v104 = (uint64_t)v103 >> 1;
      v105 = v41;
      v106 = v100 + 8;
      while (1)
      {
        v107 = (char *)operator new[](v102, MEMORY[0x1E0DE4E10]);
        *(v106 - 1) = v107;
        if (!v107)
          return 4;
        *v106 = &v107[4 * v104];
        v106 += 2;
        if (!--v105)
        {
          v108 = v124;
          v101 = v125;
          goto LABEL_184;
        }
      }
    }
    v108 = 4 * v101;
LABEL_184:
    if (v101 < 0)
      v109 = -1;
    else
      v109 = v108;
    v110 = operator new[](v109, MEMORY[0x1E0DE4E10]);
    this[33] = (int32x2_t)v110;
    if (!v110)
      return 4;
    bzero(v110, v108);
    v111 = (int)v40 < -1 ? -1 : 8 * v126;
    v112 = operator new[](v111, MEMORY[0x1E0DE4E10]);
    this[23] = (int32x2_t)v112;
    if (!v112)
      return 4;
    v113 = 8 * (int)v40 + 8;
    bzero(v112, v113);
    v114 = operator new[](v111, MEMORY[0x1E0DE4E10]);
    this[24] = (int32x2_t)v114;
    if (!v114)
      return 4;
    bzero(v114, v113);
    if ((v40 & 0x80000000) == 0)
    {
      v115 = 0;
      do
      {
        *(_QWORD *)(*(_QWORD *)&this[23] + v115) = 0;
        *(_QWORD *)(*(_QWORD *)&this[24] + v115) = 0;
        v115 += 8;
      }
      while (8 * v126 != v115);
    }
    v116 = operator new[](v111, MEMORY[0x1E0DE4E10]);
    this[25] = (int32x2_t)v116;
    if (!v116)
      return 4;
    bzero(v116, v113);
    if ((v40 & 0x80000000) == 0)
    {
      v117 = 0;
      v118 = (const std::nothrow_t *)MEMORY[0x1E0DE4E10];
      while (1)
      {
        v119 = this[13].i32[1];
        v120 = 4 * v119;
        v121 = (int)v119 < 0 ? -1 : 4 * v119;
        *(_QWORD *)(*(_QWORD *)&this[25] + 8 * v117) = operator new[](v121, v118);
        v122 = *(void **)(*(_QWORD *)&this[25] + 8 * v117);
        if (!v122)
          return 4;
        bzero(v122, v120);
        v40 = this[18].i32[0];
        if (v117++ >= v40)
        {
          LODWORD(v41) = this[12].i32[1];
          v39 = this[13].i32[1];
          goto LABEL_88;
        }
      }
    }
    v39 = v101;
  }
LABEL_88:
  if (LPFilterBank::Initialize((LPFilterBank *)&this[189], (int)v40 + 1, v41, v39, this[14].i32[1], this[16].i32[0]))return 4;
  if (Beamformer_BeamNF::CmhBEAM2NOpt::initialize((Beamformer_BeamNF::CmhBEAM2NOpt *)&this[34], this[13].i32[0], this[13].i32[1], this[14].i32[1], this[18].i32[1], this[12].i32[1]))return 4;
  v42 = this[12].i32[1];
  Cns::deallocate_memory((uint64_t)&this[147]);
  this[150].i32[1] = v42;
  if (Cns::init((Cns *)&this[147]))
    return 4;
  v43 = this[14].i32[1];
  Cns::deallocate_memory((uint64_t)&this[147]);
  this[149].i32[1] = v43;
  if (Cns::init((Cns *)&this[147]))
    return 4;
  v44 = (float)this[13].i32[0];
  Cns::deallocate_memory((uint64_t)&this[147]);
  *(float *)this[149].i32 = v44;
  if (Cns::init((Cns *)&this[147]))
    return 4;
  v45 = this[13].i32[1];
  Cns::deallocate_memory((uint64_t)&this[147]);
  this[150].i32[0] = v45;
  if (Cns::init((Cns *)&this[147]))
    return 4;
  v46 = 628.318531 / (float)this[13].i32[0];
  v47 = (float)(1.0 - v46) + (float)(v46 * v46) * 0.5;
  v48 = v47 <= -0.9999;
  v49 = v47 < 0.9999 || v47 <= -0.9999;
  if (v47 >= 0.9999)
    v48 = 1;
  v50 = 0.9999;
  if (v49)
    v50 = -0.9999;
  v51 = v47;
  if (v48)
    v51 = v50;
  *(float *)this[21].i32 = v51;
  *(float *)&this[21].i32[1] = (float)(v51 + 1.0) * 0.5;
  this[19] = 0;
  this[20] = 0;
  *this = (int32x2_t)2;
  this[1].i32[0] = a4;
  this[1].i32[1] = a2;
  this[2].i32[0] = 256;
  this[2].i32[1] = a3;
  this[3].i32[0] = 0;
  v52 = operator new[](0x10uLL, MEMORY[0x1E0DE4E10]);
  this[4] = (int32x2_t)v52;
  if (v52)
  {
    v53 = a4 < 0 ? -1 : 8 * a4;
    v54 = operator new[](v53, MEMORY[0x1E0DE4E10]);
    this[5] = (int32x2_t)v54;
    if (v54)
    {
      v55 = operator new[](0x800uLL, MEMORY[0x1E0DE4E10]);
      this[10] = (int32x2_t)v55;
      if (v55)
      {
        v56 = operator new[](0x10uLL, MEMORY[0x1E0DE4E10]);
        this[7] = (int32x2_t)v56;
        if (v56)
        {
          *v56 = 0;
          v56[1] = 0;
          v57 = operator new[](v53, MEMORY[0x1E0DE4E10]);
          this[8] = (int32x2_t)v57;
          if (v57)
          {
            bzero(v57, 8 * a4);
            if (!this[15].i32[1])
            {
LABEL_126:
              result = 0;
              this[3].i32[1] = 0;
              return result;
            }
            v58 = 0;
            v59 = this[14].i32[1];
            if ((int)v59 < 0)
              v60 = -1;
            else
              v60 = 4 * v59;
            v61 = 4 * (int)v59;
            v62 = (const std::nothrow_t *)MEMORY[0x1E0DE4E10];
            while (1)
            {
              *(_QWORD *)(*(_QWORD *)&this[7] + 8 * v58) = operator new[](v60, v62);
              v63 = *(void **)(*(_QWORD *)&this[7] + 8 * v58);
              if (!v63)
                break;
              bzero(v63, v61);
              if (++v58 >= this->i32[0])
              {
                if (this[1].i32[0] < 1)
                {
LABEL_122:
                  if (this->i32[1] < 1)
                    goto LABEL_126;
                  v67 = 0;
                  v68 = (const std::nothrow_t *)MEMORY[0x1E0DE4E10];
                  while (1)
                  {
                    *(_QWORD *)(*(_QWORD *)&this[9] + 8 * v67) = operator new[](v60, v68);
                    v69 = *(void **)(*(_QWORD *)&this[9] + 8 * v67);
                    if (!v69)
                      break;
                    bzero(v69, v61);
                    if (++v67 >= this->i32[1])
                      goto LABEL_126;
                  }
                }
                else
                {
                  v64 = 0;
                  v65 = (const std::nothrow_t *)MEMORY[0x1E0DE4E10];
                  while (1)
                  {
                    *(_QWORD *)(*(_QWORD *)&this[8] + 8 * v64) = operator new[](v60, v65);
                    v66 = *(void **)(*(_QWORD *)&this[8] + 8 * v64);
                    if (!v66)
                      break;
                    bzero(v66, v61);
                    if (++v64 >= this[1].i32[0])
                      goto LABEL_122;
                  }
                }
                return 4294967294;
              }
            }
          }
        }
      }
    }
  }
  return 4294967294;
}

float Beamformer_BeamNF::CmhBEAM::setParameter(Beamformer_BeamNF::CmhBEAM *this, int a2, CmhBEAM2NOpt *a3, double a4, double a5)
{
  float v5;
  uint64_t v6;
  float v7;
  uint64_t v8;
  uint64_t v9;
  _DWORD *v10;
  float v11;
  uint64_t v12;
  uint64_t v13;
  Beamformer_BeamNF::CmhBEAM2NOpt *v14;
  int v15;
  CmhMicCheck *v16;
  float v17;
  uint64_t v18;
  int v19;
  float v20;
  int v21;
  int v22;
  int v23;
  float v24;
  uint64_t v25;
  CmhMicCheck *v26;
  float v27;
  int v28;
  float v29;
  float v31;

  switch(a2)
  {
    case 3:
      *(_DWORD *)(*((_QWORD *)this + 141) + 44) = *(_DWORD *)a3;
      return *(float *)&a4;
    case 4:
      v5 = *(float *)a3;
      *((_DWORD *)this + 133) = *(_DWORD *)a3;
      goto LABEL_97;
    case 5:
      *((_DWORD *)this + 162) = *(_DWORD *)a3;
      return *(float *)&a4;
    case 6:
      if (*((_DWORD *)this + 295) + *((_DWORD *)this + 301) >= 1)
      {
        v6 = 0;
        v7 = *(float *)a3;
        v8 = *((_QWORD *)this + 148);
        do
          *(float *)(v8 + 4 * v6++) = v7;
        while (v6 < *((int *)this + 295) + (uint64_t)*((int *)this + 301));
      }
      return *(float *)&a4;
    case 7:
      Cns::setMinGain((uint64_t)this + 1176, *(float *)a3);
      return *(float *)&a4;
    case 11:
      CmhBEAM2NOpt::setSpatialFilterReal((uint64_t)this + 272, (float *)a3);
      return *(float *)&a4;
    case 12:
      CmhBEAM2NOpt::setSpatialFilterImag((uint64_t)this + 272, (float *)a3);
      return *(float *)&a4;
    case 15:
      CmhBEAM2NOpt::setModelSpatialFilterReal((Beamformer_BeamNF::CmhBEAM *)((char *)this + 272), a3, 0);
      return *(float *)&a4;
    case 16:
      Beamformer_BeamNF::CmhBEAM2NOpt::setModelSpatialFilterImag((Beamformer_BeamNF::CmhBEAM *)((char *)this + 272), a3, 0);
      return *(float *)&a4;
    case 17:
      CmhBEAM2NOpt::setModelSpatialFilterReal((Beamformer_BeamNF::CmhBEAM *)((char *)this + 272), a3, 1u);
      return *(float *)&a4;
    case 18:
      Beamformer_BeamNF::CmhBEAM2NOpt::setModelSpatialFilterImag((Beamformer_BeamNF::CmhBEAM *)((char *)this + 272), a3, 1u);
      return *(float *)&a4;
    case 19:
      *(float *)&a4 = CmhBEAMprocOpt::setModelFreqCompVector((Beamformer_BeamNF::CmhBEAM *)((char *)this + 88), a3);
      return *(float *)&a4;
    case 20:
      CmhBEAM2NOpt::setModelOmniEQVector((Beamformer_BeamNF::CmhBEAM *)((char *)this + 272), a3);
      return *(float *)&a4;
    case 21:
      *(float *)&a4 = CmhBEAM2NOpt::setModelFreqCompVector((Beamformer_BeamNF::CmhBEAM *)((char *)this + 272), a3, 0);
      return *(float *)&a4;
    case 22:
      CmhBEAM2NOpt::setModelOmniEQVector((Beamformer_BeamNF::CmhBEAM *)((char *)this + 272), a3, 0);
      return *(float *)&a4;
    case 23:
      *(float *)&a4 = CmhBEAM2NOpt::setModelFreqCompVector((Beamformer_BeamNF::CmhBEAM *)((char *)this + 272), a3, 1u);
      return *(float *)&a4;
    case 24:
      CmhBEAM2NOpt::setModelOmniEQVector((Beamformer_BeamNF::CmhBEAM *)((char *)this + 272), a3, 1u);
      return *(float *)&a4;
    case 34:
      v9 = *((unsigned int *)this + 70);
      if ((int)v9 >= 1)
      {
        LODWORD(a4) = *(_DWORD *)a3;
        v10 = (_DWORD *)(*((_QWORD *)this + 89) + 64);
        do
        {
          *v10 = LODWORD(a4);
          v10 += 34;
          --v9;
        }
        while (v9);
      }
      return *(float *)&a4;
    case 35:
      CmhBEAMprocOpt::setWNG((Beamformer_BeamNF::CmhBEAM *)((char *)this + 88), *(float *)a3);
      return *(float *)&a4;
    case 36:
      CmhBEAMprocOpt::setModelFreqEQVector((Beamformer_BeamNF::CmhBEAM *)((char *)this + 88), a3);
      return *(float *)&a4;
    case 37:
      CmhBEAM2NOpt::setModelFreqEQVector((Beamformer_BeamNF::CmhBEAM *)((char *)this + 272), a3, 0);
      return *(float *)&a4;
    case 38:
      CmhBEAM2NOpt::setModelFreqEQVector((Beamformer_BeamNF::CmhBEAM *)((char *)this + 272), a3, 1u);
      return *(float *)&a4;
    case 39:
      v11 = *(float *)a3;
      v12 = *((_QWORD *)this + 89);
      *(_DWORD *)(v12 + 108) = *(_DWORD *)a3;
      if (*((int *)this + 70) >= 2)
        *(float *)(v12 + 244) = v11;
      return *(float *)&a4;
    case 42:
      LODWORD(a4) = *(_DWORD *)a3;
      v13 = *((_QWORD *)this + 89);
      *(_DWORD *)(v13 + 112) = *(_DWORD *)a3;
      if (*((int *)this + 70) >= 2)
        *(_DWORD *)(v13 + 248) = LODWORD(a4);
      return *(float *)&a4;
    case 43:
      *((_DWORD *)this + 139) = *(_DWORD *)a3;
      return *(float *)&a4;
    case 44:
      LODWORD(a4) = *(_DWORD *)a3;
      *((_DWORD *)this + 140) = *(_DWORD *)a3;
      return *(float *)&a4;
    case 45:
      v29 = *(float *)a3;
      if (*(_DWORD *)a3 <= 1u)
        *((float *)this + 69) = v29;
      *((float *)this + 23) = v29;
      return *(float *)&a4;
    case 46:
      Beamformer_BeamNF::CmhBEAM2NOpt::setABFVector((uint64_t)this + 272, (float *)a3);
      return *(float *)&a4;
    case 47:
      v14 = (Beamformer_BeamNF::CmhBEAM *)((char *)this + 272);
      v15 = 0;
      goto LABEL_45;
    case 48:
      v14 = (Beamformer_BeamNF::CmhBEAM *)((char *)this + 272);
      v15 = 1;
LABEL_45:
      *(float *)&a4 = Beamformer_BeamNF::CmhBEAM2NOpt::setABFVector(v14, v15, (float *)a3);
      return *(float *)&a4;
    case 51:
      *((_DWORD *)this + 52) = *(_DWORD *)a3;
      return *(float *)&a4;
    case 65:
      LODWORD(a4) = *(_DWORD *)a3;
      *((_DWORD *)this + 100) = (int)*(float *)a3;
      return *(float *)&a4;
    case 66:
      *((_DWORD *)this + 128) = *(_DWORD *)a3;
      return *(float *)&a4;
    case 67:
      LODWORD(a4) = *(_DWORD *)a3;
      v16 = (Beamformer_BeamNF::CmhBEAM *)((char *)this + 768);
      *((_DWORD *)this + 201) = *(_DWORD *)a3;
      goto LABEL_104;
    case 68:
      *((_DWORD *)this + 133) = *(_DWORD *)a3;
      return *(float *)&a4;
    case 69:
      v5 = *(float *)a3;
LABEL_97:
      *((float *)this + 134) = v5;
      return *(float *)&a4;
    case 70:
      v17 = *(float *)a3;
      v18 = *((_QWORD *)this + 148);
      v19 = (*((_DWORD *)this + 301) + *((_DWORD *)this + 295) - 1) & ((*((_DWORD *)this + 301)
                                                                      + *((_DWORD *)this + 295)
                                                                      - 1) >> 31);
      goto LABEL_53;
    case 71:
      v17 = *(float *)a3;
      v18 = *((_QWORD *)this + 148);
      v19 = *((_DWORD *)this + 301) + *((_DWORD *)this + 295) - 1;
      if (v19 >= 1)
        v19 = 1;
LABEL_53:
      *(float *)(v18 + 4 * v19) = v17;
      return *(float *)&a4;
    case 72:
      Cns::setMinGain((uint64_t)this + 1176, *(float *)a3, 0);
      return *(float *)&a4;
    case 73:
      Cns::setMinGain((uint64_t)this + 1176, *(float *)a3, 1);
      return *(float *)&a4;
    case 74:
      v20 = *(float *)a3;
      v21 = *((_DWORD *)this + 70);
      if (v21 >= 1)
        v21 = 1;
      goto LABEL_61;
    case 75:
      v20 = *(float *)a3;
      v21 = *((_DWORD *)this + 70);
      if (v21 >= 2)
        v21 = 2;
LABEL_61:
      *(float *)(*((_QWORD *)this + 89) + 136 * v21 - 28) = v20;
      return *(float *)&a4;
    case 76:
      LODWORD(a4) = *(_DWORD *)a3;
      v22 = *((_DWORD *)this + 70);
      if (v22 >= 1)
        v22 = 1;
      goto LABEL_66;
    case 77:
      LODWORD(a4) = *(_DWORD *)a3;
      v22 = *((_DWORD *)this + 70);
      if (v22 >= 2)
        v22 = 2;
LABEL_66:
      *(_DWORD *)(*((_QWORD *)this + 89) + 136 * v22 - 24) = LODWORD(a4);
      return *(float *)&a4;
    case 78:
      *(float *)&a4 = (float)((float)*(int *)a3 / (float)*((int *)this + 71)) * (float)*((int *)this + 72);
      *((_DWORD *)this + 76) = *(_DWORD *)a3;
      v23 = *((_DWORD *)this + 74) - 1;
      if (v23 >= (int)*(float *)&a4)
        v23 = (int)*(float *)&a4;
      *((_DWORD *)this + 132) = v23;
      return *(float *)&a4;
    case 81:
      v24 = *(float *)a3;
      *((_DWORD *)this + 102) = *(_DWORD *)a3;
      v16 = (Beamformer_BeamNF::CmhBEAM *)((char *)this + 768);
      *((float *)this + 219) = v24;
      goto LABEL_104;
    case 82:
      v31 = *(float *)a3;
      *(float *)&a4 = v31;
      *(float *)&a4 = Beamformer_BeamNF::CmhBEAM2NOpt::setParameter((Beamformer_BeamNF::CmhBEAM *)((char *)this + 272), 59, (CmhBEAM2NOpt *)&v31, a4, a5);
      return *(float *)&a4;
    case 83:
      LODWORD(a4) = *(_DWORD *)a3;
      v16 = (Beamformer_BeamNF::CmhBEAM *)((char *)this + 768);
      *((_DWORD *)this + 202) = *(_DWORD *)a3;
      goto LABEL_104;
    case 84:
      LODWORD(a4) = *(_DWORD *)a3;
      v16 = (Beamformer_BeamNF::CmhBEAM *)((char *)this + 768);
      *((_DWORD *)this + 203) = *(_DWORD *)a3;
      goto LABEL_104;
    case 85:
      LODWORD(a4) = *(_DWORD *)a3;
      v16 = (Beamformer_BeamNF::CmhBEAM *)((char *)this + 768);
      *((_DWORD *)this + 204) = *(_DWORD *)a3;
      goto LABEL_104;
    case 86:
      LODWORD(a4) = *(_DWORD *)a3;
      v16 = (Beamformer_BeamNF::CmhBEAM *)((char *)this + 768);
      *((_DWORD *)this + 205) = *(_DWORD *)a3;
      goto LABEL_104;
    case 87:
      LODWORD(a4) = *(_DWORD *)a3;
      v16 = (Beamformer_BeamNF::CmhBEAM *)((char *)this + 768);
      *((_DWORD *)this + 206) = *(_DWORD *)a3;
      goto LABEL_104;
    case 88:
      LODWORD(a4) = *(_DWORD *)a3;
      v16 = (Beamformer_BeamNF::CmhBEAM *)((char *)this + 768);
      *((_DWORD *)this + 207) = *(_DWORD *)a3;
      goto LABEL_104;
    case 89:
      LODWORD(a4) = *(_DWORD *)a3;
      v16 = (Beamformer_BeamNF::CmhBEAM *)((char *)this + 768);
      *((_DWORD *)this + 208) = *(_DWORD *)a3;
      goto LABEL_104;
    case 90:
      LODWORD(a4) = *(_DWORD *)a3;
      v16 = (Beamformer_BeamNF::CmhBEAM *)((char *)this + 768);
      *((_DWORD *)this + 209) = *(_DWORD *)a3;
      goto LABEL_104;
    case 91:
      LODWORD(a4) = *(_DWORD *)a3;
      v16 = (Beamformer_BeamNF::CmhBEAM *)((char *)this + 768);
      *((_DWORD *)this + 210) = *(_DWORD *)a3;
      goto LABEL_104;
    case 92:
      LODWORD(a4) = *(_DWORD *)a3;
      v16 = (Beamformer_BeamNF::CmhBEAM *)((char *)this + 768);
      *((_DWORD *)this + 211) = *(_DWORD *)a3;
      goto LABEL_104;
    case 93:
      LODWORD(a4) = *(_DWORD *)a3;
      v16 = (Beamformer_BeamNF::CmhBEAM *)((char *)this + 768);
      *((_DWORD *)this + 212) = *(_DWORD *)a3;
      goto LABEL_104;
    case 94:
      LODWORD(a4) = *(_DWORD *)a3;
      v16 = (Beamformer_BeamNF::CmhBEAM *)((char *)this + 768);
      *((_DWORD *)this + 213) = *(_DWORD *)a3;
      goto LABEL_104;
    case 95:
      LODWORD(a4) = *(_DWORD *)a3;
      v16 = (Beamformer_BeamNF::CmhBEAM *)((char *)this + 768);
      *((_DWORD *)this + 214) = *(_DWORD *)a3;
      goto LABEL_104;
    case 96:
      LODWORD(a4) = *(_DWORD *)a3;
      v16 = (Beamformer_BeamNF::CmhBEAM *)((char *)this + 768);
      *((_DWORD *)this + 215) = *(_DWORD *)a3;
      goto LABEL_104;
    case 97:
      LODWORD(a4) = *(_DWORD *)a3;
      v16 = (Beamformer_BeamNF::CmhBEAM *)((char *)this + 768);
      *((_DWORD *)this + 216) = *(_DWORD *)a3;
      goto LABEL_104;
    case 98:
      LODWORD(a4) = *(_DWORD *)a3;
      v16 = (Beamformer_BeamNF::CmhBEAM *)((char *)this + 768);
      *((_DWORD *)this + 217) = *(_DWORD *)a3;
      goto LABEL_104;
    case 99:
      LODWORD(a4) = *(_DWORD *)a3;
      v16 = (Beamformer_BeamNF::CmhBEAM *)((char *)this + 768);
      *((_DWORD *)this + 218) = *(_DWORD *)a3;
LABEL_104:
      v26 = v16;
      goto LABEL_105;
    case 100:
      v25 = 0;
      do
      {
        LODWORD(a4) = *(_DWORD *)((char *)a3 + v25);
        *(_DWORD *)((char *)this + v25 + 804) = LODWORD(a4);
        v25 += 4;
      }
      while ((_DWORD)v25 != 76);
      v26 = (Beamformer_BeamNF::CmhBEAM *)((char *)this + 768);
LABEL_105:
      LODWORD(a4) = CmhMicCheck::init_check_mics(v26, a4, a5).u32[0];
      return *(float *)&a4;
    case 101:
      *((_DWORD *)this + 78) = *(_DWORD *)a3;
      goto LABEL_87;
    case 102:
LABEL_87:
      *((_DWORD *)this + 270) = *(_DWORD *)a3;
      break;
    case 103:
    case 106:
      LODWORD(a4) = *(_DWORD *)a3;
      *((_DWORD *)this + 163) = *(_DWORD *)a3;
      break;
    case 104:
      v27 = *(float *)a3;
      *((_DWORD *)this + 103) = *(_DWORD *)a3;
      v28 = (int)(float)((float)(v27 / (float)*((int *)this + 71)) * (float)*((int *)this + 72));
      if (*((_DWORD *)this + 74) - 1 < v28)
        v28 = *((_DWORD *)this + 74) - 1;
      *(float *)&a4 = (float)v28;
      *((float *)this + 164) = (float)v28;
      break;
    case 105:
      LODWORD(a4) = *(_DWORD *)a3;
      *((_DWORD *)this + 165) = *(_DWORD *)a3;
      break;
    case 107:
      *((_DWORD *)this + 104) = *(_DWORD *)a3;
      break;
    default:
      return *(float *)&a4;
  }
  return *(float *)&a4;
}

void AllPassComb::AllPassComb(AllPassComb *this, unsigned int a2, float a3)
{
  unint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  int v8;
  int v9;

  *(float *)this = a3;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *((_QWORD *)this + 7) = 0;
  if (a2)
  {
    v4 = a2;
    v9 = 0;
    std::vector<float>::resize((uint64_t)this + 8, a2, &v9);
    v8 = 0;
    std::vector<float>::resize((uint64_t)this + 32, v4, &v8);
    v6 = (void *)*((_QWORD *)this + 1);
    v5 = *((_QWORD *)this + 2);
    a3 = *(float *)this;
  }
  else
  {
    v6 = 0;
    v5 = 0;
  }
  v7 = v5 - (_QWORD)v6;
  *((_DWORD *)this + 15) = (float)(ceilf(-5.2983 / logf(a3))
                                               * (float)(unint64_t)((v5 - (uint64_t)v6) >> 2));
  if (v7 >= 1)
    bzero(v6, 4 * (((unint64_t)v7 >> 2) - ((unint64_t)v7 > 3)) + 4);
  *((_DWORD *)this + 14) = 0;
}

void sub_1B6442450(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void **v3;
  void *v5;
  void *v6;

  v5 = *v3;
  if (*v3)
  {
    *(_QWORD *)(v1 + 40) = v5;
    operator delete(v5);
  }
  v6 = *v2;
  if (*v2)
  {
    *(_QWORD *)(v1 + 16) = v6;
    operator delete(v6);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *AllPassComb::process(_QWORD *this, float *a2, float *a3, unsigned int a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v10;
  unint64_t v11;
  unsigned int v12;
  uint64_t v13;
  float v14;
  float v15;
  float v16;
  unint64_t v17;
  int v18;
  unint64_t v19;
  vDSP_Length v20;
  float __B;

  if (a4)
  {
    v4 = (uint64_t)this;
    v5 = this[1];
    v6 = this[2];
    if (v5 == v6)
      __assert_rtn("process", "AllPassComb.cpp", 47, "!mDelayBuf.empty()");
    v7 = a4;
    v10 = v6 - v5;
    if ((unint64_t)v10 > 0x1F)
    {
      if (v10 >> 2 != (uint64_t)(this[5] - this[4]) >> 2)
        __assert_rtn("process", "AllPassComb.cpp", 58, "mScratchBuf.size() == mDelayBuf.size()");
      v17 = *((unsigned int *)this + 14);
      if (v10 >> 2 <= v17)
        __assert_rtn("process", "AllPassComb.cpp", 59, "mCircularIndex < mDelayBuf.size()");
      v18 = 0;
      v19 = (unint64_t)v10 >> 2;
      __B = -*(float *)this;
      do
      {
        if ((int)v19 - (int)v17 >= v7)
          v20 = v7;
        else
          v20 = (v19 - v17);
        vDSP_vsma((const float *)(*(_QWORD *)(v4 + 8) + 4 * v17), 1, &__B, &a2[v18], 1, *(float **)(v4 + 32), 1, v20);
        vDSP_vsma(*(const float **)(v4 + 32), 1, (const float *)v4, (const float *)(*(_QWORD *)(v4 + 8) + 4 * *(unsigned int *)(v4 + 56)), 1, &a3[v18], 1, v20);
        this = memmove((void *)(*(_QWORD *)(v4 + 8) + 4 * *(unsigned int *)(v4 + 56)), *(const void **)(v4 + 32), 4 * v20);
        v18 += v20;
        LODWORD(v17) = *(_DWORD *)(v4 + 56) + v20;
        if (v17 >= v19)
          LODWORD(v17) = 0;
        *(_DWORD *)(v4 + 56) = v17;
        v7 -= v20;
      }
      while (v7);
    }
    else
    {
      v11 = (unint64_t)v10 >> 2;
      v12 = *((_DWORD *)this + 14);
      v13 = a4;
      do
      {
        v14 = *(float *)(v5 + 4 * v12);
        v15 = *a2++;
        v16 = v15 - (float)(*(float *)this * v14);
        *(float *)(v5 + 4 * v12) = v16;
        if (v12 + 1 < v11)
          ++v12;
        else
          v12 = 0;
        *a3++ = v14 + (float)(*(float *)this * v16);
        --v13;
      }
      while (v13);
      *((_DWORD *)this + 14) = v12;
    }
  }
  return this;
}

uint64_t LookUpTreeIsValid(NSArray *a1)
{
  NSArray *v1;
  NSArray *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  BOOL v6;
  int v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t i;
  _BOOL4 v13;
  NSArray *v14;
  int v15;
  int isKindOfClass;
  NSArray *v17;
  int v18;
  uint64_t IsValid;
  void *v21;
  NSArray *v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  _BYTE v27[128];
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = v1;
  if (v1)
  {
    v22 = v1;
    v3 = -[NSArray count](v1, "count");
    -[NSArray objectAtIndexedSubscript:](v2, "objectAtIndexedSubscript:", 0);
    v4 = objc_claimAutoreleasedReturnValue();
    v21 = (void *)v4;
    -[NSArray objectAtIndexedSubscript:](v2, "objectAtIndexedSubscript:", 1);
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    v6 = v3 != 3 || v4 == 0;
    v25 = 0u;
    v26 = 0u;
    v8 = !v6 && v5 != 0;
    v23 = 0uLL;
    v24 = 0uLL;
    v9 = v5;
    v10 = objc_msgSend(v9, "countByEnumeratingWithState:objects:count:", &v23, v27, 16);
    if (v10)
    {
      v11 = *(_QWORD *)v24;
      do
      {
        for (i = 0; i != v10; ++i)
        {
          if (*(_QWORD *)v24 != v11)
            objc_enumerationMutation(v9);
          v13 = *(_QWORD *)(*((_QWORD *)&v23 + 1) + 8 * i) != 0;
          objc_msgSend(v9, "objectForKey:");
          v14 = (NSArray *)objc_claimAutoreleasedReturnValue();
          objc_opt_class();
          if ((objc_opt_isKindOfClass() & 1) != 0)
          {
            v15 = v14 != 0;
          }
          else
          {
            objc_opt_class();
            isKindOfClass = objc_opt_isKindOfClass();
            v15 = isKindOfClass & LookUpTreeIsValid(v14);
          }

          v8 &= v13 & v15;
        }
        v10 = objc_msgSend(v9, "countByEnumeratingWithState:objects:count:", &v23, v27, 16);
      }
      while (v10);
    }

    -[NSArray objectAtIndexedSubscript:](v22, "objectAtIndexedSubscript:", 2);
    v17 = (NSArray *)objc_claimAutoreleasedReturnValue();
    objc_opt_class();
    v18 = objc_opt_isKindOfClass();
    if (v18 & 1 | ((v8 & 1) == 0))
    {
      IsValid = v18 & v8;
    }
    else
    {
      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) != 0)
        IsValid = LookUpTreeIsValid(v17);
      else
        IsValid = 0;
    }

    v2 = v22;
  }
  else
  {
    IsValid = 0;
  }

  return IsValid;
}

void sub_1B6442898(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

NSArray *LookUpTreeGet(NSDictionary *a1, NSArray *a2)
{
  NSDictionary *v3;
  NSArray *v4;
  void *v5;
  void *v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  int v13;
  NSArray *v14;
  NSArray *v15;
  NSArray *v16;
  NSArray *v17;
  void *v19;
  NSArray *v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  _BYTE v25[128];
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = a2;
  if ((-[NSArray isEqual:](v4, "isEqual:", 0) & 1) != 0 || -[NSArray count](v4, "count") != 3)
  {
    v15 = 0;
  }
  else
  {
    -[NSArray objectAtIndexedSubscript:](v4, "objectAtIndexedSubscript:", 0);
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    -[NSArray objectAtIndexedSubscript:](v4, "objectAtIndexedSubscript:", 1);
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    -[NSArray objectAtIndexedSubscript:](v4, "objectAtIndexedSubscript:", 2);
    v20 = (NSArray *)objc_claimAutoreleasedReturnValue();
    -[NSDictionary objectForKey:](v3, "objectForKey:", v5);
    v6 = (void *)objc_claimAutoreleasedReturnValue();

    if (v6)
    {
      v23 = 0u;
      v24 = 0u;
      v21 = 0u;
      v22 = 0u;
      v7 = v19;
      v8 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v21, v25, 16);
      if (v8)
      {
        v9 = *(_QWORD *)v22;
        while (2)
        {
          v10 = 0;
          do
          {
            if (*(_QWORD *)v22 != v9)
              objc_enumerationMutation(v7);
            v11 = *(_QWORD *)(*((_QWORD *)&v21 + 1) + 8 * v10);
            -[NSDictionary objectForKey:](v3, "objectForKey:", v5);
            v12 = (void *)objc_claimAutoreleasedReturnValue();
            v13 = objc_msgSend(v12, "isEqualToString:", v11);

            if (v13)
            {
              objc_msgSend(v7, "objectForKey:", v11);
              v16 = (NSArray *)objc_claimAutoreleasedReturnValue();
              objc_opt_class();
              if ((objc_opt_isKindOfClass() & 1) != 0)
              {
                v17 = v16;
              }
              else
              {
                LookUpTreeGet(v3, v16);
                v17 = (NSArray *)objc_claimAutoreleasedReturnValue();
              }
              v15 = v17;

              goto LABEL_22;
            }
            ++v10;
          }
          while (v8 != v10);
          v8 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v21, v25, 16);
          if (v8)
            continue;
          break;
        }
      }

    }
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) != 0)
    {
      v14 = v20;
    }
    else
    {
      LookUpTreeGet(v3, v20);
      v14 = (NSArray *)objc_claimAutoreleasedReturnValue();
    }
    v15 = v14;
LABEL_22:

  }
  return v15;
}

void sub_1B6442B68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10)
{
  void *v10;
  void *v11;
  void *v12;
  void *v13;

  _Unwind_Resume(a1);
}

BOOL applesauce::CF::details::has_key<__CFString const* const&>(CFDictionaryRef theDict, const void *a2)
{
  _BOOL8 result;

  result = 0;
  if (theDict)
  {
    if (a2)
      return CFDictionaryContainsKey(theDict, a2) != 0;
  }
  return result;
}

void applesauce::CF::details::find_at_key_or_optional<applesauce::CF::ArrayRef,__CFString const* const&>(_BYTE *a1, CFDictionaryRef theDict, const void *a3)
{
  const void *v4;
  const void *v5;
  CFTypeID v6;
  char v7;

  v4 = applesauce::CF::details::at_key<__CFString const* const&>(theDict, a3);
  if (!v4)
    goto LABEL_5;
  v5 = v4;
  CFRetain(v4);
  v6 = CFGetTypeID(v5);
  if (v6 != CFArrayGetTypeID())
  {
    CFRelease(v5);
LABEL_5:
    v7 = 0;
    *a1 = 0;
    goto LABEL_6;
  }
  *(_QWORD *)a1 = v5;
  v7 = 1;
LABEL_6:
  a1[8] = v7;
}

const __CFNumber *AUSM::RoomCongruence::isArrayOf<float>(const __CFArray *a1)
{
  const __CFNumber *result;
  std::runtime_error *exception;

  if (!a1)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    applesauce::CF::construct_error(exception);
  }
  result = (const __CFNumber *)CFArrayGetCount(a1);
  if (result)
  {
    result = (const __CFNumber *)CFArrayGetValueAtIndex(a1, 0);
    if (result)
      return (const __CFNumber *)((applesauce::CF::convert_as<float,0>(result) & 0xFF00000000) != 0);
  }
  return result;
}

void sub_1B6442D0C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

const __CFNumber *applesauce::CF::DictionaryRef_proxy::at_as<float,__CFString const* const&>(const __CFDictionary *a1, const void *a2)
{
  const __CFNumber *result;

  result = (const __CFNumber *)applesauce::CF::details::at_key<__CFString const* const&>(a1, a2);
  if (result)
    return (const __CFNumber *)applesauce::CF::convert_as<float,0>(result);
  return result;
}

BOOL AUSM::RoomCongruence::isTuningParametersDictionaryStructurallyValid(CFDictionaryRef *a1)
{
  const __CFDictionary *v2;
  CFDictionaryRef *v3;
  CFDictionaryRef *v4;
  CFDictionaryRef *v5;
  CFDictionaryRef *v6;
  CFDictionaryRef *v7;
  const __CFDictionary **v8;
  const __CFDictionary **v9;
  const __CFDictionary **v10;
  const __CFDictionary **v11;
  const __CFDictionary **v12;
  const __CFDictionary **v13;
  const __CFDictionary **v14;
  const __CFDictionary **v15;
  NSObject *v16;
  _BOOL8 result;
  const char *v18;
  const __CFDictionary **v19;
  const __CFDictionary **v20;
  const __CFDictionary **v21;
  std::runtime_error *exception;
  int v23;
  const char *v24;
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  v2 = *a1;
  if (v2)
  {
    if (applesauce::CF::details::has_key<__CFString const* const&>(v2, CFSTR("k")))
    {
      if (!*a1)
        goto LABEL_118;
      if (!applesauce::CF::details::has_key<__CFString const* const&>(*a1, CFSTR("exp")))
      {
        if (getAUSMV2Log(void)::onceToken != -1)
          dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_5474);
        v16 = getAUSMV2Log(void)::gLog;
        result = os_log_type_enabled((os_log_t)getAUSMV2Log(void)::gLog, OS_LOG_TYPE_ERROR);
        if (result)
        {
          v23 = 136315138;
          v24 = "isTuningParametersDictionaryStructurallyValid";
          v18 = "[Room Congruence] %s: Tuning Parameters invalid - missing exp.";
          goto LABEL_116;
        }
        return result;
      }
      if (!*a1)
        goto LABEL_118;
      if (!applesauce::CF::details::has_key<__CFString const* const&>(*a1, CFSTR("lowerVolumeLimit")))
      {
        if (getAUSMV2Log(void)::onceToken != -1)
          dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_5474);
        v16 = getAUSMV2Log(void)::gLog;
        result = os_log_type_enabled((os_log_t)getAUSMV2Log(void)::gLog, OS_LOG_TYPE_ERROR);
        if (result)
        {
          v23 = 136315138;
          v24 = "isTuningParametersDictionaryStructurallyValid";
          v18 = "[Room Congruence] %s: Tuning Parameters invalid - missing lower volume limit.";
          goto LABEL_116;
        }
        return result;
      }
      if (!*a1)
        goto LABEL_118;
      if (!applesauce::CF::details::has_key<__CFString const* const&>(*a1, CFSTR("upperVolumeLimit")))
      {
        if (getAUSMV2Log(void)::onceToken != -1)
          dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_5474);
        v16 = getAUSMV2Log(void)::gLog;
        result = os_log_type_enabled((os_log_t)getAUSMV2Log(void)::gLog, OS_LOG_TYPE_ERROR);
        if (result)
        {
          v23 = 136315138;
          v24 = "isTuningParametersDictionaryStructurallyValid";
          v18 = "[Room Congruence] %s: Tuning Parameters invalid - missing upper volume limit.";
          goto LABEL_116;
        }
        return result;
      }
      if (!*a1)
      {
LABEL_118:
        exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        applesauce::CF::construct_error(exception);
      }
      if (applesauce::CF::details::has_key<__CFString const* const&>(*a1, CFSTR("alpha")))
      {
        v3 = (CFDictionaryRef *)applesauce::CF::DictionaryRef::operator->(a1);
        if (applesauce::CF::details::has_key<__CFString const* const&>(*v3, CFSTR("beta")))
        {
          v4 = (CFDictionaryRef *)applesauce::CF::DictionaryRef::operator->(a1);
          if (applesauce::CF::details::has_key<__CFString const* const&>(*v4, CFSTR("lowerReverbLevelLimit")))
          {
            v5 = (CFDictionaryRef *)applesauce::CF::DictionaryRef::operator->(a1);
            if (applesauce::CF::details::has_key<__CFString const* const&>(*v5, CFSTR("isWarpingEnabled")))
            {
              v6 = (CFDictionaryRef *)applesauce::CF::DictionaryRef::operator->(a1);
              if (applesauce::CF::details::has_key<__CFString const* const&>(*v6, CFSTR("useSpectralMatching")))
              {
                v7 = (CFDictionaryRef *)applesauce::CF::DictionaryRef::operator->(a1);
                if (applesauce::CF::details::has_key<__CFString const* const&>(*v7, CFSTR("isRoomCongruenceEnabled")))
                {
                  v8 = (const __CFDictionary **)applesauce::CF::DictionaryRef::operator->(a1);
                  if (((unint64_t)applesauce::CF::DictionaryRef_proxy::at_as<float,__CFString const* const&>(*v8, CFSTR("k")) & 0xFF00000000) != 0)
                  {
                    v9 = (const __CFDictionary **)applesauce::CF::DictionaryRef::operator->(a1);
                    if (((unint64_t)applesauce::CF::DictionaryRef_proxy::at_as<float,__CFString const* const&>(*v9, CFSTR("exp")) & 0xFF00000000) != 0)
                    {
                      v10 = (const __CFDictionary **)applesauce::CF::DictionaryRef::operator->(a1);
                      if (((unint64_t)applesauce::CF::DictionaryRef_proxy::at_as<float,__CFString const* const&>(*v10, CFSTR("lowerVolumeLimit")) & 0xFF00000000) != 0)
                      {
                        v11 = (const __CFDictionary **)applesauce::CF::DictionaryRef::operator->(a1);
                        if (((unint64_t)applesauce::CF::DictionaryRef_proxy::at_as<float,__CFString const* const&>(*v11, CFSTR("upperVolumeLimit")) & 0xFF00000000) != 0)
                        {
                          v12 = (const __CFDictionary **)applesauce::CF::DictionaryRef::operator->(a1);
                          if (((unint64_t)applesauce::CF::DictionaryRef_proxy::at_as<float,__CFString const* const&>(*v12, CFSTR("alpha")) & 0xFF00000000) != 0)
                          {
                            v13 = (const __CFDictionary **)applesauce::CF::DictionaryRef::operator->(a1);
                            if (((unint64_t)applesauce::CF::DictionaryRef_proxy::at_as<float,__CFString const* const&>(*v13, CFSTR("beta")) & 0xFF00000000) != 0)
                            {
                              v14 = (const __CFDictionary **)applesauce::CF::DictionaryRef::operator->(a1);
                              if (((unint64_t)applesauce::CF::DictionaryRef_proxy::at_as<float,__CFString const* const&>(*v14, CFSTR("lowerReverbLevelLimit")) & 0xFF00000000) != 0)
                              {
                                v15 = (const __CFDictionary **)applesauce::CF::DictionaryRef::operator->(a1);
                                if ((unsigned __int16)applesauce::CF::details::find_at_key_or_optional<BOOL,__CFString const* const&>(*v15, CFSTR("isWarpingEnabled")) > 0xFFu)
                                {
                                  v19 = (const __CFDictionary **)applesauce::CF::DictionaryRef::operator->(a1);
                                  if ((unsigned __int16)applesauce::CF::details::find_at_key_or_optional<BOOL,__CFString const* const&>(*v19, CFSTR("useSpectralMatching")) > 0xFFu)
                                  {
                                    v20 = (const __CFDictionary **)applesauce::CF::DictionaryRef::operator->(a1);
                                    if ((unsigned __int16)applesauce::CF::details::find_at_key_or_optional<BOOL,__CFString const* const&>(*v20, CFSTR("useSpectralMatching")) > 0xFFu)
                                    {
                                      v21 = (const __CFDictionary **)applesauce::CF::DictionaryRef::operator->(a1);
                                      if (((unint64_t)applesauce::CF::DictionaryRef_proxy::at_as<int,__CFString const* const&>(*v21) & 0xFF00000000) != 0)
                                        return 1;
                                      if (getAUSMV2Log(void)::onceToken != -1)
                                        dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_5474);
                                      v16 = getAUSMV2Log(void)::gLog;
                                      result = os_log_type_enabled((os_log_t)getAUSMV2Log(void)::gLog, OS_LOG_TYPE_ERROR);
                                      if (result)
                                      {
                                        v23 = 136315138;
                                        v24 = "isTuningParametersDictionaryStructurallyValid";
                                        v18 = "[Room Congruence] %s: Tuning Parameters invalid - mismatch between queried"
                                              " and actual type of the library room IR index.";
                                        goto LABEL_116;
                                      }
                                    }
                                    else
                                    {
                                      if (getAUSMV2Log(void)::onceToken != -1)
                                        dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_5474);
                                      v16 = getAUSMV2Log(void)::gLog;
                                      result = os_log_type_enabled((os_log_t)getAUSMV2Log(void)::gLog, OS_LOG_TYPE_ERROR);
                                      if (result)
                                      {
                                        v23 = 136315138;
                                        v24 = "isTuningParametersDictionaryStructurallyValid";
                                        v18 = "[Room Congruence] %s: Tuning Parameters invalid - mismatch between queried"
                                              " and actual type of the room congruence enablement flag.";
                                        goto LABEL_116;
                                      }
                                    }
                                  }
                                  else
                                  {
                                    if (getAUSMV2Log(void)::onceToken != -1)
                                      dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_5474);
                                    v16 = getAUSMV2Log(void)::gLog;
                                    result = os_log_type_enabled((os_log_t)getAUSMV2Log(void)::gLog, OS_LOG_TYPE_ERROR);
                                    if (result)
                                    {
                                      v23 = 136315138;
                                      v24 = "isTuningParametersDictionaryStructurallyValid";
                                      v18 = "[Room Congruence] %s: Tuning Parameters invalid - mismatch between queried a"
                                            "nd actual type of the spectral matching flag.";
                                      goto LABEL_116;
                                    }
                                  }
                                }
                                else
                                {
                                  if (getAUSMV2Log(void)::onceToken != -1)
                                    dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_5474);
                                  v16 = getAUSMV2Log(void)::gLog;
                                  result = os_log_type_enabled((os_log_t)getAUSMV2Log(void)::gLog, OS_LOG_TYPE_ERROR);
                                  if (result)
                                  {
                                    v23 = 136315138;
                                    v24 = "isTuningParametersDictionaryStructurallyValid";
                                    v18 = "[Room Congruence] %s: Tuning Parameters invalid - mismatch between queried and"
                                          " actual type of the warping enablement flag.";
LABEL_116:
                                    _os_log_error_impl(&dword_1B5ED0000, v16, OS_LOG_TYPE_ERROR, v18, (uint8_t *)&v23, 0xCu);
                                    return 0;
                                  }
                                }
                              }
                              else
                              {
                                if (getAUSMV2Log(void)::onceToken != -1)
                                  dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_5474);
                                v16 = getAUSMV2Log(void)::gLog;
                                result = os_log_type_enabled((os_log_t)getAUSMV2Log(void)::gLog, OS_LOG_TYPE_ERROR);
                                if (result)
                                {
                                  v23 = 136315138;
                                  v24 = "isTuningParametersDictionaryStructurallyValid";
                                  v18 = "[Room Congruence] %s: Tuning Parameters invalid - mismatch between queried and a"
                                        "ctual type of lower reverb level limit.";
                                  goto LABEL_116;
                                }
                              }
                            }
                            else
                            {
                              if (getAUSMV2Log(void)::onceToken != -1)
                                dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_5474);
                              v16 = getAUSMV2Log(void)::gLog;
                              result = os_log_type_enabled((os_log_t)getAUSMV2Log(void)::gLog, OS_LOG_TYPE_ERROR);
                              if (result)
                              {
                                v23 = 136315138;
                                v24 = "isTuningParametersDictionaryStructurallyValid";
                                v18 = "[Room Congruence] %s: Tuning Parameters invalid - mismatch between queried and act"
                                      "ual type of beta.";
                                goto LABEL_116;
                              }
                            }
                          }
                          else
                          {
                            if (getAUSMV2Log(void)::onceToken != -1)
                              dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_5474);
                            v16 = getAUSMV2Log(void)::gLog;
                            result = os_log_type_enabled((os_log_t)getAUSMV2Log(void)::gLog, OS_LOG_TYPE_ERROR);
                            if (result)
                            {
                              v23 = 136315138;
                              v24 = "isTuningParametersDictionaryStructurallyValid";
                              v18 = "[Room Congruence] %s: Tuning Parameters invalid - mismatch between queried and actua"
                                    "l type of alpha.";
                              goto LABEL_116;
                            }
                          }
                        }
                        else
                        {
                          if (getAUSMV2Log(void)::onceToken != -1)
                            dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_5474);
                          v16 = getAUSMV2Log(void)::gLog;
                          result = os_log_type_enabled((os_log_t)getAUSMV2Log(void)::gLog, OS_LOG_TYPE_ERROR);
                          if (result)
                          {
                            v23 = 136315138;
                            v24 = "isTuningParametersDictionaryStructurallyValid";
                            v18 = "[Room Congruence] %s: Tuning Parameters invalid - mismatch between queried and actual "
                                  "type of the upper volume limit.";
                            goto LABEL_116;
                          }
                        }
                      }
                      else
                      {
                        if (getAUSMV2Log(void)::onceToken != -1)
                          dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_5474);
                        v16 = getAUSMV2Log(void)::gLog;
                        result = os_log_type_enabled((os_log_t)getAUSMV2Log(void)::gLog, OS_LOG_TYPE_ERROR);
                        if (result)
                        {
                          v23 = 136315138;
                          v24 = "isTuningParametersDictionaryStructurallyValid";
                          v18 = "[Room Congruence] %s: Tuning Parameters invalid - mismatch between queried and actual ty"
                                "pe of lower volume limit.";
                          goto LABEL_116;
                        }
                      }
                    }
                    else
                    {
                      if (getAUSMV2Log(void)::onceToken != -1)
                        dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_5474);
                      v16 = getAUSMV2Log(void)::gLog;
                      result = os_log_type_enabled((os_log_t)getAUSMV2Log(void)::gLog, OS_LOG_TYPE_ERROR);
                      if (result)
                      {
                        v23 = 136315138;
                        v24 = "isTuningParametersDictionaryStructurallyValid";
                        v18 = "[Room Congruence] %s: Tuning Parameters invalid - mismatch between queried and actual type of exp.";
                        goto LABEL_116;
                      }
                    }
                  }
                  else
                  {
                    if (getAUSMV2Log(void)::onceToken != -1)
                      dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_5474);
                    v16 = getAUSMV2Log(void)::gLog;
                    result = os_log_type_enabled((os_log_t)getAUSMV2Log(void)::gLog, OS_LOG_TYPE_ERROR);
                    if (result)
                    {
                      v23 = 136315138;
                      v24 = "isTuningParametersDictionaryStructurallyValid";
                      v18 = "[Room Congruence] %s: Tuning Parameters invalid - mismatch between queried and actual type of k.";
                      goto LABEL_116;
                    }
                  }
                }
                else
                {
                  if (getAUSMV2Log(void)::onceToken != -1)
                    dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_5474);
                  v16 = getAUSMV2Log(void)::gLog;
                  result = os_log_type_enabled((os_log_t)getAUSMV2Log(void)::gLog, OS_LOG_TYPE_ERROR);
                  if (result)
                  {
                    v23 = 136315138;
                    v24 = "isTuningParametersDictionaryStructurallyValid";
                    v18 = "[Room Congruence] %s: Tuning Parameters invalid - missing room congruence enablement data.";
                    goto LABEL_116;
                  }
                }
              }
              else
              {
                if (getAUSMV2Log(void)::onceToken != -1)
                  dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_5474);
                v16 = getAUSMV2Log(void)::gLog;
                result = os_log_type_enabled((os_log_t)getAUSMV2Log(void)::gLog, OS_LOG_TYPE_ERROR);
                if (result)
                {
                  v23 = 136315138;
                  v24 = "isTuningParametersDictionaryStructurallyValid";
                  v18 = "[Room Congruence] %s: Tuning Parameters invalid - missing spectral matching toggle data.";
                  goto LABEL_116;
                }
              }
            }
            else
            {
              if (getAUSMV2Log(void)::onceToken != -1)
                dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_5474);
              v16 = getAUSMV2Log(void)::gLog;
              result = os_log_type_enabled((os_log_t)getAUSMV2Log(void)::gLog, OS_LOG_TYPE_ERROR);
              if (result)
              {
                v23 = 136315138;
                v24 = "isTuningParametersDictionaryStructurallyValid";
                v18 = "[Room Congruence] %s: Tuning Parameters invalid - missing warping enablement data.";
                goto LABEL_116;
              }
            }
          }
          else
          {
            if (getAUSMV2Log(void)::onceToken != -1)
              dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_5474);
            v16 = getAUSMV2Log(void)::gLog;
            result = os_log_type_enabled((os_log_t)getAUSMV2Log(void)::gLog, OS_LOG_TYPE_ERROR);
            if (result)
            {
              v23 = 136315138;
              v24 = "isTuningParametersDictionaryStructurallyValid";
              v18 = "[Room Congruence] %s: Tuning Parameters invalid - missing lower reverb level limit.";
              goto LABEL_116;
            }
          }
        }
        else
        {
          if (getAUSMV2Log(void)::onceToken != -1)
            dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_5474);
          v16 = getAUSMV2Log(void)::gLog;
          result = os_log_type_enabled((os_log_t)getAUSMV2Log(void)::gLog, OS_LOG_TYPE_ERROR);
          if (result)
          {
            v23 = 136315138;
            v24 = "isTuningParametersDictionaryStructurallyValid";
            v18 = "[Room Congruence] %s: Tuning Parameters invalid - missing beta.";
            goto LABEL_116;
          }
        }
      }
      else
      {
        if (getAUSMV2Log(void)::onceToken != -1)
          dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_5474);
        v16 = getAUSMV2Log(void)::gLog;
        result = os_log_type_enabled((os_log_t)getAUSMV2Log(void)::gLog, OS_LOG_TYPE_ERROR);
        if (result)
        {
          v23 = 136315138;
          v24 = "isTuningParametersDictionaryStructurallyValid";
          v18 = "[Room Congruence] %s: Tuning Parameters invalid - missing alpha.";
          goto LABEL_116;
        }
      }
    }
    else
    {
      if (getAUSMV2Log(void)::onceToken != -1)
        dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_5474);
      v16 = getAUSMV2Log(void)::gLog;
      result = os_log_type_enabled((os_log_t)getAUSMV2Log(void)::gLog, OS_LOG_TYPE_ERROR);
      if (result)
      {
        v23 = 136315138;
        v24 = "isTuningParametersDictionaryStructurallyValid";
        v18 = "[Room Congruence] %s: Tuning Parameters invalid - missing  k.";
        goto LABEL_116;
      }
    }
  }
  else
  {
    if (getAUSMV2Log(void)::onceToken != -1)
      dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_5474);
    v16 = getAUSMV2Log(void)::gLog;
    result = os_log_type_enabled((os_log_t)getAUSMV2Log(void)::gLog, OS_LOG_TYPE_ERROR);
    if (result)
    {
      v23 = 136315138;
      v24 = "isTuningParametersDictionaryStructurallyValid";
      v18 = "[Room Congruence] %s: Tuning Parameters dictionary invalid - underlying CF object is nil.";
      goto LABEL_116;
    }
  }
  return result;
}

void sub_1B64439D8(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t applesauce::CF::details::find_at_key_or_optional<BOOL,__CFString const* const&>(const __CFDictionary *a1, const void *a2)
{
  const __CFBoolean *v2;
  int v3;

  v2 = (const __CFBoolean *)applesauce::CF::details::at_key<__CFString const* const&>(a1, a2);
  if (v2)
  {
    LOWORD(v2) = applesauce::CF::convert_as<BOOL,0>(v2);
    v3 = BYTE1(v2);
  }
  else
  {
    v3 = 0;
  }
  return v2 | (v3 << 8);
}

const __CFNumber *applesauce::CF::DictionaryRef_proxy::at_as<int,__CFString const* const&>(const __CFDictionary *a1)
{
  const __CFNumber *result;

  result = (const __CFNumber *)applesauce::CF::details::at_key<__CFString const* const&>(a1, CFSTR("libraryRoomIr"));
  if (result)
    return (const __CFNumber *)applesauce::CF::convert_as<int,0>(result);
  return result;
}

void AUSM::RoomCongruence::findIndicesOfCenterFreqsWithinRange(uint64_t **a1, float *a2, float *a3, float a4, float a5)
{
  float *i;
  float v7;
  float v8;
  unint64_t v9;
  float *v10;
  unint64_t v11;
  unint64_t v12;
  float *v13;
  float *v14;
  float v15;
  float *v16;
  unint64_t v17;
  float *v18;
  float *v19;
  float v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  char *v26;
  char *v27;
  uint64_t v28;
  uint64_t *v29;
  char *v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2 != a3)
  {
    for (i = a2 + 1; i != a3; ++i)
    {
      v8 = *(i - 1);
      v7 = *i;
      if (v7 < v8)
        return;
    }
    v9 = a3 - a2;
    v10 = a2;
    v11 = v9;
    do
    {
      v12 = v11 >> 1;
      v13 = &v10[v11 >> 1];
      v15 = *v13;
      v14 = v13 + 1;
      v11 += ~(v11 >> 1);
      if (v15 < a4)
        v10 = v14;
      else
        v11 = v12;
    }
    while (v11);
    if (v10 != a3)
    {
      v16 = a2;
      do
      {
        v17 = v9 >> 1;
        v18 = &v16[v9 >> 1];
        v20 = *v18;
        v19 = v18 + 1;
        v9 += ~(v9 >> 1);
        if (v20 > a5)
          v9 = v17;
        else
          v16 = v19;
      }
      while (v9);
      if (v16 - 1 != a3)
      {
        v21 = (char *)v10 - (char *)a2;
        v22 = v16 - 1 - a2;
        if (v22 >= v21 >> 2)
        {
          v23 = v21 >> 2;
          v24 = v22 - (v21 >> 2);
          v25 = v24 + 1;
          if (v24 == -1)
          {
            v26 = 0;
            v27 = 0;
          }
          else
          {
            if (v25 >> 61)
              std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
            v27 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<SlidingWindowDTFT<float> *>>(v25);
            v26 = &v27[8 * v28];
            *a1 = (uint64_t *)v27;
            a1[1] = (uint64_t *)v27;
            a1[2] = (uint64_t *)v26;
          }
          do
          {
            if (v27 >= v26)
            {
              v30 = (char *)*a1;
              v31 = (v27 - (char *)*a1) >> 3;
              v32 = v31 + 1;
              if ((unint64_t)(v31 + 1) >> 61)
                std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
              if ((v26 - v30) >> 2 > v32)
                v32 = (v26 - v30) >> 2;
              if ((unint64_t)(v26 - v30) >= 0x7FFFFFFFFFFFFFF8)
                v33 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v33 = v32;
              if (v33)
                v33 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<SlidingWindowDTFT<float> *>>(v33);
              else
                v34 = 0;
              v35 = (uint64_t *)(v33 + 8 * v31);
              *v35 = v23;
              v29 = v35 + 1;
              while (v27 != v30)
              {
                v36 = *((_QWORD *)v27 - 1);
                v27 -= 8;
                *--v35 = v36;
              }
              v26 = (char *)(v33 + 8 * v34);
              *a1 = v35;
              a1[1] = v29;
              a1[2] = (uint64_t *)v26;
              if (v30)
                operator delete(v30);
            }
            else
            {
              *(_QWORD *)v27 = v23;
              v29 = (uint64_t *)(v27 + 8);
            }
            a1[1] = v29;
            v27 = (char *)v29;
          }
          while (v23++ != v22);
        }
      }
    }
  }
}

void sub_1B6443C38(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v2;

  if (v2)
  {
    *(_QWORD *)(v1 + 8) = v2;
    operator delete(v2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t AUSM::RoomCongruence::computeIdealRt60(AUSM::RoomCongruence *this, float a2, float a3, float a4)
{
  NSObject *v5;
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  int v10;
  const char *v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  if (a2 <= 0.0)
  {
    if (getAUSMV2Log(void)::onceToken != -1)
      dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_5474);
    v5 = getAUSMV2Log(void)::gLog;
    if (!os_log_type_enabled((os_log_t)getAUSMV2Log(void)::gLog, OS_LOG_TYPE_ERROR))
      goto LABEL_18;
    v10 = 136315138;
    v11 = "computeIdealRt60";
    v6 = "[Room Congruence] %s: The input room volume must be greater than 0. Returning empty optional.";
    goto LABEL_22;
  }
  if (a3 <= 0.0)
  {
    if (getAUSMV2Log(void)::onceToken != -1)
      dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_5474);
    v5 = getAUSMV2Log(void)::gLog;
    if (!os_log_type_enabled((os_log_t)getAUSMV2Log(void)::gLog, OS_LOG_TYPE_ERROR))
      goto LABEL_18;
    v10 = 136315138;
    v11 = "computeIdealRt60";
    v6 = "[Room Congruence] %s: The input k parameter must be greater than 0. Returning empty optional.";
    goto LABEL_22;
  }
  if (a4 > 0.0 && a4 < 1.0)
  {
    v8 = COERCE_UNSIGNED_INT(powf(a2 / 100.0, a4) * a3);
    v7 = 0x100000000;
    return v8 | v7;
  }
  if (getAUSMV2Log(void)::onceToken != -1)
    dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_5474);
  v5 = getAUSMV2Log(void)::gLog;
  if (os_log_type_enabled((os_log_t)getAUSMV2Log(void)::gLog, OS_LOG_TYPE_ERROR))
  {
    v10 = 136315138;
    v11 = "computeIdealRt60";
    v6 = "[Room Congruence] %s: The input k parameter must be greater than 0 and smaller than 1. Returning empty optional.";
LABEL_22:
    _os_log_error_impl(&dword_1B5ED0000, v5, OS_LOG_TYPE_ERROR, v6, (uint8_t *)&v10, 0xCu);
  }
LABEL_18:
  v7 = 0;
  v8 = 0;
  return v8 | v7;
}

_QWORD *CADeprecated::CABufferList::New(CADeprecated::CABufferList *this, const char *a2, const CAStreamBasicDescription *a3)
{
  unsigned int v4;
  int v5;
  _QWORD *result;
  char *v7;

  if ((a2 & 0x20) != 0)
    v4 = a3;
  else
    v4 = 1;
  if ((a2 & 0x20) != 0)
    v5 = 1;
  else
    v5 = (int)a3;
  result = operator new(16 * v4 + 32);
  *result = this;
  result[1] = 0;
  *((_DWORD *)result + 4) = 0;
  *((_DWORD *)result + 6) = v4;
  if (v4)
  {
    v7 = (char *)(result + 4);
    do
    {
      *(_DWORD *)v7 = v5;
      *((_DWORD *)v7 + 1) = 0;
      *((_QWORD *)v7 + 1) = 0;
      v7 += 16;
      --v4;
    }
    while (v4);
  }
  return result;
}

void std::default_delete<CADeprecated::CABufferList>::operator()[abi:ne180100](_QWORD *__p)
{
  uint64_t v2;

  v2 = __p[1];
  if (v2)
    MEMORY[0x1BCC95CC8](v2, 0x1000C8077774924);
  operator delete(__p);
}

void VoiceProcessorV2::ReadDefaultsOverride(const __CFString *this, const __CFString *a2, BOOL *a3, BOOL *a4, unsigned __int8 *a5)
{
  int v7;
  int AppIntegerValue;
  BOOL v10;
  BOOL AppBooleanValue;
  double AppFloatValue;
  float v13;
  CFPropertyListRef v14;
  const void *v15;
  CFTypeID v16;
  BOOL v17;

  v7 = (int)a2;
  CFRetain(CFSTR("com.apple.coreaudio"));
  CFPreferencesAppSynchronize(CFSTR("com.apple.coreaudio"));
  v17 = 0;
  switch(v7)
  {
    case 0:
      CFRetain(CFSTR("com.apple.coreaudio"));
      AppBooleanValue = CACFPreferencesGetAppBooleanValue(this, CFSTR("com.apple.coreaudio"), &v17);
      v10 = v17;
      if (!a3 || !v17)
        goto LABEL_18;
      *a3 = AppBooleanValue;
      goto LABEL_17;
    case 1:
    case 3:
      CFRetain(CFSTR("com.apple.coreaudio"));
      AppIntegerValue = CACFPreferencesGetAppIntegerValue(this, CFSTR("com.apple.coreaudio"), &v17);
      v10 = v17;
      if (!a3 || !v17)
        goto LABEL_18;
      *(_DWORD *)a3 = AppIntegerValue;
      goto LABEL_17;
    case 2:
      CFRetain(CFSTR("com.apple.coreaudio"));
      AppFloatValue = CACFPreferencesGetAppFloatValue(this, CFSTR("com.apple.coreaudio"), &v17);
      v10 = v17;
      if (!a3 || !v17)
        goto LABEL_18;
      v13 = AppFloatValue;
      *(float *)a3 = v13;
      goto LABEL_17;
    case 4:
      CFRetain(CFSTR("com.apple.coreaudio"));
      v14 = CFPreferencesCopyAppValue(this, CFSTR("com.apple.coreaudio"));
      if (v14 && (v15 = v14, v16 = CFGetTypeID(v14), v16 == CFArrayGetTypeID()))
      {
        if (a3)
          *(_QWORD *)a3 = v15;
        else
          CFRelease(v15);
LABEL_17:
        v10 = 1;
      }
      else
      {
        v10 = 0;
      }
LABEL_18:
      if (a4)
        *a4 = v10;
      return;
    default:
      return;
  }
}

void VoiceProcessorV2::ReadAndApplyDefaultsOverride(VoiceProcessorV2 *this, const __CFString *a2, int a3, float *a4, unsigned __int8 *a5)
{
  char *v8;
  _QWORD *v9;
  NSObject *v10;
  CFStringEncoding v11;
  const char *v12;
  int v13;
  const char *v14;
  const char *v15;
  int *v16;
  uint64_t v17;
  CFStringEncoding v18;
  const char *v19;
  const char *v20;
  const char *v21;
  _QWORD *v22;
  NSObject *v23;
  CFStringEncoding SystemEncoding;
  const char *CStringPtr;
  double v26;
  int *v27;
  uint64_t v28;
  CFStringEncoding v29;
  const char *v30;
  _QWORD *v31;
  NSObject *v32;
  CFStringEncoding v33;
  const char *v34;
  int v35;
  int *v36;
  uint64_t v37;
  CFStringEncoding v38;
  const char *v39;
  float v40;
  BOOL v41;
  uint8_t buf[4];
  const char *v43;
  __int16 v44;
  int v45;
  __int16 v46;
  const char *v47;
  __int16 v48;
  _BYTE v49[10];
  double v50;
  uint64_t v51;

  v51 = *MEMORY[0x1E0C80C00];
  v41 = 0;
  if (a4)
  {
    v8 = (char *)this + 15897;
    switch(a3)
    {
      case 2:
        v40 = 0.0;
        VoiceProcessorV2::ReadDefaultsOverride(a2, (const __CFString *)2, (BOOL *)&v40, &v41, a5);
        if (v41)
        {
          if (VPLogScope(void)::once != -1)
            dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
          v22 = (_QWORD *)VPLogScope(void)::scope;
          if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(5, VPLogScope(void)::scope, 0))
          {
            v23 = (*v22 ? *v22 : MEMORY[0x1E0C81028]);
            if (os_log_type_enabled(v23, OS_LOG_TYPE_DEBUG))
            {
              SystemEncoding = CFStringGetSystemEncoding();
              CStringPtr = CFStringGetCStringPtr(a2, SystemEncoding);
              v26 = *a4;
              *(_DWORD *)buf = 136316162;
              v43 = "vpDebug_DefaultsOverride.cpp";
              v44 = 1024;
              v45 = 124;
              v46 = 2080;
              v47 = CStringPtr;
              v48 = 2048;
              *(double *)v49 = v26;
              *(_WORD *)&v49[8] = 2048;
              v50 = v40;
              _os_log_impl(&dword_1B5ED0000, v23, OS_LOG_TYPE_DEBUG, "%25s:%-5d  <vp> DEFAULTS OVERRIDE (%s): %f -> %f", buf, 0x30u);
            }
          }
          v27 = (int *)*((_QWORD *)this + 1570);
          if (v27 && (*v8 || v8[1]))
          {
            if (VPLogScope(void)::once != -1)
              dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
            v28 = VPLogScope(void)::scope;
            v29 = CFStringGetSystemEncoding();
            v30 = CFStringGetCStringPtr(a2, v29);
            CALegacyLog::log(v27, 5, v28, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/vpDebugFeatures/vpDebug_DefaultsOverride.cpp", 124, "ReadAndApplyDefaultsOverride", "DEFAULTS OVERRIDE (%s): %f -> %f", v30, *a4, v40);
          }
          *a4 = v40;
        }
        break;
      case 1:
        v40 = 0.0;
        VoiceProcessorV2::ReadDefaultsOverride(a2, (const __CFString *)1, (BOOL *)&v40, &v41, a5);
        if (v41)
        {
          if (VPLogScope(void)::once != -1)
            dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
          v31 = (_QWORD *)VPLogScope(void)::scope;
          if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(5, VPLogScope(void)::scope, 0))
          {
            v32 = (*v31 ? *v31 : MEMORY[0x1E0C81028]);
            if (os_log_type_enabled(v32, OS_LOG_TYPE_DEBUG))
            {
              v33 = CFStringGetSystemEncoding();
              v34 = CFStringGetCStringPtr(a2, v33);
              v35 = *(_DWORD *)a4;
              *(_DWORD *)buf = 136316162;
              v43 = "vpDebug_DefaultsOverride.cpp";
              v44 = 1024;
              v45 = 108;
              v46 = 2080;
              v47 = v34;
              v48 = 1024;
              *(_DWORD *)v49 = v35;
              *(_WORD *)&v49[4] = 1024;
              *(float *)&v49[6] = v40;
              _os_log_impl(&dword_1B5ED0000, v32, OS_LOG_TYPE_DEBUG, "%25s:%-5d  <vp> DEFAULTS OVERRIDE (%s): %d -> %d", buf, 0x28u);
            }
          }
          v36 = (int *)*((_QWORD *)this + 1570);
          if (v36 && (*v8 || v8[1]))
          {
            if (VPLogScope(void)::once != -1)
              dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
            v37 = VPLogScope(void)::scope;
            v38 = CFStringGetSystemEncoding();
            v39 = CFStringGetCStringPtr(a2, v38);
            CALegacyLog::log(v36, 5, v37, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/vpDebugFeatures/vpDebug_DefaultsOverride.cpp", 108, "ReadAndApplyDefaultsOverride", "DEFAULTS OVERRIDE (%s): %d -> %d", v39, *(_DWORD *)a4, LODWORD(v40));
          }
          *a4 = v40;
        }
        break;
      case 0:
        LOBYTE(v40) = 0;
        VoiceProcessorV2::ReadDefaultsOverride(a2, 0, (BOOL *)&v40, &v41, a5);
        if (v41)
        {
          if (VPLogScope(void)::once != -1)
            dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
          v9 = (_QWORD *)VPLogScope(void)::scope;
          if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(5, VPLogScope(void)::scope, 0))
          {
            v10 = (*v9 ? *v9 : MEMORY[0x1E0C81028]);
            if (os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG))
            {
              v11 = CFStringGetSystemEncoding();
              v12 = CFStringGetCStringPtr(a2, v11);
              v13 = *(unsigned __int8 *)a4;
              v14 = "TRUE";
              v43 = "vpDebug_DefaultsOverride.cpp";
              v44 = 1024;
              if (v13)
                v15 = "TRUE";
              else
                v15 = "FALSE";
              *(_DWORD *)buf = 136316162;
              v45 = 100;
              if (!LOBYTE(v40))
                v14 = "FALSE";
              v46 = 2080;
              v47 = v12;
              v48 = 2080;
              *(_QWORD *)v49 = v15;
              *(_WORD *)&v49[8] = 2080;
              v50 = *(double *)&v14;
              _os_log_impl(&dword_1B5ED0000, v10, OS_LOG_TYPE_DEBUG, "%25s:%-5d  <vp> DEFAULTS OVERRIDE (%s): %s -> %s", buf, 0x30u);
            }
          }
          v16 = (int *)*((_QWORD *)this + 1570);
          if (v16 && (*v8 || v8[1]))
          {
            if (VPLogScope(void)::once != -1)
              dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
            v17 = VPLogScope(void)::scope;
            v18 = CFStringGetSystemEncoding();
            v19 = CFStringGetCStringPtr(a2, v18);
            v20 = "TRUE";
            if (*(_BYTE *)a4)
              v21 = "TRUE";
            else
              v21 = "FALSE";
            if (!LOBYTE(v40))
              v20 = "FALSE";
            CALegacyLog::log(v16, 5, v17, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/vpDebugFeatures/vpDebug_DefaultsOverride.cpp", 100, "ReadAndApplyDefaultsOverride", "DEFAULTS OVERRIDE (%s): %s -> %s", v19, v21, v20);
          }
          *(_BYTE *)a4 = LOBYTE(v40);
        }
        break;
    }
  }
}

void AUThermalSpeakerProtection::~AUThermalSpeakerProtection(AUThermalSpeakerProtection *this)
{
  AUDspLib::~AUDspLib(this);
  JUMPOUT(0x1BCC95CECLL);
}

uint64_t AUThermalSpeakerProtection::Reset(AUThermalSpeakerProtection *this)
{
  return 0;
}

uint64_t AUThermalSpeakerProtection::Version(AUThermalSpeakerProtection *this)
{
  return 131841;
}

DspLib::ThermalSpeakerProtection::Algorithm *AUThermalSpeakerProtection::newDspLibAlgorithm(AUThermalSpeakerProtection *this)
{
  DspLib::ThermalSpeakerProtection::Algorithm *v1;

  v1 = (DspLib::ThermalSpeakerProtection::Algorithm *)operator new();
  DspLib::ThermalSpeakerProtection::Algorithm::Algorithm(v1);
  return v1;
}

void sub_1B64446C0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1BCC95CEC](v1, 0x10E1C406CCD1239);
  _Unwind_Resume(a1);
}

void VoiceProcessorV7::~VoiceProcessorV7(VoiceProcessorV7 *this)
{
  VoiceProcessorV7::~VoiceProcessorV7(this);
  JUMPOUT(0x1BCC95CECLL);
}

{
  *(_QWORD *)this = &off_1E69DC868;
  caulk::details::lifetime_guard_base<VoiceProcessorV2>::invalidate((uint64_t)this + 16600);
  VoiceProcessorV6::~VoiceProcessorV6(this);
}

uint64_t VoiceProcessorV7::GetVersion(VoiceProcessorV7 *this)
{
  return 7;
}

uint64_t VoiceProcessorV7::Initialize(VoiceProcessorV7 *this)
{
  int v2;
  int v3;
  uint64_t result;
  _DWORD *v5;
  BOOL v6;
  unsigned int v7;
  BOOL v8;

  *((_DWORD *)this + 100) = 0;
  v2 = *((_DWORD *)this + 153);
  if (v2)
  {
    v3 = 0;
    do
    {
      v3 = (2 * v3) | 1;
      --v2;
    }
    while (v2);
    *((_DWORD *)this + 100) = v3;
  }
  result = VoiceProcessorV2::Initialize(this);
  if (!(_DWORD)result)
  {
    VoiceProcessorV4::InitializeV4Specifics(this);
    VoiceProcessorV5::InitializeV5Specifics(this);
    VoiceProcessorV6::InitializeV6Specifics(this);
    result = VoiceProcessorV7::InitializeV7Specifics(this);
    if (!(_DWORD)result)
    {
      (*(void (**)(VoiceProcessorV7 *))(*(_QWORD *)this + 696))(this);
      *((_BYTE *)this + 17064) = 0;
      v5 = (_DWORD *)*((_QWORD *)this + 292);
      v6 = v5 != *((_DWORD **)this + 293) && *v5 == 1886613611;
      v7 = *((_DWORD *)this + 18);
      if (v7 <= 0x22 && ((1 << v7) & 0x4C0000000) != 0 && v6)
      {
        v8 = 1;
LABEL_16:
        result = 0;
        *((_BYTE *)this + 17064) = v8;
        return result;
      }
      if ((v7 & 0xFFFFFFFE) == 0x16)
      {
        v8 = *((_DWORD *)this + 3098) == 3;
        goto LABEL_16;
      }
      return 0;
    }
  }
  return result;
}

void VoiceProcessorV7::ScaleHardwareOutputSafetyOffsets(VoiceProcessorV7 *this, AudioObjectID inObjectID)
{
  char *v3;
  OSStatus PropertyData;
  unint64_t v5;
  _QWORD *v6;
  NSObject *v7;
  int *v8;
  NSObject *v9;
  uint64_t v10;
  int v11;
  int *v12;
  double v13;
  _QWORD *v14;
  NSObject *v15;
  int v16;
  int *v17;
  _QWORD *v18;
  NSObject *v19;
  int v20;
  int *v21;
  _QWORD *v22;
  NSObject *v23;
  int v24;
  int *v25;
  double outData;
  UInt32 ioDataSize;
  AudioObjectPropertyAddress inAddress;
  __int16 v29;
  int v30;
  __int16 v31;
  double v32;
  __int16 v33;
  uint64_t v34;
  __int16 v35;
  int v36;
  uint64_t v37;

  v37 = *MEMORY[0x1E0C80C00];
  v3 = (char *)this + 15897;
  outData = 0.0;
  *(_QWORD *)&inAddress.mSelector = 0x6F7574706E737274;
  inAddress.mElement = 0;
  ioDataSize = 8;
  PropertyData = AudioObjectGetPropertyData(inObjectID, &inAddress, 0, 0, &ioDataSize, &outData);
  if (VPLogScope(void)::once != -1)
    dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
  v6 = (_QWORD *)VPLogScope(void)::scope;
  if (PropertyData)
  {
    if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(1, VPLogScope(void)::scope, 0))
    {
      v7 = (*v6 ? *v6 : MEMORY[0x1E0C81028]);
      if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
      {
        inAddress.mSelector = 136315650;
        *(_QWORD *)&inAddress.mScope = "VoiceProcessor_v7.cpp";
        v29 = 1024;
        v30 = 160;
        v31 = 1024;
        LODWORD(v32) = PropertyData;
        _os_log_impl(&dword_1B5ED0000, v7, OS_LOG_TYPE_ERROR, "%25s:%-5d  >vp> error %d getting ref physical device nominal sample rate", (uint8_t *)&inAddress, 0x18u);
      }
    }
    v8 = (int *)*((_QWORD *)this + 1570);
    if (v8 && (*v3 || v3[1]))
    {
      if (VPLogScope(void)::once != -1)
        dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
      CALegacyLog::log(v8, 1, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v7/VoiceProcessor_v7.cpp", 160, "ScaleHardwareOutputSafetyOffsets", "error %d getting ref physical device nominal sample rate");
    }
  }
  else
  {
    if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(5, VPLogScope(void)::scope, 0))
    {
      v9 = (*v6 ? *v6 : MEMORY[0x1E0C81028]);
      if (os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG))
      {
        v10 = *((_QWORD *)this + 88);
        v11 = *((_DWORD *)this + 294);
        inAddress.mSelector = 136316162;
        *(_QWORD *)&inAddress.mScope = "VoiceProcessor_v7.cpp";
        v29 = 1024;
        v30 = 162;
        v31 = 2048;
        v32 = outData;
        v33 = 2048;
        v34 = v10;
        v35 = 1024;
        v36 = v11;
        _os_log_impl(&dword_1B5ED0000, v9, OS_LOG_TYPE_DEBUG, "%25s:%-5d  <vp> ref nominal sample rate = %lf; ref sample rate = %lf; output safety offset before scaling = %u",
          (uint8_t *)&inAddress,
          0x2Cu);
      }
    }
    v12 = (int *)*((_QWORD *)this + 1570);
    if (v12 && (*v3 || v3[1]))
    {
      if (VPLogScope(void)::once != -1)
        dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
      CALegacyLog::log(v12, 5, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v7/VoiceProcessor_v7.cpp", 162, "ScaleHardwareOutputSafetyOffsets", "ref nominal sample rate = %lf; ref sample rate = %lf; output safety offset before scaling = %u",
        outData,
        *((double *)this + 88),
        *((_DWORD *)this + 294));
    }
    if (outData > 0.0)
    {
      LODWORD(v5) = *((_DWORD *)this + 294);
      v13 = *((double *)this + 73) * (double)v5 / outData;
      *((_DWORD *)this + 294) = v13;
      if (VPLogScope(void)::once != -1)
        dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
      v14 = (_QWORD *)VPLogScope(void)::scope;
      if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(5, VPLogScope(void)::scope, 0))
      {
        v15 = (*v14 ? *v14 : MEMORY[0x1E0C81028]);
        if (os_log_type_enabled(v15, OS_LOG_TYPE_DEBUG))
        {
          v16 = *((_DWORD *)this + 294);
          inAddress.mSelector = 136315650;
          *(_QWORD *)&inAddress.mScope = "VoiceProcessor_v7.cpp";
          v29 = 1024;
          v30 = 165;
          v31 = 1024;
          LODWORD(v32) = v16;
          _os_log_impl(&dword_1B5ED0000, v15, OS_LOG_TYPE_DEBUG, "%25s:%-5d  <vp> output safety offset after scaling = %u", (uint8_t *)&inAddress, 0x18u);
        }
      }
      v17 = (int *)*((_QWORD *)this + 1570);
      if (v17 && (*v3 || v3[1]))
      {
        if (VPLogScope(void)::once != -1)
          dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
        CALegacyLog::log(v17, 5, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v7/VoiceProcessor_v7.cpp", 165, "ScaleHardwareOutputSafetyOffsets", "output safety offset after scaling = %u", *((_DWORD *)this + 294));
      }
      if (!*((_DWORD *)this + 1127))
      {
        if (VPLogScope(void)::once != -1)
          dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
        v18 = (_QWORD *)VPLogScope(void)::scope;
        if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(5, VPLogScope(void)::scope, 0))
        {
          v19 = (*v18 ? *v18 : MEMORY[0x1E0C81028]);
          if (os_log_type_enabled(v19, OS_LOG_TYPE_DEBUG))
          {
            v20 = *((_DWORD *)this + 288);
            inAddress.mSelector = 136315650;
            *(_QWORD *)&inAddress.mScope = "VoiceProcessor_v7.cpp";
            v29 = 1024;
            v30 = 167;
            v31 = 1024;
            LODWORD(v32) = v20;
            _os_log_impl(&dword_1B5ED0000, v19, OS_LOG_TYPE_DEBUG, "%25s:%-5d  <vp> tap stream input safety offset before scaling = %u", (uint8_t *)&inAddress, 0x18u);
          }
        }
        v21 = (int *)*((_QWORD *)this + 1570);
        if (v21 && (*v3 || v3[1]))
        {
          if (VPLogScope(void)::once != -1)
            dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
          CALegacyLog::log(v21, 5, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v7/VoiceProcessor_v7.cpp", 167, "ScaleHardwareOutputSafetyOffsets", "tap stream input safety offset before scaling = %u", *((_DWORD *)this + 288));
        }
        LODWORD(v13) = *((_DWORD *)this + 288);
        *((_DWORD *)this + 288) = (*((double *)this + 73) * (double)*(unint64_t *)&v13 / outData);
        if (VPLogScope(void)::once != -1)
          dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
        v22 = (_QWORD *)VPLogScope(void)::scope;
        if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(5, VPLogScope(void)::scope, 0))
        {
          v23 = (*v22 ? *v22 : MEMORY[0x1E0C81028]);
          if (os_log_type_enabled(v23, OS_LOG_TYPE_DEBUG))
          {
            v24 = *((_DWORD *)this + 288);
            inAddress.mSelector = 136315650;
            *(_QWORD *)&inAddress.mScope = "VoiceProcessor_v7.cpp";
            v29 = 1024;
            v30 = 169;
            v31 = 1024;
            LODWORD(v32) = v24;
            _os_log_impl(&dword_1B5ED0000, v23, OS_LOG_TYPE_DEBUG, "%25s:%-5d  <vp> tap stream input safety offset after scaling = %u", (uint8_t *)&inAddress, 0x18u);
          }
        }
        v25 = (int *)*((_QWORD *)this + 1570);
        if (v25 && (*v3 || v3[1]))
        {
          if (VPLogScope(void)::once != -1)
            dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
          CALegacyLog::log(v25, 5, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v7/VoiceProcessor_v7.cpp", 169, "ScaleHardwareOutputSafetyOffsets", "tap stream input safety offset after scaling = %u");
        }
      }
    }
  }
}

void VoiceProcessorV7::ScaleHardwareOutputPresentationLatency(VoiceProcessorV7 *this, AudioObjectID inObjectID)
{
  char *v3;
  OSStatus PropertyData;
  unint64_t v5;
  _QWORD *v6;
  NSObject *v7;
  int *v8;
  NSObject *v9;
  uint64_t v10;
  int v11;
  int *v12;
  double v13;
  _QWORD *v14;
  NSObject *v15;
  int v16;
  int *v17;
  _QWORD *v18;
  NSObject *v19;
  int v20;
  int *v21;
  _QWORD *v22;
  NSObject *v23;
  int v24;
  int *v25;
  double outData;
  UInt32 ioDataSize;
  AudioObjectPropertyAddress inAddress;
  __int16 v29;
  int v30;
  __int16 v31;
  double v32;
  __int16 v33;
  uint64_t v34;
  __int16 v35;
  int v36;
  uint64_t v37;

  v37 = *MEMORY[0x1E0C80C00];
  v3 = (char *)this + 15897;
  outData = 0.0;
  *(_QWORD *)&inAddress.mSelector = 0x6F7574706E737274;
  inAddress.mElement = 0;
  ioDataSize = 8;
  PropertyData = AudioObjectGetPropertyData(inObjectID, &inAddress, 0, 0, &ioDataSize, &outData);
  if (VPLogScope(void)::once != -1)
    dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
  v6 = (_QWORD *)VPLogScope(void)::scope;
  if (PropertyData)
  {
    if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(1, VPLogScope(void)::scope, 0))
    {
      v7 = (*v6 ? *v6 : MEMORY[0x1E0C81028]);
      if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
      {
        inAddress.mSelector = 136315650;
        *(_QWORD *)&inAddress.mScope = "VoiceProcessor_v7.cpp";
        v29 = 1024;
        v30 = 183;
        v31 = 1024;
        LODWORD(v32) = PropertyData;
        _os_log_impl(&dword_1B5ED0000, v7, OS_LOG_TYPE_ERROR, "%25s:%-5d  >vp> error %d getting ref physical device nominal sample rate", (uint8_t *)&inAddress, 0x18u);
      }
    }
    v8 = (int *)*((_QWORD *)this + 1570);
    if (v8 && (*v3 || v3[1]))
    {
      if (VPLogScope(void)::once != -1)
        dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
      CALegacyLog::log(v8, 1, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v7/VoiceProcessor_v7.cpp", 183, "ScaleHardwareOutputPresentationLatency", "error %d getting ref physical device nominal sample rate", PropertyData);
    }
  }
  else
  {
    if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(5, VPLogScope(void)::scope, 0))
    {
      v9 = (*v6 ? *v6 : MEMORY[0x1E0C81028]);
      if (os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG))
      {
        v10 = *((_QWORD *)this + 88);
        v11 = *((_DWORD *)this + 292);
        inAddress.mSelector = 136316162;
        *(_QWORD *)&inAddress.mScope = "VoiceProcessor_v7.cpp";
        v29 = 1024;
        v30 = 185;
        v31 = 2048;
        v32 = outData;
        v33 = 2048;
        v34 = v10;
        v35 = 1024;
        v36 = v11;
        _os_log_impl(&dword_1B5ED0000, v9, OS_LOG_TYPE_DEBUG, "%25s:%-5d  <vp> ref nominal sample rate = %lf; ref sample rate = %lf; output latency before scaling = %u",
          (uint8_t *)&inAddress,
          0x2Cu);
      }
    }
    v12 = (int *)*((_QWORD *)this + 1570);
    if (v12 && (*v3 || v3[1]))
    {
      if (VPLogScope(void)::once != -1)
        dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
      CALegacyLog::log(v12, 5, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v7/VoiceProcessor_v7.cpp", 185, "ScaleHardwareOutputPresentationLatency", "ref nominal sample rate = %lf; ref sample rate = %lf; output latency before scaling = %u",
        outData,
        *((double *)this + 88),
        *((_DWORD *)this + 292));
    }
    if (outData > 0.0)
    {
      LODWORD(v5) = *((_DWORD *)this + 292);
      v13 = *((double *)this + 73) * (double)v5 / outData;
      *((_DWORD *)this + 292) = v13;
      if (VPLogScope(void)::once != -1)
        dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
      v14 = (_QWORD *)VPLogScope(void)::scope;
      if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(5, VPLogScope(void)::scope, 0))
      {
        v15 = (*v14 ? *v14 : MEMORY[0x1E0C81028]);
        if (os_log_type_enabled(v15, OS_LOG_TYPE_DEBUG))
        {
          v16 = *((_DWORD *)this + 292);
          inAddress.mSelector = 136315650;
          *(_QWORD *)&inAddress.mScope = "VoiceProcessor_v7.cpp";
          v29 = 1024;
          v30 = 188;
          v31 = 1024;
          LODWORD(v32) = v16;
          _os_log_impl(&dword_1B5ED0000, v15, OS_LOG_TYPE_DEBUG, "%25s:%-5d  <vp> output latency after scaling = %u", (uint8_t *)&inAddress, 0x18u);
        }
      }
      v17 = (int *)*((_QWORD *)this + 1570);
      if (v17 && (*v3 || v3[1]))
      {
        if (VPLogScope(void)::once != -1)
          dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
        CALegacyLog::log(v17, 5, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v7/VoiceProcessor_v7.cpp", 188, "ScaleHardwareOutputPresentationLatency", "output latency after scaling = %u", *((_DWORD *)this + 292));
      }
      if (!*((_DWORD *)this + 1127))
      {
        if (VPLogScope(void)::once != -1)
          dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
        v18 = (_QWORD *)VPLogScope(void)::scope;
        if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(5, VPLogScope(void)::scope, 0))
        {
          v19 = (*v18 ? *v18 : MEMORY[0x1E0C81028]);
          if (os_log_type_enabled(v19, OS_LOG_TYPE_DEBUG))
          {
            v20 = *((_DWORD *)this + 287);
            inAddress.mSelector = 136315650;
            *(_QWORD *)&inAddress.mScope = "VoiceProcessor_v7.cpp";
            v29 = 1024;
            v30 = 190;
            v31 = 1024;
            LODWORD(v32) = v20;
            _os_log_impl(&dword_1B5ED0000, v19, OS_LOG_TYPE_DEBUG, "%25s:%-5d  <vp> tap stream input latency before scaling = %u", (uint8_t *)&inAddress, 0x18u);
          }
        }
        v21 = (int *)*((_QWORD *)this + 1570);
        if (v21 && (*v3 || v3[1]))
        {
          if (VPLogScope(void)::once != -1)
            dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
          CALegacyLog::log(v21, 5, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v7/VoiceProcessor_v7.cpp", 190, "ScaleHardwareOutputPresentationLatency", "tap stream input latency before scaling = %u", *((_DWORD *)this + 287));
        }
        LODWORD(v13) = *((_DWORD *)this + 287);
        *((_DWORD *)this + 287) = (*((double *)this + 73) * (double)*(unint64_t *)&v13 / outData);
        if (VPLogScope(void)::once != -1)
          dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
        v22 = (_QWORD *)VPLogScope(void)::scope;
        if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(5, VPLogScope(void)::scope, 0))
        {
          v23 = (*v22 ? *v22 : MEMORY[0x1E0C81028]);
          if (os_log_type_enabled(v23, OS_LOG_TYPE_DEBUG))
          {
            v24 = *((_DWORD *)this + 287);
            inAddress.mSelector = 136315650;
            *(_QWORD *)&inAddress.mScope = "VoiceProcessor_v7.cpp";
            v29 = 1024;
            v30 = 192;
            v31 = 1024;
            LODWORD(v32) = v24;
            _os_log_impl(&dword_1B5ED0000, v23, OS_LOG_TYPE_DEBUG, "%25s:%-5d  <vp> tap stream input latency after scaling = %u", (uint8_t *)&inAddress, 0x18u);
          }
        }
        v25 = (int *)*((_QWORD *)this + 1570);
        if (v25 && (*v3 || v3[1]))
        {
          if (VPLogScope(void)::once != -1)
            dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
          CALegacyLog::log(v25, 5, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v7/VoiceProcessor_v7.cpp", 192, "ScaleHardwareOutputPresentationLatency", "tap stream input latency after scaling = %u", *((_DWORD *)this + 287));
        }
      }
      VoiceProcessorV2::PListWriteRefPhysicalDevSR(this, &outData);
    }
  }
}

uint64_t VoiceProcessorV7::SetupUplinkBasicAUChain(VoiceProcessorV7 *this)
{
  VoiceProcessorV2 *ChatFlavor;
  uint64_t result;

  VoiceProcessorV6::SetupUplinkBasicAUChain(this);
  if ((*(unsigned int (**)(VoiceProcessorV7 *))(*(_QWORD *)this + 112))(this) >= 8)
    *((_QWORD *)this + 582) |= 0x10000000uLL;
  ChatFlavor = (VoiceProcessorV2 *)VoiceProcessorV2::GetChatFlavor(this);
  if ((_DWORD)ChatFlavor == 2 && (*((_BYTE *)this + 16544) & 4) != 0)
  {
    *((_QWORD *)this + 582) |= 0x800000000000000uLL;
    if (*((_BYTE *)this + 2246))
    {
      if (VoiceProcessorV2::IsDeviceSupportingAdvancedChatFlavors(ChatFlavor))
        *((_QWORD *)this + 583) |= 4uLL;
    }
  }
  result = VoiceProcessorV2::GetChatFlavor(this);
  if ((_DWORD)result == 1 && (*((_BYTE *)this + 16544) & 2) != 0)
  {
    result = (*(uint64_t (**)(VoiceProcessorV7 *))(*(_QWORD *)this + 112))(this);
    if (result >= 9)
      *((_QWORD *)this + 582) |= 0x4000000000000uLL;
  }
  return result;
}

uint64_t VoiceProcessorV7::SetupUplink_BF_MS(VoiceProcessorV7 *this, unsigned int a2, char a3)
{
  VoiceProcessorV2 *ChatFlavor;
  uint64_t result;

  VoiceProcessorV6::SetupUplink_BF_MS((uint64_t)this, a2, a3);
  ChatFlavor = (VoiceProcessorV2 *)VoiceProcessorV2::GetChatFlavor(this);
  if ((_DWORD)ChatFlavor == 2 && (*((_BYTE *)this + 16544) & 4) != 0)
  {
    *((_QWORD *)this + 582) |= 0x800000000000000uLL;
    if (*((_BYTE *)this + 2246))
    {
      if (VoiceProcessorV2::IsDeviceSupportingAdvancedChatFlavors(ChatFlavor))
        *((_QWORD *)this + 583) |= 4uLL;
    }
  }
  result = VoiceProcessorV2::GetChatFlavor(this);
  if ((_DWORD)result == 1 && (*((_BYTE *)this + 16544) & 2) != 0)
  {
    result = (*(uint64_t (**)(VoiceProcessorV7 *))(*(_QWORD *)this + 112))(this);
    if (result >= 9)
      *((_QWORD *)this + 582) |= 0x4000000000000uLL;
  }
  return result;
}

VoiceProcessorV2 *VoiceProcessorV7::SetupUplink_MS(VoiceProcessorV7 *this, unsigned int a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  VoiceProcessorV2 *result;

  if (a2 != 1)
  {
    v3 = *((_QWORD *)this + 582);
    v4 = v3 | 0x81;
    v5 = v3 | 0x87;
    v6 = 159;
    if (a2 == 3)
      v6 = 143;
    v7 = v3 | v6;
    if (a2 < 3)
      v7 = v5;
    if (!a2)
      v7 = v4;
    *((_QWORD *)this + 582) = v7 & 0xF9FFFFFFDDFFFBFFLL | 0x600000002000400;
  }
  result = (VoiceProcessorV2 *)VoiceProcessorV2::GetChatFlavor(this);
  if ((_DWORD)result == 2 && (*((_BYTE *)this + 16544) & 4) != 0)
  {
    *((_QWORD *)this + 582) |= 0x800000000000000uLL;
    if (*((_BYTE *)this + 2246))
    {
      result = (VoiceProcessorV2 *)VoiceProcessorV2::IsDeviceSupportingAdvancedChatFlavors(result);
      if ((_DWORD)result)
        *((_QWORD *)this + 583) |= 4uLL;
    }
  }
  return result;
}

void VoiceProcessorV7::SetupDownlinkBasicAUChain(VoiceProcessorV7 *this)
{
  _DWORD *v2;

  VoiceProcessorV7::InitializeSWCrossoverChannelCount(this);
  VoiceProcessorV6::SetupDownlinkBasicAUChain(this);
  if ((*((_DWORD *)this + 18) - 1) <= 6)
  {
    v2 = (_DWORD *)*((_QWORD *)this + 292);
    if (v2 != *((_DWORD **)this + 293) && *v2 == 1886545251)
      *((_QWORD *)this + 1104) |= 0x100000000000uLL;
  }
}

void VoiceProcessorV7::SetupDownlinkCarPlayVolumeExperienceDSP(VoiceProcessorV7 *this)
{
  int v2;
  _QWORD *v3;
  NSObject *v4;
  int *v5;
  int *v6;
  int v7;
  const char *v8;
  __int16 v9;
  int v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  if (!_os_feature_enabled_impl())
    return;
  v2 = **((_DWORD **)this + 292);
  if (v2 == 1885892674)
    goto LABEL_5;
  if (v2 != 1886614639)
  {
    if (v2 != 1885892706)
      return;
LABEL_5:
    if (*((_DWORD *)this + 597) != 1701869160)
      return;
  }
  if (VPLogScope(void)::once != -1)
    dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
  v3 = (_QWORD *)VPLogScope(void)::scope;
  if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(3, VPLogScope(void)::scope, 0))
  {
    v4 = (*v3 ? *v3 : MEMORY[0x1E0C81028]);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      v7 = 136315394;
      v8 = "VoiceProcessor_v7.cpp";
      v9 = 1024;
      v10 = 272;
      _os_log_impl(&dword_1B5ED0000, v4, OS_LOG_TYPE_DEFAULT, "%25s:%-5d  <vp> enabling CarPlay loudness normalization DSP", (uint8_t *)&v7, 0x12u);
    }
  }
  v5 = (int *)*((_QWORD *)this + 1570);
  if (v5 && (*((_BYTE *)this + 15897) || *((_BYTE *)this + 15898)))
  {
    if (VPLogScope(void)::once != -1)
    {
      v6 = (int *)*((_QWORD *)this + 1570);
      dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
      v5 = v6;
    }
    CALegacyLog::log(v5, 3, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v7/VoiceProcessor_v7.cpp", 272, "SetupDownlinkCarPlayVolumeExperienceDSP", "enabling CarPlay loudness normalization DSP");
  }
  *((_QWORD *)this + 1104) |= 0x3C00uLL;
}

uint64_t VoiceProcessorV7::ShouldThirdPartyAppUseFaceTimeDSPAndTuning(VoiceProcessorV7 *this)
{
  if (VoiceProcessorV2::GetChatFlavor(this) == 2 && (*((_BYTE *)this + 16544) & 4) != 0)
    return 1;
  if (VoiceProcessorV2::GetChatFlavor(this) == 1)
    return (*((unsigned __int8 *)this + 16544) >> 1) & 1;
  return 0;
}

BOOL VoiceProcessorV7::ShouldApplyThirdPartyAppTuningOverride(VoiceProcessorV7 *this)
{
  return **((_DWORD **)this + 292) == 1886613611
      && !*((_DWORD *)this + 19)
      && (VoiceProcessorV2::GetChatFlavor(this) == 2 && (*((_BYTE *)this + 16544) & 4) != 0
       || VoiceProcessorV2::GetChatFlavor(this) == 1 && (*((_BYTE *)this + 16544) & 2) != 0);
}

uint64_t VoiceProcessorV7::IsInGenericVoiceIsolationMode(VoiceProcessorV7 *this)
{
  uint64_t v2;
  int v3;

  if (VoiceProcessorV2::GetChatFlavor(this) != 2 || (*((_BYTE *)this + 16544) & 4) == 0)
    return 0;
  v2 = 0;
  while (1)
  {
    if (**((_DWORD **)this + 295) == VoiceProcessorV7::IsInGenericVoiceIsolationMode(void)const::genericTuningUseCases[v2])
    {
      v3 = VoiceProcessorV7::IsInGenericVoiceIsolationMode(void)const::genericTuningUseCases[v2 + 1];
      if (v3 == 1634630002 || **((_DWORD **)this + 292) == v3)
        break;
    }
    v2 += 2;
    if (v2 == 6)
      return 0;
  }
  return 1;
}

BOOL VoiceProcessorV7::ShouldUseFullIOCycle(VoiceProcessorV7 *this)
{
  return VoiceProcessorV2::GetChatFlavor(this) == 2 && (*((_BYTE *)this + 16544) & 4) != 0
      || *((_DWORD *)this + 19) != 1;
}

BOOL VoiceProcessorV7::ShouldUsePowerEfficientSingleChannelVoiceIsolation(VoiceProcessorV7 *this)
{
  unsigned int v2;
  uint64_t v3;
  int v4;
  BOOL v6;

  if (VoiceProcessorV2::GetChatFlavor(this) == 2
    && (*((_BYTE *)this + 16544) & 4) != 0
    && (*(unsigned int (**)(VoiceProcessorV7 *))(*(_QWORD *)this + 112))(this) >= 7)
  {
    v2 = *((_DWORD *)this + 19);
    if (v2 <= 6 && ((1 << v2) & 0x52) != 0)
    {
      v3 = 0;
      while (**((_DWORD **)this + 292) != *(_DWORD *)&VoiceProcessorV7::ShouldUsePowerEfficientSingleChannelVoiceIsolation(void)const::singleChannelVIUseCases[v3 + 4]
           || **((_DWORD **)this + 295) != *(_DWORD *)&VoiceProcessorV7::ShouldUsePowerEfficientSingleChannelVoiceIsolation(void)const::singleChannelVIUseCases[v3])
      {
        v3 += 8;
        if (v3 == 16)
          goto LABEL_10;
      }
      return 1;
    }
  }
LABEL_10:
  v4 = *((_DWORD *)this + 19);
  if (v4 == 6 || v4 == 1)
  {
    if ((*(unsigned int (**)(VoiceProcessorV7 *))(*(_QWORD *)this + 112))(this) <= 8
      && (*(unsigned int (**)(VoiceProcessorV7 *))(*(_QWORD *)this + 112))(this) > 6)
    {
      return 1;
    }
    v4 = *((_DWORD *)this + 19);
  }
  v6 = v4 == 6 || v4 == 1;
  return v6 && ((*(uint64_t (**)(VoiceProcessorV7 *))(*(_QWORD *)this + 608))(this) & 1) != 0;
}

uint64_t VoiceProcessorV7::GetTelephonyVoiceIsolationUseCaseOverrideTuning4CC(VoiceProcessorV7 *this)
{
  int v2;
  BOOL v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  int v9;
  double v10;
  _QWORD *v11;
  NSObject *v12;
  int *v13;
  int *v14;
  uint8_t buf[4];
  const char *v16;
  __int16 v17;
  int v18;
  __int16 v19;
  double v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  if (**((_DWORD **)this + 295) == 1886216820 && **((_DWORD **)this + 292) == 1885892706
    || ((v2 = *((_DWORD *)this + 19), v2 != 6) ? (v3 = v2 == 1) : (v3 = 1), !v3))
  {
    v6 = 0;
    v7 = 0;
    v4 = 0;
    return v7 | v6 | v4;
  }
  v4 = 1987260416;
  v5 = *((float *)this + 550);
  if (v5 <= 23999)
  {
    if (v5 == 8000)
    {
      v6 = 0x100000000;
      v7 = 56;
      return v7 | v6 | v4;
    }
    if (v5 == 16000)
    {
      v4 = 1987260672;
      v6 = 0x100000000;
      v7 = 54;
      return v7 | v6 | v4;
    }
    goto LABEL_24;
  }
  if (v5 == 24000)
  {
    v6 = 0x100000000;
    v7 = 111;
    v4 = 1986622208;
    return v7 | v6 | v4;
  }
  if (v5 != 32000)
  {
LABEL_24:
    v4 = 1986622208;
    if (v5 >= 0x7D01)
    {
      if (VPLogScope(void)::once != -1)
        dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
      v10 = (double)v5;
      v11 = (_QWORD *)VPLogScope(void)::scope;
      if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(3, VPLogScope(void)::scope, 0))
      {
        v12 = (*v11 ? *v11 : MEMORY[0x1E0C81028]);
        if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 136315650;
          v16 = "VoiceProcessor_v7.cpp";
          v17 = 1024;
          v18 = 531;
          v19 = 2048;
          v20 = v10;
          _os_log_impl(&dword_1B5ED0000, v12, OS_LOG_TYPE_DEFAULT, "%25s:%-5d  <vp> Unexpected vocoder sample rate = %f! Use 'viso' for telephony voice isolation instead.", buf, 0x1Cu);
        }
      }
      v13 = (int *)*((_QWORD *)this + 1570);
      if (v13 && (*((_BYTE *)this + 15897) || *((_BYTE *)this + 15898)))
      {
        if (VPLogScope(void)::once != -1)
        {
          v14 = (int *)*((_QWORD *)this + 1570);
          dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
          v13 = v14;
        }
        CALegacyLog::log(v13, 3, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v7/VoiceProcessor_v7.cpp", 531, "GetTelephonyVoiceIsolationUseCaseOverrideTuning4CC", "Unexpected vocoder sample rate = %f! Use 'viso' for telephony voice isolation instead.", v10);
      }
    }
    v6 = 0x100000000;
    v7 = 111;
    return v7 | v6 | v4;
  }
  v9 = (*(uint64_t (**)(VoiceProcessorV7 *))(*(_QWORD *)this + 232))(this);
  if (v9)
    v4 = 1987261184;
  else
    v4 = 1986622208;
  v7 = 50;
  if (!v9)
    v7 = 111;
  v6 = 0x100000000;
  return v7 | v6 | v4;
}

void sub_1B644602C(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

BOOL VoiceProcessorV7::IsVoiceIsolationSupportedUnderCurrentRoute(VoiceProcessorV7 *this)
{
  int v1;
  int v2;
  _BOOL8 result;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  BOOL v10;
  int v11;

  v1 = **((_DWORD **)this + 295);
  if (v1 > 1886222184)
  {
    switch(v1)
    {
      case 1886222185:
        v5 = **((_DWORD **)this + 292);
        v7 = 21;
        v8 = 1885892706;
        break;
      case 1886614633:
        v5 = **((_DWORD **)this + 292);
        v7 = 1028;
        v8 = 1886613611;
        break;
      case 1886745449:
        v2 = **((_DWORD **)this + 292);
        return v2 == 1886613611 || v2 == 1886745455;
      default:
        return 0;
    }
    v6 = v8 | v7;
    return v5 == v6;
  }
  if (v1 != 1886216809)
  {
    if (v1 != 1886216820)
      return 0;
    v5 = **((_DWORD **)this + 292);
    v6 = 1885892706;
    return v5 == v6;
  }
  v9 = **((_DWORD **)this + 292);
  result = 1;
  if (v9 > 1886152046)
  {
    if (v9 > 1886613610)
    {
      v10 = v9 == 1886613611;
      v11 = 1886745455;
    }
    else
    {
      v10 = v9 == 1886152047;
      v11 = 1886545251;
    }
  }
  else
  {
    if (v9 <= 1885892673)
    {
      if (v9 == 1885888867)
        return result;
      return v9 == 1885889645 && (_os_feature_enabled_impl() & 1) != 0;
    }
    v10 = v9 == 1885892674;
    v11 = 1885892727;
  }
  if (!v10 && v9 != v11)
    return 0;
  return result;
}

BOOL VoiceProcessorV7::IsMusicModeSupportedUnderCurrentRoute(VoiceProcessorV7 *this)
{
  int v1;

  if (**((_DWORD **)this + 295) != 1886216809)
    return 0;
  v1 = **((_DWORD **)this + 292);
  return v1 == 1886613611 || v1 == 1885892727;
}

uint64_t VoiceProcessorV7::InitializeSWCrossoverChannelCount(VoiceProcessorV7 *this)
{
  _DWORD *v2;
  unsigned int v3;
  char *v4;
  _QWORD *v5;
  NSObject *v6;
  int v7;
  uint64_t v8;
  _QWORD *v10;
  NSObject *v11;
  int *v12;
  uint8_t buf[4];
  const char *v14;
  __int16 v15;
  int v16;
  __int16 v17;
  int v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  if ((*((_DWORD *)this + 18) - 22) > 7)
    return 0;
  v2 = (_DWORD *)*((_QWORD *)this + 292);
  if (v2 == *((_DWORD **)this + 293) || *v2 != 1886613611 || (v3 = *((_DWORD *)this + 89), v3 < 2))
  {
    v8 = 0;
    *((_DWORD *)this + 1073) = 1;
    return v8;
  }
  v4 = (char *)this + 15897;
  if ((v3 & 1) != 0)
  {
    if (VPLogScope(void)::once != -1)
      dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
    v10 = (_QWORD *)VPLogScope(void)::scope;
    if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(1, VPLogScope(void)::scope, 0))
    {
      v11 = (*v10 ? *v10 : MEMORY[0x1E0C81028]);
      if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315394;
        v14 = "VoiceProcessor_v7.cpp";
        v15 = 1024;
        v16 = 217;
        _os_log_impl(&dword_1B5ED0000, v11, OS_LOG_TYPE_ERROR, "%25s:%-5d  >vp> downlink mix channel count is an odd number", buf, 0x12u);
      }
    }
    v8 = 1650879860;
    v12 = (int *)*((_QWORD *)this + 1570);
    if (v12 && (*v4 || v4[1]))
    {
      if (VPLogScope(void)::once != -1)
        dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
      CALegacyLog::log(v12, 1, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v7/VoiceProcessor_v7.cpp", 217, "InitializeSWCrossoverChannelCount", "downlink mix channel count is an odd number");
    }
  }
  else
  {
    *((_DWORD *)this + 1073) = v3 >> 1;
    if (VPLogScope(void)::once != -1)
      dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
    v5 = (_QWORD *)VPLogScope(void)::scope;
    if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(4, VPLogScope(void)::scope, 0))
    {
      v6 = (*v5 ? *v5 : MEMORY[0x1E0C81028]);
      if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
      {
        v7 = *((_DWORD *)this + 1073);
        *(_DWORD *)buf = 136315650;
        v14 = "VoiceProcessor_v7.cpp";
        v15 = 1024;
        v16 = 221;
        v17 = 1024;
        v18 = v7;
        _os_log_impl(&dword_1B5ED0000, v6, OS_LOG_TYPE_INFO, "%25s:%-5d  <vp> SW crossover channel count = %u", buf, 0x18u);
      }
    }
    v8 = *((_QWORD *)this + 1570);
    if (v8)
    {
      if (*v4 || *((_BYTE *)this + 15898))
      {
        if (VPLogScope(void)::once != -1)
          dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
        CALegacyLog::log((int *)v8, 4, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v7/VoiceProcessor_v7.cpp", 221, "InitializeSWCrossoverChannelCount", "SW crossover channel count = %u", *((_DWORD *)this + 1073));
      }
      return 0;
    }
  }
  return v8;
}

uint64_t VoiceProcessorV7::InitializeV7Specifics(VoiceProcessorV7 *this)
{
  unsigned int v2;
  BOOL v3;
  unsigned int v4;

  v2 = *((_DWORD *)this + 18);
  v3 = v2 > 0x1F;
  v4 = (1 << v2) & 0xC0C0000E;
  if (!v3 && v4 != 0)
    VoiceProcessorV7::LoadTrimGains(this);
  return VoiceProcessorV7::InitializeSWCrossoverChannelCount(this);
}

void VoiceProcessorV7::LoadTrimGains(VoiceProcessorV7 *this)
{
  char v2;
  char v3;

  v3 = 0;
  VoiceProcessorV7::LoadTrimGains(void)::$_0::operator()(this, &v3);
  v2 = 1;
  VoiceProcessorV7::LoadTrimGains(void)::$_0::operator()(this, &v2);
}

void VoiceProcessorV7::LoadTrimGains(void)::$_0::operator()(_QWORD *a1, _BYTE *a2)
{
  _BYTE *v4;
  const void *v5;
  _BYTE *v6;
  _BYTE *v7;
  const char *v8;
  const UInt8 *BytePtr;
  unint64_t Length;
  _QWORD *v11;
  NSObject *v12;
  void *v13;
  int *v14;
  _QWORD *v15;
  NSObject *v16;
  void *v17;
  int *v18;
  const char *v19;
  _QWORD *v20;
  NSObject *v21;
  void *v22;
  int *v23;
  const char *v24;
  _QWORD *v25;
  NSObject *v26;
  void *v27;
  int *v28;
  const char *v29;
  int v30;
  int v31;
  _QWORD *v32;
  NSObject *v33;
  void *v34;
  int *v35;
  const char *v36;
  unsigned int v37;
  _QWORD *v38;
  NSObject *v39;
  void *v40;
  int *v41;
  _QWORD *v42;
  NSObject *v43;
  void *v44;
  int *v45;
  const char *v46;
  __int16 *v47;
  __int16 *v48;
  float v49;
  float *v50;
  float *v51;
  float *v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  unint64_t v56;
  char *v57;
  float *v58;
  int v59;
  std::string *v60;
  std::string::size_type size;
  NSObject *v62;
  NSObject *v63;
  void *v64;
  std::string *v65;
  int *v66;
  const char *v67;
  std::string *v68;
  uint64_t v69;
  NSObject *v70;
  NSObject *v71;
  void *v72;
  int *v73;
  std::runtime_error *exception;
  void *v75;
  std::string v76;
  void *v77;
  void *v78;
  uint64_t v79;
  std::string v80;
  void *__p;
  float *v82;
  float *v83;
  CFDataRef theData;
  void *v85;
  uint64_t v86;
  uint64_t v87;
  _BYTE buf[18];
  __int16 v89;
  void *v90;
  __int16 v91;
  _BYTE v92[10];
  __int16 v93;
  int v94;
  uint64_t v95;

  v95 = *MEMORY[0x1E0C80C00];
  v4 = (char *)a1 + 15897;
  v85 = 0;
  v86 = 0;
  v87 = 0;
  if (*a2 == 1)
  {
    v5 = (const void *)MGCopyAnswer();
    if (SHIBYTE(v87) < 0)
    {
      v86 = 9;
      v7 = v85;
      v6 = (char *)v85 + 9;
    }
    else
    {
      v6 = (char *)&v86 + 1;
      HIBYTE(v87) = 9;
      v7 = &v85;
    }
    v7[8] = 101;
    v8 = "reference";
  }
  else
  {
    if (*a2)
      goto LABEL_33;
    v5 = (const void *)MGCopyAnswer();
    if (SHIBYTE(v87) < 0)
    {
      v86 = 10;
      v7 = v85;
      v6 = (char *)v85 + 10;
    }
    else
    {
      v6 = (char *)&v86 + 2;
      HIBYTE(v87) = 10;
      v7 = &v85;
    }
    *((_WORD *)v7 + 4) = 25966;
    v8 = "microphone";
  }
  *(_QWORD *)v7 = *(_QWORD *)v8;
  *v6 = 0;
  if (v5)
  {
    applesauce::CF::DataRef::DataRef((applesauce::CF::DataRef *)&theData, v5);
    if (!theData)
    {
      if (VPLogScope(void)::once != -1)
        dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
      v20 = (_QWORD *)VPLogScope(void)::scope;
      if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(1, VPLogScope(void)::scope, 0))
      {
        v21 = (*v20 ? *v20 : MEMORY[0x1E0C81028]);
        if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
        {
          v22 = &v85;
          if (v87 < 0)
            v22 = v85;
          *(_DWORD *)buf = 136315650;
          *(_QWORD *)&buf[4] = "VoiceProcessor_v7.cpp";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = 570;
          v89 = 2080;
          v90 = v22;
          _os_log_impl(&dword_1B5ED0000, v21, OS_LOG_TYPE_ERROR, "%25s:%-5d  >vp> couldn't parse %s trim gains - CF data is not invalid", buf, 0x1Cu);
        }
      }
      v23 = (int *)a1[1570];
      if (v23 && (*v4 || v4[1]))
      {
        if (VPLogScope(void)::once != -1)
          dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
        v24 = (const char *)&v85;
        if (v87 < 0)
          v24 = (const char *)v85;
        CALegacyLog::log(v23, 1, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v7/VoiceProcessor_v7.cpp", 570, "operator()", "couldn't parse %s trim gains - CF data is not invalid", v24);
      }
      goto LABEL_221;
    }
    BytePtr = CFDataGetBytePtr(theData);
    if (!BytePtr)
    {
      if (VPLogScope(void)::once != -1)
        dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
      v25 = (_QWORD *)VPLogScope(void)::scope;
      if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(1, VPLogScope(void)::scope, 0))
      {
        v26 = (*v25 ? *v25 : MEMORY[0x1E0C81028]);
        if (os_log_type_enabled(v26, OS_LOG_TYPE_ERROR))
        {
          v27 = &v85;
          if (v87 < 0)
            v27 = v85;
          *(_DWORD *)buf = 136315650;
          *(_QWORD *)&buf[4] = "VoiceProcessor_v7.cpp";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = 577;
          v89 = 2080;
          v90 = v27;
          _os_log_impl(&dword_1B5ED0000, v26, OS_LOG_TYPE_ERROR, "%25s:%-5d  >vp> couldn't parse %s trim gains - raw data is NULL", buf, 0x1Cu);
        }
      }
      v28 = (int *)a1[1570];
      if (v28 && (*v4 || v4[1]))
      {
        if (VPLogScope(void)::once != -1)
          dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
        v29 = (const char *)&v85;
        if (v87 < 0)
          v29 = (const char *)v85;
        CALegacyLog::log(v28, 1, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v7/VoiceProcessor_v7.cpp", 577, "operator()", "couldn't parse %s trim gains - raw data is NULL", v29);
      }
      goto LABEL_221;
    }
    if (!theData)
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Could not construct");
    }
    Length = CFDataGetLength(theData);
    if (Length <= 4)
    {
      if (VPLogScope(void)::once != -1)
        dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
      v11 = (_QWORD *)VPLogScope(void)::scope;
      if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(1, VPLogScope(void)::scope, 0))
      {
        v12 = (*v11 ? *v11 : MEMORY[0x1E0C81028]);
        if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
        {
          v13 = &v85;
          if (v87 < 0)
            v13 = v85;
          *(_DWORD *)buf = 136315650;
          *(_QWORD *)&buf[4] = "VoiceProcessor_v7.cpp";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = 592;
          v89 = 2080;
          v90 = v13;
          _os_log_impl(&dword_1B5ED0000, v12, OS_LOG_TYPE_ERROR, "%25s:%-5d  >vp> couldn't parse %s trim gains - raw data size is not valid", buf, 0x1Cu);
        }
      }
      v14 = (int *)a1[1570];
      if (v14 && (*v4 || v4[1]))
      {
        if (VPLogScope(void)::once != -1)
          dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
        CALegacyLog::log(v14, 1, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v7/VoiceProcessor_v7.cpp", 592, "operator()", "couldn't parse %s trim gains - raw data size is not valid");
      }
LABEL_221:
      if (theData)
        CFRelease(theData);
      goto LABEL_223;
    }
    v30 = *(_DWORD *)BytePtr;
    v31 = (unsigned __int16)HIWORD(*(_DWORD *)BytePtr);
    if (VPLogScope(void)::once != -1)
      dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
    v32 = (_QWORD *)VPLogScope(void)::scope;
    if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(5, VPLogScope(void)::scope, 0))
    {
      v33 = (*v32 ? *v32 : MEMORY[0x1E0C81028]);
      if (os_log_type_enabled(v33, OS_LOG_TYPE_DEBUG))
      {
        v34 = &v85;
        if (v87 < 0)
          v34 = v85;
        *(_DWORD *)buf = 136316418;
        *(_QWORD *)&buf[4] = "VoiceProcessor_v7.cpp";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 600;
        v89 = 2080;
        v90 = v34;
        v91 = 1024;
        *(_DWORD *)v92 = v31;
        *(_WORD *)&v92[4] = 1024;
        *(_DWORD *)&v92[6] = BYTE1(v30);
        v93 = 1024;
        v94 = v30;
        _os_log_impl(&dword_1B5ED0000, v33, OS_LOG_TYPE_DEBUG, "%25s:%-5d  <vp> loaded %s trim gains header from MobileGestalt: {version=%d, size=%d, count=%d}", buf, 0x2Eu);
      }
    }
    v35 = (int *)a1[1570];
    if (v35 && (*v4 || v4[1]))
    {
      if (VPLogScope(void)::once != -1)
        dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
      v36 = (const char *)&v85;
      if (v87 < 0)
        v36 = (const char *)v85;
      CALegacyLog::log(v35, 5, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v7/VoiceProcessor_v7.cpp", 600, "operator()", "loaded %s trim gains header from MobileGestalt: {version=%d, size=%d, count=%d}", v36, HIWORD(v30), BYTE1(v30), v30);
    }
    if (v31 != 1)
    {
      if (VPLogScope(void)::once != -1)
        dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
      v42 = (_QWORD *)VPLogScope(void)::scope;
      if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(1, VPLogScope(void)::scope, 0))
      {
        v43 = (*v42 ? *v42 : MEMORY[0x1E0C81028]);
        if (os_log_type_enabled(v43, OS_LOG_TYPE_ERROR))
        {
          v44 = &v85;
          if (v87 < 0)
            v44 = v85;
          *(_DWORD *)buf = 136315906;
          *(_QWORD *)&buf[4] = "VoiceProcessor_v7.cpp";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = 605;
          v89 = 2080;
          v90 = v44;
          v91 = 1024;
          *(_DWORD *)v92 = v31;
          _os_log_impl(&dword_1B5ED0000, v43, OS_LOG_TYPE_ERROR, "%25s:%-5d  >vp> couldn't parse %s trim gains - data structure version %d is not supported", buf, 0x22u);
        }
      }
      v45 = (int *)a1[1570];
      if (v45 && (*v4 || v4[1]))
      {
        if (VPLogScope(void)::once != -1)
          dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
        v46 = (const char *)&v85;
        if (v87 < 0)
          v46 = (const char *)v85;
        CALegacyLog::log(v45, 1, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v7/VoiceProcessor_v7.cpp", 605, "operator()", "couldn't parse %s trim gains - data structure version %d is not supported", v46, HIWORD(v30));
      }
      goto LABEL_221;
    }
    v37 = v30;
    if (Length < BYTE1(v30) * v30 + 4)
    {
      if (VPLogScope(void)::once != -1)
        dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
      v38 = (_QWORD *)VPLogScope(void)::scope;
      if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(1, VPLogScope(void)::scope, 0))
      {
        v39 = (*v38 ? *v38 : MEMORY[0x1E0C81028]);
        if (os_log_type_enabled(v39, OS_LOG_TYPE_ERROR))
        {
          v40 = &v85;
          if (v87 < 0)
            v40 = v85;
          *(_DWORD *)buf = 136315650;
          *(_QWORD *)&buf[4] = "VoiceProcessor_v7.cpp";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = 609;
          v89 = 2080;
          v90 = v40;
          _os_log_impl(&dword_1B5ED0000, v39, OS_LOG_TYPE_ERROR, "%25s:%-5d  >vp> couldn't parse %s trim gains - raw data size is not valid", buf, 0x1Cu);
        }
      }
      v41 = (int *)a1[1570];
      if (v41 && (*v4 || v4[1]))
      {
        if (VPLogScope(void)::once != -1)
          dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
        CALegacyLog::log(v41, 1, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v7/VoiceProcessor_v7.cpp", 609, "operator()", "couldn't parse %s trim gains - raw data size is not valid");
      }
      goto LABEL_221;
    }
    if ((v30 & 0xFF00) != 0x200)
    {
      if (VPLogScope(void)::once != -1)
        dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
      v70 = CALog::LogObjIfEnabled(1, VPLogScope(void)::scope);
      if (v70)
      {
        v71 = v70;
        if (os_log_type_enabled(v70, OS_LOG_TYPE_ERROR))
        {
          v72 = &v85;
          if (v87 < 0)
            v72 = v85;
          *(_DWORD *)buf = 136315650;
          *(_QWORD *)&buf[4] = "VoiceProcessor_v7.cpp";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = 613;
          v89 = 2080;
          v90 = v72;
          _os_log_impl(&dword_1B5ED0000, v71, OS_LOG_TYPE_ERROR, "%25s:%-5d  >vp> couldn't parse %s trim gains - data structure size is not valid", buf, 0x1Cu);
        }
      }
      v73 = (int *)a1[1570];
      if (v73 && (*v4 || v4[1]))
      {
        if (VPLogScope(void)::once != -1)
          dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
        CALegacyLog::log(v73, 1, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v7/VoiceProcessor_v7.cpp", 613, "operator()", "couldn't parse %s trim gains - data structure size is not valid");
      }
      goto LABEL_221;
    }
    __p = 0;
    v82 = 0;
    v83 = 0;
    memset(&v80, 0, sizeof(v80));
    v77 = 0;
    v78 = 0;
    v79 = 0;
    std::vector<char>::__assign_with_size[abi:ne180100]<char *,char *>(&v77, (char *)BytePtr + 4, (char *)&BytePtr[((2 * v30 + 2) & 0x3FC) + 4], (2 * v30 + 2) & 0x3FC);
    Endianness::Swap<(Endianness::Direction)1,short>(buf, (__int16 **)&v77);
    v47 = *(__int16 **)&buf[8];
    v75 = *(void **)buf;
    if (*(_QWORD *)buf != *(_QWORD *)&buf[8])
    {
      v48 = *(__int16 **)buf;
      do
      {
        v49 = (double)*v48 * 0.1;
        v50 = v82;
        if (v82 >= v83)
        {
          v52 = (float *)__p;
          v53 = ((char *)v82 - (_BYTE *)__p) >> 2;
          v54 = v53 + 1;
          if ((unint64_t)(v53 + 1) >> 62)
            std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
          v55 = (char *)v83 - (_BYTE *)__p;
          if (((char *)v83 - (_BYTE *)__p) >> 1 > v54)
            v54 = v55 >> 1;
          if ((unint64_t)v55 >= 0x7FFFFFFFFFFFFFFCLL)
            v56 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v56 = v54;
          if (v56)
          {
            v57 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>((uint64_t)&v83, v56);
            v52 = (float *)__p;
            v50 = v82;
          }
          else
          {
            v57 = 0;
          }
          v58 = (float *)&v57[4 * v53];
          *v58 = v49;
          v51 = v58 + 1;
          while (v50 != v52)
          {
            v59 = *((_DWORD *)v50-- - 1);
            *((_DWORD *)v58-- - 1) = v59;
          }
          __p = v58;
          v82 = v51;
          v83 = (float *)&v57[4 * v56];
          if (v52)
            operator delete(v52);
        }
        else
        {
          *v82 = v49;
          v51 = v50 + 1;
        }
        v82 = v51;
        std::to_string(&v76, v49);
        if ((v76.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v60 = &v76;
        else
          v60 = (std::string *)v76.__r_.__value_.__r.__words[0];
        if ((v76.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          size = HIBYTE(v76.__r_.__value_.__r.__words[2]);
        else
          size = v76.__r_.__value_.__l.__size_;
        std::string::append(&v80, (const std::string::value_type *)v60, size);
        if (SHIBYTE(v76.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v76.__r_.__value_.__l.__data_);
        if (v37 <= (unint64_t)(((char *)v82 - (_BYTE *)__p) >> 2))
          break;
        std::string::append(&v80, ", ", 2uLL);
        ++v48;
      }
      while (v48 != v47);
    }
    if (v75)
      operator delete(v75);
    if (VPLogScope(void)::once != -1)
      dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
    v62 = CALog::LogObjIfEnabled(5, VPLogScope(void)::scope);
    if (v62)
    {
      v63 = v62;
      if (os_log_type_enabled(v62, OS_LOG_TYPE_DEBUG))
      {
        v64 = &v85;
        if (v87 < 0)
          v64 = v85;
        v65 = &v80;
        if ((v80.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          v65 = (std::string *)v80.__r_.__value_.__r.__words[0];
        *(_DWORD *)buf = 136315906;
        *(_QWORD *)&buf[4] = "VoiceProcessor_v7.cpp";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 637;
        v89 = 2080;
        v90 = v64;
        v91 = 2080;
        *(_QWORD *)v92 = v65;
        _os_log_impl(&dword_1B5ED0000, v63, OS_LOG_TYPE_DEBUG, "%25s:%-5d  <vp> loaded %s trim gains from MobileGestalt: {%s}", buf, 0x26u);
      }
    }
    v66 = (int *)a1[1570];
    if (v66 && (*v4 || v4[1]))
    {
      if (VPLogScope(void)::once != -1)
        dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
      v67 = (const char *)&v85;
      if (v87 < 0)
        v67 = (const char *)v85;
      v68 = &v80;
      if ((v80.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v68 = (std::string *)v80.__r_.__value_.__r.__words[0];
      CALegacyLog::log(v66, 5, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v7/VoiceProcessor_v7.cpp", 637, "operator()", "loaded %s trim gains from MobileGestalt: {%s}", v67, (const char *)v68);
    }
    if (*a2)
    {
      if (*a2 != 1)
      {
LABEL_215:
        if (v77)
        {
          v78 = v77;
          operator delete(v77);
        }
        if (SHIBYTE(v80.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v80.__r_.__value_.__l.__data_);
        if (__p)
        {
          v82 = (float *)__p;
          operator delete(__p);
        }
        goto LABEL_221;
      }
      v69 = 32781;
    }
    else
    {
      v69 = 32780;
    }
    (*(void (**)(_QWORD *, uint64_t))(*a1 + 56))(a1, v69);
    goto LABEL_215;
  }
LABEL_33:
  if (VPLogScope(void)::once != -1)
    dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
  v15 = (_QWORD *)VPLogScope(void)::scope;
  if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(1, VPLogScope(void)::scope, 0))
  {
    v16 = (*v15 ? *v15 : MEMORY[0x1E0C81028]);
    if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
    {
      v17 = &v85;
      if (v87 < 0)
        v17 = v85;
      *(_DWORD *)buf = 136315650;
      *(_QWORD *)&buf[4] = "VoiceProcessor_v7.cpp";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 563;
      v89 = 2080;
      v90 = v17;
      _os_log_impl(&dword_1B5ED0000, v16, OS_LOG_TYPE_ERROR, "%25s:%-5d  >vp> couldn't load %s trim gains from MobileGestalt", buf, 0x1Cu);
    }
  }
  v18 = (int *)a1[1570];
  if (v18 && (*v4 || v4[1]))
  {
    if (VPLogScope(void)::once != -1)
      dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
    v19 = (const char *)&v85;
    if (v87 < 0)
      v19 = (const char *)v85;
    CALegacyLog::log(v18, 1, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v7/VoiceProcessor_v7.cpp", 563, "operator()", "couldn't load %s trim gains from MobileGestalt", v19);
  }
LABEL_223:
  if (SHIBYTE(v87) < 0)
    operator delete(v85);
}

void sub_1B644765C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *__p,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,void *a30,uint64_t a31,uint64_t a32,const void *a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39)
{
  if (__p)
    operator delete(__p);
  if (a29 < 0)
    operator delete(a24);
  if (a30)
    operator delete(a30);
  applesauce::CF::DataRef::~DataRef(&a33);
  if (a39 < 0)
    operator delete(a34);
  _Unwind_Resume(a1);
}

void Endianness::Swap<(Endianness::Direction)1,short>(_QWORD *a1, __int16 **a2)
{
  unint64_t v2;
  char *v5;
  size_t v6;
  __int16 *v7;
  unint64_t v8;
  unint64_t v9;
  _WORD *v10;
  __int16 v11;

  v2 = (char *)a2[1] - (char *)*a2;
  a1[1] = 0;
  a1[2] = 0;
  *a1 = 0;
  if (v2 >= 2)
  {
    std::vector<short>::__vallocate[abi:ne180100](a1, v2 >> 1);
    v5 = (char *)a1[1];
    v6 = v2 & 0xFFFFFFFFFFFFFFFELL;
    bzero(v5, v6);
    a1[1] = &v5[v6];
    v7 = *a2;
    v8 = (char *)a2[1] - (char *)*a2;
    if (v8 >= 2)
    {
      v9 = v8 >> 1;
      v10 = (_WORD *)*a1;
      do
      {
        v11 = *v7++;
        *v10++ = v11;
        --v9;
      }
      while (v9);
    }
  }
}

void sub_1B64477C4(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

double vp::v7::create@<D0>(vp::v7 *this@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v5;
  double result;

  v5 = operator new();
  VoiceProcessorV4::VoiceProcessorV4((VoiceProcessorV4 *)v5, this);
  *(_QWORD *)(v5 + 17056) = 0;
  result = 0.0;
  *(_OWORD *)(v5 + 17040) = 0u;
  *(_BYTE *)(v5 + 17064) = 0;
  *(_BYTE *)(v5 + 479) = 1;
  *(_OWORD *)(v5 + 17072) = 0u;
  *(_OWORD *)(v5 + 17088) = 0u;
  *(_OWORD *)(v5 + 17104) = 0u;
  *(_OWORD *)(v5 + 17120) = 0u;
  *(_OWORD *)(v5 + 17136) = 0u;
  *(_OWORD *)(v5 + 17152) = 0u;
  *(_OWORD *)(v5 + 17168) = 0u;
  *(_DWORD *)(v5 + 17184) = 0;
  *(_OWORD *)(v5 + 17192) = 0u;
  *(_OWORD *)(v5 + 17208) = 0u;
  *(_OWORD *)(v5 + 17224) = 0u;
  *(_OWORD *)(v5 + 17240) = 0u;
  *(_OWORD *)(v5 + 17256) = 0u;
  *(_OWORD *)(v5 + 17268) = 0u;
  *(_OWORD *)(v5 + 17304) = 0u;
  *(_OWORD *)(v5 + 17320) = 0u;
  *(_OWORD *)(v5 + 17288) = 0u;
  *(_QWORD *)v5 = &off_1E69DC868;
  *a2 = v5;
  return result;
}

void sub_1B64478E8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1BCC95CEC](v1, 0x10F3C4028E7192ALL);
  _Unwind_Resume(a1);
}

void AULando::LRLsRs::algoExtractLsRsPI(AULando::LRLsRs *this, void *__src, const float *a3, float *__dst, float *a5, float *a6, float *a7, float *a8, _QWORD *a9, AULando::Tools *a10)
{
  vDSP_Length v15;
  uint64_t v18;
  const float *v19;
  uint64_t v20;
  uint64_t v21;
  float v22;
  float v23;
  float v24;
  float __B;
  _QWORD v26[2];
  _QWORD v27[3];

  v27[2] = *MEMORY[0x1E0C80C00];
  v15 = this;
  if ((_DWORD)a8)
  {
    MEMORY[0x1E0C80A78](this);
    v19 = (const float *)((char *)&v21 - ((v18 + 15) & 0x7FFFFFFF0));
    v27[0] = v20;
    v27[1] = v19;
    (*(void (**)(_QWORD, void *, _QWORD *, uint64_t, AULando::LRLsRs *, _QWORD, float))(*(_QWORD *)*a9 + 40))(*a9, __src, v27, 2, this, 0, 1.0);
    __B = -0.40518;
    v24 = -0.071903;
    vDSP_vsmul(v19, 1, &__B, a6, 1, v15);
    vDSP_vsmul(v19, 1, &v24, a7, 1, v15);
    v26[0] = a5;
    v26[1] = v19;
    (*(void (**)(_QWORD, const float *, _QWORD *, uint64_t, AULando::LRLsRs *, _QWORD, float))(*(_QWORD *)a9[1] + 40))(a9[1], a3, v26, 2, this, 0, 1.0);
    v23 = 0.071903;
    v22 = 0.40518;
    vDSP_vsma(v19, 1, &v23, a6, 1, a6, 1, v15);
    vDSP_vsma(v19, 1, &v22, a7, 1, a7, 1, v15);
  }
  else
  {
    memcpy(__dst, __src, 4 * this);
    memcpy(a5, a3, 4 * v15);
    LODWORD(v27[0]) = 1053783024;
    LODWORD(v26[0]) = 1033060810;
    vDSP_vsmul((const float *)__src, 1, (const float *)v27, a6, 1, v15);
    vDSP_vsmul((const float *)__src, 1, (const float *)v26, a7, 1, v15);
    __B = -0.071903;
    v24 = -0.40518;
    vDSP_vsma(a3, 1, &__B, a6, 1, a6, 1, v15);
    vDSP_vsma(a3, 1, &v24, a7, 1, a7, 1, v15);
  }
}

void AULando::LRLsRs::algoUpmixPI(AULando::LRLsRs *this, AULando::LRLsRs *a2, const float *__C, float *__E, float *a5, float *a6, float *a7, float *a8, _QWORD *a9, AULando::Tools *a10)
{
  uint64_t v15;
  AULando::LRLsRs *v16;
  uint64_t v17;
  uint64_t v18;
  const float *v19;
  uint64_t v20;
  uint64_t v21;
  const float *v22;
  uint64_t v23;
  uint64_t v24;
  const float *v25;
  vDSP_Length v26;
  _BYTE v27[5];
  _QWORD v28[2];
  float *v29;
  _QWORD v30[5];

  v30[4] = *MEMORY[0x1E0C80C00];
  if ((_DWORD)a8)
  {
    v28[1] = v28;
    v29 = a7;
    MEMORY[0x1E0C80A78](this);
    v16 = (AULando::LRLsRs *)((char *)v28 - ((v15 + 15) & 0x7FFFFFFF0));
    MEMORY[0x1E0C80A78](v17);
    v19 = (const float *)((char *)v28 - v18);
    MEMORY[0x1E0C80A78](v20);
    v22 = (const float *)((char *)v28 - v21);
    MEMORY[0x1E0C80A78](v23);
    v25 = (const float *)((char *)v28 - v24);
    v30[2] = v16;
    v30[3] = v19;
    (*(void (**)(_QWORD, float))(*(_QWORD *)*a9 + 40))(*a9, 1.0);
    v30[0] = v22;
    v30[1] = v25;
    (*(void (**)(_QWORD, const float *, _QWORD *, uint64_t, AULando::LRLsRs *, _QWORD, float))(*(_QWORD *)a9[1] + 40))(a9[1], __C, v30, 2, this, 0, 1.0);
    BYTE4(v26) = 1;
    LODWORD(v26) = (_DWORD)this;
    AULando::LRLsRs::decode_PI(v16, v19, v22, v25, __E, a5, a6, v29, v26, *(unsigned int *)v27, v27[4]);
  }
  else
  {
    BYTE4(a9) = 0;
    LODWORD(a9) = (_DWORD)this;
    AULando::LRLsRs::decode_PI(a2, (const float *)a2, __C, __C, __E, a5, a6, a7, (vDSP_Length)a9, a10, SBYTE4(a10));
  }
}

void AULando::LRLsRs::decode_PI(AULando::LRLsRs *this, const float *a2, const float *__C, const float *a4, float *__E, float *a6, float *a7, float *a8, vDSP_Length a9, unsigned int a10, BOOL a11)
{
  float v17;
  float v19;
  float v20;
  float v21;
  float v22;
  float v23;
  float v24;
  float __D;
  float __B;

  __D = 0.26118;
  __B = 0.61155;
  vDSP_vsmsma((const float *)this, 1, &__B, __C, 1, &__D, __E, 1, a9);
  v23 = 0.61155;
  v24 = 0.26118;
  vDSP_vsmsma((const float *)this, 1, &v24, __C, 1, &v23, a6, 1, a9);
  if (BYTE4(a9))
    v17 = 1.0;
  else
    v17 = -1.0;
  v21 = v17 * 0.071903;
  v22 = v17 * -0.40518;
  vDSP_vsmsma(a2, 1, &v22, a4, 1, &v21, a7, 1, a9);
  v19 = v17 * 0.40518;
  v20 = v17 * -0.071903;
  vDSP_vsmsma(a2, 1, &v20, a4, 1, &v19, a8, 1, a9);
}

void AUOneChannelNS::~AUOneChannelNS(AUOneChannelNS *this)
{
  AUOneChannelNS::~AUOneChannelNS(this);
  JUMPOUT(0x1BCC95CECLL);
}

{
  uint64_t v2;
  uint64_t v3;
  void *v4;

  *(_QWORD *)this = &off_1E69DCB70;
  AUOneChannelNS::Cleanup(this);
  v2 = *((_QWORD *)this + 70);
  if (v2)
    MEMORY[0x1BCC95CC8](v2, 0x1000C8052888210);
  *((_QWORD *)this + 69) = 0;
  *((_QWORD *)this + 70) = 0;
  v3 = *((_QWORD *)this + 72);
  if (v3)
    MEMORY[0x1BCC95CC8](v3, 0x1000C8052888210);
  *((_QWORD *)this + 71) = 0;
  *((_QWORD *)this + 72) = 0;
  v4 = (void *)*((_QWORD *)this + 77);
  if (v4)
    free(v4);
  std::unique_ptr<BlockProcessor>::reset[abi:ne180100]((uint64_t *)this + 66, 0);
  ausdk::AUBase::~AUBase(this);
}

uint64_t AUOneChannelNS::Initialize(AUOneChannelNS *this)
{
  double v2;
  uint64_t v3;
  double v4;
  unsigned int v5;
  BlockProcessor *v6;
  char *v7;
  char *v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  float *v12;
  float *v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  float v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  float v23;
  uint64_t v24;
  unsigned int v25;
  unsigned int v26;

  (*(void (**)(AUOneChannelNS *))(*(_QWORD *)this + 64))(this);
  *((_BYTE *)this + 548) = *(_DWORD *)(ausdk::AUScope::SafeGetElement((AUOneChannelNS *)((char *)this + 80), 0) + 88) == 1718773105;
  *((_BYTE *)this + 549) = *(_DWORD *)(ausdk::AUScope::SafeGetElement((AUOneChannelNS *)((char *)this + 128), 0) + 88) == 1718773105;
  v2 = *(double *)(ausdk::AUScope::SafeGetElement((AUOneChannelNS *)((char *)this + 128), 0) + 80);
  if (*((_BYTE *)this + 376))
  {
    v3 = *((unsigned int *)this + 84);
  }
  else
  {
    v4 = *(double *)(ausdk::AUScope::SafeGetElement((AUOneChannelNS *)((char *)this + 128), 0) + 80);
    if (v4 >= 16000.0)
      v5 = 512;
    else
      v5 = 256;
    if (v4 >= 32000.0)
      v3 = 1024;
    else
      v3 = v5;
    v26 = *(_DWORD *)(ausdk::AUScope::SafeGetElement((AUOneChannelNS *)((char *)this + 80), 0) + 108);
    v25 = *(_DWORD *)(ausdk::AUScope::SafeGetElement((AUOneChannelNS *)((char *)this + 128), 0) + 108);
    v6 = (BlockProcessor *)operator new();
    BlockProcessor::BlockProcessor(v6, 1, &v26, 1, &v25, v3, (int (*)(void *, unsigned int, const AudioBufferList **, AudioBufferList **))AUOneChannelNS::BlockProcessClassFunc, this);
    v24 = 0;
    std::unique_ptr<BlockProcessor>::reset[abi:ne180100]((uint64_t *)this + 66, (uint64_t)v6);
    std::unique_ptr<BlockProcessor>::reset[abi:ne180100](&v24, 0);
  }
  v7 = CNoiseSuppressorV3::speex_preprocess_state_init((CNoiseSuppressorV3 *)v3, v2, 0);
  *((_QWORD *)this + 78) = v7;
  if (!v7)
    return 4294956421;
  v8 = v7;
  v9 = *((_DWORD *)this + 147);
  *((_DWORD *)v7 + 114) = v9 == 1;
  *((_DWORD *)v7 + 116) = *((_DWORD *)this + 148) == 1;
  v10 = *((_QWORD *)this + 75);
  *((_QWORD *)v7 + 13) = v10;
  if (v9)
  {
    v11 = *((unsigned int *)v7 + 1);
    *((_DWORD *)v7 + 18) = 6;
    *((_QWORD *)v7 + 8) = CNoiseSuppressorV3::setup_update_thresh_lut_vadns(int,int,float,SpeexPair_tV2 **,int *,float **)::threshold_points;
    v23 = *(float *)&v10;
    *(float *)&dword_1EF134778 = (float)(int)v2 * 0.5;
    CNoiseSuppressorV4::curve_fn(CNoiseSuppressorV3::setup_update_thresh_lut_vadns(int,int,float,SpeexPair_tV2 **,int *,float **)::threshold_points, 6, v11, *((_QWORD *)v7 + 10));
    if ((int)v11 >= 1)
    {
      v12 = (float *)*((_QWORD *)v8 + 10);
      do
      {
        *v12 = *v12 * v23;
        ++v12;
        --v11;
      }
      while (v11);
    }
    v13 = (float *)*((_QWORD *)this + 77);
    v14 = *((_DWORD *)this + 152);
    v15 = *((_QWORD *)this + 78);
    v16 = *(unsigned int *)(v15 + 4);
    v17 = *(float *)(v15 + 108);
    v18 = malloc_type_malloc(4 * *(int *)(v15 + 4), 0x100004052888210uLL);
    *(_QWORD *)(v15 + 112) = v18;
    if (v14 <= 0)
    {
      if ((int)v16 >= 1)
        memset_pattern16(v18, &unk_1B6627B80, 4 * v16);
    }
    else
    {
      CNoiseSuppressorV4::curve_fn(v13, v14, v16, (uint64_t)v18);
      if ((int)v16 >= 1)
      {
        v19 = 0;
        v20 = 4 * v16;
        do
        {
          if (v17 != 0.0)
          {
            v21 = *(_QWORD *)(v15 + 112);
            *(float *)(v21 + v19) = powf(*(float *)(v21 + v19), v17);
          }
          v19 += 4;
        }
        while (v20 != v19);
      }
    }
    v8 = (char *)*((_QWORD *)this + 78);
  }
  if (*((_QWORD *)this + 70))
  {
    CNoiseSuppressorV4::speex_preprocess_load_known_noise((void **)v8, (uint64_t)this + 552, 1);
    v8 = (char *)*((_QWORD *)this + 78);
  }
  if (*((_QWORD *)this + 72))
  {
    CNoiseSuppressorV4::speex_preprocess_load_known_noise((void **)v8, (uint64_t)this + 568, 2);
    v8 = (char *)*((_QWORD *)this + 78);
  }
  *((_DWORD *)v8 + 115) = *((_DWORD *)this + 146);
  *((_DWORD *)this + 136) = *((_DWORD *)this + 135);
  AUOneChannelNS::UpdateParameters(this);
  return 0;
}

void sub_1B6448260(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1BCC95CEC](v1, 0x1080C40622722D2);
  _Unwind_Resume(a1);
}

uint64_t *AUOneChannelNS::Cleanup(AUOneChannelNS *this)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 78);
  if (v2)
  {
    CNoiseSuppressorV3::speex_preprocess_state_destroy(v2);
    *((_QWORD *)this + 78) = 0;
  }
  return std::unique_ptr<BlockProcessor>::reset[abi:ne180100]((uint64_t *)this + 66, 0);
}

uint64_t AUOneChannelNS::GetPropertyInfo(AUOneChannelNS *this, int a2, int a3, unsigned int a4, unsigned int *a5, BOOL *a6)
{
  uint64_t result;
  unsigned int v8;
  char v9;

  if (a3)
    return 4294956417;
  v8 = 4;
  result = 4294956417;
  if (a2 > 4522)
  {
    if ((a2 - 4523) >= 2)
    {
      if (a2 != 4525)
        return result;
      v8 = 24;
    }
    v9 = *((_BYTE *)this + 17) ^ 1;
LABEL_12:
    result = 0;
    *a6 = v9;
    *a5 = v8;
    return result;
  }
  v9 = 1;
  if (a2 == 21 || a2 == 3700 || a2 == 4521)
    goto LABEL_12;
  return result;
}

uint64_t AUOneChannelNS::GetProperty(AUOneChannelNS *this, int a2, int a3, unsigned int a4, _QWORD *a5)
{
  uint64_t result;
  int v8;
  __int128 v9;

  if (a3)
    return 4294956417;
  result = 4294956417;
  switch(a2)
  {
    case 4521:
      result = 0;
      v8 = *((_DWORD *)this + 146);
      goto LABEL_12;
    case 4522:
      return result;
    case 4523:
      result = 0;
      v8 = *((_DWORD *)this + 147);
      goto LABEL_12;
    case 4524:
      result = 0;
      v8 = *((_DWORD *)this + 148);
      goto LABEL_12;
    case 4525:
      result = 0;
      v9 = *(_OWORD *)((char *)this + 600);
      a5[2] = *((_QWORD *)this + 77);
      *(_OWORD *)a5 = v9;
      return result;
    default:
      if (a2 == 3700)
      {
        result = 0;
        v8 = *((unsigned __int8 *)this + 376);
      }
      else
      {
        if (a2 != 21)
          return result;
        v8 = (*(uint64_t (**)(AUOneChannelNS *))(*(_QWORD *)this + 576))(this);
        result = 0;
      }
LABEL_12:
      *(_DWORD *)a5 = v8;
      break;
  }
  return result;
}

uint64_t AUOneChannelNS::SetProperty(AUOneChannelNS *this, int a2, int a3, unsigned int a4, CFDictionaryRef *a5, unsigned int a6)
{
  uint64_t result;
  int v8;
  int v9;
  int v10;
  float v11;
  uint64_t v12;
  CFDictionaryRef v13;
  size_t v14;
  void *v15;
  const __CFDictionary *v16;
  const void *Value;
  _BOOL4 v18;
  BOOL v19;

  if (a3)
    return 4294956417;
  result = 4294956417;
  switch(a2)
  {
    case 4520:
      if (*((_BYTE *)this + 17))
        return 4294956447;
      if (!a5)
        return 4294956445;
      v16 = *a5;
      Value = CFDictionaryGetValue(*a5, CFSTR("NoiseUpperBound"));
      v18 = Value != 0;
      if (!Value || (result = AUOneChannelNS::SetNoiseBound((uint64_t)this, 0, Value), !(_DWORD)result))
      {
        result = (uint64_t)CFDictionaryGetValue(v16, CFSTR("NoiseLowerBound"));
        if (result)
        {
          LODWORD(result) = AUOneChannelNS::SetNoiseBound((uint64_t)this, 1, (CFTypeRef)result);
          if (Value)
            v19 = 1;
          else
            v19 = (_DWORD)result == 0;
          v18 = v19;
        }
        if (v18)
          return result;
        else
          return 4294956445;
      }
      return result;
    case 4521:
    case 4523:
    case 4524:
      result = 4294956445;
      if (a6 == 4)
      {
        v8 = *(_DWORD *)a5;
        if (*(_DWORD *)a5 <= 1u)
        {
          if (a2 == 4521)
          {
            result = 0;
            *((_DWORD *)this + 146) = v8;
          }
          else
          {
            result = 0;
            if (a2 == 4523)
              *((_DWORD *)this + 147) = v8;
            else
              *((_DWORD *)this + 148) = v8;
          }
        }
      }
      return result;
    case 4522:
      return result;
    case 4525:
      if (!a5)
        return 0;
      result = 4294956445;
      if (*(float *)a5 >= 0.0)
      {
        v11 = *((float *)a5 + 1);
        if (v11 >= 0.0)
        {
          v12 = *((unsigned int *)a5 + 2);
          v13 = a5[2];
          *((_DWORD *)this + 150) = *(_DWORD *)a5;
          *((float *)this + 151) = v11;
          *((_DWORD *)this + 152) = v12;
          if ((_DWORD)v12)
          {
            v14 = 8 * v12;
            v15 = malloc_type_malloc(8 * v12, 0x100004000313F17uLL);
            *((_QWORD *)this + 77) = v15;
            memcpy(v15, v13, v14);
          }
          return 0;
        }
      }
      return result;
    default:
      if (a2 == 3700)
      {
        if (a6 >= 4)
        {
          result = 0;
          *((_BYTE *)this + 376) = *(_BYTE *)a5;
          return result;
        }
        return 4294956445;
      }
      if (a2 != 21)
        return result;
      if (a6 < 4)
        return 4294956445;
      v9 = *(_DWORD *)a5;
      v10 = *(_DWORD *)a5 != 0;
      if (v10 != (*(unsigned int (**)(AUOneChannelNS *))(*(_QWORD *)this + 576))(this))
        (*(void (**)(AUOneChannelNS *, BOOL))(*(_QWORD *)this + 584))(this, v9 != 0);
      return 0;
  }
}

uint64_t AUOneChannelNS::SetParameter(ausdk::AUElement ***this, unsigned int a2, unsigned int a3, unsigned int a4, float a5)
{
  ausdk::AUScope *Scope;
  ausdk::AUElement **v10;
  ausdk::AUElement *v11;
  ausdk::AUElement **v12;
  ausdk::AUElement *Element;

  if (a3)
  {
    Scope = (ausdk::AUScope *)ausdk::AUBase::GetScope((ausdk::AUBase *)this, a3);
  }
  else
  {
    v10 = this[9];
    if (v10)
    {
      v11 = (ausdk::AUElement *)(*((uint64_t (**)(ausdk::AUElement **, _QWORD))*v10 + 4))(v10, 0);
    }
    else
    {
      v12 = this[6];
      if (this[7] == v12)
        v11 = 0;
      else
        v11 = *v12;
    }
    ausdk::AUElement::SetParameter(v11, a2, a5, 0);
    ++*((_DWORD *)this + 135);
    Scope = (ausdk::AUScope *)(this + 4);
  }
  Element = (ausdk::AUElement *)ausdk::AUScope::SafeGetElement(Scope, a4);
  ausdk::AUElement::SetParameter(Element, a2, a5, 0);
  return 0;
}

uint64_t AUOneChannelNS::CanScheduleParameters(AUOneChannelNS *this)
{
  return 0;
}

uint64_t AUOneChannelNS::ProcessMultipleBufferLists(AUOneChannelNS *this, unsigned int *a2, unsigned int a3, unsigned int a4, const AudioBufferList **a5, unsigned int a6, AudioBufferList **a7)
{
  void *mData;
  void *v14;
  size_t mDataByteSize;
  int v16;
  const AudioBufferList *v17;
  uint64_t result;
  float *v19;
  const float *v20;
  uint64_t v21;
  __n128 v22;
  uint64_t v23;
  uint64_t v24;
  float v25;
  uint64_t v26;
  ausdk::AUElement *v27;
  ausdk::AUElement **v28;
  uint64_t v29;
  ausdk::AUElement *v30;
  ausdk::AUElement **v31;
  uint64_t v32;
  ausdk::AUElement *v33;
  ausdk::AUElement **v34;
  char *v35;
  AudioBufferList *v36;
  char *v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  const void *v41;
  AudioBufferList *v42;
  size_t v43;
  char *v44;
  uint64_t v45;
  const float *v46[2];

  if (*((_BYTE *)this + 376) && *((_DWORD *)this + 84) != a3)
    return 4294956422;
  if ((*(unsigned int (**)(AUOneChannelNS *, unsigned int *))(*(_QWORD *)this + 576))(this, a2))
  {
    if (*((unsigned __int8 *)this + 548) == *((unsigned __int8 *)this + 549))
    {
      mData = (*a5)->mBuffers[0].mData;
      v14 = (*a7)->mBuffers[0].mData;
      if (mData != v14)
      {
        mDataByteSize = (*a7)->mBuffers[0].mDataByteSize;
LABEL_55:
        memcpy(v14, mData, mDataByteSize);
      }
    }
    else
    {
      bzero((*a7)->mBuffers[0].mData, (*a7)->mBuffers[0].mDataByteSize);
    }
    return 0;
  }
  v16 = *((_DWORD *)this + 135);
  if (v16 != *((_DWORD *)this + 136))
  {
    AUOneChannelNS::UpdateParameters(this);
    *((_DWORD *)this + 136) = v16;
  }
  if (a4 < 2)
  {
    v17 = 0;
  }
  else
  {
    v17 = a5[1];
    if (v17)
      v17 = (const AudioBufferList *)v17->mBuffers[0].mData;
  }
  if (!*((_BYTE *)this + 376))
  {
    *(_QWORD *)(*((_QWORD *)this + 78) + 600) = v17;
    return BlockProcessor::Process(*((BlockProcessor **)this + 66), a3, a5, a7);
  }
  v19 = (float *)(*a5)->mBuffers[0].mData;
  if (*((_BYTE *)this + 548))
  {
    v20 = &v19[*((unsigned int *)this + 84)];
    v46[0] = v19;
    v46[1] = v20;
    v21 = *((_QWORD *)this + 78);
    *(_QWORD *)(v21 + 600) = v17;
    CNoiseSuppressorV3::speex_preprocess_run_freq(v21, v46, 0);
  }
  else
  {
    v23 = *((_QWORD *)this + 78);
    *(_QWORD *)(v23 + 600) = v17;
    v22.n128_f32[0] = CNoiseSuppressorV3::speex_preprocess_run((int *)v23, (char *)v19, 0);
  }
  v24 = *((_QWORD *)this + 78);
  if (v24)
    v25 = *(float *)(v24 + 332);
  else
    v25 = 0.0;
  v26 = *((_QWORD *)this + 9);
  if (v26)
  {
    v27 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD, __n128))(*(_QWORD *)v26 + 32))(v26, 0, v22);
  }
  else
  {
    v28 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v28)
      v27 = 0;
    else
      v27 = *v28;
  }
  ausdk::AUElement::SetParameter(v27, 1u, v25, 0);
  v29 = *((_QWORD *)this + 9);
  if (v29)
  {
    v30 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v29 + 32))(v29, 0);
  }
  else
  {
    v31 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v31)
      v30 = 0;
    else
      v30 = *v31;
  }
  ausdk::AUElement::SetParameter(v30, 2u, *(float *)(*((_QWORD *)this + 78) + 336), 0);
  v32 = *((_QWORD *)this + 9);
  if (v32)
  {
    v33 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v32 + 32))(v32, 0);
  }
  else
  {
    v34 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v34)
      v33 = 0;
    else
      v33 = *v34;
  }
  ausdk::AUElement::SetParameter(v33, 5u, *(float *)(*((_QWORD *)this + 78) + 340), 0);
  v35 = (char *)(*a7)->mBuffers[0].mData;
  if (*((_BYTE *)this + 549))
  {
    if (a6 >= 2 && (v36 = a7[1]) != 0)
      v37 = (char *)v36->mBuffers[0].mData;
    else
      v37 = 0;
    v38 = *((unsigned int *)this + 84);
    v39 = &v35[4 * v38];
    v40 = *((_QWORD *)this + 78);
    if (v40)
    {
      v41 = *(const void **)(v40 + 584);
      v19 = *(float **)(v40 + 592);
    }
    else
    {
      v41 = 0;
      v19 = 0;
    }
    memcpy(v35, v41, 4 * v38);
    v43 = 4 * *((unsigned int *)this + 84);
    v44 = v39;
  }
  else
  {
    if (a6 >= 2 && (v42 = a7[1]) != 0)
      v37 = (char *)v42->mBuffers[0].mData;
    else
      v37 = 0;
    v43 = 4 * *((unsigned int *)this + 84);
    v44 = v35;
  }
  memcpy(v44, v19, v43);
  result = 0;
  if (v37 && v37 != v35)
  {
    v45 = *((_QWORD *)this + 78);
    mData = *(void **)(v45 + 168);
    mDataByteSize = 4 * *(int *)(v45 + 4);
    v14 = v37;
    goto LABEL_55;
  }
  return result;
}

uint64_t AUOneChannelNS::Render(AUOneChannelNS *this, unsigned int *a2, const AudioTimeStamp *a3, uint64_t a4)
{
  ausdk::AUInputElement *Element;
  uint64_t result;
  ausdk::AUInputElement *v10;
  uint64_t v11;
  uint64_t BufferList;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD v19[2];
  _QWORD v20[3];

  v20[2] = *MEMORY[0x1E0C80C00];
  if (*((_BYTE *)this + 376) && *((_DWORD *)this + 84) != (_DWORD)a4)
    return 4294956422;
  if (!ausdk::AUBase::HasInput(this, 0))
    return 4294956420;
  Element = (ausdk::AUInputElement *)ausdk::AUScope::SafeGetElement((AUOneChannelNS *)((char *)this + 80), 0);
  result = ausdk::AUInputElement::PullInput(Element, a2, a3, 0, a4);
  if ((_DWORD)result)
    return result;
  if (ausdk::AUBase::HasInput(this, 1u))
  {
    v10 = (ausdk::AUInputElement *)ausdk::AUScope::SafeGetElement((AUOneChannelNS *)((char *)this + 80), 1u);
    result = ausdk::AUInputElement::PullInput(v10, a2, a3, 1, a4);
    if ((_DWORD)result)
      return result;
    v11 = ausdk::AUScope::SafeGetElement((AUOneChannelNS *)((char *)this + 80), 1u);
    BufferList = ausdk::AUBufferList::GetBufferList((ausdk::AUBufferList *)(v11 + 144));
  }
  else
  {
    BufferList = 0;
  }
  v13 = ausdk::AUScope::SafeGetElement((AUOneChannelNS *)((char *)this + 80), 0);
  v20[0] = ausdk::AUBufferList::GetBufferList((ausdk::AUBufferList *)(v13 + 144));
  v20[1] = BufferList;
  v14 = ausdk::AUScope::SafeGetElement((AUOneChannelNS *)((char *)this + 128), 0);
  v19[0] = ausdk::AUBufferList::GetBufferList((ausdk::AUBufferList *)(v14 + 144));
  v19[1] = 0;
  v15 = *((_QWORD *)this + 15);
  if (v15)
    v16 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v15 + 24))(v15);
  else
    v16 = (*((_QWORD *)this + 13) - *((_QWORD *)this + 12)) >> 3;
  v17 = *((_QWORD *)this + 21);
  if (v17)
    v18 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v17 + 24))(v17);
  else
    v18 = (*((_QWORD *)this + 19) - *((_QWORD *)this + 18)) >> 3;
  return (*(uint64_t (**)(AUOneChannelNS *, unsigned int *, uint64_t, uint64_t, _QWORD *, uint64_t, _QWORD *))(*(_QWORD *)this + 184))(this, a2, a4, v16, v20, v18, v19);
}

BOOL AUOneChannelNS::BusCountWritable(AUOneChannelNS *this, int a2)
{
  return (a2 - 1) <= 1 && *((_BYTE *)this + 17) == 0;
}

uint64_t AUOneChannelNS::SetBusCount(AUOneChannelNS *this, int a2, unsigned int a3)
{
  unsigned int v3;
  int64x2_t *v4;
  uint64_t v5;

  v3 = a3 - 1;
  if (a2 == 1 && v3 <= 1)
  {
    v4 = (int64x2_t *)((char *)this + 80);
LABEL_7:
    ausdk::AUScope::SetNumberOfElements(v4, a3);
    return 0;
  }
  v5 = 4294956445;
  if (a2 == 2 && v3 <= 1)
  {
    v4 = (int64x2_t *)((char *)this + 128);
    goto LABEL_7;
  }
  return v5;
}

uint64_t AUOneChannelNS::GetParameterList(AUOneChannelNS *this, int a2, unsigned int *a3, unsigned int *a4)
{
  unsigned int v4;

  if (a2)
  {
    v4 = 0;
  }
  else
  {
    if (a3)
    {
      *(_OWORD *)a3 = xmmword_1B6626920;
      *((_OWORD *)a3 + 1) = xmmword_1B66A0770;
    }
    v4 = 8;
  }
  *a4 = v4;
  return 0;
}

uint64_t AUOneChannelNS::GetParameterInfo(AUOneChannelNS *this, int a2, int a3, AudioUnitParameterInfo *buffer)
{
  uint64_t result;
  AudioUnitParameterValue v6;
  uint64_t v7;
  const __CFString *v8;
  AudioUnitParameterOptions v9;
  AudioUnitParameterOptions v10;

  buffer->flags = 0x40000000;
  buffer->unitName = 0;
  if (a2)
    return 4294956418;
  switch(a3)
  {
    case 0:
      buffer->cfNameString = CFSTR("noise supp level");
      buffer->flags = 1207959552;
      CFStringGetCString(CFSTR("noise supp level"), buffer->name, 52, 0x8000100u);
      result = 0;
      buffer->unit = kAudioUnitParameterUnit_Decibels;
      *(_QWORD *)&buffer->minValue = 0x42C80000C2C80000;
      v6 = -6.0;
      goto LABEL_14;
    case 1:
      buffer->cfNameString = CFSTR("speech prob");
      buffer->flags = 1207959552;
      CFStringGetCString(CFSTR("speech prob"), buffer->name, 52, 0x8000100u);
      result = 0;
      buffer->unit = kAudioUnitParameterUnit_Generic;
      v7 = 0x3F80000000000000;
      goto LABEL_8;
    case 2:
      v8 = CFSTR("noise SPL (gated PS)");
      goto LABEL_11;
    case 3:
      buffer->cfNameString = CFSTR("(I) AGC dynamic gain");
      buffer->flags = 1207959552;
      CFStringGetCString(CFSTR("(I) AGC dynamic gain"), buffer->name, 52, 0x8000100u);
      result = 0;
      buffer->unit = kAudioUnitParameterUnit_Decibels;
      v7 = 0x41A00000C1A00000;
LABEL_8:
      *(_QWORD *)&buffer->minValue = v7;
      v9 = buffer->flags | 0x8000;
      buffer->defaultValue = 0.0;
      buffer->flags = v9;
      return result;
    case 4:
      buffer->cfNameString = CFSTR("(I) AGC post gain");
      buffer->flags = 1207959552;
      CFStringGetCString(CFSTR("(I) AGC post gain"), buffer->name, 52, 0x8000100u);
      result = 0;
      buffer->unit = kAudioUnitParameterUnit_Decibels;
      *(_QWORD *)&buffer->minValue = 0x41A00000C1A00000;
      buffer->defaultValue = 0.0;
      return result;
    case 5:
      v8 = CFSTR("(I) noise SPL (one mic)");
LABEL_11:
      buffer->cfNameString = v8;
      buffer->flags = 1207959552;
      CFStringGetCString(v8, buffer->name, 52, 0x8000100u);
      result = 0;
      buffer->unit = kAudioUnitParameterUnit_Generic;
      *(_QWORD *)&buffer->minValue = 0x42C8000041A00000;
      v6 = 40.0;
      v10 = buffer->flags | 0x8000;
      goto LABEL_15;
    case 6:
      buffer->cfNameString = CFSTR("SPL Meter Calibration");
      buffer->flags = 1207959552;
      CFStringGetCString(CFSTR("SPL Meter Calibration"), buffer->name, 52, 0x8000100u);
      result = 0;
      buffer->unit = kAudioUnitParameterUnit_Decibels;
      *(_QWORD *)&buffer->minValue = 0x42C80000C1C80000;
      v6 = 80.0;
      goto LABEL_14;
    case 7:
      buffer->cfNameString = CFSTR("SPL Time Constant");
      buffer->flags = 1207959552;
      CFStringGetCString(CFSTR("SPL Time Constant"), buffer->name, 52, 0x8000100u);
      result = 0;
      buffer->unit = kAudioUnitParameterUnit_Generic;
      *(_QWORD *)&buffer->minValue = 0x4120000000000000;
      v6 = 5.0;
LABEL_14:
      v10 = buffer->flags | 0x80000000;
LABEL_15:
      buffer->defaultValue = v6;
      buffer->flags = v10;
      break;
    default:
      return 4294956418;
  }
  return result;
}

uint64_t AUOneChannelNS::RestoreState(OpaqueAudioComponentInstance **this, const void *a2)
{
  uint64_t result;

  result = ausdk::AUBase::RestoreState(this, a2);
  if (!(_DWORD)result)
    ++*((_DWORD *)this + 135);
  return result;
}

double AUOneChannelNS::GetLatency(AUOneChannelNS *this)
{
  double v2;
  unint64_t v3;
  double v4;

  v2 = *(double *)(ausdk::AUScope::SafeGetElement((AUOneChannelNS *)((char *)this + 128), 0) + 80);
  if (*((_BYTE *)this + 376))
  {
    LODWORD(v3) = *((_DWORD *)this + 84);
    v4 = (double)v3;
  }
  else
  {
    v4 = 1024.0;
    if (v2 < 16000.0)
      v4 = 512.0;
    if (v2 >= 32000.0)
      v4 = 2048.0;
  }
  return v4 / v2;
}

double AUOneChannelNS::GetTailTime(AUOneChannelNS *this)
{
  return 0.0;
}

uint64_t AUOneChannelNS::SupportsTail(AUOneChannelNS *this)
{
  return 1;
}

BOOL AUOneChannelNS::StreamFormatWritable(AUOneChannelNS *this)
{
  return *((_BYTE *)this + 17) == 0;
}

uint64_t AUOneChannelNS::SupportedNumChannels(AUOneChannelNS *this, const AUChannelInfo **a2)
{
  if (a2)
    *a2 = (const AUChannelInfo *)&AUOneChannelNS::SupportedNumChannels(AUChannelInfo const**)::sSupportedChannelConfigs;
  return 1;
}

uint64_t AUOneChannelNS::ValidFormat(AUOneChannelNS *this, const AudioStreamBasicDescription *a2, unsigned int a3, AudioStreamBasicDescription *a4)
{
  int v5;
  uint64_t result;
  char v7;
  __int128 v8;
  _OWORD v9[2];
  uint64_t v10;
  int v11;

  v5 = (int)a2;
  result = ausdk::ASBD::IsCommonFloat32((ausdk::ASBD *)a4, a2);
  if ((_DWORD)result)
    result = (a4->mFormatFlags & 0x20) != 0 || a4->mChannelsPerFrame == 1;
  if ((v5 - 1) <= 1)
  {
    if (a4->mFormatID == 1718773105)
      v7 = result;
    else
      v7 = 1;
    if ((v7 & 1) == 0)
    {
      v8 = *(_OWORD *)&a4->mBytesPerPacket;
      v9[0] = *(_OWORD *)&a4->mSampleRate;
      v9[1] = v8;
      v10 = *(_QWORD *)&a4->mBitsPerChannel;
      DWORD2(v9[0]) = 1819304813;
      v11 = 0;
      LODWORD(result) = CAStreamBasicDescription::IdentifyCommonPCMFormat(v9, &v11, 0);
      if (v11 != 4)
        LODWORD(result) = 0;
    }
    if (a4->mChannelsPerFrame == 1)
      return result;
    else
      return 0;
  }
  return result;
}

uint64_t AUOneChannelNS::ShouldBypassEffect(AUOneChannelNS *this)
{
  return *((unsigned __int8 *)this + 536);
}

uint64_t AUOneChannelNS::SetBypassEffect(uint64_t this, char a2)
{
  *(_BYTE *)(this + 536) = a2;
  return this;
}

float AUOneChannelNS::UpdateParameters(AUOneChannelNS *this)
{
  uint64_t v2;
  ausdk::AUElement *v3;
  ausdk::AUElement **v4;
  __n128 v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  ausdk::AUElement *v9;
  ausdk::AUElement **v10;
  uint64_t v11;
  ausdk::AUElement *v12;
  ausdk::AUElement **v13;
  float Parameter;
  uint64_t v15;
  float result;

  v2 = *((_QWORD *)this + 9);
  if (v2)
  {
    v3 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v2 + 32))(v2, 0);
  }
  else
  {
    v4 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v4)
      v3 = 0;
    else
      v3 = *v4;
  }
  v5.n128_f32[0] = ausdk::AUElement::GetParameter(v3, 0);
  v6 = *((_QWORD *)this + 78);
  if (v6)
  {
    v7 = (int)v5.n128_f32[0];
    if ((int)v5.n128_f32[0] >= 0)
      v7 = -v7;
    *(_DWORD *)(v6 + 52) = v7;
    *(_DWORD *)(v6 + 476) = 1;
  }
  v8 = *((_QWORD *)this + 9);
  if (v8)
  {
    v9 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD, __n128))(*(_QWORD *)v8 + 32))(v8, 0, v5);
  }
  else
  {
    v10 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v10)
      v9 = 0;
    else
      v9 = *v10;
  }
  *(float *)(*((_QWORD *)this + 78) + 356) = ausdk::AUElement::GetParameter(v9, 6u);
  v11 = *((_QWORD *)this + 9);
  if (v11)
  {
    v12 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v11 + 32))(v11, 0);
  }
  else
  {
    v13 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v13)
      v12 = 0;
    else
      v12 = *v13;
  }
  Parameter = ausdk::AUElement::GetParameter(v12, 7u);
  v15 = *((_QWORD *)this + 78);
  result = 1.0 - expf(-1.0 / (float)(Parameter * (float)((float)*(int *)(v15 + 8) / (float)*(int *)(v15 + 4))));
  *(float *)(v15 + 360) = result;
  return result;
}

uint64_t AUOneChannelNS::SetNoiseBound(uint64_t a1, int a2, CFTypeRef cf)
{
  uint64_t v4;
  uint64_t v5;
  const __CFBoolean *v6;
  char v7;
  char v8;
  double v9;
  double v10;
  unsigned int *v11;
  unint64_t v12;
  NSObject *v13;
  const char *v14;
  uint64_t v15;
  unint64_t v16;
  _DWORD *v17;
  unsigned int *v18;
  unsigned int v19;
  uint64_t v20;
  void *v21;
  void *v22;
  uint64_t v23;
  std::runtime_error *exception;
  std::runtime_error *v26;
  void *__p;
  uint64_t v28;
  char v29;
  CFTypeRef cfa;
  _BYTE buf[18];
  __int16 v32;
  unsigned int v33;
  uint64_t v34;

  v34 = *MEMORY[0x1E0C80C00];
  v4 = a1 + 552;
  if (a2)
    v4 = a1 + 568;
  if (a2 == 1)
    v5 = a1 + 568;
  else
    v5 = v4;
  CFRetain(cf);
  applesauce::CF::DictionaryRef::DictionaryRef((applesauce::CF::DictionaryRef *)&cfa, cf);
  if (!cfa)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
  }
  v6 = applesauce::CF::details::find_at_key_or_optional<double,char const(&)[11]>((const __CFDictionary *)cfa, "SampleRate");
  v8 = v7;
  if (!cfa)
  {
    v26 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v26, "Could not construct");
  }
  v9 = *(double *)&v6;
  applesauce::CF::details::find_at_key_or_optional<std::vector<unsigned char>,char const(&)[13]>(&__p, (const __CFDictionary *)cfa, "NoiseProfile");
  if (!v8)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      *(_QWORD *)&buf[4] = "AUOneChannelNS.cpp";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 519;
      v13 = MEMORY[0x1E0C81028];
      v14 = "%25s:%-5d Sample rate is not present in the dictionary.";
LABEL_18:
      _os_log_impl(&dword_1B5ED0000, v13, OS_LOG_TYPE_ERROR, v14, buf, 0x12u);
    }
LABEL_19:
    v15 = 4294956445;
    goto LABEL_29;
  }
  v10 = v9;
  if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 136315650;
    *(_QWORD *)&buf[4] = "AUOneChannelNS.cpp";
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = 517;
    v32 = 1024;
    v33 = v9;
    _os_log_impl(&dword_1B5ED0000, MEMORY[0x1E0C81028], OS_LOG_TYPE_INFO, "%25s:%-5d Successfully retrieved sample rate (%iHz).", buf, 0x18u);
  }
  if (!v29)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      *(_QWORD *)&buf[4] = "AUOneChannelNS.cpp";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 526;
      v13 = MEMORY[0x1E0C81028];
      v14 = "%25s:%-5d Profile vector is not present in the dictionary.";
      goto LABEL_18;
    }
    goto LABEL_19;
  }
  if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_INFO))
  {
    v11 = (unsigned int *)__p;
    v12 = v28 - (_QWORD)__p;
    *(_DWORD *)buf = 136315650;
    *(_QWORD *)&buf[4] = "AUOneChannelNS.cpp";
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = 524;
    v32 = 1024;
    v33 = v28 - (_DWORD)__p;
    _os_log_impl(&dword_1B5ED0000, MEMORY[0x1E0C81028], OS_LOG_TYPE_INFO, "%25s:%-5d Successfully retrieved profile vector (length %i).", buf, 0x18u);
  }
  else
  {
    v11 = (unsigned int *)__p;
    v12 = v28 - (_QWORD)__p;
  }
  v16 = v12 >> 2;
  std::vector<float>::vector(buf, v12 >> 2);
  if (v12 >= 4)
  {
    v17 = *(_DWORD **)buf;
    v18 = v11;
    do
    {
      v19 = *v18++;
      *v17++ = bswap32(v19);
      --v16;
    }
    while (v16);
  }
  v20 = *(_QWORD *)(v5 + 8);
  if (v20)
    MEMORY[0x1BCC95CC8](v20, 0x1000C8052888210);
  *(_QWORD *)(v5 + 8) = 0;
  v21 = (void *)operator new[]();
  *(_QWORD *)(v5 + 8) = v21;
  v22 = *(void **)buf;
  v23 = *(_QWORD *)&buf[8] - *(_QWORD *)buf;
  *(_DWORD *)v5 = (*(_QWORD *)&buf[8] - *(_QWORD *)buf) >> 2;
  *(_DWORD *)(v5 + 4) = (int)v10;
  memcpy(v21, v22, (v23 << 30 >> 30) & 0xFFFFFFFFFFFFFFFCLL);
  if (v22)
  {
    *(_QWORD *)&buf[8] = v22;
    operator delete(v22);
  }
  v15 = 0;
LABEL_29:
  if (v29 && __p)
    operator delete(__p);
  if (cfa)
    CFRelease(cfa);
  return v15;
}

void sub_1B644958C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, const void *a14, void *__p, uint64_t a16)
{
  void *v16;

  if (__p)
  {
    a16 = (uint64_t)__p;
    operator delete(__p);
  }
  if (v16)
    operator delete(v16);
  applesauce::CF::DictionaryRef::~DictionaryRef(&a14);
  _Unwind_Resume(a1);
}

uint64_t AUOneChannelNS::BlockProcessClassFunc(int **this, void *a2, uint64_t a3, const AudioBufferList **a4, AudioBufferList **a5)
{
  unsigned int v6;
  char *v8;
  __n128 v9;
  int *v10;
  float v11;
  int *v12;
  ausdk::AUElement *v13;
  ausdk::AUElement **v14;
  int *v15;
  ausdk::AUElement *v16;
  ausdk::AUElement **v17;
  int *v18;
  ausdk::AUElement *v19;
  ausdk::AUElement **v20;

  v6 = a2;
  v8 = *(char **)(*(_QWORD *)a3 + 16);
  v9.n128_f32[0] = CNoiseSuppressorV3::speex_preprocess_run(this[78], v8, 0);
  v10 = this[78];
  if (v10)
    v11 = *((float *)v10 + 83);
  else
    v11 = 0.0;
  v12 = this[9];
  if (v12)
  {
    v13 = (ausdk::AUElement *)(*(uint64_t (**)(int *, _QWORD, __n128))(*(_QWORD *)v12 + 32))(v12, 0, v9);
  }
  else
  {
    v14 = (ausdk::AUElement **)this[6];
    if (this[7] == (int *)v14)
      v13 = 0;
    else
      v13 = *v14;
  }
  ausdk::AUElement::SetParameter(v13, 1u, v11, 0);
  v15 = this[9];
  if (v15)
  {
    v16 = (ausdk::AUElement *)(*(uint64_t (**)(int *, _QWORD))(*(_QWORD *)v15 + 32))(v15, 0);
  }
  else
  {
    v17 = (ausdk::AUElement **)this[6];
    if (this[7] == (int *)v17)
      v16 = 0;
    else
      v16 = *v17;
  }
  ausdk::AUElement::SetParameter(v16, 2u, *((float *)this[78] + 84), 0);
  v18 = this[9];
  if (v18)
  {
    v19 = (ausdk::AUElement *)(*(uint64_t (**)(int *, _QWORD))(*(_QWORD *)v18 + 32))(v18, 0);
  }
  else
  {
    v20 = (ausdk::AUElement **)this[6];
    if (this[7] == (int *)v20)
      v19 = 0;
    else
      v19 = *v20;
  }
  ausdk::AUElement::SetParameter(v19, 5u, *((float *)this[78] + 85), 0);
  memcpy((*a4)->mBuffers[0].mData, v8, 4 * v6);
  return 0;
}

_OWORD *CResidualSuppressorV5::speex_preprocess_state_res_initV5(CResidualSuppressorV5 *this, int a2, int a3, int a4, char a5, char a6, float a7)
{
  unsigned int v13;
  _OWORD *v14;
  _OWORD *v15;
  int v16;
  char *v17;
  char *v18;
  char *v19;
  char *v20;
  char *v21;
  char *v22;
  char *v23;
  char *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  void *v31;
  void *v32;
  std::bad_alloc *exception;
  std::bad_alloc *v35;

  v13 = this;
  v14 = malloc_type_malloc(0x70uLL, 0x2C8E6D5CuLL);
  if (!v14)
    goto LABEL_24;
  v15 = v14;
  v14[5] = 0u;
  v14[6] = 0u;
  v14[3] = 0u;
  v14[4] = 0u;
  v14[1] = 0u;
  v14[2] = 0u;
  v16 = 2 * v13;
  *v14 = 0u;
  if (a2)
  {
    v17 = (char *)malloc_type_malloc(8 * v13, 0x2C8E6D5CuLL);
    v18 = v17;
    if (v16 && !v17)
      goto LABEL_24;
    bzero(v17, 8 * v13);
    *(_QWORD *)v15 = v18;
    *((_QWORD *)v15 + 1) = &v18[4 * v13];
  }
  if (a3)
  {
    v19 = (char *)malloc_type_malloc(8 * v13, 0x2C8E6D5CuLL);
    v20 = v19;
    if (v16 && !v19
      || (bzero(v19, 8 * v13),
          *((_QWORD *)v15 + 2) = v20,
          *((_QWORD *)v15 + 3) = &v20[4 * v13],
          v21 = (char *)malloc_type_malloc(8 * v13, 0x2C8E6D5CuLL),
          v22 = v21,
          v16)
      && !v21)
    {
LABEL_24:
      exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
      v35 = std::bad_alloc::bad_alloc(exception);
    }
    bzero(v21, 8 * v13);
    *((_QWORD *)v15 + 4) = v22;
    *((_QWORD *)v15 + 5) = &v22[4 * v13];
    if (a4 == 1)
    {
      v23 = (char *)malloc_type_malloc(8 * v13, 0x2C8E6D5CuLL);
      v24 = v23;
      if (v16 && !v23)
        goto LABEL_24;
      bzero(v23, 8 * v13);
      *((_QWORD *)v15 + 6) = v24;
      *((_QWORD *)v15 + 7) = &v24[4 * v13];
    }
  }
  v25 = malloc_type_malloc(4 * (v13 + 1), 0x2C8E6D5CuLL);
  v26 = v25;
  if (v13 != -1 && !v25)
    goto LABEL_24;
  bzero(v25, 4 * (v13 + 1));
  *((_QWORD *)v15 + 11) = v26;
  v27 = malloc_type_malloc(4 * (v13 + 1), 0x2C8E6D5CuLL);
  v28 = v27;
  if (v13 != -1 && !v27)
    goto LABEL_24;
  bzero(v27, 4 * (v13 + 1));
  *((_QWORD *)v15 + 12) = v28;
  *((_BYTE *)v15 + 104) = a5;
  *((_BYTE *)v15 + 105) = a6;
  *((float *)v15 + 27) = a7;
  *((_QWORD *)v15 + 8) = 0;
  v29 = malloc_type_malloc(4 * v13, 0x2C8E6D5CuLL);
  v30 = v29;
  if (v13)
  {
    if (!v29)
      goto LABEL_24;
  }
  bzero(v29, 4 * v13);
  *((_QWORD *)v15 + 9) = v30;
  v31 = malloc_type_malloc(8 * v13, 0x2C8E6D5CuLL);
  v32 = v31;
  if (v16)
  {
    if (!v31)
      goto LABEL_24;
  }
  bzero(v31, 8 * v13);
  *((_QWORD *)v15 + 10) = v32;
  return v15;
}

void *CResidualSuppressorV5::speex_preprocess_run_freq(uint64_t a1, const void **a2, const DSPSplitComplex *a3, float **a4, const float *a5, float *__n, uint64_t a7, int a8, const DSPSplitComplex *a9, uint64_t a10, float *a11, uint64_t a12, char a13, int a14)
{
  int v14;
  float *v15;
  float **v16;
  DSPSplitComplex *v17;
  int v19;
  unsigned int v20;
  float *v21;
  uint64_t v22;
  vDSP_Length v23;
  float *v24;
  float *v26;
  void *v27;
  float *v28;
  vDSP_Length v29;
  BOOL v30;
  int v31;
  float **v32;
  float *v33;
  float *v34;
  float *v35;
  float *v36;
  uint64_t v37;
  float *realp;
  float *v39;
  float *v40;
  float *v41;
  float v42;
  float v43;
  vDSP_Length v44;
  float v45;
  float *v46;
  float *v47;
  float **v48;
  float *v49;
  float *v51;
  vDSP_Length v52;
  DSPSplitComplex *v55;
  float *imagp;
  float *__A;
  float *__C;
  float *v60;
  uint64_t v64;
  uint64_t v65;
  DSPSplitComplex v66;

  v14 = a8;
  v15 = __n;
  v16 = a4;
  v17 = (DSPSplitComplex *)a2;
  v19 = a14;
  v20 = *(_DWORD *)a1;
  if (*(int *)a1 >= 1)
  {
    *(_DWORD *)(a1 + 572) = 0;
    if (v20 != 1)
    {
      *(_DWORD *)(a1 + 496) = 0;
      *(_DWORD *)(a1 + 540) = 0;
      if (v20 > 2)
        goto LABEL_26;
    }
  }
  v22 = a10;
  v21 = a11;
  imagp = a9->imagp;
  __A = a9->realp;
  if (a13)
  {
    v23 = *(unsigned int *)(a1 + 8);
    v24 = *(float **)(a12 + 24);
    v27 = *(void **)(a12 + 32);
    v26 = *(float **)(a12 + 40);
    __C = *(float **)(a12 + 16);
    memcpy(__C, *a2, 4 * v23);
    v55 = (DSPSplitComplex *)a2;
    v60 = v24;
    memcpy(v24, a2[1], 4 * v23);
    memcpy(v27, a3->realp, 4 * v23);
    memcpy(v26, a3->imagp, 4 * v23);
    if (a14 == 1)
    {
      v28 = *(float **)(a12 + 56);
      __A = *(float **)(a12 + 48);
      memcpy(__A, a9->realp, 4 * v23);
      imagp = v28;
      memcpy(v28, a9->imagp, 4 * v23);
    }
    if (a5)
    {
      v29 = (v23 - 1);
      vDSP_vmul(__C, 1, a5, 1, __C, 1, v23);
      vDSP_vmul(v24 + 1, 1, a5 + 1, 1, v24 + 1, 1, v29);
      *v24 = *v24 * a5[v29];
      vDSP_vmul((const float *)v27, 1, a5, 1, (float *)v27, 1, v23);
      vDSP_vmul(v26 + 1, 1, a5 + 1, 1, v26 + 1, 1, v29);
      *v26 = *v26 * a5[v29];
      if (a14 == 1)
      {
        vDSP_vmul(__A, 1, a5, 1, __A, 1, v23);
        vDSP_vmul(imagp + 1, 1, a5 + 1, 1, imagp + 1, 1, (v23 - 1));
        *imagp = *imagp * a5[v29];
      }
    }
    v15 = __n;
    CResidualSuppressorV4::GetLeakageForSuppressor(a1, __C, v24, (float *)v27, v26, __n);
    v16 = a4;
    v17 = v55;
    v19 = a14;
    v22 = a10;
    v21 = a11;
    v14 = a8;
  }
  else
  {
    CResidualSuppressorV4::GetLeakageForSuppressor(a1, (float *)*a2, (float *)a2[1], a3->realp, a3->imagp, __n);
    __C = 0;
    v60 = 0;
  }
  CResidualSuppressorV3::GetResidualForSuppressor(a1, v16);
  if (*(_DWORD *)(a12 + 68))
    v30 = v14 == 0;
  else
    v30 = 1;
  if (v30)
  {
    if (!v14)
      goto LABEL_19;
    goto LABEL_18;
  }
  v65 = 0;
  vDSP_zvmags(a3, 1, *(float **)(a12 + 72), 1, *(int *)(a1 + 8));
  vDSP_sve(*(const float **)(a12 + 72), 1, (float *)&v65 + 1, *(int *)(a1 + 8));
  vDSP_zvmags(v17, 1, *(float **)(a12 + 72), 1, *(int *)(a1 + 8));
  vDSP_sve(*(const float **)(a12 + 72), 1, (float *)&v65, *(int *)(a1 + 8));
  v42 = *((float *)&v65 + 1) / (*(float *)&v65 + 1.0e-20) + 1.0e-20;
  v43 = log10f(v42) * 10.0;
  v64 = 0;
  v44 = *(int *)(a1 + 8);
  v66.realp = *(float **)(a12 + 80);
  v66.imagp = &v66.realp[v44];
  vDSP_zvadd(v17, 1, a3, 1, &v66, 1, v44);
  vDSP_zvsub(&v66, 1, a9, 1, &v66, 1, *(int *)(a1 + 8));
  vDSP_zvmags(a9, 1, *(float **)(a12 + 72), 1, *(int *)(a1 + 8));
  vDSP_sve(*(const float **)(a12 + 72), 1, (float *)&v64 + 1, *(int *)(a1 + 8));
  vDSP_zvmags(&v66, 1, *(float **)(a12 + 72), 1, *(int *)(a1 + 8));
  vDSP_sve(*(const float **)(a12 + 72), 1, (float *)&v64, *(int *)(a1 + 8));
  v45 = *((float *)&v64 + 1) / (*(float *)&v64 + 1.0e-20) + 1.0e-20;
  if ((float)(log10f(v45) * 10.0) >= v43)
  {
LABEL_18:
    v31 = v19;
    v32 = v16;
    v33 = *(float **)a12;
    v34 = *(float **)(a12 + 8);
    vDSP_vsub(a3->realp, 1, a9->realp, 1, *(float **)a12, 1, *(int *)(a1 + 8));
    vDSP_vsub(a3->imagp, 1, a9->imagp, 1, v34, 1, *(int *)(a1 + 8));
    LODWORD(v66.realp) = *(_DWORD *)(a12 + 64);
    vDSP_vsmul(v33, 1, (const float *)&v66, v33, 1, *(int *)(a1 + 8));
    vDSP_vsmul(v34, 1, (const float *)&v66, v34, 1, *(int *)(a1 + 8));
    v35 = v33;
    v19 = v31;
    v21 = a11;
    v15 = __n;
    v36 = v34;
    v16 = v32;
    CResidualSuppressorV4::GetLeakageForSuppressor(v22, v17->realp, v17->imagp, v35, v36, a11);
    CResidualSuppressorV3::GetResidualForSuppressor(v22, v32);
    vDSP_vadd(*(const float **)(a1 + 256), 1, *(const float **)(v22 + 256), 1, *(float **)(a1 + 256), 1, *(int *)(a1 + 8));
  }
LABEL_19:
  if (v19 == 1)
  {
    if (a13)
    {
      v37 = v22;
      realp = __C;
      v39 = v60;
      v41 = imagp;
      v40 = __A;
    }
    else
    {
      realp = v17->realp;
      v39 = v17->imagp;
      v40 = a9->realp;
      v41 = a9->imagp;
      v37 = v22;
    }
    CResidualSuppressorV4::GetLeakageForSuppressor(v37, realp, v39, v40, v41, v21);
    CResidualSuppressorV3::GetResidualForSuppressor(v22, v16);
    vDSP_vmax(*(const float **)(a1 + 256), 1, *(const float **)(v22 + 256), 1, *(float **)(a1 + 256), 1, *(int *)(a1 + 8));
  }
LABEL_26:
  v46 = a9->realp;
  if (a9->realp && v19 == 2 && (v47 = a9->imagp) != 0 && !*(_BYTE *)(a12 + 104))
  {
    v51 = *(float **)(a12 + 96);
    v52 = *(int *)(a1 + 8);
    v66.realp = a9->realp;
    v66.imagp = v47;
    vDSP_zvmags(&v66, 1, v51, 1, v52);
    *v51 = *v46 * *v46;
    v51[v52] = *v47 * *v47;
    if (*(_BYTE *)(a12 + 104))
      v48 = (float **)(a12 + 88);
    else
      v48 = (float **)(a12 + 96);
  }
  else
  {
    if (!*(_BYTE *)(a12 + 104))
      goto LABEL_36;
    v48 = (float **)(a12 + 88);
  }
  v49 = *v48;
  if (*(_BYTE *)(a12 + 105))
  {
    LODWORD(v66.realp) = 0;
    vDSP_sve(*(const float **)(a1 + 432), 1, (float *)&v66, *(int *)(a1 + 8));
    *(float *)&v66.realp = *(float *)&v66.realp * *(float *)(a12 + 108);
    HIDWORD(v65) = 0;
    vDSP_sve(v49, 1, (float *)&v65 + 1, *(int *)(a1 + 8));
    if (*((float *)&v65 + 1) > *(float *)&v66.realp)
    {
      *((float *)&v65 + 1) = *(float *)&v66.realp / (float)(*((float *)&v65 + 1) + 1.0e-20);
      vDSP_vsmul(v49, 1, (const float *)&v65 + 1, v49, 1, *(int *)(a1 + 460));
    }
  }
  LODWORD(v66.realp) = 1317011456;
  vDSP_vsmul(v49, 1, (const float *)&v66, *(float **)(a1 + 744), 1, *(int *)(a1 + 460));
  vDSP_vmax(*(const float **)(a1 + 744), 1, *(const float **)(a1 + 256), 1, *(float **)(a1 + 256), 1, *(int *)(a1 + 8));
LABEL_36:
  LODWORD(v66.realp) = 813694976;
  vDSP_vsmul(*(const float **)(a1 + 256), 1, (const float *)&v66, *(float **)(a12 + 88), 1, *(int *)(a1 + 8));
  *(_DWORD *)(*(_QWORD *)(a12 + 88) + 4 * *(int *)(a1 + 8)) = 0;
  *(_QWORD *)(a1 + 304) = a5;
  *(_QWORD *)v15 = a7;
  CResidualSuppressorV4::speex_preprocess_run_res_estimator(a1, (const float **)&v17->realp, (uint64_t)v15);
  return CResidualSuppressorV3::speex_preprocess_run_res_suppressor(a1);
}

void CResidualSuppressorV5::speex_preprocess_run(uint64_t a1, char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, const DSPSplitComplex *a9, uint64_t a10, float *a11, uint64_t a12, char a13, int a14)
{
  const DSPSplitComplex *v16;
  float **v17;
  const float *v18;
  float *v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  const float *v25;
  float **v26;
  uint64_t v27;
  float *v28;
  uint64_t v29;
  const DSPSplitComplex *v30;
  int v31;
  DSPSplitComplex v32;
  uint64_t v33;

  v33 = *MEMORY[0x1E0C80C00];
  MEMORY[0x1E0C80A78](a1);
  v32.realp = (float *)((char *)&v27 - v23);
  v32.imagp = (float *)((char *)&v27 + 4 * v22 - v23);
  if (v24)
  {
    v29 = v20;
    v30 = v16;
    v31 = v21;
    v28 = v19;
    v25 = v18;
    v26 = v17;
    CResidualSuppressorV3::speex_analysis(a1, a2, &v32);
    CResidualSuppressorV5::speex_preprocess_run_freq(a1, (const void **)&v32.realp, v30, v26, v25, v28, v29, v31, a9, a10, a11, a12, a13, a14);
    CResidualSuppressorV3::speex_synthesis(a1, (float *)a2);
  }
  else
  {
    CResidualSuppressorV5::speex_preprocess_run_freq(a1, (const void **)&v32.realp, v16, v17, v18, v19, v20, v21, a9, a10, a11, a12, a13, a14);
  }
}

uint64_t *std::unique_ptr<AUSM::Metadata::PImpl>::reset[abi:ne180100](uint64_t *result, uint64_t a2)
{
  uint64_t v2;

  v2 = *result;
  *result = a2;
  if (v2)
  {
    std::__tree<std::__value_type<unsigned int,std::vector<unsigned int>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::vector<unsigned int>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::vector<unsigned int>>>>::destroy(*(_QWORD **)(v2 + 104));
    if (*(char *)(v2 + 71) < 0)
      operator delete(*(void **)(v2 + 48));
    std::__tree<std::__value_type<unsigned int,unsigned int>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,unsigned int>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,unsigned int>>>::destroy(*(_QWORD **)(v2 + 8));
    JUMPOUT(0x1BCC95CECLL);
  }
  return result;
}

void std::default_delete<AUSM::InputABLBuffer>::operator()[abi:ne180100](_QWORD *a1)
{
  void *v2;
  void *v3;
  void *v4;

  v2 = (void *)a1[8];
  if (v2)
  {
    a1[9] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[5];
  if (v3)
  {
    a1[6] = v3;
    operator delete(v3);
  }
  std::unique_ptr<ExtendedAudioBufferList,std::integral_constant<void (*)(ExtendedAudioBufferList*),&(ExtendedAudioBufferList_Destroy)>>::reset[abi:ne180100](a1 + 4, 0);
  v4 = (void *)a1[1];
  if (v4)
  {
    a1[2] = v4;
    operator delete(v4);
  }
  JUMPOUT(0x1BCC95CECLL);
}

uint64_t *std::unique_ptr<APAC::Metadata>::reset[abi:ne180100](uint64_t *result, uint64_t a2)
{
  uint64_t v2;
  void **v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t i;
  uint64_t v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void **v16;

  v2 = *result;
  *result = a2;
  if (v2)
  {
    v3 = (void **)(v2 + 1455624);
    v4 = *(_QWORD *)(v2 + 1455888);
    if (v4)
    {
      v5 = *(_QWORD *)(v2 + 1455896);
      v6 = *(void **)(v2 + 1455888);
      if (v5 != v4)
      {
        do
        {
          for (i = 0; i != -40192; i -= 1256)
          {
            v8 = v5 + i;
            v9 = *(void **)(v5 + i - 32);
            if (v9)
            {
              *(_QWORD *)(v8 - 24) = v9;
              operator delete(v9);
            }
            APAC::Metadata::RendererData::RadiationPattern::~RadiationPattern((APAC::Metadata::RendererData::RadiationPattern *)(v8 - 456));
          }
          v5 -= 40200;
        }
        while (v5 != v4);
        v6 = *(void **)(v2 + 1455888);
      }
      *(_QWORD *)(v2 + 1455896) = v4;
      operator delete(v6);
    }
    v16 = (void **)(v2 + 1455864);
    std::vector<APAC::Metadata::GroupConfig>::__destroy_vector::operator()[abi:ne180100](&v16);
    v10 = *(void **)(v2 + 1455840);
    if (v10)
    {
      *(_QWORD *)(v2 + 1455848) = v10;
      operator delete(v10);
    }
    v11 = *(void **)(v2 + 1455720);
    if (v11)
    {
      *(_QWORD *)(v2 + 1455728) = v11;
      operator delete(v11);
    }
    v12 = *(void **)(v2 + 1455696);
    if (v12)
    {
      *(_QWORD *)(v2 + 1455704) = v12;
      operator delete(v12);
    }
    v13 = *(void **)(v2 + 1455672);
    if (v13)
    {
      *(_QWORD *)(v2 + 1455680) = v13;
      operator delete(v13);
    }
    v14 = *(void **)(v2 + 1455648);
    if (v14)
    {
      *(_QWORD *)(v2 + 1455656) = v14;
      operator delete(v14);
    }
    v15 = *v3;
    if (*v3)
    {
      *(_QWORD *)(v2 + 1455632) = v15;
      operator delete(v15);
    }
    APAC::Metadata::RendererMetadataConfig::~RendererMetadataConfig((APAC::Metadata::RendererMetadataConfig *)(v2 + 1446256));
    JUMPOUT(0x1BCC95CECLL);
  }
  return result;
}

void APAC::Metadata::RendererMetadataConfig::~RendererMetadataConfig(APAC::Metadata::RendererMetadataConfig *this)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void **v12;

  v2 = *((_QWORD *)this + 600);
  if (v2)
  {
    v3 = *((_QWORD *)this + 601);
    v4 = (void *)*((_QWORD *)this + 600);
    if (v3 != v2)
    {
      do
      {
        v5 = *(void **)(v3 - 32);
        if (v5)
        {
          *(_QWORD *)(v3 - 24) = v5;
          operator delete(v5);
        }
        APAC::Metadata::RendererData::RadiationPattern::~RadiationPattern((APAC::Metadata::RendererData::RadiationPattern *)(v3 - 456));
        v3 -= 1248;
      }
      while (v3 != v2);
      v4 = (void *)*((_QWORD *)this + 600);
    }
    *((_QWORD *)this + 601) = v2;
    operator delete(v4);
  }
  v12 = (void **)((char *)this + 4776);
  std::vector<APAC::Metadata::GroupConfig>::__destroy_vector::operator()[abi:ne180100](&v12);
  v6 = (void *)*((_QWORD *)this + 594);
  if (v6)
  {
    *((_QWORD *)this + 595) = v6;
    operator delete(v6);
  }
  v7 = (void *)*((_QWORD *)this + 579);
  if (v7)
  {
    *((_QWORD *)this + 580) = v7;
    operator delete(v7);
  }
  v8 = (void *)*((_QWORD *)this + 576);
  if (v8)
  {
    *((_QWORD *)this + 577) = v8;
    operator delete(v8);
  }
  v9 = (void *)*((_QWORD *)this + 573);
  if (v9)
  {
    *((_QWORD *)this + 574) = v9;
    operator delete(v9);
  }
  v10 = (void *)*((_QWORD *)this + 570);
  if (v10)
  {
    *((_QWORD *)this + 571) = v10;
    operator delete(v10);
  }
  v11 = (void *)*((_QWORD *)this + 567);
  if (v11)
  {
    *((_QWORD *)this + 568) = v11;
    operator delete(v11);
  }
}

void std::vector<APAC::Metadata::GroupConfig>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  char *v2;
  char *v4;
  void *v5;
  void *v6;

  v1 = *a1;
  v2 = (char *)**a1;
  if (v2)
  {
    v4 = (char *)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v6 = (void *)*((_QWORD *)v4 - 3);
        if (v6)
        {
          *((_QWORD *)v4 - 2) = v6;
          operator delete(v6);
        }
        v4 -= 48;
      }
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void APAC::Metadata::RendererData::RadiationPattern::~RadiationPattern(APAC::Metadata::RendererData::RadiationPattern *this)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;

  v2 = (void *)*((_QWORD *)this + 26);
  if (v2)
  {
    *((_QWORD *)this + 27) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 23);
  if (v3)
  {
    *((_QWORD *)this + 24) = v3;
    operator delete(v3);
  }
  v4 = (void *)*((_QWORD *)this + 18);
  if (v4)
  {
    *((_QWORD *)this + 19) = v4;
    operator delete(v4);
  }
  v5 = (void *)*((_QWORD *)this + 15);
  if (v5)
  {
    *((_QWORD *)this + 16) = v5;
    operator delete(v5);
  }
  v6 = (void *)*((_QWORD *)this + 12);
  if (v6)
  {
    *((_QWORD *)this + 13) = v6;
    operator delete(v6);
  }
  v7 = (void *)*((_QWORD *)this + 9);
  if (v7)
  {
    *((_QWORD *)this + 10) = v7;
    operator delete(v7);
  }
  v8 = (void *)*((_QWORD *)this + 6);
  if (v8)
  {
    *((_QWORD *)this + 7) = v8;
    operator delete(v8);
  }
  v9 = (void *)*((_QWORD *)this + 3);
  if (v9)
  {
    *((_QWORD *)this + 4) = v9;
    operator delete(v9);
  }
}

uint64_t std::unique_ptr<ExtendedAudioBufferList,std::integral_constant<void (*)(ExtendedAudioBufferList*),&(ExtendedAudioBufferList_Destroy)>>::reset[abi:ne180100](uint64_t *a1, uint64_t a2)
{
  uint64_t result;

  result = *a1;
  *a1 = a2;
  if (result)
    return ExtendedAudioBufferList_Destroy();
  return result;
}

void std::__tree<std::__value_type<unsigned int,std::vector<unsigned int>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::vector<unsigned int>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::vector<unsigned int>>>>::destroy(_QWORD *a1)
{
  void *v2;

  if (a1)
  {
    std::__tree<std::__value_type<unsigned int,std::vector<unsigned int>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::vector<unsigned int>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::vector<unsigned int>>>>::destroy(*a1);
    std::__tree<std::__value_type<unsigned int,std::vector<unsigned int>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::vector<unsigned int>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::vector<unsigned int>>>>::destroy(a1[1]);
    v2 = (void *)a1[5];
    if (v2)
    {
      a1[6] = v2;
      operator delete(v2);
    }
    operator delete(a1);
  }
}

uint64_t AUSM::Metadata::ingestImmersiveRendererData(uint64_t a1)
{
  _DWORD *v1;
  _DWORD *v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  void *v6;
  unint64_t v7;
  std::locale::id *v8;
  uint64_t v9;
  const std::ios_base *v10;
  const std::locale::facet *v11;
  NSObject *v12;
  uint64_t v13;
  NSObject *v14;
  int v15;
  int *v16;
  unint64_t v17;
  NSObject *v18;
  NSObject *v19;
  _QWORD *v20;
  int *v21;
  unint64_t v22;
  NSObject *v23;
  unsigned int v24;
  unint64_t v25;
  NSObject *v26;
  _QWORD *v27;
  uint64_t v28;
  NSObject *v29;
  NSObject *v30;
  _QWORD *v31;
  _QWORD *v32;
  int v33;
  NSObject *v34;
  _QWORD *v35;
  std::locale::__imp *v36;
  std::locale::__imp *v37;
  _BOOL4 v38;
  _QWORD *v39;
  const char *v40;
  size_t ACLByteSize;
  void *v43;
  const void *ACLPointer;
  void *v45;
  uint64_t ImmersiveRendererDescriptionPointer;
  unsigned int NumRendererDescriptions;
  uint64_t v48;
  NSObject *v49;
  uint64_t MetadataConfig;
  char v51;
  uint64_t v52;
  NSObject *v53;
  _QWORD *v54;
  _QWORD *v55;
  _QWORD *v56;
  NSObject *v57;
  _QWORD *v58;
  int v59;
  _QWORD *v60;
  int v61;
  _QWORD *v62;
  _QWORD *v63;
  _QWORD *v64;
  _QWORD *v65;
  _QWORD *v66;
  _QWORD *v67;
  uint64_t v68;
  void *v69;
  __int128 v70;
  uint64_t v71;
  _BYTE v72[12];
  __int16 v73;
  const char *v74;
  __int16 v75;
  uint64_t v76;
  _BYTE buf[48];
  __int128 v78;
  uint64_t v79;
  void *__p;
  char v81;
  _DWORD v82[998];
  char v83;
  char v84;
  uint64_t v85;
  int v86;
  char v87;
  __int128 v88;
  _BYTE v89[358];
  int v90;
  char v91;
  int v92;
  __int16 v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  _BYTE v100[25];
  _QWORD v101[2];
  __int16 v102;
  _QWORD v103[5];
  char v104;
  __int16 v105;
  char v106;
  uint64_t v107;
  __int16 v108;
  __int16 v109;
  __int128 v110;
  __int128 v111;
  __int128 v112;
  __int128 v113;
  uint64_t v114;
  std::locale v115[6];
  __int128 v116;
  uint64_t v117;
  uint64_t v118;

  MEMORY[0x1E0C80A78](a1);
  v2 = v1;
  v4 = v3;
  v118 = *MEMORY[0x1E0C80C00];
  if (getAUSMV2Log(void)::onceToken != -1)
    dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_5474);
  v5 = (id)getAUSMV2Log(void)::gLog;
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEBUG))
  {
    v32 = (_QWORD *)(v4 + 104);
    if (*(char *)(v4 + 127) < 0)
      v32 = (_QWORD *)*v32;
    v33 = v2[2] - *v2;
    *(_DWORD *)buf = 136315650;
    *(_QWORD *)&buf[4] = v32;
    *(_WORD *)&buf[12] = 2080;
    *(_QWORD *)&buf[14] = "ingestImmersiveRendererData";
    *(_WORD *)&buf[22] = 1024;
    *(_DWORD *)&buf[24] = v33;
    _os_log_debug_impl(&dword_1B5ED0000, v5, OS_LOG_TYPE_DEBUG, "[%s|%s] ImmersiveRendererData: receiving %u bytes", buf, 0x1Cu);
  }

  v6 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99EA0]), "initWithSuiteName:", CFSTR("com.apple.coreaudio"));
  if (objc_msgSend(v6, "BOOLForKey:", CFSTR("ausm_capture_ird")))
  {
    v68 = v4;
    std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)buf);
    *(_DWORD *)&buf[*(_QWORD *)(*(_QWORD *)&buf[16] - 24) + 24] = *(_DWORD *)&buf[*(_QWORD *)(*(_QWORD *)&buf[16]
                                                                                              - 24)
                                                                                  + 24] & 0xFFFFFFB5 | 8;
    if (*((_QWORD *)v2 + 1) != *(_QWORD *)v2)
    {
      v7 = 0;
      v8 = (std::locale::id *)MEMORY[0x1E0DE4A90];
      do
      {
        v9 = *(_QWORD *)&buf[16];
        *(_QWORD *)&buf[*(_QWORD *)(*(_QWORD *)&buf[16] - 24) + 40] = 2;
        v10 = (const std::ios_base *)&buf[*(_QWORD *)(v9 - 24) + 16];
        if (v10[1].__fmtflags_ == -1)
        {
          std::ios_base::getloc(v10);
          v11 = std::locale::use_facet(v115, v8);
          ((void (*)(const std::locale::facet *, uint64_t))v11->__vftable[2].~facet_0)(v11, 32);
          std::locale::~locale(v115);
        }
        v10[1].__fmtflags_ = 48;
        std::ostream::operator<<();
        ++v7;
      }
      while (*((_QWORD *)v2 + 1) - *(_QWORD *)v2 > v7);
    }
    if (getAUSMV2Log(void)::onceToken != -1)
      dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_5474);
    v4 = v68;
    v12 = (id)getAUSMV2Log(void)::gLog;
    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEBUG))
    {
      v36 = (std::locale::__imp *)(v68 + 104);
      if (*(char *)(v68 + 127) < 0)
        v36 = *(std::locale::__imp **)v36;
      std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)&buf[24], v72);
      if (v75 >= 0)
        v37 = (std::locale::__imp *)v72;
      else
        v37 = *(std::locale::__imp **)v72;
      LODWORD(v115[0].__locale_) = 136315650;
      *(std::locale::__imp **)((char *)&v115[0].__locale_ + 4) = v36;
      WORD2(v115[1].__locale_) = 2080;
      *(std::locale::__imp **)((char *)&v115[1].__locale_ + 6) = (std::locale::__imp *)"ingestImmersiveRendererData";
      HIWORD(v115[2].__locale_) = 2080;
      v115[3].__locale_ = v37;
      _os_log_debug_impl(&dword_1B5ED0000, v12, OS_LOG_TYPE_DEBUG, "[%s|%s] ImmersiveRendererData: dump %s", (uint8_t *)v115, 0x20u);
      if (SHIBYTE(v75) < 0)
        operator delete(*(void **)v72);
    }

    *(_QWORD *)buf = *MEMORY[0x1E0DE4F50];
    v13 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 72);
    *(_QWORD *)&buf[*(_QWORD *)(*(_QWORD *)buf - 24)] = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 64);
    *(_QWORD *)&buf[16] = v13;
    *(_QWORD *)&buf[24] = MEMORY[0x1E0DE4FB8] + 16;
    if (v81 < 0)
      operator delete(__p);
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    MEMORY[0x1BCC95BE4](v82);
  }

  if (*((_QWORD *)v2 + 1) - *(_QWORD *)v2 < 4uLL)
  {
    if (getAUSMV2Log(void)::onceToken != -1)
      dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_5474);
    v14 = (id)getAUSMV2Log(void)::gLog;
    if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
    {
      v35 = (_QWORD *)(v4 + 104);
      if (*(char *)(v4 + 127) < 0)
        v35 = (_QWORD *)*v35;
      *(_DWORD *)buf = 136315394;
      *(_QWORD *)&buf[4] = v35;
      *(_WORD *)&buf[12] = 2080;
      *(_QWORD *)&buf[14] = "ingestImmersiveRendererData";
      _os_log_error_impl(&dword_1B5ED0000, v14, OS_LOG_TYPE_ERROR, "[%s|%s] ERROR: ImmersiveRendererData struct size too small", buf, 0x16u);
    }

    return 4294956445;
  }
  v15 = **(_DWORD **)v2;
  if (v15 != 2)
  {
    if (v15 != 1)
    {
      if (getAUSMV2Log(void)::onceToken != -1)
        dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_5474);
      v23 = (id)getAUSMV2Log(void)::gLog;
      if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR))
      {
        v54 = (_QWORD *)(v4 + 104);
        if (*(char *)(v4 + 127) < 0)
          v54 = (_QWORD *)*v54;
        *(_DWORD *)buf = 136315650;
        *(_QWORD *)&buf[4] = v54;
        *(_WORD *)&buf[12] = 2080;
        *(_QWORD *)&buf[14] = "ingestImmersiveRendererData";
        *(_WORD *)&buf[22] = 1024;
        *(_DWORD *)&buf[24] = v15;
        _os_log_error_impl(&dword_1B5ED0000, v23, OS_LOG_TYPE_ERROR, "[%s|%s] ERROR: Unsupported ImmersiveRendererData version %u", buf, 0x1Cu);
      }

      return 4294956428;
    }
    atomic_store(0, (unsigned __int8 *)(v4 + 96));
    atomic_store(1u, (unsigned __int8 *)(v4 + 97));
    v16 = *(int **)v2;
    v17 = *((_QWORD *)v2 + 1) - *(_QWORD *)v2;
    if (v17 <= 7)
    {
      if (getAUSMV2Log(void)::onceToken != -1)
        dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_5474);
      v18 = (id)getAUSMV2Log(void)::gLog;
      if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
      {
        v55 = (_QWORD *)(v4 + 104);
        if (*(char *)(v4 + 127) < 0)
          v55 = (_QWORD *)*v55;
        *(_DWORD *)buf = 136315394;
        *(_QWORD *)&buf[4] = v55;
        *(_WORD *)&buf[12] = 2080;
        *(_QWORD *)&buf[14] = "ingestImmersiveRendererDataV1";
        _os_log_error_impl(&dword_1B5ED0000, v18, OS_LOG_TYPE_ERROR, "[%s|%s] ERROR: ImmersiveRendererData_V1 struct too small", buf, 0x16u);
      }
      goto LABEL_109;
    }
    if (*v16 == 1)
    {
      v24 = v16[1];
      v25 = 20 * v24 + 8;
      if (v17 == v25)
      {
        if (AUSM::Metadata::mTraceLevel >= 1)
        {
          if (getAUSMV2Log(void)::onceToken != -1)
            dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_5474);
          v26 = (id)getAUSMV2Log(void)::gLog;
          if (os_log_type_enabled(v26, OS_LOG_TYPE_INFO))
          {
            v27 = (_QWORD *)(v4 + 104);
            if (*(char *)(v4 + 127) < 0)
              v27 = (_QWORD *)*v27;
            *(_DWORD *)buf = 136315394;
            *(_QWORD *)&buf[4] = v27;
            *(_WORD *)&buf[12] = 2080;
            *(_QWORD *)&buf[14] = "ingestImmersiveRendererDataV1";
            _os_log_impl(&dword_1B5ED0000, v26, OS_LOG_TYPE_INFO, "[%s|%s] ImmersiveRendererData_V1 ingestion has begun", buf, 0x16u);
          }

          v24 = v16[1];
        }
        memset(v115, 0, 24);
        v79 = 0;
        v78 = 0u;
        memset(buf, 0, sizeof(buf));
        v28 = AUSM::Metadata::commonImmersiveRendererDataSetup((_QWORD *)v4, (uint64_t)(v16 + 2), v24, (uint64_t *)v115, (uint64_t *)buf);
        if ((_DWORD)v28)
        {
          if (getAUSMV2Log(void)::onceToken != -1)
            dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_5474);
          v29 = (id)getAUSMV2Log(void)::gLog;
          if (os_log_type_enabled(v29, OS_LOG_TYPE_ERROR))
          {
            v62 = (_QWORD *)(v4 + 104);
            if (*(char *)(v4 + 127) < 0)
              v62 = (_QWORD *)*v62;
            *(_DWORD *)buf = 136315650;
            *(_QWORD *)&buf[4] = v62;
            *(_WORD *)&buf[12] = 2080;
            *(_QWORD *)&buf[14] = "ingestImmersiveRendererDataV1";
            *(_WORD *)&buf[22] = 1024;
            *(_DWORD *)&buf[24] = v28;
            _os_log_error_impl(&dword_1B5ED0000, v29, OS_LOG_TYPE_ERROR, "[%s|%s] ImmersiveRendererData_V1: Error during common configuration, err = %d", buf, 0x1Cu);
          }

          if ((_DWORD)v28 == -10851)
            goto LABEL_110;
        }
        atomic_store(1u, (unsigned __int8 *)(v4 + 96));
        atomic_store(0, (unsigned __int8 *)(v4 + 97));
        if (AUSM::Metadata::mTraceLevel >= 1)
        {
          if (getAUSMV2Log(void)::onceToken != -1)
            dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_5474);
          v30 = (id)getAUSMV2Log(void)::gLog;
          if (os_log_type_enabled(v30, OS_LOG_TYPE_INFO))
          {
            v31 = (_QWORD *)(v4 + 104);
            if (*(char *)(v4 + 127) < 0)
              v31 = (_QWORD *)*v31;
            *(_DWORD *)buf = 136315394;
            *(_QWORD *)&buf[4] = v31;
            *(_WORD *)&buf[12] = 2080;
            *(_QWORD *)&buf[14] = "ingestImmersiveRendererDataV1";
            _os_log_impl(&dword_1B5ED0000, v30, OS_LOG_TYPE_INFO, "[%s|%s] ImmersiveRendererData_V1 ingestion has ended", buf, 0x16u);
          }

        }
        return v28;
      }
      if (getAUSMV2Log(void)::onceToken != -1)
        dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_5474);
      v18 = (id)getAUSMV2Log(void)::gLog;
      v38 = os_log_type_enabled(v18, OS_LOG_TYPE_ERROR);
      if (v17 >= v25)
      {
        if (v38)
        {
          v63 = (_QWORD *)(v4 + 104);
          if (*(char *)(v4 + 127) < 0)
            v63 = (_QWORD *)*v63;
          *(_DWORD *)buf = 136315394;
          *(_QWORD *)&buf[4] = v63;
          *(_WORD *)&buf[12] = 2080;
          *(_QWORD *)&buf[14] = "ingestImmersiveRendererDataV1";
          v40 = "[%s|%s] ERROR: ImmersiveRendererData_V1 struct too big";
          goto LABEL_174;
        }
      }
      else if (v38)
      {
        v39 = (_QWORD *)(v4 + 104);
        if (*(char *)(v4 + 127) < 0)
          v39 = (_QWORD *)*v39;
        *(_DWORD *)buf = 136315394;
        *(_QWORD *)&buf[4] = v39;
        *(_WORD *)&buf[12] = 2080;
        *(_QWORD *)&buf[14] = "ingestImmersiveRendererDataV1";
        v40 = "[%s|%s] ERROR: ImmersiveRendererData_V1 struct truncated";
LABEL_174:
        _os_log_error_impl(&dword_1B5ED0000, v18, OS_LOG_TYPE_ERROR, v40, buf, 0x16u);
      }
LABEL_109:

LABEL_110:
      atomic_store(0, (unsigned __int8 *)(v4 + 97));
      return 4294956445;
    }
    if (getAUSMV2Log(void)::onceToken != -1)
      dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_5474);
    v34 = (id)getAUSMV2Log(void)::gLog;
    if (os_log_type_enabled(v34, OS_LOG_TYPE_ERROR))
    {
      v58 = (_QWORD *)(v4 + 104);
      if (*(char *)(v4 + 127) < 0)
        v58 = (_QWORD *)*v58;
      v59 = *v16;
      *(_DWORD *)buf = 136315650;
      *(_QWORD *)&buf[4] = v58;
      *(_WORD *)&buf[12] = 2080;
      *(_QWORD *)&buf[14] = "ingestImmersiveRendererDataV1";
      *(_WORD *)&buf[22] = 1024;
      *(_DWORD *)&buf[24] = v59;
      _os_log_error_impl(&dword_1B5ED0000, v34, OS_LOG_TYPE_ERROR, "[%s|%s] ERROR: ImmersiveRendererData_V1: Inconsistent workflow: IRD version %u ≠ 1", buf, 0x1Cu);
    }
LABEL_84:

    atomic_store(0, (unsigned __int8 *)(v4 + 97));
    return 4294956428;
  }
  if (AUSM::Metadata::mTraceLevel >= 1)
  {
    if (getAUSMV2Log(void)::onceToken != -1)
      dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_5474);
    v19 = (id)getAUSMV2Log(void)::gLog;
    if (os_log_type_enabled(v19, OS_LOG_TYPE_INFO))
    {
      v20 = (_QWORD *)(v4 + 104);
      if (*(char *)(v4 + 127) < 0)
        v20 = (_QWORD *)*v20;
      *(_DWORD *)buf = 136315394;
      *(_QWORD *)&buf[4] = v20;
      *(_WORD *)&buf[12] = 2080;
      *(_QWORD *)&buf[14] = "ingestImmersiveRendererDataV2";
      _os_log_impl(&dword_1B5ED0000, v19, OS_LOG_TYPE_INFO, "[%s|%s] ImmersiveRendererData_V2 ingestion has begun", buf, 0x16u);
    }

  }
  atomic_store(0, (unsigned __int8 *)(v4 + 96));
  atomic_store(1u, (unsigned __int8 *)(v4 + 97));
  v21 = *(int **)v2;
  v22 = *((_QWORD *)v2 + 1) - *(_QWORD *)v2;
  if (v22 <= 3)
  {
    if (getAUSMV2Log(void)::onceToken != -1)
      dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_5474);
    v18 = (id)getAUSMV2Log(void)::gLog;
    if (!os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
      goto LABEL_109;
    v56 = (_QWORD *)(v4 + 104);
    if (*(char *)(v4 + 127) < 0)
      v56 = (_QWORD *)*v56;
    goto LABEL_167;
  }
  if (*v21 != 2)
  {
    if (getAUSMV2Log(void)::onceToken != -1)
      dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_5474);
    v34 = (id)getAUSMV2Log(void)::gLog;
    if (os_log_type_enabled(v34, OS_LOG_TYPE_ERROR))
    {
      v60 = (_QWORD *)(v4 + 104);
      if (*(char *)(v4 + 127) < 0)
        v60 = (_QWORD *)*v60;
      v61 = *v21;
      *(_DWORD *)buf = 136315650;
      *(_QWORD *)&buf[4] = v60;
      *(_WORD *)&buf[12] = 2080;
      *(_QWORD *)&buf[14] = "ingestImmersiveRendererDataV2";
      *(_WORD *)&buf[22] = 1024;
      *(_DWORD *)&buf[24] = v61;
      _os_log_error_impl(&dword_1B5ED0000, v34, OS_LOG_TYPE_ERROR, "[%s|%s] ERROR: ImmersiveRendererData_V2: Inconsistent workflow: IRD version %u ≠ 2", buf, 0x1Cu);
    }
    goto LABEL_84;
  }
  if (v22 <= 0x17)
  {
    if (getAUSMV2Log(void)::onceToken != -1)
      dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_5474);
    v18 = (id)getAUSMV2Log(void)::gLog;
    if (!os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
      goto LABEL_109;
    v56 = (_QWORD *)(v4 + 104);
    if (*(char *)(v4 + 127) < 0)
      v56 = (_QWORD *)*v56;
LABEL_167:
    *(_DWORD *)buf = 136315394;
    *(_QWORD *)&buf[4] = v56;
    *(_WORD *)&buf[12] = 2080;
    *(_QWORD *)&buf[14] = "ingestImmersiveRendererDataV2";
    _os_log_error_impl(&dword_1B5ED0000, v18, OS_LOG_TYPE_ERROR, "[%s|%s] ERROR: ImmersiveRendererData_V2 struct too small", buf, 0x16u);
    goto LABEL_109;
  }
  if (v22 < v21[3] + v21[5] + 20 * (unint64_t)v21[4] + 24)
  {
    if (getAUSMV2Log(void)::onceToken != -1)
      dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_5474);
    v18 = (id)getAUSMV2Log(void)::gLog;
    if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
    {
      v64 = (_QWORD *)(v4 + 104);
      if (*(char *)(v4 + 127) < 0)
        v64 = (_QWORD *)*v64;
      *(_DWORD *)buf = 136315394;
      *(_QWORD *)&buf[4] = v64;
      *(_WORD *)&buf[12] = 2080;
      *(_QWORD *)&buf[14] = "ingestImmersiveRendererDataV2";
      _os_log_error_impl(&dword_1B5ED0000, v18, OS_LOG_TYPE_ERROR, "[%s|%s] ERROR: ImmersiveRendererData_V2 struct truncated", buf, 0x16u);
    }
    goto LABEL_109;
  }
  ACLByteSize = APAC::ImmersiveRendererData_V2_Manager::getACLByteSize();
  v43 = (void *)operator new[]();
  ACLPointer = (const void *)APAC::ImmersiveRendererData_V2_Manager::getACLPointer();
  if (ACLPointer)
  {
    memcpy(v43, ACLPointer, ACLByteSize);
    v117 = 0;
    v116 = 0u;
    memset(v115, 0, sizeof(v115));
    GetChannelLayoutChannelLabels((const AudioChannelLayout *)buf, (int *)v43);
    v69 = *(void **)buf;
    v70 = *(_OWORD *)buf;
    v71 = *(_QWORD *)&buf[16];
    GetChannelLayoutSphericalCoordinates((AudioChannelLayout *)buf, (float *)v43);
    if (v115[0].__locale_)
    {
      v115[1] = v115[0];
      operator delete(v115[0].__locale_);
    }
    *(_OWORD *)&v115[0].__locale_ = *(_OWORD *)buf;
    v115[2] = *(std::locale *)&buf[16];
    memset(buf, 0, 24);
    if (v115[3].__locale_)
    {
      v115[4] = v115[3];
      operator delete(v115[3].__locale_);
    }
    *(_OWORD *)&v115[3].__locale_ = *(_OWORD *)&buf[24];
    v115[5] = *(std::locale *)&buf[40];
    memset(&buf[24], 0, 24);
    v45 = (void *)v116;
    if ((_QWORD)v116)
    {
      *((_QWORD *)&v116 + 1) = v116;
      operator delete((void *)v116);
      v45 = *(void **)&buf[24];
    }
    v116 = v78;
    v117 = v79;
    v79 = 0;
    v78 = 0uLL;
    if (v45)
    {
      *(_QWORD *)&buf[32] = v45;
      operator delete(v45);
    }
    if (*(_QWORD *)buf)
    {
      *(_QWORD *)&buf[8] = *(_QWORD *)buf;
      operator delete(*(void **)buf);
    }
    ImmersiveRendererDescriptionPointer = APAC::ImmersiveRendererData_V2_Manager::getImmersiveRendererDescriptionPointer();
    NumRendererDescriptions = APAC::ImmersiveRendererData_V2_Manager::getNumRendererDescriptions();
    v48 = AUSM::Metadata::commonImmersiveRendererDataSetup((_QWORD *)v4, ImmersiveRendererDescriptionPointer, NumRendererDescriptions, (uint64_t *)&v70, (uint64_t *)v115);
    if (!(_DWORD)v48)
      goto LABEL_189;
    if (getAUSMV2Log(void)::onceToken != -1)
      dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_5474);
    v49 = (id)getAUSMV2Log(void)::gLog;
    if (os_log_type_enabled(v49, OS_LOG_TYPE_ERROR))
    {
      v65 = (_QWORD *)(v4 + 104);
      if (*(char *)(v4 + 127) < 0)
        v65 = (_QWORD *)*v65;
      *(_DWORD *)buf = 136315650;
      *(_QWORD *)&buf[4] = v65;
      *(_WORD *)&buf[12] = 2080;
      *(_QWORD *)&buf[14] = "ingestImmersiveRendererDataV2";
      *(_WORD *)&buf[22] = 1024;
      *(_DWORD *)&buf[24] = v48;
      _os_log_error_impl(&dword_1B5ED0000, v49, OS_LOG_TYPE_ERROR, "[%s|%s] ImmersiveRendererData_V2: Error during common configuration, err = %d", buf, 0x1Cu);
    }

    v28 = 4294956445;
    if ((_DWORD)v48 != -10851)
    {
LABEL_189:
      if (APAC::ImmersiveRendererData_V2_Manager::hasMetadataConfig())
      {
        *(_WORD *)buf = 0;
        *(_WORD *)&buf[8] = 0;
        buf[16] = 0;
        *(_WORD *)&buf[18] = 0;
        v83 = 0;
        v82[997] = 0;
        v84 = 4;
        v85 = 0;
        v86 = 1065353216;
        v87 = 0;
        memset(&v89[28], 0, 181);
        v89[340] = 0;
        v90 = 0;
        v91 = 0;
        v92 = 0;
        v93 = 0;
        v101[0] = 0;
        *(_QWORD *)((char *)v101 + 5) = 0;
        *(_QWORD *)((char *)v103 + 5) = 0;
        v102 = 0;
        v103[0] = 0;
        v104 = 0;
        v105 = 0;
        v106 = 0;
        v107 = 0;
        v108 = 0;
        v109 = 0;
        v88 = 0u;
        memset(v89, 0, 19);
        memset(&v89[344], 0, 13);
        memset(v100, 0, sizeof(v100));
        v99 = 0u;
        v98 = 0u;
        v97 = 0u;
        v96 = 0u;
        v95 = 0u;
        v94 = 0u;
        v113 = 0u;
        v112 = 0u;
        v111 = 0u;
        v110 = 0u;
        v114 = 0;
        MetadataConfig = APAC::ImmersiveRendererData_V2_Manager::getMetadataConfig();
        if (v51)
        {
          v52 = MetadataConfig;
          if (getAUSMV2Log(void)::onceToken != -1)
            dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_5474);
          v53 = (id)getAUSMV2Log(void)::gLog;
          if (os_log_type_enabled(v53, OS_LOG_TYPE_ERROR))
          {
            v67 = (_QWORD *)(v4 + 104);
            if (*(char *)(v4 + 127) < 0)
              v67 = (_QWORD *)*v67;
            *(_DWORD *)v72 = 136315650;
            *(_QWORD *)&v72[4] = v67;
            v73 = 2080;
            v74 = "ingestImmersiveRendererDataV2";
            v75 = 2080;
            v76 = v52;
            _os_log_error_impl(&dword_1B5ED0000, v53, OS_LOG_TYPE_ERROR, "[%s|%s] ERROR: ImmersiveRendererData_V2 parsing metadata config failed: %s", v72, 0x20u);
          }

          v48 = 4294900553;
        }
        AUSM::Metadata::PImpl::ParseMetadataConfig(*(_QWORD *)(v4 + 16), (uint64_t)buf);
        APAC::Metadata::RendererMetadataConfig::~RendererMetadataConfig((APAC::Metadata::RendererMetadataConfig *)&buf[8]);
      }
      atomic_store(1u, (unsigned __int8 *)(v4 + 96));
      v28 = v48;
    }
    atomic_store(0, (unsigned __int8 *)(v4 + 97));
    if ((_QWORD)v116)
    {
      *((_QWORD *)&v116 + 1) = v116;
      operator delete((void *)v116);
    }
    if (v115[3].__locale_)
    {
      v115[4] = v115[3];
      operator delete(v115[3].__locale_);
    }
    if (v115[0].__locale_)
    {
      v115[1] = v115[0];
      operator delete(v115[0].__locale_);
    }
    if (v69)
      operator delete(v69);
  }
  else
  {
    if (getAUSMV2Log(void)::onceToken != -1)
      dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_5474);
    v57 = (id)getAUSMV2Log(void)::gLog;
    if (os_log_type_enabled(v57, OS_LOG_TYPE_ERROR))
    {
      v66 = (_QWORD *)(v4 + 104);
      if (*(char *)(v4 + 127) < 0)
        v66 = (_QWORD *)*v66;
      *(_DWORD *)buf = 136315394;
      *(_QWORD *)&buf[4] = v66;
      *(_WORD *)&buf[12] = 2080;
      *(_QWORD *)&buf[14] = "ingestImmersiveRendererDataV2";
      _os_log_error_impl(&dword_1B5ED0000, v57, OS_LOG_TYPE_ERROR, "[%s|%s] ERROR: ImmersiveRendererData_V2 byte size inconsistent", buf, 0x16u);
    }

    atomic_store(0, (unsigned __int8 *)(v4 + 97));
    v28 = 4294956445;
  }
  MEMORY[0x1BCC95CC8](v43, 0x1000C8077774924);
  return v28;
}

void sub_1B644BA6C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, __int128 a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18)
{
  uint64_t v18;
  APAC::Metadata::RendererMetadataConfig *v19;
  uint64_t v20;

  APAC::Metadata::RendererMetadataConfig::~RendererMetadataConfig(v19);
  AUSM::ABLBuffer::~ABLBuffer((AUSM::ABLBuffer *)(v20 - 176));
  if ((_QWORD)a9)
    operator delete((void *)a9);
  MEMORY[0x1BCC95CC8](v18, 0x1000C8077774924);
  _Unwind_Resume(a1);
}

uint64_t AUSM::Metadata::commonImmersiveRendererDataSetup(_QWORD *a1, uint64_t a2, unsigned int a3, uint64_t *a4, uint64_t *a5)
{
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  NSObject *v16;
  uint64_t v17;
  _QWORD *v18;
  NSObject *v19;
  ausdk::AUElement *Element;
  ausdk::AUElement *v21;
  int v22;
  __int128 v23;
  NSObject *v24;
  NSObject *v25;
  uint64_t v26;
  uint64_t v28;
  unsigned int v29;
  uint64_t v30;
  uint64_t v31;
  unsigned int *v32;
  unsigned int v33;
  unsigned int v34;
  unsigned int v35;
  uint64_t v36;
  uint64_t v37;
  int *v38;
  int v39;
  NSObject *v40;
  _QWORD *v41;
  NSObject *v42;
  const char *v43;
  _QWORD *v44;
  int v45;
  _QWORD *v46;
  int v47;
  NSObject *v48;
  int v49;
  uint64_t **v50;
  uint64_t v51;
  uint64_t **v52;
  uint64_t v53;
  unsigned int v54;
  uint64_t *v55;
  int v56;
  NSObject *v57;
  int v58;
  NSObject *v59;
  int v60;
  NSObject *v61;
  int v62;
  NSObject *v63;
  int v64;
  NSObject *v65;
  unsigned int v66;
  int v67;
  int v68;
  int v69;
  int v70;
  std::vector<char>::pointer v71;
  int v72;
  NSObject *v73;
  std::vector<char>::pointer v74;
  int v75;
  int v76;
  NSObject *v77;
  int v78;
  NSObject *v79;
  int v80;
  NSObject *v81;
  _QWORD *v82;
  _QWORD *v83;
  _QWORD *v84;
  _QWORD *v85;
  _QWORD *v86;
  _QWORD *v87;
  _QWORD *v88;
  _QWORD *v89;
  _QWORD *v90;
  _QWORD *v91;
  int v92;
  NSObject *v93;
  int v94;
  NSObject *v95;
  int v96;
  NSObject *v97;
  int v98;
  NSObject *v99;
  int v100;
  NSObject *v101;
  uint64_t v102;
  int v103;
  NSObject *v104;
  NSObject *v105;
  int v106;
  unsigned int v107;
  std::vector<char>::pointer v108;
  int v109;
  NSObject *v110;
  int v111;
  NSObject *v112;
  std::vector<char>::pointer v113;
  int v114;
  NSObject *v115;
  int v116;
  NSObject *v117;
  int v118;
  NSObject *v119;
  int v120;
  NSObject *v121;
  int v122;
  NSObject *v123;
  int v124;
  NSObject *v125;
  int v126;
  std::vector<char>::pointer v127;
  int v128;
  NSObject *v129;
  int v130;
  NSObject *v131;
  int v132;
  NSObject *v133;
  uint64_t v134;
  char *v135;
  unsigned int v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  _DWORD *v140;
  uint64_t v141;
  uint64_t v142;
  int v143;
  int v144;
  int v145;
  BOOL v146;
  unsigned int v147;
  std::vector<char>::pointer begin;
  uint64_t v149;
  int v150;
  NSObject *v151;
  int v152;
  NSObject *v153;
  int v154;
  NSObject *v155;
  int v156;
  NSObject *v157;
  _QWORD *v158;
  _QWORD *v159;
  _QWORD *v160;
  _QWORD *v161;
  _QWORD *v162;
  _QWORD *v163;
  _QWORD *v164;
  _QWORD *v165;
  _QWORD *v166;
  _QWORD *v167;
  _QWORD *v168;
  _QWORD *v169;
  _QWORD *v170;
  _QWORD *v171;
  _QWORD *v172;
  _QWORD *v173;
  _QWORD *v174;
  _QWORD *v175;
  _QWORD *v176;
  _QWORD *v177;
  _QWORD *v178;
  _QWORD *v179;
  _QWORD *v180;
  int v181;
  NSObject *v182;
  NSObject *v183;
  NSObject *v184;
  NSObject *v185;
  _QWORD *v186;
  _QWORD *v187;
  _QWORD *v188;
  _QWORD *v189;
  _QWORD *v190;
  _QWORD *v191;
  _QWORD *v192;
  _QWORD *v193;
  unsigned int v194;
  unsigned int v195;
  __int128 v196;
  __int128 v197;
  unsigned int v198;
  __int128 v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  __int128 v203;
  uint64_t *v204;
  uint64_t *v205;
  _QWORD *v206;
  unsigned int v207;
  unsigned int *v208;
  uint64_t v209;
  int v210;
  std::vector<char> v211;
  int v212;
  int v213;
  int v214;
  __int128 __s2;
  __int128 v216;
  uint64_t v217;
  uint64_t v218;
  std::vector<char>::value_type __x[4];
  _QWORD *v220;
  __int16 v221;
  const char *v222;
  __int16 v223;
  int v224;
  __int16 v225;
  int v226;
  __int16 v227;
  int v228;
  uint8_t buf[40];
  _QWORD v230[5];

  v230[4] = *MEMORY[0x1E0C80C00];
  AUSM::Metadata::prepareParameterTracks((AUSM::Metadata *)a1, 0x400uLL, 0x1000uLL);
  v10 = (a4[1] - *a4) >> 2;
  v11 = (a5[1] - *a5) >> 2;
  v230[0] = v10;
  v230[1] = v11;
  v12 = (a5[4] - a5[3]) >> 2;
  v13 = (a5[7] - a5[6]) >> 2;
  v230[2] = v12;
  v230[3] = v13;
  if (v10 != v11 || v11 != v12 || v12 != v13)
  {
    if (getAUSMV2Log(void)::onceToken != -1)
      dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_5474);
    v16 = (id)getAUSMV2Log(void)::gLog;
    if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
    {
      v186 = a1 + 13;
      if (*((char *)a1 + 127) < 0)
        v186 = (_QWORD *)*v186;
      *(_DWORD *)buf = 136315394;
      *(_QWORD *)&buf[4] = v186;
      *(_WORD *)&buf[12] = 2080;
      *(_QWORD *)&buf[14] = "commonImmersiveRendererDataSetup";
      _os_log_error_impl(&dword_1B5ED0000, v16, OS_LOG_TYPE_ERROR, "[%s|%s] ImmersiveRendererData: all channel info sizes are not equal", buf, 0x16u);
    }

    return 4294956445;
  }
  v17 = 1;
  v18 = v230;
  do
  {
    if (v230[v17] < v10)
    {
      v10 = v230[v17];
      v18 = &v230[v17];
    }
    ++v17;
  }
  while (v17 != 4);
  v207 = *(_DWORD *)v18;
  v202 = a2;
  if (getAUSMV2Log(void)::onceToken != -1)
    dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_5474);
  v19 = (id)getAUSMV2Log(void)::gLog;
  if (os_log_type_enabled(v19, OS_LOG_TYPE_DEBUG))
  {
    v187 = a1 + 13;
    if (*((char *)a1 + 127) < 0)
      v187 = (_QWORD *)*v187;
    *(_DWORD *)buf = 136315650;
    *(_QWORD *)&buf[4] = v187;
    *(_WORD *)&buf[12] = 2080;
    *(_QWORD *)&buf[14] = "commonImmersiveRendererDataSetup";
    *(_WORD *)&buf[22] = 1024;
    *(_DWORD *)&buf[24] = v207;
    _os_log_debug_impl(&dword_1B5ED0000, v19, OS_LOG_TYPE_DEBUG, "[%s|%s] ImmersiveRendererData: %u channel infos retrieved", buf, 0x1Cu);
  }
  v204 = a4;
  v205 = a5;

  Element = (ausdk::AUElement *)ausdk::AUScope::SafeGetElement((ausdk::AUScope *)(*a1 + 80), 0);
  ausdk::AUElement::SetParameter(Element, 3u, -120.0, 0);
  v21 = (ausdk::AUElement *)ausdk::AUScope::SafeGetElement((ausdk::AUScope *)(*a1 + 80), 0);
  ausdk::AUElement::SetParameter(v21, 5u, 0.0, 0);
  HIDWORD(v218) = 1;
  v22 = AUSpatialMixerV2::SetAPACProperty((AUSpatialMixerV2 *)*a1, 1005, 0, 0, (char *)&v218 + 4, 4);
  if (v22)
  {
    if (getAUSMV2Log(void)::onceToken != -1)
      dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_5474);
    v24 = (id)getAUSMV2Log(void)::gLog;
    if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR))
    {
      v188 = a1 + 13;
      if (*((char *)a1 + 127) < 0)
        v188 = (_QWORD *)*v188;
      *(_DWORD *)buf = 136315650;
      *(_QWORD *)&buf[4] = v188;
      *(_WORD *)&buf[12] = 2080;
      *(_QWORD *)&buf[14] = "commonImmersiveRendererDataSetup";
      *(_WORD *)&buf[22] = 1024;
      *(_DWORD *)&buf[24] = v22;
      _os_log_error_impl(&dword_1B5ED0000, v24, OS_LOG_TYPE_ERROR, "[%s|%s] ImmersiveRendererData: could not enable internal reverb, err = %d", buf, 0x1Cu);
    }

  }
  if (!v202 && a3)
  {
    if (getAUSMV2Log(void)::onceToken != -1)
      dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_5474);
    v25 = (id)getAUSMV2Log(void)::gLog;
    if (os_log_type_enabled(v25, OS_LOG_TYPE_ERROR))
    {
      v189 = a1 + 13;
      if (*((char *)a1 + 127) < 0)
        v189 = (_QWORD *)*v189;
      *(_DWORD *)buf = 136315394;
      *(_QWORD *)&buf[4] = v189;
      *(_WORD *)&buf[12] = 2080;
      *(_QWORD *)&buf[14] = "commonImmersiveRendererDataSetup";
      _os_log_error_impl(&dword_1B5ED0000, v25, OS_LOG_TYPE_ERROR, "[%s|%s] ImmersiveRendererData failed: missing renderer descriptions", buf, 0x16u);
    }

    return 4294956445;
  }
  *((_DWORD *)a1 + 20) = 0;
  if (a3)
  {
    v28 = 0;
    v29 = 0;
    v206 = a1 + 13;
    v200 = a3;
    *(_QWORD *)&v23 = 136315650;
    v199 = v23;
    *(_QWORD *)&v23 = 136315906;
    v203 = v23;
    *(_QWORD *)&v23 = 136316162;
    v197 = v23;
    *(_QWORD *)&v23 = 136315394;
    v196 = v23;
    v30 = 1;
    while (2)
    {
      v31 = v202 + 20 * v28;
      v34 = *(_DWORD *)(v31 + 4);
      v32 = (unsigned int *)(v31 + 4);
      v33 = v34;
      v208 = (unsigned int *)(v202 + 20 * v28);
      v35 = *v208;
      v36 = v34 - *v208;
      if (v34 <= *v208)
      {
        if (getAUSMV2Log(void)::onceToken != -1)
          dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_5474);
        v184 = (id)getAUSMV2Log(void)::gLog;
        if (os_log_type_enabled(v184, OS_LOG_TYPE_ERROR))
        {
          if (*((char *)a1 + 127) < 0)
            v192 = (_QWORD *)*v206;
          else
            v192 = v206;
          v194 = *v208;
          v195 = *v32;
          *(_DWORD *)buf = v197;
          *(_QWORD *)&buf[4] = v192;
          *(_WORD *)&buf[12] = 2080;
          *(_QWORD *)&buf[14] = "commonImmersiveRendererDataSetup";
          *(_WORD *)&buf[22] = 1024;
          *(_DWORD *)&buf[24] = v28;
          *(_WORD *)&buf[28] = 1024;
          *(_DWORD *)&buf[30] = v194;
          *(_WORD *)&buf[34] = 1024;
          *(_DWORD *)&buf[36] = v195;
          _os_log_error_impl(&dword_1B5ED0000, v184, OS_LOG_TYPE_ERROR, "[%s|%s] ImmersiveRendererData failed: inconsistent rendererDescription channel boundaries for rendererDescription #%u: %u, %u", buf, 0x28u);
        }

        return 4294956445;
      }
      if (v36 >= 0x81)
      {
        if (getAUSMV2Log(void)::onceToken != -1)
          dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_5474);
        v185 = (id)getAUSMV2Log(void)::gLog;
        if (os_log_type_enabled(v185, OS_LOG_TYPE_ERROR))
        {
          if (*((char *)a1 + 127) < 0)
            v193 = (_QWORD *)*v206;
          else
            v193 = v206;
          *(_DWORD *)buf = v199;
          *(_QWORD *)&buf[4] = v193;
          *(_WORD *)&buf[12] = 2080;
          *(_QWORD *)&buf[14] = "commonImmersiveRendererDataSetup";
          *(_WORD *)&buf[22] = 1024;
          *(_DWORD *)&buf[24] = v28;
          _os_log_error_impl(&dword_1B5ED0000, v185, OS_LOG_TYPE_ERROR, "[%s|%s] ImmersiveRendererData failed: too many channels for rendererDescription #%u", buf, 0x1Cu);
        }

        return 4294956445;
      }
      *((_DWORD *)a1 + 20) += v36;
      v37 = v202 + 20 * v28;
      v39 = *(_DWORD *)(v37 + 8);
      v38 = (int *)(v37 + 8);
      v201 = v28;
      v209 = v36;
      switch(v39)
      {
        case -1:
          if (getAUSMV2Log(void)::onceToken != -1)
            dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_5474);
          v40 = (id)getAUSMV2Log(void)::gLog;
          if (!os_log_type_enabled(v40, OS_LOG_TYPE_INFO))
            goto LABEL_56;
          v41 = v206;
          if (*((char *)a1 + 127) < 0)
            v41 = (_QWORD *)*v206;
          *(_DWORD *)buf = v199;
          *(_QWORD *)&buf[4] = v41;
          *(_WORD *)&buf[12] = 2080;
          *(_QWORD *)&buf[14] = "commonImmersiveRendererDataSetup";
          *(_WORD *)&buf[22] = 1024;
          *(_DWORD *)&buf[24] = v30;
          v42 = v40;
          v43 = "[%s|%s] ImmersiveRendererData: kImmersiveRendererType_Unknown used for input #%u. Fallback to object.";
          goto LABEL_55;
        case 0:
          if (getAUSMV2Log(void)::onceToken != -1)
            dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_5474);
          v40 = (id)getAUSMV2Log(void)::gLog;
          if (os_log_type_enabled(v40, OS_LOG_TYPE_INFO))
          {
            v46 = v206;
            if (*((char *)a1 + 127) < 0)
              v46 = (_QWORD *)*v206;
            *(_DWORD *)buf = v199;
            *(_QWORD *)&buf[4] = v46;
            *(_WORD *)&buf[12] = 2080;
            *(_QWORD *)&buf[14] = "commonImmersiveRendererDataSetup";
            *(_WORD *)&buf[22] = 1024;
            *(_DWORD *)&buf[24] = v30;
            v42 = v40;
            v43 = "[%s|%s] ImmersiveRendererData:  kImmersiveRendererType_Unspecified used for input #%u. Fallback to object.";
LABEL_55:
            _os_log_impl(&dword_1B5ED0000, v42, OS_LOG_TYPE_INFO, v43, buf, 0x1Cu);
          }
          goto LABEL_56;
        case 1:
          v198 = v30 + 1;
          LODWORD(v218) = v30 + 1;
          v92 = ausdk::AUBase::DispatchSetProperty((const void **)*a1, 11, 1, 0, &v218, 4);
          if (v92)
          {
            if (getAUSMV2Log(void)::onceToken != -1)
              dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_5474);
            v93 = (id)getAUSMV2Log(void)::gLog;
            if (os_log_type_enabled(v93, OS_LOG_TYPE_ERROR))
            {
              v159 = v206;
              if (*((char *)a1 + 127) < 0)
                v159 = (_QWORD *)*v206;
              *(_DWORD *)buf = v203;
              *(_QWORD *)&buf[4] = v159;
              *(_WORD *)&buf[12] = 2080;
              *(_QWORD *)&buf[14] = "commonImmersiveRendererDataSetup";
              *(_WORD *)&buf[22] = 1024;
              *(_DWORD *)&buf[24] = v30;
              *(_WORD *)&buf[28] = 1024;
              *(_DWORD *)&buf[30] = v92;
              _os_log_error_impl(&dword_1B5ED0000, v93, OS_LOG_TYPE_ERROR, "[%s|%s] ImmersiveRendererData failed to set the number of input elements for input #%u, err = %d", buf, 0x22u);
            }

          }
          memset(buf, 0, sizeof(buf));
          (*(void (**)(uint8_t *__return_ptr, _QWORD, uint64_t, uint64_t))(*(_QWORD *)*a1 + 392))(buf, *a1, 1, v30);
          v216 = *(_OWORD *)&buf[16];
          __s2 = *(_OWORD *)buf;
          v217 = *(_QWORD *)&buf[32];
          HIDWORD(v216) = v209;
          v94 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, uint8_t *, __int128 *))(*(_QWORD *)*a1 + 400))(*a1, 1, v30, buf, &__s2);
          if (v94)
          {
            if (getAUSMV2Log(void)::onceToken != -1)
              dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_5474);
            v95 = (id)getAUSMV2Log(void)::gLog;
            if (os_log_type_enabled(v95, OS_LOG_TYPE_ERROR))
            {
              v161 = v206;
              if (*((char *)a1 + 127) < 0)
                v161 = (_QWORD *)*v206;
              *(_DWORD *)__x = v203;
              v220 = v161;
              v221 = 2080;
              v222 = "commonImmersiveRendererDataSetup";
              v223 = 1024;
              v224 = v30;
              v225 = 1024;
              v226 = v94;
              _os_log_error_impl(&dword_1B5ED0000, v95, OS_LOG_TYPE_ERROR, "[%s|%s] ImmersiveRendererData failed to set the stream format for input %u, err = %d", (uint8_t *)__x, 0x22u);
            }

          }
          v96 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, uint64_t, _QWORD, float))(*(_QWORD *)*a1 + 152))(*a1, 5, 1, v30, 0, 1.0);
          if (v96)
          {
            if (getAUSMV2Log(void)::onceToken != -1)
              dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_5474);
            v97 = (id)getAUSMV2Log(void)::gLog;
            if (os_log_type_enabled(v97, OS_LOG_TYPE_ERROR))
            {
              v163 = v206;
              if (*((char *)a1 + 127) < 0)
                v163 = (_QWORD *)*v206;
              *(_DWORD *)__x = v203;
              v220 = v163;
              v221 = 2080;
              v222 = "commonImmersiveRendererDataSetup";
              v223 = 1024;
              v224 = v30;
              v225 = 1024;
              v226 = v96;
              _os_log_error_impl(&dword_1B5ED0000, v97, OS_LOG_TYPE_ERROR, "[%s|%s] ImmersiveRendererData failed to enable input %u, err = %d", (uint8_t *)__x, 0x22u);
            }

          }
          v214 = 5;
          v98 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, uint64_t, int *, uint64_t))(*(_QWORD *)*a1 + 96))(*a1, 3003, 1, v30, &v214, 4);
          if (v98)
          {
            if (getAUSMV2Log(void)::onceToken != -1)
              dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_5474);
            v99 = (id)getAUSMV2Log(void)::gLog;
            if (os_log_type_enabled(v99, OS_LOG_TYPE_ERROR))
            {
              v165 = v206;
              if (*((char *)a1 + 127) < 0)
                v165 = (_QWORD *)*v206;
              *(_DWORD *)__x = v203;
              v220 = v165;
              v221 = 2080;
              v222 = "commonImmersiveRendererDataSetup";
              v223 = 1024;
              v224 = v30;
              v225 = 1024;
              v226 = v98;
              _os_log_error_impl(&dword_1B5ED0000, v99, OS_LOG_TYPE_ERROR, "[%s|%s] ImmersiveRendererData failed to set the rendering flags for input %u, err = %d", (uint8_t *)__x, 0x22u);
            }

          }
          v213 = 4;
          v100 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, uint64_t, int *, uint64_t))(*(_QWORD *)*a1 + 96))(*a1, 3013, 1, v30, &v213, 4);
          if (v100)
          {
            if (getAUSMV2Log(void)::onceToken != -1)
              dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_5474);
            v101 = (id)getAUSMV2Log(void)::gLog;
            if (os_log_type_enabled(v101, OS_LOG_TYPE_ERROR))
            {
              v167 = v206;
              if (*((char *)a1 + 127) < 0)
                v167 = (_QWORD *)*v206;
              *(_DWORD *)__x = v203;
              v220 = v167;
              v221 = 2080;
              v222 = "commonImmersiveRendererDataSetup";
              v223 = 1024;
              v224 = v30;
              v225 = 1024;
              v226 = v100;
              _os_log_error_impl(&dword_1B5ED0000, v101, OS_LOG_TYPE_ERROR, "[%s|%s] ImmersiveRendererData failed to set the attenuation law for input %u, err = %d", (uint8_t *)__x, 0x22u);
            }

          }
          v212 = 7;
          v102 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, uint64_t, int *, uint64_t))(*(_QWORD *)*a1 + 96))(*a1, 3000, 1, v30, &v212, 4);
          v103 = v102;
          if ((_DWORD)v102)
          {
            if (getAUSMV2Log(void)::onceToken != -1)
              dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_5474);
            v104 = (id)getAUSMV2Log(void)::gLog;
            if (os_log_type_enabled(v104, OS_LOG_TYPE_ERROR))
            {
              v169 = v206;
              if (*((char *)a1 + 127) < 0)
                v169 = (_QWORD *)*v206;
              *(_DWORD *)__x = v203;
              v220 = v169;
              v221 = 2080;
              v222 = "commonImmersiveRendererDataSetup";
              v223 = 1024;
              v224 = v30;
              v225 = 1024;
              v226 = v103;
              _os_log_error_impl(&dword_1B5ED0000, v104, OS_LOG_TYPE_ERROR, "[%s|%s] ImmersiveRendererData failed to set the spatialization algorithm for input %u, err = %d", (uint8_t *)__x, 0x22u);
            }

          }
          if (*v32 <= v207)
          {
            MEMORY[0x1E0C80A78](v102);
            v135 = (char *)&v196 - v134;
            if (v33 != v35)
            {
              v136 = *v208;
              v137 = *v204;
              v138 = *v205;
              v139 = v205[3];
              v140 = v135 + 8;
              v141 = v209;
              v142 = v205[6];
              do
              {
                v143 = *(_DWORD *)(v138 + 4 * v136);
                v144 = *(_DWORD *)(v139 + 4 * v136);
                v145 = *(_DWORD *)(v142 + 4 * v136);
                *(v140 - 2) = *(_DWORD *)(v137 + 4 * v136);
                *(v140 - 1) = 2;
                *v140 = v143;
                v140[1] = v144;
                v140[2] = v145;
                v140 += 5;
                ++v136;
                --v141;
              }
              while (v141);
            }
            v146 = v33 == v35;
            if (v209 <= 1)
              v147 = 1;
            else
              v147 = v209;
            __x[0] = 0;
            std::vector<char>::vector(&v211, 20 * v147 + 12, __x);
            begin = v211.__begin_;
            *(_QWORD *)v211.__begin_ = 0;
            v149 = v209;
            *((_DWORD *)begin + 2) = v209;
            if (!v146)
              memcpy(begin + 12, v135, 20 * v149);
            v150 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, std::vector<char>::pointer))(*(_QWORD *)*a1 + 536))(*a1, 1, v30, begin);
            if (v150)
            {
              if (getAUSMV2Log(void)::onceToken != -1)
                dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_5474);
              v151 = (id)getAUSMV2Log(void)::gLog;
              if (os_log_type_enabled(v151, OS_LOG_TYPE_ERROR))
              {
                v178 = v206;
                if (*((char *)a1 + 127) < 0)
                  v178 = (_QWORD *)*v206;
                *(_DWORD *)__x = v203;
                v220 = v178;
                v221 = 2080;
                v222 = "commonImmersiveRendererDataSetup";
                v223 = 1024;
                v224 = v30;
                v225 = 1024;
                v226 = v150;
                _os_log_error_impl(&dword_1B5ED0000, v151, OS_LOG_TYPE_ERROR, "[%s|%s] ImmersiveRendererData could not set the layout for input #%u, err = %d", (uint8_t *)__x, 0x22u);
              }

            }
            v113 = v211.__begin_;
            if (v211.__begin_)
            {
LABEL_273:
              v211.__end_ = v211.__begin_;
              operator delete(v113);
            }
          }
          else
          {
            if (getAUSMV2Log(void)::onceToken != -1)
              dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_5474);
            v105 = (id)getAUSMV2Log(void)::gLog;
            if (os_log_type_enabled(v105, OS_LOG_TYPE_DEBUG))
            {
              v177 = v206;
              if (*((char *)a1 + 127) < 0)
                v177 = (_QWORD *)*v206;
              *(_DWORD *)__x = v196;
              v220 = v177;
              v221 = 2080;
              v222 = "commonImmersiveRendererDataSetup";
              _os_log_debug_impl(&dword_1B5ED0000, v105, OS_LOG_TYPE_DEBUG, "[%s|%s] ImmersiveRendererData does not provide a channel layout, using the default channel layout for the given number of channels", (uint8_t *)__x, 0x16u);
            }

            v106 = v209 | 0x930000;
            v107 = v209 - 1;
            if ((v209 - 1) <= 0xF && ((0x8ABBu >> v107) & 1) != 0)
              v106 = dword_1B6676544[v107];
            __x[0] = 0;
            std::vector<char>::vector(&v211, 0x20uLL, __x);
            v108 = v211.__begin_;
            *((_DWORD *)v211.__begin_ + 1) = 0;
            *((_DWORD *)v108 + 2) = 0;
            *(_DWORD *)v108 = v106;
            v109 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)*a1 + 536))(*a1, 1, v30);
            if (v109)
            {
              if (getAUSMV2Log(void)::onceToken != -1)
                dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_5474);
              v110 = (id)getAUSMV2Log(void)::gLog;
              if (os_log_type_enabled(v110, OS_LOG_TYPE_ERROR))
              {
                v179 = v206;
                if (*((char *)a1 + 127) < 0)
                  v179 = (_QWORD *)*v206;
                *(_DWORD *)__x = v197;
                v220 = v179;
                v221 = 2080;
                v222 = "commonImmersiveRendererDataSetup";
                v223 = 1024;
                v224 = v106;
                v225 = 1024;
                v226 = v30;
                v227 = 1024;
                v228 = v109;
                _os_log_error_impl(&dword_1B5ED0000, v110, OS_LOG_TYPE_ERROR, "[%s|%s] ImmersiveRendererData could not set the layout (tag = %u) for input #%u, err = %d", (uint8_t *)__x, 0x28u);
              }

            }
            if (v106 == 6553601)
            {
              v111 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, uint64_t, _QWORD, float))(*(_QWORD *)*a1 + 152))(*a1, 2, 1, v30, 0, 1.0);
              if (v111)
              {
                if (getAUSMV2Log(void)::onceToken != -1)
                  dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_5474);
                v112 = (id)getAUSMV2Log(void)::gLog;
                if (os_log_type_enabled(v112, OS_LOG_TYPE_ERROR))
                {
                  v180 = v206;
                  if (*((char *)a1 + 127) < 0)
                    v180 = (_QWORD *)*v206;
                  *(_DWORD *)__x = v203;
                  v220 = v180;
                  v221 = 2080;
                  v222 = "commonImmersiveRendererDataSetup";
                  v223 = 1024;
                  v224 = v30;
                  v225 = 1024;
                  v226 = v111;
                  _os_log_error_impl(&dword_1B5ED0000, v112, OS_LOG_TYPE_ERROR, "[%s|%s] ImmersiveRendererData could not set the distance parameter to 1 for mono input %u, err = %d", (uint8_t *)__x, 0x22u);
                }

              }
            }
            v113 = v211.__begin_;
            if (v211.__begin_)
              goto LABEL_273;
          }
          LODWORD(v211.__begin_) = 3;
          v152 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, uint64_t, std::vector<char> *, uint64_t))(*(_QWORD *)*a1 + 96))(*a1, 3005, 1, v30, &v211, 4);
          if (v152)
          {
            if (getAUSMV2Log(void)::onceToken != -1)
              dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_5474);
            v153 = (id)getAUSMV2Log(void)::gLog;
            if (os_log_type_enabled(v153, OS_LOG_TYPE_ERROR))
            {
              v174 = v206;
              if (*((char *)a1 + 127) < 0)
                v174 = (_QWORD *)*v206;
              *(_DWORD *)__x = v203;
              v220 = v174;
              v221 = 2080;
              v222 = "commonImmersiveRendererDataSetup";
              v223 = 1024;
              v224 = v30;
              v225 = 1024;
              v226 = v152;
              _os_log_error_impl(&dword_1B5ED0000, v153, OS_LOG_TYPE_ERROR, "[%s|%s] ImmersiveRendererData could not set the source mode to ambience bed for input %u, err = %d", (uint8_t *)__x, 0x22u);
            }

          }
          v154 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, uint64_t, _QWORD, float))(*(_QWORD *)*a1 + 152))(*a1, 8, 1, v30, 0, 0.0);
          if (v154)
          {
            if (getAUSMV2Log(void)::onceToken != -1)
              dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_5474);
            v155 = (id)getAUSMV2Log(void)::gLog;
            if (os_log_type_enabled(v155, OS_LOG_TYPE_ERROR))
            {
              v175 = v206;
              if (*((char *)a1 + 127) < 0)
                v175 = (_QWORD *)*v206;
              *(_DWORD *)__x = v203;
              v220 = v175;
              v221 = 2080;
              v222 = "commonImmersiveRendererDataSetup";
              v223 = 1024;
              v224 = v30;
              v225 = 1024;
              v226 = v154;
              _os_log_error_impl(&dword_1B5ED0000, v155, OS_LOG_TYPE_ERROR, "[%s|%s] ImmersiveRendererData could not clear reverb blend on input #%u, err = %d", (uint8_t *)__x, 0x22u);
            }

          }
          v210 = 1;
          v156 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, uint64_t, int *, uint64_t))(*(_QWORD *)*a1 + 96))(*a1, 3255, 1, v30, &v210, 4);
          if (v156)
          {
            if (getAUSMV2Log(void)::onceToken != -1)
              dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_5474);
            v157 = (id)getAUSMV2Log(void)::gLog;
            if (os_log_type_enabled(v157, OS_LOG_TYPE_ERROR))
            {
              v176 = v206;
              if (*((char *)a1 + 127) < 0)
                v176 = (_QWORD *)*v206;
              *(_DWORD *)__x = v203;
              v220 = v176;
              v221 = 2080;
              v222 = "commonImmersiveRendererDataSetup";
              v223 = 1024;
              v224 = v30;
              v225 = 1024;
              v226 = v156;
              _os_log_error_impl(&dword_1B5ED0000, v157, OS_LOG_TYPE_ERROR, "[%s|%s] ImmersiveRendererData failed to set the source orientation reference for input #%u, err = %d", (uint8_t *)__x, 0x22u);
            }

          }
          v30 = v198;
LABEL_290:
          v28 = v201 + 1;
          if (v201 + 1 == v200)
            goto LABEL_362;
          continue;
        case 2:
          goto LABEL_57;
        case 3:
          LODWORD(v218) = v30 + 1;
          v114 = ausdk::AUBase::DispatchSetProperty((const void **)*a1, 11, 1, 0, &v218, 4);
          if (v114)
          {
            if (getAUSMV2Log(void)::onceToken != -1)
              dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_5474);
            v115 = (id)getAUSMV2Log(void)::gLog;
            if (os_log_type_enabled(v115, OS_LOG_TYPE_ERROR))
            {
              v160 = v206;
              if (*((char *)a1 + 127) < 0)
                v160 = (_QWORD *)*v206;
              *(_DWORD *)buf = v203;
              *(_QWORD *)&buf[4] = v160;
              *(_WORD *)&buf[12] = 2080;
              *(_QWORD *)&buf[14] = "commonImmersiveRendererDataSetup";
              *(_WORD *)&buf[22] = 1024;
              *(_DWORD *)&buf[24] = v30;
              *(_WORD *)&buf[28] = 1024;
              *(_DWORD *)&buf[30] = v114;
              _os_log_error_impl(&dword_1B5ED0000, v115, OS_LOG_TYPE_ERROR, "[%s|%s] ImmersiveRendererData failed to set the number of input elements for input #%u, err = %d", buf, 0x22u);
            }

          }
          memset(buf, 0, sizeof(buf));
          (*(void (**)(uint8_t *__return_ptr, _QWORD, uint64_t, uint64_t))(*(_QWORD *)*a1 + 392))(buf, *a1, 1, v30);
          v216 = *(_OWORD *)&buf[16];
          __s2 = *(_OWORD *)buf;
          v217 = *(_QWORD *)&buf[32];
          HIDWORD(v216) = v209;
          v116 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, uint8_t *, __int128 *))(*(_QWORD *)*a1 + 400))(*a1, 1, v30, buf, &__s2);
          if (v116)
          {
            if (getAUSMV2Log(void)::onceToken != -1)
              dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_5474);
            v117 = (id)getAUSMV2Log(void)::gLog;
            if (os_log_type_enabled(v117, OS_LOG_TYPE_ERROR))
            {
              v162 = v206;
              if (*((char *)a1 + 127) < 0)
                v162 = (_QWORD *)*v206;
              *(_DWORD *)__x = v203;
              v220 = v162;
              v221 = 2080;
              v222 = "commonImmersiveRendererDataSetup";
              v223 = 1024;
              v224 = v30;
              v225 = 1024;
              v226 = v116;
              _os_log_error_impl(&dword_1B5ED0000, v117, OS_LOG_TYPE_ERROR, "[%s|%s] ImmersiveRendererData failed to set the stream format for input #%u, err = %d", (uint8_t *)__x, 0x22u);
            }

          }
          v118 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, uint64_t, _QWORD, float))(*(_QWORD *)*a1 + 152))(*a1, 5, 1, v30, 0, 1.0);
          if (v118)
          {
            if (getAUSMV2Log(void)::onceToken != -1)
              dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_5474);
            v119 = (id)getAUSMV2Log(void)::gLog;
            if (os_log_type_enabled(v119, OS_LOG_TYPE_ERROR))
            {
              v164 = v206;
              if (*((char *)a1 + 127) < 0)
                v164 = (_QWORD *)*v206;
              *(_DWORD *)__x = v203;
              v220 = v164;
              v221 = 2080;
              v222 = "commonImmersiveRendererDataSetup";
              v223 = 1024;
              v224 = v30;
              v225 = 1024;
              v226 = v118;
              _os_log_error_impl(&dword_1B5ED0000, v119, OS_LOG_TYPE_ERROR, "[%s|%s] ImmersiveRendererData failed to enable input #%u, err = %d", (uint8_t *)__x, 0x22u);
            }

          }
          v214 = 5;
          v120 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, uint64_t, int *, uint64_t))(*(_QWORD *)*a1 + 96))(*a1, 3003, 1, v30, &v214, 4);
          if (v120)
          {
            if (getAUSMV2Log(void)::onceToken != -1)
              dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_5474);
            v121 = (id)getAUSMV2Log(void)::gLog;
            if (os_log_type_enabled(v121, OS_LOG_TYPE_ERROR))
            {
              v166 = v206;
              if (*((char *)a1 + 127) < 0)
                v166 = (_QWORD *)*v206;
              *(_DWORD *)__x = v203;
              v220 = v166;
              v221 = 2080;
              v222 = "commonImmersiveRendererDataSetup";
              v223 = 1024;
              v224 = v30;
              v225 = 1024;
              v226 = v120;
              _os_log_error_impl(&dword_1B5ED0000, v121, OS_LOG_TYPE_ERROR, "[%s|%s] ImmersiveRendererData failed to set the rendering flags for input #%u, err = %d", (uint8_t *)__x, 0x22u);
            }

          }
          v213 = 4;
          v122 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, uint64_t, int *, uint64_t))(*(_QWORD *)*a1 + 96))(*a1, 3013, 1, v30, &v213, 4);
          if (v122)
          {
            if (getAUSMV2Log(void)::onceToken != -1)
              dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_5474);
            v123 = (id)getAUSMV2Log(void)::gLog;
            if (os_log_type_enabled(v123, OS_LOG_TYPE_ERROR))
            {
              v168 = v206;
              if (*((char *)a1 + 127) < 0)
                v168 = (_QWORD *)*v206;
              *(_DWORD *)__x = v199;
              v220 = v168;
              v221 = 2080;
              v222 = "commonImmersiveRendererDataSetup";
              v223 = 1024;
              v224 = v122;
              _os_log_error_impl(&dword_1B5ED0000, v123, OS_LOG_TYPE_ERROR, "[%s|%s] ImmersiveRendererData failed to set the attenuation law, err = %d", (uint8_t *)__x, 0x1Cu);
            }

          }
          v212 = 7;
          v124 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, uint64_t, int *, uint64_t))(*(_QWORD *)*a1 + 96))(*a1, 3000, 1, v30, &v212, 4);
          if (v124)
          {
            if (getAUSMV2Log(void)::onceToken != -1)
              dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_5474);
            v125 = (id)getAUSMV2Log(void)::gLog;
            if (os_log_type_enabled(v125, OS_LOG_TYPE_ERROR))
            {
              v170 = v206;
              if (*((char *)a1 + 127) < 0)
                v170 = (_QWORD *)*v206;
              *(_DWORD *)__x = v203;
              v220 = v170;
              v221 = 2080;
              v222 = "commonImmersiveRendererDataSetup";
              v223 = 1024;
              v224 = v30;
              v225 = 1024;
              v226 = v124;
              _os_log_error_impl(&dword_1B5ED0000, v125, OS_LOG_TYPE_ERROR, "[%s|%s] ImmersiveRendererData could not set the spatialization algorithm for input %u, err = %d", (uint8_t *)__x, 0x22u);
            }

          }
          __x[0] = 0;
          std::vector<char>::vector(&v211, 0x20uLL, __x);
          v126 = v209 | 0xBE0000;
          v127 = v211.__begin_;
          *((_DWORD *)v211.__begin_ + 1) = 0;
          *((_DWORD *)v127 + 2) = 0;
          *(_DWORD *)v127 = v126;
          v128 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)*a1 + 536))(*a1, 1, v30);
          if (v128)
          {
            if (getAUSMV2Log(void)::onceToken != -1)
              dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_5474);
            v129 = (id)getAUSMV2Log(void)::gLog;
            if (os_log_type_enabled(v129, OS_LOG_TYPE_ERROR))
            {
              v171 = v206;
              if (*((char *)a1 + 127) < 0)
                v171 = (_QWORD *)*v206;
              *(_DWORD *)__x = v197;
              v220 = v171;
              v221 = 2080;
              v222 = "commonImmersiveRendererDataSetup";
              v223 = 1024;
              v224 = v126;
              v225 = 1024;
              v226 = v30;
              v227 = 1024;
              v228 = v128;
              _os_log_error_impl(&dword_1B5ED0000, v129, OS_LOG_TYPE_ERROR, "[%s|%s] ImmersiveRendererData could not set the layout (tag = %u) for input #%u, err = %d", (uint8_t *)__x, 0x28u);
            }

          }
          v210 = 3;
          v130 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, uint64_t, int *, uint64_t))(*(_QWORD *)*a1 + 96))(*a1, 3005, 1, v30, &v210, 4);
          if (v130)
          {
            if (getAUSMV2Log(void)::onceToken != -1)
              dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_5474);
            v131 = (id)getAUSMV2Log(void)::gLog;
            if (os_log_type_enabled(v131, OS_LOG_TYPE_ERROR))
            {
              v172 = v206;
              if (*((char *)a1 + 127) < 0)
                v172 = (_QWORD *)*v206;
              *(_DWORD *)__x = v203;
              v220 = v172;
              v221 = 2080;
              v222 = "commonImmersiveRendererDataSetup";
              v223 = 1024;
              v224 = v30;
              v225 = 1024;
              v226 = v130;
              _os_log_error_impl(&dword_1B5ED0000, v131, OS_LOG_TYPE_ERROR, "[%s|%s] ImmersiveRendererData could not set the source mode to ambience bed for input %u, err = %d", (uint8_t *)__x, 0x22u);
            }

          }
          v132 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, uint64_t, _QWORD, float))(*(_QWORD *)*a1 + 152))(*a1, 8, 1, v30, 0, 0.0);
          if (v132)
          {
            if (getAUSMV2Log(void)::onceToken != -1)
              dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_5474);
            v133 = (id)getAUSMV2Log(void)::gLog;
            if (os_log_type_enabled(v133, OS_LOG_TYPE_ERROR))
            {
              v173 = v206;
              if (*((char *)a1 + 127) < 0)
                v173 = (_QWORD *)*v206;
              *(_DWORD *)__x = v203;
              v220 = v173;
              v221 = 2080;
              v222 = "commonImmersiveRendererDataSetup";
              v223 = 1024;
              v224 = v30;
              v225 = 1024;
              v226 = v132;
              _os_log_error_impl(&dword_1B5ED0000, v133, OS_LOG_TYPE_ERROR, "[%s|%s] ImmersiveRendererData could not clear reverb blend on input #%u, err = %d", (uint8_t *)__x, 0x22u);
            }

          }
          if (v211.__begin_)
          {
            v211.__end_ = v211.__begin_;
            operator delete(v211.__begin_);
          }
          v30 = (v30 + 1);
          goto LABEL_290;
        default:
          if (getAUSMV2Log(void)::onceToken != -1)
            dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_5474);
          v40 = (id)getAUSMV2Log(void)::gLog;
          if (os_log_type_enabled(v40, OS_LOG_TYPE_ERROR))
          {
            v44 = v206;
            if (*((char *)a1 + 127) < 0)
              v44 = (_QWORD *)*v206;
            v45 = *v38;
            *(_DWORD *)buf = v199;
            *(_QWORD *)&buf[4] = v44;
            *(_WORD *)&buf[12] = 2080;
            *(_QWORD *)&buf[14] = "commonImmersiveRendererDataSetup";
            *(_WORD *)&buf[22] = 1024;
            *(_DWORD *)&buf[24] = v45;
            _os_log_error_impl(&dword_1B5ED0000, v40, OS_LOG_TYPE_ERROR, "[%s|%s] ImmersiveRendererData does not support render type %u. Fallback to object.", buf, 0x1Cu);
          }
LABEL_56:

LABEL_57:
          LODWORD(__s2) = v209 + v30;
          v47 = ausdk::AUBase::DispatchSetProperty((const void **)*a1, 11, 1, 0, &__s2, 4);
          if (v47)
          {
            if (getAUSMV2Log(void)::onceToken != -1)
              dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_5474);
            v48 = (id)getAUSMV2Log(void)::gLog;
            if (os_log_type_enabled(v48, OS_LOG_TYPE_ERROR))
            {
              v158 = v206;
              if (*((char *)a1 + 127) < 0)
                v158 = (_QWORD *)*v206;
              *(_DWORD *)buf = v203;
              *(_QWORD *)&buf[4] = v158;
              *(_WORD *)&buf[12] = 2080;
              *(_QWORD *)&buf[14] = "commonImmersiveRendererDataSetup";
              *(_WORD *)&buf[22] = 1024;
              *(_DWORD *)&buf[24] = v30;
              *(_WORD *)&buf[28] = 1024;
              *(_DWORD *)&buf[30] = v47;
              _os_log_error_impl(&dword_1B5ED0000, v48, OS_LOG_TYPE_ERROR, "[%s|%s] ImmersiveRendererData failed to set the number of input elements for input #%u, err = %d", buf, 0x22u);
            }

          }
          if (v33 == v35)
            goto LABEL_290;
          v49 = 0;
          break;
      }
      break;
    }
    while (1)
    {
      v50 = (uint64_t **)a1[2];
      v52 = v50 + 1;
      v51 = (uint64_t)v50[1];
      if (v51)
      {
        while (1)
        {
          while (1)
          {
            v53 = v51;
            v54 = *(_DWORD *)(v51 + 28);
            if (v29 >= v54)
              break;
            v51 = *(_QWORD *)v53;
            v52 = (uint64_t **)v53;
            if (!*(_QWORD *)v53)
              goto LABEL_72;
          }
          if (v54 >= v29)
            break;
          v51 = *(_QWORD *)(v53 + 8);
          if (!v51)
          {
            v52 = (uint64_t **)(v53 + 8);
            goto LABEL_72;
          }
        }
      }
      else
      {
        v53 = (uint64_t)(v50 + 1);
LABEL_72:
        v55 = (uint64_t *)operator new(0x28uLL);
        *((_DWORD *)v55 + 7) = v29;
        *((_DWORD *)v55 + 8) = 0;
        std::__tree<std::__value_type<double,int>,std::__map_value_compare<double,std::__value_type<double,int>,std::less<double>,true>,std::allocator<std::__value_type<double,int>>>::__insert_node_at(v50, v53, v52, v55);
        v53 = (uint64_t)v55;
      }
      *(_DWORD *)(v53 + 32) = v30;
      memset(buf, 0, sizeof(buf));
      (*(void (**)(uint8_t *__return_ptr, _QWORD, uint64_t, uint64_t))(*(_QWORD *)*a1 + 392))(buf, *a1, 1, v30);
      v216 = *(_OWORD *)&buf[16];
      __s2 = *(_OWORD *)buf;
      v217 = *(_QWORD *)&buf[32];
      HIDWORD(v216) = 1;
      v56 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, uint8_t *, __int128 *))(*(_QWORD *)*a1 + 400))(*a1, 1, v30, buf, &__s2);
      if (v56)
      {
        if (getAUSMV2Log(void)::onceToken != -1)
          dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_5474);
        v57 = (id)getAUSMV2Log(void)::gLog;
        if (os_log_type_enabled(v57, OS_LOG_TYPE_ERROR))
        {
          v82 = v206;
          if (*((char *)a1 + 127) < 0)
            v82 = (_QWORD *)*v206;
          *(_DWORD *)__x = v203;
          v220 = v82;
          v221 = 2080;
          v222 = "commonImmersiveRendererDataSetup";
          v223 = 1024;
          v224 = v30;
          v225 = 1024;
          v226 = v56;
          _os_log_error_impl(&dword_1B5ED0000, v57, OS_LOG_TYPE_ERROR, "[%s|%s] ImmersiveRendererData failed to set the stream format for input #%u, err = %d", (uint8_t *)__x, 0x22u);
        }

      }
      v58 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, uint64_t, _QWORD, float))(*(_QWORD *)*a1 + 152))(*a1, 5, 1, v30, 0, 1.0);
      if (v58)
      {
        if (getAUSMV2Log(void)::onceToken != -1)
          dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_5474);
        v59 = (id)getAUSMV2Log(void)::gLog;
        if (os_log_type_enabled(v59, OS_LOG_TYPE_ERROR))
        {
          v83 = v206;
          if (*((char *)a1 + 127) < 0)
            v83 = (_QWORD *)*v206;
          *(_DWORD *)__x = v203;
          v220 = v83;
          v221 = 2080;
          v222 = "commonImmersiveRendererDataSetup";
          v223 = 1024;
          v224 = v30;
          v225 = 1024;
          v226 = v58;
          _os_log_error_impl(&dword_1B5ED0000, v59, OS_LOG_TYPE_ERROR, "[%s|%s] ImmersiveRendererData failed to enable input #%u, err = %d", (uint8_t *)__x, 0x22u);
        }

      }
      LODWORD(v218) = 5;
      v60 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, uint64_t, uint64_t *, uint64_t))(*(_QWORD *)*a1 + 96))(*a1, 3003, 1, v30, &v218, 4);
      if (v60)
      {
        if (getAUSMV2Log(void)::onceToken != -1)
          dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_5474);
        v61 = (id)getAUSMV2Log(void)::gLog;
        if (os_log_type_enabled(v61, OS_LOG_TYPE_ERROR))
        {
          v84 = v206;
          if (*((char *)a1 + 127) < 0)
            v84 = (_QWORD *)*v206;
          *(_DWORD *)__x = v203;
          v220 = v84;
          v221 = 2080;
          v222 = "commonImmersiveRendererDataSetup";
          v223 = 1024;
          v224 = v30;
          v225 = 1024;
          v226 = v60;
          _os_log_error_impl(&dword_1B5ED0000, v61, OS_LOG_TYPE_ERROR, "[%s|%s] ImmersiveRendererData failed to set the rendering flags for input #%u, err = %d", (uint8_t *)__x, 0x22u);
        }

      }
      v214 = 4;
      v62 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, uint64_t, int *, uint64_t))(*(_QWORD *)*a1 + 96))(*a1, 3013, 1, v30, &v214, 4);
      if (v62)
      {
        if (getAUSMV2Log(void)::onceToken != -1)
          dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_5474);
        v63 = (id)getAUSMV2Log(void)::gLog;
        if (os_log_type_enabled(v63, OS_LOG_TYPE_ERROR))
        {
          v85 = v206;
          if (*((char *)a1 + 127) < 0)
            v85 = (_QWORD *)*v206;
          *(_DWORD *)__x = v199;
          v220 = v85;
          v221 = 2080;
          v222 = "commonImmersiveRendererDataSetup";
          v223 = 1024;
          v224 = v62;
          _os_log_error_impl(&dword_1B5ED0000, v63, OS_LOG_TYPE_ERROR, "[%s|%s] ImmersiveRendererData failed to set the attenuation law, err = %d", (uint8_t *)__x, 0x1Cu);
        }

      }
      v213 = 7;
      v64 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, uint64_t, int *, uint64_t))(*(_QWORD *)*a1 + 96))(*a1, 3000, 1, v30, &v213, 4);
      if (v64)
      {
        if (getAUSMV2Log(void)::onceToken != -1)
          dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_5474);
        v65 = (id)getAUSMV2Log(void)::gLog;
        if (os_log_type_enabled(v65, OS_LOG_TYPE_ERROR))
        {
          v86 = v206;
          if (*((char *)a1 + 127) < 0)
            v86 = (_QWORD *)*v206;
          *(_DWORD *)__x = v203;
          v220 = v86;
          v221 = 2080;
          v222 = "commonImmersiveRendererDataSetup";
          v223 = 1024;
          v224 = v30;
          v225 = 1024;
          v226 = v64;
          _os_log_error_impl(&dword_1B5ED0000, v65, OS_LOG_TYPE_ERROR, "[%s|%s] ImmersiveRendererData failed to set the spatialization algorithm for input %u, err = %d", (uint8_t *)__x, 0x22u);
        }

      }
      v66 = *v208 + v49;
      if (v66 < v207)
        break;
      __x[0] = 0;
      std::vector<char>::vector(&v211, 0x20uLL, __x);
      v74 = v211.__begin_;
      *(_QWORD *)v211.__begin_ = 6553601;
      *((_DWORD *)v74 + 2) = 0;
      v75 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)*a1 + 536))(*a1, 1, v30);
      if (v75)
      {
        if (getAUSMV2Log(void)::onceToken != -1)
          dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_5474);
        v73 = (id)getAUSMV2Log(void)::gLog;
        if (os_log_type_enabled(v73, OS_LOG_TYPE_ERROR))
        {
          v91 = v206;
          if (*((char *)a1 + 127) < 0)
            v91 = (_QWORD *)*v206;
          *(_DWORD *)__x = v197;
          v220 = v91;
          v221 = 2080;
          v222 = "commonImmersiveRendererDataSetup";
          v223 = 1024;
          v224 = 6553601;
          v225 = 1024;
          v226 = v30;
          v227 = 1024;
          v228 = v75;
          _os_log_error_impl(&dword_1B5ED0000, v73, OS_LOG_TYPE_ERROR, "[%s|%s] ImmersiveRendererData could not set the layout (tag = %u) for input #%u, err = %d", (uint8_t *)__x, 0x28u);
        }
LABEL_111:

      }
LABEL_112:
      if (v211.__begin_)
      {
        v211.__end_ = v211.__begin_;
        operator delete(v211.__begin_);
      }
      LODWORD(v211.__begin_) = 2;
      v76 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, uint64_t, std::vector<char> *, uint64_t))(*(_QWORD *)*a1 + 96))(*a1, 3005, 1, v30, &v211, 4);
      if (v76)
      {
        if (getAUSMV2Log(void)::onceToken != -1)
          dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_5474);
        v77 = (id)getAUSMV2Log(void)::gLog;
        if (os_log_type_enabled(v77, OS_LOG_TYPE_ERROR))
        {
          v87 = v206;
          if (*((char *)a1 + 127) < 0)
            v87 = (_QWORD *)*v206;
          *(_DWORD *)__x = v203;
          v220 = v87;
          v221 = 2080;
          v222 = "commonImmersiveRendererDataSetup";
          v223 = 1024;
          v224 = v30;
          v225 = 1024;
          v226 = v76;
          _os_log_error_impl(&dword_1B5ED0000, v77, OS_LOG_TYPE_ERROR, "[%s|%s] ImmersiveRendererData could not set the source mode to point source for input %u, err = %d", (uint8_t *)__x, 0x22u);
        }

      }
      v78 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, uint64_t, _QWORD, float))(*(_QWORD *)*a1 + 152))(*a1, 8, 1, v30, 0, 0.0);
      if (v78)
      {
        if (getAUSMV2Log(void)::onceToken != -1)
          dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_5474);
        v79 = (id)getAUSMV2Log(void)::gLog;
        if (os_log_type_enabled(v79, OS_LOG_TYPE_ERROR))
        {
          v88 = v206;
          if (*((char *)a1 + 127) < 0)
            v88 = (_QWORD *)*v206;
          *(_DWORD *)__x = v203;
          v220 = v88;
          v221 = 2080;
          v222 = "commonImmersiveRendererDataSetup";
          v223 = 1024;
          v224 = v30;
          v225 = 1024;
          v226 = v78;
          _os_log_error_impl(&dword_1B5ED0000, v79, OS_LOG_TYPE_ERROR, "[%s|%s] ImmersiveRendererData could not clear reverb blend on input #%u, err = %d", (uint8_t *)__x, 0x22u);
        }

      }
      v212 = 1;
      v80 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, uint64_t, int *, uint64_t))(*(_QWORD *)*a1 + 96))(*a1, 3255, 1, v30, &v212, 4);
      if (v80)
      {
        if (getAUSMV2Log(void)::onceToken != -1)
          dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_5474);
        v81 = (id)getAUSMV2Log(void)::gLog;
        if (os_log_type_enabled(v81, OS_LOG_TYPE_ERROR))
        {
          v89 = v206;
          if (*((char *)a1 + 127) < 0)
            v89 = (_QWORD *)*v206;
          *(_DWORD *)__x = v203;
          v220 = v89;
          v221 = 2080;
          v222 = "commonImmersiveRendererDataSetup";
          v223 = 1024;
          v224 = v30;
          v225 = 1024;
          v226 = v80;
          _os_log_error_impl(&dword_1B5ED0000, v81, OS_LOG_TYPE_ERROR, "[%s|%s] ImmersiveRendererData failed to set the source orientation reference for input #%u, err = %d", (uint8_t *)__x, 0x22u);
        }

      }
      ++v29;
      v30 = (v30 + 1);
      if (++v49 == (_DWORD)v209)
        goto LABEL_290;
    }
    v67 = *(_DWORD *)(*v205 + 4 * v66);
    v68 = *(_DWORD *)(v205[3] + 4 * v66);
    v69 = *(_DWORD *)(v205[6] + 4 * v66);
    if ((*(_DWORD *)(*v204 + 4 * v66) & 0xFFFF0000) == 0x40000)
      v70 = 100;
    else
      v70 = *(_DWORD *)(*v204 + 4 * v66);
    __x[0] = 0;
    std::vector<char>::vector(&v211, 0x20uLL, __x);
    v71 = v211.__begin_;
    *(_QWORD *)v211.__begin_ = 0;
    *((_DWORD *)v71 + 2) = 1;
    *((_DWORD *)v71 + 3) = v70;
    *((_DWORD *)v71 + 4) = 2;
    *((_DWORD *)v71 + 5) = v67;
    *((_DWORD *)v71 + 6) = v68;
    *((_DWORD *)v71 + 7) = v69;
    v72 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)*a1 + 536))(*a1, 1, v30);
    if (!v72)
      goto LABEL_112;
    if (getAUSMV2Log(void)::onceToken != -1)
      dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_5474);
    v73 = (id)getAUSMV2Log(void)::gLog;
    if (os_log_type_enabled(v73, OS_LOG_TYPE_ERROR))
    {
      v90 = v206;
      if (*((char *)a1 + 127) < 0)
        v90 = (_QWORD *)*v206;
      *(_DWORD *)__x = v203;
      v220 = v90;
      v221 = 2080;
      v222 = "commonImmersiveRendererDataSetup";
      v223 = 1024;
      v224 = v30;
      v225 = 1024;
      v226 = v72;
      _os_log_error_impl(&dword_1B5ED0000, v73, OS_LOG_TYPE_ERROR, "[%s|%s] ImmersiveRendererData could not set the layout for input #%u, err = %d", (uint8_t *)__x, 0x22u);
    }
    goto LABEL_111;
  }
  LODWORD(v30) = 1;
LABEL_362:
  LODWORD(__s2) = 2;
  v181 = ausdk::AUBase::DispatchSetProperty((const void **)*a1, 3219, 0, 0, &__s2, 4);
  if (v181)
  {
    if (getAUSMV2Log(void)::onceToken != -1)
      dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_5474);
    v182 = (id)getAUSMV2Log(void)::gLog;
    if (os_log_type_enabled(v182, OS_LOG_TYPE_ERROR))
    {
      v190 = a1 + 13;
      if (*((char *)a1 + 127) < 0)
        v190 = (_QWORD *)*v190;
      *(_DWORD *)buf = 136315650;
      *(_QWORD *)&buf[4] = v190;
      *(_WORD *)&buf[12] = 2080;
      *(_QWORD *)&buf[14] = "commonImmersiveRendererDataSetup";
      *(_WORD *)&buf[22] = 1024;
      *(_DWORD *)&buf[24] = v181;
      _os_log_error_impl(&dword_1B5ED0000, v182, OS_LOG_TYPE_ERROR, "[%s|%s] ImmersiveRendererData failed to switch to scheduled parameters err = %d", buf, 0x1Cu);
    }

  }
  *(_DWORD *)__x = 0;
  v26 = (*(uint64_t (**)(_QWORD, uint64_t, _QWORD, _QWORD, std::vector<char>::value_type *))(*(_QWORD *)*a1 + 88))(*a1, 5677, 0, 0, __x);
  if ((_DWORD)v26)
  {
    if (getAUSMV2Log(void)::onceToken != -1)
      dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_5474);
    v183 = (id)getAUSMV2Log(void)::gLog;
    if (os_log_type_enabled(v183, OS_LOG_TYPE_ERROR))
    {
      v191 = a1 + 13;
      if (*((char *)a1 + 127) < 0)
        v191 = (_QWORD *)*v191;
      *(_DWORD *)buf = 136315650;
      *(_QWORD *)&buf[4] = v191;
      *(_WORD *)&buf[12] = 2080;
      *(_QWORD *)&buf[14] = "commonImmersiveRendererDataSetup";
      *(_WORD *)&buf[22] = 1024;
      *(_DWORD *)&buf[24] = v26;
      _os_log_error_impl(&dword_1B5ED0000, v183, OS_LOG_TYPE_ERROR, "[%s|%s] Could not wait for reverb, err = %d", buf, 0x1Cu);
    }

  }
  *(_DWORD *)(a1[2] + 32) = v30;
  return v26;
}

void sub_1B644EA7C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)(v1 - 344);
  if (v3)
  {
    *(_QWORD *)(v1 - 336) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void AUSM::Metadata::PImpl::ParseMetadataConfig(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  int v5;
  unsigned int v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t i;
  unsigned __int16 *v10;
  __n128 v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  unsigned int v15;
  BOOL v16;
  uint64_t *v17;
  NSObject *v18;
  uint64_t v19;
  int v20;
  NSObject *v21;
  _QWORD *v22;
  const char *v23;
  _QWORD *v24;
  _QWORD *v25;
  uint8_t buf[4];
  _BYTE v27[20];
  int v28;
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  if (!*(_BYTE *)(a2 + 1))
  {
    if (getAUSMV2Log(void)::onceToken != -1)
      dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_5474);
    v21 = (id)getAUSMV2Log(void)::gLog;
    if (!os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
      goto LABEL_51;
    v22 = (_QWORD *)(a1 + 48);
    if (*(char *)(a1 + 71) < 0)
      v22 = (_QWORD *)*v22;
    *(_DWORD *)buf = 136315394;
    *(_QWORD *)v27 = v22;
    *(_WORD *)&v27[8] = 2080;
    *(_QWORD *)&v27[10] = "ParseMetadataConfig";
    v23 = "[%s|%s] No renderer metadata config present";
    goto LABEL_50;
  }
  v5 = *(unsigned __int8 *)(a2 + 16);
  v4 = a2 + 16;
  v6 = *(unsigned __int16 *)(v4 - 8);
  if (v5)
    AUSM::Metadata::PImpl::ParseGlobalConfig(a1, v4);
  v7 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 4792) - *(_QWORD *)(a2 + 4784)) >> 4);
  if (v7 != v6)
  {
    if (getAUSMV2Log(void)::onceToken != -1)
      dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_5474);
    v21 = (id)getAUSMV2Log(void)::gLog;
    if (!os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
      goto LABEL_51;
    v24 = (_QWORD *)(a1 + 48);
    if (*(char *)(a1 + 71) < 0)
      v24 = (_QWORD *)*v24;
    *(_DWORD *)buf = 136315394;
    *(_QWORD *)v27 = v24;
    *(_WORD *)&v27[8] = 2080;
    *(_QWORD *)&v27[10] = "ParseMetadataConfig";
    v23 = "[%s|%s] Error: not enough group config elements";
    goto LABEL_50;
  }
  if (0x6F96F96F96F96F97 * ((uint64_t)(*(_QWORD *)(a2 + 4816) - *(_QWORD *)(a2 + 4808)) >> 5) != v7)
  {
    if (getAUSMV2Log(void)::onceToken != -1)
      dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_5474);
    v21 = (id)getAUSMV2Log(void)::gLog;
    if (!os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
      goto LABEL_51;
    v25 = (_QWORD *)(a1 + 48);
    if (*(char *)(a1 + 71) < 0)
      v25 = (_QWORD *)*v25;
    *(_DWORD *)buf = 136315394;
    *(_QWORD *)v27 = v25;
    *(_WORD *)&v27[8] = 2080;
    *(_QWORD *)&v27[10] = "ParseMetadataConfig";
    v23 = "[%s|%s] Error: not enough renderer data elements";
LABEL_50:
    _os_log_error_impl(&dword_1B5ED0000, v21, OS_LOG_TYPE_ERROR, v23, buf, 0x16u);
LABEL_51:

    return;
  }
  if (v7 >= v6)
    v8 = v6;
  else
    v8 = v7;
  if ((_DWORD)v8)
  {
    for (i = 0; i != v8; ++i)
    {
      v10 = (unsigned __int16 *)(*(_QWORD *)(a2 + 4784) + 48 * i);
      AUSM::Metadata::PImpl::ParseGroupConfig(a1, v10);
      v12 = *(_QWORD *)(a1 + 104);
      if (!v12)
        goto LABEL_22;
      v13 = *v10;
      v14 = a1 + 104;
      do
      {
        v15 = *(_DWORD *)(v12 + 32);
        v16 = v15 >= v13;
        if (v15 >= v13)
          v17 = (uint64_t *)v12;
        else
          v17 = (uint64_t *)(v12 + 8);
        if (v16)
          v14 = v12;
        v12 = *v17;
      }
      while (*v17);
      if (v14 != a1 + 104 && *(_DWORD *)(v14 + 32) <= v13)
      {
        *(_DWORD *)buf = *v10;
        *(_QWORD *)&v27[4] = v14 + 40;
        *(_QWORD *)&v27[12] = 0;
        AUSM::Metadata::PImpl::ParseRendererData((AUSM::Metadata::PImpl *)a1, *(_QWORD *)(a2 + 4808) + 1248 * i, (uint64_t)buf, v11);
      }
      else
      {
LABEL_22:
        if (getAUSMV2Log(void)::onceToken != -1)
          dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_5474);
        v18 = (id)getAUSMV2Log(void)::gLog;
        if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
        {
          v19 = a1 + 48;
          if (*(char *)(a1 + 71) < 0)
            v19 = *(_QWORD *)(a1 + 48);
          v20 = *v10;
          *(_DWORD *)buf = 136315650;
          *(_QWORD *)v27 = v19;
          *(_WORD *)&v27[8] = 2080;
          *(_QWORD *)&v27[10] = "ParseMetadataConfig";
          *(_WORD *)&v27[18] = 1024;
          v28 = v20;
          _os_log_error_impl(&dword_1B5ED0000, v18, OS_LOG_TYPE_ERROR, "[%s|%s] MC: Group %u not found", buf, 0x1Cu);
        }

      }
    }
  }
}

void AUSM::Metadata::PImpl::ParseGlobalConfig(uint64_t a1, uint64_t a2)
{
  unsigned int v4;
  NSObject *v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  int v9;
  int v10;
  NSObject *v11;
  NSObject *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  int v17;
  NSObject *v18;
  uint64_t v19;
  NSObject *v20;
  NSObject *v21;
  uint64_t v22;
  NSObject *v23;
  const char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  const char *v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t *v35;
  uint64_t v36;
  int v37;
  _BYTE __s1[24];
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  v42 = *MEMORY[0x1E0C80C00];
  v4 = *(unsigned __int16 *)(a2 + 2);
  if (v4 >= 0x801)
  {
    if (getAUSMV2Log(void)::onceToken != -1)
      dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_5474);
    v5 = (id)getAUSMV2Log(void)::gLog;
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      v34 = (_QWORD *)(a1 + 48);
      if (*(char *)(a1 + 71) < 0)
        v34 = (_QWORD *)*v34;
      *(_DWORD *)__s1 = 136315394;
      *(_QWORD *)&__s1[4] = v34;
      *(_WORD *)&__s1[12] = 2080;
      *(_QWORD *)&__s1[14] = "ParseGlobalConfig";
      _os_log_error_impl(&dword_1B5ED0000, v5, OS_LOG_TYPE_ERROR, "[%s|%s] Too many parameters for GlobalConfig", __s1, 0x16u);
    }

    v4 = *(unsigned __int16 *)(a2 + 2);
  }
  if (v4 >= 0x800)
    v6 = 2048;
  else
    v6 = v4;
  if ((_DWORD)v6)
  {
    v7 = 0;
    v35 = (uint64_t *)(a1 + 48);
    while (2)
    {
      v8 = *(unsigned __int16 *)(a2 + 4 + 2 * v7);
      switch(*(_WORD *)(a2 + 4 + 2 * v7))
      {
        case 0:
          v9 = *(unsigned __int8 *)(a2 + 4100);
          *(_BYTE *)(a1 + 120) = v9;
          LODWORD(v36) = v9;
          v10 = AUSpatialMixerV2::SetAPACProperty(*(AUSpatialMixerV2 **)(a1 + 40), 3267, 0, 0, &v36, 4);
          if (v10)
          {
            if (getAUSMV2Log(void)::onceToken != -1)
              dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_5474);
            v11 = (id)getAUSMV2Log(void)::gLog;
            if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
            {
              v28 = a1 + 48;
              if (*(char *)(a1 + 71) < 0)
                v28 = *v35;
              v29 = "enable";
              if (!*(_BYTE *)(a1 + 120))
                v29 = "disable";
              *(_DWORD *)__s1 = 136315906;
              *(_QWORD *)&__s1[4] = v28;
              *(_WORD *)&__s1[12] = 2080;
              *(_QWORD *)&__s1[14] = "ParseGlobalConfig";
              *(_WORD *)&__s1[22] = 2080;
              v39 = (uint64_t)v29;
              LOWORD(v40) = 1024;
              *(_DWORD *)((char *)&v40 + 2) = v10;
              _os_log_error_impl(&dword_1B5ED0000, v11, OS_LOG_TYPE_ERROR, "[%s|%s] Could not %s post-processing reverb, err = %d", __s1, 0x26u);
            }

          }
          goto LABEL_12;
        case 1:
        case 2:
        case 3:
        case 4:
        case 5:
        case 6:
        case 8:
        case 0xB:
        case 0xC:
        case 0xD:
        case 0xE:
        case 0xF:
          goto LABEL_12;
        case 7:
          if (*(unsigned __int8 *)(a2 + 4488) >= 3u)
          {
            if (getAUSMV2Log(void)::onceToken != -1)
              dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_5474);
            v12 = (id)getAUSMV2Log(void)::gLog;
            if (os_log_type_enabled(v12, OS_LOG_TYPE_DEBUG))
            {
              v31 = a1 + 48;
              if (*(char *)(a1 + 71) < 0)
                v31 = *v35;
              v32 = *(unsigned __int8 *)(a2 + 4488);
              *(_DWORD *)__s1 = 136315650;
              *(_QWORD *)&__s1[4] = v31;
              *(_WORD *)&__s1[12] = 2080;
              *(_QWORD *)&__s1[14] = "ParseBinauralization";
              *(_WORD *)&__s1[22] = 1024;
              LODWORD(v39) = v32;
              _os_log_debug_impl(&dword_1B5ED0000, v12, OS_LOG_TYPE_DEBUG, "[%s|%s] Unknown HRTF type %u", __s1, 0x1Cu);
            }
            goto LABEL_34;
          }
          goto LABEL_12;
        case 9:
          v13 = *(_QWORD *)(a2 + 4536) - *(_QWORD *)(a2 + 4528);
          *(_QWORD *)__s1 = *(unsigned __int8 *)(a2 + 4513);
          *(_QWORD *)&__s1[8] = v13;
          v14 = (uint64_t)(*(_QWORD *)(a2 + 4584) - *(_QWORD *)(a2 + 4576)) >> 2;
          *(_QWORD *)&__s1[16] = (uint64_t)(*(_QWORD *)(a2 + 4560) - *(_QWORD *)(a2 + 4552)) >> 2;
          v39 = v14;
          v15 = *(_QWORD *)(a2 + 4632) - *(_QWORD *)(a2 + 4624);
          v40 = (uint64_t)(*(_QWORD *)(a2 + 4608) - *(_QWORD *)(a2 + 4600)) >> 2;
          v41 = v15;
          if (memcmp(__s1, &__s1[8], 0x28uLL))
          {
            if (getAUSMV2Log(void)::onceToken != -1)
              dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_5474);
            v12 = (id)getAUSMV2Log(void)::gLog;
            if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
            {
              v30 = a1 + 48;
              if (*(char *)(a1 + 71) < 0)
                v30 = *v35;
              *(_DWORD *)__s1 = 136315394;
              *(_QWORD *)&__s1[4] = v30;
              *(_WORD *)&__s1[12] = 2080;
              *(_QWORD *)&__s1[14] = "ParseFallbackSPAD";
              _os_log_error_impl(&dword_1B5ED0000, v12, OS_LOG_TYPE_ERROR, "[%s|%s] FallbackSPAD: inconsistent sizes", __s1, 0x16u);
            }
            goto LABEL_34;
          }
          goto LABEL_12;
        case 0xA:
          v16 = *(unsigned __int8 *)(a2 + 4648);
          v37 = 4;
          switch(v16)
          {
            case 0:
              v17 = 5;
              goto LABEL_41;
            case 1:
              break;
            case 2:
              v17 = 1;
              goto LABEL_41;
            case 3:
              v17 = 3;
LABEL_41:
              v37 = v17;
              break;
            default:
              if (getAUSMV2Log(void)::onceToken != -1)
                dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_5474);
              v18 = (id)getAUSMV2Log(void)::gLog;
              if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
              {
                v33 = a1 + 48;
                if (*(char *)(a1 + 71) < 0)
                  v33 = *v35;
                *(_DWORD *)__s1 = 136315650;
                *(_QWORD *)&__s1[4] = v33;
                *(_WORD *)&__s1[12] = 2080;
                *(_QWORD *)&__s1[14] = "ParseDistanceAttenuation";
                *(_WORD *)&__s1[22] = 1024;
                LODWORD(v39) = v16;
                _os_log_error_impl(&dword_1B5ED0000, v18, OS_LOG_TYPE_ERROR, "[%s|%s] Distance Attenuation: Unsupported attenuation law %u. Defaulting to 'realistic'", __s1, 0x1Cu);
              }

              break;
          }
          if (*(_DWORD *)(a1 + 32) < 2u)
            goto LABEL_12;
          v19 = 1;
          break;
        default:
          if (getAUSMV2Log(void)::onceToken != -1)
            dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_5474);
          v12 = (id)getAUSMV2Log(void)::gLog;
          if (os_log_type_enabled(v12, OS_LOG_TYPE_DEBUG))
          {
            v27 = a1 + 48;
            if (*(char *)(a1 + 71) < 0)
              v27 = *v35;
            *(_DWORD *)__s1 = 136315650;
            *(_QWORD *)&__s1[4] = v27;
            *(_WORD *)&__s1[12] = 2080;
            *(_QWORD *)&__s1[14] = "ParseGlobalConfig";
            *(_WORD *)&__s1[22] = 1024;
            LODWORD(v39) = v8;
            _os_log_debug_impl(&dword_1B5ED0000, v12, OS_LOG_TYPE_DEBUG, "[%s|%s] Unknown global param id %u", __s1, 0x1Cu);
          }
LABEL_34:

LABEL_12:
          if (++v7 == v6)
            return;
          continue;
      }
      break;
    }
    while (1)
    {
      if ((*(unsigned int (**)(_QWORD, uint64_t, uint64_t, uint64_t, int *, uint64_t))(**(_QWORD **)(a1 + 40)
                                                                                             + 96))(*(_QWORD *)(a1 + 40), 3013, 1, v19, &v37, 4))
      {
        if (getAUSMV2Log(void)::onceToken != -1)
          dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_5474);
        v20 = (id)getAUSMV2Log(void)::gLog;
        if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
        {
          v25 = a1 + 48;
          if (*(char *)(a1 + 71) < 0)
            v25 = *v35;
          *(_DWORD *)__s1 = 136315394;
          *(_QWORD *)&__s1[4] = v25;
          *(_WORD *)&__s1[12] = 2080;
          *(_QWORD *)&__s1[14] = "ParseDistanceAttenuation";
          _os_log_error_impl(&dword_1B5ED0000, v20, OS_LOG_TYPE_ERROR, "[%s|%s] Distance Attenuation: Failed to set the attenuation law", __s1, 0x16u);
        }

      }
      if ((*(unsigned int (**)(_QWORD, uint64_t, uint64_t, uint64_t, uint64_t *))(**(_QWORD **)(a1 + 40) + 88))(*(_QWORD *)(a1 + 40), 3010, 1, v19, &v36))
      {
        break;
      }
      v36 = *(_QWORD *)(a2 + 4656);
      if ((*(unsigned int (**)(_QWORD, uint64_t, uint64_t, uint64_t, uint64_t *, uint64_t))(**(_QWORD **)(a1 + 40)
                                                                                                 + 96))(*(_QWORD *)(a1 + 40), 3010, 1, v19, &v36, 12))
      {
        if (getAUSMV2Log(void)::onceToken != -1)
          dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_5474);
        v21 = (id)getAUSMV2Log(void)::gLog;
        if (!os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
          goto LABEL_60;
        v26 = a1 + 48;
        if (*(char *)(a1 + 71) < 0)
          v26 = *v35;
        *(_DWORD *)__s1 = 136315394;
        *(_QWORD *)&__s1[4] = v26;
        *(_WORD *)&__s1[12] = 2080;
        *(_QWORD *)&__s1[14] = "ParseDistanceAttenuation";
        v23 = v21;
        v24 = "[%s|%s] Distance Attenuation: Failed to set the distance params";
LABEL_69:
        _os_log_error_impl(&dword_1B5ED0000, v23, OS_LOG_TYPE_ERROR, v24, __s1, 0x16u);
LABEL_60:

      }
      v19 = (v19 + 1);
      if (v19 >= *(_DWORD *)(a1 + 32))
        goto LABEL_12;
    }
    if (getAUSMV2Log(void)::onceToken != -1)
      dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_5474);
    v21 = (id)getAUSMV2Log(void)::gLog;
    if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
    {
      v22 = a1 + 48;
      if (*(char *)(a1 + 71) < 0)
        v22 = *v35;
      *(_DWORD *)__s1 = 136315394;
      *(_QWORD *)&__s1[4] = v22;
      *(_WORD *)&__s1[12] = 2080;
      *(_QWORD *)&__s1[14] = "ParseDistanceAttenuation";
      v23 = v21;
      v24 = "[%s|%s] Distance Attenuation: Failed to get the distance params";
      goto LABEL_69;
    }
    goto LABEL_60;
  }
}

void sub_1B644F77C(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

void AUSM::Metadata::PImpl::ParseGroupConfig(uint64_t a1, unsigned __int16 *a2)
{
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t **v9;
  _DWORD *v10;
  void **v11;
  NSObject *v12;
  _QWORD *v13;
  int v14;
  std::vector<unsigned int>::size_type v15;
  int v16;
  _DWORD *v17;
  _DWORD *v18;
  uint64_t v19;
  NSObject *v20;
  unint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  char *v24;
  int v25;
  char *v26;
  char *v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  char *v32;
  char *v33;
  int v34;
  _QWORD *v35;
  _QWORD *v36;
  int v37;
  _QWORD *v38;
  __int16 v39;
  const char *v40;
  __int16 v41;
  int v42;
  uint64_t v43;

  v43 = *MEMORY[0x1E0C80C00];
  v4 = *a2;
  v6 = a1 + 104;
  v5 = *(_QWORD *)(a1 + 104);
  if (v5)
  {
    while (1)
    {
      while (1)
      {
        v7 = v5;
        v8 = *(_DWORD *)(v5 + 32);
        if (v8 <= v4)
          break;
        v5 = *(_QWORD *)v7;
        v9 = (uint64_t **)v7;
        if (!*(_QWORD *)v7)
          goto LABEL_9;
      }
      if (v8 >= v4)
        break;
      v5 = *(_QWORD *)(v7 + 8);
      if (!v5)
      {
        v9 = (uint64_t **)(v7 + 8);
        goto LABEL_9;
      }
    }
  }
  else
  {
    v9 = (uint64_t **)(a1 + 104);
    v7 = a1 + 104;
LABEL_9:
    v10 = operator new(0x40uLL);
    v10[8] = v4;
    *((_QWORD *)v10 + 6) = 0;
    *((_QWORD *)v10 + 7) = 0;
    *((_QWORD *)v10 + 5) = 0;
    std::__tree<std::__value_type<double,int>,std::__map_value_compare<double,std::__value_type<double,int>,std::less<double>,true>,std::allocator<std::__value_type<double,int>>>::__insert_node_at((uint64_t **)(v6 - 8), v7, v9, (uint64_t *)v10);
    v7 = (uint64_t)v10;
  }
  v11 = (void **)(v7 + 40);
  *(_QWORD *)(v7 + 48) = *(_QWORD *)(v7 + 40);
  if (*((_BYTE *)a2 + 2))
  {
    if (getAUSMV2Log(void)::onceToken != -1)
      dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_5474);
    v12 = (id)getAUSMV2Log(void)::gLog;
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
    {
      v35 = (_QWORD *)(a1 + 48);
      if (*(char *)(a1 + 71) < 0)
        v35 = (_QWORD *)*v35;
      v37 = 136315394;
      v38 = v35;
      v39 = 2080;
      v40 = "ParseGroupConfig";
      _os_log_error_impl(&dword_1B5ED0000, v12, OS_LOG_TYPE_ERROR, "[%s|%s] Unexpected all-ASC group. Not Implemented.", (uint8_t *)&v37, 0x16u);
    }
LABEL_14:

    return;
  }
  if (*((_BYTE *)a2 + 3))
  {
    v37 = a2[2];
    std::vector<unsigned int>::__assign_with_size[abi:ne180100]<unsigned int const*,unsigned int const*>((char *)(v7 + 40), (char *)&v37, (uint64_t)&v38, 1uLL);
    if (*((unsigned __int8 *)a2 + 6) >= 3u)
    {
      if (getAUSMV2Log(void)::onceToken != -1)
        dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_5474);
      v12 = (id)getAUSMV2Log(void)::gLog;
      if (os_log_type_enabled(v12, OS_LOG_TYPE_DEBUG))
      {
        v13 = (_QWORD *)(a1 + 48);
        if (*(char *)(a1 + 71) < 0)
          v13 = (_QWORD *)*v13;
        v14 = *((unsigned __int8 *)a2 + 6);
        v37 = 136315650;
        v38 = v13;
        v39 = 2080;
        v40 = "ParseGroupConfig";
        v41 = 1024;
        v42 = v14;
        _os_log_debug_impl(&dword_1B5ED0000, v12, OS_LOG_TYPE_DEBUG, "[%s|%s] Unknown ASC type %u", (uint8_t *)&v37, 0x1Cu);
      }
      goto LABEL_14;
    }
  }
  else
  {
    v15 = a2[9];
    if (*((_BYTE *)a2 + 20))
    {
      v16 = a2[11];
      std::vector<unsigned int>::resize((std::vector<unsigned int> *)(v7 + 40), v15);
      v17 = *(_DWORD **)(v7 + 40);
      v18 = *(_DWORD **)(v7 + 48);
      while (v17 != v18)
        *v17++ = v16++;
    }
    else
    {
      v19 = *((_QWORD *)a2 + 4) - *((_QWORD *)a2 + 3);
      if (v15 != v19 >> 1)
      {
        if (getAUSMV2Log(void)::onceToken != -1)
          dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_5474);
        v20 = (id)getAUSMV2Log(void)::gLog;
        if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
        {
          v36 = (_QWORD *)(a1 + 48);
          if (*(char *)(a1 + 71) < 0)
            v36 = (_QWORD *)*v36;
          v37 = 136315394;
          v38 = v36;
          v39 = 2080;
          v40 = "ParseGroupConfig";
          _os_log_error_impl(&dword_1B5ED0000, v20, OS_LOG_TYPE_ERROR, "[%s|%s] Inconsistent member count in ASC ID list", (uint8_t *)&v37, 0x16u);
        }

        v19 = *((_QWORD *)a2 + 4) - *((_QWORD *)a2 + 3);
      }
      v21 = (unint64_t)v19 >> 1;
      if (v21 >= v15)
        v15 = v15;
      else
        v15 = v21;
      if ((_DWORD)v15)
      {
        v22 = 0;
        v23 = (_QWORD *)(v7 + 56);
        v24 = *(char **)(v7 + 48);
        do
        {
          v25 = *(unsigned __int16 *)(*((_QWORD *)a2 + 3) + 2 * v22);
          if ((unint64_t)v24 >= *v23)
          {
            v27 = (char *)*v11;
            v28 = (v24 - (_BYTE *)*v11) >> 2;
            v29 = v28 + 1;
            if ((unint64_t)(v28 + 1) >> 62)
              std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
            v30 = *v23 - (_QWORD)v27;
            if (v30 >> 1 > v29)
              v29 = v30 >> 1;
            if ((unint64_t)v30 >= 0x7FFFFFFFFFFFFFFCLL)
              v31 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v31 = v29;
            if (v31)
            {
              v32 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v7 + 56, v31);
              v27 = *(char **)(v7 + 40);
              v24 = *(char **)(v7 + 48);
            }
            else
            {
              v32 = 0;
            }
            v33 = &v32[4 * v28];
            *(_DWORD *)v33 = v25;
            v26 = v33 + 4;
            while (v24 != v27)
            {
              v34 = *((_DWORD *)v24 - 1);
              v24 -= 4;
              *((_DWORD *)v33 - 1) = v34;
              v33 -= 4;
            }
            *(_QWORD *)(v7 + 40) = v33;
            *(_QWORD *)(v7 + 48) = v26;
            *(_QWORD *)(v7 + 56) = &v32[4 * v31];
            if (v27)
              operator delete(v27);
          }
          else
          {
            *(_DWORD *)v24 = v25;
            v26 = v24 + 4;
          }
          *(_QWORD *)(v7 + 48) = v26;
          ++v22;
          v24 = v26;
        }
        while (v22 != v15);
      }
    }
  }
}

void sub_1B644FC3C(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

void AUSM::Metadata::PImpl::ParseRendererData(AUSM::Metadata::PImpl *this, uint64_t a2, uint64_t a3, __n128 a4)
{
  AUSM::Metadata::PImpl *v6;
  unsigned int v7;
  NSObject *v8;
  uint64_t v9;
  uint64_t v10;
  NSObject *v11;
  int v12;
  int v13;
  float v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float v19;
  float v20;
  float v21;
  uint64_t v22;
  _DWORD *v23;
  _DWORD *v24;
  unsigned int v25;
  float v26;
  int v27;
  NSObject *v28;
  int v29;
  uint64_t v30;
  _DWORD *v31;
  _DWORD *v32;
  float v33;
  uint64_t v34;
  _DWORD *v35;
  _DWORD *v36;
  unsigned int v37;
  unsigned int v38;
  float *v39;
  int **v40;
  int *v41;
  int *v42;
  int v43;
  unsigned int v44;
  NSObject *v45;
  char *v46;
  int v47;
  int v48;
  int v49;
  int v50;
  uint64_t v51;
  _DWORD *v52;
  _DWORD *v53;
  int v54;
  int v55;
  float v56;
  int v57;
  float v58;
  int v59;
  NSObject *v60;
  int v61;
  float v62;
  int v63;
  NSObject *v64;
  float v65;
  int v66;
  float v67;
  float v68;
  float32x4_t v69;
  float32x4_t v70;
  float v71;
  float v72;
  uint64_t v73;
  _DWORD *v74;
  _DWORD *v75;
  unsigned int v76;
  int v77;
  NSObject *v78;
  int v79;
  NSObject *v80;
  int v81;
  int v82;
  NSObject *v83;
  int v84;
  int v85;
  NSObject *v86;
  char *v87;
  int v88;
  int v89;
  NSObject *v90;
  char *v91;
  int v92;
  char *v93;
  int v94;
  char *v95;
  int v96;
  const char *v97;
  char *v98;
  int v99;
  const char *v100;
  char *v101;
  int v102;
  const char *v103;
  char *v104;
  int v105;
  char *v106;
  int v107;
  char *v108;
  int v109;
  char *v110;
  int v111;
  char *v112;
  char *v113;
  int v114;
  char *v115;
  int v116;
  char *v117;
  int v118;
  char *v119;
  int v120;
  char *v121;
  char *v122;
  char *v123;
  int v124;
  char *v125;
  char *v126;
  int v127;
  char *v128;
  int v129;
  char *v130;
  int v131;
  _QWORD *v132;
  char **v133;
  uint64_t v134;
  int v135;
  int v136;
  uint8_t buf[4];
  _QWORD *v138;
  __int16 v139;
  const char *v140;
  __int16 v141;
  _BYTE v142[10];
  _DWORD v143[3];
  uint64_t v144;

  v6 = this;
  v144 = *MEMORY[0x1E0C80C00];
  v7 = *(unsigned __int16 *)(a2 + 2);
  if (v7 >= 0x20)
  {
    if (getAUSMV2Log(void)::onceToken != -1)
      dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_5474);
    v8 = (id)getAUSMV2Log(void)::gLog;
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      v132 = (_QWORD *)((char *)v6 + 48);
      if (*((char *)v6 + 71) < 0)
        v132 = (_QWORD *)*v132;
      *(_DWORD *)buf = 136315394;
      v138 = v132;
      v139 = 2080;
      v140 = "ParseRendererData";
      _os_log_error_impl(&dword_1B5ED0000, v8, OS_LOG_TYPE_ERROR, "[%s|%s] Too many parameters", buf, 0x16u);
    }

  }
  if (v7 >= 0x20)
    v9 = 32;
  else
    v9 = v7;
  if ((_DWORD)v9)
  {
    v10 = 0;
    v133 = (char **)((char *)v6 + 48);
    v134 = a2 + 4;
    a4.n128_u64[0] = 136316162;
    while (1)
    {
      switch(*(_WORD *)(v134 + 2 * v10))
      {
        case 0:
          v12 = *(unsigned __int8 *)(a2 + 68);
          v13 = *(unsigned __int8 *)(a2 + 84);
          v14 = 0.0;
          v15 = 0.0;
          v16 = 0.0;
          v17 = 0.0;
          if (*(_BYTE *)(a2 + 68))
          {
            if (*(_BYTE *)(a2 + 69))
            {
              v18 = *(float *)(a2 + 88);
              v19 = *(float *)(a2 + 92);
              v20 = *(float *)(a2 + 96);
              v15 = atan2f(v18, v19) * 57.296;
              v21 = hypotf(v18, v19);
              v16 = atan2f(v20, v21) * 57.296;
              a4.n128_f32[0] = hypotf(v21, v20);
              v17 = a4.n128_f32[0];
            }
            else
            {
              a4.n128_u32[0] = *(_DWORD *)(a2 + 72);
              v16 = *(float *)(a2 + 76);
              v15 = -a4.n128_f32[0];
              v17 = *(float *)(a2 + 80);
            }
          }
          v67 = 0.0;
          v68 = 0.0;
          if (v13)
          {
            v69 = *(float32x4_t *)(a2 + 100);
            v70.i64[0] = vrev64q_s32((int32x4_t)v69).u64[0];
            v70.i32[2] = vnegq_f32(v69).i32[2];
            v70.i32[3] = v69.i32[3];
            a4.n128_f32[0] = AUSM::auCoordQuaternionToEuler(this, v70);
            v14 = a4.n128_f32[0];
            v67 = v71;
            v68 = v72;
          }
          v73 = *(_QWORD *)(a3 + 8);
          v75 = *(_DWORD **)v73;
          v74 = *(_DWORD **)(v73 + 8);
          while (v75 != v74)
          {
            v76 = *v75 + 1;
            if (v12)
            {
              AUSM::Metadata::PImpl::setParameter(v6, 0, *v75 + 1, *(_DWORD *)(a3 + 16), v15, *(_DWORD *)(a3 + 20));
              AUSM::Metadata::PImpl::setParameter(v6, 1u, v76, *(_DWORD *)(a3 + 16), v16, *(_DWORD *)(a3 + 20));
              this = (AUSM::Metadata::PImpl *)AUSM::Metadata::PImpl::setParameter(v6, 2u, v76, *(_DWORD *)(a3 + 16), v17, *(_DWORD *)(a3 + 20));
            }
            if (v13)
            {
              AUSM::Metadata::PImpl::setParameter(v6, 0x16u, v76, *(_DWORD *)(a3 + 16), v14, *(_DWORD *)(a3 + 20));
              AUSM::Metadata::PImpl::setParameter(v6, 0x17u, v76, *(_DWORD *)(a3 + 16), v67, *(_DWORD *)(a3 + 20));
              this = (AUSM::Metadata::PImpl *)AUSM::Metadata::PImpl::setParameter(v6, 0x18u, v76, *(_DWORD *)(a3 + 16), v68, *(_DWORD *)(a3 + 20));
            }
            ++v75;
          }
          goto LABEL_12;
        case 1:
          v22 = *(_QWORD *)(a3 + 8);
          v23 = *(_DWORD **)v22;
          v24 = *(_DWORD **)(v22 + 8);
          while (v23 != v24)
          {
            v25 = *v23 + 1;
            v26 = *(float *)(a2 + 120);
            if (*(_BYTE *)(a2 + 116))
            {
              AUSM::Metadata::PImpl::setParameter(v6, 0x19u, *v23 + 1, *(_DWORD *)(a3 + 16), v26, *(_DWORD *)(a3 + 20));
              this = (AUSM::Metadata::PImpl *)AUSM::Metadata::PImpl::setParameter(v6, 0x1Au, v25, *(_DWORD *)(a3 + 16), *(float *)(a2 + 124), *(_DWORD *)(a3 + 20));
            }
            else
            {
              AUSM::Metadata::PImpl::setParameter(v6, 0x19u, *v23 + 1, *(_DWORD *)(a3 + 16), v26 / 180.0, *(_DWORD *)(a3 + 20));
              this = (AUSM::Metadata::PImpl *)AUSM::Metadata::PImpl::setParameter(v6, 0x1Au, v25, *(_DWORD *)(a3 + 16), *(float *)(a2 + 124) / 90.0, *(_DWORD *)(a3 + 20));
            }
            if (*(_BYTE *)(a2 + 117))
              this = (AUSM::Metadata::PImpl *)AUSM::Metadata::PImpl::setParameter(v6, 0x1Bu, v25, *(_DWORD *)(a3 + 16), *(float *)(a2 + 128), *(_DWORD *)(a3 + 20));
            ++v23;
          }
          goto LABEL_12;
        case 2:
          this = (AUSM::Metadata::PImpl *)AUSM::Metadata::PImpl::setParameterOnGroup(v6, 3u, a3, *(float *)(a2 + 132));
          v27 = (int)this;
          if ((_DWORD)this)
          {
            if (getAUSMV2Log(void)::onceToken != -1)
              dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_5474);
            v28 = (id)getAUSMV2Log(void)::gLog;
            if (os_log_type_enabled(v28, OS_LOG_TYPE_DEBUG))
            {
              v91 = (char *)v6 + 48;
              if (*((char *)v6 + 71) < 0)
                v91 = *v133;
              v92 = *(_DWORD *)a3;
              *(_DWORD *)buf = 136315906;
              v138 = v91;
              v139 = 2080;
              v140 = "ParseRendererData";
              v141 = 1024;
              *(_DWORD *)v142 = v27;
              *(_WORD *)&v142[4] = 1024;
              *(_DWORD *)&v142[6] = v92;
              _os_log_debug_impl(&dword_1B5ED0000, v28, OS_LOG_TYPE_DEBUG, "[%s|%s] Error %d setting Gain on group %u", buf, 0x22u);
            }
            goto LABEL_203;
          }
          goto LABEL_12;
        case 3:
          this = (AUSM::Metadata::PImpl *)AUSM::Metadata::PImpl::setParameterOnGroup(v6, 0x21u, a3, *(float *)(a2 + 136));
          v29 = (int)this;
          if ((_DWORD)this)
          {
            if (getAUSMV2Log(void)::onceToken != -1)
              dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_5474);
            v28 = (id)getAUSMV2Log(void)::gLog;
            if (os_log_type_enabled(v28, OS_LOG_TYPE_DEBUG))
            {
              v93 = (char *)v6 + 48;
              if (*((char *)v6 + 71) < 0)
                v93 = *v133;
              v94 = *(_DWORD *)a3;
              *(_DWORD *)buf = 136315906;
              v138 = v93;
              v139 = 2080;
              v140 = "ParseRendererData";
              v141 = 1024;
              *(_DWORD *)v142 = v29;
              *(_WORD *)&v142[4] = 1024;
              *(_DWORD *)&v142[6] = v94;
              _os_log_debug_impl(&dword_1B5ED0000, v28, OS_LOG_TYPE_DEBUG, "[%s|%s] Error %d setting Diffuse on group %u", buf, 0x22u);
            }
            goto LABEL_203;
          }
          goto LABEL_12;
        case 4:
          v30 = *(_QWORD *)(a3 + 8);
          v31 = *(_DWORD **)v30;
          v32 = *(_DWORD **)(v30 + 8);
          while (v31 != v32)
          {
            if (*(_BYTE *)(a2 + 140))
              v33 = 1.0;
            else
              v33 = 0.0;
            this = (AUSM::Metadata::PImpl *)AUSM::Metadata::PImpl::setParameter(v6, 0x20u, *v31++ + 1, *(_DWORD *)(a3 + 16), v33, *(_DWORD *)(a3 + 20));
          }
          goto LABEL_12;
        case 5:
          v34 = *(_QWORD *)(a3 + 8);
          v35 = *(_DWORD **)v34;
          v36 = *(_DWORD **)(v34 + 8);
          while (v35 != v36)
          {
            v37 = *v35 + 1;
            AUSM::Metadata::PImpl::setParameter(v6, 0x1Cu, v37, *(_DWORD *)(a3 + 16), *(float *)(a2 + 148), *(_DWORD *)(a3 + 20));
            if (*(_BYTE *)(a2 + 152))
              v38 = 30;
            else
              v38 = 29;
            if (*(_BYTE *)(a2 + 152))
              v39 = (float *)(a2 + 160);
            else
              v39 = (float *)(a2 + 164);
            this = (AUSM::Metadata::PImpl *)AUSM::Metadata::PImpl::setParameter(v6, v38, v37, *(_DWORD *)(a3 + 16), *v39, *(_DWORD *)(a3 + 20));
            ++v35;
          }
          goto LABEL_12;
        case 6:
        case 0xE:
        case 0xF:
        case 0x10:
        case 0x11:
        case 0x12:
        case 0x13:
        case 0x14:
        case 0x15:
        case 0x17:
        case 0x18:
          goto LABEL_12;
        case 7:
          AUSM::Metadata::PImpl::ParseObjectZoneExclusion((unint64_t)v6, (_BYTE *)(a2 + 172), (int *)a3, a4);
          goto LABEL_12;
        case 8:
          v136 = *(unsigned __int8 *)(a2 + 1037);
          v40 = *(int ***)(a3 + 8);
          v41 = *v40;
          v42 = v40[1];
          while (v41 != v42)
          {
            v43 = *v41;
            v44 = *v41 + 1;
            this = (AUSM::Metadata::PImpl *)(*(uint64_t (**)(_QWORD, uint64_t, uint64_t, _QWORD, int *, uint64_t))(**((_QWORD **)v6 + 5) + 96))(*((_QWORD *)v6 + 5), 3242, 1, v44, &v136, 4);
            if ((_DWORD)this)
            {
              if (getAUSMV2Log(void)::onceToken != -1)
                dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_5474);
              v45 = (id)getAUSMV2Log(void)::gLog;
              if (os_log_type_enabled(v45, OS_LOG_TYPE_DEBUG))
              {
                v46 = (char *)v6 + 48;
                if (*((char *)v6 + 71) < 0)
                  v46 = *v133;
                *(_DWORD *)buf = 136315906;
                v138 = v46;
                v139 = 2080;
                v140 = "ParseRendererData";
                v141 = 1024;
                *(_DWORD *)v142 = v43;
                *(_WORD *)&v142[4] = 1024;
                *(_DWORD *)&v142[6] = v44;
                _os_log_debug_impl(&dword_1B5ED0000, v45, OS_LOG_TYPE_DEBUG, "[%s|%s] Could not set binaural compatibility mode on sc #%u, input element #%u", buf, 0x22u);
              }

            }
            ++v41;
          }
          goto LABEL_12;
        case 9:
          v47 = *(unsigned __int8 *)(a2 + 568);
          if ((v47 - 2) >= 2)
          {
            if (v47 == 1)
            {
              v136 = *(unsigned __int16 *)(a2 + 570);
              v77 = AUSpatialMixerV2::SetAPACProperty(*((AUSpatialMixerV2 **)v6 + 5), 10, 0, 0, &v136, 4);
              if (v77)
              {
                if (getAUSMV2Log(void)::onceToken != -1)
                  dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_5474);
                v78 = (id)getAUSMV2Log(void)::gLog;
                if (os_log_type_enabled(v78, OS_LOG_TYPE_DEBUG))
                {
                  v115 = (char *)v6 + 48;
                  if (*((char *)v6 + 71) < 0)
                    v115 = *v133;
                  v116 = *(_DWORD *)a3;
                  *(_DWORD *)buf = 136315906;
                  v138 = v115;
                  v139 = 2080;
                  v140 = "ParseSceneReverb";
                  v141 = 1024;
                  *(_DWORD *)v142 = v116;
                  *(_WORD *)&v142[4] = 1024;
                  *(_DWORD *)&v142[6] = v77;
                  _os_log_debug_impl(&dword_1B5ED0000, v78, OS_LOG_TYPE_DEBUG, "[%s|%s] Could not set reverb preset for group id = #%u, err = %d", buf, 0x22u);
                }

              }
              if (*(_BYTE *)(a2 + 732))
              {
                v79 = AUSM::Metadata::PImpl::setParameterOnGroup(v6, 8u, a3, *(float *)(a2 + 728));
                if (v79)
                {
                  if (getAUSMV2Log(void)::onceToken != -1)
                    dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_5474);
                  v80 = (id)getAUSMV2Log(void)::gLog;
                  if (os_log_type_enabled(v80, OS_LOG_TYPE_DEBUG))
                  {
                    v126 = (char *)v6 + 48;
                    if (*((char *)v6 + 71) < 0)
                      v126 = *v133;
                    v127 = *(_DWORD *)a3;
                    *(_DWORD *)buf = 136315906;
                    v138 = v126;
                    v139 = 2080;
                    v140 = "ParseSceneReverb";
                    v141 = 1024;
                    *(_DWORD *)v142 = v127;
                    *(_WORD *)&v142[4] = 1024;
                    *(_DWORD *)&v142[6] = v79;
                    _os_log_debug_impl(&dword_1B5ED0000, v80, OS_LOG_TYPE_DEBUG, "[%s|%s] Could not set reverb blend for group id = %u, err = %d", buf, 0x22u);
                  }

                }
              }
              v135 = 1;
              this = (AUSM::Metadata::PImpl *)AUSpatialMixerV2::SetAPACProperty(*((AUSpatialMixerV2 **)v6 + 5), 1005, 0, 0, &v135, 4);
              v81 = (int)this;
              if ((_DWORD)this)
              {
                if (getAUSMV2Log(void)::onceToken != -1)
                  dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_5474);
                v28 = (id)getAUSMV2Log(void)::gLog;
                if (os_log_type_enabled(v28, OS_LOG_TYPE_DEBUG))
                {
                  v117 = (char *)v6 + 48;
                  if (*((char *)v6 + 71) < 0)
                    v117 = *v133;
                  v118 = *(_DWORD *)a3;
                  *(_DWORD *)buf = 136315906;
                  v138 = v117;
                  v139 = 2080;
                  v140 = "ParseSceneReverb";
                  v141 = 1024;
                  *(_DWORD *)v142 = v118;
                  *(_WORD *)&v142[4] = 1024;
                  *(_DWORD *)&v142[6] = v81;
                  _os_log_debug_impl(&dword_1B5ED0000, v28, OS_LOG_TYPE_DEBUG, "[%s|%s] Could not enable scene reverb for group id = %u, err = %d", buf, 0x22u);
                }
                goto LABEL_203;
              }
            }
            else
            {
              if (*(_BYTE *)(a2 + 568))
              {
                if (getAUSMV2Log(void)::onceToken != -1)
                  dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_5474);
                v11 = (id)getAUSMV2Log(void)::gLog;
                if (os_log_type_enabled(v11, OS_LOG_TYPE_DEBUG))
                {
                  v108 = (char *)v6 + 48;
                  if (*((char *)v6 + 71) < 0)
                    v108 = *v133;
                  v109 = *(unsigned __int8 *)(a2 + 568);
                  *(_DWORD *)buf = 136315650;
                  v138 = v108;
                  v139 = 2080;
                  v140 = "ParseSceneReverb";
                  v141 = 1024;
                  *(_DWORD *)v142 = v109;
                  _os_log_debug_impl(&dword_1B5ED0000, v11, OS_LOG_TYPE_DEBUG, "[%s|%s] Unknown param id %u", buf, 0x1Cu);
                }
                goto LABEL_163;
              }
              this = (AUSM::Metadata::PImpl *)AUSM::Metadata::PImpl::setParameterOnGroup(v6, 8u, a3, 0.0);
              v48 = (int)this;
              if ((_DWORD)this)
              {
                if (getAUSMV2Log(void)::onceToken != -1)
                  dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_5474);
                v28 = (id)getAUSMV2Log(void)::gLog;
                if (os_log_type_enabled(v28, OS_LOG_TYPE_DEBUG))
                {
                  v113 = (char *)v6 + 48;
                  if (*((char *)v6 + 71) < 0)
                    v113 = *v133;
                  v114 = *(_DWORD *)a3;
                  *(_DWORD *)buf = 136315906;
                  v138 = v113;
                  v139 = 2080;
                  v140 = "ParseSceneReverb";
                  v141 = 1024;
                  *(_DWORD *)v142 = v114;
                  *(_WORD *)&v142[4] = 1024;
                  *(_DWORD *)&v142[6] = v48;
                  _os_log_debug_impl(&dword_1B5ED0000, v28, OS_LOG_TYPE_DEBUG, "[%s|%s] Could not remove reverb by setting reverb blend to 0 for group id = %u, err = %d", buf, 0x22u);
                }
                goto LABEL_203;
              }
            }
          }
          goto LABEL_12;
        case 0xA:
          if (!*((_BYTE *)v6 + 120))
            goto LABEL_12;
          v49 = *(unsigned __int8 *)(a2 + 780);
          if (v49 == 2)
          {
            v136 = 1;
            v82 = AUSpatialMixerV2::SetAPACProperty(*((AUSpatialMixerV2 **)v6 + 5), 3267, 0, 0, &v136, 4);
            if (v82)
            {
              if (getAUSMV2Log(void)::onceToken != -1)
                dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_5474);
              v83 = (id)getAUSMV2Log(void)::gLog;
              if (os_log_type_enabled(v83, OS_LOG_TYPE_DEBUG))
              {
                v122 = (char *)v6 + 48;
                if (*((char *)v6 + 71) < 0)
                  v122 = *v133;
                *(_DWORD *)buf = 136315650;
                v138 = v122;
                v139 = 2080;
                v140 = "ParsePostProcessingReverb";
                v141 = 1024;
                *(_DWORD *)v142 = v82;
                _os_log_debug_impl(&dword_1B5ED0000, v83, OS_LOG_TYPE_DEBUG, "[%s|%s] Could not enable the PP reverb: err = %d", buf, 0x1Cu);
              }

            }
            this = (AUSM::Metadata::PImpl *)AUSM::Metadata::PImpl::setParameterOnGroup(v6, 0x23u, a3, 50.0);
            v84 = (int)this;
            if (!(_DWORD)this)
              goto LABEL_12;
            if (getAUSMV2Log(void)::onceToken != -1)
              dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_5474);
            v28 = (id)getAUSMV2Log(void)::gLog;
            if (!os_log_type_enabled(v28, OS_LOG_TYPE_DEBUG))
              goto LABEL_203;
            v125 = (char *)v6 + 48;
            if (*((char *)v6 + 71) < 0)
              v125 = *v133;
LABEL_278:
            v131 = *(_DWORD *)a3;
            *(_DWORD *)buf = 136315906;
            v138 = v125;
            v139 = 2080;
            v140 = "ParsePostProcessingReverb";
            v141 = 1024;
            *(_DWORD *)v142 = v131;
            *(_WORD *)&v142[4] = 1024;
            *(_DWORD *)&v142[6] = v84;
            _os_log_debug_impl(&dword_1B5ED0000, v28, OS_LOG_TYPE_DEBUG, "[%s|%s] Could not set the post-processing reverb blend to 50 on group id = %u, err = %d", buf, 0x22u);
            goto LABEL_203;
          }
          if (v49 == 1)
          {
            v136 = 1;
            v85 = AUSpatialMixerV2::SetAPACProperty(*((AUSpatialMixerV2 **)v6 + 5), 3267, 0, 0, &v136, 4);
            if (!v85)
            {
              LOBYTE(v135) = 0;
              v89 = AUSpatialMixerV2::SetAPACProperty(*((AUSpatialMixerV2 **)v6 + 5), 3262, 0, 0, &v135, 1);
              if (v89)
              {
                if (getAUSMV2Log(void)::onceToken != -1)
                  dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_5474);
                v90 = (id)getAUSMV2Log(void)::gLog;
                if (os_log_type_enabled(v90, OS_LOG_TYPE_DEBUG))
                {
                  v130 = (char *)v6 + 48;
                  if (*((char *)v6 + 71) < 0)
                    v130 = *v133;
                  *(_DWORD *)buf = 136315650;
                  v138 = v130;
                  v139 = 2080;
                  v140 = "ParsePostProcessingReverb";
                  v141 = 1024;
                  *(_DWORD *)v142 = v89;
                  _os_log_debug_impl(&dword_1B5ED0000, v90, OS_LOG_TYPE_DEBUG, "[%s|%s] Could not disable the PP late reverb: err = %d", buf, 0x1Cu);
                }

              }
              this = (AUSM::Metadata::PImpl *)AUSM::Metadata::PImpl::setParameterOnGroup(v6, 0x23u, a3, 50.0);
              v84 = (int)this;
              if (!(_DWORD)this)
                goto LABEL_12;
              if (getAUSMV2Log(void)::onceToken != -1)
                dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_5474);
              v28 = (id)getAUSMV2Log(void)::gLog;
              if (!os_log_type_enabled(v28, OS_LOG_TYPE_DEBUG))
                goto LABEL_203;
              v125 = (char *)v6 + 48;
              if (*((char *)v6 + 71) < 0)
                v125 = *v133;
              goto LABEL_278;
            }
            if (getAUSMV2Log(void)::onceToken != -1)
              dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_5474);
            v28 = (id)getAUSMV2Log(void)::gLog;
            if (os_log_type_enabled(v28, OS_LOG_TYPE_DEBUG))
            {
              v123 = (char *)v6 + 48;
              if (*((char *)v6 + 71) < 0)
                v123 = *v133;
              *(_DWORD *)buf = 136315650;
              v138 = v123;
              v139 = 2080;
              v140 = "ParsePostProcessingReverb";
              v141 = 1024;
              *(_DWORD *)v142 = v85;
              _os_log_debug_impl(&dword_1B5ED0000, v28, OS_LOG_TYPE_DEBUG, "[%s|%s] Could not enable the PP ERs: err = %d", buf, 0x1Cu);
            }
LABEL_203:

            goto LABEL_12;
          }
          if (*(_BYTE *)(a2 + 780))
          {
            if (getAUSMV2Log(void)::onceToken != -1)
              dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_5474);
            v86 = (id)getAUSMV2Log(void)::gLog;
            if (os_log_type_enabled(v86, OS_LOG_TYPE_DEBUG))
            {
              v112 = (char *)v6 + 48;
              if (*((char *)v6 + 71) < 0)
                v112 = *v133;
              *(_DWORD *)buf = 136315394;
              v138 = v112;
              v139 = 2080;
              v140 = "ParsePostProcessingReverb";
              _os_log_debug_impl(&dword_1B5ED0000, v86, OS_LOG_TYPE_DEBUG, "[%s|%s] Invalid PP reverb", buf, 0x16u);
            }

            this = (AUSM::Metadata::PImpl *)AUSM::Metadata::PImpl::setParameterOnGroup(v6, 0x23u, a3, 0.0);
            v50 = (int)this;
            if (!(_DWORD)this)
              goto LABEL_12;
            if (getAUSMV2Log(void)::onceToken != -1)
              dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_5474);
            v28 = (id)getAUSMV2Log(void)::gLog;
            if (os_log_type_enabled(v28, OS_LOG_TYPE_DEBUG))
            {
              v121 = (char *)v6 + 48;
              if (*((char *)v6 + 71) < 0)
                v121 = *v133;
              goto LABEL_263;
            }
            goto LABEL_203;
          }
          this = (AUSM::Metadata::PImpl *)AUSM::Metadata::PImpl::setParameterOnGroup(v6, 0x23u, a3, 0.0);
          v50 = (int)this;
          if ((_DWORD)this)
          {
            if (getAUSMV2Log(void)::onceToken != -1)
              dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_5474);
            v28 = (id)getAUSMV2Log(void)::gLog;
            if (os_log_type_enabled(v28, OS_LOG_TYPE_DEBUG))
            {
              v121 = (char *)v6 + 48;
              if (*((char *)v6 + 71) < 0)
                v121 = *v133;
LABEL_263:
              v124 = *(_DWORD *)a3;
              *(_DWORD *)buf = 136315906;
              v138 = v121;
              v139 = 2080;
              v140 = "ParsePostProcessingReverb";
              v141 = 1024;
              *(_DWORD *)v142 = v124;
              *(_WORD *)&v142[4] = 1024;
              *(_DWORD *)&v142[6] = v50;
              _os_log_debug_impl(&dword_1B5ED0000, v28, OS_LOG_TYPE_DEBUG, "[%s|%s] Could not set the post-processing reverb blend to 0 on group id = %u, err = %d", buf, 0x22u);
              goto LABEL_203;
            }
            goto LABEL_203;
          }
LABEL_12:
          if (++v10 == v9)
            return;
          break;
        case 0xB:
          switch(*(_BYTE *)(a2 + 792))
          {
            case 0:
            case 2:
              goto LABEL_12;
            case 1:
              v136 = *(unsigned __int16 *)(a2 + 794);
              v51 = *(_QWORD *)(a3 + 8);
              v52 = *(_DWORD **)v51;
              v53 = *(_DWORD **)(v51 + 8);
              break;
            case 3:
              if (*(unsigned __int8 *)(a2 + 808) < 4u)
                goto LABEL_12;
              if (getAUSMV2Log(void)::onceToken != -1)
                dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_5474);
              v11 = (id)getAUSMV2Log(void)::gLog;
              if (os_log_type_enabled(v11, OS_LOG_TYPE_DEBUG))
              {
                v119 = (char *)v6 + 48;
                if (*((char *)v6 + 71) < 0)
                  v119 = *v133;
                v120 = *(unsigned __int8 *)(a2 + 808);
                *(_DWORD *)buf = 136315650;
                v138 = v119;
                v139 = 2080;
                v140 = "ParseParametricRadiationPattern";
                v141 = 1024;
                *(_DWORD *)v142 = v120;
                _os_log_debug_impl(&dword_1B5ED0000, v11, OS_LOG_TYPE_DEBUG, "[%s|%s] Unsupported directivity model: %u", buf, 0x1Cu);
              }
              goto LABEL_163;
            default:
              if (getAUSMV2Log(void)::onceToken != -1)
                dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_5474);
              v11 = (id)getAUSMV2Log(void)::gLog;
              if (os_log_type_enabled(v11, OS_LOG_TYPE_DEBUG))
              {
                v110 = (char *)v6 + 48;
                if (*((char *)v6 + 71) < 0)
                  v110 = *v133;
                v111 = *(unsigned __int8 *)(a2 + 792);
                *(_DWORD *)buf = 136315650;
                v138 = v110;
                v139 = 2080;
                v140 = "ParseRadiationPattern";
                v141 = 1024;
                *(_DWORD *)v142 = v111;
                _os_log_debug_impl(&dword_1B5ED0000, v11, OS_LOG_TYPE_DEBUG, "[%s|%s] Unsupported index: %u", buf, 0x1Cu);
              }
              goto LABEL_163;
          }
          while (2)
          {
            if (v52 == v53)
              goto LABEL_12;
            this = (AUSM::Metadata::PImpl *)(*(uint64_t (**)(_QWORD, uint64_t, uint64_t, _QWORD, int *, uint64_t))(**((_QWORD **)v6 + 5) + 96))(*((_QWORD *)v6 + 5), 3269, 1, (*v52 + 1), &v136, 4);
            v54 = (int)this;
            if (!(_DWORD)this)
            {
              ++v52;
              continue;
            }
            break;
          }
          if (getAUSMV2Log(void)::onceToken != -1)
            dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_5474);
          v28 = (id)getAUSMV2Log(void)::gLog;
          if (os_log_type_enabled(v28, OS_LOG_TYPE_DEBUG))
          {
            v128 = (char *)v6 + 48;
            if (*((char *)v6 + 71) < 0)
              v128 = *v133;
            v129 = *(_DWORD *)a3;
            *(_DWORD *)buf = 136316162;
            v138 = v128;
            v139 = 2080;
            v140 = "ParseRadiationPattern";
            v141 = 1024;
            *(_DWORD *)v142 = v136;
            *(_WORD *)&v142[4] = 1024;
            *(_DWORD *)&v142[6] = v129;
            LOWORD(v143[0]) = 1024;
            *(_DWORD *)((char *)v143 + 2) = v54;
            _os_log_debug_impl(&dword_1B5ED0000, v28, OS_LOG_TYPE_DEBUG, "[%s|%s] Could not set directivity index %u for group #%u: err = %d", buf, 0x28u);
          }
          goto LABEL_203;
        case 0xC:
          v55 = *(unsigned __int8 *)(a2 + 1024);
          if (*(_BYTE *)(a2 + 1024))
            v56 = 1.0;
          else
            v56 = 0.0;
          this = (AUSM::Metadata::PImpl *)AUSM::Metadata::PImpl::setParameterOnGroup(v6, 0x27u, a3, v56);
          v57 = (int)this;
          if (!(_DWORD)this)
            goto LABEL_12;
          if (getAUSMV2Log(void)::onceToken != -1)
            dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_5474);
          v28 = (id)getAUSMV2Log(void)::gLog;
          if (os_log_type_enabled(v28, OS_LOG_TYPE_DEBUG))
          {
            v95 = (char *)v6 + 48;
            if (*((char *)v6 + 71) < 0)
              v95 = *v133;
            v96 = *(_DWORD *)a3;
            v97 = "bypass";
            if (!v55)
              v97 = "non-bypass";
            *(_DWORD *)buf = 136316162;
            v138 = v95;
            v139 = 2080;
            v140 = "ParseHeadphoneVirtualize";
            v141 = 2080;
            *(_QWORD *)v142 = v97;
            *(_WORD *)&v142[8] = 1024;
            v143[0] = v96;
            LOWORD(v143[1]) = 1024;
            *(_DWORD *)((char *)&v143[1] + 2) = v57;
            _os_log_debug_impl(&dword_1B5ED0000, v28, OS_LOG_TYPE_DEBUG, "[%s|%s] Could not set the headphoneVirtualise to %s on group id = %u, err = %d", buf, 0x2Cu);
          }
          goto LABEL_203;
        case 0xD:
          if (*(_BYTE *)(a2 + 1032))
            v58 = 1.0;
          else
            v58 = 0.0;
          v59 = AUSM::Metadata::PImpl::setParameterOnGroup(v6, 0x1Fu, a3, v58);
          if (v59)
          {
            if (getAUSMV2Log(void)::onceToken != -1)
              dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_5474);
            v60 = (id)getAUSMV2Log(void)::gLog;
            if (os_log_type_enabled(v60, OS_LOG_TYPE_DEBUG))
            {
              v98 = (char *)v6 + 48;
              if (*((char *)v6 + 71) < 0)
                v98 = *v133;
              v99 = *(_DWORD *)a3;
              v100 = "false";
              if (*(_BYTE *)(a2 + 1032))
                v100 = "true";
              *(_DWORD *)buf = 136316162;
              v138 = v98;
              v139 = 2080;
              v140 = "ParseHeadLock";
              v141 = 1024;
              *(_DWORD *)v142 = v59;
              *(_WORD *)&v142[4] = 1024;
              *(_DWORD *)&v142[6] = v99;
              LOWORD(v143[0]) = 2080;
              *(_QWORD *)((char *)v143 + 2) = v100;
              _os_log_debug_impl(&dword_1B5ED0000, v60, OS_LOG_TYPE_DEBUG, "[%s|%s] Error %d setting HeadLocked on group id = %u to %s", buf, 0x2Cu);
            }

          }
          v61 = *(unsigned __int8 *)(a2 + 1033);
          if (*(_BYTE *)(a2 + 1033))
            v62 = 0.0;
          else
            v62 = 1.0;
          v63 = AUSM::Metadata::PImpl::setParameterOnGroup(v6, 0x27u, a3, v62);
          if (v63)
          {
            if (getAUSMV2Log(void)::onceToken != -1)
              dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_5474);
            v64 = (id)getAUSMV2Log(void)::gLog;
            if (os_log_type_enabled(v64, OS_LOG_TYPE_DEBUG))
            {
              v101 = (char *)v6 + 48;
              if (*((char *)v6 + 71) < 0)
                v101 = *v133;
              v102 = *(_DWORD *)a3;
              v103 = "false";
              if (!v61)
                v103 = "true";
              *(_DWORD *)buf = 136316162;
              v138 = v101;
              v139 = 2080;
              v140 = "ParseHeadLock";
              v141 = 1024;
              *(_DWORD *)v142 = v63;
              *(_WORD *)&v142[4] = 1024;
              *(_DWORD *)&v142[6] = v102;
              LOWORD(v143[0]) = 2080;
              *(_QWORD *)((char *)v143 + 2) = v103;
              _os_log_debug_impl(&dword_1B5ED0000, v64, OS_LOG_TYPE_DEBUG, "[%s|%s] Error %d setting Internalized on group id = %u to %s", buf, 0x2Cu);
            }

          }
          if (v61)
            v65 = 45.0;
          else
            v65 = 30.0;
          this = (AUSM::Metadata::PImpl *)AUSM::Metadata::PImpl::setParameterOnGroup(v6, 0x28u, a3, v65);
          v66 = (int)this;
          if (!(_DWORD)this)
            goto LABEL_12;
          if (getAUSMV2Log(void)::onceToken != -1)
            dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_5474);
          v28 = (id)getAUSMV2Log(void)::gLog;
          if (os_log_type_enabled(v28, OS_LOG_TYPE_DEBUG))
          {
            v104 = (char *)v6 + 48;
            if (*((char *)v6 + 71) < 0)
              v104 = *v133;
            v105 = *(_DWORD *)a3;
            *(_DWORD *)buf = 136316162;
            v138 = v104;
            v139 = 2080;
            v140 = "ParseHeadLock";
            v141 = 1024;
            *(_DWORD *)v142 = v66;
            *(_WORD *)&v142[4] = 1024;
            *(_DWORD *)&v142[6] = v105;
            LOWORD(v143[0]) = 2048;
            *(double *)((char *)v143 + 2) = v65;
            _os_log_debug_impl(&dword_1B5ED0000, v28, OS_LOG_TYPE_DEBUG, "[%s|%s] Error %d setting StereoPanningRefAngle on group id = %u to %f", buf, 0x2Cu);
          }
          goto LABEL_203;
        case 0x16:
          if (*(unsigned __int8 *)(a2 + 1200) < 3u)
            goto LABEL_12;
          if (getAUSMV2Log(void)::onceToken != -1)
            dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_5474);
          v11 = (id)getAUSMV2Log(void)::gLog;
          if (os_log_type_enabled(v11, OS_LOG_TYPE_DEBUG))
          {
            v106 = (char *)v6 + 48;
            if (*((char *)v6 + 71) < 0)
              v106 = *v133;
            v107 = *(unsigned __int8 *)(a2 + 1200);
            *(_DWORD *)buf = 136315650;
            v138 = v106;
            v139 = 2080;
            v140 = "ParseHOARenderingMatrix";
            v141 = 1024;
            *(_DWORD *)v142 = v107;
            _os_log_debug_impl(&dword_1B5ED0000, v11, OS_LOG_TYPE_DEBUG, "[%s|%s] Unknown data location index %u", buf, 0x1Cu);
          }
LABEL_163:

          goto LABEL_12;
        default:
          if (getAUSMV2Log(void)::onceToken != -1)
            dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_5474);
          v11 = (id)getAUSMV2Log(void)::gLog;
          if (os_log_type_enabled(v11, OS_LOG_TYPE_DEBUG))
          {
            v87 = (char *)v6 + 48;
            if (*((char *)v6 + 71) < 0)
              v87 = *v133;
            v88 = *(unsigned __int16 *)(v134 + 2 * v10);
            *(_DWORD *)buf = 136315650;
            v138 = v87;
            v139 = 2080;
            v140 = "ParseRendererData";
            v141 = 1024;
            *(_DWORD *)v142 = v88;
            _os_log_debug_impl(&dword_1B5ED0000, v11, OS_LOG_TYPE_DEBUG, "[%s|%s] Unknown param id %u", buf, 0x1Cu);
          }
          goto LABEL_163;
      }
    }
  }
}

void sub_1B6451754(_Unwind_Exception *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  _Unwind_Resume(a1);
}

uint64_t AUSM::Metadata::PImpl::setParameter(AUSM::Metadata::PImpl *this, unsigned int a2, unsigned int a3, unsigned int a4, float a5, unsigned int a6)
{
  NSObject *v12;
  _QWORD *v13;
  int v15;
  unint64_t v16;
  __int128 v17;
  _BYTE v18[6];
  __int16 v19;
  unsigned int v20;
  __int16 v21;
  double v22;
  __int16 v23;
  unsigned int v24;
  __int16 v25;
  unsigned int v26;
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  if (AUSM::Metadata::mTraceLevel >= 1)
  {
    if (getAUSMV2Log(void)::onceToken != -1)
      dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_5474);
    v12 = (id)getAUSMV2Log(void)::gLog;
    if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
    {
      v13 = (_QWORD *)((char *)this + 48);
      if (*((char *)this + 71) < 0)
        v13 = (_QWORD *)*v13;
      v15 = 136316930;
      v16 = (unint64_t)v13;
      LOWORD(v17) = 2080;
      *(_QWORD *)((char *)&v17 + 2) = "setParameter";
      WORD5(v17) = 1024;
      HIDWORD(v17) = a2;
      *(_WORD *)v18 = 1024;
      *(_DWORD *)&v18[2] = 1;
      v19 = 1024;
      v20 = a3;
      v21 = 2048;
      v22 = a5;
      v23 = 1024;
      v24 = a4;
      v25 = 1024;
      v26 = a6;
      _os_log_impl(&dword_1B5ED0000, v12, OS_LOG_TYPE_INFO, "[%s|%s] MetadataSetParameter param = %u, scope = %u, element = %u, value = %f, offset = %d, duration = %u", (uint8_t *)&v15, 0x3Eu);
    }

  }
  if (*((_BYTE *)this + 92) == 1 && *((unsigned __int8 *)this + 93) <= 2u)
  {
    v15 = 1;
    v16 = __PAIR64__(a2, a3);
    LODWORD(v17) = 3;
    DWORD1(v17) = a4;
    *((_QWORD *)&v17 + 1) = 0;
  }
  else
  {
    v15 = 1;
    v16 = __PAIR64__(a2, a3);
    LODWORD(v17) = 4;
    *(_QWORD *)((char *)&v17 + 4) = __PAIR64__(a6, a4);
    HIDWORD(v17) = 0;
  }
  *(float *)v18 = a5;
  return (*(uint64_t (**)(_QWORD, int *, uint64_t))(**((_QWORD **)this + 5) + 168))(*((_QWORD *)this + 5), &v15, 1);
}

uint64_t AUSM::Metadata::PImpl::setParameterOnGroup(AUSM::Metadata::PImpl *this, unsigned int a2, uint64_t a3, float a4)
{
  uint64_t v4;
  _DWORD *v5;
  _DWORD *v6;
  uint64_t result;

  v4 = *(_QWORD *)(a3 + 8);
  v5 = *(_DWORD **)v4;
  v6 = *(_DWORD **)(v4 + 8);
  if (*(_DWORD **)v4 == v6)
    return 0;
  while (1)
  {
    result = AUSM::Metadata::PImpl::setParameter(this, a2, *v5 + 1, *(_DWORD *)(a3 + 16), a4, *(_DWORD *)(a3 + 20));
    if ((_DWORD)result)
      break;
    if (++v5 == v6)
      return 0;
  }
  return result;
}

void AUSM::Metadata::PImpl::ParseObjectZoneExclusion(unint64_t a1, _BYTE *a2, int *a3, __n128 a4)
{
  unint64_t v5;
  int *v6;
  int *v7;
  unint64_t v8;
  _DWORD *v9;
  int *v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  int *v24;
  unint64_t v25;
  __int128 v26;
  int *v27;
  unint64_t v28;
  __int128 v29;
  int v30;
  int *v31;
  int v32;
  int v33;
  int v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  _DWORD *v38;
  _DWORD *v39;
  uint64_t v40;
  int v41;
  int v42;
  NSObject *v43;
  uint64_t v44;
  _DWORD *v45;
  _DWORD *v46;
  int v47;
  NSObject *v48;
  _QWORD *v49;
  int v50;
  _QWORD *v51;
  const char *v52;
  int v53;
  uint64_t v54;
  _DWORD *v55;
  _DWORD *v56;
  int v57;
  NSObject *v58;
  _QWORD *v59;
  int v60;
  __n128 v61;
  __n128 v62;
  _QWORD *v63;
  _BYTE *v64;
  _DWORD *v65;
  int v66;
  int *v67;
  int *v68;
  unint64_t v69;
  uint8_t buf[4];
  _QWORD *v71;
  __int16 v72;
  const char *v73;
  __int16 v74;
  _BYTE v75[10];
  int v76;
  __int16 v77;
  int v78;
  uint64_t v79;

  v5 = a1;
  v79 = *MEMORY[0x1E0C80C00];
  if (*a2)
  {
    if (!a2[1])
    {
      v67 = 0;
      v68 = 0;
      v69 = 0;
      if (a2[3])
      {
        v65 = a3;
        v6 = 0;
        v7 = 0;
        v8 = 0;
        v63 = (_QWORD *)(a1 + 48);
        a4.n128_u64[0] = 136316162;
        v61 = a4;
        a4.n128_u64[0] = 136315906;
        v62 = a4;
        v64 = a2;
        while (a2[v8 + 4])
        {
          AUSM::ExclusionZone::getPreset(a2[v8 + 19], (void **)&v67);
          v7 = v68;
          v9 = v65;
LABEL_43:
          v6 = v67;
          if (v67 == v7)
          {
            v30 = 0;
          }
          else
          {
            v30 = 0;
            v31 = v67;
            do
            {
              v33 = *v31;
              v31 += 7;
              v32 = v33;
              v34 = v30 + 5;
              if (v33)
                v34 = v30;
              if (v32 == 1)
                v30 += 7;
              else
                v30 = v34;
            }
            while (v31 != v7);
          }
          MEMORY[0x1E0C80A78](a1);
          v36 = (char *)&v61 - v35;
          a1 = (unint64_t)AUSM::ExclusionZone::arrayFromZones(v6, v7, (uint64_t)&v61 - v35);
          v37 = *((_QWORD *)v9 + 1);
          v38 = *(_DWORD **)v37;
          v39 = *(_DWORD **)(v37 + 8);
          if (*(_DWORD **)v37 == v39)
          {
            v42 = 1;
          }
          else
          {
            v40 = (4 * v30);
            while (1)
            {
              a1 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, _QWORD, char *, uint64_t))(**(_QWORD **)(v5 + 40)
                                                                                                + 96))(*(_QWORD *)(v5 + 40), 3226, 1, (*v38 + 1), v36, v40);
              v41 = a1;
              if ((_DWORD)a1)
                break;
              if (++v38 == v39)
              {
                v42 = 1;
                goto LABEL_63;
              }
            }
            if (getAUSMV2Log(void)::onceToken != -1)
              dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_5474);
            v43 = (id)getAUSMV2Log(void)::gLog;
            if (os_log_type_enabled(v43, OS_LOG_TYPE_ERROR))
            {
              v49 = v63;
              if (*(char *)(v5 + 71) < 0)
                v49 = (_QWORD *)*v63;
              v50 = *v65;
              *(_DWORD *)buf = v62.n128_u32[0];
              v71 = v49;
              v72 = 2080;
              v73 = "ParseObjectZoneExclusion";
              v74 = 1024;
              *(_DWORD *)v75 = v50;
              *(_WORD *)&v75[4] = 1024;
              *(_DWORD *)&v75[6] = v41;
              _os_log_error_impl(&dword_1B5ED0000, v43, OS_LOG_TYPE_ERROR, "[%s|%s] Could not set exclusion zone array on group %u, err = %d", buf, 0x22u);
            }

            v42 = 0;
LABEL_63:
            v9 = v65;
          }
          v66 = v42;
          v44 = *((_QWORD *)v9 + 1);
          v45 = *(_DWORD **)v44;
          v46 = *(_DWORD **)(v44 + 8);
          while (v45 != v46)
          {
            a1 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, _QWORD, int *, uint64_t))(**(_QWORD **)(v5 + 40)
                                                                                             + 96))(*(_QWORD *)(v5 + 40), 3224, 1, (*v45 + 1), &v66, 4);
            v47 = a1;
            if ((_DWORD)a1)
            {
              if (getAUSMV2Log(void)::onceToken != -1)
                dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_5474);
              v48 = (id)getAUSMV2Log(void)::gLog;
              if (os_log_type_enabled(v48, OS_LOG_TYPE_ERROR))
              {
                v51 = v63;
                if (*(char *)(v5 + 71) < 0)
                  v51 = (_QWORD *)*v63;
                v52 = "enable";
                if (!v66)
                  v52 = "disable";
                v53 = *v65;
                *(_DWORD *)buf = v61.n128_u32[0];
                v71 = v51;
                v72 = 2080;
                v73 = "ParseObjectZoneExclusion";
                v74 = 2080;
                *(_QWORD *)v75 = v52;
                *(_WORD *)&v75[8] = 1024;
                v76 = v53;
                v77 = 1024;
                v78 = v47;
                _os_log_error_impl(&dword_1B5ED0000, v48, OS_LOG_TYPE_ERROR, "[%s|%s] Could not %s exclusion zone on group %u, err = %d", buf, 0x2Cu);
              }

              break;
            }
            ++v45;
          }
          ++v8;
          a2 = v64;
          if (v8 >= v64[3])
          {
            if (v6)
              operator delete(v6);
            return;
          }
        }
        v10 = (int *)&a2[24 * v8 + 36];
        if (a2[2])
        {
          v12 = *v10;
          v11 = *(_DWORD *)&a2[24 * v8 + 40];
          v14 = *(_DWORD *)&a2[24 * v8 + 44];
          v13 = *(_DWORD *)&a2[24 * v8 + 48];
          v16 = *(_DWORD *)&a2[24 * v8 + 52];
          v15 = *(_DWORD *)&a2[24 * v8 + 56];
          v9 = v65;
          if ((unint64_t)v7 < v69)
          {
            *v7 = 1;
            v7[1] = v12;
            v7[2] = v11;
            v7[3] = v14;
            v7[4] = v13;
            v7[5] = v16;
            v7[6] = v15;
LABEL_12:
            v7 += 7;
LABEL_42:
            v68 = v7;
            goto LABEL_43;
          }
          v21 = 0x6DB6DB6DB6DB6DB7 * (v7 - v6) + 1;
          if (v21 > 0x924924924924924)
            goto LABEL_96;
          if (0xDB6DB6DB6DB6DB6ELL * ((uint64_t)(v69 - (_QWORD)v6) >> 2) > v21)
            v21 = 0xDB6DB6DB6DB6DB6ELL * ((uint64_t)(v69 - (_QWORD)v6) >> 2);
          if ((unint64_t)(0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v69 - (_QWORD)v6) >> 2)) >= 0x492492492492492)
            a1 = 0x924924924924924;
          else
            a1 = v21;
          if (a1)
            a1 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<AUSM::ExclusionZone>>(a1);
          else
            v22 = 0;
          v24 = (int *)(a1 + 4 * (v7 - v6));
          *v24 = 1;
          v24[1] = v12;
          v24[2] = v11;
          v24[3] = v14;
          v24[4] = v13;
          v24[5] = v16;
          v24[6] = v15;
          if (v7 != v6)
          {
            v25 = a1 + 4 * (v7 - v6);
            do
            {
              v26 = *(_OWORD *)(v7 - 7);
              v27 = (int *)(v25 - 28);
              *(_OWORD *)(v25 - 16) = *((_OWORD *)v7 - 1);
              *(_OWORD *)(v25 - 28) = v26;
              v7 -= 7;
              v25 -= 28;
            }
            while (v7 != v6);
            goto LABEL_40;
          }
        }
        else
        {
          v18 = *(_DWORD *)&a2[24 * v8 + 44];
          v17 = *(_DWORD *)&a2[24 * v8 + 48];
          v20 = *v10;
          v19 = *(_DWORD *)&a2[24 * v8 + 40];
          v9 = v65;
          if ((unint64_t)v7 < v69)
          {
            *v7 = 0;
            v7[1] = v18;
            v7[2] = v17;
            v7[3] = v20;
            v7[4] = v19;
            goto LABEL_12;
          }
          v23 = 0x6DB6DB6DB6DB6DB7 * (v7 - v6) + 1;
          if (v23 > 0x924924924924924)
LABEL_96:
            std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
          if (0xDB6DB6DB6DB6DB6ELL * ((uint64_t)(v69 - (_QWORD)v6) >> 2) > v23)
            v23 = 0xDB6DB6DB6DB6DB6ELL * ((uint64_t)(v69 - (_QWORD)v6) >> 2);
          if ((unint64_t)(0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v69 - (_QWORD)v6) >> 2)) >= 0x492492492492492)
            a1 = 0x924924924924924;
          else
            a1 = v23;
          if (a1)
            a1 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<AUSM::ExclusionZone>>(a1);
          else
            v22 = 0;
          v24 = (int *)(a1 + 4 * (v7 - v6));
          *v24 = 0;
          v24[1] = v18;
          v24[2] = v17;
          v24[3] = v20;
          v24[4] = v19;
          if (v7 != v6)
          {
            v28 = a1 + 4 * (v7 - v6);
            do
            {
              v29 = *(_OWORD *)(v7 - 7);
              v27 = (int *)(v28 - 28);
              *(_OWORD *)(v28 - 16) = *((_OWORD *)v7 - 1);
              *(_OWORD *)(v28 - 28) = v29;
              v7 -= 7;
              v28 -= 28;
            }
            while (v7 != v6);
LABEL_40:
            v7 = v24 + 7;
            v67 = v27;
            v69 = a1 + 28 * v22;
            if (v6)
              operator delete(v6);
            goto LABEL_42;
          }
        }
        v27 = v24;
        goto LABEL_40;
      }
    }
  }
  else
  {
    LODWORD(v67) = 0;
    v54 = *((_QWORD *)a3 + 1);
    v55 = *(_DWORD **)v54;
    v56 = *(_DWORD **)(v54 + 8);
    while (1)
    {
      if (v55 == v56)
        return;
      v57 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, _QWORD, int **, uint64_t))(**(_QWORD **)(v5 + 40) + 96))(*(_QWORD *)(v5 + 40), 3224, 1, (*v55 + 1), &v67, 4);
      if (v57)
        break;
      ++v55;
    }
    if (getAUSMV2Log(void)::onceToken != -1)
      dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_5474);
    v58 = (id)getAUSMV2Log(void)::gLog;
    if (os_log_type_enabled(v58, OS_LOG_TYPE_ERROR))
    {
      v59 = (_QWORD *)(v5 + 48);
      if (*(char *)(v5 + 71) < 0)
        v59 = (_QWORD *)*v59;
      v60 = *a3;
      *(_DWORD *)buf = 136315906;
      v71 = v59;
      v72 = 2080;
      v73 = "ParseObjectZoneExclusion";
      v74 = 1024;
      *(_DWORD *)v75 = v60;
      *(_WORD *)&v75[4] = 1024;
      *(_DWORD *)&v75[6] = v57;
      _os_log_error_impl(&dword_1B5ED0000, v58, OS_LOG_TYPE_ERROR, "[%s|%s] Could not disable exclusion zone for group %u, err = %d", buf, 0x22u);
    }

  }
}

void sub_1B64521C4(_Unwind_Exception *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  _Unwind_Resume(a1);
}

APAC::Metadata *APAC::Metadata::Metadata(APAC::Metadata *this)
{
  char *v2;
  _WORD *v3;
  char *v4;
  char *v5;
  char *v6;
  char *v7;
  _BYTE *v8;
  _WORD *v9;
  char *v10;
  _BYTE *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  char *v34;
  _BYTE *v35;
  uint64_t v36;
  char *v37;
  _BYTE *v38;
  char *v39;
  uint64_t v40;
  char *v41;

  v2 = (char *)this + 1455201;
  v3 = (_WORD *)((char *)this + 1451088);
  v4 = (char *)this + 1450744;
  v5 = (char *)this + 1450369;
  v6 = (char *)this + 1446248;
  v7 = (char *)this + 1445216;
  v8 = (char *)this + 206708;
  v9 = (_WORD *)((char *)this + 174192);
  *(_DWORD *)this = 0xFFFF;
  v10 = (char *)this + 173164;
  *((_WORD *)this + 2) = 769;
  v11 = (char *)this + 27872;
  *((_BYTE *)this + 6) = 0;
  *((_BYTE *)this + 8) = 0;
  v12 = 12;
  do
  {
    v13 = (char *)this + v12;
    *(_WORD *)v13 = 256;
    *((_DWORD *)v13 + 1) = 0;
    v12 += 28;
  }
  while (v13 + 28 != (char *)this + 432);
  v14 = 0;
  *((_BYTE *)this + 432) = 0;
  *((_WORD *)this + 218) = 0;
  do
  {
    v15 = (char *)this + v14;
    v15[578] = 0;
    *((_DWORD *)v15 + 147) = 0;
    *(_DWORD *)((char *)this + v14 + 591) = 0;
    v15[596] = 0;
    *((_DWORD *)v15 + 150) = 0;
    *((_WORD *)v15 + 302) = 0;
    v15[608] = 0;
    *(_QWORD *)((char *)this + v14 + 612) = 0;
    *((_DWORD *)v15 + 155) = 0;
    *((_DWORD *)v15 + 143) = 0;
    v15[576] = 0;
    *((_DWORD *)v15 + 145) = 0;
    *(_DWORD *)((char *)this + v14 + 583) = 0;
    *((_DWORD *)v15 + 110) = 0;
    v14 += 216;
    v15[444] = 0;
  }
  while (v14 != 27432);
  v16 = 0;
  v17 = 27876;
  *v11 = 0;
  v18 = 27992;
  v19 = 27990;
  v20 = 27989;
  v21 = 27988;
  v22 = 27952;
  v23 = 27940;
  v24 = 27937;
  v25 = 27936;
  v26 = 27932;
  v27 = 27928;
  v28 = 27892;
  v29 = 27910;
  v30 = 27896;
  v31 = 27900;
  do
  {
    *((_BYTE *)this + v28) = 0;
    *(_DWORD *)((char *)this + v30) = 0;
    *((_BYTE *)this + v31) = 0;
    *((_BYTE *)this + v29) = 0;
    v32 = (char *)this + v17;
    *(_DWORD *)(v32 + 47) = 0;
    *((_DWORD *)v32 + 11) = 0;
    *((_BYTE *)this + v27) = 0;
    *(_DWORD *)((char *)this + v26) = 0;
    *((_BYTE *)this + v25) = 0;
    *((_BYTE *)this + v24) = 0;
    *((_BYTE *)this + v23) = 0;
    *(_QWORD *)((char *)this + v16 + 27944) = 0;
    *(_DWORD *)((char *)this + v22) = 0;
    v32[32] = 0;
    *((_DWORD *)v32 + 7) = 0;
    v16 += 1144;
    v17 += 1144;
    *((_DWORD *)v32 + 9) = 0;
    *(_DWORD *)(v32 + 39) = 0;
    *(_WORD *)((char *)this + v18) = 0;
    v18 += 1144;
    *((_BYTE *)this + v19) = 0;
    v19 += 1144;
    *((_BYTE *)this + v20) = 0;
    v20 += 1144;
    *((_BYTE *)this + v21) = 0;
    v21 += 1144;
    v22 += 1144;
    v23 += 1144;
    v24 += 1144;
    v25 += 1144;
    v32[4] = 0;
    v26 += 1144;
    v27 += 1144;
    *(_DWORD *)v32 = 0;
    v28 += 1144;
    v29 += 1144;
    *((_DWORD *)v32 + 2) = 0;
    v30 += 1144;
    v31 += 1144;
    *(_DWORD *)(v32 + 11) = 0;
  }
  while (v16 != 145288);
  *v10 = 0;
  *((_WORD *)v10 + 1) = 0;
  v33 = 32512;
  *v9 = 0;
  v34 = (char *)v9 + 225;
  do
  {
    *(_WORD *)(v34 - 89) = 0;
    *(_QWORD *)(v34 - 85) = 0;
    *(_DWORD *)(v34 - 78) = 0;
    *(_DWORD *)(v34 - 221) = 0;
    *(v34 - 217) = 0;
    *((_WORD *)v34 - 37) = 1;
    *(v34 - 45) = 0;
    *(_DWORD *)(v34 - 5) = 0;
    *(_OWORD *)(v34 - 41) = 0uLL;
    *(_OWORD *)(v34 - 25) = 0uLL;
    *(v34 - 9) = 0;
    *(_WORD *)(v34 - 1) = 0;
    v34 += 256;
    v33 -= 256;
  }
  while (v33);
  *v8 = 0;
  v35 = v8 + 4;
  v36 = 206784;
  do
  {
    v37 = v35 + 9752;
    *v35 = 0;
    v38 = v35 + 8724;
    v39 = v35 + 7572;
    v35[4] = 0;
    v35[8] = 0;
    *((_DWORD *)v35 + 3) = 0;
    *((_WORD *)v35 + 8) = 256;
    *((_WORD *)v35 + 14) = 0;
    *((_DWORD *)v35 + 8) = 0;
    *((_DWORD *)v35 + 5) = 0;
    *(_DWORD *)(v35 + 23) = 0;
    v35[36] = 0;
    v35[40] = 0;
    *((_DWORD *)v35 + 11) = 0;
    *((_WORD *)v35 + 24) = 256;
    *((_WORD *)v35 + 30) = 0;
    *((_DWORD *)v35 + 16) = 0;
    *((_DWORD *)v35 + 13) = 0;
    *(_DWORD *)(v35 + 55) = 0;
    v40 = v36;
    *((_WORD *)v35 + 34) = 0;
    do
    {
      v41 = (char *)this + v40;
      *v41 = 0;
      *((_WORD *)v41 + 1) = 0;
      v41[4] = 0;
      v41[20] = 0;
      v41[24] = 0;
      *((_DWORD *)v41 + 7) = 0;
      v41[32] = 0;
      *(_QWORD *)(v41 + 36) = 0;
      *(_QWORD *)(v41 + 41) = 0;
      v41[49] = 1;
      *((_DWORD *)v41 + 13) = 0;
      v41[56] = 0;
      *((_DWORD *)v41 + 15) = 0;
      *((_WORD *)v41 + 32) = 0;
      *((_DWORD *)v41 + 17) = 0;
      v41[72] = 0;
      *(_QWORD *)(v41 + 84) = 0;
      *(_QWORD *)(v41 + 76) = 0;
      *(_QWORD *)(v41 + 90) = 0;
      v40 += 500;
      *(_DWORD *)(v41 + 103) = 0;
      *((_DWORD *)v41 + 25) = 0;
    }
    while (v41 + 500 != v39);
    *(_WORD *)v39 = 0;
    *((_QWORD *)v35 + 947) = 0;
    *(_DWORD *)(v35 + 7583) = 0;
    *(_WORD *)(v35 + 7587) = 1;
    v35[7616] = 0;
    *((_DWORD *)v35 + 1914) = 0;
    *(_OWORD *)(v35 + 7620) = 0uLL;
    *(_OWORD *)(v35 + 7636) = 0uLL;
    v35[7652] = 0;
    *((_WORD *)v35 + 3830) = 0;
    v35[7696] = 0;
    *((_WORD *)v35 + 3849) = 0;
    *v38 = 0;
    v36 += 9752;
    v35 += 9752;
    *((_WORD *)v38 + 1) = 0;
  }
  while (v37 != v7);
  *v7 = 0;
  *((_WORD *)v7 + 1) = 0;
  *(_WORD *)v6 = 0;
  *((_WORD *)v6 + 4) = 0;
  v6[16] = 0;
  *((_WORD *)v6 + 9) = 0;
  *((_DWORD *)this + 362591) = 0;
  *((_BYTE *)this + 1450368) = 0;
  *v5 = 4;
  *(_QWORD *)(v5 + 1) = 0;
  *(_DWORD *)(v5 + 11) = 1065353216;
  v5[15] = 0;
  *((_OWORD *)this + 90652) = 0u;
  *((_OWORD *)this + 90653) = 0u;
  *((_OWORD *)this + 90654) = 0u;
  *((_OWORD *)this + 90655) = 0u;
  *((_OWORD *)this + 90656) = 0u;
  *((_OWORD *)this + 90657) = 0u;
  *((_OWORD *)this + 90658) = 0u;
  *((_OWORD *)this + 90659) = 0u;
  *((_OWORD *)this + 90660) = 0u;
  *((_OWORD *)this + 90661) = 0u;
  *((_OWORD *)this + 90662) = 0u;
  *(_QWORD *)((char *)this + 1450605) = 0;
  *v4 = 0;
  *(_DWORD *)(v4 + 18) = 0;
  v4[24] = 0;
  *(_DWORD *)(v4 + 26) = 0;
  *((_WORD *)v4 + 16) = 0;
  *(_QWORD *)((char *)this + 1450916) = 0;
  *(_QWORD *)((char *)this + 1450921) = 0;
  *((_WORD *)v4 + 94) = 0;
  *(_QWORD *)((char *)this + 1450941) = 0;
  *((_QWORD *)this + 181367) = 0;
  v4[236] = 0;
  *((_WORD *)v4 + 119) = 0;
  v4[240] = 0;
  *(_QWORD *)((char *)this + 1450986) = 0;
  *((_WORD *)this + 725497) = 0;
  *((_WORD *)v4 + 128) = 0;
  *(_OWORD *)((char *)this + 1450388) = 0u;
  *(_OWORD *)((char *)this + 1450404) = 0u;
  *(_DWORD *)((char *)this + 1450419) = 0;
  *(_QWORD *)((char *)this + 1450753) = 0;
  *(_QWORD *)((char *)this + 1450748) = 0;
  *(_OWORD *)((char *)this + 1450897) = 0u;
  *(_OWORD *)((char *)this + 1450888) = 0u;
  *(_OWORD *)((char *)this + 1450872) = 0u;
  *(_OWORD *)((char *)this + 1450856) = 0u;
  *(_OWORD *)((char *)this + 1450840) = 0u;
  *(_OWORD *)((char *)this + 1450824) = 0u;
  *(_OWORD *)((char *)this + 1450808) = 0u;
  *(_OWORD *)((char *)this + 1450792) = 0u;
  *v3 = 0;
  bzero((char *)this + 1451096, 0x1288uLL);
  *(_OWORD *)((char *)this + 1451066) = 0u;
  *((_OWORD *)this + 90691) = 0u;
  *((_OWORD *)this + 90690) = 0u;
  *((_OWORD *)this + 90689) = 0u;
  *((_OWORD *)this + 90688) = 0u;
  *v2 = 4;
  *(_DWORD *)(v2 + 11) = 1065353216;
  v2[632] = 0;
  *(_OWORD *)((char *)this + 1455220) = 0u;
  *(_OWORD *)((char *)this + 1455236) = 0u;
  *(_DWORD *)((char *)this + 1455251) = 0;
  *((_OWORD *)this + 90954) = 0u;
  *((_OWORD *)this + 90955) = 0u;
  *((_OWORD *)this + 90956) = 0u;
  *((_OWORD *)this + 90957) = 0u;
  *((_OWORD *)this + 90958) = 0u;
  *((_OWORD *)this + 90959) = 0u;
  *((_OWORD *)this + 90960) = 0u;
  *((_OWORD *)this + 90961) = 0u;
  *((_OWORD *)this + 90962) = 0u;
  *((_OWORD *)this + 90963) = 0u;
  *((_OWORD *)this + 90964) = 0u;
  *(_QWORD *)((char *)this + 1455437) = 0;
  *(_QWORD *)((char *)this + 1455585) = 0;
  *(_OWORD *)((char *)this + 1455729) = 0u;
  *(_QWORD *)((char *)this + 1455580) = 0;
  *(_OWORD *)((char *)this + 1455720) = 0u;
  *(_OWORD *)((char *)this + 1455704) = 0u;
  *(_OWORD *)((char *)this + 1455688) = 0u;
  *(_OWORD *)((char *)this + 1455672) = 0u;
  *(_OWORD *)((char *)this + 1455656) = 0u;
  *(_OWORD *)((char *)this + 1455640) = 0u;
  *(_OWORD *)((char *)this + 1455624) = 0u;
  *(_QWORD *)((char *)this + 1455753) = 0;
  *(_QWORD *)((char *)this + 1455773) = 0;
  *(_QWORD *)((char *)this + 1455748) = 0;
  *((_QWORD *)this + 181971) = 0;
  *(_QWORD *)((char *)this + 1455818) = 0;
  *((_WORD *)this + 727913) = 0;
  *((_OWORD *)this + 90990) = 0u;
  *((_OWORD *)this + 90991) = 0u;
  *((_OWORD *)this + 90992) = 0u;
  *((_OWORD *)this + 90993) = 0u;
  *((_QWORD *)this + 181988) = 0;
  return this;
}

void AUSM::Metadata::PImpl::ParseSceneComponentStaticData(uint64_t a1, unsigned __int8 *a2, __n128 a3)
{
  unint64_t v4;
  _BYTE *v5;
  unsigned __int8 *v6;
  uint64_t v7;
  unsigned __int8 *v8;
  unsigned int v9;
  unsigned __int8 *v10;
  unsigned int v11;
  NSObject *v12;
  uint64_t v13;
  unsigned __int8 *v14;
  _BYTE *v15;
  unsigned __int32 v16;
  unsigned int v17;
  int v18;
  NSObject *v19;
  NSObject *v20;
  int v21;
  NSObject *v22;
  int v23;
  unsigned __int32 v24;
  NSObject *v25;
  int v26;
  NSObject *v28;
  unsigned __int32 v29;
  NSObject *v30;
  unsigned __int32 v31;
  unsigned __int32 v32;
  _QWORD *v33;
  unsigned __int32 v34;
  unsigned __int32 v35;
  NSObject *v36;
  _QWORD *v37;
  _QWORD *v38;
  _QWORD *v39;
  _QWORD *v40;
  _QWORD *v41;
  _QWORD *v42;
  _QWORD *v43;
  _QWORD *v44;
  unsigned __int32 v45;
  _QWORD *v46;
  _QWORD *v47;
  _QWORD *v48;
  int v49;
  NSObject *v50;
  NSObject *v51;
  uint64_t v52;
  double v53;
  uint64_t v54;
  __n128 *v55;
  NSObject *v56;
  _QWORD *v57;
  _QWORD *v58;
  _QWORD *v59;
  _QWORD *v60;
  _QWORD *v61;
  __n128 v62;
  __n128 v63;
  __n128 v64;
  __n128 v65;
  unsigned __int16 *v66;
  _QWORD *v67;
  unsigned __int16 *v68;
  _BYTE *v69;
  _BYTE *v70;
  _BYTE *v71;
  unsigned __int32 v72;
  unsigned __int32 v73;
  int v74;
  _BYTE *v75;
  _BYTE *v76;
  int v77;
  unsigned __int8 *v78;
  char v79;
  int v80;
  uint8_t buf[4];
  _QWORD *v82;
  __int16 v83;
  const char *v84;
  __int16 v85;
  unsigned __int32 v86;
  __int16 v87;
  unsigned __int32 v88;
  __int16 v89;
  int v90;
  uint64_t v91;

  v91 = *MEMORY[0x1E0C80C00];
  if (*a2)
  {
    v4 = 0;
    v67 = (_QWORD *)(a1 + 48);
    v5 = a2 + 84;
    a3.n128_u64[0] = 136316162;
    v65 = a3;
    a3.n128_u64[0] = 136315906;
    v64 = a3;
    a3.n128_u64[0] = 136315394;
    v63 = a3;
    a3.n128_u64[0] = 136315650;
    v62 = a3;
    v78 = a2;
    do
    {
      v6 = &a2[1144 * v4];
      v72 = v6[4];
      v7 = v72 + 1;
      v77 = v6[5];
      v73 = *((_DWORD *)v6 + 3);
      if (v6[32])
      {
        v8 = &v78[1144 * v4];
        v11 = v8[33];
        v10 = v8 + 33;
        v9 = v11;
        if (v11 >= 0x20)
        {
          if (getAUSMV2Log(void)::onceToken != -1)
            dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_5474);
          v12 = (id)getAUSMV2Log(void)::gLog;
          if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
          {
            v60 = v67;
            if (*(char *)(a1 + 71) < 0)
              v60 = (_QWORD *)*v67;
            *(_DWORD *)buf = v63.n128_u32[0];
            v82 = v60;
            v83 = 2080;
            v84 = "ParseSceneComponentStaticData";
            _os_log_error_impl(&dword_1B5ED0000, v12, OS_LOG_TYPE_ERROR, "[%s|%s] Too many parameters for ProprietaryStaticData", buf, 0x16u);
          }

          v9 = *v10;
        }
        v13 = v9 >= 0x1F ? 31 : v9;
        if ((_DWORD)v13)
        {
          v74 = 0;
          v14 = &v78[1144 * v4];
          v66 = (unsigned __int16 *)(v14 + 50);
          v70 = v14 + 49;
          v71 = v14 + 46;
          v75 = v14 + 38;
          v76 = v14 + 48;
          v68 = (unsigned __int16 *)(v14 + 40);
          v69 = v14 + 42;
          v15 = v5;
          while (2)
          {
            switch(*v15)
            {
              case 0:
              case 1:
              case 2:
              case 6:
              case 7:
              case 8:
                goto LABEL_15;
              case 3:
                v16 = *v75;
                switch(*v75)
                {
                  case 0:
                    goto LABEL_15;
                  case 1:
                    v17 = *v69;
                    if (*v69)
                    {
                      v80 = 1;
                      v18 = AUSpatialMixerV2::SetAPACProperty(*(AUSpatialMixerV2 **)(a1 + 40), 1005, 0, 0, &v80, 4);
                      if (v18)
                      {
                        if (getAUSMV2Log(void)::onceToken != -1)
                          dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_5474);
                        v19 = (id)getAUSMV2Log(void)::gLog;
                        if (os_log_type_enabled(v19, OS_LOG_TYPE_DEBUG))
                        {
                          v46 = v67;
                          if (*(char *)(a1 + 71) < 0)
                            v46 = (_QWORD *)*v67;
                          *(_DWORD *)buf = v65.n128_u32[0];
                          v82 = v46;
                          v83 = 2080;
                          v84 = "ParseSceneComponentStaticData";
                          v85 = 1024;
                          v86 = v72;
                          v87 = 1024;
                          v88 = v7;
                          v89 = 1024;
                          v90 = v18;
                          _os_log_debug_impl(&dword_1B5ED0000, v19, OS_LOG_TYPE_DEBUG, "[%s|%s] Could not enable the scene reverb on scene component = %u, input = %u, err = %d", buf, 0x28u);
                        }

                      }
                    }
                    if ((*(unsigned int (**)(_QWORD, uint64_t, uint64_t, uint64_t, _QWORD, float))(**(_QWORD **)(a1 + 40) + 152))(*(_QWORD *)(a1 + 40), 8, 1, v7, 0, (float)v17))
                    {
                      if (getAUSMV2Log(void)::onceToken != -1)
                        dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_5474);
                      v20 = (id)getAUSMV2Log(void)::gLog;
                      if (os_log_type_enabled(v20, OS_LOG_TYPE_DEBUG))
                      {
                        v39 = v67;
                        if (*(char *)(a1 + 71) < 0)
                          v39 = (_QWORD *)*v67;
                        *(_DWORD *)buf = v64.n128_u32[0];
                        v82 = v39;
                        v83 = 2080;
                        v84 = "ParseSceneComponentStaticData";
                        v85 = 1024;
                        v86 = v72;
                        v87 = 1024;
                        v88 = v7;
                        _os_log_debug_impl(&dword_1B5ED0000, v20, OS_LOG_TYPE_DEBUG, "[%s|%s] Could not set reverb blend on sc #%u, input element #%u", buf, 0x22u);
                      }

                    }
                    v80 = *v68;
                    v21 = AUSpatialMixerV2::SetAPACProperty(*(AUSpatialMixerV2 **)(a1 + 40), 10, 0, 0, &v80, 4);
                    if (v21)
                    {
                      if (getAUSMV2Log(void)::onceToken != -1)
                        dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_5474);
                      v22 = (id)getAUSMV2Log(void)::gLog;
                      if (os_log_type_enabled(v22, OS_LOG_TYPE_DEBUG))
                      {
                        v40 = v67;
                        if (*(char *)(a1 + 71) < 0)
                          v40 = (_QWORD *)*v67;
                        *(_DWORD *)buf = v65.n128_u32[0];
                        v82 = v40;
                        v83 = 2080;
                        v84 = "ParseSceneComponentStaticData";
                        v85 = 1024;
                        v86 = v72;
                        v87 = 1024;
                        v88 = v7;
                        v89 = 1024;
                        v90 = v21;
                        _os_log_debug_impl(&dword_1B5ED0000, v22, OS_LOG_TYPE_DEBUG, "[%s|%s] Could not set reverb preset for sc #%u, input element #%u, err = %d", buf, 0x28u);
                      }

                    }
                    goto LABEL_34;
                  case 2:
                  case 3:
LABEL_34:
                    v74 = 1;
                    break;
                  default:
                    if (getAUSMV2Log(void)::onceToken != -1)
                      dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_5474);
                    v25 = (id)getAUSMV2Log(void)::gLog;
                    if (os_log_type_enabled(v25, OS_LOG_TYPE_DEBUG))
                    {
                      v38 = v67;
                      if (*(char *)(a1 + 71) < 0)
                        v38 = (_QWORD *)*v67;
                      *(_DWORD *)buf = v65.n128_u32[0];
                      v82 = v38;
                      v83 = 2080;
                      v84 = "ParseSceneComponentStaticData";
                      v85 = 1024;
                      v86 = v16;
                      v87 = 1024;
                      v88 = v72;
                      v89 = 1024;
                      v90 = v7;
                      _os_log_debug_impl(&dword_1B5ED0000, v25, OS_LOG_TYPE_DEBUG, "[%s|%s] Unsupported reverbProcIndex %u on sc #%u, input element #%u", buf, 0x28u);
                    }
                    goto LABEL_99;
                }
                goto LABEL_15;
              case 4:
                if (!*(_BYTE *)(a1 + 120))
                  goto LABEL_39;
                v23 = *v71;
                if (v23 == 2)
                {
                  v80 = 1;
                  v29 = AUSpatialMixerV2::SetAPACProperty(*(AUSpatialMixerV2 **)(a1 + 40), 3267, 0, 0, &v80, 4);
                  if (v29)
                  {
                    if (getAUSMV2Log(void)::onceToken != -1)
                      dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_5474);
                    v30 = (id)getAUSMV2Log(void)::gLog;
                    if (os_log_type_enabled(v30, OS_LOG_TYPE_DEBUG))
                    {
                      v41 = v67;
                      if (*(char *)(a1 + 71) < 0)
                        v41 = (_QWORD *)*v67;
                      *(_DWORD *)buf = v62.n128_u32[0];
                      v82 = v41;
                      v83 = 2080;
                      v84 = "ParseSceneComponentStaticData";
                      v85 = 1024;
                      v86 = v29;
                      _os_log_debug_impl(&dword_1B5ED0000, v30, OS_LOG_TYPE_DEBUG, "[%s|%s] Could not enable the PP reverb: err = %d", buf, 0x1Cu);
                    }

                  }
                  v31 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, uint64_t, _QWORD, float))(**(_QWORD **)(a1 + 40) + 152))(*(_QWORD *)(a1 + 40), 35, 1, v7, 0, 50.0);
                  if (v31)
                  {
                    if (getAUSMV2Log(void)::onceToken != -1)
                      dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_5474);
                    v25 = (id)getAUSMV2Log(void)::gLog;
                    if (!os_log_type_enabled(v25, OS_LOG_TYPE_DEBUG))
                      goto LABEL_99;
                    v43 = v67;
                    if (*(char *)(a1 + 71) < 0)
                      v43 = (_QWORD *)*v67;
LABEL_138:
                    *(_DWORD *)buf = v64.n128_u32[0];
                    v82 = v43;
                    v83 = 2080;
                    v84 = "ParseSceneComponentStaticData";
                    v85 = 1024;
                    v86 = v7;
                    v87 = 1024;
                    v88 = v31;
                    _os_log_debug_impl(&dword_1B5ED0000, v25, OS_LOG_TYPE_DEBUG, "[%s|%s] Could not set the post-processing reverb blend to 50 on input %u, err = %d", buf, 0x22u);
LABEL_99:

                  }
                }
                else
                {
                  if (v23 != 1)
                  {
                    if (*v71)
                    {
                      v24 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, uint64_t, _QWORD, float))(**(_QWORD **)(a1 + 40) + 152))(*(_QWORD *)(a1 + 40), 35, 1, v7, 0, 0.0);
                      if (!v24)
                        goto LABEL_15;
                      if (getAUSMV2Log(void)::onceToken != -1)
                        dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_5474);
                      v25 = (id)getAUSMV2Log(void)::gLog;
                      if (os_log_type_enabled(v25, OS_LOG_TYPE_DEBUG))
                      {
                        v37 = v67;
                        if (*(char *)(a1 + 71) < 0)
                          v37 = (_QWORD *)*v67;
                        goto LABEL_120;
                      }
                    }
                    else
                    {
LABEL_39:
                      v24 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, uint64_t, _QWORD, float))(**(_QWORD **)(a1 + 40) + 152))(*(_QWORD *)(a1 + 40), 35, 1, v7, 0, 0.0);
                      if (!v24)
                        goto LABEL_15;
                      if (getAUSMV2Log(void)::onceToken != -1)
                        dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_5474);
                      v25 = (id)getAUSMV2Log(void)::gLog;
                      if (os_log_type_enabled(v25, OS_LOG_TYPE_DEBUG))
                      {
                        v37 = v67;
                        if (*(char *)(a1 + 71) < 0)
                          v37 = (_QWORD *)*v67;
LABEL_120:
                        *(_DWORD *)buf = v64.n128_u32[0];
                        v82 = v37;
                        v83 = 2080;
                        v84 = "ParseSceneComponentStaticData";
                        v85 = 1024;
                        v86 = v7;
                        v87 = 1024;
                        v88 = v24;
                        _os_log_debug_impl(&dword_1B5ED0000, v25, OS_LOG_TYPE_DEBUG, "[%s|%s] Could not set the post-processing reverb blend to 0 on input %u, err = %d", buf, 0x22u);
                        goto LABEL_99;
                      }
                    }
                    goto LABEL_99;
                  }
                  v80 = 1;
                  v32 = AUSpatialMixerV2::SetAPACProperty(*(AUSpatialMixerV2 **)(a1 + 40), 3267, 0, 0, &v80, 4);
                  if (v32)
                  {
                    if (getAUSMV2Log(void)::onceToken != -1)
                      dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_5474);
                    v25 = (id)getAUSMV2Log(void)::gLog;
                    if (os_log_type_enabled(v25, OS_LOG_TYPE_DEBUG))
                    {
                      v42 = v67;
                      if (*(char *)(a1 + 71) < 0)
                        v42 = (_QWORD *)*v67;
                      *(_DWORD *)buf = v62.n128_u32[0];
                      v82 = v42;
                      v83 = 2080;
                      v84 = "ParseSceneComponentStaticData";
                      v85 = 1024;
                      v86 = v32;
                      _os_log_debug_impl(&dword_1B5ED0000, v25, OS_LOG_TYPE_DEBUG, "[%s|%s] Could not enable the PP ERs: err = %d", buf, 0x1Cu);
                    }
                    goto LABEL_99;
                  }
                  v79 = 0;
                  v35 = AUSpatialMixerV2::SetAPACProperty(*(AUSpatialMixerV2 **)(a1 + 40), 3262, 0, 0, &v79, 1);
                  if (v35)
                  {
                    if (getAUSMV2Log(void)::onceToken != -1)
                      dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_5474);
                    v36 = (id)getAUSMV2Log(void)::gLog;
                    if (os_log_type_enabled(v36, OS_LOG_TYPE_DEBUG))
                    {
                      v48 = v67;
                      if (*(char *)(a1 + 71) < 0)
                        v48 = (_QWORD *)*v67;
                      *(_DWORD *)buf = v62.n128_u32[0];
                      v82 = v48;
                      v83 = 2080;
                      v84 = "ParseSceneComponentStaticData";
                      v85 = 1024;
                      v86 = v35;
                      _os_log_debug_impl(&dword_1B5ED0000, v36, OS_LOG_TYPE_DEBUG, "[%s|%s] Could not disable the PP late reverb: err = %d", buf, 0x1Cu);
                    }

                  }
                  v31 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, uint64_t, _QWORD, float))(**(_QWORD **)(a1 + 40) + 152))(*(_QWORD *)(a1 + 40), 35, 1, v7, 0, 50.0);
                  if (v31)
                  {
                    if (getAUSMV2Log(void)::onceToken != -1)
                      dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_5474);
                    v25 = (id)getAUSMV2Log(void)::gLog;
                    if (!os_log_type_enabled(v25, OS_LOG_TYPE_DEBUG))
                      goto LABEL_99;
                    v43 = v67;
                    if (*(char *)(a1 + 71) < 0)
                      v43 = (_QWORD *)*v67;
                    goto LABEL_138;
                  }
                }
LABEL_15:
                ++v15;
                if (--v13)
                  continue;
                if ((v74 & 1) == 0)
                  goto LABEL_140;
                goto LABEL_145;
              case 5:
                if (*v76)
                  goto LABEL_15;
                v26 = *v70;
                if (!*v70 || v26 == 2)
                  goto LABEL_15;
                if (v26 != 1)
                {
                  if (getAUSMV2Log(void)::onceToken != -1)
                    dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_5474);
                  v28 = (id)getAUSMV2Log(void)::gLog;
                  if (os_log_type_enabled(v28, OS_LOG_TYPE_DEBUG))
                  {
                    v44 = v67;
                    if (*(char *)(a1 + 71) < 0)
                      v44 = (_QWORD *)*v67;
                    v45 = *v70;
                    *(_DWORD *)buf = v65.n128_u32[0];
                    v82 = v44;
                    v83 = 2080;
                    v84 = "ParseSceneComponentStaticData";
                    v85 = 1024;
                    v86 = v45;
                    v87 = 1024;
                    v88 = v72;
                    v89 = 1024;
                    v90 = v7;
                    _os_log_debug_impl(&dword_1B5ED0000, v28, OS_LOG_TYPE_DEBUG, "[%s|%s] Unsupported AuSMProcIndex %u on sc #%u, input element #%u", buf, 0x28u);
                  }
LABEL_58:

                  goto LABEL_15;
                }
                v80 = *v66;
                if (!(*(unsigned int (**)(_QWORD, uint64_t, uint64_t, uint64_t, int *, uint64_t))(**(_QWORD **)(a1 + 40) + 96))(*(_QWORD *)(a1 + 40), 3269, 1, v7, &v80, 4))goto LABEL_15;
                if (getAUSMV2Log(void)::onceToken != -1)
                  dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_5474);
                v25 = (id)getAUSMV2Log(void)::gLog;
                if (os_log_type_enabled(v25, OS_LOG_TYPE_DEBUG))
                {
                  v47 = v67;
                  if (*(char *)(a1 + 71) < 0)
                    v47 = (_QWORD *)*v67;
                  *(_DWORD *)buf = v64.n128_u32[0];
                  v82 = v47;
                  v83 = 2080;
                  v84 = "ParseSceneComponentStaticData";
                  v85 = 1024;
                  v86 = v72;
                  v87 = 1024;
                  v88 = v7;
                  _os_log_debug_impl(&dword_1B5ED0000, v25, OS_LOG_TYPE_DEBUG, "[%s|%s] Could not set directivity index on sc #%u, input element #%u", buf, 0x22u);
                }
                goto LABEL_99;
              default:
                if (getAUSMV2Log(void)::onceToken != -1)
                  dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_5474);
                v28 = (id)getAUSMV2Log(void)::gLog;
                if (os_log_type_enabled(v28, OS_LOG_TYPE_DEBUG))
                {
                  v33 = v67;
                  if (*(char *)(a1 + 71) < 0)
                    v33 = (_QWORD *)*v67;
                  v34 = *v15;
                  *(_DWORD *)buf = v65.n128_u32[0];
                  v82 = v33;
                  v83 = 2080;
                  v84 = "ParseSceneComponentStaticData";
                  v85 = 1024;
                  v86 = v34;
                  v87 = 1024;
                  v88 = v72;
                  v89 = 1024;
                  v90 = v7;
                  _os_log_debug_impl(&dword_1B5ED0000, v28, OS_LOG_TYPE_DEBUG, "[%s|%s] Unknown proprietaryStaticData param index %u on sc #%u, input element #%u", buf, 0x28u);
                }
                goto LABEL_58;
            }
          }
        }
      }
LABEL_140:
      v49 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, uint64_t, _QWORD, float))(**(_QWORD **)(a1 + 40) + 152))(*(_QWORD *)(a1 + 40), 8, 1, v7, 0, 0.0);
      if (v49)
      {
        if (getAUSMV2Log(void)::onceToken != -1)
          dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_5474);
        v50 = (id)getAUSMV2Log(void)::gLog;
        if (os_log_type_enabled(v50, OS_LOG_TYPE_DEBUG))
        {
          v58 = v67;
          if (*(char *)(a1 + 71) < 0)
            v58 = (_QWORD *)*v67;
          *(_DWORD *)buf = v65.n128_u32[0];
          v82 = v58;
          v83 = 2080;
          v84 = "ParseSceneComponentStaticData";
          v85 = 1024;
          v86 = v72;
          v87 = 1024;
          v88 = v7;
          v89 = 1024;
          v90 = v49;
          _os_log_debug_impl(&dword_1B5ED0000, v50, OS_LOG_TYPE_DEBUG, "[%s|%s] Could not clear reverb blend on sc #%u, input element #%u, err = %d", buf, 0x28u);
        }

      }
LABEL_145:
      if (v78[1144 * v4 + 116])
      {
        v80 = v78[1144 * v4 + 117];
        if (!(*(unsigned int (**)(_QWORD, uint64_t, uint64_t, uint64_t, int *, uint64_t))(**(_QWORD **)(a1 + 40)
                                                                                                + 96))(*(_QWORD *)(a1 + 40), 3242, 1, v7, &v80, 4))goto LABEL_156;
        if (getAUSMV2Log(void)::onceToken != -1)
          dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_5474);
        v51 = (id)getAUSMV2Log(void)::gLog;
        if (os_log_type_enabled(v51, OS_LOG_TYPE_DEBUG))
        {
          v59 = v67;
          if (*(char *)(a1 + 71) < 0)
            v59 = (_QWORD *)*v67;
          *(_DWORD *)buf = v64.n128_u32[0];
          v82 = v59;
          v83 = 2080;
          v84 = "ParseSceneComponentStaticData";
          v85 = 1024;
          v86 = v72;
          v87 = 1024;
          v88 = v7;
          _os_log_debug_impl(&dword_1B5ED0000, v51, OS_LOG_TYPE_DEBUG, "[%s|%s] Could not set binaural compatibility mode on sc #%u, input element #%u", buf, 0x22u);
        }
      }
      else
      {
        v80 = 4;
        if (!(*(unsigned int (**)(_QWORD, uint64_t, uint64_t, uint64_t, int *, uint64_t))(**(_QWORD **)(a1 + 40)
                                                                                                + 96))(*(_QWORD *)(a1 + 40), 3242, 1, v7, &v80, 4))goto LABEL_156;
        if (getAUSMV2Log(void)::onceToken != -1)
          dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_5474);
        v51 = (id)getAUSMV2Log(void)::gLog;
        if (os_log_type_enabled(v51, OS_LOG_TYPE_DEBUG))
        {
          v61 = v67;
          if (*(char *)(a1 + 71) < 0)
            v61 = (_QWORD *)*v67;
          *(_DWORD *)buf = v64.n128_u32[0];
          v82 = v61;
          v83 = 2080;
          v84 = "ParseSceneComponentStaticData";
          v85 = 1024;
          v86 = v72;
          v87 = 1024;
          v88 = v7;
          _os_log_debug_impl(&dword_1B5ED0000, v51, OS_LOG_TYPE_DEBUG, "[%s|%s] Could not clear binaural compatibility mode on sc #%u, input element #%u", buf, 0x22u);
        }
      }

LABEL_156:
      if (!v77)
      {
        LOBYTE(v80) = 1;
        v52 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, _QWORD, int *))(**(_QWORD **)(a1 + 40) + 528))(*(_QWORD *)(a1 + 40), 1, v7, 0, &v80);
        v53 = MEMORY[0x1E0C80A78](v52);
        v55 = (__n128 *)((char *)&v62 - ((v54 + 15) & 0x1FFFFFFF0));
        (*(void (**)(_QWORD, uint64_t, uint64_t, __n128 *, int *, double))(**(_QWORD **)(a1 + 40) + 528))(*(_QWORD *)(a1 + 40), 1, v7, v55, &v80, v53);
        if (v55->n128_u32[0] != v73)
        {
          v55->n128_u32[0] = v73;
          if (getAUSMV2Log(void)::onceToken != -1)
            dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_5474);
          v56 = (id)getAUSMV2Log(void)::gLog;
          if (os_log_type_enabled(v56, OS_LOG_TYPE_INFO))
          {
            v57 = v67;
            if (*(char *)(a1 + 71) < 0)
              v57 = (_QWORD *)*v67;
            *(_DWORD *)buf = v65.n128_u32[0];
            v82 = v57;
            v83 = 2080;
            v84 = "ParseSceneComponentStaticData";
            v85 = 1024;
            v86 = v72;
            v87 = 1024;
            v88 = v73;
            v89 = 1024;
            v90 = v7;
            _os_log_impl(&dword_1B5ED0000, v56, OS_LOG_TYPE_INFO, "[%s|%s] APAC metadata parsing: changing aclt for sc #%u to %u, input element #%u", buf, 0x28u);
          }

          (*(void (**)(_QWORD, uint64_t, uint64_t, __n128 *))(**(_QWORD **)(a1 + 40) + 536))(*(_QWORD *)(a1 + 40), 1, v7, v55);
        }
      }
      ++v4;
      a2 = v78;
      v5 += 1144;
    }
    while (v4 < *v78);
  }
}

void AUSM::Metadata::PImpl::ParseDynamicObjectMetadata(uint64_t a1, unsigned __int8 *a2, __n128 a3)
{
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  unsigned int v7;
  BOOL v8;
  uint64_t *v9;
  uint64_t v10;
  unint64_t v11;
  unsigned __int8 *v12;
  uint64_t v13;
  int v14;
  NSObject *v15;
  _QWORD *v16;
  int v17;
  int v18;
  int v19;
  unint64_t v20;
  float *v21;
  unint64_t v22;
  int v23;
  unsigned __int8 *v24;
  int v25;
  float *v26;
  float v27;
  float v28;
  float v29;
  float v30;
  float v31;
  float v32;
  float v33;
  unsigned int v34;
  float v35;
  float v36;
  unsigned int v37;
  float v38;
  unint64_t v39;
  uint64_t v40;
  float v41;
  char *v42;
  char *v43;
  uint64_t v44;
  unsigned __int8 *v45;
  int v46;
  float v47;
  float v48;
  float v49;
  float v50;
  float v51;
  float v52;
  float v53;
  float v54;
  int v55;
  unint64_t v56;
  uint64_t v57;
  unint64_t v58;
  _DWORD *v59;
  unint64_t v60;
  __int128 v61;
  char *v62;
  unint64_t v63;
  __int128 v64;
  int v65;
  char *v66;
  int v67;
  int v68;
  int v69;
  uint64_t v70;
  char *v71;
  int v72;
  NSObject *v73;
  int v74;
  NSObject *v75;
  _QWORD *v76;
  _QWORD *v77;
  const char *v78;
  int v79;
  NSObject *v80;
  _QWORD *v81;
  __n128 v82;
  __n128 v83;
  _QWORD *v84;
  int v85;
  unsigned __int8 *v86;
  unsigned __int8 *v87;
  _BOOL4 v88;
  char *v89;
  char *v90;
  unint64_t v91;
  uint8_t buf[4];
  _QWORD *v93;
  __int16 v94;
  const char *v95;
  __int16 v96;
  _BYTE v97[10];
  _BYTE v98[6];
  _DWORD v99[2];
  uint64_t v100;

  v87 = a2;
  v100 = *MEMORY[0x1E0C80C00];
  v4 = *(_QWORD *)(a1 + 8);
  if (!v4)
    goto LABEL_12;
  v5 = *v87;
  v6 = a1 + 8;
  do
  {
    v7 = *(_DWORD *)(v4 + 28);
    v8 = v7 >= v5;
    if (v7 >= v5)
      v9 = (uint64_t *)v4;
    else
      v9 = (uint64_t *)(v4 + 8);
    if (v8)
      v6 = v4;
    v4 = *v9;
  }
  while (*v9);
  if (v6 != a1 + 8 && *(_DWORD *)(v6 + 28) <= v5)
    v10 = *(unsigned int *)(v6 + 32);
  else
LABEL_12:
    v10 = (*(_DWORD *)(a1 + 88) + 1);
  LODWORD(v11) = v87[1];
  v12 = v87 + 4;
  v13 = *(_QWORD *)(a1 + 80);
  v14 = llround(**(double **)(a1 + 72));
  if (!v87[1])
    v12 = 0;
  v86 = v12;
  v85 = v14 - *(_DWORD *)(a1 + 24) + llround(*(double *)(v13 + 12));
  if (AUSM::Metadata::mTraceLevel >= 1)
  {
    if (getAUSMV2Log(void)::onceToken != -1)
      dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_5474);
    v15 = (id)getAUSMV2Log(void)::gLog;
    if (os_log_type_enabled(v15, OS_LOG_TYPE_INFO))
    {
      v16 = (_QWORD *)(a1 + 48);
      if (*(char *)(a1 + 71) < 0)
        v16 = (_QWORD *)*v16;
      v17 = llround(**(double **)(a1 + 72));
      v18 = llround(*(double *)(*(_QWORD *)(a1 + 80) + 12));
      v19 = *(_DWORD *)(a1 + 24);
      *(_DWORD *)buf = 136316418;
      v93 = v16;
      v94 = 2080;
      v95 = "ParseDynamicObjectMetadata";
      v96 = 1024;
      *(_DWORD *)v97 = v85;
      *(_WORD *)&v97[4] = 1024;
      *(_DWORD *)&v97[6] = v17;
      *(_WORD *)v98 = 1024;
      *(_DWORD *)&v98[2] = v18;
      LOWORD(v99[0]) = 1024;
      *(_DWORD *)((char *)v99 + 2) = v19;
      _os_log_impl(&dword_1B5ED0000, v15, OS_LOG_TYPE_INFO, "[%s|%s] eventOffsetInAudioBuffer (%d) = mCurrentMDHeader->frameStartTime (%d) + mCurrentMDEvent->eventStartTime (%d) - mFirstAudioBufferSampleTime (%d)", buf, 0x2Eu);
    }

    LODWORD(v11) = v87[1];
  }
  if ((_DWORD)v11)
  {
    v20 = 0;
    v84 = (_QWORD *)(a1 + 48);
    a3.n128_u64[0] = 136315906;
    v83 = a3;
    a3.n128_u64[0] = 136316162;
    v82 = a3;
    do
    {
      v21 = (float *)v86;
      v22 = v20 + 1;
      if (!v20 || v22 == v11)
      {
        v23 = 0;
        if (v11 >= 2 && v22 == v11)
          v23 = *(_DWORD *)(*(_QWORD *)(a1 + 80) + 20);
      }
      else
      {
        v23 = *(unsigned __int16 *)&v87[500 * v20 + 6];
      }
      v24 = &v87[500 * v20 + 4];
      v25 = *v24;
      v86 = v24;
      if (v25)
        v26 = (float *)v24;
      else
        v26 = v21;
      v27 = v26[2];
      if (*((_BYTE *)v26 + 4))
      {
        v28 = v26[3];
        v29 = v26[4];
        v30 = atan2f(v26[2], v28) * 57.296;
        v31 = hypotf(v27, v28);
        v32 = atan2f(v29, v31) * 57.296;
        v33 = hypotf(v31, v29);
      }
      else
      {
        v30 = -v27;
        v32 = v26[3];
        v33 = v26[4];
      }
      v34 = v23 + v85;
      AUSM::Metadata::PImpl::setParameter((AUSM::Metadata::PImpl *)a1, 0, v10, v23 + v85, v30, 0);
      AUSM::Metadata::PImpl::setParameter((AUSM::Metadata::PImpl *)a1, 1u, v10, v34, v32, 0);
      AUSM::Metadata::PImpl::setParameter((AUSM::Metadata::PImpl *)a1, 2u, v10, v34, v33, 0);
      if (*((_BYTE *)v26 + 20))
      {
        if (*((_BYTE *)v26 + 24))
          AUSM::Metadata::PImpl::setParameter((AUSM::Metadata::PImpl *)a1, 0x22u, v10, v34, v26[7], 0);
        if (*((_BYTE *)v26 + 32))
        {
          AUSM::Metadata::PImpl::setParameter((AUSM::Metadata::PImpl *)a1, 0x19u, v10, v34, v26[9], 0);
          AUSM::Metadata::PImpl::setParameter((AUSM::Metadata::PImpl *)a1, 0x1Au, v10, v34, v26[10], 0);
          AUSM::Metadata::PImpl::setParameter((AUSM::Metadata::PImpl *)a1, 0x1Bu, v10, v34, v26[11], 0);
        }
        if (*((_BYTE *)v26 + 48))
        {
          v35 = v26[13];
          if (!*((_BYTE *)v26 + 49))
          {
            if (v35 < 1.1755e-38)
              v35 = 1.1755e-38;
            v35 = log10f(v35) * 20.0;
          }
          AUSM::Metadata::PImpl::setParameter((AUSM::Metadata::PImpl *)a1, 3u, v10, v34, v35, 0);
        }
        if (*((_BYTE *)v26 + 56))
          AUSM::Metadata::PImpl::setParameter((AUSM::Metadata::PImpl *)a1, 0x21u, v10, v34, v26[15], 0);
        if (*((_BYTE *)v26 + 64))
          v36 = 1.0;
        else
          v36 = 0.0;
        AUSM::Metadata::PImpl::setParameter((AUSM::Metadata::PImpl *)a1, 0x20u, v10, v34, v36, 0);
        if (*((_BYTE *)v26 + 72))
        {
          AUSM::Metadata::PImpl::setParameter((AUSM::Metadata::PImpl *)a1, 0x1Cu, v10, v34, v26[19], 0);
          if (*((_BYTE *)v26 + 4))
            v37 = 30;
          else
            v37 = 29;
          AUSM::Metadata::PImpl::setParameter((AUSM::Metadata::PImpl *)a1, v37, v10, v34, v26[22], 0);
        }
        if (*((_BYTE *)v26 + 95))
          v38 = 1.0;
        else
          v38 = 0.0;
        v39 = AUSM::Metadata::PImpl::setParameter((AUSM::Metadata::PImpl *)a1, 0x1Fu, v10, v34, v38, 0);
        v40 = *((_QWORD *)v26 + 12);
        if ((_BYTE)v40)
        {
          if ((v40 & 0xFF00) != 0)
            v41 = 1.0;
          else
            v41 = 0.0;
          v39 = AUSM::Metadata::PImpl::setParameter((AUSM::Metadata::PImpl *)a1, 0x27u, v10, v34, v41, 0);
        }
        if (*((_BYTE *)v26 + 104))
        {
          if (!*((_BYTE *)v26 + 105))
          {
            v89 = 0;
            v90 = 0;
            v91 = 0;
            if (*((_BYTE *)v26 + 106))
            {
              v42 = 0;
              v43 = 0;
              v44 = 0;
              while (1)
              {
                if (*((_BYTE *)v26 + v44 + 107))
                {
                  AUSM::ExclusionZone::getPreset(*((unsigned __int8 *)v26 + v44 + 122), (void **)&v89);
                  v43 = v90;
                  goto LABEL_108;
                }
                v45 = (unsigned __int8 *)&v26[6 * v44 + 35];
                if (*((_BYTE *)v26 + 4))
                {
                  v46 = *(_DWORD *)v45;
                  v47 = v26[6 * v44 + 36];
                  v49 = v26[6 * v44 + 37];
                  v48 = v26[6 * v44 + 38];
                  v51 = v26[6 * v44 + 39];
                  v50 = v26[6 * v44 + 40];
                  if ((unint64_t)v43 >= v91)
                  {
                    v56 = 0x6DB6DB6DB6DB6DB7 * ((v43 - v42) >> 2) + 1;
                    if (v56 > 0x924924924924924)
                      std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
                    if (0xDB6DB6DB6DB6DB6ELL * ((uint64_t)(v91 - (_QWORD)v42) >> 2) > v56)
                      v56 = 0xDB6DB6DB6DB6DB6ELL * ((uint64_t)(v91 - (_QWORD)v42) >> 2);
                    if ((unint64_t)(0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v91 - (_QWORD)v42) >> 2)) >= 0x492492492492492)
                      v39 = 0x924924924924924;
                    else
                      v39 = v56;
                    if (v39)
                      v39 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<AUSM::ExclusionZone>>(v39);
                    else
                      v57 = 0;
                    v59 = (_DWORD *)(v39 + 4 * ((v43 - v42) >> 2));
                    *v59 = 1;
                    v59[1] = v46;
                    *((float *)v59 + 2) = v47;
                    *((float *)v59 + 3) = v49;
                    *((float *)v59 + 4) = v48;
                    *((float *)v59 + 5) = v51;
                    *((float *)v59 + 6) = v50;
                    if (v43 == v42)
                    {
                      v62 = (char *)(v39 + 4 * ((v43 - v42) >> 2));
                    }
                    else
                    {
                      v60 = v39 + 4 * ((v43 - v42) >> 2);
                      do
                      {
                        v61 = *(_OWORD *)(v43 - 28);
                        v62 = (char *)(v60 - 28);
                        *(_OWORD *)(v60 - 16) = *((_OWORD *)v43 - 1);
                        *(_OWORD *)(v60 - 28) = v61;
                        v43 -= 28;
                        v60 -= 28;
                      }
                      while (v43 != v42);
                    }
LABEL_105:
                    v43 = (char *)(v59 + 7);
                    v89 = v62;
                    v91 = v39 + 28 * v57;
                    if (v42)
                      operator delete(v42);
                    goto LABEL_107;
                  }
                  *(_DWORD *)v43 = 1;
                  *((_DWORD *)v43 + 1) = v46;
                  *((float *)v43 + 2) = v47;
                  *((float *)v43 + 3) = v49;
                  *((float *)v43 + 4) = v48;
                  *((float *)v43 + 5) = v51;
                  *((float *)v43 + 6) = v50;
                  v43 += 28;
                }
                else
                {
                  v53 = v26[6 * v44 + 37];
                  v52 = v26[6 * v44 + 38];
                  v55 = *(_DWORD *)v45;
                  v54 = v26[6 * v44 + 36];
                  if ((unint64_t)v43 >= v91)
                  {
                    v58 = 0x6DB6DB6DB6DB6DB7 * ((v43 - v42) >> 2) + 1;
                    if (v58 > 0x924924924924924)
                      std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
                    if (0xDB6DB6DB6DB6DB6ELL * ((uint64_t)(v91 - (_QWORD)v42) >> 2) > v58)
                      v58 = 0xDB6DB6DB6DB6DB6ELL * ((uint64_t)(v91 - (_QWORD)v42) >> 2);
                    if ((unint64_t)(0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v91 - (_QWORD)v42) >> 2)) >= 0x492492492492492)
                      v39 = 0x924924924924924;
                    else
                      v39 = v58;
                    if (v39)
                      v39 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<AUSM::ExclusionZone>>(v39);
                    else
                      v57 = 0;
                    v59 = (_DWORD *)(v39 + 4 * ((v43 - v42) >> 2));
                    *v59 = 0;
                    *((float *)v59 + 1) = v53;
                    *((float *)v59 + 2) = v52;
                    v59[3] = v55;
                    *((float *)v59 + 4) = v54;
                    if (v43 == v42)
                    {
                      v62 = (char *)(v39 + 4 * ((v43 - v42) >> 2));
                    }
                    else
                    {
                      v63 = v39 + 4 * ((v43 - v42) >> 2);
                      do
                      {
                        v64 = *(_OWORD *)(v43 - 28);
                        v62 = (char *)(v63 - 28);
                        *(_OWORD *)(v63 - 16) = *((_OWORD *)v43 - 1);
                        *(_OWORD *)(v63 - 28) = v64;
                        v43 -= 28;
                        v63 -= 28;
                      }
                      while (v43 != v42);
                    }
                    goto LABEL_105;
                  }
                  *(_DWORD *)v43 = 0;
                  *((float *)v43 + 1) = v53;
                  *((float *)v43 + 2) = v52;
                  *((_DWORD *)v43 + 3) = v55;
                  *((float *)v43 + 4) = v54;
                  v43 += 28;
                }
LABEL_107:
                v90 = v43;
LABEL_108:
                v42 = v89;
                if (v89 == v43)
                  goto LABEL_117;
                v65 = 0;
                v66 = v89;
                do
                {
                  v68 = *(_DWORD *)v66;
                  v66 += 28;
                  v67 = v68;
                  v69 = v65 + 5;
                  if (v68)
                    v69 = v65;
                  if (v67 == 1)
                    v65 += 7;
                  else
                    v65 = v69;
                }
                while (v66 != v43);
                if (!v65)
LABEL_117:
                  v65 = 0;
                MEMORY[0x1E0C80A78](v39);
                v71 = (char *)&v82 - v70;
                AUSM::ExclusionZone::arrayFromZones(v42, v43, (uint64_t)&v82 - v70);
                v72 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, uint64_t, char *, _QWORD))(**(_QWORD **)(a1 + 40) + 96))(*(_QWORD *)(a1 + 40), 3226, 1, v10, v71, (4 * v65));
                if (v72)
                {
                  if (getAUSMV2Log(void)::onceToken != -1)
                    dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_5474);
                  v73 = (id)getAUSMV2Log(void)::gLog;
                  if (os_log_type_enabled(v73, OS_LOG_TYPE_ERROR))
                  {
                    v76 = v84;
                    if (*(char *)(a1 + 71) < 0)
                      v76 = (_QWORD *)*v84;
                    *(_DWORD *)buf = v83.n128_u32[0];
                    v93 = v76;
                    v94 = 2080;
                    v95 = "ParseDynamicObjectMetadata";
                    v96 = 1024;
                    *(_DWORD *)v97 = v10;
                    *(_WORD *)&v97[4] = 1024;
                    *(_DWORD *)&v97[6] = v72;
                    _os_log_error_impl(&dword_1B5ED0000, v73, OS_LOG_TYPE_ERROR, "[%s|%s] Could not set exclusion zone array on input %u, err = %d", buf, 0x22u);
                  }

                }
                v88 = v72 == 0;
                v39 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, uint64_t, _BOOL4 *, uint64_t))(**(_QWORD **)(a1 + 40) + 96))(*(_QWORD *)(a1 + 40), 3224, 1, v10, &v88, 4);
                v74 = v39;
                if ((_DWORD)v39)
                {
                  if (getAUSMV2Log(void)::onceToken != -1)
                    dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_5474);
                  v75 = (id)getAUSMV2Log(void)::gLog;
                  if (os_log_type_enabled(v75, OS_LOG_TYPE_ERROR))
                  {
                    v77 = v84;
                    if (*(char *)(a1 + 71) < 0)
                      v77 = (_QWORD *)*v84;
                    v78 = "enable";
                    if (!v88)
                      v78 = "disable";
                    *(_DWORD *)buf = v82.n128_u32[0];
                    v93 = v77;
                    v94 = 2080;
                    v95 = "ParseDynamicObjectMetadata";
                    v96 = 2080;
                    *(_QWORD *)v97 = v78;
                    *(_WORD *)&v97[8] = 1024;
                    *(_DWORD *)v98 = v10;
                    *(_WORD *)&v98[4] = 1024;
                    v99[0] = v74;
                    _os_log_error_impl(&dword_1B5ED0000, v75, OS_LOG_TYPE_ERROR, "[%s|%s] Could not %s exclusion zone on input %u, err = %d", buf, 0x2Cu);
                  }

                }
                if (++v44 >= (unint64_t)*((unsigned __int8 *)v26 + 106))
                {
                  if (v42)
                    operator delete(v42);
                  break;
                }
              }
            }
          }
        }
        else
        {
          LODWORD(v89) = 0;
          v79 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, uint64_t, char **, uint64_t))(**(_QWORD **)(a1 + 40)
                                                                                               + 96))(*(_QWORD *)(a1 + 40), 3224, 1, v10, &v89, 4);
          if (v79)
          {
            if (getAUSMV2Log(void)::onceToken != -1)
              dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_5474);
            v80 = (id)getAUSMV2Log(void)::gLog;
            if (os_log_type_enabled(v80, OS_LOG_TYPE_ERROR))
            {
              v81 = v84;
              if (*(char *)(a1 + 71) < 0)
                v81 = (_QWORD *)*v84;
              *(_DWORD *)buf = v83.n128_u32[0];
              v93 = v81;
              v94 = 2080;
              v95 = "ParseDynamicObjectMetadata";
              v96 = 1024;
              *(_DWORD *)v97 = v10;
              *(_WORD *)&v97[4] = 1024;
              *(_DWORD *)&v97[6] = v79;
              _os_log_error_impl(&dword_1B5ED0000, v80, OS_LOG_TYPE_ERROR, "[%s|%s] Could not disable exclusion zone for input %u, err = %d", buf, 0x22u);
            }

          }
        }
      }
      v11 = v87[1];
      v20 = v22;
    }
    while (v22 < v11);
  }
}

void sub_1B64547C4(_Unwind_Exception *exception_object)
{
  void *v1;
  uint64_t v2;

  if (v1)
  {
    *(_QWORD *)(v2 - 224) = v1;
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

void AUVirtualBass::~AUVirtualBass(AUVirtualBass *this)
{
  AUDspLib::~AUDspLib(this);
  JUMPOUT(0x1BCC95CECLL);
}

double AUVirtualBass::GetTailTime(AUVirtualBass *this)
{
  return 0.025;
}

uint64_t AUVirtualBass::Version(AUVirtualBass *this)
{
  return 66818;
}

DspLib::VirtualBass::Algorithm *AUVirtualBass::newDspLibAlgorithm(AUVirtualBass *this)
{
  DspLib::VirtualBass::Algorithm *v1;

  v1 = (DspLib::VirtualBass::Algorithm *)operator new();
  DspLib::VirtualBass::Algorithm::Algorithm(v1);
  return v1;
}

void sub_1B6454878(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1BCC95CEC](v1, 0x10F1C40C0CEA54CLL);
  _Unwind_Resume(a1);
}

void AUVariableEQV2::~AUVariableEQV2(AUVariableEQV2 *this)
{
  AUVariableEQV2::~AUVariableEQV2(this);
  JUMPOUT(0x1BCC95CECLL);
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void **v6;

  *(_QWORD *)this = &off_1E69DD280;
  v2 = *((_QWORD *)this + 72);
  if (v2)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
    *((_QWORD *)this + 72) = 0;
  }
  v3 = *((_QWORD *)this + 73);
  if (v3)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
    *((_QWORD *)this + 73) = 0;
  }
  v6 = (void **)((char *)this + 640);
  std::vector<std::unique_ptr<DspLib::AlgorithmBaseNewParameters>>::__destroy_vector::operator()[abi:ne180100](&v6);
  CADeprecated::CAAutoDelete<ausdk::AUBufferList>::set((_QWORD *)this + 77, 0);
  CADeprecated::CAAutoDelete<ausdk::AUBufferList>::set((_QWORD *)this + 76, 0);
  v4 = *((_QWORD *)this + 73);
  if (v4)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
    *((_QWORD *)this + 73) = 0;
  }
  v5 = *((_QWORD *)this + 72);
  if (v5)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
    *((_QWORD *)this + 72) = 0;
  }
  ausdk::AUBase::~AUBase(this);
}

const void **AUVariableEQV2::CreateExtendedElements(int64x2_t *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  ausdk::AUScope::Initialize(this + 39, (ausdk::AUBase *)this, 4, 5);
  v2 = this[41].i64[1];
  if (v2)
  {
    v3 = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v2 + 32))(v2, 0);
  }
  else
  {
    v4 = (uint64_t *)this[40].i64[0];
    if ((uint64_t *)this[40].i64[1] == v4)
      v3 = 0;
    else
      v3 = *v4;
  }
  ausdk::Owned<__CFString const*>::operator=((const void **)(v3 + 72), CFSTR("EQ1"));
  v5 = this[41].i64[1];
  if (v5)
  {
    v6 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v5 + 32))(v5, 1);
  }
  else
  {
    v7 = this[40].i64[0];
    if ((unint64_t)(this[40].i64[1] - v7) < 9)
      v6 = 0;
    else
      v6 = *(_QWORD *)(v7 + 8);
  }
  ausdk::Owned<__CFString const*>::operator=((const void **)(v6 + 72), CFSTR("EQ2"));
  v8 = this[41].i64[1];
  if (v8)
  {
    v9 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v8 + 32))(v8, 2);
  }
  else
  {
    v10 = this[40].i64[0];
    if ((unint64_t)(this[40].i64[1] - v10) < 0x11)
      v9 = 0;
    else
      v9 = *(_QWORD *)(v10 + 16);
  }
  ausdk::Owned<__CFString const*>::operator=((const void **)(v9 + 72), CFSTR("EQ3"));
  v11 = this[41].i64[1];
  if (v11)
  {
    v12 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v11 + 32))(v11, 3);
  }
  else
  {
    v13 = this[40].i64[0];
    if ((unint64_t)(this[40].i64[1] - v13) < 0x19)
      v12 = 0;
    else
      v12 = *(_QWORD *)(v13 + 24);
  }
  ausdk::Owned<__CFString const*>::operator=((const void **)(v12 + 72), CFSTR("EQ4"));
  v14 = this[41].i64[1];
  if (v14)
  {
    v15 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v14 + 32))(v14, 4);
  }
  else
  {
    v16 = this[40].i64[0];
    if ((unint64_t)(this[40].i64[1] - v16) < 0x21)
      v15 = 0;
    else
      v15 = *(_QWORD *)(v16 + 32);
  }
  return ausdk::Owned<__CFString const*>::operator=((const void **)(v15 + 72), CFSTR("EQ5"));
}

uint64_t AUVariableEQV2::Initialize(AUVariableEQV2 *this)
{
  const AudioStreamBasicDescription *v2;
  const AudioStreamBasicDescription *v3;
  uint64_t result;
  IIRFilterFloat32 *v5;
  IIRFilterFloat32 *v6;
  IIRFilterFloat32 *v7;
  IIRFilterFloat32 *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  ausdk::AUElement *v12;
  ausdk::AUElement **v13;
  float Parameter;
  float v15;

  v2 = (const AudioStreamBasicDescription *)(ausdk::AUScope::SafeGetElement((AUVariableEQV2 *)((char *)this + 80), 0)
                                           + 80);
  v3 = (const AudioStreamBasicDescription *)(ausdk::AUScope::SafeGetElement((AUVariableEQV2 *)((char *)this + 128), 0)
                                           + 80);
  if (memcmp(v2, v3, 0x28uLL))
    return 4294956428;
  v5 = NewIIRFilter(v2, v3, (const CAStreamBasicDescription *)8);
  v6 = (IIRFilterFloat32 *)*((_QWORD *)this + 72);
  if (v6 != v5)
  {
    if (v6)
      (*(void (**)(IIRFilterFloat32 *))(*(_QWORD *)v6 + 8))(v6);
    *((_QWORD *)this + 72) = v5;
  }
  if (!v5)
    return 4294956428;
  v7 = NewIIRFilter(v2, v3, (const CAStreamBasicDescription *)8);
  v8 = (IIRFilterFloat32 *)*((_QWORD *)this + 73);
  if (v8 != v7)
  {
    if (v8)
      (*(void (**)(IIRFilterFloat32 *))(*(_QWORD *)v8 + 8))(v8);
    *((_QWORD *)this + 73) = v7;
  }
  if (!v7)
    return 4294956428;
  *((_QWORD *)this + 74) = *((_QWORD *)this + 72);
  *((_QWORD *)this + 75) = v7;
  v9 = operator new();
  *(_DWORD *)v9 = 0;
  *(_QWORD *)(v9 + 8) = 0;
  *(_QWORD *)(v9 + 16) = 0;
  CADeprecated::CAAutoDelete<ausdk::AUBufferList>::set((_QWORD *)this + 76, v9);
  ausdk::AUBufferList::Allocate(*((ausdk::AUBufferList **)this + 76), v2, *((_DWORD *)this + 84));
  v10 = operator new();
  *(_DWORD *)v10 = 0;
  *(_QWORD *)(v10 + 8) = 0;
  *(_QWORD *)(v10 + 16) = 0;
  CADeprecated::CAAutoDelete<ausdk::AUBufferList>::set((_QWORD *)this + 77, v10);
  ausdk::AUBufferList::Allocate(*((ausdk::AUBufferList **)this + 77), v2, *((_DWORD *)this + 84));
  (*(void (**)(AUVariableEQV2 *, _QWORD, _QWORD))(*(_QWORD *)this + 72))(this, 0, 0);
  *((_DWORD *)this + 135) = *((_DWORD *)this + 134);
  AUVariableEQV2::UpdateVarEQState(this);
  *((_DWORD *)this + 138) = 0;
  *((_BYTE *)this + 573) = 1;
  *((_BYTE *)this + 575) = 0;
  v11 = *((_QWORD *)this + 9);
  if (v11)
  {
    v12 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v11 + 32))(v11, 0);
  }
  else
  {
    v13 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v13)
      v12 = 0;
    else
      v12 = *v13;
  }
  Parameter = ausdk::AUElement::GetParameter(v12, 7u);
  v15 = __exp10f(Parameter / 20.0);
  *((float *)this + 140) = v15;
  *((float *)this + 141) = v15;
  *((_DWORD *)this + 137) = *((_DWORD *)this + 136);
  AUVariableEQV2::UpdateVolumeState(this);
  result = 0;
  *((_BYTE *)this + 672) = 0;
  return result;
}

uint64_t AUVariableEQV2::Cleanup(AUVariableEQV2 *this)
{
  uint64_t v2;
  uint64_t result;

  v2 = *((_QWORD *)this + 72);
  if (v2)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
    *((_QWORD *)this + 72) = 0;
  }
  result = *((_QWORD *)this + 73);
  if (result)
  {
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
    *((_QWORD *)this + 73) = 0;
  }
  return result;
}

uint64_t AUVariableEQV2::Reset(AUVariableEQV2 *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  ausdk::AUElement *v5;
  ausdk::AUElement **v6;
  float Parameter;
  float v8;

  v2 = *((_QWORD *)this + 72);
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 24))(v2);
  v3 = *((_QWORD *)this + 73);
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 24))(v3);
  *((_DWORD *)this + 138) = 0;
  *(_WORD *)((char *)this + 573) = 1;
  *((_BYTE *)this + 575) = 0;
  v4 = *((_QWORD *)this + 9);
  if (v4)
  {
    v5 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v4 + 32))(v4, 0);
  }
  else
  {
    v6 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v6)
      v5 = 0;
    else
      v5 = *v6;
  }
  Parameter = ausdk::AUElement::GetParameter(v5, 7u);
  v8 = __exp10f(Parameter / 20.0);
  *((float *)this + 140) = v8;
  *((float *)this + 141) = v8;
  *((_DWORD *)this + 142) = 0;
  return 0;
}

uint64_t AUVariableEQV2::GetPropertyInfo(AUVariableEQV2 *this, int a2, int a3, unsigned int a4, unsigned int *a5, BOOL *a6)
{
  uint64_t result;

  result = 4294956417;
  if (a2 == 21 && !a3)
  {
    result = 0;
    *a6 = 1;
    *a5 = 4;
  }
  return result;
}

uint64_t AUVariableEQV2::GetProperty(AUVariableEQV2 *this, int a2, int a3, unsigned int a4, _DWORD *a5)
{
  uint64_t result;
  int v8;

  result = 4294956417;
  if (a2 == 21 && !a3)
  {
    v8 = (*(uint64_t (**)(AUVariableEQV2 *))(*(_QWORD *)this + 576))(this);
    result = 0;
    *a5 = v8;
  }
  return result;
}

uint64_t AUVariableEQV2::SetProperty(AUVariableEQV2 *this, int a2, int a3, unsigned int a4, int *a5, unsigned int a6)
{
  uint64_t result;
  int v8;
  int v9;

  result = 4294956417;
  if (a2 == 21 && !a3)
  {
    if (a6 >= 4)
    {
      v8 = *a5;
      v9 = *a5 != 0;
      if (v9 != (*(unsigned int (**)(AUVariableEQV2 *))(*(_QWORD *)this + 576))(this))
        (*(void (**)(AUVariableEQV2 *, BOOL))(*(_QWORD *)this + 584))(this, v8 != 0);
      return 0;
    }
    else
    {
      return 4294956445;
    }
  }
  return result;
}

uint64_t AUVariableEQV2::GetParameter(AUVariableEQV2 *this, unsigned int a2, unsigned int a3, uint64_t a4, float *a5)
{
  unsigned int v6;
  uint64_t v8;
  ausdk::AUElement *Element;
  ausdk::AUScope *Scope;
  uint64_t v12;

  v6 = a4;
  if (a3 == 4)
  {
    v8 = *((_QWORD *)this + 83);
    if (v8)
    {
      Element = (ausdk::AUElement *)(*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)v8 + 32))(*((_QWORD *)this + 83), a4);
    }
    else
    {
      v12 = *((_QWORD *)this + 80);
      if (a4 >= (unint64_t)((*((_QWORD *)this + 81) - v12) >> 3))
        Element = 0;
      else
        Element = *(ausdk::AUElement **)(v12 + 8 * a4);
    }
  }
  else
  {
    Scope = (ausdk::AUScope *)ausdk::AUBase::GetScope(this, a3);
    Element = (ausdk::AUElement *)ausdk::AUScope::SafeGetElement(Scope, v6);
  }
  *a5 = ausdk::AUElement::GetParameter(Element, a2);
  return 0;
}

uint64_t AUVariableEQV2::SetParameter(AUVariableEQV2 *this, unsigned int a2, unsigned int a3, uint64_t a4, float a5)
{
  unsigned int v6;
  uint64_t v9;
  ausdk::AUElement *v10;
  uint64_t v12;
  ausdk::AUElement *v13;
  uint64_t v14;
  ausdk::AUElement **v15;
  char *v16;
  float Parameter;
  ausdk::AUScope *Scope;
  ausdk::AUElement *Element;

  v6 = a4;
  if (a3 == 4)
  {
    v9 = *((_QWORD *)this + 83);
    if (v9)
    {
      v10 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v9 + 32))(v9, a4);
    }
    else
    {
      v14 = *((_QWORD *)this + 80);
      if (a4 >= (unint64_t)((*((_QWORD *)this + 81) - v14) >> 3))
        v10 = 0;
      else
        v10 = *(ausdk::AUElement **)(v14 + 8 * a4);
    }
    ausdk::AUElement::SetParameter(v10, a2, a5, 0);
    v16 = (char *)this + 536;
LABEL_16:
    ++*(_DWORD *)v16;
    return 0;
  }
  v12 = *((_QWORD *)this + 9);
  if (v12)
  {
    v13 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v12 + 32))(v12, 0);
  }
  else
  {
    v15 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v15)
      v13 = 0;
    else
      v13 = *v15;
  }
  Parameter = ausdk::AUElement::GetParameter(v13, a2);
  Scope = (ausdk::AUScope *)ausdk::AUBase::GetScope(this, a3);
  Element = (ausdk::AUElement *)ausdk::AUScope::SafeGetElement(Scope, v6);
  ausdk::AUElement::SetParameter(Element, a2, a5, 0);
  if (Parameter != a5)
  {
    v16 = (char *)this + 536;
    if (a2 == 7)
      v16 = (char *)this + 544;
    goto LABEL_16;
  }
  return 0;
}

uint64_t AUVariableEQV2::CanScheduleParameters(AUVariableEQV2 *this)
{
  return 0;
}

uint64_t AUVariableEQV2::ProcessBufferLists(AUVariableEQV2 *this, unsigned int *a2, const AudioBufferList *a3, AudioBufferList *a4, vDSP_Length __N)
{
  int v9;
  int v10;
  BOOL v11;
  unint64_t v12;
  uint64_t v13;
  UInt32 mDataByteSize;
  float v15;
  uint64_t v16;
  uint64_t mNumberBuffers;
  void **p_mData;
  uint64_t v19;
  float *v20;
  float v21;
  float v22;
  unint64_t v23;
  uint64_t v24;
  ausdk::AUBufferList *v25;
  const AudioStreamBasicDescription *Element;
  AudioBufferList *v27;
  uint64_t v28;
  _DWORD *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t BufferList;
  ausdk::AUBufferList *v33;
  const AudioStreamBasicDescription *v34;
  _DWORD *v35;
  uint64_t v36;
  AudioBufferList *v37;
  uint64_t v38;
  unsigned int *v39;
  unsigned int *v40;
  unsigned int v41;
  unsigned int v42;
  uint64_t v43;
  _DWORD *v44;
  unsigned int v45;
  uint64_t v46;
  float v47;
  float *v48;
  float *mData;
  float v51;
  uint64_t v52;
  float v53;
  unsigned int v54;
  ausdk::AUBufferList *v55;
  const AudioStreamBasicDescription *v56;
  AudioBufferList *v57;
  uint64_t v58;
  float __C;

  v9 = *((_DWORD *)this + 134);
  if (v9 != *((_DWORD *)this + 135) && *((_BYTE *)this + 573))
  {
    AUVariableEQV2::UpdateVarEQState(this);
    *((_DWORD *)this + 135) = v9;
  }
  v10 = *((_DWORD *)this + 136);
  if (v10 != *((_DWORD *)this + 137))
  {
    AUVariableEQV2::UpdateVolumeState(this);
    *((_DWORD *)this + 137) = v10;
  }
  if (*((_BYTE *)this + 575))
    v11 = 1;
  else
    v11 = a3->mNumberBuffers == 0;
  if (!v11)
  {
    v12 = 0;
    v13 = 16;
    while (1)
    {
      __C = 0.0;
      vDSP_svemg(*(const float **)((char *)&a3->mNumberBuffers + v13), 1, &__C, __N);
      if (__C > 0.0)
        break;
      ++v12;
      v13 += 16;
      if (v12 >= a3->mNumberBuffers)
        goto LABEL_15;
    }
    *((_BYTE *)this + 575) = 1;
  }
LABEL_15:
  mDataByteSize = a3->mBuffers[0].mDataByteSize;
  if (mDataByteSize != *(_DWORD *)(ausdk::AUScope::SafeGetElement((AUVariableEQV2 *)((char *)this + 80), 0) + 104)
                      * (_DWORD)__N)
    *((_BYTE *)this + 672) = 1;
  if (((*(uint64_t (**)(AUVariableEQV2 *))(*(_QWORD *)this + 576))(this) & 1) == 0)
  {
    v15 = *((float *)this + 142);
    if (v15 == 0.0)
    {
      if (*((float *)this + 140) != 1.0 && a3->mNumberBuffers)
      {
        v23 = 0;
        v24 = 16;
        do
        {
          vDSP_vsmul(*(const float **)((char *)&a3->mNumberBuffers + v24), 1, (const float *)this + 140, *(float **)((char *)&a3->mNumberBuffers + v24), 1, __N);
          ++v23;
          v24 += 16;
        }
        while (v23 < a3->mNumberBuffers);
      }
    }
    else if ((_DWORD)__N)
    {
      v16 = 0;
      mNumberBuffers = a3->mNumberBuffers;
      do
      {
        p_mData = &a3->mBuffers[0].mData;
        v19 = mNumberBuffers;
        if ((_DWORD)mNumberBuffers)
        {
          do
          {
            v20 = (float *)*p_mData;
            p_mData += 2;
            v20[v16] = *((float *)this + 140) * v20[v16];
            --v19;
          }
          while (v19);
          v15 = *((float *)this + 142);
        }
        v21 = v15 + *((float *)this + 140);
        *((float *)this + 140) = v21;
        if (v15 < 0.0 && (v22 = *((float *)this + 141), v21 <= v22)
          || v15 > 0.0 && (v22 = *((float *)this + 141), v21 >= v22))
        {
          *((_DWORD *)this + 142) = 0;
          *((float *)this + 140) = v22;
          v15 = 0.0;
        }
        ++v16;
      }
      while (v16 != __N);
    }
  }
  v25 = (ausdk::AUBufferList *)*((_QWORD *)this + 76);
  Element = (const AudioStreamBasicDescription *)ausdk::AUScope::SafeGetElement((AUVariableEQV2 *)((char *)this + 80), 0);
  v27 = (AudioBufferList *)ausdk::AUBufferList::PrepareBuffer(v25, Element + 2, __N);
  v28 = ausdk::AUScope::SafeGetElement((AUVariableEQV2 *)((char *)this + 80), 0);
  CopyBufferList(&a3->mNumberBuffers, v27, (*(_DWORD *)(v28 + 104) * __N));
  if (((*(uint64_t (**)(AUVariableEQV2 *))(*(_QWORD *)this + 576))(this) & 1) != 0
    || (v29 = (_DWORD *)*((_QWORD *)this + 74), !v29[4]))
  {
    v30 = ausdk::AUScope::SafeGetElement((AUVariableEQV2 *)((char *)this + 80), 0);
    CopyBufferList(&a3->mNumberBuffers, a4, (*(_DWORD *)(v30 + 104) * __N));
  }
  else
  {
    (*(void (**)(_DWORD *, vDSP_Length, const AudioBufferList *, AudioBufferList *))(*(_QWORD *)v29 + 32))(v29, __N, a3, a4);
  }
  if (*((_BYTE *)this + 572))
  {
    if (*((_BYTE *)this + 573))
    {
      v31 = 576;
      if (*((_QWORD *)this + 74) == *((_QWORD *)this + 72))
        v31 = 584;
      *((_QWORD *)this + 75) = *(_QWORD *)((char *)this + v31);
      if (*((_BYTE *)this + 574))
      {
        BufferList = ausdk::AUBufferList::GetBufferList(*((ausdk::AUBufferList **)this + 77));
        (*(void (**)(_QWORD, _QWORD, uint64_t, uint64_t))(**((_QWORD **)this + 75) + 32))(*((_QWORD *)this + 75), *((unsigned int *)this + 133), BufferList, BufferList);
      }
      *((_BYTE *)this + 573) = 0;
    }
    v33 = (ausdk::AUBufferList *)*((_QWORD *)this + 77);
    v34 = (const AudioStreamBasicDescription *)ausdk::AUScope::SafeGetElement((AUVariableEQV2 *)((char *)this + 80), 0);
    ausdk::AUBufferList::PrepareBuffer(v33, v34 + 2, __N);
    if (((*(uint64_t (**)(AUVariableEQV2 *))(*(_QWORD *)this + 576))(this) & 1) != 0
      || (v35 = (_DWORD *)*((_QWORD *)this + 75), !v35[4]))
    {
      v37 = (AudioBufferList *)ausdk::AUBufferList::GetBufferList(*((ausdk::AUBufferList **)this + 77));
      v38 = ausdk::AUScope::SafeGetElement((AUVariableEQV2 *)((char *)this + 80), 0);
      CopyBufferList(&v27->mNumberBuffers, v37, (*(_DWORD *)(v38 + 104) * __N));
    }
    else
    {
      v36 = ausdk::AUBufferList::GetBufferList(*((ausdk::AUBufferList **)this + 77));
      (*(void (**)(_DWORD *, vDSP_Length, AudioBufferList *, uint64_t))(*(_QWORD *)v35 + 32))(v35, __N, v27, v36);
    }
    v39 = (unsigned int *)ausdk::AUBufferList::GetBufferList(*((ausdk::AUBufferList **)this + 77));
    if (*v39 != a4->mNumberBuffers)
      goto LABEL_73;
    v40 = v39;
    v41 = (*(double *)(ausdk::AUScope::SafeGetElement((AUVariableEQV2 *)((char *)this + 128), 0) + 80)
                       * 0.02);
    if (v41 <= __N)
      v42 = __N;
    else
      v42 = v41;
    v45 = *v40;
    v44 = v40 + 2;
    v43 = v45;
    if (v45)
    {
      v46 = 0;
      v47 = 1.0 / (float)v42;
      do
      {
        v48 = *(float **)&v44[4 * v46 + 2];
        mData = (float *)a4->mBuffers[v46].mData;
        if (v48 != mData && (_DWORD)__N != 0)
        {
          v51 = v47 * (float)*((unsigned int *)this + 138);
          v52 = __N;
          do
          {
            v53 = *v48++;
            *mData = (float)((float)(1.0 - v51) * *mData) + (float)(v51 * v53);
            ++mData;
            v51 = v47 + v51;
            if (v51 >= 1.0)
              v51 = 1.0;
            --v52;
          }
          while (v52);
        }
        ++v46;
      }
      while (v46 != v43);
    }
    v54 = *((_DWORD *)this + 138) + __N;
    *((_DWORD *)this + 138) = v54;
    if (v54 >= v41)
    {
      *((_BYTE *)this + 573) = 1;
      *((_DWORD *)this + 138) = 0;
    }
    else
    {
LABEL_73:
      if (!*((_BYTE *)this + 573))
        goto LABEL_70;
    }
    *((_QWORD *)this + 74) = *((_QWORD *)this + 75);
    *((_BYTE *)this + 572) = 0;
  }
LABEL_70:
  v55 = (ausdk::AUBufferList *)*((_QWORD *)this + 77);
  v56 = (const AudioStreamBasicDescription *)ausdk::AUScope::SafeGetElement((AUVariableEQV2 *)((char *)this + 80), 0);
  v57 = (AudioBufferList *)ausdk::AUBufferList::PrepareBuffer(v55, v56 + 2, __N);
  v58 = ausdk::AUScope::SafeGetElement((AUVariableEQV2 *)((char *)this + 80), 0);
  CopyBufferList(&v27->mNumberBuffers, v57, (*(_DWORD *)(v58 + 104) * __N));
  *((_DWORD *)this + 133) = __N;
  *((_BYTE *)this + 574) = 1;
  return 0;
}

uint64_t AUVariableEQV2::Render(AUVariableEQV2 *this, unsigned int *a2, const AudioTimeStamp *a3, uint64_t a4)
{
  ausdk::AUScope *v8;
  ausdk::AUInputElement *Element;
  uint64_t result;
  uint64_t v11;
  uint64_t BufferList;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;

  v15 = 0;
  v8 = (AUVariableEQV2 *)((char *)this + 80);
  Element = (ausdk::AUInputElement *)ausdk::AUScope::SafeGetElement((AUVariableEQV2 *)((char *)this + 80), 0);
  result = ausdk::AUInputElement::PullInput(Element, &v15, a3, 0, a4);
  if (!(_DWORD)result)
  {
    v11 = ausdk::AUScope::SafeGetElement(v8, 0);
    BufferList = ausdk::AUBufferList::GetBufferList((ausdk::AUBufferList *)(v11 + 144));
    v13 = ausdk::AUScope::SafeGetElement((AUVariableEQV2 *)((char *)this + 128), 0);
    v14 = ausdk::AUBufferList::GetBufferList((ausdk::AUBufferList *)(v13 + 144));
    return (*(uint64_t (**)(AUVariableEQV2 *, unsigned int *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)this
                                                                                                  + 176))(this, a2, BufferList, v14, a4);
  }
  return result;
}

uint64_t AUVariableEQV2::GetParameterList(AUVariableEQV2 *this, int a2, unsigned int *a3, unsigned int *a4)
{
  unsigned int v4;
  unsigned int i;
  unsigned int v6;
  unsigned int *v7;
  uint64_t result;

  if (a2 == 4)
  {
    if (a3)
      *a3 = 0;
    v6 = 0;
    v7 = a3 + 5;
    do
    {
      if (a3)
      {
        *((int32x4_t *)v7 - 1) = vaddq_s32(vdupq_n_s32(v6), (int32x4_t)xmmword_1B66A24C0);
        *v7 = v6 + 5000;
      }
      ++v6;
      v7 += 5;
    }
    while (v6 != 8);
    v4 = 41;
    goto LABEL_17;
  }
  if (!a2)
  {
    v4 = 0;
    for (i = 1; i != 8; ++i)
    {
      if (i != 6)
      {
        if (a3)
          a3[v4] = i;
        ++v4;
      }
    }
LABEL_17:
    result = 0;
    *a4 = v4;
    return result;
  }
  return 4294956430;
}

uint64_t AUVariableEQV2::GetParameterInfo(AUVariableEQV2 *this, int a2, unsigned int a3, AudioUnitParameterInfo *buffer)
{
  uint64_t result;
  AudioUnitParameterOptions v6;
  AudioUnitParameterValue v7;
  unsigned int v9;
  AudioUnitParameterOptions v10;
  uint64_t v11;
  UInt32 v12;
  AudioUnitParameterOptions flags;
  AudioUnitParameterValue v14;
  AudioUnitParameterOptions v15;
  uint64_t v16;
  AudioUnitParameterValue v17;
  AudioUnitParameterOptions v18;
  uint64_t Element;
  AudioUnitParameterValue v20;
  AudioUnitParameterOptions v21;

  buffer->flags = 1207959552;
  buffer->unitName = 0;
  if (a2 == 4)
  {
    if (!a3)
    {
      buffer->cfNameString = CFSTR("global gain");
      CFStringGetCString(CFSTR("global gain"), buffer->name, 52, 0x8000100u);
      result = 0;
      v10 = buffer->flags | 0x80000000;
      buffer->unit = kAudioUnitParameterUnit_Generic;
      v11 = 0x41C00000C2C00000;
LABEL_27:
      *(_QWORD *)&buffer->minValue = v11;
      buffer->defaultValue = 0.0;
      buffer->flags = v10;
      return result;
    }
    if (a3 >= 0x3E8)
    {
      v9 = a3 % 0x3E8;
      if (a3 % 0x3E8 > 7)
        return 4294956418;
      a3 = 1000 * (a3 / 0x3E8);
    }
    else
    {
      v9 = 0;
    }
    v12 = v9 + 1;
    result = 4294956418;
    if ((int)a3 <= 2999)
    {
      if (a3 == 1000)
      {
        buffer->cfNameString = CFSTR("bypass");
        CFStringGetCString(CFSTR("bypass"), buffer->name, 52, 0x8000100u);
        result = 0;
        buffer->clumpID = v12;
        flags = buffer->flags;
        buffer->unit = kAudioUnitParameterUnit_Boolean;
        *(_QWORD *)&buffer->minValue = 0x3F80000000000000;
        v14 = 1.0;
LABEL_33:
        v21 = flags | 0xC0100000;
        buffer->defaultValue = v14;
        goto LABEL_34;
      }
      if (a3 != 2000)
        return result;
      buffer->cfNameString = CFSTR("type");
      CFStringGetCString(CFSTR("type"), buffer->name, 52, 0x8000100u);
      result = 0;
      buffer->clumpID = v12;
      v15 = buffer->flags;
      buffer->unit = kAudioUnitParameterUnit_Indexed;
      v16 = 0x4120000000000000;
    }
    else
    {
      if (a3 == 3000)
      {
        buffer->cfNameString = CFSTR("frequency");
        CFStringGetCString(CFSTR("frequency"), buffer->name, 52, 0x8000100u);
        buffer->clumpID = v12;
        buffer->flags |= 0x100000u;
        *(_QWORD *)&buffer->unit = 0x4220000000000008;
        Element = ausdk::AUScope::SafeGetElement((AUVariableEQV2 *)((char *)this + 128), 0);
        result = 0;
        v20 = *(double *)(Element + 80) * 0.49000001;
        buffer->maxValue = v20;
        v17 = 1000.0;
        v18 = buffer->flags | 0xC0000000;
LABEL_29:
        buffer->defaultValue = v17;
        buffer->flags = v18;
        return result;
      }
      if (a3 != 4000)
      {
        if (a3 != 5000)
          return result;
        buffer->cfNameString = CFSTR("bandwidth");
        CFStringGetCString(CFSTR("bandwidth"), buffer->name, 52, 0x8000100u);
        result = 0;
        buffer->clumpID = v12;
        flags = buffer->flags;
        buffer->unit = kAudioUnitParameterUnit_Octaves;
        *(_QWORD *)&buffer->minValue = 0x40A000003D4CCCCDLL;
        v14 = 0.5;
        goto LABEL_33;
      }
      buffer->cfNameString = CFSTR("gain");
      CFStringGetCString(CFSTR("gain"), buffer->name, 52, 0x8000100u);
      result = 0;
      buffer->clumpID = v12;
      v15 = buffer->flags;
      buffer->unit = kAudioUnitParameterUnit_Decibels;
      v16 = 0x41C00000C2C00000;
    }
    *(_QWORD *)&buffer->minValue = v16;
    v21 = v15 | 0xC0100000;
    buffer->defaultValue = 0.0;
LABEL_34:
    buffer->flags = v21;
    return result;
  }
  if (a2)
    return 4294956418;
  switch(a3)
  {
    case 1u:
      buffer->cfNameString = CFSTR("Max Gain for EQ1");
      CFStringGetCString(CFSTR("Max Gain for EQ1"), buffer->name, 52, 0x8000100u);
      result = 0;
      v6 = buffer->flags | 0x80000000;
      buffer->unit = kAudioUnitParameterUnit_Generic;
      *(_QWORD *)&buffer->minValue = 0x3F80000000000000;
      v7 = 0.2;
      break;
    case 2u:
      buffer->cfNameString = CFSTR("Max Gain for EQ2");
      CFStringGetCString(CFSTR("Max Gain for EQ2"), buffer->name, 52, 0x8000100u);
      result = 0;
      v6 = buffer->flags | 0x80000000;
      buffer->unit = kAudioUnitParameterUnit_Generic;
      *(_QWORD *)&buffer->minValue = 0x3F80000000000000;
      v7 = 0.5;
      break;
    case 3u:
      buffer->cfNameString = CFSTR("Max Gain for EQ3");
      CFStringGetCString(CFSTR("Max Gain for EQ3"), buffer->name, 52, 0x8000100u);
      result = 0;
      v6 = buffer->flags | 0x80000000;
      buffer->unit = kAudioUnitParameterUnit_Generic;
      *(_QWORD *)&buffer->minValue = 0x3F80000000000000;
      v7 = 0.8;
      break;
    case 4u:
      buffer->cfNameString = CFSTR("Max Gain for EQ4");
      CFStringGetCString(CFSTR("Max Gain for EQ4"), buffer->name, 52, 0x8000100u);
      result = 0;
      v6 = buffer->flags | 0x80000000;
      buffer->unit = kAudioUnitParameterUnit_Generic;
      *(_QWORD *)&buffer->minValue = 0x3F80000000000000;
      v7 = 0.9;
      break;
    case 5u:
      buffer->cfNameString = CFSTR("Current Gain");
      CFStringGetCString(CFSTR("Current Gain"), buffer->name, 52, 0x8000100u);
      result = 0;
      v6 = buffer->flags | 0x8000;
      buffer->unit = kAudioUnitParameterUnit_Generic;
      *(_QWORD *)&buffer->minValue = 0x3F80000000000000;
      v7 = 1.0;
      break;
    case 6u:
      buffer->cfNameString = CFSTR("Noise SPL");
      CFStringGetCString(CFSTR("Noise SPL"), buffer->name, 52, 0x8000100u);
      result = 0;
      buffer->unit = kAudioUnitParameterUnit_Generic;
      *(_QWORD *)&buffer->minValue = 0x42C8000000000000;
      v17 = 40.0;
      v18 = buffer->flags | 0x40008000;
      goto LABEL_29;
    case 7u:
      buffer->cfNameString = CFSTR("PreGain (dB)");
      CFStringGetCString(CFSTR("PreGain (dB)"), buffer->name, 52, 0x8000100u);
      result = 0;
      v10 = buffer->flags | 0x8000;
      buffer->unit = kAudioUnitParameterUnit_Generic;
      v11 = 0x41400000C2C00000;
      goto LABEL_27;
    default:
      return 4294956418;
  }
  buffer->defaultValue = v7;
  buffer->flags = v6;
  return result;
}

UInt8 *AUVariableEQV2::SaveExtendedScopes(AUVariableEQV2 *this, __CFData *a2)
{
  ausdk::AUScope *Scope;

  Scope = (ausdk::AUScope *)ausdk::AUBase::GetScope(this, 4u);
  return ausdk::AUScope::SaveState(Scope, a2);
}

uint64_t AUVariableEQV2::RestoreState(AUVariableEQV2 *this, const void *a2)
{
  uint64_t v4;
  ausdk::AUElement *v5;
  ausdk::AUElement **v6;
  float Parameter;
  uint64_t v8;
  ausdk::AUElement *v9;
  ausdk::AUElement **v10;
  float v11;
  uint64_t v12;

  v4 = *((_QWORD *)this + 9);
  if (v4)
  {
    v5 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v4 + 32))(v4, 0);
  }
  else
  {
    v6 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v6)
      v5 = 0;
    else
      v5 = *v6;
  }
  Parameter = ausdk::AUElement::GetParameter(v5, 5u);
  v8 = *((_QWORD *)this + 9);
  if (v8)
  {
    v9 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v8 + 32))(v8, 0);
  }
  else
  {
    v10 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v10)
      v9 = 0;
    else
      v9 = *v10;
  }
  v11 = ausdk::AUElement::GetParameter(v9, 7u);
  v12 = ausdk::AUBase::RestoreState((OpaqueAudioComponentInstance **)this, a2);
  if (!(_DWORD)v12)
  {
    ++*((_DWORD *)this + 134);
    ++*((_DWORD *)this + 136);
    (*(void (**)(AUVariableEQV2 *, uint64_t, _QWORD, _QWORD, _QWORD, float))(*(_QWORD *)this + 152))(this, 5, 0, 0, 0, Parameter);
    (*(void (**)(AUVariableEQV2 *, uint64_t, _QWORD, _QWORD, _QWORD, float))(*(_QWORD *)this + 152))(this, 7, 0, 0, 0, v11);
  }
  return v12;
}

uint64_t AUVariableEQV2::GetParameterValueStrings(AUVariableEQV2 *this, int a2, unsigned int a3, const __CFArray **a4)
{
  uint64_t result;
  const __CFArray *v6;
  const void *v7[12];

  v7[11] = *(const void **)MEMORY[0x1E0C80C00];
  result = 4294956418;
  if (a2 == 4 && a3 >= 0x3E8 && a3 % 0x3E8 <= 7 && 1000 * (a3 / 0x3E8) == 2000)
  {
    if (a4)
    {
      v7[0] = CFSTR("Parametric");
      v7[1] = CFSTR("Butterworth Low Pass");
      v7[2] = CFSTR("Butterworth High Pass");
      v7[3] = CFSTR("Resonant Low Pass");
      v7[4] = CFSTR("Resonant High Pass");
      v7[5] = CFSTR("Band Pass");
      v7[6] = CFSTR("Band Stop");
      v7[7] = CFSTR("Low Shelf");
      v7[8] = CFSTR("High Shelf");
      v7[9] = CFSTR("Resonant Low Shelf");
      v7[10] = CFSTR("Resonant High Shelf");
      v6 = CFArrayCreate(0, v7, 11, 0);
      result = 0;
      *a4 = v6;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

double AUVariableEQV2::GetLatency(AUVariableEQV2 *this)
{
  return 0.0;
}

double AUVariableEQV2::GetTailTime(AUVariableEQV2 *this)
{
  return 0.0;
}

uint64_t AUVariableEQV2::SupportsTail(AUVariableEQV2 *this)
{
  return 1;
}

BOOL AUVariableEQV2::StreamFormatWritable(AUVariableEQV2 *this)
{
  return *((_BYTE *)this + 17) == 0;
}

uint64_t AUVariableEQV2::SupportedNumChannels(AUVariableEQV2 *this, const AUChannelInfo **a2)
{
  if (a2)
    *a2 = (const AUChannelInfo *)&AUVariableEQV2::SupportedNumChannels(AUChannelInfo const**)::sSupportedChannelConfigs;
  return 1;
}

uint64_t AUVariableEQV2::GetScopeExtended(AUVariableEQV2 *this, int a2)
{
  if (a2 == 4)
    return (uint64_t)this + 624;
  else
    return 0;
}

uint64_t AUVariableEQV2::ShouldBypassEffect(AUVariableEQV2 *this)
{
  return *((unsigned __int8 *)this + 528);
}

uint64_t AUVariableEQV2::SetBypassEffect(uint64_t this, char a2)
{
  *(_BYTE *)(this + 528) = a2;
  return this;
}

uint64_t AUVariableEQV2::UpdateVarEQState(AUVariableEQV2 *this)
{
  uint64_t v2;
  ausdk::AUElement *v3;
  ausdk::AUElement **v4;
  float Parameter;
  uint64_t v6;
  _QWORD *v7;
  float64x2_t *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  float v12;
  uint64_t v13;
  ausdk::AUElement *v14;
  ausdk::AUElement **v15;
  int v16;
  float v17;
  uint64_t v18;
  ausdk::AUElement *v19;
  ausdk::AUElement **v20;
  unint64_t v21;
  uint64_t v22;
  ausdk::AUElement *v23;
  uint64_t v24;
  uint64_t (*v25)(void);
  uint64_t v26;
  ausdk::AUElement *v27;
  ausdk::AUElement **v28;
  ausdk::AUElement **v29;
  uint64_t v30;
  float v31;
  float v32;
  float v33;
  uint64_t v34;
  ausdk::AUElement *v35;
  ausdk::AUElement **v36;
  float v37;
  float v38;
  uint64_t v39;
  ausdk::AUElement *v40;
  uint64_t v41;
  float v42;
  float v43;
  uint64_t v44;
  ausdk::AUElement *v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  float64x2_t *v49;
  uint64_t v50;
  ausdk::AUElement *v51;
  uint64_t v52;
  float v53;
  uint64_t v54;
  ausdk::AUElement *v55;
  uint64_t v56;
  float v57;
  uint64_t v58;
  ausdk::AUElement *v59;
  uint64_t v60;
  float v61;
  uint64_t v62;
  ausdk::AUElement *v63;
  uint64_t v64;
  int v65;
  unsigned int v66;
  BOOL v68;
  BOOL v69;
  char v70;
  char v71;
  BOOL v72;
  uint64_t v73;
  ausdk::AUElement *v74;
  uint64_t v75;
  ausdk::AUElement *v76;
  BOOL v77;
  uint64_t v78;
  ausdk::AUElement *v79;
  uint64_t v80;
  BOOL v81;
  uint64_t v82;
  ausdk::AUElement *v83;
  float v84;
  uint64_t v85;
  ausdk::AUElement *v86;
  uint64_t v87;
  float v88;
  uint64_t v89;
  ausdk::AUElement *v90;
  uint64_t v91;
  float v92;
  uint64_t v93;
  ausdk::AUElement *v94;
  uint64_t v95;
  float v96;
  uint64_t v97;
  ausdk::AUElement *v98;
  uint64_t v99;
  float v100;
  uint64_t v101;
  ausdk::AUElement *v102;
  uint64_t v103;
  float v104;
  float v105;
  float v106;
  float v107;
  uint64_t v108;
  ausdk::AUElement *v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  ausdk::AUElement *v113;
  float v114;
  uint64_t v115;
  ausdk::AUElement *v116;
  uint64_t v117;
  float v118;
  uint64_t v119;
  ausdk::AUElement *v120;
  uint64_t v121;
  float v122;
  float v123;
  AUVariableEQV2 *v124;
  uint64_t v125;
  unsigned int v126;
  float v127;
  int v128;
  float v129;
  uint64_t v130;
  BOOL v131;
  uint64_t v132;
  ausdk::AUElement *v133;
  float v134;
  uint64_t v135;
  ausdk::AUElement *v136;
  uint64_t v137;
  float v138;
  uint64_t v139;
  ausdk::AUElement *v140;
  uint64_t v141;
  __int128 v142;
  double v143;
  double v144;
  long double v145;
  long double v146;
  double v147;
  long double v148;
  long double v149;
  double v150;
  double v151;
  long double v152;
  long double v153;
  double v154;
  long double v155;
  double v156;
  double v157;
  double v158;
  double v159;
  double v160;
  double v161;
  double v162;
  double v163;
  double v164;
  double v165;
  double v166;
  float64_t v167;
  uint64_t v168;
  float v169;
  uint64_t v170;
  ausdk::AUElement *v171;
  uint64_t v172;
  float v173;
  uint64_t v174;
  ausdk::AUElement *v175;
  uint64_t v176;
  float v177;
  float v178;
  uint64_t v179;
  ausdk::AUElement *v180;
  uint64_t v181;
  uint64_t v182;
  ausdk::AUElement *v183;
  uint64_t v184;
  uint64_t v186;
  uint64_t v187;
  float v188;
  uint64_t v189;
  ausdk::AUElement *v190;
  uint64_t v191;
  float v192;
  uint64_t v193;
  ausdk::AUElement *v194;
  uint64_t v195;
  float v196;
  uint64_t v197;
  ausdk::AUElement *v198;
  uint64_t v199;
  uint64_t v200;
  ausdk::AUElement *v201;
  uint64_t v202;
  float v203;
  __n128 v204;
  uint64_t v205;
  char *v206;
  double v208;
  float64x2_t v209;
  double v210;
  double v211;
  ausdk::AUScope *v212;
  double v213;
  unint64_t v214;
  long double v215;
  long double v216;
  long double v217;
  long double v218;
  long double v219;
  long double v220;
  _OWORD __src[21];

  v2 = *((_QWORD *)this + 9);
  if (v2)
  {
    v3 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v2 + 32))(v2, 0);
  }
  else
  {
    v4 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v4)
      v3 = 0;
    else
      v3 = *v4;
  }
  Parameter = ausdk::AUElement::GetParameter(v3, 5u);
  if (*((float *)this + 139) != Parameter)
  {
    if (*((_BYTE *)this + 17) && *((_BYTE *)this + 575))
      *((_BYTE *)this + 572) = 1;
    *((float *)this + 139) = Parameter;
  }
  v6 = 0;
  memset(__src, 0, 320);
  do
  {
    v7 = (_QWORD *)((char *)__src + v6);
    *v7 = 0;
    v7[1] = 0;
    v7[3] = 0;
    v7[4] = 0;
    v6 += 40;
    v7[2] = 0x3FF0000000000000;
  }
  while (v6 != 320);
  v8 = (float64x2_t *)((char *)this + 680);
  memcpy((char *)this + 680, __src, 0x140uLL);
  v9 = 0;
  memset(__src, 0, 320);
  do
  {
    v10 = (_QWORD *)((char *)__src + v9);
    *v10 = 0;
    v10[1] = 0;
    v10[3] = 0;
    v10[4] = 0;
    v9 += 40;
    v10[2] = 0x3FF0000000000000;
  }
  while (v9 != 320);
  memcpy((char *)this + 1000, __src, 0x140uLL);
  v11 = 0;
  do
  {
    v12 = *((float *)this + 139);
    v13 = *((_QWORD *)this + 9);
    if (v13)
    {
      v14 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v13 + 32))(v13, 0);
    }
    else
    {
      v15 = (ausdk::AUElement **)*((_QWORD *)this + 6);
      if (*((ausdk::AUElement ***)this + 7) == v15)
        v14 = 0;
      else
        v14 = *v15;
    }
    v16 = v11 + 1;
    if (v12 <= ausdk::AUElement::GetParameter(v14, v11 + 1))
      break;
    v11 = (v11 + 1);
  }
  while (v16 != 4);
  v17 = *((float *)this + 139);
  v18 = *((_QWORD *)this + 9);
  if (v18)
  {
    v19 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v18 + 32))(v18, 0);
  }
  else
  {
    v20 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v20)
      v19 = 0;
    else
      v19 = *v20;
  }
  if (v17 <= ausdk::AUElement::GetParameter(v19, 1u))
  {
    AUVariableEQV2::SetCoefficients(this, (uint64_t)this + 680, 0);
    v24 = *((_QWORD *)this + 83);
    if (v24)
    {
      v25 = *(uint64_t (**)(void))(*(_QWORD *)v24 + 32);
LABEL_36:
      v27 = (ausdk::AUElement *)v25();
LABEL_44:
      v31 = ausdk::AUElement::GetParameter(v27, 0);
      goto LABEL_262;
    }
    v28 = (ausdk::AUElement **)*((_QWORD *)this + 80);
    if (*((ausdk::AUElement ***)this + 81) != v28)
    {
      v27 = *v28;
      goto LABEL_44;
    }
LABEL_43:
    v27 = 0;
    goto LABEL_44;
  }
  if (*((float *)this + 139) >= 1.0)
  {
    AUVariableEQV2::SetCoefficients(this, (uint64_t)this + 680, 4);
    v26 = *((_QWORD *)this + 83);
    if (v26)
    {
      v25 = *(uint64_t (**)(void))(*(_QWORD *)v26 + 32);
      goto LABEL_36;
    }
    v30 = *((_QWORD *)this + 80);
    if ((unint64_t)(*((_QWORD *)this + 81) - v30) >= 0x21)
    {
      v27 = *(ausdk::AUElement **)(v30 + 32);
      goto LABEL_44;
    }
    goto LABEL_43;
  }
  v21 = (v11 - 1);
  AUVariableEQV2::SetCoefficients(this, (uint64_t)this + 680, v21);
  AUVariableEQV2::SetCoefficients(this, (uint64_t)this + 1000, v11);
  v22 = *((_QWORD *)this + 9);
  if (v22)
  {
    v23 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v22 + 32))(v22, 0);
  }
  else
  {
    v29 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v29)
      v23 = 0;
    else
      v23 = *v29;
  }
  v32 = ausdk::AUElement::GetParameter(v23, v11);
  v33 = 1.0;
  if (v11 <= 3)
  {
    v34 = *((_QWORD *)this + 9);
    if (v34)
    {
      v35 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD, float))(*(_QWORD *)v34 + 32))(v34, 0, 1.0);
    }
    else
    {
      v36 = (ausdk::AUElement **)*((_QWORD *)this + 6);
      if (*((ausdk::AUElement ***)this + 7) == v36)
        v35 = 0;
      else
        v35 = *v36;
    }
    v33 = ausdk::AUElement::GetParameter(v35, v11 + 1);
  }
  v37 = *((float *)this + 139) - v32;
  v38 = v33 - v32;
  v39 = *((_QWORD *)this + 83);
  if (v39)
  {
    v40 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v39 + 32))(v39, (v11 - 1));
  }
  else
  {
    v41 = *((_QWORD *)this + 80);
    if (v21 >= (*((_QWORD *)this + 81) - v41) >> 3)
      v40 = 0;
    else
      v40 = *(ausdk::AUElement **)(v41 + 8 * v21);
  }
  v42 = v37 / v38;
  v43 = ausdk::AUElement::GetParameter(v40, 0);
  v44 = *((_QWORD *)this + 83);
  if (v44)
  {
    v45 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v44 + 32))(v44, v11);
    v46 = v11;
  }
  else
  {
    v46 = v11;
    v47 = *((_QWORD *)this + 80);
    if (v11 >= (unint64_t)((*((_QWORD *)this + 81) - v47) >> 3))
      v45 = 0;
    else
      v45 = *(ausdk::AUElement **)(v47 + 8 * v11);
  }
  v211 = v42;
  v210 = (float)(v42 * ausdk::AUElement::GetParameter(v45, 0));
  v213 = 1.0 - v42;
  v209 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v213, 0);
  v212 = (AUVariableEQV2 *)((char *)this + 128);
  v48 = -8;
  v49 = (float64x2_t *)((char *)this + 680);
  v214 = v46;
  do
  {
    v50 = *((_QWORD *)this + 83);
    if (v50)
    {
      v51 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v50 + 32))(v50, (v11 - 1));
    }
    else
    {
      v52 = *((_QWORD *)this + 80);
      if (v21 >= (*((_QWORD *)this + 81) - v52) >> 3)
        v51 = 0;
      else
        v51 = *(ausdk::AUElement **)(v52 + 8 * v21);
    }
    v53 = ausdk::AUElement::GetParameter(v51, v48 + 1008);
    v54 = *((_QWORD *)this + 83);
    if (v54)
    {
      v55 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v54 + 32))(v54, v11);
    }
    else
    {
      v56 = *((_QWORD *)this + 80);
      if (v46 >= (*((_QWORD *)this + 81) - v56) >> 3)
        v55 = 0;
      else
        v55 = *(ausdk::AUElement **)(v56 + 8 * v46);
    }
    v57 = ausdk::AUElement::GetParameter(v55, v48 + 1008);
    v58 = *((_QWORD *)this + 83);
    if (v58)
    {
      v59 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v58 + 32))(v58, (v11 - 1));
    }
    else
    {
      v60 = *((_QWORD *)this + 80);
      if (v21 >= (*((_QWORD *)this + 81) - v60) >> 3)
        v59 = 0;
      else
        v59 = *(ausdk::AUElement **)(v60 + 8 * v21);
    }
    v61 = ausdk::AUElement::GetParameter(v59, v48 + 2008);
    v62 = *((_QWORD *)this + 83);
    if (v62)
    {
      v63 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v62 + 32))(v62, v11);
    }
    else
    {
      v64 = *((_QWORD *)this + 80);
      if (v46 >= (*((_QWORD *)this + 81) - v64) >> 3)
        v63 = 0;
      else
        v63 = *(ausdk::AUElement **)(v64 + 8 * v46);
    }
    v65 = v61;
    v66 = ausdk::AUElement::GetParameter(v63, v48 + 2008);
    if (v61 != v66 || v53 != v57)
    {
      v68 = v53 == 0.0;
      if (v57 != 0.0)
        v68 = 1;
      if (!v68 && (v66 - 7 >= 4 ? (v77 = v66 == 0) : (v77 = 1), v77))
      {
        v78 = *((_QWORD *)this + 83);
        if (v78)
        {
          v79 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v78 + 32))(v78, v11);
        }
        else
        {
          v110 = *((_QWORD *)this + 80);
          if (v46 >= (*((_QWORD *)this + 81) - v110) >> 3)
            v79 = 0;
          else
            v79 = *(ausdk::AUElement **)(v110 + 8 * v46);
        }
        v114 = ausdk::AUElement::GetParameter(v79, v48 + 3008);
        v115 = *((_QWORD *)this + 83);
        if (v115)
        {
          v116 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v115 + 32))(v115, v11);
        }
        else
        {
          v117 = *((_QWORD *)this + 80);
          if (v46 >= (*((_QWORD *)this + 81) - v117) >> 3)
            v116 = 0;
          else
            v116 = *(ausdk::AUElement **)(v117 + 8 * v46);
        }
        v118 = ausdk::AUElement::GetParameter(v116, v48 + 4008);
        v119 = *((_QWORD *)this + 83);
        if (v119)
        {
          v120 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v119 + 32))(v119, v11);
        }
        else
        {
          v121 = *((_QWORD *)this + 80);
          if (v46 >= (*((_QWORD *)this + 81) - v121) >> 3)
            v120 = 0;
          else
            v120 = *(ausdk::AUElement **)(v121 + 8 * v46);
        }
        v122 = ausdk::AUElement::GetParameter(v120, v48 + 5008);
        v123 = v42 * v118;
        v124 = this;
        v125 = (uint64_t)v8;
        v126 = v48 + 8;
        v127 = v57;
        v128 = v66;
        v129 = v114;
      }
      else
      {
        v69 = v57 == 0.0;
        if (v53 != 0.0)
          v69 = 1;
        if (!v69 && ((v65 - 7) >= 4 ? (v81 = v65 == 0) : (v81 = 1), v81))
        {
          v82 = *((_QWORD *)this + 83);
          if (v82)
          {
            v83 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v82 + 32))(v82, (v11 - 1));
          }
          else
          {
            v111 = *((_QWORD *)this + 80);
            if (v21 >= (*((_QWORD *)this + 81) - v111) >> 3)
              v83 = 0;
            else
              v83 = *(ausdk::AUElement **)(v111 + 8 * v21);
          }
          v134 = ausdk::AUElement::GetParameter(v83, v48 + 3008);
          v135 = *((_QWORD *)this + 83);
          if (v135)
          {
            v136 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v135 + 32))(v135, (v11 - 1));
          }
          else
          {
            v137 = *((_QWORD *)this + 80);
            if (v21 >= (*((_QWORD *)this + 81) - v137) >> 3)
              v136 = 0;
            else
              v136 = *(ausdk::AUElement **)(v137 + 8 * v21);
          }
          v138 = ausdk::AUElement::GetParameter(v136, v48 + 4008);
          v139 = *((_QWORD *)this + 83);
          if (v139)
          {
            v140 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v139 + 32))(v139, (v11 - 1));
          }
          else
          {
            v141 = *((_QWORD *)this + 80);
            if (v21 >= (*((_QWORD *)this + 81) - v141) >> 3)
              v140 = 0;
            else
              v140 = *(ausdk::AUElement **)(v141 + 8 * v21);
          }
          v122 = ausdk::AUElement::GetParameter(v140, v48 + 5008);
          v123 = v213 * v138;
          v124 = this;
          v125 = (uint64_t)v8;
          v126 = v48 + 8;
          v127 = v53;
          v128 = v65;
          v129 = v134;
        }
        else
        {
          v70 = (v66 & 0xFFFFFFFD) != 1 || v68;
          if ((v70 & 1) != 0)
          {
            v71 = (v65 & 0xFFFFFFFD) != 1 || v69;
            if ((v71 & 1) != 0)
            {
              if (!v68 && (v66 != 4 ? (v72 = v66 == 2) : (v72 = 1), v72))
              {
                v73 = *((_QWORD *)this + 83);
                if (v73)
                {
                  v74 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v73 + 32))(v73, v11);
                }
                else
                {
                  v186 = *((_QWORD *)this + 80);
                  if (v46 >= (*((_QWORD *)this + 81) - v186) >> 3)
                    v74 = 0;
                  else
                    v74 = *(ausdk::AUElement **)(v186 + 8 * v46);
                }
                v188 = ausdk::AUElement::GetParameter(v74, v48 + 3008);
                v189 = *((_QWORD *)this + 83);
                if (v189)
                {
                  v190 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v189 + 32))(v189, v11);
                }
                else
                {
                  v191 = *((_QWORD *)this + 80);
                  if (v46 >= (*((_QWORD *)this + 81) - v191) >> 3)
                    v190 = 0;
                  else
                    v190 = *(ausdk::AUElement **)(v191 + 8 * v46);
                }
                v192 = ausdk::AUElement::GetParameter(v190, v48 + 4008);
                v193 = *((_QWORD *)this + 83);
                if (v193)
                {
                  v194 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v193 + 32))(v193, v11);
                }
                else
                {
                  v195 = *((_QWORD *)this + 80);
                  if (v46 >= (*((_QWORD *)this + 81) - v195) >> 3)
                    v194 = 0;
                  else
                    v194 = *(ausdk::AUElement **)(v195 + 8 * v46);
                }
                v122 = ausdk::AUElement::GetParameter(v194, v48 + 5008);
                v129 = 40.0;
                if ((float)(v42 * v188) >= 40.0)
                  v129 = v42 * v188;
                v124 = this;
                v125 = (uint64_t)v8;
                v126 = v48 + 8;
                v127 = v57;
                v128 = v66;
              }
              else
              {
                if (v69 || (v65 != 4 ? (v131 = v65 == 2) : (v131 = 1), !v131))
                {
                  __src[0] = 0uLL;
                  v219 = 0.0;
                  v220 = 0.0;
                  v217 = 0.0;
                  v218 = 0.0;
                  v215 = 0.0;
                  v216 = 0.0;
                  GetQuadraticRoots((uint64_t)__src, (uint64_t)&v219, v49->f64[0], v49->f64[1]);
                  GetQuadraticRoots((uint64_t)&v217, (uint64_t)&v215, v49[20].f64[0], v49[20].f64[1]);
                  v142 = __src[0];
                  v143 = hypot(*(long double *)__src, *((long double *)__src + 1));
                  v144 = atan2(*((long double *)&v142 + 1), *(long double *)&v142);
                  v145 = v217;
                  v146 = v218;
                  v208 = hypot(v217, v218) * v211 + v213 * v143;
                  v147 = atan2(v146, v145) * v211 + v213 * v144;
                  v148 = v219;
                  v149 = v220;
                  v150 = hypot(v219, v220);
                  v151 = atan2(v149, v148);
                  v152 = v215;
                  v153 = v216;
                  *(float *)&v145 = v43;
                  v154 = hypot(v215, v216);
                  v155 = atan2(v153, v152);
                  v156 = v154 * v211;
                  v43 = *(float *)&v145;
                  v157 = v156 + v213 * v150;
                  v158 = v155 * v211 + v213 * v151;
                  std::polar[abi:ne180100]<double>(v208, v147);
                  v160 = v159;
                  v162 = v161;
                  std::polar[abi:ne180100]<double>(v157, v158);
                  v164 = -(v160 + v163);
                  v166 = std::operator*[abi:ne180100]<double>(v160, v162, v163, v165);
                  v167 = v49[22].f64[0] * v211 + v213 * v49[2].f64[0];
                  v49[1] = vmlaq_f64(vmulq_n_f64(v49[21], v211), v49[1], v209);
                  v49[2].f64[0] = v167;
                  v49->f64[0] = v164;
                  v49->f64[1] = v166;
                  goto LABEL_226;
                }
                v132 = *((_QWORD *)this + 83);
                if (v132)
                {
                  v133 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v132 + 32))(v132, v11);
                }
                else
                {
                  v187 = *((_QWORD *)this + 80);
                  if (v46 >= (*((_QWORD *)this + 81) - v187) >> 3)
                    v133 = 0;
                  else
                    v133 = *(ausdk::AUElement **)(v187 + 8 * v46);
                }
                v196 = ausdk::AUElement::GetParameter(v133, v48 + 3008);
                v197 = *((_QWORD *)this + 83);
                if (v197)
                {
                  v198 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v197 + 32))(v197, v11);
                }
                else
                {
                  v199 = *((_QWORD *)this + 80);
                  if (v46 >= (*((_QWORD *)this + 81) - v199) >> 3)
                    v198 = 0;
                  else
                    v198 = *(ausdk::AUElement **)(v199 + 8 * v46);
                }
                v192 = ausdk::AUElement::GetParameter(v198, v48 + 4008);
                v200 = *((_QWORD *)this + 83);
                if (v200)
                {
                  v201 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v200 + 32))(v200, v11);
                }
                else
                {
                  v202 = *((_QWORD *)this + 80);
                  if (v46 >= (*((_QWORD *)this + 81) - v202) >> 3)
                    v201 = 0;
                  else
                    v201 = *(ausdk::AUElement **)(v202 + 8 * v46);
                }
                v122 = ausdk::AUElement::GetParameter(v201, v48 + 5008);
                v203 = v213 * v196;
                v129 = 40.0;
                if (v203 >= 40.0)
                  v129 = v213 * v196;
                v124 = this;
                v125 = (uint64_t)v8;
                v126 = v48 + 8;
                v127 = v53;
                v128 = v65;
              }
              v123 = v192;
              goto LABEL_225;
            }
            v112 = *((_QWORD *)this + 83);
            if (v112)
            {
              v113 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v112 + 32))(v112, (v11 - 1));
            }
            else
            {
              v168 = *((_QWORD *)this + 80);
              if (v21 >= (*((_QWORD *)this + 81) - v168) >> 3)
                v113 = 0;
              else
                v113 = *(ausdk::AUElement **)(v168 + 8 * v21);
            }
            v178 = ausdk::AUElement::GetParameter(v113, v48 + 3008);
            v179 = *((_QWORD *)this + 83);
            if (v179)
            {
              v180 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v179 + 32))(v179, (v11 - 1));
            }
            else
            {
              v181 = *((_QWORD *)this + 80);
              if (v21 >= (*((_QWORD *)this + 81) - v181) >> 3)
                v180 = 0;
              else
                v180 = *(ausdk::AUElement **)(v181 + 8 * v21);
            }
            v173 = ausdk::AUElement::GetParameter(v180, v48 + 4008);
            v182 = *((_QWORD *)this + 83);
            if (v182)
            {
              v183 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v182 + 32))(v182, (v11 - 1));
            }
            else
            {
              v184 = *((_QWORD *)this + 80);
              if (v21 >= (*((_QWORD *)this + 81) - v184) >> 3)
                v183 = 0;
              else
                v183 = *(ausdk::AUElement **)(v184 + 8 * v21);
            }
            v177 = ausdk::AUElement::GetParameter(v183, v48 + 5008);
            v129 = *(double *)(ausdk::AUScope::SafeGetElement(v212, 0) + 80) * 0.5 * v211 + v213 * v178;
            v124 = this;
            v125 = (uint64_t)v8;
            v126 = v48 + 8;
            v127 = v53;
            v128 = v65;
          }
          else
          {
            v108 = *((_QWORD *)this + 83);
            if (v108)
            {
              v109 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v108 + 32))(v108, v11);
            }
            else
            {
              v130 = *((_QWORD *)this + 80);
              if (v46 >= (*((_QWORD *)this + 81) - v130) >> 3)
                v109 = 0;
              else
                v109 = *(ausdk::AUElement **)(v130 + 8 * v46);
            }
            v169 = ausdk::AUElement::GetParameter(v109, v48 + 3008);
            v170 = *((_QWORD *)this + 83);
            if (v170)
            {
              v171 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v170 + 32))(v170, v11);
            }
            else
            {
              v172 = *((_QWORD *)this + 80);
              if (v46 >= (*((_QWORD *)this + 81) - v172) >> 3)
                v171 = 0;
              else
                v171 = *(ausdk::AUElement **)(v172 + 8 * v46);
            }
            v173 = ausdk::AUElement::GetParameter(v171, v48 + 4008);
            v174 = *((_QWORD *)this + 83);
            if (v174)
            {
              v175 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v174 + 32))(v174, v11);
            }
            else
            {
              v176 = *((_QWORD *)this + 80);
              if (v46 >= (*((_QWORD *)this + 81) - v176) >> 3)
                v175 = 0;
              else
                v175 = *(ausdk::AUElement **)(v176 + 8 * v46);
            }
            v177 = ausdk::AUElement::GetParameter(v175, v48 + 5008);
            v129 = (float)(v42 * v169) + v213 * (*(double *)(ausdk::AUScope::SafeGetElement(v212, 0) + 80) * 0.5);
            v124 = this;
            v125 = (uint64_t)v8;
            v126 = v48 + 8;
            v127 = v57;
            v128 = v66;
          }
          v123 = v173;
          v122 = v177;
        }
      }
LABEL_225:
      AUVariableEQV2::SetCoefficientsForBand((uint64_t)v124, v125, v126, v128, v127, v129, v123, v122);
      goto LABEL_226;
    }
    v75 = *((_QWORD *)this + 83);
    if (v75)
    {
      v76 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v75 + 32))(v75, (v11 - 1));
    }
    else
    {
      v80 = *((_QWORD *)this + 80);
      if (v21 >= (*((_QWORD *)this + 81) - v80) >> 3)
        v76 = 0;
      else
        v76 = *(ausdk::AUElement **)(v80 + 8 * v21);
    }
    v84 = ausdk::AUElement::GetParameter(v76, v48 + 3008);
    v85 = *((_QWORD *)this + 83);
    if (v85)
    {
      v86 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v85 + 32))(v85, (v11 - 1));
    }
    else
    {
      v87 = *((_QWORD *)this + 80);
      if (v21 >= (*((_QWORD *)this + 81) - v87) >> 3)
        v86 = 0;
      else
        v86 = *(ausdk::AUElement **)(v87 + 8 * v21);
    }
    v88 = ausdk::AUElement::GetParameter(v86, v48 + 4008);
    v89 = *((_QWORD *)this + 83);
    if (v89)
    {
      v90 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v89 + 32))(v89, (v11 - 1));
    }
    else
    {
      v91 = *((_QWORD *)this + 80);
      if (v21 >= (*((_QWORD *)this + 81) - v91) >> 3)
        v90 = 0;
      else
        v90 = *(ausdk::AUElement **)(v91 + 8 * v21);
    }
    v92 = ausdk::AUElement::GetParameter(v90, v48 + 5008);
    v93 = *((_QWORD *)this + 83);
    if (v93)
    {
      v94 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v93 + 32))(v93, v11);
    }
    else
    {
      v95 = *((_QWORD *)this + 80);
      if (v214 >= (*((_QWORD *)this + 81) - v95) >> 3)
        v94 = 0;
      else
        v94 = *(ausdk::AUElement **)(v95 + 8 * v214);
    }
    v96 = ausdk::AUElement::GetParameter(v94, v48 + 3008);
    v97 = *((_QWORD *)this + 83);
    if (v97)
    {
      v98 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v97 + 32))(v97, v11);
    }
    else
    {
      v99 = *((_QWORD *)this + 80);
      if (v214 >= (*((_QWORD *)this + 81) - v99) >> 3)
        v98 = 0;
      else
        v98 = *(ausdk::AUElement **)(v99 + 8 * v214);
    }
    v100 = ausdk::AUElement::GetParameter(v98, v48 + 4008);
    v101 = *((_QWORD *)this + 83);
    if (v101)
    {
      v102 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v101 + 32))(v101, v11);
      v8 = (float64x2_t *)((char *)this + 680);
    }
    else
    {
      v103 = *((_QWORD *)this + 80);
      v8 = (float64x2_t *)((char *)this + 680);
      if (v214 >= (*((_QWORD *)this + 81) - v103) >> 3)
        v102 = 0;
      else
        v102 = *(ausdk::AUElement **)(v103 + 8 * v214);
    }
    v104 = ausdk::AUElement::GetParameter(v102, v48 + 5008);
    v105 = (float)(v42 * v96) + v213 * v84;
    v106 = (float)(v42 * v100) + v213 * v88;
    v107 = (float)(v42 * v104) + v213 * v92;
    AUVariableEQV2::SetCoefficientsForBand((uint64_t)this, (uint64_t)v8, v48 + 8, v65, v53, v105, v106, v107);
    v46 = v214;
LABEL_226:
    v49 = (float64x2_t *)((char *)v49 + 40);
  }
  while (!__CFADD__(v48++, 1));
  v31 = v210 + v213 * v43;
LABEL_262:
  v204.n128_f64[0] = AUVariableEQV2::AdjustForGlobalGain(v8, v31);
  v205 = *((_QWORD *)this + 74);
  if (*((_BYTE *)this + 572))
  {
    if (v205 == *((_QWORD *)this + 73))
    {
      v206 = (char *)this + 576;
      v205 = *((_QWORD *)this + 72);
    }
    else
    {
      v206 = (char *)this + 584;
      v205 = *((_QWORD *)this + 73);
    }
  }
  else
  {
    v206 = (char *)this + 592;
  }
  (*(void (**)(uint64_t, uint64_t, float64x2_t *, __n128))(*(_QWORD *)v205 + 16))(v205, 8, v8, v204);
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)v206 + 24))(*(_QWORD *)v206);
}

float AUVariableEQV2::UpdateVolumeState(AUVariableEQV2 *this)
{
  uint64_t v2;
  ausdk::AUElement *v3;
  ausdk::AUElement **v4;
  float Parameter;
  float result;
  float v7;

  *((_DWORD *)this + 142) = 0;
  v2 = *((_QWORD *)this + 9);
  if (v2)
  {
    v3 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v2 + 32))(v2, 0);
  }
  else
  {
    v4 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v4)
      v3 = 0;
    else
      v3 = *v4;
  }
  Parameter = ausdk::AUElement::GetParameter(v3, 7u);
  result = __exp10f(Parameter / 20.0);
  *((float *)this + 141) = result;
  if (*((_BYTE *)this + 575))
  {
    v7 = *((float *)this + 140);
  }
  else
  {
    *((float *)this + 140) = result;
    v7 = result;
  }
  if (v7 != result)
  {
    result = (float)(*((float *)this + 141) - *((float *)this + 140))
           / (float)(*(double *)(ausdk::AUScope::SafeGetElement((AUVariableEQV2 *)((char *)this + 128), 0)
                                             + 80)
                                 * 0.02);
    *((float *)this + 142) = result;
  }
  return result;
}

unsigned int *CopyBufferList(unsigned int *result, AudioBufferList *a2, size_t __n)
{
  unint64_t v3;
  UInt32 v5;
  unsigned int *v7;
  unint64_t v8;
  unint64_t v9;
  size_t v10;
  unsigned int *v11;

  v3 = *result;
  if (v3 == a2->mNumberBuffers && v3 != 0)
  {
    v5 = __n;
    v7 = result;
    v8 = 0;
    v9 = 0;
    v10 = __n;
    do
    {
      if (v7[v8 / 4 + 3] >= v5 && a2->mBuffers[v8 / 0x10].mDataByteSize >= v5)
      {
        v11 = *(unsigned int **)&v7[v8 / 4 + 4];
        result = (unsigned int *)a2->mBuffers[v8 / 0x10].mData;
        if (v11 != result)
        {
          result = (unsigned int *)memcpy(result, v11, v10);
          v3 = *v7;
        }
      }
      ++v9;
      v8 += 16;
    }
    while (v9 < v3);
  }
  return result;
}

BiquadCoefficients *AUVariableEQV2::SetCoefficients(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;
  unsigned int i;
  uint64_t v8;
  ausdk::AUElement *v9;
  uint64_t v10;
  float Parameter;
  uint64_t v12;
  ausdk::AUElement *v13;
  uint64_t v14;
  float v15;
  uint64_t v16;
  ausdk::AUElement *v17;
  uint64_t v18;
  float v19;
  uint64_t v20;
  ausdk::AUElement *v21;
  uint64_t v22;
  float v23;
  uint64_t v24;
  ausdk::AUElement *v25;
  uint64_t v26;
  float v27;
  BiquadCoefficients *result;

  v6 = a3;
  for (i = 3000; i != 3008; ++i)
  {
    v8 = a1[83];
    if (v8)
    {
      v9 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v8 + 32))(v8, a3);
    }
    else
    {
      v10 = a1[80];
      if (v6 >= (a1[81] - v10) >> 3)
        v9 = 0;
      else
        v9 = *(ausdk::AUElement **)(v10 + 8 * v6);
    }
    Parameter = ausdk::AUElement::GetParameter(v9, i - 1000);
    v12 = a1[83];
    if (v12)
    {
      v13 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v12 + 32))(v12, a3);
    }
    else
    {
      v14 = a1[80];
      if (v6 >= (a1[81] - v14) >> 3)
        v13 = 0;
      else
        v13 = *(ausdk::AUElement **)(v14 + 8 * v6);
    }
    v15 = ausdk::AUElement::GetParameter(v13, i);
    v16 = a1[83];
    if (v16)
    {
      v17 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v16 + 32))(v16, a3);
    }
    else
    {
      v18 = a1[80];
      if (v6 >= (a1[81] - v18) >> 3)
        v17 = 0;
      else
        v17 = *(ausdk::AUElement **)(v18 + 8 * v6);
    }
    v19 = ausdk::AUElement::GetParameter(v17, i + 1000);
    v20 = a1[83];
    if (v20)
    {
      v21 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v20 + 32))(v20, a3);
    }
    else
    {
      v22 = a1[80];
      if (v6 >= (a1[81] - v22) >> 3)
        v21 = 0;
      else
        v21 = *(ausdk::AUElement **)(v22 + 8 * v6);
    }
    v23 = ausdk::AUElement::GetParameter(v21, i + 2000);
    v24 = a1[83];
    if (v24)
    {
      v25 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v24 + 32))(v24, a3);
    }
    else
    {
      v26 = a1[80];
      if (v6 >= (a1[81] - v26) >> 3)
        v25 = 0;
      else
        v25 = *(ausdk::AUElement **)(v26 + 8 * v6);
    }
    v27 = ausdk::AUElement::GetParameter(v25, i - 2000);
    result = AUVariableEQV2::SetCoefficientsForBand((uint64_t)a1, a2, i - 3000, Parameter, v27, v15, v19, v23);
  }
  return result;
}

float64_t AUVariableEQV2::AdjustForGlobalGain(float64x2_t *a1, float a2)
{
  float64x2_t *v2;
  uint64_t v3;
  double v4;
  float64_t result;

  v2 = a1;
  v3 = 0;
  while (fabs(a1->f64[v3])
        + fabs(a1->f64[v3 + 1])
        + fabs(a1[1].f64[v3 + 1])
        + fabs(a1[2].f64[v3])
        + fabs(a1[1].f64[v3] + -1.0) < 1.0e-15)
  {
    v3 += 5;
    if (v3 == 40)
      goto LABEL_6;
  }
  v2 = (float64x2_t *)((char *)a1 + v3 * 8);
LABEL_6:
  v4 = __exp10(a2 * 0.05);
  v2[1] = vmulq_n_f64(v2[1], v4);
  result = v2[2].f64[0] * v4;
  v2[2].f64[0] = result;
  return result;
}

BiquadCoefficients *AUVariableEQV2::SetCoefficientsForBand(uint64_t a1, uint64_t a2, unsigned int a3, int a4, float a5, float a6, float a7, float a8)
{
  BiquadCoefficients *result;
  double v16;
  _QWORD *v17;
  float v18;
  BiquadCoefficients *v19;
  double v20;
  double v21;
  double v22;
  int v23;
  double v24;
  double v25;
  int v26;

  result = (BiquadCoefficients *)ausdk::AUScope::SafeGetElement((ausdk::AUScope *)(a1 + 128), 0);
  if (a5 == 0.0 && (v16 = *((double *)result + 10), v16 * 0.49 >= a6))
  {
    v18 = a6 * 6.28318531 / v16;
    switch(a4)
    {
      case 0:
        v19 = (BiquadCoefficients *)(a2 + 40 * a3);
        v20 = v18;
        v21 = a8;
        v22 = a7;
        v23 = 6;
        return BiquadCoefficients::SetBW(v19, v23, v20, v21, v22);
      case 1:
        result = (BiquadCoefficients *)(a2 + 40 * a3);
        if (v18 <= 0.0)
          goto LABEL_20;
        v24 = fmin(v18, 3.11017673);
        v25 = 0.0;
        v26 = 1;
        goto LABEL_19;
      case 2:
        result = (BiquadCoefficients *)(a2 + 40 * a3);
        if (v18 <= 0.0)
          goto LABEL_20;
        v24 = fmin(v18, 3.11017673);
        v25 = 0.0;
        v26 = 2;
        goto LABEL_19;
      case 3:
        v19 = (BiquadCoefficients *)(a2 + 40 * a3);
        v20 = v18;
        v21 = a8;
        v22 = 0.0;
        v23 = 1;
        return BiquadCoefficients::SetBW(v19, v23, v20, v21, v22);
      case 4:
        v19 = (BiquadCoefficients *)(a2 + 40 * a3);
        v20 = v18;
        v21 = a8;
        v22 = 0.0;
        v23 = 2;
        return BiquadCoefficients::SetBW(v19, v23, v20, v21, v22);
      case 5:
        v19 = (BiquadCoefficients *)(a2 + 40 * a3);
        v20 = v18;
        v21 = a8;
        v22 = 0.0;
        v23 = 3;
        return BiquadCoefficients::SetBW(v19, v23, v20, v21, v22);
      case 6:
        v19 = (BiquadCoefficients *)(a2 + 40 * a3);
        v20 = v18;
        v21 = a8;
        v22 = 0.0;
        v23 = 4;
        return BiquadCoefficients::SetBW(v19, v23, v20, v21, v22);
      case 7:
        result = (BiquadCoefficients *)(a2 + 40 * a3);
        if (v18 <= 0.0)
          goto LABEL_20;
        v25 = a7;
        v24 = fmin(v18, 3.11017673);
        v26 = 7;
        goto LABEL_19;
      case 8:
        result = (BiquadCoefficients *)(a2 + 40 * a3);
        if (v18 <= 0.0)
        {
LABEL_20:
          v17 = (_QWORD *)(a2 + 40 * a3);
          *(_QWORD *)result = 0;
          *((_QWORD *)result + 1) = 0;
          goto LABEL_4;
        }
        v25 = a7;
        v24 = fmin(v18, 3.11017673);
        v26 = 8;
LABEL_19:
        result = (BiquadCoefficients *)BiquadCoefficients::SetPriv(result, v26, v24, 0.707106781, v25);
        break;
      case 9:
        v19 = (BiquadCoefficients *)(a2 + 40 * a3);
        v20 = v18;
        v21 = a8;
        v22 = a7;
        v23 = 7;
        return BiquadCoefficients::SetBW(v19, v23, v20, v21, v22);
      case 10:
        v19 = (BiquadCoefficients *)(a2 + 40 * a3);
        v20 = v18;
        v21 = a8;
        v22 = a7;
        v23 = 8;
        return BiquadCoefficients::SetBW(v19, v23, v20, v21, v22);
      default:
        goto LABEL_3;
    }
  }
  else
  {
LABEL_3:
    v17 = (_QWORD *)(a2 + 40 * a3);
    *v17 = 0;
    v17[1] = 0;
LABEL_4:
    v17[3] = 0;
    v17[4] = 0;
    v17[2] = 0x3FF0000000000000;
  }
  return result;
}

void GetQuadraticRoots(uint64_t a1, uint64_t a2, double a3, double a4)
{
  double v7;
  int v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  uint64_t v18;
  float64x2_t v19;
  float64x2_t v20;
  uint64_t v21;
  double v22;
  float64_t v23;
  double v25;
  double v26;
  double v27;

  v7 = logb(2.0);
  if ((*(_QWORD *)&v7 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
  {
    v8 = 0;
    v9 = 0.0;
    v25 = 2.0;
  }
  else
  {
    v8 = (int)v7;
    v25 = scalbn(2.0, -(int)v7);
    v9 = scalbn(0.0, -v8);
  }
  v22 = v9;
  v10 = v9 * v9 + v25 * v25;
  v27 = scalbn((v25 + v9 * 0.0) / v10, -v8);
  v11 = scalbn(-(v22 - v25 * 0.0) / v10, -v8);
  v12 = std::operator*[abi:ne180100]<double>(a3, 0.0, a3, 0.0);
  v14 = v13;
  v15 = std::operator*[abi:ne180100]<double>(4.0, 0.0, a4, 0.0);
  v26 = std::sqrt[abi:ne180100]<double>(v12 - v15, v14 - v16);
  v23 = v17;
  *(double *)a1 = std::operator*[abi:ne180100]<double>(v26 - a3, v17, v27, v11);
  *(_QWORD *)(a1 + 8) = v18;
  v19.f64[0] = v26;
  v19.f64[1] = v23;
  v20 = vsubq_f64(vnegq_f64((float64x2_t)*(unint64_t *)&a3), v19);
  *(double *)a2 = std::operator*[abi:ne180100]<double>(v20.f64[0], v20.f64[1], v27, v11);
  *(_QWORD *)(a2 + 8) = v21;
}

void AUChannelSpecificDelay::~AUChannelSpecificDelay(AUChannelSpecificDelay *this)
{
  AUChannelSpecificDelay::~AUChannelSpecificDelay(this);
  JUMPOUT(0x1BCC95CECLL);
}

{
  uint64_t v2;
  char *v3;
  _BYTE *v4;
  _BYTE *v5;
  _QWORD *v6;
  void **v7;

  *(_QWORD *)this = &off_1E69DD4E0;
  v7 = (void **)((char *)this + 2216);
  std::vector<std::unique_ptr<DspLib::AlgorithmBaseNewParameters>>::__destroy_vector::operator()[abi:ne180100](&v7);
  v2 = 1280;
  do
  {
    v3 = (char *)this + v2;
    v4 = *(_BYTE **)((char *)this + v2 + 520);
    if (v4)
    {
      v5 = (_BYTE *)*((_QWORD *)v3 + 66);
      if (v5 != v4)
        *((_QWORD *)v3 + 66) = &v5[(v4 - v5 + 3) & 0xFFFFFFFFFFFFFFFCLL];
      v6 = v3 + 520;
      operator delete(v4);
      *v6 = 0;
      v6[1] = 0;
    }
    v2 -= 40;
  }
  while (v2);
  ausdk::AUBase::~AUBase(this);
}

void AUChannelSpecificDelay::CreateExtendedElements(AUChannelSpecificDelay *this)
{
  unint64_t i;
  std::string *v3;
  __int128 v4;
  void **v5;
  CFIndex v6;
  CFStringRef v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  std::runtime_error *exception;
  std::string v14;
  void *__p[2];
  int64_t v16;
  CFTypeRef cf;

  ausdk::AUScope::Initialize((int64x2_t *)((char *)this + 2200), this, 4, 32);
  for (i = 0; i != 32; ++i)
  {
    std::to_string(&v14, i);
    v3 = std::string::insert(&v14, 0, "Channel", 7uLL);
    v4 = *(_OWORD *)&v3->__r_.__value_.__l.__data_;
    v16 = v3->__r_.__value_.__r.__words[2];
    *(_OWORD *)__p = v4;
    v3->__r_.__value_.__l.__size_ = 0;
    v3->__r_.__value_.__r.__words[2] = 0;
    v3->__r_.__value_.__r.__words[0] = 0;
    if (v16 >= 0)
      v5 = __p;
    else
      v5 = (void **)__p[0];
    if (v16 >= 0)
      v6 = HIBYTE(v16);
    else
      v6 = (CFIndex)__p[1];
    v7 = CFStringCreateWithBytes(0, (const UInt8 *)v5, v6, 0x8000100u, 0);
    cf = v7;
    if (!v7)
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Could not construct");
    }
    if (SHIBYTE(v16) < 0)
      operator delete(__p[0]);
    if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v14.__r_.__value_.__l.__data_);
    v8 = *((_QWORD *)this + 280);
    if (v8)
    {
      v9 = (*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)v8 + 32))(v8, i);
    }
    else
    {
      v10 = *((_QWORD *)this + 277);
      if (i >= (*((_QWORD *)this + 278) - v10) >> 3)
        v9 = 0;
      else
        v9 = *(_QWORD *)(v10 + 8 * i);
    }
    ausdk::Owned<__CFString const*>::operator=((const void **)(v9 + 72), v7);
    v11 = *((_QWORD *)this + 280);
    if (v11)
      v12 = (*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)v11 + 32))(v11, i);
    else
      v12 = *(_QWORD *)(*((_QWORD *)this + 277) + 8 * i);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v12 + 40))(v12, 1);
    if (cf)
      CFRelease(cf);
  }
}

void sub_1B6457A1C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22)
{
  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(exception_object);
}

uint64_t AUChannelSpecificDelay::Initialize(AUChannelSpecificDelay *this)
{
  uint64_t Element;
  __int128 v3;
  uint64_t v4;
  __int128 v5;
  const AudioStreamBasicDescription *v6;
  unsigned int v7;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  _QWORD *v13;
  void *v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  AudioStreamBasicDescription v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;

  Element = ausdk::AUScope::SafeGetElement((AUChannelSpecificDelay *)((char *)this + 80), 0);
  v3 = *(_OWORD *)(Element + 96);
  v21 = *(_OWORD *)(Element + 80);
  v22 = v3;
  v23 = *(_QWORD *)(Element + 112);
  v4 = ausdk::AUScope::SafeGetElement((AUChannelSpecificDelay *)((char *)this + 128), 0);
  v5 = *(_OWORD *)(v4 + 96);
  *(_OWORD *)&v20.mSampleRate = *(_OWORD *)(v4 + 80);
  *(_OWORD *)&v20.mBytesPerPacket = v5;
  *(_QWORD *)&v20.mBitsPerChannel = *(_QWORD *)(v4 + 112);
  if (!CAStreamBasicDescription::IsEquivalent((CAStreamBasicDescription *)&v21, &v20, v6))
    return 4294956428;
  v7 = *((_DWORD *)this + 562) ? 32 : 8;
  if (HIDWORD(v22) > v7)
    return 4294956428;
  v9 = ausdk::AUScope::SafeGetElement((AUChannelSpecificDelay *)((char *)this + 128), 0);
  v10 = 0;
  LODWORD(v11) = *((_DWORD *)this + 84);
  v12 = (ceil(*(double *)(v9 + 80) * 100.0 / 1000.0) + (double)v11);
  v13 = (_QWORD *)((char *)this + 568);
  do
  {
    *((_DWORD *)v13 - 8) = v12;
    *(_OWORD *)((char *)v13 - 28) = xmmword_1B66A0DC0;
    v14 = (void *)*(v13 - 1);
    v15 = *v13 - (_QWORD)v14;
    if (v12 == v15 >> 2)
    {
      if (v15 < 1)
        goto LABEL_14;
      v16 = (unint64_t)v15 >> 2;
      v17 = ((unint64_t)v15 >> 2) + 1;
      bzero((void *)*(v13 - 1), 4 * (v17 - ((unint64_t)v15 > 3)));
    }
    else
    {
      std::valarray<float>::resize((uint64_t)(v13 - 1), v12, 0.0);
      v14 = (void *)*(v13 - 1);
      v18 = *v13 - (_QWORD)v14;
      if (v18 < 1)
        goto LABEL_14;
      v16 = (unint64_t)v18 >> 2;
      v17 = ((unint64_t)v18 >> 2) + 1;
    }
    bzero(v14, 4 * (v17 - (v16 != 0)));
LABEL_14:
    *((_DWORD *)v13 - 6) = 0;
    *((_DWORD *)v13 - 4) = 0;
    ++v10;
    if (*((_DWORD *)this + 562))
      v19 = 32;
    else
      v19 = 8;
    v13 += 5;
  }
  while (v10 < v19);
  return 0;
}

uint64_t AUChannelSpecificDelay::Reset(AUChannelSpecificDelay *this)
{
  AUChannelSpecificDelay::ClearRingBuffers(this);
  return 0;
}

uint64_t AUChannelSpecificDelay::GetPropertyInfo(AUChannelSpecificDelay *this, int a2, int a3, unsigned int a4, unsigned int *a5, BOOL *a6)
{
  uint64_t result;

  if (a3 || a2 != 64102 && a2 != 21)
    return 4294956417;
  result = 0;
  *a6 = 1;
  *a5 = 4;
  return result;
}

uint64_t AUChannelSpecificDelay::GetProperty(AUChannelSpecificDelay *this, int a2, int a3, unsigned int a4, _DWORD *a5)
{
  uint64_t result;
  char *v6;

  if (a3)
    return 4294956417;
  if (a2 == 64102)
  {
    v6 = (char *)this + 2248;
  }
  else
  {
    if (a2 != 21)
      return 4294956417;
    v6 = (char *)this + 528;
  }
  result = 0;
  *a5 = *(_DWORD *)v6;
  return result;
}

uint64_t AUChannelSpecificDelay::SetProperty(AUChannelSpecificDelay *this, int a2, int a3, unsigned int a4, _DWORD *a5, unsigned int a6)
{
  uint64_t result;

  if (a3)
    return 4294956417;
  if (a2 != 64102)
  {
    if (a2 != 21)
      return 4294956417;
    if (a6 >= 4)
    {
      result = 0;
      *((_DWORD *)this + 132) = *a5;
      return result;
    }
    return 4294956445;
  }
  if (a6 < 4)
    return 4294956445;
  result = 0;
  *((_DWORD *)this + 562) = *a5;
  return result;
}

uint64_t AUChannelSpecificDelay::SetParameter(AUChannelSpecificDelay *this, unsigned int a2, unsigned int a3, unsigned int a4, float a5)
{
  ausdk::AUScope *Scope;
  ausdk::AUElement *Element;
  uint64_t result;
  unsigned __int8 v13;
  _OWORD v14[4];
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  Scope = (ausdk::AUScope *)ausdk::AUBase::GetScope(this, a3);
  Element = (ausdk::AUElement *)ausdk::AUScope::SafeGetElement(Scope, a4);
  ausdk::AUElement::SetParameter(Element, a2, a5, 0);
  if (*((_DWORD *)this + 562))
  {
    if (a3 != 4)
      return 4294956430;
    goto LABEL_7;
  }
  if ((v13 & 1) == 0)
  {
    {
      v14[0] = xmmword_1B6676788;
      v14[1] = unk_1B6676798;
      v14[2] = xmmword_1B66767A8;
      v14[3] = unk_1B66767B8;
      std::unordered_map<unsigned int,unsigned int>::unordered_map(v14, 8);
      __cxa_atexit((void (*)(void *))std::unordered_map<unsigned int,unsigned int>::~unordered_map[abi:ne180100], &AUChannelSpecificDelay::SetParameter(unsigned int,unsigned int,unsigned int,float,unsigned int)::channelIndexMapByParameterID, &dword_1B5ED0000);
    }
  }
  result = (uint64_t)std::__hash_table<std::__hash_value_type<unsigned int,std::tuple<__CFString const*,float,float,float,AudioUnitParameterUnit,unsigned int>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::tuple<__CFString const*,float,float,float,AudioUnitParameterUnit,unsigned int>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::tuple<__CFString const*,float,float,float,AudioUnitParameterUnit,unsigned int>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::tuple<__CFString const*,float,float,float,AudioUnitParameterUnit,unsigned int>>>>::find<unsigned int>(&AUChannelSpecificDelay::SetParameter(unsigned int,unsigned int,unsigned int,float,unsigned int)::channelIndexMapByParameterID, a2);
  if (result)
  {
    a4 = *(_DWORD *)(result + 20);
LABEL_7:
    result = 0;
    ++*((_DWORD *)this + a4 + 454);
  }
  return result;
}

void sub_1B6457E6C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t AUChannelSpecificDelay::CanScheduleParameters(AUChannelSpecificDelay *this)
{
  return 0;
}

uint64_t AUChannelSpecificDelay::ProcessBufferLists(AUChannelSpecificDelay *this, unsigned int *a2, const AudioBufferList *a3, AudioBufferList *a4, unsigned int a5)
{
  uint64_t result;
  AUChannelSpecificDelay *v8;
  unint64_t mNumberBuffers;
  uint64_t v11;
  unint64_t v12;
  size_t mDataByteSize;
  void *v14;
  void *v15;
  uint64_t v16;
  uint64_t Element;
  unint64_t v18;
  unint64_t v19;
  double v20;
  unint64_t v21;
  char *v22;
  char *v23;
  int v24;
  char *v25;
  unsigned int *v26;
  unsigned int *v27;
  int v28;
  unsigned int v29;
  unint64_t v30;
  unsigned int v31;
  unsigned int v32;
  unint64_t v33;
  char *v34;
  unsigned int *v35;
  unsigned int v36;
  uint64_t v37;
  _QWORD *v38;
  const void **v39;
  const void *v40;
  unsigned int v41;
  unint64_t v42;
  uint64_t *v43;
  uint64_t v44;
  uint64_t v45;
  ausdk::AUElement *v46;
  uint64_t v47;
  uint64_t v48;
  _QWORD *v49;
  unsigned int v50;
  unsigned int v51;
  BOOL v52;
  unsigned int v53;
  unint64_t v54;
  unsigned int v55;
  char *v56;
  _DWORD *v57;
  unsigned int v58;
  uint64_t v59;
  _QWORD *v60;
  void **p_mData;
  void *v62;
  unint64_t v63;
  unint64_t v64;
  void **v65;
  char *v66;
  unsigned int v67;
  unsigned int v68;
  unsigned int v69;
  char *v70;
  void *v71;
  uint64_t v72;
  unint64_t v73;
  uint64_t v74;
  uint64_t v75;
  int v76;
  char *v77;
  size_t v78;
  char *v79;
  const void *v80;
  void *v81;
  AudioBufferList *v82;
  AUChannelSpecificDelay *v83;
  unsigned int v84;
  unsigned int v85;
  unint64_t v86;
  unsigned int *v87;
  const AudioBufferList *v88;
  char *v90;
  char *v91;
  char *v92;
  uint64_t v93;
  void *mData;
  _QWORD v95[2];

  if (*((_DWORD *)this + 84) < a5)
    return 4294956422;
  v8 = this;
  if (!*((_DWORD *)this + 132))
  {
    v16 = *(unsigned int *)(ausdk::AUScope::SafeGetElement((AUChannelSpecificDelay *)((char *)this + 128), 0) + 108);
    Element = ausdk::AUScope::SafeGetElement((AUChannelSpecificDelay *)((char *)v8 + 128), 0);
    v93 = v16;
    if (!(_DWORD)v16)
    {
LABEL_89:
      result = 0;
      *((_WORD *)v8 + 266) = 0;
      return result;
    }
    v19 = 0;
    v20 = *(double *)(Element + 80);
    LODWORD(v18) = *((_DWORD *)v8 + 84);
    v21 = (ceil(v20 * 100.0 / 1000.0) + (double)v18);
    v92 = (char *)v8 + 1816;
    v22 = (char *)v8 + 1944;
    v23 = (char *)v8 + 2072;
    v82 = a4;
    v83 = v8;
    v86 = v21;
    v90 = (char *)v8 + 2072;
    v91 = (char *)v8 + 1944;
    v88 = a3;
    while (1)
    {
      v24 = *(_DWORD *)&v92[4 * v19];
      if (v24 == *(_DWORD *)&v22[4 * v19])
      {
        if (!*(_DWORD *)&v23[4 * v19])
          goto LABEL_85;
        goto LABEL_20;
      }
      if (*((_DWORD *)v8 + 562))
      {
        v45 = *((_QWORD *)v8 + 280);
        if (v45)
        {
          v46 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)v45 + 32))(v45, v19);
        }
        else
        {
          v48 = *((_QWORD *)v8 + 277);
          v46 = v19 >= (*((_QWORD *)v8 + 278) - v48) >> 3 ? 0 : *(ausdk::AUElement **)(v48 + 8 * v19);
        }
        v50 = 0;
      }
      else
      {
        v47 = *((_QWORD *)v8 + 9);
        if (v47)
        {
          v46 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v47 + 32))(v47, 0);
        }
        else
        {
          v49 = (_QWORD *)*((_QWORD *)v8 + 6);
          v46 = *((_QWORD **)v8 + 7) == v49 ? 0 : (ausdk::AUElement *)*v49;
        }
        v50 = v19;
      }
      v69 = vcvtad_u64_f64(v20 * ausdk::AUElement::GetParameter(v46, v50) / 1000.0);
      if (*(_DWORD *)&v23[4 * v19] != v69 || *((_BYTE *)v8 + 533))
        break;
LABEL_84:
      *(_DWORD *)&v22[4 * v19] = v24;
      if (!v69)
      {
LABEL_85:
        v77 = (char *)a3 + 16 * v19;
        v78 = *((unsigned int *)v77 + 3);
        v79 = (char *)a4 + 16 * v19;
        if ((_DWORD)v78 == *((_DWORD *)v79 + 3))
        {
          v80 = (const void *)*((_QWORD *)v77 + 2);
          v81 = (void *)*((_QWORD *)v79 + 2);
          if (v80 != v81)
            memcpy(v81, v80, v78);
        }
        goto LABEL_88;
      }
LABEL_20:
      v95[0] = a3->mBuffers[v19].mData;
      mData = a4->mBuffers[v19].mData;
      v25 = (char *)v8 + 40 * v19;
      if (*((_DWORD *)v25 + 135) == 1)
      {
        v26 = (unsigned int *)(v25 + 536);
        v27 = (unsigned int *)(v25 + 540);
        v28 = *((_DWORD *)v25 + 134);
        v29 = *((_DWORD *)v8 + 10 * v19 + 136);
        LODWORD(v30) = 1;
        v31 = a5;
        v87 = (unsigned int *)((char *)v8 + 40 * v19 + 544);
        if (a5)
        {
          v32 = v28 - v29;
          if (v28 != v29)
          {
            v33 = 0;
            if (v32 >= a5)
              v32 = a5;
            v34 = (char *)v8 + 40 * v19;
            v35 = (unsigned int *)(v34 + 552);
            v36 = v28 - *((_DWORD *)v34 + 138);
            v84 = v32;
            if (v36 >= v32)
              v37 = v32;
            else
              v37 = v36;
            v38 = v34 + 560;
            v39 = (const void **)v95;
            do
            {
              v40 = *v39;
              v39 += 2;
              memcpy((void *)(*v38 + 4 * (*v35 + *v26 * (_DWORD)v33++)), v40, 4 * v37);
              v30 = *v27;
            }
            while (v33 < v30);
            v41 = v84;
            if (v84 <= v36)
            {
              v21 = v86;
            }
            else
            {
              v21 = v86;
              if ((_DWORD)v30)
              {
                v42 = 0;
                v43 = v95;
                do
                {
                  v44 = *v43;
                  v43 += 2;
                  memcpy((void *)(*v38 + 4 * *v26 * v42++), (const void *)(v44 + 4 * v37), 4 * (v84 - v37));
                  v30 = *v27;
                }
                while (v42 < v30);
                v41 = v84;
              }
            }
            v29 = *v87 + v41;
            *v87 = v29;
            v51 = *v35 + v41;
            *v35 = v51;
            v28 = *v26;
            v52 = v51 >= *v26;
            v53 = v51 - *v26;
            if (v52)
              *v35 = v53;
            a4 = v82;
            v8 = v83;
            v31 = a5;
            v23 = v90;
            v22 = v91;
          }
        }
        if (v31 && (_DWORD)v30 == 1 && v29)
        {
          v54 = 0;
          if (v29 >= a5)
            v55 = a5;
          else
            v55 = v29;
          v56 = (char *)v8 + 40 * v19;
          v57 = v56 + 548;
          v58 = v28 - *((_DWORD *)v56 + 137);
          v85 = v55;
          if (v58 >= v55)
            v59 = v55;
          else
            v59 = v58;
          v60 = v56 + 560;
          p_mData = &mData;
          do
          {
            v62 = *p_mData;
            p_mData += 2;
            memcpy(v62, (const void *)(*v60 + 4 * (*v57 + *v26 * v54++)), 4 * v59);
            v63 = *v27;
          }
          while (v54 < v63);
          if (v85 > v58 && (_DWORD)v63)
          {
            v64 = 0;
            v65 = &mData;
            do
            {
              v66 = (char *)*v65;
              v65 += 2;
              memcpy(&v66[4 * v59], (const void *)(*v60 + 4 * *v26 * v64++), 4 * (v85 - v59));
            }
            while (v64 < *v27);
          }
          v21 = v86;
          *v87 -= v85;
          v67 = *v57 + v85;
          *v57 = v67;
          v52 = v67 >= *v26;
          v68 = v67 - *v26;
          a4 = v82;
          v8 = v83;
          v23 = v90;
          v22 = v91;
          if (v52)
            *v57 = v68;
        }
      }
      a3 = v88;
LABEL_88:
      if (++v19 == v93)
        goto LABEL_89;
    }
    v70 = (char *)v8 + 40 * v19;
    *((_DWORD *)v70 + 134) = v21;
    *(_OWORD *)(v70 + 540) = xmmword_1B66A0DC0;
    v71 = (void *)*((_QWORD *)v70 + 70);
    v72 = *((_QWORD *)v70 + 71) - (_QWORD)v71;
    if (v21 == v72 >> 2)
    {
      if (v72 >= 1)
      {
        v73 = (unint64_t)v72 >> 2;
        v74 = ((unint64_t)v72 >> 2) + 1;
        bzero(*((void **)v70 + 70), 4 * (v74 - ((unint64_t)v72 > 3)));
LABEL_79:
        bzero(v71, 4 * (v74 - (v73 != 0)));
        v21 = v86;
      }
    }
    else
    {
      std::valarray<float>::resize((uint64_t)(v70 + 560), v21, 0.0);
      v71 = (void *)*((_QWORD *)v70 + 70);
      v75 = *((_QWORD *)v70 + 71) - (_QWORD)v71;
      if (v75 >= 1)
      {
        v73 = (unint64_t)v75 >> 2;
        v74 = ((unint64_t)v75 >> 2) + 1;
        goto LABEL_79;
      }
    }
    if (v69 >= v21)
      v76 = v21;
    else
      v76 = v69;
    *((_DWORD *)v70 + 136) = v76;
    *((_DWORD *)v70 + 138) = v76;
    v23 = v90;
    v22 = v91;
    *(_DWORD *)&v90[4 * v19] = v69;
    goto LABEL_84;
  }
  if (!*((_BYTE *)this + 532))
    AUChannelSpecificDelay::ClearRingBuffers(this);
  mNumberBuffers = a3->mNumberBuffers;
  if (mNumberBuffers == a4->mNumberBuffers && mNumberBuffers != 0)
  {
    v11 = 0;
    v12 = 0;
    do
    {
      mDataByteSize = a3->mBuffers[v11].mDataByteSize;
      if ((_DWORD)mDataByteSize == a4->mBuffers[v11].mDataByteSize)
      {
        v14 = a3->mBuffers[v11].mData;
        v15 = a4->mBuffers[v11].mData;
        if (v14 != v15)
        {
          memcpy(v15, v14, mDataByteSize);
          mNumberBuffers = a3->mNumberBuffers;
        }
      }
      ++v12;
      ++v11;
    }
    while (v12 < mNumberBuffers);
  }
  result = 0;
  *((_BYTE *)v8 + 532) = 1;
  return result;
}

uint64_t AUChannelSpecificDelay::Render(AUChannelSpecificDelay *this, unsigned int *a2, const AudioTimeStamp *a3, uint64_t a4)
{
  ausdk::AUScope *v8;
  uint64_t Element;
  uint64_t v10;
  ausdk::AUInputElement *v11;
  uint64_t result;
  uint64_t BufferList;
  uint64_t v14;
  unsigned int v15;

  v8 = (AUChannelSpecificDelay *)((char *)this + 80);
  Element = ausdk::AUScope::SafeGetElement((AUChannelSpecificDelay *)((char *)this + 80), 0);
  v10 = ausdk::AUScope::SafeGetElement((AUChannelSpecificDelay *)((char *)this + 128), 0);
  v15 = 0;
  v11 = (ausdk::AUInputElement *)ausdk::AUScope::SafeGetElement(v8, 0);
  result = ausdk::AUInputElement::PullInput(v11, &v15, a3, 0, a4);
  if (!(_DWORD)result)
  {
    BufferList = ausdk::AUBufferList::GetBufferList((ausdk::AUBufferList *)(Element + 144));
    v14 = ausdk::AUBufferList::GetBufferList((ausdk::AUBufferList *)(v10 + 144));
    return (*(uint64_t (**)(AUChannelSpecificDelay *, unsigned int *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)this + 176))(this, a2, BufferList, v14, a4);
  }
  return result;
}

uint64_t AUChannelSpecificDelay::GetParameterList(AUChannelSpecificDelay *this, int a2, unsigned int *a3, unsigned int *a4)
{
  uint64_t v6;
  uint64_t result;
  uint64_t i;

  if (!*((_DWORD *)this + 562))
  {
    if (!a2)
    {
      v6 = *(unsigned int *)(ausdk::AUScope::SafeGetElement((AUChannelSpecificDelay *)((char *)this + 128), 0) + 108);
      if ((_DWORD)v6)
      {
        for (i = 0; i != v6; ++i)
        {
          if (a3)
            a3[i] = i;
        }
      }
      goto LABEL_13;
    }
    return 4294956430;
  }
  if (a2 != 4)
    return 4294956430;
  if (a3)
    *a3 = 0;
  LODWORD(v6) = 1;
LABEL_13:
  result = 0;
  *a4 = v6;
  return result;
}

uint64_t AUChannelSpecificDelay::GetParameterInfo(AUChannelSpecificDelay *this, int a2, unsigned int a3, AudioUnitParameterInfo *buffer)
{
  uint64_t result;
  AudioUnitParameterOptions v6;

  if (*((_DWORD *)this + 562))
  {
    if (a2 == 4)
    {
      if (!a3)
      {
        buffer->cfNameString = CFSTR("Desired delay in millisecond");
        buffer->flags |= 0x8000000u;
        CFStringGetCString(CFSTR("Desired delay in millisecond"), buffer->name, 52, 0x8000100u);
        result = 0;
        buffer->unit = kAudioUnitParameterUnit_Milliseconds;
        *(_QWORD *)&buffer->minValue = 0x42C8000000000000;
        *(_QWORD *)&buffer->defaultValue = 0xC080000000000000;
        return result;
      }
      return 4294956418;
    }
    return 4294956430;
  }
  else
  {
    buffer->flags = 0;
    buffer->unitName = 0;
    if (a2)
      return 4294956418;
    if (a3 > 7)
    {
      return 0;
    }
    else
    {
      buffer->cfNameString = CFSTR("Desired delay in millisecond");
      buffer->flags = 0x8000000;
      CFStringGetCString(CFSTR("Desired delay in millisecond"), buffer->name, 52, 0x8000100u);
      result = 0;
      buffer->unit = kAudioUnitParameterUnit_Milliseconds;
      *(_QWORD *)&buffer->minValue = 0x42C8000000000000;
      v6 = buffer->flags | 0xC0800000;
      buffer->defaultValue = 0.0;
      buffer->flags = v6;
    }
  }
  return result;
}

UInt8 *AUChannelSpecificDelay::SaveExtendedScopes(AUChannelSpecificDelay *this, __CFData *a2)
{
  ausdk::AUScope *Scope;

  Scope = (ausdk::AUScope *)ausdk::AUBase::GetScope(this, 4u);
  return ausdk::AUScope::SaveState(Scope, a2);
}

uint64_t AUChannelSpecificDelay::RestoreState(OpaqueAudioComponentInstance **this, const void *a2)
{
  uint64_t v3;

  v3 = ausdk::AUBase::RestoreState(this, a2);
  if (!(_DWORD)v3)
    AUChannelSpecificDelay::ClearRingBuffers((AUChannelSpecificDelay *)this);
  return v3;
}

double AUChannelSpecificDelay::GetLatency(AUChannelSpecificDelay *this)
{
  uint64_t v2;
  unint64_t v3;
  double v4;
  uint64_t v5;
  ausdk::AUElement *v6;
  uint64_t v7;
  uint64_t v8;
  ausdk::AUElement **v9;
  unsigned int v10;
  double Parameter;

  v2 = *(unsigned int *)(ausdk::AUScope::SafeGetElement((AUChannelSpecificDelay *)((char *)this + 128), 0) + 108);
  if ((_DWORD)v2)
  {
    v3 = 0;
    v4 = 0.0;
    do
    {
      if (*((_DWORD *)this + 562))
      {
        v5 = *((_QWORD *)this + 280);
        if (v5)
        {
          v6 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)v5 + 32))(v5, v3);
        }
        else
        {
          v8 = *((_QWORD *)this + 277);
          if (v3 >= (*((_QWORD *)this + 278) - v8) >> 3)
            v6 = 0;
          else
            v6 = *(ausdk::AUElement **)(v8 + 8 * v3);
        }
        v10 = 0;
      }
      else
      {
        v7 = *((_QWORD *)this + 9);
        if (v7)
        {
          v6 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v7 + 32))(v7, 0);
        }
        else
        {
          v9 = (ausdk::AUElement **)*((_QWORD *)this + 6);
          if (*((ausdk::AUElement ***)this + 7) == v9)
            v6 = 0;
          else
            v6 = *v9;
        }
        v10 = v3;
      }
      Parameter = ausdk::AUElement::GetParameter(v6, v10);
      if (v4 <= Parameter)
        v4 = Parameter;
      ++v3;
    }
    while (v2 != v3);
  }
  else
  {
    v4 = 0.0;
  }
  return v4 / 1000.0;
}

double AUChannelSpecificDelay::GetTailTime(AUChannelSpecificDelay *this)
{
  return 0.0;
}

uint64_t AUChannelSpecificDelay::SupportsTail(AUChannelSpecificDelay *this)
{
  return 1;
}

BOOL AUChannelSpecificDelay::StreamFormatWritable(AUChannelSpecificDelay *this)
{
  return *((_BYTE *)this + 17) == 0;
}

uint64_t AUChannelSpecificDelay::SupportedNumChannels(AUChannelSpecificDelay *this, const AUChannelInfo **a2)
{
  unint64_t v4;
  char v6;
  char **v7;
  char *v8;

  v4 = atomic_load(&AUChannelSpecificDelay::SupportedNumChannels(AUChannelInfo const**)::sOnceFlag);
  if (v4 != -1)
  {
    v8 = &v6;
    v7 = &v8;
    std::__call_once(&AUChannelSpecificDelay::SupportedNumChannels(AUChannelInfo const**)::sOnceFlag, &v7, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<AUChannelSpecificDelay::SupportedNumChannels(AUChannelInfo const**)::$_0 &&>>);
  }
  if (a2)
    *a2 = (const AUChannelInfo *)&AUChannelSpecificDelay::SupportedNumChannels(AUChannelInfo const**)::sSupportedChannelConfigs;
  if (*((_DWORD *)this + 562))
    return 32;
  else
    return 8;
}

uint64_t AUChannelSpecificDelay::GetScopeExtended(AUChannelSpecificDelay *this, int a2)
{
  if (a2 == 4)
    return (uint64_t)this + 2200;
  else
    return 0;
}

int16x8_t std::__call_once_proxy[abi:ne180100]<std::tuple<AUChannelSpecificDelay::SupportedNumChannels(AUChannelInfo const**)::$_0 &&>>()
{
  uint64_t v0;
  int16x8_t result;
  int16x8_t v2;
  __int16 *v3;
  int16x8_t v4;

  v0 = 0;
  result = (int16x8_t)xmmword_1B66A24D0;
  v2.i64[0] = 0x8000800080008;
  v2.i64[1] = 0x8000800080008;
  do
  {
    v3 = (__int16 *)((char *)&AUChannelSpecificDelay::SupportedNumChannels(AUChannelInfo const**)::sSupportedChannelConfigs
                   + v0);
    v4 = result;
    vst2q_s16(v3, *(int16x8x2_t *)result.i8);
    result = vaddq_s16(result, v2);
    v0 += 32;
  }
  while (v0 != 128);
  return result;
}

void AUChannelSpecificDelay::ClearRingBuffers(AUChannelSpecificDelay *this)
{
  uint64_t v2;
  _DWORD *v3;
  _QWORD *v4;
  void *v5;
  uint64_t v6;

  v2 = *(unsigned int *)(ausdk::AUScope::SafeGetElement((AUChannelSpecificDelay *)((char *)this + 128), 0) + 108);
  if ((_DWORD)v2)
  {
    v3 = (_DWORD *)((char *)this + 1816);
    v4 = (_QWORD *)((char *)this + 568);
    do
    {
      if (*((_DWORD *)v4 - 7))
      {
        v5 = (void *)*(v4 - 1);
        v6 = *v4 - (_QWORD)v5;
        if (v6 >= 1)
          bzero(v5, 4 * (((unint64_t)v6 >> 2) - ((unint64_t)v6 > 3)) + 4);
      }
      *(_QWORD *)((char *)v4 - 20) = 0;
      *((_DWORD *)v4 - 6) = 0;
      ++*v3++;
      v4 += 5;
      --v2;
    }
    while (v2);
  }
  *((_BYTE *)this + 533) = 1;
}

void std::unordered_map<unsigned int,unsigned int>::unordered_map(_QWORD *a1, uint64_t a2)
{
  unint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  uint8x8_t v8;
  uint64_t **v9;
  uint64_t *i;
  unint64_t v11;
  _QWORD *v12;
  float v13;
  _BOOL8 v14;
  unint64_t v15;
  unint64_t v16;
  size_t v17;
  uint64_t v18;
  _QWORD *v19;
  unint64_t v20;

  AUChannelSpecificDelay::SetParameter(unsigned int,unsigned int,unsigned int,float,unsigned int)::channelIndexMapByParameterID = 0u;
  *(_OWORD *)&qword_1EF136D10 = 0u;
  dword_1EF136D20 = 1065353216;
  if (a2)
  {
    v3 = a1;
    v4 = 0;
    v5 = 0;
    v6 = &a1[a2];
    do
    {
      v7 = *(unsigned int *)v3;
      if (v5)
      {
        v8 = (uint8x8_t)vcnt_s8((int8x8_t)v5);
        v8.i16[0] = vaddlv_u8(v8);
        if (v8.u32[0] > 1uLL)
        {
          v2 = *(unsigned int *)v3;
          if (v5 <= v7)
            v2 = v7 % v5;
        }
        else
        {
          v2 = ((_DWORD)v5 - 1) & v7;
        }
        v9 = *(uint64_t ***)(AUChannelSpecificDelay::SetParameter(unsigned int,unsigned int,unsigned int,float,unsigned int)::channelIndexMapByParameterID
                          + 8 * v2);
        if (v9)
        {
          for (i = *v9; i; i = (uint64_t *)*i)
          {
            v11 = i[1];
            if (v11 == v7)
            {
              if (*((_DWORD *)i + 4) == (_DWORD)v7)
                goto LABEL_41;
            }
            else
            {
              if (v8.u32[0] > 1uLL)
              {
                if (v11 >= v5)
                  v11 %= v5;
              }
              else
              {
                v11 &= v5 - 1;
              }
              if (v11 != v2)
                break;
            }
          }
        }
      }
      v12 = operator new(0x18uLL);
      *v12 = 0;
      v12[1] = v7;
      v12[2] = *v3;
      v13 = (float)(unint64_t)(v4 + 1);
      if (!v5 || (float)(*(float *)&dword_1EF136D20 * (float)v5) < v13)
      {
        v14 = (v5 & (v5 - 1)) != 0;
        if (v5 < 3)
          v14 = 1;
        v15 = v14 | (2 * v5);
        v16 = vcvtps_u32_f32(v13 / *(float *)&dword_1EF136D20);
        if (v15 <= v16)
          v17 = v16;
        else
          v17 = v15;
        std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__rehash<true>((uint64_t)&AUChannelSpecificDelay::SetParameter(unsigned int,unsigned int,unsigned int,float,unsigned int)::channelIndexMapByParameterID, v17);
        v5 = *((_QWORD *)&AUChannelSpecificDelay::SetParameter(unsigned int,unsigned int,unsigned int,float,unsigned int)::channelIndexMapByParameterID
             + 1);
        if ((*((_QWORD *)&AUChannelSpecificDelay::SetParameter(unsigned int,unsigned int,unsigned int,float,unsigned int)::channelIndexMapByParameterID
              + 1) & (*((_QWORD *)&AUChannelSpecificDelay::SetParameter(unsigned int,unsigned int,unsigned int,float,unsigned int)::channelIndexMapByParameterID
                      + 1)
                    - 1)) != 0)
        {
          if (*((_QWORD *)&AUChannelSpecificDelay::SetParameter(unsigned int,unsigned int,unsigned int,float,unsigned int)::channelIndexMapByParameterID
               + 1) <= v7)
            v2 = v7
               % *((_QWORD *)&AUChannelSpecificDelay::SetParameter(unsigned int,unsigned int,unsigned int,float,unsigned int)::channelIndexMapByParameterID
                 + 1);
          else
            v2 = v7;
        }
        else
        {
          v2 = (DWORD2(AUChannelSpecificDelay::SetParameter(unsigned int,unsigned int,unsigned int,float,unsigned int)::channelIndexMapByParameterID)
              - 1) & v7;
        }
      }
      v18 = AUChannelSpecificDelay::SetParameter(unsigned int,unsigned int,unsigned int,float,unsigned int)::channelIndexMapByParameterID;
      v19 = *(_QWORD **)(AUChannelSpecificDelay::SetParameter(unsigned int,unsigned int,unsigned int,float,unsigned int)::channelIndexMapByParameterID
                       + 8 * v2);
      if (v19)
      {
        *v12 = *v19;
      }
      else
      {
        *v12 = qword_1EF136D10;
        qword_1EF136D10 = (uint64_t)v12;
        *(_QWORD *)(v18 + 8 * v2) = &qword_1EF136D10;
        if (!*v12)
          goto LABEL_40;
        v20 = *(_QWORD *)(*v12 + 8);
        if ((v5 & (v5 - 1)) != 0)
        {
          if (v20 >= v5)
            v20 %= v5;
        }
        else
        {
          v20 &= v5 - 1;
        }
        v19 = (_QWORD *)(AUChannelSpecificDelay::SetParameter(unsigned int,unsigned int,unsigned int,float,unsigned int)::channelIndexMapByParameterID
                       + 8 * v20);
      }
      *v19 = v12;
LABEL_40:
      v4 = ++qword_1EF136D18;
LABEL_41:
      ++v3;
    }
    while (v3 != v6);
  }
}

void sub_1B6458BC0(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  std::__hash_table<vp::vx::io::Object_ID<vp::vx::io::Node>,std::hash<vp::vx::io::Object_ID<vp::vx::io::Node>>,std::equal_to<vp::vx::io::Object_ID<vp::vx::io::Node>>,std::allocator<vp::vx::io::Object_ID<vp::vx::io::Node>>>::~__hash_table((uint64_t)&AUChannelSpecificDelay::SetParameter(unsigned int,unsigned int,unsigned int,float,unsigned int)::channelIndexMapByParameterID);
  _Unwind_Resume(a1);
}

os_log_t ___ZL30AUChannelSpecificDelayLogScopev_block_invoke()
{
  _QWORD *v0;
  os_log_t result;

  v0 = (_QWORD *)operator new();
  v0[1] = 0;
  result = os_log_create("com.apple.coreaudio", "csdelay");
  *v0 = result;
  AUChannelSpecificDelayLogScope(void)::scope = (uint64_t)v0;
  return result;
}

void AUToneMeister::~AUToneMeister(AUToneMeister *this)
{
  AUToneMeister::~AUToneMeister(this);
  JUMPOUT(0x1BCC95CE0);
}

{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;

  *(_QWORD *)this = &off_1E69DD810;
  v2 = *((_QWORD *)this + 545);
  *((_QWORD *)this + 545) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = *((_QWORD *)this + 544);
  *((_QWORD *)this + 544) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  *((_QWORD *)this + 280) = &off_1E69DF620;
  ca::concurrent::deferred_deletion_queue<DspLib::ToneMeister::Algorithm,10ul,std::default_delete<DspLib::ToneMeister::Algorithm>>::~deferred_deletion_queue((uint64_t)this + 2304);
  std::shared_ptr<vp::services::Telephony_Utility>::~shared_ptr[abi:ne180100]((uint64_t)this + 2200);
  v4 = (_QWORD *)*((_QWORD *)this + 273);
  *((_QWORD *)this + 273) = 0;
  if (v4)
    std::default_delete<DspLib::ToneMeister::CrossFade>::operator()[abi:ne180100]((uint64_t)this + 2184, v4);
  AUDspLib::~AUDspLib(this);
}

uint64_t AUToneMeister::Initialize(DspLib::AlgorithmBase **this)
{
  uint64_t v2;
  DspLib::AlgorithmBase *v3;
  AUDspLibStatus::Queue *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  DspLib::AlgorithmBase *v8;
  uint64_t *v9;
  DspLib::AlgorithmBase *v11;

  v2 = AUDspLib::Initialize((AUDspLib *)this);
  if (!(_DWORD)v2)
  {
    AUToneMeister::newToneMeister((AUToneMeister *)&v11, (uint64_t)this);
    v3 = this[544];
    this[544] = v11;
    if (v3)
      (*(void (**)(DspLib::AlgorithmBase *))(*(_QWORD *)v3 + 8))(v3);
    if (*((_BYTE *)this + 536))
    {
      if (*((_BYTE *)this + 17))
      {
        v4 = this[246];
        if (v4)
          AUDspLibStatus::Queue::push(v4, this[544]);
      }
    }
    v5 = operator new();
    v6 = *((unsigned int *)this + 452);
    LODWORD(v7) = *((_DWORD *)this + 453);
    *(_OWORD *)(v5 + 40) = 0u;
    *(_OWORD *)(v5 + 56) = 0u;
    *(_OWORD *)(v5 + 72) = 0u;
    *(double *)v5 = (double)v7;
    *(_QWORD *)(v5 + 16) = 0;
    *(_QWORD *)(v5 + 24) = 0;
    *(_QWORD *)(v5 + 8) = v6;
    *(_BYTE *)(v5 + 32) = 0;
    v8 = this[273];
    this[273] = (DspLib::AlgorithmBase *)v5;
    if (v8)
    {
      v9 = (uint64_t *)(this + 273);
      std::default_delete<DspLib::ToneMeister::CrossFade>::operator()[abi:ne180100]((uint64_t)v9, v8);
      v5 = *v9;
    }
    DspLib::ToneMeister::CrossFade::setParameters(v5, 0x242200000uLL);
  }
  return v2;
}

void AUToneMeister::Cleanup(AUToneMeister *this)
{
  unsigned __int8 *v2;

  v2 = (unsigned __int8 *)this + 2176;
  atomic_store(0, (unsigned __int8 *)this + 2176);
  caulk::concurrent::messenger::drain(*((caulk::concurrent::messenger **)this + 275));
  atomic_store(1u, v2);
  AUDspLib::Cleanup(this);
}

uint64_t AUToneMeister::Reset(AUToneMeister *this)
{
  uint64_t v2;
  uint64_t v3;

  if (*((_BYTE *)this + 17))
  {
    caulk::pooled_semaphore_mutex::_lock((AUToneMeister *)((char *)this + 1824));
    v2 = *((_QWORD *)this + 544);
    if (v2)
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 152))(v2);
    v3 = *((_QWORD *)this + 273);
    if (v3)
    {
      *(_QWORD *)(v3 + 16) = 0;
      *(_BYTE *)(v3 + 32) = 0;
    }
    caulk::pooled_semaphore_mutex::_unlock((AUToneMeister *)((char *)this + 1824));
  }
  SimpleMeters::Reset((uint64_t)this + 1832);
  return 0;
}

void sub_1B6458E78(_Unwind_Exception *a1)
{
  caulk::pooled_semaphore_mutex *v1;

  caulk::pooled_semaphore_mutex::_unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t AUToneMeister::GetPropertyInfo(AUToneMeister *this, int a2, unsigned int a3, unsigned int a4, unsigned int *a5, BOOL *a6)
{
  uint64_t result;
  unsigned int v7;

  if (a2 <= 6619)
  {
    if (a2 == 6602)
    {
      result = 0;
      *a6 = 1;
      v7 = 4;
      goto LABEL_9;
    }
    if (a2 == 6604)
    {
      result = 0;
      *a6 = 1;
      v7 = 8;
LABEL_9:
      *a5 = v7;
      return result;
    }
    return AUDspLib::GetPropertyInfo(this, a2, a3, a4, a5, a6);
  }
  if (a2 == 6620)
  {
    if (a3)
      return 4294956430;
  }
  else if (a2 != 1718773107)
  {
    return AUDspLib::GetPropertyInfo(this, a2, a3, a4, a5, a6);
  }
  result = 0;
  *a5 = 8;
  *a6 = 1;
  return result;
}

uint64_t AUToneMeister::GetProperty(AUToneMeister *this, int a2, unsigned int a3, unsigned int a4, _DWORD *a5, int *a6)
{
  void *v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  double v13;
  double v14;
  double v15;
  DspLib *v16;
  float v17;
  int v18;
  void *v20;
  int v21;
  float v22;
  int v23;
  const __CFString *v24;
  void *v25;
  const __CFString *v26;
  _QWORD v27[2];

  v27[1] = *MEMORY[0x1E0C80C00];
  if (a2 > 6619)
  {
    if (a2 == 6620)
    {
      if (a3)
        return 4294956430;
      v24 = CFSTR("counterSetPropertyDspLibDictionary");
      objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", *((unsigned int *)this + 549));
      v20 = (void *)objc_claimAutoreleasedReturnValue();
      v25 = v20;
      objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v25, &v24, 1);
      *(_QWORD *)a5 = objc_claimAutoreleasedReturnValue();

      return 0;
    }
    if (a2 == 1718773107)
    {
      v11 = (_QWORD *)*((_QWORD *)this + 544);
      if (v11)
      {
        v12 = v11 + 411;
        v23 = *((_DWORD *)this + 543);
        v21 = 0;
        v22 = 0.0;
        v13 = (*(double (**)(_QWORD *))(*v11 + 40))(v11);
        DspLib::Biquad::amplitudeAndPhaseResponse(v12, (uint64_t)&v23, 1uLL, (uint64_t)&v22, 1, (uint64_t)&v21, 1, a4, v13, v14, v15);
        v17 = DspLib::amp2dBSafe(v16, v22, 0.000001);
        v10 = 0;
        v18 = v21;
        *(float *)a5 = v17;
        a5[1] = v18;
        return v10;
      }
    }
    return AUDspLib::GetProperty(this, a2, a3, a4, (CFDictionaryRef *)a5, a6);
  }
  if (a2 == 6602)
  {
    v10 = 0;
    *a5 = *((_DWORD *)this + 548);
    return v10;
  }
  if (a2 != 6604)
    return AUDspLib::GetProperty(this, a2, a3, a4, (CFDictionaryRef *)a5, a6);
  v26 = CFSTR("channelSplitMode");
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInt:", *((unsigned int *)this + 548));
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v27[0] = v8;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v27, &v26, 1);
  v9 = objc_claimAutoreleasedReturnValue();

  v10 = 0;
  *(_QWORD *)a5 = v9;
  return v10;
}

void sub_1B6459134(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t AUToneMeister::SetProperty(AUToneMeister *this, unsigned int a2, unsigned int a3, unsigned int a4, const void *a5)
{
  uint64_t v5;
  int v6;
  int v7;
  unsigned int v8;
  id *v9;
  void *v10;
  int *v11;
  int v12;
  uint64_t v13;
  id v14;
  void *v15;
  float v16;
  uint64_t v17;
  int *v18;
  int v19;
  id v20;
  NSDictionary *v21;
  uint64_t v22;
  NSObject *v23;
  BOOL *v24;
  void *v25;
  unint64_t v26;
  NSObject *v27;
  uint64_t v29;
  char v30;
  uint8_t *v31;
  int v32;
  uint8_t buf[48];
  uint64_t v34;
  int v35;
  uint64_t v36;
  uint64_t v37;

  MEMORY[0x1E0C80A78](this);
  v12 = v6;
  v13 = v5;
  v37 = *MEMORY[0x1E0C80C00];
  if (v6 <= 6619)
  {
    if (v6 == 6602)
    {
      if ((_DWORD)v10 == 4)
      {
        *(_DWORD *)(v5 + 2192) = *(_DWORD *)v9;
        AUToneMeister::enqueueNewToneMeister(v5);
        return 0;
      }
      return 4294956445;
    }
    if (v6 == 6604)
    {
      if ((_DWORD)v10 == 8)
      {
        v14 = *v9;
        applesauce::dispatch::v1::queue::get(*v9);
        objc_msgSend((id)objc_claimAutoreleasedReturnValue(), "objectForKeyedSubscript:", CFSTR("channelSplitMode"));
        v15 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)(v13 + 2192) = objc_msgSend(v15, "intValue");
        AUToneMeister::enqueueNewToneMeister(v13);

        return 0;
      }
      return 4294956445;
    }
    goto LABEL_21;
  }
  if (v6 == 6620)
  {
    v18 = *(int **)(v5 + 2144);
    if (v18 == *(int **)(v5 + 2152) || (v19 = *v18) == 0)
    {
      toneMeisterLog();
      v23 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)buf = 0;
        _os_log_error_impl(&dword_1B5ED0000, v23, OS_LOG_TYPE_ERROR, "SetProperty( kAudioUnitProperty_DspLibDictionary) Error: AU has zero channels, uninitialized?\n", buf, 2u);
      }

      return 4294956429;
    }
    v20 = *v9;
    if (!v20)
    {
      toneMeisterLog();
      v21 = (NSDictionary *)objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(&v21->super, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)buf = 0;
        _os_log_error_impl(&dword_1B5ED0000, &v21->super, OS_LOG_TYPE_ERROR, "SetProperty( kAudioUnitProperty_DspLibDictionary) Error data\n", buf, 2u);
      }
      v17 = 4294956417;
      goto LABEL_45;
    }
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) != 0)
    {
      *(_QWORD *)buf = 200;
      objc_msgSend(MEMORY[0x1E0CB38B0], "propertyListWithData:options:format:error:", v20, 0, buf, 0);
      v21 = (NSDictionary *)objc_claimAutoreleasedReturnValue();
      if (!v21)
      {
        v17 = 0;
LABEL_46:

        return v17;
      }
    }
    else
    {
      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) == 0)
      {
        toneMeisterLog();
        v21 = (NSDictionary *)objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(&v21->super, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)buf = 0;
          _os_log_error_impl(&dword_1B5ED0000, &v21->super, OS_LOG_TYPE_ERROR, "SetProperty( kAudioUnitProperty_DspLibDictionary) Error: unknown plist format\n", buf, 2u);
        }
        goto LABEL_44;
      }
      v21 = (NSDictionary *)v20;
    }
    DspLib::ToneMeister::Algorithm::Algorithm((DspLib::ToneMeister::Algorithm *)buf);
    v31 = buf;
    v32 = v19;
    v30 = 0;
    AUToneMeisterParameterImporter::importParameters((DspLib::ToneMeister::Algorithm **)&v31, v21, &v30, v24);
    v25 = (void *)objc_claimAutoreleasedReturnValue();
    if (v30)
    {
      atomic_store(0, (unsigned __int8 *)(v13 + 2176));
      if (*(_DWORD *)(v13 + 1756))
      {
        v26 = 0;
        do
        {
          (*(void (**)(uint64_t, unint64_t, _QWORD, _QWORD, _QWORD, float))(*(_QWORD *)v13 + 152))(v13, v26, 0, 0, 0, *(float *)(v34 + 4 * *(unsigned int *)(*(_QWORD *)(v13 + 1688) + 4 * v26)));
          ++v26;
        }
        while (v26 < *(unsigned int *)(v13 + 1756));
      }
      atomic_store(1u, (unsigned __int8 *)(v13 + 2176));
      ++*(_DWORD *)(v13 + 2196);
      AUToneMeister::enqueueNewToneMeister(v13);
    }
    else
    {
      toneMeisterLog();
      v27 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v27, OS_LOG_TYPE_ERROR))
      {
        v29 = objc_msgSend(objc_retainAutorelease(v25), "cStringUsingEncoding:", 4);
        v35 = 136315138;
        v36 = v29;
        _os_log_error_impl(&dword_1B5ED0000, v27, OS_LOG_TYPE_ERROR, "SetProperty( kAudioUnitProperty_DspLibDictionary) Error : importer : %s\n", (uint8_t *)&v35, 0xCu);
      }

    }
    DspLib::ToneMeister::Algorithm::~Algorithm((DspLib::ToneMeister::Algorithm *)buf);
LABEL_44:
    v17 = 0;
LABEL_45:

    goto LABEL_46;
  }
  if (v6 != 1718773107)
  {
LABEL_21:
    v22 = AUDspLib::SetProperty((AUDspLib *)v5, v6, v7, v8, (int *)v9, v10, v11);
    v17 = v22;
    if (v12 == 6601 && !(_DWORD)v22)
      AUToneMeister::enqueueNewToneMeister(v13);
    return v17;
  }
  v16 = 0.0;
  if (*(float *)v9 >= 0.0)
  {
    v16 = (float)(*(_DWORD *)(v5 + 1812) >> 1);
    if (*(float *)v9 <= v16)
      v16 = *(float *)v9;
  }
  v17 = 0;
  *(float *)(v5 + 2172) = v16;
  return v17;
}

void sub_1B6459594(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  va_list va;

  va_start(va, a5);
  v9 = v7;

  DspLib::ToneMeister::Algorithm::~Algorithm((DspLib::ToneMeister::Algorithm *)va);
  _Unwind_Resume(a1);
}

uint64_t AUToneMeister::SetParameter(AUToneMeister *this, unsigned int a2, unsigned int a3, uint64_t a4, float a5)
{
  ausdk::AUScope *Scope;
  ausdk::AUElement *Element;
  float Parameter;
  DspLib *v13;
  BOOL isEqual;
  uint64_t v15;
  uint64_t v16;
  char v17;

  Scope = (ausdk::AUScope *)ausdk::AUBase::GetScope(this, a3);
  Element = (ausdk::AUElement *)ausdk::AUScope::SafeGetElement(Scope, a4);
  Parameter = ausdk::AUElement::GetParameter(Element, a2);
  isEqual = DspLib::isEqual(v13, a5, Parameter, 1.0e-20);
  v15 = AUDspLib::SetParameter(this, a2, a3, a4, a5);
  v16 = v15;
  if (a2 == 3)
    *((float *)this + 542) = a5;
  if ((_DWORD)v15)
    v17 = 1;
  else
    v17 = isEqual;
  if ((v17 & 1) == 0)
    AUToneMeister::enqueueNewToneMeister((uint64_t)this);
  return v16;
}

uint64_t AUToneMeister::ProcessBufferLists(AUToneMeister *this, unsigned int *a2, const AudioBufferList *a3, AudioBufferList *a4, unsigned int a5)
{
  uint64_t result;
  unint64_t v10;
  void **p_mData;
  void **i;
  unsigned int *v13;
  unint64_t v14;
  char v15;
  char v16;
  const DspLib::ToneMeister::Algorithm *v17;
  char v18;
  unint64_t v19;
  uint64_t v20;
  float *const *v21;
  size_t v22;
  unsigned int *v23;
  uint64_t v24;
  void **v25;
  float **v26;
  uint64_t v27;
  float *v28;
  DspLibBuffer *v29;
  uint64_t cycle_count;
  uint64_t v31;
  uint64_t v32;
  float *v33;
  unsigned int v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unsigned int j;
  _DWORD *v39;
  unsigned int v40;
  float *v41;
  float *v42;
  float *v43;
  const float *v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  BOOL v48;
  BOOL v49;
  uint64_t v50;
  _QWORD v52[12];
  _BYTE v53[96];
  uint64_t v54;

  v54 = *MEMORY[0x1E0C80C00];
  if (*((_DWORD *)this + 452) < a5)
    return 4294956422;
  if (!*((_BYTE *)this + 17))
    return 4294956429;
  result = SimpleMeters::ProcessInputBufferList((AUToneMeister *)((char *)this + 1832), a5, a3);
  if (!(_DWORD)result)
  {
    if (a3 != a4)
    {
      v10 = 0;
      p_mData = &a3->mBuffers[0].mData;
      for (i = &a4->mBuffers[0].mData; ; i += 2)
      {
        v13 = (unsigned int *)*((_QWORD *)this + 268);
        v14 = v13 == *((unsigned int **)this + 269) ? 0 : *v13;
        if (v10 >= v14)
          break;
        result = (uint64_t)*i;
        if (*p_mData != *i)
          result = (uint64_t)memcpy((void *)result, *p_mData, 4 * a5);
        ++v10;
        p_mData += 2;
      }
    }
    if (!*((_BYTE *)this + 2113))
    {
      v15 = *(_BYTE *)(*((_QWORD *)this + 273) + 32);
      if (v15)
        goto LABEL_22;
      do
      {
        v16 = v15;
        result = ca::concurrent::deferred_deletion_queue<DspLib::ToneMeister::Algorithm,10ul,std::default_delete<DspLib::ToneMeister::Algorithm>>::pop((uint64_t)this + 2304, (uint64_t *)this + 545);
        v15 = 1;
      }
      while ((result & 1) != 0);
      if ((v16 & 1) == 0)
      {
LABEL_22:
        v18 = 0;
      }
      else
      {
        v17 = (const DspLib::ToneMeister::Algorithm *)*((_QWORD *)this + 544);
        result = *((_QWORD *)this + 545);
        *((_QWORD *)this + 544) = result;
        *((_QWORD *)this + 545) = v17;
        v18 = 1;
        if (result && v17)
          DspLib::ToneMeister::Algorithm::copyStatesFrom((DspLib::ToneMeister::Algorithm *)result, v17);
      }
      MEMORY[0x1E0C80A78](result);
      v21 = (float *const *)((char *)&v52[-1] - v20);
      if (v19 >= 0x200)
        v22 = 512;
      else
        v22 = v19;
      bzero((char *)&v52[-1] - v20, v22);
      v23 = (unsigned int *)*((_QWORD *)this + 268);
      if (v23 == *((unsigned int **)this + 269))
      {
        LODWORD(v24) = 0;
      }
      else
      {
        v24 = *v23;
        if ((_DWORD)v24)
        {
          v25 = &a4->mBuffers[0].mData;
          v26 = (float **)v21;
          v27 = v24;
          do
          {
            v28 = (float *)*v25;
            v25 += 2;
            *v26++ = v28;
            --v27;
          }
          while (v27);
        }
      }
      DspLibBuffer::DspLibBuffer((DspLibBuffer *)v53, v21, a5, v24);
      if ((v18 & 1) != 0 || *(_BYTE *)(*((_QWORD *)this + 273) + 32))
      {
        if (DspLibBuffer::numChannels(v29) == 1)
          cycle_count = vp::utility::CPU_Profiler::get_cycle_count((vp::utility::CPU_Profiler *)v53);
        else
          cycle_count = ((vp::utility::CPU_Profiler::get_cycle_count((vp::utility::CPU_Profiler *)v53) - 1) & 0xFFFFFFFFFFFFFFFCLL)
                      + 4;
        v31 = DspLibBuffer::numChannels((DspLibBuffer *)v53);
        MEMORY[0x1E0C80A78](v31);
        v33 = (float *)((char *)&v52[-1] - v32);
        v34 = DspLibBuffer::numChannels((DspLibBuffer *)v53);
        DspLibBuffer::DspLibBuffer((DspLibBuffer *)v52, v33, cycle_count, v34, 1);
        v35 = vp::utility::CPU_Profiler::get_cycle_count((vp::utility::CPU_Profiler *)v53);
        DspLibBuffer::setNumFrames(v52, v35);
        v36 = *((_QWORD *)this + 544);
        if (v36)
          (*(void (**)(uint64_t, _BYTE *, _QWORD *, uint64_t, uint64_t))(*(_QWORD *)v36 + 160))(v36, v53, v52, 1, 1);
        v37 = *((_QWORD *)this + 545);
        if (v37)
        {
          (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v37 + 168))(v37, v53);
          AUDspLib::enqueueStatusForInstance(this, 0, *((DspLib::AlgorithmBase **)this + 545), a5);
        }
        for (j = 0; ; ++j)
        {
          v39 = (_DWORD *)*((_QWORD *)this + 268);
          v40 = v39 == *((_DWORD **)this + 269) ? 0 : *v39;
          if (j >= v40)
            break;
          v41 = (float *)DspLibBuffer::channel((DspLibBuffer *)v52, j);
          DspLib::multiply(v41, a5, (const float *)(*(_QWORD *)(*((_QWORD *)this + 273) + 40)+ 4 * *(_QWORD *)(*((_QWORD *)this + 273) + 16)));
          v42 = (float *)DspLibBuffer::channel((DspLibBuffer *)v53, j);
          DspLib::multiply(v42, a5, (const float *)(*(_QWORD *)(*((_QWORD *)this + 273) + 64)+ 4 * *(_QWORD *)(*((_QWORD *)this + 273) + 16)));
          v43 = (float *)DspLibBuffer::channel((DspLibBuffer *)v53, j);
          v44 = (const float *)DspLibBuffer::channel((DspLibBuffer *)v52, j);
          DspLib::add(v43, a5, v44);
        }
        v45 = *((_QWORD *)this + 273);
        v46 = *(_QWORD *)(v45 + 24);
        v47 = *(_QWORD *)(v45 + 16) + a5;
        v48 = v47 >= v46;
        v49 = v47 < v46;
        if (v48)
          v47 = 0;
        *(_QWORD *)(v45 + 16) = v47;
        *(_BYTE *)(v45 + 32) = v49;
        DspLibBuffer::~DspLibBuffer((DspLibBuffer *)v52);
      }
      else
      {
        v50 = *((_QWORD *)this + 544);
        if (v50)
        {
          (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v50 + 168))(v50, v53);
          AUDspLib::enqueueStatusForInstance(this, 0, *((DspLib::AlgorithmBase **)this + 544), a5);
        }
      }
      DspLibBuffer::~DspLibBuffer((DspLibBuffer *)v53);
    }
    SimpleMeters::ProcessOutputBufferList((AUToneMeister *)((char *)this + 1832), a5, a4);
    return 0;
  }
  return result;
}

void sub_1B6459B1C(_Unwind_Exception *a1)
{
  uint64_t v1;

  DspLibBuffer::~DspLibBuffer((DspLibBuffer *)(v1 - 184));
  _Unwind_Resume(a1);
}

uint64_t AUToneMeister::RestoreState(OpaqueAudioComponentInstance **this, const void *a2)
{
  uint64_t v3;

  v3 = AUDspLib::RestoreState(this, a2);
  if (!(_DWORD)v3)
  {
    (*((void (**)(OpaqueAudioComponentInstance **, uint64_t, _QWORD, _QWORD, _QWORD, float))*this + 19))(this, 3, 0, 0, 0, *((float *)this + 542));
    AUToneMeister::enqueueNewToneMeister((uint64_t)this);
  }
  return v3;
}

uint64_t AUToneMeister::GetParameterValueStrings(AUToneMeister *this, unsigned int a2, unsigned int a3, const __CFArray **a4)
{
  DspLib::ToneMeister::Parameters *v5;
  char **v6;
  uint64_t v7;
  __CFArray *v8;
  uint64_t result;

  if (!a4)
    return 0;
  v5 = (DspLib::ToneMeister::Parameters *)*(unsigned int *)(*((_QWORD *)this + 211) + 4 * a3);
  if (DspLib::ToneMeister::Parameters::isAutomatedFilterStateParameter(v5))
  {
    v6 = _ZGRN6DspLib11ToneMeister10ParametersL26kAutomatedFilterStateNamesE__2038;
    v7 = 3;
LABEL_4:
    v8 = AUDspLib::CFArrayOfStringsCreateWithCArrayOfStrings((const char **)v6, (const char *const *)v7);
    result = 0;
    *a4 = v8;
    return result;
  }
  if (DspLib::ToneMeister::Parameters::isFilterParameter(v5))
  {
    if (DspLib::ToneMeister::Parameters::filterParameter(v5) == 1)
    {
      v6 = _ZGRN6DspLib11ToneMeister10ParametersL16kFilterTypeNamesE__2042;
      v7 = 22;
      goto LABEL_4;
    }
    if (!DspLib::ToneMeister::Parameters::filterParameter(v5))
    {
      v6 = _ZGRN6DspLib11ToneMeister10ParametersL17kFilterStateNamesE_;
      v7 = 8;
      goto LABEL_4;
    }
  }
  return 4294956418;
}

double AUToneMeister::GetLatency(AUToneMeister *this)
{
  return 0.0;
}

uint64_t AUToneMeister::Version(AUToneMeister *this)
{
  return 394240;
}

uint64_t AUToneMeister::newDspLibAlgorithm(AUToneMeister *this)
{
  return 0;
}

uint64_t AUToneMeister::numStatus(AUToneMeister *this)
{
  return 159;
}

uint64_t AUToneMeister::algorithm(AUToneMeister *this, int a2)
{
  if (a2)
    return 0;
  else
    return *((_QWORD *)this + 544);
}

uint64_t AUToneMeister::enqueueNewToneMeister(uint64_t this)
{
  unsigned __int8 v1;
  uint64_t v2;
  caulk::concurrent::messenger *v3;
  uint64_t v4;

  v1 = atomic_load((unsigned __int8 *)(this + 2176));
  if ((v1 & 1) != 0)
  {
    v2 = this;
    if (*(_BYTE *)(this + 17))
    {
      v3 = *(caulk::concurrent::messenger **)(this + 2200);
      v4 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)*MEMORY[0x1E0DDB688] + 16))(*MEMORY[0x1E0DDB688], 40, 8);
      *(_DWORD *)(v4 + 16) = 0;
      *(_QWORD *)(v4 + 24) = v2;
      *(_QWORD *)v4 = &off_1E69DF6A0;
      *(_QWORD *)(v4 + 8) = 0;
      return caulk::concurrent::messenger::enqueue(v3, (caulk::concurrent::message *)v4);
    }
  }
  return this;
}

void caulk::concurrent::details::rt_message_call<AUToneMeister::enqueueNewToneMeister(void)::$_0>::~rt_message_call(caulk::concurrent::message *a1)
{
  caulk::concurrent::message::~message(a1);
  JUMPOUT(0x1BCC95CECLL);
}

caulk::concurrent::message **caulk::concurrent::details::rt_message_call<AUToneMeister::enqueueNewToneMeister(void)::$_0>::perform(caulk::concurrent::message *a1)
{
  uint64_t v1;
  unsigned __int8 v2;
  uint64_t v3;
  unsigned __int8 *v4;
  uint64_t v5;
  uint64_t v6;
  caulk::concurrent::message *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v8 = a1;
  v1 = *((_QWORD *)a1 + 3);
  v2 = atomic_load((unsigned __int8 *)(v1 + 2176));
  if ((v2 & 1) != 0)
  {
    AUToneMeister::newToneMeister((AUToneMeister *)&v9, v1);
    v10 = 0;
    v3 = v1 + 2304;
    while (ca::concurrent::deferred_deletion_queue<DspLib::ToneMeister::Algorithm,10ul,std::default_delete<DspLib::ToneMeister::Algorithm>>::pop(v1 + 2304, &v10));
    if (!v9)
      __assert_rtn("push", "deferred_deletion_queue.h", 71, "ioObject");
    v4 = (unsigned __int8 *)(v1 + 4289);
    do
      __ldaxr(v4);
    while (__stlxr(1u, v4));
    v5 = v1 + 2368;
    v6 = v9;
    v11 = v9;
    if (boost::lockfree::queue<std::vector<std::vector<float>> *,boost::lockfree::capacity<10ul>>::do_push<false>(v5, &v11))
    {
      v6 = 0;
      v9 = 0;
    }
    ca::concurrent::deferred_deletion_queue<DspLib::ToneMeister::Algorithm,10ul,std::default_delete<DspLib::ToneMeister::Algorithm>>::drain_trash(v3);
    if (v10)
      (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
    if (v6)
      (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  }
  return caulk::concurrent::details::rt_message_call<AUToneMeister::enqueueNewToneMeister(void)::$_0>::rt_cleanup::~rt_cleanup(&v8);
}

void sub_1B6459E28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, caulk::concurrent::message *a9)
{
  caulk::concurrent::details::rt_message_call<AUToneMeister::enqueueNewToneMeister(void)::$_0>::rt_cleanup::~rt_cleanup(&a9);
  _Unwind_Resume(a1);
}

caulk::concurrent::message **caulk::concurrent::details::rt_message_call<AUToneMeister::enqueueNewToneMeister(void)::$_0>::rt_cleanup::~rt_cleanup(caulk::concurrent::message **a1)
{
  caulk::concurrent::message *v2;

  v2 = *a1;
  caulk::concurrent::message::~message(*a1);
  (*(void (**)(_QWORD, caulk::concurrent::message *, uint64_t, uint64_t))(*(_QWORD *)*MEMORY[0x1E0DDB688] + 24))(*MEMORY[0x1E0DDB688], v2, 40, 8);
  return a1;
}

uint64_t AUToneMeister::newToneMeister(AUToneMeister *this, uint64_t a2)
{
  DspLib::ToneMeister::Algorithm *v4;
  unint64_t v5;
  unsigned int *v6;
  uint64_t v7;

  v4 = (DspLib::ToneMeister::Algorithm *)operator new();
  DspLib::ToneMeister::Algorithm::Algorithm(v4);
  *(_QWORD *)this = v4;
  DspLib::ToneMeister::Algorithm::setChannelLinkMode(v4, *(_DWORD *)(a2 + 2192) != 1);
  (*(void (**)(DspLib::ToneMeister::Algorithm *))(*(_QWORD *)v4 + 144))(v4);
  (*(void (**)(DspLib::ToneMeister::Algorithm *, _QWORD))(*(_QWORD *)v4 + 200))(v4, *(unsigned __int8 *)(a2 + 536));
  v6 = *(unsigned int **)(a2 + 2144);
  if (v6 == *(unsigned int **)(a2 + 2152))
    v7 = 0;
  else
    v7 = *v6;
  LODWORD(v5) = *(_DWORD *)(a2 + 1812);
  return (*(uint64_t (**)(DspLib::ToneMeister::Algorithm *, uint64_t, double))(*(_QWORD *)v4 + 16))(v4, v7, (double)v5);
}

void sub_1B6459F8C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1BCC95CEC](v1, 0x10E1C402CF1912ELL);
  _Unwind_Resume(a1);
}

BOOL ca::concurrent::deferred_deletion_queue<DspLib::ToneMeister::Algorithm,10ul,std::default_delete<DspLib::ToneMeister::Algorithm>>::pop(uint64_t a1, uint64_t *a2)
{
  _BOOL8 v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  std::runtime_error *exception;
  uint64_t v10;
  uint64_t v11;

  v11 = 0;
  v4 = boost::lockfree::queue<std::vector<std::vector<float>> *,boost::lockfree::capacity<10ul>>::pop<std::vector<std::vector<float>> *>((unsigned int *)(a1 + 64), &v11);
  if (v4)
  {
    v5 = v11;
    if (!v11)
      __assert_rtn("pop", "deferred_deletion_queue.h", 113, "pendingObject");
    v6 = *a2;
    if (*a2)
    {
      *a2 = 0;
      v10 = v6;
      if (!boost::lockfree::queue<std::vector<std::vector<float>> *,boost::lockfree::capacity<10ul>>::do_push<false>(a1 + 1024, &v10))
      {
        exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(exception, "trash queue exceeded capacity, object memory leaked");
      }
      v7 = *a2;
      *a2 = v5;
      if (v7)
        (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
    }
    else
    {
      *a2 = v11;
    }
  }
  return v4;
}

void sub_1B645A0B0(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

BOOL ca::concurrent::deferred_deletion_queue<DspLib::ToneMeister::Algorithm,10ul,std::default_delete<DspLib::ToneMeister::Algorithm>>::drain_trash(uint64_t a1)
{
  unsigned int *v1;
  _BOOL8 result;
  uint64_t v3;

  v3 = 0;
  v1 = (unsigned int *)(a1 + 1024);
  while (1)
  {
    result = boost::lockfree::queue<std::vector<std::vector<float>> *,boost::lockfree::capacity<10ul>>::pop<std::vector<std::vector<float>> *>(v1, &v3);
    if (!result)
      break;
    if (!v3)
      __assert_rtn("drain_trash", "deferred_deletion_queue.h", 146, "trashObject");
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  }
  return result;
}

DspLib::ToneMeister::Algorithm *DspLib::ToneMeister::Algorithm::Algorithm(DspLib::ToneMeister::Algorithm *this)
{
  uint64_t v2;

  v2 = DspLib::AlgorithmBase::AlgorithmBase((uint64_t)this, &DspLib::ToneMeister::Parameters::kDefault, 0x300uLL, (uint64_t)DspLib::ToneMeister::Parameters::kMinimum, 768, (uint64_t)&DspLib::ToneMeister::Parameters::kMaximum, 768);
  *(_QWORD *)v2 = &off_1E69C3FC8;
  *(_BYTE *)(v2 + 3288) = 0;
  *(_OWORD *)(v2 + 3296) = 0u;
  *(_OWORD *)(v2 + 3312) = 0u;
  *(_OWORD *)(v2 + 3328) = 0u;
  *(_OWORD *)(v2 + 3344) = 0u;
  DspLibBuffer::DspLibBuffer((DspLibBuffer *)(v2 + 3360));
  DspLibBuffer::DspLibBuffer((DspLib::ToneMeister::Algorithm *)((char *)this + 3456));
  DspLib::FFT::Filterbank::Filterbank((DspLib::ToneMeister::Algorithm *)((char *)this + 3552), 0);
  DspLibBuffer::DspLibBuffer((DspLib::ToneMeister::Algorithm *)((char *)this + 3912));
  DspLibBuffer::DspLibBuffer((DspLib::ToneMeister::Algorithm *)((char *)this + 4008));
  *((_DWORD *)this + 1026) = 0;
  *((_BYTE *)this + 4112) = 0;
  *((_DWORD *)this + 1029) = 0;
  *((_BYTE *)this + 4120) = 0;
  *((_OWORD *)this + 258) = 0u;
  *((_OWORD *)this + 259) = 0u;
  *((_OWORD *)this + 260) = 0u;
  *((_OWORD *)this + 261) = 0u;
  memcpy((char *)this + 216, &DspLib::ToneMeister::Parameters::kMaximum, 0xC00uLL);
  return this;
}

void sub_1B645A230(_Unwind_Exception *a1)
{
  _QWORD *v1;
  DspLibBuffer *v2;
  DspLibBuffer *v3;
  DspLibBuffer *v4;
  DspLib::FFT::Filterbank *v5;
  DspLibBuffer *v6;
  void *v8;

  v6 = v4;
  DspLibBuffer::~DspLibBuffer(v6);
  DspLib::FFT::Filterbank::~Filterbank(v5);
  DspLibBuffer::~DspLibBuffer(v3);
  DspLibBuffer::~DspLibBuffer(v2);
  DspLib::Biquad::Filter::~Filter((DspLib::Biquad::Filter *)(v1 + 411));
  *v1 = off_1E69C46F0;
  v8 = (void *)v1[6];
  if (v8)
  {
    v1[7] = v8;
    operator delete(v8);
  }
  _Unwind_Resume(a1);
}

id toneMeisterLog(void)
{
  unsigned __int8 v0;
  id *v1;
  int v3;

  v1 = (id *)&xmmword_1EF135FF8 + 1;
  if ((v0 & 1) == 0)
  {
    v1 = (id *)(&xmmword_1EF135FF8 + 8);
    if (v3)
    {
      toneMeisterLog(void)::log = (uint64_t)os_log_create("com.apple.coreaudio", "AUToneMeister");
      v1 = (id *)(&xmmword_1EF135FF8 + 8);
    }
  }
  return v1[424];
}

uint64_t ca::concurrent::deferred_deletion_queue<DspLib::ToneMeister::Algorithm,10ul,std::default_delete<DspLib::ToneMeister::Algorithm>>::~deferred_deletion_queue(uint64_t a1)
{
  uint64_t v3;

  *(_QWORD *)a1 = &off_1E69DF640;
  ca::concurrent::deferred_deletion_queue<DspLib::ToneMeister::Algorithm,10ul,std::default_delete<DspLib::ToneMeister::Algorithm>>::drain_trash(a1);
  v3 = 0;
  while (boost::lockfree::queue<std::vector<std::vector<float>> *,boost::lockfree::capacity<10ul>>::pop<std::vector<std::vector<float>> *>((unsigned int *)(a1 + 64), &v3))
  {
    if (v3)
      (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  }
  boost::lockfree::queue<std::vector<std::vector<float>> *,boost::lockfree::capacity<10ul>>::~queue((unsigned int *)(a1 + 1024));
  boost::lockfree::queue<std::vector<std::vector<float>> *,boost::lockfree::capacity<10ul>>::~queue((unsigned int *)(a1 + 64));
  return a1;
}

void ca::concurrent::deferred_deletion_queue<DspLib::ToneMeister::Algorithm,10ul,std::default_delete<DspLib::ToneMeister::Algorithm>>::~deferred_deletion_queue(uint64_t a1)
{
  ca::concurrent::deferred_deletion_queue<DspLib::ToneMeister::Algorithm,10ul,std::default_delete<DspLib::ToneMeister::Algorithm>>::~deferred_deletion_queue(a1);
  JUMPOUT(0x1BCC95CE0);
}

_QWORD *ca::concurrent::deferred_deletion_stash<DspLib::ToneMeister::Algorithm,10ul,std::default_delete<DspLib::ToneMeister::Algorithm>>::~deferred_deletion_stash(_QWORD *a1)
{
  *a1 = &off_1E69DF620;
  ca::concurrent::deferred_deletion_queue<DspLib::ToneMeister::Algorithm,10ul,std::default_delete<DspLib::ToneMeister::Algorithm>>::~deferred_deletion_queue((uint64_t)(a1 + 8));
  return a1;
}

void ca::concurrent::deferred_deletion_stash<DspLib::ToneMeister::Algorithm,10ul,std::default_delete<DspLib::ToneMeister::Algorithm>>::~deferred_deletion_stash(_QWORD *a1)
{
  *a1 = &off_1E69DF620;
  ca::concurrent::deferred_deletion_queue<DspLib::ToneMeister::Algorithm,10ul,std::default_delete<DspLib::ToneMeister::Algorithm>>::~deferred_deletion_queue((uint64_t)(a1 + 8));
  JUMPOUT(0x1BCC95CE0);
}

void NoiseSuppression::SNR::VPv3::~VPv3(NoiseSuppression::SNR::VPv3 *this)
{
  NoiseSuppression::SNR::VPv3::~VPv3(this);
  JUMPOUT(0x1BCC95CECLL);
}

{
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  *(_QWORD *)this = &off_1E69DF6C8;
  v2 = (void *)*((_QWORD *)this + 15);
  if (v2)
  {
    *((_QWORD *)this + 16) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 12);
  if (v3)
  {
    *((_QWORD *)this + 13) = v3;
    operator delete(v3);
  }
  v4 = (void *)*((_QWORD *)this + 8);
  if (v4)
  {
    *((_QWORD *)this + 9) = v4;
    operator delete(v4);
  }
  v5 = (void *)*((_QWORD *)this + 5);
  if (v5)
  {
    *((_QWORD *)this + 6) = v5;
    operator delete(v5);
  }
}

void NoiseSuppression::SNR::VPv3::Init(NoiseSuppression::SNR::VPv3 *this)
{
  std::vector<float>::resize((uint64_t)this + 40, *((unsigned int *)this + 8));
  std::vector<float>::resize((uint64_t)this + 64, *((unsigned int *)this + 8));
  std::vector<float>::resize((uint64_t)this + 96, *((unsigned int *)this + 22));
  std::vector<float>::resize((uint64_t)this + 120, *((unsigned int *)this + 22));
  *((_BYTE *)this + 24) = 1;
}

unsigned int *NoiseSuppression::SNR::VPv3::Process(NoiseSuppression::SNR::VPv3 *this, float *a2, float *a3, const float *a4, const float *a5, float *a6, float *a7, float *a8, float *a9, float *a10, float *a11)
{
  unsigned int *result;

  NoiseSuppression::SNR::VPv3::Core::UpdateSNR((unsigned int *)this + 8, a2, a4, a6, a8, a10);
  result = NoiseSuppression::SNR::VPv3::Core::UpdateSNR((unsigned int *)this + 22, a3, a5, a7, a9, a11);
  ++*((_DWORD *)this + 5);
  return result;
}

uint64_t NoiseSuppression::SNR::VPv3::SetVideoMode(uint64_t this, int a2)
{
  float v2;

  v2 = 0.89;
  if (a2)
    v2 = 0.19;
  *(float *)(this + 36) = v2;
  *(float *)(this + 92) = v2;
  return this;
}

unsigned int *NoiseSuppression::SNR::VPv3::Core::UpdateSNR(unsigned int *this, float *a2, const float *a3, float *a4, float *a5, float *a6)
{
  uint64_t v6;
  float *v7;
  float *v8;
  uint64_t v9;
  float v10;
  float *v11;
  float *v12;
  uint64_t v13;
  float v14;
  float v15;
  float v16;
  float *v17;
  uint64_t v18;
  float v19;
  float *v20;
  const float *v21;
  float *v22;
  float *v23;
  uint64_t v24;
  float v25;
  float v26;
  float v27;
  float *v28;
  uint64_t v29;
  float v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float v35;
  float v36;
  float v37;

  v6 = *this;
  if ((_DWORD)v6)
  {
    v7 = (float *)*((_QWORD *)this + 1);
    v8 = v7;
    v9 = *this;
    do
    {
      v10 = *a4++;
      *v8++ = v10 + 1.0e-20;
      --v9;
    }
    while (v9);
    v11 = v7;
    v12 = a6;
    v13 = v6;
    do
    {
      v14 = *a2++;
      v15 = v14;
      v16 = *v11++;
      *v12++ = (float)(v15 / v16) + -1.0;
      --v13;
    }
    while (v13);
    v17 = a6;
    v18 = v6;
    do
    {
      v19 = *v17;
      if (*v17 > 100.0)
        v19 = 100.0;
      *v17++ = v19;
      --v18;
    }
    while (v18);
    v20 = (float *)*((_QWORD *)this + 4);
    v21 = a3;
    v22 = v7;
    v23 = v20;
    v24 = v6;
    do
    {
      v25 = *v21++;
      v26 = v25;
      v27 = *v22++;
      *v23++ = (float)(1.0 - (float)(*((float *)this + 1) + 0.01))
             + (float)(*((float *)this + 1)
                     * (float)((float)(v26 / (float)(v26 + v27)) * (float)(v26 / (float)(v26 + v27))));
      --v24;
    }
    while (v24);
    v28 = a5;
    v29 = v6;
    do
    {
      v30 = *v20++;
      v31 = v30;
      v32 = *a6++;
      v33 = v32;
      if (v32 < 0.0)
        v33 = 0.0;
      v34 = *a3++;
      v35 = v34;
      v36 = *v7++;
      *v28++ = (float)((float)(1.0 - v31) * (float)(v35 / v36)) + (float)(v31 * v33);
      --v29;
    }
    while (v29);
    do
    {
      v37 = *a5;
      if (*a5 < -1.0e20)
        v37 = -1.0e20;
      if (v37 > 100.0)
        v37 = 100.0;
      *a5++ = v37;
      --v6;
    }
    while (v6);
  }
  return this;
}

void NoiseSuppression::SNR::TSNR::~TSNR(NoiseSuppression::SNR::TSNR *this)
{
  NoiseSuppression::SNR::TSNR::~TSNR(this);
  JUMPOUT(0x1BCC95CECLL);
}

{
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  *(_QWORD *)this = &off_1E69DF700;
  v2 = (void *)*((_QWORD *)this + 15);
  if (v2)
  {
    *((_QWORD *)this + 16) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 12);
  if (v3)
  {
    *((_QWORD *)this + 13) = v3;
    operator delete(v3);
  }
  v4 = (void *)*((_QWORD *)this + 8);
  if (v4)
  {
    *((_QWORD *)this + 9) = v4;
    operator delete(v4);
  }
  v5 = (void *)*((_QWORD *)this + 5);
  if (v5)
  {
    *((_QWORD *)this + 6) = v5;
    operator delete(v5);
  }
}

void NoiseSuppression::SNR::TSNR::Init(NoiseSuppression::SNR::TSNR *this)
{
  float v2;

  std::vector<float>::resize((uint64_t)this + 64, *((unsigned int *)this + 8));
  std::vector<float>::resize((uint64_t)this + 40, *((unsigned int *)this + 8));
  std::vector<float>::resize((uint64_t)this + 120, *((unsigned int *)this + 22));
  std::vector<float>::resize((uint64_t)this + 96, *((unsigned int *)this + 22));
  v2 = expf(-1.0 / (float)(*((float *)this + 36) * *((float *)this + 4)));
  *((float *)this + 9) = v2;
  *((float *)this + 23) = v2;
  *((_BYTE *)this + 24) = 1;
}

void NoiseSuppression::SNR::TSNR::Process(NoiseSuppression::SNR::TSNR *this, const float *a2, const float *a3, const float *a4, const float *a5, const float *__A, const float *a7, float *a8, float *a9, float *a10, float *a11)
{
  NoiseSuppression::SNR::TSNR::Core::UpdateSNR((NoiseSuppression::SNR::TSNR *)((char *)this + 32), a2, a4, __A, a8, a10);
  NoiseSuppression::SNR::TSNR::Core::UpdateSNR((NoiseSuppression::SNR::TSNR *)((char *)this + 88), a3, a5, a7, a9, a11);
  ++*((_DWORD *)this + 5);
}

void NoiseSuppression::SNR::SNREstimator::SetVideoMode(NoiseSuppression::SNR::SNREstimator *this)
{
  int v1;
  const char *v2;
  __int16 v3;
  int v4;
  uint64_t v5;

  v5 = *MEMORY[0x1E0C80C00];
  if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
  {
    v1 = 136315394;
    v2 = "SNREstimator.h";
    v3 = 1024;
    v4 = 56;
    _os_log_impl(&dword_1B5ED0000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "%25s:%-5d SetVideoMode was set on an SNR estimator that does not support it.", (uint8_t *)&v1, 0x12u);
  }
}

void NoiseSuppression::SNR::TSNR::Core::UpdateSNR(NoiseSuppression::SNR::TSNR::Core *this, const float *a2, const float *a3, const float *__A, float *a5, float *a6)
{
  float v11;
  float v12;
  float v13;
  float __C;
  float __B;

  __B = 1.0e-20;
  vDSP_vadd(__A, 1, &__B, 0, *((float **)this + 1), 1, *(unsigned int *)this);
  vDSP_vdiv(*((const float **)this + 1), 1, a2, 1, a6, 1, *(unsigned int *)this);
  v13 = 1.0;
  __C = 100.0;
  vDSP_vclip(a6, 1, &v13, &__C, a6, 1, *(unsigned int *)this);
  v12 = 1.0 - *((float *)this + 1);
  vDSP_vmul(a3, 1, (const float *)this + 1, 0, a5, 1, *(unsigned int *)this);
  vDSP_vdiv(*((const float **)this + 1), 1, a5, 1, a5, 1, *(unsigned int *)this);
  vDSP_vsub(&v12, 0, a5, 1, a5, 1, *(unsigned int *)this);
  vDSP_vsma(a6, 1, &v12, a5, 1, a5, 1, *(unsigned int *)this);
  v11 = 1.0;
  vDSP_vadd(a5, 1, &v11, 0, *((float **)this + 4), 1, *(unsigned int *)this);
  vDSP_vdiv(*((const float **)this + 4), 1, a5, 1, *((float **)this + 4), 1, *(unsigned int *)this);
  vDSP_vsq(*((const float **)this + 4), 1, *((float **)this + 4), 1, *(unsigned int *)this);
  vDSP_vmul(*((const float **)this + 4), 1, a2, 1, a5, 1, *(unsigned int *)this);
  vDSP_vdiv(*((const float **)this + 1), 1, a5, 1, a5, 1, *(unsigned int *)this);
}

void clsp::PilotTempSensor::~PilotTempSensor(clsp::PilotTempSensor *this)
{
  JUMPOUT(0x1BCC95CECLL);
}

_QWORD *clsp::PilotTempSensor::dump(uint64_t a1, _QWORD *a2)
{
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;

  clsp::TempSensorParams::dump(a1 + 8, a2);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"\nPTSamplePeriod = ", 18);
  v4 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"\nPTPeriodNormFactor = ", 22);
  v5 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"\nGsmooth = ", 11);
  v6 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"\nAnalysisFreq = ", 16);
  v7 = (_QWORD *)std::ostream::operator<<();
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"\n\nGoertzv:\n  ", 13);
  clsp::PwrGoertzel<float,double>::dump(a1 + 120, v8);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"\n\nGoertzi:\n  ", 13);
  clsp::PwrGoertzel<float,double>::dump(a1 + 140, v9);
  return a2;
}

void clsp::PilotTempSensor::logCoeffs(uint64_t a1, clsp::CLSP_Log **a2)
{
  uint64_t v4;
  clsp::CLSP_Log *v5;
  unint64_t *v6;
  unint64_t v7;
  __n128 v8;
  unint64_t v9;
  clsp::CLSP_Log *v10;
  float v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  clsp::CLSP_Log *v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  clsp::CLSP_Log *v23[2];
  float __src;

  v4 = a1 + 8;
  v5 = a2[1];
  v23[0] = *a2;
  v23[1] = v5;
  if (v5)
  {
    v6 = (unint64_t *)((char *)v5 + 8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
    v8.n128_f32[0] = clsp::TempSensorParams::logCoeffs(v4, v23);
    do
      v9 = __ldaxr(v6);
    while (__stlxr(v9 - 1, v6));
    if (!v9)
    {
      (*(void (**)(clsp::CLSP_Log *, __n128))(*(_QWORD *)v5 + 16))(v5, v8);
      std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v5);
    }
  }
  else
  {
    v8.n128_f32[0] = clsp::TempSensorParams::logCoeffs(v4, v23);
  }
  v10 = *a2;
  if (*a2)
  {
    __src = (float)*(unsigned int *)(a1 + 92);
    clsp::CLSP_Log::LogCLSPData(v10, &__src, 1);
    v10 = *a2;
    if (*a2)
    {
      __src = *(float *)(a1 + 96);
      clsp::CLSP_Log::LogCLSPData(v10, &__src, 1);
      v10 = *a2;
      if (*a2)
      {
        __src = *(float *)(a1 + 100);
        clsp::CLSP_Log::LogCLSPData(v10, &__src, 1);
        v10 = *a2;
        if (*a2)
        {
          v11 = *(double *)(a1 + 104);
          __src = v11;
          clsp::CLSP_Log::LogCLSPData(v10, &__src, 1);
          v10 = *a2;
        }
      }
    }
  }
  v12 = (std::__shared_weak_count *)a2[1];
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldxr(p_shared_owners);
    while (__stxr(v14 + 1, p_shared_owners));
  }
  if (v10)
  {
    __src = *(float *)(a1 + 120);
    clsp::CLSP_Log::LogCLSPData(v10, &__src, 1);
  }
  if (v12)
  {
    v15 = (unint64_t *)&v12->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *, __n128))v12->__on_zero_shared)(v12, v8);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  v17 = *a2;
  v18 = (std::__shared_weak_count *)a2[1];
  if (v18)
  {
    v19 = (unint64_t *)&v18->__shared_owners_;
    do
      v20 = __ldxr(v19);
    while (__stxr(v20 + 1, v19));
  }
  if (v17)
  {
    __src = *(float *)(a1 + 140);
    clsp::CLSP_Log::LogCLSPData(v17, &__src, 1);
  }
  if (v18)
  {
    v21 = (unint64_t *)&v18->__shared_owners_;
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *, __n128))v18->__on_zero_shared)(v18, v8);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
}

float clsp::PilotTempSensor::processBuffer(clsp::PilotTempSensor *this, const float *a2, const float *a3, unsigned int a4)
{
  float v8;
  float v9;
  float v10;
  float v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;
  float v15;
  float v16;
  float v17;
  unsigned int v18;
  BOOL v19;
  BOOL v20;
  float v21;
  BOOL v22;
  char v23;

  shouldTraceRender();
  if (a4)
  {
    v8 = *((float *)this + 10);
    v9 = *((float *)this + 11);
    v10 = *((float *)this + 13);
    v11 = *((float *)this + 14);
    while (1)
    {
      v12 = a4;
      v13 = *((_DWORD *)this + 29);
      v14 = a4 >= v13 ? v13 : a4;
      (*(void (**)(clsp::PilotTempSensor *, const float *, const float *, uint64_t))(*(_QWORD *)this + 80))(this, a2, a3, v14);
      v18 = *((_DWORD *)this + 29);
      v19 = a4 >= v18;
      a4 -= v18;
      if (!v19)
        break;
      *(_QWORD *)((char *)this + 124) = 0;
      *((_QWORD *)this + 18) = 0;
      *((_DWORD *)this + 29) = *((_DWORD *)this + 23);
      v20 = v15 <= v10 || v16 <= v11;
      if (!v20
        && ((v21 = *((float *)this + 28) + (float)(*((float *)this + 25) * (float)(v17 - *((float *)this + 28))),
             *((float *)this + 28) = v21,
             v21 > v8)
          ? (v22 = v21 < v9)
          : (v22 = 0),
            v22))
      {
        v23 = 1;
        *((_BYTE *)this + 88) = 1;
      }
      else
      {
        v23 = 0;
      }
      a2 += v14;
      *((_BYTE *)this + 89) = v23;
      a3 += v14;
      shouldTraceRender();
      if (!a4)
        return *((float *)this + 28) * *((float *)this + 12);
    }
    shouldTraceRender();
    *((_DWORD *)this + 29) -= v12;
  }
  return *((float *)this + 28) * *((float *)this + 12);
}

double clsp::PilotTempSensor::calcCoeffs(clsp::PilotTempSensor *this, double a2)
{
  char v4;
  unsigned int v5;
  unsigned int v6;
  float v7;
  double v8;
  float v9;
  double v10;
  __double2 v11;
  float v12;
  float cosval;
  float sinval;
  uint64_t v15;
  NSObject *v16;
  double v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  int v25;
  const char *v26;
  __int16 v27;
  int v28;
  __int16 v29;
  double v30;
  __int16 v31;
  uint64_t v32;
  __int16 v33;
  uint64_t v34;
  __int16 v35;
  int v36;
  __int16 v37;
  uint64_t v38;
  __int16 v39;
  int v40;
  __int16 v41;
  uint64_t v42;
  __int16 v43;
  double v44;
  __int16 v45;
  double v46;
  uint64_t v47;

  v4 = 0;
  v47 = *MEMORY[0x1E0C80C00];
  v5 = vcvtmd_u64_f64(*((double *)this + 1) * a2 + 0.5);
  do
    v6 = 1 << ++v4;
  while (1 << v4 < v5);
  *((_DWORD *)this + 23) = v6;
  v7 = 1.0 / (double)(v6 << v4);
  *((float *)this + 24) = v7;
  v8 = (double)v6;
  v9 = 1.0 - exp(-(double)v6 / (*((double *)this + 3) * a2));
  *((float *)this + 25) = v9;
  v10 = a2 / v8 * round(*((double *)this + 2) / (a2 / v8));
  *((double *)this + 13) = v10;
  v11 = __sincos_stret(v10 * 6.28318531 / a2);
  v12 = v11.__cosval + v11.__cosval;
  *((float *)this + 30) = v12;
  cosval = v11.__cosval;
  sinval = v11.__sinval;
  *((float *)this + 33) = cosval;
  *((float *)this + 34) = sinval;
  *((float *)this + 35) = v12;
  *((float *)this + 38) = cosval;
  *((float *)this + 39) = sinval;
  v15 = spp3Subsystem();
  if (v15)
  {
    if ((*(_BYTE *)(v15 + 8) & 1) != 0)
    {
      v16 = *(NSObject **)v15;
      if (*(_QWORD *)v15)
      {
        if (os_log_type_enabled(*(os_log_t *)v15, OS_LOG_TYPE_DEBUG))
        {
          v17 = *((float *)this + 28);
          v18 = *((_DWORD *)this + 23);
          v20 = *((_QWORD *)this + 3);
          v19 = *((_QWORD *)this + 4);
          v21 = *((_DWORD *)this + 29);
          v22 = *((_QWORD *)this + 1);
          v23 = *((_QWORD *)this + 2);
          v25 = 136317698;
          v26 = "PilotTempSensor.cpp";
          v27 = 1024;
          v28 = 77;
          v29 = 2048;
          v30 = v17;
          v31 = 2048;
          v32 = v19;
          v33 = 2048;
          v34 = v22;
          v35 = 1024;
          v36 = v18;
          v37 = 2048;
          v38 = v20;
          v39 = 1024;
          v40 = v21;
          v41 = 2048;
          v42 = v23;
          v43 = 2048;
          v44 = v10;
          v45 = 2048;
          v46 = a2;
          _os_log_impl(&dword_1B5ED0000, v16, OS_LOG_TYPE_DEBUG, "%25s:%-5d rebv=%f, reb20=%f desiredwin=%f, thermalsampleperiod=%d, tau=%f, cnt=%d, f_a_des=%f, f_a=%f, fs=%f", (uint8_t *)&v25, 0x64u);
        }
      }
    }
  }
  return v10;
}

double clsp::PilotTempSensor::reset(clsp::PilotTempSensor *this)
{
  float v1;
  double result;

  v1 = *((double *)this + 4);
  *((float *)this + 28) = v1;
  *((_DWORD *)this + 29) = *((_DWORD *)this + 23);
  *((_WORD *)this + 44) = 0;
  result = 0.0;
  *((_QWORD *)this + 18) = 0;
  *(_QWORD *)((char *)this + 124) = 0;
  return result;
}

float clsp::PilotTempSensor::getReb_v(clsp::PilotTempSensor *this)
{
  return *((float *)this + 28);
}

double clsp::PilotTempSensor::getAnalysisFreq(clsp::PilotTempSensor *this)
{
  return *((double *)this + 13);
}

double clsp::PilotTempSensor::getAnalysisPeriod(clsp::PilotTempSensor *this, double a2)
{
  LODWORD(a2) = *((_DWORD *)this + 23);
  return (double)*(unint64_t *)&a2;
}

float clsp::PilotTempSensor::processGoertzel(clsp::PilotTempSensor *this, float *a2, float *a3, uint64_t a4)
{
  float v7;
  float v8;

  clsp::PwrGoertzel<float,double>::processBufferReIm((float *)this + 30, a2, a4);
  v8 = *((float *)this + 24) * v7;
  clsp::PwrGoertzel<float,double>::processBufferReIm((float *)this + 35, a3, a4);
  return v8;
}

float clsp::PwrGoertzel<float,double>::processBufferReIm(float *a1, float *a2, uint64_t a3)
{
  float v3;
  float v4;
  float v5;
  float v6;
  float v7;

  if (a3)
  {
    v3 = *a1;
    v4 = a1[1];
    v5 = a1[2];
    do
    {
      v6 = v4;
      v7 = *a2++;
      v4 = (float)(v7 + (float)(v3 * v4)) - v5;
      a1[1] = v4;
      a1[2] = v6;
      v5 = v6;
      --a3;
    }
    while (a3);
  }
  else
  {
    v4 = a1[1];
    v6 = a1[2];
  }
  return -(float)(v6 - (float)(a1[3] * v4));
}

float clsp::TempSensorParams::logCoeffs(uint64_t a1, clsp::CLSP_Log **a2)
{
  clsp::CLSP_Log *v3;
  float v5;
  float result;
  clsp::CLSP_Log *v7;
  float v8;
  clsp::CLSP_Log *v9;
  float v10;
  clsp::CLSP_Log *v11;
  float v12;
  clsp::CLSP_Log *v13;
  clsp::CLSP_Log *v14;
  clsp::CLSP_Log *v15;
  clsp::CLSP_Log *v16;
  clsp::CLSP_Log *v17;
  clsp::CLSP_Log *v18;
  clsp::CLSP_Log *v19;
  float v20;
  clsp::CLSP_Log *v21;
  float v22;
  float __src;

  v3 = *a2;
  if (*a2)
  {
    v5 = *(double *)a1;
    __src = v5;
    clsp::CLSP_Log::LogCLSPData(v3, &__src, 1);
    v7 = *a2;
    if (*a2)
    {
      v8 = *(double *)(a1 + 8);
      __src = v8;
      clsp::CLSP_Log::LogCLSPData(v7, &__src, 1);
      v9 = *a2;
      if (*a2)
      {
        v10 = *(double *)(a1 + 16);
        __src = v10;
        clsp::CLSP_Log::LogCLSPData(v9, &__src, 1);
        v11 = *a2;
        if (*a2)
        {
          v12 = *(double *)(a1 + 24);
          __src = v12;
          clsp::CLSP_Log::LogCLSPData(v11, &__src, 1);
          v13 = *a2;
          if (*a2)
          {
            __src = *(float *)(a1 + 32);
            clsp::CLSP_Log::LogCLSPData(v13, &__src, 1);
            v14 = *a2;
            if (*a2)
            {
              __src = *(float *)(a1 + 36);
              clsp::CLSP_Log::LogCLSPData(v14, &__src, 1);
              v15 = *a2;
              if (*a2)
              {
                __src = *(float *)(a1 + 40);
                clsp::CLSP_Log::LogCLSPData(v15, &__src, 1);
                v16 = *a2;
                if (*a2)
                {
                  __src = *(float *)(a1 + 44);
                  clsp::CLSP_Log::LogCLSPData(v16, &__src, 1);
                  v17 = *a2;
                  if (*a2)
                  {
                    __src = *(float *)(a1 + 48);
                    clsp::CLSP_Log::LogCLSPData(v17, &__src, 1);
                    v18 = *a2;
                    if (*a2)
                    {
                      __src = (float)*(unint64_t *)(a1 + 56);
                      clsp::CLSP_Log::LogCLSPData(v18, &__src, 1);
                      v19 = *a2;
                      if (*a2)
                      {
                        v20 = *(double *)(a1 + 64);
                        __src = v20;
                        clsp::CLSP_Log::LogCLSPData(v19, &__src, 1);
                        v21 = *a2;
                        if (*a2)
                        {
                          v22 = *(double *)(a1 + 72);
                          __src = v22;
                          clsp::CLSP_Log::LogCLSPData(v21, &__src, 1);
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  return result;
}

_QWORD *clsp::TempSensorParams::dump(uint64_t a1, _QWORD *a2)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;

  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"DesiredWindowTime = ", 20);
  v3 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"\nDesiredAnalysisFreq = ", 23);
  v4 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"\nSmoothingTau = ", 16);
  v5 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"\nReb_20C = ", 11);
  v6 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"\nRebMin = ", 10);
  v7 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"\nRebMax = ", 10);
  v8 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"\nRebScale = ", 12);
  v9 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"\nVPwrThres = ", 13);
  v10 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"\nIPwrThres = ", 13);
  v11 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"\nmaxBlockSize = ", 16);
  v12 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)"\nnoiseSampleRate = ", 19);
  v13 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"\nnoiseBandLowerCorner = ", 24);
  std::ostream::operator<<();
  return a2;
}

_QWORD *clsp::PwrGoertzel<float,double>::dump(uint64_t a1, _QWORD *a2)
{
  _QWORD *v3;
  _QWORD *v4;

  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"a1 = ", 5);
  v3 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)", s1 = ", 7);
  v4 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)", s2 = ", 7);
  std::ostream::operator<<();
  return a2;
}

void clsp::BandTempSensor::~BandTempSensor(clsp::BandTempSensor *this)
{
  void *v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;

  *(_QWORD *)this = &off_1E69E0E58;
  v2 = (void *)*((_QWORD *)this + 25);
  if (v2)
  {
    *((_QWORD *)this + 26) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 22);
  if (v3)
  {
    *((_QWORD *)this + 23) = v3;
    operator delete(v3);
  }
  v4 = *((_QWORD *)this + 21);
  *((_QWORD *)this + 21) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  v5 = *((_QWORD *)this + 20);
  *((_QWORD *)this + 20) = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
}

{
  void *v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;

  *(_QWORD *)this = &off_1E69E0E58;
  v2 = (void *)*((_QWORD *)this + 25);
  if (v2)
  {
    *((_QWORD *)this + 26) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 22);
  if (v3)
  {
    *((_QWORD *)this + 23) = v3;
    operator delete(v3);
  }
  v4 = *((_QWORD *)this + 21);
  *((_QWORD *)this + 21) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  v5 = *((_QWORD *)this + 20);
  *((_QWORD *)this + 20) = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  JUMPOUT(0x1BCC95CECLL);
}

_QWORD *clsp::BandTempSensor::dump(uint64_t a1, _QWORD *a2)
{
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;

  clsp::TempSensorParams::dump(a1 + 8, a2);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"\nSamplePeriod = ", 16);
  v4 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"\nPeriodNormFactor = ", 20);
  v5 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"\nGsmooth = ", 11);
  v6 = (_QWORD *)std::ostream::operator<<();
  v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"\nDCBlkV = ", 10);
  clsp::IIROrder1<float>::dump(a1 + 120, v7);
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"\nDCBlkI = ", 10);
  clsp::IIROrder1<float>::dump(a1 + 140, v8);
  return a2;
}

void clsp::BandTempSensor::logCoeffs(uint64_t a1, clsp::CLSP_Log **a2)
{
  uint64_t v4;
  clsp::CLSP_Log *v5;
  unint64_t *v6;
  unint64_t v7;
  __n128 v8;
  unint64_t v9;
  clsp::CLSP_Log *v10;
  clsp::CLSP_Log *v11;
  clsp::CLSP_Log *v12;
  clsp::CLSP_Log *v13[2];
  float __src;

  v4 = a1 + 8;
  v5 = a2[1];
  v13[0] = *a2;
  v13[1] = v5;
  if (v5)
  {
    v6 = (unint64_t *)((char *)v5 + 8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
    v8.n128_f32[0] = clsp::TempSensorParams::logCoeffs(v4, v13);
    do
      v9 = __ldaxr(v6);
    while (__stlxr(v9 - 1, v6));
    if (!v9)
    {
      (*(void (**)(clsp::CLSP_Log *, __n128))(*(_QWORD *)v5 + 16))(v5, v8);
      std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v5);
    }
  }
  else
  {
    clsp::TempSensorParams::logCoeffs(v4, v13);
  }
  v10 = *a2;
  if (*a2)
  {
    __src = (float)*(unsigned int *)(a1 + 92);
    clsp::CLSP_Log::LogCLSPData(v10, &__src, 1);
    v11 = *a2;
    if (*a2)
    {
      __src = *(float *)(a1 + 96);
      clsp::CLSP_Log::LogCLSPData(v11, &__src, 1);
      v12 = *a2;
      if (*a2)
      {
        __src = *(float *)(a1 + 100);
        clsp::CLSP_Log::LogCLSPData(v12, &__src, 1);
      }
    }
  }
}

float clsp::BandTempSensor::processBuffer(clsp::BandTempSensor *this, const float *a2, const float *a3, uint64_t a4)
{
  unsigned int v8;
  unint64_t v9;
  const float *v10;
  const float *v11;
  uint64_t v12;
  float v13;
  float v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float v19;
  float v20;
  unsigned int v21;
  vDSP_Length v22;
  float v23;
  float v24;
  unsigned int v25;
  unsigned int v26;
  float v27;
  float v28;
  float v29;
  float v31;
  float v32;
  char v34;
  uint64_t __C;
  int v37;
  unsigned int v38;
  int v39;
  int v40;

  shouldTraceRender();
  v39 = a4;
  v40 = a4;
  v38 = (*(uint64_t (**)(_QWORD, uint64_t))(**((_QWORD **)this + 20) + 144))(*((_QWORD *)this + 20), a4);
  v37 = (*(uint64_t (**)(_QWORD, uint64_t))(**((_QWORD **)this + 21) + 144))(*((_QWORD *)this + 21), a4);
  (*(void (**)(_QWORD, const float *, _QWORD, _QWORD, _QWORD, int *, unsigned int *, uint64_t, uint64_t))(**((_QWORD **)this + 20) + 32))(*((_QWORD *)this + 20), a2, 0, *((_QWORD *)this + 22), 0, &v40, &v38, 1, 1);
  (*(void (**)(_QWORD, const float *, _QWORD, _QWORD, _QWORD, int *, int *, uint64_t, uint64_t))(**((_QWORD **)this + 21) + 32))(*((_QWORD *)this + 21), a3, 0, *((_QWORD *)this + 25), 0, &v39, &v37, 1, 1);
  v8 = v38;
  if (v38)
  {
    v9 = 0;
    v10 = (const float *)*((_QWORD *)this + 22);
    v11 = (const float *)*((_QWORD *)this + 25);
    v12 = 4 * v38;
    do
    {
      v13 = v10[v9 / 4];
      v14 = (float)((float)(*((float *)this + 32) * *((float *)this + 33)) + (float)(v13 * *((float *)this + 31)))
          - (float)(*((float *)this + 34) * *((float *)this + 30));
      *((float *)this + 33) = v13;
      *((float *)this + 34) = v14;
      v10[v9 / 4] = v14;
      v15 = v11[v9 / 4];
      v16 = (float)((float)(*((float *)this + 37) * *((float *)this + 38)) + (float)(v15 * *((float *)this + 36)))
          - (float)(*((float *)this + 39) * *((float *)this + 35));
      *((float *)this + 38) = v15;
      *((float *)this + 39) = v16;
      v11[v9 / 4] = v16;
      v9 += 4;
    }
    while (v12 != v9);
    v17 = *((float *)this + 10);
    v18 = *((float *)this + 11);
    v19 = *((float *)this + 13);
    v20 = *((float *)this + 14);
    while (1)
    {
      v21 = *((_DWORD *)this + 29);
      v22 = v8 >= v21 ? v21 : v8;
      __C = 0;
      vDSP_svesq(v10, 1, (float *)&__C + 1, v22);
      vDSP_svesq(v11, 1, (float *)&__C, v22);
      v23 = *((float *)&__C + 1) + *((float *)this + 27);
      v24 = *(float *)&__C + *((float *)this + 28);
      *((float *)this + 27) = v23;
      *((float *)this + 28) = v24;
      v25 = *((_DWORD *)this + 29);
      v26 = v8 - v25;
      if (v8 < v25)
        break;
      v27 = *((float *)this + 24);
      v28 = v23 * v27;
      v29 = v24 * v27;
      if (v28 <= v19 || v29 <= v20)
        goto LABEL_19;
      v31 = v23 / v24;
      if (v31 < 0.0)
        v31 = 0.0;
      v32 = *((float *)this + 26) + (float)(*((float *)this + 25) * (float)(sqrtf(v31) - *((float *)this + 26)));
      *((float *)this + 26) = v32;
      if (v32 > v17 && v32 < v18)
      {
        v34 = 1;
        *((_BYTE *)this + 88) = 1;
      }
      else
      {
LABEL_19:
        v34 = 0;
      }
      v10 += v22;
      v11 += v22;
      *((_BYTE *)this + 89) = v34;
      *((_DWORD *)this + 27) = 0;
      *((_DWORD *)this + 28) = 0;
      *((_DWORD *)this + 29) = *((_DWORD *)this + 23);
      shouldTraceRender();
      v8 = v26;
      if (!v26)
        return *((float *)this + 26) * *((float *)this + 12);
    }
    shouldTraceRender();
    *((_DWORD *)this + 29) -= v8;
  }
  return *((float *)this + 26) * *((float *)this + 12);
}

double clsp::BandTempSensor::calcCoeffs(clsp::BandTempSensor *this, double a2)
{
  double v4;
  long double v5;
  double v6;
  unsigned int v7;
  float v8;

  v4 = *((double *)this + 9);
  v5 = exp(*((double *)this + 10) * -6.28318531 / v4);
  v6 = *((double *)this + 1) * v4 + 0.5;
  *(float *)&v5 = v5;
  *(float *)&v5 = -*(float *)&v5;
  *((_DWORD *)this + 30) = LODWORD(v5);
  *(_QWORD *)((char *)this + 124) = 0xBF8000003F800000;
  *((_DWORD *)this + 35) = LODWORD(v5);
  v7 = vcvtmd_u64_f64(v6);
  *((_QWORD *)this + 18) = 0xBF8000003F800000;
  *((_DWORD *)this + 23) = v7;
  *(float *)&v6 = 1.0 / (double)v7;
  *((_DWORD *)this + 24) = LODWORD(v6);
  v8 = 1.0 - exp(-(double)v7 / (*((double *)this + 3) * a2));
  *((float *)this + 25) = v8;
  return 0.0;
}

uint64_t clsp::BandTempSensor::reset(clsp::BandTempSensor *this)
{
  float v2;

  v2 = *((double *)this + 4);
  *((float *)this + 26) = v2;
  *((_WORD *)this + 44) = 0;
  *(_QWORD *)((char *)this + 108) = 0;
  *((_DWORD *)this + 29) = *((_DWORD *)this + 23);
  *(_QWORD *)((char *)this + 132) = 0;
  *((_QWORD *)this + 19) = 0;
  (*(void (**)(_QWORD))(**((_QWORD **)this + 20) + 88))(*((_QWORD *)this + 20));
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 21) + 88))(*((_QWORD *)this + 21));
}

float clsp::BandTempSensor::getReb_v(clsp::BandTempSensor *this)
{
  return *((float *)this + 26);
}

double clsp::BandTempSensor::getAnalysisFreq(clsp::BandTempSensor *this)
{
  return *((double *)this + 2);
}

double clsp::BandTempSensor::getAnalysisPeriod(clsp::BandTempSensor *this, double a2)
{
  LODWORD(a2) = *((_DWORD *)this + 23);
  return (double)*(unint64_t *)&a2;
}

void clsp::CLSPKernel_v3::~CLSPKernel_v3(clsp::CLSPKernel_v3 *this)
{
  void *v2;
  void *v3;

  *(_QWORD *)this = &off_1E69DF738;
  v2 = (void *)*((_QWORD *)this + 117);
  if (v2)
  {
    *((_QWORD *)this + 118) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 114);
  if (v3)
  {
    *((_QWORD *)this + 115) = v3;
    operator delete(v3);
  }
  ClosedLoopSpeakerProtectionKernel::~ClosedLoopSpeakerProtectionKernel(this);
}

{
  void *v2;
  void *v3;

  *(_QWORD *)this = &off_1E69DF738;
  v2 = (void *)*((_QWORD *)this + 117);
  if (v2)
  {
    *((_QWORD *)this + 118) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 114);
  if (v3)
  {
    *((_QWORD *)this + 115) = v3;
    operator delete(v3);
  }
  ClosedLoopSpeakerProtectionKernel::~ClosedLoopSpeakerProtectionKernel(this);
  JUMPOUT(0x1BCC95CECLL);
}

uint64_t clsp::CLSPKernel_v3::Initialize(clsp::CLSPKernel_v3 *this, unsigned int a2, double a3)
{
  std::vector<float>::resize((uint64_t)this + 936, a2);
  std::vector<float>::resize((uint64_t)this + 912, vcvtad_u64_f64(a3 * 0.002));
  return (*(uint64_t (**)(clsp::CLSPKernel_v3 *, double))(*(_QWORD *)this + 24))(this, a3);
}

char *clsp::CLSPKernel_v3::Reset(char **this, double a2)
{
  unint64_t v8;
  unint64_t v9;
  int v11;
  int v12;

  ClosedLoopSpeakerProtectionKernel::Reset((ClosedLoopSpeakerProtectionKernel *)this, a2);
  *((_DWORD *)this + 2) = *((_DWORD *)this + 3);
  *((_DWORD *)this + 17) = 1065353216;
  __asm { FMOV            V0.2S, #1.0 }
  this[111] = _D0;
  *((_DWORD *)this + 226) = 0;
  *((_DWORD *)this + 215) = 0;
  *((_DWORD *)this + 217) = 0;
  v8 = (this[115] - this[114]) >> 2;
  v12 = 0;
  std::vector<float>::assign(this + 114, v8, &v12);
  v9 = (this[118] - this[117]) >> 2;
  v11 = 0;
  return std::vector<float>::assign(this + 117, v9, &v11);
}

float clsp::CLSPKernel_v3::GetOLPwr(clsp::CLSPKernel_v3 *this)
{
  return *((float *)this + 225);
}

float clsp::CLSPKernel_v3::Process(clsp::CLSPKernel_v3 *this, const float *a2, float *a3, unsigned int a4)
{
  unint64_t v8;
  void *v9;
  const void *v10;
  uint64_t v11;
  void *v12;
  const float *v13;
  size_t v14;
  uint64_t v15;
  int v16;
  float v17;
  float v18;
  float v19;
  float v20;
  float v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  unint64_t v29;
  int v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float v35;
  float v36;
  float v37;
  float v38;
  float v39;
  float v40;
  float v41;
  uint64_t v42;
  float v43;
  float v44;
  float v45;
  clsp::CLSP_Log *v46;
  clsp::CLSP_Log *v47;
  clsp::CLSP_Log *v48;
  float v49;
  uint64_t v50;
  float v51;
  float v52;
  float v53;
  float v54;
  BOOL v55;
  float v56;
  float v57;
  float v58;
  float v59;
  double v60;
  float v61;
  float v62;
  float v63;
  int v64;
  float v65;
  int v66;
  float v67;
  clsp::CLSP_Log *v68;
  clsp::CLSP_Log *v69;
  clsp::CLSP_Log *v70;
  clsp::CLSP_Log *v71;
  clsp::CLSP_Log *v72;
  clsp::CLSP_Log *v73;
  float v74;
  unsigned int v75;
  unsigned int v76;
  float v77;
  uint64_t v78;
  clsp::CLSP_Log *v79;
  float v80;
  clsp::CLSP_Log *v81;
  float v82;
  float v83;
  float v84;
  clsp::CLSP_Log *v85;
  float v86;
  clsp::CLSP_Log *v87;
  float v88;
  float v89;
  float v90;
  float v91;
  clsp::CLSP_Log *v92;
  clsp::CLSP_Log *v93;
  clsp::CLSP_Log *v94;
  float DisplacementFilterGain;
  float v96;
  clsp::CLSP_Log *v97;
  float v99;
  float v100;
  float v101;
  float v102;
  float v103;
  float v104;
  float v105;
  float v106;
  float v107;
  float v108;
  float v109;
  float v110;
  float v111;
  double v112;
  float v113;
  float v114;
  float v115;
  float v116;
  float v117;
  float v118;
  float v119;
  float v120;
  float v121;
  float v122;
  float v123;
  float v124;
  float v125;
  float v126;
  float v127;
  float v128;
  float v129;
  float v130;
  float v131;
  float v132;
  float v133;
  float v134;
  float v135;
  float v136;
  float v137;
  float v138;
  float v139;
  float v140;
  float v141;
  float v142;
  float v143;
  float v144;
  float v145;
  float v146;
  float __src[3];

  if (*((_BYTE *)this + 840))
  {
    (*(void (**)(clsp::CLSPKernel_v3 *))(*(_QWORD *)this + 120))(this);
    *((_BYTE *)this + 840) = 0;
  }
  v8 = *((_QWORD *)this + 120);
  v9 = (void *)*((_QWORD *)this + 117);
  v10 = (const void *)*((_QWORD *)this + 114);
  v11 = 4 * a4;
  if (v8 <= a4)
  {
    memcpy(v9, v10, 4 * v8);
    memcpy((void *)(*((_QWORD *)this + 117) + 4 * *((_QWORD *)this + 120)), a2, 4 * (a4 - *((_QWORD *)this + 120)));
    v12 = (void *)*((_QWORD *)this + 114);
    v15 = *((_QWORD *)this + 120);
    v13 = &a2[a4 - v15];
    v14 = 4 * v15;
  }
  else
  {
    memcpy(v9, v10, 4 * a4);
    memcpy(*((void **)this + 114), (const void *)(*((_QWORD *)this + 114) + 4 * a4), 4 * (*((_QWORD *)this + 120) - a4));
    v12 = (void *)(*((_QWORD *)this + 114) + 4 * (*((_QWORD *)this + 120) - a4));
    v13 = a2;
    v14 = 4 * a4;
  }
  memcpy(v12, v13, v14);
  v16 = *((_DWORD *)this + 2);
  v17 = *((float *)this + 15);
  v130 = *((float *)this + 14);
  v18 = *((float *)this + 18);
  v141 = *((float *)this + 19);
  v132 = *((float *)this + 16);
  v133 = *((float *)this + 17);
  v19 = *((float *)this + 69);
  v20 = *((float *)this + 70);
  v21 = *((float *)this + 71);
  v22 = *((float *)this + 72);
  v23 = *((float *)this + 84);
  v25 = *((float *)this + 44);
  v24 = *((float *)this + 45);
  v26 = *((float *)this + 46);
  v28 = *((float *)this + 53);
  v27 = *((float *)this + 54);
  v142 = *((float *)this + 217);
  v144 = *((float *)this + 55);
  v140 = *((float *)this + 83);
  if (a4)
  {
    v29 = 0;
    v127 = *((float *)this + 5);
    v128 = *((float *)this + 6);
    v30 = *((_DWORD *)this + 3);
    v104 = *((float *)this + 10);
    v105 = *((float *)this + 9);
    v103 = *((float *)this + 8);
    v102 = *((float *)this + 13);
    v101 = *((float *)this + 12);
    v100 = *((float *)this + 11);
    v99 = *((float *)this + 21);
    v125 = *((float *)this + 66);
    v126 = *((float *)this + 7);
    v123 = *((float *)this + 68);
    v124 = *((float *)this + 67);
    v122 = *((float *)this + 56);
    v121 = *((float *)this + 57);
    v120 = *((float *)this + 60);
    v119 = *((float *)this + 61);
    v118 = *((float *)this + 62);
    v117 = *((float *)this + 58);
    v116 = *((float *)this + 59);
    v139 = *((float *)this + 41);
    v138 = *((float *)this + 42);
    v114 = 1.0 / *((float *)this + 43);
    v115 = *((float *)this + 43);
    v113 = *((float *)this + 38);
    v112 = *((float *)this + 37);
    v31 = *((float *)this + 54);
    v32 = *((float *)this + 45);
    v33 = *((float *)this + 72);
    v34 = *((float *)this + 70);
    v110 = *((float *)this + 39);
    v111 = *((float *)this + 40);
    v108 = *((float *)this + 47);
    v109 = *((float *)this + 49);
    v106 = *((float *)this + 82);
    v107 = *((float *)this + 48);
    while (1)
    {
      v35 = v19;
      v36 = v21;
      v145 = v25;
      v146 = v28;
      v37 = v116;
      if (v23 < v116)
        v37 = v23;
      v38 = (float)(v122 + (float)(v121 * v37)) + (float)(v117 * (float)(v37 * v37));
      v39 = (float)(v120 + (float)(v119 * v37)) + (float)(v118 * (float)(v37 * v37));
      v41 = a2[v29 / 4];
      v42 = *((_QWORD *)this + 117);
      v43 = *(float *)(v42 + v29);
      v44 = -1.5;
      if (v43 >= -1.5)
        v44 = *(float *)(v42 + v29);
      if (v43 > 1.5)
        v44 = 1.5;
      v136 = v36;
      v137 = v35;
      v135 = v44;
      v131 = (float)(v120 + (float)(v119 * v37)) + (float)(v118 * (float)(v37 * v37));
      v134 = (float)((float)((float)((float)(v124 * v35) + (float)(v125 * v44)) + (float)(v123 * v34))
                   + (float)(v38 * v36))
           + (float)(v39 * v33);
      if (*((_BYTE *)this + 125))
      {
        v40 = (v38 + 1.0 - v39) * v112;
        v45 = v134 * v40;
      }
      else
      {
        v45 = a2[v29 / 4];
      }
      v46 = (clsp::CLSP_Log *)*((_QWORD *)this + 2 * *((unsigned int *)this + 22) + 69);
      if (v46)
      {
        __src[0] = v38;
        clsp::CLSP_Log::LogCLSPData(v46, __src, 1);
        v47 = (clsp::CLSP_Log *)*((_QWORD *)this + 2 * *((unsigned int *)this + 22) + 69);
        if (v47)
        {
          __src[0] = v131;
          clsp::CLSP_Log::LogCLSPData(v47, __src, 1);
          v48 = (clsp::CLSP_Log *)*((_QWORD *)this + 2 * *((unsigned int *)this + 22) + 69);
          if (v48)
          {
            __src[0] = v41;
            clsp::CLSP_Log::LogCLSPData(v48, __src, 1);
          }
        }
      }
      v49 = *((float *)this + 27);
      if (v133 >= v49)
        v50 = 120;
      else
        v50 = 116;
      v51 = v49 + (float)((float)(v133 - v49) * *(float *)((char *)this + v50));
      *((float *)this + 27) = v51;
      v52 = *((float *)this + 222);
      v129 = v38;
      if (v52 < v51)
      {
        v51 = v51 + (float)(*((float *)this + 218) * (float)(v52 - v51));
        *((float *)this + 27) = v51;
      }
      v53 = v141 + (float)((float)((float)(v128 * v18) * (float)(v126 * (float)(v128 * v18))) * v127);
      v54 = v142 + (float)((float)(v126 * (float)((float)(v128 * v45) * (float)(v128 * v45))) * v127);
      v55 = __OFSUB__(v16--, 1);
      if ((v16 < 0) ^ v55 | (v16 == 0))
        break;
      v65 = v141 + (float)((float)((float)(v128 * v18) * (float)(v126 * (float)(v128 * v18))) * v127);
LABEL_52:
      v141 = v65;
      if (*((_BYTE *)this + 124))
      {
        v77 = *((float *)this + 27);
        v18 = v45 * v77;
        v41 = v41 * v77;
      }
      else
      {
        v18 = v45;
      }
      a3[v29 / 4] = v18;
      v78 = *((unsigned int *)this + 22);
      v79 = (clsp::CLSP_Log *)*((_QWORD *)this + 2 * v78 + 65);
      v142 = v54;
      if (v79)
      {
        __src[0] = v18;
        clsp::CLSP_Log::LogCLSPData(v79, __src, 1);
        v78 = *((unsigned int *)this + 22);
      }
      v80 = (float)(v111 * v41) + (float)(v113 * v145);
      v25 = v80 + (float)(v110 * v32);
      v81 = (clsp::CLSP_Log *)*((_QWORD *)this + 2 * v78 + 69);
      if (v81)
      {
        __src[0] = v80 + (float)(v110 * v32);
        clsp::CLSP_Log::LogCLSPData(v81, __src, 1);
        v78 = *((unsigned int *)this + 22);
        v81 = (clsp::CLSP_Log *)*((_QWORD *)this + 2 * v78 + 69);
      }
      v82 = v139;
      v83 = -v25;
      if (v25 >= 0.0)
        v83 = v25;
      if (v83 > v26)
        v82 = v138;
      v26 = v26 + (float)(v82 * (float)(v83 - v26));
      if (v115 >= v26)
        v84 = v115;
      else
        v84 = v26;
      if (v81)
      {
        __src[0] = v26;
        clsp::CLSP_Log::LogCLSPData(v81, __src, 1);
        v78 = *((unsigned int *)this + 22);
        v85 = (clsp::CLSP_Log *)*((_QWORD *)this + 2 * v78 + 69);
        if (v85)
        {
          __src[0] = v84;
          clsp::CLSP_Log::LogCLSPData(v85, __src, 1);
          v78 = *((unsigned int *)this + 22);
        }
      }
      v86 = (float)(v109 * v18) + (float)(v108 * v146);
      v28 = v86 + (float)(v107 * v31);
      v87 = (clsp::CLSP_Log *)*((_QWORD *)this + 2 * v78 + 65);
      if (v87)
      {
        __src[0] = v86 + (float)(v107 * v31);
        clsp::CLSP_Log::LogCLSPData(v87, __src, 1);
        v78 = *((unsigned int *)this + 22);
      }
      v88 = -v28;
      if (v28 >= 0.0)
        v88 = v28;
      v89 = v139;
      if (v88 > v144)
        v89 = v138;
      v90 = v144 + (float)(v89 * (float)(v88 - v144));
      v91 = v140 + (float)(v106 * (float)(fmaxf(v114 * v90, 1.0) - v140));
      v92 = (clsp::CLSP_Log *)*((_QWORD *)this + 2 * v78 + 69);
      if (v92)
      {
        __src[0] = v91;
        clsp::CLSP_Log::LogCLSPData(v92, __src, 1);
        v78 = *((unsigned int *)this + 22);
      }
      v140 = v91;
      v23 = v84 * v91;
      v93 = (clsp::CLSP_Log *)*((_QWORD *)this + 2 * v78 + 65);
      if (v93)
      {
        __src[0] = v90;
        clsp::CLSP_Log::LogCLSPData(v93, __src, 1);
        v94 = (clsp::CLSP_Log *)*((_QWORD *)this + 2 * *((unsigned int *)this + 22) + 65);
        if (v94)
        {
          __src[0] = v23;
          clsp::CLSP_Log::LogCLSPData(v94, __src, 1);
        }
      }
      v144 = v90;
      v29 += 4;
      v24 = v145;
      v27 = v146;
      v31 = v146;
      v32 = v145;
      v22 = v136;
      v20 = v137;
      v33 = v136;
      v34 = v137;
      v21 = v134;
      v19 = v135;
      if (v11 == v29)
        goto LABEL_83;
    }
    v56 = (float)((float)(v102 * v130) + (float)(v101 * v53)) + (float)(v100 * v132);
    v143 = (float)((float)(v104 * v130) + (float)(v105 * v53)) + (float)(v103 * v17);
    *((float *)this + 35) = v99 + (float)(v143 + v56);
    v57 = (float)((float)(*((float *)this + 214) * *((float *)this + 215)) + (float)(*((float *)this + 213) * v54))
        + (float)(*((float *)this + 212) * *((float *)this + 216));
    *((float *)this + 215) = v54;
    *((float *)this + 216) = v57;
    v58 = *((float *)this + 32);
    v59 = *((float *)this + 21);
    v132 = v56;
    v60 = v57 + 1.0;
    v61 = (float)((float)(v58 - v59) - v56) / v60;
    v62 = 1.0;
    if (v61 <= 1.0)
      v62 = v61;
    if (v62 < 0.0001)
      v62 = 0.0001;
    v63 = sqrtf(v62);
    if (v63 >= v51)
    {
      v66 = *((_DWORD *)this + 226);
      if (!v66)
      {
LABEL_37:
        v67 = (float)((float)((float)(v58 + *((float *)this + 33)) - v59) - v132) / v60;
        if (v67 > 1.0)
          v67 = 1.0;
        if (v67 < 0.0001)
          v67 = 0.0001;
        *((float *)this + 222) = sqrtf(v67);
        v68 = (clsp::CLSP_Log *)*((_QWORD *)this + 2 * *((unsigned int *)this + 22) + 73);
        if (v68)
        {
          __src[0] = v63;
          clsp::CLSP_Log::LogCLSPData(v68, __src, 1);
          v69 = (clsp::CLSP_Log *)*((_QWORD *)this + 2 * *((unsigned int *)this + 22) + 73);
          if (v69)
          {
            __src[0] = *((float *)this + 222);
            clsp::CLSP_Log::LogCLSPData(v69, __src, 1);
            v70 = (clsp::CLSP_Log *)*((_QWORD *)this + 2 * *((unsigned int *)this + 22) + 73);
            if (v70)
            {
              __src[0] = *((float *)this + 27);
              clsp::CLSP_Log::LogCLSPData(v70, __src, 1);
              v71 = (clsp::CLSP_Log *)*((_QWORD *)this + 2 * *((unsigned int *)this + 22) + 73);
              if (v71)
              {
                __src[0] = v57;
                clsp::CLSP_Log::LogCLSPData(v71, __src, 1);
                v72 = (clsp::CLSP_Log *)*((_QWORD *)this + 2 * *((unsigned int *)this + 22) + 73);
                if (v72)
                {
                  __src[0] = v143;
                  clsp::CLSP_Log::LogCLSPData(v72, __src, 1);
                  v73 = (clsp::CLSP_Log *)*((_QWORD *)this + 2 * *((unsigned int *)this + 22) + 73);
                  if (v73)
                  {
                    __src[0] = v132;
                    clsp::CLSP_Log::LogCLSPData(v73, __src, 1);
                  }
                }
              }
            }
          }
        }
        *((float *)this + 225) = v53;
        v74 = (*(float (**)(clsp::CLSPKernel_v3 *))(*(_QWORD *)this + 48))(this) + *((float *)this + 127);
        *((float *)this + 127) = v74;
        v75 = *((_DWORD *)this + 129);
        if (v75 >= *((_DWORD *)this + 125))
        {
          v76 = 0;
          *((float *)this + 128) = v74 * *((float *)this + 126);
          *((_DWORD *)this + 127) = 0;
        }
        else
        {
          v76 = v75 + 1;
        }
        v17 = v143;
        *((_DWORD *)this + 129) = v76;
        v54 = 0.0;
        v133 = v63;
        v65 = 0.0;
        v130 = v53;
        v16 = v30;
        goto LABEL_52;
      }
      v64 = v66 - 1;
      v63 = v133;
    }
    else
    {
      v64 = *((_DWORD *)this + 227);
    }
    *((_DWORD *)this + 226) = v64;
    goto LABEL_37;
  }
  v129 = *((float *)this + 64);
  v131 = *((float *)this + 65);
LABEL_83:
  *((float *)this + 64) = v129;
  *((float *)this + 65) = v131;
  *((float *)this + 69) = v19;
  *((float *)this + 70) = v20;
  *((float *)this + 71) = v21;
  *((float *)this + 72) = v22;
  *((float *)this + 44) = v25;
  *((float *)this + 45) = v24;
  *((float *)this + 46) = v26;
  *((float *)this + 53) = v28;
  *((float *)this + 54) = v27;
  *((float *)this + 55) = v144;
  *((float *)this + 83) = v140;
  *((float *)this + 84) = v23;
  *((float *)this + 14) = v130;
  *((float *)this + 15) = v17;
  *((float *)this + 16) = v132;
  *((float *)this + 17) = v133;
  *((float *)this + 18) = v18;
  *((float *)this + 19) = v141;
  *((float *)this + 217) = v142;
  *((_DWORD *)this + 2) = v16;
  *((_DWORD *)this + 224) = *((_DWORD *)this + 35);
  (*(void (**)(clsp::CLSPKernel_v3 *))(*(_QWORD *)this + 104))(this);
  DisplacementFilterGain = ClosedLoopSpeakerProtectionKernel::GetDisplacementFilterGain(this);
  v96 = DisplacementFilterGain;
  v97 = (clsp::CLSP_Log *)*((_QWORD *)this + 2 * *((unsigned int *)this + 22) + 65);
  if (v97)
  {
    __src[0] = DisplacementFilterGain;
    clsp::CLSP_Log::LogCLSPData(v97, __src, 1);
  }
  return v96;
}

uint64_t clsp::CLSPKernel_v3::CalcCoeffs(clsp::CLSPKernel_v3 *this, double a2)
{
  double v3;
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  long double v11;
  double v12;
  double v13;
  double v14;
  long double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  long double v20;
  long double v21;
  double v22;
  double v23;
  long double v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float v29;
  float v30;
  uint64_t v31;
  double v32;
  double v33;
  float v34;
  double v35;
  double v36;
  double v37;
  double v38;
  double v39;
  double v40;
  long double v41;
  long double v42;
  double v43;
  float v44;
  float v45;
  __int32 v46;
  float v47;
  const char *v48;
  float v49;
  float v50;
  unint64_t v51;
  double v53;
  double v54;
  double v55;
  double v56;
  double v57;
  double v58;
  double v59;
  double v60;
  double v61;
  double v63;
  double v64;
  double v65;
  double v66;
  double v67;
  long double v68;
  double v69;
  double v70;
  int32x2_t v71[2];
  int32x2_t v72[2];
  float v73[10];
  float v74[10];
  float __A[10];
  uint64_t v76;

  v76 = *MEMORY[0x1E0C80C00];
  v3 = *((float *)this + 26);
  v4 = *((double *)this + 50);
  v5 = *((double *)this + 54);
  v65 = *((double *)this + 56);
  v66 = *((double *)this + 52);
  v53 = *((double *)this + 57);
  v6 = 1.0 / a2;
  v56 = *((double *)this + 49);
  v57 = *((double *)this + 53);
  v67 = v57 * v3 / (v56 + v3 + *((double *)this + 48));
  v7 = sqrt(v66 / v4);
  v58 = *((double *)this + 51);
  v59 = v4;
  v8 = sqrt(v4 * v66) / (v58 + v65 * v65 / v3);
  if (v8 >= 0.50999999)
    v9 = v8;
  else
    v9 = 0.50999999;
  v10 = -(v6 * v7);
  v11 = exp(v10 / (v9 + v9)) * -2.0;
  v68 = v11 * cos(v6 * v7 * sqrt(1.0 - 1.0 / (v9 * (v9 * 4.0))));
  v63 = exp(v10 / v9);
  v12 = *((double *)this + 55);
  v60 = v5;
  v13 = 1.0 / sqrt(v5) * v7;
  v14 = -(v6 * v13);
  v55 = v12 + v12;
  v15 = exp(v14 / (v12 + v12)) * -2.0;
  v69 = v13;
  v70 = v6;
  v16 = v6 * v13;
  v17 = v12;
  v18 = v53;
  v19 = sqrt(1.0 - 1.0 / (v17 * (v17 * 4.0)));
  v20 = v15 * cos(v16 * v19);
  v21 = exp(v14 / v17);
  v22 = v65 * (v67 * 1000.0);
  v61 = v3;
  v23 = v22 / (v66 * v3);
  v24 = v23 * (v21 + v20 + 1.0);
  v25 = v20;
  v26 = -v25;
  *((float *)this + 64) = v26;
  *(float *)&v21 = v21;
  *(float *)&v21 = -*(float *)&v21;
  *((_DWORD *)this + 65) = LODWORD(v21);
  *((_DWORD *)this + 66) = 1065353216;
  v27 = v68;
  *((float *)this + 67) = v27;
  v28 = v63;
  *((float *)this + 68) = v28;
  v29 = 1.0 / (v63 + 1.0 - v68);
  *((float *)this + 37) = v29;
  *((float *)this + 38) = v26;
  *(float *)&v24 = v24;
  *((_DWORD *)this + 39) = LODWORD(v21);
  *((_DWORD *)this + 40) = LODWORD(v24);
  v30 = v53;
  *((float *)this + 43) = v30;
  *((float *)this + 47) = -v27;
  *((float *)this + 48) = -v28;
  *(float *)&v21 = v23 * (v63 + v68 + 1.0);
  *((_DWORD *)this + 49) = LODWORD(v21);
  *((float *)this + 52) = v30;
  *((float *)this + 73) = -v27;
  *((float *)this + 74) = -v28;
  *((float *)this + 75) = v28;
  *((float *)this + 76) = v27;
  *((_DWORD *)this + 77) = 1065353216;
  v64 = v9;
  if (v9 >= 1.0)
    v23 = v9 * v22 / (v66 * v3);
  v31 = 0;
  if (v23 > v53)
    v32 = v23;
  else
    v32 = v53;
  v54 = v32 * 1.5;
  memset(v72, 0, 12);
  v33 = (v32 * 1.5 - v53) / 9.0;
  memset(v71, 0, 12);
  do
  {
    v34 = v18 + (double)(int)v31 * v33;
    __A[v31] = v34;
    v35 = sqrt(v34 / v18);
    v36 = v19;
    v37 = v18;
    v38 = v17;
    v39 = v69 * v35;
    v40 = v69 * v35 * -v70;
    v41 = exp(v40 / v55);
    v42 = v41 + v41;
    v43 = v70 * v39;
    v17 = v38;
    v18 = v37;
    v19 = v36;
    v44 = cos(v36 * v43) * v42;
    v74[v31] = v44;
    v45 = exp(v40 / v17);
    v73[v31++] = -v45;
  }
  while (v31 != 10);
  clsp::polyfit<10ul,2ul>(__A, v74, (float *)v72);
  clsp::polyfit<10ul,2ul>(__A, v73, (float *)v71);
  *((int32x2_t *)this + 28) = vrev64_s32(*(int32x2_t *)((char *)v72 + 4));
  v46 = v72[0].i32[0];
  *((int32x2_t *)this + 30) = vrev64_s32(*(int32x2_t *)((char *)v71 + 4));
  v47 = v54;
  *((_DWORD *)this + 62) = v71[0].i32[0];
  *((float *)this + 63) = v47;
  *((_DWORD *)this + 58) = v46;
  *((float *)this + 59) = v47;
  clsp::CLSP_Log::printToSyslog((clsp::CLSP_Log *)(*((_DWORD *)this + 211) & 1), "CLSPKernel_v3 CalcCoeffs physical params Ch %u: fs=%f; Reb=%f; Rampout=%f; mt=%f; ct=%f; kt=%f; ag=%f; g_bw=%f; mQ_d"
    "=%f; phi=%f; x_lim=%f; ageff=%f; Q_cd=%f; Q_cn=%f; w_d=%f; LookaheadDelay=%f; ",
    v48,
    *((unsigned int *)this + 22),
    *(_QWORD *)&a2,
    *(_QWORD *)&v61,
    *(_QWORD *)&v56,
    *(_QWORD *)&v59,
    *(_QWORD *)&v58,
    *(_QWORD *)&v66,
    *(_QWORD *)&v57,
    *(_QWORD *)&v60,
    *((_QWORD *)this + 55),
    *(_QWORD *)&v65,
    *(_QWORD *)&v18,
    *(_QWORD *)&v67,
    *(_QWORD *)&v17,
    *(_QWORD *)&v64,
    *(_QWORD *)&v69,
    *((_QWORD *)this + 121));
  (*(void (**)(clsp::CLSPKernel_v3 *, double, double, double))(*(_QWORD *)this + 152))(this, a2, v67, v61);
  (*(void (**)(clsp::CLSPKernel_v3 *, double))(*(_QWORD *)this + 160))(this, a2);
  v49 = a2;
  v50 = (float)(*((float *)this + 124) * v49) / (float)*((unsigned int *)this + 3);
  *((_DWORD *)this + 125) = vcvtas_u32_f32(v50);
  *((float *)this + 126) = 1.0 / (float)roundf(v50);
  (*(void (**)(clsp::CLSPKernel_v3 *, double))(*(_QWORD *)this + 96))(this, a2);
  v51 = vcvtad_u64_f64(*((double *)this + 121) * 0.001 * a2);
  if (v51 >= (uint64_t)(*((_QWORD *)this + 115) - *((_QWORD *)this + 114)) >> 2)
    v51 = (uint64_t)(*((_QWORD *)this + 115) - *((_QWORD *)this + 114)) >> 2;
  *((_QWORD *)this + 120) = v51;
  return (*(uint64_t (**)(clsp::CLSPKernel_v3 *))(*(_QWORD *)this + 112))(this);
}

uint64_t clsp::CLSPKernel_v3::ZapBadValues(uint64_t this)
{
  float v1;
  float v3;
  float v5;
  float v7;
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;
  float v14;
  float v15;
  float v16;
  float v17;
  float v18;
  double v19;
  float v21;
  double v22;

  v1 = *(float *)(this + 108);
  if (v1 < 0.01 || v1 > 1.0)
    *(_DWORD *)(this + 108) = 1008981770;
  v3 = *(float *)(this + 888);
  if (v3 < 0.01 || v3 > 1.0)
    *(_DWORD *)(this + 888) = 1008981770;
  v5 = *(float *)(this + 892);
  if (v5 < 0.01 || v5 > 1.0)
    *(_DWORD *)(this + 892) = 1008981770;
  v7 = *(float *)(this + 68);
  if (v7 < 0.01 || v7 > 1.0)
    *(_DWORD *)(this + 68) = 1008981770;
  v9 = *(float *)(this + 864);
  if (v9 < 0.0 || v9 > 1000.0)
  {
    v10 = *(float *)(this + 84);
    v11 = *(float *)(this + 128) - v10;
    v12 = *(double *)(this + 464);
    v13 = *(double *)(this + 472);
    v14 = v12 + v13;
    v15 = (float)(v11 * v12) / (float)(v12 + v13);
    v16 = (float)(v11 * v13) / v14;
    *(float *)(this + 60) = v15;
    *(float *)(this + 64) = v16;
    *(float *)(this + 864) = v15;
    v17 = (float)(v15 + v16) + v10;
    *(float *)(this + 140) = v17;
    *(float *)(this + 896) = v17;
  }
  v18 = *(float *)(this + 860);
  v19 = fabsf(v18);
  if (v19 >= 1.0e15 || v19 <= 1.0e-15)
    v18 = 0.0;
  *(float *)(this + 860) = v18;
  v21 = *(float *)(this + 868);
  v22 = fabsf(v21);
  if (v22 >= 1.0e15 || v22 <= 1.0e-15)
    v21 = 0.0;
  *(float *)(this + 868) = v21;
  if (*(_DWORD *)(this + 904) > *(_DWORD *)(this + 908))
    *(_DWORD *)(this + 904) = 0;
  return ClosedLoopSpeakerProtectionKernel::ZapBadValues(this);
}

void clsp::CLSPKernel_v3::PrintCoeffs(clsp::CLSPKernel_v3 *this, uint64_t a2, const char *a3)
{
  const char *v4;

  ClosedLoopSpeakerProtectionKernel::PrintCoeffs(this, a2, a3);
  clsp::CLSP_Log::printToSyslog((clsp::CLSP_Log *)(*((_DWORD *)this + 211) & 1), "CLSPKernel_v3 coeffs Ch %u:\n ff_ac1=%f;\n"
    " ff_bc0=%f;\n"
    " ff_bc1=%f;\n"
    " TGainTimerInit=%d;\n"
    " mHardAttack=%f;\n"
    " DelaySamples=%d;\n"
    " ",
    v4,
    *((unsigned int *)this + 22),
    *((float *)this + 212),
    *((float *)this + 213),
    *((float *)this + 214),
    *((unsigned int *)this + 227),
    *((float *)this + 218),
    *((_QWORD *)this + 120));
}

void clsp::CLSPKernel_v3::LogCoeffs(clsp::CLSPKernel_v3 *this)
{
  clsp::CLSP_Log *v2;
  clsp::CLSP_Log *v3;
  float v4;
  clsp::CLSP_Log *v5;
  clsp::CLSP_Log *v6;
  clsp::CLSP_Log *v7;
  float v8;
  clsp::CLSP_Log *v9;
  clsp::CLSP_Log *v10;
  clsp::CLSP_Log *v11;
  float __src;

  ClosedLoopSpeakerProtectionKernel::LogCoeffs(this);
  v2 = (clsp::CLSP_Log *)*((_QWORD *)this + 2 * *((unsigned int *)this + 22) + 101);
  if (v2)
  {
    __src = *((float *)this + 218);
    clsp::CLSP_Log::LogCLSPData(v2, &__src, 1);
    v3 = (clsp::CLSP_Log *)*((_QWORD *)this + 2 * *((unsigned int *)this + 22) + 101);
    if (v3)
    {
      v4 = *((double *)this + 110);
      __src = v4;
      clsp::CLSP_Log::LogCLSPData(v3, &__src, 1);
      v5 = (clsp::CLSP_Log *)*((_QWORD *)this + 2 * *((unsigned int *)this + 22) + 101);
      if (v5)
      {
        __src = (float)*((unsigned int *)this + 227);
        clsp::CLSP_Log::LogCLSPData(v5, &__src, 1);
        v6 = (clsp::CLSP_Log *)*((_QWORD *)this + 2 * *((unsigned int *)this + 22) + 101);
        if (v6)
        {
          __src = (float)*((unint64_t *)this + 120);
          clsp::CLSP_Log::LogCLSPData(v6, &__src, 1);
          v7 = (clsp::CLSP_Log *)*((_QWORD *)this + 2 * *((unsigned int *)this + 22) + 101);
          if (v7)
          {
            v8 = *((double *)this + 121);
            __src = v8;
            clsp::CLSP_Log::LogCLSPData(v7, &__src, 1);
            v9 = (clsp::CLSP_Log *)*((_QWORD *)this + 2 * *((unsigned int *)this + 22) + 101);
            if (v9)
            {
              __src = *((float *)this + 212);
              clsp::CLSP_Log::LogCLSPData(v9, &__src, 1);
              v10 = (clsp::CLSP_Log *)*((_QWORD *)this + 2 * *((unsigned int *)this + 22) + 101);
              if (v10)
              {
                __src = *((float *)this + 213);
                clsp::CLSP_Log::LogCLSPData(v10, &__src, 1);
                v11 = (clsp::CLSP_Log *)*((_QWORD *)this + 2 * *((unsigned int *)this + 22) + 101);
                if (v11)
                {
                  __src = *((float *)this + 214);
                  clsp::CLSP_Log::LogCLSPData(v11, &__src, 1);
                }
              }
            }
          }
        }
      }
    }
  }
}

void clsp::CLSPKernel_v3::UpdateThermalState(clsp::CLSPKernel_v3 *this, double a2)
{
  double v4;
  double v5;
  double v6;
  float v7;
  double v8;
  float v9;
  double v10;
  double v11;
  float v12;
  double v13;
  float v14;

  if (a2 >= 0.5)
  {
    v4 = *((double *)this + 60) * 0.318309886;
    v5 = *((double *)this + 61) * 0.318309886;
    v6 = *((float *)this + 15);
    v7 = exp(-a2 / v4) * v6;
    *((float *)this + 15) = v7;
    v8 = *((float *)this + 16);
    v9 = exp(-a2 / v5) * v8;
    *((float *)this + 16) = v9;
    v10 = v4 * *((double *)this + 110);
    v11 = *((float *)this + 216);
    v12 = exp(-a2 / v10) * v11;
    *((float *)this + 216) = v12;
    v13 = (float)(*((float *)this + 27) + -1.0);
    v14 = v13 * exp(a2 / (*((double *)this + 44) / -4.60517019)) + 1.0;
    if (v14 > 1.0)
      v14 = 1.0;
    if (v14 < 0.01)
      v14 = 0.01;
    *((float *)this + 27) = v14;
  }
}

uint64_t clsp::CLSPKernel_v3::RestoreThermalState(uint64_t a1, uint64_t a2)
{
  int v2;

  if (*(_BYTE *)a2)
  {
    *(_QWORD *)(a1 + 60) = *(_QWORD *)(a2 + 8);
    v2 = *(_DWORD *)(a2 + 20);
    *(_DWORD *)(a1 + 108) = *(_DWORD *)(a2 + 16);
    *(_DWORD *)(a1 + 68) = v2;
    *(_DWORD *)(a1 + 864) = *(_DWORD *)(a2 + 4);
  }
  else
  {
    clsp::CLSPKernel_v3::ResetThermalState((clsp::CLSPKernel_v3 *)a1);
  }
  return 0;
}

double clsp::CLSPKernel_v3::SaveThermalState(uint64_t a1, uint64_t a2)
{
  int v2;
  int v3;
  double result;

  v2 = *(_DWORD *)(a1 + 108);
  v3 = *(_DWORD *)(a1 + 68);
  *(_DWORD *)(a2 + 4) = *(_DWORD *)(a1 + 864);
  result = *(double *)(a1 + 60);
  *(double *)(a2 + 8) = result;
  *(_DWORD *)(a2 + 16) = v2;
  *(_DWORD *)(a2 + 20) = v3;
  *(_BYTE *)a2 = 1;
  return result;
}

double clsp::CLSPKernel_v3::CalcThermalCoeffs(clsp::CLSPKernel_v3 *this, double a2, double a3, double a4, uint64_t a5, const char *a6)
{
  int v6;
  double v7;
  double v8;
  double v9;
  double v10;
  unsigned int v11;
  unsigned int v12;
  float v13;
  double v14;
  float v15;
  float v16;
  double v17;
  double v18;
  double v19;
  double v20;
  float v21;
  double result;

  v6 = 0;
  v7 = *((double *)this + 60);
  v8 = *((double *)this + 61);
  v9 = *((double *)this + 58);
  v10 = *((double *)this + 59);
  v11 = vcvtmd_u64_f64(a2 / 200.0 + 0.5);
  do
    v12 = 1 << ++v6;
  while (1 << v6 < v11);
  *((_DWORD *)this + 3) = v12;
  *((_DWORD *)this + 4) = v6;
  v13 = 1.0 / (double)v12;
  v14 = a2 / (double)v12;
  v15 = a3;
  *((float *)this + 5) = v13;
  *((float *)this + 6) = v15;
  v16 = 1.0 / a4;
  v17 = 1.0 / v14 * 1.57079633;
  v18 = v17 / v7;
  v19 = v17 / v8;
  v20 = v9 * v18;
  *(float *)&v18 = v18 * -2.0 + 1.0;
  *((float *)this + 7) = v16;
  *((_DWORD *)this + 8) = LODWORD(v18);
  v21 = v19 * -2.0 + 1.0;
  *(float *)&v18 = v20;
  *((_DWORD *)this + 9) = LODWORD(v18);
  *((_DWORD *)this + 10) = LODWORD(v18);
  *(float *)&v19 = v10 * v19;
  *((float *)this + 11) = v21;
  *((_DWORD *)this + 12) = LODWORD(v19);
  *((_DWORD *)this + 13) = LODWORD(v19);
  clsp::CLSP_Log::printToSyslog((clsp::CLSP_Log *)(*((_DWORD *)this + 211) & 1), "CLSPKernel_v3 CalcCoeffs thermal params Ch %u: Fs_th=%f; Tc_vc=%f; Tc_mg=%f; T_sett_vc=%f; T_sett_mg=%f; FFfactor=%f; ",
    a6,
    *((unsigned int *)this + 22),
    *(_QWORD *)&v14,
    *(_QWORD *)&v7,
    *(_QWORD *)&v8,
    *(_QWORD *)&v9,
    *(_QWORD *)&v10,
    *((_QWORD *)this + 110));
  return result;
}

float clsp::CLSPKernel_v3::CalcThermalFFCoeffs(clsp::CLSPKernel_v3 *this, double a2, double a3)
{
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;
  float result;

  LODWORD(a3) = *((_DWORD *)this + 3);
  v4 = a2 / (double)*(unint64_t *)&a3;
  v5 = 1.0 / v4 * 1.57079633 / (*((double *)this + 60) * *((double *)this + 110));
  v6 = *((double *)this + 58) * v5;
  *(float *)&v5 = v5 * -2.0 + 1.0;
  *((_DWORD *)this + 212) = LODWORD(v5);
  *(float *)&v5 = v6;
  *((_DWORD *)this + 213) = LODWORD(v5);
  *((_DWORD *)this + 214) = LODWORD(v5);
  *(float *)&v4 = v4;
  *((_DWORD *)this + 227) = vcvtps_u32_f32(*(float *)&v4);
  v7 = a2 * 0.00999999978;
  v8 = 0.0;
  if (v7 >= 0.00001)
    v8 = exp(-4.60517019 / v7);
  result = 1.0 - v8;
  *((float *)this + 218) = result;
  return result;
}

float clsp::CLSPKernel_v3::ResetThermalState(clsp::CLSPKernel_v3 *this)
{
  float v6;
  float v7;
  float v8;
  float v9;
  float v10;
  float result;

  *((_DWORD *)this + 27) = 1065353216;
  __asm { FMOV            V0.2S, #1.0 }
  *((_QWORD *)this + 111) = _D0;
  *((_DWORD *)this + 14) = 0;
  *(_OWORD *)((char *)this + 68) = xmmword_1B66A0780;
  *((_DWORD *)this + 215) = 0;
  *((_DWORD *)this + 217) = 0;
  v6 = *((float *)this + 21);
  *(float *)&_D0 = *((float *)this + 32) - v6;
  v7 = *((double *)this + 58);
  v8 = *((double *)this + 59);
  v9 = v7 + v8;
  v10 = (float)(*(float *)&_D0 * v7) / (float)(v7 + v8);
  *(float *)&_D0 = (float)(*(float *)&_D0 * v8) / v9;
  *((float *)this + 15) = v10;
  *((_DWORD *)this + 16) = _D0;
  *((float *)this + 216) = v10;
  result = (float)(v10 + *(float *)&_D0) + v6;
  *((float *)this + 35) = result;
  *((float *)this + 224) = result;
  return result;
}

void std::__shared_ptr_emplace<clsp::CLSPKernel_v3>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E69DF7F0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<clsp::CLSPKernel_v3>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E69DF7F0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1BCC95CECLL);
}

uint64_t std::__shared_ptr_emplace<clsp::CLSPKernel_v3>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void learnrate_v5::adaptLmsFilter_v4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  int *v5;
  const float *v6;
  const float *v7;
  const float *v8;
  const float *v9;
  vDSP_Length v10;
  vDSP_Length v11;
  _DWORD *v12;
  uint64_t v13;
  vDSP_Length v14;
  int v15;
  uint64_t v16;
  vDSP_Length v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  float *v22;
  uint64_t v23;
  float *v24;
  float *v25;
  float *v26;
  uint64_t v27;
  vDSP_Length v28;
  uint64_t v29;
  float *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _DWORD *v34;
  _DWORD *v35;
  uint64_t v36;
  uint64_t v37;
  vDSP_Length v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  float *v42;
  uint64_t v43;
  int v44;
  uint64_t v45;
  vDSP_Length v46;
  float *v47;
  float *v48;
  int v49;
  float *v50;
  const float *v51;
  const float *v52;
  const float *v53;
  const float *v54;
  float *v55;
  uint64_t v56;
  uint64_t v57;
  float *v58;
  float v59;
  float v60;
  uint64_t v61;
  uint64_t v62;
  int v63;
  vDSP_Length v64;
  uint64_t v65;
  int v66;
  int v67;
  size_t v68;
  vDSP_Length v69;
  int v70;
  uint64_t v71;
  float *v72;
  float *v73;
  float *v74;
  int v75;
  uint64_t v76;
  float *v77;
  float *v78;
  float v79;
  MultiRadixRealFFT *v80;
  float v81;
  uint64_t v82;
  float *v83;
  float *v84;
  float *v85;
  int v86;
  float v87;
  MultiRadixRealFFT *v88;
  vDSP_Length __N;
  float *v90;
  float *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  vDSP_Length v95;
  uint64_t v96;
  _DWORD *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  int v103;
  int v104;
  int v105;
  uint64_t v106;
  uint64_t v107;
  float *v108;
  float *v109;
  float *__C;
  float *__Ca;
  uint64_t v112;
  uint64_t v113;
  vDSP_Length v114;
  vDSP_Length v115;
  uint64_t v116;
  uint64_t v117;
  float *v118;
  float *v119;
  float *v120;
  float *v121;
  uint64_t v122;
  uint64_t v123;
  _QWORD *v124;
  int v125;
  int *v126;
  float *v127;
  float *v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  int v132;
  float *v133;
  float *v134;
  float *v135;
  uint64_t v136;
  float *v137;
  float *v138;
  float __A;
  float __B;
  DSPSplitComplex v141;
  _DWORD v142[256];
  _DWORD v143[256];
  float __E[2048];
  float v145[2048];
  float v146[2049];
  uint64_t v147;

  MEMORY[0x1E0C80A78](a1);
  v2 = v1;
  v4 = v3;
  v126 = v5;
  v7 = v6;
  v9 = v8;
  v147 = *MEMORY[0x1E0C80C00];
  v10 = v5[4];
  v11 = v5[10];
  v96 = v5[11];
  v97 = v12;
  v13 = v12[23];
  v14 = (int)v12[9];
  v100 = v5[15];
  v15 = v12[19];
  v106 = (int)v12[18];
  *(_DWORD *)(v16 + 72) = v106;
  *(_DWORD *)(v16 + 76) = v15;
  v93 = v16;
  v104 = v15;
  __A = 0.0;
  vDSP_vmul(*(const float **)(v2 + 96), 1, *(const float **)(v2 + 112), 1, *(float **)(v2 + 112), 1, v11);
  v90 = (float *)v9;
  vDSP_vmul(*(const float **)(v2 + 112), 1, v9, 1, v146, 1, v10);
  v91 = (float *)v7;
  v92 = v2;
  vDSP_vmul(*(const float **)(v2 + 112), 1, v7, 1, v145, 1, v10);
  v101 = v13;
  if ((int)v13 >= 1)
  {
    v17 = v14;
    v18 = 0;
    v94 = (v104 + 1) * (int)v10;
    v99 = 4 * v14;
    v19 = 4 * v10;
    __N = (v106 * v10);
    v20 = 4 * (int)__N;
    v21 = *(_QWORD *)(v92 + 104);
    v22 = (float *)v4[2];
    v23 = v4[3];
    v24 = *(float **)(v93 + 24);
    v118 = *(float **)(v93 + 16);
    v25 = *(float **)v93;
    v26 = *(float **)(v93 + 8);
    v98 = 4 * v96;
    v28 = *(_QWORD *)v97;
    v27 = *((_QWORD *)v97 + 1);
    v29 = v21 + 4 * v106;
    v122 = 4 * v10;
    v124 = v4;
    v95 = v17;
    do
    {
      v120 = v26;
      v114 = v28;
      v116 = v27;
      v112 = v29;
      if (*(_BYTE *)(v4[16] + v18))
      {
        v108 = v24;
        v30 = v22;
        v31 = v23;
        v32 = v21;
        if ((int)v96 >= 1)
        {
          v33 = 0;
          v34 = v142;
          v35 = v143;
          v36 = v96;
          do
          {
            *v35++ = *(_DWORD *)(v28 + v33);
            *v34++ = *(_DWORD *)(v27 + v33);
            v33 += v19;
            --v36;
          }
          while (v36);
        }
        __C = v25;
        v102 = v18;
        if (v97[17] == 1)
        {
          __A = 0.0;
          if ((int)__N >= 1)
          {
            v37 = v20;
            vDSP_vfill(&__A, v25, 1, __N);
            vDSP_vfill(&__A, v26, 1, __N);
            vDSP_vfill(&__A, v118, 1, __N);
            vDSP_vfill(&__A, v108, 1, __N);
            v20 = v37;
          }
          v38 = (*(_DWORD *)(v93 + 36) - v94);
          if ((int)v38 >= 1)
          {
            v39 = v20;
            vDSP_vfill(&__A, &__C[v94], 1, v38);
            vDSP_vfill(&__A, &v26[v94], 1, v38);
            vDSP_vfill(&__A, &v118[v94], 1, v38);
            vDSP_vfill(&__A, &v108[v94], 1, v38);
            v20 = v39;
          }
        }
        v40 = v19;
        v21 = v32;
        v41 = v31;
        v42 = v30;
        if ((int)v106 <= v104)
        {
          v43 = 4 * v106;
          v44 = v104 + 1 - v106;
          v46 = v114;
          v45 = v116;
          v47 = __C;
          v48 = v120;
          v129 = v21;
          v130 = v41;
          v127 = v30;
          do
          {
            __A = *(float *)(v21 + v43);
            v49 = *(_DWORD *)(v4[11] + v43) * v10;
            v133 = (float *)(v46 + v20);
            v137 = (float *)(v45 + v20);
            v50 = (float *)((char *)v47 + v20);
            v135 = (float *)((char *)v48 + v20);
            v51 = &v42[v49];
            v52 = (const float *)(v41 + 4 * v49);
            vDSP_vmma(v146, 1, v51, 1, v145, 1, v52, 1, __E, 1, v10);
            vDSP_vsma(__E, 1, &__A, v133, 1, v50, 1, v10);
            v53 = v51;
            v21 = v129;
            v54 = v52;
            v4 = v124;
            vDSP_vmmsb(v145, 1, v53, 1, v146, 1, v54, 1, __E, 1, v10);
            vDSP_vsma(__E, 1, &__A, v137, 1, v135, 1, v10);
            v42 = v127;
            v40 = 4 * v10;
            v41 = v130;
            v20 = 4 * (int)__N;
            v48 = (float *)((char *)v48 + v122);
            v47 = (float *)((char *)v47 + v122);
            v45 += v122;
            v46 += v122;
            v43 += 4;
            --v44;
          }
          while (v44);
        }
        v24 = v108;
        v17 = v95;
        v18 = v102;
        v19 = v40;
        v23 = v41;
        v22 = v42;
        v55 = v120;
        v25 = __C;
        v56 = v112;
        if ((int)v106 <= v104)
        {
          v57 = 0;
          v58 = *(float **)(v92 + 112);
          v59 = *v90 * *v58;
          v60 = *v91 * v58[v10];
          v61 = v4[11] + 4 * v106;
          v62 = v20;
          do
          {
            v63 = *(_DWORD *)(v61 + 4 * v57) * v10;
            *(float *)((char *)__C + v62) = *(float *)&v143[v106 + v57]
                                          + (float)((float)(v59 * *(float *)(v112 + 4 * v57)) * v42[v63]);
            *(float *)((char *)v120 + v62) = *(float *)&v142[v106 + v57]
                                           + (float)((float)(v60 * *(float *)(v112 + 4 * v57))
                                                   * *(float *)(v23 + 4 * v63));
            v62 += v19;
            ++v57;
          }
          while (v104 + 1 - (_DWORD)v106 != (_DWORD)v57);
        }
      }
      else
      {
        v64 = v17;
        vDSP_vclr(v25, 1, v17);
        vDSP_vclr(v120, 1, v64);
        v20 = 4 * (int)__N;
        v17 = v64;
        v56 = v112;
        v55 = v120;
      }
      v118 += v17;
      v24 += v17;
      v25 = (float *)((char *)v25 + v99);
      v26 = &v55[(unint64_t)v99 / 4];
      ++v18;
      v27 = v116 + v99;
      v28 = v114 + v99;
      v21 += v98;
      v29 = v56 + v98;
      v22 += v100;
      v23 += 4 * v100;
    }
    while (v18 != v101);
  }
  v113 = *(unsigned int *)(v93 + 92);
  if ((int)v113 >= 1)
  {
    v65 = 0;
    __Ca = (float *)v4[16];
    v66 = *v126 >> 1;
    v67 = *(_DWORD *)(v93 + 72);
    v128 = *(float **)(v93 + 48);
    v134 = *(float **)v93;
    v136 = *(_QWORD *)(v93 + 8);
    v131 = v66;
    v132 = *v126;
    v68 = 4 * v66;
    v69 = (uint64_t)*v126 >> 2;
    if (v66 <= 2)
      v70 = 2;
    else
      v70 = *v126 >> 1;
    v123 = ((v70 - 1) >> 1) + 1;
    v125 = *v126 >> 1;
    v105 = *(_DWORD *)(v93 + 76);
    v71 = v67 * (uint64_t)v66;
    v138 = *(float **)(v93 + 16);
    v115 = *(int *)(v93 + 36);
    v107 = *(int *)(v93 + 72);
    v109 = (float *)(4 * v115);
    v103 = ~v67;
    v72 = *(float **)(v93 + 24);
    v119 = &v72[v71];
    v121 = &v138[v71];
    do
    {
      v117 = v65;
      if (*((_BYTE *)__Ca + v65))
      {
        if ((int)v107 <= v105)
        {
          v73 = v119;
          v74 = v121;
          v75 = v103;
          v76 = v107;
          do
          {
            v77 = &v138[v76 * v131];
            v78 = &v72[v76 * v131];
            v141.realp = v77;
            v141.imagp = v78;
            memcpy(v77, &v134[v76 * v131], v68);
            memcpy(v78, (const void *)(v136 + 4 * v76 * v131), v68);
            v80 = (MultiRadixRealFFT *)*((_QWORD *)v126 + 1);
            if (v80)
              MultiRadixRealFFT::RealInPlaceTransform(v80, &v141, -1, v79);
            __B = *((float *)v126 + 22) * *((float *)v126 + 21);
            vDSP_vsmul(v77, 1, &__B, v77, 1, v69);
            vDSP_vsmul(v78, 1, &__B, v78, 1, v69);
            vDSP_vclr(&v77[v69], 1, v69);
            vDSP_vclr(&v78[v69], 1, v69);
            if (v132 >= 2)
            {
              v82 = v123;
              v83 = &v128[v125 * (v126[11] + v75)];
              v84 = v73;
              v85 = v74;
              do
              {
                v86 = *(_DWORD *)v85++;
                *(_DWORD *)v83 = v86;
                v87 = *v84++;
                v81 = v87;
                v83[1] = v87;
                v83 += 2;
                --v82;
              }
              while (v82);
            }
            v88 = (MultiRadixRealFFT *)*((_QWORD *)v126 + 1);
            if (v88)
              MultiRadixRealFFT::RealInPlaceTransform(v88, &v141, 1, v81);
            ++v76;
            v74 = (float *)((char *)v74 + v68);
            --v75;
            v73 = (float *)((char *)v73 + v68);
          }
          while (v105 + 1 != (_DWORD)v76);
        }
      }
      else
      {
        vDSP_vclr(v138, 1, v115);
        vDSP_vclr(v72, 1, v115);
        vDSP_vclr(v128, 1, v115);
      }
      v134 += v115;
      v136 += 4 * v115;
      v128 = (float *)((char *)v109 + (_QWORD)v128);
      v65 = v117 + 1;
      v138 += v115;
      v121 = (float *)((char *)v109 + (_QWORD)v121);
      v119 = (float *)((char *)v109 + (_QWORD)v119);
      v72 += v115;
    }
    while (v117 + 1 != v113);
  }
}

id getIntToNSStringAUScopeMap(void)
{
  unsigned __int8 v0;
  _QWORD v2[8];
  _QWORD v3[9];

  v3[8] = *MEMORY[0x1E0C80C00];
  if ((v0 & 1) == 0
  {
    v2[0] = &unk_1E6A11BA0;
    v2[1] = &unk_1E6A11BB8;
    v3[0] = CFSTR("Global");
    v3[1] = CFSTR("Input");
    v2[2] = &unk_1E6A11BD0;
    v2[3] = &unk_1E6A11BE8;
    v3[2] = CFSTR("Output");
    v3[3] = CFSTR("Group");
    v2[4] = &unk_1E6A11C00;
    v2[5] = &unk_1E6A11C18;
    v3[4] = CFSTR("Part");
    v3[5] = CFSTR("Note");
    v2[6] = &unk_1E6A11C30;
    v2[7] = &unk_1E6A11C48;
    v3[6] = CFSTR("Layer");
    v3[7] = CFSTR("LayerItem");
    objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v3, v2, 8);
    getIntToNSStringAUScopeMap(void)::intToNSStringMapAUScope = objc_claimAutoreleasedReturnValue();
  }
  return (id)getIntToNSStringAUScopeMap(void)::intToNSStringMapAUScope;
}

void sub_1B645DCD8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id createNSDescriptionFromAudioUnit(OpaqueAudioComponentInstance *a1)
{
  OpaqueAudioComponent *Component;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  uint64_t v9;
  uint64_t i;
  OpaqueAudioComponent *v11;
  void *v12;
  uint64_t v13;
  NSMutableDictionary *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  uint64_t v20;
  uint64_t j;
  void *v22;
  unsigned int v23;
  void *v24;
  BOOL v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  uint64_t v30;
  AudioUnitParameterID *v31;
  void *v32;
  double v33;
  const __CFString *v34;
  void *v35;
  id v37;
  void *v38;
  void *v39;
  void *v40;
  void *v41;
  AudioComponentDescription outDesc;
  Boolean outWritable[4];
  AudioUnitParameterValue outValue;
  UInt32 ioDataSize;
  _QWORD outData[5];
  _QWORD v47[9];
  CFTypeRef cf;
  char v49;
  uint64_t v50;

  v50 = *MEMORY[0x1E0C80C00];
  objc_msgSend(MEMORY[0x1E0C99E08], "dictionary");
  v37 = (id)objc_claimAutoreleasedReturnValue();
  Component = AudioComponentInstanceGetComponent(a1);
  if (!AudioComponentGetDescription(Component, &outDesc))
  {
    outData[0] = CFSTR("ComponentManufacturer");
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInt:", outDesc.componentManufacturer);
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    v47[0] = v3;
    outData[1] = CFSTR("ComponentSubType");
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInt:", outDesc.componentSubType);
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    v47[1] = v4;
    outData[2] = CFSTR("ComponentType");
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInt:", outDesc.componentType);
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    v47[2] = v5;
    outData[3] = CFSTR("ComponentFlags");
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInt:", outDesc.componentFlags);
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    v47[3] = v6;
    outData[4] = CFSTR("ComponentFlagsMask");
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInt:", outDesc.componentFlagsMask);
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    v47[4] = v7;
    objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v47, outData, 5);
    v8 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend(v37, "setObject:forKey:", v8, CFSTR("AudioComponentDescription"));
    objc_msgSend(MEMORY[0x1E0C99E08], "dictionary");
    v38 = (void *)objc_claimAutoreleasedReturnValue();
    getIntToNSStringAUScopeMap();
    v40 = (void *)objc_claimAutoreleasedReturnValue();
    v9 = objc_msgSend(v40, "count");
    if (v9)
    {
      for (i = 0; i != v9; ++i)
      {
        ioDataSize = 4;
        LODWORD(outData[0]) = 0;
        if (!AudioUnitGetProperty(a1, 0xBu, i, 0, outData, &ioDataSize))
        {
          v11 = AudioComponentInstanceGetComponent(a1);
          if (!AudioComponentGetDescription(v11, (AudioComponentDescription *)v47))
          {
            objc_msgSend(MEMORY[0x1E0C99E08], "dictionary");
            v12 = (void *)objc_claimAutoreleasedReturnValue();
            if (LODWORD(outData[0]))
            {
              v13 = 0;
              do
              {
                objc_msgSend(MEMORY[0x1E0C99E08], "dictionary");
                v14 = (NSMutableDictionary *)objc_claimAutoreleasedReturnValue();
                *(_DWORD *)outWritable = v13;
                outValue = *(float *)&i;
                addGenericAuPropToDescription(v14, a1, (AudioUnitScope *)&outValue, (AudioUnitElement *)outWritable);
                *(_DWORD *)outWritable = v13;
                outValue = *(float *)&i;
                addSubTypeSpecificAuPropToDescription(v14, a1, (unsigned int *)v47 + 1, (AudioUnitScope *)&outValue, (AudioUnitElement *)outWritable);
                objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("Element: %d"), v13);
                v15 = (void *)objc_claimAutoreleasedReturnValue();
                objc_msgSend(v12, "setObject:forKey:", v14, v15);

                v13 = (v13 + 1);
              }
              while (v13 < LODWORD(outData[0]));
            }
            v16 = (void *)MEMORY[0x1E0CB3940];
            objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", i);
            v17 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v40, "objectForKey:", v17);
            v18 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v16, "stringWithFormat:", CFSTR("Scope: %@"), v18);
            v19 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v38, "setObject:forKey:", v12, v19);

          }
        }
      }
    }

    objc_msgSend(v37, "setObject:forKey:", v38, CFSTR("AUProperties"));
    objc_msgSend(MEMORY[0x1E0C99E08], "dictionary");
    v39 = (void *)objc_claimAutoreleasedReturnValue();
    getIntToNSStringAUScopeMap();
    v41 = (void *)objc_claimAutoreleasedReturnValue();
    v20 = objc_msgSend(v41, "count");
    if (v20)
    {
      for (j = 0; j != v20; ++j)
      {
        objc_msgSend(MEMORY[0x1E0C99E08], "dictionary");
        v22 = (void *)objc_claimAutoreleasedReturnValue();
        LODWORD(outData[0]) = 0;
        outWritable[0] = 0;
        if (!AudioUnitGetPropertyInfo(a1, 3u, j, 0, (UInt32 *)outData, outWritable))
        {
          v23 = outData[0];
          if (LODWORD(outData[0]))
          {
            v24 = (void *)operator new[]();
            if (AudioUnitGetProperty(a1, 3u, j, 0, v24, (UInt32 *)outData))
              v25 = 0;
            else
              v25 = v23 >= 4;
            if (v25)
            {
              if (v23 >> 2 <= 1)
                v30 = 1;
              else
                v30 = v23 >> 2;
              v31 = (AudioUnitParameterID *)v24;
              do
              {
                ioDataSize = 104;
                if (!AudioUnitGetProperty(a1, 4u, j, *v31, v47, &ioDataSize))
                {
                  outValue = 0.0;
                  if (!AudioUnitGetParameter(a1, *v31, j, 0, &outValue))
                  {
                    v32 = (id)cf;
                    *(AudioUnitParameterValue *)&v33 = outValue;
                    v34 = CFSTR("inf");
                    if (outValue == INFINITY || (v34 = CFSTR("-inf"), outValue == -INFINITY))
                    {
                      objc_msgSend(v22, "setObject:forKey:", v34, v32, v33);
                    }
                    else
                    {
                      objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithFloat:", CFSTR("-inf"), v33);
                      v35 = (void *)objc_claimAutoreleasedReturnValue();
                      objc_msgSend(v22, "setObject:forKey:", v35, v32);

                    }
                  }
                }
                if ((v49 & 0x10) != 0)
                  CFRelease(cf);
                ++v31;
                --v30;
              }
              while (v30);
            }
            MEMORY[0x1BCC95CC8](v24, 0x1000C8052888210);
            v26 = (void *)MEMORY[0x1E0CB3940];
            objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", j);
            v27 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v41, "objectForKey:", v27);
            v28 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v26, "stringWithFormat:", CFSTR("Scope: %@"), v28);
            v29 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v39, "setObject:forKey:", v22, v29);

          }
        }

      }
    }

    objc_msgSend(v37, "setObject:forKey:", v39, CFSTR("AUParameters"));
  }
  return v37;
}

void sub_1B645E2B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void VAD3EventData::~VAD3EventData(VAD3EventData *this)
{
  JUMPOUT(0x1BCC95CECLL);
}

void EndpointVADViterbiModel::parseObservationPriorFloat32(unsigned int **a1, uint64_t *a2, unsigned int **a3)
{
  unsigned int *v6;
  unsigned int v7;
  unsigned int *v8;
  unsigned int *v9;
  unsigned int *v10;
  unsigned int *v11;
  unsigned int *v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  char *v17;
  unsigned int *v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int *v23;
  _DWORD *v24;
  unsigned int v25;
  unsigned int *v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unsigned int *v30;
  unsigned int *v31;
  unint64_t v32;
  unint64_t v33;
  char *v34;
  uint64_t v35;
  _DWORD *v36;
  char *v37;
  char *v38;
  char *v39;
  int v40;
  char *v41;
  unsigned int v42;
  int *v43;
  char *v44;
  int v45;
  int v46;
  int v47;
  _QWORD *v48;
  int v49;
  void *v50;
  char *v51;
  _DWORD *v52;
  void *__p;
  unsigned int *v54;
  char *v55;

  v55 = 0;
  v6 = (unsigned int *)operator new(4uLL);
  v7 = 1;
  *v6 = 1;
  v8 = v6 + 1;
  __p = v6;
  v54 = v6 + 1;
  v10 = *a3;
  v9 = a3[1];
  v55 = (char *)(v6 + 1);
  if (v10 != v9)
  {
    v7 = 1;
    do
    {
      v7 *= *v10;
      if (v8 >= (unsigned int *)v55)
      {
        v12 = (unsigned int *)__p;
        v13 = ((char *)v8 - (_BYTE *)__p) >> 2;
        v14 = v13 + 1;
        if ((unint64_t)(v13 + 1) >> 62)
          std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
        v15 = v55 - (_BYTE *)__p;
        if ((v55 - (_BYTE *)__p) >> 1 > v14)
          v14 = v15 >> 1;
        if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFFCLL)
          v16 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v16 = v14;
        if (v16)
        {
          v17 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>((uint64_t)&v55, v16);
          v12 = (unsigned int *)__p;
          v8 = v54;
        }
        else
        {
          v17 = 0;
        }
        v18 = (unsigned int *)&v17[4 * v13];
        *v18 = v7;
        v11 = v18 + 1;
        while (v8 != v12)
        {
          v19 = *--v8;
          *--v18 = v19;
        }
        __p = v18;
        v54 = v11;
        v55 = &v17[4 * v16];
        if (v12)
          operator delete(v12);
      }
      else
      {
        *v8 = v7;
        v11 = v8 + 1;
      }
      v54 = v11;
      ++v10;
      v8 = v11;
    }
    while (v10 != a3[1]);
  }
  v20 = operator new[]();
  v21 = v20;
  v22 = v7;
  if (v7)
  {
    v23 = *a1;
    v24 = (_DWORD *)v20;
    do
    {
      v25 = *v23++;
      *v24++ = bswap32(v25);
      --v22;
    }
    while (v22);
    *a1 = v23;
  }
  v26 = *a3;
  v27 = (char *)a3[1] - (char *)*a3;
  if (!v27)
    std::vector<std::vector<float>>::__throw_out_of_range[abi:ne180100]();
  if (v27 <= 4)
    std::vector<std::vector<float>>::__throw_out_of_range[abi:ne180100]();
  v29 = *v26;
  v28 = v26[1];
  v49 = 0;
  std::vector<float>::vector(&v50, v28, &v49);
  std::vector<std::vector<float>>::resize(a2, v29, (uint64_t)&v50);
  if (v50)
  {
    v51 = (char *)v50;
    operator delete(v50);
  }
  v31 = *a3;
  v30 = a3[1];
  if (v30 == *a3)
LABEL_51:
    std::vector<std::vector<float>>::__throw_out_of_range[abi:ne180100]();
  v32 = 0;
  while (v32 < *v31)
  {
    if ((unint64_t)((char *)v30 - (char *)v31) < 5)
      goto LABEL_55;
    if (v31[1])
    {
      v33 = 0;
      while (1)
      {
        v50 = 0;
        v51 = 0;
        v52 = 0;
        v34 = (char *)operator new(4uLL);
        *(_DWORD *)v34 = v32;
        v50 = v34;
        v51 = v34 + 4;
        v52 = v34 + 4;
        v36 = std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>((uint64_t)&v52, 2uLL);
        v37 = (char *)v50;
        v38 = v51;
        v36[1] = v33;
        v39 = (char *)(v36 + 1);
        while (v38 != v37)
        {
          v40 = *((_DWORD *)v38 - 1);
          v38 -= 4;
          *((_DWORD *)v39 - 1) = v40;
          v39 -= 4;
        }
        v41 = (char *)(v36 + 2);
        v50 = v39;
        v51 = (char *)(v36 + 2);
        v52 = &v36[v35];
        if (v37)
        {
          operator delete(v37);
          v39 = (char *)v50;
        }
        v51 = v41;
        if (v39 == v41)
        {
          v42 = 0;
        }
        else
        {
          v42 = 0;
          v43 = (int *)__p;
          v44 = v39;
          do
          {
            v46 = *(_DWORD *)v44;
            v44 += 4;
            v45 = v46;
            v47 = *v43++;
            v42 += v47 * v45;
          }
          while (v44 != v41);
        }
        if (0xAAAAAAAAAAAAAAABLL * ((a2[1] - *a2) >> 3) <= v32)
          std::vector<std::vector<float>>::__throw_out_of_range[abi:ne180100]();
        v48 = (_QWORD *)(*a2 + 24 * v32);
        if (v33 >= (uint64_t)(v48[1] - *v48) >> 2)
          std::vector<std::vector<float>>::__throw_out_of_range[abi:ne180100]();
        *(_DWORD *)(*v48 + 4 * v33) = *(_DWORD *)(v21 + 4 * v42);
        if (v39)
        {
          v51 = v39;
          operator delete(v39);
        }
        v31 = *a3;
        v30 = a3[1];
        if ((unint64_t)((char *)v30 - (char *)*a3) <= 4)
          break;
        if (++v33 >= v31[1])
          goto LABEL_50;
      }
LABEL_55:
      std::vector<std::vector<float>>::__throw_out_of_range[abi:ne180100]();
    }
LABEL_50:
    ++v32;
    if (v30 == v31)
      goto LABEL_51;
  }
  MEMORY[0x1BCC95CC8](v21, 0x1000C8052888210);
  if (__p)
  {
    v54 = (unsigned int *)__p;
    operator delete(__p);
  }
}

void sub_1B645E7D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, void *a14, uint64_t a15)
{
  if (__p)
    operator delete(__p);
  if (a14)
    operator delete(a14);
  _Unwind_Resume(exception_object);
}

void EndpointVADViterbiModel::parseObservationTransitionFloat32(unsigned int **a1, uint64_t *a2, char **a3)
{
  unsigned int *v6;
  unsigned int v7;
  unsigned int *v8;
  unsigned int *v9;
  char *v10;
  unsigned int *v11;
  unsigned int *v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  char *v17;
  unsigned int *v18;
  unsigned int v19;
  uint64_t v20;
  unsigned int *v21;
  _DWORD *v22;
  unsigned int v23;
  char *v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  char *v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  _QWORD *v43;
  _QWORD *v44;
  uint64_t v45;
  unsigned int *v46;
  unsigned int *v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;
  char *v51;
  uint64_t v52;
  char *v53;
  char *v54;
  char *v55;
  char *v56;
  int v57;
  char *v58;
  char *v59;
  char *v60;
  char *v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  unint64_t v65;
  char *v66;
  char *v67;
  int v68;
  unsigned int v69;
  int *v70;
  char *v71;
  int v72;
  int v73;
  int v74;
  _QWORD *v75;
  _QWORD *v76;
  unint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  void *__p;
  unsigned int *v83;
  char *v84;
  int v85;
  void *v86;
  char *v87;
  _QWORD v88[3];

  v84 = 0;
  v6 = (unsigned int *)operator new(4uLL);
  v7 = 1;
  *v6 = 1;
  v8 = v6 + 1;
  __p = v6;
  v83 = v6 + 1;
  v10 = *a3;
  v9 = (unsigned int *)a3[1];
  v84 = (char *)(v6 + 1);
  if (v10 != (char *)v9)
  {
    v7 = 1;
    do
    {
      v7 *= *(_DWORD *)v10;
      if (v8 >= (unsigned int *)v84)
      {
        v12 = (unsigned int *)__p;
        v13 = ((char *)v8 - (_BYTE *)__p) >> 2;
        v14 = v13 + 1;
        if ((unint64_t)(v13 + 1) >> 62)
          std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
        v15 = v84 - (_BYTE *)__p;
        if ((v84 - (_BYTE *)__p) >> 1 > v14)
          v14 = v15 >> 1;
        if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFFCLL)
          v16 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v16 = v14;
        if (v16)
        {
          v17 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>((uint64_t)&v84, v16);
          v12 = (unsigned int *)__p;
          v8 = v83;
        }
        else
        {
          v17 = 0;
        }
        v18 = (unsigned int *)&v17[4 * v13];
        *v18 = v7;
        v11 = v18 + 1;
        while (v8 != v12)
        {
          v19 = *--v8;
          *--v18 = v19;
        }
        __p = v18;
        v83 = v11;
        v84 = &v17[4 * v16];
        if (v12)
          operator delete(v12);
      }
      else
      {
        *v8 = v7;
        v11 = v8 + 1;
      }
      v83 = v11;
      v10 += 4;
      v8 = v11;
    }
    while (v10 != a3[1]);
  }
  v78 = operator new[]();
  v20 = v7;
  if (v7)
  {
    v21 = *a1;
    v22 = (_DWORD *)v78;
    do
    {
      v23 = *v21++;
      *v22++ = bswap32(v23);
      --v20;
    }
    while (v20);
    *a1 = v21;
  }
  v79 = 0;
  v80 = 0;
  v81 = 0;
  v24 = *a3;
  v25 = a3[1] - *a3;
  if (v25 <= 4)
    goto LABEL_106;
  if (v25 <= 8)
    std::vector<std::vector<float>>::__throw_out_of_range[abi:ne180100]();
  v27 = *((unsigned int *)v24 + 1);
  v26 = *((unsigned int *)v24 + 2);
  v85 = 0;
  std::vector<float>::vector(&v86, v26, &v85);
  std::vector<std::vector<float>>::resize(&v79, v27, (uint64_t)&v86);
  if (v86)
  {
    v87 = (char *)v86;
    operator delete(v86);
  }
  if (a3[1] == *a3)
LABEL_106:
    std::vector<std::vector<float>>::__throw_out_of_range[abi:ne180100]();
  v28 = *(unsigned int *)*a3;
  v29 = *a2;
  v30 = (_QWORD *)a2[1];
  v31 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v30 - *a2) >> 3);
  v32 = v28 - v31;
  if (v28 <= v31)
  {
    if (v28 < v31)
    {
      v43 = (_QWORD *)(v29 + 24 * v28);
      while (v30 != v43)
      {
        v30 -= 3;
        v86 = v30;
        std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v86);
      }
      a2[1] = (uint64_t)v43;
    }
  }
  else
  {
    v33 = a2[2];
    if (0xAAAAAAAAAAAAAAABLL * ((v33 - (uint64_t)v30) >> 3) >= v32)
    {
      v44 = &v30[3 * v32];
      v45 = 24 * v28 - 8 * (((uint64_t)v30 - *a2) >> 3);
      do
      {
        *v30 = 0;
        v30[1] = 0;
        v30[2] = 0;
        std::vector<std::vector<float>>::__init_with_size[abi:ne180100]<std::vector<float>*,std::vector<float>*>(v30, v79, v80, 0xAAAAAAAAAAAAAAABLL * ((v80 - v79) >> 3));
        v30 += 3;
        v45 -= 24;
      }
      while (v45);
      a2[1] = (uint64_t)v44;
    }
    else
    {
      v88[2] = a2 + 2;
      v34 = 0xAAAAAAAAAAAAAAABLL * ((v33 - v29) >> 3);
      v35 = 2 * v34;
      if (2 * v34 <= v28)
        v35 = v28;
      if (v34 >= 0x555555555555555)
        v36 = 0xAAAAAAAAAAAAAAALL;
      else
        v36 = v35;
      v37 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<AUPropertyItem>>(v36);
      v38 = &v37[24 * v31];
      v86 = v37;
      v87 = v38;
      v88[0] = v38;
      v88[1] = &v37[24 * v39];
      v40 = 3 * v28;
      v41 = &v37[24 * v28];
      v42 = 8 * v40 - 24 * v31;
      do
      {
        *(_QWORD *)v38 = 0;
        *((_QWORD *)v38 + 1) = 0;
        *((_QWORD *)v38 + 2) = 0;
        std::vector<std::vector<float>>::__init_with_size[abi:ne180100]<std::vector<float>*,std::vector<float>*>(v38, v79, v80, 0xAAAAAAAAAAAAAAABLL * ((v80 - v79) >> 3));
        v38 += 24;
        v42 -= 24;
      }
      while (v42);
      v88[0] = v41;
      std::vector<std::vector<unsigned int>>::__swap_out_circular_buffer(a2, &v86);
      std::__split_buffer<std::vector<std::vector<float>>>::~__split_buffer((uint64_t)&v86);
    }
  }
  v47 = (unsigned int *)*a3;
  v46 = (unsigned int *)a3[1];
  if (v46 == (unsigned int *)*a3)
LABEL_95:
    std::vector<std::vector<float>>::__throw_out_of_range[abi:ne180100]();
  v48 = 0;
  while (v48 < *v47)
  {
    if ((unint64_t)((char *)v46 - (char *)v47) < 5)
LABEL_104:
      std::vector<std::vector<float>>::__throw_out_of_range[abi:ne180100]();
    v49 = 0;
    while (v49 < v47[1])
    {
      if ((unint64_t)((char *)v46 - (char *)v47) < 9)
LABEL_99:
        std::vector<std::vector<float>>::__throw_out_of_range[abi:ne180100]();
      if (v47[2])
      {
        v50 = 0;
        while (1)
        {
          v86 = 0;
          v87 = 0;
          v88[0] = 0;
          v51 = (char *)operator new(4uLL);
          *(_DWORD *)v51 = v48;
          v86 = v51;
          v87 = v51 + 4;
          v88[0] = v51 + 4;
          v53 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>((uint64_t)v88, 2uLL);
          v54 = (char *)v86;
          v55 = v87;
          *((_DWORD *)v53 + 1) = v49;
          v56 = v53 + 4;
          while (v55 != v54)
          {
            v57 = *((_DWORD *)v55 - 1);
            v55 -= 4;
            *((_DWORD *)v56 - 1) = v57;
            v56 -= 4;
          }
          v58 = &v53[4 * v52];
          v59 = v53 + 8;
          v86 = v56;
          v87 = v53 + 8;
          v88[0] = v58;
          if (v54)
          {
            operator delete(v54);
            v58 = (char *)v88[0];
          }
          v87 = v53 + 8;
          if (v59 < v58)
            break;
          v61 = (char *)v86;
          v62 = (v59 - (_BYTE *)v86) >> 2;
          v63 = v62 + 1;
          if ((unint64_t)(v62 + 1) >> 62)
            std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
          v64 = v58 - (_BYTE *)v86;
          if (v64 >> 1 > v63)
            v63 = v64 >> 1;
          if ((unint64_t)v64 >= 0x7FFFFFFFFFFFFFFCLL)
            v65 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v65 = v63;
          if (v65)
          {
            v66 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>((uint64_t)v88, v65);
            v61 = (char *)v86;
            v59 = v87;
          }
          else
          {
            v66 = 0;
          }
          v67 = &v66[4 * v62];
          *(_DWORD *)v67 = v50;
          v60 = v67 + 4;
          while (v59 != v61)
          {
            v68 = *((_DWORD *)v59 - 1);
            v59 -= 4;
            *((_DWORD *)v67 - 1) = v68;
            v67 -= 4;
          }
          v86 = v67;
          v87 = v60;
          v88[0] = &v66[4 * v65];
          if (v61)
          {
            operator delete(v61);
            goto LABEL_77;
          }
LABEL_78:
          v87 = v60;
          if (v67 == v60)
          {
            v69 = 0;
          }
          else
          {
            v69 = 0;
            v70 = (int *)__p;
            v71 = v67;
            do
            {
              v73 = *(_DWORD *)v71;
              v71 += 4;
              v72 = v73;
              v74 = *v70++;
              v69 += v74 * v72;
            }
            while (v71 != v60);
          }
          if (0xAAAAAAAAAAAAAAABLL * ((a2[1] - *a2) >> 3) <= v48)
            std::vector<std::vector<float>>::__throw_out_of_range[abi:ne180100]();
          v75 = (_QWORD *)(*a2 + 24 * v48);
          if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v75[1] - *v75) >> 3) <= v49)
            std::vector<std::vector<float>>::__throw_out_of_range[abi:ne180100]();
          v76 = (_QWORD *)(*v75 + 24 * v49);
          if (v50 >= (uint64_t)(v76[1] - *v76) >> 2)
            std::vector<std::vector<float>>::__throw_out_of_range[abi:ne180100]();
          *(_DWORD *)(*v76 + 4 * v50) = *(_DWORD *)(v78 + 4 * v69);
          if (v67)
          {
            v87 = v67;
            operator delete(v67);
          }
          v47 = (unsigned int *)*a3;
          v46 = (unsigned int *)a3[1];
          v77 = (char *)v46 - *a3;
          if (v77 <= 8)
            goto LABEL_99;
          if (++v50 >= v47[2])
            goto LABEL_92;
        }
        *((_DWORD *)v53 + 2) = v50;
        v60 = v53 + 12;
LABEL_77:
        v67 = (char *)v86;
        goto LABEL_78;
      }
      v77 = (char *)v46 - (char *)v47;
LABEL_92:
      ++v49;
      if (v77 <= 4)
        goto LABEL_104;
    }
    ++v48;
    if (v46 == v47)
      goto LABEL_95;
  }
  MEMORY[0x1BCC95CC8](v78, 0x1000C8052888210);
  v86 = &v79;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v86);
  if (__p)
  {
    v83 = (unsigned int *)__p;
    operator delete(__p);
  }
}

void sub_1B645EE64(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, uint64_t a16, char *a17, void *a18, uint64_t a19, uint64_t a20)
{
  a17 = &a11;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a17);
  if (__p)
  {
    a15 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t EndpointVADRTViterbi::decodeStateSequence(EndpointVADRTViterbi *this, unsigned int a2, unsigned int a3)
{
  uint64_t v6;

  EndpointVADRTViterbi::expandWithZerosIfNecessary((char **)this + 3, a2);
  v6 = *((_QWORD *)this + 9);
  if (a2 >= (unint64_t)((*((_QWORD *)this + 10) - v6) >> 4))
    std::vector<std::vector<float>>::__throw_out_of_range[abi:ne180100]();
  return EndpointVADRTViterbi::backtraceBackpointerArray((uint64_t)this, *((_DWORD **)this + 3), *((_QWORD *)this + 4), a2, a3, *(double *)(v6 + 16 * a2 + 8) > fmax(*(double *)(v6 + 16 * a2), 0.0));
}

void EndpointVADRTViterbi::expandWithZerosIfNecessary(char **a1, unsigned int a2)
{
  _QWORD *v2;
  char *v3;
  unsigned int v4;
  unint64_t v5;
  char *v8;
  char *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  char *v15;
  int v16;

  v2 = a1 + 2;
  v3 = a1[1];
  if ((a1[2] - *a1) >> 2 >= (unint64_t)a2)
    v4 = a2;
  else
    v4 = (a1[2] - *a1) >> 2;
  v5 = (unint64_t)(v3 - *a1) >> 2;
  if (v4 + 1 > v5 && v4 >= v5)
  {
    do
    {
      if ((unint64_t)v3 >= *v2)
      {
        v9 = *a1;
        v10 = (v3 - *a1) >> 2;
        v11 = v10 + 1;
        if ((unint64_t)(v10 + 1) >> 62)
          std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
        v12 = *v2 - (_QWORD)v9;
        if (v12 >> 1 > v11)
          v11 = v12 >> 1;
        if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFFCLL)
          v13 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v13 = v11;
        if (v13)
        {
          v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>((uint64_t)v2, v13);
          v9 = *a1;
          v3 = a1[1];
        }
        else
        {
          v14 = 0;
        }
        v15 = &v14[4 * v10];
        *(_DWORD *)v15 = 0;
        v8 = v15 + 4;
        while (v3 != v9)
        {
          v16 = *((_DWORD *)v3 - 1);
          v3 -= 4;
          *((_DWORD *)v15 - 1) = v16;
          v15 -= 4;
        }
        *a1 = v15;
        a1[1] = v8;
        a1[2] = &v14[4 * v13];
        if (v9)
          operator delete(v9);
      }
      else
      {
        *(_DWORD *)v3 = 0;
        v8 = v3 + 4;
      }
      a1[1] = v8;
      LODWORD(v5) = v5 + 1;
      v3 = v8;
    }
    while (v5 <= v4);
  }
}

uint64_t EndpointVADRTViterbi::backtraceBackpointerArray(uint64_t result, _DWORD *a2, uint64_t a3, unsigned int a4, unsigned int a5, int a6)
{
  uint64_t v6;
  uint64_t v7;
  _DWORD *v8;
  uint64_t v9;
  BOOL v10;
  unint64_t v11;
  _DWORD *v12;
  uint64_t v13;
  uint64_t v14;

  if (a4 >= a5)
  {
    v7 = *(_QWORD *)(result + 120);
    v6 = *(_QWORD *)(result + 128);
    v8 = (_DWORD *)(a3 + 4 * (a4 - ((a3 - (uint64_t)a2) >> 2)));
    *v8 = a6;
    if (a4 > a5)
    {
      v9 = (a3 - (uint64_t)a2) >> 2;
      v10 = v8 == (_DWORD *)(a3 + 4 * (a5 - v9)) || v8 == a2;
      if (!v10)
      {
        v11 = v6 - ((v6 - v7) & 0xFFFFFFFFFFFFFFF8) + 8 * a4;
        v12 = (_DWORD *)(4 * a4 - 4 * v9 + a3 - 4);
        v13 = 4 * a5 - 4 * a4 + 4;
        do
        {
          v14 = v12[1];
          if (v14 >= 2)
            std::__throw_out_of_range[abi:ne180100]("array::at");
          *v12 = *(_DWORD *)(v11 + 4 * v14);
          if (!v13)
            break;
          v11 -= 8;
          v13 += 4;
          v10 = v12-- == a2;
        }
        while (!v10);
      }
    }
  }
  return result;
}

void AudioDSP::Utility::DetectNonFinites(AudioDSP::Utility *this, _DWORD *a2, const AudioBufferList *a3, const AudioStreamBasicDescription *a4, BOOL *a5)
{
  unint64_t v8;
  const float **v9;
  const float *v10;
  vDSP_Length v11;
  float __C;

  if (a2)
  {
    if (a4)
    {
      LOBYTE(a4->mSampleRate) = 0;
      if (*a2)
      {
        v8 = 0;
        v9 = (const float **)(a2 + 4);
        do
        {
          if ((a3->mBuffers[0].mNumberChannels & 1) == 0)
            break;
          if (a3[1].mBuffers[0].mNumberChannels != 32)
            break;
          v10 = *v9;
          if (!*v9)
            break;
          v11 = (unint64_t)*((unsigned int *)v9 - 1) >> 2;
          __C = 0.0;
          vDSP_sve(v10, 1, &__C, v11);
          if ((LODWORD(__C) & 0x7FFFFFFFu) >= 0x7F800000)
          {
            LOBYTE(a4->mSampleRate) = 1;
            return;
          }
          ++v8;
          v9 += 2;
        }
        while (v8 < *a2);
      }
    }
  }
}

void SphericalHeadSpatializer::~SphericalHeadSpatializer(SphericalHeadSpatializer *this)
{
  *(_QWORD *)this = &off_1E69DF848;
  std::unique_ptr<SphericalHeadPanner>::reset[abi:ne180100]((uint64_t *)this + 43, 0);
  Spatializer::~Spatializer(this);
}

{
  *(_QWORD *)this = &off_1E69DF848;
  std::unique_ptr<SphericalHeadPanner>::reset[abi:ne180100]((uint64_t *)this + 43, 0);
  Spatializer::~Spatializer(this);
  JUMPOUT(0x1BCC95CECLL);
}

uint64_t SphericalHeadSpatializer::initialize(SphericalHeadSpatializer *this, float a2, unsigned int a3)
{
  uint64_t result;
  uint64_t v7;
  IIRFilterFloat32 *v8;
  IIRFilterFloat32 *v9;
  IIRFilterFloat32 *v10;
  IIRFilterFloat32 *v11;
  uint64_t v12;
  float v13;
  unsigned int v14;
  int v15;
  uint64_t v16;
  double v17;
  double v18;
  double v19;
  float v20;
  AudioStreamBasicDescription v21;
  AudioStreamBasicDescription v22;

  if (a3 < 2)
    return 4294900553;
  v7 = operator new();
  *(_QWORD *)(v7 + 32) = 0;
  *(_DWORD *)(v7 + 40) = 0;
  *(_QWORD *)(v7 + 48) = 0;
  *(_QWORD *)(v7 + 56) = 0;
  *(_QWORD *)v7 = 0;
  *(_QWORD *)(v7 + 8) = 0;
  *(_QWORD *)(v7 + 64) = 0x3FF0000000000000;
  *(_OWORD *)(v7 + 72) = 0u;
  *(_OWORD *)(v7 + 88) = 0u;
  *(_QWORD *)(v7 + 104) = 0x3FF0000000000000;
  *(_OWORD *)(v7 + 112) = 0u;
  *(_OWORD *)(v7 + 128) = 0u;
  *(_QWORD *)(v7 + 144) = 0x3FF0000000000000;
  *(_OWORD *)(v7 + 152) = 0u;
  *(_OWORD *)(v7 + 168) = 0u;
  *(_OWORD *)(v7 + 177) = 0u;
  *(_QWORD *)(v7 + 212) = 0;
  *(_QWORD *)(v7 + 196) = 0;
  *(_QWORD *)(v7 + 204) = 0;
  *(_QWORD *)(v7 + 224) = 0;
  *(_QWORD *)(v7 + 232) = 0;
  v22.mSampleRate = 44100.0;
  *(_OWORD *)&v22.mFormatID = xmmword_1B6626900;
  *(_OWORD *)&v22.mBytesPerFrame = xmmword_1B66A0830;
  *(_OWORD *)&v21.mSampleRate = *(_OWORD *)&v22.mSampleRate;
  *(_OWORD *)&v21.mBytesPerPacket = *(_OWORD *)&v22.mBytesPerPacket;
  *(_QWORD *)&v21.mBitsPerChannel = 32;
  v8 = NewIIRFilter(&v22, &v21, (const CAStreamBasicDescription *)2);
  v9 = *(IIRFilterFloat32 **)(v7 + 168);
  if (v9 != v8)
  {
    if (v9)
      (*(void (**)(IIRFilterFloat32 *))(*(_QWORD *)v9 + 8))(v9);
    *(_QWORD *)(v7 + 168) = v8;
  }
  v10 = NewIIRFilter(&v22, &v21, (const CAStreamBasicDescription *)2);
  v11 = *(IIRFilterFloat32 **)(v7 + 176);
  if (v11 != v10)
  {
    if (v11)
      (*(void (**)(IIRFilterFloat32 *))(*(_QWORD *)v11 + 8))(v11);
    *(_QWORD *)(v7 + 176) = v10;
  }
  std::unique_ptr<SphericalHeadPanner>::reset[abi:ne180100]((uint64_t *)this + 43, v7);
  v12 = *((_QWORD *)this + 43);
  *(double *)(v12 + 184) = a2;
  v13 = a2 * 0.00145;
  v14 = vcvtps_u32_f32(v13);
  if (v14 <= 1)
    v15 = 1;
  else
    v15 = v14;
  v16 = (1 << -__clz(v15 - 1));
  *(_DWORD *)(v12 + 8) = v16;
  CADeprecated::CAAutoFree<float>::alloc((void **)v12, v16, 1);
  *((float *)this + 2) = a2;
  v17 = (float)(a2 * 0.0019531) * 0.0219999999;
  if (v17 >= 2.22507386e-308)
    v18 = -6.90775528 / v17;
  else
    v18 = -INFINITY;
  v19 = exp(v18);
  if (v18 < -708.4)
    v19 = 0.0;
  v20 = v19;
  *((float *)this + 84) = v20;
  *((_DWORD *)this + 5) = v14 + 500;
  LODWORD(v22.mSampleRate) = 0;
  std::vector<float>::resize((uint64_t)this + 136, a3, &v22);
  LODWORD(v22.mSampleRate) = 0;
  std::vector<float>::resize((uint64_t)this + 272, a3, &v22);
  result = 0;
  *((_WORD *)this + 8) = 257;
  return result;
}

void sub_1B645F4DC(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(v1 + 176);
  if (v3)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
    *(_QWORD *)(v1 + 176) = 0;
  }
  v4 = *(_QWORD *)(v1 + 168);
  if (v4)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
    *(_QWORD *)(v1 + 168) = 0;
  }
  if (*(_QWORD *)v1)
  {
    free(*(void **)v1);
    *(_QWORD *)v1 = 0;
  }
  MEMORY[0x1BCC95CEC](v1, 0x10A0C404D7BDC52);
  _Unwind_Resume(a1);
}

uint64_t SphericalHeadSpatializer::processAccumulating(SphericalHeadSpatializer *this, const float *a2, float **a3, unsigned int a4, float *const *a5, int a6, uint64_t a7, float a8, IR::ComplexDataCircBuffer *a9, double a10, double a11, double a12, double a13, float64x2_t a14)
{
  NSObject *v15;
  std::string *v16;
  __int128 v17;
  std::string *v18;
  __int128 v19;
  _BYTE *v20;
  float64_t v21;
  int v27;
  float v28;
  int v29;
  NSObject *v30;
  uint64_t result;
  NSObject *v32;
  float v33;
  float v34;
  float v35;
  float v36;
  uint64_t v37;
  float v38;
  _BOOL4 v39;
  uint64_t *v40;
  int v41;
  float v42;
  float v43;
  float v44;
  float v45;
  float v46;
  float v47;
  float v48;
  float v49;
  float v50;
  float *v51;
  float *v52;
  const float *v53;
  const float *v54;
  uint32x2_t v55;
  unsigned int v56;
  unsigned int v57;
  unsigned int v58;
  uint64_t v59;
  float32x2_t v60;
  float v61;
  float32x2_t v62;
  uint64_t v63;
  float *v64;
  float *v65;
  int v66;
  float v67;
  float v68;
  float v69;
  float v70;
  float v71;
  int v72;
  int v73;
  int v74;
  float v75;
  double v76;
  double v77;
  float64x2_t v78;
  float64x2_t v79;
  __int128 v80;
  __int128 v81;
  uint64_t v82;
  unint64_t v83;
  unint64_t v84;
  __int128 v85;
  const float *v86;
  float64x2_t v87;
  float64x2_t v88;
  __int128 v89;
  uint64_t v90;
  double v91;
  double v92;
  __double2 v93;
  double v94;
  double v95;
  float64x2_t v96;
  double v97;
  double v98;
  double v99;
  double v100;
  double v101;
  double v102;
  unsigned int v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  float64x2_t v107;
  __int128 v108;
  float v109;
  double v110;
  double v111;
  double v112;
  double v113;
  float v114;
  float v115;
  std::string *v116;
  _BYTE *v117;
  _BYTE *v118;
  const float *v119;
  float *v120;
  float *__O;
  float64x2_t v122;
  float64x2_t v123;
  float64x2_t v124;
  float64x2_t v125;
  float64x2_t v126;
  float64x2_t v127;
  float64x2_t v128;
  float64x2_t v129;
  float64x2_t v130;
  float64x2_t v131;
  float64x2_t v132;
  float64x2_t v133;
  unint64_t v134;
  __n128 v135;
  float64x2_t v136;
  float64x2_t v137;
  float v138;
  float __Step;
  _DWORD v140[3];
  int v141;
  const float *v142;
  _DWORD v143[3];
  int v144;
  const float *v145;
  float64x2_t v146;
  float64x2_t v147;
  double v148;
  _BYTE v149[32];
  double v150;
  float64x2_t v151;
  float64x2_t v152;
  unint64_t v153;
  _BYTE __p[32];
  double v155;
  float64x2_t v156;
  float64x2_t v157;
  unint64_t v158;
  _BYTE buf[32];
  double v160;
  uint64_t v161;

  v161 = *MEMORY[0x1E0C80C00];
  if (a4 <= 1)
  {
    if (getAUSMV2Log(void)::onceToken != -1)
      dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_5474);
    v15 = getAUSMV2Log(void)::gLog;
    if (!os_log_type_enabled((os_log_t)getAUSMV2Log(void)::gLog, OS_LOG_TYPE_DEBUG))
      return 4294956445;
    std::string::basic_string[abi:ne180100]<0>(&v146, "SphericalHeadSpatializer");
    v16 = std::string::append((std::string *)&v146, "::", 2uLL);
    v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
    *(_QWORD *)&v149[16] = *((_QWORD *)&v16->__r_.__value_.__l + 2);
    *(_OWORD *)v149 = v17;
    v16->__r_.__value_.__l.__size_ = 0;
    v16->__r_.__value_.__r.__words[2] = 0;
    v16->__r_.__value_.__r.__words[0] = 0;
    v18 = std::string::append((std::string *)v149, "processAccumulating", 0x13uLL);
    v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
    *(_QWORD *)&__p[16] = *((_QWORD *)&v18->__r_.__value_.__l + 2);
    *(_OWORD *)__p = v19;
    v18->__r_.__value_.__l.__size_ = 0;
    v18->__r_.__value_.__r.__words[2] = 0;
    v18->__r_.__value_.__r.__words[0] = 0;
    v20 = __p;
    if (__p[23] < 0)
      v20 = *(_BYTE **)__p;
    *(_DWORD *)buf = 136315394;
    *(_QWORD *)&buf[4] = v20;
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = a4;
    _os_log_debug_impl(&dword_1B5ED0000, v15, OS_LOG_TYPE_DEBUG, "%s: ERROR: cannot process with %d output channels != 2", buf, 0x12u);
    if ((__p[23] & 0x80000000) != 0)
      operator delete(*(void **)__p);
    if ((v149[23] & 0x80000000) != 0)
      operator delete(*(void **)v149);
    if ((SHIBYTE(v147.f64[0]) & 0x80000000) == 0)
      return 4294956445;
    v21 = v146.f64[0];
LABEL_99:
    operator delete(*(void **)&v21);
    return 4294956445;
  }
  if (a6 != a4)
  {
    if (getAUSMV2Log(void)::onceToken != -1)
      dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_5474);
    v30 = getAUSMV2Log(void)::gLog;
    if (!os_log_type_enabled((os_log_t)getAUSMV2Log(void)::gLog, OS_LOG_TYPE_DEBUG))
      return 4294956445;
    v116 = (std::string *)std::string::basic_string[abi:ne180100]<0>(buf, "SphericalHeadSpatializer");
    std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>("::", v116, (std::string *)&v146);
    std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>("processAccumulating", (std::string *)&v146, (std::string *)v149);
    if (v149[23] >= 0)
      v117 = v149;
    else
      v117 = *(_BYTE **)v149;
    *(_DWORD *)__p = 136315650;
    *(_QWORD *)&__p[4] = v117;
    *(_WORD *)&__p[12] = 1024;
    *(_DWORD *)&__p[14] = a4;
    *(_WORD *)&__p[18] = 1024;
    *(_DWORD *)&__p[20] = a6;
    _os_log_debug_impl(&dword_1B5ED0000, v30, OS_LOG_TYPE_DEBUG, "%s: ERROR: cannot process with %d output channels != %d", __p, 0x18u);
    if ((v149[23] & 0x80000000) != 0)
      operator delete(*(void **)v149);
    if (SHIBYTE(v147.f64[0]) < 0)
      operator delete(*(void **)&v146.f64[0]);
    if ((buf[23] & 0x80000000) == 0)
      return 4294956445;
    v21 = *(double *)buf;
    goto LABEL_99;
  }
  if (*((_BYTE *)this + 16))
  {
    *(_OWORD *)(*((_QWORD *)this + 43) + 16) = *(_OWORD *)a5;
    v27 = *((unsigned __int8 *)this + 132);
    if (*((_BYTE *)this + 132))
      v28 = a8;
    else
      v28 = 0.0;
    v29 = *((unsigned __int8 *)this + 17);
    if (*((_BYTE *)this + 17))
    {
      *((float *)this + 83) = v28;
      *((_BYTE *)this + 268) = v27;
      *((_BYTE *)this + 17) = 0;
    }
    else if (v27 == *((unsigned __int8 *)this + 268))
    {
      v33 = *((float *)this + 83);
      if (v33 == v28 || vabds_f32(v33, v28) < 0.0001)
      {
        *((float *)this + 83) = v28;
      }
      else if (!*((_DWORD *)this + 81))
      {
        v28 = v28 + (float)((float)(v33 - v28) * *((float *)this + 84));
      }
    }
    else
    {
      *((_BYTE *)this + 268) = v27;
    }
    v35 = *((float *)this + 12);
    v34 = *((float *)this + 13);
    if (v35 == *((float *)this + 46) && !v29 && v34 == *((float *)this + 47))
    {
      v39 = *((float *)this + 14) != *((float *)this + 48);
    }
    else
    {
      v36 = SphericalHeadSpatializer::CalculateInterauralTimeDelays(this, *((float *)this + 12), v34, *((float *)this + 2));
      v37 = *((_QWORD *)this + 43);
      *(_DWORD *)(v37 + 196) = v36;
      *(_DWORD *)(v37 + 200) = v38;
      v39 = 1;
    }
    v40 = (uint64_t *)*((_QWORD *)this + 43);
    *((_BYTE *)v40 + 192) = v39;
    v41 = *((_DWORD *)this + 83);
    *((_DWORD *)v40 + 53) = v41;
    *((_DWORD *)v40 + 54) = v41;
    *((double *)v40 + 28) = v28;
    *((double *)v40 + 29) = v28;
    if (v39)
    {
      v42 = *((float *)this + 32);
      v43 = (float)(v42 / 1000.0) * 200.0;
      v44 = *((float *)this + 2) * 0.5;
      v45 = *((float *)this + 14);
      if (v45 <= v42)
        v42 = *((float *)this + 14);
      if (v42 < *((float *)this + 31))
        v42 = *((float *)this + 31);
      v46 = v43 - v42;
      if (v46 < 0.0)
        v46 = 0.0;
      v47 = powf(275.62, v46 / v43) * 80.0;
      if (v47 > v44)
        v47 = v44;
      if (v47 < 80.0)
        v47 = 80.0;
      *((float *)v40 + 8) = v47;
      v48 = v35 * 3.14159265 / 180.0;
      v49 = v48 + 1.57079633;
      v50 = cosf(v49);
      *((float *)v40 + 9) = (float)((float)(v50 + 1.0) * 20000.0) + 4000.0;
      *((float *)v40 + 10) = (float)((float)(1.0 - v50) * 20000.0) + 4000.0;
      *((_QWORD *)this + 23) = *((_QWORD *)this + 6);
      *((float *)this + 48) = v45;
    }
    v52 = *a3;
    v51 = a3[1];
    v53 = (const float *)v40[2];
    v54 = (const float *)v40[3];
    v55 = *(uint32x2_t *)((char *)v40 + 196);
    v56 = *((_DWORD *)v40 + 3);
    if ((_DWORD)a7)
    {
      v57 = *((_DWORD *)v40 + 2);
      v58 = v57 - 1;
      v59 = *v40;
      *(float *)&a12 = (float)a7;
      v60 = vcvt_f32_u32(*(uint32x2_t *)((char *)v40 + 204));
      v61 = (float)v57;
      v62 = (float32x2_t)vbsl_s8((int8x8_t)vcltz_s32(vshl_n_s32(vdup_n_s32(!v39), 0x1FuLL)), (int8x8_t)0x8000000080000000, (int8x8_t)vdiv_f32(vsub_f32(vcvt_f32_u32(v55), v60), (float32x2_t)vdup_lane_s32(*(int32x2_t *)&a12, 0)));
      v63 = a7;
      v64 = (float *)v40[2];
      v65 = (float *)v40[3];
      do
      {
        v66 = *(_DWORD *)a2++;
        v67 = (float)v56;
        *(_DWORD *)(v59 + 4 * v56) = v66;
        if (v60.f32[0] <= (float)v56)
          v68 = -0.0;
        else
          v68 = v61;
        v69 = (float)((float)v56 - v60.f32[0]) + v68;
        v70 = v67 - v60.f32[1];
        if (v60.f32[1] <= v67)
          v71 = -0.0;
        else
          v71 = v61;
        *(float *)&v72 = v70 + v71;
        v73 = (int)v69 + (SLODWORD(v69) >> 31);
        v74 = (int)*(float *)&v72 + (v72 >> 31);
        *v64++ = *(float *)(v59 + 4 * (int)(v73 & v58))
               + (float)((float)(v69 - (float)(int)(v73 & v58))
                       * (float)(*(float *)(v59 + 4 * (int)((v73 + 1) & v58))
                               - *(float *)(v59 + 4 * (int)(v73 & v58))));
        v75 = *(float *)(v59 + 4 * (int)(v74 & v58));
        *v65++ = v75
               + (float)((float)(*(float *)&v72 - (float)(int)(v74 & v58))
                       * (float)(*(float *)(v59 + 4 * (int)((v74 + 1) & v58)) - v75));
        v60 = vadd_f32(v60, v62);
        v56 = (v56 + 1) & v58;
        --v63;
      }
      while (v63);
    }
    *((_DWORD *)v40 + 3) = v56;
    *(uint64_t *)((char *)v40 + 204) = (uint64_t)v55;
    v146 = 0uLL;
    v148 = 0.0;
    v147 = (float64x2_t)0x3FF0000000000000uLL;
    *(_QWORD *)buf = 0;
    *(_QWORD *)&buf[8] = 0;
    *(_QWORD *)&buf[24] = 0;
    v160 = 0.0;
    *(_QWORD *)&buf[16] = 0x3FF0000000000000;
    v140[0] = 1;
    v140[2] = 1;
    v143[0] = 1;
    v143[2] = 1;
    v120 = v51;
    __O = v52;
    v119 = v54;
    if (!v39)
    {
      v78 = *((float64x2_t *)v40 + 3);
      v79 = *((float64x2_t *)v40 + 4);
      v148 = *((double *)v40 + 10);
      v160 = *((double *)v40 + 15);
      v141 = 4 * a7;
      v144 = 4 * a7;
      v80 = *((_OWORD *)v40 + 3);
      v81 = *((_OWORD *)v40 + 4);
      v83 = v40[20];
      v82 = v40[21];
      v155 = *((double *)v40 + 10);
      v158 = v83;
      v84 = v40[20];
      v150 = *((double *)v40 + 15);
      v153 = v84;
      v146 = v78;
      v147 = v79;
      v85 = *(_OWORD *)(v40 + 13);
      *(_OWORD *)buf = *(_OWORD *)(v40 + 11);
      *(_OWORD *)&buf[16] = v85;
      *(_QWORD *)&a14.f64[0] = v40[20];
      v86 = v53;
      v145 = v53;
      v142 = v54;
      *(_OWORD *)__p = v80;
      *(_OWORD *)&__p[16] = v81;
      v87 = *((float64x2_t *)v40 + 9);
      v156 = *((float64x2_t *)v40 + 8);
      v88 = *((float64x2_t *)v40 + 8);
      v157 = *((float64x2_t *)v40 + 9);
      v89 = *(_OWORD *)(v40 + 13);
      *(_OWORD *)v149 = *(_OWORD *)(v40 + 11);
      *(_OWORD *)&v149[16] = v89;
      v151 = *((float64x2_t *)v40 + 8);
      v152 = *((float64x2_t *)v40 + 9);
      v134 = *(_QWORD *)&a14.f64[0];
      v136 = v88;
      v132 = v87;
      if (v82)
      {
        (*(void (**)(uint64_t, uint64_t, _BYTE *))(*(_QWORD *)v82 + 16))(v82, 2, __p);
        (*(void (**)(uint64_t, uint64_t, _DWORD *, _DWORD *))(*(_QWORD *)v40[21] + 32))(v40[21], a7, v143, v143);
        *(_QWORD *)&a14.f64[0] = v134;
        v88 = v136;
        v87 = v132;
      }
      v90 = v40[22];
      if (v90)
      {
        (*(void (**)(uint64_t, uint64_t, _BYTE *))(*(_QWORD *)v90 + 16))(v90, 2, v149);
        (*(void (**)(uint64_t, uint64_t, _DWORD *, _DWORD *))(*(_QWORD *)v40[22] + 32))(v40[22], a7, v140, v140);
        *(_QWORD *)&a14.f64[0] = v134;
        v88 = v136;
        v87 = v132;
      }
LABEL_84:
      v107 = v147;
      *((float64x2_t *)v40 + 3) = v146;
      *((float64x2_t *)v40 + 4) = v107;
      v108 = *(_OWORD *)&buf[16];
      *(_OWORD *)(v40 + 11) = *(_OWORD *)buf;
      *((double *)v40 + 10) = v148;
      *(_OWORD *)(v40 + 13) = v108;
      *((double *)v40 + 15) = v160;
      *((float64x2_t *)v40 + 8) = v88;
      *((float64x2_t *)v40 + 9) = v87;
      v40[20] = *(_QWORD *)&a14.f64[0];
      v109 = *((float *)v40 + 54);
      v110 = *((float *)v40 + 53);
      *(_DWORD *)__p = *((_DWORD *)v40 + 53);
      v111 = *((double *)v40 + 28);
      *(float *)v149 = v109;
      if (v111 == v110)
      {
        v113 = v109;
        v112 = *((double *)v40 + 29);
        if (v112 == v113)
        {
          vDSP_vsma(v86, 1, (const float *)__p, __O, 1, __O, 1, a7);
          vDSP_vsma(v119, 1, (const float *)v149, v120, 1, v120, 1, a7);
          goto LABEL_88;
        }
      }
      else
      {
        v112 = *((double *)v40 + 29);
        v113 = v109;
      }
      v114 = (v111 - v110) / (double)a7;
      v115 = (v112 - v113) / (double)a7;
      v138 = v115;
      __Step = v114;
      vDSP_vrampmuladd(v86, 1, (float *)__p, &__Step, __O, 1, a7);
      vDSP_vrampmuladd(v119, 1, (float *)v149, &v138, v120, 1, a7);
LABEL_88:
      result = 0;
      *((float *)this + 83) = v28;
      return result;
    }
    v76 = *((double *)v40 + 23);
    v77 = *((float *)v40 + 9) / v76 * 3.14159265;
    if (v77 <= 0.0)
    {
      v146 = 0uLL;
      v148 = 0.0;
      v147 = (float64x2_t)0x3FF0000000000000uLL;
    }
    else
    {
      BiquadCoefficients::SetPriv((BiquadCoefficients *)&v146, 7, fmin(v77, 3.11017673), 0.707106781, 0.0);
      v76 = *((double *)v40 + 23);
    }
    v91 = *((float *)v40 + 10) / v76 * 3.14159265;
    if (v91 <= 0.0)
    {
      *(_QWORD *)buf = 0;
      *(_QWORD *)&buf[8] = 0;
      *(_QWORD *)&buf[24] = 0;
      v160 = 0.0;
      *(_QWORD *)&buf[16] = 0x3FF0000000000000;
    }
    else
    {
      BiquadCoefficients::SetPriv((BiquadCoefficients *)buf, 7, fmin(v91, 3.11017673), 0.707106781, 0.0);
      v76 = *((double *)v40 + 23);
    }
    v92 = *((float *)v40 + 8) / v76 * 3.14159265;
    if (v92 <= 0.0)
    {
      v87 = (float64x2_t)xmmword_1B66271B0;
      v88 = 0uLL;
      a14.f64[0] = 0.0;
      if ((_DWORD)a7)
      {
LABEL_72:
        v97 = v148;
        v98 = (float)(1.0 / (float)a7);
        v130 = v147;
        v131 = v146;
        v126 = vmulq_n_f64(vsubq_f64(v147, *((float64x2_t *)v40 + 4)), v98);
        v127 = vmulq_n_f64(vsubq_f64(v146, *((float64x2_t *)v40 + 3)), v98);
        v99 = (v148 - *((double *)v40 + 10)) * v98;
        v100 = v160;
        v128 = *(float64x2_t *)&buf[16];
        v129 = *(float64x2_t *)buf;
        v124 = vmulq_n_f64(vsubq_f64(*(float64x2_t *)&buf[16], *(float64x2_t *)(v40 + 13)), v98);
        v125 = vmulq_n_f64(vsubq_f64(*(float64x2_t *)buf, *(float64x2_t *)(v40 + 11)), v98);
        v101 = (v160 - *((double *)v40 + 15)) * v98;
        v122 = vmulq_n_f64(vsubq_f64(v87, *((float64x2_t *)v40 + 9)), v98);
        v123 = vmulq_n_f64(vsubq_f64(v88, *((float64x2_t *)v40 + 8)), v98);
        v102 = (a14.f64[0] - *((double *)v40 + 20)) * v98;
        v103 = a7;
        v86 = v53;
        do
        {
          v145 = v53;
          if (v103 >= 0x80)
            v104 = 128;
          else
            v104 = v103;
          v142 = v54;
          v141 = 4 * v104;
          v144 = 4 * v104;
          *(float64x2_t *)__p = v146;
          *(float64x2_t *)&__p[16] = v147;
          v155 = v148;
          v156 = v88;
          v157 = v87;
          v158 = *(_QWORD *)&a14.f64[0];
          *(_OWORD *)v149 = *(_OWORD *)buf;
          *(_OWORD *)&v149[16] = *(_OWORD *)&buf[16];
          v150 = v160;
          v151 = v88;
          v152 = v87;
          v153 = *(_QWORD *)&a14.f64[0];
          v105 = v40[21];
          v135 = (__n128)a14;
          v137 = v88;
          v133 = v87;
          if (v105)
          {
            (*(void (**)(uint64_t, uint64_t, _BYTE *))(*(_QWORD *)v105 + 16))(v105, 2, __p);
            (*(void (**)(uint64_t, uint64_t, _DWORD *, _DWORD *))(*(_QWORD *)v40[21] + 32))(v40[21], v104, v143, v143);
            a14 = (float64x2_t)v135;
            v88 = v137;
            v87 = v133;
          }
          v106 = v40[22];
          if (v106)
          {
            (*(void (**)(uint64_t, uint64_t, _BYTE *))(*(_QWORD *)v106 + 16))(v106, 2, v149);
            (*(void (**)(uint64_t, uint64_t, _DWORD *, _DWORD *))(*(_QWORD *)v40[22] + 32))(v40[22], v104, v140, v140);
            a14 = (float64x2_t)v135;
            v88 = v137;
            v87 = v133;
          }
          v130 = vmlaq_n_f64(v130, v126, (double)v104);
          v131 = vmlaq_n_f64(v131, v127, (double)v104);
          v146 = v131;
          v147 = v130;
          v97 = v97 + v99 * (double)v104;
          v148 = v97;
          v128 = vmlaq_n_f64(v128, v124, (double)v104);
          v129 = vmlaq_n_f64(v129, v125, (double)v104);
          *(float64x2_t *)buf = v129;
          *(float64x2_t *)&buf[16] = v128;
          v100 = v100 + v101 * (double)v104;
          v160 = v100;
          v88 = vmlaq_n_f64(v88, v123, (double)v104);
          v87 = vmlaq_n_f64(v87, v122, (double)v104);
          a14.f64[0] = a14.f64[0] + v102 * (double)v104;
          v53 += v104;
          v54 += v104;
          v103 -= v104;
        }
        while (v103);
        goto LABEL_84;
      }
    }
    else
    {
      v93 = __sincos_stret(fmin(v92, 3.11017673));
      v94 = __exp10(0.0);
      v95 = v93.__sinval * 0.707106781 + 1.0;
      v88.f64[0] = v93.__cosval * -2.0 * (1.0 / v95);
      v88.f64[1] = 1.0 / v95 - v93.__sinval * 0.707106781 * (1.0 / v95);
      v96.f64[0] = 0.5 - v93.__cosval * 0.5;
      v96.f64[1] = v96.f64[0] + v96.f64[0];
      a14 = vmulq_n_f64(v96, 1.0 / v95 * v94);
      v87 = a14;
      if ((_DWORD)a7)
        goto LABEL_72;
    }
    v86 = v53;
    goto LABEL_84;
  }
  if (getAUSMV2Log(void)::onceToken != -1)
    dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_5474);
  v32 = getAUSMV2Log(void)::gLog;
  if (os_log_type_enabled((os_log_t)getAUSMV2Log(void)::gLog, OS_LOG_TYPE_DEBUG))
  {
    std::string::basic_string[abi:ne180100]<0>(&v146, "SphericalHeadSpatializer");
    std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>("::", (std::string *)&v146, (std::string *)v149);
    std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>("processAccumulating", (std::string *)v149, (std::string *)__p);
    if (__p[23] >= 0)
      v118 = __p;
    else
      v118 = *(_BYTE **)__p;
    *(_DWORD *)buf = 136315138;
    *(_QWORD *)&buf[4] = v118;
    _os_log_debug_impl(&dword_1B5ED0000, v32, OS_LOG_TYPE_DEBUG, "%s: ERROR: not initialized", buf, 0xCu);
    if ((__p[23] & 0x80000000) != 0)
      operator delete(*(void **)__p);
    if ((v149[23] & 0x80000000) != 0)
      operator delete(*(void **)v149);
    if (SHIBYTE(v147.f64[0]) < 0)
      operator delete(*(void **)&v146.f64[0]);
  }
  return 4294956429;
}

void sub_1B64601E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,void *a47,uint64_t a48,int a49,__int16 a50,char a51,char a52,uint64_t a53,uint64_t a54,uint64_t a55,void *__p,uint64_t a57,int a58,__int16 a59,char a60,char a61)
{
  if (a61 < 0)
    operator delete(__p);
  if (a52 < 0)
    operator delete(a47);
  _Unwind_Resume(exception_object);
}

float SphericalHeadSpatializer::CalculateInterauralTimeDelays(SphericalHeadSpatializer *this, float a2, float a3, float a4)
{
  float v5;
  float v6;
  float v7;
  float v8;
  double v9;
  float v10;
  float v11;
  float v12;
  float v13;

  v5 = (float)((float)(180.0 - a2) / 180.0) * 3.14159265;
  v6 = (float)(a3 / 180.0) * 3.14159265;
  v7 = cosf(v6);
  v8 = (float)(1.0 - v7) * 0.5;
  v9 = v5;
  v10 = v9 + -1.57079633;
  v11 = cosf(v10);
  asinf(sqrtf(v8 + (float)(v7 * (float)((float)(1.0 - v11) * 0.5))));
  v12 = v9 + -4.71238898;
  v13 = cosf(v12);
  return (float)(a4 * 0.00052353) * asinf(sqrtf(v8 + (float)(v7 * (float)((float)(1.0 - v13) * 0.5))));
}

uint64_t *std::unique_ptr<SphericalHeadPanner>::reset[abi:ne180100](uint64_t *result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *result;
  *result = a2;
  if (v2)
  {
    v3 = *(_QWORD *)(v2 + 176);
    if (v3)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
      *(_QWORD *)(v2 + 176) = 0;
    }
    v4 = *(_QWORD *)(v2 + 168);
    if (v4)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
      *(_QWORD *)(v2 + 168) = 0;
    }
    if (*(_QWORD *)v2)
    {
      free(*(void **)v2);
      *(_QWORD *)v2 = 0;
    }
    JUMPOUT(0x1BCC95CECLL);
  }
  return result;
}

void AUBeamNFSelector::~AUBeamNFSelector(AUBeamNFSelector *this)
{
  AUBeamNFSelector::~AUBeamNFSelector(this);
  JUMPOUT(0x1BCC95CECLL);
}

{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  _QWORD *v27;

  *(_QWORD *)this = &off_1E69DF998;
  v2 = (void *)*((_QWORD *)this + 151);
  if (v2)
  {
    *((_QWORD *)this + 152) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 148);
  if (v3)
  {
    *((_QWORD *)this + 149) = v3;
    operator delete(v3);
  }
  v4 = (void *)*((_QWORD *)this + 145);
  if (v4)
  {
    *((_QWORD *)this + 146) = v4;
    operator delete(v4);
  }
  v5 = (void *)*((_QWORD *)this + 142);
  if (v5)
  {
    *((_QWORD *)this + 143) = v5;
    operator delete(v5);
  }
  v6 = (void *)*((_QWORD *)this + 139);
  if (v6)
  {
    *((_QWORD *)this + 140) = v6;
    operator delete(v6);
  }
  v7 = (void *)*((_QWORD *)this + 136);
  if (v7)
  {
    *((_QWORD *)this + 137) = v7;
    operator delete(v7);
  }
  v8 = (void *)*((_QWORD *)this + 133);
  if (v8)
  {
    *((_QWORD *)this + 134) = v8;
    operator delete(v8);
  }
  v9 = (void *)*((_QWORD *)this + 130);
  if (v9)
  {
    *((_QWORD *)this + 131) = v9;
    operator delete(v9);
  }
  v10 = (void *)*((_QWORD *)this + 127);
  if (v10)
  {
    *((_QWORD *)this + 128) = v10;
    operator delete(v10);
  }
  v11 = (void *)*((_QWORD *)this + 124);
  if (v11)
  {
    *((_QWORD *)this + 125) = v11;
    operator delete(v11);
  }
  v12 = (void *)*((_QWORD *)this + 121);
  if (v12)
  {
    *((_QWORD *)this + 122) = v12;
    operator delete(v12);
  }
  v13 = (void *)*((_QWORD *)this + 118);
  if (v13)
  {
    *((_QWORD *)this + 119) = v13;
    operator delete(v13);
  }
  v14 = (void *)*((_QWORD *)this + 115);
  if (v14)
  {
    *((_QWORD *)this + 116) = v14;
    operator delete(v14);
  }
  v15 = (void *)*((_QWORD *)this + 112);
  if (v15)
  {
    *((_QWORD *)this + 113) = v15;
    operator delete(v15);
  }
  v16 = (void *)*((_QWORD *)this + 109);
  if (v16)
  {
    *((_QWORD *)this + 110) = v16;
    operator delete(v16);
  }
  v17 = (void *)*((_QWORD *)this + 106);
  if (v17)
  {
    *((_QWORD *)this + 107) = v17;
    operator delete(v17);
  }
  v18 = (void *)*((_QWORD *)this + 103);
  if (v18)
  {
    *((_QWORD *)this + 104) = v18;
    operator delete(v18);
  }
  v19 = (void *)*((_QWORD *)this + 100);
  if (v19)
  {
    *((_QWORD *)this + 101) = v19;
    operator delete(v19);
  }
  v20 = (void *)*((_QWORD *)this + 97);
  if (v20)
  {
    *((_QWORD *)this + 98) = v20;
    operator delete(v20);
  }
  v21 = (void *)*((_QWORD *)this + 94);
  if (v21)
  {
    *((_QWORD *)this + 95) = v21;
    operator delete(v21);
  }
  v22 = (void *)*((_QWORD *)this + 91);
  if (v22)
  {
    *((_QWORD *)this + 92) = v22;
    operator delete(v22);
  }
  v23 = (void *)*((_QWORD *)this + 84);
  if (v23)
  {
    *((_QWORD *)this + 85) = v23;
    operator delete(v23);
  }
  v24 = (void *)*((_QWORD *)this + 79);
  if (v24)
  {
    *((_QWORD *)this + 80) = v24;
    operator delete(v24);
  }
  v25 = (void *)*((_QWORD *)this + 76);
  if (v25)
  {
    *((_QWORD *)this + 77) = v25;
    operator delete(v25);
  }
  v26 = (void *)*((_QWORD *)this + 73);
  if (v26)
  {
    *((_QWORD *)this + 74) = v26;
    operator delete(v26);
  }
  v27 = (_QWORD *)*((_QWORD *)this + 71);
  if (v27)
  {
    ((void (*)(int, _QWORD *))ausdk::BufferAllocator::instance(void)::global[3])((int)&ausdk::BufferAllocator::instance(void)::global, v27);
    *((_QWORD *)this + 71) = 0;
  }
  *((_QWORD *)this + 72) = 0;
  *((_DWORD *)this + 140) = 0;
  ausdk::AUBase::~AUBase(this);
}

uint64_t AUBeamNFSelector::Initialize(AUBeamNFSelector *this)
{
  unsigned int v2;
  ausdk::AUScope *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t Element;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  ausdk::AUElement *v13;
  ausdk::AUElement **v14;
  uint64_t v15;
  ausdk::AUElement *v16;
  ausdk::AUElement **v17;

  v2 = 0;
  v3 = (AUBeamNFSelector *)((char *)this + 80);
  while (1)
  {
    v4 = *((_QWORD *)this + 15);
    if (v4)
      LODWORD(v5) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 24))(v4);
    else
      v5 = (*((_QWORD *)this + 13) - *((_QWORD *)this + 12)) >> 3;
    if (v2 >= v5)
      break;
    if (*(double *)(ausdk::AUScope::SafeGetElement(v3, v2) + 80) != *((double *)this + 69))
      __assert_rtn("Initialize", "AUBeamNFSelector.cpp", 375, "Input(i).GetStreamFormat().mSampleRate == mSampleRate");
    Element = ausdk::AUScope::SafeGetElement(v3, v2++);
    if (*(_DWORD *)(Element + 108) != 1)
      return 4294956428;
  }
  v7 = 0;
  while (1)
  {
    v8 = *((_QWORD *)this + 21);
    if (v8)
      LODWORD(v9) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 24))(v8);
    else
      v9 = (*((_QWORD *)this + 19) - *((_QWORD *)this + 18)) >> 3;
    if (v7 >= v9)
      break;
    if (*(double *)(ausdk::AUScope::SafeGetElement((AUBeamNFSelector *)((char *)this + 128), v7) + 80) != *((double *)this + 69))
      __assert_rtn("Initialize", "AUBeamNFSelector.cpp", 383, "Output(i).GetStreamFormat().mSampleRate == mSampleRate");
    v10 = ausdk::AUScope::SafeGetElement((AUBeamNFSelector *)((char *)this + 128), v7++);
    if (*(_DWORD *)(v10 + 108) != 1)
      return 4294956428;
  }
  v12 = *((_QWORD *)this + 9);
  if (v12)
  {
    v13 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v12 + 32))(v12, 0);
  }
  else
  {
    v14 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v14)
      v13 = 0;
    else
      v13 = *v14;
  }
  *((_DWORD *)this + 135) = ausdk::AUElement::GetParameter(v13, 2u);
  v15 = *((_QWORD *)this + 9);
  if (v15)
  {
    v16 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v15 + 32))(v15, 0);
  }
  else
  {
    v17 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v17)
      v16 = 0;
    else
      v16 = *v17;
  }
  *((_DWORD *)this + 136) = (int)ausdk::AUElement::GetParameter(v16, 1u);
  AUBeamNFSelector::UpdateState(this);
  (*(void (**)(AUBeamNFSelector *, _QWORD, _QWORD))(*(_QWORD *)this + 72))(this, 0, 0);
  return 0;
}

uint64_t AUBeamNFSelector::Reset(AUBeamNFSelector *this)
{
  AUBeamNFSelector::UpdateState(this);
  return 0;
}

uint64_t AUBeamNFSelector::GetPropertyInfo(AUBeamNFSelector *this, int a2, int a3, unsigned int a4, unsigned int *a5, BOOL *a6)
{
  uint64_t result;

  if (a3 || a2 != 3700 && a2 != 21)
    return 4294956417;
  result = 0;
  *a6 = 1;
  *a5 = 4;
  return result;
}

uint64_t AUBeamNFSelector::GetProperty(AUBeamNFSelector *this, int a2, int a3, unsigned int a4, _DWORD *a5)
{
  uint64_t result;
  unsigned __int8 *v6;

  if (a3)
    return 4294956417;
  if (a2 == 3700)
  {
    v6 = (unsigned __int8 *)this + 376;
  }
  else
  {
    if (a2 != 21)
      return 4294956417;
    v6 = (unsigned __int8 *)this + 536;
  }
  result = 0;
  *a5 = *v6;
  return result;
}

uint64_t AUBeamNFSelector::SetProperty(AUBeamNFSelector *this, int a2, int a3, unsigned int a4, CFTypeRef *a5)
{
  uint64_t result;
  const __CFDictionary *v7;
  NSObject *v8;
  NSObject *v9;
  NSObject *v10;
  NSObject *v11;
  NSObject *v12;
  CFTypeRef cf;
  void *value;
  uint8_t buf[4];
  const char *v16;
  __int16 v17;
  int v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  if (a3)
    return 4294956417;
  if (a2 == 4530)
  {
    if (a5)
    {
      v7 = (const __CFDictionary *)*a5;
      CFRetain(*a5);
      value = 0;
      if (CFDictionaryGetValueIfPresent(v7, CFSTR("BeamSystemNoiseProfile"), (const void **)&value))
      {
        if (AUBeamNFSelectorLogScope(void)::once != -1)
          dispatch_once(&AUBeamNFSelectorLogScope(void)::once, &__block_literal_global_16140);
        if (AUBeamNFSelectorLogScope(void)::scope)
        {
          v8 = *(NSObject **)AUBeamNFSelectorLogScope(void)::scope;
          if (!*(_QWORD *)AUBeamNFSelectorLogScope(void)::scope)
          {
LABEL_26:
            SpectralProfile::SetProfile((AUBeamNFSelector *)((char *)this + 632), value);
            goto LABEL_27;
          }
        }
        else
        {
          v8 = MEMORY[0x1E0C81028];
        }
        if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)buf = 136315394;
          v16 = "AUBeamNFSelector.cpp";
          v17 = 1024;
          v18 = 526;
          _os_log_impl(&dword_1B5ED0000, v8, OS_LOG_TYPE_INFO, "%25s:%-5d BeamSystemNoiseProfile found in plist.", buf, 0x12u);
        }
        goto LABEL_26;
      }
      if (AUBeamNFSelectorLogScope(void)::once != -1)
        dispatch_once(&AUBeamNFSelectorLogScope(void)::once, &__block_literal_global_16140);
      if (AUBeamNFSelectorLogScope(void)::scope)
      {
        v10 = *(NSObject **)AUBeamNFSelectorLogScope(void)::scope;
        if (!*(_QWORD *)AUBeamNFSelectorLogScope(void)::scope)
          goto LABEL_27;
      }
      else
      {
        v10 = MEMORY[0x1E0C81028];
      }
      if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 136315394;
        v16 = "AUBeamNFSelector.cpp";
        v17 = 1024;
        v18 = 544;
        _os_log_impl(&dword_1B5ED0000, v10, OS_LOG_TYPE_DEFAULT, "%25s:%-5d BeamSystemNoiseProfile dictionary not present in plist.", buf, 0x12u);
      }
LABEL_27:
      cf = 0;
      if (!CFDictionaryGetValueIfPresent(v7, CFSTR("BeamFarfieldEQ"), &cf))
      {
        if (AUBeamNFSelectorLogScope(void)::once != -1)
          dispatch_once(&AUBeamNFSelectorLogScope(void)::once, &__block_literal_global_16140);
        if (AUBeamNFSelectorLogScope(void)::scope)
        {
          v12 = *(NSObject **)AUBeamNFSelectorLogScope(void)::scope;
          if (!*(_QWORD *)AUBeamNFSelectorLogScope(void)::scope)
            goto LABEL_42;
        }
        else
        {
          v12 = MEMORY[0x1E0C81028];
        }
        if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 136315394;
          v16 = "AUBeamNFSelector.cpp";
          v17 = 1024;
          v18 = 571;
          _os_log_impl(&dword_1B5ED0000, v12, OS_LOG_TYPE_DEFAULT, "%25s:%-5d BeamFarfieldEQ dictionary not present in plist.", buf, 0x12u);
        }
        goto LABEL_42;
      }
      if (AUBeamNFSelectorLogScope(void)::once != -1)
        dispatch_once(&AUBeamNFSelectorLogScope(void)::once, &__block_literal_global_16140);
      if (AUBeamNFSelectorLogScope(void)::scope)
      {
        v11 = *(NSObject **)AUBeamNFSelectorLogScope(void)::scope;
        if (!*(_QWORD *)AUBeamNFSelectorLogScope(void)::scope)
        {
LABEL_41:
          SpectralProfile::SetProfile((AUBeamNFSelector *)((char *)this + 672), cf);
LABEL_42:
          CFRelease(v7);
          return 0;
        }
      }
      else
      {
        v11 = MEMORY[0x1E0C81028];
      }
      if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 136315394;
        v16 = "AUBeamNFSelector.cpp";
        v17 = 1024;
        v18 = 553;
        _os_log_impl(&dword_1B5ED0000, v11, OS_LOG_TYPE_INFO, "%25s:%-5d BeamFarfieldEQ found in plist.", buf, 0x12u);
      }
      goto LABEL_41;
    }
    if (AUBeamNFSelectorLogScope(void)::once != -1)
      dispatch_once(&AUBeamNFSelectorLogScope(void)::once, &__block_literal_global_16140);
    if (AUBeamNFSelectorLogScope(void)::scope)
    {
      v9 = *(NSObject **)AUBeamNFSelectorLogScope(void)::scope;
      if (!*(_QWORD *)AUBeamNFSelectorLogScope(void)::scope)
        return 4294956445;
    }
    else
    {
      v9 = MEMORY[0x1E0C81028];
    }
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      v16 = "AUBeamNFSelector.cpp";
      v17 = 1024;
      v18 = 513;
      _os_log_impl(&dword_1B5ED0000, v9, OS_LOG_TYPE_ERROR, "%25s:%-5d The CFDictionaryRef passed to SetProperty is null.", buf, 0x12u);
    }
    return 4294956445;
  }
  if (a2 != 21)
    return 4294956417;
  result = 0;
  *((_BYTE *)this + 536) = *(_DWORD *)a5 != 0;
  return result;
}

void sub_1B6460A84(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, __int128 buf)
{
  const void *v11;
  uint64_t v12;
  uint64_t v13;
  NSObject **v14;
  NSObject *v15;

  if (!a2)
    _Unwind_Resume(exception_object);
  __cxa_begin_catch(exception_object);
  if (*(_QWORD *)(v13 + 3432) != -1)
    dispatch_once(&AUBeamNFSelectorLogScope(void)::once, &__block_literal_global_16140);
  v14 = *(NSObject ***)(v12 + 3440);
  if (v14)
  {
    v15 = *v14;
    if (!*v14)
      goto LABEL_10;
  }
  else
  {
    v15 = MEMORY[0x1E0C81028];
  }
  if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
  {
    LODWORD(buf) = 136315394;
    *(_QWORD *)((char *)&buf + 4) = "AUBeamNFSelector.cpp";
    WORD6(buf) = 1024;
    *(_DWORD *)((char *)&buf + 14) = 564;
    _os_log_impl(&dword_1B5ED0000, v15, OS_LOG_TYPE_ERROR, "%25s:%-5d Failed to set BeamFarfieldEQ data to SpectralProfile object. Invalid dictionary entry?", (uint8_t *)&buf, 0x12u);
  }
LABEL_10:
  CFRelease(v11);
  __cxa_end_catch();
  JUMPOUT(0x1B6460930);
}

uint64_t AUBeamNFSelector::SetParameter(AUBeamNFSelector *this, unsigned int a2, int a3, float a4)
{
  uint64_t result;
  uint64_t v8;
  ausdk::AUElement *v9;
  ausdk::AUElement **v10;

  if (a3)
    return 4294956418;
  v8 = *((_QWORD *)this + 9);
  if (v8)
  {
    v9 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v8 + 32))(v8, 0);
  }
  else
  {
    v10 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v10)
      v9 = 0;
    else
      v9 = *v10;
  }
  ausdk::AUElement::SetParameter(v9, a2, a4, 0);
  result = 0;
  ++*((_DWORD *)this + 132);
  return result;
}

uint64_t AUBeamNFSelector::CanScheduleParameters(AUBeamNFSelector *this)
{
  return 0;
}

uint64_t AUBeamNFSelector::ProcessMultipleBufferLists(AUBeamNFSelector *this, unsigned int *a2, unsigned int a3, int a4, const AudioBufferList **a5, int a6, AudioBufferList **a7)
{
  uint64_t result;
  const AudioStreamBasicDescription *Element;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  float v16;
  __int128 v17;
  int v18;
  int v19;
  int v20;
  uint64_t v21;
  ausdk::AUElement *v22;
  ausdk::AUElement **v23;
  int v24;
  int v25;
  int v26;
  unsigned int *v27;
  int v28;
  const float *v29;
  float *v30;
  uint64_t v31;
  unsigned int v32;
  uint64_t v33;
  ausdk::AUElement *v34;
  ausdk::AUElement **v35;
  uint64_t v36;
  const float *mData;
  float *v38;
  const float *v39;
  float *v40;
  vDSP_Length v41;
  const float *v42;
  float *v43;
  vDSP_Length v44;
  float __C;
  __int128 v46;
  uint64_t BufferList;
  __int128 v48;
  uint64_t v49;

  v49 = *MEMORY[0x1E0C80C00];
  result = 4294956428;
  if (a6 == 2 && a4 == 5 && *((_DWORD *)this + 137) == a3)
  {
    Element = (const AudioStreamBasicDescription *)ausdk::AUScope::SafeGetElement((AUBeamNFSelector *)((char *)this + 80), 2u);
    ausdk::AUBufferList::PrepareBuffer((AUBeamNFSelector *)((char *)this + 560), Element + 2, a3);
    v13 = 2 * a3;
    if (2 * a3)
    {
      v14 = 0;
      v15 = 4 * v13;
      do
      {
        v16 = (float)(*(float *)((char *)a5[2]->mBuffers[0].mData + v14)
                    + *(float *)((char *)a5[3]->mBuffers[0].mData + v14))
            * 0.5;
        *(float *)(*(_QWORD *)(ausdk::AUBufferList::GetBufferList((AUBeamNFSelector *)((char *)this + 560)) + 16) + v14) = v16;
        v14 += 4;
      }
      while (v15 != v14);
    }
    v17 = *(_OWORD *)a5;
    v46 = *((_OWORD *)a5 + 1);
    v48 = v17;
    BufferList = ausdk::AUBufferList::GetBufferList((AUBeamNFSelector *)((char *)this + 560));
    v18 = *((_DWORD *)this + 132);
    if (*((_DWORD *)this + 133) != v18)
    {
      AUBeamNFSelector::UpdateState(this);
      *((_DWORD *)this + 133) = v18;
    }
    if (*((_BYTE *)this + 536))
    {
      CopyBufferList(&a5[2]->mNumberBuffers, *a7);
      CopyBufferList(&a5[4]->mNumberBuffers, a7[1]);
      return 0;
    }
    switch(*((_DWORD *)this + 308))
    {
      case 0:
        if (!*((_BYTE *)this + 1280))
          AUBeamNFSelector::DetectPosition(this, (const AudioBuffer *)a5[2]->mBuffers[0].mData, a5[3]->mBuffers, (*a5)->mBuffers, a5[1]->mBuffers, a5[4]->mBuffers);
        break;
      case 1:
        *((_DWORD *)this + 309) = 0;
        break;
      case 2:
        v19 = 1;
        goto LABEL_17;
      case 3:
        v19 = 2;
LABEL_17:
        *((_DWORD *)this + 309) = v19;
        break;
      default:
        break;
    }
    v20 = *((_DWORD *)this + 309);
    if (v20 != *((_DWORD *)this + 136))
    {
      v21 = *((_QWORD *)this + 9);
      if (v21)
      {
        v22 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v21 + 32))(v21, 0);
        v20 = *((_DWORD *)this + 309);
      }
      else
      {
        v23 = (ausdk::AUElement **)*((_QWORD *)this + 6);
        if (*((ausdk::AUElement ***)this + 7) == v23)
          v22 = 0;
        else
          v22 = *v23;
      }
      ausdk::AUElement::SetParameter(v22, 1u, (float)v20, 0);
      v20 = *((_DWORD *)this + 309);
      *((_DWORD *)this + 136) = v20;
    }
    v24 = *((_DWORD *)this + 311);
    if (v24 != 2)
    {
      if (v24 != 1)
      {
        if (!v24)
        {
          if (v20 > 1)
            goto LABEL_40;
LABEL_37:
          *((_DWORD *)this + 310) = 0;
LABEL_43:
          v27 = (unsigned int *)((char *)this + 1240);
          goto LABEL_44;
        }
        v27 = (unsigned int *)((char *)this + 1240);
        if ((*((_DWORD *)this + 310) - 3) > 1)
        {
LABEL_44:
          memcpy(*((void **)this + 148), a5[4]->mBuffers[0].mData, a5[4]->mBuffers[0].mDataByteSize);
LABEL_48:
          v31 = *((_QWORD *)&v46 + *((unsigned int *)this + 310));
          memcpy(*((void **)this + 151), *(const void **)(v31 + 16), *(unsigned int *)(v31 + 12));
          v32 = *((_DWORD *)this + 310);
          if (v32 != *((_DWORD *)this + 135))
          {
            v33 = *((_QWORD *)this + 9);
            if (v33)
            {
              v34 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v33 + 32))(v33, 0);
              v32 = *v27;
            }
            else
            {
              v35 = (ausdk::AUElement **)*((_QWORD *)this + 6);
              if (*((ausdk::AUElement ***)this + 7) == v35)
                v34 = 0;
              else
                v34 = *v35;
            }
            ausdk::AUElement::SetParameter(v34, 2u, (float)v32, 0);
            v36 = *((_QWORD *)&v46 + *((unsigned int *)this + 135));
            memcpy(*((void **)this + 145), *(const void **)(v36 + 16), *(unsigned int *)(v36 + 12));
            if ((*((_DWORD *)this + 135) - 3) > 1)
            {
              memcpy(*((void **)this + 142), a5[4]->mBuffers[0].mData, a5[4]->mBuffers[0].mDataByteSize);
            }
            else
            {
              mData = (const float *)a5[4]->mBuffers[0].mData;
              v38 = (float *)*((_QWORD *)this + 142);
              vDSP_vmul(mData, 1, *((const float **)this + 76), 1, v38, 1, *((unsigned int *)this + 137));
              vDSP_vmul(&mData[*((unsigned int *)this + 137)], 1, *((const float **)this + 76), 1, &v38[*((unsigned int *)this + 137)], 1, *((unsigned int *)this + 137));
              AUBeamNFSelector::ApplySystemNoiseFloor(this, v38, *((const float **)this + 73));
            }
            v39 = (const float *)*((_QWORD *)this + 145);
            v40 = (float *)*((_QWORD *)this + 151);
            v41 = (2 * *((_DWORD *)this + 137));
            __C = 0.5;
            vDSP_vasm(v39, 1, v40, 1, &__C, v40, 1, v41);
            v42 = (const float *)*((_QWORD *)this + 142);
            v43 = (float *)*((_QWORD *)this + 148);
            v44 = (2 * *((_DWORD *)this + 137));
            __C = 0.5;
            vDSP_vasm(v42, 1, v43, 1, &__C, v43, 1, v44);
            *((_DWORD *)this + 135) = *((_DWORD *)this + 310);
          }
          memcpy(a7[1]->mBuffers[0].mData, *((const void **)this + 148), a7[1]->mBuffers[0].mDataByteSize);
          memcpy((*a7)->mBuffers[0].mData, *((const void **)this + 151), (*a7)->mBuffers[0].mDataByteSize);
          return 0;
        }
LABEL_47:
        v29 = (const float *)a5[4]->mBuffers[0].mData;
        v30 = (float *)*((_QWORD *)this + 148);
        vDSP_vmul(v29, 1, *((const float **)this + 76), 1, v30, 1, *((unsigned int *)this + 137));
        vDSP_vmul(&v29[*((unsigned int *)this + 137)], 1, *((const float **)this + 76), 1, &v30[*((unsigned int *)this + 137)], 1, *((unsigned int *)this + 137));
        AUBeamNFSelector::ApplySystemNoiseFloor(this, v30, *((const float **)this + 73));
        goto LABEL_48;
      }
      v26 = *((_DWORD *)this + 335);
      if (v26 == 1)
        goto LABEL_37;
      if (!v26)
      {
LABEL_40:
        v28 = 1;
LABEL_42:
        *((_DWORD *)this + 310) = v28;
        goto LABEL_43;
      }
      if (v20 != 1)
      {
        if (!v20)
          goto LABEL_37;
        goto LABEL_40;
      }
LABEL_41:
      v28 = 2;
      goto LABEL_42;
    }
    if (v20)
    {
      if (v20 == 1)
        goto LABEL_41;
      v25 = 4;
    }
    else
    {
      v25 = 3;
    }
    v27 = (unsigned int *)((char *)this + 1240);
    *((_DWORD *)this + 310) = v25;
    goto LABEL_47;
  }
  return result;
}

uint64_t AUBeamNFSelector::Render(AUBeamNFSelector *this, unsigned int *a2, const AudioTimeStamp *a3, uint64_t a4)
{
  uint64_t v8;
  char v9;
  ausdk::AUScope *v10;
  double v11;
  ausdk::AUInputElement *Element;
  uint64_t result;
  uint64_t v14;
  char v15;
  char v16;
  double v17;
  ausdk::AUIOElement *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _OWORD v22[2];
  uint64_t v23;
  _QWORD v24[3];

  v8 = 0;
  v9 = 0;
  v24[2] = *MEMORY[0x1E0C80C00];
  v10 = (AUBeamNFSelector *)((char *)this + 80);
  do
  {
    if (ausdk::AUBase::HasInput(this, v8))
    {
      v11 = *((double *)this + 69);
      if (v11 != *(double *)(ausdk::AUScope::SafeGetElement(v10, v8) + 80))
        __assert_rtn("Render", "AUBeamNFSelector.cpp", 1166, "mSampleRate == Input(i).GetStreamFormat().mSampleRate");
      Element = (ausdk::AUInputElement *)ausdk::AUScope::SafeGetElement(v10, v8);
      result = ausdk::AUInputElement::PullInput(Element, a2, a3, v8, a4);
      if ((_DWORD)result)
        return result;
    }
    else
    {
      v9 = 1;
    }
    v8 = (v8 + 1);
  }
  while ((_DWORD)v8 != 5);
  v14 = 0;
  v24[0] = 0;
  v24[1] = 0;
  v15 = 1;
  do
  {
    v16 = v15;
    v17 = *((double *)this + 69);
    if (v17 != *(double *)(ausdk::AUScope::SafeGetElement((AUBeamNFSelector *)((char *)this + 128), v14) + 80))
      __assert_rtn("Render", "AUBeamNFSelector.cpp", 1191, "mSampleRate == Output(i).GetStreamFormat().mSampleRate");
    v18 = (ausdk::AUIOElement *)ausdk::AUScope::SafeGetElement((AUBeamNFSelector *)((char *)this + 128), v14);
    v19 = ausdk::AUIOElement::PrepareBuffer(v18, a4);
    v15 = 0;
    v24[v14] = v19;
    v14 = 1;
  }
  while ((v16 & 1) != 0);
  if ((v9 & 1) != 0)
    return 0;
  v20 = 0;
  v23 = 0;
  memset(v22, 0, sizeof(v22));
  do
  {
    v21 = ausdk::AUScope::SafeGetElement(v10, v20);
    *((_QWORD *)v22 + v20++) = ausdk::AUBufferList::GetBufferList((ausdk::AUBufferList *)(v21 + 144));
  }
  while (v20 != 5);
  return (*(uint64_t (**)(AUBeamNFSelector *, unsigned int *, uint64_t, uint64_t, _OWORD *, uint64_t, _QWORD *))(*(_QWORD *)this + 184))(this, a2, a4, 5, v22, 2, v24);
}

uint64_t AUBeamNFSelector::GetParameterList(AUBeamNFSelector *this, int a2, unsigned int *a3, unsigned int *a4)
{
  unsigned int v4;
  uint64_t result;

  if (a2)
  {
    v4 = 0;
    result = 4294956430;
  }
  else
  {
    result = 0;
    if (a3)
    {
      *(_OWORD *)a3 = xmmword_1B6626920;
      *((_OWORD *)a3 + 1) = xmmword_1B66A0770;
      *((_OWORD *)a3 + 2) = xmmword_1B66A07D0;
      *((_OWORD *)a3 + 3) = xmmword_1B66A07E0;
      *((_OWORD *)a3 + 4) = xmmword_1B66A07F0;
      *((_OWORD *)a3 + 5) = xmmword_1B66A0800;
      a3[26] = 26;
      *((_QWORD *)a3 + 12) = 0x1900000018;
    }
    v4 = 27;
  }
  *a4 = v4;
  return result;
}

uint64_t AUBeamNFSelector::GetParameterInfo(AUBeamNFSelector *this, int a2, int a3, AudioUnitParameterInfo *buffer)
{
  uint64_t result;
  uint64_t v6;
  int v7;
  uint64_t v8;
  const __CFString *v9;
  AudioUnitParameterValue v10;
  uint64_t v11;
  AudioUnitParameterValue v12;
  uint64_t v13;
  AudioUnitParameterValue v14;
  AudioUnitParameterValue v15;
  const __CFString *v16;
  const __CFString *v17;

  if (a2)
    return 4294956430;
  buffer->flags = 0;
  buffer->unitName = 0;
  switch(a3)
  {
    case 0:
      buffer->cfNameString = CFSTR("Position detection mode.");
      buffer->flags = 0x8000000;
      CFStringGetCString(CFSTR("Position detection mode."), buffer->name, 52, 0x8000100u);
      buffer->unit = kAudioUnitParameterUnit_Indexed;
      v6 = 0x4040000000000000;
      goto LABEL_11;
    case 1:
      v7 = 1073774592;
      buffer->cfNameString = CFSTR("Detected phone position.");
      buffer->flags = 0x8000000;
      CFStringGetCString(CFSTR("Detected phone position."), buffer->name, 52, 0x8000100u);
      buffer->unit = kAudioUnitParameterUnit_Generic;
      v8 = 0x4000000000000000;
      goto LABEL_8;
    case 2:
      v7 = 1073774592;
      buffer->cfNameString = CFSTR("Current beam.");
      buffer->flags = 0x8000000;
      CFStringGetCString(CFSTR("Current beam."), buffer->name, 52, 0x8000100u);
      buffer->unit = kAudioUnitParameterUnit_Generic;
      v8 = 0x4080000000000000;
LABEL_8:
      *(_QWORD *)&buffer->minValue = v8;
      buffer->defaultValue = 0.0;
      goto LABEL_44;
    case 3:
      buffer->cfNameString = CFSTR("Output mode.");
      buffer->flags = 0x8000000;
      CFStringGetCString(CFSTR("Output mode."), buffer->name, 52, 0x8000100u);
      buffer->unit = kAudioUnitParameterUnit_Indexed;
      *(_QWORD *)&buffer->minValue = 0x4000000000000000;
      buffer->defaultValue = 0.0;
      goto LABEL_37;
    case 4:
      buffer->cfNameString = CFSTR("Update threshold mode.");
      buffer->flags = 0x8000000;
      CFStringGetCString(CFSTR("Update threshold mode."), buffer->name, 52, 0x8000100u);
      buffer->unit = kAudioUnitParameterUnit_Indexed;
      v6 = 0x3F80000000000000;
LABEL_11:
      *(_QWORD *)&buffer->minValue = v6;
      buffer->defaultValue = 1.0;
      goto LABEL_37;
    case 5:
      v9 = CFSTR("Update threshold.");
      goto LABEL_15;
    case 6:
      buffer->cfNameString = CFSTR("Update threshold at Noise level 1.");
      buffer->flags = 0x8000000;
      CFStringGetCString(CFSTR("Update threshold at Noise level 1."), buffer->name, 52, 0x8000100u);
      buffer->unit = kAudioUnitParameterUnit_Decibels;
      v10 = 7.0;
      goto LABEL_16;
    case 7:
      v9 = CFSTR("Update threshold at Noise level 2.");
LABEL_15:
      buffer->cfNameString = v9;
      buffer->flags = 0x8000000;
      CFStringGetCString(v9, buffer->name, 52, 0x8000100u);
      buffer->unit = kAudioUnitParameterUnit_Decibels;
      v10 = 4.0;
LABEL_16:
      buffer->defaultValue = v10;
      v11 = 0x4120000000000000;
      goto LABEL_36;
    case 8:
      buffer->cfNameString = CFSTR("Noise level 1.");
      buffer->flags = 0x8000000;
      CFStringGetCString(CFSTR("Noise level 1."), buffer->name, 52, 0x8000100u);
      buffer->unit = kAudioUnitParameterUnit_Decibels;
      v12 = 60.0;
      goto LABEL_19;
    case 9:
      buffer->cfNameString = CFSTR("Noise level 2.");
      buffer->flags = 0x8000000;
      CFStringGetCString(CFSTR("Noise level 2."), buffer->name, 52, 0x8000100u);
      buffer->unit = kAudioUnitParameterUnit_Decibels;
      v12 = 75.0;
LABEL_19:
      buffer->defaultValue = v12;
      v11 = 0x42C8000041A00000;
      goto LABEL_36;
    case 10:
      v7 = 1073774592;
      buffer->cfNameString = CFSTR("Current noise level.");
      buffer->flags = 0x8000000;
      CFStringGetCString(CFSTR("Current noise level."), buffer->name, 52, 0x8000100u);
      buffer->unit = kAudioUnitParameterUnit_Decibels;
      buffer->defaultValue = 60.0;
      v13 = 0x42C8000041A00000;
      goto LABEL_43;
    case 11:
      buffer->cfNameString = CFSTR("Wind detection probability.");
      buffer->flags = 0x8000000;
      CFStringGetCString(CFSTR("Wind detection probability."), buffer->name, 52, 0x8000100u);
      buffer->unit = kAudioUnitParameterUnit_Generic;
      buffer->defaultValue = 0.0;
      goto LABEL_35;
    case 12:
      buffer->cfNameString = CFSTR("Wind detection threshold.");
      buffer->flags = 0x8000000;
      CFStringGetCString(CFSTR("Wind detection threshold."), buffer->name, 52, 0x8000100u);
      buffer->unit = kAudioUnitParameterUnit_Generic;
      v14 = 1.0;
      goto LABEL_34;
    case 13:
      buffer->cfNameString = CFSTR("Threshold left.");
      buffer->flags = 0x8000000;
      CFStringGetCString(CFSTR("Threshold left."), buffer->name, 52, 0x8000100u);
      buffer->unit = kAudioUnitParameterUnit_Decibels;
      v15 = 0.84;
      goto LABEL_25;
    case 14:
      buffer->cfNameString = CFSTR("Threshold right.");
      buffer->flags = 0x8000000;
      CFStringGetCString(CFSTR("Threshold right."), buffer->name, 52, 0x8000100u);
      buffer->unit = kAudioUnitParameterUnit_Decibels;
      v15 = -0.13;
LABEL_25:
      buffer->defaultValue = v15;
      v11 = 0x40800000C0800000;
      goto LABEL_36;
    case 15:
      buffer->cfNameString = CFSTR("Start frequency (Fmin).");
      buffer->flags = 0x8000000;
      CFStringGetCString(CFSTR("Start frequency (Fmin)."), buffer->name, 52, 0x8000100u);
      buffer->unit = kAudioUnitParameterUnit_Hertz;
      buffer->defaultValue = 160.0;
      v11 = 0x447A000043200000;
      goto LABEL_36;
    case 16:
      buffer->cfNameString = CFSTR("End frequency (Fmax).");
      buffer->flags = 0x8000000;
      CFStringGetCString(CFSTR("End frequency (Fmax)."), buffer->name, 52, 0x8000100u);
      buffer->unit = kAudioUnitParameterUnit_Hertz;
      buffer->defaultValue = 800.0;
      v11 = 0x453B800043960000;
      goto LABEL_36;
    case 17:
      v7 = 1073774592;
      v16 = CFSTR("Update threshold crossed.");
      goto LABEL_39;
    case 18:
      v7 = 1073774592;
      v17 = CFSTR("M1 Separation.");
      goto LABEL_42;
    case 19:
      v7 = 1073774592;
      v17 = CFSTR("M4 Separation.");
      goto LABEL_42;
    case 20:
      v7 = 1073774592;
      v17 = CFSTR("MaxSep: max([M1],[M4],[+X],[-X]).");
      goto LABEL_42;
    case 21:
      buffer->cfNameString = CFSTR("PSD smoothing time constant.");
      buffer->flags = 0x8000000;
      CFStringGetCString(CFSTR("PSD smoothing time constant."), buffer->name, 52, 0x8000100u);
      buffer->unit = kAudioUnitParameterUnit_Seconds;
      v14 = 0.1;
      goto LABEL_34;
    case 22:
      buffer->cfNameString = CFSTR("Separation Difference smoothing time constant.");
      buffer->flags = 0x8000000;
      CFStringGetCString(CFSTR("Separation Difference smoothing time constant."), buffer->name, 52, 0x8000100u);
      buffer->unit = kAudioUnitParameterUnit_Seconds;
      v14 = 0.5;
LABEL_34:
      buffer->defaultValue = v14;
LABEL_35:
      v11 = 0x3F80000000000000;
LABEL_36:
      *(_QWORD *)&buffer->minValue = v11;
LABEL_37:
      v7 = -1073741824;
      goto LABEL_44;
    case 23:
      v7 = 1073774592;
      v16 = CFSTR("Downlink speech presence probabiility");
LABEL_39:
      buffer->cfNameString = v16;
      buffer->flags = 0x8000000;
      CFStringGetCString(v16, buffer->name, 52, 0x8000100u);
      buffer->unit = kAudioUnitParameterUnit_Generic;
      buffer->defaultValue = 0.0;
      v13 = 0x3F80000000000000;
      goto LABEL_43;
    case 24:
      v7 = 1073774592;
      v17 = CFSTR("+X Separation.");
      goto LABEL_42;
    case 25:
      v7 = 1073774592;
      v17 = CFSTR("-X Separation.");
LABEL_42:
      buffer->cfNameString = v17;
      buffer->flags = 0x8000000;
      CFStringGetCString(v17, buffer->name, 52, 0x8000100u);
      buffer->unit = kAudioUnitParameterUnit_Decibels;
      buffer->defaultValue = 0.0;
      v13 = 0x41A0000000000000;
      goto LABEL_43;
    case 26:
      v7 = 1073774592;
      buffer->cfNameString = CFSTR("Mic Status.");
      buffer->flags = 0x8000000;
      CFStringGetCString(CFSTR("Mic Status."), buffer->name, 52, 0x8000100u);
      buffer->unit = kAudioUnitParameterUnit_Generic;
      buffer->defaultValue = 5.0;
      v13 = 0x40A0000000000000;
LABEL_43:
      *(_QWORD *)&buffer->minValue = v13;
LABEL_44:
      result = 0;
      buffer->flags |= v7;
      break;
    default:
      result = 4294956418;
      break;
  }
  return result;
}

uint64_t AUBeamNFSelector::RestoreState(OpaqueAudioComponentInstance **this, const void *a2)
{
  uint64_t result;

  result = ausdk::AUBase::RestoreState(this, a2);
  if (!(_DWORD)result)
    ++*((_DWORD *)this + 132);
  return result;
}

uint64_t AUBeamNFSelector::GetParameterValueStrings(AUBeamNFSelector *this, int a2, int a3, const __CFArray **a4)
{
  uint64_t result;
  CFIndex v6;
  __int128 *v7;
  const __CFArray *v8;
  __int128 v9;
  __int128 v10;
  const __CFString *v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  if (!a4)
    return 0;
  if (a2)
    return 4294956430;
  switch(a3)
  {
    case 0:
      v9 = xmmword_1E69DFBD8;
      v10 = *(_OWORD *)&off_1E69DFBE8;
      v6 = 4;
      break;
    case 1:
      v7 = &xmmword_1E69DFBF8;
      goto LABEL_11;
    case 2:
      v9 = xmmword_1E69DFC10;
      v10 = *(_OWORD *)&off_1E69DFC20;
      v11 = CFSTR("-X beam.");
      v6 = 5;
      break;
    case 3:
      v7 = &xmmword_1E69DFC38;
LABEL_11:
      v9 = *v7;
      *(_QWORD *)&v10 = *((_QWORD *)v7 + 2);
      v6 = 3;
      break;
    case 4:
      v9 = xmmword_1E69DFC50;
      v6 = 2;
      break;
    default:
      return 0;
  }
  v8 = CFArrayCreate(0, (const void **)&v9, v6, 0);
  result = 0;
  *a4 = v8;
  return result;
}

double AUBeamNFSelector::GetLatency(AUBeamNFSelector *this)
{
  return 0.0;
}

double AUBeamNFSelector::GetTailTime(AUBeamNFSelector *this)
{
  return 0.05;
}

uint64_t AUBeamNFSelector::SupportsTail(AUBeamNFSelector *this)
{
  return 1;
}

BOOL AUBeamNFSelector::StreamFormatWritable(AUBeamNFSelector *this)
{
  return *((_BYTE *)this + 17) == 0;
}

uint64_t AUBeamNFSelector::SupportedNumChannels(AUBeamNFSelector *this, const AUChannelInfo **a2)
{
  if (a2)
    *a2 = (const AUChannelInfo *)&AUBeamNFSelector::SupportedNumChannels(AUChannelInfo const**)::sSupportedChannelConfigs;
  return 1;
}

BOOL AUBeamNFSelector::ValidFormat(AUBeamNFSelector *this, unsigned int a2, unsigned int a3, const AudioStreamBasicDescription *a4)
{
  return a4->mBitsPerChannel == 64 && a4->mFormatID == 1718773105 && a4->mChannelsPerFrame == 1;
}

void AUBeamNFSelector::UpdateState(AUBeamNFSelector *this)
{
  uint64_t v2;
  ausdk::AUElement *v3;
  ausdk::AUElement **v4;
  uint64_t v5;
  ausdk::AUElement *v6;
  ausdk::AUElement **v7;
  uint64_t v8;
  ausdk::AUElement *v9;
  ausdk::AUElement **v10;
  uint64_t v11;
  ausdk::AUElement *v12;
  ausdk::AUElement **v13;
  uint64_t v14;
  ausdk::AUElement *v15;
  ausdk::AUElement **v16;
  uint64_t v17;
  ausdk::AUElement *v18;
  ausdk::AUElement **v19;
  uint64_t v20;
  ausdk::AUElement *v21;
  ausdk::AUElement **v22;
  uint64_t v23;
  ausdk::AUElement *v24;
  ausdk::AUElement **v25;
  uint64_t v26;
  ausdk::AUElement *v27;
  ausdk::AUElement **v28;
  uint64_t v29;
  ausdk::AUElement *v30;
  ausdk::AUElement **v31;
  uint64_t v32;
  ausdk::AUElement *v33;
  ausdk::AUElement **v34;
  uint64_t v35;
  ausdk::AUElement *v36;
  ausdk::AUElement **v37;
  uint64_t v38;
  ausdk::AUElement *v39;
  ausdk::AUElement **v40;
  uint64_t v41;
  ausdk::AUElement *v42;
  ausdk::AUElement **v43;
  uint64_t v44;
  ausdk::AUElement *v45;
  ausdk::AUElement **v46;
  uint64_t v47;
  ausdk::AUElement *v48;
  ausdk::AUElement **v49;
  uint64_t v50;
  ausdk::AUElement *v51;
  ausdk::AUElement **v52;
  uint64_t v53;
  ausdk::AUElement *v54;
  ausdk::AUElement **v55;

  v2 = *((_QWORD *)this + 9);
  if (v2)
  {
    v3 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v2 + 32))(v2, 0);
  }
  else
  {
    v4 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v4)
      v3 = 0;
    else
      v3 = *v4;
  }
  *((_DWORD *)this + 308) = (int)ausdk::AUElement::GetParameter(v3, 0);
  v5 = *((_QWORD *)this + 9);
  if (v5)
  {
    v6 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v5 + 32))(v5, 0);
  }
  else
  {
    v7 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v7)
      v6 = 0;
    else
      v6 = *v7;
  }
  *((_DWORD *)this + 309) = (int)ausdk::AUElement::GetParameter(v6, 1u);
  v8 = *((_QWORD *)this + 9);
  if (v8)
  {
    v9 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v8 + 32))(v8, 0);
  }
  else
  {
    v10 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v10)
      v9 = 0;
    else
      v9 = *v10;
  }
  *((_DWORD *)this + 310) = ausdk::AUElement::GetParameter(v9, 2u);
  v11 = *((_QWORD *)this + 9);
  if (v11)
  {
    v12 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v11 + 32))(v11, 0);
  }
  else
  {
    v13 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v13)
      v12 = 0;
    else
      v12 = *v13;
  }
  *((_DWORD *)this + 311) = (int)ausdk::AUElement::GetParameter(v12, 3u);
  v14 = *((_QWORD *)this + 9);
  if (v14)
  {
    v15 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v14 + 32))(v14, 0);
  }
  else
  {
    v16 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v16)
      v15 = 0;
    else
      v15 = *v16;
  }
  *((_DWORD *)this + 312) = (int)ausdk::AUElement::GetParameter(v15, 4u);
  v17 = *((_QWORD *)this + 9);
  if (v17)
  {
    v18 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v17 + 32))(v17, 0);
  }
  else
  {
    v19 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v19)
      v18 = 0;
    else
      v18 = *v19;
  }
  *((float *)this + 314) = ausdk::AUElement::GetParameter(v18, 6u);
  v20 = *((_QWORD *)this + 9);
  if (v20)
  {
    v21 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v20 + 32))(v20, 0);
  }
  else
  {
    v22 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v22)
      v21 = 0;
    else
      v21 = *v22;
  }
  *((float *)this + 315) = ausdk::AUElement::GetParameter(v21, 7u);
  v23 = *((_QWORD *)this + 9);
  if (v23)
  {
    v24 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v23 + 32))(v23, 0);
  }
  else
  {
    v25 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v25)
      v24 = 0;
    else
      v24 = *v25;
  }
  *((float *)this + 316) = ausdk::AUElement::GetParameter(v24, 8u);
  v26 = *((_QWORD *)this + 9);
  if (v26)
  {
    v27 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v26 + 32))(v26, 0);
  }
  else
  {
    v28 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v28)
      v27 = 0;
    else
      v27 = *v28;
  }
  *((float *)this + 317) = ausdk::AUElement::GetParameter(v27, 9u);
  v29 = *((_QWORD *)this + 9);
  if (v29)
  {
    v30 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v29 + 32))(v29, 0);
  }
  else
  {
    v31 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v31)
      v30 = 0;
    else
      v30 = *v31;
  }
  *((float *)this + 318) = ausdk::AUElement::GetParameter(v30, 0xAu);
  v32 = *((_QWORD *)this + 9);
  if (v32)
  {
    v33 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v32 + 32))(v32, 0);
  }
  else
  {
    v34 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v34)
      v33 = 0;
    else
      v33 = *v34;
  }
  *((float *)this + 313) = ausdk::AUElement::GetParameter(v33, 5u);
  v35 = *((_QWORD *)this + 9);
  if (v35)
  {
    v36 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v35 + 32))(v35, 0);
  }
  else
  {
    v37 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v37)
      v36 = 0;
    else
      v36 = *v37;
  }
  *((float *)this + 319) = ausdk::AUElement::GetParameter(v36, 0xBu);
  v38 = *((_QWORD *)this + 9);
  if (v38)
  {
    v39 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v38 + 32))(v38, 0);
  }
  else
  {
    v40 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v40)
      v39 = 0;
    else
      v39 = *v40;
  }
  *((float *)this + 321) = ausdk::AUElement::GetParameter(v39, 0xCu);
  v41 = *((_QWORD *)this + 9);
  if (v41)
  {
    v42 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v41 + 32))(v41, 0);
  }
  else
  {
    v43 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v43)
      v42 = 0;
    else
      v42 = *v43;
  }
  *((float *)this + 322) = ausdk::AUElement::GetParameter(v42, 0xDu);
  v44 = *((_QWORD *)this + 9);
  if (v44)
  {
    v45 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v44 + 32))(v44, 0);
  }
  else
  {
    v46 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v46)
      v45 = 0;
    else
      v45 = *v46;
  }
  *((float *)this + 323) = ausdk::AUElement::GetParameter(v45, 0xEu);
  v47 = *((_QWORD *)this + 9);
  if (v47)
  {
    v48 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v47 + 32))(v47, 0);
  }
  else
  {
    v49 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v49)
      v48 = 0;
    else
      v48 = *v49;
  }
  *((_BYTE *)this + 1304) = ausdk::AUElement::GetParameter(v48, 0x11u) != 0.0;
  v50 = *((_QWORD *)this + 9);
  if (v50)
  {
    v51 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v50 + 32))(v50, 0);
  }
  else
  {
    v52 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v52)
      v51 = 0;
    else
      v51 = *v52;
  }
  *((float *)this + 334) = ausdk::AUElement::GetParameter(v51, 0x17u);
  v53 = *((_QWORD *)this + 9);
  if (v53)
  {
    v54 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v53 + 32))(v53, 0);
  }
  else
  {
    v55 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v55)
      v54 = 0;
    else
      v54 = *v55;
  }
  *((_DWORD *)this + 335) = (int)ausdk::AUElement::GetParameter(v54, 0x1Au);
  *((_BYTE *)this + 1280) = *((float *)this + 319) > *((float *)this + 321);
  AUBeamNFSelector::UpdateFrequencyBinIndices(this);
  AUBeamNFSelector::UpdateSmoothingCoefs(this);
}

void AUBeamNFSelector::DetectPosition(AUBeamNFSelector *this, const AudioBuffer *a2, const AudioBuffer *a3, const AudioBuffer *a4, const AudioBuffer *a5, const AudioBuffer *a6)
{
  int32x4_t *v11;
  float v12;
  uint64_t v13;
  ausdk::AUElement *v14;
  ausdk::AUElement **v15;
  float v16;
  uint64_t v17;
  ausdk::AUElement *v18;
  ausdk::AUElement **v19;
  const float *mData;
  float *v21;
  float v22;
  uint64_t v23;
  ausdk::AUElement *v24;
  ausdk::AUElement **v25;
  float v26;
  uint64_t v27;
  ausdk::AUElement *v28;
  ausdk::AUElement **v29;
  int32x4_t v30;
  int32x4_t v31;
  uint64_t v32;
  float *v33;
  float v34;
  uint64_t v35;
  ausdk::AUElement *v36;
  ausdk::AUElement **v37;
  float v38;
  float v39;
  float v40;
  float v41;
  uint64_t v42;
  ausdk::AUElement *v43;
  ausdk::AUElement **v44;
  int v45;
  float v46;
  uint64_t v47;
  ausdk::AUElement *v48;
  ausdk::AUElement **v49;
  float v50;
  float v51;
  int v52;
  float __B;
  int32x4_t v54;
  uint64_t v55;

  v55 = *MEMORY[0x1E0C80C00];
  __B = 1.0;
  AUBeamNFSelector::GetSmoothedPSD((uint64_t)this, (uint64_t)a2, (const float **)this + 91);
  AUBeamNFSelector::GetSmoothedPSD((uint64_t)this, (uint64_t)a3->mData, (const float **)this + 97);
  AUBeamNFSelector::GetSmoothedPSD((uint64_t)this, (uint64_t)a6->mData, (const float **)this + 103);
  AUBeamNFSelector::GetSmoothedPSD((uint64_t)this, (uint64_t)a4->mData, (const float **)this + 94);
  AUBeamNFSelector::GetSmoothedPSD((uint64_t)this, (uint64_t)a5->mData, (const float **)this + 100);
  vDSP_vdbcon(*((const float **)this + 91), 1, &__B, *((float **)this + 112), 1, *((unsigned int *)this + 178), 0);
  vDSP_vdbcon(*((const float **)this + 103), 1, &__B, *((float **)this + 118), 1, *((unsigned int *)this + 178), 0);
  vDSP_vsub(*((const float **)this + 118), 1, *((const float **)this + 112), 1, *((float **)this + 109), 1, *((unsigned int *)this + 178));
  v11 = (int32x4_t *)((char *)this + 1308);
  vDSP_meanv(*((const float **)this + 109), 1, (float *)this + 327, *((unsigned int *)this + 178));
  v12 = fmaxf(*((float *)this + 327), 0.0);
  *((float *)this + 327) = v12;
  v13 = *((_QWORD *)this + 9);
  if (v13)
  {
    v14 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v13 + 32))(v13, 0);
    v12 = *(float *)v11->i32;
  }
  else
  {
    v15 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v15)
      v14 = 0;
    else
      v14 = *v15;
  }
  ausdk::AUElement::SetParameter(v14, 0x12u, v12, 0);
  vDSP_vdbcon(*((const float **)this + 97), 1, &__B, *((float **)this + 115), 1, *((unsigned int *)this + 178), 0);
  vDSP_vsub(*((const float **)this + 118), 1, *((const float **)this + 115), 1, *((float **)this + 109), 1, *((unsigned int *)this + 178));
  vDSP_meanv(*((const float **)this + 109), 1, (float *)this + 328, *((unsigned int *)this + 178));
  v16 = fmaxf(*((float *)this + 328), 0.0);
  *((float *)this + 328) = v16;
  v17 = *((_QWORD *)this + 9);
  if (v17)
  {
    v18 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v17 + 32))(v17, 0);
    v16 = *((float *)this + 328);
  }
  else
  {
    v19 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v19)
      v18 = 0;
    else
      v18 = *v19;
  }
  ausdk::AUElement::SetParameter(v18, 0x13u, v16, 0);
  mData = (const float *)a6->mData;
  v21 = (float *)*((_QWORD *)this + 139);
  vDSP_vmul(mData, 1, *((const float **)this + 76), 1, v21, 1, *((unsigned int *)this + 137));
  vDSP_vmul(&mData[*((unsigned int *)this + 137)], 1, *((const float **)this + 76), 1, &v21[*((unsigned int *)this + 137)], 1, *((unsigned int *)this + 137));
  AUBeamNFSelector::ApplySystemNoiseFloor(this, v21, *((const float **)this + 73));
  AUBeamNFSelector::GetSmoothedPSD((uint64_t)this, *((_QWORD *)this + 139), (const float **)this + 106);
  vDSP_vdbcon(*((const float **)this + 106), 1, &__B, *((float **)this + 121), 1, *((unsigned int *)this + 178), 0);
  vDSP_vdbcon(*((const float **)this + 94), 1, &__B, *((float **)this + 124), 1, *((unsigned int *)this + 178), 0);
  vDSP_vsub(*((const float **)this + 121), 1, *((const float **)this + 124), 1, *((float **)this + 109), 1, *((unsigned int *)this + 178));
  vDSP_meanv(*((const float **)this + 109), 1, (float *)this + 329, *((unsigned int *)this + 178));
  v22 = fmaxf(*((float *)this + 329), 0.0);
  *((float *)this + 329) = v22;
  v23 = *((_QWORD *)this + 9);
  if (v23)
  {
    v24 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v23 + 32))(v23, 0);
    v22 = *((float *)this + 329);
  }
  else
  {
    v25 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v25)
      v24 = 0;
    else
      v24 = *v25;
  }
  ausdk::AUElement::SetParameter(v24, 0x18u, v22, 0);
  vDSP_vdbcon(*((const float **)this + 100), 1, &__B, *((float **)this + 127), 1, *((unsigned int *)this + 178), 0);
  vDSP_vsub(*((const float **)this + 121), 1, *((const float **)this + 127), 1, *((float **)this + 109), 1, *((unsigned int *)this + 178));
  vDSP_meanv(*((const float **)this + 109), 1, (float *)this + 330, *((unsigned int *)this + 178));
  v26 = fmaxf(*((float *)this + 330), 0.0);
  *((float *)this + 330) = v26;
  v27 = *((_QWORD *)this + 9);
  if (v27)
  {
    v28 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v27 + 32))(v27, 0);
    v26 = *((float *)this + 330);
  }
  else
  {
    v29 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v29)
      v28 = 0;
    else
      v28 = *v29;
  }
  ausdk::AUElement::SetParameter(v28, 0x19u, v26, 0);
  v30 = *v11;
  v31 = vrev64q_s32(*v11);
  v31.i64[0] = v11->i64[0];
  v54 = v31;
  v32 = 1;
  v33 = (float *)&v54;
  do
  {
    if (*(float *)v30.i32 < *(float *)&v54.i32[v32])
    {
      v30.i32[0] = v54.i32[v32];
      v33 = (float *)&v54.i32[v32];
    }
    ++v32;
  }
  while (v32 != 4);
  v34 = *v33;
  *((float *)this + 331) = *v33;
  v35 = *((_QWORD *)this + 9);
  if (v35)
  {
    v36 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v35 + 32))(v35, 0);
    v34 = *((float *)this + 331);
  }
  else
  {
    v37 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v37)
      v36 = 0;
    else
      v36 = *v37;
  }
  ausdk::AUElement::SetParameter(v36, 0x14u, v34, 0);
  if (!*((_DWORD *)this + 312))
  {
    v38 = *((float *)this + 318);
    v39 = *((float *)this + 316);
    if (v38 <= v39)
    {
      v41 = *((float *)this + 314);
    }
    else
    {
      v40 = *((float *)this + 317);
      if (v38 >= v40)
        v41 = *((float *)this + 315);
      else
        v41 = *((float *)this + 314)
            + (float)((float)((float)(*((float *)this + 314) - *((float *)this + 315)) / (float)(v39 - v40))
                    * (float)(v38 - v39));
    }
    *((float *)this + 313) = v41;
    v42 = *((_QWORD *)this + 9);
    if (v42)
    {
      v43 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v42 + 32))(v42, 0);
      v41 = *((float *)this + 313);
    }
    else
    {
      v44 = (ausdk::AUElement **)*((_QWORD *)this + 6);
      if (*((ausdk::AUElement ***)this + 7) == v44)
        v43 = 0;
      else
        v43 = *v44;
    }
    ausdk::AUElement::SetParameter(v43, 5u, v41, 0);
  }
  v45 = 0;
  v46 = *((float *)this + 179);
  *((_BYTE *)this + 1304) = 0;
  if (*((float *)this + 331) > *((float *)this + 313))
  {
    v45 = 1;
    *((_BYTE *)this + 1304) = 1;
    v46 = *((float *)this + 329) - *((float *)this + 330);
  }
  v47 = *((_QWORD *)this + 9);
  if (v47)
  {
    v48 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v47 + 32))(v47, 0);
    v45 = *((unsigned __int8 *)this + 1304);
  }
  else
  {
    v49 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v49)
      v48 = 0;
    else
      v48 = *v49;
  }
  v50 = 0.0;
  if (v45)
    v50 = 1.0;
  ausdk::AUElement::SetParameter(v48, 0x11u, v50, 0);
  *((float *)this + 179) = v46;
  v51 = (float)(v46 * (float)(1.0 - *((float *)this + 333))) + (float)(*((float *)this + 333) * *((float *)this + 180));
  *((float *)this + 180) = v51;
  if (v51 <= *((float *)this + 323))
  {
    v52 = 2;
  }
  else
  {
    if (v51 < *((float *)this + 322))
      return;
    v52 = 0;
  }
  *((_DWORD *)this + 309) = v52;
}

void AUBeamNFSelector::ApplySystemNoiseFloor(AUBeamNFSelector *this, float *a2, const float *a3)
{
  vDSP_Length v5;
  int v6;
  DSPSplitComplex __A;

  v5 = *((unsigned int *)this + 137);
  __A.realp = a2;
  __A.imagp = &a2[v5];
  vDSP_zvmags(&__A, 1, *((float **)this + 133), 1, v5);
  vDSP_zvphas(&__A, 1, *((float **)this + 136), 1, *((unsigned int *)this + 137));
  vDSP_vmax(*((const float **)this + 133), 1, a3, 1, *((float **)this + 133), 1, *((unsigned int *)this + 137));
  v6 = *((_DWORD *)this + 137);
  vvsqrtf(*((float **)this + 133), *((const float **)this + 133), &v6);
  vvcosf(__A.realp, *((const float **)this + 136), &v6);
  vDSP_vmul(__A.realp, 1, *((const float **)this + 133), 1, __A.realp, 1, *((unsigned int *)this + 137));
  vvsinf(__A.imagp, *((const float **)this + 136), &v6);
  vDSP_vmul(__A.imagp, 1, *((const float **)this + 133), 1, __A.imagp, 1, *((unsigned int *)this + 137));
}

void AUBeamNFSelector::GetSmoothedPSD(uint64_t a1, uint64_t a2, const float **a3)
{
  float *v5;
  float __D;
  float __B;
  DSPSplitComplex __A;

  v5 = (float *)(a2 + 4 * *(unsigned int *)(a1 + 1296) + 4 * *(unsigned int *)(a1 + 548));
  __A.realp = (float *)(a2 + 4 * *(unsigned int *)(a1 + 1296));
  __A.imagp = v5;
  vDSP_zvmags(&__A, 1, *(float **)(a1 + 1040), 1, *(unsigned int *)(a1 + 712));
  vDSP_vsadd(*(const float **)(a1 + 1040), 1, &AUBeamNFSelector::eps, *(float **)(a1 + 1040), 1, *(unsigned int *)(a1 + 712));
  __B = *(float *)(a1 + 1328);
  __D = 1.0 - __B;
  vDSP_vsmsma(*a3, 1, &__B, *(const float **)(a1 + 1040), 1, &__D, (float *)*a3, 1, *(unsigned int *)(a1 + 712));
}

void AUBeamNFSelector::UpdateFrequencyBinIndices(AUBeamNFSelector *this)
{
  float v2;
  uint64_t v3;
  ausdk::AUElement *v4;
  ausdk::AUElement **v5;
  float Parameter;
  float v7;
  unsigned int v8;
  float v9;
  uint64_t v10;
  ausdk::AUElement *v11;
  ausdk::AUElement **v12;
  float v13;
  float v14;
  unsigned int v15;
  unsigned int v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  int v31;

  v2 = (float)*((unsigned int *)this + 137);
  v3 = *((_QWORD *)this + 9);
  if (v3)
  {
    v4 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v3 + 32))(v3, 0);
  }
  else
  {
    v5 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v5)
      v4 = 0;
    else
      v4 = *v5;
  }
  Parameter = ausdk::AUElement::GetParameter(v4, 0xFu);
  v7 = *((double *)this + 69);
  v8 = vcvtas_u32_f32((float)(Parameter / (float)(v7 * 0.5)) * v2);
  v9 = (float)*((unsigned int *)this + 137);
  v10 = *((_QWORD *)this + 9);
  if (v10)
  {
    v11 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v10 + 32))(v10, 0);
  }
  else
  {
    v12 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v12)
      v11 = 0;
    else
      v11 = *v12;
  }
  v13 = ausdk::AUElement::GetParameter(v11, 0x10u);
  v14 = *((double *)this + 69);
  v15 = vcvtas_u32_f32((float)(v13 / (float)(v14 * 0.5)) * v9);
  if (v15 >= v8)
    v16 = v8;
  else
    v16 = v15;
  if (v16 != *((_DWORD *)this + 324) || *((_DWORD *)this + 325) != v15)
  {
    *((_DWORD *)this + 324) = v16;
    *((_DWORD *)this + 325) = v15;
    v17 = v15 - v16 + 1;
    *((_DWORD *)this + 178) = v17;
    v31 = 0;
    std::vector<float>::assign((char **)this + 91, v17, &v31);
    v18 = *((unsigned int *)this + 178);
    v31 = 0;
    std::vector<float>::assign((char **)this + 97, v18, &v31);
    v19 = *((unsigned int *)this + 178);
    v31 = 0;
    std::vector<float>::assign((char **)this + 94, v19, &v31);
    v20 = *((unsigned int *)this + 178);
    v31 = 0;
    std::vector<float>::assign((char **)this + 100, v20, &v31);
    v21 = *((unsigned int *)this + 178);
    v31 = 0;
    std::vector<float>::assign((char **)this + 103, v21, &v31);
    v22 = *((unsigned int *)this + 178);
    v31 = 0;
    std::vector<float>::assign((char **)this + 106, v22, &v31);
    v23 = *((unsigned int *)this + 178);
    v31 = 0;
    std::vector<float>::assign((char **)this + 109, v23, &v31);
    v24 = *((unsigned int *)this + 178);
    v31 = 0;
    std::vector<float>::assign((char **)this + 112, v24, &v31);
    v25 = *((unsigned int *)this + 178);
    v31 = 0;
    std::vector<float>::assign((char **)this + 115, v25, &v31);
    v26 = *((unsigned int *)this + 178);
    v31 = 0;
    std::vector<float>::assign((char **)this + 118, v26, &v31);
    v27 = *((unsigned int *)this + 178);
    v31 = 0;
    std::vector<float>::assign((char **)this + 121, v27, &v31);
    v28 = *((unsigned int *)this + 178);
    v31 = 0;
    std::vector<float>::assign((char **)this + 124, v28, &v31);
    v29 = *((unsigned int *)this + 178);
    v31 = 0;
    std::vector<float>::assign((char **)this + 127, v29, &v31);
    v30 = *((unsigned int *)this + 178);
    v31 = 0;
    std::vector<float>::assign((char **)this + 130, v30, &v31);
  }
}

void AUBeamNFSelector::UpdateSmoothingCoefs(AUBeamNFSelector *this)
{
  uint64_t v2;
  ausdk::AUElement *v3;
  ausdk::AUElement **v4;
  float Parameter;
  unint64_t v6;
  float v7;
  uint64_t v8;
  ausdk::AUElement *v9;
  ausdk::AUElement **v10;
  float v11;
  unint64_t v12;
  float v13;

  v2 = *((_QWORD *)this + 9);
  if (v2)
  {
    v3 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v2 + 32))(v2, 0);
  }
  else
  {
    v4 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v4)
      v3 = 0;
    else
      v3 = *v4;
  }
  Parameter = ausdk::AUElement::GetParameter(v3, 0x15u);
  LODWORD(v6) = *((_DWORD *)this + 137);
  v7 = *((double *)this + 69) / (double)v6;
  *((float *)this + 332) = expf(-1.0 / (float)(Parameter * v7));
  v8 = *((_QWORD *)this + 9);
  if (v8)
  {
    v9 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v8 + 32))(v8, 0);
  }
  else
  {
    v10 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v10)
      v9 = 0;
    else
      v9 = *v10;
  }
  v11 = ausdk::AUElement::GetParameter(v9, 0x16u);
  LODWORD(v12) = *((_DWORD *)this + 137);
  v13 = *((double *)this + 69) / (double)v12;
  *((float *)this + 333) = expf(-1.0 / (float)(v11 * v13));
}

os_log_t ___ZL24AUBeamNFSelectorLogScopev_block_invoke()
{
  _QWORD *v0;
  os_log_t result;

  v0 = (_QWORD *)operator new();
  v0[1] = 0;
  result = os_log_create("com.apple.coreaudio", "beamnfselector");
  *v0 = result;
  AUBeamNFSelectorLogScope(void)::scope = (uint64_t)v0;
  return result;
}

void AUBeamNFSelector::SampleRateChangedCallback(AUBeamNFSelector *this, AudioUnit inUnit, OpaqueAudioComponentInstance *a3, AudioUnitScope inScope, AudioUnitElement inElement)
{
  OSStatus v6;
  double v7;
  OSStatus Property;
  UInt32 *v9;
  void *v10;
  void *v11;
  UInt32 v12;
  UInt32 ioDataSize[4];
  uint64_t v14;
  double outData;

  if ((_DWORD)a3 != 2 && (_DWORD)a3 != 8)
    __assert_rtn("SampleRateChangedCallback", "AUBeamNFSelector.cpp", 209, "(inID == kAudioUnitProperty_SampleRate) || (inID == kAudioUnitProperty_StreamFormat)");
  outData = 0.0;
  if ((_DWORD)a3 == 8)
  {
    v12 = 40;
    Property = AudioUnitGetProperty(inUnit, 8u, inScope, inElement, ioDataSize, &v12);
    if (v12 >= 0x29)
      __assert_rtn("SampleRateChangedCallback", "AUBeamNFSelector.cpp", 255, "tempASBDSize <= sizeof(tempASBD)");
    v9 = (UInt32 *)((char *)this + 552);
    if (!Property)
      v9 = ioDataSize;
    v7 = *(double *)v9;
    goto LABEL_11;
  }
  ioDataSize[0] = 8;
  v6 = AudioUnitGetProperty(inUnit, 2u, inScope, inElement, &outData, ioDataSize);
  if (ioDataSize[0] >= 9)
    __assert_rtn("SampleRateChangedCallback", "AUBeamNFSelector.cpp", 229, "newSampleRateSize <= sizeof(newSampleRate)");
  if (v6)
  {
    v7 = *((double *)this + 69);
LABEL_11:
    outData = v7;
    goto LABEL_12;
  }
  v7 = outData;
LABEL_12:
  if (*((double *)this + 69) != v7)
  {
    *((double *)this + 69) = v7;
    SpectralProfile::GetProfile((SpectralProfile *)ioDataSize, v7, (uint64_t)this + 632, *((_DWORD *)this + 137), 0.0, 2 * *((_DWORD *)this + 137));
    v10 = (void *)*((_QWORD *)this + 73);
    if (v10)
    {
      *((_QWORD *)this + 74) = v10;
      operator delete(v10);
    }
    *(_OWORD *)((char *)this + 584) = *(_OWORD *)ioDataSize;
    *((_QWORD *)this + 75) = v14;
    SpectralProfile::GetProfile((SpectralProfile *)ioDataSize, *((double *)this + 69), (uint64_t)this + 672, *((_DWORD *)this + 137), 1.0, 2 * *((_DWORD *)this + 137));
    v11 = (void *)*((_QWORD *)this + 76);
    if (v11)
    {
      *((_QWORD *)this + 77) = v11;
      operator delete(v11);
    }
    *((_OWORD *)this + 38) = *(_OWORD *)ioDataSize;
    *((_QWORD *)this + 78) = v14;
    AUBeamNFSelector::UpdateFrequencyBinIndices(this);
    AUBeamNFSelector::UpdateSmoothingCoefs(this);
    *(_QWORD *)((char *)this + 716) = 0;
  }
}

uint64_t AUBeamNFSelector::BlockSizeChangedCallback(AUBeamNFSelector *this, AudioUnit inUnit, OpaqueAudioComponentInstance *a3, AudioUnitScope inScope, AudioUnitElement inElement)
{
  uint64_t result;
  unsigned int v7;
  void *v8;
  void *v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  const AudioStreamBasicDescription *Element;
  __int128 v18;
  uint64_t v19;
  UInt32 ioDataSize;
  unsigned int outData;

  if ((_DWORD)a3 != 14)
    __assert_rtn("BlockSizeChangedCallback", "AUBeamNFSelector.cpp", 311, "inID == kAudioUnitProperty_MaximumFramesPerSlice");
  outData = 0;
  ioDataSize = 4;
  result = AudioUnitGetProperty(inUnit, 0xEu, inScope, inElement, &outData, &ioDataSize);
  if (ioDataSize >= 5)
    __assert_rtn("BlockSizeChangedCallback", "AUBeamNFSelector.cpp", 324, "newBlockSizeSize <= sizeof(newBlockSize)");
  if (!(_DWORD)result)
  {
    v7 = outData;
    if (*((_DWORD *)this + 137) != outData)
    {
      *((_DWORD *)this + 137) = outData;
      SpectralProfile::GetProfile((SpectralProfile *)&v18, *((double *)this + 69), (uint64_t)this + 632, v7, 0.0, 2 * v7);
      v8 = (void *)*((_QWORD *)this + 73);
      if (v8)
      {
        *((_QWORD *)this + 74) = v8;
        operator delete(v8);
      }
      *(_OWORD *)((char *)this + 584) = v18;
      *((_QWORD *)this + 75) = v19;
      SpectralProfile::GetProfile((SpectralProfile *)&v18, *((double *)this + 69), (uint64_t)this + 672, *((_DWORD *)this + 137), 1.0, 2 * *((_DWORD *)this + 137));
      v9 = (void *)*((_QWORD *)this + 76);
      if (v9)
      {
        *((_QWORD *)this + 77) = v9;
        operator delete(v9);
      }
      *((_OWORD *)this + 38) = v18;
      *((_QWORD *)this + 78) = v19;
      AUBeamNFSelector::UpdateFrequencyBinIndices(this);
      AUBeamNFSelector::UpdateSmoothingCoefs(this);
      v10 = *((unsigned int *)this + 137);
      LODWORD(v18) = 0;
      std::vector<float>::assign((char **)this + 133, v10, &v18);
      v11 = *((unsigned int *)this + 137);
      LODWORD(v18) = 0;
      std::vector<float>::assign((char **)this + 136, v11, &v18);
      v12 = (2 * *((_DWORD *)this + 137));
      LODWORD(v18) = 0;
      std::vector<float>::assign((char **)this + 139, v12, &v18);
      v13 = (2 * *((_DWORD *)this + 137));
      LODWORD(v18) = 0;
      std::vector<float>::assign((char **)this + 142, v13, &v18);
      v14 = (2 * *((_DWORD *)this + 137));
      LODWORD(v18) = 0;
      std::vector<float>::assign((char **)this + 145, v14, &v18);
      v15 = (2 * *((_DWORD *)this + 137));
      LODWORD(v18) = 0;
      std::vector<float>::assign((char **)this + 148, v15, &v18);
      v16 = (2 * *((_DWORD *)this + 137));
      LODWORD(v18) = 0;
      std::vector<float>::assign((char **)this + 151, v16, &v18);
      std::vector<float>::reserve((void **)this + 91, (2 * *((_DWORD *)this + 137)));
      std::vector<float>::reserve((void **)this + 97, (2 * *((_DWORD *)this + 137)));
      std::vector<float>::reserve((void **)this + 94, (2 * *((_DWORD *)this + 137)));
      std::vector<float>::reserve((void **)this + 100, (2 * *((_DWORD *)this + 137)));
      std::vector<float>::reserve((void **)this + 103, (2 * *((_DWORD *)this + 137)));
      std::vector<float>::reserve((void **)this + 106, (2 * *((_DWORD *)this + 137)));
      std::vector<float>::reserve((void **)this + 109, (2 * *((_DWORD *)this + 137)));
      std::vector<float>::reserve((void **)this + 112, (2 * *((_DWORD *)this + 137)));
      std::vector<float>::reserve((void **)this + 115, (2 * *((_DWORD *)this + 137)));
      std::vector<float>::reserve((void **)this + 118, (2 * *((_DWORD *)this + 137)));
      std::vector<float>::reserve((void **)this + 121, (2 * *((_DWORD *)this + 137)));
      std::vector<float>::reserve((void **)this + 124, (2 * *((_DWORD *)this + 137)));
      std::vector<float>::reserve((void **)this + 127, (2 * *((_DWORD *)this + 137)));
      std::vector<float>::reserve((void **)this + 130, (2 * *((_DWORD *)this + 137)));
      *(_QWORD *)((char *)this + 716) = 0;
      Element = (const AudioStreamBasicDescription *)ausdk::AUScope::SafeGetElement((AUBeamNFSelector *)((char *)this + 80), 0);
      return (uint64_t)ausdk::AUBufferList::Allocate((AUBeamNFSelector *)((char *)this + 560), Element + 2, *((_DWORD *)this + 137));
    }
  }
  return result;
}

float AUSM::DistanceGain::calculateDistanceGain(AUSM::DistanceGain *this, float a2)
{
  float result;
  float v4;
  float v5;
  float v6;

  result = 1.0;
  if (*(_BYTE *)this)
  {
    v4 = *((float *)this + 3);
    v5 = *((float *)this + 4);
    if (v5 < a2)
      a2 = *((float *)this + 4);
    if (a2 >= v4)
      v6 = a2;
    else
      v6 = *((float *)this + 3);
    switch(*((_DWORD *)this + 2))
    {
      case 0:
        result = powf(v6, -1.0 - *((float *)this + 1));
        break;
      case 1:
        if (v4 > 0.001)
          result = powf(v6 / v4, *((float *)this + 6));
        break;
      case 2:
        if ((float)(v5 - v4) > 0.001)
          result = *((float *)this + 5)
                 / (float)((float)((float)(v6 - v4) / (float)(v5 - v4))
                         + (float)((float)(1.0 - (float)((float)(v6 - v4) / (float)(v5 - v4))) * *((float *)this + 5)));
        break;
      case 3:
        if ((float)(v5 - v4) > 0.001)
          result = (float)((float)((float)-(float)(v6 - v4) / (float)(v5 - v4)) * (float)(1.0 - *((float *)this + 5)))
                 + 1.0;
        break;
      case 4:
        if (v4 > 0.001)
          result = v4 / v6;
        break;
      default:
        return result;
    }
  }
  return result;
}

void AUVolume::~AUVolume(AUVolume *this)
{
  AUVolume::~AUVolume(this);
  JUMPOUT(0x1BCC95CECLL);
}

{
  void **v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  void **v7;

  *(_QWORD *)this = &off_1E69DFCB0;
  v2 = (void **)((char *)this + 528);
  v3 = (_QWORD *)*((_QWORD *)this + 67);
  v4 = (_QWORD *)*((_QWORD *)this + 66);
  while (v3 != v4)
  {
    v6 = *--v3;
    v5 = v6;
    *v3 = 0;
    if (v6)
      (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  }
  *((_QWORD *)this + 67) = v4;
  *(_OWORD *)((char *)this + 568) = 0u;
  *(_QWORD *)this = &off_1E69ED840;
  v7 = v2;
  std::vector<std::unique_ptr<DspLib::AlgorithmBaseNewParameters>>::__destroy_vector::operator()[abi:ne180100](&v7);
  ausdk::AUBase::~AUBase(this);
}

uint64_t AUVolume::Initialize(int64x2_t *this)
{
  BOOL v3;
  uint64_t v4;
  uint64_t v6;
  int v7;
  int v8;

  (*(void (**)(uint64_t *__return_ptr, int64x2_t *, uint64_t, _QWORD))(this->i64[0] + 392))(&v6, this, 1, 0);
  v3 = (v7 & 0x20) == 0 && v8 == 2;
  this[36].i8[8] = v3;
  v4 = ausdk::AUEffectBase::Initialize(this);
  if (!(_DWORD)v4)
    (*(void (**)(int64x2_t *, _QWORD, _QWORD))(this->i64[0] + 72))(this, 0, 0);
  return v4;
}

double AUVolume::Cleanup(AUVolume *this)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  double result;

  v2 = (_QWORD *)*((_QWORD *)this + 67);
  v3 = (_QWORD *)*((_QWORD *)this + 66);
  while (v2 != v3)
  {
    v5 = *--v2;
    v4 = v5;
    *v2 = 0;
    if (v5)
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  }
  *((_QWORD *)this + 67) = v3;
  result = 0.0;
  *(_OWORD *)((char *)this + 568) = 0u;
  return result;
}

uint64_t AUVolume::Reset(AUVolume *this, int a2)
{
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;

  v4 = (_QWORD *)*((_QWORD *)this + 66);
  v5 = (_QWORD *)*((_QWORD *)this + 67);
  while (v4 != v5)
  {
    if (*v4)
      (*(void (**)(_QWORD))(*(_QWORD *)*v4 + 16))(*v4);
    ++v4;
  }
  if (!a2)
  {
    v6 = (_QWORD *)*((_QWORD *)this + 66);
    if (*((_QWORD **)this + 67) != v6)
    {
      if (*v6)
        (*(void (**)(_QWORD))(*(_QWORD *)*v6 + 16))(*v6);
    }
  }
  return 0;
}

uint64_t AUVolume::GetPropertyInfo(AUVolume *this, int a2, int a3, unsigned int a4, unsigned int *a5, BOOL *a6)
{
  BOOL v6;
  uint64_t result;

  v6 = (a2 - 64001) <= 2 && a3 == 0;
  if (!v6 && (a3 || (a2 | 8) != 0x1D))
    return 4294956417;
  result = 0;
  *a6 = 1;
  *a5 = 4;
  return result;
}

uint64_t AUVolume::GetProperty(AUVolume *this, int a2, int a3, unsigned int a4, _DWORD *a5)
{
  uint64_t result;
  int v8;

  if (a2 == 64001 && a3 == 0)
  {
    result = 0;
    v8 = *((unsigned __int8 *)this + 596);
    goto LABEL_9;
  }
  if (a2 == 64002 && !a3)
  {
    result = 0;
    v8 = *((unsigned __int8 *)this + 597);
LABEL_9:
    *a5 = v8;
    return result;
  }
  if (a2 == 64003 && !a3)
  {
    result = 0;
    v8 = *((unsigned __int8 *)this + 598);
    goto LABEL_9;
  }
  if (!a3)
  {
    if (a2 == 29)
    {
      result = 0;
      v8 = *((unsigned __int8 *)this + 554);
      goto LABEL_9;
    }
    if (a2 == 21)
    {
      result = 0;
      v8 = *((unsigned __int8 *)this + 552);
      goto LABEL_9;
    }
  }
  return 4294956417;
}

uint64_t AUVolume::SetProperty(AUVolume *this, int a2, int a3, unsigned int a4, int *a5, unsigned int a6)
{
  uint64_t result;
  int v9;
  int v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t v13;

  if (a2 == 64001 && a3 == 0)
  {
    if (a6 >= 4)
    {
      result = 0;
      *((_BYTE *)this + 596) = *a5 != 0;
      return result;
    }
    return 4294956445;
  }
  if (a2 == 64002 && !a3)
  {
    if (a6 >= 4)
    {
      result = 0;
      *((_BYTE *)this + 597) = *a5 != 0;
      return result;
    }
    return 4294956445;
  }
  if (a2 != 64003 || a3)
    return ausdk::AUEffectBase::SetProperty(this, a2, a3, a4, a5, a6);
  if (a6 < 4)
    return 4294956445;
  result = 0;
  v9 = *((unsigned __int8 *)this + 598);
  v10 = *a5;
  *((_BYTE *)this + 598) = *a5 != 0;
  if (v9 && !v10)
  {
    if (!*((_BYTE *)this + 597))
      return 0;
    *((double *)this + 75) = (double)mach_absolute_time() * 0.0000000416666667 + 0.25;
    v11 = (uint64_t *)*((_QWORD *)this + 66);
    v12 = (uint64_t *)*((_QWORD *)this + 67);
    if (v11 == v12)
    {
      return 0;
    }
    else
    {
      do
      {
        result = 0;
        v13 = *v11++;
        *(_BYTE *)(v13 + 109) = 1;
      }
      while (v11 != v12);
    }
  }
  return result;
}

uint64_t AUVolume::SetParameter(AUVolume *this, unsigned int a2, unsigned int a3, unsigned int a4, float a5)
{
  ausdk::AUScope *Scope;
  ausdk::AUElement *Element;

  Scope = (ausdk::AUScope *)ausdk::AUBase::GetScope(this, a3);
  Element = (ausdk::AUElement *)ausdk::AUScope::SafeGetElement(Scope, a4);
  ausdk::AUElement::SetParameter(Element, a2, a5, 0);
  ++*((_DWORD *)this + 148);
  return 0;
}

uint64_t AUVolume::GetParameterInfo(AUVolume *this, int a2, int a3, AudioUnitParameterInfo *buffer)
{
  uint64_t result;
  AudioUnitParameterValue v6;
  uint64_t v7;
  int v8;
  AudioUnitParameterUnit v9;
  const __CFString *v10;

  buffer->flags = 0;
  buffer->unitName = 0;
  if (a2)
    return 4294956418;
  v6 = 0.0;
  result = 4294956418;
  if (a3 <= 1836016740)
  {
    switch(a3)
    {
      case 1601402742:
        v7 = 0x41400000C2C00000;
        v8 = -1073741824;
        v9 = kAudioUnitParameterUnit_Decibels;
        v10 = CFSTR("user gain dB");
        break;
      case 1667590508:
        v7 = 0x41400000C1400000;
        v8 = -1073741824;
        v9 = kAudioUnitParameterUnit_Decibels;
        v10 = CFSTR("ceiling dB");
        break;
      case 1668049264:
        v7 = 3233808384;
        v8 = -1073741824;
        v9 = kAudioUnitParameterUnit_Decibels;
        v10 = CFSTR("softclip level dB");
        break;
      default:
        return result;
    }
  }
  else if (a3 > 1987013747)
  {
    if (a3 == 1987013748)
    {
      v7 = 0x4270000038D1B717;
      v9 = kAudioUnitParameterUnit_Seconds;
      v10 = CFSTR("volume smooth time");
    }
    else
    {
      if (a3 != 1987013750)
        return result;
      v7 = 0x4270000038D1B717;
      v9 = kAudioUnitParameterUnit_Seconds;
      v10 = CFSTR("volume decay smooth time");
    }
    v8 = -1069547520;
    v6 = 0.05;
  }
  else if (a3 == 1836016741)
  {
    v7 = 0x3F80000000000000;
    v8 = -1073741824;
    v6 = 1.0;
    v9 = kAudioUnitParameterUnit_Boolean;
    v10 = CFSTR("look ahead");
  }
  else
  {
    if (a3 != 1885562734)
      return result;
    v7 = 0x42100000C1400000;
    v8 = -1073741824;
    v9 = kAudioUnitParameterUnit_Decibels;
    v10 = CFSTR("preclip gain dB");
  }
  buffer->cfNameString = v10;
  buffer->flags = 0x8000000;
  CFStringGetCString(v10, buffer->name, 52, 0x8000100u);
  result = 0;
  buffer->unit = v9;
  *(_QWORD *)&buffer->minValue = v7;
  buffer->defaultValue = v6;
  buffer->flags += v8;
  return result;
}

uint64_t AUVolume::RestoreState(OpaqueAudioComponentInstance **this, const void *a2)
{
  uint64_t result;

  result = ausdk::AUBase::RestoreState(this, a2);
  ++*((_DWORD *)this + 148);
  return result;
}

double AUVolume::GetLatency(uint64_t **this)
{
  float Parameter;
  double result;
  uint64_t *v4;
  uint64_t v5;
  uint64_t Element;
  unint64_t v7;

  Parameter = ausdk::AUEffectBase::GetParameter((ausdk::AUEffectBase *)this, 0x6D6F6465u);
  result = 0.0;
  if (Parameter != 0.0 && *((_BYTE *)this + 17))
  {
    v4 = this[66];
    if (this[67] != v4)
    {
      v5 = *v4;
      Element = ausdk::AUScope::SafeGetElement((ausdk::AUScope *)(this + 16), 0);
      LODWORD(v7) = *(_DWORD *)(v5 + 96);
      return (double)v7 / *(double *)(Element + 80);
    }
  }
  return result;
}

double AUVolume::GetTailTime(AUVolume *this)
{
  return 0.0;
}

uint64_t AUVolume::SupportsTail(AUVolume *this)
{
  return 1;
}

uint64_t AUVolume::SupportedNumChannels(AUVolume *this, const AUChannelInfo **a2)
{
  if (a2)
    *a2 = (const AUChannelInfo *)&AUVolume::SupportedNumChannels(AUChannelInfo const**)::sSupportedChannelConfigs;
  return 1;
}

uint64_t AUVolume::ValidFormat(AUVolume *this, const AudioStreamBasicDescription *a2, unsigned int a3, const AudioStreamBasicDescription *a4)
{
  __int128 v4;
  unsigned int v5;
  uint64_t result;
  unsigned int v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;

  v4 = *(_OWORD *)&a4->mBytesPerPacket;
  v8 = *(_OWORD *)&a4->mSampleRate;
  v9 = v4;
  v10 = *(_QWORD *)&a4->mBitsPerChannel;
  v5 = HIDWORD(v8);
  result = ausdk::ASBD::IsCommonFloat32((ausdk::ASBD *)&v8, a2);
  if ((_DWORD)result)
  {
    v7 = (v5 >> 5) & 1;
    if (HIDWORD(v9) < 3)
      v7 = 1;
    if (HIDWORD(v9))
      return v7;
    else
      return 0;
  }
  return result;
}

uint64_t AUVolume::NewKernel@<X0>(AUVolume *this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t result;
  __int128 *v5;
  __int128 v6;
  __int128 v7;
  int v8;
  int v9;

  result = operator new();
  *(_DWORD *)(result + 16) = 0;
  *(_QWORD *)result = &off_1E69DFF18;
  *(_QWORD *)(result + 8) = this;
  v5 = (__int128 *)(result + 20);
  *(_QWORD *)(result + 52) = 0x100000000;
  v6 = AUVolumeKernel::kDefaultVolumeState;
  v7 = unk_1B667C7C8;
  *(_OWORD *)(result + 20) = AUVolumeKernel::kDefaultVolumeState;
  *(_OWORD *)(result + 36) = unk_1B667C7C8;
  *(_QWORD *)(result + 96) = 32;
  *(_DWORD *)(result + 104) = -1;
  *(_BYTE *)(result + 109) = 0;
  v8 = *((unsigned __int8 *)this + 596);
  v9 = *((unsigned __int8 *)this + 597);
  if (!(v8 | v9))
  {
    v9 = 0;
    *(_QWORD *)(result + 52) = 0x100000000;
LABEL_6:
    *v5 = v6;
    *(_OWORD *)(result + 36) = v7;
    goto LABEL_7;
  }
  if (*((_BYTE *)this + 597) && !*((_BYTE *)this + 598))
  {
    *(_QWORD *)(result + 52) = 0x100000000;
    v6 = AUVolumeKernel::kDefaultVolumeAtUnityState;
    v7 = unk_1B667C7F0;
    goto LABEL_6;
  }
LABEL_7:
  *(_OWORD *)(result + 336) = 0u;
  *(_OWORD *)(result + 352) = 0u;
  *(_OWORD *)(result + 304) = 0u;
  *(_OWORD *)(result + 320) = 0u;
  *(_OWORD *)(result + 272) = 0u;
  *(_OWORD *)(result + 288) = 0u;
  *(_OWORD *)(result + 240) = 0u;
  *(_OWORD *)(result + 256) = 0u;
  *(_OWORD *)(result + 208) = 0u;
  *(_OWORD *)(result + 224) = 0u;
  *(_OWORD *)(result + 176) = 0u;
  *(_OWORD *)(result + 192) = 0u;
  *(_OWORD *)(result + 144) = 0u;
  *(_OWORD *)(result + 160) = 0u;
  *(_OWORD *)(result + 112) = 0u;
  *(_OWORD *)(result + 128) = 0u;
  if (v9 | v8)
  {
    *(_QWORD *)(result + 52) = 0x100000000;
    *v5 = AUVolumeKernel::kDefaultVolumeAtUnityState;
    *(_OWORD *)(result + 36) = unk_1B667C7F0;
  }
  *a2 = result;
  return result;
}

void AUVolumeKernel::~AUVolumeKernel(AUVolumeKernel *this)
{
  JUMPOUT(0x1BCC95CECLL);
}

double AUVolumeKernel::Reset(AUVolumeKernel *this)
{
  uint64_t v1;
  double result;

  v1 = *((_QWORD *)this + 1);
  if (!*(_WORD *)(v1 + 596))
  {
    *(_QWORD *)((char *)this + 52) = 0x100000000;
    *(_OWORD *)((char *)this + 20) = AUVolumeKernel::kDefaultVolumeState;
    *(_OWORD *)((char *)this + 36) = unk_1B667C7C8;
  }
  if (*(_BYTE *)(v1 + 597) && !*(_BYTE *)(v1 + 598))
  {
    *(_QWORD *)((char *)this + 52) = 0x100000000;
    *(_OWORD *)((char *)this + 20) = AUVolumeKernel::kDefaultVolumeAtUnityState;
    *(_OWORD *)((char *)this + 36) = unk_1B667C7F0;
  }
  result = 0.0;
  *((_OWORD *)this + 21) = 0u;
  *((_OWORD *)this + 22) = 0u;
  *((_OWORD *)this + 19) = 0u;
  *((_OWORD *)this + 20) = 0u;
  *((_OWORD *)this + 17) = 0u;
  *((_OWORD *)this + 18) = 0u;
  *((_OWORD *)this + 15) = 0u;
  *((_OWORD *)this + 16) = 0u;
  *((_OWORD *)this + 13) = 0u;
  *((_OWORD *)this + 14) = 0u;
  *((_OWORD *)this + 11) = 0u;
  *((_OWORD *)this + 12) = 0u;
  *((_OWORD *)this + 9) = 0u;
  *((_OWORD *)this + 10) = 0u;
  *((_OWORD *)this + 7) = 0u;
  *((_OWORD *)this + 8) = 0u;
  return result;
}

void AUVolumeKernel::Process(AUVolumeKernel *this, const float *a2, float *a3, unsigned int a4, BOOL *a5)
{
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  int v11;
  int v12;
  ausdk::AUEffectBase *v13;
  float Parameter;
  float v15;
  float v16;
  float v17;
  float v18;
  float v19;
  float v20;
  double v21;
  uint64_t Element;
  unint64_t v23;
  float v24;
  double v25;
  double v26;
  double v27;
  float v28;
  uint64_t v29;
  unsigned int v30;
  float v31;
  double v32;
  double v33;
  double v34;
  float v35;
  unsigned int v36;
  float32x4_t *v37;
  float32x4_t *v38;
  float32x4_t v39;
  float v40;
  float v41;
  float v42;
  float *v43;
  uint64_t v44;
  float *v45;
  float v46;
  float v47;
  float v48;
  uint64_t v49;
  float *v50;
  float v51;
  float v52;
  vDSP_Length v53;
  float v54;
  float v55;
  float v56;
  float v57;
  float v58;
  float v59;
  float v60;
  float v61;
  float v62;
  float v63;
  float v64;
  float v65;
  float v66;
  float __C;
  float32_t __B;

  v8 = *((_QWORD *)this + 1);
  if (*((_DWORD *)this + 25) != a4)
  {
    if ((a4 & 0x1F) != 0)
    {
      HIDWORD(v9) = -286331153 * a4;
      LODWORD(v9) = -286331153 * a4;
      if ((v9 >> 1) < 0x8888889)
      {
        v11 = 30;
      }
      else
      {
        HIDWORD(v10) = -1431655765 * a4;
        LODWORD(v10) = -1431655765 * a4;
        if ((v10 >> 3) > 0xAAAAAAA)
          return;
        v11 = 24;
      }
    }
    else
    {
      v11 = 32;
    }
    *((_DWORD *)this + 24) = v11;
    *((_DWORD *)this + 25) = a4;
  }
  if (*(_BYTE *)(v8 + 597))
  {
    if (*((_BYTE *)this + 109))
    {
      *((_BYTE *)this + 109) = 0;
      if ((double)mach_absolute_time() * 0.0000000416666667 >= *(double *)(v8 + 600))
      {
        *(_OWORD *)((char *)this + 20) = AUVolumeKernel::kDefaultVolumeAtUnityState;
        *(_QWORD *)((char *)this + 52) = 0x100000000;
        *(_OWORD *)((char *)this + 36) = unk_1B667C7F0;
        *((_OWORD *)this + 7) = 0u;
        *((_OWORD *)this + 8) = 0u;
        *((_OWORD *)this + 9) = 0u;
        *((_OWORD *)this + 10) = 0u;
        *((_OWORD *)this + 11) = 0u;
        *((_OWORD *)this + 12) = 0u;
        *((_OWORD *)this + 13) = 0u;
        *((_OWORD *)this + 14) = 0u;
        *((_OWORD *)this + 15) = 0u;
        *((_OWORD *)this + 16) = 0u;
        *((_OWORD *)this + 17) = 0u;
        *((_OWORD *)this + 18) = 0u;
        *((_OWORD *)this + 19) = 0u;
        *((_OWORD *)this + 20) = 0u;
        *((_OWORD *)this + 21) = 0u;
        *((_OWORD *)this + 22) = 0u;
      }
    }
  }
  v12 = *(_DWORD *)(v8 + 592);
  if (v12 != *((_DWORD *)this + 26))
  {
    v13 = (ausdk::AUEffectBase *)*((_QWORD *)this + 1);
    Parameter = ausdk::AUEffectBase::GetParameter(v13, 0x7063676Eu);
    v15 = ausdk::AUEffectBase::GetParameter(v13, 0x5F737776u);
    v16 = ausdk::AUEffectBase::GetParameter(v13, 0x6365696Cu);
    v17 = ausdk::AUEffectBase::GetParameter(v13, 0x766F6C74u);
    v18 = ausdk::AUEffectBase::GetParameter(v13, 0x636C6970u);
    v19 = ausdk::AUEffectBase::GetParameter(v13, 0x766F6C76u);
    *((_BYTE *)this + 108) = ausdk::AUEffectBase::GetParameter(v13, 0x6D6F6465u) != 0.0;
    *((float *)this + 15) = fminf(__exp10f(Parameter * 0.05), 100.0);
    *((float *)this + 16) = fminf(__exp10f(v15 * 0.05), 100.0);
    *((float *)this + 17) = fmaxf(v17, 0.0001);
    *((float *)this + 18) = fmaxf(v19, 0.0001);
    *((float *)this + 19) = fmaxf(__exp10f(v16 * 0.05), 0.001);
    v20 = __exp10f(v18 * 0.05);
    if (v20 < 0.25)
      v20 = 0.25;
    if (v20 >= 0.98)
      v20 = 1.0;
    *((float *)this + 20) = v20;
    v21 = v20;
    *((_DWORD *)this + 21) = vcvtd_n_s64_f64(v21, 0x18uLL);
    *((_DWORD *)this + 22) = vcvtd_n_s64_f64(2.0 - v21, 0x18uLL);
    *((_DWORD *)this + 23) = vcvtd_n_s64_f64(1.0 / ((v21 + -1.0) * 4.0), 0x18uLL);
    *((_DWORD *)this + 26) = v12;
  }
  if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 592))(v8) & 1) == 0)
  {
    if (*((float *)this + 17) != *((float *)this + 10))
    {
      Element = ausdk::AUScope::SafeGetElement((ausdk::AUScope *)(*((_QWORD *)this + 1) + 128), 0);
      LODWORD(v23) = *((_DWORD *)this + 24);
      v24 = *((float *)this + 17);
      v25 = *(double *)(Element + 80) / (double)v23 * v24;
      if (v25 >= 2.22507386e-308)
        v26 = -6.90775528 / v25;
      else
        v26 = -INFINITY;
      v27 = exp(v26);
      if (v26 < -708.4)
        v27 = 0.0;
      v28 = v27;
      *((float *)this + 10) = v24;
      *((float *)this + 11) = 1.0 - v28;
    }
    if (*((float *)this + 18) == *((float *)this + 12))
    {
      v30 = *((_DWORD *)this + 24);
      if (!a4)
        return;
    }
    else
    {
      v29 = ausdk::AUScope::SafeGetElement((ausdk::AUScope *)(*((_QWORD *)this + 1) + 128), 0);
      v30 = *((_DWORD *)this + 24);
      v31 = *((float *)this + 18);
      v32 = *(double *)(v29 + 80) / (double)v30 * v31;
      if (v32 >= 2.22507386e-308)
        v33 = -6.90775528 / v32;
      else
        v33 = -INFINITY;
      v34 = exp(v33);
      if (v33 < -708.4)
        v34 = 0.0;
      v35 = v34;
      *((float *)this + 12) = v31;
      *((float *)this + 13) = 1.0 - v35;
      if (!a4)
        return;
    }
    v36 = 0;
    while (1)
    {
      v37 = (float32x4_t *)&a3[v36];
      __C = 0.0;
      v38 = (float32x4_t *)&a2[v36];
      vDSP_maxmgv(v38->f32, 1, &__C, (int)v30);
      v40 = __C;
      if (*((_BYTE *)this + 108))
      {
        v41 = *((float *)this + 6);
        if (__C >= v41)
          v42 = __C;
        else
          v42 = *((float *)this + 6);
        if (v30)
        {
          v44 = v30;
          v43 = (float *)((char *)this + 112);
          v45 = &a3[v36];
          do
          {
            v46 = v38->f32[0];
            v38 = (float32x4_t *)((char *)v38 + 4);
            *v45++ = *v43;
            *v43++ = v46;
            --v44;
          }
          while (v44);
        }
        v38 = (float32x4_t *)&a3[v36];
      }
      else
      {
        v41 = __C;
        v42 = __C;
      }
      if (v42 < 0.00000001)
        v42 = 0.00000001;
      v47 = *((float *)this + 16) * *((float *)this + 15);
      v48 = *((float *)this + 9);
      if (v47 >= v48
        || (v49 = *((_QWORD *)this + 1), v50 = (float *)((char *)this + 52), !*(_BYTE *)(v49 + 596))
        && (v50 = (float *)((char *)this + 52), !*(_BYTE *)(v49 + 597)))
      {
        v50 = (float *)((char *)this + 44);
      }
      v51 = v48 + (float)(*v50 * (float)(v47 - v48));
      *((float *)this + 9) = v51;
      v52 = *((float *)this + 19);
      if ((float)(v42 * v51) > v52)
      {
        v51 = v52 / v42;
        *((float *)this + 9) = v52 / v42;
      }
      *((float *)this + 5) = v51;
      if (*((_BYTE *)this + 56))
      {
        *((float *)this + 8) = v51;
        *((_DWORD *)this + 7) = vcvts_n_s32_f32(v51, 0x18uLL);
        *((_BYTE *)this + 56) = 0;
        v39.f32[0] = v51;
      }
      else
      {
        v39.i32[0] = *((_DWORD *)this + 8);
      }
      v53 = *((unsigned int *)this + 24);
      __B = v39.f32[0];
      v54 = (float)(v51 - v39.f32[0]) / (float)v53;
      if (v51 >= v39.f32[0])
        v55 = v51;
      else
        v55 = v39.f32[0];
      v56 = v55 * v41;
      v57 = *((float *)this + 20);
      if (v56 < v57)
      {
        if (v51 == v39.f32[0])
          vDSP_vsmul(v38->f32, 1, &__B, v37->f32, 1, v53);
        else
          RampGainMono(v38, v37, v53, &__B, v54, v39);
        goto LABEL_86;
      }
      if (v57 >= 1.0)
      {
        for (; (_DWORD)v53; LODWORD(v53) = v53 - 1)
        {
          v63 = v38->f32[0];
          v38 = (float32x4_t *)((char *)v38 + 4);
          v64 = v63 * v39.f32[0];
          if ((float)(v63 * v39.f32[0]) >= -1.0)
            v65 = v64;
          else
            v65 = -1.0;
          if (v64 <= 1.0)
            v66 = v65;
          else
            v66 = 1.0;
          v37->f32[0] = v66;
          v37 = (float32x4_t *)((char *)v37 + 4);
          v39.f32[0] = v54 + v39.f32[0];
        }
        goto LABEL_86;
      }
      if ((_DWORD)v53)
        break;
LABEL_86:
      *((float *)this + 8) = v51;
      *((float *)this + 6) = v40;
      v36 += v30;
      if (v36 >= a4)
        return;
    }
    v58 = (float)*((int *)this + 23) * 0.000000059605;
    v59 = (float)*((int *)this + 22) * 0.000000059605;
    v60 = (float)*((int *)this + 21) * 0.000000059605;
    while (1)
    {
      v61 = v38->f32[0] * v39.f32[0];
      if (v61 >= 0.0)
      {
        if (v61 > v60)
        {
          v62 = 1.0;
          if (v61 < v59)
            v62 = (float)((float)((float)(v61 - v59) * (float)(v61 - v59)) * v58) + 1.0;
          goto LABEL_74;
        }
      }
      else if (v61 < (float)-v60)
      {
        v62 = -1.0;
        if (v61 >= (float)-v59)
          v62 = (float)((float)-(float)((float)((float)-v61 - v59) * (float)((float)-v61 - v59)) * v58) + -1.0;
        goto LABEL_74;
      }
      v62 = v38->f32[0] * v39.f32[0];
LABEL_74:
      v37->f32[0] = v62;
      v37 = (float32x4_t *)((char *)v37 + 4);
      v38 = (float32x4_t *)((char *)v38 + 4);
      v39.f32[0] = v54 + v39.f32[0];
      LODWORD(v53) = v53 - 1;
      if (!(_DWORD)v53)
        goto LABEL_86;
    }
  }
}

void AUMNBandEQ::~AUMNBandEQ(AUMNBandEQ *this)
{
  AUMNBandEQ::~AUMNBandEQ(this);
  JUMPOUT(0x1BCC95CECLL);
}

{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void **v6;

  *(_QWORD *)this = &off_1E69DFF48;
  AUMNBandEQ::Cleanup(this);
  v2 = (void *)*((_QWORD *)this + 83);
  if (v2)
  {
    *((_QWORD *)this + 84) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 80);
  if (v3)
  {
    *((_QWORD *)this + 81) = v3;
    operator delete(v3);
  }
  v6 = (void **)((char *)this + 600);
  std::vector<std::unique_ptr<DspLib::AlgorithmBaseNewParameters>>::__destroy_vector::operator()[abi:ne180100](&v6);
  v4 = (void *)*((_QWORD *)this + 70);
  if (v4)
  {
    *((_QWORD *)this + 71) = v4;
    operator delete(v4);
  }
  v5 = (void *)*((_QWORD *)this + 67);
  if (v5)
  {
    *((_QWORD *)this + 68) = v5;
    operator delete(v5);
  }
  ausdk::AUBase::~AUBase(this);
}

void AUMNBandEQ::CreateExtendedElements(AUMNBandEQ *this)
{
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  std::string *v6;
  __int128 v7;
  void **v8;
  CFIndex v9;
  CFStringRef v10;
  std::runtime_error *exception;
  std::string v12;
  void *__p[2];
  int64_t v14;

  ausdk::AUScope::Initialize((int64x2_t *)((char *)this + 584), this, 4, 8);
  v2 = 0;
  do
  {
    v3 = *((_QWORD *)this + 78);
    if (v3)
    {
      v4 = (*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)v3 + 32))(v3, v2);
    }
    else
    {
      v5 = *((_QWORD *)this + 75);
      if (v2 >= (*((_QWORD *)this + 76) - v5) >> 3)
        v4 = 0;
      else
        v4 = *(_QWORD *)(v5 + 8 * v2);
    }
    std::to_string(&v12, ++v2);
    v6 = std::string::insert(&v12, 0, "EQ", 2uLL);
    v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
    v14 = v6->__r_.__value_.__r.__words[2];
    *(_OWORD *)__p = v7;
    v6->__r_.__value_.__l.__size_ = 0;
    v6->__r_.__value_.__r.__words[2] = 0;
    v6->__r_.__value_.__r.__words[0] = 0;
    if (v14 >= 0)
      v8 = __p;
    else
      v8 = (void **)__p[0];
    if (v14 >= 0)
      v9 = HIBYTE(v14);
    else
      v9 = (CFIndex)__p[1];
    v10 = CFStringCreateWithBytes(0, (const UInt8 *)v8, v9, 0x8000100u, 0);
    if (!v10)
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Could not construct");
    }
    ausdk::Owned<__CFString const*>::operator=((const void **)(v4 + 72), v10);
    if (SHIBYTE(v14) < 0)
      operator delete(__p[0]);
    if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v12.__r_.__value_.__l.__data_);
  }
  while (v2 != 8);
}

void sub_1B64644E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(exception_object);
}

uint64_t AUMNBandEQ::Initialize(AUMNBandEQ *this)
{
  uint64_t Element;
  __int128 v3;
  uint64_t v4;
  __int128 v5;
  const AudioStreamBasicDescription *v6;
  _BOOL4 IsEquivalent;
  uint64_t result;
  int v9;
  IIRFilterFloat32 *v10;
  IIRFilterFloat32 *v11;
  IIRFilterFloat32 **v12;
  unint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  IIRFilterFloat32 **v21;
  char *v22;
  char *v23;
  IIRFilterFloat32 *v24;
  AudioStreamBasicDescription v25;
  AudioStreamBasicDescription v26;
  __int128 v27;
  __int128 v28;
  uint64_t v29;

  Element = ausdk::AUScope::SafeGetElement((AUMNBandEQ *)((char *)this + 80), 0);
  v3 = *(_OWORD *)(Element + 96);
  v27 = *(_OWORD *)(Element + 80);
  v28 = v3;
  v29 = *(_QWORD *)(Element + 112);
  v4 = ausdk::AUScope::SafeGetElement((AUMNBandEQ *)((char *)this + 128), 0);
  v5 = *(_OWORD *)(v4 + 96);
  *(_OWORD *)&v26.mSampleRate = *(_OWORD *)(v4 + 80);
  *(_OWORD *)&v26.mBytesPerPacket = v5;
  *(_QWORD *)&v26.mBitsPerChannel = *(_QWORD *)(v4 + 112);
  IsEquivalent = CAStreamBasicDescription::IsEquivalent((CAStreamBasicDescription *)&v27, &v26, v6);
  result = 4294956428;
  if (IsEquivalent && HIDWORD(v28) <= 8)
  {
    v9 = 0;
    while (1)
    {
      *(_QWORD *)&v25.mSampleRate = v27;
      *(_OWORD *)&v25.mFormatID = xmmword_1B6626900;
      *(_OWORD *)&v25.mBytesPerFrame = xmmword_1B6626910;
      v10 = NewIIRFilter(&v25, &v25, (const CAStreamBasicDescription *)0x10);
      if (!v10)
        break;
      v11 = v10;
      v12 = (IIRFilterFloat32 **)*((_QWORD *)this + 71);
      v13 = *((_QWORD *)this + 72);
      if ((unint64_t)v12 >= v13)
      {
        v15 = *((_QWORD *)this + 70);
        v16 = ((uint64_t)v12 - v15) >> 3;
        if ((unint64_t)(v16 + 1) >> 61)
          std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
        v17 = v13 - v15;
        v18 = v17 >> 2;
        if (v17 >> 2 <= (unint64_t)(v16 + 1))
          v18 = v16 + 1;
        if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFF8)
          v19 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v19 = v18;
        if (v19)
          v19 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<SlidingWindowDTFT<float> *>>(v19);
        else
          v20 = 0;
        v21 = (IIRFilterFloat32 **)(v19 + 8 * v16);
        *v21 = v11;
        v14 = v21 + 1;
        v22 = (char *)*((_QWORD *)this + 71);
        v23 = (char *)*((_QWORD *)this + 70);
        if (v22 != v23)
        {
          do
          {
            v24 = (IIRFilterFloat32 *)*((_QWORD *)v22 - 1);
            v22 -= 8;
            *--v21 = v24;
          }
          while (v22 != v23);
          v22 = (char *)*((_QWORD *)this + 70);
        }
        *((_QWORD *)this + 70) = v21;
        *((_QWORD *)this + 71) = v14;
        *((_QWORD *)this + 72) = v19 + 8 * v20;
        if (v22)
          operator delete(v22);
      }
      else
      {
        *v12 = v10;
        v14 = v12 + 1;
      }
      *((_QWORD *)this + 71) = v14;
      if (++v9 == 8)
      {
        (*(void (**)(AUMNBandEQ *, _QWORD, _QWORD))(*(_QWORD *)this + 72))(this, 0, 0);
        SimpleMeters::Initialize((AUMNBandEQ *)((char *)this + 640), (const CAStreamBasicDescription *)&v27, (const CAStreamBasicDescription *)&v26);
        return 0;
      }
    }
    return 4294956428;
  }
  return result;
}

_QWORD *AUMNBandEQ::Cleanup(_QWORD *this)
{
  _QWORD *v1;
  char *v2;
  char *i;
  uint64_t v4;
  int64_t v5;

  v1 = this;
  v2 = (char *)this[71];
  for (i = (char *)this[70]; v2 != i; i = (char *)v1[70])
  {
    v4 = *(_QWORD *)i;
    v5 = v2 - (i + 8);
    if (v2 != i + 8)
      this = memmove(i, i + 8, v2 - (i + 8));
    v2 = &i[v5];
    v1[71] = &i[v5];
    if (v4)
    {
      this = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
      v2 = (char *)v1[71];
    }
  }
  v1[81] = v1[80];
  v1[84] = v1[83];
  return this;
}

uint64_t AUMNBandEQ::Reset(AUMNBandEQ *this)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v4;

  v2 = (uint64_t *)*((_QWORD *)this + 70);
  v3 = (uint64_t *)*((_QWORD *)this + 71);
  while (v2 != v3)
  {
    v4 = *v2++;
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 24))(v4);
  }
  AUMNBandEQ::UpdateFilterCoefficients(this);
  *((_DWORD *)this + 133) = *((_DWORD *)this + 132);
  SimpleMeters::Reset((uint64_t)this + 640);
  return 0;
}

uint64_t AUMNBandEQ::GetPropertyInfo(AUMNBandEQ *this, int a2, unsigned int a3, unsigned int a4, unsigned int *a5, BOOL *a6)
{
  uint64_t v7;
  char v8;
  unsigned int v9;
  uint64_t result;

  if (a2 == 3007)
  {
    v8 = 1;
    v9 = 4;
LABEL_13:
    result = 0;
    *a5 = v9;
LABEL_14:
    *a6 = v8;
    return result;
  }
  if (a2 == 3099)
  {
    if (a3 > 1)
      v7 = 0;
    else
      v7 = (uint64_t)(*((_QWORD *)this + 81) - *((_QWORD *)this + 80)) >> 7;
    if ((a3 & 0xFFFFFFFD) == 0)
      v7 += (uint64_t)(*((_QWORD *)this + 84) - *((_QWORD *)this + 83)) >> 7;
    v8 = 0;
    v9 = 16 * v7;
    goto LABEL_13;
  }
  if (a2 == 21 && !a3)
  {
    result = 0;
    *a6 = 1;
    *a5 = 4;
    return result;
  }
  if (a3 != 4)
    return 4294956417;
  if (a2 != 2205)
  {
    if (a2 == 2201)
    {
      result = 0;
      *a5 = 4;
      v8 = *((_BYTE *)this + 17) ^ 1;
      goto LABEL_14;
    }
    if (a2 == 2200)
    {
      result = 0;
      *a5 = 4;
      v8 = 1;
      goto LABEL_14;
    }
    return 4294956417;
  }
  result = 0;
  *a5 = 8;
  *a6 = 0;
  return result;
}

uint64_t AUMNBandEQ::GetProperty(AUMNBandEQ *this, int a2, unsigned int a3, unsigned int a4, int *a5, int *a6)
{
  uint64_t result;
  int v12;
  uint64_t v13;
  uint64_t v14;
  UInt8 *v15;
  char *v16;
  UInt8 *v17;
  UInt8 *bytes;
  UInt8 *v19;
  void *__p[3];
  unsigned int v21;

  v21 = 0;
  if (SimpleMeters::HandleGetProperty((AUMNBandEQ *)((char *)this + 640), a2, a3, a5, &v21, a6))
    return v21;
  if (a2 == 21 && !a3)
  {
    result = 0;
    v12 = *((_DWORD *)this + 158);
LABEL_11:
    *a5 = v12;
    return result;
  }
  if (a3 != 4)
    return 4294956417;
  if (a2 != 2205)
  {
    if (a2 == 2201 || a2 == 2200)
    {
      result = 0;
      v12 = 16;
      goto LABEL_11;
    }
    return 4294956417;
  }
  if (!*((_BYTE *)this + 17))
    return 4294956429;
  v13 = *((_QWORD *)this + 71) - *((_QWORD *)this + 70);
  if (a4 >= (unint64_t)(v13 >> 3))
    return 4294956419;
  std::vector<BiquadCoefficients>::vector(__p, 2 * v13);
  AUMNBandEQ::SetCoefficients(this, (uint64_t *)__p);
  std::vector<double>::vector(&bytes, 0x50uLL);
  v14 = 0;
  v15 = bytes;
  v16 = (char *)__p[0] + 640 * a4;
  do
  {
    v17 = &v15[v14];
    *(_QWORD *)v17 = *(_QWORD *)&v16[v14];
    *((_QWORD *)v17 + 1) = *(_QWORD *)&v16[v14 + 8];
    *((_QWORD *)v17 + 2) = *(_QWORD *)&v16[v14 + 16];
    *((_QWORD *)v17 + 3) = *(_QWORD *)&v16[v14 + 24];
    *((_QWORD *)v17 + 4) = *(_QWORD *)&v16[v14 + 32];
    v14 += 40;
  }
  while (v14 != 640);
  *(_QWORD *)a5 = CFDataCreate(0, v15, v19 - v15);
  if (bytes)
  {
    v19 = bytes;
    operator delete(bytes);
  }
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  return 0;
}

void sub_1B6464A70(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, void *a13, uint64_t a14)
{
  if (__p)
    operator delete(__p);
  if (a13)
    operator delete(a13);
  _Unwind_Resume(exception_object);
}

uint64_t AUMNBandEQ::SetProperty(AUMNBandEQ *this, int a2, int a3, unsigned int a4, int *a5, void *a6, int *a7)
{
  uint64_t result;
  unsigned int v12;

  v12 = 0;
  if (SimpleMeters::HandleSetProperty((AUMNBandEQ *)((char *)this + 640), a2, a3, a5, a6, (int *)&v12, a7))
    return v12;
  result = 4294956417;
  if (a2 == 21 && !a3)
  {
    result = 0;
    *((_DWORD *)this + 158) = *a5;
  }
  return result;
}

uint64_t AUMNBandEQ::GetParameter(AUMNBandEQ *this, unsigned int a2, int a3, uint64_t a4, float *a5)
{
  uint64_t result;
  uint64_t v8;
  ausdk::AUElement *v9;
  uint64_t v10;
  float Parameter;

  if (a3 != 4)
    return 4294956418;
  if (a2 >= 0x3E8 && a2 % 0x3E8 > 0xF)
    return 4294956418;
  v8 = *((_QWORD *)this + 78);
  if (v8)
  {
    v9 = (ausdk::AUElement *)(*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)v8 + 32))(*((_QWORD *)this + 78), a4);
  }
  else
  {
    v10 = *((_QWORD *)this + 75);
    if (a4 >= (unint64_t)((*((_QWORD *)this + 76) - v10) >> 3))
      v9 = 0;
    else
      v9 = *(ausdk::AUElement **)(v10 + 8 * a4);
  }
  Parameter = ausdk::AUElement::GetParameter(v9, a2);
  result = 0;
  *a5 = Parameter;
  return result;
}

uint64_t AUMNBandEQ::SetParameter(AUMNBandEQ *this, unsigned int a2, int a3, uint64_t a4, float a5)
{
  uint64_t result;
  uint64_t v9;
  ausdk::AUElement *v10;
  uint64_t v11;

  if (a3 != 4)
    return 4294956418;
  if (a2 >= 0x3E8 && a2 % 0x3E8 > 0xF)
    return 4294956418;
  v9 = *((_QWORD *)this + 78);
  if (v9)
  {
    v10 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v9 + 32))(v9, a4);
  }
  else
  {
    v11 = *((_QWORD *)this + 75);
    if (a4 >= (unint64_t)((*((_QWORD *)this + 76) - v11) >> 3))
      v10 = 0;
    else
      v10 = *(ausdk::AUElement **)(v11 + 8 * a4);
  }
  ausdk::AUElement::SetParameter(v10, a2, a5, 0);
  result = 0;
  ++*((_DWORD *)this + 132);
  return result;
}

uint64_t AUMNBandEQ::CanScheduleParameters(AUMNBandEQ *this)
{
  return 0;
}

void AUMNBandEQ::ProcessBufferLists(AUMNBandEQ *this, unsigned int *a2, const AudioBufferList *a3, AudioBufferList *a4, uint64_t a5)
{
  int v9;
  unint64_t mNumberBuffers;
  unint64_t v11;
  char *v12;
  int v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  size_t v17;
  const void *v18;
  void *v19;
  _DWORD *v20;
  _DWORD v21[4];
  void *mData;
  uint8_t buf[4];
  const char *v24;
  _BYTE v25[12];
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  v9 = *((_DWORD *)this + 132);
  if (*((_DWORD *)this + 133) != v9)
  {
    AUMNBandEQ::UpdateFilterCoefficients(this);
    *((_DWORD *)this + 133) = v9;
  }
  if (!SimpleMeters::ProcessInputBufferList((AUMNBandEQ *)((char *)this + 640), a5, a3))
  {
    mNumberBuffers = a3->mNumberBuffers;
    if (mNumberBuffers > (uint64_t)(*((_QWORD *)this + 71) - *((_QWORD *)this + 70)) >> 3)
    {
      if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315394;
        v24 = "AUMNBandEQ.cpp";
        *(_WORD *)v25 = 1024;
        *(_DWORD *)&v25[2] = 721;
        _os_log_impl(&dword_1B5ED0000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  FATAL - mFilterList size does not match inABL size!", buf, 0x12u);
      }
      __break(1u);
    }
    else
    {
      if ((_DWORD)mNumberBuffers)
      {
        v11 = 0;
        do
        {
          v21[0] = 1;
          *(_DWORD *)buf = 1;
          v12 = (char *)a3 + 16 * v11;
          v13 = *((_DWORD *)v12 + 3);
          v21[2] = 1;
          v21[3] = v13;
          HIDWORD(v24) = 1;
          *(_DWORD *)v25 = v13;
          *(_QWORD *)&v25[4] = *((_QWORD *)v12 + 2);
          mData = a4->mBuffers[v11].mData;
          if (*((_DWORD *)this + 158) || (v20 = *(_DWORD **)(*((_QWORD *)this + 70) + 8 * v11), !v20[4]))
          {
            v14 = 0;
            v15 = 0;
            v16 = 1;
            do
            {
              v17 = *(unsigned int *)&v25[v14 * 4];
              if ((_DWORD)v17 == v21[v14 + 3])
              {
                v18 = *(const void **)&v25[v14 * 4 + 4];
                v19 = *(void **)&v21[v14 + 4];
                if (v18 != v19)
                {
                  memcpy(v19, v18, v17);
                  v16 = *(unsigned int *)buf;
                }
              }
              ++v15;
              v14 += 4;
            }
            while (v15 < v16);
          }
          else
          {
            (*(void (**)(_DWORD *, uint64_t, uint8_t *, _DWORD *))(*(_QWORD *)v20 + 32))(v20, a5, buf, v21);
          }
          ++v11;
        }
        while (v11 < a3->mNumberBuffers);
      }
      SimpleMeters::ProcessOutputBufferList((AUMNBandEQ *)((char *)this + 640), a5, a4);
    }
  }
}

uint64_t AUMNBandEQ::Render(AUMNBandEQ *this, unsigned int *a2, const AudioTimeStamp *a3, uint64_t a4)
{
  ausdk::AUScope *v8;
  uint64_t Element;
  uint64_t v10;
  ausdk::AUInputElement *v11;
  uint64_t result;
  uint64_t BufferList;
  uint64_t v14;
  unsigned int v15;

  v8 = (AUMNBandEQ *)((char *)this + 80);
  Element = ausdk::AUScope::SafeGetElement((AUMNBandEQ *)((char *)this + 80), 0);
  v10 = ausdk::AUScope::SafeGetElement((AUMNBandEQ *)((char *)this + 128), 0);
  v15 = 0;
  v11 = (ausdk::AUInputElement *)ausdk::AUScope::SafeGetElement(v8, 0);
  result = ausdk::AUInputElement::PullInput(v11, &v15, a3, 0, a4);
  if (!(_DWORD)result)
  {
    BufferList = ausdk::AUBufferList::GetBufferList((ausdk::AUBufferList *)(Element + 144));
    v14 = ausdk::AUBufferList::GetBufferList((ausdk::AUBufferList *)(v10 + 144));
    return (*(uint64_t (**)(AUMNBandEQ *, unsigned int *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)this + 176))(this, a2, BufferList, v14, a4);
  }
  return result;
}

uint64_t AUMNBandEQ::GetParameterList(AUMNBandEQ *this, unsigned int a2, unsigned int *a3, unsigned int *a4)
{
  unsigned int v4;
  unsigned int *v5;
  uint64_t result;

  if (!a2)
  {
    result = 4294956418;
LABEL_11:
    *a4 = a2;
    return result;
  }
  if (a2 == 4)
  {
    if (a3)
      *a3 = 0;
    v4 = 0;
    v5 = a3 + 5;
    do
    {
      if (a3)
      {
        *((int32x4_t *)v5 - 1) = vaddq_s32(vdupq_n_s32(v4), (int32x4_t)xmmword_1B66A24C0);
        *v5 = v4 + 5000;
      }
      ++v4;
      v5 += 5;
    }
    while (v4 != 16);
    result = 0;
    a2 = 81;
    goto LABEL_11;
  }
  return 4294956430;
}

uint64_t AUMNBandEQ::GetParameterInfo(AUMNBandEQ *this, int a2, unsigned int a3, AudioUnitParameterInfo *buffer)
{
  unsigned int v6;
  uint64_t result;
  AudioUnitParameterOptions v8;
  UInt32 v9;
  AudioUnitParameterOptions flags;
  AudioUnitParameterValue v11;
  uint64_t v12;
  AudioUnitParameterValue v13;

  if (a2 != 4)
    return 4294956418;
  buffer->flags = 0;
  buffer->unitName = 0;
  if (a3)
  {
    if (a3 >= 0x3E8)
    {
      v6 = a3 % 0x3E8;
      if (a3 % 0x3E8 > 0xF)
        return 4294956418;
      a3 = 1000 * (a3 / 0x3E8);
    }
    else
    {
      v6 = 0;
    }
    v9 = v6 + 1;
    result = 4294956418;
    if ((int)a3 <= 2999)
    {
      if (a3 == 1000)
      {
        buffer->cfNameString = CFSTR("bypass");
        buffer->flags = 0x8000000;
        CFStringGetCString(CFSTR("bypass"), buffer->name, 52, 0x8000100u);
        buffer->clumpID = v9;
        flags = buffer->flags;
        buffer->unit = kAudioUnitParameterUnit_Boolean;
        *(_QWORD *)&buffer->minValue = 0x3F80000000000000;
        v11 = 1.0;
LABEL_23:
        buffer->defaultValue = v11;
        goto LABEL_24;
      }
      if (a3 != 2000)
        return result;
      buffer->cfNameString = CFSTR("type");
      buffer->flags = 0x8000000;
      CFStringGetCString(CFSTR("type"), buffer->name, 52, 0x8000100u);
      buffer->clumpID = v9;
      flags = buffer->flags;
      buffer->unit = kAudioUnitParameterUnit_Indexed;
      v12 = 0x4130000000000000;
LABEL_21:
      *(_QWORD *)&buffer->minValue = v12;
      buffer->defaultValue = 0.0;
LABEL_24:
      v8 = flags | 0xC0100000;
      goto LABEL_25;
    }
    if (a3 != 3000)
    {
      if (a3 != 4000)
      {
        if (a3 != 5000)
          return result;
        buffer->cfNameString = CFSTR("bandwidth");
        buffer->flags = 0x8000000;
        CFStringGetCString(CFSTR("bandwidth"), buffer->name, 52, 0x8000100u);
        buffer->clumpID = v9;
        flags = buffer->flags;
        buffer->unit = kAudioUnitParameterUnit_Octaves;
        *(_QWORD *)&buffer->minValue = 0x40A000003D4CCCCDLL;
        v11 = 0.5;
        goto LABEL_23;
      }
      buffer->cfNameString = CFSTR("gain");
      buffer->flags = 0x8000000;
      CFStringGetCString(CFSTR("gain"), buffer->name, 52, 0x8000100u);
      buffer->clumpID = v9;
      flags = buffer->flags;
      buffer->unit = kAudioUnitParameterUnit_Decibels;
      v12 = 0x41C00000C2C00000;
      goto LABEL_21;
    }
    buffer->cfNameString = CFSTR("frequency");
    buffer->flags = 0x8000000;
    CFStringGetCString(CFSTR("frequency"), buffer->name, 52, 0x8000100u);
    buffer->clumpID = v9;
    buffer->flags |= 0x100000u;
    *(_QWORD *)&buffer->unit = 0x4120000000000008;
    v13 = *(double *)(ausdk::AUScope::SafeGetElement((AUMNBandEQ *)((char *)this + 128), 0) + 80) * 0.49000001;
    buffer->maxValue = v13;
    buffer->defaultValue = 1000.0;
  }
  else
  {
    buffer->cfNameString = CFSTR("global gain");
    buffer->flags = 0x8000000;
    CFStringGetCString(CFSTR("global gain"), buffer->name, 52, 0x8000100u);
    buffer->unit = kAudioUnitParameterUnit_Decibels;
    *(_QWORD *)&buffer->minValue = 0x41C00000C2C00000;
    buffer->defaultValue = 0.0;
  }
  v8 = buffer->flags | 0xC0000000;
LABEL_25:
  result = 0;
  buffer->flags = v8;
  return result;
}

UInt8 *AUMNBandEQ::SaveExtendedScopes(AUMNBandEQ *this, __CFData *a2)
{
  ausdk::AUScope *Scope;

  Scope = (ausdk::AUScope *)ausdk::AUBase::GetScope(this, 4u);
  return ausdk::AUScope::SaveState(Scope, a2);
}

uint64_t AUMNBandEQ::RestoreState(OpaqueAudioComponentInstance **this, const void *a2)
{
  uint64_t result;

  result = ausdk::AUBase::RestoreState(this, a2);
  if (!(_DWORD)result)
    ++*((_DWORD *)this + 132);
  return result;
}

uint64_t AUMNBandEQ::GetParameterValueStrings(AUMNBandEQ *this, int a2, unsigned int a3, const __CFArray **a4)
{
  uint64_t result;
  const __CFArray *v6;
  void *values[13];

  values[12] = *(void **)MEMORY[0x1E0C80C00];
  result = 4294956418;
  if (a2 == 4 && a3 >= 0x3E8 && a3 % 0x3E8 <= 0xF && 1000 * (a3 / 0x3E8) == 2000)
  {
    if (a4)
    {
      values[0] = CFSTR("Parametric");
      values[1] = CFSTR("Butterworth Low Pass");
      values[2] = CFSTR("Butterworth High Pass");
      values[3] = CFSTR("Resonant Low Pass");
      values[4] = CFSTR("Resonant High Pass");
      values[5] = CFSTR("Band Pass");
      values[6] = CFSTR("Band Stop");
      values[7] = CFSTR("Low Shelf");
      values[8] = CFSTR("High Shelf");
      values[9] = CFSTR("Resonant Low Shelf");
      values[10] = CFSTR("Resonant High Shelf");
      values[11] = CFSTR("All Pass");
      v6 = CFArrayCreate(0, (const void **)values, 12, 0);
      result = 0;
      *a4 = v6;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

double AUMNBandEQ::GetLatency(AUMNBandEQ *this)
{
  return 0.0;
}

double AUMNBandEQ::GetTailTime(AUMNBandEQ *this)
{
  return 0.05;
}

uint64_t AUMNBandEQ::SupportsTail(AUMNBandEQ *this)
{
  return 1;
}

BOOL AUMNBandEQ::StreamFormatWritable(AUMNBandEQ *this)
{
  return *((_BYTE *)this + 17) == 0;
}

unint64_t AUMNBandEQ::SupportedNumChannels(AUMNBandEQ *this, const AUChannelInfo **a2)
{
  unsigned __int8 v3;
  unint64_t v4;
  char v6;
  char **v7;
  char *v8;

  if ((v3 & 1) == 0
  {
    std::vector<AUChannelInfo>::vector();
    __cxa_atexit((void (*)(void *))std::vector<AUChannelInfo>::~vector[abi:ne180100], &AUMNBandEQ::SupportedNumChannels(AUChannelInfo const**)::sSupportedChannelConfigs, &dword_1B5ED0000);
  }
  v4 = atomic_load(&AUMNBandEQ::SupportedNumChannels(AUChannelInfo const**)::sOnceFlag);
  if (v4 != -1)
  {
    v8 = &v6;
    v7 = &v8;
    std::__call_once(&AUMNBandEQ::SupportedNumChannels(AUChannelInfo const**)::sOnceFlag, &v7, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<AUMNBandEQ::SupportedNumChannels(AUChannelInfo const**)::$_0 &&>>);
  }
  if (a2)
    *a2 = (const AUChannelInfo *)AUMNBandEQ::SupportedNumChannels(AUChannelInfo const**)::sSupportedChannelConfigs;
  return (unint64_t)(qword_1EF136D80
                          - AUMNBandEQ::SupportedNumChannels(AUChannelInfo const**)::sSupportedChannelConfigs) >> 2;
}

void sub_1B646553C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t AUMNBandEQ::ChangeStreamFormat(AUMNBandEQ *this, uint64_t a2, uint64_t a3, const AudioStreamBasicDescription *a4, const AudioStreamBasicDescription *a5)
{
  double mSampleRate;

  ausdk::AUBase::ChangeStreamFormat(this, a2, a3, a4, a5);
  mSampleRate = a4->mSampleRate;
  if (a4->mSampleRate != a5->mSampleRate)
  {
    ++*((_DWORD *)this + 132);
    (*(void (**)(AUMNBandEQ *, uint64_t, _QWORD, _QWORD, double))(*(_QWORD *)this + 432))(this, 3, 0, 0, mSampleRate);
  }
  return 0;
}

uint64_t AUMNBandEQ::GetScopeExtended(AUMNBandEQ *this, int a2)
{
  if (a2 == 4)
    return (uint64_t)this + 584;
  else
    return 0;
}

double std::vector<AUChannelInfo>::vector()
{
  _OWORD *v0;
  double result;

  AUMNBandEQ::SupportedNumChannels(AUChannelInfo const**)::sSupportedChannelConfigs = 0;
  qword_1EF136D80 = 0;
  qword_1EF136D88 = 0;
  v0 = operator new(0x20uLL);
  qword_1EF136D80 = (uint64_t)(v0 + 2);
  qword_1EF136D88 = (uint64_t)(v0 + 2);
  result = 0.0;
  *v0 = 0u;
  v0[1] = 0u;
  AUMNBandEQ::SupportedNumChannels(AUChannelInfo const**)::sSupportedChannelConfigs = (uint64_t)v0;
  return result;
}

uint64_t std::vector<AUChannelInfo>::~vector[abi:ne180100](uint64_t a1)
{
  void *v2;

  v2 = *(void **)a1;
  if (v2)
  {
    *(_QWORD *)(a1 + 8) = v2;
    operator delete(v2);
  }
  return a1;
}

double std::__call_once_proxy[abi:ne180100]<std::tuple<AUMNBandEQ::SupportedNumChannels(AUChannelInfo const**)::$_0 &&>>()
{
  uint64_t v0;
  double result;

  v0 = AUMNBandEQ::SupportedNumChannels(AUChannelInfo const**)::sSupportedChannelConfigs;
  *(_QWORD *)&result = 0x6000600050005;
  *(_OWORD *)AUMNBandEQ::SupportedNumChannels(AUChannelInfo const**)::sSupportedChannelConfigs = xmmword_1B66A24F0;
  *(_OWORD *)(v0 + 16) = xmmword_1B66A24E0;
  return result;
}

void AUMNBandEQ::UpdateFilterCoefficients(AUMNBandEQ *this)
{
  uint64_t v2;
  unsigned int v3;
  unint64_t v4;
  unsigned int v5;

  AUMNBandEQ::SetCoefficients(this, (uint64_t *)this + 67);
  v2 = *((_QWORD *)this + 70);
  if (*((_QWORD *)this + 71) != v2)
  {
    v3 = 0;
    v4 = 0;
    v5 = 1;
    do
    {
      (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v2 + 8 * v4) + 16))(*(_QWORD *)(v2 + 8 * v4), 16, *((_QWORD *)this + 67) + 40 * v3);
      v4 = v5;
      v2 = *((_QWORD *)this + 70);
      ++v5;
      v3 += 16;
    }
    while (v4 < (*((_QWORD *)this + 71) - v2) >> 3);
  }
}

void AUMNBandEQ::SetCoefficients(_QWORD *a1, uint64_t *a2)
{
  unsigned int v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  ausdk::AUElement *v8;
  uint64_t v9;
  uint64_t v10;
  float Parameter;
  uint64_t v12;
  char v13;
  double v14;
  double v15;
  unsigned int v16;
  uint64_t v17;
  ausdk::AUElement *v18;
  uint64_t v19;
  float v20;
  uint64_t v21;
  ausdk::AUElement *v22;
  uint64_t v23;
  float v24;
  uint64_t v25;
  ausdk::AUElement *v26;
  uint64_t v27;
  float v28;
  uint64_t v29;
  ausdk::AUElement *v30;
  uint64_t v31;
  float v32;
  uint64_t v33;
  ausdk::AUElement *v34;
  uint64_t v35;
  BOOL v36;
  double v37;
  _QWORD *v39;
  float v40;
  BiquadCoefficients *v41;
  double v42;
  double v43;
  double v44;
  int v45;
  _QWORD *v46;
  uint64_t v47;
  BiquadCoefficients *v48;
  double v49;
  double v50;
  int v51;
  uint64_t v52;
  double v53;
  float64x2_t *v54;
  uint64_t v55;
  double v56;
  float64x2_t *v57;
  ausdk::AUScope *v58;

  if (a1[71] != a1[70])
  {
    v4 = 0;
    v5 = 0;
    v6 = 0;
    v58 = (ausdk::AUScope *)(a1 + 16);
    do
    {
      v7 = a1[78];
      if (v7)
      {
        v8 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)v7 + 32))(v7, v6);
      }
      else
      {
        v9 = a1[75];
        if (v5 >= (a1[76] - v9) >> 3)
          v8 = 0;
        else
          v8 = *(ausdk::AUElement **)(v9 + 8 * v5);
      }
      v10 = 40 * v4;
      Parameter = ausdk::AUElement::GetParameter(v8, 0);
      v12 = 0;
      v13 = 0;
      v14 = *(double *)(ausdk::AUScope::SafeGetElement(v58, 0) + 80);
      v15 = Parameter * 0.05;
      v16 = 5000;
      do
      {
        v17 = a1[78];
        if (v17)
        {
          v18 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)v17 + 32))(v17, v6);
        }
        else
        {
          v19 = a1[75];
          if (v5 >= (a1[76] - v19) >> 3)
            v18 = 0;
          else
            v18 = *(ausdk::AUElement **)(v19 + 8 * v5);
        }
        v20 = ausdk::AUElement::GetParameter(v18, v16 - 3000);
        v21 = a1[78];
        if (v21)
        {
          v22 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)v21 + 32))(v21, v6);
        }
        else
        {
          v23 = a1[75];
          if (v5 >= (a1[76] - v23) >> 3)
            v22 = 0;
          else
            v22 = *(ausdk::AUElement **)(v23 + 8 * v5);
        }
        v24 = ausdk::AUElement::GetParameter(v22, v16 - 2000);
        v25 = a1[78];
        if (v25)
        {
          v26 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)v25 + 32))(v25, v6);
        }
        else
        {
          v27 = a1[75];
          if (v5 >= (a1[76] - v27) >> 3)
            v26 = 0;
          else
            v26 = *(ausdk::AUElement **)(v27 + 8 * v5);
        }
        v28 = ausdk::AUElement::GetParameter(v26, v16 - 1000);
        v29 = a1[78];
        if (v29)
        {
          v30 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)v29 + 32))(v29, v6);
        }
        else
        {
          v31 = a1[75];
          if (v5 >= (a1[76] - v31) >> 3)
            v30 = 0;
          else
            v30 = *(ausdk::AUElement **)(v31 + 8 * v5);
        }
        v32 = ausdk::AUElement::GetParameter(v30, v16);
        v33 = a1[78];
        if (v33)
        {
          v34 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)v33 + 32))(v33, v6);
        }
        else
        {
          v35 = a1[75];
          if (v5 >= (a1[76] - v35) >> 3)
            v34 = 0;
          else
            v34 = *(ausdk::AUElement **)(v35 + 8 * v5);
        }
        v36 = ausdk::AUElement::GetParameter(v34, v16 - 4000) == 0.0;
        v37 = v24;
        if (!v36 || v14 * 0.49 < v37)
        {
          v39 = (_QWORD *)(*a2 + v10 + v12);
          *v39 = 0;
          v39[1] = 0;
          v39[3] = 0;
          v39[4] = 0;
          v39[2] = 0x3FF0000000000000;
        }
        else
        {
          v40 = v37 * 6.28318531 / v14;
          switch(v20)
          {
            case 0u:
              v41 = (BiquadCoefficients *)(*a2 + v10 + v12);
              v42 = v40;
              v43 = v32;
              v44 = v28;
              v45 = 11;
              goto LABEL_65;
            case 1u:
              v47 = *a2;
              v48 = (BiquadCoefficients *)(*a2 + v10 + v12);
              if (v40 <= 0.0)
                goto LABEL_59;
              v49 = fmin(v40, 3.11017673);
              v50 = 0.0;
              v51 = 1;
              goto LABEL_57;
            case 2u:
              v47 = *a2;
              v48 = (BiquadCoefficients *)(*a2 + v10 + v12);
              if (v40 <= 0.0)
                goto LABEL_59;
              v49 = fmin(v40, 3.11017673);
              v50 = 0.0;
              v51 = 2;
              goto LABEL_57;
            case 3u:
              v41 = (BiquadCoefficients *)(*a2 + v10 + v12);
              v42 = v40;
              v43 = v32;
              v44 = 0.0;
              v45 = 1;
              goto LABEL_65;
            case 4u:
              v41 = (BiquadCoefficients *)(*a2 + v10 + v12);
              v42 = v40;
              v43 = v32;
              v44 = 0.0;
              v45 = 2;
              goto LABEL_65;
            case 5u:
              v41 = (BiquadCoefficients *)(*a2 + v10 + v12);
              v42 = v40;
              v43 = v32;
              v44 = 0.0;
              v45 = 3;
              goto LABEL_65;
            case 6u:
              v41 = (BiquadCoefficients *)(*a2 + v10 + v12);
              v42 = v40;
              v43 = v32;
              v44 = 0.0;
              v45 = 4;
              goto LABEL_65;
            case 7u:
              v47 = *a2;
              v48 = (BiquadCoefficients *)(*a2 + v10 + v12);
              if (v40 <= 0.0)
                goto LABEL_59;
              v50 = v28;
              v49 = fmin(v40, 3.11017673);
              v51 = 7;
              goto LABEL_57;
            case 8u:
              v47 = *a2;
              v48 = (BiquadCoefficients *)(*a2 + v10 + v12);
              if (v40 <= 0.0)
              {
LABEL_59:
                v46 = (_QWORD *)(v47 + v10 + v12);
                *(_QWORD *)v48 = 0;
                *((_QWORD *)v48 + 1) = 0;
LABEL_60:
                v46[3] = 0;
                v46[4] = 0;
                v46[2] = 0x3FF0000000000000;
                if ((v13 & 1) == 0)
                {
LABEL_66:
                  v52 = *a2;
                  v53 = __exp10(v15);
                  v54 = (float64x2_t *)(v52 + v10 + v12);
                  v54[1] = vmulq_n_f64(v54[1], v53);
                  v54[2].f64[0] = v54[2].f64[0] * v53;
                }
              }
              else
              {
                v50 = v28;
                v49 = fmin(v40, 3.11017673);
                v51 = 8;
LABEL_57:
                BiquadCoefficients::SetPriv(v48, v51, v49, 0.707106781, v50);
                if ((v13 & 1) == 0)
                  goto LABEL_66;
              }
LABEL_67:
              v13 = 1;
              break;
            case 9u:
              v41 = (BiquadCoefficients *)(*a2 + v10 + v12);
              v42 = v40;
              v43 = v32;
              v44 = v28;
              v45 = 7;
              goto LABEL_65;
            case 0xAu:
              v41 = (BiquadCoefficients *)(*a2 + v10 + v12);
              v42 = v40;
              v43 = v32;
              v44 = v28;
              v45 = 8;
              goto LABEL_65;
            case 0xBu:
              v41 = (BiquadCoefficients *)(*a2 + v10 + v12);
              v42 = v40;
              v43 = v32;
              v44 = 0.0;
              v45 = 5;
LABEL_65:
              BiquadCoefficients::SetBW(v41, v45, v42, v43, v44);
              if ((v13 & 1) == 0)
                goto LABEL_66;
              goto LABEL_67;
            default:
              v46 = (_QWORD *)(*a2 + v10 + v12);
              *v46 = 0;
              v46[1] = 0;
              goto LABEL_60;
          }
        }
        v12 += 40;
        ++v16;
      }
      while (v12 != 640);
      if ((v13 & 1) == 0)
      {
        v55 = *a2;
        v56 = __exp10(v15);
        v57 = (float64x2_t *)(v55 + 40 * (16 * v6));
        v57[1] = vmulq_n_f64(v57[1], v56);
        v57[2].f64[0] = v57[2].f64[0] * v56;
      }
      v5 = (v6 + 1);
      v4 += 16;
      v6 = v5;
    }
    while (v5 < (uint64_t)(a1[71] - a1[70]) >> 3);
  }
}

_QWORD *std::vector<BiquadCoefficients>::vector(_QWORD *a1, unint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    if (a2 >= 0x666666666666667)
      std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
    v4 = std::__allocate_at_least[abi:ne180100]<std::allocator<BiquadCoefficients>>(a2);
    *a1 = v4;
    a1[1] = v4;
    a1[2] = &v4[5 * v5];
    v6 = &v4[5 * a2];
    do
    {
      *v4 = 0;
      v4[1] = 0;
      v4[3] = 0;
      v4[4] = 0;
      v4[2] = 0x3FF0000000000000;
      v4 += 5;
    }
    while (v4 != v6);
    a1[1] = v6;
  }
  return a1;
}

void sub_1B6465D08(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void AUSM::loadAUPreset(_QWORD *a1, const char *a2)
{
  const char *v2;
  CFPropertyListRef v4;
  uint64_t v5;
  NSObject *v6;
  NSObject *v7;
  CFDataRef data;
  _BYTE buf[12];
  __int16 v10;
  const char *v11;
  uint64_t v12;

  v2 = a2;
  v12 = *MEMORY[0x1E0C80C00];
  *a1 = 0;
  applesauce::CF::make_DataRef(a2, &data);
  v4 = CFPropertyListCreateWithData(0, data, 0, 0, 0);
  applesauce::CF::DictionaryRef::DictionaryRef((applesauce::CF::DictionaryRef *)buf, v4);
  v5 = *(_QWORD *)buf;
  *a1 = *(_QWORD *)buf;
  if (v5)
  {
    if (getAUSMV2Log(void)::onceToken != -1)
      dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_5474);
    v6 = getAUSMV2Log(void)::gLog;
    if (os_log_type_enabled((os_log_t)getAUSMV2Log(void)::gLog, OS_LOG_TYPE_DEFAULT))
    {
      if (v2[23] < 0)
        v2 = *(const char **)v2;
      *(_DWORD *)buf = 136315394;
      *(_QWORD *)&buf[4] = "loadAUPreset";
      v10 = 2080;
      v11 = v2;
      _os_log_impl(&dword_1B5ED0000, v6, OS_LOG_TYPE_DEFAULT, "%s: loaded preset %s", buf, 0x16u);
    }
  }
  else
  {
    if (getAUSMV2Log(void)::onceToken != -1)
      dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_5474);
    v7 = getAUSMV2Log(void)::gLog;
    if (os_log_type_enabled((os_log_t)getAUSMV2Log(void)::gLog, OS_LOG_TYPE_ERROR))
    {
      if (v2[23] < 0)
        v2 = *(const char **)v2;
      *(_DWORD *)buf = 136315394;
      *(_QWORD *)&buf[4] = "loadAUPreset";
      v10 = 2080;
      v11 = v2;
      _os_log_error_impl(&dword_1B5ED0000, v7, OS_LOG_TYPE_ERROR, "%s: could not load preset %s", buf, 0x16u);
    }
  }
  if (data)
    CFRelease(data);
}

void sub_1B6465F7C(_Unwind_Exception *exception_object, int a2)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

void sub_1B6465F94(void *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, __int128 buf)
{
  uint64_t **v11;
  const void **v12;
  NSObject *v13;

  if (a2 == 1)
  {
    __cxa_begin_catch(a1);
    if (getAUSMV2Log(void)::onceToken != -1)
      dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_5474);
    v13 = getAUSMV2Log(void)::gLog;
    if (os_log_type_enabled((os_log_t)getAUSMV2Log(void)::gLog, OS_LOG_TYPE_ERROR))
    {
      if (*((char *)v11 + 23) < 0)
        v11 = (uint64_t **)*v11;
      LODWORD(buf) = 136315394;
      *(_QWORD *)((char *)&buf + 4) = "loadAUPreset";
      WORD6(buf) = 2080;
      *(_QWORD *)((char *)&buf + 14) = v11;
      _os_log_error_impl(&dword_1B5ED0000, v13, OS_LOG_TYPE_ERROR, "%s: could not load preset %s", (uint8_t *)&buf, 0x16u);
    }
    __cxa_end_catch();
    JUMPOUT(0x1B6465EC4);
  }
  applesauce::CF::DictionaryRef::~DictionaryRef(v12);
  JUMPOUT(0x1B6465F84);
}

void AUSM::FactoryPreset::load(AUSM::FactoryPreset *this, int *a2, unsigned int a3, int a4)
{
  int v7;
  char *v8;
  uint64_t AcousticID;
  uint64_t v10;
  std::string *v11;
  __int128 v12;
  uint64_t v13;
  const char *v14;
  NSObject *v15;
  uint32_t v16;
  std::string *v17;
  __int128 v18;
  std::string *v19;
  std::string::size_type v20;
  std::string *v21;
  std::string::size_type v22;
  std::string::size_type v23;
  CFMutableStringRef v24;
  applesauce::CF::StringRef *v25;
  int ProductType;
  CFStringRef v27;
  std::string *v28;
  NSObject *v29;
  std::string *v30;
  __int128 v31;
  std::string *v32;
  size_t size;
  std::string *v34;
  std::string *v35;
  int v36;
  size_t v37;
  std::string *v38;
  std::string *v39;
  std::string *v40;
  std::string::size_type v41;
  std::string *v42;
  __int128 v43;
  std::string *v44;
  __int128 v45;
  std::string *v46;
  uint64_t v47;
  uint64_t v48;
  const void *v49;
  std::string *v50;
  std::runtime_error *exception;
  std::string v52;
  std::string v53;
  std::string v54;
  std::string v55;
  std::string v56;
  std::string v57;
  CFTypeRef cf;
  CFTypeRef v59;
  std::string v60;
  stat __p;
  std::string v62;
  uint64_t v63;

  v63 = *MEMORY[0x1E0C80C00];
  memset(&v54, 0, sizeof(v54));
  if (a3 - 1 >= 2)
  {
    if (a3)
    {
      if (getAUSMV2Log(void)::onceToken != -1)
        dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_5474);
      v13 = getAUSMV2Log(void)::gLog;
      if (!os_log_type_enabled((os_log_t)getAUSMV2Log(void)::gLog, OS_LOG_TYPE_ERROR))
        goto LABEL_103;
      __p.st_dev = 136315394;
      *(_QWORD *)&__p.st_mode = "load";
      WORD2(__p.st_ino) = 1024;
      *(_DWORD *)((char *)&__p.st_ino + 6) = a3;
      v14 = "%s: factory preset #%d not defined";
      v15 = v13;
      v16 = 18;
      goto LABEL_119;
    }
    AcousticID = GetAcousticID();
    v10 = AcousticID & 0xFF00000000;
    if ((AcousticID & 0xFF00000000) != 0)
    {
      std::to_string(&v60, AcousticID);
      v11 = std::string::insert(&v60, 0, "AID", 3uLL);
      v12 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
      *(_QWORD *)&__p.st_uid = *((_QWORD *)&v11->__r_.__value_.__l + 2);
      *(_OWORD *)&__p.st_dev = v12;
      v11->__r_.__value_.__l.__size_ = 0;
      v11->__r_.__value_.__r.__words[2] = 0;
      v11->__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(v60.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v60.__r_.__value_.__l.__data_);
    }
    else
    {
      v11 = (std::string *)std::string::basic_string[abi:ne180100]<0>(&__p, "");
    }
    v24 = PlatformUtilities::CopyHardwareModelShortName((PlatformUtilities *)v11);
    v25 = applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&v59, v24);
    ProductType = PlatformUtilities_iOS::GetProductType(v25);
    v27 = PlatformUtilities_iOS::CopyProductTypeFilePrefix(ProductType);
    applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&cf, v27);
    if (v59 && cf)
    {
      if (v10)
      {
        std::operator+<char>();
        v28 = std::string::append(&v57, "/AU", 3uLL);
        v60 = *v28;
        v28->__r_.__value_.__l.__size_ = 0;
        v28->__r_.__value_.__r.__words[2] = 0;
        v28->__r_.__value_.__r.__words[0] = 0;
        if (SHIBYTE(v57.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v57.__r_.__value_.__l.__data_);
        std::string::basic_string[abi:ne180100]<0>(&v57, "");
        std::string::basic_string[abi:ne180100]<0>(&v62, "");
      }
      else
      {
        applesauce::CF::convert_to<std::string,0>((const __CFString *)v59, (uint64_t)&v62);
        v30 = std::string::insert(&v62, 0, "/System/Library/Audio/Tunings/", 0x1EuLL);
        v31 = *(_OWORD *)&v30->__r_.__value_.__l.__data_;
        v57.__r_.__value_.__r.__words[2] = v30->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v57.__r_.__value_.__l.__data_ = v31;
        v30->__r_.__value_.__l.__size_ = 0;
        v30->__r_.__value_.__r.__words[2] = 0;
        v30->__r_.__value_.__r.__words[0] = 0;
        v32 = std::string::append(&v57, "/AU", 3uLL);
        v60 = *v32;
        v32->__r_.__value_.__l.__size_ = 0;
        v32->__r_.__value_.__r.__words[2] = 0;
        v32->__r_.__value_.__r.__words[0] = 0;
        if (SHIBYTE(v57.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v57.__r_.__value_.__l.__data_);
        if (SHIBYTE(v62.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v62.__r_.__value_.__l.__data_);
        if (!cf)
        {
          exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(exception, "Could not construct");
        }
        applesauce::CF::convert_to<std::string,0>((const __CFString *)cf, (uint64_t)&v57);
        if ((v57.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          size = HIBYTE(v57.__r_.__value_.__r.__words[2]);
        else
          size = v57.__r_.__value_.__l.__size_;
        v34 = &v62;
        std::string::basic_string[abi:ne180100]((uint64_t)&v62, size + 1);
        if ((v62.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          v34 = (std::string *)v62.__r_.__value_.__r.__words[0];
        if (size)
        {
          if ((v57.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v35 = &v57;
          else
            v35 = (std::string *)v57.__r_.__value_.__r.__words[0];
          memmove(v34, v35, size);
        }
        *(_WORD *)((char *)&v34->__r_.__value_.__l.__data_ + size) = 45;
      }
      v36 = SHIBYTE(v60.__r_.__value_.__r.__words[2]);
      if ((v60.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v37 = HIBYTE(v60.__r_.__value_.__r.__words[2]);
      else
        v37 = v60.__r_.__value_.__l.__size_;
      v38 = &v55;
      std::string::basic_string[abi:ne180100]((uint64_t)&v55, v37 + 1);
      if ((v55.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v38 = (std::string *)v55.__r_.__value_.__r.__words[0];
      if (v37)
      {
        if (v36 >= 0)
          v39 = &v60;
        else
          v39 = (std::string *)v60.__r_.__value_.__r.__words[0];
        memmove(v38, v39, v37);
      }
      *(_WORD *)((char *)&v38->__r_.__value_.__l.__data_ + v37) = 47;
      if ((v62.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v40 = &v62;
      else
        v40 = (std::string *)v62.__r_.__value_.__r.__words[0];
      if ((v62.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v41 = HIBYTE(v62.__r_.__value_.__r.__words[2]);
      else
        v41 = v62.__r_.__value_.__l.__size_;
      v42 = std::string::append(&v55, (const std::string::value_type *)v40, v41);
      v43 = *(_OWORD *)&v42->__r_.__value_.__l.__data_;
      v56.__r_.__value_.__r.__words[2] = v42->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v56.__r_.__value_.__l.__data_ = v43;
      v42->__r_.__value_.__l.__size_ = 0;
      v42->__r_.__value_.__r.__words[2] = 0;
      v42->__r_.__value_.__r.__words[0] = 0;
      v44 = std::string::append(&v56, "aumx-3dem-appl.aupreset", 0x17uLL);
      v45 = *(_OWORD *)&v44->__r_.__value_.__l.__data_;
      v53.__r_.__value_.__r.__words[2] = v44->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v53.__r_.__value_.__l.__data_ = v45;
      v44->__r_.__value_.__l.__size_ = 0;
      v44->__r_.__value_.__r.__words[2] = 0;
      v44->__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(v56.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v56.__r_.__value_.__l.__data_);
      if (SHIBYTE(v55.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v55.__r_.__value_.__l.__data_);
      if (SHIBYTE(v62.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v62.__r_.__value_.__l.__data_);
      if (SHIBYTE(v57.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v57.__r_.__value_.__l.__data_);
      if (v36 < 0)
        operator delete(v60.__r_.__value_.__l.__data_);
    }
    else
    {
      if (getAUSMV2Log(void)::onceToken != -1)
        dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_5474);
      v29 = getAUSMV2Log(void)::gLog;
      if (os_log_type_enabled((os_log_t)getAUSMV2Log(void)::gLog, OS_LOG_TYPE_ERROR))
      {
        LOWORD(v60.__r_.__value_.__l.__data_) = 0;
        _os_log_error_impl(&dword_1B5ED0000, v29, OS_LOG_TYPE_ERROR, "Could not load built-in speaker preset file: invalid model/product name!", (uint8_t *)&v60, 2u);
      }
      std::string::basic_string[abi:ne180100]<0>(&v53, "");
    }
    if (cf)
      CFRelease(cf);
    if (v59)
      CFRelease(v59);
    if (SHIBYTE(__p.st_gid) < 0)
      operator delete(*(void **)&__p.st_dev);
    v7 = 0;
    v54 = v53;
    v23 = HIBYTE(v53.__r_.__value_.__r.__words[2]);
    v22 = v53.__r_.__value_.__r.__words[0];
  }
  else
  {
    if (a4)
      v7 = 2;
    else
      v7 = 1;
    if (a4)
      v8 = "personalized-multichannel.aupreset";
    else
      v8 = "multichannel.aupreset";
    std::string::basic_string[abi:ne180100]<0>(&__p, v8);
    if (a3 == 2 || a3 == 1)
      std::operator+<char>();
    else
      memset(&v60, 0, sizeof(v60));
    if (SHIBYTE(__p.st_gid) < 0)
      operator delete(*(void **)&__p.st_dev);
    std::string::basic_string[abi:ne180100]<0>(&v57, "/System/Library/Audio/Tunings/Generic/AU");
    v17 = std::string::append(&v57, "/", 1uLL);
    v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
    *(_QWORD *)&__p.st_uid = *((_QWORD *)&v17->__r_.__value_.__l + 2);
    *(_OWORD *)&__p.st_dev = v18;
    v17->__r_.__value_.__l.__size_ = 0;
    v17->__r_.__value_.__r.__words[2] = 0;
    v17->__r_.__value_.__r.__words[0] = 0;
    if ((v60.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v19 = &v60;
    else
      v19 = (std::string *)v60.__r_.__value_.__r.__words[0];
    if ((v60.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v20 = HIBYTE(v60.__r_.__value_.__r.__words[2]);
    else
      v20 = v60.__r_.__value_.__l.__size_;
    v21 = std::string::append((std::string *)&__p, (const std::string::value_type *)v19, v20);
    v22 = v21->__r_.__value_.__r.__words[0];
    v62.__r_.__value_.__r.__words[0] = v21->__r_.__value_.__l.__size_;
    *(std::string::size_type *)((char *)v62.__r_.__value_.__r.__words + 7) = *(std::string::size_type *)((char *)&v21->__r_.__value_.__r.__words[1] + 7);
    LOBYTE(v23) = *((_BYTE *)&v21->__r_.__value_.__s + 23);
    v21->__r_.__value_.__l.__size_ = 0;
    v21->__r_.__value_.__r.__words[2] = 0;
    v21->__r_.__value_.__r.__words[0] = 0;
    *(std::string::size_type *)((char *)&v54.__r_.__value_.__r.__words[1] + 7) = *(std::string::size_type *)((char *)v62.__r_.__value_.__r.__words + 7);
    v54.__r_.__value_.__r.__words[0] = v22;
    v54.__r_.__value_.__l.__size_ = v62.__r_.__value_.__r.__words[0];
    *((_BYTE *)&v54.__r_.__value_.__s + 23) = v23;
    if (SHIBYTE(__p.st_gid) < 0)
      operator delete(*(void **)&__p.st_dev);
    if (SHIBYTE(v57.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v57.__r_.__value_.__l.__data_);
    if (SHIBYTE(v60.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v60.__r_.__value_.__l.__data_);
  }
  if ((v23 & 0x80u) == 0)
    v46 = &v54;
  else
    v46 = (std::string *)v22;
  if (stat((const char *)v46, &__p))
  {
    if (getAUSMV2Log(void)::onceToken != -1)
      dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_5474);
    v47 = getAUSMV2Log(void)::gLog;
    if (!os_log_type_enabled((os_log_t)getAUSMV2Log(void)::gLog, OS_LOG_TYPE_ERROR))
      goto LABEL_103;
    v50 = &v54;
    if ((v54.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v50 = (std::string *)v54.__r_.__value_.__r.__words[0];
    __p.st_dev = 136315650;
    *(_QWORD *)&__p.st_mode = "load";
    WORD2(__p.st_ino) = 2080;
    *(__darwin_ino64_t *)((char *)&__p.st_ino + 6) = (__darwin_ino64_t)v50;
    HIWORD(__p.st_gid) = 1024;
    __p.st_rdev = a3;
    v14 = "%s: %s for factory preset #%d not found";
    v15 = v47;
    v16 = 28;
LABEL_119:
    _os_log_error_impl(&dword_1B5ED0000, v15, OS_LOG_TYPE_ERROR, v14, (uint8_t *)&__p, v16);
LABEL_103:
    *(_QWORD *)this = 0;
    *((_QWORD *)this + 1) = 0;
LABEL_104:
    *((_QWORD *)this + 2) = 0;
    goto LABEL_105;
  }
  if (SHIBYTE(v54.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v52, v54.__r_.__value_.__l.__data_, v54.__r_.__value_.__l.__size_);
  else
    v52 = v54;
  AUSM::loadAUPreset(&__p, (const char *)&v52);
  if (SHIBYTE(v52.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v52.__r_.__value_.__l.__data_);
  *a2 = v7;
  *(_OWORD *)this = AUSM::kFactoryPresets[a3];
  v48 = *(_QWORD *)&__p.st_dev;
  if (!*(_QWORD *)&__p.st_dev)
    goto LABEL_104;
  CFRetain(*(CFTypeRef *)&__p.st_dev);
  v49 = *(const void **)&__p.st_dev;
  *((_QWORD *)this + 2) = v48;
  if (v49)
    CFRelease(v49);
LABEL_105:
  if (SHIBYTE(v54.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v54.__r_.__value_.__l.__data_);
}

void sub_1B6466830(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37,uint64_t a38,void *a39,uint64_t a40,int a41,__int16 a42,char a43,char a44,uint64_t a45,const void *a46,const void *a47,void *__p,uint64_t a49,int a50,__int16 a51,char a52,char a53,uint64_t a54,void *a55,uint64_t a56,int a57,__int16 a58,char a59,char a60)
{
  void *v60;

  __cxa_free_exception(v60);
  if (a53 < 0)
    operator delete(__p);
  applesauce::CF::StringRef::~StringRef(&a46);
  applesauce::CF::StringRef::~StringRef(&a47);
  if (a60 < 0)
    operator delete(a55);
  if (a25 < 0)
    operator delete(a20);
  _Unwind_Resume(a1);
}

uint64_t IR::DynamicIRProcessor::initialize(IR::DynamicIRProcessor *this, float a2, uint64_t a3)
{
  _BOOL4 v6;
  IR::IRProcessor *v7;
  uint64_t v8;
  uint64_t v9;
  IR::DynamicIRProcessor *v10;
  uint64_t v11;
  uint64_t v12;
  float v13;
  IR::DynamicIRProcessor *v14;
  IR::DynamicIRProcessor *v15;
  BOOL v16;
  uint64_t v17;
  char *v19;
  char v20;

  v19 = (char *)this + 264;
  v20 = 1;
  caulk::pooled_semaphore_mutex::_lock((IR::DynamicIRProcessor *)((char *)this + 264));
  atomic_store(0, (unsigned int *)this + 59);
  atomic_store(0, (unsigned int *)this + 60);
  atomic_store(0, (unsigned int *)this + 61);
  if (!*((_QWORD *)this + 3))
    goto LABEL_8;
  if (*((_BYTE *)this + 176))
    v6 = *((_BYTE *)this + 41) == 0;
  else
    v6 = 0;
  v7 = (IR::IRProcessor *)operator new();
  IR::IRProcessor::IRProcessor(v7, (IR::DynamicIRProcessor *)((char *)this + 24), v6);
  v8 = *(_QWORD *)this;
  *(_QWORD *)this = v7;
  if (v8)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
    v7 = *(IR::IRProcessor **)this;
  }
  if (!(*(unsigned int (**)(IR::IRProcessor *, uint64_t, uint64_t, _QWORD, _QWORD, _QWORD, BOOL, float))(*(_QWORD *)v7 + 16))(v7, a3, 128, *((unsigned __int8 *)this + 177), *((unsigned __int8 *)this + 178), 0, *((_QWORD *)this + 31) != 0, a2))
  {
    v10 = (IR::DynamicIRProcessor *)*((_QWORD *)this + 23);
    if (v10 != (IR::DynamicIRProcessor *)((char *)this + 192))
    {
      do
      {
        v11 = *(_QWORD *)this;
        v12 = *((unsigned int *)v10 + 7);
        v13 = COERCE_FLOAT(atomic_load((unsigned int *)v10 + 8));
        (*(void (**)(uint64_t, uint64_t, float))(*(_QWORD *)v11 + 144))(v11, v12, v13);
        v14 = (IR::DynamicIRProcessor *)*((_QWORD *)v10 + 1);
        if (v14)
        {
          do
          {
            v15 = v14;
            v14 = *(IR::DynamicIRProcessor **)v14;
          }
          while (v14);
        }
        else
        {
          do
          {
            v15 = (IR::DynamicIRProcessor *)*((_QWORD *)v10 + 2);
            v16 = *(_QWORD *)v15 == (_QWORD)v10;
            v10 = v15;
          }
          while (!v16);
        }
        v10 = v15;
      }
      while (v15 != (IR::DynamicIRProcessor *)((char *)this + 192));
    }
    atomic_store((*(uint64_t (**)(_QWORD))(**(_QWORD **)this + 120))(*(_QWORD *)this), (unsigned int *)this + 59);
    atomic_store((*(uint64_t (**)(_QWORD))(**(_QWORD **)this + 56))(*(_QWORD *)this), (unsigned int *)this + 60);
    atomic_store((*(uint64_t (**)(_QWORD))(**(_QWORD **)this + 128))(*(_QWORD *)this), (unsigned int *)this + 61);
  }
  else
  {
LABEL_8:
    v9 = *(_QWORD *)this;
    *(_QWORD *)this = 0;
    if (v9)
      (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
    *((_QWORD *)this + 6) = 0;
    *((_QWORD *)this + 7) = 0;
  }
  v17 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v17)
    (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
  atomic_store(0, (unsigned __int8 *)this + 232);
  *((float *)this + 53) = a2;
  *((_DWORD *)this + 54) = a3;
  *((_DWORD *)this + 55) = 128;
  *(_WORD *)((char *)this + 233) = 257;
  return std::unique_lock<caulk::pooled_semaphore_mutex>::~unique_lock[abi:ne180100]((uint64_t)&v19);
}

void sub_1B6466C00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;

  MEMORY[0x1BCC95CEC](v9, 0x10E1C40AE0E3EF2);
  std::unique_lock<caulk::pooled_semaphore_mutex>::~unique_lock[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void IR::DynamicIRProcessor::processInternal(int8x16_t *this, const float *a2, const float **a3, uint64_t a4, uint64_t a5, float a6, float **a7, int a8, IR::ComplexDataCircBuffer *a9)
{
  IR::ComplexDataCircBuffer *v10;
  float **v12;
  uint64_t v15;
  const float **v16;
  float *const *v18;
  unsigned __int8 v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  unsigned __int8 v23;
  int v24;
  uint64_t v25;
  const float *v26;
  float *v27;
  float *v28;
  uint64_t v29;
  float *v30;
  uint64_t v31;
  const float **v32;
  const float **v33;
  uint64_t v34;
  vDSP_Length v35;
  uint64_t v36;
  unsigned int v37;
  const float **v38;
  float **v39;
  float **v40;
  uint64_t v41;
  unsigned int v42;
  float **v43;
  uint64_t v44;
  const float *v45;
  float *v46;
  float *v47;
  int v48;
  uint64_t v49;
  float *v50;
  IR::ComplexDataCircBuffer *v51;
  IR::ComplexDataCircBuffer *v52;
  unsigned int v53;
  unsigned int v54;
  _BOOL4 __N;
  float __Start;
  float __Step;
  __int8 *v58;
  char v59;

  if ((_DWORD)a5 && this[14].i8[9])
  {
    v10 = a9;
    v12 = a7;
    v15 = a4;
    v16 = a3;
    if (a8)
      v18 = a7;
    else
      v18 = (float *const *)a3;
    if (this[11].i8[1])
    {
      v19 = atomic_load(&this[14].u8[8]);
      if ((v19 & 1) != 0)
      {
        v58 = &this[16].i8[8];
        v20 = caulk::pooled_semaphore_mutex::try_lock((caulk::pooled_semaphore_mutex *)&this[16].u64[1]);
        v59 = v20;
        if (v20)
        {
          v51 = v10;
          v53 = v15;
          if (!this[14].i8[10])
          {
            if (this->i64[0])
            {
              __Step = -1.0 / (float)a5;
              __Start = 1.0;
              vDSP_vrampmul(a2, 1, &__Start, &__Step, *v12, 1, a5);
              IR::DynamicIRProcessor::updateCoordinatesAndRunCurrentProcessor((IR::DynamicIRProcessor *)this, *v12, v18, v15, a5, a6, 0, v10);
              if ((_DWORD)v15 && a8)
              {
                v31 = v15;
                v32 = (const float **)v12;
                v33 = v16;
                do
                {
                  vDSP_vadd(*v32, 1, *v33, 1, (float *)*v33, 1, a5);
                  ++v33;
                  ++v32;
                  --v31;
                }
                while (v31);
              }
            }
            else if ((_DWORD)v15 && (a8 & 1) == 0)
            {
              v43 = (float **)v16;
              v15 = v15;
              do
              {
                vDSP_vclr(*v43++, 1, a5);
                --v15;
              }
              while (v15);
            }
          }
          atomic_store(0, &this[14].u8[8]);
          *this = vextq_s8(*this, *this, 8uLL);
          std::unique_lock<caulk::pooled_semaphore_mutex>::unlock((uint64_t)&v58);
          if (this->i64[0])
          {
            if (this[14].i8[10])
            {
              IR::DynamicIRProcessor::updateCoordinatesAndRunCurrentProcessor((IR::DynamicIRProcessor *)this, a2, v18, v53, a5, a6, 1, v51);
              if (v53 && a8)
              {
                v21 = v53;
                do
                {
                  vDSP_vadd(*v12, 1, *v16, 1, (float *)*v16, 1, a5);
                  ++v16;
                  ++v12;
                  --v21;
                }
                while (v21);
              }
            }
            else
            {
              __Step = 1.0 / (float)a5;
              __Start = 0.0;
              v35 = a5;
              vDSP_vrampmul(a2, 1, &__Start, &__Step, *v12, 1, a5);
              IR::DynamicIRProcessor::updateCoordinatesAndRunCurrentProcessor((IR::DynamicIRProcessor *)this, *v12, v12, v53, a5, a6, 1, v51);
              if (v53)
              {
                v36 = v53;
                do
                {
                  vDSP_vadd(*v12, 1, *v16, 1, (float *)*v16, 1, v35);
                  ++v16;
                  ++v12;
                  --v36;
                }
                while (v36);
              }
            }
          }
          else
          {
            if (!v53 || (a8 & 1) != 0)
              goto LABEL_53;
            v34 = v53;
            do
            {
              vDSP_vclr((float *)*v16++, 1, a5);
              --v34;
            }
            while (v34);
          }
          if (this->i64[0])
          {
            atomic_store((*(uint64_t (**)(uint64_t))(*(_QWORD *)this->i64[0] + 120))(this->i64[0]), &this[14].u32[3]);
            atomic_store((*(uint64_t (**)(uint64_t))(*(_QWORD *)this->i64[0] + 56))(this->i64[0]), (unsigned int *)&this[15]);
            v37 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)this->i64[0] + 128))(this->i64[0]);
LABEL_54:
            atomic_store(v37, &this[15].u32[1]);
            std::unique_lock<caulk::pooled_semaphore_mutex>::~unique_lock[abi:ne180100]((uint64_t)&v58);
LABEL_91:
            this[14].i8[10] = 0;
            return;
          }
LABEL_53:
          v37 = 0;
          atomic_store(0, &this[14].u32[3]);
          atomic_store(0, (unsigned int *)&this[15]);
          goto LABEL_54;
        }
        std::unique_lock<caulk::pooled_semaphore_mutex>::~unique_lock[abi:ne180100]((uint64_t)&v58);
      }
      if (this->i64[0])
      {
        IR::DynamicIRProcessor::updateCoordinatesAndRunCurrentProcessor((IR::DynamicIRProcessor *)this, a2, v18, v15, a5, a6, 0, v10);
        if ((_DWORD)v15 && a8)
        {
          v25 = v15;
          do
          {
            v27 = *v18++;
            v26 = v27;
            v28 = (float *)*v16++;
            vDSP_vadd(v26, 1, v28, 1, v28, 1, a5);
            --v25;
          }
          while (v25);
        }
      }
      else if ((_DWORD)v15 && (a8 & 1) == 0)
      {
        v29 = v15;
        do
        {
          v30 = (float *)*v16++;
          vDSP_vclr(v30, 1, a5);
          --v29;
        }
        while (v29);
      }
      goto LABEL_91;
    }
    v22 = this->i64[0];
    __N = this->i64[0] != 0;
    if (this->i64[0])
      IR::DynamicIRProcessor::updateCoordinatesAndRunCurrentProcessor((IR::DynamicIRProcessor *)this, a2, v18, a4, a5, a6, 0, a9);
    v23 = atomic_load(&this[14].u8[8]);
    if ((v23 & 1) == 0)
    {
LABEL_79:
      if (__N && a8)
      {
        if ((_DWORD)v15)
        {
          v44 = v15;
          do
          {
            v46 = *v18++;
            v45 = v46;
            v47 = (float *)*v16++;
            vDSP_vadd(v45, 1, v47, 1, v47, 1, a5);
            --v44;
          }
          while (v44);
        }
      }
      else
      {
        if ((_DWORD)v15)
          v48 = a8;
        else
          v48 = 1;
        if (((v48 | __N) & 1) == 0)
        {
          v49 = v15;
          do
          {
            v50 = (float *)*v16++;
            vDSP_vclr(v50, 1, a5);
            --v49;
          }
          while (v49);
        }
      }
      goto LABEL_91;
    }
    v58 = &this[16].i8[8];
    v59 = caulk::pooled_semaphore_mutex::try_lock((caulk::pooled_semaphore_mutex *)&this[16].u64[1]);
    if ((v59 & 1) == 0)
    {
      std::unique_lock<caulk::pooled_semaphore_mutex>::~unique_lock[abi:ne180100]((uint64_t)&v58);
      goto LABEL_79;
    }
    atomic_store(0, &this[14].u8[8]);
    *this = vextq_s8(*this, *this, 8uLL);
    std::unique_lock<caulk::pooled_semaphore_mutex>::unlock((uint64_t)&v58);
    if (this[14].i8[10])
    {
      if (!this->i64[0])
      {
        __N = 0;
        v24 = 0;
        goto LABEL_77;
      }
      __N = 1;
      IR::DynamicIRProcessor::updateCoordinatesAndRunCurrentProcessor((IR::DynamicIRProcessor *)this, a2, v18, v15, a5, a6, 1, v10);
      v24 = 0;
    }
    else
    {
      if (v22)
      {
        v52 = v10;
        __Step = -1.0 / (float)a5;
        v54 = v15;
        if ((_DWORD)v15)
        {
          v38 = (const float **)v12;
          v39 = (float **)v16;
          v15 = v15;
          do
          {
            __Start = 1.0;
            if (a8)
              vDSP_vrampmuladd(*v38, 1, &__Start, &__Step, *v39, 1, a5);
            else
              vDSP_vrampmul(*v39, 1, &__Start, &__Step, *v39, 1, a5);
            ++v39;
            ++v38;
            --v15;
          }
          while (v15);
        }
        v15 = v54;
        v10 = v52;
      }
      if (!this->i64[0])
      {
        v24 = 1;
        goto LABEL_77;
      }
      IR::DynamicIRProcessor::updateCoordinatesAndRunCurrentProcessor((IR::DynamicIRProcessor *)this, a2, v12, v15, a5, a6, 1, v10);
      __Step = 1.0 / (float)a5;
      if ((_DWORD)v15)
      {
        v40 = (float **)v16;
        v41 = v15;
        do
        {
          __Start = 0.0;
          vDSP_vrampmuladd(*v12++, 1, &__Start, &__Step, *v40++, 1, a5);
          --v41;
        }
        while (v41);
      }
      v24 = 1;
    }
    if (this->i64[0])
    {
      atomic_store((*(uint64_t (**)(uint64_t))(*(_QWORD *)this->i64[0] + 120))(this->i64[0]), &this[14].u32[3]);
      atomic_store((*(uint64_t (**)(uint64_t))(*(_QWORD *)this->i64[0] + 56))(this->i64[0]), (unsigned int *)&this[15]);
      v42 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)this->i64[0] + 128))(this->i64[0]);
      goto LABEL_78;
    }
LABEL_77:
    v42 = 0;
    atomic_store(0, &this[14].u32[3]);
    atomic_store(0, (unsigned int *)&this[15]);
LABEL_78:
    atomic_store(v42, &this[15].u32[1]);
    std::unique_lock<caulk::pooled_semaphore_mutex>::~unique_lock[abi:ne180100]((uint64_t)&v58);
    if (v24)
      goto LABEL_91;
    goto LABEL_79;
  }
}

void sub_1B6467338(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  std::unique_lock<caulk::pooled_semaphore_mutex>::~unique_lock[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t IR::DynamicIRProcessor::updateCoordinatesAndRunCurrentProcessor(IR::DynamicIRProcessor *this, const float *a2, float *const *a3, uint64_t a4, uint64_t a5, float a6, char a7, IR::ComplexDataCircBuffer *a8)
{
  IR::ComplexDataCircBuffer *v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __n128 v20;
  IR::IRCoordinates *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  unsigned int v25;
  uint64_t v26;
  unsigned int v27;
  unsigned __int8 v28;
  unsigned int *v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  float v33;
  unsigned int *v34;
  unsigned int *v35;
  BOOL v36;
  _DWORD *v37;
  uint64_t v39;
  unsigned int v40;
  unsigned int v41;
  IR::ComplexDataCircBuffer *v42;
  uint64_t v43;

  v8 = a8;
  v10 = a5;
  v11 = a4;
  v43 = *MEMORY[0x1E0C80C00];
  v15 = *((_QWORD *)this + 31);
  if (v15 && *(_BYTE *)(v15 + 40))
  {
    if ((a7 & 1) != 0 || *(_BYTE *)(v15 + 41))
    {
      v40 = a4;
      v41 = a5;
      v42 = a8;
      v39 = (uint64_t)&v39;
      v16 = *(_DWORD *)(v15 + 24);
      v18 = *(unsigned int *)(v15 + 32);
      v17 = *(unsigned int *)(v15 + 36);
      v19 = 36 * v17;
      v20.n128_f64[0] = MEMORY[0x1E0C80A78](this);
      if ((_DWORD)v17)
      {
        v21 = (IR::IRCoordinates *)((char *)&v39 - ((v19 + 15) & 0x7FFFFFFFF0));
        do
        {
          v21 = (IR::IRCoordinates *)(IR::IRCoordinates::IRCoordinates(v21) + 36);
          v19 -= 36;
        }
        while (v19);
      }
      if (v16 > v18)
      {
        v22 = v16 - v18;
        v23 = 4 * v18;
        v24 = (char *)&v39 - ((36 * v17 + 15) & 0x7FFFFFFFF0);
        do
        {
          IR::IRCoordinates::set();
          IR::IRCoordinates::set();
          v24 += 36;
          v23 += 4;
          --v22;
        }
        while (v22);
      }
      v25 = *((_DWORD *)this + 56);
      v26 = *((_QWORD *)this + 31);
      v27 = *(_DWORD *)(v26 + 28);
      if (v25 < v27)
        v27 = 0;
      (*(void (**)(_QWORD, char *, uint64_t, uint64_t, __n128))(**(_QWORD **)this + 216))(*(_QWORD *)this, (char *)&v39 - ((36 * v17 + 15) & 0x7FFFFFFFF0), *(_QWORD *)(v26 + 16) + 4 * (v25 - v27) * v16 + 4 * v18, v17, v20);
      v8 = v42;
      v11 = v40;
      v10 = v41;
      goto LABEL_23;
    }
    goto LABEL_15;
  }
  if ((a7 & 1) == 0)
  {
LABEL_15:
    v28 = atomic_load((unsigned __int8 *)this + 208);
    if ((v28 & 1) == 0)
      goto LABEL_23;
  }
  atomic_store(0, (unsigned __int8 *)this + 208);
  v29 = (unsigned int *)*((_QWORD *)this + 23);
  v30 = (char *)this + 192;
  if (v29 != (unsigned int *)((char *)this + 192))
  {
    do
    {
      v31 = *(_QWORD *)this;
      v32 = v29[7];
      v33 = COERCE_FLOAT(atomic_load(v29 + 8));
      (*(void (**)(uint64_t, uint64_t, float))(*(_QWORD *)v31 + 144))(v31, v32, v33);
      v34 = (unsigned int *)*((_QWORD *)v29 + 1);
      if (v34)
      {
        do
        {
          v35 = v34;
          v34 = *(unsigned int **)v34;
        }
        while (v34);
      }
      else
      {
        do
        {
          v35 = (unsigned int *)*((_QWORD *)v29 + 2);
          v36 = *(_QWORD *)v35 == (_QWORD)v29;
          v29 = v35;
        }
        while (!v36);
      }
      v29 = v35;
    }
    while (v35 != (unsigned int *)v30);
  }
LABEL_23:
  v37 = *(_DWORD **)this;
  v37[100] = *((_DWORD *)this + 4);
  return (*(uint64_t (**)(_DWORD *, const float *, float *const *, uint64_t, uint64_t, IR::ComplexDataCircBuffer *, float))(*(_QWORD *)v37 + 40))(v37, a2, a3, v11, v10, v8, a6);
}

uint64_t IR::DynamicIRProcessor::reset(IR::DynamicIRProcessor *this)
{
  char *v3;
  char v4;

  v3 = (char *)this + 264;
  v4 = 1;
  caulk::pooled_semaphore_mutex::_lock((IR::DynamicIRProcessor *)((char *)this + 264));
  if (*(_QWORD *)this)
    (*(void (**)(_QWORD))(**(_QWORD **)this + 32))(*(_QWORD *)this);
  *((_BYTE *)this + 234) = 1;
  return std::unique_lock<caulk::pooled_semaphore_mutex>::~unique_lock[abi:ne180100]((uint64_t)&v3);
}

void sub_1B646762C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::unique_lock<caulk::pooled_semaphore_mutex>::~unique_lock[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t IR::DynamicIRProcessor::setIRDataAttributes(IR::DynamicIRProcessor *this, const IR::IRDataAttributes *a2)
{
  uint64_t v4;
  _BOOL4 v5;
  uint64_t v6;
  IR::IRProcessor *v7;
  __n128 v8;
  uint64_t v9;
  uint64_t v10;
  char *v12;
  char v13;

  v12 = (char *)this + 264;
  v13 = 1;
  caulk::pooled_semaphore_mutex::_lock((IR::DynamicIRProcessor *)((char *)this + 264));
  v4 = *((_QWORD *)this + 3);
  if (*(_QWORD *)a2)
  {
    if (!v4 || (IR::IRDataAttributes::operator==((uint64_t)a2, (uint64_t)this + 24) & 1) == 0)
    {
      IR::IRDataAttributes::operator=((uint64_t)this + 24, (uint64_t)a2);
      if (*((_BYTE *)this + 233))
      {
        if (*((_BYTE *)this + 176))
          v5 = *((_BYTE *)this + 41) == 0;
        else
          v5 = 0;
        v7 = (IR::IRProcessor *)operator new();
        IR::IRProcessor::IRProcessor(v7, (IR::DynamicIRProcessor *)((char *)this + 24), v5);
        v9 = *((_QWORD *)this + 1);
        *((_QWORD *)this + 1) = v7;
        if (v9)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
          v7 = (IR::IRProcessor *)*((_QWORD *)this + 1);
        }
        v8.n128_u32[0] = *((_DWORD *)this + 53);
        if ((*(unsigned int (**)(IR::IRProcessor *, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, BOOL, __n128))(*(_QWORD *)v7 + 16))(v7, *((unsigned int *)this + 54), *((unsigned int *)this + 55), *((unsigned __int8 *)this + 177), *((unsigned __int8 *)this + 178), 0, *((_QWORD *)this + 31) != 0, v8))
        {
          v10 = *((_QWORD *)this + 1);
          *((_QWORD *)this + 1) = 0;
          if (v10)
            (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
          *((_QWORD *)this + 6) = 0;
          *((_QWORD *)this + 7) = 0;
        }
        atomic_store(1u, (unsigned __int8 *)this + 232);
      }
    }
  }
  else
  {
    if (v4 && *((_BYTE *)this + 233))
    {
      v6 = *((_QWORD *)this + 1);
      *((_QWORD *)this + 1) = 0;
      if (v6)
        (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
      atomic_store(1u, (unsigned __int8 *)this + 232);
    }
    IR::IRDataAttributes::operator=((uint64_t)this + 24, (uint64_t)a2);
    *((_QWORD *)this + 6) = 0;
    *((_QWORD *)this + 7) = 0;
  }
  return std::unique_lock<caulk::pooled_semaphore_mutex>::~unique_lock[abi:ne180100]((uint64_t)&v12);
}

void sub_1B64677C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::unique_lock<caulk::pooled_semaphore_mutex>::~unique_lock[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

BOOL matchiString(CFStringRef *a1, const UInt8 *a2)
{
  CFIndex v3;
  CFIndex v4;
  CFStringRef v5;
  const __CFString *v6;
  CFComparisonResult v7;
  std::runtime_error *exception;
  CFRange v10;

  v3 = *((_QWORD *)a2 + 1);
  if (*((char *)a2 + 23) >= 0)
  {
    v4 = a2[23];
  }
  else
  {
    a2 = *(const UInt8 **)a2;
    v4 = v3;
  }
  v5 = CFStringCreateWithBytes(0, a2, v4, 0x8000100u, 0);
  if (!v5)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
  }
  v6 = v5;
  v10.length = CFStringGetLength(*a1);
  v10.location = 0;
  v7 = CFStringCompareWithOptions(*a1, v6, v10, 1uLL);
  CFRelease(v6);
  return v7 == kCFCompareEqualTo;
}

void sub_1B64678BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  void *v10;

  __cxa_free_exception(v10);
  _Unwind_Resume(a1);
}

uint64_t matchiEither(CFTypeRef *a1, uint64_t a2, uint64_t a3)
{
  const __CFString *v6;
  _BOOL4 v7;
  const __CFString *v8;
  _BOOL4 v9;
  std::string __p;
  CFStringRef v12;
  std::string v13;
  CFStringRef v14;

  v6 = (const __CFString *)*a1;
  if (*a1)
    CFRetain(*a1);
  v14 = v6;
  if (*(char *)(a2 + 23) < 0)
    std::string::__init_copy_ctor_external(&v13, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  else
    v13 = *(std::string *)a2;
  v7 = matchiString(&v14, (const UInt8 *)&v13);
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v13.__r_.__value_.__l.__data_);
    if (!v6)
      goto LABEL_11;
    goto LABEL_10;
  }
  if (v6)
LABEL_10:
    CFRelease(v6);
LABEL_11:
  v8 = (const __CFString *)*a1;
  if (v8)
    CFRetain(v8);
  v12 = v8;
  if (*(char *)(a3 + 23) < 0)
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a3, *(_QWORD *)(a3 + 8));
  else
    __p = *(std::string *)a3;
  v9 = matchiString(&v12, (const UInt8 *)&__p);
  if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if (!v8)
      return v7 | v9;
    goto LABEL_20;
  }
  operator delete(__p.__r_.__value_.__l.__data_);
  if (v8)
LABEL_20:
    CFRelease(v8);
  return v7 | v9;
}

void sub_1B6467A00(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, const void *a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  applesauce::CF::StringRef::~StringRef(&a15);
  _Unwind_Resume(a1);
}

void AUMatrixPatcher::~AUMatrixPatcher(AUMatrixPatcher *this)
{
  *(_QWORD *)this = &off_1E69E01C8;
  CACFDictionary::~CACFDictionary((AUMatrixPatcher *)((char *)this + 568));
  CACFArray::~CACFArray((AUMatrixPatcher *)((char *)this + 552));
  CACFArray::~CACFArray((AUMatrixPatcher *)((char *)this + 536));
  std::unique_ptr<MatrixMixerCore>::reset[abi:ne180100]((_QWORD *)this + 66, 0);
  ausdk::AUBase::~AUBase(this);
}

{
  *(_QWORD *)this = &off_1E69E01C8;
  CACFDictionary::~CACFDictionary((AUMatrixPatcher *)((char *)this + 568));
  CACFArray::~CACFArray((AUMatrixPatcher *)((char *)this + 552));
  CACFArray::~CACFArray((AUMatrixPatcher *)((char *)this + 536));
  std::unique_ptr<MatrixMixerCore>::reset[abi:ne180100]((_QWORD *)this + 66, 0);
  ausdk::AUBase::~AUBase(this);
  JUMPOUT(0x1BCC95CECLL);
}

uint64_t AUMatrixPatcher::Initialize(AUMatrixPatcher *this)
{
  unsigned int *v2;
  uint64_t v3;
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unsigned int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _WORD *v37;
  _WORD *v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  double v44;
  double v45;
  double v46;
  double v47;
  double v48;
  float v49;
  uint64_t v50;
  double v51;
  double v52;
  double v53;
  double v54;
  double v55;
  double *v56;
  uint64_t v57;
  uint64_t v58;
  double v59;
  double v60;
  double v61;
  double v62;
  double v63;
  double *v64;
  double v65;
  uint64_t v66;
  double v67;
  double v68;
  double v69;
  double v70;
  float v71;
  uint64_t v72;
  uint64_t v73;
  double v74;
  double v75;
  double v76;
  double v77;
  double v78;
  double *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  double v83;
  double v84;
  double v85;
  double v86;
  double v87;
  double *v88;
  uint64_t v89;
  int v90;
  int i;
  int v92;
  int v93;
  int j;
  uint64_t v95;
  ausdk::AUElement *Element;

  *((_DWORD *)this + 146) = *(_DWORD *)(ausdk::AUScope::SafeGetElement((AUMatrixPatcher *)((char *)this + 80), 0) + 108);
  *((_DWORD *)this + 147) = *(_DWORD *)(ausdk::AUScope::SafeGetElement((AUMatrixPatcher *)((char *)this + 128), 0) + 108);
  v2 = (unsigned int *)operator new();
  v3 = *((_QWORD *)this + 73);
  *(_QWORD *)v2 = 0x100000001;
  *((_QWORD *)v2 + 1) = v3;
  v2[14] = 0;
  *((_QWORD *)v2 + 9) = 0x40E5888000000000;
  *((_BYTE *)v2 + 80) = 0;
  v2[21] = 1018444120;
  v4 = v3;
  v5 = operator new[]();
  if (v4)
  {
    v6 = v5;
    do
    {
      *(_QWORD *)v6 = 0;
      *(_DWORD *)(v6 + 8) = 0;
      *(_BYTE *)(v6 + 16) = 0;
      *(_OWORD *)(v6 + 24) = xmmword_1B66A05F0;
      *(_OWORD *)(v6 + 40) = xmmword_1B66A0600;
      *(_QWORD *)(v6 + 80) = 0;
      *(_WORD *)(v6 + 72) = 0;
      *(_QWORD *)(v6 + 96) = 0;
      *(_QWORD *)(v6 + 104) = 0;
      *(_QWORD *)(v6 + 112) = 0;
      *(_QWORD *)(v6 + 120) = 0;
      *(_QWORD *)(v6 + 136) = 0;
      *(_QWORD *)(v6 + 144) = 0;
      *(_QWORD *)(v6 + 128) = 0;
      *(_QWORD *)(v6 + 56) = 0x3F90624DD2F1A9FCLL;
      *(_QWORD *)(v6 + 64) = 0xFFFFFFFFLL;
      v6 += 160;
    }
    while (v6 != v5 + 160 * v4);
  }
  *((_QWORD *)v2 + 2) = v5;
  v7 = v2[3];
  v8 = operator new[]();
  if (v7)
  {
    v9 = v8;
    do
    {
      *(_QWORD *)v9 = 0;
      *(_DWORD *)(v9 + 8) = 0;
      *(_BYTE *)(v9 + 16) = 0;
      *(_OWORD *)(v9 + 24) = xmmword_1B66A05F0;
      *(_OWORD *)(v9 + 40) = xmmword_1B66A0600;
      *(_QWORD *)(v9 + 80) = 0;
      *(_WORD *)(v9 + 72) = 0;
      *(_QWORD *)(v9 + 96) = 0;
      *(_QWORD *)(v9 + 104) = 0;
      *(_QWORD *)(v9 + 112) = 0;
      *(_QWORD *)(v9 + 120) = 0;
      *(_QWORD *)(v9 + 128) = 0;
      *(_QWORD *)(v9 + 136) = 0;
      *(_QWORD *)(v9 + 56) = 0x3F90624DD2F1A9FCLL;
      *(_QWORD *)(v9 + 64) = 0xFFFFFFFFLL;
      *(_BYTE *)(v9 + 144) = 0;
      v9 += 160;
    }
    while (v9 != v8 + 160 * v7);
  }
  *((_QWORD *)v2 + 3) = v8;
  v10 = v2[3] * v2[2];
  v11 = operator new[]();
  if ((_DWORD)v10)
  {
    v12 = 16 * v10;
    v13 = v11;
    do
    {
      *(_DWORD *)(v13 + 8) = 0;
      *(_QWORD *)v13 = 0;
      v13 += 16;
      v12 -= 16;
    }
    while (v12);
  }
  *((_QWORD *)v2 + 4) = v11;
  v14 = *v2;
  v15 = operator new[]();
  if ((_DWORD)v14)
  {
    v16 = (_QWORD *)v15;
    v17 = (v14 - 1) & 0x1FFFFFFFFFFFFFFFLL;
    if (!v17)
      goto LABEL_16;
    v18 = (v17 + 1) & 0x3FFFFFFFFFFFFFFELL;
    v19 = (_QWORD *)(v15 + 8);
    v20 = v18;
    do
    {
      *(v19 - 1) = 1065353216;
      *v19 = 1065353216;
      v19 += 2;
      v20 -= 2;
    }
    while (v20);
    if (v17 + 1 != v18)
    {
      v16 = (_QWORD *)(v15 + 8 * v18);
      do
LABEL_16:
        *v16++ = 1065353216;
      while (v16 != (_QWORD *)(v15 + 8 * v14));
    }
  }
  *((_QWORD *)v2 + 5) = v15;
  v21 = v2[1];
  v22 = operator new[]();
  if (!(_DWORD)v21)
    goto LABEL_24;
  v23 = (_QWORD *)v22;
  v24 = (v21 - 1) & 0x1FFFFFFFFFFFFFFFLL;
  if (!v24)
    goto LABEL_23;
  v25 = (v24 + 1) & 0x3FFFFFFFFFFFFFFELL;
  v26 = (_QWORD *)(v22 + 8);
  v27 = v25;
  do
  {
    *(v26 - 1) = 1065353216;
    *v26 = 1065353216;
    v26 += 2;
    v27 -= 2;
  }
  while (v27);
  if (v24 + 1 != v25)
  {
    v23 = (_QWORD *)(v22 + 8 * v25);
    do
LABEL_23:
      *v23++ = 1065353216;
    while (v23 != (_QWORD *)(v22 + 8 * v21));
  }
LABEL_24:
  *((_QWORD *)v2 + 6) = v22;
  v28 = v2[2];
  if ((_DWORD)v28)
  {
    v29 = *((_QWORD *)v2 + 4);
    v30 = *((_QWORD *)v2 + 2);
    v31 = v2[3];
    if ((_DWORD)v31)
    {
      v32 = 0;
      v33 = 0;
      v34 = v31 & 0xFFFFFFFE;
      while (1)
      {
        *(_QWORD *)(v30 + 160 * v33 + 144) = v29 + 16 * v32;
        if ((_DWORD)v31 == 1)
        {
          v35 = 0;
        }
        else
        {
          v36 = 0;
          v37 = (_WORD *)(v29 + 26 + 16 * v32);
          do
          {
            *(v37 - 9) = v33;
            *(v37 - 1) = v33;
            *(v37 - 8) = v36;
            *v37 = v36 | 1;
            v37 += 16;
            v36 += 2;
          }
          while (v34 != v36);
          v35 = v31 & 0xFFFFFFFE;
          if (v34 == v31)
            goto LABEL_34;
        }
        v38 = (_WORD *)(v29 + 10 + 16 * v32 + 16 * v35);
        do
        {
          *(v38 - 1) = v33;
          *v38 = v35;
          v38 += 8;
          ++v35;
        }
        while (v31 != v35);
LABEL_34:
        ++v33;
        v32 += v31;
        if (v33 == v28)
          goto LABEL_43;
      }
    }
    if (v28 > 1)
    {
      v39 = v28 & 0xFFFFFFFE;
      v40 = (_QWORD *)(v30 + 304);
      v41 = v39;
      do
      {
        *(v40 - 20) = v29;
        *v40 = v29;
        v40 += 40;
        v41 -= 2;
      }
      while (v41);
      if (v39 == v28)
        goto LABEL_43;
    }
    else
    {
      v39 = 0;
    }
    v42 = v28 - v39;
    v43 = (_QWORD *)(v30 + 160 * v39 + 144);
    do
    {
      *v43 = v29;
      v43 += 20;
      --v42;
    }
    while (v42);
  }
LABEL_43:
  v44 = *((double *)v2 + 9);
  v45 = v44 * *((float *)v2 + 21);
  if (v45 >= 2.22507386e-308)
    v46 = -6.90775528 / v45;
  else
    v46 = -INFINITY;
  v47 = exp(v46);
  if (v46 < -708.4)
    v47 = 0.0;
  v48 = v47 * v47;
  v49 = v47;
  *(float *)&v48 = v48 * v48;
  *((float *)v2 + 15) = v49;
  v2[16] = LODWORD(v48);
  if ((_DWORD)v28)
  {
    v50 = *((_QWORD *)v2 + 2);
    if (v44 * 2.5 >= 2.22507386e-308)
      v51 = -2.76310211 / v44;
    else
      v51 = -INFINITY;
    v52 = exp(v51);
    if (v51 >= -708.4)
      v53 = v52;
    else
      v53 = 0.0;
    if (v44 * 1.24 >= 2.22507386e-308)
      v54 = -5.57077039 / v44;
    else
      v54 = -INFINITY;
    v55 = exp(v54);
    if (v54 < -708.4)
      v55 = 0.0;
    v56 = (double *)(v50 + 48);
    do
    {
      *(v56 - 3) = v44;
      *(v56 - 2) = v53;
      *v56 = v55;
      v56 += 20;
      --v28;
    }
    while (v28);
  }
  v57 = v2[3];
  if ((_DWORD)v57)
  {
    v58 = *((_QWORD *)v2 + 3);
    if (v44 * 2.5 >= 2.22507386e-308)
      v59 = -2.76310211 / v44;
    else
      v59 = -INFINITY;
    v60 = exp(v59);
    if (v59 >= -708.4)
      v61 = v60;
    else
      v61 = 0.0;
    if (v44 * 1.24 >= 2.22507386e-308)
      v62 = -5.57077039 / v44;
    else
      v62 = -INFINITY;
    v63 = exp(v62);
    if (v62 < -708.4)
      v63 = 0.0;
    v64 = (double *)(v58 + 48);
    do
    {
      *(v64 - 3) = v44;
      *(v64 - 2) = v61;
      *v64 = v63;
      v64 += 20;
      --v57;
    }
    while (v57);
  }
  std::unique_ptr<MatrixMixerCore>::reset[abi:ne180100]((_QWORD *)this + 66, (uint64_t)v2);
  v65 = *(double *)(ausdk::AUScope::SafeGetElement((AUMatrixPatcher *)((char *)this + 128), 0) + 80);
  v66 = *((_QWORD *)this + 66);
  *(double *)(v66 + 72) = v65;
  v67 = v65 * *(float *)(v66 + 84);
  if (v67 >= 2.22507386e-308)
    v68 = -6.90775528 / v67;
  else
    v68 = -INFINITY;
  v69 = exp(v68);
  if (v68 < -708.4)
    v69 = 0.0;
  v70 = v69 * v69;
  v71 = v69;
  *(float *)&v70 = v70 * v70;
  *(float *)(v66 + 60) = v71;
  *(_DWORD *)(v66 + 64) = LODWORD(v70);
  v72 = *(unsigned int *)(v66 + 8);
  if ((_DWORD)v72)
  {
    v73 = *(_QWORD *)(v66 + 16);
    if (v65 * 2.5 >= 2.22507386e-308)
      v74 = -2.76310211 / v65;
    else
      v74 = -INFINITY;
    v75 = exp(v74);
    if (v74 >= -708.4)
      v76 = v75;
    else
      v76 = 0.0;
    if (v65 * 1.24 >= 2.22507386e-308)
      v77 = -5.57077039 / v65;
    else
      v77 = -INFINITY;
    v78 = exp(v77);
    if (v77 < -708.4)
      v78 = 0.0;
    v79 = (double *)(v73 + 48);
    v80 = v72;
    do
    {
      *(v79 - 3) = v65;
      *(v79 - 2) = v76;
      *v79 = v78;
      v79 += 20;
      --v80;
    }
    while (v80);
  }
  v81 = *(unsigned int *)(v66 + 12);
  if ((_DWORD)v81)
  {
    v82 = *(_QWORD *)(v66 + 24);
    if (v65 * 2.5 >= 2.22507386e-308)
      v83 = -2.76310211 / v65;
    else
      v83 = -INFINITY;
    v84 = exp(v83);
    if (v83 >= -708.4)
      v85 = v84;
    else
      v85 = 0.0;
    if (v65 * 1.24 >= 2.22507386e-308)
      v86 = -5.57077039 / v65;
    else
      v86 = -INFINITY;
    v87 = exp(v86);
    if (v86 < -708.4)
      v87 = 0.0;
    v88 = (double *)(v82 + 48);
    v89 = v81;
    do
    {
      *(v88 - 3) = v65;
      *(v88 - 2) = v85;
      *v88 = v87;
      v88 += 20;
      --v89;
    }
    while (v89);
  }
  *(_DWORD *)(v66 + 56) = 1065353216;
  v90 = *((_DWORD *)this + 146);
  if (v90)
  {
    for (i = 0; i != v90; ++i)
    {
      if (v72 > (unsigned __int16)i)
        *(_DWORD *)(*(_QWORD *)(v66 + 16) + 160 * (unsigned __int16)i + 8) = 1065353216;
    }
    v92 = v90;
  }
  else
  {
    v92 = 0;
  }
  v93 = *((_DWORD *)this + 147);
  if (v93)
  {
    for (j = 0; j != v93; ++j)
    {
      if (v81 > (unsigned __int16)j)
        *(_DWORD *)(*(_QWORD *)(v66 + 24) + 160 * (unsigned __int16)j + 8) = 1065353216;
    }
    v92 = v90;
  }
  if (v93 * v92)
  {
    v95 = 0;
    do
    {
      Element = (ausdk::AUElement *)ausdk::AUScope::SafeGetElement((AUMatrixPatcher *)((char *)this + 32), 0);
      if (!ausdk::AUElement::HasParameterID(Element, v95))
        (*(void (**)(AUMatrixPatcher *, uint64_t, _QWORD, _QWORD, _QWORD, float))(*(_QWORD *)this + 152))(this, v95, 0, 0, 0, 0.0);
      v95 = (v95 + 1);
    }
    while (v95 < *((_DWORD *)this + 147) * *((_DWORD *)this + 146));
  }
  return 0;
}

void sub_1B6468318(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1BCC95CEC](v1, 0x1020C406CC7114CLL);
  _Unwind_Resume(a1);
}

uint64_t AUMatrixPatcher::Reset(AUMatrixPatcher *this)
{
  unsigned int *v1;
  unsigned int v2;
  unsigned int v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int i;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v1 = (unsigned int *)*((_QWORD *)this + 66);
  if (v1)
  {
    v2 = *v1;
    if (*v1)
    {
      v3 = 0;
      do
      {
        v4 = *((_QWORD *)v1 + 5);
        if (*(_WORD *)(v4 + 8 * (unsigned __int16)v3 + 6))
        {
          v5 = *(unsigned __int16 *)(v4 + 8 * (unsigned __int16)v3 + 4);
          v6 = v5 + *(unsigned __int16 *)(v4 + 8 * (unsigned __int16)v3 + 6);
          v7 = 160 * v5 + 64;
          do
          {
            v8 = *((_QWORD *)v1 + 2) + v7;
            *(_QWORD *)(v8 + 16) = 0;
            *(_WORD *)(v8 + 8) = 0;
            *(_QWORD *)(v8 + 32) = 0;
            *(_QWORD *)(v8 + 40) = 0;
            *(_QWORD *)(v8 + 48) = 0;
            *(_QWORD *)(v8 + 56) = 0;
            *(_QWORD *)(v8 + 64) = 0;
            *(_QWORD *)(v8 + 72) = 0;
            *(_QWORD *)v8 = 0xFFFFFFFFLL;
            ++v5;
            v7 += 160;
          }
          while (v5 < v6);
          v2 = *v1;
        }
        ++v3;
      }
      while (v3 < v2);
    }
    v9 = v1[1];
    if (v9)
    {
      for (i = 0; i < v9; ++i)
      {
        v11 = *((_QWORD *)v1 + 6);
        if (*(_WORD *)(v11 + 8 * (unsigned __int16)i + 6))
        {
          v12 = *(unsigned __int16 *)(v11 + 8 * (unsigned __int16)i + 4);
          v13 = v12 + *(unsigned __int16 *)(v11 + 8 * (unsigned __int16)i + 6);
          v14 = 160 * v12 + 64;
          do
          {
            v15 = *((_QWORD *)v1 + 3) + v14;
            *(_QWORD *)(v15 + 16) = 0;
            *(_WORD *)(v15 + 8) = 0;
            *(_QWORD *)(v15 + 32) = 0;
            *(_QWORD *)(v15 + 40) = 0;
            *(_QWORD *)(v15 + 48) = 0;
            *(_QWORD *)(v15 + 56) = 0;
            *(_QWORD *)(v15 + 64) = 0;
            *(_QWORD *)(v15 + 72) = 0;
            *(_QWORD *)v15 = 0xFFFFFFFFLL;
            ++v12;
            v14 += 160;
          }
          while (v12 < v13);
          v9 = v1[1];
        }
      }
    }
    *((_BYTE *)v1 + 80) = 0;
  }
  return 0;
}

uint64_t AUMatrixPatcher::GetPropertyInfo(AUMatrixPatcher *this, int a2, int a3, int a4, unsigned int *a5, BOOL *a6)
{
  uint64_t result;

  if (a2 != 1667788397 || (a4 | a3) != 0)
    return 4294956417;
  result = 0;
  *a6 = 1;
  *a5 = 8;
  return result;
}

uint64_t AUMatrixPatcher::GetProperty(CFTypeRef *this, int a2, int a3, int a4, _QWORD *a5)
{
  uint64_t result;
  CFTypeRef v8;

  if (a2 != 1667788397 || (a4 | a3) != 0)
    return 4294956417;
  v8 = CFRetain(this[71]);
  result = 0;
  *a5 = v8;
  return result;
}

uint64_t AUMatrixPatcher::SetProperty(const __CFDictionary **this, int a2, int a3, unsigned int a4, const void **a5, int a6)
{
  uint64_t result;
  const __CFDictionary **v9;

  if (a2 != 1667788397 || a3 != 0)
    return 4294956417;
  result = 4294956445;
  if (a5 && a6 == 8)
  {
    if (*((_BYTE *)this + 17))
    {
      return 4294956447;
    }
    else
    {
      v9 = (const __CFDictionary **)CACFDictionary::operator=((uint64_t)(this + 71), *a5);
      CACFDictionary::GetCACFArray(v9, CFSTR("Inputs"), (CACFArray *)(this + 67));
      CACFDictionary::GetCACFArray(this + 71, CFSTR("Outputs"), (CACFArray *)(this + 69));
      return 0;
    }
  }
  return result;
}

uint64_t AUMatrixPatcher::SetParameter(AUMatrixPatcher *this, unsigned int a2, unsigned int a3, unsigned int a4, float a5)
{
  ausdk::AUScope *Scope;
  ausdk::AUElement *Element;

  if (a2 / *((_DWORD *)this + 146) >= *((_DWORD *)this + 147))
    return 4294956418;
  Scope = (ausdk::AUScope *)ausdk::AUBase::GetScope(this, a3);
  Element = (ausdk::AUElement *)ausdk::AUScope::SafeGetElement(Scope, a4);
  ausdk::AUElement::SetParameter(Element, a2, a5, 0);
  return 0;
}

uint64_t AUMatrixPatcher::CanScheduleParameters(AUMatrixPatcher *this)
{
  return 0;
}

uint64_t AUMatrixPatcher::ProcessMultipleBufferLists(AUMatrixPatcher *this, unsigned int *a2, int a3, unsigned int a4, const AudioBufferList **a5, unsigned int a6, AudioBufferList **a7)
{
  int32x2_t v7;
  uint64_t v8;
  unsigned int *v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int i;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t result;
  _BYTE *v26;
  uint64_t v27;
  uint64_t v28;
  _BYTE *v29;
  int v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  unsigned int v34;
  unsigned int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  uint64_t v40;
  unsigned int v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  float v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  int v50;
  BOOL *v51;
  float v52;
  uint64_t v53;
  float *v54;
  uint64_t v55;
  char v56;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  float *v63;
  float v64;
  float v65;
  float v66;
  uint64_t v67;
  float *v68;
  uint64_t v69;
  uint64_t v70;
  const void *v71;
  float v72;
  uint64_t v73;
  float *v74;
  float *v75;
  float v76;
  float v77;
  float v78;
  float v79;
  float v80;
  int v81;
  float v82;
  float v83;
  float v84;
  float v85;
  float v86;
  uint64_t v87;
  uint64_t v88;
  float *v89;
  float v90;
  float v91;
  float v92;
  float v93;
  int v94;
  float v95;
  double v96;
  double v97;
  double v98;
  uint64_t v99;
  float *v100;
  float *v101;
  float *v102;
  uint64_t v103;
  uint64_t v104;
  BOOL v105;
  uint64_t v106;
  float32x4_t v107;
  const float *v108;
  int v109;
  float v110;
  float v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  unsigned int *v115;
  float v116;
  int v118;
  float __B[3];
  float32x4x4_t v120;
  float32x4x4_t v121;

  v8 = *((_QWORD *)this + 66);
  if (!v8)
    return 4294956429;
  v115 = (unsigned int *)*a5;
  v11 = (unsigned int *)*a7;
  v12 = *((_DWORD *)this + 147);
  if (v12)
  {
    v13 = 0;
    v14 = *((_DWORD *)this + 146);
    do
    {
      if (v14)
      {
        for (i = 0; i < v14; ++i)
        {
          v118 = 0;
          (*(void (**)(AUMatrixPatcher *, _QWORD, _QWORD, _QWORD, int *))(*(_QWORD *)this + 144))(this, i + v13 * v14, 0, 0, &v118);
          v8 = *((_QWORD *)this + 66);
          if (*(_DWORD *)(v8 + 8) > (unsigned __int16)i
            && *(_DWORD *)(v8 + 12) > (unsigned __int16)v13)
          {
            *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v8 + 16) + 160 * (unsigned __int16)i + 144)
                      + 16 * (unsigned __int16)v13) = v118;
          }
          v14 = *((_DWORD *)this + 146);
        }
        v12 = *((_DWORD *)this + 147);
      }
      ++v13;
    }
    while (v13 < v12);
  }
  v16 = *v11;
  v17 = *(_QWORD *)(v8 + 48);
  *(_WORD *)(v17 + 4) = 0;
  *(_WORD *)(v17 + 6) = v16;
  if ((_DWORD)v16)
  {
    v18 = 0;
    v19 = v11 + 4;
    do
    {
      v20 = *((_QWORD *)this + 66);
      if (*(_DWORD *)(v20 + 12) > (unsigned __int16)v18)
      {
        v21 = *(_QWORD *)(v20 + 24) + 160 * (unsigned __int16)v18;
        *(_WORD *)(v21 + 12) = 0;
        *(_WORD *)(v21 + 14) = v18;
        *(_QWORD *)v21 = *v19;
      }
      ++v18;
      v19 += 2;
    }
    while (v16 != v18);
    v8 = *((_QWORD *)this + 66);
  }
  v22 = *(unsigned int *)(v8 + 12);
  if ((_DWORD)v22)
  {
    v23 = *(_QWORD *)(v8 + 24);
    if ((_DWORD)v22 == 1)
    {
      v24 = 0;
    }
    else
    {
      v24 = v22 & 0xFFFFFFFE;
      v26 = (_BYTE *)(v23 + 304);
      v27 = v24;
      do
      {
        *(v26 - 160) = 0;
        *v26 = 0;
        v26 += 320;
        v27 -= 2;
      }
      while (v27);
      if (v24 == v22)
        goto LABEL_27;
    }
    v28 = v22 - v24;
    v29 = (_BYTE *)(v23 + 160 * v24 + 144);
    do
    {
      *v29 = 0;
      v29 += 160;
      --v28;
    }
    while (v28);
  }
LABEL_27:
  v30 = *a2;
  v31 = *v115;
  v32 = *(_QWORD *)(v8 + 40);
  v33 = *(_QWORD *)(v8 + 48);
  *(_WORD *)(v32 + 4) = 0;
  *(_WORD *)(v32 + 6) = v31;
  v34 = *(unsigned __int16 *)(v33 + 6);
  if (*(_WORD *)(v33 + 6))
  {
    v35 = 0;
    v36 = 160 * *(unsigned __int16 *)(v33 + 4);
    do
    {
      v37 = *(_QWORD *)(v8 + 24);
      if (!*(_BYTE *)(v37 + v36 + 144))
      {
        bzero(*(void **)(v37 + v36), 4 * a3);
        v34 = *(unsigned __int16 *)(v33 + 6);
      }
      ++v35;
      v36 += 160;
    }
    while (v35 < v34);
    v31 = *v115;
  }
  if (v31)
  {
    v38 = 0;
    v39 = a3 & 3;
    v114 = 16 * ((a3 >> 2) - 1) + 16;
    v113 = (((a3 >> 2) - 1) + 1) & 0x1FFFFFFFCLL;
    v112 = 4 * v113;
    while (1)
    {
      v40 = *((_QWORD *)this + 66);
      v41 = *(_DWORD *)(v40 + 8);
      if (v41 > (unsigned __int16)v38)
      {
        *(_QWORD *)(*(_QWORD *)(v40 + 16) + 160 * (unsigned __int16)v38) = *(_QWORD *)&v115[4 * v38 + 4];
        v40 = *((_QWORD *)this + 66);
        v41 = *(_DWORD *)(v40 + 8);
      }
      v42 = *(_QWORD *)(v40 + 16);
      if (v41 > (unsigned __int16)v38)
      {
        v43 = v42 + 160 * (unsigned __int16)v38;
        *(_WORD *)(v43 + 12) = 0;
        *(_WORD *)(v43 + 14) = v38;
      }
      v44 = *(unsigned int *)(v40 + 12);
      if ((_DWORD)v44)
      {
        v45 = (float)(*(float *)(v40 + 56) * *(float *)(v42 + 160 * v38 + 8))
            * *(float *)(*(_QWORD *)(v40 + 40) + 8 * *(unsigned __int16 *)(v42 + 160 * v38 + 12));
        v46 = v42 + 160 * v38;
        v49 = *(_QWORD *)(v46 + 144);
        v48 = (uint64_t *)(v46 + 144);
        v47 = v49;
        v50 = 0;
        if (v45 == 0.0)
        {
          v51 = (BOOL *)(v47 + 12);
          do
          {
            v52 = *((float *)v51 - 2);
            if (v52 != 0.0)
              ++v50;
            *v51 = v52 != 0.0;
            v51 += 16;
            --v44;
          }
          while (v44);
          v44 = *(unsigned int *)(v40 + 12);
        }
        else
        {
          v53 = *(_QWORD *)(v40 + 48);
          v54 = (float *)(*(_QWORD *)(v40 + 24) + 12);
          v55 = *(unsigned int *)(v40 + 12);
          do
          {
            if (*(float *)(v47 + 4) != 0.0
              || (v56 = 0, *(float *)v47 != 0.0)
              && *(v54 - 1) != 0.0
              && *(float *)(v53 + 8 * *(unsigned __int16 *)v54) != 0.0)
            {
              ++v50;
              v56 = 1;
            }
            *(_BYTE *)(v47 + 12) = v56;
            v47 += 16;
            v54 += 40;
            --v55;
          }
          while (v55);
        }
        if (v44 && v50 != 0)
          break;
      }
LABEL_58:
      if (++v38 >= (unint64_t)*v115)
        goto LABEL_123;
    }
    v58 = 0;
    while (1)
    {
      v59 = *v48;
      v60 = *v48 + 16 * v58;
      if (!*(_BYTE *)(v60 + 12))
        goto LABEL_99;
      v61 = *(_QWORD *)(v40 + 24);
      v62 = v61 + 160 * v58;
      *(float *)v7.i32 = *(float *)(*(_QWORD *)(v40 + 48) + 8 * *(unsigned __int16 *)(v62 + 12))
                       * (float)((float)(v45 * *(float *)(v62 + 8)) * *(float *)(v59 + 16 * v58));
      v64 = *(float *)(v60 + 4);
      v63 = (float *)(v60 + 4);
      v65 = v64;
      v66 = v64;
      if (!*(_BYTE *)(v62 + 144))
        break;
      if (!*(_BYTE *)(v40 + 80))
      {
        *v63 = *(float *)v7.i32;
        v66 = *(float *)v7.i32;
      }
      if (vabds_f32(v66, *(float *)v7.i32) >= 0.0000001)
      {
        v72 = v66 - *(float *)v7.i32;
        if ((v30 & 0x10) == 0)
        {
          v73 = v59 + 16 * v58;
          v74 = *(float **)(*(_QWORD *)(v40 + 16) + 160 * *(unsigned __int16 *)(v73 + 8));
          v75 = *(float **)(v61 + 160 * *(unsigned __int16 *)(v73 + 10));
          v76 = *(float *)(v40 + 60);
          if (a3 >= 4)
          {
            v77 = *(float *)(v40 + 64);
            v78 = v76 * v72;
            v79 = v78 * v76;
            v80 = (float)(v78 * v76) * v76;
            v81 = a3 >> 2;
            do
            {
              v82 = v75[1];
              *v75 = *v75 + (float)(*v74 * v66);
              v66 = *(float *)v7.i32 + (float)((float)(v66 - *(float *)v7.i32) * v77);
              v75[1] = v82 + (float)(v74[1] * (float)(v78 + *(float *)v7.i32));
              v78 = v78 * v77;
              v83 = v75[3];
              v75[2] = v75[2] + (float)(v74[2] * (float)(v79 + *(float *)v7.i32));
              v79 = v79 * v77;
              v75[3] = v83 + (float)(v74[3] * (float)(v80 + *(float *)v7.i32));
              v80 = v80 * v77;
              v75 += 4;
              v74 += 4;
              --v81;
            }
            while (v81);
          }
          if ((a3 & 3) != 0)
          {
            *v75 = *v75 + (float)(*v74 * v66);
            v84 = (float)(v66 - *(float *)v7.i32) * v76;
            v66 = v84 + *(float *)v7.i32;
            if (v39 != 1)
            {
              v75[1] = v75[1] + (float)(v74[1] * v66);
              v85 = v84 * v76;
              v66 = v85 + *(float *)v7.i32;
              if (v39 != 2)
              {
                v86 = v75[2] + (float)(v74[2] * v66);
                goto LABEL_91;
              }
            }
          }
          goto LABEL_92;
        }
LABEL_95:
        v96 = *(float *)v7.i32;
        v97 = v72;
        v116 = *(float *)v7.i32;
        __powidf2();
        v66 = v96 + v98 * v97;
        if (v65 == v66)
          v66 = v116;
        goto LABEL_97;
      }
      *v63 = *(float *)v7.i32;
      if ((v30 & 0x10) == 0)
      {
        if (*(float *)v7.i32 == 1.0)
        {
          v67 = v59 + 16 * v58;
          v68 = *(float **)(v61 + 160 * *(unsigned __int16 *)(v67 + 10));
          vDSP_vadd(v68, 1, *(const float **)(*(_QWORD *)(v40 + 16) + 160 * *(unsigned __int16 *)(v67 + 8)), 1, v68, 1, a3);
        }
        else if (*(float *)v7.i32 != 0.0)
        {
          v99 = v59 + 16 * v58;
          v100 = *(float **)(*(_QWORD *)(v40 + 16) + 160 * *(unsigned __int16 *)(v99 + 8));
          v101 = *(float **)(v61 + 160 * *(unsigned __int16 *)(v99 + 10));
          if (a3 < 4)
          {
            v102 = v101;
            goto LABEL_119;
          }
          if (((a3 >> 2) - 1) < 3
            || (v101 < (float *)((char *)v100 + v114) ? (v105 = v100 >= (float *)((char *)v101 + v114)) : (v105 = 1),
                !v105))
          {
            v109 = a3 >> 2;
            v102 = v101;
            goto LABEL_118;
          }
          v106 = (((a3 >> 2) - 1) + 1) & 0x1FFFFFFFCLL;
          v102 = &v101[v112];
          v107 = (float32x4_t)vdupq_lane_s32(v7, 0);
          v108 = v100;
          do
          {
            v120 = vld4q_f32(v108);
            v108 += 16;
            v121 = vld4q_f32(v101);
            v121.val[0] = vmlaq_f32(v121.val[0], v107, v120.val[0]);
            v121.val[1] = vmlaq_f32(v121.val[1], v107, v120.val[1]);
            v121.val[2] = vmlaq_f32(v121.val[2], v107, v120.val[2]);
            v121.val[3] = vmlaq_f32(v121.val[3], v107, v120.val[3]);
            vst4q_f32(v101, v121);
            v101 += 16;
            v106 -= 4;
          }
          while (v106);
          v100 = (float *)((char *)v100 + v112 * 4);
          v109 = (a3 >> 2) - ((a3 >> 2) & 0xFFFFFFFC);
          if (((a3 >> 2) - 1) + 1 != v113)
          {
            do
            {
LABEL_118:
              v110 = v102[1];
              *v102 = *v102 + (float)(*v100 * *(float *)v7.i32);
              v102[1] = v110 + (float)(v100[1] * *(float *)v7.i32);
              v111 = v102[3];
              v102[2] = v102[2] + (float)(v100[2] * *(float *)v7.i32);
              v102[3] = v111 + (float)(v100[3] * *(float *)v7.i32);
              v102 += 4;
              v100 += 4;
              --v109;
            }
            while (v109);
          }
LABEL_119:
          if ((a3 & 3) != 0)
          {
            *v102 = *v102 + (float)(*v100 * *(float *)v7.i32);
            if (v39 != 1)
            {
              v102[1] = v102[1] + (float)(v100[1] * *(float *)v7.i32);
              if (v39 != 2)
                v102[2] = v102[2] + (float)(v100[2] * *(float *)v7.i32);
            }
          }
        }
      }
LABEL_98:
      --v50;
      v44 = *(unsigned int *)(v40 + 12);
LABEL_99:
      if (++v58 >= v44 || !v50)
        goto LABEL_58;
    }
    if (!*(_BYTE *)(v40 + 80))
    {
      *v63 = *(float *)v7.i32;
      v66 = *(float *)v7.i32;
    }
    if (vabds_f32(v66, *(float *)v7.i32) < 0.0000001)
    {
      *v63 = *(float *)v7.i32;
      if ((v30 & 0x10) == 0)
      {
        if (*(float *)v7.i32 == 1.0)
        {
          v69 = v59 + 16 * v58;
          v70 = v61 + 160 * *(unsigned __int16 *)(v69 + 10);
          *(_BYTE *)(v70 + 144) = 1;
          v71 = *(const void **)(*(_QWORD *)(v40 + 16) + 160 * *(unsigned __int16 *)(v69 + 8));
          if (v71 != *(const void **)v70)
            memcpy(*(void **)v70, v71, 4 * a3);
        }
        else if (*(float *)v7.i32 != 0.0)
        {
          __B[0] = *(float *)v7.i32;
          v103 = v59 + 16 * v58;
          v104 = v61 + 160 * *(unsigned __int16 *)(v103 + 10);
          *(_BYTE *)(v104 + 144) = 1;
          vDSP_vsmul(*(const float **)(*(_QWORD *)(v40 + 16) + 160 * *(unsigned __int16 *)(v103 + 8)), 1, __B, *(float **)v104, 1, a3);
        }
      }
      goto LABEL_98;
    }
    v72 = v66 - *(float *)v7.i32;
    if ((v30 & 0x10) != 0)
      goto LABEL_95;
    v87 = v59 + 16 * v58;
    v88 = v61 + 160 * *(unsigned __int16 *)(v87 + 10);
    *(_BYTE *)(v88 + 144) = 1;
    v89 = *(float **)(*(_QWORD *)(v40 + 16) + 160 * *(unsigned __int16 *)(v87 + 8));
    v75 = *(float **)v88;
    v76 = *(float *)(v40 + 60);
    if (a3 >= 4)
    {
      v90 = *(float *)(v40 + 64);
      v91 = v76 * v72;
      v92 = v91 * v76;
      v93 = (float)(v91 * v76) * v76;
      v94 = a3 >> 2;
      do
      {
        *v75 = *v89 * v66;
        v66 = *(float *)v7.i32 + (float)((float)(v66 - *(float *)v7.i32) * v90);
        v75[1] = v89[1] * (float)(v91 + *(float *)v7.i32);
        v91 = v91 * v90;
        v75[2] = v89[2] * (float)(v92 + *(float *)v7.i32);
        v92 = v92 * v90;
        v75[3] = v89[3] * (float)(v93 + *(float *)v7.i32);
        v93 = v93 * v90;
        v75 += 4;
        v89 += 4;
        --v94;
      }
      while (v94);
    }
    if ((a3 & 3) != 0)
    {
      *v75 = *v89 * v66;
      v95 = (float)(v66 - *(float *)v7.i32) * v76;
      v66 = v95 + *(float *)v7.i32;
      if (v39 != 1)
      {
        v75[1] = v89[1] * v66;
        v85 = v95 * v76;
        v66 = v85 + *(float *)v7.i32;
        if (v39 != 2)
        {
          v86 = v89[2] * v66;
LABEL_91:
          v75[2] = v86;
          v66 = *(float *)v7.i32 + (float)(v85 * v76);
        }
      }
    }
LABEL_92:
    if (v66 == v65)
      v66 = *(float *)v7.i32;
LABEL_97:
    *v63 = v66;
    goto LABEL_98;
  }
LABEL_123:
  result = 0;
  *(_BYTE *)(*((_QWORD *)this + 66) + 80) = 1;
  return result;
}

uint64_t AUMatrixPatcher::Render(AUMatrixPatcher *this, unsigned int *a2, const AudioTimeStamp *a3, uint64_t a4)
{
  ausdk::AUScope *v8;
  ausdk::AUInputElement *Element;
  uint64_t v10;
  uint64_t v11;
  uint64_t BufferList;
  _QWORD v14[2];

  v14[1] = *MEMORY[0x1E0C80C00];
  v8 = (AUMatrixPatcher *)((char *)this + 80);
  Element = (ausdk::AUInputElement *)ausdk::AUScope::SafeGetElement((AUMatrixPatcher *)((char *)this + 80), 0);
  ausdk::AUInputElement::PullInput(Element, a2, a3, 0, a4);
  v10 = ausdk::AUScope::SafeGetElement(v8, 0);
  v14[0] = ausdk::AUBufferList::GetBufferList((ausdk::AUBufferList *)(v10 + 144));
  v11 = ausdk::AUScope::SafeGetElement((AUMatrixPatcher *)((char *)this + 128), 0);
  BufferList = ausdk::AUBufferList::GetBufferList((ausdk::AUBufferList *)(v11 + 144));
  return (*(uint64_t (**)(AUMatrixPatcher *, unsigned int *, uint64_t, uint64_t, _QWORD *, uint64_t, uint64_t *))(*(_QWORD *)this + 184))(this, a2, a4, 1, v14, 1, &BufferList);
}

double AUMatrixPatcher::GetParameterInfo(AUMatrixPatcher *this, unsigned int a2, unsigned int a3, AudioUnitParameterInfo *a4)
{
  unsigned int v7;
  unsigned int v8;
  const __CFArray *v9;
  int Count;
  unsigned int v11;
  uint64_t Element;
  double result;
  _BOOL4 v14;
  const __CFArray *v15;
  int v16;
  uint64_t CACFString;
  uint64_t v18;
  unsigned int *v19;
  unsigned int *v20;
  const __CFString *v21;
  __CFString v22[2];
  __CFString v23;
  char v24[4];
  const __CFString *v25;
  char v26;
  const __CFString *v27;
  char v28;
  char cStr[64];
  uint64_t v30;

  v30 = *MEMORY[0x1E0C80C00];
  v7 = *((_DWORD *)this + 146);
  v8 = a3 / v7;
  v9 = (const __CFArray *)*((_QWORD *)this + 67);
  if (v9)
    Count = CFArrayGetCount(v9);
  else
    Count = 0;
  v11 = a3 - v8 * v7;
  Element = ausdk::AUScope::SafeGetElement((AUMatrixPatcher *)((char *)this + 80), 0);
  v14 = 0;
  if (Count == *(_DWORD *)(Element + 108))
  {
    v15 = (const __CFArray *)*((_QWORD *)this + 69);
    if (v15)
      v16 = CFArrayGetCount(v15);
    else
      v16 = 0;
    v14 = v16 == *(_DWORD *)(ausdk::AUScope::SafeGetElement((AUMatrixPatcher *)((char *)this + 128), 0) + 108);
  }
  if (v11 < *((_DWORD *)this + 146) && v8 < *((_DWORD *)this + 147))
  {
    a4->flags = -1073741824;
    if (v14)
    {
      v27 = 0;
      v28 = 1;
      v25 = 0;
      v26 = 1;
      CACFArray::GetCACFString((CFArrayRef *)this + 67, v11, (CFTypeRef *)&v27);
      CACFString = CACFArray::GetCACFString((CFArrayRef *)this + 69, v8, (CFTypeRef *)&v25);
      *(_DWORD *)v24 = 64;
      MEMORY[0x1E0C80A78](CACFString);
      MEMORY[0x1E0C80A78](v18);
      CACFString::GetCString(v27, &v23, v24, v19);
      *(_DWORD *)v24 = 64;
      CACFString::GetCString(v25, v22, v24, v20);
      sprintf(cStr, "%s -> %s", (const char *)&v23, (const char *)v22);
      CACFString::~CACFString((CACFString *)&v25);
      CACFString::~CACFString((CACFString *)&v27);
    }
    else
    {
      sprintf(cStr, "In %d -> Out %d", v11 + 1, v8 + 1);
    }
    v21 = CFStringCreateWithCString(0, cStr, 0x8000100u);
    a4->cfNameString = v21;
    a4->flags |= 0x8000010u;
    CFStringGetCString(v21, a4->name, 52, 0x8000100u);
    a4->unit = kAudioUnitParameterUnit_Boolean;
    result = 0.0078125;
    *(_QWORD *)&a4->minValue = 0x3F80000000000000;
    a4->defaultValue = 0.0;
  }
  return result;
}

void sub_1B6469230(_Unwind_Exception *a1)
{
  uint64_t v1;

  CACFString::~CACFString((CACFString *)(v1 - 152));
  CACFString::~CACFString((CACFString *)(v1 - 136));
  _Unwind_Resume(a1);
}

uint64_t AUMatrixPatcher::GetPresets(AUMatrixPatcher *this, const __CFArray **a2)
{
  __CFArray *Mutable;

  if (a2)
  {
    Mutable = CFArrayCreateMutable(0, 2, 0);
    CFArrayAppendValue(Mutable, &kMatrixPatcherPresets);
    CFArrayAppendValue(Mutable, &dword_1EF134658);
    *a2 = Mutable;
  }
  return 0;
}

uint64_t AUMatrixPatcher::NewFactoryPresetSet(AUMatrixPatcher *this, const AUPreset *a2)
{
  uint64_t v3;
  SInt32 presetNumber;
  char i;
  const AUPreset *v6;
  char v7;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;

  v3 = 0;
  presetNumber = a2->presetNumber;
  for (i = 1; ; i = 0)
  {
    v6 = (const AUPreset *)&kMatrixPatcherPresets[4 * v3];
    if (presetNumber == v6->presetNumber)
      break;
    v7 = i;
    v3 = 1;
    if ((v7 & 1) == 0)
      return 4294956445;
  }
  if (presetNumber)
  {
    if (presetNumber == 1)
    {
      v9 = *((_DWORD *)this + 146);
      v10 = *((_DWORD *)this + 147);
      if (v10 * v9)
      {
        v11 = 0;
        do
        {
          (*(void (**)(AUMatrixPatcher *, uint64_t, _QWORD, _QWORD, _QWORD, float))(*(_QWORD *)this + 152))(this, v11, 0, 0, 0, 0.0);
          v11 = (v11 + 1);
          v9 = *((_DWORD *)this + 146);
          v10 = *((_DWORD *)this + 147);
        }
        while (v11 < v10 * v9);
      }
      if (v9 < v10)
        v10 = v9;
      if (v10)
      {
        v12 = 0;
        do
        {
          (*(void (**)(AUMatrixPatcher *, _QWORD, _QWORD, _QWORD, _QWORD, float))(*(_QWORD *)this + 152))(this, v12 + v12 * v9, 0, 0, 0, 1.0);
          ++v12;
          v9 = *((_DWORD *)this + 146);
          v13 = *((_DWORD *)this + 147);
          if (v9 < v13)
            v13 = *((_DWORD *)this + 146);
        }
        while (v12 < v13);
      }
    }
  }
  else if (*((_DWORD *)this + 147) * *((_DWORD *)this + 146))
  {
    v14 = 0;
    do
    {
      (*(void (**)(AUMatrixPatcher *, uint64_t, _QWORD, _QWORD, _QWORD, float))(*(_QWORD *)this + 152))(this, v14, 0, 0, 0, 0.0);
      v14 = (v14 + 1);
    }
    while (v14 < *((_DWORD *)this + 147) * *((_DWORD *)this + 146));
  }
  ausdk::AUBase::SetAFactoryPresetAsCurrent((char *)this, v6);
  return 0;
}

double AUMatrixPatcher::GetLatency(AUMatrixPatcher *this)
{
  return 0.0;
}

uint64_t AUMatrixPatcher::SupportsTail(AUMatrixPatcher *this)
{
  return 1;
}

BOOL AUMatrixPatcher::StreamFormatWritable(AUMatrixPatcher *this)
{
  return *((_BYTE *)this + 17) == 0;
}

uint64_t AUMatrixPatcher::SupportedNumChannels(AUMatrixPatcher *this, const AUChannelInfo **a2)
{
  if (a2)
    *a2 = (const AUChannelInfo *)&AUMatrixPatcher::SupportedNumChannels(AUChannelInfo const**)::sChannels;
  return 1;
}

_QWORD *std::unique_ptr<MatrixMixerCore>::reset[abi:ne180100](_QWORD *result, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = (_QWORD *)*result;
  *result = a2;
  if (v2)
  {
    v3 = v2[2];
    if (v3)
      MEMORY[0x1BCC95CC8](v3, 0x10A0C809A3667E9);
    v4 = v2[3];
    if (v4)
      MEMORY[0x1BCC95CC8](v4, 0x1080C8024820D23);
    v5 = v2[4];
    if (v5)
      MEMORY[0x1BCC95CC8](v5, 0x1000C808B6DE1C6);
    v6 = v2[5];
    if (v6)
      MEMORY[0x1BCC95CC8](v6, 0x1000C8000313F17);
    v7 = v2[6];
    if (v7)
      MEMORY[0x1BCC95CC8](v7, 0x1000C8000313F17);
    JUMPOUT(0x1BCC95CECLL);
  }
  return result;
}

uint64_t VoiceProcessorV6::ProcessDSPChain_Uplink(uint64_t this, AudioTimeStamp *a2)
{
  VoiceProcessorV6 *v3;
  size_t v4;
  int v5;
  const AudioBufferList *v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  const AudioBufferList *v10;
  const AudioBufferList *v11;
  unsigned int v12;
  unsigned int *v13;
  void *v14;
  const void **v15;
  _QWORD *v16;
  NSObject *v17;
  int v18;
  int *v19;
  OpaqueAudioComponentInstance *v20;
  UInt64 v21;
  UInt64 v22;
  __int128 v23;
  __int128 v24;
  uint64_t v25;
  __int128 v26;
  __int128 v27;
  uint64_t v28;
  AudioBufferList *v29;
  _DWORD *v30;
  unint64_t v31;
  uint64_t v32;
  AudioBufferList *v33;
  uint64_t v34;
  OpaqueAudioComponentInstance *v35;
  __int128 v36;
  __int128 v37;
  OpaqueAudioComponentInstance *v38;
  __int128 v39;
  __int128 v40;
  OpaqueAudioComponentInstance *v41;
  __int128 v42;
  __int128 v43;
  OpaqueAudioComponentInstance *v44;
  __int128 v45;
  __int128 v46;
  AudioBufferList *v47;
  uint64_t v48;
  unsigned int v49;
  unsigned int v50;
  unsigned int v51;
  unsigned int v52;
  unsigned int v53;
  unsigned int v54;
  _OWORD *v55;
  _OWORD *v56;
  uint64_t v57;
  uint64_t v58;
  OpaqueAudioComponentInstance *v59;
  __int128 v60;
  __int128 v61;
  OpaqueAudioComponentInstance *v62;
  __int128 v63;
  __int128 v64;
  OpaqueAudioComponentInstance *v65;
  __int128 v66;
  __int128 v67;
  uint64_t v68;
  __int128 v69;
  __int128 v70;
  AudioUnit v71;
  __int128 v72;
  __int128 v73;
  uint64_t v74;
  uint64_t v75;
  const AudioBufferList *v76;
  uint64_t v77;
  VPTimeFreqConverter *v78;
  uint64_t v79;
  uint64_t v80;
  const AudioBufferList *v81;
  uint64_t v82;
  VPTimeFreqConverter *v83;
  AudioUnitParameterID **v84;
  uint64_t PropertyInfo;
  uint64_t v86;
  const AudioBufferList *v87;
  unsigned int v88;
  NSObject *v89;
  NSObject *v90;
  int v91;
  int *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  const AudioBufferList *v96;
  uint64_t v97;
  uint64_t v98;
  const AudioBufferList *v99;
  uint64_t v100;
  uint64_t v101;
  const AudioBufferList *v102;
  void *v103;
  int v104;
  __int128 v105;
  const float *v106;
  const float *v107;
  const float *v108;
  float *v109;
  const float *v110;
  float *v111;
  float *v112;
  float *v113;
  void *v114;
  __int128 v115;
  __int128 v116;
  UInt64 v117;
  AudioUnitParameterValue **v118;
  uint64_t v119;
  VPTimeFreqConverter *v120;
  UInt64 v121;
  float *v122;
  uint64_t Parameter;
  uint64_t v124;
  VPTimeFreqConverter *v125;
  uint64_t v126;
  VPTimeFreqConverter *v127;
  uint64_t v128;
  VPTimeFreqConverter *v129;
  uint64_t v130;
  float *v131;
  float v132;
  UInt64 v133;
  UInt64 v134;
  __int128 v135;
  __int128 v136;
  uint64_t v137;
  const AudioBufferList *v138;
  int v139;
  _BOOL4 v140;
  uint64_t v141;
  _BOOL4 v142;
  int v143;
  uint64_t v144;
  uint64_t v145;
  OpaqueAudioComponentInstance *v146;
  float v147;
  uint64_t v148;
  uint64_t v149;
  Float64 v150;
  Float64 v151;
  UInt64 v152;
  __int128 v153;
  __int128 v154;
  AudioUnitParameterValue v155;
  __int128 v156;
  __int128 v157;
  uint64_t v158;
  const AudioBufferList *v159;
  AudioTimeStamp *p_inInputBufferLists;
  uint64_t v161;
  unsigned int v162;
  const AudioBufferList *v163;
  __int128 v164;
  __int128 v165;
  uint64_t v166;
  const AudioBufferList *v167;
  uint64_t v168;
  AudioBufferList *v169;
  const AudioBufferList *v170;
  OpaqueAudioComponentInstance *v171;
  __int128 v172;
  __int128 v173;
  AudioBufferList *v174;
  uint64_t v175;
  BOOL *v176;
  __int128 v177;
  int v178;
  uint64_t v179;
  uint64_t v180;
  AudioUnitParameterValue **v181;
  uint64_t v182;
  __int128 v183;
  __int128 v184;
  uint64_t v185;
  uint64_t v186;
  __int128 v187;
  __int128 v188;
  uint64_t v189;
  uint64_t v190;
  AudioBufferList *v191;
  __int128 v192;
  __int128 v193;
  uint64_t v194;
  AudioUnitParameterValue *v195;
  OpaqueAudioComponentInstance *v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  __int128 v202;
  int v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  Float64 v208;
  UInt64 v209;
  __int128 v210;
  __int128 v211;
  uint64_t v212;
  const AudioBufferList *v213;
  _BOOL4 v214;
  _BOOL4 v215;
  const float *v216;
  uint64_t v217;
  OpaqueAudioComponentInstance *v218;
  _BOOL4 v219;
  int v220;
  OSStatus v221;
  uint64_t v222;
  uint64_t v223;
  unsigned int v224;
  unsigned int v225;
  void *v226;
  AudioBufferList *v227;
  OpaqueAudioComponentInstance *v228;
  UInt64 v229;
  uint64_t v230;
  __int128 v231;
  __int128 v232;
  OpaqueAudioComponentInstance *v233;
  AudioUnitParameterID v234;
  OpaqueAudioComponentInstance *v235;
  UInt64 v236;
  uint64_t v237;
  __int128 v238;
  __int128 v239;
  int v240;
  uint64_t v241;
  OpaqueAudioComponentInstance *v242;
  _BOOL4 v243;
  int v244;
  __int128 v245;
  __int128 v246;
  uint64_t v247;
  void *v248;
  unsigned int v249;
  OpaqueAudioComponentInstance *v250;
  _BOOL4 v251;
  AudioBufferList *v252;
  _BOOL4 v253;
  int v254;
  __int128 v255;
  __int128 v256;
  uint64_t v257;
  unsigned int v258;
  int v259;
  uint64_t *v260;
  uint64_t *v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  VPTimeFreqConverter *v266;
  VPTimeFreqConverter *v267;
  __int128 v268;
  __int128 v269;
  OSStatus v270;
  uint64_t v271;
  uint64_t v272;
  unsigned int v273;
  unsigned int v274;
  void *v275;
  OpaqueAudioComponentInstance *v276;
  UInt64 v277;
  UInt64 v278;
  uint64_t v279;
  uint64_t v280;
  uint64_t v281;
  int v282;
  OpaqueAudioComponentInstance *v283;
  uint64_t v284;
  void *v285;
  uint64_t v286;
  __int128 v287;
  __int128 v288;
  uint64_t v289;
  const AudioBufferList *v290;
  float *v292;
  uint64_t v293;
  char v294;
  float *v295;
  _BOOL4 v296;
  unsigned int v297;
  OpaqueAudioComponentInstance *v298;
  AudioUnitParameterValue *v299;
  unsigned int v300;
  unsigned int v301;
  unsigned int v302;
  unsigned int v303;
  float v304;
  UInt64 v305;
  UInt64 v306;
  __int128 v307;
  __int128 v308;
  UInt64 v309;
  UInt64 v310;
  __int128 v311;
  __int128 v312;
  unsigned int v313;
  AudioUnitParameterValue v314;
  unsigned int v315;
  char v316;
  uint64_t v317;
  OpaqueAudioComponentInstance *v318;
  AudioUnitParameterID v319;
  OpaqueAudioComponentInstance *v320;
  unsigned int v321;
  OpaqueAudioComponentInstance *v322;
  __int128 v323;
  __int128 v324;
  OpaqueAudioComponentInstance *v325;
  __int128 v326;
  __int128 v327;
  OpaqueAudioComponentInstance *v328;
  __int128 v329;
  __int128 v330;
  uint64_t v331;
  OpaqueAudioComponentInstance *v332;
  __int128 v333;
  __int128 v334;
  OpaqueAudioComponentInstance *v335;
  __int128 v336;
  __int128 v337;
  int mSampleTime_low;
  OpaqueAudioComponentInstance *v339;
  uint64_t v341;
  AudioUnitParameterValue *v342;
  AudioUnitParameterValue *v343;
  AudioUnitParameterValue *v344;
  AudioUnitParameterValue *v345;
  AudioUnitParameterValue *v346;
  int v347;
  _BOOL4 v348;
  int v349;
  void *v350;
  AudioBufferList *v351;
  AudioUnitParameterValue **v352;
  UInt64 v353;
  AudioUnitParameterValue **v354;
  AudioUnitParameterValue v355;
  char v356;
  AudioUnitParameterValue v357;
  BOOL v358;
  BOOL v359;
  BOOL v360;
  BOOL v361;
  __int16 v362;
  AudioUnitRenderActionFlags v363;
  AudioUnitParameterValue v364;
  uint64_t v365;
  int v366;
  uint64_t v367;
  int v368;
  uint64_t v369;
  int v370;
  const AudioBufferList *v371;
  int v372;
  AudioTimeStamp v373;
  AudioBufferList *v374;
  const AudioBufferList *v375;
  AudioBufferList v376;
  AudioBufferList *v377;
  uint64_t v378;
  AudioBufferList *v379;
  const AudioBufferList *v380;
  DSPSplitComplex ioOutputBufferLists;
  AudioTimeStamp inInputBufferLists;
  AudioTimeStamp buf;
  uint64_t v384;

  v3 = (VoiceProcessorV6 *)this;
  v384 = *MEMORY[0x1E0C80C00];
  v4 = **(unsigned int **)(this + 1080);
  if ((_DWORD)v4)
    bzero(*(void **)(this + 1408), v4);
  if (*((_BYTE *)v3 + 1404))
    VoiceProcessorV2::PostSRCMicClipDetection(v3);
  if (!*((_BYTE *)v3 + 2083))
    VoiceProcessorV2::GetAbsoluteChIndexForEpmicAndApplyPreDigitalGain(v3);
  v5 = *((unsigned __int8 *)v3 + 15897);
  if (*((_BYTE *)v3 + 15897)
    && (VoiceProcessorV2::InjectionFilesReadSignal(v3, 7, *((_DWORD *)v3 + 127), *((AudioBufferList **)v3 + 134)),
        v5 = *((unsigned __int8 *)v3 + 15897),
        *((_BYTE *)v3 + 15897))
    && (VoiceProcessorV2::InjectionFilesReadSignal(v3, 8, *((_DWORD *)v3 + 127), *((AudioBufferList **)v3 + 135)),
        v5 = *((unsigned __int8 *)v3 + 15897),
        *((_BYTE *)v3 + 15897))
    && *((_BYTE *)v3 + 15896)
    || *((_BYTE *)v3 + 15899))
  {
    v6 = (const AudioBufferList *)*((_QWORD *)v3 + 134);
    if (v6->mNumberBuffers)
    {
      v7 = 0;
      v8 = 0;
      do
      {
        bzero(v6->mBuffers[v7].mData, v6->mBuffers[v7].mDataByteSize);
        ++v8;
        v6 = (const AudioBufferList *)*((_QWORD *)v3 + 134);
        ++v7;
      }
      while (v8 < v6->mNumberBuffers);
      v5 = *((unsigned __int8 *)v3 + 15897);
    }
  }
  else
  {
    v6 = (const AudioBufferList *)*((_QWORD *)v3 + 134);
  }
  v9 = *((unsigned int *)v3 + 127);
  if (v5 || *((_BYTE *)v3 + 15898))
  {
    this = VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)v3, 4u, v9, v6, a2);
    v9 = *((unsigned int *)v3 + 127);
    v10 = (const AudioBufferList *)*((_QWORD *)v3 + 135);
    if (*((_BYTE *)v3 + 15897))
      goto LABEL_23;
  }
  else
  {
    v10 = (const AudioBufferList *)*((_QWORD *)v3 + 135);
  }
  if (!*((_BYTE *)v3 + 15898))
  {
    v11 = (const AudioBufferList *)*((_QWORD *)v3 + 177);
    goto LABEL_26;
  }
LABEL_23:
  this = VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)v3, 5u, v9, v10, a2);
  v9 = *((unsigned int *)v3 + 127);
  v11 = (const AudioBufferList *)*((_QWORD *)v3 + 177);
  if (*((_BYTE *)v3 + 15897))
  {
LABEL_27:
    this = VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)v3, 0x4Au, v9, v11, a2);
    goto LABEL_28;
  }
LABEL_26:
  if (*((_BYTE *)v3 + 15898))
    goto LABEL_27;
LABEL_28:
  v364 = 0.0;
  if (!*((_BYTE *)v3 + 2083) && !*((_BYTE *)v3 + 2085) && !*((_BYTE *)v3 + 472))
  {
    v25 = *((_QWORD *)v3 + 582);
    if (v25 || (*((_BYTE *)v3 + 4664) & 0x7F) != 0)
    {
      v363 = 0;
      *((_QWORD *)v3 + 2126) = 0;
      *((_QWORD *)v3 + 2127) = 0;
      *((_QWORD *)v3 + 2125) = 0;
      v353 = (UInt64)v3 + 17000;
      *((_DWORD *)v3 + 4250) = 1;
      *((_OWORD *)v3 + 1063) = *(_OWORD *)(*((_QWORD *)v3 + 134) + 8);
      if ((v25 & 1) != 0 && (*((_BYTE *)v3 + 4672) & 1) != 0)
      {
        this = *((_QWORD *)v3 + 347);
        if (this)
        {
          v26 = *(_OWORD *)&a2->mRateScalar;
          *(_OWORD *)&buf.mSampleTime = *(_OWORD *)&a2->mSampleTime;
          *(_OWORD *)&buf.mRateScalar = v26;
          v27 = *(_OWORD *)&a2->mSMPTETime.mHours;
          *(_OWORD *)&buf.mSMPTETime.mSubframes = *(_OWORD *)&a2->mSMPTETime.mSubframes;
          *(_OWORD *)&buf.mSMPTETime.mHours = v27;
          v363 = 512;
          this = AudioUnitProcess((AudioUnit)this, &v363, &buf, *((_DWORD *)v3 + 127), *((AudioBufferList **)v3 + 135));
        }
      }
      MEMORY[0x1E0C80A78](this);
      v29 = (AudioBufferList *)((char *)&v342 - ((v28 + 15) & 0x3FFFFFFFF0));
      v30 = (_DWORD *)*((_QWORD *)v3 + 135);
      if (*v30)
      {
        v31 = 0;
        v32 = 2;
        v33 = v29;
        do
        {
          *(_QWORD *)&v33->mNumberBuffers = 0;
          *(_QWORD *)&v33->mBuffers[0].mNumberChannels = 0;
          v33->mBuffers[0].mData = 0;
          v33->mNumberBuffers = 1;
          v33->mBuffers[0] = *(AudioBuffer *)&v30[v32];
          ++v31;
          v32 += 4;
          ++v33;
        }
        while (v31 < *v30);
      }
      v34 = *((_QWORD *)v3 + 582);
      if ((v34 & 2) != 0 && (*((_BYTE *)v3 + 4672) & 2) != 0)
      {
        v35 = (OpaqueAudioComponentInstance *)*((_QWORD *)v3 + 348);
        if (v35)
        {
          v36 = *(_OWORD *)&a2->mRateScalar;
          *(_OWORD *)&buf.mSampleTime = *(_OWORD *)&a2->mSampleTime;
          *(_OWORD *)&buf.mRateScalar = v36;
          v37 = *(_OWORD *)&a2->mSMPTETime.mHours;
          *(_OWORD *)&buf.mSMPTETime.mSubframes = *(_OWORD *)&a2->mSMPTETime.mSubframes;
          *(_OWORD *)&buf.mSMPTETime.mHours = v37;
          v363 = 512;
          AudioUnitProcess(v35, &v363, &buf, *((_DWORD *)v3 + 127), v29);
          if (*((_BYTE *)v3 + 15897) || *((_BYTE *)v3 + 15898))
            VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)v3, 0x4Bu, *((unsigned int *)v3 + 127), v29, &buf);
          CADeprecated::CABufferList::CopyDataFrom(*((void **)v3 + 138), v29);
          v34 = *((_QWORD *)v3 + 582);
        }
      }
      if ((v34 & 4) != 0 && (*((_BYTE *)v3 + 4672) & 4) != 0)
      {
        v38 = (OpaqueAudioComponentInstance *)*((_QWORD *)v3 + 349);
        if (v38)
        {
          v39 = *(_OWORD *)&a2->mRateScalar;
          *(_OWORD *)&buf.mSampleTime = *(_OWORD *)&a2->mSampleTime;
          *(_OWORD *)&buf.mRateScalar = v39;
          v40 = *(_OWORD *)&a2->mSMPTETime.mHours;
          *(_OWORD *)&buf.mSMPTETime.mSubframes = *(_OWORD *)&a2->mSMPTETime.mSubframes;
          *(_OWORD *)&buf.mSMPTETime.mHours = v40;
          v363 = 512;
          AudioUnitProcess(v38, &v363, &buf, *((_DWORD *)v3 + 127), v29 + 1);
          if (*((_BYTE *)v3 + 15897) || *((_BYTE *)v3 + 15898))
            VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)v3, 0x4Cu, *((unsigned int *)v3 + 127), v29 + 1, &buf);
          CADeprecated::CABufferList::CopyDataFrom(*((void **)v3 + 139), v29 + 1);
          v34 = *((_QWORD *)v3 + 582);
        }
      }
      if ((v34 & 8) != 0 && (*((_BYTE *)v3 + 4672) & 8) != 0)
      {
        v41 = (OpaqueAudioComponentInstance *)*((_QWORD *)v3 + 350);
        if (v41)
        {
          v42 = *(_OWORD *)&a2->mRateScalar;
          *(_OWORD *)&buf.mSampleTime = *(_OWORD *)&a2->mSampleTime;
          *(_OWORD *)&buf.mRateScalar = v42;
          v43 = *(_OWORD *)&a2->mSMPTETime.mHours;
          *(_OWORD *)&buf.mSMPTETime.mSubframes = *(_OWORD *)&a2->mSMPTETime.mSubframes;
          *(_OWORD *)&buf.mSMPTETime.mHours = v43;
          v363 = 512;
          AudioUnitProcess(v41, &v363, &buf, *((_DWORD *)v3 + 127), v29 + 2);
          if (*((_BYTE *)v3 + 15897) || *((_BYTE *)v3 + 15898))
            VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)v3, 0x4Du, *((unsigned int *)v3 + 127), v29 + 2, &buf);
          CADeprecated::CABufferList::CopyDataFrom(*((void **)v3 + 140), v29 + 2);
          v34 = *((_QWORD *)v3 + 582);
        }
      }
      if ((v34 & 0x10) != 0 && (*((_BYTE *)v3 + 4672) & 0x10) != 0)
      {
        v44 = (OpaqueAudioComponentInstance *)*((_QWORD *)v3 + 351);
        if (v44)
        {
          v45 = *(_OWORD *)&a2->mRateScalar;
          *(_OWORD *)&buf.mSampleTime = *(_OWORD *)&a2->mSampleTime;
          *(_OWORD *)&buf.mRateScalar = v45;
          v46 = *(_OWORD *)&a2->mSMPTETime.mHours;
          *(_OWORD *)&buf.mSMPTETime.mSubframes = *(_OWORD *)&a2->mSMPTETime.mSubframes;
          *(_OWORD *)&buf.mSMPTETime.mHours = v46;
          v363 = 512;
          v47 = v29 + 3;
          AudioUnitProcess(v44, &v363, &buf, *((_DWORD *)v3 + 127), v47);
          if (*((_BYTE *)v3 + 15897) || *((_BYTE *)v3 + 15898))
            VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)v3, 0x4Eu, *((unsigned int *)v3 + 127), v47, &buf);
          CADeprecated::CABufferList::CopyDataFrom(*((void **)v3 + 141), v47);
        }
      }
      v48 = *((_QWORD *)v3 + 135);
      v49 = *(_DWORD *)v48;
      v352 = &v342;
      if (v49 < 3)
      {
        *((_OWORD *)v3 + 1051) = *(_OWORD *)(v48 + 8);
        v54 = 0;
        v53 = 0;
        if (*(_DWORD *)v48 < 2u)
        {
          v52 = 0;
          v51 = 0;
        }
        else
        {
          v51 = 0;
          *(_OWORD *)((char *)v3 + 16840) = *(_OWORD *)(v48 + 24);
          v52 = 1;
        }
LABEL_118:
        v58 = *((_QWORD *)v3 + 582);
        if ((v58 & 0x40) != 0 && (*((_BYTE *)v3 + 4672) & 0x40) != 0)
        {
          v59 = (OpaqueAudioComponentInstance *)*((_QWORD *)v3 + 353);
          if (v59)
          {
            v60 = *(_OWORD *)&a2->mRateScalar;
            *(_OWORD *)&buf.mSampleTime = *(_OWORD *)&a2->mSampleTime;
            *(_OWORD *)&buf.mRateScalar = v60;
            v61 = *(_OWORD *)&a2->mSMPTETime.mHours;
            *(_OWORD *)&buf.mSMPTETime.mSubframes = *(_OWORD *)&a2->mSMPTETime.mSubframes;
            *(_OWORD *)&buf.mSMPTETime.mHours = v61;
            v363 = 512;
            AudioUnitProcess(v59, &v363, &buf, *((_DWORD *)v3 + 127), (AudioBufferList *)((char *)v3 + 16808));
            if (*((_BYTE *)v3 + 15897) || *((_BYTE *)v3 + 15898))
              VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)v3, 6u, *((unsigned int *)v3 + 127), (const AudioBufferList *)((char *)v3 + 16808), &buf);
            v58 = *((_QWORD *)v3 + 582);
          }
        }
        if ((v58 & 0x80) != 0 && (*((_BYTE *)v3 + 4672) & 0x80) != 0)
        {
          v62 = (OpaqueAudioComponentInstance *)*((_QWORD *)v3 + 354);
          if (v62)
          {
            v63 = *(_OWORD *)&a2->mRateScalar;
            *(_OWORD *)&buf.mSampleTime = *(_OWORD *)&a2->mSampleTime;
            *(_OWORD *)&buf.mRateScalar = v63;
            v64 = *(_OWORD *)&a2->mSMPTETime.mHours;
            *(_OWORD *)&buf.mSMPTETime.mSubframes = *(_OWORD *)&a2->mSMPTETime.mSubframes;
            *(_OWORD *)&buf.mSMPTETime.mHours = v64;
            v363 = 512;
            AudioUnitProcess(v62, &v363, &buf, *((_DWORD *)v3 + 127), (AudioBufferList *)((char *)v3 + 16832));
            if (*((_BYTE *)v3 + 15897) || *((_BYTE *)v3 + 15898))
              VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)v3, 7u, *((unsigned int *)v3 + 127), (const AudioBufferList *)((char *)v3 + 16832), &buf);
            v58 = *((_QWORD *)v3 + 582);
          }
        }
        if ((v58 & 0x200) != 0 && (*((_BYTE *)v3 + 4673) & 2) != 0)
        {
          v65 = (OpaqueAudioComponentInstance *)*((_QWORD *)v3 + 356);
          if (v65)
          {
            v66 = *(_OWORD *)&a2->mRateScalar;
            *(_OWORD *)&buf.mSampleTime = *(_OWORD *)&a2->mSampleTime;
            *(_OWORD *)&buf.mRateScalar = v66;
            v67 = *(_OWORD *)&a2->mSMPTETime.mHours;
            *(_OWORD *)&buf.mSMPTETime.mSubframes = *(_OWORD *)&a2->mSMPTETime.mSubframes;
            *(_OWORD *)&buf.mSMPTETime.mHours = v67;
            v363 = 512;
            AudioUnitProcess(v65, &v363, &buf, *((_DWORD *)v3 + 127), (AudioBufferList *)((char *)v3 + 16880));
            if (*((_BYTE *)v3 + 15897) || *((_BYTE *)v3 + 15898))
              VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)v3, 9u, *((unsigned int *)v3 + 127), (const AudioBufferList *)((char *)v3 + 16880), &buf);
            v58 = *((_QWORD *)v3 + 582);
          }
        }
        if ((v58 & 0x400) != 0 && (*((_BYTE *)v3 + 4673) & 4) != 0)
        {
          v68 = *((_QWORD *)v3 + 357);
          if (v68)
          {
            MEMORY[0x1E0C80A78](v68);
            *(&v342 - 6) = (AudioUnitParameterValue *)2;
            *(_OWORD *)(&v342 - 5) = *((_OWORD *)v3 + 1051);
            *(_OWORD *)(&v342 - 3) = *(_OWORD *)((char *)v3 + 16840);
            *(_QWORD *)&v373.mSampleTime = &v342 - 6;
            v373.mHostTime = 0;
            *(_QWORD *)&inInputBufferLists.mSampleTime = (char *)v3 + 16808;
            memset(&inInputBufferLists.mHostTime, 0, 24);
            v363 = 512;
            v69 = *(_OWORD *)&a2->mRateScalar;
            *(_OWORD *)&buf.mSampleTime = *(_OWORD *)&a2->mSampleTime;
            *(_OWORD *)&buf.mRateScalar = v69;
            v70 = *(_OWORD *)&a2->mSMPTETime.mHours;
            *(_OWORD *)&buf.mSMPTETime.mSubframes = *(_OWORD *)&a2->mSMPTETime.mSubframes;
            *(_OWORD *)&buf.mSMPTETime.mHours = v70;
            AudioUnitProcessMultiple(v71, &v363, &buf, *((_DWORD *)v3 + 127), 2u, (const AudioBufferList **)&v373, 4u, (AudioBufferList **)&inInputBufferLists);
            if (*((_BYTE *)v3 + 15897) || *((_BYTE *)v3 + 15898))
              VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)v3, 0x63u, *((unsigned int *)v3 + 127), (const AudioBufferList *)((char *)v3 + 16808), &buf);
            v58 = *((_QWORD *)v3 + 582);
          }
        }
        v362 = 0;
        v72 = *(_OWORD *)&a2->mRateScalar;
        *(_OWORD *)&buf.mSampleTime = *(_OWORD *)&a2->mSampleTime;
        *(_OWORD *)&buf.mRateScalar = v72;
        v73 = *(_OWORD *)&a2->mSMPTETime.mHours;
        *(_OWORD *)&buf.mSMPTETime.mSubframes = *(_OWORD *)&a2->mSMPTETime.mSubframes;
        *(_OWORD *)&buf.mSMPTETime.mHours = v73;
        if ((v58 & 0x2000000) == 0 || (*((_BYTE *)v3 + 4675) & 2) == 0 || !*((_QWORD *)v3 + 372))
        {
LABEL_163:
          v361 = 0;
          if ((v58 & 0x4000000) == 0 || (*((_BYTE *)v3 + 4675) & 4) == 0 || !*((_QWORD *)v3 + 373))
            goto LABEL_180;
          v79 = *((_QWORD *)v3 + 2098);
          if ((unint64_t)(*((_QWORD *)v3 + 2099) - v79) <= 0x28)
            goto LABEL_734;
          ECApplicator::apply(*(AudioUnitParameterID **)(v79 + 40), &buf, v52, &v361, (float *)v3 + 1047, (float *)v3 + 1051, (float *)v3 + 1055, (float *)v3 + 1059, (float *)v3 + 1063, (float *)v3 + 1067);
          v80 = *((unsigned int *)v3 + 127);
          if (*((_BYTE *)v3 + 15897) || *((_BYTE *)v3 + 15898))
          {
            VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)v3, 0x22u, v80, *((const AudioBufferList **)v3 + 136), &buf);
            v80 = *((unsigned int *)v3 + 127);
            v81 = (const AudioBufferList *)*((_QWORD *)v3 + 2137);
            if (*((_BYTE *)v3 + 15897))
              goto LABEL_173;
          }
          else
          {
            v81 = (const AudioBufferList *)*((_QWORD *)v3 + 2137);
          }
          if (!*((_BYTE *)v3 + 15898))
          {
LABEL_174:
            v82 = *((_QWORD *)v3 + 508);
            inInputBufferLists.mSampleTime = *(Float64 *)(v82 + 16);
            inInputBufferLists.mHostTime = *(_QWORD *)&inInputBufferLists.mSampleTime + 4 * v80;
            v83 = (VPTimeFreqConverter *)*((_QWORD *)v3 + 2145);
            if (v83)
            {
              VPTimeFreqConverter::Analyze(v83, *(const float **)(*((_QWORD *)v3 + 2137) + 16), (DSPSplitComplex *)&inInputBufferLists);
              v80 = *((unsigned int *)v3 + 127);
              v82 = *((_QWORD *)v3 + 508);
            }
            if (*((_BYTE *)v3 + 15897) || *((_BYTE *)v3 + 15898))
              VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)v3, 0x17u, v80, (const AudioBufferList *)v82, &buf);
            v58 = *((_QWORD *)v3 + 582);
LABEL_180:
            if ((v58 & 0x200000) != 0 && (*((_BYTE *)v3 + 4674) & 0x20) != 0 && *((_QWORD *)v3 + 368))
            {
              v84 = (AudioUnitParameterID **)*((_QWORD *)v3 + 2098);
              if (*((AudioUnitParameterID ***)v3 + 2099) == v84)
                goto LABEL_734;
              PropertyInfo = ECApplicator::apply(*v84, &buf, v51, (BOOL *)&v362 + 1, (float *)v3 + 1046, (float *)v3 + 1050, (float *)v3 + 1054, (float *)v3 + 1058, (float *)v3 + 1062, (float *)v3 + 1066);
              v86 = *((unsigned int *)v3 + 127);
              if (*((_BYTE *)v3 + 15897) || *((_BYTE *)v3 + 15898))
              {
                PropertyInfo = VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)v3, 0x1Cu, v86, (const AudioBufferList *)((char *)v3 + 16808), &buf);
                v86 = *((unsigned int *)v3 + 127);
                v87 = (const AudioBufferList *)*((_QWORD *)v3 + 418);
                if (*((_BYTE *)v3 + 15897))
                {
LABEL_220:
                  PropertyInfo = VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)v3, 0xCu, v86, v87, &buf);
                  goto LABEL_206;
                }
              }
              else
              {
                v87 = (const AudioBufferList *)*((_QWORD *)v3 + 418);
              }
              if (*((_BYTE *)v3 + 15898))
                goto LABEL_220;
            }
            else
            {
              v88 = 0;
              while (((*((_DWORD *)v3 + 116) >> v88) & 1) == 0)
              {
                if (++v88 == 32)
                {
                  v88 = 33;
                  break;
                }
              }
              if (v88 >= **((_DWORD **)v3 + 135))
              {
                LODWORD(v354) = v52;
                if (VPLogScope(void)::once != -1)
                  dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
                v89 = CALog::LogObjIfEnabled(1, VPLogScope(void)::scope);
                if (v89)
                {
                  v90 = v89;
                  if (os_log_type_enabled(v89, OS_LOG_TYPE_ERROR))
                  {
                    v91 = **((_DWORD **)v3 + 135);
                    LODWORD(inInputBufferLists.mSampleTime) = 136315906;
                    *(_QWORD *)((char *)&inInputBufferLists.mSampleTime + 4) = "vpProcessUplink_v6.cpp";
                    WORD2(inInputBufferLists.mHostTime) = 1024;
                    *(_DWORD *)((char *)&inInputBufferLists.mHostTime + 6) = 345;
                    WORD1(inInputBufferLists.mRateScalar) = 1024;
                    HIDWORD(inInputBufferLists.mRateScalar) = v88;
                    LOWORD(inInputBufferLists.mWordClockTime) = 1024;
                    *(_DWORD *)((char *)&inInputBufferLists.mWordClockTime + 2) = v91;
                    _os_log_impl(&dword_1B5ED0000, v90, OS_LOG_TYPE_ERROR, "%25s:%-5d  >vp> ERROR: mPrimaryEpMicIndex is %d, but epmic only has %d channels", (uint8_t *)&inInputBufferLists, 0x1Eu);
                  }
                }
                v92 = (int *)*((_QWORD *)v3 + 1570);
                if (v92 && (*((_BYTE *)v3 + 15897) || *((_BYTE *)v3 + 15898)))
                {
                  if (VPLogScope(void)::once != -1)
                    dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
                  CALegacyLog::log(v92, 1, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v6/vpProcessUplink_v6.cpp", 345, "ProcessDSPChain_Uplink", "ERROR: mPrimaryEpMicIndex is %d, but epmic only has %d channels", v88, **((_DWORD **)v3 + 135));
                }
                v88 = 0;
                v52 = v354;
              }
              v93 = *((_QWORD *)v3 + 135) + 16 * v88;
              PropertyInfo = (uint64_t)memcpy(*(void **)(*((_QWORD *)v3 + 136) + 16), *(const void **)(v93 + 16), *(unsigned int *)(v93 + 12));
            }
LABEL_206:
            if ((*((_BYTE *)v3 + 4664) & 0x20) != 0 && (*((_BYTE *)v3 + 4680) & 0x20) != 0)
            {
              PropertyInfo = *((_QWORD *)v3 + 416);
              if (PropertyInfo)
              {
                inInputBufferLists.mSampleTime = *((Float64 *)v3 + 135);
                inInputBufferLists.mHostTime = v353;
                v373.mSampleTime = *((Float64 *)v3 + 136);
                v363 = 512;
                PropertyInfo = AudioUnitProcessMultiple((AudioUnit)PropertyInfo, &v363, &buf, *((_DWORD *)v3 + 127), 2u, (const AudioBufferList **)&inInputBufferLists, 1u, (AudioBufferList **)&v373);
              }
            }
            v360 = 0;
            if ((*((_BYTE *)v3 + 4658) & 0x40) != 0 && (*((_BYTE *)v3 + 4674) & 0x40) != 0 && *((_QWORD *)v3 + 369))
            {
              v94 = *((_QWORD *)v3 + 2098);
              if ((unint64_t)(*((_QWORD *)v3 + 2099) - v94) <= 8)
                goto LABEL_734;
              PropertyInfo = ECApplicator::apply(*(AudioUnitParameterID **)(v94 + 8), &buf, v52, &v360, (float *)v3 + 1047, (float *)v3 + 1051, (float *)v3 + 1055, (float *)v3 + 1059, (float *)v3 + 1063, (float *)v3 + 1067);
              v95 = *((unsigned int *)v3 + 127);
              if (*((_BYTE *)v3 + 15897) || *((_BYTE *)v3 + 15898))
              {
                PropertyInfo = VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)v3, 0x1Du, v95, (const AudioBufferList *)((char *)v3 + 16832), &buf);
                v95 = *((unsigned int *)v3 + 127);
                v96 = (const AudioBufferList *)*((_QWORD *)v3 + 419);
                if (*((_BYTE *)v3 + 15897))
                {
LABEL_223:
                  PropertyInfo = VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)v3, 0xDu, v95, v96, &buf);
                  goto LABEL_224;
                }
              }
              else
              {
                v96 = (const AudioBufferList *)*((_QWORD *)v3 + 419);
              }
              if (*((_BYTE *)v3 + 15898))
                goto LABEL_223;
            }
LABEL_224:
            v359 = 0;
            if ((*((_BYTE *)v3 + 4658) & 0x80) == 0 || (*((_BYTE *)v3 + 4674) & 0x80) == 0 || !*((_QWORD *)v3 + 370))
              goto LABEL_235;
            v97 = *((_QWORD *)v3 + 2098);
            if ((unint64_t)(*((_QWORD *)v3 + 2099) - v97) <= 0x10)
              goto LABEL_734;
            PropertyInfo = ECApplicator::apply(*(AudioUnitParameterID **)(v97 + 16), &buf, v54, &v359, (float *)v3 + 1048, (float *)v3 + 1052, (float *)v3 + 1056, (float *)v3 + 1060, (float *)v3 + 1064, (float *)v3 + 1068);
            v98 = *((unsigned int *)v3 + 127);
            if (*((_BYTE *)v3 + 15897) || *((_BYTE *)v3 + 15898))
            {
              PropertyInfo = VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)v3, 0x1Eu, v98, (const AudioBufferList *)((char *)v3 + 16856), &buf);
              v98 = *((unsigned int *)v3 + 127);
              v99 = (const AudioBufferList *)*((_QWORD *)v3 + 421);
              if (*((_BYTE *)v3 + 15897))
              {
LABEL_234:
                PropertyInfo = VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)v3, 0xEu, v98, v99, &buf);
LABEL_235:
                v358 = 0;
                if ((*((_BYTE *)v3 + 4659) & 1) == 0 || (*((_BYTE *)v3 + 4675) & 1) == 0 || !*((_QWORD *)v3 + 371))
                  goto LABEL_246;
                v100 = *((_QWORD *)v3 + 2098);
                if ((unint64_t)(*((_QWORD *)v3 + 2099) - v100) > 0x18)
                {
                  PropertyInfo = ECApplicator::apply(*(AudioUnitParameterID **)(v100 + 24), &buf, v53, &v358, (float *)v3 + 1049, (float *)v3 + 1053, (float *)v3 + 1057, (float *)v3 + 1061, (float *)v3 + 1065, (float *)v3 + 1069);
                  v101 = *((unsigned int *)v3 + 127);
                  if (*((_BYTE *)v3 + 15897) || *((_BYTE *)v3 + 15898))
                  {
                    PropertyInfo = VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)v3, 0x1Fu, v101, (const AudioBufferList *)((char *)v3 + 16880), &buf);
                    v101 = *((unsigned int *)v3 + 127);
                    v102 = (const AudioBufferList *)*((_QWORD *)v3 + 420);
                    if (*((_BYTE *)v3 + 15897))
                    {
LABEL_245:
                      PropertyInfo = VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)v3, 0xFu, v101, v102, &buf);
                      goto LABEL_246;
                    }
                  }
                  else
                  {
                    v102 = (const AudioBufferList *)*((_QWORD *)v3 + 420);
                  }
                  if (*((_BYTE *)v3 + 15898))
                    goto LABEL_245;
LABEL_246:
                  if ((*((_BYTE *)v3 + 8837) & 8) != 0 && (*((_BYTE *)v3 + 8845) & 8) != 0)
                  {
                    if (*((_QWORD *)v3 + 480))
                    {
                      *(_BYTE *)(v353 + 32) = 0;
                      if ((*((_BYTE *)v3 + 4658) & 0x80) != 0 && (*((_BYTE *)v3 + 4674) & 0x80) != 0)
                      {
                        PropertyInfo = *((_QWORD *)v3 + 370);
                        if (PropertyInfo)
                        {
                          if (*((_QWORD *)v3 + 2128))
                          {
                            LODWORD(inInputBufferLists.mSampleTime) = 0;
                            PropertyInfo = AudioUnitGetPropertyInfo((AudioUnit)PropertyInfo, 0xF3Cu, 0, 0, (UInt32 *)&inInputBufferLists, 0);
                            if (!(_DWORD)PropertyInfo
                              && LODWORD(inInputBufferLists.mSampleTime) == 4 * *((unsigned int *)v3 + 127))
                            {
                              v103 = *(void **)(*((_QWORD *)v3 + 2128) + 16);
                              PropertyInfo = AudioUnitGetProperty(*((AudioUnit *)v3 + 370), 0xF3Cu, 0, 0, v103, (UInt32 *)&inInputBufferLists);
                              v104 = PropertyInfo;
                              if (*((_BYTE *)v3 + 481))
                                PropertyInfo = AudioUnitSetProperty(*((AudioUnit *)v3 + 480), 0xF3Cu, 0, 0, v103, LODWORD(inInputBufferLists.mSampleTime));
                              *(_BYTE *)(v353 + 32) = v104 == 0;
                            }
                          }
                        }
                      }
                    }
                  }
                  if ((*((_BYTE *)v3 + 4660) & 8) != 0 && (*((_BYTE *)v3 + 4676) & 8) != 0 && *((_QWORD *)v3 + 382))
                  {
                    MEMORY[0x1E0C80A78](PropertyInfo);
                    v351 = (AudioBufferList *)(&v342 - 10);
                    *((_OWORD *)&v342 - 5) = 0u;
                    *((_OWORD *)&v342 - 4) = 0u;
                    *((_OWORD *)&v342 - 3) = 0u;
                    *((_OWORD *)&v342 - 2) = 0u;
                    v341 = 0;
                    *(_OWORD *)(&v342 - 9) = *((_OWORD *)v3 + 1051);
                    v105 = *(_OWORD *)((char *)v3 + 16840);
                    *((_DWORD *)&v342 - 20) = 4;
                    *(_OWORD *)(&v342 - 7) = v105;
                    *(_OWORD *)(&v342 - 5) = *(_OWORD *)((char *)v3 + 16888);
                    v350 = (void *)*((_QWORD *)v3 + 2127);
                    v106 = *(const float **)(*((_QWORD *)v3 + 418) + 16);
                    v107 = *(const float **)(*((_QWORD *)v3 + 419) + 16);
                    v354 = *(AudioUnitParameterValue ***)(*((_QWORD *)v3 + 420) + 16);
                    v108 = (const float *)v354;
                    v109 = *(float **)(*((_QWORD *)v3 + 2153) + 16);
                    LODWORD(v379) = 1051372203;
                    vDSP_vadd(v106, 1, v107, 1, v109, 1, *((unsigned int *)v3 + 127));
                    vDSP_vadd(v109, 1, v108, 1, v109, 1, *((unsigned int *)v3 + 127));
                    v110 = v109;
                    v111 = v109;
                    v112 = (float *)v106;
                    vDSP_vsmul(v110, 1, (const float *)&v379, v111, 1, *((unsigned int *)v3 + 127));
                    *(_OWORD *)(&v342 - 3) = *(_OWORD *)(*((_QWORD *)v3 + 2153) + 8);
                    v113 = (float *)v107;
                    v114 = v350;
                    *(_QWORD *)&v376.mNumberBuffers = v351;
                    ioOutputBufferLists.realp = (float *)*((_QWORD *)v3 + 136);
                    v363 = 512;
                    v115 = *(_OWORD *)&a2->mRateScalar;
                    *(_OWORD *)&inInputBufferLists.mSampleTime = *(_OWORD *)&a2->mSampleTime;
                    *(_OWORD *)&inInputBufferLists.mRateScalar = v115;
                    v116 = *(_OWORD *)&a2->mSMPTETime.mHours;
                    *(_OWORD *)&inInputBufferLists.mSMPTETime.mSubframes = *(_OWORD *)&a2->mSMPTETime.mSubframes;
                    *(_OWORD *)&inInputBufferLists.mSMPTETime.mHours = v116;
                    AudioUnitProcessMultiple(*((AudioUnit *)v3 + 382), &v363, &inInputBufferLists, *((_DWORD *)v3 + 127), 1u, (const AudioBufferList **)&v376, 1u, (AudioBufferList **)&ioOutputBufferLists);
                    v117 = v353;
                    memcpy((void *)(*(_QWORD *)(*((_QWORD *)v3 + 2149) + 16) + 4 * *(unsigned int *)(v353 + 184)), v114, 4 * *((unsigned int *)v3 + 127));
                    memcpy((void *)(*(_QWORD *)(*((_QWORD *)v3 + 2150) + 16) + 4 * *(unsigned int *)(v117 + 184)), v106, 4 * *((unsigned int *)v3 + 127));
                    memcpy((void *)(*(_QWORD *)(*((_QWORD *)v3 + 2151) + 16) + 4 * *(unsigned int *)(v117 + 184)), v113, 4 * *((unsigned int *)v3 + 127));
                    v118 = v354;
                    memcpy((void *)(*(_QWORD *)(*((_QWORD *)v3 + 2152) + 16) + 4 * *(unsigned int *)(v117 + 184)), v354, 4 * *((unsigned int *)v3 + 127));
                    LODWORD(v374) = 4 * *((_DWORD *)v3 + 127);
                    AudioUnitGetProperty(*((AudioUnit *)v3 + 382), 0x9087u, 0, 0, *(void **)(*((_QWORD *)v3 + 2154) + 16), (UInt32 *)&v374);
                    v119 = *((unsigned int *)v3 + 127);
                    v373.mSampleTime = *(Float64 *)(*((_QWORD *)v3 + 2155) + 16);
                    v373.mHostTime = *(_QWORD *)&v373.mSampleTime + 4 * v119;
                    v120 = (VPTimeFreqConverter *)*((_QWORD *)v3 + 2156);
                    if (v120)
                    {
                      VPTimeFreqConverter::Analyze(v120, *(const float **)(*((_QWORD *)v3 + 136) + 16), (DSPSplitComplex *)&v373);
                      v119 = *((unsigned int *)v3 + 127);
                    }
                    memcpy(v114, *(const void **)(*((_QWORD *)v3 + 2149) + 16), 4 * v119);
                    memcpy(v112, *(const void **)(*((_QWORD *)v3 + 2150) + 16), 4 * *((unsigned int *)v3 + 127));
                    memcpy(v113, *(const void **)(*((_QWORD *)v3 + 2151) + 16), 4 * *((unsigned int *)v3 + 127));
                    memcpy(v118, *(const void **)(*((_QWORD *)v3 + 2152) + 16), 4 * *((unsigned int *)v3 + 127));
                    v121 = v353;
                    memmove(*(void **)(*((_QWORD *)v3 + 2149) + 16), (const void *)(*(_QWORD *)(*((_QWORD *)v3 + 2149) + 16) + 4 * *((unsigned int *)v3 + 127)), 4 * *(unsigned int *)(v353 + 184));
                    memmove(*(void **)(*((_QWORD *)v3 + 2150) + 16), (const void *)(*(_QWORD *)(*((_QWORD *)v3 + 2150) + 16) + 4 * *((unsigned int *)v3 + 127)), 4 * *(unsigned int *)(v121 + 184));
                    memmove(*(void **)(*((_QWORD *)v3 + 2151) + 16), (const void *)(*(_QWORD *)(*((_QWORD *)v3 + 2151) + 16) + 4 * *((unsigned int *)v3 + 127)), 4 * *(unsigned int *)(v121 + 184));
                    memmove(*(void **)(*((_QWORD *)v3 + 2152) + 16), (const void *)(*(_QWORD *)(*((_QWORD *)v3 + 2152) + 16) + 4 * *((unsigned int *)v3 + 127)), 4 * *(unsigned int *)(v121 + 184));
                    if (*((_BYTE *)v3 + 15897) || *((_BYTE *)v3 + 15898))
                      VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)v3, 0x7Au, *((unsigned int *)v3 + 127), *((const AudioBufferList **)v3 + 136), &inInputBufferLists);
                  }
                  v122 = (float *)(*(_QWORD *)(*((_QWORD *)v3 + 510) + 16) + 4 * *((unsigned int *)v3 + 127));
                  ioOutputBufferLists.realp = *(float **)(*((_QWORD *)v3 + 510) + 16);
                  ioOutputBufferLists.imagp = v122;
                  Parameter = *((_QWORD *)v3 + 518);
                  if (Parameter)
                    Parameter = VPTimeFreqConverter::Analyze((VPTimeFreqConverter *)Parameter, *((const float **)v3 + 2127), &ioOutputBufferLists);
                  if ((*((_BYTE *)v3 + 4658) & 0x20) != 0
                    && (*((_BYTE *)v3 + 4674) & 0x20) != 0
                    && *((_QWORD *)v3 + 368))
                  {
                    v124 = *((unsigned int *)v3 + 127);
                    ioOutputBufferLists.realp = *(float **)(*((_QWORD *)v3 + 428) + 16);
                    ioOutputBufferLists.imagp = &ioOutputBufferLists.realp[v124];
                    v125 = (VPTimeFreqConverter *)*((_QWORD *)v3 + 512);
                    if (v125)
                    {
                      VPTimeFreqConverter::Analyze(v125, *((const float **)v3 + 2103), &ioOutputBufferLists);
                      v124 = *((unsigned int *)v3 + 127);
                    }
                    ioOutputBufferLists.realp = *(float **)(*((_QWORD *)v3 + 504) + 16);
                    ioOutputBufferLists.imagp = &ioOutputBufferLists.realp[v124];
                    Parameter = *((_QWORD *)v3 + 516);
                    if (Parameter)
                    {
                      Parameter = VPTimeFreqConverter::Analyze((VPTimeFreqConverter *)Parameter, *(const float **)(*((_QWORD *)v3 + 418) + 16), &ioOutputBufferLists);
                      v124 = *((unsigned int *)v3 + 127);
                    }
                    if (*((_BYTE *)v3 + 15897) || *((_BYTE *)v3 + 15898))
                      Parameter = VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)v3, 0x12u, v124, *((const AudioBufferList **)v3 + 428), &buf);
                  }
                  if ((*((_BYTE *)v3 + 4658) & 0x40) != 0
                    && (*((_BYTE *)v3 + 4674) & 0x40) != 0
                    && *((_QWORD *)v3 + 369))
                  {
                    v126 = *((unsigned int *)v3 + 127);
                    ioOutputBufferLists.realp = *(float **)(*((_QWORD *)v3 + 505) + 16);
                    ioOutputBufferLists.imagp = &ioOutputBufferLists.realp[v126];
                    v127 = (VPTimeFreqConverter *)*((_QWORD *)v3 + 513);
                    if (v127)
                    {
                      VPTimeFreqConverter::Analyze(v127, *((const float **)v3 + 2106), &ioOutputBufferLists);
                      v126 = *((unsigned int *)v3 + 127);
                    }
                    ioOutputBufferLists.realp = *(float **)(*((_QWORD *)v3 + 504) + 32);
                    ioOutputBufferLists.imagp = &ioOutputBufferLists.realp[v126];
                    Parameter = *((_QWORD *)v3 + 517);
                    if (Parameter)
                    {
                      Parameter = VPTimeFreqConverter::Analyze((VPTimeFreqConverter *)Parameter, *(const float **)(*((_QWORD *)v3 + 419) + 16), &ioOutputBufferLists);
                      v126 = *((unsigned int *)v3 + 127);
                    }
                    if (*((_BYTE *)v3 + 15897) || *((_BYTE *)v3 + 15898))
                      Parameter = VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)v3, 0x13u, v126, *((const AudioBufferList **)v3 + 505), &buf);
                  }
                  if ((*((_BYTE *)v3 + 4659) & 1) != 0 && (*((_BYTE *)v3 + 4675) & 1) != 0 && *((_QWORD *)v3 + 371))
                  {
                    v128 = *((unsigned int *)v3 + 127);
                    ioOutputBufferLists.realp = *(float **)(*((_QWORD *)v3 + 506) + 16);
                    ioOutputBufferLists.imagp = &ioOutputBufferLists.realp[v128];
                    v129 = (VPTimeFreqConverter *)*((_QWORD *)v3 + 515);
                    if (v129)
                    {
                      VPTimeFreqConverter::Analyze(v129, *((const float **)v3 + 2112), &ioOutputBufferLists);
                      v128 = *((unsigned int *)v3 + 127);
                    }
                    ioOutputBufferLists.realp = *(float **)(*((_QWORD *)v3 + 504) + 64);
                    ioOutputBufferLists.imagp = &ioOutputBufferLists.realp[v128];
                    Parameter = *((_QWORD *)v3 + 2096);
                    if (Parameter)
                    {
                      Parameter = VPTimeFreqConverter::Analyze((VPTimeFreqConverter *)Parameter, *(const float **)(*((_QWORD *)v3 + 420) + 16), &ioOutputBufferLists);
                      v128 = *((unsigned int *)v3 + 127);
                    }
                    if (*((_BYTE *)v3 + 15897) || *((_BYTE *)v3 + 15898))
                      Parameter = VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)v3, 0x15u, v128, *((const AudioBufferList **)v3 + 506), &buf);
                  }
                  v357 = 0.0;
                  v130 = *((_QWORD *)v3 + 582);
                  if ((v130 & 0x40000000000) != 0 && (*((_BYTE *)v3 + 4677) & 4) != 0)
                  {
                    Parameter = *((_QWORD *)v3 + 389);
                    if (Parameter)
                    {
                      Parameter = AudioUnitGetParameter((AudioUnit)Parameter, 0x2Bu, 0, 0, &v357);
                      v130 = *((_QWORD *)v3 + 582);
                    }
                  }
                  if ((v130 & 0x800000) != 0 && (*((_BYTE *)v3 + 4674) & 0x80) != 0)
                  {
                    if (*((_QWORD *)v3 + 370))
                    {
                      if (v357 == 1.0)
                      {
                        v131 = (float *)(*(_QWORD *)(*((_QWORD *)v3 + 504) + 48) + 4 * *((unsigned int *)v3 + 127));
                        ioOutputBufferLists.realp = *(float **)(*((_QWORD *)v3 + 504) + 48);
                        ioOutputBufferLists.imagp = v131;
                        Parameter = *((_QWORD *)v3 + 2132);
                        if (Parameter)
                        {
                          Parameter = VPTimeFreqConverter::Analyze((VPTimeFreqConverter *)Parameter, *(const float **)(*((_QWORD *)v3 + 421) + 16), &ioOutputBufferLists);
                          v130 = *((_QWORD *)v3 + 582);
                        }
                      }
                    }
                  }
                  if ((v130 & 0x80000000000) == 0
                    || (*((_BYTE *)v3 + 4677) & 8) == 0
                    || (Parameter = *((_QWORD *)v3 + 390)) == 0)
                  {
LABEL_322:
                    v356 = 0;
                    if ((v130 & 0x20000000) != 0 && (*((_BYTE *)v3 + 4675) & 0x20) != 0 && *((_QWORD *)v3 + 376))
                    {
                      v139 = 1;
                      v140 = 1;
                    }
                    else if ((v130 & 0x100000000) != 0 && (*((_BYTE *)v3 + 4676) & 1) != 0)
                    {
                      v139 = 0;
                      v140 = *((_QWORD *)v3 + 379) != 0;
                    }
                    else
                    {
                      v139 = 0;
                      v140 = 0;
                    }
                    v141 = v130 & 0x40000000;
                    if ((v130 & 0x40000000) != 0 && (*((_BYTE *)v3 + 4675) & 0x40) != 0 && *((_QWORD *)v3 + 377))
                    {
                      v142 = 1;
                      v139 = 1;
                      v143 = 1;
                      if ((v130 & 0x80000000) == 0)
                        goto LABEL_347;
                    }
                    else
                    {
                      if ((v130 & 0x80000000) == 0)
                      {
                        v142 = 0;
                        v143 = 1;
                        goto LABEL_347;
                      }
                      v143 = 1;
                      if ((*((_BYTE *)v3 + 4675) & 0x80) != 0)
                      {
                        v144 = *((_QWORD *)v3 + 378);
                        v142 = v144 != 0;
                        if (v144)
                          v143 = 2;
                        else
                          v143 = 1;
                      }
                      else
                      {
                        v142 = 0;
                      }
                    }
                    v145 = *((_QWORD *)v3 + 584);
                    if ((v145 & 0x80000000) != 0
                      && *((_QWORD *)v3 + 378)
                      && (v130 & v145 & 0x100000000) != 0
                      && *((_QWORD *)v3 + 379))
                    {
                      v143 = 2;
                      v139 = 2;
                    }
LABEL_347:
                    if ((v130 & 0x20000000) == 0)
                      goto LABEL_364;
                    if ((*((_BYTE *)v3 + 4675) & 0x20) == 0)
                      goto LABEL_364;
                    Parameter = *((_QWORD *)v3 + 376);
                    if (!Parameter)
                      goto LABEL_364;
                    AudioUnitSetProperty((AudioUnit)Parameter, 0x457u, 0, 0, (char *)v3 + 2316, 4u);
                    if ((*((_BYTE *)v3 + 4659) & 0x40) != 0 && (*((_BYTE *)v3 + 4675) & 0x40) != 0)
                    {
                      v146 = (OpaqueAudioComponentInstance *)*((_QWORD *)v3 + 376);
                      if (*((_QWORD *)v3 + 377))
                      {
                        v147 = (float)*((unsigned int *)v3 + 684);
LABEL_354:
                        AudioUnitSetParameter(v146, 0x1Bu, 0, 0, v147, 0);
                        v148 = *((_QWORD *)v3 + 582);
                        if ((v148 & 0x200000) != 0)
                        {
                          v149 = *((_QWORD *)v3 + 584);
                          if ((v149 & 0x200000) != 0
                            && *((_QWORD *)v3 + 368)
                            && (v148 & v149 & 0x400000) != 0
                            && *((_QWORD *)v3 + 369))
                          {
                            AudioUnitSetParameter(*((AudioUnit *)v3 + 376), 0x3Fu, 0, 0, *((float *)v3 + 1054) * *((float *)v3 + 1055), 0);
                          }
                        }
                        *(_QWORD *)&v150 = *((_QWORD *)v3 + 138) + 24;
                        *(_QWORD *)&v151 = *((_QWORD *)v3 + 139) + 24;
                        if (**((_DWORD **)v3 + 135) <= 2u)
                        {
                          *(_QWORD *)&v373.mSampleTime = *((_QWORD *)v3 + 138) + 24;
                          *(Float64 *)&v373.mHostTime = v151;
                          v373.mRateScalar = 0.0;
                          v373.mWordClockTime = v353;
                          *(_OWORD *)&v373.mSMPTETime.mSubframes = *((_OWORD *)v3 + 209);
                        }
                        else
                        {
                          v152 = *((_QWORD *)v3 + 140) + 24;
                          *(_OWORD *)&v373.mSMPTETime.mSubframes = *((_OWORD *)v3 + 209);
                          v373.mSampleTime = v151;
                          v373.mHostTime = v152;
                          v373.mRateScalar = v150;
                          v373.mWordClockTime = v353;
                        }
                        *(_QWORD *)&v376.mNumberBuffers = 0;
                        v363 = 512;
                        AudioUnitSetParameter(*((AudioUnit *)v3 + 376), 0x2Cu, 0, 0, *((AudioUnitParameterValue *)v3 + 1090), 0);
                        v153 = *(_OWORD *)&a2->mRateScalar;
                        *(_OWORD *)&inInputBufferLists.mSampleTime = *(_OWORD *)&a2->mSampleTime;
                        *(_OWORD *)&inInputBufferLists.mRateScalar = v153;
                        v154 = *(_OWORD *)&a2->mSMPTETime.mHours;
                        *(_OWORD *)&inInputBufferLists.mSMPTETime.mSubframes = *(_OWORD *)&a2->mSMPTETime.mSubframes;
                        *(_OWORD *)&inInputBufferLists.mSMPTETime.mHours = v154;
                        Parameter = AudioUnitProcessMultiple(*((AudioUnit *)v3 + 376), &v363, &inInputBufferLists, *((_DWORD *)v3 + 127), 6u, (const AudioBufferList **)&v373, 1u, (AudioBufferList **)&v376);
                        v130 = *((_QWORD *)v3 + 582);
                        v141 = v130 & 0x40000000;
LABEL_364:
                        if (v141 && (*((_BYTE *)v3 + 4675) & 0x40) != 0 && *((_QWORD *)v3 + 377))
                        {
                          memcpy(*(void **)(*((_QWORD *)v3 + 434) + 16 * *((unsigned int *)v3 + 1040) + 16), *(const void **)(*((_QWORD *)v3 + 428) + 16), 4 * (2 * *((_DWORD *)v3 + 127)));
                          memcpy(*(void **)(*((_QWORD *)v3 + 434) + 16 * *((unsigned int *)v3 + 1041) + 16), *(const void **)(*((_QWORD *)v3 + 505) + 16), 4 * (2 * *((_DWORD *)v3 + 127)));
                          if (*((float *)v3 + 1066) == 0.0 && *((float *)v3 + 1067) == 0.0)
                            v155 = 0.0;
                          else
                            v155 = 1.0;
                          AudioUnitSetParameter(*((AudioUnit *)v3 + 377), 0x20u, 0, 0, v155, 0);
                          v373.mSampleTime = *((Float64 *)v3 + 434);
                          *(_QWORD *)&v376.mNumberBuffers = *((_QWORD *)v3 + 429);
                          v156 = *(_OWORD *)&a2->mRateScalar;
                          *(_OWORD *)&inInputBufferLists.mSampleTime = *(_OWORD *)&a2->mSampleTime;
                          *(_OWORD *)&inInputBufferLists.mRateScalar = v156;
                          v157 = *(_OWORD *)&a2->mSMPTETime.mHours;
                          *(_OWORD *)&inInputBufferLists.mSMPTETime.mSubframes = *(_OWORD *)&a2->mSMPTETime.mSubframes;
                          *(_OWORD *)&inInputBufferLists.mSMPTETime.mHours = v157;
                          v363 = 512;
                          AudioUnitProcessMultiple(*((AudioUnit *)v3 + 377), &v363, &inInputBufferLists, *((_DWORD *)v3 + 127), 1u, (const AudioBufferList **)&v373, 1u, (AudioBufferList **)&v376);
                          LODWORD(v379) = 8 * *((_DWORD *)v3 + 127);
                          AudioUnitGetProperty(*((AudioUnit *)v3 + 377), 0xE7Au, 0, 0, *(void **)(*((_QWORD *)v3 + 537) + 16), (UInt32 *)&v379);
                          LODWORD(v379) = 8 * *((_DWORD *)v3 + 127);
                          Parameter = AudioUnitGetProperty(*((AudioUnit *)v3 + 377), 0xE79u, 0, 0, *(void **)(*((_QWORD *)v3 + 537) + 32), (UInt32 *)&v379);
                          v158 = *((unsigned int *)v3 + 127);
                          v159 = (const AudioBufferList *)*((_QWORD *)v3 + 429);
                          if (*((_BYTE *)v3 + 15897) || *((_BYTE *)v3 + 15898))
                          {
                            p_inInputBufferLists = &inInputBufferLists;
                            v161 = (uint64_t)v3;
                            v162 = 10;
LABEL_373:
                            Parameter = VoiceProcessorV2::SaveFilesWriteSignal(v161, v162, v158, v159, p_inInputBufferLists);
                          }
LABEL_401:
                          MEMORY[0x1E0C80A78](Parameter);
                          v174 = (AudioBufferList *)(&v342 - 8);
                          *((_OWORD *)&v342 - 3) = 0u;
                          *((_OWORD *)&v342 - 2) = 0u;
                          *((_OWORD *)&v342 - 4) = 0u;
                          *((_DWORD *)&v342 - 16) = 3;
                          *(double *)&v177 = MEMORY[0x1E0C80A78](v175);
                          v354 = &v342 - 8;
                          v341 = 0;
                          *((_OWORD *)&v342 - 3) = v177;
                          *((_OWORD *)&v342 - 2) = v177;
                          *((_OWORD *)&v342 - 4) = v177;
                          *((_DWORD *)&v342 - 16) = v178;
                          v179 = *((_QWORD *)v3 + 582);
                          if ((v179 & 0x200000000) != 0 && (*((_BYTE *)v3 + 4676) & 2) != 0 && *((_QWORD *)v3 + 380)
                            || (v179 & 0x400000000) != 0 && (*((_BYTE *)v3 + 4676) & 4) != 0 && *((_QWORD *)v3 + 381)
                            || (v179 & 0x1000000000) != 0
                            && (*((_BYTE *)v3 + 4676) & 0x10) != 0
                            && *((_QWORD *)v3 + 383))
                          {
                            *(_OWORD *)(&v342 - 7) = *(_OWORD *)(*((_QWORD *)v3 + 428) + 8);
                            *(_OWORD *)(&v342 - 5) = *(_OWORD *)(*((_QWORD *)v3 + 505) + 8);
                            *(_OWORD *)(&v342 - 3) = *(_OWORD *)(*((_QWORD *)v3 + 506) + 8);
                            v180 = *((_QWORD *)v3 + 504);
                            v181 = v354;
                            *(_OWORD *)(v354 + 1) = *(_OWORD *)(v180 + 8);
                            *(_OWORD *)(v181 + 3) = *(_OWORD *)(v180 + 24);
                            v177 = *(_OWORD *)(v180 + 56);
                            *(_OWORD *)(v181 + 5) = v177;
                          }
                          if ((v179 & 0x200000000) == 0 || (*((_BYTE *)v3 + 4676) & 2) == 0 || !*((_QWORD *)v3 + 380))
                          {
LABEL_424:
                            if ((v179 & 0x400000000) == 0
                              || (*((_BYTE *)v3 + 4676) & 4) == 0
                              || !*((_QWORD *)v3 + 381))
                            {
LABEL_437:
                              if ((v179 & 0x1000000000) == 0
                                || (*((_BYTE *)v3 + 4676) & 0x10) == 0
                                || !*((_QWORD *)v3 + 383))
                              {
LABEL_450:
                                if (v139 == 2)
                                {
                                  VoiceProcessorV4::SignalParamSwitchMixNF((AudioUnit *)v3, v142, v140, (BOOL *)&v356, *(AudioUnitParameterValue *)&v177);
                                }
                                else if (v139 == 1)
                                {
                                  VoiceProcessorV2::SignalParamSwitchMix((AudioUnit *)v3, v142, v140, &v356, v176);
                                }
                                if (v143 == 1)
                                  VoiceProcessorV2::TimeAlignedReferenceAndOtherHandling(v3, HIBYTE(v362) != 0, v360, v142, v356 != 0);
                                else
                                  VoiceProcessorV4::TimeAlignedReferenceAndOtherHandlingNF(v3, HIBYTE(v362) != 0, v358, v142, v356 != 0);
                                v196 = (OpaqueAudioComponentInstance *)memcpy(*(void **)(*((_QWORD *)v3 + 432) + 16), *(const void **)(*((_QWORD *)v3 + 504) + 16), *((unsigned int *)v3 + 1071));
                                v197 = *((_QWORD *)v3 + 582);
                                if ((v197 & 0x800000) != 0
                                  && (*((_BYTE *)v3 + 4674) & 0x80) != 0
                                  && *((_QWORD *)v3 + 370)
                                  && v357 == 1.0)
                                {
                                  v196 = (OpaqueAudioComponentInstance *)memcpy(*(void **)(*((_QWORD *)v3 + 2131) + 16), *(const void **)(*((_QWORD *)v3 + 504) + 48), *((unsigned int *)v3 + 1071));
                                  v197 = *((_QWORD *)v3 + 582);
                                }
                                if ((v197 & 0x200000000000) == 0
                                  || (v198 = *((_QWORD *)v3 + 584), (v198 & 0x200000000000) == 0)
                                  || !*((_QWORD *)v3 + 392))
                                {
LABEL_480:
                                  if ((v197 & 0x20000000000000) != 0
                                    && (*((_BYTE *)v3 + 4678) & 0x20) != 0
                                    && *((_QWORD *)v3 + 400))
                                  {
                                    v214 = 1;
                                  }
                                  else
                                  {
                                    v214 = (v197 & 0x80000000000000) != 0
                                        && (*((_BYTE *)v3 + 4678) & 0x80) != 0
                                        && *((_QWORD *)v3 + 402) != 0;
                                  }
                                  LODWORD(v374) = 0;
                                  LODWORD(v371) = 0;
                                  AudioUnitGetParameter(*((AudioUnit *)v3 + 389), 0x1Du, 0, 0, (AudioUnitParameterValue *)&v374);
                                  v215 = *(float *)&v374 < 1.0 && v214;
                                  if (v214)
                                  {
                                    LODWORD(inInputBufferLists.mSampleTime) = 1065353216;
                                    if (*(float *)&v374 < 1.0)
                                      vDSP_vfill((const float *)&inInputBufferLists, *(float **)(*((_QWORD *)v3 + 501) + 16), 1, *((unsigned int *)v3 + 127));
                                    vDSP_vfill((const float *)&inInputBufferLists, *(float **)(*((_QWORD *)v3 + 499) + 16), 1, *((unsigned int *)v3 + 127));
                                  }
                                  else if ((*((_BYTE *)v3 + 4661) & 4) == 0
                                         || (*((_BYTE *)v3 + 4677) & 4) == 0
                                         || !*((_QWORD *)v3 + 389))
                                  {
                                    LODWORD(v216) = 0;
                                    goto LABEL_503;
                                  }
                                  if (*((_BYTE *)v3 + 15897) || *((_BYTE *)v3 + 15898))
                                    VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)v3, 0x61u, *((unsigned int *)v3 + 127), *((const AudioBufferList **)v3 + 428), &buf);
                                  LODWORD(v216) = 1;
LABEL_503:
                                  v217 = *((_QWORD *)v3 + 582);
                                  if ((v217 & 0x4000000000000) != 0 && (*((_BYTE *)v3 + 4678) & 4) != 0)
                                  {
                                    v218 = (OpaqueAudioComponentInstance *)*((_QWORD *)v3 + 397);
                                    if (v218)
                                    {
                                      v219 = v215;
                                      v220 = (int)v216;
                                      v363 = 512;
                                      inInputBufferLists.mSampleTime = *((Float64 *)v3 + 428);
                                      v373.mSampleTime = *((Float64 *)v3 + 429);
                                      v221 = AudioUnitProcessMultiple(v218, &v363, &buf, *((_DWORD *)v3 + 127), 1u, (const AudioBufferList **)&inInputBufferLists, 1u, (AudioBufferList **)&v373);
                                      v222 = *((_QWORD *)v3 + 2144);
                                      v225 = *(_DWORD *)(v222 + 12);
                                      v223 = v222 + 12;
                                      v224 = v225;
                                      v226 = *(void **)(v223 + 4);
                                      if ((v221
                                         || AudioUnitGetProperty(*((AudioUnit *)v3 + 397), 0x3ECu, 0, 0, *(void **)(v223 + 4), (UInt32 *)v223))&& v224 >= 4)
                                      {
                                        memset_pattern16(v226, &unk_1B6627B80, v224 & 0xFFFFFFFC);
                                      }
                                      if (*((_BYTE *)v3 + 15897) || *((_BYTE *)v3 + 15898))
                                        VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)v3, 0x72u, *((unsigned int *)v3 + 127), *((const AudioBufferList **)v3 + 428), &buf);
                                      v217 = *((_QWORD *)v3 + 582);
                                      LODWORD(v216) = v220;
                                      v215 = v219;
                                    }
                                  }
                                  v227 = (AudioBufferList *)*((_QWORD *)v3 + 500);
                                  if ((v217 & 0x20000000000000) != 0
                                    && (*((_BYTE *)v3 + 4678) & 0x20) != 0
                                    && (v228 = (OpaqueAudioComponentInstance *)*((_QWORD *)v3 + 400)) != 0)
                                  {
                                    v229 = *((_QWORD *)v3 + 499);
                                    v373.mSampleTime = *((Float64 *)v3 + 428);
                                    v373.mHostTime = v229;
                                    *(_QWORD *)&v373.mRateScalar = (char *)v3 + 16808;
                                    v230 = *((_QWORD *)v3 + 501);
                                    *(_QWORD *)&v376.mNumberBuffers = *((_QWORD *)v3 + 429);
                                    *(_QWORD *)&v376.mBuffers[0].mNumberChannels = v230;
                                    v376.mBuffers[0].mData = v227;
                                    v363 = 512;
                                    v231 = *(_OWORD *)&a2->mRateScalar;
                                    *(_OWORD *)&inInputBufferLists.mSampleTime = *(_OWORD *)&a2->mSampleTime;
                                    *(_OWORD *)&inInputBufferLists.mRateScalar = v231;
                                    v232 = *(_OWORD *)&a2->mSMPTETime.mHours;
                                    *(_OWORD *)&inInputBufferLists.mSMPTETime.mSubframes = *(_OWORD *)&a2->mSMPTETime.mSubframes;
                                    *(_OWORD *)&inInputBufferLists.mSMPTETime.mHours = v232;
                                    AudioUnitProcessMultiple(v228, &v363, &inInputBufferLists, *((_DWORD *)v3 + 127), 3u, (const AudioBufferList **)&v373, 3u, (AudioBufferList **)&v376);
                                    AudioUnitGetParameter(*((AudioUnit *)v3 + 400), 1u, 0, 0, &v364);
                                    if ((*((_BYTE *)v3 + 4664) & 2) == 0
                                      || (*((_BYTE *)v3 + 4680) & 2) == 0
                                      || !*((_QWORD *)v3 + 412))
                                    {
                                      goto LABEL_529;
                                    }
                                    v233 = (OpaqueAudioComponentInstance *)*((_QWORD *)v3 + 400);
                                    v234 = 2;
                                  }
                                  else
                                  {
                                    if ((v217 & 0x80000000000000) == 0
                                      || (*((_BYTE *)v3 + 4678) & 0x80) == 0
                                      || (v235 = (OpaqueAudioComponentInstance *)*((_QWORD *)v3 + 402)) == 0)
                                    {
                                      v240 = 1;
                                      goto LABEL_534;
                                    }
                                    AudioUnitSetParameter(v235, 0x14u, 0, 0, *((AudioUnitParameterValue *)v3 + 4172), 0);
                                    v236 = *((_QWORD *)v3 + 431);
                                    v373.mSampleTime = *((Float64 *)v3 + 428);
                                    v373.mHostTime = v236;
                                    v373.mRateScalar = *((Float64 *)v3 + 499);
                                    v373.mWordClockTime = (UInt64)v3 + 16808;
                                    v237 = *((_QWORD *)v3 + 436);
                                    *(_QWORD *)&v376.mNumberBuffers = *((_QWORD *)v3 + 429);
                                    *(_QWORD *)&v376.mBuffers[0].mNumberChannels = v237;
                                    v376.mBuffers[0].mData = (void *)*((_QWORD *)v3 + 501);
                                    v377 = v227;
                                    v238 = *(_OWORD *)&a2->mRateScalar;
                                    *(_OWORD *)&inInputBufferLists.mSampleTime = *(_OWORD *)&a2->mSampleTime;
                                    *(_OWORD *)&inInputBufferLists.mRateScalar = v238;
                                    v239 = *(_OWORD *)&a2->mSMPTETime.mHours;
                                    *(_OWORD *)&inInputBufferLists.mSMPTETime.mSubframes = *(_OWORD *)&a2->mSMPTETime.mSubframes;
                                    *(_OWORD *)&inInputBufferLists.mSMPTETime.mHours = v239;
                                    v363 = 512;
                                    AudioUnitProcessMultiple(*((AudioUnit *)v3 + 402), &v363, &inInputBufferLists, *((_DWORD *)v3 + 127), 4u, (const AudioBufferList **)&v373, 4u, (AudioBufferList **)&v376);
                                    AudioUnitGetParameter(*((AudioUnit *)v3 + 402), 2u, 0, 0, &v364);
                                    if ((*((_BYTE *)v3 + 4664) & 2) == 0
                                      || (*((_BYTE *)v3 + 4680) & 2) == 0
                                      || !*((_QWORD *)v3 + 412))
                                    {
LABEL_529:
                                      if (*((_BYTE *)v3 + 15897) || *((_BYTE *)v3 + 15898))
                                        VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)v3, 0x27u, *((unsigned int *)v3 + 127), *((const AudioBufferList **)v3 + 429), &inInputBufferLists);
                                      v240 = 0;
LABEL_534:
                                      v241 = *((_QWORD *)v3 + 582);
                                      if ((v241 & 0x200000000000000) != 0 && (*((_BYTE *)v3 + 4679) & 2) != 0)
                                      {
                                        v242 = (OpaqueAudioComponentInstance *)*((_QWORD *)v3 + 404);
                                        if (v242)
                                        {
                                          LODWORD(v354) = v240;
                                          v351 = v227;
                                          v243 = v215;
                                          v244 = (int)v216;
                                          v373.mSampleTime = *((Float64 *)v3 + 428);
                                          *(_QWORD *)&v376.mNumberBuffers = 0;
                                          v245 = *(_OWORD *)&a2->mSMPTETime.mHours;
                                          *(_OWORD *)&inInputBufferLists.mSMPTETime.mSubframes = *(_OWORD *)&a2->mSMPTETime.mSubframes;
                                          *(_OWORD *)&inInputBufferLists.mSMPTETime.mHours = v245;
                                          v246 = *(_OWORD *)&a2->mRateScalar;
                                          *(_OWORD *)&inInputBufferLists.mSampleTime = *(_OWORD *)&a2->mSampleTime;
                                          *(_OWORD *)&inInputBufferLists.mRateScalar = v246;
                                          v363 = 512;
                                          v247 = *((_QWORD *)v3 + 502);
                                          v248 = *(void **)(v247 + 16);
                                          v249 = *(_DWORD *)(v247 + 12);
                                          if ((AudioUnitProcessMultiple(v242, &v363, &inInputBufferLists, *((_DWORD *)v3 + 127), 1u, (const AudioBufferList **)&v373, 1u, (AudioBufferList **)&v376)|| AudioUnitGetProperty(*((AudioUnit *)v3 + 404), 0x13EDu, 0, 0, *(void **)(*((_QWORD *)v3 + 502) + 16), (UInt32 *)(*((_QWORD *)v3 + 502) + 12)))&& v249 >= 4)
                                          {
                                            memset_pattern16(v248, &unk_1B6627B80, v249 & 0xFFFFFFFC);
                                          }
                                          if (*((_BYTE *)v3 + 15897) || *((_BYTE *)v3 + 15898))
                                            VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)v3, 0x52u, *((unsigned int *)v3 + 127), *((const AudioBufferList **)v3 + 502), &inInputBufferLists);
                                          v241 = *((_QWORD *)v3 + 582);
                                          LODWORD(v216) = v244;
                                          v215 = v243;
                                          v227 = v351;
                                          v240 = (int)v354;
                                        }
                                      }
                                      if ((v241 & 0x100000000000000) != 0 && (*((_BYTE *)v3 + 4679) & 1) != 0)
                                      {
                                        v250 = (OpaqueAudioComponentInstance *)*((_QWORD *)v3 + 403);
                                        if (v250)
                                        {
                                          LODWORD(v354) = v240;
                                          v251 = v214;
                                          v252 = v227;
                                          v253 = v215;
                                          v254 = (int)v216;
                                          v373.mSampleTime = *((Float64 *)v3 + 428);
                                          *(_QWORD *)&v376.mNumberBuffers = 0;
                                          v363 = 512;
                                          v255 = *(_OWORD *)&a2->mSMPTETime.mHours;
                                          *(_OWORD *)&inInputBufferLists.mSMPTETime.mSubframes = *(_OWORD *)&a2->mSMPTETime.mSubframes;
                                          *(_OWORD *)&inInputBufferLists.mSMPTETime.mHours = v255;
                                          v256 = *(_OWORD *)&a2->mRateScalar;
                                          *(_OWORD *)&inInputBufferLists.mSampleTime = *(_OWORD *)&a2->mSampleTime;
                                          *(_OWORD *)&inInputBufferLists.mRateScalar = v256;
                                          v257 = *((_QWORD *)v3 + 503);
                                          v351 = *(AudioBufferList **)(v257 + 16);
                                          v258 = *(_DWORD *)(v257 + 12);
                                          if ((AudioUnitProcessMultiple(v250, &v363, &inInputBufferLists, *((_DWORD *)v3 + 127), 1u, (const AudioBufferList **)&v373, 1u, (AudioBufferList **)&v376)|| AudioUnitGetProperty(*((AudioUnit *)v3 + 403), 0x3EAu, 0, 0, *(void **)(*((_QWORD *)v3 + 503) + 16), (UInt32 *)(*((_QWORD *)v3 + 503) + 12)))&& v258 >= 4)
                                          {
                                            memset_pattern16(v351, &unk_1B6627B80, v258 & 0xFFFFFFFC);
                                          }
                                          v241 = *((_QWORD *)v3 + 582);
                                          LODWORD(v216) = v254;
                                          v215 = v253;
                                          v227 = v252;
                                          v214 = v251;
                                          v240 = (int)v354;
                                        }
                                      }
                                      if ((v241 & 0x400000000000000) != 0 && (*((_BYTE *)v3 + 4679) & 4) != 0)
                                      {
                                        if (*((_QWORD *)v3 + 405))
                                        {
                                          v259 = *(_DWORD *)(v353 + 280);
                                          if (v259)
                                          {
                                            LODWORD(v354) = v240;
                                            if (v259 == 1)
                                            {
                                              v260 = (uint64_t *)((char *)v3 + 1104);
                                              v261 = (uint64_t *)((char *)v3 + 1128);
                                            }
                                            else
                                            {
                                              v260 = (uint64_t *)((char *)v3 + 1112);
                                              v261 = (uint64_t *)((char *)v3 + 1120);
                                            }
                                            v262 = *v261;
                                            v263 = *v260;
                                            v264 = *((_QWORD *)v3 + 2142);
                                            v265 = *((unsigned int *)v3 + 127);
                                            v373.mSampleTime = *(Float64 *)(v264 + 16);
                                            v373.mHostTime = *(_QWORD *)&v373.mSampleTime + 4 * v265;
                                            v266 = (VPTimeFreqConverter *)*((_QWORD *)v3 + 2146);
                                            if (v266)
                                            {
                                              VPTimeFreqConverter::Analyze(v266, *(const float **)(v263 + 40), (DSPSplitComplex *)&v373);
                                              v264 = *((_QWORD *)v3 + 2142);
                                              v265 = *((unsigned int *)v3 + 127);
                                            }
                                            LODWORD(v351) = (_DWORD)v216;
                                            v373.mSampleTime = *(Float64 *)(v264 + 32);
                                            v373.mHostTime = *(_QWORD *)&v373.mSampleTime + 4 * v265;
                                            v267 = (VPTimeFreqConverter *)*((_QWORD *)v3 + 2147);
                                            if (v267)
                                            {
                                              VPTimeFreqConverter::Analyze(v267, *(const float **)(v262 + 40), (DSPSplitComplex *)&v373);
                                              v264 = *((_QWORD *)v3 + 2142);
                                              LODWORD(v265) = *((_DWORD *)v3 + 127);
                                            }
                                            *(_QWORD *)&v376.mNumberBuffers = v264;
                                            v379 = (AudioBufferList *)v264;
                                            v363 = 512;
                                            v268 = *(_OWORD *)&a2->mRateScalar;
                                            *(_OWORD *)&inInputBufferLists.mSampleTime = *(_OWORD *)&a2->mSampleTime;
                                            *(_OWORD *)&inInputBufferLists.mRateScalar = v268;
                                            v269 = *(_OWORD *)&a2->mSMPTETime.mHours;
                                            *(_OWORD *)&inInputBufferLists.mSMPTETime.mSubframes = *(_OWORD *)&a2->mSMPTETime.mSubframes;
                                            *(_OWORD *)&inInputBufferLists.mSMPTETime.mHours = v269;
                                            v270 = AudioUnitProcessMultiple(*((AudioUnit *)v3 + 405), &v363, &inInputBufferLists, v265, 1u, (const AudioBufferList **)&v376, 1u, &v379);
                                            if (*((_BYTE *)v3 + 15897) || *((_BYTE *)v3 + 15898))
                                              VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)v3, 0x6Du, *((unsigned int *)v3 + 127), *((const AudioBufferList **)v3 + 2142), &inInputBufferLists);
                                            v271 = *((_QWORD *)v3 + 2143);
                                            v274 = *(_DWORD *)(v271 + 12);
                                            v272 = v271 + 12;
                                            v273 = v274;
                                            v275 = *(void **)(v272 + 4);
                                            if ((v270
                                               || AudioUnitGetProperty(*((AudioUnit *)v3 + 405), 0x15FEu, 0, 0, *(void **)(v272 + 4), (UInt32 *)v272))&& v273 >= 4)
                                            {
                                              memset_pattern16(v275, &unk_1B6627B80, v273 & 0xFFFFFFFC);
                                            }
                                            LOBYTE(v216) = (_BYTE)v351;
                                            if (*((_BYTE *)v3 + 15897) || *((_BYTE *)v3 + 15898))
                                              VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)v3, 0x6Eu, *((unsigned int *)v3 + 127), *((const AudioBufferList **)v3 + 2143), &inInputBufferLists);
                                            v241 = *((_QWORD *)v3 + 582);
                                            v240 = (int)v354;
                                          }
                                        }
                                      }
                                      if ((v241 & 0x40000000000) == 0)
                                        goto LABEL_627;
                                      if ((*((_BYTE *)v3 + 4677) & 4) == 0
                                        || (v276 = (OpaqueAudioComponentInstance *)*((_QWORD *)v3 + 389)) == 0)
                                      {
LABEL_606:
                                        if ((*((_BYTE *)v3 + 4677) & 4) != 0 && *((_QWORD *)v3 + 389) && v215)
                                        {
                                          v292 = *(float **)(*((_QWORD *)v3 + 501) + 16);
                                          vDSP_vmin(*(const float **)(*((_QWORD *)v3 + 499) + 16), 1, v292, 1, v292, 1, *((unsigned int *)v3 + 127));
                                          v293 = *((_QWORD *)v3 + 582);
                                          if ((v293 & 0x200000000000000) != 0
                                            && (*((_BYTE *)v3 + 4679) & 2) != 0
                                            && *((_QWORD *)v3 + 404))
                                          {
                                            vDSP_vmin(*(const float **)(*((_QWORD *)v3 + 502) + 16), 1, v292, 1, v292, 1, *((unsigned int *)v3 + 127));
                                            v293 = *((_QWORD *)v3 + 582);
                                          }
                                          if ((v293 & 0x100000000000000) != 0
                                            && (*((_BYTE *)v3 + 4679) & 1) != 0
                                            && *((_QWORD *)v3 + 403))
                                          {
                                            vDSP_vmin(*(const float **)(*((_QWORD *)v3 + 503) + 16), 1, v292, 1, v292, 1, *((unsigned int *)v3 + 127));
                                            v293 = *((_QWORD *)v3 + 582);
                                          }
                                          if ((v293 & 0x400000000000000) != 0
                                            && (*((_BYTE *)v3 + 4679) & 4) != 0
                                            && *((_QWORD *)v3 + 405))
                                          {
                                            vDSP_vmin(*(const float **)(*((_QWORD *)v3 + 2143) + 16), 1, v292, 1, v292, 1, *((unsigned int *)v3 + 127));
                                            v293 = *((_QWORD *)v3 + 582);
                                          }
                                          v294 = (char)v216;
                                          if ((v293 & 0x4000000000000) != 0
                                            && (*((_BYTE *)v3 + 4678) & 4) != 0
                                            && *((_QWORD *)v3 + 397))
                                          {
                                            vDSP_vmin(*(const float **)(*((_QWORD *)v3 + 2144) + 16), 1, v292, 1, v292, 1, *((unsigned int *)v3 + 127));
                                          }
                                          v216 = *(const float **)(*((_QWORD *)v3 + 428) + 16);
                                          v295 = *(float **)(*((_QWORD *)v3 + 429) + 16);
                                          vDSP_vmul(v216, 1, v292, 1, v295, 1, *((unsigned int *)v3 + 127));
                                          vDSP_vmul(&v216[*((unsigned int *)v3 + 127) + 1], 1, v292 + 1, 1, &v295[*((unsigned int *)v3 + 127) + 1], 1, (*((_DWORD *)v3 + 127) - 1));
                                          v216[*((unsigned int *)v3 + 127)] = v216[*((unsigned int *)v3 + 127)]
                                                                            * v292[*((_DWORD *)v3 + 127) - 1];
                                          LOBYTE(v216) = v294;
LABEL_630:
                                          if (((v216 & 1) != 0
                                             || (*((_BYTE *)v3 + 4661) & 4) != 0
                                             && (*((_BYTE *)v3 + 4677) & 4) != 0
                                             && *((_QWORD *)v3 + 389))
                                            && (*((_BYTE *)v3 + 15897) || *((_BYTE *)v3 + 15898)))
                                          {
                                            VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)v3, 0x60u, *((unsigned int *)v3 + 127), *((const AudioBufferList **)v3 + 429), &buf);
                                          }
                                          if ((*((_BYTE *)v3 + 4663) & 0x10) != 0
                                            && (*((_BYTE *)v3 + 4679) & 0x10) != 0)
                                          {
                                            v298 = (OpaqueAudioComponentInstance *)*((_QWORD *)v3 + 407);
                                            if (v298)
                                            {
                                              if (*((_DWORD *)v3 + 3098) == 13)
                                              {
                                                v299 = (AudioUnitParameterValue *)*((_QWORD *)v3 + 2157);
                                                *v299 = v364;
                                                v300 = *(_DWORD *)(v353 + 184);
                                                v301 = *((_DWORD *)v3 + 127);
                                                v302 = v300 % v301;
                                                v303 = vcvtms_u32_f32((float)v300 / (float)v301);
                                                if (v302)
                                                  v304 = (float)((float)((float)v302 / (float)v301) * v299[v303 + 1])
                                                       + (float)((float)(1.0 - (float)((float)v302 / (float)v301))
                                                               * v299[v303]);
                                                else
                                                  v304 = v299[v303];
                                                v364 = v304;
                                                memmove(v299 + 1, v299, *((_QWORD *)v3 + 2158) - (_QWORD)v299 - 4);
                                                v298 = (OpaqueAudioComponentInstance *)*((_QWORD *)v3 + 407);
                                              }
                                              AudioUnitSetParameter(v298, 0, 0, 0, *((AudioUnitParameterValue *)v3 + 3117), 0);
                                              AudioUnitSetParameter(*((AudioUnit *)v3 + 407), 4u, 0, 0, *((AudioUnitParameterValue *)v3 + 1046), 0);
                                              AudioUnitSetParameter(*((AudioUnit *)v3 + 407), 0x13u, 0, 0, *((AudioUnitParameterValue *)v3 + 1050), 0);
                                              AudioUnitSetParameter(*((AudioUnit *)v3 + 407), 3u, 0, 0, v364, 0);
                                              AudioUnitSetParameter(*((AudioUnit *)v3 + 407), 0xEu, 0, 0, (float)*((int *)v3 + 576), 0);
                                              if (*((_DWORD *)v3 + 3098) == 13)
                                              {
                                                v305 = *((_QWORD *)v3 + 510);
                                                v373.mSampleTime = *((Float64 *)v3 + 418);
                                                v373.mHostTime = v305;
                                                v306 = *((_QWORD *)v3 + 432);
                                                v373.mRateScalar = *((Float64 *)v3 + 2155);
                                                v373.mWordClockTime = v306;
                                                *(_QWORD *)&v373.mSMPTETime.mSubframes = 0;
                                                *(_QWORD *)&v373.mSMPTETime.mType = *((_QWORD *)v3 + 2154);
                                                *(_QWORD *)&v376.mNumberBuffers = 0;
                                                v363 = 512;
                                                v307 = *(_OWORD *)&a2->mRateScalar;
                                                *(_OWORD *)&inInputBufferLists.mSampleTime = *(_OWORD *)&a2->mSampleTime;
                                                *(_OWORD *)&inInputBufferLists.mRateScalar = v307;
                                                v308 = *(_OWORD *)&a2->mSMPTETime.mHours;
                                                *(_OWORD *)&inInputBufferLists.mSMPTETime.mSubframes = *(_OWORD *)&a2->mSMPTETime.mSubframes;
                                                *(_OWORD *)&inInputBufferLists.mSMPTETime.mHours = v308;
                                                AudioUnitProcessMultiple(*((AudioUnit *)v3 + 407), &v363, &inInputBufferLists, *((_DWORD *)v3 + 127), 6u, (const AudioBufferList **)&v373, 1u, (AudioBufferList **)&v376);
                                                LODWORD(v379) = 0;
                                                LODWORD(v369) = 4;
                                                AudioUnitGetProperty(*((AudioUnit *)v3 + 407), 0x15u, 0, 0, &v379, (UInt32 *)&v369);
                                                if (!(_DWORD)v379)
                                                {
                                                  LODWORD(v367) = 0;
                                                  AudioUnitGetParameter(*((AudioUnit *)v3 + 407), 0xBu, 0, 0, (AudioUnitParameterValue *)&v367);
                                                  vDSP_vsmul(*(const float **)(*((_QWORD *)v3 + 136) + 16), 1, (const float *)&v367, *(float **)(*((_QWORD *)v3 + 136) + 16), 1, *((unsigned int *)v3 + 127));
                                                }
                                              }
                                              else
                                              {
                                                v309 = *((_QWORD *)v3 + 510);
                                                v373.mSampleTime = *((Float64 *)v3 + 418);
                                                v373.mHostTime = v309;
                                                v310 = *((_QWORD *)v3 + 509);
                                                v373.mRateScalar = *((Float64 *)v3 + 429);
                                                v373.mWordClockTime = v310;
                                                *(_QWORD *)&v373.mSMPTETime.mSubframes = *((_QWORD *)v3 + 499);
                                                *(_QWORD *)&v373.mSMPTETime.mType = *((_QWORD *)v3 + 501);
                                                *(_QWORD *)&v376.mNumberBuffers = *((_QWORD *)v3 + 136);
                                                v363 = 512;
                                                v311 = *(_OWORD *)&a2->mRateScalar;
                                                *(_OWORD *)&inInputBufferLists.mSampleTime = *(_OWORD *)&a2->mSampleTime;
                                                *(_OWORD *)&inInputBufferLists.mRateScalar = v311;
                                                v312 = *(_OWORD *)&a2->mSMPTETime.mHours;
                                                *(_OWORD *)&inInputBufferLists.mSMPTETime.mSubframes = *(_OWORD *)&a2->mSMPTETime.mSubframes;
                                                *(_OWORD *)&inInputBufferLists.mSMPTETime.mHours = v312;
                                                AudioUnitProcessMultiple(*((AudioUnit *)v3 + 407), &v363, &inInputBufferLists, *((_DWORD *)v3 + 127), 6u, (const AudioBufferList **)&v373, 1u, (AudioBufferList **)&v376);
                                              }
                                              LODWORD(inInputBufferLists.mSampleTime) = 0;
                                              AudioUnitGetParameter(*((AudioUnit *)v3 + 407), 1u, 0, 0, (AudioUnitParameterValue *)&inInputBufferLists);
                                              *((_DWORD *)v3 + 3118) = LODWORD(inInputBufferLists.mSampleTime);
                                              if ((*((_BYTE *)v3 + 4664) & 2) != 0
                                                && (*((_BYTE *)v3 + 4680) & 2) != 0
                                                && *((_QWORD *)v3 + 412))
                                              {
                                                AudioUnitGetParameter(*((AudioUnit *)v3 + 407), 2u, 0, 0, &v364);
                                                AudioUnitSetParameter(*((AudioUnit *)v3 + 412), 0x23u, 0, 0, v364, 0);
                                              }
                                            }
                                          }
                                          goto LABEL_654;
                                        }
                                        if ((*((_BYTE *)v3 + 4677) & 4) != 0)
                                        {
                                          v296 = *((_QWORD *)v3 + 389) != 0;
LABEL_628:
                                          if (!v296 && !v214)
                                          {
                                            LODWORD(inInputBufferLists.mSampleTime) = 1065353216;
                                            v297 = *((_DWORD *)v3 + 127);
                                            vDSP_vfill((const float *)&inInputBufferLists, *(float **)(*((_QWORD *)v3 + 501) + 16), 1, v297);
                                            memcpy(*(void **)(*((_QWORD *)v3 + 429) + 16), *(const void **)(*((_QWORD *)v3 + 428) + 16), 8 * v297);
                                          }
                                          goto LABEL_630;
                                        }
LABEL_627:
                                        v296 = 0;
                                        goto LABEL_628;
                                      }
                                      AudioUnitSetParameter(v276, 6u, 0, 0, *((AudioUnitParameterValue *)v3 + 1054), 0);
                                      AudioUnitSetParameter(*((AudioUnit *)v3 + 389), 7u, 0, 0, *((AudioUnitParameterValue *)v3 + 1058), 0);
                                      AudioUnitSetParameter(*((AudioUnit *)v3 + 389), 0xDu, 0, 0, *((AudioUnitParameterValue *)v3 + 1062), 0);
                                      v277 = *((_QWORD *)v3 + 432);
                                      v373.mSampleTime = *((Float64 *)v3 + 428);
                                      v373.mHostTime = v277;
                                      v278 = *((_QWORD *)v3 + 501);
                                      v373.mRateScalar = *((Float64 *)v3 + 511);
                                      v373.mWordClockTime = v278;
                                      *(_QWORD *)&v373.mSMPTETime.mSubframes = v227;
                                      *(_QWORD *)&v373.mSMPTETime.mType = 0;
                                      if (!v215)
                                        v373.mWordClockTime = 0;
                                      v279 = *((_QWORD *)v3 + 509);
                                      *(_QWORD *)&v376.mNumberBuffers = 0;
                                      *(_QWORD *)&v376.mBuffers[0].mNumberChannels = v279;
                                      v376.mBuffers[0].mData = 0;
                                      v280 = *((_QWORD *)v3 + 582);
                                      if ((v280 & 0x2000000) != 0
                                        && (v281 = *((_QWORD *)v3 + 584), (v281 & 0x2000000) != 0)
                                        && (v283 = (OpaqueAudioComponentInstance *)*((_QWORD *)v3 + 372)) != 0
                                        && (v280 & v281 & 0x200000) != 0
                                        && *((_QWORD *)v3 + 368))
                                      {
                                        v282 = v240;
                                        LODWORD(inInputBufferLists.mSampleTime) = 0;
                                        *(_QWORD *)&v373.mSMPTETime.mType = *((_QWORD *)v3 + 507);
                                        AudioUnitGetParameter(v283, 0x2Du, 0, 0, (AudioUnitParameterValue *)&inInputBufferLists);
                                        AudioUnitSetParameter(*((AudioUnit *)v3 + 389), 0x2Au, 0, 0, *(AudioUnitParameterValue *)&inInputBufferLists.mSampleTime, 0);
                                        AudioUnitGetParameter(*((AudioUnit *)v3 + 368), 0x2Du, 0, 0, (AudioUnitParameterValue *)&inInputBufferLists);
                                        AudioUnitSetParameter(*((AudioUnit *)v3 + 389), 0x29u, 0, 0, *(AudioUnitParameterValue *)&inInputBufferLists.mSampleTime, 0);
                                      }
                                      else
                                      {
                                        v282 = v240;
                                        if ((v280 & 0x800000) != 0
                                          && (*((_BYTE *)v3 + 4674) & 0x80) != 0
                                          && *((_QWORD *)v3 + 370)
                                          && v357 == 1.0)
                                        {
                                          *(_QWORD *)&v373.mSMPTETime.mType = *((_QWORD *)v3 + 2131);
                                        }
                                      }
                                      v284 = 4008;
                                      if (v215)
                                        v284 = 3992;
                                      v285 = *(void **)((char *)v3 + v284);
                                      if (v215)
                                        v286 = 3448;
                                      else
                                        v286 = 3432;
                                      *(_QWORD *)&v376.mNumberBuffers = *(_QWORD *)((char *)v3 + v286);
                                      v376.mBuffers[0].mData = v285;
                                      v287 = *(_OWORD *)&a2->mRateScalar;
                                      *(_OWORD *)&inInputBufferLists.mSampleTime = *(_OWORD *)&a2->mSampleTime;
                                      *(_OWORD *)&inInputBufferLists.mRateScalar = v287;
                                      v288 = *(_OWORD *)&a2->mSMPTETime.mHours;
                                      *(_OWORD *)&inInputBufferLists.mSMPTETime.mSubframes = *(_OWORD *)&a2->mSMPTETime.mSubframes;
                                      *(_OWORD *)&inInputBufferLists.mSMPTETime.mHours = v288;
                                      v363 = 512;
                                      AudioUnitProcessMultiple(*((AudioUnit *)v3 + 389), &v363, &inInputBufferLists, *((_DWORD *)v3 + 127), 6u, (const AudioBufferList **)&v373, 3u, (AudioBufferList **)&v376);
                                      if ((v282 | !v215) == 1)
                                        AudioUnitGetParameter(*((AudioUnit *)v3 + 389), 0x20u, 0, 0, &v364);
                                      v289 = *((unsigned int *)v3 + 127);
                                      if (*((_BYTE *)v3 + 15897) || *((_BYTE *)v3 + 15898))
                                      {
                                        VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)v3, 0x24u, v289, *(const AudioBufferList **)((char *)v3 + v286), &inInputBufferLists);
                                        v289 = *((unsigned int *)v3 + 127);
                                        v290 = (const AudioBufferList *)*((_QWORD *)v3 + 499);
                                        if (*((_BYTE *)v3 + 15897))
                                        {
LABEL_604:
                                          VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)v3, 0x4Fu, v289, v290, &inInputBufferLists);
LABEL_605:
                                          if ((*((_BYTE *)v3 + 4661) & 4) == 0)
                                            goto LABEL_627;
                                          goto LABEL_606;
                                        }
                                      }
                                      else
                                      {
                                        v290 = (const AudioBufferList *)*((_QWORD *)v3 + 499);
                                      }
                                      if (!*((_BYTE *)v3 + 15898))
                                        goto LABEL_605;
                                      goto LABEL_604;
                                    }
                                    v233 = (OpaqueAudioComponentInstance *)*((_QWORD *)v3 + 402);
                                    v234 = 9;
                                  }
                                  AudioUnitGetParameter(v233, v234, 0, 0, (AudioUnitParameterValue *)&v371);
                                  AudioUnitSetParameter(*((AudioUnit *)v3 + 412), 0x12u, 0, 0, *(AudioUnitParameterValue *)&v371, 0);
                                  goto LABEL_529;
                                }
                                LODWORD(v379) = 1092616192;
                                if ((v197 & v198 & 0x80000000000000) != 0)
                                {
                                  v196 = (OpaqueAudioComponentInstance *)*((_QWORD *)v3 + 402);
                                  if (v196)
                                  {
                                    v196 = (OpaqueAudioComponentInstance *)AudioUnitGetParameter(v196, 9u, 0, 0, (AudioUnitParameterValue *)&v379);
                                    v197 = *((_QWORD *)v3 + 582);
                                  }
                                }
                                if ((v197 & 0x80000000) != 0
                                  && (*((_BYTE *)v3 + 4675) & 0x80) != 0
                                  && *((_QWORD *)v3 + 378))
                                {
                                  LODWORD(inInputBufferLists.mSampleTime) = 0;
                                  LODWORD(v373.mSampleTime) = 0;
                                  v376.mNumberBuffers = 0;
                                  AudioUnitGetParameter(*((AudioUnit *)v3 + 379), 0x18u, 0, 0, (AudioUnitParameterValue *)&inInputBufferLists);
                                  AudioUnitGetParameter(*((AudioUnit *)v3 + 379), 0x19u, 0, 0, (AudioUnitParameterValue *)&v373);
                                  AudioUnitGetParameter(*((AudioUnit *)v3 + 379), 5u, 0, 0, (AudioUnitParameterValue *)&v376.mNumberBuffers);
                                  AudioUnitSetParameter(*((AudioUnit *)v3 + 392), 3u, 0, 0, *(AudioUnitParameterValue *)&inInputBufferLists.mSampleTime, 0);
                                  AudioUnitSetParameter(*((AudioUnit *)v3 + 392), 4u, 0, 0, *(AudioUnitParameterValue *)&v373.mSampleTime, 0);
                                  AudioUnitSetParameter(*((AudioUnit *)v3 + 392), 5u, 0, 0, *(AudioUnitParameterValue *)&v376.mNumberBuffers, 0);
                                  v196 = (OpaqueAudioComponentInstance *)AudioUnitSetParameter(*((AudioUnit *)v3 + 392), 6u, 0, 0, *(AudioUnitParameterValue *)&v379, 0);
                                }
                                MEMORY[0x1E0C80A78](v196);
                                v341 = 0;
                                *((_OWORD *)&v342 - 3) = 0u;
                                *((_OWORD *)&v342 - 2) = 0u;
                                *((_DWORD *)&v342 - 12) = 2;
                                v199 = *((_QWORD *)v3 + 428);
                                *(&v342 - 4) = *(AudioUnitParameterValue **)(v199 + 16);
                                *(&v342 - 5) = *(AudioUnitParameterValue **)(v199 + 8);
                                v200 = *((_QWORD *)v3 + 431);
                                v341 = *(_QWORD *)(v200 + 16);
                                *(&v342 - 3) = *(AudioUnitParameterValue **)(v200 + 8);
                                *(double *)&v202 = MEMORY[0x1E0C80A78](v201);
                                *((_OWORD *)&v342 - 3) = v202;
                                *((_OWORD *)&v342 - 2) = v202;
                                *((_DWORD *)&v342 - 12) = v203;
                                MEMORY[0x1E0C80A78](v204);
                                *(&v342 - 3) = 0;
                                v341 = 0;
                                *(&v342 - 4) = 0;
                                *((_DWORD *)&v342 - 8) = 1;
                                v205 = *((_QWORD *)v3 + 432);
                                *(_QWORD *)(v206 - 32) = *(_QWORD *)(v205 + 16);
                                *(_QWORD *)(v206 - 40) = *(_QWORD *)(v205 + 8);
                                v207 = *((_QWORD *)v3 + 504);
                                *(_QWORD *)(v206 - 16) = *(_QWORD *)(v207 + 32);
                                *(_QWORD *)(v206 - 24) = *(_QWORD *)(v207 + 24);
                                v341 = *(_QWORD *)(v205 + 16);
                                *(&v342 - 3) = *(AudioUnitParameterValue **)(v205 + 8);
                                v373.mSampleTime = v208;
                                v373.mHostTime = v209;
                                *(Float64 *)&v376.mNumberBuffers = v208;
                                *(_QWORD *)&v376.mBuffers[0].mNumberChannels = &v342 - 4;
                                v210 = *(_OWORD *)&a2->mRateScalar;
                                *(_OWORD *)&inInputBufferLists.mSampleTime = *(_OWORD *)&a2->mSampleTime;
                                *(_OWORD *)&inInputBufferLists.mRateScalar = v210;
                                v211 = *(_OWORD *)&a2->mSMPTETime.mHours;
                                *(_OWORD *)&inInputBufferLists.mSMPTETime.mSubframes = *(_OWORD *)&a2->mSMPTETime.mSubframes;
                                *(_OWORD *)&inInputBufferLists.mSMPTETime.mHours = v211;
                                v363 = 512;
                                AudioUnitProcessMultiple(*((AudioUnit *)v3 + 392), &v363, &inInputBufferLists, *((_DWORD *)v3 + 127), 2u, (const AudioBufferList **)&v373, 2u, (AudioBufferList **)&v376);
                                v212 = *((unsigned int *)v3 + 127);
                                if (*((_BYTE *)v3 + 15897) || *((_BYTE *)v3 + 15898))
                                {
                                  VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)v3, 0x81u, v212, *((const AudioBufferList **)v3 + 428), &inInputBufferLists);
                                  v212 = *((unsigned int *)v3 + 127);
                                  v213 = (const AudioBufferList *)*((_QWORD *)v3 + 431);
                                  if (*((_BYTE *)v3 + 15897))
                                    goto LABEL_478;
                                }
                                else
                                {
                                  v213 = (const AudioBufferList *)*((_QWORD *)v3 + 431);
                                }
                                if (!*((_BYTE *)v3 + 15898))
                                {
LABEL_479:
                                  v197 = *((_QWORD *)v3 + 582);
                                  goto LABEL_480;
                                }
LABEL_478:
                                VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)v3, 0x82u, v212, v213, &inInputBufferLists);
                                goto LABEL_479;
                              }
                              v351 = v174;
                              v347 = v143;
                              v348 = v142;
                              v349 = v139;
                              LODWORD(v350) = v140;
                              v190 = 0;
                              v191 = (AudioBufferList *)*((_QWORD *)v3 + 523);
                              v343 = (AudioUnitParameterValue *)((char *)v3 + 4184);
                              v374 = v191;
                              LODWORD(v375) = *((_DWORD *)v3 + 1049);
                              v344 = (AudioUnitParameterValue *)((char *)v3 + 4200);
                              v371 = (const AudioBufferList *)*((_QWORD *)v3 + 525);
                              v372 = *((_DWORD *)v3 + 1053);
                              v345 = (AudioUnitParameterValue *)((char *)v3 + 4216);
                              v369 = *((_QWORD *)v3 + 527);
                              v370 = *((_DWORD *)v3 + 1057);
                              v346 = (AudioUnitParameterValue *)((char *)v3 + 4232);
                              v367 = *((_QWORD *)v3 + 529);
                              v368 = *((_DWORD *)v3 + 1061);
                              v342 = (AudioUnitParameterValue *)((char *)v3 + 4248);
                              v365 = *((_QWORD *)v3 + 531);
                              v366 = *((_DWORD *)v3 + 1065);
                              do
                              {
                                AudioUnitSetParameter(*((AudioUnit *)v3 + 383), 0x64u, 4u, v190, *((AudioUnitParameterValue *)&v374 + v190), 0);
                                AudioUnitSetParameter(*((AudioUnit *)v3 + 383), 0x65u, 4u, v190, *((AudioUnitParameterValue *)&v371 + v190), 0);
                                AudioUnitSetParameter(*((AudioUnit *)v3 + 383), 0x66u, 4u, v190, *((AudioUnitParameterValue *)&v369 + v190), 0);
                                AudioUnitSetParameter(*((AudioUnit *)v3 + 383), 0x67u, 4u, v190, *((AudioUnitParameterValue *)&v367 + v190), 0);
                                AudioUnitSetParameter(*((AudioUnit *)v3 + 383), 0x68u, 4u, v190, *((AudioUnitParameterValue *)&v365 + v190), 0);
                                ++v190;
                              }
                              while (v190 != 3);
                              *(_QWORD *)&v376.mNumberBuffers = 1;
                              *(_QWORD *)&v376.mBuffers[0].mNumberChannels = 0;
                              v376.mBuffers[0].mData = 0;
                              v376.mBuffers[0] = *(AudioBuffer *)(*((_QWORD *)v3 + 504) + 8);
                              v379 = v351;
                              v380 = (const AudioBufferList *)v354;
                              v373.mSampleTime = *((Float64 *)v3 + 428);
                              v373.mHostTime = (UInt64)&v376;
                              v373.mRateScalar = 0.0;
                              v373.mWordClockTime = 0;
                              v363 = 512;
                              v192 = *(_OWORD *)&a2->mRateScalar;
                              *(_OWORD *)&inInputBufferLists.mSampleTime = *(_OWORD *)&a2->mSampleTime;
                              *(_OWORD *)&inInputBufferLists.mRateScalar = v192;
                              v193 = *(_OWORD *)&a2->mSMPTETime.mHours;
                              *(_OWORD *)&inInputBufferLists.mSMPTETime.mSubframes = *(_OWORD *)&a2->mSMPTETime.mSubframes;
                              *(_OWORD *)&inInputBufferLists.mSMPTETime.mHours = v193;
                              AudioUnitProcessMultiple(*((AudioUnit *)v3 + 383), &v363, &inInputBufferLists, *((_DWORD *)v3 + 127), 2u, (const AudioBufferList **)&v379, 4u, (AudioBufferList **)&v373);
                              v355 = 0.0;
                              AudioUnitGetParameter(*((AudioUnit *)v3 + 383), 0xAu, 0, 0, &v355);
                              v194 = *((unsigned int *)v3 + 127);
                              if (*((_BYTE *)v3 + 15897) || *((_BYTE *)v3 + 15898))
                              {
                                VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)v3, 0x64u, v194, *((const AudioBufferList **)v3 + 428), &inInputBufferLists);
                                v194 = *((unsigned int *)v3 + 127);
                                v139 = v349;
                                v140 = (int)v350;
                                v143 = v347;
                                v142 = v348;
                                v195 = v342;
                                if (*((_BYTE *)v3 + 15897))
                                  goto LABEL_448;
                              }
                              else
                              {
                                v139 = v349;
                                v140 = (int)v350;
                                v143 = v347;
                                v142 = v348;
                                v195 = v342;
                              }
                              if (!*((_BYTE *)v3 + 15898))
                              {
LABEL_449:
                                AudioUnitGetParameter(*((AudioUnit *)v3 + 383), 0x64u, 4u, 0, v343);
                                AudioUnitGetParameter(*((AudioUnit *)v3 + 383), 0x65u, 4u, 0, v344);
                                AudioUnitGetParameter(*((AudioUnit *)v3 + 383), 0x66u, 4u, 0, v345);
                                AudioUnitGetParameter(*((AudioUnit *)v3 + 383), 0x67u, 4u, 0, v346);
                                AudioUnitGetParameter(*((AudioUnit *)v3 + 383), 0x68u, 4u, 0, v195);
                                goto LABEL_450;
                              }
LABEL_448:
                              VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)v3, 0x65u, v194, &v376, &inInputBufferLists);
                              goto LABEL_449;
                            }
                            v351 = v174;
                            v347 = v143;
                            v348 = v142;
                            v349 = v139;
                            LODWORD(v350) = v140;
                            v186 = 0;
                            v379 = (AudioBufferList *)*((_QWORD *)v3 + 523);
                            LODWORD(v380) = *((_DWORD *)v3 + 1049);
                            v374 = (AudioBufferList *)*((_QWORD *)v3 + 525);
                            LODWORD(v375) = *((_DWORD *)v3 + 1053);
                            v371 = (const AudioBufferList *)*((_QWORD *)v3 + 527);
                            v372 = *((_DWORD *)v3 + 1057);
                            v369 = *((_QWORD *)v3 + 529);
                            v370 = *((_DWORD *)v3 + 1061);
                            v367 = *((_QWORD *)v3 + 531);
                            v368 = *((_DWORD *)v3 + 1065);
                            do
                            {
                              AudioUnitSetParameter(*((AudioUnit *)v3 + 381), 0x12u, 4u, v186, *((AudioUnitParameterValue *)&v379 + v186), 0);
                              AudioUnitSetParameter(*((AudioUnit *)v3 + 381), 0x13u, 4u, v186, *((AudioUnitParameterValue *)&v374 + v186), 0);
                              AudioUnitSetParameter(*((AudioUnit *)v3 + 381), 0x14u, 4u, v186, *((AudioUnitParameterValue *)&v371 + v186), 0);
                              AudioUnitSetParameter(*((AudioUnit *)v3 + 381), 0x15u, 4u, v186, *((AudioUnitParameterValue *)&v369 + v186), 0);
                              AudioUnitSetParameter(*((AudioUnit *)v3 + 381), 0x16u, 4u, v186, *((AudioUnitParameterValue *)&v367 + v186), 0);
                              ++v186;
                            }
                            while (v186 != 3);
                            v174 = v351;
                            *(_QWORD *)&v373.mSampleTime = v351;
                            v373.mHostTime = (UInt64)v354;
                            *(_QWORD *)&v376.mNumberBuffers = v351;
                            *(_QWORD *)&v376.mBuffers[0].mNumberChannels = v354;
                            v363 = 512;
                            v187 = *(_OWORD *)&a2->mRateScalar;
                            *(_OWORD *)&inInputBufferLists.mSampleTime = *(_OWORD *)&a2->mSampleTime;
                            *(_OWORD *)&inInputBufferLists.mRateScalar = v187;
                            v188 = *(_OWORD *)&a2->mSMPTETime.mHours;
                            *(_OWORD *)&inInputBufferLists.mSMPTETime.mSubframes = *(_OWORD *)&a2->mSMPTETime.mSubframes;
                            *(_OWORD *)&inInputBufferLists.mSMPTETime.mHours = v188;
                            AudioUnitProcessMultiple(*((AudioUnit *)v3 + 381), &v363, &inInputBufferLists, *((_DWORD *)v3 + 127), 2u, (const AudioBufferList **)&v373, 2u, (AudioBufferList **)&v376);
                            v189 = *((unsigned int *)v3 + 127);
                            if (*((_BYTE *)v3 + 15897) || *((_BYTE *)v3 + 15898))
                            {
                              VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)v3, 0x6Bu, v189, v174, &inInputBufferLists);
                              v189 = *((unsigned int *)v3 + 127);
                              v139 = v349;
                              v140 = (int)v350;
                              v143 = v347;
                              v142 = v348;
                              if (*((_BYTE *)v3 + 15897))
                                goto LABEL_435;
                            }
                            else
                            {
                              v139 = v349;
                              v140 = (int)v350;
                              v143 = v347;
                              v142 = v348;
                            }
                            if (!*((_BYTE *)v3 + 15898))
                            {
LABEL_436:
                              v179 = *((_QWORD *)v3 + 582);
                              goto LABEL_437;
                            }
LABEL_435:
                            VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)v3, 0x6Cu, v189, (const AudioBufferList *)v354, &inInputBufferLists);
                            goto LABEL_436;
                          }
                          v351 = (AudioBufferList *)(&v342 - 8);
                          v347 = v143;
                          v348 = v142;
                          v349 = v139;
                          LODWORD(v350) = v140;
                          v182 = 0;
                          v379 = (AudioBufferList *)*((_QWORD *)v3 + 523);
                          LODWORD(v380) = *((_DWORD *)v3 + 1049);
                          v374 = (AudioBufferList *)*((_QWORD *)v3 + 525);
                          LODWORD(v375) = *((_DWORD *)v3 + 1053);
                          v371 = (const AudioBufferList *)*((_QWORD *)v3 + 527);
                          v372 = *((_DWORD *)v3 + 1057);
                          v369 = *((_QWORD *)v3 + 529);
                          v370 = *((_DWORD *)v3 + 1061);
                          v367 = *((_QWORD *)v3 + 531);
                          v368 = *((_DWORD *)v3 + 1065);
                          do
                          {
                            AudioUnitSetParameter(*((AudioUnit *)v3 + 380), 9u, 4u, v182, *((AudioUnitParameterValue *)&v379 + v182), 0);
                            AudioUnitSetParameter(*((AudioUnit *)v3 + 380), 0xAu, 4u, v182, *((AudioUnitParameterValue *)&v374 + v182), 0);
                            AudioUnitSetParameter(*((AudioUnit *)v3 + 380), 0xBu, 4u, v182, *((AudioUnitParameterValue *)&v371 + v182), 0);
                            AudioUnitSetParameter(*((AudioUnit *)v3 + 380), 0xCu, 4u, v182, *((AudioUnitParameterValue *)&v369 + v182), 0);
                            AudioUnitSetParameter(*((AudioUnit *)v3 + 380), 0xDu, 4u, v182, *((AudioUnitParameterValue *)&v367 + v182), 0);
                            ++v182;
                          }
                          while (v182 != 3);
                          v174 = v351;
                          *(_QWORD *)&v373.mSampleTime = v351;
                          v373.mHostTime = (UInt64)v354;
                          *(_QWORD *)&v376.mNumberBuffers = v351;
                          *(_QWORD *)&v376.mBuffers[0].mNumberChannels = v354;
                          v363 = 512;
                          v183 = *(_OWORD *)&a2->mRateScalar;
                          *(_OWORD *)&inInputBufferLists.mSampleTime = *(_OWORD *)&a2->mSampleTime;
                          *(_OWORD *)&inInputBufferLists.mRateScalar = v183;
                          v184 = *(_OWORD *)&a2->mSMPTETime.mHours;
                          *(_OWORD *)&inInputBufferLists.mSMPTETime.mSubframes = *(_OWORD *)&a2->mSMPTETime.mSubframes;
                          *(_OWORD *)&inInputBufferLists.mSMPTETime.mHours = v184;
                          AudioUnitProcessMultiple(*((AudioUnit *)v3 + 380), &v363, &inInputBufferLists, *((_DWORD *)v3 + 127), 2u, (const AudioBufferList **)&v373, 2u, (AudioBufferList **)&v376);
                          v185 = *((unsigned int *)v3 + 127);
                          if (*((_BYTE *)v3 + 15897) || *((_BYTE *)v3 + 15898))
                          {
                            VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)v3, 0x69u, v185, v174, &inInputBufferLists);
                            v185 = *((unsigned int *)v3 + 127);
                            v139 = v349;
                            v140 = (int)v350;
                            v143 = v347;
                            v142 = v348;
                            if (*((_BYTE *)v3 + 15897))
                              goto LABEL_422;
                          }
                          else
                          {
                            v139 = v349;
                            v140 = (int)v350;
                            v143 = v347;
                            v142 = v348;
                          }
                          if (!*((_BYTE *)v3 + 15898))
                          {
LABEL_423:
                            v179 = *((_QWORD *)v3 + 582);
                            goto LABEL_424;
                          }
LABEL_422:
                          VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)v3, 0x6Au, v185, (const AudioBufferList *)v354, &inInputBufferLists);
                          goto LABEL_423;
                        }
                        if ((v130 & 0x80000000) == 0 || (*((_BYTE *)v3 + 4675) & 0x80) == 0 || !*((_QWORD *)v3 + 378))
                          goto LABEL_401;
                        memcpy(*(void **)(*((_QWORD *)v3 + 434) + 16), *(const void **)(*((_QWORD *)v3 + 428) + 16), 8 * *((unsigned int *)v3 + 127));
                        memcpy(*(void **)(*((_QWORD *)v3 + 434) + 32), *(const void **)(*((_QWORD *)v3 + 506) + 16), 8 * *((unsigned int *)v3 + 127));
                        v371 = (const AudioBufferList *)*((_QWORD *)v3 + 434);
                        v163 = (const AudioBufferList *)*((_QWORD *)v3 + 433);
                        v379 = (AudioBufferList *)*((_QWORD *)v3 + 429);
                        v380 = v163;
                        v164 = *(_OWORD *)&a2->mRateScalar;
                        *(_OWORD *)&inInputBufferLists.mSampleTime = *(_OWORD *)&a2->mSampleTime;
                        *(_OWORD *)&inInputBufferLists.mRateScalar = v164;
                        v165 = *(_OWORD *)&a2->mSMPTETime.mHours;
                        *(_OWORD *)&inInputBufferLists.mSMPTETime.mSubframes = *(_OWORD *)&a2->mSMPTETime.mSubframes;
                        *(_OWORD *)&inInputBufferLists.mSMPTETime.mHours = v165;
                        Parameter = AudioUnitProcessMultiple(*((AudioUnit *)v3 + 378), &v363, &inInputBufferLists, *((_DWORD *)v3 + 127), 1u, &v371, 2u, &v379);
                        v166 = *((unsigned int *)v3 + 127);
                        if (*((_BYTE *)v3 + 15897) || *((_BYTE *)v3 + 15898))
                        {
                          Parameter = VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)v3, 0x18u, v166, v379, &inInputBufferLists);
                          v166 = *((unsigned int *)v3 + 127);
                          v167 = v380;
                          if (*((_BYTE *)v3 + 15897))
                            goto LABEL_386;
                        }
                        else
                        {
                          v167 = v380;
                        }
                        if (!*((_BYTE *)v3 + 15898))
                        {
LABEL_387:
                          if ((*((_BYTE *)v3 + 4660) & 1) == 0
                            || (*((_BYTE *)v3 + 4676) & 1) == 0
                            || !*((_QWORD *)v3 + 379))
                          {
                            goto LABEL_401;
                          }
                          memcpy(*(void **)(*((_QWORD *)v3 + 435) + 16), *(const void **)(*((_QWORD *)v3 + 428) + 16), 4 * (2 * *((_DWORD *)v3 + 127)));
                          memcpy(*(void **)(*((_QWORD *)v3 + 430) + 16), *(const void **)(*((_QWORD *)v3 + 431) + 16), 4 * (2 * *((_DWORD *)v3 + 127)));
                          LODWORD(v369) = 1092616192;
                          LODWORD(v367) = 1084227584;
                          v168 = *((_QWORD *)v3 + 433);
                          *(_QWORD *)&v376.mNumberBuffers = *((_QWORD *)v3 + 429);
                          *(_QWORD *)&v376.mBuffers[0].mNumberChannels = v168;
                          v169 = (AudioBufferList *)*((_QWORD *)v3 + 506);
                          v376.mBuffers[0].mData = (void *)*((_QWORD *)v3 + 435);
                          v377 = v169;
                          v378 = *((_QWORD *)v3 + 430);
                          v170 = (const AudioBufferList *)*((_QWORD *)v3 + 431);
                          v374 = (AudioBufferList *)*((_QWORD *)v3 + 428);
                          v375 = v170;
                          if ((*((_BYTE *)v3 + 4662) & 0x80) != 0 && (*((_BYTE *)v3 + 4678) & 0x80) != 0)
                          {
                            v171 = (OpaqueAudioComponentInstance *)*((_QWORD *)v3 + 402);
                            if (v171)
                              AudioUnitGetParameter(v171, 9u, 0, 0, (AudioUnitParameterValue *)&v369);
                          }
                          AudioUnitGetParameter(*((AudioUnit *)v3 + 378), 0xEu, 4u, 0, (AudioUnitParameterValue *)&v367);
                          AudioUnitSetParameter(*((AudioUnit *)v3 + 379), 0xAu, 0, 0, *(AudioUnitParameterValue *)&v369, 0);
                          AudioUnitSetParameter(*((AudioUnit *)v3 + 379), 0x17u, 0, 0, *((AudioUnitParameterValue *)v3 + 4172), 0);
                          AudioUnitSetParameter(*((AudioUnit *)v3 + 379), 0x1Au, 0, 0, *(AudioUnitParameterValue *)&v367, 0);
                          v172 = *(_OWORD *)&a2->mRateScalar;
                          *(_OWORD *)&v373.mSampleTime = *(_OWORD *)&a2->mSampleTime;
                          *(_OWORD *)&v373.mRateScalar = v172;
                          v173 = *(_OWORD *)&a2->mSMPTETime.mHours;
                          *(_OWORD *)&v373.mSMPTETime.mSubframes = *(_OWORD *)&a2->mSMPTETime.mSubframes;
                          *(_OWORD *)&v373.mSMPTETime.mHours = v173;
                          Parameter = AudioUnitProcessMultiple(*((AudioUnit *)v3 + 379), &v363, &v373, *((_DWORD *)v3 + 127), 5u, (const AudioBufferList **)&v376, 2u, &v374);
                          v158 = *((unsigned int *)v3 + 127);
                          if (*((_BYTE *)v3 + 15897) || *((_BYTE *)v3 + 15898))
                          {
                            Parameter = VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)v3, 0x1Au, v158, v374, &v373);
                            v158 = *((unsigned int *)v3 + 127);
                            v159 = v375;
                            if (*((_BYTE *)v3 + 15897))
                              goto LABEL_400;
                          }
                          else
                          {
                            v159 = v375;
                          }
                          if (!*((_BYTE *)v3 + 15898))
                            goto LABEL_401;
LABEL_400:
                          p_inInputBufferLists = &v373;
                          v161 = (uint64_t)v3;
                          v162 = 27;
                          goto LABEL_373;
                        }
LABEL_386:
                        Parameter = VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)v3, 0x19u, v166, v167, &inInputBufferLists);
                        goto LABEL_387;
                      }
                    }
                    else
                    {
                      v146 = (OpaqueAudioComponentInstance *)*((_QWORD *)v3 + 376);
                    }
                    v147 = 2.0;
                    goto LABEL_354;
                  }
                  v132 = *((float *)v3 + 1055);
                  if (v132 == 0.0)
                  {
                    v133 = *(_QWORD *)(*((_QWORD *)v3 + 435) + 16) + 4 * *((unsigned int *)v3 + 127);
                    inInputBufferLists.mSampleTime = *(Float64 *)(*((_QWORD *)v3 + 435) + 16);
                    inInputBufferLists.mHostTime = v133;
                    if (*((_QWORD *)v3 + 2097))
                    {
                      VPTimeFreqConverter::Analyze(*((VPTimeFreqConverter **)v3 + 2097), *(const float **)(*((_QWORD *)v3 + 424) + 16), (DSPSplitComplex *)&inInputBufferLists);
                      v132 = *((float *)v3 + 1055);
                      Parameter = *((_QWORD *)v3 + 390);
                    }
                  }
                  AudioUnitSetParameter((AudioUnit)Parameter, 6u, 0, 0, v132, 0);
                  AudioUnitSetParameter(*((AudioUnit *)v3 + 390), 7u, 0, 0, *((AudioUnitParameterValue *)v3 + 1059), 0);
                  AudioUnitSetParameter(*((AudioUnit *)v3 + 390), 0xDu, 0, 0, *((AudioUnitParameterValue *)v3 + 1063), 0);
                  memcpy(*(void **)(*((_QWORD *)v3 + 433) + 16), *(const void **)(*((_QWORD *)v3 + 504) + 32), *((unsigned int *)v3 + 1071));
                  v134 = *((_QWORD *)v3 + 433);
                  v373.mSampleTime = *((Float64 *)v3 + 505);
                  v373.mHostTime = v134;
                  v373.mRateScalar = *((Float64 *)v3 + 511);
                  memset(&v373.mWordClockTime, 0, 24);
                  *(_QWORD *)&v376.mNumberBuffers = *((_QWORD *)v3 + 431);
                  *(_QWORD *)&v376.mBuffers[0].mNumberChannels = 0;
                  v376.mBuffers[0].mData = (void *)*((_QWORD *)v3 + 500);
                  v135 = *(_OWORD *)&a2->mRateScalar;
                  *(_OWORD *)&inInputBufferLists.mSampleTime = *(_OWORD *)&a2->mSampleTime;
                  *(_OWORD *)&inInputBufferLists.mRateScalar = v135;
                  v136 = *(_OWORD *)&a2->mSMPTETime.mHours;
                  *(_OWORD *)&inInputBufferLists.mSMPTETime.mSubframes = *(_OWORD *)&a2->mSMPTETime.mSubframes;
                  *(_OWORD *)&inInputBufferLists.mSMPTETime.mHours = v136;
                  v363 = 512;
                  Parameter = AudioUnitProcessMultiple(*((AudioUnit *)v3 + 390), &v363, &inInputBufferLists, *((_DWORD *)v3 + 127), 6u, (const AudioBufferList **)&v373, 3u, (AudioBufferList **)&v376);
                  v137 = *((unsigned int *)v3 + 127);
                  if (*((_BYTE *)v3 + 15897) || *((_BYTE *)v3 + 15898))
                  {
                    Parameter = VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)v3, 0x25u, v137, *((const AudioBufferList **)v3 + 431), &inInputBufferLists);
                    v137 = *((unsigned int *)v3 + 127);
                    v138 = (const AudioBufferList *)*((_QWORD *)v3 + 500);
                    if (*((_BYTE *)v3 + 15897))
                      goto LABEL_320;
                  }
                  else
                  {
                    v138 = (const AudioBufferList *)*((_QWORD *)v3 + 500);
                  }
                  if (!*((_BYTE *)v3 + 15898))
                  {
LABEL_321:
                    v130 = *((_QWORD *)v3 + 582);
                    goto LABEL_322;
                  }
LABEL_320:
                  Parameter = VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)v3, 0x50u, v137, v138, &inInputBufferLists);
                  goto LABEL_321;
                }
LABEL_734:
                std::vector<std::vector<float>>::__throw_out_of_range[abi:ne180100]();
              }
            }
            else
            {
              v99 = (const AudioBufferList *)*((_QWORD *)v3 + 421);
            }
            if (!*((_BYTE *)v3 + 15898))
              goto LABEL_235;
            goto LABEL_234;
          }
LABEL_173:
          VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)v3, 0x11u, v80, v81, &buf);
          v80 = *((unsigned int *)v3 + 127);
          goto LABEL_174;
        }
        v74 = *((_QWORD *)v3 + 2098);
        if ((unint64_t)(*((_QWORD *)v3 + 2099) - v74) <= 0x20)
          goto LABEL_734;
        ECApplicator::apply(*(AudioUnitParameterID **)(v74 + 32), &buf, v51, (BOOL *)&v362, (float *)v3 + 1047, (float *)v3 + 1051, (float *)v3 + 1055, (float *)v3 + 1059, (float *)v3 + 1063, (float *)v3 + 1067);
        v75 = *((unsigned int *)v3 + 127);
        if (*((_BYTE *)v3 + 15897) || *((_BYTE *)v3 + 15898))
        {
          VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)v3, 0x21u, v75, *((const AudioBufferList **)v3 + 136), &buf);
          v75 = *((unsigned int *)v3 + 127);
          v76 = (const AudioBufferList *)*((_QWORD *)v3 + 422);
          if (*((_BYTE *)v3 + 15897))
            goto LABEL_156;
        }
        else
        {
          v76 = (const AudioBufferList *)*((_QWORD *)v3 + 422);
        }
        if (!*((_BYTE *)v3 + 15898))
        {
LABEL_157:
          v77 = *((_QWORD *)v3 + 507);
          inInputBufferLists.mSampleTime = *(Float64 *)(v77 + 16);
          inInputBufferLists.mHostTime = *(_QWORD *)&inInputBufferLists.mSampleTime + 4 * v75;
          v78 = (VPTimeFreqConverter *)*((_QWORD *)v3 + 2130);
          if (v78)
          {
            VPTimeFreqConverter::Analyze(v78, *(const float **)(*((_QWORD *)v3 + 422) + 16), (DSPSplitComplex *)&inInputBufferLists);
            v75 = *((unsigned int *)v3 + 127);
            v77 = *((_QWORD *)v3 + 507);
          }
          if (*((_BYTE *)v3 + 15897) || *((_BYTE *)v3 + 15898))
            VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)v3, 0x16u, v75, (const AudioBufferList *)v77, &buf);
          v58 = *((_QWORD *)v3 + 582);
          goto LABEL_163;
        }
LABEL_156:
        VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)v3, 0x10u, v75, v76, &buf);
        v75 = *((unsigned int *)v3 + 127);
        goto LABEL_157;
      }
      v50 = *((_DWORD *)v3 + 3098);
      if (v49 != 3)
      {
        if (v50 == 2)
        {
          v51 = 0;
          *((_OWORD *)v3 + 1054) = *(_OWORD *)(v48 + 40);
          *(_OWORD *)((char *)v3 + 16888) = *(_OWORD *)(v48 + 56);
          v52 = 1;
          v53 = 3;
          v54 = 2;
          goto LABEL_117;
        }
        v50 = *((_DWORD *)v3 + 3098);
        if (v50 <= 0xC && ((0x1028u >> v50) & 1) != 0)
        {
          v51 = 0;
          *((_OWORD *)v3 + 1054) = *(_OWORD *)(v48 + 24);
          *(_OWORD *)((char *)v3 + 16888) = *(_OWORD *)(v48 + 40);
          v52 = 3;
          v53 = 2;
          v54 = 1;
          goto LABEL_117;
        }
      }
      if ((v50 | 4) == 0xD)
      {
        v55 = (_OWORD *)((char *)v3 + 16864);
        v56 = (_OWORD *)((char *)v3 + 16888);
        if (*((_DWORD *)v3 + 596) != 1781740087)
        {
          v51 = 0;
          *v55 = *(_OWORD *)(v48 + 56);
          *v56 = *(_OWORD *)(v48 + 40);
          v52 = 1;
          v53 = 2;
          v54 = 3;
          goto LABEL_117;
        }
        *v55 = *(_OWORD *)(v48 + 40);
        *v56 = *(_OWORD *)(v48 + 56);
        v51 = 1;
        v53 = 3;
        v54 = 2;
      }
      else
      {
        v54 = 0;
        v53 = 0;
        v51 = 1;
      }
      v52 = 2;
LABEL_117:
      v57 = v48 + 8;
      *((_OWORD *)v3 + 1051) = *(_OWORD *)(v57 + 16 * v51);
      *(_OWORD *)((char *)v3 + 16840) = *(_OWORD *)(v57 + 16 * v52);
      goto LABEL_118;
    }
  }
  v12 = 0;
  while (((*((_DWORD *)v3 + 116) >> v12) & 1) == 0)
  {
    if (++v12 == 32)
    {
      v12 = 33;
      break;
    }
  }
  v13 = (unsigned int *)*((_QWORD *)v3 + 135);
  if (v12 >= *v13)
  {
    if (VPLogScope(void)::once != -1)
      dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
    v16 = (_QWORD *)VPLogScope(void)::scope;
    if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(1, VPLogScope(void)::scope, 0))
    {
      v17 = (*v16 ? *v16 : MEMORY[0x1E0C81028]);
      if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
      {
        v18 = **((_DWORD **)v3 + 135);
        LODWORD(buf.mSampleTime) = 136315906;
        *(_QWORD *)((char *)&buf.mSampleTime + 4) = "vpProcessUplink_v6.cpp";
        WORD2(buf.mHostTime) = 1024;
        *(_DWORD *)((char *)&buf.mHostTime + 6) = 52;
        WORD1(buf.mRateScalar) = 1024;
        HIDWORD(buf.mRateScalar) = v12;
        LOWORD(buf.mWordClockTime) = 1024;
        *(_DWORD *)((char *)&buf.mWordClockTime + 2) = v18;
        _os_log_impl(&dword_1B5ED0000, v17, OS_LOG_TYPE_ERROR, "%25s:%-5d  >vp> ERROR: mPrimaryEpMicIndex is %d, but epmic only has %d channels", (uint8_t *)&buf, 0x1Eu);
      }
    }
    v19 = (int *)*((_QWORD *)v3 + 1570);
    if (v19 && (*((_BYTE *)v3 + 15897) || *((_BYTE *)v3 + 15898)))
    {
      if (VPLogScope(void)::once != -1)
        dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
      CALegacyLog::log(v19, 1, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v6/vpProcessUplink_v6.cpp", 52, "ProcessDSPChain_Uplink", "ERROR: mPrimaryEpMicIndex is %d, but epmic only has %d channels", v12, **((_DWORD **)v3 + 135));
    }
    v14 = *(void **)(*((_QWORD *)v3 + 136) + 16);
    v15 = (const void **)*((_QWORD *)v3 + 135);
  }
  else
  {
    v14 = *(void **)(*((_QWORD *)v3 + 136) + 16);
    v15 = (const void **)&v13[4 * v12];
  }
  memcpy(v14, v15[2], *((unsigned int *)v15 + 3));
  if (*((_BYTE *)v3 + 2085))
  {
    if ((*((_BYTE *)v3 + 4662) & 0x20) != 0 && (*((_BYTE *)v3 + 4678) & 0x20) != 0)
    {
      v20 = (OpaqueAudioComponentInstance *)*((_QWORD *)v3 + 400);
      if (v20)
      {
        v21 = *((_QWORD *)v3 + 499);
        inInputBufferLists.mSampleTime = *((Float64 *)v3 + 136);
        inInputBufferLists.mHostTime = v21;
        v22 = *((_QWORD *)v3 + 501);
        v373.mSampleTime = inInputBufferLists.mSampleTime;
        v373.mHostTime = v22;
        v23 = *(_OWORD *)&a2->mRateScalar;
        *(_OWORD *)&buf.mSampleTime = *(_OWORD *)&a2->mSampleTime;
        *(_OWORD *)&buf.mRateScalar = v23;
        v24 = *(_OWORD *)&a2->mSMPTETime.mHours;
        *(_OWORD *)&buf.mSMPTETime.mSubframes = *(_OWORD *)&a2->mSMPTETime.mSubframes;
        *(_OWORD *)&buf.mSMPTETime.mHours = v24;
        v376.mNumberBuffers = 512;
        AudioUnitProcessMultiple(v20, &v376.mNumberBuffers, &buf, *((_DWORD *)v3 + 127), 2u, (const AudioBufferList **)&inInputBufferLists, 2u, (AudioBufferList **)&v373);
        if (*((_BYTE *)v3 + 15897) || *((_BYTE *)v3 + 15898))
          VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)v3, 0x27u, *((unsigned int *)v3 + 127), *((const AudioBufferList **)v3 + 136), &buf);
        if ((*((_BYTE *)v3 + 4664) & 2) != 0 && (*((_BYTE *)v3 + 4680) & 2) != 0 && *((_QWORD *)v3 + 412))
        {
          AudioUnitGetParameter(*((AudioUnit *)v3 + 400), 1u, 0, 0, &v364);
          AudioUnitSetParameter(*((AudioUnit *)v3 + 412), 0x23u, 0, 0, v364, 0);
        }
      }
    }
  }
LABEL_654:
  v376.mNumberBuffers = 0;
  v313 = VoiceProcessorV2::LocalVoiceDuckingForMediaChatEnabled(v3);
  v315 = v313;
  if (!*((_BYTE *)v3 + 2080))
  {
    if ((v313 & 1) == 0)
      goto LABEL_675;
    VoiceProcessorV2::DetectVoiceActivity(v3, a2, v314);
LABEL_663:
    v317 = *((_QWORD *)v3 + 582);
    if ((v317 & 0x2000000000000000) != 0
      && (*((_BYTE *)v3 + 4679) & 0x20) != 0
      && (v318 = (OpaqueAudioComponentInstance *)*((_QWORD *)v3 + 408)) != 0)
    {
      v319 = 1936748646;
    }
    else
    {
      if ((v317 & 0x1000000000000000) == 0
        || (*((_BYTE *)v3 + 4679) & 0x10) == 0
        || (v318 = (OpaqueAudioComponentInstance *)*((_QWORD *)v3 + 407)) == 0)
      {
        *(AudioUnitParameterValue *)&v376.mNumberBuffers = v364;
        goto LABEL_673;
      }
      v319 = 2;
    }
    AudioUnitGetParameter(v318, v319, 0, 0, (AudioUnitParameterValue *)&v376.mNumberBuffers);
    goto LABEL_673;
  }
  if (*((_QWORD *)v3 + 2054))
    v316 = 1;
  else
    v316 = v313;
  if ((v316 & 1) != 0)
  {
    VoiceProcessorV2::DetectVoiceActivity(v3, a2, v314);
    if ((v315 & 1) != 0)
      goto LABEL_663;
  }
LABEL_673:
  if (*((_BYTE *)v3 + 2080))
  {
    bzero(*(void **)(*((_QWORD *)v3 + 136) + 16), 4 * *((unsigned int *)v3 + 127));
    v376.mNumberBuffers = 0;
    goto LABEL_676;
  }
LABEL_675:
  *((_DWORD *)v3 + 4110) = 0;
LABEL_676:
  if ((*((_BYTE *)v3 + 8833) & 0x80) != 0 && (*((_BYTE *)v3 + 8841) & 0x80) != 0)
  {
    v320 = (OpaqueAudioComponentInstance *)*((_QWORD *)v3 + 452);
    v321 = v320 ? v315 : 0;
    if (v321 == 1)
      AudioUnitSetParameter(v320, 0x12u, 0, 0, *(AudioUnitParameterValue *)&v376.mNumberBuffers, 0);
  }
  if (*((_BYTE *)v3 + 15897) || *((_BYTE *)v3 + 15898))
    VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)v3, 0x2Au, *((unsigned int *)v3 + 127), *((const AudioBufferList **)v3 + 136), a2);
  if ((*((_BYTE *)v3 + 4663) & 8) != 0 && (*((_BYTE *)v3 + 4679) & 8) != 0)
  {
    v322 = (OpaqueAudioComponentInstance *)*((_QWORD *)v3 + 406);
    if (v322)
    {
      inInputBufferLists.mSampleTime = *((Float64 *)v3 + 136);
      v373.mSampleTime = inInputBufferLists.mSampleTime;
      LODWORD(ioOutputBufferLists.realp) = 512;
      v323 = *(_OWORD *)&a2->mRateScalar;
      *(_OWORD *)&buf.mSampleTime = *(_OWORD *)&a2->mSampleTime;
      *(_OWORD *)&buf.mRateScalar = v323;
      v324 = *(_OWORD *)&a2->mSMPTETime.mHours;
      *(_OWORD *)&buf.mSMPTETime.mSubframes = *(_OWORD *)&a2->mSMPTETime.mSubframes;
      *(_OWORD *)&buf.mSMPTETime.mHours = v324;
      AudioUnitProcessMultiple(v322, (AudioUnitRenderActionFlags *)&ioOutputBufferLists, &buf, *((_DWORD *)v3 + 127), 1u, (const AudioBufferList **)&inInputBufferLists, 1u, (AudioBufferList **)&v373);
      if (*((_BYTE *)v3 + 15897) || *((_BYTE *)v3 + 15898))
        VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)v3, 0x7Au, *((unsigned int *)v3 + 127), *((const AudioBufferList **)v3 + 136), &buf);
    }
  }
  if (*((_BYTE *)v3 + 2085))
  {
    if ((*((_BYTE *)v3 + 4664) & 0x40) != 0 && (*((_BYTE *)v3 + 4680) & 0x40) != 0)
    {
      v325 = (OpaqueAudioComponentInstance *)*((_QWORD *)v3 + 417);
      if (v325)
      {
        inInputBufferLists.mSampleTime = *((Float64 *)v3 + 136);
        v373.mSampleTime = inInputBufferLists.mSampleTime;
        LODWORD(ioOutputBufferLists.realp) = 512;
        v326 = *(_OWORD *)&a2->mRateScalar;
        *(_OWORD *)&buf.mSampleTime = *(_OWORD *)&a2->mSampleTime;
        *(_OWORD *)&buf.mRateScalar = v326;
        v327 = *(_OWORD *)&a2->mSMPTETime.mHours;
        *(_OWORD *)&buf.mSMPTETime.mSubframes = *(_OWORD *)&a2->mSMPTETime.mSubframes;
        *(_OWORD *)&buf.mSMPTETime.mHours = v327;
        AudioUnitProcessMultiple(v325, (AudioUnitRenderActionFlags *)&ioOutputBufferLists, &buf, *((_DWORD *)v3 + 127), 1u, (const AudioBufferList **)&inInputBufferLists, 1u, (AudioBufferList **)&v373);
        if (*((_BYTE *)v3 + 15897) || *((_BYTE *)v3 + 15898))
          VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)v3, 0x7Cu, *((unsigned int *)v3 + 127), *((const AudioBufferList **)v3 + 136), &buf);
      }
    }
  }
  if ((*((_QWORD *)v3 + 582) & 0x8000000000000000) != 0 && (*((_QWORD *)v3 + 584) & 0x8000000000000000) != 0)
  {
    v328 = (OpaqueAudioComponentInstance *)*((_QWORD *)v3 + 410);
    if (v328)
    {
      v329 = *(_OWORD *)&a2->mRateScalar;
      *(_OWORD *)&buf.mSampleTime = *(_OWORD *)&a2->mSampleTime;
      *(_OWORD *)&buf.mRateScalar = v329;
      v330 = *(_OWORD *)&a2->mSMPTETime.mHours;
      *(_OWORD *)&buf.mSMPTETime.mSubframes = *(_OWORD *)&a2->mSMPTETime.mSubframes;
      *(_OWORD *)&buf.mSMPTETime.mHours = v330;
      LODWORD(inInputBufferLists.mSampleTime) = 512;
      AudioUnitProcess(v328, (AudioUnitRenderActionFlags *)&inInputBufferLists, &buf, *((_DWORD *)v3 + 127), *((AudioBufferList **)v3 + 136));
      if (*((_BYTE *)v3 + 15897) || *((_BYTE *)v3 + 15898))
        VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)v3, 0x2Cu, *((unsigned int *)v3 + 127), *((const AudioBufferList **)v3 + 136), &buf);
    }
  }
  v331 = *((_QWORD *)v3 + 583);
  if ((v331 & 1) != 0 && (*((_BYTE *)v3 + 4680) & 1) != 0)
  {
    v332 = (OpaqueAudioComponentInstance *)*((_QWORD *)v3 + 411);
    if (v332)
    {
      v333 = *(_OWORD *)&a2->mRateScalar;
      *(_OWORD *)&buf.mSampleTime = *(_OWORD *)&a2->mSampleTime;
      *(_OWORD *)&buf.mRateScalar = v333;
      v334 = *(_OWORD *)&a2->mSMPTETime.mHours;
      *(_OWORD *)&buf.mSMPTETime.mSubframes = *(_OWORD *)&a2->mSMPTETime.mSubframes;
      *(_OWORD *)&buf.mSMPTETime.mHours = v334;
      LODWORD(inInputBufferLists.mSampleTime) = 512;
      AudioUnitProcess(v332, (AudioUnitRenderActionFlags *)&inInputBufferLists, &buf, *((_DWORD *)v3 + 127), *((AudioBufferList **)v3 + 136));
      v331 = *((_QWORD *)v3 + 583);
    }
  }
  if ((v331 & 2) != 0
    && (*((_BYTE *)v3 + 4680) & 2) != 0
    && (v335 = (OpaqueAudioComponentInstance *)*((_QWORD *)v3 + 412)) != 0)
  {
    v336 = *(_OWORD *)&a2->mRateScalar;
    *(_OWORD *)&buf.mSampleTime = *(_OWORD *)&a2->mSampleTime;
    *(_OWORD *)&buf.mRateScalar = v336;
    v337 = *(_OWORD *)&a2->mSMPTETime.mHours;
    *(_OWORD *)&buf.mSMPTETime.mSubframes = *(_OWORD *)&a2->mSMPTETime.mSubframes;
    *(_OWORD *)&buf.mSMPTETime.mHours = v337;
    LODWORD(inInputBufferLists.mSampleTime) = 512;
    AudioUnitProcess(v335, (AudioUnitRenderActionFlags *)&inInputBufferLists, &buf, *((_DWORD *)v3 + 127), *((AudioBufferList **)v3 + 136));
    if (*((_BYTE *)v3 + 15897) || *((_BYTE *)v3 + 15898))
      VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)v3, 0x2Du, *((unsigned int *)v3 + 127), *((const AudioBufferList **)v3 + 136), &buf);
    if ((*((_BYTE *)v3 + 4663) & 0x10) != 0 && (*((_BYTE *)v3 + 4679) & 0x10) != 0 && *((_QWORD *)v3 + 407))
    {
      LODWORD(v373.mSampleTime) = 0;
      AudioUnitGetParameter(*((AudioUnit *)v3 + 412), 1u, 0, 0, (AudioUnitParameterValue *)&v373);
      AudioUnitSetParameter(*((AudioUnit *)v3 + 407), 0x11u, 0, 0, *(AudioUnitParameterValue *)&v373.mSampleTime, 0);
    }
    LODWORD(v373.mSampleTime) = 0;
    AudioUnitGetParameter(*((AudioUnit *)v3 + 412), 0x1Bu, 0, 0, (AudioUnitParameterValue *)&v373);
    mSampleTime_low = LODWORD(v373.mSampleTime);
    if (*((float *)v3 + 572) != *(float *)&v373.mSampleTime)
    {
      if ((*((_BYTE *)v3 + 4663) & 0x10) != 0 && (*((_BYTE *)v3 + 4679) & 0x10) != 0)
      {
        v339 = (OpaqueAudioComponentInstance *)*((_QWORD *)v3 + 407);
        if (v339)
        {
          AudioUnitSetParameter(v339, 0x12u, 0, 0, *(AudioUnitParameterValue *)&v373.mSampleTime, 0);
          mSampleTime_low = LODWORD(v373.mSampleTime);
        }
      }
      *((_DWORD *)v3 + 572) = mSampleTime_low;
    }
  }
  else if ((*((_BYTE *)v3 + 4663) & 0x40) != 0 && ((*((_BYTE *)v3 + 4679) & 0x40) != 0 || *((_BYTE *)v3 + 472)))
  {
    LODWORD(buf.mSampleTime) = __exp10f(*((float *)v3 + 1091) / 20.0);
    vDSP_vsmul(*(const float **)(*((_QWORD *)v3 + 136) + 16), 1, (const float *)&buf, *(float **)(*((_QWORD *)v3 + 136) + 16), 1, *((unsigned int *)v3 + 127));
    if (*((_BYTE *)v3 + 15897) || *((_BYTE *)v3 + 15898))
      VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)v3, 0x2Bu, *((unsigned int *)v3 + 127), *((const AudioBufferList **)v3 + 136), a2);
  }
  VoiceProcessorV6::ProcessLevelDrivenSuppressor((uint64_t)v3, a2);
  return 0;
}

uint64_t VoiceProcessorV6::ProcessLevelDrivenSuppressor(uint64_t this, AudioTimeStamp *inTimeStamp)
{
  uint64_t v2;
  _DWORD *v4;
  unint64_t v5;
  uint64_t v6;
  VPTimeFreqConverter *v7;
  const float *v8;
  float *v9;
  const AudioBufferList *v10;
  unint64_t v11;
  uint64_t v12;
  float *v13;
  float *v14;
  AudioUnitRenderActionFlags ioActionFlags;
  DSPSplitComplex v16;
  AudioBufferList *ioOutputBufferLists;
  AudioBufferList *inInputBufferLists[2];

  inInputBufferLists[1] = *(AudioBufferList **)MEMORY[0x1E0C80C00];
  if ((*(_BYTE *)(this + 4664) & 4) != 0)
  {
    v2 = this;
    if ((*(_BYTE *)(this + 4680) & 4) != 0)
    {
      this = *(_QWORD *)(this + 3304);
      if (this)
      {
        v4 = *(_DWORD **)(v2 + 1088);
        if (*v4)
        {
          v5 = 0;
          v6 = 4;
          do
          {
            v7 = *(VPTimeFreqConverter **)(v2 + 17320);
            v8 = *(const float **)&v4[v6];
            v9 = (float *)(*(_QWORD *)(*(_QWORD *)(v2 + 17328) + v6 * 4) + 4 * *(unsigned int *)(v2 + 508));
            v16.realp = *(float **)(*(_QWORD *)(v2 + 17328) + v6 * 4);
            v16.imagp = v9;
            if (v7)
            {
              VPTimeFreqConverter::Analyze(v7, v8, &v16);
              v4 = *(_DWORD **)(v2 + 1088);
            }
            ++v5;
            v6 += 4;
          }
          while (v5 < *v4);
          this = *(_QWORD *)(v2 + 3304);
        }
        ioOutputBufferLists = *(AudioBufferList **)(v2 + 17328);
        inInputBufferLists[0] = ioOutputBufferLists;
        ioActionFlags = 512;
        this = AudioUnitProcessMultiple((AudioUnit)this, &ioActionFlags, inTimeStamp, *(_DWORD *)(v2 + 508), 1u, (const AudioBufferList **)inInputBufferLists, 1u, &ioOutputBufferLists);
        v10 = *(const AudioBufferList **)(v2 + 1088);
        if (v10->mNumberBuffers)
        {
          v11 = 0;
          v12 = 16;
          do
          {
            this = *(_QWORD *)(v2 + 17320);
            v13 = *(float **)((char *)&v10->mNumberBuffers + v12);
            v14 = (float *)(*(_QWORD *)(*(_QWORD *)(v2 + 17328) + v12) + 4 * *(unsigned int *)(v2 + 508));
            v16.realp = *(float **)(*(_QWORD *)(v2 + 17328) + v12);
            v16.imagp = v14;
            if (this)
            {
              this = VPTimeFreqConverter::Synthesize((VPTimeFreqConverter *)this, &v16, v13);
              v10 = *(const AudioBufferList **)(v2 + 1088);
            }
            ++v11;
            v12 += 16;
          }
          while (v11 < v10->mNumberBuffers);
        }
        if (*(_BYTE *)(v2 + 15897) || *(_BYTE *)(v2 + 15898))
          return VoiceProcessorV2::SaveFilesWriteSignal(v2, 0x2Eu, *(unsigned int *)(v2 + 508), v10, inTimeStamp);
      }
    }
  }
  return this;
}

float *CNoiseSuppressorV4::curve_fn(float *result, int a2, int a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  float v7;
  float v8;
  float *v9;
  float *v10;
  float v11;
  float v12;
  float v13;
  float v14;
  float v15;
  float v16;
  float v17;
  float v19;
  float v20;

  if (a2 >= 2)
  {
    v4 = 0;
    LODWORD(v5) = 0;
    v6 = (a2 - 1);
    v7 = (float)a3 / (float)(result[2 * (int)v6] - *result);
    v8 = *result * v7;
    do
    {
      v9 = &result[2 * v4++];
      v10 = &result[2 * v4];
      v11 = v9[1];
      v13 = *v10;
      v12 = v10[1];
      v14 = v7 * (float)((float)(*v9 + *v10) * 0.5);
      v15 = (float)(v11 + v12) * 0.5;
      if (v8 < v14)
      {
        v16 = v7 * *v9;
        v5 = (int)v5;
        do
        {
          *(float *)(a4 + 4 * v5++) = v11
                                    + (float)((float)((float)((float)(v8 - v16) / (float)(v14 - v16))
                                                    * (float)((float)(v8 - v16) / (float)(v14 - v16)))
                                            * (float)(v15 - v11));
          v8 = v8 + 1.0;
        }
        while (v8 < v14);
      }
      v17 = v7 * v13;
      if (v8 < v17 && (int)v5 < a3)
      {
        v19 = v14 - v17;
        v20 = v12 - v15;
        v5 = (int)v5;
        do
        {
          *(float *)(a4 + 4 * v5++) = v15
                                    + (float)((float)(1.0
                                                    - (float)((float)((float)(v8 - v17) / v19)
                                                            * (float)((float)(v8 - v17) / v19)))
                                            * v20);
          v8 = v8 + 1.0;
        }
        while (v8 < v17 && v5 < a3);
      }
    }
    while (v4 != v6);
  }
  return result;
}

float CNoiseSuppressorV4::preprocess_analysis_freq(uint64_t a1, uint64_t a2, const void *a3)
{
  vDSP_Length v5;
  float *v6;
  uint64_t v7;
  char *v8;
  float *v9;
  const void *v10;
  _DWORD *v11;
  uint64_t v12;
  uint64_t v14;
  DSPSplitComplex __Z;
  DSPSplitComplex __A;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v5 = *(int *)(a1 + 4);
  v6 = *(float **)(a1 + 152);
  MEMORY[0x1E0C80A78](a1);
  v8 = (char *)&v14 - v7;
  v9 = (float *)((char *)&v14 + 4 * v5 - v7);
  __A.realp = (float *)((char *)&v14 - v7);
  __A.imagp = v9;
  memcpy((char *)&v14 - v7, v10, 4 * v5);
  memcpy(v9, a3, 4 * v5);
  __Z.realp = v9 + 1;
  __Z.imagp = (float *)(v8 + 8);
  vDSP_ztoc(&__Z, 1, (DSPComplex *)(*(_QWORD *)(a1 + 136) + 8), 2, v5 - 2);
  v11 = *(_DWORD **)(a1 + 136);
  *v11 = *(_DWORD *)v8;
  v11[1] = *((_DWORD *)v8 + 1);
  v12 = 8 * v5 - 4;
  v11[2 * (int)v5 - 2] = *(_DWORD *)&v8[v12];
  *(float *)((char *)v11 + v12) = *v9;
  vDSP_zvmags(&__A, 1, v6, 1, v5);
  *v6 = *__A.realp * *__A.realp;
  return CFilterBank::filterbank_compute_bank32(*(_QWORD *)(a1 + 16), v6, &v6[v5]);
}

float CNoiseSuppressorV4::preprocess_analysis_sec_freq(uint64_t a1, uint64_t a2, const void *a3)
{
  vDSP_Length v5;
  float *v6;
  uint64_t v7;
  char *v8;
  float *v9;
  const void *v10;
  _DWORD *v11;
  uint64_t v12;
  float result;
  uint64_t v14;
  DSPSplitComplex __Z;
  DSPSplitComplex __A;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v5 = *(int *)(a1 + 4);
  v6 = *(float **)(a1 + 160);
  MEMORY[0x1E0C80A78](a1);
  v8 = (char *)&v14 - v7;
  v9 = (float *)((char *)&v14 + 4 * v5 - v7);
  __A.realp = (float *)((char *)&v14 - v7);
  __A.imagp = v9;
  memcpy((char *)&v14 - v7, v10, 4 * v5);
  memcpy(v9, a3, 4 * v5);
  __Z.realp = v9 + 1;
  __Z.imagp = (float *)(v8 + 8);
  vDSP_ztoc(&__Z, 1, (DSPComplex *)(*(_QWORD *)(a1 + 144) + 8), 2, v5 - 2);
  v11 = *(_DWORD **)(a1 + 144);
  *v11 = *(_DWORD *)v8;
  v11[1] = *((_DWORD *)v8 + 1);
  v12 = 8 * v5 - 4;
  v11[2 * (int)v5 - 2] = *(_DWORD *)&v8[v12];
  *(float *)((char *)v11 + v12) = *v9;
  vDSP_zvmags(&__A, 1, v6, 1, v5);
  result = *__A.realp * *__A.realp;
  *v6 = result;
  return result;
}

float CNoiseSuppressorV4::speex_synthesis(int *a1, float *a2)
{
  vDSP_Length v4;
  int v5;
  uint64_t v6;
  float *v7;
  float *v8;
  uint64_t v9;
  _QWORD *v10;
  float v11;
  MultiRadixRealFFT *v12;
  uint64_t v13;
  uint64_t v14;
  float result;
  uint64_t v16;
  int v17;
  float *v18;
  float *v19;
  float v20;
  NSObject *v21;
  DSPSplitComplex __Z;
  float __B;
  const char *v24;
  __int16 v25;
  int v26;
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  v4 = a1[1];
  v5 = 2 * v4;
  MEMORY[0x1E0C80A78](a1);
  v7 = (float *)((char *)&__Z - v6);
  v8 = (float *)((char *)&__Z + 4 * v4 - v6);
  __Z.realp = v8 + 1;
  __Z.imagp = (float *)((char *)&__Z.imagp - v6);
  vDSP_ctoz((const DSPComplex *)(*(_QWORD *)(v9 + 136) + 8), 2, &__Z, 1, v4 - 2);
  v10 = (_QWORD *)*((_QWORD *)a1 + 17);
  *(_QWORD *)v7 = *v10;
  v7[2 * (int)v4 - 1] = *(float *)&v10[v4 - 1];
  *v8 = *((float *)&v10[(int)v4 - 1] + 1);
  __Z.realp = v7;
  __Z.imagp = v8;
  __B = 0.000030518;
  vDSP_vsmul(v7, 1, &__B, v7, 1, (2 * v4));
  v12 = (MultiRadixRealFFT *)*((_QWORD *)a1 + 72);
  if (v12)
  {
    MultiRadixRealFFT::RealInPlaceTransform(v12, &__Z, -1, v11);
    goto LABEL_3;
  }
  if (SuppressorClassLogScope(void)::once != -1)
    dispatch_once(&SuppressorClassLogScope(void)::once, &__block_literal_global_5244);
  if (SuppressorClassLogScope(void)::scope)
  {
    v21 = *(NSObject **)SuppressorClassLogScope(void)::scope;
    if (!*(_QWORD *)SuppressorClassLogScope(void)::scope)
      goto LABEL_3;
  }
  else
  {
    v21 = MEMORY[0x1E0C81028];
  }
  if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
  {
    __B = 4.8151e-34;
    v24 = "suppressor_classV4.cpp";
    v25 = 1024;
    v26 = 538;
    _os_log_impl(&dword_1B5ED0000, v21, OS_LOG_TYPE_ERROR, "%25s:%-5d MultiRadixRealFFT_RealInPlaceTransform() returned an error.", (uint8_t *)&__B, 0x12u);
  }
LABEL_3:
  vDSP_ztoc(&__Z, 1, *((DSPComplex **)a1 + 15), 2, v4);
  vDSP_vmul(*((const float **)a1 + 15), 1, *((const float **)a1 + 23), 1, *((float **)a1 + 15), 1, v5);
  v13 = (v5 - *a1);
  v14 = (*a1 - v13);
  vDSP_vadd(*((const float **)a1 + 69), 1, *((const float **)a1 + 15), 1, a2, 1, (int)v13);
  if ((int)v14 >= 1)
  {
    v16 = *((_QWORD *)a1 + 15);
    v17 = v13;
    do
    {
      result = *(float *)(v16 + 4 * v17);
      a2[v17++] = result;
      --v14;
    }
    while (v14);
  }
  if ((int)v13 >= 1)
  {
    v18 = (float *)*((_QWORD *)a1 + 69);
    v19 = (float *)(*((_QWORD *)a1 + 15) + 4 * *a1);
    do
    {
      v20 = *v19++;
      result = v20;
      *v18++ = v20;
      --v13;
    }
    while (v13);
  }
  return result;
}

void CNoiseSuppressorV4::update_noise_prob(uint64_t a1)
{
  vDSP_Length v2;
  uint64_t v3;
  float *v4;
  uint64_t v5;
  const float *v6;
  float v7;
  int v8;
  float v9;
  float v10;
  float v12;
  float __B;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v2 = *(int *)(a1 + 4);
  MEMORY[0x1E0C80A78](a1);
  v4 = (float *)((char *)&v12 - ((v3 + 15) & 0x7FFFFFFF0));
  v6 = (const float *)(v5 + 392);
  v7 = 1.0 - *(float *)(v5 + 392);
  v12 = v7 * 0.667;
  __B = v7 * 0.333;
  *v4 = 0.0;
  vDSP_vsmul(*(const float **)(v5 + 152), 1, &__B, v4 + 1, 1, v2 - 1);
  vDSP_vsma((const float *)(*(_QWORD *)(a1 + 152) + 4), 1, &__B, v4, 1, v4, 1, v2 - 1);
  vDSP_vsma(*(const float **)(a1 + 152), 1, &v12, v4, 1, v4, 1, v2);
  vDSP_vsma(*(const float **)(a1 + 272), 1, v6, v4, 1, *(float **)(a1 + 272), 1, v2);
  vDSP_vmul(*(const float **)(a1 + 160), 1, *(const float **)(a1 + 96), 1, *(float **)(a1 + 160), 1, v2);
  if (*(_DWORD *)(a1 + 428) == 2)
  {
    *v4 = 0.0;
    vDSP_vsmul(*(const float **)(a1 + 160), 1, &__B, v4 + 1, 1, v2 - 1);
    vDSP_vsma((const float *)(*(_QWORD *)(a1 + 160) + 4), 1, &__B, v4, 1, v4, 1, v2 - 1);
    vDSP_vsma(*(const float **)(a1 + 160), 1, &v12, v4, 1, v4, 1, v2);
    vDSP_vsma(*(const float **)(a1 + 280), 1, v6, v4, 1, *(float **)(a1 + 280), 1, v2);
  }
  v8 = *(_DWORD *)(a1 + 560);
  if (v8 == 1)
  {
    vDSP_vclr(*(float **)(a1 + 288), 1, v2);
    vDSP_vclr(*(float **)(a1 + 296), 1, v2);
    v8 = *(_DWORD *)(a1 + 560);
  }
  v9 = (float)*(int *)(a1 + 8);
  v10 = (float)(v9 * 0.2) / (float)(int)v2;
  if (v10 <= (float)v8 && (float)((float)(v9 * 0.5) / (float)(int)v2) <= (float)v8)
    v10 = (float)(v9 + v9) / (float)(int)v2;
  if (*(_DWORD *)(a1 + 568) <= (int)v10)
  {
    vDSP_vmin(*(const float **)(a1 + 288), 1, *(const float **)(a1 + 272), 1, *(float **)(a1 + 288), 1, v2);
    vDSP_vmin(*(const float **)(a1 + 296), 1, *(const float **)(a1 + 272), 1, *(float **)(a1 + 296), 1, v2);
  }
  else
  {
    *(_DWORD *)(a1 + 568) = 0;
    vDSP_vmin(*(const float **)(a1 + 296), 1, *(const float **)(a1 + 272), 1, *(float **)(a1 + 288), 1, v2);
    memcpy(*(void **)(a1 + 296), *(const void **)(a1 + 272), 4 * v2);
  }
  vDSP_vmul(*(const float **)(a1 + 288), 1, *(const float **)(a1 + 80), 1, v4, 1, v2);
  vDSP_vsub(v4, 1, *(const float **)(a1 + 272), 1, *(float **)(a1 + 304), 1, v2);
  if (*(_DWORD *)(a1 + 428) == 2)
  {
    vDSP_vmul(*(const float **)(a1 + 280), 1, *(const float **)(a1 + 88), 1, v4, 1, v2);
    vDSP_vsub(v4, 1, *(const float **)(a1 + 272), 1, *(float **)(a1 + 312), 1, v2);
    vDSP_vmul(*(const float **)(a1 + 272), 1, *(const float **)(a1 + 88), 1, v4, 1, v2);
    vDSP_vsub(v4, 1, *(const float **)(a1 + 280), 1, *(float **)(a1 + 320), 1, v2);
  }
}

void *CNoiseSuppressorV4::speex_preprocess_run_freq(uint64_t a1, const float **a2, const float **a3, const float *a4)
{
  vDSP_Length v7;
  const float *v8;
  float *v9;
  const float *v10;
  float *v11;
  uint64_t v12;
  int *v13;
  const float *v14;
  float *v15;
  const float *v16;
  float *v17;
  int v18;
  int v19;
  float v20;
  int v21;
  vDSP_Length v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  vDSP_Length v33;
  uint64_t v34;
  const float *v35;
  const float *v36;
  NSObject *v37;
  int v38;
  uint64_t v39;
  int v40;
  char v41;
  char v42;
  float *v43;
  const char *v44;
  NSObject *v45;
  float *v46;
  float *v47;
  float v48;
  float *v49;
  float v50;
  float v51;
  float *v52;
  float v53;
  float v54;
  float v55;
  _BOOL4 v56;
  float v57;
  uint64_t v58;
  vDSP_Length v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  uint64_t v63;
  float *v64;
  uint64_t v65;
  uint64_t v66;
  float v67;
  double v68;
  float v69;
  float v70;
  float v71;
  float v72;
  float v73;
  uint64_t v74;
  uint64_t v75;
  int v76;
  uint64_t v77;
  vDSP_Length v78;
  float v79;
  float v80;
  uint64_t v81;
  float v82;
  float v83;
  int v84;
  BOOL v86;
  float *v87;
  float v88;
  float v89;
  float v90;
  _BOOL4 v91;
  float v92;
  uint64_t v93;
  unint64_t v94;
  const float **v95;
  uint64_t v96;
  float v97;
  float v98;
  float v99;
  float v100;
  float v101;
  float v102;
  uint64_t v103;
  _QWORD *v104;
  float *v105;
  float *v106;
  _QWORD *v107;
  uint64_t v108;
  float v109;
  vDSP_Length v110;
  int64_t v111;
  float v112;
  vDSP_Length v113;
  BOOL v114;
  float v115;
  float *v116;
  __int128 *v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  float *v123;
  int64_t v124;
  int64_t v125;
  float v126;
  float v127;
  unsigned int v128;
  float v129;
  float v130;
  float v131;
  float v132;
  float v133;
  uint64_t v134;
  vDSP_Length v135;
  int v136;
  float *v137;
  float v138;
  float *v139;
  float *v140;
  float v141;
  unsigned int v142;
  float v143;
  float v144;
  _BOOL4 v145;
  float **v146;
  float *v147;
  float *v148;
  float *v149;
  float *v150;
  float *v151;
  float *v152;
  float v153;
  float v154;
  float v155;
  float v156;
  float v157;
  float *v158;
  const float **v159;
  vDSP_Length v160;
  uint64_t v161;
  const float *v162;
  const float **v163;
  const float **v164;
  const float *v165;
  float v166;
  float *v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  float *v172;
  _DWORD *v173;
  const float *v174;
  uint64_t v175;
  size_t v176;
  void *result;
  float v178;
  const float *v179;
  const float *v180;
  float *v181;
  uint64_t v182;
  float v183;
  float v184;
  float v185;
  uint64_t v186;
  float v187;
  float *v188;
  float v189;
  float v190;
  uint64_t v191;
  float v192;
  float v193;
  uint64_t v194;
  uint64_t v195;
  float v196;
  float v197;
  float v198;
  float *v199;
  uint64_t v200;
  float *v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  float **v205;
  float *v206;
  const float *v207;
  float *v208;
  float *v209;
  vDSP_Length v210;
  uint64_t v211;
  float *v212;
  float *v213;
  const DSPComplex *v214;
  uint64_t v215;
  float v216;
  float v217;
  float v218;
  float *v219;
  float v220;
  unsigned int v221;
  unsigned int v222;
  int v223;
  float *v224;
  float v225;
  unsigned int v226;
  float v227;
  double v228;
  uint64_t v229;
  int v230;
  int v231;
  int v232;
  unsigned int v233;
  char *v234;
  float v235;
  vDSP_Length v236;
  uint64_t v237;
  const float *v238;
  float v239;
  float *v240;
  vDSP_Length v241;
  int v242;
  int v243;
  int v244;
  int v245;
  float v246;
  int v247;
  int v248;
  uint64_t v249;
  float v250;
  float v251;
  float v252;
  unsigned int v253;
  float v254;
  uint64_t v255;
  uint64_t v256;
  const float *v257;
  unsigned __int8 v258;
  unint64_t v259;
  unsigned __int8 v260;
  unint64_t v261;
  uint64_t v262;
  float v263;
  float v264;
  float v265;
  int v266;
  _BOOL4 v268;
  float v269;
  float v270;
  _BOOL4 v271;
  uint64_t v272;
  uint64_t v273;
  float v274;
  float v275;
  unint64_t v276;
  float *v277;
  float *v278;
  float *v279;
  uint64_t v280;
  uint64_t v281;
  uint64_t v282;
  uint64_t v283;
  uint64_t v284;
  float *v285;
  float *v286;
  uint64_t v287;
  uint64_t v288;
  unsigned __int8 v289;
  unsigned __int8 v290;
  uint64_t v291;
  uint64_t v292;
  char *v293;
  char *v294;
  _DWORD *v295;
  uint64_t v296;
  uint64_t v297;
  const float **v298;
  const float **v299;
  const float **v300;
  uint64_t v301;
  int *v302;
  int *v303;
  vDSP_Length v304;
  float v305;
  float v306;
  _DWORD *v307;
  uint64_t v308;
  vDSP_Length v309;
  float v310;
  float v311;
  int32x2_t v312;
  __int128 v313;
  vDSP_Length v314;
  uint64_t v315;
  char **v316;
  float v317;
  double v318;
  float v319;
  float v320;
  unsigned __int8 v321;
  uint64_t v322;
  unint64_t v323;
  unint64_t v324;
  double v325;
  float v326;
  uint64_t v327;
  unsigned int v328;
  uint64_t v329;
  unsigned int v330;
  uint64_t v331;
  unsigned int v332;
  float v333;
  int v334;
  float v335;
  float v336;
  uint64_t v337;
  float v338;
  float v339;
  float v340;
  float v341;
  int v342;
  int v343;
  int v344;
  unint64_t v345;
  float v346;
  int v347;
  float *v348;
  int v349;
  float v350;
  float v351;
  unsigned __int8 v352;
  float v353;
  uint64_t v354;
  float v355;
  float v356;
  float v357;
  float *v358;
  float *v359;
  float v360;
  uint64_t v361;
  float32x2_t v365;
  float v366;
  float v367;
  float v368;
  float v369;
  float v370;
  float v371;
  float v372;
  float v373;
  float v374;
  float *v375;
  float v376;
  float v377;
  float v378;
  float v379;
  float v380;
  float v381;
  float v382;
  float v383;
  char **v385;
  uint64_t v386;
  float v387;
  char v388;
  char v389;
  uint64_t v390;
  uint64_t v391;
  float v392;
  uint64_t v393;
  float v394;
  uint64_t v395;
  float v396;
  float v397;
  float v398;
  const float *v399;
  float v400;
  uint64_t v401;
  int *v402;
  uint64_t v403;
  float *v404;
  int v405;
  unint64_t v406;
  unint64_t v407;
  float v408;
  BOOL v409;
  BOOL v410;
  BOOL v411;
  unint64_t v413;
  uint64_t v414;
  uint64_t v415;
  uint64_t v417;
  uint64_t v418;
  unint64_t v419;
  float v420;
  uint64_t v421;
  unsigned int v422;
  float v423;
  uint64_t v424;
  unsigned int v425;
  float v426;
  unsigned int v427;
  int v428;
  uint64_t v429;
  char **v430;
  float *v431;
  const float *v432;
  uint64_t *v433;
  float *v434;
  unint64_t v435;
  float *v436;
  float v437;
  uint64_t v438;
  float *v439;
  uint64_t v440;
  float *v441;
  uint64_t *v442;
  float *v443;
  uint64_t v444;
  __int128 v445;
  int v446;
  vDSP_Length v447;
  vDSP_Length v448;
  float *v449;
  char *v450;
  float *v451;
  vDSP_Length v452;
  uint64_t v453;
  float v454;
  float v455;
  float v456;
  float v457;
  float __C;
  float v459;
  float v460;
  float v461;
  float v462;
  float v463;
  float v464;
  float v465;
  float v466;
  vDSP_Length v467;
  int v468;
  int v469;
  float *v470;
  DSPSplitComplex __Z;
  float v472;
  float v473;
  _BYTE __B[24];
  uint64_t v475;

  v443 = (float *)a4;
  v475 = *MEMORY[0x1E0C80C00];
  v7 = *(unsigned int *)(a1 + 4);
  v450 = *(char **)(a1 + 152);
  v466 = 0.05;
  v465 = 1.05;
  v463 = 0.000001;
  v464 = 2.0;
  v462 = 1.0;
  v461 = 0.0;
  v460 = 0.0;
  v459 = 0.0;
  v8 = *a2;
  v453 = a1;
  v9 = *(float **)(a1 + 656);
  *(_DWORD *)__B = 1191182336;
  v447 = v7;
  vDSP_vsmul(v8, 1, (const float *)__B, v9, 1, v7);
  v10 = a2[1];
  v11 = *(float **)(v453 + 664);
  *(_DWORD *)__B = 1191182336;
  vDSP_vsmul(v10, 1, (const float *)__B, v11, 1, v447);
  v13 = (int *)v453;
  if (a3 && *(_DWORD *)(v453 + 428) == 2)
  {
    v14 = *a3;
    v15 = *(float **)(v453 + 672);
    *(_DWORD *)__B = 1191182336;
    vDSP_vsmul(v14, 1, (const float *)__B, v15, 1, v447);
    v16 = a3[1];
    v17 = *(float **)(v453 + 680);
    *(_DWORD *)__B = 1191182336;
    vDSP_vsmul(v16, 1, (const float *)__B, v17, 1, v447);
    v13 = (int *)v453;
  }
  v442 = &v429;
  v18 = v447;
  v19 = v13[140];
  v20 = (float)(int)v447;
  if (v19 + 1 < (int)(float)((float)((float)v13[2] * 30.0) / (float)(int)v447))
    v21 = v19 + 1;
  else
    v21 = (int)(float)((float)((float)v13[2] * 30.0) / (float)(int)v447);
  v13[140] = v21;
  ++v13[142];
  v22 = v13[3];
  v452 = v18;
  v448 = v22;
  v444 = (v22 + v18);
  MEMORY[0x1E0C80A78](v12);
  v449 = (float *)((char *)&v429 - ((v23 + 15) & 0x7FFFFFFF0));
  MEMORY[0x1E0C80A78](v24);
  v451 = (float *)((char *)&v429 - v25);
  MEMORY[0x1E0C80A78](v26);
  v441 = (float *)((char *)&v429 - ((v27 + 15) & 0x7FFFFFFF0));
  v440 = v27;
  MEMORY[0x1E0C80A78](v28);
  v439 = (float *)((char *)&v429 - v29);
  CNoiseSuppressorV4::preprocess_analysis_freq(v30, *(_QWORD *)(v30 + 656), *(const void **)(v30 + 664));
  v31 = v453;
  if (*(_DWORD *)(v453 + 428) == 2)
  {
    CNoiseSuppressorV4::preprocess_analysis_sec_freq(v453, *(_QWORD *)(v453 + 672), *(const void **)(v453 + 680));
    v31 = v453;
  }
  CNoiseSuppressorV4::update_noise_prob(v31);
  (*(void (**)(_QWORD, _QWORD, _QWORD, vDSP_Length))(**(_QWORD **)(v453 + 696) + 24))(*(_QWORD *)(v453 + 696), *(_QWORD *)(v453 + 152), *(_QWORD *)(v453 + 200), v452);
  v32 = v453;
  v33 = v452;
  if (!v443 || !*(_QWORD *)(v453 + 688))
    goto LABEL_45;
  v433 = (uint64_t *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v453 + 696) + 32))(*(_QWORD *)(v453 + 696));
  v32 = v453;
  v34 = *(_QWORD *)(v453 + 688);
  v33 = v452;
  if (!*(_BYTE *)v34)
    goto LABEL_37;
  v35 = *(const float **)(v453 + 152);
  if (v35)
  {
    v36 = *(const float **)(v453 + 200);
    if (v36)
    {
      if (v433[1] < v447)
      {
        if (SuppressorClassLogScope(void)::once != -1)
          dispatch_once(&SuppressorClassLogScope(void)::once, &__block_literal_global_5244);
        if (SuppressorClassLogScope(void)::scope)
        {
          v37 = *(NSObject **)SuppressorClassLogScope(void)::scope;
          if (!*(_QWORD *)SuppressorClassLogScope(void)::scope)
            goto LABEL_37;
        }
        else
        {
          v37 = MEMORY[0x1E0C81028];
        }
        if (os_log_type_enabled(v37, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)__B = 136315394;
          *(_QWORD *)&__B[4] = "LPCore.cpp";
          *(_WORD *)&__B[12] = 1024;
          *(_DWORD *)&__B[14] = 1310;
          v44 = "%25s:%-5d Update index size is too small.";
          goto LABEL_36;
        }
        goto LABEL_37;
      }
      v38 = *(_DWORD *)(v34 + 212);
      if (!v38)
        goto LABEL_45;
      v39 = *(_QWORD *)(v34 + 216) + 1;
      *(_QWORD *)(v34 + 216) = v39;
      if (*(float *)(v34 + 16) * 0.5 < (double)(unint64_t)v39)
        *(_BYTE *)(v34 + 5) = 1;
      v40 = v38 - 1;
      v41 = 0;
      v42 = 1;
      v438 = v34;
      v432 = v35;
      switch(v40)
      {
        case 0:
        case 3:
          goto LABEL_149;
        case 1:
          *(_WORD *)(v34 + 1) = 256;
          *(_BYTE *)(v34 + 3) = 0;
          v43 = (float *)v447;
          goto LABEL_161;
        case 2:
          v42 = 0;
          v41 = 1;
LABEL_149:
          v179 = v36;
          *(_BYTE *)(v34 + 1) = v41;
          *(_BYTE *)(v34 + 3) = 1;
          *(_BYTE *)(v34 + 2) = v42;
          *(float *)__B = 1.0 - *(float *)(v34 + 156);
          vDSP_vsmul(*(const float **)(v34 + 368), 1, (const float *)(v34 + 156), *(float **)(v34 + 440), 1, v447);
          vDSP_vsmul(v179, 1, (const float *)__B, *(float **)(v438 + 464), 1, v447);
          vDSP_vadd(*(const float **)(v438 + 464), 1, *(const float **)(v34 + 440), 1, *(float **)(v34 + 368), 1, v447);
          v34 = v438;
          v43 = (float *)v447;
          v36 = v179;
          v180 = v432;
          if (*(float *)(v438 + 124) > *(float *)(v438 + 96)
            && v433[1] == v447
            && *(float *)(v438 + 112) > *(float *)(v438 + 56)
            && (_DWORD)v452)
          {
            v181 = 0;
            v182 = *v433;
            do
            {
              if (((*(_QWORD *)(v182 + (((unint64_t)v181 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> (char)v181) & 1) != 0
                && *(float *)(*(_QWORD *)(v34 + 416) + 4 * (_QWORD)v181) <= *(float *)(v34 + 48))
              {
                v183 = v179[(_QWORD)v181];
              }
              else
              {
                v183 = *(float *)(*(_QWORD *)(v34 + 368) + 4 * (_QWORD)v181);
                v179[(_QWORD)v181] = v183;
              }
              v184 = v180[(_QWORD)v181];
              if (v184 < v183)
              {
                v185 = v184 * 0.95 + v183 * 0.05;
                v179[(_QWORD)v181] = v185;
              }
              v181 = (float *)((char *)v181 + 1);
            }
            while (v43 != v181);
          }
LABEL_161:
          v187 = *(float *)(v34 + 148);
          v186 = v34 + 148;
          v188 = *(float **)(v186 + 292);
          *(_DWORD *)__B = 0;
          v431 = (float *)v36;
          vDSP_sve(v36, 1, (float *)__B, (vDSP_Length)v43);
          v189 = 1.0 / (((double)v452 + (double)v452) * (double)v452);
          v190 = log10f((float)(v189 * *(float *)__B) + 2.2204e-16);
          v191 = v438;
          *(float *)(v438 + 124) = v187 + (float)(v190 * 10.0);
          vDSP_vsub(v431, 1, v432, 1, v188, 1, v447);
          vDSP_vmax(&NoiseSuppression::EPS, 0, v188, 1, v188, 1, v447);
          v192 = *(float *)v186;
          *(_DWORD *)__B = 0;
          vDSP_sve(v188, 1, (float *)__B, v447);
          v193 = log10f((float)(v189 * *(float *)__B) + 2.2204e-16);
          v195 = v438 + 240;
          v194 = *(_QWORD *)(v438 + 240);
          *(float *)(v438 + 128) = v192 + (float)(v193 * 10.0);
          v196 = *(float *)(v191 + 124) + -45.0;
          if (v196 < 0.0)
            v196 = 0.0;
          v197 = (float)(v196 / -3.0) + 18.0;
          v198 = v196 * -0.125 + 5.0;
          *(float *)(v195 - 44) = v197;
          *(float *)(v195 - 40) = v198;
          *(float *)(v195 - 72) = v197;
          (*(void (**)(uint64_t, const float *, _QWORD, vDSP_Length))(*(_QWORD *)v194 + 24))(v194, v432, 0, v447);
          v199 = (float *)v447;
          v200 = v438;
          if ((_DWORD)v452)
          {
            v201 = 0;
            v202 = *(_QWORD *)(v438 + 272);
            v203 = *(_QWORD *)(*(_QWORD *)v195 + 184);
            v204 = *(_QWORD *)(*(_QWORD *)v195 + 304);
            do
            {
              if (((*(_QWORD *)(v204 + (((unint64_t)v201 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> (char)v201) & 1) != 0)
                *(_DWORD *)(v202 + 4 * (_QWORD)v201) = *(_DWORD *)(v203 + 4 * (_QWORD)v201);
              v201 = (float *)((char *)v201 + 1);
            }
            while (v199 != v201);
          }
          (*(void (**)(_QWORD, float *, _QWORD))(**(_QWORD **)(v200 + 224) + 24))(*(_QWORD *)(v200 + 224), v443, *(_QWORD *)(v200 + 440));
          v205 = (float **)(v438 + 440);
          NoiseSuppression::Noise::LPCore::TimeBuffer2PowerSpectrum(*(NoiseSuppression::Noise::LPCore **)(v438 + 440), *(float **)(v438 + 464), (float *)v452, *(VPTimeFreqConverter **)(v438 + 248), *(VPTimeFreqConverter **)(v438 + 560), *(float **)(v438 + 584), v206);
          v430 = (char **)(v438 + 464);
          v207 = *(const float **)(v438 + 464);
          v208 = *(float **)(v438 + 392);
          v209 = *v205;
          *(_DWORD *)__B = *(_DWORD *)(v438 + 104);
          *(float *)&v467 = (float)(1.0 - *(float *)__B) * 0.333;
          *(float *)&__Z.realp = (float)(1.0 - *(float *)__B) * 0.667;
          *v209 = 0.0;
          v210 = (v452 - 1);
          vDSP_vsmul(v207, 1, (const float *)&v467, v209 + 1, 1, v210);
          vDSP_vsma(v207 + 1, 1, (const float *)&v467, v209, 1, v209, 1, v210);
          vDSP_vsma(v207, 1, (const float *)&__Z, v209, 1, v209, 1, v447);
          vDSP_vsma(v208, 1, (const float *)__B, v209, 1, v208, 1, v447);
          v211 = *(_QWORD *)(v438 + 232);
          v212 = *v205;
          *(_DWORD *)__B = 1;
          *(_DWORD *)&__B[8] = 1;
          *(_DWORD *)&__B[12] = 4 * v447;
          *(_QWORD *)&__B[16] = v443;
          LODWORD(v467) = 1;
          v468 = 1;
          v469 = 4 * v447;
          v434 = v212;
          v470 = v212;
          (*(void (**)(_QWORD, vDSP_Length, _BYTE *, vDSP_Length *))(**(_QWORD **)(v211 + 64) + 32))(*(_QWORD *)(v211 + 64), v452, __B, &v467);
          memcpy(*(void **)(v211 + 96), (const void *)(*(_QWORD *)(v211 + 96) + 4 * *(unsigned int *)(v211 + 8)), 4 * *(unsigned int *)(v211 + 8));
          memcpy((void *)(*(_QWORD *)(v211 + 96) + 4 * *(unsigned int *)(v211 + 8)), v434, 4 * *(unsigned int *)(v211 + 8));
          bzero(*(void **)(v211 + 120), *(_QWORD *)(v211 + 128) - *(_QWORD *)(v211 + 120));
          v213 = (float *)(*(_QWORD *)(v211 + 120) + ((2 * *(unsigned int *)(v211 + 12)) & 0x1FFFFFFFCLL));
          __Z.realp = *(float **)(v211 + 120);
          __Z.imagp = v213;
          v214 = *(const DSPComplex **)(v211 + 96);
          v215 = (uint64_t)(*(_QWORD *)(v211 + 104) - (_QWORD)v214) >> 2;
          vDSP_ctoz(v214, 2, &__Z, 1, v215 >> 1);
          MultiRadixRealFFT::RealInPlaceTransform((MultiRadixRealFFT *)(v211 + 48), &__Z, 1, v216);
          v217 = *__Z.realp;
          v218 = *__Z.imagp;
          vDSP_zvcmul(&__Z, 1, &__Z, 1, &__Z, 1, (unint64_t)*(unsigned int *)(v211 + 12) >> 1);
          *__Z.realp = v217 * v217;
          *__Z.imagp = v218 * v218;
          MultiRadixRealFFT::RealInPlaceTransform((MultiRadixRealFFT *)(v211 + 48), &__Z, -1, v218 * v218);
          vDSP_ztoc(&__Z, 1, *(DSPComplex **)(v211 + 144), 2, v215 >> 1);
          v473 = 1.0 / (float)*(unsigned int *)(v211 + 12);
          vDSP_vsmul(*(const float **)(v211 + 144), 1, &v473, *(float **)(v211 + 144), 1, v215);
          v219 = *(float **)(v211 + 144);
          v472 = *v219;
          vDSP_vsdiv(v219, 1, &v472, v219, 1, *(unsigned int *)(v211 + 12));
          v220 = *(float *)(v211 + 4);
          v221 = vcvtms_u32_f32(v220 / 56.0);
          v222 = vcvtms_u32_f32(v220 / 500.0) - 1;
          if (v222 >= v221)
          {
            v223 = 0;
            v225 = 0.0;
          }
          else
          {
            v223 = 0;
            v224 = (float *)(*(_QWORD *)(v211 + 144) + 4 * (int)v222);
            v225 = 0.0;
            do
            {
              if (*v224 >= *(v224 - 1) && *v224 >= v224[1] && v225 < *v224)
              {
                v223 = v222;
                v225 = *v224;
              }
              ++v222;
              ++v224;
            }
            while (v222 < v221);
          }
          *(float *)(v211 + 16) = v225;
          *(_DWORD *)(v211 + 20) = v223;
          *(_DWORD *)(v211 + 40) = 0;
          v226 = *(_DWORD *)(v211 + 24);
          if (v226)
          {
            v227 = 0.0;
            v228 = (double)vcvtad_u64_f64(*(float *)(v211 + 4) * 0.0001875);
            while (1)
            {
              v229 = *(unsigned int *)(v211 + 28);
              v230 = *(_DWORD *)(v211 + 32) - 1;
              v231 = v229 - 1;
              v446 = v223;
              if (v223)
              {
                v232 = *(_DWORD *)(v211 + 36);
                if (v223 - v232 > v230)
                  v230 = v223 - v232;
                v233 = v232 + v223;
                if (v231 >= v233)
                  v231 = v233;
              }
              v437 = v227;
              v234 = (char *)&v434[LODWORD(v227) * (int)v452 / v226];
              v235 = (float)(v452 / v226);
              memmove(*(void **)(v211 + 72), (const void *)(*(_QWORD *)(v211 + 72) + 4 * (int)v235), 4 * v229);
              memcpy((void *)(*(_QWORD *)(v211 + 72) + 4 * *(unsigned int *)(v211 + 28)), v234, 4 * (int)v235);
              LODWORD(__Z.realp) = 0;
              v436 = (float *)v234;
              v435 = (unint64_t)v235;
              vDSP_svesq((const float *)v234, 1, (float *)&__Z, (unint64_t)v235);
              v236 = (int)v235;
              v237 = *(int *)(v211 + 28);
              v472 = 0.0;
              v238 = (const float *)(*(_QWORD *)(v211 + 72) + 4 * ((int)v237 + ~v230));
              vDSP_dotpr(v238, 1, v238, 1, &v472, v236);
              if (v230 <= v231)
                break;
              v223 = v446;
              v239 = 0.0;
              if (v446 >= 1)
              {
                v240 = v436;
                v241 = v435;
LABEL_199:
                v473 = -v239;
                vDSP_vsma((const float *)(*(_QWORD *)(v211 + 72) + 4 * v223), 1, &v473, (const float *)(*(_QWORD *)(v211 + 72) + 4 * v237), 1, v240, 1, v241);
                v239 = v473;
                v223 = v446;
              }
LABEL_200:
              v252 = *(float *)(v211 + 40) - v239;
              v253 = *(_DWORD *)(v211 + 20);
              v226 = *(_DWORD *)(v211 + 24);
              *(float *)(v211 + 40) = v252;
              if (vabdd_f64((double)v223, (double)v253) > v228)
                v223 = v253;
              LODWORD(v227) = LODWORD(v437) + 1;
              if (LODWORD(v437) + 1 >= v226)
              {
                v254 = v252 / (float)v226;
                goto LABEL_205;
              }
            }
            v242 = 0;
            v243 = v231 + 1;
            v244 = ~v230;
            v245 = (int)v235 + ~v230;
            v239 = 0.0;
            LODWORD(v445) = v446;
            v246 = 9000000000.0;
            do
            {
              v247 = *(_DWORD *)(v211 + 28);
              v248 = v244 + v242 + v247;
              v473 = 0.0;
              vDSP_dotpr((const float *)(*(_QWORD *)(v211 + 72) + 4 * v237), 1, (const float *)(*(_QWORD *)(v211 + 72) + 4 * v248), 1, &v473, v236);
              if (v242)
              {
                v249 = *(_QWORD *)(v211 + 72);
                v472 = v472
                     - (float)(*(float *)(v249 + 4 * (v245 + v242 + v247))
                             * *(float *)(v249 + 4 * (v245 + v242 + v247)));
                v250 = v472 + (float)(*(float *)(v249 + 4 * v248) * *(float *)(v249 + 4 * v248));
                v472 = v250;
              }
              else
              {
                v250 = v472;
              }
              if (v250 != 0.0)
              {
                v251 = v473 / v250;
                if ((float)(*(float *)&__Z.realp - (float)(v251 * v473)) < v246 && v251 >= 0.0)
                {
                  v239 = v251;
                  v246 = *(float *)&__Z.realp - (float)(v251 * v473);
                  LODWORD(v445) = v244 + v242 + v247;
                  v446 = v230;
                }
              }
              ++v230;
              --v242;
            }
            while (v243 != v230);
            v223 = v446;
            if (v446 <= 0)
              goto LABEL_200;
            if (v239 > 1.0)
              v239 = 0.985;
            v240 = v436;
            v241 = v435;
            v223 = v445;
            goto LABEL_199;
          }
          v254 = NAN;
LABEL_205:
          *(float *)(v211 + 40) = v254;
          v255 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v438 + 224) + 32))(*(_QWORD *)(v438 + 224));
          v257 = *(const float **)v255;
          v256 = *(_QWORD *)(v255 + 8);
          if ((v258 & 1) == 0
          {
            NoiseSuppression::Noise::LPCore::ComputeImpulseFeature(float const*,unsigned int)::LEN1 = llround(*(float *)(v438 + 8) * 0.003);
          }
          v259 = v256 - (_QWORD)v257;
          if ((v260 & 1) == 0
          {
            NoiseSuppression::Noise::LPCore::ComputeImpulseFeature(float const*,unsigned int)::LEN2 = llround(*(float *)(v438 + 8) * 0.003);
          }
          LODWORD(v467) = 0;
          *(_QWORD *)__B = 0;
          vDSP_maxmgvi(v257, 1, (float *)&v467, (vDSP_Length *)__B, (v259 >> 2));
          v261 = v259 >> 2;
          if ((v259 >> 2))
          {
            v262 = 0;
            v263 = 0.0;
            v264 = 0.0;
            v265 = 0.0;
            v266 = v452;
            do
            {
              v268 = v262 < *(int *)__B
                          - (uint64_t)NoiseSuppression::Noise::LPCore::ComputeImpulseFeature(float const*,unsigned int)::LEN1
                  || v262 > NoiseSuppression::Noise::LPCore::ComputeImpulseFeature(float const*,unsigned int)::LEN2
                          + (uint64_t)*(int *)__B;
              v269 = v257[v262];
              if (!v268)
              {
                v265 = v265 + (float)(v269 * v269);
                v263 = v263 + 1.0;
              }
              v264 = v264 + (float)(v269 * v269);
              ++v262;
            }
            while ((v259 >> 2) != v262);
            _ZF = v263 == 0.0;
            v270 = (float)(v265 / v263) + 2.2204e-16;
            if (_ZF)
              v270 = 2.2204e-16;
          }
          else
          {
            v264 = 0.0;
            v270 = 2.2204e-16;
            v266 = v452;
          }
          v271 = v266 == 0;
          v273 = *(_QWORD *)(v438 + 232);
          v272 = v438 + 232;
          *(float *)(*(_QWORD *)(v272 + 376) + 16) = (float)((float)(v264 / (float)v261) + 2.2204e-16)
                                                     / v270;
          v274 = *(float *)(v273 + 16);
          v275 = (float)(v274 * (float)(1.0 - *(float *)(v272 - 96)))
               + (float)(*(float *)(v272 - 96) * *(float *)(v272 - 88));
          *(float *)(v272 - 92) = v274;
          *(float *)(v272 - 88) = v275;
          v276 = (uint64_t)(*(_QWORD *)(v272 + 240) - *(_QWORD *)(v272 + 232)) >> 2;
          *(_DWORD *)__B = 0;
          std::vector<float>::assign(v430, v276, __B);
          NoiseSuppression::Noise::LPCore::TimeBuffer2PowerSpectrum(*(NoiseSuppression::Noise::LPCore **)(v438 + 440), *(float **)(v272 + 232), (float *)v452, *(VPTimeFreqConverter **)(v438 + 256), *(VPTimeFreqConverter **)(v438 + 560), *(float **)(v438 + 584), v277);
          NoiseSuppression::Noise::LPCore::TimeBuffer2PowerSpectrum((NoiseSuppression::Noise::LPCore *)(*(_QWORD *)(*(_QWORD *)v272 + 96) + 4 * v447), *(float **)(v438 + 488), (float *)v447, *(VPTimeFreqConverter **)(v438 + 264), *(VPTimeFreqConverter **)(v438 + 560), *(float **)(v438 + 584), v278);
          if (v271)
          {
            v280 = v438;
            v283 = *(_QWORD *)(v438 + 240);
          }
          else
          {
            v279 = 0;
            v280 = v438;
            v281 = *(_QWORD *)(v438 + 296);
            v282 = *(_QWORD *)(v438 + 392);
            v283 = *(_QWORD *)(v438 + 240);
            v284 = *(_QWORD *)(v283 + 304);
            v285 = (float *)v447;
            do
            {
              if (((*(_QWORD *)(v284 + (((unint64_t)v279 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> (char)v279) & 1) != 0)
                *(_DWORD *)(v281 + 4 * (_QWORD)v279) = *(_DWORD *)(v282 + 4 * (_QWORD)v279);
              v279 = (float *)((char *)v279 + 1);
            }
            while (v285 != v279);
            v286 = 0;
            v287 = *(_QWORD *)(v280 + 320);
            v288 = *(_QWORD *)(v280 + 464);
            do
            {
              if (((*(_QWORD *)(v284 + (((unint64_t)v286 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> (char)v286) & 1) != 0)
                *(_DWORD *)(v287 + 4 * (_QWORD)v286) = *(_DWORD *)(v288 + 4 * (_QWORD)v286);
              v286 = (float *)((char *)v286 + 1);
            }
            while (v285 != v286);
          }
          if (v280 + 512 != v283 + 208)
          {
            std::vector<float>::__assign_with_size[abi:ne180100]<float const*,float const*>((char *)(v280 + 512), *(char **)(v283 + 208), *(_QWORD *)(v283 + 216), (uint64_t)(*(_QWORD *)(v283 + 216) - *(_QWORD *)(v283 + 208)) >> 2);
            v280 = v438;
          }
          vDSP_vsmul(*(const float **)(v280 + 512), 1, (const float *)(v280 + 88), *(float **)(v280 + 512), 1, (uint64_t)(*(_QWORD *)(v280 + 520) - *(_QWORD *)(v280 + 512)) >> 2);
          *(_DWORD *)__B = 0;
          if ((v289 & 1) == 0
          {
            v420 = (float)(2 * *(_DWORD *)(v438 + 12));
            LODWORD(v421) = vcvtas_u32_f32(1100.0 / (float)(*(float *)(v438 + 8) / v420));
            v422 = (v420 >> 1) - 1;
            if (v422 >= v421)
              v421 = v421;
            else
              v421 = v422;
            NoiseSuppression::Noise::LPCore::ComputeRegularization(void)::ind1 = v421;
          }
          v291 = v438;
          if ((v290 & 1) == 0
          {
            v423 = (float)(2 * *(_DWORD *)(v291 + 12));
            LODWORD(v424) = vcvtas_u32_f32(1250.0 / (float)(*(float *)(v291 + 8) / v423));
            v425 = (v423 >> 1) - 1;
            if (v425 >= v424)
              v424 = v424;
            else
              v424 = v425;
            NoiseSuppression::Noise::LPCore::ComputeRegularization(void)::ind2 = v424;
          }
          vDSP_meanv((const float *)(*(_QWORD *)(v291 + 512)+ 4 * NoiseSuppression::Noise::LPCore::ComputeRegularization(void)::ind1), 1, (float *)__B, NoiseSuppression::Noise::LPCore::ComputeRegularization(void)::ind2- NoiseSuppression::Noise::LPCore::ComputeRegularization(void)::ind1+ 1);
          LODWORD(v467) = 0;
          vDSP_maxv(*(const float **)(v438 + 512), 1, (float *)&v467, (uint64_t)(*(_QWORD *)(v438 + 520) - *(_QWORD *)(v438 + 512)) >> 2);
          v292 = v438;
          v293 = (char *)(v438 + 560);
          v294 = (char *)(v438 + 584);
          v295 = *(_DWORD **)(v438 + 512);
          v296 = NoiseSuppression::Noise::LPCore::ComputeRegularization(void)::ind2 + 1;
          do
          {
            *v295++ = *(_DWORD *)__B;
            --v296;
          }
          while (v296);
          LODWORD(__Z.realp) = 0;
          v473 = 0.0;
          v297 = *(_QWORD *)(v292 + 240);
          if (v293 != (char *)(v297 + 184))
          {
            std::vector<float>::__assign_with_size[abi:ne180100]<float const*,float const*>(v293, *(char **)(v297 + 184), *(_QWORD *)(v297 + 192), (uint64_t)(*(_QWORD *)(v297 + 192) - *(_QWORD *)(v297 + 184)) >> 2);
            v292 = v438;
          }
          vDSP_vsub(*(const float **)(v292 + 272), 1, *(const float **)(v292 + 560), 1, *(float **)(v292 + 560), 1, v447);
          v298 = (const float **)(v438 + 560);
          vDSP_vthr(*(const float **)(v438 + 560), 1, &NoiseSuppression::EPS, *(float **)(v438 + 560), 1, v447);
          vDSP_vadd(*v298, 1, *(const float **)(v438 + 512), 1, (float *)*v298, 1, v447);
          std::vector<float>::__assign_with_size[abi:ne180100]<float const*,float const*>(v294, *(char **)(v438 + 392), *(_QWORD *)(v438 + 400), (uint64_t)(*(_QWORD *)(v438 + 400) - *(_QWORD *)(v438 + 392)) >> 2);
          vDSP_vsub(*(const float **)(v438 + 296), 1, *(const float **)(v438 + 392), 1, *(float **)(v438 + 584), 1, v447);
          v299 = (const float **)(v438 + 584);
          vDSP_vthr(*(const float **)(v438 + 584), 1, &NoiseSuppression::EPS, *(float **)(v438 + 584), 1, v447);
          v300 = (const float **)(v438 + 512);
          vDSP_vadd(*v299, 1, *(const float **)(v438 + 512), 1, (float *)*v299, 1, v447);
          vDSP_vdiv(*v299, 1, *v298, 1, *(float **)(v438 + 536), 1, v447);
          v302 = (int *)(v438 + 64);
          v301 = *(int *)(v438 + 64);
          v303 = (int *)(v438 + 68);
          v304 = *(_DWORD *)(v438 + 68) - (int)v301 + 1;
          vDSP_meanv(&(*v298)[v301], 1, (float *)&__Z, v304);
          vDSP_meanv(&(*v299)[v301], 1, &v473, v304);
          v305 = log10f((float)(*(float *)&__Z.realp / v473) + 2.2204e-16) * 20.0;
          if (v305 >= 0.0)
            v306 = v305;
          else
            v306 = 0.0;
          v307 = (_DWORD *)(v438 + 72);
          v308 = *v303;
          v309 = *(_DWORD *)(v438 + 72) - (int)v308 + 1;
          vDSP_meanv(&(*v298)[v308], 1, (float *)&__Z, v309);
          vDSP_meanv(&(*v299)[v308], 1, &v473, v309);
          v310 = log10f((float)(*(float *)&__Z.realp / v473) + 2.2204e-16) * 20.0;
          if (v310 < 0.0)
            v310 = 0.0;
          v446 = LODWORD(v310);
          vDSP_vsub(*v300, 1, *v298, 1, (float *)*v298, 1, ((*(_QWORD *)(v438 + 520) - (_QWORD)*v300) >> 2));
          *(_DWORD *)__B = 0;
          LODWORD(v467) = 0;
          vDSP_sve(&(*v298)[*v302], 1, (float *)__B, *v303 - *v302 + 1);
          vDSP_sve(&(*v298)[*v303], 1, (float *)&v467, *v307 - *v303 + 1);
          v437 = *(float *)&v467;
          LODWORD(v436) = *(_DWORD *)__B;
          vDSP_vsub(*(const float **)(v438 + 272), 1, *(const float **)(v438 + 488), 1, (float *)*v298, 1, v447);
          vDSP_vthr(*v298, 1, &NoiseSuppression::EPS, (float *)*v298, 1, v447);
          vDSP_vadd(*v298, 1, *v300, 1, (float *)*v298, 1, v447);
          vDSP_vsub(*(const float **)(v438 + 320), 1, *(const float **)(v438 + 464), 1, (float *)*v299, 1, v447);
          vDSP_vthr(*v299, 1, &NoiseSuppression::EPS, (float *)*v299, 1, v447);
          vDSP_vadd(*v299, 1, *v300, 1, (float *)*v299, 1, v447);
          vDSP_vdiv(*v299, 1, *v298, 1, *(float **)(v438 + 416), 1, v447);
          v311 = (float)(2 * *(_DWORD *)(v438 + 12));
          *(float *)v312.i32 = *(float *)(v438 + 8) / v311;
          *(uint32x2_t *)&v313 = vmin_u32((uint32x2_t)vdup_n_s32((v311 >> 1) - 1), vcvt_u32_f32(vrnda_f32(vdiv_f32((float32x2_t)0x42C80000443B8000, (float32x2_t)vdup_lane_s32(v312, 0)))));
          v445 = v313;
          v314 = (int)v313 - DWORD1(v313) + 1;
          vDSP_meanv(&(*v298)[SDWORD1(v313)], 1, (float *)&__Z, v314);
          vDSP_meanv(&(*v299)[SDWORD1(v445)], 1, &v473, v314);
          v315 = v438;
          v316 = (char **)(v438 + 416);
          v317 = log10f((float)(*(float *)&__Z.realp / v473) + 2.2204e-16) * 20.0;
          if (v317 >= 0.0)
            v319 = v317;
          else
            v319 = 0.0;
          v320 = *(float *)(v315 + 204);
          if (*(float *)(v315 + 128) < v320 || *(float *)(v315 + 124) < v320)
          {
            if ((v321 & 1) == 0
            {
              v426 = (float)(2 * *(_DWORD *)(v315 + 12));
              v427 = vcvtas_u32_f32(160.0 / (float)(*(float *)(v315 + 8) / v426));
              if ((v426 >> 1) - 1 < v427)
                v427 = (v426 >> 1) - 1;
              NoiseSuppression::Noise::LPCore::ApplyRules(unsigned int &,unsigned int &,unsigned int &)::v160HzBin = v427;
            }
            v322 = *(_QWORD *)(v315 + 416);
            v323 = *(_QWORD *)(v315 + 424) - v322;
            v324 = v323 >> 2;
            LODWORD(v467) = 0;
            if (*(float *)(v315 + 144) + 0.08 <= 0.3)
              v325 = *(float *)(v315 + 144) + 0.08;
            else
              v325 = 0.3;
            v326 = 0.0;
            if ((_DWORD)v324)
            {
              v327 = 0;
              v328 = v324 - 1;
              v329 = (v323 >> 2);
              while (*(float *)(v322 + 4 * v327) <= 2.0)
              {
                if (v329 == ++v327)
                  goto LABEL_262;
              }
              v328 = v327;
LABEL_262:
              v330 = v328;
              if (v328 < v324)
              {
                v331 = 0;
                v332 = 0;
                do
                {
                  if (*(float *)(v322 + 4 * (int)v330 + 4 * v331) > 2.0)
                    v332 = v330 + v331;
                  ++v331;
                }
                while (v330 + v331 < v324);
                v326 = (float)v332;
              }
            }
            else
            {
              v330 = -1;
            }
            v333 = *(float *)(*(_QWORD *)(v315 + 232) + 40);
            v334 = *(_DWORD *)(v315 + 20);
            v335 = *(float *)(v315 + 8);
            *(_DWORD *)__B = 0;
            vDSP_sve((const float *)(v322+ 4* NoiseSuppression::Noise::LPCore::ApplyRules(unsigned int &,unsigned int &,unsigned int &)::v160HzBin), 1, (float *)__B, (v324- NoiseSuppression::Noise::LPCore::ApplyRules(unsigned int &,unsigned int &,unsigned int &)::v160HzBin));
            v336 = *(float *)__B;
            v337 = *(_QWORD *)(v438 + 416);
            *(_QWORD *)__B = 0;
            vDSP_maxvi((const float *)(v337+ 4* NoiseSuppression::Noise::LPCore::ApplyRules(unsigned int &,unsigned int &,unsigned int &)::v160HzBin), 1, (float *)&v467, (vDSP_Length *)__B, (v324- NoiseSuppression::Noise::LPCore::ApplyRules(unsigned int &,unsigned int &,unsigned int &)::v160HzBin));
            v339 = v335 / (float)(2 * v334);
            v340 = v339 * (float)v330;
            v341 = v339 * v326;
            v318 = v333;
            v342 = v333 < 0.8;
            v315 = v438;
            if (v333 >= 0.8)
              v343 = 1;
            else
              v343 = 2;
            v338 = v325;
            if (*(float *)(v438 + 140) < v338)
              v342 = v343;
            if (*(float *)(v438 + 128) < *(float *)(v438 + 124))
              ++v342;
            if (v340 > 800.0)
              ++v342;
            if (v341 < 300.0)
              ++v342;
            if ((float)((float)(*(float *)&v467 + 0.001) / (float)(v336 + 0.001)) <= 0.8)
              v344 = 0;
            else
              v344 = -1;
            if (v342 != v344)
            {
              v345 = (uint64_t)(*(_QWORD *)(v438 + 424) - *(_QWORD *)(v438 + 416)) >> 2;
              *(_DWORD *)__B = 953267991;
              std::vector<float>::assign(v316, v345, __B);
              v319 = 0.0;
              v315 = v438;
            }
          }
          v346 = *(float *)(v315 + 112);
          if (v306 <= v346)
            v306 = (float)(v306 * (float)(1.0 - *(float *)(v315 + 120))) + (float)(v346 * *(float *)(v315 + 120));
          v347 = v452;
          v348 = (float *)v447;
          v349 = v446;
          *(float *)(v315 + 112) = v306;
          *(_DWORD *)(v315 + 116) = v349;
          v350 = 0.0;
          if (v306 >= 0.5)
            v350 = v319;
          v351 = *(float *)(v315 + 108);
          if (v350 <= v351)
            v350 = (float)(v350 * (float)(1.0 - *(float *)(v315 + 120))) + (float)(v351 * *(float *)(v315 + 120));
          *(float *)(v315 + 108) = v350;
          if (*(_BYTE *)(v315 + 4))
          {
            **(_DWORD **)(v315 + 608) = v349;
            if ((v352 & 1) == 0
            {
              *(float *)&v428 = exp(-1.0 / (float)(*(float *)(v438 + 16) * 0.0738));
              NoiseSuppression::Noise::LPCore::ZeroCrossingRate(float const*,unsigned int)::alpha = v428;
            }
            *(_QWORD *)__B = 0;
            v467 = 0;
            vDSP_nzcros(v443, 1, (vDSP_Length)v348, &v467, (vDSP_Length *)__B, (vDSP_Length)v348);
            v353 = (float)v452;
            v354 = v438;
            v355 = (float)((float)((float)*(unint64_t *)__B / (float)v452)
                         * (float)(1.0
                                 - *(float *)&NoiseSuppression::Noise::LPCore::ZeroCrossingRate(float const*,unsigned int)::alpha))
                 + (float)(*(float *)(v438 + 160)
                         * *(float *)&NoiseSuppression::Noise::LPCore::ZeroCrossingRate(float const*,unsigned int)::alpha);
            *(float *)(v438 + 160) = v355;
            *(float *)(*(_QWORD *)(v354 + 608) + 4) = v355;
            *(_DWORD *)__B = 0;
            LODWORD(v467) = 0;
            vDSP_meanv(v443, 1, (float *)__B, v447);
            vDSP_measqv(v443, 1, (float *)&v467, v447);
            v356 = v437 / (*(float *)&v436 + 0.000001);
            v357 = 0.0;
            if (v347)
            {
              v348 = (float *)v447;
              v358 = (float *)v447;
              v315 = v438;
              v359 = v443;
              do
              {
                v360 = *v359++;
                v357 = v357
                     + (float)((float)((float)(v360 - *(float *)__B)
                                     * (float)((float)(v360 - *(float *)__B) * (float)(v360 - *(float *)__B)))
                             * (float)(v360 - *(float *)__B));
                v358 = (float *)((char *)v358 - 1);
              }
              while (v358);
            }
            else
            {
              v348 = (float *)v447;
              v315 = v438;
            }
            v361 = *(_QWORD *)(v315 + 608);
            *(float *)(v361 + 8) = fabsf((float)((float)(v357 / v353)/ (float)((float)((float)(*(float *)&v467- (float)(*(float *)__B * *(float *)__B))* (float)(*(float *)&v467- (float)(*(float *)__B * *(float *)__B)))+ 2.2204e-16))+ -3.0);
            *(float *)(v361 + 12) = v356;
            v350 = *(float *)(v315 + 108);
            v306 = *(float *)(v315 + 112);
          }
          __asm { FMOV            V2.2S, #1.0 }
          v365 = vadd_f32(*(float32x2_t *)(v315 + 180), _D2);
          *(float32x2_t *)(v315 + 180) = v365;
          v366 = *(float *)(v315 + 196);
          v367 = *(float *)(v315 + 168);
          if (v306 > v366 || v350 > v367)
          {
            v369 = v306 - v366;
            v365.i32[0] = 0;
            if (v369 < 0.0)
              v369 = 0.0;
            v370 = *(float *)(v315 + 32);
            v371 = v369 / v370;
            v372 = v350 - v367;
            if (v372 < 0.0)
              v372 = 0.0;
            v373 = v371 + (float)(v372 / v370);
            v368 = *(float *)(v315 + 116);
            v374 = v368 + v373;
            if (v374 > 1.0)
              v374 = 1.0;
            *(_DWORD *)(v315 + 180) = 0;
            if (v374 < *(float *)(v315 + 188))
              v374 = *(float *)(v315 + 188);
            *(float *)(v315 + 188) = v374;
          }
          else
          {
            v368 = *(float *)(v315 + 116);
          }
          v375 = *(float **)(v315 + 608);
          v376 = v375[4];
          v377 = *(float *)(v315 + 52);
          v378 = *(float *)(v315 + 128);
          v379 = *(float *)(v315 + 100);
          if (v368 <= *(float *)(v315 + 200) || v376 <= v377 || v378 <= v379)
          {
            if (*(_BYTE *)(v315 + 4)
              && *v375 > 1.0
              && v375[1] > 0.125
              && v375[2] < 1.5
              && v376 > 0.7
              && v375[3] > 0.75
              && v378 > v379)
            {
              v380 = v368 + 0.1;
              if (v380 <= 1.0)
                v381 = v380 * 0.5;
              else
                v381 = 0.5;
              v368 = v381 + (float)(*(float *)(v315 + 192) * 0.5);
            }
            else
            {
              v368 = *(float *)(v315 + 192) * 0.5;
            }
          }
          else
          {
            if (v368 > 1.0)
              v368 = 1.0;
            *(_DWORD *)(v315 + 184) = 0;
          }
          *(float *)(v315 + 192) = v368;
          LODWORD(v318) = *(_DWORD *)(v315 + 12);
          if ((double)*(unint64_t *)&v318 / *(float *)(v315 + 8) * v365.f32[0] <= *(float *)(v315 + 36))
          {
            v382 = *(float *)(v315 + 172);
            v383 = *(float *)(v315 + 188);
            _NF = v382 < v383;
          }
          else
          {
            v382 = *(float *)(v315 + 188);
            v383 = *(float *)(v315 + 172);
            _NF = v382 < v383;
            if (v382 <= v383)
            {
              *(float *)(v315 + 172) = (float)(v382 * (float)(1.0 - *(float *)(v315 + 132)))
                                     + (float)(*(float *)(v315 + 132) * v383);
              *(_DWORD *)(v315 + 188) = 0;
LABEL_335:
              v385 = (char **)(v315 + 536);
              if (v368 > 1.0)
                v368 = 1.0;
              *(float *)(v315 + 176) = v368;
              if (v375[4] < v377 && v350 < 1.0)
                *(_QWORD *)(v315 + 172) = 0;
              v386 = 0;
              v387 = *(float *)(v315 + 124);
              v388 = 1;
              do
              {
                v389 = v388;
                v390 = v315 + 4 * v386;
                if (v387 >= *(float *)(v390 + 204))
                  *(_DWORD *)(v390 + 172) = 1065353216;
                v388 = 0;
                v386 = 1;
              }
              while ((v389 & 1) != 0);
              v391 = v315 + 172;
              v392 = *(float *)(v315 + 172);
              if (v392 >= *(float *)(v315 + 44))
              {
                v394 = *(float *)(v315 + 152);
                v393 = v315 + 152;
                *(float *)__B = 1.0 - v394;
                vDSP_vsmul(v431, 1, (const float *)v393, *(float **)(v393 + 288), 1, (vDSP_Length)v348);
                vDSP_vsmul(*(const float **)(v438 + 344), 1, (const float *)__B, *(float **)(v438 + 464), 1, v447);
                vDSP_vadd(*(const float **)(v438 + 464), 1, *(const float **)(v393 + 288), 1, *(float **)(v438 + 344), 1, (uint64_t)(*(_QWORD *)(v438 + 352) - *(_QWORD *)(v438 + 344)) >> 2);
              }
              else
              {
                *(float *)__B = 1.0 - v392;
                vDSP_vsmul(*(const float **)(v315 + 344), 1, (const float *)(v315 + 172), *(float **)(v315 + 440), 1, (uint64_t)(*(_QWORD *)(v315 + 352) - *(_QWORD *)(v315 + 344)) >> 2);
                vDSP_vsmul(v432, 1, (const float *)__B, *(float **)(v438 + 464), 1, v447);
                vDSP_vadd(*(const float **)(v438 + 464), 1, *(const float **)(v438 + 440), 1, *(float **)(v438 + 344), 1, (uint64_t)(*(_QWORD *)(v438 + 352) - *(_QWORD *)(v438 + 344)) >> 2);
              }
              v395 = v438;
              v396 = *(float *)(v438 + 44);
              if (*(float *)(v438 + 172) < v396 && *(float *)(v438 + 176) >= v396)
                memcpy(*(void **)(v438 + 344), v432, 4 * (*(_DWORD *)(v438 + 68) + 1));
              if (*(_BYTE *)(v395 + 2) && *(_BYTE *)(v395 + 5))
              {
                v397 = *(float *)(v395 + 172);
                v398 = *(float *)(v395 + 44);
                v32 = v453;
                v33 = v452;
                v399 = v431;
                if (v397 <= v398)
                {
                  v400 = *(float *)(v395 + 176);
                  if (v400 <= v398)
                  {
                    *(float *)__B = 1.0 - v397;
                    vDSP_vsmul(*(const float **)(v395 + 344), 1, (const float *)__B, *(float **)(v395 + 440), 1, (uint64_t)(*(_QWORD *)(v395 + 352) - *(_QWORD *)(v395 + 344)) >> 2);
                    vDSP_vsmul(v431, 1, (const float *)v391, *(float **)(v438 + 464), 1, v447);
                    v395 = v438;
                    v417 = *(_QWORD *)(v438 + 352) - *(_QWORD *)(v438 + 344);
                    v399 = v431;
                    if (v417)
                    {
                      v418 = 0;
                      v419 = v417 >> 2;
                      if (v419 <= 1)
                        v419 = 1;
                      do
                      {
                        v399[v418] = *(float *)(*(_QWORD *)(v395 + 464) + 4 * v418)
                                   + *(float *)(*(_QWORD *)(v395 + 440) + 4 * v418);
                        ++v418;
                      }
                      while (v419 != v418);
                    }
                    v32 = v453;
                    v33 = v452;
                  }
                  else if (v400 >= v398)
                  {
                    v401 = *(unsigned int *)(v395 + 68);
                    if ((v401 & 0x80000000) == 0)
                    {
                      v402 = *(int **)(v395 + 344);
                      v403 = v401 + 1;
                      v404 = v431;
                      do
                      {
                        v405 = *v402++;
                        *(_DWORD *)v404++ = v405;
                        --v403;
                      }
                      while (v403);
                    }
                  }
                }
              }
              else
              {
                *(_QWORD *)(v395 + 112) = 0;
                *(_DWORD *)(v395 + 108) = 0;
                *(_QWORD *)(v391 + 8) = 0;
                *(_QWORD *)(v391 + 16) = 0;
                *(_QWORD *)v391 = 0;
                v406 = (uint64_t)(*(_QWORD *)(v395 + 424) - *(_QWORD *)(v395 + 416)) >> 2;
                *(_DWORD *)__B = 0;
                std::vector<float>::assign(v316, v406, __B);
                v407 = (uint64_t)(*(_QWORD *)(v438 + 544) - *(_QWORD *)(v438 + 536)) >> 2;
                *(_DWORD *)__B = 0;
                std::vector<float>::assign(v385, v407, __B);
                v32 = v453;
                v33 = v452;
                v395 = v438;
                v399 = v431;
              }
              if (*(_DWORD *)(v395 + 212) == 1 && *(_BYTE *)v395 && *(_BYTE *)(v395 + 5))
              {
                v408 = *(float *)(v395 + 56);
                v409 = *(float *)(v395 + 172) <= 0.9 || *(float *)(v395 + 108) <= v408;
                v410 = v409 || *(float *)(v395 + 112) <= v408;
                v411 = v410 || *(float *)(v395 + 124) <= *(float *)(v395 + 96);
                if (!v411 && (_DWORD)v33 != 0)
                {
                  v413 = 0;
                  v414 = *(_QWORD *)(v395 + 416);
                  v415 = *v433;
                  do
                  {
                    if (*(float *)(v414 + 4 * v413) > 1.7783
                      || (*(_QWORD *)(v415 + ((v413 >> 3) & 0x1FFFFFFFFFFFFFF8)) & (1 << v413)) == 0)
                    {
                      v399[v413] = *(float *)(v395 + 92) * v399[v413];
                    }
                    ++v413;
                  }
                  while (v447 != v413);
                }
              }
              goto LABEL_45;
            }
          }
          if (_NF)
            v382 = v383;
          *(float *)(v315 + 172) = v382;
          goto LABEL_335;
        default:
          goto LABEL_37;
      }
    }
  }
  if (SuppressorClassLogScope(void)::once != -1)
    dispatch_once(&SuppressorClassLogScope(void)::once, &__block_literal_global_5244);
  if (SuppressorClassLogScope(void)::scope)
  {
    v37 = *(NSObject **)SuppressorClassLogScope(void)::scope;
    if (!*(_QWORD *)SuppressorClassLogScope(void)::scope)
      goto LABEL_37;
  }
  else
  {
    v37 = MEMORY[0x1E0C81028];
  }
  if (os_log_type_enabled(v37, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)__B = 136315394;
    *(_QWORD *)&__B[4] = "LPCore.cpp";
    *(_WORD *)&__B[12] = 1024;
    *(_DWORD *)&__B[14] = 1305;
    v44 = "%25s:%-5d LPCore::UpdateLPC: Arguments cannot be null";
LABEL_36:
    _os_log_impl(&dword_1B5ED0000, v37, OS_LOG_TYPE_DEBUG, v44, __B, 0x12u);
  }
LABEL_37:
  if (SuppressorClassLogScope(void)::once != -1)
    dispatch_once(&SuppressorClassLogScope(void)::once, &__block_literal_global_5244);
  if (SuppressorClassLogScope(void)::scope)
  {
    v45 = *(NSObject **)SuppressorClassLogScope(void)::scope;
    if (!*(_QWORD *)SuppressorClassLogScope(void)::scope)
      goto LABEL_45;
  }
  else
  {
    v45 = MEMORY[0x1E0C81028];
  }
  if (os_log_type_enabled(v45, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)__B = 136315394;
    *(_QWORD *)&__B[4] = "suppressor_classV4.cpp";
    *(_WORD *)&__B[12] = 1024;
    *(_DWORD *)&__B[14] = 828;
    _os_log_impl(&dword_1B5ED0000, v45, OS_LOG_TYPE_ERROR, "%25s:%-5d Error processing lp noise estimate post-processor, possibly bypassed.", __B, 0x12u);
  }
LABEL_45:
  if (*(_DWORD *)(v32 + 428) != 2)
  {
    memcpy(*(void **)(v32 + 192), *(const void **)(v32 + 200), 4 * v33);
    goto LABEL_106;
  }
  LODWORD(__Z.realp) = 0;
  if ((int)v33 < 1)
  {
    v51 = 0.0;
    v50 = 0.0;
    v48 = 0.0;
  }
  else
  {
    v46 = *(float **)(v32 + 304);
    v47 = *(float **)(v32 + 312);
    v48 = 0.0;
    v49 = (float *)v447;
    v50 = 0.0;
    v51 = 0.0;
    v52 = *(float **)(v32 + 320);
    do
    {
      v53 = *v46++;
      if (v53 > 0.0)
        v48 = v48 + 1.0;
      v54 = *v47++;
      if (v54 > 0.0)
        v50 = v50 + 1.0;
      v55 = *v52++;
      if (v55 > 0.0)
        v51 = v51 + 1.0;
      v49 = (float *)((char *)v49 - 1);
    }
    while (v49);
  }
  v56 = (int)v33 > 0;
  *(float *)(v32 + 504) = v48 / v20;
  *(float *)(v32 + 508) = v50 / v20;
  v57 = v51 / v20;
  *(float *)(v32 + 512) = v57;
  *(float *)(v32 + 516) = (float)(v50 / v20) - v57;
  v472 = 0.0;
  v473 = (float)(*(float *)(v32 + 336) - *(float *)(v32 + 632)) / (float)(*(float *)(v32 + 636) - *(float *)(v32 + 632));
  vDSP_vsmul(*(const float **)(v32 + 160), 1, &v465, v449, 1, v33);
  vDSP_vsmul(*(const float **)(v453 + 152), 1, &v466, v451, 1, v452);
  vDSP_vsub(v451, 1, v449, 1, v451, 1, v452);
  vDSP_vsmul(*(const float **)(v453 + 288), 1, &v464, v449, 1, v452);
  vDSP_vmax(v451, 1, v449, 1, v451, 1, v452);
  v58 = v453;
  v59 = v452;
  v60 = v440;
  if (v56)
  {
    v61 = 0;
    v62 = *(_QWORD *)(v453 + 312);
    v63 = *(_QWORD *)(v453 + 208);
    do
    {
      v64 = v451;
      if (*(float *)(v62 + v61) <= 0.0)
        v64 = *(float **)(v58 + 152);
      *(float *)(v63 + v61) = v64[v61 / 4];
      v61 += 4;
    }
    while (v60 != v61);
  }
  if (*(float *)(v58 + 516) < -0.2)
  {
    if (v473 <= 0.0)
    {
      memcpy(*(void **)(v58 + 208), *(const void **)(v58 + 152), 4 * v59);
    }
    else if (v473 < 1.0)
    {
      v472 = 1.0 - v473;
      vDSP_vsmul(*(const float **)(v58 + 152), 1, &v473, v449, 1, v59);
      v65 = v453;
      vDSP_vsmul(*(const float **)(v453 + 208), 1, &v472, v451, 1, v452);
      vDSP_vadd(v449, 1, v451, 1, *(float **)(v65 + 208), 1, v452);
      v58 = v453;
      v59 = v452;
    }
  }
  __C = 0.0;
  vDSP_meanv(*(const float **)(v58 + 600), 1, &__C, v59);
  v66 = v453;
  if (__C > 0.99 && *(float *)(v453 + 628) < 0.4)
  {
    vDSP_vsadd(*(const float **)(v453 + 152), 1, &v463, v441, 1, v452);
    vDSP_vsadd(*(const float **)(v453 + 160), 1, &v463, v439, 1, v452);
    vDSP_vdbcon(v441, 1, &v462, v441, 1, v452, 0);
    vDSP_vdbcon(v439, 1, &v462, v439, 1, v452, 0);
    vDSP_vsub(v439, 1, v441, 1, v441, 1, v452);
    vDSP_meanv(v441, 1, &v461, v452);
    vDSP_meanv(v441, 1, &v460, *(int *)(v453 + 620));
    vDSP_meanv(&v441[*(int *)(v453 + 620)], 1, &v459, (int)v452 - (uint64_t)*(int *)(v453 + 620));
    v66 = v453;
    v67 = *(float *)(v453 + 392);
    v68 = 1.0 - v67;
    v69 = (float)(v67 * *(float *)(v453 + 608)) + v68 * v461;
    *(float *)(v453 + 608) = v69;
    v70 = (float)(v67 * *(float *)(v66 + 612)) + v68 * v460;
    *(float *)(v66 + 612) = v70;
    v71 = (float)(v67 * *(float *)(v66 + 616)) + v68 * v459;
    *(float *)(v66 + 616) = v71;
  }
  v72 = *(float *)(v66 + 524);
  if ((float)(*(float *)(v66 + 616) - *(float *)(v66 + 612)) <= 10.0)
  {
    *(_DWORD *)(v66 + 484) = 0;
    v73 = v72 - *(float *)(v66 + 532);
    if (v73 < 0.0)
    {
      LODWORD(__Z.realp) = 0;
      v73 = 0.0;
    }
  }
  else
  {
    *(_DWORD *)(v66 + 484) = 1;
    v73 = v72 + *(float *)(v66 + 528);
    if (v73 > 1.0)
      v73 = 1.0;
    *(float *)&__Z.realp = v73;
  }
  *(float *)(v66 + 524) = v73;
  *(_DWORD *)__B = 0;
  LODWORD(v467) = 0;
  v74 = *(_QWORD *)(v66 + 152);
  v75 = *(_QWORD *)(v66 + 160);
  v76 = *(_DWORD *)(v66 + 468);
  v77 = *(int *)(v66 + 464);
  v78 = v76 - (int)v77 + 1;
  vDSP_sve((const float *)(v74 + 4 * v77), 1, (float *)__B, v78);
  vDSP_sve((const float *)(v75 + 4 * *(int *)(v453 + 464)), 1, (float *)&v467, v78);
  v79 = *(float *)__B / (*(float *)&v467 + 0.00000011921) + 0.00000011921;
  v80 = log10f(v79);
  v81 = v453;
  v82 = (float)(*(float *)(v453 + 488) * 0.95) + (float)(v80 * 10.0) * 0.0500000119;
  *(float *)(v453 + 488) = v82;
  v83 = 1.0 / ((float)(expf(v82 * -0.25) * 150.0) + 1.0);
  *(float *)(v81 + 476) = v83;
  v84 = *(_DWORD *)(v81 + 480);
  _ZF = v83 < 0.3 && v84 == 1;
  if (_ZF)
  {
    *(_DWORD *)(v81 + 480) = 0;
    v87 = (float *)v452;
    goto LABEL_88;
  }
  v86 = v83 > 0.4 && v84 == 0;
  v87 = (float *)v452;
  if (v86)
  {
    *(_DWORD *)(v81 + 480) = 1;
    goto LABEL_91;
  }
  if (v84 != 1)
  {
LABEL_88:
    *(_DWORD *)(v81 + 432) = 1;
    v88 = *(float *)(v81 + 520) - *(float *)(v81 + 448);
    if (v88 < 0.0)
      v88 = 0.0;
    goto LABEL_93;
  }
LABEL_91:
  *(_DWORD *)(v81 + 432) = 0;
  v88 = *(float *)(v81 + 520) + *(float *)(v81 + 448);
  if (v88 > 1.0)
    v88 = 1.0;
LABEL_93:
  *(float *)(v81 + 520) = v88;
  *(float *)(v81 + 436) = v88;
  if (v88 <= *(float *)(v81 + 524))
    v88 = *(float *)(v81 + 524);
  *(float *)&__Z.realp = v88;
  v89 = *(float *)(v81 + 648);
  v90 = fmaxf((float)(v89 * (float)(*(float *)(v81 + 336) - *(float *)(v81 + 644)))/ (float)(*(float *)(v81 + 640) - *(float *)(v81 + 644)), 0.0);
  if (v90 < v89)
    v89 = v90;
  *(float *)(v81 + 652) = v89;
  *(float *)__B = 1.0 - v88;
  vDSP_vsmul(*(const float **)(v81 + 200), 1, (const float *)&__Z, v449, 1, (vDSP_Length)v87);
  vDSP_vsmul(*(const float **)(v453 + 208), 1, (const float *)__B, v451, 1, v452);
  vDSP_vadd(v449, 1, v451, 1, *(float **)(v453 + 192), 1, v452);
  v32 = v453;
  v33 = v452;
  if (*(_DWORD *)(v453 + 480) != 1 && *(_DWORD *)(v453 + 484) != 1)
  {
    v91 = (int)v452 > 0;
    LODWORD(v467) = 1115422720;
    v92 = 1.0e10;
    if (*(float *)(v453 + 508) >= 0.8)
      v92 = 0.0;
    v457 = v92;
    vDSP_vsmul(*(const float **)(v453 + 200), 1, (const float *)&v467, v449, 1, v452);
    vDSP_vthr(v449, 1, &v457, v449, 1, v452);
    vDSP_vsub(*(const float **)(v453 + 208), 1, v449, 1, v451, 1, v452);
    v32 = v453;
    v33 = v452;
    v93 = v440;
    if (v91)
    {
      v94 = 0;
      do
      {
        if (v451[v94 / 4] <= 0.0)
          *(_DWORD *)(*(_QWORD *)(v32 + 192) + v94) = *(_DWORD *)(*(_QWORD *)(v32 + 200) + v94);
        v94 += 4;
      }
      while (v93 != v94);
    }
  }
LABEL_106:
  v95 = (const float **)(v32 + 192);
  vDSP_vmax(*(const float **)(v32 + 192), 1, *(const float **)(v32 + 224), 1, *(float **)(v32 + 192), 1, v33);
  vDSP_vmin(*v95, 1, *(const float **)(v453 + 216), 1, (float *)*v95, 1, v452);
  CFilterBank::filterbank_compute_bank32(*(_QWORD *)(v453 + 16), *v95, (float *)&(*v95)[v452]);
  v96 = v453;
  if (*(float *)(v453 + 332) < 0.5)
  {
    v97 = *(float *)(v453 + 360);
    v98 = *(float *)(v453 + 336);
    v99 = CNoiseSuppressorV4::AweightSPL(v453);
    v96 = v453;
    *(float *)(v453 + 336) = (float)(v97 * v99) + (float)((float)(1.0 - v97) * v98);
  }
  v100 = *(float *)(v96 + 360);
  v101 = *(float *)(v96 + 340);
  v102 = CNoiseSuppressorV4::AweightSPL(v96);
  v103 = v453;
  *(float *)(v453 + 340) = (float)(v100 * v102) + (float)((float)(1.0 - v100) * v101);
  if (*(_DWORD *)(v103 + 560) == 1)
    memcpy(*(void **)(v103 + 240), v450, 4 * (int)v444);
  LODWORD(__Z.realp) = -525502228;
  v472 = 0.2;
  v473 = 0.0;
  __C = 0.8;
  v457 = 1.0;
  v456 = 3.0;
  (*(void (**)(_QWORD, char *, char *, _QWORD, vDSP_Length, _QWORD, vDSP_Length))(**(_QWORD **)(v103 + 704)
                                                                                           + 24))(*(_QWORD *)(v103 + 704), v450, &v450[4 * v452], *(_QWORD *)(v103 + 240), *(_QWORD *)(v103 + 240) + 4 * v452, *(_QWORD *)(v103 + 192), *(_QWORD *)(v103 + 192) + 4 * v452);
  v104 = (_QWORD *)(v453 + 256);
  v105 = &v449[v452];
  vDSP_vsub((const float *)(*(_QWORD *)(v453 + 256) + 4 * v452), 1, (const float *)(*(_QWORD *)(v453 + 368) + 4 * v452), 1, v105, 1, v448);
  v106 = &v451[v452];
  vDSP_vthres(v105, 1, &v473, v106, 1, v448);
  vDSP_vsub(v106, 1, v105, 1, v105, 1, v448);
  vDSP_vsma(v105, 1, (const float *)(v453 + 396), (const float *)(*v104 + 4 * v452), 1, v105, 1, v448);
  v107 = (_QWORD *)(v453 + 368);
  vDSP_vsma(v106, 1, (const float *)(v453 + 400), v105, 1, (float *)(*(_QWORD *)(v453 + 368) + 4 * v452), 1, 5uLL);
  vDSP_vsma(v106 + 5, 1, (const float *)(v453 + 404), v105 + 5, 1, (float *)(*v107 + 4 * v452 + 20), 1, v448 - 5);
  if ((int)v448 < 1)
  {
    v109 = 0.0;
    v108 = v453;
    v110 = v452;
  }
  else
  {
    v108 = v453;
    v109 = 0.0;
    v110 = v452;
    v111 = v452;
    do
    {
      v112 = *(float *)(*(_QWORD *)(v453 + 368) + 4 * v111);
      if (v112 <= 3.0)
        v112 = -0.0;
      v109 = v109 + v112;
      ++v111;
    }
    while (v111 < (int)v444);
  }
  v113 = v448;
  v114 = (int)v448 > 0;
  v115 = v109 / (float)*(int *)(v108 + 12);
  *(float *)(v108 + 328) = v115;
  *(float *)(v108 + 332) = (float)((float)(1.0 / (float)((float)(0.5 / v115) + 1.0)) * 0.899) + 0.1;
  v116 = (float *)(*(_QWORD *)(v108 + 176) + 4 * v110);
  *(_DWORD *)__B = sqrtf(expf((float)*(int *)(v108 + 52) * 0.23026));
  vDSP_vfill((const float *)__B, v116, 1, v113);
  v117 = &xmmword_1B66A2000;
  if (v114)
  {
    v118 = *(_QWORD *)(v453 + 256);
    v119 = *(_QWORD *)(v453 + 264);
    v121 = *(_QWORD *)(v453 + 240);
    v120 = *(_QWORD *)(v453 + 248);
    v122 = *(_QWORD *)(v453 + 368);
    v123 = *(float **)(v453 + 168);
    v124 = (int)v444;
    LODWORD(v448) = 1040496093;
    v125 = v452;
    do
    {
      v126 = *(float *)(v118 + 4 * v125) / (float)(*(float *)(v118 + 4 * v125) + 1.0);
      v127 = v126 * (float)(*(float *)(v119 + 4 * v125) + 1.0);
      v128 = vcvtms_s32_f32(v127 + v127);
      v129 = 1.0;
      if ((v128 & 0x80000000) == 0)
      {
        if (v128 < 0x14)
        {
          v130 = -(float)(floorf(v127 + v127) - (float)(v127 * 2.0));
          v129 = (float)((float)(v130
                               * *((float *)&NoiseSuppression::Gain::Gain<float,(LogTypes)0>::ComputeHypergeometricGain(std::vector<float> &,AutoValue<std::vector<float>,(LogTypes)0> &)::table
                                 + v128
                                 + 1))
                       + (float)((float)(1.0 - v130)
                               * *((float *)&NoiseSuppression::Gain::Gain<float,(LogTypes)0>::ComputeHypergeometricGain(std::vector<float> &,AutoValue<std::vector<float>,(LogTypes)0> &)::table
                                 + v128)))
               / sqrtf(v127 + 0.0001);
        }
        else
        {
          v129 = (float)(*(float *)&v448 / v127) + 1.0;
        }
      }
      v131 = v126 * v129;
      if (v131 > 1.0)
        v131 = 1.0;
      *(float *)(v120 + 4 * v125) = v131;
      *(float *)(v121 + 4 * v125) = (float)((float)(v131 * (float)(v131 * 0.8)) * *(float *)&v450[4 * v125])
                                  + (float)(*(float *)(v121 + 4 * v125) * 0.2);
      v132 = 1.0
           - (float)(*(float *)(v453 + 332)
                   * (float)((float)((float)(1.0 / (float)((float)(0.5 / *(float *)(v122 + 4 * v125)) + 1.0)) * 0.899)
                           + 0.1));
      v133 = (float)(*(float *)(v118 + 4 * v125) + 1.0) * (float)(v132 / (float)(1.0 - v132));
      v123[v125++] = 1.0 / (float)((float)(v133 * expf(-v127)) + 1.0);
    }
    while (v125 < v124);
    v134 = v453;
    v117 = &xmmword_1B66A2000;
  }
  else
  {
    v134 = v453;
    v123 = *(float **)(v453 + 168);
  }
  v135 = v452;
  CFilterBank::filterbank_compute_psd16(*(int ***)(v134 + 16), (uint64_t)&v123[v452], v123);
  CFilterBank::filterbank_compute_psd16(*(int ***)(v134 + 16), *(_QWORD *)(v134 + 248) + 4 * v135, *(float **)(v134 + 248));
  CFilterBank::filterbank_compute_psd16(*(int ***)(v134 + 16), *(_QWORD *)(v134 + 176) + 4 * v135, *(float **)(v134 + 176));
  vDSP_vsadd(*(const float **)(v134 + 256), 1, &v457, v451, 1, v135);
  vDSP_vdiv(v451, 1, *(const float **)(v453 + 256), 1, v451, 1, v452);
  vDSP_vsadd(*(const float **)(v453 + 264), 1, &v457, v449, 1, v452);
  vDSP_vmul(v451, 1, v449, 1, v449, 1, v452);
  v136 = v447;
  v137 = (float *)v452;
  if ((int)v447 >= 1)
  {
    v138 = *((float *)v117 + 819);
    v139 = v449;
    v140 = (float *)v447;
    do
    {
      v141 = *v139;
      v142 = vcvtms_s32_f32(v141 + v141);
      v143 = 1.0;
      if ((v142 & 0x80000000) == 0)
      {
        if (v142 < 0x14)
        {
          v144 = -(float)(floorf(v141 + v141) - (float)(v141 * 2.0));
          v143 = (float)((float)(v144
                               * *((float *)&NoiseSuppression::Gain::Gain<float,(LogTypes)0>::ComputeHypergeometricGain(std::vector<float> &,AutoValue<std::vector<float>,(LogTypes)0> &)::table
                                 + v142
                                 + 1))
                       + (float)((float)(1.0 - v144)
                               * *((float *)&NoiseSuppression::Gain::Gain<float,(LogTypes)0>::ComputeHypergeometricGain(std::vector<float> &,AutoValue<std::vector<float>,(LogTypes)0> &)::table
                                 + v142)))
               / sqrtf(v141 + 0.0001);
        }
        else
        {
          v143 = (float)(v138 / v141) + 1.0;
        }
      }
      *v139++ = v143;
      v140 = (float *)((char *)v140 - 1);
    }
    while (v140);
  }
  v145 = v136 > 0;
  vDSP_vmul(v451, 1, v449, 1, v449, 1, (vDSP_Length)v137);
  vDSP_vclip(v449, 1, (const float *)&__Z, &v457, v449, 1, v452);
  v146 = (float **)(v453 + 248);
  vDSP_vsmul(*(const float **)(v453 + 248), 1, &v456, v451, 1, v452);
  vDSP_vmin(v449, 1, v451, 1, *v146, 1, v452);
  vDSP_vsq(*v146, 1, v451, 1, v452);
  vDSP_vmul(v451, 1, (const float *)v450, 1, v451, 1, v452);
  vDSP_vsmul(v451, 1, &__C, v451, 1, v452);
  vDSP_vsma(*(const float **)(v453 + 240), 1, &v472, v451, 1, *(float **)(v453 + 240), 1, v452);
  vDSP_vmax(*v146, 1, *(const float **)(v453 + 176), 1, *v146, 1, v452);
  v147 = *(float **)(v453 + 168);
  v148 = (float *)v447;
  if (v145)
  {
    v149 = *(float **)(v453 + 248);
    v150 = *(float **)(v453 + 176);
    v151 = *(float **)(v453 + 168);
    v152 = v451;
    do
    {
      v153 = *v151++;
      v154 = v153;
      v155 = *v149++;
      v156 = sqrtf(v155);
      v157 = *v150++;
      *v152++ = (float)((float)(1.0 - v154) * sqrtf(v157)) + (float)(v154 * v156);
      v148 = (float *)((char *)v148 - 1);
    }
    while (v148);
  }
  vDSP_vsq(v451, 1, v147, 1, v452);
  v455 = 0.25;
  v454 = 0.5;
  v158 = v449;
  *v449 = 0.0;
  v159 = (const float **)(v453 + 168);
  v160 = v452 - 1;
  vDSP_vsmul(*(const float **)(v453 + 168), 1, &v455, v158 + 1, 1, v452 - 1);
  vDSP_vsma(*v159 + 1, 1, &v455, v449, 1, v449, 1, v160);
  vDSP_vsma(*v159, 1, &v454, v449, 1, (float *)*v159, 1, v452);
  v161 = v453;
  v162 = *v159;
  if (!*(_DWORD *)(v453 + 24) && (int)v444 >= 1)
    memset_pattern16((void *)*v159, &unk_1B6627B80, 4 * (v444 - 1) + 4);
  v163 = (const float **)(v161 + 136);
  vDSP_vmul(v162 + 1, 1, (const float *)(*(_QWORD *)(v161 + 136) + 4), 2, (float *)(*(_QWORD *)(v161 + 136) + 4), 2, v160);
  v164 = (const float **)(v453 + 168);
  vDSP_vmul(*(const float **)(v453 + 168), 1, *v163, 2, (float *)*v163, 2, v452);
  v165 = *v164;
  v166 = (*v164)[v160];
  v167 = (float *)v452;
  v168 = 2 * (int)v452;
  v169 = (int)v168 - 1;
  (*v163)[v169] = v166 * (*v163)[v169];
  vDSP_vmul(v165, 1, *(const float **)(v453 + 200), 1, *(float **)(v453 + 384), 1, (vDSP_Length)v167);
  MEMORY[0x1E0C80A78](v170);
  v172 = (float *)((char *)&v429 - v171);
  v173 = (_DWORD *)((char *)&v429 + 4 * v452 - v171);
  *(_QWORD *)__B = v173 + 1;
  *(_QWORD *)&__B[8] = (char *)&v429 - v171 + 8;
  vDSP_ctoz((const DSPComplex *)*v163 + 1, 2, (const DSPSplitComplex *)__B, 1, v452 - 2);
  v174 = *v163;
  *(_QWORD *)v172 = *(_QWORD *)*v163;
  v172[v169] = v174[v168 - 2];
  *v173 = LODWORD(v174[v169]);
  *(_QWORD *)__B = v172;
  *(_QWORD *)&__B[8] = v173;
  LODWORD(v467) = 939524096;
  vDSP_vsmul(v172, 1, (const float *)&v467, v172, 1, v168);
  v175 = v453;
  v176 = 4 * v452;
  memcpy(*(void **)(v453 + 584), *(const void **)__B, 4 * v452);
  result = memcpy(*(void **)(v175 + 592), *(const void **)&__B[8], v176);
  if (*(_DWORD *)(v175 + 28))
  {
    v178 = *(float *)(v175 + 332);
    *(_DWORD *)(v175 + 564) = v178 > *(float *)(v175 + 44) || *(_DWORD *)(v175 + 564) && v178 > *(float *)(v175 + 48);
  }
  return result;
}

float CNoiseSuppressorV4::AweightSPL(uint64_t a1)
{
  vDSP_Length v2;
  uint64_t v3;
  float *v4;
  uint64_t v5;
  const float *v6;
  float v7;
  uint64_t v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  v2 = *(int *)(a1 + 4);
  MEMORY[0x1E0C80A78](a1);
  v4 = (float *)((char *)&v9 - ((v3 + 15) & 0x7FFFFFFF0));
  HIDWORD(v9) = 0;
  vDSP_vmul(*(const float **)(v5 + 344), 1, v6, 1, v4, 1, v2);
  vDSP_sve(v4, 1, (float *)&v9 + 1, v2);
  v7 = *(float *)(a1 + 356) + (float)(log10f(*(float *)(a1 + 352) * *((float *)&v9 + 1)) * 10.0);
  if (v7 < 0.0)
    v7 = 0.0;
  return fminf(v7, 100.0);
}

uint64_t CNoiseSuppressorV4::speex_preprocess_state_init(int a1, signed int a2, int a3, int a4, int a5, int a6, char a7)
{
  char *v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  double v18;
  float v19;
  unsigned int v20;
  unsigned int v21;
  uint64_t v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  unint64_t v28;
  float v29;
  float v30;
  float v31;
  uint64_t v32;
  uint64_t v33;
  float v34;
  int v35;
  unsigned int v36;
  char v37;
  BOOL v38;
  double v39;
  _QWORD *v40;
  IIRFilterFloat32 *v41;
  uint64_t v42;
  float v43;
  __int128 v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  uint64_t v52;
  int v53;
  int v54;
  int v55;
  unsigned int (**v56)(void);
  uint64_t v57;
  NSObject *v58;
  NoiseSuppression::Noise::VPv3 *v59;
  uint64_t v60;
  float *v61;
  float v62;
  VPTimeFreqConverter *v63;
  VPTimeFreqConverter *v64;
  VPTimeFreqConverter *v65;
  unint64_t v66;
  unint64_t v67;
  unint64_t v68;
  unint64_t v69;
  unint64_t v70;
  unint64_t v71;
  unint64_t v72;
  unint64_t v73;
  unint64_t v74;
  unint64_t v75;
  unint64_t v76;
  unint64_t v77;
  NSObject *v78;
  NSObject *v79;
  float v80;
  int v81;
  float v82;
  int v83;
  uint64_t v84;
  void (**v85)(NoiseSuppression::SNR::VPv3 *__hidden);
  uint64_t v86;
  float v87;
  float v88;
  float v89;
  size_t v90;
  void *v91;
  void *v92;
  void *v93;
  void *v94;
  BOOL v95;
  void *v96;
  void *v97;
  BOOL v98;
  void *v99;
  void *v100;
  BOOL v101;
  void *v102;
  void *v103;
  BOOL v104;
  uint64_t v105;
  void *v106;
  void *v107;
  void *v108;
  void *v109;
  BOOL v110;
  void *v111;
  void *v112;
  BOOL v113;
  size_t v114;
  void *v115;
  void *v116;
  BOOL v117;
  void *v118;
  void *v119;
  BOOL v120;
  void *v121;
  void *v122;
  BOOL v123;
  void *v124;
  void *v125;
  BOOL v126;
  uint64_t v127;
  uint64_t v128;
  float *v129;
  int v130;
  void *v131;
  void *v132;
  BOOL v133;
  void *v134;
  void *v135;
  BOOL v136;
  void *v137;
  void *v138;
  BOOL v139;
  void *v140;
  void *v141;
  BOOL v142;
  void *v143;
  void *v144;
  BOOL v145;
  void *v146;
  void *v147;
  BOOL v148;
  void *v149;
  void *v150;
  BOOL v151;
  void *v152;
  void *v153;
  BOOL v154;
  void *v155;
  void *v156;
  BOOL v157;
  void *v158;
  void *v159;
  BOOL v160;
  void *v161;
  void *v162;
  BOOL v163;
  void *v164;
  void *v165;
  BOOL v166;
  void *v167;
  void *v168;
  BOOL v169;
  void *v170;
  void *v171;
  BOOL v172;
  void *v173;
  void *v174;
  BOOL v175;
  void *v176;
  void *v177;
  BOOL v178;
  void *v179;
  void *v180;
  BOOL v181;
  void *v182;
  void *v183;
  BOOL v184;
  void *v185;
  void *v186;
  BOOL v187;
  void *v188;
  uint64_t v189;
  BOOL v190;
  void *v191;
  void *v192;
  BOOL v193;
  void *v194;
  void *v195;
  BOOL v196;
  void *v197;
  void *v198;
  BOOL v199;
  float v200;
  int v201;
  _DWORD *v202;
  _DWORD *v203;
  _DWORD *v204;
  _DWORD *v205;
  _DWORD *v206;
  _DWORD *v207;
  _DWORD *v208;
  _DWORD *v209;
  _DWORD *v210;
  uint64_t v211;
  uint64_t v212;
  _DWORD *v213;
  _DWORD *v214;
  int v215;
  int v216;
  void *v217;
  void *v218;
  BOOL v219;
  void *v220;
  void *v221;
  BOOL v222;
  void *v223;
  void *v224;
  BOOL v225;
  char *v226;
  char *v227;
  BOOL v228;
  double v229;
  float v230;
  uint64_t v231;
  int32x2_t v232;
  uint64x2_t v233;
  float *v234;
  float32x2_t v235;
  float32x2_t v236;
  float32x2_t v237;
  int64x2_t v238;
  float64x2_t v239;
  float64x2_t v240;
  float v241;
  float64x2_t v242;
  float64x2_t v243;
  void *v244;
  void *v245;
  BOOL v246;
  void *v247;
  void *v248;
  BOOL v249;
  void *v250;
  void *v251;
  BOOL v252;
  BOOL v253;
  void *v254;
  void *v255;
  char v256;
  std::bad_alloc *exception;
  std::bad_alloc *v259;
  std::bad_alloc *v260;
  std::bad_alloc *v261;
  std::bad_alloc *v262;
  std::bad_alloc *v263;
  std::bad_alloc *v264;
  std::bad_alloc *v265;
  std::bad_alloc *v266;
  std::bad_alloc *v267;
  std::bad_alloc *v268;
  std::bad_alloc *v269;
  std::bad_alloc *v270;
  std::bad_alloc *v271;
  std::bad_alloc *v272;
  std::bad_alloc *v273;
  std::bad_alloc *v274;
  std::bad_alloc *v275;
  std::bad_alloc *v276;
  std::bad_alloc *v277;
  std::bad_alloc *v278;
  std::bad_alloc *v279;
  std::bad_alloc *v280;
  std::bad_alloc *v281;
  std::bad_alloc *v282;
  std::bad_alloc *v283;
  std::bad_alloc *v284;
  std::bad_alloc *v285;
  std::bad_alloc *v286;
  std::bad_alloc *v287;
  std::bad_alloc *v288;
  std::bad_alloc *v289;
  std::bad_alloc *v290;
  std::bad_alloc *v291;
  std::bad_alloc *v292;
  std::bad_alloc *v293;
  std::bad_alloc *v294;
  std::bad_alloc *v295;
  std::bad_alloc *v296;
  std::bad_alloc *v297;
  std::bad_alloc *v298;
  std::bad_alloc *v299;
  std::bad_alloc *v300;
  std::bad_alloc *v301;
  std::bad_alloc *v302;
  std::bad_alloc *v303;
  std::bad_alloc *v304;
  std::bad_alloc *v305;
  std::bad_alloc *v306;
  std::bad_alloc *v307;
  std::bad_alloc *v308;
  std::bad_alloc *v309;
  std::bad_alloc *v310;
  std::bad_alloc *v311;
  std::bad_alloc *v312;
  std::bad_alloc *v313;
  std::bad_alloc *v314;
  std::bad_alloc *v315;
  std::bad_alloc *v316;
  std::bad_alloc *v317;
  std::bad_alloc *v318;
  std::bad_alloc *v319;
  std::bad_alloc *v320;
  std::bad_alloc *v321;
  std::bad_alloc *v322;
  std::bad_alloc *v323;
  std::bad_alloc *v324;
  std::bad_alloc *v325;
  std::bad_alloc *v326;
  std::bad_alloc *v327;
  std::bad_alloc *v328;
  std::bad_alloc *v329;
  std::bad_alloc *v330;
  std::bad_alloc *v331;
  std::bad_alloc *v332;
  std::bad_alloc *v333;
  std::bad_alloc *v334;
  std::bad_alloc *v335;
  std::bad_alloc *v336;
  std::bad_alloc *v337;
  std::bad_alloc *v338;
  std::bad_alloc *v339;
  std::bad_alloc *v340;
  std::bad_alloc *v341;
  std::bad_alloc *v342;
  std::bad_alloc *v343;
  std::bad_alloc *v344;
  std::bad_alloc *v345;
  int v346;
  int64x2_t v347;
  uint64x2_t v348;
  float v349;
  float64x2_t __x;
  long double v351;
  float32x2_t v352;
  int32x2_t v353;
  int64x2_t v355;
  float __A;
  int v357;
  unint64_t v358;
  uint64_t v359;
  __int128 v360;
  uint64_t v361;
  AudioStreamBasicDescription v362;
  AudioStreamBasicDescription buf[6];
  uint64_t v364;

  v364 = *MEMORY[0x1E0C80C00];
  __A = 3.4028e38;
  v13 = (char *)malloc_type_malloc(0x2C8uLL, 0x2C8E6D5CuLL);
  if (!v13)
  {
    exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
    v259 = std::bad_alloc::bad_alloc(exception);
  }
  v14 = (uint64_t)v13;
  bzero(v13 + 8, 0x2C0uLL);
  *(_DWORD *)v14 = a1;
  *(_DWORD *)(v14 + 4) = a1;
  v15 = 2 * a1;
  v16 = v14 + 688;
  *(_DWORD *)(v14 + 428) = a3;
  v346 = 2 * a1;
  if (!a4)
  {
    std::unique_ptr<NoiseSuppression::Noise::LPCore>::reset[abi:ne180100]((uint64_t *)(v14 + 688), 0);
    if ((a7 & 1) != 0)
      goto LABEL_56;
    goto LABEL_50;
  }
  v17 = operator new();
  *(_DWORD *)v17 = 16842752;
  *(_WORD *)(v17 + 4) = 1;
  *(float *)(v17 + 8) = (float)a2;
  *(_DWORD *)(v17 + 12) = a1;
  v18 = (double)a1;
  v19 = (float)a2 / (double)a1;
  *(float *)(v17 + 16) = v19;
  *(_DWORD *)(v17 + 20) = a1;
  *(_DWORD *)(v17 + 24) = (float)(roundf((float)a2 / 1000.0) + 3.0);
  *(_OWORD *)(v17 + 28) = xmmword_1B66A2500;
  *(_OWORD *)(v17 + 44) = xmmword_1B66A2510;
  *(_DWORD *)(v17 + 60) = 981668463;
  *(float *)&v18 = (float)a2 / (float)v15;
  v20 = ((float)v15 >> 1) - 1;
  *(uint32x2_t *)(v17 + 64) = vmin_u32((uint32x2_t)vdup_n_s32(v20), vcvt_u32_f32(vrnda_f32(vdiv_f32((float32x2_t)0x44FA000043480000, (float32x2_t)vdup_lane_s32(*(int32x2_t *)&v18, 0)))));
  v21 = vcvtas_u32_f32(fminf((float)a2 * 0.5, 8000.0) / *(float *)&v18);
  if (v20 >= v21)
    v20 = v21;
  *(_DWORD *)(v17 + 72) = v20;
  *(_OWORD *)(v17 + 76) = xmmword_1B66A2520;
  *(_QWORD *)(v17 + 92) = 0x428C00003F000000;
  *(_DWORD *)(v17 + 100) = 1110704128;
  *(_OWORD *)(v17 + 104) = 0u;
  *(_OWORD *)(v17 + 120) = 0u;
  *(_OWORD *)(v17 + 132) = 0u;
  *(_OWORD *)(v17 + 148) = xmmword_1B66A2530;
  *(_DWORD *)(v17 + 164) = 2139095039;
  *(_QWORD *)(v17 + 204) = 0x42900000429A0000;
  *(_DWORD *)(v17 + 212) = 1;
  *(_OWORD *)(v17 + 232) = 0u;
  *(_OWORD *)(v17 + 216) = 0u;
  *(_OWORD *)(v17 + 248) = 0u;
  *(_OWORD *)(v17 + 264) = 0u;
  *(_OWORD *)(v17 + 280) = 0u;
  *(_OWORD *)(v17 + 296) = 0u;
  *(_OWORD *)(v17 + 312) = 0u;
  *(_OWORD *)(v17 + 328) = 0u;
  *(_OWORD *)(v17 + 344) = 0u;
  *(_OWORD *)(v17 + 360) = 0u;
  *(_OWORD *)(v17 + 376) = 0u;
  *(_OWORD *)(v17 + 392) = 0u;
  *(_OWORD *)(v17 + 408) = 0u;
  *(_OWORD *)(v17 + 424) = 0u;
  *(_OWORD *)(v17 + 440) = 0u;
  *(_OWORD *)(v17 + 456) = 0u;
  *(_OWORD *)(v17 + 472) = 0u;
  *(_OWORD *)(v17 + 488) = 0u;
  *(_OWORD *)(v17 + 504) = 0u;
  *(_OWORD *)(v17 + 520) = 0u;
  *(_OWORD *)(v17 + 536) = 0u;
  *(_OWORD *)(v17 + 552) = 0u;
  *(_OWORD *)(v17 + 568) = 0u;
  *(_OWORD *)(v17 + 584) = 0u;
  *(_OWORD *)(v17 + 600) = 0u;
  *(_OWORD *)(v17 + 616) = 0u;
  std::unique_ptr<NoiseSuppression::Noise::LPCore>::reset[abi:ne180100]((uint64_t *)(v14 + 688), v17);
  v22 = *(_QWORD *)v16;
  *(_BYTE *)v22 = 0;
  *(_OWORD *)(v22 + 168) = 0u;
  *(_OWORD *)(v22 + 184) = 0u;
  *(_DWORD *)(v22 + 200) = 0;
  v23 = *(float *)(v22 + 16);
  v24 = exp(-1.0 / (float)(*(float *)(v22 + 28) * v23));
  *(float *)(v22 + 104) = v24;
  v25 = exp(-1.0 / (float)(v23 * 0.15));
  *(float *)(v22 + 136) = v25;
  v26 = exp(-1.0 / (float)(v23 * *(float *)(v22 + 76)));
  *(float *)(v22 + 120) = v26;
  v27 = exp(-1.0 / (float)(v23 * *(float *)(v22 + 40)));
  *(float *)(v22 + 132) = v27;
  LODWORD(v28) = *(_DWORD *)(v22 + 12);
  v29 = *(float *)(v22 + 8) / (double)v28;
  v30 = exp(-1.0 / (float)(*(float *)(v22 + 84) * v29));
  *(float *)(v22 + 152) = v30;
  v31 = exp(-1.0 / (float)(*(float *)(v22 + 80) * v29));
  *(float *)(v22 + 156) = v31;
  v32 = operator new();
  v33 = v32;
  v34 = *(float *)(v22 + 8);
  v35 = *(_DWORD *)(v22 + 12);
  *(_BYTE *)v32 = 0;
  *(float *)(v32 + 4) = v34;
  *(_DWORD *)(v32 + 8) = v35;
  v36 = 4 * v35 - 1;
  v37 = -1;
  do
  {
    ++v37;
    v38 = v36 > 1;
    v36 >>= 1;
  }
  while (v38);
  *(_DWORD *)(v32 + 12) = 2 << v37;
  *(_DWORD *)(v32 + 24) = 4;
  v39 = v34;
  *(int32x2_t *)(v32 + 28) = vmovn_s64((int64x2_t)vcvtq_u64_f64(vrndmq_f64(vdivq_f64((float64x2_t)vdupq_lane_s64(*(uint64_t *)&v39, 0), (float64x2_t)xmmword_1B66A2540))));
  *(_DWORD *)(v32 + 36) = vcvtad_u64_f64(v39 * 0.0002);
  *(_DWORD *)(v32 + 40) = 0;
  *(_OWORD *)(v32 + 48) = 0u;
  *(_OWORD *)(v32 + 64) = 0u;
  *(_OWORD *)(v32 + 80) = 0u;
  *(_OWORD *)(v32 + 96) = 0u;
  *(_OWORD *)(v32 + 112) = 0u;
  *(_OWORD *)(v32 + 128) = 0u;
  *(_OWORD *)(v32 + 144) = 0u;
  *(_QWORD *)(v32 + 160) = 0;
  v40 = *(_QWORD **)(v22 + 232);
  *(_QWORD *)(v22 + 232) = v33;
  if (v40)
    std::default_delete<NoiseSuppression::Noise::LPCPitch>::operator()[abi:ne180100](v40);
  *(_BYTE *)v33 = 0;
  buf[0].mSampleRate = v39;
  *(_OWORD *)&buf[0].mFormatID = xmmword_1B6626900;
  *(_OWORD *)&buf[0].mBytesPerFrame = xmmword_1B6626910;
  v362.mSampleRate = v39;
  *(_OWORD *)&v362.mFormatID = xmmword_1B6626900;
  *(_OWORD *)&v362.mBytesPerFrame = xmmword_1B6626910;
  v41 = NewIIRFilter(buf, &v362, (const CAStreamBasicDescription *)1);
  v42 = *(_QWORD *)(v33 + 64);
  *(_QWORD *)(v33 + 64) = v41;
  if (v42)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v42 + 8))(v42);
    v41 = *(IIRFilterFloat32 **)(v33 + 64);
  }
  if (!v41)
    goto LABEL_38;
  v358 = 0;
  v359 = 0;
  *((_QWORD *)&v360 + 1) = 0;
  v361 = 0;
  v43 = *(float *)(v33 + 4);
  if (v43 == 8000.0)
  {
    v358 = 0xBFF249A5EC65FE08;
    v44 = xmmword_1B66A25E0;
    v45 = 0x3FDA6B5764E3D198;
  }
  else if (v43 == 11025.0)
  {
    v358 = 0xBFF5E8F8F3A1DCA1;
    v44 = xmmword_1B66A25D0;
    v45 = 0x3FE0CE28BD0C48BBLL;
  }
  else if (v43 == 16000.0)
  {
    v358 = 0xBFF8F9EE17007682;
    v44 = xmmword_1B66A25C0;
    v45 = 0x3FE485F3A92649FELL;
  }
  else if (v43 == 22050.0)
  {
    v358 = 0xBFFAE08CD678830DLL;
    v44 = xmmword_1B66A25B0;
    v45 = 0x3FE72E911BB535D7;
  }
  else if (v43 == 24000.0)
  {
    v358 = 0xBFFB49F10BEBC067;
    v44 = xmmword_1B66A25A0;
    v45 = 0x3FE7CC05FAC7883DLL;
  }
  else if (v43 == 32000.0)
  {
    v358 = 0xBFFC75469856207CLL;
    v44 = xmmword_1B66A2590;
    v45 = 0x3FE9A02CDF3F57BBLL;
  }
  else if (v43 == 44100.0)
  {
    v358 = 0xBFFD6D05BC20937CLL;
    v44 = xmmword_1B66A2580;
    v45 = 0x3FEB3C7180CB34A8;
  }
  else if (v43 == 48000.0)
  {
    v358 = 0xBFFDA2645A62D487;
    v44 = xmmword_1B66A2570;
    v45 = 0x3FEB985C25519768;
  }
  else if (v43 == 96000.0)
  {
    v358 = 0xBFFED0D49129E636;
    v44 = xmmword_1B66A2560;
    v45 = 0x3FEDB75026A2BF0DLL;
  }
  else
  {
    if (v43 != 192000.0)
      goto LABEL_38;
    v358 = 0xBFFF685DCF6A059ALL;
    v44 = xmmword_1B66A2550;
    v45 = 0x3FEED63EC87DE031;
  }
  v359 = v45;
  v360 = v44;
  v361 = v44;
  (*(void (**)(IIRFilterFloat32 *, uint64_t, unint64_t *))(*(_QWORD *)v41 + 16))(v41, 1, &v358);
  std::vector<float>::resize(v33 + 144, *(unsigned int *)(v33 + 12));
  v46 = *(unsigned int *)(v33 + 12);
  v357 = 0;
  std::vector<float>::assign((char **)(v33 + 144), v46, &v357);
  std::vector<float>::resize(v33 + 96, (2 * *(_DWORD *)(v33 + 8)));
  v47 = (2 * *(_DWORD *)(v33 + 8));
  v357 = 0;
  std::vector<float>::assign((char **)(v33 + 96), v47, &v357);
  LODWORD(v49) = *(_DWORD *)(v33 + 24);
  LODWORD(v48) = *(_DWORD *)(v33 + 28);
  LODWORD(v50) = *(_DWORD *)(v33 + 8);
  std::vector<float>::resize(v33 + 72, (unint64_t)((double)v50 / (double)v49 + (double)v48));
  v51 = (uint64_t)(*(_QWORD *)(v33 + 80) - *(_QWORD *)(v33 + 72)) >> 2;
  v357 = 0;
  std::vector<float>::assign((char **)(v33 + 72), v51, &v357);
  std::vector<float>::resize(v33 + 120, *(unsigned int *)(v33 + 12));
  if (!MultiRadixRealFFT::Initialize((MultiRadixRealFFT *)(v33 + 48), *(_DWORD *)(v33 + 12)))
  {
    *(_BYTE *)v33 = 1;
    v52 = operator new();
    v53 = *(_DWORD *)(v22 + 8);
    v54 = *(_DWORD *)(v22 + 12);
    v55 = *(_DWORD *)(v22 + 24);
    v56 = (unsigned int (**)(void))&off_1E69C5AD0;
    *(_QWORD *)v52 = &off_1E69C5AD0;
    *(_BYTE *)(v52 + 8) = 0;
    *(_DWORD *)(v52 + 12) = v53;
    *(_DWORD *)(v52 + 16) = v54;
    *(_DWORD *)(v52 + 20) = v55;
    *(_BYTE *)(v52 + 24) = 1;
    *(_OWORD *)(v52 + 208) = 0u;
    *(_OWORD *)(v52 + 224) = 0u;
    *(_OWORD *)(v52 + 176) = 0u;
    *(_OWORD *)(v52 + 192) = 0u;
    *(_OWORD *)(v52 + 144) = 0u;
    *(_OWORD *)(v52 + 160) = 0u;
    *(_OWORD *)(v52 + 112) = 0u;
    *(_OWORD *)(v52 + 128) = 0u;
    *(_OWORD *)(v52 + 80) = 0u;
    *(_OWORD *)(v52 + 96) = 0u;
    *(_OWORD *)(v52 + 48) = 0u;
    *(_OWORD *)(v52 + 64) = 0u;
    *(_OWORD *)(v52 + 32) = 0u;
    v57 = *(_QWORD *)(v22 + 224);
    *(_QWORD *)(v22 + 224) = v52;
    if (v57)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v57 + 16))(v57);
      v56 = **(unsigned int (****)(void))(v22 + 224);
    }
    if (!(*v56)())
    {
      v59 = (NoiseSuppression::Noise::VPv3 *)operator new();
      NoiseSuppression::Noise::VPv3::VPv3(v59, *(float *)(v22 + 8), *(_DWORD *)(v22 + 12), *(float *)(v22 + 8) / (float)*(unsigned int *)(v22 + 12));
      v60 = *(_QWORD *)(v22 + 240);
      *(_QWORD *)(v22 + 240) = v59;
      if (v60)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v60 + 8))(v60);
        v59 = *(NoiseSuppression::Noise::VPv3 **)(v22 + 240);
      }
      (*(void (**)(NoiseSuppression::Noise::VPv3 *))(*(_QWORD *)v59 + 16))(v59);
      v61 = *(float **)(v22 + 240);
      v62 = *(float *)(v22 + 28);
      v61[20] = v62;
      v61[21] = expf(-1.0 / (float)(v61[4] * v62));
      v63 = (VPTimeFreqConverter *)operator new();
      VPTimeFreqConverter::VPTimeFreqConverter(v63, 0, *(_DWORD *)(v22 + 12));
      std::unique_ptr<VPTimeFreqConverter>::reset[abi:ne180100]((VPTimeFreqConverter **)(v22 + 248), v63);
      v64 = (VPTimeFreqConverter *)operator new();
      VPTimeFreqConverter::VPTimeFreqConverter(v64, 0, *(_DWORD *)(v22 + 12));
      std::unique_ptr<VPTimeFreqConverter>::reset[abi:ne180100]((VPTimeFreqConverter **)(v22 + 256), v64);
      v65 = (VPTimeFreqConverter *)operator new();
      VPTimeFreqConverter::VPTimeFreqConverter(v65, 0, *(_DWORD *)(v22 + 12));
      std::unique_ptr<VPTimeFreqConverter>::reset[abi:ne180100]((VPTimeFreqConverter **)(v22 + 264), v65);
      std::vector<float>::resize(v22 + 272, *(unsigned int *)(v22 + 20));
      std::vector<float>::assign((char **)(v22 + 272), (uint64_t)(*(_QWORD *)(v22 + 280) - *(_QWORD *)(v22 + 272)) >> 2, (_DWORD *)(v22 + 60));
      std::vector<float>::resize(v22 + 344, *(unsigned int *)(v22 + 20));
      std::vector<float>::assign((char **)(v22 + 344), (uint64_t)(*(_QWORD *)(v22 + 352) - *(_QWORD *)(v22 + 344)) >> 2, (_DWORD *)(v22 + 60));
      std::vector<float>::resize(v22 + 368, *(unsigned int *)(v22 + 20));
      v66 = (uint64_t)(*(_QWORD *)(v22 + 376) - *(_QWORD *)(v22 + 368)) >> 2;
      LODWORD(buf[0].mSampleRate) = 0;
      std::vector<float>::assign((char **)(v22 + 368), v66, buf);
      std::vector<float>::resize(v22 + 296, *(unsigned int *)(v22 + 20));
      v67 = (uint64_t)(*(_QWORD *)(v22 + 304) - *(_QWORD *)(v22 + 296)) >> 2;
      LODWORD(buf[0].mSampleRate) = 0;
      std::vector<float>::assign((char **)(v22 + 296), v67, buf);
      std::vector<float>::resize(v22 + 320, *(unsigned int *)(v22 + 20));
      v68 = (uint64_t)(*(_QWORD *)(v22 + 328) - *(_QWORD *)(v22 + 320)) >> 2;
      LODWORD(buf[0].mSampleRate) = 0;
      std::vector<float>::assign((char **)(v22 + 320), v68, buf);
      std::vector<float>::resize(v22 + 464, *(unsigned int *)(v22 + 20));
      v69 = (uint64_t)(*(_QWORD *)(v22 + 472) - *(_QWORD *)(v22 + 464)) >> 2;
      LODWORD(buf[0].mSampleRate) = 0;
      std::vector<float>::assign((char **)(v22 + 464), v69, buf);
      std::vector<float>::resize(v22 + 488, *(unsigned int *)(v22 + 20));
      v70 = (uint64_t)(*(_QWORD *)(v22 + 496) - *(_QWORD *)(v22 + 488)) >> 2;
      LODWORD(buf[0].mSampleRate) = 0;
      std::vector<float>::assign((char **)(v22 + 488), v70, buf);
      std::vector<float>::resize(v22 + 392, *(unsigned int *)(v22 + 20));
      v71 = (uint64_t)(*(_QWORD *)(v22 + 400) - *(_QWORD *)(v22 + 392)) >> 2;
      LODWORD(buf[0].mSampleRate) = 0;
      std::vector<float>::assign((char **)(v22 + 392), v71, buf);
      std::vector<float>::resize(v22 + 440, *(unsigned int *)(v22 + 12));
      v72 = (uint64_t)(*(_QWORD *)(v22 + 448) - *(_QWORD *)(v22 + 440)) >> 2;
      LODWORD(buf[0].mSampleRate) = 0;
      std::vector<float>::assign((char **)(v22 + 440), v72, buf);
      std::vector<float>::resize(v22 + 512, *(unsigned int *)(v22 + 20));
      v73 = (uint64_t)(*(_QWORD *)(v22 + 520) - *(_QWORD *)(v22 + 512)) >> 2;
      LODWORD(buf[0].mSampleRate) = 0;
      std::vector<float>::assign((char **)(v22 + 512), v73, buf);
      std::vector<float>::resize(v22 + 536, *(unsigned int *)(v22 + 20));
      v74 = (uint64_t)(*(_QWORD *)(v22 + 544) - *(_QWORD *)(v22 + 536)) >> 2;
      LODWORD(buf[0].mSampleRate) = 0;
      std::vector<float>::assign((char **)(v22 + 536), v74, buf);
      std::vector<float>::resize(v22 + 416, *(unsigned int *)(v22 + 20));
      v75 = (uint64_t)(*(_QWORD *)(v22 + 424) - *(_QWORD *)(v22 + 416)) >> 2;
      LODWORD(buf[0].mSampleRate) = 0;
      std::vector<float>::assign((char **)(v22 + 416), v75, buf);
      std::vector<float>::resize(v22 + 560, *(unsigned int *)(v22 + 20));
      v76 = (uint64_t)(*(_QWORD *)(v22 + 568) - *(_QWORD *)(v22 + 560)) >> 2;
      LODWORD(buf[0].mSampleRate) = 0;
      std::vector<float>::assign((char **)(v22 + 560), v76, buf);
      std::vector<float>::resize(v22 + 584, *(unsigned int *)(v22 + 20));
      v77 = (uint64_t)(*(_QWORD *)(v22 + 592) - *(_QWORD *)(v22 + 584)) >> 2;
      LODWORD(buf[0].mSampleRate) = 0;
      std::vector<float>::assign((char **)(v22 + 584), v77, buf);
      std::vector<float>::resize(v22 + 608, 5uLL);
      *(_BYTE *)v22 = 1;
      v15 = 2 * a1;
      goto LABEL_49;
    }
  }
LABEL_38:
  if (SuppressorClassLogScope(void)::once != -1)
    dispatch_once(&SuppressorClassLogScope(void)::once, &__block_literal_global_5244);
  v15 = 2 * a1;
  if (SuppressorClassLogScope(void)::scope)
  {
    v58 = *(NSObject **)SuppressorClassLogScope(void)::scope;
    if (!*(_QWORD *)SuppressorClassLogScope(void)::scope)
      goto LABEL_49;
  }
  else
  {
    v58 = MEMORY[0x1E0C81028];
  }
  if (os_log_type_enabled(v58, OS_LOG_TYPE_ERROR))
  {
    LODWORD(buf[0].mSampleRate) = 136315650;
    *(_QWORD *)((char *)&buf[0].mSampleRate + 4) = "suppressor_classV4.cpp";
    LOWORD(buf[0].mFormatFlags) = 1024;
    *(AudioFormatFlags *)((char *)&buf[0].mFormatFlags + 2) = 1481;
    HIWORD(buf[0].mBytesPerPacket) = 1024;
    buf[0].mFramesPerPacket = a2;
    _os_log_impl(&dword_1B5ED0000, v58, OS_LOG_TYPE_ERROR, "%25s:%-5d Failed to load noise estimate post-processor. Most likely wrong sample rate:%d. Will be bypassed", (uint8_t *)buf, 0x18u);
  }
LABEL_49:
  *(_DWORD *)(*(_QWORD *)v16 + 212) = 1;
  if ((a7 & 1) != 0)
    goto LABEL_56;
LABEL_50:
  if (MultiRadixRealFFT_Create(v15, (MultiRadixRealFFT **)(v14 + 576)))
  {
    if (SuppressorClassLogScope(void)::once != -1)
      dispatch_once(&SuppressorClassLogScope(void)::once, &__block_literal_global_5244);
    if (SuppressorClassLogScope(void)::scope)
    {
      v78 = *(NSObject **)SuppressorClassLogScope(void)::scope;
      if (!*(_QWORD *)SuppressorClassLogScope(void)::scope)
        goto LABEL_71;
    }
    else
    {
      v78 = MEMORY[0x1E0C81028];
    }
    if (os_log_type_enabled(v78, OS_LOG_TYPE_ERROR))
    {
      LODWORD(buf[0].mSampleRate) = 136315394;
      *(_QWORD *)((char *)&buf[0].mSampleRate + 4) = "suppressor_classV4.cpp";
      LOWORD(buf[0].mFormatFlags) = 1024;
      *(AudioFormatFlags *)((char *)&buf[0].mFormatFlags + 2) = 1496;
      _os_log_impl(&dword_1B5ED0000, v78, OS_LOG_TYPE_ERROR, "%25s:%-5d MultiRadixRealFFT_Create() returned an error. Invalid block size?", (uint8_t *)buf, 0x12u);
    }
    goto LABEL_71;
  }
LABEL_56:
  *(_DWORD *)(v14 + 8) = a2;
  *(_DWORD *)(v14 + 12) = 24;
  if (CNoiseSuppressorV4::SetNoiseEstimator(v14, a5))
  {
    if (SuppressorClassLogScope(void)::once != -1)
      dispatch_once(&SuppressorClassLogScope(void)::once, &__block_literal_global_5244);
    if (SuppressorClassLogScope(void)::scope)
    {
      v79 = *(NSObject **)SuppressorClassLogScope(void)::scope;
      if (!*(_QWORD *)SuppressorClassLogScope(void)::scope)
      {
LABEL_67:
        MultiRadixFFT_Dispose(*(_QWORD *)(v14 + 576));
LABEL_71:
        free((void *)v14);
        return 0;
      }
    }
    else
    {
      v79 = MEMORY[0x1E0C81028];
    }
    if (os_log_type_enabled(v79, OS_LOG_TYPE_ERROR))
    {
      LODWORD(buf[0].mSampleRate) = 136315394;
      *(_QWORD *)((char *)&buf[0].mSampleRate + 4) = "suppressor_classV4.cpp";
      LOWORD(buf[0].mFormatFlags) = 1024;
      *(AudioFormatFlags *)((char *)&buf[0].mFormatFlags + 2) = 1513;
      _os_log_impl(&dword_1B5ED0000, v79, OS_LOG_TYPE_ERROR, "%25s:%-5d SetNoiseEstimator() failed.", (uint8_t *)buf, 0x12u);
    }
    goto LABEL_67;
  }
  v80 = (float)*(int *)(v14 + 8);
  v81 = *(_DWORD *)v14;
  v82 = v80 / (float)*(int *)v14;
  v83 = *(_DWORD *)(v14 + 12);
  v84 = operator new();
  *(float *)(v84 + 8) = v80;
  *(_DWORD *)(v84 + 12) = v81;
  *(float *)(v84 + 16) = v82;
  *(_DWORD *)(v84 + 20) = 0;
  *(_BYTE *)(v84 + 24) = 0;
  if (a6)
  {
    v85 = &off_1E69DF700;
    *(_QWORD *)v84 = &off_1E69DF700;
    *(_DWORD *)(v84 + 32) = v81;
    *(_OWORD *)(v84 + 40) = 0u;
    *(_OWORD *)(v84 + 56) = 0u;
    *(_OWORD *)(v84 + 72) = 0u;
    *(_DWORD *)(v84 + 88) = v83;
    *(_OWORD *)(v84 + 96) = 0u;
    *(_OWORD *)(v84 + 112) = 0u;
    *(_OWORD *)(v84 + 128) = 0u;
    *(_DWORD *)(v84 + 144) = 1056964608;
  }
  else
  {
    v85 = &off_1E69DF6C8;
    *(_QWORD *)v84 = &off_1E69DF6C8;
    *(_OWORD *)(v84 + 40) = 0u;
    *(_OWORD *)(v84 + 56) = 0u;
    *(_OWORD *)(v84 + 72) = 0u;
    *(_OWORD *)(v84 + 96) = 0u;
    *(_OWORD *)(v84 + 112) = 0u;
    *(_OWORD *)(v84 + 128) = 0u;
    *(_DWORD *)(v84 + 32) = v81;
    *(_DWORD *)(v84 + 36) = 1063507722;
    *(_DWORD *)(v84 + 88) = v83;
    *(_DWORD *)(v84 + 92) = 1063507722;
  }
  v86 = *(_QWORD *)(v14 + 704);
  *(_QWORD *)(v14 + 704) = v84;
  if (v86)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v86 + 8))(v86);
    v85 = **(void (****)(NoiseSuppression::SNR::VPv3 *__hidden))(v14 + 704);
  }
  ((void (*)(void))v85[2])();
  *(_QWORD *)(v14 + 24) = 0x100000001;
  *(_DWORD *)(v14 + 32) = 0;
  *(_QWORD *)(v14 + 52) = 0xFFFFFFD8FFFFFFFALL;
  *(_DWORD *)(v14 + 60) = -15;
  *(_OWORD *)(v14 + 36) = xmmword_1B66A25F0;
  *(_QWORD *)(v14 + 104) = 1065353216;
  *(_QWORD *)(v14 + 112) = 0;
  *(_QWORD *)(v14 + 456) = 0;
  v87 = (float)a2;
  *(_QWORD *)(v14 + 16) = CFilterBank::filterbank_new((CFilterBank *)0x18, a1, (float)a2);
  v88 = (float)a2 / (float)a1;
  *(float *)(v14 + 392) = expf(-1.0 / (float)(v88 * 0.04));
  *(float *)(v14 + 396) = expf(-1.0 / (float)(v88 * 0.005));
  v89 = expf(-1.0 / (float)(v88 * 0.01));
  *(float *)(v14 + 400) = v89;
  *(float *)(v14 + 404) = v89;
  *(float *)(v14 + 408) = 1.0 - expf(-1.0 / (float)(v88 * 0.1));
  *(float *)(v14 + 420) = 1.0 - expf(-1.0 / (float)(v88 * 0.05));
  *(_DWORD *)(v14 + 424) = 1094713344;
  *(float *)(v14 + 412) = 1.0 - expf(-1.0 / (float)(v88 * 0.5));
  *(_DWORD *)(v14 + 416) = 1112014848;
  v90 = 4 * v346;
  v91 = malloc_type_malloc(v90, 0x2C8E6D5CuLL);
  v92 = v91;
  if (a1 && !v91)
  {
    v260 = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
    v261 = std::bad_alloc::bad_alloc(v260);
  }
  bzero(v91, v90);
  *(_QWORD *)(v14 + 120) = v92;
  v93 = malloc_type_malloc(v90, 0x2C8E6D5CuLL);
  v94 = v93;
  v95 = a1 == 0;
  if (v93)
    v95 = 1;
  if (!v95)
  {
    v262 = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
    v263 = std::bad_alloc::bad_alloc(v262);
  }
  bzero(v93, v90);
  *(_QWORD *)(v14 + 128) = v94;
  v96 = malloc_type_malloc(v90, 0x2C8E6D5CuLL);
  v97 = v96;
  v98 = a1 == 0;
  if (v96)
    v98 = 1;
  if (!v98)
  {
    v264 = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
    v265 = std::bad_alloc::bad_alloc(v264);
  }
  bzero(v96, v90);
  *(_QWORD *)(v14 + 184) = v97;
  v99 = malloc_type_malloc(v90, 0x2C8E6D5CuLL);
  v100 = v99;
  v101 = a1 == 0;
  if (v99)
    v101 = 1;
  if (!v101)
  {
    v266 = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
    v267 = std::bad_alloc::bad_alloc(v266);
  }
  bzero(v99, v90);
  *(_QWORD *)(v14 + 136) = v100;
  v102 = malloc_type_malloc(v90, 0x2C8E6D5CuLL);
  v103 = v102;
  v104 = a1 == 0;
  if (v102)
    v104 = 1;
  if (!v104)
  {
    v268 = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
    v269 = std::bad_alloc::bad_alloc(v268);
  }
  bzero(v102, v90);
  *(_QWORD *)(v14 + 144) = v103;
  v105 = (a1 + 24);
  v106 = malloc_type_malloc(4 * (int)v105, 0x2C8E6D5CuLL);
  v107 = v106;
  if (a1 != -24 && !v106)
  {
    v270 = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
    v271 = std::bad_alloc::bad_alloc(v270);
  }
  bzero(v106, 4 * (int)v105);
  *(_QWORD *)(v14 + 152) = v107;
  v108 = malloc_type_malloc(4 * (int)v105, 0x2C8E6D5CuLL);
  v109 = v108;
  v110 = (_DWORD)v105 == 0;
  if (v108)
    v110 = 1;
  if (!v110)
  {
    v272 = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
    v273 = std::bad_alloc::bad_alloc(v272);
  }
  bzero(v108, 4 * (int)v105);
  *(_QWORD *)(v14 + 160) = v109;
  v111 = malloc_type_malloc(4 * (int)v105, 0x2C8E6D5CuLL);
  v112 = v111;
  v113 = (_DWORD)v105 == 0;
  if (v111)
    v113 = 1;
  if (!v113)
  {
    v274 = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
    v275 = std::bad_alloc::bad_alloc(v274);
  }
  bzero(v111, 4 * (int)v105);
  *(_QWORD *)(v14 + 192) = v112;
  v114 = 4 * a1;
  v115 = malloc_type_malloc(v114, 0x2C8E6D5CuLL);
  v116 = v115;
  v117 = a1 == 0;
  if (v115)
    v117 = 1;
  if (!v117)
  {
    v276 = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
    v277 = std::bad_alloc::bad_alloc(v276);
  }
  bzero(v115, 4 * a1);
  *(_QWORD *)(v14 + 216) = v116;
  v118 = malloc_type_malloc(4 * a1, 0x2C8E6D5CuLL);
  v119 = v118;
  v120 = a1 == 0;
  if (v118)
    v120 = 1;
  if (!v120)
  {
    v278 = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
    v279 = std::bad_alloc::bad_alloc(v278);
  }
  bzero(v118, 4 * a1);
  *(_QWORD *)(v14 + 224) = v119;
  v121 = malloc_type_malloc(4 * a1, 0x2C8E6D5CuLL);
  v122 = v121;
  v123 = a1 == 0;
  if (v121)
    v123 = 1;
  if (!v123)
  {
    v280 = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
    v281 = std::bad_alloc::bad_alloc(v280);
  }
  bzero(v121, 4 * a1);
  *(_QWORD *)(v14 + 88) = v122;
  v124 = malloc_type_malloc(4 * a1, 0x2C8E6D5CuLL);
  v125 = v124;
  v126 = a1 == 0;
  if (v124)
    v126 = 1;
  if (!v126)
  {
    v282 = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
    v283 = std::bad_alloc::bad_alloc(v282);
  }
  bzero(v124, 4 * a1);
  *(_QWORD *)(v14 + 96) = v125;
  if (*(_DWORD *)(v14 + 428) == 2)
  {
    v127 = *(_QWORD *)(v14 + 88);
    if (a2 == 8000)
    {
      CNoiseSuppressorV4::curve_fn(flt_1B6687D68, 6, a1, v127);
      v128 = *(_QWORD *)(v14 + 96);
      v129 = (float *)&unk_1B6687DE8;
      v130 = 6;
    }
    else
    {
      CNoiseSuppressorV4::curve_fn(flt_1B6687D98, 10, a1, v127);
      v128 = *(_QWORD *)(v14 + 96);
      v129 = (float *)&unk_1B6687E18;
      v130 = 10;
    }
    CNoiseSuppressorV4::curve_fn(v129, v130, a1, v128);
  }
  vDSP_vfill(&__A, *(float **)(v14 + 216), 1, a1);
  v131 = malloc_type_malloc(4 * (int)v105, 0x2C8E6D5CuLL);
  v132 = v131;
  v133 = (_DWORD)v105 == 0;
  if (v131)
    v133 = 1;
  if (!v133)
  {
    v284 = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
    v285 = std::bad_alloc::bad_alloc(v284);
  }
  bzero(v131, 4 * (int)v105);
  *(_QWORD *)(v14 + 200) = v132;
  v134 = malloc_type_malloc(4 * (int)v105, 0x2C8E6D5CuLL);
  v135 = v134;
  v136 = (_DWORD)v105 == 0;
  if (v134)
    v136 = 1;
  if (!v136)
  {
    v286 = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
    v287 = std::bad_alloc::bad_alloc(v286);
  }
  bzero(v134, 4 * (int)v105);
  *(_QWORD *)(v14 + 208) = v135;
  v137 = malloc_type_malloc(4 * (int)v105, 0x2C8E6D5CuLL);
  v138 = v137;
  v139 = (_DWORD)v105 == 0;
  if (v137)
    v139 = 1;
  if (!v139)
  {
    v288 = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
    v289 = std::bad_alloc::bad_alloc(v288);
  }
  bzero(v137, 4 * (int)v105);
  *(_QWORD *)(v14 + 376) = v138;
  v140 = malloc_type_malloc(4 * (int)v105, 0x2C8E6D5CuLL);
  v141 = v140;
  v142 = (_DWORD)v105 == 0;
  if (v140)
    v142 = 1;
  if (!v142)
  {
    v290 = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
    v291 = std::bad_alloc::bad_alloc(v290);
  }
  bzero(v140, 4 * (int)v105);
  *(_QWORD *)(v14 + 232) = v141;
  v143 = malloc_type_malloc(4 * (int)v105, 0x2C8E6D5CuLL);
  v144 = v143;
  v145 = (_DWORD)v105 == 0;
  if (v143)
    v145 = 1;
  if (!v145)
  {
    v292 = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
    v293 = std::bad_alloc::bad_alloc(v292);
  }
  bzero(v143, 4 * (int)v105);
  *(_QWORD *)(v14 + 240) = v144;
  v146 = malloc_type_malloc(4 * (int)v105, 0x2C8E6D5CuLL);
  v147 = v146;
  v148 = (_DWORD)v105 == 0;
  if (v146)
    v148 = 1;
  if (!v148)
  {
    v294 = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
    v295 = std::bad_alloc::bad_alloc(v294);
  }
  bzero(v146, 4 * (int)v105);
  *(_QWORD *)(v14 + 256) = v147;
  v149 = malloc_type_malloc(4 * (int)v105, 0x2C8E6D5CuLL);
  v150 = v149;
  v151 = (_DWORD)v105 == 0;
  if (v149)
    v151 = 1;
  if (!v151)
  {
    v296 = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
    v297 = std::bad_alloc::bad_alloc(v296);
  }
  bzero(v149, 4 * (int)v105);
  *(_QWORD *)(v14 + 264) = v150;
  v152 = malloc_type_malloc(4 * (int)v105, 0x2C8E6D5CuLL);
  v153 = v152;
  v154 = (_DWORD)v105 == 0;
  if (v152)
    v154 = 1;
  if (!v154)
  {
    v298 = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
    v299 = std::bad_alloc::bad_alloc(v298);
  }
  bzero(v152, 4 * (int)v105);
  *(_QWORD *)(v14 + 248) = v153;
  v155 = malloc_type_malloc(4 * (int)v105, 0x2C8E6D5CuLL);
  v156 = v155;
  v157 = (_DWORD)v105 == 0;
  if (v155)
    v157 = 1;
  if (!v157)
  {
    v300 = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
    v301 = std::bad_alloc::bad_alloc(v300);
  }
  bzero(v155, 4 * (int)v105);
  *(_QWORD *)(v14 + 168) = v156;
  v158 = malloc_type_malloc(4 * (int)v105, 0x2C8E6D5CuLL);
  v159 = v158;
  v160 = (_DWORD)v105 == 0;
  if (v158)
    v160 = 1;
  if (!v160)
  {
    v302 = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
    v303 = std::bad_alloc::bad_alloc(v302);
  }
  bzero(v158, 4 * (int)v105);
  *(_QWORD *)(v14 + 176) = v159;
  v161 = malloc_type_malloc(4 * (int)v105, 0x2C8E6D5CuLL);
  v162 = v161;
  v163 = (_DWORD)v105 == 0;
  if (v161)
    v163 = 1;
  if (!v163)
  {
    v304 = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
    v305 = std::bad_alloc::bad_alloc(v304);
  }
  bzero(v161, 4 * (int)v105);
  *(_QWORD *)(v14 + 368) = v162;
  v164 = malloc_type_malloc(4 * a1, 0x2C8E6D5CuLL);
  v165 = v164;
  v166 = a1 == 0;
  if (v164)
    v166 = 1;
  if (!v166)
  {
    v306 = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
    v307 = std::bad_alloc::bad_alloc(v306);
  }
  bzero(v164, 4 * a1);
  *(_QWORD *)(v14 + 272) = v165;
  v167 = malloc_type_malloc(4 * a1, 0x2C8E6D5CuLL);
  v168 = v167;
  v169 = a1 == 0;
  if (v167)
    v169 = 1;
  if (!v169)
  {
    v308 = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
    v309 = std::bad_alloc::bad_alloc(v308);
  }
  bzero(v167, 4 * a1);
  *(_QWORD *)(v14 + 280) = v168;
  v170 = malloc_type_malloc(4 * a1, 0x2C8E6D5CuLL);
  v171 = v170;
  v172 = a1 == 0;
  if (v170)
    v172 = 1;
  if (!v172)
  {
    v310 = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
    v311 = std::bad_alloc::bad_alloc(v310);
  }
  bzero(v170, 4 * a1);
  *(_QWORD *)(v14 + 288) = v171;
  v173 = malloc_type_malloc(4 * a1, 0x2C8E6D5CuLL);
  v174 = v173;
  v175 = a1 == 0;
  if (v173)
    v175 = 1;
  if (!v175)
  {
    v312 = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
    v313 = std::bad_alloc::bad_alloc(v312);
  }
  bzero(v173, 4 * a1);
  *(_QWORD *)(v14 + 296) = v174;
  v176 = malloc_type_malloc(4 * a1, 0x2C8E6D5CuLL);
  v177 = v176;
  v178 = a1 == 0;
  if (v176)
    v178 = 1;
  if (!v178)
  {
    v314 = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
    v315 = std::bad_alloc::bad_alloc(v314);
  }
  bzero(v176, 4 * a1);
  *(_QWORD *)(v14 + 304) = v177;
  v179 = malloc_type_malloc(4 * a1, 0x2C8E6D5CuLL);
  v180 = v179;
  v181 = a1 == 0;
  if (v179)
    v181 = 1;
  if (!v181)
  {
    v316 = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
    v317 = std::bad_alloc::bad_alloc(v316);
  }
  bzero(v179, 4 * a1);
  *(_QWORD *)(v14 + 312) = v180;
  v182 = malloc_type_malloc(4 * a1, 0x2C8E6D5CuLL);
  v183 = v182;
  v184 = a1 == 0;
  if (v182)
    v184 = 1;
  if (!v184)
  {
    v318 = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
    v319 = std::bad_alloc::bad_alloc(v318);
  }
  bzero(v182, 4 * a1);
  *(_QWORD *)(v14 + 320) = v183;
  v185 = malloc_type_malloc(4 * a1, 0x2C8E6D5CuLL);
  v186 = v185;
  v187 = a1 == 0;
  if (v185)
    v187 = 1;
  if (!v187)
  {
    v320 = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
    v321 = std::bad_alloc::bad_alloc(v320);
  }
  bzero(v185, 4 * a1);
  *(_QWORD *)(v14 + 384) = v186;
  *(_DWORD *)(v14 + 72) = 6;
  *(_QWORD *)(v14 + 64) = CNoiseSuppressorV4::setup_update_thresh_lut(int,int,SpeexPair_tV4 **,int *,float **)::threshold_points;
  *(float *)&dword_1EF134690 = v87 * 0.5;
  v188 = malloc_type_malloc(4 * a1, 0x2C8E6D5CuLL);
  v189 = (uint64_t)v188;
  v190 = a1 == 0;
  if (v188)
    v190 = 1;
  if (!v190)
  {
    v322 = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
    v323 = std::bad_alloc::bad_alloc(v322);
  }
  bzero(v188, 4 * a1);
  *(_QWORD *)(v14 + 80) = v189;
  CNoiseSuppressorV4::curve_fn(CNoiseSuppressorV4::setup_update_thresh_lut(int,int,SpeexPair_tV4 **,int *,float **)::threshold_points, *(_DWORD *)(v14 + 72), a1, v189);
  v191 = malloc_type_malloc(4 * a1, 0x2C8E6D5CuLL);
  v192 = v191;
  v193 = a1 == 0;
  if (v191)
    v193 = 1;
  if (!v193)
  {
    v324 = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
    v325 = std::bad_alloc::bad_alloc(v324);
  }
  bzero(v191, 4 * a1);
  *(_QWORD *)(v14 + 536) = v192;
  v194 = malloc_type_malloc(4 * a1, 0x2C8E6D5CuLL);
  v195 = v194;
  v196 = a1 == 0;
  if (v194)
    v196 = 1;
  if (!v196)
  {
    v326 = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
    v327 = std::bad_alloc::bad_alloc(v326);
  }
  bzero(v194, 4 * a1);
  *(_QWORD *)(v14 + 544) = v195;
  v197 = malloc_type_malloc(4 * a1, 0x2C8E6D5CuLL);
  v198 = v197;
  v199 = a1 == 0;
  if (v197)
    v199 = 1;
  if (!v199)
  {
    v328 = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
    v329 = std::bad_alloc::bad_alloc(v328);
  }
  bzero(v197, 4 * a1);
  *(_QWORD *)(v14 + 552) = v198;
  if (*(_DWORD *)(v14 + 428) == 2)
  {
    *(_QWORD *)(v14 + 432) = 1;
    v200 = 1.0 - expf(-1.0 / v88);
    *(float *)(v14 + 440) = v200;
    *(float *)(v14 + 444) = 1.0 - v200;
    *(float *)(v14 + 448) = 2.5 / v88;
  }
  *(_DWORD *)(v14 + 472) = 0;
  CreateMagicalWindow(*(_QWORD *)(v14 + 184), v346);
  v201 = *(_DWORD *)(v14 + 4);
  if (v346 < 2 * v201)
    memset_pattern16((void *)(*(_QWORD *)(v14 + 184) + v90), &unk_1B6627B80, 4 * (2 * v201 - v346 - 2) + 8);
  if (a1 < -23)
    goto LABEL_196;
  v202 = *(_DWORD **)(v14 + 192);
  v203 = *(_DWORD **)(v14 + 232);
  v204 = *(_DWORD **)(v14 + 240);
  v206 = *(_DWORD **)(v14 + 256);
  v205 = *(_DWORD **)(v14 + 264);
  v207 = *(_DWORD **)(v14 + 248);
  do
  {
    *v202++ = 1065353216;
    *v203++ = 0;
    *v204++ = 1065353216;
    *v207++ = 1065353216;
    *v205++ = 1065353216;
    *v206++ = 1065353216;
    --v105;
  }
  while (v105);
  if (a1 < 1)
  {
LABEL_196:
    v215 = 0;
  }
  else
  {
    v208 = *(_DWORD **)(v14 + 304);
    v209 = *(_DWORD **)(v14 + 312);
    v210 = *(_DWORD **)(v14 + 200);
    v211 = a1;
    v212 = a1;
    do
    {
      *v208++ = 1065353216;
      *v209++ = 1065353216;
      *v210++ = 981668463;
      --v212;
    }
    while (v212);
    v213 = *(_DWORD **)(v14 + 536);
    v214 = *(_DWORD **)(v14 + 552);
    do
    {
      *v213++ = 0;
      *v214++ = 0;
      --v211;
    }
    while (v211);
    v215 = 1;
  }
  *(_DWORD *)(v14 + 564) = 0;
  v216 = *(_DWORD *)(v14 + 8);
  *(_DWORD *)(v14 + 464) = 4000 * v201 / v216 - 1;
  *(_DWORD *)(v14 + 468) = 8000 * v201 / v216 - 1;
  *(_DWORD *)(v14 + 476) = 0;
  v217 = malloc_type_malloc(4 * a1, 0x2C8E6D5CuLL);
  v218 = v217;
  v219 = a1 == 0;
  if (v217)
    v219 = 1;
  if (!v219)
  {
    v330 = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
    v331 = std::bad_alloc::bad_alloc(v330);
  }
  bzero(v217, 4 * a1);
  *(_QWORD *)(v14 + 496) = v218;
  *(_QWORD *)(v14 + 480) = 0;
  *(_DWORD *)(v14 + 488) = 0;
  *(_QWORD *)(v14 + 504) = 0;
  *(_QWORD *)(v14 + 520) = 0;
  *(_DWORD *)(v14 + 528) = 1065353216;
  *(float *)(v14 + 532) = 0.5 / v88;
  v220 = malloc_type_malloc(4 * a1, 0x2C8E6D5CuLL);
  v221 = v220;
  v222 = a1 == 0;
  if (v220)
    v222 = 1;
  if (!v222)
  {
    v332 = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
    v333 = std::bad_alloc::bad_alloc(v332);
  }
  bzero(v220, 4 * a1);
  *(_QWORD *)(v14 + 584) = v221;
  v223 = malloc_type_malloc(4 * a1, 0x2C8E6D5CuLL);
  v224 = v223;
  v225 = a1 == 0;
  if (v223)
    v225 = 1;
  if (!v225)
  {
    v334 = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
    v335 = std::bad_alloc::bad_alloc(v334);
  }
  bzero(v223, 4 * a1);
  *(_QWORD *)(v14 + 592) = v224;
  *(_DWORD *)(v14 + 560) = 0;
  *(_DWORD *)(v14 + 568) = 0;
  *(_DWORD *)(v14 + 452) = 0;
  *(_QWORD *)(v14 + 336) = 0;
  v226 = (char *)malloc_type_malloc(4 * a1, 0x2C8E6D5CuLL);
  v227 = v226;
  v228 = a1 == 0;
  if (v226)
    v228 = 1;
  if (!v228)
  {
    v336 = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
    v337 = std::bad_alloc::bad_alloc(v336);
  }
  bzero(v226, 4 * a1);
  *(_QWORD *)(v14 + 344) = v227;
  *(float *)(v14 + 352) = 1.0 / (float)((float)((float)a1 + (float)a1) * (float)a1);
  *(float *)(v14 + 360) = 1.0 - expf(-1.0 / (float)(v88 + v88));
  v229 = (double)*(int *)(v14 + 8);
  if (v215)
  {
    v230 = v229 / ((double)a1 + (double)a1);
    v349 = v230;
    v348 = (uint64x2_t)vdupq_n_s64((unint64_t)a1 - 1);
    v231 = (a1 + 1) & 0x1FFFFFFFELL;
    v232 = (int32x2_t)0x100000000;
    v233 = (uint64x2_t)xmmword_1B6626830;
    v234 = (float *)(v227 + 4);
    v235 = (float32x2_t)vdup_n_s32(0x43D428CAu);
    v236 = (float32x2_t)vdup_n_s32(0x4D0DCF73u);
    v347 = vdupq_n_s64(2uLL);
    do
    {
      v353 = vmovn_s64((int64x2_t)vcgeq_u64(v348, v233));
      v355 = (int64x2_t)v233;
      v237 = vmul_n_f32(vcvt_f32_s32(v232), v349);
      v352 = vmul_f32(v237, v237);
      __x = vcvtq_f64_f32(v237);
      v351 = pow(__x.f64[1], 8.0);
      *(double *)v238.i64 = pow(__x.f64[0], 8.0);
      *(long double *)&v238.i64[1] = v351;
      v239 = vcvtq_f64_f32(vadd_f32(v352, v235));
      v240 = vcvtq_f64_f32(vadd_f32(v352, v236));
      if ((v353.i8[0] & 1) != 0)
      {
        v241 = 3.5041384e16
             * *(double *)v238.i64
             / ((float)(v352.f32[0] + 11589.0)
              * vmulq_f64(v239, v239).f64[0]
              * (float)(v352.f32[0] + 544440.0)
              * vmulq_f64(v240, v240).f64[0]);
        *(v234 - 1) = v241;
      }
      if ((v353.i8[4] & 1) != 0)
      {
        v242 = (float64x2_t)vzip2q_s64(v238, (int64x2_t)v240);
        v240.f64[0] = 3.5041384e16;
        v243 = vmulq_f64(v242, v240);
        *(float *)v243.f64 = v243.f64[0]
                           / vmuld_lane_f64(vmuld_lane_f64((float)(v352.f32[1] + 11589.0), vmulq_f64(v239, v239), 1)* (float)(v352.f32[1] + 544440.0), v243, 1);
        *v234 = *(float *)v243.f64;
      }
      v233 = (uint64x2_t)vaddq_s64(v355, v347);
      v232 = vadd_s32(v232, (int32x2_t)0x200000002);
      v234 += 2;
      v231 -= 2;
    }
    while (v231);
  }
  *(_QWORD *)(v14 + 608) = 0x4100000041000000;
  *(_DWORD *)(v14 + 616) = 1090519040;
  *(_DWORD *)(v14 + 620) = (int)((double)v346 * 1000.0 / v229);
  *(_OWORD *)(v14 + 624) = xmmword_1B66A2600;
  *(_QWORD *)(v14 + 640) = 0x425C000042480000;
  *(_DWORD *)(v14 + 648) = 1059481190;
  v244 = malloc_type_malloc(4 * a1, 0x2C8E6D5CuLL);
  v245 = v244;
  v246 = a1 == 0;
  if (v244)
    v246 = 1;
  if (!v246)
  {
    v338 = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
    v339 = std::bad_alloc::bad_alloc(v338);
  }
  bzero(v244, 4 * a1);
  *(_QWORD *)(v14 + 656) = v245;
  v247 = malloc_type_malloc(4 * a1, 0x2C8E6D5CuLL);
  v248 = v247;
  v249 = a1 == 0;
  if (v247)
    v249 = 1;
  if (!v249)
  {
    v340 = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
    v341 = std::bad_alloc::bad_alloc(v340);
  }
  bzero(v247, 4 * a1);
  *(_QWORD *)(v14 + 664) = v248;
  v250 = malloc_type_malloc(4 * a1, 0x2C8E6D5CuLL);
  v251 = v250;
  v252 = a1 == 0;
  if (v250)
    v252 = 1;
  if (!v252)
  {
    v342 = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
    v343 = std::bad_alloc::bad_alloc(v342);
  }
  v253 = a1 != 0;
  bzero(v250, 4 * a1);
  *(_QWORD *)(v14 + 672) = v251;
  v254 = malloc_type_malloc(4 * a1, 0x2C8E6D5CuLL);
  v255 = v254;
  v256 = !v253;
  if (v254)
    v256 = 1;
  if ((v256 & 1) == 0)
  {
    v344 = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
    v345 = std::bad_alloc::bad_alloc(v344);
  }
  bzero(v254, v114);
  *(_QWORD *)(v14 + 680) = v255;
  return v14;
}

void sub_1B6474140(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1BCC95CEC](v1, 0x10A0C406C6E14A4);
  _Unwind_Resume(a1);
}

uint64_t *std::unique_ptr<NoiseSuppression::Noise::LPCore>::reset[abi:ne180100](uint64_t *result, uint64_t a2)
{
  uint64_t v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;

  v2 = *result;
  *result = a2;
  if (v2)
  {
    v3 = *(void **)(v2 + 608);
    if (v3)
    {
      *(_QWORD *)(v2 + 616) = v3;
      operator delete(v3);
    }
    v4 = *(void **)(v2 + 584);
    if (v4)
    {
      *(_QWORD *)(v2 + 592) = v4;
      operator delete(v4);
    }
    v5 = *(void **)(v2 + 560);
    if (v5)
    {
      *(_QWORD *)(v2 + 568) = v5;
      operator delete(v5);
    }
    v6 = *(void **)(v2 + 536);
    if (v6)
    {
      *(_QWORD *)(v2 + 544) = v6;
      operator delete(v6);
    }
    v7 = *(void **)(v2 + 512);
    if (v7)
    {
      *(_QWORD *)(v2 + 520) = v7;
      operator delete(v7);
    }
    v8 = *(void **)(v2 + 488);
    if (v8)
    {
      *(_QWORD *)(v2 + 496) = v8;
      operator delete(v8);
    }
    v9 = *(void **)(v2 + 464);
    if (v9)
    {
      *(_QWORD *)(v2 + 472) = v9;
      operator delete(v9);
    }
    v10 = *(void **)(v2 + 440);
    if (v10)
    {
      *(_QWORD *)(v2 + 448) = v10;
      operator delete(v10);
    }
    v11 = *(void **)(v2 + 416);
    if (v11)
    {
      *(_QWORD *)(v2 + 424) = v11;
      operator delete(v11);
    }
    v12 = *(void **)(v2 + 392);
    if (v12)
    {
      *(_QWORD *)(v2 + 400) = v12;
      operator delete(v12);
    }
    v13 = *(void **)(v2 + 368);
    if (v13)
    {
      *(_QWORD *)(v2 + 376) = v13;
      operator delete(v13);
    }
    v14 = *(void **)(v2 + 344);
    if (v14)
    {
      *(_QWORD *)(v2 + 352) = v14;
      operator delete(v14);
    }
    v15 = *(void **)(v2 + 320);
    if (v15)
    {
      *(_QWORD *)(v2 + 328) = v15;
      operator delete(v15);
    }
    v16 = *(void **)(v2 + 296);
    if (v16)
    {
      *(_QWORD *)(v2 + 304) = v16;
      operator delete(v16);
    }
    v17 = *(void **)(v2 + 272);
    if (v17)
    {
      *(_QWORD *)(v2 + 280) = v17;
      operator delete(v17);
    }
    std::unique_ptr<VPTimeFreqConverter>::reset[abi:ne180100]((VPTimeFreqConverter **)(v2 + 264), 0);
    std::unique_ptr<VPTimeFreqConverter>::reset[abi:ne180100]((VPTimeFreqConverter **)(v2 + 256), 0);
    std::unique_ptr<VPTimeFreqConverter>::reset[abi:ne180100]((VPTimeFreqConverter **)(v2 + 248), 0);
    v18 = *(_QWORD *)(v2 + 240);
    *(_QWORD *)(v2 + 240) = 0;
    if (v18)
      (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
    v19 = *(_QWORD **)(v2 + 232);
    *(_QWORD *)(v2 + 232) = 0;
    if (v19)
      std::default_delete<NoiseSuppression::Noise::LPCPitch>::operator()[abi:ne180100](v19);
    v20 = *(_QWORD *)(v2 + 224);
    *(_QWORD *)(v2 + 224) = 0;
    if (v20)
      (*(void (**)(uint64_t))(*(_QWORD *)v20 + 16))(v20);
    JUMPOUT(0x1BCC95CECLL);
  }
  return result;
}

uint64_t CNoiseSuppressorV4::SetNoiseEstimator(uint64_t a1, int a2)
{
  float v3;
  int v4;
  NoiseSuppression::Noise::HendriksSPP *v5;
  uint64_t v6;

  v3 = (float)*(int *)(a1 + 8);
  v4 = *(_DWORD *)a1;
  if (a2)
  {
    v5 = (NoiseSuppression::Noise::HendriksSPP *)operator new();
    NoiseSuppression::Noise::HendriksSPP::HendriksSPP(v5, v3, v4, v3 / (float)v4);
  }
  else
  {
    v5 = (NoiseSuppression::Noise::HendriksSPP *)operator new();
    NoiseSuppression::Noise::VPv3::VPv3(v5, v3, v4, v3 / (float)v4);
  }
  v6 = *(_QWORD *)(a1 + 696);
  *(_QWORD *)(a1 + 696) = v5;
  if (v6)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
    v5 = *(NoiseSuppression::Noise::HendriksSPP **)(a1 + 696);
  }
  (*(void (**)(NoiseSuppression::Noise::HendriksSPP *))(*(_QWORD *)v5 + 16))(v5);
  return 0;
}

void sub_1B6474624(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, __int128 a9, __int128 a10, uint64_t a11, uint64_t a12, __int128 buf)
{
  uint64_t v13;
  unsigned int *v16;
  unsigned int *v17;
  NSObject *v18;
  const char *v19;
  uint8_t *p_buf;
  uint32_t v21;

  if (!a2)
    _Unwind_Resume(a1);
  MEMORY[0x1BCC95CEC](v13, 0x10B1C40E3F849BDLL);
  v16 = (unsigned int *)__cxa_begin_catch(a1);
  if (a2 == 2)
  {
    v17 = v16;
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      CAXException::FormatError((CAXException *)v17[66], (char *)&buf, 0x100uLL);
      LODWORD(a9) = 136315906;
      *(_QWORD *)((char *)&a9 + 4) = "suppressor_classV4.cpp";
      WORD6(a9) = 1024;
      *(_DWORD *)((char *)&a9 + 14) = 1802;
      WORD1(a10) = 2080;
      *(_QWORD *)((char *)&a10 + 4) = v17 + 2;
      WORD6(a10) = 2080;
      *(_QWORD *)((char *)&a10 + 14) = &buf;
      v18 = MEMORY[0x1E0C81028];
      v19 = "%25s:%-5d Error in SetNoiseEstimator(): %s (%s)\n";
      p_buf = (uint8_t *)&a9;
      v21 = 38;
LABEL_7:
      _os_log_impl(&dword_1B5ED0000, v18, OS_LOG_TYPE_ERROR, v19, p_buf, v21);
    }
  }
  else if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
  {
    LODWORD(buf) = 136315394;
    *(_QWORD *)((char *)&buf + 4) = "suppressor_classV4.cpp";
    WORD6(buf) = 1024;
    *(_DWORD *)((char *)&buf + 14) = 1804;
    v18 = MEMORY[0x1E0C81028];
    v19 = "%25s:%-5d Unspecified error in SetNoiseEstimator().\n";
    p_buf = (uint8_t *)&buf;
    v21 = 18;
    goto LABEL_7;
  }
  __cxa_end_catch();
  JUMPOUT(0x1B64745F0);
}

void CNoiseSuppressorV4::speex_preprocess_state_destroy(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  free(*(void **)(a1 + 120));
  free(*(void **)(a1 + 128));
  free(*(void **)(a1 + 136));
  free(*(void **)(a1 + 144));
  free(*(void **)(a1 + 152));
  free(*(void **)(a1 + 160));
  free(*(void **)(a1 + 168));
  free(*(void **)(a1 + 176));
  free(*(void **)(a1 + 184));
  free(*(void **)(a1 + 192));
  free(*(void **)(a1 + 216));
  free(*(void **)(a1 + 224));
  free(*(void **)(a1 + 200));
  free(*(void **)(a1 + 208));
  free(*(void **)(a1 + 232));
  free(*(void **)(a1 + 240));
  free(*(void **)(a1 + 248));
  free(*(void **)(a1 + 256));
  free(*(void **)(a1 + 264));
  free(*(void **)(a1 + 376));
  free(*(void **)(a1 + 272));
  free(*(void **)(a1 + 280));
  free(*(void **)(a1 + 288));
  free(*(void **)(a1 + 296));
  free(*(void **)(a1 + 304));
  free(*(void **)(a1 + 312));
  free(*(void **)(a1 + 320));
  free(*(void **)(a1 + 368));
  free(*(void **)(a1 + 80));
  free(*(void **)(a1 + 88));
  free(*(void **)(a1 + 96));
  free(*(void **)(a1 + 112));
  free(*(void **)(a1 + 536));
  free(*(void **)(a1 + 544));
  free(*(void **)(a1 + 552));
  free(*(void **)(a1 + 384));
  free(*(void **)(a1 + 344));
  free(*(void **)(a1 + 496));
  free(*(void **)(a1 + 656));
  free(*(void **)(a1 + 664));
  free(*(void **)(a1 + 672));
  free(*(void **)(a1 + 680));
  MultiRadixFFT_Dispose(*(_QWORD *)(a1 + 576));
  free(*(void **)(a1 + 584));
  free(*(void **)(a1 + 592));
  CFilterBank::filterbank_destroy(*(void ***)(a1 + 16));
  std::unique_ptr<NoiseSuppression::Noise::LPCore>::reset[abi:ne180100]((uint64_t *)(a1 + 688), 0);
  v2 = *(_QWORD *)(a1 + 696);
  *(_QWORD *)(a1 + 696) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = *(_QWORD *)(a1 + 704);
  *(_QWORD *)(a1 + 704) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  free((void *)a1);
}

float CNoiseSuppressorV4::speex_preprocess_run(int *a1, char *a2, char *a3, const float *a4)
{
  vDSP_Length v8;
  uint64_t v9;
  float *v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  int v14;
  float v15;
  MultiRadixRealFFT *v16;
  vDSP_Length v17;
  int v18;
  int v19;
  float v20;
  MultiRadixRealFFT *v21;
  DSPSplitComplex *v22;
  float result;
  NSObject *v24;
  NSObject *v25;
  DSPSplitComplex v26;
  DSPSplitComplex __Z;
  float __B;
  const char *v29;
  __int16 v30;
  int v31;
  uint64_t v32;

  v32 = *MEMORY[0x1E0C80C00];
  v8 = a1[1];
  MEMORY[0x1E0C80A78](a1);
  MEMORY[0x1E0C80A78](v9);
  __Z.realp = v10;
  __Z.imagp = &v10[v8];
  v26.realp = (float *)((char *)&v26 - v11);
  v26.imagp = (float *)((char *)&v26 + 4 * v8 - v11);
  if (v12)
  {
    v13 = 2 * v8 - *a1;
    v14 = *a1 - v13;
    memcpy(*((void **)a1 + 15), *((const void **)a1 + 67), 4 * v13);
    memcpy((void *)(*((_QWORD *)a1 + 15) + 4 * v13), a2, 4 * *a1);
    memcpy(*((void **)a1 + 67), &a2[4 * v14], 4 * v13);
    vDSP_vmul(*((const float **)a1 + 15), 1, *((const float **)a1 + 23), 1, *((float **)a1 + 15), 1, 2 * v8);
    vDSP_ctoz(*((const DSPComplex **)a1 + 15), 2, &__Z, 1, v8);
    v16 = (MultiRadixRealFFT *)*((_QWORD *)a1 + 72);
    if (v16)
    {
      MultiRadixRealFFT::RealInPlaceTransform(v16, &__Z, 1, v15);
LABEL_4:
      __B = (float)(int)v8 + (float)(int)v8;
      vDSP_vsdiv(__Z.realp, 1, &__B, __Z.realp, 1, v8);
      vDSP_vsdiv(__Z.imagp, 1, &__B, __Z.imagp, 1, v8);
      goto LABEL_5;
    }
    if (SuppressorClassLogScope(void)::once != -1)
      dispatch_once(&SuppressorClassLogScope(void)::once, &__block_literal_global_5244);
    if (SuppressorClassLogScope(void)::scope)
    {
      v24 = *(NSObject **)SuppressorClassLogScope(void)::scope;
      if (!*(_QWORD *)SuppressorClassLogScope(void)::scope)
        goto LABEL_4;
    }
    else
    {
      v24 = MEMORY[0x1E0C81028];
    }
    if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR))
    {
      __B = 4.8151e-34;
      v29 = "suppressor_classV4.cpp";
      v30 = 1024;
      v31 = 480;
      _os_log_impl(&dword_1B5ED0000, v24, OS_LOG_TYPE_ERROR, "%25s:%-5d MultiRadixRealFFT_RealInPlaceTransform() returned an error.", (uint8_t *)&__B, 0x12u);
    }
    goto LABEL_4;
  }
LABEL_5:
  if (a3)
  {
    v17 = a1[1];
    v18 = 2 * v17 - *a1;
    v19 = *a1 - v18;
    memcpy(*((void **)a1 + 16), *((const void **)a1 + 68), 4 * v18);
    memcpy((void *)(*((_QWORD *)a1 + 16) + 4 * v18), a3, 4 * *a1);
    memcpy(*((void **)a1 + 68), &a3[4 * v19], 4 * v18);
    vDSP_vmul(*((const float **)a1 + 16), 1, *((const float **)a1 + 23), 1, *((float **)a1 + 16), 1, 2 * v17);
    vDSP_ctoz(*((const DSPComplex **)a1 + 16), 2, &v26, 1, v17);
    v21 = (MultiRadixRealFFT *)*((_QWORD *)a1 + 72);
    if (v21)
    {
      MultiRadixRealFFT::RealInPlaceTransform(v21, &v26, 1, v20);
LABEL_8:
      __B = (float)(int)v17 + (float)(int)v17;
      vDSP_vsdiv(v26.realp, 1, &__B, v26.realp, 1, v17);
      vDSP_vsdiv(v26.imagp, 1, &__B, v26.imagp, 1, v17);
      v22 = &v26;
      goto LABEL_10;
    }
    if (SuppressorClassLogScope(void)::once != -1)
      dispatch_once(&SuppressorClassLogScope(void)::once, &__block_literal_global_5244);
    if (SuppressorClassLogScope(void)::scope)
    {
      v25 = *(NSObject **)SuppressorClassLogScope(void)::scope;
      if (!*(_QWORD *)SuppressorClassLogScope(void)::scope)
        goto LABEL_8;
    }
    else
    {
      v25 = MEMORY[0x1E0C81028];
    }
    if (os_log_type_enabled(v25, OS_LOG_TYPE_ERROR))
    {
      __B = 4.8151e-34;
      v29 = "suppressor_classV4.cpp";
      v30 = 1024;
      v31 = 510;
      _os_log_impl(&dword_1B5ED0000, v25, OS_LOG_TYPE_ERROR, "%25s:%-5d MultiRadixRealFFT_RealInPlaceTransform() returned an error.", (uint8_t *)&__B, 0x12u);
    }
    goto LABEL_8;
  }
  v22 = 0;
LABEL_10:
  CNoiseSuppressorV4::speex_preprocess_run_freq((uint64_t)a1, (const float **)&__Z.realp, (const float **)&v22->realp, a4);
  if (a2)
    return CNoiseSuppressorV4::speex_synthesis(a1, (float *)a2);
  return result;
}

void **CNoiseSuppressorV4::speex_preprocess_load_known_noise(void **result, uint64_t a2, int a3)
{
  void **v4;
  float v5;
  int v6;
  int v7;
  int v8;
  float v10;
  float v11;
  uint64_t v12;
  float *v13;
  float v14;
  uint64_t v15;
  float v16;
  void **v17;

  if (result && a2)
  {
    v4 = result;
    v5 = (float)*((int *)result + 2);
    v6 = *(_DWORD *)a2;
    v7 = *(_DWORD *)(a2 + 4);
    v8 = *((_DWORD *)result + 1);
    if (v5 == (float)v7 && v8 == v6)
    {
      result = (void **)memcpy(result[24], *(const void **)(a2 + 8), 4 * v8);
    }
    else if (v8 >= 1)
    {
      v10 = v5 / ((double)v8 + (double)v8);
      v11 = ((double)v6 + (double)v6) / (double)v7;
      v12 = *((unsigned int *)result + 1);
      v13 = (float *)result[24];
      v14 = 0.0;
      do
      {
        v15 = (int)(float)(v11 * (float)(int)v14);
        if ((int)v15 + 1 >= v6)
          v16 = *(float *)(*(_QWORD *)(a2 + 8) + 4 * (v6 - 1));
        else
          v16 = (float)((float)((float)(v15 + 1) - (float)(v14 * v11)) * *(float *)(*(_QWORD *)(a2 + 8) + 4 * v15))
              + (float)(*(float *)(*(_QWORD *)(a2 + 8) + 4 * (v15 + 1)) * (float)((float)(v14 * v11) - (float)(int)v15));
        *v13++ = v16;
        v14 = v14 + v10;
        --v12;
      }
      while (v12);
    }
    if (a3 == 2)
    {
      v17 = v4 + 28;
      return (void **)memcpy(*v17, v4[24], 4 * *((int *)v4 + 1));
    }
    if (a3 == 1)
    {
      v17 = v4 + 27;
      return (void **)memcpy(*v17, v4[24], 4 * *((int *)v4 + 1));
    }
  }
  return result;
}

void AULoudspeakerManagerV2::~AULoudspeakerManagerV2(AULoudspeakerManagerV2 *this)
{
  uint64_t i;
  const void *v3;
  const void *v4;
  void **v5;

  *(_QWORD *)this = &off_1E69E0418;
  for (i = 2352; i != 2224; i -= 32)
  {
    v3 = *(const void **)((char *)this + i);
    if (v3)
      CFRelease(v3);
  }
  v5 = (void **)((char *)this + 2208);
  std::vector<std::unique_ptr<DspLib::LoudspeakerManagerV2::Calibration::SpTS::SpeakerCalibrationProperties>>::__destroy_vector::operator()[abi:ne180100](&v5);
  v4 = (const void *)*((_QWORD *)this + 275);
  if (v4)
    CFRelease(v4);
  AUDspLib::~AUDspLib(this);
}

{
  uint64_t v2;
  const void *v3;
  const void *v4;
  void **v5;

  *(_QWORD *)this = &off_1E69E0418;
  v2 = 2352;
  while (1)
  {
    v3 = *(const void **)((char *)this + v2);
    if (v3)
      CFRelease(v3);
    v2 -= 32;
    if (v2 == 2224)
    {
      v5 = (void **)((char *)this + 2208);
      std::vector<std::unique_ptr<DspLib::LoudspeakerManagerV2::Calibration::SpTS::SpeakerCalibrationProperties>>::__destroy_vector::operator()[abi:ne180100](&v5);
      v4 = (const void *)*((_QWORD *)this + 275);
      if (v4)
        CFRelease(v4);
      AUDspLib::~AUDspLib(this);
      JUMPOUT(0x1BCC95CECLL);
    }
  }
}

uint64_t AULoudspeakerManagerV2::Initialize(char **this)
{
  uint64_t result;
  DspLib::LoudspeakerManagerV2::Algorithm *v3;
  uint64_t v4;
  unint64_t v5;
  char v6;
  char v7;
  char v8;
  std::runtime_error *exception;
  CFTypeRef cf[2];
  char v11;
  void *__p[2];
  char v13;

  result = AUDspLib::Initialize((AUDspLib *)this);
  if (!(_DWORD)result)
  {
    if (AULoudspeakerManagerV2::ReadModelData((AULoudspeakerManagerV2 *)this))
      return 0xFFFFFFFFLL;
    v3 = (DspLib::LoudspeakerManagerV2::Algorithm *)this[66];
    if (!v3)
    {
      return 0xFFFFFFFFLL;
    }
    else
    {
      DspLib::LoudspeakerManagerV2::ModelManager::setSpTSCalibration((uint64_t)v3 + 296, this + 276);
      if (*((_BYTE *)this + 2252))
      {
        v4 = DspLib::AlgorithmBaseNewParameters::subAlgorithm((uint64_t)v3, 1);
        DspLib::LoudspeakerController::Algorithm::setCPMSBudgets(v4, (char **)((char *)this + 2236));
        *((_BYTE *)this + 2252) = 0;
      }
      applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)cf, CFSTR("com.apple.coreaudio"));
      if (!cf[0])
      {
        exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(exception, "Could not construct");
      }
      applesauce::CF::convert_to<std::string,0>((const __CFString *)cf[0], (uint64_t)__p);
      if (cf[0])
        CFRelease(cf[0]);
      std::string::basic_string[abi:ne180100]<0>(cf, "LSMv2EnableLogging");
      v5 = GetPreference<long long>((const UInt8 *)__p, (const UInt8 *)cf);
      v7 = v6;
      if (v11 < 0)
        operator delete((void *)cf[0]);
      if (v7)
        DspLib::LoudspeakerManagerV2::Algorithm::configureLogging(v3, v5);
      v8 = *((_BYTE *)this + 2384);
      *(_BYTE *)(DspLib::AlgorithmBaseNewParameters::subAlgorithm((uint64_t)v3, 1) + 469) = v8;
      if (v13 < 0)
        operator delete(__p[0]);
      return 0;
    }
  }
  return result;
}

void sub_1B6475134(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  void *v20;

  __cxa_free_exception(v20);
  applesauce::CF::StringRef::~StringRef((const void **)&__p);
  _Unwind_Resume(a1);
}

uint64_t AULoudspeakerManagerV2::GetPropertyInfo(AULoudspeakerManagerV2 *this, int a2, unsigned int a3, unsigned int a4, unsigned int *a5, BOOL *a6)
{
  uint64_t result;
  unsigned int v7;
  int v8;
  unsigned int v9;

  if (a2 <= 64007)
  {
    switch(a2)
    {
      case 6630:
        if (a3)
          return 4294956430;
        result = 0;
        v7 = 1600;
        goto LABEL_19;
      case 6631:
        return AUDspLib::GetPropertyInfo(this, a2, a3, a4, a5, a6);
      case 6632:
        if (a3)
          return 4294956430;
        result = 0;
        v7 = 8;
LABEL_19:
        *a5 = v7;
        *a6 = 1;
        return result;
      case 6633:
      case 6634:
        goto LABEL_13;
      default:
        if (a2 != 64004)
          return AUDspLib::GetPropertyInfo(this, a2, a3, a4, a5, a6);
LABEL_13:
        result = 0;
        *a6 = 1;
        v9 = 4;
        goto LABEL_14;
    }
  }
  if (a2 > 1835889522)
  {
    if (a2 == 1835889523)
      goto LABEL_11;
    v8 = 1886679923;
  }
  else
  {
    if (a2 == 64008)
      goto LABEL_11;
    v8 = 64009;
  }
  if (a2 != v8)
    return AUDspLib::GetPropertyInfo(this, a2, a3, a4, a5, a6);
LABEL_11:
  result = 0;
  *a6 = 1;
  v9 = 8;
LABEL_14:
  *a5 = v9;
  return result;
}

uint64_t AULoudspeakerManagerV2::GetProperty(AULoudspeakerManagerV2 *this, int a2, unsigned int a3, unsigned int a4, CFDictionaryRef *a5, int *a6)
{
  const __CFString *v6;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  CFDictionaryRef *v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  uint64_t v25;
  int32x2_t v26;
  uint64_t v27;
  char *v28;
  CFDictionaryRef *v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  uint64_t result;
  uint64_t *v39;
  int *v40;
  CFHashCode v41;
  unint64_t v42;
  uint8x8_t v43;
  unint64_t v44;
  CFTypeRef **v45;
  CFTypeRef *i;
  unint64_t v47;
  _QWORD *v48;
  CFNumberRef v49;
  float v50;
  _BOOL8 v51;
  unint64_t v52;
  unint64_t v53;
  size_t v54;
  uint64_t v55;
  _QWORD *v56;
  unint64_t v57;
  uint64_t v58;
  char *v59;
  char *v60;
  int64_t v61;
  unint64_t v62;
  unint64_t v63;
  uint64_t v64;
  char *v65;
  _QWORD *v66;
  _QWORD *v67;
  uint64_t v68;
  int64x2_t v69;
  const void *v70;
  CFArrayRef v71;
  int v72;
  uint64_t (***v73)(_QWORD, _QWORD, uint64_t);
  uint64_t v74;
  uint64_t v75;
  char *v76;
  float v77;
  float v78;
  const __CFDictionary *v79;
  CFDictionaryRef Copy;
  std::runtime_error *exception;
  uint64_t *v83;
  CFTypeRef cf;
  __int128 v85;
  __int128 v86;
  float v87;
  CFTypeRef v88[2];
  CFTypeRef v89;
  int valuePtr;
  CFTypeRef v91[6];
  __int128 v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  const __CFDictionary *v101;

  if (a2 <= 64003)
  {
    switch(a2)
    {
      case 6630:
        if (a3)
          return 4294956430;
        v9 = *((_QWORD *)this + 66);
        if (v9)
        {
          v10 = *(_QWORD *)(v9 + 360);
          if (*(_QWORD *)(v9 + 368) != v10)
          {
            v11 = 0;
            v12 = 1;
            do
            {
              v13 = v10 + 2440 * v11;
              v14 = &a5[25 * v11];
              *(_OWORD *)v14 = *(_OWORD *)(v13 + 2240);
              v15 = *(_OWORD *)(v13 + 2256);
              v16 = *(_OWORD *)(v13 + 2272);
              v17 = *(_OWORD *)(v13 + 2304);
              *((_OWORD *)v14 + 3) = *(_OWORD *)(v13 + 2288);
              *((_OWORD *)v14 + 4) = v17;
              *((_OWORD *)v14 + 1) = v15;
              *((_OWORD *)v14 + 2) = v16;
              v18 = *(_OWORD *)(v13 + 2320);
              v19 = *(_OWORD *)(v13 + 2336);
              v20 = *(_OWORD *)(v13 + 2368);
              *((_OWORD *)v14 + 7) = *(_OWORD *)(v13 + 2352);
              *((_OWORD *)v14 + 8) = v20;
              *((_OWORD *)v14 + 5) = v18;
              *((_OWORD *)v14 + 6) = v19;
              v21 = *(_OWORD *)(v13 + 2384);
              v22 = *(_OWORD *)(v13 + 2400);
              v23 = *(_OWORD *)(v13 + 2416);
              v14[24] = *(CFDictionaryRef *)(v13 + 2432);
              *((_OWORD *)v14 + 10) = v22;
              *((_OWORD *)v14 + 11) = v23;
              *((_OWORD *)v14 + 9) = v21;
              v11 = v12;
              v10 = *(_QWORD *)(v9 + 360);
            }
            while (0xFF2920BC035B7D1 * ((*(_QWORD *)(v9 + 368) - v10) >> 3) > (unint64_t)v12++);
          }
        }
        v25 = 0;
        v26 = vdup_n_s32(0xC2C80000);
        do
        {
          v101 = 0;
          v99 = 0uLL;
          v100 = 0uLL;
          v97 = 0uLL;
          v98 = 0uLL;
          v95 = 0uLL;
          v96 = 0uLL;
          v93 = 0uLL;
          v94 = 0uLL;
          v92 = 0uLL;
          LODWORD(v91[2]) = 0;
          *(_OWORD *)&v91[4] = 0uLL;
          LODWORD(v91[0]) = 1;
          *(CFTypeRef *)((char *)v91 + 4) = 0;
          *(CFTypeRef *)((char *)&v91[1] + 1) = 0;
          *(CFTypeRef *)((char *)&v91[2] + 4) = 0;
          *(CFTypeRef *)((char *)&v91[3] + 1) = 0;
          *(CFTypeRef *)((char *)&v91[4] + 4) = 0;
          v27 = 52;
          BYTE4(v91[5]) = 0;
          do
          {
            v28 = (char *)v91 + v27;
            *(_QWORD *)v28 = 0;
            *((_QWORD *)v28 + 1) = 0;
            v28[24] = 0;
            *((_QWORD *)v28 + 2) = 0;
            *(_QWORD *)(v28 + 28) = 0;
            v28[36] = 0;
            v27 += 44;
            v28[40] = 0;
          }
          while (v28 + 44 != (char *)&v100 + 8);
          *((int32x2_t *)&v100 + 1) = v26;
          v29 = &a5[25 * v25];
          v30 = v98;
          v31 = v100;
          *((_OWORD *)v29 + 10) = v99;
          *((_OWORD *)v29 + 11) = v31;
          v32 = v94;
          v33 = v96;
          v34 = v97;
          *((_OWORD *)v29 + 6) = v95;
          *((_OWORD *)v29 + 7) = v33;
          *((_OWORD *)v29 + 8) = v34;
          *((_OWORD *)v29 + 9) = v30;
          v35 = v92;
          v36 = v93;
          *((_OWORD *)v29 + 2) = *(_OWORD *)&v91[4];
          *((_OWORD *)v29 + 3) = v35;
          LODWORD(v101) = 1065353216;
          BYTE4(v101) = 0;
          v29[24] = v101;
          *((_OWORD *)v29 + 4) = v36;
          *((_OWORD *)v29 + 5) = v32;
          v37 = *(_OWORD *)&v91[2];
          ++v25;
          *(_OWORD *)v29 = *(_OWORD *)v91;
          *((_OWORD *)v29 + 1) = v37;
        }
        while (v25 != 8);
        return 0;
      case 6632:
        if (a3)
          return 4294956430;
        Copy = CFDictionaryCreateCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE00], *((CFDictionaryRef *)this + 275));
        applesauce::CF::DictionaryRef::DictionaryRef((applesauce::CF::DictionaryRef *)v91, Copy);
        result = 0;
        v79 = (const __CFDictionary *)v91[0];
        break;
      case 6633:
        result = 0;
        v72 = *((unsigned __int8 *)this + 2384);
        goto LABEL_113;
      case 6634:
        result = 0;
        v72 = *((unsigned __int8 *)this + 2385);
        goto LABEL_113;
      default:
        return AUDspLib::GetProperty(this, a2, a3, a4, a5, a6);
    }
LABEL_121:
    *a5 = v79;
    return result;
  }
  if (a2 != 64004)
  {
    if (a2 == 64008)
    {
      v75 = 0;
      memset(v91, 0, 32);
      LODWORD(v91[4]) = 1065353216;
      v76 = (char *)this + 2256;
      do
      {
        v77 = *(float *)&v76[v75 - 20];
        v78 = *((float *)this + 558);
        AULoudspeakerManagerV2::TimeScale<float>::getKey(v88, *(CFTypeRef *)&v76[8 * v75]);
        *(_QWORD *)&v85 = v88;
        *((float *)std::__hash_table<std::__hash_value_type<applesauce::CF::StringRef,float>,std::__unordered_map_hasher<applesauce::CF::StringRef,std::__hash_value_type<applesauce::CF::StringRef,float>,std::hash<applesauce::CF::StringRef>,std::equal_to<applesauce::CF::StringRef>,true>,std::__unordered_map_equal<applesauce::CF::StringRef,std::__hash_value_type<applesauce::CF::StringRef,float>,std::equal_to<applesauce::CF::StringRef>,std::hash<applesauce::CF::StringRef>,true>,std::allocator<std::__hash_value_type<applesauce::CF::StringRef,float>>>::__emplace_unique_key_args<applesauce::CF::StringRef,std::piecewise_construct_t const&,std::tuple<applesauce::CF::StringRef&&>,std::tuple<>>((uint64_t)v91, v88, (_QWORD **)&v85)+ 6) = v77 * v78;
        if (v88[0])
          CFRelease(v88[0]);
        v75 += 4;
      }
      while (v75 != 16);
      applesauce::CF::make_DictionaryRef<applesauce::CF::StringRef,float>((CFDictionaryRef *)&v85, (uint64_t)v91);
      std::__hash_table<std::__hash_value_type<applesauce::CF::StringRef,float>,std::__unordered_map_hasher<applesauce::CF::StringRef,std::__hash_value_type<applesauce::CF::StringRef,float>,std::hash<applesauce::CF::StringRef>,std::equal_to<applesauce::CF::StringRef>,true>,std::__unordered_map_equal<applesauce::CF::StringRef,std::__hash_value_type<applesauce::CF::StringRef,float>,std::equal_to<applesauce::CF::StringRef>,std::hash<applesauce::CF::StringRef>,true>,std::allocator<std::__hash_value_type<applesauce::CF::StringRef,float>>>::~__hash_table((uint64_t)v91);
      result = 0;
      v79 = (const __CFDictionary *)v85;
      goto LABEL_121;
    }
    if (a2 != 64009)
      return AUDspLib::GetProperty(this, a2, a3, a4, a5, a6);
    v88[0] = 0;
    v88[1] = 0;
    v89 = 0;
    v39 = (uint64_t *)*((_QWORD *)this + 276);
    v83 = (uint64_t *)*((_QWORD *)this + 277);
    if (v39 == v83)
    {
LABEL_107:
      v71 = applesauce::CF::details::make_CFArrayRef<applesauce::CF::DictionaryRef>((uint64_t **)v88);
      v91[0] = v88;
      std::vector<applesauce::CF::DictionaryRef>::__destroy_vector::operator()[abi:ne180100]((void ***)v91);
      result = 0;
      *a5 = v71;
      return result;
    }
    while (1)
    {
      v85 = 0u;
      v86 = 0u;
      v87 = 1.0;
      CFRetain(CFSTR("thiele_small_data_source_id"));
      applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&cf, CFSTR("thiele_small_data_source_id"));
      v40 = (int *)*v39;
      if (cf)
        v41 = CFHash(cf);
      else
        v41 = 0xD7C06285B9DE677ALL;
      v42 = *((_QWORD *)&v85 + 1);
      if (*((_QWORD *)&v85 + 1))
      {
        v43 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&v85 + 8));
        v43.i16[0] = vaddlv_u8(v43);
        v44 = v43.u32[0];
        if (v43.u32[0] > 1uLL)
        {
          v6 = (const __CFString *)v41;
          if (v41 >= *((_QWORD *)&v85 + 1))
            v6 = (const __CFString *)(v41 % *((_QWORD *)&v85 + 1));
        }
        else
        {
          v6 = (const __CFString *)((*((_QWORD *)&v85 + 1) - 1) & v41);
        }
        v45 = *(CFTypeRef ***)(v85 + 8 * (_QWORD)v6);
        if (v45)
        {
          for (i = *v45; i; i = (CFTypeRef *)*i)
          {
            v47 = (unint64_t)i[1];
            if (v47 == v41)
            {
              if (applesauce::CF::compare<applesauce::CF::StringRef,0,applesauce::CF::StringRef,0>(i + 2, (const __CFString **)&cf) == kCFCompareEqualTo)goto LABEL_59;
            }
            else
            {
              if (v44 > 1)
              {
                if (v47 >= v42)
                  v47 %= v42;
              }
              else
              {
                v47 &= v42 - 1;
              }
              if ((const __CFString *)v47 != v6)
                break;
            }
          }
        }
      }
      v48 = operator new(0x20uLL);
      v91[0] = v48;
      v91[1] = &v86;
      LOBYTE(v91[2]) = 0;
      *v48 = 0;
      v48[1] = v41;
      v48[2] = cf;
      cf = 0;
      valuePtr = *v40;
      v49 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
      v48[3] = v49;
      if (!v49)
      {
        exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(exception, "Could not construct");
      }
      LOBYTE(v91[2]) = 1;
      v50 = (float)(unint64_t)(*((_QWORD *)&v86 + 1) + 1);
      if (!v42 || (float)(v87 * (float)v42) < v50)
      {
        v51 = (v42 & (v42 - 1)) != 0;
        if (v42 < 3)
          v51 = 1;
        v52 = v51 | (2 * v42);
        v53 = vcvtps_u32_f32(v50 / v87);
        if (v52 <= v53)
          v54 = v53;
        else
          v54 = v52;
        std::__hash_table<std::__hash_value_type<unsigned int,std::tuple<__CFString const*,float,float,float,AudioUnitParameterUnit,unsigned int>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::tuple<__CFString const*,float,float,float,AudioUnitParameterUnit,unsigned int>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::tuple<__CFString const*,float,float,float,AudioUnitParameterUnit,unsigned int>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::tuple<__CFString const*,float,float,float,AudioUnitParameterUnit,unsigned int>>>>::__rehash<true>((uint64_t)&v85, v54);
        v42 = *((_QWORD *)&v85 + 1);
        if ((*((_QWORD *)&v85 + 1) & (*((_QWORD *)&v85 + 1) - 1)) != 0)
        {
          if (v41 >= *((_QWORD *)&v85 + 1))
            v6 = (const __CFString *)(v41 % *((_QWORD *)&v85 + 1));
          else
            v6 = (const __CFString *)v41;
        }
        else
        {
          v6 = (const __CFString *)((*((_QWORD *)&v85 + 1) - 1) & v41);
        }
      }
      v55 = v85;
      v56 = *(_QWORD **)(v85 + 8 * (_QWORD)v6);
      if (v56)
      {
        *v48 = *v56;
      }
      else
      {
        *v48 = v86;
        *(_QWORD *)&v86 = v48;
        *(_QWORD *)(v55 + 8 * (_QWORD)v6) = &v86;
        if (!*v48)
          goto LABEL_58;
        v57 = *(_QWORD *)(*v48 + 8);
        if ((v42 & (v42 - 1)) != 0)
        {
          if (v57 >= v42)
            v57 %= v42;
        }
        else
        {
          v57 &= v42 - 1;
        }
        v56 = (_QWORD *)(v85 + 8 * v57);
      }
      *v56 = v48;
LABEL_58:
      v91[0] = 0;
      ++*((_QWORD *)&v86 + 1);
      std::unique_ptr<std::__hash_node<std::__hash_value_type<applesauce::CF::StringRef,applesauce::CF::NumberRef>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<applesauce::CF::StringRef,applesauce::CF::NumberRef>,void *>>>>::reset[abi:ne180100]((uint64_t)v91);
LABEL_59:
      if (cf)
        CFRelease(cf);
      CFRetain(CFSTR("thiele_small_fs"));
      v6 = CFSTR("thiele_small_qts");
      applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)v91, CFSTR("thiele_small_fs"));
      std::__hash_table<std::__hash_value_type<applesauce::CF::StringRef,applesauce::CF::NumberRef>,std::__unordered_map_hasher<applesauce::CF::StringRef,std::__hash_value_type<applesauce::CF::StringRef,applesauce::CF::NumberRef>,std::hash<applesauce::CF::StringRef>,std::equal_to<applesauce::CF::StringRef>,true>,std::__unordered_map_equal<applesauce::CF::StringRef,std::__hash_value_type<applesauce::CF::StringRef,applesauce::CF::NumberRef>,std::equal_to<applesauce::CF::StringRef>,std::hash<applesauce::CF::StringRef>,true>,std::allocator<std::__hash_value_type<applesauce::CF::StringRef,applesauce::CF::NumberRef>>>::__emplace_unique_key_args<applesauce::CF::StringRef,applesauce::CF::StringRef,float &>((uint64_t)&v85, v91, v91, (int *)(*v39 + 16));
      if (v91[0])
        CFRelease(v91[0]);
      CFRetain(CFSTR("thiele_small_qts"));
      applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)v91, CFSTR("thiele_small_qts"));
      std::__hash_table<std::__hash_value_type<applesauce::CF::StringRef,applesauce::CF::NumberRef>,std::__unordered_map_hasher<applesauce::CF::StringRef,std::__hash_value_type<applesauce::CF::StringRef,applesauce::CF::NumberRef>,std::hash<applesauce::CF::StringRef>,std::equal_to<applesauce::CF::StringRef>,true>,std::__unordered_map_equal<applesauce::CF::StringRef,std::__hash_value_type<applesauce::CF::StringRef,applesauce::CF::NumberRef>,std::equal_to<applesauce::CF::StringRef>,std::hash<applesauce::CF::StringRef>,true>,std::allocator<std::__hash_value_type<applesauce::CF::StringRef,applesauce::CF::NumberRef>>>::__emplace_unique_key_args<applesauce::CF::StringRef,applesauce::CF::StringRef,float &>((uint64_t)&v85, v91, v91, (int *)(*v39 + 12));
      if (v91[0])
        CFRelease(v91[0]);
      CFRetain(CFSTR("thiele_small_re"));
      applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)v91, CFSTR("thiele_small_re"));
      std::__hash_table<std::__hash_value_type<applesauce::CF::StringRef,applesauce::CF::NumberRef>,std::__unordered_map_hasher<applesauce::CF::StringRef,std::__hash_value_type<applesauce::CF::StringRef,applesauce::CF::NumberRef>,std::hash<applesauce::CF::StringRef>,std::equal_to<applesauce::CF::StringRef>,true>,std::__unordered_map_equal<applesauce::CF::StringRef,std::__hash_value_type<applesauce::CF::StringRef,applesauce::CF::NumberRef>,std::equal_to<applesauce::CF::StringRef>,std::hash<applesauce::CF::StringRef>,true>,std::allocator<std::__hash_value_type<applesauce::CF::StringRef,applesauce::CF::NumberRef>>>::__emplace_unique_key_args<applesauce::CF::StringRef,applesauce::CF::StringRef,float &>((uint64_t)&v85, v91, v91, (int *)(*v39 + 4));
      if (v91[0])
        CFRelease(v91[0]);
      CFRetain(CFSTR("thiele_small_t"));
      applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)v91, CFSTR("thiele_small_t"));
      std::__hash_table<std::__hash_value_type<applesauce::CF::StringRef,applesauce::CF::NumberRef>,std::__unordered_map_hasher<applesauce::CF::StringRef,std::__hash_value_type<applesauce::CF::StringRef,applesauce::CF::NumberRef>,std::hash<applesauce::CF::StringRef>,std::equal_to<applesauce::CF::StringRef>,true>,std::__unordered_map_equal<applesauce::CF::StringRef,std::__hash_value_type<applesauce::CF::StringRef,applesauce::CF::NumberRef>,std::equal_to<applesauce::CF::StringRef>,std::hash<applesauce::CF::StringRef>,true>,std::allocator<std::__hash_value_type<applesauce::CF::StringRef,applesauce::CF::NumberRef>>>::__emplace_unique_key_args<applesauce::CF::StringRef,applesauce::CF::StringRef,float &>((uint64_t)&v85, v91, v91, (int *)(*v39 + 8));
      if (v91[0])
        CFRelease(v91[0]);
      v58 = *v39;
      if (*(_QWORD *)(*v39 + 24))
      {
        CFRetain(CFSTR("thiele_small_kms"));
        applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)v91, CFSTR("thiele_small_kms"));
        std::__hash_table<std::__hash_value_type<applesauce::CF::StringRef,applesauce::CF::NumberRef>,std::__unordered_map_hasher<applesauce::CF::StringRef,std::__hash_value_type<applesauce::CF::StringRef,applesauce::CF::NumberRef>,std::hash<applesauce::CF::StringRef>,std::equal_to<applesauce::CF::StringRef>,true>,std::__unordered_map_equal<applesauce::CF::StringRef,std::__hash_value_type<applesauce::CF::StringRef,applesauce::CF::NumberRef>,std::equal_to<applesauce::CF::StringRef>,std::hash<applesauce::CF::StringRef>,true>,std::allocator<std::__hash_value_type<applesauce::CF::StringRef,applesauce::CF::NumberRef>>>::__emplace_unique_key_args<applesauce::CF::StringRef,applesauce::CF::StringRef,float &>((uint64_t)&v85, v91, v91, *(int **)(*v39 + 24));
        if (v91[0])
          CFRelease(v91[0]);
        CFRetain(CFSTR("thiele_small_le"));
        applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)v91, CFSTR("thiele_small_le"));
        std::__hash_table<std::__hash_value_type<applesauce::CF::StringRef,applesauce::CF::NumberRef>,std::__unordered_map_hasher<applesauce::CF::StringRef,std::__hash_value_type<applesauce::CF::StringRef,applesauce::CF::NumberRef>,std::hash<applesauce::CF::StringRef>,std::equal_to<applesauce::CF::StringRef>,true>,std::__unordered_map_equal<applesauce::CF::StringRef,std::__hash_value_type<applesauce::CF::StringRef,applesauce::CF::NumberRef>,std::equal_to<applesauce::CF::StringRef>,std::hash<applesauce::CF::StringRef>,true>,std::allocator<std::__hash_value_type<applesauce::CF::StringRef,applesauce::CF::NumberRef>>>::__emplace_unique_key_args<applesauce::CF::StringRef,applesauce::CF::StringRef,float &>((uint64_t)&v85, v91, v91, (int *)(*(_QWORD *)(*v39 + 24) + 4));
        if (v91[0])
          CFRelease(v91[0]);
        CFRetain(CFSTR("thiele_small_bi"));
        applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)v91, CFSTR("thiele_small_bi"));
        std::__hash_table<std::__hash_value_type<applesauce::CF::StringRef,applesauce::CF::NumberRef>,std::__unordered_map_hasher<applesauce::CF::StringRef,std::__hash_value_type<applesauce::CF::StringRef,applesauce::CF::NumberRef>,std::hash<applesauce::CF::StringRef>,std::equal_to<applesauce::CF::StringRef>,true>,std::__unordered_map_equal<applesauce::CF::StringRef,std::__hash_value_type<applesauce::CF::StringRef,applesauce::CF::NumberRef>,std::equal_to<applesauce::CF::StringRef>,std::hash<applesauce::CF::StringRef>,true>,std::allocator<std::__hash_value_type<applesauce::CF::StringRef,applesauce::CF::NumberRef>>>::__emplace_unique_key_args<applesauce::CF::StringRef,applesauce::CF::StringRef,float &>((uint64_t)&v85, v91, v91, (int *)(*(_QWORD *)(*v39 + 24) + 8));
        if (v91[0])
          CFRelease(v91[0]);
        CFRetain(CFSTR("thiele_small_mms"));
        applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)v91, CFSTR("thiele_small_mms"));
        std::__hash_table<std::__hash_value_type<applesauce::CF::StringRef,applesauce::CF::NumberRef>,std::__unordered_map_hasher<applesauce::CF::StringRef,std::__hash_value_type<applesauce::CF::StringRef,applesauce::CF::NumberRef>,std::hash<applesauce::CF::StringRef>,std::equal_to<applesauce::CF::StringRef>,true>,std::__unordered_map_equal<applesauce::CF::StringRef,std::__hash_value_type<applesauce::CF::StringRef,applesauce::CF::NumberRef>,std::equal_to<applesauce::CF::StringRef>,std::hash<applesauce::CF::StringRef>,true>,std::allocator<std::__hash_value_type<applesauce::CF::StringRef,applesauce::CF::NumberRef>>>::__emplace_unique_key_args<applesauce::CF::StringRef,applesauce::CF::StringRef,float &>((uint64_t)&v85, v91, v91, (int *)(*(_QWORD *)(*v39 + 24) + 12));
        if (v91[0])
          CFRelease(v91[0]);
        v6 = CFSTR("thiele_small_rms");
        CFRetain(CFSTR("thiele_small_rms"));
        applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)v91, CFSTR("thiele_small_rms"));
        std::__hash_table<std::__hash_value_type<applesauce::CF::StringRef,applesauce::CF::NumberRef>,std::__unordered_map_hasher<applesauce::CF::StringRef,std::__hash_value_type<applesauce::CF::StringRef,applesauce::CF::NumberRef>,std::hash<applesauce::CF::StringRef>,std::equal_to<applesauce::CF::StringRef>,true>,std::__unordered_map_equal<applesauce::CF::StringRef,std::__hash_value_type<applesauce::CF::StringRef,applesauce::CF::NumberRef>,std::equal_to<applesauce::CF::StringRef>,std::hash<applesauce::CF::StringRef>,true>,std::allocator<std::__hash_value_type<applesauce::CF::StringRef,applesauce::CF::NumberRef>>>::__emplace_unique_key_args<applesauce::CF::StringRef,applesauce::CF::StringRef,float &>((uint64_t)&v85, v91, v91, (int *)(*(_QWORD *)(*v39 + 24) + 16));
        if (v91[0])
          CFRelease(v91[0]);
        v58 = *v39;
      }
      if (*(_QWORD *)(v58 + 40))
      {
        CFRetain(CFSTR("thiele_small_crest"));
        applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)v91, CFSTR("thiele_small_crest"));
        std::__hash_table<std::__hash_value_type<applesauce::CF::StringRef,applesauce::CF::NumberRef>,std::__unordered_map_hasher<applesauce::CF::StringRef,std::__hash_value_type<applesauce::CF::StringRef,applesauce::CF::NumberRef>,std::hash<applesauce::CF::StringRef>,std::equal_to<applesauce::CF::StringRef>,true>,std::__unordered_map_equal<applesauce::CF::StringRef,std::__hash_value_type<applesauce::CF::StringRef,applesauce::CF::NumberRef>,std::equal_to<applesauce::CF::StringRef>,std::hash<applesauce::CF::StringRef>,true>,std::allocator<std::__hash_value_type<applesauce::CF::StringRef,applesauce::CF::NumberRef>>>::__emplace_unique_key_args<applesauce::CF::StringRef,applesauce::CF::StringRef,float &>((uint64_t)&v85, v91, v91, *(int **)(*v39 + 40));
        if (v91[0])
          CFRelease(v91[0]);
        CFRetain(CFSTR("thiele_small_coffset"));
        applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)v91, CFSTR("thiele_small_coffset"));
        std::__hash_table<std::__hash_value_type<applesauce::CF::StringRef,applesauce::CF::NumberRef>,std::__unordered_map_hasher<applesauce::CF::StringRef,std::__hash_value_type<applesauce::CF::StringRef,applesauce::CF::NumberRef>,std::hash<applesauce::CF::StringRef>,std::equal_to<applesauce::CF::StringRef>,true>,std::__unordered_map_equal<applesauce::CF::StringRef,std::__hash_value_type<applesauce::CF::StringRef,applesauce::CF::NumberRef>,std::equal_to<applesauce::CF::StringRef>,std::hash<applesauce::CF::StringRef>,true>,std::allocator<std::__hash_value_type<applesauce::CF::StringRef,applesauce::CF::NumberRef>>>::__emplace_unique_key_args<applesauce::CF::StringRef,applesauce::CF::StringRef,float &>((uint64_t)&v85, v91, v91, (int *)(*(_QWORD *)(*v39 + 40) + 4));
        if (v91[0])
          CFRelease(v91[0]);
        CFRetain(CFSTR("thiele_small_cmin"));
        applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)v91, CFSTR("thiele_small_cmin"));
        std::__hash_table<std::__hash_value_type<applesauce::CF::StringRef,applesauce::CF::NumberRef>,std::__unordered_map_hasher<applesauce::CF::StringRef,std::__hash_value_type<applesauce::CF::StringRef,applesauce::CF::NumberRef>,std::hash<applesauce::CF::StringRef>,std::equal_to<applesauce::CF::StringRef>,true>,std::__unordered_map_equal<applesauce::CF::StringRef,std::__hash_value_type<applesauce::CF::StringRef,applesauce::CF::NumberRef>,std::equal_to<applesauce::CF::StringRef>,std::hash<applesauce::CF::StringRef>,true>,std::allocator<std::__hash_value_type<applesauce::CF::StringRef,applesauce::CF::NumberRef>>>::__emplace_unique_key_args<applesauce::CF::StringRef,applesauce::CF::StringRef,float &>((uint64_t)&v85, v91, v91, (int *)(*(_QWORD *)(*v39 + 40) + 8));
        if (v91[0])
          CFRelease(v91[0]);
        CFRetain(CFSTR("thiele_small_cmax"));
        applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)v91, CFSTR("thiele_small_cmax"));
        std::__hash_table<std::__hash_value_type<applesauce::CF::StringRef,applesauce::CF::NumberRef>,std::__unordered_map_hasher<applesauce::CF::StringRef,std::__hash_value_type<applesauce::CF::StringRef,applesauce::CF::NumberRef>,std::hash<applesauce::CF::StringRef>,std::equal_to<applesauce::CF::StringRef>,true>,std::__unordered_map_equal<applesauce::CF::StringRef,std::__hash_value_type<applesauce::CF::StringRef,applesauce::CF::NumberRef>,std::equal_to<applesauce::CF::StringRef>,std::hash<applesauce::CF::StringRef>,true>,std::allocator<std::__hash_value_type<applesauce::CF::StringRef,applesauce::CF::NumberRef>>>::__emplace_unique_key_args<applesauce::CF::StringRef,applesauce::CF::StringRef,float &>((uint64_t)&v85, v91, v91, (int *)(*(_QWORD *)(*v39 + 40) + 12));
        if (v91[0])
          CFRelease(v91[0]);
      }
      v59 = (char *)v88[1];
      if (v88[1] >= v89)
      {
        v61 = ((char *)v88[1] - (char *)v88[0]) >> 3;
        if ((unint64_t)(v61 + 1) >> 61)
          std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
        v62 = (int64_t)((uint64_t)v89 - (unint64_t)v88[0]) >> 2;
        if (v62 <= v61 + 1)
          v62 = v61 + 1;
        if ((unint64_t)v89 - (unint64_t)v88[0] >= 0x7FFFFFFFFFFFFFF8)
          v63 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v63 = v62;
        v91[4] = &v89;
        if (v63)
          v63 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<SlidingWindowDTFT<float> *>>(v63);
        else
          v64 = 0;
        v91[0] = (CFTypeRef)v63;
        v91[1] = (CFTypeRef)(v63 + 8 * v61);
        v91[2] = v91[1];
        v91[3] = (CFTypeRef)(v63 + 8 * v64);
        std::construct_at[abi:ne180100]<applesauce::CF::DictionaryRef,std::unordered_map<applesauce::CF::StringRef,applesauce::CF::NumberRef> &,applesauce::CF::DictionaryRef*>((CFDictionaryRef *)v91[1], (uint64_t)&v85);
        v65 = (char *)v91[1];
        v60 = (char *)v91[2] + 8;
        v91[2] = (char *)v91[2] + 8;
        v67 = v88[0];
        v66 = v88[1];
        if (v88[1] == v88[0])
        {
          v69 = vdupq_n_s64((unint64_t)v88[1]);
        }
        else
        {
          do
          {
            v68 = *--v66;
            *((_QWORD *)v65 - 1) = v68;
            v65 -= 8;
            *v66 = 0;
          }
          while (v66 != v67);
          v69 = *(int64x2_t *)v88;
          v60 = (char *)v91[2];
        }
        v88[0] = v65;
        v88[1] = v60;
        *(int64x2_t *)&v91[1] = v69;
        v70 = v89;
        v89 = v91[3];
        v91[3] = v70;
        v91[0] = (CFTypeRef)v69.i64[0];
        std::__split_buffer<applesauce::CF::DictionaryRef>::~__split_buffer((uint64_t)v91);
      }
      else
      {
        std::construct_at[abi:ne180100]<applesauce::CF::DictionaryRef,std::unordered_map<applesauce::CF::StringRef,applesauce::CF::NumberRef> &,applesauce::CF::DictionaryRef*>((CFDictionaryRef *)v88[1], (uint64_t)&v85);
        v60 = v59 + 8;
      }
      v88[1] = v60;
      std::__hash_table<std::__hash_value_type<applesauce::CF::StringRef,applesauce::CF::NumberRef>,std::__unordered_map_hasher<applesauce::CF::StringRef,std::__hash_value_type<applesauce::CF::StringRef,applesauce::CF::NumberRef>,std::hash<applesauce::CF::StringRef>,std::equal_to<applesauce::CF::StringRef>,true>,std::__unordered_map_equal<applesauce::CF::StringRef,std::__hash_value_type<applesauce::CF::StringRef,applesauce::CF::NumberRef>,std::equal_to<applesauce::CF::StringRef>,std::hash<applesauce::CF::StringRef>,true>,std::allocator<std::__hash_value_type<applesauce::CF::StringRef,applesauce::CF::NumberRef>>>::~__hash_table((uint64_t)&v85);
      if (++v39 == v83)
        goto LABEL_107;
    }
  }
  LODWORD(v91[0]) = 0;
  v73 = (uint64_t (***)(_QWORD, _QWORD, uint64_t))(*(uint64_t (**)(AULoudspeakerManagerV2 *))(*(_QWORD *)this + 640))(this);
  v74 = (**v73)(v73, 0, 1);
  (*(void (**)(AULoudspeakerManagerV2 *, uint64_t, _QWORD, _QWORD, CFTypeRef *))(*(_QWORD *)this + 144))(this, v74, 0, 0, v91);
  result = 0;
  v72 = *(float *)v91 != 0.0;
LABEL_113:
  *(_DWORD *)a5 = v72;
  return result;
}

void sub_1B6475DC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void **a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21)
{
  a15 = (void **)&a21;
  std::vector<applesauce::CF::DictionaryRef>::__destroy_vector::operator()[abi:ne180100](&a15);
  _Unwind_Resume(a1);
}

void sub_1B6475F68(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  va_list va;

  va_start(va, a12);
  applesauce::CF::StringRef::~StringRef((const void **)va);
  JUMPOUT(0x1B6475F74);
}

uint64_t AULoudspeakerManagerV2::SetProperty(AULoudspeakerManagerV2 *this, int a2, int a3, unsigned int a4, int *a5, void *a6, int *a7)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  int *v12;
  uint64_t v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  uint64_t result;
  CFTypeRef v25;
  const __CFArray *v26;
  CFIndex Count;
  CFArrayRef v28;
  uint64_t v29;
  CFTypeRef v30;
  const __CFDictionary *v31;
  int v32;
  uint64_t (***v33)(_QWORD, _QWORD, uint64_t);
  uint64_t v34;
  __n128 v35;
  DspLib::LoudspeakerController::Algorithm *v36;
  BOOL v37;
  uint64_t v38;
  CFTypeRef v39;
  uint64_t v40;
  CFTypeRef v41;
  const __CFDictionary *v42;
  std::string::size_type v43;
  uint64_t v44;
  char *v45;
  const __CFDictionary *v46;
  float v47;
  uint64_t v48;
  const __CFNumber *v49;
  const __CFNumber *Value;
  const __CFNumber *v51;
  const __CFNumber *v52;
  const __CFNumber *v53;
  int v54;
  unint64_t v55;
  CFTypeRef v56;
  _BOOL4 v57;
  _BOOL4 v58;
  _BOOL4 v59;
  _BOOL4 v60;
  _QWORD *v61;
  char *v62;
  _BOOL4 v63;
  _BOOL4 v64;
  _BOOL4 v65;
  uint64_t v66;
  std::__shared_weak_count *v67;
  uint64_t v68;
  const __CFNumber *v69;
  unint64_t *v70;
  unint64_t v71;
  unint64_t *p_shared_owners;
  unint64_t v73;
  unint64_t v74;
  std::__shared_weak_count *size;
  unint64_t *v76;
  unint64_t v77;
  char *v78;
  unint64_t v79;
  uint64_t v80;
  _QWORD *v81;
  char *v82;
  uint64_t v83;
  unint64_t v84;
  uint64_t v85;
  unint64_t v86;
  char *v87;
  uint64_t *v88;
  uint64_t v89;
  uint64_t v90;
  int64x2_t v91;
  uint64_t *v92;
  uint64_t *v93;
  uint64_t v94;
  std::runtime_error *v95;
  std::runtime_error *v96;
  std::runtime_error *v97;
  std::runtime_error *exception;
  std::runtime_error *v99;
  std::runtime_error *v100;
  std::runtime_error *v101;
  std::runtime_error *v102;
  int32x4_t v103;
  CFIndex v104;
  char **v105;
  CFTypeRef cf;
  CFTypeRef v107;
  uint64_t v108;
  CFTypeRef v109;
  CFArrayRef theArray;
  std::string v111;
  std::string valuePtr;
  std::string v113;

  if (a2 <= 64007)
  {
    switch(a2)
    {
      case 6630:
        if (a3)
          return 4294956430;
        if (!*((_BYTE *)this + 17))
          return 0;
        v8 = *((_QWORD *)this + 66);
        if (!v8)
          return 0;
        v9 = *(_QWORD *)(v8 + 360);
        if (*(_QWORD *)(v8 + 368) != v9)
        {
          v10 = 0;
          v11 = 1;
          do
          {
            v12 = &a5[50 * v10];
            v13 = v9 + 2440 * v10;
            *(_OWORD *)(v13 + 2240) = *(_OWORD *)v12;
            v14 = *((_OWORD *)v12 + 1);
            v15 = *((_OWORD *)v12 + 2);
            v16 = *((_OWORD *)v12 + 3);
            *(_OWORD *)(v13 + 2304) = *((_OWORD *)v12 + 4);
            *(_OWORD *)(v13 + 2288) = v16;
            *(_OWORD *)(v13 + 2272) = v15;
            *(_OWORD *)(v13 + 2256) = v14;
            v17 = *((_OWORD *)v12 + 5);
            v18 = *((_OWORD *)v12 + 6);
            v19 = *((_OWORD *)v12 + 7);
            *(_OWORD *)(v13 + 2368) = *((_OWORD *)v12 + 8);
            *(_OWORD *)(v13 + 2352) = v19;
            *(_OWORD *)(v13 + 2336) = v18;
            *(_OWORD *)(v13 + 2320) = v17;
            v20 = *((_OWORD *)v12 + 9);
            v21 = *((_OWORD *)v12 + 10);
            v22 = *((_OWORD *)v12 + 11);
            *(_QWORD *)(v13 + 2432) = *((_QWORD *)v12 + 24);
            *(_OWORD *)(v13 + 2416) = v22;
            *(_OWORD *)(v13 + 2400) = v21;
            *(_OWORD *)(v13 + 2384) = v20;
            v10 = v11;
            v9 = *(_QWORD *)(v8 + 360);
          }
          while (0xFF2920BC035B7D1 * ((*(_QWORD *)(v8 + 368) - v9) >> 3) > (unint64_t)v11++);
        }
        result = 0;
        *(_BYTE *)(v8 + 356) = 1;
        return result;
      case 6631:
        return AUDspLib::SetProperty(this, a2, a3, a4, a5, a6, a7);
      case 6632:
        if (a3)
          return 4294956430;
        if ((_DWORD)a6 != 8)
          return 4294956445;
        applesauce::CF::DictionaryRef::from_get((applesauce::CF::DictionaryRef *)&v113, *(CFTypeRef *)a5);
        v43 = *((_QWORD *)this + 275);
        *((_QWORD *)this + 275) = v113.__r_.__value_.__r.__words[0];
        v113.__r_.__value_.__r.__words[0] = v43;
        applesauce::CF::DictionaryRef::~DictionaryRef((const void **)&v113.__r_.__value_.__l.__data_);
        if (!*((_BYTE *)this + 17))
          return 0;
        result = AULoudspeakerManagerV2::ReadModelData(this);
        break;
      case 6633:
        if (a6 < 4)
          return 4294956445;
        v37 = *a5 != 0;
        *((_BYTE *)this + 2384) = v37;
        if (!*((_BYTE *)this + 17))
          return 0;
        result = *((_QWORD *)this + 66);
        if (result)
        {
          v38 = DspLib::AlgorithmBaseNewParameters::subAlgorithm(result, 1);
          result = 0;
          *(_BYTE *)(v38 + 469) = v37;
        }
        return result;
      case 6634:
        if (a6 < 4)
          return 4294956445;
        if (!*((_BYTE *)this + 17))
          return 0;
        result = *((_QWORD *)this + 66);
        if (result)
        {
          v36 = (DspLib::LoudspeakerController::Algorithm *)DspLib::AlgorithmBaseNewParameters::subAlgorithm(result, 1);
          DspLib::LoudspeakerController::Algorithm::resetNVM(v36);
          result = 0;
          *((_BYTE *)this + 2385) = 1;
        }
        return result;
      default:
        if (a2 != 64004)
          return AUDspLib::SetProperty(this, a2, a3, a4, a5, a6, a7);
        if (a6 < 4)
          return 4294956445;
        v32 = *a5;
        v33 = (uint64_t (***)(_QWORD, _QWORD, uint64_t))(*(uint64_t (**)(AULoudspeakerManagerV2 *))(*(_QWORD *)this + 640))(this);
        v34 = (**v33)(v33, 0, 1);
        v35.n128_u32[0] = 0;
        if (v32)
          v35.n128_f32[0] = 1.0;
        (*(void (**)(AULoudspeakerManagerV2 *, uint64_t, _QWORD, _QWORD, _QWORD, __n128))(*(_QWORD *)this
                                                                                                  + 152))(this, v34, 0, 0, 0, v35);
        return 0;
    }
    return result;
  }
  if (a2 > 1835889522)
  {
    if (a2 == 1835889523)
    {
      if (*((_BYTE *)this + 17))
      {
        v40 = *((_QWORD *)this + 66);
        if (v40)
        {
          v41 = *(CFTypeRef *)a5;
          if (*(_QWORD *)a5)
          {
            CFRetain(*(CFTypeRef *)a5);
            applesauce::CF::DictionaryRef::DictionaryRef((applesauce::CF::DictionaryRef *)&v113, v41);
            v42 = (const __CFDictionary *)v113.__r_.__value_.__r.__words[0];
          }
          else
          {
            v42 = 0;
            v113.__r_.__value_.__r.__words[0] = 0;
          }
          Value = (const __CFNumber *)CFDictionaryGetValue(v42, CFSTR("ModelManagerSpeakerForStatus"));
          v51 = (const __CFNumber *)CFDictionaryGetValue((CFDictionaryRef)v113.__r_.__value_.__l.__data_, CFSTR("ModelManagerModelTypeForStatus"));
          v52 = (const __CFNumber *)CFDictionaryGetValue((CFDictionaryRef)v113.__r_.__value_.__l.__data_, CFSTR("ModelManagerMappingMethodForStatus"));
          LODWORD(valuePtr.__r_.__value_.__l.__data_) = 0;
          LODWORD(v111.__r_.__value_.__l.__data_) = 0;
          LODWORD(theArray) = 0;
          if (Value)
          {
            if (v51)
            {
              v53 = v52;
              if (v52)
              {
                CFNumberGetValue(Value, kCFNumberIntType, &valuePtr);
                CFNumberGetValue(v51, kCFNumberIntType, &v111);
                CFNumberGetValue(v53, kCFNumberIntType, &theArray);
                v54 = (int)theArray;
                *(_QWORD *)(v40 + 300) = LODWORD(valuePtr.__r_.__value_.__l.__data_) | ((unint64_t)LODWORD(v111.__r_.__value_.__l.__data_) << 32);
                *(_DWORD *)(v40 + 308) = v54;
              }
            }
          }
          if (v113.__r_.__value_.__r.__words[0])
            CFRelease(v113.__r_.__value_.__l.__data_);
        }
      }
    }
    else
    {
      if (a2 != 1886679923)
        return AUDspLib::SetProperty(this, a2, a3, a4, a5, a6, a7);
      if (*((_BYTE *)this + 17))
      {
        v29 = *((_QWORD *)this + 66);
        if (v29)
        {
          v30 = *(CFTypeRef *)a5;
          if (*(_QWORD *)a5)
          {
            CFRetain(*(CFTypeRef *)a5);
            applesauce::CF::DictionaryRef::DictionaryRef((applesauce::CF::DictionaryRef *)&v113, v30);
            v31 = (const __CFDictionary *)v113.__r_.__value_.__r.__words[0];
          }
          else
          {
            v31 = 0;
            v113.__r_.__value_.__r.__words[0] = 0;
          }
          v49 = (const __CFNumber *)CFDictionaryGetValue(v31, CFSTR("PilotToneSpeakerForStatus"));
          LODWORD(valuePtr.__r_.__value_.__l.__data_) = 0;
          if (v49)
          {
            CFNumberGetValue(v49, kCFNumberIntType, &valuePtr);
            *(_DWORD *)(v29 + 504) = valuePtr.__r_.__value_.__l.__data_;
          }
          if (v113.__r_.__value_.__r.__words[0])
            CFRelease(v113.__r_.__value_.__l.__data_);
        }
      }
    }
    return 0;
  }
  if (a2 != 64008)
  {
    if (a2 == 64009)
    {
      if (a6 < 8)
        return 4294956445;
      v25 = *(CFTypeRef *)a5;
      if (*(_QWORD *)a5)
        CFRetain(*(CFTypeRef *)a5);
      applesauce::CF::ArrayRef::ArrayRef((applesauce::CF::ArrayRef *)&theArray, v25);
      v105 = (char **)((char *)this + 2208);
      v26 = theArray;
      if (theArray)
      {
        Count = CFArrayGetCount(theArray);
        v28 = theArray;
        if (theArray)
          v104 = CFArrayGetCount(theArray);
        else
          v104 = 0;
        if (Count)
        {
          v55 = 0;
          v103 = vdupq_n_s32(0x7FC00000u);
          do
          {
            if (v26 == v28 && v55 == v104)
              break;
            applesauce::CF::details::at_to<applesauce::CF::DictionaryRef>(v26, v55, (applesauce::CF::DictionaryRef *)&v109);
            v56 = v109;
            if (!v109)
            {
              v107 = 0;
              exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
              std::runtime_error::runtime_error(exception, "Could not construct");
            }
            CFRetain(v109);
            v107 = v56;
            if (((unint64_t)applesauce::CF::DictionaryRef_proxy::at_as<unsigned int,char const*&>((const __CFDictionary *)v56, "thiele_small_data_source_id") & 0xFF00000000) == 0)
            {
              v101 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
              std::string::basic_string[abi:ne180100]<0>(&v111, "thiele_small_data_source_id");
              std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>("Speaker calibration data is missing '", &v111, &valuePtr);
              std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>("' key", &valuePtr, &v113);
              std::runtime_error::runtime_error(v101, &v113);
            }
            if (!DspLib::LoudspeakerManagerV2::Calibration::SpTS::v2::Speaker::has<float>((const __CFDictionary **)&v107, "thiele_small_fs"))
            {
              v97 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
              std::string::basic_string[abi:ne180100]<0>(&v111, "thiele_small_fs");
              std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>("Speaker calibration data is missing '", &v111, &valuePtr);
              std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>("' key", &valuePtr, &v113);
              std::runtime_error::runtime_error(v97, &v113);
            }
            if (!DspLib::LoudspeakerManagerV2::Calibration::SpTS::v2::Speaker::has<float>((const __CFDictionary **)&v107, "thiele_small_qts"))
            {
              v100 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
              std::string::basic_string[abi:ne180100]<0>(&v111, "thiele_small_qts");
              std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>("Speaker calibration data is missing '", &v111, &valuePtr);
              std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>("' key", &valuePtr, &v113);
              std::runtime_error::runtime_error(v100, &v113);
            }
            if (!DspLib::LoudspeakerManagerV2::Calibration::SpTS::v2::Speaker::has<float>((const __CFDictionary **)&v107, "thiele_small_re"))
            {
              v96 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
              std::string::basic_string[abi:ne180100]<0>(&v111, "thiele_small_re");
              std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>("Speaker calibration data is missing '", &v111, &valuePtr);
              std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>("' key", &valuePtr, &v113);
              std::runtime_error::runtime_error(v96, &v113);
            }
            if (!DspLib::LoudspeakerManagerV2::Calibration::SpTS::v2::Speaker::has<float>((const __CFDictionary **)&v107, "thiele_small_t"))
            {
              v99 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
              std::string::basic_string[abi:ne180100]<0>(&v111, "thiele_small_t");
              std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>("Speaker calibration data is missing '", &v111, &valuePtr);
              std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>("' key", &valuePtr, &v113);
              std::runtime_error::runtime_error(v99, &v113);
            }
            v57 = DspLib::LoudspeakerManagerV2::Calibration::SpTS::v2::Speaker::has<float>((const __CFDictionary **)&v107, "thiele_small_le");
            v58 = DspLib::LoudspeakerManagerV2::Calibration::SpTS::v2::Speaker::has<float>((const __CFDictionary **)&v107, "thiele_small_kms");
            v59 = DspLib::LoudspeakerManagerV2::Calibration::SpTS::v2::Speaker::has<float>((const __CFDictionary **)&v107, "thiele_small_mms");
            v60 = DspLib::LoudspeakerManagerV2::Calibration::SpTS::v2::Speaker::has<float>((const __CFDictionary **)&v107, "thiele_small_bi");
            if (((v57 && v58 && v59 && v60) & DspLib::LoudspeakerManagerV2::Calibration::SpTS::v2::Speaker::has<float>((const __CFDictionary **)&v107, "thiele_small_rms")) == 1)
            {
              v61 = operator new(0x30uLL);
              v61[1] = 0;
              v61[2] = 0;
              *v61 = &off_1E69E06B8;
              *((float *)v61 + 6) = DspLib::LoudspeakerManagerV2::Calibration::SpTS::v2::Speaker::get<float>((const __CFDictionary **)&v107, "thiele_small_kms");
              v62 = (char *)(v61 + 3);
              *((float *)v61 + 7) = DspLib::LoudspeakerManagerV2::Calibration::SpTS::v2::Speaker::get<float>((const __CFDictionary **)&v107, "thiele_small_le");
              *((float *)v61 + 8) = DspLib::LoudspeakerManagerV2::Calibration::SpTS::v2::Speaker::get<float>((const __CFDictionary **)&v107, "thiele_small_bi");
              *((float *)v61 + 9) = DspLib::LoudspeakerManagerV2::Calibration::SpTS::v2::Speaker::get<float>((const __CFDictionary **)&v107, "thiele_small_mms");
              *((float *)v61 + 10) = DspLib::LoudspeakerManagerV2::Calibration::SpTS::v2::Speaker::get<float>((const __CFDictionary **)&v107, "thiele_small_rms");
              v113.__r_.__value_.__r.__words[0] = (std::string::size_type)(v61 + 3);
              v113.__r_.__value_.__l.__size_ = (std::string::size_type)v61;
            }
            else
            {
              v61 = 0;
              v62 = 0;
              *(_OWORD *)&v113.__r_.__value_.__l.__data_ = 0uLL;
            }
            v63 = DspLib::LoudspeakerManagerV2::Calibration::SpTS::v2::Speaker::has<float>((const __CFDictionary **)&v107, "thiele_small_crest");
            v64 = DspLib::LoudspeakerManagerV2::Calibration::SpTS::v2::Speaker::has<float>((const __CFDictionary **)&v107, "thiele_small_coffset");
            v65 = DspLib::LoudspeakerManagerV2::Calibration::SpTS::v2::Speaker::has<float>((const __CFDictionary **)&v107, "thiele_small_cmin");
            if (((v63 && v64) & v65 & DspLib::LoudspeakerManagerV2::Calibration::SpTS::v2::Speaker::has<float>((const __CFDictionary **)&v107, "thiele_small_cmax") & 1) != 0)
            {
              v66 = operator new();
              *(int32x4_t *)v66 = v103;
              *(float *)v66 = DspLib::LoudspeakerManagerV2::Calibration::SpTS::v2::Speaker::get<float>((const __CFDictionary **)&v107, "thiele_small_crest");
              *(float *)(v66 + 4) = DspLib::LoudspeakerManagerV2::Calibration::SpTS::v2::Speaker::get<float>((const __CFDictionary **)&v107, "thiele_small_coffset");
              *(float *)(v66 + 8) = DspLib::LoudspeakerManagerV2::Calibration::SpTS::v2::Speaker::get<float>((const __CFDictionary **)&v107, "thiele_small_cmin");
              *(float *)(v66 + 12) = DspLib::LoudspeakerManagerV2::Calibration::SpTS::v2::Speaker::get<float>((const __CFDictionary **)&v107, "thiele_small_cmax");
              valuePtr.__r_.__value_.__r.__words[0] = v66;
              v67 = (std::__shared_weak_count *)operator new();
              v67->__vftable = (std::__shared_weak_count_vtbl *)&off_1E69E06F0;
              v67->__shared_owners_ = 0;
              v67->__shared_weak_owners_ = 0;
              v67[1].__vftable = (std::__shared_weak_count_vtbl *)v66;
            }
            else
            {
              v66 = 0;
              v67 = 0;
              valuePtr.__r_.__value_.__r.__words[0] = 0;
            }
            valuePtr.__r_.__value_.__l.__size_ = (std::string::size_type)v67;
            v68 = operator new();
            if (!v107)
            {
              v102 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
              std::runtime_error::runtime_error(v102, "Could not construct");
            }
            v69 = applesauce::CF::DictionaryRef_proxy::at_as<unsigned int,char const*&>((const __CFDictionary *)v107, "thiele_small_data_source_id");
            if (((unint64_t)v69 & 0xFF00000000) == 0)
              std::__throw_bad_optional_access[abi:ne180100]();
            *(_DWORD *)v68 = (_DWORD)v69;
            *(float *)(v68 + 4) = DspLib::LoudspeakerManagerV2::Calibration::SpTS::v2::Speaker::get<float>((const __CFDictionary **)&v107, "thiele_small_re");
            *(float *)(v68 + 8) = DspLib::LoudspeakerManagerV2::Calibration::SpTS::v2::Speaker::get<float>((const __CFDictionary **)&v107, "thiele_small_t");
            *(float *)(v68 + 12) = DspLib::LoudspeakerManagerV2::Calibration::SpTS::v2::Speaker::get<float>((const __CFDictionary **)&v107, "thiele_small_qts");
            *(float *)(v68 + 16) = DspLib::LoudspeakerManagerV2::Calibration::SpTS::v2::Speaker::get<float>((const __CFDictionary **)&v107, "thiele_small_fs");
            *(_WORD *)(v68 + 20) = 0;
            *(_OWORD *)(v68 + 24) = 0u;
            *(_OWORD *)(v68 + 40) = 0u;
            if (v61)
            {
              v70 = v61 + 1;
              do
                v71 = __ldxr(v70);
              while (__stxr(v71 + 1, v70));
            }
            *(_QWORD *)(v68 + 24) = v62;
            *(_QWORD *)(v68 + 32) = v61;
            if (v67)
            {
              p_shared_owners = (unint64_t *)&v67->__shared_owners_;
              do
                v73 = __ldxr(p_shared_owners);
              while (__stxr(v73 + 1, p_shared_owners));
              *(_QWORD *)(v68 + 40) = v66;
              *(_QWORD *)(v68 + 48) = v67;
              v108 = v68;
              do
                v74 = __ldaxr(p_shared_owners);
              while (__stlxr(v74 - 1, p_shared_owners));
              if (!v74)
              {
                ((void (*)(std::__shared_weak_count *))v67->__on_zero_shared)(v67);
                std::__shared_weak_count::__release_weak(v67);
              }
            }
            else
            {
              *(_QWORD *)(v68 + 40) = v66;
              *(_QWORD *)(v68 + 48) = 0;
              v108 = v68;
            }
            size = (std::__shared_weak_count *)v113.__r_.__value_.__l.__size_;
            if (v113.__r_.__value_.__l.__size_)
            {
              v76 = (unint64_t *)(v113.__r_.__value_.__l.__size_ + 8);
              do
                v77 = __ldaxr(v76);
              while (__stlxr(v77 - 1, v76));
              if (!v77)
              {
                ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
                std::__shared_weak_count::__release_weak(size);
              }
            }
            v78 = (char *)*((_QWORD *)this + 277);
            v79 = *((_QWORD *)this + 278);
            if ((unint64_t)v78 >= v79)
            {
              v82 = *v105;
              v83 = (v78 - *v105) >> 3;
              v84 = v83 + 1;
              if ((unint64_t)(v83 + 1) >> 61)
                std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
              v85 = v79 - (_QWORD)v82;
              if (v85 >> 2 > v84)
                v84 = v85 >> 2;
              v86 = (unint64_t)v85 >= 0x7FFFFFFFFFFFFFF8 ? 0x1FFFFFFFFFFFFFFFLL : v84;
              if (v86)
              {
                if (v86 >> 61)
                  std::__throw_bad_array_new_length[abi:ne180100]();
                v87 = (char *)operator new(8 * v86);
              }
              else
              {
                v87 = 0;
              }
              v88 = (uint64_t *)&v87[8 * v83];
              v89 = v108;
              v108 = 0;
              *v88 = v89;
              v81 = v88 + 1;
              if (v78 == v82)
              {
                v91 = vdupq_n_s64((unint64_t)v78);
              }
              else
              {
                do
                {
                  v90 = *((_QWORD *)v78 - 1);
                  v78 -= 8;
                  *(_QWORD *)v78 = 0;
                  *--v88 = v90;
                }
                while (v78 != v82);
                v91 = *(int64x2_t *)v105;
              }
              *((_QWORD *)this + 276) = v88;
              *((_QWORD *)this + 277) = v81;
              *((_QWORD *)this + 278) = &v87[8 * v86];
              v93 = (uint64_t *)v91.i64[1];
              v92 = (uint64_t *)v91.i64[0];
              while (v93 != v92)
                std::unique_ptr<DspLib::LoudspeakerManagerV2::Calibration::SpTS::SpeakerCalibrationProperties>::reset[abi:ne180100](--v93);
              if (v92)
                operator delete(v92);
            }
            else
            {
              v80 = v108;
              v108 = 0;
              *(_QWORD *)v78 = v80;
              v81 = v78 + 8;
            }
            *((_QWORD *)this + 277) = v81;
            std::unique_ptr<DspLib::LoudspeakerManagerV2::Calibration::SpTS::SpeakerCalibrationProperties>::reset[abi:ne180100](&v108);
            if (v107)
              CFRelease(v107);
            if (v109)
              CFRelease(v109);
            ++v55;
          }
          while (v55 != Count);
        }
        if (theArray)
          CFRelease(theArray);
      }
      if (*((_BYTE *)this + 17))
      {
        v94 = *((_QWORD *)this + 66);
        if (v94)
          DspLib::LoudspeakerManagerV2::ModelManager::setSpTSCalibration(v94 + 296, v105);
      }
      return 0;
    }
    return AUDspLib::SetProperty(this, a2, a3, a4, a5, a6, a7);
  }
  result = 4294956445;
  if (a5 && (_DWORD)a6 == 8)
  {
    v39 = *(CFTypeRef *)a5;
    if (*(_QWORD *)a5)
    {
      CFRetain(*(CFTypeRef *)a5);
      applesauce::CF::DictionaryRef::DictionaryRef((applesauce::CF::DictionaryRef *)&cf, v39);
    }
    else
    {
      cf = 0;
    }
    v44 = 0;
    v45 = (char *)this + 2236;
    do
    {
      if (!cf)
      {
        v95 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v95, "Could not construct");
      }
      AULoudspeakerManagerV2::TimeScale<float>::getKey(&v113, *(CFTypeRef *)&v45[8 * v44 + 20]);
      v46 = applesauce::CF::DictionaryRef_proxy::at_as<float,applesauce::CF::StringRef>((const __CFDictionary *)cf, (const void **)&v113.__r_.__value_.__l.__data_);
      if (v113.__r_.__value_.__r.__words[0])
        CFRelease(v113.__r_.__value_.__l.__data_);
      if (((unint64_t)v46 & 0xFF00000000) != 0)
      {
        v47 = *(float *)&v46 / *((float *)this + 558);
        if (*(float *)&v45[v44] != v47)
        {
          *(float *)&v45[v44] = v47;
          *((_BYTE *)this + 2252) = 1;
        }
      }
      v44 += 4;
    }
    while (v44 != 16);
    if (*((_BYTE *)this + 2252) && *((_BYTE *)this + 17))
    {
      v48 = DspLib::AlgorithmBaseNewParameters::subAlgorithm(*((_QWORD *)this + 66), 1);
      DspLib::LoudspeakerController::Algorithm::setCPMSBudgets(v48, (AULoudspeakerManagerV2 *)((char *)this + 2236));
      *((_BYTE *)this + 2252) = 0;
    }
    result = (uint64_t)cf;
    if (cf)
    {
      CFRelease(cf);
      return 0;
    }
  }
  return result;
}

void sub_1B6476D80(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, int a14, __int16 a15, char a16, char a17, int a18, __int16 a19, char a20,char a21,int a22,__int16 a23,char a24,char a25,int a26,__int16 a27,char a28,char a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,void *__p,uint64_t a37,int a38,__int16 a39,char a40,char a41)
{
  uint64_t v41;

  applesauce::CF::DictionaryRef::~DictionaryRef((const void **)(v41 - 104));
  _Unwind_Resume(a1);
}

uint64_t AULoudspeakerManagerV2::GetParameter(AULoudspeakerManagerV2 *this, unsigned int a2, unsigned int a3, unsigned int a4, float *a5)
{
  uint64_t v9;
  float Parameter;
  ausdk::AUScope *Scope;
  ausdk::AUElement *Element;

  v9 = *((_QWORD *)this + 66);
  if (!v9)
    goto LABEL_5;
  if (a2 == 1073741825)
  {
    Parameter = (float)DspLib::LoudspeakerHealth::speakerHealthStatus((DspLib::LoudspeakerHealth *)(v9 + 576));
    goto LABEL_7;
  }
  if (a2 == 0x40000000)
  {
    Parameter = *(float *)(DspLib::AlgorithmBaseNewParameters::subAlgorithm(v9, 1) + 452);
  }
  else
  {
LABEL_5:
    Scope = (ausdk::AUScope *)ausdk::AUBase::GetScope(this, a3);
    Element = (ausdk::AUElement *)ausdk::AUScope::SafeGetElement(Scope, a4);
    Parameter = ausdk::AUElement::GetParameter(Element, a2);
  }
LABEL_7:
  *a5 = Parameter;
  return 0;
}

uint64_t AULoudspeakerManagerV2::SetParameter(AULoudspeakerManagerV2 *this, uint64_t a2, unsigned int a3, uint64_t a4, float a5)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;

  v7 = AUDspLibWithNewParameters::SetParameter(this, a2, a3, a4, a5);
  v8 = (*(uint64_t (**)(AULoudspeakerManagerV2 *))(*(_QWORD *)this + 640))(this);
  v9 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v8 + 8))(v8, a2);
  if ((_DWORD)v9 != 1)
    return v7;
  if (!HIDWORD(v9))
  {
    if (v10 != 9)
      return v7;
    goto LABEL_10;
  }
  if ((HIDWORD(v9) - 10) <= 7 && (v10 - 29) < 2)
  {
LABEL_10:
    if (*((_BYTE *)this + 1585))
      AULoudspeakerManagerV2::ReadModelData(this);
  }
  return v7;
}

BOOL AULoudspeakerManagerV2::BusCountWritable(AULoudspeakerManagerV2 *this, int a2)
{
  return a2 == 1;
}

uint64_t AULoudspeakerManagerV2::GetParameterInfo(AULoudspeakerManagerV2 *this, unsigned int a2, uint64_t a3, AudioUnitParameterInfo *buffer)
{
  const __CFString *v4;

  if ((_DWORD)a3 == 1073741825)
  {
    buffer->unit = kAudioUnitParameterUnit_Generic;
    *(_QWORD *)&buffer->minValue = 0x477FFF0000000000;
    *(_QWORD *)&buffer->defaultValue = 0x4880A00000000000;
    v4 = CFSTR("LoudspeakerHealthBitField");
    goto LABEL_5;
  }
  if ((_DWORD)a3 == 0x40000000)
  {
    buffer->unit = kAudioUnitParameterUnit_Generic;
    *(_QWORD *)&buffer->minValue = 0x447A000000000000;
    *(_QWORD *)&buffer->defaultValue = 0x4880A00000000000;
    v4 = CFSTR("ModeledAmplifierPower");
LABEL_5:
    buffer->cfNameString = v4;
    CFStringGetCString(v4, buffer->name, 52, 0x8000100u);
    return 0;
  }
  return AUDspLibWithNewParameters::GetParameterInfo(this, a2, a3, buffer);
}

uint64_t AULoudspeakerManagerV2::SupportedNumChannels(AULoudspeakerManagerV2 *this, const AUChannelInfo **a2)
{
  if (a2)
    *a2 = (const AUChannelInfo *)&AULoudspeakerManagerV2::SupportedNumChannels(AUChannelInfo const**)::sChannels;
  return 5;
}

uint64_t AULoudspeakerManagerV2::Version(AULoudspeakerManagerV2 *this)
{
  return 50331648;
}

DspLib::LoudspeakerManagerV2::Algorithm *AULoudspeakerManagerV2::newDspLibAlgorithm(AULoudspeakerManagerV2 *this)
{
  DspLib::LoudspeakerManagerV2::Algorithm *v1;

  v1 = (DspLib::LoudspeakerManagerV2::Algorithm *)operator new();
  DspLib::LoudspeakerManagerV2::Algorithm::Algorithm(v1);
  return v1;
}

void sub_1B64771D0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1BCC95CEC](v1, 0x10F1C40532DDA37);
  _Unwind_Resume(a1);
}

uint64_t AULoudspeakerManagerV2::ReadModelData(AULoudspeakerManagerV2 *this)
{
  const __CFAllocator *v2;
  CFStringRef v3;
  const void *Value;
  const void *v5;
  unint64_t Count;
  unint64_t v7;
  int v8;
  CFIndex v9;
  char *v10;
  const void *ValueAtIndex;
  const void *v12;
  CFStringRef v13;
  const void *v14;
  const void *v15;
  CFStringRef v16;
  const void *v17;
  const void *v18;
  const UInt8 *BytePtr;
  unint64_t v20;
  uint64_t *j;
  unsigned int *v22;
  unint64_t v23;
  uint64_t v24;
  const UInt8 *v25;
  int v26;
  char *v27;
  unint64_t v28;
  uint64_t *i;
  unsigned int *v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  CFDataRef v35;
  CFTypeRef cf;
  CFDataRef theData;
  CFTypeRef v38;
  CFDictionaryRef theDict;
  CFArrayRef theArray;
  void *key;

  if (!*((_QWORD *)this + 275))
    return 0;
  v2 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  v3 = CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x1E0C9AE00], "ChannelData", 0x8000100u);
  applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&key, v3);
  Value = CFDictionaryGetValue(*((CFDictionaryRef *)this + 275), key);
  v5 = Value;
  if (Value)
    CFRetain(Value);
  applesauce::CF::ArrayRef::ArrayRef((applesauce::CF::ArrayRef *)&theArray, v5);
  if (!theArray)
  {
    v8 = 1;
    goto LABEL_62;
  }
  Count = CFArrayGetCount(theArray);
  v7 = Count;
  if (Count > 8)
  {
LABEL_6:
    v8 = 1;
    goto LABEL_60;
  }
  if (Count)
  {
    v9 = 0;
    v10 = "TweeterResponse";
    while (1)
    {
      ValueAtIndex = CFArrayGetValueAtIndex(theArray, v9);
      v12 = ValueAtIndex;
      if (ValueAtIndex)
        CFRetain(ValueAtIndex);
      applesauce::CF::DictionaryRef::DictionaryRef((applesauce::CF::DictionaryRef *)&theDict, v12);
      if (!theDict)
        goto LABEL_6;
      v13 = CFStringCreateWithCString(v2, "PressureResponse", 0x8000100u);
      applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&v38, v13);
      v14 = CFDictionaryGetValue(theDict, v38);
      v15 = v14;
      if (v14)
        CFRetain(v14);
      applesauce::CF::DataRef::DataRef((applesauce::CF::DataRef *)&theData, v15);
      if (!theData)
      {
        v26 = 1;
        goto LABEL_47;
      }
      if (CFDataGetLength(theData) != 4096)
        goto LABEL_44;
      if (applesauce::CF::details::has_key<char const* const&>((_BOOL8)theDict, v10))
        break;
      v27 = v10;
      v28 = 0;
      for (i = (uint64_t *)((char *)this + 528); ; i += 7)
      {
        if (*((_DWORD *)this + 397))
        {
          v30 = (unsigned int *)*((_QWORD *)this + 268);
          v31 = v30 == *((unsigned int **)this + 269) ? 0 : *v30;
        }
        else
        {
          v31 = 1;
        }
        if (v28 >= v31)
          break;
        v32 = *i;
        CFDataGetBytePtr(theData);
        v33 = DspLib::AlgorithmBaseNewParameters::subAlgorithm(v32, 1);
        DspLib::LoudspeakerController::MaskingEstimator::setPressureMapping(*(_QWORD *)(v33 + 544) + 4144 * v9 + 1104);
        ++v28;
      }
      v26 = 0;
      v10 = v27;
LABEL_45:
      if (theData)
        CFRelease(theData);
LABEL_47:
      if (v38)
        CFRelease(v38);
      if (theDict)
        CFRelease(theDict);
      if (v26)
        goto LABEL_6;
      if (++v9 == v7)
        goto LABEL_59;
    }
    v16 = CFStringCreateWithCString(v2, v10, 0x8000100u);
    applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&cf, v16);
    v17 = CFDictionaryGetValue(theDict, cf);
    v18 = v17;
    if (v17)
      CFRetain(v17);
    applesauce::CF::DataRef::DataRef((applesauce::CF::DataRef *)&v35, v18);
    if (v35)
    {
      if (CFDataGetLength(v35) == 4096)
      {
        BytePtr = CFDataGetBytePtr(v35);
        v20 = 0;
        for (j = (uint64_t *)((char *)this + 528); ; j += 7)
        {
          if (*((_DWORD *)this + 397))
          {
            v22 = (unsigned int *)*((_QWORD *)this + 268);
            v23 = v22 == *((unsigned int **)this + 269) ? 0 : *v22;
          }
          else
          {
            v23 = 1;
          }
          if (v20 >= v23)
            break;
          v24 = *j;
          v25 = CFDataGetBytePtr(theData);
          DspLib::LoudspeakerManagerV2::Algorithm::setPressureResponse(v24, (uint64_t)v25, 1024, v9, (uint64_t)BytePtr);
          ++v20;
        }
        if (v35)
          CFRelease(v35);
        v10 = "TweeterResponse";
        if (cf)
          CFRelease(cf);
        v26 = 0;
        goto LABEL_45;
      }
      if (v35)
        CFRelease(v35);
    }
    if (cf)
      CFRelease(cf);
LABEL_44:
    v26 = 1;
    goto LABEL_45;
  }
LABEL_59:
  v8 = 0;
LABEL_60:
  if (theArray)
    CFRelease(theArray);
LABEL_62:
  if (key)
    CFRelease(key);
  if (v8)
    return 0xFFFFFFFFLL;
  return 0;
}

void sub_1B64775AC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  const void *v3;
  va_list va;
  const void *v5;
  va_list va1;
  const void *v7;
  va_list va2;
  const void *v9;
  va_list va3;
  const void *v11;
  va_list va4;
  const void *v13;
  va_list va5;
  va_list va6;

  va_start(va6, a2);
  va_start(va5, a2);
  va_start(va4, a2);
  va_start(va3, a2);
  va_start(va2, a2);
  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, const void *);
  va_copy(va2, va1);
  v5 = va_arg(va2, const void *);
  va_copy(va3, va2);
  v7 = va_arg(va3, const void *);
  va_copy(va4, va3);
  v9 = va_arg(va4, const void *);
  va_copy(va5, va4);
  v11 = va_arg(va5, const void *);
  va_copy(va6, va5);
  v13 = va_arg(va6, const void *);
  applesauce::CF::DataRef::~DataRef((const void **)va);
  applesauce::CF::StringRef::~StringRef((const void **)va1);
  applesauce::CF::DataRef::~DataRef((const void **)va2);
  applesauce::CF::StringRef::~StringRef((const void **)va3);
  applesauce::CF::DictionaryRef::~DictionaryRef((const void **)va4);
  applesauce::CF::ArrayRef::~ArrayRef((const void **)va5);
  applesauce::CF::StringRef::~StringRef((const void **)va6);
  _Unwind_Resume(a1);
}

void DspLib::LoudspeakerManagerV2::Algorithm::setPressureResponse(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v8 = DspLib::AlgorithmBaseNewParameters::subAlgorithm(a1, 1);
  if (a5)
  {
    v9 = DspLib::AlgorithmBaseNewParameters::subAlgorithm(a1, 1);
    v10 = DspLib::LoudspeakerController::Algorithm::channelForDriver(v9, 1, a4);
    DspLib::LoudspeakerController::MaskingEstimator::setPressureMapping(*(_QWORD *)(v8 + 544) + 4144 * v10 + 1104);
    v8 = DspLib::AlgorithmBaseNewParameters::subAlgorithm(a1, 1);
    v11 = DspLib::AlgorithmBaseNewParameters::subAlgorithm(a1, 1);
    a4 = DspLib::LoudspeakerController::Algorithm::channelForDriver(v11, 2, a4);
  }
  DspLib::LoudspeakerController::MaskingEstimator::setPressureMapping(*(_QWORD *)(v8 + 544) + 4144 * a4 + 1104);
}

uint64_t DspLib::LoudspeakerController::Algorithm::channelForDriver(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t result;
  _QWORD *i;

  if (!*(_QWORD *)(a1 + 472))
    return a3;
  v4 = *(unsigned int *)(a1 + 12);
  if (!(_DWORD)v4)
    return 0;
  result = 0;
  for (i = (_QWORD *)(*(_QWORD *)(a1 + 480) + 8); *((_DWORD *)i - 2) != a2 || *i != a3; i += 2)
  {
    if (v4 == ++result)
      return 0;
  }
  return result;
}

_QWORD *AULoudspeakerManagerV2::TimeScale<float>::getKey(_QWORD *result, CFTypeRef cf)
{
  _QWORD *v3;

  v3 = result;
  if (cf)
    result = CFRetain(cf);
  *v3 = cf;
  return result;
}

uint64_t *std::unique_ptr<DspLib::LoudspeakerManagerV2::Calibration::SpTS::SpeakerCalibrationProperties>::reset[abi:ne180100](uint64_t *result)
{
  uint64_t v1;

  v1 = *result;
  *result = 0;
  if (v1)
  {
    std::shared_ptr<vp::services::Telephony_Utility>::~shared_ptr[abi:ne180100](v1 + 40);
    std::shared_ptr<vp::services::Telephony_Utility>::~shared_ptr[abi:ne180100](v1 + 24);
    JUMPOUT(0x1BCC95CECLL);
  }
  return result;
}

void DspLib::LoudspeakerManagerV2::Calibration::SpTS::v2::Speaker::~Speaker(const void **this)
{
  const void *v1;

  v1 = *this;
  if (v1)
    CFRelease(v1);
}

float DspLib::LoudspeakerManagerV2::Calibration::SpTS::v2::Speaker::get<float>(const __CFDictionary **a1, char *a2)
{
  const __CFDictionary *v2;
  const __CFNumber *v3;
  std::runtime_error *exception;

  v2 = *a1;
  if (!v2)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    applesauce::CF::construct_error(exception);
  }
  v3 = applesauce::CF::DictionaryRef_proxy::at_as<float,char const*&>(v2, a2);
  if (((unint64_t)v3 & 0xFF00000000) == 0)
    std::__throw_bad_optional_access[abi:ne180100]();
  return *(float *)&v3;
}

void sub_1B647789C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_pointer<DspLib::LoudspeakerManagerV2::Calibration::SpTS::ConvoyCalibrationProperties  *>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1BCC95CECLL);
}

uint64_t std::__shared_ptr_pointer<DspLib::LoudspeakerManagerV2::Calibration::SpTS::ConvoyCalibrationProperties  *>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    JUMPOUT(0x1BCC95CECLL);
  return result;
}

BOOL DspLib::LoudspeakerManagerV2::Calibration::SpTS::v2::Speaker::has<float>(const __CFDictionary **a1, char *a2)
{
  const __CFDictionary *v2;
  std::runtime_error *exception;

  v2 = *a1;
  if (!v2)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    applesauce::CF::construct_error(exception);
  }
  return ((unint64_t)applesauce::CF::DictionaryRef_proxy::at_as<float,char const*&>(v2, a2) & 0xFF00000000) != 0;
}

void sub_1B6477954(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<DspLib::LoudspeakerManagerV2::Calibration::SpTS::DispCalibrationProperties>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E69E06B8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<DspLib::LoudspeakerManagerV2::Calibration::SpTS::DispCalibrationProperties>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E69E06B8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1BCC95CECLL);
}

void std::vector<std::unique_ptr<DspLib::LoudspeakerManagerV2::Calibration::SpTS::SpeakerCalibrationProperties>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  uint64_t *v2;
  uint64_t *v4;
  void *v5;

  v1 = *a1;
  v2 = (uint64_t *)**a1;
  if (v2)
  {
    v4 = (uint64_t *)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
        std::unique_ptr<DspLib::LoudspeakerManagerV2::Calibration::SpTS::SpeakerCalibrationProperties>::reset[abi:ne180100](--v4);
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

__n128 AULoudspeakerManagerV2::TimeScale<float>::withPowerSmootherTC(uint64_t a1, uint64_t a2, float a3)
{
  CFTypeRef v6;
  __n128 result;

  v6 = *(CFTypeRef *)a2;
  if (*(_QWORD *)a2)
    CFRetain(*(CFTypeRef *)a2);
  *(_QWORD *)a1 = v6;
  result = *(__n128 *)(a2 + 8);
  *(__n128 *)(a1 + 8) = result;
  *(float *)(a1 + 24) = a3;
  *(_BYTE *)(a1 + 28) = 1;
  return result;
}

void afSTFTData::afSTFTData(afSTFTData *this, unint64_t a2, unint64_t a3)
{
  uint64_t *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;

  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  v6 = (uint64_t *)((char *)this + 24);
  *(_OWORD *)this = 0u;
  if (a2)
  {
    if (a2 >> 60)
      std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
    v7 = 16 * a2;
    v8 = (char *)operator new(16 * a2);
    bzero(v8, 16 * a2);
    *(_QWORD *)this = v8;
    *((_QWORD *)this + 1) = &v8[v7];
    *((_QWORD *)this + 2) = &v8[16 * a2];
  }
  std::vector<std::vector<float>>::resize(v6, 2 * a2);
  v9 = *((_QWORD *)this + 3);
  if (*((_QWORD *)this + 4) != v9)
  {
    v10 = 0;
    v11 = 0;
    do
    {
      std::vector<float>::resize(v9 + v10, a3);
      v12 = v11 >> 1;
      v13 = *(_QWORD *)this;
      v14 = (uint64_t)(*((_QWORD *)this + 1) - *(_QWORD *)this) >> 4;
      if ((v11 & 1) != 0)
      {
        if (v14 <= v11 >> 1)
LABEL_13:
          std::vector<std::vector<float>>::__throw_out_of_range[abi:ne180100]();
        v9 = *v6;
        *(_QWORD *)(v13 + 16 * v12) = *(_QWORD *)(*v6 + v10);
      }
      else
      {
        if (v14 <= v11 >> 1)
          goto LABEL_13;
        v9 = *v6;
        *(_QWORD *)(v13 + 16 * v12 + 8) = *(_QWORD *)(*v6 + v10);
      }
      ++v11;
      v10 += 24;
    }
    while (v11 < 0xAAAAAAAAAAAAAAABLL * ((*((_QWORD *)this + 4) - v9) >> 3));
  }
}

void sub_1B6477BB4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  void *v4;
  va_list va;

  va_start(va, a2);
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  v4 = *(void **)v2;
  if (*(_QWORD *)v2)
  {
    *(_QWORD *)(v2 + 8) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(a1);
}

void afSTFTWrapper::afSTFTWrapper(afSTFTWrapper *this, unsigned int a2, unsigned int a3, int a4, int a5, char a6, int a7)
{
  char v7;
  afSTFTData *v14;
  uint64_t v15;
  int v16;
  unint64_t v17;
  unsigned int v18;
  uint64_t v19;
  int v20;
  void *v21;
  uint64_t v22;
  __int32 v23;
  int v24;
  int32x2_t *v25;
  int32x2_t *v26;
  int v27;
  uint64_t v28;
  char *v29;
  int32x2_t v30;
  int v31;
  _QWORD *v32;
  float v33;
  uint64_t v34;
  uint64_t v35;
  float v36;
  int32x2_t v37;
  float *v38;
  float v39;
  uint64_t v40;
  float v41;
  int32x2_t v42;
  int32x2_t v43;
  float v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  int v48;
  uint64_t v49;
  int *v50;
  uint64_t v51;
  uint64_t v52;
  void **v53;
  char *v54;
  int64x2_t v55;
  __int128 v56;
  void *__p;
  void *v58;
  __int128 v59;
  uint64_t v60;
  void **v61;

  v7 = a7;
  *(_QWORD *)this = &off_1E69E0898;
  *((_DWORD *)this + 2) = 0;
  *(_OWORD *)((char *)this + 56) = 0u;
  v54 = (char *)this + 56;
  v14 = (afSTFTWrapper *)((char *)this + 88);
  v15 = (int)a2;
  if (a7)
    v16 = 4;
  else
    v16 = 0;
  *((_OWORD *)this + 1) = 0uLL;
  *((_OWORD *)this + 2) = 0uLL;
  v17 = a4 + v16 + 1;
  *((_WORD *)this + 24) = 0;
  *(_OWORD *)((char *)this + 72) = 0uLL;
  afSTFTData::afSTFTData(v14, (int)a2, v17);
  afSTFTData::afSTFTData((afSTFTWrapper *)((char *)this + 136), (int)a3, v17);
  *(_OWORD *)((char *)this + 184) = 0u;
  v53 = (void **)((char *)this + 208);
  *(_OWORD *)((char *)this + 200) = 0u;
  *(_OWORD *)((char *)this + 216) = 0u;
  *((_QWORD *)this + 4) = v15;
  *((_QWORD *)this + 5) = (int)a3;
  *((_QWORD *)this + 2) = a4;
  *((_QWORD *)this + 3) = a5;
  *((_BYTE *)this + 48) = a6;
  if (a2 <= a3)
    v18 = a3;
  else
    v18 = a2;
  *((_BYTE *)this + 49) = v7;
  std::vector<void const*>::resize((uint64_t)v54, (int)v18);
  v19 = *((_QWORD *)this + 3);
  v20 = *((_DWORD *)this + 4) + 4 * *((unsigned __int8 *)this + 49) + 1;
  *((_DWORD *)this + 2) = v20;
  CLiteMatrix::CLiteMatrix((CLiteMatrix *)&v56, *((_QWORD *)this + 4), v19);
  std::vector<CLiteMatrix>::vector(&v59, v20, (uint64_t)&v56);
  std::vector<CLiteMatrix>::__vdeallocate((uint64_t *)this + 23);
  *(_OWORD *)((char *)this + 184) = v59;
  *((_QWORD *)this + 25) = v60;
  v60 = 0;
  v59 = 0uLL;
  v61 = (void **)&v59;
  std::vector<CLiteMatrix>::__destroy_vector::operator()[abi:ne180100](&v61);
  if (__p)
  {
    v58 = __p;
    operator delete(__p);
  }
  std::vector<float>::vector(&v56, *((int *)this + 2));
  v21 = *v53;
  if (*v53)
  {
    *((_QWORD *)this + 27) = v21;
    operator delete(v21);
    *v53 = 0;
    *((_QWORD *)this + 27) = 0;
    *((_QWORD *)this + 28) = 0;
  }
  *((_OWORD *)this + 13) = v56;
  *((_QWORD *)this + 28) = __p;
  v22 = *((_QWORD *)this + 2);
  v55 = *((int64x2_t *)this + 2);
  v23 = *((unsigned __int8 *)this + 48);
  v24 = *((unsigned __int8 *)this + 49);
  v25 = (int32x2_t *)malloc_type_malloc(0x78uLL, 0x1080040954E4962uLL);
  v26 = v25;
  *((_QWORD *)this + 10) = v25;
  if ((int)v22 > 255)
  {
    switch((_DWORD)v22)
    {
      case 0x100:
        v27 = 9;
        break;
      case 0x200:
        v27 = 10;
        break;
      case 0x400:
        v27 = 11;
        break;
      default:
        return;
    }
  }
  else
  {
    switch((_DWORD)v22)
    {
      case 0x20:
        v27 = 6;
        break;
      case 0x40:
        v27 = 7;
        break;
      case 0x80:
        v27 = 8;
        break;
      default:
        return;
    }
  }
  v25[11].i32[0] = v27;
  *v25 = vmovn_s64(v55);
  v28 = 0x400u / (unsigned __int16)v22;
  v25[1].i32[1] = v22;
  v25[2].i32[0] = 0x2800 / v28;
  v25[4].i32[0] = 0;
  v25[4].i32[1] = 10;
  v25[3].i32[0] = v23;
  v25[3].i32[1] = 0;
  v25[5] = (int32x2_t)malloc_type_malloc(4 * (0x2800 / v28), 0x100004052888210uLL);
  v26[6] = (int32x2_t)malloc_type_malloc(4 * v26[2].i32[0], 0x100004052888210uLL);
  v26[7] = (int32x2_t)malloc_type_malloc(8 * v26->i32[0], 0x80040B8603338uLL);
  v26[10] = (int32x2_t)malloc_type_malloc(8 * v26->i32[1], 0x80040B8603338uLL);
  v26[8] = (int32x2_t)malloc_type_calloc(4uLL, 2 * v26[1].i32[1], 0xA82F9C55uLL);
  v29 = (char *)malloc_type_calloc(4uLL, 2 * v26[1].i32[1] + 2, 0x3AA40FA7uLL);
  v26[9] = (int32x2_t)v29;
  v30 = v26[8];
  v31 = v26[11].i32[0];
  v32 = malloc_type_malloc(0x30uLL, 0x10A004082EF2C97uLL);
  v26[12] = (int32x2_t)v32;
  *v32 = v30;
  v32[1] = v29;
  *((_DWORD *)v32 + 4) = (int)ldexpf(1.0, v31);
  *((_DWORD *)v32 + 5) = v31;
  v32[3] = vDSP_create_fftsetup(v31, 0);
  v32[4] = v29;
  v32[5] = &v29[4 * (*((_DWORD *)v32 + 4) / 2)];
  v33 = (float)v26[1].i32[1];
  v34 = v26[2].u32[0];
  if (v26[3].i32[0])
  {
    if ((int)v34 >= 1)
    {
      v35 = 0;
      v36 = 1.0 / sqrtf(v33 * 4.5446);
      v37 = v26[5];
      v38 = (float *)v26[6];
      do
      {
        v39 = v36 * protoFilter1024LD[v35 * v28];
        ++v35;
        *(float *)(*(_QWORD *)&v37 + 4 * (int)--v34) = v39;
        *v38++ = v39;
      }
      while (v34);
    }
  }
  else if ((int)v34 >= 1)
  {
    v40 = 0;
    v41 = 1.0 / sqrtf(v33 * 5.4876);
    v42 = v26[5];
    v43 = v26[6];
    do
    {
      v44 = v41 * protoFilter1024[v40 * v28];
      ++v40;
      *(float *)(*(_QWORD *)&v42 + 4 * (int)--v34) = v44;
      *(float *)(*(_QWORD *)&v43 + 4 * (int)v34) = v44;
    }
    while (v34);
  }
  if (v26->i32[0] >= 1)
  {
    v45 = 0;
    do
      *(_QWORD *)(*(_QWORD *)&v26[7] + 8 * v45++) = malloc_type_calloc(v26[2].i32[0], 4uLL, 0x100004052888210uLL);
    while (v45 < v26->i32[0]);
  }
  LODWORD(v46) = v26->i32[1];
  if ((int)v46 >= 1)
  {
    v47 = 0;
    do
    {
      *(_QWORD *)(*(_QWORD *)&v26[10] + 8 * v47++) = malloc_type_calloc(v26[2].i32[0], 4uLL, 0x100004052888210uLL);
      v46 = v26->i32[1];
    }
    while (v47 < v46);
  }
  v26[14].i32[0] = v24;
  if (v24)
  {
    v48 = v26[1].i32[1];
    v49 = v26->i32[0];
    v50 = (int *)malloc_type_malloc(0x28uLL, 0x108004064FE8EA7uLL);
    v26[13] = (int32x2_t)v50;
    v50[1] = v46;
    v50[2] = v48;
    *v50 = v49;
    *((_QWORD *)v50 + 3) = malloc_type_malloc(8 * v49, 0x2004093837F09uLL);
    v50[8] = 0;
    if (*v50 >= 1)
    {
      v51 = 0;
      do
      {
        v52 = 0;
        *(_QWORD *)(*((_QWORD *)v50 + 3) + 8 * v51) = malloc_type_malloc(0x70uLL, 0x80040803F642BuLL);
        do
        {
          *(_QWORD *)(*(_QWORD *)(*((_QWORD *)v50 + 3) + 8 * v51) + v52) = malloc_type_calloc(4uLL, v50[2] + 1, 0xBBFB0B77uLL);
          *(_QWORD *)(*(_QWORD *)(*((_QWORD *)v50 + 3) + 8 * v51) + v52 + 8) = malloc_type_calloc(4uLL, v50[2] + 1, 0xDE26563CuLL);
          v52 += 16;
        }
        while (v52 != 112);
        ++v51;
      }
      while (v51 < *v50);
    }
  }
}

void sub_1B64781C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void **a10, void **a11, uint64_t a12, _QWORD *a13, uint64_t a14, void *__p, uint64_t a16)
{
  _QWORD *v16;
  void *v18;
  void *v19;
  void *v20;
  void *v21;

  v18 = *a10;
  if (*a10)
  {
    v16[27] = v18;
    operator delete(v18);
  }
  std::vector<CLiteMatrix>::__destroy_vector::operator()[abi:ne180100]((void ***)&a13);
  a13 = v16 + 20;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a13);
  v19 = (void *)v16[17];
  if (v19)
  {
    v16[18] = v19;
    operator delete(v19);
  }
  a13 = v16 + 14;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a13);
  v20 = (void *)v16[11];
  if (v20)
  {
    v16[12] = v20;
    operator delete(v20);
  }
  v21 = *a11;
  if (*a11)
  {
    v16[8] = v21;
    operator delete(v21);
  }
  _Unwind_Resume(a1);
}

unint64_t *afSTFTWrapper::fltbAnalysisOneHop(unint64_t *this, int a2)
{
  unint64_t *v3;
  int *v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  _DWORD *v15;
  unint64_t v16;
  _DWORD *v17;
  _DWORD *v18;
  uint64_t v19;
  void *v20;
  _DWORD *v21;
  int v22;
  int v23;
  int *v24;
  int v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  _QWORD *v30;
  const void *v31;
  uint64_t v32;
  void *v33;
  int v34;
  int v35;
  uint64_t v36;
  uint64_t *v37;
  char v38;
  uint64_t *v39;
  char v40;
  uint64_t v41;
  uint64_t v42;
  float v43;
  float v44;
  float v45;
  float v46;
  uint64_t v47;
  uint64_t v48;
  int v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t i;
  float v60;
  float v61;
  float *v62;
  float v63;
  uint64_t v64;
  float v65;
  int v66;
  unint64_t v67;
  unint64_t v68;
  uint64_t v69;
  unint64_t v70;
  unint64_t v71;
  int v72;
  unint64_t v73;
  int v74;
  _DWORD *v75;
  _DWORD v76[2];
  int v77;
  int v78;
  int v79;
  uint64_t v80;

  v3 = this;
  v80 = *MEMORY[0x1E0C80C00];
  v4 = (int *)this[10];
  v5 = this[11];
  if (*v4 >= 1)
  {
    v6 = 0;
    v7 = this[7];
    do
    {
      v8 = v4[7];
      memcpy((void *)(*(_QWORD *)(*((_QWORD *)v4 + 7) + 8 * v6) + 4 * v4[3] * v8), *(const void **)(v7 + 8 * v6), 4 * v4[3]);
      v9 = v4[9];
      vDSP_vclr(*((float **)v4 + 8), 1, 2 * v4[3]);
      if (v4[9] >= 1)
      {
        v10 = 0;
        v11 = 0;
        if (v8 + 1 < v9)
          v12 = v8 + 1;
        else
          v12 = 0;
        do
        {
          if (v10)
            v13 = v4[3];
          else
            v13 = 0;
          v10 ^= 1u;
          vDSP_vma((const float *)(*(_QWORD *)(*((_QWORD *)v4 + 7) + 8 * v6) + 4 * v4[3] * v12), 1, (const float *)(*((_QWORD *)v4 + 5) + 4 * v4[3] * v11), 1, (const float *)(*((_QWORD *)v4 + 8) + 4 * v13), 1, (float *)(*((_QWORD *)v4 + 8) + 4 * v13), 1, v4[3]);
          v14 = v4[9];
          if (v12 + 1 < v14)
            ++v12;
          else
            v12 = 0;
          ++v11;
        }
        while (v11 < v14);
      }
      vtRunFFT(*((_QWORD *)v4 + 12), 1);
      v15 = (_DWORD *)*((_QWORD *)v4 + 9);
      v16 = v5 + 16 * v6;
      v17 = *(_DWORD **)v16;
      *v17 = *v15;
      v18 = *(_DWORD **)(v16 + 8);
      *v18 = 0;
      v19 = v4[3];
      v17[v19] = v15[v19];
      v18[v19] = 0;
      v20 = v18 + 1;
      v21 = &v15[v19 + 1];
      memcpy(v17 + 1, v15 + 1, 4 * v19 - 4);
      this = (unint64_t *)memcpy(v20, v21, 4 * v4[3] - 4);
      ++v6;
    }
    while (v6 < *v4);
  }
  v22 = v4[7];
  if (v22 + 1 < v4[9])
    v23 = v22 + 1;
  else
    v23 = 0;
  v4[7] = v23;
  if (v4[28])
  {
    v24 = (int *)*((_QWORD *)v4 + 13);
    v25 = v24[8];
    v26 = v25 == 6 ? 0 : v25 + 1;
    v24[8] = v26;
    if (*v24 >= 1)
    {
      v27 = 0;
      v28 = *((_QWORD *)v24 + 3);
      do
      {
        v29 = v5 + 16 * v27;
        v31 = *(const void **)(v29 + 8);
        v30 = (_QWORD *)(v29 + 8);
        v32 = *(_QWORD *)(v28 + 8 * v27) + 16 * v26;
        v33 = *(void **)(v32 + 8);
        memcpy(*(void **)v32, *(const void **)v29, 4 * v24[2] + 4);
        memcpy(v33, v31, 4 * v24[2] + 4);
        v34 = v24[8];
        if (v34 >= 3)
          v35 = -3;
        else
          v35 = 4;
        v36 = v35 + v34;
        v37 = (uint64_t *)(*(_QWORD *)(*((_QWORD *)v24 + 3) + 8 * v27) + 16 * v36);
        v38 = 1;
        v39 = (uint64_t *)(v5 + 16 * v27);
        do
        {
          v40 = v38;
          v41 = *v37;
          v42 = *v39;
          *(_DWORD *)v42 = *(_DWORD *)v41;
          v43 = *(float *)(v41 + 4) * 0.5;
          *(float *)(v42 + 4) = v43;
          *(float *)(v42 + 8) = v43;
          v44 = *(float *)(v41 + 8) * 0.5;
          *(float *)(v42 + 12) = v44;
          *(float *)(v42 + 16) = v44;
          v45 = *(float *)(v41 + 12) * 0.5;
          *(float *)(v42 + 20) = v45;
          *(float *)(v42 + 24) = v45;
          v46 = *(float *)(v41 + 16) * 0.5;
          *(float *)(v42 + 28) = v46;
          *(float *)(v42 + 32) = v46;
          memcpy((void *)(v42 + 36), (const void *)(v41 + 20), 4 * v24[2] - 16);
          v38 = 0;
          v28 = *((_QWORD *)v24 + 3);
          v47 = *(_QWORD *)(v28 + 8 * v27);
          v37 = (uint64_t *)(v47 + 16 * v36 + 8);
          v39 = (uint64_t *)(v29 + 8);
        }
        while ((v40 & 1) != 0);
        v48 = 0;
        v26 = v24[8];
        do
        {
          if (v26 + (int)v48 + 1 <= 6)
            v49 = v26 + v48 + 1;
          else
            v49 = v26 - 6 + v48;
          v76[v48++] = v49;
        }
        while (v48 != 7);
        v50 = 0;
        v52 = *(_QWORD *)(v47 + 16 * v79);
        v51 = *(_QWORD *)(v47 + 16 * v79 + 8);
        v54 = *(_QWORD *)(v47 + 16 * v78);
        v53 = *(_QWORD *)(v47 + 16 * v78 + 8);
        v56 = *(_QWORD *)(v47 + 16 * v77);
        v55 = *(_QWORD *)(v47 + 16 * v77 + 8);
        this = *(unint64_t **)(v47 + 16 * v76[0]);
        v57 = *(_QWORD *)(v47 + 16 * v76[0] + 8);
        v58 = *(_QWORD *)v29 + 4;
        for (i = 1; i != 5; ++i)
        {
          v60 = (float)((float)((float)(*(float *)(v51 + 4 * i) * -0.031273)
                              + (float)(*(float *)(v53 + 4 * i) * -0.28127))
                      + (float)(*(float *)(v55 + 4 * i) * 0.28127))
              + (float)(*(float *)(v57 + 4 * i) * 0.031273);
          v61 = (float)((float)((float)(*(float *)(v52 + 4 * i) * 0.031273) + (float)(*(float *)(v54 + 4 * i) * 0.28127))
                      + (float)(*(float *)(v56 + 4 * i) * -0.28127))
              + (float)(*((float *)this + i) * -0.031273);
          v62 = (float *)(v58 + v50);
          v63 = *(float *)(v58 + v50);
          if ((i & 0x7FFFFFFD) == 1)
          {
            *v62 = v63 - v60;
            v64 = *v30 + v50;
            *(float *)(v64 + 4) = *(float *)(v64 + 4) - v61;
            v62[1] = v60 + v62[1];
            v65 = v61 + *(float *)(v64 + 8);
          }
          else
          {
            *v62 = v60 + v63;
            v64 = *v30 + v50;
            *(float *)(v64 + 4) = v61 + *(float *)(v64 + 4);
            v62[1] = v62[1] - v60;
            v65 = *(float *)(v64 + 8) - v61;
          }
          *(float *)(v64 + 8) = v65;
          v50 += 8;
        }
        ++v27;
      }
      while (v27 < *v24);
    }
  }
  v66 = *((_DWORD *)v3 + 2);
  if (v66)
  {
    v67 = 0;
    v68 = v3[23];
    do
    {
      this = (unint64_t *)(v68 + 40 * v67);
      if (*this)
      {
        v69 = 0;
        v70 = 0;
        do
        {
          v71 = v3[11];
          if (v70 >= (uint64_t)(v3[12] - v71) >> 4
            || (v72 = *(_DWORD *)(*(_QWORD *)(v71 + v69) + 4 * v67),
                *(_DWORD *)CLiteMatrix::Get((CLiteMatrix *)this, v70, a2) = v72,
                v73 = v3[11],
                v70 >= (uint64_t)(v3[12] - v73) >> 4))
          {
            std::vector<std::vector<float>>::__throw_out_of_range[abi:ne180100]();
          }
          v74 = *(_DWORD *)(*(_QWORD *)(v73 + v69 + 8) + 4 * v67);
          CLiteMatrix::Get((CLiteMatrix *)(v3[23] + 40 * v67), v70, a2);
          *v75 = v74;
          ++v70;
          v68 = v3[23];
          this = (unint64_t *)(v68 + 40 * v67);
          v69 += 16;
        }
        while (v70 < *this);
        v66 = *((_DWORD *)v3 + 2);
      }
      ++v67;
    }
    while (v67 < v66);
  }
  return this;
}

uint64_t afSTFTWrapper::fltbAnalysisMatrix(afSTFTWrapper *this, unint64_t *a2)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;

  if (*a2 != *((_QWORD *)this + 4))
    __assert_rtn("fltbAnalysisMatrix", "afSTFTWrapper.cpp", 71, "inMatrix.NumRows()==mnInputs");
  v4 = *((_QWORD *)this + 3);
  if (a2[1] != *((_QWORD *)this + 2) * v4)
    __assert_rtn("fltbAnalysisMatrix", "afSTFTWrapper.cpp", 72, "inMatrix.NumCols()==mnHops*mhopSize");
  if (v4)
  {
    v5 = 0;
    do
    {
      if (*((_QWORD *)this + 4))
      {
        v6 = 0;
        do
        {
          *(_QWORD *)(*((_QWORD *)this + 7) + 8 * v6) = LiteMatrix<float>::operator()(a2, v6, *((_QWORD *)this + 2) * v5);
          ++v6;
        }
        while (*((_QWORD *)this + 4) > v6);
      }
      afSTFTWrapper::fltbAnalysisOneHop((unint64_t *)this, v5++);
    }
    while (*((_QWORD *)this + 3) > v5);
  }
  return (uint64_t)this + 184;
}

uint64_t afSTFTWrapper::getFilterbandCenterFrequencies(afSTFTWrapper *this, float a2)
{
  uint64_t v2;
  unint64_t v3;
  int v4;
  float v5;
  uint64_t v6;
  float v7;
  float v8;

  v2 = *((unsigned int *)this + 2);
  if ((int)v2 >= 1)
  {
    v3 = 0;
    v4 = *((unsigned __int8 *)this + 49);
    while (v4)
    {
      if (v3)
      {
        v6 = *((_QWORD *)this + 26);
        if (v3 > 8)
          v7 = (float)((int)v3 - 4);
        else
          v7 = (float)((float)(int)v3 * 0.5) + 0.25;
        v8 = (float)((float)(v7 / (float)(v2 - 5)) * a2) * 0.5;
        goto LABEL_11;
      }
      v5 = a2 * 0.0 * 0.5;
      **((float **)this + 26) = v5;
LABEL_12:
      if (v2 == ++v3)
        return (uint64_t)this + 208;
    }
    v8 = (float)((float)((float)(int)v3 / (float)(v2 - 1)) * a2) * 0.5;
    v6 = *((_QWORD *)this + 26);
LABEL_11:
    *(float *)(v6 + 4 * v3) = v8;
    goto LABEL_12;
  }
  return (uint64_t)this + 208;
}

void AULoudnessInNoise::~AULoudnessInNoise(AULoudnessInNoise *this)
{
  AULoudnessInNoise::~AULoudnessInNoise(this);
  JUMPOUT(0x1BCC95CECLL);
}

{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  uint64_t i;
  void *v29;
  void *v30;
  void *v31;
  void *v32;
  void *v33;
  uint64_t j;
  void *v35;
  void *v36;
  uint64_t k;
  void *v38;
  void *v39;
  void *v40;
  void *v41;
  void *v42;
  void *v43;
  void *v44;
  void *v45;
  void *v46;
  uint64_t m;
  void *v48;
  void *v49;
  void *v50;
  void *v51;
  uint64_t v52;

  *(_QWORD *)this = &off_1E69E08B8;
  v2 = (void *)*((_QWORD *)this + 579);
  if (v2)
  {
    *((_QWORD *)this + 580) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 576);
  if (v3)
  {
    *((_QWORD *)this + 577) = v3;
    operator delete(v3);
  }
  v4 = (void *)*((_QWORD *)this + 573);
  if (v4)
  {
    *((_QWORD *)this + 574) = v4;
    operator delete(v4);
  }
  v5 = (void *)*((_QWORD *)this + 570);
  if (v5)
  {
    *((_QWORD *)this + 571) = v5;
    operator delete(v5);
  }
  v6 = (void *)*((_QWORD *)this + 567);
  if (v6)
  {
    *((_QWORD *)this + 568) = v6;
    operator delete(v6);
  }
  v7 = (void *)*((_QWORD *)this + 564);
  if (v7)
  {
    *((_QWORD *)this + 565) = v7;
    operator delete(v7);
  }
  v8 = (void *)*((_QWORD *)this + 561);
  if (v8)
  {
    *((_QWORD *)this + 562) = v8;
    operator delete(v8);
  }
  v9 = (void *)*((_QWORD *)this + 558);
  if (v9)
  {
    *((_QWORD *)this + 559) = v9;
    operator delete(v9);
  }
  v10 = (void *)*((_QWORD *)this + 555);
  if (v10)
  {
    *((_QWORD *)this + 556) = v10;
    operator delete(v10);
  }
  v11 = (void *)*((_QWORD *)this + 552);
  if (v11)
  {
    *((_QWORD *)this + 553) = v11;
    operator delete(v11);
  }
  v12 = (void *)*((_QWORD *)this + 549);
  if (v12)
  {
    *((_QWORD *)this + 550) = v12;
    operator delete(v12);
  }
  v13 = (void *)*((_QWORD *)this + 546);
  if (v13)
  {
    *((_QWORD *)this + 547) = v13;
    operator delete(v13);
  }
  v14 = (void *)*((_QWORD *)this + 543);
  if (v14)
  {
    *((_QWORD *)this + 544) = v14;
    operator delete(v14);
  }
  v15 = (void *)*((_QWORD *)this + 540);
  if (v15)
  {
    *((_QWORD *)this + 541) = v15;
    operator delete(v15);
  }
  v16 = (void *)*((_QWORD *)this + 537);
  if (v16)
  {
    *((_QWORD *)this + 538) = v16;
    operator delete(v16);
  }
  v17 = (void *)*((_QWORD *)this + 531);
  if (v17)
  {
    *((_QWORD *)this + 532) = v17;
    operator delete(v17);
  }
  v18 = (void *)*((_QWORD *)this + 528);
  if (v18)
  {
    *((_QWORD *)this + 529) = v18;
    operator delete(v18);
  }
  v19 = (void *)*((_QWORD *)this + 525);
  if (v19)
  {
    *((_QWORD *)this + 526) = v19;
    operator delete(v19);
  }
  v20 = (void *)*((_QWORD *)this + 522);
  if (v20)
  {
    *((_QWORD *)this + 523) = v20;
    operator delete(v20);
  }
  v21 = (void *)*((_QWORD *)this + 519);
  if (v21)
  {
    *((_QWORD *)this + 520) = v21;
    operator delete(v21);
  }
  v22 = (void *)*((_QWORD *)this + 516);
  if (v22)
  {
    *((_QWORD *)this + 517) = v22;
    operator delete(v22);
  }
  v23 = (void *)*((_QWORD *)this + 513);
  if (v23)
  {
    *((_QWORD *)this + 514) = v23;
    operator delete(v23);
  }
  v24 = (void *)*((_QWORD *)this + 510);
  if (v24)
  {
    *((_QWORD *)this + 511) = v24;
    operator delete(v24);
  }
  v25 = (void *)*((_QWORD *)this + 507);
  if (v25)
  {
    *((_QWORD *)this + 508) = v25;
    operator delete(v25);
  }
  v26 = (void *)*((_QWORD *)this + 504);
  if (v26)
  {
    *((_QWORD *)this + 505) = v26;
    operator delete(v26);
  }
  v27 = (void *)*((_QWORD *)this + 501);
  if (v27)
  {
    *((_QWORD *)this + 502) = v27;
    operator delete(v27);
  }
  for (i = 0; i != -720; i -= 24)
  {
    v29 = *(void **)((char *)this + i + 3984);
    if (v29)
    {
      *(_QWORD *)((char *)this + i + 3992) = v29;
      operator delete(v29);
    }
  }
  v30 = (void *)*((_QWORD *)this + 408);
  if (v30)
  {
    *((_QWORD *)this + 409) = v30;
    operator delete(v30);
  }
  v31 = (void *)*((_QWORD *)this + 405);
  if (v31)
  {
    *((_QWORD *)this + 406) = v31;
    operator delete(v31);
  }
  v32 = (void *)*((_QWORD *)this + 402);
  if (v32)
  {
    *((_QWORD *)this + 403) = v32;
    operator delete(v32);
  }
  v33 = (void *)*((_QWORD *)this + 399);
  if (v33)
  {
    *((_QWORD *)this + 400) = v33;
    operator delete(v33);
  }
  for (j = 0; j != -720; j -= 24)
  {
    v35 = *(void **)((char *)this + j + 3168);
    if (v35)
    {
      *(_QWORD *)((char *)this + j + 3176) = v35;
      operator delete(v35);
    }
  }
  v36 = (void *)*((_QWORD *)this + 306);
  if (v36)
  {
    *((_QWORD *)this + 307) = v36;
    operator delete(v36);
  }
  for (k = 0; k != -720; k -= 24)
  {
    v38 = *(void **)((char *)this + k + 2424);
    if (v38)
    {
      *(_QWORD *)((char *)this + k + 2432) = v38;
      operator delete(v38);
    }
  }
  v39 = (void *)*((_QWORD *)this + 213);
  if (v39)
  {
    *((_QWORD *)this + 214) = v39;
    operator delete(v39);
  }
  v40 = (void *)*((_QWORD *)this + 210);
  if (v40)
  {
    *((_QWORD *)this + 211) = v40;
    operator delete(v40);
  }
  v41 = (void *)*((_QWORD *)this + 200);
  if (v41)
  {
    *((_QWORD *)this + 201) = v41;
    operator delete(v41);
  }
  v42 = (void *)*((_QWORD *)this + 197);
  if (v42)
  {
    *((_QWORD *)this + 198) = v42;
    operator delete(v42);
  }
  v43 = (void *)*((_QWORD *)this + 194);
  if (v43)
  {
    *((_QWORD *)this + 195) = v43;
    operator delete(v43);
  }
  v44 = (void *)*((_QWORD *)this + 191);
  if (v44)
  {
    *((_QWORD *)this + 192) = v44;
    operator delete(v44);
  }
  v45 = (void *)*((_QWORD *)this + 187);
  if (v45)
  {
    *((_QWORD *)this + 188) = v45;
    operator delete(v45);
  }
  v46 = (void *)*((_QWORD *)this + 184);
  if (v46)
  {
    *((_QWORD *)this + 185) = v46;
    operator delete(v46);
  }
  for (m = 0; m != -720; m -= 24)
  {
    v48 = *(void **)((char *)this + m + 1448);
    if (v48)
    {
      *(_QWORD *)((char *)this + m + 1456) = v48;
      operator delete(v48);
    }
  }
  v49 = (void *)*((_QWORD *)this + 91);
  if (v49)
  {
    *((_QWORD *)this + 92) = v49;
    operator delete(v49);
  }
  v50 = (void *)*((_QWORD *)this + 88);
  if (v50)
  {
    *((_QWORD *)this + 89) = v50;
    operator delete(v50);
  }
  v51 = (void *)*((_QWORD *)this + 82);
  if (v51)
  {
    *((_QWORD *)this + 83) = v51;
    operator delete(v51);
  }
  v52 = *((_QWORD *)this + 66);
  *((_QWORD *)this + 66) = 0;
  if (v52)
    MEMORY[0x1BCC95CEC](v52, 0x60C4044C4A2DFLL);
  ausdk::AUBase::~AUBase(this);
}

uint64_t AULoudnessInNoise::Initialize(AULoudnessInNoise *this)
{
  ausdk::AUScope *v2;
  uint64_t v3;
  uint64_t v4;
  unsigned int v5;
  uint64_t Element;
  int v7;
  uint64_t v8;
  float v9;
  unint64_t v10;
  unsigned int v11;
  float v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  float v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  char *v44;
  uint64_t v45;
  float v46;
  float v47;
  float v48;
  float *v49;
  float *v50;
  float v51;
  float v52;
  float v53;
  float v54;
  float v55;
  float v56;
  unint64_t v57;
  float v58;
  float v60;
  float v61;
  unint64_t v63;
  float v64;
  unint64_t v65;
  unint64_t v66;
  unint64_t v67;
  unint64_t v68;
  int v70;
  float v71;

  *((_BYTE *)this + 376) = 1;
  v2 = (AULoudnessInNoise *)((char *)this + 80);
  v3 = *((_QWORD *)this + 15);
  if (v3)
    LODWORD(v4) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 24))(v3);
  else
    v4 = (*((_QWORD *)this + 13) - *((_QWORD *)this + 12)) >> 3;
  if (v4 >= 2)
  {
    v5 = 1;
    do
    {
      Element = ausdk::AUScope::SafeGetElement(v2, v5 - 1);
      if (*(double *)(Element + 80) != *(double *)(ausdk::AUScope::SafeGetElement(v2, v5) + 80))
        return 4294956428;
    }
    while ((_DWORD)v4 != ++v5);
  }
  if (*(_DWORD *)(ausdk::AUScope::SafeGetElement(v2, 0) + 108) != 1
    || *(_DWORD *)(ausdk::AUScope::SafeGetElement(v2, 1u) + 108) != 1)
  {
    return 4294956428;
  }
  AULoudnessInNoise::InitializeInternals(this);
  *((_DWORD *)this + 419) = 0;
  v7 = *((_DWORD *)this + 84);
  if (*((_DWORD *)this + 147) != v7)
  {
    *((_DWORD *)this + 147) = v7;
    *((_DWORD *)this + 148) = 2 * v7;
    *((_DWORD *)this + 149) = v7 + 1;
    if (!*((_BYTE *)this + 1624))
      AULoudnessInNoise::Set_Level_Spreading_PropertyRelatedDefaults(this);
  }
  v8 = AULoudnessInNoise::Validate_Level_Spreading_PropertyRelatedValues(this);
  v9 = *(double *)(ausdk::AUScope::SafeGetElement(v2, 0) + 80);
  *((float *)this + 146) = v9;
  v10 = *((unsigned int *)this + 148);
  *((float *)this + 156) = sqrtf((float)v10);
  std::vector<float>::resize((uint64_t)this + 1528, v10);
  std::vector<float>::resize((uint64_t)this + 1552, *((unsigned int *)this + 148));
  std::vector<float>::resize((uint64_t)this + 1576, *((unsigned int *)this + 148));
  std::vector<float>::resize((uint64_t)this + 1600, *((unsigned int *)this + 149));
  AULoudnessInNoise::UpdateDynParams(this);
  AULoudnessInNoise::SetOutputParamRelatedDefaults(this);
  AULoudnessInNoise::UpdateOutputParams(this);
  *((_QWORD *)this + 204) = 0xC12000003E99999ALL;
  *((_DWORD *)this + 410) = 1050798235;
  v11 = *((_DWORD *)this + 147);
  v12 = *((float *)this + 146) * 0.5 / (float)v11;
  v13 = vcvtms_u32_f32(*((float *)this + 157) / v12);
  if (v11 >= v13)
    v14 = v13;
  else
    v14 = *((_DWORD *)this + 147);
  if (v13)
    v15 = v14;
  else
    v15 = 0;
  *((_DWORD *)this + 411) = v15;
  v16 = vcvtps_u32_f32(*((float *)this + 158) / v12);
  if (v16 + 1 < v11)
    v11 = v16 + 1;
  if (v11 <= v15 + 1)
    v11 = v15 + 1;
  *((_DWORD *)this + 412) = v11;
  v17 = *((unsigned int *)this + 149);
  v71 = 0.0;
  std::vector<float>::assign((char **)this + 501, v17, &v71);
  v18 = *((unsigned int *)this + 149);
  v71 = 0.0;
  std::vector<float>::assign((char **)this + 504, v18, &v71);
  v19 = *((unsigned int *)this + 149);
  v71 = 0.0;
  std::vector<float>::assign((char **)this + 507, v19, &v71);
  v20 = *((unsigned int *)this + 149);
  v71 = 0.0;
  std::vector<float>::assign((char **)this + 510, v20, &v71);
  v21 = *((unsigned int *)this + 149);
  v71 = 0.0;
  std::vector<float>::assign((char **)this + 513, v21, &v71);
  v22 = *((unsigned int *)this + 149);
  v71 = 0.0;
  std::vector<float>::assign((char **)this + 516, v22, &v71);
  v23 = *((unsigned int *)this + 149);
  v71 = 0.0;
  std::vector<float>::assign((char **)this + 519, v23, &v71);
  v24 = *((unsigned int *)this + 149);
  v71 = 0.0;
  std::vector<float>::assign((char **)this + 522, v24, &v71);
  v25 = *((unsigned int *)this + 149);
  v71 = 0.0;
  std::vector<float>::assign((char **)this + 525, v25, &v71);
  v26 = *((unsigned int *)this + 149);
  v71 = 0.0;
  std::vector<float>::assign((char **)this + 528, v26, &v71);
  v27 = __exp10f(*((float *)this + 135) / 20.0);
  v71 = v27 * v27;
  std::vector<float>::assign((char **)this + 531, *((unsigned int *)this + 149), &v71);
  *((_BYTE *)this + 600) = 0;
  *((_QWORD *)this + 534) = 0x308000004E800000;
  *((_BYTE *)this + 4288) = 0;
  *((_DWORD *)this + 1071) = 0;
  *((_DWORD *)this + 1073) = 0;
  v28 = *((unsigned int *)this + 149);
  v70 = 0;
  std::vector<float>::assign((char **)this + 537, v28, &v70);
  v29 = *((unsigned int *)this + 149);
  v70 = 0;
  std::vector<float>::assign((char **)this + 543, v29, &v70);
  v30 = *((unsigned int *)this + 149);
  v70 = 0;
  std::vector<float>::assign((char **)this + 546, v30, &v70);
  v31 = *((unsigned int *)this + 149);
  v70 = 0;
  std::vector<float>::assign((char **)this + 549, v31, &v70);
  v32 = *((unsigned int *)this + 149);
  v70 = 0;
  std::vector<float>::assign((char **)this + 552, v32, &v70);
  v33 = *((unsigned int *)this + 149);
  v70 = 0;
  std::vector<float>::assign((char **)this + 555, v33, &v70);
  v34 = *((unsigned int *)this + 149);
  v70 = 0;
  std::vector<float>::assign((char **)this + 558, v34, &v70);
  v35 = *((unsigned int *)this + 149);
  v70 = 0;
  std::vector<float>::assign((char **)this + 561, v35, &v70);
  v36 = *((unsigned int *)this + 149);
  v70 = 0;
  std::vector<float>::assign((char **)this + 564, v36, &v70);
  v37 = *((unsigned int *)this + 149);
  v70 = 0;
  std::vector<float>::assign((char **)this + 567, v37, &v70);
  v38 = *((unsigned int *)this + 149);
  v70 = 0;
  std::vector<float>::assign((char **)this + 570, v38, &v70);
  *((_DWORD *)this + 1070) = 7;
  v39 = *((unsigned int *)this + 149);
  v70 = 0;
  std::vector<float>::assign((char **)this + 573, v39, &v70);
  v40 = *((unsigned int *)this + 149);
  v41 = (*((_DWORD *)this + 1070) - 1);
  if (*((_DWORD *)this + 1070) != 1)
  {
    v42 = 0;
    v43 = 0;
    v44 = (char *)this + 4656;
    v45 = *((_QWORD *)this + 573);
    v46 = *((float *)this + 1164);
    v47 = (float)v40
        / (float)(*((float *)this + 2 * (*((_DWORD *)this + 1070) - 1) + 1164) - v46);
    v48 = v46 * v47;
    do
    {
      v49 = (float *)&v44[8 * v42++];
      v50 = (float *)&v44[8 * v42];
      v51 = v49[1];
      v53 = *v50;
      v52 = v50[1];
      v54 = v47 * (float)((float)(*v49 + *v50) * 0.5);
      v55 = (float)(v51 + v52) * 0.5;
      if (v48 >= v54)
      {
        v57 = v43;
      }
      else
      {
        v56 = v47 * *v49;
        do
        {
          v57 = (v43 + 1);
          *(float *)(v45 + 4 * v43) = v51
                                                    + (float)((float)((float)((float)(v48 - v56) / (float)(v54 - v56))
                                                                    * (float)((float)(v48 - v56) / (float)(v54 - v56)))
                                                            * (float)(v55 - v51));
          v48 = v48 + 1.0;
          LODWORD(v43) = v43 + 1;
        }
        while (v48 < v54);
      }
      v58 = v47 * v53;
      if (v48 < v58 && v57 < v40)
      {
        v60 = v54 - v58;
        v61 = v52 - v55;
        v57 = v57;
        do
        {
          *(float *)(v45 + 4 * v57++) = v55
                                      + (float)((float)(1.0
                                                      - (float)((float)((float)(v48 - v58) / v60)
                                                              * (float)((float)(v48 - v58) / v60)))
                                              * v61);
          v48 = v48 + 1.0;
        }
        while (v48 < v58 && v57 < v40);
      }
      v43 = v57;
    }
    while (v42 != v41);
  }
  v70 = 0;
  std::vector<float>::assign((char **)this + 576, (2 * v40), &v70);
  v63 = *((unsigned int *)this + 149);
  v70 = 0;
  std::vector<float>::assign((char **)this + 579, v63, &v70);
  v64 = *((float *)this + 146) / (float)*((unsigned int *)this + 149);
  *((float *)this + 1178) = expf(-1.0 / (float)(v64 * 0.04));
  *((float *)this + 1179) = 1.0 - expf(-1.0 / (float)(v64 * 0.1));
  *((float *)this + 1180) = 1.0 - expf(-1.0 / (float)(v64 * 0.05));
  *((_DWORD *)this + 1181) = 1094713344;
  *((float *)this + 1182) = 1.0 - expf(-1.0 / (float)(v64 * 0.5));
  *((_DWORD *)this + 1183) = 1112014848;
  *((_QWORD *)this + 592) = 0;
  *((_DWORD *)this + 407) = 1;
  v65 = *((unsigned int *)this + 145);
  v70 = 0;
  std::vector<float>::assign((char **)this + 88, v65, &v70);
  v66 = *((unsigned int *)this + 145);
  v70 = 0;
  std::vector<float>::assign((char **)this + 91, v66, &v70);
  v67 = *((unsigned int *)this + 145);
  v70 = 0;
  std::vector<float>::assign((char **)this + 184, v67, &v70);
  v68 = *((unsigned int *)this + 145);
  v70 = 0;
  std::vector<float>::assign((char **)this + 187, v68, &v70);
  AULoudnessInNoise::Reset(this);
  *((_BYTE *)this + 576) = 1;
  return v8;
}

uint64_t AULoudnessInNoise::Reset(AULoudnessInNoise *this)
{
  void *v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  void *v24;
  uint64_t v25;
  void *v26;
  uint64_t v27;
  void *v28;
  uint64_t v29;
  void *v30;
  uint64_t v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  void *v38;
  uint64_t v39;
  void *v40;
  uint64_t v41;
  void *v42;
  uint64_t v43;
  void *v44;
  uint64_t v45;
  void *v46;
  uint64_t v47;
  void *v48;
  uint64_t v49;
  void *v50;
  uint64_t v51;
  void *v52;
  uint64_t v53;
  void *v54;
  uint64_t v55;
  void *v56;
  uint64_t v57;
  void *v58;
  uint64_t v59;
  void *v60;
  uint64_t v61;

  *((_OWORD *)this + 35) = xmmword_1B6627BC0;
  *((_DWORD *)this + 419) = 0;
  if (*((_BYTE *)this + 17))
  {
    v2 = (void *)*((_QWORD *)this + 191);
    v3 = *((_QWORD *)this + 192) - (_QWORD)v2;
    if (v3 >= 1)
      bzero(v2, 4 * (((unint64_t)v3 >> 2) - ((unint64_t)v3 > 3)) + 4);
    v4 = (void *)*((_QWORD *)this + 194);
    v5 = *((_QWORD *)this + 195) - (_QWORD)v4;
    if (v5 >= 1)
      bzero(v4, 4 * (((unint64_t)v5 >> 2) - ((unint64_t)v5 > 3)) + 4);
    v6 = (void *)*((_QWORD *)this + 197);
    v7 = *((_QWORD *)this + 198) - (_QWORD)v6;
    if (v7 >= 1)
      bzero(v6, 4 * (((unint64_t)v7 >> 2) - ((unint64_t)v7 > 3)) + 4);
    v8 = (void *)*((_QWORD *)this + 200);
    v9 = *((_QWORD *)this + 201) - (_QWORD)v8;
    if (v9 >= 1)
      bzero(v8, 4 * (((unint64_t)v9 >> 2) - ((unint64_t)v9 > 3)) + 4);
    v10 = (void *)*((_QWORD *)this + 501);
    v11 = *((_QWORD *)this + 502) - (_QWORD)v10;
    if (v11 >= 1)
      bzero(v10, 4 * (((unint64_t)v11 >> 2) - ((unint64_t)v11 > 3)) + 4);
    v12 = (void *)*((_QWORD *)this + 504);
    v13 = *((_QWORD *)this + 505) - (_QWORD)v12;
    if (v13 >= 1)
      bzero(v12, 4 * (((unint64_t)v13 >> 2) - ((unint64_t)v13 > 3)) + 4);
    v14 = (void *)*((_QWORD *)this + 507);
    v15 = *((_QWORD *)this + 508) - (_QWORD)v14;
    if (v15 >= 1)
      bzero(v14, 4 * (((unint64_t)v15 >> 2) - ((unint64_t)v15 > 3)) + 4);
    v16 = (void *)*((_QWORD *)this + 510);
    v17 = *((_QWORD *)this + 511) - (_QWORD)v16;
    if (v17 >= 1)
      bzero(v16, 4 * (((unint64_t)v17 >> 2) - ((unint64_t)v17 > 3)) + 4);
    v18 = (void *)*((_QWORD *)this + 513);
    v19 = *((_QWORD *)this + 514) - (_QWORD)v18;
    if (v19 >= 1)
      bzero(v18, 4 * (((unint64_t)v19 >> 2) - ((unint64_t)v19 > 3)) + 4);
    v20 = (void *)*((_QWORD *)this + 516);
    v21 = *((_QWORD *)this + 517) - (_QWORD)v20;
    if (v21 >= 1)
      bzero(v20, 4 * (((unint64_t)v21 >> 2) - ((unint64_t)v21 > 3)) + 4);
    v22 = (void *)*((_QWORD *)this + 519);
    v23 = *((_QWORD *)this + 520) - (_QWORD)v22;
    if (v23 >= 1)
      bzero(v22, 4 * (((unint64_t)v23 >> 2) - ((unint64_t)v23 > 3)) + 4);
    v24 = (void *)*((_QWORD *)this + 522);
    v25 = *((_QWORD *)this + 523) - (_QWORD)v24;
    if (v25 >= 1)
      bzero(v24, 4 * (((unint64_t)v25 >> 2) - ((unint64_t)v25 > 3)) + 4);
    v26 = (void *)*((_QWORD *)this + 525);
    v27 = *((_QWORD *)this + 526) - (_QWORD)v26;
    if (v27 >= 1)
      bzero(v26, 4 * (((unint64_t)v27 >> 2) - ((unint64_t)v27 > 3)) + 4);
    v28 = (void *)*((_QWORD *)this + 528);
    v29 = *((_QWORD *)this + 529) - (_QWORD)v28;
    if (v29 >= 1)
      bzero(v28, 4 * (((unint64_t)v29 >> 2) - ((unint64_t)v29 > 3)) + 4);
    v30 = (void *)*((_QWORD *)this + 531);
    v31 = *((_QWORD *)this + 532) - (_QWORD)v30;
    if (v31 >= 1)
      bzero(v30, 4 * (((unint64_t)v31 >> 2) - ((unint64_t)v31 > 3)) + 4);
    v32 = (void *)*((_QWORD *)this + 82);
    v33 = *((_QWORD *)this + 83) - (_QWORD)v32;
    if (v33 >= 1)
      bzero(v32, 4 * (((unint64_t)v33 >> 2) - ((unint64_t)v33 > 3)) + 4);
    if (*((_DWORD *)this + 136) == 1)
    {
      v34 = *((unsigned int *)this + 380);
      v35 = *((unsigned int *)this + 381);
      if (v34 < v35)
      {
        v36 = v35 - v34;
        v37 = (_QWORD *)((char *)this + 24 * v34 + 760);
        do
        {
          v38 = (void *)*(v37 - 1);
          v39 = *v37 - (_QWORD)v38;
          if (v39 >= 1)
            bzero(v38, 4 * (((unint64_t)v39 >> 2) - ((unint64_t)v39 > 3)) + 4);
          v37 += 3;
          --v36;
        }
        while (v36);
      }
      v40 = (void *)*((_QWORD *)this + 88);
      v41 = *((_QWORD *)this + 89) - (_QWORD)v40;
      if (v41 >= 1)
        bzero(v40, 4 * (((unint64_t)v41 >> 2) - ((unint64_t)v41 > 3)) + 4);
      v42 = (void *)*((_QWORD *)this + 91);
      v43 = *((_QWORD *)this + 92) - (_QWORD)v42;
      if (v43 >= 1)
        bzero(v42, 4 * (((unint64_t)v43 >> 2) - ((unint64_t)v43 > 3)) + 4);
      v44 = (void *)*((_QWORD *)this + 184);
      v45 = *((_QWORD *)this + 185) - (_QWORD)v44;
      if (v45 >= 1)
        bzero(v44, 4 * (((unint64_t)v45 >> 2) - ((unint64_t)v45 > 3)) + 4);
      v46 = (void *)*((_QWORD *)this + 187);
      v47 = *((_QWORD *)this + 188) - (_QWORD)v46;
      if (v47 >= 1)
        bzero(v46, 4 * (((unint64_t)v47 >> 2) - ((unint64_t)v47 > 3)) + 4);
    }
    v48 = (void *)*((_QWORD *)this + 543);
    v49 = *((_QWORD *)this + 544) - (_QWORD)v48;
    if (v49 >= 1)
      bzero(v48, 4 * (((unint64_t)v49 >> 2) - ((unint64_t)v49 > 3)) + 4);
    v50 = (void *)*((_QWORD *)this + 546);
    v51 = *((_QWORD *)this + 547) - (_QWORD)v50;
    if (v51 >= 1)
      bzero(v50, 4 * (((unint64_t)v51 >> 2) - ((unint64_t)v51 > 3)) + 4);
    v52 = (void *)*((_QWORD *)this + 549);
    v53 = *((_QWORD *)this + 550) - (_QWORD)v52;
    if (v53 >= 1)
      bzero(v52, 4 * (((unint64_t)v53 >> 2) - ((unint64_t)v53 > 3)) + 4);
    v54 = (void *)*((_QWORD *)this + 552);
    v55 = *((_QWORD *)this + 553) - (_QWORD)v54;
    if (v55 >= 1)
      bzero(v54, 4 * (((unint64_t)v55 >> 2) - ((unint64_t)v55 > 3)) + 4);
    v56 = (void *)*((_QWORD *)this + 555);
    v57 = *((_QWORD *)this + 556) - (_QWORD)v56;
    if (v57 >= 1)
      bzero(v56, 4 * (((unint64_t)v57 >> 2) - ((unint64_t)v57 > 3)) + 4);
    v58 = (void *)*((_QWORD *)this + 558);
    v59 = *((_QWORD *)this + 559) - (_QWORD)v58;
    if (v59 >= 1)
      bzero(v58, 4 * (((unint64_t)v59 >> 2) - ((unint64_t)v59 > 3)) + 4);
    v60 = (void *)*((_QWORD *)this + 561);
    v61 = *((_QWORD *)this + 562) - (_QWORD)v60;
    if (v61 >= 1)
      bzero(v60, 4 * (((unint64_t)v61 >> 2) - ((unint64_t)v61 > 3)) + 4);
    *((_DWORD *)this + 1071) = 0;
    *((_BYTE *)this + 4288) = 0;
    *((_DWORD *)this + 1073) = 0;
    AULoudnessInNoise::SetOutputParamRelatedDefaults(this);
  }
  *((_DWORD *)this + 1186) = 0;
  return 0;
}

uint64_t AULoudnessInNoise::GetPropertyInfo(AULoudnessInNoise *this, int a2, int a3, unsigned int a4, unsigned int *a5, BOOL *a6)
{
  uint64_t result;
  int v8;
  int v9;

  if (a3)
    return 4294956417;
  result = 4294956417;
  if (a2 > 70009)
  {
    if ((a2 - 70010) < 5)
    {
      *a6 = 0;
      v9 = 4 * *((_DWORD *)this + 145);
      goto LABEL_17;
    }
    if (a2 == 71000)
      goto LABEL_6;
    v8 = 80000;
  }
  else
  {
    v8 = 70000;
    if (a2 > 70000)
    {
      if ((a2 - 70001) >= 4)
        return result;
      goto LABEL_6;
    }
    if (a2 == 21)
    {
      *a6 = 1;
      goto LABEL_7;
    }
    if (a2 == 3700)
    {
LABEL_6:
      *a6 = 0;
LABEL_7:
      v9 = 4;
      goto LABEL_17;
    }
  }
  if (a2 != v8)
    return result;
  *a6 = 0;
  v9 = 8;
LABEL_17:
  result = 0;
  *a5 = v9;
  return result;
}

uint64_t AULoudnessInNoise::GetProperty(AULoudnessInNoise *this, int a2, int a3, unsigned int a4, _DWORD *__dst)
{
  uint64_t result;
  int v8;
  int v9;
  int v10;
  int v11;
  uint64_t *v12;
  CFStringRef *v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  char *v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t v21;
  int64x2_t v22;
  unint64_t v23;
  char *v24;
  char **v25;
  BOOL v26;
  CFDictionaryRef CFDictionaryRef;
  int v28;
  char *v29;
  char *v30;
  char *v31;
  char *v32;
  char *v33;
  const UInt8 *v34;
  unint64_t *v35;
  unint64_t *v36;
  CFDictionaryRef v37;
  const void *v38;
  float v39;
  void **p_p;
  char *v41;
  unint64_t v42;
  int64x2_t v43;
  unint64_t v44[3];
  void *__p;
  int64x2_t v46;
  unint64_t v47;
  unint64_t *v48;

  if (a3)
    return 4294956417;
  result = 4294956417;
  if (a2 <= 69999)
  {
    if (a2 == 21)
    {
      result = 0;
      v28 = *((unsigned __int8 *)this + 577);
    }
    else
    {
      if (a2 != 3700)
        return result;
      result = 0;
      v28 = *((unsigned __int8 *)this + 376);
    }
    *__dst = v28;
    return result;
  }
  switch(a2)
  {
    case 70000:
      v41 = 0;
      v42 = 0;
      p_p = (void **)&v41;
      v8 = *((_DWORD *)this + 161);
      std::string::basic_string[abi:ne180100]<0>(&__p, "RawLoudness");
      v43.i64[0] = (uint64_t)&__p;
      *((_DWORD *)std::__tree<std::__value_type<std::string,float>,std::__map_value_compare<std::string,std::__value_type<std::string,float>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,float>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)&p_p, &__p, &v43)+ 14) = v8;
      if (v46.i8[15] < 0)
        operator delete(__p);
      v9 = *((_DWORD *)this + 162);
      std::string::basic_string[abi:ne180100]<0>(&__p, "NormLoudness");
      v43.i64[0] = (uint64_t)&__p;
      *((_DWORD *)std::__tree<std::__value_type<std::string,float>,std::__map_value_compare<std::string,std::__value_type<std::string,float>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,float>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)&p_p, &__p, &v43)+ 14) = v9;
      if (v46.i8[15] < 0)
        operator delete(__p);
      v10 = *((_DWORD *)this + 170);
      std::string::basic_string[abi:ne180100]<0>(&__p, "LoudnessPercentile");
      v43.i64[0] = (uint64_t)&__p;
      *((_DWORD *)std::__tree<std::__value_type<std::string,float>,std::__map_value_compare<std::string,std::__value_type<std::string,float>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,float>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)&p_p, &__p, &v43)+ 14) = v10;
      if (v46.i8[15] < 0)
        operator delete(__p);
      v11 = *((_DWORD *)this + 171);
      std::string::basic_string[abi:ne180100]<0>(&__p, "Audibility");
      v43.i64[0] = (uint64_t)&__p;
      *((float *)std::__tree<std::__value_type<std::string,float>,std::__map_value_compare<std::string,std::__value_type<std::string,float>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,float>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)&p_p, &__p, &v43)+ 14) = (float)v11;
      if (v46.i8[15] < 0)
        operator delete(__p);
      v43 = 0uLL;
      v44[0] = 0;
      std::vector<applesauce::CF::TypeRefPair>::reserve(&v43, v42);
      v12 = (uint64_t *)p_p;
      if (p_p != (void **)&v41)
      {
        v13 = (CFStringRef *)v43.i64[1];
        do
        {
          if ((unint64_t)v13 >= v44[0])
          {
            v14 = ((uint64_t)v13 - v43.i64[0]) >> 4;
            if ((unint64_t)(v14 + 1) >> 60)
              std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
            v15 = (uint64_t)(v44[0] - v43.i64[0]) >> 3;
            if (v15 <= v14 + 1)
              v15 = v14 + 1;
            if (v44[0] - v43.i64[0] >= 0x7FFFFFFFFFFFFFF0)
              v16 = 0xFFFFFFFFFFFFFFFLL;
            else
              v16 = v15;
            v48 = v44;
            if (v16)
              v17 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::tuple<unsigned int,applesauce::CF::DictionaryRef>>>((uint64_t)v44, v16);
            else
              v17 = 0;
            __p = v17;
            v46.i64[0] = (uint64_t)&v17[16 * v14];
            v46.i64[1] = v46.i64[0];
            v47 = (unint64_t)&v17[16 * v16];
            applesauce::CF::TypeRefPair::TypeRefPair<std::string const&,float const&>((CFStringRef *)v46.i64[0], (const UInt8 *)v12 + 32, (int *)v12 + 14);
            v18 = v46.i64[0];
            v13 = (CFStringRef *)(v46.i64[1] + 16);
            v46.i64[1] += 16;
            v19 = (_QWORD *)v43.i64[1];
            v20 = (_QWORD *)v43.i64[0];
            if (v43.i64[1] == v43.i64[0])
            {
              v22 = vdupq_n_s64(v43.u64[1]);
            }
            else
            {
              do
              {
                v21 = *(v19 - 2);
                v19 -= 2;
                *(_QWORD *)(v18 - 16) = v21;
                v18 -= 16;
                *v19 = 0;
                *(_QWORD *)(v18 + 8) = v19[1];
                v19[1] = 0;
              }
              while (v19 != v20);
              v22 = v43;
              v13 = (CFStringRef *)v46.i64[1];
            }
            v43.i64[0] = v18;
            v43.i64[1] = (uint64_t)v13;
            v46 = v22;
            v23 = v44[0];
            v44[0] = v47;
            v47 = v23;
            __p = (void *)v22.i64[0];
            std::__split_buffer<applesauce::CF::TypeRefPair>::~__split_buffer((uint64_t)&__p);
          }
          else
          {
            applesauce::CF::TypeRefPair::TypeRefPair<std::string const&,float const&>(v13, (const UInt8 *)v12 + 32, (int *)v12 + 14);
            v13 += 2;
          }
          v43.i64[1] = (uint64_t)v13;
          v24 = (char *)v12[1];
          if (v24)
          {
            do
            {
              v25 = (char **)v24;
              v24 = *(char **)v24;
            }
            while (v24);
          }
          else
          {
            do
            {
              v25 = (char **)v12[2];
              v26 = *v25 == (char *)v12;
              v12 = (uint64_t *)v25;
            }
            while (!v26);
          }
          v12 = (uint64_t *)v25;
        }
        while (v25 != &v41);
      }
      CFDictionaryRef = applesauce::CF::details::make_CFDictionaryRef((void ***)&v43);
      __p = &v43;
      std::vector<applesauce::CF::TypeRefPair>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
      CFRetain(CFDictionaryRef);
      *(_QWORD *)__dst = CFDictionaryRef;
      if (CFDictionaryRef)
        CFRelease(CFDictionaryRef);
      std::__tree<std::__value_type<std::string,unsigned int>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned int>>>::destroy(v41);
      goto LABEL_85;
    case 70001:
      result = 0;
      v39 = *((float *)this + 161);
      goto LABEL_89;
    case 70002:
      result = 0;
      v39 = *((float *)this + 162);
      goto LABEL_89;
    case 70003:
      result = 0;
      v39 = *((float *)this + 170);
      goto LABEL_89;
    case 70004:
      result = 0;
      v39 = (float)*((int *)this + 171);
      goto LABEL_89;
    case 70005:
    case 70006:
    case 70007:
    case 70008:
    case 70009:
      return result;
    case 70010:
      v38 = (const void *)*((_QWORD *)this + 210);
      goto LABEL_84;
    case 70011:
      v38 = (const void *)*((_QWORD *)this + 88);
      goto LABEL_84;
    case 70012:
      v38 = (const void *)*((_QWORD *)this + 91);
      goto LABEL_84;
    case 70013:
      v38 = (const void *)*((_QWORD *)this + 184);
      goto LABEL_84;
    case 70014:
      v38 = (const void *)*((_QWORD *)this + 187);
LABEL_84:
      memcpy(__dst, v38, 4 * *((unsigned int *)this + 145));
      goto LABEL_85;
    default:
      if (a2 == 71000)
      {
        result = 0;
        v39 = *((float *)this + 172);
LABEL_89:
        *(float *)__dst = v39;
      }
      else if (a2 == 80000)
      {
        v43.i64[1] = 0;
        v44[0] = 0;
        v43.i64[0] = (uint64_t)&v43.i64[1];
        std::string::basic_string[abi:ne180100]<0>(&__p, "RawLoudness");
        p_p = &__p;
        v29 = (char *)(std::__tree<std::__value_type<std::string,std::vector<float>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<float>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<float>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)&v43, &__p, (_OWORD **)&p_p)+ 7);
        if (v29 != (char *)this + 704)
          std::vector<float>::__assign_with_size[abi:ne180100]<float const*,float const*>(v29, *((char **)this + 88), *((_QWORD *)this + 89), (uint64_t)(*((_QWORD *)this + 89) - *((_QWORD *)this + 88)) >> 2);
        if (v46.i8[15] < 0)
          operator delete(__p);
        std::string::basic_string[abi:ne180100]<0>(&__p, "NormLoudness");
        p_p = &__p;
        v30 = (char *)(std::__tree<std::__value_type<std::string,std::vector<float>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<float>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<float>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)&v43, &__p, (_OWORD **)&p_p)+ 7);
        if (v30 != (char *)this + 728)
          std::vector<float>::__assign_with_size[abi:ne180100]<float const*,float const*>(v30, *((char **)this + 91), *((_QWORD *)this + 92), (uint64_t)(*((_QWORD *)this + 92) - *((_QWORD *)this + 91)) >> 2);
        if (v46.i8[15] < 0)
          operator delete(__p);
        std::string::basic_string[abi:ne180100]<0>(&__p, "LoudnessPercentile");
        p_p = &__p;
        v31 = (char *)(std::__tree<std::__value_type<std::string,std::vector<float>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<float>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<float>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)&v43, &__p, (_OWORD **)&p_p)+ 7);
        if (v31 != (char *)this + 1472)
          std::vector<float>::__assign_with_size[abi:ne180100]<float const*,float const*>(v31, *((char **)this + 184), *((_QWORD *)this + 185), (uint64_t)(*((_QWORD *)this + 185) - *((_QWORD *)this + 184)) >> 2);
        if (v46.i8[15] < 0)
          operator delete(__p);
        std::string::basic_string[abi:ne180100]<0>(&__p, "Audibility");
        p_p = &__p;
        v32 = (char *)(std::__tree<std::__value_type<std::string,std::vector<float>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<float>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<float>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)&v43, &__p, (_OWORD **)&p_p)+ 7);
        if (v32 != (char *)this + 1496)
          std::vector<float>::__assign_with_size[abi:ne180100]<float const*,float const*>(v32, *((char **)this + 187), *((_QWORD *)this + 188), (uint64_t)(*((_QWORD *)this + 188) - *((_QWORD *)this + 187)) >> 2);
        if (v46.i8[15] < 0)
          operator delete(__p);
        std::string::basic_string[abi:ne180100]<0>(&__p, "Levels");
        p_p = &__p;
        v33 = (char *)(std::__tree<std::__value_type<std::string,std::vector<float>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<float>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<float>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)&v43, &__p, (_OWORD **)&p_p)+ 7);
        if (v33 != (char *)this + 1680)
          std::vector<float>::__assign_with_size[abi:ne180100]<float const*,float const*>(v33, *((char **)this + 210), *((_QWORD *)this + 211), (uint64_t)(*((_QWORD *)this + 211) - *((_QWORD *)this + 210)) >> 2);
        if (v46.i8[15] < 0)
          operator delete(__p);
        __p = 0;
        v46 = 0uLL;
        std::vector<applesauce::CF::TypeRefPair>::reserve(&__p, v44[0]);
        v34 = (const UInt8 *)v43.i64[0];
        if ((unint64_t *)v43.i64[0] != &v43.u64[1])
        {
          do
          {
            std::vector<applesauce::CF::TypeRefPair>::emplace_back<std::string const&,std::vector<float> const&>(&__p, v34 + 32, (_QWORD *)v34 + 7);
            v35 = (unint64_t *)*((_QWORD *)v34 + 1);
            if (v35)
            {
              do
              {
                v36 = v35;
                v35 = (unint64_t *)*v35;
              }
              while (v35);
            }
            else
            {
              do
              {
                v36 = (unint64_t *)*((_QWORD *)v34 + 2);
                v26 = *v36 == (_QWORD)v34;
                v34 = (const UInt8 *)v36;
              }
              while (!v26);
            }
            v34 = (const UInt8 *)v36;
          }
          while (v36 != &v43.u64[1]);
        }
        v37 = applesauce::CF::details::make_CFDictionaryRef((void ***)&__p);
        p_p = &__p;
        std::vector<applesauce::CF::TypeRefPair>::__destroy_vector::operator()[abi:ne180100](&p_p);
        v44[2] = (unint64_t)v37;
        CFRetain(v37);
        *(_QWORD *)__dst = v37;
        if (v37)
          CFRelease(v37);
        std::__tree<std::__value_type<std::string,std::vector<float>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<float>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<float>>>>::destroy((_QWORD *)v43.i64[1]);
LABEL_85:
        result = 0;
      }
      break;
  }
  return result;
}

void sub_1B6479DAC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, _QWORD *a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  applesauce::CF::DictionaryRef::~DictionaryRef((const void **)&a17);
  std::__tree<std::__value_type<std::string,std::vector<float>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<float>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<float>>>>::destroy(a14);
  _Unwind_Resume(a1);
}

uint64_t AULoudnessInNoise::SetProperty(AULoudnessInNoise *this, int a2, int a3, unsigned int a4, const __CFDictionary **a5, unsigned int a6)
{
  uint64_t result;
  NSObject *v9;
  const __CFDictionary *v10;
  const __CFNumber *Value;
  NSObject *v12;
  const __CFNumber *v13;
  NSObject *v14;
  const __CFNumber *v15;
  NSObject *v16;
  unint64_t v17;
  char **v18;
  std::string *v19;
  __int128 v20;
  const char *v21;
  CFStringRef v22;
  const __CFDictionary *v23;
  NSObject *v24;
  void **v25;
  NSObject *v26;
  void **v27;
  NSObject *v28;
  NSObject *v29;
  NSObject *v30;
  CAXException *exception;
  NSObject *v32;
  CAXException *v33;
  NSObject *v34;
  CAXException *v35;
  CAXException *v36;
  void *__p[2];
  int64_t v38;
  int v39;
  int v40;
  unsigned int valuePtr;
  _BYTE buf[12];
  __int16 v43;
  int v44;
  __int16 v45;
  void **v46;
  uint64_t v47;

  v47 = *MEMORY[0x1E0C80C00];
  if (a3)
    return 4294956417;
  if (a2 == 4000)
  {
    if (AULINNLogScope(void)::once != -1)
      dispatch_once(&AULINNLogScope(void)::once, &__block_literal_global_16760);
    if (AULINNLogScope(void)::scope)
    {
      v9 = *(NSObject **)AULINNLogScope(void)::scope;
      if (!*(_QWORD *)AULINNLogScope(void)::scope)
        goto LABEL_20;
    }
    else
    {
      v9 = MEMORY[0x1E0C81028];
    }
    if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136315650;
      *(_QWORD *)&buf[4] = "AULoudnessInNoise.cpp";
      v43 = 1024;
      v44 = 1171;
      v45 = 1024;
      LODWORD(v46) = 4000;
      _os_log_impl(&dword_1B5ED0000, v9, OS_LOG_TYPE_INFO, "%25s:%-5d Setting property DATA (prop id: %d).", buf, 0x18u);
    }
LABEL_20:
    if (a5)
    {
      v10 = *a5;
      valuePtr = 0;
      Value = (const __CFNumber *)CFDictionaryGetValue(v10, CFSTR("SampleRate"));
      if (!CFNumberGetValue(Value, kCFNumberIntType, &valuePtr))
      {
        if (AULINNLogScope(void)::once != -1)
          dispatch_once(&AULINNLogScope(void)::once, &__block_literal_global_16760);
        if (AULINNLogScope(void)::scope)
        {
          if ((*(_BYTE *)(AULINNLogScope(void)::scope + 8) & 1) != 0)
          {
            v30 = *(NSObject **)AULINNLogScope(void)::scope;
            if (*(_QWORD *)AULINNLogScope(void)::scope)
            {
              if (os_log_type_enabled(*(os_log_t *)AULINNLogScope(void)::scope, OS_LOG_TYPE_DEBUG))
              {
                *(_DWORD *)buf = 136315394;
                *(_QWORD *)&buf[4] = "AULoudnessInNoise.cpp";
                v43 = 1024;
                v44 = 1005;
                _os_log_impl(&dword_1B5ED0000, v30, OS_LOG_TYPE_DEBUG, "%25s:%-5d Failed to retrieve sample rate.\n", buf, 0x12u);
              }
            }
          }
        }
        exception = (CAXException *)__cxa_allocate_exception(0x110uLL);
        CAXException::CAXException(exception, "Failed to retrieve sample rate from input dictionary.", -1);
      }
      if (AULINNLogScope(void)::once != -1)
        dispatch_once(&AULINNLogScope(void)::once, &__block_literal_global_16760);
      if (AULINNLogScope(void)::scope)
      {
        if ((*(_BYTE *)(AULINNLogScope(void)::scope + 8) & 1) != 0)
        {
          v12 = *(NSObject **)AULINNLogScope(void)::scope;
          if (*(_QWORD *)AULINNLogScope(void)::scope)
          {
            if (os_log_type_enabled(*(os_log_t *)AULINNLogScope(void)::scope, OS_LOG_TYPE_DEBUG))
            {
              *(_DWORD *)buf = 136315650;
              *(_QWORD *)&buf[4] = "AULoudnessInNoise.cpp";
              v43 = 1024;
              v44 = 1003;
              v45 = 1024;
              LODWORD(v46) = valuePtr;
              _os_log_impl(&dword_1B5ED0000, v12, OS_LOG_TYPE_DEBUG, "%25s:%-5d Successfully retrieved sample rate (%iHz).\n", buf, 0x18u);
            }
          }
        }
      }
      if (*((float *)this + 146) != (float)valuePtr)
        return 4294956417;
      v40 = -1;
      v13 = (const __CFNumber *)CFDictionaryGetValue(v10, CFSTR("HearingThreshold"));
      if (!CFNumberGetValue(v13, kCFNumberIntType, &v40))
      {
        if (AULINNLogScope(void)::once != -1)
          dispatch_once(&AULINNLogScope(void)::once, &__block_literal_global_16760);
        if (AULINNLogScope(void)::scope)
        {
          if ((*(_BYTE *)(AULINNLogScope(void)::scope + 8) & 1) != 0)
          {
            v32 = *(NSObject **)AULINNLogScope(void)::scope;
            if (*(_QWORD *)AULINNLogScope(void)::scope)
            {
              if (os_log_type_enabled(*(os_log_t *)AULINNLogScope(void)::scope, OS_LOG_TYPE_DEBUG))
              {
                *(_DWORD *)buf = 136315394;
                *(_QWORD *)&buf[4] = "AULoudnessInNoise.cpp";
                v43 = 1024;
                v44 = 1023;
                _os_log_impl(&dword_1B5ED0000, v32, OS_LOG_TYPE_DEBUG, "%25s:%-5d Failed to retrieve Microphone Sensitivity/Hearing Threshold !\n", buf, 0x12u);
              }
            }
          }
        }
        v33 = (CAXException *)__cxa_allocate_exception(0x110uLL);
        CAXException::CAXException(v33, "Failed to retrieve Microphone Sensitivity/Hearing Threshold from input dictionary !", -1);
      }
      if (AULINNLogScope(void)::once != -1)
        dispatch_once(&AULINNLogScope(void)::once, &__block_literal_global_16760);
      if (AULINNLogScope(void)::scope)
      {
        if ((*(_BYTE *)(AULINNLogScope(void)::scope + 8) & 1) != 0)
        {
          v14 = *(NSObject **)AULINNLogScope(void)::scope;
          if (*(_QWORD *)AULINNLogScope(void)::scope)
          {
            if (os_log_type_enabled(*(os_log_t *)AULINNLogScope(void)::scope, OS_LOG_TYPE_DEBUG))
            {
              *(_DWORD *)buf = 136315650;
              *(_QWORD *)&buf[4] = "AULoudnessInNoise.cpp";
              v43 = 1024;
              v44 = 1019;
              v45 = 1024;
              LODWORD(v46) = v40;
              _os_log_impl(&dword_1B5ED0000, v14, OS_LOG_TYPE_DEBUG, "%25s:%-5d Successfully retrieved Microphone Sensitivity/Hearing Threshold (%d) dB.\n", buf, 0x18u);
            }
          }
        }
      }
      *((float *)this + 135) = (float)v40;
      *((_DWORD *)this + 174) = 1014887350;
      v39 = 0;
      v15 = (const __CFNumber *)CFDictionaryGetValue(v10, CFSTR("nRefLevs"));
      if (!CFNumberGetValue(v15, kCFNumberIntType, &v39))
      {
        if (AULINNLogScope(void)::once != -1)
          dispatch_once(&AULINNLogScope(void)::once, &__block_literal_global_16760);
        if (AULINNLogScope(void)::scope)
        {
          if ((*(_BYTE *)(AULINNLogScope(void)::scope + 8) & 1) != 0)
          {
            v34 = *(NSObject **)AULINNLogScope(void)::scope;
            if (*(_QWORD *)AULINNLogScope(void)::scope)
            {
              if (os_log_type_enabled(*(os_log_t *)AULINNLogScope(void)::scope, OS_LOG_TYPE_DEBUG))
              {
                *(_DWORD *)buf = 136315394;
                *(_QWORD *)&buf[4] = "AULoudnessInNoise.cpp";
                v43 = 1024;
                v44 = 1050;
                _os_log_impl(&dword_1B5ED0000, v34, OS_LOG_TYPE_DEBUG, "%25s:%-5d Failed to retrieve number of Ref Levels.\n", buf, 0x12u);
              }
            }
          }
        }
        v35 = (CAXException *)__cxa_allocate_exception(0x110uLL);
        CAXException::CAXException(v35, "Failed to retrieve number of Levels from input dictionary.", -1);
      }
      if (AULINNLogScope(void)::once != -1)
        dispatch_once(&AULINNLogScope(void)::once, &__block_literal_global_16760);
      if (AULINNLogScope(void)::scope)
      {
        if ((*(_BYTE *)(AULINNLogScope(void)::scope + 8) & 1) != 0)
        {
          v16 = *(NSObject **)AULINNLogScope(void)::scope;
          if (*(_QWORD *)AULINNLogScope(void)::scope)
          {
            if (os_log_type_enabled(*(os_log_t *)AULINNLogScope(void)::scope, OS_LOG_TYPE_DEBUG))
            {
              *(_DWORD *)buf = 136315650;
              *(_QWORD *)&buf[4] = "AULoudnessInNoise.cpp";
              v43 = 1024;
              v44 = 1048;
              v45 = 1024;
              LODWORD(v46) = v39;
              _os_log_impl(&dword_1B5ED0000, v16, OS_LOG_TYPE_DEBUG, "%25s:%-5d Successfully retrieved number of Ref Levels (%i).\n", buf, 0x18u);
            }
          }
        }
      }
      if (*((_DWORD *)this + 145) > 0x1Eu)
      {
        v36 = (CAXException *)__cxa_allocate_exception(0x110uLL);
        CAXException::CAXException(v36, "Too many Reference Spectrums.", -1);
      }
      *((_DWORD *)this + 145) = v39;
      AULoudnessInNoise::ReadVectorFromDictionary(v10, CFSTR("RefLevels"), (char **)this + 210);
      AULoudnessInNoise::ReadVectorFromDictionary(v10, CFSTR("DecisionThresholds"), (char **)this + 408);
      AULoudnessInNoise::ReadVectorFromDictionary(v10, CFSTR("spreadingMatrixSmall"), (char **)this + 399);
      AULoudnessInNoise::ReadUInt32VectorFromDictionary(v10, CFSTR("spread_left_UInt32"), (std::vector<unsigned int> *)this + 134);
      AULoudnessInNoise::ReadUInt32VectorFromDictionary(v10, CFSTR("spreadingMatrixSmall_Lengths_UInt32"), (std::vector<unsigned int> *)this + 135);
      AULoudnessInNoise::ReadVectorFromDictionary(v10, CFSTR("Mic2ErpTx"), (char **)this + 213);
      AULoudnessInNoise::ReadVectorFromDictionary(v10, CFSTR("FreqWeight"), (char **)this + 306);
      if (*((_DWORD *)this + 145))
      {
        v17 = 0;
        v18 = (char **)((char *)this + 1728);
        do
        {
          std::to_string((std::string *)buf, *(float *)(*((_QWORD *)this + 210) + 4 * v17));
          v19 = std::string::insert((std::string *)buf, 0, "lev", 3uLL);
          v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
          v38 = v19->__r_.__value_.__r.__words[2];
          *(_OWORD *)__p = v20;
          v19->__r_.__value_.__l.__size_ = 0;
          v19->__r_.__value_.__r.__words[2] = 0;
          v19->__r_.__value_.__r.__words[0] = 0;
          if (SBYTE3(v46) < 0)
            operator delete(*(void **)buf);
          v21 = v38 >= 0 ? (const char *)__p : (const char *)__p[0];
          v22 = CFStringCreateWithCString(0, v21, 0x8000100u);
          v23 = (const __CFDictionary *)CFDictionaryGetValue(v10, v22);
          if (v23)
          {
            if (AULINNLogScope(void)::once != -1)
              dispatch_once(&AULINNLogScope(void)::once, &__block_literal_global_16760);
            if (AULINNLogScope(void)::scope)
            {
              if ((*(_BYTE *)(AULINNLogScope(void)::scope + 8) & 1) != 0)
              {
                v24 = *(NSObject **)AULINNLogScope(void)::scope;
                if (*(_QWORD *)AULINNLogScope(void)::scope)
                {
                  if (os_log_type_enabled(*(os_log_t *)AULINNLogScope(void)::scope, OS_LOG_TYPE_DEBUG))
                  {
                    if (v38 >= 0)
                      v25 = __p;
                    else
                      v25 = (void **)__p[0];
                    *(_DWORD *)buf = 136315650;
                    *(_QWORD *)&buf[4] = "AULoudnessInNoise.cpp";
                    v43 = 1024;
                    v44 = 1106;
                    v45 = 2080;
                    v46 = v25;
                    _os_log_impl(&dword_1B5ED0000, v24, OS_LOG_TYPE_DEBUG, "%25s:%-5d Found the dictionary: %s\n", buf, 0x1Cu);
                  }
                }
              }
            }
            CFRelease(v22);
            AULoudnessInNoise::ReadVectorFromDictionary(v23, CFSTR("RefSpecAtRefMic"), v18 + 93);
            AULoudnessInNoise::ReadVectorFromDictionary(v23, CFSTR("RefSpecSpreadAtErp"), v18);
            if (AULoudnessInNoise::ReadVectorFromDictionary(v23, CFSTR("DecisionThresholdsMixed"), v18 + 195))v18[196] = v18[195];
          }
          else
          {
            if (AULINNLogScope(void)::once != -1)
              dispatch_once(&AULINNLogScope(void)::once, &__block_literal_global_16760);
            if (AULINNLogScope(void)::scope)
            {
              if ((*(_BYTE *)(AULINNLogScope(void)::scope + 8) & 1) != 0)
              {
                v26 = *(NSObject **)AULINNLogScope(void)::scope;
                if (*(_QWORD *)AULINNLogScope(void)::scope)
                {
                  if (os_log_type_enabled(*(os_log_t *)AULINNLogScope(void)::scope, OS_LOG_TYPE_DEBUG))
                  {
                    if (v38 >= 0)
                      v27 = __p;
                    else
                      v27 = (void **)__p[0];
                    *(_DWORD *)buf = 136315650;
                    *(_QWORD *)&buf[4] = "AULoudnessInNoise.cpp";
                    v43 = 1024;
                    v44 = 1100;
                    v45 = 2080;
                    v46 = v27;
                    _os_log_impl(&dword_1B5ED0000, v26, OS_LOG_TYPE_DEBUG, "%25s:%-5d Missing dictionary: %s\n", buf, 0x1Cu);
                  }
                }
              }
            }
            CFRelease(v22);
          }
          if (SHIBYTE(v38) < 0)
            operator delete(__p[0]);
          if (!v23)
            return 4294956417;
          ++v17;
          v18 += 3;
        }
        while (v17 < *((unsigned int *)this + 145));
      }
      if (AULoudnessInNoise::Validate_Level_Spreading_PropertyRelatedValues(this))
        return 4294956417;
      *((_BYTE *)this + 1624) = 1;
      if (AULINNLogScope(void)::once != -1)
        dispatch_once(&AULINNLogScope(void)::once, &__block_literal_global_16760);
      if (AULINNLogScope(void)::scope)
      {
        v29 = *(NSObject **)AULINNLogScope(void)::scope;
        if (!*(_QWORD *)AULINNLogScope(void)::scope)
          return 0;
      }
      else
      {
        v29 = MEMORY[0x1E0C81028];
      }
      result = os_log_type_enabled(v29, OS_LOG_TYPE_INFO);
      if (!(_DWORD)result)
        return result;
      *(_DWORD *)buf = 136315394;
      *(_QWORD *)&buf[4] = "AULoudnessInNoise.cpp";
      v43 = 1024;
      v44 = 1183;
      _os_log_impl(&dword_1B5ED0000, v29, OS_LOG_TYPE_INFO, "%25s:%-5d Linn Data successfully set.", buf, 0x12u);
      return 0;
    }
    if (AULINNLogScope(void)::once != -1)
      dispatch_once(&AULINNLogScope(void)::once, &__block_literal_global_16760);
    if (AULINNLogScope(void)::scope)
    {
      v28 = *(NSObject **)AULINNLogScope(void)::scope;
      if (!*(_QWORD *)AULINNLogScope(void)::scope)
        return 4294956445;
    }
    else
    {
      v28 = MEMORY[0x1E0C81028];
    }
    if (os_log_type_enabled(v28, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      *(_QWORD *)&buf[4] = "AULoudnessInNoise.cpp";
      v43 = 1024;
      v44 = 1174;
      _os_log_impl(&dword_1B5ED0000, v28, OS_LOG_TYPE_ERROR, "%25s:%-5d The CFDictionaryRef passed to SetProperty is null.", buf, 0x12u);
    }
    return 4294956445;
  }
  if (a2 != 3700)
  {
    if (a2 == 21)
    {
      result = 0;
      *((_BYTE *)this + 577) = *(_DWORD *)a5 != 0;
      return result;
    }
    return 4294956417;
  }
  result = 4294956445;
  if (a6 >= 4)
  {
    if (*(_BYTE *)a5)
      return 0;
    else
      return 4294956445;
  }
  return result;
}

void sub_1B647AA0C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  void *v25;

  __cxa_free_exception(v25);
  _Unwind_Resume(a1);
}

uint64_t AULoudnessInNoise::SetParameter(AULoudnessInNoise *this, unsigned int a2, unsigned int a3, unsigned int a4, float a5)
{
  ausdk::AUScope *Scope;
  ausdk::AUElement *Element;
  char *v10;
  uint64_t v11;
  ausdk::AUElement **v12;

  if (a3)
  {
    Scope = (ausdk::AUScope *)ausdk::AUBase::GetScope(this, a3);
    Element = (ausdk::AUElement *)ausdk::AUScope::SafeGetElement(Scope, a4);
    goto LABEL_15;
  }
  if (*((_BYTE *)this + 17))
  {
    if (a2 > 0xC)
    {
      if (a2 != 32 && a2 != 30)
        goto LABEL_10;
      v10 = (char *)this + 568;
    }
    else
    {
      v10 = (char *)this + 560;
    }
    ++*(_DWORD *)v10;
  }
LABEL_10:
  v11 = *((_QWORD *)this + 9);
  if (v11)
  {
    Element = (ausdk::AUElement *)(*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)v11 + 32))(*((_QWORD *)this + 9), 0);
  }
  else
  {
    v12 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v12)
      Element = 0;
    else
      Element = *v12;
  }
LABEL_15:
  ausdk::AUElement::SetParameter(Element, a2, a5, 0);
  return 0;
}

uint64_t AULoudnessInNoise::CanScheduleParameters(AULoudnessInNoise *this)
{
  return 0;
}

uint64_t AULoudnessInNoise::ProcessMultipleBufferLists(AULoudnessInNoise *this, unsigned int *a2, int a3, unsigned int a4, const AudioBufferList **a5, unsigned int a6, AudioBufferList **a7)
{
  int v9;
  int v10;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  char v14;
  float v15;
  float v16;
  uint64_t v17;
  char v18;
  float v19;
  uint64_t v20;
  float v21;
  float v22;
  float v23;
  void *mData;
  void *v25;
  void *v26;
  unsigned int v27;
  unsigned int v28;
  float *realp;
  vDSP_Length v30;
  float *v31;
  unsigned int v32;
  BOOL v33;
  vDSP_Length v34;
  float v35;
  uint64_t v36;
  unsigned int v37;
  float v38;
  float v39;
  float v40;
  float v41;
  vDSP_Length v42;
  int v43;
  unsigned int v44;
  unsigned int v45;
  size_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  unsigned int v50;
  float v51;
  uint64_t v52;
  const float *v53;
  vDSP_Length v54;
  unsigned int v55;
  vDSP_Length v56;
  vDSP_Length v57;
  float v58;
  int v59;
  unint64_t v60;
  unint64_t v61;
  float *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  float *v66;
  float *v67;
  float v68;
  unsigned int v69;
  vDSP_Length v70;
  float *v71;
  unsigned int v72;
  int v73;
  int v74;
  unint64_t v75;
  unint64_t v76;
  uint64_t v77;
  unint64_t v78;
  uint64_t *v79;
  int *v80;
  int v81;
  int v82;
  uint64_t v83;
  float **v84;
  int v85;
  int v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  char *v90;
  float *v91;
  uint64_t v92;
  float *v93;
  float *v94;
  float v95;
  float v96;
  float v97;
  float v98;
  float __B;
  DSPSplitComplex __C;
  float v101;
  float v102;

  if (*((_DWORD *)this + 84) != a3)
    return 4294956422;
  v9 = *((_DWORD *)this + 140);
  if (*((_DWORD *)this + 141) != v9)
  {
    AULoudnessInNoise::InitializeInternals(this);
    *((_DWORD *)this + 141) = v9;
  }
  v10 = *((_DWORD *)this + 142);
  if (*((_DWORD *)this + 143) != v10)
  {
    AULoudnessInNoise::UpdateDynParams(this);
    *((_DWORD *)this + 143) = v10;
  }
  if (*((_BYTE *)this + 577))
    return 0;
  *((_DWORD *)this + 173) = 0;
  v12 = (*((_DWORD *)this + 145) - 1);
  if (!*((_DWORD *)this + 138))
  {
    if (*((_DWORD *)this + 145) == 1)
      goto LABEL_27;
    v17 = 0;
    v18 = 0;
    v19 = *((float *)this + 172);
    v20 = *((_QWORD *)this + 210);
    v21 = 0.0;
    while (1)
    {
      v22 = *(float *)(v20 + 4 * v17);
      if (v19 >= v22)
      {
        if ((v18 & 1) == 0)
        {
          *((_DWORD *)this + 173) = v17;
          v21 = v19 - v22;
LABEL_25:
          v18 = 1;
          goto LABEL_26;
        }
        v23 = v19 - v22;
        if (v23 >= v21)
          goto LABEL_25;
        *((_DWORD *)this + 173) = v17;
        v18 = 1;
        v21 = v23;
      }
LABEL_26:
      if (v12 == ++v17)
        goto LABEL_27;
    }
  }
  if (*((_DWORD *)this + 145) != 1)
  {
    v13 = 0;
    v14 = 0;
    v15 = 0.0;
    do
    {
      if ((v14 & 1) != 0)
      {
        v16 = vabds_f32(*((float *)this + 172), *(float *)(*((_QWORD *)this + 210) + 4 * v13));
        if (v16 < v15)
        {
          *((_DWORD *)this + 173) = v13;
          v15 = v16;
        }
      }
      else
      {
        *((_DWORD *)this + 173) = v13;
        v15 = vabds_f32(*((float *)this + 172), *(float *)(*((_QWORD *)this + 210) + 4 * v13));
      }
      ++v13;
      v14 = 1;
    }
    while (v12 != v13);
  }
LABEL_27:
  mData = (*a5)->mBuffers[0].mData;
  v25 = a5[1]->mBuffers[0].mData;
  v26 = a5[2]->mBuffers[0].mData;
  memcpy(*((void **)this + 191), mData, 4 * *((unsigned int *)this + 148));
  memcpy(*((void **)this + 194), v25, 4 * *((unsigned int *)this + 148));
  memcpy(*((void **)this + 197), v26, 4 * *((unsigned int *)this + 148));
  vDSP_vsmul(*((const float **)this + 191), 1, (const float *)this + 156, *((float **)this + 191), 1, *((unsigned int *)this + 148));
  vDSP_vsmul(*((const float **)this + 194), 1, (const float *)this + 156, *((float **)this + 194), 1, *((unsigned int *)this + 148));
  vDSP_vsmul(*((const float **)this + 197), 1, (const float *)this + 156, *((float **)this + 197), 1, *((unsigned int *)this + 148));
  *((_BYTE *)this + 600) = 0;
  v27 = *((_DWORD *)this + 152);
  if (v27)
  {
    if (v27 == 1)
      goto LABEL_38;
    LODWORD(__C.realp) = -1013579776;
    v102 = -300.0;
    if (v27 <= 6 && ((1 << v27) & 0x54) != 0)
    {
      vDSP_svesq(*((const float **)this + 194), 1, (float *)&__C, *((unsigned int *)this + 148));
      *(float *)&__C.realp = log10f((float)(*(float *)&__C.realp / (float)*((unsigned int *)this + 147)) + 1.0e-20)
                           * 10.0;
      if (*(float *)&__C.realp >= *((float *)this + 154))
        *((_BYTE *)this + 600) = 1;
    }
    v28 = *((_DWORD *)this + 152);
    if (v28 <= 6 && ((1 << v28) & 0x68) != 0)
    {
      vDSP_svesq(*((const float **)this + 197), 1, &v102, *((unsigned int *)this + 148));
      if ((float)(log10f((float)(v102 / (float)*((unsigned int *)this + 147)) + 1.0e-20) * 10.0) >= *((float *)this + 155))
        *((_BYTE *)this + 600) = 1;
    }
    if ((*((_DWORD *)this + 152) - 4) <= 2)
    {
LABEL_38:
      if (*((float *)this + 151) >= *((float *)this + 153))
        *((_BYTE *)this + 600) = 1;
    }
  }
  if (*((_DWORD *)this + 136) == 1)
  {
    *((_DWORD *)this + 380) = 0;
    *((_DWORD *)this + 381) = *((_DWORD *)this + 145);
  }
  if (*((_BYTE *)this + 600))
    goto LABEL_102;
  __B = 0.0;
  v30 = *((unsigned int *)this + 147);
  v31 = (float *)*((_QWORD *)this + 200);
  __C.realp = (float *)*((_QWORD *)this + 191);
  realp = __C.realp;
  __C.imagp = &__C.realp[v30];
  vDSP_zvmags(&__C, 1, v31, 1, v30);
  *v31 = *realp * *realp;
  v31[v30] = realp[v30] * realp[v30];
  memcpy(*((void **)this + 501), *((const void **)this + 200), 4 * *((unsigned int *)this + 149));
  *(float *)&__C.realp = 1.0 - *((float *)this + 408);
  vDSP_vsmul(*((const float **)this + 501), 1, (const float *)&__C, *((float **)this + 501), 1, *((unsigned int *)this + 149));
  vDSP_vsmul(*((const float **)this + 525), 1, (const float *)this + 408, *((float **)this + 525), 1, *((unsigned int *)this + 149));
  vDSP_vadd(*((const float **)this + 501), 1, *((const float **)this + 525), 1, *((float **)this + 501), 1, *((unsigned int *)this + 149));
  memcpy(*((void **)this + 525), *((const void **)this + 501), 4 * *((unsigned int *)this + 149));
  vDSP_vsub(*((const float **)this + 3 * *((unsigned int *)this + 173) + 309), 1, *((const float **)this + 501), 1, *((float **)this + 528), 1, *((unsigned int *)this + 149));
  vDSP_vthr(*((const float **)this + 528), 1, &__B, *((float **)this + 507), 1, *((unsigned int *)this + 149));
  vDSP_vmul(*((const float **)this + 507), 1, *((const float **)this + 213), 1, *((float **)this + 510), 1, *((unsigned int *)this + 149));
  LODWORD(v30) = *((_DWORD *)this + 149);
  vDSP_vsmul(*((const float **)this + 510), 1, (const float *)this + 1068, *((float **)this + 537), 1, v30);
  *((_DWORD *)this + 1184) = fminf((float)(*((_DWORD *)this + 1184) + 1), floorf((float)(*((float *)this + 146) * 30.0) / (float)v30));
  ++*((_DWORD *)this + 1185);
  v32 = *((_DWORD *)this + 1071);
  v33 = 0;
  if (v32 <= 0x63)
  {
    *((_DWORD *)this + 1071) = v32 + 1;
    if (!v32)
      v33 = 1;
  }
  *((_BYTE *)this + 4288) = v33;
  v34 = *((unsigned int *)this + 149);
  v35 = 1.0 - *((float *)this + 1178);
  *(float *)&__C.realp = v35 * 0.333;
  v102 = v35 * 0.667;
  v36 = *((_QWORD *)this + 576);
  *(_DWORD *)v36 = 0;
  vDSP_vsmul(*((const float **)this + 537), 1, (const float *)&__C, (float *)(v36 + 4), 1, (v34 - 1));
  vDSP_vsma((const float *)(*((_QWORD *)this + 537) + 4), 1, (const float *)&__C, *((const float **)this + 576), 1, *((float **)this + 576), 1, (v34 - 1));
  vDSP_vsma(*((const float **)this + 537), 1, &v102, *((const float **)this + 576), 1, *((float **)this + 576), 1, v34);
  vDSP_vsma(*((const float **)this + 552), 1, (const float *)this + 1178, *((const float **)this + 576), 1, *((float **)this + 552), 1, v34);
  v37 = *((_DWORD *)this + 1184);
  if (v37 == 1)
  {
    vDSP_vclr(*((float **)this + 555), 1, v34);
    vDSP_vclr(*((float **)this + 558), 1, v34);
    v37 = *((_DWORD *)this + 1184);
  }
  v38 = *((float *)this + 146) / (float)v34;
  v39 = v38 * 0.5;
  v40 = roundf(v38 * 0.2);
  v41 = roundf(v38 + v38);
  if (v39 > (float)v37)
    v41 = v40;
  if (*((_DWORD *)this + 1185) > v41 || *((_BYTE *)this + 4288))
  {
    *((_DWORD *)this + 1185) = 0;
    vDSP_vmin(*((const float **)this + 558), 1, *((const float **)this + 552), 1, *((float **)this + 555), 1, v34);
    memcpy(*((void **)this + 558), *((const void **)this + 552), 4 * v34);
  }
  else
  {
    vDSP_vmin(*((const float **)this + 555), 1, *((const float **)this + 552), 1, *((float **)this + 555), 1, v34);
    vDSP_vmin(*((const float **)this + 558), 1, *((const float **)this + 552), 1, *((float **)this + 558), 1, v34);
  }
  v101 = 1.0e-20;
  vDSP_vsadd(*((const float **)this + 552), 1, &v101, *((float **)this + 576), 1, v34);
  vDSP_vsadd(*((const float **)this + 555), 1, &v101, *((float **)this + 579), 1, v34);
  vDSP_vdiv(*((const float **)this + 579), 1, *((const float **)this + 576), 1, *((float **)this + 561), 1, v34);
  vDSP_vmul(*((const float **)this + 555), 1, *((const float **)this + 573), 1, *((float **)this + 576), 1, v34);
  vDSP_vsub(*((const float **)this + 576), 1, *((const float **)this + 552), 1, *((float **)this + 564), 1, v34);
  v42 = *((unsigned int *)this + 149);
  *(float *)&__C.realp = 1.0 - *((float *)this + 1182);
  v102 = *((float *)this + 1181);
  v43 = *((_DWORD *)this + 1184);
  v44 = vcvtas_u32_f32((float)(*((float *)this + 146) / (float)v42) * 30.0);
  if (v43 + 1 < v44)
    v45 = v43 + 1;
  else
    v45 = v44;
  *((_DWORD *)this + 1184) = v45;
  ++*((_DWORD *)this + 1185);
  vDSP_vclr(*((float **)this + 576), 1, v42);
  vDSP_vclr(*((float **)this + 579), 1, v42);
  vDSP_vclr(*((float **)this + 570), 1, v42);
  vDSP_vsmul(*((const float **)this + 537), 1, (const float *)this + 1182, *((float **)this + 579), 1, v42);
  vDSP_vsma(*((const float **)this + 549), 1, (const float *)&__C, *((const float **)this + 579), 1, *((float **)this + 579), 1, v42);
  vDSP_vsmul(*((const float **)this + 555), 1, &v102, *((float **)this + 576), 1, v42);
  vDSP_vsub(*((const float **)this + 576), 1, *((const float **)this + 537), 1, *((float **)this + 567), 1, v42);
  vDSP_vmax(*((const float **)this + 567), 1, *((const float **)this + 564), 1, *((float **)this + 570), 1, v42);
  v46 = 4 * v42;
  if ((_DWORD)v42)
  {
    v47 = 0;
    v48 = *((_QWORD *)this + 570);
    do
    {
      if (*(float *)(v48 + v47) <= 0.0 && (v49 = (char *)this + 4296, !*((_DWORD *)this + 407))
        || (v49 = (char *)this + 4632,
            *(float *)(*((_QWORD *)this + 552) + v47) < (float)(*((float *)this + 1183)
                                                              * *(float *)(*((_QWORD *)this + 555) + v47))))
      {
        *(_DWORD *)(*((_QWORD *)this + 549) + v47) = *(_DWORD *)(*(_QWORD *)v49 + v47);
      }
      v47 += 4;
    }
    while (v46 != v47);
  }
  memcpy(*((void **)this + 543), *((const void **)this + 537), v46);
  vDSP_vsmul(*((const float **)this + 549), 1, (const float *)this + 1069, *((float **)this + 546), 1, v42);
  vDSP_sve(*((const float **)this + 546), 1, (float *)this + 175, *((unsigned int *)this + 149));
  v50 = *((_DWORD *)this + 149);
  v51 = log10((float)(*((float *)this + 175) / (float)v50) + 1.0e-20) * 10.0;
  *((float *)this + 175) = v51;
  v52 = *((_QWORD *)this + 546);
  v53 = (const float *)*((_QWORD *)this + 516);
  LODWORD(__C.realp) = 0;
  if (v50)
  {
    v54 = 0;
    v55 = 0;
    do
    {
      v56 = *(unsigned int *)(*((_QWORD *)this + 405) + 4 * v54);
      vDSP_vmul((const float *)(v52 + 4 * (*(_DWORD *)(*((_QWORD *)this + 402) + 4 * v54) - 1)), 1, (const float *)(*((_QWORD *)this + 399) + 4 * v55), 1, *((float **)this + 528), 1, v56);
      vDSP_sve(*((const float **)this + 528), 1, (float *)&__C, v56);
      v53[v54] = *(const float *)&__C.realp;
      v55 += v56;
      ++v54;
      v57 = *((unsigned int *)this + 149);
    }
    while (v54 < v57);
    v53 = (const float *)*((_QWORD *)this + 516);
  }
  else
  {
    v57 = 0;
  }
  vDSP_vsmul(v53, 1, (const float *)this + 410, *((float **)this + 519), 1, v57);
  vDSP_vmax(*((const float **)this + 531), 1, *((const float **)this + 519), 1, *((float **)this + 522), 1, *((unsigned int *)this + 149));
  v58 = AULoudnessInNoise::Loudness(this, *((_DWORD *)this + 173));
  *((float *)this + 161) = v58;
  v59 = *((_DWORD *)this + 136);
  if (v59 == 1)
  {
    v60 = *((unsigned int *)this + 380);
    v61 = *((unsigned int *)this + 381);
    if (v60 >= v61)
    {
      v62 = (float *)((char *)this + 696);
      *((float *)this + 162) = v58 / (float)(*((float *)this + 174) + 1.0e-20);
      v59 = 1;
LABEL_78:
      v63 = *((unsigned int *)this + 380);
      v64 = *((unsigned int *)this + 381);
      if (v63 < v64)
      {
        v65 = v64 - v63;
        v66 = (float *)(*((_QWORD *)this + 91) + 4 * v63);
        v67 = (float *)(*((_QWORD *)this + 88) + 4 * v63);
        do
        {
          v68 = *v67++;
          *v66++ = v68 / (float)(*v62 + 1.0e-20);
          --v65;
        }
        while (v65);
      }
      goto LABEL_81;
    }
    do
    {
      if (v60 == *((_DWORD *)this + 173))
      {
        *(_DWORD *)(*((_QWORD *)this + 88) + 4 * v60) = *((_DWORD *)this + 161);
      }
      else
      {
        *(float *)(*((_QWORD *)this + 88) + 4 * v60) = AULoudnessInNoise::Loudness(this, v60);
        v61 = *((unsigned int *)this + 381);
      }
      ++v60;
    }
    while (v60 < v61);
    v59 = *((_DWORD *)this + 136);
    *((float *)this + 162) = *((float *)this + 161) / (float)(*((float *)this + 174) + 1.0e-20);
    if (v59 == 1)
    {
      v62 = (float *)((char *)this + 696);
      goto LABEL_78;
    }
  }
  else
  {
    *((float *)this + 162) = v58 / (float)(*((float *)this + 174) + 1.0e-20);
  }
LABEL_81:
  v69 = *((_DWORD *)this + 416);
  v70 = *((unsigned int *)this + 415);
  if (v69 >= v70)
  {
    v69 = 0;
    *((_DWORD *)this + 416) = 0;
  }
  v71 = (float *)*((_QWORD *)this + 82);
  v71[v69] = *((float *)this + 162);
  v72 = v69 % v70;
  if (!(v69 % v70))
  {
    vDSP_vsort(v71, v70, 1);
    *((_DWORD *)this + 170) = *(_DWORD *)(*((_QWORD *)this + 82) + 4 * *((unsigned int *)this + 418));
    v73 = *((_DWORD *)this + 419);
    if ((v73 + 1) >> 8 <= 0x7C)
      v74 = v73 + 1;
    else
      v74 = 0;
    *((_DWORD *)this + 419) = v74;
    v59 = *((_DWORD *)this + 136);
  }
  if (v59 == 1)
  {
    v75 = *((unsigned int *)this + 380);
    v76 = *((unsigned int *)this + 381);
    if (v75 < v76)
    {
      v77 = *((unsigned int *)this + 416);
      v78 = v76 - v75;
      v79 = (uint64_t *)((char *)this + 24 * v75 + 752);
      v80 = (int *)(*((_QWORD *)this + 91) + 4 * v75);
      do
      {
        v81 = *v80++;
        v82 = v81;
        v83 = *v79;
        v79 += 3;
        *(_DWORD *)(v83 + 4 * v77) = v82;
        --v78;
      }
      while (v78);
      if (!v72)
      {
        v84 = (float **)((char *)this + 24 * v75 + 752);
        do
        {
          if (v75 == *((_DWORD *)this + 173))
          {
            *(_DWORD *)(*((_QWORD *)this + 184) + 4 * v75) = *((_DWORD *)this + 170);
          }
          else
          {
            vDSP_vsort(*v84, *((unsigned int *)this + 415), 1);
            *(float *)(*((_QWORD *)this + 184) + 4 * v75) = (*v84)[*((unsigned int *)this + 418)];
            v76 = *((unsigned int *)this + 381);
          }
          ++v75;
          v84 += 3;
        }
        while (v75 < v76);
      }
    }
  }
  v85 = *((_DWORD *)this + 416);
  if ((v85 + 1) % *((_DWORD *)this + 415))
    v86 = v85 + 1;
  else
    v86 = 0;
  *((_DWORD *)this + 416) = v86;
LABEL_102:
  v87 = *((unsigned int *)this + 173);
  *((_DWORD *)this + 171) = 2 * (*((float *)this + 170) >= *(float *)(*((_QWORD *)this + 408) + 4 * v87));
  if (*((_DWORD *)this + 136) == 1)
  {
    v88 = *((unsigned int *)this + 380);
    v89 = *((unsigned int *)this + 381);
    if (v88 < v89)
    {
      v90 = (char *)this + 24 * v87;
      v91 = (float *)(*((_QWORD *)this + 187) + 4 * v88);
      v92 = v89 - v88;
      v93 = (float *)(*((_QWORD *)v90 + 411) + 4 * v88);
      v94 = (float *)(*((_QWORD *)this + 184) + 4 * v88);
      do
      {
        v95 = *v94++;
        v96 = v95;
        v97 = *v93++;
        if (v96 >= v97)
          v98 = 2.0;
        else
          v98 = 0.0;
        *v91++ = v98;
        --v92;
      }
      while (v92);
    }
  }
  AULoudnessInNoise::UpdateOutputParams(this);
  result = 0;
  ++*((_DWORD *)this + 1186);
  return result;
}

uint64_t AULoudnessInNoise::Render(AULoudnessInNoise *this, unsigned int *a2, const AudioTimeStamp *a3, uint64_t a4)
{
  uint64_t Element;
  ausdk::AUInputElement *v9;
  uint64_t result;
  uint64_t v11;
  uint64_t BufferList;
  unsigned int v13;
  ausdk::AUInputElement *v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  ausdk::AUInputElement *v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD v21[4];

  v21[3] = *MEMORY[0x1E0C80C00];
  if (*((_DWORD *)this + 84) != (_DWORD)a4)
    return 4294956422;
  Element = ausdk::AUScope::SafeGetElement((AULoudnessInNoise *)((char *)this + 128), 0);
  if (!ausdk::AUBase::HasInput(this, 0))
    return 4294956420;
  v9 = (ausdk::AUInputElement *)ausdk::AUScope::SafeGetElement((AULoudnessInNoise *)((char *)this + 80), 0);
  result = ausdk::AUInputElement::PullInput(v9, a2, a3, 0, a4);
  if (!(_DWORD)result)
  {
    v11 = ausdk::AUScope::SafeGetElement((AULoudnessInNoise *)((char *)this + 80), 0);
    BufferList = ausdk::AUBufferList::GetBufferList((ausdk::AUBufferList *)(v11 + 144));
    v13 = 0;
    if (!ausdk::AUBase::HasInput(this, 1u)
      || (v13 = 1,
          v14 = (ausdk::AUInputElement *)ausdk::AUScope::SafeGetElement((AULoudnessInNoise *)((char *)this + 80), 1u),
          result = ausdk::AUInputElement::PullInput(v14, a2, a3, 1, a4),
          !(_DWORD)result))
    {
      v15 = ausdk::AUScope::SafeGetElement((AULoudnessInNoise *)((char *)this + 80), v13);
      v16 = ausdk::AUBufferList::GetBufferList((ausdk::AUBufferList *)(v15 + 144));
      if (!ausdk::AUBase::HasInput(this, 2u))
      {
        v17 = 0;
LABEL_13:
        v19 = ausdk::AUScope::SafeGetElement((AULoudnessInNoise *)((char *)this + 80), v17);
        ausdk::AUBufferList::GetBufferList((ausdk::AUBufferList *)(v19 + 144));
        v21[0] = BufferList;
        v21[1] = v16;
        v21[2] = v16;
        v20 = ausdk::AUBufferList::GetBufferList((ausdk::AUBufferList *)(Element + 144));
        return (*(uint64_t (**)(AULoudnessInNoise *, unsigned int *, uint64_t, uint64_t, _QWORD *, uint64_t, uint64_t *))(*(_QWORD *)this + 184))(this, a2, a4, 3, v21, 1, &v20);
      }
      v17 = 2;
      v18 = (ausdk::AUInputElement *)ausdk::AUScope::SafeGetElement((AULoudnessInNoise *)((char *)this + 80), 2u);
      result = ausdk::AUInputElement::PullInput(v18, a2, a3, 2, a4);
      if (!(_DWORD)result)
        goto LABEL_13;
    }
  }
  return result;
}

uint64_t AULoudnessInNoise::GetParameterList(AULoudnessInNoise *this, int a2, unsigned int *a3, unsigned int *a4)
{
  uint64_t result;

  if (a2)
    return 4294956430;
  if (a3)
  {
    *(_OWORD *)a3 = xmmword_1B6626920;
    *((_OWORD *)a3 + 1) = xmmword_1B66A0770;
    *((_OWORD *)a3 + 2) = xmmword_1B66A07D0;
    *((_OWORD *)a3 + 3) = xmmword_1B66A2610;
    *((_OWORD *)a3 + 4) = xmmword_1B66A2620;
    *((_QWORD *)a3 + 10) = 0x4100000040;
    a3[22] = 66;
  }
  result = 0;
  *a4 = 23;
  return result;
}

uint64_t AULoudnessInNoise::GetParameterInfo(AULoudnessInNoise *this, int a2, int a3, AudioUnitParameterInfo *buffer)
{
  uint64_t result;
  const __CFString *v6;
  const __CFString *v7;
  uint64_t v8;
  AudioUnitParameterValue v9;
  uint64_t v10;
  const __CFString *v11;
  AudioUnitParameterOptions v12;
  AudioUnitParameterOptions v13;
  uint64_t v14;
  AudioUnitParameterValue v15;

  buffer->flags = 0x40000000;
  buffer->unitName = 0;
  if (a2)
    return 4294956418;
  result = 4294956418;
  switch(a3)
  {
    case 0:
      v6 = CFSTR("Operating mode: 0-Assess current lev, 1-Estimate all levs");
      goto LABEL_8;
    case 1:
      v6 = CFSTR("Matching criterion to find current loudness (0=closest exceeding 1=closest)");
LABEL_8:
      buffer->cfNameString = v6;
      buffer->flags = 1207959552;
      CFStringGetCString(v6, buffer->name, 52, 0x8000100u);
      result = 0;
      buffer->unit = kAudioUnitParameterUnit_Indexed;
      goto LABEL_25;
    case 2:
      buffer->cfNameString = CFSTR("Index of the noise spectrum in Q used to normalize loudness");
      buffer->flags = 1207959552;
      CFStringGetCString(CFSTR("Index of the noise spectrum in Q used to normalize loudness"), buffer->name, 52, 0x8000100u);
      result = 0;
      buffer->unit = kAudioUnitParameterUnit_Indexed;
      v8 = 0x41A0000000000000;
      goto LABEL_11;
    case 3:
      buffer->cfNameString = CFSTR("Loudness Percentile Interval [sec]");
      buffer->flags = 1207959552;
      CFStringGetCString(CFSTR("Loudness Percentile Interval [sec]"), buffer->name, 52, 0x8000100u);
      result = 0;
      buffer->unit = kAudioUnitParameterUnit_Generic;
      v8 = 0x412000003F000000;
LABEL_11:
      *(_QWORD *)&buffer->minValue = v8;
      v9 = 1.0;
      goto LABEL_22;
    case 4:
      buffer->cfNameString = CFSTR("Percentile to use (0-100%)");
      buffer->flags = 1207959552;
      CFStringGetCString(CFSTR("Percentile to use (0-100%)"), buffer->name, 52, 0x8000100u);
      result = 0;
      buffer->unit = kAudioUnitParameterUnit_Generic;
      *(_QWORD *)&buffer->minValue = 0x42C8000000000000;
      v9 = 90.0;
      goto LABEL_22;
    case 5:
      buffer->cfNameString = CFSTR("0-Ignore VAD, 1-Use Extern VAD with Thresh, 2-Threshold CV, 3-Threshold Echo/Play, 4=1or2, 5=1or3, 6=1or2or3");
      buffer->flags = 1207959552;
      CFStringGetCString(CFSTR("0-Ignore VAD, 1-Use Extern VAD with Thresh, 2-Threshold CV, 3-Threshold Echo/Play, 4=1or2, 5=1or3, 6=1or2or3"), buffer->name, 52, 0x8000100u);
      result = 0;
      buffer->unit = kAudioUnitParameterUnit_Indexed;
      v10 = 0x40C0000000000000;
      goto LABEL_26;
    case 6:
      buffer->cfNameString = CFSTR("(input) Threshold on Soft VAD");
      buffer->flags = 1207959552;
      CFStringGetCString(CFSTR("(input) Threshold on Soft VAD"), buffer->name, 52, 0x8000100u);
      result = 0;
      buffer->unit = kAudioUnitParameterUnit_Generic;
      *(_QWORD *)&buffer->minValue = 0x3F80000000000000;
      v9 = 0.5;
      goto LABEL_22;
    case 7:
      v11 = CFSTR("(input) Threshold on Clean Voice for a VAD (dBfs)");
      goto LABEL_17;
    case 8:
      v11 = CFSTR("(input) Threshold on Echo/Play for a VAD (dBfs)");
LABEL_17:
      buffer->cfNameString = v11;
      buffer->flags = 1207959552;
      CFStringGetCString(v11, buffer->name, 52, 0x8000100u);
      result = 0;
      buffer->unit = kAudioUnitParameterUnit_Generic;
      *(_QWORD *)&buffer->minValue = 0x41200000C3480000;
      v9 = -80.0;
      goto LABEL_22;
    case 9:
      buffer->cfNameString = CFSTR("(input) Minimum frequency used for sensing (Hz) ");
      buffer->flags = 1207959552;
      CFStringGetCString(CFSTR("(input) Minimum frequency used for sensing (Hz) "), buffer->name, 52, 0x8000100u);
      result = 0;
      buffer->unit = kAudioUnitParameterUnit_Generic;
      *(_QWORD *)&buffer->minValue = 0x45FA000000000000;
      v9 = 200.0;
      goto LABEL_22;
    case 10:
      buffer->cfNameString = CFSTR("(input) Maximum frequency used for sensing (Hz) ");
      buffer->flags = 1207959552;
      CFStringGetCString(CFSTR("(input) Maximum frequency used for sensing (Hz) "), buffer->name, 52, 0x8000100u);
      result = 0;
      buffer->unit = kAudioUnitParameterUnit_Generic;
      *(_QWORD *)&buffer->minValue = 0x45FA000000000000;
      v9 = 5005.0;
      goto LABEL_22;
    case 11:
      buffer->cfNameString = CFSTR("(input) Power law p used in loudness ");
      buffer->flags = 1207959552;
      CFStringGetCString(CFSTR("(input) Power law p used in loudness "), buffer->name, 52, 0x8000100u);
      result = 0;
      buffer->unit = kAudioUnitParameterUnit_Generic;
      *(_QWORD *)&buffer->minValue = 0x4080000000000000;
      v9 = 2.0;
      goto LABEL_22;
    case 12:
      buffer->cfNameString = CFSTR("(input) Power law Q used in loudness ");
      buffer->flags = 1207959552;
      CFStringGetCString(CFSTR("(input) Power law Q used in loudness "), buffer->name, 52, 0x8000100u);
      result = 0;
      buffer->unit = kAudioUnitParameterUnit_Generic;
      *(_QWORD *)&buffer->minValue = 0x4080000000000000;
      v9 = 0.25;
LABEL_22:
      v12 = buffer->flags | 0x80000000;
      buffer->defaultValue = v9;
      buffer->flags = v12;
      return result;
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 31:
      return result;
    case 30:
      buffer->cfNameString = CFSTR("(input dyn) Current Level");
      buffer->flags = 1207959552;
      CFStringGetCString(CFSTR("(input dyn) Current Level"), buffer->name, 52, 0x8000100u);
      result = 0;
      buffer->unit = kAudioUnitParameterUnit_Generic;
      v10 = 0x459C400000000000;
      goto LABEL_26;
    case 32:
      buffer->cfNameString = CFSTR("(input dyn) External Soft VAD value");
      buffer->flags = 1207959552;
      CFStringGetCString(CFSTR("(input dyn) External Soft VAD value"), buffer->name, 52, 0x8000100u);
      result = 0;
      buffer->unit = kAudioUnitParameterUnit_Generic;
LABEL_25:
      v10 = 0x3F80000000000000;
LABEL_26:
      *(_QWORD *)&buffer->minValue = v10;
      v13 = buffer->flags | 0x80000000;
      buffer->defaultValue = 0.0;
      buffer->flags = v13;
      break;
    default:
      switch(a3)
      {
        case '<':
          v7 = CFSTR("(output) Raw Loudness for current frame");
          goto LABEL_29;
        case '=':
          v7 = CFSTR("(output) Normalized Loudness for current frame");
          goto LABEL_29;
        case '>':
          v7 = CFSTR("(output) Percentile loudness ");
LABEL_29:
          buffer->cfNameString = v7;
          buffer->flags = 1207959552;
          CFStringGetCString(v7, buffer->name, 52, 0x8000100u);
          result = 0;
          buffer->unit = kAudioUnitParameterUnit_Generic;
          v14 = 0x4120000000000000;
          goto LABEL_33;
        case '?':
          buffer->cfNameString = CFSTR("(output) Audible Level: -1-Not Calculated 0-InAudible, 1-Maybe Audible, 2 Audible");
          buffer->flags = 1207959552;
          CFStringGetCString(CFSTR("(output) Audible Level: -1-Not Calculated 0-InAudible, 1-Maybe Audible, 2 Audible"), buffer->name, 52, 0x8000100u);
          result = 0;
          buffer->unit = kAudioUnitParameterUnit_Indexed;
          *(_QWORD *)&buffer->minValue = 0x40000000BF800000;
          v15 = -1.0;
          goto LABEL_35;
        case '@':
          buffer->cfNameString = CFSTR("(output) Used Level from array of available Levels in plist");
          buffer->flags = 1207959552;
          CFStringGetCString(CFSTR("(output) Used Level from array of available Levels in plist"), buffer->name, 52, 0x8000100u);
          result = 0;
          buffer->unit = kAudioUnitParameterUnit_Generic;
          v14 = 0x459C400000000000;
          goto LABEL_33;
        case 'A':
          buffer->cfNameString = CFSTR("(output) Index which increments (wraps at 32,000) when Audibility/Percentiles are updated");
          buffer->flags = 1207959552;
          CFStringGetCString(CFSTR("(output) Index which increments (wraps at 32,000) when Audibility/Percentiles are updated"), buffer->name, 52, 0x8000100u);
          result = 0;
          buffer->unit = kAudioUnitParameterUnit_Generic;
          v14 = 0x46FA000000000000;
LABEL_33:
          *(_QWORD *)&buffer->minValue = v14;
          buffer->defaultValue = 0.0;
          break;
        case 'B':
          buffer->cfNameString = CFSTR("(output) Mean Power of estimated noise spectrum (dB) ");
          buffer->flags = 1207959552;
          CFStringGetCString(CFSTR("(output) Mean Power of estimated noise spectrum (dB) "), buffer->name, 52, 0x8000100u);
          result = 0;
          buffer->unit = kAudioUnitParameterUnit_Generic;
          *(_QWORD *)&buffer->minValue = 0x42C80000C3480000;
          v15 = -200.0;
LABEL_35:
          buffer->defaultValue = v15;
          break;
        default:
          return result;
      }
      break;
  }
  return result;
}

uint64_t AULoudnessInNoise::RestoreState(OpaqueAudioComponentInstance **this, const void *a2)
{
  uint64_t result;

  result = ausdk::AUBase::RestoreState(this, a2);
  if (!(_DWORD)result)
  {
    ++*((_DWORD *)this + 140);
    ++*((_DWORD *)this + 142);
  }
  return result;
}

double AULoudnessInNoise::GetLatency(AULoudnessInNoise *this)
{
  return 0.0;
}

double AULoudnessInNoise::GetTailTime(AULoudnessInNoise *this)
{
  return 0.0;
}

uint64_t AULoudnessInNoise::SupportsTail(AULoudnessInNoise *this)
{
  return 1;
}

BOOL AULoudnessInNoise::StreamFormatWritable(AULoudnessInNoise *this)
{
  return *((_BYTE *)this + 17) == 0;
}

uint64_t AULoudnessInNoise::SupportedNumChannels(AULoudnessInNoise *this, const AUChannelInfo **a2)
{
  if (a2)
    *a2 = (const AUChannelInfo *)&AULoudnessInNoise::SupportedNumChannels(AUChannelInfo const**)::sSupportedChannelConfigs;
  return 1;
}

BOOL AULoudnessInNoise::ValidFormat(AULoudnessInNoise *this, int a2, unsigned int a3, const AudioStreamBasicDescription *a4)
{
  BOOL v4;

  if ((a2 == 2 || a2 == 1 && a3 <= 2) && (a4->mBytesPerFrame == 8 ? (v4 = a4->mFormatID == 1718773105) : (v4 = 0), v4))
    return a4->mChannelsPerFrame == 1;
  else
    return 0;
}

void AULoudnessInNoise::InitializeInternals(AULoudnessInNoise *this)
{
  uint64_t v2;
  ausdk::AUElement *v3;
  ausdk::AUElement **v4;
  unsigned int Parameter;
  uint64_t v6;
  ausdk::AUElement *v7;
  ausdk::AUElement **v8;
  uint64_t v9;
  ausdk::AUElement *v10;
  ausdk::AUElement **v11;
  unsigned int v12;
  uint64_t v13;
  ausdk::AUElement *v14;
  ausdk::AUElement **v15;
  float v16;
  int v17;
  uint64_t v18;
  ausdk::AUElement *v19;
  ausdk::AUElement **v20;
  float v21;
  float v22;
  unsigned int v23;
  unint64_t v24;
  unint64_t v25;
  char **v26;
  unint64_t v27;
  unsigned int v28;
  float v29;
  unsigned int v30;
  uint64_t v31;
  ausdk::AUElement *v32;
  ausdk::AUElement **v33;
  unsigned int v34;
  uint64_t v35;
  ausdk::AUElement *v36;
  ausdk::AUElement **v37;
  float v38;
  float v39;
  uint64_t v40;
  ausdk::AUElement *v41;
  ausdk::AUElement **v42;
  float v43;
  float v44;
  uint64_t v45;
  ausdk::AUElement *v46;
  ausdk::AUElement **v47;
  float v48;
  float v49;
  uint64_t v50;
  ausdk::AUElement *v51;
  ausdk::AUElement **v52;
  float v53;
  int v54;
  uint64_t v55;
  ausdk::AUElement *v56;
  ausdk::AUElement **v57;
  float v58;
  int v59;
  uint64_t v60;
  ausdk::AUElement *v61;
  ausdk::AUElement **v62;
  float v63;
  float v64;
  uint64_t v65;
  ausdk::AUElement *v66;
  ausdk::AUElement **v67;
  float v68;
  int v69;
  int v70;

  *((_DWORD *)this + 137) = *((_DWORD *)this + 136);
  v2 = *((_QWORD *)this + 9);
  if (v2)
  {
    v3 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v2 + 32))(v2, 0);
  }
  else
  {
    v4 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v4)
      v3 = 0;
    else
      v3 = *v4;
  }
  Parameter = ausdk::AUElement::GetParameter(v3, 0);
  *((_DWORD *)this + 136) = Parameter != 0;
  if (Parameter)
  {
    *((_DWORD *)this + 380) = 0;
    *((_DWORD *)this + 381) = *((_DWORD *)this + 145);
  }
  v6 = *((_QWORD *)this + 9);
  if (v6)
  {
    v7 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v6 + 32))(v6, 0);
  }
  else
  {
    v8 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v8)
      v7 = 0;
    else
      v7 = *v8;
  }
  *((_DWORD *)this + 138) = ausdk::AUElement::GetParameter(v7, 1u) != 0;
  v9 = *((_QWORD *)this + 9);
  if (v9)
  {
    v10 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v9 + 32))(v9, 0);
  }
  else
  {
    v11 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v11)
      v10 = 0;
    else
      v10 = *v11;
  }
  v12 = ausdk::AUElement::GetParameter(v10, 2u);
  if (v12 >= 0x14)
    v12 = 20;
  *((_DWORD *)this + 139) = v12;
  v13 = *((_QWORD *)this + 9);
  if (v13)
  {
    v14 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v13 + 32))(v13, 0);
  }
  else
  {
    v15 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v15)
      v14 = 0;
    else
      v14 = *v15;
  }
  v16 = ausdk::AUElement::GetParameter(v14, 4u);
  *((float *)this + 417) = v16;
  v17 = 1120403456;
  if (v16 > 100.0 || (v17 = 0, v16 < 0.0))
    *((_DWORD *)this + 417) = v17;
  v18 = *((_QWORD *)this + 9);
  if (v18)
  {
    v19 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v18 + 32))(v18, 0);
  }
  else
  {
    v20 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v20)
      v19 = 0;
    else
      v19 = *v20;
  }
  v21 = ausdk::AUElement::GetParameter(v19, 3u);
  if (*((float *)this + 413) != v21 || !*((_BYTE *)this + 1656) || *((_DWORD *)this + 137) != *((_DWORD *)this + 136))
  {
    *((float *)this + 413) = v21;
    v22 = 10.0;
    if (v21 > 10.0 || (v22 = 0.5, v21 < 0.5))
    {
      *((float *)this + 413) = v22;
      v21 = v22;
    }
    v23 = (float)(v21 / (float)((float)*((unsigned int *)this + 147) / *((float *)this + 146))) - 1;
    if (v23 <= 1)
      v24 = 1;
    else
      v24 = v23;
    *((_DWORD *)this + 415) = v24;
    v70 = 0;
    std::vector<float>::assign((char **)this + 82, v24, &v70);
    if (*((_DWORD *)this + 136) == 1)
    {
      v25 = *((unsigned int *)this + 380);
      if (v25 < *((_DWORD *)this + 381))
      {
        v26 = (char **)((char *)this + 24 * v25 + 752);
        do
        {
          v27 = *((unsigned int *)this + 415);
          v69 = 0;
          std::vector<float>::assign(v26, v27, &v69);
          ++v25;
          v26 += 3;
        }
        while (v25 < *((unsigned int *)this + 381));
      }
    }
    *((_DWORD *)this + 416) = 0;
    v28 = *((_DWORD *)this + 415);
    v29 = (float)(*((float *)this + 417) * (float)v28) / 100.0;
    if (v29 <= 0.0)
      v29 = 0.0;
    if (v28 <= v29)
      v30 = v28 - 1;
    else
      v30 = v29;
    *((_DWORD *)this + 418) = v30;
    *((_BYTE *)this + 1656) = 1;
  }
  v31 = *((_QWORD *)this + 9);
  if (v31)
  {
    v32 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v31 + 32))(v31, 0);
  }
  else
  {
    v33 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v33)
      v32 = 0;
    else
      v32 = *v33;
  }
  v34 = ausdk::AUElement::GetParameter(v32, 5u);
  if (v34 >= 6)
    v34 = 6;
  *((_DWORD *)this + 152) = v34;
  v35 = *((_QWORD *)this + 9);
  if (v35)
  {
    v36 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v35 + 32))(v35, 0);
  }
  else
  {
    v37 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v37)
      v36 = 0;
    else
      v36 = *v37;
  }
  v38 = ausdk::AUElement::GetParameter(v36, 6u);
  *((float *)this + 153) = v38;
  v39 = 1.0;
  if (v38 > 1.0 || (v39 = 0.0, v38 < 0.0))
    *((float *)this + 153) = v39;
  v40 = *((_QWORD *)this + 9);
  if (v40)
  {
    v41 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v40 + 32))(v40, 0);
  }
  else
  {
    v42 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v42)
      v41 = 0;
    else
      v41 = *v42;
  }
  v43 = ausdk::AUElement::GetParameter(v41, 7u);
  *((float *)this + 154) = v43;
  v44 = 10.0;
  if (v43 > 10.0 || (v44 = -200.0, v43 < -200.0))
    *((float *)this + 154) = v44;
  v45 = *((_QWORD *)this + 9);
  if (v45)
  {
    v46 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v45 + 32))(v45, 0);
  }
  else
  {
    v47 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v47)
      v46 = 0;
    else
      v46 = *v47;
  }
  v48 = ausdk::AUElement::GetParameter(v46, 8u);
  *((float *)this + 155) = v48;
  v49 = 10.0;
  if (v48 > 10.0 || (v49 = -200.0, v48 < -200.0))
    *((float *)this + 155) = v49;
  v50 = *((_QWORD *)this + 9);
  if (v50)
  {
    v51 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v50 + 32))(v50, 0);
  }
  else
  {
    v52 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v52)
      v51 = 0;
    else
      v51 = *v52;
  }
  v53 = ausdk::AUElement::GetParameter(v51, 9u);
  *((float *)this + 157) = v53;
  v54 = 1174011904;
  if (v53 > 8000.0 || (v54 = 0, v53 < 0.0))
    *((_DWORD *)this + 157) = v54;
  v55 = *((_QWORD *)this + 9);
  if (v55)
  {
    v56 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v55 + 32))(v55, 0);
  }
  else
  {
    v57 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v57)
      v56 = 0;
    else
      v56 = *v57;
  }
  v58 = ausdk::AUElement::GetParameter(v56, 0xAu);
  *((float *)this + 158) = v58;
  v59 = 1174011904;
  if (v58 > 8000.0 || (v59 = 0, v58 < 0.0))
    *((_DWORD *)this + 158) = v59;
  v60 = *((_QWORD *)this + 9);
  if (v60)
  {
    v61 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v60 + 32))(v60, 0);
  }
  else
  {
    v62 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v62)
      v61 = 0;
    else
      v61 = *v62;
  }
  v63 = ausdk::AUElement::GetParameter(v61, 0xBu);
  *((float *)this + 159) = v63;
  v64 = 4.0;
  if (v63 > 4.0 || (v64 = 0.0, v63 < 0.0))
    *((float *)this + 159) = v64;
  v65 = *((_QWORD *)this + 9);
  if (v65)
  {
    v66 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v65 + 32))(v65, 0);
  }
  else
  {
    v67 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v67)
      v66 = 0;
    else
      v66 = *v67;
  }
  v68 = ausdk::AUElement::GetParameter(v66, 0xCu);
  *((float *)this + 160) = v68;
  if (v68 <= 4.0)
  {
    if (v68 < 0.0)
      *((_DWORD *)this + 160) = 0;
  }
  else
  {
    *((_DWORD *)this + 159) = 1082130432;
  }
}

void AULoudnessInNoise::UpdateDynParams(AULoudnessInNoise *this)
{
  uint64_t v2;
  ausdk::AUElement *v3;
  ausdk::AUElement **v4;
  float Parameter;
  uint64_t v6;
  ausdk::AUElement *v7;
  ausdk::AUElement **v8;
  float v9;

  v2 = *((_QWORD *)this + 9);
  if (v2)
  {
    v3 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v2 + 32))(v2, 0);
  }
  else
  {
    v4 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v4)
      v3 = 0;
    else
      v3 = *v4;
  }
  Parameter = ausdk::AUElement::GetParameter(v3, 0x1Eu);
  if (Parameter > 5000.0)
    Parameter = 5000.0;
  if (Parameter < 0.0)
    Parameter = 0.0;
  *((float *)this + 172) = Parameter;
  v6 = *((_QWORD *)this + 9);
  if (v6)
  {
    v7 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v6 + 32))(v6, 0);
  }
  else
  {
    v8 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v8)
      v7 = 0;
    else
      v7 = *v8;
  }
  v9 = ausdk::AUElement::GetParameter(v7, 0x20u);
  if (v9 > 1.0)
    v9 = 1.0;
  if (v9 < 0.0)
    v9 = 0.0;
  *((float *)this + 151) = v9;
}

void AULoudnessInNoise::UpdateOutputParams(AULoudnessInNoise *this)
{
  uint64_t v2;
  ausdk::AUElement *v3;
  ausdk::AUElement **v4;
  uint64_t v5;
  ausdk::AUElement *v6;
  ausdk::AUElement **v7;
  uint64_t v8;
  ausdk::AUElement *v9;
  ausdk::AUElement **v10;
  uint64_t v11;
  ausdk::AUElement *v12;
  ausdk::AUElement **v13;
  float v14;
  uint64_t v15;
  ausdk::AUElement *v16;
  ausdk::AUElement **v17;
  float v18;
  uint64_t v19;
  ausdk::AUElement *v20;
  ausdk::AUElement **v21;
  uint64_t v22;
  ausdk::AUElement *v23;
  ausdk::AUElement **v24;

  v2 = *((_QWORD *)this + 9);
  if (v2)
  {
    v3 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v2 + 32))(v2, 0);
  }
  else
  {
    v4 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v4)
      v3 = 0;
    else
      v3 = *v4;
  }
  ausdk::AUElement::SetParameter(v3, 0x3Cu, *((float *)this + 161), 0);
  v5 = *((_QWORD *)this + 9);
  if (v5)
  {
    v6 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v5 + 32))(v5, 0);
  }
  else
  {
    v7 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v7)
      v6 = 0;
    else
      v6 = *v7;
  }
  ausdk::AUElement::SetParameter(v6, 0x3Du, *((float *)this + 162), 0);
  v8 = *((_QWORD *)this + 9);
  if (v8)
  {
    v9 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v8 + 32))(v8, 0);
  }
  else
  {
    v10 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v10)
      v9 = 0;
    else
      v9 = *v10;
  }
  ausdk::AUElement::SetParameter(v9, 0x3Eu, *((float *)this + 170), 0);
  v11 = *((_QWORD *)this + 9);
  if (v11)
  {
    v12 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v11 + 32))(v11, 0);
  }
  else
  {
    v13 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v13)
      v12 = 0;
    else
      v12 = *v13;
  }
  ausdk::AUElement::SetParameter(v12, 0x3Fu, (float)*((int *)this + 171), 0);
  v14 = *(float *)(*((_QWORD *)this + 210) + 4 * *((unsigned int *)this + 173));
  v15 = *((_QWORD *)this + 9);
  if (v15)
  {
    v16 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v15 + 32))(v15, 0);
  }
  else
  {
    v17 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v17)
      v16 = 0;
    else
      v16 = *v17;
  }
  ausdk::AUElement::SetParameter(v16, 0x40u, v14, 0);
  v18 = (float)*((unsigned int *)this + 419);
  v19 = *((_QWORD *)this + 9);
  if (v19)
  {
    v20 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v19 + 32))(v19, 0);
  }
  else
  {
    v21 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v21)
      v20 = 0;
    else
      v20 = *v21;
  }
  ausdk::AUElement::SetParameter(v20, 0x41u, v18, 0);
  v22 = *((_QWORD *)this + 9);
  if (v22)
  {
    v23 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v22 + 32))(v22, 0);
  }
  else
  {
    v24 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v24)
      v23 = 0;
    else
      v23 = *v24;
  }
  ausdk::AUElement::SetParameter(v23, 0x42u, *((float *)this + 175), 0);
}

float AULoudnessInNoise::Loudness(AULoudnessInNoise *this, unsigned int a2)
{
  float v3;
  float v4;
  const float **v5;
  uint64_t v6;
  uint64_t v7;
  float v8;
  uint64_t v9;
  uint64_t v10;
  const float *v11;
  uint64_t v12;
  uint64_t v13;
  float *v14;
  float *v15;
  float *v16;
  float *v17;
  float v18;
  float v19;
  float v20;
  float v21;
  float v22;
  float v23;
  float v24;
  float v25;

  v3 = *((float *)this + 159);
  v4 = *((float *)this + 160);
  v5 = (const float **)((char *)this + 24 * a2);
  vDSP_vsub(*((const float **)this + 522), 1, v5[216], 1, *((float **)this + 528), 1, *((unsigned int *)this + 149));
  v6 = *((unsigned int *)this + 411);
  v7 = *((unsigned int *)this + 412);
  v8 = 0.0;
  if (v6 < v7)
  {
    v9 = *((_QWORD *)this + 528);
    v10 = *((_QWORD *)this + 516);
    v11 = v5[216];
    v12 = *((_QWORD *)this + 306);
    v13 = v7 - v6;
    v14 = (float *)(v12 + 4 * v6);
    v15 = (float *)&v11[v6];
    v16 = (float *)(v10 + 4 * v6);
    v17 = (float *)(v9 + 4 * v6);
    do
    {
      v18 = *v17++;
      v19 = fmaxf(v18, 0.0);
      v20 = *v16++;
      v21 = v20;
      v22 = *v15++;
      v23 = powf(v21 / (float)(v22 + 1.0e-30), v3);
      v24 = powf(v19 / (float)(v23 + 1.0), v4);
      v25 = *v14++;
      v8 = v8 + (float)(v25 * v24);
      --v13;
    }
    while (v13);
  }
  return v8;
}

uint64_t AULoudnessInNoise::ReadVectorFromDictionary(const __CFDictionary *a1, const __CFString *a2, char **a3)
{
  const __CFData *Value;
  const __CFData *v6;
  unsigned int Length;
  unsigned int v8;
  const UInt8 *BytePtr;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  unsigned int v13;
  NSObject *v14;
  int v16;
  const char *v17;
  __int16 v18;
  int v19;
  __int16 v20;
  const char *CStringPtr;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  Value = (const __CFData *)CFDictionaryGetValue(a1, a2);
  if (Value)
  {
    v6 = Value;
    Length = CFDataGetLength(Value);
    v8 = Length >> 2;
    v16 = 0;
    std::vector<float>::assign(a3, Length >> 2, &v16);
    BytePtr = CFDataGetBytePtr(v6);
    v10 = 0;
    if (Length >= 4)
    {
      v11 = *a3;
      if (v8 <= 1)
        v12 = 1;
      else
        v12 = v8;
      do
      {
        v13 = *(_DWORD *)BytePtr;
        BytePtr += 4;
        *(_DWORD *)v11 = bswap32(v13);
        v11 += 4;
        --v12;
      }
      while (v12);
      return 0;
    }
  }
  else
  {
    if (AULINNLogScope(void)::once != -1)
      dispatch_once(&AULINNLogScope(void)::once, &__block_literal_global_16760);
    v10 = 4294900555;
    if (AULINNLogScope(void)::scope)
    {
      if ((*(_BYTE *)(AULINNLogScope(void)::scope + 8) & 1) != 0)
      {
        v14 = *(NSObject **)AULINNLogScope(void)::scope;
        if (*(_QWORD *)AULINNLogScope(void)::scope)
        {
          if (os_log_type_enabled(*(os_log_t *)AULINNLogScope(void)::scope, OS_LOG_TYPE_DEBUG))
          {
            v16 = 136315650;
            v17 = "AULoudnessInNoise.cpp";
            v18 = 1024;
            v19 = 1215;
            v20 = 2080;
            CStringPtr = CFStringGetCStringPtr(a2, 0x8000100u);
            _os_log_impl(&dword_1B5ED0000, v14, OS_LOG_TYPE_DEBUG, "%25s:%-5d Failed to retrieve %s.\n", (uint8_t *)&v16, 0x1Cu);
          }
        }
      }
    }
  }
  return v10;
}

void AULoudnessInNoise::ReadUInt32VectorFromDictionary(const __CFDictionary *a1, const __CFString *a2, std::vector<unsigned int> *a3)
{
  const __CFData *Value;
  const __CFData *v6;
  unsigned int Length;
  unsigned int v8;
  const UInt8 *BytePtr;
  std::vector<unsigned int>::pointer begin;
  uint64_t v11;
  unsigned int v12;
  NSObject *v13;
  std::vector<unsigned int>::value_type v14;
  const char *v15;
  __int16 v16;
  int v17;
  __int16 v18;
  const char *CStringPtr;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  Value = (const __CFData *)CFDictionaryGetValue(a1, a2);
  if (Value)
  {
    v6 = Value;
    Length = CFDataGetLength(Value);
    v8 = Length >> 2;
    v14 = 0;
    std::vector<unsigned int>::assign(a3, Length >> 2, &v14);
    BytePtr = CFDataGetBytePtr(v6);
    if (Length >= 4)
    {
      begin = a3->__begin_;
      if (v8 <= 1)
        v11 = 1;
      else
        v11 = v8;
      do
      {
        v12 = *(_DWORD *)BytePtr;
        BytePtr += 4;
        *begin++ = v12;
        --v11;
      }
      while (v11);
    }
  }
  else
  {
    if (AULINNLogScope(void)::once != -1)
      dispatch_once(&AULINNLogScope(void)::once, &__block_literal_global_16760);
    if (AULINNLogScope(void)::scope)
    {
      if ((*(_BYTE *)(AULINNLogScope(void)::scope + 8) & 1) != 0)
      {
        v13 = *(NSObject **)AULINNLogScope(void)::scope;
        if (*(_QWORD *)AULINNLogScope(void)::scope)
        {
          if (os_log_type_enabled(*(os_log_t *)AULINNLogScope(void)::scope, OS_LOG_TYPE_DEBUG))
          {
            v14 = 136315650;
            v15 = "AULoudnessInNoise.cpp";
            v16 = 1024;
            v17 = 954;
            v18 = 2080;
            CStringPtr = CFStringGetCStringPtr(a2, 0x8000100u);
            _os_log_impl(&dword_1B5ED0000, v13, OS_LOG_TYPE_DEBUG, "%25s:%-5d Failed to retrieve %s.\n", (uint8_t *)&v14, 0x1Cu);
          }
        }
      }
    }
  }
}

uint64_t AULoudnessInNoise::Validate_Level_Spreading_PropertyRelatedValues(AULoudnessInNoise *this)
{
  unint64_t v1;
  uint64_t v2;
  int *v3;
  uint64_t v4;
  uint64_t v5;
  int *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  unsigned int v11;
  int *v12;
  uint64_t v13;
  int v14;
  int v16;
  int v17;
  int v18;

  v1 = *((unsigned int *)this + 145);
  if (v1 <= 0x1E)
    LODWORD(v2) = 0;
  else
    LODWORD(v2) = 1836020332;
  if (v1 <= (uint64_t)(*((_QWORD *)this + 211) - *((_QWORD *)this + 210)) >> 2)
    v2 = v2;
  else
    v2 = 1717925740;
  if (!(_DWORD)v2)
  {
    v2 = 1936745827;
    v3 = (int *)*((_QWORD *)this + 402);
    v4 = (uint64_t)(*((_QWORD *)this + 403) - (_QWORD)v3) >> 2;
    v5 = *((unsigned int *)this + 149);
    if (v4 == v5 && v4 == (uint64_t)(*((_QWORD *)this + 307) - *((_QWORD *)this + 306)) >> 2)
    {
      v6 = (int *)*((_QWORD *)this + 405);
      if (v4 == (uint64_t)(*((_QWORD *)this + 406) - (_QWORD)v6) >> 2
        && v4 == (uint64_t)(*((_QWORD *)this + 214) - *((_QWORD *)this + 213)) >> 2)
      {
        if (!(_DWORD)v1)
          goto LABEL_26;
        LODWORD(v7) = 0;
        v8 = (_QWORD *)((char *)this + 1728);
        v9 = *((unsigned int *)this + 145);
        do
        {
          if ((uint64_t)(v8[1] - *v8) >> 2 == v4 && (uint64_t)(v8[94] - v8[93]) >> 2 == v4)
            v7 = v7;
          else
            v7 = 1936745827;
          if (*((_DWORD *)this + 136) == 1)
          {
            if (v1 <= (uint64_t)(v8[196] - v8[195]) >> 2)
              v7 = v7;
            else
              v7 = 1717925740;
          }
          v8 += 3;
          --v9;
        }
        while (v9);
        v2 = v7;
        if (!(_DWORD)v7)
        {
LABEL_26:
          v11 = 0;
          if ((_DWORD)v5)
          {
            v12 = (int *)*((_QWORD *)this + 405);
            v13 = (uint64_t)(*((_QWORD *)this + 403) - (_QWORD)v3) >> 2;
            do
            {
              v14 = *v12++;
              v11 += v14;
              --v13;
            }
            while (v13);
          }
          if ((uint64_t)(*((_QWORD *)this + 400) - *((_QWORD *)this + 399)) >> 2 < (unint64_t)v11 || v11 > 0x7023)
            v2 = 1650815602;
          else
            v2 = 0;
          if ((_DWORD)v5)
          {
            do
            {
              v17 = *v6++;
              v16 = v17;
              v18 = *v3++;
              if (v16 + v18 - 1 <= v5)
                v2 = v2;
              else
                v2 = 1650815602;
              --v4;
            }
            while (v4);
          }
        }
      }
    }
  }
  return v2;
}

os_log_t ___ZL14AULINNLogScopev_block_invoke()
{
  _QWORD *v0;
  os_log_t result;

  v0 = (_QWORD *)operator new();
  v0[1] = 0;
  result = os_log_create("com.apple.coreaudio", "auloudnessinnoise");
  *v0 = result;
  AULINNLogScope(void)::scope = (uint64_t)v0;
  return result;
}

uint64_t *std::__tree<std::__value_type<std::string,float>,std::__map_value_compare<std::string,std::__value_type<std::string,float>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,float>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(uint64_t **a1, void **a2, _OWORD **a3)
{
  uint64_t *v5;
  uint64_t **v6;
  uint64_t **v8;
  _QWORD *v9;
  uint64_t *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t *v14;

  v6 = a1 + 1;
  v5 = a1[1];
  if (!v5)
  {
    v8 = a1 + 1;
LABEL_9:
    v10 = (uint64_t *)operator new(0x40uLL);
    v11 = *a3;
    v12 = *((_QWORD *)*a3 + 2);
    *((_OWORD *)v10 + 2) = **a3;
    v10[6] = v12;
    *v11 = 0;
    v11[1] = 0;
    v11[2] = 0;
    *((_DWORD *)v10 + 14) = 0;
    *v10 = 0;
    v10[1] = 0;
    v10[2] = (uint64_t)v8;
    *v6 = v10;
    v13 = (uint64_t *)**a1;
    v14 = v10;
    if (v13)
    {
      *a1 = v13;
      v14 = *v6;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(a1[1], v14);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
    return v10;
  }
  while (1)
  {
    while (1)
    {
      v8 = (uint64_t **)v5;
      v9 = v5 + 4;
      if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a2, (void **)v5 + 4) & 0x80) == 0)
        break;
      v5 = *v8;
      v6 = v8;
      if (!*v8)
        goto LABEL_9;
    }
    if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v9, a2) & 0x80) == 0)
      break;
    v6 = v8 + 1;
    v5 = v8[1];
    if (!v5)
      goto LABEL_9;
  }
  v10 = *v6;
  if (!*v6)
    goto LABEL_9;
  return v10;
}

CFStringRef *applesauce::CF::TypeRefPair::TypeRefPair<std::string const&,float const&>(CFStringRef *a1, const UInt8 *a2, int *a3)
{
  CFIndex v5;
  CFIndex v6;
  CFStringRef v7;
  CFNumberRef v8;
  std::runtime_error *exception;
  std::runtime_error *v11;
  int valuePtr;

  v5 = *((_QWORD *)a2 + 1);
  if (*((char *)a2 + 23) >= 0)
  {
    v6 = a2[23];
  }
  else
  {
    a2 = *(const UInt8 **)a2;
    v6 = v5;
  }
  v7 = CFStringCreateWithBytes(0, a2, v6, 0x8000100u, 0);
  *a1 = v7;
  if (!v7)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
  }
  valuePtr = *a3;
  v8 = CFNumberCreate(0, kCFNumberFloatType, &valuePtr);
  a1[1] = (CFStringRef)v8;
  if (!v8)
  {
    v11 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v11, "Could not construct");
  }
  return a1;
}

void sub_1B647D178(_Unwind_Exception *a1)
{
  uint64_t v1;
  const void *v3;

  v3 = *(const void **)(v1 + 8);
  if (v3)
    CFRelease(v3);
  applesauce::CF::TypeRef::~TypeRef((const void **)v1);
  _Unwind_Resume(a1);
}

void AULoudnessInNoise::SetOutputParamRelatedDefaults(AULoudnessInNoise *this)
{
  uint64_t v2;
  ausdk::AUElement *v3;
  ausdk::AUElement **v4;
  uint64_t v5;
  ausdk::AUElement *v6;
  ausdk::AUElement **v7;
  uint64_t v8;
  ausdk::AUElement *v9;
  ausdk::AUElement **v10;
  uint64_t v11;
  ausdk::AUElement *v12;
  ausdk::AUElement **v13;
  uint64_t v14;
  ausdk::AUElement *v15;
  ausdk::AUElement **v16;
  uint64_t v17;
  ausdk::AUElement *v18;
  ausdk::AUElement **v19;
  uint64_t v20;
  ausdk::AUElement *v21;
  ausdk::AUElement **v22;

  v2 = *((_QWORD *)this + 9);
  if (v2)
  {
    v3 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v2 + 32))(v2, 0);
  }
  else
  {
    v4 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v4)
      v3 = 0;
    else
      v3 = *v4;
  }
  ausdk::AUElement::SetParameter(v3, 0x3Du, 0.0, 0);
  *((_DWORD *)this + 162) = 0;
  v5 = *((_QWORD *)this + 9);
  if (v5)
  {
    v6 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v5 + 32))(v5, 0);
  }
  else
  {
    v7 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v7)
      v6 = 0;
    else
      v6 = *v7;
  }
  ausdk::AUElement::SetParameter(v6, 0x3Cu, 0.0, 0);
  *((_DWORD *)this + 161) = 0;
  v8 = *((_QWORD *)this + 9);
  if (v8)
  {
    v9 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v8 + 32))(v8, 0);
  }
  else
  {
    v10 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v10)
      v9 = 0;
    else
      v9 = *v10;
  }
  ausdk::AUElement::SetParameter(v9, 0x3Eu, 0.0, 0);
  *((_DWORD *)this + 170) = 0;
  v11 = *((_QWORD *)this + 9);
  if (v11)
  {
    v12 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v11 + 32))(v11, 0);
  }
  else
  {
    v13 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v13)
      v12 = 0;
    else
      v12 = *v13;
  }
  ausdk::AUElement::SetParameter(v12, 0x3Fu, -1.0, 0);
  *((_DWORD *)this + 171) = -1;
  v14 = *((_QWORD *)this + 9);
  if (v14)
  {
    v15 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v14 + 32))(v14, 0);
  }
  else
  {
    v16 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v16)
      v15 = 0;
    else
      v15 = *v16;
  }
  ausdk::AUElement::SetParameter(v15, 0x40u, 0.0, 0);
  *((_DWORD *)this + 173) = 0;
  v17 = *((_QWORD *)this + 9);
  if (v17)
  {
    v18 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v17 + 32))(v17, 0);
  }
  else
  {
    v19 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v19)
      v18 = 0;
    else
      v18 = *v19;
  }
  ausdk::AUElement::SetParameter(v18, 0x41u, 0.0, 0);
  *((_DWORD *)this + 419) = 0;
  v20 = *((_QWORD *)this + 9);
  if (v20)
  {
    v21 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v20 + 32))(v20, 0);
  }
  else
  {
    v22 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v22)
      v21 = 0;
    else
      v21 = *v22;
  }
  ausdk::AUElement::SetParameter(v21, 0x42u, -200.0, 0);
  *((_DWORD *)this + 175) = -1018691584;
}

char *AULoudnessInNoise::Set_Level_Spreading_PropertyRelatedDefaults(AULoudnessInNoise *this)
{
  unint64_t v2;
  unint64_t v3;
  std::vector<unsigned int>::size_type v4;
  std::vector<unsigned int>::size_type v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char **v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  std::vector<unsigned int>::value_type __u;

  *((_DWORD *)this + 145) = 1;
  *((_DWORD *)this + 174) = 1014887350;
  *((_DWORD *)this + 135) = -1023148032;
  __u = 1065353216;
  std::vector<float>::assign((char **)this + 210, 0x1EuLL, &__u);
  v2 = *((unsigned int *)this + 149);
  __u = 1065353216;
  std::vector<float>::assign((char **)this + 213, v2, &__u);
  v3 = *((unsigned int *)this + 149);
  __u = 1065353216;
  std::vector<float>::assign((char **)this + 399, v3, &__u);
  v4 = *((unsigned int *)this + 149);
  __u = 1;
  std::vector<unsigned int>::assign((std::vector<unsigned int> *)this + 135, v4, &__u);
  v5 = *((unsigned int *)this + 149);
  __u = 0;
  std::vector<unsigned int>::assign((std::vector<unsigned int> *)this + 134, v5, &__u);
  LODWORD(v6) = *((_DWORD *)this + 149);
  if ((_DWORD)v6)
  {
    v7 = 0;
    v8 = *((_QWORD *)this + 402);
    do
    {
      *(_DWORD *)(v8 + 4 * v7) = v7 + 1;
      v6 = *((unsigned int *)this + 149);
      ++v7;
    }
    while (v7 < v6);
  }
  if (*((_DWORD *)this + 145))
  {
    v9 = 0;
    v10 = (char **)((char *)this + 3288);
    do
    {
      v11 = *((unsigned int *)this + 149);
      __u = 1065353216;
      std::vector<float>::assign(v10 - 195, v11, &__u);
      v12 = *((unsigned int *)this + 149);
      __u = 1065353216;
      std::vector<float>::assign(v10 - 102, v12, &__u);
      v13 = *((unsigned int *)this + 145);
      __u = 0;
      std::vector<float>::assign(v10, v13, &__u);
      ++v9;
      v10 += 3;
    }
    while (v9 < *((unsigned int *)this + 145));
    LODWORD(v6) = *((_DWORD *)this + 149);
  }
  __u = 1065353216;
  std::vector<float>::assign((char **)this + 306, v6, &__u);
  __u = 0;
  return std::vector<float>::assign((char **)this + 408, 0x1EuLL, &__u);
}

float LimitWindBoost::initialize(LimitWindBoost *this, unsigned int a2, int a3, double a4, int a5)
{
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  std::vector<unsigned int>::size_type v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char **v18;
  unint64_t v19;
  double v20;
  double v21;
  float v22;
  float result;
  std::vector<unsigned int>::value_type __u;

  if (!a2)
    __assert_rtn("initialize", "LimitWindBoost.cpp", 27, "numChans > 0");
  if (!a3)
    __assert_rtn("initialize", "LimitWindBoost.cpp", 28, "blockSize > 0");
  if (a4 <= 0.0)
    __assert_rtn("initialize", "LimitWindBoost.cpp", 29, "sampleRate > 0.0f");
  *((_BYTE *)this + 104) = 1;
  *((_DWORD *)this + 6) = a3;
  *((_DWORD *)this + 7) = a2;
  *((double *)this + 4) = a4;
  *((_BYTE *)this + 40) = ChannelLayoutTagIsSupportedHOA(a5);
  std::vector<std::vector<float>>::resize((uint64_t *)this + 44, a2);
  std::vector<WindUtility::EventTracker<float>>::resize((_QWORD *)this + 47, *((unsigned int *)this + 7));
  v7 = *((unsigned int *)this + 7);
  __u = 0;
  std::vector<float>::assign((char **)this + 32, v7, &__u);
  v8 = *((unsigned int *)this + 7);
  __u = 0;
  std::vector<float>::assign((char **)this + 35, v8, &__u);
  v9 = *((unsigned int *)this + 7);
  __u = 0;
  std::vector<float>::assign((char **)this + 41, v9, &__u);
  v10 = *((unsigned int *)this + 7);
  __u = 0;
  std::vector<unsigned int>::assign((std::vector<unsigned int> *)((char *)this + 304), v10, &__u);
  v11 = (2 * *((_DWORD *)this + 6));
  __u = 0;
  std::vector<float>::assign((char **)this + 20, v11, &__u);
  v12 = (2 * *((_DWORD *)this + 6));
  __u = 0;
  std::vector<float>::assign((char **)this + 23, v12, &__u);
  v13 = (2 * *((_DWORD *)this + 6));
  __u = 0;
  std::vector<float>::assign((char **)this + 26, v13, &__u);
  v14 = (2 * *((_DWORD *)this + 6));
  __u = 0;
  std::vector<float>::assign((char **)this + 17, v14, &__u);
  v15 = (2 * *((_DWORD *)this + 6));
  __u = 1065353216;
  std::vector<float>::assign((char **)this + 29, v15, &__u);
  if (*((_DWORD *)this + 7))
  {
    v16 = 0;
    v17 = 0;
    do
    {
      v18 = (char **)(*((_QWORD *)this + 44) + v16);
      v19 = (2 * *((_DWORD *)this + 6));
      __u = 1065353216;
      std::vector<float>::assign(v18, v19, &__u);
      ++v17;
      v16 += 24;
    }
    while (v17 < *((unsigned int *)this + 7));
  }
  v20 = (float)*((unsigned int *)this + 6);
  v21 = *((double *)this + 4) * 0.5;
  v22 = 3000.0 / v21 * v20;
  *((_DWORD *)this + 13) = vcvtas_u32_f32(v22);
  *(float *)&v20 = 2000.0 / v21 * v20;
  result = roundf(*(float *)&v20);
  *((float *)this + 25) = result;
  return result;
}

void LimitWindBoost::LimitWindBoost(LimitWindBoost *this)
{
  _DWORD v1[3];

  *((_OWORD *)this + 7) = 0u;
  *(_OWORD *)((char *)this + 25) = 0u;
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  *(_OWORD *)((char *)this + 44) = 0u;
  *(_OWORD *)((char *)this + 60) = 0u;
  *(_OWORD *)((char *)this + 76) = 0u;
  *(_OWORD *)((char *)this + 89) = 0u;
  *((_OWORD *)this + 8) = 0u;
  *((_OWORD *)this + 9) = 0u;
  *((_OWORD *)this + 10) = 0u;
  *((_OWORD *)this + 11) = 0u;
  *((_OWORD *)this + 12) = 0u;
  *((_OWORD *)this + 13) = 0u;
  *((_OWORD *)this + 14) = 0u;
  *((_OWORD *)this + 15) = 0u;
  *((_OWORD *)this + 16) = 0u;
  *((_OWORD *)this + 17) = 0u;
  *((_OWORD *)this + 18) = 0u;
  *((_OWORD *)this + 19) = 0u;
  *((_OWORD *)this + 20) = 0u;
  *((_OWORD *)this + 21) = 0u;
  *((_OWORD *)this + 22) = 0u;
  *((_OWORD *)this + 23) = 0u;
  *((_OWORD *)this + 24) = 0u;
  v1[0] = 0;
  std::vector<float>::assign((char **)this, 0x12uLL, v1);
}

void sub_1B647DBA0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  void **v3;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  va_list va;

  va_start(va, a2);
  v5 = *(void **)(v2 + 376);
  if (v5)
  {
    *(_QWORD *)(v2 + 384) = v5;
    operator delete(v5);
  }
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  v6 = *(void **)(v2 + 328);
  if (v6)
  {
    *(_QWORD *)(v2 + 336) = v6;
    operator delete(v6);
  }
  v7 = *(void **)(v2 + 304);
  if (v7)
  {
    *(_QWORD *)(v2 + 312) = v7;
    operator delete(v7);
  }
  v8 = *(void **)(v2 + 280);
  if (v8)
  {
    *(_QWORD *)(v2 + 288) = v8;
    operator delete(v8);
  }
  v9 = *(void **)(v2 + 256);
  if (v9)
  {
    *(_QWORD *)(v2 + 264) = v9;
    operator delete(v9);
  }
  v10 = *(void **)(v2 + 232);
  if (v10)
  {
    *(_QWORD *)(v2 + 240) = v10;
    operator delete(v10);
  }
  v11 = *(void **)(v2 + 208);
  if (v11)
  {
    *(_QWORD *)(v2 + 216) = v11;
    operator delete(v11);
  }
  v12 = *(void **)(v2 + 184);
  if (v12)
  {
    *(_QWORD *)(v2 + 192) = v12;
    operator delete(v12);
  }
  v13 = *(void **)(v2 + 160);
  if (v13)
  {
    *(_QWORD *)(v2 + 168) = v13;
    operator delete(v13);
  }
  v14 = *(void **)(v2 + 136);
  if (v14)
  {
    *(_QWORD *)(v2 + 144) = v14;
    operator delete(v14);
  }
  v15 = *v3;
  if (*v3)
  {
    *(_QWORD *)(v2 + 120) = v15;
    operator delete(v15);
  }
  v16 = *(void **)v2;
  if (*(_QWORD *)v2)
  {
    *(_QWORD *)(v2 + 8) = v16;
    operator delete(v16);
  }
  _Unwind_Resume(a1);
}

void LimitWindBoost::~LimitWindBoost(LimitWindBoost *this)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void **v14;

  v2 = (void *)*((_QWORD *)this + 47);
  if (v2)
  {
    *((_QWORD *)this + 48) = v2;
    operator delete(v2);
  }
  v14 = (void **)((char *)this + 352);
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v14);
  v3 = (void *)*((_QWORD *)this + 41);
  if (v3)
  {
    *((_QWORD *)this + 42) = v3;
    operator delete(v3);
  }
  v4 = (void *)*((_QWORD *)this + 38);
  if (v4)
  {
    *((_QWORD *)this + 39) = v4;
    operator delete(v4);
  }
  v5 = (void *)*((_QWORD *)this + 35);
  if (v5)
  {
    *((_QWORD *)this + 36) = v5;
    operator delete(v5);
  }
  v6 = (void *)*((_QWORD *)this + 32);
  if (v6)
  {
    *((_QWORD *)this + 33) = v6;
    operator delete(v6);
  }
  v7 = (void *)*((_QWORD *)this + 29);
  if (v7)
  {
    *((_QWORD *)this + 30) = v7;
    operator delete(v7);
  }
  v8 = (void *)*((_QWORD *)this + 26);
  if (v8)
  {
    *((_QWORD *)this + 27) = v8;
    operator delete(v8);
  }
  v9 = (void *)*((_QWORD *)this + 23);
  if (v9)
  {
    *((_QWORD *)this + 24) = v9;
    operator delete(v9);
  }
  v10 = (void *)*((_QWORD *)this + 20);
  if (v10)
  {
    *((_QWORD *)this + 21) = v10;
    operator delete(v10);
  }
  v11 = (void *)*((_QWORD *)this + 17);
  if (v11)
  {
    *((_QWORD *)this + 18) = v11;
    operator delete(v11);
  }
  v12 = (void *)*((_QWORD *)this + 14);
  if (v12)
  {
    *((_QWORD *)this + 15) = v12;
    operator delete(v12);
  }
  v13 = *(void **)this;
  if (*(_QWORD *)this)
  {
    *((_QWORD *)this + 1) = v13;
    operator delete(v13);
  }
}

void LimitWindBoost::propagateParameterChanges(LimitWindBoost *this)
{
  double v2;
  uint64_t v3;
  double v4;
  float v5;
  float32x2_t v6;
  float v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64x2_t v11;
  float32x2_t v12;
  _QWORD *v13;
  float v14;

  if (!*((_BYTE *)this + 104))
    __assert_rtn("propagateParameterChanges", "LimitWindBoost.cpp", 124, "mInitialized");
  v2 = (float)*((unsigned int *)this + 6);
  v3 = *(_QWORD *)this;
  v4 = *((double *)this + 4);
  v5 = *(float *)(*(_QWORD *)this + 4) / (v4 * 0.5) * v2;
  *((float *)this + 14) = roundf(v5);
  v6.i32[0] = *(_DWORD *)(v3 + 32);
  v6.i32[1] = *(_DWORD *)(v3 + 52);
  *(uint32x2_t *)((char *)this + 44) = vcvt_u32_f32(vrnda_f32(vcvt_f32_f64(vmulq_n_f64(vdivq_f64(vcvtq_f64_f32(v6), (float64x2_t)vdupq_lane_s64(COERCE__INT64(v4 * 0.5), 0)), v2))));
  *(float *)&v2 = v4 / v2;
  v14 = *(float *)&v2;
  *((float *)this + 18) = expf(-1.0 / (float)(*(float *)(v3 + 24) * *(float *)&v2));
  *((float *)this + 20) = expf(-1.0 / (float)(*(float *)(v3 + 36) * v14));
  *((float *)this + 21) = expf(-1.0 / (float)(*(float *)(v3 + 40) * v14));
  *((float *)this + 23) = expf(-1.0 / (float)(*(float *)(v3 + 48) * v14));
  v7 = *(float *)(v3 + 44) * v14;
  *((float *)this + 22) = v7;
  *((float *)this + 15) = __exp10f(*(float *)(v3 + 8) / 20.0);
  *((float *)this + 16) = __exp10f(*(float *)(v3 + 12) / 20.0);
  *((float *)this + 17) = __exp10f(*(float *)(v3 + 20) / 20.0);
  *((float *)this + 19) = __exp10f(*(float *)(v3 + 28) / 20.0);
  *((float *)this + 24) = __exp10f(*(float *)(v3 + 56) / 10.0);
  v8 = *((_QWORD *)this + 47);
  v9 = *((_QWORD *)this + 48) - v8;
  if (v9)
  {
    v10 = v9 / 72;
    v11 = vcvtq_u64_f64(vcvtq_f64_f32(vmul_n_f32(*(float32x2_t *)(v3 + 60), v14)));
    v12 = vdiv_f32((float32x2_t)0xBF8000003F800000, vadd_f32(vcvt_f32_f64(vcvtq_f64_u64(v11)), (float32x2_t)vdup_n_s32(0x25800000u)));
    if ((unint64_t)(v9 / 72) <= 1)
      v10 = 1;
    v13 = (_QWORD *)(v8 + 48);
    do
    {
      *(v13 - 2) = v11.i64[0];
      *(v13 - 1) = (unint64_t)v7;
      *v13 = v11.i64[1];
      *((_OWORD *)v13 - 3) = xmmword_1B66A2630;
      *(v13 - 3) = v12;
      v13 += 9;
      --v10;
    }
    while (v10);
  }
}

void LimitWindBoost::process(uint64_t a1, uint64_t *a2, uint64_t a3, unsigned int *a4, const float **a5, unsigned int a6)
{
  float v8;
  float *v13;
  const float *v14;
  float v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  uint64_t v19;
  float v20;
  float v21;
  float v22;
  float v23;
  float v24;
  float *v25;
  unsigned int v26;
  unsigned int v27;
  vDSP_Length v28;
  float *v29;
  float *v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  float *v34;
  unsigned int v35;
  float v36;
  float v37;
  float v38;
  uint64_t v39;
  float v40;
  float v41;
  uint64_t v42;
  unsigned int v43;
  float v44;
  uint64_t v45;
  float v46;
  float v47;
  vDSP_Length v48;
  float v49;
  float v50;
  uint64_t v51;
  float *v52;
  vDSP_Length v53;
  float *v54;
  float v55;
  float *__N;
  float __B;
  float v58;
  float __C;
  float __D;
  DSPSplitComplex __A;
  DSPSplitComplex v62;

  if (!*(_BYTE *)(a1 + 104))
    __assert_rtn("process", "LimitWindBoost.cpp", 189, "mInitialized");
  v8 = *(float *)(a1 + 56);
  if (v8 > (float)(unint64_t)((a2[1] - *a2) >> 2))
    __assert_rtn("process", "LimitWindBoost.cpp", 190, "refMicEnergy.size() >= mFcBinLimitWindBoost");
  if (v8 > (float)(unint64_t)((uint64_t)(*(_QWORD *)(a3 + 8) - *(_QWORD *)a3) >> 2))
    __assert_rtn("process", "LimitWindBoost.cpp", 191, "beam.size() >= mFcBinLimitWindBoost");
  v13 = (float *)(*(_QWORD *)a3 + 4 * *(unsigned int *)(a1 + 24));
  __A.realp = *(float **)a3;
  __A.imagp = v13;
  vDSP_zvmags(&__A, 1, *(float **)(a1 + 136), 1, (unint64_t)v8);
  v14 = *(const float **)(a1 + 160);
  v15 = *(float *)(a1 + 56);
  if (v15 > 0.0)
  {
    v16 = *(_QWORD *)(a1 + 136);
    v17 = *a2;
    v18 = 1;
    do
    {
      v19 = v18 - 1;
      v20 = sqrtf(*(float *)(v16 + 4 * v19) / *(float *)(v17 + 4 * v19));
      v21 = 1.0;
      if (v20 > *(float *)(a1 + 60))
      {
        v22 = *(float *)(a1 + 64);
        if (v20 > v22)
        {
          v23 = 1.0 / (float)(v20 / v22);
          v21 = *(float *)(a1 + 68);
          if (v23 >= v21)
            v21 = v23;
        }
      }
      v14[v19] = v21;
      v24 = (float)v18;
      v15 = *(float *)(a1 + 56);
      ++v18;
    }
    while (v15 > v24);
  }
  vDSP_vmul(*(const float **)a3, 1, v14, 1, *(float **)a3, 1, (unint64_t)v15);
  v25 = (float *)(*(_QWORD *)a3 + 4 * *(unsigned int *)(a1 + 24));
  vDSP_vmul(v25, 1, v14, 1, v25, 1, (unint64_t)*(float *)(a1 + 56));
  vDSP_zvabs(&__A, 1, *(float **)(a1 + 136), 1, (unint64_t)*(float *)(a1 + 56));
  v26 = *(float *)(a1 + 56);
  if (*(_DWORD *)(a1 + 52) <= (2 * *(_DWORD *)(a1 + 44)))
    v27 = 2 * *(_DWORD *)(a1 + 44);
  else
    v27 = *(_DWORD *)(a1 + 52);
  if (v27 >= v26)
    v28 = v26;
  else
    v28 = v27;
  __D = 1.0 - *(float *)(a1 + 72);
  v29 = *(float **)(*(_QWORD *)(a1 + 352) + 24 * a6);
  vDSP_vsmsma(v29, 1, (const float *)(a1 + 72), v14, 1, &__D, v29, 1, v28);
  v30 = *(float **)(a1 + 184);
  vDSP_vthrsc(*(const float **)(*(_QWORD *)(a1 + 352) + 24 * a6), 1, (const float *)(a1 + 76), &LimitWindBoost::kMinusOnef, v30, 1, v28);
  vDSP_vthr(v30, 1, &LimitWindBoost::kZerof, v30, 1, v28);
  v58 = 0.0;
  __C = 0.0;
  if (!*(_BYTE *)(a1 + 104))
    __assert_rtn("isSensorNoise", "LimitWindBoost.cpp", 324, "mInitialized");
  vDSP_vclr(*(float **)(a1 + 208), 1, *(unsigned int *)(a1 + 24));
  v31 = *a4;
  if ((_DWORD)v31)
  {
    v32 = 0;
    v33 = 4;
    do
    {
      if (v32 != **(float **)a1)
      {
        v34 = (float *)(*(_QWORD *)&a4[v33] + 4 * *(unsigned int *)(a1 + 24));
        v62.realp = *(float **)&a4[v33];
        v62.imagp = v34;
        vDSP_zvmags(&v62, 1, *(float **)(a1 + 160), 1, *(unsigned int *)(a1 + 44));
        vDSP_vmax(*(const float **)(a1 + 208), 1, *(const float **)(a1 + 160), 1, *(float **)(a1 + 208), 1, *(unsigned int *)(a1 + 44));
        v31 = *a4;
      }
      ++v32;
      v33 += 4;
    }
    while (v32 < v31);
  }
  vDSP_vmul(v30, 1, *(const float **)(a1 + 208), 1, *(float **)(a1 + 208), 1, *(unsigned int *)(a1 + 44));
  vDSP_sve((const float *)(*(_QWORD *)(a1 + 208) + 4), 1, &__C, *(unsigned int *)(a1 + 44));
  if (__C > *(float *)(a1 + 96))
  {
    vDSP_sve(v30, 1, &v58, v28);
    v35 = v58;
  }
  else
  {
    v35 = 0;
  }
  if (*(_DWORD *)(a1 + 44) < v35)
    v35 = *(_DWORD *)(a1 + 44);
  if ((float)v35 >= (float)*(unsigned int *)(a1 + 48))
    v36 = (float)v35;
  else
    v36 = 0.0;
  if (!*(_BYTE *)(a1 + 104))
    __assert_rtn("getSmoothedCrossoverIndex", "LimitWindBoost.cpp", 355, "mInitialized");
  WindUtility::EventTracker<float>::update(*(_QWORD *)(a1 + 376) + 72 * a6, v36);
  if ((*(_DWORD *)(*(_QWORD *)(a1 + 376) + 72 * a6 + 64) - 3) > 1)
  {
    v37 = 1.0;
    if (*(float *)(*(_QWORD *)(a1 + 280) + 4 * a6) >= (float)*(unsigned int *)(a1 + 48))
      goto LABEL_36;
  }
  else
  {
    v37 = *(float *)(a1 + 80);
  }
  *(float *)(*(_QWORD *)(a1 + 328) + 4 * a6) = v37;
LABEL_36:
  v38 = *(float *)(a1 + 92);
  v39 = *(_QWORD *)(a1 + 256);
  v40 = *(float *)(v39 + 4 * a6);
  if (v40 >= v36)
  {
    v41 = *(float *)(a1 + 84);
    if (v40 > v36)
    {
      v42 = *(_QWORD *)(a1 + 304);
      v43 = *(_DWORD *)(v42 + 4 * a6);
      if (*(float *)(a1 + 88) > (float)v43)
      {
        *(_DWORD *)(v42 + 4 * a6) = v43 + 1;
        v41 = 1.0;
        if ((float)(v40 * 0.9) <= v36)
          *(_DWORD *)(v42 + 4 * a6) = 0;
      }
    }
  }
  else
  {
    v41 = *(float *)(*(_QWORD *)(a1 + 328) + 4 * a6);
    *(_DWORD *)(*(_QWORD *)(a1 + 304) + 4 * a6) = 0;
    if (*(float *)(*(_QWORD *)(a1 + 280) + 4 * a6) < v36)
      v38 = *(float *)(a1 + 80);
  }
  v44 = (float)((float)(1.0 - v41) * v36) + (float)(v41 * v40);
  *(float *)(v39 + 4 * a6) = v44;
  v45 = *(_QWORD *)(a1 + 280);
  v46 = (float)((float)(1.0 - v38) * v44) + (float)(v38 * *(float *)(v45 + 4 * a6));
  *(float *)(v45 + 4 * a6) = v46;
  vDSP_vclr(v30, 1, v28);
  v47 = v46 * *(float *)(*(_QWORD *)a1 + 68);
  if (v47 >= *(float *)(a1 + 100))
    v47 = *(float *)(a1 + 100);
  v48 = v47;
  if ((_DWORD)v48)
  {
    v49 = (float)v47;
    v50 = fmaxf(v46 + (float)(v49 * -0.5), 0.0);
    v51 = v50;
    if ((_DWORD)v51)
    {
      vDSP_vfill(&LimitWindBoost::kOnef, v30, 1, v50);
      LODWORD(v62.realp) = 1065353216;
      __B = -1.0 / v49;
      vDSP_vramp((const float *)&v62, &__B, &v30[v51], 1, v48);
      vDSP_vsub(v30, 1, *(const float **)(a1 + 232), 1, *(float **)(a1 + 160), 1, v28);
      vDSP_vsmul(v30, 1, (const float *)(a1 + 64), *(float **)(a1 + 184), 1, v28);
      if (a6 && *(_BYTE *)(a1 + 40))
      {
        vDSP_vmul(*(const float **)(a1 + 160), 1, *(const float **)a3, 1, *(float **)a3, 1, v28);
        v52 = (float *)(*(_QWORD *)a3 + 4 * *(unsigned int *)(a1 + 24));
        vDSP_vmul(*(const float **)(a1 + 160), 1, v52, 1, v52, 1, v28);
      }
      else
      {
        vDSP_vmma(*(const float **)(a1 + 160), 1, *(const float **)a3, 1, *(const float **)(a1 + 184), 1, *a5, 1, *(float **)a3, 1, v28);
        __N = (float *)(*(_QWORD *)a3 + 4 * *(unsigned int *)(a1 + 24));
        vDSP_vmma(*(const float **)(a1 + 160), 1, __N, 1, *(const float **)(a1 + 184), 1, a5[1], 1, __N, 1, v28);
      }
      vDSP_zvabs(&__A, 1, *(float **)(a1 + 160), 1, v28);
      vDSP_vsadd(*(const float **)(a1 + 160), 1, &LimitWindBoost::kEpsf, *(float **)(a1 + 160), 1, v28);
      vDSP_vdiv(*(const float **)(a1 + 160), 1, *(const float **)(a1 + 136), 1, *(float **)(a1 + 184), 1, v28);
      if ((int)v51 + (int)v48 >= v28)
        v53 = (v28 - v51);
      else
        v53 = v48;
      vDSP_vmul((const float *)(*(_QWORD *)(a1 + 184) + 4 * v51), 1, (const float *)(*(_QWORD *)a3 + 4 * v51), 1, (float *)(*(_QWORD *)a3 + 4 * v51), 1, v53);
      v54 = (float *)(*(_QWORD *)a3 + 4 * *(unsigned int *)(a1 + 24) + 4 * v51);
      vDSP_vmul((const float *)(*(_QWORD *)(a1 + 184) + 4 * v51), 1, v54, 1, v54, 1, v53);
      v55 = *(double *)(a1 + 32) * 0.5 * (float)((float)v46 / (float)*(unsigned int *)(a1 + 24));
      if (*(float *)(*(_QWORD *)a1 + 16) >= v55)
        v55 = *(float *)(*(_QWORD *)a1 + 16);
      *(float *)(*(_QWORD *)a1 + 16) = v55;
    }
  }
}

void PowerLogManager::FlushPowerLogEntries(PowerLogManager *this)
{
  uint64_t *v2;
  uint64_t *v3;
  char v4;
  char v5;
  float v6;
  float v7;
  const __CFAllocator *v8;
  CFNumberRef v9;
  CFNumberRef v11;
  BOOL v12;
  uint64_t i;
  uint64_t v14;
  CFMutableDictionaryRef theDict;
  __int16 v16;
  float v17;
  uint64_t valuePtr;

  valuePtr = 0;
  v2 = (uint64_t *)*((_QWORD *)this + 3);
  v3 = (uint64_t *)*((_QWORD *)this + 4);
  if (v2 == v3)
  {
    v5 = 0;
    v4 = 0;
    v6 = 0.0;
    v7 = 0.0;
  }
  else
  {
    v4 = 0;
    v5 = 0;
    v6 = 0.0;
    v7 = 0.0;
    do
    {
      LODWORD(theDict) = 0;
      if (CACFDictionary::GetFloat32(*v2, CFSTR("Avg Watts Measured"), (float *)&theDict))
      {
        v7 = *(float *)&theDict + v7;
        *((float *)&valuePtr + 1) = v7;
        v4 = 1;
      }
      v17 = 0.0;
      if (CACFDictionary::GetFloat32(*v2, CFSTR("Avg Watts Modelled"), &v17))
      {
        v6 = v17 + v6;
        *(float *)&valuePtr = v6;
        v5 = 1;
      }
      v2 += 2;
    }
    while (v2 != v3);
  }
  theDict = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  v16 = 257;
  if ((v4 & 1) != 0)
  {
    *((float *)&valuePtr + 1) = v7 / 12.0;
    v8 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    v9 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberFloatType, (char *)&valuePtr + 4);
    if (HIBYTE(v16))
    {
      if (v9 && theDict != 0)
        CFDictionarySetValue(theDict, CFSTR("Avg Watts Measured"), v9);
    }
    CFRelease(v9);
    if ((v5 & 1) == 0)
      goto LABEL_28;
    goto LABEL_21;
  }
  if ((v5 & 1) != 0)
  {
    v8 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
LABEL_21:
    *(float *)&valuePtr = v6 / 12.0;
    v11 = CFNumberCreate(v8, kCFNumberFloatType, &valuePtr);
    if (HIBYTE(v16))
    {
      if (v11)
        v12 = theDict == 0;
      else
        v12 = 1;
      if (!v12)
        CFDictionarySetValue(theDict, CFSTR("Avg Watts Modelled"), v11);
    }
    CFRelease(v11);
LABEL_28:
    PLLogRegisteredEvent();
  }
  v14 = *((_QWORD *)this + 3);
  for (i = *((_QWORD *)this + 4); i != v14; CACFDictionary::~CACFDictionary((CACFDictionary *)(i - 16)))
    ;
  *((_QWORD *)this + 4) = v14;
  CACFDictionary::~CACFDictionary((CACFDictionary *)&theDict);
}

void sub_1B647E96C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  CACFDictionary::~CACFDictionary((CACFDictionary *)&a9);
  _Unwind_Resume(a1);
}

uint64_t std::__split_buffer<CACFDictionary>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 16;
    CACFDictionary::~CACFDictionary((CACFDictionary *)(i - 16));
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

os_log_t ___ZL23PowerLogManagerLogScopev_block_invoke()
{
  _QWORD *v0;
  os_log_t result;

  v0 = (_QWORD *)operator new();
  v0[1] = 0;
  result = os_log_create("com.apple.coreaudio", "powerlogmanager");
  *v0 = result;
  PowerLogManagerLogScope(void)::scope = (uint64_t)v0;
  return result;
}

void PowerLogManager::DispatchOneTime(PowerLogManager *this)
{
  std::__shared_weak_count *v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  dispatch_time_t v6;
  NSObject *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t v13;
  _QWORD block[6];
  std::__shared_weak_count *v15;

  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 1);
  if (!v2 || (v3 = *(_QWORD *)this, (v4 = std::__shared_weak_count::lock(v2)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v5 = v4;
  *((_BYTE *)this + 72) = *((_QWORD *)this + 6) == 0;
  v6 = dispatch_time(0, 5000000000);
  v7 = *((_QWORD *)this + 2);
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 1174405120;
  block[2] = ___ZN15PowerLogManager15DispatchOneTimeEv_block_invoke;
  block[3] = &__block_descriptor_tmp_16860;
  block[4] = this;
  block[5] = v3;
  v15 = v5;
  p_shared_owners = (unint64_t *)&v5->__shared_owners_;
  do
    v9 = __ldxr(p_shared_owners);
  while (__stxr(v9 + 1, p_shared_owners));
  dispatch_after(v6, v7, block);
  v10 = v15;
  if (v15)
  {
    v11 = (unint64_t *)&v15->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  do
    v13 = __ldaxr(p_shared_owners);
  while (__stlxr(v13 - 1, p_shared_owners));
  if (!v13)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
}

void ___ZN15PowerLogManager15DispatchOneTimeEv_block_invoke(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  AudioUnit *v4;
  int v5;
  int v6;
  AudioUnitParameterID v7;
  OSStatus Parameter;
  NSObject *v9;
  CFNumberRef v10;
  OSStatus v11;
  NSObject *v12;
  CFNumberRef v13;
  __CFDictionary *Mutable;
  unint64_t v15;
  unint64_t v16;
  CFMutableDictionaryRef v17;
  int v18;
  char *v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  char *v25;
  char *v26;
  CFMutableDictionaryRef v27;
  int v28;
  char *v29;
  uint64_t v30;
  char *v31;
  const void *v32;
  int v33;
  BOOL v34;
  int64x2_t v35;
  char *v36;
  uint64_t v37;
  CFMutableDictionaryRef theDict;
  __int16 v39;
  AudioUnitParameterValue outValue[2];
  _BYTE buf[24];
  char *v42;
  uint64_t v43;
  uint64_t v44;

  v44 = *MEMORY[0x1E0C80C00];
  v3 = *(_QWORD *)(a1 + 32);
  v2 = *(_QWORD *)(a1 + 40);
  v4 = *(AudioUnit **)(v2 + 48);
  if (!v4)
    goto LABEL_70;
  v5 = *(_DWORD *)(v2 + 64);
  if (v5 == 1936748595)
    v6 = 15;
  else
    v6 = -1;
  if (v5 == 1936748594)
    v7 = 33;
  else
    v7 = v6;
  *(_QWORD *)outValue = 0;
  if (v5 != 1936748595)
    goto LABEL_19;
  Parameter = AudioUnitGetParameter(*v4, 0x10u, 0, 0, &outValue[1]);
  if (!Parameter)
  {
    v10 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberFloatType, &outValue[1]);
    goto LABEL_20;
  }
  if (PowerLogManagerLogScope(void)::once != -1)
    dispatch_once(&PowerLogManagerLogScope(void)::once, &__block_literal_global_16853);
  if (!PowerLogManagerLogScope(void)::scope)
  {
    v9 = MEMORY[0x1E0C81028];
LABEL_17:
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315650;
      *(_QWORD *)&buf[4] = "PowerLogManager.cpp";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 214;
      *(_WORD *)&buf[18] = 1024;
      *(_DWORD *)&buf[20] = Parameter;
      _os_log_impl(&dword_1B5ED0000, v9, OS_LOG_TYPE_ERROR, "%25s:%-5d Failed to get measured power: %d", buf, 0x18u);
    }
    goto LABEL_19;
  }
  v9 = *(NSObject **)PowerLogManagerLogScope(void)::scope;
  if (*(_QWORD *)PowerLogManagerLogScope(void)::scope)
    goto LABEL_17;
LABEL_19:
  v10 = 0;
LABEL_20:
  if (v7 == -1)
  {
LABEL_31:
    v13 = 0;
    goto LABEL_32;
  }
  v11 = AudioUnitGetParameter(**(AudioUnit **)(v2 + 48), v7, 0, 0, outValue);
  if (v11)
  {
    if (PowerLogManagerLogScope(void)::once != -1)
      dispatch_once(&PowerLogManagerLogScope(void)::once, &__block_literal_global_16853);
    if (PowerLogManagerLogScope(void)::scope)
    {
      v12 = *(NSObject **)PowerLogManagerLogScope(void)::scope;
      if (!*(_QWORD *)PowerLogManagerLogScope(void)::scope)
        goto LABEL_31;
    }
    else
    {
      v12 = MEMORY[0x1E0C81028];
    }
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315650;
      *(_QWORD *)&buf[4] = "PowerLogManager.cpp";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 227;
      *(_WORD *)&buf[18] = 1024;
      *(_DWORD *)&buf[20] = v11;
      _os_log_impl(&dword_1B5ED0000, v12, OS_LOG_TYPE_ERROR, "%25s:%-5d Failed to get modelled power: %d", buf, 0x18u);
    }
    goto LABEL_31;
  }
  v13 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberFloatType, outValue);
LABEL_32:
  Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  theDict = Mutable;
  v39 = 257;
  if (v10)
  {
    if (Mutable)
      CFDictionarySetValue(Mutable, CFSTR("Avg Watts Measured"), v10);
    CFRelease(v10);
  }
  if (v13)
  {
    if (theDict)
      CFDictionarySetValue(theDict, CFSTR("Avg Watts Modelled"), v13);
    CFRelease(v13);
  }
  if (theDict && CFDictionaryGetCount(theDict))
  {
    v15 = *(_QWORD *)(v2 + 40);
    v16 = *(_QWORD *)(v2 + 32);
    if (v16 >= v15)
    {
      v20 = *(_QWORD *)(v2 + 24);
      v21 = (uint64_t)(v16 - v20) >> 4;
      v22 = v21 + 1;
      if ((unint64_t)(v21 + 1) >> 60)
        std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
      v23 = v15 - v20;
      if (v23 >> 3 > v22)
        v22 = v23 >> 3;
      if ((unint64_t)v23 >= 0x7FFFFFFFFFFFFFF0)
        v24 = 0xFFFFFFFFFFFFFFFLL;
      else
        v24 = v22;
      v43 = v2 + 40;
      if (v24 >> 60)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v25 = (char *)operator new(16 * v24);
      v26 = &v25[16 * v21];
      *(_QWORD *)buf = v25;
      *(_QWORD *)&buf[8] = v26;
      *(_QWORD *)&buf[16] = v26;
      v42 = &v25[16 * v24];
      v27 = theDict;
      *(_QWORD *)v26 = theDict;
      v28 = v39;
      *((_WORD *)v26 + 4) = v39;
      if (v28)
      {
        CFRetain(v27);
        v20 = *(_QWORD *)(v2 + 24);
        v16 = *(_QWORD *)(v2 + 32);
        v29 = *(char **)&buf[16];
        v26 = *(char **)&buf[8];
      }
      else
      {
        v29 = v26;
      }
      v19 = v29 + 16;
      *(_QWORD *)&buf[16] = v29 + 16;
      if (v16 == v20)
      {
        v35 = vdupq_n_s64(v20);
      }
      else
      {
        v30 = 0;
        do
        {
          v31 = &v26[v30];
          v32 = *(const void **)(v16 + v30 - 16);
          *((_QWORD *)v31 - 2) = v32;
          v33 = *(unsigned __int8 *)(v16 + v30 - 8);
          *(v31 - 8) = v33;
          *(v31 - 7) = *(_BYTE *)(v16 + v30 - 7);
          if (v33)
            v34 = v32 == 0;
          else
            v34 = 1;
          if (!v34)
            CFRetain(v32);
          v30 -= 16;
        }
        while (v16 + v30 != v20);
        v26 += v30;
        v35 = *(int64x2_t *)(v2 + 24);
        v19 = *(char **)&buf[16];
      }
      *(_QWORD *)(v2 + 24) = v26;
      *(_QWORD *)(v2 + 32) = v19;
      *(int64x2_t *)&buf[8] = v35;
      v36 = *(char **)(v2 + 40);
      *(_QWORD *)(v2 + 40) = v42;
      v42 = v36;
      *(_QWORD *)buf = v35.i64[0];
      std::__split_buffer<CACFDictionary>::~__split_buffer((uint64_t)buf);
    }
    else
    {
      v17 = theDict;
      *(_QWORD *)v16 = theDict;
      v18 = v39;
      *(_WORD *)(v16 + 8) = v39;
      if (v18)
        CFRetain(v17);
      v19 = (char *)(v16 + 16);
      *(_QWORD *)(v2 + 32) = v16 + 16;
    }
    *(_QWORD *)(v2 + 32) = v19;
    if ((unint64_t)&v19[-*(_QWORD *)(v2 + 24)] >= 0xB1)
      PowerLogManager::FlushPowerLogEntries((PowerLogManager *)v2);
  }
  CACFDictionary::~CACFDictionary((CACFDictionary *)&theDict);
LABEL_70:
  v37 = *(_QWORD *)(v3 + 48);
  *(_BYTE *)(v3 + 72) = v37 == 0;
  if (v37)
    PowerLogManager::DispatchOneTime(*(PowerLogManager **)(a1 + 40));
}

void sub_1B647F04C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  uint64_t v6;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  std::__split_buffer<CACFDictionary>::~__split_buffer((uint64_t)va1);
  CACFDictionary::~CACFDictionary((CACFDictionary *)va);
  _Unwind_Resume(a1);
}

uint64_t __copy_helper_block_e8_40c43_ZTSNSt3__110shared_ptrI15PowerLogManagerEE(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(result + 48) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

uint64_t __destroy_helper_block_e8_40c43_ZTSNSt3__110shared_ptrI15PowerLogManagerEE(uint64_t a1)
{
  return std::shared_ptr<vp::services::Telephony_Utility>::~shared_ptr[abi:ne180100](a1 + 40);
}

void ___ZN15PowerLogManager18BeginPowerTrackingEv_block_invoke(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  int v4;
  const char *v5;
  __int16 v6;
  int v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v1 = *(_QWORD *)(a1 + 32);
  v2 = *(_QWORD *)(v1 + 56);
  if (v2)
  {
    if (*(_QWORD *)(v1 + 48) != v2)
    {
      *(_QWORD *)(v1 + 48) = v2;
      *(_DWORD *)(v1 + 64) = *(_DWORD *)(v1 + 68);
      if (*(_BYTE *)(v1 + 72))
        PowerLogManager::DispatchOneTime((PowerLogManager *)v1);
    }
    if (PowerLogManagerLogScope(void)::once != -1)
      dispatch_once(&PowerLogManagerLogScope(void)::once, &__block_literal_global_16853);
    if (PowerLogManagerLogScope(void)::scope)
    {
      v3 = *(NSObject **)PowerLogManagerLogScope(void)::scope;
      if (!*(_QWORD *)PowerLogManagerLogScope(void)::scope)
        goto LABEL_13;
    }
    else
    {
      v3 = MEMORY[0x1E0C81028];
    }
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEBUG))
    {
      v4 = 136315394;
      v5 = "PowerLogManager.cpp";
      v6 = 1024;
      v7 = 302;
      _os_log_impl(&dword_1B5ED0000, v3, OS_LOG_TYPE_DEBUG, "%25s:%-5d did begin speaker power tracking", (uint8_t *)&v4, 0x12u);
    }
  }
LABEL_13:
  *(_QWORD *)(v1 + 48) = *(_QWORD *)(v1 + 56);
  *(_DWORD *)(v1 + 64) = *(_DWORD *)(v1 + 68);
}

void PowerLogManager::EndPowerTracking(PowerLogManager *this)
{
  NSObject *v2;
  NSObject *v3;
  _QWORD block[5];
  uint8_t buf[4];
  const char *v6;
  __int16 v7;
  int v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  if (PowerLogManagerLogScope(void)::once != -1)
    dispatch_once(&PowerLogManagerLogScope(void)::once, &__block_literal_global_16853);
  if (PowerLogManagerLogScope(void)::scope)
  {
    v2 = *(NSObject **)PowerLogManagerLogScope(void)::scope;
    if (!*(_QWORD *)PowerLogManagerLogScope(void)::scope)
      goto LABEL_9;
  }
  else
  {
    v2 = MEMORY[0x1E0C81028];
  }
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 136315394;
    v6 = "PowerLogManager.cpp";
    v7 = 1024;
    v8 = 314;
    _os_log_impl(&dword_1B5ED0000, v2, OS_LOG_TYPE_DEBUG, "%25s:%-5d will end speaker power tracking...", buf, 0x12u);
  }
LABEL_9:
  v3 = *((_QWORD *)this + 2);
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = ___ZN15PowerLogManager16EndPowerTrackingEv_block_invoke;
  block[3] = &__block_descriptor_tmp_8_16874;
  block[4] = this;
  dispatch_sync(v3, block);
}

void ___ZN15PowerLogManager16EndPowerTrackingEv_block_invoke(uint64_t a1)
{
  uint64_t v1;
  int v2;
  const __CFAllocator *v3;
  CFNumberRef v4;
  CFNumberRef v5;
  __CFDictionary *Mutable;
  NSObject *v7;
  int valuePtr;
  _BYTE theDict[12];
  __int16 v10;
  int v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  v1 = *(_QWORD *)(a1 + 32);
  PowerLogManager::FlushPowerLogEntries((PowerLogManager *)v1);
  if (!*(_QWORD *)(v1 + 48))
    goto LABEL_21;
  v2 = *(_DWORD *)(v1 + 64);
  valuePtr = 0;
  if (v2 == 1936748595)
  {
    v3 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    v4 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberFloatType, &valuePtr);
LABEL_7:
    v5 = CFNumberCreate(v3, kCFNumberFloatType, &valuePtr);
    goto LABEL_8;
  }
  if ((v2 - 1936748596) >= 0xFFFFFFFE)
  {
    v4 = 0;
    v3 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    goto LABEL_7;
  }
  v4 = 0;
  v5 = 0;
LABEL_8:
  Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  *(_QWORD *)theDict = Mutable;
  *(_WORD *)&theDict[8] = 257;
  if (v4)
  {
    if (Mutable)
      CFDictionarySetValue(Mutable, CFSTR("Avg Watts Measured"), v4);
    CFRelease(v4);
  }
  if (v5)
  {
    if (theDict[9] && *(_QWORD *)theDict)
      CFDictionarySetValue(*(CFMutableDictionaryRef *)theDict, CFSTR("Avg Watts Modelled"), v5);
    CFRelease(v5);
  }
  if (*(_QWORD *)theDict && CFDictionaryGetCount(*(CFDictionaryRef *)theDict))
    PLLogRegisteredEvent();
  CACFDictionary::~CACFDictionary((CACFDictionary *)theDict);
LABEL_21:
  *(_QWORD *)(v1 + 48) = 0;
  *(_DWORD *)(v1 + 64) = 0;
  if (PowerLogManagerLogScope(void)::once != -1)
    dispatch_once(&PowerLogManagerLogScope(void)::once, &__block_literal_global_16853);
  if (PowerLogManagerLogScope(void)::scope)
  {
    v7 = *(NSObject **)PowerLogManagerLogScope(void)::scope;
    if (!*(_QWORD *)PowerLogManagerLogScope(void)::scope)
      return;
  }
  else
  {
    v7 = MEMORY[0x1E0C81028];
  }
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)theDict = 136315394;
    *(_QWORD *)&theDict[4] = "PowerLogManager.cpp";
    v10 = 1024;
    v11 = 320;
    _os_log_impl(&dword_1B5ED0000, v7, OS_LOG_TYPE_DEBUG, "%25s:%-5d did end speaker power tracking", theDict, 0x12u);
  }
}

void sub_1B647F56C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  _Unwind_Resume(exception_object);
}

void PowerLogManager::SetPowerVendor(PowerLogManager *this, OpaqueAudioComponentInstance **a2, int a3)
{
  NSObject *v6;
  NSObject *v7;
  _QWORD block[6];
  int v9;
  uint8_t buf[4];
  const char *v11;
  __int16 v12;
  int v13;
  __int16 v14;
  OpaqueAudioComponentInstance **v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  if (PowerLogManagerLogScope(void)::once != -1)
    dispatch_once(&PowerLogManagerLogScope(void)::once, &__block_literal_global_16853);
  if (PowerLogManagerLogScope(void)::scope)
  {
    v6 = *(NSObject **)PowerLogManagerLogScope(void)::scope;
    if (!*(_QWORD *)PowerLogManagerLogScope(void)::scope)
      goto LABEL_9;
  }
  else
  {
    v6 = MEMORY[0x1E0C81028];
  }
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 136315650;
    v11 = "PowerLogManager.cpp";
    v12 = 1024;
    v13 = 327;
    v14 = 2048;
    v15 = a2;
    _os_log_impl(&dword_1B5ED0000, v6, OS_LOG_TYPE_DEBUG, "%25s:%-5d set speaker power vendor to %p", buf, 0x1Cu);
  }
LABEL_9:
  v7 = *((_QWORD *)this + 2);
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = ___ZN15PowerLogManager14SetPowerVendorEPP28OpaqueAudioComponentInstancej_block_invoke;
  block[3] = &__block_descriptor_tmp_9_0;
  block[4] = this;
  block[5] = a2;
  v9 = a3;
  dispatch_sync(v7, block);
}

uint64_t ___ZN15PowerLogManager14SetPowerVendorEPP28OpaqueAudioComponentInstancej_block_invoke(uint64_t result)
{
  uint64_t v1;

  v1 = *(_QWORD *)(result + 32);
  *(_QWORD *)(v1 + 56) = *(_QWORD *)(result + 40);
  *(_DWORD *)(v1 + 68) = *(_DWORD *)(result + 48);
  return result;
}

char *std::vector<double>::assign(char **a1, unint64_t a2, _QWORD *a3)
{
  uint64_t v6;
  char *result;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  char *v13;
  unint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;

  v6 = (uint64_t)a1[2];
  result = *a1;
  if (a2 <= (v6 - (uint64_t)result) >> 3)
  {
    v13 = a1[1];
    v14 = (v13 - result) >> 3;
    if (v14 >= a2)
      v15 = a2;
    else
      v15 = (v13 - result) >> 3;
    if (v15)
    {
      v16 = result;
      do
      {
        *(_QWORD *)v16 = *a3;
        v16 += 8;
        --v15;
      }
      while (v15);
    }
    if (a2 <= v14)
    {
      a1[1] = &result[8 * a2];
    }
    else
    {
      v17 = &v13[8 * (a2 - v14)];
      v18 = 8 * a2 - 8 * v14;
      do
      {
        *(_QWORD *)v13 = *a3;
        v13 += 8;
        v18 -= 8;
      }
      while (v18);
      a1[1] = v17;
    }
  }
  else
  {
    if (result)
    {
      a1[1] = result;
      operator delete(result);
      v6 = 0;
      *a1 = 0;
      a1[1] = 0;
      a1[2] = 0;
    }
    if (a2 >> 61)
      std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
    v8 = v6 >> 2;
    if (v6 >> 2 <= a2)
      v8 = a2;
    if ((unint64_t)v6 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v8;
    result = std::vector<std::tuple<unsigned int,float>>::__vallocate[abi:ne180100](a1, v9);
    v10 = a1[1];
    v11 = &v10[8 * a2];
    v12 = 8 * a2;
    do
    {
      *(_QWORD *)v10 = *a3;
      v10 += 8;
      v12 -= 8;
    }
    while (v12);
    a1[1] = v11;
  }
  return result;
}

void MicSense_Core::setSampleRate(MicSense_Core *this, float a2)
{
  _QWORD *v3;
  uint64_t v4;
  _QWORD **v5;
  uint64_t v6;
  BOOL v7;
  uint64_t v8;
  BOOL v9;
  unint64_t v11;
  unint64_t v12;
  void **v13;
  const float *v14;
  int v15;

  *((float *)this + 34) = a2;
  v3 = (_QWORD *)*((_QWORD *)this + 76);
  if (v3)
    *v3 = (unint64_t)a2;
  v4 = *((_QWORD *)this + 8);
  if (v4)
  {
    v5 = (_QWORD **)*((_QWORD *)this + 77);
    do
    {
      if (*v5)
        **v5 = (unint64_t)a2;
      ++v5;
      --v4;
    }
    while (v4);
  }
  v6 = (unint64_t)a2;
  if ((uint64_t)(unint64_t)a2 > 44099)
  {
    if (v6 > 95999)
    {
      if (v6 == 96000)
      {
LABEL_34:
        v8 = 48;
        goto LABEL_36;
      }
      if (v6 == 176400 || v6 == 192000)
      {
        v8 = 96;
        goto LABEL_36;
      }
    }
    else
    {
      v7 = v6 == 44100 || v6 == 48000;
      if (!v7 && v6 == 88200)
        goto LABEL_34;
    }
LABEL_15:
    v8 = 24;
    goto LABEL_36;
  }
  if (v6 > 22049)
  {
    v9 = v6 == 22050 || v6 == 24000;
    if (v9 || v6 == 32000)
    {
      v8 = 20;
      goto LABEL_36;
    }
    goto LABEL_15;
  }
  if (v6 != 8000)
  {
    if (v6 == 16000)
    {
      v8 = 16;
      goto LABEL_36;
    }
    goto LABEL_15;
  }
  v8 = 12;
LABEL_36:
  *((_QWORD *)this + 11) = v8;
  v15 = 0;
  std::vector<float>::assign((char **)this + 51, v8 | 1, &v15);
  v11 = (unint64_t)(float)((float)(*((float *)this + 34) * 0.000625) + 0.5);
  if (v11 <= 1)
    v11 = 1;
  if (v11 >= 0x64)
    v12 = 100;
  else
    v12 = v11;
  if (v12 != *((_QWORD *)this + 81))
  {
    *((_QWORD *)this + 81) = v12;
    std::vector<float>::resize((uint64_t)this + 656, v12);
    std::vector<float>::resize((uint64_t)this + 680, v12);
  }
  v13 = (void **)*((_QWORD *)this + 80);
  if (v13)
  {
    CFilterBank::filterbank_destroy(v13);
    *((_QWORD *)this + 80) = 0;
  }
  *((_QWORD *)this + 80) = CFilterBank::filterbank_new((CFilterBank *)*((unsigned int *)this + 162), *((_DWORD *)this + 10), *((float *)this + 34));
  std::vector<float>::resize((uint64_t)this + 704, *((_QWORD *)this + 81));
  CFilterBank::filterbank_compute_bank32(*((_QWORD *)this + 80), *((const float **)this + 36), *((float **)this + 88));
  MicSense_Core::setParameters(this, v14);
}

void MicSense_Core::setParameters(MicSense_Core *this, const float *a2)
{
  float *v3;
  float v4;
  float v5;
  unint64_t v6;
  float v7;
  float v8;
  unint64_t v9;
  unint64_t v10;
  float v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  float v15;
  float v16;
  float v17;
  float v18;
  void *v19;
  uint64_t v20;
  char v21;

  v3 = *(float **)this;
  v4 = exp(*(float *)(*(_QWORD *)this + 8) * 0.115129255);
  *((float *)this + 31) = v4;
  v5 = *((float *)this + 34);
  v6 = *((_QWORD *)this + 3);
  v7 = v5 / (float)v6;
  *((float *)this + 32) = expf(-1.0 / (float)((float)(v3[5] * 0.001) * v7));
  v8 = exp(v3[3] * 0.115129255);
  *((float *)this + 30) = v8;
  *((_QWORD *)this + 10) = 1;
  *((float *)this + 33) = expf(-1.0 / (float)(v7 * (float)(v3[6] * 0.001)));
  v9 = (unint64_t)(float)(v3[1] + 0.5);
  v10 = vcvtps_u32_f32(v3[3] / -6.0206);
  *((_QWORD *)this + 7) = v9;
  *((_QWORD *)this + 9) = v10;
  v11 = v3[7];
  if (v9 == 5)
    v11 = 8.0;
  v12 = (((unint64_t)(float)((float)((float)(v5 * v11) * 0.001) + 0.5) - 1) & 0xFFFFFFFFFFFFFFFCLL) + 4;
  if (v12 >= v6)
    v12 = v6;
  if (*((_QWORD *)this + 12) != v12)
  {
    *((_QWORD *)this + 12) = v12;
    if (*((_QWORD *)this + 8))
    {
      v13 = 0;
      v14 = 0;
      do
      {
        vDSP_vfill(&MicSenseUtils::kZerof, *(float **)(*((_QWORD *)this + 66) + v13), 1, (uint64_t)(*(_QWORD *)(*((_QWORD *)this + 66) + v13 + 8) - *(_QWORD *)(*((_QWORD *)this + 66) + v13)) >> 2);
        MicSenseUtils::DynamicFIR<float>::setCoefficients(*(_QWORD *)(*((_QWORD *)this + 77) + 8 * v14++), (const void **)(*((_QWORD *)this + 66) + v13), *((_QWORD *)this + 12));
        v13 += 24;
      }
      while (*((_QWORD *)this + 8) > v14);
      v9 = *((_QWORD *)this + 7);
    }
  }
  switch(v9)
  {
    case 3uLL:
      v15 = (float)(*((_QWORD *)this + 12) >> 1);
      v16 = *((float *)this + 34);
      v17 = -0.001;
      break;
    case 2uLL:
      v15 = (float)(*((_QWORD *)this + 12) >> 1);
      v16 = *((float *)this + 34);
      v17 = -0.0005;
      break;
    case 1uLL:
      v15 = (float)(*((_QWORD *)this + 12) >> 1);
      v16 = *((float *)this + 34);
      v17 = -0.00025;
      break;
    default:
      goto LABEL_17;
  }
  *((_QWORD *)this + 13) = (unint64_t)(float)(v15 + (float)(v16 * v17));
LABEL_17:
  v18 = *(float *)(*(_QWORD *)this + 40);
  if (*((_BYTE *)this + 141) != v18 > 0.5)
  {
    if (v18 <= 0.5)
    {
      v21 = 0;
    }
    else
    {
      v19 = (void *)*((_QWORD *)this + 69);
      v20 = *((_QWORD *)this + 70) - (_QWORD)v19;
      if (v20 >= 1)
        bzero(v19, 8 * (((unint64_t)v20 >> 3) - ((unint64_t)v20 > 7)) + 8);
      v21 = 1;
    }
    *((_BYTE *)this + 141) = v21;
  }
}

void MicSense_Core::MicSense_Core(MicSense_Core *this, unint64_t a2, uint64_t a3, char a4)
{
  char **v7;
  char **v8;
  char **v9;
  __int128 *v10;
  uint64_t *v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  _QWORD *v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  VPTimeFreqConverter **v32;
  VPTimeFreqConverter *v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  unint64_t v37;
  char **v38;
  uint64_t v39;
  unint64_t v40;
  char **v41;
  unint64_t v42;
  char **v43;
  unint64_t v44;
  char **v45;
  _QWORD *v46;
  MicSenseUtils::GainsToFIR *v47;
  const float *v48;
  uint64_t *v49;
  char **v50;
  char **v51;
  char **v52;
  char **v53;
  char **v54;
  char **v55;
  char **v56;
  char **v57;
  uint64_t *v58;
  uint64_t *v59;
  uint64_t *v60;
  char *v61;
  uint64_t *v62;
  uint64_t *v63;
  _QWORD *v64;
  _QWORD v65[6];

  *(_QWORD *)this = 0;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = a3;
  v7 = (char **)((char *)this + 144);
  v8 = (char **)((char *)this + 168);
  v9 = (char **)((char *)this + 192);
  v56 = (char **)((char *)this + 240);
  v57 = (char **)((char *)this + 216);
  *((_QWORD *)this + 6) = 0;
  *((_QWORD *)this + 7) = 0;
  *((_QWORD *)this + 8) = a2;
  v54 = (char **)((char *)this + 312);
  v55 = (char **)((char *)this + 264);
  *(_OWORD *)((char *)this + 72) = 0u;
  v50 = (char **)((char *)this + 288);
  v51 = (char **)((char *)this + 360);
  v52 = (char **)((char *)this + 336);
  v53 = (char **)((char *)this + 384);
  *(_OWORD *)((char *)this + 88) = 0u;
  *(_OWORD *)((char *)this + 104) = 0u;
  v58 = (uint64_t *)((char *)this + 432);
  v59 = (uint64_t *)((char *)this + 480);
  v62 = (uint64_t *)((char *)this + 504);
  v63 = (uint64_t *)((char *)this + 456);
  *(_OWORD *)((char *)this + 120) = 0u;
  v60 = (uint64_t *)((char *)this + 528);
  v61 = (char *)this + 552;
  *((_DWORD *)this + 34) = 1195081728;
  v10 = (__int128 *)((char *)this + 576);
  v49 = (uint64_t *)((char *)this + 600);
  *((_WORD *)this + 70) = 0;
  v64 = (_QWORD *)((char *)this + 608);
  v11 = (uint64_t *)((char *)this + 616);
  *((_BYTE *)this + 142) = a4;
  v12 = 2 * a3;
  bzero((char *)this + 144, 0x248uLL);
  *((_QWORD *)this + 4) = v12;
  *((_QWORD *)this + 5) = a3 + 1;
  std::vector<std::unique_ptr<VPTimeFreqConverter>>::resize(v10, a2);
  v13 = (_QWORD *)*((_QWORD *)this + 78);
  v14 = *((_QWORD *)this + 77);
  v15 = ((uint64_t)v13 - v14) >> 3;
  if (a2 <= v15)
  {
    if (a2 < v15)
    {
      v24 = (_QWORD *)(v14 + 8 * a2);
      while (v13 != v24)
      {
        v26 = (_QWORD *)*--v13;
        v25 = v26;
        *v13 = 0;
        if (v26)
          std::default_delete<MicSenseUtils::DynamicFIR<float>>::operator()[abi:ne180100](v25);
      }
      *((_QWORD *)this + 78) = v24;
    }
  }
  else
  {
    v16 = a2 - v15;
    v17 = *((_QWORD *)this + 79);
    if (a2 - v15 <= (v17 - (uint64_t)v13) >> 3)
    {
      bzero(*((void **)this + 78), 8 * v16);
      *((_QWORD *)this + 78) = &v13[v16];
    }
    else
    {
      if (a2 >> 61)
        std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
      v65[4] = (char *)this + 632;
      v18 = v17 - v14;
      v19 = v18 >> 2;
      if (v18 >> 2 <= a2)
        v19 = a2;
      if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFF8)
        v20 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v20 = v19;
      v21 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<SlidingWindowDTFT<float> *>>(v20);
      v22 = &v21[8 * v15];
      v65[0] = v21;
      v65[1] = v22;
      v65[3] = &v21[8 * v23];
      bzero(v22, 8 * v16);
      v65[2] = &v22[8 * v16];
      std::vector<std::unique_ptr<AllPassComb>>::__swap_out_circular_buffer(v11, v65);
      std::__split_buffer<std::unique_ptr<MicSenseUtils::DynamicFIR<float>>>::~__split_buffer((uint64_t)v65);
    }
  }
  std::vector<std::vector<float>>::resize(v63, a2);
  std::vector<std::vector<float>>::resize(v62, a2);
  std::vector<unsigned long>::resize((uint64_t)v61, a2);
  std::vector<std::vector<float>>::resize(v60, a2);
  std::vector<std::vector<float>>::resize(v59, a2);
  std::vector<std::vector<float>>::resize(v58, a2);
  v27 = *((_QWORD *)this + 4);
  LODWORD(v65[0]) = 0;
  std::vector<float>::assign(v7, v27, v65);
  LODWORD(v65[0]) = 0;
  std::vector<float>::assign(v8, v27, v65);
  LODWORD(v65[0]) = 0;
  std::vector<float>::assign(v9, v27, v65);
  LODWORD(v65[0]) = 0;
  std::vector<float>::assign(v57, v27, v65);
  LODWORD(v65[0]) = 0;
  std::vector<float>::assign(v56, v27, v65);
  v65[0] = 0;
  std::vector<double>::assign(v55, v27, v65);
  LODWORD(v65[0]) = 0;
  std::vector<float>::assign(v54, v27, v65);
  LODWORD(v65[0]) = 0;
  std::vector<float>::assign(v53, v27, v65);
  LODWORD(v65[0]) = 0;
  std::vector<float>::assign(v52, v27, v65);
  LODWORD(v65[0]) = 0;
  std::vector<float>::assign(v51, v27, v65);
  v28 = *((_QWORD *)this + 4);
  LODWORD(v65[0]) = 1065353216;
  std::vector<float>::assign(v50, v28, v65);
  if (*((_QWORD *)this + 8))
  {
    v29 = 0;
    v30 = 0;
    v31 = 0;
    do
    {
      v32 = (VPTimeFreqConverter **)(*(_QWORD *)v10 + v29);
      v33 = (VPTimeFreqConverter *)operator new();
      VPTimeFreqConverter::VPTimeFreqConverter(v33, 1, *((_DWORD *)this + 6));
      std::unique_ptr<VPTimeFreqConverter>::reset[abi:ne180100](v32, v33);
      v34 = *v11;
      v35 = operator new();
      MicSenseUtils::DynamicFIR<float>::DynamicFIR(v35, *((_QWORD *)this + 3));
      v36 = *(_QWORD **)(v34 + 8 * v31);
      *(_QWORD *)(v34 + 8 * v31) = v35;
      if (v36)
        std::default_delete<MicSenseUtils::DynamicFIR<float>>::operator()[abi:ne180100](v36);
      v37 = *((_QWORD *)this + 5);
      v38 = (char **)(*((_QWORD *)this + 57) + v30);
      v39 = *((_QWORD *)this + 60);
      LODWORD(v65[0]) = 0;
      std::vector<float>::assign(v38, v37, v65);
      LODWORD(v65[0]) = 0;
      std::vector<float>::assign((char **)(v39 + v30), v37, v65);
      v40 = *((_QWORD *)this + 3);
      v41 = (char **)(*((_QWORD *)this + 66) + v30);
      LODWORD(v65[0]) = 0;
      std::vector<float>::assign(v41, v40, v65);
      v42 = *((_QWORD *)this + 5);
      v43 = (char **)(*((_QWORD *)this + 63) + v30);
      LODWORD(v65[0]) = 786163455;
      std::vector<float>::assign(v43, v42, v65);
      v44 = *((_QWORD *)this + 4);
      v45 = (char **)(*((_QWORD *)this + 54) + v30);
      LODWORD(v65[0]) = 0;
      std::vector<float>::assign(v45, v44, v65);
      ++v31;
      v30 += 24;
      v29 += 8;
    }
    while (*((_QWORD *)this + 8) > v31);
  }
  v46 = (_QWORD *)operator new();
  *v46 = 0;
  v46[1] = 0;
  std::unique_ptr<vp::vx::Control_Center_Manager>::reset[abi:ne180100](v49, (uint64_t)v46);
  v47 = (MicSenseUtils::GainsToFIR *)operator new();
  MicSenseUtils::GainsToFIR::GainsToFIR(v47, *((_QWORD *)this + 4));
  std::unique_ptr<MicSenseUtils::GainsToFIR>::reset[abi:ne180100](v64, (uint64_t)v47);
  MultiRadixRealFFT::Initialize(*((MultiRadixRealFFT **)this + 75), *((_DWORD *)this + 8));
  CreateMagicalWindow(*((_QWORD *)this + 48), (*((_QWORD *)this + 49) - *((_QWORD *)this + 48)) >> 2);
  std::vector<float>::__assign_with_size[abi:ne180100]<float const*,float const*>((char *)this, MicSense_Core::kDefaultValue, (uint64_t)&MicSenseUtils::kZerof, 0x11uLL);
  MicSense_Core::setSampleRate(this, 48000.0);
  MicSense_Core::setParameters(this, v48);
}

void sub_1B6480300(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, void **a10, void **a11, uint64_t *a12, void **a13, void **a14, void **a15, void **a16, void **a17, void **a18, void **a19, void **a20,uint64_t a21,uint64_t a22,uint64_t a23,void **a24,uint64_t a25,uint64_t a26,_QWORD *a27)
{
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void *v33;
  void *v34;
  void *v35;
  void *v36;
  void *v37;
  void *v38;
  void *v39;
  void *v40;
  void *v41;
  void *v42;
  void *v43;
  void *v44;
  void *v45;
  void *v46;
  void *v47;
  void *v48;
  void *v49;

  MEMORY[0x1BCC95CEC](v30, 0x10A0C40A3058978);
  v33 = *(void **)(v27 + 704);
  if (v33)
  {
    *(_QWORD *)(v27 + 712) = v33;
    operator delete(v33);
  }
  v34 = *(void **)(v27 + 680);
  if (v34)
  {
    *(_QWORD *)(v27 + 688) = v34;
    operator delete(v34);
  }
  v35 = *(void **)(v27 + 656);
  if (v35)
  {
    *(_QWORD *)(v27 + 664) = v35;
    operator delete(v35);
  }
  *(_QWORD *)(v31 - 136) = v29;
  std::vector<std::unique_ptr<MicSenseUtils::DynamicFIR<float>>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v31 - 136));
  std::unique_ptr<MicSenseUtils::GainsToFIR>::reset[abi:ne180100](a27, 0);
  std::unique_ptr<vp::vx::Control_Center_Manager>::reset[abi:ne180100](a12, 0);
  *(_QWORD *)(v31 - 136) = v28;
  std::vector<std::unique_ptr<VPTimeFreqConverter>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v31 - 136));
  v36 = *a24;
  if (*a24)
  {
    *(_QWORD *)(v27 + 560) = v36;
    operator delete(v36);
  }
  *(_QWORD *)(v31 - 136) = a23;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v31 - 136));
  *(_QWORD *)(v31 - 136) = a25;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v31 - 136));
  *(_QWORD *)(v31 - 136) = a22;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v31 - 136));
  *(_QWORD *)(v31 - 136) = a26;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v31 - 136));
  *(_QWORD *)(v31 - 136) = a21;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v31 - 136));
  v37 = *(void **)(v27 + 408);
  if (v37)
  {
    *(_QWORD *)(v27 + 416) = v37;
    operator delete(v37);
  }
  v38 = *a16;
  if (*a16)
  {
    *(_QWORD *)(v27 + 392) = v38;
    operator delete(v38);
  }
  v39 = *a14;
  if (*a14)
  {
    *(_QWORD *)(v27 + 368) = v39;
    operator delete(v39);
  }
  v40 = *a15;
  if (*a15)
  {
    *(_QWORD *)(v27 + 344) = v40;
    operator delete(v40);
  }
  v41 = *a17;
  if (*a17)
  {
    *(_QWORD *)(v27 + 320) = v41;
    operator delete(v41);
  }
  v42 = *a13;
  if (*a13)
  {
    *(_QWORD *)(v27 + 296) = v42;
    operator delete(v42);
  }
  v43 = *a18;
  if (*a18)
  {
    *(_QWORD *)(v27 + 272) = v43;
    operator delete(v43);
  }
  v44 = *a19;
  if (*a19)
  {
    *(_QWORD *)(v27 + 248) = v44;
    operator delete(v44);
  }
  v45 = *a20;
  if (*a20)
  {
    *(_QWORD *)(v27 + 224) = v45;
    operator delete(v45);
  }
  v46 = *a9;
  if (*a9)
  {
    *(_QWORD *)(v27 + 200) = v46;
    operator delete(v46);
  }
  v47 = *a10;
  if (*a10)
  {
    *(_QWORD *)(v27 + 176) = v47;
    operator delete(v47);
  }
  v48 = *a11;
  if (*a11)
  {
    *(_QWORD *)(v27 + 152) = v48;
    operator delete(v48);
  }
  v49 = *(void **)v27;
  if (*(_QWORD *)v27)
  {
    *(_QWORD *)(v27 + 8) = v49;
    operator delete(v49);
  }
  _Unwind_Resume(a1);
}

_QWORD *MicSense_Core::setNoiseProfile(_QWORD *result, _QWORD *a2)
{
  _QWORD *v2;
  unint64_t v3;
  uint64_t v5;
  unint64_t i;
  uint64_t v7;

  if (a2[1] != *a2)
  {
    v2 = result;
    v3 = result[8];
    if (v3)
    {
      v5 = 0;
      for (i = 0; i < v3; ++i)
      {
        v7 = v2[5];
        if (v7)
        {
          result = memmove(*(void **)(v2[63] + v5), *(const void **)(*a2 + v5), 4 * v7);
          v3 = v2[8];
        }
        v5 += 24;
      }
    }
  }
  return result;
}

unint64_t MicSense_Core::getPreferredBlockProcessorSize(MicSense_Core *this)
{
  uint64_t v1;
  unint64_t v2;
  unint64_t v3;
  unint64_t v5;
  uint64_t i;
  uint8x8_t v7;
  BOOL v8;
  BOOL v9;
  uint8x8_t v10;
  BOOL v11;
  BOOL v12;
  unint64_t v13;
  uint8x8_t v14;

  if ((uint64_t)this > 44099)
  {
    if ((uint64_t)this > 95999)
    {
      if (this != (MicSense_Core *)96000)
      {
        if (this == (MicSense_Core *)176400 || this == (MicSense_Core *)192000)
          return 2048;
        goto LABEL_22;
      }
    }
    else
    {
      if (this == (MicSense_Core *)44100 || this == (MicSense_Core *)48000)
        return 512;
      if (this != (MicSense_Core *)88200)
        goto LABEL_22;
    }
    return 1024;
  }
  if ((uint64_t)this <= 22049)
  {
    if (this == (MicSense_Core *)8000)
      return 80;
    if (this == (MicSense_Core *)16000)
      return 192;
  }
  else
  {
    if (this == (MicSense_Core *)22050 || this == (MicSense_Core *)24000)
      return 240;
    if (this == (MicSense_Core *)32000)
      return 256;
  }
LABEL_22:
  v2 = vcvtmd_u64_f64((double)(unint64_t)this * 0.008);
  v3 = vcvtpd_u64_f64((double)(unint64_t)this * 0.016);
  if (v2 > v3)
    return 512;
  v5 = 2 * v2;
  v1 = 512;
  for (i = -2 * v2; ; i -= 2)
  {
    if (i)
    {
      if ((v5 & (v5 - 1)) == 0)
        break;
      v7 = (uint8x8_t)vcnt_s8((int8x8_t)(v5 / 3));
      v7.i16[0] = vaddlv_u8(v7);
      v8 = i == -3 * (v5 / 3) && v5 >= 3;
      v9 = !v8 || v7.u32[0] > 1uLL;
      if (!v9 && log2((double)(v5 / 3)) >= 4.0)
        break;
      v10 = (uint8x8_t)vcnt_s8((int8x8_t)(v5 / 5));
      v10.i16[0] = vaddlv_u8(v10);
      v11 = i == -5 * (v5 / 5) && v5 >= 5;
      v12 = !v11 || v10.u32[0] > 1uLL;
      if (!v12 && log2((double)(v5 / 5)) >= 4.0)
        break;
      v13 = v5 / 0xF;
      if (i == -15 * (v5 / 0xF) && v5 >= 0xF)
      {
        v14 = (uint8x8_t)vcnt_s8((int8x8_t)v13);
        v14.i16[0] = vaddlv_u8(v14);
        if (v14.u32[0] <= 1uLL && log2((double)v13) >= 4.0)
          break;
      }
    }
    ++v2;
    v5 += 2;
    if (v2 > v3)
      return v1;
  }
  return v2;
}

unint64_t MicSense_Core::getPreferredBlockSize(MicSense_Core *this, unint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v6;
  uint64_t i;
  unint64_t v9;
  uint8x8_t v10;
  unint64_t v11;
  uint8x8_t v12;
  unint64_t v13;
  uint8x8_t v14;

  v2 = vcvtmd_u64_f64((double)(unint64_t)this * 0.008);
  v3 = vcvtpd_u64_f64((double)(unint64_t)this * 0.016);
  if (v2 > v3)
    return 0;
  v6 = 2 * v2;
  for (i = -2 * v2; ; i -= 2)
  {
    if (!(a2 % v2) && i != 0)
    {
      if ((v6 & (v6 - 1)) == 0)
        break;
      v9 = v6 / 3;
      if (i == -3 * (v6 / 3) && v6 >= 3)
      {
        v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
        v10.i16[0] = vaddlv_u8(v10);
        if (v10.u32[0] <= 1uLL && log2((double)v9) >= 4.0)
          break;
      }
      v11 = v6 / 5;
      if (i == -5 * (v6 / 5) && v6 >= 5)
      {
        v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
        v12.i16[0] = vaddlv_u8(v12);
        if (v12.u32[0] <= 1uLL && log2((double)v11) >= 4.0)
          break;
      }
      v13 = v6 / 0xF;
      if (i == -15 * (v6 / 0xF) && v6 >= 0xF)
      {
        v14 = (uint8x8_t)vcnt_s8((int8x8_t)v13);
        v14.i16[0] = vaddlv_u8(v14);
        if (v14.u32[0] <= 1uLL && log2((double)v13) >= 4.0)
          break;
      }
    }
    ++v2;
    v6 += 2;
    if (v2 > v3)
      return 0;
  }
  return v2;
}

void MicSense_Core::psdFFT(uint64_t a1, DSPSplitComplex *__A, float **a3, float a4)
{
  float *v6;
  float v7;
  float v8;
  vDSP_Length v9;
  float __B;

  __B = a4;
  v6 = *a3;
  v7 = *__A->realp;
  v8 = *__A->imagp;
  v9 = *(_QWORD *)(a1 + 40) - 1;
  vDSP_zvmags(__A, 1, *a3, 1, v9);
  *v6 = v7 * v7;
  v6[v9] = v8 * v8;
  vDSP_vsmul(*a3, 1, &__B, *a3, 1, *(_QWORD *)(a1 + 40));
}

float MicSense_Core::arburg(MicSense_Core *this, const float *__A, vDSP_Length __N, uint64_t a4, float *a5)
{
  char *v6;
  void *v7;
  char *v8;
  double *v10;
  vDSP_Length v11;
  float v13;
  vDSP_Length v14;
  vDSP_Length v15;
  uint64_t v16;
  const double *v17;
  char *v18;
  char *v19;
  float v20;
  float v21;
  float v22;
  BOOL v23;
  const double *v25;
  vDSP_Length v26;
  double *v28;
  double *v29;
  float __B;
  double __C;

  if (!__N)
    __assert_rtn("arburg", "MicSense_Core.cpp", 530, "length > 0");
  v6 = (char *)*((_QWORD *)this + 30);
  if (__N > (uint64_t)(*((_QWORD *)this + 31) - (_QWORD)v6) >> 2)
    __assert_rtn("arburg", "MicSense_Core.cpp", 531, "mTmpVector5.size() >= length");
  v7 = (void *)*((_QWORD *)this + 21);
  if (__N > (uint64_t)(*((_QWORD *)this + 22) - (_QWORD)v7) >> 2)
    __assert_rtn("arburg", "MicSense_Core.cpp", 532, "mTmpVector2.size() >= length");
  v8 = (char *)*((_QWORD *)this + 24);
  if (__N > (uint64_t)(*((_QWORD *)this + 25) - (_QWORD)v8) >> 2)
    __assert_rtn("arburg", "MicSense_Core.cpp", 533, "mTmpVector3.size() >= length");
  v10 = (double *)*((_QWORD *)this + 33);
  v11 = a4 + 1;
  if ((uint64_t)(*((_QWORD *)this + 34) - (_QWORD)v10) >> 3 < (unint64_t)(2 * (a4 + 1)))
    __assert_rtn("arburg", "MicSense_Core.cpp", 534, "mTmpVector1D.size() >= 2 * (order + 1)");
  LODWORD(__C) = 0;
  vDSP_svesq(__A, 1, (float *)&__C, __N);
  v13 = *(float *)&__C / (float)__N;
  memcpy(v6, __A, 4 * __N);
  memcpy(v7, __A, 4 * __N);
  v26 = v11;
  bzero(v10, 8 * v11);
  *v10 = 1.0;
  v25 = v10;
  if (a4)
  {
    v14 = 0;
    v28 = v10 + 1;
    v29 = &v10[a4 + 1];
    v15 = __N - 1;
    v16 = 4;
    v17 = v10;
    v18 = v8;
    v19 = v6;
    do
    {
      ++v14;
      LODWORD(__C) = 0;
      vDSP_dotpr((const float *)v7, 1, (const float *)&v19[v16], 1, (float *)&__C, v15);
      v20 = *(float *)&__C * -2.0;
      LODWORD(__C) = 0;
      vDSP_svesq((const float *)&v19[v16], 1, (float *)&__C, v15);
      v21 = *(float *)&__C;
      LODWORD(__C) = 0;
      vDSP_svesq((const float *)v7, 1, (float *)&__C, v15);
      __C = v20 / ((float)(v21 + *(float *)&__C) + 2.22044605e-16);
      v22 = __C;
      __B = v22;
      vDSP_vsma((const float *)v7, 1, &__B, (const float *)&v19[v16], 1, (float *)&v18[v16], 1, v15);
      vDSP_vsma((const float *)&v19[v16], 1, &__B, (const float *)v7, 1, (float *)v7, 1, v15);
      vDSP_vsmulD(v17, -1, &__C, v29, 1, v14);
      vDSP_vaddD(v29, 1, v28, 1, v28, 1, v14);
      v23 = v19 == v6;
      if (v19 == v6)
        v19 = v8;
      else
        v19 = v6;
      if (v23)
        v18 = v6;
      else
        v18 = v8;
      v13 = v13 * (float)(1.0 - (float)(__B * __B));
      ++v17;
      v16 += 4;
      --v15;
    }
    while (a4 != v14);
  }
  vDSP_vdpsp(v25, 1, a5, 1, v26);
  return v13;
}

void MicSense_Core::psdburg(uint64_t a1, const void *a2, uint64_t a3, uint64_t a4, float a5)
{
  float *v8;
  float *v9;
  float v10;
  float v11;
  vDSP_Length v12;
  float v13;
  DSPSplitComplex __A;

  if (*(_QWORD *)(a1 + 40) > (unint64_t)((uint64_t)(*(_QWORD *)(a4 + 8) - *(_QWORD *)a4) >> 2))
    __assert_rtn("psdburg", "MicSense_Core.cpp", 502, "psd.size() >= mCplxVectorSize");
  memcpy(*(void **)(a1 + 312), a2, 4 * a3 + 4);
  v8 = *(float **)(a1 + 168);
  __A.realp = *(float **)(a1 + 144);
  __A.imagp = v8;
  MultiRadixRealFFT::RealOutOfPlaceForwardTransform(*(MultiRadixRealFFT **)(a1 + 600), *(DSPComplex **)(a1 + 312), &__A, 1.0);
  v9 = *(float **)a4;
  v10 = *__A.realp;
  v11 = *__A.imagp;
  v12 = *(_QWORD *)(a1 + 40) - 1;
  vDSP_zvmags(&__A, 1, *(float **)a4, 1, v12);
  *v9 = v10 * v10;
  v9[v12] = v11 * v11;
  vDSP_vthr(*(const float **)a4, 1, &MicSenseUtils::kepsf, *(float **)a4, 1, *(_QWORD *)(a1 + 40));
  v13 = a5;
  if (*(_QWORD *)(a1 + 56) != 6 && *(_QWORD *)(a1 + 80) != 1)
    v13 = a5 + a5;
  vDSP_svdiv(&v13, *(const float **)a4, 1, *(float **)a4, 1, *(_QWORD *)(a1 + 40));
}

void MicSense_Core::computeSuppressionGains(uint64_t a1, const float **a2, uint64_t a3)
{
  float *v6;
  uint64_t v7;
  uint64_t v8;
  float *v9;
  float *v10;
  unint64_t v11;
  float *v12;
  float v13;
  float v14;
  float v15;
  float v16;
  float v17;
  unint64_t v18;
  uint64_t v19;
  vDSP_Length v20;
  float *v21;
  float *v22;
  float v23;
  float __D;
  float v25;
  float __A;
  uint64_t __B;

  if (*(_BYTE *)(a1 + 141))
  {
    *((float *)&__B + 1) = (float)*(unint64_t *)(*(_QWORD *)(a1 + 552) + 8 * a3);
    vDSP_vsmul(*(const float **)(*(_QWORD *)(a1 + 504) + 24 * a3), 1, (const float *)&__B + 1, *(float **)(*(_QWORD *)(a1 + 504) + 24 * a3), 1, *(_QWORD *)(a1 + 40));
    v6 = *(float **)(*(_QWORD *)(a1 + 504) + 24 * a3);
    vDSP_vadd(v6, 1, *a2, 1, v6, 1, *(_QWORD *)(a1 + 40));
    v7 = *(_QWORD *)(a1 + 552);
    v8 = *(_QWORD *)(v7 + 8 * a3) + 1;
    *(_QWORD *)(v7 + 8 * a3) = v8;
    *((float *)&__B + 1) = 1.0 / (float)(unint64_t)v8;
    v9 = *(float **)(*(_QWORD *)(a1 + 504) + 24 * a3);
    vDSP_vsmul(v9, 1, (const float *)&__B + 1, v9, 1, *(_QWORD *)(a1 + 40));
  }
  v25 = *(float *)(a1 + 128);
  __D = 1.0 - v25;
  v10 = *(float **)(*(_QWORD *)(a1 + 456) + 24 * a3);
  vDSP_vsmsma(v10, 1, &v25, *a2, 1, &__D, v10, 1, *(_QWORD *)(a1 + 40));
  v23 = *(float *)(*(_QWORD *)a1 + 16);
  vDSP_vsmul(*(const float **)(*(_QWORD *)(a1 + 504) + 24 * a3), 1, &v23, *(float **)(a1 + 144), 1, *(_QWORD *)(a1 + 40));
  vDSP_vthr(*(const float **)(*(_QWORD *)(a1 + 456) + 24 * a3), 1, &MicSenseUtils::kepsf, *(float **)(a1 + 168), 1, *(_QWORD *)(a1 + 40));
  vDSP_vdiv(*(const float **)(a1 + 168), 1, *(const float **)(a1 + 144), 1, *(float **)(a1 + 192), 1, *(_QWORD *)(a1 + 40));
  if (*(_QWORD *)(a1 + 72))
  {
    vDSP_vadd(*(const float **)(a1 + 192), 1, *(const float **)(a1 + 288), 1, *(float **)(a1 + 144), 1, *(_QWORD *)(a1 + 40));
    vDSP_vdiv(*(const float **)(a1 + 144), 1, *(const float **)(a1 + 288), 1, *(float **)(a1 + 144), 1, *(_QWORD *)(a1 + 40));
    vDSP_vclip(*(const float **)(a1 + 144), 1, (const float *)(a1 + 120), &MicSenseUtils::kOnef, *(float **)(a1 + 144), 1, *(_QWORD *)(a1 + 40));
    if (*(_QWORD *)(a1 + 72) != 1)
    {
      v11 = 0;
      do
      {
        vDSP_vsq(*(const float **)(a1 + 144), 1, *(float **)(a1 + 168), 1, *(_QWORD *)(a1 + 40));
        vDSP_vsmul(*(const float **)(a1 + 168), 1, &MicSenseUtils::kFourf, *(float **)(a1 + 168), 1, *(_QWORD *)(a1 + 40));
        vDSP_vthr(*(const float **)(a1 + 168), 1, &MicSenseUtils::kepsf, *(float **)(a1 + 168), 1, *(_QWORD *)(a1 + 40));
        vDSP_vdiv(*(const float **)(a1 + 168), 1, *(const float **)(a1 + 192), 1, *(float **)(a1 + 192), 1, *(_QWORD *)(a1 + 40));
        vDSP_vadd(*(const float **)(a1 + 192), 1, *(const float **)(a1 + 288), 1, *(float **)(a1 + 168), 1, *(_QWORD *)(a1 + 40));
        vDSP_vdiv(*(const float **)(a1 + 168), 1, *(const float **)(a1 + 288), 1, *(float **)(a1 + 168), 1, *(_QWORD *)(a1 + 40));
        vDSP_vmul(*(const float **)(a1 + 168), 1, *(const float **)(a1 + 144), 1, *(float **)(a1 + 144), 1, *(_QWORD *)(a1 + 40));
        vDSP_vclip(*(const float **)(a1 + 144), 1, (const float *)(a1 + 120), &MicSenseUtils::kOnef, *(float **)(a1 + 144), 1, *(_QWORD *)(a1 + 40));
        ++v11;
      }
      while (*(_QWORD *)(a1 + 72) - 1 > v11);
    }
    v12 = *(float **)a1;
    if (*(float *)(*(_QWORD *)a1 + 48) <= 0.5)
    {
      v19 = *(_QWORD *)(a1 + 40);
      if (v19)
        memmove(*(void **)(a1 + 192), *(const void **)(a1 + 144), 4 * v19);
    }
    else
    {
      v14 = v12[13];
      v13 = v12[14];
      v15 = v12[15];
      vDSP_vsq(*(const float **)(a1 + 144), 1, *(float **)(a1 + 168), 1, *(_QWORD *)(a1 + 40));
      vDSP_vmul(*(const float **)(a1 + 168), 1, *(const float **)(*(_QWORD *)(a1 + 456) + 24 * a3), 1, *(float **)(a1 + 168), 1, *(_QWORD *)(a1 + 40));
      __B = 0;
      vDSP_sve(*(const float **)(a1 + 168), 1, (float *)&__B + 1, *(_QWORD *)(a1 + 40));
      vDSP_sve(*(const float **)(*(_QWORD *)(a1 + 456) + 24 * a3), 1, (float *)&__B, *(_QWORD *)(a1 + 40));
      v16 = *((float *)&__B + 1) / (float)(*(float *)&__B + 0.00000011921);
      if (*(float *)(*(_QWORD *)a1 + 64) > 0.5)
      {
        CFilterBank::filterbank_compute_bank32(*(_QWORD *)(a1 + 640), *(const float **)(a1 + 168), *(float **)(a1 + 656));
        CFilterBank::filterbank_compute_bank32(*(_QWORD *)(a1 + 640), *(const float **)(*(_QWORD *)(a1 + 456) + 24 * a3), *(float **)(a1 + 680));
        vDSP_vthr(*(const float **)(a1 + 680), 1, &MicSenseUtils::kepsf, *(float **)(a1 + 680), 1, *(_QWORD *)(a1 + 648));
        vDSP_vdiv(*(const float **)(a1 + 680), 1, *(const float **)(a1 + 656), 1, *(float **)(a1 + 656), 1, *(_QWORD *)(a1 + 648));
        __A = -v14;
        vDSP_vsadd(*(const float **)(a1 + 656), 1, &__A, *(float **)(a1 + 656), 1, *(_QWORD *)(a1 + 648));
        vDSP_vsmul(*(const float **)(a1 + 656), 1, &MicSense_Core::postFilter(std::vector<float> &,unsigned long,std::vector<float> &)::sigmoidSlope, *(float **)(a1 + 656), 1, *(_QWORD *)(a1 + 648));
        vvexpf(*(float **)(a1 + 656), *(const float **)(a1 + 656), (const int *)(a1 + 648));
        vDSP_vadd(*(const float **)(a1 + 288), 1, *(const float **)(a1 + 656), 1, *(float **)(a1 + 656), 1, *(_QWORD *)(a1 + 648));
        vDSP_svdiv(*(const float **)(a1 + 288), *(const float **)(a1 + 656), 1, *(float **)(a1 + 656), 1, *(_QWORD *)(a1 + 648));
        CFilterBank::filterbank_compute_psd16(*(int ***)(a1 + 640), *(_QWORD *)(a1 + 656), *(float **)(a1 + 168));
        vDSP_vmul(*(const float **)(a1 + 144), 1, *(const float **)(a1 + 168), 1, *(float **)(a1 + 144), 1, *(_QWORD *)(a1 + 40));
      }
      if (v16 >= v14)
        v17 = 1.0;
      else
        v17 = v16;
      if (v17 == 1.0)
        v18 = 1;
      else
        v18 = (unint64_t)(float)((float)(roundf(v13 * (float)(1.0 - (float)(v17 / v14))) * 2.0) + 1.0);
      if (v18 <= (unint64_t)(float)(v15 + 0.5))
        v18 = (unint64_t)(float)(v15 + 0.5);
      if (*(_QWORD *)(a1 + 40) >= v18)
        v20 = v18;
      else
        v20 = *(_QWORD *)(a1 + 40);
      __A = 1.0 / (float)v20;
      vDSP_vfill(&__A, *(float **)(a1 + 168), 1, v20);
      vDSP_conv(*(const float **)(a1 + 144), 1, (const float *)(*(_QWORD *)(a1 + 168) + 4 * v20 - 4), -1, *(float **)(a1 + 192), 1, *(_QWORD *)(a1 + 40), v20);
    }
    v25 = *(float *)(a1 + 132);
    __D = 1.0 - v25;
    v21 = *(float **)(*(_QWORD *)(a1 + 480) + 24 * a3);
    vDSP_vsmsma(v21, 1, &v25, *(const float **)(a1 + 192), 1, &__D, v21, 1, *(_QWORD *)(a1 + 40));
  }
  else
  {
    vDSP_vfill(&MicSenseUtils::kOnef, *(float **)(*(_QWORD *)(a1 + 480) + 24 * a3), 1, *(_QWORD *)(a1 + 40));
  }
  v22 = *(float **)(*(_QWORD *)(a1 + 480) + 24 * a3);
  vDSP_vclip(v22, 1, (const float *)(a1 + 120), &MicSenseUtils::kOnef, v22, 1, *(_QWORD *)(a1 + 40));
}

void MicSense_Core::process(MicSense_Core *this, uint64_t a2, uint64_t *a3, vDSP_Length a4)
{
  _QWORD *v4;
  _QWORD *v5;
  unint64_t v6;
  vDSP_Length v7;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  const float *v15;
  float v16;
  vDSP_Length v17;
  float v18;
  int v19;
  float *v20;
  const float *v21;
  vDSP_Length v22;
  float v23;
  unint64_t v24;
  _BYTE *v25;
  _BYTE *v26;
  int *v27;
  uint64_t v28;
  float **v29;
  vDSP_Length v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  void *v34;
  float *v35;
  const float *v36;
  float v37;
  vDSP_Length v38;
  float v39;
  const float *v40;
  float v41;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  _QWORD *v46;
  _QWORD *v47;
  uint64_t __len;
  uint64_t v49;
  float __B;
  DSPSplitComplex __A;

  v5 = *(_QWORD **)a2;
  v4 = *(_QWORD **)(a2 + 8);
  v6 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v4 - *(_QWORD *)a2) >> 3);
  if (v6 != 0xAAAAAAAAAAAAAAABLL * ((a3[1] - *a3) >> 3))
    __assert_rtn("process", "MicSense_Core.cpp", 771, "numChannels == output.size()");
  v7 = a4;
  if (a4 > (uint64_t)(v5[1] - *v5) >> 2)
    __assert_rtn("process", "MicSense_Core.cpp", 772, "input[0].size() >= numFrames");
  v46 = *(_QWORD **)a2;
  v47 = *(_QWORD **)(a2 + 8);
  if (v4 != v5)
  {
    v11 = 0;
    v12 = 0;
    __len = 8 * a4;
    v49 = a4 & 0x1FFFFFFFFFFFFFFFLL;
    if (v6 <= 1)
      v13 = 1;
    else
      v13 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v4 - *(_QWORD *)a2) >> 3);
    while (*((_BYTE *)this + 142))
    {
      v14 = *a3;
      if (v49)
      {
        memmove(*(void **)(v14 + v11), *(const void **)(*(_QWORD *)a2 + v11), __len);
        v14 = *a3;
      }
      __A.realp = 0;
      __A.imagp = 0;
      __A.realp = *(float **)(v14 + v11);
      __A.imagp = &__A.realp[v7];
      MicSense_Core::psdFFT((uint64_t)this, &__A, (float **)this + 18, (float)*((unint64_t *)this + 4) * 4.0);
      MicSense_Core::computeSuppressionGains((uint64_t)this, (const float **)this + 18, v12);
      v15 = *(const float **)(*((_QWORD *)this + 60) + v11);
      v16 = *__A.imagp;
      v17 = *((_QWORD *)this + 5) - 1;
      vDSP_vmul(__A.realp, 1, v15, 1, __A.realp, 1, v17);
      vDSP_vmul(__A.imagp, 1, v15, 1, __A.imagp, 1, v17);
      v18 = v15[v17];
      v7 = a4;
      *__A.imagp = v16 * v18;
LABEL_11:
      ++v12;
      v11 += 24;
      if (v13 == v12)
        goto LABEL_34;
    }
    if (*((_QWORD *)this + 7) == 6)
    {
      v19 = *((unsigned __int8 *)this + 140);
    }
    else
    {
      v19 = *((unsigned __int8 *)this + 140);
      if (*((_QWORD *)this + 10) != 1)
      {
        if (*((_BYTE *)this + 140))
          goto LABEL_24;
        v21 = *(const float **)(*(_QWORD *)a2 + v11);
        v22 = *((_QWORD *)this + 3);
        goto LABEL_22;
      }
    }
    if (v19)
      goto LABEL_24;
    memcpy(*(void **)(*((_QWORD *)this + 54) + v11), (const void *)(*(_QWORD *)(*((_QWORD *)this + 54) + v11) + 4 * *((_QWORD *)this + 3)), 4 * (*((_QWORD *)this + 4) - *((_QWORD *)this + 3)));
    memcpy((void *)(*(_QWORD *)(*((_QWORD *)this + 54) + v11) + 4 * (*((_QWORD *)this + 4) - *((_QWORD *)this + 3))), *(const void **)(*(_QWORD *)a2 + v11), 4 * *((_QWORD *)this + 3));
    vDSP_vmul(*((const float **)this + 48), 1, *(const float **)(*((_QWORD *)this + 54) + v11), 1, *((float **)this + 27), 1, *((_QWORD *)this + 4));
    __B = 2.0;
    vDSP_vsmul(*((const float **)this + 27), 1, &__B, *((float **)this + 27), 1, *((_QWORD *)this + 4));
    v20 = (float *)*((_QWORD *)this + 45);
    __A.realp = (float *)*((_QWORD *)this + 42);
    __A.imagp = v20;
    MultiRadixRealFFT::RealOutOfPlaceForwardTransform(*((MultiRadixRealFFT **)this + 75), *((DSPComplex **)this + 27), &__A, 1.0);
    if (*((_QWORD *)this + 10))
    {
      MicSense_Core::psdFFT((uint64_t)this, &__A, (float **)this + 18, 1.0 / (float)*((unint64_t *)this + 4));
LABEL_23:
      MicSense_Core::computeSuppressionGains((uint64_t)this, (const float **)this + 18, v12);
LABEL_24:
      if (**(float **)this <= 0.5)
      {
        switch(*((_QWORD *)this + 7))
        {
          case 0:
            MicSenseUtils::GainsToFIR::gainsToMinimumPhaseFilter(*((_QWORD *)this + 76), *((_QWORD *)this + 60) + v11, (float **)(*((_QWORD *)this + 66) + v11), *((_QWORD *)this + 12));
            goto LABEL_31;
          case 1:
          case 2:
          case 3:
            v27 = (int *)*((_QWORD *)this + 76);
            v28 = *((_QWORD *)this + 60) + v11;
            v29 = (float **)(*((_QWORD *)this + 66) + v11);
            v30 = *((_QWORD *)this + 12);
            v31 = *((_QWORD *)this + 13);
            goto LABEL_30;
          case 4:
          case 5:
            v27 = (int *)*((_QWORD *)this + 76);
            v28 = *((_QWORD *)this + 60) + v11;
            v29 = (float **)(*((_QWORD *)this + 66) + v11);
            v30 = *((_QWORD *)this + 12);
            v31 = 0;
LABEL_30:
            MicSenseUtils::GainsToFIR::gainsToLinearPhaseFilter(v27, v28, v29, v30, v31);
LABEL_31:
            v32 = *(_QWORD **)a2;
            v33 = *a3;
            MicSenseUtils::DynamicFIR<float>::setCoefficients(*(_QWORD *)(*((_QWORD *)this + 77) + 8 * v12), (const void **)(*((_QWORD *)this + 66) + v11), *((_QWORD *)this + 12));
            v34 = (void *)v32[v11 / 8];
            v7 = a4;
            MicSenseUtils::DynamicFIR<float>::process(*(_QWORD *)(*((_QWORD *)this + 77) + 8 * v12), v34, *(float **)(v33 + v11), a4);
            break;
          case 6:
            v35 = (float *)*((_QWORD *)this + 45);
            __A.realp = (float *)*((_QWORD *)this + 42);
            __A.imagp = v35;
            v36 = *(const float **)(*((_QWORD *)this + 60) + v11);
            v37 = *v35;
            v45 = v6;
            v38 = *((_QWORD *)this + 5) - 1;
            vDSP_vmul(__A.realp, 1, v36, 1, __A.realp, 1, v38);
            vDSP_vmul(v35, 1, v36, 1, v35, 1, v38);
            v39 = v36[v38];
            v6 = v45;
            *v35 = v37 * v39;
            VPTimeFreqConverter::Synthesize(*(VPTimeFreqConverter **)(*((_QWORD *)this + 72) + 8 * v12), &__A, *(float **)(*a3 + v11));
            __B = 1.0 / (float)((float)*((unint64_t *)this + 4) + (float)*((unint64_t *)this + 4));
            v7 = a4;
            vDSP_vsmul(*(const float **)(*a3 + v11), 1, &__B, *(float **)(*a3 + v11), 1, a4);
            break;
          default:
            goto LABEL_11;
        }
      }
      else
      {
        v24 = *(_QWORD *)a2 + v11;
        v25 = *(_BYTE **)v24;
        v26 = *(_BYTE **)(v24 + 8);
        if (v26 != v25)
          memmove(*(void **)(*a3 + v11), v25, v26 - v25);
      }
      goto LABEL_11;
    }
    v21 = (const float *)*((_QWORD *)this + 27);
    v22 = *((_QWORD *)this + 4);
LABEL_22:
    v23 = MicSense_Core::arburg(this, v21, v22, *((_QWORD *)this + 11), *((float **)this + 51));
    MicSense_Core::psdburg((uint64_t)this, *((const void **)this + 51), *((_QWORD *)this + 11), (uint64_t)this + 144, v23);
    goto LABEL_23;
  }
LABEL_34:
  v41 = *((float *)this + 31);
  v40 = (const float *)((char *)this + 124);
  if (v41 != 1.0 && v47 != v46)
  {
    v43 = 0;
    if (v6 <= 1)
      v44 = 1;
    else
      v44 = v6;
    do
    {
      vDSP_vsmul(*(const float **)(*a3 + v43), 1, v40, *(float **)(*a3 + v43), 1, (uint64_t)(*(_QWORD *)(*a3 + v43 + 8) - *(_QWORD *)(*a3 + v43)) >> 2);
      v43 += 24;
      --v44;
    }
    while (v44);
  }
}

uint64_t VoiceProcessorV2::GetPropertyInfo(VoiceProcessorV2 *this, int a2, unsigned int *a3, unsigned __int8 *a4)
{
  uint64_t result;
  int v8;
  int v9;
  int v10;
  int v11;
  unsigned __int16 v12;
  unsigned __int16 v13;
  unsigned __int8 IsDeviceSupportingAdvancedChatFlavors;
  int v15;
  unsigned int v16;
  NSObject *v17;
  unsigned int v18;
  _BYTE buf[12];
  __int16 v20;
  int v21;
  __int16 v22;
  const char *v23;
  __int16 v24;
  const char *v25;
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  result = 1651532146;
  if (!a3 || !a4)
    return result;
  result = 4294956417;
  if (a2 > 1836266092)
  {
    if (a2 <= 1986882932)
    {
      if (a2 > 1953915761)
      {
        if (a2 > 1986880098)
        {
          if (a2 > 1986881899)
          {
            if (a2 == 1986881900)
              goto LABEL_77;
            v13 = 26991;
          }
          else
          {
            if (a2 == 1986880099)
              goto LABEL_77;
            v13 = 25715;
          }
          v11 = v13 | 0x766D0000;
          goto LABEL_76;
        }
        if (a2 > 1969844081)
        {
          if (a2 == 1969844082)
            return result;
          v11 = 1986097261;
          goto LABEL_76;
        }
        if (a2 != 1953915762)
        {
          v11 = 1953915764;
          goto LABEL_76;
        }
LABEL_97:
        result = 0;
        v16 = 8;
        goto LABEL_98;
      }
      if (a2 <= 1936744802)
      {
        if (a2 > 1868653666)
        {
          if (a2 != 1868653667)
          {
            if (a2 != 1885957987)
              return 2003332927;
            goto LABEL_59;
          }
        }
        else
        {
          if (a2 == 1836266093)
            return result;
          if (a2 != 1836278117)
            return 2003332927;
        }
        if (!_os_feature_enabled_impl())
          return 4294956417;
        goto LABEL_97;
      }
      if (a2 > 1936747875)
      {
        if (a2 == 1936747876)
        {
          *(_QWORD *)buf = 0;
          if (GetSpatialMetadataSPI(void)::sSpatialMetadataSPIOnce != -1)
            dispatch_once(&GetSpatialMetadataSPI(void)::sSpatialMetadataSPIOnce, &__block_literal_global_16953);
          (*(void (**)(_BYTE *, uint64_t))(GetSpatialMetadataSPI(void)::sSpatialMetadataSPI + 8))(buf, 32);
          v18 = 0;
          if (GetSpatialMetadataSPI(void)::sSpatialMetadataSPIOnce != -1)
            dispatch_once(&GetSpatialMetadataSPI(void)::sSpatialMetadataSPIOnce, &__block_literal_global_16953);
          (*(void (**)(_QWORD, unsigned int *))(GetSpatialMetadataSPI(void)::sSpatialMetadataSPI + 40))(*(_QWORD *)buf, &v18);
          if (GetSpatialMetadataSPI(void)::sSpatialMetadataSPIOnce != -1)
            dispatch_once(&GetSpatialMetadataSPI(void)::sSpatialMetadataSPIOnce, &__block_literal_global_16953);
          (*(void (**)(_QWORD))(GetSpatialMetadataSPI(void)::sSpatialMetadataSPI + 16))(*(_QWORD *)buf);
          result = 0;
          v16 = v18;
          goto LABEL_98;
        }
        v11 = 1937141091;
        goto LABEL_76;
      }
      if (a2 == 1936744803)
        goto LABEL_77;
      v10 = 1936746595;
LABEL_39:
      if (a2 != v10)
        return 2003332927;
      goto LABEL_97;
    }
    if (a2 > 1987209582)
    {
      if (a2 > 1987211364)
      {
        if (a2 > 1987212145)
        {
          if (a2 == 1987212146)
            goto LABEL_97;
          v12 = 29812;
        }
        else
        {
          if (a2 == 1987211365)
            goto LABEL_77;
          v12 = 28787;
        }
      }
      else
      {
        if (a2 <= 1987211115)
        {
          if (a2 == 1987209583)
            goto LABEL_77;
          v10 = 1987210613;
          goto LABEL_39;
        }
        if (a2 == 1987211116)
          goto LABEL_77;
        v12 = 28527;
      }
    }
    else if (a2 > 1987207795)
    {
      if (a2 > 1987208306)
      {
        if (a2 == 1987208307)
          goto LABEL_77;
        v12 = 26988;
      }
      else
      {
        if (a2 == 1987207796)
          goto LABEL_77;
        v12 = 25461;
      }
    }
    else
    {
      if (a2 <= 1986884723)
      {
        if (a2 == 1986882933)
          goto LABEL_97;
        v10 = 1986884466;
        goto LABEL_39;
      }
      if (a2 == 1986884724)
        goto LABEL_77;
      v12 = 25188;
    }
    v11 = v12 | 0x76720000;
    goto LABEL_76;
  }
  if (a2 > 1634300530)
  {
    if (a2 <= 1701868401)
    {
      if (a2 <= 1684305511)
      {
        if (a2 == 1634300531)
        {
          result = 0;
          v16 = 8 * *((_DWORD *)this + 542);
          goto LABEL_98;
        }
        if (a2 != 1634758259)
        {
          v11 = 1635085677;
          goto LABEL_76;
        }
        if (_os_feature_enabled_impl())
          goto LABEL_77;
        return 4294956417;
      }
      if (a2 == 1684305512 || a2 == 1685483378)
        return result;
      v11 = 1701864051;
LABEL_76:
      if (a2 == v11)
        goto LABEL_77;
      return 2003332927;
    }
    if (a2 > 1768514914)
    {
      if (a2 == 1768514915 || a2 == 1835361379)
        goto LABEL_77;
      if (a2 == 1836082532)
      {
        *a3 = 4;
        IsDeviceSupportingAdvancedChatFlavors = VoiceProcessorV2::IsDeviceSupportingAdvancedChatFlavors((VoiceProcessorV2 *)0xFFFFD581);
        result = 0;
LABEL_99:
        *a4 = IsDeviceSupportingAdvancedChatFlavors;
        return result;
      }
      return 2003332927;
    }
    if (a2 != 1701868402)
    {
      if (a2 != 1718384225)
      {
        v11 = 1718384242;
        goto LABEL_76;
      }
LABEL_59:
      result = 0;
      v15 = 4;
LABEL_87:
      *a3 = v15;
      *a4 = 0;
      return result;
    }
LABEL_77:
    result = 0;
    v16 = 4;
LABEL_98:
    *a3 = v16;
    IsDeviceSupportingAdvancedChatFlavors = 1;
    goto LABEL_99;
  }
  switch(a2)
  {
    case 32768:
    case 32769:
    case 32772:
    case 32773:
    case 32786:
    case 32787:
    case 32788:
    case 32789:
    case 32792:
    case 32794:
    case 32797:
      goto LABEL_77;
    case 32780:
      result = 0;
      v8 = *((_DWORD *)this + 526);
      v9 = *((_DWORD *)this + 524);
      goto LABEL_79;
    case 32781:
      result = 0;
      v8 = *((_DWORD *)this + 534);
      v9 = *((_DWORD *)this + 532);
LABEL_79:
      v16 = (v8 - v9) & 0xFFFFFFFC;
      goto LABEL_98;
    case 32783:
      if (*((_QWORD *)this + 276))
        goto LABEL_97;
      if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
        return 561406316;
      *(_DWORD *)buf = 136315906;
      *(_QWORD *)&buf[4] = "vpProperties.cpp";
      v20 = 1024;
      v21 = 141;
      v22 = 2080;
      v23 = "mTelephonyMicDSPSettingsDict != nullptr";
      v24 = 2080;
      v25 = "InvalidPropertyValue";
      v17 = MEMORY[0x1E0C81028];
      break;
    case 32784:
      if (*((_QWORD *)this + 277))
        goto LABEL_97;
      if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
        return 561406316;
      *(_DWORD *)buf = 136315906;
      *(_QWORD *)&buf[4] = "vpProperties.cpp";
      v20 = 1024;
      v21 = 147;
      v22 = 2080;
      v23 = "mTelephonyRefDSPSettingsDict != nullptr";
      v24 = 2080;
      v25 = "InvalidPropertyValue";
      v17 = MEMORY[0x1E0C81028];
      break;
    case 32796:
      result = 0;
      v15 = 4 * *((_DWORD *)this + 548);
      goto LABEL_87;
    case 32798:
      if (*((_QWORD *)this + 278))
        goto LABEL_97;
      if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
        return 561406316;
      *(_DWORD *)buf = 136315906;
      *(_QWORD *)&buf[4] = "vpProperties.cpp";
      v20 = 1024;
      v21 = 153;
      v22 = 2080;
      v23 = "mPowerBudget != nullptr";
      v24 = 2080;
      v25 = "InvalidPropertyValue";
      v17 = MEMORY[0x1E0C81028];
      break;
    case 32799:
    case 32800:
    case 32801:
      goto LABEL_97;
    default:
      return 2003332927;
  }
  _os_log_impl(&dword_1B5ED0000, v17, OS_LOG_TYPE_ERROR, "%25s:%-5d  ca_require: %s %s", buf, 0x26u);
  return 561406316;
}

uint64_t VoiceProcessorV2::GetProperty(VoiceProcessorV2 *this, uint64_t a2, _BOOL4 *a3, unsigned int a4, unsigned int *a5)
{
  int v6;
  VoiceProcessorV2 *v10;
  int v11;
  uint64_t v12;
  const void *Copy;
  int v14;
  int v15;
  _BOOL4 v16;
  const void *v17;
  size_t v18;
  int v19;
  int v20;
  const void *v21;
  size_t v22;
  unsigned int v23;
  const __CFDictionary *v24;
  NSObject *v25;
  size_t v26;
  const void *v27;
  unsigned int v28;
  int v29;
  size_t v30;
  unsigned int *v31;
  unsigned int v32;
  uint64_t v34;
  unsigned int v35;
  unsigned int v36;
  unsigned int *v37;
  _QWORD *v38;
  _QWORD v39[2];
  _BYTE buf[28];
  __int16 v41;
  const char *v42;
  uint64_t v43;

  v6 = a2;
  v43 = *MEMORY[0x1E0C80C00];
  if (!a3)
  {
    buf[0] = 0;
    return (*(uint64_t (**)(VoiceProcessorV2 *, uint64_t, unsigned int *, _BYTE *))(*(_QWORD *)this + 152))(this, a2, a5, buf);
  }
  v10 = (VoiceProcessorV2 *)CADeprecated::CAAtomicSignaler::PersistentTryer::PersistentTryer(&v34, (uint64_t)this + 2480, 0);
  v37 = (unsigned int *)a3;
  v35 = 0;
  v36 = a4;
  if (v6 <= 1635085676)
  {
    switch(v6)
    {
      case 32768:
        if (a4 > 3)
        {
          v11 = *((unsigned __int8 *)this + 472);
          goto LABEL_133;
        }
        v12 = 561211770;
        if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
          goto LABEL_137;
        *(_DWORD *)buf = 136315906;
        *(_QWORD *)&buf[4] = "vpProperties.cpp";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 398;
        *(_WORD *)&buf[18] = 2080;
        *(_QWORD *)&buf[20] = "inDataSize >= sizeof(UInt32)";
        v41 = 2080;
        v42 = "BadPropertySize";
        v25 = MEMORY[0x1E0C81028];
        goto LABEL_212;
      case 32769:
        if (a4 > 3)
        {
          v16 = 0;
          *a5 = 4;
          *a3 = 0;
          if ((*((_BYTE *)this + 4664) & 2) != 0)
            v16 = *((_QWORD *)this + 412) != 0;
          *a3 = v16;
          goto LABEL_136;
        }
        v12 = 561211770;
        if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
          goto LABEL_137;
        *(_DWORD *)buf = 136315906;
        *(_QWORD *)&buf[4] = "vpProperties.cpp";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 416;
        *(_WORD *)&buf[18] = 2080;
        *(_QWORD *)&buf[20] = "inDataSize >= sizeof(UInt32)";
        v41 = 2080;
        v42 = "BadPropertySize";
        v25 = MEMORY[0x1E0C81028];
        goto LABEL_212;
      case 32770:
      case 32771:
      case 32774:
      case 32775:
      case 32776:
      case 32777:
      case 32778:
      case 32779:
      case 32782:
      case 32785:
      case 32790:
      case 32791:
      case 32793:
      case 32795:
      case 32797:
        goto LABEL_126;
      case 32772:
        if (a4 > 3)
        {
          v11 = *((unsigned __int8 *)this + 2080);
          goto LABEL_133;
        }
        v12 = 561211770;
        if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
          goto LABEL_137;
        *(_DWORD *)buf = 136315906;
        *(_QWORD *)&buf[4] = "vpProperties.cpp";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 404;
        *(_WORD *)&buf[18] = 2080;
        *(_QWORD *)&buf[20] = "inDataSize >= sizeof(UInt32)";
        v41 = 2080;
        v42 = "BadPropertySize";
        v25 = MEMORY[0x1E0C81028];
        goto LABEL_212;
      case 32773:
        if (a4 == 4)
        {
          v11 = *((unsigned __int8 *)this + 2083);
          goto LABEL_133;
        }
        v12 = 561211770;
        if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
          goto LABEL_137;
        *(_DWORD *)buf = 136315906;
        *(_QWORD *)&buf[4] = "vpProperties.cpp";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 457;
        *(_WORD *)&buf[18] = 2080;
        *(_QWORD *)&buf[20] = "inDataSize == sizeof(UInt32)";
        v41 = 2080;
        v42 = "BadPropertySize";
        v25 = MEMORY[0x1E0C81028];
        goto LABEL_212;
      case 32780:
        v17 = (const void *)*((_QWORD *)this + 262);
        v18 = *((_QWORD *)this + 263) - (_QWORD)v17;
        if (v18 <= a4)
        {
          memcpy(a3, v17, v18);
          v19 = *((_DWORD *)this + 526);
          v20 = *((_DWORD *)this + 524);
          goto LABEL_68;
        }
        v12 = 561211770;
        if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
          goto LABEL_137;
        *(_DWORD *)buf = 136315906;
        *(_QWORD *)&buf[4] = "vpProperties.cpp";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 469;
        *(_WORD *)&buf[18] = 2080;
        *(_QWORD *)&buf[20] = "inDataSize >= (mMicTrimGainsDB.size() * sizeof(Float32))";
        v41 = 2080;
        v42 = "BadPropertySize";
        v25 = MEMORY[0x1E0C81028];
        goto LABEL_212;
      case 32781:
        v21 = (const void *)*((_QWORD *)this + 266);
        v22 = *((_QWORD *)this + 267) - (_QWORD)v21;
        if (v22 <= a4)
        {
          memcpy(a3, v21, v22);
          v19 = *((_DWORD *)this + 534);
          v20 = *((_DWORD *)this + 532);
LABEL_68:
          v23 = (v19 - v20) & 0xFFFFFFFC;
          goto LABEL_135;
        }
        v12 = 561211770;
        if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
          goto LABEL_137;
        *(_DWORD *)buf = 136315906;
        *(_QWORD *)&buf[4] = "vpProperties.cpp";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 486;
        *(_WORD *)&buf[18] = 2080;
        *(_QWORD *)&buf[20] = "inDataSize >= (mRefTrimGainsDB.size() * sizeof(Float32))";
        v41 = 2080;
        v42 = "BadPropertySize";
        v25 = MEMORY[0x1E0C81028];
        goto LABEL_212;
      case 32783:
        if (a4 != 8)
        {
          v12 = 561211770;
          if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
            goto LABEL_137;
          *(_DWORD *)buf = 136315906;
          *(_QWORD *)&buf[4] = "vpProperties.cpp";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = 530;
          *(_WORD *)&buf[18] = 2080;
          *(_QWORD *)&buf[20] = "inDataSize == sizeof(CFDictionaryRef)";
          v41 = 2080;
          v42 = "BadPropertySize";
          v25 = MEMORY[0x1E0C81028];
          goto LABEL_212;
        }
        v24 = (const __CFDictionary *)*((_QWORD *)this + 276);
        if (v24)
          goto LABEL_92;
        v12 = 561406316;
        if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136315906;
          *(_QWORD *)&buf[4] = "vpProperties.cpp";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = 531;
          *(_WORD *)&buf[18] = 2080;
          *(_QWORD *)&buf[20] = "mTelephonyMicDSPSettingsDict != nullptr";
          v41 = 2080;
          v42 = "InvalidPropertyValue";
          v25 = MEMORY[0x1E0C81028];
          goto LABEL_212;
        }
        goto LABEL_137;
      case 32784:
        if (a4 != 8)
        {
          v12 = 561211770;
          if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
            goto LABEL_137;
          *(_DWORD *)buf = 136315906;
          *(_QWORD *)&buf[4] = "vpProperties.cpp";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = 538;
          *(_WORD *)&buf[18] = 2080;
          *(_QWORD *)&buf[20] = "inDataSize == sizeof(CFDictionaryRef)";
          v41 = 2080;
          v42 = "BadPropertySize";
          v25 = MEMORY[0x1E0C81028];
          goto LABEL_212;
        }
        v24 = (const __CFDictionary *)*((_QWORD *)this + 277);
        if (v24)
          goto LABEL_92;
        v12 = 561406316;
        if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136315906;
          *(_QWORD *)&buf[4] = "vpProperties.cpp";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = 539;
          *(_WORD *)&buf[18] = 2080;
          *(_QWORD *)&buf[20] = "mTelephonyRefDSPSettingsDict != nullptr";
          v41 = 2080;
          v42 = "InvalidPropertyValue";
          v25 = MEMORY[0x1E0C81028];
          goto LABEL_212;
        }
        goto LABEL_137;
      case 32786:
        if (a4 > 3)
        {
          *a5 = 4;
          *a3 = 0;
          goto LABEL_136;
        }
        v12 = 561211770;
        if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
          goto LABEL_137;
        *(_DWORD *)buf = 136315906;
        *(_QWORD *)&buf[4] = "vpProperties.cpp";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 560;
        *(_WORD *)&buf[18] = 2080;
        *(_QWORD *)&buf[20] = "inDataSize >= sizeof(UInt32)";
        v41 = 2080;
        v42 = "BadPropertySize";
        v25 = MEMORY[0x1E0C81028];
        goto LABEL_212;
      case 32787:
        if (a4 > 3)
        {
          v11 = *((_DWORD *)this + 19);
          goto LABEL_133;
        }
        v12 = 561211770;
        if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
          goto LABEL_137;
        *(_DWORD *)buf = 136315906;
        *(_QWORD *)&buf[4] = "vpProperties.cpp";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 566;
        *(_WORD *)&buf[18] = 2080;
        *(_QWORD *)&buf[20] = "inDataSize >= sizeof(UInt32)";
        v41 = 2080;
        v42 = "BadPropertySize";
        v25 = MEMORY[0x1E0C81028];
        goto LABEL_212;
      case 32788:
        if (a4 > 3)
        {
          v11 = *((unsigned __int8 *)this + 2085);
          goto LABEL_133;
        }
        v12 = 561211770;
        if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
          goto LABEL_137;
        *(_DWORD *)buf = 136315906;
        *(_QWORD *)&buf[4] = "vpProperties.cpp";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 463;
        *(_WORD *)&buf[18] = 2080;
        *(_QWORD *)&buf[20] = "inDataSize >= sizeof(UInt32)";
        v41 = 2080;
        v42 = "BadPropertySize";
        v25 = MEMORY[0x1E0C81028];
        goto LABEL_212;
      case 32789:
        if (a4 > 3)
          goto LABEL_117;
        v12 = 561211770;
        if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
          goto LABEL_137;
        *(_DWORD *)buf = 136315906;
        *(_QWORD *)&buf[4] = "vpProperties.cpp";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 573;
        *(_WORD *)&buf[18] = 2080;
        *(_QWORD *)&buf[20] = "inDataSize >= sizeof(UInt32)";
        v41 = 2080;
        v42 = "BadPropertySize";
        v25 = MEMORY[0x1E0C81028];
        goto LABEL_212;
      case 32792:
        if (a4 > 3)
        {
          v11 = *((_DWORD *)this + 286);
          goto LABEL_133;
        }
        v12 = 561211770;
        if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
          goto LABEL_137;
        *(_DWORD *)buf = 136315906;
        *(_QWORD *)&buf[4] = "vpProperties.cpp";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 611;
        *(_WORD *)&buf[18] = 2080;
        *(_QWORD *)&buf[20] = "inDataSize >= sizeof(UInt32)";
        v41 = 2080;
        v42 = "BadPropertySize";
        v25 = MEMORY[0x1E0C81028];
        goto LABEL_212;
      case 32794:
        if (a4 > 3)
        {
          v11 = *((unsigned __int8 *)this + 2082);
          goto LABEL_133;
        }
        v12 = 561211770;
        if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
          goto LABEL_137;
        *(_DWORD *)buf = 136315906;
        *(_QWORD *)&buf[4] = "vpProperties.cpp";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 410;
        *(_WORD *)&buf[18] = 2080;
        *(_QWORD *)&buf[20] = "inDataSize >= sizeof(UInt32)";
        v41 = 2080;
        v42 = "BadPropertySize";
        v25 = MEMORY[0x1E0C81028];
        goto LABEL_212;
      case 32796:
        v26 = 4 * *((unsigned int *)this + 548);
        if (v26 <= a4)
        {
          memcpy(a3, *((const void **)this + 273), v26);
          v23 = 4 * *((_DWORD *)this + 548);
          goto LABEL_135;
        }
        v12 = 561211770;
        if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
          goto LABEL_137;
        *(_DWORD *)buf = 136315906;
        *(_QWORD *)&buf[4] = "vpProperties.cpp";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 579;
        *(_WORD *)&buf[18] = 2080;
        *(_QWORD *)&buf[20] = "inDataSize >= (mNumSpeakerInputDataSource * sizeof(UInt32))";
        v41 = 2080;
        v42 = "BadPropertySize";
        v25 = MEMORY[0x1E0C81028];
        goto LABEL_212;
      case 32798:
        if (a4 <= 7)
        {
          v12 = 561211770;
          if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
            goto LABEL_137;
          *(_DWORD *)buf = 136315906;
          *(_QWORD *)&buf[4] = "vpProperties.cpp";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = 545;
          *(_WORD *)&buf[18] = 2080;
          *(_QWORD *)&buf[20] = "inDataSize >= sizeof(CFDictionaryRef)";
          v41 = 2080;
          v42 = "BadPropertySize";
          v25 = MEMORY[0x1E0C81028];
          goto LABEL_212;
        }
        v24 = (const __CFDictionary *)*((_QWORD *)this + 278);
        if (v24)
        {
LABEL_92:
          Copy = CFDictionaryCreateCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE00], v24);
          goto LABEL_93;
        }
        v12 = 561406316;
        if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136315906;
          *(_QWORD *)&buf[4] = "vpProperties.cpp";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = 546;
          *(_WORD *)&buf[18] = 2080;
          *(_QWORD *)&buf[20] = "mPowerBudget != nullptr";
          v41 = 2080;
          v42 = "InvalidPropertyValue";
          v25 = MEMORY[0x1E0C81028];
          goto LABEL_212;
        }
        goto LABEL_137;
      case 32799:
        if (a4 == 8)
        {
          v27 = (const void *)*((_QWORD *)this + 261);
          if (!v27)
            goto LABEL_103;
          goto LABEL_102;
        }
        v12 = 561211770;
        if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
          goto LABEL_137;
        *(_DWORD *)buf = 136315906;
        *(_QWORD *)&buf[4] = "vpProperties.cpp";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 475;
        *(_WORD *)&buf[18] = 2080;
        *(_QWORD *)&buf[20] = "inDataSize == sizeof(CFArrayRef)";
        v41 = 2080;
        v42 = "BadPropertySize";
        v25 = MEMORY[0x1E0C81028];
        goto LABEL_212;
      case 32800:
        if (a4 == 8)
        {
          v27 = (const void *)*((_QWORD *)this + 265);
          if (!v27)
            goto LABEL_103;
          goto LABEL_102;
        }
        v12 = 561211770;
        if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
          goto LABEL_137;
        *(_DWORD *)buf = 136315906;
        *(_QWORD *)&buf[4] = "vpProperties.cpp";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 492;
        *(_WORD *)&buf[18] = 2080;
        *(_QWORD *)&buf[20] = "inDataSize == sizeof(CFArrayRef)";
        v41 = 2080;
        v42 = "BadPropertySize";
        v25 = MEMORY[0x1E0C81028];
        goto LABEL_212;
      case 32801:
        if (a4 == 8)
        {
          v27 = (const void *)*((_QWORD *)this + 269);
          if (v27)
LABEL_102:
            CFRetain(v27);
LABEL_103:
          *(_QWORD *)a3 = v27;
          goto LABEL_125;
        }
        v12 = 561211770;
        if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
          goto LABEL_137;
        *(_DWORD *)buf = 136315906;
        *(_QWORD *)&buf[4] = "vpProperties.cpp";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 504;
        *(_WORD *)&buf[18] = 2080;
        *(_QWORD *)&buf[20] = "inDataSize == sizeof(CFDictionaryRef)";
        v41 = 2080;
        v42 = "BadPropertySize";
        v25 = MEMORY[0x1E0C81028];
        goto LABEL_212;
      default:
        if (v6 == 1634300531)
        {
          v30 = 8 * *((unsigned int *)this + 542);
          if (v30 <= a4)
          {
            memcpy(a3, *((const void **)this + 270), v30);
            v23 = 8 * *((_DWORD *)this + 542);
            goto LABEL_135;
          }
          v12 = 561211770;
          if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 136315906;
            *(_QWORD *)&buf[4] = "vpProperties.cpp";
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = 511;
            *(_WORD *)&buf[18] = 2080;
            *(_QWORD *)&buf[20] = "inDataSize >= (mNumMetricsReporterIDs * sizeof(CAReporterID))";
            v41 = 2080;
            v42 = "BadPropertySize";
            v25 = MEMORY[0x1E0C81028];
            goto LABEL_212;
          }
          goto LABEL_137;
        }
        if (v6 != 1634758259)
          goto LABEL_126;
        if (!_os_feature_enabled_impl())
          goto LABEL_46;
        if (a4 <= 3)
          goto LABEL_128;
        v11 = *((unsigned __int8 *)this + 16596);
        break;
    }
    goto LABEL_133;
  }
  if (v6 > 1868653666)
  {
    if (v6 <= 1937141090)
    {
      if (v6 > 1936744802)
      {
        if (v6 == 1936744803)
        {
          if (a4 == 4)
          {
            v11 = *((unsigned __int8 *)this + 2245);
            goto LABEL_133;
          }
          v12 = 561211770;
          if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 136315906;
            *(_QWORD *)&buf[4] = "vpProperties.cpp";
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = 429;
            *(_WORD *)&buf[18] = 2080;
            *(_QWORD *)&buf[20] = "inDataSize == sizeof(UInt32)";
            v41 = 2080;
            v42 = "BadPropertySize";
            v25 = MEMORY[0x1E0C81028];
            goto LABEL_212;
          }
          goto LABEL_137;
        }
        if (v6 != 1936746595)
        {
          if (v6 == 1936747876)
          {
            *(_QWORD *)buf = &v36;
            *(_QWORD *)&buf[8] = &v35;
            *(_QWORD *)&buf[16] = &v37;
            v39[0] = caulk::function_ref<void ()(unsigned char const*,unsigned long)>::functor_invoker<VoiceProcessorV2::GetPropertyInternal(unsigned int,void *,unsigned int,unsigned int *)::$_0>;
            v39[1] = buf;
            v38 = v39;
            caulk::concurrent::lf_read_synchronized_write<std::optional<std::vector<unsigned char>>>::access<vp::utility::Lock_Free_SRSW_Storage<unsigned char>::load(caulk::function_ref<void ()(unsigned char const*,unsigned long)>)::{lambda(std::optional<std::vector<unsigned char>> const&)#1}>((VoiceProcessorV2 *)((char *)this + 16304), (void (***)(uint64_t, _QWORD, _QWORD))&v38);
LABEL_136:
            v12 = v35;
            goto LABEL_137;
          }
          goto LABEL_126;
        }
        if (a4 <= 7)
        {
          v12 = 561211770;
          if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
            goto LABEL_137;
          *(_DWORD *)buf = 136315906;
          *(_QWORD *)&buf[4] = "vpProperties.cpp";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = 678;
          *(_WORD *)&buf[18] = 2080;
          *(_QWORD *)&buf[20] = "inDataSize >= sizeof(SpatialHeadTrackingConfiguration)";
          v41 = 2080;
          v42 = "BadPropertySize";
          v25 = MEMORY[0x1E0C81028];
          goto LABEL_212;
        }
        *(_QWORD *)a3 = *((_QWORD *)this + 2049);
        goto LABEL_125;
      }
      if (v6 == 1868653667)
      {
        if (_os_feature_enabled_impl())
        {
          if (a4 != 8)
          {
            v12 = 561211770;
            if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
              goto LABEL_137;
            *(_DWORD *)buf = 136315906;
            *(_QWORD *)&buf[4] = "vpProperties.cpp";
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = 703;
            *(_WORD *)&buf[18] = 2080;
            *(_QWORD *)&buf[20] = "inDataSize == sizeof(AUVoiceIOOtherAudioDuckingConfiguration)";
            v41 = 2080;
            v42 = "BadPropertySize";
            v25 = MEMORY[0x1E0C81028];
            goto LABEL_212;
          }
          v29 = *((_DWORD *)this + 4141);
          *(_BYTE *)a3 = *((_BYTE *)this + 16560);
          a3[1] = v29;
          goto LABEL_125;
        }
      }
      else if (v6 == 1885957987)
      {
        if (a4 <= 3)
        {
          v12 = 561211770;
          if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
            goto LABEL_137;
          *(_DWORD *)buf = 136315906;
          *(_QWORD *)&buf[4] = "vpProperties.cpp";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = 719;
          *(_WORD *)&buf[18] = 2080;
          *(_QWORD *)&buf[20] = "inDataSize >= sizeof(Float32)";
          v41 = 2080;
          v42 = "BadPropertySize";
          v25 = MEMORY[0x1E0C81028];
          goto LABEL_212;
        }
        v14 = *((_DWORD *)this + 290);
LABEL_51:
        *a3 = v14;
        goto LABEL_134;
      }
LABEL_126:
      v15 = 2003332927;
      goto LABEL_129;
    }
    if (v6 <= 1969844081)
    {
      if (v6 != 1937141091)
      {
        if (v6 != 1953915762)
        {
          if (v6 == 1953915764)
          {
            if (a4 > 3)
            {
              v11 = *((_DWORD *)this + 549);
LABEL_133:
              *a3 = v11;
              goto LABEL_134;
            }
            v12 = 561211770;
            if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = 136315906;
              *(_QWORD *)&buf[4] = "vpProperties.cpp";
              *(_WORD *)&buf[12] = 1024;
              *(_DWORD *)&buf[14] = 517;
              *(_WORD *)&buf[18] = 2080;
              *(_QWORD *)&buf[20] = "inDataSize >= sizeof(UInt32)";
              v41 = 2080;
              v42 = "BadPropertySize";
              v25 = MEMORY[0x1E0C81028];
LABEL_212:
              _os_log_impl(&dword_1B5ED0000, v25, OS_LOG_TYPE_ERROR, "%25s:%-5d  ca_require: %s %s", buf, 0x26u);
              goto LABEL_137;
            }
            goto LABEL_137;
          }
          goto LABEL_126;
        }
        if (a4 <= 7)
        {
          v12 = 561211770;
          if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
            goto LABEL_137;
          *(_DWORD *)buf = 136315906;
          *(_QWORD *)&buf[4] = "vpProperties.cpp";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = 523;
          *(_WORD *)&buf[18] = 2080;
          *(_QWORD *)&buf[20] = "inDataSize >= sizeof(Float64)";
          v41 = 2080;
          v42 = "BadPropertySize";
          v25 = MEMORY[0x1E0C81028];
          goto LABEL_212;
        }
        *(double *)a3 = *((float *)this + 550);
LABEL_125:
        v23 = 8;
LABEL_135:
        *a5 = v23;
        goto LABEL_136;
      }
      if (a4 != 4)
      {
        v12 = 561211770;
        if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
          goto LABEL_137;
        *(_DWORD *)buf = 136315906;
        *(_QWORD *)&buf[4] = "vpProperties.cpp";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 451;
        *(_WORD *)&buf[18] = 2080;
        *(_QWORD *)&buf[20] = "inDataSize == sizeof(Float32)";
        v41 = 2080;
        v42 = "BadPropertySize";
        v25 = MEMORY[0x1E0C81028];
        goto LABEL_212;
      }
      v28 = atomic_load((unsigned int *)this + 562);
      *v37 = v28;
LABEL_134:
      v23 = 4;
      goto LABEL_135;
    }
    if (v6 != 1969844082)
    {
      if (v6 != 1986097261)
      {
        if (v6 == 1987208053)
        {
          if (a4 <= 3)
          {
            v12 = 561211770;
            if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
              goto LABEL_137;
            *(_DWORD *)buf = 136315906;
            *(_QWORD *)&buf[4] = "vpProperties.cpp";
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = 714;
            *(_WORD *)&buf[18] = 2080;
            *(_QWORD *)&buf[20] = "inDataSize >= sizeof(Float32)";
            v41 = 2080;
            v42 = "BadPropertySize";
            v25 = MEMORY[0x1E0C81028];
            goto LABEL_212;
          }
          v14 = *((_DWORD *)this + 289);
          goto LABEL_51;
        }
        goto LABEL_126;
      }
      if (a4 > 3)
      {
        v11 = *((_DWORD *)this + 4148);
        goto LABEL_133;
      }
LABEL_128:
      v15 = 561211770;
      goto LABEL_129;
    }
    goto LABEL_46;
  }
  if (v6 > 1768514914)
  {
    if (v6 <= 1836082531)
    {
      if (v6 != 1768514915)
      {
        if (v6 == 1835361379)
        {
          if (a4 == 4)
          {
            v11 = *((unsigned __int8 *)this + 2244);
            goto LABEL_133;
          }
          v12 = 561211770;
          if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 136315906;
            *(_QWORD *)&buf[4] = "vpProperties.cpp";
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = 423;
            *(_WORD *)&buf[18] = 2080;
            *(_QWORD *)&buf[20] = "inDataSize == sizeof(UInt32)";
            v41 = 2080;
            v42 = "BadPropertySize";
            v25 = MEMORY[0x1E0C81028];
            goto LABEL_212;
          }
          goto LABEL_137;
        }
        goto LABEL_126;
      }
      if (a4 > 3)
      {
        v11 = *((unsigned __int8 *)this + 16568);
        goto LABEL_133;
      }
      goto LABEL_128;
    }
    if (v6 == 1836082532)
    {
      if (a4 != 4)
      {
        v12 = 561211770;
        if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
          goto LABEL_137;
        *(_DWORD *)buf = 136315906;
        *(_QWORD *)&buf[4] = "vpProperties.cpp";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 436;
        *(_WORD *)&buf[18] = 2080;
        *(_QWORD *)&buf[20] = "inDataSize == sizeof(UInt32)";
        v41 = 2080;
        v42 = "BadPropertySize";
        v25 = MEMORY[0x1E0C81028];
        goto LABEL_212;
      }
      if (VoiceProcessorV2::IsDeviceSupportingAdvancedChatFlavors(v10))
      {
        v11 = *((unsigned __int8 *)this + 2246);
        goto LABEL_133;
      }
LABEL_117:
      *a3 = 0;
      goto LABEL_134;
    }
    if (v6 != 1836266093)
    {
      if (v6 == 1836278117)
      {
        if (a4 != 8)
        {
          v12 = 561211770;
          if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
            goto LABEL_137;
          *(_DWORD *)buf = 136315906;
          *(_QWORD *)&buf[4] = "vpProperties.cpp";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = 695;
          *(_WORD *)&buf[18] = 2080;
          *(_QWORD *)&buf[20] = "inDataSize == sizeof(AUVoiceIOMutedSpeechActivityEventListener)";
          v41 = 2080;
          v42 = "BadPropertySize";
          v25 = MEMORY[0x1E0C81028];
          goto LABEL_212;
        }
        Copy = (const void *)*((_QWORD *)this + 2054);
        if (Copy)
          Copy = _Block_copy(Copy);
LABEL_93:
        *(_QWORD *)a3 = Copy;
        goto LABEL_125;
      }
      goto LABEL_126;
    }
LABEL_46:
    v15 = -10879;
LABEL_129:
    v35 = v15;
    goto LABEL_136;
  }
  if (v6 <= 1685483377)
  {
    if (v6 == 1635085677)
    {
      if (a4 == 4)
      {
        v11 = *((unsigned __int8 *)this + 2268);
        goto LABEL_133;
      }
      v12 = 561211770;
      if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315906;
        *(_QWORD *)&buf[4] = "vpProperties.cpp";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 764;
        *(_WORD *)&buf[18] = 2080;
        *(_QWORD *)&buf[20] = "inDataSize == sizeof(UInt32)";
        v41 = 2080;
        v42 = "BadPropertySize";
        v25 = MEMORY[0x1E0C81028];
        goto LABEL_212;
      }
      goto LABEL_137;
    }
    if (v6 != 1684305512)
      goto LABEL_126;
    goto LABEL_46;
  }
  if (v6 == 1685483378)
    goto LABEL_46;
  if (v6 == 1718384225)
  {
    if (a4 > 3)
    {
      v11 = *((_DWORD *)this + 4135);
      goto LABEL_133;
    }
    v12 = 561211770;
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315906;
      *(_QWORD *)&buf[4] = "vpProperties.cpp";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 689;
      *(_WORD *)&buf[18] = 2080;
      *(_QWORD *)&buf[20] = "inDataSize >= sizeof(UInt32)";
      v41 = 2080;
      v42 = "BadPropertySize";
      v25 = MEMORY[0x1E0C81028];
      goto LABEL_212;
    }
    goto LABEL_137;
  }
  if (v6 != 1718384242)
    goto LABEL_126;
  if (a4 > 3)
  {
    v11 = *((_DWORD *)this + 4134);
    goto LABEL_133;
  }
  v12 = 561211770;
  if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 136315906;
    *(_QWORD *)&buf[4] = "vpProperties.cpp";
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = 684;
    *(_WORD *)&buf[18] = 2080;
    *(_QWORD *)&buf[20] = "inDataSize >= sizeof(UInt32)";
    v41 = 2080;
    v42 = "BadPropertySize";
    v25 = MEMORY[0x1E0C81028];
    goto LABEL_212;
  }
LABEL_137:
  v31 = (unsigned int *)(v34 + 4);
  do
    v32 = __ldaxr(v31);
  while (__stlxr(v32 - 1, v31));
  return v12;
}

void sub_1B6483D80(_Unwind_Exception *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  _Unwind_Resume(a1);
}

unsigned int ***caulk::function_ref<void ()(unsigned char const*,unsigned long)>::functor_invoker<VoiceProcessorV2::GetPropertyInternal(unsigned int,void *,unsigned int,unsigned int *)::$_0>(unsigned int ***result, const void *a2, size_t a3)
{
  uint64_t v3;

  v3 = (uint64_t)*result;
  if (***result >= a3)
    return (unsigned int ***)memcpy(**(void ***)(v3 + 16), a2, a3);
  **(_DWORD **)(v3 + 8) = 561211770;
  return result;
}

uint64_t VoiceProcessorV2::SetProperty(VoiceProcessorV2 *this, int a2, unsigned int *theDict, unsigned int a4)
{
  uint64_t result;
  _BYTE *v9;
  unsigned int v10;
  CFDictionaryRef *v11;
  const void *v12;
  CFDictionaryRef Copy;
  char *v14;
  unsigned __int8 v15;
  uint64_t i;
  int *v17;
  unsigned int v18;
  _QWORD *v19;
  NSObject *v20;
  int v21;
  int Count;
  int *v23;
  uint64_t v24;
  int v25;
  int v26;
  _QWORD *v27;
  NSObject *v28;
  int v29;
  unint64_t v30;
  uint64_t v31;
  int *v32;
  _BOOL4 v33;
  _QWORD *v34;
  NSObject *v35;
  float v36;
  unsigned int *v37;
  float v38;
  float v39;
  unsigned int v41;
  unsigned int v42;
  int *v43;
  char *v44;
  VoiceProcessorV2 *v45;
  unsigned __int8 *v46;
  unsigned int *v47;
  unsigned int v48;
  int v49;
  int v50;
  unsigned int v51;
  unsigned int v52;
  unsigned __int8 *v53;
  uint64_t v54;
  NSObject *v55;
  NSObject *v56;
  int *v57;
  NSObject *v58;
  unsigned __int8 *v59;
  NSObject *v60;
  int v61;
  int *v62;
  void (*v63)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, float);
  uint64_t v64;
  NSObject *v65;
  int *v66;
  uint64_t v67;
  NSObject *v68;
  NSObject *v69;
  int *v70;
  _QWORD *v71;
  NSObject *v72;
  float v73;
  int *v74;
  uint64_t v75;
  float v76;
  unsigned int v77;
  NSObject *v78;
  NSObject *v79;
  int *v80;
  _QWORD *v81;
  NSObject *v82;
  int *v83;
  unsigned int v84;
  int v85;
  NSObject *v86;
  NSObject *v87;
  int v88;
  int v89;
  int *v90;
  OpaqueAudioComponentInstance *v91;
  NSObject *v92;
  double v93;
  double v94;
  NSObject *v95;
  int *v96;
  NSObject *v97;
  NSObject *v98;
  int *v99;
  unsigned int v100;
  int v101;
  NSObject *v102;
  NSObject *v103;
  const char *v104;
  int v105;
  const char *v106;
  int *v107;
  const char *v108;
  const char *v109;
  NSObject *v110;
  NSObject *v111;
  unsigned int v112;
  _BYTE *v113;
  int *v114;
  uint64_t v115;
  unsigned int v116;
  std::string *v117;
  NSObject *v118;
  double v119;
  double v120;
  NSObject *v121;
  int *v122;
  NSObject *v123;
  NSObject *v124;
  int *v125;
  double v126;
  float *v127;
  float v128;
  uint64_t v129;
  NSObject *v130;
  NSObject *v131;
  int *v132;
  int v133;
  double v134;
  NSObject *v135;
  NSObject *v136;
  int *v137;
  double v138;
  NSObject *v139;
  NSObject *v140;
  int *v141;
  NSObject *v142;
  NSObject *v143;
  double v144;
  int *v145;
  unsigned int v146;
  int v147;
  NSObject *v148;
  NSObject *v149;
  const char *v150;
  int *v151;
  const char *v152;
  std::string *p_p;
  int *v154;
  uint64_t v155;
  const char *v156;
  caulk::concurrent::details::lf_read_sync_write_impl *v157;
  os_unfair_lock_s *v158;
  unsigned int v159;
  char *v160;
  uint64_t v161;
  char *v162;
  char *v163;
  int v164;
  unint64_t v165;
  _BOOL8 v166;
  _BYTE *v167;
  char *v168;
  unint64_t *v169;
  void *v170;
  void *v171;
  unint64_t *v172;
  unint64_t v173;
  const void *v174;
  CFDataRef v175;
  void *v176;
  VoiceProcessorV2 *v177;
  const __CFArray **v178;
  uint64_t v179;
  std::string::size_type size;
  BOOL v181;
  BOOL v182;
  BOOL v183;
  float v184;
  float v185;
  char *v186;
  _DWORD *v187;
  char *v188;
  uint64_t v189;
  unint64_t v190;
  uint64_t v191;
  unint64_t v192;
  char *v193;
  char *v194;
  int v195;
  int v196;
  NSObject *v197;
  unsigned int v198;
  NSObject *v199;
  NSObject *v200;
  int *v201;
  VoiceProcessorV2 *v202;
  const __CFArray **v203;
  uint64_t v204;
  std::string::size_type v205;
  BOOL v206;
  BOOL v207;
  BOOL v208;
  float v209;
  float v210;
  char *v211;
  _DWORD *v212;
  char *v213;
  uint64_t v214;
  unint64_t v215;
  uint64_t v216;
  unint64_t v217;
  char *v218;
  char *v219;
  int v220;
  int v221;
  NSObject *v222;
  unsigned int v223;
  int *v224;
  NSObject *v225;
  NSObject *v226;
  const char *v227;
  int v228;
  int *v229;
  const char *v230;
  NSObject *v231;
  NSObject *v232;
  int *v233;
  int v234;
  NSObject *v235;
  NSObject *v236;
  int v237;
  int *v238;
  float **v239;
  void *v240;
  __int128 v241;
  float *v242;
  float *v243;
  float v244;
  float *v245;
  float v246;
  float v247;
  float v248;
  OpaqueAudioComponentInstance *v249;
  const void *v250;
  NSObject *v251;
  NSObject *v252;
  int *v253;
  NSObject *v254;
  NSObject *v255;
  int *v256;
  NSObject *v257;
  NSObject *v258;
  int *v259;
  unsigned __int8 *v260;
  NSObject *v261;
  unsigned __int8 *v262;
  NSObject *v263;
  int v264;
  int *v265;
  _QWORD *v266;
  int v267;
  _BYTE *v268;
  NSObject *v269;
  NSObject *v270;
  int *v271;
  NSObject *v272;
  NSObject *v273;
  int *v274;
  NSObject *v275;
  NSObject *v276;
  const char *v277;
  int v278;
  int *v279;
  const char *v280;
  unsigned int v281;
  NSObject *v282;
  unsigned __int8 *v283;
  NSObject *v284;
  unsigned int v285;
  int v286;
  std::string::size_type v287;
  int *v288;
  uint64_t v289;
  const void *v290;
  NSObject *v291;
  NSObject *v292;
  int *v293;
  NSObject *v294;
  NSObject *v295;
  int *v296;
  NSObject *v297;
  NSObject *v298;
  int *v299;
  float **v300;
  void *v301;
  float v302;
  NSObject *v303;
  NSObject *v304;
  int *v305;
  uint64_t v306;
  NSObject *v307;
  NSObject *v308;
  int *v309;
  NSObject *v310;
  NSObject *v311;
  int *v312;
  float v313;
  NSObject *v314;
  NSObject *v315;
  int *v316;
  OSStatus Parameter;
  NSObject *v318;
  NSObject *v319;
  int *v320;
  unsigned __int8 *v321;
  NSObject *v322;
  unsigned __int8 *v323;
  NSObject *v324;
  int v325;
  int *v326;
  std::string::size_type v327;
  void *v328;
  unint64_t v329;
  std::string::size_type v330;
  uint64_t *v331;
  uint64_t v332;
  const void *v333;
  std::string *CStringPtr;
  NSObject *v335;
  NSObject *v336;
  int *v337;
  uint64_t v338;
  unsigned int v339;
  int v340;
  int ChatFlavor;
  NSObject *v342;
  NSObject *v343;
  const char *v344;
  int v345;
  const char *v346;
  int *v347;
  const char *v348;
  const char *v349;
  NSObject *v350;
  NSObject *v351;
  int v352;
  int *v353;
  int v354;
  NSObject *v355;
  NSObject *v356;
  int *v357;
  caulk::concurrent::messenger *v358;
  NSObject *v359;
  NSObject *v360;
  int *v361;
  char *v362;
  uint64_t v363;
  unsigned int v364;
  unsigned int v365;
  int v366;
  NSObject *v367;
  NSObject *v368;
  const char *v369;
  int v370;
  const char *v371;
  int *v372;
  const char *v373;
  const char *v374;
  NSObject *v375;
  double v376;
  double v377;
  NSObject *v378;
  int *v379;
  NSObject *v380;
  NSObject *v381;
  int *v382;
  int v383;
  char v384;
  NSObject *v385;
  NSObject *v386;
  unsigned int v387;
  const char *v388;
  int *v389;
  const char *v390;
  unsigned int v391;
  int v392;
  int v393;
  int v394;
  int v395;
  NSObject *v396;
  double v397;
  double v398;
  NSObject *v399;
  const char *v400;
  const char *v401;
  int *v402;
  const char *v403;
  const char *v404;
  NSObject *v405;
  NSObject *v406;
  const char *v407;
  const char *v408;
  int *v409;
  char *v410;
  uint64_t v411;
  unsigned int v412;
  unsigned int *v413;
  NSObject *v414;
  NSObject *v415;
  int *v416;
  NSObject *v417;
  NSObject *v418;
  int *v419;
  NSObject *v420;
  NSObject *v421;
  unsigned int v422;
  int *v423;
  uint64_t v424;
  int v425;
  NSObject *v426;
  double v427;
  double v428;
  NSObject *v429;
  const char *v430;
  int v431;
  int *v432;
  const char *v433;
  NSObject *v434;
  NSObject *v435;
  const char *v436;
  int v437;
  int *v438;
  const char *v439;
  unsigned int v440;
  NSObject *v441;
  NSObject *v442;
  int *v443;
  unsigned int v444;
  unsigned int v445;
  int v446;
  NSObject *v447;
  NSObject *v448;
  const char *v449;
  int v450;
  const char *v451;
  int *v452;
  const char *v453;
  const char *v454;
  NSObject *v455;
  double v456;
  double v457;
  NSObject *v458;
  int *v459;
  NSObject *v460;
  NSObject *v461;
  int *v462;
  void *v463;
  void *v464;
  __int128 v465;
  float *v466;
  float *v467;
  float v469;
  float *v470;
  float v471;
  float v472;
  float v473;
  OpaqueAudioComponentInstance *v474;
  NSObject *v475;
  NSObject *v476;
  NSObject *v477;
  NSObject *v478;
  int v479;
  NSObject *v480;
  NSObject *v481;
  NSObject *v482;
  NSObject *v483;
  int *v484;
  NSObject *v485;
  NSObject *v486;
  int *v487;
  NSObject *v488;
  NSObject *v489;
  int *v490;
  NSObject *v491;
  NSObject *v492;
  int *v493;
  NSObject *v494;
  double v495;
  double v496;
  NSObject *v497;
  const char *v498;
  const char *v499;
  int *v500;
  const char *v501;
  const char *v502;
  NSObject *v503;
  NSObject *v504;
  const char *v505;
  const char *v506;
  const char *v507;
  const char *v508;
  _BYTE *v509;
  NSObject *v510;
  NSObject *v511;
  int *v512;
  NSObject *v513;
  NSObject *v514;
  int *v515;
  NSObject *v516;
  NSObject *v517;
  const char *v518;
  int v519;
  int *v520;
  const char *v521;
  NSObject *v522;
  NSObject *v523;
  int *v524;
  NSObject *v525;
  NSObject *v526;
  int *v527;
  NSObject *v528;
  double v529;
  double v530;
  NSObject *v531;
  int *v532;
  NSObject *v533;
  NSObject *v534;
  int *v535;
  NSObject *v536;
  float v537;
  float v538;
  NSObject *v539;
  NSObject *v540;
  VoiceProcessorV2 *v541;
  int *v542;
  NSObject *v543;
  NSObject *v544;
  NSObject *v545;
  std::runtime_error *v546;
  std::runtime_error *v547;
  std::runtime_error *v548;
  std::runtime_error *v549;
  std::runtime_error *v550;
  std::runtime_error *v551;
  std::runtime_error *exception;
  unsigned int v553;
  int v554;
  char *v555;
  VoiceProcessorV2 *v556;
  CFTypeRef v557;
  CFTypeRef cf;
  uint64_t v559;
  uint64_t v560;
  void *value;
  std::string __p;
  std::string buf[6];
  _BYTE v564[28];
  uint64_t v565;

  v565 = *MEMORY[0x1E0C80C00];
  result = 1651532146;
  if (theDict && a4)
  {
    v9 = (char *)this + 15897;
    v556 = this;
    if (a2 != 1937141091)
    {
      if (a2 == 1936747876)
      {
        if (VPLogScope(void)::once != -1)
          dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
        v33 = os_log_type_enabled(*(os_log_t *)VPLogScope(void)::scope, OS_LOG_TYPE_DEBUG);
        v34 = (_QWORD *)VPLogScope(void)::scope;
        if (v33)
        {
          if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(4, VPLogScope(void)::scope, 0))
          {
            v35 = (*v34 ? *v34 : MEMORY[0x1E0C81028]);
            if (os_log_type_enabled(v35, OS_LOG_TYPE_INFO))
            {
              vp::utility::encode_to_base_64((vp::utility *)theDict, (const unsigned __int8 *)a4, buf);
              if (buf[1].__r_.__value_.__s.__data_[0])
              {
                __p = buf[0];
                memset(buf, 0, 24);
              }
              else
              {
                std::string::basic_string[abi:ne180100]<0>(&__p, "???");
              }
              p_p = &__p;
              if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
                p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
              *(_DWORD *)v564 = 136315650;
              *(_QWORD *)&v564[4] = "vpProperties.cpp";
              *(_WORD *)&v564[12] = 1024;
              *(_DWORD *)&v564[14] = 842;
              *(_WORD *)&v564[18] = 2080;
              *(_QWORD *)&v564[20] = p_p;
              _os_log_impl(&dword_1B5ED0000, v35, OS_LOG_TYPE_INFO, "%25s:%-5d  <vp> setproperty: spatial metadata = \"%s\"", v564, 0x1Cu);
              if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
                operator delete(__p.__r_.__value_.__l.__data_);
              if (buf[1].__r_.__value_.__s.__data_[0] && SHIBYTE(buf[0].__r_.__value_.__r.__words[2]) < 0)
                operator delete(buf[0].__r_.__value_.__l.__data_);
            }
          }
          v154 = (int *)*((_QWORD *)this + 1570);
          if (v154 && (*v9 || *((_BYTE *)this + 15898)))
          {
            if (VPLogScope(void)::once != -1)
              dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
            v155 = VPLogScope(void)::scope;
            vp::utility::encode_to_base_64((vp::utility *)theDict, (const unsigned __int8 *)a4, buf);
            if (buf[1].__r_.__value_.__s.__data_[0])
            {
              *(std::string *)v564 = buf[0];
              memset(buf, 0, 24);
            }
            else
            {
              std::string::basic_string[abi:ne180100]<0>(v564, "???");
            }
            v156 = v564;
            if (v564[23] < 0)
              v156 = *(const char **)v564;
            CALegacyLog::log(v154, 4, v155, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/vpInitialize/vpProperties.cpp", 842, "SetProperty", "setproperty: spatial metadata = \"%s\"", v156);
            if ((v564[23] & 0x80000000) != 0)
              operator delete(*(void **)v564);
            if (buf[1].__r_.__value_.__s.__data_[0] && SHIBYTE(buf[0].__r_.__value_.__r.__words[2]) < 0)
              operator delete(buf[0].__r_.__value_.__l.__data_);
          }
        }
        else
        {
          if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(4, VPLogScope(void)::scope, 0))
          {
            v65 = (*v34 ? *v34 : MEMORY[0x1E0C81028]);
            if (os_log_type_enabled(v65, OS_LOG_TYPE_INFO))
            {
              LODWORD(buf[0].__r_.__value_.__l.__data_) = 136315394;
              *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)"vpProperties.cpp";
              WORD2(buf[0].__r_.__value_.__r.__words[1]) = 1024;
              *(_DWORD *)((char *)&buf[0].__r_.__value_.__r.__words[1] + 6) = 846;
              _os_log_impl(&dword_1B5ED0000, v65, OS_LOG_TYPE_INFO, "%25s:%-5d  <vp> setproperty: spatial metadata", (uint8_t *)buf, 0x12u);
            }
          }
          v66 = (int *)*((_QWORD *)this + 1570);
          if (v66 && (*v9 || *((_BYTE *)this + 15898)))
          {
            if (VPLogScope(void)::once != -1)
              dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
            CALegacyLog::log(v66, 4, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/vpInitialize/vpProperties.cpp", 846, "SetProperty", "setproperty: spatial metadata");
          }
        }
        v157 = (VoiceProcessorV2 *)((char *)this + 16304);
        v158 = (os_unfair_lock_s *)((char *)this + 16308);
        os_unfair_lock_lock((os_unfair_lock_t)this + 4077);
        v159 = caulk::concurrent::details::lf_read_sync_write_impl::begin_mutate((VoiceProcessorV2 *)((char *)this + 16304));
        v160 = (char *)this + 16312;
        if (!*((_BYTE *)this + v159 + 16312))
        {
          __break(1u);
          JUMPOUT(0x1B648CE08);
        }
        v161 = v159;
        v162 = (char *)this + 16320;
        v163 = &v162[32 * v159];
        buf[0].__r_.__value_.__s.__data_[0] = 0;
        buf[1].__r_.__value_.__s.__data_[0] = 0;
        v164 = v163[24];
        if (v163[24])
        {
          memset(buf, 0, 24);
          std::vector<unsigned char>::__init_with_size[abi:ne180100]<unsigned char *,unsigned char *>(buf, *(const void **)v163, *((_QWORD *)v163 + 1), *((_QWORD *)v163 + 1) - *(_QWORD *)v163);
          v164 = 1;
          buf[1].__r_.__value_.__s.__data_[0] = 1;
        }
        v165 = a4;
        v166 = (_DWORD)v161 == 0;
        if ((_DWORD)v161)
          v167 = v160;
        else
          v167 = v160 + 1;
        v168 = &v162[32 * v166];
        if (*v167)
        {
          v169 = (unint64_t *)v556;
          if (v168[24])
          {
            v170 = *(void **)v168;
            if (*(_QWORD *)v168)
            {
              *((_QWORD *)v168 + 1) = v170;
              operator delete(v170);
              v164 = buf[1].__r_.__value_.__s.__data_[0];
            }
          }
        }
        else
        {
          v160[v166] = 1;
          v169 = (unint64_t *)v556;
        }
        *v168 = 0;
        v168[24] = 0;
        if (v164)
        {
          *(std::string *)v168 = buf[0];
          memset(buf, 0, 24);
        }
        else
        {
          *(_QWORD *)v168 = 0;
          *((_QWORD *)v168 + 1) = 0;
          *((_QWORD *)v168 + 2) = 0;
        }
        v168[24] = 1;
        std::vector<char>::__assign_with_size[abi:ne180100]<char *,char *>(v168, (char *)theDict, (char *)theDict + v165, v165);
        caulk::concurrent::details::lf_read_sync_write_impl::end_mutate(v157);
        v160[v161] = 0;
        if (v163[24])
        {
          v171 = *(void **)v163;
          if (*(_QWORD *)v163)
          {
            *((_QWORD *)v163 + 1) = v171;
            operator delete(v171);
          }
        }
        os_unfair_lock_unlock(v158);
        v172 = v169 + 2048;
        do
          v173 = __ldaxr(v172);
        while (__stlxr(v173 + 1, v172));
        if (*v9)
        {
          if (v169[1884])
          {
            buf[0].__r_.__value_.__r.__words[0] = 0;
            VoiceProcessorV2::PListCopyDictionaryForWrite((VoiceProcessorV2 *)v169, (__CFDictionary **)buf);
            v174 = (const void *)buf[0].__r_.__value_.__r.__words[0];
            if (buf[0].__r_.__value_.__r.__words[0])
            {
              v175 = CFDataCreate(0, (const UInt8 *)theDict, v165);
              if (!v175)
              {
                exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                applesauce::CF::construct_error(exception);
              }
              applesauce::CF::DataRef::DataRef((applesauce::CF::DataRef *)v564, v175);
              __p.__r_.__value_.__r.__words[0] = *(_QWORD *)v564;
              VPGetPropsPListStringForKey((applesauce::CF::StringRef *)&cf, 70);
              WriteItemToDictionary((__CFDictionary **)buf, &cf, 4, 8uLL, (const char *)&__p);
              if (cf)
                CFRelease(cf);
              CFRelease(v174);
              buf[0].__r_.__value_.__r.__words[0] = 0;
              if (*(_QWORD *)v564)
                CFRelease(*(CFTypeRef *)v564);
            }
          }
        }
        return 0;
      }
      if (a2 == 32798)
      {
        result = 0;
        v10 = *((_DWORD *)this + 18);
        if (v10 > 0x34 || ((0x1FFFE33F3FFEF0uLL >> v10) & 1) == 0)
          return result;
        if (a4 > 7)
        {
          v11 = (CFDictionaryRef *)((char *)this + 2224);
          v12 = (const void *)*((_QWORD *)this + 278);
          if (v12)
          {
            CFRelease(v12);
            *v11 = 0;
          }
          Copy = CFDictionaryCreateCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE00], (CFDictionaryRef)theDict);
          *v11 = Copy;
          if (Copy)
          {
            v14 = (char *)this + 15897;
            if ((v15 & 1) == 0
            {
              *(_OWORD *)&buf[0].__r_.__value_.__l.__data_ = xmmword_1B66A2640;
              buf[0].__r_.__value_.__r.__words[2] = 64100;
              std::vector<std::tuple<int,int,int>>::vector[abi:ne180100](buf, 2uLL);
              __cxa_atexit((void (*)(void *))std::vector<std::tuple<int,int,int>>::~vector[abi:ne180100], &VoiceProcessorV2::SetProperty(unsigned int,void const*,unsigned int)::supportedAUs, &dword_1B5ED0000);
            }
            v17 = (int *)VoiceProcessorV2::SetProperty(unsigned int,void const*,unsigned int)::supportedAUs;
            for (i = qword_1EF136DD8; v17 != (int *)i; v17 += 3)
            {
              AUPropAndParamHelper::AddItemToAUPropsList((AUPropertyItem **)v556 + 3 * *v17 + 1363, v17[1], v17[2], 0, 8uLL, v11, 1);
              v18 = *v17;
              if (*v17 >= 0x3E)
                std::__throw_out_of_range[abi:ne180100]("bitset test argument out of range");
              if (((*((_QWORD *)v556 + 1104) >> v18) & 1) != 0
                && ((0x17FFFFFFC7FFFFFFuLL >> v18) & 1) != 0
                && *((_QWORD *)v556 + (int)v18 + 437))
              {
                if (VPLogScope(void)::once != -1)
                  dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
                v19 = (_QWORD *)VPLogScope(void)::scope;
                if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(3, VPLogScope(void)::scope, 0))
                {
                  v20 = (*v19 ? *v19 : MEMORY[0x1E0C81028]);
                  if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
                  {
                    v21 = *v17;
                    Count = CFDictionaryGetCount(*v11);
                    LODWORD(buf[0].__r_.__value_.__l.__data_) = 136315906;
                    *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)"vpProperties.cpp";
                    WORD2(buf[0].__r_.__value_.__r.__words[1]) = 1024;
                    *(_DWORD *)((char *)&buf[0].__r_.__value_.__r.__words[1] + 6) = 820;
                    WORD1(buf[0].__r_.__value_.__r.__words[2]) = 1024;
                    HIDWORD(buf[0].__r_.__value_.__r.__words[2]) = v21;
                    LOWORD(buf[1].__r_.__value_.__l.__data_) = 1024;
                    *(_DWORD *)&buf[1].__r_.__value_.__s.__data_[2] = Count;
                    _os_log_impl(&dword_1B5ED0000, v20, OS_LOG_TYPE_DEFAULT, "%25s:%-5d  <vp> setproperty: thermal budget on AU (%d); count = %u",
                      (uint8_t *)buf,
                      0x1Eu);
                  }
                }
                v23 = (int *)*((_QWORD *)v556 + 1570);
                if (v23 && (*v14 || v14[1]))
                {
                  if (VPLogScope(void)::once != -1)
                    dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
                  v24 = VPLogScope(void)::scope;
                  v25 = *v17;
                  v26 = CFDictionaryGetCount(*v11);
                  CALegacyLog::log(v23, 3, v24, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/vpInitialize/vpProperties.cpp", 820, "SetProperty", "setproperty: thermal budget on AU (%d); count = %u",
                    v25,
                    v26);
                }
                AudioUnitSetProperty(*((AudioUnit *)v556 + *v17 + 437), v17[1], v17[2], 0, v11, 8u);
              }
              else
              {
                if (VPLogScope(void)::once != -1)
                  dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
                v27 = (_QWORD *)VPLogScope(void)::scope;
                if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(4, VPLogScope(void)::scope, 0))
                {
                  v28 = (*v27 ? *v27 : MEMORY[0x1E0C81028]);
                  if (os_log_type_enabled(v28, OS_LOG_TYPE_INFO))
                  {
                    v29 = *v17;
                    if (*v17 >= 0x3E)
                      std::__throw_out_of_range[abi:ne180100]("bitset test argument out of range");
                    v30 = *((_QWORD *)v556 + 1104);
                    v31 = *((_QWORD *)v556 + v29 + 437);
                    LODWORD(buf[0].__r_.__value_.__l.__data_) = 136316162;
                    *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)"vpProperties.cpp";
                    WORD2(buf[0].__r_.__value_.__r.__words[1]) = 1024;
                    *(_DWORD *)((char *)&buf[0].__r_.__value_.__r.__words[1] + 6) = 826;
                    WORD1(buf[0].__r_.__value_.__r.__words[2]) = 1024;
                    HIDWORD(buf[0].__r_.__value_.__r.__words[2]) = v29;
                    LOWORD(buf[1].__r_.__value_.__l.__data_) = 1024;
                    *(_DWORD *)&buf[1].__r_.__value_.__s.__data_[2] = (v30 >> v29) & (0x17FFFFFFC7FFFFFFuLL >> v29) & 1;
                    HIWORD(buf[1].__r_.__value_.__r.__words[0]) = 1024;
                    LODWORD(buf[1].__r_.__value_.__r.__words[1]) = v31 != 0;
                    _os_log_impl(&dword_1B5ED0000, v28, OS_LOG_TYPE_INFO, "%25s:%-5d  <vp> setproperty: AU (%d) enabled = %d, null = %d", (uint8_t *)buf, 0x24u);
                  }
                }
                v32 = (int *)*((_QWORD *)v556 + 1570);
                if (v32 && (*v14 || v14[1]))
                {
                  if (VPLogScope(void)::once != -1)
                    dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
                  if (*v17 >= 0x3E)
                    std::__throw_out_of_range[abi:ne180100]("bitset test argument out of range");
                  CALegacyLog::log(v32, 4, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/vpInitialize/vpProperties.cpp", 826, "SetProperty", "setproperty: AU (%d) enabled = %d, null = %d", *v17, (*((_QWORD *)v556 + 1104) >> *v17) & (0x17FFFFFFC7FFFFFFuLL >> *v17) & 1, *((_QWORD *)v556 + *v17 + 437) != 0);
                }
              }
            }
            if (*v14)
              VoiceProcessorV2::PListWriteSetPropertyParameters(v556, 32798);
          }
          else
          {
            if (VPLogScope(void)::once != -1)
              dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
            v81 = (_QWORD *)VPLogScope(void)::scope;
            if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(4, VPLogScope(void)::scope, 0))
            {
              v82 = (*v81 ? *v81 : MEMORY[0x1E0C81028]);
              if (os_log_type_enabled(v82, OS_LOG_TYPE_INFO))
              {
                LODWORD(buf[0].__r_.__value_.__l.__data_) = 136315394;
                *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)"vpProperties.cpp";
                WORD2(buf[0].__r_.__value_.__r.__words[1]) = 1024;
                *(_DWORD *)((char *)&buf[0].__r_.__value_.__r.__words[1] + 6) = 833;
                _os_log_impl(&dword_1B5ED0000, v82, OS_LOG_TYPE_INFO, "%25s:%-5d  <vp> setproperty: thermal budget dict is empty", (uint8_t *)buf, 0x12u);
              }
            }
            v83 = (int *)*((_QWORD *)this + 1570);
            if (v83 && (*v9 || *((_BYTE *)this + 15898)))
            {
              if (VPLogScope(void)::once != -1)
                dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
              CALegacyLog::log(v83, 4, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/vpInitialize/vpProperties.cpp", 833, "SetProperty", "setproperty: thermal budget dict is empty");
            }
          }
          return 0;
        }
        if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
          return 561211770;
        LODWORD(buf[0].__r_.__value_.__l.__data_) = 136315906;
        *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)"vpProperties.cpp";
        WORD2(buf[0].__r_.__value_.__r.__words[1]) = 1024;
        *(_DWORD *)((char *)&buf[0].__r_.__value_.__r.__words[1] + 6) = 796;
        WORD1(buf[0].__r_.__value_.__r.__words[2]) = 2080;
        *(std::string::size_type *)((char *)&buf[0].__r_.__value_.__r.__words[2] + 4) = (std::string::size_type)"inDataSize >= sizeof(CFDictionaryRef)";
        WORD2(buf[1].__r_.__value_.__r.__words[0]) = 2080;
        *(std::string::size_type *)((char *)buf[1].__r_.__value_.__r.__words + 6) = (std::string::size_type)"BadPropertySize";
        v543 = MEMORY[0x1E0C81028];
LABEL_1530:
        _os_log_impl(&dword_1B5ED0000, v543, OS_LOG_TYPE_ERROR, "%25s:%-5d  ca_require: %s %s", (uint8_t *)buf, 0x26u);
        return 561211770;
      }
      v555 = (char *)this + 15897;
      v43 = (int *)((char *)this + 16392);
      v44 = (char *)this + 2392;
      v45 = (VoiceProcessorV2 *)(*(uint64_t (**)(char *))(*((_QWORD *)this + 299) + 16))((char *)this + 2392);
      v554 = (int)v45;
      v47 = (unsigned int *)((char *)this + 2480);
      do
        v48 = __ldaxr(v47);
      while (__stlxr(v48 + 1, v47));
      while (*((_DWORD *)this + 621))
        v45 = (VoiceProcessorV2 *)usleep(0x1F4u);
      if (a2 <= 1701864050)
      {
        if (a2 <= 1634300530)
        {
          v49 = a2 - 0x8000;
          v50 = 0;
          v51 = 0;
          switch(v49)
          {
            case 0:
              v51 = 561211770;
              if (a4 < 4)
                goto LABEL_1341;
              v52 = *theDict;
              if (*theDict > 1)
                goto LABEL_1341;
              v53 = (unsigned __int8 *)this + 472;
              *((_BYTE *)this + 472) = v52 != 0;
              v54 = VPLogScope(void)::once;
              if (*((_DWORD *)this + 4134))
              {
                if (VPLogScope(void)::once != -1)
                  dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
                v55 = CALog::LogObjIfEnabled(3, VPLogScope(void)::scope);
                if (v55)
                {
                  v56 = v55;
                  if (os_log_type_enabled(v55, OS_LOG_TYPE_DEFAULT))
                  {
                    LODWORD(buf[0].__r_.__value_.__l.__data_) = 136315394;
                    *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)"vpProperties.cpp";
                    WORD2(buf[0].__r_.__value_.__r.__words[1]) = 1024;
                    *(_DWORD *)((char *)&buf[0].__r_.__value_.__r.__words[1] + 6) = 889;
                    _os_log_impl(&dword_1B5ED0000, v56, OS_LOG_TYPE_DEFAULT, "%25s:%-5d  <vp> Forcing bypass to false due to chat flavor", (uint8_t *)buf, 0x12u);
                  }
                }
                v57 = (int *)*((_QWORD *)this + 1570);
                if (v57 && (*v555 || *((_BYTE *)this + 15898)))
                {
                  if (VPLogScope(void)::once != -1)
                    dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
                  CALegacyLog::log(v57, 3, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/vpInitialize/vpProperties.cpp", 889, "SetProperty", "Forcing bypass to false due to chat flavor");
                }
                *v53 = 0;
                v54 = VPLogScope(void)::once;
              }
              if (v54 != -1)
                dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
              v58 = CALog::LogObjIfEnabled(3, VPLogScope(void)::scope);
              if (v58)
              {
                v60 = v58;
                if (os_log_type_enabled(v58, OS_LOG_TYPE_DEFAULT))
                {
                  v61 = *v53;
                  LODWORD(buf[0].__r_.__value_.__l.__data_) = 136315650;
                  *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)"vpProperties.cpp";
                  WORD2(buf[0].__r_.__value_.__r.__words[1]) = 1024;
                  *(_DWORD *)((char *)&buf[0].__r_.__value_.__r.__words[1] + 6) = 892;
                  WORD1(buf[0].__r_.__value_.__r.__words[2]) = 1024;
                  HIDWORD(buf[0].__r_.__value_.__r.__words[2]) = v61;
                  _os_log_impl(&dword_1B5ED0000, v60, OS_LOG_TYPE_DEFAULT, "%25s:%-5d  <vp> setproperty: bypass =%d", (uint8_t *)buf, 0x18u);
                }
              }
              v62 = (int *)*((_QWORD *)this + 1570);
              if (v62 && (*v555 || *((_BYTE *)this + 15898)))
              {
                if (VPLogScope(void)::once != -1)
                  dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
                CALegacyLog::log(v62, 3, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/vpInitialize/vpProperties.cpp", 892, "SetProperty", "setproperty: bypass =%d", *v53);
              }
              VoiceProcessorV2::ReadAndApplyDefaultsOverride(this, CFSTR("vp_bypass"), 0, (float *)v53, v59);
              v63 = (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, float))*((_QWORD *)this + 1555);
              if (*((_BYTE *)this + 472))
              {
                if (!v63)
                  goto LABEL_1501;
                v63(*((_QWORD *)this + 1554), 0, 0, 0, 0, *((float *)this + 1131));
                v64 = 4524;
              }
              else
              {
                if (!v63)
                  goto LABEL_1501;
                v63(*((_QWORD *)this + 1554), 0, 0, 0, 0, *((float *)this + 1129));
                v64 = 4520;
              }
              (*((void (**)(_QWORD, uint64_t, _QWORD, _QWORD, _QWORD, float))this + 1555))(*((_QWORD *)this + 1554), 8, 0, 0, 0, *(float *)((char *)this + v64));
LABEL_1501:
              if (VoiceProcessorV2::ShouldInteractWithControlCenter(this))
                (*(void (**)(VoiceProcessorV2 *, uint64_t))(*(_QWORD *)this + 584))(this, 1);
              VoiceProcessorV2::ReportMetrics(this);
              goto LABEL_1614;
            case 1:
              v51 = 561211770;
              if (a4 < 4)
                goto LABEL_1341;
              v281 = *theDict;
              if (*theDict > 1)
                goto LABEL_1341;
              v564[0] = v281 == 1;
              if (VPLogScope(void)::once != -1)
                dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
              v282 = CALog::LogObjIfEnabled(5, VPLogScope(void)::scope);
              if (v282)
              {
                v284 = v282;
                if (os_log_type_enabled(v282, OS_LOG_TYPE_DEBUG))
                {
                  v285 = *((_DWORD *)this + 1166);
                  v286 = *((_DWORD *)this + 571);
                  v287 = *((_QWORD *)this + 412);
                  LODWORD(buf[0].__r_.__value_.__l.__data_) = 136316418;
                  *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)"vpProperties.cpp";
                  WORD2(buf[0].__r_.__value_.__r.__words[1]) = 1024;
                  *(_DWORD *)((char *)&buf[0].__r_.__value_.__r.__words[1] + 6) = 961;
                  WORD1(buf[0].__r_.__value_.__r.__words[2]) = 1024;
                  HIDWORD(buf[0].__r_.__value_.__r.__words[2]) = v281 == 1;
                  LOWORD(buf[1].__r_.__value_.__l.__data_) = 1024;
                  *(_DWORD *)&buf[1].__r_.__value_.__s.__data_[2] = (v285 >> 1) & 1;
                  HIWORD(buf[1].__r_.__value_.__r.__words[0]) = 1024;
                  LODWORD(buf[1].__r_.__value_.__r.__words[1]) = v286;
                  WORD2(buf[1].__r_.__value_.__r.__words[1]) = 2048;
                  *(std::string::size_type *)((char *)&buf[1].__r_.__value_.__r.__words[1] + 6) = v287;
                  _os_log_impl(&dword_1B5ED0000, v284, OS_LOG_TYPE_DEBUG, "%25s:%-5d  <vp> setproperty: enableagc=%d (currently: enableagcdefault=%d, clientsetenableagc=%d, agc=%p).", (uint8_t *)buf, 0x2Eu);
                }
              }
              v288 = (int *)*((_QWORD *)this + 1570);
              if (v288 && (*v555 || *((_BYTE *)this + 15898)))
              {
                if (VPLogScope(void)::once != -1)
                  dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
                CALegacyLog::log(v288, 5, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/vpInitialize/vpProperties.cpp", 961, "SetProperty", "setproperty: enableagc=%d (currently: enableagcdefault=%d, clientsetenableagc=%d, agc=%p).", v281 == 1, (*((_DWORD *)this + 1166) >> 1) & 1, *((_DWORD *)this + 571), *((const void **)this + 412));
              }
              *((_DWORD *)this + 571) = *theDict;
              VoiceProcessorV2::ReadAndApplyDefaultsOverride(this, CFSTR("vp_enable_agc"), 0, (float *)v564, v283);
              if (*v555)
                VoiceProcessorV2::PListWriteSetPropertyParameters(this, 32769);
              v289 = *((_QWORD *)this + 583);
              if (v564[0])
              {
                *((_QWORD *)this + 583) = v289 | 2;
                VoiceProcessorV2::InstantiateAndConfigureEffectAU(this, 0x41u, 1);
              }
              else
              {
                *((_QWORD *)this + 583) = v289 & 0xFFFFFFFFFFFFFFFDLL;
                VoiceProcessorV2::DisposeAU(this, 1635083896, 1634165554, (OpaqueAudioComponentInstance **)this + 412, 1);
              }
              goto LABEL_1614;
            case 4:
              v51 = 561211770;
              if (a4 < 4 || *theDict > 1)
                goto LABEL_1341;
              *((_BYTE *)this + 2080) = *theDict != 0;
              if (VPLogScope(void)::once != -1)
                dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
              v260 = (unsigned __int8 *)this + 2080;
              v261 = CALog::LogObjIfEnabled(3, VPLogScope(void)::scope);
              if (v261)
              {
                v263 = v261;
                if (os_log_type_enabled(v261, OS_LOG_TYPE_DEFAULT))
                {
                  v264 = *v260;
                  LODWORD(buf[0].__r_.__value_.__l.__data_) = 136315650;
                  *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)"vpProperties.cpp";
                  WORD2(buf[0].__r_.__value_.__r.__words[1]) = 1024;
                  *(_DWORD *)((char *)&buf[0].__r_.__value_.__r.__words[1] + 6) = 922;
                  WORD1(buf[0].__r_.__value_.__r.__words[2]) = 1024;
                  HIDWORD(buf[0].__r_.__value_.__r.__words[2]) = v264;
                  _os_log_impl(&dword_1B5ED0000, v263, OS_LOG_TYPE_DEFAULT, "%25s:%-5d  <vp> setproperty: mute uplink output =%d", (uint8_t *)buf, 0x18u);
                }
              }
              v265 = (int *)*((_QWORD *)this + 1570);
              if (v265 && (*v555 || *((_BYTE *)this + 15898)))
              {
                if (VPLogScope(void)::once != -1)
                  dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
                CALegacyLog::log(v265, 3, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/vpInitialize/vpProperties.cpp", 922, "SetProperty", "setproperty: mute uplink output =%d", *v260);
              }
              VoiceProcessorV2::ReadAndApplyDefaultsOverride(this, CFSTR("vp_mute_output"), 0, (float *)this + 520, v262);
              if (*v555)
                VoiceProcessorV2::PListWriteSetPropertyParameters(this, 32772);
              AudioIssueDetectorClientSetUplinkMute(*v260);
              if (*((_QWORD *)this + 2054))
              {
                applesauce::CF::TypeRef::TypeRef((applesauce::CF::TypeRef *)v564, "Muted");
                if (*v260)
                  v266 = (_QWORD *)MEMORY[0x1E0C9AE50];
                else
                  v266 = (_QWORD *)MEMORY[0x1E0C9AE40];
                *(_QWORD *)&v564[8] = *v266;
                buf[0].__r_.__value_.__r.__words[0] = (std::string::size_type)v564;
                buf[0].__r_.__value_.__l.__size_ = 1;
                __p.__r_.__value_.__r.__words[0] = (std::string::size_type)applesauce::CF::details::make_CFDictionaryRef((uint64_t)buf);
                applesauce::CF::TypeRefPair::~TypeRefPair((applesauce::CF::TypeRefPair *)v564);
                localPLLogRegisteredEvent((uint64_t)__p.__r_.__value_.__l.__data_);
                applesauce::CF::DictionaryRef::~DictionaryRef((const void **)&__p.__r_.__value_.__l.__data_);
              }
              goto LABEL_1614;
            case 5:
              if (a4 != 4)
              {
                if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
                  goto LABEL_1598;
                LODWORD(buf[0].__r_.__value_.__l.__data_) = 136315906;
                *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)"vpProperties.cpp";
                WORD2(buf[0].__r_.__value_.__r.__words[1]) = 1024;
                *(_DWORD *)((char *)&buf[0].__r_.__value_.__r.__words[1] + 6) = 1108;
                WORD1(buf[0].__r_.__value_.__r.__words[2]) = 2080;
                *(std::string::size_type *)((char *)&buf[0].__r_.__value_.__r.__words[2] + 4) = (std::string::size_type)"inDataSize == sizeof(UInt32)";
                WORD2(buf[1].__r_.__value_.__r.__words[0]) = 2080;
                *(std::string::size_type *)((char *)buf[1].__r_.__value_.__r.__words + 6) = (std::string::size_type)"BadPropertySize";
                v544 = MEMORY[0x1E0C81028];
                goto LABEL_1597;
              }
              if (*theDict < 2)
              {
                v267 = *theDict != 0;
                if (*((unsigned __int8 *)this + 2083) != v267)
                {
                  v268 = (char *)this + 2083;
                  *((_BYTE *)this + 2083) = v267;
                  VoiceProcessorV2::ReadAndApplyDefaultsOverride(this, CFSTR("vp_disable_vp"), 0, (float *)((char *)this + 2083), v46);
                  if (!*((_BYTE *)this + 16177))
                  {
                    if (VPLogScope(void)::once != -1)
                      dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
                    v269 = CALog::LogObjIfEnabled(3, VPLogScope(void)::scope);
                    if (v269)
                    {
                      v270 = v269;
                      if (os_log_type_enabled(v269, OS_LOG_TYPE_DEFAULT))
                      {
                        LODWORD(buf[0].__r_.__value_.__l.__data_) = 136315394;
                        *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)"vpProperties.cpp";
                        WORD2(buf[0].__r_.__value_.__r.__words[1]) = 1024;
                        *(_DWORD *)((char *)&buf[0].__r_.__value_.__r.__words[1] + 6) = 1117;
                        _os_log_impl(&dword_1B5ED0000, v270, OS_LOG_TYPE_DEFAULT, "%25s:%-5d  <vp> Begin self-reinit (kVPParameter_DisableVP)", (uint8_t *)buf, 0x12u);
                      }
                    }
                    v271 = (int *)*((_QWORD *)this + 1570);
                    if (v271 && (*v555 || *((_BYTE *)this + 15898)))
                    {
                      if (VPLogScope(void)::once != -1)
                        dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
                      CALegacyLog::log(v271, 3, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/vpInitialize/vpProperties.cpp", 1117, "SetProperty", "Begin self-reinit (kVPParameter_DisableVP)");
                    }
                    if (*((_BYTE *)this + 477))
                      VoiceProcessorV2::InitializeDLP(this);
                    if (*((_BYTE *)this + 476))
                      (*(void (**)(VoiceProcessorV2 *))(*(_QWORD *)this + 240))(this);
                    if (VPLogScope(void)::once != -1)
                      dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
                    v272 = CALog::LogObjIfEnabled(3, VPLogScope(void)::scope);
                    if (v272)
                    {
                      v273 = v272;
                      if (os_log_type_enabled(v272, OS_LOG_TYPE_DEFAULT))
                      {
                        LODWORD(buf[0].__r_.__value_.__l.__data_) = 136315394;
                        *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)"vpProperties.cpp";
                        WORD2(buf[0].__r_.__value_.__r.__words[1]) = 1024;
                        *(_DWORD *)((char *)&buf[0].__r_.__value_.__r.__words[1] + 6) = 1120;
                        _os_log_impl(&dword_1B5ED0000, v273, OS_LOG_TYPE_DEFAULT, "%25s:%-5d  <vp> End self-reinit (kVPParameter_DisableVP)", (uint8_t *)buf, 0x12u);
                      }
                    }
                    v274 = (int *)*((_QWORD *)this + 1570);
                    if (v274 && (*v555 || *((_BYTE *)this + 15898)))
                    {
                      if (VPLogScope(void)::once != -1)
                        dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
                      CALegacyLog::log(v274, 3, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/vpInitialize/vpProperties.cpp", 1120, "SetProperty", "End self-reinit (kVPParameter_DisableVP)");
                    }
                  }
                  if (VPLogScope(void)::once != -1)
                    dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
                  v275 = CALog::LogObjIfEnabled(3, VPLogScope(void)::scope);
                  if (v275)
                  {
                    v276 = v275;
                    if (os_log_type_enabled(v275, OS_LOG_TYPE_DEFAULT))
                    {
                      v277 = "TRUE";
                      v278 = *v268;
                      *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)"vpProperties.cpp";
                      LODWORD(buf[0].__r_.__value_.__l.__data_) = 136315650;
                      if (!v278)
                        v277 = "FALSE";
                      WORD2(buf[0].__r_.__value_.__r.__words[1]) = 1024;
                      *(_DWORD *)((char *)&buf[0].__r_.__value_.__r.__words[1] + 6) = 1122;
                      WORD1(buf[0].__r_.__value_.__r.__words[2]) = 2080;
                      *(std::string::size_type *)((char *)&buf[0].__r_.__value_.__r.__words[2] + 4) = (std::string::size_type)v277;
                      _os_log_impl(&dword_1B5ED0000, v276, OS_LOG_TYPE_DEFAULT, "%25s:%-5d  <vp> setproperty: disable vp = %s.  ", (uint8_t *)buf, 0x1Cu);
                    }
                  }
                  v279 = (int *)*((_QWORD *)this + 1570);
                  if (v279 && (*v555 || *((_BYTE *)this + 15898)))
                  {
                    if (VPLogScope(void)::once != -1)
                      dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
                    if (*v268)
                      v280 = "TRUE";
                    else
                      v280 = "FALSE";
                    CALegacyLog::log(v279, 3, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/vpInitialize/vpProperties.cpp", 1122, "SetProperty", "setproperty: disable vp = %s.  ", v280);
                  }
                }
                if (*v555)
                  VoiceProcessorV2::PListWriteSetPropertyParameters(this, 32773);
                goto LABEL_1614;
              }
              if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
                goto LABEL_1512;
              LODWORD(buf[0].__r_.__value_.__l.__data_) = 136315906;
              *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)"vpProperties.cpp";
              WORD2(buf[0].__r_.__value_.__r.__words[1]) = 1024;
              *(_DWORD *)((char *)&buf[0].__r_.__value_.__r.__words[1] + 6) = 1110;
              WORD1(buf[0].__r_.__value_.__r.__words[2]) = 2080;
              *(std::string::size_type *)((char *)&buf[0].__r_.__value_.__r.__words[2] + 4) = (std::string::size_type)"disableVP <= 1";
              WORD2(buf[1].__r_.__value_.__r.__words[0]) = 2080;
              *(std::string::size_type *)((char *)buf[1].__r_.__value_.__r.__words + 6) = (std::string::size_type)"InvalidPropertyValue";
              v536 = MEMORY[0x1E0C81028];
              goto LABEL_1511;
            case 12:
              if ((a4 & 3) == 0)
              {
                memset(buf, 0, 24);
                std::vector<float>::__init_with_size[abi:ne180100]<float const*,float const*>(buf, theDict, (uint64_t)&theDict[(unint64_t)a4 >> 2], (unint64_t)a4 >> 2);
                v300 = (float **)((char *)this + 2096);
                v301 = (void *)*((_QWORD *)this + 262);
                if (v301)
                {
                  *((_QWORD *)this + 263) = v301;
                  operator delete(v301);
                  *v300 = 0;
                  *((_QWORD *)this + 263) = 0;
                  *((_QWORD *)this + 264) = 0;
                }
                *(std::string *)((char *)this + 2096) = buf[0];
                if (*v555)
                  VoiceProcessorV2::PListWriteMicTrimGainParameters(this, v300);
                goto LABEL_1614;
              }
              if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
                goto LABEL_1598;
              LODWORD(buf[0].__r_.__value_.__l.__data_) = 136315906;
              *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)"vpProperties.cpp";
              WORD2(buf[0].__r_.__value_.__r.__words[1]) = 1024;
              *(_DWORD *)((char *)&buf[0].__r_.__value_.__r.__words[1] + 6) = 1154;
              WORD1(buf[0].__r_.__value_.__r.__words[2]) = 2080;
              *(std::string::size_type *)((char *)&buf[0].__r_.__value_.__r.__words[2] + 4) = (std::string::size_type)"(inDataSize % sizeof(Float32)) == 0";
              WORD2(buf[1].__r_.__value_.__r.__words[0]) = 2080;
              *(std::string::size_type *)((char *)buf[1].__r_.__value_.__r.__words + 6) = (std::string::size_type)"BadPropertySize";
              v544 = MEMORY[0x1E0C81028];
              goto LABEL_1597;
            case 13:
              if ((a4 & 3) == 0)
              {
                memset(buf, 0, 24);
                std::vector<float>::__init_with_size[abi:ne180100]<float const*,float const*>(buf, theDict, (uint64_t)&theDict[(unint64_t)a4 >> 2], (unint64_t)a4 >> 2);
                v239 = (float **)((char *)this + 2128);
                v240 = (void *)*((_QWORD *)this + 266);
                if (v240)
                {
                  *((_QWORD *)this + 267) = v240;
                  operator delete(v240);
                  *v239 = 0;
                  *((_QWORD *)this + 267) = 0;
                  *((_QWORD *)this + 268) = 0;
                }
                v241 = *(_OWORD *)&buf[0].__r_.__value_.__l.__data_;
                *(std::string *)((char *)this + 2128) = buf[0];
                if (*((_BYTE *)this + 477) && (*((_BYTE *)this + 8834) & 0x20) != 0)
                {
                  v242 = (float *)v241;
                  if ((_QWORD)v241 != *((_QWORD *)&v241 + 1))
                  {
                    v243 = (float *)(v241 + 4);
                    if ((_QWORD)v241 + 4 != *((_QWORD *)&v241 + 1))
                    {
                      v244 = *(float *)v241;
                      v245 = v242 + 1;
                      do
                      {
                        v246 = *v245++;
                        v247 = v246;
                        if (v246 < v244)
                        {
                          v244 = v247;
                          v242 = v243;
                        }
                        v243 = v245;
                      }
                      while (v245 != *((float **)&v241 + 1));
                    }
                  }
                  v248 = fmaxf(*v242, 0.0);
                  AUPropAndParamHelper::AddItemToAUParamList((uint64_t)this + 9352, 1, v248);
                  v249 = (OpaqueAudioComponentInstance *)*((_QWORD *)this + 458);
                  if (v249)
                    AudioUnitSetParameter(v249, 1u, 0, 0, v248, 0);
                }
                if (*v555)
                  VoiceProcessorV2::PListWriteRefTrimGainParameters(this, v239);
                goto LABEL_1614;
              }
              if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
                goto LABEL_1598;
              LODWORD(buf[0].__r_.__value_.__l.__data_) = 136315906;
              *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)"vpProperties.cpp";
              WORD2(buf[0].__r_.__value_.__r.__words[1]) = 1024;
              *(_DWORD *)((char *)&buf[0].__r_.__value_.__r.__words[1] + 6) = 1189;
              WORD1(buf[0].__r_.__value_.__r.__words[2]) = 2080;
              *(std::string::size_type *)((char *)&buf[0].__r_.__value_.__r.__words[2] + 4) = (std::string::size_type)"(inDataSize % sizeof(Float32)) == 0";
              WORD2(buf[1].__r_.__value_.__r.__words[0]) = 2080;
              *(std::string::size_type *)((char *)buf[1].__r_.__value_.__r.__words + 6) = (std::string::size_type)"BadPropertySize";
              v544 = MEMORY[0x1E0C81028];
              goto LABEL_1597;
            case 15:
              if (a4 == 8)
              {
                v290 = (const void *)*((_QWORD *)this + 276);
                if (v290)
                {
                  CFRelease(v290);
                  *((_QWORD *)this + 276) = 0;
                }
                if (*(_QWORD *)theDict)
                {
                  *((_QWORD *)this + 276) = CFDictionaryCreateCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE00], *(CFDictionaryRef *)theDict);
                  if (*((_BYTE *)this + 476) && !*((_BYTE *)this + 16177))
                  {
                    if (VPLogScope(void)::once != -1)
                      dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
                    v291 = CALog::LogObjIfEnabled(3, VPLogScope(void)::scope);
                    if (v291)
                    {
                      v292 = v291;
                      if (os_log_type_enabled(v291, OS_LOG_TYPE_DEFAULT))
                      {
                        LODWORD(buf[0].__r_.__value_.__l.__data_) = 136315394;
                        *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)"vpProperties.cpp";
                        WORD2(buf[0].__r_.__value_.__r.__words[1]) = 1024;
                        *(_DWORD *)((char *)&buf[0].__r_.__value_.__r.__words[1] + 6) = 1410;
                        _os_log_impl(&dword_1B5ED0000, v292, OS_LOG_TYPE_DEFAULT, "%25s:%-5d  <vp> Begin self-reinit (kVPProperty_TelephonyMicDSPSettings)", (uint8_t *)buf, 0x12u);
                      }
                    }
                    v293 = (int *)*((_QWORD *)this + 1570);
                    if (v293 && (*v555 || *((_BYTE *)this + 15898)))
                    {
                      if (VPLogScope(void)::once != -1)
                        dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
                      CALegacyLog::log(v293, 3, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/vpInitialize/vpProperties.cpp", 1410, "SetProperty", "Begin self-reinit (kVPProperty_TelephonyMicDSPSettings)");
                    }
                    (*(void (**)(VoiceProcessorV2 *))(*(_QWORD *)this + 240))(this);
                    if (VPLogScope(void)::once != -1)
                      dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
                    v294 = CALog::LogObjIfEnabled(3, VPLogScope(void)::scope);
                    if (v294)
                    {
                      v295 = v294;
                      if (os_log_type_enabled(v294, OS_LOG_TYPE_DEFAULT))
                      {
                        LODWORD(buf[0].__r_.__value_.__l.__data_) = 136315394;
                        *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)"vpProperties.cpp";
                        WORD2(buf[0].__r_.__value_.__r.__words[1]) = 1024;
                        *(_DWORD *)((char *)&buf[0].__r_.__value_.__r.__words[1] + 6) = 1412;
                        _os_log_impl(&dword_1B5ED0000, v295, OS_LOG_TYPE_DEFAULT, "%25s:%-5d  <vp> End self-reinit (kVPProperty_TelephonyMicDSPSettings)", (uint8_t *)buf, 0x12u);
                      }
                    }
                    v296 = (int *)*((_QWORD *)this + 1570);
                    if (v296 && (*v555 || *((_BYTE *)this + 15898)))
                    {
                      if (VPLogScope(void)::once != -1)
                        dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
                      CALegacyLog::log(v296, 3, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/vpInitialize/vpProperties.cpp", 1412, "SetProperty", "End self-reinit (kVPProperty_TelephonyMicDSPSettings)");
                    }
                  }
                  if (VPLogScope(void)::once != -1)
                    dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
                  v297 = CALog::LogObjIfEnabled(3, VPLogScope(void)::scope);
                  if (v297)
                  {
                    v298 = v297;
                    if (os_log_type_enabled(v297, OS_LOG_TYPE_DEFAULT))
                    {
                      LODWORD(buf[0].__r_.__value_.__l.__data_) = 136315394;
                      *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)"vpProperties.cpp";
                      WORD2(buf[0].__r_.__value_.__r.__words[1]) = 1024;
                      *(_DWORD *)((char *)&buf[0].__r_.__value_.__r.__words[1] + 6) = 1422;
                      _os_log_impl(&dword_1B5ED0000, v298, OS_LOG_TYPE_DEFAULT, "%25s:%-5d  <vp> setproperty: mic custom dsp settings", (uint8_t *)buf, 0x12u);
                    }
                  }
                  v299 = (int *)*((_QWORD *)this + 1570);
                  if (v299 && (*v555 || *((_BYTE *)this + 15898)))
                  {
                    if (VPLogScope(void)::once != -1)
                      dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
                    CALegacyLog::log(v299, 3, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/vpInitialize/vpProperties.cpp", 1422, "SetProperty", "setproperty: mic custom dsp settings");
                  }
                  if (*v555)
                    VoiceProcessorV2::PListWriteSetPropertyParameters(this, 32783);
                }
                goto LABEL_1614;
              }
              if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
                goto LABEL_1598;
              LODWORD(buf[0].__r_.__value_.__l.__data_) = 136315906;
              *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)"vpProperties.cpp";
              WORD2(buf[0].__r_.__value_.__r.__words[1]) = 1024;
              *(_DWORD *)((char *)&buf[0].__r_.__value_.__r.__words[1] + 6) = 1395;
              WORD1(buf[0].__r_.__value_.__r.__words[2]) = 2080;
              *(std::string::size_type *)((char *)&buf[0].__r_.__value_.__r.__words[2] + 4) = (std::string::size_type)"inDataSize == sizeof(CFDictionaryRef)";
              WORD2(buf[1].__r_.__value_.__r.__words[0]) = 2080;
              *(std::string::size_type *)((char *)buf[1].__r_.__value_.__r.__words + 6) = (std::string::size_type)"BadPropertySize";
              v544 = MEMORY[0x1E0C81028];
              goto LABEL_1597;
            case 16:
              if (a4 == 8)
              {
                v250 = (const void *)*((_QWORD *)this + 277);
                if (v250)
                {
                  CFRelease(v250);
                  *((_QWORD *)this + 277) = 0;
                }
                if (*(_QWORD *)theDict)
                {
                  *((_QWORD *)this + 277) = CFDictionaryCreateCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE00], *(CFDictionaryRef *)theDict);
                  if (*((_BYTE *)this + 477) && !*((_BYTE *)this + 16177))
                  {
                    if (VPLogScope(void)::once != -1)
                      dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
                    v251 = CALog::LogObjIfEnabled(3, VPLogScope(void)::scope);
                    if (v251)
                    {
                      v252 = v251;
                      if (os_log_type_enabled(v251, OS_LOG_TYPE_DEFAULT))
                      {
                        LODWORD(buf[0].__r_.__value_.__l.__data_) = 136315394;
                        *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)"vpProperties.cpp";
                        WORD2(buf[0].__r_.__value_.__r.__words[1]) = 1024;
                        *(_DWORD *)((char *)&buf[0].__r_.__value_.__r.__words[1] + 6) = 1445;
                        _os_log_impl(&dword_1B5ED0000, v252, OS_LOG_TYPE_DEFAULT, "%25s:%-5d  <vp> Begin self-reinit (kVPProperty_TelephonyRefDSPSettings)", (uint8_t *)buf, 0x12u);
                      }
                    }
                    v253 = (int *)*((_QWORD *)this + 1570);
                    if (v253 && (*v555 || *((_BYTE *)this + 15898)))
                    {
                      if (VPLogScope(void)::once != -1)
                        dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
                      CALegacyLog::log(v253, 3, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/vpInitialize/vpProperties.cpp", 1445, "SetProperty", "Begin self-reinit (kVPProperty_TelephonyRefDSPSettings)");
                    }
                    VoiceProcessorV2::InitializeDLP(this);
                    if (VPLogScope(void)::once != -1)
                      dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
                    v254 = CALog::LogObjIfEnabled(3, VPLogScope(void)::scope);
                    if (v254)
                    {
                      v255 = v254;
                      if (os_log_type_enabled(v254, OS_LOG_TYPE_DEFAULT))
                      {
                        LODWORD(buf[0].__r_.__value_.__l.__data_) = 136315394;
                        *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)"vpProperties.cpp";
                        WORD2(buf[0].__r_.__value_.__r.__words[1]) = 1024;
                        *(_DWORD *)((char *)&buf[0].__r_.__value_.__r.__words[1] + 6) = 1447;
                        _os_log_impl(&dword_1B5ED0000, v255, OS_LOG_TYPE_DEFAULT, "%25s:%-5d  <vp> End self-reinit (kVPProperty_TelephonyRefDSPSettings)", (uint8_t *)buf, 0x12u);
                      }
                    }
                    v256 = (int *)*((_QWORD *)this + 1570);
                    if (v256 && (*v555 || *((_BYTE *)this + 15898)))
                    {
                      if (VPLogScope(void)::once != -1)
                        dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
                      CALegacyLog::log(v256, 3, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/vpInitialize/vpProperties.cpp", 1447, "SetProperty", "End self-reinit (kVPProperty_TelephonyRefDSPSettings)");
                    }
                  }
                  if (VPLogScope(void)::once != -1)
                    dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
                  v257 = CALog::LogObjIfEnabled(3, VPLogScope(void)::scope);
                  if (v257)
                  {
                    v258 = v257;
                    if (os_log_type_enabled(v257, OS_LOG_TYPE_DEFAULT))
                    {
                      LODWORD(buf[0].__r_.__value_.__l.__data_) = 136315394;
                      *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)"vpProperties.cpp";
                      WORD2(buf[0].__r_.__value_.__r.__words[1]) = 1024;
                      *(_DWORD *)((char *)&buf[0].__r_.__value_.__r.__words[1] + 6) = 1457;
                      _os_log_impl(&dword_1B5ED0000, v258, OS_LOG_TYPE_DEFAULT, "%25s:%-5d  <vp> setproperty: ref custom dsp settings", (uint8_t *)buf, 0x12u);
                    }
                  }
                  v259 = (int *)*((_QWORD *)this + 1570);
                  if (v259 && (*v555 || *((_BYTE *)this + 15898)))
                  {
                    if (VPLogScope(void)::once != -1)
                      dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
                    CALegacyLog::log(v259, 3, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/vpInitialize/vpProperties.cpp", 1457, "SetProperty", "setproperty: ref custom dsp settings");
                  }
                  if (*v555)
                    VoiceProcessorV2::PListWriteSetPropertyParameters(this, 32784);
                }
                goto LABEL_1614;
              }
              if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
                goto LABEL_1598;
              LODWORD(buf[0].__r_.__value_.__l.__data_) = 136315906;
              *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)"vpProperties.cpp";
              WORD2(buf[0].__r_.__value_.__r.__words[1]) = 1024;
              *(_DWORD *)((char *)&buf[0].__r_.__value_.__r.__words[1] + 6) = 1430;
              WORD1(buf[0].__r_.__value_.__r.__words[2]) = 2080;
              *(std::string::size_type *)((char *)&buf[0].__r_.__value_.__r.__words[2] + 4) = (std::string::size_type)"inDataSize == sizeof(CFDictionaryRef)";
              WORD2(buf[1].__r_.__value_.__r.__words[0]) = 2080;
              *(std::string::size_type *)((char *)buf[1].__r_.__value_.__r.__words + 6) = (std::string::size_type)"BadPropertySize";
              v544 = MEMORY[0x1E0C81028];
              goto LABEL_1597;
            case 18:
              if (a4 <= 3)
              {
                if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
                  goto LABEL_1598;
                LODWORD(buf[0].__r_.__value_.__l.__data_) = 136315906;
                *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)"vpProperties.cpp";
                WORD2(buf[0].__r_.__value_.__r.__words[1]) = 1024;
                *(_DWORD *)((char *)&buf[0].__r_.__value_.__r.__words[1] + 6) = 1478;
                WORD1(buf[0].__r_.__value_.__r.__words[2]) = 2080;
                *(std::string::size_type *)((char *)&buf[0].__r_.__value_.__r.__words[2] + 4) = (std::string::size_type)"inDataSize >= sizeof(UInt32)";
                WORD2(buf[1].__r_.__value_.__r.__words[0]) = 2080;
                *(std::string::size_type *)((char *)buf[1].__r_.__value_.__r.__words + 6) = (std::string::size_type)"BadPropertySize";
                v544 = MEMORY[0x1E0C81028];
                goto LABEL_1597;
              }
              v223 = *theDict;
              if (*theDict < 2)
              {
                v224 = (int *)((char *)this + 2736);
                *((_DWORD *)this + 684) = v223;
                VoiceProcessorV2::ReadAndApplyDefaultsOverride(this, CFSTR("vp_beam_direction"), 1, (float *)this + 684, v46);
                if (VPLogScope(void)::once != -1)
                  dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
                v225 = CALog::LogObjIfEnabled(3, VPLogScope(void)::scope);
                if (v225)
                {
                  v226 = v225;
                  if (os_log_type_enabled(v225, OS_LOG_TYPE_DEFAULT))
                  {
                    v227 = "top back mic";
                    v228 = *v224;
                    *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)"vpProperties.cpp";
                    LODWORD(buf[0].__r_.__value_.__l.__data_) = 136315650;
                    if (!v228)
                      v227 = "top front mic";
                    WORD2(buf[0].__r_.__value_.__r.__words[1]) = 1024;
                    *(_DWORD *)((char *)&buf[0].__r_.__value_.__r.__words[1] + 6) = 1486;
                    WORD1(buf[0].__r_.__value_.__r.__words[2]) = 2080;
                    *(std::string::size_type *)((char *)&buf[0].__r_.__value_.__r.__words[2] + 4) = (std::string::size_type)v227;
                    _os_log_impl(&dword_1B5ED0000, v226, OS_LOG_TYPE_DEFAULT, "%25s:%-5d  <vp> setproperty: beam former direction = %s", (uint8_t *)buf, 0x1Cu);
                  }
                }
                v229 = (int *)*((_QWORD *)this + 1570);
                if (v229 && (*v555 || *((_BYTE *)this + 15898)))
                {
                  if (VPLogScope(void)::once != -1)
                    dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
                  if (*v224)
                    v230 = "top back mic";
                  else
                    v230 = "top front mic";
                  CALegacyLog::log(v229, 3, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/vpInitialize/vpProperties.cpp", 1486, "SetProperty", "setproperty: beam former direction = %s", v230);
                }
                v51 = VoiceProcessorV2::ApplyBeamDirection(this);
                if (v51)
                {
                  if (VPLogScope(void)::once != -1)
                    dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
                  v231 = CALog::LogObjIfEnabled(1, VPLogScope(void)::scope);
                  if (v231)
                  {
                    v232 = v231;
                    if (os_log_type_enabled(v231, OS_LOG_TYPE_ERROR))
                    {
                      LODWORD(buf[0].__r_.__value_.__l.__data_) = 136315650;
                      *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)"vpProperties.cpp";
                      WORD2(buf[0].__r_.__value_.__r.__words[1]) = 1024;
                      *(_DWORD *)((char *)&buf[0].__r_.__value_.__r.__words[1] + 6) = 1490;
                      WORD1(buf[0].__r_.__value_.__r.__words[2]) = 1024;
                      HIDWORD(buf[0].__r_.__value_.__r.__words[2]) = v51;
                      _os_log_impl(&dword_1B5ED0000, v232, OS_LOG_TYPE_ERROR, "%25s:%-5d  >vp> Error %d from applying beam direction", (uint8_t *)buf, 0x18u);
                    }
                  }
                  v233 = (int *)*((_QWORD *)this + 1570);
                  if (v233 && (*v555 || *((_BYTE *)this + 15898)))
                  {
                    if (VPLogScope(void)::once != -1)
                      dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
                    CALegacyLog::log(v233, 1, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/vpInitialize/vpProperties.cpp", 1490, "SetProperty", "Error %d from applying beam direction", v51);
                  }
                }
                goto LABEL_1341;
              }
              if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
                goto LABEL_1512;
              LODWORD(buf[0].__r_.__value_.__l.__data_) = 136315906;
              *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)"vpProperties.cpp";
              WORD2(buf[0].__r_.__value_.__r.__words[1]) = 1024;
              *(_DWORD *)((char *)&buf[0].__r_.__value_.__r.__words[1] + 6) = 1482;
              WORD1(buf[0].__r_.__value_.__r.__words[2]) = 2080;
              *(std::string::size_type *)((char *)&buf[0].__r_.__value_.__r.__words[2] + 4) = (std::string::size_type)"(beamDirection == kAUBeam2BeamIndex_Front) || (beamDirection == kAUBeam2BeamIndex_Back)";
              WORD2(buf[1].__r_.__value_.__r.__words[0]) = 2080;
              *(std::string::size_type *)((char *)buf[1].__r_.__value_.__r.__words + 6) = (std::string::size_type)"InvalidPropertyValue";
              v536 = MEMORY[0x1E0C81028];
              goto LABEL_1511;
            case 19:
              if (a4 > 3)
              {
                v51 = (*(uint64_t (**)(VoiceProcessorV2 *, _QWORD))(*(_QWORD *)this + 96))(this, *theDict);
                goto LABEL_1341;
              }
              if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
                goto LABEL_1598;
              LODWORD(buf[0].__r_.__value_.__l.__data_) = 136315906;
              *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)"vpProperties.cpp";
              WORD2(buf[0].__r_.__value_.__r.__words[1]) = 1024;
              *(_DWORD *)((char *)&buf[0].__r_.__value_.__r.__words[1] + 6) = 1496;
              WORD1(buf[0].__r_.__value_.__r.__words[2]) = 2080;
              *(std::string::size_type *)((char *)&buf[0].__r_.__value_.__r.__words[2] + 4) = (std::string::size_type)"inDataSize >= sizeof(UInt32)";
              WORD2(buf[1].__r_.__value_.__r.__words[0]) = 2080;
              *(std::string::size_type *)((char *)buf[1].__r_.__value_.__r.__words + 6) = (std::string::size_type)"BadPropertySize";
              v544 = MEMORY[0x1E0C81028];
              goto LABEL_1597;
            case 20:
              if (a4 < 4 || (v198 = *theDict, *theDict >= 2))
              {
                if (VPLogScope(void)::once != -1)
                  dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
                v199 = CALog::LogObjIfEnabled(2, VPLogScope(void)::scope);
                if (v199)
                {
                  v200 = v199;
                  if (os_log_type_enabled(v199, OS_LOG_TYPE_DEFAULT))
                  {
                    LODWORD(buf[0].__r_.__value_.__l.__data_) = 136315394;
                    *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)"vpProperties.cpp";
                    WORD2(buf[0].__r_.__value_.__r.__words[1]) = 1024;
                    *(_DWORD *)((char *)&buf[0].__r_.__value_.__r.__words[1] + 6) = 1131;
                    _os_log_impl(&dword_1B5ED0000, v200, OS_LOG_TYPE_DEFAULT, "%25s:%-5d  >vp> setproperty: HwHasVP got invalid data", (uint8_t *)buf, 0x12u);
                  }
                }
                v51 = 561211770;
                v201 = (int *)*((_QWORD *)this + 1570);
                if (v201 && (*v555 || *((_BYTE *)this + 15898)))
                {
                  if (VPLogScope(void)::once != -1)
                    dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
                  CALegacyLog::log(v201, 2, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/vpInitialize/vpProperties.cpp", 1131, "SetProperty", "setproperty: HwHasVP got invalid data");
                }
                goto LABEL_1341;
              }
              if (v198 != *((unsigned __int8 *)this + 2085))
              {
                v509 = (char *)this + 2085;
                *((_BYTE *)this + 2085) = v198 == 1;
                VoiceProcessorV2::ReadAndApplyDefaultsOverride(this, CFSTR("vp_hw_has_vp"), 0, (float *)((char *)this + 2085), v46);
                if (VPLogScope(void)::once != -1)
                  dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
                v510 = CALog::LogObjIfEnabled(3, VPLogScope(void)::scope);
                if (v510)
                {
                  v511 = v510;
                  if (os_log_type_enabled(v510, OS_LOG_TYPE_DEFAULT))
                  {
                    LODWORD(buf[0].__r_.__value_.__l.__data_) = 136315394;
                    *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)"vpProperties.cpp";
                    WORD2(buf[0].__r_.__value_.__r.__words[1]) = 1024;
                    *(_DWORD *)((char *)&buf[0].__r_.__value_.__r.__words[1] + 6) = 1141;
                    _os_log_impl(&dword_1B5ED0000, v511, OS_LOG_TYPE_DEFAULT, "%25s:%-5d  <vp> Begin self-reinit (kVPParameter_HwHasVP)", (uint8_t *)buf, 0x12u);
                  }
                }
                v512 = (int *)*((_QWORD *)this + 1570);
                if (v512 && (*v555 || *((_BYTE *)this + 15898)))
                {
                  if (VPLogScope(void)::once != -1)
                    dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
                  CALegacyLog::log(v512, 3, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/vpInitialize/vpProperties.cpp", 1141, "SetProperty", "Begin self-reinit (kVPParameter_HwHasVP)");
                }
                if (*((_BYTE *)this + 477))
                  VoiceProcessorV2::InitializeDLP(this);
                if (*((_BYTE *)this + 476))
                  (*(void (**)(VoiceProcessorV2 *))(*(_QWORD *)this + 240))(this);
                if (VPLogScope(void)::once != -1)
                  dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
                v513 = CALog::LogObjIfEnabled(3, VPLogScope(void)::scope);
                if (v513)
                {
                  v514 = v513;
                  if (os_log_type_enabled(v513, OS_LOG_TYPE_DEFAULT))
                  {
                    LODWORD(buf[0].__r_.__value_.__l.__data_) = 136315394;
                    *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)"vpProperties.cpp";
                    WORD2(buf[0].__r_.__value_.__r.__words[1]) = 1024;
                    *(_DWORD *)((char *)&buf[0].__r_.__value_.__r.__words[1] + 6) = 1144;
                    _os_log_impl(&dword_1B5ED0000, v514, OS_LOG_TYPE_DEFAULT, "%25s:%-5d  <vp> End self-reinit (kVPParameter_HwHasVP)", (uint8_t *)buf, 0x12u);
                  }
                }
                v515 = (int *)*((_QWORD *)this + 1570);
                if (v515 && (*v555 || *((_BYTE *)this + 15898)))
                {
                  if (VPLogScope(void)::once != -1)
                    dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
                  CALegacyLog::log(v515, 3, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/vpInitialize/vpProperties.cpp", 1144, "SetProperty", "End self-reinit (kVPParameter_HwHasVP)");
                }
                if (VPLogScope(void)::once != -1)
                  dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
                v516 = CALog::LogObjIfEnabled(3, VPLogScope(void)::scope);
                if (v516)
                {
                  v517 = v516;
                  if (os_log_type_enabled(v516, OS_LOG_TYPE_DEFAULT))
                  {
                    v518 = "TRUE";
                    v519 = *v509;
                    *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)"vpProperties.cpp";
                    LODWORD(buf[0].__r_.__value_.__l.__data_) = 136315650;
                    if (!v519)
                      v518 = "FALSE";
                    WORD2(buf[0].__r_.__value_.__r.__words[1]) = 1024;
                    *(_DWORD *)((char *)&buf[0].__r_.__value_.__r.__words[1] + 6) = 1146;
                    WORD1(buf[0].__r_.__value_.__r.__words[2]) = 2080;
                    *(std::string::size_type *)((char *)&buf[0].__r_.__value_.__r.__words[2] + 4) = (std::string::size_type)v518;
                    _os_log_impl(&dword_1B5ED0000, v517, OS_LOG_TYPE_DEFAULT, "%25s:%-5d  <vp> setproperty: hw has vp = %s.  ", (uint8_t *)buf, 0x1Cu);
                  }
                }
                v520 = (int *)*((_QWORD *)this + 1570);
                if (v520 && (*v555 || *((_BYTE *)this + 15898)))
                {
                  if (VPLogScope(void)::once != -1)
                    dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
                  if (*v509)
                    v521 = "TRUE";
                  else
                    v521 = "FALSE";
                  CALegacyLog::log(v520, 3, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/vpInitialize/vpProperties.cpp", 1146, "SetProperty", "setproperty: hw has vp = %s.  ", v521);
                }
              }
              if (*v555)
                VoiceProcessorV2::PListWriteSetPropertyParameters(this, 32788);
              goto LABEL_1614;
            case 21:
              goto LABEL_1615;
            case 24:
              if (a4 < 4)
                goto LABEL_1255;
              v234 = *theDict != 0;
              if (*((_DWORD *)this + 286) != v234)
              {
                *((_DWORD *)this + 286) = v234;
                if (*v555)
                  VoiceProcessorV2::PListWriteSetPropertyParameters(this, 32792);
                if (VPLogScope(void)::once != -1)
                  dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
                v235 = CALog::LogObjIfEnabled(3, VPLogScope(void)::scope);
                if (v235)
                {
                  v236 = v235;
                  if (os_log_type_enabled(v235, OS_LOG_TYPE_DEFAULT))
                  {
                    v237 = *((_DWORD *)this + 286);
                    LODWORD(buf[0].__r_.__value_.__l.__data_) = 136315650;
                    *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)"vpProperties.cpp";
                    WORD2(buf[0].__r_.__value_.__r.__words[1]) = 1024;
                    *(_DWORD *)((char *)&buf[0].__r_.__value_.__r.__words[1] + 6) = 1641;
                    WORD1(buf[0].__r_.__value_.__r.__words[2]) = 1024;
                    HIDWORD(buf[0].__r_.__value_.__r.__words[2]) = v237;
                    _os_log_impl(&dword_1B5ED0000, v236, OS_LOG_TYPE_DEFAULT, "%25s:%-5d  <vp> setproperty: is tap stream enabled  = %d", (uint8_t *)buf, 0x18u);
                  }
                }
                v238 = (int *)*((_QWORD *)this + 1570);
                if (v238 && (*v555 || *((_BYTE *)this + 15898)))
                {
                  if (VPLogScope(void)::once != -1)
                    dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
                  CALegacyLog::log(v238, 3, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/vpInitialize/vpProperties.cpp", 1641, "SetProperty", "setproperty: is tap stream enabled  = %d", *((_DWORD *)this + 286));
                }
              }
              goto LABEL_1318;
            case 26:
              v51 = 561211770;
              if (a4 < 4 || *theDict > 1)
                goto LABEL_1341;
              *((_BYTE *)this + 2082) = *theDict != 0;
              if (VPLogScope(void)::once != -1)
                dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
              v321 = (unsigned __int8 *)this + 2082;
              v322 = CALog::LogObjIfEnabled(3, VPLogScope(void)::scope);
              if (v322)
              {
                v324 = v322;
                if (os_log_type_enabled(v322, OS_LOG_TYPE_DEFAULT))
                {
                  v325 = *v321;
                  LODWORD(buf[0].__r_.__value_.__l.__data_) = 136315650;
                  *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)"vpProperties.cpp";
                  WORD2(buf[0].__r_.__value_.__r.__words[1]) = 1024;
                  *(_DWORD *)((char *)&buf[0].__r_.__value_.__r.__words[1] + 6) = 946;
                  WORD1(buf[0].__r_.__value_.__r.__words[2]) = 1024;
                  HIDWORD(buf[0].__r_.__value_.__r.__words[2]) = v325;
                  _os_log_impl(&dword_1B5ED0000, v324, OS_LOG_TYPE_DEFAULT, "%25s:%-5d  <vp> setproperty: mute downlink voice =%d", (uint8_t *)buf, 0x18u);
                }
              }
              v326 = (int *)*((_QWORD *)this + 1570);
              if (v326 && (*v555 || *((_BYTE *)this + 15898)))
              {
                if (VPLogScope(void)::once != -1)
                  dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
                CALegacyLog::log(v326, 3, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/vpInitialize/vpProperties.cpp", 946, "SetProperty", "setproperty: mute downlink voice =%d", *v321);
              }
              VoiceProcessorV2::ReadAndApplyDefaultsOverride(this, CFSTR("vp_mute_downlink_voice"), 0, (float *)((char *)this + 2082), v323);
              if (*v555)
                VoiceProcessorV2::PListWriteSetPropertyParameters(this, 32794);
              goto LABEL_1614;
            case 28:
              CADeprecated::CAAutoFree<long long>::allocBytes((void **)this + 273, a4);
              v176 = (void *)*((_QWORD *)this + 273);
              if (v176)
              {
                memcpy(v176, theDict, a4);
                *((_DWORD *)this + 548) = a4 >> 2;
                if (*v555)
                  VoiceProcessorV2::PListWriteSpkInputDataSrcParameters(this, *((unsigned int **)this + 273), a4 >> 2);
              }
              goto LABEL_1318;
            case 29:
              if (a4 <= 3)
              {
                if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
                  goto LABEL_1599;
                LODWORD(buf[0].__r_.__value_.__l.__data_) = 136315906;
                *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)"vpProperties.cpp";
                WORD2(buf[0].__r_.__value_.__r.__words[1]) = 1024;
                *(_DWORD *)((char *)&buf[0].__r_.__value_.__r.__words[1] + 6) = 1571;
                WORD1(buf[0].__r_.__value_.__r.__words[2]) = 2080;
                *(std::string::size_type *)((char *)&buf[0].__r_.__value_.__r.__words[2] + 4) = (std::string::size_type)"inDataSize >= sizeof(Float32)";
                WORD2(buf[1].__r_.__value_.__r.__words[0]) = 2080;
                *(std::string::size_type *)((char *)buf[1].__r_.__value_.__r.__words + 6) = (std::string::size_type)"BadPropertySize";
                v544 = MEMORY[0x1E0C81028];
                goto LABEL_1597;
              }
              v302 = *(float *)theDict;
              *((_DWORD *)this + 560) = *theDict;
              if (VPLogScope(void)::once != -1)
                dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
              v303 = CALog::LogObjIfEnabled(3, VPLogScope(void)::scope);
              if (v303)
              {
                v304 = v303;
                if (os_log_type_enabled(v303, OS_LOG_TYPE_DEFAULT))
                {
                  LODWORD(buf[0].__r_.__value_.__l.__data_) = 136315650;
                  *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)"vpProperties.cpp";
                  WORD2(buf[0].__r_.__value_.__r.__words[1]) = 1024;
                  *(_DWORD *)((char *)&buf[0].__r_.__value_.__r.__words[1] + 6) = 1574;
                  WORD1(buf[0].__r_.__value_.__r.__words[2]) = 2048;
                  *(double *)((char *)&buf[0].__r_.__value_.__r.__words[2] + 4) = v302;
                  _os_log_impl(&dword_1B5ED0000, v304, OS_LOG_TYPE_DEFAULT, "%25s:%-5d  <vp> setproperty: hardware volume =%f dB", (uint8_t *)buf, 0x1Cu);
                }
              }
              v305 = (int *)*((_QWORD *)this + 1570);
              if (v305 && (*v555 || *((_BYTE *)this + 15898)))
              {
                if (VPLogScope(void)::once != -1)
                  dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
                CALegacyLog::log(v305, 3, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/vpInitialize/vpProperties.cpp", 1574, "SetProperty", "setproperty: hardware volume =%f dB", v302);
              }
              if (*v555)
                VoiceProcessorV2::PListWriteSetPropertyParameters(this, 32797);
              v306 = *((_QWORD *)this + 1104);
              if ((v306 & 0x200000000000) != 0 && *((_QWORD *)this + 482))
              {
                if (VPLogScope(void)::once != -1)
                  dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
                v307 = CALog::LogObjIfEnabled(3, VPLogScope(void)::scope);
                if (v307)
                {
                  v308 = v307;
                  if (os_log_type_enabled(v307, OS_LOG_TYPE_DEFAULT))
                  {
                    LODWORD(buf[0].__r_.__value_.__l.__data_) = 136315650;
                    *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)"vpProperties.cpp";
                    WORD2(buf[0].__r_.__value_.__r.__words[1]) = 1024;
                    *(_DWORD *)((char *)&buf[0].__r_.__value_.__r.__words[1] + 6) = 1578;
                    WORD1(buf[0].__r_.__value_.__r.__words[2]) = 2048;
                    *(double *)((char *)&buf[0].__r_.__value_.__r.__words[2] + 4) = v302;
                    _os_log_impl(&dword_1B5ED0000, v308, OS_LOG_TYPE_DEFAULT, "%25s:%-5d  <vp> AU HLC exists in the VP chain applying HW vol =>%f", (uint8_t *)buf, 0x1Cu);
                  }
                }
                v309 = (int *)*((_QWORD *)this + 1570);
                if (v309 && (*v555 || *((_BYTE *)this + 15898)))
                {
                  if (VPLogScope(void)::once != -1)
                    dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
                  CALegacyLog::log(v309, 3, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/vpInitialize/vpProperties.cpp", 1578, "SetProperty", "AU HLC exists in the VP chain applying HW vol =>%f", v302);
                }
                AudioUnitSetParameter(*((AudioUnit *)this + 482), 0x19u, 0, 0, v302, 0);
                v306 = *((_QWORD *)this + 1104);
              }
              if ((v306 & 0x4000000000000) != 0 && *((_QWORD *)this + 487))
              {
                if (VPLogScope(void)::once != -1)
                  dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
                v310 = CALog::LogObjIfEnabled(3, VPLogScope(void)::scope);
                if (v310)
                {
                  v311 = v310;
                  if (os_log_type_enabled(v310, OS_LOG_TYPE_DEFAULT))
                  {
                    LODWORD(buf[0].__r_.__value_.__l.__data_) = 136315650;
                    *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)"vpProperties.cpp";
                    WORD2(buf[0].__r_.__value_.__r.__words[1]) = 1024;
                    *(_DWORD *)((char *)&buf[0].__r_.__value_.__r.__words[1] + 6) = 1583;
                    WORD1(buf[0].__r_.__value_.__r.__words[2]) = 2048;
                    *(double *)((char *)&buf[0].__r_.__value_.__r.__words[2] + 4) = v302;
                    _os_log_impl(&dword_1B5ED0000, v311, OS_LOG_TYPE_DEFAULT, "%25s:%-5d  <vp> [VolumeLimit] AUSPLMeter exists in the VP chain; applying HW vol =>%f",
                      (uint8_t *)buf,
                      0x1Cu);
                  }
                }
                v312 = (int *)*((_QWORD *)this + 1570);
                if (v312 && (*v555 || *((_BYTE *)this + 15898)))
                {
                  if (VPLogScope(void)::once != -1)
                    dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
                  CALegacyLog::log(v312, 3, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/vpInitialize/vpProperties.cpp", 1583, "SetProperty", "[VolumeLimit] AUSPLMeter exists in the VP chain; applying HW vol =>%f",
                    v302);
                }
                AudioUnitSetParameter(*((AudioUnit *)this + 487), 0, 0, 0, v302, 0);
                if ((*((_BYTE *)this + 8837) & 0x40) != 0)
                {
                  if (*((_QWORD *)this + 483))
                  {
                    *(_DWORD *)v564 = 0;
                    if (*((float *)this + 582) <= 0.0)
                      v313 = 100.0;
                    else
                      v313 = *((float *)this + 582);
                    if (VPLogScope(void)::once != -1)
                      dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
                    v314 = CALog::LogObjIfEnabled(3, VPLogScope(void)::scope);
                    if (v314)
                    {
                      v315 = v314;
                      if (os_log_type_enabled(v314, OS_LOG_TYPE_DEFAULT))
                      {
                        LODWORD(buf[0].__r_.__value_.__l.__data_) = 136315650;
                        *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)"vpProperties.cpp";
                        WORD2(buf[0].__r_.__value_.__r.__words[1]) = 1024;
                        *(_DWORD *)((char *)&buf[0].__r_.__value_.__r.__words[1] + 6) = 1591;
                        WORD1(buf[0].__r_.__value_.__r.__words[2]) = 2048;
                        *(double *)((char *)&buf[0].__r_.__value_.__r.__words[2] + 4) = v313;
                        _os_log_impl(&dword_1B5ED0000, v315, OS_LOG_TYPE_DEFAULT, "%25s:%-5d  <vp> [VolumeLimit] SPLTarget update %f", (uint8_t *)buf, 0x1Cu);
                      }
                    }
                    v316 = (int *)*((_QWORD *)this + 1570);
                    if (v316 && (*v555 || *((_BYTE *)this + 15898)))
                    {
                      if (VPLogScope(void)::once != -1)
                        dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
                      CALegacyLog::log(v316, 3, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/vpInitialize/vpProperties.cpp", 1591, "SetProperty", "[VolumeLimit] SPLTarget update %f", v313);
                    }
                    Parameter = AudioUnitGetParameter(*((AudioUnit *)this + 487), 0xBu, 0, 0, (AudioUnitParameterValue *)v564);
                    if (Parameter)
                    {
                      if (VPLogScope(void)::once != -1)
                        dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
                      v318 = CALog::LogObjIfEnabled(1, VPLogScope(void)::scope);
                      if (v318)
                      {
                        v319 = v318;
                        if (os_log_type_enabled(v318, OS_LOG_TYPE_ERROR))
                        {
                          LODWORD(buf[0].__r_.__value_.__l.__data_) = 136315650;
                          *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)"vpProperties.cpp";
                          WORD2(buf[0].__r_.__value_.__r.__words[1]) = 1024;
                          *(_DWORD *)((char *)&buf[0].__r_.__value_.__r.__words[1] + 6) = 1603;
                          WORD1(buf[0].__r_.__value_.__r.__words[2]) = 1024;
                          HIDWORD(buf[0].__r_.__value_.__r.__words[2]) = Parameter;
                          _os_log_impl(&dword_1B5ED0000, v319, OS_LOG_TYPE_ERROR, "%25s:%-5d  >vp> [VolumeLimit] Failed to et LKFS from AUSPLMeter. Error = %d", (uint8_t *)buf, 0x18u);
                        }
                      }
                      v320 = (int *)*((_QWORD *)this + 1570);
                      if (v320 && (*v555 || *((_BYTE *)this + 15898)))
                      {
                        if (VPLogScope(void)::once != -1)
                          dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
                        CALegacyLog::log(v320, 1, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/vpInitialize/vpProperties.cpp", 1603, "SetProperty", "[VolumeLimit] Failed to et LKFS from AUSPLMeter. Error = %d", Parameter);
                      }
                    }
                    else
                    {
                      v537 = v313 - *(float *)v564;
                      if (VPLogScope(void)::once != -1)
                        dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
                      v538 = v537 + -2.5;
                      v539 = CALog::LogObjIfEnabled(3, VPLogScope(void)::scope);
                      if (v539)
                      {
                        v540 = v539;
                        if (os_log_type_enabled(v539, OS_LOG_TYPE_DEFAULT))
                        {
                          LODWORD(buf[0].__r_.__value_.__l.__data_) = 136315650;
                          *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)"vpProperties.cpp";
                          WORD2(buf[0].__r_.__value_.__r.__words[1]) = 1024;
                          *(_DWORD *)((char *)&buf[0].__r_.__value_.__r.__words[1] + 6) = 1598;
                          WORD1(buf[0].__r_.__value_.__r.__words[2]) = 2048;
                          *(double *)((char *)&buf[0].__r_.__value_.__r.__words[2] + 4) = v538;
                          _os_log_impl(&dword_1B5ED0000, v540, OS_LOG_TYPE_DEFAULT, "%25s:%-5d  <vp> [VolumeLimit] Setting target LKFS on LDNM to %f", (uint8_t *)buf, 0x1Cu);
                        }
                      }
                      v541 = this;
                      v542 = (int *)*((_QWORD *)this + 1570);
                      if (v542 && (*v555 || *((_BYTE *)this + 15898)))
                      {
                        if (VPLogScope(void)::once != -1)
                          dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
                        CALegacyLog::log(v542, 3, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/vpInitialize/vpProperties.cpp", 1598, "SetProperty", "[VolumeLimit] Setting target LKFS on LDNM to %f", v538);
                        v541 = this;
                      }
                      AudioUnitSetParameter(*((AudioUnit *)v541 + 483), 2u, 0, 0, v538, 0);
                    }
                    goto LABEL_1614;
                  }
                }
              }
              goto LABEL_1318;
            case 31:
              if (a4 == 8)
              {
                applesauce::CF::ArrayRef::from_get_noexcept((applesauce::CF::ArrayRef *)&value, *(CFTypeRef *)theDict);
                v177 = this;
                if (value)
                {
                  v178 = (const __CFArray **)applesauce::CF::ArrayRef::operator->(&value);
                  if (applesauce::CF::ArrayRef_proxy::get_size(*v178))
                  {
                    memset(v564, 0, 24);
                    applesauce::CF::ArrayRef_iterator<applesauce::CF::DictionaryRef>::ArrayRef_iterator(&__p, (CFArrayRef)value);
                    applesauce::CF::ArrayRef_iterator<applesauce::CF::DictionaryRef>::ArrayRef_iterator(&cf, (CFArrayRef)value);
                    v179 = v560;
                    v559 = v560;
                    size = __p.__r_.__value_.__l.__size_;
                    while (1)
                    {
                      if (__p.__r_.__value_.__r.__words[0])
                        v181 = size == __p.__r_.__value_.__r.__words[2];
                      else
                        v181 = 1;
                      if (v181 && (cf ? (v182 = v179 == v560) : (v182 = 1), v182)
                        || (__p.__r_.__value_.__l.__data_ == cf ? (v183 = size == v179) : (v183 = 0), v183))
                      {
                        applesauce::CF::ArrayRef::operator=((const void **)v177 + 261, value);
                        v463 = (void *)*((_QWORD *)v177 + 262);
                        if (v463)
                        {
                          *((_QWORD *)v177 + 263) = v463;
                          operator delete(v463);
                          *((_QWORD *)v177 + 262) = 0;
                          *((_QWORD *)v177 + 263) = 0;
                          *((_QWORD *)v177 + 264) = 0;
                        }
                        *((_OWORD *)v177 + 131) = *(_OWORD *)v564;
                        *((_QWORD *)v177 + 264) = *(_QWORD *)&v564[16];
                        memset(v564, 0, 24);
                        if (*v555)
                        {
                          VoiceProcessorV2::PListWriteMicTrimGainParameters(v177, (float **)v177 + 262);
                          goto LABEL_1277;
                        }
                        goto LABEL_1613;
                      }
                      applesauce::CF::details::at_to<applesauce::CF::DictionaryRef>((const __CFArray *)__p.__r_.__value_.__l.__data_, size, (applesauce::CF::DictionaryRef *)&v557);
                      if (!v557)
                      {
                        v546 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                        std::runtime_error::runtime_error(v546, "Could not construct");
                      }
                      if (!applesauce::CF::details::has_key<char const(&)[25]>((const __CFDictionary *)v557, "trim_gain_data_source_id"))break;
                      if (!v557)
                      {
                        v548 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                        std::runtime_error::runtime_error(v548, "Could not construct");
                      }
                      if (!applesauce::CF::details::has_key<char const(&)[13]>((const __CFDictionary *)v557, "trim_gain_db"))
                      {
                        if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
                        {
                          LODWORD(buf[0].__r_.__value_.__l.__data_) = 136315906;
                          *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)"vpProperties.cpp";
                          WORD2(buf[0].__r_.__value_.__r.__words[1]) = 1024;
                          *(_DWORD *)((char *)&buf[0].__r_.__value_.__r.__words[1] + 6) = 1175;
                          WORD1(buf[0].__r_.__value_.__r.__words[2]) = 2080;
                          *(std::string::size_type *)((char *)&buf[0].__r_.__value_.__r.__words[2] + 4) = (std::string::size_type)"value->has_key(kVirtualAudioPortPropertyTrimGainsCFGainDBKey)";
                          WORD2(buf[1].__r_.__value_.__r.__words[0]) = 2080;
                          *(std::string::size_type *)((char *)buf[1].__r_.__value_.__r.__words + 6) = (std::string::size_type)"InvalidPropertyValue";
                          v197 = MEMORY[0x1E0C81028];
LABEL_518:
                          _os_log_impl(&dword_1B5ED0000, v197, OS_LOG_TYPE_ERROR, "%25s:%-5d  ca_require: %s %s", (uint8_t *)buf, 0x26u);
                        }
                        goto LABEL_519;
                      }
                      if (!v557)
                      {
                        v550 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                        std::runtime_error::runtime_error(v550, "Could not construct");
                      }
                      v184 = applesauce::CF::details::find_at_key<float,char const(&)[13]>((const __CFDictionary *)v557, "trim_gain_db");
                      v185 = v184;
                      v186 = *(char **)&v564[8];
                      if (*(_QWORD *)&v564[8] >= *(_QWORD *)&v564[16])
                      {
                        v188 = *(char **)v564;
                        v189 = (uint64_t)(*(_QWORD *)&v564[8] - *(_QWORD *)v564) >> 2;
                        v190 = v189 + 1;
                        if ((unint64_t)(v189 + 1) >> 62)
                          std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
                        v191 = *(_QWORD *)&v564[16] - *(_QWORD *)v564;
                        if ((uint64_t)(*(_QWORD *)&v564[16] - *(_QWORD *)v564) >> 1 > v190)
                          v190 = v191 >> 1;
                        if ((unint64_t)v191 >= 0x7FFFFFFFFFFFFFFCLL)
                          v192 = 0x3FFFFFFFFFFFFFFFLL;
                        else
                          v192 = v190;
                        if (v192)
                        {
                          v193 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>((uint64_t)&v564[16], v192);
                          v186 = *(char **)&v564[8];
                          v188 = *(char **)v564;
                        }
                        else
                        {
                          v193 = 0;
                        }
                        v194 = &v193[4 * v189];
                        *(float *)v194 = v185;
                        v187 = v194 + 4;
                        while (v186 != v188)
                        {
                          v195 = *((_DWORD *)v186 - 1);
                          v186 -= 4;
                          *((_DWORD *)v194 - 1) = v195;
                          v194 -= 4;
                        }
                        *(_QWORD *)v564 = v194;
                        *(_QWORD *)&v564[8] = v187;
                        *(_QWORD *)&v564[16] = &v193[4 * v192];
                        if (v188)
                          operator delete(v188);
                      }
                      else
                      {
                        **(float **)&v564[8] = v184;
                        v187 = v186 + 4;
                      }
                      v50 = 0;
                      *(_QWORD *)&v564[8] = v187;
                      v196 = 1;
LABEL_510:
                      if (v557)
                        CFRelease(v557);
                      if (!v196)
                        goto LABEL_1278;
                      size = ++__p.__r_.__value_.__l.__size_;
                      v179 = v559;
                      v177 = v556;
                    }
                    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
                    {
                      LODWORD(buf[0].__r_.__value_.__l.__data_) = 136315906;
                      *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)"vpProperties.cpp";
                      WORD2(buf[0].__r_.__value_.__r.__words[1]) = 1024;
                      *(_DWORD *)((char *)&buf[0].__r_.__value_.__r.__words[1] + 6) = 1174;
                      WORD1(buf[0].__r_.__value_.__r.__words[2]) = 2080;
                      *(std::string::size_type *)((char *)&buf[0].__r_.__value_.__r.__words[2] + 4) = (std::string::size_type)"value->has_key(kVirtualAudioPortPropertyTrimGainsCFDataSourceIDKey)";
                      WORD2(buf[1].__r_.__value_.__r.__words[0]) = 2080;
                      *(std::string::size_type *)((char *)buf[1].__r_.__value_.__r.__words + 6) = (std::string::size_type)"InvalidPropertyValue";
                      v197 = MEMORY[0x1E0C81028];
                      goto LABEL_518;
                    }
LABEL_519:
                    v196 = 0;
                    v50 = 144;
                    goto LABEL_510;
                  }
                  if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
                    goto LABEL_1566;
                  LODWORD(buf[0].__r_.__value_.__l.__data_) = 136315906;
                  *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)"vpProperties.cpp";
                  WORD2(buf[0].__r_.__value_.__r.__words[1]) = 1024;
                  *(_DWORD *)((char *)&buf[0].__r_.__value_.__r.__words[1] + 6) = 1170;
                  WORD1(buf[0].__r_.__value_.__r.__words[2]) = 2080;
                  *(std::string::size_type *)((char *)&buf[0].__r_.__value_.__r.__words[2] + 4) = (std::string::size_type)"micTrimGainsCF->get_size() != 0";
                  WORD2(buf[1].__r_.__value_.__r.__words[0]) = 2080;
                  *(std::string::size_type *)((char *)buf[1].__r_.__value_.__r.__words + 6) = (std::string::size_type)"InvalidPropertyValue";
                  v545 = MEMORY[0x1E0C81028];
                }
                else
                {
                  if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
                    goto LABEL_1566;
                  LODWORD(buf[0].__r_.__value_.__l.__data_) = 136315906;
                  *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)"vpProperties.cpp";
                  WORD2(buf[0].__r_.__value_.__r.__words[1]) = 1024;
                  *(_DWORD *)((char *)&buf[0].__r_.__value_.__r.__words[1] + 6) = 1169;
                  WORD1(buf[0].__r_.__value_.__r.__words[2]) = 2080;
                  *(std::string::size_type *)((char *)&buf[0].__r_.__value_.__r.__words[2] + 4) = (std::string::size_type)"micTrimGainsCF.is_valid()";
                  WORD2(buf[1].__r_.__value_.__r.__words[0]) = 2080;
                  *(std::string::size_type *)((char *)buf[1].__r_.__value_.__r.__words + 6) = (std::string::size_type)"InvalidPropertyValue";
                  v545 = MEMORY[0x1E0C81028];
                }
LABEL_1565:
                _os_log_impl(&dword_1B5ED0000, v545, OS_LOG_TYPE_ERROR, "%25s:%-5d  ca_require: %s %s", (uint8_t *)buf, 0x26u);
LABEL_1566:
                v50 = 144;
LABEL_1281:
                applesauce::CF::ArrayRef::~ArrayRef((const void **)&value);
                v51 = 0;
                goto LABEL_1615;
              }
              if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
                goto LABEL_1598;
              LODWORD(buf[0].__r_.__value_.__l.__data_) = 136315906;
              *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)"vpProperties.cpp";
              WORD2(buf[0].__r_.__value_.__r.__words[1]) = 1024;
              *(_DWORD *)((char *)&buf[0].__r_.__value_.__r.__words[1] + 6) = 1165;
              WORD1(buf[0].__r_.__value_.__r.__words[2]) = 2080;
              *(std::string::size_type *)((char *)&buf[0].__r_.__value_.__r.__words[2] + 4) = (std::string::size_type)"inDataSize == sizeof(CFArrayRef)";
              WORD2(buf[1].__r_.__value_.__r.__words[0]) = 2080;
              *(std::string::size_type *)((char *)buf[1].__r_.__value_.__r.__words + 6) = (std::string::size_type)"BadPropertySize";
              v544 = MEMORY[0x1E0C81028];
              goto LABEL_1597;
            case 32:
              if (a4 != 8)
              {
                if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
                  goto LABEL_1598;
                LODWORD(buf[0].__r_.__value_.__l.__data_) = 136315906;
                *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)"vpProperties.cpp";
                WORD2(buf[0].__r_.__value_.__r.__words[1]) = 1024;
                *(_DWORD *)((char *)&buf[0].__r_.__value_.__r.__words[1] + 6) = 1213;
                WORD1(buf[0].__r_.__value_.__r.__words[2]) = 2080;
                *(std::string::size_type *)((char *)&buf[0].__r_.__value_.__r.__words[2] + 4) = (std::string::size_type)"inDataSize == sizeof(CFArrayRef)";
                WORD2(buf[1].__r_.__value_.__r.__words[0]) = 2080;
                *(std::string::size_type *)((char *)buf[1].__r_.__value_.__r.__words + 6) = (std::string::size_type)"BadPropertySize";
                v544 = MEMORY[0x1E0C81028];
                goto LABEL_1597;
              }
              applesauce::CF::ArrayRef::from_get_noexcept((applesauce::CF::ArrayRef *)&value, *(CFTypeRef *)theDict);
              v202 = this;
              if (!value)
              {
                if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
                  goto LABEL_1566;
                LODWORD(buf[0].__r_.__value_.__l.__data_) = 136315906;
                *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)"vpProperties.cpp";
                WORD2(buf[0].__r_.__value_.__r.__words[1]) = 1024;
                *(_DWORD *)((char *)&buf[0].__r_.__value_.__r.__words[1] + 6) = 1217;
                WORD1(buf[0].__r_.__value_.__r.__words[2]) = 2080;
                *(std::string::size_type *)((char *)&buf[0].__r_.__value_.__r.__words[2] + 4) = (std::string::size_type)"refTrimGainsCF.is_valid()";
                WORD2(buf[1].__r_.__value_.__r.__words[0]) = 2080;
                *(std::string::size_type *)((char *)buf[1].__r_.__value_.__r.__words + 6) = (std::string::size_type)"InvalidPropertyValue";
                v545 = MEMORY[0x1E0C81028];
                goto LABEL_1565;
              }
              v203 = (const __CFArray **)applesauce::CF::ArrayRef::operator->(&value);
              if (!applesauce::CF::ArrayRef_proxy::get_size(*v203))
              {
                if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
                  goto LABEL_1566;
                LODWORD(buf[0].__r_.__value_.__l.__data_) = 136315906;
                *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)"vpProperties.cpp";
                WORD2(buf[0].__r_.__value_.__r.__words[1]) = 1024;
                *(_DWORD *)((char *)&buf[0].__r_.__value_.__r.__words[1] + 6) = 1218;
                WORD1(buf[0].__r_.__value_.__r.__words[2]) = 2080;
                *(std::string::size_type *)((char *)&buf[0].__r_.__value_.__r.__words[2] + 4) = (std::string::size_type)"refTrimGainsCF->get_size() != 0";
                WORD2(buf[1].__r_.__value_.__r.__words[0]) = 2080;
                *(std::string::size_type *)((char *)buf[1].__r_.__value_.__r.__words + 6) = (std::string::size_type)"InvalidPropertyValue";
                v545 = MEMORY[0x1E0C81028];
                goto LABEL_1565;
              }
              memset(v564, 0, 24);
              applesauce::CF::ArrayRef_iterator<applesauce::CF::DictionaryRef>::ArrayRef_iterator(&__p, (CFArrayRef)value);
              applesauce::CF::ArrayRef_iterator<applesauce::CF::DictionaryRef>::ArrayRef_iterator(&cf, (CFArrayRef)value);
              v204 = v560;
              v559 = v560;
              v205 = __p.__r_.__value_.__l.__size_;
              while (2)
              {
                if (__p.__r_.__value_.__r.__words[0])
                  v206 = v205 == __p.__r_.__value_.__r.__words[2];
                else
                  v206 = 1;
                if (v206 && (cf ? (v207 = v204 == v560) : (v207 = 1), v207)
                  || (__p.__r_.__value_.__l.__data_ == cf ? (v208 = v205 == v204) : (v208 = 0), v208))
                {
                  applesauce::CF::ArrayRef::operator=((const void **)v202 + 265, value);
                  v464 = (void *)*((_QWORD *)v202 + 266);
                  if (v464)
                  {
                    *((_QWORD *)v202 + 267) = v464;
                    operator delete(v464);
                    *((_QWORD *)v202 + 266) = 0;
                    *((_QWORD *)v202 + 267) = 0;
                    *((_QWORD *)v202 + 268) = 0;
                  }
                  v465 = *(_OWORD *)v564;
                  *((_OWORD *)v202 + 133) = *(_OWORD *)v564;
                  *((_QWORD *)v202 + 268) = *(_QWORD *)&v564[16];
                  memset(v564, 0, 24);
                  if (*((_BYTE *)v202 + 477) && (*((_BYTE *)v202 + 8834) & 0x20) != 0)
                  {
                    v466 = (float *)v465;
                    v467 = (float *)(v465 + 4);
                    if ((_QWORD)v465 != *((_QWORD *)&v465 + 1) && v467 != *((float **)&v465 + 1))
                    {
                      v469 = *(float *)v465;
                      v470 = v467;
                      do
                      {
                        v471 = *v470++;
                        v472 = v471;
                        if (v471 < v469)
                        {
                          v469 = v472;
                          v466 = v467;
                        }
                        v467 = v470;
                      }
                      while (v470 != *((float **)&v465 + 1));
                    }
                    v473 = fmaxf(*v466, 0.0);
                    AUPropAndParamHelper::AddItemToAUParamList((uint64_t)v202 + 9352, 1, v473);
                    v474 = (OpaqueAudioComponentInstance *)*((_QWORD *)v202 + 458);
                    if (v474)
                      AudioUnitSetParameter(v474, 1u, 0, 0, v473, 0);
                  }
                  if (*v555)
                    VoiceProcessorV2::PListWriteRefTrimGainParameters(v202, (float **)v202 + 266);
LABEL_1277:
                  v50 = 0;
                  goto LABEL_1278;
                }
                applesauce::CF::details::at_to<applesauce::CF::DictionaryRef>((const __CFArray *)__p.__r_.__value_.__l.__data_, v205, (applesauce::CF::DictionaryRef *)&v557);
                if (!v557)
                {
                  v547 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                  std::runtime_error::runtime_error(v547, "Could not construct");
                }
                if (applesauce::CF::details::has_key<char const(&)[25]>((const __CFDictionary *)v557, "trim_gain_data_source_id"))
                {
                  if (!v557)
                  {
                    v549 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                    std::runtime_error::runtime_error(v549, "Could not construct");
                  }
                  if (applesauce::CF::details::has_key<char const(&)[13]>((const __CFDictionary *)v557, "trim_gain_db"))
                  {
                    if (!v557)
                    {
                      v551 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                      std::runtime_error::runtime_error(v551, "Could not construct");
                    }
                    v209 = applesauce::CF::details::find_at_key<float,char const(&)[13]>((const __CFDictionary *)v557, "trim_gain_db");
                    v210 = v209;
                    v211 = *(char **)&v564[8];
                    if (*(_QWORD *)&v564[8] >= *(_QWORD *)&v564[16])
                    {
                      v213 = *(char **)v564;
                      v214 = (uint64_t)(*(_QWORD *)&v564[8] - *(_QWORD *)v564) >> 2;
                      v215 = v214 + 1;
                      if ((unint64_t)(v214 + 1) >> 62)
                        std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
                      v216 = *(_QWORD *)&v564[16] - *(_QWORD *)v564;
                      if ((uint64_t)(*(_QWORD *)&v564[16] - *(_QWORD *)v564) >> 1 > v215)
                        v215 = v216 >> 1;
                      if ((unint64_t)v216 >= 0x7FFFFFFFFFFFFFFCLL)
                        v217 = 0x3FFFFFFFFFFFFFFFLL;
                      else
                        v217 = v215;
                      if (v217)
                      {
                        v218 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>((uint64_t)&v564[16], v217);
                        v211 = *(char **)&v564[8];
                        v213 = *(char **)v564;
                      }
                      else
                      {
                        v218 = 0;
                      }
                      v219 = &v218[4 * v214];
                      *(float *)v219 = v210;
                      v212 = v219 + 4;
                      while (v211 != v213)
                      {
                        v220 = *((_DWORD *)v211 - 1);
                        v211 -= 4;
                        *((_DWORD *)v219 - 1) = v220;
                        v219 -= 4;
                      }
                      *(_QWORD *)v564 = v219;
                      *(_QWORD *)&v564[8] = v212;
                      *(_QWORD *)&v564[16] = &v218[4 * v217];
                      if (v213)
                        operator delete(v213);
                    }
                    else
                    {
                      **(float **)&v564[8] = v209;
                      v212 = v211 + 4;
                    }
                    v50 = 0;
                    *(_QWORD *)&v564[8] = v212;
                    v221 = 1;
LABEL_572:
                    if (v557)
                      CFRelease(v557);
                    if (v221)
                    {
                      v205 = ++__p.__r_.__value_.__l.__size_;
                      v204 = v559;
                      v202 = v556;
                      continue;
                    }
LABEL_1278:
                    if (*(_QWORD *)v564)
                    {
                      *(_QWORD *)&v564[8] = *(_QWORD *)v564;
                      operator delete(*(void **)v564);
                    }
                    if (!v50)
                    {
LABEL_1613:
                      applesauce::CF::ArrayRef::~ArrayRef((const void **)&value);
                      goto LABEL_1614;
                    }
                    goto LABEL_1281;
                  }
                  if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
                  {
                    LODWORD(buf[0].__r_.__value_.__l.__data_) = 136315906;
                    *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)"vpProperties.cpp";
                    WORD2(buf[0].__r_.__value_.__r.__words[1]) = 1024;
                    *(_DWORD *)((char *)&buf[0].__r_.__value_.__r.__words[1] + 6) = 1223;
                    WORD1(buf[0].__r_.__value_.__r.__words[2]) = 2080;
                    *(std::string::size_type *)((char *)&buf[0].__r_.__value_.__r.__words[2] + 4) = (std::string::size_type)"value->has_key(kVirtualAudioPortPropertyTrimGainsCFGainDBKey)";
                    WORD2(buf[1].__r_.__value_.__r.__words[0]) = 2080;
                    *(std::string::size_type *)((char *)buf[1].__r_.__value_.__r.__words + 6) = (std::string::size_type)"InvalidPropertyValue";
                    v222 = MEMORY[0x1E0C81028];
                    goto LABEL_580;
                  }
                }
                else if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
                {
                  LODWORD(buf[0].__r_.__value_.__l.__data_) = 136315906;
                  *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)"vpProperties.cpp";
                  WORD2(buf[0].__r_.__value_.__r.__words[1]) = 1024;
                  *(_DWORD *)((char *)&buf[0].__r_.__value_.__r.__words[1] + 6) = 1222;
                  WORD1(buf[0].__r_.__value_.__r.__words[2]) = 2080;
                  *(std::string::size_type *)((char *)&buf[0].__r_.__value_.__r.__words[2] + 4) = (std::string::size_type)"value->has_key(kVirtualAudioPortPropertyTrimGainsCFDataSourceIDKey)";
                  WORD2(buf[1].__r_.__value_.__r.__words[0]) = 2080;
                  *(std::string::size_type *)((char *)buf[1].__r_.__value_.__r.__words + 6) = (std::string::size_type)"InvalidPropertyValue";
                  v222 = MEMORY[0x1E0C81028];
LABEL_580:
                  _os_log_impl(&dword_1B5ED0000, v222, OS_LOG_TYPE_ERROR, "%25s:%-5d  ca_require: %s %s", (uint8_t *)buf, 0x26u);
                }
                break;
              }
              v221 = 0;
              v50 = 144;
              goto LABEL_572;
            case 33:
              if (a4 == 8)
              {
                applesauce::CF::ArrayRef::from_get((applesauce::CF::ArrayRef *)buf, *(CFTypeRef *)theDict);
                v327 = *((_QWORD *)this + 269);
                *((_QWORD *)this + 269) = buf[0].__r_.__value_.__r.__words[0];
                buf[0].__r_.__value_.__r.__words[0] = v327;
                applesauce::CF::ArrayRef::~ArrayRef((const void **)&buf[0].__r_.__value_.__l.__data_);
                if (!*((_BYTE *)this + 16177) && *((_BYTE *)this + 477))
                {
                  if (VPLogScope(void)::once != -1)
                    dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
                  v488 = CALog::LogObjIfEnabled(3, VPLogScope(void)::scope);
                  if (v488)
                  {
                    v489 = v488;
                    if (os_log_type_enabled(v488, OS_LOG_TYPE_DEFAULT))
                    {
                      LODWORD(buf[0].__r_.__value_.__l.__data_) = 136315394;
                      *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)"vpProperties.cpp";
                      WORD2(buf[0].__r_.__value_.__r.__words[1]) = 1024;
                      *(_DWORD *)((char *)&buf[0].__r_.__value_.__r.__words[1] + 6) = 1255;
                      _os_log_impl(&dword_1B5ED0000, v489, OS_LOG_TYPE_DEFAULT, "%25s:%-5d  <vp> Begin self-reinit (kVPProperty_SpeakerCalibrationDataCF)", (uint8_t *)buf, 0x12u);
                    }
                  }
                  v490 = (int *)*((_QWORD *)this + 1570);
                  if (v490 && (*v555 || *((_BYTE *)this + 15898)))
                  {
                    if (VPLogScope(void)::once != -1)
                      dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
                    CALegacyLog::log(v490, 3, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/vpInitialize/vpProperties.cpp", 1255, "SetProperty", "Begin self-reinit (kVPProperty_SpeakerCalibrationDataCF)");
                  }
                  VoiceProcessorV2::InitializeDLP(this);
                  if (VPLogScope(void)::once != -1)
                    dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
                  v491 = CALog::LogObjIfEnabled(3, VPLogScope(void)::scope);
                  if (v491)
                  {
                    v492 = v491;
                    if (os_log_type_enabled(v491, OS_LOG_TYPE_DEFAULT))
                    {
                      LODWORD(buf[0].__r_.__value_.__l.__data_) = 136315394;
                      *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)"vpProperties.cpp";
                      WORD2(buf[0].__r_.__value_.__r.__words[1]) = 1024;
                      *(_DWORD *)((char *)&buf[0].__r_.__value_.__r.__words[1] + 6) = 1257;
                      _os_log_impl(&dword_1B5ED0000, v492, OS_LOG_TYPE_DEFAULT, "%25s:%-5d  <vp> End self-reinit (kVPProperty_SpeakerCalibrationDataCF)", (uint8_t *)buf, 0x12u);
                    }
                  }
                  v493 = (int *)*((_QWORD *)this + 1570);
                  if (v493 && (*v555 || *((_BYTE *)this + 15898)))
                  {
                    if (VPLogScope(void)::once != -1)
                      dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
                    CALegacyLog::log(v493, 3, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/vpInitialize/vpProperties.cpp", 1257, "SetProperty", "End self-reinit (kVPProperty_SpeakerCalibrationDataCF)");
                  }
                }
                if (*v555)
                  VoiceProcessorV2::PListWriteSpeakerCalibrationParameters(this, *((const __CFArray **)this + 269));
                goto LABEL_1614;
              }
              if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
                goto LABEL_1598;
              LODWORD(buf[0].__r_.__value_.__l.__data_) = 136315906;
              *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)"vpProperties.cpp";
              WORD2(buf[0].__r_.__value_.__r.__words[1]) = 1024;
              *(_DWORD *)((char *)&buf[0].__r_.__value_.__r.__words[1] + 6) = 1249;
              WORD1(buf[0].__r_.__value_.__r.__words[2]) = 2080;
              *(std::string::size_type *)((char *)&buf[0].__r_.__value_.__r.__words[2] + 4) = (std::string::size_type)"inDataSize == sizeof(CFArrayRef)";
              WORD2(buf[1].__r_.__value_.__r.__words[0]) = 2080;
              *(std::string::size_type *)((char *)buf[1].__r_.__value_.__r.__words + 6) = (std::string::size_type)"BadPropertySize";
              v544 = MEMORY[0x1E0C81028];
              goto LABEL_1597;
            default:
              goto LABEL_1256;
          }
        }
        if (a2 > 1635085676)
        {
          if (a2 != 1635085677)
          {
            if (a2 == 1684305512 || a2 == 1685483378)
              goto LABEL_253;
            goto LABEL_1256;
          }
          if (VoiceProcessorV2::IsDeviceSupportingAdvancedChatFlavors(v45))
          {
            if (a4 == 4)
            {
              v339 = *theDict;
              v340 = *theDict != 0;
              if (*((unsigned __int8 *)this + 2268) != v340)
              {
                ChatFlavor = VoiceProcessorV2::GetChatFlavor(this);
                if (VPLogScope(void)::once != -1)
                  dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
                v342 = CALog::LogObjIfEnabled(3, VPLogScope(void)::scope);
                if (v342)
                {
                  v343 = v342;
                  if (os_log_type_enabled(v342, OS_LOG_TYPE_DEFAULT))
                  {
                    v344 = "true";
                    v345 = *((unsigned __int8 *)this + 2268);
                    *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)"vpProperties.cpp";
                    WORD2(buf[0].__r_.__value_.__r.__words[1]) = 1024;
                    *(_DWORD *)((char *)&buf[0].__r_.__value_.__r.__words[1] + 6) = 1958;
                    if (v345)
                      v346 = "true";
                    else
                      v346 = "false";
                    LODWORD(buf[0].__r_.__value_.__l.__data_) = 136315906;
                    if (!v339)
                      v344 = "false";
                    WORD1(buf[0].__r_.__value_.__r.__words[2]) = 2080;
                    *(std::string::size_type *)((char *)&buf[0].__r_.__value_.__r.__words[2] + 4) = (std::string::size_type)v346;
                    WORD2(buf[1].__r_.__value_.__r.__words[0]) = 2080;
                    *(std::string::size_type *)((char *)buf[1].__r_.__value_.__r.__words + 6) = (std::string::size_type)v344;
                    _os_log_impl(&dword_1B5ED0000, v343, OS_LOG_TYPE_DEFAULT, "%25s:%-5d  <vp> setproperty: current state of enable automatic chat flavor = [%s], new state of enable automatic chat flavor = [%s]", (uint8_t *)buf, 0x26u);
                  }
                }
                v347 = (int *)*((_QWORD *)this + 1570);
                if (v347 && (*v555 || *((_BYTE *)this + 15898)))
                {
                  if (VPLogScope(void)::once != -1)
                    dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
                  v348 = "true";
                  if (*((_BYTE *)this + 2268))
                    v349 = "true";
                  else
                    v349 = "false";
                  if (!v339)
                    v348 = "false";
                  CALegacyLog::log(v347, 3, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/vpInitialize/vpProperties.cpp", 1958, "SetProperty", "setproperty: current state of enable automatic chat flavor = [%s], new state of enable automatic chat flavor = [%s]", v349, v348);
                }
                *((_BYTE *)this + 2268) = v340;
                if (*v555)
                  VoiceProcessorV2::PListWriteSetPropertyParameters(this, 1635085677);
                if (VPLogScope(void)::once != -1)
                  dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
                v350 = CALog::LogObjIfEnabled(3, VPLogScope(void)::scope);
                if (v350)
                {
                  v351 = v350;
                  if (os_log_type_enabled(v350, OS_LOG_TYPE_DEFAULT))
                  {
                    v352 = *((unsigned __int8 *)this + 2268);
                    LODWORD(buf[0].__r_.__value_.__l.__data_) = 136315650;
                    *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)"vpProperties.cpp";
                    WORD2(buf[0].__r_.__value_.__r.__words[1]) = 1024;
                    *(_DWORD *)((char *)&buf[0].__r_.__value_.__r.__words[1] + 6) = 1961;
                    WORD1(buf[0].__r_.__value_.__r.__words[2]) = 1024;
                    HIDWORD(buf[0].__r_.__value_.__r.__words[2]) = v352;
                    _os_log_impl(&dword_1B5ED0000, v351, OS_LOG_TYPE_DEFAULT, "%25s:%-5d  <vp> setproperty: enable automatic chat flavor value changed to = [%d]", (uint8_t *)buf, 0x18u);
                  }
                }
                v353 = (int *)*((_QWORD *)this + 1570);
                if (v353 && (*v555 || *((_BYTE *)this + 15898)))
                {
                  if (VPLogScope(void)::once != -1)
                    dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
                  CALegacyLog::log(v353, 3, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/vpInitialize/vpProperties.cpp", 1961, "SetProperty", "setproperty: enable automatic chat flavor value changed to = [%d]", *((unsigned __int8 *)this + 2268));
                }
                v354 = VoiceProcessorV2::GetChatFlavor(this);
                if (v354 == ChatFlavor)
                {
                  if (VPLogScope(void)::once != -1)
                    dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
                  v355 = CALog::LogObjIfEnabled(3, VPLogScope(void)::scope);
                  if (v355)
                  {
                    v356 = v355;
                    if (os_log_type_enabled(v355, OS_LOG_TYPE_DEFAULT))
                    {
                      LODWORD(buf[0].__r_.__value_.__l.__data_) = 136315650;
                      *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)"vpProperties.cpp";
                      WORD2(buf[0].__r_.__value_.__r.__words[1]) = 1024;
                      *(_DWORD *)((char *)&buf[0].__r_.__value_.__r.__words[1] + 6) = 1973;
                      WORD1(buf[0].__r_.__value_.__r.__words[2]) = 1024;
                      HIDWORD(buf[0].__r_.__value_.__r.__words[2]) = ChatFlavor;
                      _os_log_impl(&dword_1B5ED0000, v356, OS_LOG_TYPE_DEFAULT, "%25s:%-5d  <vp> No self-reinit required, chat flavor remains %d", (uint8_t *)buf, 0x18u);
                    }
                  }
                  v357 = (int *)*((_QWORD *)this + 1570);
                  if (v357 && (*v555 || *((_BYTE *)this + 15898)))
                  {
                    if (VPLogScope(void)::once != -1)
                      dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
                    CALegacyLog::log(v357, 3, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/vpInitialize/vpProperties.cpp", 1973, "SetProperty", "No self-reinit required, chat flavor remains %d", ChatFlavor);
                  }
                }
                else
                {
                  if (VPLogScope(void)::once != -1)
                    dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
                  v525 = CALog::LogObjIfEnabled(3, VPLogScope(void)::scope);
                  if (v525)
                  {
                    v526 = v525;
                    if (os_log_type_enabled(v525, OS_LOG_TYPE_DEFAULT))
                    {
                      LODWORD(buf[0].__r_.__value_.__l.__data_) = 136315394;
                      *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)"vpProperties.cpp";
                      WORD2(buf[0].__r_.__value_.__r.__words[1]) = 1024;
                      *(_DWORD *)((char *)&buf[0].__r_.__value_.__r.__words[1] + 6) = 1966;
                      _os_log_impl(&dword_1B5ED0000, v526, OS_LOG_TYPE_DEFAULT, "%25s:%-5d  <vp> Begin self-reinit (kVPProperty_EnableAutomaticMicMode)", (uint8_t *)buf, 0x12u);
                    }
                  }
                  v527 = (int *)*((_QWORD *)this + 1570);
                  if (v527 && (*v555 || *((_BYTE *)this + 15898)))
                  {
                    if (VPLogScope(void)::once != -1)
                      dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
                    CALegacyLog::log(v527, 3, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/vpInitialize/vpProperties.cpp", 1966, "SetProperty", "Begin self-reinit (kVPProperty_EnableAutomaticMicMode)");
                  }
                  if (VPLogScope(void)::once != -1)
                    dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
                  v528 = CALog::LogObjIfEnabled(3, VPLogScope(void)::scope);
                  if (v528)
                  {
                    v531 = v528;
                    if (os_log_type_enabled(v528, OS_LOG_TYPE_DEFAULT))
                    {
                      LODWORD(buf[0].__r_.__value_.__l.__data_) = 136315906;
                      *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)"vpProperties.cpp";
                      WORD2(buf[0].__r_.__value_.__r.__words[1]) = 1024;
                      *(_DWORD *)((char *)&buf[0].__r_.__value_.__r.__words[1] + 6) = 1967;
                      WORD1(buf[0].__r_.__value_.__r.__words[2]) = 1024;
                      HIDWORD(buf[0].__r_.__value_.__r.__words[2]) = ChatFlavor;
                      LOWORD(buf[1].__r_.__value_.__l.__data_) = 1024;
                      *(_DWORD *)&buf[1].__r_.__value_.__s.__data_[2] = v354;
                      _os_log_impl(&dword_1B5ED0000, v531, OS_LOG_TYPE_DEFAULT, "%25s:%-5d  <vp> current chat flavor = [%d], new chat flavor = [%d]", (uint8_t *)buf, 0x1Eu);
                    }
                  }
                  v532 = (int *)*((_QWORD *)this + 1570);
                  if (v532 && (*v555 || *((_BYTE *)this + 15898)))
                  {
                    if (VPLogScope(void)::once != -1)
                      dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
                    CALegacyLog::log(v532, 3, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/vpInitialize/vpProperties.cpp", 1967, "SetProperty", "current chat flavor = [%d], new chat flavor = [%d]", ChatFlavor, v354);
                  }
                  VoiceProcessorV2::ResetTimestampsAndInitializeVP(this, 1, v529, v530);
                  if (VPLogScope(void)::once != -1)
                    dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
                  v533 = CALog::LogObjIfEnabled(3, VPLogScope(void)::scope);
                  if (v533)
                  {
                    v534 = v533;
                    if (os_log_type_enabled(v533, OS_LOG_TYPE_DEFAULT))
                    {
                      LODWORD(buf[0].__r_.__value_.__l.__data_) = 136315394;
                      *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)"vpProperties.cpp";
                      WORD2(buf[0].__r_.__value_.__r.__words[1]) = 1024;
                      *(_DWORD *)((char *)&buf[0].__r_.__value_.__r.__words[1] + 6) = 1969;
                      _os_log_impl(&dword_1B5ED0000, v534, OS_LOG_TYPE_DEFAULT, "%25s:%-5d  <vp> End self-reinit (kVPProperty_EnableAutomaticMicMode)", (uint8_t *)buf, 0x12u);
                    }
                  }
                  v535 = (int *)*((_QWORD *)this + 1570);
                  if (v535 && (*v555 || *((_BYTE *)this + 15898)))
                  {
                    if (VPLogScope(void)::once != -1)
                      dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
                    CALegacyLog::log(v535, 3, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/vpInitialize/vpProperties.cpp", 1969, "SetProperty", "End self-reinit (kVPProperty_EnableAutomaticMicMode)");
                  }
                }
              }
              goto LABEL_1318;
            }
            if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
            {
              LODWORD(buf[0].__r_.__value_.__l.__data_) = 136315906;
              *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)"vpProperties.cpp";
              WORD2(buf[0].__r_.__value_.__r.__words[1]) = 1024;
              *(_DWORD *)((char *)&buf[0].__r_.__value_.__r.__words[1] + 6) = 1952;
              WORD1(buf[0].__r_.__value_.__r.__words[2]) = 2080;
              *(std::string::size_type *)((char *)&buf[0].__r_.__value_.__r.__words[2] + 4) = (std::string::size_type)"inDataSize == sizeof(UInt32)";
              WORD2(buf[1].__r_.__value_.__r.__words[0]) = 2080;
              *(std::string::size_type *)((char *)buf[1].__r_.__value_.__r.__words + 6) = (std::string::size_type)"BadPropertySize";
              v544 = MEMORY[0x1E0C81028];
              goto LABEL_1597;
            }
LABEL_1599:
            v51 = 0;
            v50 = 4;
            goto LABEL_1615;
          }
          if (VPLogScope(void)::once != -1)
            dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
          v475 = CALog::LogObjIfEnabled(3, VPLogScope(void)::scope);
          if (v475)
          {
            v476 = v475;
            if (os_log_type_enabled(v475, OS_LOG_TYPE_DEFAULT))
            {
              LODWORD(buf[0].__r_.__value_.__l.__data_) = 136315394;
              *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)"vpProperties.cpp";
              WORD2(buf[0].__r_.__value_.__r.__words[1]) = 1024;
              *(_DWORD *)((char *)&buf[0].__r_.__value_.__r.__words[1] + 6) = 1979;
              _os_log_impl(&dword_1B5ED0000, v476, OS_LOG_TYPE_DEFAULT, "%25s:%-5d  <vp> Advance chat flavors are not supported, ignoring incoming property", (uint8_t *)buf, 0x12u);
            }
          }
          v361 = (int *)*((_QWORD *)this + 1570);
          if (!v361 || !*v555 && !*((_BYTE *)this + 15898))
            goto LABEL_1318;
          if (VPLogScope(void)::once != -1)
            dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
          v362 = "Advance chat flavors are not supported, ignoring incoming property";
          v363 = 1979;
          goto LABEL_1305;
        }
        if (a2 != 1634300531)
        {
          if (a2 != 1634758259)
            goto LABEL_1256;
          if (_os_feature_enabled_impl())
          {
            if (a4 == 4)
            {
              v146 = *theDict;
              v147 = *theDict != 0;
              if (*((unsigned __int8 *)this + 16596) != v147)
              {
                *((_BYTE *)this + 16596) = v147;
                if (VPLogScope(void)::once != -1)
                  dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
                v148 = CALog::LogObjIfEnabled(3, VPLogScope(void)::scope);
                if (v148)
                {
                  v149 = v148;
                  if (os_log_type_enabled(v148, OS_LOG_TYPE_DEFAULT))
                  {
                    v150 = "off";
                    *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)"vpProperties.cpp";
                    LODWORD(buf[0].__r_.__value_.__l.__data_) = 136315650;
                    if (v146)
                      v150 = "on";
                    WORD2(buf[0].__r_.__value_.__r.__words[1]) = 1024;
                    *(_DWORD *)((char *)&buf[0].__r_.__value_.__r.__words[1] + 6) = 1544;
                    WORD1(buf[0].__r_.__value_.__r.__words[2]) = 2080;
                    *(std::string::size_type *)((char *)&buf[0].__r_.__value_.__r.__words[2] + 4) = (std::string::size_type)v150;
                    _os_log_impl(&dword_1B5ED0000, v149, OS_LOG_TYPE_DEFAULT, "%25s:%-5d  <vp> setproperty: offload AirPods noise suppression = %s", (uint8_t *)buf, 0x1Cu);
                  }
                }
                v151 = (int *)*((_QWORD *)this + 1570);
                if (v151 && (*v555 || *((_BYTE *)this + 15898)))
                {
                  if (VPLogScope(void)::once != -1)
                    dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
                  v152 = "off";
                  if (v146)
                    v152 = "on";
                  CALegacyLog::log(v151, 3, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/vpInitialize/vpProperties.cpp", 1544, "SetProperty", "setproperty: offload AirPods noise suppression = %s", v152);
                }
                if (*v555)
                  VoiceProcessorV2::PListWriteSetPropertyParameters(this, 1634758259);
              }
              goto LABEL_1318;
            }
            if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
            {
              LODWORD(buf[0].__r_.__value_.__l.__data_) = 136315906;
              *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)"vpProperties.cpp";
              WORD2(buf[0].__r_.__value_.__r.__words[1]) = 1024;
              *(_DWORD *)((char *)&buf[0].__r_.__value_.__r.__words[1] + 6) = 1540;
              WORD1(buf[0].__r_.__value_.__r.__words[2]) = 2080;
              *(std::string::size_type *)((char *)&buf[0].__r_.__value_.__r.__words[2] + 4) = (std::string::size_type)"inDataSize == sizeof(UInt32)";
              WORD2(buf[1].__r_.__value_.__r.__words[0]) = 2080;
              *(std::string::size_type *)((char *)buf[1].__r_.__value_.__r.__words + 6) = (std::string::size_type)"BadPropertySize";
              v544 = MEMORY[0x1E0C81028];
              goto LABEL_1597;
            }
            goto LABEL_1599;
          }
          if (VPLogScope(void)::once != -1)
            dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
          v480 = CALog::LogObjIfEnabled(2, VPLogScope(void)::scope);
          if (v480)
          {
            v481 = v480;
            if (os_log_type_enabled(v480, OS_LOG_TYPE_DEFAULT))
            {
              LODWORD(buf[0].__r_.__value_.__l.__data_) = 136315394;
              *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)"vpProperties.cpp";
              WORD2(buf[0].__r_.__value_.__r.__words[1]) = 1024;
              *(_DWORD *)((char *)&buf[0].__r_.__value_.__r.__words[1] + 6) = 1550;
              _os_log_impl(&dword_1B5ED0000, v481, OS_LOG_TYPE_DEFAULT, "%25s:%-5d  >vp> setproperty: AudioDSP/EnhancedAirPodsVoice feature flag is not enabled", (uint8_t *)buf, 0x12u);
            }
          }
          v361 = (int *)*((_QWORD *)this + 1570);
          if (!v361 || !*v555 && !*((_BYTE *)this + 15898))
            goto LABEL_1318;
          if (VPLogScope(void)::once != -1)
            dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
          v362 = "setproperty: AudioDSP/EnhancedAirPodsVoice feature flag is not enabled";
          v363 = 1550;
          v479 = 2;
          goto LABEL_1317;
        }
        CADeprecated::CAAutoFree<long long>::allocBytes((void **)this + 270, a4);
        v328 = (void *)*((_QWORD *)this + 270);
        if (!v328)
          goto LABEL_1614;
        memcpy(v328, theDict, a4);
        v329 = a4 >> 3;
        *((_DWORD *)this + 542) = v329;
        buf[0].__r_.__value_.__r.__words[0] = 0;
        std::vector<long long>::vector(&__p, v329, buf);
        memcpy(__p.__r_.__value_.__l.__data_, theDict, a4);
        AudioIssueDetectorClientUpdateReportingSessions(*((_QWORD *)this + 1994), (uint64_t)&__p);
        AudioIssueDetectorClientUpdateReportingSessions(*((_QWORD *)this + 1995), (uint64_t)&__p);
        v330 = __p.__r_.__value_.__l.__size_;
        v331 = (uint64_t *)__p.__r_.__value_.__r.__words[0];
        if (__p.__r_.__value_.__r.__words[0] == __p.__r_.__value_.__l.__size_)
          goto LABEL_1507;
        while (1)
        {
          v332 = *v331;
          if (AudioStatisticsLibraryLoader(void)::once != -1)
            dispatch_once(&AudioStatisticsLibraryLoader(void)::once, &__block_literal_global_192);
          if (!AudioStatisticsLibraryLoader(void)::libSym
            || (AudioStatisticsLibraryLoader(void)::libSym(v332) & 0xFFFFFFFD) != 0)
          {
            goto LABEL_927;
          }
          v333 = (const void *)AudioStatisticsCopyConfiguration(v332);
          applesauce::CF::DictionaryRef::DictionaryRef((applesauce::CF::DictionaryRef *)&cf, v333);
          value = 0;
          if (CFDictionaryGetValueIfPresent((CFDictionaryRef)cf, CFSTR("HostApplicationDisplayID"), (const void **)&value))
          {
            CStringPtr = (std::string *)CFStringGetCStringPtr((CFStringRef)value, 0x8000100u);
            if (CStringPtr)
              goto LABEL_914;
            if (CFStringGetCString((CFStringRef)value, (char *)buf, 155, 0x8000100u))
              break;
          }
LABEL_926:
          applesauce::CF::DictionaryRef::~DictionaryRef(&cf);
LABEL_927:
          if (++v331 == (uint64_t *)v330)
            goto LABEL_1506;
        }
        CStringPtr = buf;
LABEL_914:
        if (VPLogScope(void)::once != -1)
          dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
        v335 = CALog::LogObjIfEnabled(3, VPLogScope(void)::scope);
        if (v335)
        {
          v336 = v335;
          if (os_log_type_enabled(v335, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)v564 = 136315650;
            *(_QWORD *)&v564[4] = "vpProperties.cpp";
            *(_WORD *)&v564[12] = 1024;
            *(_DWORD *)&v564[14] = 1298;
            *(_WORD *)&v564[18] = 2080;
            *(_QWORD *)&v564[20] = CStringPtr;
            _os_log_impl(&dword_1B5ED0000, v336, OS_LOG_TYPE_DEFAULT, "%25s:%-5d  <vp> HostApplicationDisplayID = %s", v564, 0x1Cu);
          }
        }
        v337 = (int *)*((_QWORD *)v556 + 1570);
        if (v337 && (*v555 || v555[1]))
        {
          if (VPLogScope(void)::once != -1)
            dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
          CALegacyLog::log(v337, 3, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/vpInitialize/vpProperties.cpp", 1298, "SetProperty", "HostApplicationDisplayID = %s", (const char *)CStringPtr);
        }
        applesauce::CF::StringRef::from_get((applesauce::CF::StringRef *)v564, value);
        v338 = *((_QWORD *)v556 + 272);
        *((_QWORD *)v556 + 272) = *(_QWORD *)v564;
        *(_QWORD *)v564 = v338;
        applesauce::CF::StringRef::~StringRef((const void **)v564);
        if (CStringPtr)
        {
          applesauce::CF::DictionaryRef::~DictionaryRef(&cf);
LABEL_1506:
          v331 = (uint64_t *)__p.__r_.__value_.__r.__words[0];
LABEL_1507:
          if (v331)
          {
            __p.__r_.__value_.__l.__size_ = (std::string::size_type)v331;
            operator delete(v331);
          }
LABEL_1614:
          v50 = 0;
          v51 = 0;
          do
LABEL_1615:
            v553 = __ldaxr(v47);
          while (__stlxr(v553 - 1, v47));
          if (v554)
            (*(void (**)(char *))(*(_QWORD *)v44 + 24))(v44);
          if (v50 != 4)
          {
            if (v50 == 144)
              return 561406316;
            else
              return v51;
          }
          return 561211770;
        }
        goto LABEL_926;
      }
      if (a2 > 1953915763)
      {
        if (a2 > 1987209579)
        {
          if (a2 > 1987211118)
          {
            switch(a2)
            {
              case 1987211119:
                if (a4 >= 4)
                {
                  v50 = 0;
                  v51 = 0;
                  *((_DWORD *)this + 294) = *theDict;
                  goto LABEL_1615;
                }
                break;
              case 1987211365:
                if (a4 >= 4)
                {
                  v50 = 0;
                  v51 = 0;
                  *((_DWORD *)this + 597) = *theDict;
                  goto LABEL_1615;
                }
                break;
              case 1987211379:
                if (a4 >= 4)
                {
                  v50 = 0;
                  v51 = 0;
                  *((_DWORD *)this + 596) = *theDict;
                  goto LABEL_1615;
                }
                break;
              default:
                goto LABEL_1256;
            }
          }
          else
          {
            switch(a2)
            {
              case 1987209580:
                if (a4 >= 4)
                {
                  v50 = 0;
                  v51 = 0;
                  *((_DWORD *)this + 287) = *theDict;
                  goto LABEL_1615;
                }
                break;
              case 1987209583:
                if (a4 >= 4)
                {
                  v50 = 0;
                  v51 = 0;
                  *((_DWORD *)this + 288) = *theDict;
                  goto LABEL_1615;
                }
                break;
              case 1987211116:
                if (a4 >= 4)
                {
                  v50 = 0;
                  v51 = 0;
                  *((_DWORD *)this + 292) = *theDict;
                  goto LABEL_1615;
                }
                break;
              default:
                goto LABEL_1256;
            }
          }
          goto LABEL_1255;
        }
        if (a2 > 1986881899)
        {
          switch(a2)
          {
            case 1986881900:
              if (a4 >= 4)
              {
                v50 = 0;
                v51 = 0;
                *((_DWORD *)this + 291) = *theDict;
                goto LABEL_1615;
              }
              break;
            case 1986881903:
              if (a4 >= 4)
              {
                v50 = 0;
                v51 = 0;
                *((_DWORD *)this + 293) = *theDict;
                goto LABEL_1615;
              }
              break;
            case 1987208053:
              if (a4 >= 4)
              {
                v50 = 0;
                v51 = 0;
                *((_DWORD *)this + 289) = *theDict;
                goto LABEL_1615;
              }
              break;
            default:
              goto LABEL_1256;
          }
          goto LABEL_1255;
        }
        if (a2 == 1953915764)
        {
          if (a4 == 4)
          {
            v412 = *theDict;
            if (*theDict != *((_DWORD *)this + 549))
            {
              v413 = (unsigned int *)((char *)this + 2196);
              *((_DWORD *)this + 549) = v412;
              VoiceProcessorV2::ReadAndApplyDefaultsOverride(this, CFSTR("vp_vocoder_type_int"), 1, (float *)this + 549, v46);
              if (!*((_BYTE *)this + 16177)
                && (*(unsigned int (**)(VoiceProcessorV2 *))(*(_QWORD *)this + 112))(this) <= 5)
              {
                if (VPLogScope(void)::once != -1)
                  dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
                v414 = CALog::LogObjIfEnabled(3, VPLogScope(void)::scope);
                if (v414)
                {
                  v415 = v414;
                  if (os_log_type_enabled(v414, OS_LOG_TYPE_DEFAULT))
                  {
                    LODWORD(buf[0].__r_.__value_.__l.__data_) = 136315394;
                    *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)"vpProperties.cpp";
                    WORD2(buf[0].__r_.__value_.__r.__words[1]) = 1024;
                    *(_DWORD *)((char *)&buf[0].__r_.__value_.__r.__words[1] + 6) = 1326;
                    _os_log_impl(&dword_1B5ED0000, v415, OS_LOG_TYPE_DEFAULT, "%25s:%-5d  <vp> Begin self-reinit (kVPProperty_PrimaryCodecType)", (uint8_t *)buf, 0x12u);
                  }
                }
                v416 = (int *)*((_QWORD *)this + 1570);
                if (v416 && (*v555 || *((_BYTE *)this + 15898)))
                {
                  if (VPLogScope(void)::once != -1)
                    dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
                  CALegacyLog::log(v416, 3, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/vpInitialize/vpProperties.cpp", 1326, "SetProperty", "Begin self-reinit (kVPProperty_PrimaryCodecType)");
                }
                if (*((_BYTE *)this + 477))
                  VoiceProcessorV2::InitializeDLP(this);
                if (*((_BYTE *)this + 476))
                  (*(void (**)(VoiceProcessorV2 *))(*(_QWORD *)this + 240))(this);
                if (VPLogScope(void)::once != -1)
                  dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
                v417 = CALog::LogObjIfEnabled(3, VPLogScope(void)::scope);
                if (v417)
                {
                  v418 = v417;
                  if (os_log_type_enabled(v417, OS_LOG_TYPE_DEFAULT))
                  {
                    LODWORD(buf[0].__r_.__value_.__l.__data_) = 136315394;
                    *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)"vpProperties.cpp";
                    WORD2(buf[0].__r_.__value_.__r.__words[1]) = 1024;
                    *(_DWORD *)((char *)&buf[0].__r_.__value_.__r.__words[1] + 6) = 1329;
                    _os_log_impl(&dword_1B5ED0000, v418, OS_LOG_TYPE_DEFAULT, "%25s:%-5d  <vp> End self-reinit (kVPProperty_PrimaryCodecType)", (uint8_t *)buf, 0x12u);
                  }
                }
                v419 = (int *)*((_QWORD *)this + 1570);
                if (v419 && (*v555 || *((_BYTE *)this + 15898)))
                {
                  if (VPLogScope(void)::once != -1)
                    dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
                  CALegacyLog::log(v419, 3, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/vpInitialize/vpProperties.cpp", 1329, "SetProperty", "End self-reinit (kVPProperty_PrimaryCodecType)");
                }
              }
              VoiceProcessorV2::ReportMetrics(this);
              if (VPLogScope(void)::once != -1)
                dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
              v420 = CALog::LogObjIfEnabled(3, VPLogScope(void)::scope);
              if (v420)
              {
                v421 = v420;
                if (os_log_type_enabled(v420, OS_LOG_TYPE_DEFAULT))
                {
                  CAX4CCString::CAX4CCString((CAX4CCString *)v564, *v413);
                  v422 = *v413;
                  LODWORD(buf[0].__r_.__value_.__l.__data_) = 136315906;
                  *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)"vpProperties.cpp";
                  WORD2(buf[0].__r_.__value_.__r.__words[1]) = 1024;
                  *(_DWORD *)((char *)&buf[0].__r_.__value_.__r.__words[1] + 6) = 1342;
                  WORD1(buf[0].__r_.__value_.__r.__words[2]) = 2080;
                  *(std::string::size_type *)((char *)&buf[0].__r_.__value_.__r.__words[2] + 4) = (std::string::size_type)v564;
                  WORD2(buf[1].__r_.__value_.__r.__words[0]) = 1024;
                  *(_DWORD *)((char *)buf[1].__r_.__value_.__r.__words + 6) = v422;
                  _os_log_impl(&dword_1B5ED0000, v421, OS_LOG_TYPE_DEFAULT, "%25s:%-5d  <vp> setproperty: primary audio vocoder type = %s(%d) ", (uint8_t *)buf, 0x22u);
                }
              }
              v423 = (int *)*((_QWORD *)this + 1570);
              if (v423 && (*v555 || *((_BYTE *)this + 15898)))
              {
                if (VPLogScope(void)::once != -1)
                  dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
                v424 = VPLogScope(void)::scope;
                CAX4CCString::CAX4CCString((CAX4CCString *)buf, *v413);
                CALegacyLog::log(v423, 3, v424, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/vpInitialize/vpProperties.cpp", 1342, "SetProperty", "setproperty: primary audio vocoder type = %s(%d) ", (const char *)buf, *v413);
              }
              if (*v555)
                VoiceProcessorV2::PListWriteSetPropertyParameters(this, 1953915764);
            }
            goto LABEL_1614;
          }
          if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
            goto LABEL_1598;
          LODWORD(buf[0].__r_.__value_.__l.__data_) = 136315906;
          *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)"vpProperties.cpp";
          WORD2(buf[0].__r_.__value_.__r.__words[1]) = 1024;
          *(_DWORD *)((char *)&buf[0].__r_.__value_.__r.__words[1] + 6) = 1312;
          WORD1(buf[0].__r_.__value_.__r.__words[2]) = 2080;
          *(std::string::size_type *)((char *)&buf[0].__r_.__value_.__r.__words[2] + 4) = (std::string::size_type)"inDataSize == sizeof(UInt32)";
          WORD2(buf[1].__r_.__value_.__r.__words[0]) = 2080;
          *(std::string::size_type *)((char *)buf[1].__r_.__value_.__r.__words + 6) = (std::string::size_type)"BadPropertySize";
          v544 = MEMORY[0x1E0C81028];
          goto LABEL_1597;
        }
        if (a2 == 1969844082)
        {
LABEL_253:
          v50 = 0;
          v51 = -10879;
          goto LABEL_1615;
        }
        if (a2 != 1986097261)
        {
LABEL_1256:
          v50 = 0;
          v51 = 2003332927;
          goto LABEL_1615;
        }
        if (a4 > 3)
        {
          v77 = *theDict;
          *((_DWORD *)this + 4148) = *theDict;
          if (VPLogScope(void)::once != -1)
            dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
          v78 = CALog::LogObjIfEnabled(3, VPLogScope(void)::scope);
          if (v78)
          {
            v79 = v78;
            if (os_log_type_enabled(v78, OS_LOG_TYPE_DEFAULT))
            {
              LODWORD(buf[0].__r_.__value_.__l.__data_) = 136315650;
              *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)"vpProperties.cpp";
              WORD2(buf[0].__r_.__value_.__r.__words[1]) = 1024;
              *(_DWORD *)((char *)&buf[0].__r_.__value_.__r.__words[1] + 6) = 1529;
              WORD1(buf[0].__r_.__value_.__r.__words[2]) = 1024;
              HIDWORD(buf[0].__r_.__value_.__r.__words[2]) = v77;
              _os_log_impl(&dword_1B5ED0000, v79, OS_LOG_TYPE_DEFAULT, "%25s:%-5d  <vp> setproperty: VirtualAudio plug-in mode = %u", (uint8_t *)buf, 0x18u);
            }
          }
          v80 = (int *)*((_QWORD *)this + 1570);
          if (v80 && (*v555 || *((_BYTE *)this + 15898)))
          {
            if (VPLogScope(void)::once != -1)
              dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
            CALegacyLog::log(v80, 3, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/vpInitialize/vpProperties.cpp", 1529, "SetProperty", "setproperty: VirtualAudio plug-in mode = %u", v77);
          }
          goto LABEL_1318;
        }
        if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
          goto LABEL_1599;
        LODWORD(buf[0].__r_.__value_.__l.__data_) = 136315906;
        *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)"vpProperties.cpp";
        WORD2(buf[0].__r_.__value_.__r.__words[1]) = 1024;
        *(_DWORD *)((char *)&buf[0].__r_.__value_.__r.__words[1] + 6) = 1527;
        WORD1(buf[0].__r_.__value_.__r.__words[2]) = 2080;
        *(std::string::size_type *)((char *)&buf[0].__r_.__value_.__r.__words[2] + 4) = (std::string::size_type)"inDataSize >= sizeof(UInt32)";
        WORD2(buf[1].__r_.__value_.__r.__words[0]) = 2080;
        *(std::string::size_type *)((char *)buf[1].__r_.__value_.__r.__words + 6) = (std::string::size_type)"BadPropertySize";
        v544 = MEMORY[0x1E0C81028];
      }
      else
      {
        if (a2 <= 1836266092)
        {
          if (a2 <= 1768514914)
          {
            switch(a2)
            {
              case 1701864051:
                if (a4 >= 4)
                {
                  v50 = 0;
                  v51 = 0;
                  *((_DWORD *)this + 4052) = *theDict;
                  goto LABEL_1615;
                }
                break;
              case 1701868402:
                if (a4 >= 4)
                {
                  v50 = 0;
                  v51 = 0;
                  *((_DWORD *)this + 4053) = *theDict;
                  goto LABEL_1615;
                }
                break;
              case 1718384242:
                if (a4 > 3)
                {
                  v67 = *theDict;
                  v51 = (*(uint64_t (**)(VoiceProcessorV2 *, uint64_t))(*(_QWORD *)this + 552))(this, v67);
                  if (VPLogScope(void)::once != -1)
                    dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
                  v68 = CALog::LogObjIfEnabled(3, VPLogScope(void)::scope);
                  if (v68)
                  {
                    v69 = v68;
                    if (os_log_type_enabled(v68, OS_LOG_TYPE_DEFAULT))
                    {
                      LODWORD(buf[0].__r_.__value_.__l.__data_) = 136315650;
                      *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)"vpProperties.cpp";
                      WORD2(buf[0].__r_.__value_.__r.__words[1]) = 1024;
                      *(_DWORD *)((char *)&buf[0].__r_.__value_.__r.__words[1] + 6) = 1508;
                      WORD1(buf[0].__r_.__value_.__r.__words[2]) = 1024;
                      HIDWORD(buf[0].__r_.__value_.__r.__words[2]) = v67;
                      _os_log_impl(&dword_1B5ED0000, v69, OS_LOG_TYPE_DEFAULT, "%25s:%-5d  <vp> setproperty: preferred chat flavor = %u", (uint8_t *)buf, 0x18u);
                    }
                  }
                  v70 = (int *)*((_QWORD *)this + 1570);
                  if (v70 && (*v555 || *((_BYTE *)this + 15898)))
                  {
                    if (VPLogScope(void)::once != -1)
                      dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
                    CALegacyLog::log(v70, 3, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/vpInitialize/vpProperties.cpp", 1508, "SetProperty", "setproperty: preferred chat flavor = %u", v67);
                  }
LABEL_1341:
                  v50 = 0;
                  goto LABEL_1615;
                }
                if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
                {
                  LODWORD(buf[0].__r_.__value_.__l.__data_) = 136315906;
                  *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)"vpProperties.cpp";
                  WORD2(buf[0].__r_.__value_.__r.__words[1]) = 1024;
                  *(_DWORD *)((char *)&buf[0].__r_.__value_.__r.__words[1] + 6) = 1505;
                  WORD1(buf[0].__r_.__value_.__r.__words[2]) = 2080;
                  *(std::string::size_type *)((char *)&buf[0].__r_.__value_.__r.__words[2] + 4) = (std::string::size_type)"inDataSize >= sizeof(UInt32)";
                  WORD2(buf[1].__r_.__value_.__r.__words[0]) = 2080;
                  *(std::string::size_type *)((char *)buf[1].__r_.__value_.__r.__words + 6) = (std::string::size_type)"BadPropertySize";
                  v544 = MEMORY[0x1E0C81028];
                  goto LABEL_1597;
                }
LABEL_1598:
                v51 = 0;
                v50 = 4;
                goto LABEL_1615;
              default:
                goto LABEL_1256;
            }
LABEL_1255:
            v50 = 0;
            v51 = 561211770;
            goto LABEL_1615;
          }
          if (a2 == 1768514915)
          {
            if (a4 > 3)
            {
              v440 = *theDict;
              VoiceProcessorV2::SetEmergencyCallStatus(this, *theDict != 0);
              if (VPLogScope(void)::once != -1)
                dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
              v441 = CALog::LogObjIfEnabled(3, VPLogScope(void)::scope);
              if (v441)
              {
                v442 = v441;
                if (os_log_type_enabled(v441, OS_LOG_TYPE_DEFAULT))
                {
                  LODWORD(buf[0].__r_.__value_.__l.__data_) = 136315650;
                  *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)"vpProperties.cpp";
                  WORD2(buf[0].__r_.__value_.__r.__words[1]) = 1024;
                  *(_DWORD *)((char *)&buf[0].__r_.__value_.__r.__words[1] + 6) = 1519;
                  WORD1(buf[0].__r_.__value_.__r.__words[2]) = 1024;
                  HIDWORD(buf[0].__r_.__value_.__r.__words[2]) = v440 != 0;
                  _os_log_impl(&dword_1B5ED0000, v442, OS_LOG_TYPE_DEFAULT, "%25s:%-5d  <vp> setproperty: is in emergency call = %u", (uint8_t *)buf, 0x18u);
                }
              }
              v443 = (int *)*((_QWORD *)this + 1570);
              if (v443 && (*v555 || *((_BYTE *)this + 15898)))
              {
                if (VPLogScope(void)::once != -1)
                  dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
                CALegacyLog::log(v443, 3, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/vpInitialize/vpProperties.cpp", 1519, "SetProperty", "setproperty: is in emergency call = %u", v440 != 0);
              }
              goto LABEL_1614;
            }
            if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
              goto LABEL_1598;
            LODWORD(buf[0].__r_.__value_.__l.__data_) = 136315906;
            *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)"vpProperties.cpp";
            WORD2(buf[0].__r_.__value_.__r.__words[1]) = 1024;
            *(_DWORD *)((char *)&buf[0].__r_.__value_.__r.__words[1] + 6) = 1515;
            WORD1(buf[0].__r_.__value_.__r.__words[2]) = 2080;
            *(std::string::size_type *)((char *)&buf[0].__r_.__value_.__r.__words[2] + 4) = (std::string::size_type)"inDataSize >= sizeof(UInt32)";
            WORD2(buf[1].__r_.__value_.__r.__words[0]) = 2080;
            *(std::string::size_type *)((char *)buf[1].__r_.__value_.__r.__words + 6) = (std::string::size_type)"BadPropertySize";
            v544 = MEMORY[0x1E0C81028];
            goto LABEL_1597;
          }
          if (a2 == 1835361379)
          {
            if (a4 == 4)
            {
              v364 = (*(uint64_t (**)(VoiceProcessorV2 *))(*(_QWORD *)this + 112))(this);
              if (v364 < 3)
              {
                if (VPLogScope(void)::once != -1)
                  dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
                v482 = CALog::LogObjIfEnabled(1, VPLogScope(void)::scope);
                if (v482)
                {
                  v483 = v482;
                  if (os_log_type_enabled(v482, OS_LOG_TYPE_ERROR))
                  {
                    LODWORD(buf[0].__r_.__value_.__l.__data_) = 136315650;
                    *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)"vpProperties.cpp";
                    WORD2(buf[0].__r_.__value_.__r.__words[1]) = 1024;
                    *(_DWORD *)((char *)&buf[0].__r_.__value_.__r.__words[1] + 6) = 1015;
                    WORD1(buf[0].__r_.__value_.__r.__words[2]) = 1024;
                    HIDWORD(buf[0].__r_.__value_.__r.__words[2]) = v364;
                    _os_log_impl(&dword_1B5ED0000, v483, OS_LOG_TYPE_ERROR, "%25s:%-5d  >vp> setproperty: media chat for vp version = %u is not supported", (uint8_t *)buf, 0x18u);
                  }
                }
                v484 = (int *)*((_QWORD *)this + 1570);
                if (v484 && (*v555 || *((_BYTE *)this + 15898)))
                {
                  if (VPLogScope(void)::once != -1)
                    dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
                  CALegacyLog::log(v484, 1, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/vpInitialize/vpProperties.cpp", 1015, "SetProperty", "setproperty: media chat for vp version = %u is not supported", v364);
                }
              }
              else if (_os_feature_enabled_impl())
              {
                v365 = *theDict;
                v366 = *theDict != 0;
                if (*((unsigned __int8 *)this + 2244) != v366)
                {
                  if (VPLogScope(void)::once != -1)
                    dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
                  v367 = CALog::LogObjIfEnabled(3, VPLogScope(void)::scope);
                  if (v367)
                  {
                    v368 = v367;
                    if (os_log_type_enabled(v367, OS_LOG_TYPE_DEFAULT))
                    {
                      v369 = "true";
                      v370 = *((unsigned __int8 *)this + 2244);
                      *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)"vpProperties.cpp";
                      WORD2(buf[0].__r_.__value_.__r.__words[1]) = 1024;
                      *(_DWORD *)((char *)&buf[0].__r_.__value_.__r.__words[1] + 6) = 998;
                      if (v370)
                        v371 = "true";
                      else
                        v371 = "false";
                      LODWORD(buf[0].__r_.__value_.__l.__data_) = 136315906;
                      if (!v365)
                        v369 = "false";
                      WORD1(buf[0].__r_.__value_.__r.__words[2]) = 2080;
                      *(std::string::size_type *)((char *)&buf[0].__r_.__value_.__r.__words[2] + 4) = (std::string::size_type)v371;
                      WORD2(buf[1].__r_.__value_.__r.__words[0]) = 2080;
                      *(std::string::size_type *)((char *)buf[1].__r_.__value_.__r.__words + 6) = (std::string::size_type)v369;
                      _os_log_impl(&dword_1B5ED0000, v368, OS_LOG_TYPE_DEFAULT, "%25s:%-5d  <vp> setproperty: current state of media chat = [%s], new state of media chat = [%s]", (uint8_t *)buf, 0x26u);
                    }
                  }
                  v372 = (int *)*((_QWORD *)this + 1570);
                  if (v372 && (*v555 || *((_BYTE *)this + 15898)))
                  {
                    if (VPLogScope(void)::once != -1)
                      dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
                    v373 = "true";
                    if (*((_BYTE *)this + 2244))
                      v374 = "true";
                    else
                      v374 = "false";
                    if (!v365)
                      v373 = "false";
                    CALegacyLog::log(v372, 3, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/vpInitialize/vpProperties.cpp", 998, "SetProperty", "setproperty: current state of media chat = [%s], new state of media chat = [%s]", v374, v373);
                  }
                  *((_BYTE *)this + 2244) = v366;
                  if (*v555)
                    VoiceProcessorV2::PListWriteSetPropertyParameters(this, 1835361379);
                  if (VPLogScope(void)::once != -1)
                    dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
                  v375 = CALog::LogObjIfEnabled(3, VPLogScope(void)::scope);
                  if (v375)
                  {
                    v378 = v375;
                    if (os_log_type_enabled(v375, OS_LOG_TYPE_DEFAULT))
                    {
                      LODWORD(buf[0].__r_.__value_.__l.__data_) = 136315394;
                      *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)"vpProperties.cpp";
                      WORD2(buf[0].__r_.__value_.__r.__words[1]) = 1024;
                      *(_DWORD *)((char *)&buf[0].__r_.__value_.__r.__words[1] + 6) = 1001;
                      _os_log_impl(&dword_1B5ED0000, v378, OS_LOG_TYPE_DEFAULT, "%25s:%-5d  <vp> Begin self-reinit (kVPProperty_EnableMediaChat)", (uint8_t *)buf, 0x12u);
                    }
                  }
                  v379 = (int *)*((_QWORD *)this + 1570);
                  if (v379 && (*v555 || *((_BYTE *)this + 15898)))
                  {
                    if (VPLogScope(void)::once != -1)
                      dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
                    CALegacyLog::log(v379, 3, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/vpInitialize/vpProperties.cpp", 1001, "SetProperty", "Begin self-reinit (kVPProperty_EnableMediaChat)");
                  }
                  VoiceProcessorV2::ResetTimestampsAndInitializeVP(this, 0, v376, v377);
                  if (VPLogScope(void)::once != -1)
                    dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
                  v380 = CALog::LogObjIfEnabled(3, VPLogScope(void)::scope);
                  if (v380)
                  {
                    v381 = v380;
                    if (os_log_type_enabled(v380, OS_LOG_TYPE_DEFAULT))
                    {
                      LODWORD(buf[0].__r_.__value_.__l.__data_) = 136315394;
                      *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)"vpProperties.cpp";
                      WORD2(buf[0].__r_.__value_.__r.__words[1]) = 1024;
                      *(_DWORD *)((char *)&buf[0].__r_.__value_.__r.__words[1] + 6) = 1003;
                      _os_log_impl(&dword_1B5ED0000, v381, OS_LOG_TYPE_DEFAULT, "%25s:%-5d  <vp> End self-reinit (kVPProperty_EnableMediaChat)", (uint8_t *)buf, 0x12u);
                    }
                  }
                  v382 = (int *)*((_QWORD *)this + 1570);
                  if (v382 && (*v555 || *((_BYTE *)this + 15898)))
                  {
                    if (VPLogScope(void)::once != -1)
                      dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
                    CALegacyLog::log(v382, 3, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/vpInitialize/vpProperties.cpp", 1003, "SetProperty", "End self-reinit (kVPProperty_EnableMediaChat)");
                  }
                }
              }
              else
              {
                if (VPLogScope(void)::once != -1)
                  dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
                v522 = CALog::LogObjIfEnabled(2, VPLogScope(void)::scope);
                if (v522)
                {
                  v523 = v522;
                  if (os_log_type_enabled(v522, OS_LOG_TYPE_DEFAULT))
                  {
                    LODWORD(buf[0].__r_.__value_.__l.__data_) = 136315394;
                    *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)"vpProperties.cpp";
                    WORD2(buf[0].__r_.__value_.__r.__words[1]) = 1024;
                    *(_DWORD *)((char *)&buf[0].__r_.__value_.__r.__words[1] + 6) = 1009;
                    _os_log_impl(&dword_1B5ED0000, v523, OS_LOG_TYPE_DEFAULT, "%25s:%-5d  >vp> setproperty: feature was not enabled", (uint8_t *)buf, 0x12u);
                  }
                }
                v524 = (int *)*((_QWORD *)this + 1570);
                if (v524 && (*v555 || *((_BYTE *)this + 15898)))
                {
                  if (VPLogScope(void)::once != -1)
                    dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
                  CALegacyLog::log(v524, 2, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/vpInitialize/vpProperties.cpp", 1009, "SetProperty", "setproperty: feature was not enabled");
                }
              }
              goto LABEL_1614;
            }
            if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
              goto LABEL_1598;
            LODWORD(buf[0].__r_.__value_.__l.__data_) = 136315906;
            *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)"vpProperties.cpp";
            WORD2(buf[0].__r_.__value_.__r.__words[1]) = 1024;
            *(_DWORD *)((char *)&buf[0].__r_.__value_.__r.__words[1] + 6) = 982;
            WORD1(buf[0].__r_.__value_.__r.__words[2]) = 2080;
            *(std::string::size_type *)((char *)&buf[0].__r_.__value_.__r.__words[2] + 4) = (std::string::size_type)"inDataSize == sizeof(UInt32)";
            WORD2(buf[1].__r_.__value_.__r.__words[0]) = 2080;
            *(std::string::size_type *)((char *)buf[1].__r_.__value_.__r.__words + 6) = (std::string::size_type)"BadPropertySize";
            v544 = MEMORY[0x1E0C81028];
            goto LABEL_1597;
          }
          if (a2 != 1836082532)
            goto LABEL_1256;
          if (VoiceProcessorV2::IsDeviceSupportingAdvancedChatFlavors(v45))
          {
            if (a4 == 4)
            {
              v100 = *theDict;
              v101 = *theDict != 0;
              if (*((unsigned __int8 *)this + 2246) != v101)
              {
                if (VPLogScope(void)::once != -1)
                  dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
                v102 = CALog::LogObjIfEnabled(3, VPLogScope(void)::scope);
                if (v102)
                {
                  v103 = v102;
                  if (os_log_type_enabled(v102, OS_LOG_TYPE_DEFAULT))
                  {
                    v104 = "true";
                    v105 = *((unsigned __int8 *)this + 2246);
                    *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)"vpProperties.cpp";
                    WORD2(buf[0].__r_.__value_.__r.__words[1]) = 1024;
                    *(_DWORD *)((char *)&buf[0].__r_.__value_.__r.__words[1] + 6) = 1089;
                    if (v105)
                      v106 = "true";
                    else
                      v106 = "false";
                    LODWORD(buf[0].__r_.__value_.__l.__data_) = 136315906;
                    if (!v100)
                      v104 = "false";
                    WORD1(buf[0].__r_.__value_.__r.__words[2]) = 2080;
                    *(std::string::size_type *)((char *)&buf[0].__r_.__value_.__r.__words[2] + 4) = (std::string::size_type)v106;
                    WORD2(buf[1].__r_.__value_.__r.__words[0]) = 2080;
                    *(std::string::size_type *)((char *)buf[1].__r_.__value_.__r.__words + 6) = (std::string::size_type)v104;
                    _os_log_impl(&dword_1B5ED0000, v103, OS_LOG_TYPE_DEFAULT, "%25s:%-5d  <vp> setproperty: current state of media playback on external device = [%s], new state of media playback on external device = [%s]", (uint8_t *)buf, 0x26u);
                  }
                }
                v107 = (int *)*((_QWORD *)this + 1570);
                if (v107 && (*v555 || *((_BYTE *)this + 15898)))
                {
                  if (VPLogScope(void)::once != -1)
                    dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
                  v108 = "true";
                  if (*((_BYTE *)this + 2246))
                    v109 = "true";
                  else
                    v109 = "false";
                  if (!v100)
                    v108 = "false";
                  CALegacyLog::log(v107, 3, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/vpInitialize/vpProperties.cpp", 1089, "SetProperty", "setproperty: current state of media playback on external device = [%s], new state of media playback on external device = [%s]", v109, v108);
                }
                *((_BYTE *)this + 2246) = v101;
                if (*v555)
                  VoiceProcessorV2::PListWriteSetPropertyParameters(this, 1836082532);
                if (VPLogScope(void)::once != -1)
                  dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
                v110 = CALog::LogObjIfEnabled(3, VPLogScope(void)::scope);
                if (v110)
                {
                  v111 = v110;
                  if (os_log_type_enabled(v110, OS_LOG_TYPE_DEFAULT))
                  {
                    v112 = VoiceProcessorV2::GetChatFlavor(this);
                    std::to_string((std::string *)v564, v112);
                    v113 = v564[23] >= 0 ? v564 : *(_BYTE **)v564;
                    LODWORD(buf[0].__r_.__value_.__l.__data_) = 136315650;
                    *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)"vpProperties.cpp";
                    WORD2(buf[0].__r_.__value_.__r.__words[1]) = 1024;
                    *(_DWORD *)((char *)&buf[0].__r_.__value_.__r.__words[1] + 6) = 1093;
                    WORD1(buf[0].__r_.__value_.__r.__words[2]) = 2080;
                    *(std::string::size_type *)((char *)&buf[0].__r_.__value_.__r.__words[2] + 4) = (std::string::size_type)v113;
                    _os_log_impl(&dword_1B5ED0000, v111, OS_LOG_TYPE_DEFAULT, "%25s:%-5d  <vp> setproperty: chat flavor value changed to = [%s]", (uint8_t *)buf, 0x1Cu);
                    if ((v564[23] & 0x80000000) != 0)
                      operator delete(*(void **)v564);
                  }
                }
                v114 = (int *)*((_QWORD *)this + 1570);
                if (v114 && (*v555 || *((_BYTE *)this + 15898)))
                {
                  if (VPLogScope(void)::once != -1)
                    dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
                  v115 = VPLogScope(void)::scope;
                  v116 = VoiceProcessorV2::GetChatFlavor(this);
                  std::to_string(buf, v116);
                  if ((buf[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                    v117 = buf;
                  else
                    v117 = (std::string *)buf[0].__r_.__value_.__r.__words[0];
                  CALegacyLog::log(v114, 3, v115, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/vpInitialize/vpProperties.cpp", 1093, "SetProperty", "setproperty: chat flavor value changed to = [%s]", (const char *)v117);
                  if (SHIBYTE(buf[0].__r_.__value_.__r.__words[2]) < 0)
                    operator delete(buf[0].__r_.__value_.__l.__data_);
                }
                if (VPLogScope(void)::once != -1)
                  dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
                v118 = CALog::LogObjIfEnabled(3, VPLogScope(void)::scope);
                if (v118)
                {
                  v121 = v118;
                  if (os_log_type_enabled(v118, OS_LOG_TYPE_DEFAULT))
                  {
                    LODWORD(buf[0].__r_.__value_.__l.__data_) = 136315394;
                    *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)"vpProperties.cpp";
                    WORD2(buf[0].__r_.__value_.__r.__words[1]) = 1024;
                    *(_DWORD *)((char *)&buf[0].__r_.__value_.__r.__words[1] + 6) = 1094;
                    _os_log_impl(&dword_1B5ED0000, v121, OS_LOG_TYPE_DEFAULT, "%25s:%-5d  <vp> Begin self-reinit (kVPProperty_MediaPlaybackOnExternalDevice)", (uint8_t *)buf, 0x12u);
                  }
                }
                v122 = (int *)*((_QWORD *)this + 1570);
                if (v122 && (*v555 || *((_BYTE *)this + 15898)))
                {
                  if (VPLogScope(void)::once != -1)
                    dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
                  CALegacyLog::log(v122, 3, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/vpInitialize/vpProperties.cpp", 1094, "SetProperty", "Begin self-reinit (kVPProperty_MediaPlaybackOnExternalDevice)");
                }
                VoiceProcessorV2::ResetTimestampsAndInitializeVP(this, 0, v119, v120);
                if (VPLogScope(void)::once != -1)
                  dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
                v123 = CALog::LogObjIfEnabled(3, VPLogScope(void)::scope);
                if (v123)
                {
                  v124 = v123;
                  if (os_log_type_enabled(v123, OS_LOG_TYPE_DEFAULT))
                  {
                    LODWORD(buf[0].__r_.__value_.__l.__data_) = 136315394;
                    *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)"vpProperties.cpp";
                    WORD2(buf[0].__r_.__value_.__r.__words[1]) = 1024;
                    *(_DWORD *)((char *)&buf[0].__r_.__value_.__r.__words[1] + 6) = 1096;
                    _os_log_impl(&dword_1B5ED0000, v124, OS_LOG_TYPE_DEFAULT, "%25s:%-5d  <vp> End self-reinit (kVPProperty_MediaPlaybackOnExternalDevice)", (uint8_t *)buf, 0x12u);
                  }
                }
                v125 = (int *)*((_QWORD *)this + 1570);
                if (v125 && (*v555 || *((_BYTE *)this + 15898)))
                {
                  if (VPLogScope(void)::once != -1)
                    dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
                  CALegacyLog::log(v125, 3, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/vpInitialize/vpProperties.cpp", 1096, "SetProperty", "End self-reinit (kVPProperty_MediaPlaybackOnExternalDevice)");
                }
              }
              goto LABEL_1614;
            }
            if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
              goto LABEL_1598;
            LODWORD(buf[0].__r_.__value_.__l.__data_) = 136315906;
            *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)"vpProperties.cpp";
            WORD2(buf[0].__r_.__value_.__r.__words[1]) = 1024;
            *(_DWORD *)((char *)&buf[0].__r_.__value_.__r.__words[1] + 6) = 1085;
            WORD1(buf[0].__r_.__value_.__r.__words[2]) = 2080;
            *(std::string::size_type *)((char *)&buf[0].__r_.__value_.__r.__words[2] + 4) = (std::string::size_type)"inDataSize == sizeof(UInt32)";
            WORD2(buf[1].__r_.__value_.__r.__words[0]) = 2080;
            *(std::string::size_type *)((char *)buf[1].__r_.__value_.__r.__words + 6) = (std::string::size_type)"BadPropertySize";
            v544 = MEMORY[0x1E0C81028];
            goto LABEL_1597;
          }
          if (VPLogScope(void)::once != -1)
            dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
          v477 = CALog::LogObjIfEnabled(3, VPLogScope(void)::scope);
          if (v477)
          {
            v478 = v477;
            if (os_log_type_enabled(v477, OS_LOG_TYPE_DEFAULT))
            {
              LODWORD(buf[0].__r_.__value_.__l.__data_) = 136315394;
              *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)"vpProperties.cpp";
              WORD2(buf[0].__r_.__value_.__r.__words[1]) = 1024;
              *(_DWORD *)((char *)&buf[0].__r_.__value_.__r.__words[1] + 6) = 1101;
              _os_log_impl(&dword_1B5ED0000, v478, OS_LOG_TYPE_DEFAULT, "%25s:%-5d  <vp> Voice isolation not supported, ignoring incoming property", (uint8_t *)buf, 0x12u);
            }
          }
          v361 = (int *)*((_QWORD *)this + 1570);
          if (!v361 || !*v555 && !*((_BYTE *)this + 15898))
            goto LABEL_1614;
          if (VPLogScope(void)::once != -1)
            dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
          v362 = "Voice isolation not supported, ignoring incoming property";
          v363 = 1101;
LABEL_1305:
          v479 = 3;
LABEL_1317:
          CALegacyLog::log(v361, v479, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/vpInitialize/vpProperties.cpp", v363, "SetProperty", v362);
          goto LABEL_1318;
        }
        if (a2 > 1936744802)
        {
          switch(a2)
          {
            case 1936744803:
              if (a4 == 4)
              {
                v444 = (*(uint64_t (**)(VoiceProcessorV2 *))(*(_QWORD *)this + 112))(this);
                if (v444 >= 6)
                {
                  v445 = *theDict;
                  v446 = *theDict != 0;
                  if (*((unsigned __int8 *)this + 2245) != v446)
                  {
                    if (VPLogScope(void)::once != -1)
                      dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
                    v447 = CALog::LogObjIfEnabled(3, VPLogScope(void)::scope);
                    if (v447)
                    {
                      v448 = v447;
                      if (os_log_type_enabled(v447, OS_LOG_TYPE_DEFAULT))
                      {
                        v449 = "true";
                        v450 = *((unsigned __int8 *)this + 2245);
                        *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)"vpProperties.cpp";
                        WORD2(buf[0].__r_.__value_.__r.__words[1]) = 1024;
                        *(_DWORD *)((char *)&buf[0].__r_.__value_.__r.__words[1] + 6) = 1029;
                        if (v450)
                          v451 = "true";
                        else
                          v451 = "false";
                        LODWORD(buf[0].__r_.__value_.__l.__data_) = 136315906;
                        if (!v445)
                          v449 = "false";
                        WORD1(buf[0].__r_.__value_.__r.__words[2]) = 2080;
                        *(std::string::size_type *)((char *)&buf[0].__r_.__value_.__r.__words[2] + 4) = (std::string::size_type)v451;
                        WORD2(buf[1].__r_.__value_.__r.__words[0]) = 2080;
                        *(std::string::size_type *)((char *)buf[1].__r_.__value_.__r.__words + 6) = (std::string::size_type)v449;
                        _os_log_impl(&dword_1B5ED0000, v448, OS_LOG_TYPE_DEFAULT, "%25s:%-5d  <vp> setproperty: current state of spatial chat = [%s], new state of spatial chat = [%s]", (uint8_t *)buf, 0x26u);
                      }
                    }
                    v452 = (int *)*((_QWORD *)this + 1570);
                    if (v452 && (*v555 || *((_BYTE *)this + 15898)))
                    {
                      if (VPLogScope(void)::once != -1)
                        dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
                      v453 = "true";
                      if (*((_BYTE *)this + 2245))
                        v454 = "true";
                      else
                        v454 = "false";
                      if (!v445)
                        v453 = "false";
                      CALegacyLog::log(v452, 3, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/vpInitialize/vpProperties.cpp", 1029, "SetProperty", "setproperty: current state of spatial chat = [%s], new state of spatial chat = [%s]", v454, v453);
                    }
                    *((_BYTE *)this + 2245) = v446;
                    if (*v555)
                      VoiceProcessorV2::PListWriteSetPropertyParameters(this, 1936744803);
                    if (VPLogScope(void)::once != -1)
                      dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
                    v455 = CALog::LogObjIfEnabled(3, VPLogScope(void)::scope);
                    if (v455)
                    {
                      v458 = v455;
                      if (os_log_type_enabled(v455, OS_LOG_TYPE_DEFAULT))
                      {
                        LODWORD(buf[0].__r_.__value_.__l.__data_) = 136315394;
                        *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)"vpProperties.cpp";
                        WORD2(buf[0].__r_.__value_.__r.__words[1]) = 1024;
                        *(_DWORD *)((char *)&buf[0].__r_.__value_.__r.__words[1] + 6) = 1032;
                        _os_log_impl(&dword_1B5ED0000, v458, OS_LOG_TYPE_DEFAULT, "%25s:%-5d  <vp> Begin self-reinit (kVPProperty_EnableSpatialChat)", (uint8_t *)buf, 0x12u);
                      }
                    }
                    v459 = (int *)*((_QWORD *)this + 1570);
                    if (v459 && (*v555 || *((_BYTE *)this + 15898)))
                    {
                      if (VPLogScope(void)::once != -1)
                        dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
                      CALegacyLog::log(v459, 3, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/vpInitialize/vpProperties.cpp", 1032, "SetProperty", "Begin self-reinit (kVPProperty_EnableSpatialChat)");
                    }
                    VoiceProcessorV2::ResetTimestampsAndInitializeVP(this, 0, v456, v457);
                    if (VPLogScope(void)::once != -1)
                      dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
                    v460 = CALog::LogObjIfEnabled(3, VPLogScope(void)::scope);
                    if (v460)
                    {
                      v461 = v460;
                      if (os_log_type_enabled(v460, OS_LOG_TYPE_DEFAULT))
                      {
                        LODWORD(buf[0].__r_.__value_.__l.__data_) = 136315394;
                        *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)"vpProperties.cpp";
                        WORD2(buf[0].__r_.__value_.__r.__words[1]) = 1024;
                        *(_DWORD *)((char *)&buf[0].__r_.__value_.__r.__words[1] + 6) = 1034;
                        _os_log_impl(&dword_1B5ED0000, v461, OS_LOG_TYPE_DEFAULT, "%25s:%-5d  <vp> End self-reinit (kVPProperty_EnableSpatialChat)", (uint8_t *)buf, 0x12u);
                      }
                    }
                    v462 = (int *)*((_QWORD *)this + 1570);
                    if (v462 && (*v555 || *((_BYTE *)this + 15898)))
                    {
                      if (VPLogScope(void)::once != -1)
                        dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
                      CALegacyLog::log(v462, 3, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/vpInitialize/vpProperties.cpp", 1034, "SetProperty", "End self-reinit (kVPProperty_EnableSpatialChat)");
                    }
                  }
                  goto LABEL_1614;
                }
                if (VPLogScope(void)::once != -1)
                  dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
                v485 = CALog::LogObjIfEnabled(1, VPLogScope(void)::scope);
                if (v485)
                {
                  v486 = v485;
                  if (os_log_type_enabled(v485, OS_LOG_TYPE_ERROR))
                  {
                    LODWORD(buf[0].__r_.__value_.__l.__data_) = 136315650;
                    *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)"vpProperties.cpp";
                    WORD2(buf[0].__r_.__value_.__r.__words[1]) = 1024;
                    *(_DWORD *)((char *)&buf[0].__r_.__value_.__r.__words[1] + 6) = 1039;
                    WORD1(buf[0].__r_.__value_.__r.__words[2]) = 1024;
                    HIDWORD(buf[0].__r_.__value_.__r.__words[2]) = v444;
                    _os_log_impl(&dword_1B5ED0000, v486, OS_LOG_TYPE_ERROR, "%25s:%-5d  >vp> setproperty: spatial chat for vp version = %u is not supported", (uint8_t *)buf, 0x18u);
                  }
                }
                v51 = 561406316;
                v487 = (int *)*((_QWORD *)this + 1570);
                if (v487 && (*v555 || *((_BYTE *)this + 15898)))
                {
                  if (VPLogScope(void)::once != -1)
                    dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
                  CALegacyLog::log(v487, 1, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/vpInitialize/vpProperties.cpp", 1039, "SetProperty", "setproperty: spatial chat for vp version = %u is not supported", v444);
                }
                goto LABEL_1341;
              }
              if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
              {
                LODWORD(buf[0].__r_.__value_.__l.__data_) = 136315906;
                *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)"vpProperties.cpp";
                WORD2(buf[0].__r_.__value_.__r.__words[1]) = 1024;
                *(_DWORD *)((char *)&buf[0].__r_.__value_.__r.__words[1] + 6) = 1021;
                WORD1(buf[0].__r_.__value_.__r.__words[2]) = 2080;
                *(std::string::size_type *)((char *)&buf[0].__r_.__value_.__r.__words[2] + 4) = (std::string::size_type)"inDataSize == sizeof(UInt32)";
                WORD2(buf[1].__r_.__value_.__r.__words[0]) = 2080;
                *(std::string::size_type *)((char *)buf[1].__r_.__value_.__r.__words + 6) = (std::string::size_type)"BadPropertySize";
                v544 = MEMORY[0x1E0C81028];
                goto LABEL_1597;
              }
              break;
            case 1936746595:
              if (a4 == 8)
              {
                v383 = *v43;
                v384 = *((_BYTE *)this + 16396);
                if (*theDict == *v43 && *((_BYTE *)theDict + 4) == (v384 & 1))
                  goto LABEL_1614;
                if (VPLogScope(void)::once != -1)
                  dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
                v385 = CALog::LogObjIfEnabled(3, VPLogScope(void)::scope);
                if (v385)
                {
                  v386 = v385;
                  if (os_log_type_enabled(v385, OS_LOG_TYPE_DEFAULT))
                  {
                    v387 = *theDict;
                    if (*((_BYTE *)theDict + 4))
                      v388 = "on";
                    else
                      v388 = "off";
                    LODWORD(buf[0].__r_.__value_.__l.__data_) = 136315906;
                    *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)"vpProperties.cpp";
                    WORD2(buf[0].__r_.__value_.__r.__words[1]) = 1024;
                    *(_DWORD *)((char *)&buf[0].__r_.__value_.__r.__words[1] + 6) = 1053;
                    WORD1(buf[0].__r_.__value_.__r.__words[2]) = 1024;
                    HIDWORD(buf[0].__r_.__value_.__r.__words[2]) = v387;
                    LOWORD(buf[1].__r_.__value_.__l.__data_) = 2080;
                    *(std::string::size_type *)((char *)buf[1].__r_.__value_.__r.__words + 2) = (std::string::size_type)v388;
                    _os_log_impl(&dword_1B5ED0000, v386, OS_LOG_TYPE_DEFAULT, "%25s:%-5d  <vp> setproperty: spatial head tracking configuration with mode %u and head tracking %s", (uint8_t *)buf, 0x22u);
                  }
                }
                v389 = (int *)*((_QWORD *)this + 1570);
                if (v389 && (*v555 || *((_BYTE *)this + 15898)))
                {
                  if (VPLogScope(void)::once != -1)
                    dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
                  v390 = "on";
                  if (!*((_BYTE *)theDict + 4))
                    v390 = "off";
                  CALegacyLog::log(v389, 3, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/vpInitialize/vpProperties.cpp", 1053, "SetProperty", "setproperty: spatial head tracking configuration with mode %u and head tracking %s", *theDict, v390);
                }
                *((_QWORD *)this + 2049) = *(_QWORD *)theDict;
                if (*v555)
                  VoiceProcessorV2::PListWriteSetPropertyParameters(this, 1936746595);
                v391 = *theDict;
                v392 = *theDict == 0;
                v393 = v383 == 0;
                v394 = *((unsigned __int8 *)theDict + 4);
                v395 = v384 & 1;
                if (v393 == v392)
                {
                  if (v394 == v395)
                    goto LABEL_1614;
                  v392 = *((_BYTE *)theDict + 4) == 0;
                  v393 = v395 == 0;
                  if (VPLogScope(void)::once != -1)
                    dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
                  v494 = CALog::LogObjIfEnabled(3, VPLogScope(void)::scope);
                  if (v494)
                  {
                    v497 = v494;
                    if (os_log_type_enabled(v494, OS_LOG_TYPE_DEFAULT))
                    {
                      v498 = "On";
                      *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)"vpProperties.cpp";
                      WORD2(buf[0].__r_.__value_.__r.__words[1]) = 1024;
                      *(_DWORD *)((char *)&buf[0].__r_.__value_.__r.__words[1] + 6) = 1073;
                      if (v395)
                        v499 = "On";
                      else
                        v499 = "Off";
                      LODWORD(buf[0].__r_.__value_.__l.__data_) = 136315906;
                      *(std::string::size_type *)((char *)&buf[0].__r_.__value_.__r.__words[2] + 4) = (std::string::size_type)v499;
                      WORD1(buf[0].__r_.__value_.__r.__words[2]) = 2080;
                      if (!v394)
                        v498 = "Off";
                      WORD2(buf[1].__r_.__value_.__r.__words[0]) = 2080;
                      *(std::string::size_type *)((char *)buf[1].__r_.__value_.__r.__words + 6) = (std::string::size_type)v498;
                      _os_log_impl(&dword_1B5ED0000, v497, OS_LOG_TYPE_DEFAULT, "%25s:%-5d  <vp> Begin self-reinit (kVPProperty_SpatialHeadTrackingConfiguration [Headtracking %s => %s])", (uint8_t *)buf, 0x26u);
                    }
                  }
                  v500 = (int *)*((_QWORD *)v556 + 1570);
                  if (v500 && (*v555 || v555[1]))
                  {
                    if (VPLogScope(void)::once != -1)
                      dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
                    v501 = "On";
                    if (v395)
                      v502 = "On";
                    else
                      v502 = "Off";
                    if (!v394)
                      v501 = "Off";
                    CALegacyLog::log(v500, 3, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/vpInitialize/vpProperties.cpp", 1073, "SetProperty", "Begin self-reinit (kVPProperty_SpatialHeadTrackingConfiguration [Headtracking %s => %s])", v502, v501);
                  }
                  VoiceProcessorV2::ResetTimestampsAndInitializeVP(v556, 0, v495, v496);
                  if (VPLogScope(void)::once != -1)
                    dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
                  v503 = CALog::LogObjIfEnabled(3, VPLogScope(void)::scope);
                  if (v503)
                  {
                    v504 = v503;
                    if (os_log_type_enabled(v503, OS_LOG_TYPE_DEFAULT))
                    {
                      v505 = "On";
                      *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)"vpProperties.cpp";
                      WORD2(buf[0].__r_.__value_.__r.__words[1]) = 1024;
                      *(_DWORD *)((char *)&buf[0].__r_.__value_.__r.__words[1] + 6) = 1075;
                      if (v395)
                        v506 = "On";
                      else
                        v506 = "Off";
                      LODWORD(buf[0].__r_.__value_.__l.__data_) = 136315906;
                      WORD1(buf[0].__r_.__value_.__r.__words[2]) = 2080;
                      *(std::string::size_type *)((char *)&buf[0].__r_.__value_.__r.__words[2] + 4) = (std::string::size_type)v506;
                      if (!v394)
                        v505 = "Off";
                      WORD2(buf[1].__r_.__value_.__r.__words[0]) = 2080;
                      *(std::string::size_type *)((char *)buf[1].__r_.__value_.__r.__words + 6) = (std::string::size_type)v505;
                      _os_log_impl(&dword_1B5ED0000, v504, OS_LOG_TYPE_DEFAULT, "%25s:%-5d  <vp> End self-reinit (kVPProperty_SpatialHeadTrackingConfiguration [Headtracking %s => %s ]", (uint8_t *)buf, 0x26u);
                    }
                  }
                  v409 = (int *)*((_QWORD *)v556 + 1570);
                  if (!v409 || !*v555 && !v555[1])
                    goto LABEL_1614;
                  if (VPLogScope(void)::once != -1)
                    dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
                  v411 = 1075;
                  v410 = "End self-reinit (kVPProperty_SpatialHeadTrackingConfiguration [Headtracking %s => %s ]";
                }
                else
                {
                  if (VPLogScope(void)::once != -1)
                    dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
                  v396 = CALog::LogObjIfEnabled(3, VPLogScope(void)::scope);
                  if (v396)
                  {
                    v399 = v396;
                    if (os_log_type_enabled(v396, OS_LOG_TYPE_DEFAULT))
                    {
                      v400 = "On";
                      *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)"vpProperties.cpp";
                      WORD2(buf[0].__r_.__value_.__r.__words[1]) = 1024;
                      *(_DWORD *)((char *)&buf[0].__r_.__value_.__r.__words[1] + 6) = 1067;
                      if (v383)
                        v401 = "On";
                      else
                        v401 = "Off";
                      LODWORD(buf[0].__r_.__value_.__l.__data_) = 136315906;
                      *(std::string::size_type *)((char *)&buf[0].__r_.__value_.__r.__words[2] + 4) = (std::string::size_type)v401;
                      WORD1(buf[0].__r_.__value_.__r.__words[2]) = 2080;
                      if (!v391)
                        v400 = "Off";
                      WORD2(buf[1].__r_.__value_.__r.__words[0]) = 2080;
                      *(std::string::size_type *)((char *)buf[1].__r_.__value_.__r.__words + 6) = (std::string::size_type)v400;
                      _os_log_impl(&dword_1B5ED0000, v399, OS_LOG_TYPE_DEFAULT, "%25s:%-5d  <vp> Begin self-reinit (kVPProperty_SpatialHeadTrackingConfiguration [SpatialMode %s => %s])", (uint8_t *)buf, 0x26u);
                    }
                  }
                  v402 = (int *)*((_QWORD *)v556 + 1570);
                  if (v402 && (*v555 || v555[1]))
                  {
                    if (VPLogScope(void)::once != -1)
                      dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
                    v403 = "On";
                    if (v383)
                      v404 = "On";
                    else
                      v404 = "Off";
                    if (!v391)
                      v403 = "Off";
                    CALegacyLog::log(v402, 3, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/vpInitialize/vpProperties.cpp", 1067, "SetProperty", "Begin self-reinit (kVPProperty_SpatialHeadTrackingConfiguration [SpatialMode %s => %s])", v404, v403);
                  }
                  VoiceProcessorV2::ResetTimestampsAndInitializeVP(v556, 0, v397, v398);
                  if (VPLogScope(void)::once != -1)
                    dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
                  v405 = CALog::LogObjIfEnabled(3, VPLogScope(void)::scope);
                  if (v405)
                  {
                    v406 = v405;
                    if (os_log_type_enabled(v405, OS_LOG_TYPE_DEFAULT))
                    {
                      v407 = "On";
                      *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)"vpProperties.cpp";
                      WORD2(buf[0].__r_.__value_.__r.__words[1]) = 1024;
                      *(_DWORD *)((char *)&buf[0].__r_.__value_.__r.__words[1] + 6) = 1069;
                      if (v383)
                        v408 = "On";
                      else
                        v408 = "Off";
                      LODWORD(buf[0].__r_.__value_.__l.__data_) = 136315906;
                      WORD1(buf[0].__r_.__value_.__r.__words[2]) = 2080;
                      *(std::string::size_type *)((char *)&buf[0].__r_.__value_.__r.__words[2] + 4) = (std::string::size_type)v408;
                      if (!v391)
                        v407 = "Off";
                      WORD2(buf[1].__r_.__value_.__r.__words[0]) = 2080;
                      *(std::string::size_type *)((char *)buf[1].__r_.__value_.__r.__words + 6) = (std::string::size_type)v407;
                      _os_log_impl(&dword_1B5ED0000, v406, OS_LOG_TYPE_DEFAULT, "%25s:%-5d  <vp> End self-reinit (kVPProperty_SpatialHeadTrackingConfiguration [SpatialMode %s => %s ]", (uint8_t *)buf, 0x26u);
                    }
                  }
                  v409 = (int *)*((_QWORD *)v556 + 1570);
                  if (!v409 || !*v555 && !v555[1])
                    goto LABEL_1614;
                  if (VPLogScope(void)::once != -1)
                    dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
                  v410 = "End self-reinit (kVPProperty_SpatialHeadTrackingConfiguration [SpatialMode %s => %s ]";
                  v411 = 1069;
                }
                v507 = "On";
                if (v393)
                  v508 = "Off";
                else
                  v508 = "On";
                if (v392)
                  v507 = "Off";
                CALegacyLog::log(v409, 3, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/vpInitialize/vpProperties.cpp", v411, "SetProperty", v410, v508, v507);
                goto LABEL_1614;
              }
              if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
                goto LABEL_1598;
              LODWORD(buf[0].__r_.__value_.__l.__data_) = 136315906;
              *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)"vpProperties.cpp";
              WORD2(buf[0].__r_.__value_.__r.__words[1]) = 1024;
              *(_DWORD *)((char *)&buf[0].__r_.__value_.__r.__words[1] + 6) = 1047;
              WORD1(buf[0].__r_.__value_.__r.__words[2]) = 2080;
              *(std::string::size_type *)((char *)&buf[0].__r_.__value_.__r.__words[2] + 4) = (std::string::size_type)"inDataSize == sizeof(SpatialHeadTrackingConfiguration)";
              WORD2(buf[1].__r_.__value_.__r.__words[0]) = 2080;
              *(std::string::size_type *)((char *)buf[1].__r_.__value_.__r.__words + 6) = (std::string::size_type)"BadPropertySize";
              v544 = MEMORY[0x1E0C81028];
              goto LABEL_1597;
            case 1953915762:
              if (a4 == 8)
              {
                v126 = *(double *)theDict;
                if (vabdd_f64(*(double *)theDict, *((float *)this + 550)) > 0.000000001)
                {
                  v127 = (float *)((char *)this + 2200);
                  v128 = v126;
                  *((float *)this + 550) = v128;
                  VoiceProcessorV2::ReadAndApplyDefaultsOverride(this, CFSTR("vp_vocoder_sample_rate"), 2, (float *)this + 550, v46);
                  v129 = VPLogScope(void)::once;
                  if (!*((_BYTE *)this + 16177))
                  {
                    if (VPLogScope(void)::once != -1)
                      dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
                    v130 = CALog::LogObjIfEnabled(3, VPLogScope(void)::scope);
                    if (v130)
                    {
                      v131 = v130;
                      if (os_log_type_enabled(v130, OS_LOG_TYPE_DEFAULT))
                      {
                        LODWORD(buf[0].__r_.__value_.__l.__data_) = 136315394;
                        *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)"vpProperties.cpp";
                        WORD2(buf[0].__r_.__value_.__r.__words[1]) = 1024;
                        *(_DWORD *)((char *)&buf[0].__r_.__value_.__r.__words[1] + 6) = 1358;
                        _os_log_impl(&dword_1B5ED0000, v131, OS_LOG_TYPE_DEFAULT, "%25s:%-5d  <vp> Begin self-reinit (kVPProperty_PrimaryCodecSampleRate)", (uint8_t *)buf, 0x12u);
                      }
                    }
                    v132 = (int *)*((_QWORD *)this + 1570);
                    if (v132 && (*v555 || *((_BYTE *)this + 15898)))
                    {
                      if (VPLogScope(void)::once != -1)
                        dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
                      CALegacyLog::log(v132, 3, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/vpInitialize/vpProperties.cpp", 1358, "SetProperty", "Begin self-reinit (kVPProperty_PrimaryCodecSampleRate)");
                    }
                    if (*((_BYTE *)this + 477))
                      VoiceProcessorV2::InitializeDLP(this);
                    v133 = *((_DWORD *)this + 127);
                    v134 = *((double *)this + 113);
                    if (*((_BYTE *)this + 476))
                      (*(void (**)(VoiceProcessorV2 *))(*(_QWORD *)this + 240))(this);
                    if (VPLogScope(void)::once != -1)
                      dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
                    v135 = CALog::LogObjIfEnabled(3, VPLogScope(void)::scope);
                    if (v135)
                    {
                      v136 = v135;
                      if (os_log_type_enabled(v135, OS_LOG_TYPE_DEFAULT))
                      {
                        LODWORD(buf[0].__r_.__value_.__l.__data_) = 136315394;
                        *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)"vpProperties.cpp";
                        WORD2(buf[0].__r_.__value_.__r.__words[1]) = 1024;
                        *(_DWORD *)((char *)&buf[0].__r_.__value_.__r.__words[1] + 6) = 1363;
                        _os_log_impl(&dword_1B5ED0000, v136, OS_LOG_TYPE_DEFAULT, "%25s:%-5d  <vp> End self-reinit (kVPProperty_PrimaryCodecSampleRate)", (uint8_t *)buf, 0x12u);
                      }
                    }
                    v137 = (int *)*((_QWORD *)this + 1570);
                    if (v137 && (*v555 || *((_BYTE *)this + 15898)))
                    {
                      if (VPLogScope(void)::once != -1)
                        dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
                      CALegacyLog::log(v137, 3, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/vpInitialize/vpProperties.cpp", 1363, "SetProperty", "End self-reinit (kVPProperty_PrimaryCodecSampleRate)");
                    }
                    LODWORD(__p.__r_.__value_.__l.__data_) = *((_DWORD *)this + 127);
                    v138 = *((double *)this + 113);
                    *(double *)v564 = v138;
                    if (v133 != LODWORD(__p.__r_.__value_.__l.__data_) || v134 != v138)
                    {
                      if (VPLogScope(void)::once != -1)
                        dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
                      v139 = CALog::LogObjIfEnabled(3, VPLogScope(void)::scope);
                      if (v139)
                      {
                        v140 = v139;
                        if (os_log_type_enabled(v139, OS_LOG_TYPE_DEFAULT))
                        {
                          LODWORD(buf[0].__r_.__value_.__l.__data_) = 136316418;
                          *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)"vpProperties.cpp";
                          WORD2(buf[0].__r_.__value_.__r.__words[1]) = 1024;
                          *(_DWORD *)((char *)&buf[0].__r_.__value_.__r.__words[1] + 6) = 1369;
                          WORD1(buf[0].__r_.__value_.__r.__words[2]) = 1024;
                          HIDWORD(buf[0].__r_.__value_.__r.__words[2]) = v133;
                          LOWORD(buf[1].__r_.__value_.__l.__data_) = 1024;
                          *(_DWORD *)&buf[1].__r_.__value_.__s.__data_[2] = __p.__r_.__value_.__l.__data_;
                          HIWORD(buf[1].__r_.__value_.__r.__words[0]) = 2048;
                          *(double *)&buf[1].__r_.__value_.__l.__size_ = v134;
                          LOWORD(buf[1].__r_.__value_.__r.__words[2]) = 2048;
                          *(std::string::size_type *)((char *)&buf[1].__r_.__value_.__r.__words[2] + 2) = *(_QWORD *)v564;
                          _os_log_impl(&dword_1B5ED0000, v140, OS_LOG_TYPE_DEFAULT, "%25s:%-5d  <vp> setproperty: re-initializing speech enhancer; old ul blk sz = %u; new ul blk"
                            " size = %u; old ul sr = %lf; new ul sr = %lf",
                            (uint8_t *)buf,
                            0x32u);
                        }
                      }
                      v141 = (int *)*((_QWORD *)this + 1570);
                      if (v141 && (*v555 || *((_BYTE *)this + 15898)))
                      {
                        if (VPLogScope(void)::once != -1)
                          dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
                        CALegacyLog::log(v141, 3, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/vpInitialize/vpProperties.cpp", 1369, "SetProperty", "setproperty: re-initializing speech enhancer; old ul blk sz = %u; new ul blk size = %u; old ul"
                          " sr = %lf; new ul sr = %lf",
                          v133,
                          LODWORD(__p.__r_.__value_.__l.__data_),
                          v134,
                          *(double *)v564);
                      }
                      if ((*((_BYTE *)this + 8832) & 0x80) != 0)
                      {
                        AUPropAndParamHelper::AddItemToAUPropsList((AUPropertyItem **)this + 1384, 0x3EBu, 0, 0, 8uLL, v564, 1);
                        AUPropAndParamHelper::AddItemToAUPropsList((AUPropertyItem **)this + 1384, 0x3ECu, 0, 0, 4uLL, &__p, 1);
                        VoiceProcessorV2::InstantiateAndConfigureEffectAU(this, 7u, 0);
                      }
                    }
                    v129 = VPLogScope(void)::once;
                  }
                  if (v129 != -1)
                    dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
                  v142 = CALog::LogObjIfEnabled(3, VPLogScope(void)::scope);
                  if (v142)
                  {
                    v143 = v142;
                    if (os_log_type_enabled(v142, OS_LOG_TYPE_DEFAULT))
                    {
                      v144 = *v127;
                      LODWORD(buf[0].__r_.__value_.__l.__data_) = 136315650;
                      *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)"vpProperties.cpp";
                      WORD2(buf[0].__r_.__value_.__r.__words[1]) = 1024;
                      *(_DWORD *)((char *)&buf[0].__r_.__value_.__r.__words[1] + 6) = 1387;
                      WORD1(buf[0].__r_.__value_.__r.__words[2]) = 2048;
                      *(double *)((char *)&buf[0].__r_.__value_.__r.__words[2] + 4) = v144;
                      _os_log_impl(&dword_1B5ED0000, v143, OS_LOG_TYPE_DEFAULT, "%25s:%-5d  <vp> setproperty: primary vocoder sample rate = %f ", (uint8_t *)buf, 0x1Cu);
                    }
                  }
                  v145 = (int *)*((_QWORD *)this + 1570);
                  if (v145 && (*v555 || *((_BYTE *)this + 15898)))
                  {
                    if (VPLogScope(void)::once != -1)
                      dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
                    CALegacyLog::log(v145, 3, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/vpInitialize/vpProperties.cpp", 1387, "SetProperty", "setproperty: primary vocoder sample rate = %f ", *v127);
                  }
                  if (*v555)
                    VoiceProcessorV2::PListWriteSetPropertyParameters(this, 1953915762);
                }
                goto LABEL_1614;
              }
              if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
              {
                LODWORD(buf[0].__r_.__value_.__l.__data_) = 136315906;
                *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)"vpProperties.cpp";
                WORD2(buf[0].__r_.__value_.__r.__words[1]) = 1024;
                *(_DWORD *)((char *)&buf[0].__r_.__value_.__r.__words[1] + 6) = 1350;
                WORD1(buf[0].__r_.__value_.__r.__words[2]) = 2080;
                *(std::string::size_type *)((char *)&buf[0].__r_.__value_.__r.__words[2] + 4) = (std::string::size_type)"inDataSize == sizeof(Float64)";
                WORD2(buf[1].__r_.__value_.__r.__words[0]) = 2080;
                *(std::string::size_type *)((char *)buf[1].__r_.__value_.__r.__words + 6) = (std::string::size_type)"BadPropertySize";
                v544 = MEMORY[0x1E0C81028];
                goto LABEL_1597;
              }
              break;
            default:
              goto LABEL_1256;
          }
          goto LABEL_1598;
        }
        if (a2 != 1836266093)
        {
          if (a2 == 1836278117)
          {
            if (_os_feature_enabled_impl())
            {
              if (a4 != 8)
              {
                if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
                {
                  LODWORD(buf[0].__r_.__value_.__l.__data_) = 136315906;
                  *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)"vpProperties.cpp";
                  WORD2(buf[0].__r_.__value_.__r.__words[1]) = 1024;
                  *(_DWORD *)((char *)&buf[0].__r_.__value_.__r.__words[1] + 6) = 1853;
                  WORD1(buf[0].__r_.__value_.__r.__words[2]) = 2080;
                  *(std::string::size_type *)((char *)&buf[0].__r_.__value_.__r.__words[2] + 4) = (std::string::size_type)"inDataSize == sizeof(AUVoiceIOMutedSpeechActivityEventListener*)";
                  WORD2(buf[1].__r_.__value_.__r.__words[0]) = 2080;
                  *(std::string::size_type *)((char *)buf[1].__r_.__value_.__r.__words + 6) = (std::string::size_type)"BadPropertySize";
                  v544 = MEMORY[0x1E0C81028];
                  goto LABEL_1597;
                }
                goto LABEL_1599;
              }
              VoiceProcessorV2::CreateMessenger(this);
              v358 = (caulk::concurrent::messenger *)*((_QWORD *)this + 2027);
              if (v358)
                caulk::concurrent::messenger::drain(v358);
              _ZN2vp5BlockIU13block_pointerFv28AUVoiceIOSpeechActivityEventEECI1NS0_IS2_EEES3_((void **)&buf[0].__r_.__value_.__l.__data_, *(void **)theDict);
              vp::Block<void({block_pointer})(AUVoiceIOSpeechActivityEvent)>::operator=((const void **)this + 2054, (const void **)&buf[0].__r_.__value_.__l.__data_);
              vp::Block<void({block_pointer})(AUVoiceIOSpeechActivityEvent)>::~Block((const void **)&buf[0].__r_.__value_.__l.__data_);
              if (!*((_QWORD *)this + 2054))
                goto LABEL_1318;
              if (VPLogScope(void)::once != -1)
                dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
              v359 = CALog::LogObjIfEnabled(3, VPLogScope(void)::scope);
              if (v359)
              {
                v360 = v359;
                if (os_log_type_enabled(v359, OS_LOG_TYPE_DEFAULT))
                {
                  LODWORD(buf[0].__r_.__value_.__l.__data_) = 136315394;
                  *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)"vpProperties.cpp";
                  WORD2(buf[0].__r_.__value_.__r.__words[1]) = 1024;
                  *(_DWORD *)((char *)&buf[0].__r_.__value_.__r.__words[1] + 6) = 1858;
                  _os_log_impl(&dword_1B5ED0000, v360, OS_LOG_TYPE_DEFAULT, "%25s:%-5d  <vp> registered muted speech activity event listener", (uint8_t *)buf, 0x12u);
                }
              }
              v361 = (int *)*((_QWORD *)this + 1570);
              if (!v361 || !*v555 && !*((_BYTE *)this + 15898))
                goto LABEL_1318;
              if (VPLogScope(void)::once != -1)
                dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
              v362 = "registered muted speech activity event listener";
              v363 = 1858;
              goto LABEL_1305;
            }
          }
          else
          {
            if (a2 != 1868653667)
              goto LABEL_1256;
            if (_os_feature_enabled_impl() && !*((_BYTE *)this + 2244))
            {
              if (a4 != 8)
              {
                if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
                {
                  LODWORD(buf[0].__r_.__value_.__l.__data_) = 136315906;
                  *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)"vpProperties.cpp";
                  WORD2(buf[0].__r_.__value_.__r.__words[1]) = 1024;
                  *(_DWORD *)((char *)&buf[0].__r_.__value_.__r.__words[1] + 6) = 1866;
                  WORD1(buf[0].__r_.__value_.__r.__words[2]) = 2080;
                  *(std::string::size_type *)((char *)&buf[0].__r_.__value_.__r.__words[2] + 4) = (std::string::size_type)"inDataSize == sizeof(AUVoiceIOOtherAudioDuckingConfiguration)";
                  WORD2(buf[1].__r_.__value_.__r.__words[0]) = 2080;
                  *(std::string::size_type *)((char *)buf[1].__r_.__value_.__r.__words + 6) = (std::string::size_type)"BadPropertySize";
                  v544 = MEMORY[0x1E0C81028];
                  goto LABEL_1597;
                }
                goto LABEL_1599;
              }
              v84 = theDict[1];
              if (v84 > 0x1E || ((1 << v84) & 0x40100401) == 0)
              {
                if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
                {
                  LODWORD(buf[0].__r_.__value_.__l.__data_) = 136315906;
                  *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)"vpProperties.cpp";
                  WORD2(buf[0].__r_.__value_.__r.__words[1]) = 1024;
                  *(_DWORD *)((char *)&buf[0].__r_.__value_.__r.__words[1] + 6) = 1872;
                  WORD1(buf[0].__r_.__value_.__r.__words[2]) = 2080;
                  *(std::string::size_type *)((char *)&buf[0].__r_.__value_.__r.__words[2] + 4) = (std::string::size_type)"requestedDuckingConfig.mDuckingLevel == kAUVoiceIOOtherAudioDuckingLevelDefault || requestedDuckingConfig.mDuckingLevel == kAUVoiceIOOtherAudioDuckingLevelMin || requestedDuckingConfig.mDuckingLevel == kAUVoiceIOOtherAudioDuckingLevelMid || requestedDuckingConfig.mDuckingLevel == kAUVoiceIOOtherAudioDuckingLevelMax";
                  WORD2(buf[1].__r_.__value_.__r.__words[0]) = 2080;
                  *(std::string::size_type *)((char *)buf[1].__r_.__value_.__r.__words + 6) = (std::string::size_type)"InvalidPropertyValue";
                  v536 = MEMORY[0x1E0C81028];
LABEL_1511:
                  _os_log_impl(&dword_1B5ED0000, v536, OS_LOG_TYPE_ERROR, "%25s:%-5d  ca_require: %s %s", (uint8_t *)buf, 0x26u);
LABEL_1512:
                  v51 = 0;
                  v50 = 144;
                }
                else
                {
                  v51 = 0;
                  v50 = 144;
                }
                goto LABEL_1615;
              }
              v85 = *(unsigned __int8 *)theDict;
              if (VPLogScope(void)::once != -1)
                dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
              v86 = CALog::LogObjIfEnabled(3, VPLogScope(void)::scope);
              if (v86)
              {
                v87 = v86;
                if (os_log_type_enabled(v86, OS_LOG_TYPE_DEFAULT))
                {
                  v88 = *((_DWORD *)this + 4141);
                  v89 = *((unsigned __int8 *)this + 16560);
                  LODWORD(buf[0].__r_.__value_.__l.__data_) = 136316418;
                  *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)"vpProperties.cpp";
                  WORD2(buf[0].__r_.__value_.__r.__words[1]) = 1024;
                  *(_DWORD *)((char *)&buf[0].__r_.__value_.__r.__words[1] + 6) = 1875;
                  WORD1(buf[0].__r_.__value_.__r.__words[2]) = 1024;
                  HIDWORD(buf[0].__r_.__value_.__r.__words[2]) = v88;
                  LOWORD(buf[1].__r_.__value_.__l.__data_) = 1024;
                  *(_DWORD *)&buf[1].__r_.__value_.__s.__data_[2] = v84;
                  HIWORD(buf[1].__r_.__value_.__r.__words[0]) = 1024;
                  LODWORD(buf[1].__r_.__value_.__r.__words[1]) = v89;
                  WORD2(buf[1].__r_.__value_.__r.__words[1]) = 1024;
                  *(_DWORD *)((char *)&buf[1].__r_.__value_.__r.__words[1] + 6) = v85;
                  _os_log_impl(&dword_1B5ED0000, v87, OS_LOG_TYPE_DEFAULT, "%25s:%-5d  <vp> setproperty: current mClientSetDuckingLevel = %u, new value = %u,  current mClientSetEnableDynamicDucking = %d, new value = %d", (uint8_t *)buf, 0x2Au);
                }
              }
              v90 = (int *)*((_QWORD *)this + 1570);
              if (v90 && (*v555 || *((_BYTE *)this + 15898)))
              {
                if (VPLogScope(void)::once != -1)
                  dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
                CALegacyLog::log(v90, 3, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/vpInitialize/vpProperties.cpp", 1875, "SetProperty", "setproperty: current mClientSetDuckingLevel = %u, new value = %u,  current mClientSetEnableDynamicDucking = %d, new value = %d", *((_DWORD *)this + 4141), v84, *((unsigned __int8 *)this + 16560), v85);
              }
              if (*((_DWORD *)this + 4141) != v84)
              {
                *((_DWORD *)this + 4141) = v84;
                if ((*((_BYTE *)this + 8833) & 0x80) != 0)
                {
                  LODWORD(buf[0].__r_.__value_.__l.__data_) = v84;
                  AUPropAndParamHelper::AddItemToAUPropsList((AUPropertyItem **)this + 1408, 0x6E65706Cu, 0, 0, 4uLL, buf, 1);
                  v91 = (OpaqueAudioComponentInstance *)*((_QWORD *)this + 452);
                  if (v91)
                    AudioUnitSetProperty(v91, 0x6E65706Cu, 0, 0, buf, 4u);
                }
              }
              if (*((unsigned __int8 *)this + 16560) != v85)
              {
                *((_BYTE *)this + 16560) = v85 != 0;
                if (VPLogScope(void)::once != -1)
                  dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
                v92 = CALog::LogObjIfEnabled(3, VPLogScope(void)::scope);
                if (v92)
                {
                  v95 = v92;
                  if (os_log_type_enabled(v92, OS_LOG_TYPE_DEFAULT))
                  {
                    LODWORD(buf[0].__r_.__value_.__l.__data_) = 136315394;
                    *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)"vpProperties.cpp";
                    WORD2(buf[0].__r_.__value_.__r.__words[1]) = 1024;
                    *(_DWORD *)((char *)&buf[0].__r_.__value_.__r.__words[1] + 6) = 1897;
                    _os_log_impl(&dword_1B5ED0000, v95, OS_LOG_TYPE_DEFAULT, "%25s:%-5d  <vp> Begin self-reinit (kVPProperty_OtherAudioDuckingConfiguration)", (uint8_t *)buf, 0x12u);
                  }
                }
                v96 = (int *)*((_QWORD *)this + 1570);
                if (v96 && (*v555 || *((_BYTE *)this + 15898)))
                {
                  if (VPLogScope(void)::once != -1)
                    dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
                  CALegacyLog::log(v96, 3, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/vpInitialize/vpProperties.cpp", 1897, "SetProperty", "Begin self-reinit (kVPProperty_OtherAudioDuckingConfiguration)");
                }
                VoiceProcessorV2::ResetTimestampsAndInitializeVP(this, 0, v93, v94);
                if (VPLogScope(void)::once != -1)
                  dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
                v97 = CALog::LogObjIfEnabled(3, VPLogScope(void)::scope);
                if (v97)
                {
                  v98 = v97;
                  if (os_log_type_enabled(v97, OS_LOG_TYPE_DEFAULT))
                  {
                    LODWORD(buf[0].__r_.__value_.__l.__data_) = 136315394;
                    *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)"vpProperties.cpp";
                    WORD2(buf[0].__r_.__value_.__r.__words[1]) = 1024;
                    *(_DWORD *)((char *)&buf[0].__r_.__value_.__r.__words[1] + 6) = 1899;
                    _os_log_impl(&dword_1B5ED0000, v98, OS_LOG_TYPE_DEFAULT, "%25s:%-5d  <vp> End self-reinit (kVPProperty_OtherAudioDuckingConfiguration)", (uint8_t *)buf, 0x12u);
                  }
                }
                v99 = (int *)*((_QWORD *)this + 1570);
                if (v99 && (*v555 || *((_BYTE *)this + 15898)))
                {
                  if (VPLogScope(void)::once != -1)
                    dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
                  CALegacyLog::log(v99, 3, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/vpInitialize/vpProperties.cpp", 1899, "SetProperty", "End self-reinit (kVPProperty_OtherAudioDuckingConfiguration)");
                }
              }
              if (*v555)
                VoiceProcessorV2::PListWriteSetPropertyParameters(this, 1868653667);
LABEL_1318:
              v50 = 0;
              v51 = 0;
              goto LABEL_1615;
            }
          }
          v50 = 0;
          v51 = -10879;
          goto LABEL_1615;
        }
        if (a4 == 4)
        {
          v425 = *theDict == 1;
          if (*((unsigned __int8 *)this + 16296) != v425)
          {
            *((_BYTE *)this + 16296) = v425;
            if (VPLogScope(void)::once != -1)
              dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
            v426 = CALog::LogObjIfEnabled(3, VPLogScope(void)::scope);
            if (v426)
            {
              v429 = v426;
              if (os_log_type_enabled(v426, OS_LOG_TYPE_DEFAULT))
              {
                v430 = "True";
                v431 = *((unsigned __int8 *)this + 16296);
                *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)"vpProperties.cpp";
                LODWORD(buf[0].__r_.__value_.__l.__data_) = 136315650;
                if (!v431)
                  v430 = "False";
                WORD2(buf[0].__r_.__value_.__r.__words[1]) = 1024;
                *(_DWORD *)((char *)&buf[0].__r_.__value_.__r.__words[1] + 6) = 1926;
                WORD1(buf[0].__r_.__value_.__r.__words[2]) = 2080;
                *(std::string::size_type *)((char *)&buf[0].__r_.__value_.__r.__words[2] + 4) = (std::string::size_type)v430;
                _os_log_impl(&dword_1B5ED0000, v429, OS_LOG_TYPE_DEFAULT, "%25s:%-5d  <vp> Begin self-reinit (kVPProperty_MixStereoToMono [%s])", (uint8_t *)buf, 0x1Cu);
              }
            }
            v432 = (int *)*((_QWORD *)this + 1570);
            if (v432 && (*v555 || *((_BYTE *)this + 15898)))
            {
              if (VPLogScope(void)::once != -1)
                dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
              if (*((_BYTE *)this + 16296))
                v433 = "True";
              else
                v433 = "False";
              CALegacyLog::log(v432, 3, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/vpInitialize/vpProperties.cpp", 1926, "SetProperty", "Begin self-reinit (kVPProperty_MixStereoToMono [%s])", v433);
            }
            VoiceProcessorV2::ResetTimestampsAndInitializeVP(this, 0, v427, v428);
            if (VPLogScope(void)::once != -1)
              dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
            v434 = CALog::LogObjIfEnabled(3, VPLogScope(void)::scope);
            if (v434)
            {
              v435 = v434;
              if (os_log_type_enabled(v434, OS_LOG_TYPE_DEFAULT))
              {
                v436 = "True";
                v437 = *((unsigned __int8 *)this + 16296);
                *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)"vpProperties.cpp";
                LODWORD(buf[0].__r_.__value_.__l.__data_) = 136315650;
                if (!v437)
                  v436 = "False";
                WORD2(buf[0].__r_.__value_.__r.__words[1]) = 1024;
                *(_DWORD *)((char *)&buf[0].__r_.__value_.__r.__words[1] + 6) = 1928;
                WORD1(buf[0].__r_.__value_.__r.__words[2]) = 2080;
                *(std::string::size_type *)((char *)&buf[0].__r_.__value_.__r.__words[2] + 4) = (std::string::size_type)v436;
                _os_log_impl(&dword_1B5ED0000, v435, OS_LOG_TYPE_DEFAULT, "%25s:%-5d  <vp> End self-reinit (kVPProperty_MixStereoToMono [%s]", (uint8_t *)buf, 0x1Cu);
              }
            }
            v438 = (int *)*((_QWORD *)this + 1570);
            if (v438 && (*v555 || *((_BYTE *)this + 15898)))
            {
              if (VPLogScope(void)::once != -1)
                dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
              if (*((_BYTE *)this + 16296))
                v439 = "True";
              else
                v439 = "False";
              CALegacyLog::log(v438, 3, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/vpInitialize/vpProperties.cpp", 1928, "SetProperty", "End self-reinit (kVPProperty_MixStereoToMono [%s]", v439);
            }
          }
          goto LABEL_1318;
        }
        if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
          goto LABEL_1599;
        LODWORD(buf[0].__r_.__value_.__l.__data_) = 136315906;
        *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)"vpProperties.cpp";
        WORD2(buf[0].__r_.__value_.__r.__words[1]) = 1024;
        *(_DWORD *)((char *)&buf[0].__r_.__value_.__r.__words[1] + 6) = 1922;
        WORD1(buf[0].__r_.__value_.__r.__words[2]) = 2080;
        *(std::string::size_type *)((char *)&buf[0].__r_.__value_.__r.__words[2] + 4) = (std::string::size_type)"inDataSize == sizeof(UInt32)";
        WORD2(buf[1].__r_.__value_.__r.__words[0]) = 2080;
        *(std::string::size_type *)((char *)buf[1].__r_.__value_.__r.__words + 6) = (std::string::size_type)"BadPropertySize";
        v544 = MEMORY[0x1E0C81028];
      }
LABEL_1597:
      _os_log_impl(&dword_1B5ED0000, v544, OS_LOG_TYPE_ERROR, "%25s:%-5d  ca_require: %s %s", (uint8_t *)buf, 0x26u);
      goto LABEL_1598;
    }
    if (a4 != 4)
    {
      if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
        return 561211770;
      LODWORD(buf[0].__r_.__value_.__l.__data_) = 136315906;
      *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)"vpProperties.cpp";
      WORD2(buf[0].__r_.__value_.__r.__words[1]) = 1024;
      *(_DWORD *)((char *)&buf[0].__r_.__value_.__r.__words[1] + 6) = 857;
      WORD1(buf[0].__r_.__value_.__r.__words[2]) = 2080;
      *(std::string::size_type *)((char *)&buf[0].__r_.__value_.__r.__words[2] + 4) = (std::string::size_type)"inDataSize == sizeof(Float32)";
      WORD2(buf[1].__r_.__value_.__r.__words[0]) = 2080;
      *(std::string::size_type *)((char *)buf[1].__r_.__value_.__r.__words + 6) = (std::string::size_type)"BadPropertySize";
      v543 = MEMORY[0x1E0C81028];
      goto LABEL_1530;
    }
    result = 0;
    v36 = *(float *)theDict;
    v37 = (unsigned int *)((char *)this + 2248);
    v38 = COERCE_FLOAT(atomic_load((unsigned int *)this + 562));
    if (v36 <= 1.0)
    {
      v39 = v38;
      if (v36 >= 0.0 && v36 != v38)
      {
        v41 = *theDict;
        do
        {
          while (1)
          {
            *(float *)&v42 = COERCE_FLOAT(__ldaxr(v37));
            if (v42 == LODWORD(v39))
              break;
            __clrex();
            v39 = *(float *)&v42;
            sched_yield();
          }
        }
        while (__stlxr(v41, v37));
        if (VPLogScope(void)::once != -1)
          dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
        v71 = (_QWORD *)VPLogScope(void)::scope;
        if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(3, VPLogScope(void)::scope, 0))
        {
          v72 = (*v71 ? *v71 : MEMORY[0x1E0C81028]);
          if (os_log_type_enabled(v72, OS_LOG_TYPE_DEFAULT))
          {
            v73 = COERCE_FLOAT(atomic_load(v37));
            LODWORD(buf[0].__r_.__value_.__l.__data_) = 136315906;
            *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)"vpProperties.cpp";
            WORD2(buf[0].__r_.__value_.__r.__words[1]) = 1024;
            *(_DWORD *)((char *)&buf[0].__r_.__value_.__r.__words[1] + 6) = 868;
            WORD1(buf[0].__r_.__value_.__r.__words[2]) = 2048;
            *(double *)((char *)&buf[0].__r_.__value_.__r.__words[2] + 4) = v39;
            WORD2(buf[1].__r_.__value_.__r.__words[0]) = 2048;
            *(double *)((char *)buf[1].__r_.__value_.__r.__words + 6) = v73;
            _os_log_impl(&dword_1B5ED0000, v72, OS_LOG_TYPE_DEFAULT, "%25s:%-5d  <vp> setproperty: media chat old volume:[%f], new volume:[%f]", (uint8_t *)buf, 0x26u);
          }
        }
        v74 = (int *)*((_QWORD *)this + 1570);
        if (v74 && (*v9 || *((_BYTE *)this + 15898)))
        {
          if (VPLogScope(void)::once != -1)
            dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
          v75 = VPLogScope(void)::scope;
          v76 = COERCE_FLOAT(atomic_load(v37));
          CALegacyLog::log(v74, 3, v75, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/vpInitialize/vpProperties.cpp", 868, "SetProperty", "setproperty: media chat old volume:[%f], new volume:[%f]", v39, v76);
        }
        if (*v9)
          VoiceProcessorV2::PListWriteSetPropertyParameters(this, 1937141091);
        return 0;
      }
    }
  }
  return result;
}

void sub_1B648D3A4()
{
  __cxa_end_catch();
  JUMPOUT(0x1B648CEF4);
}

void sub_1B648D3BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *__p,uint64_t a30,uint64_t a31,char a32)
{
  if (a2)
  {
    if (a32)
    {
      if (__p)
        operator delete(__p);
    }
    JUMPOUT(0x1B648D410);
  }
  _Unwind_Resume(a1);
}

void sub_1B648D408(_Unwind_Exception *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  _Unwind_Resume(a1);
}

_DWORD *std::vector<std::tuple<int,int,int>>::vector[abi:ne180100](_DWORD *result, unint64_t a2)
{
  _DWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  VoiceProcessorV2::SetProperty(unsigned int,void const*,unsigned int)::supportedAUs = 0;
  qword_1EF136DD8 = 0;
  qword_1EF136DE0 = 0;
  if (a2)
  {
    if (a2 >= 0x1555555555555556)
      std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
    v2 = result;
    v3 = 3 * a2;
    v4 = 12 * a2;
    result = operator new(12 * a2);
    VoiceProcessorV2::SetProperty(unsigned int,void const*,unsigned int)::supportedAUs = (uint64_t)result;
    qword_1EF136DD8 = (uint64_t)result;
    qword_1EF136DE0 = (uint64_t)&result[v3];
    do
    {
      v5 = *(_QWORD *)v2;
      result[2] = v2[2];
      *(_QWORD *)result = v5;
      result += 3;
      v2 += 3;
      v4 -= 12;
    }
    while (v4);
    qword_1EF136DD8 = (uint64_t)result;
  }
  return result;
}

void sub_1B648D540(_Unwind_Exception *exception_object)
{
  if (VoiceProcessorV2::SetProperty(unsigned int,void const*,unsigned int)::supportedAUs)
  {
    qword_1EF136DD8 = VoiceProcessorV2::SetProperty(unsigned int,void const*,unsigned int)::supportedAUs;
    operator delete((void *)VoiceProcessorV2::SetProperty(unsigned int,void const*,unsigned int)::supportedAUs);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::vector<std::tuple<int,int,int>>::~vector[abi:ne180100](uint64_t a1)
{
  void *v2;

  v2 = *(void **)a1;
  if (v2)
  {
    *(_QWORD *)(a1 + 8) = v2;
    operator delete(v2);
  }
  return a1;
}

void AudioIssueDetectorClientSetUplinkMute(uint64_t a1)
{
  if (AudioIssueDetectorLibraryLoader(void)::once != -1)
    dispatch_once(&AudioIssueDetectorLibraryLoader(void)::once, &__block_literal_global_167);
  if (AudioIssueDetectorLibraryLoader(void)::libSym)
    AudioIssueDetectorLibraryLoader(void)::libSym(a1);
}

uint64_t localPLLogRegisteredEvent(uint64_t a1)
{
  uint64_t (*v2)(uint64_t, const __CFString *, uint64_t, _QWORD);
  _Unwind_Exception *v4;
  _QWORD v5[5];
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  void *v9;

  v6 = 0;
  v7 = &v6;
  v8 = 0x2000000000;
  v2 = (uint64_t (*)(uint64_t, const __CFString *, uint64_t, _QWORD))getPLLogRegisteredEventSymbolLoc(void)::ptr;
  v9 = getPLLogRegisteredEventSymbolLoc(void)::ptr;
  if (!getPLLogRegisteredEventSymbolLoc(void)::ptr)
  {
    v5[0] = MEMORY[0x1E0C809B0];
    v5[1] = 0x40000000;
    v5[2] = ___ZL32getPLLogRegisteredEventSymbolLocv_block_invoke;
    v5[3] = &unk_1E69E0CB0;
    v5[4] = &v6;
    ___ZL32getPLLogRegisteredEventSymbolLocv_block_invoke((uint64_t)v5);
    v2 = (uint64_t (*)(uint64_t, const __CFString *, uint64_t, _QWORD))v7[3];
  }
  _Block_object_dispose(&v6, 8);
  if (!v2)
  {
    dlerror();
    v4 = (_Unwind_Exception *)abort_report_np();
    _Block_object_dispose(&v6, 8);
    _Unwind_Resume(v4);
  }
  return v2(28, CFSTR("MutedTalkerDetection"), a1, 0);
}

const void **applesauce::CF::ArrayRef::operator=(const void **a1, CFTypeRef cf)
{
  const void *v3;

  v3 = *a1;
  *a1 = cf;
  if (cf)
    CFRetain(cf);
  if (v3)
    CFRelease(v3);
  return a1;
}

void *CADeprecated::CAAutoFree<long long>::allocBytes(void **a1, size_t size)
{
  void *v4;
  void *result;
  std::bad_alloc *exception;
  std::bad_alloc *v7;

  v4 = *a1;
  if (v4)
  {
    free(v4);
    *a1 = 0;
  }
  result = malloc_type_malloc(size, 0x7C51E058uLL);
  if (!result)
  {
    exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
    v7 = std::bad_alloc::bad_alloc(exception);
  }
  *a1 = result;
  return result;
}

_QWORD *std::vector<long long>::vector(_QWORD *a1, unint64_t a2, _QWORD *a3)
{
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<std::tuple<unsigned int,float>>::__vallocate[abi:ne180100](a1, a2);
    v6 = (_QWORD *)a1[1];
    v7 = &v6[a2];
    v8 = 8 * a2;
    do
    {
      *v6++ = *a3;
      v8 -= 8;
    }
    while (v8);
    a1[1] = v7;
  }
  return a1;
}

void sub_1B648D7EC(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void AudioIssueDetectorClientUpdateReportingSessions(uint64_t a1, uint64_t a2)
{
  if (AudioIssueDetectorLibraryLoader(void)::once != -1)
    dispatch_once(&AudioIssueDetectorLibraryLoader(void)::once, &__block_literal_global_167);
  if (AudioIssueDetectorLibraryLoader(void)::libSym)
    AudioIssueDetectorLibraryLoader(void)::libSym(a1, a2);
}

uint64_t AudioStatisticsCopyConfiguration(uint64_t a1)
{
  if (AudioStatisticsLibraryLoader(void)::once != -1)
    dispatch_once(&AudioStatisticsLibraryLoader(void)::once, &__block_literal_global_192);
  if (AudioStatisticsLibraryLoader(void)::libSym)
    return AudioStatisticsLibraryLoader(void)::libSym(a1);
  else
    return 0;
}

void **_ZN2vp5BlockIU13block_pointerFv28AUVoiceIOSpeechActivityEventEECI1NS0_IS2_EEES3_(void **a1, void *aBlock)
{
  *a1 = 0;
  if (aBlock)
    *a1 = _Block_copy(aBlock);
  return a1;
}

const void **vp::Block<void({block_pointer})(AUVoiceIOSpeechActivityEvent)>::operator=(const void **a1, const void **a2)
{
  const void *v4;

  v4 = *a1;
  if (v4)
    _Block_release(v4);
  *a1 = 0;
  if (*a2)
  {
    *a1 = *a2;
    *a2 = 0;
  }
  return a1;
}

os_log_t ___Z19EndpointVADLogScopev_block_invoke()
{
  _QWORD *v0;
  os_log_t result;

  v0 = (_QWORD *)operator new();
  v0[1] = 0;
  result = os_log_create("com.apple.coreaudio", "EndpointVAD");
  *v0 = result;
  EndpointVADLogScope(void)::scope = (uint64_t)v0;
  return result;
}

os_log_t ___Z20EndpointVAD2LogScopev_block_invoke()
{
  _QWORD *v0;
  os_log_t result;

  v0 = (_QWORD *)operator new();
  v0[1] = 0;
  result = os_log_create("com.apple.coreaudio", "EndpointVAD2");
  *v0 = result;
  EndpointVAD2LogScope(void)::scope = (uint64_t)v0;
  return result;
}

os_log_t ___Z20EndpointVAD3LogScopev_block_invoke()
{
  _QWORD *v0;
  os_log_t result;

  v0 = (_QWORD *)operator new();
  v0[1] = 0;
  result = os_log_create("com.apple.coreaudio", "EndpointVAD3");
  *v0 = result;
  EndpointVAD3LogScope(void)::scope = (uint64_t)v0;
  return result;
}

BOOL clsp::readPLKey(clsp *this, const __CFString *a2, const __CFString *a3, float *a4)
{
  NSObject **v6;
  NSObject *v7;
  NSObject **v8;
  NSObject *v9;
  _BOOL8 result;
  const char *CStringPtr;
  const char *v12;
  float v13;
  uint8_t buf[4];
  const char *v15;
  __int16 v16;
  int v17;
  __int16 v18;
  const char *v19;
  __int16 v20;
  double v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  v13 = 0.0;
  if (CACFDictionary::GetFloat32((uint64_t)this, a2, &v13))
  {
    *(float *)&a3->isa = v13;
    v6 = (NSObject **)spp3Subsystem();
    if (v6)
    {
      v7 = *v6;
      if (!*v6)
        return 0;
    }
    else
    {
      v7 = MEMORY[0x1E0C81028];
    }
    result = os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG);
    if (!result)
      return result;
    CStringPtr = CFStringGetCStringPtr(a2, 0x8000100u);
    *(_DWORD *)buf = 136315906;
    v15 = "CLSPKernel_v4.cpp";
    v16 = 1024;
    v17 = 684;
    v18 = 2080;
    v19 = CStringPtr;
    v20 = 2048;
    v21 = v13;
    _os_log_impl(&dword_1B5ED0000, v7, OS_LOG_TYPE_DEBUG, "%25s:%-5d Read plist key: %s = %f", buf, 0x26u);
    return 0;
  }
  v8 = (NSObject **)spp3Subsystem();
  if (!v8)
  {
    v9 = MEMORY[0x1E0C81028];
LABEL_13:
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      v12 = CFStringGetCStringPtr(a2, 0x8000100u);
      *(_DWORD *)buf = 136315650;
      v15 = "CLSPKernel_v4.cpp";
      v16 = 1024;
      v17 = 688;
      v18 = 2080;
      v19 = v12;
      _os_log_impl(&dword_1B5ED0000, v9, OS_LOG_TYPE_ERROR, "%25s:%-5d Cannot read plist key: %s", buf, 0x1Cu);
    }
    return 1;
  }
  v9 = *v8;
  if (*v8)
    goto LABEL_13;
  return 1;
}

void clsp::ClosedLoopParameters::Create(clsp::ClosedLoopParameters *this, clsp **a2)
{
  uint64_t v4;
  float *v5;
  float *v6;
  float *v7;
  float *v8;
  float *v9;
  _BOOL4 v10;
  float *v11;
  _BOOL4 v12;
  float *v13;
  _BOOL4 v14;
  float *v15;
  _BOOL4 v16;
  float *v17;
  float *v18;
  _BOOL4 v19;
  float *v20;
  _BOOL4 v21;
  float *v22;
  float *v23;
  int v24;
  uint64_t v25;
  float *v26;
  float *v27;
  float *v28;
  float *v29;
  float *v30;
  float *v31;
  float *v32;
  float *v33;
  float *v34;
  float *v35;
  float *v36;
  float *v37;
  float *v38;
  float *v39;
  float *v40;
  float *v41;
  float *v42;
  _BOOL4 v43;
  float *v44;
  _BOOL4 v45;
  float *v46;
  _BOOL4 v47;
  float *v48;
  _BOOL4 v49;
  float *v50;
  _BOOL4 v51;
  float *v52;
  _BOOL4 v53;
  float *v54;
  CACFArray *v55;
  NSObject **v56;
  NSObject *v57;
  unsigned int v58;
  NSObject **v59;
  NSObject *v60;
  const char *v61;
  uint64_t *v62;
  uint64_t v63;
  const char *CStringPtr;
  CACFDictionary *v65;
  NSObject **v66;
  NSObject *v67;
  NSObject **v68;
  NSObject *v69;
  NSObject **v70;
  const char *v71;
  const char *v72;
  NSObject *v73;
  os_log_type_t v74;
  uint32_t v75;
  _BOOL4 v76;
  _BOOL4 v77;
  _BOOL4 v78;
  _BOOL4 v79;
  _BOOL4 v80;
  _BOOL4 v81;
  _BOOL4 v82;
  _BOOL4 v83;
  _BOOL4 v84;
  _BOOL4 v85;
  _BOOL4 v86;
  _BOOL4 v87;
  _BOOL4 v88;
  _BOOL4 v89;
  clsp::ClosedLoopParameters *v90;
  _BOOL4 v91;
  unsigned int v92;
  _BOOL4 v93;
  _BOOL4 v94;
  _BOOL4 v95;
  _BOOL4 v96;
  _BOOL4 PLKey;
  uint64_t v98;
  __CFString v99;
  uint64_t v100;

  v100 = *MEMORY[0x1E0C80C00];
  v4 = operator new();
  *(_OWORD *)v4 = 0u;
  *(_OWORD *)(v4 + 16) = 0u;
  *(_OWORD *)(v4 + 48) = 0u;
  *(_OWORD *)(v4 + 32) = 0u;
  v90 = this;
  *(_QWORD *)this = v4;
  PLKey = clsp::readPLKey(*a2, CFSTR("CalTempRangeMax"), (const __CFString *)(v4 + 32), v5);
  v95 = clsp::readPLKey(*a2, CFSTR("CalTempRangeMin"), (const __CFString *)(v4 + 28), v6);
  v93 = clsp::readPLKey(*a2, CFSTR("RebRangeMax"), (const __CFString *)(v4 + 24), v7);
  v91 = clsp::readPLKey(*a2, CFSTR("RebRangeMin"), (const __CFString *)(v4 + 20), v8);
  v10 = clsp::readPLKey(*a2, CFSTR("a_t_20C"), (const __CFString *)(v4 + 12), v9);
  v12 = clsp::readPLKey(*a2, CFSTR("a_t_35C"), (const __CFString *)(v4 + 16), v11);
  v14 = clsp::readPLKey(*a2, CFSTR("IMONScale"), (const __CFString *)(v4 + 4), v13);
  v16 = clsp::readPLKey(*a2, CFSTR("VMONScale"), (const __CFString *)v4, v15);
  LODWORD(this) = clsp::readPLKey(*a2, CFSTR("RdcScale"), (const __CFString *)(v4 + 8), v17);
  v19 = clsp::readPLKey(*a2, CFSTR("TlimAdjCap"), (const __CFString *)(v4 + 36), v18);
  v21 = clsp::readPLKey(*a2, CFSTR("VPwrThres"), (const __CFString *)(v4 + 40), v20);
  v24 = v95
      + PLKey
      + v93
      + v91
      + v10
      + v12
      + v14
      + v16
      + (_DWORD)this
      + v19
      + v21
      + clsp::readPLKey(*a2, CFSTR("IPwrThres"), (const __CFString *)(v4 + 44), v22);
  if (!CFDictionaryContainsKey(*a2, CFSTR("DisplacementProtectionType"))
    || (LODWORD(v99.isa) = 0,
        clsp::readPLKey(*a2, CFSTR("DisplacementProtectionType"), &v99, v23),
        *(float *)&v99.isa > 4)
    || ((1 << *(float *)&v99.isa) & 0x16) == 0)
  {
    std::unique_ptr<clsp::ConvoyParameters>::reset[abi:ne180100]((uint64_t *)(v4 + 48), 0);
    goto LABEL_44;
  }
  v92 = *(float *)&v99.isa;
  v25 = operator new();
  *(_QWORD *)(v25 + 96) = 0;
  *(_OWORD *)(v25 + 64) = 0u;
  *(_OWORD *)(v25 + 80) = 0u;
  *(_OWORD *)(v25 + 32) = 0u;
  *(_OWORD *)(v25 + 48) = 0u;
  *(_OWORD *)v25 = 0u;
  *(_OWORD *)(v25 + 16) = 0u;
  v98 = v25;
  v96 = clsp::readPLKey(*a2, CFSTR("CapScale"), (const __CFString *)v25, v26);
  v94 = clsp::readPLKey(*a2, CFSTR("ConvoyMinExcursion"), (const __CFString *)(v25 + 4), v27);
  v89 = clsp::readPLKey(*a2, CFSTR("ConvoyMaxExcursion"), (const __CFString *)(v25 + 8), v28);
  v88 = clsp::readPLKey(*a2, CFSTR("ConvoyDelay_ms"), (const __CFString *)(v25 + 12), v29);
  v87 = clsp::readPLKey(*a2, CFSTR("ConvoyPeakFinderWindowTime_ms"), (const __CFString *)(v25 + 16), v30);
  v86 = clsp::readPLKey(*a2, CFSTR("ConvoyPeakFinderThresholdUpper"), (const __CFString *)(v25 + 20), v31);
  v85 = clsp::readPLKey(*a2, CFSTR("ConvoyPeakFinderThresholdLower"), (const __CFString *)(v25 + 24), v32);
  v84 = clsp::readPLKey(*a2, CFSTR("ConvoyRelXLimUpper"), (const __CFString *)(v25 + 28), v33);
  v83 = clsp::readPLKey(*a2, CFSTR("ConvoyRelXLimLower"), (const __CFString *)(v25 + 36), v34);
  v82 = clsp::readPLKey(*a2, CFSTR("ConvoyXLimIncrement_dB"), (const __CFString *)(v25 + 40), v35);
  v81 = clsp::readPLKey(*a2, CFSTR("ConvoyNormFactorAttack"), (const __CFString *)(v25 + 44), v36);
  v80 = clsp::readPLKey(*a2, CFSTR("ConvoyNormFactorRelease"), (const __CFString *)(v25 + 48), v37);
  v79 = clsp::readPLKey(*a2, CFSTR("ConvoyNormFactorCapUpper"), (const __CFString *)(v25 + 52), v38);
  v78 = clsp::readPLKey(*a2, CFSTR("ConvoyNormFactorCapLower"), (const __CFString *)(v25 + 56), v39);
  v77 = clsp::readPLKey(*a2, CFSTR("ConvoyPeakRatioPosBlockThreshold"), (const __CFString *)(v25 + 60), v40);
  v76 = clsp::readPLKey(*a2, CFSTR("ConvoyPeakRatioNegBlockThreshold"), (const __CFString *)(v25 + 64), v41);
  v43 = clsp::readPLKey(*a2, CFSTR("ConvoyLimAttack"), (const __CFString *)(v25 + 68), v42);
  v45 = clsp::readPLKey(*a2, CFSTR("ConvoyLimRelease"), (const __CFString *)(v25 + 72), v44);
  v47 = clsp::readPLKey(*a2, CFSTR("ConvoyPeakDetectorAtkTime"), (const __CFString *)(v25 + 76), v46);
  v49 = clsp::readPLKey(*a2, CFSTR("ConvoyPeakDetectorRelTime"), (const __CFString *)(v25 + 80), v48);
  v51 = clsp::readPLKey(*a2, CFSTR("ConvoyPeakRatiosInWindowCountThreshold"), (const __CFString *)(v25 + 84), v50);
  v53 = clsp::readPLKey(*a2, CFSTR("ConvoyNormFactorThreshold"), (const __CFString *)(v25 + 88), v52);
  v24 += v96
       + v94
       + v89
       + v88
       + v87
       + v86
       + v85
       + v84
       + v83
       + v82
       + v81
       + v80
       + v79
       + v78
       + v77
       + v76
       + v43
       + v45
       + v47
       + v49
       + v51
       + v53
       + clsp::readPLKey(*a2, CFSTR("ConvoyBufferDirtyCountThreshold_ms"), (const __CFString *)(v25 + 92), v54);
  if (!CFDictionaryContainsKey(*a2, CFSTR("ConvoyFilterCoeffs")))
  {
    v59 = (NSObject **)spp3Subsystem();
    ++v24;
    v58 = v92;
    if (v59)
    {
      v60 = *v59;
      if (!*v59)
        goto LABEL_20;
    }
    else
    {
      v60 = MEMORY[0x1E0C81028];
    }
    if (os_log_type_enabled(v60, OS_LOG_TYPE_ERROR))
    {
      CStringPtr = CFStringGetCStringPtr(CFSTR("ConvoyFilterCoeffs"), 0x8000100u);
      HIDWORD(v99.isa) = 136315650;
      v99.info = (uint64_t)"CLSPKernel_v4.cpp";
      LOWORD(v99.data) = 1024;
      *(_DWORD *)((char *)&v99.data + 2) = 750;
      HIWORD(v99.data) = 2080;
      v99.length = (uint64_t)CStringPtr;
      _os_log_impl(&dword_1B5ED0000, v60, OS_LOG_TYPE_ERROR, "%25s:%-5d Cannot read plist key: %s", (uint8_t *)&v99.isa + 4, 0x1Cu);
    }
    goto LABEL_20;
  }
  v55 = (CACFArray *)operator new();
  *(_QWORD *)v55 = CFArrayCreateMutable(0, 0, MEMORY[0x1E0C9B378]);
  *((_WORD *)v55 + 4) = 257;
  std::unique_ptr<CACFArray>::reset[abi:ne180100]((CACFArray **)(v25 + 96), v55);
  CACFDictionary::GetCACFArray(a2, CFSTR("ConvoyFilterCoeffs"), *(CACFArray **)(v25 + 96));
  v56 = (NSObject **)spp3Subsystem();
  if (v56)
  {
    v57 = *v56;
    v58 = v92;
    if (!*v56)
      goto LABEL_15;
  }
  else
  {
    v57 = MEMORY[0x1E0C81028];
    v58 = v92;
  }
  if (os_log_type_enabled(v57, OS_LOG_TYPE_DEBUG))
  {
    v61 = CFStringGetCStringPtr(CFSTR("ConvoyFilterCoeffs"), 0x8000100u);
    HIDWORD(v99.isa) = 136315650;
    v99.info = (uint64_t)"CLSPKernel_v4.cpp";
    LOWORD(v99.data) = 1024;
    *(_DWORD *)((char *)&v99.data + 2) = 747;
    HIWORD(v99.data) = 2080;
    v99.length = (uint64_t)v61;
    _os_log_impl(&dword_1B5ED0000, v57, OS_LOG_TYPE_DEBUG, "%25s:%-5d Read plist key: %s", (uint8_t *)&v99.isa + 4, 0x1Cu);
  }
LABEL_15:
  if (!v24)
  {
    v62 = (uint64_t *)(v4 + 48);
    v98 = 0;
    v63 = v25;
    goto LABEL_21;
  }
LABEL_20:
  v62 = (uint64_t *)(v4 + 48);
  v63 = 0;
LABEL_21:
  std::unique_ptr<clsp::ConvoyParameters>::reset[abi:ne180100](v62, v63);
  std::unique_ptr<clsp::ConvoyParameters>::reset[abi:ne180100](&v98, 0);
  if (v58 != 2)
    goto LABEL_44;
  if (!CFDictionaryContainsKey(*a2, CFSTR("ParameterUpdaterConfig")))
  {
    v68 = (NSObject **)spp3Subsystem();
    ++v24;
    if (v68)
    {
      v69 = *v68;
      if (!*v68)
        goto LABEL_44;
    }
    else
    {
      v69 = MEMORY[0x1E0C81028];
    }
    if (!os_log_type_enabled(v69, OS_LOG_TYPE_ERROR))
      goto LABEL_44;
    HIDWORD(v99.isa) = 136315394;
    v99.info = (uint64_t)"CLSPKernel_v4.cpp";
    LOWORD(v99.data) = 1024;
    *(_DWORD *)((char *)&v99.data + 2) = 777;
    v72 = "%25s:%-5d Requested ConvoyAdaptiveDisplacement but ParameterUpdaterConfig key is missing from spp3 plist";
LABEL_42:
    v73 = v69;
    v74 = OS_LOG_TYPE_ERROR;
    v75 = 18;
    goto LABEL_43;
  }
  v65 = (CACFDictionary *)operator new();
  *(_QWORD *)v65 = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  *((_WORD *)v65 + 4) = 257;
  std::unique_ptr<CACFDictionary>::reset[abi:ne180100]((CACFDictionary **)(v4 + 56), v65);
  CACFDictionary::GetCACFDictionary(a2, CFSTR("ParameterUpdaterConfig"), *(CACFDictionary **)(v4 + 56));
  if (**(_QWORD **)(v4 + 56))
  {
    v66 = (NSObject **)spp3Subsystem();
    if (v66)
    {
      v67 = *v66;
      if (!*v66)
        goto LABEL_44;
    }
    else
    {
      v67 = MEMORY[0x1E0C81028];
    }
    if (!os_log_type_enabled(v67, OS_LOG_TYPE_DEBUG))
      goto LABEL_44;
    v71 = CFStringGetCStringPtr(CFSTR("ParameterUpdaterConfig"), 0x8000100u);
    HIDWORD(v99.isa) = 136315650;
    v99.info = (uint64_t)"CLSPKernel_v4.cpp";
    LOWORD(v99.data) = 1024;
    *(_DWORD *)((char *)&v99.data + 2) = 768;
    HIWORD(v99.data) = 2080;
    v99.length = (uint64_t)v71;
    v72 = "%25s:%-5d Read plist key: %s";
    v73 = v67;
    v74 = OS_LOG_TYPE_DEBUG;
    v75 = 28;
LABEL_43:
    _os_log_impl(&dword_1B5ED0000, v73, v74, v72, (uint8_t *)&v99.isa + 4, v75);
    goto LABEL_44;
  }
  v70 = (NSObject **)spp3Subsystem();
  ++v24;
  if (!v70)
  {
    v69 = MEMORY[0x1E0C81028];
    goto LABEL_40;
  }
  v69 = *v70;
  if (*v70)
  {
LABEL_40:
    if (!os_log_type_enabled(v69, OS_LOG_TYPE_ERROR))
      goto LABEL_44;
    HIDWORD(v99.isa) = 136315394;
    v99.info = (uint64_t)"CLSPKernel_v4.cpp";
    LOWORD(v99.data) = 1024;
    *(_DWORD *)((char *)&v99.data + 2) = 772;
    v72 = "%25s:%-5d Requested ConvoyAdaptiveDisplacement but ParameterUpdaterConfig is not valid";
    goto LABEL_42;
  }
LABEL_44:
  if (v24)
  {
    *(_QWORD *)v90 = 0;
    std::default_delete<clsp::ClosedLoopParameters>::operator()[abi:ne180100](v4);
  }
}

void sub_1B648E98C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, _QWORD *a16)
{
  uint64_t v16;

  *a16 = 0;
  std::default_delete<clsp::ClosedLoopParameters>::operator()[abi:ne180100](v16);
}

void sub_1B648EA28()
{
  _Unwind_Exception *v0;

  _Unwind_Resume(v0);
}

_QWORD *clsp::ClosedLoopParameters::dump(uint64_t a1, _QWORD *a2)
{
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *v18;
  _QWORD *v19;
  _QWORD *v20;
  _QWORD *v21;
  _QWORD *v22;
  _QWORD *v23;
  _QWORD *v24;
  _QWORD *v25;
  _QWORD *v26;
  _QWORD *v27;
  _QWORD *v28;
  char v30;
  char v31;
  char v32;

  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"VMONScale = ", 12);
  v4 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"\nIMONScale = ", 13);
  v5 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"\nRdcScale = ", 12);
  v6 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"\nTempCo20 = ", 12);
  v7 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"\nTempCo35 = ", 12);
  v8 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"\nRebMin = ", 10);
  v9 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"\nRebMax = ", 10);
  v10 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"\nCalTempMin = ", 14);
  v11 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"\nCalTempMax = ", 14);
  v12 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)"\nTlimAdjCap = ", 14);
  v13 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"\nVPwrThres = ", 13);
  v14 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)"\nIPwrThres = ", 13);
  v15 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"\nParameterUpdaterConfig present = ", 34);
  v16 = (_QWORD *)std::ostream::operator<<();
  v30 = 10;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)&v30, 1);
  if (*(_QWORD *)(a1 + 48))
  {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"capScale = ", 11);
    v17 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)"\nminExcursion = ", 16);
    v18 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)"\nmaxExcursion = ", 16);
    v19 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)"\ndelay ms = ", 12);
    v20 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)"\npeakFinderWindowTime ms = ", 27);
    v21 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)"\nposPeakFinderThreshold = ", 26);
    v22 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)"\nnegPeakFinderThreshold = ", 26);
    v23 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)"\nxLimUpper = ", 13);
    v24 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)"\nxLimLower = ", 13);
    v25 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)"\nxLimIncrement_dB = ", 20);
    v26 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, (uint64_t)"\nnormFactorAtk = ", 17);
    v27 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)"\nnormFactorRel = ", 17);
    v28 = (_QWORD *)std::ostream::operator<<();
    v32 = 10;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, (uint64_t)&v32, 1);
  }
  v31 = 10;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)&v31, 1);
  return a2;
}

void PMWF_FAST_GS_vDSP::PMWF_FAST_GS_vDSP(PMWF_FAST_GS_vDSP *this, unsigned int a2, int a3, float a4, float a5, float a6, float a7, float a8, float a9, float a10, float a11, int a12, int a13, unsigned int a14, int a15, char a16, float a17, float a18, float a19, float a20,float a21,float a22,unsigned int a23)
{
  const float *v25;
  _DWORD *v26;
  float v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t *v56;
  uint64_t v57;
  uint64_t *v58;
  uint64_t *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t *v62;
  uint64_t v63;
  _QWORD *v64;
  uint64_t v65;
  uint64_t v66;
  _QWORD *v67;
  uint64_t v68;
  uint64_t v69;
  unsigned int v70;
  int v71;
  uint64_t v72;
  uint64_t v73;
  _QWORD *v74;
  void *v75;
  void *v76;
  void *v77;
  void *v78;
  float v79;
  void **v80[2];

  v79 = a8;
  *(_DWORD *)this = a2;
  *((_DWORD *)this + 1) = a3;
  *((float *)this + 2) = a4;
  *((float *)this + 3) = a5;
  *((float *)this + 4) = a6;
  *((float *)this + 5) = a7;
  *((float *)this + 6) = a8;
  *((float *)this + 7) = a9;
  *((float *)this + 8) = a10;
  *((float *)this + 9) = a11;
  *((_DWORD *)this + 10) = 629145600;
  *((float *)this + 11) = a17;
  *((_DWORD *)this + 12) = a2;
  *((_DWORD *)this + 13) = a3;
  *((_DWORD *)this + 14) = 2 * a2;
  *((_DWORD *)this + 15) = a3 * a2;
  *((_DWORD *)this + 16) = 2 * a2 * a3;
  *((_DWORD *)this + 17) = 2 * a2 * a3 * a2;
  *((_QWORD *)this + 9) = 0x3F80000000000000;
  *((_DWORD *)this + 20) = -1082130432;
  v25 = (const float *)((char *)this + 80);
  *((float *)this + 21) = (float)a2;
  v26 = (_DWORD *)((char *)this + 84);
  *((float *)this + 22) = -(float)a2;
  *((float *)this + 23) = (float)(1.0 - a9) / a9;
  *((float *)this + 24) = 1.0 - a4;
  *((float *)this + 25) = 1.0 - a5;
  *((float *)this + 26) = 1.0 - a6;
  *((_DWORD *)this + 27) = a12;
  *((_DWORD *)this + 28) = a14;
  *((_DWORD *)this + 29) = a13;
  *(_OWORD *)((char *)this + 120) = *(_OWORD *)&a18;
  *((_DWORD *)this + 34) = a15;
  *((_BYTE *)this + 140) = a16;
  *((float *)this + 36) = a22;
  *((_DWORD *)this + 37) = 0;
  *((float *)this + 38) = 1.0 / a4;
  *((float *)this + 39) = 1.0 / (float)(1.0 - a4);
  v27 = (float)(a3 - 1) + (float)(a3 - 1);
  *((float *)this + 40) = v27;
  *((float *)this + 41) = 1.0 / v27;
  *((_DWORD *)this + 42) = a2;
  LOBYTE(v77) = 0;
  std::vector<BOOL>::vector((_QWORD *)this + 22, 2 * a2, (unsigned __int8 *)&v77);
  v28 = *((unsigned int *)this + 12);
  std::vector<float>::vector(&v77, *((unsigned int *)this + 13), &v79);
  std::vector<std::vector<float>>::vector((_QWORD *)this + 25, v28, (uint64_t)&v77);
  if (v77)
  {
    v78 = v77;
    operator delete(v77);
  }
  v29 = *((unsigned int *)this + 12);
  std::vector<float>::vector(&v77, *((unsigned int *)this + 13), &v79);
  std::vector<std::vector<float>>::vector((_QWORD *)this + 28, v29, (uint64_t)&v77);
  if (v77)
  {
    v78 = v77;
    operator delete(v77);
  }
  v30 = *((unsigned int *)this + 14);
  v31 = *((unsigned int *)this + 12);
  std::vector<float>::vector(&v75, *((unsigned int *)this + 13));
  std::vector<std::vector<float>>::vector(&v77, v30, (uint64_t)&v75);
  std::vector<std::vector<std::vector<float>>>::vector((_QWORD *)this + 31, v31, (uint64_t *)&v77);
  v80[0] = &v77;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](v80);
  if (v75)
  {
    v76 = v75;
    operator delete(v75);
  }
  v32 = *((unsigned int *)this + 14);
  v33 = *((unsigned int *)this + 12);
  std::vector<float>::vector(&v75, *((unsigned int *)this + 13));
  std::vector<std::vector<float>>::vector(&v77, v32, (uint64_t)&v75);
  std::vector<std::vector<std::vector<float>>>::vector((_QWORD *)this + 34, v33, (uint64_t *)&v77);
  v80[0] = &v77;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](v80);
  if (v75)
  {
    v76 = v75;
    operator delete(v75);
  }
  v34 = *((unsigned int *)this + 12);
  std::vector<DSPSplitComplex>::vector(&v77, *((unsigned int *)this + 14));
  std::vector<std::vector<DSPSplitComplex>>::vector((_QWORD *)this + 37, v34, (uint64_t)&v77);
  if (v77)
  {
    v78 = v77;
    operator delete(v77);
  }
  v35 = *((unsigned int *)this + 14);
  v36 = *((unsigned int *)this + 12);
  std::vector<float>::vector(&v75, *((unsigned int *)this + 13));
  std::vector<std::vector<float>>::vector(&v77, v35, (uint64_t)&v75);
  std::vector<std::vector<std::vector<float>>>::vector((_QWORD *)this + 40, v36, (uint64_t *)&v77);
  v80[0] = &v77;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](v80);
  if (v75)
  {
    v76 = v75;
    operator delete(v75);
  }
  v37 = *((unsigned int *)this + 14);
  v38 = *((unsigned int *)this + 12);
  std::vector<float>::vector(&v75, *((unsigned int *)this + 13));
  std::vector<std::vector<float>>::vector(&v77, v37, (uint64_t)&v75);
  std::vector<std::vector<std::vector<float>>>::vector((_QWORD *)this + 43, v38, (uint64_t *)&v77);
  v80[0] = &v77;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](v80);
  if (v75)
  {
    v76 = v75;
    operator delete(v75);
  }
  v39 = *((unsigned int *)this + 12);
  std::vector<DSPSplitComplex>::vector(&v77, *((unsigned int *)this + 14));
  std::vector<std::vector<DSPSplitComplex>>::vector((_QWORD *)this + 46, v39, (uint64_t)&v77);
  if (v77)
  {
    v78 = v77;
    operator delete(v77);
  }
  std::vector<float>::vector((_QWORD *)this + 49, *((unsigned int *)this + 13), v26);
  v40 = *((unsigned int *)this + 13);
  LODWORD(v77) = 1056964608;
  std::vector<float>::vector((_QWORD *)this + 52, v40, &v77);
  *((_DWORD *)this + 110) = 0;
  std::vector<float>::vector((_QWORD *)this + 56, (2 * *((_DWORD *)this + 15)));
  std::vector<float>::vector((_QWORD *)this + 59, *((unsigned int *)this + 16));
  std::vector<float>::vector((_QWORD *)this + 62, *((unsigned int *)this + 16));
  std::vector<DSPSplitComplex>::vector((_QWORD *)this + 65, *((unsigned int *)this + 14));
  std::vector<float>::vector((_QWORD *)this + 68, *((unsigned int *)this + 13));
  std::vector<float>::vector((_QWORD *)this + 71, *((unsigned int *)this + 13));
  std::vector<float>::vector((_QWORD *)this + 74, *((unsigned int *)this + 13));
  std::vector<float>::vector((_QWORD *)this + 77, *((unsigned int *)this + 13));
  std::vector<float>::vector((_QWORD *)this + 80, *((unsigned int *)this + 13));
  std::vector<float>::vector((_QWORD *)this + 83, *((unsigned int *)this + 13));
  std::vector<float>::vector((_QWORD *)this + 86, *((unsigned int *)this + 13));
  std::vector<float>::vector((_QWORD *)this + 89, *((unsigned int *)this + 13));
  std::vector<float>::vector((_QWORD *)this + 92, *((unsigned int *)this + 13));
  std::vector<float>::vector((_QWORD *)this + 95, *((unsigned int *)this + 13));
  std::vector<float>::vector((_QWORD *)this + 98, *((unsigned int *)this + 13));
  std::vector<float>::vector((_QWORD *)this + 101, *((unsigned int *)this + 13));
  std::vector<float>::vector((_QWORD *)this + 104, *((unsigned int *)this + 13));
  std::vector<float>::vector((_QWORD *)this + 107, *((unsigned int *)this + 13));
  std::vector<float>::vector((_QWORD *)this + 110, *((unsigned int *)this + 13));
  std::vector<float>::vector((_QWORD *)this + 113, *((unsigned int *)this + 13));
  std::vector<float>::vector((_QWORD *)this + 116, *((unsigned int *)this + 13));
  *((_QWORD *)this + 119) = *((_QWORD *)this + 113);
  *((_QWORD *)this + 120) = *((_QWORD *)this + 116);
  std::vector<float>::vector((_QWORD *)this + 121, (2 * *((_DWORD *)this + 15)));
  std::vector<float>::vector((_QWORD *)this + 124, (2 * *((_DWORD *)this + 15)));
  std::vector<float>::vector((_QWORD *)this + 127, (2 * *((_DWORD *)this + 15)));
  std::vector<float>::vector((_QWORD *)this + 130, (2 * *((_DWORD *)this + 15)));
  std::vector<float>::vector((_QWORD *)this + 133, *((unsigned int *)this + 13));
  std::vector<float>::vector((_QWORD *)this + 136, *((unsigned int *)this + 13));
  std::vector<float>::vector((_QWORD *)this + 139, (2 * *((_DWORD *)this + 15)));
  std::vector<float>::vector((_QWORD *)this + 142, *((unsigned int *)this + 13));
  std::vector<float>::vector((_QWORD *)this + 145, *((unsigned int *)this + 13));
  std::vector<float>::vector((_QWORD *)this + 148, *((unsigned int *)this + 13));
  v41 = *((unsigned int *)this + 13);
  LODWORD(v77) = 1065353216;
  std::vector<float>::vector((_QWORD *)this + 151, v41, &v77);
  v42 = *((unsigned int *)this + 13);
  LODWORD(v77) = 1065353216;
  std::vector<float>::vector((_QWORD *)this + 154, v42, &v77);
  std::vector<float>::vector((_QWORD *)this + 157, (2 * *((_DWORD *)this + 15)));
  LODWORD(v77) = 0;
  std::vector<float>::vector((_QWORD *)this + 160, a14, &v77);
  LODWORD(v77) = 0;
  std::vector<float>::vector((_QWORD *)this + 163, a14, &v77);
  v43 = *((unsigned int *)this + 13);
  LODWORD(v77) = 1056964608;
  std::vector<float>::vector((_QWORD *)this + 166, v43, &v77);
  v44 = *((unsigned int *)this + 13);
  LODWORD(v77) = 0;
  std::vector<float>::vector((_QWORD *)this + 169, v44, &v77);
  v45 = *((unsigned int *)this + 13);
  LODWORD(v77) = 0;
  std::vector<float>::vector((_QWORD *)this + 172, v45, &v77);
  v46 = *((unsigned int *)this + 13);
  LODWORD(v77) = 0;
  std::vector<float>::vector((_QWORD *)this + 175, v46, &v77);
  v47 = *((unsigned int *)this + 13);
  LODWORD(v77) = 0;
  std::vector<float>::vector((_QWORD *)this + 178, v47, &v77);
  v48 = *((unsigned int *)this + 13);
  LODWORD(v77) = 0;
  std::vector<float>::vector((_QWORD *)this + 181, v48, &v77);
  v49 = *((unsigned int *)this + 13);
  LODWORD(v77) = 0;
  std::vector<float>::vector((_QWORD *)this + 184, v49, &v77);
  v50 = *((unsigned int *)this + 13);
  LODWORD(v77) = 0;
  std::vector<float>::vector((_QWORD *)this + 187, v50, &v77);
  *((_DWORD *)this + 380) = 0;
  LODWORD(v51) = *((_DWORD *)this + 12);
  if ((_DWORD)v51)
  {
    v52 = 0;
    do
    {
      v53 = *((unsigned int *)this + 14);
      v54 = *((_QWORD *)this + 37);
      if ((_DWORD)v53)
      {
        v55 = 0;
        v56 = *(uint64_t **)(*((_QWORD *)this + 31) + 24 * v52);
        v57 = *(_QWORD *)(v54 + 24 * v52);
        v58 = *(uint64_t **)(*((_QWORD *)this + 34) + 24 * v52);
        v59 = *(uint64_t **)(*((_QWORD *)this + 40) + 24 * v52);
        v60 = *(_QWORD *)(*((_QWORD *)this + 46) + 24 * v52);
        v61 = 16 * v53;
        v62 = *(uint64_t **)(*((_QWORD *)this + 43) + 24 * v52);
        do
        {
          v63 = *v56;
          v56 += 3;
          v64 = (_QWORD *)(v57 + v55);
          *v64 = v63;
          v65 = *v58;
          v58 += 3;
          v64[1] = v65;
          v66 = *v59;
          v59 += 3;
          v67 = (_QWORD *)(v60 + v55);
          *v67 = v66;
          v68 = *v62;
          v62 += 3;
          v67[1] = v68;
          v55 += 16;
        }
        while (v61 != v55);
      }
      else
      {
        v57 = *(_QWORD *)(v54 + 24 * v52);
      }
      vDSP_vfill(v25, *(float **)(v57 + 16 * (v51 + v52)), 1, *((unsigned int *)this + 13));
      vDSP_vfill(v25, *(float **)(*(_QWORD *)(*((_QWORD *)this + 46) + 24 * v52) + 16 * (*((_DWORD *)this + 12) + v52)), 1, *((unsigned int *)this + 13));
      ++v52;
      v51 = *((unsigned int *)this + 12);
    }
    while (v52 < v51);
  }
  v69 = *((unsigned int *)this + 14);
  if ((_DWORD)v69)
  {
    v70 = 0;
    v71 = *((_DWORD *)this + 13);
    v72 = *((_QWORD *)this + 59);
    v73 = *((_QWORD *)this + 62);
    v74 = (_QWORD *)(*((_QWORD *)this + 65) + 8);
    do
    {
      *(v74 - 1) = v72 + 4 * v70;
      *v74 = v73 + 4 * v70;
      v74 += 2;
      v70 += v71;
      --v69;
    }
    while (v69);
  }
}

void sub_1B648F534(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, void **a10, void **a11, void **a12, void **a13, void **a14, void **a15, void **a16, void **a17, void **a18, void **a19, void **a20,void **a21,void **a22,void **a23,void **a24,void **a25,void **a26,void **a27,void **a28,void **a29,void **a30,void **a31,void **a32,void **a33,void **a34,void **a35,void **a36,void **a37,void **a38,void **a39,void **a40,void **a41,void **a42,void **a43,void **a44)
{
  void **v44;
  void **v45;
  _QWORD *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  void *v52;
  void *v53;
  void *v54;
  void *v55;
  void *v56;
  void *v57;
  void *v58;
  void *v59;
  void *v60;
  void *v61;
  void *v62;
  void *v63;
  void *v64;
  void *v65;
  void *v66;
  void *v67;
  void *v68;
  void *v69;
  void *v70;
  void *v71;
  void *v72;
  void *v73;
  void *v74;
  void *v75;
  void *v76;
  void *v77;
  void *v78;
  void *v79;
  void *v80;
  void *v81;
  void *v82;
  void *v83;
  void *v84;
  void *v85;
  void *v86;
  void *v87;
  void *v88;
  void *v89;
  void *v90;
  void *v91;
  void *v92;
  void *v93;
  void *v94;
  void *v95;
  void *v96;
  void *v97;

  v52 = *v45;
  if (*v45)
  {
    v46[185] = v52;
    operator delete(v52);
  }
  v53 = *v44;
  if (*v44)
  {
    v46[182] = v53;
    operator delete(v53);
  }
  v54 = *a9;
  if (*a9)
  {
    v46[179] = v54;
    operator delete(v54);
  }
  v55 = *a10;
  if (*a10)
  {
    v46[176] = v55;
    operator delete(v55);
  }
  v56 = *a11;
  if (*a11)
  {
    v46[173] = v56;
    operator delete(v56);
  }
  v57 = *a12;
  if (*a12)
  {
    v46[170] = v57;
    operator delete(v57);
  }
  v58 = *a13;
  if (*a13)
  {
    v46[167] = v58;
    operator delete(v58);
  }
  v59 = *a14;
  if (*a14)
  {
    v46[164] = v59;
    operator delete(v59);
  }
  v60 = *a15;
  if (*a15)
  {
    v46[161] = v60;
    operator delete(v60);
  }
  v61 = *a16;
  if (*a16)
  {
    v46[158] = v61;
    operator delete(v61);
  }
  v62 = *a17;
  if (*a17)
  {
    v46[155] = v62;
    operator delete(v62);
  }
  v63 = *a18;
  if (*a18)
  {
    v46[152] = v63;
    operator delete(v63);
  }
  v64 = *a19;
  if (*a19)
  {
    v46[149] = v64;
    operator delete(v64);
  }
  v65 = *a20;
  if (*a20)
  {
    v46[146] = v65;
    operator delete(v65);
  }
  v66 = *a21;
  if (*a21)
  {
    v46[143] = v66;
    operator delete(v66);
  }
  v67 = *a22;
  if (*a22)
  {
    v46[140] = v67;
    operator delete(v67);
  }
  v68 = *a23;
  if (*a23)
  {
    v46[137] = v68;
    operator delete(v68);
  }
  v69 = *a24;
  if (*a24)
  {
    v46[134] = v69;
    operator delete(v69);
  }
  v70 = *a25;
  if (*a25)
  {
    v46[131] = v70;
    operator delete(v70);
  }
  v71 = *a26;
  if (*a26)
  {
    v46[128] = v71;
    operator delete(v71);
  }
  v72 = *a27;
  if (*a27)
  {
    v46[125] = v72;
    operator delete(v72);
  }
  v73 = *a28;
  if (*a28)
  {
    v46[122] = v73;
    operator delete(v73);
  }
  v74 = *a29;
  if (*a29)
  {
    v46[117] = v74;
    operator delete(v74);
  }
  v75 = *a30;
  if (*a30)
  {
    v46[114] = v75;
    operator delete(v75);
  }
  v76 = *a31;
  if (*a31)
  {
    v46[111] = v76;
    operator delete(v76);
  }
  v77 = *a32;
  if (*a32)
  {
    v46[108] = v77;
    operator delete(v77);
  }
  v78 = *a33;
  if (*a33)
  {
    v46[105] = v78;
    operator delete(v78);
  }
  v79 = *a34;
  if (*a34)
  {
    v46[102] = v79;
    operator delete(v79);
  }
  v80 = *a35;
  if (*a35)
  {
    v46[99] = v80;
    operator delete(v80);
  }
  v81 = *a36;
  if (*a36)
  {
    v46[96] = v81;
    operator delete(v81);
  }
  v82 = *a37;
  if (*a37)
  {
    v46[93] = v82;
    operator delete(v82);
  }
  v83 = *a38;
  if (*a38)
  {
    v46[90] = v83;
    operator delete(v83);
  }
  v84 = *a39;
  if (*a39)
  {
    v46[87] = v84;
    operator delete(v84);
  }
  v85 = *a40;
  if (*a40)
  {
    v46[84] = v85;
    operator delete(v85);
  }
  v86 = *a41;
  if (*a41)
  {
    v46[81] = v86;
    operator delete(v86);
  }
  v87 = *a42;
  if (*a42)
  {
    v46[78] = v87;
    operator delete(v87);
  }
  v88 = *a43;
  if (*a43)
  {
    v46[75] = v88;
    operator delete(v88);
  }
  v89 = *a44;
  if (*a44)
  {
    v46[72] = v89;
    operator delete(v89);
  }
  v90 = **(void ***)(v50 - 256);
  if (v90)
  {
    v46[69] = v90;
    operator delete(v90);
  }
  v91 = **(void ***)(v50 - 248);
  if (v91)
  {
    v46[66] = v91;
    operator delete(v91);
  }
  v92 = **(void ***)(v50 - 240);
  if (v92)
  {
    v46[63] = v92;
    operator delete(v92);
  }
  v93 = **(void ***)(v50 - 232);
  if (v93)
  {
    v46[60] = v93;
    operator delete(v93);
  }
  v94 = **(void ***)(v50 - 224);
  if (v94)
  {
    v46[57] = v94;
    operator delete(v94);
  }
  v95 = **(void ***)(v50 - 216);
  if (v95)
  {
    v46[53] = v95;
    operator delete(v95);
  }
  v96 = **(void ***)(v50 - 208);
  if (v96)
  {
    v46[50] = v96;
    operator delete(v96);
  }
  *(_QWORD *)(v50 - 128) = v49;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v50 - 128));
  *(_QWORD *)(v50 - 128) = v48;
  std::vector<std::vector<std::vector<DspLib::Biquad::Section>>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v50 - 128));
  *(_QWORD *)(v50 - 128) = v47;
  std::vector<std::vector<std::vector<DspLib::Biquad::Section>>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v50 - 128));
  *(_QWORD *)(v50 - 128) = *(_QWORD *)(v50 - 200);
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v50 - 128));
  *(_QWORD *)(v50 - 128) = *(_QWORD *)(v50 - 168);
  std::vector<std::vector<std::vector<DspLib::Biquad::Section>>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v50 - 128));
  *(_QWORD *)(v50 - 128) = *(_QWORD *)(v50 - 160);
  std::vector<std::vector<std::vector<DspLib::Biquad::Section>>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v50 - 128));
  *(_QWORD *)(v50 - 128) = *(_QWORD *)(v50 - 192);
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v50 - 128));
  *(_QWORD *)(v50 - 128) = *(_QWORD *)(v50 - 184);
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v50 - 128));
  v97 = **(void ***)(v50 - 176);
  if (v97)
    operator delete(v97);
  _Unwind_Resume(a1);
}

void vec::fill<BOOL>(uint64_t a1, unint64_t a2, char a3)
{
  uint64_t v3;
  int v4;

  if (a2)
  {
    v3 = a1;
    v4 = 0;
    if (a3)
      std::__fill_n[abi:ne180100]<true,std::vector<BOOL>>(&v3, a2);
    else
      std::__fill_n[abi:ne180100]<false,std::__bitset<1ul,8ul>>((uint64_t)&v3, a2);
  }
}

uint64_t vec::fill<float>(uint64_t result, uint64_t a2, _DWORD *a3)
{
  uint64_t v3;
  uint64_t v4;
  _DWORD *v5;
  uint64_t v6;
  unint64_t v7;

  if (a2 != result)
  {
    v3 = 0;
    do
    {
      v4 = result + 24 * v3;
      v5 = *(_DWORD **)v4;
      v6 = *(_QWORD *)(v4 + 8) - *(_QWORD *)v4;
      if (v6 >= 1)
      {
        v7 = ((unint64_t)v6 >> 2) + 1;
        do
        {
          *v5++ = *a3;
          --v7;
        }
        while (v7 > 1);
      }
      ++v3;
    }
    while (0xAAAAAAAAAAAAAAABLL * ((a2 - result) >> 3) > v3);
  }
  return result;
}

void PMWF_FAST_GS_vDSP::ProcessOneFrame(PMWF_FAST_GS_vDSP *this)
{
  unsigned int v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t i;
  vDSP_Length v6;
  uint64_t v7;
  float *v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  vDSP_Length v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  unint64_t v17;
  int v18;
  unint64_t v19;
  unsigned int v20;
  unsigned int v21;
  uint64_t v22;
  float *v23;
  float *v24;
  uint64_t v25;
  unint64_t v26;
  vDSP_Length v27;
  unsigned int v28;
  uint64_t v29;
  unsigned int v30;
  int v31;
  int v33;
  unint64_t v34;
  const float *v35;
  const float *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  float v41;
  uint64_t v42;
  float *v43;
  unsigned int v44;
  unint64_t v45;
  unint64_t j;
  vDSP_Length v47;
  uint64_t v48;
  unsigned int v49;
  uint64_t v50;
  unint64_t v51;
  unint64_t k;
  vDSP_Length v53;
  uint64_t v54;
  unsigned int v55;
  uint64_t v56;
  uint64_t v57;
  int v58;
  unint64_t v59;
  unint64_t v60;
  unint64_t m;
  vDSP_Length v62;
  uint64_t v63;
  unsigned int v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  unint64_t n;
  vDSP_Length v69;
  uint64_t v70;
  unsigned int v71;
  uint64_t v72;
  uint64_t v73;
  const float *v74;
  const float *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  float v80;
  uint64_t v81;
  unint64_t v82;
  unint64_t ii;
  vDSP_Length v84;
  uint64_t v85;
  unsigned int v86;
  uint64_t v87;
  unint64_t v88;
  unint64_t jj;
  vDSP_Length v90;
  uint64_t v91;
  unsigned int v92;
  uint64_t v93;
  uint64_t v94;
  int v95;
  unint64_t v96;
  unsigned int v97;
  unint64_t v98;
  const float *v99;
  uint64_t v100;
  uint64_t v101;
  unint64_t v102;
  float *v103;
  uint64_t v104;
  unint64_t v105;
  const DSPSplitComplex *v106;
  BOOL v107;
  unint64_t v108;
  const float *v109;
  unint64_t v110;
  uint64_t v111;
  uint64_t v112;
  unint64_t v113;
  uint64_t v114;
  unint64_t v115;
  unint64_t v116;
  unint64_t kk;
  vDSP_Length v118;
  uint64_t v119;
  unsigned int v120;
  uint64_t v121;
  unsigned int v122;
  unint64_t v123;
  uint64_t v124;
  uint64_t v125;
  unint64_t v126;
  float *v127;
  float *v128;
  float *v129;
  uint64_t v130;
  unint64_t v131;
  const DSPSplitComplex *v132;
  unint64_t v133;
  unint64_t mm;
  vDSP_Length v135;
  uint64_t v136;
  unsigned int v137;
  uint64_t v138;
  uint64_t v139;
  unint64_t nn;
  vDSP_Length v141;
  uint64_t v142;
  unsigned int v143;
  uint64_t v144;
  unint64_t v145;
  unint64_t i1;
  vDSP_Length v147;
  uint64_t v148;
  unsigned int v149;
  uint64_t v150;
  uint64_t v151;
  vDSP_Length v152;
  float *v153;
  float *v154;
  uint64_t v155;
  unint64_t v156;
  unint64_t i2;
  vDSP_Length v158;
  uint64_t v159;
  unsigned int v160;
  uint64_t v161;
  int v162;
  uint64_t v163;
  unsigned int v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  float *v168;
  float v169;
  float v170;
  float v171;
  vDSP_Length v172;
  uint64_t v173;
  uint64_t v174;
  float *v175;
  vDSP_Length v176;
  uint64_t v177;
  float *v178;
  uint64_t v179;
  float v180;
  const float *v182;
  float v183;
  float *v184;
  vDSP_Length v185;
  float *v186;
  float *__N;
  float32x4_t **__Na;
  float32x4_t **__Nb;
  float *v190;
  float *v191;
  float *__C;
  float *__B;
  float *v194;
  float *v195;
  float v196;
  uint64_t v197;
  float v198;
  int v199;
  DSPSplitComplex __D;
  DSPSplitComplex v201;
  DSPSplitComplex __A;
  float v203[3];

  v2 = *((_DWORD *)this + 37);
  if (!v2)
  {
    vDSP_vfill((const float *)this + 21, *((float **)this + 49), 1, *((unsigned int *)this + 13));
    if (!*((_DWORD *)this + 36))
    {
LABEL_10:
      ++*((_DWORD *)this + 37);
      goto LABEL_11;
    }
LABEL_5:
    v3 = *((unsigned int *)this + 12);
    if ((_DWORD)v3)
    {
      v4 = 0;
      for (i = 0; i < v3; ++i)
      {
        if (((*(_QWORD *)(*((_QWORD *)this + 22) + ((i >> 3) & 0x1FFFFFFFFFFFFFF8)) >> i) & 1) == 0)
        {
          v6 = *((unsigned int *)this + 13);
          v7 = *((_QWORD *)this + 56);
          v8 = (float *)(v7 + 4 * (*((_DWORD *)this + 15) + v6 * i));
          __A.realp = (float *)(v7 + 4 * (v6 * i));
          __A.imagp = v8;
          vDSP_zvmags(&__A, 1, *((float **)this + 133), 1, v6);
          vDSP_vmax(*((const float **)this + 133), 1, *(const float **)(*((_QWORD *)this + 25) + v4), 1, *(float **)(*((_QWORD *)this + 25) + v4), 1, *((unsigned int *)this + 13));
          vDSP_vmax(*((const float **)this + 133), 1, *(const float **)(*((_QWORD *)this + 28) + v4), 1, *(float **)(*((_QWORD *)this + 28) + v4), 1, *((unsigned int *)this + 13));
          v3 = *((unsigned int *)this + 12);
        }
        v4 += 24;
      }
    }
    goto LABEL_10;
  }
  if (v2 < *((_DWORD *)this + 36))
    goto LABEL_5;
LABEL_11:
  memcpy(*((void **)this + 59), *((const void **)this + 56), 4 * *((unsigned int *)this + 15));
  memcpy(*((void **)this + 62), (const void *)(*((_QWORD *)this + 56) + 4 * *((unsigned int *)this + 15)), 4 * *((unsigned int *)this + 15));
  bzero((void *)(*((_QWORD *)this + 59) + 4 * *((unsigned int *)this + 15)), 4 * *((unsigned int *)this + 15));
  bzero((void *)(*((_QWORD *)this + 62) + 4 * *((unsigned int *)this + 15)), 4 * *((unsigned int *)this + 15));
  bzero(*((void **)this + 71), 4 * *((unsigned int *)this + 13));
  v9 = *((_DWORD *)this + 12);
  if (v9)
  {
    v10 = 0;
    v11 = 1;
    v12 = 16;
    do
    {
      if (((*(_QWORD *)(*((_QWORD *)this + 22) + ((v10 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v10) & 1) != 0)
      {
        ++v10;
      }
      else
      {
        vDSP_zvmags((const DSPSplitComplex *)(*((_QWORD *)this + 65) + 16 * v10), 1, *((float **)this + 68), 1, *((unsigned int *)this + 13));
        vDSP_svdiv((const float *)this + 19, *(const float **)(*((_QWORD *)this + 25) + 24 * v10), 1, *((float **)this + 77), 1, *((unsigned int *)this + 13));
        vDSP_vma(*((const float **)this + 68), 1, *((const float **)this + 77), 1, *((const float **)this + 71), 1, *((float **)this + 71), 1, *((unsigned int *)this + 13));
        v13 = *((unsigned int *)this + 13);
        v14 = *((_QWORD *)this + 124);
        v15 = *((_DWORD *)this + 15);
        __A.realp = (float *)(v14 + 4 * (v13 * v10));
        __A.imagp = (float *)(v14 + 4 * (v15 + v13 * v10));
        vDSP_zrvmul((const DSPSplitComplex *)(*((_QWORD *)this + 65) + 16 * v10), 1, *((const float **)this + 77), 1, &__A, 1, v13);
        v9 = *((_DWORD *)this + 12);
        v16 = v12;
        v17 = v11;
        if (v10 + 1 < 2 * v9)
        {
          do
          {
            if (((*(_QWORD *)(*((_QWORD *)this + 22) + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v17) & 1) == 0)
            {
              vDSP_zvma((const DSPSplitComplex *)(*(_QWORD *)(*((_QWORD *)this + 37) + 24 * v10) + v16), 1, (const DSPSplitComplex *)(*((_QWORD *)this + 65) + 16 * v10), 1, (const DSPSplitComplex *)(*((_QWORD *)this + 65) + v16), 1, (const DSPSplitComplex *)(*((_QWORD *)this + 65) + v16), 1, *((unsigned int *)this + 13));
              v9 = *((_DWORD *)this + 12);
            }
            ++v17;
            v16 += 16;
          }
          while (v17 < 2 * v9);
        }
        ++v10;
      }
      ++v11;
      v12 += 16;
    }
    while (v10 < v9);
  }
  vDSP_vneg((const float *)(*((_QWORD *)this + 59) + 4 * *((unsigned int *)this + 15)), 1, *((float **)this + 121), 1, *((unsigned int *)this + 15));
  vDSP_vneg((const float *)(*((_QWORD *)this + 62) + 4 * *((unsigned int *)this + 15)), 1, (float *)(*((_QWORD *)this + 121) + 4 * *((unsigned int *)this + 15)), 1, *((unsigned int *)this + 15));
  v18 = *((_DWORD *)this + 12);
  v19 = (v18 - 1);
  if (v18 - 1 >= 0)
  {
    v20 = v18 - 2;
    do
    {
      if (((*(_QWORD *)(*((_QWORD *)this + 22) + ((v19 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v19) & 1) == 0)
      {
        v21 = *((_DWORD *)this + 13) * v18 - 1;
        v22 = *((_QWORD *)this + 124);
        v23 = (float *)(v22 + 4 * v21);
        v24 = (float *)(v22 + 4 * (*((_DWORD *)this + 15) + v21));
        __A.realp = v23;
        __A.imagp = v24;
        if (v18 - 2 >= 0)
        {
          v25 = 24 * v20;
          v26 = v20;
          do
          {
            if (((*(_QWORD *)(*((_QWORD *)this + 22) + ((v26 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v26) & 1) == 0)
            {
              v201.realp = 0;
              v201.imagp = 0;
              v27 = *((unsigned int *)this + 13);
              v201.realp = (float *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 31) + v25) + 24 * v19)
                                   + 4 * (v27 - 1));
              v201.imagp = (float *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 34) + v25) + 24 * v19)
                                   + 4 * (v27 - 1));
              v28 = v27 - 1 + v27 * v26;
              v29 = *((_QWORD *)this + 124);
              v30 = *((_DWORD *)this + 15) + v28;
              __D.realp = (float *)(v29 + 4 * v28);
              __D.imagp = (float *)(v29 + 4 * v30);
              vDSP_zvcma(&v201, -1, &__A, -1, &__D, -1, &__D, -1, v27);
            }
            v31 = v26--;
            v25 -= 24;
          }
          while (v31 > 0);
        }
      }
      v18 = v19;
      --v20;
    }
    while ((uint64_t)v19-- > 0);
  }
  __B = (float *)((char *)this + 96);
  vDSP_vsmsma(*((const float **)this + 49), 1, (const float *)this + 2, *((const float **)this + 71), 1, (const float *)this + 24, *((float **)this + 80), 1, *((unsigned int *)this + 13));
  v191 = (float *)((char *)this + 88);
  vDSP_vsadd(*((const float **)this + 80), 1, (const float *)this + 22, *((float **)this + 80), 1, *((unsigned int *)this + 13));
  vDSP_vabs(*((const float **)this + 80), 1, *((float **)this + 80), 1, *((unsigned int *)this + 13));
  bzero(*((void **)this + 133), 4 * *((unsigned int *)this + 13));
  v33 = *((_DWORD *)this + 12);
  if ((v33 & 0x7FFFFFFF) != 0)
  {
    v34 = 0;
    do
    {
      if (((*(_QWORD *)(*((_QWORD *)this + 22) + ((v34 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v34) & 1) == 0)
      {
        vDSP_vma((const float *)(*((_QWORD *)this + 121) + 4 * (*((_DWORD *)this + 13) * v34)), 1, (const float *)(*((_QWORD *)this + 124) + 4 * (*((_DWORD *)this + 13) * v34)), 1, *((const float **)this + 133), 1, *((float **)this + 133), 1, *((unsigned int *)this + 13));
        v33 = *((_DWORD *)this + 12);
      }
      ++v34;
    }
    while (v34 < (2 * v33));
  }
  vDSP_vsq(*((const float **)this + 71), 1, *((float **)this + 74), 1, *((unsigned int *)this + 13));
  vDSP_vsmsma(*((const float **)this + 133), 1, (const float *)this + 2, *((const float **)this + 74), 1, __B, *((float **)this + 83), 1, *((unsigned int *)this + 13));
  vDSP_vsub(*((const float **)this + 71), 1, *((const float **)this + 83), 1, *((float **)this + 83), 1, *((unsigned int *)this + 13));
  vDSP_vabs(*((const float **)this + 83), 1, *((float **)this + 83), 1, *((unsigned int *)this + 13));
  v35 = (const float *)((char *)this + 76);
  vDSP_vsadd(*((const float **)this + 80), 1, (const float *)this + 19, *((float **)this + 133), 1, *((unsigned int *)this + 13));
  vDSP_svdiv((const float *)this + 19, *((const float **)this + 133), 1, *((float **)this + 133), 1, *((unsigned int *)this + 13));
  vDSP_vmul(*((const float **)this + 83), 1, *((const float **)this + 133), 1, *((float **)this + 86), 1, *((unsigned int *)this + 13));
  v199 = *((_DWORD *)this + 13);
  vvexpf(*((float **)this + 86), *((const float **)this + 86), &v199);
  vDSP_vmul(*((const float **)this + 133), 1, *((const float **)this + 86), 1, *((float **)this + 86), 1, *((unsigned int *)this + 13));
  if (*((_DWORD *)this + 27) == 1 && *((_DWORD *)this + 28))
  {
    vDSP_vneg(*((const float **)this + 166), 1, *((float **)this + 133), 1, *((unsigned int *)this + 13));
    vDSP_vsadd(*((const float **)this + 133), 1, (const float *)this + 19, *((float **)this + 133), 1, *((unsigned int *)this + 13));
    vDSP_vdiv(*((const float **)this + 166), 1, *((const float **)this + 133), 1, *((float **)this + 133), 1, *((unsigned int *)this + 13));
    vDSP_vmul(*((const float **)this + 133), 1, *((const float **)this + 86), 1, *((float **)this + 86), 1, *((unsigned int *)this + 13));
  }
  else
  {
    vDSP_vsmul(*((const float **)this + 86), 1, (const float *)this + 23, *((float **)this + 86), 1, *((unsigned int *)this + 13));
  }
  v36 = (const float *)((char *)this + 72);
  __C = (float *)((char *)this + 36);
  vDSP_vclip(*((const float **)this + 86), 1, (const float *)this + 18, (const float *)this + 9, *((float **)this + 86), 1, *((unsigned int *)this + 13));
  vDSP_vsadd(*((const float **)this + 86), 1, (const float *)this + 19, *((float **)this + 89), 1, *((unsigned int *)this + 13));
  vDSP_vdiv(*((const float **)this + 89), 1, *((const float **)this + 86), 1, *((float **)this + 89), 1, *((unsigned int *)this + 13));
  if (*((float *)this + 4) == 0.0)
  {
    vDSP_vclip(*((const float **)this + 89), 1, (const float *)this + 18, (const float *)this + 8, *((float **)this + 89), 1, *((unsigned int *)this + 13));
  }
  else
  {
    vDSP_vsmsma(*((const float **)this + 52), 1, (const float *)this + 4, *((const float **)this + 89), 1, (const float *)this + 26, *((float **)this + 52), 1, *((unsigned int *)this + 13));
    v37 = *((unsigned int *)this + 13);
    if ((_DWORD)v37)
    {
      v38 = 0;
      v39 = *((_QWORD *)this + 52);
      v40 = 4 * v37;
      do
      {
        v41 = *((float *)this + 8);
        if (*(float *)(v39 + v38) > v41)
        {
          v42 = *((_QWORD *)this + 89);
          if (*(float *)(v42 + v38) > v41)
            *(float *)(v42 + v38) = v41;
        }
        v38 += 4;
      }
      while (v40 != v38);
    }
  }
  v194 = (float *)((char *)this + 72);
  v195 = (float *)((char *)this + 76);
  if (*((_DWORD *)this + 34))
  {
    v43 = (float *)((char *)this + 32);
    v44 = 1;
    do
    {
      vDSP_vmin(*((const float **)this + 151), 1, *((const float **)this + 89), 1, *((float **)this + 89), 1, *((unsigned int *)this + 13));
      vDSP_vsmsa(*((const float **)this + 89), 1, (const float *)this + 25, (const float *)this + 3, *((float **)this + 92), 1, *((unsigned int *)this + 13));
      vDSP_svdiv(v35, *((const float **)this + 92), 1, *((float **)this + 95), 1, *((unsigned int *)this + 13));
      vDSP_vneg(*((const float **)this + 92), 1, *((float **)this + 98), 1, *((unsigned int *)this + 13));
      vDSP_vsadd(*((const float **)this + 98), 1, v35, *((float **)this + 98), 1, *((unsigned int *)this + 13));
      vDSP_svdiv(v35, *((const float **)this + 98), 1, *((float **)this + 101), 1, *((unsigned int *)this + 13));
      vDSP_vsmul(*((const float **)this + 101), 1, __B, *((float **)this + 133), 1, *((unsigned int *)this + 13));
      v45 = *((unsigned int *)this + 12);
      if ((_DWORD)v45)
      {
        for (j = 0; j < v45; ++j)
        {
          if (((*(_QWORD *)(*((_QWORD *)this + 22) + ((j >> 3) & 0x1FFFFFFFFFFFFFF8)) >> j) & 1) == 0)
          {
            v47 = *((unsigned int *)this + 13);
            v48 = *((_QWORD *)this + 127);
            v49 = v47 * j + *((_DWORD *)this + 15);
            __A.realp = (float *)(v48 + 4 * (v47 * j));
            __A.imagp = (float *)(v48 + 4 * v49);
            v50 = *((_QWORD *)this + 56);
            v201.realp = (float *)(v50 + 4 * (v47 * j));
            v201.imagp = (float *)(v50 + 4 * v49);
            vDSP_zrvmul(&v201, 1, *((const float **)this + 133), 1, &__A, 1, v47);
            v45 = *((unsigned int *)this + 12);
          }
        }
      }
      vDSP_vsmul(*((const float **)this + 95), 1, (const float *)this + 2, *((float **)this + 104), 1, *((unsigned int *)this + 13));
      v51 = *((unsigned int *)this + 12);
      if ((_DWORD)v51)
      {
        for (k = 0; k < v51; ++k)
        {
          if (((*(_QWORD *)(*((_QWORD *)this + 22) + ((k >> 3) & 0x1FFFFFFFFFFFFFF8)) >> k) & 1) == 0)
          {
            v53 = *((unsigned int *)this + 13);
            v54 = *((_QWORD *)this + 130);
            v55 = v53 * k + *((_DWORD *)this + 15);
            __A.realp = (float *)(v54 + 4 * (v53 * k));
            __A.imagp = (float *)(v54 + 4 * v55);
            v56 = *((_QWORD *)this + 127);
            v201.realp = (float *)(v56 + 4 * (v53 * k));
            v201.imagp = (float *)(v56 + 4 * v55);
            v57 = *((_QWORD *)this + 121);
            __D.realp = (float *)(v57 + 4 * (v53 * k));
            __D.imagp = (float *)(v57 + 4 * v55);
            vDSP_zrvmul(&__D, 1, *((const float **)this + 104), 1, &__A, 1, v53);
            vDSP_zvsub(&v201, 1, &__A, 1, &__A, 1, *((unsigned int *)this + 13));
            v51 = *((unsigned int *)this + 12);
          }
        }
      }
      vDSP_vmul(*((const float **)this + 95), 1, *((const float **)this + 71), 1, *((float **)this + 110), 1, *((unsigned int *)this + 13));
      bzero(*((void **)this + 133), 4 * *((unsigned int *)this + 13));
      v58 = *((_DWORD *)this + 12);
      if ((v58 & 0x7FFFFFFF) != 0)
      {
        v59 = 0;
        do
        {
          if (((*(_QWORD *)(*((_QWORD *)this + 22) + ((v59 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v59) & 1) == 0)
          {
            vDSP_vma((const float *)(*((_QWORD *)this + 130) + 4 * (*((_DWORD *)this + 13) * v59)), 1, (const float *)(*((_QWORD *)this + 124) + 4 * (*((_DWORD *)this + 13) * v59)), 1, *((const float **)this + 133), 1, *((float **)this + 133), 1, *((unsigned int *)this + 13));
            v58 = *((_DWORD *)this + 12);
          }
          ++v59;
        }
        while (v59 < (2 * v58));
      }
      vDSP_vadd(*((const float **)this + 110), 1, *((const float **)this + 101), 1, *((float **)this + 107), 1, *((unsigned int *)this + 13));
      vDSP_vmul(*((const float **)this + 92), 1, *((const float **)this + 107), 1, *((float **)this + 107), 1, *((unsigned int *)this + 13));
      vDSP_svdiv(v35, *((const float **)this + 107), 1, *((float **)this + 107), 1, *((unsigned int *)this + 13));
      vDSP_vmma(*((const float **)this + 104), 1, *((const float **)this + 49), 1, *((const float **)this + 107), 1, *((const float **)this + 133), 1, *((float **)this + 80), 1, *((unsigned int *)this + 13));
      vDSP_vsadd(*((const float **)this + 80), 1, v191, *((float **)this + 80), 1, *((unsigned int *)this + 13));
      vDSP_vabs(*((const float **)this + 80), 1, *((float **)this + 80), 1, *((unsigned int *)this + 13));
      vDSP_vmul(*((const float **)this + 71), 1, *((const float **)this + 107), 1, *((float **)this + 136), 1, *((unsigned int *)this + 13));
      vDSP_vneg(*((const float **)this + 136), 1, *((float **)this + 136), 1, *((unsigned int *)this + 13));
      vDSP_vsadd(*((const float **)this + 136), 1, v35, *((float **)this + 136), 1, *((unsigned int *)this + 13));
      vDSP_vthr(*((const float **)this + 136), 1, v194, *((float **)this + 136), 1, *((unsigned int *)this + 13));
      v60 = *((unsigned int *)this + 12);
      if ((_DWORD)v60)
      {
        for (m = 0; m < v60; ++m)
        {
          if (((*(_QWORD *)(*((_QWORD *)this + 22) + ((m >> 3) & 0x1FFFFFFFFFFFFFF8)) >> m) & 1) == 0)
          {
            v62 = *((unsigned int *)this + 13);
            v63 = *((_QWORD *)this + 139);
            v64 = v62 * m + *((_DWORD *)this + 15);
            __A.realp = (float *)(v63 + 4 * (v62 * m));
            __A.imagp = (float *)(v63 + 4 * v64);
            v65 = *((_QWORD *)this + 127);
            v201.realp = (float *)(v65 + 4 * (v62 * m));
            v201.imagp = (float *)(v65 + 4 * v64);
            v66 = *((_QWORD *)this + 130);
            __D.realp = (float *)(v66 + 4 * (v62 * m));
            __D.imagp = (float *)(v66 + 4 * v64);
            vDSP_zrvmul(&__D, 1, *((const float **)this + 136), 1, &__A, 1, v62);
            vDSP_zvsub(&v201, 1, &__A, 1, &__A, 1, *((unsigned int *)this + 13));
            v60 = *((unsigned int *)this + 12);
          }
        }
      }
      bzero(*((void **)this + 83), 4 * *((unsigned int *)this + 13));
      v67 = *((unsigned int *)this + 12);
      if ((_DWORD)v67)
      {
        for (n = 0; n < v67; ++n)
        {
          if (((*(_QWORD *)(*((_QWORD *)this + 22) + ((n >> 3) & 0x1FFFFFFFFFFFFFF8)) >> n) & 1) == 0)
          {
            v69 = *((unsigned int *)this + 13);
            v70 = *((_QWORD *)this + 139);
            v71 = v69 * n + *((_DWORD *)this + 15);
            __A.realp = (float *)(v70 + 4 * (v69 * n));
            __A.imagp = (float *)(v70 + 4 * v71);
            v72 = *((_QWORD *)this + 56);
            v201.realp = (float *)(v72 + 4 * (v69 * n));
            v201.imagp = (float *)(v72 + 4 * v71);
            v73 = *((_QWORD *)this + 124);
            v74 = (const float *)(v73 + 4 * (v69 * n));
            v75 = (const float *)(v73 + 4 * v71);
            vDSP_zvsub(&__A, 1, &v201, 1, &__A, 1, v69);
            vDSP_vma(__A.realp, 1, v74, 1, *((const float **)this + 83), 1, *((float **)this + 83), 1, *((unsigned int *)this + 13));
            vDSP_vma(__A.imagp, 1, v75, 1, *((const float **)this + 83), 1, *((float **)this + 83), 1, *((unsigned int *)this + 13));
            v67 = *((unsigned int *)this + 12);
          }
        }
      }
      vDSP_vmul(*((const float **)this + 136), 1, *((const float **)this + 83), 1, *((float **)this + 83), 1, *((unsigned int *)this + 13));
      vDSP_vmul(*((const float **)this + 95), 1, *((const float **)this + 83), 1, *((float **)this + 83), 1, *((unsigned int *)this + 13));
      vDSP_vabs(*((const float **)this + 83), 1, *((float **)this + 83), 1, *((unsigned int *)this + 13));
      v35 = (const float *)((char *)this + 76);
      vDSP_vsadd(*((const float **)this + 80), 1, v195, *((float **)this + 133), 1, *((unsigned int *)this + 13));
      vDSP_svdiv(v195, *((const float **)this + 133), 1, *((float **)this + 133), 1, *((unsigned int *)this + 13));
      vDSP_vmul(*((const float **)this + 83), 1, *((const float **)this + 133), 1, *((float **)this + 86), 1, *((unsigned int *)this + 13));
      vvexpf(*((float **)this + 86), *((const float **)this + 86), &v199);
      vDSP_vmul(*((const float **)this + 133), 1, *((const float **)this + 86), 1, *((float **)this + 86), 1, *((unsigned int *)this + 13));
      if (*((_DWORD *)this + 27) == 1 && *((_DWORD *)this + 28))
      {
        vDSP_vneg(*((const float **)this + 166), 1, *((float **)this + 133), 1, *((unsigned int *)this + 13));
        vDSP_vsadd(*((const float **)this + 133), 1, v195, *((float **)this + 133), 1, *((unsigned int *)this + 13));
        vDSP_vdiv(*((const float **)this + 166), 1, *((const float **)this + 133), 1, *((float **)this + 133), 1, *((unsigned int *)this + 13));
        vDSP_vmul(*((const float **)this + 133), 1, *((const float **)this + 86), 1, *((float **)this + 86), 1, *((unsigned int *)this + 13));
      }
      else
      {
        vDSP_vsmul(*((const float **)this + 86), 1, (const float *)this + 23, *((float **)this + 86), 1, *((unsigned int *)this + 13));
      }
      v36 = (const float *)((char *)this + 72);
      vDSP_vclip(*((const float **)this + 86), 1, v194, __C, *((float **)this + 86), 1, *((unsigned int *)this + 13));
      vDSP_vsadd(*((const float **)this + 86), 1, v195, *((float **)this + 89), 1, *((unsigned int *)this + 13));
      vDSP_vdiv(*((const float **)this + 89), 1, *((const float **)this + 86), 1, *((float **)this + 89), 1, *((unsigned int *)this + 13));
      if (v44 < *((_DWORD *)this + 34))
      {
        if (*((float *)this + 4) == 0.0)
        {
          vDSP_vclip(*((const float **)this + 89), 1, v194, (const float *)this + 8, *((float **)this + 89), 1, *((unsigned int *)this + 13));
        }
        else
        {
          vDSP_vsmsma(*((const float **)this + 52), 1, (const float *)this + 4, *((const float **)this + 89), 1, (const float *)this + 26, *((float **)this + 52), 1, *((unsigned int *)this + 13));
          v76 = *((unsigned int *)this + 13);
          if ((_DWORD)v76)
          {
            v77 = 0;
            v78 = *((_QWORD *)this + 52);
            v79 = 4 * v76;
            do
            {
              v80 = *v43;
              if (*(float *)(v78 + v77) > *v43)
              {
                v81 = *((_QWORD *)this + 89);
                if (*(float *)(v81 + v77) > v80)
                  *(float *)(v81 + v77) = v80;
              }
              v77 += 4;
            }
            while (v79 != v77);
          }
        }
      }
      ++v44;
    }
    while (v44 <= *((_DWORD *)this + 34));
  }
  vDSP_vmin(*((const float **)this + 151), 1, *((const float **)this + 89), 1, *((float **)this + 89), 1, *((unsigned int *)this + 13));
  vDSP_vneg(*((const float **)this + 89), 1, *((float **)this + 86), 1, *((unsigned int *)this + 13));
  vDSP_vsadd(*((const float **)this + 86), 1, v35, *((float **)this + 86), 1, *((unsigned int *)this + 13));
  v190 = (float *)((char *)this + 40);
  vDSP_vthr(*((const float **)this + 86), 1, (const float *)this + 10, *((float **)this + 86), 1, *((unsigned int *)this + 13));
  vDSP_vdiv(*((const float **)this + 86), 1, *((const float **)this + 89), 1, *((float **)this + 86), 1, *((unsigned int *)this + 13));
  vDSP_vclip(*((const float **)this + 86), 1, v36, __C, *((float **)this + 86), 1, *((unsigned int *)this + 13));
  vDSP_vsmsa(*((const float **)this + 89), 1, (const float *)this + 25, (const float *)this + 3, *((float **)this + 92), 1, *((unsigned int *)this + 13));
  vDSP_svdiv(v35, *((const float **)this + 92), 1, *((float **)this + 95), 1, *((unsigned int *)this + 13));
  vDSP_vneg(*((const float **)this + 92), 1, *((float **)this + 98), 1, *((unsigned int *)this + 13));
  vDSP_vsadd(*((const float **)this + 98), 1, v35, *((float **)this + 98), 1, *((unsigned int *)this + 13));
  vDSP_svdiv(v35, *((const float **)this + 98), 1, *((float **)this + 101), 1, *((unsigned int *)this + 13));
  vDSP_vsmul(*((const float **)this + 101), 1, __B, *((float **)this + 133), 1, *((unsigned int *)this + 13));
  v82 = *((unsigned int *)this + 12);
  if ((_DWORD)v82)
  {
    for (ii = 0; ii < v82; ++ii)
    {
      if (((*(_QWORD *)(*((_QWORD *)this + 22) + ((ii >> 3) & 0x1FFFFFFFFFFFFFF8)) >> ii) & 1) == 0)
      {
        v84 = *((unsigned int *)this + 13);
        v85 = *((_QWORD *)this + 127);
        v86 = *((_DWORD *)this + 15) + v84 * ii;
        __A.realp = (float *)(v85 + 4 * (v84 * ii));
        __A.imagp = (float *)(v85 + 4 * v86);
        v87 = *((_QWORD *)this + 56);
        v201.realp = (float *)(v87 + 4 * (v84 * ii));
        v201.imagp = (float *)(v87 + 4 * v86);
        vDSP_zrvmul(&v201, 1, *((const float **)this + 133), 1, &__A, 1, v84);
        v82 = *((unsigned int *)this + 12);
      }
    }
  }
  vDSP_vsmul(*((const float **)this + 95), 1, (const float *)this + 2, *((float **)this + 104), 1, *((unsigned int *)this + 13));
  v88 = *((unsigned int *)this + 12);
  if ((_DWORD)v88)
  {
    for (jj = 0; jj < v88; ++jj)
    {
      if (((*(_QWORD *)(*((_QWORD *)this + 22) + ((jj >> 3) & 0x1FFFFFFFFFFFFFF8)) >> jj) & 1) == 0)
      {
        v90 = *((unsigned int *)this + 13);
        v91 = *((_QWORD *)this + 130);
        v92 = *((_DWORD *)this + 15) + v90 * jj;
        __A.realp = (float *)(v91 + 4 * (v90 * jj));
        __A.imagp = (float *)(v91 + 4 * v92);
        v93 = *((_QWORD *)this + 127);
        v201.realp = (float *)(v93 + 4 * (v90 * jj));
        v201.imagp = (float *)(v93 + 4 * v92);
        v94 = *((_QWORD *)this + 121);
        __D.realp = (float *)(v94 + 4 * (v90 * jj));
        __D.imagp = (float *)(v94 + 4 * v92);
        vDSP_zrvmul(&__D, 1, *((const float **)this + 104), 1, &__A, 1, v90);
        vDSP_zvsub(&v201, 1, &__A, 1, &__A, 1, *((unsigned int *)this + 13));
        v88 = *((unsigned int *)this + 12);
      }
    }
  }
  vDSP_vmul(*((const float **)this + 95), 1, *((const float **)this + 71), 1, *((float **)this + 110), 1, *((unsigned int *)this + 13));
  bzero(*((void **)this + 133), 4 * *((unsigned int *)this + 13));
  v95 = *((_DWORD *)this + 12);
  if ((v95 & 0x7FFFFFFF) != 0)
  {
    v96 = 0;
    do
    {
      if (((*(_QWORD *)(*((_QWORD *)this + 22) + ((v96 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v96) & 1) == 0)
      {
        vDSP_vma((const float *)(*((_QWORD *)this + 130) + 4 * (*((_DWORD *)this + 13) * v96)), 1, (const float *)(*((_QWORD *)this + 124) + 4 * (*((_DWORD *)this + 13) * v96)), 1, *((const float **)this + 133), 1, *((float **)this + 133), 1, *((unsigned int *)this + 13));
        v95 = *((_DWORD *)this + 12);
      }
      ++v96;
    }
    while (v96 < (2 * v95));
  }
  vDSP_vadd(*((const float **)this + 110), 1, *((const float **)this + 101), 1, *((float **)this + 107), 1, *((unsigned int *)this + 13));
  vDSP_vmul(*((const float **)this + 92), 1, *((const float **)this + 107), 1, *((float **)this + 107), 1, *((unsigned int *)this + 13));
  vDSP_svdiv(v35, *((const float **)this + 107), 1, *((float **)this + 107), 1, *((unsigned int *)this + 13));
  vDSP_vmma(*((const float **)this + 104), 1, *((const float **)this + 49), 1, *((const float **)this + 107), 1, *((const float **)this + 133), 1, *((float **)this + 49), 1, *((unsigned int *)this + 13));
  memcpy(*((void **)this + 59), *((const void **)this + 56), 4 * *((unsigned int *)this + 15));
  memcpy(*((void **)this + 62), (const void *)(*((_QWORD *)this + 56) + 4 * *((unsigned int *)this + 15)), 4 * *((unsigned int *)this + 15));
  memcpy((void *)(*((_QWORD *)this + 59) + 4 * *((unsigned int *)this + 15)), *((const void **)this + 127), 4 * *((unsigned int *)this + 15));
  memcpy((void *)(*((_QWORD *)this + 62) + 4 * *((unsigned int *)this + 15)), (const void *)(*((_QWORD *)this + 127) + 4 * *((unsigned int *)this + 15)), 4 * *((unsigned int *)this + 15));
  vDSP_vfill(v35, *((float **)this + 136), 1, *((unsigned int *)this + 13));
  bzero(*((void **)this + 145), 4 * *((unsigned int *)this + 13));
  v97 = *((_DWORD *)this + 12);
  if (v97)
  {
    v98 = 0;
    v99 = (const float *)((char *)this + 44);
    v100 = 16;
    v101 = 1;
    do
    {
      if (((*(_QWORD *)(*((_QWORD *)this + 22) + ((v98 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v98) & 1) != 0)
      {
        v102 = v98 + 1;
      }
      else
      {
        vDSP_zvmags((const DSPSplitComplex *)(*((_QWORD *)this + 65) + 16 * v98), 1, *((float **)this + 68), 1, *((unsigned int *)this + 13));
        vDSP_vmul(*((const float **)this + 136), 1, *((const float **)this + 98), 1, *((float **)this + 107), 1, *((unsigned int *)this + 13));
        __N = *(float **)(*((_QWORD *)this + 25) + 24 * v98);
        vDSP_vmma(*((const float **)this + 92), 1, __N, 1, *((const float **)this + 107), 1, *((const float **)this + 68), 1, __N, 1, *((unsigned int *)this + 13));
        v103 = *(float **)(*((_QWORD *)this + 25) + 24 * v98);
        vDSP_vthr(v103, 1, v99, v103, 1, *((unsigned int *)this + 13));
        vDSP_vneg(*((const float **)this + 107), 1, *((float **)this + 107), 1, *((unsigned int *)this + 13));
        vDSP_vdiv(*(const float **)(*((_QWORD *)this + 25) + 24 * v98), 1, *((const float **)this + 107), 1, *((float **)this + 107), 1, *((unsigned int *)this + 13));
        vDSP_zrvmul((const DSPSplitComplex *)(*((_QWORD *)this + 65) + 16 * v98), 1, *((const float **)this + 107), 1, (const DSPSplitComplex *)((char *)this + 952), 1, *((unsigned int *)this + 13));
        vDSP_zvconj((const DSPSplitComplex *)((char *)this + 952), 1, (const DSPSplitComplex *)((char *)this + 952), 1, *((unsigned int *)this + 13));
        vDSP_vmul(*((const float **)this + 107), 1, *((const float **)this + 68), 1, *((float **)this + 107), 1, *((unsigned int *)this + 13));
        vDSP_vsadd(*((const float **)this + 107), 1, v35, *((float **)this + 107), 1, *((unsigned int *)this + 13));
        vDSP_vthr(*((const float **)this + 107), 1, v194, *((float **)this + 107), 1, *((unsigned int *)this + 13));
        vDSP_vmul(*((const float **)this + 136), 1, *((const float **)this + 107), 1, *((float **)this + 136), 1, *((unsigned int *)this + 13));
        vvlogf(*((float **)this + 133), *(const float **)(*((_QWORD *)this + 25) + 24 * v98), &v199);
        vDSP_vadd(*((const float **)this + 133), 1, *((const float **)this + 145), 1, *((float **)this + 145), 1, *((unsigned int *)this + 13));
        v102 = v98 + 1;
        v97 = *((_DWORD *)this + 12);
        if (v98 + 1 < 2 * v97)
        {
          v104 = v100;
          v105 = v101;
          do
          {
            if (((*(_QWORD *)(*((_QWORD *)this + 22) + ((v105 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v105) & 1) == 0)
            {
              if (v105 >= v97)
              {
                v106 = (const DSPSplitComplex *)(*(_QWORD *)(*((_QWORD *)this + 37) + 24 * v98) + v104);
                vDSP_zrvmul(v106, 1, *((const float **)this + 104), 1, v106, 1, *((unsigned int *)this + 13));
              }
              __Na = (float32x4_t **)(*(_QWORD *)(*((_QWORD *)this + 37) + 24 * v98) + v104);
              aDSP_zvmama((float32x4_t *)(*((_QWORD *)this + 65) + 16 * v98), 1, __Na, 1, (float32x4_t **)(*((_QWORD *)this + 65) + v104), 1, (float32x4_t **)this + 119, 1, __Na, 1, *((unsigned int *)this + 13));
              v97 = *((_DWORD *)this + 12);
            }
            ++v105;
            v104 += 16;
          }
          while (v105 < 2 * v97);
          v99 = (const float *)((char *)this + 44);
        }
      }
      ++v101;
      v100 += 16;
      v98 = v102;
      v107 = v102 >= v97;
      v35 = (const float *)((char *)this + 76);
    }
    while (!v107);
  }
  memcpy(*((void **)this + 130), (const void *)(*((_QWORD *)this + 59) + 4 * *((unsigned int *)this + 15)), 4 * *((unsigned int *)this + 15));
  memcpy((void *)(*((_QWORD *)this + 130) + 4 * *((unsigned int *)this + 15)), (const void *)(*((_QWORD *)this + 62) + 4 * *((unsigned int *)this + 15)), 4 * *((unsigned int *)this + 15));
  vDSP_vneg(*((const float **)this + 136), 1, *((float **)this + 71), 1, *((unsigned int *)this + 13));
  vDSP_vsadd(*((const float **)this + 71), 1, v35, *((float **)this + 71), 1, *((unsigned int *)this + 13));
  vDSP_vmul(*((const float **)this + 101), 1, *((const float **)this + 71), 1, *((float **)this + 71), 1, *((unsigned int *)this + 13));
  vDSP_vsadd(*((const float **)this + 49), 1, v191, *((float **)this + 80), 1, *((unsigned int *)this + 13));
  if (*((_BYTE *)this + 140))
  {
    memcpy(*((void **)this + 59), *((const void **)this + 56), 4 * *((unsigned int *)this + 15));
    memcpy(*((void **)this + 62), (const void *)(*((_QWORD *)this + 56) + 4 * *((unsigned int *)this + 15)), 4 * *((unsigned int *)this + 15));
    vDSP_vfill(v35, *((float **)this + 136), 1, *((unsigned int *)this + 13));
    bzero(*((void **)this + 148), 4 * *((unsigned int *)this + 13));
    v108 = *((unsigned int *)this + 12);
    v109 = (const float *)((char *)this + 8);
    if ((_DWORD)v108)
    {
      v110 = 0;
      v111 = 1;
      v112 = 16;
      do
      {
        if (((*(_QWORD *)(*((_QWORD *)this + 22) + ((v110 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v110) & 1) != 0)
        {
          v113 = v110 + 1;
        }
        else
        {
          vDSP_zvmags((const DSPSplitComplex *)(*((_QWORD *)this + 65) + 16 * v110), 1, *((float **)this + 68), 1, *((unsigned int *)this + 13));
          vDSP_vsmul(*((const float **)this + 136), 1, __B, *((float **)this + 107), 1, *((unsigned int *)this + 13));
          vDSP_vsmul(*(const float **)(*((_QWORD *)this + 28) + 24 * v110), 1, v109, *((float **)this + 133), 1, *((unsigned int *)this + 13));
          vDSP_vma(*((const float **)this + 107), 1, *((const float **)this + 68), 1, *((const float **)this + 133), 1, *((float **)this + 133), 1, *((unsigned int *)this + 13));
          vDSP_vthr(*((const float **)this + 133), 1, (const float *)this + 11, *((float **)this + 133), 1, *((unsigned int *)this + 13));
          vDSP_vneg(*((const float **)this + 107), 1, *((float **)this + 107), 1, *((unsigned int *)this + 13));
          vDSP_vdiv(*((const float **)this + 133), 1, *((const float **)this + 107), 1, *((float **)this + 107), 1, *((unsigned int *)this + 13));
          vDSP_zrvmul((const DSPSplitComplex *)(*((_QWORD *)this + 65) + 16 * v110), 1, *((const float **)this + 107), 1, (const DSPSplitComplex *)((char *)this + 952), 1, *((unsigned int *)this + 13));
          vDSP_zvconj((const DSPSplitComplex *)((char *)this + 952), 1, (const DSPSplitComplex *)((char *)this + 952), 1, *((unsigned int *)this + 13));
          vDSP_vmul(*((const float **)this + 107), 1, *((const float **)this + 68), 1, *((float **)this + 107), 1, *((unsigned int *)this + 13));
          vDSP_vsadd(*((const float **)this + 107), 1, v35, *((float **)this + 107), 1, *((unsigned int *)this + 13));
          vDSP_vthr(*((const float **)this + 107), 1, v194, *((float **)this + 107), 1, *((unsigned int *)this + 13));
          vDSP_vmul(*((const float **)this + 136), 1, *((const float **)this + 107), 1, *((float **)this + 136), 1, *((unsigned int *)this + 13));
          vvlogf(*((float **)this + 133), *((const float **)this + 133), &v199);
          vDSP_vadd(*((const float **)this + 133), 1, *((const float **)this + 148), 1, *((float **)this + 148), 1, *((unsigned int *)this + 13));
          v113 = v110 + 1;
          v108 = *((unsigned int *)this + 12);
          if (v110 + 1 < v108)
          {
            v114 = v112;
            v115 = v111;
            do
            {
              if (((*(_QWORD *)(*((_QWORD *)this + 22) + ((v115 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v115) & 1) == 0)
              {
                vDSP_zvma((const DSPSplitComplex *)(*(_QWORD *)(*((_QWORD *)this + 46) + 24 * v110) + v114), 1, (const DSPSplitComplex *)(*((_QWORD *)this + 65) + 16 * v110), 1, (const DSPSplitComplex *)(*((_QWORD *)this + 65) + v114), 1, (const DSPSplitComplex *)(*((_QWORD *)this + 65) + v114), 1, *((unsigned int *)this + 13));
                v108 = *((unsigned int *)this + 12);
              }
              ++v115;
              v114 += 16;
            }
            while (v115 < v108);
            v109 = (const float *)((char *)this + 8);
          }
        }
        ++v111;
        v112 += 16;
        v110 = v113;
        v107 = v113 >= v108;
        v35 = (const float *)((char *)this + 76);
      }
      while (!v107);
    }
    vDSP_vneg(*((const float **)this + 136), 1, *((float **)this + 142), 1, *((unsigned int *)this + 13));
    vDSP_vsadd(*((const float **)this + 142), 1, v35, *((float **)this + 142), 1, *((unsigned int *)this + 13));
    vDSP_vsmul(*((const float **)this + 142), 1, (const float *)this + 39, *((float **)this + 142), 1, *((unsigned int *)this + 13));
    v203[0] = 0.0;
    vDSP_vthr(*((const float **)this + 86), 1, v190, *((float **)this + 86), 1, *((unsigned int *)this + 13));
    vvlogf(*((float **)this + 86), *((const float **)this + 86), &v199);
    vDSP_meanv(*((const float **)this + 86), 1, v203, *((unsigned int *)this + 13));
    v203[0] = expf(v203[0]);
    v198 = (float)(*((float *)this + 19)
                 - (float)(*((float *)this + 19) - (float)(v203[0] / (float)(v203[0] + *((float *)this + 19)))))
         / fmaxf(*((float *)this + 19) - (float)(v203[0] / (float)(v203[0] + *((float *)this + 19))), *((float *)this + 10));
    vDSP_vsub(*((const float **)this + 145), 1, *((const float **)this + 148), 1, *((float **)this + 133), 1, *((unsigned int *)this + 13));
    vDSP_vthr(*((const float **)this + 133), 1, v194, *((float **)this + 133), 1, *((unsigned int *)this + 13));
    vDSP_vneg(*((const float **)this + 133), 1, *((float **)this + 86), 1, *((unsigned int *)this + 13));
    vDSP_vsub(*((const float **)this + 142), 1, *((const float **)this + 71), 1, *((float **)this + 133), 1, *((unsigned int *)this + 13));
    vDSP_vabs(*((const float **)this + 133), 1, *((float **)this + 133), 1, *((unsigned int *)this + 13));
    vDSP_vadd(*((const float **)this + 133), 1, *((const float **)this + 86), 1, *((float **)this + 86), 1, *((unsigned int *)this + 13));
    vvexpf(*((float **)this + 86), *((const float **)this + 86), &v199);
    vDSP_vsmul(*((const float **)this + 86), 1, &v198, *((float **)this + 86), 1, *((unsigned int *)this + 13));
    vDSP_vclip(*((const float **)this + 86), 1, v194, __C, *((float **)this + 86), 1, *((unsigned int *)this + 13));
    vDSP_vsadd(*((const float **)this + 86), 1, v35, *((float **)this + 89), 1, *((unsigned int *)this + 13));
    vDSP_vdiv(*((const float **)this + 89), 1, *((const float **)this + 86), 1, *((float **)this + 89), 1, *((unsigned int *)this + 13));
    vDSP_vsmsa(*((const float **)this + 89), 1, (const float *)this + 25, (const float *)this + 3, *((float **)this + 92), 1, *((unsigned int *)this + 13));
    vDSP_svdiv(v35, *((const float **)this + 92), 1, *((float **)this + 95), 1, *((unsigned int *)this + 13));
    vDSP_vneg(*((const float **)this + 92), 1, *((float **)this + 98), 1, *((unsigned int *)this + 13));
    vDSP_vsadd(*((const float **)this + 98), 1, v35, *((float **)this + 98), 1, *((unsigned int *)this + 13));
    vDSP_svdiv(v35, *((const float **)this + 98), 1, *((float **)this + 101), 1, *((unsigned int *)this + 13));
    vDSP_vsmul(*((const float **)this + 92), 1, (const float *)this + 38, *((float **)this + 104), 1, *((unsigned int *)this + 13));
    vDSP_vsmul(*((const float **)this + 98), 1, (const float *)this + 39, *((float **)this + 133), 1, *((unsigned int *)this + 13));
    v116 = *((unsigned int *)this + 12);
    if ((_DWORD)v116)
    {
      for (kk = 0; kk < v116; ++kk)
      {
        if (((*(_QWORD *)(*((_QWORD *)this + 22) + ((kk >> 3) & 0x1FFFFFFFFFFFFFF8)) >> kk) & 1) == 0)
        {
          v118 = *((unsigned int *)this + 13);
          v119 = *((_QWORD *)this + 127);
          v120 = *((_DWORD *)this + 15) + v118 * kk;
          __A.realp = (float *)(v119 + 4 * (v118 * kk));
          __A.imagp = (float *)(v119 + 4 * v120);
          v121 = *((_QWORD *)this + 56);
          v201.realp = (float *)(v121 + 4 * (v118 * kk));
          v201.imagp = (float *)(v121 + 4 * v120);
          vDSP_zrvmul(&v201, 1, *((const float **)this + 133), 1, &__A, 1, v118);
          v116 = *((unsigned int *)this + 12);
        }
      }
    }
    memcpy(*((void **)this + 59), *((const void **)this + 56), 4 * *((unsigned int *)this + 15));
    memcpy(*((void **)this + 62), (const void *)(*((_QWORD *)this + 56) + 4 * *((unsigned int *)this + 15)), 4 * *((unsigned int *)this + 15));
    memcpy((void *)(*((_QWORD *)this + 59) + 4 * *((unsigned int *)this + 15)), *((const void **)this + 127), 4 * *((unsigned int *)this + 15));
    memcpy((void *)(*((_QWORD *)this + 62) + 4 * *((unsigned int *)this + 15)), (const void *)(*((_QWORD *)this + 127) + 4 * *((unsigned int *)this + 15)), 4 * *((unsigned int *)this + 15));
    vDSP_vfill(v35, *((float **)this + 136), 1, *((unsigned int *)this + 13));
    v122 = *((_DWORD *)this + 12);
    if (v122)
    {
      v123 = 0;
      v124 = 16;
      v125 = 1;
      do
      {
        if (((*(_QWORD *)(*((_QWORD *)this + 22) + ((v123 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v123) & 1) != 0)
        {
          v126 = v123 + 1;
        }
        else
        {
          vDSP_zvmags((const DSPSplitComplex *)(*((_QWORD *)this + 65) + 16 * v123), 1, *((float **)this + 68), 1, *((unsigned int *)this + 13));
          vDSP_vsmul(*((const float **)this + 136), 1, __B, *((float **)this + 107), 1, *((unsigned int *)this + 13));
          v127 = *(float **)(*((_QWORD *)this + 28) + 24 * v123);
          vDSP_vsmul(v127, 1, v109, v127, 1, *((unsigned int *)this + 13));
          v128 = *(float **)(*((_QWORD *)this + 28) + 24 * v123);
          vDSP_vma(*((const float **)this + 107), 1, *((const float **)this + 68), 1, v128, 1, v128, 1, *((unsigned int *)this + 13));
          v129 = *(float **)(*((_QWORD *)this + 28) + 24 * v123);
          vDSP_vthr(v129, 1, (const float *)this + 11, v129, 1, *((unsigned int *)this + 13));
          vDSP_vneg(*((const float **)this + 107), 1, *((float **)this + 107), 1, *((unsigned int *)this + 13));
          vDSP_vdiv(*(const float **)(*((_QWORD *)this + 28) + 24 * v123), 1, *((const float **)this + 107), 1, *((float **)this + 107), 1, *((unsigned int *)this + 13));
          vDSP_zrvmul((const DSPSplitComplex *)(*((_QWORD *)this + 65) + 16 * v123), 1, *((const float **)this + 107), 1, (const DSPSplitComplex *)((char *)this + 952), 1, *((unsigned int *)this + 13));
          vDSP_zvconj((const DSPSplitComplex *)((char *)this + 952), 1, (const DSPSplitComplex *)((char *)this + 952), 1, *((unsigned int *)this + 13));
          vDSP_vmul(*((const float **)this + 107), 1, *((const float **)this + 68), 1, *((float **)this + 107), 1, *((unsigned int *)this + 13));
          vDSP_vsadd(*((const float **)this + 107), 1, v35, *((float **)this + 107), 1, *((unsigned int *)this + 13));
          vDSP_vthr(*((const float **)this + 107), 1, v194, *((float **)this + 107), 1, *((unsigned int *)this + 13));
          vDSP_vmul(*((const float **)this + 136), 1, *((const float **)this + 107), 1, *((float **)this + 136), 1, *((unsigned int *)this + 13));
          v126 = v123 + 1;
          v122 = *((_DWORD *)this + 12);
          if (v123 + 1 < 2 * v122)
          {
            v130 = v124;
            v131 = v125;
            do
            {
              if (((*(_QWORD *)(*((_QWORD *)this + 22) + ((v131 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v131) & 1) == 0)
              {
                if (v131 >= v122)
                {
                  v132 = (const DSPSplitComplex *)(*(_QWORD *)(*((_QWORD *)this + 46) + 24 * v123) + v130);
                  vDSP_zrvmul(v132, 1, *((const float **)this + 104), 1, v132, 1, *((unsigned int *)this + 13));
                }
                __Nb = (float32x4_t **)(*(_QWORD *)(*((_QWORD *)this + 46) + 24 * v123) + v130);
                aDSP_zvmama((float32x4_t *)(*((_QWORD *)this + 65) + 16 * v123), 1, __Nb, 1, (float32x4_t **)(*((_QWORD *)this + 65) + v130), 1, (float32x4_t **)this + 119, 1, __Nb, 1, *((unsigned int *)this + 13));
                v122 = *((_DWORD *)this + 12);
              }
              ++v131;
              v130 += 16;
            }
            while (v131 < 2 * v122);
          }
          v109 = (const float *)((char *)this + 8);
        }
        ++v125;
        v124 += 16;
        v123 = v126;
        v107 = v126 >= v122;
        v35 = (const float *)((char *)this + 76);
      }
      while (!v107);
    }
    memcpy(*((void **)this + 130), (const void *)(*((_QWORD *)this + 59) + 4 * *((unsigned int *)this + 15)), 4 * *((unsigned int *)this + 15));
    memcpy((void *)(*((_QWORD *)this + 130) + 4 * *((unsigned int *)this + 15)), (const void *)(*((_QWORD *)this + 62) + 4 * *((unsigned int *)this + 15)), 4 * *((unsigned int *)this + 15));
    v133 = *((unsigned int *)this + 12);
    if ((_DWORD)v133)
    {
      for (mm = 0; mm < v133; ++mm)
      {
        if (((*(_QWORD *)(*((_QWORD *)this + 22) + ((mm >> 3) & 0x1FFFFFFFFFFFFFF8)) >> mm) & 1) == 0)
        {
          v135 = *((unsigned int *)this + 13);
          v136 = *((_QWORD *)this + 139);
          v137 = v135 * mm + *((_DWORD *)this + 15);
          __A.realp = (float *)(v136 + 4 * (v135 * mm));
          __A.imagp = (float *)(v136 + 4 * v137);
          v138 = *((_QWORD *)this + 127);
          v201.realp = (float *)(v138 + 4 * (v135 * mm));
          v201.imagp = (float *)(v138 + 4 * v137);
          v139 = *((_QWORD *)this + 130);
          __D.realp = (float *)(v139 + 4 * (v135 * mm));
          __D.imagp = (float *)(v139 + 4 * v137);
          vDSP_zrvmul(&__D, 1, *((const float **)this + 136), 1, &__A, 1, v135);
          vDSP_zvsub(&v201, 1, &__A, 1, &__A, 1, *((unsigned int *)this + 13));
          v133 = *((unsigned int *)this + 12);
        }
      }
      if (v133)
      {
        for (nn = 0; nn < v133; ++nn)
        {
          if (((*(_QWORD *)(*((_QWORD *)this + 22) + ((nn >> 3) & 0x1FFFFFFFFFFFFFF8)) >> nn) & 1) == 0)
          {
            v141 = *((unsigned int *)this + 13);
            v142 = *((_QWORD *)this + 56);
            v143 = v141 * nn + *((_DWORD *)this + 15);
            __A.realp = (float *)(v142 + 4 * (v141 * nn));
            __A.imagp = (float *)(v142 + 4 * v143);
            v144 = *((_QWORD *)this + 139);
            v201.realp = (float *)(v144 + 4 * (v141 * nn));
            v201.imagp = (float *)(v144 + 4 * v143);
            vDSP_zvsub(&__A, 1, &v201, 1, &__A, 1, v141);
            v133 = *((unsigned int *)this + 12);
          }
        }
      }
    }
  }
  else
  {
    v145 = *((unsigned int *)this + 12);
    if ((_DWORD)v145)
    {
      for (i1 = 0; i1 < v145; ++i1)
      {
        if (((*(_QWORD *)(*((_QWORD *)this + 22) + ((i1 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> i1) & 1) == 0)
        {
          v147 = *((unsigned int *)this + 13);
          v148 = *((_QWORD *)this + 139);
          v149 = *((_DWORD *)this + 15) + v147 * i1;
          __A.realp = (float *)(v148 + 4 * (v147 * i1));
          __A.imagp = (float *)(v148 + 4 * v149);
          v150 = *((_QWORD *)this + 127);
          v201.realp = (float *)(v150 + 4 * (v147 * i1));
          v201.imagp = (float *)(v150 + 4 * v149);
          v151 = *((_QWORD *)this + 130);
          __D.realp = (float *)(v151 + 4 * (v147 * i1));
          __D.imagp = (float *)(v151 + 4 * v149);
          vDSP_zrvmul(&__D, 1, *((const float **)this + 136), 1, &__A, 1, v147);
          vDSP_zvsub(&v201, 1, &__A, 1, &__A, 1, *((unsigned int *)this + 13));
          v145 = *((unsigned int *)this + 12);
        }
      }
    }
    vDSP_vsadd(*((const float **)this + 80), 1, (const float *)this + 5, *((float **)this + 133), 1, *((unsigned int *)this + 13));
    vDSP_vsadd(*((const float **)this + 133), 1, v190, *((float **)this + 133), 1, *((unsigned int *)this + 13));
    v152 = *((unsigned int *)this + 13);
    v153 = (float *)*((_QWORD *)this + 133);
    if ((_DWORD)v152)
    {
      v154 = (float *)*((_QWORD *)this + 133);
      v155 = *((unsigned int *)this + 13);
      do
      {
        if (*v154 == *v194)
          *v154 = *v190;
        ++v154;
        --v155;
      }
      while (v155);
    }
    else
    {
      v152 = 0;
    }
    vDSP_svdiv(v35, v153, 1, v153, 1, v152);
    v156 = *((unsigned int *)this + 12);
    if ((_DWORD)v156)
    {
      for (i2 = 0; i2 < v156; ++i2)
      {
        if (((*(_QWORD *)(*((_QWORD *)this + 22) + ((i2 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> i2) & 1) == 0)
        {
          v158 = *((unsigned int *)this + 13);
          v159 = *((_QWORD *)this + 56);
          v160 = *((_DWORD *)this + 15) + v158 * i2;
          __A.realp = (float *)(v159 + 4 * (v158 * i2));
          __A.imagp = (float *)(v159 + 4 * v160);
          v161 = *((_QWORD *)this + 139);
          v201.realp = (float *)(v161 + 4 * (v158 * i2));
          v201.imagp = (float *)(v161 + 4 * v160);
          vDSP_zvsub(&v201, 1, &__A, 1, &__A, 1, v158);
          vDSP_zrvmul(&__A, 1, *((const float **)this + 133), 1, &__A, 1, *((unsigned int *)this + 13));
          v156 = *((unsigned int *)this + 12);
        }
      }
    }
  }
  vDSP_meanv(*((const float **)this + 89), 1, (float *)this + 380, *((unsigned int *)this + 13));
  v198 = 0.0;
  v197 = 0;
  v196 = 0.0;
  memcpy(*((void **)this + 169), *((const void **)this + 71), 4 * *((unsigned int *)this + 13));
  memcpy(*((void **)this + 172), *((const void **)this + 49), 4 * *((unsigned int *)this + 13));
  if (*((_DWORD *)this + 27) == 1)
  {
    v162 = *((_DWORD *)this + 28);
    if (v162)
    {
      v163 = (v162 - 1);
      if (v162 != 1)
      {
        v164 = v162 - 2;
        v165 = *((_QWORD *)this + 160);
        v166 = *((_QWORD *)this + 163);
        do
        {
          v167 = 4 * v163;
          *(_DWORD *)(v165 + v167) = *(_DWORD *)(v165 + 4 * v164);
          *(_DWORD *)(v166 + v167) = *(_DWORD *)(v166 + 4 * v164--);
          --v163;
        }
        while (v163);
      }
      vDSP_meanv(*((const float **)this + 169), 1, &v198, *((unsigned int *)this + 13));
      vDSP_meanv(*((const float **)this + 172), 1, (float *)&v197 + 1, *((unsigned int *)this + 13));
      **((float **)this + 163) = *((float *)this + 30) * *((float *)&v197 + 1);
      v168 = (float *)*((_QWORD *)this + 160);
      *v168 = *((float *)this + 30) * v198;
      vDSP_minv(v168, 1, (float *)&v197, *((unsigned int *)this + 28));
      vDSP_minv(*((const float **)this + 163), 1, &v196, *((unsigned int *)this + 28));
      v170 = v196;
      v169 = *(float *)&v197;
      LODWORD(__A.realp) = 0;
      vDSP_meanv(*((const float **)this + 169), 1, (float *)&__A, *((unsigned int *)this + 13));
      v171 = 0.0;
      if (*(float *)&__A.realp < v169)
        v171 = 1.0;
      *(float *)&v201.realp = v171;
      v172 = *((unsigned int *)this + 13);
      if ((_DWORD)v172)
      {
        v173 = 0;
        v174 = *((_QWORD *)this + 172);
        v175 = (float *)*((_QWORD *)this + 181);
        do
        {
          v175[v173] = (float)(v170 - *(float *)(v174 + v173 * 4)) / (float)(v170 - *((float *)this + 21));
          ++v173;
        }
        while (v172 != v173);
      }
      else
      {
        v172 = 0;
        v175 = (float *)*((_QWORD *)this + 181);
      }
      LODWORD(__D.realp) = 0;
      v203[0] = 1.0;
      vDSP_vclip(v175, 1, (const float *)&__D, v203, v175, 1, v172);
      v176 = *((unsigned int *)this + 13);
      if ((_DWORD)v176)
      {
        v177 = 0;
        v178 = (float *)*((_QWORD *)this + 172);
        v179 = *((_QWORD *)this + 169);
        do
        {
          v180 = v178[v177];
          if (v180 >= v170 || v180 < *((float *)this + 21))
          {
            v182 = (const float *)*((_QWORD *)this + 184);
            v183 = 0.0;
          }
          else
          {
            v182 = (const float *)*((_QWORD *)this + 184);
            v183 = 0.0;
            if (*(float *)(v179 + v177 * 4) < v169)
              v183 = *(float *)(*((_QWORD *)this + 181) + v177 * 4);
          }
          v182[v177++] = v183;
        }
        while (v176 != v177);
        v184 = (float *)*((_QWORD *)this + 169);
        v185 = v176;
        v186 = (float *)v182;
        do
        {
          if (*v178 < *((float *)this + 21) && *v184 < v169)
            *v186 = 1.0;
          ++v186;
          ++v184;
          ++v178;
          --v185;
        }
        while (v185);
      }
      else
      {
        v176 = 0;
        v182 = (const float *)*((_QWORD *)this + 184);
      }
      vDSP_vsmul(v182, 1, (const float *)&v201, *((float **)this + 166), 1, v176);
      vDSP_vclip(*((const float **)this + 166), 1, (const float *)this + 33, (const float *)this + 32, *((float **)this + 166), 1, *((unsigned int *)this + 13));
    }
  }
}

void PMWF_FAST_GS_vDSP::ProcessBufferList(PMWF_FAST_GS_vDSP *this, const AudioBufferList *a2, const AudioBufferList *a3, AudioBufferList *a4, AudioBufferList *a5, int a6, int a7)
{
  int v12;
  AudioBufferList *v13;
  unint64_t v14;
  const AudioBufferList *v15;
  void **p_mData;
  float v17;
  float v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unsigned int v23;
  float v24;
  float v25;
  float *v26;
  float v27;
  unint64_t v28;
  void **v29;
  unint64_t v30;
  void **v31;
  const AudioBufferList *v32;
  unint64_t v33;
  void **v34;
  void **v35;
  void *v36;
  void *v37;
  void *v38;
  unint64_t v39;
  unint64_t v41;
  void **v42;
  void **v43;
  void *v44;
  void *v45;
  void *v46;
  int v47;
  unsigned int v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t i;
  vDSP_Length v57;
  uint64_t v58;
  unsigned int v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  unint64_t v66;
  vDSP_Length v67;
  float *v68;
  float *v69;
  uint64_t v70;
  unint64_t v71;
  unint64_t j;
  vDSP_Length v73;
  uint64_t v74;
  unsigned int v75;
  uint64_t v76;
  const float *v77;
  int v78;
  unsigned int v79;
  unint64_t v80;
  uint64_t v81;
  uint64_t v82;
  unint64_t v83;
  uint64_t v84;
  unint64_t v85;
  unint64_t v86;
  unint64_t k;
  vDSP_Length v88;
  uint64_t v89;
  unsigned int v90;
  uint64_t v91;
  unint64_t v92;
  uint64_t v93;
  uint64_t v94;
  unint64_t v95;
  uint64_t v96;
  unint64_t v97;
  vDSP_Length v98;
  float *v99;
  float *v100;
  uint64_t v101;
  unint64_t v102;
  unint64_t m;
  vDSP_Length v104;
  uint64_t v105;
  unsigned int v106;
  uint64_t v107;
  unint64_t v108;
  char *v109;
  float *v110;
  _QWORD *v111;
  float *v112;
  char *v113;
  uint64_t v114;
  const float **v115;
  uint64_t v116;
  vDSP_Length v117;
  uint64_t v118;
  float *mData;
  float *v120;
  uint64_t v121;
  int v122;
  unsigned int v123;
  uint64_t v124;
  uint64_t v125;
  float v126;
  uint64_t v127;
  float v128;
  float v129;
  float v130;
  float v131;
  uint64_t v132;
  const AudioBufferList *v133;
  AudioBufferList *v134;
  AudioBufferList *v135;
  const AudioBufferList *v136;
  DSPSplitComplex __B;
  DSPSplitComplex __C;

  v12 = *((_DWORD *)this + 12);
  *((_DWORD *)this + 42) = v12;
  if (v12)
  {
    v13 = a4;
    v14 = 0;
    v15 = a2;
    p_mData = &a2->mBuffers[0].mData;
    v17 = 0.0;
    do
    {
      v18 = cblas_sdot(2 * *((_DWORD *)this + 13) - 2, (const float *)*p_mData, 1, (const float *)*p_mData, 1);
      v19 = *((_QWORD *)this + 22);
      *(_QWORD *)(v19 + 8 * (v14 >> 6)) &= ~(1 << v14);
      v20 = *((unsigned int *)this + 12);
      v21 = (unint64_t)(v14 + v20) >> 6;
      v22 = 1 << (v14 + v20);
      *(_QWORD *)(v19 + 8 * v21) &= ~v22;
      if (v18 == 0.0)
      {
        --*((_DWORD *)this + 42);
        *(_QWORD *)(v19 + 8 * (v14 >> 6)) |= 1 << v14;
        *(_QWORD *)(v19 + 8 * v21) |= v22;
      }
      else
      {
        v17 = v17 + v18;
      }
      ++v14;
      p_mData += 2;
    }
    while (v14 < v20);
    v23 = *((_DWORD *)this + 42);
    if (v23)
    {
      v24 = (float)v23;
      v25 = v17 / (float)v23;
    }
    else
    {
      v24 = 0.0;
      v25 = 0.0;
    }
    a4 = v13;
    a2 = v15;
  }
  else
  {
    v23 = 0;
    v20 = 0;
    v24 = 0.0;
    v25 = 0.0;
  }
  v26 = (float *)((char *)this + 40);
  v27 = *((float *)this + 10);
  *((float *)this + 21) = v24;
  *((float *)this + 22) = -v24;
  if (v25 <= v27 || v23 < 2 || (LODWORD(v25) & 0x7FFFFFFFu) >= 0x7F800000)
  {
    if (v20)
    {
      v33 = 0;
      v34 = &a2->mBuffers[0].mData;
      v35 = &a4->mBuffers[0].mData;
      do
      {
        v37 = *v35;
        v35 += 2;
        v36 = v37;
        v38 = *v34;
        v34 += 2;
        memcpy(v36, v38, 4 * (2 * *((_DWORD *)this + 13) - 2));
        ++v33;
        v39 = *((unsigned int *)this + 12);
      }
      while (v33 < v39);
      if ((_DWORD)v39 && a6 != 0)
      {
        v41 = 0;
        v42 = &a3->mBuffers[0].mData;
        v43 = &a5->mBuffers[0].mData;
        do
        {
          v45 = *v43;
          v43 += 2;
          v44 = v45;
          v46 = *v42;
          v42 += 2;
          memcpy(v44, v46, 4 * (2 * *((_DWORD *)this + 13) - 2));
          ++v41;
        }
        while (v41 < *((unsigned int *)this + 12));
      }
    }
  }
  else
  {
    v135 = a4;
    v136 = a2;
    if (v20)
    {
      v28 = 0;
      v29 = &a2->mBuffers[0].mData;
      do
      {
        if (((*(_QWORD *)(*((_QWORD *)this + 22) + ((v28 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v28) & 1) == 0)
        {
          vDSP_vsmul((const float *)*v29, 1, (const float *)this + 40, (float *)(*((_QWORD *)this + 56) + 4 * (*((_DWORD *)this + 13) * v28)), 1, *((unsigned int *)this + 13));
          vDSP_vsmul((const float *)*v29 + *((unsigned int *)this + 13), 1, (const float *)this + 40, (float *)(*((_QWORD *)this + 56)+ 4 * (*((_DWORD *)this + 15) + *((_DWORD *)this + 13) * v28 + 1)), 1, (*((_DWORD *)this + 13) - 2));
          v20 = *((unsigned int *)this + 12);
        }
        ++v28;
        v29 += 2;
      }
      while (v28 < v20);
      if (v20 && a6)
      {
        v30 = 0;
        v31 = &a3->mBuffers[0].mData;
        do
        {
          if (((*(_QWORD *)(*((_QWORD *)this + 22) + ((v30 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v30) & 1) == 0)
          {
            vDSP_vsmul((const float *)*v31, 1, (const float *)this + 40, (float *)(*((_QWORD *)this + 157) + 4 * (*((_DWORD *)this + 13) * v30)), 1, *((unsigned int *)this + 13));
            vDSP_vsmul((const float *)*v31 + *((unsigned int *)this + 13), 1, (const float *)this + 40, (float *)(*((_QWORD *)this + 157)+ 4 * (*((_DWORD *)this + 15) + *((_DWORD *)this + 13) * v30 + 1)), 1, (*((_DWORD *)this + 13) - 2));
            v20 = *((unsigned int *)this + 12);
          }
          ++v30;
          v31 += 2;
        }
        while (v30 < v20);
      }
    }
    v133 = a3;
    v134 = a5;
    if (a7)
    {
      PMWF_FAST_GS_vDSP::ProcessOneFrame(this);
      v32 = v136;
    }
    else
    {
      v47 = *((unsigned __int8 *)this + 140);
      memcpy(*((void **)this + 59), *((const void **)this + 56), 4 * *((unsigned int *)this + 15));
      memcpy(*((void **)this + 62), (const void *)(*((_QWORD *)this + 56) + 4 * *((unsigned int *)this + 15)), 4 * *((unsigned int *)this + 15));
      bzero((void *)(*((_QWORD *)this + 59) + 4 * *((unsigned int *)this + 15)), 4 * *((unsigned int *)this + 15));
      bzero((void *)(*((_QWORD *)this + 62) + 4 * *((unsigned int *)this + 15)), 4 * *((unsigned int *)this + 15));
      v48 = *((_DWORD *)this + 12);
      if (v47)
      {
        if (v48)
        {
          v49 = 0;
          v50 = 1;
          v51 = 16;
          do
          {
            v52 = v49 + 1;
            if (((*(_QWORD *)(*((_QWORD *)this + 22) + ((v49 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v49) & 1) == 0
              && v52 < 2 * v48)
            {
              v53 = v51;
              v54 = v50;
              do
              {
                if (((*(_QWORD *)(*((_QWORD *)this + 22) + ((v54 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v54) & 1) == 0)
                {
                  vDSP_zvma((const DSPSplitComplex *)(*(_QWORD *)(*((_QWORD *)this + 46) + 24 * v49) + v53), 1, (const DSPSplitComplex *)(*((_QWORD *)this + 65) + 16 * v49), 1, (const DSPSplitComplex *)(*((_QWORD *)this + 65) + v53), 1, (const DSPSplitComplex *)(*((_QWORD *)this + 65) + v53), 1, *((unsigned int *)this + 13));
                  v48 = *((_DWORD *)this + 12);
                }
                ++v54;
                v53 += 16;
              }
              while (v54 < 2 * v48);
            }
            ++v50;
            v51 += 16;
            ++v49;
          }
          while (v52 < v48);
        }
        vDSP_vneg((const float *)(*((_QWORD *)this + 59) + 4 * *((unsigned int *)this + 15)), 1, *((float **)this + 139), 1, *((unsigned int *)this + 15));
        vDSP_vneg((const float *)(*((_QWORD *)this + 62) + 4 * *((unsigned int *)this + 15)), 1, (float *)(*((_QWORD *)this + 139) + 4 * *((unsigned int *)this + 15)), 1, *((unsigned int *)this + 15));
        v55 = *((unsigned int *)this + 12);
        a5 = v134;
        v32 = v136;
        if ((_DWORD)v55)
        {
          for (i = 0; i < v55; ++i)
          {
            if (((*(_QWORD *)(*((_QWORD *)this + 22) + ((i >> 3) & 0x1FFFFFFFFFFFFFF8)) >> i) & 1) == 0)
            {
              v57 = *((unsigned int *)this + 13);
              v58 = *((_QWORD *)this + 56);
              v59 = *((_DWORD *)this + 15) + v57 * i;
              __C.realp = (float *)(v58 + 4 * (v57 * i));
              __C.imagp = (float *)(v58 + 4 * v59);
              v60 = *((_QWORD *)this + 139);
              __B.realp = (float *)(v60 + 4 * (v57 * i));
              __B.imagp = (float *)(v60 + 4 * v59);
              vDSP_zvsub(&__C, 1, &__B, 1, &__C, 1, v57);
              v55 = *((unsigned int *)this + 12);
            }
          }
        }
      }
      else
      {
        if (v48)
        {
          v61 = 0;
          v62 = 1;
          v63 = 16;
          do
          {
            v64 = v61 + 1;
            if (((*(_QWORD *)(*((_QWORD *)this + 22) + ((v61 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v61) & 1) == 0
              && v64 < 2 * v48)
            {
              v65 = v63;
              v66 = v62;
              do
              {
                if (((*(_QWORD *)(*((_QWORD *)this + 22) + ((v66 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v66) & 1) == 0)
                {
                  vDSP_zvma((const DSPSplitComplex *)(*(_QWORD *)(*((_QWORD *)this + 37) + 24 * v61) + v65), 1, (const DSPSplitComplex *)(*((_QWORD *)this + 65) + 16 * v61), 1, (const DSPSplitComplex *)(*((_QWORD *)this + 65) + v65), 1, (const DSPSplitComplex *)(*((_QWORD *)this + 65) + v65), 1, *((unsigned int *)this + 13));
                  v48 = *((_DWORD *)this + 12);
                }
                ++v66;
                v65 += 16;
              }
              while (v66 < 2 * v48);
            }
            ++v62;
            v63 += 16;
            ++v61;
          }
          while (v64 < v48);
        }
        vDSP_vneg((const float *)(*((_QWORD *)this + 59) + 4 * *((unsigned int *)this + 15)), 1, *((float **)this + 139), 1, *((unsigned int *)this + 15));
        vDSP_vneg((const float *)(*((_QWORD *)this + 62) + 4 * *((unsigned int *)this + 15)), 1, (float *)(*((_QWORD *)this + 139) + 4 * *((unsigned int *)this + 15)), 1, *((unsigned int *)this + 15));
        vDSP_vsadd(*((const float **)this + 80), 1, (const float *)this + 5, *((float **)this + 133), 1, *((unsigned int *)this + 13));
        vDSP_vsadd(*((const float **)this + 133), 1, (const float *)this + 10, *((float **)this + 133), 1, *((unsigned int *)this + 13));
        v67 = *((unsigned int *)this + 13);
        v68 = (float *)*((_QWORD *)this + 133);
        if ((_DWORD)v67)
        {
          v69 = (float *)*((_QWORD *)this + 133);
          v70 = *((unsigned int *)this + 13);
          a5 = v134;
          v32 = v136;
          do
          {
            if (*v69 == *((float *)this + 18))
              *v69 = *v26;
            ++v69;
            --v70;
          }
          while (v70);
        }
        else
        {
          v67 = 0;
          a5 = v134;
          v32 = v136;
        }
        vDSP_svdiv((const float *)this + 19, v68, 1, v68, 1, v67);
        v71 = *((unsigned int *)this + 12);
        if ((_DWORD)v71)
        {
          for (j = 0; j < v71; ++j)
          {
            if (((*(_QWORD *)(*((_QWORD *)this + 22) + ((j >> 3) & 0x1FFFFFFFFFFFFFF8)) >> j) & 1) == 0)
            {
              v73 = *((unsigned int *)this + 13);
              v74 = *((_QWORD *)this + 56);
              v75 = *((_DWORD *)this + 15) + v73 * j;
              __C.realp = (float *)(v74 + 4 * (v73 * j));
              __C.imagp = (float *)(v74 + 4 * v75);
              v76 = *((_QWORD *)this + 139);
              __B.realp = (float *)(v76 + 4 * (v73 * j));
              __B.imagp = (float *)(v76 + 4 * v75);
              vDSP_zvsub(&__B, 1, &__C, 1, &__C, 1, v73);
              vDSP_zrvmul(&__C, 1, *((const float **)this + 133), 1, &__C, 1, *((unsigned int *)this + 13));
              v71 = *((unsigned int *)this + 12);
            }
          }
        }
      }
    }
    v77 = (const float *)((char *)this + 164);
    vDSP_vsmul(*((const float **)this + 56), 1, (const float *)this + 41, *((float **)this + 56), 1, (2 * *((_DWORD *)this + 15)));
    if (a6)
    {
      v78 = *((unsigned __int8 *)this + 140);
      memcpy(*((void **)this + 59), *((const void **)this + 157), 4 * *((unsigned int *)this + 15));
      memcpy(*((void **)this + 62), (const void *)(*((_QWORD *)this + 157) + 4 * *((unsigned int *)this + 15)), 4 * *((unsigned int *)this + 15));
      bzero((void *)(*((_QWORD *)this + 59) + 4 * *((unsigned int *)this + 15)), 4 * *((unsigned int *)this + 15));
      bzero((void *)(*((_QWORD *)this + 62) + 4 * *((unsigned int *)this + 15)), 4 * *((unsigned int *)this + 15));
      v79 = *((_DWORD *)this + 12);
      if (v78)
      {
        if (v79)
        {
          v80 = 0;
          v81 = 1;
          v82 = 16;
          do
          {
            v83 = v80 + 1;
            if (((*(_QWORD *)(*((_QWORD *)this + 22) + ((v80 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v80) & 1) == 0
              && v83 < 2 * v79)
            {
              v84 = v82;
              v85 = v81;
              do
              {
                if (((*(_QWORD *)(*((_QWORD *)this + 22) + ((v85 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v85) & 1) == 0)
                {
                  vDSP_zvma((const DSPSplitComplex *)(*(_QWORD *)(*((_QWORD *)this + 46) + 24 * v80) + v84), 1, (const DSPSplitComplex *)(*((_QWORD *)this + 65) + 16 * v80), 1, (const DSPSplitComplex *)(*((_QWORD *)this + 65) + v84), 1, (const DSPSplitComplex *)(*((_QWORD *)this + 65) + v84), 1, *((unsigned int *)this + 13));
                  v79 = *((_DWORD *)this + 12);
                }
                ++v85;
                v84 += 16;
              }
              while (v85 < 2 * v79);
            }
            ++v81;
            v82 += 16;
            ++v80;
          }
          while (v83 < v79);
        }
        vDSP_vneg((const float *)(*((_QWORD *)this + 59) + 4 * *((unsigned int *)this + 15)), 1, *((float **)this + 139), 1, *((unsigned int *)this + 15));
        vDSP_vneg((const float *)(*((_QWORD *)this + 62) + 4 * *((unsigned int *)this + 15)), 1, (float *)(*((_QWORD *)this + 139) + 4 * *((unsigned int *)this + 15)), 1, *((unsigned int *)this + 15));
        v86 = *((unsigned int *)this + 12);
        a5 = v134;
        v32 = v136;
        if ((_DWORD)v86)
        {
          for (k = 0; k < v86; ++k)
          {
            if (((*(_QWORD *)(*((_QWORD *)this + 22) + ((k >> 3) & 0x1FFFFFFFFFFFFFF8)) >> k) & 1) == 0)
            {
              v88 = *((unsigned int *)this + 13);
              v89 = *((_QWORD *)this + 157);
              v90 = *((_DWORD *)this + 15) + v88 * k;
              __C.realp = (float *)(v89 + 4 * (v88 * k));
              __C.imagp = (float *)(v89 + 4 * v90);
              v91 = *((_QWORD *)this + 139);
              __B.realp = (float *)(v91 + 4 * (v88 * k));
              __B.imagp = (float *)(v91 + 4 * v90);
              vDSP_zvsub(&__C, 1, &__B, 1, &__C, 1, v88);
              v86 = *((unsigned int *)this + 12);
            }
          }
        }
      }
      else
      {
        if (v79)
        {
          v92 = 0;
          v93 = 1;
          v94 = 16;
          do
          {
            v95 = v92 + 1;
            if (((*(_QWORD *)(*((_QWORD *)this + 22) + ((v92 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v92) & 1) == 0
              && v95 < 2 * v79)
            {
              v96 = v94;
              v97 = v93;
              do
              {
                if (((*(_QWORD *)(*((_QWORD *)this + 22) + ((v97 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v97) & 1) == 0)
                {
                  vDSP_zvma((const DSPSplitComplex *)(*(_QWORD *)(*((_QWORD *)this + 37) + 24 * v92) + v96), 1, (const DSPSplitComplex *)(*((_QWORD *)this + 65) + 16 * v92), 1, (const DSPSplitComplex *)(*((_QWORD *)this + 65) + v96), 1, (const DSPSplitComplex *)(*((_QWORD *)this + 65) + v96), 1, *((unsigned int *)this + 13));
                  v79 = *((_DWORD *)this + 12);
                }
                ++v97;
                v96 += 16;
              }
              while (v97 < 2 * v79);
            }
            ++v93;
            v94 += 16;
            ++v92;
          }
          while (v95 < v79);
        }
        vDSP_vneg((const float *)(*((_QWORD *)this + 59) + 4 * *((unsigned int *)this + 15)), 1, *((float **)this + 139), 1, *((unsigned int *)this + 15));
        vDSP_vneg((const float *)(*((_QWORD *)this + 62) + 4 * *((unsigned int *)this + 15)), 1, (float *)(*((_QWORD *)this + 139) + 4 * *((unsigned int *)this + 15)), 1, *((unsigned int *)this + 15));
        vDSP_vsadd(*((const float **)this + 80), 1, (const float *)this + 5, *((float **)this + 133), 1, *((unsigned int *)this + 13));
        vDSP_vsadd(*((const float **)this + 133), 1, (const float *)this + 10, *((float **)this + 133), 1, *((unsigned int *)this + 13));
        v98 = *((unsigned int *)this + 13);
        v99 = (float *)*((_QWORD *)this + 133);
        if ((_DWORD)v98)
        {
          v100 = (float *)*((_QWORD *)this + 133);
          v101 = *((unsigned int *)this + 13);
          a3 = v133;
          a5 = v134;
          v32 = v136;
          v77 = (const float *)((char *)this + 164);
          do
          {
            if (*v100 == *((float *)this + 18))
              *v100 = *v26;
            ++v100;
            --v101;
          }
          while (v101);
        }
        else
        {
          v98 = 0;
          a3 = v133;
          a5 = v134;
          v32 = v136;
          v77 = (const float *)((char *)this + 164);
        }
        vDSP_svdiv((const float *)this + 19, v99, 1, v99, 1, v98);
        v102 = *((unsigned int *)this + 12);
        if ((_DWORD)v102)
        {
          for (m = 0; m < v102; ++m)
          {
            if (((*(_QWORD *)(*((_QWORD *)this + 22) + ((m >> 3) & 0x1FFFFFFFFFFFFFF8)) >> m) & 1) == 0)
            {
              v104 = *((unsigned int *)this + 13);
              v105 = *((_QWORD *)this + 157);
              v106 = *((_DWORD *)this + 15) + v104 * m;
              __C.realp = (float *)(v105 + 4 * (v104 * m));
              __C.imagp = (float *)(v105 + 4 * v106);
              v107 = *((_QWORD *)this + 139);
              __B.realp = (float *)(v107 + 4 * (v104 * m));
              __B.imagp = (float *)(v107 + 4 * v106);
              vDSP_zvsub(&__B, 1, &__C, 1, &__C, 1, v104);
              vDSP_zrvmul(&__C, 1, *((const float **)this + 133), 1, &__C, 1, *((unsigned int *)this + 13));
              v102 = *((unsigned int *)this + 12);
            }
          }
        }
      }
      vDSP_vsmul(*((const float **)this + 157), 1, v77, *((float **)this + 157), 1, (2 * *((_DWORD *)this + 15)));
    }
    if (*((_DWORD *)this + 12))
    {
      v108 = 0;
      while (((*(_QWORD *)(*((_QWORD *)this + 22) + ((v108 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v108) & 1) != 0)
      {
        memcpy(v135->mBuffers[v108].mData, v32->mBuffers[v108].mData, 4 * (2 * *((_DWORD *)this + 13) - 2));
        if (a6)
          memcpy(a5->mBuffers[v108].mData, a3->mBuffers[v108].mData, 4 * (2 * *((_DWORD *)this + 13) - 2));
LABEL_140:
        if (++v108 >= *((unsigned int *)this + 12))
          return;
      }
      v109 = (char *)v135 + 16 * v108;
      v112 = (float *)*((_QWORD *)v109 + 2);
      v111 = v109 + 16;
      v110 = v112;
      v113 = (char *)a5 + 16 * v108;
      v116 = *((_QWORD *)v113 + 2);
      v115 = (const float **)(v113 + 16);
      v114 = v116;
      v117 = *((unsigned int *)this + 13);
      if (!(_DWORD)v117)
      {
        v117 = 0;
LABEL_138:
        vDSP_vmul(*((const float **)this + 154), 1, v110, 1, v110, 1, v117);
        vDSP_vmul((const float *)(*((_QWORD *)this + 154) + 4), 1, (const float *)(*v111 + 4 * *((unsigned int *)this + 13)), 1, (float *)(*v111 + 4 * *((unsigned int *)this + 13)), 1, (*((_DWORD *)this + 13) - 2));
        if ((a6 & 1) != 0)
        {
          vDSP_vmul(*((const float **)this + 154), 1, *v115, 1, (float *)*v115, 1, *((unsigned int *)this + 13));
          vDSP_vmul((const float *)(*((_QWORD *)this + 154) + 4), 1, &(*v115)[*((unsigned int *)this + 13)], 1, (float *)&(*v115)[*((unsigned int *)this + 13)], 1, (*((_DWORD *)this + 13) - 2));
        }
        goto LABEL_140;
      }
      v118 = 0;
      mData = (float *)v32->mBuffers[v108].mData;
      v120 = (float *)a3->mBuffers[v108].mData;
      v121 = (v117 - 1);
      v122 = v117 * v108;
      while (1)
      {
        v123 = v122 + v118;
        if (!v118 || v121 == v118)
        {
          v130 = *(float *)(*((_QWORD *)this + 56) + 4 * v123);
          v131 = mData[v118];
          if ((float)(v130 * v130) <= (float)(v131 * v131))
          {
            v110[v118] = (float)(v131 * *((float *)this + 31)) + (float)((float)(1.0 - *((float *)this + 31)) * v130);
            if (a6)
            {
              v129 = (float)(*((float *)this + 31) * v120[v118])
                   + (float)((float)(1.0 - *((float *)this + 31))
                           * *(float *)(*((_QWORD *)this + 157) + 4 * (v122 + v118)));
LABEL_133:
              v124 = v118;
LABEL_134:
              *(float *)(v114 + 4 * v124) = v129;
            }
          }
          else
          {
            v110[v118] = v131;
            if (a6)
            {
              v129 = v120[v118];
              goto LABEL_133;
            }
          }
        }
        else
        {
          v124 = (v121 + v118);
          v125 = *((_QWORD *)this + 56);
          v126 = *(float *)(v125 + 4 * v123);
          v127 = (v122 + v118 + *((_DWORD *)this + 15));
          v128 = mData[v118];
          if ((float)((float)(*(float *)(v125 + 4 * v127) * *(float *)(v125 + 4 * v127))
                     + (float)(v126 * v126)) <= (float)((float)(mData[v124] * mData[v124])
                                                      + (float)(v128 * v128)))
          {
            v110[v118] = (float)(v128 * *((float *)this + 31)) + (float)((float)(1.0 - *((float *)this + 31)) * v126);
            v110[v124] = (float)(*((float *)this + 31) * mData[v124])
                       + (float)((float)(1.0 - *((float *)this + 31)) * *(float *)(v125 + 4 * v127));
            if (a6)
            {
              v132 = *((_QWORD *)this + 157);
              *(float *)(v114 + 4 * v118) = (float)(*((float *)this + 31) * v120[v118])
                                          + (float)((float)(1.0 - *((float *)this + 31))
                                                  * *(float *)(v132 + 4 * (v122 + v118)));
              v129 = (float)(*((float *)this + 31) * v120[v124])
                   + (float)((float)(1.0 - *((float *)this + 31)) * *(float *)(v132 + 4 * v127));
              goto LABEL_134;
            }
          }
          else
          {
            v110[v118] = v128;
            v110[v124] = mData[v124];
            if (a6)
            {
              *(float *)(v114 + 4 * v118) = v120[v118];
              v129 = v120[v124];
              goto LABEL_134;
            }
          }
        }
        if (v117 == ++v118)
          goto LABEL_138;
      }
    }
  }
}

void AGCKernelV2::~AGCKernelV2(AGCKernelV2 *this)
{
  AGCKernelV2::~AGCKernelV2(this);
  JUMPOUT(0x1BCC95CECLL);
}

{
  uint64_t v2;
  uint64_t v3;
  _BYTE *v4;
  _BYTE *v5;
  uint64_t v6;

  *(_QWORD *)this = &off_1E69E1098;
  v2 = *((_QWORD *)this + 90);
  if (v2)
    MEMORY[0x1BCC95CC8](v2, 0x1000C8052888210);
  *((_QWORD *)this + 90) = 0;
  v3 = *((_QWORD *)this + 91);
  if (v3)
    MEMORY[0x1BCC95CC8](v3, 0x1000C8052888210);
  *((_QWORD *)this + 91) = 0;
  v4 = (_BYTE *)*((_QWORD *)this + 79);
  if (v4)
  {
    v5 = (_BYTE *)*((_QWORD *)this + 80);
    if (v5 != v4)
      *((_QWORD *)this + 80) = &v5[(v4 - v5 + 3) & 0xFFFFFFFFFFFFFFFCLL];
    operator delete(v4);
    *((_QWORD *)this + 79) = 0;
    *((_QWORD *)this + 80) = 0;
  }
  AGCVAD::~AGCVAD((AGCKernelV2 *)((char *)this + 80));
  v6 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
}

void AGCKernelV2::Reset(AGCKernelV2 *this)
{
  ausdk::AUEffectBase *v2;

  v2 = (ausdk::AUEffectBase *)*((_QWORD *)this + 1);
  *((_DWORD *)this + 9) = 0;
  *((_DWORD *)this + 10) = 0;
  *((_DWORD *)this + 12) = 0;
  *((float *)this + 11) = ausdk::AUEffectBase::GetParameter(v2, 0x2Bu);
  *((float *)this + 13) = ausdk::AUEffectBase::GetParameter(v2, 8u);
  *((_DWORD *)this + 154) = 0;
  *((_BYTE *)this + 56) = 0;
  *((_DWORD *)this + 156) = 0;
  (*(void (**)(AGCKernelV2 *))(*(_QWORD *)this + 40))(this);
  (*(void (**)(_QWORD))(**((_QWORD **)this + 3) + 24))(*((_QWORD *)this + 3));
  AGCKernelV2::RefreshCoeffs(this);
}

void AGCKernelV2::Process(AGCKernelV2 *this, const float *a2, float *a3, uint64_t a4, BOOL *a5)
{
  uint64_t v5;
  float *v6;
  uint64_t v9;
  int v10;
  double v11;
  float Parameter;
  uint64_t v13;
  float v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  int v18;
  unsigned int v19;
  int v20;
  float v21;
  unsigned int v22;
  float v23;
  unsigned int v24;
  float v25;
  int v26;
  float v27;
  _BOOL4 v28;
  float v29;
  float v30;
  float v31;
  const void *v32;
  uint64_t ExpectedNumberOfOutputFrames;
  uint64_t v34;
  uint64_t message;
  caulk::concurrent::message *v36;
  uint64_t v37;
  int v38;
  int RequiredNumberOfInputFrames;
  unsigned int v40;
  uint64_t v41;
  uint64_t v42;
  caulk::concurrent::message *v43;
  uint64_t v44;
  int v45;
  int v46;
  int v47;
  uint64_t v48;
  uint64_t v49;
  caulk::concurrent::message *v50;
  _DWORD *v51;
  uint64_t v52;
  int v53;
  const float *v54;
  void *v55;
  int v56;
  const float *v57;
  vDSP_Length v58;
  int v59;
  uint64_t v60;
  float v61;
  float v62;
  int v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  float v68;
  uint64_t v69;
  float *v70;
  float v71;
  uint64_t v72;
  float *v73;
  float *v74;
  uint64_t v75;
  uint64_t v76;
  int v77;
  float *v78;
  float v79;
  unsigned int v80;
  int v81;
  int v82;
  unsigned int v83;
  uint64_t v84;
  int v85;
  int v86;
  uint64_t v87;
  unsigned int v88;
  float v89;
  float v90;
  int v91;
  float v92;
  unsigned int v93;
  uint64_t v94;
  int v95;
  int v96;
  unsigned int v97;
  float v98;
  float v99;
  float v100;
  float v101;
  float v102;
  int v103;
  float v104;
  float v105;
  unsigned int v106;
  unsigned int v107;
  float v108;
  float v109;
  float v110;
  float v111;
  float v112;
  int v113;
  float v114;
  float v115;
  float v116;
  float v117;
  float v118;
  float v119;
  int v120;
  NSObject *v121;
  float v122;
  float *v123;
  float v124;
  float v125;
  float v126;
  int v127;
  int v128;
  float v129;
  float v130;
  float v131;
  float v132;
  float v133;
  float v134;
  float v135;
  float v136;
  float v137;
  float v138;
  float v139;
  float v140;
  float v141;
  float v142;
  float v143;
  float v144;
  float v145;
  unsigned int v146;
  float v147;
  float v148;
  float v149;
  float v150;
  ausdk::AUEffectBase *v151;
  float v152;
  float v153;
  float v154;
  float v155;
  float v156;
  unsigned int v157;
  float v158;
  float v159;
  float v160;
  float v161;
  float v162;
  float v163;
  float v164;
  float v165;
  float v166;
  ausdk::AUEffectBase *v167;
  float v168;
  float v169;
  float v170;
  float v171;
  unsigned int v172;
  float v173;
  float v174;
  float v175;
  float v176;
  float v177;
  float v178;
  float v179;
  float v180;
  float v181;
  ausdk::AUEffectBase *v182;
  float v183;
  float v184;
  float v185;
  float v186;
  float v187;
  float v188;
  float *v189;
  float v190;
  float v191;
  float v192;
  float *v193;
  uint64_t v194;
  float v195;
  __n128 v196;
  __n128 v197;
  __n128 v198;
  __n128 v199;
  __n128 v200;
  __n128 v201;
  float v202;
  BOOL v203;
  float v204;
  float v205;
  uint64_t v206;
  const float *v207;
  int v208;
  int v209;
  _BOOL4 v210;
  float v211;
  float v212;
  float v213;
  float v214;
  float v215;
  float v216;
  float __C;
  float __B;
  float v219;
  float v220;
  float v221;
  uint64_t v222;
  int v223;
  int v224;
  uint64_t v225;
  _BYTE buf[12];
  int v227;
  uint64_t v228;
  uint64_t v229;

  v5 = a4;
  v6 = a3;
  v229 = *MEMORY[0x1E0C80C00];
  v9 = *((_QWORD *)this + 1);
  v10 = *(_DWORD *)(v9 + 592);
  if (v10 != *((_DWORD *)this + 8))
  {
    if (*(_BYTE *)(v9 + 596))
    {
      (*(void (**)(AGCKernelV2 *, const float *, float *, uint64_t, BOOL *))(*(_QWORD *)this + 16))(this, a2, a3, a4, a5);
      *(_BYTE *)(v9 + 596) = 0;
    }
    AGCKernelV2::RefreshCoeffs(this);
    *((_DWORD *)this + 8) = v10;
  }
  v11 = *(double *)(ausdk::AUScope::SafeGetElement((ausdk::AUScope *)(v9 + 128), 0) + 80);
  Parameter = ausdk::AUEffectBase::GetParameter((ausdk::AUEffectBase *)v9, 0x3Eu);
  __B = __exp10f(Parameter / 20.0);
  v13 = v5;
  vDSP_vsmul(a2, 1, &__B, *((float **)this + 91), 1, v5);
  __C = 0.0;
  vDSP_svesq(*((const float **)this + 91), 1, &__C, v5);
  v215 = (float)v5;
  v14 = __C / (float)v5;
  __C = v14;
  v216 = 0.0;
  if (*((_BYTE *)this + 57))
  {
    *(_DWORD *)buf = 1;
    *(_DWORD *)&buf[8] = 1;
    v227 = 4 * v5;
    v228 = *((_QWORD *)this + 91);
    LODWORD(v222) = 1;
    v223 = 1;
    v224 = 4 * v5;
    v225 = *((_QWORD *)this + 90);
    (*(void (**)(_QWORD, uint64_t, _BYTE *, uint64_t *))(**((_QWORD **)this + 3) + 32))(*((_QWORD *)this + 3), v5, buf, &v222);
    vDSP_svesq(*((const float **)this + 90), 1, &v216, v5);
    v14 = v216 / v215;
  }
  v216 = v14;
  if (v14 <= 1.0e-12)
  {
    v18 = *((_DWORD *)this + 162);
    v16 = *((_QWORD *)this + 79);
    v17 = *((_DWORD *)this + 163) - 1;
  }
  else
  {
    v15 = *((unsigned int *)this + 162);
    v16 = *((_QWORD *)this + 79);
    *(float *)(v16 + 4 * v15) = v14;
    v17 = *((_DWORD *)this + 163) - 1;
    v18 = v17 & (v15 + 1);
    *((_DWORD *)this + 162) = v18;
  }
  v19 = *((float *)this + 153);
  v20 = v17 & (v18 - 1);
  v21 = *(float *)(v16 + 4 * v20);
  if (v19 >= 2)
  {
    v22 = v19 - 1;
    do
    {
      v20 = (v20 - 1) & v17;
      if (*(float *)(v16 + 4 * v20) < v21)
        v21 = *(float *)(v16 + 4 * v20);
      --v22;
    }
    while (v22);
  }
  v23 = log10f(v21 + 1.0e-12);
  v24 = *((_DWORD *)this + 152);
  if (v24)
  {
    v25 = 0.0;
    v26 = *((_DWORD *)this + 152);
    do
    {
      v18 = (v18 - 1) & v17;
      v25 = v25 + *(float *)(*((_QWORD *)this + 79) + 4 * v18);
      --v26;
    }
    while (v26);
  }
  else
  {
    v25 = 0.0;
  }
  v27 = log10f((float)(v25 / (float)v24) + 1.0e-12);
  v28 = ausdk::AUEffectBase::GetParameter((ausdk::AUEffectBase *)v9, 0x20u) == 0;
  v29 = ausdk::AUEffectBase::GetParameter((ausdk::AUEffectBase *)v9, 0x22u);
  v213 = v23 * 10.0;
  v214 = v27 * 10.0;
  if (v28)
  {
    v210 = 0;
    if ((float)(v27 * 10.0) > v29)
    {
      v30 = ausdk::AUEffectBase::GetParameter((ausdk::AUEffectBase *)v9, 0x23u);
      if (v30 > ausdk::AUEffectBase::GetParameter((ausdk::AUEffectBase *)v9, 0x24u))
        v210 = 1;
    }
  }
  else
  {
    v210 = (float)(v27 * 10.0) > v29
        && v214 > (float)(v213 + ausdk::AUEffectBase::GetParameter((ausdk::AUEffectBase *)v9, 0x27u));
  }
  if (ausdk::AUEffectBase::GetParameter((ausdk::AUEffectBase *)v9, 0x2Cu) == 0.0)
  {
    v40 = 0;
  }
  else
  {
    if (v214 <= (float)(v213 + ausdk::AUEffectBase::GetParameter((ausdk::AUEffectBase *)v9, 0x27u)))
      v31 = 0.0;
    else
      v31 = 1.0;
    v32 = (const void *)*((_QWORD *)this + 91);
    ++*((_DWORD *)this + 20);
    v209 = v5;
    if (*((_BYTE *)this + 128))
    {
      *(_QWORD *)buf = v32;
      v222 = *((_QWORD *)this + 13);
      ExpectedNumberOfOutputFrames = CA::AudioSampleRateConverter::GetExpectedNumberOfOutputFrames(*((CA::AudioSampleRateConverter **)this + 15));
      if (ExpectedNumberOfOutputFrames <= *((_DWORD *)this + 42))
      {
        RequiredNumberOfInputFrames = v5;
      }
      else
      {
        v34 = _os_log_pack_size();
        message = caulk::deferred_logger::create_message(*((caulk::deferred_logger **)this + 74), v34 + 88, 16);
        if (message)
        {
          v36 = (caulk::concurrent::message *)message;
          v37 = _os_log_pack_fill();
          v38 = *((_DWORD *)this + 42);
          *(_DWORD *)v37 = 67109632;
          *(_DWORD *)(v37 + 4) = ExpectedNumberOfOutputFrames;
          *(_WORD *)(v37 + 8) = 1024;
          *(_DWORD *)(v37 + 10) = v5;
          *(_WORD *)(v37 + 14) = 1024;
          *(_DWORD *)(v37 + 16) = v38;
          caulk::concurrent::messenger::enqueue(*(caulk::concurrent::messenger **)(*((_QWORD *)this + 74) + 16), v36);
        }
        ExpectedNumberOfOutputFrames = *((unsigned int *)this + 42);
        RequiredNumberOfInputFrames = AudioSampleRateConverterGetRequiredNumberOfInputFrames();
      }
      v46 = CA::AudioSampleRateConverter::Process(*((CA::AudioSampleRateConverter **)this + 15), (const float *const *)buf, RequiredNumberOfInputFrames, &v222, (float *const *)ExpectedNumberOfOutputFrames);
      if (v46)
      {
        v47 = v46;
        v48 = _os_log_pack_size();
        v49 = caulk::deferred_logger::create_message(*((caulk::deferred_logger **)this + 74), v48 + 88, 16);
        if (v49)
        {
          v50 = (caulk::concurrent::message *)v49;
          v51 = (_DWORD *)_os_log_pack_fill();
          *v51 = 67109120;
          v51[1] = v47;
          caulk::concurrent::messenger::enqueue(*(caulk::concurrent::messenger **)(*((_QWORD *)this + 74) + 16), v50);
        }
      }
      v32 = (const void *)*((_QWORD *)this + 13);
    }
    else if (*((_DWORD *)this + 42) >= v5)
    {
      LODWORD(ExpectedNumberOfOutputFrames) = v5;
    }
    else
    {
      v41 = _os_log_pack_size();
      v42 = caulk::deferred_logger::create_message(*((caulk::deferred_logger **)this + 74), v41 + 88, 16);
      if (v42)
      {
        v43 = (caulk::concurrent::message *)v42;
        v44 = _os_log_pack_fill();
        v45 = *((_DWORD *)this + 42);
        *(_DWORD *)v44 = 67109376;
        *(_DWORD *)(v44 + 4) = v5;
        *(_WORD *)(v44 + 8) = 1024;
        *(_DWORD *)(v44 + 10) = v45;
        caulk::concurrent::messenger::enqueue(*(caulk::concurrent::messenger **)(*((_QWORD *)this + 74) + 16), v43);
      }
      LODWORD(ExpectedNumberOfOutputFrames) = *((_DWORD *)this + 42);
    }
    memmove(*((void **)this + 11), (const void *)(*((_QWORD *)this + 11) + 4 * ExpectedNumberOfOutputFrames), 4 * (*((_DWORD *)this + 36) - ExpectedNumberOfOutputFrames));
    v52 = *((_QWORD *)this + 11);
    v53 = *((_DWORD *)this + 36);
    v54 = (const float *)(v52 + 4 * (v53 - *((_DWORD *)this + 34)));
    v55 = (void *)(v52 + 4 * (v53 - ExpectedNumberOfOutputFrames));
    memcpy(v55, v32, 4 * ExpectedNumberOfOutputFrames);
    vDSP_vmul(v54, 1, *((const float **)this + 14), 1, *((float **)this + 13), 1, *((unsigned int *)this + 34));
    v56 = *((_DWORD *)this + 35);
    v57 = (const float *)*((_QWORD *)this + 13);
    v58 = *((unsigned int *)this + 34);
    if (v56)
    {
      v59 = *((_DWORD *)this + 34);
      v60 = *((unsigned int *)this + 35);
      do
      {
        v57[v59++] = 0.0;
        --v60;
      }
      while (v60);
    }
    vDSP_conv(v57, 1, v57, 1, (float *)this + 43, 1, (v56 + 1), v58);
    v207 = (const float *)v55;
    v208 = ExpectedNumberOfOutputFrames;
    if (*((float *)this + 43) >= 1.0e-15)
      v61 = *((float *)this + 43);
    else
      v61 = 1.0e-15;
    v62 = (float)-*((float *)this + 44) / v61;
    *((_DWORD *)this + 64) = 1065353216;
    *((float *)this + 65) = v62;
    v63 = *((_DWORD *)this + 35);
    v206 = (v63 + 1);
    if (v206 >= 3)
    {
      v64 = 0;
      v65 = (v63 - 1);
      v66 = 2;
      v67 = 1;
      do
      {
        v68 = *((float *)this + v66 + 43);
        v69 = v67;
        v70 = (float *)((char *)this + 176);
        do
        {
          v71 = *v70++;
          v68 = v68 + (float)(*((float *)this + v69-- + 64) * v71);
        }
        while (v69);
        v61 = (float)(1.0 - (float)(v62 * v62)) * v61;
        v72 = v67;
        v73 = (float *)((char *)this + 344);
        v62 = (float)-v68 / v61;
        do
        {
          *v73 = *(v73 - 21) + (float)(v62 * *((float *)this + v72 + 64));
          ++v73;
          --v72;
        }
        while (v72);
        memmove((char *)this + 260, (char *)this + 344, 4 * v64 + 4);
        *((float *)this + v66++ + 64) = v62;
        ++v64;
        ++v67;
      }
      while (v64 != v65);
    }
    *(float *)buf = v61;
    LODWORD(v5) = v209;
    if (v206 >= 2)
    {
      v74 = (float *)((char *)this + 260);
      v75 = v206 - 1;
      do
      {
        *v74 = v74[42] * *v74;
        ++v74;
        --v75;
      }
      while (v75);
    }
    memmove(*((void **)this + 12), (const void *)(*((_QWORD *)this + 12) + 4 * ExpectedNumberOfOutputFrames), 4 * (*((_DWORD *)this + 38) - ExpectedNumberOfOutputFrames));
    vDSP_conv(&v207[-*((unsigned int *)this + 35)], 1, (const float *)this + *((unsigned int *)this + 35) + 64, -1, (float *)(*((_QWORD *)this + 12) + 4 * (*((_DWORD *)this + 38) - ExpectedNumberOfOutputFrames)), 1, ExpectedNumberOfOutputFrames, (*((_DWORD *)this + 35) + 1));
    v76 = *((_QWORD *)this + 12);
    v77 = *((_DWORD *)this + 38);
    if (*((_BYTE *)this + 564))
    {
      v78 = (float *)(v76 + 4 * (v77 - ExpectedNumberOfOutputFrames));
      v79 = *((float *)this + 146);
      v80 = *((_DWORD *)this + 144);
      if (v80)
      {
        if ((_DWORD)ExpectedNumberOfOutputFrames)
        {
          v81 = *((_DWORD *)this + 142);
          v82 = *((_DWORD *)this + 143);
          v83 = *((_DWORD *)this + 145);
          v84 = ExpectedNumberOfOutputFrames;
          do
          {
            v83 = (v82 + v83 * v81) % v80;
            *v78 = *v78 + (float)(v79 * (float)((float)((float)(2.0 / (float)v80) * (float)v83) + -1.0));
            ++v78;
            --v84;
          }
          while (v84);
          *((_DWORD *)this + 145) = v83;
        }
      }
      else if ((_DWORD)ExpectedNumberOfOutputFrames)
      {
        v85 = *((_DWORD *)this + 142);
        v86 = *((_DWORD *)this + 143);
        v87 = ExpectedNumberOfOutputFrames;
        v88 = *((_DWORD *)this + 145);
        do
        {
          v88 = v86 + v88 * v85;
          *v78 = *v78 + (float)(v79 * (float)((float)((float)v88 * 4.6566e-10) + -1.0));
          ++v78;
          --v87;
        }
        while (v87);
        *((_DWORD *)this + 145) = v88;
      }
    }
    v89 = (float)(sqrtf(v31) * -1.5) + 1.0;
    if (v89 >= 0.02)
      v90 = v89;
    else
      v90 = 0.02;
    v221 = 0.0;
    LODWORD(v222) = 0;
    vDSP_svesq((const float *)(v76 + 4 * (v77 - 1)), -1, (float *)buf, *((unsigned int *)this + 127));
    vDSP_svesq((const float *)(*((_QWORD *)this + 12) + 4 * (*((_DWORD *)this + 38) + ~*((_DWORD *)this + 133))), -1, (float *)&v222, *((unsigned int *)this + 127));
    v91 = *((_DWORD *)this + 133);
    v92 = -1.0;
    if (*((_DWORD *)this + 134) + 1 != v91)
    {
      v93 = 0;
      v94 = *((_QWORD *)this + 12);
      v95 = *((_DWORD *)this + 38);
      v96 = -1;
      v97 = *((_DWORD *)this + 127);
      do
      {
        vDSP_dotpr((const float *)(v94 + 4 * (v95 - 1)), -1, (const float *)(v94 + 4 * (v96 + v95 - v91)), -1, &v221, v97);
        v98 = v221 / sqrtf((float)(*(float *)buf * *(float *)&v222) + 1.0e-12);
        v221 = v98;
        if (v98 > v92)
          v92 = v98;
        v94 = *((_QWORD *)this + 12);
        v95 = *((_DWORD *)this + 38);
        v99 = *(float *)(v94 + 4 * (v96 + v95 - v91));
        *(float *)&v222 = *(float *)&v222 - (float)(v99 * v99);
        v97 = *((_DWORD *)this + 127);
        v100 = *(float *)(v94 + 4 * (v96 + v95 - v91 - v97));
        *(float *)&v222 = *(float *)&v222 + (float)(v100 * v100);
        ++v93;
        v91 = *((_DWORD *)this + 133);
        --v96;
      }
      while (v93 < *((_DWORD *)this + 134) - v91 + 1);
    }
    v101 = (float)(v92 * *((float *)this + 128))
         + (float)((float)(1.0 - *((float *)this + 128)) * *((float *)this + 129));
    *((float *)this + 129) = v101;
    v102 = (float)(v92 * (float)(v90 * *((float *)this + 130)))
         + (float)((float)(1.0 - (float)(*((float *)this + 130) * v90)) * *((float *)this + 131));
    *((float *)this + 131) = v102;
    v103 = 1045220557;
    if (v102 < 0.2 || (v103 = 1053609165, v102 > 0.4))
    {
      *((_DWORD *)this + 131) = v103;
      v102 = *(float *)&v103;
    }
    v104 = *((float *)this + 132);
    v219 = 0.0;
    v220 = 0.0;
    vDSP_svemg((const float *)(*((_QWORD *)this + 12) + 4 * (*((_DWORD *)this + 38) - 1)), -1, &v220, *((unsigned int *)this + 135));
    vDSP_svesq((const float *)(*((_QWORD *)this + 12) + 4 * (*((_DWORD *)this + 38) - 1)), -1, &v219, *((unsigned int *)this + 135));
    v105 = sqrtf(v219);
    v106 = *((_DWORD *)this + 20) * v208;
    v107 = *((_DWORD *)this + 135);
    v108 = sqrtf((float)v106);
    v109 = sqrtf((float)v107);
    if (v106 >= v107)
      v108 = v109;
    v110 = (float)(v108 - (float)(v220 / (float)(v105 + 1.0e-12))) / (float)(v108 + -1.0);
    v111 = (float)(*((float *)this + 136) * v110)
         + (float)((float)(1.0 - *((float *)this + 136)) * *((float *)this + 137));
    *((float *)this + 137) = v111;
    v112 = (float)(v110 * (float)(v90 * *((float *)this + 138)))
         + (float)((float)(1.0 - (float)(*((float *)this + 138) * v90)) * *((float *)this + 139));
    *((float *)this + 139) = v112;
    v113 = 1045220557;
    if (v112 < 0.2 || (v113 = 1050253722, v112 > 0.3))
    {
      *((_DWORD *)this + 139) = v113;
      v112 = *(float *)&v113;
    }
    if (v111 <= (float)(v112 + *((float *)this + 140)))
      v40 = v101 > (float)(v102 + v104);
    else
      v40 = (v101 > (float)(v102 + v104)) | 2;
  }
  (*(void (**)(uint64_t, uint64_t, _QWORD, _QWORD, _QWORD, float))(*(_QWORD *)v9 + 152))(v9, 45, 0, 0, 0, (float)v40);
  v114 = *((float *)this + 129);
  v115 = *((float *)this + 131);
  (*(void (**)(uint64_t, uint64_t, _QWORD, _QWORD, _QWORD, float))(*(_QWORD *)v9 + 152))(v9, 61, 0, 0, 0, *((float *)this + 137) - *((float *)this + 139));
  (*(void (**)(uint64_t, uint64_t, _QWORD, _QWORD, _QWORD, float))(*(_QWORD *)v9 + 152))(v9, 60, 0, 0, 0, v114 - v115);
  v116 = v11;
  v212 = v215 / v116;
  if (ausdk::AUEffectBase::GetParameter((ausdk::AUEffectBase *)v9, 0x29u) == 0.0)
  {
    switch(ausdk::AUEffectBase::GetParameter((ausdk::AUEffectBase *)v9, 0x2Cu))
    {
      case 0u:
        if (v210)
          goto LABEL_114;
        goto LABEL_115;
      case 1u:
        v40 &= 1u;
        goto LABEL_112;
      case 2u:
        v40 &= 2u;
        goto LABEL_112;
      case 3u:
        v40 = (v40 > 1) & v40;
        goto LABEL_112;
      case 4u:
LABEL_112:
        if (!v210)
          goto LABEL_115;
        if (v40)
        {
LABEL_114:
          *((_DWORD *)this + 156) = *((_DWORD *)this + 155);
LABEL_118:
          v127 = 1;
          goto LABEL_119;
        }
LABEL_116:
        v128 = *((_DWORD *)this + 156);
        if (v128)
        {
          *((_DWORD *)this + 156) = v128 - 1;
          (*(void (**)(uint64_t, uint64_t, _QWORD, _QWORD, _QWORD, float))(*(_QWORD *)v9 + 152))(v9, 45, 0, 0, 0, 0.5);
          goto LABEL_118;
        }
        v127 = 0;
LABEL_119:
        if (ausdk::AUEffectBase::GetParameter((ausdk::AUEffectBase *)v9, 0x11u) == 0.0)
        {
          v140 = ausdk::AUEffectBase::GetParameter((ausdk::AUEffectBase *)v9, 8u);
        }
        else
        {
          v129 = ausdk::AUEffectBase::GetParameter((ausdk::AUEffectBase *)v9, 0x12u);
          v130 = ausdk::AUEffectBase::GetParameter((ausdk::AUEffectBase *)v9, 0x14u);
          v131 = ausdk::AUEffectBase::GetParameter((ausdk::AUEffectBase *)v9, 8u);
          v132 = ausdk::AUEffectBase::GetParameter((ausdk::AUEffectBase *)v9, 9u);
          v133 = *((float *)this + 13);
          if (v129 > v130 || v133 < v131)
          {
            v134 = ausdk::AUEffectBase::GetParameter((ausdk::AUEffectBase *)v9, 0x15u);
            v135 = ausdk::AUEffectBase::GetParameter((ausdk::AUEffectBase *)v9, 0x16u);
            v136 = ausdk::AUEffectBase::GetParameter((ausdk::AUEffectBase *)v9, 0x17u);
            v137 = v131 - (float)(v134 * (float)(v129 - v130));
            v138 = v212 * v136;
            if (v133 <= v137)
            {
              v141 = v137 + (float)((float)-v134 * v135);
              if (v133 < v141)
              {
                v142 = v138 + *((float *)this + 13);
                v133 = v141 <= v142 ? v141 : v142;
                if (v133 > v131)
                  v133 = v131;
              }
            }
            else
            {
              v139 = *((float *)this + 13) - v138;
              if (v137 >= v139)
                v133 = v131 - (float)(v134 * (float)(v129 - v130));
              else
                v133 = v139;
              if (v133 < v132)
                v133 = v132;
            }
            *((float *)this + 13) = v133;
          }
          v140 = v133;
        }
        v143 = *((float *)this + 15);
        v211 = v140;
        if (v127)
        {
          v144 = *((float *)this + 16);
          v145 = *((float *)this + 11);
          if (v214 > (float)(v145 + ausdk::AUEffectBase::GetParameter((ausdk::AUEffectBase *)v9, 0xCu)))
          {
            v146 = ausdk::AUEffectBase::GetParameter((ausdk::AUEffectBase *)v9, 2u);
            v147 = flt_1B662D9C8[v146 == 2];
            if (v146 == 1)
              v147 = 0.5;
            v143 = v143 * v147;
            v144 = v144 * 0.0001;
          }
          AGCRecursiveDetector::InsertElement((AGCKernelV2 *)((char *)this + 656), v216, v143);
          v148 = *((float *)this + 167);
          v149 = *((float *)this + 9);
          v150 = *((float *)this + 165);
          v151 = (ausdk::AUEffectBase *)*((_QWORD *)this + 1);
          if (*((float *)this + 17) < v150)
          {
            v152 = ausdk::AUEffectBase::GetParameter(*((ausdk::AUEffectBase **)this + 1), 0x2Bu);
            v153 = v148 + v149;
            v154 = ausdk::AUEffectBase::GetParameter(v151, 5u) * 0.5;
            v155 = v152 + v154;
            if ((float)(v148 + v149) <= (float)(v152 + v154))
            {
              v155 = v152 - v154;
              if (v153 >= (float)(v152 - v154))
              {
                v158 = v149;
                goto LABEL_169;
              }
              v157 = 6;
              v156 = v212;
            }
            else
            {
              v156 = -v212;
              v157 = 7;
            }
            v162 = v156 * ausdk::AUEffectBase::GetParameter(v151, v157);
            v163 = *((float *)this + 18);
            if (v163 > v150)
              v162 = v162 * (float)((float)(v150 - *((float *)this + 17)) / (float)(v163 - *((float *)this + 17)));
            if (fabsf(v155 - v153) < fabsf(v162))
              v162 = v155 - v153;
            v149 = v149 + v162;
          }
          v158 = v211;
          if (v149 <= v211)
          {
            v158 = v149;
            if (v149 < ausdk::AUEffectBase::GetParameter(v151, 9u))
              v158 = ausdk::AUEffectBase::GetParameter(v151, 9u);
          }
LABEL_169:
          *((float *)this + 11) = v148;
          if (ausdk::AUEffectBase::GetParameter((ausdk::AUEffectBase *)v9, 0xDu) == 0.0)
          {
            v159 = 0.0;
          }
          else
          {
            v164 = __exp10f(v158 / 10.0);
            AGCRecursiveDetector::InsertElement((AGCKernelV2 *)((char *)this + 676), v164 * v216, v144);
            v165 = *((float *)this + 172);
            v166 = *((float *)this + 10);
            v167 = (ausdk::AUEffectBase *)*((_QWORD *)this + 1);
            v168 = ausdk::AUEffectBase::GetParameter(v167, 0x2Bu);
            v169 = v212 * ausdk::AUEffectBase::GetParameter(v167, 0x10u);
            v159 = v166 + v169;
            if ((float)(v168 - v165) <= (float)(v166 + v169))
            {
              v170 = v166 - v169;
              v159 = v168 - v165;
              if ((float)(v168 - v165) < v170)
                v159 = v170;
            }
            v171 = ausdk::AUEffectBase::GetParameter(v167, 5u) * 0.4;
            if (v159 > v171 || (v171 = -v171, v159 < v171))
              v159 = v171;
            if ((float)(v158 + v159) > ausdk::AUEffectBase::GetParameter(v167, 8u))
            {
              v172 = 8;
LABEL_181:
              v159 = ausdk::AUEffectBase::GetParameter(v167, v172) - v158;
              goto LABEL_182;
            }
            if ((float)(v158 + v159) < ausdk::AUEffectBase::GetParameter(v167, 9u))
            {
              v172 = 9;
              goto LABEL_181;
            }
          }
LABEL_182:
          *((_DWORD *)this + 154) = 0;
          goto LABEL_195;
        }
        if (v143 > 0.0 && v143 <= 1.0)
          *((float32x2_t *)this + 82) = vmul_n_f32(*(float32x2_t *)((char *)this + 656), 1.0 - v143);
        v158 = *((float *)this + 9);
        v159 = *((float *)this + 10);
        if (v158 > v140)
        {
          v158 = v140;
LABEL_193:
          v174 = v212;
          goto LABEL_194;
        }
        if (ausdk::AUEffectBase::GetParameter((ausdk::AUEffectBase *)v9, 0x18u) == 0.0)
          goto LABEL_193;
        if (ausdk::AUEffectBase::GetParameter((ausdk::AUEffectBase *)v9, 0x11u) != 0.0)
        {
          v160 = ausdk::AUEffectBase::GetParameter((ausdk::AUEffectBase *)v9, 0x12u);
          if (v160 >= ausdk::AUEffectBase::GetParameter((ausdk::AUEffectBase *)v9, 0x14u))
            goto LABEL_193;
        }
        v161 = *((float *)this + 154);
        if (v161 < ausdk::AUEffectBase::GetParameter((ausdk::AUEffectBase *)v9, 0x19u))
          goto LABEL_193;
        if (v158 <= 0.0)
        {
          if (v158 >= 0.0
            || (v158 = v158 + (float)(ausdk::AUEffectBase::GetParameter((ausdk::AUEffectBase *)v9, 0x1Au) * v212),
                v158 <= 0.0))
          {
LABEL_186:
            if (ausdk::AUEffectBase::GetParameter((ausdk::AUEffectBase *)v9, 0xDu) == 0.0)
              goto LABEL_193;
            if (v159 <= 0.0)
            {
              if (v159 >= 0.0)
                goto LABEL_193;
              v176 = ausdk::AUEffectBase::GetParameter((ausdk::AUEffectBase *)v9, 0x1Au);
              v174 = v212;
              v159 = v159 + (float)(v176 * v212);
              if (v159 <= 0.0)
              {
LABEL_194:
                *((float *)this + 154) = v174 + *((float *)this + 154);
LABEL_195:
                v177 = ausdk::AUEffectBase::GetParameter((ausdk::AUEffectBase *)v9, 0x1Bu);
                v178 = v158 + v159;
                if (ausdk::AUEffectBase::GetParameter((ausdk::AUEffectBase *)v9, 0x3Fu) == 0.0)
                {
                  v186 = 0.0;
                }
                else
                {
                  v179 = __exp10f((float)(v178 + v177) / 10.0);
                  AGCRecursiveDetector::InsertElement((AGCKernelV2 *)((char *)this + 696), v179 * __C, *((float *)this + 19));
                  v180 = *((float *)this + 177);
                  v181 = *((float *)this + 12);
                  v182 = (ausdk::AUEffectBase *)*((_QWORD *)this + 1);
                  v183 = ausdk::AUEffectBase::GetParameter(v182, 0x1Cu);
                  v184 = ausdk::AUEffectBase::GetParameter(v182, 0x1Eu);
                  v185 = v212 * ausdk::AUEffectBase::GetParameter(v182, 0x1Fu);
                  if (v183 >= v180)
                  {
                    v203 = v181 < (float)-v185;
                    v188 = v181 + v185;
                    if (v203)
                      v186 = v188;
                    else
                      v186 = 0.0;
                  }
                  else
                  {
                    v186 = v181 - (float)(v212 * v184);
                    if ((float)(v183 - v180) >= v186)
                    {
                      v187 = v181 + v185;
                      v186 = v183 - v180;
                      if ((float)(v183 - v180) > v187)
                        v186 = v187;
                    }
                  }
                }
                v189 = (float *)*((_QWORD *)this + 91);
                v190 = (float)((float)(v177 + *((float *)this + 9)) + *((float *)this + 10)) + *((float *)this + 12);
                v191 = __exp10f((float)((float)((float)((float)(v159 + (float)(v158 + v177)) + v186) - v190) / v215) / 20.0);
                v192 = __exp10f(v190 / 20.0);
                if ((_DWORD)v5)
                {
                  v193 = v6;
                  v194 = v13;
                  do
                  {
                    v192 = v191 * v192;
                    v195 = *v189++;
                    *v193++ = v192 * v195;
                    --v194;
                  }
                  while (v194);
                  if (ausdk::AUEffectBase::GetParameter((ausdk::AUEffectBase *)v9, 0x28u) != 0.0)
                  {
                    v196.n128_u32[0] = 5.0;
                    v197.n128_u32[0] = -5.0;
                    v198.n128_u32[0] = -1082969293;
                    v199.n128_u32[0] = 1011451376;
                    v200.n128_u32[0] = 1065351538;
                    v201.n128_u32[0] = -1082132110;
                    do
                    {
                      v202 = *v6;
                      if (fabsf(*v6) > 0.95)
                      {
                        v203 = v202 > 0.95 && v202 < 5.0;
                        if (v203)
                        {
                          v204 = (float)((float)(v202 + -0.95) * 0.0123) + 0.95;
                        }
                        else if (v202 <= -5.0 || v202 >= -0.95)
                        {
                          v204 = 0.9999;
                          if (v202 < 5.0)
                          {
                            v204 = -0.9999;
                            if (v202 > -5.0)
                              goto LABEL_219;
                          }
                        }
                        else
                        {
                          v204 = (float)((float)(v202 + 0.95) * 0.0123) + -0.95;
                        }
                        *v6 = v204;
                      }
LABEL_219:
                      ++v6;
                      --v13;
                    }
                    while (v13);
                  }
                }
                else
                {
                  ausdk::AUEffectBase::GetParameter((ausdk::AUEffectBase *)v9, 0x28u);
                }
                *((float *)this + 9) = v158;
                *((float *)this + 10) = v159;
                *((float *)this + 12) = v186;
                (*(void (**)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, float, __n128, __n128, __n128, __n128, __n128, __n128))(*(_QWORD *)v9 + 152))(v9, 0, 0, 0, 0, v214, v196, v197, v198, v199, v200, v201);
                (*(void (**)(uint64_t, uint64_t, _QWORD, _QWORD, _QWORD, float))(*(_QWORD *)v9 + 152))(v9, 37, 0, 0, 0, v213);
                (*(void (**)(uint64_t, uint64_t, _QWORD, _QWORD, _QWORD, float))(*(_QWORD *)v9 + 152))(v9, 1, 0, 0, 0, v178 + v186);
                (*(void (**)(uint64_t, uint64_t, _QWORD, _QWORD, _QWORD, float))(*(_QWORD *)v9 + 152))(v9, 14, 0, 0, 0, v159);
                v205 = ausdk::AUEffectBase::GetParameter((ausdk::AUEffectBase *)v9, 8u);
                (*(void (**)(uint64_t, uint64_t, _QWORD, _QWORD, _QWORD, float))(*(_QWORD *)v9 + 152))(v9, 19, 0, 0, 0, v211 - v205);
                return;
              }
            }
            else
            {
              v173 = ausdk::AUEffectBase::GetParameter((ausdk::AUEffectBase *)v9, 0x1Au);
              v174 = v212;
              v159 = v159 - (float)(v173 * v212);
              if (v159 >= 0.0)
                goto LABEL_194;
            }
            v159 = 0.0;
            goto LABEL_194;
          }
        }
        else
        {
          v158 = v158 - (float)(ausdk::AUEffectBase::GetParameter((ausdk::AUEffectBase *)v9, 0x1Au) * v212);
          if (v158 >= 0.0)
            goto LABEL_186;
        }
        v158 = 0.0;
        goto LABEL_186;
      default:
        if (v210)
          goto LABEL_116;
LABEL_115:
        v127 = 0;
        *((_DWORD *)this + 156) = 0;
        goto LABEL_119;
    }
  }
  (*(void (**)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, float))(*(_QWORD *)v9 + 152))(v9, 0, 0, 0, 0, v214);
  (*(void (**)(uint64_t, uint64_t, _QWORD, _QWORD, _QWORD, float))(*(_QWORD *)v9 + 152))(v9, 37, 0, 0, 0, v213);
  (*(void (**)(uint64_t, uint64_t, _QWORD, _QWORD, _QWORD, float))(*(_QWORD *)v9 + 152))(v9, 1, 0, 0, 0, 0.0);
  (*(void (**)(uint64_t, uint64_t, _QWORD, _QWORD, _QWORD, float))(*(_QWORD *)v9 + 152))(v9, 14, 0, 0, 0, 0.0);
  (*(void (**)(uint64_t, uint64_t, _QWORD, _QWORD, _QWORD, float))(*(_QWORD *)v9 + 152))(v9, 19, 0, 0, 0, 0.0);
  if (v210)
  {
    v117 = 1.0;
    if (v212 > 0.0)
      v117 = 1.0 - powf(0.01, v212 / 20.0);
    AGCRecursiveDetector::InsertElement((AGCKernelV2 *)((char *)this + 676), v216, v117);
    v118 = *((float *)this + 172);
    v119 = ausdk::AUEffectBase::GetParameter((ausdk::AUEffectBase *)v9, 0x2Bu);
    (*(void (**)(uint64_t, uint64_t, _QWORD, _QWORD, _QWORD, float))(*(_QWORD *)v9 + 152))(v9, 42, 0, 0, 0, v118 - v119);
    v120 = *((_DWORD *)this + 184) + v5;
    *((_DWORD *)this + 184) = v120;
    if ((float)(v116 * 0.2) < (float)v120)
    {
      *((_DWORD *)this + 184) = 0;
      v121 = AUAGCV2Log();
      if (os_log_type_enabled(v121, OS_LOG_TYPE_DEBUG))
      {
        v175 = ausdk::AUEffectBase::GetParameter((ausdk::AUEffectBase *)v9, 0x2Bu);
        *(_DWORD *)buf = 134217984;
        *(double *)&buf[4] = (float)(v118 - v175);
        _os_log_debug_impl(&dword_1B5ED0000, v121, OS_LOG_TYPE_DEBUG, "AUAGCV2 calibration meter: %2.1f dB", buf, 0xCu);
      }
    }
  }
  v122 = ausdk::AUEffectBase::GetParameter((ausdk::AUEffectBase *)v9, 0x1Bu);
  v123 = (float *)*((_QWORD *)this + 91);
  v124 = __exp10f((float)((float)(v122 - v122) / v215) / 20.0);
  v125 = __exp10f(v122 / 20.0);
  if ((_DWORD)v5)
  {
    do
    {
      v125 = v124 * v125;
      v126 = *v123++;
      *v6++ = v125 * v126;
      --v13;
    }
    while (v13);
  }
}

void sub_1B6494AA8(_Unwind_Exception *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  _Unwind_Resume(a1);
}

void AGCKernelV2::InitializePastBuffer(AGCKernelV2 *this)
{
  unsigned int *v2;
  float v3;
  float v4;
  unsigned int v5;
  unsigned int v6;
  unint64_t v7;
  void *v8;
  uint64_t v9;
  float Parameter;
  float v11;
  float *v12;
  uint64_t v13;
  unint64_t v14;

  v2 = (unsigned int *)*((_QWORD *)this + 1);
  v3 = *(double *)(ausdk::AUScope::SafeGetElement((ausdk::AUScope *)(v2 + 32), 0) + 80);
  v4 = (float)v2[84];
  v5 = vcvtps_u32_f32(v3 / v4);
  v6 = vcvtps_u32_f32((float)(v3 * 6.0) / v4);
  if (v5 <= v6)
    v5 = v6;
  v7 = (1 << -__clz(v5 - 1));
  *((_DWORD *)this + 163) = v7;
  std::valarray<float>::resize((uint64_t)this + 632, v7, 0.0);
  v8 = (void *)*((_QWORD *)this + 79);
  v9 = *((_QWORD *)this + 80) - (_QWORD)v8;
  if (v9 >= 1)
    bzero(v8, 4 * (((unint64_t)v9 >> 2) - ((unint64_t)v9 > 3)) + 4);
  *((_DWORD *)this + 162) = 0;
  Parameter = ausdk::AUEffectBase::GetParameter((ausdk::AUEffectBase *)v2, 0x2Bu);
  v11 = __exp10f(Parameter / 10.0);
  v12 = (float *)*((_QWORD *)this + 79);
  v13 = *((_QWORD *)this + 80) - (_QWORD)v12;
  if (v13 >= 1)
  {
    v14 = ((unint64_t)v13 >> 2) + 1;
    do
    {
      *v12++ = v11;
      --v14;
    }
    while (v14 > 1);
  }
  *((_DWORD *)this + 162) = 0;
}

void AGCKernelV2::ClearDetectors(AGCKernelV2 *this)
{
  ausdk::AUEffectBase *v2;
  float Parameter;
  float v4;
  float *v5;
  uint64_t v6;
  unint64_t v7;

  v2 = (ausdk::AUEffectBase *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 82) = 0;
  *(_QWORD *)((char *)this + 708) = 0;
  *(_QWORD *)((char *)this + 676) = 0;
  *(_QWORD *)((char *)this + 668) = 0;
  *((_QWORD *)this + 87) = 0;
  *((_QWORD *)this + 86) = 0;
  Parameter = ausdk::AUEffectBase::GetParameter(v2, 0x2Bu);
  v4 = __exp10f(Parameter / 10.0);
  v5 = (float *)*((_QWORD *)this + 79);
  v6 = *((_QWORD *)this + 80) - (_QWORD)v5;
  if (v6 >= 1)
  {
    v7 = ((unint64_t)v6 >> 2) + 1;
    do
    {
      *v5++ = v4;
      --v7;
    }
    while (v7 > 1);
  }
  *((_DWORD *)this + 162) = 0;
}

uint64_t AGCKernelV2::InitializeAWeightingFilter(AGCKernelV2 *this)
{
  uint64_t v2;
  ausdk::AUScope *v3;
  double v4;
  const AudioStreamBasicDescription *v5;
  const AudioStreamBasicDescription *Element;
  IIRFilterFloat32 *v7;
  uint64_t v8;
  uint64_t v9;
  float v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  v2 = *((_QWORD *)this + 1);
  v3 = (ausdk::AUScope *)(v2 + 128);
  v4 = *(double *)(ausdk::AUScope::SafeGetElement((ausdk::AUScope *)(v2 + 128), 0) + 80);
  v5 = (const AudioStreamBasicDescription *)(ausdk::AUScope::SafeGetElement((ausdk::AUScope *)(v2 + 80), 0) + 80);
  Element = (const AudioStreamBasicDescription *)ausdk::AUScope::SafeGetElement(v3, 0);
  v7 = NewIIRFilter(v5, Element + 2, (const CAStreamBasicDescription *)3);
  v8 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = v7;
  if (v8)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
    v7 = (IIRFilterFloat32 *)*((_QWORD *)this + 3);
  }
  if (!v7)
    return 4294956428;
  v9 = 0;
  v10 = v4;
  do
  {
    v11 = (_QWORD *)((char *)&v16 + v9);
    *v11 = 0;
    v11[1] = 0;
    v11[3] = 0;
    v11[4] = 0;
    v9 += 40;
    v11[2] = 0x3FF0000000000000;
  }
  while (v9 != 120);
  if (v10 <= 12000.0)
  {
    v16 = xmmword_1B66A2650;
    v17 = xmmword_1B66A2660;
    v18 = xmmword_1B66A2670;
    v19 = xmmword_1B66A2680;
    v20 = xmmword_1B66A1430;
    v21 = xmmword_1B66A1420;
    v22 = xmmword_1B66A2690;
    v14 = 80716449;
  }
  else
  {
    if (v10 <= 18000.0)
    {
      v16 = xmmword_1B66A26A0;
      v17 = xmmword_1B66A26B0;
      v18 = xmmword_1B66A26C0;
      v19 = xmmword_1B66A26D0;
      v20 = xmmword_1B66A1490;
      v21 = xmmword_1B66A1480;
      v22 = xmmword_1B66A26E0;
      v12 = 0xFE1659EFC7EELL;
LABEL_16:
      v15 = v12 & 0xFFFFFFFFFFFFLL | 0x3FEF000000000000;
      goto LABEL_17;
    }
    if (v10 > 23000.0)
    {
      if (v10 <= 32000.0)
      {
        v16 = xmmword_1B66A2740;
        v17 = xmmword_1B66A2750;
        v18 = xmmword_1B66A2760;
        v19 = xmmword_1B66A2770;
        v20 = xmmword_1B66A1550;
        v21 = xmmword_1B66A1540;
        v22 = xmmword_1B66A2780;
        v12 = 0xFEAF852BEC7DLL;
      }
      else if (v10 <= 46000.0)
      {
        v16 = xmmword_1B66A2790;
        v17 = xmmword_1B66A27A0;
        v18 = xmmword_1B66A27B0;
        v19 = xmmword_1B66A27C0;
        v20 = xmmword_1B66A15B0;
        v21 = xmmword_1B66A15A0;
        v22 = xmmword_1B66A27D0;
        v12 = -115213797;
      }
      else
      {
        v16 = xmmword_1B66A27E0;
        v17 = xmmword_1B66A27F0;
        v18 = xmmword_1B66A2800;
        v19 = xmmword_1B66A2810;
        v20 = xmmword_1B66A1610;
        v21 = xmmword_1B66A1600;
        v22 = xmmword_1B66A2820;
        v12 = 0xFE93D59DB7AALL;
      }
      goto LABEL_16;
    }
    v16 = xmmword_1B66A26F0;
    v17 = xmmword_1B66A2700;
    v18 = xmmword_1B66A2710;
    v19 = xmmword_1B66A2720;
    v20 = xmmword_1B66A14F0;
    v21 = xmmword_1B66A14E0;
    v22 = xmmword_1B66A2730;
    v14 = 214956234;
  }
  v15 = v14 & 0xFFFFFFFFFFFFLL | 0x3FF0000000000000;
LABEL_17:
  v23 = v15;
  (*(void (**)(IIRFilterFloat32 *, uint64_t, __int128 *))(*(_QWORD *)v7 + 16))(v7, 3, &v16);
  return 0;
}

void AGCKernelV2::RefreshCoeffs(AGCKernelV2 *this)
{
  _DWORD *v2;
  double v3;
  unsigned int v4;
  int v5;
  int v6;
  float v7;
  unsigned int Parameter;
  int v9;
  float v10;
  float v11;
  float v12;
  float v13;
  float v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float v19;
  float v20;
  float v21;
  float v22;
  unsigned int v23;
  NSObject *v24;
  unsigned int v25;
  NSObject *v26;
  float v27;
  uint64_t v28;
  float v29;
  float v30;
  float v31;
  float v32;
  NSObject *v33;
  NSObject *v34;
  float v35;
  float v36;
  float v37;
  float v38;
  float v39;
  float v40;
  float v41;
  float v42;
  int v43;
  _BYTE v44[10];
  uint64_t v45;
  uint64_t v46;

  v46 = *MEMORY[0x1E0C80C00];
  v2 = (_DWORD *)*((_QWORD *)this + 1);
  v3 = *(double *)(ausdk::AUScope::SafeGetElement((ausdk::AUScope *)(v2 + 32), 0) + 80);
  v4 = v2[84];
  v5 = ausdk::AUEffectBase::GetParameter((ausdk::AUEffectBase *)v2, 3u) != 0.0;
  if (*((unsigned __int8 *)this + 57) != v5)
  {
    (*(void (**)(_QWORD))(**((_QWORD **)this + 3) + 24))(*((_QWORD *)this + 3));
    *((_BYTE *)this + 57) = v5;
  }
  v6 = ausdk::AUEffectBase::GetParameter((ausdk::AUEffectBase *)v2, 0x29u) != 0.0;
  if (*((unsigned __int8 *)this + 56) != v6)
  {
    *((_BYTE *)this + 56) = v6;
    *(_QWORD *)((char *)this + 676) = 0;
    *((_QWORD *)this + 86) = 0;
  }
  if (ausdk::AUEffectBase::GetParameter((ausdk::AUEffectBase *)v2, 0xDu) == 0.0)
    *((_DWORD *)this + 10) = 0;
  v7 = *((float *)this + 13);
  if (v7 > ausdk::AUEffectBase::GetParameter((ausdk::AUEffectBase *)v2, 8u)
    || ausdk::AUEffectBase::GetParameter((ausdk::AUEffectBase *)v2, 0x11u) == 0.0)
  {
    *((float *)this + 13) = ausdk::AUEffectBase::GetParameter((ausdk::AUEffectBase *)v2, 8u);
  }
  Parameter = ausdk::AUEffectBase::GetParameter((ausdk::AUEffectBase *)v2, 2u);
  v9 = *((_DWORD *)this + 166);
  if (v9 != Parameter)
  {
    if (Parameter == 1)
    {
      *((float *)this + 164) = log10f(*((float *)this + 164) + 1.0e-12) * 10.0;
    }
    else
    {
      if (v9 == 1)
        *((float *)this + 164) = __exp10f(*((float *)this + 164) / 10.0);
      if (Parameter == 2)
        *((_DWORD *)this + 168) = 0;
    }
  }
  *((_DWORD *)this + 166) = Parameter;
  if (*((_DWORD *)this + 171) == 1)
    *((float *)this + 169) = __exp10f(*((float *)this + 169) / 10.0);
  v10 = (float)v4;
  v11 = v3;
  *((_DWORD *)this + 171) = 0;
  if (*((_DWORD *)this + 176) == 1)
    *((float *)this + 174) = __exp10f(*((float *)this + 174) / 10.0);
  *((_DWORD *)this + 176) = 0;
  v12 = ausdk::AUEffectBase::GetParameter((ausdk::AUEffectBase *)v2, 4u);
  v13 = v10 / v11;
  v14 = 1.0;
  v15 = 1.0;
  if ((float)(v10 / v11) > 0.0 && v12 > 0.0)
    v15 = 1.0 - powf(0.01, v13 / v12);
  *((float *)this + 15) = v15;
  v16 = ausdk::AUEffectBase::GetParameter((ausdk::AUEffectBase *)v2, 0xFu);
  if (v13 > 0.0 && v16 > 0.0)
    v14 = 1.0 - powf(0.01, v13 / v16);
  *((float *)this + 16) = v14;
  v17 = ausdk::AUEffectBase::GetParameter((ausdk::AUEffectBase *)v2, 0x1Du);
  v18 = 1.0;
  if (v13 > 0.0 && v17 > 0.0)
    v18 = 1.0 - powf(0.01, v13 / v17);
  *((float *)this + 19) = v18;
  v19 = ausdk::AUEffectBase::GetParameter((ausdk::AUEffectBase *)v2, 0xAu);
  *((float *)this + 17) = 1.0 - powf(1.0 - *((float *)this + 15), v19 / v13);
  v20 = ausdk::AUEffectBase::GetParameter((ausdk::AUEffectBase *)v2, 0xBu);
  *((float *)this + 18) = 1.0 - powf(1.0 - *((float *)this + 15), v20 / v13);
  *((_DWORD *)this + 152) = vcvtps_u32_f32((float)(ausdk::AUEffectBase::GetParameter((ausdk::AUEffectBase *)v2, 0x21u)
                                                 * v11) / v10);
  *((float *)this + 153) = ceilf((float)(ausdk::AUEffectBase::GetParameter((ausdk::AUEffectBase *)v2, 0x26u) * v11) / v10);
  *((_DWORD *)this + 155) = vcvtps_u32_f32((float)((float)(ausdk::AUEffectBase::GetParameter((ausdk::AUEffectBase *)v2, 0x2Eu)/ 1000.0)* v11)/ v10);
  v21 = ausdk::AUEffectBase::GetParameter((ausdk::AUEffectBase *)v2, 0x2Fu);
  AGCVAD::SetLpcBlockSize((AGCKernelV2 *)((char *)this + 80), v21);
  v22 = ausdk::AUEffectBase::GetParameter((ausdk::AUEffectBase *)v2, 0x30u);
  v23 = v22;
  if (v22 < 0x15)
  {
    v25 = v22;
    if (!v23)
    {
      v26 = AUAGCV2Log();
      if (os_log_type_enabled(v26, OS_LOG_TYPE_ERROR))
      {
        v43 = 67109120;
        *(_DWORD *)v44 = 0;
        _os_log_error_impl(&dword_1B5ED0000, v26, OS_LOG_TYPE_ERROR, "VAD LPC order is %d", (uint8_t *)&v43, 8u);
      }
      v25 = 1;
    }
  }
  else
  {
    v24 = AUAGCV2Log();
    v25 = 20;
    if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR))
    {
      v43 = 67109376;
      *(_DWORD *)v44 = v23;
      *(_WORD *)&v44[4] = 1024;
      *(_DWORD *)&v44[6] = 20;
      _os_log_error_impl(&dword_1B5ED0000, v24, OS_LOG_TYPE_ERROR, "VAD LPC order %d is larger than %d", (uint8_t *)&v43, 0xEu);
    }
  }
  *((_DWORD *)this + 35) = v25;
  v27 = ausdk::AUEffectBase::GetParameter((ausdk::AUEffectBase *)v2, 0x31u);
  v28 = 0;
  *((_DWORD *)this + 106) = 1065353216;
  v29 = 1.0;
  do
  {
    v29 = v27 * v29;
    *(float *)((char *)this + v28 + 428) = v29;
    v28 += 4;
  }
  while (v28 != 80);
  v30 = ausdk::AUEffectBase::GetParameter((ausdk::AUEffectBase *)v2, 0x32u);
  AGCVAD::SetAutoCorrBlockSize((AGCKernelV2 *)((char *)this + 80), v30);
  v31 = ausdk::AUEffectBase::GetParameter((ausdk::AUEffectBase *)v2, 0x33u);
  v32 = ausdk::AUEffectBase::GetParameter((ausdk::AUEffectBase *)v2, 0x34u);
  if (v31 < 50.0)
  {
    v33 = AUAGCV2Log();
    if (os_log_type_enabled(v33, OS_LOG_TYPE_ERROR))
    {
      v43 = 134218240;
      *(double *)v44 = v31;
      *(_WORD *)&v44[8] = 2048;
      v45 = 0x4049000000000000;
      _os_log_error_impl(&dword_1B5ED0000, v33, OS_LOG_TYPE_ERROR, "VAD min periodicity tracking frequency %f Hz is less than %f", (uint8_t *)&v43, 0x16u);
    }
    v31 = 50.0;
  }
  if (v32 > 500.0)
  {
    v34 = AUAGCV2Log();
    if (os_log_type_enabled(v34, OS_LOG_TYPE_ERROR))
    {
      v43 = 134218240;
      *(double *)v44 = v32;
      *(_WORD *)&v44[8] = 2048;
      v45 = 0x407F400000000000;
      _os_log_error_impl(&dword_1B5ED0000, v34, OS_LOG_TYPE_ERROR, "VAD max periodicity tracking frequency %f Hz is greater than %f", (uint8_t *)&v43, 0x16u);
    }
    v32 = 500.0;
  }
  if (v32 >= v31)
    v35 = v32;
  else
    v35 = v31;
  v36 = *((float *)this + 41);
  *((_DWORD *)this + 133) = (float)((float)(v36 / v35) + 0.5);
  *((_DWORD *)this + 134) = (float)((float)(v36 / v31) + 0.5);
  v37 = ausdk::AUEffectBase::GetParameter((ausdk::AUEffectBase *)v2, 0x35u);
  *((float *)this + 128) = 1.0
                         - expf(-1.0/ (float)((float)(v37 / 1000.0)/ (float)((float)*((unsigned int *)this + 40) / *((float *)this + 39))));
  v38 = ausdk::AUEffectBase::GetParameter((ausdk::AUEffectBase *)v2, 0x36u);
  *((float *)this + 130) = 1.0
                         - expf(-1.0 / (float)(v38 / (float)((float)*((unsigned int *)this + 40) / *((float *)this + 39))));
  *((float *)this + 132) = ausdk::AUEffectBase::GetParameter((ausdk::AUEffectBase *)v2, 0x37u);
  v39 = ausdk::AUEffectBase::GetParameter((ausdk::AUEffectBase *)v2, 0x38u);
  AGCVAD::SetSparsityBlockSize((AGCKernelV2 *)((char *)this + 80), v39);
  v40 = ausdk::AUEffectBase::GetParameter((ausdk::AUEffectBase *)v2, 0x39u);
  *((float *)this + 136) = 1.0
                         - expf(-1.0/ (float)((float)(v40 / 1000.0)/ (float)((float)*((unsigned int *)this + 40) / *((float *)this + 39))));
  v41 = ausdk::AUEffectBase::GetParameter((ausdk::AUEffectBase *)v2, 0x3Au);
  *((float *)this + 138) = 1.0
                         - expf(-1.0 / (float)(v41 / (float)((float)*((unsigned int *)this + 40) / *((float *)this + 39))));
  *((float *)this + 140) = ausdk::AUEffectBase::GetParameter((ausdk::AUEffectBase *)v2, 0x3Bu);
  *((_BYTE *)this + 564) = ausdk::AUEffectBase::GetParameter((ausdk::AUEffectBase *)v2, 0x40u) > 0.0;
  v42 = ausdk::AUEffectBase::GetParameter((ausdk::AUEffectBase *)v2, 0x22u);
  *((float *)this + 146) = __exp10f((float)((float)(v42 + -20.0) + 4.8) / 20.0);
}

void AGCRecursiveDetector::InsertElement(AGCRecursiveDetector *this, float a2, float a3)
{
  float v5;
  float v6;
  float v7;
  float v8;
  int v9;
  float v10;
  float v11;
  float v12;
  float v13;
  float v14;
  float v15;

  if (a3 > 0.0 && a3 <= 1.0)
  {
    v5 = 1.0 - a3;
    v7 = *(float *)this;
    v6 = *((float *)this + 1);
    v8 = a3 + (float)((float)(1.0 - a3) * v6);
    *((float *)this + 1) = v8;
    v9 = *((_DWORD *)this + 2);
    if (v9 == 1)
    {
      v10 = (float)((float)(a3 * 10.0) * log10f(a2 + 1.0e-12)) + (float)(v5 * v7);
      *(float *)this = v10;
      v11 = v10 / v8;
    }
    else
    {
      v12 = (float)(a2 * a3) + (float)(v5 * v7);
      *(float *)this = v12;
      v13 = v12 / v8;
      if (v9 == 2)
      {
        v14 = *((float *)this + 4);
        if (v14 > 1.0e-12)
        {
          v15 = v14 / (float)((float)((float)(v5 * v6) / v8) + 1.0e-12);
          if (v13 > v15)
            v13 = v15;
        }
        *((float *)this + 4) = v13;
      }
      v11 = log10f(v13 + 1.0e-12) * 10.0;
    }
    *((float *)this + 3) = v11;
  }
}

uint64_t AUAGCV2Log(void)
{
  unsigned __int8 v0;
  char *v1;
  int v3;

  v1 = (char *)&xmmword_1EF135FF8 + 8;
  if ((v0 & 1) == 0)
  {
    v1 = (_BYTE *)(&xmmword_1EF135FF8 + 8);
    if (v3)
    {
      AUAGCV2Log(void)::sLog = (uint64_t)os_log_create("com.apple.coreaudio", "AUAGCV2");
      v1 = (_BYTE *)(&xmmword_1EF135FF8 + 8);
    }
  }
  return *((_QWORD *)v1 + 456);
}

void AGCVAD::SetLpcBlockSize(AGCVAD *this, float a2)
{
  float v4;
  NSObject *v5;
  int v6;
  NSObject *v7;
  unsigned int v8;
  int v9;
  double v10;
  __int16 v11;
  uint64_t v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v4 = 30.0;
  if (a2 <= 30.0)
  {
    v4 = a2;
  }
  else
  {
    v5 = AUAGCV2Log();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      v9 = 134218240;
      v10 = a2;
      v11 = 2048;
      v12 = 0x403E000000000000;
      _os_log_error_impl(&dword_1B5ED0000, v5, OS_LOG_TYPE_ERROR, "VAD LPC block size %f ms is larger than %f", (uint8_t *)&v9, 0x16u);
    }
  }
  v6 = (int)(float)((float)((float)(v4 / 1000.0) * *((float *)this + 21)) + 0.5);
  if (v6 <= 0)
  {
    v7 = AUAGCV2Log();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      v9 = 67109120;
      LODWORD(v10) = v6;
      _os_log_error_impl(&dword_1B5ED0000, v7, OS_LOG_TYPE_ERROR, "VAD LPC block size is %d", (uint8_t *)&v9, 8u);
    }
    v6 = 1;
  }
  if (v6 != *((_DWORD *)this + 14))
  {
    *((_DWORD *)this + 14) = v6;
    vDSP_hamm_window(*((float **)this + 4), v6, 0);
    v8 = *((_DWORD *)this + 14);
    if (v8 <= *((_DWORD *)this + 22) + 20)
      v8 = *((_DWORD *)this + 22) + 20;
    *((_DWORD *)this + 16) = v8;
    AGCVAD::Clear((void **)this);
  }
}

void AGCVAD::SetAutoCorrBlockSize(AGCVAD *this, float a2)
{
  float v2;
  NSObject *v4;
  int v5;
  NSObject *v6;
  int v7;
  double v8;
  __int16 v9;
  uint64_t v10;
  uint64_t v11;

  v2 = a2;
  v11 = *MEMORY[0x1E0C80C00];
  if (a2 > 50.0)
  {
    v4 = AUAGCV2Log();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      v7 = 134218240;
      v8 = v2;
      v9 = 2048;
      v10 = 0x4049000000000000;
      _os_log_error_impl(&dword_1B5ED0000, v4, OS_LOG_TYPE_ERROR, "VAD autocorrelation length %f ms is larger than %f", (uint8_t *)&v7, 0x16u);
    }
    v2 = 50.0;
  }
  v5 = (int)(float)((float)((float)(v2 / 1000.0) * *((float *)this + 21)) + 0.5);
  if (v5 <= 0)
  {
    v6 = AUAGCV2Log();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      v7 = 67109120;
      LODWORD(v8) = v5;
      _os_log_error_impl(&dword_1B5ED0000, v6, OS_LOG_TYPE_ERROR, "VAD autocorrelation block size is %d", (uint8_t *)&v7, 8u);
    }
    v5 = 1;
  }
  *((_DWORD *)this + 107) = v5;
}

void AGCVAD::SetSparsityBlockSize(AGCVAD *this, float a2)
{
  float v2;
  NSObject *v4;
  int v5;
  NSObject *v6;
  int v7;
  double v8;
  __int16 v9;
  uint64_t v10;
  uint64_t v11;

  v2 = a2;
  v11 = *MEMORY[0x1E0C80C00];
  if (a2 > 50.0)
  {
    v4 = AUAGCV2Log();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      v7 = 134218240;
      v8 = v2;
      v9 = 2048;
      v10 = 0x4049000000000000;
      _os_log_error_impl(&dword_1B5ED0000, v4, OS_LOG_TYPE_ERROR, "VAD sparsity length %f ms is larger than %f", (uint8_t *)&v7, 0x16u);
    }
    v2 = 50.0;
  }
  v5 = (int)(float)((float)((float)(v2 / 1000.0) * *((float *)this + 21)) + 0.5);
  if (v5 <= 0)
  {
    v6 = AUAGCV2Log();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      v7 = 67109120;
      LODWORD(v8) = v5;
      _os_log_error_impl(&dword_1B5ED0000, v6, OS_LOG_TYPE_ERROR, "VAD sparsity block size is %d", (uint8_t *)&v7, 8u);
    }
    v5 = 1;
  }
  *((_DWORD *)this + 115) = v5;
}

void AGCVAD::Clear(void **this)
{
  uint64_t v2;
  uint64_t v3;

  *(_DWORD *)this = 0;
  v2 = *((unsigned int *)this + 17);
  if ((_DWORD)v2)
    bzero(this[1], 4 * v2);
  v3 = *((unsigned int *)this + 18);
  if ((_DWORD)v3)
    bzero(this[2], 4 * v3);
  *((_DWORD *)this + 109) = 0;
  *((_DWORD *)this + 111) = 1045220557;
  *((_DWORD *)this + 117) = 0;
  *((_DWORD *)this + 119) = 1045220557;
}

void AGCVAD::~AGCVAD(AGCVAD *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = *((_QWORD *)this + 1);
  if (v2)
    MEMORY[0x1BCC95CC8](v2, 0x1000C8052888210);
  v3 = *((_QWORD *)this + 3);
  if (v3)
    MEMORY[0x1BCC95CC8](v3, 0x1000C8052888210);
  v4 = *((_QWORD *)this + 2);
  if (v4)
    MEMORY[0x1BCC95CC8](v4, 0x1000C8052888210);
  v5 = *((_QWORD *)this + 4);
  if (v5)
    MEMORY[0x1BCC95CC8](v5, 0x1000C8052888210);
  std::shared_ptr<vp::services::Telephony_Utility>::~shared_ptr[abi:ne180100]((uint64_t)this + 512);
  std::__optional_destruct_base<CA::AudioSampleRateConverter,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)this + 40);
}

void AUAGCV2::~AUAGCV2(AUAGCV2 *this)
{
  AUAGCV2::~AUAGCV2(this);
  JUMPOUT(0x1BCC95CECLL);
}

{
  void **v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  void **v7;

  *(_QWORD *)this = &off_1E69E10E0;
  v2 = (void **)((char *)this + 528);
  v3 = (_QWORD *)*((_QWORD *)this + 67);
  v4 = (_QWORD *)*((_QWORD *)this + 66);
  while (v3 != v4)
  {
    v6 = *--v3;
    v5 = v6;
    *v3 = 0;
    if (v6)
      (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  }
  *((_QWORD *)this + 67) = v4;
  *(_OWORD *)((char *)this + 568) = 0u;
  *(_QWORD *)this = &off_1E69ED840;
  v7 = v2;
  std::vector<std::unique_ptr<DspLib::AlgorithmBaseNewParameters>>::__destroy_vector::operator()[abi:ne180100](&v7);
  ausdk::AUBase::~AUBase(this);
}

uint64_t AUAGCV2::GetPropertyInfo(AUAGCV2 *this, int a2, int a3, unsigned int a4, unsigned int *a5, BOOL *a6)
{
  BOOL v6;
  uint64_t result;

  if (a2 != 3700 || a3)
  {
    if (a3 || (a2 | 8) != 0x1D)
      return 4294956417;
    v6 = 1;
  }
  else
  {
    v6 = 0;
  }
  result = 0;
  *a6 = v6;
  *a5 = 4;
  return result;
}

uint64_t AUAGCV2::GetProperty(AUAGCV2 *this, int a2, int a3, unsigned int a4, _DWORD *a5)
{
  uint64_t result;
  int v7;

  if (a2 == 3700 && !a3)
  {
    result = 0;
    v7 = *((unsigned __int8 *)this + 376);
LABEL_4:
    *a5 = v7;
    return result;
  }
  if (!a3)
  {
    if (a2 == 29)
    {
      result = 0;
      v7 = *((unsigned __int8 *)this + 554);
      goto LABEL_4;
    }
    if (a2 == 21)
    {
      result = 0;
      v7 = *((unsigned __int8 *)this + 552);
      goto LABEL_4;
    }
  }
  return 4294956417;
}

uint64_t AUAGCV2::SetParameter(AUAGCV2 *this, unsigned int a2, unsigned int a3, unsigned int a4, float a5)
{
  ausdk::AUScope *Scope;
  ausdk::AUElement *Element;

  Scope = (ausdk::AUScope *)ausdk::AUBase::GetScope(this, a3);
  Element = (ausdk::AUElement *)ausdk::AUScope::SafeGetElement(Scope, a4);
  ausdk::AUElement::SetParameter(Element, a2, a5, 0);
  if ((a2 - 14 > 0x32 || ((1 << (a2 - 14)) & 0x4C00086E02031) == 0) && a2 >= 2)
    ++*((_DWORD *)this + 148);
  return 0;
}

uint64_t AUAGCV2::GetParameterInfo(AUAGCV2 *this, int a2, int a3, AudioUnitParameterInfo *buffer)
{
  uint64_t result;
  UInt32 v6;
  AudioUnitParameterOptions flags;
  uint64_t v8;
  AudioUnitParameterOptions v9;
  AudioUnitParameterValue v10;
  UInt32 v11;
  AudioUnitParameterOptions v12;
  AudioUnitParameterValue v13;
  UInt32 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  UInt32 v18;
  uint64_t v19;
  UInt32 v20;
  uint64_t v21;
  uint64_t v22;
  AudioUnitParameterOptions v23;
  uint64_t v24;
  AudioUnitParameterUnit v25;
  int v26;
  AudioUnitParameterValue v27;
  uint64_t v28;
  const __CFString *v29;
  const __CFString *v30;
  AudioUnitParameterOptions v31;

  buffer->flags = 0;
  buffer->unitName = 0;
  if (a2)
    return 4294956418;
  switch(a3)
  {
    case 0:
      buffer->cfNameString = CFSTR("Input level");
      buffer->flags = 0x8000000;
      CFStringGetCString(CFSTR("Input level"), buffer->name, 52, 0x8000100u);
      v6 = 1;
      goto LABEL_45;
    case 1:
      buffer->cfNameString = CFSTR("Total gain");
      buffer->flags = 0x8000000;
      CFStringGetCString(CFSTR("Total gain"), buffer->name, 52, 0x8000100u);
      buffer->clumpID = 1;
      flags = buffer->flags;
      buffer->unit = kAudioUnitParameterUnit_Decibels;
      v8 = 0x41200000C1F00000;
      goto LABEL_59;
    case 2:
      buffer->cfNameString = CFSTR("Averaging method");
      buffer->flags = 0x8000000;
      CFStringGetCString(CFSTR("Averaging method"), buffer->name, 52, 0x8000100u);
      buffer->clumpID = 1;
      v9 = buffer->flags;
      buffer->unit = kAudioUnitParameterUnit_Indexed;
      *(_QWORD *)&buffer->minValue = 0x4000000000000000;
      v10 = 2.0;
      goto LABEL_31;
    case 3:
      buffer->cfNameString = CFSTR("A weighting");
      buffer->flags = 0x8000000;
      CFStringGetCString(CFSTR("A weighting"), buffer->name, 52, 0x8000100u);
      v11 = 1;
      goto LABEL_87;
    case 4:
      buffer->cfNameString = CFSTR("Exp. window length (99%)");
      buffer->flags = 0x8000000;
      CFStringGetCString(CFSTR("Exp. window length (99%)"), buffer->name, 52, 0x8000100u);
      buffer->clumpID = 1;
      v12 = buffer->flags;
      buffer->unit = kAudioUnitParameterUnit_Seconds;
      *(_QWORD *)&buffer->minValue = 0x412000003C23D70ALL;
      v13 = 0.8;
      goto LABEL_90;
    case 5:
      buffer->cfNameString = CFSTR("Dead zone width");
      buffer->flags = 0x8000000;
      CFStringGetCString(CFSTR("Dead zone width"), buffer->name, 52, 0x8000100u);
      v14 = 1;
      goto LABEL_48;
    case 6:
      buffer->cfNameString = CFSTR("Gain increase slew rate/sec");
      buffer->flags = 0x8000000;
      CFStringGetCString(CFSTR("Gain increase slew rate/sec"), buffer->name, 52, 0x8000100u);
      buffer->clumpID = 1;
      v12 = buffer->flags;
      buffer->unit = kAudioUnitParameterUnit_Decibels;
      v15 = 0x42C8000000000000;
      goto LABEL_49;
    case 7:
      buffer->cfNameString = CFSTR("Gain decrease slew rate/sec");
      buffer->flags = 0x8000000;
      CFStringGetCString(CFSTR("Gain decrease slew rate/sec"), buffer->name, 52, 0x8000100u);
      buffer->clumpID = 1;
      v12 = buffer->flags;
      buffer->unit = kAudioUnitParameterUnit_Decibels;
      *(_QWORD *)&buffer->minValue = 0x42C8000000000000;
      v13 = 40.0;
      goto LABEL_90;
    case 8:
      buffer->cfNameString = CFSTR("Max gain");
      buffer->flags = 0x8000000;
      CFStringGetCString(CFSTR("Max gain"), buffer->name, 52, 0x8000100u);
      buffer->clumpID = 1;
      v12 = buffer->flags;
      buffer->unit = kAudioUnitParameterUnit_Decibels;
      v16 = 0x41A00000C2200000;
      goto LABEL_57;
    case 9:
      buffer->cfNameString = CFSTR("Min gain");
      buffer->flags = 0x8000000;
      CFStringGetCString(CFSTR("Min gain"), buffer->name, 52, 0x8000100u);
      buffer->clumpID = 1;
      v12 = buffer->flags;
      buffer->unit = kAudioUnitParameterUnit_Decibels;
      *(_QWORD *)&buffer->minValue = 0x41A00000C2200000;
      v13 = -35.0;
      goto LABEL_90;
    case 10:
      buffer->cfNameString = CFSTR("Min data for gain change");
      buffer->flags = 0x8000000;
      CFStringGetCString(CFSTR("Min data for gain change"), buffer->name, 52, 0x8000100u);
      buffer->clumpID = 1;
      v12 = buffer->flags;
      buffer->unit = kAudioUnitParameterUnit_Seconds;
      *(_QWORD *)&buffer->minValue = 0x40A0000000000000;
      v13 = 0.06;
      goto LABEL_90;
    case 11:
      buffer->cfNameString = CFSTR("Optimum data for gain change");
      buffer->flags = 0x8000000;
      CFStringGetCString(CFSTR("Optimum data for gain change"), buffer->name, 52, 0x8000100u);
      buffer->clumpID = 1;
      v12 = buffer->flags;
      buffer->unit = kAudioUnitParameterUnit_Seconds;
      *(_QWORD *)&buffer->minValue = 0x40A0000000000000;
      v13 = 0.25;
      goto LABEL_90;
    case 12:
      buffer->cfNameString = CFSTR("Peak thd (relative)");
      buffer->flags = 0x8000000;
      CFStringGetCString(CFSTR("Peak thd (relative)"), buffer->name, 52, 0x8000100u);
      buffer->clumpID = 1;
      v12 = buffer->flags;
      buffer->unit = kAudioUnitParameterUnit_Decibels;
      v17 = 0x42C8000000000000;
      goto LABEL_64;
    case 13:
      buffer->cfNameString = CFSTR("Dead zone centering");
      buffer->flags = 0x8000000;
      CFStringGetCString(CFSTR("Dead zone centering"), buffer->name, 52, 0x8000100u);
      buffer->clumpID = 2;
      v9 = buffer->flags;
      buffer->unit = kAudioUnitParameterUnit_Boolean;
      *(_QWORD *)&buffer->minValue = 0x3F80000000000000;
      v10 = 1.0;
      goto LABEL_31;
    case 14:
      buffer->cfNameString = CFSTR("Centering gain");
      buffer->flags = 0x8000000;
      CFStringGetCString(CFSTR("Centering gain"), buffer->name, 52, 0x8000100u);
      v18 = 2;
      goto LABEL_54;
    case 15:
      buffer->cfNameString = CFSTR("Centering exp. window length (99%)");
      buffer->flags = 0x8000000;
      CFStringGetCString(CFSTR("Centering exp. window length (99%)"), buffer->name, 52, 0x8000100u);
      buffer->clumpID = 2;
      v12 = buffer->flags;
      buffer->unit = kAudioUnitParameterUnit_Seconds;
      *(_QWORD *)&buffer->minValue = 0x41A000003F800000;
      v13 = 12.0;
      goto LABEL_90;
    case 16:
      buffer->cfNameString = CFSTR("Centering slew rate/sec");
      buffer->flags = 0x8000000;
      CFStringGetCString(CFSTR("Centering slew rate/sec"), buffer->name, 52, 0x8000100u);
      buffer->clumpID = 2;
      v12 = buffer->flags;
      buffer->unit = kAudioUnitParameterUnit_Decibels;
      v19 = 0x4120000000000000;
      goto LABEL_89;
    case 17:
      buffer->cfNameString = CFSTR("Noise SPL based gain limiting");
      buffer->flags = 0x8000000;
      CFStringGetCString(CFSTR("Noise SPL based gain limiting"), buffer->name, 52, 0x8000100u);
      v20 = 3;
      goto LABEL_52;
    case 18:
      buffer->cfNameString = CFSTR("Noise SPL estimate (from NS)");
      buffer->flags = 0x8000000;
      CFStringGetCString(CFSTR("Noise SPL estimate (from NS)"), buffer->name, 52, 0x8000100u);
      buffer->clumpID = 3;
      v12 = buffer->flags;
      buffer->unit = kAudioUnitParameterUnit_Generic;
      v21 = 0x42F0000000000000;
      goto LABEL_42;
    case 19:
      buffer->cfNameString = CFSTR("Gain limit relative to max");
      buffer->flags = 0x8000000;
      CFStringGetCString(CFSTR("Gain limit relative to max"), buffer->name, 52, 0x8000100u);
      buffer->clumpID = 3;
      flags = buffer->flags;
      buffer->unit = kAudioUnitParameterUnit_Decibels;
      v8 = 3248488448;
      goto LABEL_59;
    case 20:
      buffer->cfNameString = CFSTR("Gain limiting thd SPL");
      buffer->flags = 0x8000000;
      CFStringGetCString(CFSTR("Gain limiting thd SPL"), buffer->name, 52, 0x8000100u);
      buffer->clumpID = 3;
      v12 = buffer->flags;
      buffer->unit = kAudioUnitParameterUnit_Decibels;
      v22 = 0x42C8000042200000;
      goto LABEL_37;
    case 21:
      buffer->cfNameString = CFSTR("Gain limiting slope");
      buffer->flags = 0x8000000;
      CFStringGetCString(CFSTR("Gain limiting slope"), buffer->name, 52, 0x8000100u);
      buffer->clumpID = 3;
      v12 = buffer->flags;
      buffer->unit = kAudioUnitParameterUnit_Generic;
      *(_QWORD *)&buffer->minValue = 0x3F80000000000000;
      v13 = 0.5;
      goto LABEL_90;
    case 22:
      buffer->cfNameString = CFSTR("Gain limiting hysteresis");
      buffer->flags = 0x8000000;
      CFStringGetCString(CFSTR("Gain limiting hysteresis"), buffer->name, 52, 0x8000100u);
      buffer->clumpID = 3;
      v12 = buffer->flags;
      buffer->unit = kAudioUnitParameterUnit_Decibels;
      *(_QWORD *)&buffer->minValue = 0x41A0000000000000;
      v13 = 6.0;
      goto LABEL_90;
    case 23:
      buffer->cfNameString = CFSTR("Gain limiting slew rate/sec");
      buffer->flags = 0x8000000;
      CFStringGetCString(CFSTR("Gain limiting slew rate/sec"), buffer->name, 52, 0x8000100u);
      buffer->clumpID = 3;
      v12 = buffer->flags;
      buffer->unit = kAudioUnitParameterUnit_Decibels;
      *(_QWORD *)&buffer->minValue = 0x4120000000000000;
      v13 = 2.0;
      goto LABEL_90;
    case 24:
      buffer->cfNameString = CFSTR("Gain leak during silence");
      buffer->flags = 0x8000000;
      CFStringGetCString(CFSTR("Gain leak during silence"), buffer->name, 52, 0x8000100u);
      v11 = 4;
      goto LABEL_87;
    case 25:
      buffer->cfNameString = CFSTR("Gain leak pre delay");
      buffer->flags = 0x8000000;
      CFStringGetCString(CFSTR("Gain leak pre delay"), buffer->name, 52, 0x8000100u);
      buffer->clumpID = 4;
      v9 = buffer->flags;
      buffer->unit = kAudioUnitParameterUnit_Seconds;
      *(_QWORD *)&buffer->minValue = 0x41A0000000000000;
      v10 = 4.0;
      goto LABEL_31;
    case 26:
      buffer->cfNameString = CFSTR("Gain leak slew rate/sec");
      buffer->flags = 0x8000000;
      CFStringGetCString(CFSTR("Gain leak slew rate/sec"), buffer->name, 52, 0x8000100u);
      buffer->clumpID = 4;
      v9 = buffer->flags;
      buffer->unit = kAudioUnitParameterUnit_Seconds;
      *(_QWORD *)&buffer->minValue = 0x4120000000000000;
      v10 = 0.5;
LABEL_31:
      buffer->defaultValue = v10;
      v23 = v9 | 0xC0100000;
      goto LABEL_93;
    case 27:
      buffer->cfNameString = CFSTR("Post gain (between AGC & limiter)");
      buffer->flags = 0x8000000;
      CFStringGetCString(CFSTR("Post gain (between AGC & limiter)"), buffer->name, 52, 0x8000100u);
      buffer->clumpID = 5;
      v12 = buffer->flags;
      buffer->unit = kAudioUnitParameterUnit_Decibels;
      v24 = 0x41A00000C1A00000;
      goto LABEL_85;
    case 28:
      buffer->cfNameString = CFSTR("Limiter thd");
      buffer->flags = 0x8000000;
      CFStringGetCString(CFSTR("Limiter thd"), buffer->name, 52, 0x8000100u);
      buffer->clumpID = 6;
      v12 = buffer->flags;
      buffer->unit = kAudioUnitParameterUnit_Decibels;
      *(_QWORD *)&buffer->minValue = 3253731328;
      v13 = -12.0;
      goto LABEL_90;
    case 29:
      buffer->cfNameString = CFSTR("Limiter exp. window length (99%)");
      buffer->flags = 0x8000000;
      CFStringGetCString(CFSTR("Limiter exp. window length (99%)"), buffer->name, 52, 0x8000100u);
      buffer->clumpID = 6;
      v12 = buffer->flags;
      buffer->unit = kAudioUnitParameterUnit_Seconds;
      *(_QWORD *)&buffer->minValue = 0x3F8000003C23D70ALL;
      v13 = 0.03;
      goto LABEL_90;
    case 30:
      buffer->cfNameString = CFSTR("Limiter attack slew rate/sec");
      buffer->flags = 0x8000000;
      CFStringGetCString(CFSTR("Limiter attack slew rate/sec"), buffer->name, 52, 0x8000100u);
      buffer->clumpID = 6;
      v12 = buffer->flags;
      buffer->unit = kAudioUnitParameterUnit_Decibels;
      *(_QWORD *)&buffer->minValue = 0x43C8000042480000;
      v13 = 300.0;
      goto LABEL_90;
    case 31:
      buffer->cfNameString = CFSTR("Limiter release slew rate/sec");
      buffer->flags = 0x8000000;
      CFStringGetCString(CFSTR("Limiter release slew rate/sec"), buffer->name, 52, 0x8000100u);
      buffer->clumpID = 6;
      v12 = buffer->flags;
      buffer->unit = kAudioUnitParameterUnit_Decibels;
      v22 = 0x43C8000042480000;
LABEL_37:
      *(_QWORD *)&buffer->minValue = v22;
      v13 = 60.0;
      goto LABEL_90;
    case 32:
      buffer->cfNameString = CFSTR("Level-based VAD");
      buffer->flags = 0x8000000;
      CFStringGetCString(CFSTR("Level-based VAD"), buffer->name, 52, 0x8000100u);
      buffer->clumpID = 7;
      v12 = buffer->flags;
      v25 = kAudioUnitParameterUnit_Indexed;
      goto LABEL_88;
    case 33:
      buffer->cfNameString = CFSTR("VAD window length (rectangular)");
      buffer->flags = 0x8000000;
      CFStringGetCString(CFSTR("VAD window length (rectangular)"), buffer->name, 52, 0x8000100u);
      buffer->clumpID = 7;
      v12 = buffer->flags;
      buffer->unit = kAudioUnitParameterUnit_Seconds;
      *(_QWORD *)&buffer->minValue = 0x3F8000003C23D70ALL;
      v13 = 0.125;
      goto LABEL_90;
    case 34:
      buffer->cfNameString = CFSTR("Absolute silence thd");
      buffer->flags = 0x8000000;
      CFStringGetCString(CFSTR("Absolute silence thd"), buffer->name, 52, 0x8000100u);
      buffer->clumpID = 7;
      v12 = buffer->flags;
      buffer->unit = kAudioUnitParameterUnit_Decibels;
      *(_QWORD *)&buffer->minValue = 3267887104;
      v13 = -48.0;
      goto LABEL_90;
    case 35:
      buffer->cfNameString = CFSTR("Ext. speech prob estimate (from NS)");
      buffer->flags = 0x8000000;
      CFStringGetCString(CFSTR("Ext. speech prob estimate (from NS)"), buffer->name, 52, 0x8000100u);
      buffer->clumpID = 7;
      v12 = buffer->flags;
      buffer->unit = kAudioUnitParameterUnit_Generic;
      v21 = 0x3F80000000000000;
LABEL_42:
      *(_QWORD *)&buffer->minValue = v21;
      buffer->defaultValue = 0.0;
      goto LABEL_61;
    case 36:
      buffer->cfNameString = CFSTR("Ext. speech prob thd");
      buffer->flags = 0x8000000;
      CFStringGetCString(CFSTR("Ext. speech prob thd"), buffer->name, 52, 0x8000100u);
      buffer->clumpID = 7;
      v12 = buffer->flags;
      buffer->unit = kAudioUnitParameterUnit_Generic;
      *(_QWORD *)&buffer->minValue = 0x3F80000000000000;
      v13 = 0.4;
      goto LABEL_90;
    case 37:
      buffer->cfNameString = CFSTR("Minimum tracking level");
      buffer->flags = 0x8000000;
      CFStringGetCString(CFSTR("Minimum tracking level"), buffer->name, 52, 0x8000100u);
      v6 = 7;
LABEL_45:
      buffer->clumpID = v6;
      flags = buffer->flags;
      buffer->unit = kAudioUnitParameterUnit_Decibels;
      *(_QWORD *)&buffer->minValue = 0x41A00000C2C80000;
      buffer->defaultValue = -100.0;
      goto LABEL_60;
    case 38:
      buffer->cfNameString = CFSTR("Minimum tracking length");
      buffer->flags = 0x8000000;
      CFStringGetCString(CFSTR("Minimum tracking length"), buffer->name, 52, 0x8000100u);
      buffer->clumpID = 7;
      v12 = buffer->flags;
      buffer->unit = kAudioUnitParameterUnit_Seconds;
      *(_QWORD *)&buffer->minValue = 0x40C000003C23D70ALL;
      v13 = 4.0;
      goto LABEL_90;
    case 39:
      buffer->cfNameString = CFSTR("Minimum tracking VAD thd");
      buffer->flags = 0x8000000;
      CFStringGetCString(CFSTR("Minimum tracking VAD thd"), buffer->name, 52, 0x8000100u);
      v14 = 7;
LABEL_48:
      buffer->clumpID = v14;
      v12 = buffer->flags;
      buffer->unit = kAudioUnitParameterUnit_Decibels;
      v15 = 0x41A0000000000000;
LABEL_49:
      *(_QWORD *)&buffer->minValue = v15;
      v13 = 10.0;
      goto LABEL_90;
    case 40:
      buffer->cfNameString = CFSTR("Soft clipping");
      buffer->flags = 0x8000000;
      CFStringGetCString(CFSTR("Soft clipping"), buffer->name, 52, 0x8000100u);
      buffer->clumpID = 5;
      v12 = buffer->flags;
      buffer->unit = kAudioUnitParameterUnit_Boolean;
      *(_QWORD *)&buffer->minValue = 0x3F80000000000000;
      buffer->defaultValue = 0.0;
      goto LABEL_80;
    case 41:
      buffer->cfNameString = CFSTR("Calibration mode (turns AGC off)");
      buffer->flags = 0x8000000;
      CFStringGetCString(CFSTR("Calibration mode (turns AGC off)"), buffer->name, 52, 0x8000100u);
      v20 = 8;
LABEL_52:
      buffer->clumpID = v20;
      v12 = buffer->flags;
      buffer->unit = kAudioUnitParameterUnit_Boolean;
      v24 = 0x3F80000000000000;
      goto LABEL_85;
    case 42:
      buffer->cfNameString = CFSTR("Calibration");
      buffer->flags = 0x8000000;
      CFStringGetCString(CFSTR("Calibration"), buffer->name, 52, 0x8000100u);
      v18 = 8;
LABEL_54:
      buffer->clumpID = v18;
      flags = buffer->flags;
      buffer->unit = kAudioUnitParameterUnit_Decibels;
      v8 = 0x41200000C1200000;
      goto LABEL_59;
    case 43:
      buffer->cfNameString = CFSTR("Calibration/AGC target level");
      buffer->flags = 0x8000000;
      CFStringGetCString(CFSTR("Calibration/AGC target level"), buffer->name, 52, 0x8000100u);
      buffer->clumpID = 5;
      v12 = buffer->flags;
      buffer->unit = kAudioUnitParameterUnit_Decibels;
      *(_QWORD *)&buffer->minValue = 0xC1200000C2480000;
      v13 = -30.0;
      goto LABEL_90;
    case 44:
      buffer->cfNameString = CFSTR("Non-level-based VAD");
      buffer->flags = 0x8000000;
      CFStringGetCString(CFSTR("Non-level-based VAD"), buffer->name, 52, 0x8000100u);
      buffer->clumpID = 7;
      v12 = buffer->flags;
      buffer->unit = kAudioUnitParameterUnit_Indexed;
      v16 = 0x4080000000000000;
LABEL_57:
      *(_QWORD *)&buffer->minValue = v16;
      v13 = 3.0;
      goto LABEL_90;
    case 45:
      buffer->cfNameString = CFSTR("VAD state: 1=periodicity; 2=sparsity; 3=both");
      buffer->flags = 0x8000000;
      CFStringGetCString(CFSTR("VAD state: 1=periodicity; 2=sparsity; 3=both"), buffer->name, 52, 0x8000100u);
      buffer->clumpID = 7;
      flags = buffer->flags;
      buffer->unit = kAudioUnitParameterUnit_Generic;
      v8 = 0x4040000000000000;
LABEL_59:
      *(_QWORD *)&buffer->minValue = v8;
      buffer->defaultValue = 0.0;
LABEL_60:
      v12 = flags & 0x7FFFFFFF;
LABEL_61:
      v26 = 1074823168;
      break;
    case 46:
      buffer->cfNameString = CFSTR("Release time");
      buffer->flags = 0x8000000;
      CFStringGetCString(CFSTR("Release time"), buffer->name, 52, 0x8000100u);
      buffer->clumpID = 7;
      v12 = buffer->flags;
      buffer->unit = kAudioUnitParameterUnit_Milliseconds;
      *(_QWORD *)&buffer->minValue = 0x43FA000000000000;
      v27 = 200.0;
      goto LABEL_79;
    case 47:
      buffer->cfNameString = CFSTR("LPC block size");
      buffer->flags = 0x8000000;
      CFStringGetCString(CFSTR("LPC block size"), buffer->name, 52, 0x8000100u);
      buffer->clumpID = 7;
      v12 = buffer->flags;
      buffer->unit = kAudioUnitParameterUnit_Milliseconds;
      v17 = 0x41F000003F800000;
LABEL_64:
      *(_QWORD *)&buffer->minValue = v17;
      v27 = 18.0;
      goto LABEL_79;
    case 48:
      buffer->cfNameString = CFSTR("LPC order");
      buffer->flags = 0x8000000;
      CFStringGetCString(CFSTR("LPC order"), buffer->name, 52, 0x8000100u);
      buffer->clumpID = 7;
      v12 = buffer->flags;
      buffer->unit = kAudioUnitParameterUnit_Generic;
      *(_QWORD *)&buffer->minValue = 0x41A000003F800000;
      v27 = 12.0;
      goto LABEL_79;
    case 49:
      buffer->cfNameString = CFSTR("LPC bandwidth expansion");
      buffer->flags = 0x8000000;
      CFStringGetCString(CFSTR("LPC bandwidth expansion"), buffer->name, 52, 0x8000100u);
      buffer->clumpID = 7;
      v12 = buffer->flags;
      buffer->unit = kAudioUnitParameterUnit_Generic;
      *(_QWORD *)&buffer->minValue = 0x3F8000003C23D70ALL;
      v27 = 0.9;
      goto LABEL_79;
    case 50:
      buffer->cfNameString = CFSTR("Autocorrelation length");
      buffer->flags = 0x8000000;
      CFStringGetCString(CFSTR("Autocorrelation length"), buffer->name, 52, 0x8000100u);
      buffer->clumpID = 7;
      v12 = buffer->flags;
      buffer->unit = kAudioUnitParameterUnit_Milliseconds;
      v28 = 0x4248000041200000;
      goto LABEL_75;
    case 51:
      buffer->cfNameString = CFSTR("Min pitch frequency");
      buffer->flags = 0x8000000;
      CFStringGetCString(CFSTR("Min pitch frequency"), buffer->name, 52, 0x8000100u);
      buffer->clumpID = 7;
      v12 = buffer->flags;
      buffer->unit = kAudioUnitParameterUnit_Hertz;
      *(_QWORD *)&buffer->minValue = 0x43FA000042480000;
      v27 = 70.0;
      goto LABEL_79;
    case 52:
      buffer->cfNameString = CFSTR("Max pitch frequency");
      buffer->flags = 0x8000000;
      CFStringGetCString(CFSTR("Max pitch frequency"), buffer->name, 52, 0x8000100u);
      buffer->clumpID = 7;
      v12 = buffer->flags;
      buffer->unit = kAudioUnitParameterUnit_Hertz;
      *(_QWORD *)&buffer->minValue = 0x43FA000042480000;
      v27 = 350.0;
      goto LABEL_79;
    case 53:
      buffer->cfNameString = CFSTR("Periodicity smoothing TC");
      buffer->flags = 0x8000000;
      CFStringGetCString(CFSTR("Periodicity smoothing TC"), buffer->name, 52, 0x8000100u);
      buffer->clumpID = 7;
      v12 = buffer->flags;
      buffer->unit = kAudioUnitParameterUnit_Milliseconds;
      *(_QWORD *)&buffer->minValue = 0x4348000000000000;
      v27 = 3.0;
      goto LABEL_79;
    case 54:
      v29 = CFSTR("Periodicity background smoothing TC");
      goto LABEL_77;
    case 55:
      buffer->cfNameString = CFSTR("Periodicity thd above background");
      buffer->flags = 0x8000000;
      CFStringGetCString(CFSTR("Periodicity thd above background"), buffer->name, 52, 0x8000100u);
      buffer->clumpID = 7;
      v12 = buffer->flags;
      buffer->unit = kAudioUnitParameterUnit_Generic;
      *(_QWORD *)&buffer->minValue = 0x3F00000000000000;
      v27 = 0.08;
      goto LABEL_79;
    case 56:
      buffer->cfNameString = CFSTR("Sparsity blocksize");
      buffer->flags = 0x8000000;
      CFStringGetCString(CFSTR("Sparsity blocksize"), buffer->name, 52, 0x8000100u);
      buffer->clumpID = 7;
      v12 = buffer->flags;
      buffer->unit = kAudioUnitParameterUnit_Milliseconds;
      *(_QWORD *)&buffer->minValue = 0x4248000041200000;
      v27 = 50.0;
      goto LABEL_79;
    case 57:
      buffer->cfNameString = CFSTR("Sparsity smoothing TC");
      buffer->flags = 0x8000000;
      CFStringGetCString(CFSTR("Sparsity smoothing TC"), buffer->name, 52, 0x8000100u);
      buffer->clumpID = 7;
      v12 = buffer->flags;
      buffer->unit = kAudioUnitParameterUnit_Milliseconds;
      v28 = 0x4348000000000000;
LABEL_75:
      *(_QWORD *)&buffer->minValue = v28;
      v27 = 15.0;
      goto LABEL_79;
    case 58:
      v29 = CFSTR("Sparsity background smothing TC");
LABEL_77:
      buffer->cfNameString = v29;
      buffer->flags = 0x8000000;
      CFStringGetCString(v29, buffer->name, 52, 0x8000100u);
      buffer->clumpID = 7;
      v12 = buffer->flags;
      buffer->unit = kAudioUnitParameterUnit_Seconds;
      *(_QWORD *)&buffer->minValue = 0x400000003C23D70ALL;
      v27 = 0.2;
      goto LABEL_79;
    case 59:
      buffer->cfNameString = CFSTR("Sparsity thd above background");
      buffer->flags = 0x8000000;
      CFStringGetCString(CFSTR("Sparsity thd above background"), buffer->name, 52, 0x8000100u);
      buffer->clumpID = 7;
      v12 = buffer->flags;
      buffer->unit = kAudioUnitParameterUnit_Generic;
      *(_QWORD *)&buffer->minValue = 0x3F00000000000000;
      v27 = 0.02;
LABEL_79:
      buffer->defaultValue = v27;
LABEL_80:
      v26 = -1005584384;
      break;
    case 60:
      v30 = CFSTR("Current residual periodicity above smoothed background");
      goto LABEL_83;
    case 61:
      v30 = CFSTR("Current residual sparsity above smoothed background");
LABEL_83:
      buffer->cfNameString = v30;
      buffer->flags = 0x8000000;
      CFStringGetCString(v30, buffer->name, 52, 0x8000100u);
      buffer->clumpID = 7;
      v31 = buffer->flags;
      buffer->unit = kAudioUnitParameterUnit_Generic;
      *(_QWORD *)&buffer->minValue = 0x3F80000000000000;
      buffer->defaultValue = 0.0;
      goto LABEL_95;
    case 62:
      buffer->cfNameString = CFSTR("Pre gain");
      buffer->flags = 0x8000000;
      CFStringGetCString(CFSTR("Pre gain"), buffer->name, 52, 0x8000100u);
      buffer->clumpID = 5;
      v12 = buffer->flags;
      buffer->unit = kAudioUnitParameterUnit_Decibels;
      v24 = 0x42200000C1A00000;
LABEL_85:
      *(_QWORD *)&buffer->minValue = v24;
      buffer->defaultValue = 0.0;
      goto LABEL_91;
    case 63:
      buffer->cfNameString = CFSTR("Limiter");
      buffer->flags = 0x8000000;
      CFStringGetCString(CFSTR("Limiter"), buffer->name, 52, 0x8000100u);
      v11 = 6;
LABEL_87:
      buffer->clumpID = v11;
      v12 = buffer->flags;
      v25 = kAudioUnitParameterUnit_Boolean;
LABEL_88:
      buffer->unit = v25;
      v19 = 0x3F80000000000000;
LABEL_89:
      *(_QWORD *)&buffer->minValue = v19;
      v13 = 1.0;
LABEL_90:
      buffer->defaultValue = v13;
LABEL_91:
      v26 = -1072693248;
      break;
    case 64:
      buffer->cfNameString = CFSTR("Noise Dither Enabled");
      buffer->flags = 0x8000000;
      CFStringGetCString(CFSTR("Noise Dither Enabled"), buffer->name, 52, 0x8000100u);
      buffer->clumpID = 7;
      v31 = buffer->flags;
      buffer->unit = kAudioUnitParameterUnit_Generic;
      *(_QWORD *)&buffer->minValue = 0x3F80000000000000;
      buffer->defaultValue = 1.0;
LABEL_95:
      v12 = v31 & 0x7FFFFFFF;
      v26 = 68190208;
      break;
    default:
      return 4294956418;
  }
  v23 = v12 | v26;
LABEL_93:
  result = 0;
  buffer->flags = v23;
  return result;
}

uint64_t AUAGCV2::RestoreState(OpaqueAudioComponentInstance **this, const void *a2)
{
  uint64_t result;

  result = ausdk::AUBase::RestoreState(this, a2);
  if (!(_DWORD)result)
    ++*((_DWORD *)this + 148);
  return result;
}

uint64_t AUAGCV2::GetParameterValueStrings(AUAGCV2 *this, int a2, int a3, const __CFArray **a4)
{
  uint64_t result;
  CFIndex v6;
  const __CFArray *v7;
  __int128 v8;
  __int128 v9;
  const __CFString *v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  if (a2)
    return 4294956417;
  if (!a4)
    return 0;
  switch(a3)
  {
    case 44:
      v8 = xmmword_1E69E1360;
      v9 = *(_OWORD *)off_1E69E1370;
      v10 = CFSTR("Either");
      v6 = 5;
      break;
    case 32:
      v8 = xmmword_1E69E1350;
      v6 = 2;
      break;
    case 2:
      v8 = xmmword_1E69E1338;
      *(_QWORD *)&v9 = CFSTR("Modified RMS");
      v6 = 3;
      break;
    default:
      return 4294956417;
  }
  v7 = CFArrayCreate(0, (const void **)&v8, v6, 0);
  result = 0;
  *a4 = v7;
  return result;
}

double AUAGCV2::GetLatency(AUAGCV2 *this)
{
  return 0.0;
}

double AUAGCV2::GetTailTime(AUAGCV2 *this)
{
  return 0.0;
}

uint64_t AUAGCV2::SupportsTail(AUAGCV2 *this)
{
  return 1;
}

uint64_t AUAGCV2::SupportedNumChannels(AUAGCV2 *this, const AUChannelInfo **a2)
{
  if (a2)
    *a2 = (const AUChannelInfo *)&AUAGCV2::SupportedNumChannels(AUChannelInfo const**)::sSupportedChannelConfigs;
  return 1;
}

BOOL AUAGCV2::ValidFormat(AUAGCV2 *this, const AudioStreamBasicDescription *a2, unsigned int a3, AudioStreamBasicDescription *a4)
{
  _BOOL4 v5;

  if (ausdk::ASBD::IsCommonFloat32((ausdk::ASBD *)a4, a2))
    v5 = (a4->mFormatFlags & 0x20) != 0 || a4->mChannelsPerFrame == 1;
  else
    v5 = 0;
  return a4->mChannelsPerFrame == 1 && v5;
}

uint64_t AUAGCV2::NewKernel@<X0>(AUAGCV2 *this@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  caulk **v5;
  caulk::deferred_logger *v6;
  void *v7;
  int v8;
  float v9;
  int v10;
  NSObject *v11;
  NSObject *v12;
  caulk *v13;
  caulk *v14;
  unsigned int v15;
  uint64_t v16;
  unsigned int v17;
  uint64_t v18;
  float v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  float v23;
  uint64_t i;
  float v25;
  float v26;
  uint64_t result;
  std::string *v28;
  _DWORD *exception;
  std::string __p;
  caulk *v31;
  unsigned __int8 v32;
  int v33;
  __CFDictionary *v34;
  uint8_t buf[4];
  std::string *v36;
  uint64_t v37;

  v37 = *MEMORY[0x1E0C80C00];
  v4 = operator new();
  *(_DWORD *)(v4 + 16) = 0;
  *(_QWORD *)v4 = &off_1E69E1098;
  *(_QWORD *)(v4 + 8) = this;
  *(_QWORD *)(v4 + 24) = 0;
  *(_BYTE *)(v4 + 120) = 0;
  v5 = (caulk **)(v4 + 120);
  *(_DWORD *)(v4 + 32) = -1;
  *(_BYTE *)(v4 + 128) = 0;
  *(_OWORD *)(v4 + 568) = xmmword_1B66A21C0;
  v6 = (caulk::deferred_logger *)AUAGCV2Log();
  caulk::deferred_logger::create_v(v6, v7);
  *(_DWORD *)(v4 + 80) = 0;
  *(_DWORD *)(v4 + 148) = 0;
  *(_DWORD *)(v4 + 152) = 0;
  *(_DWORD *)(v4 + 136) = 0;
  *(_OWORD *)(v4 + 88) = 0u;
  *(_OWORD *)(v4 + 104) = 0u;
  *(_OWORD *)(v4 + 632) = 0u;
  *(_OWORD *)(v4 + 656) = 0u;
  *(_OWORD *)(v4 + 672) = 0u;
  *(_OWORD *)(v4 + 688) = 0u;
  *(_OWORD *)(v4 + 700) = 0u;
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v4 + 48))(v4))
  {
    exception = __cxa_allocate_exception(4uLL);
    *exception = -10868;
    __cxa_throw(exception, MEMORY[0x1E0DE4EF0], 0);
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v4 + 32))(v4);
  *(_BYTE *)(v4 + 57) = 1;
  v8 = *((_DWORD *)this + 84);
  *(_QWORD *)(v4 + 720) = operator new[]();
  *(_QWORD *)(v4 + 728) = operator new[]();
  v9 = *(double *)(ausdk::AUScope::SafeGetElement((ausdk::AUScope *)(*(_QWORD *)(v4 + 8) + 128), 0) + 80);
  *(_DWORD *)(v4 + 160) = v8;
  *(float *)(v4 + 156) = v9;
  *(_DWORD *)(v4 + 168) = v8;
  *(float *)(v4 + 164) = v9;
  if (v9 <= 8000.0)
  {
    std::__optional_destruct_base<CA::AudioSampleRateConverter,false>::reset[abi:ne180100]((uint64_t)v5);
  }
  else
  {
    CA::AudioSampleRateConverterBuilder::AudioSampleRateConverterBuilder((uint64_t)&v33, 0);
    CA::AudioSampleRateConverterBuilder::SetAttribute<double>(v34, (const void *)*MEMORY[0x1E0CFFD50], *(float *)(v4 + 156));
    CA::AudioSampleRateConverterBuilder::SetAttribute<double>(v34, (const void *)*MEMORY[0x1E0CFFD60], 8000.0);
    CA::AudioSampleRateConverterBuilder::SetAttribute<unsigned int>(v34, (const void *)*MEMORY[0x1E0CFFD70], 64);
    CA::AudioSampleRateConverterBuilder::SetAttribute<unsigned int>(v34, (const void *)*MEMORY[0x1E0CFFD68], 2);
    CA::AudioSampleRateConverterBuilder::Build((CA::AudioSampleRateConverterBuilder *)&v31);
    v10 = v32;
    v11 = AUAGCV2Log();
    v12 = v11;
    if (v10)
    {
      if (os_log_type_enabled(v11, OS_LOG_TYPE_DEBUG))
      {
        LOWORD(__p.__r_.__value_.__l.__data_) = 0;
        _os_log_debug_impl(&dword_1B5ED0000, v12, OS_LOG_TYPE_DEBUG, "AUAGCV2 VAD created sample rate converter", (uint8_t *)&__p, 2u);
      }
      if (*(_BYTE *)(v4 + 128))
      {
        v13 = *v5;
        v14 = v31;
      }
      else
      {
        v13 = 0;
        v14 = v31;
        *(_BYTE *)(v4 + 128) = 1;
      }
      v31 = v13;
      *(_QWORD *)(v4 + 120) = v14;
      *(_DWORD *)(v4 + 164) = 1174011904;
      *(_DWORD *)(v4 + 168) = (float)(ceilf((float)(8000.0 / *(float *)(v4 + 156))* (float)*(unsigned int *)(v4 + 168))+ 1.0);
    }
    else
    {
      if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
      {
        caulk::string_from_4cc((caulk *)v31, 1, &__p);
        v28 = (__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
            ? &__p
            : (std::string *)__p.__r_.__value_.__r.__words[0];
        *(_DWORD *)buf = 136315138;
        v36 = v28;
        _os_log_error_impl(&dword_1B5ED0000, v12, OS_LOG_TYPE_ERROR, "AUAGCV2 VAD failed to create sample rate converter with status %s", buf, 0xCu);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
      }
      std::__optional_destruct_base<CA::AudioSampleRateConverter,false>::reset[abi:ne180100]((uint64_t)v5);
    }
    caulk::__expected_detail::base<CA::AudioSampleRateConverter,int>::~base((uint64_t)&v31);
    CA::AudioSampleRateConverterBuilder::~AudioSampleRateConverterBuilder((CA::AudioSampleRateConverterBuilder *)&v33);
  }
  v15 = (float)((float)(*(float *)(v4 + 164) * 0.03) + 0.5);
  v16 = *(_QWORD *)(v4 + 112);
  if (v16)
    MEMORY[0x1BCC95CC8](v16, 0x1000C8052888210);
  *(_QWORD *)(v4 + 112) = operator new[]();
  v17 = *(_DWORD *)(v4 + 168) + 20;
  if (v17 <= v15)
    v17 = v15;
  *(_DWORD *)(v4 + 148) = v17;
  v18 = *(_QWORD *)(v4 + 88);
  if (v18)
    MEMORY[0x1BCC95CC8](v18, 0x1000C8052888210);
  *(_QWORD *)(v4 + 88) = operator new[]();
  *(_DWORD *)(v4 + 144) = *(_DWORD *)(v4 + 148);
  v19 = *(float *)(v4 + 164);
  v20 = (float)((float)(v19 * 0.05) + 0.5);
  if ((float)((float)(v19 / 50.0) + 0.5) + v20 > v20)
    v20 += (float)((float)(v19 / 50.0) + 0.5);
  if (v20 <= *(_DWORD *)(v4 + 168))
    v20 = *(_DWORD *)(v4 + 168);
  *(_DWORD *)(v4 + 152) = v20;
  v21 = *(_QWORD *)(v4 + 96);
  if (v21)
    MEMORY[0x1BCC95CC8](v21, 0x1000C8052888210);
  *(_QWORD *)(v4 + 96) = operator new[]();
  v22 = *(_QWORD *)(v4 + 104);
  if (v22)
    MEMORY[0x1BCC95CC8](v22, 0x1000C8052888210);
  *(_QWORD *)(v4 + 104) = operator new[]();
  AGCVAD::Clear((void **)(v4 + 80));
  AGCVAD::SetLpcBlockSize((AGCVAD *)(v4 + 80), 18.0);
  *(_DWORD *)(v4 + 140) = 12;
  *(_DWORD *)(v4 + 424) = 1065353216;
  v23 = 1.0;
  for (i = 428; i != 508; i += 4)
  {
    v23 = v23 * 0.9;
    *(float *)(v4 + i) = v23;
  }
  *(float *)(v4 + 584) = __exp10f(-3.16);
  AGCVAD::SetAutoCorrBlockSize((AGCVAD *)(v4 + 80), 15.0);
  *(uint32x2_t *)(v4 + 532) = vcvt_u32_f32(vadd_f32(vdiv_f32((float32x2_t)vdup_lane_s32(*(int32x2_t *)(v4 + 164), 0), (float32x2_t)0x428C000043AF0000), (float32x2_t)0x3F0000003F000000));
  v25 = (float)*(unsigned int *)(v4 + 160) / *(float *)(v4 + 156);
  *(float *)(v4 + 512) = 1.0 - expf(-1.0 / (float)(0.015 / v25));
  *(float *)(v4 + 520) = 1.0 - expf(-1.0 / (float)(0.2 / v25));
  *(_DWORD *)(v4 + 528) = 1034147594;
  AGCVAD::SetSparsityBlockSize((AGCVAD *)(v4 + 80), 50.0);
  v26 = (float)*(unsigned int *)(v4 + 160) / *(float *)(v4 + 156);
  *(float *)(v4 + 544) = 1.0 - expf(-1.0 / (float)(0.015 / v26));
  *(float *)(v4 + 552) = 1.0 - expf(-1.0 / (float)(0.2 / v26));
  *(_DWORD *)(v4 + 560) = 1017370378;
  *(_BYTE *)(v4 + 564) = 1;
  *(_DWORD *)(v4 + 624) = 0;
  *(_DWORD *)(v4 + 736) = 0;
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 16))(v4);
  *a2 = v4;
  return result;
}

void sub_1B6497AB4(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  std::__optional_destruct_base<CA::AudioSampleRateConverter,false>::~__optional_destruct_base[abi:ne180100](v2);
  v4 = *(_QWORD *)(v1 + 24);
  *(_QWORD *)(v1 + 24) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  MEMORY[0x1BCC95CEC](v1, 0x10A3C40914C8E45);
  _Unwind_Resume(a1);
}

void AGCPastBuffer::~AGCPastBuffer(AGCPastBuffer *this)
{
  _BYTE *v2;
  _BYTE *v3;

  v2 = *(_BYTE **)this;
  if (v2)
  {
    v3 = (_BYTE *)*((_QWORD *)this + 1);
    if (v3 != v2)
      *((_QWORD *)this + 1) = &v3[(v2 - v3 + 3) & 0xFFFFFFFFFFFFFFFCLL];
    operator delete(v2);
    *(_QWORD *)this = 0;
    *((_QWORD *)this + 1) = 0;
  }
}

void clsp::ConvoyDisplacementControllerV2::~ConvoyDisplacementControllerV2(clsp::ConvoyDisplacementControllerV2 *this)
{
  clsp::ConvoyDisplacementControllerV2::~ConvoyDisplacementControllerV2(this);
  JUMPOUT(0x1BCC95CECLL);
}

{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  *(_QWORD *)this = &off_1E69E1398;
  std::shared_ptr<vp::services::Telephony_Utility>::~shared_ptr[abi:ne180100]((uint64_t)this + 984);
  std::shared_ptr<vp::services::Telephony_Utility>::~shared_ptr[abi:ne180100]((uint64_t)this + 904);
  v2 = (void *)*((_QWORD *)this + 44);
  if (v2)
  {
    *((_QWORD *)this + 45) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 41);
  if (v3)
  {
    *((_QWORD *)this + 42) = v3;
    operator delete(v3);
  }
  v4 = (void *)*((_QWORD *)this + 38);
  if (v4)
  {
    *((_QWORD *)this + 39) = v4;
    operator delete(v4);
  }
  v5 = (void *)*((_QWORD *)this + 35);
  if (v5)
  {
    *((_QWORD *)this + 36) = v5;
    operator delete(v5);
  }
  v6 = (void *)*((_QWORD *)this + 32);
  if (v6)
  {
    *((_QWORD *)this + 33) = v6;
    operator delete(v6);
  }
  v7 = (void *)*((_QWORD *)this + 29);
  if (v7)
  {
    *((_QWORD *)this + 30) = v7;
    operator delete(v7);
  }
  v8 = (void *)*((_QWORD *)this + 26);
  if (v8)
  {
    *((_QWORD *)this + 27) = v8;
    operator delete(v8);
  }
  v9 = *((_QWORD *)this + 22);
  *((_QWORD *)this + 22) = 0;
  if (v9)
    MEMORY[0x1BCC95CEC](v9, 0x1000C40FF89C88ELL);
  v10 = *((_QWORD *)this + 21);
  *((_QWORD *)this + 21) = 0;
  if (v10)
    MEMORY[0x1BCC95CEC](v10, 0x1000C40FF89C88ELL);
  v11 = *((_QWORD *)this + 20);
  *((_QWORD *)this + 20) = 0;
  if (v11)
    MEMORY[0x1BCC95CEC](v11, 0x1000C40FF89C88ELL);
}

_QWORD *clsp::ConvoyDisplacementControllerV2::dump(uint64_t a1, _QWORD *a2)
{
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *v18;
  _QWORD *v19;
  _QWORD *v20;
  _QWORD *v21;
  _QWORD *v22;
  _QWORD *v23;
  _QWORD *v24;
  _QWORD *v25;
  _QWORD *v26;
  _QWORD *v27;
  _QWORD *v28;
  _QWORD *v29;
  _QWORD *v30;
  _QWORD *v31;
  _QWORD *v32;
  _QWORD *v33;
  _QWORD *v34;
  _QWORD *v35;
  _QWORD *v36;
  _QWORD *v37;
  _QWORD *v38;
  _QWORD *v39;
  _QWORD *v40;
  _QWORD *v41;
  _QWORD *v42;
  char v44;

  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"g_bw = ", 7);
  v4 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"\nx_lim = ", 9);
  v5 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"\nQ_d = ", 7);
  v6 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"\npeakAttackTime = ", 18);
  v7 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"\npeakDecayTime = ", 17);
  v8 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"\nflvSmoothingTime = ", 20);
  v9 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"\npeakFinderWindowTime_ms = ", 27);
  v10 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"\nms_x_lim = ", 12);
  v11 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"\ninvxlim = ", 11);
  v12 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)"\nptp_x_flv = ", 13);
  v13 = (_QWORD *)std::ostream::operator<<();
  v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"\n\nptp:\n", 7);
  clsp::IIRTwoPole<float>::dump(a1 + 108, v14);
  v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)"\nflv:\n", 6);
  clsp::IIRTwoPole<float>::dump(a1 + 128, v15);
  v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"\nconvoyModel:\n", 14);
  clsp::IIRTwoPole<float>::dump(a1 + 184, v16);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"\nrelative posPeakFinderThreshold = ", 35);
  v17 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)"\nrelative negPeakFinderThreshold = ", 35);
  v18 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)"\npeakFinderWindowSize = ", 24);
  v19 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)"\nposPeakFinderthreshold = ", 26);
  v20 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)"\nnegPeakFinderThreshold = ", 26);
  v21 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)"\nxLimInc = ", 11);
  v22 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)"\nxMin = ", 8);
  v23 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)"\nxMax = ", 8);
  v24 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)"\nxLimUpper = ", 13);
  v25 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)"\nxLimUpperReal = ", 17);
  v26 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, (uint64_t)"\nxLimLower = ", 13);
  v27 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)"\nxLimInit = ", 12);
  v28 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, (uint64_t)"\ninvxLimInit = ", 15);
  v29 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, (uint64_t)"\nMaxNormFactor = ", 17);
  v30 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30, (uint64_t)"\nMinNormFactor = ", 17);
  v31 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v31, (uint64_t)"\nPeakRatioPosBlockThreshold = ", 30);
  v32 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)"\nPeakRationNegBlockThreshold = ", 31);
  v33 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v33, (uint64_t)"\nPeakRatiosInWindowCountThreshold = ", 36);
  v34 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v34, (uint64_t)"\nnormFactorThreshold = ", 23);
  v35 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v35, (uint64_t)"\nmp_ConvoyBufferDirtyCountThreshold = ", 38);
  v36 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v36, (uint64_t)"\nmc_ConvoyBufferDirtyCountThreshold = ", 38);
  v37 = (_QWORD *)std::ostream::operator<<();
  v38 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v37, (uint64_t)"\nptpAtkRel:\n", 12);
  clsp::AttackRelease<float,double>::dump(a1 + 616, v38);
  v39 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v38, (uint64_t)"\nflvTime:\n", 10);
  clsp::AttackRelease<float,double>::dump(a1 + 656, v39);
  v40 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v39, (uint64_t)"\nflvSmoother:\n", 14);
  clsp::ExponentialSmoother<float,double>::dump(a1 + 696, v40);
  v41 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v40, (uint64_t)"\nlfsn:\n", 7);
  clsp::LFSN::dump(a1 + 872, v41);
  v42 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v41, (uint64_t)"\nmodelNormFactor:\n", 18);
  clsp::AttackRelease<float,double>::dump(a1 + 792, v42);
  v44 = 10;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v42, (uint64_t)&v44, 1);
  return a2;
}

void clsp::ConvoyDisplacementControllerV2::logCoeffs(uint64_t a1, clsp::CLSP_Log **a2)
{
  clsp::CLSP_Log *v4;
  float v5;
  clsp::CLSP_Log *v6;
  float v7;
  clsp::CLSP_Log *v8;
  float v9;
  clsp::CLSP_Log *v10;
  float v11;
  clsp::CLSP_Log *v12;
  float v13;
  clsp::CLSP_Log *v14;
  float v15;
  clsp::CLSP_Log *v16;
  float v17;
  clsp::CLSP_Log *v18;
  clsp::CLSP_Log *v19;
  clsp::CLSP_Log *v20;
  clsp::CLSP_Log *v21;
  clsp::CLSP_Log *v22;
  clsp::CLSP_Log *v23;
  clsp::CLSP_Log *v24;
  clsp::CLSP_Log *v25;
  clsp::CLSP_Log *v26;
  clsp::CLSP_Log *v27;
  clsp::CLSP_Log *v28;
  clsp::CLSP_Log *v29;
  clsp::CLSP_Log *v30;
  clsp::CLSP_Log *v31;
  clsp::CLSP_Log *v32;
  clsp::CLSP_Log *v33;
  clsp::CLSP_Log *v34;
  clsp::CLSP_Log *v35;
  clsp::CLSP_Log *v36;
  clsp::CLSP_Log *v37;
  clsp::CLSP_Log *v38;
  clsp::CLSP_Log *v39;
  clsp::CLSP_Log *v40;
  clsp::CLSP_Log *v41;
  float *v42;
  clsp::CLSP_Log *v43;
  unint64_t *v44;
  unint64_t v45;
  unint64_t v46;
  float *v47;
  clsp::CLSP_Log *v48;
  unint64_t *v49;
  unint64_t v50;
  unint64_t v51;
  float *v52;
  clsp::CLSP_Log *v53;
  unint64_t *v54;
  unint64_t v55;
  unint64_t v56;
  uint64_t v57;
  clsp::CLSP_Log *v58;
  unint64_t *v59;
  unint64_t v60;
  __n128 v61;
  unint64_t v62;
  uint64_t v63;
  clsp::CLSP_Log *v64;
  unint64_t *v65;
  unint64_t v66;
  __n128 v67;
  unint64_t v68;
  uint64_t v69;
  clsp::CLSP_Log *v70;
  unint64_t *v71;
  unint64_t v72;
  unint64_t v73;
  uint64_t v74;
  clsp::CLSP_Log *v75;
  unint64_t *v76;
  unint64_t v77;
  unint64_t v78;
  uint64_t v79;
  clsp::CLSP_Log *v80;
  unint64_t *v81;
  unint64_t v82;
  unint64_t v83;
  uint64_t v84;
  clsp::CLSP_Log *v85;
  unint64_t *v86;
  unint64_t v87;
  __n128 v88;
  unint64_t v89;
  uint64_t v90;
  clsp::CLSP_Log *v91;
  unint64_t *v92;
  unint64_t v93;
  __n128 v94;
  unint64_t v95;
  clsp::CLSP_Log *v96;
  std::__shared_weak_count *v97;
  unint64_t *p_shared_owners;
  unint64_t v99;
  unint64_t *v100;
  unint64_t v101;
  _QWORD v102[2];
  clsp::CLSP_Log *v103[2];
  clsp::CLSP_Log *v104[2];
  clsp::CLSP_Log *v105[2];
  clsp::CLSP_Log *v106[2];
  clsp::CLSP_Log *v107[2];
  clsp::CLSP_Log *v108[2];
  clsp::CLSP_Log *v109[2];
  clsp::CLSP_Log *v110[2];
  clsp::CLSP_Log *v111[2];
  clsp::CLSP_Log *v112[2];
  float __src;

  v4 = *a2;
  if (!*a2)
    goto LABEL_32;
  v5 = *(double *)(a1 + 16);
  __src = v5;
  clsp::CLSP_Log::LogCLSPData(v4, &__src, 1);
  v6 = *a2;
  if (!*a2)
    goto LABEL_32;
  v7 = *(double *)(a1 + 24);
  __src = v7;
  clsp::CLSP_Log::LogCLSPData(v6, &__src, 1);
  v8 = *a2;
  if (!*a2)
    goto LABEL_32;
  v9 = *(double *)(a1 + 32);
  __src = v9;
  clsp::CLSP_Log::LogCLSPData(v8, &__src, 1);
  v10 = *a2;
  if (!*a2)
    goto LABEL_32;
  v11 = *(double *)(a1 + 40);
  __src = v11;
  clsp::CLSP_Log::LogCLSPData(v10, &__src, 1);
  v12 = *a2;
  if (!*a2)
    goto LABEL_32;
  v13 = *(double *)(a1 + 48);
  __src = v13;
  clsp::CLSP_Log::LogCLSPData(v12, &__src, 1);
  v14 = *a2;
  if (!*a2)
    goto LABEL_32;
  v15 = *(double *)(a1 + 56);
  __src = v15;
  clsp::CLSP_Log::LogCLSPData(v14, &__src, 1);
  v16 = *a2;
  if (!*a2)
    goto LABEL_32;
  v17 = *(double *)(a1 + 64);
  __src = v17;
  clsp::CLSP_Log::LogCLSPData(v16, &__src, 1);
  v18 = *a2;
  if (!*a2)
    goto LABEL_32;
  __src = *(float *)(a1 + 96);
  clsp::CLSP_Log::LogCLSPData(v18, &__src, 1);
  v19 = *a2;
  if (!*a2)
    goto LABEL_32;
  __src = *(float *)(a1 + 100);
  clsp::CLSP_Log::LogCLSPData(v19, &__src, 1);
  v20 = *a2;
  if (!*a2)
    goto LABEL_32;
  __src = *(float *)(a1 + 384);
  clsp::CLSP_Log::LogCLSPData(v20, &__src, 1);
  v21 = *a2;
  if (!*a2)
    goto LABEL_32;
  __src = *(float *)(a1 + 388);
  clsp::CLSP_Log::LogCLSPData(v21, &__src, 1);
  v22 = *a2;
  if (!*a2)
    goto LABEL_32;
  __src = (float)*(unint64_t *)(a1 + 392);
  clsp::CLSP_Log::LogCLSPData(v22, &__src, 1);
  v23 = *a2;
  if (!*a2)
    goto LABEL_32;
  __src = *(float *)(a1 + 400);
  clsp::CLSP_Log::LogCLSPData(v23, &__src, 1);
  v24 = *a2;
  if (!*a2)
    goto LABEL_32;
  __src = *(float *)(a1 + 404);
  clsp::CLSP_Log::LogCLSPData(v24, &__src, 1);
  v25 = *a2;
  if (!*a2)
    goto LABEL_32;
  __src = *(float *)(a1 + 408);
  clsp::CLSP_Log::LogCLSPData(v25, &__src, 1);
  v26 = *a2;
  if (!*a2)
    goto LABEL_32;
  __src = *(float *)(a1 + 376);
  clsp::CLSP_Log::LogCLSPData(v26, &__src, 1);
  v27 = *a2;
  if (!*a2)
    goto LABEL_32;
  __src = *(float *)(a1 + 380);
  clsp::CLSP_Log::LogCLSPData(v27, &__src, 1);
  v28 = *a2;
  if (!*a2)
    goto LABEL_32;
  __src = *(float *)(a1 + 412);
  clsp::CLSP_Log::LogCLSPData(v28, &__src, 1);
  v29 = *a2;
  if (!*a2)
    goto LABEL_32;
  __src = *(float *)(a1 + 416);
  clsp::CLSP_Log::LogCLSPData(v29, &__src, 1);
  v30 = *a2;
  if (!*a2)
    goto LABEL_32;
  __src = *(float *)(a1 + 420);
  clsp::CLSP_Log::LogCLSPData(v30, &__src, 1);
  v31 = *a2;
  if (!*a2)
    goto LABEL_32;
  __src = *(float *)(a1 + 424);
  clsp::CLSP_Log::LogCLSPData(v31, &__src, 1);
  v32 = *a2;
  if (!*a2)
    goto LABEL_32;
  __src = *(float *)(a1 + 428);
  clsp::CLSP_Log::LogCLSPData(v32, &__src, 1);
  v33 = *a2;
  if (!*a2)
    goto LABEL_32;
  __src = *(float *)(a1 + 484);
  clsp::CLSP_Log::LogCLSPData(v33, &__src, 1);
  v34 = *a2;
  if (!*a2)
    goto LABEL_32;
  __src = *(float *)(a1 + 488);
  clsp::CLSP_Log::LogCLSPData(v34, &__src, 1);
  v35 = *a2;
  if (!*a2)
    goto LABEL_32;
  __src = *(float *)(a1 + 492);
  clsp::CLSP_Log::LogCLSPData(v35, &__src, 1);
  v36 = *a2;
  if (!*a2)
    goto LABEL_32;
  __src = *(float *)(a1 + 496);
  clsp::CLSP_Log::LogCLSPData(v36, &__src, 1);
  v37 = *a2;
  if (!*a2)
    goto LABEL_32;
  __src = *(float *)(a1 + 528);
  clsp::CLSP_Log::LogCLSPData(v37, &__src, 1);
  v38 = *a2;
  if (!*a2)
    goto LABEL_32;
  __src = *(float *)(a1 + 536);
  clsp::CLSP_Log::LogCLSPData(v38, &__src, 1);
  v39 = *a2;
  if (*a2 && (__src = *(float *)(a1 + 540), clsp::CLSP_Log::LogCLSPData(v39, &__src, 1), (v40 = *a2) != 0))
  {
    __src = *(float *)(a1 + 544);
    clsp::CLSP_Log::LogCLSPData(v40, &__src, 1);
    v41 = *a2;
  }
  else
  {
LABEL_32:
    v41 = 0;
  }
  v42 = (float *)(a1 + 108);
  v43 = a2[1];
  v112[0] = v41;
  v112[1] = v43;
  if (v43)
  {
    v44 = (unint64_t *)((char *)v43 + 8);
    do
      v45 = __ldxr(v44);
    while (__stxr(v45 + 1, v44));
    clsp::IIRTwoPole<float>::logCoeffs(v42, v112);
    do
      v46 = __ldaxr(v44);
    while (__stlxr(v46 - 1, v44));
    if (!v46)
    {
      (*(void (**)(clsp::CLSP_Log *))(*(_QWORD *)v43 + 16))(v43);
      std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v43);
    }
  }
  else
  {
    clsp::IIRTwoPole<float>::logCoeffs(v42, v112);
  }
  v47 = (float *)(a1 + 128);
  v48 = a2[1];
  v111[0] = *a2;
  v111[1] = v48;
  if (v48)
  {
    v49 = (unint64_t *)((char *)v48 + 8);
    do
      v50 = __ldxr(v49);
    while (__stxr(v50 + 1, v49));
    clsp::IIRTwoPole<float>::logCoeffs(v47, v111);
    do
      v51 = __ldaxr(v49);
    while (__stlxr(v51 - 1, v49));
    if (!v51)
    {
      (*(void (**)(clsp::CLSP_Log *))(*(_QWORD *)v48 + 16))(v48);
      std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v48);
    }
  }
  else
  {
    clsp::IIRTwoPole<float>::logCoeffs(v47, v111);
  }
  v52 = (float *)(a1 + 184);
  v53 = a2[1];
  v110[0] = *a2;
  v110[1] = v53;
  if (v53)
  {
    v54 = (unint64_t *)((char *)v53 + 8);
    do
      v55 = __ldxr(v54);
    while (__stxr(v55 + 1, v54));
    clsp::IIRTwoPole<float>::logCoeffs(v52, v110);
    do
      v56 = __ldaxr(v54);
    while (__stlxr(v56 - 1, v54));
    if (!v56)
    {
      (*(void (**)(clsp::CLSP_Log *))(*(_QWORD *)v53 + 16))(v53);
      std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v53);
    }
  }
  else
  {
    clsp::IIRTwoPole<float>::logCoeffs(v52, v110);
  }
  v57 = a1 + 616;
  v58 = a2[1];
  v109[0] = *a2;
  v109[1] = v58;
  if (v58)
  {
    v59 = (unint64_t *)((char *)v58 + 8);
    do
      v60 = __ldxr(v59);
    while (__stxr(v60 + 1, v59));
    v61.n128_f32[0] = clsp::AttackRelease<float,double>::logCoeffs(v57, v109);
    do
      v62 = __ldaxr(v59);
    while (__stlxr(v62 - 1, v59));
    if (!v62)
    {
      (*(void (**)(clsp::CLSP_Log *, __n128))(*(_QWORD *)v58 + 16))(v58, v61);
      std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v58);
    }
  }
  else
  {
    clsp::AttackRelease<float,double>::logCoeffs(v57, v109);
  }
  v63 = a1 + 656;
  v64 = a2[1];
  v108[0] = *a2;
  v108[1] = v64;
  if (v64)
  {
    v65 = (unint64_t *)((char *)v64 + 8);
    do
      v66 = __ldxr(v65);
    while (__stxr(v66 + 1, v65));
    v67.n128_f32[0] = clsp::AttackRelease<float,double>::logCoeffs(v63, v108);
    do
      v68 = __ldaxr(v65);
    while (__stlxr(v68 - 1, v65));
    if (!v68)
    {
      (*(void (**)(clsp::CLSP_Log *, __n128))(*(_QWORD *)v64 + 16))(v64, v67);
      std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v64);
    }
  }
  else
  {
    clsp::AttackRelease<float,double>::logCoeffs(v63, v108);
  }
  v69 = a1 + 696;
  v70 = a2[1];
  v107[0] = *a2;
  v107[1] = v70;
  if (v70)
  {
    v71 = (unint64_t *)((char *)v70 + 8);
    do
      v72 = __ldxr(v71);
    while (__stxr(v72 + 1, v71));
    clsp::ExponentialSmoother<float,double>::logCoeffs(v69, v107);
    do
      v73 = __ldaxr(v71);
    while (__stlxr(v73 - 1, v71));
    if (!v73)
    {
      (*(void (**)(clsp::CLSP_Log *))(*(_QWORD *)v70 + 16))(v70);
      std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v70);
    }
  }
  else
  {
    clsp::ExponentialSmoother<float,double>::logCoeffs(v69, v107);
  }
  v74 = a1 + 712;
  v75 = a2[1];
  v106[0] = *a2;
  v106[1] = v75;
  if (v75)
  {
    v76 = (unint64_t *)((char *)v75 + 8);
    do
      v77 = __ldxr(v76);
    while (__stxr(v77 + 1, v76));
    clsp::AttackReleaseTo<float,double>::logCoeffs(v74, v106);
    do
      v78 = __ldaxr(v76);
    while (__stlxr(v78 - 1, v76));
    if (!v78)
    {
      (*(void (**)(clsp::CLSP_Log *))(*(_QWORD *)v75 + 16))(v75);
      std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v75);
    }
  }
  else
  {
    clsp::AttackReleaseTo<float,double>::logCoeffs(v74, v106);
  }
  v79 = a1 + 752;
  v80 = a2[1];
  v105[0] = *a2;
  v105[1] = v80;
  if (v80)
  {
    v81 = (unint64_t *)((char *)v80 + 8);
    do
      v82 = __ldxr(v81);
    while (__stxr(v82 + 1, v81));
    clsp::AttackReleaseTo<float,double>::logCoeffs(v79, v105);
    do
      v83 = __ldaxr(v81);
    while (__stlxr(v83 - 1, v81));
    if (!v83)
    {
      (*(void (**)(clsp::CLSP_Log *))(*(_QWORD *)v80 + 16))(v80);
      std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v80);
    }
  }
  else
  {
    clsp::AttackReleaseTo<float,double>::logCoeffs(v79, v105);
  }
  v84 = a1 + 792;
  v85 = a2[1];
  v104[0] = *a2;
  v104[1] = v85;
  if (v85)
  {
    v86 = (unint64_t *)((char *)v85 + 8);
    do
      v87 = __ldxr(v86);
    while (__stxr(v87 + 1, v86));
    v88.n128_f32[0] = clsp::AttackRelease<float,double>::logCoeffs(v84, v104);
    do
      v89 = __ldaxr(v86);
    while (__stlxr(v89 - 1, v86));
    if (!v89)
    {
      (*(void (**)(clsp::CLSP_Log *, __n128))(*(_QWORD *)v85 + 16))(v85, v88);
      std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v85);
    }
  }
  else
  {
    clsp::AttackRelease<float,double>::logCoeffs(v84, v104);
  }
  v90 = a1 + 832;
  v91 = a2[1];
  v103[0] = *a2;
  v103[1] = v91;
  if (v91)
  {
    v92 = (unint64_t *)((char *)v91 + 8);
    do
      v93 = __ldxr(v92);
    while (__stxr(v93 + 1, v92));
    v94.n128_f32[0] = clsp::AttackRelease<float,double>::logCoeffs(v90, v103);
    do
      v95 = __ldaxr(v92);
    while (__stlxr(v95 - 1, v92));
    if (!v95)
    {
      (*(void (**)(clsp::CLSP_Log *, __n128))(*(_QWORD *)v91 + 16))(v91, v94);
      std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v91);
    }
  }
  else
  {
    clsp::AttackRelease<float,double>::logCoeffs(v90, v103);
  }
  v96 = *a2;
  v97 = (std::__shared_weak_count *)a2[1];
  v102[0] = v96;
  v102[1] = v97;
  if (v97)
  {
    p_shared_owners = (unint64_t *)&v97->__shared_owners_;
    do
      v99 = __ldxr(p_shared_owners);
    while (__stxr(v99 + 1, p_shared_owners));
  }
  clsp::LFSN::logCoeffs((float *)(a1 + 872), (uint64_t)v102);
  if (v97)
  {
    v100 = (unint64_t *)&v97->__shared_owners_;
    do
      v101 = __ldaxr(v100);
    while (__stlxr(v101 - 1, v100));
    if (!v101)
    {
      ((void (*)(std::__shared_weak_count *))v97->__on_zero_shared)(v97);
      std::__shared_weak_count::__release_weak(v97);
    }
  }
}

void sub_1B6498874(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::shared_ptr<vp::services::Telephony_Utility>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t clsp::ConvoyDisplacementControllerV2::setG_bw(uint64_t this, double a2)
{
  *(double *)(this + 16) = a2;
  return this;
}

double clsp::ConvoyDisplacementControllerV2::getG_bw(clsp::ConvoyDisplacementControllerV2 *this)
{
  return *((double *)this + 2);
}

uint64_t clsp::ConvoyDisplacementControllerV2::setX_lim(uint64_t this, double a2)
{
  *(double *)(this + 24) = a2;
  return this;
}

double clsp::ConvoyDisplacementControllerV2::getX_lim(clsp::ConvoyDisplacementControllerV2 *this)
{
  return *((double *)this + 3);
}

uint64_t clsp::ConvoyDisplacementControllerV2::setQ_d(uint64_t this, double a2)
{
  *(double *)(this + 32) = a2;
  return this;
}

double clsp::ConvoyDisplacementControllerV2::getQ_d(clsp::ConvoyDisplacementControllerV2 *this)
{
  return *((double *)this + 4);
}

double *clsp::ConvoyDisplacementControllerV2::setPeakAttackTime(double *this, double a2)
{
  this[5] = a2;
  this[77] = a2;
  this[82] = a2;
  return this;
}

double clsp::ConvoyDisplacementControllerV2::getPeakAttackTime(clsp::ConvoyDisplacementControllerV2 *this)
{
  return *((double *)this + 5);
}

double *clsp::ConvoyDisplacementControllerV2::setPeakDecayTime(double *this, double a2)
{
  this[6] = a2;
  this[78] = a2;
  this[83] = a2;
  return this;
}

double clsp::ConvoyDisplacementControllerV2::getPeakDecayTime(clsp::ConvoyDisplacementControllerV2 *this)
{
  return *((double *)this + 6);
}

uint64_t clsp::ConvoyDisplacementControllerV2::setFlvSmoothingTime(uint64_t this, double a2)
{
  *(double *)(this + 56) = a2;
  return this;
}

double clsp::ConvoyDisplacementControllerV2::getFlvSmoothingTime(clsp::ConvoyDisplacementControllerV2 *this)
{
  return *((double *)this + 7);
}

uint64_t clsp::ConvoyDisplacementControllerV2::getLFSN(clsp::ConvoyDisplacementControllerV2 *this)
{
  return (uint64_t)this + 872;
}

uint64_t clsp::ConvoyDisplacementControllerV2::setDispEnabled(uint64_t this, char a2)
{
  *(_BYTE *)(this + 72) = a2;
  return this;
}

uint64_t clsp::ConvoyDisplacementControllerV2::getDispEnabled(clsp::ConvoyDisplacementControllerV2 *this)
{
  return *((unsigned __int8 *)this + 72);
}

uint64_t clsp::ConvoyDisplacementControllerV2::setAttenuationFactor(uint64_t this, float a2)
{
  *(float *)(this + 104) = a2;
  return this;
}

float clsp::ConvoyDisplacementControllerV2::getAttenuationFactor(clsp::ConvoyDisplacementControllerV2 *this)
{
  return *((float *)this + 26);
}

void clsp::ConvoyDisplacementControllerV2::calcCoeffs(clsp::ConvoyDisplacementControllerV2 *this, double a2, double a3)
{
  double *v4;
  float v7;
  float v8;
  float v9;
  float v10;
  float v11;
  double *v12;
  double v13;
  double v14;
  float v15;
  double *v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  float v22;
  unint64_t v23;
  NSObject **v24;
  NSObject *v25;
  float v26;
  int v27;
  const char *v28;
  __int16 v29;
  int v30;
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  v4 = (double *)*((_QWORD *)this + 19);
  if (!v4)
    __assert_rtn("calcCoeffs", "ConvoyDispControllerV2.cpp", 220, "mr_dispModel");
  v7 = *((float *)this + 105);
  v8 = v7 * *((float *)this + 94);
  v9 = v7 * *((float *)this + 95);
  if (v8 > 0.0)
    v8 = 0.0;
  if (v9 < 0.0)
    v9 = 0.0;
  v10 = -v8;
  if (v9 > v10)
    v9 = v10;
  *((float *)this + 109) = v9;
  *((float *)this + 24) = v9;
  *((float *)this + 25) = 1.0 / v9;
  *((float *)this + 106) = v9;
  *((float *)this + 107) = 1.0 / v9;
  clsp::DisplacementModelSealed::calcCoeffsFLV(v4, (float *)this + 32, a2, a3);
  v11 = clsp::DisplacementModelSealed::calcCoeffsFLV(*((double **)this + 19), (float *)this + 46, a2, 1.0);
  v12 = (double *)*((_QWORD *)this + 19);
  v13 = (*(double (**)(clsp::ConvoyDisplacementControllerV2 *, float))(*(_QWORD *)this + 72))(this, v11);
  v14 = (*(double (**)(clsp::ConvoyDisplacementControllerV2 *))(*(_QWORD *)this + 40))(this);
  v15 = clsp::DisplacementModelSealed::calcCoeffsPTP(v12, (float *)this + 27, a2, v13, v14, a3);
  v16 = (double *)*((_QWORD *)this + 19);
  v17 = (*(double (**)(clsp::ConvoyDisplacementControllerV2 *, float))(*(_QWORD *)this + 72))(this, v15);
  v18 = (*(double (**)(clsp::ConvoyDisplacementControllerV2 *))(*(_QWORD *)this + 40))(this);
  clsp::LFSN::calcCoeffs((uint64_t)this + 872, v16, a2, *(double *)((char *)this + 108), *((float *)this + 32), *((float *)this + 33), v17, v18, *((float *)this + 106), a3);
  clsp::AttackRelease<float,double>::calcCoeffs((uint64_t)this + 616, a2);
  clsp::AttackRelease<float,double>::calcCoeffs((uint64_t)this + 656, a2);
  v19 = *((double *)this + 7);
  *((double *)this + 87) = v19;
  v20 = v19 * a2;
  v21 = 0.0;
  if (v20 >= 0.00001)
    v21 = exp(-4.60517019 / v20);
  v22 = 1.0 - v21;
  *((float *)this + 176) = v22;
  clsp::ConvoyDisplacementController::designBQCoeffs(9, *((double **)this + 20), a2, 1.0);
  clsp::ConvoyDisplacementController::designBQCoeffs(9, *((double **)this + 21), a2, 1.0);
  clsp::ConvoyDisplacementController::designBQCoeffs(8, *((double **)this + 22), a2, 1.0);
  v23 = vcvtad_u64_f64(*((double *)this + 8) * 0.001 * a2);
  *((_QWORD *)this + 49) = v23;
  if (v23 >= (uint64_t)(*((_QWORD *)this + 43) - *((_QWORD *)this + 41)) >> 2)
  {
    if (shouldTraceRender())
    {
      v24 = (NSObject **)spp3SubsystemAsync();
      if (v24)
      {
        v25 = *v24;
        if (!*v24)
          goto LABEL_19;
      }
      else
      {
        v25 = MEMORY[0x1E0C81028];
      }
      if (os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT))
      {
        v27 = 136315394;
        v28 = "ConvoyDispControllerV2.cpp";
        v29 = 1024;
        v30 = 263;
        _os_log_impl(&dword_1B5ED0000, v25, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Trying to set peakFinderWindowTime_ms past max capacity", (uint8_t *)&v27, 0x12u);
      }
    }
  }
  else
  {
    std::vector<float>::resize((uint64_t)this + 304, v23);
    std::vector<float>::resize((uint64_t)this + 328, *((_QWORD *)this + 49));
  }
LABEL_19:
  *((float32x2_t *)this + 50) = vmul_f32(*(float32x2_t *)((char *)this + 384), (float32x2_t)vrev64_s32(*(int32x2_t *)((char *)this + 376)));
  clsp::AttackReleaseTo<float,double>::calcCoeffs((uint64_t)this + 712, a2);
  clsp::AttackReleaseTo<float,double>::calcCoeffs((uint64_t)this + 752, a2);
  clsp::AttackRelease<float,double>::calcCoeffs((uint64_t)this + 792, a2);
  clsp::AttackRelease<float,double>::calcCoeffs((uint64_t)this + 832, a2);
  v26 = round(*((float *)this + 135) * 0.001 * a2);
  *((float *)this + 136) = v26;
  *((_DWORD *)this + 125) = vcvtad_u64_f64(a2 * 0.1);
  *((_DWORD *)this + 126) = vcvtad_u64_f64(a2);
  *((_DWORD *)this + 127) = vcvtad_u64_f64(a2 * 30.0);
  *((_QWORD *)this + 73) = llround(a2);
}

uint64_t clsp::ConvoyDisplacementControllerV2::calcCoeffsSyncDisp(clsp::ConvoyDisplacementControllerV2 *this, double a2, double a3, double a4, double a5, double a6, double a7)
{
  double *v7;
  double v13;
  double v14;
  long double v15;
  long double v16;
  long double v17;
  float v18;
  float v19;
  float v20;
  uint64_t v21;

  v7 = (double *)*((_QWORD *)this + 19);
  if (!v7)
    __assert_rtn("calcCoeffsSyncDisp", "ConvoyDispControllerV2.cpp", 298, "mr_dispModel");
  v13 = 1.0 / a2;
  v14 = -(1.0 / a2 * a3);
  v15 = exp(v14 / (a4 + a4)) * -2.0;
  v16 = v15 * cos(v13 * a3 * sqrt(1.0 / (a4 * -4.0 * a4) + 1.0));
  v17 = exp(v14 / a4);
  v18 = (v17 + v16 + 1.0) * (a7 * 1000.0 * v7[1] / (*v7 * v7[4]));
  v19 = v16;
  *(float *)&v17 = v17;
  *((float *)this + 27) = v19;
  *((_DWORD *)this + 28) = LODWORD(v17);
  *((float *)this + 29) = v18;
  LODWORD(v17) = *((_DWORD *)this + 32);
  v20 = *((float *)this + 33);
  v21 = *(_QWORD *)((char *)this + 108);
  *((_DWORD *)this + 232) = 1065353216;
  *((_DWORD *)this + 233) = LODWORD(v17);
  *((float *)this + 234) = v20;
  *((_QWORD *)this + 115) = v21;
  *(float *)&v17 = 1.0 / (1.0 - *(float *)&v17 + v20);
  *((_DWORD *)this + 239) = LODWORD(v17);
  return clsp::LFSNFeedbackCoeffCalc::calcCoeffs((clsp::ConvoyDisplacementControllerV2 *)((char *)this + 872), a2, a3, a4, a5, 1.0, a6);
}

void clsp::ConvoyDisplacementControllerV2::processSample(clsp::ConvoyDisplacementControllerV2 *this, float a2, float a3)
{
  float v5;
  float v6;
  float v7;
  clsp::CLSP_Log *v8;
  clsp::CLSP_Log *v9;
  float v10;
  float v11;
  float v12;
  float __src;
  float v14;

  if (*((_BYTE *)this + 72))
  {
    v5 = *((float *)this + 26);
    if (v5 >= *((float *)this + 224))
      v5 = *((float *)this + 224);
    v6 = (float)(*((float *)this + 218) + (float)(*((float *)this + 219) * v5))
       + (float)(*((float *)this + 220) * (float)(v5 * v5));
    v7 = (float)(*((float *)this + 221) + (float)(*((float *)this + 222) * v5))
       + (float)(*((float *)this + 223) * (float)(v5 * v5));
    *((float *)this + 230) = v6;
    *((float *)this + 231) = v7;
    v8 = *(clsp::CLSP_Log **)(*((_QWORD *)this + 113) + 16);
    if (v8)
    {
      __src = v6;
      clsp::CLSP_Log::LogCLSPData(v8, &__src, 1);
      v9 = *(clsp::CLSP_Log **)(*((_QWORD *)this + 113) + 16);
      if (v9)
      {
        v14 = v7;
        clsp::CLSP_Log::LogCLSPData(v9, &v14, 1);
      }
    }
    v10 = *((float *)this + 235);
    v11 = *((float *)this + 237);
    v12 = (float)((float)((float)((float)(*((float *)this + 233) * v10) + (float)(a3 * *((float *)this + 232)))
                        + (float)(*((float *)this + 236) * *((float *)this + 234)))
                - (float)(v11 * *((float *)this + 230)))
        - (float)(*((float *)this + 238) * *((float *)this + 231));
    *((float *)this + 235) = a3;
    *((float *)this + 236) = v10;
    *((float *)this + 237) = v12;
    *((float *)this + 238) = v11;
  }
}

float32_t clsp::ConvoyDisplacementControllerV2::analyzeDisp(float32x2_t *this, float a2, float a3)
{
  float v4;
  float v5;
  uint64_t v6;
  float v7;
  float v8;
  float v9;
  uint64_t v10;
  float v11;
  float v12;
  float v13;
  float v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float v19;
  float v20;
  uint64_t v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float v29;
  float v30;
  float v31;
  float v32;
  uint64_t v33;
  float v34;
  float v35;
  float v36;
  float v37;
  float32x2_t v38;
  float32_t v39;
  clsp::CLSP_Log **v40;
  clsp::CLSP_Log *v41;
  clsp::CLSP_Log *v42;
  clsp::CLSP_Log *v43;
  clsp::CLSP_Log *v44;
  clsp::CLSP_Log *v45;
  clsp::CLSP_Log *v46;
  clsp::CLSP_Log *v47;
  clsp::CLSP_Log *v48;
  clsp::CLSP_Log *v49;
  float *v50;
  float __src;

  v4 = this[60].f32[0];
  v5 = this[103].f32[0];
  v6 = 203;
  if (v5 < v4)
    v6 = 202;
  v7 = v5 + (float)(this->f32[v6] * (float)(v4 - v5));
  this[103].f32[0] = v7;
  v8 = this[54].f32[1];
  v9 = this[108].f32[0];
  v10 = 213;
  if (v9 < v8)
    v10 = 212;
  v11 = v9 + (float)(this->f32[v10] * (float)(v8 - v9));
  this[108].f32[0] = v11;
  v12 = 1.0 / v11;
  this[12].f32[0] = v11;
  this[12].f32[1] = 1.0 / v11;
  v13 = this[14].f32[0];
  v14 = this[15].f32[0];
  v15 = (float)((float)(v7 * a2) * this[14].f32[1]) - (float)(v14 * this[13].f32[1]);
  v16 = this[15].f32[1];
  v17 = this[16].f32[0];
  v18 = v15 - (float)(v16 * v13);
  this[15].f32[0] = v18;
  this[15].f32[1] = v14;
  v19 = -(float)(v15 + (float)((float)-v16 * v13));
  if (v18 >= 0.0)
    v19 = v18;
  v20 = this[81].f32[0];
  v21 = 159;
  if (v20 < v19)
    v21 = 158;
  v22 = this->f32[v21];
  v23 = v19 - v20;
  v24 = v20 + (float)(v22 * v23);
  this[81].f32[0] = v24;
  if (v11 >= v24)
    v25 = v11;
  else
    v25 = v20 + (float)(v22 * v23);
  v26 = this[16].f32[1];
  v27 = this[17].f32[1];
  v28 = this[18].f32[0];
  v29 = (float)((float)(v7 * a3) * this[17].f32[0]) - (float)(v27 * v17);
  v30 = v29 - (float)(v28 * v26);
  this[17].f32[1] = v30;
  this[18].f32[0] = v27;
  v31 = -(float)(v29 + (float)((float)-v28 * v26));
  if (v30 >= 0.0)
    v31 = v30;
  v32 = this[86].f32[0];
  v33 = 169;
  if (v32 < v31)
    v33 = 168;
  v34 = this->f32[v33];
  v35 = v32 + (float)(v34 * (float)(v31 - v32));
  this[86].f32[0] = v35;
  if (v11 >= v35)
    v36 = v11;
  else
    v36 = v32 + (float)(v34 * (float)(v31 - v32));
  v37 = this[88].f32[1] + (float)(this[88].f32[0] * (float)((float)(v12 * v36) - this[88].f32[1]));
  this[88].f32[1] = v37;
  v38.f32[0] = v12 * (float)(v25 * v37);
  v39 = v38.f32[0] * this[53].f32[0];
  v38.f32[1] = v31;
  this[72] = (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(v38, this[72]), (int8x8_t)v38, (int8x8_t)this[72]);
  this[13].f32[0] = v39;
  v40 = (clsp::CLSP_Log **)this[123];
  v41 = *v40;
  if (*v40)
  {
    __src = a3;
    clsp::CLSP_Log::LogCLSPData(v41, &__src, 1);
    v40 = (clsp::CLSP_Log **)this[123];
  }
  v42 = v40[2];
  if (v42)
  {
    __src = v18;
    clsp::CLSP_Log::LogCLSPData(v42, &__src, 1);
    v40 = (clsp::CLSP_Log **)this[123];
    v43 = v40[2];
    if (v43)
    {
      __src = v24;
      clsp::CLSP_Log::LogCLSPData(v43, &__src, 1);
      v40 = (clsp::CLSP_Log **)this[123];
      v44 = v40[2];
      if (v44)
      {
        __src = v25;
        clsp::CLSP_Log::LogCLSPData(v44, &__src, 1);
        v40 = (clsp::CLSP_Log **)this[123];
        v45 = v40[2];
        if (v45)
        {
          __src = v37;
          clsp::CLSP_Log::LogCLSPData(v45, &__src, 1);
          v40 = (clsp::CLSP_Log **)this[123];
        }
      }
    }
  }
  v46 = *v40;
  if (*v40)
  {
    __src = v30;
    clsp::CLSP_Log::LogCLSPData(v46, &__src, 1);
    v47 = **(clsp::CLSP_Log ***)&this[123];
    if (v47)
    {
      __src = v35;
      clsp::CLSP_Log::LogCLSPData(v47, &__src, 1);
      v48 = **(clsp::CLSP_Log ***)&this[123];
      if (v48)
      {
        __src = this[13].f32[0];
        clsp::CLSP_Log::LogCLSPData(v48, &__src, 1);
        v49 = **(clsp::CLSP_Log ***)&this[123];
        if (v49)
        {
          v50 = (float *)(*(uint64_t (**)(float32x2_t *))(*(_QWORD *)this + 128))(this);
          __src = log10f(v50[21]* (float)((float)((float)((float)(1.0 - v50[12]) + v50[13])* (float)((float)(v50[14] + v50[15]) + v50[16]))/ (float)((float)(v50[12] + 1.0) + v50[13])))* 20.0;
          clsp::CLSP_Log::LogCLSPData(v49, &__src, 1);
        }
      }
    }
  }
  return this[13].f32[0];
}

float clsp::ConvoyDisplacementControllerV2::getNormAttenFactor(clsp::ConvoyDisplacementControllerV2 *this)
{
  return *((float *)this + 26) * *((float *)this + 107);
}

uint64_t clsp::ConvoyDisplacementControllerV2::setSkipTelemetryBuffer(uint64_t this, char a2)
{
  *(_BYTE *)(this + 560) = a2;
  return this;
}

double clsp::ConvoyDisplacementControllerV2::reset(clsp::ConvoyDisplacementControllerV2 *this)
{
  float v1;
  float v2;
  float v3;
  float v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  double result;

  *((_QWORD *)this + 55) = 0;
  *((_QWORD *)this + 56) = 0;
  *((_DWORD *)this + 120) = 1065353216;
  *((_DWORD *)this + 206) = 1065353216;
  v1 = *((float *)this + 105);
  v2 = fabsf(*((float *)this + 94));
  v3 = fabsf(*((float *)this + 95));
  if (v3 < v2)
    v2 = v3;
  v4 = v1 * v2;
  *((float *)this + 24) = v4;
  *((float *)this + 25) = 1.0 / v4;
  *((float *)this + 109) = v4;
  *((float *)this + 216) = v4;
  *((float *)this + 108) = v1;
  *((_DWORD *)this + 187) = *((_DWORD *)this + 186);
  *((_DWORD *)this + 197) = *((_DWORD *)this + 196);
  *(_QWORD *)((char *)this + 948) = 0;
  *(_QWORD *)((char *)this + 940) = 0;
  *((_QWORD *)this + 15) = 0;
  *((_DWORD *)this + 162) = 0;
  *(_QWORD *)((char *)this + 140) = 0;
  *((_DWORD *)this + 172) = 0;
  *((_DWORD *)this + 177) = 0;
  *((float *)this + 26) = v4;
  v5 = *((_QWORD *)this + 20);
  *(_OWORD *)(v5 + 56) = 0u;
  *(_OWORD *)(v5 + 40) = 0u;
  v6 = *((_QWORD *)this + 21);
  *(_OWORD *)(v6 + 56) = 0u;
  *(_OWORD *)(v6 + 40) = 0u;
  v7 = *((_QWORD *)this + 22);
  *(_OWORD *)(v7 + 56) = 0u;
  *(_OWORD *)(v7 + 40) = 0u;
  *(_QWORD *)((char *)this + 196) = 0;
  *((_QWORD *)this + 71) = 0;
  *((_DWORD *)this + 130) = 0;
  *((_QWORD *)this + 64) = 0;
  *((_QWORD *)this + 57) = 0;
  *((_QWORD *)this + 58) = 0;
  *((_DWORD *)this + 133) = *((_DWORD *)this + 132);
  *((_DWORD *)this + 137) = 0;
  *((_BYTE *)this + 560) = 0;
  *(_QWORD *)&result = 1065353216;
  *((_QWORD *)this + 72) = 1065353216;
  *((_DWORD *)this + 139) = 0;
  *((_DWORD *)this + 148) = 0;
  *((_QWORD *)this + 75) = 0;
  *((_BYTE *)this + 608) = 0;
  return result;
}

uint64_t clsp::ConvoyDisplacementControllerV2::zapBadValues(uint64_t this)
{
  float64x2_t v1;
  float64x2_t v2;
  float32x4_t v3;
  float32x4_t v4;
  float64x2_t v5;
  float64x2_t v6;
  float v7;
  uint64_t v8;
  uint64_t v9;
  float64x2_t v10;
  float64x2_t v11;
  float64x2_t v12;
  float64x2_t v13;
  float64x2_t v14;
  float v15;
  double v16;
  float32x2_t v18;
  float64x2_t v19;
  float v20;
  double v21;
  float v23;
  double v24;
  float v26;
  double v27;
  float64x2_t v29;
  float64x2_t v30;
  float64x2_t v31;
  float64x2_t v32;
  uint64_t v33;
  float64x2_t v34;
  float64x2_t v35;
  float64x2_t v36;
  float64x2_t v37;
  float64x2_t v38;
  float v39;
  double v40;
  float v42;
  double v43;
  float v45;
  double v46;
  double v48;
  float v50;

  v1 = (float64x2_t)vdupq_n_s64(0x3CD203AF9EE75616uLL);
  v2 = (float64x2_t)vdupq_n_s64(0x430C6BF526340000uLL);
  v3 = *(float32x4_t *)(this + 940);
  v4 = vabsq_f32(v3);
  v5 = vcvt_hight_f64_f32(v4);
  v6 = vcvtq_f64_f32(*(float32x2_t *)v4.f32);
  *(int8x16_t *)(this + 940) = vandq_s8((int8x16_t)v3, (int8x16_t)vuzp1q_s32((int32x4_t)vandq_s8((int8x16_t)vcgtq_f64(v6, v1), (int8x16_t)vcgtq_f64(v2, v6)), (int32x4_t)vandq_s8((int8x16_t)vcgtq_f64(v5, v1), (int8x16_t)vcgtq_f64(v2, v5))));
  v7 = *(float *)(this + 424);
  v8 = *(_QWORD *)(this + 160);
  v9 = *(_QWORD *)(this + 168);
  v10 = *(float64x2_t *)(v8 + 40);
  v11 = vabsq_f64(v10);
  *(int8x16_t *)(v8 + 40) = vandq_s8((int8x16_t)v10, vandq_s8((int8x16_t)vcgtq_f64(v11, v1), (int8x16_t)vcgtq_f64(v2, v11)));
  v12 = *(float64x2_t *)(v8 + 56);
  v13 = vabsq_f64(v12);
  *(int8x16_t *)(v8 + 56) = vandq_s8((int8x16_t)v12, vandq_s8((int8x16_t)vcgtq_f64(v13, v1), (int8x16_t)vcgtq_f64(v2, v13)));
  v12.f64[0] = *(float64_t *)(this + 120);
  v14 = vcvtq_f64_f32(vabs_f32(*(float32x2_t *)&v12.f64[0]));
  *(int8x8_t *)(this + 120) = vand_s8(*(int8x8_t *)&v12.f64[0], (int8x8_t)vmovn_s64((int64x2_t)vandq_s8((int8x16_t)vcgtq_f64(v14, v1), (int8x16_t)vcgtq_f64(v2, v14))));
  v15 = *(float *)(this + 648);
  v16 = fabsf(v15);
  if (v16 >= 1.0e15 || v16 <= 1.0e-15)
    v15 = 0.0;
  *(float *)(this + 648) = v15;
  v18 = *(float32x2_t *)(this + 140);
  v19 = vcvtq_f64_f32(vabs_f32(v18));
  *(int8x8_t *)(this + 140) = vand_s8((int8x8_t)v18, (int8x8_t)vmovn_s64((int64x2_t)vandq_s8((int8x16_t)vcgtq_f64(v19, v1), (int8x16_t)vcgtq_f64(v2, v19))));
  v20 = *(float *)(this + 688);
  v21 = fabsf(v20);
  if (v21 >= 1.0e15 || v21 <= 1.0e-15)
    v20 = 0.0;
  *(float *)(this + 688) = v20;
  v23 = *(float *)(this + 708);
  v24 = fabsf(v23);
  if (v24 >= 1.0e15 || v24 <= 1.0e-15)
    v23 = 0.0;
  *(float *)(this + 708) = v23;
  v26 = *(float *)(this + 104);
  v27 = fabsf(v26);
  if (v27 >= 1.0e15 || v27 <= 1.0e-15)
    v26 = 0.0;
  if (v26 >= v7)
    v7 = v26;
  *(float *)(this + 104) = v7;
  v29 = *(float64x2_t *)(v9 + 40);
  v30 = vabsq_f64(v29);
  *(int8x16_t *)(v9 + 40) = vandq_s8((int8x16_t)v29, vandq_s8((int8x16_t)vcgtq_f64(v30, v1), (int8x16_t)vcgtq_f64(v2, v30)));
  v31 = *(float64x2_t *)(v9 + 56);
  v32 = vabsq_f64(v31);
  *(int8x16_t *)(v9 + 56) = vandq_s8((int8x16_t)v31, vandq_s8((int8x16_t)vcgtq_f64(v32, v1), (int8x16_t)vcgtq_f64(v2, v32)));
  v33 = *(_QWORD *)(this + 176);
  v34 = *(float64x2_t *)(v33 + 40);
  v35 = vabsq_f64(v34);
  *(int8x16_t *)(v33 + 40) = vandq_s8((int8x16_t)v34, vandq_s8((int8x16_t)vcgtq_f64(v35, v1), (int8x16_t)vcgtq_f64(v2, v35)));
  v36 = *(float64x2_t *)(v33 + 56);
  v37 = vabsq_f64(v36);
  *(int8x16_t *)(v33 + 56) = vandq_s8((int8x16_t)v36, vandq_s8((int8x16_t)vcgtq_f64(v37, v1), (int8x16_t)vcgtq_f64(v2, v37)));
  v36.f64[0] = *(float64_t *)(this + 196);
  v38 = vcvtq_f64_f32(vabs_f32(*(float32x2_t *)&v36.f64[0]));
  *(int8x8_t *)(this + 196) = vand_s8(*(int8x8_t *)&v36.f64[0], (int8x8_t)vmovn_s64((int64x2_t)vandq_s8((int8x16_t)vcgtq_f64(v38, v1), (int8x16_t)vcgtq_f64(v2, v38))));
  v39 = *(float *)(this + 748);
  v40 = fabsf(v39);
  if (v40 >= 1.0e15 || v40 <= 1.0e-15)
    v39 = 0.0;
  *(float *)(this + 748) = v39;
  if (v39 == 0.0)
    *(_DWORD *)(this + 748) = *(_DWORD *)(this + 744);
  v42 = *(float *)(this + 788);
  v43 = fabsf(v42);
  if (v43 >= 1.0e15 || v43 <= 1.0e-15)
    v42 = 0.0;
  *(float *)(this + 788) = v42;
  if (v42 == 0.0)
    *(_DWORD *)(this + 788) = *(_DWORD *)(this + 784);
  v45 = *(float *)(this + 824);
  v46 = fabsf(v45);
  if (v46 >= 1.0e15 || v46 <= 1.0e-15)
    v45 = 0.0;
  *(float *)(this + 824) = v45;
  v48 = fabsf(*(float *)(this + 864));
  if (v48 >= 1.0e15 || v48 <= 1.0e-15)
    v50 = 0.0;
  else
    v50 = *(float *)(this + 864);
  *(float *)(this + 864) = v50;
  return this;
}

double clsp::ConvoyDisplacementControllerV2::postProcess(clsp::ConvoyDisplacementControllerV2 *this)
{
  double result;

  *(_QWORD *)&result = 1065353216;
  *((_QWORD *)this + 72) = 1065353216;
  return result;
}

float clsp::ConvoyDisplacementControllerV2::getflvMax(clsp::ConvoyDisplacementControllerV2 *this)
{
  return *((float *)this + 145);
}

float clsp::ConvoyDisplacementControllerV2::getAttenuationMax(clsp::ConvoyDisplacementControllerV2 *this)
{
  return *((float *)this + 144);
}

_QWORD *clsp::ConvoyDisplacementControllerV2::setLogs(uint64_t a1, uint64_t *a2)
{
  std::shared_ptr<clsp::CLSPKernel_Logs>::operator=[abi:ne180100]((_QWORD *)(a1 + 984), *a2, a2[1]);
  return std::shared_ptr<clsp::CLSPKernel_Logs>::operator=[abi:ne180100]((_QWORD *)(a1 + 904), *a2, a2[1]);
}

uint64_t clsp::ConvoyDisplacementControllerV2::ConvoyDisplacementControllerV2(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, double a6, double a7, double a8, double a9, double a10, double a11, double a12)
{
  float v19;
  float v20;
  uint64_t *v21;
  __int128 v22;
  float v23;
  int v24;
  int v25;
  int32x4_t v26;
  int32x4_t v27;
  int32x4_t v28;
  double v29;
  double v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  const char *v39;
  int v40;

  *(_DWORD *)(a1 + 8) = 4;
  *(_QWORD *)a1 = &off_1E69E1398;
  *(double *)(a1 + 16) = a7;
  *(double *)(a1 + 24) = a8;
  *(double *)(a1 + 32) = a9;
  *(double *)(a1 + 40) = a10;
  *(double *)(a1 + 48) = a11;
  *(double *)(a1 + 56) = a12;
  *(double *)(a1 + 64) = *(float *)(a4 + 16);
  *(_BYTE *)(a1 + 72) = 1;
  *(_QWORD *)(a1 + 80) = a4;
  *(_QWORD *)(a1 + 88) = a5;
  v19 = a8;
  v20 = 1.0 / a8;
  *(float *)(a1 + 96) = v19;
  *(float *)(a1 + 100) = v20;
  *(float *)(a1 + 104) = v19;
  *(_QWORD *)(a1 + 140) = 0;
  *(_OWORD *)(a1 + 124) = 0u;
  *(_OWORD *)(a1 + 108) = 0u;
  *(_QWORD *)(a1 + 152) = a3;
  *(_OWORD *)(a1 + 160) = 0u;
  v21 = (uint64_t *)(a1 + 160);
  *(_OWORD *)(a1 + 188) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  std::vector<float>::vector((_QWORD *)(a1 + 208), a2);
  std::vector<float>::vector((_QWORD *)(a1 + 232), a2);
  std::vector<float>::vector((_QWORD *)(a1 + 256), a2);
  std::vector<float>::vector((_QWORD *)(a1 + 280), a2);
  std::vector<float>::vector((_QWORD *)(a1 + 304), vcvtad_u64_f64(*(double *)(a1 + 64) * 0.001 * a6));
  std::vector<float>::vector((_QWORD *)(a1 + 328), vcvtad_u64_f64(*(double *)(a1 + 64) * 0.001 * a6));
  std::vector<float>::vector((_QWORD *)(a1 + 352), a2);
  *(_QWORD *)(a1 + 392) = vcvtad_u64_f64(*(double *)(a1 + 64) * 0.001 * a6);
  *(_QWORD *)&v22 = *(_QWORD *)(a4 + 4);
  *((_QWORD *)&v22 + 1) = *(_QWORD *)(a4 + 20);
  *(_OWORD *)(a1 + 376) = v22;
  *(float32x2_t *)(a1 + 400) = vmul_f32((float32x2_t)vrev64_s32(*(int32x2_t *)&v22), *(float32x2_t *)((char *)&v22 + 8));
  v23 = __exp10(*(float *)(a4 + 40) / -20.0);
  *(float *)(a1 + 408) = v23;
  v24 = *(_DWORD *)(a4 + 28);
  *(_DWORD *)(a1 + 412) = v24;
  *(_DWORD *)(a1 + 416) = v24;
  v25 = *(_DWORD *)(a4 + 36);
  *(_DWORD *)(a1 + 420) = v25;
  *(float *)(a1 + 424) = v19;
  *(float *)(a1 + 428) = v20;
  *(_DWORD *)(a1 + 432) = v25;
  *(_DWORD *)(a1 + 436) = *(_DWORD *)(a1 + 96);
  *(_OWORD *)(a1 + 440) = 0u;
  *(_OWORD *)(a1 + 456) = 0u;
  *(_QWORD *)(a1 + 472) = 0;
  *(_DWORD *)(a1 + 480) = 1065353216;
  v26 = *(int32x4_t *)(a4 + 52);
  *(int32x4_t *)(a1 + 484) = v26;
  *(double *)v26.i64 = a6 * 0.1;
  *(_DWORD *)(a1 + 500) = vcvtad_u64_f64(a6 * 0.1);
  *(_DWORD *)(a1 + 504) = vcvtad_u64_f64(a6);
  *(_DWORD *)(a1 + 508) = vcvtad_u64_f64(a6 * 30.0);
  *(_QWORD *)(a1 + 512) = 0;
  *(_QWORD *)(a1 + 517) = 0;
  v27.i64[0] = *(_QWORD *)(a4 + 84);
  v28 = vzip1q_s32(v27, v26);
  v28.i32[1] = v28.i32[0];
  v28.i32[3] = *(_DWORD *)(a4 + 92);
  *(int32x4_t *)(a1 + 528) = v28;
  *(float *)v28.i32 = round(*(float *)&v28.i32[3] * 0.001 * a6);
  *(_DWORD *)(a1 + 544) = v28.i32[0];
  *(_QWORD *)(a1 + 568) = 0;
  *(_QWORD *)(a1 + 553) = 0;
  *(_QWORD *)(a1 + 548) = 0;
  *(_QWORD *)(a1 + 576) = 1065353216;
  *(_QWORD *)(a1 + 584) = llround(a6);
  *(_DWORD *)(a1 + 592) = 0;
  *(_QWORD *)(a1 + 600) = 0;
  *(_BYTE *)(a1 + 608) = 0;
  *(double *)(a1 + 616) = a10;
  *(double *)(a1 + 624) = a11;
  *(_QWORD *)(a1 + 632) = 0;
  *(_DWORD *)(a1 + 648) = 0;
  *(double *)(a1 + 656) = a10;
  *(double *)(a1 + 664) = a11;
  *(_QWORD *)(a1 + 672) = 0;
  *(_DWORD *)(a1 + 688) = 0;
  *(_OWORD *)(a1 + 696) = 0u;
  v29 = *(float *)(a4 + 76);
  v30 = *(float *)(a4 + 80);
  *(double *)(a1 + 712) = v29;
  *(double *)(a1 + 720) = v30;
  *(_OWORD *)(a1 + 736) = xmmword_1B6629CB0;
  *(double *)(a1 + 752) = v29;
  *(double *)(a1 + 760) = v30;
  *(_OWORD *)(a1 + 776) = xmmword_1B6629CB0;
  *(float64x2_t *)(a1 + 792) = vcvtq_f64_f32(*(float32x2_t *)(a4 + 44));
  *(_QWORD *)(a1 + 808) = 0;
  *(_DWORD *)(a1 + 824) = 0;
  *(float64x2_t *)(a1 + 832) = vcvtq_f64_f32(*(float32x2_t *)(a4 + 68));
  *(_QWORD *)(a1 + 848) = 0;
  *(_DWORD *)(a1 + 864) = 0;
  *(_OWORD *)(a1 + 920) = 0u;
  *(_OWORD *)(a1 + 936) = 0u;
  *(_QWORD *)(a1 + 969) = 0;
  *(_QWORD *)(a1 + 964) = 0;
  *(_OWORD *)(a1 + 904) = 0u;
  *(_DWORD *)(a1 + 896) = 0;
  *(_OWORD *)(a1 + 880) = 0u;
  *(_QWORD *)(a1 + 872) = 0;
  *(_QWORD *)(a1 + 952) = 0;
  *(_DWORD *)(a1 + 960) = 1065353216;
  *(_OWORD *)(a1 + 984) = 0u;
  if (!a3)
  {
    v39 = "inDispModel";
    v40 = 106;
    goto LABEL_18;
  }
  if (*(float *)(a1 + 380) <= 0.0)
  {
    v39 = "mc_xMax > 0.";
    v40 = 108;
    goto LABEL_18;
  }
  if (*(float *)(a1 + 376) >= 0.0)
  {
    v39 = "mc_xMin < 0.";
    v40 = 109;
    goto LABEL_18;
  }
  if (*(float *)(a1 + 400) <= 0.0)
  {
    v39 = "mc_posPeakFinderThreshold > 0.";
    v40 = 110;
    goto LABEL_18;
  }
  if (*(float *)(a1 + 404) >= 0.0)
  {
    v39 = "mc_negPeakFinderThreshold < 0.";
    v40 = 111;
LABEL_18:
    __assert_rtn("ConvoyDisplacementControllerV2", "ConvoyDispControllerV2.cpp", v40, v39);
  }
  v31 = (unint64_t)round(*(double *)v26.i64);
  std::vector<float>::reserve((void **)(a1 + 304), v31);
  std::vector<float>::reserve((void **)(a1 + 328), v31);
  v32 = operator new();
  *(_QWORD *)(v32 + 64) = 0;
  *(_OWORD *)(v32 + 32) = 0u;
  *(_OWORD *)(v32 + 48) = 0u;
  *(_OWORD *)v32 = 0u;
  *(_OWORD *)(v32 + 16) = 0u;
  v33 = *v21;
  *v21 = v32;
  if (v33)
    MEMORY[0x1BCC95CEC](v33, 0x1000C40FF89C88ELL);
  v34 = operator new();
  *(_QWORD *)(v34 + 64) = 0;
  *(_OWORD *)(v34 + 32) = 0u;
  *(_OWORD *)(v34 + 48) = 0u;
  *(_OWORD *)v34 = 0u;
  *(_OWORD *)(v34 + 16) = 0u;
  v35 = *(_QWORD *)(a1 + 168);
  *(_QWORD *)(a1 + 168) = v34;
  if (v35)
    MEMORY[0x1BCC95CEC](v35, 0x1000C40FF89C88ELL);
  v36 = operator new();
  *(_QWORD *)(v36 + 64) = 0;
  *(_OWORD *)(v36 + 32) = 0u;
  *(_OWORD *)(v36 + 48) = 0u;
  *(_OWORD *)v36 = 0u;
  *(_OWORD *)(v36 + 16) = 0u;
  v37 = *(_QWORD *)(a1 + 176);
  *(_QWORD *)(a1 + 176) = v36;
  if (v37)
    MEMORY[0x1BCC95CEC](v37, 0x1000C40FF89C88ELL);
  return a1;
}

void sub_1B6499C24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10, void **a11, void **a12)
{
  _QWORD *v12;
  uint64_t v13;
  uint64_t *v14;
  void **v15;
  void **v16;
  void **v17;
  void **v18;
  uint64_t v19;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  std::shared_ptr<vp::services::Telephony_Utility>::~shared_ptr[abi:ne180100](v13);
  std::shared_ptr<vp::services::Telephony_Utility>::~shared_ptr[abi:ne180100](v19);
  v21 = *v18;
  if (*v18)
  {
    v12[45] = v21;
    operator delete(v21);
  }
  v22 = *v17;
  if (*v17)
  {
    v12[42] = v22;
    operator delete(v22);
  }
  v23 = *v16;
  if (*v16)
  {
    v12[39] = v23;
    operator delete(v23);
  }
  v24 = *v15;
  if (*v15)
  {
    v12[36] = v24;
    operator delete(v24);
  }
  v25 = *a12;
  if (*a12)
  {
    v12[33] = v25;
    operator delete(v25);
  }
  v26 = *a10;
  if (*a10)
  {
    v12[30] = v26;
    operator delete(v26);
  }
  v27 = *a11;
  if (*a11)
  {
    v12[27] = v27;
    operator delete(v27);
  }
  v28 = v12[22];
  v12[22] = 0;
  if (v28)
    MEMORY[0x1BCC95CEC](v28, 0x1000C40FF89C88ELL);
  v29 = v12[21];
  v12[21] = 0;
  if (v29)
    MEMORY[0x1BCC95CEC](v29, 0x1000C40FF89C88ELL);
  v30 = *v14;
  *v14 = 0;
  if (v30)
    MEMORY[0x1BCC95CEC](v30, 0x1000C40FF89C88ELL);
  _Unwind_Resume(a1);
}

float clsp::ConvoyDisplacementControllerV2::resetToOpenLoop(clsp::ConvoyDisplacementControllerV2 *this)
{
  float v1;
  float v2;
  float v3;
  float v4;
  float result;

  *((_QWORD *)this + 55) = 0;
  *((_QWORD *)this + 56) = 0;
  *((_DWORD *)this + 120) = 1065353216;
  *((_DWORD *)this + 206) = 1065353216;
  v1 = *((float *)this + 105);
  v2 = fabsf(*((float *)this + 94));
  v3 = fabsf(*((float *)this + 95));
  if (v3 < v2)
    v2 = v3;
  v4 = v1 * v2;
  *((float *)this + 24) = v4;
  *((float *)this + 25) = 1.0 / v4;
  *((float *)this + 109) = v4;
  *((float *)this + 216) = v4;
  *((float *)this + 108) = v1;
  *((_DWORD *)this + 187) = *((_DWORD *)this + 186);
  result = *((float *)this + 196);
  *((float *)this + 197) = result;
  return result;
}

void HOASpatializer::~HOASpatializer(HOASpatializer *this)
{
  HOASpatializer::~HOASpatializer(this);
  JUMPOUT(0x1BCC95CECLL);
}

{
  uint64_t v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  _QWORD *v17;
  void *v18;
  void *v19;
  void **v20;

  *(_QWORD *)this = &off_1E69E14B0;
  v2 = *((_QWORD *)this + 92);
  *((_QWORD *)this + 92) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = (void *)*((_QWORD *)this + 89);
  if (v3)
  {
    *((_QWORD *)this + 90) = v3;
    operator delete(v3);
  }
  v4 = (void *)*((_QWORD *)this + 86);
  if (v4)
  {
    *((_QWORD *)this + 87) = v4;
    operator delete(v4);
  }
  v5 = (void *)*((_QWORD *)this + 83);
  if (v5)
  {
    *((_QWORD *)this + 84) = v5;
    operator delete(v5);
  }
  v6 = (void *)*((_QWORD *)this + 80);
  if (v6)
  {
    *((_QWORD *)this + 81) = v6;
    operator delete(v6);
  }
  v7 = (void *)*((_QWORD *)this + 77);
  if (v7)
  {
    *((_QWORD *)this + 78) = v7;
    operator delete(v7);
  }
  v8 = *((_QWORD *)this + 76);
  *((_QWORD *)this + 76) = 0;
  if (v8)
    std::default_delete<BypassableIRProcessor>::operator()[abi:ne180100](v8);
  v9 = *((_QWORD *)this + 75);
  *((_QWORD *)this + 75) = 0;
  if (v9)
    std::default_delete<SourceExtentProcessor>::operator()[abi:ne180100](v9);
  v10 = *((_QWORD *)this + 73);
  *((_QWORD *)this + 73) = 0;
  if (v10)
    std::default_delete<HOA::RotationMatrix>::operator()[abi:ne180100](v10);
  v11 = *((_QWORD *)this + 72);
  *((_QWORD *)this + 72) = 0;
  if (v11)
    std::default_delete<HOA::RotationMatrix>::operator()[abi:ne180100](v11);
  v12 = (void *)*((_QWORD *)this + 69);
  if (v12)
  {
    *((_QWORD *)this + 70) = v12;
    operator delete(v12);
  }
  v13 = (void *)*((_QWORD *)this + 66);
  if (v13)
  {
    *((_QWORD *)this + 67) = v13;
    operator delete(v13);
  }
  v14 = (void *)*((_QWORD *)this + 63);
  if (v14)
  {
    *((_QWORD *)this + 64) = v14;
    operator delete(v14);
  }
  v15 = (void *)*((_QWORD *)this + 60);
  if (v15)
  {
    *((_QWORD *)this + 61) = v15;
    operator delete(v15);
  }
  v16 = (void *)*((_QWORD *)this + 57);
  if (v16)
  {
    *((_QWORD *)this + 58) = v16;
    operator delete(v16);
  }
  v20 = (void **)((char *)this + 432);
  std::vector<std::unique_ptr<IR::FixedIntegerDelay>>::__destroy_vector::operator()[abi:ne180100](&v20);
  v17 = (_QWORD *)*((_QWORD *)this + 53);
  *((_QWORD *)this + 53) = 0;
  if (v17)
    std::default_delete<IR::FixedIntegerDelay>::operator()[abi:ne180100](v17);
  v18 = (void *)*((_QWORD *)this + 48);
  if (v18)
  {
    *((_QWORD *)this + 49) = v18;
    operator delete(v18);
  }
  v19 = (void *)*((_QWORD *)this + 45);
  if (v19)
  {
    *((_QWORD *)this + 46) = v19;
    operator delete(v19);
  }
  std::unique_ptr<HOA>::reset[abi:ne180100]((HOA **)this + 44, 0);
  Spatializer::~Spatializer(this);
}

uint64_t HOASpatializer::implementsDiffuse(HOASpatializer *this)
{
  return 1;
}

uint64_t HOASpatializer::initialize(HOASpatializer *this, float a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  double v9;
  double v10;
  double v11;
  float v12;
  const __CFDictionary *v14;
  const __CFDictionary *v15;
  unsigned int v16;
  _BOOL4 v17;
  unsigned int v18;
  _BOOL4 v19;
  const __CFDictionary *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  char *v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  unsigned int v28;
  unint64_t v29;
  int v31;
  uint64_t v32;
  NSObject *v33;
  uint64_t (***v34)(_QWORD, uint64_t, uint64_t, uint64_t, CFTypeRef *, _QWORD, _QWORD, float);
  NSObject *v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  const __CFDictionary *v39;
  CFDictionaryRef *v40;
  const void *v41;
  std::string::size_type v42;
  const void *v43;
  CFTypeRef v44;
  const void *v45;
  BypassableIRProcessor *v46;
  uint64_t v47;
  int v48;
  NSObject *v49;
  _QWORD *v50;
  _QWORD *v51;
  _QWORD *v52;
  _QWORD *v53;
  const __CFDictionary *v54;
  unsigned int v55;
  IR::IRProcessor *v56;
  uint64_t v57;
  std::string *v58;
  std::string *p_cf;
  std::string *v60;
  std::string *v61;
  std::string *v62;
  std::string *v63;
  __int128 v64;
  std::string *v65;
  __int128 v66;
  std::string *p_p;
  CFTypeRef v68;
  std::string::size_type v69;
  std::string __p;
  __int128 v71;
  __int128 v72;
  char v73;
  CFTypeRef v74;
  __int128 v75;
  const void *v76;
  _OWORD v77[2];
  CFTypeRef v78;
  uint64_t v79;
  int v80;
  CFTypeRef v81;
  std::string cf;
  __int128 v83;
  __int128 v84;
  char v85;
  CFTypeRef v86;
  __int128 v87;
  CFTypeRef v88;
  _OWORD v89[2];
  CFTypeRef v90;
  uint64_t v91;
  int v92;
  const __CFDictionary *v93;
  std::string v94;
  _BYTE buf[12];
  __int16 v96;
  int v97;
  char v98;
  uint8_t v99[4];
  std::string *v100;
  uint64_t v101;

  v101 = *MEMORY[0x1E0C80C00];
  *((_BYTE *)this + 16) = 0;
  v4 = *((_QWORD *)this + 44);
  if (!v4 || !*(_BYTE *)(v4 + 28) || (*(_DWORD *)(v4 + 4) + 1) * (*(_DWORD *)(v4 + 4) + 1) != *((_DWORD *)this + 104))
    return 4294956421;
  *((float *)this + 2) = a2;
  *((_DWORD *)this + 3) = a4;
  v9 = a2 * 0.001953125 * 0.02;
  if (v9 >= 2.22507386e-308)
    v10 = -6.90775528 / v9;
  else
    v10 = -INFINITY;
  v11 = exp(v10);
  if (v10 < -708.4)
    v11 = 0.0;
  v12 = v11;
  *((float *)this + 102) = v12;
  if (a3 < (unint64_t)((uint64_t)(*((_QWORD *)this + 49) - *((_QWORD *)this + 48)) >> 2))
    return 4294900553;
  v14 = (const __CFDictionary *)*((_QWORD *)this + 5);
  if (!v14)
  {
    v17 = 0;
    v19 = 0;
    v93 = 0;
    goto LABEL_24;
  }
  cf.__r_.__value_.__r.__words[0] = 0;
  applesauce::CF::at_or<applesauce::CF::DictionaryRef,__CFString const*&>(&v93, v14, (const void *)kOptionalFeatureSupport, &cf);
  if (cf.__r_.__value_.__r.__words[0])
    CFRelease(cf.__r_.__value_.__l.__data_);
  v15 = v93;
  if (!v93)
  {
    v17 = 0;
    v19 = 0;
    goto LABEL_24;
  }
  v16 = (unsigned __int16)applesauce::CF::details::find_at_key_or_optional<BOOL,__CFString const*&>(v93, (const void *)kOptionalFeatureSourceExtent);
  if (v16 <= 0x100)
    LOBYTE(v16) = 0;
  v17 = v16 != 0;
  v18 = (unsigned __int16)applesauce::CF::details::find_at_key_or_optional<BOOL,__CFString const*&>(v15, (const void *)kOptionalFeatureNearFieldHOA);
  if (v18 <= 0x100)
    LOBYTE(v18) = 0;
  v19 = v18 != 0;
  if (!v17)
  {
LABEL_24:
    if (!v19)
      goto LABEL_26;
  }
  std::vector<float>::resize((uint64_t)this + 616, a4);
LABEL_26:
  if (!v17)
  {
    v31 = -10868;
    goto LABEL_60;
  }
  std::vector<float>::resize((uint64_t)this + 640, a4);
  IR::getPresetDataAttributes();
  v20 = (const __CFDictionary *)*((_QWORD *)this + 4);
  if (v20)
  {
    applesauce::CF::details::find_at_key_or_optional<applesauce::CF::URLRef,__CFString const*&>(&__p, v20, (const void *)kHOASourceExtentIRCustomURLParamName);
    if (__p.__r_.__value_.__s.__data_[8])
      applesauce::CF::URLRef::operator=((const void **)&cf.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__data_);
    std::__optional_destruct_base<applesauce::CF::URLRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&__p);
  }
  v21 = operator new();
  BypassableIRProcessor::BypassableIRProcessor((BypassableIRProcessor *)v21, (const IR::IRDataAttributes *)&cf, 1u);
  *(_QWORD *)v21 = &off_1E69CD550;
  *(_DWORD *)(v21 + 224) = 2;
  *(_QWORD *)(v21 + 228) = 0x100000000;
  *(_BYTE *)(v21 + 236) = 0;
  *(_QWORD *)(v21 + 240) = 0x3F80000000000000;
  v22 = *((_QWORD *)this + 75);
  *((_QWORD *)this + 75) = v21;
  if (v22
    && (std::default_delete<SourceExtentProcessor>::operator()[abi:ne180100](v22),
        v21 = *((_QWORD *)this + 75),
        *(_DWORD *)(v21 + 224) != 2))
  {
    v23 = *(char **)(v21 + 160);
    v24 = *(char **)(v21 + 168);
  }
  else
  {
    v23 = *(char **)(v21 + 160);
    v24 = *(char **)(v21 + 168);
    if (v24 - v23 == 8)
    {
      v25 = (*(_DWORD *)(*((_QWORD *)this + 44) + 4) + 1) * (*(_DWORD *)(*((_QWORD *)this + 44) + 4) + 1);
      if (v25 != *(_DWORD *)(v21 + 228))
      {
        *(_DWORD *)(v21 + 228) = v25;
        v26 = *(_QWORD *)(v21 + 184);
        if (*(_QWORD *)(v21 + 192) != v26)
        {
          v27 = 0;
          v28 = 1;
          do
          {
            v29 = *(unsigned int *)(v21 + 228);
            LODWORD(__p.__r_.__value_.__l.__data_) = 0;
            std::vector<float>::assign((char **)(v26 + 24 * v27), v29, &__p);
            v27 = v28;
            v26 = *(_QWORD *)(v21 + 184);
          }
          while (0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(v21 + 192) - v26) >> 3) > v28++);
        }
        *(_BYTE *)(v21 + 208) = 0;
      }
      *(_BYTE *)(v21 + 236) = 1;
      goto LABEL_49;
    }
  }
  while (v23 != v24)
  {
    v32 = *(_QWORD *)v23;
    *(_QWORD *)v23 = 0;
    if (v32)
      (*(void (**)(uint64_t))(*(_QWORD *)v32 + 8))(v32);
    v23 += 8;
  }
  *(_BYTE *)(v21 + 208) = 0;
  if (getAUSMV2Log(void)::onceToken != -1)
    dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_5474);
  v33 = getAUSMV2Log(void)::gLog;
  if (os_log_type_enabled((os_log_t)getAUSMV2Log(void)::gLog, OS_LOG_TYPE_ERROR))
  {
    v62 = (std::string *)std::string::basic_string[abi:ne180100]<0>(buf, "SourceExtentProcessor");
    v63 = std::string::append(v62, "::", 2uLL);
    v64 = *(_OWORD *)&v63->__r_.__value_.__l.__data_;
    v94.__r_.__value_.__r.__words[2] = v63->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v94.__r_.__value_.__l.__data_ = v64;
    v63->__r_.__value_.__l.__size_ = 0;
    v63->__r_.__value_.__r.__words[2] = 0;
    v63->__r_.__value_.__r.__words[0] = 0;
    v65 = std::string::append(&v94, "setHOAParams", 0xCuLL);
    v66 = *(_OWORD *)&v65->__r_.__value_.__l.__data_;
    __p.__r_.__value_.__r.__words[2] = v65->__r_.__value_.__r.__words[2];
    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v66;
    v65->__r_.__value_.__l.__size_ = 0;
    v65->__r_.__value_.__r.__words[2] = 0;
    v65->__r_.__value_.__r.__words[0] = 0;
    p_p = &__p;
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    *(_DWORD *)v99 = 136315138;
    v100 = p_p;
    _os_log_error_impl(&dword_1B5ED0000, v33, OS_LOG_TYPE_ERROR, "%s: Source extent processor is loaded with incorrect configuration. Spatializer will ignore source size.", v99, 0xCu);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (SHIBYTE(v94.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v94.__r_.__value_.__l.__data_);
    if (v98 < 0)
      operator delete(*(void **)buf);
  }
LABEL_49:
  v34 = (uint64_t (***)(_QWORD, uint64_t, uint64_t, uint64_t, CFTypeRef *, _QWORD, _QWORD, float))*((_QWORD *)this + 75);
  v81 = 0;
  v31 = (**v34)(v34, a4, 512, 512, &v81, 0, 0, a2);
  if (v81)
    CFRelease(v81);
  if (v90)
    CFRelease(v90);
  if (v88)
    CFRelease(v88);
  if (v86)
    CFRelease(v86);
  if (cf.__r_.__value_.__r.__words[0])
    CFRelease(cf.__r_.__value_.__l.__data_);
  if (!v31)
  {
    HOASpatializer::initializeSourceExtentProcessor(this);
    goto LABEL_70;
  }
LABEL_60:
  if (getAUSMV2Log(void)::onceToken != -1)
    dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_5474);
  v35 = getAUSMV2Log(void)::gLog;
  if (os_log_type_enabled((os_log_t)getAUSMV2Log(void)::gLog, OS_LOG_TYPE_ERROR))
  {
    v58 = (std::string *)std::string::basic_string[abi:ne180100]<0>(&v94, "HOASpatializer");
    std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>("::", v58, &__p);
    std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>("initialize", &__p, &cf);
    if ((cf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      p_cf = &cf;
    else
      p_cf = (std::string *)cf.__r_.__value_.__r.__words[0];
    *(_DWORD *)buf = 136315394;
    *(_QWORD *)&buf[4] = p_cf;
    v96 = 1024;
    v97 = v31;
    _os_log_error_impl(&dword_1B5ED0000, v35, OS_LOG_TYPE_ERROR, "%s: error %d while initializing source extent processor", buf, 0x12u);
    if (SHIBYTE(cf.__r_.__value_.__r.__words[2]) < 0)
      operator delete(cf.__r_.__value_.__l.__data_);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (SHIBYTE(v94.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v94.__r_.__value_.__l.__data_);
  }
  *((_DWORD *)this + 5) = 0;
  v36 = *((_QWORD *)this + 72);
  *((_QWORD *)this + 72) = 0;
  if (v36)
    std::default_delete<HOA::RotationMatrix>::operator()[abi:ne180100](v36);
  v37 = *((_QWORD *)this + 73);
  *((_QWORD *)this + 73) = 0;
  if (v37)
    std::default_delete<HOA::RotationMatrix>::operator()[abi:ne180100](v37);
  *((_QWORD *)this + 67) = *((_QWORD *)this + 66);
  *((_QWORD *)this + 70) = *((_QWORD *)this + 69);
  v38 = (_QWORD *)*((_QWORD *)this + 53);
  *((_QWORD *)this + 53) = 0;
  if (v38)
    std::default_delete<IR::FixedIntegerDelay>::operator()[abi:ne180100](v38);
LABEL_70:
  if (!v19)
  {
    v48 = -10868;
LABEL_89:
    if (getAUSMV2Log(void)::onceToken != -1)
      dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_5474);
    v49 = getAUSMV2Log(void)::gLog;
    if (os_log_type_enabled((os_log_t)getAUSMV2Log(void)::gLog, OS_LOG_TYPE_ERROR))
    {
      v60 = (std::string *)std::string::basic_string[abi:ne180100]<0>(&v94, "HOASpatializer");
      std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>("::", v60, &__p);
      std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>("initialize", &__p, &cf);
      if ((cf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v61 = &cf;
      else
        v61 = (std::string *)cf.__r_.__value_.__r.__words[0];
      *(_DWORD *)buf = 136315394;
      *(_QWORD *)&buf[4] = v61;
      v96 = 1024;
      v97 = v48;
      _os_log_error_impl(&dword_1B5ED0000, v49, OS_LOG_TYPE_ERROR, "%s: error %d while initializing NFC processor", buf, 0x12u);
      if (SHIBYTE(cf.__r_.__value_.__r.__words[2]) < 0)
        operator delete(cf.__r_.__value_.__l.__data_);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      if (SHIBYTE(v94.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v94.__r_.__value_.__l.__data_);
    }
    v50 = (_QWORD *)*((_QWORD *)this + 54);
    v51 = (_QWORD *)*((_QWORD *)this + 55);
    while (v51 != v50)
    {
      v53 = (_QWORD *)*--v51;
      v52 = v53;
      *v51 = 0;
      if (v53)
        std::default_delete<IR::FixedIntegerDelay>::operator()[abi:ne180100](v52);
    }
    *((_QWORD *)this + 55) = v50;
    goto LABEL_97;
  }
  IR::getPresetDataAttributes();
  v39 = (const __CFDictionary *)*((_QWORD *)this + 4);
  if (v39 && applesauce::CF::details::has_key<__CFString const*&>(v39, (const void *)kHOANFCIRCustomURLParamName))
  {
    v40 = (CFDictionaryRef *)applesauce::CF::DictionaryRef::operator->((_QWORD *)this + 4);
    applesauce::CF::details::find_at_key_or_optional<applesauce::CF::URLRef,__CFString const*&>(&v94, *v40, (const void *)kHOANFCIRCustomURLParamName);
    v41 = (const void *)v94.__r_.__value_.__r.__words[0];
    v69 = v94.__r_.__value_.__r.__words[0];
    v94.__r_.__value_.__r.__words[0] = 0;
    IR::IRDataAttributes::IRDataAttributes((uint64_t)&__p, v41, 128, 1, 0.0);
    v42 = cf.__r_.__value_.__r.__words[0];
    cf = __p;
    v85 = v73;
    v43 = v74;
    __p.__r_.__value_.__r.__words[0] = v42;
    v74 = v86;
    v44 = v88;
    v86 = v43;
    v88 = v76;
    v45 = v78;
    v76 = v44;
    v78 = v90;
    v92 = v80;
    v83 = v71;
    v84 = v72;
    v87 = v75;
    *(_OWORD *)((char *)v89 + 9) = *(_OWORD *)((char *)v77 + 9);
    v89[0] = v77[0];
    v90 = v45;
    v91 = v79;
    IR::IRDataAttributes::~IRDataAttributes((IR::IRDataAttributes *)&__p);
    applesauce::CF::URLRef::~URLRef((const void **)&v69);
    std::__optional_destruct_base<applesauce::CF::URLRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v94);
  }
  v46 = (BypassableIRProcessor *)operator new();
  BypassableIRProcessor::BypassableIRProcessor(v46, (const IR::IRDataAttributes *)&cf, 1u);
  v47 = *((_QWORD *)this + 76);
  *((_QWORD *)this + 76) = v46;
  if (v47)
  {
    std::default_delete<BypassableIRProcessor>::operator()[abi:ne180100](v47);
    v46 = (BypassableIRProcessor *)*((_QWORD *)this + 76);
  }
  v68 = 0;
  v48 = (**(uint64_t (***)(BypassableIRProcessor *, uint64_t, uint64_t, uint64_t, CFTypeRef *, _QWORD, uint64_t, float))v46)(v46, a4, 128, 512, &v68, 0, 1, a2);
  if (v68)
    CFRelease(v68);
  if (v90)
    CFRelease(v90);
  if (v88)
    CFRelease(v88);
  if (v86)
    CFRelease(v86);
  if (cf.__r_.__value_.__r.__words[0])
    CFRelease(cf.__r_.__value_.__l.__data_);
  if (v48)
    goto LABEL_89;
  HOASpatializer::initializeNFCDelaysAndBuffers(this);
LABEL_97:
  v54 = v93;
  if (v93)
  {
    v55 = (unsigned __int16)applesauce::CF::details::find_at_key_or_optional<BOOL,__CFString const*&>(v93, (const void *)kOptionalFeatureSourceDiffuse);
    if (v55 <= 0x100)
      LOBYTE(v55) = 0;
    if (a3 <= 0x10 && (_BYTE)v55)
    {
      v56 = (IR::IRProcessor *)operator new();
      IR::IRProcessor::IRProcessor(v56, 512, 0.0, a3, 512, 0, 0);
      v57 = *((_QWORD *)this + 92);
      *((_QWORD *)this + 92) = v56;
      if (v57)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v57 + 8))(v57);
        v56 = (IR::IRProcessor *)*((_QWORD *)this + 92);
      }
      (*(void (**)(IR::IRProcessor *, uint64_t, uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, float))(*(_QWORD *)v56 + 16))(v56, a4, 128, 0, 0, 0, 0, a2);
      LODWORD(cf.__r_.__value_.__l.__data_) = 0;
      (*(void (**)(_QWORD, _UNKNOWN **, std::string *, uint64_t, uint64_t))(**((_QWORD **)this + 92) + 208))(*((_QWORD *)this + 92), &AUSM::kDiffuseHOACoeffs, &cf, a3, 512);
    }
  }
  LODWORD(cf.__r_.__value_.__l.__data_) = 0;
  std::vector<float>::resize((uint64_t)this + 136, a3, &cf);
  LODWORD(cf.__r_.__value_.__l.__data_) = 0;
  std::vector<float>::resize((uint64_t)this + 272, a3, &cf);
  *((_WORD *)this + 8) = 257;
  if (v54)
    CFRelease(v54);
  return 0;
}

void sub_1B649A858(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, const void *a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33,int a34,__int16 a35,char a36,char a37)
{
  uint64_t v37;

  applesauce::CF::URLRef::~URLRef(&a10);
  std::__optional_destruct_base<applesauce::CF::URLRef,false>::~__optional_destruct_base[abi:ne180100](v37 - 208);
  IR::IRDataAttributes::~IRDataAttributes((IR::IRDataAttributes *)&a35);
  applesauce::CF::DictionaryRef::~DictionaryRef((const void **)(v37 - 216));
  _Unwind_Resume(a1);
}

void HOASpatializer::reset(HOASpatializer *this)
{
  uint64_t v2;
  IR::FixedIntegerDelay *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unsigned int v8;
  IR::FixedIntegerDelay *v9;

  *((_BYTE *)this + 17) = 1;
  *((_BYTE *)this + 268) = *((_BYTE *)this + 132);
  vDSP_vclr(*((float **)this + 45), 1, (uint64_t)(*((_QWORD *)this + 46) - *((_QWORD *)this + 45)) >> 2);
  vDSP_vclr(*((float **)this + 89), 1, (uint64_t)(*((_QWORD *)this + 90) - *((_QWORD *)this + 89)) >> 2);
  v2 = *((_QWORD *)this + 75);
  if (v2)
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v2 + 32))(v2, 1);
  v3 = (IR::FixedIntegerDelay *)*((_QWORD *)this + 53);
  if (v3)
    IR::FixedIntegerDelay::reset(v3);
  v4 = *((_QWORD *)this + 76);
  if (v4)
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v4 + 32))(v4, 1);
  v6 = *((_QWORD *)this + 54);
  v5 = *((_QWORD *)this + 55);
  if (v5 != v6)
  {
    v7 = 0;
    v8 = 1;
    do
    {
      v9 = *(IR::FixedIntegerDelay **)(v6 + 8 * v7);
      if (v9)
      {
        IR::FixedIntegerDelay::reset(v9);
        v6 = *((_QWORD *)this + 54);
        v5 = *((_QWORD *)this + 55);
      }
      v7 = v8++;
    }
    while (v7 < (v5 - v6) >> 3);
  }
}

uint64_t HOASpatializer::processAccumulating(HOASpatializer *this, float *a2, const float **a3, int a4, float **a5, int a6, vDSP_Length a7, float a8, IR::ComplexDataCircBuffer *a9)
{
  uint64_t v12;
  float *v15;
  unsigned __int8 v16;
  const __CFDictionary *v17;
  CFDictionaryRef *v18;
  uint64_t (***v19)(_QWORD, uint64_t, uint64_t, uint64_t, void **, _QWORD, _QWORD, float);
  float v20;
  uint64_t v21;
  CFDictionaryRef *v22;
  uint64_t (***v23)(_QWORD, uint64_t, uint64_t, uint64_t, void **, _QWORD, uint64_t, float);
  float v24;
  uint64_t v25;
  CFDictionaryRef *v26;
  float v27;
  float v28;
  BypassableIRProcessor *v29;
  NSObject *v31;
  uint64_t result;
  NSObject *v33;
  unsigned __int8 v34;
  _BYTE *v35;
  _BOOL8 v36;
  _BOOL8 v37;
  char v38;
  char v39;
  std::string *v40;
  __int128 v41;
  std::string *v42;
  __int128 v43;
  void **v44;
  float v45;
  float v46;
  uint64_t v47;
  int v48;
  uint64_t v49;
  uint64_t v50;
  int v51;
  float v52;
  float *v53;
  int v54;
  uint64_t v56;
  _BYTE *v57;
  _BOOL8 v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  char *v63;
  _BYTE *v64;
  unint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  void **v69;
  size_t v70;
  void *v71;
  _BYTE *v72;
  size_t v73;
  unint64_t v74;
  char *v75;
  _BYTE *v76;
  char *v77;
  std::string *v78;
  __int128 v79;
  std::string *v80;
  __int128 v81;
  void **v82;
  int v83;
  uint64_t v84;
  uint64_t v85;
  _BOOL4 v86;
  BypassableIRProcessor *v87;
  unsigned int v88;
  unsigned int v89;
  uint64_t v90;
  BOOL v91;
  IR::FixedIntegerDelay *v92;
  const float *v93;
  uint64_t i;
  uint64_t v95;
  unsigned int v96;
  unint64_t v97;
  _BYTE *v98;
  __n128 v99;
  uint64_t v100;
  unint64_t j;
  uint64_t v102;
  IR::FixedIntegerDelay *v103;
  _DWORD *v104;
  uint64_t v105;
  uint64_t v106;
  float *const *v107;
  const float **v108;
  const float **v109;
  unint64_t k;
  uint64_t v111;
  IR::FixedIntegerDelay *v112;
  int v113;
  unint64_t v114;
  uint64_t v115;
  IR::FixedIntegerDelay *v116;
  uint64_t v117;
  unint64_t v118;
  std::runtime_error *exception;
  char *v120;
  char *v121;
  size_t __len;
  unsigned int __lena;
  unsigned int NumOutputChannels;
  void *v126;
  void *v127;
  std::string v128;
  std::string v129;
  void *__p[2];
  int64_t v131;
  uint8_t buf[4];
  void **v133;
  __int16 v134;
  int v135;
  uint64_t v136;

  v136 = *MEMORY[0x1E0C80C00];
  if (a6 == a4)
  {
    if (*((_BYTE *)this + 16) && *((_QWORD *)this + 44))
    {
      LODWORD(v12) = a6;
      v15 = a2;
      v16 = atomic_load((unsigned __int8 *)this + 322);
      if ((v16 & 1) != 0)
      {
        v18 = (CFDictionaryRef *)((char *)this + 32);
        v17 = (const __CFDictionary *)*((_QWORD *)this + 4);
        if (v17)
        {
          if (*((_QWORD *)this + 75)
            && applesauce::CF::details::has_key<__CFString const*&>(v17, (const void *)kHOASourceExtentIRCustomURLParamName))
          {
            v19 = (uint64_t (***)(_QWORD, uint64_t, uint64_t, uint64_t, void **, _QWORD, _QWORD, float))*((_QWORD *)this + 75);
            v20 = *((float *)this + 2);
            v21 = *((unsigned int *)this + 3);
            v22 = (CFDictionaryRef *)applesauce::CF::DictionaryRef::operator->((_QWORD *)this + 4);
            applesauce::CF::details::find_at_key_or_optional<applesauce::CF::URLRef,__CFString const*&>(__p, *v22, (const void *)kHOASourceExtentIRCustomURLParamName);
            v127 = __p[0];
            __p[0] = 0;
            LOWORD(v19) = (**v19)(v19, v21, 512, 512, &v127, 0, 0, v20);
            applesauce::CF::URLRef::~URLRef((const void **)&v127);
            std::__optional_destruct_base<applesauce::CF::URLRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)__p);
            if (!(_WORD)v19)
            {
              HOASpatializer::initializeSourceExtentProcessor(this);
              *((_BYTE *)this + 320) = 1;
            }
            atomic_store(0, (unsigned __int8 *)this + 322);
            v15 = a2;
          }
          if (*((_QWORD *)this + 76))
          {
            if (!*v18)
            {
              exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
              applesauce::CF::construct_error(exception);
            }
            if (applesauce::CF::details::has_key<__CFString const*&>(*v18, (const void *)kHOANFCIRCustomURLParamName))
            {
              v23 = (uint64_t (***)(_QWORD, uint64_t, uint64_t, uint64_t, void **, _QWORD, uint64_t, float))*((_QWORD *)this + 76);
              v24 = *((float *)this + 2);
              v25 = *((unsigned int *)this + 3);
              v26 = (CFDictionaryRef *)applesauce::CF::DictionaryRef::operator->((_QWORD *)this + 4);
              applesauce::CF::details::find_at_key_or_optional<applesauce::CF::URLRef,__CFString const*&>(__p, *v26, (const void *)kHOANFCIRCustomURLParamName);
              v126 = __p[0];
              __p[0] = 0;
              LOWORD(v23) = (**v23)(v23, v25, 128, 512, &v126, 0, 1, v24);
              applesauce::CF::URLRef::~URLRef((const void **)&v126);
              std::__optional_destruct_base<applesauce::CF::URLRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)__p);
              v15 = a2;
              if (!(_WORD)v23)
              {
                HOASpatializer::initializeNFCDelaysAndBuffers(this);
                *((_BYTE *)this + 17) = 1;
                *((_BYTE *)this + 320) = 1;
                atomic_store(0, (unsigned __int8 *)this + 322);
                v15 = a2;
              }
            }
          }
        }
      }
      if (*((_BYTE *)this + 132))
        v27 = a8;
      else
        v27 = 0.0;
      v28 = *((float *)this + 18);
      v29 = (BypassableIRProcessor *)*((_QWORD *)this + 75);
      if (v29)
        NumOutputChannels = BypassableIRProcessor::getNumOutputChannels(v29);
      else
        NumOutputChannels = 0;
      if (!*((_BYTE *)this + 320))
      {
        v34 = atomic_load((unsigned __int8 *)this + 412);
        if ((v34 & 1) == 0 && !*((_BYTE *)this + 17))
        {
LABEL_122:
          v85 = *((_QWORD *)this + 75);
          if (v85 && *(_BYTE *)(v85 + 208))
          {
            if (*(_DWORD *)(v85 + 212))
              v86 = 1;
            else
              v86 = *(unsigned __int8 *)(v85 + 209) != 0;
          }
          else
          {
            v86 = 0;
          }
          v87 = (BypassableIRProcessor *)*((_QWORD *)this + 76);
          if (v87)
          {
            v88 = BypassableIRProcessor::getNumOutputChannels(v87);
            if (v88 >= v12)
              v89 = v12;
            else
              v89 = v88;
            v90 = *((_QWORD *)this + 76);
            __lena = v89;
            if (v90 && *(_BYTE *)(v90 + 208))
            {
              if (*(_DWORD *)(v90 + 212))
                v91 = 1;
              else
                v91 = *(_BYTE *)(v90 + 209) != 0;
              goto LABEL_137;
            }
          }
          else
          {
            __lena = 0;
          }
          v91 = 0;
LABEL_137:
          v92 = (IR::FixedIntegerDelay *)*((_QWORD *)this + 53);
          v93 = v15;
          if (v92)
          {
            IR::FixedIntegerDelay::process(v92, v15, *((float **)this + 77), a7);
            v93 = (const float *)*((_QWORD *)this + 77);
            v15 = a2;
          }
          if (v86)
          {
            (*(void (**)(_QWORD, float *, float **, _QWORD, _QWORD, vDSP_Length, _QWORD, float))(**((_QWORD **)this + 75) + 8))(*((_QWORD *)this + 75), v15, a5, 0, NumOutputChannels, a7, *((unsigned int *)this + 81), v27 * (float)(1.0 - v28));
            HOASpatializer::rotateAccumulating(this, a5, a5, a7);
            if (NumOutputChannels)
            {
              for (i = 0; i != NumOutputChannels; ++i)
              {
                v95 = *((_QWORD *)this + 75);
                if (*(_DWORD *)(v95 + 212) || *(_DWORD *)(v95 + 216))
                {
                  HOASpatializer::gainBasedProcessing(this, v93, *((float **)this + 80), i, a7, v27 * (float)(1.0 - v28));
                  (*(void (**)(_QWORD, _QWORD, float *, _QWORD, uint64_t, vDSP_Length))(**((_QWORD **)this + 75)
                                                                                                + 24))(*((_QWORD *)this + 75), *((_QWORD *)this + 80), a5[i], 0, i, a7);
                }
              }
            }
            (*(void (**)(_QWORD, vDSP_Length))(**((_QWORD **)this + 75) + 48))(*((_QWORD *)this + 75), a7);
            v96 = NumOutputChannels;
          }
          else
          {
            v96 = 0;
          }
          if (v96 < *((_DWORD *)this + 104))
          {
            v97 = v96;
            do
            {
              HOASpatializer::gainBasedProcessing(this, v93, a5[v97], v97, a7, v27 * (float)(1.0 - v28));
              ++v97;
            }
            while (v97 < *((unsigned int *)this + 104));
          }
          v98 = (_BYTE *)*((_QWORD *)this + 76);
          if (v98 && v98[208])
          {
            if (v91)
            {
              (*(void (**)(_BYTE *, float **, _QWORD, _QWORD, _QWORD, _QWORD, vDSP_Length, _QWORD, float))(*(_QWORD *)v98 + 16))(v98, a5, *((_QWORD *)this + 86), 0, __lena, __lena, a7, *((unsigned int *)this + 81), 1.0);
              if (__lena)
              {
                v100 = 0;
                for (j = 0; j != __lena; ++j)
                {
                  v102 = *((_QWORD *)this + 54);
                  if (j < (*((_QWORD *)this + 55) - v102) >> 3)
                  {
                    v103 = *(IR::FixedIntegerDelay **)(v102 + 8 * j);
                    if (v103)
                      v99 = IR::FixedIntegerDelay::process(v103, a5[j], (float *)*((_QWORD *)this + 77), a7);
                  }
                  v104 = (_DWORD *)*((_QWORD *)this + 76);
                  if (v104[53] || v104[54])
                  {
                    v105 = *((_QWORD *)this + 54);
                    if (j >= (*((_QWORD *)this + 55) - v105) >> 3
                      || (v106 = *(_QWORD *)(v105 + 8 * j), v107 = (float *const *)((char *)this + 616), !v106))
                    {
                      v107 = &a5[v100];
                    }
                    (*(void (**)(_DWORD *, float *const, _QWORD, _QWORD, unint64_t, vDSP_Length, __n128))(*(_QWORD *)v104 + 24))(v104, *v107, *(_QWORD *)(*((_QWORD *)this + 86) + 8 * j), 0, j, a7, v99);
                  }
                  vDSP_vadd(*(const float **)(*((_QWORD *)this + 86) + 8 * j), 1, a3[j], 1, (float *)a3[j], 1, a7);
                  ++v100;
                }
              }
            }
            else if (__lena)
            {
              for (k = 0; k != __lena; ++k)
              {
                v111 = *((_QWORD *)this + 54);
                if (k < (*((_QWORD *)this + 55) - v111) >> 3
                  && (v112 = *(IR::FixedIntegerDelay **)(v111 + 8 * k)) != 0)
                {
                  IR::FixedIntegerDelay::process(v112, a5[k], *((float **)this + 77), a7);
                  vDSP_vadd(*((const float **)this + 77), 1, a3[k], 1, (float *)a3[k], 1, a7);
                }
                else
                {
                  vDSP_vadd(a5[k], 1, a3[k], 1, (float *)a3[k], 1, a7);
                }
              }
            }
            (*(void (**)(_QWORD, vDSP_Length))(**((_QWORD **)this + 76) + 48))(*((_QWORD *)this + 76), a7);
            v113 = v12 - __lena;
            if (v12 > __lena)
            {
              v114 = __lena;
              do
              {
                v115 = *((_QWORD *)this + 54);
                if (v114 < (*((_QWORD *)this + 55) - v115) >> 3
                  && (v116 = *(IR::FixedIntegerDelay **)(v115 + 8 * v114)) != 0)
                {
                  IR::FixedIntegerDelay::process(v116, a5[v114], *((float **)this + 77), a7);
                  vDSP_vadd(*((const float **)this + 77), 1, a3[v114], 1, (float *)a3[v114], 1, a7);
                }
                else
                {
                  vDSP_vadd(a5[v114], 1, a3[v114], 1, (float *)a3[v114], 1, a7);
                }
                ++v114;
                --v113;
              }
              while (v113);
            }
          }
          else if ((_DWORD)v12)
          {
            v108 = (const float **)a5;
            v109 = a3;
            v12 = v12;
            do
            {
              vDSP_vadd(*v108, 1, *v109, 1, (float *)*v109, 1, a7);
              ++v109;
              ++v108;
              --v12;
            }
            while (v12);
          }
          v117 = *((_QWORD *)this + 92);
          if (v117)
          {
            if (*((float *)this + 18) > 0.0)
            {
              (*(void (**)(uint64_t, float *, float **, _QWORD, vDSP_Length, _QWORD, float))(*(_QWORD *)v117 + 40))(v117, a2, a5, *((unsigned int *)this + 104), a7, 0, v28 * v27);
              if (*((_DWORD *)this + 104))
              {
                v118 = 0;
                do
                {
                  vDSP_vadd(a5[v118], 1, a3[v118], 1, (float *)a3[v118], 1, a7);
                  ++v118;
                }
                while (v118 < *((unsigned int *)this + 104));
              }
            }
          }
          result = 0;
          *((_BYTE *)this + 268) = *((_BYTE *)this + 132);
          return result;
        }
      }
      v35 = (_BYTE *)*((_QWORD *)this + 75);
      if (v35)
      {
        if (v35[208])
        {
          v36 = fabsf(*((float *)this + 15)) >= 0.00000011921
             || (unint64_t)(fabsf(*((float *)this + 16)) >= 0.00000011921);
          (*(void (**)(_BYTE *, _BOOL8))(*(_QWORD *)v35 + 56))(v35, v36);
          v37 = fabsf(*((float *)this + 49)) >= 0.00000011921
             || (unint64_t)(fabsf(*((float *)this + 50)) >= 0.00000011921);
          SourceExtentProcessor::updateExtentParameters(*((SourceExtentProcessor **)this + 75), *((float *)this + 15), *((float *)this + 16));
          (*(void (**)(_QWORD, _QWORD, _BOOL8))(**((_QWORD **)this + 75) + 40))(*((_QWORD *)this + 75), *((unsigned __int8 *)this + 17), v37);
        }
        else
        {
          (*(void (**)(_BYTE *, _QWORD))(*(_QWORD *)v35 + 56))(v35, 0);
          LOBYTE(v37) = 0;
        }
        if (!*((_BYTE *)this + 17))
        {
          if (*(_BYTE *)(*((_QWORD *)this + 75) + 209))
            v38 = v37;
          else
            v38 = 1;
          if ((v38 & 1) != 0)
          {
            v39 = !v37;
            if (*(_BYTE *)(*((_QWORD *)this + 75) + 209))
              v39 = 1;
            if ((v39 & 1) == 0)
            {
              HOASpatializer::calculateEncoderGains(this, *((float *)this + 12), *((float *)this + 13));
              std::vector<float>::__assign_with_size[abi:ne180100]<float const*,float const*>((char *)this + 360, *((char **)this + 48), *((_QWORD *)this + 49), (uint64_t)(*((_QWORD *)this + 49) - *((_QWORD *)this + 48)) >> 2);
            }
          }
          else
          {
            HOA::RotationMatrix::setRotationMatrixYPR(*((float ***)this + 72), *((float *)this + 12), *((float *)this + 13), 0.0);
            *((_BYTE *)this + 592) = 0;
          }
        }
      }
      *(_QWORD *)((char *)this + 196) = *(_QWORD *)((char *)this + 60);
      if (!*((_BYTE *)this + 17)
        && *((float *)this + 46) == *((float *)this + 12)
        && *((float *)this + 47) == *((float *)this + 13)
        && *((float *)this + 48) == *((float *)this + 14))
      {
LABEL_121:
        *((_BYTE *)this + 320) = 0;
        *((_BYTE *)this + 17) = 0;
        atomic_store(0, (unsigned __int8 *)this + 412);
        v15 = a2;
        goto LABEL_122;
      }
      v45 = fabsf(*((float *)this + 14)) / 0.05;
      if (v45 <= 1.0)
        v46 = v45;
      else
        v46 = 1.0;
      memcpy(*((void **)this + 60), *((const void **)this + 57), *((_QWORD *)this + 58) - *((_QWORD *)this + 57));
      v47 = 0;
      v48 = *(_DWORD *)(*((_QWORD *)this + 44) + 4);
      v49 = *((_QWORD *)this + 57);
      if ((v48 + 1) > 1)
        v50 = (v48 + 1);
      else
        v50 = 1;
      v51 = -1;
      do
      {
        v52 = powf(v46, (float)v47);
        v53 = (float *)(v49 + 4 * (v47 * v47));
        v54 = v51;
        do
          *v53++ = v52;
        while (!__CFADD__(v54++, 1));
        ++v47;
        v51 -= 2;
      }
      while (v47 != v50);
      v56 = *((_QWORD *)this + 76);
      if (v56)
      {
        (*(void (**)(uint64_t, uint64_t, _QWORD, float))(*(_QWORD *)v56 + 72))(v56, 2, 0, *((float *)this + 14));
        v57 = (_BYTE *)*((_QWORD *)this + 76);
        if (v57[208])
        {
          if (*((_BYTE *)this + 17))
            v58 = 0;
          else
            v58 = v57[209] != 0;
          (*(void (**)(_BYTE *, BOOL))(*(_QWORD *)v57 + 56))(v57, *((float *)this + 14) < 1.0);
          (*(void (**)(_QWORD, _QWORD, _BOOL8))(**((_QWORD **)this + 76) + 40))(*((_QWORD *)this + 76), *((unsigned __int8 *)this + 17), v58);
        }
        else
        {
          (*(void (**)(_BYTE *, _QWORD))(*(_QWORD *)v57 + 56))(v57, 0);
        }
      }
      v59 = *((_QWORD *)this + 75);
      if (!v59 || !*(_BYTE *)(v59 + 209))
        goto LABEL_117;
      v60 = *((_QWORD *)this + 72);
      v61 = *((_QWORD *)this + 73);
      if (v61 == v60)
      {
LABEL_114:
        v83 = *(_DWORD *)(v60 + 48);
        *(_BYTE *)(v61 + 52) = *(_BYTE *)(v60 + 52);
        *(_DWORD *)(v61 + 48) = v83;
        HOA::RotationMatrix::setRotationMatrixYPR(*((float ***)this + 72), *((float *)this + 12), *((float *)this + 13), 0.0);
        *((_BYTE *)this + 592) = *((_BYTE *)this + 17) ^ 1;
        v84 = *((_QWORD *)this + 75);
        if (v84 && *(_BYTE *)(v84 + 209) && *((_DWORD *)this + 104) <= NumOutputChannels)
        {
LABEL_120:
          *((_QWORD *)this + 23) = *((_QWORD *)this + 6);
          *((_DWORD *)this + 48) = *((_DWORD *)this + 14);
          goto LABEL_121;
        }
LABEL_117:
        result = HOASpatializer::calculateEncoderGains(this, *((float *)this + 12), *((float *)this + 13));
        if ((_DWORD)result)
          return result;
        if (*((_BYTE *)this + 17))
          std::vector<float>::__assign_with_size[abi:ne180100]<float const*,float const*>((char *)this + 360, *((char **)this + 48), *((_QWORD *)this + 49), (uint64_t)(*((_QWORD *)this + 49) - *((_QWORD *)this + 48)) >> 2);
        goto LABEL_120;
      }
      std::vector<float>::__assign_with_size[abi:ne180100]<float const*,float const*>(*((char **)this + 73), *(char **)v60, *(_QWORD *)(v60 + 8), (uint64_t)(*(_QWORD *)(v60 + 8) - *(_QWORD *)v60) >> 2);
      v62 = *(char **)(v61 + 24);
      v63 = *(char **)(v60 + 24);
      v64 = *(_BYTE **)(v60 + 32);
      __len = v64 - v63;
      v65 = (v64 - v63) >> 4;
      v66 = *(_QWORD *)(v61 + 40);
      if (v65 <= (v66 - (uint64_t)v62) >> 4)
      {
        v69 = (void **)(v61 + 32);
        v72 = *(_BYTE **)(v61 + 32);
        v73 = v72 - v62;
        v74 = (v72 - v62) >> 4;
        if (v74 >= v65)
        {
          if (v64 == v63)
          {
            v70 = v64 - v63;
            goto LABEL_113;
          }
          v71 = *(void **)(v61 + 24);
          v70 = v64 - v63;
        }
        else
        {
          v75 = &v63[16 * v74];
          if (v72 != v62)
          {
            v76 = *(_BYTE **)(v60 + 32);
            v77 = v75;
            memmove(*(void **)(v61 + 24), v63, v73);
            v75 = v77;
            v64 = v76;
            v62 = (char *)*v69;
          }
          v70 = v64 - v75;
          if (v64 == v75)
            goto LABEL_113;
          v71 = v62;
          v63 = v75;
        }
      }
      else
      {
        v120 = *(char **)(v60 + 32);
        v121 = *(char **)(v60 + 24);
        if (v62)
        {
          *(_QWORD *)(v61 + 32) = v62;
          operator delete(v62);
          v66 = 0;
          *(_QWORD *)(v61 + 24) = 0;
          *(_QWORD *)(v61 + 32) = 0;
          *(_QWORD *)(v61 + 40) = 0;
        }
        if ((__len & 0x8000000000000000) != 0)
          std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
        v67 = v66 >> 3;
        if (v66 >> 3 <= v65)
          v67 = v65;
        if ((unint64_t)v66 >= 0x7FFFFFFFFFFFFFF0)
          v68 = 0xFFFFFFFFFFFFFFFLL;
        else
          v68 = v67;
        std::vector<DSPSplitComplex>::__vallocate[abi:ne180100]((_QWORD *)(v61 + 24), v68);
        v69 = (void **)(v61 + 32);
        v62 = *(char **)(v61 + 32);
        v63 = v121;
        v70 = __len;
        if (v120 == v121)
          goto LABEL_113;
        v71 = *(void **)(v61 + 32);
      }
      memmove(v71, v63, v70);
LABEL_113:
      *v69 = &v62[v70];
      goto LABEL_114;
    }
    if (getAUSMV2Log(void)::onceToken != -1)
      dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_5474);
    v33 = getAUSMV2Log(void)::gLog;
    if (os_log_type_enabled((os_log_t)getAUSMV2Log(void)::gLog, OS_LOG_TYPE_DEBUG))
    {
      std::string::basic_string[abi:ne180100]<0>(&v128, "HOASpatializer");
      v78 = std::string::append(&v128, "::", 2uLL);
      v79 = *(_OWORD *)&v78->__r_.__value_.__l.__data_;
      v129.__r_.__value_.__r.__words[2] = v78->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v129.__r_.__value_.__l.__data_ = v79;
      v78->__r_.__value_.__l.__size_ = 0;
      v78->__r_.__value_.__r.__words[2] = 0;
      v78->__r_.__value_.__r.__words[0] = 0;
      v80 = std::string::append(&v129, "processAccumulating", 0x13uLL);
      v81 = *(_OWORD *)&v80->__r_.__value_.__l.__data_;
      v131 = v80->__r_.__value_.__r.__words[2];
      *(_OWORD *)__p = v81;
      v80->__r_.__value_.__l.__size_ = 0;
      v80->__r_.__value_.__r.__words[2] = 0;
      v80->__r_.__value_.__r.__words[0] = 0;
      v82 = __p;
      if (v131 < 0)
        v82 = (void **)__p[0];
      *(_DWORD *)buf = 136315138;
      v133 = v82;
      _os_log_debug_impl(&dword_1B5ED0000, v33, OS_LOG_TYPE_DEBUG, "%s: ERROR: not initialized", buf, 0xCu);
      if (SHIBYTE(v131) < 0)
        operator delete(__p[0]);
      if (SHIBYTE(v129.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v129.__r_.__value_.__l.__data_);
      if (SHIBYTE(v128.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v128.__r_.__value_.__l.__data_);
    }
    return 4294956429;
  }
  else
  {
    if (getAUSMV2Log(void)::onceToken != -1)
      dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_5474);
    v31 = getAUSMV2Log(void)::gLog;
    if (os_log_type_enabled((os_log_t)getAUSMV2Log(void)::gLog, OS_LOG_TYPE_DEBUG))
    {
      std::string::basic_string[abi:ne180100]<0>(&v128, "HOASpatializer");
      v40 = std::string::append(&v128, "::", 2uLL);
      v41 = *(_OWORD *)&v40->__r_.__value_.__l.__data_;
      v129.__r_.__value_.__r.__words[2] = v40->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v129.__r_.__value_.__l.__data_ = v41;
      v40->__r_.__value_.__l.__size_ = 0;
      v40->__r_.__value_.__r.__words[2] = 0;
      v40->__r_.__value_.__r.__words[0] = 0;
      v42 = std::string::append(&v129, "processAccumulating", 0x13uLL);
      v43 = *(_OWORD *)&v42->__r_.__value_.__l.__data_;
      v131 = v42->__r_.__value_.__r.__words[2];
      *(_OWORD *)__p = v43;
      v42->__r_.__value_.__l.__size_ = 0;
      v42->__r_.__value_.__r.__words[2] = 0;
      v42->__r_.__value_.__r.__words[0] = 0;
      v44 = __p;
      if (v131 < 0)
        v44 = (void **)__p[0];
      *(_DWORD *)buf = 136315394;
      v133 = v44;
      v134 = 1024;
      v135 = a4;
      _os_log_debug_impl(&dword_1B5ED0000, v31, OS_LOG_TYPE_DEBUG, "%s: ERROR: cannot process with %d output channels", buf, 0x12u);
      if (SHIBYTE(v131) < 0)
        operator delete(__p[0]);
      if (SHIBYTE(v129.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v129.__r_.__value_.__l.__data_);
      if (SHIBYTE(v128.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v128.__r_.__value_.__l.__data_);
    }
    return 4294956445;
  }
}

void sub_1B649B904(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, const void *a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,char a31)
{
  applesauce::CF::URLRef::~URLRef(&a14);
  std::__optional_destruct_base<applesauce::CF::URLRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&a31);
  _Unwind_Resume(a1);
}

uint64_t HOASpatializer::getLatencyFrames(HOASpatializer *this)
{
  unsigned int *v1;

  v1 = (unsigned int *)*((_QWORD *)this + 53);
  if (v1)
    return *v1;
  else
    return 0;
}

_QWORD *HOASpatializer::initializeSourceExtentProcessor(HOASpatializer *this)
{
  BypassableIRProcessor *v2;
  int NumOutputChannels;
  uint64_t v4;
  unint64_t v5;
  unsigned int v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  BypassableIRProcessor *v14;
  int v15;
  unint64_t v16;
  NSObject *v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  float *v23;
  float v24;
  int v25;
  unsigned int v27;
  IR::FixedIntegerDelay *v28;
  _QWORD *result;
  std::string *v30;
  __int128 v31;
  std::string *v32;
  __int128 v33;
  void **v34;
  std::string v35;
  std::string v36;
  void *__p[2];
  int64_t v38;
  uint8_t buf[4];
  void **v40;
  uint64_t v41;

  v41 = *MEMORY[0x1E0C80C00];
  v2 = (BypassableIRProcessor *)*((_QWORD *)this + 75);
  if (v2)
  {
    NumOutputChannels = BypassableIRProcessor::getNumOutputChannels(v2);
    v4 = *((_QWORD *)this + 75);
    LODWORD(v5) = *(_DWORD *)(v4 + 228);
    v6 = vcvtad_u64_f64(sqrt((double)v5)) - 1;
    v7 = *(_DWORD *)(v4 + 232);
    v8 = operator new();
    HOA::RotationMatrix::RotationMatrix(v8, v6, v7, 1);
    v9 = *((_QWORD *)this + 72);
    *((_QWORD *)this + 72) = v8;
    if (v9)
      std::default_delete<HOA::RotationMatrix>::operator()[abi:ne180100](v9);
    v10 = operator new();
    HOA::RotationMatrix::RotationMatrix(v10, v6, v7, 1);
    v11 = *((_QWORD *)this + 73);
    *((_QWORD *)this + 73) = v10;
    if (v11)
      std::default_delete<HOA::RotationMatrix>::operator()[abi:ne180100](v11);
    v12 = (*((_DWORD *)this + 3) * NumOutputChannels);
    LODWORD(__p[0]) = 0;
    std::vector<float>::assign((char **)this + 66, v12, __p);
    v13 = (*((_DWORD *)this + 3) * NumOutputChannels);
    LODWORD(__p[0]) = 0;
    std::vector<float>::assign((char **)this + 69, v13, __p);
    v14 = (BypassableIRProcessor *)*((_QWORD *)this + 75);
    v15 = *((_DWORD *)v14 + 58);
    if (v15 == *((_DWORD *)this + 149))
    {
      v16 = *((unsigned int *)this + 104);
      LODWORD(__p[0]) = 1065353216;
      std::vector<float>::assign((char **)this + 63, v16, __p);
      v14 = (BypassableIRProcessor *)*((_QWORD *)this + 75);
    }
    else
    {
      v18 = 0;
      v19 = *(_DWORD *)(*((_QWORD *)this + 44) + 4);
      v20 = *((_QWORD *)this + 63);
      if ((v19 + 1) > 1)
        v21 = (v19 + 1);
      else
        v21 = 1;
      v22 = -1;
      do
      {
        v23 = (float *)(v20 + 4 * (v18 * v18));
        v24 = sqrtf((float)((float)v18 * 2.0) + 1.0);
        if (v15 != 1)
          v24 = 1.0 / v24;
        v25 = v22;
        do
          *v23++ = v24;
        while (!__CFADD__(v25++, 1));
        ++v18;
        v22 -= 2;
      }
      while (v18 != v21);
    }
    *((_DWORD *)this + 5) = BypassableIRProcessor::getTailLength(v14);
    v27 = *(_DWORD *)(*((_QWORD *)this + 75) + 240);
    if (v27)
    {
      v28 = (IR::FixedIntegerDelay *)operator new();
      IR::FixedIntegerDelay::FixedIntegerDelay(v28, v27, 0);
      result = (_QWORD *)*((_QWORD *)this + 53);
      *((_QWORD *)this + 53) = v28;
      if (!result)
        return result;
LABEL_26:
      std::default_delete<IR::FixedIntegerDelay>::operator()[abi:ne180100](result);
    }
  }
  else
  {
    if (getAUSMV2Log(void)::onceToken != -1)
      dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_5474);
    v17 = getAUSMV2Log(void)::gLog;
    if (os_log_type_enabled((os_log_t)getAUSMV2Log(void)::gLog, OS_LOG_TYPE_DEBUG))
    {
      std::string::basic_string[abi:ne180100]<0>(&v35, "HOASpatializer");
      v30 = std::string::append(&v35, "::", 2uLL);
      v31 = *(_OWORD *)&v30->__r_.__value_.__l.__data_;
      v36.__r_.__value_.__r.__words[2] = v30->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v36.__r_.__value_.__l.__data_ = v31;
      v30->__r_.__value_.__l.__size_ = 0;
      v30->__r_.__value_.__r.__words[2] = 0;
      v30->__r_.__value_.__r.__words[0] = 0;
      v32 = std::string::append(&v36, "initializeSourceExtentProcessor", 0x1FuLL);
      v33 = *(_OWORD *)&v32->__r_.__value_.__l.__data_;
      v38 = v32->__r_.__value_.__r.__words[2];
      *(_OWORD *)__p = v33;
      v32->__r_.__value_.__l.__size_ = 0;
      v32->__r_.__value_.__r.__words[2] = 0;
      v32->__r_.__value_.__r.__words[0] = 0;
      v34 = __p;
      if (v38 < 0)
        v34 = (void **)__p[0];
      *(_DWORD *)buf = 136315138;
      v40 = v34;
      _os_log_debug_impl(&dword_1B5ED0000, v17, OS_LOG_TYPE_DEBUG, "%s: SourceExtentProcessor is not available, HOASpatializer will ignore source extent", buf, 0xCu);
      if (SHIBYTE(v38) < 0)
        operator delete(__p[0]);
      if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v36.__r_.__value_.__l.__data_);
      if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v35.__r_.__value_.__l.__data_);
    }
    *((_DWORD *)this + 5) = 0;
  }
  result = (_QWORD *)*((_QWORD *)this + 53);
  *((_QWORD *)this + 53) = 0;
  if (result)
    goto LABEL_26;
  return result;
}

void sub_1B649BCF4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(exception_object);
}

uint64_t HOASpatializer::initializeNFCDelaysAndBuffers(HOASpatializer *this)
{
  uint64_t v2;
  uint64_t v3;
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  unsigned int NumOutputChannels;
  int v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t result;
  _QWORD *v18;
  unint64_t v19;
  IR::FixedIntegerDelay *v20;
  _QWORD *v21;

  v2 = *((_QWORD *)this + 76);
  if (*(_BYTE *)(v2 + 208)
    && (v3 = **(_QWORD **)(v2 + 160)) != 0
    && (v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 136))(v3)) != 0)
  {
    v5 = *((_QWORD *)this + 76);
    if (*(_BYTE *)(v5 + 208) && (v6 = **(_QWORD **)(v5 + 160)) != 0)
    {
      v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 56))(v6);
      v5 = *((_QWORD *)this + 76);
      v8 = v7 + 128;
    }
    else
    {
      v8 = 128;
    }
    if (v8 > *(_DWORD *)(v5 + 220))
      *(_DWORD *)(v5 + 220) = v8;
    v18 = (_QWORD *)((char *)this + 432);
    std::vector<std::unique_ptr<IR::FixedIntegerDelay>>::resize((uint64_t)this + 432, *((unsigned int *)this + 104));
    if (*((_DWORD *)this + 104))
    {
      v19 = 0;
      do
      {
        v20 = (IR::FixedIntegerDelay *)operator new();
        IR::FixedIntegerDelay::FixedIntegerDelay(v20, v4, 0);
        v21 = *(_QWORD **)(*v18 + 8 * v19);
        *(_QWORD *)(*v18 + 8 * v19) = v20;
        if (v21)
          std::default_delete<IR::FixedIntegerDelay>::operator()[abi:ne180100](v21);
        ++v19;
      }
      while (v19 < *((unsigned int *)this + 104));
    }
  }
  else
  {
    v9 = (_QWORD *)*((_QWORD *)this + 54);
    v10 = (_QWORD *)*((_QWORD *)this + 55);
    while (v10 != v9)
    {
      v12 = (_QWORD *)*--v10;
      v11 = v12;
      *v10 = 0;
      if (v12)
        std::default_delete<IR::FixedIntegerDelay>::operator()[abi:ne180100](v11);
    }
    *((_QWORD *)this + 55) = v9;
  }
  NumOutputChannels = BypassableIRProcessor::getNumOutputChannels(*((BypassableIRProcessor **)this + 76));
  std::vector<void const*>::resize((uint64_t)this + 688, NumOutputChannels);
  v14 = BypassableIRProcessor::getNumOutputChannels(*((BypassableIRProcessor **)this + 76));
  std::vector<float>::resize((uint64_t)this + 712, (*((_DWORD *)this + 3) * v14));
  vDSP_vclr(*((float **)this + 89), 1, (uint64_t)(*((_QWORD *)this + 90) - *((_QWORD *)this + 89)) >> 2);
  v15 = 0;
  v16 = *((_QWORD *)this + 89);
  while (1)
  {
    result = BypassableIRProcessor::getNumOutputChannels(*((BypassableIRProcessor **)this + 76));
    if (v15 >= result)
      break;
    *(_QWORD *)(*((_QWORD *)this + 86) + 8 * v15) = v16;
    v16 += 4 * *((unsigned int *)this + 3);
    ++v15;
  }
  return result;
}

void sub_1B649BF20(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1BCC95CEC](v1, 0x1080C40C92309C1);
  _Unwind_Resume(a1);
}

uint64_t BypassableIRProcessor::getNumOutputChannels(BypassableIRProcessor *this)
{
  uint64_t result;

  if (!*((_BYTE *)this + 208))
    return 0;
  result = **((_QWORD **)this + 20);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 72))(result);
  return result;
}

uint64_t HOASpatializer::calculateEncoderGains(HOASpatializer *this, float a2, float a3)
{
  HOA *v4;
  uint64_t result;
  float v6;
  float v7;

  v6 = a3;
  v7 = a2;
  v4 = (HOA *)*((_QWORD *)this + 44);
  if (!v4)
    return 0xFFFFFFFFLL;
  result = HOA::createEncoder(v4, &v7, &v6, 1uLL, *((float **)this + 48), *((unsigned int *)this + 104));
  if (!(_DWORD)result)
  {
    vDSP_vmul(*((const float **)this + 48), 1, *((const float **)this + 57), 1, *((float **)this + 48), 1, *((unsigned int *)this + 104));
    return 0;
  }
  return result;
}

void HOASpatializer::rotateAccumulating(HOASpatializer *this, float *const *a2, float *const *a3, vDSP_Length a4)
{
  int NumOutputChannels;
  uint64_t v9;
  unint64_t v10;
  _BYTE *v11;
  size_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  _QWORD *v16;
  unsigned int v17;
  uint64_t v18;
  float v19;
  float v20;
  float **v21;
  uint64_t v22;
  unint64_t v23;
  _BYTE *v24;
  size_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  _QWORD *v30;
  uint64_t v31;
  unint64_t v32;
  _BYTE *v33;
  size_t v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  _QWORD *v38;
  unsigned int v39;
  uint64_t v40;
  float v41;
  float v42;
  float **v43;
  NSObject *v44;
  std::string *v45;
  std::string *v46;
  __int128 v47;
  std::string *v48;
  __int128 v49;
  __int128 *p_B;
  _BYTE v51[4];
  float v52;
  void *__Step[2];
  char v54;
  std::string __Start;
  __int128 __B;
  int64_t v57;
  uint8_t buf[4];
  __int128 *v59;
  uint64_t v60;

  v60 = *MEMORY[0x1E0C80C00];
  if (*((_BYTE *)this + 16))
  {
    NumOutputChannels = BypassableIRProcessor::getNumOutputChannels(*((BypassableIRProcessor **)this + 75));
    if (fabsf(*((float *)this + 12)) >= 0.00000011921 || fabsf(*((float *)this + 13)) >= 0.00000011921)
    {
      bzero(*((void **)this + 66), *((_QWORD *)this + 67) - *((_QWORD *)this + 66));
      MEMORY[0x1E0C80A78](v22);
      v24 = &v51[-((v23 + 15) & 0xFFFFFFFF0)];
      if (v23 >= 0x200)
        v25 = 512;
      else
        v25 = v23;
      bzero(&v51[-((v23 + 15) & 0xFFFFFFFF0)], v25);
      v26 = *((unsigned int *)this + 104);
      v27 = 4 * a4;
      if ((_DWORD)v26)
      {
        v28 = *((_QWORD *)this + 66);
        v29 = *((_DWORD *)this + 104);
        v30 = v24;
        do
        {
          *v30++ = v28;
          v28 += v27;
          --v29;
        }
        while (v29);
      }
      HOA::RotationMatrix::applyLeftAccumulating(*((_QWORD *)this + 72), (uint64_t)a2, v26, (uint64_t)v24, v26, a4);
      if (*((_BYTE *)this + 592))
      {
        bzero(*((void **)this + 69), *((_QWORD *)this + 70) - *((_QWORD *)this + 69));
        MEMORY[0x1E0C80A78](v31);
        v33 = &v51[-((v32 + 15) & 0xFFFFFFFF0)];
        if (v32 >= 0x200)
          v34 = 512;
        else
          v34 = v32;
        bzero(&v51[-((v32 + 15) & 0xFFFFFFFF0)], v34);
        v35 = *((unsigned int *)this + 104);
        if ((_DWORD)v35)
        {
          v36 = *((_QWORD *)this + 69);
          v37 = *((_DWORD *)this + 104);
          v38 = v33;
          do
          {
            *v38++ = v36;
            v36 += v27;
            --v37;
          }
          while (v37);
        }
        HOA::RotationMatrix::applyLeftAccumulating(*((_QWORD *)this + 73), (uint64_t)a2, v35, (uint64_t)v33, v35, a4);
      }
      if (NumOutputChannels)
      {
        v39 = 0;
        v40 = 0;
        v41 = (float)a4;
        do
        {
          LODWORD(__B) = 0;
          v42 = *(float *)(*((_QWORD *)this + 57) + 4 * v40) * *(float *)(*((_QWORD *)this + 63) + 4 * v40);
          *(float *)&__B = v42;
          if (*((_BYTE *)this + 592))
          {
            LODWORD(__Start.__r_.__value_.__l.__data_) = 0;
            *(float *)__Step = v42 / v41;
            v43 = (float **)&a3[v40];
            vDSP_vrampmul((const float *)(*((_QWORD *)this + 66) + 4 * v39), 1, (float *)&__Start, (const float *)__Step, *v43, 1, a4);
            *(float *)buf = 0.0;
            *(float *)buf = *(float *)(*((_QWORD *)this + 60) + 4 * v40) * *(float *)(*((_QWORD *)this + 63) + 4 * v40);
            v52 = (float)-*(float *)buf / v41;
            vDSP_vrampmuladd((const float *)(*((_QWORD *)this + 69) + 4 * v39), 1, (float *)buf, &v52, *v43, 1, a4);
          }
          else
          {
            vDSP_vsmul((const float *)(*((_QWORD *)this + 66) + 4 * v39), 1, (const float *)&__B, a3[v40], 1, a4);
          }
          ++v40;
          v39 += a4;
        }
        while (NumOutputChannels != v40);
      }
    }
    else
    {
      if (*((_BYTE *)this + 592))
      {
        bzero(*((void **)this + 69), *((_QWORD *)this + 70) - *((_QWORD *)this + 69));
        MEMORY[0x1E0C80A78](v9);
        v11 = &v51[-((v10 + 15) & 0xFFFFFFFF0)];
        if (v10 >= 0x200)
          v12 = 512;
        else
          v12 = v10;
        bzero(&v51[-((v10 + 15) & 0xFFFFFFFF0)], v12);
        v13 = *((unsigned int *)this + 104);
        if ((_DWORD)v13)
        {
          v14 = *((_QWORD *)this + 69);
          v15 = *((_DWORD *)this + 104);
          v16 = v11;
          do
          {
            *v16++ = v14;
            v14 += 4 * a4;
            --v15;
          }
          while (v15);
        }
        HOA::RotationMatrix::applyLeftAccumulating(*((_QWORD *)this + 73), (uint64_t)a2, v13, (uint64_t)v11, v13, a4);
      }
      if (NumOutputChannels)
      {
        v17 = 0;
        v18 = 0;
        v19 = (float)a4;
        do
        {
          LODWORD(__B) = 0;
          v20 = *(float *)(*((_QWORD *)this + 57) + 4 * v18) * *(float *)(*((_QWORD *)this + 63) + 4 * v18);
          *(float *)&__B = v20;
          if (*((_BYTE *)this + 592))
          {
            LODWORD(__Start.__r_.__value_.__l.__data_) = 0;
            *(float *)__Step = v20 / v19;
            v21 = (float **)&a3[v18];
            vDSP_vrampmul(a2[v18], 1, (float *)&__Start, (const float *)__Step, *v21, 1, a4);
            *(float *)buf = 0.0;
            *(float *)buf = *(float *)(*((_QWORD *)this + 60) + 4 * v18) * *(float *)(*((_QWORD *)this + 63) + 4 * v18);
            v52 = (float)-*(float *)buf / v19;
            vDSP_vrampmuladd((const float *)(*((_QWORD *)this + 69) + 4 * v17), 1, (float *)buf, &v52, *v21, 1, a4);
          }
          else
          {
            vDSP_vsmul(a2[v18], 1, (const float *)&__B, a3[v18], 1, a4);
          }
          ++v18;
          v17 += a4;
        }
        while (NumOutputChannels != v18);
      }
    }
    *((_BYTE *)this + 592) = 0;
  }
  else
  {
    if (getAUSMV2Log(void)::onceToken != -1)
      dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_5474);
    v44 = getAUSMV2Log(void)::gLog;
    if (os_log_type_enabled((os_log_t)getAUSMV2Log(void)::gLog, OS_LOG_TYPE_DEBUG))
    {
      v45 = (std::string *)std::string::basic_string[abi:ne180100]<0>(__Step, "HOASpatializer");
      v46 = std::string::append(v45, "::", 2uLL);
      v47 = *(_OWORD *)&v46->__r_.__value_.__l.__data_;
      __Start.__r_.__value_.__r.__words[2] = v46->__r_.__value_.__r.__words[2];
      *(_OWORD *)&__Start.__r_.__value_.__l.__data_ = v47;
      v46->__r_.__value_.__l.__size_ = 0;
      v46->__r_.__value_.__r.__words[2] = 0;
      v46->__r_.__value_.__r.__words[0] = 0;
      v48 = std::string::append(&__Start, "rotateAccumulating", 0x12uLL);
      v49 = *(_OWORD *)&v48->__r_.__value_.__l.__data_;
      v57 = v48->__r_.__value_.__r.__words[2];
      __B = v49;
      v48->__r_.__value_.__l.__size_ = 0;
      v48->__r_.__value_.__r.__words[2] = 0;
      v48->__r_.__value_.__r.__words[0] = 0;
      p_B = &__B;
      if (v57 < 0)
        p_B = (__int128 *)__B;
      *(float *)buf = 4.8149e-34;
      v59 = p_B;
      _os_log_debug_impl(&dword_1B5ED0000, v44, OS_LOG_TYPE_DEBUG, "%s: ERROR: not initialized", buf, 0xCu);
      if (SHIBYTE(v57) < 0)
        operator delete((void *)__B);
      if (SHIBYTE(__Start.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__Start.__r_.__value_.__l.__data_);
      if (v54 < 0)
        operator delete(__Step[0]);
    }
  }
}

void sub_1B649C594(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 - 169) < 0)
    operator delete(*(void **)(v1 - 192));
  if (*(char *)(v1 - 193) < 0)
    operator delete(*(void **)(v1 - 216));
  _Unwind_Resume(exception_object);
}

void HOASpatializer::gainBasedProcessing(HOASpatializer *this, const float *__A, float *__C, unsigned int a4, vDSP_Length __N, float a6)
{
  uint64_t v6;
  float v7;
  float v8;
  float v9;
  float __Step;
  float __Start;

  v6 = *((_QWORD *)this + 45);
  v7 = *(float *)(v6 + 4 * a4);
  __Start = v7;
  v8 = *(float *)(*((_QWORD *)this + 48) + 4 * a4) * a6;
  v9 = v8;
  if (!*((_DWORD *)this + 81))
    v9 = v8 + (float)(*((float *)this + 102) * (float)(v7 - v8));
  *(float *)(v6 + 4 * a4) = v9;
  __Step = (float)(v9 - v7) / (float)__N;
  if (fabsf(__Step) <= 0.000001)
  {
    if (fabsf(v7) <= 0.000001)
    {
      bzero(__C, 4 * __N);
    }
    else
    {
      *(float *)(v6 + 4 * a4) = v8;
      vDSP_vsmul(__A, 1, &__Start, __C, 1, __N);
    }
  }
  else
  {
    vDSP_vrampmul(__A, 1, &__Start, &__Step, __C, 1, __N);
  }
}

void HOASpatializer::HOASpatializer(HOASpatializer *this, const AudioChannelLayout *a2)
{
  uint64_t v4;
  HOA **v5;
  UInt32 mChannelLayoutTag;
  uint8x8_t v7;
  HOA *v8;
  int v9;
  int v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  std::vector<unsigned int>::size_type v16;
  unint64_t v17;
  uint64_t v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int v21;
  unsigned int v22;
  unsigned int v23;
  int v24;
  BOOL v25;
  std::vector<unsigned int>::value_type __x;
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  Spatializer::Spatializer(this);
  *(_OWORD *)(v4 + 332) = xmmword_1B66A1E20;
  *(_QWORD *)v4 = &off_1E69E14B0;
  v5 = (HOA **)(v4 + 352);
  *(_OWORD *)(v4 + 352) = 0u;
  *(_OWORD *)(v4 + 368) = 0u;
  *(_OWORD *)(v4 + 384) = 0u;
  *(_OWORD *)(v4 + 397) = 0u;
  *(_OWORD *)(v4 + 424) = 0u;
  *(_OWORD *)(v4 + 440) = 0u;
  *(_OWORD *)(v4 + 456) = 0u;
  *(_OWORD *)(v4 + 472) = 0u;
  *(_OWORD *)(v4 + 488) = 0u;
  *(_OWORD *)(v4 + 504) = 0u;
  *(_OWORD *)(v4 + 520) = 0u;
  *(_OWORD *)(v4 + 536) = 0u;
  *(_OWORD *)(v4 + 552) = 0u;
  *(_OWORD *)(v4 + 568) = 0u;
  *(_QWORD *)(v4 + 584) = 0;
  *(_OWORD *)(v4 + 600) = 0u;
  *(_OWORD *)(v4 + 616) = 0u;
  *(_OWORD *)(v4 + 632) = 0u;
  *(_OWORD *)(v4 + 648) = 0u;
  *(_OWORD *)(v4 + 664) = 0u;
  *(_OWORD *)(v4 + 680) = 0u;
  *(_OWORD *)(v4 + 696) = 0u;
  *(_OWORD *)(v4 + 712) = 0u;
  *(_OWORD *)(v4 + 728) = 0u;
  if (a2->mChannelLayoutTag == 0x10000)
  {
    v7 = (uint8x8_t)vcnt_s8((int8x8_t)a2->mChannelBitmap);
    v7.i16[0] = vaddlv_u8(v7);
    mChannelLayoutTag = v7.i32[0];
  }
  else if (a2->mChannelLayoutTag)
  {
    mChannelLayoutTag = (unsigned __int16)a2->mChannelLayoutTag;
  }
  else
  {
    mChannelLayoutTag = a2->mNumberChannelDescriptions;
  }
  *((_DWORD *)this + 104) = mChannelLayoutTag;
  v8 = (HOA *)operator new();
  HOA::HOA((uint64_t)v8, a2->mChannelLayoutTag, 0);
  std::unique_ptr<HOA>::reset[abi:ne180100](v5, v8);
  v9 = HIWORD(a2->mChannelLayoutTag) << 16;
  if (v9 == 12451840)
    v10 = 1;
  else
    v10 = 2 * (v9 != 12517376);
  *((_DWORD *)this + 149) = v10;
  v11 = *((unsigned int *)this + 104);
  __x = 0;
  std::vector<float>::resize((uint64_t)this + 360, v11, &__x);
  v12 = *((unsigned int *)this + 104);
  __x = 0;
  std::vector<float>::resize((uint64_t)this + 384, v12, &__x);
  v13 = *((unsigned int *)this + 104);
  __x = 1065353216;
  std::vector<float>::assign((char **)this + 57, v13, &__x);
  v14 = *((unsigned int *)this + 104);
  __x = 1065353216;
  std::vector<float>::assign((char **)this + 60, v14, &__x);
  v15 = *((unsigned int *)this + 104);
  __x = 1065353216;
  std::vector<float>::assign((char **)this + 63, v15, &__x);
  v16 = *((unsigned int *)this + 104);
  __x = 0;
  std::vector<unsigned int>::resize((std::vector<unsigned int> *)((char *)this + 664), v16, &__x);
  if (*((_DWORD *)this + 104))
  {
    v17 = 0;
    v18 = *((_QWORD *)this + 83);
    do
    {
      v19 = 0x40000000;
      do
      {
        v20 = v19;
        v19 >>= 2;
      }
      while (v20 > v17);
      v21 = 0;
      if (v20)
      {
        v22 = v17;
        do
        {
          v23 = v20 + v21;
          v24 = 2 * v20;
          if (v22 < v20 + v21)
          {
            v23 = 0;
            v24 = 0;
          }
          v22 -= v23;
          v21 = (v24 + v21) >> 1;
          v25 = v20 > 3;
          v20 >>= 2;
        }
        while (v25);
      }
      *(_DWORD *)(v18 + 4 * v17++) = v21;
    }
    while (v17 < *((unsigned int *)this + 104));
  }
}

void sub_1B649CAA0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, _Unwind_Exception *exception_object, void **a11, void **a12, void **buf)
{
  uint64_t v13;
  HOA **v14;
  _QWORD **v15;
  uint64_t *v16;
  void **v17;
  void **v18;
  void **v19;
  void **v20;
  uint64_t v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  void *v32;
  void *v33;
  void *v34;
  void *v35;
  _QWORD *v36;
  void *v37;
  void *v38;

  v21 = *(_QWORD *)(v13 + 736);
  *(_QWORD *)(v13 + 736) = 0;
  if (v21)
    (*(void (**)(uint64_t))(*(_QWORD *)v21 + 8))(v21);
  v22 = *(void **)(v13 + 712);
  if (v22)
  {
    *(_QWORD *)(v13 + 720) = v22;
    operator delete(v22);
  }
  v23 = *(void **)(v13 + 688);
  if (v23)
  {
    *(_QWORD *)(v13 + 696) = v23;
    operator delete(v23);
  }
  v24 = *v20;
  if (*v20)
  {
    *(_QWORD *)(v13 + 672) = v24;
    operator delete(v24);
  }
  v25 = *(void **)(v13 + 640);
  if (v25)
  {
    *(_QWORD *)(v13 + 648) = v25;
    operator delete(v25);
  }
  v26 = *(void **)(v13 + 616);
  if (v26)
  {
    *(_QWORD *)(v13 + 624) = v26;
    operator delete(v26);
  }
  v27 = *(_QWORD *)(v13 + 608);
  *(_QWORD *)(v13 + 608) = 0;
  if (v27)
    std::default_delete<BypassableIRProcessor>::operator()[abi:ne180100](v27);
  v28 = *v16;
  *v16 = 0;
  if (v28)
    std::default_delete<SourceExtentProcessor>::operator()[abi:ne180100](v28);
  v29 = *(_QWORD *)(v13 + 584);
  *(_QWORD *)(v13 + 584) = 0;
  if (v29)
    std::default_delete<HOA::RotationMatrix>::operator()[abi:ne180100](v29);
  v30 = *(_QWORD *)(v13 + 576);
  *(_QWORD *)(v13 + 576) = 0;
  if (v30)
    std::default_delete<HOA::RotationMatrix>::operator()[abi:ne180100](v30);
  v31 = *(void **)(v13 + 552);
  if (v31)
  {
    *(_QWORD *)(v13 + 560) = v31;
    operator delete(v31);
  }
  v32 = *(void **)(v13 + 528);
  if (v32)
  {
    *(_QWORD *)(v13 + 536) = v32;
    operator delete(v32);
  }
  v33 = *v19;
  if (*v19)
  {
    *(_QWORD *)(v13 + 512) = v33;
    operator delete(v33);
  }
  v34 = *v18;
  if (*v18)
  {
    *(_QWORD *)(v13 + 488) = v34;
    operator delete(v34);
  }
  v35 = *v17;
  if (*v17)
  {
    *(_QWORD *)(v13 + 464) = v35;
    operator delete(v35);
  }
  buf = (void **)(v13 + 432);
  std::vector<std::unique_ptr<IR::FixedIntegerDelay>>::__destroy_vector::operator()[abi:ne180100](&buf);
  v36 = *v15;
  *v15 = 0;
  if (v36)
    std::default_delete<IR::FixedIntegerDelay>::operator()[abi:ne180100](v36);
  v37 = *a11;
  if (*a11)
  {
    *(_QWORD *)(v13 + 392) = v37;
    operator delete(v37);
  }
  v38 = *a12;
  if (*a12)
  {
    *(_QWORD *)(v13 + 368) = v38;
    operator delete(v38);
  }
  std::unique_ptr<HOA>::reset[abi:ne180100](v14, 0);
  Spatializer::~Spatializer((Spatializer *)v13);
  _Unwind_Resume(a1);
}

void sub_1B649CC38(uint64_t a1, int a2)
{
  if (a2)
    JUMPOUT(0x1B649CC40);
  JUMPOUT(0x1B649CC30);
}

void sub_1B649CDBC(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10)
{
  HOA **v10;
  uint64_t v11;

  if (a2)
  {
    MEMORY[0x1BCC95CEC](v11, 0x10A0C40872B63C1);
    __cxa_begin_catch(a1);
    std::unique_ptr<HOA>::reset[abi:ne180100](v10, 0);
    __cxa_end_catch();
    JUMPOUT(0x1B649CD58);
  }
  JUMPOUT(0x1B649CC30);
}

void sub_1B649CE08()
{
  __cxa_end_catch();
  JUMPOUT(0x1B649CADCLL);
}

void sub_1B649CE14(void *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  JUMPOUT(0x1B649CC30);
}

void AUBoostClip::~AUBoostClip(AUBoostClip *this)
{
  AUBoostClip::~AUBoostClip(this);
  JUMPOUT(0x1BCC95CECLL);
}

{
  void **v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  void **v7;

  *(_QWORD *)this = &off_1E69E1700;
  v2 = (void **)((char *)this + 528);
  v3 = (_QWORD *)*((_QWORD *)this + 67);
  v4 = (_QWORD *)*((_QWORD *)this + 66);
  while (v3 != v4)
  {
    v6 = *--v3;
    v5 = v6;
    *v3 = 0;
    if (v6)
      (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  }
  *((_QWORD *)this + 67) = v4;
  *(_OWORD *)((char *)this + 568) = 0u;
  *(_QWORD *)this = &off_1E69ED840;
  v7 = v2;
  std::vector<std::unique_ptr<DspLib::AlgorithmBaseNewParameters>>::__destroy_vector::operator()[abi:ne180100](&v7);
  ausdk::AUBase::~AUBase(this);
}

uint64_t AUBoostClip::Initialize(int64x2_t *this)
{
  uint64_t v2;
  _QWORD v4[5];

  v2 = ausdk::AUEffectBase::Initialize(this);
  if (!(_DWORD)v2)
  {
    (*(void (**)(int64x2_t *, _QWORD, _QWORD))(this->i64[0] + 72))(this, 0, 0);
    (*(void (**)(_QWORD *__return_ptr, int64x2_t *, uint64_t, _QWORD))(this->i64[0] + 392))(v4, this, 2, 0);
    CAStreamBasicDescription::IdentifyCommonPCMFormat(v4, &this[37].i32[1], 0);
  }
  return v2;
}

double AUBoostClip::Cleanup(AUBoostClip *this)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  double result;

  v2 = (_QWORD *)*((_QWORD *)this + 67);
  v3 = (_QWORD *)*((_QWORD *)this + 66);
  while (v2 != v3)
  {
    v5 = *--v2;
    v4 = v5;
    *v2 = 0;
    if (v5)
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  }
  *((_QWORD *)this + 67) = v3;
  result = 0.0;
  *(_OWORD *)((char *)this + 568) = 0u;
  return result;
}

uint64_t AUBoostClip::Reset(AUBoostClip *this, int a2)
{
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;

  v4 = (_QWORD *)*((_QWORD *)this + 66);
  v5 = (_QWORD *)*((_QWORD *)this + 67);
  while (v4 != v5)
  {
    if (*v4)
      (*(void (**)(_QWORD))(*(_QWORD *)*v4 + 16))(*v4);
    ++v4;
  }
  if (!a2)
  {
    v6 = (_QWORD *)*((_QWORD *)this + 66);
    if (*((_QWORD **)this + 67) != v6)
    {
      if (*v6)
        (*(void (**)(_QWORD))(*(_QWORD *)*v6 + 16))(*v6);
    }
  }
  return 0;
}

uint64_t AUBoostClip::SetParameter(AUBoostClip *this, unsigned int a2, unsigned int a3, unsigned int a4, float a5)
{
  ausdk::AUScope *Scope;
  ausdk::AUElement *Element;

  Scope = (ausdk::AUScope *)ausdk::AUBase::GetScope(this, a3);
  Element = (ausdk::AUElement *)ausdk::AUScope::SafeGetElement(Scope, a4);
  ausdk::AUElement::SetParameter(Element, a2, a5, 0);
  ++*((_DWORD *)this + 148);
  return 0;
}

uint64_t AUBoostClip::ProcessBufferLists(AUBoostClip *this, unsigned int *a2, const AudioBufferList *a3, AudioBufferList *a4, uint64_t a5)
{
  _QWORD *v9;
  _DWORD *exception;
  int v12;
  char IsInputSilent;

  if (*((_DWORD *)this + 149) != 1)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    *(_QWORD *)exception = &off_1E69EE218;
    v12 = -4;
    goto LABEL_10;
  }
  if (a3->mNumberBuffers != 2)
  {
    ausdk::AUEffectBase::ProcessBufferLists(this, a2, a3, a4, a5);
    return 0;
  }
  v9 = (_QWORD *)*((_QWORD *)this + 66);
  if (!*v9)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    *(_QWORD *)exception = &off_1E69EE218;
    v12 = -10868;
LABEL_10:
    exception[2] = v12;
  }
  IsInputSilent = ausdk::AUEffectBase::IsInputSilent(this, *a2, a5);
  (*(void (**)(_QWORD, const AudioBufferList *, AudioBufferList *, uint64_t, char *))(*(_QWORD *)*v9 + 32))(*v9, a3, a4, a5, &IsInputSilent);
  if (!IsInputSilent)
    *a2 &= ~0x10u;
  return 0;
}

uint64_t AUBoostClip::GetParameterInfo(AUBoostClip *this, int a2, int a3, AudioUnitParameterInfo *buffer)
{
  uint64_t result;
  unint64_t v6;
  AudioUnitParameterValue v7;
  AudioUnitParameterUnit v8;
  const __CFString *v9;
  int v10;

  buffer->flags = 0;
  buffer->unitName = 0;
  if (a2)
    return 4294956418;
  v6 = 0x3F80000000000000;
  result = 4294956418;
  if (a3 > 1851880554)
  {
    if (a3 > 1919249523)
    {
      if (a3 <= 1953002098)
      {
        if (a3 != 1919249524)
        {
          if (a3 != 1935893870)
            return result;
          v10 = -1073741824;
          v7 = 1.0;
          v8 = kAudioUnitParameterUnit_Boolean;
          v9 = CFSTR("clip enable");
          goto LABEL_44;
        }
        v6 = 0x4270000038D1B717;
        v7 = 0.5;
        v8 = kAudioUnitParameterUnit_Seconds;
        v9 = CFSTR("release time");
        goto LABEL_38;
      }
      if (a3 == 1953002099)
      {
        v6 = 0x41400000C1400000;
        v10 = -1073741824;
        v7 = 0.0;
        v8 = kAudioUnitParameterUnit_Decibels;
        v9 = CFSTR("boost threshold dB");
        goto LABEL_44;
      }
      if (a3 != 1987013748)
        return result;
      v6 = 0x4270000038D1B717;
      v8 = kAudioUnitParameterUnit_Seconds;
      v9 = CFSTR("volume smooth time");
    }
    else if (a3 > 1852990827)
    {
      if (a3 != 1852990828)
      {
        if (a3 != 1885562734)
          return result;
        v6 = 0x42100000C1400000;
        v10 = -1073741824;
        v7 = 0.0;
        v8 = kAudioUnitParameterUnit_Decibels;
        v9 = CFSTR("preclip gain dB");
        goto LABEL_44;
      }
      v6 = 0x4270000038D1B717;
      v8 = kAudioUnitParameterUnit_Seconds;
      v9 = CFSTR("noise release time");
    }
    else
    {
      if (a3 != 1851880555)
      {
        if (a3 != 1852795251)
          return result;
        v6 = 0xC1200000C3200000;
        v10 = -1073741824;
        v8 = kAudioUnitParameterUnit_Decibels;
        v9 = CFSTR("noise threshold dB");
        v7 = -100.0;
        goto LABEL_44;
      }
      v6 = 0x4270000038D1B717;
      v8 = kAudioUnitParameterUnit_Seconds;
      v9 = CFSTR("noise attack time");
    }
    v10 = -1069547520;
    v7 = 0.05;
    goto LABEL_44;
  }
  if (a3 > 1668049263)
  {
    if (a3 > 1835104358)
    {
      if (a3 == 1835104359)
      {
        v6 = 0x4240000000000000;
        v10 = -1073741824;
        v7 = 12.0;
        v8 = kAudioUnitParameterUnit_Decibels;
        v9 = CFSTR("max gain dB");
      }
      else
      {
        if (a3 != 1836016741)
          return result;
        v10 = -1073741824;
        v7 = 0.0;
        v8 = kAudioUnitParameterUnit_Boolean;
        v9 = CFSTR("look ahead");
      }
    }
    else if (a3 == 1668049264)
    {
      v6 = 3233808384;
      v10 = -1073741824;
      v7 = 0.0;
      v8 = kAudioUnitParameterUnit_Decibels;
      v9 = CFSTR("softclip level dB");
    }
    else
    {
      if (a3 != 1668641894)
        return result;
      v8 = kAudioUnitParameterUnit_Generic;
      v10 = -1073741824;
      v7 = 0.0;
      v9 = CFSTR("cut");
    }
    goto LABEL_44;
  }
  if (a3 > 1651470181)
  {
    if (a3 == 1651470182)
    {
      v8 = kAudioUnitParameterUnit_Generic;
      v10 = -1073741824;
      v9 = CFSTR("boost");
      v7 = 0.2;
    }
    else
    {
      if (a3 != 1667590508)
        return result;
      v6 = 0x41400000C1400000;
      v10 = -1073741824;
      v7 = 0.0;
      v8 = kAudioUnitParameterUnit_Decibels;
      v9 = CFSTR("ceiling dB");
    }
    goto LABEL_44;
  }
  if (a3 != 1601402742)
  {
    if (a3 != 1635019636)
      return result;
    v6 = 0x4270000038D1B717;
    v7 = 0.5;
    v8 = kAudioUnitParameterUnit_Seconds;
    v9 = CFSTR("attack time");
LABEL_38:
    v10 = -1069547520;
    goto LABEL_44;
  }
  v6 = 0x41400000C2C00000;
  v10 = -1073741824;
  v7 = 0.0;
  v8 = kAudioUnitParameterUnit_Decibels;
  v9 = CFSTR("user gain dB");
LABEL_44:
  buffer->cfNameString = v9;
  buffer->flags = 0x8000000;
  CFStringGetCString(v9, buffer->name, 52, 0x8000100u);
  result = 0;
  buffer->unit = v8;
  *(_QWORD *)&buffer->minValue = v6;
  buffer->defaultValue = v7;
  buffer->flags += v10;
  return result;
}

uint64_t AUBoostClip::RestoreState(OpaqueAudioComponentInstance **this, const void *a2)
{
  uint64_t result;

  result = ausdk::AUBase::RestoreState(this, a2);
  ++*((_DWORD *)this + 148);
  return result;
}

double AUBoostClip::GetLatency(uint64_t **this)
{
  float Parameter;
  double result;
  uint64_t *v4;
  uint64_t v5;
  uint64_t Element;
  unint64_t v7;

  Parameter = ausdk::AUEffectBase::GetParameter((ausdk::AUEffectBase *)this, 0x6D6F6465u);
  result = 0.0;
  if (Parameter != 0.0 && *((_BYTE *)this + 17))
  {
    v4 = this[66];
    if (this[67] != v4)
    {
      v5 = *v4;
      Element = ausdk::AUScope::SafeGetElement((ausdk::AUScope *)(this + 16), 0);
      LODWORD(v7) = *(_DWORD *)(v5 + 160);
      return (double)v7 / *(double *)(Element + 80);
    }
  }
  return result;
}

double AUBoostClip::GetTailTime(AUBoostClip *this)
{
  return 0.0;
}

uint64_t AUBoostClip::SupportsTail(AUBoostClip *this)
{
  return 1;
}

uint64_t AUBoostClip::SupportedNumChannels(AUBoostClip *this, const AUChannelInfo **a2)
{
  if (a2)
    *a2 = (const AUChannelInfo *)&AUBoostClip::SupportedNumChannels(AUChannelInfo const**)::sSupportedChannelConfigs;
  return 2;
}

BOOL AUBoostClip::ValidFormat(AUBoostClip *this, unsigned int a2, unsigned int a3, const AudioStreamBasicDescription *a4)
{
  __int128 v5;
  _OWORD v8[2];
  uint64_t v9;
  int v10;
  BOOL v11;

  v10 = 0;
  v5 = *(_OWORD *)&a4->mBytesPerPacket;
  v8[0] = *(_OWORD *)&a4->mSampleRate;
  v8[1] = v5;
  v9 = *(_QWORD *)&a4->mBitsPerChannel;
  CAStreamBasicDescription::IdentifyCommonPCMFormat(v8, &v10, &v11);
  return v10 == 1 && a4->mChannelsPerFrame - 1 < 2;
}

double AUBoostClip::NewKernel@<D0>(AUBoostClip *this@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  double result;

  v4 = operator new();
  *(_DWORD *)(v4 + 16) = 0;
  *(_QWORD *)v4 = &off_1E69E1968;
  *(_QWORD *)(v4 + 8) = this;
  *(_QWORD *)(v4 + 160) = 32;
  *(_DWORD *)(v4 + 168) = -1;
  *(_QWORD *)(v4 + 84) = 0;
  result = 0.0;
  *(_OWORD *)(v4 + 20) = 0u;
  *(_OWORD *)(v4 + 36) = 0u;
  *(_OWORD *)(v4 + 52) = 0u;
  *(_OWORD *)(v4 + 68) = 0u;
  *(_BYTE *)(v4 + 88) = 1;
  *(_OWORD *)(v4 + 176) = 0u;
  *(_OWORD *)(v4 + 192) = 0u;
  *(_OWORD *)(v4 + 208) = 0u;
  *(_OWORD *)(v4 + 224) = 0u;
  *(_OWORD *)(v4 + 240) = 0u;
  *(_OWORD *)(v4 + 256) = 0u;
  *(_OWORD *)(v4 + 272) = 0u;
  *(_OWORD *)(v4 + 288) = 0u;
  *(_OWORD *)(v4 + 304) = 0u;
  *(_OWORD *)(v4 + 320) = 0u;
  *(_OWORD *)(v4 + 336) = 0u;
  *(_OWORD *)(v4 + 352) = 0u;
  *(_OWORD *)(v4 + 368) = 0u;
  *(_OWORD *)(v4 + 384) = 0u;
  *(_OWORD *)(v4 + 400) = 0u;
  *(_OWORD *)(v4 + 416) = 0u;
  *a2 = v4;
  return result;
}

void BoostClipKernel::~BoostClipKernel(BoostClipKernel *this)
{
  JUMPOUT(0x1BCC95CECLL);
}

double BoostClipKernel::Reset(BoostClipKernel *this)
{
  double result;

  *(_QWORD *)((char *)this + 84) = 0;
  result = 0.0;
  *(_OWORD *)((char *)this + 68) = 0u;
  *(_OWORD *)((char *)this + 52) = 0u;
  *(_OWORD *)((char *)this + 36) = 0u;
  *(_OWORD *)((char *)this + 20) = 0u;
  *((_BYTE *)this + 88) = 1;
  *((_OWORD *)this + 11) = 0u;
  *((_OWORD *)this + 12) = 0u;
  *((_OWORD *)this + 13) = 0u;
  *((_OWORD *)this + 14) = 0u;
  *((_OWORD *)this + 15) = 0u;
  *((_OWORD *)this + 16) = 0u;
  *((_OWORD *)this + 17) = 0u;
  *((_OWORD *)this + 18) = 0u;
  *((_OWORD *)this + 19) = 0u;
  *((_OWORD *)this + 20) = 0u;
  *((_OWORD *)this + 21) = 0u;
  *((_OWORD *)this + 22) = 0u;
  *((_OWORD *)this + 23) = 0u;
  *((_OWORD *)this + 24) = 0u;
  *((_OWORD *)this + 25) = 0u;
  *((_OWORD *)this + 26) = 0u;
  return result;
}

void BoostClipKernel::Process(BoostClipKernel *this, const float *a2, float *a3, unsigned int a4, BOOL *a5, __n128 a6)
{
  _DWORD *v10;
  unint64_t v11;
  unint64_t v12;
  int v13;
  int v14;
  vDSP_Length v15;
  unsigned int v16;
  float *v17;
  float32x4_t *v18;
  float v19;
  float v20;
  float *v21;
  float *v22;
  uint64_t v23;
  float v24;
  float v25;
  vDSP_Length v26;
  float v27;
  float32x4_t v28;
  float v29;
  float v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float v35;
  float v36;
  float v37;
  float v38;
  float v39;
  float v40;
  float v41;
  _DWORD *exception;
  float __C;
  float32_t __B;

  v10 = (_DWORD *)*((_QWORD *)this + 1);
  if (*((_DWORD *)this + 41) != a4)
  {
    if ((a4 & 0x1F) != 0)
    {
      HIDWORD(v11) = -286331153 * a4;
      LODWORD(v11) = -286331153 * a4;
      if ((v11 >> 1) < 0x8888889)
      {
        v13 = 30;
      }
      else
      {
        HIDWORD(v12) = -1431655765 * a4;
        LODWORD(v12) = -1431655765 * a4;
        if ((v12 >> 3) > 0xAAAAAAA)
          return;
        v13 = 24;
      }
    }
    else
    {
      v13 = 32;
    }
    *((_DWORD *)this + 40) = v13;
    *((_DWORD *)this + 41) = a4;
  }
  v14 = v10[148];
  if (v14 != *((_DWORD *)this + 42))
  {
    a6.n128_f64[0] = BoostClipKernel::CalculateCoeffs(this);
    *((_DWORD *)this + 42) = v14;
  }
  if (((*(uint64_t (**)(_DWORD *, __n128))(*(_QWORD *)v10 + 592))(v10, a6) & 1) == 0)
  {
    BoostClipKernel::UpdateTimeConstants(this);
    v15 = *((int *)this + 40);
    if (!(_DWORD)v15)
    {
      exception = __cxa_allocate_exception(0x10uLL);
      *(_QWORD *)exception = &off_1E69EE218;
      exception[2] = -50;
    }
    if (a4)
    {
      v16 = 0;
      while (1)
      {
        v17 = &a3[v16];
        __C = 0.0;
        v18 = (float32x4_t *)&a2[v16];
        vDSP_maxmgv(v18->f32, 1, &__C, v15);
        v19 = __C;
        if (*((_BYTE *)this + 173))
        {
          v20 = *((float *)this + 6);
          v21 = (float *)((char *)this + 176);
          v22 = &a3[v16];
          v23 = v15;
          do
          {
            v24 = v18->f32[0];
            v18 = (float32x4_t *)((char *)v18 + 4);
            *v22++ = *v21;
            *v21++ = v24;
            --v23;
          }
          while (v23);
          if (v19 >= v20)
            v25 = v19;
          else
            v25 = v20;
          v18 = (float32x4_t *)&a3[v16];
        }
        else
        {
          v20 = __C;
          v25 = __C;
        }
        BoostClipKernel::CalcBoostGain(this, v25);
        v26 = *((unsigned int *)this + 40);
        v27 = *((float *)this + 5);
        v28.i32[0] = *((_DWORD *)this + 8);
        __B = v28.f32[0];
        v29 = (float)(v27 - v28.f32[0]) / (float)v26;
        if (!*((_BYTE *)this + 172)
          || (v27 >= v28.f32[0] ? (v30 = v27) : (v30 = v28.f32[0]),
              v31 = v30 * v20,
              v32 = *((float *)this + 34),
              v31 < v32))
        {
          if (v27 == v28.f32[0])
            vDSP_vsmul(v18->f32, 1, &__B, &a3[v16], 1, v26);
          else
            RampGainMono(v18, (float32x4_t *)&a3[v16], v26, &__B, v29, v28);
          goto LABEL_52;
        }
        if (v32 >= 1.0)
        {
          for (; (_DWORD)v26; LODWORD(v26) = v26 - 1)
          {
            v38 = v18->f32[0];
            v18 = (float32x4_t *)((char *)v18 + 4);
            v39 = v38 * v28.f32[0];
            if ((float)(v38 * v28.f32[0]) >= -1.0)
              v40 = v39;
            else
              v40 = -1.0;
            if (v39 <= 1.0)
              v41 = v40;
            else
              v41 = 1.0;
            *v17++ = v41;
            v28.f32[0] = v29 + v28.f32[0];
          }
          goto LABEL_52;
        }
        if ((_DWORD)v26)
          break;
LABEL_52:
        *((float *)this + 8) = v27;
        *((float *)this + 6) = v19;
        v16 += v15;
        if (v16 >= a4)
          return;
      }
      v33 = (float)*((int *)this + 37) * 0.000000059605;
      v34 = (float)*((int *)this + 36) * 0.000000059605;
      v35 = (float)*((int *)this + 35) * 0.000000059605;
      while (1)
      {
        v36 = v18->f32[0] * v28.f32[0];
        if (v36 >= 0.0)
        {
          if (v36 > v35)
          {
            v37 = 1.0;
            if (v36 < v34)
              v37 = (float)((float)((float)(v36 - v34) * (float)(v36 - v34)) * v33) + 1.0;
            goto LABEL_41;
          }
        }
        else if (v36 < (float)-v35)
        {
          v37 = -1.0;
          if (v36 >= (float)-v34)
            v37 = (float)((float)-(float)((float)((float)-v36 - v34) * (float)((float)-v36 - v34)) * v33) + -1.0;
          goto LABEL_41;
        }
        v37 = v18->f32[0] * v28.f32[0];
LABEL_41:
        *v17++ = v37;
        v18 = (float32x4_t *)((char *)v18 + 4);
        v28.f32[0] = v29 + v28.f32[0];
        LODWORD(v26) = v26 - 1;
        if (!(_DWORD)v26)
          goto LABEL_52;
      }
    }
  }
}

void BoostClipKernel::ProcessStereoNonInterleaved(BoostClipKernel *this, const AudioBufferList *a2, AudioBufferList *a3, unsigned int a4, BOOL *a5, __n128 a6)
{
  _DWORD *v10;
  unint64_t v11;
  unint64_t v12;
  int v13;
  int v14;
  unsigned int v15;
  vDSP_Length v16;
  uint64_t v17;
  float32x4_t *v18;
  float32x4_t *v19;
  float32x4_t *v20;
  float32x4_t *v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float *v26;
  char *v27;
  uint64_t v28;
  float v29;
  float *v30;
  _DWORD *v31;
  uint64_t v32;
  float v33;
  vDSP_Length v34;
  float v35;
  float v36;
  float32x4_t v37;
  float v38;
  float v39;
  float32_t v40;
  float v41;
  float v42;
  float v43;
  float v44;
  float v45;
  float v46;
  float v47;
  float v48;
  float v49;
  float32x4_t v50;
  float v51;
  float v52;
  float v53;
  float v54;
  float v55;
  float v56;
  float v57;
  float v58;
  uint64_t v59;
  char *v60;
  uint64_t v61;
  char *mData;
  float v63;
  float v64;
  float __C;

  v10 = (_DWORD *)*((_QWORD *)this + 1);
  if (*((_DWORD *)this + 41) != a4)
  {
    if ((a4 & 0x1F) != 0)
    {
      HIDWORD(v11) = -286331153 * a4;
      LODWORD(v11) = -286331153 * a4;
      if ((v11 >> 1) < 0x8888889)
      {
        v13 = 30;
      }
      else
      {
        HIDWORD(v12) = -1431655765 * a4;
        LODWORD(v12) = -1431655765 * a4;
        if ((v12 >> 3) > 0xAAAAAAA)
          return;
        v13 = 24;
      }
    }
    else
    {
      v13 = 32;
    }
    *((_DWORD *)this + 40) = v13;
    *((_DWORD *)this + 41) = a4;
  }
  v14 = v10[148];
  if (v14 != *((_DWORD *)this + 42))
  {
    a6.n128_f64[0] = BoostClipKernel::CalculateCoeffs(this);
    *((_DWORD *)this + 42) = v14;
  }
  if (((*(uint64_t (**)(_DWORD *, __n128))(*(_QWORD *)v10 + 592))(v10, a6) & 1) == 0)
  {
    BoostClipKernel::UpdateTimeConstants(this);
    if (a4)
    {
      v15 = 0;
      v16 = *((int *)this + 40);
      v17 = *((unsigned int *)this + 40);
      v61 = *(_QWORD *)&a2[1].mBuffers[0].mNumberChannels;
      mData = (char *)a2->mBuffers[0].mData;
      v59 = *(_QWORD *)&a3[1].mBuffers[0].mNumberChannels;
      v60 = (char *)a3->mBuffers[0].mData;
      do
      {
        v18 = (float32x4_t *)(v59 + 4 * v15);
        v19 = (float32x4_t *)&v60[4 * v15];
        v20 = (float32x4_t *)(v61 + 4 * v15);
        __C = 0.0;
        v21 = (float32x4_t *)&mData[4 * v15];
        vDSP_maxmgv(v21->f32, 1, &__C, v16);
        v22 = __C;
        __C = 0.0;
        vDSP_maxmgv(v20->f32, 1, &__C, v16);
        if (v22 >= __C)
          v23 = v22;
        else
          v23 = __C;
        if (*((_BYTE *)this + 173))
        {
          v24 = *((float *)this + 6);
          if (v23 >= v24)
            v25 = v23;
          else
            v25 = *((float *)this + 6);
          if ((_DWORD)v17)
          {
            v26 = (float *)((char *)this + 176);
            v27 = &v60[4 * v15];
            v28 = v17;
            do
            {
              v29 = v21->f32[0];
              v21 = (float32x4_t *)((char *)v21 + 4);
              *(float *)v27 = *v26;
              v27 += 4;
              *v26++ = v29;
              --v28;
            }
            while (v28);
            v30 = (float *)((char *)this + 4 * v17 + 176);
            v31 = (_DWORD *)(v59 + 4 * v15);
            v32 = v17;
            do
            {
              v33 = v20->f32[0];
              v20 = (float32x4_t *)((char *)v20 + 4);
              *v31++ = *(_DWORD *)v30;
              *v30++ = v33;
              --v32;
            }
            while (v32);
          }
          v21 = (float32x4_t *)&v60[4 * v15];
          v20 = (float32x4_t *)(v59 + 4 * v15);
        }
        else
        {
          v24 = v23;
          v25 = v23;
        }
        BoostClipKernel::CalcBoostGain(this, v25);
        v34 = *((unsigned int *)this + 40);
        v35 = *((float *)this + 5);
        v36 = *((float *)this + 8);
        __C = v36;
        v37.f32[0] = v35 - v36;
        v38 = (float)(v35 - v36) / (float)v34;
        if (*((_BYTE *)this + 172)
          && (v35 >= v36 ? (v39 = v35) : (v39 = v36),
              v40 = v39 * v24,
              v37.i32[0] = *((_DWORD *)this + 34),
              v40 > v37.f32[0]))
        {
          if (v37.f32[0] >= 1.0)
          {
            if ((_DWORD)v34)
            {
              do
              {
                v51 = v21->f32[0];
                v21 = (float32x4_t *)((char *)v21 + 4);
                v52 = v51 * v36;
                if ((float)(v51 * v36) >= -1.0)
                  v53 = v52;
                else
                  v53 = -1.0;
                if (v52 <= 1.0)
                  v54 = v53;
                else
                  v54 = 1.0;
                v19->f32[0] = v54;
                v19 = (float32x4_t *)((char *)v19 + 4);
                v55 = v20->f32[0];
                v20 = (float32x4_t *)((char *)v20 + 4);
                v56 = v36 * v55;
                if ((float)(v36 * v55) >= -1.0)
                  v57 = v56;
                else
                  v57 = -1.0;
                if (v56 <= 1.0)
                  v58 = v57;
                else
                  v58 = 1.0;
                v18->f32[0] = v58;
                v18 = (float32x4_t *)((char *)v18 + 4);
                v36 = v38 + v36;
                --v34;
              }
              while (v34);
            }
          }
          else if ((_DWORD)v34)
          {
            v41 = (float)*((int *)this + 37) * 0.000000059605;
            v42 = (float)*((int *)this + 36) * 0.000000059605;
            v43 = (float)*((int *)this + 35) * 0.000000059605;
            v44 = -v43;
            v45 = -v42;
            do
            {
              v46 = v21->f32[0] * v36;
              if (v46 >= 0.0)
              {
                if (v46 <= v43)
                {
LABEL_43:
                  v47 = v21->f32[0] * v36;
                  goto LABEL_44;
                }
                v47 = 1.0;
                if (v46 < v42)
                  v47 = (float)((float)((float)(v46 - v42) * (float)(v46 - v42)) * v41) + 1.0;
              }
              else
              {
                if (v46 >= v44)
                  goto LABEL_43;
                v47 = -1.0;
                if (v46 >= v45)
                  v47 = (float)((float)-(float)((float)((float)-v46 - v42) * (float)((float)-v46 - v42)) * v41) + -1.0;
              }
LABEL_44:
              v19->f32[0] = v47;
              v48 = v36 * v20->f32[0];
              if (v48 >= 0.0)
              {
                if (v48 > v43)
                {
                  v49 = 1.0;
                  if (v48 < v42)
                    v49 = (float)((float)((float)(v48 - v42) * (float)(v48 - v42)) * v41) + 1.0;
                  goto LABEL_52;
                }
              }
              else if (v48 < v44)
              {
                v49 = -1.0;
                if (v48 >= v45)
                  v49 = (float)((float)-(float)((float)((float)-v48 - v42) * (float)((float)-v48 - v42)) * v41) + -1.0;
                goto LABEL_52;
              }
              v49 = v36 * v20->f32[0];
LABEL_52:
              v18->f32[0] = v49;
              v18 = (float32x4_t *)((char *)v18 + 4);
              v36 = v38 + v36;
              v20 = (float32x4_t *)((char *)v20 + 4);
              v19 = (float32x4_t *)((char *)v19 + 4);
              v21 = (float32x4_t *)((char *)v21 + 4);
              --v34;
            }
            while (v34);
          }
        }
        else if (v35 == v36)
        {
          vDSP_vsmul(v21->f32, 1, &__C, v19->f32, 1, v34);
          vDSP_vsmul(v20->f32, 1, &__C, v18->f32, 1, v34);
        }
        else
        {
          v63 = v36;
          v64 = v36;
          RampGainMono(v21, v19, v34, &v64, (float)(v35 - v36) / (float)v34, v37);
          RampGainMono(v20, v18, v34, &v63, v38, v50);
        }
        *((float *)this + 8) = v35;
        *((float *)this + 6) = v23;
        v15 += v16;
      }
      while (v15 < a4);
    }
  }
}

double BoostClipKernel::CalculateCoeffs(BoostClipKernel *this)
{
  ausdk::AUEffectBase *v2;
  float Parameter;
  float v4;
  float v5;
  float v6;
  float v7;
  float v8;
  float v9;
  float v10;
  float v11;
  float v12;
  double v13;
  unsigned int v14;
  unsigned int v15;
  double result;
  float v17;
  float v18;
  float v19;
  float v20;
  float v21;
  float v22;

  v2 = (ausdk::AUEffectBase *)*((_QWORD *)this + 1);
  Parameter = ausdk::AUEffectBase::GetParameter(v2, 0x7063676Eu);
  v4 = ausdk::AUEffectBase::GetParameter(v2, 0x5F737776u);
  v21 = ausdk::AUEffectBase::GetParameter(v2, 0x626F6F66u);
  v19 = ausdk::AUEffectBase::GetParameter(v2, 0x63757466u);
  v22 = ausdk::AUEffectBase::GetParameter(v2, 0x74687273u);
  v20 = ausdk::AUEffectBase::GetParameter(v2, 0x6E6F6973u);
  v18 = ausdk::AUEffectBase::GetParameter(v2, 0x6D617867u);
  v5 = ausdk::AUEffectBase::GetParameter(v2, 0x6365696Cu);
  v17 = ausdk::AUEffectBase::GetParameter(v2, 0x766F6C74u);
  v6 = ausdk::AUEffectBase::GetParameter(v2, 0x61746B74u);
  v7 = ausdk::AUEffectBase::GetParameter(v2, 0x72656C74u);
  v8 = ausdk::AUEffectBase::GetParameter(v2, 0x6E61746Bu);
  v9 = ausdk::AUEffectBase::GetParameter(v2, 0x6E72656Cu);
  v10 = ausdk::AUEffectBase::GetParameter(v2, 0x636C6970u);
  *((_BYTE *)this + 173) = ausdk::AUEffectBase::GetParameter(v2, 0x6D6F6465u) != 0.0;
  *((_BYTE *)this + 172) = ausdk::AUEffectBase::GetParameter(v2, 0x7363656Eu) != 0.0;
  if (v4 < v5)
    v5 = v4;
  *((float *)this + 23) = v21;
  *((float *)this + 24) = v19 * 10.0;
  *((float *)this + 25) = Parameter;
  v11 = __exp10f(v4 * 0.05);
  *((float *)this + 38) = v22;
  *((float *)this + 39) = v20;
  *((float *)this + 26) = fminf(v11, 100.0);
  *((float *)this + 27) = v18;
  *((float *)this + 28) = fmaxf(v17, 0.0001);
  *((float *)this + 29) = fmaxf(v6, 0.0001);
  *((float *)this + 30) = fmaxf(v7, 0.001);
  *((float *)this + 31) = fmaxf(v8, 0.0001);
  *((float *)this + 32) = fmaxf(v9, 0.001);
  *((float *)this + 33) = fmaxf(__exp10f(v5 * 0.05), 0.001);
  v12 = __exp10f(v10 * 0.05);
  if (v12 < 0.25)
    v12 = 0.25;
  if (v12 >= 0.98)
    v12 = 1.0;
  *((float *)this + 34) = v12;
  v13 = v12;
  v14 = vcvtd_n_s64_f64(v13, 0x18uLL);
  v15 = vcvtd_n_s64_f64(1.0 / ((v13 + -1.0) * 4.0), 0x18uLL);
  result = 2.0 - v13;
  *((_DWORD *)this + 35) = v14;
  *((_DWORD *)this + 36) = vcvtd_n_s64_f64(result, 0x18uLL);
  *((_DWORD *)this + 37) = v15;
  return result;
}

void BoostClipKernel::UpdateTimeConstants(BoostClipKernel *this)
{
  int8x16_t v2;
  double v3;
  float32x2_t v4;
  float64x2_t v10;
  float32x2_t v11;
  float64x2_t v12;
  float v13;
  double v14;
  double v15;
  float v16;
  float64x2_t __x;
  float64x2_t __xa;
  long double v19;
  long double v20;
  uint64_t v21;
  uint64_t v22;

  v3 = *(double *)(ausdk::AUScope::SafeGetElement((ausdk::AUScope *)(*((_QWORD *)this + 1) + 128), 0) + 80);
  v4 = *(float32x2_t *)((char *)this + 116);
  __asm { FMOV            V9.2S, #1.0 }
  if (!_ZF || v4.f32[1] != *((float *)this + 19))
  {
    v2.i32[0] = *((_DWORD *)this + 40);
    v10 = vmulq_n_f64(vcvtq_f64_f32(v4), v3 / (double)v2.u64[0]);
    v21 = *(_QWORD *)((char *)this + 116);
    __x = (float64x2_t)vbslq_s8((int8x16_t)vcgtq_f64((float64x2_t)vdupq_n_s64(0x10000000000000uLL), v10), (int8x16_t)vdupq_n_s64(0xFFF0000000000000), (int8x16_t)vdivq_f64((float64x2_t)vdupq_n_s64(0xC01BA18A998FFFA0), v10));
    v19 = exp(__x.f64[1]);
    *(double *)v2.i64 = exp(__x.f64[0]);
    *(long double *)&v2.i64[1] = v19;
    *(float32x2_t *)((char *)this + 52) = vsub_f32(_D9, vcvt_f32_f64((float64x2_t)vbicq_s8(v2, (int8x16_t)vcgtq_f64((float64x2_t)vdupq_n_s64(0xC086233333333333), __x))));
    v2.i32[1] = HIDWORD(v21);
    *((_QWORD *)this + 9) = v21;
  }
  v11 = *(float32x2_t *)((char *)this + 124);
  if (v11.f32[0] != *((float *)this + 20) || v11.f32[1] != *((float *)this + 21))
  {
    v2.i32[0] = *((_DWORD *)this + 40);
    v12 = vmulq_n_f64(vcvtq_f64_f32(v11), v3 / (double)v2.u64[0]);
    v22 = *(_QWORD *)((char *)this + 124);
    __xa = (float64x2_t)vbslq_s8((int8x16_t)vcgtq_f64((float64x2_t)vdupq_n_s64(0x10000000000000uLL), v12), (int8x16_t)vdupq_n_s64(0xFFF0000000000000), (int8x16_t)vdivq_f64((float64x2_t)vdupq_n_s64(0xC01BA18A998FFFA0), v12));
    v20 = exp(__xa.f64[1]);
    *(double *)v2.i64 = exp(__xa.f64[0]);
    *(long double *)&v2.i64[1] = v20;
    *(float32x2_t *)((char *)this + 60) = vsub_f32(_D9, vcvt_f32_f64((float64x2_t)vbicq_s8(v2, (int8x16_t)vcgtq_f64((float64x2_t)vdupq_n_s64(0xC086233333333333), __xa))));
    v2.i32[1] = HIDWORD(v22);
    *((_QWORD *)this + 10) = v22;
  }
  v13 = *((float *)this + 28);
  if (v13 != *((float *)this + 17))
  {
    v2.i32[0] = *((_DWORD *)this + 40);
    *(double *)v2.i64 = v3 / (double)v2.u64[0] * v13;
    if (*(double *)v2.i64 >= 2.22507386e-308)
      v14 = -6.90775528 / *(double *)v2.i64;
    else
      v14 = -INFINITY;
    v15 = exp(v14);
    if (v14 < -708.4)
      v15 = 0.0;
    v16 = v15;
    *((float *)this + 12) = 1.0 - v16;
    *((float *)this + 17) = v13;
  }
}

void BoostClipKernel::CalcBoostGain(BoostClipKernel *this, float a2)
{
  float v3;
  float v4;
  float v5;
  float v6;
  float v7;
  float v8;
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;
  int v14;
  float v15;
  float v16;
  float *v17;
  float v18;
  float v19;
  uint64_t v20;
  float v21;
  float v22;
  float v23;
  float v24;

  if (a2 >= 0.00000001)
    v3 = a2;
  else
    v3 = 0.00000001;
  v4 = log10f(v3) * 20.0;
  v5 = *((float *)this + 38);
  v6 = v4;
  if (v4 < v5)
    v6 = v4 + (float)(*((float *)this + 23) * (float)(v5 - v4));
  v7 = *((float *)this + 39);
  if (v4 >= v7)
  {
    v8 = 0.0;
    v9 = 1.0;
  }
  else
  {
    v8 = (float)(v4 - v7) * *((float *)this + 24);
    v9 = __exp10f(v8 * 0.05);
  }
  v10 = (float)(v6 + *((float *)this + 25)) - v4;
  v11 = *((float *)this + 27);
  if ((float)(v8 + v10) > v11)
    v10 = v11 - v8;
  v12 = __exp10f(v10 * 0.05);
  v13 = *((float *)this + 26);
  v14 = *((unsigned __int8 *)this + 88);
  if (*((_BYTE *)this + 88))
  {
    v15 = v13 + (float)(*((float *)this + 12) * (float)(v13 - v13));
    *((float *)this + 10) = v9;
    *((float *)this + 11) = v15;
    v16 = v12;
  }
  else
  {
    v16 = *((float *)this + 9);
    v15 = *((float *)this + 11) + (float)(*((float *)this + 12) * (float)(v13 - *((float *)this + 11)));
    *((float *)this + 11) = v15;
    if (v12 < v16)
    {
      v17 = (float *)((char *)this + 52);
      goto LABEL_16;
    }
  }
  v17 = (float *)((char *)this + 56);
LABEL_16:
  v18 = v16 + (float)(*v17 * (float)(v12 - v16));
  *((float *)this + 9) = v18;
  v19 = *((float *)this + 10);
  v20 = 64;
  if (v9 < v19)
    v20 = 60;
  v21 = v19 + (float)(*(float *)((char *)this + v20) * (float)(v9 - v19));
  *((float *)this + 10) = v21;
  v22 = (float)(v3 * v15) * v21;
  v23 = *((float *)this + 33);
  if ((float)(v18 * v22) > v23)
  {
    v18 = v23 / v22;
    *((float *)this + 9) = v23 / v22;
  }
  v24 = v21 * (float)(v15 * v18);
  *((float *)this + 5) = v24;
  if (v14)
  {
    *((float *)this + 8) = v24;
    *((_DWORD *)this + 7) = vcvts_n_s32_f32(v24, 0x18uLL);
    *((_BYTE *)this + 88) = 0;
  }
}

void VADGenUtils::VectorSigmoid<float>(const float *a1, float *a2, float *a3, float *__D, vDSP_Length __N, float a6, float a7)
{
  float __C;
  float __B;
  int __A;

  __C = -(float)(a7 * a6);
  __B = a7;
  vDSP_vsmsa(a1, 1, &__B, &__C, __D, 1, __N);
  vDSP_vneg(__D, 1, a3, 1, __N);
  __A = __N;
  vvexpf(a3, a3, &__A);
  __A = 1065353216;
  vDSP_vsadd(a3, 1, (const float *)&__A, a2, 1, __N);
  vDSP_vfill((const float *)&__A, a3, 1, __N);
  vDSP_vdiv(a2, 1, a3, 1, a2, 1, __N);
}

void VADGenUtils::TwoPoleBandpass_Array<float>(const float *a1, const float *a2, const float *a3, const float *a4, const float *a5, const float *a6, float *__C, vDSP_Length __M, float a9, float a10, float a11)
{
  float __B;
  float v19;
  float v20;

  v19 = a10;
  v20 = a9;
  __B = a11;
  vDSP_mmov(a1, __C, __M, 1uLL, __M, __M);
  vDSP_vadd(__C, 1, a2, 1, __C, 1, __M);
  vDSP_vsub(a3, 1, __C, 1, __C, 1, __M);
  vDSP_vsub(a4, 1, __C, 1, __C, 1, __M);
  vDSP_vsmul(__C, 1, &__B, __C, 1, __M);
  vDSP_vsma(a5, 1, &v20, __C, 1, __C, 1, __M);
  vDSP_vsma(a6, 1, &v19, __C, 1, __C, 1, __M);
}

void AUResidualEchoSuppressorV4::~AUResidualEchoSuppressorV4(AUResidualEchoSuppressorV4 *this)
{
  *(_QWORD *)this = &off_1E69E19A0;
  AUResidualEchoSuppressorV4::Cleanup(this);
  ausdk::AUBase::~AUBase(this);
}

{
  *(_QWORD *)this = &off_1E69E19A0;
  AUResidualEchoSuppressorV4::Cleanup(this);
  ausdk::AUBase::~AUBase(this);
  JUMPOUT(0x1BCC95CECLL);
}

uint64_t AUResidualEchoSuppressorV4::Initialize(AUResidualEchoSuppressorV4 *this)
{
  char v2;
  ausdk::AUScope *v3;
  unsigned int v4;
  char v5;
  uint64_t Element;
  double v7;
  uint64_t v8;
  double v9;
  int v10;
  int v11;
  int v12;
  int v13;
  uint64_t v14;
  double v15;
  int v16;
  int v17;
  int v18;
  int v19;
  _DWORD *v20;
  FILE **v21;
  FILE *v22;
  const char *v23;
  int v24;
  int v25;
  uint64_t result;
  uint64_t v27;
  ausdk::AUElement *v28;
  ausdk::AUElement **v29;
  float Parameter;
  uint64_t v31;
  ausdk::AUElement *v32;
  ausdk::AUElement **v33;
  float v34;
  uint64_t v35;
  ausdk::AUElement *v36;
  ausdk::AUElement **v37;
  uint64_t v38;
  ausdk::AUElement *v39;
  ausdk::AUElement **v40;
  float v41;
  uint64_t v42;
  ausdk::AUElement *v43;
  ausdk::AUElement **v44;
  float v45;
  uint64_t v46;
  ausdk::AUElement *v47;
  ausdk::AUElement **v48;
  float v49;
  uint64_t v50;
  ausdk::AUElement *v51;
  ausdk::AUElement **v52;
  float v53;
  uint64_t v54;
  float v55;
  ausdk::AUElement *v56;
  ausdk::AUElement **v57;
  float v58;
  uint64_t v59;
  ausdk::AUElement *v60;
  ausdk::AUElement **v61;
  float v62;
  uint64_t v63;
  ausdk::AUElement *v64;
  ausdk::AUElement **v65;
  float v66;
  uint64_t v67;
  ausdk::AUElement *v68;
  ausdk::AUElement **v69;
  float v70;
  uint64_t v71;
  ausdk::AUElement *v72;
  ausdk::AUElement **v73;
  float v74;
  uint64_t v75;
  float v76;
  ausdk::AUElement *v77;
  ausdk::AUElement **v78;
  float v79;
  uint64_t v80;
  ausdk::AUElement *v81;
  ausdk::AUElement **v82;
  float v83;
  uint64_t v84;
  ausdk::AUElement *v85;
  ausdk::AUElement **v86;
  float v87;
  uint64_t v88;
  float v89;
  ausdk::AUElement *v90;
  ausdk::AUElement **v91;
  float v92;
  uint64_t v93;
  ausdk::AUElement *v94;
  ausdk::AUElement **v95;
  float v96;
  uint64_t v97;
  ausdk::AUElement *v98;
  ausdk::AUElement **v99;
  float v100;
  uint64_t v101;
  ausdk::AUElement *v102;
  ausdk::AUElement **v103;
  float v104;
  uint64_t v105;
  ausdk::AUElement *v106;
  ausdk::AUElement **v107;
  float v108;
  uint64_t v109;
  ausdk::AUElement *v110;
  ausdk::AUElement **v111;
  float v112;
  uint64_t v113;
  ausdk::AUElement *v114;
  ausdk::AUElement **v115;
  float v116;
  uint64_t v117;
  ausdk::AUElement *v118;
  ausdk::AUElement **v119;
  float v120;
  uint64_t v121;
  ausdk::AUElement *v122;
  ausdk::AUElement **v123;
  float v124;
  uint64_t v125;
  ausdk::AUElement *v126;
  ausdk::AUElement **v127;
  float v128;
  uint64_t v129;
  ausdk::AUElement *v130;
  ausdk::AUElement **v131;
  int v132;
  float v133;
  float v134;
  float v135;
  float v136;
  float v137;
  float v138;
  float v139;
  NSObject *v140;
  int v141;
  uint64_t v142;
  uint64_t v143;
  unsigned int v144;
  float v145;
  float v146;
  float v147;
  unsigned int v148;
  int v149;
  float v150;
  uint64_t v151;
  uint64_t v152;
  ausdk::AUElement *v153;
  ausdk::AUElement **v154;
  uint64_t v155;
  ausdk::AUElement *v156;
  ausdk::AUElement **v157;
  float v158;
  uint64_t v159;
  uint64_t v160;
  ausdk::AUElement *v161;
  ausdk::AUElement **v162;
  float v163;
  float v164;
  float v165;
  float v166;
  float v167;
  float v168;
  float v169;
  float v170;
  float v171;
  float v172;
  float v173;
  float v174;
  float v175;
  float v176;
  float v177;
  float v178;
  float v179;
  float v180;
  float v181;
  float v182;
  float v183;

  v2 = 0;
  v3 = (AUResidualEchoSuppressorV4 *)((char *)this + 80);
  v4 = 1;
  do
  {
    v5 = v2;
    Element = ausdk::AUScope::SafeGetElement(v3, v4 - 1);
    if (*(double *)(Element + 80) != *(double *)(ausdk::AUScope::SafeGetElement(v3, v4) + 80))
      return 4294956428;
    v4 = 2;
    v2 = 1;
  }
  while ((v5 & 1) == 0);
  v7 = *(double *)(ausdk::AUScope::SafeGetElement(v3, 0) + 80);
  if (v7 != *(double *)(ausdk::AUScope::SafeGetElement((AUResidualEchoSuppressorV4 *)((char *)this + 128), 0) + 80))
    return 4294956428;
  *((_DWORD *)this + 137) = *((_DWORD *)this + 84);
  *((_BYTE *)this + 540) = *(_DWORD *)(ausdk::AUScope::SafeGetElement(v3, 0) + 88) == 1718773105;
  *((_BYTE *)this + 541) = *(_DWORD *)(ausdk::AUScope::SafeGetElement(v3, 1u) + 88) == 1718773105;
  *((_BYTE *)this + 542) = *(_DWORD *)(ausdk::AUScope::SafeGetElement(v3, 2u) + 88) == 1718773105;
  *((_BYTE *)this + 543) = *(_DWORD *)(ausdk::AUScope::SafeGetElement(v3, 3u) + 88) == 1718773105;
  *((_BYTE *)this + 544) = *(_DWORD *)(ausdk::AUScope::SafeGetElement(v3, 4u) + 88) == 1718773105;
  *((_BYTE *)this + 545) = *(_DWORD *)(ausdk::AUScope::SafeGetElement((AUResidualEchoSuppressorV4 *)((char *)this + 128), 0)+ 88) == 1718773105;
  *((_BYTE *)this + 546) = *(_DWORD *)(ausdk::AUScope::SafeGetElement((AUResidualEchoSuppressorV4 *)((char *)this + 128), 1u)+ 88) == 1718773105;
  v8 = ausdk::AUScope::SafeGetElement(v3, 0);
  v9 = *(double *)(v8 + 80);
  v11 = *(_DWORD *)(v8 + 88);
  v10 = *(_DWORD *)(v8 + 92);
  v12 = *(_DWORD *)(v8 + 104);
  v13 = *(_DWORD *)(v8 + 108);
  v14 = ausdk::AUScope::SafeGetElement(v3, 1u);
  v15 = *(double *)(v14 + 80);
  v17 = *(_DWORD *)(v14 + 88);
  v16 = *(_DWORD *)(v14 + 92);
  v18 = *(_DWORD *)(v14 + 104);
  v19 = *(_DWORD *)(v14 + 108);
  v20 = (_DWORD *)ausdk::AUScope::SafeGetElement(v3, 2u);
  if (v9 != v15)
  {
    v21 = (FILE **)MEMORY[0x1E0C80C10];
    v22 = (FILE *)*MEMORY[0x1E0C80C10];
    v23 = "_vpio_res: check 1 failed!\n";
LABEL_14:
    fwrite(v23, 0x1BuLL, 1uLL, v22);
    fflush(*v21);
    return 4294956428;
  }
  v25 = v20[22];
  v24 = v20[23];
  if (v11 != 1819304813 && v11 != 1718773105 || (v10 & 2) != 0 || v13 != 1 || (v10 & 1) == 0 && v12 != 2)
  {
    v21 = (FILE **)MEMORY[0x1E0C80C10];
    v22 = (FILE *)*MEMORY[0x1E0C80C10];
    v23 = "_vpio_res: check 2 failed!\n";
    goto LABEL_14;
  }
  if (v17 != 1819304813 && v17 != 1718773105
    || (v16 & 2) != 0
    || v19 != 1
    || (v16 & 1) == 0 && v18 != 2
    || v25 != 1819304813 && v25 != 1718773105
    || (v24 & 2) != 0
    || v20[27] != 1
    || (v24 & 1) == 0 && v20[26] != 2)
  {
    v21 = (FILE **)MEMORY[0x1E0C80C10];
    v22 = (FILE *)*MEMORY[0x1E0C80C10];
    v23 = "_vpio_res: check 3 failed!\n";
    goto LABEL_14;
  }
  v27 = *((_QWORD *)this + 9);
  if (v27)
  {
    v28 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v27 + 32))(v27, 0);
  }
  else
  {
    v29 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v29)
      v28 = 0;
    else
      v28 = *v29;
  }
  Parameter = ausdk::AUElement::GetParameter(v28, 1u);
  v31 = *((_QWORD *)this + 9);
  v180 = Parameter;
  if (v31)
  {
    v32 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v31 + 32))(v31, 0);
  }
  else
  {
    v33 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v33)
      v32 = 0;
    else
      v32 = *v33;
  }
  v34 = ausdk::AUElement::GetParameter(v32, 2u);
  v35 = *((_QWORD *)this + 9);
  v179 = v34;
  if (v35)
  {
    v36 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v35 + 32))(v35, 0);
  }
  else
  {
    v37 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v37)
      v36 = 0;
    else
      v36 = *v37;
  }
  *((_DWORD *)this + 138) = ausdk::AUElement::GetParameter(v36, 8u);
  v38 = *((_QWORD *)this + 9);
  if (v38)
  {
    v39 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v38 + 32))(v38, 0);
  }
  else
  {
    v40 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v40)
      v39 = 0;
    else
      v39 = *v40;
  }
  v41 = ausdk::AUElement::GetParameter(v39, 9u);
  v42 = *((_QWORD *)this + 9);
  v178 = v41;
  if (v42)
  {
    v43 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v42 + 32))(v42, 0);
  }
  else
  {
    v44 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v44)
      v43 = 0;
    else
      v43 = *v44;
  }
  v45 = ausdk::AUElement::GetParameter(v43, 0xAu);
  v46 = *((_QWORD *)this + 9);
  v182 = v45;
  if (v46)
  {
    v47 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v46 + 32))(v46, 0);
  }
  else
  {
    v48 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v48)
      v47 = 0;
    else
      v47 = *v48;
  }
  v49 = ausdk::AUElement::GetParameter(v47, 0xBu);
  v50 = *((_QWORD *)this + 9);
  if (v50)
  {
    v51 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v50 + 32))(v50, 0);
  }
  else
  {
    v52 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v52)
      v51 = 0;
    else
      v51 = *v52;
  }
  v53 = ausdk::AUElement::GetParameter(v51, 0xCu);
  v54 = *((_QWORD *)this + 9);
  if (v54)
  {
    v55 = v53;
    v56 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v54 + 32))(v54, 0);
  }
  else
  {
    v55 = v53;
    v57 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v57)
      v56 = 0;
    else
      v56 = *v57;
  }
  v58 = ausdk::AUElement::GetParameter(v56, 0xDu);
  v59 = *((_QWORD *)this + 9);
  v177 = v58;
  if (v59)
  {
    v60 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v59 + 32))(v59, 0);
  }
  else
  {
    v61 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v61)
      v60 = 0;
    else
      v60 = *v61;
  }
  v62 = ausdk::AUElement::GetParameter(v60, 0xEu);
  v63 = *((_QWORD *)this + 9);
  v176 = v62;
  if (v63)
  {
    v64 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v63 + 32))(v63, 0);
  }
  else
  {
    v65 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v65)
      v64 = 0;
    else
      v64 = *v65;
  }
  v66 = ausdk::AUElement::GetParameter(v64, 0xFu);
  v67 = *((_QWORD *)this + 9);
  v175 = v66;
  if (v67)
  {
    v68 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v67 + 32))(v67, 0);
  }
  else
  {
    v69 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v69)
      v68 = 0;
    else
      v68 = *v69;
  }
  v70 = ausdk::AUElement::GetParameter(v68, 0x10u);
  v71 = *((_QWORD *)this + 9);
  if (v71)
  {
    v72 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v71 + 32))(v71, 0);
  }
  else
  {
    v73 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v73)
      v72 = 0;
    else
      v72 = *v73;
  }
  v74 = ausdk::AUElement::GetParameter(v72, 0x11u);
  v75 = *((_QWORD *)this + 9);
  if (v75)
  {
    v76 = v74;
    v77 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v75 + 32))(v75, 0);
  }
  else
  {
    v76 = v74;
    v78 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v78)
      v77 = 0;
    else
      v77 = *v78;
  }
  v79 = ausdk::AUElement::GetParameter(v77, 0x12u);
  v80 = *((_QWORD *)this + 9);
  if (v80)
  {
    v81 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v80 + 32))(v80, 0);
  }
  else
  {
    v82 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v82)
      v81 = 0;
    else
      v81 = *v82;
  }
  v83 = ausdk::AUElement::GetParameter(v81, 0x13u);
  v84 = *((_QWORD *)this + 9);
  v181 = v83;
  if (v84)
  {
    v85 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v84 + 32))(v84, 0);
  }
  else
  {
    v86 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v86)
      v85 = 0;
    else
      v85 = *v86;
  }
  v87 = ausdk::AUElement::GetParameter(v85, 0x14u);
  v88 = *((_QWORD *)this + 9);
  if (v88)
  {
    v89 = v87;
    v90 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v88 + 32))(v88, 0);
  }
  else
  {
    v89 = v87;
    v91 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v91)
      v90 = 0;
    else
      v90 = *v91;
  }
  v92 = ausdk::AUElement::GetParameter(v90, 0x15u);
  v93 = *((_QWORD *)this + 9);
  v173 = v92;
  if (v93)
  {
    v94 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v93 + 32))(v93, 0);
  }
  else
  {
    v95 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v95)
      v94 = 0;
    else
      v94 = *v95;
  }
  v96 = ausdk::AUElement::GetParameter(v94, 0x16u);
  v97 = *((_QWORD *)this + 9);
  v174 = v96;
  if (v97)
  {
    v98 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v97 + 32))(v97, 0);
  }
  else
  {
    v99 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v99)
      v98 = 0;
    else
      v98 = *v99;
  }
  v100 = ausdk::AUElement::GetParameter(v98, 0x17u);
  v101 = *((_QWORD *)this + 9);
  v172 = v100;
  if (v101)
  {
    v102 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v101 + 32))(v101, 0);
  }
  else
  {
    v103 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v103)
      v102 = 0;
    else
      v102 = *v103;
  }
  v104 = ausdk::AUElement::GetParameter(v102, 0x18u);
  v105 = *((_QWORD *)this + 9);
  v171 = v104;
  if (v105)
  {
    v106 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v105 + 32))(v105, 0);
  }
  else
  {
    v107 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v107)
      v106 = 0;
    else
      v106 = *v107;
  }
  v108 = ausdk::AUElement::GetParameter(v106, 0x19u);
  v109 = *((_QWORD *)this + 9);
  v169 = v108;
  if (v109)
  {
    v110 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v109 + 32))(v109, 0);
  }
  else
  {
    v111 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v111)
      v110 = 0;
    else
      v110 = *v111;
  }
  v112 = ausdk::AUElement::GetParameter(v110, 0x1Au);
  v113 = *((_QWORD *)this + 9);
  v170 = v112;
  if (v113)
  {
    v114 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v113 + 32))(v113, 0);
  }
  else
  {
    v115 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v115)
      v114 = 0;
    else
      v114 = *v115;
  }
  v116 = ausdk::AUElement::GetParameter(v114, 0x1Bu);
  v117 = *((_QWORD *)this + 9);
  v168 = v116;
  if (v117)
  {
    v118 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v117 + 32))(v117, 0);
  }
  else
  {
    v119 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v119)
      v118 = 0;
    else
      v118 = *v119;
  }
  v120 = ausdk::AUElement::GetParameter(v118, 0x1Cu);
  v121 = *((_QWORD *)this + 9);
  v167 = v120;
  if (v121)
  {
    v122 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v121 + 32))(v121, 0);
  }
  else
  {
    v123 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v123)
      v122 = 0;
    else
      v122 = *v123;
  }
  v124 = ausdk::AUElement::GetParameter(v122, 0x1Eu);
  v125 = *((_QWORD *)this + 9);
  v166 = v124;
  if (v125)
  {
    v126 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v125 + 32))(v125, 0);
  }
  else
  {
    v127 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v127)
      v126 = 0;
    else
      v126 = *v127;
  }
  v128 = ausdk::AUElement::GetParameter(v126, 0x1Du);
  v129 = *((_QWORD *)this + 9);
  v164 = v128;
  if (v129)
  {
    v130 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v129 + 32))(v129, 0);
  }
  else
  {
    v131 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v131)
      v130 = 0;
    else
      v130 = *v131;
  }
  v165 = ausdk::AUElement::GetParameter(v130, 0x1Fu);
  v132 = v9;
  (*(void (**)(AUResidualEchoSuppressorV4 *))(*(_QWORD *)this + 64))(this);
  v183 = __exp10f(v182 * 0.1);
  v133 = __exp10f(v49 * 0.1);
  v134 = __exp10f(v55 * 0.1);
  v135 = __exp10f(v70 * 0.1);
  v136 = __exp10f(v76 * 0.1);
  v137 = __exp10f(v79 * 0.1);
  v138 = __exp10f(v181 * 0.1);
  v139 = __exp10f(v89 * 0.1);
  v140 = CResidualSuppressorV3::speex_preprocess_state_res_init((CResidualSuppressorV3 *)*((unsigned int *)this + 84), v132);
  *((_QWORD *)this + 70) = v140;
  if (!v140)
    return 4294956421;
  v141 = (int)v166;
  CResidualSuppressorV4::speex_preprocess_state_res_initV4((CResidualSuppressorV4 *)v140);
  *((_QWORD *)this + 71) = v142;
  v143 = *((_QWORD *)this + 70);
  *(int32x2_t *)(v143 + 36) = vneg_s32(vabs_s32((int32x2_t)__PAIR64__((int)v179, (int)v180)));
  *(_DWORD *)(v143 + 44) = *((_DWORD *)this + 138);
  *(_DWORD *)(v143 + 496) = v178;
  *(float *)(v143 + 500) = v183;
  *(float *)(v143 + 504) = v133;
  *(float *)(v143 + 508) = v134;
  *(float *)(v143 + 556) = v177;
  *(float *)(v143 + 512) = v176;
  *(float *)(v143 + 516) = v175;
  *(float *)(v143 + 520) = v135;
  *(float *)(v143 + 524) = v136;
  *(float *)(v143 + 528) = v137;
  *(float *)(v143 + 532) = v138;
  *(float *)(v143 + 536) = v139;
  *(_DWORD *)(v143 + 540) = v173;
  *(float *)(v143 + 548) = v174;
  *(float *)(v143 + 552) = v172;
  *(_DWORD *)(v143 + 572) = v171;
  *(_DWORD *)(v143 + 576) = v169;
  v144 = (float)*(int *)(v143 + 8);
  v145 = (float)*(int *)(v143 + 12) * 0.5;
  v146 = v145 / (float)v144;
  v147 = fmaxf(v170, 300.0);
  if (v147 < v145)
    v145 = v147;
  v148 = vcvtms_u32_f32(v145 / v146);
  if (v148 < v144)
    v144 = v148;
  *(_DWORD *)(v143 + 664) = v144;
  *(float *)(v143 + 668) = v168;
  *(float *)(v143 + 672) = v167;
  *(_DWORD *)v143 = (int)v164;
  if (v141 < 0)
    v149 = (int)v166;
  else
    v149 = -v141;
  *(_DWORD *)(v143 + 32) = v149;
  v150 = __exp10f((float)v149 * 0.1);
  *(float *)(v143 + 56) = v150;
  *(float *)(v143 + 60) = sqrtf(v150);
  v151 = *((_QWORD *)this + 70);
  *(float *)(v151 + 48) = v165;
  *(float *)(v151 + 52) = __exp10f(v165 * 0.1);
  *(_DWORD *)(*((_QWORD *)this + 70) + 220) = 0;
  v152 = *((_QWORD *)this + 9);
  if (v152)
  {
    v153 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v152 + 32))(v152, 0);
  }
  else
  {
    v154 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v154)
      v153 = 0;
    else
      v153 = *v154;
  }
  *(float *)(*((_QWORD *)this + 70) + 688) = ausdk::AUElement::GetParameter(v153, 0x21u);
  v155 = *((_QWORD *)this + 9);
  if (v155)
  {
    v156 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v155 + 32))(v155, 0);
  }
  else
  {
    v157 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v157)
      v156 = 0;
    else
      v156 = *v157;
  }
  v158 = ausdk::AUElement::GetParameter(v156, 0x22u);
  v159 = *((_QWORD *)this + 70);
  *(float *)(v159 + 680) = 1.0
                         - expf(-1.0 / (float)(v158 * (float)((float)*(int *)(v159 + 12) / (float)*(int *)(v159 + 8))));
  v160 = *((_QWORD *)this + 9);
  if (v160)
  {
    v161 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v160 + 32))(v160, 0);
  }
  else
  {
    v162 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v162)
      v161 = 0;
    else
      v161 = *v162;
  }
  v163 = ausdk::AUElement::GetParameter(v161, 0x24u);
  result = 0;
  *(_DWORD *)(*((_QWORD *)this + 71) + 8) = (int)v163;
  return result;
}

void AUResidualEchoSuppressorV4::Cleanup(AUResidualEchoSuppressorV4 *this)
{
  uint64_t v2;
  void *v3;

  v2 = *((_QWORD *)this + 70);
  if (v2)
  {
    CResidualSuppressorV3::speex_preprocess_state_res_destroy(v2);
    *((_QWORD *)this + 70) = 0;
  }
  v3 = (void *)*((_QWORD *)this + 71);
  if (v3)
  {
    free(v3);
    *((_QWORD *)this + 71) = 0;
  }
}

uint64_t AUResidualEchoSuppressorV4::Reset(AUResidualEchoSuppressorV4 *this)
{
  return 0;
}

uint64_t AUResidualEchoSuppressorV4::GetPropertyInfo(AUResidualEchoSuppressorV4 *this, int a2, int a3, unsigned int a4, unsigned int *a5, BOOL *a6)
{
  uint64_t result;
  BOOL v7;

  if (a3)
    return 4294956417;
  if (a2 == 21)
  {
    v7 = 1;
  }
  else
  {
    if (a2 != 3700)
      return 4294956417;
    v7 = 0;
  }
  result = 0;
  *a6 = v7;
  *a5 = 4;
  return result;
}

uint64_t AUResidualEchoSuppressorV4::GetProperty(AUResidualEchoSuppressorV4 *this, int a2, int a3, unsigned int a4, _DWORD *a5)
{
  uint64_t result;
  int v7;

  if (a3)
    return 4294956417;
  if (a2 == 3700)
  {
    v7 = *((unsigned __int8 *)this + 376);
    goto LABEL_7;
  }
  if (a2 == 21)
  {
    v7 = (*(uint64_t (**)(AUResidualEchoSuppressorV4 *))(*(_QWORD *)this + 576))(this);
LABEL_7:
    result = 0;
    *a5 = v7;
    return result;
  }
  return 4294956417;
}

uint64_t AUResidualEchoSuppressorV4::SetProperty(AUResidualEchoSuppressorV4 *this, int a2, int a3, unsigned int a4, int *a5, unsigned int a6)
{
  uint64_t result;
  int v8;
  int v9;

  result = 4294956417;
  if (a2 == 21 && !a3)
  {
    if (a6 >= 4)
    {
      v8 = *a5;
      v9 = *a5 != 0;
      if (v9 != (*(unsigned int (**)(AUResidualEchoSuppressorV4 *))(*(_QWORD *)this + 576))(this))
        (*(void (**)(AUResidualEchoSuppressorV4 *, BOOL))(*(_QWORD *)this + 584))(this, v8 != 0);
      return 0;
    }
    else
    {
      return 4294956445;
    }
  }
  return result;
}

uint64_t AUResidualEchoSuppressorV4::SetParameter(AUResidualEchoSuppressorV4 *this, unsigned int a2, unsigned int a3, unsigned int a4, float a5)
{
  uint64_t v9;
  ausdk::AUElement *v10;
  ausdk::AUElement **v11;
  ausdk::AUScope *Scope;
  ausdk::AUElement *Element;

  if (a2 <= 0x24 && ((1 << a2) & 0x16FFFFDF27) != 0)
  {
    v9 = *((_QWORD *)this + 9);
    if (v9)
    {
      v10 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v9 + 32))(v9, 0);
    }
    else
    {
      v11 = (ausdk::AUElement **)*((_QWORD *)this + 6);
      if (*((ausdk::AUElement ***)this + 7) == v11)
        v10 = 0;
      else
        v10 = *v11;
    }
    ausdk::AUElement::SetParameter(v10, a2, a5, 0);
    ++*((_DWORD *)this + 133);
  }
  else
  {
    Scope = (ausdk::AUScope *)ausdk::AUBase::GetScope(this, a3);
    Element = (ausdk::AUElement *)ausdk::AUScope::SafeGetElement(Scope, a4);
    ausdk::AUElement::SetParameter(Element, a2, a5, 0);
  }
  return 0;
}

uint64_t AUResidualEchoSuppressorV4::CanScheduleParameters(AUResidualEchoSuppressorV4 *this)
{
  return 0;
}

uint64_t AUResidualEchoSuppressorV4::ProcessMultipleBufferLists(AUResidualEchoSuppressorV4 *this, unsigned int *a2, int a3, unsigned int a4, const AudioBufferList **a5, unsigned int a6, AudioBufferList **a7)
{
  AudioBufferList *v10;
  unsigned int mDataByteSize;
  uint64_t v12;
  uint64_t v13;
  ausdk::AUElement *v14;
  ausdk::AUElement **v15;
  float Parameter;
  uint64_t v17;
  ausdk::AUElement *v18;
  ausdk::AUElement **v19;
  float v20;
  uint64_t v21;
  ausdk::AUElement *v22;
  ausdk::AUElement **v23;
  float v24;
  uint64_t v25;
  ausdk::AUElement *v26;
  ausdk::AUElement **v27;
  float v28;
  uint64_t v29;
  ausdk::AUElement *v30;
  ausdk::AUElement **v31;
  float v32;
  uint64_t v33;
  ausdk::AUElement *v34;
  ausdk::AUElement **v35;
  float v36;
  uint64_t v37;
  ausdk::AUElement *v38;
  ausdk::AUElement **v39;
  uint64_t v40;
  ausdk::AUElement *v41;
  ausdk::AUElement **v42;
  uint64_t v43;
  ausdk::AUElement *v44;
  ausdk::AUElement **v45;
  uint64_t v46;
  ausdk::AUElement *v47;
  ausdk::AUElement **v48;
  uint64_t v49;
  ausdk::AUElement *v50;
  ausdk::AUElement **v51;
  uint64_t v52;
  ausdk::AUElement *v53;
  ausdk::AUElement **v54;
  uint64_t v55;
  ausdk::AUElement *v56;
  ausdk::AUElement **v57;
  uint64_t v58;
  ausdk::AUElement *v59;
  ausdk::AUElement **v60;
  uint64_t v61;
  ausdk::AUElement *v62;
  ausdk::AUElement **v63;
  uint64_t v64;
  ausdk::AUElement *v65;
  ausdk::AUElement **v66;
  float v67;
  uint64_t v68;
  ausdk::AUElement *v69;
  ausdk::AUElement **v70;
  uint64_t v71;
  ausdk::AUElement *v72;
  ausdk::AUElement **v73;
  uint64_t v74;
  ausdk::AUElement *v75;
  ausdk::AUElement **v76;
  int v77;
  int v78;
  float v79;
  uint64_t v80;
  ausdk::AUElement *v81;
  ausdk::AUElement **v82;
  float v83;
  uint64_t v84;
  uint64_t v85;
  ausdk::AUElement *v86;
  ausdk::AUElement **v87;
  uint64_t v88;
  ausdk::AUElement *v89;
  ausdk::AUElement **v90;
  uint64_t v91;
  ausdk::AUElement *v92;
  ausdk::AUElement **v93;
  uint64_t v94;
  ausdk::AUElement *v95;
  ausdk::AUElement **v96;
  float v97;
  uint64_t v98;
  ausdk::AUElement *v99;
  ausdk::AUElement **v100;
  unsigned int v101;
  unsigned int v102;
  unsigned int v103;
  int v104;
  int v105;
  uint64_t v106;
  ausdk::AUElement *v107;
  ausdk::AUElement **v108;
  float v109;
  float v110;
  float v111;
  float v112;
  float v113;
  float v114;
  float v115;
  float v116;
  uint64_t v117;
  unsigned int v118;
  float v119;
  float v120;
  float v121;
  unsigned int v122;
  int v123;
  float v124;
  uint64_t v125;
  float v126;
  uint64_t v127;
  ausdk::AUElement *v128;
  ausdk::AUElement **v129;
  uint64_t v130;
  ausdk::AUElement *v131;
  ausdk::AUElement **v132;
  float v133;
  uint64_t v134;
  uint64_t v135;
  ausdk::AUElement *v136;
  ausdk::AUElement **v137;
  _DWORD *v138;
  uint64_t v139;
  ausdk::AUElement *v140;
  ausdk::AUElement **v141;
  float v142;
  uint64_t v143;
  ausdk::AUElement *v144;
  ausdk::AUElement **v145;
  int v146;
  float v147;
  uint64_t v148;
  ausdk::AUElement *v149;
  ausdk::AUElement **v150;
  float v151;
  uint64_t v152;
  int v153;
  uint64_t v154;
  float *mData;
  float *v156;
  float *v157;
  float *v158;
  const AudioBufferList *v159;
  uint64_t v160;
  const AudioBufferList *v161;
  uint64_t v162;
  float *v163;
  _BOOL4 v166;
  uint64_t v167;
  const void *v168;
  const void *v169;
  char *v170;
  uint64_t v171;
  char *v172;
  uint64_t v173;
  char *v174;
  const void *v175;
  uint64_t v176;
  const void *v177;
  const void *v178;
  char *v179;
  uint64_t v180;
  char *v181;
  void *v182;
  uint64_t v183;
  const void *v184;
  size_t v185;
  AudioBufferList *v186;
  unsigned int v187;
  uint64_t v188;
  ausdk::AUElement *v189;
  ausdk::AUElement **v190;
  uint64_t v191;
  uint64_t v192;
  ausdk::AUElement *v193;
  ausdk::AUElement **v194;
  float v196;
  float v197;
  float v198;
  float v199;
  float v200;
  float v201;
  float v202;
  float v203;
  float v204;
  float v205;
  float v206;
  float v207;
  float v208;
  float v209;
  float v210;
  int v211;
  float *v212[2];
  float *v213[2];
  float *v214[4];

  v214[2] = *(float **)MEMORY[0x1E0C80C00];
  if (*((_DWORD *)this + 84) != a3)
    return 4294956422;
  if ((*(unsigned int (**)(AUResidualEchoSuppressorV4 *, unsigned int *))(*(_QWORD *)this + 576))(this, a2))
  {
    v10 = a7[1];
    mDataByteSize = v10->mBuffers[0].mDataByteSize;
    if (mDataByteSize >= 4)
      memset_pattern16(v10->mBuffers[0].mData, &unk_1B6627B80, mDataByteSize & 0xFFFFFFFC);
    if (*((unsigned __int8 *)this + 540) == *((unsigned __int8 *)this + 545))
      memcpy((*a7)->mBuffers[0].mData, (*a5)->mBuffers[0].mData, (*a7)->mBuffers[0].mDataByteSize);
    else
      bzero((*a7)->mBuffers[0].mData, (*a7)->mBuffers[0].mDataByteSize);
    return 0;
  }
  if (*((_DWORD *)this + 133) != *((_DWORD *)this + 134))
  {
    v211 = *((_DWORD *)this + 133);
    v13 = *((_QWORD *)this + 9);
    if (v13)
    {
      v14 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v13 + 32))(v13, 0);
    }
    else
    {
      v15 = (ausdk::AUElement **)*((_QWORD *)this + 6);
      if (*((ausdk::AUElement ***)this + 7) == v15)
        v14 = 0;
      else
        v14 = *v15;
    }
    Parameter = ausdk::AUElement::GetParameter(v14, 1u);
    v17 = *((_QWORD *)this + 9);
    if (v17)
    {
      v18 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v17 + 32))(v17, 0);
    }
    else
    {
      v19 = (ausdk::AUElement **)*((_QWORD *)this + 6);
      if (*((ausdk::AUElement ***)this + 7) == v19)
        v18 = 0;
      else
        v18 = *v19;
    }
    v20 = ausdk::AUElement::GetParameter(v18, 2u);
    v21 = *((_QWORD *)this + 9);
    if (v21)
    {
      v22 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v21 + 32))(v21, 0);
    }
    else
    {
      v23 = (ausdk::AUElement **)*((_QWORD *)this + 6);
      if (*((ausdk::AUElement ***)this + 7) == v23)
        v22 = 0;
      else
        v22 = *v23;
    }
    v24 = ausdk::AUElement::GetParameter(v22, 8u);
    v25 = *((_QWORD *)this + 9);
    if (v25)
    {
      v26 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v25 + 32))(v25, 0);
    }
    else
    {
      v27 = (ausdk::AUElement **)*((_QWORD *)this + 6);
      if (*((ausdk::AUElement ***)this + 7) == v27)
        v26 = 0;
      else
        v26 = *v27;
    }
    v28 = ausdk::AUElement::GetParameter(v26, 9u);
    v29 = *((_QWORD *)this + 9);
    if (v29)
    {
      v30 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v29 + 32))(v29, 0);
    }
    else
    {
      v31 = (ausdk::AUElement **)*((_QWORD *)this + 6);
      if (*((ausdk::AUElement ***)this + 7) == v31)
        v30 = 0;
      else
        v30 = *v31;
    }
    v32 = ausdk::AUElement::GetParameter(v30, 0xAu);
    v33 = *((_QWORD *)this + 9);
    if (v33)
    {
      v34 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v33 + 32))(v33, 0);
    }
    else
    {
      v35 = (ausdk::AUElement **)*((_QWORD *)this + 6);
      if (*((ausdk::AUElement ***)this + 7) == v35)
        v34 = 0;
      else
        v34 = *v35;
    }
    v36 = ausdk::AUElement::GetParameter(v34, 0xBu);
    v37 = *((_QWORD *)this + 9);
    if (v37)
    {
      v38 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v37 + 32))(v37, 0);
    }
    else
    {
      v39 = (ausdk::AUElement **)*((_QWORD *)this + 6);
      if (*((ausdk::AUElement ***)this + 7) == v39)
        v38 = 0;
      else
        v38 = *v39;
    }
    v209 = ausdk::AUElement::GetParameter(v38, 0xCu);
    v40 = *((_QWORD *)this + 9);
    if (v40)
    {
      v41 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v40 + 32))(v40, 0);
    }
    else
    {
      v42 = (ausdk::AUElement **)*((_QWORD *)this + 6);
      if (*((ausdk::AUElement ***)this + 7) == v42)
        v41 = 0;
      else
        v41 = *v42;
    }
    v210 = ausdk::AUElement::GetParameter(v41, 0xDu);
    v43 = *((_QWORD *)this + 9);
    if (v43)
    {
      v44 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v43 + 32))(v43, 0);
    }
    else
    {
      v45 = (ausdk::AUElement **)*((_QWORD *)this + 6);
      if (*((ausdk::AUElement ***)this + 7) == v45)
        v44 = 0;
      else
        v44 = *v45;
    }
    v208 = ausdk::AUElement::GetParameter(v44, 0xEu);
    v46 = *((_QWORD *)this + 9);
    if (v46)
    {
      v47 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v46 + 32))(v46, 0);
    }
    else
    {
      v48 = (ausdk::AUElement **)*((_QWORD *)this + 6);
      if (*((ausdk::AUElement ***)this + 7) == v48)
        v47 = 0;
      else
        v47 = *v48;
    }
    v207 = ausdk::AUElement::GetParameter(v47, 0xFu);
    v49 = *((_QWORD *)this + 9);
    if (v49)
    {
      v50 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v49 + 32))(v49, 0);
    }
    else
    {
      v51 = (ausdk::AUElement **)*((_QWORD *)this + 6);
      if (*((ausdk::AUElement ***)this + 7) == v51)
        v50 = 0;
      else
        v50 = *v51;
    }
    v206 = ausdk::AUElement::GetParameter(v50, 0x10u);
    v52 = *((_QWORD *)this + 9);
    if (v52)
    {
      v53 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v52 + 32))(v52, 0);
    }
    else
    {
      v54 = (ausdk::AUElement **)*((_QWORD *)this + 6);
      if (*((ausdk::AUElement ***)this + 7) == v54)
        v53 = 0;
      else
        v53 = *v54;
    }
    v205 = ausdk::AUElement::GetParameter(v53, 0x11u);
    v55 = *((_QWORD *)this + 9);
    if (v55)
    {
      v56 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v55 + 32))(v55, 0);
    }
    else
    {
      v57 = (ausdk::AUElement **)*((_QWORD *)this + 6);
      if (*((ausdk::AUElement ***)this + 7) == v57)
        v56 = 0;
      else
        v56 = *v57;
    }
    v204 = ausdk::AUElement::GetParameter(v56, 0x12u);
    v58 = *((_QWORD *)this + 9);
    if (v58)
    {
      v59 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v58 + 32))(v58, 0);
    }
    else
    {
      v60 = (ausdk::AUElement **)*((_QWORD *)this + 6);
      if (*((ausdk::AUElement ***)this + 7) == v60)
        v59 = 0;
      else
        v59 = *v60;
    }
    v203 = ausdk::AUElement::GetParameter(v59, 0x13u);
    v61 = *((_QWORD *)this + 9);
    if (v61)
    {
      v62 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v61 + 32))(v61, 0);
    }
    else
    {
      v63 = (ausdk::AUElement **)*((_QWORD *)this + 6);
      if (*((ausdk::AUElement ***)this + 7) == v63)
        v62 = 0;
      else
        v62 = *v63;
    }
    v202 = ausdk::AUElement::GetParameter(v62, 0x14u);
    v64 = *((_QWORD *)this + 9);
    if (v64)
    {
      v65 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v64 + 32))(v64, 0);
    }
    else
    {
      v66 = (ausdk::AUElement **)*((_QWORD *)this + 6);
      if (*((ausdk::AUElement ***)this + 7) == v66)
        v65 = 0;
      else
        v65 = *v66;
    }
    v67 = ausdk::AUElement::GetParameter(v65, 0x15u);
    v68 = *((_QWORD *)this + 9);
    if (v68)
    {
      v69 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v68 + 32))(v68, 0);
    }
    else
    {
      v70 = (ausdk::AUElement **)*((_QWORD *)this + 6);
      if (*((ausdk::AUElement ***)this + 7) == v70)
        v69 = 0;
      else
        v69 = *v70;
    }
    v201 = ausdk::AUElement::GetParameter(v69, 0x16u);
    v71 = *((_QWORD *)this + 9);
    if (v71)
    {
      v72 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v71 + 32))(v71, 0);
    }
    else
    {
      v73 = (ausdk::AUElement **)*((_QWORD *)this + 6);
      if (*((ausdk::AUElement ***)this + 7) == v73)
        v72 = 0;
      else
        v72 = *v73;
    }
    v200 = ausdk::AUElement::GetParameter(v72, 0x17u);
    v74 = *((_QWORD *)this + 9);
    if (v74)
    {
      v75 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v74 + 32))(v74, 0);
    }
    else
    {
      v76 = (ausdk::AUElement **)*((_QWORD *)this + 6);
      if (*((ausdk::AUElement ***)this + 7) == v76)
        v75 = 0;
      else
        v75 = *v76;
    }
    v77 = (int)Parameter;
    v78 = (int)v20;
    v79 = ausdk::AUElement::GetParameter(v75, 0x18u);
    v80 = *((_QWORD *)this + 9);
    if (v80)
    {
      v81 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v80 + 32))(v80, 0);
    }
    else
    {
      v82 = (ausdk::AUElement **)*((_QWORD *)this + 6);
      if (*((ausdk::AUElement ***)this + 7) == v82)
        v81 = 0;
      else
        v81 = *v82;
    }
    v83 = ausdk::AUElement::GetParameter(v81, 0x19u);
    v84 = *((_QWORD *)this + 70);
    *(int32x2_t *)(v84 + 36) = vneg_s32(vabs_s32((int32x2_t)__PAIR64__(v78, v77)));
    *(_DWORD *)(v84 + 44) = v24;
    v85 = *((_QWORD *)this + 9);
    if (v85)
    {
      v86 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v85 + 32))(v85, 0);
    }
    else
    {
      v87 = (ausdk::AUElement **)*((_QWORD *)this + 6);
      if (*((ausdk::AUElement ***)this + 7) == v87)
        v86 = 0;
      else
        v86 = *v87;
    }
    v199 = ausdk::AUElement::GetParameter(v86, 0x1Au);
    v88 = *((_QWORD *)this + 9);
    if (v88)
    {
      v89 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v88 + 32))(v88, 0);
    }
    else
    {
      v90 = (ausdk::AUElement **)*((_QWORD *)this + 6);
      if (*((ausdk::AUElement ***)this + 7) == v90)
        v89 = 0;
      else
        v89 = *v90;
    }
    v198 = ausdk::AUElement::GetParameter(v89, 0x1Bu);
    v91 = *((_QWORD *)this + 9);
    if (v91)
    {
      v92 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v91 + 32))(v91, 0);
    }
    else
    {
      v93 = (ausdk::AUElement **)*((_QWORD *)this + 6);
      if (*((ausdk::AUElement ***)this + 7) == v93)
        v92 = 0;
      else
        v92 = *v93;
    }
    v197 = ausdk::AUElement::GetParameter(v92, 0x1Cu);
    v94 = *((_QWORD *)this + 9);
    if (v94)
    {
      v95 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v94 + 32))(v94, 0);
    }
    else
    {
      v96 = (ausdk::AUElement **)*((_QWORD *)this + 6);
      if (*((ausdk::AUElement ***)this + 7) == v96)
        v95 = 0;
      else
        v95 = *v96;
    }
    v97 = ausdk::AUElement::GetParameter(v95, 0x1Eu);
    v98 = *((_QWORD *)this + 9);
    if (v98)
    {
      v99 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v98 + 32))(v98, 0);
    }
    else
    {
      v100 = (ausdk::AUElement **)*((_QWORD *)this + 6);
      if (*((ausdk::AUElement ***)this + 7) == v100)
        v99 = 0;
      else
        v99 = *v100;
    }
    v101 = v28;
    v102 = v79;
    v103 = v83;
    v104 = (int)v97;
    v105 = (int)ausdk::AUElement::GetParameter(v99, 0x1Du);
    v106 = *((_QWORD *)this + 9);
    if (v106)
    {
      v107 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v106 + 32))(v106, 0);
    }
    else
    {
      v108 = (ausdk::AUElement **)*((_QWORD *)this + 6);
      if (*((ausdk::AUElement ***)this + 7) == v108)
        v107 = 0;
      else
        v107 = *v108;
    }
    v196 = ausdk::AUElement::GetParameter(v107, 0x1Fu);
    v109 = __exp10f(v32 / 10.0);
    v110 = __exp10f(v36 / 10.0);
    v111 = __exp10f(v209 / 10.0);
    v112 = __exp10f(v206 / 10.0);
    v113 = __exp10f(v205 / 10.0);
    v114 = __exp10f(v204 / 10.0);
    v115 = __exp10f(v203 / 10.0);
    v116 = __exp10f(v202 / 10.0);
    v117 = *((_QWORD *)this + 70);
    *(_DWORD *)(v117 + 496) = v101;
    *(float *)(v117 + 500) = v109;
    *(float *)(v117 + 504) = v110;
    *(float *)(v117 + 508) = v111;
    *(float *)(v117 + 556) = v210;
    *(float *)(v117 + 512) = v208;
    *(float *)(v117 + 516) = v207;
    *(float *)(v117 + 520) = v112;
    *(float *)(v117 + 524) = v113;
    *(float *)(v117 + 528) = v114;
    *(float *)(v117 + 532) = v115;
    *(float *)(v117 + 536) = v116;
    *(_DWORD *)(v117 + 540) = v67;
    *(float *)(v117 + 548) = v201;
    *(float *)(v117 + 552) = v200;
    *(_DWORD *)(v117 + 572) = v102;
    *(_DWORD *)(v117 + 576) = v103;
    v118 = (float)*(int *)(v117 + 8);
    v119 = (float)*(int *)(v117 + 12) * 0.5;
    v120 = v119 / (float)v118;
    v121 = fmaxf(v199, 300.0);
    if (v121 < v119)
      v119 = v121;
    v122 = vcvtms_u32_f32(v119 / v120);
    if (v122 < v118)
      v118 = v122;
    *(_DWORD *)(v117 + 664) = v118;
    *(float *)(v117 + 668) = v198;
    *(float *)(v117 + 672) = v197;
    *(_DWORD *)v117 = v105;
    if (v104 < 0)
      v123 = v104;
    else
      v123 = -v104;
    *(_DWORD *)(v117 + 32) = v123;
    v124 = __exp10f((float)v123 * 0.1);
    *(float *)(v117 + 56) = v124;
    *(float *)(v117 + 60) = sqrtf(v124);
    v125 = *((_QWORD *)this + 70);
    v126 = v196;
    *(float *)(v125 + 48) = v196;
    *(float *)(v125 + 52) = __exp10f(v126 * 0.1);
    v127 = *((_QWORD *)this + 9);
    if (v127)
    {
      v128 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v127 + 32))(v127, 0);
    }
    else
    {
      v129 = (ausdk::AUElement **)*((_QWORD *)this + 6);
      if (*((ausdk::AUElement ***)this + 7) == v129)
        v128 = 0;
      else
        v128 = *v129;
    }
    *(float *)(*((_QWORD *)this + 70) + 688) = ausdk::AUElement::GetParameter(v128, 0x21u);
    v130 = *((_QWORD *)this + 9);
    if (v130)
    {
      v131 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v130 + 32))(v130, 0);
    }
    else
    {
      v132 = (ausdk::AUElement **)*((_QWORD *)this + 6);
      if (*((ausdk::AUElement ***)this + 7) == v132)
        v131 = 0;
      else
        v131 = *v132;
    }
    v133 = ausdk::AUElement::GetParameter(v131, 0x22u);
    v134 = *((_QWORD *)this + 70);
    *(float *)(v134 + 680) = 1.0
                           - expf(-1.0 / (float)(v133 * (float)((float)*(int *)(v134 + 12) / (float)*(int *)(v134 + 8))));
    v135 = *((_QWORD *)this + 9);
    if (v135)
    {
      v136 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v135 + 32))(v135, 0);
    }
    else
    {
      v137 = (ausdk::AUElement **)*((_QWORD *)this + 6);
      if (*((ausdk::AUElement ***)this + 7) == v137)
        v136 = 0;
      else
        v136 = *v137;
    }
    *(_DWORD *)(*((_QWORD *)this + 71) + 8) = (int)ausdk::AUElement::GetParameter(v136, 0x24u);
    v138 = (_DWORD *)*((_QWORD *)this + 70);
    if (!*v138)
      v138[169] = 0;
    *((_DWORD *)this + 134) = v211;
  }
  v139 = *((_QWORD *)this + 9);
  if (v139)
  {
    v140 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v139 + 32))(v139, 0);
  }
  else
  {
    v141 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v141)
      v140 = 0;
    else
      v140 = *v141;
  }
  v142 = ausdk::AUElement::GetParameter(v140, 6u);
  v143 = *((_QWORD *)this + 9);
  if (v143)
  {
    v144 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v143 + 32))(v143, 0);
  }
  else
  {
    v145 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v145)
      v144 = 0;
    else
      v144 = *v145;
  }
  v146 = (int)v142;
  v147 = ausdk::AUElement::GetParameter(v144, 7u);
  v148 = *((_QWORD *)this + 9);
  if (v148)
  {
    v149 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v148 + 32))(v148, 0);
  }
  else
  {
    v150 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v150)
      v149 = 0;
    else
      v149 = *v150;
  }
  v151 = ausdk::AUElement::GetParameter(v149, 0xDu);
  v152 = *((_QWORD *)this + 70);
  *(_DWORD *)(v152 + 488) = v146;
  *(float *)(v152 + 492) = v147;
  *(float *)(v152 + 556) = v151;
  v153 = *(_DWORD *)v152;
  v154 = *((unsigned int *)this + 84);
  if (*(int *)v152 >= 2)
  {
    mData = 0;
    v156 = 0;
    v157 = 0;
    v158 = 0;
  }
  else
  {
    mData = (float *)a5[1]->mBuffers[0].mData;
    v156 = &mData[v154];
    v157 = (float *)a5[2]->mBuffers[0].mData;
    v158 = &v157[v154];
  }
  v159 = a5[3];
  if (v159)
    v160 = (uint64_t)v159->mBuffers[0].mData;
  else
    v160 = 0;
  v161 = a5[4];
  if (v161)
    v162 = (uint64_t)v161->mBuffers[0].mData;
  else
    v162 = 0;
  v163 = (float *)(*a5)->mBuffers[0].mData;
  v214[0] = mData;
  v214[1] = v156;
  v213[0] = v157;
  v213[1] = v158;
  v166 = v153 < 2 && mData != 0 && v157 != 0;
  if ((v153 > 1 || v166) && *((_BYTE *)this + 541))
  {
    if (*((_BYTE *)this + 542) && *((_BYTE *)this + 540) && v163)
    {
      v212[0] = v163;
      v212[1] = &v163[v154];
      CResidualSuppressorV4::speex_preprocess_run_freq(v152, v212, v214, v213, v160, *((float **)this + 71), v162);
      if (*((_BYTE *)this + 545))
      {
        v167 = *((_QWORD *)this + 70);
        v168 = *(const void **)(v167 + 344);
        v169 = *(const void **)(v167 + 352);
        v170 = (char *)(*a7)->mBuffers[0].mData;
        v171 = *((unsigned int *)this + 84);
        v172 = &v170[4 * v171];
        memcpy(v170, v168, 4 * v171);
        memcpy(v172, v169, 4 * *((unsigned int *)this + 84));
        memcpy(a7[1]->mBuffers[0].mData, *(const void **)(*((_QWORD *)this + 70) + 112), 4 * *(int *)(*((_QWORD *)this + 70) + 8));
      }
      goto LABEL_215;
    }
    v12 = 0xFFFFFFFFLL;
    if (*((_BYTE *)this + 542) && !*((_BYTE *)this + 540) && v163)
    {
      MEMORY[0x1E0C80A78](v152);
      v174 = (char *)&v196 - ((v173 + 15) & 0x7FFFFFFF0);
      memcpy(v174, v175, 4 * *((unsigned int *)this + 84));
      CResidualSuppressorV4::speex_preprocess_run(*((_QWORD *)this + 70), v174, v214, v213, v160, *((float **)this + 71), v162);
      if (*((_BYTE *)this + 545))
      {
        v176 = *((_QWORD *)this + 70);
        v177 = *(const void **)(v176 + 344);
        v178 = *(const void **)(v176 + 352);
        v179 = (char *)(*a7)->mBuffers[0].mData;
        v180 = *((unsigned int *)this + 84);
        v181 = &v179[4 * v180];
        memcpy(v179, v177, 4 * v180);
        memcpy(v181, v178, 4 * *((unsigned int *)this + 84));
        v182 = a7[1]->mBuffers[0].mData;
        v183 = *((_QWORD *)this + 70);
        v184 = *(const void **)(v183 + 112);
        v185 = 4 * *(int *)(v183 + 8);
      }
      else
      {
        v182 = (*a7)->mBuffers[0].mData;
        v185 = 4 * *((unsigned int *)this + 84);
        v184 = v174;
      }
      memcpy(v182, v184, v185);
LABEL_215:
      if (*((_DWORD *)this + 138) == 2)
      {
        v186 = a7[1];
        v187 = v186->mBuffers[0].mDataByteSize;
        if (v187 >= 4)
          memset_pattern16(v186->mBuffers[0].mData, &unk_1B6627B80, v187 & 0xFFFFFFFC);
      }
      v12 = 0;
    }
  }
  else
  {
    v12 = 0xFFFFFFFFLL;
  }
  v188 = *((_QWORD *)this + 9);
  if (v188)
  {
    v189 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v188 + 32))(v188, 0);
  }
  else
  {
    v190 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v190)
      v189 = 0;
    else
      v189 = *v190;
  }
  ausdk::AUElement::SetParameter(v189, 0x20u, *(float *)(*((_QWORD *)this + 70) + 220), 0);
  v191 = *((_QWORD *)this + 70);
  if (*(int *)v191 >= 1)
  {
    v192 = *((_QWORD *)this + 9);
    if (v192)
    {
      v193 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v192 + 32))(v192, 0);
      v191 = *((_QWORD *)this + 70);
    }
    else
    {
      v194 = (ausdk::AUElement **)*((_QWORD *)this + 6);
      if (*((ausdk::AUElement ***)this + 7) == v194)
        v193 = 0;
      else
        v193 = *v194;
    }
    ausdk::AUElement::SetParameter(v193, 0x23u, *(float *)(v191 + 676), 0);
  }
  return v12;
}

uint64_t AUResidualEchoSuppressorV4::Render(AUResidualEchoSuppressorV4 *this, unsigned int *a2, const AudioTimeStamp *a3, uint64_t a4)
{
  uint64_t Element;
  ausdk::AUInputElement *v9;
  uint64_t v10;
  ausdk::AUInputElement *v11;
  uint64_t v12;
  uint64_t BufferList;
  uint64_t v15;
  uint64_t v16;
  ausdk::AUInputElement *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  ausdk::AUInputElement *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  ausdk::AUInputElement *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD v34[6];

  v34[5] = *MEMORY[0x1E0C80C00];
  if (*((_DWORD *)this + 84) != (_DWORD)a4)
    return 4294956422;
  if (!ausdk::AUBase::HasInput(this, 0))
    return 4294956420;
  Element = ausdk::AUScope::SafeGetElement((AUResidualEchoSuppressorV4 *)((char *)this + 128), 0);
  v9 = (ausdk::AUInputElement *)ausdk::AUScope::SafeGetElement((AUResidualEchoSuppressorV4 *)((char *)this + 80), 0);
  v10 = ausdk::AUInputElement::PullInput(v9, a2, a3, 0, a4);
  if (!(_DWORD)v10)
  {
    if (ausdk::AUBase::HasInput(this, 1u))
    {
      v11 = (ausdk::AUInputElement *)ausdk::AUScope::SafeGetElement((AUResidualEchoSuppressorV4 *)((char *)this + 80), 1u);
      v10 = ausdk::AUInputElement::PullInput(v11, a2, a3, 1, a4);
      v12 = ausdk::AUScope::SafeGetElement((AUResidualEchoSuppressorV4 *)((char *)this + 80), 1u);
      BufferList = ausdk::AUBufferList::GetBufferList((ausdk::AUBufferList *)(v12 + 144));
      if ((_DWORD)v10)
        return v10;
    }
    else
    {
      v15 = ausdk::AUScope::SafeGetElement((AUResidualEchoSuppressorV4 *)((char *)this + 80), 0);
      BufferList = ausdk::AUBufferList::GetBufferList((ausdk::AUBufferList *)(v15 + 144));
    }
    v16 = BufferList;
    if (ausdk::AUBase::HasInput(this, 2u))
    {
      v17 = (ausdk::AUInputElement *)ausdk::AUScope::SafeGetElement((AUResidualEchoSuppressorV4 *)((char *)this + 80), 2u);
      v10 = ausdk::AUInputElement::PullInput(v17, a2, a3, 2, a4);
      v18 = ausdk::AUScope::SafeGetElement((AUResidualEchoSuppressorV4 *)((char *)this + 80), 2u);
      v19 = ausdk::AUBufferList::GetBufferList((ausdk::AUBufferList *)(v18 + 144));
      if ((_DWORD)v10)
        return v10;
    }
    else
    {
      v20 = ausdk::AUScope::SafeGetElement((AUResidualEchoSuppressorV4 *)((char *)this + 80), 0);
      v19 = ausdk::AUBufferList::GetBufferList((ausdk::AUBufferList *)(v20 + 144));
    }
    v21 = v19;
    if (ausdk::AUBase::HasInput(this, 3u))
    {
      v22 = (ausdk::AUInputElement *)ausdk::AUScope::SafeGetElement((AUResidualEchoSuppressorV4 *)((char *)this + 80), 3u);
      v10 = ausdk::AUInputElement::PullInput(v22, a2, a3, 3, a4);
      v23 = ausdk::AUScope::SafeGetElement((AUResidualEchoSuppressorV4 *)((char *)this + 80), 3u);
      v24 = ausdk::AUBufferList::GetBufferList((ausdk::AUBufferList *)(v23 + 144));
      if ((_DWORD)v10)
        return v10;
    }
    else
    {
      v25 = ausdk::AUScope::SafeGetElement((AUResidualEchoSuppressorV4 *)((char *)this + 80), 0);
      v24 = ausdk::AUBufferList::GetBufferList((ausdk::AUBufferList *)(v25 + 144));
    }
    v26 = v24;
    if (!ausdk::AUBase::HasInput(this, 4u))
    {
      v30 = ausdk::AUScope::SafeGetElement((AUResidualEchoSuppressorV4 *)((char *)this + 80), 0);
      v29 = ausdk::AUBufferList::GetBufferList((ausdk::AUBufferList *)(v30 + 144));
LABEL_23:
      v31 = v29;
      v32 = ausdk::AUScope::SafeGetElement((AUResidualEchoSuppressorV4 *)((char *)this + 80), 0);
      v34[0] = ausdk::AUBufferList::GetBufferList((ausdk::AUBufferList *)(v32 + 144));
      v34[1] = v16;
      v34[2] = v21;
      v34[3] = v26;
      v34[4] = v31;
      v33 = ausdk::AUBufferList::GetBufferList((ausdk::AUBufferList *)(Element + 144));
      return (*(uint64_t (**)(AUResidualEchoSuppressorV4 *, unsigned int *, uint64_t, uint64_t, _QWORD *, uint64_t, uint64_t *))(*(_QWORD *)this + 184))(this, a2, a4, 5, v34, 1, &v33);
    }
    v27 = (ausdk::AUInputElement *)ausdk::AUScope::SafeGetElement((AUResidualEchoSuppressorV4 *)((char *)this + 80), 4u);
    v10 = ausdk::AUInputElement::PullInput(v27, a2, a3, 4, a4);
    v28 = ausdk::AUScope::SafeGetElement((AUResidualEchoSuppressorV4 *)((char *)this + 80), 4u);
    v29 = ausdk::AUBufferList::GetBufferList((ausdk::AUBufferList *)(v28 + 144));
    if (!(_DWORD)v10)
      goto LABEL_23;
  }
  return v10;
}

BOOL AUResidualEchoSuppressorV4::BusCountWritable(AUResidualEchoSuppressorV4 *this, int a2)
{
  return (a2 - 1) < 2;
}

uint64_t AUResidualEchoSuppressorV4::GetParameterInfo(AUResidualEchoSuppressorV4 *this, int a2, unsigned int a3, AudioUnitParameterInfo *buffer)
{
  uint64_t result;
  const __CFString *v6;
  AudioUnitParameterUnit v7;
  AudioUnitParameterValue v8;
  AudioUnitParameterValue v9;
  AudioUnitParameterValue v10;
  int v11;

  buffer->unitName = 0;
  buffer->flags = 0x40000000;
  result = 4294956418;
  if (!a2 && a3 <= 0x24)
  {
    v6 = off_1E69E1BF0[a3];
    v7 = dword_1B6684A24[a3];
    v8 = flt_1B6684AB8[a3];
    v9 = flt_1B6684B4C[a3];
    v10 = flt_1B6684BE0[a3];
    v11 = dword_1B6684C74[a3];
    buffer->cfNameString = v6;
    buffer->flags = 1207959552;
    CFStringGetCString(v6, buffer->name, 52, 0x8000100u);
    result = 0;
    buffer->unit = v7;
    buffer->minValue = v8;
    buffer->maxValue = v9;
    buffer->defaultValue = v10;
    buffer->flags |= v11;
  }
  return result;
}

double AUResidualEchoSuppressorV4::GetLatency(AUResidualEchoSuppressorV4 *this)
{
  return 0.0;
}

double AUResidualEchoSuppressorV4::GetTailTime(AUResidualEchoSuppressorV4 *this)
{
  return 0.0;
}

uint64_t AUResidualEchoSuppressorV4::SupportsTail(AUResidualEchoSuppressorV4 *this)
{
  return 1;
}

BOOL AUResidualEchoSuppressorV4::StreamFormatWritable(AUResidualEchoSuppressorV4 *this)
{
  return *((_BYTE *)this + 17) == 0;
}

uint64_t AUResidualEchoSuppressorV4::SupportedNumChannels(AUResidualEchoSuppressorV4 *this, const AUChannelInfo **a2)
{
  if (a2)
    *a2 = (const AUChannelInfo *)&AUResidualEchoSuppressorV4::SupportedNumChannels(AUChannelInfo const**)::sSupportedChannelConfigs;
  return 1;
}

uint64_t AUResidualEchoSuppressorV4::ValidFormat(AUResidualEchoSuppressorV4 *this, const AudioStreamBasicDescription *a2, unsigned int a3, AudioStreamBasicDescription *a4)
{
  int v6;
  uint64_t result;
  __int128 v8;
  _OWORD v9[2];
  uint64_t v10;
  int v11;

  if (a4->mChannelsPerFrame != 1)
    return 0;
  v6 = (int)a2;
  result = ausdk::ASBD::IsCommonFloat32((ausdk::ASBD *)a4, a2);
  if (v6 == 1)
  {
    if (a3 > 2 || result == 1)
      return result;
    goto LABEL_11;
  }
  if (v6 != 2)
    return result;
  if ((result & 1) != 0)
    return 1;
  result = 0;
  if (!a3)
  {
LABEL_11:
    if (a4->mFormatID == 1718773105)
    {
      v8 = *(_OWORD *)&a4->mBytesPerPacket;
      v9[0] = *(_OWORD *)&a4->mSampleRate;
      v9[1] = v8;
      v10 = *(_QWORD *)&a4->mBitsPerChannel;
      DWORD2(v9[0]) = 1819304813;
      v11 = 0;
      LODWORD(result) = CAStreamBasicDescription::IdentifyCommonPCMFormat(v9, &v11, 0);
      if (v11 == 4)
        return result;
      else
        return 0;
    }
  }
  return result;
}

uint64_t AUResidualEchoSuppressorV4::ChangeStreamFormat(AUResidualEchoSuppressorV4 *this, uint64_t a2, uint64_t a3, const AudioStreamBasicDescription *a4, const AudioStreamBasicDescription *a5)
{
  unsigned int v6;
  int v7;
  BOOL *v9;

  v6 = a3;
  v7 = a2;
  ausdk::AUBase::ChangeStreamFormat(this, a2, a3, a4, a5);
  if (v7 != 2 || v6)
  {
    if (v7 == 1 && v6 <= 2)
    {
      v9 = (BOOL *)this + v6 + 540;
      *v9 = a5->mFormatID == 1718773105;
    }
  }
  else
  {
    *((_BYTE *)this + 545) = a5->mFormatID == 1718773105;
  }
  return 0;
}

uint64_t AUResidualEchoSuppressorV4::ShouldBypassEffect(AUResidualEchoSuppressorV4 *this)
{
  return *((unsigned __int8 *)this + 528);
}

uint64_t AUResidualEchoSuppressorV4::SetBypassEffect(uint64_t this, char a2)
{
  *(_BYTE *)(this + 528) = a2;
  return this;
}

void AUEcConvergenceOversight::~AUEcConvergenceOversight(AUEcConvergenceOversight *this)
{
  AUEcConvergenceOversight::~AUEcConvergenceOversight(this);
  JUMPOUT(0x1BCC95CECLL);
}

{
  *(_QWORD *)this = &off_1E69E1D28;
  AUEcConvergenceOversight::ClearAllocations(this);
  (*(void (**)(AUEcConvergenceOversight *))(*(_QWORD *)this + 64))(this);
  std::shared_ptr<vp::services::Telephony_Utility>::~shared_ptr[abi:ne180100]((uint64_t)this + 2248);
  std::shared_ptr<vp::services::Telephony_Utility>::~shared_ptr[abi:ne180100]((uint64_t)this + 1872);
  ausdk::AUBase::~AUBase(this);
}

uint64_t AUEcConvergenceOversight::Initialize(AUEcConvergenceOversight *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t Element;
  int v8;
  unsigned int v9;
  double v10;
  double v11;

  *((_BYTE *)this + 376) = 1;
  v2 = *((_QWORD *)this + 15);
  if (v2)
    LODWORD(v3) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 24))(v2);
  else
    v3 = (*((_QWORD *)this + 13) - *((_QWORD *)this + 12)) >> 3;
  v4 = *((_QWORD *)this + 21);
  if (v4)
    LODWORD(v5) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 24))(v4);
  else
    v5 = (*((_QWORD *)this + 19) - *((_QWORD *)this + 18)) >> 3;
  if (v3 >= 2)
  {
    v6 = 1;
    while (1)
    {
      Element = ausdk::AUScope::SafeGetElement((AUEcConvergenceOversight *)((char *)this + 80), v6 - 1);
      if (*(double *)(Element + 80) != *(double *)(ausdk::AUScope::SafeGetElement((AUEcConvergenceOversight *)((char *)this + 80), v6)+ 80))return 4294956428;
      if ((_DWORD)v3 == ++v6)
      {
        v8 = *(_DWORD *)(ausdk::AUScope::SafeGetElement((AUEcConvergenceOversight *)((char *)this + 80), 0) + 108);
        if (v8 == *(_DWORD *)(ausdk::AUScope::SafeGetElement((AUEcConvergenceOversight *)((char *)this + 80), 1u) + 108)
          && (v3 < 3
           || *(_DWORD *)(ausdk::AUScope::SafeGetElement((AUEcConvergenceOversight *)((char *)this + 80), 2u) + 108)))
        {
          goto LABEL_16;
        }
        return 4294956428;
      }
    }
  }
  v8 = *(_DWORD *)(ausdk::AUScope::SafeGetElement((AUEcConvergenceOversight *)((char *)this + 80), 0) + 108);
LABEL_16:
  *((_DWORD *)this + 138) = v8;
  if (v5 >= 2)
  {
    v9 = 1;
    do
    {
      v10 = *(double *)(ausdk::AUScope::SafeGetElement((AUEcConvergenceOversight *)((char *)this + 128), v9 - 1) + 80);
      if (v10 != *(double *)(ausdk::AUScope::SafeGetElement((AUEcConvergenceOversight *)((char *)this + 128), v9) + 80))
        return 4294956428;
    }
    while ((_DWORD)v5 != ++v9);
  }
  v11 = *(double *)(ausdk::AUScope::SafeGetElement((AUEcConvergenceOversight *)((char *)this + 80), 0) + 80);
  if (v11 != *(double *)(ausdk::AUScope::SafeGetElement((AUEcConvergenceOversight *)((char *)this + 128), 0) + 80))
    return 4294956428;
  return AUEcConvergenceOversight::InitializeInternals(this);
}

uint64_t AUEcConvergenceOversight::Reset(AUEcConvergenceOversight *this)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  float __A;

  if (*((_BYTE *)this + 17))
  {
    v2 = 0;
    *(_QWORD *)((char *)this + 1132) = 0;
    *(_OWORD *)((char *)this + 1100) = 0u;
    *(_OWORD *)((char *)this + 1116) = 0u;
    *(_OWORD *)((char *)this + 1068) = 0u;
    *(_OWORD *)((char *)this + 1084) = 0u;
    *(_OWORD *)((char *)this + 1036) = 0u;
    *(_OWORD *)((char *)this + 1052) = 0u;
    *(_OWORD *)((char *)this + 1004) = 0u;
    *(_OWORD *)((char *)this + 1020) = 0u;
    *(_OWORD *)((char *)this + 972) = 0u;
    *(_OWORD *)((char *)this + 988) = 0u;
    *(_OWORD *)((char *)this + 940) = 0u;
    *(_OWORD *)((char *)this + 956) = 0u;
    do
    {
      v3 = 0;
      v4 = (_QWORD *)((char *)this + 8 * v2);
      v5 = v4[143];
      v6 = v4[149];
      v7 = v4[155];
      do
      {
        *(_DWORD *)(v5 + v3) = 0;
        *(_DWORD *)(v6 + v3) = 0;
        *(_DWORD *)(v7 + v3) = 0;
        v3 += 4;
      }
      while (v3 != 200);
      ++v2;
    }
    while (v2 != 6);
    AUEcConvergenceOversight::ResetEnergyValsAndFlags(this);
    __A = 0.0;
    vDSP_vfill(&__A, *((float **)this + 243), 1, *((int *)this + 493));
  }
  *((_BYTE *)this + 1869) = 0;
  *((_QWORD *)this + 249) = 0;
  *(_OWORD *)((char *)this + 1484) = 0u;
  *(_OWORD *)((char *)this + 1500) = 0u;
  *(_OWORD *)((char *)this + 1516) = 0u;
  *(_OWORD *)((char *)this + 1532) = 0u;
  *(_QWORD *)((char *)this + 1546) = 0;
  *(_OWORD *)((char *)this + 1556) = 0u;
  *(_OWORD *)((char *)this + 1572) = 0u;
  *(_OWORD *)((char *)this + 1588) = 0u;
  *(_OWORD *)((char *)this + 1604) = 0u;
  *(_OWORD *)((char *)this + 1620) = 0u;
  *(_OWORD *)((char *)this + 1636) = 0u;
  *(_OWORD *)((char *)this + 1652) = 0u;
  *(_OWORD *)((char *)this + 1668) = 0u;
  *(_OWORD *)((char *)this + 1684) = 0u;
  *(_OWORD *)((char *)this + 1700) = 0u;
  *(_OWORD *)((char *)this + 1716) = 0u;
  *(_OWORD *)((char *)this + 1732) = 0u;
  *(_OWORD *)((char *)this + 1748) = 0u;
  *(_OWORD *)((char *)this + 1764) = 0u;
  *(_OWORD *)((char *)this + 1780) = 0u;
  *(_OWORD *)((char *)this + 1796) = 0u;
  *(_OWORD *)((char *)this + 1812) = 0u;
  *(_QWORD *)((char *)this + 1828) = 0;
  *((_DWORD *)this + 465) = 0;
  *(_OWORD *)((char *)this + 1844) = 0u;
  return 0;
}

uint64_t AUEcConvergenceOversight::GetPropertyInfo(AUEcConvergenceOversight *this, int a2, int a3, unsigned int a4, unsigned int *a5, BOOL *a6)
{
  uint64_t result;
  BOOL v7;

  if (a3)
    return 4294956417;
  if (a2 == 21)
  {
    v7 = 1;
  }
  else
  {
    if (a2 != 3700)
      return 4294956417;
    v7 = 0;
  }
  result = 0;
  *a6 = v7;
  *a5 = 4;
  return result;
}

uint64_t AUEcConvergenceOversight::GetProperty(AUEcConvergenceOversight *this, int a2, int a3, unsigned int a4, _DWORD *a5)
{
  uint64_t result;
  unsigned __int8 *v6;

  if (a3)
    return 4294956417;
  if (a2 == 3700)
  {
    v6 = (unsigned __int8 *)this + 376;
  }
  else
  {
    if (a2 != 21)
      return 4294956417;
    v6 = (unsigned __int8 *)this + 540;
  }
  result = 0;
  *a5 = *v6;
  return result;
}

uint64_t AUEcConvergenceOversight::SetProperty(AUEcConvergenceOversight *this, int a2, int a3, unsigned int a4, _DWORD *a5, unsigned int a6)
{
  uint64_t result;

  result = 4294956417;
  if (a2 == 21 && !a3)
  {
    if (a6 >= 4)
    {
      result = 0;
      *((_BYTE *)this + 540) = *a5 != 0;
    }
    else
    {
      return 4294956445;
    }
  }
  return result;
}

uint64_t AUEcConvergenceOversight::SetParameter(ausdk::AUElement ***this, unsigned int a2, unsigned int a3, unsigned int a4, float a5)
{
  ausdk::AUScope *Scope;
  ausdk::AUElement *Element;
  ausdk::AUElement **v10;
  ausdk::AUElement **v11;

  if (a3)
  {
    Scope = (ausdk::AUScope *)ausdk::AUBase::GetScope((ausdk::AUBase *)this, a3);
    Element = (ausdk::AUElement *)ausdk::AUScope::SafeGetElement(Scope, a4);
  }
  else
  {
    if (*((_BYTE *)this + 17) && a2 <= 0x20 && ((1 << a2) & 0x1EC03E1F0) != 0)
      ++*((_DWORD *)this + 133);
    v10 = this[9];
    if (v10)
    {
      Element = (ausdk::AUElement *)(*((uint64_t (**)(ausdk::AUElement **, _QWORD))*v10 + 4))(this[9], 0);
    }
    else
    {
      v11 = this[6];
      if (this[7] == v11)
        Element = 0;
      else
        Element = *v11;
    }
  }
  ausdk::AUElement::SetParameter(Element, a2, a5, 0);
  return 0;
}

uint64_t AUEcConvergenceOversight::CanScheduleParameters(AUEcConvergenceOversight *this)
{
  return 0;
}

uint64_t AUEcConvergenceOversight::ProcessMultipleBufferLists(AUEcConvergenceOversight *this, unsigned int *a2, int a3, unsigned int a4, const AudioBufferList **a5, int a6, AudioBufferList **a7)
{
  int v11;
  signed int mNumberBuffers;
  uint64_t v14;
  AudioBufferList *v15;
  UInt32 v16;
  void **p_mData;
  uint64_t v18;
  void **v19;
  void **v20;
  _QWORD *v21;
  _QWORD *v22;
  void *v23;
  void *v24;
  void *mData;
  int v26;
  uint64_t v27;
  float *v28;
  DSPSplitComplex *v29;
  DSPSplitComplex v30;
  VPTimeFreqConverter *v31;
  uint64_t v32;
  float *v33;
  float *v34;
  int64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  VPTimeFreqConverter *v39;
  VPTimeFreqConverter *v40;
  int64_t v41;
  float v42;
  float v43;
  float v44;
  float v45;
  BOOL v46;
  uint64_t v47;
  unsigned __int8 *v48;
  int v49;
  uint64_t v50;
  float v51;
  float v52;
  int v53;
  unint64_t v54;
  uint64_t v55;
  float v56;
  uint64_t *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  BOOL v61;
  int v62;
  int v63;
  unint64_t v64;
  float *v65;
  uint64_t v66;
  int v67;
  uint64_t v68;
  int v69;
  uint64_t *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  int v74;
  uint64_t v75;
  float *v76;
  float v77;
  float v78;
  int v79;
  uint64_t *v80;
  int v81;
  float v82;
  uint64_t v83;
  float v84;
  char *v85;
  char v86;
  uint64_t v87;
  vDSP_Length v88;
  uint64_t v89;
  float v90;
  uint64_t v91;
  int v92;
  int *v93;
  uint64_t v94;
  int v95;
  float v96;
  uint64_t v97;
  uint64_t i;
  int v99;
  int v100;
  char *v101;
  int *v102;
  int *v103;
  uint64_t v104;
  int v105;
  int v106;
  int v107;
  int *v108;
  uint64_t v109;
  int v110;
  _BYTE *v111;
  _BYTE *v112;
  int *v113;
  float *v114;
  float *v115;
  float *v116;
  float v117;
  int v118;
  int v119;
  int v120;
  int v121;
  char *v122;
  unsigned __int8 *v125;
  uint64_t v126;
  int v127;
  vDSP_Length v128;
  float v129;
  float v130;
  vDSP_Length v131;
  float v132;
  float v133;
  uint64_t v134;
  float v135;
  const float *v136;
  float *v137;
  float *v138;
  float v139;
  float v140;
  float v141;
  float v142;
  float *v143;
  float *v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  void **v149;
  char *v150;
  int v151;
  float *v152;
  const void *v153;
  float v154;
  float v155;
  uint64_t v156;
  ausdk::AUElement *v157;
  ausdk::AUElement **v158;
  unsigned int v159;
  uint64_t v160;
  ausdk::AUElement *v161;
  ausdk::AUElement **v162;
  unsigned int v163;
  uint64_t v164;
  ausdk::AUElement *v165;
  ausdk::AUElement **v166;
  uint64_t v167;
  ausdk::AUElement *v168;
  ausdk::AUElement **v169;
  uint64_t v170;
  ausdk::AUElement *v171;
  ausdk::AUElement **v172;
  uint64_t v173;
  ausdk::AUElement *v174;
  ausdk::AUElement **v175;
  uint64_t v176;
  ausdk::AUElement *v177;
  __n128 v178;
  float v179;
  ausdk::AUElement **v180;
  uint64_t v181;
  ausdk::AUElement *v182;
  __n128 v183;
  float v184;
  ausdk::AUElement **v185;
  uint64_t v186;
  ausdk::AUElement *v187;
  ausdk::AUElement **v188;
  uint64_t __len;
  DSPSplitComplex *v190;
  MultiRadixRealFFT *v191;
  float *v192;
  float *v193;
  DSPSplitComplex *v194;
  DSPSplitComplex *v195;
  int v196;
  __int16 v197;
  uint64_t __C;
  DSPSplitComplex v199;
  DSPSplitComplex v200;
  _OWORD v201[3];
  _OWORD v202[3];
  float v203[6];
  float v204[6];
  float __B[6];
  uint64_t v206;

  v206 = *MEMORY[0x1E0C80C00];
  if (*((_DWORD *)this + 84) != a3)
    return 4294956422;
  v11 = *((_DWORD *)this + 133);
  if (*((_DWORD *)this + 134) != v11)
  {
    AUEcConvergenceOversight::InitializeInternals(this);
    *((_DWORD *)this + 134) = v11;
  }
  if (*((_BYTE *)this + 540))
    return 0;
  memset(v202, 0, sizeof(v202));
  memset(v201, 0, sizeof(v201));
  mNumberBuffers = (*a5)->mNumberBuffers;
  if (mNumberBuffers >= (signed int)a5[1]->mNumberBuffers)
    mNumberBuffers = a5[1]->mNumberBuffers;
  if (mNumberBuffers >= 6)
    mNumberBuffers = 6;
  if (mNumberBuffers < *((_DWORD *)this + 137))
    return 1;
  AUEcConvergenceOversight::SetRealTimeTunableThresholds(this);
  if (a6 >= 1)
  {
    v14 = 0;
    do
    {
      v15 = a7[v14];
      if (v15->mNumberBuffers)
      {
        v16 = 0;
        p_mData = &v15->mBuffers[0].mData;
        do
        {
          bzero(*p_mData, *((unsigned int *)p_mData - 1));
          ++v16;
          p_mData += 2;
        }
        while (v16 < v15->mNumberBuffers);
      }
      ++v14;
    }
    while (v14 != a6);
  }
  v18 = *((unsigned int *)this + 137);
  if ((int)v18 >= 1)
  {
    v19 = &a5[1]->mBuffers[0].mData;
    v20 = &(*a5)->mBuffers[0].mData;
    v21 = v201;
    v22 = v202;
    do
    {
      v23 = *v20;
      v20 += 2;
      *v22++ = v23;
      v24 = *v19;
      v19 += 2;
      *v21++ = v24;
      --v18;
    }
    while (v18);
  }
  mData = a5[2]->mBuffers[0].mData;
  v26 = *((_DWORD *)this + 475);
  if (v26 >= *((_DWORD *)this + 474))
  {
    v26 = 0;
    *((_DWORD *)this + 475) = 0;
  }
  memcpy((void *)(*((_QWORD *)this + 240) + 4 * *((_DWORD *)this + 132) * v26), mData, 4 * *((int *)this + 132));
  ++*((_DWORD *)this + 475);
  v27 = *((int *)this + 461);
  v28 = (float *)*((int *)this + 462);
  v29 = (DSPSplitComplex *)*((int *)this + 465);
  if (!(_DWORD)v27)
    AUEcConvergenceOversight::ResetEnergyValsAndFlags(this);
  v199.realp = 0;
  v199.imagp = 0;
  v30.realp = (float *)*((_QWORD *)this + 91);
  v30.imagp = &v30.realp[*((int *)this + 132)];
  v200 = v30;
  v31 = (VPTimeFreqConverter *)*((_QWORD *)this + 77);
  v194 = v29;
  if (v31)
  {
    VPTimeFreqConverter::Analyze(v31, (const float *)mData, &v200);
    v30 = v200;
  }
  AUEcConvergenceOversight::Get_Band_Energies(this, (float *)this + 352, (float *)this + 322, v30, (int *)this + 187, (int *)this + 194, *((float *)this + 186), *((_DWORD *)this + 139));
  v32 = *((int *)this + 132);
  v33 = (float *)(*((_QWORD *)this + 91) + 4 * v32);
  v200.realp = (float *)*((_QWORD *)this + 91);
  v200.imagp = v33;
  v34 = (float *)*((_QWORD *)this + 92);
  __C = 0;
  v199.realp = v34;
  v199.imagp = &v34[v32];
  v35 = *((int *)this + 137);
  if ((int)v35 > 0)
  {
    v192 = v28;
    v36 = 0;
    v37 = 0;
    v38 = 365;
    do
    {
      v39 = *(VPTimeFreqConverter **)((char *)this + v36 + 624);
      if (v39)
        VPTimeFreqConverter::Analyze(v39, *(const float **)((char *)v202 + v36), &v200);
      v40 = *(VPTimeFreqConverter **)((char *)this + v36 + 672);
      if (v40)
        VPTimeFreqConverter::Analyze(v40, *(const float **)((char *)v201 + v36), &v199);
      AUEcConvergenceOversight::Get_Band_Energies(this, (float *)((char *)this + v37 + 1412), *(float **)((char *)this + v36 + 1312), v200, (int *)this + 187, (int *)this + 194, *((float *)this + 186), *((_DWORD *)this + 139));
      AUEcConvergenceOversight::Get_Band_Energies(this, (float *)((char *)this + v37 + 1436), *(float **)((char *)this + v36 + 1360), v199, (int *)this + 187, (int *)this + 194, *((float *)this + 186), *((_DWORD *)this + 139));
      vDSP_vsub(*((const float **)this + 92), 1, *((const float **)this + 91), 1, *((float **)this + 91), 1, *((int *)this + 180));
      vDSP_svesq(&v200.realp[*((int *)this + 187)], 1, (float *)&__C + 1, *((int *)this + 202));
      vDSP_svesq(&v200.imagp[*((int *)this + 187)], 1, (float *)&__C, *((int *)this + 202));
      *((float *)this + v38) = log10f(*((float *)this + 466)+ (float)((float)(*((float *)&__C + 1) + *(float *)&__C) * *((float *)this + 186)))* 10.0;
      v41 = v38 - 364;
      ++v38;
      v35 = *((int *)this + 137);
      v37 += 4;
      v36 += 8;
    }
    while (v41 < v35);
    v28 = v192;
  }
  v42 = *((float *)this + 352);
  v43 = *((float *)this + 227);
  vDSP_minv((const float *)this + 353, 1, (float *)&__C + 1, v35);
  *((float *)&__C + 1) = *((float *)&__C + 1) - *((float *)this + 352);
  v44 = *((float *)&__C + 1);
  v45 = *((float *)this + 229);
  vDSP_maxv((const float *)this + 353, 1, (float *)&__C + 1, *((int *)this + 137));
  v46 = (float)(*((float *)&__C + 1) - *((float *)this + 352)) > *((float *)this + 230);
  if (v44 < v45)
    v46 = 1;
  *((float *)&__C + 1) = *((float *)&__C + 1) - *((float *)this + 352);
  if (v42 < v43)
    v46 = 1;
  *((_BYTE *)this + v27 + 1484) = v46;
  *((_BYTE *)this + 1838) = 0;
  v47 = *((unsigned int *)this + 148);
  if ((int)v47 >= 1)
  {
    v48 = (unsigned __int8 *)this + 1484;
    while (1)
    {
      v49 = *v48++;
      if (v49 == 1)
        break;
      if (!--v47)
        goto LABEL_45;
    }
    *((_BYTE *)this + 1838) = 1;
  }
LABEL_45:
  vDSP_maxv((const float *)this + 365, 1, (float *)&__C + 1, *((int *)this + 137));
  vDSP_sve((const float *)this + 365, 1, (float *)&__C, *((int *)this + 137));
  v50 = *((unsigned int *)this + 137);
  v51 = *(float *)&__C / (float)(int)v50;
  *(float *)&__C = v51;
  if (*((float *)&__C + 1) > (float)(v51 + 6.0))
  {
    v51 = v51 + 3.0;
    *(float *)&__C = v51;
  }
  v52 = v51 - *((float *)this + 352);
  *((float *)this + v27 + 389) = v52;
  v53 = *((_DWORD *)this + 148);
  if (*((_DWORD *)this + 461) % v53 != v53 - 1)
  {
    v63 = *((_DWORD *)this + 151);
    goto LABEL_145;
  }
  v54 = *((unsigned int *)this + 139);
  if ((int)v54 < 1)
  {
    v61 = 1;
    v62 = 1;
  }
  else
  {
    v55 = 0;
    v56 = 1.0 / (float)v53;
    do
    {
      *((float *)this + v55 + 322) = log10f(*((float *)this + 466) + (float)(v56 * *((float *)this + v55 + 322))) * 10.0;
      if ((int)v50 >= 1)
      {
        v57 = (uint64_t *)((char *)this + 1360);
        v58 = v50;
        do
        {
          v59 = *(v57 - 6);
          *(float *)(v59 + 4 * v55) = log10f(*((float *)this + 466) + (float)(v56 * *(float *)(v59 + 4 * v55))) * 10.0;
          v60 = *v57++;
          *(float *)(v60 + 4 * v55) = log10f(*((float *)this + 466) + (float)(v56 * *(float *)(v60 + 4 * v55))) * 10.0;
          --v58;
        }
        while (v58);
      }
      ++v55;
    }
    while (v55 != v54);
    if (*((float *)this + 322) >= *((float *)this + 203))
    {
      v64 = 0;
      while (v54 - 1 != v64)
      {
        v65 = (float *)((char *)this + 4 * v64++);
        if (v65[323] < v65[204])
        {
          v62 = 0;
          goto LABEL_63;
        }
      }
      v62 = 1;
      v64 = v54;
LABEL_63:
      v61 = v64 >= v54;
    }
    else
    {
      v61 = 0;
      v62 = 0;
    }
  }
  *((_DWORD *)this + (_QWORD)v28 + 235) = v62;
  if (*((int *)this + 139) < 1)
    goto LABEL_95;
  v66 = 0;
  v67 = 0;
  do
  {
    v68 = *((unsigned int *)this + 137);
    if ((int)v68 <= 0)
    {
      *(_DWORD *)(*((_QWORD *)this + v66 + 143) + 4 * (_QWORD)v28) = 1;
LABEL_74:
      v67 = 1;
      goto LABEL_75;
    }
    v69 = 1;
    v70 = (uint64_t *)((char *)this + 1312);
    do
    {
      v71 = *v70++;
      if (*(float *)(v71 + 4 * v66) < *((float *)this + v66 + 209))
        v69 = 0;
      --v68;
    }
    while (v68);
    *(_DWORD *)(*((_QWORD *)this + v66 + 143) + 4 * (_QWORD)v28) = v69;
    if (v69 == 1)
      goto LABEL_74;
LABEL_75:
    ++v66;
    v72 = *((int *)this + 139);
  }
  while (v66 < v72);
  if ((int)v72 >= 1)
  {
    v73 = 0;
    v74 = 0;
    do
    {
      v75 = *((unsigned int *)this + 137);
      if ((int)v75 < 1)
      {
        v81 = 1;
        v79 = 1;
      }
      else
      {
        v76 = (float *)((char *)this + 4 * v73);
        v77 = v76[215];
        v78 = v76[221];
        v79 = 1;
        v80 = (uint64_t *)((char *)this + 1312);
        v81 = 1;
        do
        {
          v82 = *(float *)(v80[6] + 4 * v73);
          v83 = *v80++;
          v84 = v82 - *(float *)(v83 + 4 * v73);
          *((float *)&__C + 1) = v84;
          if (v84 >= v77)
            v81 = 0;
          if (v84 >= v78)
            v79 = 0;
          --v75;
        }
        while (v75);
      }
      v85 = (char *)this + 8 * v73;
      *(_DWORD *)(*((_QWORD *)v85 + 149) + 4 * (_QWORD)v28) = v81;
      *(_DWORD *)(*((_QWORD *)v85 + 155) + 4 * (_QWORD)v194) = v79;
      if (v81 == 1)
        v74 = 1;
      ++v73;
    }
    while (v73 < *((int *)this + 139));
    v86 = !v61;
    if (v74 != 1)
      v86 = 1;
    if ((v86 & 1) == 0 && v67 == 1)
    {
      vDSP_minv((const float *)this + 389, 1, (float *)&__C + 1, *((int *)this + 148));
      v87 = *((int *)this + 464);
      *((_DWORD *)this + v87 + 409) = HIDWORD(__C);
      goto LABEL_96;
    }
  }
LABEL_95:
  LODWORD(v87) = *((_DWORD *)this + 464);
LABEL_96:
  v88 = *((int *)this + 152);
  *((_DWORD *)this + 464) = ((int)v87 + 1) % (int)v88;
  vDSP_sve((const float *)this + 409, 1, (float *)&__C + 1, v88);
  *((float *)this + 460) = *((float *)&__C + 1) / (float)*((int *)this + 152);
  v89 = *((unsigned int *)this + 149);
  v90 = 100.0 / (float)(int)v89;
  v91 = *((unsigned int *)this + 150);
  *(float *)&__C = 100.0 / (float)(int)v91;
  *((float *)&__C + 1) = v90;
  if ((int)v89 < 1)
  {
    v92 = 0;
  }
  else
  {
    v92 = 0;
    v93 = (int *)((char *)this + 940);
    v94 = v89;
    do
    {
      v95 = *v93++;
      v92 += v95;
      --v94;
    }
    while (v94);
  }
  v96 = v90 * (float)v92;
  v97 = *((unsigned int *)this + 139);
  if ((int)v97 < 1)
  {
    v111 = (char *)this + 1836;
    *((_BYTE *)this + 1836) = 1;
    v52 = *((float *)this + 231);
    if (v96 >= v52)
    {
      v112 = (char *)this + 1837;
      *((_BYTE *)this + 1837) = 1;
LABEL_126:
      v197 = 257;
      v196 = 16843009;
      goto LABEL_127;
    }
LABEL_125:
    *((_WORD *)this + 918) = 0;
    v112 = (char *)this + 1837;
    goto LABEL_126;
  }
  for (i = 0; i != v97; ++i)
  {
    if ((int)v89 < 1)
    {
      v100 = 0;
      v99 = 0;
    }
    else
    {
      v99 = 0;
      v100 = 0;
      v101 = (char *)this + 8 * i;
      v102 = (int *)*((_QWORD *)v101 + 143);
      v103 = (int *)*((_QWORD *)v101 + 149);
      v104 = v89;
      do
      {
        v105 = *v102++;
        v100 += v105;
        v106 = *v103++;
        v99 += v106;
        --v104;
      }
      while (v104);
    }
    if ((int)v91 < 1)
    {
      v107 = 0;
    }
    else
    {
      v107 = 0;
      v108 = (int *)*((_QWORD *)this + i + 155);
      v109 = v91;
      do
      {
        v110 = *v108++;
        v107 += v110;
        --v109;
      }
      while (v109);
    }
    __B[i] = v90 * (float)v100;
    v204[i] = v90 * (float)v99;
    v203[i] = (float)(100.0 / (float)(int)v91) * (float)v107;
  }
  v111 = (char *)this + 1836;
  *((_BYTE *)this + 1836) = 1;
  v52 = *((float *)this + 231);
  if (v96 < v52)
    goto LABEL_125;
  v112 = (char *)this + 1837;
  *((_BYTE *)this + 1837) = 1;
  v197 = 257;
  v196 = 16843009;
  v52 = *((float *)this + 232);
  v113 = &v196;
  v114 = v203;
  v115 = v204;
  v116 = __B;
  while (*v116 >= v52)
  {
    v117 = *((float *)this + 233);
    if (*v115 < v117)
      *v111 = 0;
    if (*v114 < v117)
      *(_BYTE *)v113 = 0;
    v113 = (int *)((char *)v113 + 1);
    ++v114;
    ++v115;
    ++v116;
    if (!--v97)
      goto LABEL_127;
  }
  *v111 = 0;
  *v112 = 0;
LABEL_127:
  v118 = *((_DWORD *)this + 141);
  v119 = *((_DWORD *)this + 142);
  if (v118 <= v119)
  {
    v120 = v118 - 1;
    v121 = v119 - v118 + 1;
    v122 = (char *)&v196 + v120;
    do
    {
      if (!*v122++)
        *v112 = 0;
      --v121;
    }
    while (v121);
  }
  v63 = *((_DWORD *)this + 151);
  if (v63 >= 1)
  {
    *((_BYTE *)this + *((int *)this + 463) + 1504) = *((_BYTE *)this + 1838);
    v63 = *((_DWORD *)this + 151);
    if (*((_BYTE *)this + 560) == 1 && v63 >= 1)
    {
      v125 = (unsigned __int8 *)this + 1504;
      v126 = *((unsigned int *)this + 151);
      while (1)
      {
        v127 = *v125++;
        if (v127 == 1)
          break;
        if (!--v126)
          goto LABEL_143;
      }
      *v111 = 0;
      *v112 = 0;
    }
LABEL_143:
    *((_DWORD *)this + 463) = (*((_DWORD *)this + 463) + 1) % v63;
    LODWORD(v91) = *((_DWORD *)this + 150);
    LODWORD(v89) = *((_DWORD *)this + 149);
  }
  *((_DWORD *)this + 465) = (*((_DWORD *)this + 465) + 1) % (int)v91;
  *((_DWORD *)this + 462) = (*((_DWORD *)this + 462) + 1) % (int)v89;
LABEL_145:
  if (v63 >= 1 && *((_BYTE *)this + 560) == 1 && *((_BYTE *)this + 1838))
    *((_WORD *)this + 918) = 0;
  if (*((_BYTE *)this + 1868))
  {
    if (*((_DWORD *)this + 475) == *((_DWORD *)this + 474))
    {
      __B[0] = 0.0;
      *((_BYTE *)this + 1869) = 0;
      MultiRadixRealFFT::RealOutOfPlaceForwardTransform((AUEcConvergenceOversight *)((char *)this + 1872), *((DSPComplex **)this + 240), (DSPSplitComplex *)this + 119, 1.0);
      vDSP_vsq((const float *)(*((_QWORD *)this + 238) + 4 * *((int *)this + 488)), 1, *((float **)this + 241), 1, *((int *)this + 493));
      vDSP_vsq((const float *)(*((_QWORD *)this + 239) + 4 * *((int *)this + 488)), 1, *((float **)this + 242), 1, *((int *)this + 493));
      vDSP_vadd(*((const float **)this + 241), 1, *((const float **)this + 242), 1, *((float **)this + 241), 1, *((int *)this + 493));
      vDSP_sve(*((const float **)this + 241), 1, (float *)&__C + 1, *((int *)this + 493));
      v128 = *((int *)this + 493);
      *((float *)&__C + 1) = (float)((float)(*((float *)&__C + 1) * 0.01) / (float)(int)v128) + 1.0e-15;
      vDSP_vsadd(*((const float **)this + 241), 1, (const float *)&__C + 1, *((float **)this + 241), 1, v128);
      HIDWORD(__C) = *((_DWORD *)this + 494);
      vDSP_vsmul(*((const float **)this + 243), 1, (const float *)&__C + 1, *((float **)this + 243), 1, *((int *)this + 493));
      *((float *)&__C + 1) = 1.0 - *((float *)this + 494);
      vDSP_vsmul(*((const float **)this + 241), 1, (const float *)&__C + 1, *((float **)this + 241), 1, *((int *)this + 493));
      vDSP_vadd(*((const float **)this + 241), 1, *((const float **)this + 243), 1, *((float **)this + 243), 1, *((int *)this + 493));
      vDSP_sve(*((const float **)this + 243), 1, (float *)&__C + 1, *((int *)this + 491));
      vDSP_sve((const float *)(*((_QWORD *)this + 243) + 4 * *((int *)this + 491)), 1, __B, *((int *)this + 492));
      v129 = __B[0];
      v130 = __B[0] + *((float *)&__C + 1);
      v131 = *((int *)this + 491);
      v132 = log10f(*((float *)&__C + 1) / (float)(int)v131) * 10.0;
      v133 = log10f(v129 / (float)*((int *)this + 492)) * 10.0;
      v134 = *((unsigned int *)this + 493);
      v135 = log10f(v130 / (float)(int)v134) * 10.0;
      v136 = (const float *)*((_QWORD *)this + 241);
      if ((int)v134 >= 1)
      {
        v137 = (float *)*((_QWORD *)this + 243);
        v138 = (float *)*((_QWORD *)this + 241);
        do
        {
          v139 = *v137++;
          *v138++ = log10f(v139) * 10.0;
          --v134;
        }
        while (v134);
      }
      vDSP_sve(v136, 1, (float *)&__C + 1, v131);
      vDSP_sve((const float *)(*((_QWORD *)this + 241) + 4 * *((int *)this + 491)), 1, __B, *((int *)this + 492));
      v52 = v133 - (float)(__B[0] / (float)*((int *)this + 492));
      if ((float)(v132 - (float)(*((float *)&__C + 1) / (float)*((int *)this + 491))) >= 0.0)
        v140 = v132 - (float)(*((float *)&__C + 1) / (float)*((int *)this + 491));
      else
        v140 = 0.0;
      if (v52 < 0.0)
        v52 = 0.0;
      if ((float)(v135 - (float)((float)(__B[0] + *((float *)&__C + 1)) / (float)*((int *)this + 493))) >= 0.0)
        v141 = v135 - (float)((float)(__B[0] + *((float *)&__C + 1)) / (float)*((int *)this + 493));
      else
        v141 = 0.0;
      if (v140 <= v141)
        v142 = v141;
      else
        v142 = v140;
      if (v52 <= v142)
        v52 = v142;
      *((float *)this + 498) = v52;
      *((float *)this + 499) = v141;
      if (v52 > *((float *)this + 495) && v141 > *((float *)this + 497) || v52 > *((float *)this + 496))
        *((_BYTE *)this + 1869) = 1;
    }
    if (*((_BYTE *)this + 1869))
      *((_WORD *)this + 918) = 0;
  }
  *((_DWORD *)this + 501) = 0;
  if (*((_BYTE *)this + 2000))
  {
    v143 = (float *)*((_QWORD *)this + 269);
    v144 = (float *)*((_QWORD *)this + 270);
    __B[0] = 1.0 - *((float *)this + 554);
    v145 = *((int *)this + 504);
    v204[0] = 2.2204e-16;
    LODWORD(v146) = *((_DWORD *)this + 137);
    if ((int)v146 < 1)
    {
      v155 = 0.0;
    }
    else
    {
      v147 = 0;
      v148 = 0;
      v193 = (float *)((char *)this + 2216);
      v195 = (DSPSplitComplex *)((char *)this + 2152);
      v191 = (AUEcConvergenceOversight *)((char *)this + 2248);
      __len = 4 * v145;
      v190 = (DSPSplitComplex *)((char *)this + 2120);
      v149 = (void **)((char *)this + 2024);
      v150 = (char *)this + 2220;
      do
      {
        v151 = *((_DWORD *)this + 504);
        if (v151 >= 1)
        {
          memmove(*v149, (char *)*v149 + 4 * *((int *)this + 132), __len);
          memmove(v149[6], (char *)v149[6] + 4 * *((int *)this + 132), __len);
          v151 = *((_DWORD *)this + 504);
        }
        v152 = (float *)((char *)*v149 + 4 * v151);
        v153 = (const void *)*((_QWORD *)v202 + v148);
        memcpy(v149[6], v153, *((int *)this + 132));
        vDSP_vsub(*((const float **)v201 + v148), 1, (const float *)v153, 1, v152, 1, *((int *)this + 132));
        MultiRadixRealFFT::RealOutOfPlaceForwardTransform(v191, (DSPComplex *)v149[6], (DSPSplitComplex *)((char *)this + 2136), 1.0);
        MultiRadixRealFFT::RealOutOfPlaceForwardTransform(v191, (DSPComplex *)*v149, v190, 1.0);
        vDSP_zvmags((const DSPSplitComplex *)((char *)this + 2136), 1, *((float **)this + 273), 1, *((int *)this + 544));
        vDSP_vsmul(*((const float **)this + 273), 1, __B, v143, 1, *((int *)this + 544));
        vDSP_vsmul(*((const float **)this + 274), 1, v193, v144, 1, *((int *)this + 544));
        vDSP_vadd(v143, 1, v144, 1, *((float **)this + 274), 1, *((int *)this + 544));
        vDSP_zvcmul((const DSPSplitComplex *)((char *)this + 2136), 1, v190, 1, v195, 1, *((int *)this + 544));
        vDSP_zvabs(v195, 1, *((float **)this + 275), 1, *((int *)this + 544));
        vDSP_vsmul(*((const float **)this + 275), 1, __B, v143, 1, *((int *)this + 544));
        vDSP_vsmul(*((const float **)this + 276), 1, v193, v144, 1, *((int *)this + 544));
        vDSP_vadd(v143, 1, v144, 1, *((float **)this + 276), 1, *((int *)this + 544));
        vDSP_vsadd(*((const float **)this + 274), 1, v204, v143, 1, *((int *)this + 544));
        vDSP_vdiv(v143, 1, *((const float **)this + 276), 1, v144, 1, *((int *)this + 544));
        vDSP_meanv(&v144[*((int *)this + 542)], 1, (float *)&v150[v147], *((_DWORD *)this + 543) - *((_DWORD *)this + 542) + 1);
        v154 = fmaxf(fminf(*(float *)&v150[4 * v148], 1.0), 0.0);
        *(float *)&v150[4 * v148] = v154;
        v155 = *((float *)this + 501) + v154;
        *((float *)this + 501) = v155;
        ++v148;
        v146 = *((int *)this + 137);
        ++v149;
        v147 += 4;
      }
      while (v148 < v146);
    }
    v52 = v155 / (float)(int)v146;
    *((float *)this + 501) = v52;
  }
  *((_DWORD *)this + 461) = (*((_DWORD *)this + 461) + 1) % *((_DWORD *)this + 148);
  v156 = *((_QWORD *)this + 9);
  if (v156)
  {
    v157 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v156 + 32))(v156, 0);
  }
  else
  {
    v158 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v158)
      v157 = 0;
    else
      v157 = *v158;
  }
  LOBYTE(v52) = *((_BYTE *)this + 1836);
  ausdk::AUElement::SetParameter(v157, 0, (float)LODWORD(v52), 0);
  v160 = *((_QWORD *)this + 9);
  if (v160)
  {
    v161 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v160 + 32))(v160, 0);
  }
  else
  {
    v162 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v162)
      v161 = 0;
    else
      v161 = *v162;
  }
  LOBYTE(v159) = *((_BYTE *)this + 1837);
  ausdk::AUElement::SetParameter(v161, 1u, (float)v159, 0);
  v164 = *((_QWORD *)this + 9);
  if (v164)
  {
    v165 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v164 + 32))(v164, 0);
  }
  else
  {
    v166 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v166)
      v165 = 0;
    else
      v165 = *v166;
  }
  LOBYTE(v163) = *((_BYTE *)this + 1838);
  ausdk::AUElement::SetParameter(v165, 2u, (float)v163, 0);
  v167 = *((_QWORD *)this + 9);
  if (v167)
  {
    v168 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v167 + 32))(v167, 0);
  }
  else
  {
    v169 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v169)
      v168 = 0;
    else
      v168 = *v169;
  }
  ausdk::AUElement::SetParameter(v168, 3u, *((float *)this + 460), 0);
  v170 = *((_QWORD *)this + 9);
  if (v170)
  {
    v171 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v170 + 32))(v170, 0);
  }
  else
  {
    v172 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v172)
      v171 = 0;
    else
      v171 = *v172;
  }
  ausdk::AUElement::SetParameter(v171, 0x25u, *((float *)this + 498), 0);
  v173 = *((_QWORD *)this + 9);
  if (v173)
  {
    v174 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v173 + 32))(v173, 0);
  }
  else
  {
    v175 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v175)
      v174 = 0;
    else
      v174 = *v175;
  }
  ausdk::AUElement::SetParameter(v174, 0x26u, *((float *)this + 499), 0);
  if (*((_BYTE *)this + 1836) == 1 && !*((_BYTE *)this + 612))
  {
    v176 = *((_QWORD *)this + 9);
    if (v176)
    {
      v178 = ((__n128 (*)(uint64_t, _QWORD))*(_QWORD *)(*(_QWORD *)v176 + 32))(v176, 0);
      v178.n128_u8[0] = *((_BYTE *)this + 1836);
      v179 = (float)v178.n128_u32[0];
    }
    else
    {
      v180 = (ausdk::AUElement **)*((_QWORD *)this + 6);
      v179 = 1.0;
      if (*((ausdk::AUElement ***)this + 7) == v180)
        v177 = 0;
      else
        v177 = *v180;
    }
    ausdk::AUElement::SetParameter(v177, 0x27u, v179, 0);
    *((_BYTE *)this + 612) = 1;
  }
  if (*((_BYTE *)this + 1837) == 1 && !*((_BYTE *)this + 613))
  {
    v181 = *((_QWORD *)this + 9);
    if (v181)
    {
      v183 = ((__n128 (*)(uint64_t, _QWORD))*(_QWORD *)(*(_QWORD *)v181 + 32))(v181, 0);
      v183.n128_u8[0] = *((_BYTE *)this + 1837);
      v184 = (float)v183.n128_u32[0];
    }
    else
    {
      v185 = (ausdk::AUElement **)*((_QWORD *)this + 6);
      v184 = 1.0;
      if (*((ausdk::AUElement ***)this + 7) == v185)
        v182 = 0;
      else
        v182 = *v185;
    }
    ausdk::AUElement::SetParameter(v182, 0x28u, v184, 0);
    *((_BYTE *)this + 613) = 1;
  }
  v186 = *((_QWORD *)this + 9);
  if (v186)
  {
    v187 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v186 + 32))(v186, 0);
  }
  else
  {
    v188 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v188)
      v187 = 0;
    else
      v187 = *v188;
  }
  ausdk::AUElement::SetParameter(v187, 0x2Au, *((float *)this + 501), 0);
  return 0;
}

uint64_t AUEcConvergenceOversight::Render(AUEcConvergenceOversight *this, unsigned int *a2, const AudioTimeStamp *a3, uint64_t a4)
{
  uint64_t Element;
  ausdk::AUInputElement *v9;
  uint64_t result;
  uint64_t v11;
  uint64_t BufferList;
  unsigned int v13;
  ausdk::AUInputElement *v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  ausdk::AUInputElement *v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD v21[4];

  v21[3] = *MEMORY[0x1E0C80C00];
  if (*((_DWORD *)this + 84) != (_DWORD)a4)
    return 4294956422;
  Element = ausdk::AUScope::SafeGetElement((AUEcConvergenceOversight *)((char *)this + 128), 0);
  if (!ausdk::AUBase::HasInput(this, 0))
    return 4294956420;
  v9 = (ausdk::AUInputElement *)ausdk::AUScope::SafeGetElement((AUEcConvergenceOversight *)((char *)this + 80), 0);
  result = ausdk::AUInputElement::PullInput(v9, a2, a3, 0, a4);
  if (!(_DWORD)result)
  {
    v11 = ausdk::AUScope::SafeGetElement((AUEcConvergenceOversight *)((char *)this + 80), 0);
    BufferList = ausdk::AUBufferList::GetBufferList((ausdk::AUBufferList *)(v11 + 144));
    v13 = 0;
    if (!ausdk::AUBase::HasInput(this, 1u)
      || (v13 = 1,
          v14 = (ausdk::AUInputElement *)ausdk::AUScope::SafeGetElement((AUEcConvergenceOversight *)((char *)this + 80), 1u), result = ausdk::AUInputElement::PullInput(v14, a2, a3, 1, a4), !(_DWORD)result))
    {
      v15 = ausdk::AUScope::SafeGetElement((AUEcConvergenceOversight *)((char *)this + 80), v13);
      v16 = ausdk::AUBufferList::GetBufferList((ausdk::AUBufferList *)(v15 + 144));
      if (!ausdk::AUBase::HasInput(this, 2u))
      {
        v17 = 0;
LABEL_13:
        v19 = ausdk::AUScope::SafeGetElement((AUEcConvergenceOversight *)((char *)this + 80), v17);
        ausdk::AUBufferList::GetBufferList((ausdk::AUBufferList *)(v19 + 144));
        v21[0] = BufferList;
        v21[1] = v16;
        v21[2] = v16;
        v20 = ausdk::AUBufferList::GetBufferList((ausdk::AUBufferList *)(Element + 144));
        return (*(uint64_t (**)(AUEcConvergenceOversight *, unsigned int *, uint64_t, uint64_t, _QWORD *, uint64_t, uint64_t *))(*(_QWORD *)this + 184))(this, a2, a4, 3, v21, 1, &v20);
      }
      v17 = 2;
      v18 = (ausdk::AUInputElement *)ausdk::AUScope::SafeGetElement((AUEcConvergenceOversight *)((char *)this + 80), 2u);
      result = ausdk::AUInputElement::PullInput(v18, a2, a3, 2, a4);
      if (!(_DWORD)result)
        goto LABEL_13;
    }
  }
  return result;
}

uint64_t AUEcConvergenceOversight::GetParameterList(AUEcConvergenceOversight *this, int a2, unsigned int *a3, unsigned int *a4)
{
  uint64_t result;

  if (a2)
    return 4294956430;
  if (a3)
  {
    *(_OWORD *)a3 = xmmword_1B6626920;
    *((_OWORD *)a3 + 1) = xmmword_1B66A0770;
    *((_OWORD *)a3 + 2) = xmmword_1B66A07D0;
    *((_OWORD *)a3 + 3) = xmmword_1B66A07E0;
    *((_OWORD *)a3 + 4) = xmmword_1B66A07F0;
    *((_OWORD *)a3 + 5) = xmmword_1B66A0800;
    *((_OWORD *)a3 + 6) = xmmword_1B66A1320;
    *((_OWORD *)a3 + 7) = xmmword_1B66A13B0;
    *((_OWORD *)a3 + 8) = xmmword_1B66A1FD0;
    *((_OWORD *)a3 + 9) = xmmword_1B66A1FE0;
    *((_QWORD *)a3 + 20) = 0x2900000028;
    a3[42] = 42;
  }
  result = 0;
  *a4 = 43;
  return result;
}

uint64_t AUEcConvergenceOversight::GetParameterInfo(AUEcConvergenceOversight *this, int a2, unsigned int a3, AudioUnitParameterInfo *buffer)
{
  uint64_t result;
  const __CFString *v6;
  AudioUnitParameterUnit v7;
  AudioUnitParameterValue v8;
  AudioUnitParameterValue v9;
  AudioUnitParameterValue v10;
  int v11;

  buffer->flags = 0x40000000;
  buffer->unitName = 0;
  result = 4294956418;
  if (!a2 && a3 <= 0x2A)
  {
    v6 = off_1E69E1F88[a3];
    v7 = dword_1B6684D20[a3];
    v8 = flt_1B6684DCC[a3];
    v9 = flt_1B6684E78[a3];
    v10 = flt_1B6684F24[a3];
    v11 = dword_1B6684FD0[a3];
    buffer->cfNameString = v6;
    buffer->flags = 1207959552;
    CFStringGetCString(v6, buffer->name, 52, 0x8000100u);
    result = 0;
    buffer->unit = v7;
    buffer->minValue = v8;
    buffer->maxValue = v9;
    buffer->defaultValue = v10;
    buffer->flags |= v11;
  }
  return result;
}

uint64_t AUEcConvergenceOversight::RestoreState(OpaqueAudioComponentInstance **this, const void *a2)
{
  uint64_t result;

  result = ausdk::AUBase::RestoreState(this, a2);
  if (!(_DWORD)result)
    ++*((_DWORD *)this + 133);
  return result;
}

double AUEcConvergenceOversight::GetLatency(AUEcConvergenceOversight *this)
{
  return 0.0;
}

double AUEcConvergenceOversight::GetTailTime(AUEcConvergenceOversight *this)
{
  return 0.0;
}

uint64_t AUEcConvergenceOversight::SupportsTail(AUEcConvergenceOversight *this)
{
  return 1;
}

BOOL AUEcConvergenceOversight::StreamFormatWritable(AUEcConvergenceOversight *this)
{
  return *((_BYTE *)this + 17) == 0;
}

uint64_t AUEcConvergenceOversight::SupportedNumChannels(AUEcConvergenceOversight *this, const AUChannelInfo **a2)
{
  if (a2)
    *a2 = (const AUChannelInfo *)&AUEcConvergenceOversight::SupportedNumChannels(AUChannelInfo const**)::sSupportedChannelConfigs;
  return 6;
}

BOOL AUEcConvergenceOversight::ValidFormat(AUEcConvergenceOversight *this, const AudioStreamBasicDescription *a2, unsigned int a3, AudioStreamBasicDescription *a4)
{
  int v5;
  _BOOL8 result;

  v5 = (int)a2;
  result = ausdk::ASBD::IsCommonFloat32((ausdk::ASBD *)a4, a2);
  if (result)
    result = (a4->mFormatFlags & 0x20) != 0 || a4->mChannelsPerFrame == 1;
  if (v5 == 1 && result)
    return a4->mChannelsPerFrame - 1 < 6;
  return result;
}

void AUEcConvergenceOversight::AllocFloatMatrixContUtil(AUEcConvergenceOversight *this, float **a2, int a3, int a4)
{
  int v7;
  float *v8;
  BOOL v9;
  float *v10;
  float *v11;
  uint64_t v12;
  float **v13;
  std::bad_alloc *exception;
  std::bad_alloc *v15;

  v7 = 4 * a4 * a3;
  v8 = (float *)malloc_type_malloc(v7, 0x2C8E6D5CuLL);
  if (v7)
    v9 = v8 == 0;
  else
    v9 = 0;
  if (v9)
  {
    exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
    v15 = std::bad_alloc::bad_alloc(exception);
  }
  v10 = v8;
  bzero(v8, v7);
  *a2 = v10;
  if (a3 >= 2)
  {
    v11 = &v10[a4];
    v12 = a3 - 1;
    v13 = a2 + 1;
    do
    {
      *v13++ = v11;
      v11 += a4;
      --v12;
    }
    while (v12);
  }
}

void AUEcConvergenceOversight::FreeFloatMatrixContUtil(AUEcConvergenceOversight *this, float **a2, int a3)
{
  if (*a2)
  {
    free(*a2);
    *a2 = 0;
  }
  if (a3 >= 1)
    bzero(a2, 8 * a3);
}

void AUEcConvergenceOversight::AllocIntMatrixContUtil(AUEcConvergenceOversight *this, int **a2, int a3, int a4)
{
  int v7;
  int *v8;
  BOOL v9;
  int *v10;
  int *v11;
  uint64_t v12;
  int **v13;
  std::bad_alloc *exception;
  std::bad_alloc *v15;

  v7 = 4 * a4 * a3;
  v8 = (int *)malloc_type_malloc(v7, 0x2C8E6D5CuLL);
  if (v7)
    v9 = v8 == 0;
  else
    v9 = 0;
  if (v9)
  {
    exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
    v15 = std::bad_alloc::bad_alloc(exception);
  }
  v10 = v8;
  bzero(v8, v7);
  *a2 = v10;
  if (a3 >= 2)
  {
    v11 = &v10[a4];
    v12 = a3 - 1;
    v13 = a2 + 1;
    do
    {
      *v13++ = v11;
      v11 += a4;
      --v12;
    }
    while (v12);
  }
}

void AUEcConvergenceOversight::FreeIntMatrixContUtil(AUEcConvergenceOversight *this, void **a2, int a3)
{
  if (*a2)
  {
    free(*a2);
    *a2 = 0;
  }
  if (a3 >= 1)
    bzero(a2, 8 * a3);
}

uint64_t AUEcConvergenceOversight::InitializeInternals(AUEcConvergenceOversight *this)
{
  int v2;
  float v3;
  uint64_t v4;
  ausdk::AUElement *v5;
  ausdk::AUElement **v6;
  uint64_t v7;
  ausdk::AUElement *v8;
  ausdk::AUElement **v9;
  int v10;
  int Parameter;
  uint64_t v12;
  ausdk::AUElement *v13;
  ausdk::AUElement **v14;
  float v15;
  float v16;
  uint64_t v17;
  ausdk::AUElement *v18;
  ausdk::AUElement **v19;
  float v20;
  float v21;
  float v22;
  float v23;
  float v24;
  float v25;
  int v26;
  signed int v27;
  signed int v28;
  signed int v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  signed int v35;
  int *v36;
  uint64_t v37;
  int v38;
  int v39;
  int v40;
  uint64_t v41;
  ausdk::AUElement *v42;
  ausdk::AUElement **v43;
  int v44;
  int v45;
  uint64_t v46;
  ausdk::AUElement *v47;
  ausdk::AUElement **v48;
  int v49;
  int v50;
  int v51;
  uint64_t v52;
  ausdk::AUElement *v53;
  ausdk::AUElement **v54;
  int v55;
  int v56;
  uint64_t v57;
  VPTimeFreqConverter **v58;
  uint64_t v59;
  void *v60;
  void *v61;
  void *v62;
  void *v63;
  float *v64;
  VPTimeFreqConverter *v65;
  VPTimeFreqConverter *v66;
  uint64_t v67;
  ausdk::AUElement *v68;
  ausdk::AUElement **v69;
  uint64_t v70;
  ausdk::AUElement *v71;
  ausdk::AUElement **v72;
  uint64_t v73;
  ausdk::AUElement *v74;
  ausdk::AUElement **v75;
  uint64_t v76;
  ausdk::AUElement *v77;
  ausdk::AUElement **v78;
  uint64_t v79;
  ausdk::AUElement *v80;
  ausdk::AUElement **v81;
  float v82;
  float v83;
  float v84;
  int v85;
  float v86;
  int v87;
  int v88;
  int v89;
  int v90;
  int v91;
  int v92;
  int v93;
  int v94;
  uint64_t v95;
  ausdk::AUElement *v96;
  ausdk::AUElement **v97;
  int v98;
  int v99;
  int v100;
  int v101;
  int v102;
  int v103;
  int v104;
  int v105;
  void *v106;
  BOOL v107;
  void *v108;
  char *v109;
  char *v111;
  uint64_t v112;
  uint64_t v113;
  ausdk::AUElement *v114;
  ausdk::AUElement **v115;
  float v116;
  int v117;
  int v118;
  uint64_t v119;
  ausdk::AUElement *v120;
  ausdk::AUElement **v121;
  float v122;
  int v123;
  int v124;
  int v125;
  int v126;
  uint64_t v127;
  ausdk::AUElement *v128;
  ausdk::AUElement **v129;
  float v130;
  int v131;
  int v132;
  int v133;
  int v134;
  int v135;
  BOOL v136;
  int v137;
  int v138;
  int v139;
  void *v140;
  BOOL v141;
  void *v142;
  void *v143;
  void *v145;
  float *v146;
  float *v148;
  uint64_t v149;
  ausdk::AUElement *v150;
  int v151;
  ausdk::AUElement **v152;
  float v153;
  uint64_t v154;
  ausdk::AUElement *v155;
  ausdk::AUElement **v156;
  float v157;
  uint64_t v158;
  ausdk::AUElement *v159;
  ausdk::AUElement **v160;
  float v161;
  uint64_t v162;
  ausdk::AUElement *v163;
  ausdk::AUElement **v164;
  float v165;
  float v166;
  int v167;
  int v168;
  unsigned int v169;
  uint64_t v170;
  char *v171;
  char *v172;
  char *v173;
  char *v174;
  char *v175;
  char *v176;
  uint64_t v177;
  float v178;
  int32x2_t v179;
  int32x2_t v180;
  int32x2_t v181;
  int v182;
  int v183;
  void *v184;
  void *v185;
  void *v186;
  void *v187;
  void *v188;
  void *v189;
  void *v190;
  void *v191;
  uint64_t v192;
  uint64_t v193;
  _QWORD *v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  std::bad_alloc *exception;
  std::bad_alloc *v200;
  DSPSplitComplex v201;
  float __A;

  AUEcConvergenceOversight::ClearAllocations(this);
  v2 = *((_DWORD *)this + 84);
  *((_DWORD *)this + 132) = v2;
  *((_DWORD *)this + 180) = 2 * v2;
  *((_DWORD *)this + 134) = *((_DWORD *)this + 133);
  v3 = *(double *)(ausdk::AUScope::SafeGetElement((AUEcConvergenceOversight *)((char *)this + 80), 0) + 80);
  *((float *)this + 136) = v3;
  v4 = *((_QWORD *)this + 9);
  if (v4)
  {
    v5 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v4 + 32))(v4, 0);
  }
  else
  {
    v6 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v6)
      v5 = 0;
    else
      v5 = *v6;
  }
  *((_BYTE *)this + 560) = (int)ausdk::AUElement::GetParameter(v5, 4u);
  v7 = *((_QWORD *)this + 9);
  if (v7)
  {
    v8 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v7 + 32))(v7, 0);
  }
  else
  {
    v9 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v9)
      v8 = 0;
    else
      v8 = *v9;
  }
  v10 = 6;
  Parameter = (int)ausdk::AUElement::GetParameter(v8, 6u);
  *((_DWORD *)this + 139) = Parameter;
  if (Parameter <= 6)
  {
    if (Parameter > 0)
      goto LABEL_15;
    v10 = 1;
  }
  *((_DWORD *)this + 139) = v10;
LABEL_15:
  v12 = *((_QWORD *)this + 9);
  if (v12)
  {
    v13 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v12 + 32))(v12, 0);
  }
  else
  {
    v14 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v14)
      v13 = 0;
    else
      v13 = *v14;
  }
  v15 = ausdk::AUElement::GetParameter(v13, 7u);
  *((float *)this + 200) = v15;
  v16 = 0.0;
  if (v15 < 0.0 || (v16 = 20.0, v15 > (float)((float)(*((float *)this + 136) + -100.0) * 0.5)))
    *((float *)this + 200) = v16;
  v17 = *((_QWORD *)this + 9);
  if (v17)
  {
    v18 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v17 + 32))(v17, 0);
  }
  else
  {
    v19 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v19)
      v18 = 0;
    else
      v18 = *v19;
  }
  v20 = ausdk::AUElement::GetParameter(v18, 8u);
  *((float *)this + 201) = v20;
  v21 = *((float *)this + 136);
  v22 = v21 * 0.5 + -50.0;
  if (v20 >= 0.0)
  {
    v23 = *((float *)this + 200);
    if (v23 <= v22)
      v22 = v20;
    else
      *((float *)this + 201) = v22;
  }
  else
  {
    *((float *)this + 201) = v22;
    v23 = *((float *)this + 200);
  }
  v24 = v22 + -100.0;
  if (v23 > (float)(v22 + -100.0) || (v24 = v23, v23 < 0.0))
  {
    v23 = 0.0;
    if (v24 >= 0.0)
      v23 = v24;
    *((float *)this + 200) = v23;
  }
  v25 = v21 / (float)*((int *)this + 180);
  v26 = vcvtps_s32_f32(v23 / v25);
  v27 = vcvtms_s32_f32(v22 / v25);
  v28 = *((_DWORD *)this + 132);
  if (v28 <= v27)
    v29 = v28 - 1;
  else
    v29 = v27;
  v30 = *((unsigned int *)this + 139);
  if (v29 - 2 * (int)v30 < v26)
    v26 = v29 - 2 * v30;
  v31 = v26 & ~(v26 >> 31);
  *((_DWORD *)this + 187) = v31;
  if ((int)v30 >= 1)
  {
    v32 = 0;
    v33 = v31;
    do
    {
      v34 = v32 + 1;
      v35 = v31 + llroundf((float)((float)(v29 - v31) / (float)(int)v30) * (float)(v32 + 1));
      if (v35 <= v33)
        ++v33;
      else
        v33 = v35;
      if (v33 >= v28)
        v33 = v28 - 1;
      *((_DWORD *)this + v32++ + 188) = v33;
    }
    while (v30 != v34);
    v36 = (int *)((char *)this + 776);
    v37 = v30;
    v38 = v31;
    do
    {
      v39 = *(v36 - 6);
      v40 = v39 - v38;
      if (v40 <= 1)
        v40 = 1;
      *v36++ = v40;
      v38 = v39;
      --v37;
    }
    while (v37);
  }
  *((_DWORD *)this + 202) = *((_DWORD *)this + (int)v30 + 187) - v31 + 1;
  v41 = *((_QWORD *)this + 9);
  if (v41)
  {
    v42 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v41 + 32))(v41, 0);
  }
  else
  {
    v43 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v43)
      v42 = 0;
    else
      v42 = *v43;
  }
  v44 = (int)ausdk::AUElement::GetParameter(v42, 0x1Au);
  *((_DWORD *)this + 141) = v44;
  if (v44 < 1)
  {
    v45 = 1;
    goto LABEL_64;
  }
  v45 = *((_DWORD *)this + 139);
  if (v45 < v44)
LABEL_64:
    *((_DWORD *)this + 141) = v45;
  v46 = *((_QWORD *)this + 9);
  if (v46)
  {
    v47 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v46 + 32))(v46, 0);
  }
  else
  {
    v48 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v48)
      v47 = 0;
    else
      v47 = *v48;
  }
  v49 = (int)ausdk::AUElement::GetParameter(v47, 0x1Bu);
  *((_DWORD *)this + 142) = v49;
  if (v49 < 1)
  {
    v50 = 1;
    goto LABEL_74;
  }
  v50 = *((_DWORD *)this + 139);
  if (v50 < v49)
  {
LABEL_74:
    *((_DWORD *)this + 142) = v50;
    v49 = v50;
  }
  v51 = *((_DWORD *)this + 141);
  if (v51 > v49)
    *((_DWORD *)this + 142) = v51;
  v52 = *((_QWORD *)this + 9);
  if (v52)
  {
    v53 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v52 + 32))(v52, 0);
  }
  else
  {
    v54 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v54)
      v53 = 0;
    else
      v53 = *v54;
  }
  v55 = (int)ausdk::AUElement::GetParameter(v53, 5u);
  if (*((_DWORD *)this + 138) < v55)
    v55 = *((_DWORD *)this + 138);
  *((_DWORD *)this + 137) = v55;
  if (v55 <= 6)
  {
    if (v55 > 0)
      goto LABEL_89;
    v56 = 1;
  }
  else
  {
    v56 = 6;
  }
  *((_DWORD *)this + 137) = v56;
LABEL_89:
  VPTimeFreqConverter_Create(0, *((_DWORD *)this + 132), (VPTimeFreqConverter **)this + 77);
  if (*((int *)this + 137) >= 1)
  {
    v57 = 0;
    v58 = (VPTimeFreqConverter **)((char *)this + 672);
    do
    {
      VPTimeFreqConverter_Create(0, *((_DWORD *)this + 132), v58 - 6);
      VPTimeFreqConverter_Create(0, *((_DWORD *)this + 132), v58);
      ++v57;
      ++v58;
    }
    while (v57 < *((int *)this + 137));
  }
  v59 = *((int *)this + 180);
  v60 = malloc_type_malloc(4 * v59, 0x2C8E6D5CuLL);
  v61 = v60;
  if ((_DWORD)v59 && !v60
    || (bzero(v60, 4 * v59),
        *((_QWORD *)this + 91) = v61,
        v62 = malloc_type_malloc(4 * v59, 0x2C8E6D5CuLL),
        v63 = v62,
        (_DWORD)v59)
    && !v62)
  {
LABEL_283:
    exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
    v200 = std::bad_alloc::bad_alloc(exception);
  }
  bzero(v62, 4 * v59);
  *((_QWORD *)this + 92) = v63;
  __A = 1.0;
  vDSP_vfill(&__A, *((float **)this + 91), 1, *((int *)this + 132));
  v64 = (float *)(*((_QWORD *)this + 92) + 4 * *((int *)this + 132));
  v201.realp = (float *)*((_QWORD *)this + 92);
  v201.imagp = v64;
  v65 = (VPTimeFreqConverter *)*((_QWORD *)this + 77);
  if (v65)
  {
    VPTimeFreqConverter::Analyze(v65, *((const float **)this + 91), &v201);
    v66 = (VPTimeFreqConverter *)*((_QWORD *)this + 77);
    if (v66)
      VPTimeFreqConverter::Analyze(v66, *((const float **)this + 91), &v201);
  }
  vDSP_svesq(*((const float **)this + 92), 1, &__A, *((int *)this + 180));
  *((float *)this + 186) = 1.0 / __A;
  v67 = *((_QWORD *)this + 9);
  if (v67)
  {
    v68 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v67 + 32))(v67, 0);
  }
  else
  {
    v69 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v69)
      v68 = 0;
    else
      v68 = *v69;
  }
  *((float *)this + 143) = ausdk::AUElement::GetParameter(v68, 0xEu);
  v70 = *((_QWORD *)this + 9);
  if (v70)
  {
    v71 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v70 + 32))(v70, 0);
  }
  else
  {
    v72 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v72)
      v71 = 0;
    else
      v71 = *v72;
  }
  *((float *)this + 144) = ausdk::AUElement::GetParameter(v71, 0xDu);
  v73 = *((_QWORD *)this + 9);
  if (v73)
  {
    v74 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v73 + 32))(v73, 0);
  }
  else
  {
    v75 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v75)
      v74 = 0;
    else
      v74 = *v75;
  }
  *((float *)this + 146) = ausdk::AUElement::GetParameter(v74, 0xFu);
  v76 = *((_QWORD *)this + 9);
  if (v76)
  {
    v77 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v76 + 32))(v76, 0);
  }
  else
  {
    v78 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v78)
      v77 = 0;
    else
      v77 = *v78;
  }
  *((float *)this + 145) = ausdk::AUElement::GetParameter(v77, 0x10u);
  v79 = *((_QWORD *)this + 9);
  if (v79)
  {
    v80 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v79 + 32))(v79, 0);
  }
  else
  {
    v81 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v81)
      v80 = 0;
    else
      v80 = *v81;
  }
  v82 = ausdk::AUElement::GetParameter(v80, 0x11u);
  *((float *)this + 147) = v82;
  v83 = *((float *)this + 136);
  v84 = (float)*((int *)this + 132);
  v85 = vcvtps_s32_f32((float)(*((float *)this + 144) * v83) / v84);
  *((_DWORD *)this + 148) = v85;
  if (v85 <= 20)
  {
    if (v85 > 0)
      goto LABEL_129;
    v85 = 1;
  }
  else
  {
    v85 = 20;
  }
  *((_DWORD *)this + 148) = v85;
LABEL_129:
  v86 = (float)(v84 * (float)v85) / v83;
  *((float *)this + 144) = v86;
  v87 = vcvtms_s32_f32(*((float *)this + 143) / v86);
  *((_DWORD *)this + 149) = v87;
  if (v87 <= 50)
  {
    if (v87 > 0)
      goto LABEL_134;
    v88 = 1;
  }
  else
  {
    v88 = 50;
  }
  *((_DWORD *)this + 149) = v88;
LABEL_134:
  v89 = vcvtms_s32_f32(*((float *)this + 146) / v86);
  *((_DWORD *)this + 150) = v89;
  if (v89 <= 50)
  {
    if (v89 > 0)
      goto LABEL_139;
    v90 = 1;
  }
  else
  {
    v90 = 50;
  }
  *((_DWORD *)this + 150) = v90;
LABEL_139:
  v91 = vcvtms_s32_f32(*((float *)this + 145) / v86);
  *((_DWORD *)this + 151) = v91;
  if (v91 <= 50)
  {
    if ((v91 & 0x80000000) == 0)
      goto LABEL_144;
    v92 = 0;
  }
  else
  {
    v92 = 50;
  }
  *((_DWORD *)this + 151) = v92;
LABEL_144:
  v93 = vcvtms_s32_f32(v82 / v86);
  *((_DWORD *)this + 152) = v93;
  if (v93 <= 50)
  {
    if (v93 > 0)
      goto LABEL_149;
    v94 = 1;
  }
  else
  {
    v94 = 50;
  }
  *((_DWORD *)this + 152) = v94;
LABEL_149:
  (*(void (**)(AUEcConvergenceOversight *, char *, uint64_t, uint64_t))(*(_QWORD *)this + 576))(this, (char *)this + 1312, 6, 6);
  (*(void (**)(AUEcConvergenceOversight *, char *, uint64_t, uint64_t))(*(_QWORD *)this + 576))(this, (char *)this + 1360, 6, 6);
  (*(void (**)(AUEcConvergenceOversight *, char *, uint64_t, uint64_t))(*(_QWORD *)this + 592))(this, (char *)this + 1144, 6, 50);
  (*(void (**)(AUEcConvergenceOversight *, char *, uint64_t, uint64_t))(*(_QWORD *)this + 592))(this, (char *)this + 1192, 6, 50);
  (*(void (**)(AUEcConvergenceOversight *, char *, uint64_t, uint64_t))(*(_QWORD *)this + 592))(this, (char *)this + 1240, 6, 50);
  *((_WORD *)this + 776) = 0;
  *((_OWORD *)this + 96) = 0u;
  *((_OWORD *)this + 95) = 0u;
  *((_OWORD *)this + 94) = 0u;
  AUEcConvergenceOversight::SetRealTimeTunableThresholds(this);
  *((_BYTE *)this + 1869) = 0;
  v95 = *((_QWORD *)this + 9);
  if (v95)
  {
    v96 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v95 + 32))(v95, 0);
  }
  else
  {
    v97 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v97)
      v96 = 0;
    else
      v96 = *v97;
  }
  v98 = (int)ausdk::AUElement::GetParameter(v96, 0x1Du);
  v99 = *((_DWORD *)this + 132);
  if (v98 >= 2049)
    v100 = 2049;
  else
    v100 = v98;
  v101 = 8;
  v102 = *((_DWORD *)this + 132);
  do
  {
    if (v102 >= v100)
      break;
    v102 *= 2;
    --v101;
  }
  while (v101);
  v103 = v102 / v99;
  *((_DWORD *)this + 474) = v103;
  v104 = v103 * v99;
  *((_DWORD *)this + 472) = v103 * v99;
  if (v103 * v99 >= 0)
    v105 = v103 * v99;
  else
    v105 = v104 + 1;
  *((_DWORD *)this + 473) = v105 >> 1;
  *((_DWORD *)this + 475) = 0;
  v106 = malloc_type_malloc(4 * v104, 0x2C8E6D5CuLL);
  if (v104)
    v107 = v106 == 0;
  else
    v107 = 0;
  if (v107)
    goto LABEL_283;
  v108 = v106;
  bzero(v106, 4 * v104);
  *((_QWORD *)this + 240) = v108;
  v109 = (char *)malloc_type_malloc(4 * v104, 0x2C8E6D5CuLL);
  if (v104 && v109 == 0)
    goto LABEL_283;
  v111 = v109;
  bzero(v109, 4 * v104);
  *((_QWORD *)this + 238) = v111;
  *((_QWORD *)this + 239) = &v111[4 * *((int *)this + 473)];
  v112 = MultiRadixRealFFT::Initialize((AUEcConvergenceOversight *)((char *)this + 1872), *((_DWORD *)this + 472));
  if ((_DWORD)v112)
    return v112;
  __A = 0.0;
  vDSP_vfill(&__A, *((float **)this + 240), 1, *((int *)this + 472));
  __A = (float)*((int *)this + 472) / *((float *)this + 136);
  v113 = *((_QWORD *)this + 9);
  if (v113)
  {
    v114 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v113 + 32))(v113, 0);
  }
  else
  {
    v115 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v115)
      v114 = 0;
    else
      v114 = *v115;
  }
  v116 = ausdk::AUElement::GetParameter(v114, 0x1Eu);
  v117 = (int)(float)(__A * (float)(int)v116);
  *((_DWORD *)this + 488) = v117;
  if (v117 >= 2)
  {
    v118 = *((_DWORD *)this + 473) - 2;
    if (v118 >= v117)
      goto LABEL_181;
  }
  else
  {
    v118 = 1;
  }
  *((_DWORD *)this + 488) = v118;
LABEL_181:
  v119 = *((_QWORD *)this + 9);
  if (v119)
  {
    v120 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v119 + 32))(v119, 0);
  }
  else
  {
    v121 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v121)
      v120 = 0;
    else
      v120 = *v121;
  }
  v122 = ausdk::AUElement::GetParameter(v120, 0x1Fu);
  v123 = (int)(float)(__A * (float)(int)v122);
  *((_DWORD *)this + 489) = v123;
  v124 = *((_DWORD *)this + 488);
  if (v124 >= v123)
  {
    v126 = v124 + 1;
  }
  else
  {
    v125 = *((_DWORD *)this + 473);
    if (v125 > v123)
      goto LABEL_191;
    v126 = v125 - 1;
  }
  *((_DWORD *)this + 489) = v126;
LABEL_191:
  v127 = *((_QWORD *)this + 9);
  if (v127)
  {
    v128 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v127 + 32))(v127, 0);
  }
  else
  {
    v129 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v129)
      v128 = 0;
    else
      v128 = *v129;
  }
  v130 = ausdk::AUElement::GetParameter(v128, 0x20u);
  v131 = (int)(float)(__A * (float)(int)v130);
  *((_DWORD *)this + 490) = v131;
  v132 = *((_DWORD *)this + 489);
  if (v132 >= v131)
  {
    v133 = v132 + 1;
    goto LABEL_200;
  }
  v133 = *((_DWORD *)this + 473);
  if (v133 < v131)
  {
LABEL_200:
    *((_DWORD *)this + 490) = v133;
    v131 = v133;
  }
  v134 = *((_DWORD *)this + 488);
  v135 = v132 - v134;
  if (v132 - v134 <= 1)
    v135 = 1;
  *((_DWORD *)this + 491) = v135;
  v136 = __OFSUB__(v131, v132);
  v137 = v131 - v132;
  if (v137 < 0 != v136)
    v138 = 1;
  else
    v138 = v137 + 1;
  *((_DWORD *)this + 492) = v138;
  if (v131 - v134 >= 1)
    v139 = v131 - v134 + 1;
  else
    v139 = 2;
  *((_DWORD *)this + 493) = v139;
  v140 = malloc_type_malloc(4 * v139, 0x2C8E6D5CuLL);
  if (v139)
    v141 = v140 == 0;
  else
    v141 = 0;
  if (v141)
    goto LABEL_283;
  v142 = v140;
  bzero(v140, 4 * v139);
  *((_QWORD *)this + 241) = v142;
  v143 = malloc_type_malloc(4 * v139, 0x2C8E6D5CuLL);
  if (v139 && v143 == 0)
    goto LABEL_283;
  v145 = v143;
  bzero(v143, 4 * v139);
  *((_QWORD *)this + 242) = v145;
  v146 = (float *)malloc_type_malloc(4 * v139, 0x2C8E6D5CuLL);
  if (v139 && v146 == 0)
    goto LABEL_283;
  v148 = v146;
  bzero(v146, 4 * v139);
  *((_QWORD *)this + 243) = v148;
  __A = 0.0;
  vDSP_vfill(&__A, v148, 1, *((int *)this + 493));
  *((_WORD *)this + 306) = 0;
  v149 = *((_QWORD *)this + 9);
  if (v149)
  {
    v150 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v149 + 32))(v149, 0);
    v151 = *((unsigned __int8 *)this + 612);
  }
  else
  {
    v152 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    v151 = 0;
    if (*((ausdk::AUElement ***)this + 7) == v152)
      v150 = 0;
    else
      v150 = *v152;
  }
  v153 = 0.0;
  if (v151)
    v153 = 1.0;
  ausdk::AUElement::SetParameter(v150, 0x27u, v153, 0);
  v154 = *((_QWORD *)this + 9);
  if (v154)
  {
    v155 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v154 + 32))(v154, 0);
  }
  else
  {
    v156 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v156)
      v155 = 0;
    else
      v155 = *v156;
  }
  v157 = 0.0;
  if (*((_BYTE *)this + 613))
    v157 = 1.0;
  ausdk::AUElement::SetParameter(v155, 0x28u, v157, 0);
  v158 = *((_QWORD *)this + 9);
  if (v158)
  {
    v159 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v158 + 32))(v158, 0);
  }
  else
  {
    v160 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v160)
      v159 = 0;
    else
      v159 = *v160;
  }
  v161 = 0.0;
  if (*((_BYTE *)this + 612))
    v161 = 1.0;
  ausdk::AUElement::SetParameter(v159, 0, v161, 0);
  v162 = *((_QWORD *)this + 9);
  if (v162)
  {
    v163 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v162 + 32))(v162, 0);
  }
  else
  {
    v164 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v164)
      v163 = 0;
    else
      v163 = *v164;
  }
  v165 = 0.0;
  if (*((_BYTE *)this + 613))
    v165 = 1.0;
  ausdk::AUElement::SetParameter(v163, 1u, v165, 0);
  v166 = *((float *)this + 136);
  if (v166 >= 22000.0)
  {
    v167 = 960;
  }
  else if (v166 >= 16000.0)
  {
    v167 = 320;
  }
  else
  {
    v167 = v166 >= 11000.0 ? 256 : 160;
  }
  v168 = *((_DWORD *)this + 132);
  v169 = v167 <= v168 ? *((_DWORD *)this + 132) : v167;
  *((_DWORD *)this + 502) = v169;
  *((_DWORD *)this + 503) = v169 >> 1;
  *((_DWORD *)this + 504) = v169 - v168;
  v112 = MultiRadixRealFFT::Initialize((AUEcConvergenceOversight *)((char *)this + 2248), v169);
  (*(void (**)(AUEcConvergenceOversight *, char *, uint64_t, _QWORD))(*(_QWORD *)this + 576))(this, (char *)this + 2024, 6, *((unsigned int *)this + 502));
  (*(void (**)(AUEcConvergenceOversight *, char *, uint64_t, _QWORD))(*(_QWORD *)this + 576))(this, (char *)this + 2072, 6, *((unsigned int *)this + 502));
  v170 = *((int *)this + 502);
  v171 = (char *)malloc_type_malloc(4 * v170, 0x2C8E6D5CuLL);
  v172 = v171;
  if ((_DWORD)v170)
  {
    if (!v171)
      goto LABEL_283;
  }
  bzero(v171, 4 * v170);
  *((_QWORD *)this + 265) = v172;
  *((_QWORD *)this + 266) = &v172[4 * *((int *)this + 503)];
  v173 = (char *)malloc_type_malloc(4 * v170, 0x2C8E6D5CuLL);
  v174 = v173;
  if ((_DWORD)v170)
  {
    if (!v173)
      goto LABEL_283;
  }
  bzero(v173, 4 * v170);
  *((_QWORD *)this + 267) = v174;
  *((_QWORD *)this + 268) = &v174[4 * *((int *)this + 503)];
  v175 = (char *)malloc_type_malloc(4 * v170, 0x2C8E6D5CuLL);
  v176 = v175;
  if ((_DWORD)v170)
  {
    if (!v175)
      goto LABEL_283;
  }
  bzero(v175, 4 * v170);
  *((_QWORD *)this + 269) = v176;
  v177 = *((int *)this + 503);
  *((_QWORD *)this + 270) = &v176[4 * v177];
  v178 = *((float *)this + 136);
  *(float *)v179.i32 = v178 / (float)*((int *)this + 502);
  v180 = vcvt_s32_f32(vrndm_f32(vdiv_f32((float32x2_t)0x44E1000043960000, (float32x2_t)vdup_lane_s32(v179, 0))));
  v181 = vmin_s32((int32x2_t)vand_s8((int8x8_t)vadd_s32(v180, (int32x2_t)-1), (int8x8_t)vcgt_s32(v180, (int32x2_t)0x100000001)), vdup_n_s32((int)v177 - 1));
  *((int32x2_t *)this + 271) = v181;
  v182 = v181.i32[1] + 1 < (int)v177 ? v181.i32[1] + 1 : v177;
  *((_DWORD *)this + 544) = v182;
  *((float *)this + 554) = expf((float)((float)*((int *)this + 132) / v178) / -0.03);
  v183 = 4 * v182;
  v184 = malloc_type_malloc(4 * v182, 0x2C8E6D5CuLL);
  v185 = v184;
  if (!v184)
  {
    if (v183)
      goto LABEL_283;
  }
  bzero(v184, v183);
  *((_QWORD *)this + 273) = v185;
  v186 = malloc_type_malloc(v183, 0x2C8E6D5CuLL);
  v187 = v186;
  if (v183)
  {
    if (!v186)
      goto LABEL_283;
  }
  bzero(v186, v183);
  *((_QWORD *)this + 274) = v187;
  v188 = malloc_type_malloc(v183, 0x2C8E6D5CuLL);
  v189 = v188;
  if (v183)
  {
    if (!v188)
      goto LABEL_283;
  }
  bzero(v188, v183);
  *((_QWORD *)this + 275) = v189;
  v190 = malloc_type_malloc(v183, 0x2C8E6D5CuLL);
  v191 = v190;
  if (v183)
  {
    if (!v190)
      goto LABEL_283;
  }
  bzero(v190, v183);
  *((_QWORD *)this + 276) = v191;
  if (!(_DWORD)v112)
  {
    v192 = 0;
    *(_OWORD *)((char *)this + 940) = 0u;
    *(_OWORD *)((char *)this + 956) = 0u;
    *(_OWORD *)((char *)this + 972) = 0u;
    *(_OWORD *)((char *)this + 988) = 0u;
    *(_OWORD *)((char *)this + 1004) = 0u;
    *(_OWORD *)((char *)this + 1020) = 0u;
    *(_OWORD *)((char *)this + 1036) = 0u;
    *(_OWORD *)((char *)this + 1052) = 0u;
    *(_OWORD *)((char *)this + 1068) = 0u;
    *(_OWORD *)((char *)this + 1084) = 0u;
    *(_OWORD *)((char *)this + 1100) = 0u;
    *(_OWORD *)((char *)this + 1116) = 0u;
    *(_QWORD *)((char *)this + 1132) = 0;
    *((_BYTE *)this + 1836) = 0;
    *((_BYTE *)this + 1838) = 0;
    do
    {
      v193 = 0;
      v194 = (_QWORD *)((char *)this + 8 * v192);
      v195 = v194[143];
      v196 = v194[149];
      v197 = v194[155];
      do
      {
        *(_DWORD *)(v195 + v193) = 0;
        *(_DWORD *)(v196 + v193) = 0;
        *(_DWORD *)(v197 + v193) = 0;
        v193 += 4;
      }
      while (v193 != 200);
      ++v192;
    }
    while (v192 != 6);
    AUEcConvergenceOversight::ResetEnergyValsAndFlags(this);
    __A = 0.0;
    vDSP_vfill(&__A, *((float **)this + 243), 1, *((int *)this + 493));
    AUEcConvergenceOversight::Reset(this);
    return 0;
  }
  return v112;
}

void AUEcConvergenceOversight::SetRealTimeTunableThresholds(AUEcConvergenceOversight *this)
{
  uint64_t v2;
  ausdk::AUElement *v3;
  ausdk::AUElement **v4;
  float Parameter;
  uint64_t v6;
  ausdk::AUElement *v7;
  ausdk::AUElement **v8;
  float v9;
  uint64_t v10;
  ausdk::AUElement *v11;
  ausdk::AUElement **v12;
  float v13;
  uint64_t v14;
  ausdk::AUElement *v15;
  ausdk::AUElement **v16;
  float v17;
  uint64_t i;
  float *v19;
  uint64_t v20;
  ausdk::AUElement *v21;
  ausdk::AUElement **v22;
  uint64_t v23;
  ausdk::AUElement *v24;
  ausdk::AUElement **v25;
  uint64_t v26;
  ausdk::AUElement *v27;
  ausdk::AUElement **v28;
  uint64_t v29;
  ausdk::AUElement *v30;
  ausdk::AUElement **v31;
  uint64_t v32;
  ausdk::AUElement *v33;
  ausdk::AUElement **v34;
  uint64_t v35;
  ausdk::AUElement *v36;
  ausdk::AUElement **v37;
  uint64_t v38;
  ausdk::AUElement *v39;
  ausdk::AUElement **v40;
  uint64_t v41;
  ausdk::AUElement *v42;
  ausdk::AUElement **v43;
  uint64_t v44;
  ausdk::AUElement *v45;
  ausdk::AUElement **v46;
  uint64_t v47;
  ausdk::AUElement *v48;
  ausdk::AUElement **v49;
  float v50;
  uint64_t v51;
  ausdk::AUElement *v52;
  ausdk::AUElement **v53;
  uint64_t v54;
  ausdk::AUElement *v55;
  ausdk::AUElement **v56;
  uint64_t v57;
  ausdk::AUElement *v58;
  ausdk::AUElement **v59;
  uint64_t v60;
  ausdk::AUElement *v61;
  ausdk::AUElement **v62;

  v2 = *((_QWORD *)this + 9);
  if (v2)
  {
    v3 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v2 + 32))(v2, 0);
  }
  else
  {
    v4 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v4)
      v3 = 0;
    else
      v3 = *v4;
  }
  Parameter = ausdk::AUElement::GetParameter(v3, 0xBu);
  v6 = *((_QWORD *)this + 9);
  if (v6)
  {
    v7 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v6 + 32))(v6, 0);
  }
  else
  {
    v8 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v8)
      v7 = 0;
    else
      v7 = *v8;
  }
  v9 = ausdk::AUElement::GetParameter(v7, 0xCu);
  v10 = *((_QWORD *)this + 9);
  if (v10)
  {
    v11 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v10 + 32))(v10, 0);
  }
  else
  {
    v12 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v12)
      v11 = 0;
    else
      v11 = *v12;
  }
  v13 = ausdk::AUElement::GetParameter(v11, 9u);
  v14 = *((_QWORD *)this + 9);
  if (v14)
  {
    v15 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v14 + 32))(v14, 0);
  }
  else
  {
    v16 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v16)
      v15 = 0;
    else
      v15 = *v16;
  }
  v17 = ausdk::AUElement::GetParameter(v15, 0xAu);
  for (i = 0; i != 24; i += 4)
  {
    v19 = (float *)((char *)this + i + 812);
    *v19 = Parameter;
    v19[6] = v9;
    v19[12] = v13;
    v19[18] = v17;
  }
  v20 = *((_QWORD *)this + 9);
  if (v20)
  {
    v21 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v20 + 32))(v20, 0);
  }
  else
  {
    v22 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v22)
      v21 = 0;
    else
      v21 = *v22;
  }
  *((float *)this + 231) = ausdk::AUElement::GetParameter(v21, 0x12u);
  v23 = *((_QWORD *)this + 9);
  if (v23)
  {
    v24 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v23 + 32))(v23, 0);
  }
  else
  {
    v25 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v25)
      v24 = 0;
    else
      v24 = *v25;
  }
  *((float *)this + 232) = ausdk::AUElement::GetParameter(v24, 0x13u);
  v26 = *((_QWORD *)this + 9);
  if (v26)
  {
    v27 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v26 + 32))(v26, 0);
  }
  else
  {
    v28 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v28)
      v27 = 0;
    else
      v27 = *v28;
  }
  *((float *)this + 233) = ausdk::AUElement::GetParameter(v27, 0x14u);
  v29 = *((_QWORD *)this + 9);
  if (v29)
  {
    v30 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v29 + 32))(v29, 0);
  }
  else
  {
    v31 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v31)
      v30 = 0;
    else
      v30 = *v31;
  }
  *((float *)this + 227) = ausdk::AUElement::GetParameter(v30, 0x15u);
  v32 = *((_QWORD *)this + 9);
  if (v32)
  {
    v33 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v32 + 32))(v32, 0);
  }
  else
  {
    v34 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v34)
      v33 = 0;
    else
      v33 = *v34;
  }
  *((float *)this + 228) = ausdk::AUElement::GetParameter(v33, 0x16u);
  v35 = *((_QWORD *)this + 9);
  if (v35)
  {
    v36 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v35 + 32))(v35, 0);
  }
  else
  {
    v37 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v37)
      v36 = 0;
    else
      v36 = *v37;
  }
  *((float *)this + 229) = ausdk::AUElement::GetParameter(v36, 0x17u);
  v38 = *((_QWORD *)this + 9);
  if (v38)
  {
    v39 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v38 + 32))(v38, 0);
  }
  else
  {
    v40 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v40)
      v39 = 0;
    else
      v39 = *v40;
  }
  *((float *)this + 230) = ausdk::AUElement::GetParameter(v39, 0x18u);
  v41 = *((_QWORD *)this + 9);
  if (v41)
  {
    v42 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v41 + 32))(v41, 0);
  }
  else
  {
    v43 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v43)
      v42 = 0;
    else
      v42 = *v43;
  }
  *((float *)this + 234) = ausdk::AUElement::GetParameter(v42, 0x19u);
  v44 = *((_QWORD *)this + 9);
  if (v44)
  {
    v45 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v44 + 32))(v44, 0);
  }
  else
  {
    v46 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v46)
      v45 = 0;
    else
      v45 = *v46;
  }
  *((_BYTE *)this + 1868) = ausdk::AUElement::GetParameter(v45, 0x1Cu) != 0.0;
  v47 = *((_QWORD *)this + 9);
  if (v47)
  {
    v48 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v47 + 32))(v47, 0);
  }
  else
  {
    v49 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v49)
      v48 = 0;
    else
      v48 = *v49;
  }
  v50 = ausdk::AUElement::GetParameter(v48, 0x21u);
  if (v50 == 0.0)
    v50 = 0.01;
  if (v50 >= 1.0)
    v50 = 1.0;
  *((float *)this + 494) = v50;
  v51 = *((_QWORD *)this + 9);
  if (v51)
  {
    v52 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v51 + 32))(v51, 0);
  }
  else
  {
    v53 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v53)
      v52 = 0;
    else
      v52 = *v53;
  }
  *((float *)this + 496) = ausdk::AUElement::GetParameter(v52, 0x22u);
  v54 = *((_QWORD *)this + 9);
  if (v54)
  {
    v55 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v54 + 32))(v54, 0);
  }
  else
  {
    v56 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v56)
      v55 = 0;
    else
      v55 = *v56;
  }
  *((float *)this + 495) = ausdk::AUElement::GetParameter(v55, 0x23u);
  v57 = *((_QWORD *)this + 9);
  if (v57)
  {
    v58 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v57 + 32))(v57, 0);
  }
  else
  {
    v59 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v59)
      v58 = 0;
    else
      v58 = *v59;
  }
  *((float *)this + 497) = ausdk::AUElement::GetParameter(v58, 0x24u);
  v60 = *((_QWORD *)this + 9);
  if (v60)
  {
    v61 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v60 + 32))(v60, 0);
  }
  else
  {
    v62 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v62)
      v61 = 0;
    else
      v61 = *v62;
  }
  *((_BYTE *)this + 2000) = ausdk::AUElement::GetParameter(v61, 0x29u) != 0.0;
}

double AUEcConvergenceOversight::ResetEnergyValsAndFlags(AUEcConvergenceOversight *this)
{
  uint64_t i;
  double result;
  float __A;

  __A = 0.0;
  vDSP_vfill(&__A, (float *)this + 322, 1, 6uLL);
  for (i = 0; i != 48; i += 8)
  {
    vDSP_vfill(&__A, *(float **)((char *)this + i + 1312), 1, 6uLL);
    vDSP_vfill(&__A, *(float **)((char *)this + i + 1360), 1, 6uLL);
  }
  *((_DWORD *)this + 352) = 0;
  vDSP_vfill(&__A, (float *)this + 353, 1, 6uLL);
  vDSP_vfill(&__A, (float *)this + 359, 1, 6uLL);
  vDSP_vfill(&__A, (float *)this + 365, 1, 6uLL);
  *((_DWORD *)this + 375) = 0;
  result = 0.0;
  *(_OWORD *)((char *)this + 1484) = 0u;
  *(_OWORD *)((char *)this + 1556) = 0u;
  *(_OWORD *)((char *)this + 1572) = 0u;
  *(_OWORD *)((char *)this + 1588) = 0u;
  *(_OWORD *)((char *)this + 1604) = 0u;
  *(_OWORD *)((char *)this + 1620) = 0u;
  return result;
}

float AUEcConvergenceOversight::Get_Band_Energies(AUEcConvergenceOversight *this, float *a2, float *a3, DSPSplitComplex a4, int *a5, int *a6, float a7, int a8)
{
  float *imagp;
  float *realp;
  uint64_t v16;
  float v17;
  uint64_t v18;
  const float *v19;
  vDSP_Length v20;
  float v21;
  float result;
  uint64_t __C;

  if (a8 < 1)
  {
    v17 = 0.0;
  }
  else
  {
    imagp = a4.imagp;
    realp = a4.realp;
    __C = 0;
    v16 = a8;
    v17 = 0.0;
    do
    {
      vDSP_svesq(&realp[*a5], 1, (float *)&__C + 1, *a6);
      v18 = *a5++;
      v19 = &imagp[v18];
      v20 = *a6++;
      vDSP_svesq(v19, 1, (float *)&__C, v20);
      v21 = (float)(*(float *)&__C + *((float *)&__C + 1)) * a7;
      *((float *)&__C + 1) = v21;
      *a3 = *a3 + v21;
      ++a3;
      v17 = v17 + v21;
      --v16;
    }
    while (v16);
  }
  result = log10f(v17 + *((float *)this + 466)) * 10.0;
  *a2 = result;
  return result;
}

void AUEcConvergenceOversight::ClearAllocations(AUEcConvergenceOversight *this)
{
  VPTimeFreqConverter *v2;
  uint64_t i;
  char *v4;
  VPTimeFreqConverter *v5;
  VPTimeFreqConverter *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;

  v2 = (VPTimeFreqConverter *)*((_QWORD *)this + 77);
  if (v2)
  {
    VPTimeFreqConverter::~VPTimeFreqConverter(v2);
    MEMORY[0x1BCC95CEC]();
    *((_QWORD *)this + 77) = 0;
  }
  for (i = 0; i != 48; i += 8)
  {
    v4 = (char *)this + i;
    v5 = *(VPTimeFreqConverter **)((char *)this + i + 624);
    if (v5)
    {
      VPTimeFreqConverter::~VPTimeFreqConverter(v5);
      MEMORY[0x1BCC95CEC]();
      *((_QWORD *)v4 + 78) = 0;
    }
    v6 = (VPTimeFreqConverter *)*((_QWORD *)v4 + 84);
    if (v6)
    {
      VPTimeFreqConverter::~VPTimeFreqConverter(v6);
      MEMORY[0x1BCC95CEC]();
      *((_QWORD *)v4 + 84) = 0;
    }
  }
  v7 = (void *)*((_QWORD *)this + 91);
  if (v7)
  {
    free(v7);
    *((_QWORD *)this + 91) = 0;
  }
  v8 = (void *)*((_QWORD *)this + 92);
  if (v8)
  {
    free(v8);
    *((_QWORD *)this + 92) = 0;
  }
  (*(void (**)(AUEcConvergenceOversight *, char *, uint64_t))(*(_QWORD *)this + 584))(this, (char *)this + 1312, 6);
  (*(void (**)(AUEcConvergenceOversight *, char *, uint64_t))(*(_QWORD *)this + 584))(this, (char *)this + 1360, 6);
  (*(void (**)(AUEcConvergenceOversight *, char *, uint64_t))(*(_QWORD *)this + 600))(this, (char *)this + 1144, 6);
  (*(void (**)(AUEcConvergenceOversight *, char *, uint64_t))(*(_QWORD *)this + 600))(this, (char *)this + 1192, 6);
  (*(void (**)(AUEcConvergenceOversight *, char *, uint64_t))(*(_QWORD *)this + 600))(this, (char *)this + 1240, 6);
  v9 = (void *)*((_QWORD *)this + 240);
  if (v9)
  {
    free(v9);
    *((_QWORD *)this + 240) = 0;
  }
  v10 = (void *)*((_QWORD *)this + 241);
  if (v10)
  {
    free(v10);
    *((_QWORD *)this + 241) = 0;
  }
  v11 = (void *)*((_QWORD *)this + 242);
  if (v11)
  {
    free(v11);
    *((_QWORD *)this + 242) = 0;
  }
  v12 = (void *)*((_QWORD *)this + 243);
  if (v12)
  {
    free(v12);
    *((_QWORD *)this + 243) = 0;
  }
  v13 = (void *)*((_QWORD *)this + 238);
  if (v13)
  {
    free(v13);
    *((_QWORD *)this + 238) = 0;
  }
  (*(void (**)(AUEcConvergenceOversight *, char *, uint64_t))(*(_QWORD *)this + 584))(this, (char *)this + 2024, 6);
  (*(void (**)(AUEcConvergenceOversight *, char *, uint64_t))(*(_QWORD *)this + 584))(this, (char *)this + 2072, 6);
  v14 = (void *)*((_QWORD *)this + 265);
  if (v14)
  {
    free(v14);
    *((_QWORD *)this + 265) = 0;
  }
  v15 = (void *)*((_QWORD *)this + 267);
  if (v15)
  {
    free(v15);
    *((_QWORD *)this + 267) = 0;
  }
  v16 = (void *)*((_QWORD *)this + 269);
  if (v16)
  {
    free(v16);
    *((_QWORD *)this + 269) = 0;
  }
  v17 = (void *)*((_QWORD *)this + 273);
  if (v17)
  {
    free(v17);
    *((_QWORD *)this + 273) = 0;
  }
  v18 = (void *)*((_QWORD *)this + 274);
  if (v18)
  {
    free(v18);
    *((_QWORD *)this + 274) = 0;
  }
  v19 = (void *)*((_QWORD *)this + 275);
  if (v19)
  {
    free(v19);
    *((_QWORD *)this + 275) = 0;
  }
  v20 = (void *)*((_QWORD *)this + 276);
  if (v20)
  {
    free(v20);
    *((_QWORD *)this + 276) = 0;
  }
}

void SoundFieldSpatializer::~SoundFieldSpatializer(SoundFieldSpatializer *this)
{
  uint64_t v2;

  *(_QWORD *)this = &off_1E69E20F0;
  v2 = *((_QWORD *)this + 42);
  *((_QWORD *)this + 42) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  Spatializer::~Spatializer(this);
}

{
  uint64_t v2;

  *(_QWORD *)this = &off_1E69E20F0;
  v2 = *((_QWORD *)this + 42);
  *((_QWORD *)this + 42) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  Spatializer::~Spatializer(this);
  JUMPOUT(0x1BCC95CECLL);
}

uint64_t SoundFieldSpatializer::reset(SoundFieldSpatializer *this)
{
  *((_BYTE *)this + 17) = 1;
  *((_BYTE *)this + 268) = *((_BYTE *)this + 132);
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 42) + 24))(*((_QWORD *)this + 42));
}

uint64_t SoundFieldSpatializer::processAccumulating(uint64_t a1, uint64_t a2, uint64_t a3, int a4, float a5, double a6, __n128 a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t result;

  if (!*(_BYTE *)(a1 + 16))
    return 4294956429;
  if (*(_DWORD *)(a1 + 344) != a4)
    return 4294956428;
  if (*(_BYTE *)(a1 + 132))
    a7.n128_f32[0] = a5;
  else
    a7.n128_f32[0] = 0.0;
  (*(void (**)(_QWORD, uint64_t, uint64_t, uint64_t, uint64_t, float, float, __n128))(**(_QWORD **)(a1 + 336)
                                                                                           + 16))(*(_QWORD *)(a1 + 336), a2, a3, a10, 1, *(float *)(a1 + 48), *(float *)(a1 + 52), a7);
  result = 0;
  *(_BYTE *)(a1 + 268) = *(_BYTE *)(a1 + 132);
  return result;
}

void SoundFieldSpatializer::SoundFieldSpatializer(SoundFieldSpatializer *this, const AudioChannelLayout *a2)
{
  _QWORD *v4;
  signed int mChannelLayoutTag;
  int v6;
  uint64_t v7;
  uint64_t v9;
  UInt32 mNumberChannelDescriptions;
  uint8x8_t v11;

  Spatializer::Spatializer(this);
  *v4 = &off_1E69E20F0;
  v4[42] = 0;
  mChannelLayoutTag = a2->mChannelLayoutTag;
  if ((int)a2->mChannelLayoutTag <= 7733252)
  {
    if (mChannelLayoutTag == 6619138)
    {
      v7 = operator new();
      *(_QWORD *)v7 = &off_1E69E2240;
      *(_QWORD *)(v7 + 8) = 0;
      *(_QWORD *)(v7 + 16) = 0;
      *(_DWORD *)(v7 + 24) = 0;
    }
    else
    {
      if (mChannelLayoutTag != 7077892)
      {
        v6 = 7274504;
LABEL_8:
        if (mChannelLayoutTag != v6)
        {
LABEL_9:
          v7 = operator new();
          *(_QWORD *)v7 = &off_1E69E2300;
          *(_QWORD *)(v7 + 8) = 0;
          *(_QWORD *)(v7 + 16) = 0;
          *(_DWORD *)(v7 + 152) = 0;
          *(_BYTE *)(v7 + 156) = 1;
          *(_QWORD *)(v7 + 160) = a2;
          *(_OWORD *)(v7 + 24) = 0u;
          *(_OWORD *)(v7 + 40) = 0u;
          *(_OWORD *)(v7 + 56) = 0u;
          *(_OWORD *)(v7 + 72) = 0u;
          *(_OWORD *)(v7 + 88) = 0u;
          *(_OWORD *)(v7 + 104) = 0u;
          *(_OWORD *)(v7 + 120) = 0u;
          *(_OWORD *)(v7 + 136) = 0u;
          goto LABEL_19;
        }
        goto LABEL_15;
      }
      v7 = operator new();
      *(_QWORD *)v7 = &off_1E69E2270;
      *(_QWORD *)(v7 + 8) = 0;
      *(_QWORD *)(v7 + 16) = 0;
      *(_DWORD *)(v7 + 24) = 0;
      *(_BYTE *)(v7 + 44) = 1;
    }
  }
  else
  {
    if (mChannelLayoutTag > 9175046)
    {
      if (mChannelLayoutTag != 9175047 && mChannelLayoutTag != 9699335)
        goto LABEL_9;
LABEL_15:
      v7 = operator new();
      *(_QWORD *)v7 = &off_1E69E22D0;
      *(_QWORD *)(v7 + 8) = 0;
      *(_DWORD *)(v7 + 16) = 0;
      *(_DWORD *)(v7 + 148) = 0;
      *(_BYTE *)(v7 + 152) = 1;
      *(_QWORD *)(v7 + 160) = a2;
      *(_OWORD *)(v7 + 20) = 0u;
      *(_OWORD *)(v7 + 36) = 0u;
      *(_OWORD *)(v7 + 52) = 0u;
      *(_OWORD *)(v7 + 68) = 0u;
      *(_OWORD *)(v7 + 84) = 0u;
      *(_OWORD *)(v7 + 100) = 0u;
      *(_OWORD *)(v7 + 116) = 0u;
      *(_OWORD *)(v7 + 132) = 0u;
      goto LABEL_19;
    }
    if (mChannelLayoutTag != 7733253)
    {
      v6 = 9109510;
      goto LABEL_8;
    }
    v7 = operator new();
    *(_QWORD *)v7 = &off_1E69E22A0;
    *(_QWORD *)(v7 + 8) = 0;
    *(_QWORD *)(v7 + 16) = 0;
    *(_DWORD *)(v7 + 24) = 0;
    *(_BYTE *)(v7 + 48) = 1;
  }
LABEL_19:
  v9 = *((_QWORD *)this + 42);
  *((_QWORD *)this + 42) = v7;
  if (v9)
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  if (a2->mChannelLayoutTag == 0x10000)
  {
    v11 = (uint8x8_t)vcnt_s8((int8x8_t)a2->mChannelBitmap);
    v11.i16[0] = vaddlv_u8(v11);
    mNumberChannelDescriptions = v11.i32[0];
  }
  else if (a2->mChannelLayoutTag)
  {
    mNumberChannelDescriptions = (unsigned __int16)a2->mChannelLayoutTag;
  }
  else
  {
    mNumberChannelDescriptions = a2->mNumberChannelDescriptions;
  }
  *((_DWORD *)this + 86) = mNumberChannelDescriptions;
  *((_DWORD *)this + 5) = 5200;
}

void sub_1B64A4650(_Unwind_Exception *a1)
{
  Spatializer *v1;
  uint64_t v3;

  v3 = *((_QWORD *)v1 + 42);
  *((_QWORD *)v1 + 42) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  Spatializer::~Spatializer(v1);
  _Unwind_Resume(a1);
}

unint64_t AU::DSPGraph::at_to_fourcc(const __CFDictionary **a1)
{
  const __CFDictionary *v2;
  unint64_t v3;
  const __CFString *v4;
  unsigned int *v5;
  std::runtime_error *exception;
  std::runtime_error *v8;
  void *__p[2];
  char v10;
  std::string v11;
  std::string v12;

  v2 = *a1;
  if (!v2)
    goto LABEL_13;
  v3 = (unint64_t)applesauce::CF::DictionaryRef_proxy::at_as<unsigned int,char const*&>(v2, "ParameterID");
  if ((v3 & 0xFF00000000) != 0)
    return v3;
  if (!*a1)
  {
LABEL_13:
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    applesauce::CF::construct_error(exception);
    goto LABEL_16;
  }
  v4 = (const __CFString *)applesauce::CF::details::at_key<char const*&>(*a1, "ParameterID");
  if (!v4)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    applesauce::CF::not_found(exception);
LABEL_16:
  }
  applesauce::CF::convert_to<std::string,0>(v4, (uint64_t)__p);
  if ((v10 & 0x80000000) == 0)
  {
    if (v10 == 4)
    {
      v5 = (unsigned int *)__p;
      goto LABEL_10;
    }
LABEL_17:
    v8 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::operator+<char>();
    std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>("\" to four character code", &v11, &v12);
    std::runtime_error::runtime_error(v8, &v12);
  }
  if (__p[1] != (void *)4)
    goto LABEL_17;
  v5 = (unsigned int *)__p[0];
LABEL_10:
  v3 = bswap32(*v5);
  if (v10 < 0)
    operator delete(__p[0]);
  return v3;
}

void sub_1B64A47F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  void *v27;
  int v28;

  if (a27 < 0)
    operator delete(__p);
  if (a21 < 0)
  {
    operator delete(a16);
    if ((v28 & 1) == 0)
    {
LABEL_8:
      if (a15 < 0)
        operator delete(a10);
      _Unwind_Resume(a1);
    }
  }
  else if (!v28)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v27);
  goto LABEL_8;
}

void std::vector<AU::DSPGraph::MetaParameter>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  char *v2;
  char *v4;
  void *v5;
  char *v6;

  v1 = *a1;
  v2 = (char *)**a1;
  if (v2)
  {
    v4 = (char *)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v6 = v4 - 48;
        std::__hash_table<std::__hash_value_type<unsigned int,AU::DSPGraph::Transformer>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,AU::DSPGraph::Transformer>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,AU::DSPGraph::Transformer>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,AU::DSPGraph::Transformer>>>::~__hash_table((uint64_t)(v4 - 40));
        v4 = v6;
      }
      while (v6 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t std::__hash_table<std::__hash_value_type<unsigned int,AU::DSPGraph::Transformer>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,AU::DSPGraph::Transformer>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,AU::DSPGraph::Transformer>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,AU::DSPGraph::Transformer>>>::~__hash_table(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;
  void *v5;

  v2 = *(_QWORD **)(a1 + 16);
  if (v2)
  {
    do
    {
      v3 = (_QWORD *)*v2;
      v4 = (void *)v2[3];
      if (v4)
      {
        v2[4] = v4;
        operator delete(v4);
      }
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
  v5 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v5)
    operator delete(v5);
  return a1;
}

uint64_t AU::DSPGraph::MetaParameterManager::loadMetaParametersFromPlist(AU::DSPGraph::MetaParameterManager *this, const __CFDictionary *a2)
{
  unint64_t v2;
  NSObject *v4;
  AU::DSPGraph::MetaParameterManager *v5;
  const __CFArray *v6;
  const __CFDictionary *v7;
  const void *v8;
  const void *v9;
  const __CFArray *v10;
  unint64_t v11;
  int v12;
  BOOL v16;
  CFTypeRef v17;
  unsigned int v18;
  const __CFArray *v19;
  unint64_t v20;
  unint64_t v21;
  const __CFNumber *v22;
  float v23;
  float v24;
  const __CFNumber *v25;
  float v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  float *v33;
  float *v34;
  uint64_t v35;
  __int128 v36;
  float *i;
  const std::string::value_type *v38;
  std::string::size_type v39;
  NSObject *v40;
  std::string *v41;
  int v42;
  std::string *v43;
  std::string *v44;
  unint64_t v45;
  unint64_t v46;
  uint8x8_t v47;
  uint64_t **v48;
  uint64_t *j;
  unint64_t v50;
  char *v51;
  unint64_t v52;
  uint64_t v53;
  float *v54;
  uint64_t v55;
  unint64_t v56;
  float *v57;
  float v58;
  float v59;
  unint64_t v60;
  float v61;
  float v62;
  _BOOL8 v63;
  unint64_t v64;
  unint64_t v65;
  int8x8_t prime;
  void *v67;
  void *v68;
  void *v69;
  uint64_t v70;
  _QWORD **v71;
  unint64_t v72;
  uint8x8_t v73;
  unint64_t v74;
  uint8x8_t v75;
  uint64_t v76;
  _QWORD *v77;
  unint64_t v78;
  void *v79;
  _QWORD *v80;
  _QWORD *v81;
  unint64_t v82;
  _QWORD *v83;
  unint64_t v84;
  unint64_t v85;
  uint64_t v86;
  _QWORD *v87;
  unint64_t v88;
  unint64_t v89;
  unint64_t v90;
  char *v91;
  char *v92;
  char *v93;
  uint64_t *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  char *v99;
  char *v100;
  char *v101;
  char *v102;
  std::runtime_error *v103;
  std::runtime_error *v104;
  std::runtime_error *v105;
  std::runtime_error *v106;
  std::runtime_error *v107;
  std::logic_error *v108;
  std::runtime_error *v109;
  std::runtime_error *v110;
  std::runtime_error *v111;
  std::runtime_error *v112;
  std::runtime_error *v113;
  std::runtime_error *v114;
  std::runtime_error *v115;
  std::runtime_error *v116;
  std::runtime_error *exception;
  unint64_t v120;
  unsigned int __val;
  BOOL v122;
  int v123;
  __int128 v124;
  std::string v125;
  std::string v126;
  std::string v127;
  CFArrayRef v128;
  CFTypeRef v129;
  CFTypeRef v130;
  CFArrayRef theArray;
  const __CFDictionary *v132;
  CFTypeRef cf;
  void *__p[2];
  __int128 v135;
  float v136;
  const __CFArray *v137;
  const __CFDictionary *v138;
  __int128 v139;
  char *v140;
  _BYTE buf[24];
  __int128 v142;
  float v143;
  uint64_t v144;

  v144 = *MEMORY[0x1E0C80C00];
  if (getAUDSPGraphLog(void)::onceToken != -1)
    dispatch_once(&getAUDSPGraphLog(void)::onceToken, &__block_literal_global_6983);
  v4 = getAUDSPGraphLog(void)::gLog;
  if (os_log_type_enabled((os_log_t)getAUDSPGraphLog(void)::gLog, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_1B5ED0000, v4, OS_LOG_TYPE_DEFAULT, "loading MetaParameterPlist:", buf, 2u);
  }
  v5 = this;
  if (a2 && CFDictionaryGetCount(a2))
  {
    v139 = 0uLL;
    v140 = 0;
    CFRetain(a2);
    applesauce::CF::DictionaryRef::DictionaryRef((applesauce::CF::DictionaryRef *)&v138, a2);
    if (!v138)
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Could not construct");
    }
    applesauce::CF::details::find_at_key<applesauce::CF::ArrayRef,char const(&)[7]>((applesauce::CF::ArrayRef *)&v137, v138, "Inputs");
    v6 = v137;
    if (!v137)
      goto LABEL_257;
    v120 = 0;
LABEL_10:
    if (v120 < CFArrayGetCount(v6))
    {
      v135 = 0u;
      *(_OWORD *)__p = 0u;
      v136 = 1.0;
      if (!v137)
      {
        v114 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v114, "Could not construct");
      }
      applesauce::CF::details::at_to<applesauce::CF::DictionaryRef>(v137, v120, (applesauce::CF::DictionaryRef *)&cf);
      v7 = (const __CFDictionary *)cf;
      if (cf)
        CFRetain(cf);
      v132 = v7;
      __val = AU::DSPGraph::at_to_fourcc(&v132);
      if (v7)
        CFRelease(v7);
      if (!cf)
      {
        v115 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v115, "Could not construct");
      }
      v8 = applesauce::CF::details::at_key<char const(&)[8]>((const __CFDictionary *)cf, "Outputs");
      if (!v8)
      {
        v116 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v116, "Could not find item");
      }
      v9 = v8;
      CFRetain(v8);
      applesauce::CF::ArrayRef::ArrayRef((applesauce::CF::ArrayRef *)&theArray, v9);
      v10 = theArray;
      if (!theArray)
      {
LABEL_252:
        v109 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v109, "Could not construct");
      }
      v11 = 0;
      v12 = bswap32(__val);
      v123 = v12;
      v16 = ((char)v12 - 127) < 0xFFFFFFA1
         || (((__int16)v12 >> 8) - 127) < 0xFFFFFFA1
         || ((v12 << 8 >> 24) - 127) < 0xFFFFFFA1
         || ((v12 >> 24) - 127) < 0xFFFFFFA1;
      v122 = v16;
      while (1)
      {
        if (v11 >= CFArrayGetCount(v10))
        {
          *(_DWORD *)buf = __val;
          *(_DWORD *)&buf[4] = 0;
          v83 = __p[0];
          v84 = (unint64_t)__p[1];
          __p[0] = 0;
          __p[1] = 0;
          *(_QWORD *)&buf[8] = v83;
          *(_QWORD *)&buf[16] = v84;
          v142 = v135;
          v143 = v136;
          if (*((_QWORD *)&v135 + 1))
          {
            v85 = *(_QWORD *)(v135 + 8);
            if ((v84 & (v84 - 1)) != 0)
            {
              if (v85 >= v84)
                v85 %= v84;
            }
            else
            {
              v85 &= v84 - 1;
            }
            v83[v85] = &v142;
            v135 = 0uLL;
          }
          v86 = *((_QWORD *)&v139 + 1);
          if (*((_QWORD *)&v139 + 1) < (unint64_t)v140)
          {
            **((_QWORD **)&v139 + 1) = *(_QWORD *)buf;
            v87 = (_QWORD *)(v86 + 48);
            std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__hash_table(v86 + 8, (uint64_t *)&buf[8]);
            goto LABEL_224;
          }
          v88 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)&v139 + 1) - v139) >> 4);
          v89 = v88 + 1;
          if (v88 + 1 > 0x555555555555555)
            std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
          if (0x5555555555555556 * ((uint64_t)&v140[-v139] >> 4) > v89)
            v89 = 0x5555555555555556 * ((uint64_t)&v140[-v139] >> 4);
          if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)&v140[-v139] >> 4) >= 0x2AAAAAAAAAAAAAALL)
            v90 = 0x555555555555555;
          else
            v90 = v89;
          if (v90)
          {
            if (v90 > 0x555555555555555)
              std::__throw_bad_array_new_length[abi:ne180100]();
            v91 = (char *)operator new(48 * v90);
          }
          else
          {
            v91 = 0;
          }
          v92 = &v91[48 * v88];
          v93 = &v91[48 * v90];
          *(_QWORD *)v92 = *(_QWORD *)buf;
          v87 = v92 + 48;
          std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__hash_table((uint64_t)(v92 + 8), (uint64_t *)&buf[8]);
          v94 = (uint64_t *)*((_QWORD *)&v139 + 1);
          v2 = v139;
          if (*((_QWORD *)&v139 + 1) == (_QWORD)v139)
          {
            *(_QWORD *)&v139 = v92;
            *((_QWORD *)&v139 + 1) = v92 + 48;
            v140 = v93;
            if (v94)
              goto LABEL_223;
          }
          else
          {
            do
            {
              v95 = *(v94 - 6);
              v94 -= 6;
              *((_QWORD *)v92 - 6) = v95;
              v92 -= 48;
              std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__hash_table((uint64_t)(v92 + 8), v94 + 1);
            }
            while (v94 != (uint64_t *)v2);
            v94 = (uint64_t *)*((_QWORD *)&v139 + 1);
            v2 = v139;
            *(_QWORD *)&v139 = v92;
            *((_QWORD *)&v139 + 1) = v87;
            v140 = v93;
            if (v94 != (uint64_t *)v2)
            {
              do
              {
                std::__hash_table<std::__hash_value_type<unsigned int,AU::DSPGraph::Transformer>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,AU::DSPGraph::Transformer>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,AU::DSPGraph::Transformer>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,AU::DSPGraph::Transformer>>>::~__hash_table((uint64_t)(v94 - 5));
                v94 -= 6;
              }
              while (v94 != (uint64_t *)v2);
              v94 = (uint64_t *)v2;
            }
            if (v94)
LABEL_223:
              operator delete(v94);
          }
LABEL_224:
          *((_QWORD *)&v139 + 1) = v87;
          std::__hash_table<std::__hash_value_type<unsigned int,AU::DSPGraph::Transformer>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,AU::DSPGraph::Transformer>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,AU::DSPGraph::Transformer>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,AU::DSPGraph::Transformer>>>::~__hash_table((uint64_t)&buf[8]);
          if (theArray)
            CFRelease(theArray);
          v5 = this;
          if (cf)
            CFRelease(cf);
          std::__hash_table<std::__hash_value_type<unsigned int,AU::DSPGraph::Transformer>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,AU::DSPGraph::Transformer>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,AU::DSPGraph::Transformer>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,AU::DSPGraph::Transformer>>>::~__hash_table((uint64_t)__p);
          ++v120;
          v6 = v137;
          if (!v137)
          {
LABEL_257:
            v113 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
            std::runtime_error::runtime_error(v113, "Could not construct");
          }
          goto LABEL_10;
        }
        if (!theArray)
        {
          v111 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(v111, "Could not construct");
        }
        applesauce::CF::details::at_to<applesauce::CF::DictionaryRef>(theArray, v11, (applesauce::CF::DictionaryRef *)&v130);
        v17 = v130;
        if (v130)
          CFRetain(v130);
        v129 = v17;
        v18 = AU::DSPGraph::at_to_fourcc((const __CFDictionary **)&v129);
        if (v129)
          CFRelease(v129);
        if (!v130)
        {
          v112 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(v112, "Could not construct");
        }
        applesauce::CF::details::find_at_key<applesauce::CF::ArrayRef,char const(&)[7]>((applesauce::CF::ArrayRef *)&v128, (const __CFDictionary *)v130, "Points");
        v19 = v128;
        if (!v128)
        {
LABEL_253:
          v110 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(v110, "Could not construct");
        }
        v20 = 0;
        v21 = 0;
        v124 = 0u;
        while (v21 < CFArrayGetCount(v19))
        {
          if (!v128)
          {
            v105 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
            std::runtime_error::runtime_error(v105, "Could not construct");
          }
          applesauce::CF::details::at_to<applesauce::CF::DictionaryRef>(v128, v21, (applesauce::CF::DictionaryRef *)buf);
          if (!*(_QWORD *)buf)
          {
            v106 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
            std::runtime_error::runtime_error(v106, "Could not construct");
          }
          v22 = (const __CFNumber *)applesauce::CF::details::at_key<char const(&)[6]>(*(const __CFDictionary **)buf, "Input");
          if (!v22)
          {
            v107 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
            std::runtime_error::runtime_error(v107, "Could not find item");
          }
          v23 = applesauce::CF::convert_to<float,0>(v22);
          if (!*(_QWORD *)buf)
          {
            v103 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
            std::runtime_error::runtime_error(v103, "Could not construct");
          }
          v24 = v23;
          v25 = (const __CFNumber *)applesauce::CF::details::at_key<char const(&)[7]>(*(const __CFDictionary **)buf, "Output");
          if (!v25)
          {
            v104 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
            std::runtime_error::runtime_error(v104, "Could not find item");
          }
          v26 = applesauce::CF::convert_to<float,0>(v25);
          v27 = *((_QWORD *)&v124 + 1);
          if (*((_QWORD *)&v124 + 1) >= v20)
          {
            v29 = (void *)v124;
            v2 = (uint64_t)(*((_QWORD *)&v124 + 1) - v124) >> 3;
            v30 = v2 + 1;
            if ((v2 + 1) >> 61)
              std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
            if ((uint64_t)(v20 - v124) >> 2 > v30)
              v30 = (uint64_t)(v20 - v124) >> 2;
            if (v20 - (unint64_t)v124 >= 0x7FFFFFFFFFFFFFF8)
              v31 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v31 = v30;
            if (v31)
              v31 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<SlidingWindowDTFT<float> *>>(v31);
            else
              v32 = 0;
            v33 = (float *)(v31 + 8 * v2);
            *v33 = v24;
            v33[1] = v26;
            v34 = v33;
            while (v27 != (_QWORD)v124)
            {
              v35 = *(_QWORD *)(v27 - 8);
              v27 -= 8;
              *((_QWORD *)v34 - 1) = v35;
              v34 -= 2;
            }
            v20 = v31 + 8 * v32;
            v28 = (uint64_t)(v33 + 2);
            *(_QWORD *)&v124 = v34;
            if (v29)
              operator delete(v29);
          }
          else
          {
            **((float **)&v124 + 1) = v24;
            *(float *)(*((_QWORD *)&v124 + 1) + 4) = v26;
            v28 = *((_QWORD *)&v124 + 1) + 8;
          }
          if (*(_QWORD *)buf)
            CFRelease(*(CFTypeRef *)buf);
          *(_QWORD *)&v36 = v124;
          *((_QWORD *)&v36 + 1) = v28;
          v124 = v36;
          ++v21;
          v19 = v128;
          if (!v128)
            goto LABEL_253;
        }
        memset(&v127, 0, sizeof(v127));
        for (i = (float *)v124; i != *((float **)&v124 + 1); i += 2)
        {
          caulk::make_string((caulk *)"{%.2f,%.2f} ", (uint64_t)buf, *i, i[1]);
          if (buf[23] >= 0)
            v38 = buf;
          else
            v38 = *(const std::string::value_type **)buf;
          if (buf[23] >= 0)
            v39 = buf[23];
          else
            v39 = *(_QWORD *)&buf[8];
          std::string::append(&v127, v38, v39);
          if ((buf[23] & 0x80000000) != 0)
            operator delete(*(void **)buf);
        }
        if (getAUDSPGraphLog(void)::onceToken != -1)
          dispatch_once(&getAUDSPGraphLog(void)::onceToken, &__block_literal_global_6983);
        v40 = getAUDSPGraphLog(void)::gLog;
        if (os_log_type_enabled((os_log_t)getAUDSPGraphLog(void)::gLog, OS_LOG_TYPE_DEFAULT))
        {
          v2 = (unint64_t)__p;
          *(_DWORD *)&buf[1] = v123;
          if (v122)
          {
            std::to_string(&v126, __val);
          }
          else
          {
            strcpy(&buf[5], "'");
            buf[0] = 39;
            std::string::basic_string[abi:ne180100]<0>(&v126, buf);
          }
          if ((v126.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v41 = &v126;
          else
            v41 = (std::string *)v126.__r_.__value_.__r.__words[0];
          v42 = bswap32(v18);
          *(_DWORD *)&buf[1] = v42;
          if (((char)v42 - 32) > 0x5E
            || (((__int16)v42 >> 8) - 32) > 0x5E
            || ((v42 << 8 >> 24) - 32) > 0x5E
            || ((v42 >> 24) - 32) > 0x5E)
          {
            std::to_string(&v125, v18);
          }
          else
          {
            strcpy(&buf[5], "'");
            buf[0] = 39;
            std::string::basic_string[abi:ne180100]<0>(&v125, buf);
          }
          v43 = &v125;
          if ((v125.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
            v43 = (std::string *)v125.__r_.__value_.__r.__words[0];
          v44 = &v127;
          if ((v127.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
            v44 = (std::string *)v127.__r_.__value_.__r.__words[0];
          *(_DWORD *)buf = 136315650;
          *(_QWORD *)&buf[4] = v41;
          *(_WORD *)&buf[12] = 2080;
          *(_QWORD *)&buf[14] = v43;
          *(_WORD *)&buf[22] = 2080;
          *(_QWORD *)&v142 = v44;
          _os_log_impl(&dword_1B5ED0000, v40, OS_LOG_TYPE_DEFAULT, "%s -> %s: [ %s]", buf, 0x20u);
          if (SHIBYTE(v125.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v125.__r_.__value_.__l.__data_);
          if (SHIBYTE(v126.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v126.__r_.__value_.__l.__data_);
        }
        v45 = v18;
        v46 = (unint64_t)__p[1];
        if (__p[1])
        {
          v47 = (uint8x8_t)vcnt_s8((int8x8_t)__p[1]);
          v47.i16[0] = vaddlv_u8(v47);
          if (v47.u32[0] > 1uLL)
          {
            v2 = v18;
            if (__p[1] <= (void *)v18)
              v2 = v18 % (unint64_t)__p[1];
          }
          else
          {
            v2 = (LODWORD(__p[1]) - 1) & v18;
          }
          v48 = (uint64_t **)*((_QWORD *)__p[0] + v2);
          if (v48)
          {
            for (j = *v48; j; j = (uint64_t *)*j)
            {
              v50 = j[1];
              if (v50 == v18)
              {
                if (*((_DWORD *)j + 4) == v18)
                  goto LABEL_189;
              }
              else
              {
                if (v47.u32[0] > 1uLL)
                {
                  if ((void *)v50 >= __p[1])
                    v50 %= (unint64_t)__p[1];
                }
                else
                {
                  v50 &= (unint64_t)__p[1] - 1;
                }
                if (v50 != v2)
                  break;
              }
            }
          }
        }
        v51 = (char *)operator new(0x30uLL);
        v52 = 126 - 2 * __clz((uint64_t)(*((_QWORD *)&v124 + 1) - v124) >> 3);
        *(_QWORD *)v51 = 0;
        *((_QWORD *)v51 + 1) = v18;
        *((_DWORD *)v51 + 4) = v18;
        *(_OWORD *)(v51 + 24) = v124;
        *((_QWORD *)v51 + 5) = v20;
        if (*((_QWORD *)&v124 + 1) == (_QWORD)v124)
          v53 = 0;
        else
          v53 = v52;
        _ZNSt3__111__introsortINS_17_ClassicAlgPolicyERZN2AU8DSPGraph11TransformerC1EONS_6vectorINS_4pairIffEENS_9allocatorIS7_EEEEEUlRKT_RKT0_E_PS7_Lb0EEEvT1_SL_SF_NS_15iterator_traitsISL_E15difference_typeEb((float *)v124, *((unint64_t *)&v124 + 1), v53, 1, *(double *)&v124);
        v54 = (float *)*((_QWORD *)v51 + 3);
        v55 = *((_QWORD *)v51 + 4) - (_QWORD)v54;
        if ((unint64_t)v55 >= 9)
        {
          v56 = v55 >> 3;
          if (v56 <= 2)
            v56 = 2;
          v58 = *v54;
          v57 = v54 + 2;
          v59 = v58;
          v60 = v56 - 1;
          do
          {
            v61 = v59;
            v59 = *v57;
            if ((float)(*v57 - v61) < 0.000001)
            {
              v108 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
              std::logic_error::logic_error(v108, "transform curve has duplicate points");
              v108->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5038] + 16);
            }
            v57 += 2;
            --v60;
          }
          while (v60);
        }
        v62 = (float)(unint64_t)(*((_QWORD *)&v135 + 1) + 1);
        if (!v46 || (float)(v136 * (float)v46) < v62)
          break;
LABEL_179:
        v80 = __p[0];
        v81 = (_QWORD *)*((_QWORD *)__p[0] + v2);
        if (v81)
        {
          *(_QWORD *)v51 = *v81;
        }
        else
        {
          *(_QWORD *)v51 = v135;
          *(_QWORD *)&v135 = v51;
          v80[v2] = &v135;
          if (!*(_QWORD *)v51)
            goto LABEL_188;
          v82 = *(_QWORD *)(*(_QWORD *)v51 + 8);
          if ((v46 & (v46 - 1)) != 0)
          {
            if (v82 >= v46)
              v82 %= v46;
          }
          else
          {
            v82 &= v46 - 1;
          }
          v81 = (char *)__p[0] + 8 * v82;
        }
        *v81 = v51;
LABEL_188:
        ++*((_QWORD *)&v135 + 1);
        *(_QWORD *)&v124 = 0;
LABEL_189:
        if (SHIBYTE(v127.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v127.__r_.__value_.__l.__data_);
        if ((_QWORD)v124)
          operator delete((void *)v124);
        if (v128)
          CFRelease(v128);
        if (v130)
          CFRelease(v130);
        ++v11;
        v10 = theArray;
        if (!theArray)
          goto LABEL_252;
      }
      v63 = (v46 & (v46 - 1)) != 0;
      if (v46 < 3)
        v63 = 1;
      v64 = v63 | (2 * v46);
      v65 = vcvtps_u32_f32(v62 / v136);
      if (v64 <= v65)
        prime = (int8x8_t)v65;
      else
        prime = (int8x8_t)v64;
      if (*(_QWORD *)&prime == 1)
      {
        prime = (int8x8_t)2;
      }
      else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
      {
        prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
      }
      v67 = __p[1];
      if ((void *)*(_QWORD *)&prime > __p[1])
        goto LABEL_138;
      if ((void *)*(_QWORD *)&prime < __p[1])
      {
        v74 = vcvtps_u32_f32((float)*((unint64_t *)&v135 + 1) / v136);
        if (__p[1] < (void *)3
          || (v75 = (uint8x8_t)vcnt_s8((int8x8_t)__p[1]), v75.i16[0] = vaddlv_u8(v75), v75.u32[0] > 1uLL))
        {
          v74 = std::__next_prime(v74);
        }
        else
        {
          v76 = 1 << -(char)__clz(v74 - 1);
          if (v74 >= 2)
            v74 = v76;
        }
        if (*(_QWORD *)&prime <= v74)
          prime = (int8x8_t)v74;
        if (*(_QWORD *)&prime < (unint64_t)v67)
        {
          if (prime)
          {
LABEL_138:
            if (*(_QWORD *)&prime >> 61)
              std::__throw_bad_array_new_length[abi:ne180100]();
            v68 = operator new(8 * *(_QWORD *)&prime);
            v69 = __p[0];
            __p[0] = v68;
            if (v69)
              operator delete(v69);
            v70 = 0;
            __p[1] = (void *)prime;
            do
              *((_QWORD *)__p[0] + v70++) = 0;
            while (*(_QWORD *)&prime != v70);
            v71 = (_QWORD **)v135;
            if ((_QWORD)v135)
            {
              v72 = *(_QWORD *)(v135 + 8);
              v73 = (uint8x8_t)vcnt_s8(prime);
              v73.i16[0] = vaddlv_u8(v73);
              if (v73.u32[0] > 1uLL)
              {
                if (v72 >= *(_QWORD *)&prime)
                  v72 %= *(_QWORD *)&prime;
              }
              else
              {
                v72 &= *(_QWORD *)&prime - 1;
              }
              *((_QWORD *)__p[0] + v72) = &v135;
              v77 = *v71;
              if (*v71)
              {
                while (1)
                {
                  v78 = v77[1];
                  if (v73.u32[0] > 1uLL)
                  {
                    if (v78 >= *(_QWORD *)&prime)
                      v78 %= *(_QWORD *)&prime;
                  }
                  else
                  {
                    v78 &= *(_QWORD *)&prime - 1;
                  }
                  if (v78 != v72)
                  {
                    if (!*((_QWORD *)__p[0] + v78))
                    {
                      *((_QWORD *)__p[0] + v78) = v71;
                      goto LABEL_163;
                    }
                    *v71 = (_QWORD *)*v77;
                    *v77 = **((_QWORD **)__p[0] + v78);
                    **((_QWORD **)__p[0] + v78) = v77;
                    v77 = v71;
                  }
                  v78 = v72;
LABEL_163:
                  v71 = (_QWORD **)v77;
                  v77 = (_QWORD *)*v77;
                  v72 = v78;
                  if (!v77)
                    goto LABEL_174;
                }
              }
            }
            goto LABEL_174;
          }
          v79 = __p[0];
          __p[0] = 0;
          if (v79)
            operator delete(v79);
          __p[1] = 0;
        }
      }
LABEL_174:
      v46 = (unint64_t)__p[1];
      if (((unint64_t)__p[1] & ((unint64_t)__p[1] - 1)) != 0)
      {
        if (__p[1] <= (void *)v45)
          v2 = v45 % (unint64_t)__p[1];
        else
          v2 = v45;
      }
      else
      {
        v2 = (LODWORD(__p[1]) - 1) & v45;
      }
      goto LABEL_179;
    }
    if (v137)
      CFRelease(v137);
    if (v138)
      CFRelease(v138);
    v99 = *(char **)v5;
    if (*(_QWORD *)v5)
    {
      v100 = (char *)*((_QWORD *)v5 + 1);
      v101 = *(char **)v5;
      if (v100 != v99)
      {
        do
        {
          v102 = v100 - 48;
          std::__hash_table<std::__hash_value_type<unsigned int,AU::DSPGraph::Transformer>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,AU::DSPGraph::Transformer>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,AU::DSPGraph::Transformer>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,AU::DSPGraph::Transformer>>>::~__hash_table((uint64_t)(v100 - 40));
          v100 = v102;
        }
        while (v102 != v99);
        v5 = this;
        v101 = *(char **)this;
      }
      *((_QWORD *)v5 + 1) = v99;
      operator delete(v101);
      *(_QWORD *)v5 = 0;
      *((_QWORD *)v5 + 1) = 0;
      *((_QWORD *)v5 + 2) = 0;
    }
    *(_OWORD *)v5 = v139;
    *((_QWORD *)v5 + 2) = v140;
    v140 = 0;
    v139 = 0uLL;
    *(_QWORD *)buf = &v139;
    std::vector<AU::DSPGraph::MetaParameter>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
  }
  else
  {
    v97 = *(_QWORD *)this;
    v96 = *((_QWORD *)this + 1);
    if (v96 != *(_QWORD *)this)
    {
      do
      {
        v98 = v96 - 48;
        std::__hash_table<std::__hash_value_type<unsigned int,AU::DSPGraph::Transformer>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,AU::DSPGraph::Transformer>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,AU::DSPGraph::Transformer>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,AU::DSPGraph::Transformer>>>::~__hash_table(v96 - 40);
        v96 = v98;
      }
      while (v98 != v97);
    }
    *((_QWORD *)this + 1) = v97;
  }
  return 0;
}

void sub_1B64A5E20()
{
  uint64_t v0;

  *(_QWORD *)(v0 - 192) = v0 - 224;
  std::vector<AU::DSPGraph::MetaParameter>::__destroy_vector::operator()[abi:ne180100]((void ***)(v0 - 192));
  JUMPOUT(0x1B64A5E5CLL);
}

void sub_1B64A5E54(_Unwind_Exception *exception_object, int a2)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

applesauce::CF::ArrayRef *applesauce::CF::details::find_at_key<applesauce::CF::ArrayRef,char const(&)[7]>(applesauce::CF::ArrayRef *a1, const __CFDictionary *a2, char *a3)
{
  const void *v4;
  const void *v5;
  std::runtime_error *exception;

  v4 = applesauce::CF::details::at_key<char const(&)[7]>(a2, a3);
  if (!v4)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    applesauce::CF::not_found(exception);
  }
  v5 = v4;
  CFRetain(v4);
  return applesauce::CF::ArrayRef::ArrayRef(a1, v5);
}

void sub_1B64A5ED4(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned int,AU::DSPGraph::Transformer>,void *>>>::operator()[abi:ne180100](char a1, _QWORD *__p)
{
  void *v3;

  if (a1)
  {
    v3 = (void *)__p[3];
    if (v3)
    {
      __p[4] = v3;
      operator delete(v3);
    }
  }
  else if (!__p)
  {
    return;
  }
  operator delete(__p);
}

float _ZNSt3__111__introsortINS_17_ClassicAlgPolicyERZN2AU8DSPGraph11TransformerC1EONS_6vectorINS_4pairIffEENS_9allocatorIS7_EEEEEUlRKT_RKT0_E_PS7_Lb0EEEvT1_SL_SF_NS_15iterator_traitsISL_E15difference_typeEb(float *a1, unint64_t a2, uint64_t a3, char a4, double a5)
{
  _DWORD *v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  float *v14;
  double v15;
  double v16;
  float *v17;
  float *v18;
  float v19;
  float v20;
  float *v21;
  float v22;
  float v23;
  float v24;
  float *v25;
  int v26;
  float v27;
  float v28;
  BOOL v29;
  float v30;
  _QWORD *v31;
  float *v32;
  float v33;
  float v34;
  float v35;
  int v36;
  float v37;
  float v38;
  float v39;
  unint64_t v40;
  BOOL v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  float v46;
  int v47;
  uint64_t v48;
  uint64_t v49;
  int v50;
  _DWORD *v51;
  int64_t v52;
  int64_t v53;
  int64_t v54;
  uint64_t v55;
  unint64_t v56;
  unint64_t v57;
  float v58;
  float v59;
  int v60;
  float *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  float v66;
  _DWORD *v67;
  _DWORD *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;
  float *v73;
  float v74;
  int v75;
  float *v76;
  float *v78;
  float *v79;
  float v80;
  int v81;
  float *v82;
  float *v83;
  int v84;

BOOL _ZNSt3__127__insertion_sort_incompleteB8ne180100INS_17_ClassicAlgPolicyERZN2AU8DSPGraph11TransformerC1EONS_6vectorINS_4pairIffEENS_9allocatorIS7_EEEEEUlRKT_RKT0_E_PS7_EEbT1_SL_SF_(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _BOOL8 result;
  float v6;
  float v7;
  int v8;
  float *v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  float v13;
  float v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;

  v4 = (a2 - a1) >> 3;
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v6 = *(float *)(a2 - 8);
      v7 = *(float *)a1;
      if (v6 < *(float *)a1)
      {
        *(float *)a1 = v6;
        *(float *)(a2 - 8) = v7;
        v8 = *(_DWORD *)(a1 + 4);
        *(_DWORD *)(a1 + 4) = *(_DWORD *)(a2 - 4);
        *(_DWORD *)(a2 - 4) = v8;
      }
      return result;
    case 3:
      _ZNSt3__17__sort3B8ne180100INS_17_ClassicAlgPolicyERZN24PiecewiseLinearTransform4SortEvEUlRT_RT0_E_PNS_4pairIffEEEEjT1_SC_SC_S5_((float *)a1, (float *)(a1 + 8), (float *)(a2 - 8));
      return 1;
    case 4:
      _ZNSt3__17__sort4B8ne180100INS_17_ClassicAlgPolicyERZN24PiecewiseLinearTransform4SortEvEUlRT_RT0_E_PNS_4pairIffEEEEvT1_SC_SC_SC_S5_((float *)a1, a1 + 8, a1 + 16, a2 - 8);
      return 1;
    case 5:
      _ZNSt3__17__sort5B8ne180100INS_17_ClassicAlgPolicyERZN24PiecewiseLinearTransform4SortEvEUlRT_RT0_E_PNS_4pairIffEEEEvT1_SC_SC_SC_SC_S5_((float *)a1, (float *)(a1 + 8), (float *)(a1 + 16), (float *)(a1 + 24), (float *)(a2 - 8));
      return 1;
    default:
      v9 = (float *)(a1 + 16);
      _ZNSt3__17__sort3B8ne180100INS_17_ClassicAlgPolicyERZN24PiecewiseLinearTransform4SortEvEUlRT_RT0_E_PNS_4pairIffEEEEjT1_SC_SC_S5_((float *)a1, (float *)(a1 + 8), (float *)(a1 + 16));
      v10 = a1 + 24;
      if (a1 + 24 == a2)
        return 1;
      v11 = 0;
      v12 = 0;
      break;
  }
  while (1)
  {
    v13 = *(float *)v10;
    v14 = *v9;
    if (*(float *)v10 < *v9)
    {
      v15 = *(_DWORD *)(v10 + 4);
      v16 = v11;
      while (1)
      {
        v17 = a1 + v16;
        v18 = *(_DWORD *)(a1 + v16 + 20);
        *(float *)(v17 + 24) = v14;
        *(_DWORD *)(v17 + 28) = v18;
        if (v16 == -16)
          break;
        v14 = *(float *)(v17 + 8);
        v16 -= 8;
        if (v13 >= v14)
        {
          v19 = a1 + v16 + 24;
          goto LABEL_12;
        }
      }
      v19 = a1;
LABEL_12:
      *(float *)v19 = v13;
      *(_DWORD *)(v19 + 4) = v15;
      if (++v12 == 8)
        return v10 + 8 == a2;
    }
    v9 = (float *)v10;
    v11 += 8;
    v10 += 8;
    if (v10 == a2)
      return 1;
  }
}

void AUEndpointVAD3::~AUEndpointVAD3(AUEndpointVAD3 *this)
{
  AUEndpointVAD3::~AUEndpointVAD3(this);
  JUMPOUT(0x1BCC95CECLL);
}

{
  uint64_t v2;
  void *v3;

  *(_QWORD *)this = &off_1E69E2330;
  *((_QWORD *)this + 66) = &unk_1E69E25A0;
  v2 = *((_QWORD *)this + 68);
  if (v2)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
    *((_QWORD *)this + 68) = 0;
  }
  v3 = (void *)*((_QWORD *)this + 70);
  if (v3)
  {
    *((_QWORD *)this + 71) = v3;
    operator delete(v3);
  }
  ausdk::AUBase::~AUBase(this);
}

uint64_t AUEndpointVAD3::Initialize(AUEndpointVAD3 *this)
{
  double v2;
  uint64_t result;
  NSObject *v4;
  uint64_t v5;
  uint64_t Element;
  __int128 v7;
  const __CFDictionary *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  float *v13;
  uint64_t v14;
  uint64_t v15;
  float *v16;
  float v17;
  double v18;
  unint64_t v19;
  uint64_t v20;
  NSObject *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t i;
  uint64_t v25;
  std::string *v26;
  std::string *v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  std::string *v32;
  NSObject *v33;
  void **v34;
  __int128 v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  void *v40;
  unint64_t v41;
  uint64_t v42;
  unint64_t v43;
  std::string *v44;
  uint64_t v45;
  std::string *v46;
  __int128 **v47;
  std::vector<std::string> *v48;
  std::vector<std::string> *v49;
  int *v50;
  int *v51;
  int v52;
  int *v53;
  int v54;
  int v55;
  int *v56;
  int *v57;
  int v58;
  int *v59;
  int v60;
  int v61;
  int *v62;
  int *v63;
  _DWORD *v64;
  int *v65;
  int v66;
  int v67;
  const std::string *v68;
  std::string *v69;
  const std::string *j;
  int *v71;
  _DWORD *v72;
  int *v73;
  int v74;
  int *v75;
  int *v76;
  int v77;
  int *v78;
  int *v79;
  int *v80;
  int v81;
  int v82;
  int v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  unsigned int v88;
  FeatureAudioAdaptor *v89;
  void *v90;
  uint64_t v91;
  uint64_t v92;
  unint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  CADeprecated::AUOutputBL *v100;
  int v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  unsigned int v106;
  FeatureAudioAdaptor *v107;
  void *v108;
  unint64_t v109;
  _QWORD *v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  unsigned int v115;
  uint64_t v116;
  uint64_t v117;
  CADeprecated::AUOutputBL *v118;
  _DWORD *v119;
  float v120;
  float v121;
  double v122;
  double v123;
  std::__shared_weak_count *v124;
  unint64_t *v125;
  unint64_t v126;
  float *v127;
  double v128;
  float v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  float *v133;
  double v134;
  float v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  unint64_t v139;
  std::vector<unsigned int> *v140;
  uint64_t v141;
  char *v142;
  _QWORD *v143;
  uint64_t v144;
  _QWORD *v145;
  uint64_t v146;
  _QWORD *v147;
  uint64_t v148;
  _QWORD *v149;
  uint64_t v150;
  const __CFDictionary *v151;
  _QWORD *v152;
  _QWORD *v153;
  _QWORD *v154;
  const __CFNumber *Value;
  int v156;
  NSObject *v157;
  int v158;
  int *v159;
  int v160;
  int v161;
  int *v162;
  int v163;
  int v164;
  uint64_t v165;
  float v166;
  float v167;
  uint64_t v168;
  uint64_t *v169;
  uint64_t v170;
  uint64_t *v171;
  uint64_t v172;
  uint64_t *v173;
  uint64_t v174;
  uint64_t *v175;
  _QWORD *v176;
  unsigned int v177;
  uint64_t v178;
  std::vector<unsigned int> *v179;
  uint64_t v180;
  _QWORD *v181;
  std::vector<unsigned int>::size_type v182;
  uint64_t v183;
  unsigned int v184;
  uint64_t v185;
  uint64_t v186;
  float32x2_t v187;
  float32x2_t v188;
  int32x2_t v189;
  _QWORD *v190;
  uint64_t v191;
  void *v192;
  uint64_t *v193;
  uint64_t v194;
  uint64_t *v195;
  uint64_t *v196;
  unint64_t v197;
  _QWORD *v198;
  _QWORD *v199;
  uint64_t v200;
  unint64_t v201;
  uint64_t v202;
  unint64_t v203;
  char *v204;
  uint64_t *v205;
  uint64_t v206;
  _QWORD *v207;
  _QWORD *v208;
  _QWORD *v209;
  _QWORD *v210;
  _QWORD *v211;
  _QWORD *v212;
  char *v213;
  unint64_t v214;
  _QWORD *v215;
  uint64_t v216;
  uint64_t v217;
  unint64_t v218;
  _QWORD *v219;
  uint64_t v220;
  _QWORD *v221;
  char *v222;
  char *v223;
  uint64_t v224;
  const char *v225;
  int v226;
  NSObject *v227;
  std::string *v228;
  AUEndpointVAD3 *v229;
  const __CFDictionary *theDict;
  unsigned int v231;
  __int128 v232;
  __int128 v233;
  uint64_t v234;
  __int128 v235;
  __int128 v236;
  uint64_t v237;
  void *__p[2];
  __int128 v239;
  uint64_t v240;
  __int128 v241;
  __int128 v242;
  uint64_t v243;
  std::string v244;
  std::vector<unsigned int> v245;
  std::vector<unsigned int> v246;
  std::string *v247;
  __int128 *v248;
  uint64_t v249;
  std::string *v250;
  __int128 *v251;
  uint64_t v252;
  std::vector<unsigned int> v253;
  float *v254;
  __int128 v255;
  unint64_t v256;
  std::vector<unsigned int> v257;
  uint8_t buf[32];
  unint64_t *v259;
  uint64_t v260;

  v260 = *MEMORY[0x1E0C80C00];
  (*(void (**)(AUEndpointVAD3 *))(*(_QWORD *)this + 64))(this);
  *((_DWORD *)this + 146) = 0;
  *((_OWORD *)this + 37) = 0u;
  v2 = *(double *)(ausdk::AUScope::SafeGetElement((AUEndpointVAD3 *)((char *)this + 80), 0) + 80);
  if (v2 != *(double *)(ausdk::AUScope::SafeGetElement((AUEndpointVAD3 *)((char *)this + 128), 0) + 80))
    return 4294956421;
  if (*(double *)(ausdk::AUScope::SafeGetElement((AUEndpointVAD3 *)((char *)this + 80), 0) + 80) < 8000.0)
  {
    if (EndpointVAD3LogScope(void)::once != -1)
      dispatch_once(&EndpointVAD3LogScope(void)::once, &__block_literal_global_8_17324);
    if (EndpointVAD3LogScope(void)::scope)
    {
      v4 = *(NSObject **)EndpointVAD3LogScope(void)::scope;
      if (!*(_QWORD *)EndpointVAD3LogScope(void)::scope)
        return 4294956421;
    }
    else
    {
      v4 = MEMORY[0x1E0C81028];
    }
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      *(_QWORD *)&buf[4] = "AUEndpointVAD3.cpp";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 94;
      _os_log_impl(&dword_1B5ED0000, v4, OS_LOG_TYPE_ERROR, "%25s:%-5d Audio sampling rate must be 8000 Hz or higher.", buf, 0x12u);
    }
    return 4294956421;
  }
  if (!*((_BYTE *)this + 552))
  {
    if (EndpointVAD3LogScope(void)::once != -1)
      dispatch_once(&EndpointVAD3LogScope(void)::once, &__block_literal_global_8_17324);
    if (EndpointVAD3LogScope(void)::scope)
    {
      v21 = *(NSObject **)EndpointVAD3LogScope(void)::scope;
      if (!*(_QWORD *)EndpointVAD3LogScope(void)::scope)
      {
LABEL_94:
        (*(void (**)(AUEndpointVAD3 *, uint64_t))(*(_QWORD *)this + 584))(this, 1);
        return 0;
      }
    }
    else
    {
      v21 = MEMORY[0x1E0C81028];
    }
    if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136315394;
      *(_QWORD *)&buf[4] = "AUEndpointVAD3.cpp";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 109;
      _os_log_impl(&dword_1B5ED0000, v21, OS_LOG_TYPE_DEFAULT, "%25s:%-5d AUEndpointVAD3: The top-level plist property is unset. Setting the AU to bypass mode (no VAD outputs).", buf, 0x12u);
    }
    goto LABEL_94;
  }
  v5 = *((_QWORD *)this + 68);
  Element = ausdk::AUScope::SafeGetElement((AUEndpointVAD3 *)((char *)this + 80), 0);
  v7 = *(_OWORD *)(Element + 96);
  v232 = *(_OWORD *)(Element + 80);
  v233 = v7;
  v234 = *(_QWORD *)(Element + 112);
  v229 = this;
  v231 = *((_DWORD *)this + 84);
  std::string::basic_string[abi:ne180100]<0>(&v244, "");
  if (!*(_QWORD *)(v5 + 168)
    || (v8 = *(const __CFDictionary **)(v5 + 176)) == 0
    || !*(_QWORD *)(v5 + 184)
    || !*(_QWORD *)(v5 + 192)
    || !*(_QWORD *)(v5 + 200))
  {
    std::string::__assign_external(&v244, "At least one settings dictionary is null. You must load all settings before initializing.", 0x59uLL);
    goto LABEL_277;
  }
  if (*(_BYTE *)(v5 + 8))
  {
    *(_BYTE *)(v5 + 8) = 0;
    v9 = *(_QWORD **)(v5 + 112);
    v10 = *(_QWORD **)(v5 + 120);
    if (v10 != v9)
    {
      do
      {
        v12 = (_QWORD *)*--v10;
        v11 = v12;
        *v10 = 0;
        if (v12)
          std::default_delete<EndpointDecisionLayerVAD3>::operator()[abi:ne180100](v11);
      }
      while (v10 != v9);
      v8 = *(const __CFDictionary **)(v5 + 176);
    }
    *(_QWORD *)(v5 + 120) = v9;
    *(_QWORD *)(v5 + 512) = *(_QWORD *)(v5 + 504);
  }
  v235 = 0uLL;
  *(_QWORD *)&v236 = 0;
  v255 = 0uLL;
  v256 = 0;
  memset(&v257, 0, sizeof(v257));
  memset(&v253, 0, sizeof(v253));
  v250 = 0;
  v251 = 0;
  v252 = 0;
  v247 = 0;
  v248 = 0;
  v249 = 0;
  memset(&v246, 0, sizeof(v246));
  memset(&v245, 0, sizeof(v245));
  __p[0] = 0;
  __p[1] = 0;
  *(_QWORD *)&v239 = 0;
  PListReader::GetSerializedFloat32DataFromDict(__p, v8, CFSTR("CategoryNames"));
  *(void **)buf = __p[0];
  StringArrayDecoder::BlobToStringArray_Priv((float **)buf, (uint64_t)&v235);
  PListReader::GetSerializedFloat32DataFromDict(__p, v8, CFSTR("CategoryDataMaxes"));
  EndpointVAD2::FloatVectorToUIntVector((uint64_t *)__p, &v257);
  PListReader::GetSerializedFloat32DataFromDict(__p, v8, CFSTR("TimingModelOrders"));
  EndpointVAD2::FloatVectorToUIntVector((uint64_t *)__p, &v253);
  PListReader::GetSerializedFloat32DataFromDict(__p, v8, CFSTR("CategoryValueNames"));
  v13 = (float *)__p[0];
  v14 = *((_QWORD *)&v255 + 1);
  v15 = v255;
  theDict = v8;
  if (*((_QWORD *)&v255 + 1) != (_QWORD)v255)
  {
    do
    {
      v14 -= 24;
      *(_QWORD *)buf = v14;
      std::vector<std::__fs::filesystem::path>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
    }
    while (v14 != v15);
    v14 = v255;
  }
  *((_QWORD *)&v255 + 1) = v15;
  v17 = *v13;
  v16 = v13 + 1;
  v254 = v16;
  v18 = v17 + 0.5;
  v19 = (unint64_t)v18;
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v256 - v14) >> 3) >= (unint64_t)v18)
  {
    if (!v19)
      goto LABEL_56;
  }
  else
  {
    if (v19 > 0xAAAAAAAAAAAAAAALL)
      std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
    v259 = &v256;
    *(_QWORD *)buf = std::__allocate_at_least[abi:ne180100]<std::allocator<AUPropertyItem>>((unint64_t)v18);
    *(_QWORD *)&buf[8] = *(_QWORD *)buf + v15 - v14;
    *(_QWORD *)&buf[16] = *(_QWORD *)&buf[8];
    *(_QWORD *)&buf[24] = *(_QWORD *)buf + 24 * v20;
    std::vector<std::vector<unsigned int>>::__swap_out_circular_buffer(&v255, buf);
    std::__split_buffer<std::vector<std::string>>::~__split_buffer((uint64_t)buf);
  }
  v22 = 0;
  do
  {
    v241 = 0uLL;
    *(_QWORD *)&v242 = 0;
    StringArrayDecoder::BlobToStringArray_Priv(&v254, (uint64_t)&v241);
    v23 = v241;
    for (i = 0; v23 != *((_QWORD *)&v241 + 1); v23 += 24)
    {
      if (*(char *)(v23 + 23) < 0)
        v25 = *(_QWORD *)(v23 + 8);
      else
        v25 = *(unsigned __int8 *)(v23 + 23);
      i += v25;
    }
    v16 = &v16[i + 1 + 0xEAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)&v241 + 1) - v241) >> 3)];
    v254 = v16;
    v26 = (std::string *)*((_QWORD *)&v255 + 1);
    if (*((_QWORD *)&v255 + 1) >= v256)
    {
      v28 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)&v255 + 1) - v255) >> 3);
      v29 = v28 + 1;
      if (v28 + 1 > 0xAAAAAAAAAAAAAAALL)
        std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
      if (0x5555555555555556 * ((uint64_t)(v256 - v255) >> 3) > v29)
        v29 = 0x5555555555555556 * ((uint64_t)(v256 - v255) >> 3);
      if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v256 - v255) >> 3) >= 0x555555555555555)
        v30 = 0xAAAAAAAAAAAAAAALL;
      else
        v30 = v29;
      v259 = &v256;
      if (v30)
        v30 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<AUPropertyItem>>(v30);
      else
        v31 = 0;
      v32 = (std::string *)(v30 + 24 * v28);
      *(_QWORD *)buf = v30;
      *(_QWORD *)&buf[8] = v32;
      *(_QWORD *)&buf[16] = v32;
      *(_QWORD *)&buf[24] = v30 + 24 * v31;
      v32->__r_.__value_.__r.__words[0] = 0;
      v32->__r_.__value_.__l.__size_ = 0;
      v32->__r_.__value_.__r.__words[2] = 0;
      std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(v32, (__int128 *)v241, *((__int128 **)&v241 + 1), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)&v241 + 1) - v241) >> 3));
      *(_QWORD *)&buf[16] += 24;
      std::vector<std::vector<unsigned int>>::__swap_out_circular_buffer(&v255, buf);
      v27 = (std::string *)*((_QWORD *)&v255 + 1);
      std::__split_buffer<std::vector<std::string>>::~__split_buffer((uint64_t)buf);
    }
    else
    {
      **((_QWORD **)&v255 + 1) = 0;
      v26->__r_.__value_.__l.__size_ = 0;
      v26->__r_.__value_.__r.__words[2] = 0;
      std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(v26, (__int128 *)v241, *((__int128 **)&v241 + 1), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)&v241 + 1) - v241) >> 3));
      v27 = v26 + 1;
    }
    *((_QWORD *)&v255 + 1) = v27;
    *(_QWORD *)buf = &v241;
    std::vector<std::__fs::filesystem::path>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
    ++v22;
  }
  while (v22 != v19);
LABEL_56:
  PListReader::GetSerializedFloat32DataFromDict(__p, theDict, CFSTR("ULDATFeatureNames"));
  *(void **)buf = __p[0];
  StringArrayDecoder::BlobToStringArray_Priv((float **)buf, (uint64_t)&v250);
  PListReader::GetSerializedFloat32DataFromDict(__p, theDict, CFSTR("ULDATFeatureDataMaxes"));
  EndpointVAD2::FloatVectorToUIntVector((uint64_t *)__p, &v246);
  PListReader::GetSerializedFloat32DataFromDict(__p, theDict, CFSTR("ASASuperFeatureNames"));
  *(void **)buf = __p[0];
  StringArrayDecoder::BlobToStringArray_Priv((float **)buf, (uint64_t)&v247);
  PListReader::GetSerializedFloat32DataFromDict(__p, theDict, CFSTR("ASASuperFeatureDataMaxes"));
  EndpointVAD2::FloatVectorToUIntVector((uint64_t *)__p, &v245);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  if (*(_BYTE *)(v5 + 536))
  {
    if (EndpointVAD3LogScope(void)::once != -1)
      dispatch_once(&EndpointVAD3LogScope(void)::once, &__block_literal_global_8_17324);
    if (EndpointVAD3LogScope(void)::scope)
    {
      v33 = *(NSObject **)EndpointVAD3LogScope(void)::scope;
      if (!*(_QWORD *)EndpointVAD3LogScope(void)::scope)
        goto LABEL_67;
    }
    else
    {
      v33 = MEMORY[0x1E0C81028];
    }
    if (os_log_type_enabled(v33, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136315394;
      *(_QWORD *)&buf[4] = "VAD3Configuration.cpp";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 51;
      _os_log_impl(&dword_1B5ED0000, v33, OS_LOG_TYPE_DEFAULT, "%25s:%-5d In VAD3Configuration::Initialize, Forcing reinitialization of VAD3Configuration.", buf, 0x12u);
    }
  }
LABEL_67:
  if ((__int128 *)(v5 + 544) != &v235)
    std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((std::vector<std::string> *)(v5 + 544), (std::string *)v235, *((__int128 **)&v235 + 1), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)&v235 + 1) - v235) >> 3));
  if ((std::vector<unsigned int> *)(v5 + 568) != &v257)
    std::vector<float>::__assign_with_size[abi:ne180100]<float const*,float const*>((char *)(v5 + 568), (char *)v257.__begin_, (uint64_t)v257.__end_, v257.__end_ - v257.__begin_);
  if ((std::vector<unsigned int> *)(v5 + 616) != &v253)
    std::vector<float>::__assign_with_size[abi:ne180100]<float const*,float const*>((char *)(v5 + 616), (char *)v253.__begin_, (uint64_t)v253.__end_, v253.__end_ - v253.__begin_);
  v34 = (void **)(v5 + 664);
  if ((__int128 *)(v5 + 664) != &v255)
  {
    v35 = v255;
    v36 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)&v255 + 1) - v255) >> 3);
    v37 = *(_QWORD *)(v5 + 680);
    v38 = *(_QWORD *)(v5 + 664);
    if (0xAAAAAAAAAAAAAAABLL * ((v37 - v38) >> 3) < v36)
    {
      if (v38)
      {
        v39 = *(_QWORD *)(v5 + 672);
        v40 = *(void **)(v5 + 664);
        if (v39 != v38)
        {
          do
          {
            v39 -= 24;
            *(_QWORD *)buf = v39;
            std::vector<std::__fs::filesystem::path>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
          }
          while (v39 != v38);
          v40 = *v34;
        }
        *(_QWORD *)(v5 + 672) = v38;
        operator delete(v40);
        v37 = 0;
        *v34 = 0;
        *(_QWORD *)(v5 + 672) = 0;
        *(_QWORD *)(v5 + 680) = 0;
      }
      if (v36 > 0xAAAAAAAAAAAAAAALL)
        goto LABEL_289;
      v41 = 0xAAAAAAAAAAAAAAABLL * (v37 >> 3);
      v42 = 2 * v41;
      if (2 * v41 <= v36)
        v42 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)&v35 + 1) - v35) >> 3);
      v43 = v41 >= 0x555555555555555 ? 0xAAAAAAAAAAAAAAALL : v42;
      if (v43 > 0xAAAAAAAAAAAAAAALL)
LABEL_289:
        std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
      v44 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<AUPropertyItem>>(v43);
      *(_QWORD *)(v5 + 664) = v44;
      *(_QWORD *)(v5 + 672) = v44;
      *(_QWORD *)(v5 + 680) = &v44[v45];
      v46 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::vector<std::string>>,std::vector<std::string>*,std::vector<std::string>*,std::vector<std::string>*>(v5 + 680, (__int128 **)v35, *((__int128 ***)&v35 + 1), v44);
      goto LABEL_90;
    }
    if (0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(v5 + 672) - v38) >> 3) < v36)
    {
      v47 = (__int128 **)(v255 + 8 * ((*(_QWORD *)(v5 + 672) - v38) >> 3));
      std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::vector<std::string> *,std::vector<std::string> *,std::vector<std::string> *>(v255, (uint64_t)v47, *(std::vector<std::string> **)(v5 + 664));
      v46 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::vector<std::string>>,std::vector<std::string>*,std::vector<std::string>*,std::vector<std::string>*>(v5 + 680, v47, *((__int128 ***)&v35 + 1), *(std::string **)(v5 + 672));
LABEL_90:
      *(_QWORD *)(v5 + 672) = v46;
      goto LABEL_99;
    }
    v48 = std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::vector<std::string> *,std::vector<std::string> *,std::vector<std::string> *>(v255, *((uint64_t *)&v255 + 1), *(std::vector<std::string> **)(v5 + 664));
    v49 = *(std::vector<std::string> **)(v5 + 672);
    while (v49 != v48)
    {
      *(_QWORD *)buf = --v49;
      std::vector<std::__fs::filesystem::path>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
    }
    *(_QWORD *)(v5 + 672) = v48;
  }
LABEL_99:
  if ((std::string **)(v5 + 752) != &v250)
    std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((std::vector<std::string> *)(v5 + 752), v250, v251, 0xAAAAAAAAAAAAAAABLL * (((char *)v251 - (char *)v250) >> 3));
  if ((std::vector<unsigned int> *)(v5 + 776) != &v246)
    std::vector<float>::__assign_with_size[abi:ne180100]<float const*,float const*>((char *)(v5 + 776), (char *)v246.__begin_, (uint64_t)v246.__end_, v246.__end_ - v246.__begin_);
  if ((std::string **)(v5 + 800) != &v247)
    std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((std::vector<std::string> *)(v5 + 800), v247, v248, 0xAAAAAAAAAAAAAAABLL * (((char *)v248 - (char *)v247) >> 3));
  if ((std::vector<unsigned int> *)(v5 + 824) != &v245)
    std::vector<float>::__assign_with_size[abi:ne180100]<float const*,float const*>((char *)(v5 + 824), (char *)v245.__begin_, (uint64_t)v245.__end_, v245.__end_ - v245.__begin_);
  v50 = *(int **)(v5 + 576);
  v51 = *(int **)(v5 + 568);
  if (v50 == v51)
  {
    v52 = 1;
  }
  else
  {
    v54 = *v51;
    v53 = v51 + 1;
    v52 = v54;
    while (v53 != v50)
    {
      v55 = *v53++;
      v52 *= v55;
    }
  }
  *(_DWORD *)(v5 + 736) = v52;
  v56 = *(int **)(v5 + 624);
  v57 = *(int **)(v5 + 616);
  if (v56 == v57)
  {
    v58 = 1;
  }
  else
  {
    v60 = *v57;
    v59 = v57 + 1;
    v58 = v60;
    while (v59 != v56)
    {
      v61 = *v59++;
      v58 *= v61;
    }
  }
  *(_DWORD *)(v5 + 740) = v58;
  *(_DWORD *)(v5 + 744) = v58 * v52;
  VADGenUtils::VectorReverseCumulativeProduct<unsigned int>((uint64_t *)(v5 + 568), (std::vector<unsigned int> *)(v5 + 592));
  VADGenUtils::VectorReverseCumulativeProduct<unsigned int>((uint64_t *)(v5 + 616), (std::vector<unsigned int> *)(v5 + 640));
  std::vector<unsigned int>::resize((std::vector<unsigned int> *)(v5 + 688), (uint64_t)(*(_QWORD *)(v5 + 576) - *(_QWORD *)(v5 + 568)) >> 1);
  v62 = *(int **)(v5 + 568);
  v63 = *(int **)(v5 + 576);
  if (v62 != v63)
  {
    v64 = *(_DWORD **)(v5 + 688);
    v65 = *(int **)(v5 + 616);
    do
    {
      v66 = *v62++;
      *v64 = v66;
      v67 = *v65++;
      v64[1] = v67;
      v64 += 2;
    }
    while (v62 != v63);
  }
  VADGenUtils::VectorReverseCumulativeProduct<unsigned int>((uint64_t *)(v5 + 688), (std::vector<unsigned int> *)(v5 + 712));
  std::vector<std::string>::resize((std::vector<std::string> *)(v5 + 848), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(v5 + 760) - *(_QWORD *)(v5 + 752)) >> 3)- 0x5555555555555555 * ((uint64_t)(*(_QWORD *)(v5 + 808) - *(_QWORD *)(v5 + 800)) >> 3));
  v68 = *(const std::string **)(v5 + 752);
  v69 = *(std::string **)(v5 + 848);
  while (v68 != *(const std::string **)(v5 + 760))
    std::string::operator=(v69++, v68++);
  for (j = *(const std::string **)(v5 + 800); j != *(const std::string **)(v5 + 808); ++j)
    std::string::operator=(v69++, j);
  std::vector<unsigned int>::resize((std::vector<unsigned int> *)(v5 + 872), ((uint64_t)(*(_QWORD *)(v5 + 832) - *(_QWORD *)(v5 + 824)) >> 2)+ ((uint64_t)(*(_QWORD *)(v5 + 784) - *(_QWORD *)(v5 + 776)) >> 2));
  v71 = *(int **)(v5 + 776);
  v72 = *(_DWORD **)(v5 + 872);
  v73 = *(int **)(v5 + 784);
  while (v71 != v73)
  {
    v74 = *v71++;
    *v72++ = v74;
  }
  v75 = *(int **)(v5 + 824);
  v76 = *(int **)(v5 + 832);
  while (v75 != v76)
  {
    v77 = *v75++;
    *v72++ = v77;
  }
  VADGenUtils::VectorReverseCumulativeProduct<unsigned int>((uint64_t *)(v5 + 872), (std::vector<unsigned int> *)(v5 + 896));
  v78 = *(int **)(v5 + 880);
  v79 = *(int **)(v5 + 872);
  if (v78 == v79)
  {
    v81 = 1;
  }
  else
  {
    v82 = *v79;
    v80 = v79 + 1;
    v81 = v82;
    while (v80 != v78)
    {
      v83 = *v80++;
      v81 *= v83;
    }
  }
  *(_DWORD *)(v5 + 920) = v81;
  *(_BYTE *)(v5 + 536) = 1;
  if (v245.__begin_)
  {
    v245.__end_ = v245.__begin_;
    operator delete(v245.__begin_);
  }
  if (v246.__begin_)
  {
    v246.__end_ = v246.__begin_;
    operator delete(v246.__begin_);
  }
  *(_QWORD *)buf = &v247;
  std::vector<std::__fs::filesystem::path>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
  *(_QWORD *)buf = &v250;
  std::vector<std::__fs::filesystem::path>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
  if (v253.__begin_)
  {
    v253.__end_ = v253.__begin_;
    operator delete(v253.__begin_);
  }
  if (v257.__begin_)
  {
    v257.__end_ = v257.__begin_;
    operator delete(v257.__begin_);
  }
  *(_QWORD *)buf = &v255;
  std::vector<std::vector<std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
  *(_QWORD *)buf = &v235;
  std::vector<std::__fs::filesystem::path>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
  v259 = 0;
  memset(buf, 0, sizeof(buf));
  v84 = operator new();
  *(_BYTE *)(v84 + 8) = 0;
  *(_QWORD *)(v84 + 20) = 0;
  *(_QWORD *)(v84 + 12) = 0;
  *(_QWORD *)(v84 + 32) = 0;
  *(_QWORD *)(v84 + 40) = 0;
  *(_DWORD *)(v84 + 48) = 0;
  *(_QWORD *)v84 = &off_1E69CAFF8;
  *(_QWORD *)(v84 + 64) = 0;
  *(_QWORD *)(v84 + 72) = 0;
  *(_QWORD *)(v84 + 56) = 0;
  v85 = *(_QWORD *)(v5 + 32);
  v86 = *(_QWORD *)(v85 + 8);
  *(_QWORD *)(v85 + 8) = v84;
  if (v86)
    (*(void (**)(uint64_t))(*(_QWORD *)v86 + 8))(v86);
  v87 = *(_QWORD *)(*(_QWORD *)(v5 + 32) + 8);
  v243 = v234;
  v241 = v232;
  v242 = v233;
  (*(void (**)(uint64_t, __int128 *, _QWORD))(*(_QWORD *)v87 + 16))(v87, &v241, *(_QWORD *)(v5 + 184));
  (*(void (**)(_QWORD, uint8_t *))(**(_QWORD **)(*(_QWORD *)(v5 + 32) + 8) + 40))(*(_QWORD *)(*(_QWORD *)(v5 + 32) + 8), buf);
  *(_DWORD *)(v5 + 84) = (*(_QWORD *)(v5 + 784) - *(_QWORD *)(v5 + 776)) >> 2;
  v88 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v5 + 32) + 8) + 16);
  v89 = (FeatureAudioAdaptor *)operator new();
  FeatureAudioAdaptor::FeatureAudioAdaptor(v89, (const CAStreamBasicDescription *)&v232, (const CAStreamBasicDescription *)buf, v231, v88, *(int (**)(void *, unsigned int, const AudioBufferList **, AudioBufferList **))(v5 + 32), v90);
  std::unique_ptr<FeatureAudioAdaptor>::reset[abi:ne180100](*(uint64_t **)(v5 + 32), (uint64_t)v89);
  FixedArray<unsigned int>::Allocate(*(_QWORD *)(v5 + 32) + 48, *(unsigned int *)(v5 + 84));
  v91 = *(_QWORD *)(v5 + 32);
  v92 = *(_QWORD *)(v91 + 56);
  v93 = *(_QWORD *)(v91 + 64) - v92;
  if (!v93 || (*(_DWORD *)v92 = 4, v93 <= 8))
    __assert_rtn("ElementAt", "FeatureTimeSeries.h", 77, "index < mArray.size()");
  *(_QWORD *)(v92 + 4) = 0x500000006;
  FixedArray<unsigned int>::Allocate(v91 + 80, *(unsigned int *)(v5 + 84));
  v94 = 0;
  v95 = *(_QWORD *)(*(_QWORD *)(v5 + 32) + 88);
  v96 = (*(_QWORD *)(*(_QWORD *)(v5 + 32) + 96) - v95) >> 2;
  do
  {
    if (v96 == v94)
      __assert_rtn("ElementAt", "FeatureTimeSeries.h", 77, "index < mArray.size()");
    *(_DWORD *)(v95 + 4 * v94) = v94;
    ++v94;
  }
  while (v94 != 3);
  v97 = operator new();
  LODWORD(__p[0]) = 0;
  EnsembleTimeSeriesEvent<float>::EnsembleTimeSeriesEvent(v97, 0xAu, __p);
  v98 = *(_QWORD *)(v5 + 32);
  v99 = *(_QWORD *)(v98 + 16);
  *(_QWORD *)(v98 + 16) = v97;
  if (v99)
    (*(void (**)(uint64_t))(*(_QWORD *)v99 + 8))(v99);
  v100 = (CADeprecated::AUOutputBL *)operator new();
  CADeprecated::AUOutputBL::AUOutputBL(v100, (const CAStreamBasicDescription *)buf);
  v101 = 2 * v231;
  std::unique_ptr<CADeprecated::AUOutputBL>::reset[abi:ne180100]((uint64_t *)(*(_QWORD *)(v5 + 32) + 112), (uint64_t)v100);
  CADeprecated::AUOutputBL::Allocate(*(_QWORD *)(*(_QWORD *)(v5 + 32) + 112), 2 * v231);
  CADeprecated::AUOutputBL::Prepare(*(_QWORD *)(*(_QWORD *)(v5 + 32) + 112), *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v5 + 32) + 112) + 64));
  *(_DWORD *)(*(_QWORD *)(v5 + 32) + 120) = 2 * v231;
  v240 = 0;
  *(_OWORD *)__p = 0u;
  v239 = 0u;
  v102 = operator new();
  *(_BYTE *)(v102 + 8) = 0;
  *(_QWORD *)(v102 + 20) = 0;
  *(_QWORD *)(v102 + 12) = 0;
  *(_QWORD *)(v102 + 32) = 0;
  *(_QWORD *)(v102 + 40) = 0;
  *(_DWORD *)(v102 + 48) = 0;
  *(_QWORD *)v102 = &off_1E69D7928;
  *(_OWORD *)(v102 + 56) = 0u;
  *(_OWORD *)(v102 + 72) = 0u;
  *(_OWORD *)(v102 + 88) = 0u;
  *(_OWORD *)(v102 + 104) = 0u;
  *(_OWORD *)(v102 + 120) = 0u;
  *(_OWORD *)(v102 + 136) = 0u;
  *(_OWORD *)(v102 + 152) = 0u;
  *(_OWORD *)(v102 + 168) = 0u;
  *(_OWORD *)(v102 + 184) = 0u;
  *(_OWORD *)(v102 + 200) = 0u;
  *(_OWORD *)(v102 + 216) = 0u;
  *(_OWORD *)(v102 + 232) = 0u;
  *(_QWORD *)(v102 + 248) = 0;
  *(_QWORD *)(v102 + 264) = 0;
  *(_QWORD *)(v102 + 272) = 0;
  *(_QWORD *)(v102 + 280) = 0;
  v103 = *(_QWORD *)(v5 + 48);
  v104 = *(_QWORD *)(v103 + 8);
  *(_QWORD *)(v103 + 8) = v102;
  if (v104)
    (*(void (**)(uint64_t))(*(_QWORD *)v104 + 8))(v104);
  v105 = *(_QWORD *)(*(_QWORD *)(v5 + 48) + 8);
  v237 = v234;
  v235 = v232;
  v236 = v233;
  (*(void (**)(uint64_t, __int128 *, _QWORD))(*(_QWORD *)v105 + 16))(v105, &v235, *(_QWORD *)(v5 + 192));
  (*(void (**)(_QWORD, void **))(**(_QWORD **)(*(_QWORD *)(v5 + 48) + 8) + 40))(*(_QWORD *)(*(_QWORD *)(v5 + 48) + 8), __p);
  *(_DWORD *)(v5 + 88) = (*(_QWORD *)(v5 + 832) - *(_QWORD *)(v5 + 824)) >> 2;
  v106 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v5 + 48) + 8) + 16);
  v107 = (FeatureAudioAdaptor *)operator new();
  FeatureAudioAdaptor::FeatureAudioAdaptor(v107, (const CAStreamBasicDescription *)&v232, (const CAStreamBasicDescription *)__p, v231, v106, *(int (**)(void *, unsigned int, const AudioBufferList **, AudioBufferList **))(v5 + 48), v108);
  std::unique_ptr<FeatureAudioAdaptor>::reset[abi:ne180100](*(uint64_t **)(v5 + 48), (uint64_t)v107);
  *(_DWORD *)(v5 + 92) = (*(_QWORD *)(v5 + 880) - *(_QWORD *)(v5 + 872)) >> 2;
  FixedArray<unsigned int>::Allocate(*(_QWORD *)(v5 + 48) + 48, *(unsigned int *)(v5 + 88));
  FixedArray<unsigned int>::Allocate(*(_QWORD *)(v5 + 48) + 80, *(unsigned int *)(v5 + 88));
  if (*(_DWORD *)(v5 + 88))
  {
    v109 = 0;
    v110 = *(_QWORD **)(v5 + 48);
    v111 = v110[7];
    v112 = (v110[8] - v111) >> 2;
    do
    {
      if (v112 == v109 || (*(_DWORD *)(v111 + 4 * v109) = v109 + 19, v113 = v110[11], v109 >= (v110[12] - v113) >> 2))
        __assert_rtn("ElementAt", "FeatureTimeSeries.h", 77, "index < mArray.size()");
      *(_DWORD *)(v113 + 4 * v109) = v109 + *(_DWORD *)(v5 + 84);
      ++v109;
    }
    while (v109 < *(unsigned int *)(v5 + 88));
  }
  v114 = operator new();
  v115 = *(_DWORD *)(v5 + 88) + 19;
  LODWORD(v255) = 0;
  EnsembleTimeSeriesEvent<float>::EnsembleTimeSeriesEvent(v114, v115, &v255);
  v116 = *(_QWORD *)(v5 + 48);
  v117 = *(_QWORD *)(v116 + 16);
  *(_QWORD *)(v116 + 16) = v114;
  if (v117)
    (*(void (**)(uint64_t))(*(_QWORD *)v117 + 8))(v117);
  v118 = (CADeprecated::AUOutputBL *)operator new();
  CADeprecated::AUOutputBL::AUOutputBL(v118, (const CAStreamBasicDescription *)__p);
  std::unique_ptr<CADeprecated::AUOutputBL>::reset[abi:ne180100]((uint64_t *)(*(_QWORD *)(v5 + 48) + 112), (uint64_t)v118);
  CADeprecated::AUOutputBL::Allocate(*(_QWORD *)(*(_QWORD *)(v5 + 48) + 112), v101);
  CADeprecated::AUOutputBL::Prepare(*(_QWORD *)(*(_QWORD *)(v5 + 48) + 112), *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v5 + 48) + 112) + 64));
  v119 = *(_DWORD **)(v5 + 48);
  v119[30] = v101;
  v121 = (float)v231 / *(double *)&v232;
  v122 = v121;
  v123 = *(double *)(*(_QWORD *)v119 + 32);
  if (v123 >= *(double *)(**(_QWORD **)(v5 + 32) + 32))
    v123 = *(double *)(**(_QWORD **)(v5 + 32) + 32);
  v120 = *(double *)&v232 / (double)v231;
  std::allocate_shared[abi:ne180100]<VectorTimeSeriesSynchronizer<float>,std::allocator<VectorTimeSeriesSynchronizer<float>>,unsigned int &,unsigned int &,float &,void>(&v255, (ceil(v122 / v123) + 1.0), *(_DWORD *)(v5 + 92), v120);
  std::shared_ptr<vp::xml::_xmlNode const>::operator=[abi:ne180100](v5 + 64, &v255);
  v124 = (std::__shared_weak_count *)*((_QWORD *)&v255 + 1);
  if (*((_QWORD *)&v255 + 1))
  {
    v125 = (unint64_t *)(*((_QWORD *)&v255 + 1) + 8);
    do
      v126 = __ldaxr(v125);
    while (__stlxr(v126 - 1, v125));
    if (!v126)
    {
      ((void (*)(std::__shared_weak_count *))v124->__on_zero_shared)(v124);
      std::__shared_weak_count::__release_weak(v124);
    }
  }
  v127 = *(float **)(v5 + 32);
  v128 = *(double *)(*(_QWORD *)v127 + 32);
  v129 = 1.0 / v128;
  v127[41] = v129;
  v130 = operator new();
  LODWORD(v255) = 10;
  EnsembleTimeSeriesBuffer<float>::EnsembleTimeSeriesBuffer(v130, vcvtpd_u64_f64(v122 / v128), &v255);
  v131 = *(_QWORD *)(v5 + 32);
  v132 = *(_QWORD *)(v131 + 24);
  *(_QWORD *)(v131 + 24) = v130;
  if (v132)
    (*(void (**)(uint64_t))(*(_QWORD *)v132 + 8))(v132);
  std::shared_ptr<clsp::CLSPKernel_Logs>::operator=[abi:ne180100]((_QWORD *)(*(_QWORD *)(v5 + 32) + 32), *(_QWORD *)(v5 + 64), *(_QWORD *)(v5 + 72));
  v133 = *(float **)(v5 + 48);
  v134 = *(double *)(*(_QWORD *)v133 + 32);
  v135 = 1.0 / v134;
  v133[41] = v135;
  v136 = operator new();
  LODWORD(v255) = *(_DWORD *)(v5 + 88) + 19;
  EnsembleTimeSeriesBuffer<float>::EnsembleTimeSeriesBuffer(v136, vcvtpd_u64_f64(v122 / v134), &v255);
  v137 = *(_QWORD *)(v5 + 48);
  v138 = *(_QWORD *)(v137 + 24);
  *(_QWORD *)(v137 + 24) = v136;
  if (v138)
    (*(void (**)(uint64_t))(*(_QWORD *)v138 + 8))(v138);
  std::shared_ptr<clsp::CLSPKernel_Logs>::operator=[abi:ne180100]((_QWORD *)(*(_QWORD *)(v5 + 48) + 32), *(_QWORD *)(v5 + 64), *(_QWORD *)(v5 + 72));
  v139 = *(_QWORD *)(v5 + 576) - *(_QWORD *)(v5 + 568);
  *(_DWORD *)(v5 + 96) = v139 >> 2;
  std::vector<unsigned int>::resize((std::vector<unsigned int> *)(v5 + 384), (v139 >> 2));
  v140 = (std::vector<unsigned int> *)operator new();
  v140->__begin_ = 0;
  v140->__end_ = 0;
  v140->__end_cap_.__value_ = 0;
  v141 = *(_QWORD *)(v5 + 376);
  *(_QWORD *)(v5 + 376) = v140;
  if (v141)
    std::default_delete<std::vector<unsigned int>>::operator()[abi:ne180100](v141);
  std::vector<unsigned int>::resize(v140, *(unsigned int *)(v5 + 96));
  v142 = *(char **)(v5 + 376);
  if ((char *)(v5 + 568) != v142)
    std::vector<float>::__assign_with_size[abi:ne180100]<float const*,float const*>(v142, *(char **)(v5 + 568), *(_QWORD *)(v5 + 576), (uint64_t)(*(_QWORD *)(v5 + 576) - *(_QWORD *)(v5 + 568)) >> 2);
  v143 = (_QWORD *)operator new();
  *v143 = 0;
  v143[1] = 0;
  v143[2] = 0;
  v144 = *(_QWORD *)(v5 + 296);
  *(_QWORD *)(v5 + 296) = v143;
  if (v144)
    std::default_delete<std::vector<float>>::operator()[abi:ne180100](v144);
  v145 = (_QWORD *)operator new();
  *v145 = 0;
  v145[1] = 0;
  v145[2] = 0;
  v146 = *(_QWORD *)(v5 + 304);
  *(_QWORD *)(v5 + 304) = v145;
  if (v146)
    std::default_delete<std::vector<float>>::operator()[abi:ne180100](v146);
  v147 = (_QWORD *)operator new();
  *v147 = 0;
  v147[1] = 0;
  v147[2] = 0;
  v148 = *(_QWORD *)(v5 + 312);
  *(_QWORD *)(v5 + 312) = v147;
  if (v148)
    std::default_delete<std::vector<float>>::operator()[abi:ne180100](v148);
  v149 = (_QWORD *)operator new();
  *v149 = 0;
  v149[1] = 0;
  v149[2] = 0;
  v150 = *(_QWORD *)(v5 + 320);
  *(_QWORD *)(v5 + 320) = v149;
  if (v150)
    std::default_delete<std::vector<float>>::operator()[abi:ne180100](v150);
  v151 = *(const __CFDictionary **)(v5 + 200);
  v152 = *(_QWORD **)(v5 + 296);
  v153 = *(_QWORD **)(v5 + 304);
  v154 = *(_QWORD **)(v5 + 312);
  LODWORD(v253.__begin_) = 0;
  v255 = 0uLL;
  v256 = 0;
  PListReader::GetSerializedFloat32DataFromDict(v152, &v253, (unint64_t)&v255, v151, CFSTR("FullStatePrior"));
  PListReader::GetSerializedFloat32DataFromDict(v153, &v253, (unint64_t)&v255, v151, CFSTR("FullStateTransMx"));
  PListReader::GetSerializedFloat32DataFromDict(v154, &v253, (unint64_t)&v255, v151, CFSTR("TopLayerObservationPrior"));
  PListReader::GetSerializedFloat32DataFromDict(v149, &v253, (unint64_t)&v255, v151, CFSTR("TopLayerObservationTransMx"));
  if (!CFDictionaryContainsKey(v151, CFSTR("ViterbiRingBufferSizeSeconds")))
  {
    if (EndpointVAD3LogScope(void)::once != -1)
      dispatch_once(&EndpointVAD3LogScope(void)::once, &__block_literal_global_8_17324);
    if (EndpointVAD3LogScope(void)::scope)
    {
      v157 = *(NSObject **)EndpointVAD3LogScope(void)::scope;
      if (!*(_QWORD *)EndpointVAD3LogScope(void)::scope)
      {
LABEL_198:
        v156 = 0;
        *(_DWORD *)(v5 + 328) = 1142292480;
        goto LABEL_199;
      }
    }
    else
    {
      v157 = MEMORY[0x1E0C81028];
    }
    if (os_log_type_enabled(v157, OS_LOG_TYPE_DEFAULT))
    {
      LODWORD(v257.__begin_) = 136315394;
      *(std::vector<unsigned int>::pointer *)((char *)&v257.__begin_ + 4) = (std::vector<unsigned int>::pointer)"EndpointVAD3.cpp";
      WORD2(v257.__end_) = 1024;
      *(_DWORD *)((char *)&v257.__end_ + 6) = 1084;
      _os_log_impl(&dword_1B5ED0000, v157, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Viterbi ring buffer size (in seconds) not found in plist. Resorting to using legacy default value.", (uint8_t *)&v257, 0x12u);
    }
    goto LABEL_198;
  }
  Value = (const __CFNumber *)CFDictionaryGetValue(v151, CFSTR("ViterbiRingBufferSizeSeconds"));
  if (CFNumberGetValue(Value, kCFNumberFloat32Type, (void *)(v5 + 328)))
    v156 = 0;
  else
    v156 = -50;
LABEL_199:
  if ((_QWORD)v255)
  {
    *((_QWORD *)&v255 + 1) = v255;
    operator delete((void *)v255);
  }
  if (v156)
  {
    std::string::__assign_external(&v244, "Failed to read Viterbi settings from plist.", 0x2BuLL);
LABEL_277:
    if (EndpointVAD3LogScope(void)::once != -1)
      dispatch_once(&EndpointVAD3LogScope(void)::once, &__block_literal_global_8_17324);
    if (EndpointVAD3LogScope(void)::scope)
    {
      v227 = *(NSObject **)EndpointVAD3LogScope(void)::scope;
      if (!*(_QWORD *)EndpointVAD3LogScope(void)::scope)
        goto LABEL_287;
    }
    else
    {
      v227 = MEMORY[0x1E0C81028];
    }
    if (os_log_type_enabled(v227, OS_LOG_TYPE_ERROR))
    {
      v228 = &v244;
      if ((v244.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v228 = (std::string *)v244.__r_.__value_.__r.__words[0];
      *(_DWORD *)buf = 136315650;
      *(_QWORD *)&buf[4] = "EndpointVAD3.cpp";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 331;
      *(_WORD *)&buf[18] = 2080;
      *(_QWORD *)&buf[20] = v228;
      _os_log_impl(&dword_1B5ED0000, v227, OS_LOG_TYPE_ERROR, "%25s:%-5d Error initializing EndpointVAD3: %s", buf, 0x1Cu);
    }
LABEL_287:
    abort();
  }
  std::vector<float>::__assign_with_size[abi:ne180100]<float const*,float const*>((char *)(v5 + 216), *(char **)(v5 + 568), *(_QWORD *)(v5 + 576), (uint64_t)(*(_QWORD *)(v5 + 576) - *(_QWORD *)(v5 + 568)) >> 2);
  std::vector<float>::__assign_with_size[abi:ne180100]<float const*,float const*>((char *)(v5 + 240), *(char **)(v5 + 616), *(_QWORD *)(v5 + 624), (uint64_t)(*(_QWORD *)(v5 + 624) - *(_QWORD *)(v5 + 616)) >> 2);
  v158 = *(_DWORD *)(v5 + 920);
  *(_DWORD *)(v5 + 288) = v158;
  v159 = *(int **)(v5 + 216);
  v160 = 1;
  while (v159 != *(int **)(v5 + 224))
  {
    v161 = *v159++;
    v160 *= v161;
  }
  v162 = *(int **)(v5 + 240);
  v163 = 1;
  while (v162 != *(int **)(v5 + 248))
  {
    v164 = *v162++;
    v163 *= v164;
  }
  v165 = (v163 * v160);
  if (v165 != (uint64_t)(*(_QWORD *)(*(_QWORD *)(v5 + 296) + 8) - **(_QWORD **)(v5 + 296)) >> 2)
  {
    v225 = "mViterbiFullStatePrior.get()->size() == Dt*Dm";
    v226 = 265;
    goto LABEL_272;
  }
  if ((_DWORD)v165 * (_DWORD)v165 != (uint64_t)(*(_QWORD *)(*(_QWORD *)(v5 + 304) + 8) - **(_QWORD **)(v5 + 304)) >> 2)
  {
    v225 = "mViterbiFullStateTransMx.get()->size() == Dt*Dm * Dt*Dm";
    v226 = 266;
    goto LABEL_272;
  }
  if (v160 * v158 != (uint64_t)(*(_QWORD *)(*(_QWORD *)(v5 + 312) + 8) - **(_QWORD **)(v5 + 312)) >> 2)
  {
    v225 = "mViterbiObsPriorTopLayer.get()->size() == mObservationDim*Dt";
    v226 = 267;
    goto LABEL_272;
  }
  if (v158 * v158 * v160 != (uint64_t)(*(_QWORD *)(*(_QWORD *)(v5 + 320) + 8) - **(_QWORD **)(v5 + 320)) >> 2)
  {
    v225 = "mViterbiObsTransMxTopLayer.get()->size() == mObservationDim*mObservationDim * Dt";
    v226 = 268;
LABEL_272:
    __assert_rtn("Initialize", "EndpointVAD3.cpp", v226, v225);
  }
  v166 = *(float *)(*(_QWORD *)(v5 + 48) + 164);
  v167 = *(float *)(v5 + 328);
  v168 = operator new();
  v169 = *(uint64_t **)(v5 + 296);
  v170 = *v169;
  if (v169[1] == *v169
    || (v171 = *(uint64_t **)(v5 + 304), v172 = *v171, v171[1] == *v171)
    || (v173 = *(uint64_t **)(v5 + 312), v174 = *v173, v173[1] == *v173)
    || (v175 = *(uint64_t **)(v5 + 320), v175[1] == *v175))
  {
    std::vector<std::vector<float>>::__throw_out_of_range[abi:ne180100]();
  }
  MixViterbiProd::MixViterbiProd(v168, v5 + 216, v5 + 240, *(_DWORD *)(v5 + 288), v170, v172, v174, *v175, (float)(unint64_t)((float)(v166 * v167) + 0.5));
  std::unique_ptr<MixViterbiProd>::reset[abi:ne180100]((uint64_t *)(v5 + 104), v168);
  *(_BYTE *)(v5 + 360) = 0;
  *(_DWORD *)(v5 + 364) = 0;
  v176 = (_QWORD *)operator new();
  v177 = *(_DWORD *)(v5 + 92);
  LODWORD(v255) = 0;
  TimeSeriesEvent<float>::TimeSeriesEvent((uint64_t)v176, v177, &v255);
  *v176 = &off_1E69E2E20;
  v176[6] = 0;
  v176[7] = 0;
  v178 = *(_QWORD *)(v5 + 336);
  *(_QWORD *)(v5 + 336) = v176;
  if (v178)
    (*(void (**)(uint64_t))(*(_QWORD *)v178 + 8))(v178);
  v179 = (std::vector<unsigned int> *)operator new();
  std::vector<unsigned int>::vector(v179, *(unsigned int *)(v5 + 92));
  v180 = *(_QWORD *)(v5 + 344);
  *(_QWORD *)(v5 + 344) = v179;
  if (v180)
    std::default_delete<std::vector<unsigned int>>::operator()[abi:ne180100](v180);
  v181 = (_QWORD *)operator new();
  v182 = *(unsigned int *)(v5 + 96);
  LODWORD(v255) = 0;
  TimeSeriesEvent<unsigned int>::TimeSeriesEvent((uint64_t)v181, v182, &v255);
  *v181 = &off_1E69E2E40;
  v181[6] = 0;
  v181[7] = 0;
  v183 = *(_QWORD *)(v5 + 352);
  *(_QWORD *)(v5 + 352) = v181;
  if (v183)
    (*(void (**)(uint64_t))(*(_QWORD *)v183 + 8))(v183);
  std::vector<std::vector<unsigned int>>::reserve((_QWORD *)(v5 + 432), 0);
  std::vector<std::vector<std::vector<float>>>::reserve((_QWORD *)(v5 + 480), 0);
  std::vector<std::vector<float>>::reserve((uint64_t *)(v5 + 456), 0);
  std::vector<DataTimeStamp>::reserve((void **)(v5 + 408), 0);
  v184 = 0;
  *(_QWORD *)(v5 + 528) = 0;
  v185 = v232;
  while (v184 < ((*(_QWORD *)(v5 + 576) - *(_QWORD *)(v5 + 568)) >> 2))
  {
    v186 = operator new();
    v187 = *(float32x2_t *)(v5 + 144);
    v188 = *(float32x2_t *)(v5 + 152);
    v189 = *(int32x2_t *)(v5 + 160);
    *(double *)v186 = *(float *)(v5 + 140);
    *(_DWORD *)(v186 + 8) = 1000;
    *(_QWORD *)(v186 + 16) = 0;
    *(_QWORD *)(v186 + 24) = 0;
    *(_QWORD *)(v186 + 32) = 0;
    std::vector<TimeStampedEvent<unsigned int>>::reserve((void **)(v186 + 16), 0x3E9uLL);
    *(_QWORD *)(v186 + 96) = 0;
    *(_QWORD *)(v186 + 40) = 0;
    *(_QWORD *)(v186 + 48) = 0;
    *(float64x2_t *)(v186 + 56) = vcvtq_f64_f32(v187);
    *(float64x2_t *)(v186 + 72) = vcvtq_f64_f32(v188);
    *(int32x2_t *)(v186 + 88) = vrev64_s32(v189);
    *(_QWORD *)(v186 + 104) = 0;
    *(_QWORD *)(v186 + 112) = 0;
    *(_DWORD *)(v186 + 120) = 0;
    *(_QWORD *)(v186 + 128) = v185;
    *(_BYTE *)(v186 + 136) = 1;
    *(_QWORD *)(v186 + 152) = 0;
    *(_QWORD *)(v186 + 160) = 0;
    *(_OWORD *)(v186 + 176) = 0u;
    *(_OWORD *)(v186 + 192) = 0u;
    *(_QWORD *)(v186 + 208) = 0;
    *(_QWORD *)(v186 + 216) = 1000;
    *(_BYTE *)(v186 + 224) = 0;
    std::vector<TimeStampedEvent<unsigned int>>::reserve((void **)(v186 + 96), 0x3E8uLL);
    *(_QWORD *)(v186 + 104) = *(_QWORD *)(v186 + 96);
    v190 = (_QWORD *)operator new();
    v191 = *(unsigned int *)(v186 + 216);
    v192 = (void *)operator new[]();
    bzero(v192, 4 * v191);
    *v190 = v192;
    v190[1] = v191;
    bzero(v192, 4 * (int)v191);
    v193 = *(uint64_t **)(v186 + 192);
    *(_QWORD *)(v186 + 192) = v190;
    if (v193)
      std::default_delete<MRRingBuffer<AUEndpointVAD3_Decision>>::operator()[abi:ne180100](v193);
    v194 = operator new();
    MRRingBuffer<DataTimeStamp>::MRRingBuffer(v194, *(_DWORD *)(v186 + 216));
    v195 = *(uint64_t **)(v186 + 200);
    *(_QWORD *)(v186 + 200) = v194;
    if (v195)
      std::default_delete<MRRingBuffer<DataTimeStamp>>::operator()[abi:ne180100](v195);
    v196 = *(uint64_t **)(v5 + 120);
    v197 = *(_QWORD *)(v5 + 128);
    if ((unint64_t)v196 >= v197)
    {
      v199 = *(_QWORD **)(v5 + 112);
      v200 = v196 - v199;
      v201 = v200 + 1;
      if ((unint64_t)(v200 + 1) >> 61)
        std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
      v202 = v197 - (_QWORD)v199;
      if (v202 >> 2 > v201)
        v201 = v202 >> 2;
      if ((unint64_t)v202 >= 0x7FFFFFFFFFFFFFF8)
        v203 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v203 = v201;
      if (v203)
      {
        if (v203 >> 61)
          std::__throw_bad_array_new_length[abi:ne180100]();
        v204 = (char *)operator new(8 * v203);
        v199 = *(_QWORD **)(v5 + 112);
        v196 = *(uint64_t **)(v5 + 120);
      }
      else
      {
        v204 = 0;
      }
      v205 = (uint64_t *)&v204[8 * v200];
      *v205 = v186;
      v198 = v205 + 1;
      while (v196 != v199)
      {
        v206 = *--v196;
        *v196 = 0;
        *--v205 = v206;
      }
      v207 = *(_QWORD **)(v5 + 112);
      v208 = *(_QWORD **)(v5 + 120);
      *(_QWORD *)(v5 + 112) = v205;
      *(_QWORD *)(v5 + 120) = v198;
      *(_QWORD *)(v5 + 128) = &v204[8 * v203];
      while (v208 != v207)
      {
        v210 = (_QWORD *)*--v208;
        v209 = v210;
        *v208 = 0;
        if (v210)
          std::default_delete<EndpointDecisionLayerVAD3>::operator()[abi:ne180100](v209);
      }
      if (v207)
        operator delete(v207);
    }
    else
    {
      *v196 = v186;
      v198 = v196 + 1;
    }
    *(_QWORD *)(v5 + 120) = v198;
    ++v184;
  }
  *(_BYTE *)(v5 + 8) = 1;
  *(_DWORD *)(v5 + 12) = v231;
  *(_QWORD *)(v5 + 16) = v232;
  if (SHIBYTE(v244.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v244.__r_.__value_.__l.__data_);
  v211 = (_QWORD *)*((_QWORD *)v229 + 68);
  v212 = (_QWORD *)v211[63];
  v211[64] = v212;
  v213 = (char *)v229 + 528;
  v214 = v211[65];
  if ((unint64_t)v212 >= v214)
  {
    v216 = v214 - (_QWORD)v212;
    v217 = v216 >> 2;
    if ((unint64_t)(v216 >> 2) <= 1)
      v217 = 1;
    if ((unint64_t)v216 >= 0x7FFFFFFFFFFFFFF8)
      v218 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v218 = v217;
    v219 = std::__allocate_at_least[abi:ne180100]<std::allocator<SlidingWindowDTFT<float> *>>(v218);
    v221 = &v219[v220];
    *v219 = v213;
    v215 = v219 + 1;
    v223 = (char *)v211[63];
    v222 = (char *)v211[64];
    if (v222 != v223)
    {
      do
      {
        v224 = *((_QWORD *)v222 - 1);
        v222 -= 8;
        *--v219 = v224;
      }
      while (v222 != v223);
      v222 = (char *)v211[63];
    }
    v211[63] = v219;
    v211[64] = v215;
    v211[65] = v221;
    if (v222)
      operator delete(v222);
  }
  else
  {
    *v212 = v213;
    v215 = v212 + 1;
  }
  result = 0;
  v211[64] = v215;
  return result;
}

void sub_1B64A84FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char *a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,void *a36,uint64_t a37,int a38,__int16 a39,char a40,char a41,void *__p,uint64_t a43,uint64_t a44,void *a45,uint64_t a46,uint64_t a47,char a48,uint64_t a49,uint64_t a50,char a51,uint64_t a52,uint64_t a53,void *a54,uint64_t a55)
{
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  void *v59;

  *(_QWORD *)(v56 + 672) = v55;
  if (__p)
  {
    a43 = (uint64_t)__p;
    operator delete(__p);
  }
  if (a45)
  {
    a46 = (uint64_t)a45;
    operator delete(a45);
  }
  a31 = &a48;
  std::vector<std::__fs::filesystem::path>::__destroy_vector::operator()[abi:ne180100]((void ***)&a31);
  a31 = &a51;
  std::vector<std::__fs::filesystem::path>::__destroy_vector::operator()[abi:ne180100]((void ***)&a31);
  if (a54)
  {
    a55 = (uint64_t)a54;
    operator delete(a54);
  }
  v59 = *(void **)(v57 - 224);
  if (v59)
  {
    *(_QWORD *)(v57 - 216) = v59;
    operator delete(v59);
  }
  a31 = (char *)(v57 - 248);
  std::vector<std::vector<std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a31);
  a31 = &a19;
  std::vector<std::__fs::filesystem::path>::__destroy_vector::operator()[abi:ne180100]((void ***)&a31);
  if (a41 < 0)
    operator delete(a36);
  _Unwind_Resume(a1);
}

uint64_t AUEndpointVAD3::Reset(AUEndpointVAD3 *this)
{
  if (*((_BYTE *)this + 17) && *((_DWORD *)this + 146))
    (*(void (**)(AUEndpointVAD3 *))(*(_QWORD *)this + 56))(this);
  return 0;
}

uint64_t AUEndpointVAD3::GetPropertyInfo(AUEndpointVAD3 *this, int a2, int a3, unsigned int a4, unsigned int *a5, BOOL *a6)
{
  uint64_t result;
  char v7;
  unsigned int v8;

  if (a3)
    return 4294956417;
  switch(a2)
  {
    case 65010:
      v7 = *((_BYTE *)this + 17) ^ 1;
      goto LABEL_6;
    case 65011:
    case 65013:
    case 65016:
    case 65018:
    case 65021:
      v7 = 0;
      v8 = 0;
      goto LABEL_22;
    case 65012:
    case 65017:
      v7 = 0;
      v8 = 40;
      goto LABEL_22;
    case 65014:
    case 65015:
    case 65019:
    case 65020:
    case 65037:
    case 65040:
      goto LABEL_11;
    case 65022:
      v7 = 1;
      goto LABEL_16;
    case 65023:
      v8 = 8;
      goto LABEL_21;
    case 65024:
      v8 = 0;
      v7 = *((_DWORD *)this + 146) != 0;
      goto LABEL_22;
    case 65025:
    case 65026:
    case 65027:
    case 65028:
    case 65029:
    case 65030:
    case 65031:
    case 65032:
      v7 = *((_BYTE *)this + 17) ^ 1;
      goto LABEL_12;
    case 65033:
    case 65034:
    case 65035:
    case 65036:
      v7 = 0;
LABEL_16:
      v8 = 1;
      goto LABEL_22;
    case 65038:
    case 65039:
    case 65041:
    case 65042:
    case 65043:
    case 65044:
      v7 = 0;
LABEL_6:
      v8 = 8;
      goto LABEL_22;
    case 65045:
      v7 = 0;
      v8 = 392;
      goto LABEL_22;
    default:
      if (a2 == 21)
      {
        v8 = 4;
LABEL_21:
        v7 = 1;
      }
      else
      {
        if (a2 != 3700)
          return 4294956417;
LABEL_11:
        v7 = 0;
LABEL_12:
        v8 = 4;
      }
LABEL_22:
      result = 0;
      *a6 = v7;
      *a5 = v8;
      break;
  }
  return result;
}

uint64_t AUEndpointVAD3::GetProperty(AUEndpointVAD3 *this, int a2, int a3, unsigned int a4, void **a5)
{
  uint64_t result;
  NSObject *v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  float **v15;
  int v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  const char *v24;
  int v25;
  const char *v26;
  __int16 v27;
  int v28;
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  if (a3)
    return 4294956417;
  result = 4294956417;
  switch(a2)
  {
    case 65010:
      if (EndpointVAD3LogScope(void)::once != -1)
        dispatch_once(&EndpointVAD3LogScope(void)::once, &__block_literal_global_8_17324);
      if (EndpointVAD3LogScope(void)::scope)
      {
        v8 = *(NSObject **)EndpointVAD3LogScope(void)::scope;
        if (!*(_QWORD *)EndpointVAD3LogScope(void)::scope)
          return 4294956449;
      }
      else
      {
        v8 = MEMORY[0x1E0C81028];
      }
      if (!os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
        return 4294956449;
      v25 = 136315394;
      v26 = "AUEndpointVAD3.cpp";
      v27 = 1024;
      v28 = 457;
      v24 = "%25s:%-5d The top-level parameter data structure is not saved internally! Instead, you should query specific"
            " AU properties individually.";
      goto LABEL_96;
    case 65011:
      v10 = *(_QWORD *)(*((_QWORD *)this + 68) + 32);
      goto LABEL_19;
    case 65012:
      v11 = *(_QWORD *)(*((_QWORD *)this + 68) + 32);
      goto LABEL_21;
    case 65013:
      v12 = *(_QWORD *)(*((_QWORD *)this + 68) + 32);
      v13 = *(_DWORD *)(v12 + 160);
      v14 = *(_QWORD *)(v12 + 24);
      v15 = (float **)a5;
      v16 = 10;
      goto LABEL_27;
    case 65014:
      result = 0;
      v9 = 10;
      goto LABEL_74;
    case 65015:
      result = 0;
      v9 = *(_DWORD *)(*((_QWORD *)this + 68) + 84);
      goto LABEL_74;
    case 65016:
      v10 = *(_QWORD *)(*((_QWORD *)this + 68) + 48);
LABEL_19:
      v17 = *(_QWORD *)(*(_QWORD *)(v10 + 112) + 48);
      memcpy(a5[2], *(const void **)(v17 + 16), *(unsigned int *)(v17 + 12));
      result = 0;
      v18 = *(_DWORD *)(v17 + 12);
      *((_DWORD *)a5 + 2) = v18;
      *((_DWORD *)a5 + 3) = v18;
      return result;
    case 65017:
      v11 = *(_QWORD *)(*((_QWORD *)this + 68) + 48);
LABEL_21:
      (*(void (**)(_QWORD, void **))(**(_QWORD **)(v11 + 8) + 40))(*(_QWORD *)(v11 + 8), a5);
      return 0;
    case 65018:
      v19 = *((_QWORD *)this + 68);
      v16 = *(_DWORD *)(v19 + 88) + 19;
      v20 = *(_QWORD *)(v19 + 48);
      v13 = *(_DWORD *)(v20 + 160);
      v14 = *(_QWORD *)(v20 + 24);
      goto LABEL_26;
    case 65019:
      result = 0;
      v9 = *(_DWORD *)(*((_QWORD *)this + 68) + 88) + 19;
      goto LABEL_74;
    case 65020:
      result = 0;
      v9 = *(_DWORD *)(*((_QWORD *)this + 68) + 88);
      goto LABEL_74;
    case 65021:
      v21 = *((_QWORD *)this + 68);
      v16 = *(_DWORD *)(v21 + 92);
      v13 = *(_DWORD *)(v21 + 80);
      v14 = *(_QWORD *)(v21 + 64);
LABEL_26:
      v15 = (float **)a5;
LABEL_27:
      EndpointVAD2::GetInterleavedFeaturesFromQueue(v15, v16, v13, v14);
      return 0;
    case 65022:
      result = 0;
      *(_BYTE *)a5 = *(_DWORD *)(*((_QWORD *)this + 68) + 24) == 0;
      return result;
    case 65023:
      if (EndpointVAD3LogScope(void)::once != -1)
        dispatch_once(&EndpointVAD3LogScope(void)::once, &__block_literal_global_8_17324);
      if (EndpointVAD3LogScope(void)::scope)
      {
        v8 = *(NSObject **)EndpointVAD3LogScope(void)::scope;
        if (!*(_QWORD *)EndpointVAD3LogScope(void)::scope)
          return 4294956449;
      }
      else
      {
        v8 = MEMORY[0x1E0C81028];
      }
      if (!os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
        return 4294956449;
      v25 = 136315394;
      v26 = "AUEndpointVAD3.cpp";
      v27 = 1024;
      v28 = 544;
      v24 = "%25s:%-5d kAUEndpointVAD3Property_EventHandler is write-only.";
      goto LABEL_96;
    case 65024:
      if (EndpointVAD3LogScope(void)::once != -1)
        dispatch_once(&EndpointVAD3LogScope(void)::once, &__block_literal_global_8_17324);
      if (EndpointVAD3LogScope(void)::scope)
      {
        v8 = *(NSObject **)EndpointVAD3LogScope(void)::scope;
        if (!*(_QWORD *)EndpointVAD3LogScope(void)::scope)
          return 4294956449;
      }
      else
      {
        v8 = MEMORY[0x1E0C81028];
      }
      if (!os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
        return 4294956449;
      v25 = 136315394;
      v26 = "AUEndpointVAD3.cpp";
      v27 = 1024;
      v28 = 549;
      v24 = "%25s:%-5d kAUEndpointVAD3Property_DoneProcessingAudioForNonRealTimeDecode is write-only.";
      goto LABEL_96;
    case 65025:
      result = 0;
      v22 = *(_DWORD *)(*((_QWORD *)this + 68) + 136);
      goto LABEL_48;
    case 65026:
      result = 0;
      v22 = *(_DWORD *)(*((_QWORD *)this + 68) + 140);
      goto LABEL_48;
    case 65027:
      result = 0;
      v22 = *(_DWORD *)(*((_QWORD *)this + 68) + 144);
      goto LABEL_48;
    case 65028:
      result = 0;
      v22 = *(_DWORD *)(*((_QWORD *)this + 68) + 148);
      goto LABEL_48;
    case 65029:
      result = 0;
      v22 = *(_DWORD *)(*((_QWORD *)this + 68) + 152);
      goto LABEL_48;
    case 65030:
      result = 0;
      v22 = *(_DWORD *)(*((_QWORD *)this + 68) + 156);
      goto LABEL_48;
    case 65031:
      result = 0;
      v22 = *(_DWORD *)(*((_QWORD *)this + 68) + 160);
      goto LABEL_48;
    case 65032:
      result = 0;
      v22 = *(_DWORD *)(*((_QWORD *)this + 68) + 164);
LABEL_48:
      *(_DWORD *)a5 = v22;
      return result;
    case 65033:
      if (EndpointVAD3LogScope(void)::once != -1)
        dispatch_once(&EndpointVAD3LogScope(void)::once, &__block_literal_global_8_17324);
      if (EndpointVAD3LogScope(void)::scope)
      {
        v8 = *(NSObject **)EndpointVAD3LogScope(void)::scope;
        if (!*(_QWORD *)EndpointVAD3LogScope(void)::scope)
          return 4294956449;
      }
      else
      {
        v8 = MEMORY[0x1E0C81028];
      }
      if (!os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
        return 4294956449;
      v25 = 136315394;
      v26 = "AUEndpointVAD3.cpp";
      v27 = 1024;
      v28 = 594;
      v24 = "%25s:%-5d kAUEndpointVAD3Property_RecurrentVADSpeechDetectionEvent cannot be directly accessed.";
      goto LABEL_96;
    case 65034:
      if (EndpointVAD3LogScope(void)::once != -1)
        dispatch_once(&EndpointVAD3LogScope(void)::once, &__block_literal_global_8_17324);
      if (EndpointVAD3LogScope(void)::scope)
      {
        v8 = *(NSObject **)EndpointVAD3LogScope(void)::scope;
        if (!*(_QWORD *)EndpointVAD3LogScope(void)::scope)
          return 4294956449;
      }
      else
      {
        v8 = MEMORY[0x1E0C81028];
      }
      if (!os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
        return 4294956449;
      v25 = 136315394;
      v26 = "AUEndpointVAD3.cpp";
      v27 = 1024;
      v28 = 599;
      v24 = "%25s:%-5d kAUEndpointVAD3Property_RecurrentVADNonspeechDetectionEvent cannot be directly accessed.";
      goto LABEL_96;
    case 65035:
      if (EndpointVAD3LogScope(void)::once != -1)
        dispatch_once(&EndpointVAD3LogScope(void)::once, &__block_literal_global_8_17324);
      if (EndpointVAD3LogScope(void)::scope)
      {
        v8 = *(NSObject **)EndpointVAD3LogScope(void)::scope;
        if (!*(_QWORD *)EndpointVAD3LogScope(void)::scope)
          return 4294956449;
      }
      else
      {
        v8 = MEMORY[0x1E0C81028];
      }
      if (!os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
        return 4294956449;
      v25 = 136315394;
      v26 = "AUEndpointVAD3.cpp";
      v27 = 1024;
      v28 = 604;
      v24 = "%25s:%-5d kAUEndpointVAD3Property_EndpointerSpeechDetectionEvent cannot be directly accessed.";
      goto LABEL_96;
    case 65036:
      if (EndpointVAD3LogScope(void)::once != -1)
        dispatch_once(&EndpointVAD3LogScope(void)::once, &__block_literal_global_8_17324);
      if (EndpointVAD3LogScope(void)::scope)
      {
        v8 = *(NSObject **)EndpointVAD3LogScope(void)::scope;
        if (!*(_QWORD *)EndpointVAD3LogScope(void)::scope)
          return 4294956449;
      }
      else
      {
        v8 = MEMORY[0x1E0C81028];
      }
      if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
      {
        v25 = 136315394;
        v26 = "AUEndpointVAD3.cpp";
        v27 = 1024;
        v28 = 609;
        v24 = "%25s:%-5d kAUEndpointVAD3Property_EndpointerNonspeechDetectionEvent cannot be directly accessed.";
LABEL_96:
        _os_log_impl(&dword_1B5ED0000, v8, OS_LOG_TYPE_DEFAULT, v24, (uint8_t *)&v25, 0x12u);
      }
      return 4294956449;
    case 65037:
    case 65038:
    case 65039:
    case 65040:
    case 65041:
    case 65042:
      return result;
    case 65043:
      result = 0;
      v23 = *(_QWORD *)(*((_QWORD *)this + 68) + 32);
      goto LABEL_71;
    case 65044:
      result = 0;
      v23 = *(_QWORD *)(*((_QWORD *)this + 68) + 48);
LABEL_71:
      *(double *)a5 = *(float *)(v23 + 164);
      return result;
    case 65045:
      result = 0;
      *a5 = (void *)(*((_QWORD *)this + 68) + 536);
      return result;
    default:
      if (a2 == 3700)
      {
        result = 0;
        v9 = *((unsigned __int8 *)this + 376);
      }
      else
      {
        if (a2 != 21)
          return result;
        v9 = (*(uint64_t (**)(AUEndpointVAD3 *))(*(_QWORD *)this + 576))(this);
        result = 0;
      }
LABEL_74:
      *(_DWORD *)a5 = v9;
      break;
  }
  return result;
}

uint64_t AUEndpointVAD3::SetProperty(AUEndpointVAD3 *this, int a2, int a3, unsigned int a4, CFDictionaryRef theDict, unsigned int a6)
{
  uint64_t result;
  double v9;
  int v10;
  int v11;
  const __CFDictionary *Value;
  const __CFDictionary *v13;
  const __CFDictionary *v14;
  const __CFDictionary *v15;
  const __CFDictionary *v16;
  const __CFDictionary **v17;
  const __CFDictionary **v18;
  const __CFDictionary **v19;
  const __CFDictionary **v20;
  const __CFDictionary **v21;

  if (a3)
    return 4294956417;
  result = 4294956431;
  switch(a2)
  {
    case 65010:
      if (*((_BYTE *)this + 17))
        return 4294956447;
      Value = (const __CFDictionary *)CFDictionaryGetValue(theDict, CFSTR("CommonParameters"));
      v13 = (const __CFDictionary *)CFDictionaryGetValue(theDict, CFSTR("ConfigurationParameters"));
      v14 = (const __CFDictionary *)CFDictionaryGetValue(theDict, CFSTR("ULDATParameters"));
      v15 = (const __CFDictionary *)CFDictionaryGetValue(theDict, CFSTR("ASAParameters"));
      v16 = (const __CFDictionary *)CFDictionaryGetValue(theDict, CFSTR("ViterbiParameters"));
      EndpointVAD2::SetProperties(Value, (CFTypeRef *)(*((_QWORD *)this + 68) + 168), v17);
      EndpointVAD2::SetProperties(v13, (CFTypeRef *)(*((_QWORD *)this + 68) + 176), v18);
      EndpointVAD2::SetProperties(v14, (CFTypeRef *)(*((_QWORD *)this + 68) + 184), v19);
      EndpointVAD2::SetProperties(v15, (CFTypeRef *)(*((_QWORD *)this + 68) + 192), v20);
      EndpointVAD2::SetProperties(v16, (CFTypeRef *)(*((_QWORD *)this + 68) + 200), v21);
      result = 0;
      *((_BYTE *)this + 552) = 1;
      return result;
    case 65011:
    case 65012:
    case 65013:
    case 65014:
    case 65015:
    case 65016:
    case 65017:
    case 65018:
    case 65019:
    case 65020:
    case 65021:
    case 65033:
    case 65034:
    case 65035:
    case 65036:
    case 65037:
    case 65038:
    case 65039:
    case 65040:
    case 65041:
    case 65042:
    case 65043:
    case 65044:
      return result;
    case 65022:
      result = 0;
      *(_DWORD *)(*((_QWORD *)this + 68) + 24) = *(_BYTE *)theDict == 0;
      return result;
    case 65023:
      AUEndpointVAD3::AddObserver(this, (uint64_t)theDict);
      goto LABEL_25;
    case 65024:
      if (*(_BYTE *)theDict)
      {
        ausdk::AUScope::SafeGetElement((AUEndpointVAD3 *)((char *)this + 80), 0);
        EndpointVAD3::DoneProcessingAudio(*((EndpointVAD3 **)this + 68), v9);
      }
      goto LABEL_25;
    case 65025:
      result = 0;
      *(_DWORD *)(*((_QWORD *)this + 68) + 136) = *(_DWORD *)theDict;
      return result;
    case 65026:
      result = 0;
      *(_DWORD *)(*((_QWORD *)this + 68) + 140) = *(_DWORD *)theDict;
      return result;
    case 65027:
      result = 0;
      *(_DWORD *)(*((_QWORD *)this + 68) + 144) = *(_DWORD *)theDict;
      return result;
    case 65028:
      result = 0;
      *(_DWORD *)(*((_QWORD *)this + 68) + 148) = *(_DWORD *)theDict;
      return result;
    case 65029:
      result = 0;
      *(_DWORD *)(*((_QWORD *)this + 68) + 152) = *(_DWORD *)theDict;
      return result;
    case 65030:
      result = 0;
      *(_DWORD *)(*((_QWORD *)this + 68) + 156) = *(_DWORD *)theDict;
      return result;
    case 65031:
      result = 0;
      *(_DWORD *)(*((_QWORD *)this + 68) + 160) = *(_DWORD *)theDict;
      return result;
    case 65032:
      result = 0;
      *(_DWORD *)(*((_QWORD *)this + 68) + 164) = *(_DWORD *)theDict;
      return result;
    default:
      if (a2 == 3700)
        return result;
      if (a2 != 21)
        return 4294956417;
      if (a6 >= 4)
      {
        v10 = *(_DWORD *)theDict;
        v11 = *(_DWORD *)theDict != 0;
        if (v11 != (*(unsigned int (**)(AUEndpointVAD3 *))(*(_QWORD *)this + 576))(this))
          (*(void (**)(AUEndpointVAD3 *, BOOL))(*(_QWORD *)this + 584))(this, v10 != 0);
LABEL_25:
        result = 0;
      }
      else
      {
        result = 4294956445;
      }
      break;
  }
  return result;
}

uint64_t AUEndpointVAD3::CanScheduleParameters(AUEndpointVAD3 *this)
{
  return 0;
}

uint64_t AUEndpointVAD3::ProcessMultipleBufferLists(AUEndpointVAD3 *this, unsigned int *a2, uint64_t a3, unsigned int a4, const AudioBufferList **a5, unsigned int a6, AudioBufferList **a7)
{
  int v11;
  double v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  double v16;
  double v17;
  uint64_t v18;
  const AudioBufferList *v19;
  int v20;
  double v21;
  unsigned int v22;
  unsigned int i;
  uint64_t v24;
  int **v25;
  int *v26;
  int *v27;
  float *v28;
  uint64_t v29;
  int *v30;
  float v31;
  unsigned int v32;
  unint64_t v33;
  int *v34;
  int v35;
  int v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  _DWORD *v41;
  int *v42;
  int v43;
  _QWORD *j;
  void *mData;
  void *v46;
  uint64_t result;
  NSObject *v48;
  int v49;
  float v50;
  uint64_t v51;
  int v52;
  double v53;
  double v54;
  double v55;
  uint64_t v56;
  uint64_t v57;
  double v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  void *__p;
  void *v63;
  uint64_t v64;
  void *v65;
  void *v66;
  uint64_t v67;
  void *v68;
  void *v69;
  uint64_t v70;
  void *v71;
  void *v72;
  uint64_t v73;
  void *v74;
  char v75;
  _BYTE info[24];
  uint64_t v77;
  uint64_t v78;

  v78 = *MEMORY[0x1E0C80C00];
  v11 = *((_DWORD *)this + 146);
  *((_DWORD *)this + 146) = v11 + 1;
  v12 = *((double *)this + 75);
  if (!v11)
  {
    v13 = *((_QWORD *)this + 35);
    mach_timebase_info((mach_timebase_info_t)info);
    LODWORD(v15) = *(_DWORD *)info;
    LODWORD(v14) = *(_DWORD *)&info[4];
    *((double *)this + 74) = (double)v13 / ((double)v14 / (double)v15 * 1000000000.0);
  }
  v16 = *(double *)(ausdk::AUScope::SafeGetElement((AUEndpointVAD3 *)((char *)this + 80), 0) + 80);
  if (*((_BYTE *)this + 376) && *((_DWORD *)this + 84) != (_DWORD)a3)
  {
    if (EndpointVAD3LogScope(void)::once != -1)
      dispatch_once(&EndpointVAD3LogScope(void)::once, &__block_literal_global_8_17324);
    if (EndpointVAD3LogScope(void)::scope)
    {
      v48 = *(NSObject **)EndpointVAD3LogScope(void)::scope;
      if (!*(_QWORD *)EndpointVAD3LogScope(void)::scope)
        return 4294956422;
    }
    else
    {
      v48 = MEMORY[0x1E0C81028];
    }
    if (os_log_type_enabled(v48, OS_LOG_TYPE_ERROR))
    {
      v49 = *((_DWORD *)this + 84);
      *(_DWORD *)info = 136315906;
      *(_QWORD *)&info[4] = "AUEndpointVAD3.cpp";
      *(_WORD *)&info[12] = 1024;
      *(_DWORD *)&info[14] = 908;
      *(_WORD *)&info[18] = 1024;
      *(_DWORD *)&info[20] = a3;
      LOWORD(v77) = 1024;
      *(_DWORD *)((char *)&v77 + 2) = v49;
      _os_log_impl(&dword_1B5ED0000, v48, OS_LOG_TYPE_ERROR, "%25s:%-5d Incorrect number of input samples! Received %d, but expected %d.", info, 0x1Eu);
    }
    return 4294956422;
  }
  if (((*(uint64_t (**)(AUEndpointVAD3 *))(*(_QWORD *)this + 576))(this) & 1) == 0)
  {
    v18 = *((_QWORD *)this + 68);
    v19 = *a5;
    std::string::basic_string[abi:ne180100]<0>(&v74, "");
    ++*(_DWORD *)(v18 + 528);
    v20 = *(_DWORD *)(*(_QWORD *)(v18 + 64) + 88);
    v21 = v12 / v16;
    FeaturesDSPWrapper::ProcessAudio(*(FeaturesDSPWrapper **)(v18 + 32), v19, v21, a3);
    FeaturesDSPWrapper::ProcessAudio(*(FeaturesDSPWrapper **)(v18 + 48), v19, v21, a3);
    v71 = 0;
    v72 = 0;
    v73 = 0;
    v68 = 0;
    v69 = 0;
    v70 = 0;
    v65 = 0;
    v66 = 0;
    v67 = 0;
    __p = 0;
    v63 = 0;
    v64 = 0;
    FeaturesDSPWrapper::GetCurrentProcessedFeatures(*(_QWORD *)(v18 + 32), (float **)&v71);
    FeaturesDSPWrapper::GetCurrentProcessedSuperFeatures(*(_QWORD **)(v18 + 32), (float **)&v68);
    FeaturesDSPWrapper::GetCurrentProcessedFeatures(*(_QWORD *)(v18 + 48), (float **)&v65);
    FeaturesDSPWrapper::GetCurrentProcessedSuperFeatures(*(_QWORD **)(v18 + 48), (float **)&__p);
    v22 = *(_DWORD *)(*(_QWORD *)(v18 + 64) + 88) - v20;
    *(_DWORD *)(v18 + 80) = v22;
    if (v22)
    {
      for (i = 0; i < v22; ++i)
      {
        ++*(_DWORD *)(v18 + 528);
        v24 = *(_QWORD *)(v18 + 64);
        *(_DWORD *)info = i - v22;
        VectorTimeSeriesSynchronizer<float>::GetSynchronizedVector(v24, info, *(_QWORD *)(v18 + 336));
        v25 = *(int ***)(v18 + 344);
        v26 = *v25;
        v27 = v25[1];
        if (v26 == v27)
        {
          v32 = 0;
        }
        else
        {
          v28 = *(float **)(*(_QWORD *)(v18 + 336) + 24);
          v29 = (uint64_t)(*(_QWORD *)(*(_QWORD *)(v18 + 336) + 32) - (_QWORD)v28) >> 2;
          v30 = v26;
          do
          {
            if (!v29)
              __assert_rtn("ElementAt", "FeatureTimeSeries.h", 84, "index < mArray.size()");
            v31 = *v28++;
            *v30++ = (v31 + 0.5);
            --v29;
          }
          while (v30 != v27);
          v32 = 0;
          v33 = v27 - v26;
          v34 = *(int **)(v18 + 896);
          if (v33 <= 1)
            v33 = 1;
          do
          {
            v36 = *v26++;
            v35 = v36;
            v37 = *v34++;
            v32 += v37 * v35;
            --v33;
          }
          while (v33);
        }
        v38 = *(_QWORD *)(v18 + 104);
        if (*(_BYTE *)(v18 + 360))
        {
          v17 = MixViterbiProd::Update(v38, *(_DWORD *)(v18 + 364), v32, (_OWORD *)(*(_QWORD *)(v18 + 336) + 48));
        }
        else
        {
          v17 = MixViterbiProd::Initialize(v38, v32, (_OWORD *)(*(_QWORD *)(v18 + 336) + 48));
          *(_BYTE *)(v18 + 360) = 1;
        }
        *(_DWORD *)(v18 + 364) = v32;
        v39 = *(_QWORD *)(v18 + 104);
        v40 = *(unsigned int *)(v39 + 72);
        v41 = *(_DWORD **)(v18 + 264);
        if ((uint64_t)(*(_QWORD *)(v18 + 272) - (_QWORD)v41) >> 2 < v40)
          v40 = (uint64_t)(*(_QWORD *)(v18 + 272) - (_QWORD)v41) >> 2;
        if (v40)
        {
          v42 = *(int **)(v39 + 296);
          do
          {
            v43 = *v42++;
            *v41++ = v43;
            --v40;
          }
          while (v40);
        }
        if (((*(_QWORD *)(v18 + 576) - *(_QWORD *)(v18 + 568)) & 0x3FFFFFFFCLL) == 4)
        {
          v17 = *(double *)(*(_QWORD *)(v18 + 336) + 56);
          *(_QWORD *)info = &off_1E69DF828;
          *(_QWORD *)&info[8] = 4;
          *(double *)&info[16] = v17;
          v77 = v18 + 264;
          for (j = *(_QWORD **)(v18 + 504); j != *(_QWORD **)(v18 + 512); ++j)
            (*(void (**)(_QWORD, _BYTE *))(*(_QWORD *)*j + 16))(*j, info);
        }
        v22 = *(_DWORD *)(v18 + 80);
      }
    }
    if (__p)
    {
      v63 = __p;
      operator delete(__p);
    }
    if (v65)
    {
      v66 = v65;
      operator delete(v65);
    }
    if (v68)
    {
      v69 = v68;
      operator delete(v68);
    }
    if (v71)
    {
      v72 = v71;
      operator delete(v71);
    }
    if (v75 < 0)
      operator delete(v74);
    if (!*(_DWORD *)(v18 + 24))
    {
      v50 = *(float *)(v18 + 136);
      v51 = *(_QWORD *)(v18 + 104);
      v52 = *(unsigned __int8 *)(v51 + 232);
      v53 = 0.0;
      if (!*(_BYTE *)(v51 + 232))
      {
        MRRingBuffer<DataTimeStamp>::GetSample(*(_QWORD *)(v51 + 192), *(_DWORD *)(v51 + 224) - 1);
        v53 = v54;
      }
      v55 = v50;
      std::vector<std::vector<float>>::__clear[abi:ne180100]((uint64_t *)(v18 + 432));
      std::vector<std::vector<float>>::__clear[abi:ne180100]((uint64_t *)(v18 + 456));
      v56 = *(_QWORD *)(v18 + 480);
      v57 = *(_QWORD *)(v18 + 488);
      while (v57 != v56)
      {
        v57 -= 24;
        *(_QWORD *)info = v57;
        std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)info);
      }
      v58 = v21 - v55;
      *(_QWORD *)(v18 + 488) = v56;
      *(_QWORD *)(v18 + 416) = *(_QWORD *)(v18 + 408);
      v59 = *(_QWORD *)(v18 + 104);
      if (v52 || v58 > v53)
      {
        *(_DWORD *)info = 0;
        if (MixViterbiProd::getForceDecodeTimeFramesRelativeToPresent((MixViterbiProd *)v59, v58, (int *)info)
          && *(int *)info > *(_DWORD *)(v59 + 216))
        {
          MixViterbiProd::updateDecode_Post(v59, (_QWORD *)(v18 + 432), (char **)(v18 + 408), (uint64_t *)(v18 + 456), *(int *)info);
        }
      }
      else
      {
        if (*(_BYTE *)(v59 + 232))
          __assert_rtn("DecodeFromConvergence_Post", "MixViterbiProd.cpp", 204, "!mNeverConverged");
        MixViterbiProd::updateDecode_Post(*(_QWORD *)(v18 + 104), (_QWORD *)(v18 + 432), (char **)(v18 + 408), (uint64_t *)(v18 + 456), *(_DWORD *)(v59 + 224));
      }
      if (*(_QWORD *)(v18 + 440) != *(_QWORD *)(v18 + 432) && *(_QWORD *)(v18 + 416) != *(_QWORD *)(v18 + 408))
      {
        EndpointVAD3::TranslateFullPosteriorsToMarginalized(v18, (float ***)(v18 + 456), (uint64_t *)(v18 + 480), *(unsigned int ***)(v18 + 376), (int **)(v18 + 384));
        v60 = *(_QWORD *)(v18 + 112);
        if (*(_QWORD *)(v18 + 120) != v60)
        {
          v61 = 0;
          do
          {
            EndpointVAD3::UpdateAndDispatchDecisions(v18, (uint64_t **)(v18 + 432), *(_QWORD **)(v18 + 480), (uint64_t *)(v18 + 408), *(_QWORD *)(v60 + 8 * v61), v61);
            ++v61;
            v60 = *(_QWORD *)(v18 + 112);
          }
          while (v61 < (*(_QWORD *)(v18 + 120) - v60) >> 3);
        }
      }
    }
  }
  mData = (*a5)->mBuffers[0].mData;
  v46 = (*a7)->mBuffers[0].mData;
  if (mData != v46)
    memcpy(v46, mData, (*a5)->mBuffers[0].mDataByteSize);
  result = 0;
  LODWORD(v17) = *((_DWORD *)this + 84);
  *((double *)this + 75) = *((double *)this + 75) + (double)*(unint64_t *)&v17;
  return result;
}

